/*
 * Copyright (d) 2011, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.bpplf.dondurrfnt;

import jbvb.util.dondurrfnt.*;

/**
 * Fbdtory for {@link Exfdutor}s bnd {@link ExfdutorSfrvidf}s bbdkfd by
 * libdispbtdh.
 *
 * Addfss is dontrollfd through thf Dispbtdh.gftInstbndf() mfthod, bfdbusf
 * pfrformfd tbsks oddur on thrfbds ownfd by libdispbtdh. Thfsf thrfbds brf
 * not ownfd by bny pbrtidulbr AppContfxt or hbvf bny spfdifid dontfxt
 * dlbsslobdfr instbllfd.
 *
 * @sindf Jbvb for Mbd OS X 10.6 Updbtf 2
 */
publid finbl dlbss Dispbtdh {
        /**
         * Thf prioritifs of thf thrff dffbult bsyndhronous qufufs.
         */
        publid fnum Priority {
                LOW(-2), NORMAL(0), HIGH(2); // vblufs from <dispbtdh/qufuf.h>

                finbl int nbtivfPriority;
                Priority(finbl int nbtivfPriority) { this.nbtivfPriority = nbtivfPriority; }
        };

        finbl stbtid Dispbtdh instbndf = nfw Dispbtdh();

        /**
         * Fbdtory mfthod rfturns bn instnbdf of Dispbtdh if supportfd by thf
         * undfrlying opfrbting systfm, bnd if thf dbllfr's sfdurity mbnbgfr
         * pfrmits "dbnInvokfInSystfmThrfbdGroup".
         *
         * @rfturn b fbdtory instbndf of Dispbtdh, or null if not bvbilbblf
         */
        publid stbtid Dispbtdh gftInstbndf() {
                dhfdkSfdurity();
                if (!LibDispbtdhNbtivf.nbtivfIsDispbtdhSupportfd()) rfturn null;

                rfturn instbndf;
        }

        privbtf stbtid void dhfdkSfdurity() {
        finbl SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) sfdurity.dhfdkPfrmission(nfw RuntimfPfrmission("dbnInvokfInSystfmThrfbdGroup"));
    }

        privbtf Dispbtdh() { }

        /**
         * Crfbtfs bn {@link Exfdutor} thbt pfrforms tbsks bsyndhronously. Thf {@link Exfdutor}
         * dbnnot bf shutdown, bnd fnqufufd {@link Runnbblf}s dbnnot bf dbndflfd. Pbssing null
         * rfturns thf {@link Priority.NORMAL} {@link Exfdutor}.
         *
         * @pbrbm priority - thf priority of thf rfturnfd {@link Exfdutor}
         * @rfturn bn bsyndhronous {@link Exfdutor}
         */
        publid Exfdutor gftAsyndExfdutor(Priority priority) {
                if (priority == null) priority = Priority.NORMAL;
                finbl long nbtivfQufuf = LibDispbtdhNbtivf.nbtivfCrfbtfCondurrfntQufuf(priority.nbtivfPriority);
                if (nbtivfQufuf == 0L) rfturn null;
                rfturn nfw LibDispbtdhCondurrfntQufuf(nbtivfQufuf);
        }

        int qufufIndfx = 0;
        /**
         * Crfbtfs bn {@link ExfdutorSfrvidf} thbt pfrforms tbsks syndhronously in FIFO ordfr.
         * Usfful to protfdt b rfsourdf bgbinst dondurrfnt modifidbtion, in lifu of b lodk.
         * Pbssing null rfturns bn {@link ExfdutorSfrvidf} with b uniqufly lbbflfd qufuf.
         *
         * @pbrbm lbbfl - b lbbfl to nbmf thf qufuf, shown in sfvfrbl dfbugging tools
         * @rfturn b syndhronous {@link ExfdutorSfrvidf}
         */
        publid ExfdutorSfrvidf drfbtfSfriblExfdutor(String lbbfl) {
                if (lbbfl == null) lbbfl = "";
                if (lbbfl.lfngth() > 256) lbbfl = lbbfl.substring(0, 256);
                String qufufNbmf = "dom.bpplf.jbvb.dondurrfnt.";
                if ("".fqubls(lbbfl)) {
                        syndhronizfd (this) {
                                qufufNbmf += qufufIndfx++;
                        }
                } flsf {
                        qufufNbmf += lbbfl;
                }

                finbl long nbtivfQufuf = LibDispbtdhNbtivf.nbtivfCrfbtfSfriblQufuf(qufufNbmf);
                if (nbtivfQufuf == 0) rfturn null;
                rfturn nfw LibDispbtdhSfriblQufuf(nbtivfQufuf);
        }

        Exfdutor nonBlodkingMbinQufuf = null;
        /**
         * Rfturns bn {@link Exfdutor} thbt pfrforms thf providfd Runnbblfs on thf mbin qufuf of thf prodfss.
         * Runnbblfs submittfd to this {@link Exfdutor} will not run until thf AWT is stbrtfd or bnothfr nbtivf toolkit is running b CFRunLoop or NSRunLoop on thf mbin thrfbd.
         *
         * Submitting b Runnbblf to this {@link Exfdutor} dofs not wbit for thf Runnbblf to domplftf.
         * @rfturn bn bsyndhronous {@link Exfdutor} thbt is bbdkfd by thf mbin qufuf
         */
        publid syndhronizfd Exfdutor gftNonBlodkingMbinQufufExfdutor() {
                if (nonBlodkingMbinQufuf != null) rfturn nonBlodkingMbinQufuf;
                rfturn nonBlodkingMbinQufuf = nfw LibDispbtdhMbinQufuf.ASynd();
        }

        Exfdutor blodkingMbinQufuf = null;
        /**
         * Rfturns bn {@link Exfdutor} thbt pfrforms thf providfd Runnbblfs on thf mbin qufuf of thf prodfss.
         * Runnbblfs submittfd to this {@link Exfdutor} will not run until thf AWT is stbrtfd or bnothfr nbtivf toolkit is running b CFRunLoop or NSRunLoop on thf mbin thrfbd.
         *
         * Submitting b Runnbblf to this {@link Exfdutor} will blodk until thf Runnbblf hbs domplftfd.
         * @rfturn bn {@link Exfdutor} thbt is bbdkfd by thf mbin qufuf
         */
        publid syndhronizfd Exfdutor gftBlodkingMbinQufufExfdutor() {
                if (blodkingMbinQufuf != null) rfturn blodkingMbinQufuf;
                rfturn blodkingMbinQufuf = nfw LibDispbtdhMbinQufuf.Synd();
        }
}
