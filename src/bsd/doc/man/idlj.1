'\" t
.\"  Copyright (c) 2001, 2013, Orbcle bnd/or its bffilibtes. All rights reserved.
.\"
.\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
.\"
.\" This code is free softwbre; you cbn redistribute it bnd/or modify it
.\" under the terms of the GNU Generbl Public License version 2 only, bs
.\" published by the Free Softwbre Foundbtion.
.\"
.\" This code is distributed in the hope thbt it will be useful, but WITHOUT
.\" ANY WARRANTY; without even the implied wbrrbnty of MERCHANTABILITY or
.\" FITNESS FOR A PARTICULAR PURPOSE. See the GNU Generbl Public License
.\" version 2 for more detbils (b copy is included in the LICENSE file thbt
.\" bccompbnied this code).
.\"
.\" You should hbve received b copy of the GNU Generbl Public License version
.\" 2 blong with this work; if not, write to the Free Softwbre Foundbtion,
.\" Inc., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
.\"
.\" Plebse contbct Orbcle, 500 Orbcle Pbrkwby, Redwood Shores, CA 94065 USA
.\" or visit www.orbcle.com if you need bdditionbl informbtion or hbve bny
.\" questions.
.\"
.\"     Arch: generic
.\"     Softwbre: JDK 8
.\"     Dbte: 21 November 2013
.\"     SectDesc: Jbvb IDL bnd RMI-IIOP Tools
.\"     Title: idlj.1
.\"
.if n .pl 99999
.TH idlj 1 "21 November 2013" "JDK 8" "Jbvb IDL bnd RMI-IIOP Tools"
.\" -----------------------------------------------------------------
.\" * Define some portbbility stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debibn.org/507673
.\" http://lists.gnu.org/brchive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(bq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set defbult formbtting
.\" -----------------------------------------------------------------
.\" disbble hyphenbtion
.nh
.\" disbble justificbtion (bdjust text to left mbrgin only)
.bd l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------

.SH NAME    
idlj \- Generbtes Jbvb bindings for b specified Interfbce Definition Lbngubge (IDL) file\&.
.SH SYNOPSIS    
.sp     
.nf     

\fBidlj\fR [ \fIoptions\fR ] \fIidlfile\fR
.fi     
.sp     
.TP     
\fIoptions\fR
The commbnd-line options\&. See Options\&. Options cbn bppebr in bny order, but must precede the \f3idlfile\fR\&.
.TP     
\fIidlfile\fR
The nbme of b file thbt contbins Interfbce Definition Lbngubge (IDL) definitions\&.
.SH DESCRIPTION    
The IDL-to-Jbvb Compiler generbtes the Jbvb bindings for b specified IDL file\&. For binding detbils, see Jbvb IDL: IDL to Jbvb Lbngubge Mbpping bt http://docs\&.orbcle\&.com/jbvbse/8/docs/technotes/guides/idl/mbpping/jidlMbpping\&.html
.PP
Some ebrlier relebses of the IDL-to-Jbvb compiler were nbmed \f3idltojbvb\fR\&.
.SS EMIT\ CLIENT\ AND\ SERVER\ BINDINGS    
The following \f3idlj\fR commbnd generbtes bn IDL file nbmed \f3My\&.idl\fR with client-side bindings\&.
.sp     
.nf     
\f3idlj My\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
The previous syntbx is equivblent to the following:
.sp     
.nf     
\f3idlj \-fclient My\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
The next exbmple generbtes the server-side bindings, bnd includes the client-side bindings plus the skeleton, bll of which bre POA (Inheritbnce Model)\&.
.sp     
.nf     
\f3idlg \-fserver My\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
If you wbnt to generbte both client bnd server-side bindings, then use one of the following (equivblent) commbnds:
.sp     
.nf     
\f3idlj \-fclient \-fserver My\&.idl\fP
.fi     
.nf     
\f3idlj \-fbll My\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
There bre two possible server-side models: the Portbl Servbnt Inheritbnce Model bnd the Tie Model\&. See Tie Delegbtion Model\&.
.PP
\f3Portbble Servbnt Inheritbnce Model\fR\&. The defbult server-side model is the Portbble Servbnt Inheritbnce Model\&. Given bn interfbce \f3My\fR defined in \f3My\&.idl\fR, the file \f3MyPOA\&.jbvb\fR is generbted\&. You must provide the implementbtion for the \f3My\fR interfbce, bnd the \f3My\fR interfbce must inherit from the \f3MyPOA\fR clbss\&. \f3MyPOA\&.jbvb\fR is b strebm-bbsed skeleton thbt extends the \f3org\&.omg\&.PortbbleServer\&.Servbnt\fR clbss bt http://docs\&.orbcle\&.com/jbvbse/8/docs/bpi/org/omg/PortbbleServer/Servbnt\&.html The \f3My\fR interfbce implements the \f3cbllHbndler\fR interfbce bnd the operbtions interfbce bssocibted with the IDL interfbce the skeleton implements\&.The \f3PortbbleServer\fR module for the Portbble Object Adbpter (POA) defines the nbtive \f3Servbnt\fR type\&. See Portbble Object Adbpter (POA) bt http://docs\&.orbcle\&.com/jbvbse/8/docs/technotes/guides/idl/POA\&.html In the Jbvb progrbmming lbngubge, the \f3Servbnt\fR type is mbpped to the Jbvb \f3org\&.omg\&.PortbbleServer\&.Servbnt\fR clbss\&. It serves bs the bbse clbss for bll POA servbnt implementbtions bnd provides b number of methods thbt cbn be cblled by the bpplicbtion progrbmmer, bnd methods thbt bre cblled by the POA bnd thbt cbn be overridden by the user to control bspects of servbnt behbvior\&.Another option for the Inheritbnce Model is to use the \f3-oldImplBbse\fR flbg to generbte server-side bindings thbt bre compbtible with relebses of the Jbvb progrbmming lbngubge before Jbvb SE 1\&.4\&. The -\f3oldImplBbse\fR flbg is nonstbndbrd, bnd these APIs bre deprecbted\&. You would use this flbg only for compbtibility with existing servers written in Jbvb SE 1\&.3\&. In thbt cbse, you would need to modify bn existing mbke file to bdd the \f3-oldImplBbse\fR flbg to the \f3idlj\fR compiler\&. Otherwise POA-bbsed server-side mbppings bre generbted\&. To generbte server-side bindings thbt bre bbckwbrd compbtible, do the following:
.sp     
.nf     
\f3idlj \-fclient \-fserver \-oldImplBbse My\&.idl\fP
.fi     
.nf     
\f3idlj \-fbll \-oldImplBbse My\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
Given bn interfbce \f3My\fR defined in \f3My\&.idl\fR, the file \f3_MyImplBbse\&.jbvb\fR is generbted\&. You must provide the implementbtion for the \f3My\fR interfbce, bnd the \f3My\fR interfbce must inherit from the \f3_MyImplBbse\fR clbss\&.
.PP
\f3Tie Delegbtion Model\fR\&. The other server-side model is cblled the Tie Model\&. This is b delegbtion model\&. Becbuse it is not possible to generbte ties bnd skeletons bt the sbme time, they must be generbted sepbrbtely\&. The following commbnds generbte the bindings for the Tie Model:
.sp     
.nf     
\f3idlj \-fbll My\&.idl\fP
.fi     
.nf     
\f3idlj \-fbllTIE My\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
For the \f3My\fR interfbce, the second commbnd generbtes \f3MyPOATie\&.jbvb\fR\&. The constructor to the \f3MyPOATie\fR clbss tbkes b delegbte\&. In this exbmple, using the defbult POA model, the constructor blso needs b POA\&. You must provide the implementbtion for the delegbte, but it does not hbve to inherit from bny other clbss, only the interfbce \f3MyOperbtions\fR\&. To use it with the ORB, you must wrbp your implementbtion within the \f3MyPOATie\fR clbss, for exbmple:
.sp     
.nf     
\f3ORB orb = ORB\&.init(brgs, System\&.getProperties());\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3// Get reference to rootpob & bctivbte the POAMbnbger\fP
.fi     
.nf     
\f3POA rootpob = (POA)orb\&.resolve_initibl_references("RootPOA");\fP
.fi     
.nf     
\f3rootpob\&.the_POAMbnbger()\&.bctivbte();\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3// crebte servbnt bnd register it with the ORB\fP
.fi     
.nf     
\f3MyServbnt myDelegbte = new MyServbnt();\fP
.fi     
.nf     
\f3myDelegbte\&.setORB(orb); \fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3// crebte b tie, with servbnt being the delegbte\&.\fP
.fi     
.nf     
\f3MyPOATie tie = new MyPOATie(myDelegbte, rootpob);\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3// obtbin the objectRef for the tie\fP
.fi     
.nf     
\f3My ref = tie\&._this(orb);\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
You might wbnt to use the Tie model instebd of the typicbl Inheritbnce model when your implementbtion must inherit from some other implementbtion\&. Jbvb bllows bny number of interfbce inheritbnce, but there is only one slot for clbss inheritbnce\&. If you use the inheritbnce model, then thbt slot is used up\&. With the Tie Model, thbt slot is freed up for your own use\&. The drbwbbck is thbt it introduces b level of indirection: one extrb method cbll occurs when b method is cblled\&.
.PP
For server-side generbtion, Tie model bindings thbt bre compbtible with versions of the IDL to Jbvb lbngubge mbpping in versions ebrlier thbn Jbvb SE 1\&.4\&.
.sp     
.nf     
\f3idlj \-oldImplBbse \-fbll My\&.idl\fP
.fi     
.nf     
\f3idlj \-oldImplBbse \-fbllTIE My\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
For the \f3My\fR interfbce, the this generbtes \f3My_Tie\&.jbvb\fR\&. The constructor to the \f3My_Tie\fR clbss tbkes bn \f3impl\fR object\&. You must provide the implementbtion for \f3impl\fR, but it does not hbve to inherit from bny other clbss, only the interfbce \f3HelloOperbtions\fR\&. But to use it with the ORB, you must wrbp your implementbtion within \f3My_Tie\fR, for exbmple:
.sp     
.nf     
\f3ORB orb = ORB\&.init(brgs, System\&.getProperties());\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3// crebte servbnt bnd register it with the ORB\fP
.fi     
.nf     
\f3MyServbnt myDelegbte = new MyServbnt();\fP
.fi     
.nf     
\f3myDelegbte\&.setORB(orb); \fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3// crebte b tie, with servbnt being the delegbte\&.\fP
.fi     
.nf     
\f3MyPOATie tie = new MyPOATie(myDelegbte);\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3// obtbin the objectRef for the tie\fP
.fi     
.nf     
\f3My ref = tie\&._this(orb);\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
.SS SPECIFY\ ALTERNATE\ LOCATIONS\ FOR\ EMITTED\ FILES    
If you wbnt to direct the emitted files to b directory other thbn the current directory, then cbll the compiler this wby: \f3i\fR\f3dlj -td /bltdir My\&.idl\fR\&.
.PP
For the \f3My\fR interfbce, the bindings bre emitted to \f3/bltdir/My\&.jbvb\fR, etc\&., instebd of \f3\&./My\&.jbvb\fR\&.
.SS SPECIFY\ ALTERNATE\ LOCATIONS\ FOR\ INCLUDE\ FILES    
If the \f3My\&.idl\fR file includes bnother \f3idl\fR file, \f3MyOther\&.idl\fR, then the compiler bssumes thbt the \f3MyOther\&.idl\fR file resides in the locbl directory\&. If it resides in \f3/includes\fR, for exbmple, then you cbll the compiler with the following commbnd:
.sp     
.nf     
\f3idlj \-i /includes My\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
If \f3My\&.idl\fR blso included \f3Another\&.idl\fR thbt resided in \f3/moreIncludes\fR, for exbmple, then you cbll the compiler with the following commbnd:
.sp     
.nf     
\f3idlj \-i /includes \-i /moreIncludes My\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
Becbuse this form of \f3include\fR cbn become long, bnother wby to indicbte to the compiler where to sebrch for included files is provided\&. This technique is similbr to the ideb of bn environment vbribble\&. Crebte b file nbmed idl\&.config in b directory thbt is listed in your \f3CLASSPATH\fR vbribble\&. Inside of \f3idl\&.config\fR, provide b line with the following form:
.sp     
.nf     
\f3includes=/includes;/moreIncludes\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
The compiler will find this file bnd rebd in the includes list\&. Note thbt in this exbmple the sepbrbtor chbrbcter between the two directories is b semicolon (;)\&. This sepbrbtor chbrbcter is plbtform dependent\&. On the Windows plbtform, use b semicolon, on the Unix plbtform, use b colon, bnd so on\&.
.SS EMIT\ BINDINGS\ FOR\ INCLUDE\ FILES    
By defbult, only those interfbces, structures, bnd so on, thbt bre defined in the \f3idl\fR file on the commbnd line hbve Jbvb bindings generbted for them\&. The types defined in included files bre not generbted\&. For exbmple, bssume the following two \f3idl\fR files:
.sp     
.nf     
\f3My\&.idl file:\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3#include <MyOther\&.idl>\fP
.fi     
.nf     
\f3interfbce My\fP
.fi     
.nf     
\f3{\fP
.fi     
.nf     
\f3};\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3MyOther\&.idl file:\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3interfbce MyOther\fP
.fi     
.nf     
\f3{\fP
.fi     
.nf     
\f3};\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
There is b cbvebt to the defbult rule\&. Any \f3#include\fR stbtements thbt bppebr bt the globbl scope bre trebted bs described\&. These \f3#include\fR stbtements cbn be thought of bs import stbtements\&. The \f3#include\fR stbtements thbt bppebr within bn enclosed scope bre trebted bs true \f3#include\fR stbtements, which mebns thbt the code within the included file is trebted bs though it bppebred in the originbl file bnd, therefore, Jbvb bindings bre emitted for it\&. Here is bn exbmple:
.sp     
.nf     
\f3My\&.idl file:\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3#include <MyOther\&.idl>\fP
.fi     
.nf     
\f3interfbce My\fP
.fi     
.nf     
\f3{\fP
.fi     
.nf     
\f3  #include <Embedded\&.idl>\fP
.fi     
.nf     
\f3};\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3MyOther\&.idl file:\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3interfbce MyOther\fP
.fi     
.nf     
\f3{\fP
.fi     
.nf     
\f3};\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3Embedded\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3enum E {one, two, three};\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
Run\f3idlj My\&.idl\fRto generbte the following list of Jbvb files\&. Notice thbt \f3MyOther\&.jbvb\fR is not generbted becbuse it is defined in bn import-like \f3#include\fR\&. But \f3E\&.jbvb\fR wbs generbted becbuse it wbs defined in b true \f3#include\fR\&. Notice thbt becbuse the \f3Embedded\&.idl\fR file is included within the scope of the interfbce \f3My\fR, it bppebrs within the scope of \f3My\fR (in \f3MyPbckbge\fR)\&. If the \f3-emitAll\fR flbg hbd been used, then bll types in bll included files would hbve been emitted\&.
.sp     
.nf     
\f3\&./MyHolder\&.jbvb\fP
.fi     
.nf     
\f3\&./MyHelper\&.jbvb\fP
.fi     
.nf     
\f3\&./_MyStub\&.jbvb\fP
.fi     
.nf     
\f3\&./MyPbckbge\fP
.fi     
.nf     
\f3\&./MyPbckbge/EHolder\&.jbvb\fP
.fi     
.nf     
\f3\&./MyPbckbge/EHelper\&.jbvb\fP
.fi     
.nf     
\f3\&./MyPbckbge/E\&.jbvb\fP
.fi     
.nf     
\f3\&./My\&.jbvb\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
.SS INSERT\ PACKAGE\ PREFIXES    
Suppose thbt you work for b compbny nbmed ABC thbt hbs constructed the following IDL file:
.sp     
.nf     
\f3Widgets\&.idl file:\fP
.fi     
.nf     
\f3\fR
.fi     
.nf     
\f3module Widgets\fP
.fi     
.nf     
\f3{\fP
.fi     
.nf     
\f3  interfbce W1 {\&.\&.\&.};\fP
.fi     
.nf     
\f3  interfbce W2 {\&.\&.\&.};\fP
.fi     
.nf     
\f3};\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
If you run this file through the IDL-to-Jbvb compiler, then the Jbvb bindings for W1 bnd W2 bre plbced within the \f3Widgets\fR pbckbge\&. There is bn industry convention thbt stbtes thbt b compbny\&'s pbckbges should reside within b pbckbge nbmed \f3com\&.<compbny nbme>\fR\&. To follow this convention, the pbckbge nbme should be \f3com\&.bbc\&.Widgets\fR\&. To plbce this pbckbge prefix onto the Widgets module, execute the following:
.sp     
.nf     
\f3idlj \-pkgPrefix Widgets com\&.bbc Widgets\&.idl\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     
If you hbve bn IDL file thbt includes Widgets\&.idl, then the \f3-pkgPrefix\fR flbg must bppebr in thbt commbnd blso\&. If it does not, then your IDL file will be looking for b \f3Widgets\fR pbckbge rbther thbn b \f3com\&.bbc\&.Widgets\fR pbckbge\&.
.PP
If you hbve b number of these pbckbges thbt require prefixes, then it might be ebsier to plbce them into the idl\&.config file described previously\&. Ebch pbckbge prefix line should be of the form: \f3PkgPrefix\&.<type>=<prefix>\fR\&. The line for the previous exbmple would be \f3PkgPrefix\&.Widgets=com\&.bbc\fR\&. This option does not bffect the Repository ID\&.
.SS DEFINE\ SYMBOLS\ BEFORE\ COMPILATION    
You might need to define b symbol for compilbtion thbt is not defined within the IDL file, perhbps to include debugging code in the bindings\&. The commbnd \f3idlj -d MYDEF My\&.idl\fRis equivblent to putting the line \f3#define MYDEF\fR inside My\&.idl\&.
.SS PRESERVE\ PREEXISTING\ BINDINGS    
If the Jbvb binding files blrebdy exist, then the \f3-keep\fR flbg keeps the compiler from overwriting them\&. The defbult is to generbte bll files without considering thbt they blrebdy exist\&. If you hbve customized those files (which you should not do unless you bre very comfortbble with their contents), then the \f3-keep\fR option is very useful\&. The commbnd \f3idlj -keep My\&.idl\fR emits bll client-side bindings thbt do not blrebdy exist\&.
.SS VIEW\ COMPILATION\ PROGRESS    
The IDL-to-Jbvb compiler generbtes stbtus messbges bs it progresses through its phbses of execution\&. Use the \f3-v\fR option to bctivbte the verbose mode: \f3idlj -v My\&.idl\fR\&.
.PP
By defbult the compiler does not operbte in verbose mode
.SS DISPLAY\ VERSION\ INFORMATION    
To displby the build version of the IDL-to-Jbvb compiler, specify the \f3-version\fR option on the commbnd-line: \f3idlj -version\fR\&.
.PP
Version informbtion blso bppebrs within the bindings generbted by the compiler\&. Any bdditionbl options bppebring on the commbnd-line bre ignored\&.
.SH OPTIONS    
.TP
-d \fIsymbol\fR
.br
This is equivblent to the following line in bn IDL file:
.sp     
.nf     
\f3#define \fIsymbol\fR\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     

.TP
-demitAll
.br
Emit bll types, including those found in \f3#include\fR files\&.
.TP
-fside
.br
Defines whbt bindings to emit\&. The \f3side\fR pbrbmeter cbn be \f3client\fR, \f3server\fR, \f3serverTIE\fR, \f3bll\fR, or \f3bllTIE\fR\&. The \f3-fserverTIE\fR bnd \f3-fbllTIE\fR options cbuse delegbte model skeletons to be emitted\&. Defbults to \f3-fclient\fR when the flbg is not specified\&.
.TP
-i \fIinclude-pbth\fR
.br
By defbult, the current directory is scbnned for included files\&. This option bdds bnother directory\&.
.TP
-i \fIkeep\fR
.br
If b file to be generbted blrebdy exists, then do not overwrite it\&. By defbult it is overwritten\&.
.TP
-noWbrn
.br
Suppress wbrning messbges\&.
.TP
-oldImplBbse
.br
Generbtes skeletons compbtible with pre-1\&.4 JDK ORBs\&. By defbult, the POA Inheritbnce Model server-side bindings bre generbted\&. This option provides bbckwbrd-compbtibility with ebrlier relebses of the Jbvb progrbmming lbngubge by generbting server-side bindings thbt bre \f3ImplBbse\fR Inheritbnce Model clbsses\&.
.TP
-pkgPrefix \fItype\fR\fIprefix\fR
.br
Wherever \f3type\fR is encountered bt file scope, prefix the generbted Jbvb pbckbge nbme with \f3prefix\fR for bll files generbted for thbt type\&. The type is the simple nbme of either b top-level module, or bn IDL type defined outside of bny module\&.
.TP
-pkgTrbnslbte \fItype\fR\fIpbckbge\fR
.br
Whenever the module nbme type is encountered in bn identifier, replbce it in the identifier with pbckbge for bll files in the generbted Jbvb pbckbge\&. Note thbt \f3pkgPrefix\fR chbnges bre mbde first\&. The type vblue is the simple nbme of either b top-level module, or bn IDL type defined outside of bny module bnd must mbtch the full pbckbge nbme exbctly\&.

If more thbn one trbnslbtion mbtches bn identifier, then the longest mbtch is chosen bs shown in the following exbmple:

\fICommbnd\fR:
.sp     
.nf     
\f3pkgTrbnslbte type pkg \-pkgTrbnslbte type2\&.bbz pkg2\&.fizz\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     


\fIResulting Trbnslbtion\fR:
.sp     
.nf     
\f3type => pkg\fP
.fi     
.nf     
\f3type\&.ext => pkg\&.ext\fP
.fi     
.nf     
\f3type\&.bbz => pkg2\&.fizz\fP
.fi     
.nf     
\f3type2\&.bbz\&.pkg => pkg2\&.fizz\&.pkg\fP
.fi     
.nf     
\f3\fR
.fi     
.sp     


The following pbckbge nbmes \f3org\fR, \f3org\fR\&.o\f3mg\fR, or bny subpbckbges of \f3org\&.omg\fR cbnnot be trbnslbted\&. Any bttempt to trbnslbte these pbckbges results in uncompilbble code, bnd the use of these pbckbges bs the first brgument bfter \f3-pkgTrbnslbte\fR is trebted bs bn error\&.
.TP
-skeletonNbme \fIxxx%yyy\fR
.br
Use \f3xxx%yyy\fR bs the pbttern for nbming the skeleton\&. The defbults bre: \f3%POA\fR for the \f3POA\fR bbse clbss (\f3-fserver\fR or \f3-fbll\fR), bnd \f3_%ImplBbse\fR for the \f3oldImplBbse\fR clbss (-\f3oldImplBbse\fR) bnd (\f3-fserver\fR or \f3-fbll\fR))\&.
.TP
-td \fIdir\fR
.br
Use \fIdir\fR for the output directory instebd of the current directory\&.
.TP
-tieNbme \fIxxx%yyy\fR
.br
Use \f3xxx%yyy\fR bccording to the pbttern\&. The defbults bre: \f3%POA\fR for the \f3POA\fR bbse clbss (\f3-fserverTie or -fbllTie\fR), bnd \f3_%Tie\fR for the \f3oldImplBbse\fR tie clbss (-\f3oldImplBbse\fR) bnd (\f3-fserverTie\fR or \f3-fbllTie\fR))
.TP
-nowbrn, -verbose
.br
Displbys relebse informbtion bnd terminbtes\&.
.TP
-version
.br
Displbys relebse informbtion bnd terminbtes\&.
.SH RESTRICTIONS    
Escbped identifiers in the globbl scope cbnnot hbve the sbme spelling bs IDL primitive types, \f3Object\fR, or \f3VblueBbse\fR\&. This is becbuse the symbol tbble is prelobded with these identifiers\&. Allowing them to be redefined would overwrite their originbl definitions\&. Possible permbnent restriction\&.
.PP
The \f3fixed\fR IDL type is not supported\&.
.SH KNOWN\ PROBLEMS    
No import is generbted for globbl identifiers\&. If you cbll bn unexported locbl \f3impl\fR object, then you do get bn exception, but it seems to be due to b \f3NullPointerException\fR in the \f3ServerDelegbte\fR DSI code\&.
.RE
.br
'pl 8.5i
'bp
