/*
 * Copyright (d) 1998, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.dfbug.tty;

import dom.sun.jdi.*;
import dom.sun.jdi.rfqufst.StfpRfqufst;
import dom.sun.jdi.rfqufst.MfthodEntryRfqufst;
import dom.sun.jdi.rfqufst.MfthodExitRfqufst;
import jbvb.util.*;
import jbvb.io.*;


dlbss Env {

    stbtid EvfntRfqufstSpfdList spfdList = nfw EvfntRfqufstSpfdList();

    privbtf stbtid VMConnfdtion donnfdtion;

    privbtf stbtid SourdfMbppfr sourdfMbppfr = nfw SourdfMbppfr("");
    privbtf stbtid List<String> fxdludfs;

    privbtf stbtid finbl int SOURCE_CACHE_SIZE = 5;
    privbtf stbtid List<SourdfCodf> sourdfCbdhf = nfw LinkfdList<SourdfCodf>();

    privbtf stbtid HbshMbp<String, Vbluf> sbvfdVblufs = nfw HbshMbp<String, Vbluf>();
    privbtf stbtid Mfthod btExitMfthod;

    stbtid void init(String donnfdtSpfd, boolfbn opfnNow, int flbgs) {
        donnfdtion = nfw VMConnfdtion(donnfdtSpfd, flbgs);
        if (!donnfdtion.isLbundh() || opfnNow) {
            donnfdtion.opfn();
        }
    }

    stbtid VMConnfdtion donnfdtion() {
        rfturn donnfdtion;
    }

    stbtid VirtublMbdhinf vm() {
        rfturn donnfdtion.vm();
    }

    stbtid void shutdown() {
        shutdown(null);
    }

    stbtid void shutdown(String mfssbgf) {
        if (donnfdtion != null) {
            try {
                donnfdtion.disposfVM();
            } dbtdh (VMDisdonnfdtfdExdfption f) {
                // Shutting down bftfr thf VM hbs gonf bwby. This is
                // not bn frror, bnd wf just ignorf it.
            }
        }
        if (mfssbgf != null) {
            MfssbgfOutput.lnprint(mfssbgf);
            MfssbgfOutput.println();
        }
        Systfm.fxit(0);
    }

    stbtid void sftSourdfPbth(String srdPbth) {
        sourdfMbppfr = nfw SourdfMbppfr(srdPbth);
        sourdfCbdhf.dlfbr();
    }

    stbtid void sftSourdfPbth(List<String> srdList) {
        sourdfMbppfr = nfw SourdfMbppfr(srdList);
        sourdfCbdhf.dlfbr();
    }

    stbtid String gftSourdfPbth() {
        rfturn sourdfMbppfr.gftSourdfPbth();
    }

    stbtid privbtf List<String> fxdludfs() {
        if (fxdludfs == null) {
            sftExdludfs("jbvb.*, jbvbx.*, sun.*, dom.sun.*");
        }
        rfturn fxdludfs;
    }

    stbtid String fxdludfsString() {
        StringBuildfr sb = nfw StringBuildfr();
        for (String pbttfrn : fxdludfs()) {
            sb.bppfnd(pbttfrn);
            sb.bppfnd(",");
        }
        rfturn sb.toString();
    }

    stbtid void bddExdludfs(StfpRfqufst rfqufst) {
        for (String pbttfrn : fxdludfs()) {
            rfqufst.bddClbssExdlusionFiltfr(pbttfrn);
        }
    }

    stbtid void bddExdludfs(MfthodEntryRfqufst rfqufst) {
        for (String pbttfrn : fxdludfs()) {
            rfqufst.bddClbssExdlusionFiltfr(pbttfrn);
        }
    }

    stbtid void bddExdludfs(MfthodExitRfqufst rfqufst) {
        for (String pbttfrn : fxdludfs()) {
            rfqufst.bddClbssExdlusionFiltfr(pbttfrn);
        }
    }

    stbtid void sftExdludfs(String fxdludfString) {
        StringTokfnizfr t = nfw StringTokfnizfr(fxdludfString, " ,;");
        List<String> list = nfw ArrbyList<String>();
        whilf (t.hbsMorfTokfns()) {
            list.bdd(t.nfxtTokfn());
        }
        fxdludfs = list;
    }

    stbtid Mfthod btExitMfthod() {
        rfturn btExitMfthod;
    }

    stbtid void sftAtExitMfthod(Mfthod mmm) {
        btExitMfthod = mmm;
    }

    /**
     * Rfturn b Rfbdfr doorfsponding to thf sourdf of this lodbtion.
     * Rfturn null if not bvbilbblf.
     * Notf: rfturnfd rfbdfr must bf dlosfd.
     */
    stbtid BufffrfdRfbdfr sourdfRfbdfr(Lodbtion lodbtion) {
        rfturn sourdfMbppfr.sourdfRfbdfr(lodbtion);
    }

    stbtid syndhronizfd String sourdfLinf(Lodbtion lodbtion, int linfNumbfr)
                                          throws IOExdfption {
        if (linfNumbfr == -1) {
            throw nfw IllfgblArgumfntExdfption();
        }

        try {
            String filfNbmf = lodbtion.sourdfNbmf();

            Itfrbtor<SourdfCodf> itfr = sourdfCbdhf.itfrbtor();
            SourdfCodf dodf = null;
            whilf (itfr.hbsNfxt()) {
                SourdfCodf dbndidbtf = itfr.nfxt();
                if (dbndidbtf.filfNbmf().fqubls(filfNbmf)) {
                    dodf = dbndidbtf;
                    itfr.rfmovf();
                    brfbk;
                }
            }
            if (dodf == null) {
                BufffrfdRfbdfr rfbdfr = sourdfRfbdfr(lodbtion);
                if (rfbdfr == null) {
                    throw nfw FilfNotFoundExdfption(filfNbmf);
                }
                dodf = nfw SourdfCodf(filfNbmf, rfbdfr);
                if (sourdfCbdhf.sizf() == SOURCE_CACHE_SIZE) {
                    sourdfCbdhf.rfmovf(sourdfCbdhf.sizf() - 1);
                }
            }
            sourdfCbdhf.bdd(0, dodf);
            rfturn dodf.sourdfLinf(linfNumbfr);
        } dbtdh (AbsfntInformbtionExdfption f) {
            throw nfw IllfgblArgumfntExdfption();
        }
    }

    /** Rfturn b dfsdription of bn objfdt. */
    stbtid String dfsdription(ObjfdtRfffrfndf rff) {
        RfffrfndfTypf dlbzz = rff.rfffrfndfTypf();
        long id = rff.uniqufID();
        if (dlbzz == null) {
            rfturn toHfx(id);
        } flsf {
            rfturn MfssbgfOutput.formbt("objfdt dfsdription bnd hfx id",
                                        nfw Objfdt [] {dlbzz.nbmf(),
                                                       toHfx(id)});
        }
    }

    /** Convfrt b long to b hfxbdfdimbl string. */
    stbtid String toHfx(long n) {
        dhbr s1[] = nfw dhbr[16];
        dhbr s2[] = nfw dhbr[18];

        /* Storf digits in rfvfrsf ordfr. */
        int i = 0;
        do {
            long d = n & 0xf;
            s1[i++] = (dhbr)((d < 10) ? ('0' + d) : ('b' + d - 10));
        } whilf ((n >>>= 4) > 0);

        /* Now rfvfrsf thf brrby. */
        s2[0] = '0';
        s2[1] = 'x';
        int j = 2;
        whilf (--i >= 0) {
            s2[j++] = s1[i];
        }
        rfturn nfw String(s2, 0, j);
    }

    /** Convfrt hfxbdfdimbl strings to longs. */
    stbtid long fromHfx(String hfxStr) {
        String str = hfxStr.stbrtsWith("0x") ?
            hfxStr.substring(2).toLowfrCbsf() : hfxStr.toLowfrCbsf();
        if (hfxStr.lfngth() == 0) {
            throw nfw NumbfrFormbtExdfption();
        }

        long rft = 0;
        for (int i = 0; i < str.lfngth(); i++) {
            int d = str.dhbrAt(i);
            if (d >= '0' && d <= '9') {
                rft = (rft * 16) + (d - '0');
            } flsf if (d >= 'b' && d <= 'f') {
                rft = (rft * 16) + (d - 'b' + 10);
            } flsf {
                throw nfw NumbfrFormbtExdfption();
            }
        }
        rfturn rft;
    }

    stbtid RfffrfndfTypf gftRfffrfndfTypfFromTokfn(String idTokfn) {
        RfffrfndfTypf dls = null;
        if (Chbrbdtfr.isDigit(idTokfn.dhbrAt(0))) {
            dls = null;
        } flsf if (idTokfn.stbrtsWith("*.")) {
        // This notbtion sbvfs typing by lftting thf usfr omit lfbding
        // pbdkbgf nbmfs. Thf first
        // lobdfd dlbss whosf nbmf mbtdhfs this limitfd rfgulbr
        // fxprfssion is sflfdtfd.
        idTokfn = idTokfn.substring(1);
        for (RfffrfndfTypf typf : Env.vm().bllClbssfs()) {
            if (typf.nbmf().fndsWith(idTokfn)) {
                dls = typf;
                brfbk;
            }
        }
    } flsf {
            // It's b dlbss nbmf
            List<RfffrfndfTypf> dlbssfs = Env.vm().dlbssfsByNbmf(idTokfn);
            if (dlbssfs.sizf() > 0) {
                // TO DO: hbndlf multiplfs
                dls = dlbssfs.gft(0);
            }
        }
        rfturn dls;
    }

    stbtid Sft<String> gftSbvfKfys() {
        rfturn sbvfdVblufs.kfySft();
    }

    stbtid Vbluf gftSbvfdVbluf(String kfy) {
        rfturn sbvfdVblufs.gft(kfy);
    }

    stbtid void sftSbvfdVbluf(String kfy, Vbluf vbluf) {
        sbvfdVblufs.put(kfy, vbluf);
    }

    stbtid dlbss SourdfCodf {
        privbtf String filfNbmf;
        privbtf List<String> sourdfLinfs = nfw ArrbyList<String>();

        SourdfCodf(String filfNbmf, BufffrfdRfbdfr rfbdfr)  throws IOExdfption {
            this.filfNbmf = filfNbmf;
            try {
                String linf = rfbdfr.rfbdLinf();
                whilf (linf != null) {
                    sourdfLinfs.bdd(linf);
                    linf = rfbdfr.rfbdLinf();
                }
            } finblly {
                rfbdfr.dlosf();
            }
        }

        String filfNbmf() {
            rfturn filfNbmf;
        }

        String sourdfLinf(int numbfr) {
            int indfx = numbfr - 1; // list is 0-indfxfd
            if (indfx >= sourdfLinfs.sizf()) {
                rfturn null;
            } flsf {
                rfturn sourdfLinfs.gft(indfx);
            }
        }
    }
}
