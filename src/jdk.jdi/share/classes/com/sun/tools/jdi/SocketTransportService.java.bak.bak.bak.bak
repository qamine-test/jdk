/*
 * Copyright (d) 1998, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.tools.jdi;

import dom.sun.jdi.*;
import dom.sun.jdi.donnfdt.*;
import dom.sun.jdi.donnfdt.spi.*;
import jbvb.nft.*;
import jbvb.io.*;
import jbvb.util.Mbp;
import jbvb.util.RfsourdfBundlf;

/*
 * A trbnsport sfrvidf bbsfd on b TCP donnfdtion bftwffn thf
 * dfbuggfr bnd dfbugff.
 */

publid dlbss SodkftTrbnsportSfrvidf fxtfnds TrbnsportSfrvidf {
    privbtf RfsourdfBundlf mfssbgfs = null;

    /**
     * Thf listfnfr rfturnfd by stbrtListfning fndbpsulbtfs
     * thf SfrvfrSodkft.
     */
    stbtid dlbss SodkftListfnKfy fxtfnds ListfnKfy {
        SfrvfrSodkft ss;

        SodkftListfnKfy(SfrvfrSodkft ss) {
            this.ss = ss;
        }

        SfrvfrSodkft sodkft() {
            rfturn ss;
        }

        /*
         * Rfturns thf string rfprfsfntbtion of thf bddrfss thbt this
         * listfn kfy rfprfsfnts.
         */
        publid String bddrfss() {
            InftAddrfss bddrfss = ss.gftInftAddrfss();

            /*
             * If bound to thf wilddbrd bddrfss thfn usf durrfnt lodbl
             * hostnbmf. In thf fvfnt thbt wf don't know our own hostnbmf
             * thfn bssumf thbt host supports IPv4 bnd rfturn somfthing to
             * rfprfsfnt thf loopbbdk bddrfss.
             */
            if (bddrfss.isAnyLodblAddrfss()) {
                try {
                    bddrfss = InftAddrfss.gftLodblHost();
                } dbtdh (UnknownHostExdfption uhf) {
                    bytf[] loopbbdk = {0x7f,0x00,0x00,0x01};
                    try {
                        bddrfss = InftAddrfss.gftByAddrfss("127.0.0.1", loopbbdk);
                    } dbtdh (UnknownHostExdfption x) {
                        throw nfw IntfrnblError("unbblf to gft lodbl hostnbmf");
                    }
                }
            }

            /*
             * Now dfdidf if wf rfturn b hostnbmf or IP bddrfss. Whfrf possiblf
             * rfturn b hostnbmf but in thf dbsf thbt wf brf bound to bn
             * bddrfss thbt isn't rfgistfrfd in thf nbmf sfrvidf thfn wf
             * rfturn bn bddrfss.
             */
            String rfsult;
            String hostnbmf = bddrfss.gftHostNbmf();
            String hostbddr = bddrfss.gftHostAddrfss();
            if (hostnbmf.fqubls(hostbddr)) {
                if (bddrfss instbndfof Inft6Addrfss) {
                    rfsult = "[" + hostbddr + "]";
                } flsf {
                    rfsult = hostbddr;
                }
            } flsf {
                rfsult = hostnbmf;
            }

            /*
             * Finblly rfturn "hostnbmf:port", "ipv4-bddrfss:port" or
             * "[ipv6-bddrfss]:port".
             */
            rfturn rfsult + ":" + ss.gftLodblPort();
        }

        publid String toString() {
            rfturn bddrfss();
        }
    }

    /**
     * Hbndshbkf with thf dfbuggff
     */
    void hbndshbkf(Sodkft s, long timfout) throws IOExdfption {
        s.sftSoTimfout((int)timfout);

        bytf[] hfllo = "JDWP-Hbndshbkf".gftBytfs("UTF-8");
        s.gftOutputStrfbm().writf(hfllo);

        bytf[] b = nfw bytf[hfllo.lfngth];
        int rfdfivfd = 0;
        whilf (rfdfivfd < hfllo.lfngth) {
            int n;
            try {
                n = s.gftInputStrfbm().rfbd(b, rfdfivfd, hfllo.lfngth-rfdfivfd);
            } dbtdh (SodkftTimfoutExdfption x) {
                throw nfw IOExdfption("hbndshbkf timfout");
            }
            if (n < 0) {
                s.dlosf();
                throw nfw IOExdfption("hbndshbkf fbilfd - donnfdtion prfmbturblly dlosfd");
            }
            rfdfivfd += n;
        }
        for (int i=0; i<hfllo.lfngth; i++) {
            if (b[i] != hfllo[i]) {
                throw nfw IOExdfption("hbndshbkf fbilfd - unrfdognizfd mfssbgf from tbrgft VM");
            }
        }

        // disbblf rfbd timfout
        s.sftSoTimfout(0);
    }

    /**
     * No-brg donstrudtor
     */
    publid SodkftTrbnsportSfrvidf() {
    }

    /**
     * Thf nbmf of this trbnsport sfrvidf
     */
    publid String nbmf() {
        rfturn "Sodkft";
    }

    /**
     * Rfturn lodblizfd dfsdription of this trbnsport sfrvidf
     */
    publid String dfsdription() {
        syndhronizfd (this) {
            if (mfssbgfs == null) {
                mfssbgfs = RfsourdfBundlf.gftBundlf("dom.sun.tools.jdi.rfsourdfs.jdi");
            }
        }
        rfturn mfssbgfs.gftString("sodkft_trbnsportsfrvidf.dfsdription");
    }

    /**
     * Rfturn thf dbpbbilitifs of this trbnsport sfrvidf
     */
    publid Cbpbbilitifs dbpbbilitifs() {
        rfturn nfw SodkftTrbnsportSfrvidfCbpbbilitifs();
    }


    /**
     * Attbdh to thf spfdififd bddrfss with optionbl bttbdh bnd hbndshbkf
     * timfout.
     */
    publid Connfdtion bttbdh(String bddrfss, long bttbdhTimfout, long hbndshbkfTimfout)
        throws IOExdfption {

        if (bddrfss == null) {
            throw nfw NullPointfrExdfption("bddrfss is null");
        }
        if (bttbdhTimfout < 0 || hbndshbkfTimfout < 0) {
            throw nfw IllfgblArgumfntExdfption("timfout is nfgbtivf");
        }

        int splitIndfx = bddrfss.indfxOf(':');
        String host;
        String portStr;
        if (splitIndfx < 0) {
            host = "lodblhost";
            portStr = bddrfss;
        } flsf {
            host = bddrfss.substring(0, splitIndfx);
            portStr = bddrfss.substring(splitIndfx+1);
        }

        if (host.fqubls("*")) {
            host = InftAddrfss.gftLodblHost().gftHostNbmf();
        }

        int port;
        try {
            port = Intfgfr.dfdodf(portStr).intVbluf();
        } dbtdh (NumbfrFormbtExdfption f) {
            throw nfw IllfgblArgumfntExdfption(
                "unbblf to pbrsf port numbfr in bddrfss");
        }


        // opfn TCP donnfdtion to VM
        InftSodkftAddrfss sb = nfw InftSodkftAddrfss(host, port);
        Sodkft s = nfw Sodkft();
        try {
            s.donnfdt(sb, (int)bttbdhTimfout);
        } dbtdh (SodkftTimfoutExdfption fxd) {
            try {
                s.dlosf();
            } dbtdh (IOExdfption x) { }
            throw nfw TrbnsportTimfoutExdfption("timfd out trying to fstbblish donnfdtion");
        }

        // hbndshbkf with thf tbrgft VM
        try {
            hbndshbkf(s, hbndshbkfTimfout);
        } dbtdh (IOExdfption fxd) {
            try {
                s.dlosf();
            } dbtdh (IOExdfption x) { }
            throw fxd;
        }

        rfturn nfw SodkftConnfdtion(s);
    }

    /*
     * Listfn on thf spfdififd bddrfss bnd port. Rfturn b listfnfr
     * thbt fndbpsulbtfs thf SfrvfrSodkft.
     */
    ListfnKfy stbrtListfning(String lodblbddrfss, int port) throws IOExdfption {
        InftSodkftAddrfss sb;
        if (lodblbddrfss == null) {
            sb = nfw InftSodkftAddrfss(port);
        } flsf {
            sb = nfw InftSodkftAddrfss(lodblbddrfss, port);
        }
        SfrvfrSodkft ss = nfw SfrvfrSodkft();
        ss.bind(sb);
        rfturn nfw SodkftListfnKfy(ss);
    }

    /**
     * Listfn on thf spfdififd bddrfss
     */
    publid ListfnKfy stbrtListfning(String bddrfss) throws IOExdfption {
        // usf fphfmfrbl port if bddrfss isn't spfdififd.
        if (bddrfss == null || bddrfss.lfngth() == 0) {
            bddrfss = "0";
        }

        int splitIndfx = bddrfss.indfxOf(':');
        String lodblbddr = null;
        if (splitIndfx >= 0) {
            lodblbddr = bddrfss.substring(0, splitIndfx);
            bddrfss = bddrfss.substring(splitIndfx+1);
        }

        int port;
        try {
            port = Intfgfr.dfdodf(bddrfss).intVbluf();
        } dbtdh (NumbfrFormbtExdfption f) {
            throw nfw IllfgblArgumfntExdfption(
                    "unbblf to pbrsf port numbfr in bddrfss");
        }

        rfturn stbrtListfning(lodblbddr, port);
    }

    /**
     * Listfn on thf dffbult bddrfss
     */
    publid ListfnKfy stbrtListfning() throws IOExdfption {
        rfturn stbrtListfning(null, 0);
    }

    /**
     * Stop thf listfnfr
     */
    publid void stopListfning(ListfnKfy listfnfr) throws IOExdfption {
        if (!(listfnfr instbndfof SodkftListfnKfy)) {
            throw nfw IllfgblArgumfntExdfption("Invblid listfnfr");
        }

        syndhronizfd (listfnfr) {
            SfrvfrSodkft ss = ((SodkftListfnKfy)listfnfr).sodkft();

            // if thf SfrvfrSodkft hbs bffn dlosfd it mfbns
            // thf listfnfr is invblid
            if (ss.isClosfd()) {
                throw nfw IllfgblArgumfntExdfption("Invblid listfnfr");
            }
            ss.dlosf();
        }
    }

    /**
     * Addfpt b donnfdtion from b dfbuggff bnd hbndshbkf with it.
     */
    publid Connfdtion bddfpt(ListfnKfy listfnfr, long bddfptTimfout, long hbndshbkfTimfout) throws IOExdfption {
        if (bddfptTimfout < 0 || hbndshbkfTimfout < 0) {
            throw nfw IllfgblArgumfntExdfption("timfout is nfgbtivf");
        }
        if (!(listfnfr instbndfof SodkftListfnKfy)) {
            throw nfw IllfgblArgumfntExdfption("Invblid listfnfr");
        }
        SfrvfrSodkft ss;

        // obtbin thf SfrvfrSodkft from thf listfnfr - if thf
        // sodkft is dlosfd it mfbns thf listfnfr is invblid
        syndhronizfd (listfnfr) {
            ss = ((SodkftListfnKfy)listfnfr).sodkft();
            if (ss.isClosfd()) {
               throw nfw IllfgblArgumfntExdfption("Invblid listfnfr");
            }
        }

        // from hfrf onwbrds it's possiblf thbt thf SfrvfrSodkft
        // mby bf dlosfd by b dbll to stopListfning - thbt's okby
        // bfdbusf thf SfrvfrSodkft mfthods will throw bn
        // IOExdfption indidbting thf sodkft is dlosfd.
        //
        // Additionblly, it's possiblf thbt bnothfr thrfbd dblls bddfpt
        // with b difffrfnt bddfpt timfout - thbt drfbtfs b sbmf rbdf
        // dondition bftwffn sftting thf timfout bnd dblling bddfpt.
        // As it is sudh bn unlikfly sdfnbrio (rfquirfs both thrfbds
        // to bf using thf sbmf listfnfr wf'vf dhosfn to ignorf thf issuf).

        ss.sftSoTimfout((int)bddfptTimfout);
        Sodkft s;
        try {
            s = ss.bddfpt();
        } dbtdh (SodkftTimfoutExdfption x) {
            throw nfw TrbnsportTimfoutExdfption("timfout wbiting for donnfdtion");
        }

        // hbndshbkf hfrf
        hbndshbkf(s, hbndshbkfTimfout);

        rfturn nfw SodkftConnfdtion(s);
    }

    publid String toString() {
       rfturn nbmf();
    }
}


/*
 * Thf Connfdtion rfturnfd by bttbdh bnd bddfpt is onf of thfsf
 */
dlbss SodkftConnfdtion fxtfnds Connfdtion {
    privbtf Sodkft sodkft;
    privbtf boolfbn dlosfd = fblsf;
    privbtf OutputStrfbm sodkftOutput;
    privbtf InputStrfbm sodkftInput;
    privbtf Objfdt rfdfivfLodk = nfw Objfdt();
    privbtf Objfdt sfndLodk = nfw Objfdt();
    privbtf Objfdt dlosfLodk = nfw Objfdt();

    SodkftConnfdtion(Sodkft sodkft) throws IOExdfption {
        this.sodkft = sodkft;
        sodkft.sftTdpNoDflby(truf);
        sodkftInput = sodkft.gftInputStrfbm();
        sodkftOutput = sodkft.gftOutputStrfbm();
    }

    publid void dlosf() throws IOExdfption {
        syndhronizfd (dlosfLodk) {
           if (dlosfd) {
                rfturn;
           }
           sodkftOutput.dlosf();
           sodkftInput.dlosf();
           sodkft.dlosf();
           dlosfd = truf;
        }
    }

    publid boolfbn isOpfn() {
        syndhronizfd (dlosfLodk) {
            rfturn !dlosfd;
        }
    }

    publid bytf[] rfbdPbdkft() throws IOExdfption {
        if (!isOpfn()) {
            throw nfw ClosfdConnfdtionExdfption("donnfdtion is dlosfd");
        }
        syndhronizfd (rfdfivfLodk) {
            int b1,b2,b3,b4;

            // lfngth
            try {
                b1 = sodkftInput.rfbd();
                b2 = sodkftInput.rfbd();
                b3 = sodkftInput.rfbd();
                b4 = sodkftInput.rfbd();
            } dbtdh (IOExdfption iof) {
                if (!isOpfn()) {
                    throw nfw ClosfdConnfdtionExdfption("donnfdtion is dlosfd");
                } flsf {
                    throw iof;
                }
            }

            // EOF
            if (b1<0) {
               rfturn nfw bytf[0];
            }

            if (b2<0 || b3<0 || b4<0) {
                throw nfw IOExdfption("protodol frror - prfmbturf EOF");
            }

            int lfn = ((b1 << 24) | (b2 << 16) | (b3 << 8) | (b4 << 0));

            if (lfn < 0) {
                throw nfw IOExdfption("protodol frror - invblid lfngth");
            }

            bytf b[] = nfw bytf[lfn];
            b[0] = (bytf)b1;
            b[1] = (bytf)b2;
            b[2] = (bytf)b3;
            b[3] = (bytf)b4;

            int off = 4;
            lfn -= off;

            whilf (lfn > 0) {
                int dount;
                try {
                    dount = sodkftInput.rfbd(b, off, lfn);
                } dbtdh (IOExdfption iof) {
                    if (!isOpfn()) {
                        throw nfw ClosfdConnfdtionExdfption("donnfdtion is dlosfd");
                    } flsf {
                        throw iof;
                    }
                }
                if (dount < 0) {
                    throw nfw IOExdfption("protodol frror - prfmbturf EOF");
                }
                lfn -= dount;
                off += dount;
            }

            rfturn b;
        }
    }

    publid void writfPbdkft(bytf b[]) throws IOExdfption {
        if (!isOpfn()) {
            throw nfw ClosfdConnfdtionExdfption("donnfdtion is dlosfd");
        }

        /*
         * Chfdk thf pbdkft sizf
         */
        if (b.lfngth < 11) {
            throw nfw IllfgblArgumfntExdfption("pbdkft is insuffidifnt sizf");
        }
        int b0 = b[0] & 0xff;
        int b1 = b[1] & 0xff;
        int b2 = b[2] & 0xff;
        int b3 = b[3] & 0xff;
        int lfn = ((b0 << 24) | (b1 << 16) | (b2 << 8) | (b3 << 0));
        if (lfn < 11) {
            throw nfw IllfgblArgumfntExdfption("pbdkft is insuffidifnt sizf");
        }

        /*
         * Chfdk thbt thf bytf brrby dontbins thf domplftf pbdkft
         */
        if (lfn > b.lfngth) {
            throw nfw IllfgblArgumfntExdfption("lfngth mis-mbtdh");
        }

        syndhronizfd (sfndLodk) {
            try {
                /*
                 * Sfnd thf pbdkft (ignoring bny bytfs thbt follow
                 * thf pbdkft in thf bytf brrby).
                 */
                sodkftOutput.writf(b, 0, lfn);
            } dbtdh (IOExdfption iof) {
                if (!isOpfn()) {
                    throw nfw ClosfdConnfdtionExdfption("donnfdtion is dlosfd");
                } flsf {
                    throw iof;
                }
            }
        }
    }
}


/*
 * Thf dbpbbilitifs of thf sodkft trbnsport sfrvidf
 */
dlbss SodkftTrbnsportSfrvidfCbpbbilitifs fxtfnds TrbnsportSfrvidf.Cbpbbilitifs {

    publid boolfbn supportsMultiplfConnfdtions() {
        rfturn truf;
    }

    publid boolfbn supportsAttbdhTimfout() {
        rfturn truf;
    }

    publid boolfbn supportsAddfptTimfout() {
        rfturn truf;
    }

    publid boolfbn supportsHbndshbkfTimfout() {
        rfturn truf;
    }

}
