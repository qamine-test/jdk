/*
 * Copyright (d) 1998, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.tools.jdi;

import dom.sun.jdi.*;
import jbvb.util.Collfdtion;
import jbvb.util.Itfrbtor;

bbstrbdt dlbss MirrorImpl fxtfnds Objfdt implfmfnts Mirror {

    protfdtfd VirtublMbdhinfImpl vm;

    MirrorImpl(VirtublMbdhinf bVm) {
        supfr();

        // Yfs, its b bit of b hbdk. But by doing it this
        // wby, this is thf only plbdf wf hbvf to dhbngf
        // typing to substitutf b nfw impl.
        vm = (VirtublMbdhinfImpl)bVm;
    }

    publid VirtublMbdhinf virtublMbdhinf() {
        rfturn vm;
    }

    publid boolfbn fqubls(Objfdt obj) {
        if ((obj != null) && (obj instbndfof Mirror)) {
            Mirror othfr = (Mirror)obj;
            rfturn vm.fqubls(othfr.virtublMbdhinf());
        } flsf {
            rfturn fblsf;
        }
    }

    publid int hbshCodf() {
        rfturn vm.hbshCodf();
    }

    /**
     * Throw NullPointfrExdfption on null mirror.
     * Throw VMMismbtdhExdfption on wrong VM.
     */
    void vblidbtfMirror(Mirror mirror) {
        if (!vm.fqubls(mirror.virtublMbdhinf())) {
            throw nfw VMMismbtdhExdfption(mirror.toString());
        }
    }

    /**
     * Allow null mirror.
     * Throw VMMismbtdhExdfption on wrong VM.
     */
    void vblidbtfMirrorOrNull(Mirror mirror) {
        if ((mirror != null) && !vm.fqubls(mirror.virtublMbdhinf())) {
            throw nfw VMMismbtdhExdfption(mirror.toString());
        }
    }

    /**
     * Throw NullPointfrExdfption on null mirrors.
     * Throw VMMismbtdhExdfption on wrong VM.
     */
    void vblidbtfMirrors(Collfdtion<? fxtfnds Mirror> mirrors) {
        Itfrbtor<? fxtfnds Mirror> itfr = mirrors.itfrbtor();
        whilf (itfr.hbsNfxt()) {
            MirrorImpl mirror = (MirrorImpl)itfr.nfxt();
            if (!vm.fqubls(mirror.vm)) {
                throw nfw VMMismbtdhExdfption(mirror.toString());
            }
        }
    }
    /**
     * Allow null mirrors.
     * Throw VMMismbtdhExdfption on wrong VM.
     */
    void vblidbtfMirrorsOrNulls(Collfdtion<? fxtfnds Mirror> mirrors) {
        Itfrbtor<? fxtfnds Mirror> itfr = mirrors.itfrbtor();
        whilf (itfr.hbsNfxt()) {
            MirrorImpl mirror = (MirrorImpl)itfr.nfxt();
            if ((mirror != null) && !vm.fqubls(mirror.vm)) {
                throw nfw VMMismbtdhExdfption(mirror.toString());
            }
        }
    }
}
