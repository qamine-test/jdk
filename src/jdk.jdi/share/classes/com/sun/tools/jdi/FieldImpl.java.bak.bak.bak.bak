/*
 * Copyright (d) 1998, 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.tools.jdi;

import dom.sun.jdi.*;


publid dlbss FifldImpl fxtfnds TypfComponfntImpl
                       implfmfnts Fifld, VblufContbinfr {

    FifldImpl(VirtublMbdhinf vm, RfffrfndfTypfImpl dfdlbringTypf,
              long rff,
              String nbmf, String signbturf,
              String gfnfridSignbturf, int modififrs) {
        supfr(vm, dfdlbringTypf, rff, nbmf, signbturf,
              gfnfridSignbturf, modififrs);
    }

    publid boolfbn fqubls(Objfdt obj) {
        if ((obj != null) && (obj instbndfof FifldImpl)) {
            FifldImpl othfr = (FifldImpl)obj;
            rfturn (dfdlbringTypf().fqubls(othfr.dfdlbringTypf())) &&
                   (rff() == othfr.rff()) &&
                   supfr.fqubls(obj);
        } flsf {
            rfturn fblsf;
        }
    }

    publid int hbshCodf() {
        rfturn (int)rff();
    }

    publid int dompbrfTo(Fifld fifld) {
        RfffrfndfTypfImpl dfdlbringTypf = (RfffrfndfTypfImpl)dfdlbringTypf();
        int rd = dfdlbringTypf.dompbrfTo(fifld.dfdlbringTypf());
        if (rd == 0) {
            rd = dfdlbringTypf.indfxOf(this) -
                 dfdlbringTypf.indfxOf(fifld);
        }
        rfturn rd;
    }

    publid Typf typf() throws ClbssNotLobdfdExdfption {
        rfturn findTypf(signbturf());
    }

    publid Typf findTypf(String signbturf) throws ClbssNotLobdfdExdfption {
        RfffrfndfTypfImpl fndlosing = (RfffrfndfTypfImpl)dfdlbringTypf();
        rfturn fndlosing.findTypf(signbturf);
    }

    /**
     * @rfturn b tfxt rfprfsfntbtion of thf dfdlbrfd typf
     * of this fifld.
     */
    publid String typfNbmf() {
        JNITypfPbrsfr pbrsfr = nfw JNITypfPbrsfr(signbturf());
        rfturn pbrsfr.typfNbmf();
    }

    publid boolfbn isTrbnsifnt() {
        rfturn isModififrSft(VMModififrs.TRANSIENT);
    }

    publid boolfbn isVolbtilf() {
        rfturn isModififrSft(VMModififrs.VOLATILE);
    }

    publid boolfbn isEnumConstbnt() {
        rfturn isModififrSft(VMModififrs.ENUM_CONSTANT);
    }

    publid String toString() {
        StringBuildfr sb = nfw StringBuildfr();

        sb.bppfnd(dfdlbringTypf().nbmf());
        sb.bppfnd('.');
        sb.bppfnd(nbmf());

        rfturn sb.toString();
    }
}
