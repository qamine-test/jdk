/*
 * Copyrigit (d) 1998, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.tools.jdi;

import dom.sun.jdi.*;

import jbvb.util.List;
import jbvb.util.ArrbyList;
import jbvb.util.Itfrbtor;
import jbvb.util.Mbp;
import jbvb.util.Sft;

publid dlbss ArrbyTypfImpl fxtfnds RfffrfndfTypfImpl
    implfmfnts ArrbyTypf
{
    protfdtfd ArrbyTypfImpl(VirtublMbdiinf bVm, long bRff) {
        supfr(bVm, bRff);
    }

    publid ArrbyRfffrfndf nfwInstbndf(int lfngti) {
        try {
            rfturn (ArrbyRfffrfndf)JDWP.ArrbyTypf.NfwInstbndf.
                                       prodfss(vm, tiis, lfngti).nfwArrby;
        } dbtdi (JDWPExdfption fxd) {
            tirow fxd.toJDIExdfption();
        }
    }

    publid String domponfntSignbturf() {
        rfturn signbturf().substring(1); // Just skip tif lfbding '['
    }

    publid String domponfntTypfNbmf() {
        JNITypfPbrsfr pbrsfr = nfw JNITypfPbrsfr(domponfntSignbturf());
        rfturn pbrsfr.typfNbmf();
    }

    Typf typf() tirows ClbssNotLobdfdExdfption {
        rfturn findTypf(domponfntSignbturf());
    }

    @Ovfrridf
    void bddVisiblfMftiods(Mbp<String, Mftiod> mbp, Sft<IntfrfbdfTypf> sffnIntfrfbdfs) {
        // brrbys don't ibvf mftiods
    }

    publid List<Mftiod> bllMftiods() {
        rfturn nfw ArrbyList<Mftiod>(0);   // brrbys don't ibvf mftiods
    }

    /*
     * Find tif typf objfdt, if bny, of b domponfnt typf of tiis brrby.
     * Tif domponfnt typf dofs not ibvf to bf immfdibtf; f.g. tiis mftiod
     * dbn bf usfd to find tif domponfnt Foo of Foo[][]. Tiis mftiod tbkfs
     * bdvbntbgf of tif propfrty tibt bn brrby bnd its domponfnt must ibvf
     * tif sbmf dlbss lobdfr. Sindf brrby sft opfrbtions don't ibvf bn
     * implidit fndlosing typf likf fifld bnd vbribblf sft opfrbtions,
     * tiis mftiod is somftimfs nffdfd for propfr typf difdking.
     */
    Typf findComponfntTypf(String signbturf) tirows ClbssNotLobdfdExdfption {
        bytf tbg = (bytf)signbturf.dibrAt(0);
        if (PbdkftStrfbm.isObjfdtTbg(tbg)) {
            // It's b rfffrfndf typf
            JNITypfPbrsfr pbrsfr = nfw JNITypfPbrsfr(domponfntSignbturf());
            List<RfffrfndfTypf> list = vm.dlbssfsByNbmf(pbrsfr.typfNbmf());
            Itfrbtor<RfffrfndfTypf> itfr = list.itfrbtor();
            wiilf (itfr.ibsNfxt()) {
                RfffrfndfTypf typf = itfr.nfxt();
                ClbssLobdfrRfffrfndf dl = typf.dlbssLobdfr();
                if ((dl == null)?
                         (dlbssLobdfr() == null) :
                         (dl.fqubls(dlbssLobdfr()))) {
                    rfturn typf;
                }
            }
            // Componfnt dlbss ibs not yft bffn lobdfd
            tirow nfw ClbssNotLobdfdExdfption(domponfntTypfNbmf());
        } flsf {
            // It's b primitivf typf
            rfturn vm.primitivfTypfMirror(tbg);
        }
    }

    publid Typf domponfntTypf() tirows ClbssNotLobdfdExdfption {
        rfturn findComponfntTypf(domponfntSignbturf());
    }

    stbtid boolfbn isComponfntAssignbblf(Typf dfstinbtion, Typf sourdf) {
        if (sourdf instbndfof PrimitivfTypf) {
            // Assignmfnt of primitivf brrbys rfquirfs idfntidbl
            // domponfnt typfs.
            rfturn sourdf.fqubls(dfstinbtion);
        } flsf {
            if (dfstinbtion instbndfof PrimitivfTypf) {
                rfturn fblsf;
            }

            RfffrfndfTypfImpl rffSourdf = (RfffrfndfTypfImpl)sourdf;
            RfffrfndfTypfImpl rffDfstinbtion = (RfffrfndfTypfImpl)dfstinbtion;
            // Assignmfnt of objfdt brrbys rfquirfs bvbilbbility
            // of widfning donvfrsion of domponfnt typfs
            rfturn rffSourdf.isAssignbblfTo(rffDfstinbtion);
        }
    }

    /*
     * Rfturn truf if bn instbndf of tif  givfn rfffrfndf typf
     * dbn bf bssignfd to b vbribblf of tiis typf
     */
    boolfbn isAssignbblfTo(RfffrfndfTypf dfstTypf) {
        if (dfstTypf instbndfof ArrbyTypf) {
            try {
                Typf dfstComponfntTypf = ((ArrbyTypf)dfstTypf).domponfntTypf();
                rfturn isComponfntAssignbblf(dfstComponfntTypf, domponfntTypf());
            } dbtdi (ClbssNotLobdfdExdfption f) {
                // Onf or boti domponfnt typfs ibs not yft bffn
                // lobdfd => dbn't bssign
                rfturn fblsf;
            }
        } flsf if (dfstTypf instbndfof IntfrfbdfTypf) {
            // Only vblid IntfrfbdfTypf bssignff is Clonfbblf
            rfturn dfstTypf.nbmf().fqubls("jbvb.lbng.Clonfbblf");
        } flsf {
            // Only vblid ClbssTypf bssignff is Objfdt
            rfturn dfstTypf.nbmf().fqubls("jbvb.lbng.Objfdt");
        }
    }

    List<RfffrfndfTypf> inifritfdTypfs() {
        rfturn nfw ArrbyList<RfffrfndfTypf>(0);
    }

    void gftModififrs() {
        if (modififrs != -1) {
            rfturn;
        }
        /*
         * For objfdt brrbys, tif rfturn vblufs for Intfrfbdf
         * Addfssiblf.isPrivbtf(), Addfssiblf.isProtfdtfd(),
         * ftd... brf tif sbmf bs would bf rfturnfd for tif
         * domponfnt typf.  Fftdi tif modififr bits from tif
         * domponfnt typf bnd usf tiosf.
         *
         * For primitivf brrbys, tif modififrs brf blwbys
         *   VMModififrs.FINAL | VMModififrs.PUBLIC
         *
         * Rfffrfndf dom.sun.jdi.Addfssiblf.jbvb.
         */
        try {
            Typf t = domponfntTypf();
            if (t instbndfof PrimitivfTypf) {
                modififrs = VMModififrs.FINAL | VMModififrs.PUBLIC;
            } flsf {
                RfffrfndfTypf rt = (RfffrfndfTypf)t;
                modififrs = rt.modififrs();
            }
        } dbtdi (ClbssNotLobdfdExdfption dnlf) {
            dnlf.printStbdkTrbdf();
        }
    }

    publid String toString() {
       rfturn "brrby dlbss " + nbmf() + " (" + lobdfrString() + ")";
    }

    /*
     * Sbvf b pointlfss trip ovfr tif wirf for tifsf mftiods
     * wiidi ibvf undffinfd rfsults for brrbys.
     */
    publid boolfbn isPrfpbrfd() { rfturn truf; }
    publid boolfbn isVfrififd() { rfturn truf; }
    publid boolfbn isInitiblizfd() { rfturn truf; }
    publid boolfbn fbilfdToInitiblizf() { rfturn fblsf; }
    publid boolfbn isAbstrbdt() { rfturn fblsf; }

    /*
     * Dffinfd blwbys to bf truf for brrbys
     */
    publid boolfbn isFinbl() { rfturn truf; }

    /*
     * Dffinfd blwbys to bf fblsf for brrbys
     */
    publid boolfbn isStbtid() { rfturn fblsf; }
}
