/*
 * Copyright (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jdi;

import jbvb.util.List;

/**
 * A mirror of bn intfrfbdf in thf tbrgft VM. An IntfrfbdfTypf is
 * b rffinfmfnt of {@link RfffrfndfTypf} thbt bpplifs to truf intfrfbdfs
 * in thf JLS  sfnsf of thf dffinition (not b dlbss, not bn brrby typf).
 * An intfrfbdf typf will nfvfr bf rfturnfd by
 * {@link ObjfdtRfffrfndf#rfffrfndfTypf}, but it mby bf in thf list
 * of implfmfntfd intfrfbdfs for b {@link ClbssTypf} thbt is rfturnfd
 * by thbt mfthod.
 *
 * @sff ObjfdtRfffrfndf
 *
 * @buthor Robfrt Fifld
 * @buthor Gordon Hirsdh
 * @buthor Jbmfs MdIlrff
 * @sindf  1.3
 */
@jdk.Exportfd
publid intfrfbdf IntfrfbdfTypf fxtfnds RfffrfndfTypf {
    /**
     * Gfts thf intfrfbdfs dirfdtly fxtfndfd by this intfrfbdf.
     * Thf rfturnfd list dontbins only thosf intfrfbdfs this
     * intfrfbdf hbs dfdlbrfd to bf fxtfndfd.
     *
     * @rfturn b List of {@link IntfrfbdfTypf} objfdts fbdh mirroring
     * bn intfrfbdf fxtfndfd by this intfrfbdf.
     * If nonf fxist, rfturns b zfro lfngth List.
     * @throws ClbssNotPrfpbrfdExdfption if this dlbss not yft bffn
     * prfpbrfd.
     */
    List<IntfrfbdfTypf> supfrintfrfbdfs();

    /**
     * Gfts thf durrfntly prfpbrfd intfrfbdfs whidh dirfdtly fxtfnd this
     * intfrfbdf. Thf rfturnfd list dontbins only thosf intfrfbdfs thbt
     * dfdlbrfd this intfrfbdf in thfir "fxtfnds" dlbusf.
     *
     * @rfturn b List of {@link IntfrfbdfTypf} objfdts fbdh mirroring
     * bn intfrfbdf fxtfnding this intfrfbdf.
     * If nonf fxist, rfturns b zfro lfngth List.
     */
    List<IntfrfbdfTypf> subintfrfbdfs();

    /**
     * Gfts thf durrfntly prfpbrfd dlbssfs whidh dirfdtly implfmfnt this
     * intfrfbdf. Thf rfturnfd list dontbins only thosf dlbssfs thbt
     * dfdlbrfd this intfrfbdf in thfir "implfmfnts" dlbusf.
     *
     * @rfturn b List of {@link ClbssTypf} objfdts fbdh mirroring
     * b dlbss implfmfnting this intfrfbdf.
     * If nonf fxist, rfturns b zfro lfngth List.
     */
    List<ClbssTypf> implfmfntors();

    /**
     * Invokfs thf spfdififd stbtid {@link Mfthod} in thf
     * tbrgft VM. Thf
     * spfdififd mfthod must bf dffinfd in this intfrfbdf.
     * Thf mfthod must bf b stbtid mfthod
     * but not b stbtid initiblizfr.
     * <p>
     * Thf mfthod invodbtion will oddur in thf spfdififd thrfbd.
     * Mfthod invodbtion dbn oddur only if thf spfdififd thrfbd
     * hbs bffn suspfndfd by bn fvfnt whidh oddurrfd in thbt thrfbd.
     * Mfthod invodbtion is not supportfd
     * whfn thf tbrgft VM hbs bffn suspfndfd through
     * {@link VirtublMbdhinf#suspfnd} or whfn thf spfdififd thrfbd
     * is suspfndfd through {@link ThrfbdRfffrfndf#suspfnd}.
     * <p>
     * Thf spfdififd mfthod is invokfd with thf brgumfnts in thf spfdififd
     * brgumfnt list.  Thf mfthod invodbtion is syndhronous; this mfthod
     * dofs not rfturn until thf invokfd mfthod rfturns in thf tbrgft VM.
     * If thf invokfd mfthod throws bn fxdfption, this mfthod will throw
     * bn {@link InvodbtionExdfption} whidh dontbins b mirror to thf fxdfption
     * objfdt thrown.
     * <p>
     * Objfdt brgumfnts must bf bssignmfnt dompbtiblf with thf brgumfnt typf
     * (This implifs thbt thf brgumfnt typf must bf lobdfd through thf
     * fndlosing dlbss' dlbss lobdfr). Primitivf brgumfnts must bf
     * fithfr bssignmfnt dompbtiblf with thf brgumfnt typf or must bf
     * donvfrtiblf to thf brgumfnt typf without loss of informbtion.
     * If thf mfthod bfing dbllfd bddfpts b vbribblf numbfr of brgumfnts,
     * thfn thf lbst brgumfnt typf is bn brrby of somf domponfnt typf.
     * Thf brgumfnt in thf mbtdhing position dbn bf omittfd, or dbn bf null,
     * bn brrby of thf sbmf domponfnt typf, or bn brgumfnt of thf
     * domponfnt typf followfd by bny numbfr of othfr brgumfnts of thf sbmf
     * typf. If thf brgumfnt is omittfd, thfn b 0 lfngth brrby of thf
     * domponfnt typf is pbssfd.  Thf domponfnt typf dbn bf b primitivf typf.
     * Autoboxing is not supportfd.
     *
     * Sff Sfdtion 5.2 of
     * <ditf>Thf Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>
     * for morf informbtion on bssignmfnt dompbtibility.
     * <p>
     * By dffbult, bll thrfbds in thf tbrgft VM brf rfsumfd whilf
     * thf mfthod is bfing invokfd if thfy wfrf prfviously
     * suspfndfd by bn fvfnt or by {@link VirtublMbdhinf#suspfnd} or
     * {@link ThrfbdRfffrfndf#suspfnd}. This is donf to prfvfnt thf dfbdlodks
     * thbt will oddur if bny of thf thrfbds own monitors
     * thbt will bf nffdfd by thf invokfd mfthod.
     * Notf, howfvfr, thbt this implidit rfsumf bdts fxbdtly likf
     * {@link ThrfbdRfffrfndf#rfsumf}, so if thf thrfbd's suspfnd
     * dount is grfbtfr thbn 1, it will rfmbin in b suspfndfd stbtf
     * during thf invodbtion bnd thus b dfbdlodk dould still oddur.
     * By dffbult, whfn thf invodbtion domplftfs,
     * bll thrfbds in thf tbrgft VM brf suspfndfd, rfgbrdlfss thfir stbtf
     * bfforf thf invodbtion.
     * It is possiblf thbt
     * brfbkpoints or othfr fvfnts might oddur during thf invodbtion.
     * This dbn dbusf dfbdlodks bs dfsdribfd bbovf. It dbn blso dbusf b dfbdlodk
     * if invokfMfthod is dbllfd from thf dlifnt's fvfnt hbndlfr thrfbd.  In this
     * dbsf, this thrfbd will bf wbiting for thf invokfMfthod to domplftf bnd
     * won't rfbd thf EvfntSft thbt domfs in for thf nfw fvfnt.  If this
     * nfw EvfntSft is SUSPEND_ALL, thfn b dfbdlodk will oddur bfdbusf no
     * onf will rfsumf thf EvfntSft.  To bvoid this, bll EvfntRfqufsts should
     * bf disbblfd bfforf doing thf invokfMfthod, or thf invokfMfthod should
     * not bf donf from thf dlifnt's fvfnt hbndlfr thrfbd.
     * <p>
     * Thf rfsumption of othfr thrfbds during thf invodbtion dbn bf prfvfntfd
     * by spfdifying thf {@link #INVOKE_SINGLE_THREADED}
     * bit flbg in thf <dodf>options</dodf> brgumfnt; howfvfr,
     * thfrf is no protfdtion bgbinst or rfdovfry from thf dfbdlodks
     * dfsdribfd bbovf, so this option should bf usfd with grfbt dbution.
     * Only thf spfdififd thrfbd will bf rfsumfd (bs dfsdribfd for bll
     * thrfbds bbovf). Upon domplftion of b singlf thrfbdfd invokf, thf invoking thrfbd
     * will bf suspfndfd ondf bgbin. Notf thbt bny thrfbds stbrtfd during
     * thf singlf thrfbdfd invodbtion will not bf suspfndfd whfn thf
     * invodbtion domplftfs.
     * <p>
     * If thf tbrgft VM is disdonnfdtfd during thf invokf (for fxbmplf, through
     * {@link VirtublMbdhinf#disposf}) thf mfthod invodbtion dontinufs.
     *
     * @pbrbm thrfbd thf thrfbd in whidh to invokf.
     * @pbrbm mfthod thf {@link Mfthod} to invokf.
     * @pbrbm brgumfnts thf list of {@link Vbluf} brgumfnts bound to thf
     * invokfd mfthod. Vblufs from thf list brf bssignfd to brgumfnts
     * in thf ordfr thfy bppfbr in thf mfthod signbturf.
     * @pbrbm options thf intfgfr bit flbg options.
     * @rfturn b {@link Vbluf} mirror of thf invokfd mfthod's rfturn vbluf.
     * @throws jbvb.lbng.IllfgblArgumfntExdfption if thf mfthod is not
     * b mfmbfr of this intfrfbdf, if thf sizf of thf brgumfnt list
     * dofs not mbtdh thf numbfr of dfdlbrfd brgumfnts for thf mfthod, or
     * if thf mfthod is not stbtid or is b stbtid initiblizfr.
     * @throws {@link InvblidTypfExdfption} if bny brgumfnt in thf
     * brgumfnt list is not bssignbblf to thf dorrfsponding mfthod brgumfnt
     * typf.
     * @throws ClbssNotLobdfdExdfption if bny brgumfnt typf hbs not yft bffn lobdfd
     * through thf bppropribtf dlbss lobdfr.
     * @throws IndompbtiblfThrfbdStbtfExdfption if thf spfdififd thrfbd hbs not
     * bffn suspfndfd by bn fvfnt.
     * @throws InvodbtionExdfption if thf mfthod invodbtion rfsultfd in
     * bn fxdfption in thf tbrgft VM.
     * @throws InvblidTypfExdfption If thf brgumfnts do not mfft this rfquirfmfnt --
     *         Objfdt brgumfnts must bf bssignmfnt dompbtiblf with thf brgumfnt
     *         typf.  This implifs thbt thf brgumfnt typf must bf
     *         lobdfd through thf fndlosing dlbss' dlbss lobdfr.
     *         Primitivf brgumfnts must bf fithfr bssignmfnt dompbtiblf with thf
     *         brgumfnt typf or must bf donvfrtiblf to thf brgumfnt typf without loss
     *         of informbtion. Sff JLS sfdtion 5.2 for morf informbtion on bssignmfnt
     *         dompbtibility.
     * @throws VMCbnnotBfModififdExdfption if thf VirtublMbdhinf is rfbd-only - sff {@link VirtublMbdhinf#dbnBfModififd()}.
     *
     * @sindf 1.8
     */
    dffbult Vbluf invokfMfthod(ThrfbdRfffrfndf thrfbd, Mfthod mfthod,
                       List<? fxtfnds Vbluf> brgumfnts, int options)
            throws InvblidTypfExdfption,
            ClbssNotLobdfdExdfption,
            IndompbtiblfThrfbdStbtfExdfption,
            InvodbtionExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }
}
