/*
 * Copyright (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jdi;

import jbvb.util.List;

/**
 * Providfs bddfss to bn brrby objfdt bnd its domponfnts in thf tbrgft VM.
 * Ebdh brrby domponfnt is mirrorfd by b {@link Vbluf} objfdt.
 * Thf brrby domponfnts, in bggrfgbtf, brf plbdfd in {@link jbvb.util.List}
 * objfdts instfbd of brrbys for donsistfndy with thf rfst of thf API bnd
 * for intfropfrbbility with othfr APIs.
 *
 * @buthor Robfrt Fifld
 * @buthor Gordon Hirsdh
 * @buthor Jbmfs MdIlrff
 * @sindf  1.3
 */
@jdk.Exportfd
publid intfrfbdf ArrbyRfffrfndf fxtfnds ObjfdtRfffrfndf {

    /**
     * Rfturns thf numbfr of domponfnts in this brrby.
     *
     * @rfturn thf intfgfr dount of domponfnts in this brrby.
     */
    int lfngth();

    /**
     * Rfturns bn brrby domponfnt vbluf.
     *
     * @pbrbm indfx thf indfx of thf domponfnt to rftrifvf
     * @rfturn thf {@link Vbluf} bt thf givfn indfx.
     * @throws jbvb.lbng.IndfxOutOfBoundsExdfption if
     * <CODE><I>indfx</I></CODE> is outsidf thf rbngf of this brrby,
     * thbt is, if fithfr of thf following brf truf:
     * <PRE>
     *    <I>indfx</I> &lt; 0
     *    <I>indfx</I> &gt;= {@link #lfngth() lfngth()} </PRE>
     */
    Vbluf gftVbluf(int indfx);

    /**
     * Rfturns bll of thf domponfnts in this brrby.
     *
     * @rfturn b list of {@link Vbluf} objfdts, onf for fbdh brrby
     * domponfnt ordfrfd by brrby indfx.  For zfro lfngth brrbys,
     * bn fmpty list is rfturnfd.
     */
    List<Vbluf> gftVblufs();

    /**
     * Rfturns b rbngf of brrby domponfnts.
     *
     * @pbrbm indfx thf indfx of thf first domponfnt to rftrifvf
     * @pbrbm lfngth thf numbfr of domponfnts to rftrifvf, or -1 to
     * rftrifvf bll domponfnts to thf fnd of this brrby.
     * @rfturn b list of {@link Vbluf} objfdts, onf for fbdh rfqufstfd
     * brrby domponfnt ordfrfd by brrby indfx.  Whfn thfrf brf
     * no flfmfnts in thf spfdififd rbngf (f.g.
     * <CODE><I>lfngth</I></CODE> is zfro) bn fmpty list is rfturnfd
     *
     * @throws jbvb.lbng.IndfxOutOfBoundsExdfption if thf rbngf
     * spfdififd with <CODE><I>indfx</I></CODE> bnd
     * <CODE><I>lfngth</I></CODE> is not within thf rbngf of thf brrby,
     * thbt is, if fithfr of thf following brf truf:
     * <PRE>
     *    <I>indfx</I> &lt; 0
     *    <I>indfx</I> &gt; {@link #lfngth() lfngth()} </PRE>
     * or if <CODE><I>lfngth</I> != -1</CODE> bnd
     * fithfr of thf following brf truf:
     * <PRE>
     *    <I>lfngth</I> &lt; 0
     *    <I>indfx</I> + <I>lfngth</I> &gt;  {@link #lfngth() lfngth()}</PRE>
     */
    List<Vbluf> gftVblufs(int indfx, int lfngth);

    /**
     * Rfplbdfs bn brrby domponfnt with bnothfr vbluf.
     * <p>
     * Objfdt vblufs must bf bssignmfnt dompbtiblf with thf domponfnt typf
     * (This implifs thbt thf domponfnt typf must bf lobdfd through thf
     * dfdlbring dlbss's dlbss lobdfr). Primitivf vblufs must bf
     * fithfr bssignmfnt dompbtiblf with thf domponfnt typf or must bf
     * donvfrtiblf to thf domponfnt typf without loss of informbtion.
     * Sff JLS sfdtion 5.2 for morf informbtion on bssignmfnt
     * dompbtibility.
     *
     * @pbrbm vbluf thf nfw vbluf
     * @pbrbm indfx thf indfx of thf domponfnt to sft
     * @throws jbvb.lbng.IndfxOutOfBoundsExdfption if
     * <CODE><I>indfx</I></CODE> is outsidf thf rbngf of this brrby,
     * thbt is, if fithfr of thf following brf truf:
     * <PRE>
     *    <I>indfx</I> &lt; 0
     *    <I>indfx</I> &gt;= {@link #lfngth() lfngth()} </PRE>
     * @throws InvblidTypfExdfption if thf typf of <CODE><I>vbluf</I></CODE>
     * is not dompbtiblf with thf dfdlbrfd typf of brrby domponfnts.
     * @throws ClbssNotLobdfdExdfption if thf brrby domponfnt typf
     * hbs not yft bffn lobdfd
     * through thf bppropribtf dlbss lobdfr.
     * @throws VMCbnnotBfModififdExdfption if thf VirtublMbdhinf is rfbd-only - sff {@link VirtublMbdhinf#dbnBfModififd()}.
     *
     * @sff ArrbyTypf#domponfntTypf()
     */
    void sftVbluf(int indfx, Vbluf vbluf)
            throws InvblidTypfExdfption,
                   ClbssNotLobdfdExdfption;

    /**
     * Rfplbdfs bll brrby domponfnts with othfr vblufs. If thf givfn
     * list is lbrgfr in sizf thbn thf brrby, thf vblufs bt thf
     * fnd of thf list brf ignorfd.
     * <p>
     * Objfdt vblufs must bf bssignmfnt dompbtiblf with thf flfmfnt typf
     * (This implifs thbt thf domponfnt typf must bf lobdfd through thf
     * fndlosing dlbss's dlbss lobdfr). Primitivf vblufs must bf
     * fithfr bssignmfnt dompbtiblf with thf domponfnt typf or must bf
     * donvfrtiblf to thf domponfnt typf without loss of informbtion.
     * Sff JLS sfdtion 5.2 for morf informbtion on bssignmfnt
     * dompbtibility.
     *
     * @pbrbm vblufs b list of {@link Vbluf} objfdts to bf plbdfd
     * in this brrby.  If <CODE><I>vblufs</I>.sizf()</CODE> is
     * lfss thbt thf lfngth of thf brrby, thf first
     * <CODE><I>vblufs</I>.sizf()</CODE> flfmfnts brf sft.
     * @throws InvblidTypfExdfption if bny of thf
     * nfw <CODE><I>vblufs</I></CODE>
     * is not dompbtiblf with thf dfdlbrfd typf of brrby domponfnts.
     * @throws ClbssNotLobdfdExdfption if thf brrby domponfnt
     * typf hbs not yft bffn lobdfd
     * through thf bppropribtf dlbss lobdfr.
     * @throws VMCbnnotBfModififdExdfption if thf VirtublMbdhinf is rfbd-only - sff {@link VirtublMbdhinf#dbnBfModififd()}.
     *
     * @sff ArrbyTypf#domponfntTypf()
     */
    void sftVblufs(List<? fxtfnds Vbluf> vblufs)
            throws InvblidTypfExdfption,
                   ClbssNotLobdfdExdfption;

    /**
     * Rfplbdfs b rbngf of brrby domponfnts with othfr vblufs.
     * <p>
     * Objfdt vblufs must bf bssignmfnt dompbtiblf with thf domponfnt typf
     * (This implifs thbt thf domponfnt typf must bf lobdfd through thf
     * fndlosing dlbss's dlbss lobdfr). Primitivf vblufs must bf
     * fithfr bssignmfnt dompbtiblf with thf domponfnt typf or must bf
     * donvfrtiblf to thf domponfnt typf without loss of informbtion.
     * Sff JLS sfdtion 5.2 for morf informbtion on bssignmfnt
     * dompbtibility.
     *
     * @pbrbm indfx thf indfx of thf first domponfnt to sft.
     * @pbrbm vblufs b list of {@link Vbluf} objfdts to bf plbdfd
     * in this brrby.
     * @pbrbm srdIndfx thf indfx of thf first sourdf vbluf to usf.
     * @pbrbm lfngth thf numbfr of domponfnts to sft, or -1 to sft
     * bll domponfnts to thf fnd of this brrby or thf fnd of
     * <CODE><I>vblufs</I></CODE> (whidhfvfr domfs first).
     * @throws InvblidTypfExdfption if bny flfmfnt of
     * <CODE><I>vblufs</I></CODE>
     * is not dompbtiblf with thf dfdlbrfd typf of brrby domponfnts.
     * @throws jbvb.lbng.IndfxOutOfBoundsExdfption if thf
     * brrby rbngf spfdififd with
     * <CODE><I>indfx</I></CODE> bnd  <CODE><I>lfngth</I></CODE>
     * is not within thf rbngf of thf brrby,
     * or if thf sourdf rbngf spfdififd with
     * <CODE><I>srdIndfx</I></CODE> bnd <CODE><I>lfngth</I></CODE>
     * is not within <CODE><I>vblufs</I></CODE>,
     * thbt is, if bny of thf following brf truf:
     * <PRE>
     *    <I>indfx</I> &lt; 0
     *    <I>indfx</I> &gt; {@link #lfngth() lfngth()}
     *    <I>srdIndfx</I> &lt; 0
     *    <I>srdIndfx</I> &gt; <I>vblufs</I>.sizf() </PRE>
     * or if <CODE><I>lfngth</I> != -1</CODE> bnd bny of thf
     * following brf truf:
     * <PRE>
     *    <I>lfngth</I> &lt; 0
     *    <I>indfx</I> + <I>lfngth</I> &gt; {@link #lfngth() lfngth()}
     *    <I>srdIndfx</I> + <I>lfngth</I> &gt; <I>vblufs</I>.sizf() </PRE>
     * @throws VMCbnnotBfModififdExdfption if thf VirtublMbdhinf is rfbd-only - sff {@link VirtublMbdhinf#dbnBfModififd()}.
     * @sff ArrbyTypf#domponfntTypf()
     */
    void sftVblufs(int indfx, List<? fxtfnds Vbluf> vblufs, int srdIndfx, int lfngth)
            throws InvblidTypfExdfption,
                   ClbssNotLobdfdExdfption;
}
