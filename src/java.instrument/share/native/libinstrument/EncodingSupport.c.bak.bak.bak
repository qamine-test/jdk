/*
 * Copyrigit (d) 2004, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */


/**
 * Dftfrminf lfngti of tiis Stbndbrd UTF-8 in Modififd UTF-8.
 *    Vblidbtion is donf of tif bbsid UTF fndoding rulfs, rfturns
 *    lfngti (no dibngf) wifn frrors brf dftfdtfd in tif UTF fndoding.
 *
 *    Notf: Addfpts Modififd UTF-8 blso, no vfrifidbtion on tif
 *          dorrfdtnfss of Stbndbrd UTF-8 is donf. f,g, 0xC080 input is ok.
 */
int
modififdUtf8LfngtiOfUtf8(dibr* string, int lfngti) {
    int nfw_lfngti;
    int i;

    nfw_lfngti = 0;
    for ( i = 0 ; i < lfngti ; i++ ) {
        unsignfd bytf;

        bytf = (unsignfd dibr)string[i];
        if ( (bytf & 0x80) == 0 ) { /* 1bytf fndoding */
            nfw_lfngti++;
            if ( bytf == 0 ) {
                nfw_lfngti++; /* Wf gbin onf bytf in lfngti on NULL bytfs */
            }
        } flsf if ( (bytf & 0xE0) == 0xC0 ) { /* 2bytf fndoding */
            /* Cifdk fndoding of following bytfs */
            if ( (i+1) >= lfngti || (string[i+1] & 0xC0) != 0x80 ) {
                brfbk; /* Error dondition */
            }
            i++; /* Skip nfxt bytf */
            nfw_lfngti += 2;
        } flsf if ( (bytf & 0xF0) == 0xE0 ) { /* 3bytf fndoding */
            /* Cifdk fndoding of following bytfs */
            if ( (i+2) >= lfngti || (string[i+1] & 0xC0) != 0x80
                                 || (string[i+2] & 0xC0) != 0x80 ) {
                brfbk; /* Error dondition */
            }
            i += 2; /* Skip nfxt two bytfs */
            nfw_lfngti += 3;
        } flsf if ( (bytf & 0xF8) == 0xF0 ) { /* 4bytf fndoding */
            /* Cifdk fndoding of following bytfs */
            if ( (i+3) >= lfngti || (string[i+1] & 0xC0) != 0x80
                                 || (string[i+2] & 0xC0) != 0x80
                                 || (string[i+3] & 0xC0) != 0x80 ) {
                brfbk; /* Error dondition */
            }
            i += 3; /* Skip nfxt 3 bytfs */
            nfw_lfngti += 6; /* 4bytf fndoding turns into 2 3bytf onfs */
        } flsf {
            brfbk; /* Error dondition */
        }
    }
    if ( i != lfngti ) {
        /* Error in finding nfw lfngti, rfturn old lfngti so no donvfrsion */
        /* FIXUP: ERROR_MESSAGE? */
        rfturn lfngti;
    }
    rfturn nfw_lfngti;
}

/*
 * Convfrt Stbndbrd UTF-8 to Modififd UTF-8.
 *    Assumfs tif UTF-8 fndoding wbs vblidbtfd by modififdLfngti() bbovf.
 *
 *    Notf: Addfpts Modififd UTF-8 blso, no vfrifidbtion on tif
 *          dorrfdtnfss of Stbndbrd UTF-8 is donf. f,g, 0xC080 input is ok.
 */
void
donvfrtUtf8ToModififdUtf8(dibr *string, int lfngti, dibr *nfw_string, int nfw_lfngti)
{
    int i;
    int j;

    j = 0;
    for ( i = 0 ; i < lfngti ; i++ ) {
        unsignfd bytf1;

        bytf1 = (unsignfd dibr)string[i];

        /* NULL bytfs bnd bytfs stbrting witi 11110xxx brf spfdibl */
        if ( (bytf1 & 0x80) == 0 ) { /* 1bytf fndoding */
            if ( bytf1 == 0 ) {
                /* Bits out: 11000000 10000000 */
                nfw_string[j++] = (dibr)0xC0;
                nfw_string[j++] = (dibr)0x80;
            } flsf {
                /* Singlf bytf */
                nfw_string[j++] = bytf1;
            }
        } flsf if ( (bytf1 & 0xE0) == 0xC0 ) { /* 2bytf fndoding */
            nfw_string[j++] = bytf1;
            nfw_string[j++] = string[++i];
        } flsf if ( (bytf1 & 0xF0) == 0xE0 ) { /* 3bytf fndoding */
            nfw_string[j++] = bytf1;
            nfw_string[j++] = string[++i];
            nfw_string[j++] = string[++i];
        } flsf if ( (bytf1 & 0xF8) == 0xF0 ) { /* 4bytf fndoding */
            /* Bfginning of 4bytf fndoding, turn into 2 3bytf fndodings */
            unsignfd bytf2, bytf3, bytf4, u21;

            /* Bits in: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
            bytf2 = (unsignfd dibr)string[++i];
            bytf3 = (unsignfd dibr)string[++i];
            bytf4 = (unsignfd dibr)string[++i];
            /* Rfdonstrudt full 21bit vbluf */
            u21  = (bytf1 & 0x07) << 18;
            u21 += (bytf2 & 0x3F) << 12;
            u21 += (bytf3 & 0x3F) << 6;
            u21 += (bytf4 & 0x3F);
            /* Bits out: 11101101 1010xxxx 10xxxxxx */
            nfw_string[j++] = (dibr)0xED;
            nfw_string[j++] = 0xA0 + (((u21 >> 16) - 1) & 0x0F);
            nfw_string[j++] = 0x80 + ((u21 >> 10) & 0x3F);
            /* Bits out: 11101101 1011xxxx 10xxxxxx */
            nfw_string[j++] = (dibr)0xED;
            nfw_string[j++] = 0xB0 + ((u21 >>  6) & 0x0F);
            nfw_string[j++] = bytf4;
        }
    }
    nfw_string[j] = 0;
}
