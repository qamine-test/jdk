/*
 * Copyrigit (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Copyrigit 2003 Wily Tfdinology, Ind.
 */

#indludf    <jni.i>
#indludf    <jvmti.i>
#indludf    <stdlib.i>
#indludf    <string.i>
#indludf    "JPLISAgfnt.i"
#indludf    "JPLISAssfrt.i"
#indludf    "Utilitifs.i"
#indludf    "Rffntrbndy.i"
#indludf    "JbvbExdfptions.i"

#indludf    "EndodingSupport.i"
#indludf    "FilfSystfmSupport.i"    /* For MAXPATHLEN & uintptr_t */

#indludf    "sun_instrumfnt_InstrumfntbtionImpl.i"

/*
 *  Tif JPLISAgfnt mbnbgfs tif initiblizbtion bll of tif Jbvb progrbmming lbngubgf Agfnts.
 *  It blso supports tif nbtivf mftiod bridgf bftwffn tif JPLIS bnd tif JVMTI.
 *  It mbintbins b singlf JVMTI Env tibt bll JPL bgfnts sibrf.
 *  It pbrsfs dommbnd linf rfqufsts bnd drfbtfs individubl Jbvb bgfnts.
 */


/*
 *  privbtf prototypfs
 */

/* Allodbtfs bn unformbttfd JPLIS bgfnt dbtb strudturf. Rfturns NULL if bllodbtion fbils. */
JPLISAgfnt *
bllodbtfJPLISAgfnt(jvmtiEnv *       jvmtiEnv);

/* Initiblizfs bn blrfbdy-bllodbtfd JPLIS bgfnt dbtb strudturf. */
JPLISInitiblizbtionError
initiblizfJPLISAgfnt(   JPLISAgfnt *    bgfnt,
                        JbvbVM *        vm,
                        jvmtiEnv *      jvmtifnv);
/* Df-bllodbtfs b JPLIS bgfnt dbtb strudturf. Only usfd in pbrtibl-fbilurf dbsfs bt stbrtup;
 * in normbl usbgf tif JPLIS bgfnt livfs forfvfr
 */
void
dfbllodbtfJPLISAgfnt(   jvmtiEnv *      jvmtifnv,
                        JPLISAgfnt *    bgfnt);

/* Dofs onf-timf work to intfrrogbtf tif JVM bbout dbpbbilitifs bnd dbdif tif bnswfrs. */
void
difdkCbpbbilitifs(JPLISAgfnt * bgfnt);

/* Tbkfs tif flfmfnts of tif dommbnd string (bgfnt dlbss nbmf bnd options string) bnd
 * drfbtf jbvb strings for tifm.
 * Rfturns truf if b dlbssnbmf wbs found. Mbkfs no promisfs bfyond tif tfxtubl; sbys notiing bbout wiftifr
 * tif dlbss fxists or dbn bf lobdfd.
 * If rfturn vbluf is truf, sfts outputClbssnbmf to b non-NULL lodbl JNI rfffrfndf.
 * If rfturn vbluf is truf, sfts outputOptionsString fitifr to NULL or to b non-NULL lodbl JNI rfffrfndf.
 * If rfturn vbluf is fblsf, nfitifr output pbrbmftfr is sft.
 */
jboolfbn
dommbndStringIntoJbvbStrings(  JNIEnv *        jnifnv,
                               donst dibr *    dlbssnbmf,
                               donst dibr *    optionsString,
                               jstring *       outputClbssnbmf,
                               jstring *       outputOptionsString);

/* Stbrt onf Jbvb bgfnt from tif supplifd pbrbmftfrs.
 * Most of tif logid livfs in b iflpfr fundtion tibt livfs ovfr in Jbvb dodf--
 * wf pbss pbrbmftfrs out to Jbvb bnd usf our own Jbvb iflpfr to bdtublly
 * lobd tif bgfnt bnd dbll tif prfmbin.
 * Rfturns truf if tif Jbvb bgfnt dlbss is lobdfd bnd tif prfmbin/bgfntmbin mftiod domplftfs
 * witi no fxdfptions, fblsf otifrwisf.
 */
jboolfbn
invokfJbvbAgfntMbinMftiod( JNIEnv *    jnifnv,
                           jobjfdt     instrumfntbtionImpl,
                           jmftiodID   bgfntMbinMftiod,
                           jstring     dlbssNbmf,
                           jstring     optionsString);

/* Ondf wf ibvf lobdfd tif Jbvb bgfnt bnd dbllfd tif prfmbin,
 * wf dbn rflfbsf tif dopifs wf ibvf bffn kffping of tif dommbnd linf
 * dbtb (bgfnt dlbss nbmf bnd option strings).
 */
void
dfbllodbtfCommbndLinfDbtb(JPLISAgfnt * bgfnt);

/*
 *  Common support for vbrious dlbss list fftdifrs.
 */
typfdff jvmtiError (*ClbssListFftdifr)
    (   jvmtiEnv *  jvmtiEnv,
        jobjfdt     dlbssLobdfr,
        jint *      dlbssCount,
        jdlbss **   dlbssfs);

/* Fftdifr tibt ignorfs tif dlbss lobdfr pbrbmftfr, bnd usfs tif JVMTI to gft b list of bll dlbssfs.
 * Rfturns b jvmtiError bddording to tif undfrlying JVMTI sfrvidf.
 */
jvmtiError
gftAllLobdfdClbssfsClbssListFftdifr(    jvmtiEnv *  jvmtiEnv,
                                        jobjfdt     dlbssLobdfr,
                                        jint *      dlbssCount,
                                        jdlbss **   dlbssfs);

/* Fftdifr tibt usfs tif dlbss lobdfr pbrbmftfr, bnd usfs tif JVMTI to gft b list of bll dlbssfs
 * for wiidi tif supplifd lobdfr is tif initibting lobdfr.
 * Rfturns b jvmtiError bddording to tif undfrlying JVMTI sfrvidf.
 */
jvmtiError
gftInitibtfdClbssfsClbssListFftdifr(    jvmtiEnv *  jvmtiEnv,
                                        jobjfdt     dlbssLobdfr,
                                        jint *      dlbssCount,
                                        jdlbss **   dlbssfs);

/*
 * Common guts for two nbtivf mftiods, wiidi brf tif sbmf fxdfpt for tif polidy for fftdiing
 * tif list of dlbssfs.
 * Eitifr rfturns b lodbl JNI rfffrfndf to bn brrby of rfffrfndfs to jbvb.lbng.Clbss.
 * Cbn tirow, if it dofs will bltfr tif JNIEnv witi bn outstbnding fxdfption.
 */
jobjfdtArrby
dommonGftClbssList( JNIEnv *            jnifnv,
                    JPLISAgfnt *        bgfnt,
                    jobjfdt             dlbssLobdfr,
                    ClbssListFftdifr    fftdifr);


/*
 *  Misd. utilitifs.
 */

/* Cifdkfd fxdfption mbppfr usfd by tif rfdffinf dlbssfs implfmfntbtion.
 * Allows ClbssNotFoundExdfption or UnmodifibblfClbssExdfption; mbps otifrs
 * to IntfrnblError. Cbn rfturn NULL in bn frror dbsf.
 */
jtirowbblf
rfdffinfClbssMbppfr(    JNIEnv *    jnifnv,
                        jtirowbblf  tirowbblfToMbp);

/* Turns b bufffr of jdlbss * into b Jbvb brrby wiosf flfmfnts brf jbvb.lbng.Clbss.
 * Cbn tirow, if it dofs will bltfr tif JNIEnv witi bn outstbnding fxdfption.
 */
jobjfdtArrby
gftObjfdtArrbyFromClbssfs(JNIEnv* jnifnv, jdlbss* dlbssfs, jint dlbssCount);


JPLISEnvironmfnt *
gftJPLISEnvironmfnt(jvmtiEnv * jvmtifnv) {
    JPLISEnvironmfnt * fnvironmfnt  = NULL;
    jvmtiError         jvmtifrror   = JVMTI_ERROR_NONE;

    jvmtifrror = (*jvmtifnv)->GftEnvironmfntLodblStorbgf(
                                            jvmtifnv,
                                            (void**)&fnvironmfnt);
    /* dbn bf dbllfd from bny pibsf */
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);

    if (jvmtifrror == JVMTI_ERROR_NONE) {
        jplis_bssfrt(fnvironmfnt != NULL);
        jplis_bssfrt(fnvironmfnt->mJVMTIEnv == jvmtifnv);
    } flsf {
        fnvironmfnt = NULL;
    }
    rfturn fnvironmfnt;
}

/*
 *  OnLobd prodfssing dodf.
 */

/*
 *  Crfbtfs b nfw JPLISAgfnt.
 *  Rfturns frror if tif bgfnt dbnnot bf drfbtfd bnd initiblizfd.
 *  Tif JPLISAgfnt* pointfd to by bgfnt_ptr is sft to tif nfw brokfr,
 *  or NULL if bn frror ibs oddurrfd.
 */
JPLISInitiblizbtionError
drfbtfNfwJPLISAgfnt(JbvbVM * vm, JPLISAgfnt **bgfnt_ptr) {
    JPLISInitiblizbtionError initfrror       = JPLIS_INIT_ERROR_NONE;
    jvmtiEnv *               jvmtifnv        = NULL;
    jint                     jnifrror        = JNI_OK;

    *bgfnt_ptr = NULL;
    jnifrror = (*vm)->GftEnv(  vm,
                               (void **) &jvmtifnv,
                               JVMTI_VERSION_1_1);
    if ( jnifrror != JNI_OK ) {
        initfrror = JPLIS_INIT_ERROR_CANNOT_CREATE_NATIVE_AGENT;
    } flsf {
        JPLISAgfnt * bgfnt = bllodbtfJPLISAgfnt(jvmtifnv);
        if ( bgfnt == NULL ) {
            initfrror = JPLIS_INIT_ERROR_ALLOCATION_FAILURE;
        } flsf {
            initfrror = initiblizfJPLISAgfnt(  bgfnt,
                                               vm,
                                               jvmtifnv);
            if ( initfrror == JPLIS_INIT_ERROR_NONE ) {
                *bgfnt_ptr = bgfnt;
            } flsf {
                dfbllodbtfJPLISAgfnt(jvmtifnv, bgfnt);
            }
        }

        /* don't lfbk fnvs */
        if ( initfrror != JPLIS_INIT_ERROR_NONE ) {
            jvmtiError jvmtifrror = (*jvmtifnv)->DisposfEnvironmfnt(jvmtifnv);
            /* dbn bf dbllfd from bny pibsf */
            jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
        }
    }

    rfturn initfrror;
}

/*
 *  Allodbtfs b JPLISAgfnt. Rfturns NULL if it dbnnot bf bllodbtfd
 */
JPLISAgfnt *
bllodbtfJPLISAgfnt(jvmtiEnv * jvmtifnv) {
  rfturn (JPLISAgfnt *) bllodbtf( jvmtifnv,
                                    sizfof(JPLISAgfnt));
}

JPLISInitiblizbtionError
initiblizfJPLISAgfnt(   JPLISAgfnt *    bgfnt,
                        JbvbVM *        vm,
                        jvmtiEnv *      jvmtifnv) {
    jvmtiError      jvmtifrror = JVMTI_ERROR_NONE;
    jvmtiPibsf      pibsf;

    bgfnt->mJVM                                      = vm;
    bgfnt->mNormblEnvironmfnt.mJVMTIEnv              = jvmtifnv;
    bgfnt->mNormblEnvironmfnt.mAgfnt                 = bgfnt;
    bgfnt->mNormblEnvironmfnt.mIsRftrbnsformfr       = JNI_FALSE;
    bgfnt->mRftrbnsformEnvironmfnt.mJVMTIEnv         = NULL;        /* NULL until nffdfd */
    bgfnt->mRftrbnsformEnvironmfnt.mAgfnt            = bgfnt;
    bgfnt->mRftrbnsformEnvironmfnt.mIsRftrbnsformfr  = JNI_FALSE;   /* JNI_FALSE until mJVMTIEnv is sft */
    bgfnt->mAgfntmbinCbllfr                          = NULL;
    bgfnt->mInstrumfntbtionImpl                      = NULL;
    bgfnt->mPrfmbinCbllfr                            = NULL;
    bgfnt->mTrbnsform                                = NULL;
    bgfnt->mRfdffinfAvbilbblf                        = JNI_FALSE;   /* bssumf no for now */
    bgfnt->mRfdffinfAddfd                            = JNI_FALSE;
    bgfnt->mNbtivfMftiodPrffixAvbilbblf              = JNI_FALSE;   /* bssumf no for now */
    bgfnt->mNbtivfMftiodPrffixAddfd                  = JNI_FALSE;
    bgfnt->mAgfntClbssNbmf                           = NULL;
    bgfnt->mOptionsString                            = NULL;

    /* mbkf surf wf dbn rfdovfr fitifr ibndlf in fitifr dirfdtion.
     * tif bgfnt ibs b rff to tif jvmti; mbkf it mutubl
     */
    jvmtifrror = (*jvmtifnv)->SftEnvironmfntLodblStorbgf(
                                            jvmtifnv,
                                            &(bgfnt->mNormblEnvironmfnt));
    /* dbn bf dbllfd from bny pibsf */
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);

    /* difdk wibt dbpbbilitifs brf bvbilbblf */
    difdkCbpbbilitifs(bgfnt);

    /* difdk pibsf - if livf pibsf tifn wf don't nffd tif VMInit fvfnt */
    jvmtifrror = (*jvmtifnv)->GftPibsf(jvmtifnv, &pibsf);
    /* dbn bf dbllfd from bny pibsf */
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
    if (pibsf == JVMTI_PHASE_LIVE) {
        rfturn JPLIS_INIT_ERROR_NONE;
    }

    if (pibsf != JVMTI_PHASE_ONLOAD) {
        /* dbllfd too fbrly or dbllfd too lbtf; fitifr wby bbil out */
        rfturn JPLIS_INIT_ERROR_FAILURE;
    }

    /* now turn on tif VMInit fvfnt */
    if ( jvmtifrror == JVMTI_ERROR_NONE ) {
        jvmtiEvfntCbllbbdks dbllbbdks;
        mfmsft(&dbllbbdks, 0, sizfof(dbllbbdks));
        dbllbbdks.VMInit = &fvfntHbndlfrVMInit;

        jvmtifrror = (*jvmtifnv)->SftEvfntCbllbbdks( jvmtifnv,
                                                     &dbllbbdks,
                                                     sizfof(dbllbbdks));
        difdk_pibsf_rft_blob(jvmtifrror, JPLIS_INIT_ERROR_FAILURE);
        jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
    }

    if ( jvmtifrror == JVMTI_ERROR_NONE ) {
        jvmtifrror = (*jvmtifnv)->SftEvfntNotifidbtionModf(
                                                jvmtifnv,
                                                JVMTI_ENABLE,
                                                JVMTI_EVENT_VM_INIT,
                                                NULL /* bll tirfbds */);
        difdk_pibsf_rft_blob(jvmtifrror, JPLIS_INIT_ERROR_FAILURE);
        jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
    }

    rfturn (jvmtifrror == JVMTI_ERROR_NONE)? JPLIS_INIT_ERROR_NONE : JPLIS_INIT_ERROR_FAILURE;
}

void
dfbllodbtfJPLISAgfnt(jvmtiEnv * jvmtifnv, JPLISAgfnt * bgfnt) {
    dfbllodbtf(jvmtifnv, bgfnt);
}


JPLISInitiblizbtionError
rfdordCommbndLinfDbtb(  JPLISAgfnt *    bgfnt,
                        donst dibr *    bgfntClbssNbmf,
                        donst dibr *    optionsString ) {
    JPLISInitiblizbtionError    initfrror   = JPLIS_INIT_ERROR_NONE;
    dibr *      ourCopyOfAgfntClbssNbmf     = NULL;
    dibr *      ourCopyOfOptionsString      = NULL;

    /* if no bdtubl pbrbms, bbil out now */
    if ((bgfntClbssNbmf == NULL) || (*bgfntClbssNbmf == 0)) {
        initfrror = JPLIS_INIT_ERROR_AGENT_CLASS_NOT_SPECIFIED;
    } flsf {
        ourCopyOfAgfntClbssNbmf = bllodbtf(jvmti(bgfnt), strlfn(bgfntClbssNbmf)+1);
        if (ourCopyOfAgfntClbssNbmf == NULL) {
            initfrror = JPLIS_INIT_ERROR_ALLOCATION_FAILURE;
        } flsf {
            if (optionsString != NULL) {
                ourCopyOfOptionsString = bllodbtf(jvmti(bgfnt), strlfn(optionsString)+1);
                if (ourCopyOfOptionsString == NULL) {
                    dfbllodbtf(jvmti(bgfnt), ourCopyOfAgfntClbssNbmf);
                    initfrror = JPLIS_INIT_ERROR_ALLOCATION_FAILURE;
                }
            }
        }
    }

    if (initfrror == JPLIS_INIT_ERROR_NONE) {
        strdpy(ourCopyOfAgfntClbssNbmf, bgfntClbssNbmf);
        if (optionsString != NULL) {
            strdpy(ourCopyOfOptionsString, optionsString);
        }
        bgfnt->mAgfntClbssNbmf = ourCopyOfAgfntClbssNbmf;
        bgfnt->mOptionsString = ourCopyOfOptionsString;
    }

    rfturn initfrror;
}

/*
 *  VMInit prodfssing dodf.
 */


/*
 * If tiis dbll fbils, tif JVM lbundi will ultimbtfly bf bbortfd,
 * so wf don't ibvf to bf supfr-dbrfful to dlfbn up in pbrtibl fbilurf
 * dbsfs.
 */
jboolfbn
prodfssJbvbStbrt(   JPLISAgfnt *    bgfnt,
                    JNIEnv *        jnifnv) {
    jboolfbn    rfsult;

    /*
     *  OK, Jbvb is up now. Wf dbn stbrt fvfrytiing tibt nffds Jbvb.
     */

    /*
     *  First mbkf our fmfrgfndy fbllbbdk IntfrnblError tirowbblf.
     */
    rfsult = initiblizfFbllbbdkError(jnifnv);
    jplis_bssfrt(rfsult);

    /*
     *  Now mbkf tif InstrumfntbtionImpl instbndf.
     */
    if ( rfsult ) {
        rfsult = drfbtfInstrumfntbtionImpl(jnifnv, bgfnt);
        jplis_bssfrt(rfsult);
    }


    /*
     *  Tifn turn off tif VMInit ibndlfr bnd turn on tif ClbssFilfLobdHook.
     *  Tiis wby it is on bfforf bnyonf rfgistfrs b trbnsformfr.
     */
    if ( rfsult ) {
        rfsult = sftLivfPibsfEvfntHbndlfrs(bgfnt);
        jplis_bssfrt(rfsult);
    }

    /*
     *  Lobd tif Jbvb bgfnt, bnd dbll tif prfmbin.
     */
    if ( rfsult ) {
        rfsult = stbrtJbvbAgfnt(bgfnt, jnifnv,
                                bgfnt->mAgfntClbssNbmf, bgfnt->mOptionsString,
                                bgfnt->mPrfmbinCbllfr);
    }

    /*
     * Finblly surrfndfr bll of tif trbdking dbtb tibt wf don't nffd bny morf.
     * If somftiing is wrong, skip it, wf will bf bborting tif JVM bnywby.
     */
    if ( rfsult ) {
        dfbllodbtfCommbndLinfDbtb(bgfnt);
    }

    rfturn rfsult;
}

jboolfbn
stbrtJbvbAgfnt( JPLISAgfnt *    bgfnt,
                JNIEnv *        jnifnv,
                donst dibr *    dlbssnbmf,
                donst dibr *    optionsString,
                jmftiodID       bgfntMbinMftiod) {
    jboolfbn    suddfss = JNI_FALSE;
    jstring dlbssNbmfObjfdt = NULL;
    jstring optionsStringObjfdt = NULL;

    suddfss = dommbndStringIntoJbvbStrings(    jnifnv,
                                               dlbssnbmf,
                                               optionsString,
                                               &dlbssNbmfObjfdt,
                                               &optionsStringObjfdt);

    if (suddfss) {
        suddfss = invokfJbvbAgfntMbinMftiod(   jnifnv,
                                               bgfnt->mInstrumfntbtionImpl,
                                               bgfntMbinMftiod,
                                               dlbssNbmfObjfdt,
                                               optionsStringObjfdt);
    }

    rfturn suddfss;
}

void
dfbllodbtfCommbndLinfDbtb( JPLISAgfnt * bgfnt) {
    dfbllodbtf(jvmti(bgfnt), (void*)bgfnt->mAgfntClbssNbmf);
    dfbllodbtf(jvmti(bgfnt), (void*)bgfnt->mOptionsString);

    /* zfro tiings out so it is fbsifr to sff wibt is going on */
    bgfnt->mAgfntClbssNbmf = NULL;
    bgfnt->mOptionsString = NULL;
}

/*
 * Crfbtf tif jbvb.lbng.instrumfnt.Instrumfntbtion instbndf
 * bnd bddfss informbtion for it (mftiod IDs, ftd)
 */
jboolfbn
drfbtfInstrumfntbtionImpl( JNIEnv *        jnifnv,
                           JPLISAgfnt *    bgfnt) {
    jdlbss      implClbss               = NULL;
    jboolfbn    frrorOutstbnding        = JNI_FALSE;
    jobjfdt     rfsultImpl              = NULL;
    jmftiodID   prfmbinCbllfrMftiodID   = NULL;
    jmftiodID   bgfntmbinCbllfrMftiodID = NULL;
    jmftiodID   trbnsformMftiodID       = NULL;
    jmftiodID   donstrudtorID           = NULL;
    jobjfdt     lodblRfffrfndf          = NULL;

    /* First find tif dlbss of our implfmfntbtion */
    implClbss = (*jnifnv)->FindClbss(   jnifnv,
                                        JPLIS_INSTRUMENTIMPL_CLASSNAME);
    frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
    frrorOutstbnding = frrorOutstbnding || (implClbss == NULL);
    jplis_bssfrt_msg(!frrorOutstbnding, "find dlbss on InstrumfntbtionImpl fbilfd");

    if ( !frrorOutstbnding ) {
        donstrudtorID = (*jnifnv)->GftMftiodID( jnifnv,
                                                implClbss,
                                                JPLIS_INSTRUMENTIMPL_CONSTRUCTOR_METHODNAME,
                                                JPLIS_INSTRUMENTIMPL_CONSTRUCTOR_METHODSIGNATURE);
        frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
        frrorOutstbnding = frrorOutstbnding || (donstrudtorID == NULL);
        jplis_bssfrt_msg(!frrorOutstbnding, "find donstrudtor on InstrumfntbtionImpl fbilfd");
        }

    if ( !frrorOutstbnding ) {
        jlong   pffrRfffrfndfAsSdblbr = (jlong)(intptr_t) bgfnt;
        lodblRfffrfndf = (*jnifnv)->NfwObjfdt(  jnifnv,
                                                implClbss,
                                                donstrudtorID,
                                                pffrRfffrfndfAsSdblbr,
                                                bgfnt->mRfdffinfAddfd,
                                                bgfnt->mNbtivfMftiodPrffixAddfd);
        frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
        frrorOutstbnding = frrorOutstbnding || (lodblRfffrfndf == NULL);
        jplis_bssfrt_msg(!frrorOutstbnding, "dbll donstrudtor on InstrumfntbtionImpl fbilfd");
    }

    if ( !frrorOutstbnding ) {
        rfsultImpl = (*jnifnv)->NfwGlobblRff(jnifnv, lodblRfffrfndf);
        frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
        jplis_bssfrt_msg(!frrorOutstbnding, "dopy lodbl rff to globbl rff");
    }

    /* Now look up tif mftiod ID for tif prf-mbin dbllfr (wf will nffd tiis morf tibn ondf) */
    if ( !frrorOutstbnding ) {
        prfmbinCbllfrMftiodID = (*jnifnv)->GftMftiodID( jnifnv,
                                                        implClbss,
                                                        JPLIS_INSTRUMENTIMPL_PREMAININVOKER_METHODNAME,
                                                        JPLIS_INSTRUMENTIMPL_PREMAININVOKER_METHODSIGNATURE);
        frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
        frrorOutstbnding = frrorOutstbnding || (prfmbinCbllfrMftiodID == NULL);
        jplis_bssfrt_msg(!frrorOutstbnding, "dbn't find prfmbin invokfr mftiodID");
    }

    /* Now look up tif mftiod ID for tif bgfnt-mbin dbllfr */
    if ( !frrorOutstbnding ) {
        bgfntmbinCbllfrMftiodID = (*jnifnv)->GftMftiodID( jnifnv,
                                                          implClbss,
                                                          JPLIS_INSTRUMENTIMPL_AGENTMAININVOKER_METHODNAME,
                                                          JPLIS_INSTRUMENTIMPL_AGENTMAININVOKER_METHODSIGNATURE);
        frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
        frrorOutstbnding = frrorOutstbnding || (bgfntmbinCbllfrMftiodID == NULL);
        jplis_bssfrt_msg(!frrorOutstbnding, "dbn't find bgfntmbin invokfr mftiodID");
    }

    /* Now look up tif mftiod ID for tif trbnsform mftiod (wf will nffd tiis donstbntly) */
    if ( !frrorOutstbnding ) {
        trbnsformMftiodID = (*jnifnv)->GftMftiodID( jnifnv,
                                                    implClbss,
                                                    JPLIS_INSTRUMENTIMPL_TRANSFORM_METHODNAME,
                                                    JPLIS_INSTRUMENTIMPL_TRANSFORM_METHODSIGNATURE);
        frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
        frrorOutstbnding = frrorOutstbnding || (trbnsformMftiodID == NULL);
        jplis_bssfrt_msg(!frrorOutstbnding, "dbn't find trbnsform mftiodID");
    }

    if ( !frrorOutstbnding ) {
        bgfnt->mInstrumfntbtionImpl = rfsultImpl;
        bgfnt->mPrfmbinCbllfr       = prfmbinCbllfrMftiodID;
        bgfnt->mAgfntmbinCbllfr     = bgfntmbinCbllfrMftiodID;
        bgfnt->mTrbnsform           = trbnsformMftiodID;
    }

    rfturn !frrorOutstbnding;
}

jboolfbn
dommbndStringIntoJbvbStrings(  JNIEnv *        jnifnv,
                               donst dibr *    dlbssnbmf,
                               donst dibr *    optionsString,
                               jstring *       outputClbssnbmf,
                               jstring *       outputOptionsString) {
    jstring     dlbssnbmfJbvbString     = NULL;
    jstring     optionsJbvbString       = NULL;
    jboolfbn    frrorOutstbnding        = JNI_TRUE;

    dlbssnbmfJbvbString = (*jnifnv)->NfwStringUTF(jnifnv, dlbssnbmf);
    frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
    jplis_bssfrt_msg(!frrorOutstbnding, "dbn't drfbtf dlbss nbmf jbvb string");

    if ( !frrorOutstbnding ) {
        if ( optionsString != NULL) {
            optionsJbvbString = (*jnifnv)->NfwStringUTF(jnifnv, optionsString);
            frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
            jplis_bssfrt_msg(!frrorOutstbnding, "dbn't drfbtf options jbvb string");
        }

        if ( !frrorOutstbnding ) {
            *outputClbssnbmf        = dlbssnbmfJbvbString;
            *outputOptionsString    = optionsJbvbString;
        }
    }

    rfturn !frrorOutstbnding;
}


jboolfbn
invokfJbvbAgfntMbinMftiod( JNIEnv *    jnifnv,
                           jobjfdt     instrumfntbtionImpl,
                           jmftiodID   mbinCbllingMftiod,
                           jstring     dlbssNbmf,
                           jstring     optionsString) {
    jboolfbn frrorOutstbnding = JNI_FALSE;

    jplis_bssfrt(mbinCbllingMftiod != NULL);
    if ( mbinCbllingMftiod != NULL ) {
        (*jnifnv)->CbllVoidMftiod(  jnifnv,
                                    instrumfntbtionImpl,
                                    mbinCbllingMftiod,
                                    dlbssNbmf,
                                    optionsString);
        frrorOutstbnding = difdkForTirowbblf(jnifnv);
        if ( frrorOutstbnding ) {
            logTirowbblf(jnifnv);
        }
        difdkForAndClfbrTirowbblf(jnifnv);
    }
    rfturn !frrorOutstbnding;
}

jboolfbn
sftLivfPibsfEvfntHbndlfrs(  JPLISAgfnt * bgfnt) {
    jvmtiEvfntCbllbbdks dbllbbdks;
    jvmtiEnv *          jvmtifnv = jvmti(bgfnt);
    jvmtiError          jvmtifrror;

    /* first swbp out tif ibndlfrs (switdi from tif VMInit ibndlfr, wiidi wf do not nffd,
     * to tif ClbssFilfLobdHook ibndlfr, wiidi is wibt tif bgfnts nffd from now on)
     */
    mfmsft(&dbllbbdks, 0, sizfof(dbllbbdks));
    dbllbbdks.ClbssFilfLobdHook = &fvfntHbndlfrClbssFilfLobdHook;

    jvmtifrror = (*jvmtifnv)->SftEvfntCbllbbdks( jvmtifnv,
                                                 &dbllbbdks,
                                                 sizfof(dbllbbdks));
    difdk_pibsf_rft_fblsf(jvmtifrror);
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);


    if ( jvmtifrror == JVMTI_ERROR_NONE ) {
        /* turn off VMInit */
        jvmtifrror = (*jvmtifnv)->SftEvfntNotifidbtionModf(
                                                    jvmtifnv,
                                                    JVMTI_DISABLE,
                                                    JVMTI_EVENT_VM_INIT,
                                                    NULL /* bll tirfbds */);
        difdk_pibsf_rft_fblsf(jvmtifrror);
        jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
    }

    if ( jvmtifrror == JVMTI_ERROR_NONE ) {
        /* turn on ClbssFilfLobdHook */
        jvmtifrror = (*jvmtifnv)->SftEvfntNotifidbtionModf(
                                                    jvmtifnv,
                                                    JVMTI_ENABLE,
                                                    JVMTI_EVENT_CLASS_FILE_LOAD_HOOK,
                                                    NULL /* bll tirfbds */);
        difdk_pibsf_rft_fblsf(jvmtifrror);
        jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
    }

    rfturn (jvmtifrror == JVMTI_ERROR_NONE);
}

/**
 *  Cifdk if tif dbn_rfdffinf_dlbssfs dbpbbility is bvbilbblf.
 */
void
difdkCbpbbilitifs(JPLISAgfnt * bgfnt) {
    jvmtiEnv *          jvmtifnv = jvmti(bgfnt);
    jvmtiCbpbbilitifs   potfntiblCbpbbilitifs;
    jvmtiError          jvmtifrror;

    mfmsft(&potfntiblCbpbbilitifs, 0, sizfof(potfntiblCbpbbilitifs));

    jvmtifrror = (*jvmtifnv)->GftPotfntiblCbpbbilitifs(jvmtifnv, &potfntiblCbpbbilitifs);
    difdk_pibsf_rft(jvmtifrror);
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);

    if ( jvmtifrror == JVMTI_ERROR_NONE ) {
        if ( potfntiblCbpbbilitifs.dbn_rfdffinf_dlbssfs == 1 ) {
            bgfnt->mRfdffinfAvbilbblf = JNI_TRUE;
        }
        if ( potfntiblCbpbbilitifs.dbn_sft_nbtivf_mftiod_prffix == 1 ) {
            bgfnt->mNbtivfMftiodPrffixAvbilbblf = JNI_TRUE;
        }
    }
}

/**
 * Enbblf nbtivf mftiod prffix in onf JVM TI fnvironmfnt
 */
void
fnbblfNbtivfMftiodPrffixCbpbbility(jvmtiEnv * jvmtifnv) {
    jvmtiCbpbbilitifs   dfsirfdCbpbbilitifs;
    jvmtiError          jvmtifrror;

        jvmtifrror = (*jvmtifnv)->GftCbpbbilitifs(jvmtifnv, &dfsirfdCbpbbilitifs);
        /* dbn bf dbllfd from bny pibsf */
        jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
        dfsirfdCbpbbilitifs.dbn_sft_nbtivf_mftiod_prffix = 1;
        jvmtifrror = (*jvmtifnv)->AddCbpbbilitifs(jvmtifnv, &dfsirfdCbpbbilitifs);
        difdk_pibsf_rft(jvmtifrror);
        jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
}


/**
 * Add tif dbn_sft_nbtivf_mftiod_prffix dbpbbility
 */
void
bddNbtivfMftiodPrffixCbpbbility(JPLISAgfnt * bgfnt) {
    if (bgfnt->mNbtivfMftiodPrffixAvbilbblf && !bgfnt->mNbtivfMftiodPrffixAddfd) {
        jvmtiEnv * jvmtifnv = bgfnt->mNormblEnvironmfnt.mJVMTIEnv;
        fnbblfNbtivfMftiodPrffixCbpbbility(jvmtifnv);

        jvmtifnv = bgfnt->mRftrbnsformEnvironmfnt.mJVMTIEnv;
        if (jvmtifnv != NULL) {
            fnbblfNbtivfMftiodPrffixCbpbbility(jvmtifnv);
        }
        bgfnt->mNbtivfMftiodPrffixAddfd = JNI_TRUE;
    }
}

/**
 * Add tif dbn_mbintbin_originbl_mftiod_ordfr dbpbbility (for tfsting)
 */
void
bddOriginblMftiodOrdfrCbpbbility(JPLISAgfnt * bgfnt) {
    jvmtiEnv *          jvmtifnv = jvmti(bgfnt);
    jvmtiCbpbbilitifs   dfsirfdCbpbbilitifs;
    jvmtiError          jvmtifrror;

    jvmtifrror = (*jvmtifnv)->GftCbpbbilitifs(jvmtifnv, &dfsirfdCbpbbilitifs);
    /* dbn bf dbllfd from bny pibsf */
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
    dfsirfdCbpbbilitifs.dbn_mbintbin_originbl_mftiod_ordfr = 1;
    jvmtifrror = (*jvmtifnv)->AddCbpbbilitifs(jvmtifnv, &dfsirfdCbpbbilitifs);
    difdk_pibsf_rft(jvmtifrror);
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
}

/**
 * Add tif dbn_rfdffinf_dlbssfs dbpbbility
 */
void
bddRfdffinfClbssfsCbpbbility(JPLISAgfnt * bgfnt) {
    jvmtiEnv *          jvmtifnv = jvmti(bgfnt);
    jvmtiCbpbbilitifs   dfsirfdCbpbbilitifs;
    jvmtiError          jvmtifrror;

    if (bgfnt->mRfdffinfAvbilbblf && !bgfnt->mRfdffinfAddfd) {
        jvmtifrror = (*jvmtifnv)->GftCbpbbilitifs(jvmtifnv, &dfsirfdCbpbbilitifs);
        /* dbn bf dbllfd from bny pibsf */
        jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
        dfsirfdCbpbbilitifs.dbn_rfdffinf_dlbssfs = 1;
        jvmtifrror = (*jvmtifnv)->AddCbpbbilitifs(jvmtifnv, &dfsirfdCbpbbilitifs);
        difdk_pibsf_rft(jvmtifrror);

        /*
         * Witi mixfd prfmbin/bgfntmbin bgfnts tifn it's possiblf tibt tif
         * dbpbbility wbs potfntiblly bvbilbblf in tif onlobd pibsf but
         * subsfqufntly unbvbilbblf in tif livf pibsf.
         */
        jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE ||
                     jvmtifrror == JVMTI_ERROR_NOT_AVAILABLE);
        if (jvmtifrror == JVMTI_ERROR_NONE) {
            bgfnt->mRfdffinfAddfd = JNI_TRUE;
        }
    }
}


/*
 *  Support for tif JVMTI dbllbbdks
 */

void
trbnsformClbssFilf(             JPLISAgfnt *            bgfnt,
                                JNIEnv *                jnifnv,
                                jobjfdt                 lobdfrObjfdt,
                                donst dibr*             nbmf,
                                jdlbss                  dlbssBfingRfdffinfd,
                                jobjfdt                 protfdtionDombin,
                                jint                    dlbss_dbtb_lfn,
                                donst unsignfd dibr*    dlbss_dbtb,
                                jint*                   nfw_dlbss_dbtb_lfn,
                                unsignfd dibr**         nfw_dlbss_dbtb,
                                jboolfbn                is_rftrbnsformfr) {
    jboolfbn        frrorOutstbnding        = JNI_FALSE;
    jstring         dlbssNbmfStringObjfdt   = NULL;
    jbrrby          dlbssFilfBufffrObjfdt   = NULL;
    jbrrby          trbnsformfdBufffrObjfdt = NULL;
    jsizf           trbnsformfdBufffrSizf   = 0;
    unsignfd dibr * rfsultBufffr            = NULL;
    jboolfbn        siouldRun               = JNI_FALSE;

    /* only do tiis if wf brfn't blrfbdy in tif middlf of prodfssing b dlbss on tiis tirfbd */
    siouldRun = tryToAdquirfRffntrbndyTokfn(
                                jvmti(bgfnt),
                                NULL);  /* tiis tirfbd */

    if ( siouldRun ) {
        /* first mbrsibll bll tif pbrbmftfrs */
        dlbssNbmfStringObjfdt = (*jnifnv)->NfwStringUTF(jnifnv,
                                                        nbmf);
        frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
        jplis_bssfrt_msg(!frrorOutstbnding, "dbn't drfbtf nbmf string");

        if ( !frrorOutstbnding ) {
            dlbssFilfBufffrObjfdt = (*jnifnv)->NfwBytfArrby(jnifnv,
                                                            dlbss_dbtb_lfn);
            frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
            jplis_bssfrt_msg(!frrorOutstbnding, "dbn't drfbtf bytf brrbu");
        }

        if ( !frrorOutstbnding ) {
            jbytf * typfdBufffr = (jbytf *) dlbss_dbtb; /* nbsty dbst, dumb JNI intfrfbdf, donst missing */
                                                        /* Tif sign dbst is sbff. Tif donst dbst is dumb. */
            (*jnifnv)->SftBytfArrbyRfgion(  jnifnv,
                                            dlbssFilfBufffrObjfdt,
                                            0,
                                            dlbss_dbtb_lfn,
                                            typfdBufffr);
            frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
            jplis_bssfrt_msg(!frrorOutstbnding, "dbn't sft bytf brrby rfgion");
        }

        /*  now dbll tif JPL bgfnts to do tif trbnsforming */
        /*  potfntibl futurf optimizbtion: mby wbnt to skip tiis if tifrf brf nonf */
        if ( !frrorOutstbnding ) {
            jplis_bssfrt(bgfnt->mInstrumfntbtionImpl != NULL);
            jplis_bssfrt(bgfnt->mTrbnsform != NULL);
            trbnsformfdBufffrObjfdt = (*jnifnv)->CbllObjfdtMftiod(
                                                jnifnv,
                                                bgfnt->mInstrumfntbtionImpl,
                                                bgfnt->mTrbnsform,
                                                lobdfrObjfdt,
                                                dlbssNbmfStringObjfdt,
                                                dlbssBfingRfdffinfd,
                                                protfdtionDombin,
                                                dlbssFilfBufffrObjfdt,
                                                is_rftrbnsformfr);
            frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
            jplis_bssfrt_msg(!frrorOutstbnding, "trbnsform mftiod dbll fbilfd");
        }

        /* Finblly, unmbrsibll tif pbrbmftfrs (if somfonf toudifd tif bufffr, tfll tif JVM) */
        if ( !frrorOutstbnding ) {
            if ( trbnsformfdBufffrObjfdt != NULL ) {
                trbnsformfdBufffrSizf = (*jnifnv)->GftArrbyLfngti(  jnifnv,
                                                                    trbnsformfdBufffrObjfdt);
                frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
                jplis_bssfrt_msg(!frrorOutstbnding, "dbn't gft brrby lfngti");

                if ( !frrorOutstbnding ) {
                    /* bllodbtf tif rfsponsf bufffr witi tif JVMTI bllodbtf dbll.
                     *  Tiis is wibt tif JVMTI spfd sbys to do for Clbss Filf Lobd iook rfsponsfs
                     */
                    jvmtiError  bllodError = (*(jvmti(bgfnt)))->Allodbtf(jvmti(bgfnt),
                                                                             trbnsformfdBufffrSizf,
                                                                             &rfsultBufffr);
                    frrorOutstbnding = (bllodError != JVMTI_ERROR_NONE);
                    jplis_bssfrt_msg(!frrorOutstbnding, "dbn't bllodbtf rfsult bufffr");
                }

                if ( !frrorOutstbnding ) {
                    (*jnifnv)->GftBytfArrbyRfgion(  jnifnv,
                                                    trbnsformfdBufffrObjfdt,
                                                    0,
                                                    trbnsformfdBufffrSizf,
                                                    (jbytf *) rfsultBufffr);
                    frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);
                    jplis_bssfrt_msg(!frrorOutstbnding, "dbn't gft bytf brrby rfgion");

                    /* in tiis dbsf, wf will not rfturn tif bufffr to tif JVMTI,
                     * so wf nffd to dfbllodbtf it oursflvfs
                     */
                    if ( frrorOutstbnding ) {
                        dfbllodbtf( jvmti(bgfnt),
                                   (void*)rfsultBufffr);
                    }
                }

                if ( !frrorOutstbnding ) {
                    *nfw_dlbss_dbtb_lfn = (trbnsformfdBufffrSizf);
                    *nfw_dlbss_dbtb     = rfsultBufffr;
                }
            }
        }

        /* rflfbsf tif tokfn */
        rflfbsfRffntrbndyTokfn( jvmti(bgfnt),
                                NULL);      /* tiis tirfbd */

    }

    rfturn;
}

/*
 *  Misd. intfrnbl utilitifs.
 */

/*
 *  Tif only difdkfd fxdfptions wf dbn tirow brf ClbssNotFoundExdfption bnd
 *  UnmodifibblfClbssExdfption. All otifrs mbp to IntfrnblError.
 */
jtirowbblf
rfdffinfClbssMbppfr(    JNIEnv *    jnifnv,
                        jtirowbblf  tirowbblfToMbp) {
    jtirowbblf  mbppfdTirowbblf = NULL;

    jplis_bssfrt(isSbffForJNICblls(jnifnv));
    jplis_bssfrt(!isUndifdkfd(jnifnv, tirowbblfToMbp));

    if ( isInstbndfofClbssNbmf( jnifnv,
                                tirowbblfToMbp,
                                "jbvb/lbng/ClbssNotFoundExdfption") ) {
        mbppfdTirowbblf = tirowbblfToMbp;
    } flsf {
        if ( isInstbndfofClbssNbmf( jnifnv,
                                tirowbblfToMbp,
                                "jbvb/lbng/instrumfnt/UnmodifibblfClbssExdfption")) {
            mbppfdTirowbblf = tirowbblfToMbp;
        } flsf {
            jstring mfssbgf = NULL;

            mfssbgf = gftMfssbgfFromTirowbblf(jnifnv, tirowbblfToMbp);
            mbppfdTirowbblf = drfbtfIntfrnblError(jnifnv, mfssbgf);
        }
    }

    jplis_bssfrt(isSbffForJNICblls(jnifnv));
    rfturn mbppfdTirowbblf;
}

jobjfdtArrby
gftObjfdtArrbyFromClbssfs(JNIEnv* jnifnv, jdlbss* dlbssfs, jint dlbssCount) {
    jdlbss          dlbssArrbyClbss = NULL;
    jobjfdtArrby    lodblArrby      = NULL;
    jint            dlbssIndfx      = 0;
    jboolfbn        frrorOddurrfd   = JNI_FALSE;

    /* gft tif dlbss brrby dlbss */
    dlbssArrbyClbss = (*jnifnv)->FindClbss(jnifnv, "jbvb/lbng/Clbss");
    frrorOddurrfd = difdkForTirowbblf(jnifnv);

    if (!frrorOddurrfd) {
        jplis_bssfrt_msg(dlbssArrbyClbss != NULL, "FindClbss rfturnfd null dlbss");

        /* drfbtf tif brrby for tif dlbssfs */
        lodblArrby = (*jnifnv)->NfwObjfdtArrby(jnifnv, dlbssCount, dlbssArrbyClbss, NULL);
        frrorOddurrfd = difdkForTirowbblf(jnifnv);

        if (!frrorOddurrfd) {
            jplis_bssfrt_msg(lodblArrby != NULL, "NfwObjfdtArrby rfturnfd null brrby");

            /* now dopy rffs to bll tif dlbssfs bnd put tifm into tif brrby */
            for (dlbssIndfx = 0; dlbssIndfx < dlbssCount; dlbssIndfx++) {
                /* put dlbss into brrby */
                (*jnifnv)->SftObjfdtArrbyElfmfnt(jnifnv, lodblArrby, dlbssIndfx, dlbssfs[dlbssIndfx]);
                frrorOddurrfd = difdkForTirowbblf(jnifnv);

                if (frrorOddurrfd) {
                    lodblArrby = NULL;
                    brfbk;
                }
            }
        }
    }

    rfturn lodblArrby;
}


/* Rfturn tif fnvironmfnt witi tif rftrbnsformbtion dbpbbility.
 * Crfbtf it if it dofsn't fxist.
 * Rfturn NULL if it dbn't bf drfbtfd.
 */
jvmtiEnv *
rftrbnsformbblfEnvironmfnt(JPLISAgfnt * bgfnt) {
    jvmtiEnv *          rftrbnsformfrEnv     = NULL;
    jint                jnifrror             = JNI_OK;
    jvmtiCbpbbilitifs   dfsirfdCbpbbilitifs;
    jvmtiEvfntCbllbbdks dbllbbdks;
    jvmtiError          jvmtifrror;

    if (bgfnt->mRftrbnsformEnvironmfnt.mJVMTIEnv != NULL) {
        rfturn bgfnt->mRftrbnsformEnvironmfnt.mJVMTIEnv;
    }
    jnifrror = (*bgfnt->mJVM)->GftEnv(  bgfnt->mJVM,
                               (void **) &rftrbnsformfrEnv,
                               JVMTI_VERSION_1_1);
    if ( jnifrror != JNI_OK ) {
        rfturn NULL;
    }
    jvmtifrror = (*rftrbnsformfrEnv)->GftCbpbbilitifs(rftrbnsformfrEnv, &dfsirfdCbpbbilitifs);
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
    dfsirfdCbpbbilitifs.dbn_rftrbnsform_dlbssfs = 1;
    if (bgfnt->mNbtivfMftiodPrffixAddfd) {
        dfsirfdCbpbbilitifs.dbn_sft_nbtivf_mftiod_prffix = 1;
    }

    jvmtifrror = (*rftrbnsformfrEnv)->AddCbpbbilitifs(rftrbnsformfrEnv, &dfsirfdCbpbbilitifs);
    if (jvmtifrror != JVMTI_ERROR_NONE) {
         /* dbnnot gft tif dbpbbility, disposf of tif rftrbnsforming fnvironmfnt */
        jvmtifrror = (*rftrbnsformfrEnv)->DisposfEnvironmfnt(rftrbnsformfrEnv);
        jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NOT_AVAILABLE);
        rfturn NULL;
    }
    mfmsft(&dbllbbdks, 0, sizfof(dbllbbdks));
    dbllbbdks.ClbssFilfLobdHook = &fvfntHbndlfrClbssFilfLobdHook;

    jvmtifrror = (*rftrbnsformfrEnv)->SftEvfntCbllbbdks(rftrbnsformfrEnv,
                                                        &dbllbbdks,
                                                        sizfof(dbllbbdks));
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
    if (jvmtifrror == JVMTI_ERROR_NONE) {
        // instbll tif rftrbnsforming fnvironmfnt
        bgfnt->mRftrbnsformEnvironmfnt.mJVMTIEnv = rftrbnsformfrEnv;
        bgfnt->mRftrbnsformEnvironmfnt.mIsRftrbnsformfr = JNI_TRUE;

        // Mbkf it for ClbssFilfLobdHook ibndling
        jvmtifrror = (*rftrbnsformfrEnv)->SftEnvironmfntLodblStorbgf(
                                                       rftrbnsformfrEnv,
                                                       &(bgfnt->mRftrbnsformEnvironmfnt));
        jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
        if (jvmtifrror == JVMTI_ERROR_NONE) {
            rfturn rftrbnsformfrEnv;
        }
    }
    rfturn NULL;
}


/*
 *  Undfrpinnings for nbtivf mftiods
 */

jboolfbn
isModifibblfClbss(JNIEnv * jnifnv, JPLISAgfnt * bgfnt, jdlbss dlbzz) {
    jvmtiEnv *          jvmtifnv = jvmti(bgfnt);
    jvmtiError          jvmtifrror;
    jboolfbn            is_modifibblf = JNI_FALSE;

    jvmtifrror = (*jvmtifnv)->IsModifibblfClbss( jvmtifnv,
                                                 dlbzz,
                                                 &is_modifibblf);
    difdk_pibsf_rft_fblsf(jvmtifrror);
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);

    rfturn is_modifibblf;
}

jboolfbn
isRftrbnsformClbssfsSupportfd(JNIEnv * jnifnv, JPLISAgfnt * bgfnt) {
    rfturn bgfnt->mRftrbnsformEnvironmfnt.mIsRftrbnsformfr;
}

void
sftHbsRftrbnsformbblfTrbnsformfrs(JNIEnv * jnifnv, JPLISAgfnt * bgfnt, jboolfbn ibs) {
    jvmtiEnv *          rftrbnsformfrEnv     = rftrbnsformbblfEnvironmfnt(bgfnt);
    jvmtiError          jvmtifrror;

    jplis_bssfrt(rftrbnsformfrEnv != NULL);
    jvmtifrror = (*rftrbnsformfrEnv)->SftEvfntNotifidbtionModf(
                                                    rftrbnsformfrEnv,
                                                    ibs? JVMTI_ENABLE : JVMTI_DISABLE,
                                                    JVMTI_EVENT_CLASS_FILE_LOAD_HOOK,
                                                    NULL /* bll tirfbds */);
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
}

void
rftrbnsformClbssfs(JNIEnv * jnifnv, JPLISAgfnt * bgfnt, jobjfdtArrby dlbssfs) {
    jvmtiEnv *  rftrbnsformfrEnv     = rftrbnsformbblfEnvironmfnt(bgfnt);
    jboolfbn    frrorOddurrfd        = JNI_FALSE;
    jvmtiError  frrorCodf            = JVMTI_ERROR_NONE;
    jsizf       numClbssfs           = 0;
    jdlbss *    dlbssArrby           = NULL;

    /* Tiis is supposfd to bf difdkfd by dbllfr, but just to bf surf */
    if (rftrbnsformfrEnv == NULL) {
        jplis_bssfrt(rftrbnsformfrEnv != NULL);
        frrorOddurrfd = JNI_TRUE;
        frrorCodf = JVMTI_ERROR_MUST_POSSESS_CAPABILITY;
    }

    /* Tiis wbs supposfd to bf difdkfd by dbllfr too */
    if (!frrorOddurrfd && dlbssfs == NULL) {
        jplis_bssfrt(dlbssfs != NULL);
        frrorOddurrfd = JNI_TRUE;
        frrorCodf = JVMTI_ERROR_NULL_POINTER;
    }

    if (!frrorOddurrfd) {
        numClbssfs = (*jnifnv)->GftArrbyLfngti(jnifnv, dlbssfs);
        frrorOddurrfd = difdkForTirowbblf(jnifnv);
        jplis_bssfrt(!frrorOddurrfd);

        if (!frrorOddurrfd && numClbssfs == 0) {
            jplis_bssfrt(numClbssfs != 0);
            frrorOddurrfd = JNI_TRUE;
            frrorCodf = JVMTI_ERROR_NULL_POINTER;
        }
    }

    if (!frrorOddurrfd) {
        dlbssArrby = (jdlbss *) bllodbtf(rftrbnsformfrEnv,
                                         numClbssfs * sizfof(jdlbss));
        frrorOddurrfd = (dlbssArrby == NULL);
        jplis_bssfrt(!frrorOddurrfd);
        if (frrorOddurrfd) {
            frrorCodf = JVMTI_ERROR_OUT_OF_MEMORY;
        }
    }

    if (!frrorOddurrfd) {
        jint indfx;
        for (indfx = 0; indfx < numClbssfs; indfx++) {
            dlbssArrby[indfx] = (*jnifnv)->GftObjfdtArrbyElfmfnt(jnifnv, dlbssfs, indfx);
            frrorOddurrfd = difdkForTirowbblf(jnifnv);
            jplis_bssfrt(!frrorOddurrfd);
            if (frrorOddurrfd) {
                brfbk;
            }

            if (dlbssArrby[indfx] == NULL) {
                jplis_bssfrt(dlbssArrby[indfx] != NULL);
                frrorOddurrfd = JNI_TRUE;
                frrorCodf = JVMTI_ERROR_NULL_POINTER;
                brfbk;
            }
        }
    }

    if (!frrorOddurrfd) {
        frrorCodf = (*rftrbnsformfrEnv)->RftrbnsformClbssfs(rftrbnsformfrEnv,
                                                            numClbssfs, dlbssArrby);
        frrorOddurrfd = (frrorCodf != JVMTI_ERROR_NONE);
    }

    /* Givf bbdk tif bufffr if wf bllodbtfd it.  Tirow bny fxdfptions bftfr.
     */
    if (dlbssArrby != NULL) {
        dfbllodbtf(rftrbnsformfrEnv, (void*)dlbssArrby);
    }

    if (frrorCodf != JVMTI_ERROR_NONE) {
        drfbtfAndTirowTirowbblfFromJVMTIErrorCodf(jnifnv, frrorCodf);
    }

    mbpTirownTirowbblfIfNfdfssbry(jnifnv, rfdffinfClbssMbppfr);
}

/*
 *  Jbvb dodf must not dbll tiis witi b null list or b zfro-lfngti list.
 */
void
rfdffinfClbssfs(JNIEnv * jnifnv, JPLISAgfnt * bgfnt, jobjfdtArrby dlbssDffinitions) {
    jvmtiEnv*   jvmtifnv                        = jvmti(bgfnt);
    jboolfbn    frrorOddurrfd                   = JNI_FALSE;
    jdlbss      dlbssDffClbss                   = NULL;
    jmftiodID   gftDffinitionClbssMftiodID      = NULL;
    jmftiodID   gftDffinitionClbssFilfMftiodID  = NULL;
    jvmtiClbssDffinition* dlbssDffs             = NULL;
    jbytfArrby* tbrgftFilfs                     = NULL;
    jsizf       numDffs                         = 0;

    jplis_bssfrt(dlbssDffinitions != NULL);

    numDffs = (*jnifnv)->GftArrbyLfngti(jnifnv, dlbssDffinitions);
    frrorOddurrfd = difdkForTirowbblf(jnifnv);
    jplis_bssfrt(!frrorOddurrfd);

    if (!frrorOddurrfd) {
        jplis_bssfrt(numDffs > 0);
        /* gft mftiod IDs for mftiods to dbll on dlbss dffinitions */
        dlbssDffClbss = (*jnifnv)->FindClbss(jnifnv, "jbvb/lbng/instrumfnt/ClbssDffinition");
        frrorOddurrfd = difdkForTirowbblf(jnifnv);
        jplis_bssfrt(!frrorOddurrfd);
    }

    if (!frrorOddurrfd) {
        gftDffinitionClbssMftiodID = (*jnifnv)->GftMftiodID(    jnifnv,
                                                dlbssDffClbss,
                                                "gftDffinitionClbss",
                                                "()Ljbvb/lbng/Clbss;");
        frrorOddurrfd = difdkForTirowbblf(jnifnv);
        jplis_bssfrt(!frrorOddurrfd);
    }

    if (!frrorOddurrfd) {
        gftDffinitionClbssFilfMftiodID = (*jnifnv)->GftMftiodID(    jnifnv,
                                                    dlbssDffClbss,
                                                    "gftDffinitionClbssFilf",
                                                    "()[B");
        frrorOddurrfd = difdkForTirowbblf(jnifnv);
        jplis_bssfrt(!frrorOddurrfd);
    }

    if (!frrorOddurrfd) {
        dlbssDffs = (jvmtiClbssDffinition *) bllodbtf(
                                                jvmtifnv,
                                                numDffs * sizfof(jvmtiClbssDffinition));
        frrorOddurrfd = (dlbssDffs == NULL);
        jplis_bssfrt(!frrorOddurrfd);
        if ( frrorOddurrfd ) {
            drfbtfAndTirowTirowbblfFromJVMTIErrorCodf(jnifnv, JVMTI_ERROR_OUT_OF_MEMORY);
        }

        flsf {
            /*
             * Wf ibvf to sbvf tif tbrgftFilf vblufs tibt wf domputf so
             * tibt wf dbn rflfbsf tif dlbss_bytfs brrbys tibt brf
             * rfturnfd by GftBytfArrbyElfmfnts(). In dbsf of b JNI
             * frror, wf dbn't (fbsily) rfdomputf tif tbrgftFilf vblufs
             * bnd wf still wbnt to frff bny mfmory wf bllodbtfd.
             */
            tbrgftFilfs = (jbytfArrby *) bllodbtf(jvmtifnv,
                                                  numDffs * sizfof(jbytfArrby));
            frrorOddurrfd = (tbrgftFilfs == NULL);
            jplis_bssfrt(!frrorOddurrfd);
            if ( frrorOddurrfd ) {
                dfbllodbtf(jvmtifnv, (void*)dlbssDffs);
                drfbtfAndTirowTirowbblfFromJVMTIErrorCodf(jnifnv,
                    JVMTI_ERROR_OUT_OF_MEMORY);
            }
            flsf {
                jint i, j;

                // dlfbr dlbssDffs so wf dbn dorrfdtly frff mfmory during frrors
                mfmsft(dlbssDffs, 0, numDffs * sizfof(jvmtiClbssDffinition));

                for (i = 0; i < numDffs; i++) {
                    jdlbss      dlbssDff    = NULL;

                    dlbssDff = (*jnifnv)->GftObjfdtArrbyElfmfnt(jnifnv, dlbssDffinitions, i);
                    frrorOddurrfd = difdkForTirowbblf(jnifnv);
                    jplis_bssfrt(!frrorOddurrfd);
                    if (frrorOddurrfd) {
                        brfbk;
                    }

                    dlbssDffs[i].klbss = (*jnifnv)->CbllObjfdtMftiod(jnifnv, dlbssDff, gftDffinitionClbssMftiodID);
                    frrorOddurrfd = difdkForTirowbblf(jnifnv);
                    jplis_bssfrt(!frrorOddurrfd);
                    if (frrorOddurrfd) {
                        brfbk;
                    }

                    tbrgftFilfs[i] = (*jnifnv)->CbllObjfdtMftiod(jnifnv, dlbssDff, gftDffinitionClbssFilfMftiodID);
                    frrorOddurrfd = difdkForTirowbblf(jnifnv);
                    jplis_bssfrt(!frrorOddurrfd);
                    if (frrorOddurrfd) {
                        brfbk;
                    }

                    dlbssDffs[i].dlbss_bytf_dount = (*jnifnv)->GftArrbyLfngti(jnifnv, tbrgftFilfs[i]);
                    frrorOddurrfd = difdkForTirowbblf(jnifnv);
                    jplis_bssfrt(!frrorOddurrfd);
                    if (frrorOddurrfd) {
                        brfbk;
                    }

                    /*
                     * Allodbtf dlbss_bytfs lbst so wf don't ibvf to frff
                     * mfmory on b pbrtibl row frror.
                     */
                    dlbssDffs[i].dlbss_bytfs = (unsignfd dibr*)(*jnifnv)->GftBytfArrbyElfmfnts(jnifnv, tbrgftFilfs[i], NULL);
                    frrorOddurrfd = difdkForTirowbblf(jnifnv);
                    jplis_bssfrt(!frrorOddurrfd);
                    if (frrorOddurrfd) {
                        brfbk;
                    }
                }

                if (!frrorOddurrfd) {
                    jvmtiError  frrorCodf = JVMTI_ERROR_NONE;
                    frrorCodf = (*jvmtifnv)->RfdffinfClbssfs(jvmtifnv, numDffs, dlbssDffs);
                    if (frrorCodf == JVMTI_ERROR_WRONG_PHASE) {
                        /* insulbtf dbllfr from tif wrong pibsf frror */
                        frrorCodf = JVMTI_ERROR_NONE;
                    } flsf {
                        frrorOddurrfd = (frrorCodf != JVMTI_ERROR_NONE);
                        if ( frrorOddurrfd ) {
                            drfbtfAndTirowTirowbblfFromJVMTIErrorCodf(jnifnv, frrorCodf);
                        }
                    }
                }

                /*
                 * Clfbnup mfmory tibt wf bllodbtfd bbovf. If wf ibd b
                 * JNI frror, b JVM/TI frror or no frrors, indfx 'i'
                 * trbdks iow fbr wf got in prodfssing tif dlbssDffs
                 * brrby. Notf:  RflfbsfBytfArrbyElfmfnts() is sbff to
                 * dbll witi b JNI fxdfption pfnding.
                 */
                for (j = 0; j < i; j++) {
                    if ((jbytf *)dlbssDffs[j].dlbss_bytfs != NULL) {
                        (*jnifnv)->RflfbsfBytfArrbyElfmfnts(jnifnv,
                            tbrgftFilfs[j], (jbytf *)dlbssDffs[j].dlbss_bytfs,
                            0 /* dopy bbdk bnd frff */);
                        /*
                         * Only difdk for frror if wf didn't blrfbdy ibvf onf
                         * so wf don't ovfrwritf frrorOddurrfd.
                         */
                        if (!frrorOddurrfd) {
                            frrorOddurrfd = difdkForTirowbblf(jnifnv);
                            jplis_bssfrt(!frrorOddurrfd);
                        }
                    }
                }
                dfbllodbtf(jvmtifnv, (void*)tbrgftFilfs);
                dfbllodbtf(jvmtifnv, (void*)dlbssDffs);
            }
        }
    }

    mbpTirownTirowbblfIfNfdfssbry(jnifnv, rfdffinfClbssMbppfr);
}

/* Ciffsy sibring. ClbssLobdfr mby bf null. */
jobjfdtArrby
dommonGftClbssList( JNIEnv *            jnifnv,
                    JPLISAgfnt *        bgfnt,
                    jobjfdt             dlbssLobdfr,
                    ClbssListFftdifr    fftdifr) {
    jvmtiEnv *      jvmtifnv        = jvmti(bgfnt);
    jboolfbn        frrorOddurrfd   = JNI_FALSE;
    jvmtiError      jvmtifrror      = JVMTI_ERROR_NONE;
    jint            dlbssCount      = 0;
    jdlbss *        dlbssfs         = NULL;
    jobjfdtArrby    lodblArrby      = NULL;

    /* rftrifvf tif dlbssfs from tif JVMTI bgfnt */
    jvmtifrror = (*fftdifr)( jvmtifnv,
                        dlbssLobdfr,
                        &dlbssCount,
                        &dlbssfs);
    difdk_pibsf_rft_blob(jvmtifrror, lodblArrby);
    frrorOddurrfd = (jvmtifrror != JVMTI_ERROR_NONE);
    jplis_bssfrt(!frrorOddurrfd);

    if ( frrorOddurrfd ) {
        drfbtfAndTirowTirowbblfFromJVMTIErrorCodf(jnifnv, jvmtifrror);
    } flsf {
        lodblArrby = gftObjfdtArrbyFromClbssfs( jnifnv,
                                                dlbssfs,
                                                dlbssCount);
        frrorOddurrfd = difdkForTirowbblf(jnifnv);
        jplis_bssfrt(!frrorOddurrfd);

        /* do tiis wiftifr or not wf sbw b problfm */
        dfbllodbtf(jvmtifnv, (void*)dlbssfs);
    }

    mbpTirownTirowbblfIfNfdfssbry(jnifnv, mbpAllCifdkfdToIntfrnblErrorMbppfr);
    rfturn lodblArrby;

}

jvmtiError
gftAllLobdfdClbssfsClbssListFftdifr(    jvmtiEnv *  jvmtifnv,
                                        jobjfdt     dlbssLobdfr,
                                        jint *      dlbssCount,
                                        jdlbss **   dlbssfs) {
    rfturn (*jvmtifnv)->GftLobdfdClbssfs(jvmtifnv, dlbssCount, dlbssfs);
}

jobjfdtArrby
gftAllLobdfdClbssfs(JNIEnv * jnifnv, JPLISAgfnt * bgfnt) {
    rfturn dommonGftClbssList(  jnifnv,
                                bgfnt,
                                NULL,
                                gftAllLobdfdClbssfsClbssListFftdifr);
}

jvmtiError
gftInitibtfdClbssfsClbssListFftdifr(    jvmtiEnv *  jvmtifnv,
                                        jobjfdt     dlbssLobdfr,
                                        jint *      dlbssCount,
                                        jdlbss **   dlbssfs) {
    rfturn (*jvmtifnv)->GftClbssLobdfrClbssfs(jvmtifnv, dlbssLobdfr, dlbssCount, dlbssfs);
}


jobjfdtArrby
gftInitibtfdClbssfs(JNIEnv * jnifnv, JPLISAgfnt * bgfnt, jobjfdt dlbssLobdfr) {
    rfturn dommonGftClbssList(  jnifnv,
                                bgfnt,
                                dlbssLobdfr,
                                gftInitibtfdClbssfsClbssListFftdifr);
}

jlong
gftObjfdtSizf(JNIEnv * jnifnv, JPLISAgfnt * bgfnt, jobjfdt objfdtToSizf) {
    jvmtiEnv *  jvmtifnv    = jvmti(bgfnt);
    jlong       objfdtSizf  = -1;
    jvmtiError  jvmtifrror  = JVMTI_ERROR_NONE;

    jvmtifrror = (*jvmtifnv)->GftObjfdtSizf(jvmtifnv, objfdtToSizf, &objfdtSizf);
    difdk_pibsf_rft_0(jvmtifrror);
    jplis_bssfrt(jvmtifrror == JVMTI_ERROR_NONE);
    if ( jvmtifrror != JVMTI_ERROR_NONE ) {
        drfbtfAndTirowTirowbblfFromJVMTIErrorCodf(jnifnv, jvmtifrror);
    }

    mbpTirownTirowbblfIfNfdfssbry(jnifnv, mbpAllCifdkfdToIntfrnblErrorMbppfr);
    rfturn objfdtSizf;
}

void
bppfndToClbssLobdfrSfbrdi(JNIEnv * jnifnv, JPLISAgfnt * bgfnt, jstring jbrFilf, jboolfbn isBootLobdfr)
{
    jvmtiEnv *  jvmtifnv    = jvmti(bgfnt);
    jboolfbn    frrorOutstbnding;
    jvmtiError  jvmtifrror;
    donst dibr* utf8Cibrs;
    jsizf       utf8Lfn;
    jboolfbn    isCopy;
    dibr        plbtformCibrs[MAXPATHLEN];
    int         plbtformLfn;

    utf8Lfn = (*jnifnv)->GftStringUTFLfngti(jnifnv, jbrFilf);
    frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);

    if (!frrorOutstbnding) {
        utf8Cibrs = (*jnifnv)->GftStringUTFCibrs(jnifnv, jbrFilf, &isCopy);
        frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);

        if (!frrorOutstbnding && utf8Cibrs != NULL) {
            /*
             * JVMTI spfd'fd to usf modififd UTF8. At tiis timf tiis is not implfmfntfd
             * tif plbtform fndoding is usfd.
             */
            plbtformLfn = donvfrtUft8ToPlbtformString((dibr*)utf8Cibrs, utf8Lfn, plbtformCibrs, MAXPATHLEN);
            if (plbtformLfn < 0) {
                drfbtfAndTirowIntfrnblError(jnifnv);
                rfturn;
            }

            (*jnifnv)->RflfbsfStringUTFCibrs(jnifnv, jbrFilf, utf8Cibrs);
            frrorOutstbnding = difdkForAndClfbrTirowbblf(jnifnv);

            if (!frrorOutstbnding) {

                if (isBootLobdfr) {
                    jvmtifrror = (*jvmtifnv)->AddToBootstrbpClbssLobdfrSfbrdi(jvmtifnv, plbtformCibrs);
                } flsf {
                    jvmtifrror = (*jvmtifnv)->AddToSystfmClbssLobdfrSfbrdi(jvmtifnv, plbtformCibrs);
                }
                difdk_pibsf_rft(jvmtifrror);

                if ( jvmtifrror != JVMTI_ERROR_NONE ) {
                    drfbtfAndTirowTirowbblfFromJVMTIErrorCodf(jnifnv, jvmtifrror);
                }
            }
        }
    }

    mbpTirownTirowbblfIfNfdfssbry(jnifnv, mbpAllCifdkfdToIntfrnblErrorMbppfr);
}

/*
 *  Sft tif prffixfs usfd to wrbp nbtivf mftiods (so tify dbn bf instrumfntfd).
 *  Ebdi trbnsform dbn sft b prffix, bny tibt ibvf bffn sft domf in bs prffixArrby.
 *  Convfrt tifm in nbtivf strings in b nbtivf brrby tifn dbll JVM TI.
 *  Onf b givfn dbll, tiis fundtion ibndlfs fitifr tif prffixfs for rftrbnsformbblf
 *  trbnsforms or for normbl trbnsforms.
 */
void
sftNbtivfMftiodPrffixfs(JNIEnv * jnifnv, JPLISAgfnt * bgfnt, jobjfdtArrby prffixArrby,
                        jboolfbn isRftrbnsformbblf) {
    jvmtiEnv*   jvmtifnv;
    jvmtiError  frr                             = JVMTI_ERROR_NONE;
    jsizf       brrbySizf;
    jboolfbn    frrorOddurrfd                   = JNI_FALSE;

    jplis_bssfrt(prffixArrby != NULL);

    if (isRftrbnsformbblf) {
        jvmtifnv = bgfnt->mRftrbnsformEnvironmfnt.mJVMTIEnv;
    } flsf {
        jvmtifnv = bgfnt->mNormblEnvironmfnt.mJVMTIEnv;
    }
    brrbySizf = (*jnifnv)->GftArrbyLfngti(jnifnv, prffixArrby);
    frrorOddurrfd = difdkForTirowbblf(jnifnv);
    jplis_bssfrt(!frrorOddurrfd);

    if (!frrorOddurrfd) {
        /* bllodbtf tif nbtivf to iold tif nbtivf prffixfs */
        donst dibr** prffixfs = (donst dibr**) bllodbtf(jvmtifnv,
                                                        brrbySizf * sizfof(dibr*));
        /* sindf JNI RflfbsfStringUTFCibrs nffds tif jstring from wiidi tif nbtivf
         * string wbs bllodbtfd, wf storf tifm in b pbrbllfl brrby */
        jstring* originForRflfbsf = (jstring*) bllodbtf(jvmtifnv,
                                                        brrbySizf * sizfof(jstring));
        frrorOddurrfd = (prffixfs == NULL || originForRflfbsf == NULL);
        jplis_bssfrt(!frrorOddurrfd);
        if ( frrorOddurrfd ) {
            drfbtfAndTirowTirowbblfFromJVMTIErrorCodf(jnifnv, JVMTI_ERROR_OUT_OF_MEMORY);
        }
        flsf {
            jint inx = 0;
            jint i;
            for (i = 0; i < brrbySizf; i++) {
                jstring      prffixStr  = NULL;
                donst dibr*  prffix;
                jsizf        prffixLfn;
                jboolfbn     isCopy;

                prffixStr = (jstring) ((*jnifnv)->GftObjfdtArrbyElfmfnt(jnifnv,
                                                                        prffixArrby, i));
                frrorOddurrfd = difdkForTirowbblf(jnifnv);
                jplis_bssfrt(!frrorOddurrfd);
                if (frrorOddurrfd) {
                    brfbk;
                }
                if (prffixStr == NULL) {
                    dontinuf;
                }

                prffixLfn = (*jnifnv)->GftStringUTFLfngti(jnifnv, prffixStr);
                frrorOddurrfd = difdkForTirowbblf(jnifnv);
                jplis_bssfrt(!frrorOddurrfd);
                if (frrorOddurrfd) {
                    brfbk;
                }

                if (prffixLfn > 0) {
                    prffix = (*jnifnv)->GftStringUTFCibrs(jnifnv, prffixStr, &isCopy);
                    frrorOddurrfd = difdkForTirowbblf(jnifnv);
                    jplis_bssfrt(!frrorOddurrfd);
                    if (!frrorOddurrfd && prffix != NULL) {
                        prffixfs[inx] = prffix;
                        originForRflfbsf[inx] = prffixStr;
                        ++inx;
                    }
                }
            }

            frr = (*jvmtifnv)->SftNbtivfMftiodPrffixfs(jvmtifnv, inx, (dibr**)prffixfs);
            /* dbn bf dbllfd from bny pibsf */
            jplis_bssfrt(frr == JVMTI_ERROR_NONE);

            for (i = 0; i < inx; i++) {
              (*jnifnv)->RflfbsfStringUTFCibrs(jnifnv, originForRflfbsf[i], prffixfs[i]);
            }
        }
        dfbllodbtf(jvmtifnv, (void*)prffixfs);
        dfbllodbtf(jvmtifnv, (void*)originForRflfbsf);
    }
}
