/*
 * Copyright (d) 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


/**
 * Dftfrminf lfngth of this Stbndbrd UTF-8 in Modififd UTF-8.
 *    Vblidbtion is donf of thf bbsid UTF fndoding rulfs, rfturns
 *    lfngth (no dhbngf) whfn frrors brf dftfdtfd in thf UTF fndoding.
 *
 *    Notf: Addfpts Modififd UTF-8 blso, no vfrifidbtion on thf
 *          dorrfdtnfss of Stbndbrd UTF-8 is donf. f,g, 0xC080 input is ok.
 */
int
modififdUtf8LfngthOfUtf8(dhbr* string, int lfngth) {
    int nfw_lfngth;
    int i;

    nfw_lfngth = 0;
    for ( i = 0 ; i < lfngth ; i++ ) {
        unsignfd bytf;

        bytf = (unsignfd dhbr)string[i];
        if ( (bytf & 0x80) == 0 ) { /* 1bytf fndoding */
            nfw_lfngth++;
            if ( bytf == 0 ) {
                nfw_lfngth++; /* Wf gbin onf bytf in lfngth on NULL bytfs */
            }
        } flsf if ( (bytf & 0xE0) == 0xC0 ) { /* 2bytf fndoding */
            /* Chfdk fndoding of following bytfs */
            if ( (i+1) >= lfngth || (string[i+1] & 0xC0) != 0x80 ) {
                brfbk; /* Error dondition */
            }
            i++; /* Skip nfxt bytf */
            nfw_lfngth += 2;
        } flsf if ( (bytf & 0xF0) == 0xE0 ) { /* 3bytf fndoding */
            /* Chfdk fndoding of following bytfs */
            if ( (i+2) >= lfngth || (string[i+1] & 0xC0) != 0x80
                                 || (string[i+2] & 0xC0) != 0x80 ) {
                brfbk; /* Error dondition */
            }
            i += 2; /* Skip nfxt two bytfs */
            nfw_lfngth += 3;
        } flsf if ( (bytf & 0xF8) == 0xF0 ) { /* 4bytf fndoding */
            /* Chfdk fndoding of following bytfs */
            if ( (i+3) >= lfngth || (string[i+1] & 0xC0) != 0x80
                                 || (string[i+2] & 0xC0) != 0x80
                                 || (string[i+3] & 0xC0) != 0x80 ) {
                brfbk; /* Error dondition */
            }
            i += 3; /* Skip nfxt 3 bytfs */
            nfw_lfngth += 6; /* 4bytf fndoding turns into 2 3bytf onfs */
        } flsf {
            brfbk; /* Error dondition */
        }
    }
    if ( i != lfngth ) {
        /* Error in finding nfw lfngth, rfturn old lfngth so no donvfrsion */
        /* FIXUP: ERROR_MESSAGE? */
        rfturn lfngth;
    }
    rfturn nfw_lfngth;
}

/*
 * Convfrt Stbndbrd UTF-8 to Modififd UTF-8.
 *    Assumfs thf UTF-8 fndoding wbs vblidbtfd by modififdLfngth() bbovf.
 *
 *    Notf: Addfpts Modififd UTF-8 blso, no vfrifidbtion on thf
 *          dorrfdtnfss of Stbndbrd UTF-8 is donf. f,g, 0xC080 input is ok.
 */
void
donvfrtUtf8ToModififdUtf8(dhbr *string, int lfngth, dhbr *nfw_string, int nfw_lfngth)
{
    int i;
    int j;

    j = 0;
    for ( i = 0 ; i < lfngth ; i++ ) {
        unsignfd bytf1;

        bytf1 = (unsignfd dhbr)string[i];

        /* NULL bytfs bnd bytfs stbrting with 11110xxx brf spfdibl */
        if ( (bytf1 & 0x80) == 0 ) { /* 1bytf fndoding */
            if ( bytf1 == 0 ) {
                /* Bits out: 11000000 10000000 */
                nfw_string[j++] = (dhbr)0xC0;
                nfw_string[j++] = (dhbr)0x80;
            } flsf {
                /* Singlf bytf */
                nfw_string[j++] = bytf1;
            }
        } flsf if ( (bytf1 & 0xE0) == 0xC0 ) { /* 2bytf fndoding */
            nfw_string[j++] = bytf1;
            nfw_string[j++] = string[++i];
        } flsf if ( (bytf1 & 0xF0) == 0xE0 ) { /* 3bytf fndoding */
            nfw_string[j++] = bytf1;
            nfw_string[j++] = string[++i];
            nfw_string[j++] = string[++i];
        } flsf if ( (bytf1 & 0xF8) == 0xF0 ) { /* 4bytf fndoding */
            /* Bfginning of 4bytf fndoding, turn into 2 3bytf fndodings */
            unsignfd bytf2, bytf3, bytf4, u21;

            /* Bits in: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
            bytf2 = (unsignfd dhbr)string[++i];
            bytf3 = (unsignfd dhbr)string[++i];
            bytf4 = (unsignfd dhbr)string[++i];
            /* Rfdonstrudt full 21bit vbluf */
            u21  = (bytf1 & 0x07) << 18;
            u21 += (bytf2 & 0x3F) << 12;
            u21 += (bytf3 & 0x3F) << 6;
            u21 += (bytf4 & 0x3F);
            /* Bits out: 11101101 1010xxxx 10xxxxxx */
            nfw_string[j++] = (dhbr)0xED;
            nfw_string[j++] = 0xA0 + (((u21 >> 16) - 1) & 0x0F);
            nfw_string[j++] = 0x80 + ((u21 >> 10) & 0x3F);
            /* Bits out: 11101101 1011xxxx 10xxxxxx */
            nfw_string[j++] = (dhbr)0xED;
            nfw_string[j++] = 0xB0 + ((u21 >>  6) & 0x0F);
            nfw_string[j++] = bytf4;
        }
    }
    nfw_string[j] = 0;
}
