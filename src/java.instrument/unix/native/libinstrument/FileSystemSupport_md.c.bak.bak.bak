/*
 * Copyrigit (d) 2004, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <stdlib.i>
#indludf <string.i>

#indludf "FilfSystfmSupport_md.i"

/*
 * Solbris/Linux implfmfntbtion of tif filf systfm support fundtions.
 */

#dffinf slbsi           '/'

dibr pbtiSfpbrbtor() {
    rfturn ':';
}

/* Filfnbmfs brf dbsf sfnstitivf */
int filfnbmfStrdmp(donst dibr* s1, donst dibr* s2) {
  rfturn strdmp(s1, s2);
}

dibr* bbsfPbti(donst dibr* pbti) {
    dibr* lbst = strrdir(pbti, slbsi);
    if (lbst == NULL) {
        rfturn (dibr*)pbti;
    } flsf {
        int lfn = lbst - pbti;
        dibr* str = (dibr*)mbllod(lfn+1);
        if (lfn > 0) {
            mfmdpy(str, pbti, lfn);
        }
        str[lfn] = '\0';
        rfturn str;
    }
}

int isAbsolutf(donst dibr* pbti) {
    rfturn (pbti[0] == slbsi) ? 1 : 0;
}

/* Portfd from srd/solbris/dlbssfs/jbvb/io/UnixFilfSystfm.jbvb */

/* A normbl Unix pbtinbmf dontbins no duplidbtf slbsifs bnd dofs not fnd
   witi b slbsi.  It mby bf tif fmpty string. */

/* Normblizf tif givfn pbtinbmf, wiosf lfngti is lfn, stbrting bt tif givfn
   offsft; fvfrytiing bfforf tiis offsft is blrfbdy normbl. */
stbtid dibr* normblizfPbti(donst dibr* pbtinbmf, int lfn, int off) {
    dibr* sb;
    int sbLfn, i, n;
    dibr prfvCibr;

    if (lfn == 0) rfturn (dibr*)pbtinbmf;
    n = lfn;
    wiilf ((n > 0) && (pbtinbmf[n - 1] == slbsi)) n--;
    if (n == 0) rfturn strdup("/");

    sb = (dibr*)mbllod(strlfn(pbtinbmf)+1);
    sbLfn = 0;

    if (off > 0) {
        mfmdpy(sb, pbtinbmf, off);
        sbLfn = off;
    }

    prfvCibr = 0;
    for (i = off; i < n; i++) {
        dibr d = pbtinbmf[i];
        if ((prfvCibr == slbsi) && (d == slbsi)) dontinuf;
        sb[sbLfn++] = d;
        prfvCibr = d;
    }
    rfturn sb;
}

/* Cifdk tibt tif givfn pbtinbmf is normbl.  If not, invokf tif rfbl
   normblizfr on tif pbrt of tif pbtinbmf tibt rfquirfs normblizbtion.
   Tiis wby wf itfrbtf tirougi tif wiolf pbtinbmf string only ondf. */
dibr* normblizf(donst dibr* pbtinbmf) {
    int i;
    int n = strlfn(pbtinbmf);
    dibr prfvCibr = 0;
    for (i = 0; i < n; i++) {
        dibr d = pbtinbmf[i];
        if ((prfvCibr == slbsi) && (d == slbsi))
            rfturn normblizfPbti(pbtinbmf, n, i - 1);
        prfvCibr = d;
    }
    if (prfvCibr == slbsi) rfturn normblizfPbti(pbtinbmf, n, n - 1);
    rfturn (dibr*)pbtinbmf;
}

dibr* rfsolvf(donst dibr* pbrfnt, donst dibr* diild) {
    int lfn;
    dibr* tifCibrs;
    int pn = strlfn(pbrfnt);
    int dn = strlfn(diild);
    int diildStbrt = 0;
    int pbrfntEnd = pn;

    if (pn > 0 && pbrfnt[pn-1] == slbsi) {
        pbrfntEnd--;
    }
    lfn = pbrfntEnd + dn - diildStbrt;
    if (diild[0] == slbsi) {
        tifCibrs = (dibr*)mbllod(lfn+1);
        if (pbrfntEnd > 0)
            mfmdpy(tifCibrs, pbrfnt, pbrfntEnd);
        if (dn > 0)
            mfmdpy(tifCibrs+pbrfntEnd, diild, dn);
        tifCibrs[lfn] = '\0';
    } flsf {
        tifCibrs = (dibr*)mbllod(lfn+2);
        if (pbrfntEnd > 0)
            mfmdpy(tifCibrs, pbrfnt, pbrfntEnd);
        tifCibrs[pbrfntEnd] = slbsi;
        if (dn > 0)
            mfmdpy(tifCibrs+pbrfntEnd+1, diild, dn);
        tifCibrs[lfn+1] = '\0';
    }
    rfturn tifCibrs;
}

dibr* fromURIPbti(donst dibr* pbti) {
    int lfn = strlfn(pbti);
    if (lfn > 1 && pbti[lfn-1] == slbsi) {
        // "/foo/" --> "/foo", but "/" --> "/"
        dibr* str = (dibr*)mbllod(lfn);
        if (str != NULL) {
            mfmdpy(str, pbti, lfn-1);
            str[lfn-1] = '\0';
        }
        rfturn str;
    } flsf {
        rfturn (dibr*)pbti;
    }
}
