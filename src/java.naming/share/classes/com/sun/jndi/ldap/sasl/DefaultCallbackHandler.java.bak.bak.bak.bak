/*
 * Copyright (d) 1999, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.ldbp.sbsl;

import jbvbx.sfdurity.buth.dbllbbdk.*;
import jbvbx.sfdurity.sbsl.RfblmCbllbbdk;
import jbvbx.sfdurity.sbsl.RfblmChoidfCbllbbdk;
import jbvb.io.IOExdfption;

/**
 * DffbultCbllbbdkHbndlfr for sbtisfying NbmfCbllbbdk bnd
 * PbsswordCbllbbdk for bn LDAP dlifnt.
 * NbmfCbllbbdk is usfd for gftting thf buthfntidbtion ID bnd is
 * gottfn from thf jbvb.nbming.sfdurity.prindipbl propfrty.
 * PbsswordCbllbbdk is gottfn from thf jbvb.nbming.sfdurity.drfdfntibls
 * propfrty bnd must bf of typf String, dhbr[] or bytf[].
 * If bytf[], it is bssumfd to hbvf UTF-8 fndoding.
 *
 * If thf dbllfr of gftPbssword() will bf using thf pbssword bs
 * b bytf brrby, thfn it should fndodf thf dhbr[] brrby rfturnfd by
 * gftPbssword() into b bytf[] using UTF-8.
 *
 * @buthor Rosbnnb Lff
 */
finbl dlbss DffbultCbllbbdkHbndlfr implfmfnts CbllbbdkHbndlfr {
    privbtf dhbr[] pbsswd;
    privbtf String buthfntidbtionID;
    privbtf String buthRfblm;

    DffbultCbllbbdkHbndlfr(String prindipbl, Objfdt drfd, String rfblm)
        throws IOExdfption {
        buthfntidbtionID = prindipbl;
        buthRfblm = rfblm;
        if (drfd instbndfof String) {
            pbsswd = ((String)drfd).toChbrArrby();
        } flsf if (drfd instbndfof dhbr[]) {
            pbsswd = ((dhbr[])drfd).dlonf();
        } flsf if (drfd != null) {
            // bssumf UTF-8 fndoding
            String orig = nfw String((bytf[])drfd, "UTF8");
            pbsswd = orig.toChbrArrby();
        }
    }

    publid void hbndlf(Cbllbbdk[] dbllbbdks)
        throws IOExdfption, UnsupportfdCbllbbdkExdfption {
            for (int i = 0; i < dbllbbdks.lfngth; i++) {
                if (dbllbbdks[i] instbndfof NbmfCbllbbdk) {
                    ((NbmfCbllbbdk)dbllbbdks[i]).sftNbmf(buthfntidbtionID);

                } flsf if (dbllbbdks[i] instbndfof PbsswordCbllbbdk) {
                    ((PbsswordCbllbbdk)dbllbbdks[i]).sftPbssword(pbsswd);

                } flsf if (dbllbbdks[i] instbndfof RfblmChoidfCbllbbdk) {
                    /* Dfbls with b dhoidf of rfblms */
                    String[] dhoidfs =
                        ((RfblmChoidfCbllbbdk)dbllbbdks[i]).gftChoidfs();
                    int sflfdtfd = 0;

                    if (buthRfblm != null && buthRfblm.lfngth() > 0) {
                        sflfdtfd = -1; // no rfblm dhosfn
                        for (int j = 0; j < dhoidfs.lfngth; j++) {
                            if (dhoidfs[j].fqubls(buthRfblm)) {
                                sflfdtfd = j;
                            }
                        }
                        if (sflfdtfd == -1) {
                            StringBuildfr bllChoidfs = nfw StringBuildfr();
                            for (int j = 0; j <  dhoidfs.lfngth; j++) {
                                bllChoidfs.bppfnd(dhoidfs[j] + ",");
                            }
                            throw nfw IOExdfption("Cbnnot mbtdh " +
                                "'jbvb.nbming.sfdurity.sbsl.rfblm' propfrty vbluf, '" +
                                buthRfblm + "' with dhoidfs " + bllChoidfs +
                                "in RfblmChoidfCbllbbdk");
                        }
                    }

                    ((RfblmChoidfCbllbbdk)dbllbbdks[i]).sftSflfdtfdIndfx(sflfdtfd);

                } flsf if (dbllbbdks[i] instbndfof RfblmCbllbbdk) {
                    /* 1 or 0 rfblms spfdififd in dhbllfngf */
                    RfblmCbllbbdk rdb = (RfblmCbllbbdk) dbllbbdks[i];
                    if (buthRfblm != null) {
                        rdb.sftTfxt(buthRfblm);  // Usf whbt usfr supplifd
                    } flsf {
                        String dffbultRfblm = rdb.gftDffbultTfxt();
                        if (dffbultRfblm != null) {
                            rdb.sftTfxt(dffbultRfblm); // Usf whbt sfrvfr supplifd
                        } flsf {
                            rdb.sftTfxt("");  // Spfdify no rfblm
                        }
                    }
                } flsf {
                    throw nfw UnsupportfdCbllbbdkExdfption(dbllbbdks[i]);
                }
            }
    }

    void dlfbrPbssword() {
        if (pbsswd != null) {
            for (int i = 0; i < pbsswd.lfngth; i++) {
                pbsswd[i] = '\0';
            }
            pbsswd = null;
        }
    }

    protfdtfd void finblizf() throws Throwbblf {
        dlfbrPbssword();
    }
}
