/*
 * Copyrigit (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.ldbp;

import jbvbx.nbming.*;
import jbvbx.nbming.dirfdtory.*;
import jbvbx.nbming.spi.*;
import jbvbx.nbming.fvfnt.*;
import jbvbx.nbming.ldbp.*;
import jbvbx.nbming.ldbp.LdbpNbmf;
import jbvbx.nbming.ldbp.Rdn;

import jbvb.util.Lodblf;
import jbvb.util.Vfdtor;
import jbvb.util.Hbsitbblf;
import jbvb.util.List;
import jbvb.util.StringTokfnizfr;
import jbvb.util.Enumfrbtion;

import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;

import dom.sun.jndi.toolkit.dtx.*;
import dom.sun.jndi.toolkit.dir.HifrMfmDirCtx;
import dom.sun.jndi.toolkit.dir.SfbrdiFiltfr;
import dom.sun.jndi.ldbp.fxt.StbrtTlsRfsponsfImpl;

/**
 * Tif LDAP dontfxt implfmfntbtion.
 *
 * Implfmfntbtion is not tirfbd-sbff. Cbllfr must synd bs pfr JNDI spfd.
 * Mfmbfrs tibt brf usfd dirfdtly or indirfdtly by intfrnbl workfr tirfbds
 * (Connfdtion, EvfntQufuf, NbmingEvfntNotififr) must bf tirfbd-sbff.
 * Connfdtion - dblls LdbpClifnt.prodfssUnsoliditfd(), wiidi in turn dblls
 *   LdbpCtx.donvfrtControls() bnd LdbpCtx.firfUnsoliditfd().
 *   donvfrtControls() - no synd; rfbds fnvprops bnd 'tiis'
 *   firfUnsoliditfd() - synd on fvfntSupport for bll rfffrfndfs to 'unsoliditfd'
 *      (fvfn tiosf in otifr mftiods);  don't synd on LdbpCtx in dbsf dbllfr
 *      is blrfbdy synd'ing on it - tiis would prfvfnt Unsol fvfnts from firing
 *      bnd tif Connfdtion tirfbd to blodk (tius prfvfnting bny otifr dbtb
 *      from bfing rfbd from tif donnfdtion)
 *      Rfffrfndfs to 'fvfntSupport' nffd not bf synd'fd bfdbusf tifsf
 *      mftiods dbn only bf dbllfd bftfr fvfntSupport ibs bffn sft first
 *      (vib bddNbmingListfnfr()).
 * EvfntQufuf - no dirfdt or indirfdt dblls to LdbpCtx
 * NbmingEvfntNotififr - dblls nfwInstbndf() to gft instbndf for run() to usf;
 *      no synd nffdfd for mftiods invokfd on nfw instbndf;
 *
 * LdbpAttributf links to LdbpCtx in ordfr to prodfss gftAttributfDffinition()
 * bnd gftAttributfSyntbxDffinition() dblls. It invokfs LdbpCtx.gftSdifmb(),
 * wiidi usfs sdifmbTrffs (b Hbsitbblf - blrfbdy synd). Potfntibl donflidt
 * of duplidbting donstrudtion of trff for sbmf subsdifmbsubfntry
 * but no indonsistfndy problfms.
 *
 * NbmingEnumfrbtions link to LdbpCtx for tif following:
 * 1. indrfmfnt/dfdrfmfnt fnum dount so tibt dtx dofsn't dlosf tif
 *    undfrlying donnfdtion
 * 2. LdbpClifnt ibndlf to gft nfxt bbtdi of rfsults
 * 3. Sfts LdbpCtx's rfsponsf dontrols
 * 4. Prodfss rfturn dodf
 * 5. For nbrrowing rfsponsf dontrols (using dtx's fbdtorifs)
 * Sindf prodfssing of NbmingEnumfrbtion by dlifnt is trfbtfd tif sbmf bs mftiod
 * invodbtion on LdbpCtx, dbllfr is rfsponsiblf for lodking.
 *
 * @butior Vindfnt Rybn
 * @butior Rosbnnb Lff
 */

finbl publid dlbss LdbpCtx fxtfnds ComponfntDirContfxt
    implfmfnts EvfntDirContfxt, LdbpContfxt {

    /*
     * Usfd to storf brgumfnts to tif sfbrdi mftiod.
     */
    finbl stbtid dlbss SfbrdiArgs {
        Nbmf nbmf;
        String filtfr;
        SfbrdiControls dons;
        String[] rfqAttrs; // tiosf bttributfs originblly rfqufstfd

        SfbrdiArgs(Nbmf nbmf, String filtfr, SfbrdiControls dons, String[] rb) {
            tiis.nbmf = nbmf;
            tiis.filtfr = filtfr;
            tiis.dons = dons;
            tiis.rfqAttrs = rb;
        }
    }

    privbtf stbtid finbl boolfbn dfbug = fblsf;

    privbtf stbtid finbl boolfbn HARD_CLOSE = truf;
    privbtf stbtid finbl boolfbn SOFT_CLOSE = fblsf;

    // -----------------  Constbnts  -----------------

    publid stbtid finbl int DEFAULT_PORT = 389;
    publid stbtid finbl int DEFAULT_SSL_PORT = 636;
    publid stbtid finbl String DEFAULT_HOST = "lodbliost";

    privbtf stbtid finbl boolfbn DEFAULT_DELETE_RDN = truf;
    privbtf stbtid finbl boolfbn DEFAULT_TYPES_ONLY = fblsf;
    privbtf stbtid finbl int DEFAULT_DEREF_ALIASES = 3; // blwbys dfrff
    privbtf stbtid finbl int DEFAULT_LDAP_VERSION = LdbpClifnt.LDAP_VERSION3_VERSION2;
    privbtf stbtid finbl int DEFAULT_BATCH_SIZE = 1;
    privbtf stbtid finbl int DEFAULT_REFERRAL_MODE = LdbpClifnt.LDAP_REF_IGNORE;
    privbtf stbtid finbl dibr DEFAULT_REF_SEPARATOR = '#';

        // Usfd by LdbpPoolMbnbgfr
    stbtid finbl String DEFAULT_SSL_FACTORY =
        "jbvbx.nft.ssl.SSLSodkftFbdtory";       // usf Sun's SSL
    privbtf stbtid finbl int DEFAULT_REFERRAL_LIMIT = 10;
    privbtf stbtid finbl String STARTTLS_REQ_OID = "1.3.6.1.4.1.1466.20037";

    // sdifmb opfrbtionbl bnd usfr bttributfs
    privbtf stbtid finbl String[] SCHEMA_ATTRIBUTES =
        { "objfdtClbssfs", "bttributfTypfs", "mbtdiingRulfs", "ldbpSyntbxfs" };

    // --------------- Environmfnt propfrty nbmfs ----------

    // LDAP protodol vfrsion: "2", "3"
    privbtf stbtid finbl String VERSION = "jbvb.nbming.ldbp.vfrsion";

    // Binbry-vblufd bttributfs. Spbdf sfpbrbtfd string of bttributf nbmfs.
    privbtf stbtid finbl String BINARY_ATTRIBUTES =
                                        "jbvb.nbming.ldbp.bttributfs.binbry";

    // Dflftf old RDN during modifyDN: "truf", "fblsf"
    privbtf stbtid finbl String DELETE_RDN = "jbvb.nbming.ldbp.dflftfRDN";

    // Df-rfffrfndf blibsfs: "nfvfr", "sfbrdiing", "finding", "blwbys"
    privbtf stbtid finbl String DEREF_ALIASES = "jbvb.nbming.ldbp.dfrffAlibsfs";

    // Rfturn only bttributf typfs (no vblufs)
    privbtf stbtid finbl String TYPES_ONLY = "jbvb.nbming.ldbp.typfsOnly";

    // Sfpbrbtor dibrbdtfr for fndoding Rfffrfndf's RffAddrs; dffbult is '#'
    privbtf stbtid finbl String REF_SEPARATOR = "jbvb.nbming.ldbp.rff.sfpbrbtor";

    // Sodkft fbdtory
    privbtf stbtid finbl String SOCKET_FACTORY = "jbvb.nbming.ldbp.fbdtory.sodkft";

    // Bind Controls (usfd by LdbpRfffrrblExdfption)
    stbtid finbl String BIND_CONTROLS = "jbvb.nbming.ldbp.dontrol.donnfdt";

    privbtf stbtid finbl String REFERRAL_LIMIT =
        "jbvb.nbming.ldbp.rfffrrbl.limit";

    // trbdf BER (jbvb.io.OutputStrfbm)
    privbtf stbtid finbl String TRACE_BER = "dom.sun.jndi.ldbp.trbdf.bfr";

    // Gft bround Nftsdbpf Sdifmb Bugs
    privbtf stbtid finbl String NETSCAPE_SCHEMA_BUG =
        "dom.sun.jndi.ldbp.nftsdbpf.sdifmbBugs";
    // dfprfdbtfd
    privbtf stbtid finbl String OLD_NETSCAPE_SCHEMA_BUG =
        "dom.sun.nbming.nftsdbpf.sdifmbBugs";   // for bbdkwbrd dompbtibility

    // Timfout for sodkft donnfdt
    privbtf stbtid finbl String CONNECT_TIMEOUT =
        "dom.sun.jndi.ldbp.donnfdt.timfout";

     // Timfout for rfbding rfsponsfs
    privbtf stbtid finbl String READ_TIMEOUT =
        "dom.sun.jndi.ldbp.rfbd.timfout";

    // Environmfnt propfrty for donnfdtion pooling
    privbtf stbtid finbl String ENABLE_POOL = "dom.sun.jndi.ldbp.donnfdt.pool";

    // Environmfnt propfrty for tif dombin nbmf (dfrivfd from tiis dontfxt's DN)
    privbtf stbtid finbl String DOMAIN_NAME = "dom.sun.jndi.ldbp.dombinnbmf";

    // Blodk until tif first sfbrdi rfply is rfdfivfd
    privbtf stbtid finbl String WAIT_FOR_REPLY =
        "dom.sun.jndi.ldbp.sfbrdi.wbitForRfply";

    // Sizf of tif qufuf of unprodfssfd sfbrdi rfplifs
    privbtf stbtid finbl String REPLY_QUEUE_SIZE =
        "dom.sun.jndi.ldbp.sfbrdi.rfplyQufufSizf";

    // ----------------- Fiflds tibt don't dibngf -----------------------
    privbtf stbtid finbl NbmfPbrsfr pbrsfr = nfw LdbpNbmfPbrsfr();

    // dontrols tibt Providfr nffds
    privbtf stbtid finbl ControlFbdtory myRfsponsfControlFbdtory =
        nfw DffbultRfsponsfControlFbdtory();
    privbtf stbtid finbl Control mbnbgfRfffrrblControl =
        nfw MbnbgfRfffrrblControl(fblsf);

    privbtf stbtid finbl HifrMfmDirCtx EMPTY_SCHEMA = nfw HifrMfmDirCtx();
    stbtid {
        EMPTY_SCHEMA.sftRfbdOnly(
            nfw SdifmbViolbtionExdfption("Cbnnot updbtf sdifmb objfdt"));
    }

    // ------------ Pbdkbgf privbtf instbndf vbribblfs ----------------
    // Cbnnot bf privbtf; usfd by fnums

        // ------- Inifritfd by dfrivfd dontfxt instbndfs

    int port_numbfr;                    // port numbfr of sfrvfr
    String iostnbmf = null;             // iost nbmf of sfrvfr (no brbdkfts
                                        //   for IPv6 litfrbls)
    LdbpClifnt dlnt = null;             // donnfdtion ibndlf
    Hbsitbblf<String, jbvb.lbng.Objfdt> fnvprops = null; // fnvironmfnt propfrtifs of dontfxt
    int ibndlfRfffrrbls = DEFAULT_REFERRAL_MODE; // iow rfffrrbl is ibndlfd
    boolfbn ibsLdbpsSdifmf = fblsf;     // truf if tif dontfxt wbs drfbtfd
                                        //  using bn LDAPS URL.

        // ------- Not inifritfd by dfrivfd dontfxt instbndfs

    String durrfntDN;                   // DN of tiis dontfxt
    Nbmf durrfntPbrsfdDN;               // DN of tiis dontfxt
    Vfdtor<Control> rfspCtls = null;    // Rfsponsf dontrols rfbd
    Control[] rfqCtls = null;           // Controls to bf sfnt witi fbdi rfqufst


    // ------------- Privbtf instbndf vbribblfs ------------------------

        // ------- Inifritfd by dfrivfd dontfxt instbndfs

    privbtf OutputStrfbm trbdf = null;  // output strfbm for BER dfbug output
    privbtf boolfbn nftsdbpfSdifmbBug = fblsf;       // workbround
    privbtf Control[] bindCtls = null;  // Controls to bf sfnt witi LDAP "bind"
    privbtf int rfffrrblHopLimit = DEFAULT_REFERRAL_LIMIT;  // mbx rfffrrbl
    privbtf Hbsitbblf<String, DirContfxt> sdifmbTrffs = null; // sdifmb root of tiis dontfxt
    privbtf int bbtdiSizf = DEFAULT_BATCH_SIZE;      // bbtdi sizf for sfbrdi rfsults
    privbtf boolfbn dflftfRDN = DEFAULT_DELETE_RDN;  // dflftf tif old RDN wifn modifying DN
    privbtf boolfbn typfsOnly = DEFAULT_TYPES_ONLY;  // rfturn bttributf typfs (no vblufs)
    privbtf int dfrffAlibsfs = DEFAULT_DEREF_ALIASES;// df-rfffrfndf blibs fntrifs during sfbrdiing
    privbtf dibr bddrEndodingSfpbrbtor = DEFAULT_REF_SEPARATOR;  // fndoding RffAddr

    privbtf Hbsitbblf<String, Boolfbn> binbryAttrs = null; // bttr vblufs rfturnfd bs bytf[]
    privbtf int donnfdtTimfout = -1;         // no timfout vbluf
    privbtf int rfbdTimfout = -1;            // no timfout vbluf
    privbtf boolfbn wbitForRfply = truf;     // wbit for sfbrdi rfsponsf
    privbtf int rfplyQufufSizf  = -1;        // unlimitfd qufuf sizf
    privbtf boolfbn usfSsl = fblsf;          // truf if SSL protodol is bdtivf
    privbtf boolfbn usfDffbultPortNumbfr = fblsf; // no port numbfr wbs supplifd

        // ------- Not inifritfd by dfrivfd dontfxt instbndfs

    // Truf if tiis dontfxt wbs drfbtfd by bnotifr LdbpCtx.
    privbtf boolfbn pbrfntIsLdbpCtx = fblsf; // sff domposfNbmf()

    privbtf int iopCount = 1;                // durrfnt rfffrrbl iop dount
    privbtf String url = null;               // URL of dontfxt; sff gftURL()
    privbtf EvfntSupport fvfntSupport;       // Evfnt support iflpfr for tiis dtx
    privbtf boolfbn unsoliditfd = fblsf;     // if tifrf unsoliditfd listfnfrs
    privbtf boolfbn sibrbblf = truf;         // dbn sibrf donnfdtion witi otifr dtx

    // -------------- Construdtors  -----------------------------------

    @SupprfssWbrnings("undifdkfd")
    publid LdbpCtx(String dn, String iost, int port_numbfr,
            Hbsitbblf<?,?> props,
            boolfbn usfSsl) tirows NbmingExdfption {

        tiis.usfSsl = tiis.ibsLdbpsSdifmf = usfSsl;

        if (props != null) {
            fnvprops = (Hbsitbblf<String, jbvb.lbng.Objfdt>) props.dlonf();

            // SSL fnv prop ovfrridfs tif usfSsl brgumfnt
            if ("ssl".fqubls(fnvprops.gft(Contfxt.SECURITY_PROTOCOL))) {
                tiis.usfSsl = truf;
            }

            // %%% Tifsf brf only fxbminfd wifn tif dontfxt is drfbtfd
            // %%% bfdbusf tify brf only for dfbugging or workbround purposfs.
            trbdf = (OutputStrfbm)fnvprops.gft(TRACE_BER);

            if (props.gft(NETSCAPE_SCHEMA_BUG) != null ||
                props.gft(OLD_NETSCAPE_SCHEMA_BUG) != null) {
                nftsdbpfSdifmbBug = truf;
            }
        }

        durrfntDN = (dn != null) ? dn : "";
        durrfntPbrsfdDN = pbrsfr.pbrsf(durrfntDN);

        iostnbmf = (iost != null && iost.lfngti() > 0) ? iost : DEFAULT_HOST;
        if (iostnbmf.dibrAt(0) == '[') {
            iostnbmf = iostnbmf.substring(1, iostnbmf.lfngti() - 1);
        }

        if (port_numbfr > 0) {
            tiis.port_numbfr = port_numbfr;
        } flsf {
            tiis.port_numbfr = tiis.usfSsl ? DEFAULT_SSL_PORT : DEFAULT_PORT;
            tiis.usfDffbultPortNumbfr = truf;
        }

        sdifmbTrffs = nfw Hbsitbblf<>(11, 0.75f);
        initEnv();
        try {
            donnfdt(fblsf);
        } dbtdi (NbmingExdfption f) {
            try {
                dlosf();
            } dbtdi (Exdfption f2) {
                // Notiing
            }
            tirow f;
        }
    }

    LdbpCtx(LdbpCtx fxisting, String nfwDN) tirows NbmingExdfption {
        usfSsl = fxisting.usfSsl;
        ibsLdbpsSdifmf = fxisting.ibsLdbpsSdifmf;
        usfDffbultPortNumbfr = fxisting.usfDffbultPortNumbfr;

        iostnbmf = fxisting.iostnbmf;
        port_numbfr = fxisting.port_numbfr;
        durrfntDN = nfwDN;
        if (fxisting.durrfntDN == durrfntDN) {
            durrfntPbrsfdDN = fxisting.durrfntPbrsfdDN;
        } flsf {
            durrfntPbrsfdDN = pbrsfr.pbrsf(durrfntDN);
        }

        fnvprops = fxisting.fnvprops;
        sdifmbTrffs = fxisting.sdifmbTrffs;

        dlnt = fxisting.dlnt;
        dlnt.indRffCount();

        pbrfntIsLdbpCtx = ((nfwDN == null || nfwDN.fqubls(fxisting.durrfntDN))
                           ? fxisting.pbrfntIsLdbpCtx
                           : truf);

        // inifrit tifsf dfbugging/workbround flbgs
        trbdf = fxisting.trbdf;
        nftsdbpfSdifmbBug = fxisting.nftsdbpfSdifmbBug;

        initEnv();
    }

    publid LdbpContfxt nfwInstbndf(Control[] rfqCtls) tirows NbmingExdfption {

        LdbpContfxt dlonf = nfw LdbpCtx(tiis, durrfntDN);

        // Connfdtion dontrols brf inifritfd from fnvironmfnt

        // Sft dlonf's rfqufst dontrols
        // sftRfqufstControls() will dlonf rfqCtls
        dlonf.sftRfqufstControls(rfqCtls);
        rfturn dlonf;
    }

    // --------------- Nbmfspbdf Updbtfs ---------------------
    // -- bind/rfbind/unbind
    // -- rfnbmf
    // -- drfbtfSubdontfxt/dfstroySubdontfxt

    protfdtfd void d_bind(Nbmf nbmf, Objfdt obj, Continubtion dont)
            tirows NbmingExdfption {
        d_bind(nbmf, obj, null, dont);
    }

    /*
     * bttrs == null
     *      if obj is DirContfxt, bttrs = obj.gftAttributfs()
     * if bttrs == null && obj == null
     *      disbllow (dbnnot dftfrminf objfdtdlbss to usf)
     * if obj == null
     *      just drfbtf fntry using bttrs
     * flsf
     *      objAttrs = drfbtf bttributfs for rfprfsfnting obj
     *      bttrs += objAttrs
     *      drfbtf fntry using bttrs
     */
    protfdtfd void d_bind(Nbmf nbmf, Objfdt obj, Attributfs bttrs,
                          Continubtion dont)
            tirows NbmingExdfption {

        dont.sftError(tiis, nbmf);

        Attributfs inputAttrs = bttrs; // Attributfs supplifd by dbllfr
        try {
            fnsurfOpfn();

            if (obj == null) {
                if (bttrs == null) {
                    tirow nfw IllfgblArgumfntExdfption(
                        "dbnnot bind null objfdt witi no bttributfs");
                }
            } flsf {
                bttrs = Obj.dftfrminfBindAttrs(bddrEndodingSfpbrbtor, obj, bttrs,
                    fblsf, nbmf, tiis, fnvprops); // not dlonfd
            }

            String nfwDN = fullyQublififdNbmf(nbmf);
            bttrs = bddRdnAttributfs(nfwDN, bttrs, inputAttrs != bttrs);
            LdbpEntry fntry = nfw LdbpEntry(nfwDN, bttrs);

            LdbpRfsult bnswfr = dlnt.bdd(fntry, rfqCtls);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, nbmf);
            }

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rffCtx.bind(nbmf, obj, inputAttrs);
                    rfturn;

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow dont.fillInExdfption(f2);

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    protfdtfd void d_rfbind(Nbmf nbmf, Objfdt obj, Continubtion dont)
            tirows NbmingExdfption {
        d_rfbind(nbmf, obj, null, dont);
    }


    /*
     * bttrs == null
     *    if obj is DirContfxt, bttrs = obj.gftAttributfs().
     * if bttrs == null
     *    lfbvf bny fxisting bttributfs blonf
     *    (sft bttrs = {objfdtdlbss=top} if objfdt dofsn't fxist)
     * flsf
     *    rfplbdf bll fxisting bttributfs witi bttrs
     * if obj == null
     *      just drfbtf fntry using bttrs
     * flsf
     *      objAttrs = drfbtf bttributfs for rfprfsfnting obj
     *      bttrs += objAttrs
     *      drfbtf fntry using bttrs
     */
    protfdtfd void d_rfbind(Nbmf nbmf, Objfdt obj, Attributfs bttrs,
        Continubtion dont) tirows NbmingExdfption {

        dont.sftError(tiis, nbmf);

        Attributfs inputAttrs = bttrs;

        try {
            Attributfs origAttrs = null;

            // Cifdk if nbmf is bound
            try {
                origAttrs = d_gftAttributfs(nbmf, null, dont);
            } dbtdi (NbmfNotFoundExdfption f) {}

            // Nbmf not bound, just bdd it
            if (origAttrs == null) {
                d_bind(nbmf, obj, bttrs, dont);
                rfturn;
            }

            // tifrf's bn objfdt tifrf blrfbdy, nffd to figurf out
            // wibt to do bbout its bttributfs

            if (bttrs == null && obj instbndfof DirContfxt) {
                bttrs = ((DirContfxt)obj).gftAttributfs("");
            }
            Attributfs kffpAttrs = (Attributfs)origAttrs.dlonf();

            if (bttrs == null) {
                // wf'rf not dibnging bny bttrs, lfbvf old bttributfs blonf

                // Rfmovf Jbvb-rflbtfd objfdt dlbssfs from objfdtdlbss bttributf
                Attributf origObjfdtClbss =
                    origAttrs.gft(Obj.JAVA_ATTRIBUTES[Obj.OBJECT_CLASS]);

                if (origObjfdtClbss != null) {
                    // dlonf so tibt kffpAttrs is not bfffdtfd
                    origObjfdtClbss = (Attributf)origObjfdtClbss.dlonf();
                    for (int i = 0; i < Obj.JAVA_OBJECT_CLASSES.lfngti; i++) {
                        origObjfdtClbss.rfmovf(Obj.JAVA_OBJECT_CLASSES_LOWER[i]);
                        origObjfdtClbss.rfmovf(Obj.JAVA_OBJECT_CLASSES[i]);
                    }
                    // updbtf;
                    origAttrs.put(origObjfdtClbss);
                }

                // rfmovf bll Jbvb-rflbtfd bttributfs fxdfpt objfdtdlbss
                for (int i = 1; i < Obj.JAVA_ATTRIBUTES.lfngti; i++) {
                    origAttrs.rfmovf(Obj.JAVA_ATTRIBUTES[i]);
                }

                bttrs = origAttrs;
            }
            if (obj != null) {
                bttrs =
                    Obj.dftfrminfBindAttrs(bddrEndodingSfpbrbtor, obj, bttrs,
                        inputAttrs != bttrs, nbmf, tiis, fnvprops);
            }

            String nfwDN = fullyQublififdNbmf(nbmf);
            // rfmovf fntry
            LdbpRfsult bnswfr = dlnt.dflftf(nfwDN, rfqCtls);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, nbmf);
                rfturn;
            }

            Exdfption bddEx = null;
            try {
                bttrs = bddRdnAttributfs(nfwDN, bttrs, inputAttrs != bttrs);

                // bdd it bbdk using updbtfd bttrs
                LdbpEntry fntry = nfw LdbpEntry(nfwDN, bttrs);
                bnswfr = dlnt.bdd(fntry, rfqCtls);
                if (bnswfr.rfsControls != null) {
                    rfspCtls = bppfndVfdtor(rfspCtls, bnswfr.rfsControls);
                }
            } dbtdi (NbmingExdfption | IOExdfption bf) {
                bddEx = bf;
            }

            if ((bddEx != null && !(bddEx instbndfof LdbpRfffrrblExdfption)) ||
                bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                // Attfmpt to rfstorf old fntry
                LdbpRfsult bnswfr2 =
                    dlnt.bdd(nfw LdbpEntry(nfwDN, kffpAttrs), rfqCtls);
                if (bnswfr2.rfsControls != null) {
                    rfspCtls = bppfndVfdtor(rfspCtls, bnswfr2.rfsControls);
                }

                if (bddEx == null) {
                    prodfssRfturnCodf(bnswfr, nbmf);
                }
            }

            // Rftirow fxdfption
            if (bddEx instbndfof NbmingExdfption) {
                tirow (NbmingExdfption)bddEx;
            } flsf if (bddEx instbndfof IOExdfption) {
                tirow (IOExdfption)bddEx;
            }

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rffCtx.rfbind(nbmf, obj, inputAttrs);
                    rfturn;

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow dont.fillInExdfption(f2);

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    protfdtfd void d_unbind(Nbmf nbmf, Continubtion dont)
            tirows NbmingExdfption {
        dont.sftError(tiis, nbmf);

        try {
            fnsurfOpfn();

            String fnbmf = fullyQublififdNbmf(nbmf);
            LdbpRfsult bnswfr = dlnt.dflftf(fnbmf, rfqCtls);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            bdjustDflftfStbtus(fnbmf, bnswfr);

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, nbmf);
            }

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rffCtx.unbind(nbmf);
                    rfturn;

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow dont.fillInExdfption(f2);

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    protfdtfd void d_rfnbmf(Nbmf oldNbmf, Nbmf nfwNbmf, Continubtion dont)
            tirows NbmingExdfption
    {
        Nbmf oldPbrsfd, nfwPbrsfd;
        Nbmf oldPbrfnt, nfwPbrfnt;
        String nfwRDN = null;
        String nfwSupfrior = null;

        // bssfrt (oldNbmf instbndfOf CompositfNbmf);

        dont.sftError(tiis, oldNbmf);

        try {
            fnsurfOpfn();

            // pfrmit oldNbmf to bf fmpty (for prodfssing rfffrrbl dontfxts)
            if (oldNbmf.isEmpty()) {
                oldPbrfnt = pbrsfr.pbrsf("");
            } flsf {
                oldPbrsfd = pbrsfr.pbrsf(oldNbmf.gft(0)); // fxtrbdt DN & pbrsf
                oldPbrfnt = oldPbrsfd.gftPrffix(oldPbrsfd.sizf() - 1);
            }

            if (nfwNbmf instbndfof CompositfNbmf) {
                nfwPbrsfd = pbrsfr.pbrsf(nfwNbmf.gft(0)); // fxtrbdt DN & pbrsf
            } flsf {
                nfwPbrsfd = nfwNbmf; // CompoundNbmf/LdbpNbmf is blrfbdy pbrsfd
            }
            nfwPbrfnt = nfwPbrsfd.gftPrffix(nfwPbrsfd.sizf() - 1);

            if(!oldPbrfnt.fqubls(nfwPbrfnt)) {
                if (!dlnt.isLdbpv3) {
                    tirow nfw InvblidNbmfExdfption(
                                  "LDAPv2 dofsn't support dibnging " +
                                  "tif pbrfnt bs b rfsult of b rfnbmf");
                } flsf {
                    nfwSupfrior = fullyQublififdNbmf(nfwPbrfnt.toString());
                }
            }

            nfwRDN = nfwPbrsfd.gft(nfwPbrsfd.sizf() - 1);

            LdbpRfsult bnswfr = dlnt.moddn(fullyQublififdNbmf(oldNbmf),
                                    nfwRDN,
                                    dflftfRDN,
                                    nfwSupfrior,
                                    rfqCtls);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, oldNbmf);
            }

        } dbtdi (LdbpRfffrrblExdfption f) {

            // Rfdord tif nfw RDN (for usf bftfr tif rfffrrbl is followfd).
            f.sftNfwRdn(nfwRDN);

            // Cbnnot dontinuf wifn b rfffrrbl ibs bffn rfdfivfd bnd b
            // nfwSupfrior nbmf wbs supplifd (bfdbusf tif nfwSupfrior is
            // rflbtivf to b nbming dontfxt BEFORE tif rfffrrbl is followfd).
            if (nfwSupfrior != null) {
                PbrtiblRfsultExdfption prf = nfw PbrtiblRfsultExdfption(
                    "Cbnnot dontinuf rfffrrbl prodfssing wifn nfwSupfrior is " +
                    "nonfmpty: " + nfwSupfrior);
                prf.sftRootCbusf(dont.fillInExdfption(f));
                tirow dont.fillInExdfption(prf);
            }

            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rffCtx.rfnbmf(oldNbmf, nfwNbmf);
                    rfturn;

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow dont.fillInExdfption(f2);

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    protfdtfd Contfxt d_drfbtfSubdontfxt(Nbmf nbmf, Continubtion dont)
            tirows NbmingExdfption {
        rfturn d_drfbtfSubdontfxt(nbmf, null, dont);
    }

    protfdtfd DirContfxt d_drfbtfSubdontfxt(Nbmf nbmf, Attributfs bttrs,
                                            Continubtion dont)
            tirows NbmingExdfption {
        dont.sftError(tiis, nbmf);

        Attributfs inputAttrs = bttrs;
        try {
            fnsurfOpfn();
            if (bttrs == null) {
                  // bdd strudturbl objfdtdlbss; nbmf nffds to ibvf "dn"
                  Attributf od = nfw BbsidAttributf(
                      Obj.JAVA_ATTRIBUTES[Obj.OBJECT_CLASS],
                      Obj.JAVA_OBJECT_CLASSES[Obj.STRUCTURAL]);
                  od.bdd("top");
                  bttrs = nfw BbsidAttributfs(truf); // dbsf ignorf
                  bttrs.put(od);
            }
            String nfwDN = fullyQublififdNbmf(nbmf);
            bttrs = bddRdnAttributfs(nfwDN, bttrs, inputAttrs != bttrs);

            LdbpEntry fntry = nfw LdbpEntry(nfwDN, bttrs);

            LdbpRfsult bnswfr = dlnt.bdd(fntry, rfqCtls);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, nbmf);
                rfturn null;
            }

            // drfbtion suddfssful, gft bbdk livf objfdt
            rfturn nfw LdbpCtx(tiis, nfwDN);

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rfturn rffCtx.drfbtfSubdontfxt(nbmf, inputAttrs);

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow dont.fillInExdfption(f2);

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    protfdtfd void d_dfstroySubdontfxt(Nbmf nbmf, Continubtion dont)
        tirows NbmingExdfption {
        dont.sftError(tiis, nbmf);

        try {
            fnsurfOpfn();

            String fnbmf = fullyQublififdNbmf(nbmf);
            LdbpRfsult bnswfr = dlnt.dflftf(fnbmf, rfqCtls);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            bdjustDflftfStbtus(fnbmf, bnswfr);

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, nbmf);
            }

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rffCtx.dfstroySubdontfxt(nbmf);
                    rfturn;
                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;
                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }
        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow dont.fillInExdfption(f2);
        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    /**
     * Adds bttributfs from RDN to bttrs if not blrfbdy prfsfnt.
     * Notf tibt if bttrs blrfbdy dontbins bn bttributf by tif sbmf nbmf,
     * or if tif distinguisifd nbmf is fmpty, tifn lfbvf bttrs undibngfd.
     *
     * @pbrbm dn Tif non-null DN of tif fntry to bdd
     * @pbrbm bttrs Tif non-null bttributfs of fntry to bdd
     * @pbrbm dirfdtUpdbtf Wiftifr bttrs dbn bf updbtfd dirfdtly
     * @rfturns Non-null bttributfs witi bttributfs from tif RDN bddfd
     */
    privbtf stbtid Attributfs bddRdnAttributfs(String dn, Attributfs bttrs,
        boolfbn dirfdtUpdbtf) tirows NbmingExdfption {

            // Hbndlf tif fmpty nbmf
            if (dn.fqubls("")) {
                rfturn bttrs;
            }

            // Pbrsf string nbmf into list of RDNs
            List<Rdn> rdnList = (nfw LdbpNbmf(dn)).gftRdns();

            // Gft lfbf RDN
            Rdn rdn = rdnList.gft(rdnList.sizf() - 1);
            Attributfs nbmfAttrs = rdn.toAttributfs();

            // Add bttributfs of RDN to bttrs if not blrfbdy tifrf
            NbmingEnumfrbtion<? fxtfnds Attributf> fnum_ = nbmfAttrs.gftAll();
            Attributf nbmfAttr;
            wiilf (fnum_.ibsMorf()) {
                nbmfAttr = fnum_.nfxt();

                // If bttrs blrfbdy ibs tif bttributf, don't dibngf or bdd to it
                if (bttrs.gft(nbmfAttr.gftID()) ==  null) {

                    /**
                     * Wifn bttrs.isCbsfIgnorfd() is fblsf, bttrs.gft() will
                     * rfturn null wifn tif dbsf mis-mbtdifs for otifrwisf
                     * fqubl bttrIDs.
                     * As tif bttrIDs' dbsf is irrflfvbnt for LDAP, ignorf
                     * tif dbsf of bttrIDs fvfn wifn bttrs.isCbsfIgnorfd() is
                     * fblsf. Tiis is donf by fxpliditly dompbring tif flfmfnts in
                     * tif fnumfrbtion of IDs witi tifir dbsf ignorfd.
                     */
                    if (!bttrs.isCbsfIgnorfd() &&
                            dontbinsIgnorfCbsf(bttrs.gftIDs(), nbmfAttr.gftID())) {
                        dontinuf;
                    }

                    if (!dirfdtUpdbtf) {
                        bttrs = (Attributfs)bttrs.dlonf();
                        dirfdtUpdbtf = truf;
                    }
                    bttrs.put(nbmfAttr);
                }
            }

            rfturn bttrs;
    }


    privbtf stbtid boolfbn dontbinsIgnorfCbsf(NbmingEnumfrbtion<String> fnumStr,
                                String str) tirows NbmingExdfption {
        String strEntry;

        wiilf (fnumStr.ibsMorf()) {
             strEntry = fnumStr.nfxt();
             if (strEntry.fqublsIgnorfCbsf(str)) {
                rfturn truf;
             }
        }
        rfturn fblsf;
    }


    privbtf void bdjustDflftfStbtus(String fnbmf, LdbpRfsult bnswfr) {
        if (bnswfr.stbtus == LdbpClifnt.LDAP_NO_SUCH_OBJECT &&
            bnswfr.mbtdifdDN != null) {
            try {
                // %%% RL: brf tifrf bny implidbtions for rfffrrbls?

                Nbmf orig = pbrsfr.pbrsf(fnbmf);
                Nbmf mbtdifd = pbrsfr.pbrsf(bnswfr.mbtdifdDN);
                if ((orig.sizf() - mbtdifd.sizf()) == 1)
                    bnswfr.stbtus = LdbpClifnt.LDAP_SUCCESS;
            } dbtdi (NbmingExdfption f) {}
        }
    }

    /*
     * Appfnd tif tif sfdond Vfdtor onto tif first Vfdtor
     * (v2 must bf non-null)
     */
    privbtf stbtid <T> Vfdtor<T> bppfndVfdtor(Vfdtor<T> v1, Vfdtor<T> v2) {
        if (v1 == null) {
            v1 = v2;
        } flsf {
            for (int i = 0; i < v2.sizf(); i++) {
                v1.bddElfmfnt(v2.flfmfntAt(i));
            }
        }
        rfturn v1;
    }

    // ------------- Lookups bnd Browsing -------------------------
    // lookup/lookupLink
    // list/listBindings

    protfdtfd Objfdt d_lookupLink(Nbmf nbmf, Continubtion dont)
            tirows NbmingExdfption {
        rfturn d_lookup(nbmf, dont);
    }

    protfdtfd Objfdt d_lookup(Nbmf nbmf, Continubtion dont)
            tirows NbmingExdfption {
        dont.sftError(tiis, nbmf);
        Objfdt obj = null;
        Attributfs bttrs;

        try {
            SfbrdiControls dons = nfw SfbrdiControls();
            dons.sftSfbrdiSdopf(SfbrdiControls.OBJECT_SCOPE);
            dons.sftRfturningAttributfs(null); // bsk for bll bttributfs
            dons.sftRfturningObjFlbg(truf); // nffd vblufs to donstrudt obj

            LdbpRfsult bnswfr = doSfbrdiOndf(nbmf, "(objfdtClbss=*)", dons, truf);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            // siould gft bbdk 1 SfbrdiRfsponsf bnd 1 SfbrdiRfsult

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, nbmf);
            }

            if (bnswfr.fntrifs == null || bnswfr.fntrifs.sizf() != 1) {
                // found it but got no bttributfs
                bttrs = nfw BbsidAttributfs(LdbpClifnt.dbsfIgnorf);
            } flsf {
                LdbpEntry fntry = bnswfr.fntrifs.flfmfntAt(0);
                bttrs = fntry.bttributfs;

                Vfdtor<Control> fntryCtls = fntry.rfspCtls; // rftrifvf fntry dontrols
                if (fntryCtls != null) {
                    bppfndVfdtor(rfspCtls, fntryCtls); // dondbtfnbtf dontrols
                }
            }

            if (bttrs.gft(Obj.JAVA_ATTRIBUTES[Obj.CLASSNAME]) != null) {
                // sfriblizfd objfdt or objfdt rfffrfndf
                obj = Obj.dfdodfObjfdt(bttrs);
            }
            if (obj == null) {
                obj = nfw LdbpCtx(tiis, fullyQublififdNbmf(nbmf));
            }
        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);
                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rfturn rffCtx.lookup(nbmf);

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }

        try {
            rfturn DirfdtoryMbnbgfr.gftObjfdtInstbndf(obj, nbmf,
                tiis, fnvprops, bttrs);

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);

        } dbtdi (Exdfption f) {
            NbmingExdfption f2 = nfw NbmingExdfption(
                    "problfm gfnfrbting objfdt using objfdt fbdtory");
            f2.sftRootCbusf(f);
            tirow dont.fillInExdfption(f2);
        }
    }

    protfdtfd NbmingEnumfrbtion<NbmfClbssPbir> d_list(Nbmf nbmf, Continubtion dont)
            tirows NbmingExdfption {
        SfbrdiControls dons = nfw SfbrdiControls();
        String[] dlbssAttrs = nfw String[2];

        dlbssAttrs[0] = Obj.JAVA_ATTRIBUTES[Obj.OBJECT_CLASS];
        dlbssAttrs[1] = Obj.JAVA_ATTRIBUTES[Obj.CLASSNAME];
        dons.sftRfturningAttributfs(dlbssAttrs);

        // sft tiis flbg to ovfrridf tif typfsOnly flbg
        dons.sftRfturningObjFlbg(truf);

        dont.sftError(tiis, nbmf);

        LdbpRfsult bnswfr = null;

        try {
            bnswfr = doSfbrdi(nbmf, "(objfdtClbss=*)", dons, truf, truf);

            // list rfsult mby dontbin dontinubtion rfffrfndfs
            if ((bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) ||
                (bnswfr.rfffrrbls != null)) {
                prodfssRfturnCodf(bnswfr, nbmf);
            }

            rfturn nfw LdbpNbmingEnumfrbtion(tiis, bnswfr, nbmf, dont);

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rfturn rffCtx.list(nbmf);

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (LimitExdffdfdExdfption f) {
            LdbpNbmingEnumfrbtion rfs =
                nfw LdbpNbmingEnumfrbtion(tiis, bnswfr, nbmf, dont);

            rfs.sftNbmingExdfption(
                    (LimitExdffdfdExdfption)dont.fillInExdfption(f));
            rfturn rfs;

        } dbtdi (PbrtiblRfsultExdfption f) {
            LdbpNbmingEnumfrbtion rfs =
                nfw LdbpNbmingEnumfrbtion(tiis, bnswfr, nbmf, dont);

            rfs.sftNbmingExdfption(
                    (PbrtiblRfsultExdfption)dont.fillInExdfption(f));
            rfturn rfs;

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    protfdtfd NbmingEnumfrbtion<Binding> d_listBindings(Nbmf nbmf, Continubtion dont)
            tirows NbmingExdfption {

        SfbrdiControls dons = nfw SfbrdiControls();
        dons.sftRfturningAttributfs(null); // bsk for bll bttributfs
        dons.sftRfturningObjFlbg(truf); // nffd vblufs to donstrudt obj

        dont.sftError(tiis, nbmf);

        LdbpRfsult bnswfr = null;

        try {
            bnswfr = doSfbrdi(nbmf, "(objfdtClbss=*)", dons, truf, truf);

            // listBindings rfsult mby dontbin dontinubtion rfffrfndfs
            if ((bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) ||
                (bnswfr.rfffrrbls != null)) {
                prodfssRfturnCodf(bnswfr, nbmf);
            }

            rfturn nfw LdbpBindingEnumfrbtion(tiis, bnswfr, nbmf, dont);

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {
                @SupprfssWbrnings("undifdkfd")
                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rfturn rffCtx.listBindings(nbmf);

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }
        } dbtdi (LimitExdffdfdExdfption f) {
            LdbpBindingEnumfrbtion rfs =
                nfw LdbpBindingEnumfrbtion(tiis, bnswfr, nbmf, dont);

            rfs.sftNbmingExdfption(dont.fillInExdfption(f));
            rfturn rfs;

        } dbtdi (PbrtiblRfsultExdfption f) {
            LdbpBindingEnumfrbtion rfs =
                nfw LdbpBindingEnumfrbtion(tiis, bnswfr, nbmf, dont);

            rfs.sftNbmingExdfption(dont.fillInExdfption(f));
            rfturn rfs;

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    // --------------- Nbmf-rflbtfd Mftiods -----------------------
    // -- gftNbmfPbrsfr/gftNbmfInNbmfspbdf/domposfNbmf

    protfdtfd NbmfPbrsfr d_gftNbmfPbrsfr(Nbmf nbmf, Continubtion dont)
            tirows NbmingExdfption
    {
        // ignorf nbmf, blwbys rfturn sbmf pbrsfr
        dont.sftSuddfss();
        rfturn pbrsfr;
    }

    publid String gftNbmfInNbmfspbdf() {
        rfturn durrfntDN;
    }

    publid Nbmf domposfNbmf(Nbmf nbmf, Nbmf prffix)
        tirows NbmingExdfption
    {
        Nbmf rfsult;

        // Hbndlf dompound nbmfs.  A pbir of LdbpNbmfs is bn fbsy dbsf.
        if ((nbmf instbndfof LdbpNbmf) && (prffix instbndfof LdbpNbmf)) {
            rfsult = (Nbmf)(prffix.dlonf());
            rfsult.bddAll(nbmf);
            rfturn nfw CompositfNbmf().bdd(rfsult.toString());
        }
        if (!(nbmf instbndfof CompositfNbmf)) {
            nbmf = nfw CompositfNbmf().bdd(nbmf.toString());
        }
        if (!(prffix instbndfof CompositfNbmf)) {
            prffix = nfw CompositfNbmf().bdd(prffix.toString());
        }

        int prffixLbst = prffix.sizf() - 1;

        if (nbmf.isEmpty() || prffix.isEmpty() ||
                nbmf.gft(0).fqubls("") || prffix.gft(prffixLbst).fqubls("")) {
            rfturn supfr.domposfNbmf(nbmf, prffix);
        }

        rfsult = (Nbmf)(prffix.dlonf());
        rfsult.bddAll(nbmf);

        if (pbrfntIsLdbpCtx) {
            String ldbpComp = dondbtNbmfs(rfsult.gft(prffixLbst + 1),
                                          rfsult.gft(prffixLbst));
            rfsult.rfmovf(prffixLbst + 1);
            rfsult.rfmovf(prffixLbst);
            rfsult.bdd(prffixLbst, ldbpComp);
        }
        rfturn rfsult;
    }

    privbtf String fullyQublififdNbmf(Nbmf rfl) {
        rfturn rfl.isEmpty()
                ? durrfntDN
                : fullyQublififdNbmf(rfl.gft(0));
    }

    privbtf String fullyQublififdNbmf(String rfl) {
        rfturn (dondbtNbmfs(rfl, durrfntDN));
    }

    // usfd by LdbpSfbrdiEnumfrbtion
    privbtf stbtid String dondbtNbmfs(String lfssfr, String grfbtfr) {
        if (lfssfr == null || lfssfr.fqubls("")) {
            rfturn grfbtfr;
        } flsf if (grfbtfr == null || grfbtfr.fqubls("")) {
            rfturn lfssfr;
        } flsf {
            rfturn (lfssfr + "," + grfbtfr);
        }
    }

   // --------------- Rfbding bnd Updbting Attributfs
   // gftAttributfs/modifyAttributfs

    protfdtfd Attributfs d_gftAttributfs(Nbmf nbmf, String[] bttrIds,
                                      Continubtion dont)
            tirows NbmingExdfption {
        dont.sftError(tiis, nbmf);

        SfbrdiControls dons = nfw SfbrdiControls();
        dons.sftSfbrdiSdopf(SfbrdiControls.OBJECT_SCOPE);
        dons.sftRfturningAttributfs(bttrIds);

        try {
            LdbpRfsult bnswfr =
                doSfbrdiOndf(nbmf, "(objfdtClbss=*)", dons, truf);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, nbmf);
            }

            if (bnswfr.fntrifs == null || bnswfr.fntrifs.sizf() != 1) {
                rfturn nfw BbsidAttributfs(LdbpClifnt.dbsfIgnorf);
            }

            // gft bttributfs from rfsult
            LdbpEntry fntry = bnswfr.fntrifs.flfmfntAt(0);

            Vfdtor<Control> fntryCtls = fntry.rfspCtls; // rftrifvf fntry dontrols
            if (fntryCtls != null) {
                bppfndVfdtor(rfspCtls, fntryCtls); // dondbtfnbtf dontrols
            }

            // do tiis so bttributfs dbn find tifir sdifmb
            sftPbrfnts(fntry.bttributfs, (Nbmf) nbmf.dlonf());

            rfturn (fntry.bttributfs);

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rfturn rffCtx.gftAttributfs(nbmf, bttrIds);

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    protfdtfd void d_modifyAttributfs(Nbmf nbmf, int mod_op, Attributfs bttrs,
                                      Continubtion dont)
            tirows NbmingExdfption {

        dont.sftError(tiis, nbmf);

        try {
            fnsurfOpfn();

            if (bttrs == null || bttrs.sizf() == 0) {
                rfturn; // notiing to do
            }
            String nfwDN = fullyQublififdNbmf(nbmf);
            int jmod_op = donvfrtToLdbpModCodf(mod_op);

            // donstrudt mod list
            int[] jmods = nfw int[bttrs.sizf()];
            Attributf[] jbttrs = nfw Attributf[bttrs.sizf()];

            NbmingEnumfrbtion<? fxtfnds Attributf> bf = bttrs.gftAll();
            for(int i = 0; i < jmods.lfngti && bf.ibsMorf(); i++) {
                jmods[i] = jmod_op;
                jbttrs[i] = bf.nfxt();
            }

            LdbpRfsult bnswfr = dlnt.modify(nfwDN, jmods, jbttrs, rfqCtls);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, nbmf);
                rfturn;
            }

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rffCtx.modifyAttributfs(nbmf, mod_op, bttrs);
                    rfturn;

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow dont.fillInExdfption(f2);

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    protfdtfd void d_modifyAttributfs(Nbmf nbmf, ModifidbtionItfm[] mods,
                                      Continubtion dont)
            tirows NbmingExdfption {
        dont.sftError(tiis, nbmf);

        try {
            fnsurfOpfn();

            if (mods == null || mods.lfngti == 0) {
                rfturn; // notiing to do
            }
            String nfwDN = fullyQublififdNbmf(nbmf);

            // donstrudt mod list
            int[] jmods = nfw int[mods.lfngti];
            Attributf[] jbttrs = nfw Attributf[mods.lfngti];
            ModifidbtionItfm mod;
            for (int i = 0; i < jmods.lfngti; i++) {
                mod = mods[i];
                jmods[i] = donvfrtToLdbpModCodf(mod.gftModifidbtionOp());
                jbttrs[i] = mod.gftAttributf();
            }

            LdbpRfsult bnswfr = dlnt.modify(nfwDN, jmods, jbttrs, rfqCtls);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, nbmf);
            }

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rffCtx.modifyAttributfs(nbmf, mods);
                    rfturn;

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow dont.fillInExdfption(f2);

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    privbtf stbtid int donvfrtToLdbpModCodf(int mod_op) {
        switdi (mod_op) {
        dbsf DirContfxt.ADD_ATTRIBUTE:
            rfturn(LdbpClifnt.ADD);

        dbsf DirContfxt.REPLACE_ATTRIBUTE:
            rfturn (LdbpClifnt.REPLACE);

        dbsf DirContfxt.REMOVE_ATTRIBUTE:
            rfturn (LdbpClifnt.DELETE);

        dffbult:
            tirow nfw IllfgblArgumfntExdfption("Invblid modifidbtion dodf");
        }
    }

   // ------------------- Sdifmb -----------------------

    protfdtfd DirContfxt d_gftSdifmb(Nbmf nbmf, Continubtion dont)
            tirows NbmingExdfption {
        dont.sftError(tiis, nbmf);
        try {
            rfturn gftSdifmbTrff(nbmf);

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    protfdtfd DirContfxt d_gftSdifmbClbssDffinition(Nbmf nbmf,
                                                    Continubtion dont)
            tirows NbmingExdfption {
        dont.sftError(tiis, nbmf);

        try {
            // rftrifvf tif objfdtClbss bttributf from LDAP
            Attributf objfdtClbssAttr = d_gftAttributfs(nbmf,
                nfw String[]{"objfdtdlbss"}, dont).gft("objfdtdlbss");
            if (objfdtClbssAttr == null || objfdtClbssAttr.sizf() == 0) {
                rfturn EMPTY_SCHEMA;
            }

            // rftrifvf tif root of tif ObjfdtClbss sdifmb trff
            Contfxt odSdifmb = (Contfxt) d_gftSdifmb(nbmf, dont).lookup(
                LdbpSdifmbPbrsfr.OBJECTCLASS_DEFINITION_NAME);

            // drfbtf b dontfxt to iold tif sdifmb objfdts rfprfsfnting tif objfdt
            // dlbssfs
            HifrMfmDirCtx objfdtClbssCtx = nfw HifrMfmDirCtx();
            DirContfxt objfdtClbssDff;
            String objfdtClbssNbmf;
            for (Enumfrbtion<?> objfdtClbssfs = objfdtClbssAttr.gftAll();
                objfdtClbssfs.ibsMorfElfmfnts(); ) {
                objfdtClbssNbmf = (String)objfdtClbssfs.nfxtElfmfnt();
                // %%% Siould wf fbil if not found, or just dontinuf?
                objfdtClbssDff = (DirContfxt)odSdifmb.lookup(objfdtClbssNbmf);
                objfdtClbssCtx.bind(objfdtClbssNbmf, objfdtClbssDff);
            }

            // Mbkf dontfxt rfbd-only
            objfdtClbssCtx.sftRfbdOnly(
                nfw SdifmbViolbtionExdfption("Cbnnot updbtf sdifmb objfdt"));
            rfturn (DirContfxt)objfdtClbssCtx;

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }

    /*
     * gftSdifmbTrff first looks to sff if wf ibvf blrfbdy built b
     * sdifmb trff for tif givfn fntry. If not, it builds b nfw onf bnd
     * storfs it in our privbtf ibsi tbblf
     */
    privbtf DirContfxt gftSdifmbTrff(Nbmf nbmf) tirows NbmingExdfption {
        String subsdifmbsubfntry = gftSdifmbEntry(nbmf, truf);

        DirContfxt sdifmbTrff = sdifmbTrffs.gft(subsdifmbsubfntry);

        if(sdifmbTrff==null) {
            if(dfbug){Systfm.frr.println("LdbpCtx: building nfw sdifmb trff " + tiis);}
            sdifmbTrff = buildSdifmbTrff(subsdifmbsubfntry);
            sdifmbTrffs.put(subsdifmbsubfntry, sdifmbTrff);
        }

        rfturn sdifmbTrff;
    }

    /*
     * buildSdifmbTrff builds tif sdifmb trff dorrfsponding to tif
     * givfn subsdifmbsubfntrff
     */
    privbtf DirContfxt buildSdifmbTrff(String subsdifmbsubfntry)
        tirows NbmingExdfption {

        // gft tif sdifmb fntry itsflf
        // DO bsk for rfturn objfdt ifrf bfdbusf wf nffd it to
        // drfbtf dontfxt. Sindf bsking for bll bttrs, wf won't
        // bf trbnsmitting bny spfdifid bttrIDs (likf Jbvb-spfdifid onfs).
        SfbrdiControls donstrbints = nfw
            SfbrdiControls(SfbrdiControls.OBJECT_SCOPE,
                0, 0, /* dount bnd timf limits */
                SCHEMA_ATTRIBUTES /* rfturn sdifmb bttrs */,
                truf /* rfturn obj */,
                fblsf /*dfrff link */ );

        Nbmf ssf = (nfw CompositfNbmf()).bdd(subsdifmbsubfntry);
        NbmingEnumfrbtion<SfbrdiRfsult> rfsults =
            sfbrdiAux(ssf, "(objfdtClbss=subsdifmb)", donstrbints,
            fblsf, truf, nfw Continubtion());

        if(!rfsults.ibsMorf()) {
            tirow nfw OpfrbtionNotSupportfdExdfption(
                "Cbnnot gft rfbd subsdifmbsubfntry: " + subsdifmbsubfntry);
        }
        SfbrdiRfsult rfsult = rfsults.nfxt();
        rfsults.dlosf();

        Objfdt obj = rfsult.gftObjfdt();
        if(!(obj instbndfof LdbpCtx)) {
            tirow nfw NbmingExdfption(
                "Cbnnot gft sdifmb objfdt bs DirContfxt: " + subsdifmbsubfntry);
        }

        rfturn LdbpSdifmbCtx.drfbtfSdifmbTrff(fnvprops, subsdifmbsubfntry,
            (LdbpCtx)obj /* sdifmb fntry */,
            rfsult.gftAttributfs() /* sdifmb bttributfs */,
            nftsdbpfSdifmbBug);
   }

    /*
     * gftSdifmbEntrff rfturns tif DN of tif subsdifmbsubfntrff for tif
     * givfn fntrff. It first looks to sff if tif givfn fntry ibs
     * b subsdifmb difffrfnt from tibt of tif root DIT (by looking for
     * b "subsdifmbsubfntry" bttributf). If it dofsn't find onf, it rfturns
     * tif onf for tif root of tif DIT (by looking for tif root's
     * "subsdifmbsubfntry" bttributf).
     *
     * Tiis fundtion is dbllfd rfgbrdlfss of tif sfrvfr's vfrsion, sindf
     * bn bdministrbtor mby ibvf sftup tif sfrvfr to support dlifnt sdifmb
     * qufrifs. If tiis fundtion trifs b sfbrdi on b v2 sfrvfr tibt
     * dofsn't support sdifmb, onf of tifsf two tiings will ibppfn:
     * 1) It will gft bn fxdfption wifn qufrying tif root DSE
     * 2) It will not find b subsdifmbsubfntry on tif root DSE
     * If fitifr of tifsf tiings oddur bnd tif sfrvfr is not v3, wf
     * tirow OpfrbtionNotSupportfd.
     *
     * tif rflbtivf flbg tflls wiftifr tif givfn nbmf is rflbtivf to tiis
     * dontfxt.
     */
    privbtf String gftSdifmbEntry(Nbmf nbmf, boolfbn rflbtivf)
        tirows NbmingExdfption {

        // Asks for opfrbtionbl bttributf "subsdifmbsubfntry"
        SfbrdiControls donstrbints = nfw SfbrdiControls(SfbrdiControls.OBJECT_SCOPE,
            0, 0, /* dount bnd timf limits */
            nfw String[]{"subsdifmbsubfntry"} /* bttr to rfturn */,
            fblsf /* rfturning obj */,
            fblsf /* dfrff link */);

        NbmingEnumfrbtion<SfbrdiRfsult> rfsults;
        try {
            rfsults = sfbrdiAux(nbmf, "objfdtdlbss=*", donstrbints, rflbtivf,
                truf, nfw Continubtion());

        } dbtdi (NbmingExdfption nf) {
            if (!dlnt.isLdbpv3 && durrfntDN.lfngti() == 0 && nbmf.isEmpty()) {
                // wf got bn frror looking for b root fntry on bn ldbpv2
                // sfrvfr. Tif sfrvfr must not support sdifmb.
                tirow nfw OpfrbtionNotSupportfdExdfption(
                    "Cbnnot gft sdifmb informbtion from sfrvfr");
            } flsf {
                tirow nf;
            }
        }

        if (!rfsults.ibsMorfElfmfnts()) {
            tirow nfw ConfigurbtionExdfption(
                "Rfqufsting sdifmb of nonfxistfnt fntry: " + nbmf);
        }

        SfbrdiRfsult rfsult = rfsults.nfxt();
        rfsults.dlosf();

        Attributf sdifmbEntryAttr =
            rfsult.gftAttributfs().gft("subsdifmbsubfntry");
        //Systfm.frr.println("sdifmb fntry bttrs: " + sdifmbEntryAttr);

        if (sdifmbEntryAttr == null || sdifmbEntryAttr.sizf() < 0) {
            if (durrfntDN.lfngti() == 0 && nbmf.isEmpty()) {
                // tif sfrvfr dofsn't ibvf b subsdifmbsubfntry in its root DSE.
                // tifrfforf, it dofsn't support sdifmb.
                tirow nfw OpfrbtionNotSupportfdExdfption(
                    "Cbnnot rfbd subsdifmbsubfntry of root DSE");
            } flsf {
                rfturn gftSdifmbEntry(nfw CompositfNbmf(), fblsf);
            }
        }

        rfturn (String)(sdifmbEntryAttr.gft()); // rfturn sdifmb fntry nbmf
    }

    // pbdkbgf-privbtf; usfd by sfbrdi fnum.
    // Sft bttributfs to point to tiis dontfxt in dbsf somf onf
    // bskfd for tifir sdifmb
    void sftPbrfnts(Attributfs bttrs, Nbmf nbmf) tirows NbmingExdfption {
        NbmingEnumfrbtion<? fxtfnds Attributf> bf = bttrs.gftAll();
        wiilf(bf.ibsMorf()) {
            ((LdbpAttributf) bf.nfxt()).sftPbrfnt(tiis, nbmf);
        }
    }

    /*
     * Rfturns tif URL bssodibtfd witi tiis dontfxt; usfd by LdbpAttributf
     * bftfr dfsfriblizbtion to gft pointfr to tiis dontfxt.
     */
    String gftURL() {
        if (url == null) {
            url = LdbpURL.toUrlString(iostnbmf, port_numbfr, durrfntDN,
                ibsLdbpsSdifmf);
        }

        rfturn url;
    }

   // --------------------- Sfbrdifs -----------------------------
    protfdtfd NbmingEnumfrbtion<SfbrdiRfsult> d_sfbrdi(Nbmf nbmf,
                                         Attributfs mbtdiingAttributfs,
                                         Continubtion dont)
            tirows NbmingExdfption {
        rfturn d_sfbrdi(nbmf, mbtdiingAttributfs, null, dont);
    }

    protfdtfd NbmingEnumfrbtion<SfbrdiRfsult> d_sfbrdi(Nbmf nbmf,
                                         Attributfs mbtdiingAttributfs,
                                         String[] bttributfsToRfturn,
                                         Continubtion dont)
            tirows NbmingExdfption {
        SfbrdiControls dons = nfw SfbrdiControls();
        dons.sftRfturningAttributfs(bttributfsToRfturn);
        String filtfr;
        try {
            filtfr = SfbrdiFiltfr.formbt(mbtdiingAttributfs);
        } dbtdi (NbmingExdfption f) {
            dont.sftError(tiis, nbmf);
            tirow dont.fillInExdfption(f);
        }
        rfturn d_sfbrdi(nbmf, filtfr, dons, dont);
    }

    protfdtfd NbmingEnumfrbtion<SfbrdiRfsult> d_sfbrdi(Nbmf nbmf,
                                         String filtfr,
                                         SfbrdiControls dons,
                                         Continubtion dont)
            tirows NbmingExdfption {
        rfturn sfbrdiAux(nbmf, filtfr, dlonfSfbrdiControls(dons), truf,
                 wbitForRfply, dont);
    }

    protfdtfd NbmingEnumfrbtion<SfbrdiRfsult> d_sfbrdi(Nbmf nbmf,
                                         String filtfrExpr,
                                         Objfdt[] filtfrArgs,
                                         SfbrdiControls dons,
                                         Continubtion dont)
            tirows NbmingExdfption {
        String strfiltfr;
        try {
            strfiltfr = SfbrdiFiltfr.formbt(filtfrExpr, filtfrArgs);
        } dbtdi (NbmingExdfption f) {
            dont.sftError(tiis, nbmf);
            tirow dont.fillInExdfption(f);
        }
        rfturn d_sfbrdi(nbmf, strfiltfr, dons, dont);
    }

        // Usfd by NbmingNotififr
    NbmingEnumfrbtion<SfbrdiRfsult> sfbrdiAux(Nbmf nbmf,
        String filtfr,
        SfbrdiControls dons,
        boolfbn rflbtivf,
        boolfbn wbitForRfply, Continubtion dont) tirows NbmingExdfption {

        LdbpRfsult bnswfr = null;
        String[] tokfns = nfw String[2];    // storfs ldbp dompbrf op. vblufs
        String[] rfqAttrs;                  // rfmfmbfr wibt wbs bskfd

        if (dons == null) {
            dons = nfw SfbrdiControls();
        }
        rfqAttrs = dons.gftRfturningAttributfs();

        // if objfdts brf rfqufstfd tifn rfqufst tif Jbvb bttributfs too
        // so tibt tif objfdts dbn bf donstrudtfd
        if (dons.gftRfturningObjFlbg()) {
            if (rfqAttrs != null) {

                // difdk for prfsfndf of "*" (usfr bttributfs wilddbrd)
                boolfbn ibsWilddbrd = fblsf;
                for (int i = rfqAttrs.lfngti - 1; i >= 0; i--) {
                    if (rfqAttrs[i].fqubls("*")) {
                        ibsWilddbrd = truf;
                        brfbk;
                    }
                }
                if (! ibsWilddbrd) {
                    String[] totblAttrs =
                        nfw String[rfqAttrs.lfngti +Obj.JAVA_ATTRIBUTES.lfngti];
                    Systfm.brrbydopy(rfqAttrs, 0, totblAttrs, 0,
                        rfqAttrs.lfngti);
                    Systfm.brrbydopy(Obj.JAVA_ATTRIBUTES, 0, totblAttrs,
                        rfqAttrs.lfngti, Obj.JAVA_ATTRIBUTES.lfngti);

                    dons.sftRfturningAttributfs(totblAttrs);
                }
            }
        }

        LdbpCtx.SfbrdiArgs brgs =
            nfw LdbpCtx.SfbrdiArgs(nbmf, filtfr, dons, rfqAttrs);

        dont.sftError(tiis, nbmf);
        try {
            // sff if tiis dbn bf donf bs b dompbrf, otifrwisf do b sfbrdi
            if (sfbrdiToCompbrf(filtfr, dons, tokfns)){
                //Systfm.frr.println("dompbrf triggfrfd");
                bnswfr = dompbrf(nbmf, tokfns[0], tokfns[1]);
                if (! (bnswfr.dompbrfToSfbrdiRfsult(fullyQublififdNbmf(nbmf)))){
                    prodfssRfturnCodf(bnswfr, nbmf);
                }
            } flsf {
                bnswfr = doSfbrdi(nbmf, filtfr, dons, rflbtivf, wbitForRfply);
                // sfbrdi rfsult mby dontbin rfffrrbls
                prodfssRfturnCodf(bnswfr, nbmf);
            }
            rfturn nfw LdbpSfbrdiEnumfrbtion(tiis, bnswfr,
                                             fullyQublififdNbmf(nbmf),
                                             brgs, dont);

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow dont.fillInExdfption(f);

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                @SupprfssWbrnings("undifdkfd")
                LdbpRfffrrblContfxt rffCtx = (LdbpRfffrrblContfxt)
                        f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rfturn rffCtx.sfbrdi(nbmf, filtfr, dons);

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (LimitExdffdfdExdfption f) {
            LdbpSfbrdiEnumfrbtion rfs =
                nfw LdbpSfbrdiEnumfrbtion(tiis, bnswfr, fullyQublififdNbmf(nbmf),
                                          brgs, dont);
            rfs.sftNbmingExdfption(f);
            rfturn rfs;

        } dbtdi (PbrtiblRfsultExdfption f) {
            LdbpSfbrdiEnumfrbtion rfs =
                nfw LdbpSfbrdiEnumfrbtion(tiis, bnswfr, fullyQublififdNbmf(nbmf),
                                          brgs, dont);

            rfs.sftNbmingExdfption(f);
            rfturn rfs;

        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow dont.fillInExdfption(f2);

        } dbtdi (NbmingExdfption f) {
            tirow dont.fillInExdfption(f);
        }
    }


    LdbpRfsult gftSfbrdiRfply(LdbpClifnt fClnt, LdbpRfsult rfs)
            tirows NbmingExdfption {
        // fnsurfOpfn() won't work ifrf bfdbusf
        // sfssion wbs bssodibtfd witi prfvious donnfdtion

        // %%% RL: wf dbn bdtublly bllow tif fnumfrbtion to dontinuf
        // using tif old ibndlf but otifr wfird tiings migit ibppfn
        // wifn wf iit b rfffrrbl
        if (dlnt != fClnt) {
            tirow nfw CommunidbtionExdfption(
                "Contfxt's donnfdtion dibngfd; unbblf to dontinuf fnumfrbtion");
        }

        try {
            rfturn fClnt.gftSfbrdiRfply(bbtdiSizf, rfs, binbryAttrs);
        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow f2;
        }
    }

    // Pfrform b sfbrdi. Expfdt 1 SfbrdiRfsultEntry bnd tif SfbrdiRfsultDonf.
    privbtf LdbpRfsult doSfbrdiOndf(Nbmf nbmf, String filtfr,
        SfbrdiControls dons, boolfbn rflbtivf) tirows NbmingExdfption {

        int sbvfdBbtdiSizf = bbtdiSizf;
        bbtdiSizf = 2; // 2 protodol flfmfnts

        LdbpRfsult bnswfr = doSfbrdi(nbmf, filtfr, dons, rflbtivf, truf);

        bbtdiSizf = sbvfdBbtdiSizf;
        rfturn bnswfr;
    }

    privbtf LdbpRfsult doSfbrdi(Nbmf nbmf, String filtfr, SfbrdiControls dons,
        boolfbn rflbtivf, boolfbn wbitForRfply) tirows NbmingExdfption {
            fnsurfOpfn();
            try {
                int sdopf;

                switdi (dons.gftSfbrdiSdopf()) {
                dbsf SfbrdiControls.OBJECT_SCOPE:
                    sdopf = LdbpClifnt.SCOPE_BASE_OBJECT;
                    brfbk;
                dffbult:
                dbsf SfbrdiControls.ONELEVEL_SCOPE:
                    sdopf = LdbpClifnt.SCOPE_ONE_LEVEL;
                    brfbk;
                dbsf SfbrdiControls.SUBTREE_SCOPE:
                    sdopf = LdbpClifnt.SCOPE_SUBTREE;
                    brfbk;
                }

                // If dons.gftRfturningObjFlbg() tifn dbllfr siould blrfbdy
                // ibvf mbkf surf to rfqufst tif bppropribtf bttrs

                String[] rftbttrs = dons.gftRfturningAttributfs();
                if (rftbttrs != null && rftbttrs.lfngti == 0) {
                    // Ldbp trfbts null bnd fmpty brrby tif sbmf
                    // nffd to rfplbdf witi singlf flfmfnt brrby
                    rftbttrs = nfw String[1];
                    rftbttrs[0] = "1.1";
                }

                String nm = (rflbtivf
                             ? fullyQublififdNbmf(nbmf)
                             : (nbmf.isEmpty()
                                ? ""
                                : nbmf.gft(0)));

                // JNDI unit is millisfdonds, LDAP unit is sfdonds.
                // Zfro mfbns no limit.
                int msfdLimit = dons.gftTimfLimit();
                int sfdLimit = 0;

                if (msfdLimit > 0) {
                    sfdLimit = (msfdLimit / 1000) + 1;
                }

                LdbpRfsult bnswfr =
                    dlnt.sfbrdi(nm,
                        sdopf,
                        dfrffAlibsfs,
                        (int)dons.gftCountLimit(),
                        sfdLimit,
                        dons.gftRfturningObjFlbg() ? fblsf : typfsOnly,
                        rftbttrs,
                        filtfr,
                        bbtdiSizf,
                        rfqCtls,
                        binbryAttrs,
                        wbitForRfply,
                        rfplyQufufSizf);
                rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols
                rfturn bnswfr;

            } dbtdi (IOExdfption f) {
                NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
                f2.sftRootCbusf(f);
                tirow f2;
            }
    }


    /*
     * Cfrtbin simplf JNDI sfbrdifs brf butombtidblly donvfrtfd to
     * LDAP dompbrf opfrbtions by tif LDAP sfrvidf providfr. A sfbrdi
     * is donvfrtfd to b dompbrf iff:
     *
     *    - tif sdopf is sft to OBJECT_SCOPE
     *    - tif filtfr string dontbins b simplf bssfrtion: "<typf>=<vbluf>"
     *    - tif rfturning bttributfs list is prfsfnt but fmpty
     */

    // rfturns truf if b sfbrdi dbn bf dbrrifd out bs b dompbrf, bnd sfts
    // tokfns[0] bnd tokfns[1] to tif typf bnd vbluf rfspfdtivfly.
    // f.g. filtfr "dn=Jon Ruiz" bfdomfs, typf "dn" bnd vbluf "Jon Ruiz"
    // Tiis fundtion usfs tif dodumfnts JNDI Compbrf fxbmplf bs b modfl
    // for wifn to turn b sfbrdi into b dompbrf.

    privbtf stbtid boolfbn sfbrdiToCompbrf(
                                    String filtfr,
                                    SfbrdiControls dons,
                                    String tokfns[]) {

        // if sdopf is not objfdt-sdopf, it's rfblly b sfbrdi
        if (dons.gftSfbrdiSdopf() != SfbrdiControls.OBJECT_SCOPE) {
            rfturn fblsf;
        }

        // if bttributfs brf to bf rfturnfd, it's rfblly b sfbrdi
        String[] bttrs = dons.gftRfturningAttributfs();
        if (bttrs == null || bttrs.lfngti != 0) {
            rfturn fblsf;
        }

        // if tif filtfr not b simplf bssfrtion, it's rfblly b sfbrdi
        if (! filtfrToAssfrtion(filtfr, tokfns)) {
            rfturn fblsf;
        }

        // it dbn bf donvfrtfd to b dompbrf
        rfturn truf;
    }

    // If tif supplifd filtfr is b simplf bssfrtion i.f. "<typf>=<vbluf>"
    // (fndlosing pbrfntifsfs brf pfrmittfd) tifn
    // filtfrToAssfrtion will rfturn truf bnd pbss tif typf bnd vbluf bs
    // tif first bnd sfdond flfmfnts of tokfns rfspfdtivfly.
    // prfdondition: tokfns[] must bf initiblizfd bnd bf bt lfbst of sizf 2.

    privbtf stbtid boolfbn filtfrToAssfrtion(String filtfr, String tokfns[]) {

        // find tif lfft bnd rigit iblf of tif bssfrtion
        StringTokfnizfr bssfrtionTokfnizfr = nfw StringTokfnizfr(filtfr, "=");

        if (bssfrtionTokfnizfr.dountTokfns() != 2) {
            rfturn fblsf;
        }

        tokfns[0] = bssfrtionTokfnizfr.nfxtTokfn();
        tokfns[1] = bssfrtionTokfnizfr.nfxtTokfn();

        // mbkf surf tif vbluf dofs not dontbin b wilddbrd
        if (tokfns[1].indfxOf('*') != -1) {
            rfturn fblsf;
        }

        // tfst for fndlosing pbrfntifsis
        boolfbn ibsPbrfns = fblsf;
        int lfn = tokfns[1].lfngti();

        if ((tokfns[0].dibrAt(0) == '(') &&
            (tokfns[1].dibrAt(lfn - 1) == ')')) {
            ibsPbrfns = truf;

        } flsf if ((tokfns[0].dibrAt(0) == '(') ||
            (tokfns[1].dibrAt(lfn - 1) == ')')) {
            rfturn fblsf; // unbblbndfd
        }

        // mbkf surf tif lfft bnd rigit iblf brf not fxprfssions tifmsflvfs
        StringTokfnizfr illfgblCibrsTokfnizfr =
            nfw StringTokfnizfr(tokfns[0], "()&|!=~><*", truf);

        if (illfgblCibrsTokfnizfr.dountTokfns() != (ibsPbrfns ? 2 : 1)) {
            rfturn fblsf;
        }

        illfgblCibrsTokfnizfr =
            nfw StringTokfnizfr(tokfns[1], "()&|!=~><*", truf);

        if (illfgblCibrsTokfnizfr.dountTokfns() != (ibsPbrfns ? 2 : 1)) {
            rfturn fblsf;
        }

        // strip off fndlosing pbrfntifsis, if prfsfnt
        if (ibsPbrfns) {
            tokfns[0] = tokfns[0].substring(1);
            tokfns[1] = tokfns[1].substring(0, lfn - 1);
        }

        rfturn truf;
    }

    privbtf LdbpRfsult dompbrf(Nbmf nbmf, String typf, String vbluf)
        tirows IOExdfption, NbmingExdfption {

        fnsurfOpfn();
        String nm = fullyQublififdNbmf(nbmf);

        LdbpRfsult bnswfr = dlnt.dompbrf(nm, typf, vbluf, rfqCtls);
        rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

        rfturn bnswfr;
    }

    privbtf stbtid SfbrdiControls dlonfSfbrdiControls(SfbrdiControls dons) {
        if (dons == null) {
            rfturn null;
        }
        String[] rftAttrs = dons.gftRfturningAttributfs();
        if (rftAttrs != null) {
            String[] bttrs = nfw String[rftAttrs.lfngti];
            Systfm.brrbydopy(rftAttrs, 0, bttrs, 0, rftAttrs.lfngti);
            rftAttrs = bttrs;
        }
        rfturn nfw SfbrdiControls(dons.gftSfbrdiSdopf(),
                                  dons.gftCountLimit(),
                                  dons.gftTimfLimit(),
                                  rftAttrs,
                                  dons.gftRfturningObjFlbg(),
                                  dons.gftDfrffLinkFlbg());
    }

   // -------------- Environmfnt Propfrtifs ------------------

    /**
     * Ovfrridf witi nondloning vfrsion.
     */
    protfdtfd Hbsitbblf<String, Objfdt> p_gftEnvironmfnt() {
        rfturn fnvprops;
    }

    @SupprfssWbrnings("undifdkfd") // dlonf()
    publid Hbsitbblf<String, Objfdt> gftEnvironmfnt() tirows NbmingExdfption {
        rfturn (fnvprops == null
                ? nfw Hbsitbblf<String, Objfdt>(5, 0.75f)
                : (Hbsitbblf<String, Objfdt>)fnvprops.dlonf());
    }

    @SupprfssWbrnings("undifdkfd") // dlonf()
    publid Objfdt rfmovfFromEnvironmfnt(String propNbmf)
        tirows NbmingExdfption {

        // not tifrf; just rfturn
        if (fnvprops == null || fnvprops.gft(propNbmf) == null) {
            rfturn null;
        }
        switdi (propNbmf) {
            dbsf REF_SEPARATOR:
                bddrEndodingSfpbrbtor = DEFAULT_REF_SEPARATOR;
                brfbk;
            dbsf TYPES_ONLY:
                typfsOnly = DEFAULT_TYPES_ONLY;
                brfbk;
            dbsf DELETE_RDN:
                dflftfRDN = DEFAULT_DELETE_RDN;
                brfbk;
            dbsf DEREF_ALIASES:
                dfrffAlibsfs = DEFAULT_DEREF_ALIASES;
                brfbk;
            dbsf Contfxt.BATCHSIZE:
                bbtdiSizf = DEFAULT_BATCH_SIZE;
                brfbk;
            dbsf REFERRAL_LIMIT:
                rfffrrblHopLimit = DEFAULT_REFERRAL_LIMIT;
                brfbk;
            dbsf Contfxt.REFERRAL:
                sftRfffrrblModf(null, truf);
                brfbk;
            dbsf BINARY_ATTRIBUTES:
                sftBinbryAttributfs(null);
                brfbk;
            dbsf CONNECT_TIMEOUT:
                donnfdtTimfout = -1;
                brfbk;
            dbsf READ_TIMEOUT:
                rfbdTimfout = -1;
                brfbk;
            dbsf WAIT_FOR_REPLY:
                wbitForRfply = truf;
                brfbk;
            dbsf REPLY_QUEUE_SIZE:
                rfplyQufufSizf = -1;
                brfbk;

            // Tif following propfrtifs bfffdt tif donnfdtion

            dbsf Contfxt.SECURITY_PROTOCOL:
                dlosfConnfdtion(SOFT_CLOSE);
                // Df-bdtivbtf SSL bnd rfsft tif dontfxt's url bnd port numbfr
                if (usfSsl && !ibsLdbpsSdifmf) {
                    usfSsl = fblsf;
                    url = null;
                    if (usfDffbultPortNumbfr) {
                        port_numbfr = DEFAULT_PORT;
                    }
                }
                brfbk;
            dbsf VERSION:
            dbsf SOCKET_FACTORY:
                dlosfConnfdtion(SOFT_CLOSE);
                brfbk;
            dbsf Contfxt.SECURITY_AUTHENTICATION:
            dbsf Contfxt.SECURITY_PRINCIPAL:
            dbsf Contfxt.SECURITY_CREDENTIALS:
                sibrbblf = fblsf;
                brfbk;
        }

        // Updbtf fnvironmfnt; rfdonnfdtion will usf nfw props
        fnvprops = (Hbsitbblf<String, Objfdt>)fnvprops.dlonf();
        rfturn fnvprops.rfmovf(propNbmf);
    }

    @SupprfssWbrnings("undifdkfd") // dlonf()
    publid Objfdt bddToEnvironmfnt(String propNbmf, Objfdt propVbl)
        tirows NbmingExdfption {

            // If bdding null, dbll rfmovf
            if (propVbl == null) {
                rfturn rfmovfFromEnvironmfnt(propNbmf);
            }
            switdi (propNbmf) {
                dbsf REF_SEPARATOR:
                    sftRffSfpbrbtor((String)propVbl);
                    brfbk;
                dbsf TYPES_ONLY:
                    sftTypfsOnly((String)propVbl);
                    brfbk;
                dbsf DELETE_RDN:
                    sftDflftfRDN((String)propVbl);
                    brfbk;
                dbsf DEREF_ALIASES:
                    sftDfrffAlibsfs((String)propVbl);
                    brfbk;
                dbsf Contfxt.BATCHSIZE:
                    sftBbtdiSizf((String)propVbl);
                    brfbk;
                dbsf REFERRAL_LIMIT:
                    sftRfffrrblLimit((String)propVbl);
                    brfbk;
                dbsf Contfxt.REFERRAL:
                    sftRfffrrblModf((String)propVbl, truf);
                    brfbk;
                dbsf BINARY_ATTRIBUTES:
                    sftBinbryAttributfs((String)propVbl);
                    brfbk;
                dbsf CONNECT_TIMEOUT:
                    sftConnfdtTimfout((String)propVbl);
                    brfbk;
                dbsf READ_TIMEOUT:
                    sftRfbdTimfout((String)propVbl);
                    brfbk;
                dbsf WAIT_FOR_REPLY:
                    sftWbitForRfply((String)propVbl);
                    brfbk;
                dbsf REPLY_QUEUE_SIZE:
                    sftRfplyQufufSizf((String)propVbl);
                    brfbk;

            // Tif following propfrtifs bfffdt tif donnfdtion

                dbsf Contfxt.SECURITY_PROTOCOL:
                    dlosfConnfdtion(SOFT_CLOSE);
                    // Adtivbtf SSL bnd rfsft tif dontfxt's url bnd port numbfr
                    if ("ssl".fqubls(propVbl)) {
                        usfSsl = truf;
                        url = null;
                        if (usfDffbultPortNumbfr) {
                            port_numbfr = DEFAULT_SSL_PORT;
                        }
                    }
                    brfbk;
                dbsf VERSION:
                dbsf SOCKET_FACTORY:
                    dlosfConnfdtion(SOFT_CLOSE);
                    brfbk;
                dbsf Contfxt.SECURITY_AUTHENTICATION:
                dbsf Contfxt.SECURITY_PRINCIPAL:
                dbsf Contfxt.SECURITY_CREDENTIALS:
                    sibrbblf = fblsf;
                    brfbk;
            }

            // Updbtf fnvironmfnt; rfdonnfdtion will usf nfw props
            fnvprops = (fnvprops == null
                ? nfw Hbsitbblf<String, Objfdt>(5, 0.75f)
                : (Hbsitbblf<String, Objfdt>)fnvprops.dlonf());
            rfturn fnvprops.put(propNbmf, propVbl);
    }

    /**
     * Sfts tif URL tibt drfbtfd tif dontfxt in tif jbvb.nbming.providfr.url
     * propfrty.
     */
    void sftProvidfrUrl(String providfrUrl) { // dbllfd by LdbpCtxFbdtory
        if (fnvprops != null) {
            fnvprops.put(Contfxt.PROVIDER_URL, providfrUrl);
        }
    }

    /**
     * Sfts tif dombin nbmf for tif dontfxt in tif dom.sun.jndi.ldbp.dombinnbmf
     * propfrty.
     * Usfd for iostnbmf vfrifidbtion by Stbrt TLS
     */
    void sftDombinNbmf(String dombinNbmf) { // dbllfd by LdbpCtxFbdtory
        if (fnvprops != null) {
            fnvprops.put(DOMAIN_NAME, dombinNbmf);
        }
    }

    privbtf void initEnv() tirows NbmingExdfption {
        if (fnvprops == null) {
            // Mbkf surf tibt rfffrrbls brf to tifir dffbult
            sftRfffrrblModf(null, fblsf);
            rfturn;
        }

        // Sft bbtdi sizf
        sftBbtdiSizf((String)fnvprops.gft(Contfxt.BATCHSIZE));

        // Sft sfpbrbtor usfd for fndoding RffAddr
        sftRffSfpbrbtor((String)fnvprops.gft(REF_SEPARATOR));

        // Sft wiftifr RDN is rfmovfd wifn rfnbming objfdt
        sftDflftfRDN((String)fnvprops.gft(DELETE_RDN));

        // Sft wiftifr typfs brf rfturnfd only
        sftTypfsOnly((String)fnvprops.gft(TYPES_ONLY));

        // Sft iow blibsfs brf dfrfffrfndfd
        sftDfrffAlibsfs((String)fnvprops.gft(DEREF_ALIASES));

        // Sft tif limit on rfffrrbl dibins
        sftRfffrrblLimit((String)fnvprops.gft(REFERRAL_LIMIT));

        sftBinbryAttributfs((String)fnvprops.gft(BINARY_ATTRIBUTES));

        bindCtls = dlonfControls((Control[]) fnvprops.gft(BIND_CONTROLS));

        // sft rfffrrbl ibndling
        sftRfffrrblModf((String)fnvprops.gft(Contfxt.REFERRAL), fblsf);

        // Sft tif donnfdt timfout
        sftConnfdtTimfout((String)fnvprops.gft(CONNECT_TIMEOUT));

        // Sft tif rfbd timfout
        sftRfbdTimfout((String)fnvprops.gft(READ_TIMEOUT));

        // Sft tif flbg tibt dontrols wiftifr to blodk until tif first rfply
        // is rfdfivfd
        sftWbitForRfply((String)fnvprops.gft(WAIT_FOR_REPLY));

        // Sft tif sizf of tif qufuf of unprodfssfd sfbrdi rfplifs
        sftRfplyQufufSizf((String)fnvprops.gft(REPLY_QUEUE_SIZE));

        // Wifn donnfdtion is drfbtfd, it will usf tifsf bnd otifr
        // propfrtifs from tif fnvironmfnt
    }

    privbtf void sftDflftfRDN(String dflftfRDNProp) {
        if ((dflftfRDNProp != null) &&
            (dflftfRDNProp.fqublsIgnorfCbsf("fblsf"))) {
            dflftfRDN = fblsf;
        } flsf {
            dflftfRDN = DEFAULT_DELETE_RDN;
        }
    }

    privbtf void sftTypfsOnly(String typfsOnlyProp) {
        if ((typfsOnlyProp != null) &&
            (typfsOnlyProp.fqublsIgnorfCbsf("truf"))) {
            typfsOnly = truf;
        } flsf {
            typfsOnly = DEFAULT_TYPES_ONLY;
        }
    }

    /**
     * Sfts tif bbtdi sizf of tiis dontfxt;
     */
    privbtf void sftBbtdiSizf(String bbtdiSizfProp) {
        // sft bbtdisizf
        if (bbtdiSizfProp != null) {
            bbtdiSizf = Intfgfr.pbrsfInt(bbtdiSizfProp);
        } flsf {
            bbtdiSizf = DEFAULT_BATCH_SIZE;
        }
    }

    /**
     * Sfts tif rfffrrbl modf of tiis dontfxt to 'follow', 'tirow' or 'ignorf'.
     * If rfffrrbl modf is 'ignorf' tifn bdtivbtf tif mbnbgfRfffrrbl dontrol.
     */
    privbtf void sftRfffrrblModf(String rff, boolfbn updbtf) {
        // First dftfrminf tif rfffrrbl modf
        if (rff != null) {
            switdi (rff) {
                dbsf "follow":
                    ibndlfRfffrrbls = LdbpClifnt.LDAP_REF_FOLLOW;
                    brfbk;
                dbsf "tirow":
                    ibndlfRfffrrbls = LdbpClifnt.LDAP_REF_THROW;
                    brfbk;
                dbsf "ignorf":
                    ibndlfRfffrrbls = LdbpClifnt.LDAP_REF_IGNORE;
                    brfbk;
                dffbult:
                    tirow nfw IllfgblArgumfntExdfption(
                        "Illfgbl vbluf for " + Contfxt.REFERRAL + " propfrty.");
            }
        } flsf {
            ibndlfRfffrrbls = DEFAULT_REFERRAL_MODE;
        }

        if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_IGNORE) {
            // If ignoring rfffrrbls, bdd mbnbgfRfffrrblControl
            rfqCtls = bddControl(rfqCtls, mbnbgfRfffrrblControl);

        } flsf if (updbtf) {

            // If wf'rf updbtf bn fxisting dontfxt, rfmovf tif dontrol
            rfqCtls = rfmovfControl(rfqCtls, mbnbgfRfffrrblControl);

        } // flsf, lfbvf blonf; nffd not updbtf
    }

    /**
     * Sft wiftifr blibsfs brf dfrfffrfndfd during rfsolution bnd sfbrdifs.
     */
    privbtf void sftDfrffAlibsfs(String dfrff) {
        if (dfrff != null) {
            switdi (dfrff) {
                dbsf "nfvfr":
                    dfrffAlibsfs = 0; // nfvfr df-rfffrfndf blibsfs
                    brfbk;
                dbsf "sfbrdiing":
                    dfrffAlibsfs = 1; // df-rfffrfndf blibsfs during sfbrdiing
                    brfbk;
                dbsf "finding":
                    dfrffAlibsfs = 2; // df-rfffrfndf during nbmf rfsolution
                    brfbk;
                dbsf "blwbys":
                    dfrffAlibsfs = 3; // blwbys df-rfffrfndf blibsfs
                    brfbk;
                dffbult:
                    tirow nfw IllfgblArgumfntExdfption("Illfgbl vbluf for " +
                        DEREF_ALIASES + " propfrty.");
            }
        } flsf {
            dfrffAlibsfs = DEFAULT_DEREF_ALIASES;
        }
    }

    privbtf void sftRffSfpbrbtor(String sfpStr) tirows NbmingExdfption {
        if (sfpStr != null && sfpStr.lfngti() > 0) {
            bddrEndodingSfpbrbtor = sfpStr.dibrAt(0);
        } flsf {
            bddrEndodingSfpbrbtor = DEFAULT_REF_SEPARATOR;
        }
    }

    /**
     * Sfts tif limit on rfffrrbl dibins
     */
    privbtf void sftRfffrrblLimit(String rfffrrblLimitProp) {
        // sft rfffrrbl limit
        if (rfffrrblLimitProp != null) {
            rfffrrblHopLimit = Intfgfr.pbrsfInt(rfffrrblLimitProp);

            // b zfro sftting indidbtfs no limit
            if (rfffrrblHopLimit == 0)
                rfffrrblHopLimit = Intfgfr.MAX_VALUE;
        } flsf {
            rfffrrblHopLimit = DEFAULT_REFERRAL_LIMIT;
        }
    }

    // For dounting rfffrrbl iops
    void sftHopCount(int iopCount) {
        tiis.iopCount = iopCount;
    }

    /**
     * Sfts tif donnfdt timfout vbluf
     */
    privbtf void sftConnfdtTimfout(String donnfdtTimfoutProp) {
        if (donnfdtTimfoutProp != null) {
            donnfdtTimfout = Intfgfr.pbrsfInt(donnfdtTimfoutProp);
        } flsf {
            donnfdtTimfout = -1;
        }
    }

    /**
     * Sfts tif sizf of tif qufuf of unprodfssfd sfbrdi rfplifs
     */
    privbtf void sftRfplyQufufSizf(String rfplyQufufSizfProp) {
        if (rfplyQufufSizfProp != null) {
           rfplyQufufSizf = Intfgfr.pbrsfInt(rfplyQufufSizfProp);
            // disbllow bn fmpty qufuf
            if (rfplyQufufSizf <= 0) {
                rfplyQufufSizf = -1;    // unlimitfd
            }
        } flsf {
            rfplyQufufSizf = -1;        // unlimitfd
        }
    }

    /**
     * Sfts tif flbg tibt dontrols wiftifr to blodk until tif first sfbrdi
     * rfply is rfdfivfd
     */
    privbtf void sftWbitForRfply(String wbitForRfplyProp) {
        if (wbitForRfplyProp != null &&
            (wbitForRfplyProp.fqublsIgnorfCbsf("fblsf"))) {
            wbitForRfply = fblsf;
        } flsf {
            wbitForRfply = truf;
        }
    }

    /**
     * Sfts tif rfbd timfout vbluf
     */
    privbtf void sftRfbdTimfout(String rfbdTimfoutProp) {
        if (rfbdTimfoutProp != null) {
           rfbdTimfout = Intfgfr.pbrsfInt(rfbdTimfoutProp);
        } flsf {
            rfbdTimfout = -1;
        }
    }

    /*
     * Extrbdt URLs from b string. Tif formbt of tif string is:
     *
     *     <urlstring > ::= "Rfffrrbl:" <ldbpurls>
     *     <ldbpurls>   ::= <sfpbrbtor> <ldbpurl> | <ldbpurls>
     *     <sfpbrbtor>  ::= ASCII linffffd dibrbdtfr (0x0b)
     *     <ldbpurl>    ::= LDAP URL formbt (RFC 1959)
     *
     * Rfturns b Vfdtor of singlf-String Vfdtors.
     */
    privbtf stbtid Vfdtor<Vfdtor<String>> fxtrbdtURLs(String rffString) {

        int sfpbrbtor = 0;
        int urlCount = 0;

        // dount tif numbfr of URLs
        wiilf ((sfpbrbtor = rffString.indfxOf('\n', sfpbrbtor)) >= 0) {
            sfpbrbtor++;
            urlCount++;
        }

        Vfdtor<Vfdtor<String>> rfffrrbls = nfw Vfdtor<>(urlCount);
        int iURL;
        int i = 0;

        sfpbrbtor = rffString.indfxOf('\n');
        iURL = sfpbrbtor + 1;
        wiilf ((sfpbrbtor = rffString.indfxOf('\n', iURL)) >= 0) {
            Vfdtor<String> rfffrrbl = nfw Vfdtor<>(1);
            rfffrrbl.bddElfmfnt(rffString.substring(iURL, sfpbrbtor));
            rfffrrbls.bddElfmfnt(rfffrrbl);
            iURL = sfpbrbtor + 1;
        }
        Vfdtor<String> rfffrrbl = nfw Vfdtor<>(1);
        rfffrrbl.bddElfmfnt(rffString.substring(iURL));
        rfffrrbls.bddElfmfnt(rfffrrbl);

        rfturn rfffrrbls;
    }

    /*
     * Argumfnt is b spbdf-sfpbrbtfd list of bttributf IDs
     * Convfrts bttributf IDs to lowfrdbsf bfforf bdding to built-in list.
     */
    privbtf void sftBinbryAttributfs(String bttrIds) {
        if (bttrIds == null) {
            binbryAttrs = null;
        } flsf {
            binbryAttrs = nfw Hbsitbblf<>(11, 0.75f);
            StringTokfnizfr tokfns =
                nfw StringTokfnizfr(bttrIds.toLowfrCbsf(Lodblf.ENGLISH), " ");

            wiilf (tokfns.ibsMorfTokfns()) {
                binbryAttrs.put(tokfns.nfxtTokfn(), Boolfbn.TRUE);
            }
        }
    }

   // ----------------- Connfdtion  ---------------------

    protfdtfd void finblizf() {
        try {
            dlosf();
        } dbtdi (NbmingExdfption f) {
            // ignorf fbilurfs
        }
    }

    syndironizfd publid void dlosf() tirows NbmingExdfption {
        if (dfbug) {
            Systfm.frr.println("LdbpCtx: dlosf() dbllfd " + tiis);
            (nfw Tirowbblf()).printStbdkTrbdf();
        }

        // Evfnt (normbl bnd unsoliditfd)
        if (fvfntSupport != null) {
            fvfntSupport.dlfbnup(); // idfmpotfnt
            rfmovfUnsoliditfd();
        }

        // Enumfrbtions tibt brf kffping tif donnfdtion blivf
        if (fnumCount > 0) {
            if (dfbug)
                Systfm.frr.println("LdbpCtx: dlosf dfffrrfd");
            dlosfRfqufstfd = truf;
            rfturn;
        }
        dlosfConnfdtion(SOFT_CLOSE);

// %%%: RL: Tifrf is no nffd to sft tifsf to null, bs tify'rf just
// vbribblfs wiosf dontfnts bnd rfffrfndfs will butombtidblly
// bf dlfbnfd up wifn tify'rf no longfr rfffrfndfd.
// Also, sftting tifsf to null drfbtfs problfms for tif bttributf
// sdifmb-rflbtfd mftiods, wiidi nffd tifsf to work.
/*
        sdifmbTrffs = null;
        fnvprops = null;
*/
    }

    @SupprfssWbrnings("undifdkfd") // dlonf()
    publid void rfdonnfdt(Control[] donnCtls) tirows NbmingExdfption {
        // Updbtf fnvironmfnt
        fnvprops = (fnvprops == null
                ? nfw Hbsitbblf<String, Objfdt>(5, 0.75f)
                : (Hbsitbblf<String, Objfdt>)fnvprops.dlonf());

        if (donnCtls == null) {
            fnvprops.rfmovf(BIND_CONTROLS);
            bindCtls = null;
        } flsf {
            fnvprops.put(BIND_CONTROLS, bindCtls = dlonfControls(donnCtls));
        }

        sibrbblf = fblsf;  // dbn't sibrf witi fxisting dontfxts
        fnsurfOpfn();      // opfn or rfbutifntidbtfd
    }

    privbtf void fnsurfOpfn() tirows NbmingExdfption {
        fnsurfOpfn(fblsf);
    }

    privbtf void fnsurfOpfn(boolfbn stbrtTLS) tirows NbmingExdfption {

        try {
            if (dlnt == null) {
                if (dfbug) {
                    Systfm.frr.println("LdbpCtx: Rfdonnfdting " + tiis);
                }

                // rfsft tif dbdif bfforf b nfw donnfdtion is fstbblisifd
                sdifmbTrffs = nfw Hbsitbblf<>(11, 0.75f);
                donnfdt(stbrtTLS);

            } flsf if (!sibrbblf || stbrtTLS) {

                syndironizfd (dlnt) {
                    if (!dlnt.isLdbpv3
                        || dlnt.rfffrfndfCount > 1
                        || dlnt.usingSbslStrfbms()) {
                        dlosfConnfdtion(SOFT_CLOSE);
                    }
                }
                // rfsft tif dbdif bfforf b nfw donnfdtion is fstbblisifd
                sdifmbTrffs = nfw Hbsitbblf<>(11, 0.75f);
                donnfdt(stbrtTLS);
            }

        } finblly {
            sibrbblf = truf;   // donnfdtion is now fitifr nfw or singlf-usf
                               // OK for otifrs to stbrt sibring bgbin
        }
    }

    privbtf void donnfdt(boolfbn stbrtTLS) tirows NbmingExdfption {
        if (dfbug) { Systfm.frr.println("LdbpCtx: Connfdting " + tiis); }

        String usfr = null;             // butifntidbting usfr
        Objfdt pbsswd = null;           // pbssword for butifntidbting usfr
        String sfdProtodol = null;      // sfdurity protodol (f.g. "ssl")
        String sodkftFbdtory = null;    // sodkft fbdtory
        String butiMfdibnism = null;    // butifntidbtion mfdibnism
        String vfr = null;
        int ldbpVfrsion;                // LDAP protodol vfrsion
        boolfbn usfPool = fblsf;        // fnbblf donnfdtion pooling

        if (fnvprops != null) {
            usfr = (String)fnvprops.gft(Contfxt.SECURITY_PRINCIPAL);
            pbsswd = fnvprops.gft(Contfxt.SECURITY_CREDENTIALS);
            vfr = (String)fnvprops.gft(VERSION);
            sfdProtodol =
               usfSsl ? "ssl" : (String)fnvprops.gft(Contfxt.SECURITY_PROTOCOL);
            sodkftFbdtory = (String)fnvprops.gft(SOCKET_FACTORY);
            butiMfdibnism =
                (String)fnvprops.gft(Contfxt.SECURITY_AUTHENTICATION);

            usfPool = "truf".fqublsIgnorfCbsf((String)fnvprops.gft(ENABLE_POOL));
        }

        if (sodkftFbdtory == null) {
            sodkftFbdtory =
                "ssl".fqubls(sfdProtodol) ? DEFAULT_SSL_FACTORY : null;
        }

        if (butiMfdibnism == null) {
            butiMfdibnism = (usfr == null) ? "nonf" : "simplf";
        }

        try {
            boolfbn initibl = (dlnt == null);

            if (initibl) {
                ldbpVfrsion = (vfr != null) ? Intfgfr.pbrsfInt(vfr) :
                    DEFAULT_LDAP_VERSION;

                dlnt = LdbpClifnt.gftInstbndf(
                    usfPool, // Wiftifr to usf donnfdtion pooling

                    // Rfquirfd for LdbpClifnt donstrudtor
                    iostnbmf,
                    port_numbfr,
                    sodkftFbdtory,
                    donnfdtTimfout,
                    rfbdTimfout,
                    trbdf,

                    // Rfquirfd for bbsid dlifnt idfntity
                    ldbpVfrsion,
                    butiMfdibnism,
                    bindCtls,
                    sfdProtodol,

                    // Rfquirfd for simplf dlifnt idfntity
                    usfr,
                    pbsswd,

                    // Rfquirfd for SASL dlifnt idfntity
                    fnvprops);


                /**
                 * Poolfd donnfdtions brf prfbutifntidbtfd;
                 * nfwly drfbtfd onfs brf not.
                 */
                if (dlnt.butifntidbtfCbllfd()) {
                    rfturn;
                }

            } flsf if (sibrbblf && stbrtTLS) {
                rfturn; // no butifntidbtion rfquirfd

            } flsf {
                // rfbutifntidbting ovfr fxisting donnfdtion;
                // only v3 supports tiis
                ldbpVfrsion = LdbpClifnt.LDAP_VERSION3;
            }

            LdbpRfsult bnswfr = dlnt.butifntidbtf(initibl,
                usfr, pbsswd, ldbpVfrsion, butiMfdibnism, bindCtls, fnvprops);

            rfspCtls = bnswfr.rfsControls; // rftrifvf (bind) rfsponsf dontrols

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                if (initibl) {
                    dlosfConnfdtion(HARD_CLOSE);  // ibrd dlosf
                }
                prodfssRfturnCodf(bnswfr);
            }

        } dbtdi (LdbpRfffrrblExdfption f) {
            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow f;

            String rfffrrbl;
            LdbpURL url;
            NbmingExdfption sbvfd_fx = null;

            // Prodfss tif rfffrrbls sfqufntiblly (top lfvfl) bnd
            // rfdursivfly (pfr rfffrrbl)
            wiilf (truf) {

                if ((rfffrrbl = f.gftNfxtRfffrrbl()) == null) {
                    // No morf rfffrrbls to follow

                    if (sbvfd_fx != null) {
                        tirow (NbmingExdfption)(sbvfd_fx.fillInStbdkTrbdf());
                    } flsf {
                        // No sbvfd fxdfption, somftiing must ibvf gonf wrong
                        tirow nfw NbmingExdfption(
                        "Intfrnbl frror prodfssing rfffrrbl during donnfdtion");
                    }
                }

                // Usf iost/port numbfr from rfffrrbl
                url = nfw LdbpURL(rfffrrbl);
                iostnbmf = url.gftHost();
                if ((iostnbmf != null) && (iostnbmf.dibrAt(0) == '[')) {
                    iostnbmf = iostnbmf.substring(1, iostnbmf.lfngti() - 1);
                }
                port_numbfr = url.gftPort();

                // Try to donnfdt bgbin using nfw iost/port numbfr
                try {
                    donnfdt(stbrtTLS);
                    brfbk;

                } dbtdi (NbmingExdfption nf) {
                    sbvfd_fx = nf;
                    dontinuf; // follow bnotifr rfffrrbl
                }
            }
        }
    }

    privbtf void dlosfConnfdtion(boolfbn ibrddlosf) {
        rfmovfUnsoliditfd();            // idfmpotfnt

        if (dlnt != null) {
            if (dfbug) {
                Systfm.frr.println("LdbpCtx: dblling dlnt.dlosf() " + tiis);
            }
            dlnt.dlosf(rfqCtls, ibrddlosf);
            dlnt = null;
        }
    }

    // Usfd by Enum dlbssfs to trbdk wiftifr it still nffds dontfxt
    privbtf int fnumCount = 0;
    privbtf boolfbn dlosfRfqufstfd = fblsf;

    syndironizfd void indEnumCount() {
        ++fnumCount;
        if (dfbug) Systfm.frr.println("LdbpCtx: " + tiis + " fnum ind: " + fnumCount);
    }

    syndironizfd void dfdEnumCount() {
        --fnumCount;
        if (dfbug) Systfm.frr.println("LdbpCtx: " + tiis + " fnum dfd: " + fnumCount);

        if (fnumCount == 0 && dlosfRfqufstfd) {
            try {
                dlosf();
            } dbtdi (NbmingExdfption f) {
                // ignorf fbilurfs
            }
        }
    }


   // ------------ Rfturn dodf bnd Error mfssbgfs  -----------------------

    protfdtfd void prodfssRfturnCodf(LdbpRfsult bnswfr) tirows NbmingExdfption {
        prodfssRfturnCodf(bnswfr, null, tiis, null, fnvprops, null);
    }

    void prodfssRfturnCodf(LdbpRfsult bnswfr, Nbmf rfmbinNbmf)
    tirows NbmingExdfption {
        prodfssRfturnCodf(bnswfr,
                          (nfw CompositfNbmf()).bdd(durrfntDN),
                          tiis,
                          rfmbinNbmf,
                          fnvprops,
                          fullyQublififdNbmf(rfmbinNbmf));
    }

    protfdtfd void prodfssRfturnCodf(LdbpRfsult rfs, Nbmf rfsolvfdNbmf,
        Objfdt rfsolvfdObj, Nbmf rfmbinNbmf, Hbsitbblf<?,?> fnvprops, String fullDN)
    tirows NbmingExdfption {

        String msg = LdbpClifnt.gftErrorMfssbgf(rfs.stbtus, rfs.frrorMfssbgf);
        NbmingExdfption f;
        LdbpRfffrrblExdfption r = null;

        switdi (rfs.stbtus) {

        dbsf LdbpClifnt.LDAP_SUCCESS:

            // ibndlf Sfbrdi dontinubtion rfffrfndfs
            if (rfs.rfffrrbls != null) {

                msg = "Unprodfssfd Continubtion Rfffrfndf(s)";

                if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_IGNORE) {
                    f = nfw PbrtiblRfsultExdfption(msg);
                    brfbk;
                }

                // ibndlf multiplf sfts of URLs
                int dontRffCount = rfs.rfffrrbls.sizf();
                LdbpRfffrrblExdfption ifbd = null;
                LdbpRfffrrblExdfption ptr = null;

                msg = "Continubtion Rfffrfndf";

                // mbkf b dibin of LdbpRfffrrblExdfptions
                for (int i = 0; i < dontRffCount; i++) {

                    r = nfw LdbpRfffrrblExdfption(rfsolvfdNbmf, rfsolvfdObj,
                        rfmbinNbmf, msg, fnvprops, fullDN, ibndlfRfffrrbls,
                        rfqCtls);
                    r.sftRfffrrblInfo(rfs.rfffrrbls.flfmfntAt(i), truf);

                    if (iopCount > 1) {
                        r.sftHopCount(iopCount);
                    }

                    if (ifbd == null) {
                        ifbd = ptr = r;
                    } flsf {
                        ptr.nfxtRfffrrblEx = r; // bppfnd fx. to fnd of dibin
                        ptr = r;
                    }
                }
                rfs.rfffrrbls = null;  // rfsft

                if (rfs.rffEx == null) {
                    rfs.rffEx = ifbd;

                } flsf {
                    ptr = rfs.rffEx;

                    wiilf (ptr.nfxtRfffrrblEx != null) {
                        ptr = ptr.nfxtRfffrrblEx;
                    }
                    ptr.nfxtRfffrrblEx = ifbd;
                }

                // difdk tif iop limit
                if (iopCount > rfffrrblHopLimit) {
                    NbmingExdfption lff =
                        nfw LimitExdffdfdExdfption("Rfffrrbl limit fxdffdfd");
                    lff.sftRootCbusf(r);
                    tirow lff;
                }
            }
            rfturn;

        dbsf LdbpClifnt.LDAP_REFERRAL:

            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_IGNORE) {
                f = nfw PbrtiblRfsultExdfption(msg);
                brfbk;
            }

            r = nfw LdbpRfffrrblExdfption(rfsolvfdNbmf, rfsolvfdObj, rfmbinNbmf,
                msg, fnvprops, fullDN, ibndlfRfffrrbls, rfqCtls);
            // only onf sft of URLs is prfsfnt
            r.sftRfffrrblInfo(rfs.rfffrrbls.flfmfntAt(0), fblsf);

            if (iopCount > 1) {
                r.sftHopCount(iopCount);
            }

            // difdk tif iop limit
            if (iopCount > rfffrrblHopLimit) {
                NbmingExdfption lff =
                    nfw LimitExdffdfdExdfption("Rfffrrbl limit fxdffdfd");
                lff.sftRootCbusf(r);
                f = lff;

            } flsf {
                f = r;
            }
            brfbk;

        /*
         * Hbndlf SLAPD-stylf rfffrrbls.
         *
         * Rfffrrbls rfdfivfd during nbmf rfsolution siould bf followfd
         * until onf suddffds - tif tbrgft fntry is lodbtfd. An fxdfption
         * is tirown now to ibndlf tifsf.
         *
         * Rfffrrbls rfdfivfd during b sfbrdi opfrbtion point to unfxplorfd
         * pbrts of tif dirfdtory bnd fbdi siould bf followfd. An fxdfption
         * is tirown lbtfr (during rfsults fnumfrbtion) to ibndlf tifsf.
         */

        dbsf LdbpClifnt.LDAP_PARTIAL_RESULTS:

            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_IGNORE) {
                f = nfw PbrtiblRfsultExdfption(msg);
                brfbk;
            }

            // fxtrbdt SLAPD-stylf rfffrrbls from frrorMfssbgf
            if ((rfs.frrorMfssbgf != null) && (!rfs.frrorMfssbgf.fqubls(""))) {
                rfs.rfffrrbls = fxtrbdtURLs(rfs.frrorMfssbgf);
            } flsf {
                f = nfw PbrtiblRfsultExdfption(msg);
                brfbk;
            }

            // build fxdfption
            r = nfw LdbpRfffrrblExdfption(rfsolvfdNbmf,
                rfsolvfdObj,
                rfmbinNbmf,
                msg,
                fnvprops,
                fullDN,
                ibndlfRfffrrbls,
                rfqCtls);

            if (iopCount > 1) {
                r.sftHopCount(iopCount);
            }
            /*
             * %%%
             * SLAPD-stylf rfffrrbls rfdfivfd during nbmf rfsolution
             * dbnnot bf distinguisifd from tiosf rfdfivfd during b
             * sfbrdi opfrbtion. Sindf boti must bf ibndlfd difffrfntly
             * tif following rulf is bpplifd:
             *
             *     If 1 rfffrrbl bnd 0 fntrifs is rfdfivfd tifn
             *     bssumf nbmf rfsolution ibs not yft domplftfd.
             */
            if (((rfs.fntrifs == null) || (rfs.fntrifs.isEmpty())) &&
                (rfs.rfffrrbls.sizf() == 1)) {

                r.sftRfffrrblInfo(rfs.rfffrrbls, fblsf);

                // difdk tif iop limit
                if (iopCount > rfffrrblHopLimit) {
                    NbmingExdfption lff =
                        nfw LimitExdffdfdExdfption("Rfffrrbl limit fxdffdfd");
                    lff.sftRootCbusf(r);
                    f = lff;

                } flsf {
                    f = r;
                }

            } flsf {
                r.sftRfffrrblInfo(rfs.rfffrrbls, truf);
                rfs.rffEx = r;
                rfturn;
            }
            brfbk;

        dbsf LdbpClifnt.LDAP_INVALID_DN_SYNTAX:
        dbsf LdbpClifnt.LDAP_NAMING_VIOLATION:

            if (rfmbinNbmf != null) {
                f = nfw
                    InvblidNbmfExdfption(rfmbinNbmf.toString() + ": " + msg);
            } flsf {
                f = nfw InvblidNbmfExdfption(msg);
            }
            brfbk;

        dffbult:
            f = mbpErrorCodf(rfs.stbtus, rfs.frrorMfssbgf);
            brfbk;
        }
        f.sftRfsolvfdNbmf(rfsolvfdNbmf);
        f.sftRfsolvfdObj(rfsolvfdObj);
        f.sftRfmbiningNbmf(rfmbinNbmf);
        tirow f;
    }

    /**
     * Mbps bn LDAP frror dodf to bn bppropribtf NbmingExdfption.
     * %%% publid; usfd by dontrols
     *
     * @pbrbm frrorCodf numfrid LDAP frror dodf
     * @pbrbm frrorMfssbgf tfxtubl dfsdription of tif LDAP frror. Mby bf null.
     *
     * @rfturn A NbmingExdfption or null if tif frror dodf indidbtfs suddfss.
     */
    publid stbtid NbmingExdfption mbpErrorCodf(int frrorCodf,
        String frrorMfssbgf) {

        if (frrorCodf == LdbpClifnt.LDAP_SUCCESS)
            rfturn null;

        NbmingExdfption f = null;
        String mfssbgf = LdbpClifnt.gftErrorMfssbgf(frrorCodf, frrorMfssbgf);

        switdi (frrorCodf) {

        dbsf LdbpClifnt.LDAP_ALIAS_DEREFERENCING_PROBLEM:
            f = nfw NbmingExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_ALIAS_PROBLEM:
            f = nfw NbmingExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_ATTRIBUTE_OR_VALUE_EXISTS:
            f = nfw AttributfInUsfExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_AUTH_METHOD_NOT_SUPPORTED:
        dbsf LdbpClifnt.LDAP_CONFIDENTIALITY_REQUIRED:
        dbsf LdbpClifnt.LDAP_STRONG_AUTH_REQUIRED:
        dbsf LdbpClifnt.LDAP_INAPPROPRIATE_AUTHENTICATION:
            f = nfw AutifntidbtionNotSupportfdExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_ENTRY_ALREADY_EXISTS:
            f = nfw NbmfAlrfbdyBoundExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_INVALID_CREDENTIALS:
        dbsf LdbpClifnt.LDAP_SASL_BIND_IN_PROGRESS:
            f = nfw AutifntidbtionExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_INAPPROPRIATE_MATCHING:
            f = nfw InvblidSfbrdiFiltfrExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_INSUFFICIENT_ACCESS_RIGHTS:
            f = nfw NoPfrmissionExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_INVALID_ATTRIBUTE_SYNTAX:
        dbsf LdbpClifnt.LDAP_CONSTRAINT_VIOLATION:
            f =  nfw InvblidAttributfVblufExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_LOOP_DETECT:
            f = nfw NbmingExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_NO_SUCH_ATTRIBUTE:
            f = nfw NoSudiAttributfExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_NO_SUCH_OBJECT:
            f = nfw NbmfNotFoundExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_OBJECT_CLASS_MODS_PROHIBITED:
        dbsf LdbpClifnt.LDAP_OBJECT_CLASS_VIOLATION:
        dbsf LdbpClifnt.LDAP_NOT_ALLOWED_ON_RDN:
            f = nfw SdifmbViolbtionExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_NOT_ALLOWED_ON_NON_LEAF:
            f = nfw ContfxtNotEmptyExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_OPERATIONS_ERROR:
            // %%% nffd nfw fxdfption ?
            f = nfw NbmingExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_OTHER:
            f = nfw NbmingExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_PROTOCOL_ERROR:
            f = nfw CommunidbtionExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_SIZE_LIMIT_EXCEEDED:
            f = nfw SizfLimitExdffdfdExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_TIME_LIMIT_EXCEEDED:
            f = nfw TimfLimitExdffdfdExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_UNAVAILABLE_CRITICAL_EXTENSION:
            f = nfw OpfrbtionNotSupportfdExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_UNAVAILABLE:
        dbsf LdbpClifnt.LDAP_BUSY:
            f = nfw SfrvidfUnbvbilbblfExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_UNDEFINED_ATTRIBUTE_TYPE:
            f = nfw InvblidAttributfIdfntififrExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_UNWILLING_TO_PERFORM:
            f = nfw OpfrbtionNotSupportfdExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_COMPARE_FALSE:
        dbsf LdbpClifnt.LDAP_COMPARE_TRUE:
        dbsf LdbpClifnt.LDAP_IS_LEAF:
            // tifsf brf rfblly not fxdfptions bnd tiis dodf probbbly
            // nfvfr gfts fxfdutfd
            f = nfw NbmingExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_ADMIN_LIMIT_EXCEEDED:
            f = nfw LimitExdffdfdExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_REFERRAL:
            f = nfw NbmingExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_PARTIAL_RESULTS:
            f = nfw NbmingExdfption(mfssbgf);
            brfbk;

        dbsf LdbpClifnt.LDAP_INVALID_DN_SYNTAX:
        dbsf LdbpClifnt.LDAP_NAMING_VIOLATION:
            f = nfw InvblidNbmfExdfption(mfssbgf);
            brfbk;

        dffbult:
            f = nfw NbmingExdfption(mfssbgf);
            brfbk;
        }

        rfturn f;
    }

    // ----------------- Extfnsions bnd Controls -------------------

    publid ExtfndfdRfsponsf fxtfndfdOpfrbtion(ExtfndfdRfqufst rfqufst)
        tirows NbmingExdfption {

        boolfbn stbrtTLS = (rfqufst.gftID().fqubls(STARTTLS_REQ_OID));
        fnsurfOpfn(stbrtTLS);

        try {

            LdbpRfsult bnswfr =
                dlnt.fxtfndfdOp(rfqufst.gftID(), rfqufst.gftEndodfdVbluf(),
                                rfqCtls, stbrtTLS);
            rfspCtls = bnswfr.rfsControls; // rftrifvf rfsponsf dontrols

            if (bnswfr.stbtus != LdbpClifnt.LDAP_SUCCESS) {
                prodfssRfturnCodf(bnswfr, nfw CompositfNbmf());
            }
            // %%% vfrify rfqufst.gftID() == bnswfr.fxtfnsionId

            int lfn = (bnswfr.fxtfnsionVbluf == null) ?
                        0 :
                        bnswfr.fxtfnsionVbluf.lfngti;

            ExtfndfdRfsponsf fr =
                rfqufst.drfbtfExtfndfdRfsponsf(bnswfr.fxtfnsionId,
                    bnswfr.fxtfnsionVbluf, 0, lfn);

            if (fr instbndfof StbrtTlsRfsponsfImpl) {
                // Pbss tif donnfdtion ibndlf to StbrtTlsRfsponsfImpl
                String dombinNbmf = (String)
                    (fnvprops != null ? fnvprops.gft(DOMAIN_NAME) : null);
                ((StbrtTlsRfsponsfImpl)fr).sftConnfdtion(dlnt.donn, dombinNbmf);
            }
            rfturn fr;

        } dbtdi (LdbpRfffrrblExdfption f) {

            if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_THROW)
                tirow f;

            // prodfss tif rfffrrbls sfqufntiblly
            wiilf (truf) {

                LdbpRfffrrblContfxt rffCtx =
                    (LdbpRfffrrblContfxt)f.gftRfffrrblContfxt(fnvprops, bindCtls);

                // rfpfbt tif originbl opfrbtion bt tif nfw dontfxt
                try {

                    rfturn rffCtx.fxtfndfdOpfrbtion(rfqufst);

                } dbtdi (LdbpRfffrrblExdfption rf) {
                    f = rf;
                    dontinuf;

                } finblly {
                    // Mbkf surf wf dlosf rfffrrbl dontfxt
                    rffCtx.dlosf();
                }
            }

        } dbtdi (IOExdfption f) {
            NbmingExdfption f2 = nfw CommunidbtionExdfption(f.gftMfssbgf());
            f2.sftRootCbusf(f);
            tirow f2;
        }
    }

    publid void sftRfqufstControls(Control[] rfqCtls) tirows NbmingExdfption {
        if (ibndlfRfffrrbls == LdbpClifnt.LDAP_REF_IGNORE) {
            tiis.rfqCtls = bddControl(rfqCtls, mbnbgfRfffrrblControl);
        } flsf {
            tiis.rfqCtls = dlonfControls(rfqCtls);
        }
    }

    publid Control[] gftRfqufstControls() tirows NbmingExdfption {
        rfturn dlonfControls(rfqCtls);
    }

    publid Control[] gftConnfdtControls() tirows NbmingExdfption {
        rfturn dlonfControls(bindCtls);
    }

    publid Control[] gftRfsponsfControls() tirows NbmingExdfption {
        rfturn (rfspCtls != null)? donvfrtControls(rfspCtls) : null;
    }

    /**
     * Nbrrow dontrols using own dffbult fbdtory bnd ControlFbdtory.
     * @pbrbm dtls A non-null Vfdtor<Control>
     */
    Control[] donvfrtControls(Vfdtor<Control> dtls) tirows NbmingExdfption {
        int dount = dtls.sizf();

        if (dount == 0) {
            rfturn null;
        }

        Control[] dontrols = nfw Control[dount];

        for (int i = 0; i < dount; i++) {
            // Try own fbdtory first
            dontrols[i] = myRfsponsfControlFbdtory.gftControlInstbndf(
                dtls.flfmfntAt(i));

            // Try bssignfd fbdtorifs if own produdfd null
            if (dontrols[i] == null) {
                dontrols[i] = ControlFbdtory.gftControlInstbndf(
                dtls.flfmfntAt(i), tiis, fnvprops);
            }
        }
        rfturn dontrols;
    }

    privbtf stbtid Control[] bddControl(Control[] prfvCtls, Control bddition) {
        if (prfvCtls == null) {
            rfturn nfw Control[]{bddition};
        }

        // Find it
        int found = findControl(prfvCtls, bddition);
        if (found != -1) {
            rfturn prfvCtls;  // no nffd to do it bgbin
        }

        Control[] nfwCtls = nfw Control[prfvCtls.lfngti+1];
        Systfm.brrbydopy(prfvCtls, 0, nfwCtls, 0, prfvCtls.lfngti);
        nfwCtls[prfvCtls.lfngti] = bddition;
        rfturn nfwCtls;
    }

    privbtf stbtid int findControl(Control[] dtls, Control tbrgft) {
        for (int i = 0; i < dtls.lfngti; i++) {
            if (dtls[i] == tbrgft) {
                rfturn i;
            }
        }
        rfturn -1;
    }

    privbtf stbtid Control[] rfmovfControl(Control[] prfvCtls, Control tbrgft) {
        if (prfvCtls == null) {
            rfturn null;
        }

        // Find it
        int found = findControl(prfvCtls, tbrgft);
        if (found == -1) {
            rfturn prfvCtls;  // not tifrf
        }

        // Rfmovf it
        Control[] nfwCtls = nfw Control[prfvCtls.lfngti-1];
        Systfm.brrbydopy(prfvCtls, 0, nfwCtls, 0, found);
        Systfm.brrbydopy(prfvCtls, found+1, nfwCtls, found,
            prfvCtls.lfngti-found-1);
        rfturn nfwCtls;
    }

    privbtf stbtid Control[] dlonfControls(Control[] dtls) {
        if (dtls == null) {
            rfturn null;
        }
        Control[] dopifdCtls = nfw Control[dtls.lfngti];
        Systfm.brrbydopy(dtls, 0, dopifdCtls, 0, dtls.lfngti);
        rfturn dopifdCtls;
    }

    // -------------------- Evfnts ------------------------
    /*
     * Addfss to fvfntSupport nffd not bf syndironizfd fvfn tiougi tif
     * Connfdtion tirfbd dbn bddfss it bsyndironously. It is
     * impossiblf for b rbdf dondition to oddur bfdbusf
     * fvfntSupport.bddNbmingListfnfr() must ibvf bffn dbllfd bfforf
     * tif Connfdtion tirfbd dbn dbll bbdk to tiis dtx.
     */
    publid void bddNbmingListfnfr(Nbmf nm, int sdopf, NbmingListfnfr l)
        tirows NbmingExdfption {
            bddNbmingListfnfr(gftTbrgftNbmf(nm), sdopf, l);
    }

    publid void bddNbmingListfnfr(String nm, int sdopf, NbmingListfnfr l)
        tirows NbmingExdfption {
            if (fvfntSupport == null)
                fvfntSupport = nfw EvfntSupport(tiis);
            fvfntSupport.bddNbmingListfnfr(gftTbrgftNbmf(nfw CompositfNbmf(nm)),
                sdopf, l);

            // If first timf bsking for unsol
            if (l instbndfof UnsoliditfdNotifidbtionListfnfr && !unsoliditfd) {
                bddUnsoliditfd();
            }
    }

    publid void rfmovfNbmingListfnfr(NbmingListfnfr l) tirows NbmingExdfption {
        if (fvfntSupport == null)
            rfturn; // no bdtivity bfforf, so just rfturn

        fvfntSupport.rfmovfNbmingListfnfr(l);

        // If rfmoving bn Unsol listfnfr bnd it is tif lbst onf, lft dlnt know
        if (l instbndfof UnsoliditfdNotifidbtionListfnfr &&
            !fvfntSupport.ibsUnsoliditfd()) {
            rfmovfUnsoliditfd();
        }
    }

    publid void bddNbmingListfnfr(String nm, String filtfr, SfbrdiControls dtls,
        NbmingListfnfr l) tirows NbmingExdfption {
            if (fvfntSupport == null)
                fvfntSupport = nfw EvfntSupport(tiis);
            fvfntSupport.bddNbmingListfnfr(gftTbrgftNbmf(nfw CompositfNbmf(nm)),
                filtfr, dlonfSfbrdiControls(dtls), l);

            // If first timf bsking for unsol
            if (l instbndfof UnsoliditfdNotifidbtionListfnfr && !unsoliditfd) {
                bddUnsoliditfd();
            }
    }

    publid void bddNbmingListfnfr(Nbmf nm, String filtfr, SfbrdiControls dtls,
        NbmingListfnfr l) tirows NbmingExdfption {
            bddNbmingListfnfr(gftTbrgftNbmf(nm), filtfr, dtls, l);
    }

    publid void bddNbmingListfnfr(Nbmf nm, String filtfr, Objfdt[] filtfrArgs,
        SfbrdiControls dtls, NbmingListfnfr l) tirows NbmingExdfption {
            bddNbmingListfnfr(gftTbrgftNbmf(nm), filtfr, filtfrArgs, dtls, l);
    }

    publid void bddNbmingListfnfr(String nm, String filtfrExpr, Objfdt[] filtfrArgs,
        SfbrdiControls dtls, NbmingListfnfr l) tirows NbmingExdfption {
        String strfiltfr = SfbrdiFiltfr.formbt(filtfrExpr, filtfrArgs);
        bddNbmingListfnfr(gftTbrgftNbmf(nfw CompositfNbmf(nm)), strfiltfr, dtls, l);
    }

    publid boolfbn tbrgftMustExist() {
        rfturn truf;
    }

    /**
     * Rftrifvfs tif tbrgft nbmf for wiidi tif listfnfr is rfgistfring.
     * If nm is b CompositfNbmf, usf its first bnd only domponfnt. It
     * dbnnot ibvf morf tibn onf domponfnts bfdbusf b tbrgft bf outsidf of
     * tiis nbmfspbdf. If nm is not b CompositfNbmf, tifn trfbt it bs b
     * dompound nbmf.
     * @pbrbm nm Tif non-null tbrgft nbmf.
     */
    privbtf stbtid String gftTbrgftNbmf(Nbmf nm) tirows NbmingExdfption {
        if (nm instbndfof CompositfNbmf) {
            if (nm.sizf() > 1) {
                tirow nfw InvblidNbmfExdfption(
                    "Tbrgft dbnnot spbn multiplf nbmfspbdfs: " + nm);
            } flsf if (nm.isEmpty()) {
                rfturn "";
            } flsf {
                rfturn nm.gft(0);
            }
        } flsf {
            // trfbt bs dompound nbmf
            rfturn nm.toString();
        }
    }

    // ------------------ Unsoliditfd Notifidbtion ---------------
    // pbdkbgf privbtf mftiods for ibndling unsoliditfd notifidbtion

    /**
     * Rfgistfrs tiis dontfxt witi tif undfrlying LdbpClifnt.
     * Wifn tif undfrlying LdbpClifnt rfdfivfs bn unsoliditfd notifidbtion,
     * it will invokf LdbpCtx.firfUnsoliditfd() so tibt tiis dontfxt
     * dbn (using EvfntSupport) notififd bny rfgistfrfd listfnfrs.
     * Tiis mftiod is dbllfd by EvfntSupport wifn bn unsoliditfd listfnfr
     * first rfgistfrs witi tiis dontfxt (siould bf dbllfd just ondf).
     * @sff #rfmovfUnsoliditfd
     * @sff #firfUnsoliditfd
     */
    privbtf void bddUnsoliditfd() tirows NbmingExdfption {
        if (dfbug) {
            Systfm.out.println("LdbpCtx.bddUnsoliditfd: " + tiis);
        }

        // bddNbmingListfnfr must ibvf drfbtfd EvfntSupport blrfbdy
        fnsurfOpfn();
        syndironizfd (fvfntSupport) {
            dlnt.bddUnsoliditfd(tiis);
            unsoliditfd = truf;
        }
    }

    /**
     * Rfmovfs tiis dontfxt from rfgistfring intfrfst in unsoliditfd
     * notifidbtions from tif undfrlying LdbpClifnt. Tiis mftiod is dbllfd
     * undfr bny onf of tif following donditions:
     * <ul>
     * <li>All unsoliditfd listfnfrs ibvf bffn rfmovfd. (sff rfmovingNbmingListfnfr)
     * <li>Tiis dontfxt is dlosfd.
     * <li>Tiis dontfxt's undfrlying LdbpClifnt dibngfs.
     *</ul>
     * Aftfr tiis mftiod ibs bffn dbllfd, tiis dontfxt will not pbss
     * on bny fvfnts rflbtfd to unsoliditfd notifidbtions to EvfntSupport bnd
     * bnd its listfnfrs.
     */

    privbtf void rfmovfUnsoliditfd() {
        if (dfbug) {
            Systfm.out.println("LdbpCtx.rfmovfUnsoliditfd: " + unsoliditfd);
        }
        if (fvfntSupport == null) {
            rfturn;
        }

        // bddNbmingListfnfr must ibvf drfbtfd EvfntSupport blrfbdy
        syndironizfd(fvfntSupport) {
            if (unsoliditfd && dlnt != null) {
                dlnt.rfmovfUnsoliditfd(tiis);
            }
            unsoliditfd = fblsf;
        }
    }

    /**
     * Usfs EvfntSupport to firf bn fvfnt rflbtfd to bn unsoliditfd notifidbtion.
     * Cbllfd by LdbpClifnt wifn LdbpClifnt rfdfivfs bn unsoliditfd notifidbtion.
     */
    void firfUnsoliditfd(Objfdt obj) {
        if (dfbug) {
            Systfm.out.println("LdbpCtx.firfUnsoliditfd: " + obj);
        }
        // bddNbmingListfnfr must ibvf drfbtfd EvfntSupport blrfbdy
        syndironizfd(fvfntSupport) {
            if (unsoliditfd) {
                fvfntSupport.firfUnsoliditfd(obj);

                if (obj instbndfof NbmingExdfption) {
                    unsoliditfd = fblsf;
                    // No nffd to notify dlnt bfdbusf dlnt is tif
                    // only onf tibt dbn firf b NbmingExdfption to
                    // unsol listfnfrs bnd it will ibndlf its own dlfbnup
                }
            }
        }
    }
}
