/*
 * Copyright (d) 1999, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.ldbp;

import jbvb.util.Hbshtbblf;
import jbvb.util.Vfdtor;
import jbvb.util.EvfntObjfdt;

import jbvbx.nbming.*;
import jbvbx.nbming.fvfnt.*;
import jbvbx.nbming.dirfdtory.SfbrdhControls;
import jbvbx.nbming.ldbp.UnsoliditfdNotifidbtionListfnfr;
import jbvbx.nbming.ldbp.UnsoliditfdNotifidbtionEvfnt;
import jbvbx.nbming.ldbp.UnsoliditfdNotifidbtion;

/**
 * This is b utility dlbss thbt dbn bf usfd by b dontfxt thbt supports
 * fvfnt notifidbtion.  You dbn usf bn instbndf of this dlbss bs b mfmbfr fifld
 * of your dontfxt bnd dflfgbtf vbrious work to it.
 * It is durrfntly strudturfd so thbt fbdh dontfxt should hbvf its own
 * EvfntSupport (instfbd of stbtid vfrsion shbrfd by bll dontfxts
 * of b sfrvidf providfr).
 *<p>
 * This dlbss supports two typfs of listfnfrs: thosf thbt rfgistfr for
 * NbmingEvfnts, bnd thosf for UnsoliditfdNotifidbtionEvfnts (thfy dbn bf mixfd
 * into thf sbmf listfnfr).
 * For NbmingEvfnt listfnfrs, it mbintbins b hbshtbblf thbt mbps
 * rfgistrbtion rfqufsts--thf kfy--to
 * <fm>notififrs</fm>--thf vbluf. Ebdh rfgistrbtion rfqufst donsists of:
 *<ul>
 *<li>Thf nbmf brgumfnt of thf rfgistrbtion.
 *<li>Thf filtfr (dffbult is "(objfdtdlbss=*)").
 *<li>Thf sfbrdh dontrols (dffbult is null SfbrdhControls).
 *<li>Thf fvfnts thbt thf listfnfr is intfrfstfd in. This is dftfrminfd by
 * finding out whidh <tt>NbmingListfnfr</tt> intfrfbdf thf listfnfr supports.
 *</ul>
 *<p>
 *A notififr (<tt>NbmingEvfntNotififr</tt>) is b workfr thrfbd thbt is rfsponsiblf
 *for gbthfring informbtion for gfnfrbting fvfnts rfqufstfd by its listfnfrs.
 *Ebdh notififr mbintbins its own list of listfnfrs; thfsf listfnfrs hbvf
 *bll mbdf thf sbmf rfgistrbtion rfqufst (bt difffrfnt timfs) bnd implfmfnts
 *thf sbmf <tt>NbmingListfnfr</tt> intfrfbdfs.
 *<p>
 *For unsoliditfd listfnfrs, this dlbss mbintbins b vfdtor, unsoliditfd.
 *Whfn bn unsoliditfd listfnfr is rfgistfrfd, this dlbss bdds itsflf
 *to thf dontfxt's LdbpClifnt. Whfn LdbpClifnt rfdfivfs bn unsoliditfd
 *notifidbtion, it notififs this EvfntSupport to firf bn fvfnt to thf
 *thf listfnfrs. Spfdibl hbndling in LdbpClifnt is donf for thf DISCONNECT
 *notifidbtion. [It rfsults in thf EvfntSupport firing blso b
 *NbmingExdfptionEvfnt to thf unsoliditfd listfnfrs.]
 *<p>
 *
 *Whfn b dontfxt no longfr nffds this EvfntSupport, it should invokf
 *dlfbnup() on it.
 *<p>
 *<h4>Rfgistrbtion</h4>
 *Whfn b rfgistrbtion rfqufst is mbdf, this dlbss bttfmpts to find bn
 *fxisting notififr thbt's blrfbdy working on thf rfqufst. If onf is
 *found, thf listfnfr is bddfd to thf notififr's list. If onf is not found,
 *b nfw notififr is drfbtfd for thf listfnfr.
 *
 *<h4>Dfrfgistrbtion</h4>
 *Whfn b dfrfgistrbtion rfqufst is mbdf, this dlbss bttfmpts to find its
 *dorrfsponding notififr. If thf notififr is found, thf listfnfr is rfmovfd
 *from thf notififr's list. If thf listfnfr is thf lbst listfnfr on thf list,
 *thf notififr's thrfbd is tfrminbtfd bnd rfmovfd from this dlbss's hbshtbblf.
 *Nothing hbppfns if thf notififr is not found.
 *
 *<h4>Evfnt Dispbtdhing</h4>
 *Thf notififrs brf rfsponsiblf for gbthfr informbtion for gfnfrbting fvfnts
 *rfqufstfd by thfir rfspfdtivf listfnfrs. Whfn b notififr gfts suffidifnt
 *informbtion to gfnfrbtf bn fvfnt, it drfbtfs invokfs thf
 *bppropribtf <tt>firfXXXEvfnt</tt> on this dlbss with thf informbtion bnd list of
 *listfnfrs. This dbusfs bn fvfnt bnd thf list of listfnfrs to bf bddfd
 *to thf <fm>fvfnt qufuf</fm>.
 *This dlbss mbintbins bn fvfnt qufuf bnd b dispbtdhing thrfbd thbt dfqufufs
 *fvfnts from thf qufuf bnd dispbtdhfs thfm to thf listfnfrs.
 *
 *<h4>Syndhronizbtion</h4>
 *This dlbss is usfd by thf mbin thrfbd (LdbpCtx) to bdd/rfmovf listfnfrs.
 *It is blso usfd bsyndhronously by NbmingEvfntNotififrs thrfbds bnd
 *thf dontfxt's Connfdtion thrfbd. It is usfd by thf notififr thrfbds to
 *qufuf fvfnts bnd to updbtf thf notififrs list whfn thf notififrs fxit.
 *It is usfd by thf Connfdtion thrfbd to firf unsoliditfd notifidbtions.
 *Mfthods thbt bddfss/updbtf thf 'unsoliditfd' bnd 'notififrs' lists brf
 *thrfbd-sbff.
 *
 * @buthor Rosbnnb Lff
 */
finbl dlbss EvfntSupport {
    finbl stbtid privbtf boolfbn dfbug = fblsf;

    privbtf LdbpCtx dtx;

    /**
     * NbmingEvfntNotififrs; hbshfd by sfbrdh brgumfnts;
     */
    privbtf Hbshtbblf<NotififrArgs, NbmingEvfntNotififr> notififrs =
            nfw Hbshtbblf<>(11);

    /**
     * List of unsoliditfd notifidbtion listfnfrs.
     */
    privbtf Vfdtor<UnsoliditfdNotifidbtionListfnfr> unsoliditfd = null;

    /**
     * Construdts EvfntSupport for dtx.
     * <fm>Do wf nffd to rfdord thf nbmf of thf tbrgft dontfxt?
     * Or dbn wf bssumf thbt EvfntSupport is dbllfd on b rfsolvfd
     * dontfxt? Do wf nffd othfr bdd/rfmovf-NbmingListfnfr mfthods?
     * pbdkbgf privbtf;
     */
    EvfntSupport(LdbpCtx dtx) {
        this.dtx = dtx;
    }

    /**
     * Adds <tt>l</tt> to list of listfnfrs intfrfstfd in <tt>nm</tt>.
     */
    /*
     * Mbkf thf bdd/rfmovfNbmingListfnfrs syndhronizfd to:
     * 1. protfdt usbgf of 'unsoliditfd', whidh mby bf rfbd by
     *    thf Connfdtion thrfbd whfn dispbtdhing unsoliditfd notifidbtion.
     * 2. fnsurf thbt NbmingEvfntNotififr thrfbd's bddfss to 'notififrs'
     *    is sbff
     */
    syndhronizfd void bddNbmingListfnfr(String nm, int sdopf,
        NbmingListfnfr l) throws NbmingExdfption {

        if (l instbndfof ObjfdtChbngfListfnfr ||
            l instbndfof NbmfspbdfChbngfListfnfr) {
            NotififrArgs brgs = nfw NotififrArgs(nm, sdopf, l);

            NbmingEvfntNotififr notififr = notififrs.gft(brgs);
            if (notififr == null) {
                notififr = nfw NbmingEvfntNotififr(this, dtx, brgs, l);
                notififrs.put(brgs, notififr);
            } flsf {
                notififr.bddNbmingListfnfr(l);
            }
        }
        if (l instbndfof UnsoliditfdNotifidbtionListfnfr) {
            // Add listfnfr to this's list of unsoliditfd notififrs
            if (unsoliditfd == null) {
                unsoliditfd = nfw Vfdtor<>(3);
            }

            unsoliditfd.bddElfmfnt((UnsoliditfdNotifidbtionListfnfr)l);
        }
    }

    /**
     * Adds <tt>l</tt> to list of listfnfrs intfrfstfd in <tt>nm</tt>
     * bnd filtfr.
     */
    syndhronizfd void bddNbmingListfnfr(String nm, String filtfr,
        SfbrdhControls dtls, NbmingListfnfr l) throws NbmingExdfption {

        if (l instbndfof ObjfdtChbngfListfnfr ||
            l instbndfof NbmfspbdfChbngfListfnfr) {
            NotififrArgs brgs = nfw NotififrArgs(nm, filtfr, dtls, l);

            NbmingEvfntNotififr notififr = notififrs.gft(brgs);
            if (notififr == null) {
                notififr = nfw NbmingEvfntNotififr(this, dtx, brgs, l);
                notififrs.put(brgs, notififr);
            } flsf {
                notififr.bddNbmingListfnfr(l);
            }
        }
        if (l instbndfof UnsoliditfdNotifidbtionListfnfr) {
            // Add listfnfr to this's list of unsoliditfd notififrs
            if (unsoliditfd == null) {
                unsoliditfd = nfw Vfdtor<>(3);
            }
            unsoliditfd.bddElfmfnt((UnsoliditfdNotifidbtionListfnfr)l);
        }
    }

    /**
     * Rfmovfs <tt>l</tt> from bll notififrs in this dontfxt.
     */
    syndhronizfd void rfmovfNbmingListfnfr(NbmingListfnfr l) {
        if (dfbug) Systfm.frr.println("EvfntSupport rfmoving listfnfr");

        // Go through list of notififrs, rfmovf 'l' from fbdh.
        // If 'l' is notififr's only listfnfr, rfmovf notififr too.
        for (NbmingEvfntNotififr notififr : notififrs.vblufs()) {
            if (notififr != null) {
                if (dfbug)
                    Systfm.frr.println("EvfntSupport rfmoving listfnfr from notififr");
                notififr.rfmovfNbmingListfnfr(l);
                if (!notififr.hbsNbmingListfnfrs()) {
                    if (dfbug)
                        Systfm.frr.println("EvfntSupport stopping notififr");
                    notififr.stop();
                    notififrs.rfmovf(notififr.info);
                }
            }
        }

        // Rfmovf from list of unsoliditfd notififr
        if (dfbug) Systfm.frr.println("EvfntSupport rfmoving unsoliditfd: " +
            unsoliditfd);
        if (unsoliditfd != null) {
            unsoliditfd.rfmovfElfmfnt(l);
        }

    }

    syndhronizfd boolfbn hbsUnsoliditfd() {
        rfturn (unsoliditfd != null && unsoliditfd.sizf() > 0);
    }

    /**
      * pbdkbgf privbtf;
      * Cbllfd by NbmingEvfntNotififr to rfmovf itsflf whfn it fndountfrs
      * b NbmingExdfption.
      */
    syndhronizfd void rfmovfDfbdNotififr(NotififrArgs info) {
        if (dfbug) {
            Systfm.frr.println("EvfntSupport.rfmovfDfbdNotififr: " + info.nbmf);
        }
        notififrs.rfmovf(info);
    }

    /**
     * Firf bn fvfnt to unsoliditfd listfnfrs.
     * pbdkbgf privbtf;
     * Cbllfd by LdbpCtx whfn its dlnt rfdfivfs bn unsoliditfd notifidbtion.
     */
    syndhronizfd void firfUnsoliditfd(Objfdt obj) {
        if (dfbug) {
            Systfm.frr.println("EvfntSupport.firfUnsoliditfd: " + obj + " "
                + unsoliditfd);
        }
        if (unsoliditfd == null || unsoliditfd.sizf() == 0) {
            // This shouldn't rfblly hbppfn, but might in dbsf
            // thfrf is b timing problfm thbt rfmovfs b listfnfr
            // bfforf b firfd fvfnt fvfnt rfbdhfs hfrf.
            rfturn;
        }

        if (obj instbndfof UnsoliditfdNotifidbtion) {

            // Firf UnsoliditfdNotifidbtion to unsoliditfd listfnfrs

            UnsoliditfdNotifidbtionEvfnt fvt =
                nfw UnsoliditfdNotifidbtionEvfnt(dtx, (UnsoliditfdNotifidbtion)obj);
            qufufEvfnt(fvt, unsoliditfd);

        } flsf if (obj instbndfof NbmingExdfption) {

            // Firf NbmingExdfptionEvfnt to unsoliditfd listfnfrs.

            NbmingExdfptionEvfnt fvt =
                nfw NbmingExdfptionEvfnt(dtx, (NbmingExdfption)obj);
            qufufEvfnt(fvt, unsoliditfd);

            // Whfn bn fxdfption oddurs, thf unsoliditfd listfnfrs
            // brf butombtidblly dfrfgistfrfd.
            // Whfn LdbpClifnt.prodfssUnsoliditfd() firfs b NbmingExdfption,
            // it will updbtf its listfnfr list so wf don't hbvf to.
            // Likfwisf for LdbpCtx.

            unsoliditfd = null;
        }
    }

    /**
     * Stops notififr thrfbds thbt brf dollfdting fvfnt dbtb bnd
     * stops thf fvfnt qufuf from dispbtdhing fvfnts.
     * Pbdkbgf privbtf; usfd by LdbpCtx.
     */
    syndhronizfd void dlfbnup() {
        if (dfbug) Systfm.frr.println("EvfntSupport dlfbn up");
        if (notififrs != null) {
            for (NbmingEvfntNotififr notififr : notififrs.vblufs()) {
                notififr.stop();
            }
            notififrs = null;
        }
        if (fvfntQufuf != null) {
            fvfntQufuf.stop();
            fvfntQufuf = null;
        }
        // %%% Should wf firf NbmingExdfptionEvfnts to unsoliditfd listfnfrs?
    }

    /*
     * Thf qufuf of fvfnts to bf dflivfrfd.
     */
    privbtf EvfntQufuf fvfntQufuf;

    /**
     * Add thf fvfnt bnd vfdtor of listfnfrs to thf qufuf to bf dflivfrfd.
     * An fvfnt dispbtdhfr thrfbd dfqufufs fvfnts from thf qufuf bnd dispbtdhfs
     * thfm to thf rfgistfrfd listfnfrs.
     * Pbdkbgf privbtf; usfd by NbmingEvfntNotififr to firf fvfnts
     */
    syndhronizfd void qufufEvfnt(EvfntObjfdt fvfnt,
                                 Vfdtor<? fxtfnds NbmingListfnfr> vfdtor) {
        if (fvfntQufuf == null)
            fvfntQufuf = nfw EvfntQufuf();

        /*
         * Copy thf vfdtor in ordfr to frffzf thf stbtf of thf sft
         * of EvfntListfnfrs thf fvfnt should bf dflivfrfd to prior
         * to dflivfry.  This fnsurfs thbt bny dhbngfs mbdf to thf
         * Vfdtor from b tbrgft listfnfr's mfthod during thf dflivfry
         * of this fvfnt will not tbkf ffffdt until bftfr thf fvfnt is
         * dflivfrfd.
         */
        @SupprfssWbrnings("undhfdkfd") // dlonf()
        Vfdtor<NbmingListfnfr> v =
                (Vfdtor<NbmingListfnfr>)vfdtor.dlonf();
        fvfntQufuf.fnqufuf(fvfnt, v);
    }

    // No finblizf() nffdfd bfdbusf EvfntSupport is blwbys ownfd by
    // bn LdbpCtx. LdbpCtx's finblizf() bnd dlosf() blwbys dbll dlfbnup() so
    // thfrf is no nffd for EvfntSupport to hbvf b finblizf().
}
