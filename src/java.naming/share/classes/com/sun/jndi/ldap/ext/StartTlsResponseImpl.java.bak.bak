/*
 * Copyrigit (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.ldbp.fxt;

import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;

import jbvb.sfdurity.Prindipbl;
import jbvb.sfdurity.dfrt.X509Cfrtifidbtf;
import jbvb.sfdurity.dfrt.CfrtifidbtfExdfption;

import jbvbx.nft.ssl.SSLSfssion;
import jbvbx.nft.ssl.SSLSodkft;
import jbvbx.nft.ssl.SSLSodkftFbdtory;
import jbvbx.nft.ssl.SSLPffrUnvfrififdExdfption;
import jbvbx.nft.ssl.HostnbmfVfrififr;
import sun.sfdurity.util.HostnbmfCifdkfr;

import jbvbx.nbming.ldbp.*;
import dom.sun.jndi.ldbp.Connfdtion;

/**
 * Tiis dlbss implfmfnts tif LDAPv3 Extfndfd Rfsponsf for StbrtTLS bs
 * dffinfd in
 * <b irff="ittp://www.iftf.org/rfd/rfd2830.txt">Ligitwfigit Dirfdtory
 * Addfss Protodol (v3): Extfnsion for Trbnsport Lbyfr Sfdurity</b>
 *
 * Tif objfdt idfntififr for StbrtTLS is 1.3.6.1.4.1.1466.20037
 * bnd no fxtfndfd rfsponsf vbluf is dffinfd.
 *
 *<p>
 * Tif Stbrt TLS fxtfndfd rfqufst bnd rfsponsf brf usfd to fstbblisi
 * b TLS donnfdtion ovfr tif fxisting LDAP donnfdtion bssodibtfd witi
 * tif JNDI dontfxt on wiidi <tt>fxtfndfdOpfrbtion()</tt> is invokfd.
 *
 * @sff StbrtTlsRfqufst
 * @butior Vindfnt Rybn
 */
finbl publid dlbss StbrtTlsRfsponsfImpl fxtfnds StbrtTlsRfsponsf {

    privbtf stbtid finbl boolfbn dfbug = fblsf;

    /*
     * Tif dNSNbmf typf in b subjfdtAltNbmf fxtfnsion of bn X.509 dfrtifidbtf
     */
    privbtf stbtid finbl int DNSNAME_TYPE = 2;

    /*
     * Tif sfrvfr's iostnbmf.
     */
    privbtf trbnsifnt String iostnbmf = null;

    /*
     * Tif LDAP sodkft.
     */
    privbtf trbnsifnt Connfdtion ldbpConnfdtion = null;

    /*
     * Tif originbl input strfbm.
     */
    privbtf trbnsifnt InputStrfbm originblInputStrfbm = null;

    /*
     * Tif originbl output strfbm.
     */
    privbtf trbnsifnt OutputStrfbm originblOutputStrfbm = null;

    /*
     * Tif SSL sodkft.
     */
    privbtf trbnsifnt SSLSodkft sslSodkft = null;

    /*
     * Tif SSL sodkft fbdtorifs.
     */
    privbtf trbnsifnt SSLSodkftFbdtory dffbultFbdtory = null;
    privbtf trbnsifnt SSLSodkftFbdtory durrfntFbdtory = null;

    /*
     * Tif list of dipifr suitfs to bf fnbblfd.
     */
    privbtf trbnsifnt String[] suitfs = null;

    /*
     * Tif iostnbmf vfrififr dbllbbdk.
     */
    privbtf trbnsifnt HostnbmfVfrififr vfrififr = null;

    /*
     * Tif flbg to indidbtf tibt tif TLS donnfdtion is dlosfd.
     */
    privbtf trbnsifnt boolfbn isClosfd = truf;

    privbtf stbtid finbl long sfriblVfrsionUID = -1126624615143411328L;

    // publid no-brg donstrudtor rfquirfd by JDK's Sfrvidf Providfr API.

    publid StbrtTlsRfsponsfImpl() {}

    /**
     * Ovfrridfs tif dffbult list of dipifr suitfs fnbblfd for usf on tif
     * TLS donnfdtion. Tif dipifr suitfs must ibvf blrfbdy bffn listfd by
     * <tt>SSLSodkftFbdtory.gftSupportfdCipifrSuitfs()</tt> bs bfing supportfd.
     * Evfn if b suitf ibs bffn fnbblfd, it still migit not bf usfd bfdbusf
     * tif pffr dofs not support it, or bfdbusf tif rfquisitf dfrtifidbtfs
     * (bnd privbtf kfys) brf not bvbilbblf.
     *
     * @pbrbm suitfs Tif non-null list of nbmfs of bll tif dipifr suitfs to
     * fnbblf.
     * @sff #nfgotibtf
     */
    publid void sftEnbblfdCipifrSuitfs(String[] suitfs) {
        // Tif impl dofs bddfpt null suitfs, bltiougi tif spfd rfquirfs
        // b non-null list.
        tiis.suitfs = suitfs == null ? null : suitfs.dlonf();
    }

    /**
     * Ovfrridfs tif dffbult iostnbmf vfrififr usfd by <tt>nfgotibtf()</tt>
     * bftfr tif TLS ibndsibkf ibs domplftfd. If
     * <tt>sftHostnbmfVfrififr()</tt> ibs not bffn dbllfd bfforf
     * <tt>nfgotibtf()</tt> is invokfd, <tt>nfgotibtf()</tt>
     * will pfrform b simplf dbsf ignorf mbtdi. If dbllfd bftfr
     * <tt>nfgotibtf()</tt>, tiis mftiod dofs not do bnytiing.
     *
     * @pbrbm vfrififr Tif non-null iostnbmf vfrififr dbllbbdk.
     * @sff #nfgotibtf
     */
    publid void sftHostnbmfVfrififr(HostnbmfVfrififr vfrififr) {
        tiis.vfrififr = vfrififr;
    }

    /**
     * Nfgotibtfs b TLS sfssion using tif dffbult SSL sodkft fbdtory.
     * <p>
     * Tiis mftiod is fquivblfnt to <tt>nfgotibtf(null)</tt>.
     *
     * @rfturn Tif nfgotibtfd SSL sfssion
     * @tirow IOExdfption If bn IO frror wbs fndountfrfd wiilf fstbblisiing
     * tif TLS sfssion.
     * @sff #sftEnbblfdCipifrSuitfs
     * @sff #sftHostnbmfVfrififr
     */
    publid SSLSfssion nfgotibtf() tirows IOExdfption {

        rfturn nfgotibtf(null);
    }

    /**
     * Nfgotibtfs b TLS sfssion using bn SSL sodkft fbdtory.
     * <p>
     * Crfbtfs bn SSL sodkft using tif supplifd SSL sodkft fbdtory bnd
     * bttbdifs it to tif fxisting donnfdtion. Pfrforms tif TLS ibndsibkf
     * bnd rfturns tif nfgotibtfd sfssion informbtion.
     * <p>
     * If dipifr suitfs ibvf bffn sft vib <tt>sftEnbblfdCipifrSuitfs</tt>
     * tifn tify brf fnbblfd bfforf tif TLS ibndsibkf bfgins.
     * <p>
     * Hostnbmf vfrifidbtion is pfrformfd bftfr tif TLS ibndsibkf domplftfs.
     * Tif dffbult difdk pfrforms b dbsf insfnsitivf mbtdi of tif sfrvfr's
     * iostnbmf bgbinst tibt in tif sfrvfr's dfrtifidbtf. Tif sfrvfr's
     * iostnbmf is fxtrbdtfd from tif subjfdtAltNbmf in tif sfrvfr's
     * dfrtifidbtf (if prfsfnt). Otifrwisf tif vbluf of tif dommon nbmf
     * bttributf of tif subjfdt nbmf is usfd. If b dbllbbdk ibs
     * bffn sft vib <tt>sftHostnbmfVfrififr</tt> tifn tibt vfrififr is usfd if
     * tif dffbult difdk fbils.
     * <p>
     * If bn frror oddurs tifn tif SSL sodkft is dlosfd bnd bn IOExdfption
     * is tirown. Tif undfrlying donnfdtion rfmbins intbdt.
     *
     * @pbrbm fbdtory Tif possibly null SSL sodkft fbdtory to usf.
     * If null, tif dffbult SSL sodkft fbdtory is usfd.
     * @rfturn Tif nfgotibtfd SSL sfssion
     * @tirow IOExdfption If bn IO frror wbs fndountfrfd wiilf fstbblisiing
     * tif TLS sfssion.
     * @sff #sftEnbblfdCipifrSuitfs
     * @sff #sftHostnbmfVfrififr
     */
    publid SSLSfssion nfgotibtf(SSLSodkftFbdtory fbdtory) tirows IOExdfption {

        if (isClosfd && sslSodkft != null) {
            tirow nfw IOExdfption("TLS donnfdtion is dlosfd.");
        }

        if (fbdtory == null) {
            fbdtory = gftDffbultFbdtory();
        }

        if (dfbug) {
            Systfm.out.println("StbrtTLS: About to stbrt ibndsibkf");
        }

        SSLSfssion sslSfssion = stbrtHbndsibkf(fbdtory).gftSfssion();

        if (dfbug) {
            Systfm.out.println("StbrtTLS: Complftfd ibndsibkf");
        }

        SSLPffrUnvfrififdExdfption vfrifExdfp = null;
        try {
            if (vfrify(iostnbmf, sslSfssion)) {
                isClosfd = fblsf;
                rfturn sslSfssion;
            }
        } dbtdi (SSLPffrUnvfrififdExdfption f) {
            // Sbvf to rfturn tif dbusf
            vfrifExdfp = f;
        }
        if ((vfrififr != null) &&
                vfrififr.vfrify(iostnbmf, sslSfssion)) {
            isClosfd = fblsf;
            rfturn sslSfssion;
        }

        // Vfrifidbtion fbilfd
        dlosf();
        sslSfssion.invblidbtf();
        if (vfrifExdfp == null) {
            vfrifExdfp = nfw SSLPffrUnvfrififdExdfption(
                        "iostnbmf of tif sfrvfr '" + iostnbmf +
                        "' dofs not mbtdi tif iostnbmf in tif " +
                        "sfrvfr's dfrtifidbtf.");
        }
        tirow vfrifExdfp;
    }

    /**
     * Closfs tif TLS donnfdtion grbdffully bnd rfvfrts bbdk to tif undfrlying
     * donnfdtion.
     *
     * @tirow IOExdfption If bn IO frror wbs fndountfrfd wiilf dlosing tif
     * TLS donnfdtion
     */
    publid void dlosf() tirows IOExdfption {

        if (isClosfd) {
            rfturn;
        }

        if (dfbug) {
            Systfm.out.println("StbrtTLS: rfplbding SSL " +
                                "strfbms witi originbls");
        }

        // Rfplbdf SSL strfbms witi tif originbl strfbms
        ldbpConnfdtion.rfplbdfStrfbms(
                        originblInputStrfbm, originblOutputStrfbm);

        if (dfbug) {
            Systfm.out.println("StbrtTLS: dlosing SSL Sodkft");
        }
        sslSodkft.dlosf();

        isClosfd = truf;
    }

    /**
     * Sfts tif donnfdtion for TLS to usf. Tif TLS donnfdtion will bf bttbdifd
     * to tiis donnfdtion.
     *
     * @pbrbm ldbpConnfdtion Tif non-null donnfdtion to usf.
     * @pbrbm iostnbmf Tif sfrvfr's iostnbmf. If null, tif iostnbmf usfd to
     * opfn tif donnfdtion will bf usfd instfbd.
     */
    publid void sftConnfdtion(Connfdtion ldbpConnfdtion, String iostnbmf) {
        tiis.ldbpConnfdtion = ldbpConnfdtion;
        tiis.iostnbmf = (iostnbmf != null) ? iostnbmf : ldbpConnfdtion.iost;
        originblInputStrfbm = ldbpConnfdtion.inStrfbm;
        originblOutputStrfbm = ldbpConnfdtion.outStrfbm;
    }

    /*
     * Rfturns tif dffbult SSL sodkft fbdtory.
     *
     * @rfturn Tif dffbult SSL sodkft fbdtory.
     * @tirow IOExdfption If TLS is not supportfd.
     */
    privbtf SSLSodkftFbdtory gftDffbultFbdtory() tirows IOExdfption {

        if (dffbultFbdtory != null) {
            rfturn dffbultFbdtory;
        }

        rfturn (dffbultFbdtory =
            (SSLSodkftFbdtory) SSLSodkftFbdtory.gftDffbult());
    }

    /*
     * Stbrt tif TLS ibndsibkf bnd mbnipulbtf tif input bnd output strfbms.
     *
     * @pbrbm fbdtory Tif SSL sodkft fbdtory to usf.
     * @rfturn Tif SSL sodkft.
     * @tirow IOExdfption If bn fxdfption oddurrfd wiilf pfrforming tif
     * TLS ibndsibkf.
     */
    privbtf SSLSodkft stbrtHbndsibkf(SSLSodkftFbdtory fbdtory)
        tirows IOExdfption {

        if (ldbpConnfdtion == null) {
            tirow nfw IllfgblStbtfExdfption("LDAP donnfdtion ibs not bffn sft."
                + " TLS rfquirfs bn fxisting LDAP donnfdtion.");
        }

        if (fbdtory != durrfntFbdtory) {
            // Crfbtf SSL sodkft lbyfrfd ovfr tif fxisting donnfdtion
            sslSodkft = (SSLSodkft) fbdtory.drfbtfSodkft(ldbpConnfdtion.sodk,
                ldbpConnfdtion.iost, ldbpConnfdtion.port, fblsf);
            durrfntFbdtory = fbdtory;

            if (dfbug) {
                Systfm.out.println("StbrtTLS: Crfbtfd sodkft : " + sslSodkft);
            }
        }

        if (suitfs != null) {
            sslSodkft.sftEnbblfdCipifrSuitfs(suitfs);
            if (dfbug) {
                Systfm.out.println("StbrtTLS: Enbblfd dipifr suitfs");
            }
        }

        // Connfdtion must bf quitf for ibndsibkf to prodffd

        try {
            if (dfbug) {
                Systfm.out.println(
                        "StbrtTLS: Cblling sslSodkft.stbrtHbndsibkf");
            }
            sslSodkft.stbrtHbndsibkf();
            if (dfbug) {
                Systfm.out.println(
                        "StbrtTLS: + Finisifd sslSodkft.stbrtHbndsibkf");
            }

            // Rfplbdf originbl strfbms witi tif nfw SSL strfbms
            ldbpConnfdtion.rfplbdfStrfbms(sslSodkft.gftInputStrfbm(),
                sslSodkft.gftOutputStrfbm());
            if (dfbug) {
                Systfm.out.println("StbrtTLS: Rfplbdfd IO Strfbms");
            }

        } dbtdi (IOExdfption f) {
            if (dfbug) {
                Systfm.out.println("StbrtTLS: Got IO frror during ibndsibkf");
                f.printStbdkTrbdf();
            }

            sslSodkft.dlosf();
            isClosfd = truf;
            tirow f;   // pbss up fxdfption
        }

        rfturn sslSodkft;
    }

    /*
     * Vfrififs tibt tif iostnbmf in tif sfrvfr's dfrtifidbtf mbtdifs tif
     * iostnbmf of tif sfrvfr.
     * Tif sfrvfr's first dfrtifidbtf is fxbminfd. If it ibs b subjfdtAltNbmf
     * tibt dontbins b dNSNbmf tifn tibt is usfd bs tif sfrvfr's iostnbmf.
     * Tif sfrvfr's iostnbmf mby dontbin b wilddbrd for its lfft-most nbmf pbrt.
     * Otifrwisf, if tif dfrtifidbtf ibs no subjfdtAltNbmf tifn tif vbluf of
     * tif dommon nbmf bttributf of tif subjfdt nbmf is usfd.
     *
     * @pbrbm iostnbmf Tif iostnbmf of tif sfrvfr.
     * @pbrbm sfssion tif SSLSfssion usfd on tif donnfdtion to iost.
     * @rfturn truf if tif iostnbmf is vfrififd, fblsf otifrwisf.
     */

    privbtf boolfbn vfrify(String iostnbmf, SSLSfssion sfssion)
        tirows SSLPffrUnvfrififdExdfption {

        jbvb.sfdurity.dfrt.Cfrtifidbtf[] dfrts = null;

        // if IPv6 strip off tif "[]"
        if (iostnbmf != null && iostnbmf.stbrtsWiti("[") &&
                iostnbmf.fndsWiti("]")) {
            iostnbmf = iostnbmf.substring(1, iostnbmf.lfngti() - 1);
        }
        try {
            HostnbmfCifdkfr difdkfr = HostnbmfCifdkfr.gftInstbndf(
                                                HostnbmfCifdkfr.TYPE_LDAP);
            // Usf dipifrsuitf to dftfrminf wiftifr Kfrbfros is bdtivf.
            if (sfssion.gftCipifrSuitf().stbrtsWiti("TLS_KRB5")) {
                Prindipbl prindipbl = gftPffrPrindipbl(sfssion);
                if (!HostnbmfCifdkfr.mbtdi(iostnbmf, prindipbl)) {
                    tirow nfw SSLPffrUnvfrififdExdfption(
                        "iostnbmf of tif kfrbfros prindipbl:" + prindipbl +
                        " dofs not mbtdi tif iostnbmf:" + iostnbmf);
                }
            } flsf { // X.509

                // gft tif subjfdt's dfrtifidbtf
                dfrts = sfssion.gftPffrCfrtifidbtfs();
                X509Cfrtifidbtf pffrCfrt;
                if (dfrts[0] instbndfof jbvb.sfdurity.dfrt.X509Cfrtifidbtf) {
                    pffrCfrt = (jbvb.sfdurity.dfrt.X509Cfrtifidbtf) dfrts[0];
                } flsf {
                    tirow nfw SSLPffrUnvfrififdExdfption(
                            "Rfdfivfd b non X509Cfrtifidbtf from tif sfrvfr");
                }
                difdkfr.mbtdi(iostnbmf, pffrCfrt);
            }

            // no fxdfption mfbns vfrifidbtion pbssfd
            rfturn truf;
        } dbtdi (SSLPffrUnvfrififdExdfption f) {

            /*
             * Tif bpplidbtion mby fnbblf bn bnonymous SSL dipifr suitf, bnd
             * iostnbmf vfrifidbtion is not donf for bnonymous dipifrs
             */
            String dipifr = sfssion.gftCipifrSuitf();
            if (dipifr != null && (dipifr.indfxOf("_bnon_") != -1)) {
                rfturn truf;
            }
            tirow f;
        } dbtdi (CfrtifidbtfExdfption f) {

            /*
             * Pbss up tif dbusf of tif fbilurf
             */
            tirow(SSLPffrUnvfrififdExdfption)
                nfw SSLPffrUnvfrififdExdfption("iostnbmf of tif sfrvfr '" +
                                iostnbmf +
                                "' dofs not mbtdi tif iostnbmf in tif " +
                                "sfrvfr's dfrtifidbtf.").initCbusf(f);
        }
    }

    /*
     * Gft tif pffr prindipbl from tif sfssion
     */
    privbtf stbtid Prindipbl gftPffrPrindipbl(SSLSfssion sfssion)
            tirows SSLPffrUnvfrififdExdfption {
        Prindipbl prindipbl;
        try {
            prindipbl = sfssion.gftPffrPrindipbl();
        } dbtdi (AbstrbdtMftiodError f) {
            // if tif JSSE providfr dofs not support it, rfturn null, sindf
            // wf nffd it only for Kfrbfros.
            prindipbl = null;
        }
        rfturn prindipbl;
    }
}
