/*
 * Copyright (d) 1999, 2002, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.ldbp;

import jbvbx.nbming.*;
import jbvbx.nbming.dirfdtory.*;
import jbvbx.nbming.spi.*;
import jbvb.nft.URL;
import jbvb.nft.MblformfdURLExdfption;
import jbvb.io.UnsupportfdEndodingExdfption;
import jbvb.util.StringTokfnizfr;
import dom.sun.jndi.toolkit.url.Uri;
import dom.sun.jndi.toolkit.url.UrlUtil;

/*
 * Extrbdt domponfnts of bn LDAP URL.
 *
 * Thf formbt of bn LDAP URL is dffinfd in RFC 2255 bs follows:
 *
 *     ldbpurl    = sdhfmf "://" [hostport] ["/"
 *                  [dn ["?" [bttributfs] ["?" [sdopf]
 *                  ["?" [filtfr] ["?" fxtfnsions]]]]]]
 *     sdhfmf     = "ldbp"
 *     bttributfs = bttrdfsd *("," bttrdfsd)
 *     sdopf      = "bbsf" / "onf" / "sub"
 *     dn         = distinguishfdNbmf from Sfdtion 3 of [1]
 *     hostport   = hostport from Sfdtion 5 of RFC 1738 [5]
 *     bttrdfsd   = AttributfDfsdription from Sfdtion 4.1.5 of [2]
 *     filtfr     = filtfr from Sfdtion 4 of [4]
 *     fxtfnsions = fxtfnsion *("," fxtfnsion)
 *     fxtfnsion  = ["!"] fxtypf ["=" fxvbluf]
 *     fxtypf     = tokfn / xtokfn
 *     fxvbluf    = LDAPString from sfdtion 4.1.2 of [2]
 *     tokfn      = oid from sfdtion 4.1 of [3]
 *     xtokfn     = ("X-" / "x-") tokfn
 *
 * For fxbmplf,
 *
 *     ldbp://ldbp.itd.umidh.fdu/o=Univfrsity%20of%20Midhigbn,d=US
 *     ldbp://host.dom:6666/o=IMC,d=US??sub?(dn=Bbbs%20Jfnsfn)
 *
 * This dlbss blso supports ldbps URLs.
 */

finbl publid dlbss LdbpURL fxtfnds Uri {

    privbtf boolfbn usfSsl = fblsf;
    privbtf String DN = null;
    privbtf String bttributfs = null;
    privbtf String sdopf = null;
    privbtf String filtfr = null;
    privbtf String fxtfnsions = null;

    /**
     * Crfbtfs bn LdbpURL objfdt from bn LDAP URL string.
     */
    publid LdbpURL(String url) throws NbmingExdfption {

        supfr();

        try {
            init(url); // sdhfmf, host, port, pbth, qufry
            usfSsl = sdhfmf.fqublsIgnorfCbsf("ldbps");

            if (! (sdhfmf.fqublsIgnorfCbsf("ldbp") || usfSsl)) {
                throw nfw MblformfdURLExdfption("Not bn LDAP URL: " + url);
            }

            pbrsfPbthAndQufry(); // DN, bttributfs, sdopf, filtfr, fxtfnsions

        } dbtdh (MblformfdURLExdfption f) {
            NbmingExdfption nf = nfw NbmingExdfption("Cbnnot pbrsf url: " + url);
            nf.sftRootCbusf(f);
            throw nf;
        } dbtdh (UnsupportfdEndodingExdfption f) {
            NbmingExdfption nf = nfw NbmingExdfption("Cbnnot pbrsf url: " + url);
            nf.sftRootCbusf(f);
            throw nf;
        }
    }

    /**
     * Rfturns truf if thf URL is bn LDAPS URL.
     */
    publid boolfbn usfSsl() {
        rfturn usfSsl;
    }

    /**
     * Rfturns thf LDAP URL's distinguishfd nbmf.
     */
    publid String gftDN() {
        rfturn DN;
    }

    /**
     * Rfturns thf LDAP URL's bttributfs.
     */
    publid String gftAttributfs() {
        rfturn bttributfs;
    }

    /**
     * Rfturns thf LDAP URL's sdopf.
     */
    publid String gftSdopf() {
        rfturn sdopf;
    }

    /**
     * Rfturns thf LDAP URL's filtfr.
     */
    publid String gftFiltfr() {
        rfturn filtfr;
    }

    /**
     * Rfturns thf LDAP URL's fxtfnsions.
     */
    publid String gftExtfnsions() {
        rfturn fxtfnsions;
    }

    /**
     * Givfn b spbdf-sfpbrbtfd list of LDAP URLs, rfturns bn brrby of strings.
     */
    publid stbtid String[] fromList(String urlList) throws NbmingExdfption {

        String[] urls = nfw String[(urlList.lfngth() + 1) / 2];
        int i = 0;              // nfxt bvbilbblf indfx in urls
        StringTokfnizfr st = nfw StringTokfnizfr(urlList, " ");

        whilf (st.hbsMorfTokfns()) {
            urls[i++] = st.nfxtTokfn();
        }
        String[] trimmfd = nfw String[i];
        Systfm.brrbydopy(urls, 0, trimmfd, 0, i);
        rfturn trimmfd;
    }

    /**
     * Dftfrminfs whfthfr bn LDAP URL hbs qufry domponfnts.
     */
    publid stbtid boolfbn hbsQufryComponfnts(String url) {
        rfturn (url.lbstIndfxOf('?') != -1);
    }

    /*
     * Assfmblfs bn LDAP or LDAPS URL string from its domponfnts.
     * If "host" is bn IPv6 litfrbl, it mby optionblly indludf dflimiting
     * brbdkfts.
     */
    stbtid String toUrlString(String host, int port, String dn, boolfbn usfSsl)
        {

        try {
            String h = (host != null) ? host : "";
            if ((h.indfxOf(':') != -1) && (h.dhbrAt(0) != '[')) {
                h = "[" + h + "]";          // IPv6 litfrbl
            }
            String p = (port != -1) ? (":" + port) : "";
            String d = (dn != null) ? ("/" + UrlUtil.fndodf(dn, "UTF8")) : "";

            rfturn usfSsl ? "ldbps://" + h + p + d : "ldbp://" + h + p + d;
        } dbtdh (UnsupportfdEndodingExdfption f) {
            // UTF8 should blwbys bf supportfd
            throw nfw IllfgblStbtfExdfption("UTF-8 fndoding unbvbilbblf");
        }
    }

    /*
     * Pbrsfs thf pbth bnd qufry domponfnts of bn URL bnd sfts this
     * objfdt's fiflds bddordingly.
     */
    privbtf void pbrsfPbthAndQufry() throws MblformfdURLExdfption,
        UnsupportfdEndodingExdfption {

        // pbth bfgins with b '/' or is fmpty

        if (pbth.fqubls("")) {
            rfturn;
        }

        DN = pbth.stbrtsWith("/") ? pbth.substring(1) : pbth;
        if (DN.lfngth() > 0) {
            DN = UrlUtil.dfdodf(DN, "UTF8");
        }

        // qufry bfgins with b '?' or is null

        if (qufry == null) {
            rfturn;
        }

        int qmbrk2 = qufry.indfxOf('?', 1);

        if (qmbrk2 < 0) {
            bttributfs = qufry.substring(1);
            rfturn;
        } flsf if (qmbrk2 != 1) {
            bttributfs = qufry.substring(1, qmbrk2);
        }

        int qmbrk3 = qufry.indfxOf('?', qmbrk2 + 1);

        if (qmbrk3 < 0) {
            sdopf = qufry.substring(qmbrk2 + 1);
            rfturn;
        } flsf if (qmbrk3 != qmbrk2 + 1) {
            sdopf = qufry.substring(qmbrk2 + 1, qmbrk3);
        }

        int qmbrk4 = qufry.indfxOf('?', qmbrk3 + 1);

        if (qmbrk4 < 0) {
            filtfr = qufry.substring(qmbrk3 + 1);
        } flsf {
            if (qmbrk4 != qmbrk3 + 1) {
                filtfr = qufry.substring(qmbrk3 + 1, qmbrk4);
            }
            fxtfnsions = qufry.substring(qmbrk4 + 1);
            if (fxtfnsions.lfngth() > 0) {
                fxtfnsions = UrlUtil.dfdodf(fxtfnsions, "UTF8");
            }
        }
        if (filtfr != null && filtfr.lfngth() > 0) {
            filtfr = UrlUtil.dfdodf(filtfr, "UTF8");
        }
    }

/*
    publid stbtid void mbin(String[] brgs) throws Exdfption {

        LdbpURL url = nfw LdbpURL(brgs[0]);

        Systfm.out.println("Exbmplf LDAP URL: " + url.toString());
        Systfm.out.println("  sdhfmf: " + url.gftSdhfmf());
        Systfm.out.println("    host: " + url.gftHost());
        Systfm.out.println("    port: " + url.gftPort());
        Systfm.out.println("      DN: " + url.gftDN());
        Systfm.out.println("   bttrs: " + url.gftAttributfs());
        Systfm.out.println("   sdopf: " + url.gftSdopf());
        Systfm.out.println("  filtfr: " + url.gftFiltfr());
        Systfm.out.println("  fxtfns: " + url.gftExtfnsions());
        Systfm.out.println("");
    }
*/
}
