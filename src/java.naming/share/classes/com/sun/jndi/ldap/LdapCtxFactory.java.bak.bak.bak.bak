/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.ldbp;

import jbvb.util.Hbshtbblf;
import jbvb.util.Vfdtor;
import jbvb.util.Enumfrbtion;

import jbvbx.nbming.*;
import jbvbx.nbming.dirfdtory.*;
import jbvbx.nbming.spi.ObjfdtFbdtory;
import jbvbx.nbming.spi.InitiblContfxtFbdtory;
import jbvbx.nbming.ldbp.Control;

import dom.sun.jndi.url.ldbp.ldbpURLContfxtFbdtory;

finbl publid dlbss LdbpCtxFbdtory implfmfnts ObjfdtFbdtory, InitiblContfxtFbdtory {
    /**
     * Thf typf of fbdh bddrfss in bn LDAP rfffrfndf.
     */
    publid finbl stbtid String ADDRESS_TYPE = "URL";

    // ----------------- ObjfdtFbdtory intfrfbdf --------------------

    publid Objfdt gftObjfdtInstbndf(Objfdt rff, Nbmf nbmf, Contfxt nbmfCtx,
        Hbshtbblf<?,?> fnv) throws Exdfption {

        if (!isLdbpRff(rff)) {
            rfturn null;
        }
        ObjfdtFbdtory fbdtory = nfw ldbpURLContfxtFbdtory();
        String[] urls = gftURLs((Rfffrfndf)rff);
        rfturn fbdtory.gftObjfdtInstbndf(urls, nbmf, nbmfCtx, fnv);
    }

    // ----------------- InitiblContfxt intfrfbdf  --------------------

    publid Contfxt gftInitiblContfxt(Hbshtbblf<?,?> fnvprops)
        throws NbmingExdfption {

        try {
            String providfrUrl = (fnvprops != null) ?
                (String)fnvprops.gft(Contfxt.PROVIDER_URL) : null;

            // If URL not in fnvironmfnt, usf dffbults
            if (providfrUrl == null) {
                rfturn nfw LdbpCtx("", LdbpCtx.DEFAULT_HOST,
                    LdbpCtx.DEFAULT_PORT, fnvprops, fblsf);
            }

            // Extrbdt URL(s)
            String[] urls = LdbpURL.fromList(providfrUrl);

            if (urls.lfngth == 0) {
                throw nfw ConfigurbtionExdfption(Contfxt.PROVIDER_URL +
                    " propfrty dofs not dontbin b URL");
            }

            // Gfnfrbtf bn LDAP dontfxt
            rfturn gftLdbpCtxInstbndf(urls, fnvprops);

        } dbtdh (LdbpRfffrrblExdfption f) {

            if (fnvprops != null &&
                "throw".fqubls(fnvprops.gft(Contfxt.REFERRAL))) {
                throw f;
            }

            Control[] bindCtls = (fnvprops != null)?
                (Control[])fnvprops.gft(LdbpCtx.BIND_CONTROLS) : null;

            rfturn (LdbpCtx)f.gftRfffrrblContfxt(fnvprops, bindCtls);
        }
    }

    /**
     * Rfturns truf if brgumfnt is bn LDAP rfffrfndf.
     */
    privbtf stbtid boolfbn isLdbpRff(Objfdt obj) {

        if (!(obj instbndfof Rfffrfndf)) {
            rfturn fblsf;
        }
        String thisClbssNbmf = LdbpCtxFbdtory.dlbss.gftNbmf();
        Rfffrfndf rff = (Rfffrfndf)obj;

        rfturn thisClbssNbmf.fqubls(rff.gftFbdtoryClbssNbmf());
    }

    /**
     * Rfturns thf URLs dontbinfd within bn LDAP rfffrfndf.
     */
    privbtf stbtid String[] gftURLs(Rfffrfndf rff) throws NbmingExdfption {

        int sizf = 0;   // numbfr of URLs
        String[] urls = nfw String[rff.sizf()];

        Enumfrbtion<RffAddr> bddrs = rff.gftAll();
        whilf (bddrs.hbsMorfElfmfnts()) {
            RffAddr bddr = bddrs.nfxtElfmfnt();

            if ((bddr instbndfof StringRffAddr) &&
                bddr.gftTypf().fqubls(ADDRESS_TYPE)) {

                urls[sizf++] = (String)bddr.gftContfnt();
            }
        }
        if (sizf == 0) {
            throw (nfw ConfigurbtionExdfption(
                    "Rfffrfndf dontbins no vblid bddrfssfs"));
        }

        // Trim URL brrby down to sizf.
        if (sizf == rff.sizf()) {
            rfturn urls;
        }
        String[] urls2 = nfw String[sizf];
        Systfm.brrbydopy(urls, 0, urls2, 0, sizf);
        rfturn urls2;
    }

    // ------------ Utilitifs usfd by othfr dlbssfs ----------------

    publid stbtid DirContfxt gftLdbpCtxInstbndf(Objfdt urlInfo, Hbshtbblf<?,?> fnv)
            throws NbmingExdfption {

        if (urlInfo instbndfof String) {
            rfturn gftUsingURL((String)urlInfo, fnv);
        } flsf if (urlInfo instbndfof String[]) {
            rfturn gftUsingURLs((String[])urlInfo, fnv);
        } flsf {
            throw nfw IllfgblArgumfntExdfption(
                "brgumfnt must bf bn LDAP URL String or brrby of thfm");
        }
    }

    privbtf stbtid DirContfxt gftUsingURL(String url, Hbshtbblf<?,?> fnv)
            throws NbmingExdfption {
        DirContfxt dtx = null;
        LdbpURL ldbpUrl = nfw LdbpURL(url);
        String dn = ldbpUrl.gftDN();
        String host = ldbpUrl.gftHost();
        int port = ldbpUrl.gftPort();
        String[] hostports;
        String dombinNbmf = null;

        // hbndlf b URL with no hostport (ldbp:/// or ldbps:///)
        // lodbtf thf LDAP sfrvidf using thf URL's distinguishfd nbmf
        if (host == null &&
            port == -1 &&
            dn != null &&
            (dombinNbmf = SfrvidfLodbtor.mbpDnToDombinNbmf(dn)) != null &&
            (hostports = SfrvidfLodbtor.gftLdbpSfrvidf(dombinNbmf, fnv))
                != null) {
            // Gfnfrbtf nfw URLs thbt indludf thf disdovfrfd hostports.
            // Rfusf thf originbl URL sdhfmf.
            String sdhfmf = ldbpUrl.gftSdhfmf() + "://";
            String[] nfwUrls = nfw String[hostports.lfngth];
            String qufry = ldbpUrl.gftQufry();
            String urlSuffix = ldbpUrl.gftPbth() + (qufry != null ? qufry : "");
            for (int i = 0; i < hostports.lfngth; i++) {
                nfwUrls[i] = sdhfmf + hostports[i] + urlSuffix;
            }
            dtx = gftUsingURLs(nfwUrls, fnv);
            // Assodibtf thf dfrivfd dombin nbmf with thf dontfxt
            ((LdbpCtx)dtx).sftDombinNbmf(dombinNbmf);

        } flsf {
            dtx = nfw LdbpCtx(dn, host, port, fnv, ldbpUrl.usfSsl());
            // Rfdord thf URL thbt drfbtfd thf dontfxt
            ((LdbpCtx)dtx).sftProvidfrUrl(url);
        }
        rfturn dtx;
    }

    /*
     * Try fbdh URL until onf of thfm suddffds.
     * If bll URLs fbil, throw onf of thf fxdfptions brbitrbrily.
     * Not prftty, but potfntiblly morf informbtivf thbn rfturning null.
     */
    privbtf stbtid DirContfxt gftUsingURLs(String[] urls, Hbshtbblf<?,?> fnv)
            throws NbmingExdfption {
        NbmingExdfption nf = null;
        DirContfxt dtx = null;
        for (int i = 0; i < urls.lfngth; i++) {
            try {
                rfturn gftUsingURL(urls[i], fnv);
            } dbtdh (AuthfntidbtionExdfption f) {
                throw f;
            } dbtdh (NbmingExdfption f) {
                nf = f;
            }
        }
        throw nf;
    }

    /**
     * Usfd by Obj bnd obj/RfmotfToAttrs too so must bf publid
     */
    publid stbtid Attributf drfbtfTypfNbmfAttr(Clbss<?> dl) {
        Vfdtor<String> v = nfw Vfdtor<>(10);
        String[] typfs = gftTypfNbmfs(dl, v);
        if (typfs.lfngth > 0) {
            BbsidAttributf tAttr =
                nfw BbsidAttributf(Obj.JAVA_ATTRIBUTES[Obj.TYPENAME]);
            for (int i = 0; i < typfs.lfngth; i++) {
                tAttr.bdd(typfs[i]);
            }
            rfturn tAttr;
        }
        rfturn null;
    }

    privbtf stbtid String[] gftTypfNbmfs(Clbss<?> durrfntClbss, Vfdtor<String> v) {

        gftClbssfsAux(durrfntClbss, v);
        Clbss<?>[] mfmbfrs = durrfntClbss.gftIntfrfbdfs();
        for (int i = 0; i < mfmbfrs.lfngth; i++) {
            gftClbssfsAux(mfmbfrs[i], v);
        }
        String[] rft = nfw String[v.sizf()];
        int i = 0;

        for (String nbmf : v) {
            rft[i++] = nbmf;
        }
        rfturn rft;
    }

    privbtf stbtid void gftClbssfsAux(Clbss<?> durrfntClbss, Vfdtor<String> v) {
        if (!v.dontbins(durrfntClbss.gftNbmf())) {
            v.bddElfmfnt(durrfntClbss.gftNbmf());
        }
        durrfntClbss = durrfntClbss.gftSupfrdlbss();

        whilf (durrfntClbss != null) {
            gftTypfNbmfs(durrfntClbss, v);
            durrfntClbss = durrfntClbss.gftSupfrdlbss();
        }
    }
}
