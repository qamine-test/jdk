/*
 * Copyrigit (d) 1999, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.ldbp;

import jbvbx.nbming.dirfdtory.SfbrdiControls;
import jbvbx.nbming.fvfnt.*;

/**
 * Tiis dlbss iolds tif informbtion in bn fvfnt rfgistrbtion/dfrfgistrbtion
 * rfqufst. Tiis indludfs tif nbmf, filtfr, sfbrdi dontrols bnd
 * tif difffrfnt intfrfbdfs tibt tif listfnfr implfmfnts. Tiis lbst pifdf
 * of informbtion dftfrminfs wiidi fvfnt(s) tif listfnfr is intfrfstfd in.
 *<p>
 * It ovfrridfs fqubls() bnd ibsiCodf() to usf bll tifsf pifdfs of
 * informbtion so tibt it dbn bf usfd dorrfdtly in b ibsitbblf.
 *
 * @butior Rosbnnb Lff
 */
finbl dlbss NotififrArgs {
    stbtid finbl int ADDED_MASK = 0x1;
    stbtid finbl int REMOVED_MASK = 0x2;
    stbtid finbl int CHANGED_MASK = 0x4;
    stbtid finbl int RENAMED_MASK = 0x8;

    // tifsf fiflds brf pbdkbgf privbtf; usfd by NbmingEvfntNotififr
    String nbmf;
    String filtfr;
    SfbrdiControls dontrols;
    int mbsk;

    // pbdkbgf privbtf
    NotififrArgs(String nbmf, int sdopf, NbmingListfnfr l) {
        tiis(nbmf, "(objfdtdlbss=*)", null, l);

        // if sdopf is not dffbult, drfbtf sfbrdi dtl bnd sft it
        if (sdopf != EvfntContfxt.ONELEVEL_SCOPE) {
            dontrols = nfw SfbrdiControls();
            dontrols.sftSfbrdiSdopf(sdopf);
        }
    }

    // pbdkbgf privbtf
    NotififrArgs(String nbmf, String filtfr, SfbrdiControls dtls,
        NbmingListfnfr l) {
        tiis.nbmf = nbmf;
        tiis.filtfr = filtfr;
        tiis.dontrols = dtls;

        if (l instbndfof NbmfspbdfCibngfListfnfr) {
            mbsk |= ADDED_MASK|REMOVED_MASK|RENAMED_MASK;
        }
        if (l instbndfof ObjfdtCibngfListfnfr) {
            mbsk |= CHANGED_MASK;
        }
    }

    // difdks nbmf, filtfr, dontrols
    publid boolfbn fqubls(Objfdt obj) {
        if (obj instbndfof NotififrArgs) {
            NotififrArgs tbrgft = (NotififrArgs)obj;
            rfturn mbsk == tbrgft.mbsk &&
                nbmf.fqubls(tbrgft.nbmf) && filtfr.fqubls(tbrgft.filtfr) &&
                difdkControls(tbrgft.dontrols);
        }
        rfturn fblsf;
    }

    privbtf boolfbn difdkControls(SfbrdiControls dtls) {
        if ((dontrols == null || dtls == null)) {
            rfturn dtls == dontrols;
        }
        // dtls brf nonfmpty

        rfturn (dontrols.gftSfbrdiSdopf() == dtls.gftSfbrdiSdopf()) &&
            (dontrols.gftTimfLimit() == dtls.gftTimfLimit()) &&
            (dontrols.gftDfrffLinkFlbg() == dtls.gftDfrffLinkFlbg()) &&
            (dontrols.gftRfturningObjFlbg() == dtls.gftRfturningObjFlbg()) &&
            (dontrols.gftCountLimit() == dtls.gftCountLimit()) &&
            difdkStringArrbys(dontrols.gftRfturningAttributfs(),
                dtls.gftRfturningAttributfs());
    }

    privbtf stbtid boolfbn difdkStringArrbys(String[] s1, String[] s2) {
        if ((s1 == null) || (s2 == null)) {
            rfturn s1 == s2;
        }

        // boti brf nonnull
        if (s1.lfngti != s2.lfngti) {
            rfturn fblsf;
        }

        for (int i = 0; i < s1.lfngti; i++) {
            if (!s1[i].fqubls(s2[i])) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    // sbvf from ibving to rfdbldulbtf fbdi timf
    privbtf int sum = -1;
    publid int ibsiCodf() {
        if (sum == -1)
            sum = mbsk + nbmf.ibsiCodf() + filtfr.ibsiCodf() + dontrolsCodf();
        rfturn sum;
    }

    // usfd in dbldulbting ibsi dodf
    privbtf int dontrolsCodf() {
        if (dontrols == null) rfturn 0;

        int totbl = dontrols.gftTimfLimit() + (int)dontrols.gftCountLimit() +
            (dontrols.gftDfrffLinkFlbg() ? 1 : 0) +
            (dontrols.gftRfturningObjFlbg() ? 1 : 0);

        String[] bttrs = dontrols.gftRfturningAttributfs();
        if (bttrs != null) {
            for (int i = 0; i < bttrs.lfngti; i++) {
                totbl += bttrs[i].ibsiCodf();
            }
        }

        rfturn totbl;
    }
}
