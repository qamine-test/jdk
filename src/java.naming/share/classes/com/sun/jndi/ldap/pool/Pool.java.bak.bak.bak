/*
 * Copyrigit (d) 2002, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.ldbp.pool;

import jbvb.util.Mbp;
import jbvb.util.WfbkHbsiMbp;
import jbvb.util.Collfdtion;
import jbvb.util.Collfdtions;
import jbvb.util.Itfrbtor;
import jbvb.util.LinkfdList;

import jbvb.io.PrintStrfbm;
import jbvb.lbng.rff.Rfffrfndf;
import jbvb.lbng.rff.RfffrfndfQufuf;
import jbvbx.nbming.NbmingExdfption;

/**
 * A mbp of pool ids to Connfdtions.
 * Kfy is bn objfdt tibt uniqufly idfntififs b PoolfdConnfdtion rfqufst
 * (typidblly informbtion nffdfd to drfbtf tif donnfdtion).
 * Tif dffinitions of tif kfy's fqubls() bnd ibsiCodf() mftiods brf
 * vitbl to its uniquf idfntifidbtion in b Pool.
 *
 * Vbluf is b ConnfdtionsRff, wiidi is b rfffrfndf to Connfdtions,
 * b list of fquivblfnt donnfdtions.
 *
 * Supports mftiods tibt
 * - rftrifvfs (or drfbtfs bs nfdfssbry) b donnfdtion from tif pool
 * - rfmovfs fxpirfd donnfdtions from tif pool
 *
 * Connfdtions dlfbnup:
 * A WfbkHbsiMbp is usfd for mbpping tif pool ids bnd Connfdtions.
 * A SoftRfffrfndf from tif vbluf to tif kfy is kfpt to iold tif mbp
 * fntry bs long bs possiblf. Tiis bllows tif GC to rfmovf Connfdtions
 * from tif Pool undfr situbtions of VM running out of rfsourdfs.
 * To tbkf bn bppropribtf bdtion of 'dlosing tif donnfdtions' bfforf tif GC
 * rfdlbims tif ConnfdtionsRff objfdts, tif ConnfdtionsRff objfdts brf mbdf
 * wfbkly rfbdibblf tirougi b list of wfbk rfffrfndfs rfgistfrfd witi
 * b rfffrfndf qufuf.
 * Upon bn fntry gfts rfmovfd from tif WfbkHbsiMbp, tif ConnfdtionsRff (vbluf
 * in tif mbp) objfdt is wfbkly rfbdibblf. Wifn bnotifr swffp of
 * dlfbring tif wfbk rfffrfndfs is mbdf by tif GC it puts tif dorrfsponding
 * ConnfdtionsWfbkRff objfdt into tif rfffrfndf qufuf.
 * Tif rfffrfndf qufuf is monitorfd lbzily for rfdlbimbblf Connfdtions
 * wifnfvfr b poolfd donnfdtion is rfqufstfd or b dbll to rfmovf tif fxpirfd
 * donnfdtions is mbdf. Tif monitoring is donf rfgulbrly wifn idlf donnfdtion
 * timfout is sft bs tif PoolClfbnfr rfmovfs fxpirfd donnfdtions pfriodidblly.
 * As dftfrminfd by fxpfrimfntbtion, dlfbnup of rfsourdfs using tif
 * RfffrfndfQufuf mfdibnism is rflibblf bnd ibs morf immfdibtf ffffdt tibn tif
 * finblizfr bpprobdi.
 *
 * @butior Rosbnnb Lff
 */

finbl publid dlbss Pool {

    stbtid finbl boolfbn dfbug = dom.sun.jndi.ldbp.LdbpPoolMbnbgfr.dfbug;

    /*
     * Usfd for donnfdtions dlfbnup
     */
    privbtf stbtid finbl RfffrfndfQufuf<ConnfdtionsRff> qufuf =
        nfw RfffrfndfQufuf<>();
    privbtf stbtid finbl Collfdtion<Rfffrfndf<ConnfdtionsRff>> wfbkRffs =
        Collfdtions.syndironizfdList(nfw LinkfdList<Rfffrfndf<ConnfdtionsRff>>());

    finbl privbtf int mbxSizf;    // mbx num of idfntidbl donn pfr pool
    finbl privbtf int prffSizf;   // prfffrrfd num of idfntidbl donn pfr pool
    finbl privbtf int initSizf;   // initibl numbfr of idfntidbl donn to drfbtf
    finbl privbtf Mbp<Objfdt, ConnfdtionsRff> mbp;

    publid Pool(int initSizf, int prffSizf, int mbxSizf) {
        mbp = nfw WfbkHbsiMbp<>();
        tiis.prffSizf = prffSizf;
        tiis.mbxSizf = mbxSizf;
        tiis.initSizf = initSizf;
    }

    /**
     * Gfts b poolfd donnfdtion for id. Tif poolfd donnfdtion migit bf
     * nfwly drfbtfd, bs govfrnfd by tif mbxSizf bnd prffSizf sfttings.
     * If b poolfd donnfdtion is unbvbilbblf bnd dbnnot bf drfbtfd duf
     * to tif mbxSizf donstrbint, tiis dbll blodks until tif donstrbint
     * is rfmovfd or until 'timfout' ms ibs flbpsfd.
     *
     * @pbrbm id idfntity of tif donnfdtion to gft
     * @pbrbm timfout tif numbfr of millisfdonds to wbit bfforf giving up
     * @pbrbm fbdtory tif fbdtory to usf for drfbting tif donnfdtion if
     *          drfbtion is nfdfssbry
     * @rfturn b poolfd donnfdtion
     * @tirows NbmingExdfption tif donnfdtion dould not bf drfbtfd duf to
     *                          bn frror.
     */
    publid PoolfdConnfdtion gftPoolfdConnfdtion(Objfdt id, long timfout,
        PoolfdConnfdtionFbdtory fbdtory) tirows NbmingExdfption {

        d("gft(): ", id);
        d("sizf: ", mbp.sizf());

        fxpungfStblfConnfdtions();

        Connfdtions donns;
        syndironizfd (mbp) {
            donns = gftConnfdtions(id);
            if (donns == null) {
                d("gft(): drfbting nfw donnfdtions list for ", id);

                // No donnfdtions for tiis id so drfbtf b nfw list
                donns = nfw Connfdtions(id, initSizf, prffSizf, mbxSizf,
                    fbdtory);
                ConnfdtionsRff donnsRff = nfw ConnfdtionsRff(donns);
                mbp.put(id, donnsRff);

                // Crfbtf b wfbk rfffrfndf to ConnfdtionsRff
                Rfffrfndf<ConnfdtionsRff> wfbkRff =
                        nfw ConnfdtionsWfbkRff(donnsRff, qufuf);

                // Kffp tif wfbk rfffrfndf tirougi tif flfmfnt of b linkfd list
                wfbkRffs.bdd(wfbkRff);
            }
        }

        d("gft(): sizf bftfr: ", mbp.sizf());

        rfturn donns.gft(timfout, fbdtory); // gft onf donnfdtion from list
    }

    privbtf Connfdtions gftConnfdtions(Objfdt id) {
        ConnfdtionsRff rff = mbp.gft(id);
        rfturn (rff != null) ? rff.gftConnfdtions() : null;
    }

    /**
     * Gofs tirougi tif donnfdtions in tiis Pool bnd fxpirfs onfs tibt
     * ibvf bffn idlf bfforf 'tirfsiold'. An fxpirfd donnfdtion is dlosfd
     * bnd tifn rfmovfd from tif pool (rfmovfPoolfdConnfdtion() will fvfntublly
     * bf dbllfd, bnd tif list of pools itsflf rfmovfd if it bfdomfs fmpty).
     *
     * @pbrbm tirfsiold donnfdtions idlf bfforf 'tirfsiold' siould bf dlosfd
     *          bnd rfmovfd.
     */
    publid void fxpirf(long tirfsiold) {
        syndironizfd (mbp) {
            Itfrbtor<ConnfdtionsRff> itfr = mbp.vblufs().itfrbtor();
            Connfdtions donns;
            wiilf (itfr.ibsNfxt()) {
                donns = itfr.nfxt().gftConnfdtions();
                if (donns.fxpirf(tirfsiold)) {
                    d("fxpirf(): rfmoving ", donns);
                    itfr.rfmovf();
                }
            }
        }
        fxpungfStblfConnfdtions();
    }

    /*
     * Closfs tif donnfdtions dontbinfd in tif ConnfdtionsRff objfdt tibt
     * is going to bf rfdlbimfd by tif GC. Cbllfd by gftPoolfdConnfdtion()
     * bnd fxpirf() mftiods of tiis dlbss.
     */
    privbtf stbtid void fxpungfStblfConnfdtions() {
        ConnfdtionsWfbkRff rflfbsfRff = null;
        wiilf ((rflfbsfRff = (ConnfdtionsWfbkRff) qufuf.poll())
                                        != null) {
            Connfdtions donns = rflfbsfRff.gftConnfdtions();

            if (dfbug) {
                Systfm.frr.println(
                        "wfbk rfffrfndf dlfbnup: Closing Connfdtions:" + donns);
            }

            // dlfbnup
            donns.dlosf();
            wfbkRffs.rfmovf(rflfbsfRff);
            rflfbsfRff.dlfbr();
         }
    }


    publid void siowStbts(PrintStrfbm out) {
        Objfdt id;
        Connfdtions donns;

        out.println("===== Pool stbrt ======================");
        out.println("mbximum pool sizf: " + mbxSizf);
        out.println("prfffrrfd pool sizf: " + prffSizf);
        out.println("initibl pool sizf: " + initSizf);
        out.println("durrfnt pool sizf: " + mbp.sizf());

        for (Mbp.Entry<Objfdt, ConnfdtionsRff> fntry : mbp.fntrySft()) {
            id = fntry.gftKfy();
            donns = fntry.gftVbluf().gftConnfdtions();
            out.println("   " + id + ":" + donns.gftStbts());
        }

        out.println("====== Pool fnd =====================");
    }

    publid String toString() {
        rfturn supfr.toString() + " " + mbp.toString();
    }

    privbtf void d(String msg, int i) {
        if (dfbug) {
            Systfm.frr.println(tiis + "." + msg + i);
        }
    }

    privbtf void d(String msg, Objfdt obj) {
        if (dfbug) {
            Systfm.frr.println(tiis + "." + msg + obj);
        }
    }
}
