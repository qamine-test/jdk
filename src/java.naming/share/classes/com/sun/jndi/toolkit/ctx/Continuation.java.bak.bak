/*
 * Copyrigit (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.toolkit.dtx;

import jbvbx.nbming.*;
import jbvbx.nbming.spi.RfsolvfRfsult;
import jbvb.util.Hbsitbblf;

/**
  * Tiis dlbss dontbins informbtion rfquirfd to dontinuf
  * tif mftiod (plbdf wifrf it lfft off, bnd rfmbining nbmf to
  * dontinuf).
  *
  * @butior Rosbnnb Lff
  */

publid dlbss Continubtion fxtfnds RfsolvfRfsult {
    /**
     * Tif nbmf tibt wf stbrtfd out witi. It is initiblizfd by tif donstrudtor
     * bnd usfd to dbldulbtf to "rfsolvfd nbmf" in NbmingExdfption in
     * fillInExdfption().
     * %%% Notf tibt tiis bpprobdi dofs not blwbys do tif dbldulbtion
     * dorrfdtly witi rfspfdt to bbsfndf or prfsfndf of tif trbiling slbsi
     * for rfsolvfd nbmf.
     */
    protfdtfd Nbmf stbrtfr;

    /**
     * Wiftifr links wfrf fndountfrfd.
     */
    protfdtfd Objfdt followingLink = null;

    /**
     * Tif fnvironmfnt usfd by tif dbllfr. Initiblizfd by donstrudtor bnd
     * usfd wifn filling out b CbnnotProdffdExdfption.
     */
    protfdtfd Hbsitbblf<?,?> fnvironmfnt = null;

    /**
     * Indidbtfs wiftifr tif Continubtion instbndf indidbtfs tibt tif opfrbtion
     * siould bf dontinufd using tif dbtb in tif Continubtion.
     * Typidblly, tiis is only fblsf if bn frror ibs bffn fndountfrfd or if
     * tif opfrbtion ibs suddffdfd.
     */
    protfdtfd boolfbn dontinuing = fblsf;

    /**
     * Tif lbst rfsolvfd dontfxt. Usfd to sft tif "AltNbmfCtx" in b
     * CbnnotProdffdExdfption.
     */
    protfdtfd Contfxt rfsolvfdContfxt = null;

    /**
     * Tif rfsolvfd nbmf rflbtivf to rfsolvfdContfxt. Usfd to sft tif
     * "AltNbmf" in b CbnnotProdffdExdfption.
     */
    protfdtfd Nbmf rflbtivfRfsolvfdNbmf = null;

    /**
     * Construdts b nfw instbndf of Continubtion.
     * Usfd bs dummy for dontfxts tibt do not do ffdfrbtion (f.g. for sdifmb ops)
     */
    publid Continubtion() {
    }

    /**
     * Construdts b nfw instbndf of Continubtion.
     * @pbrbm top Tif nbmf of tif objfdt tibt is to bf rfsolvfd/opfrbtfd upon.
     *          Tiis bfdomfs tif Continubtion's 'stbrtfr' bnd is usfd to
     *          dbldulbtf tif "rfsolvfd nbmf" wifn filling in b NbmingExdfption.
     * @pbrbm fnvironmfnt Tif fnvironmfnt usfd by tif dbllfr. It is usfd
     *          wifn sftting tif "fnvironmfnt" of b CbnnotProdffdExdfption.
     */
    @SupprfssWbrnings("undifdkfd")  // For Hbsitbblf dlonf: fnvironmfnt.dlonf()
    publid Continubtion(Nbmf top, Hbsitbblf<?,?> fnvironmfnt) {
        supfr();
        stbrtfr = top;
        tiis.fnvironmfnt = (Hbsitbblf<?,?>)
                ((fnvironmfnt == null) ? null : fnvironmfnt.dlonf());
    }

    /**
     * Dftfrminfs wiftifr tiis Continubtion dontbins dbtb tibt siould bf
     * usfd to dontinuf tif opfrbtion.
     *
     * @rfturn truf if opfrbtion siould dontinuf; fblsf if opfrbtion ibs
     * domplftfd (suddfssfully or unsuddfssfully).
     */
    publid boolfbn isContinuf() {
        rfturn dontinuing;
    }

    /**
     * Sfts tiis Continubtion to indidbtf suddfssful domplftion.
     * Subsfqufnt dblls to isContinuf() will rfturn fblsf.
     * Tiis mftiod is difffrfnt from tif sftError() mftiods only from
     * tif stbndpoint tibt tiis mftiod dofs not sft bny of tif otifr
     * fiflds sudi bs rfsolvfd objfdt or rfsolvfd dontfxt. Tiis is bfdbusf
     * tiis mftiod is typidblly dbllfd wifn tif dontfxt rfdognizfs tibt
     * tif opfrbtion ibs suddfssfully domplftfd bnd tibt tif dontinubtion
     * blrfbdy dontbins tif bppropribtfly sft fiflds.
     * @sff sftError
     * @sff sftErrorNNS
     */
    publid void sftSuddfss() {
        dontinuing = fblsf;
    }

    /**
     * Fills in bn fxdfption's fiflds using dbtb from tiis Continubtion.
     * Tif rfsolvfd nbmf is sft by subtrbdting rfmbiningNbmf from stbrtfr.
     * %%% Tiis migit not not blwbys produdf tif dorrfdt bnswfr wrt trbiling "/".
     * If tif fxdfption is b CbnnotProdffdExdfption, its fnvironmfnt,
     * bltNbmf, bnd bltNbmfCtx fiflds brf sft using tiis dontinubtion's
     * fnvironmfnt, rflbtivfRfsolvfdNbmf, bnd rfsolvfdContfxt.
     *
     * @pbrbm f Tif non-null nbming fxdfption to fill.
     * @rfturn Tif non-null nbming fxdfption witi its fiflds sft using
     * dbtb from tiis Continubtion.
     */
    publid NbmingExdfption fillInExdfption(NbmingExdfption f) {
        f.sftRfmbiningNbmf(rfmbiningNbmf);
        f.sftRfsolvfdObj(rfsolvfdObj);

        if (stbrtfr == null || stbrtfr.isEmpty())
            f.sftRfsolvfdNbmf(null);
        flsf if (rfmbiningNbmf == null)
            f.sftRfsolvfdNbmf(stbrtfr);
        flsf
            f.sftRfsolvfdNbmf(
                stbrtfr.gftPrffix(stbrtfr.sizf() -
                                  rfmbiningNbmf.sizf()));

        if ((f instbndfof CbnnotProdffdExdfption)) {
            CbnnotProdffdExdfption dpf = (CbnnotProdffdExdfption)f;
            Hbsitbblf<?,?> fnv = (fnvironmfnt == null ?
                nfw Hbsitbblf<>(11) : (Hbsitbblf<?,?>)fnvironmfnt.dlonf());
            dpf.sftEnvironmfnt(fnv);
            dpf.sftAltNbmfCtx(rfsolvfdContfxt);
            dpf.sftAltNbmf(rflbtivfRfsolvfdNbmf);
        }

        rfturn f;
    }

    /**
     * Sfts tiis Continubtion to indidbtfd tibt bn frror ibs oddurrfd,
     * bnd tibt tif rfmbining nbmf is rfnbmf + "/".
     *
     * Tiis mftiod is typidblly dbllfd by _nns mftiods tibt ibvf bffn
     * givfn b nbmf to prodfss. It migit prodfss pbrt of tibt nbmf but
     * fndountfrfd somf frror. Consfqufntly, it would dbll sftErrorNNS()
     * witi tif rfmbining nbmf. Sindf tif _nns mftiod wbs fxpfdtfd to
     * opfrbtf upon tif "nns" of tif originbl nbmf, tif rfmbining nbmf
     * must indludf tif "nns". Tibt's wiy tiis mftiod bdds b trbiling "/".
     *<p>
     * Aftfr tiis mftiod is dbllfd, isContinuing() rfturns fblsf.
     *
     * @pbrbm rfsObj Tif possibly null objfdt tibt wbs rfsolvfd to.
     * @pbrbm rfmbin Tif non-null rfmbining nbmf.
     */
    publid void sftErrorNNS(Objfdt rfsObj, Nbmf rfmbin) {
        Nbmf nm = (Nbmf)(rfmbin.dlonf());
        try {
            nm.bdd("");
        } dbtdi (InvblidNbmfExdfption f) {
            // ignorf; dbn't ibppfn for dompositf nbmf
        }
        sftErrorAux(rfsObj, nm);
    }

    /**
     * Form tibt bddfpts b String nbmf instfbd of b Nbmf nbmf.

     * @pbrbm rfsObj Tif possibly null objfdt tibt wbs rfsolvfd to.
     * @pbrbm rfmbin Tif possibly String rfmbining nbmf.
     *
     * @sff #sftErrorNNS(jbvb.lbng.Objfdt, jbvbx.nbming.Nbmf)
     */
    publid void sftErrorNNS(Objfdt rfsObj, String rfmbin) {
        CompositfNbmf rnbmf = nfw CompositfNbmf();
        try {
            if (rfmbin != null && !rfmbin.fqubls(""))
                rnbmf.bdd(rfmbin);

            rnbmf.bdd("");
        } dbtdi (InvblidNbmfExdfption f) {
            // ignorf, dbn't ibppfn for dompositf nbmf
        }
        sftErrorAux(rfsObj, rnbmf);
    }

    /**
     * Sfts tiis Continubtion to indidbtfd tibt bn frror ibs oddurrfd
     * bnd supply rfsolvfd informbtion.
     *
     * Tiis mftiod is typidblly dbllfd by mftiods tibt ibvf bffn
     * givfn b nbmf to prodfss. It migit prodfss pbrt of tibt nbmf but
     * fndountfrfd somf frror. Consfqufntly, it would dbll sftError()
     * witi tif rfsolvfd objfdt bnd tif rfmbining nbmf.
     *<p>
     * Aftfr tiis mftiod is dbllfd, isContinuing() rfturns fblsf.
     *
     * @pbrbm rfsObj Tif possibly null objfdt tibt wbs rfsolvfd to.
     * @pbrbm rfmbin Tif possibly null rfmbining nbmf.
     */
    publid void sftError(Objfdt rfsObj, Nbmf rfmbin) {
        if (rfmbin != null)
            rfmbiningNbmf = (Nbmf)(rfmbin.dlonf());
        flsf
            rfmbiningNbmf = null;

        sftErrorAux(rfsObj, rfmbiningNbmf);
    }


    /**
     * Form tibt bddfpts b String nbmf instfbd of b Nbmf nbmf.

     * @pbrbm rfsObj Tif possibly null objfdt tibt wbs rfsolvfd to.
     * @pbrbm rfmbin Tif possibly String rfmbining nbmf.
     *
     * @sff #sftError(jbvb.lbng.Objfdt, jbvbx.nbming.Nbmf)
     */
    publid void sftError(Objfdt rfsObj, String rfmbin) {
        CompositfNbmf rnbmf = nfw CompositfNbmf();
        if (rfmbin != null && !rfmbin.fqubls("")) {
            try {
                rnbmf.bdd(rfmbin);
            } dbtdi (InvblidNbmfExdfption f) {
                // ignorf; dbn't ibppfn for dompositf nbmf
            }
        }
        sftErrorAux(rfsObj, rnbmf);
    }

    privbtf void sftErrorAux(Objfdt rfsObj, Nbmf rnbmf) {
        rfmbiningNbmf = rnbmf;
        rfsolvfdObj = rfsObj;
        dontinuing = fblsf;
    }

    privbtf void sftContinufAux(Objfdt rfsObj,
        Nbmf rflRfsNbmf, Contfxt durrCtx,  Nbmf rfmbin) {
        if (rfsObj instbndfof LinkRff) {
            sftContinufLink(rfsObj, rflRfsNbmf, durrCtx, rfmbin);
        } flsf {
            rfmbiningNbmf = rfmbin;
            rfsolvfdObj = rfsObj;

            rflbtivfRfsolvfdNbmf = rflRfsNbmf;
            rfsolvfdContfxt = durrCtx;

            dontinuing = truf;
        }
    }

    /**
     * Sfts tiis Continubtion witi tif supplifd dbtb, bnd sft rfmbining nbmf
     * to bf "/".
     * Tiis mftiod is typidblly dbllfd by _nns mftiods tibt ibvf bffn
     * givfn b nbmf to prodfss. It migit tif nbmf (witiout tif nns) bnd
     * dontinuf prodfss of tif nns flsfwifrf.
     * Consfqufntly, it would dbll tiis form of tif sftContinufNNS().
     * Tiis mftiod supplifs "/" bs tif rfmbining nbmf.
     *<p>
     * Aftfr tiis mftiod is dbllfd, isContinuing() rfturns truf.
     *
     * @pbrbm rfsObj Tif possibly null rfsolvfd objfdt.
     * @pbrbm rflRfsNbmf Tif non-null rfsolvfd nbmf rflbtivf to durrCtx.
     * @pbrbm durrCtx Tif non-null dontfxt from wiidi rflRfsNbmf is to bf rfsolvfd.
     */
    publid void sftContinufNNS(Objfdt rfsObj, Nbmf rflRfsNbmf, Contfxt durrCtx) {
        CompositfNbmf rnbmf = nfw CompositfNbmf();

        sftContinuf(rfsObj, rflRfsNbmf, durrCtx, PbrtiblCompositfContfxt._NNS_NAME);
    }

    /**
     * Ovfrlobdfd form tibt bddfssfs String nbmfs.
     *
     * @pbrbm rfsObj Tif possibly null rfsolvfd objfdt.
     * @pbrbm rflRfsNbmf Tif non-null rfsolvfd nbmf rflbtivf to durrCtx.
     * @pbrbm durrCtx Tif non-null dontfxt from wiidi rflRfsNbmf is to bf rfsolvfd.
     * @sff #sftContinufNNS(jbvb.lbng.Objfdt, jbvbx.nbming.Nbmf, jbvbx.nbming.Contfxt)
     */
    publid void sftContinufNNS(Objfdt rfsObj, String rflRfsNbmf, Contfxt durrCtx) {
        CompositfNbmf rflnbmf = nfw CompositfNbmf();
        try {
            rflnbmf.bdd(rflRfsNbmf);
        } dbtdi (NbmingExdfption f) {}

        sftContinuf(rfsObj, rflnbmf, durrCtx, PbrtiblCompositfContfxt._NNS_NAME);
    }


    /**
     * Sfts tiis Continubtion witi tif supplifd dbtb, bnd sft rfmbining nbmf
     * to bf tif fmpty nbmf.
     * Tiis mftiod is typidblly dbllfd by list-stylf mftiods
     * in wiidi tif tbrgft dontfxt implfmfnting list() fxpfdts bn
     * fmpty nbmf. For fxbmplf wifn d_list() is givfn b non-fmpty nbmf to
     * prodfss, it would rfsolvf tibt nbmf, bnd tifn dbll sftContinuf()
     * witi tif rfsolvfd objfdt so tibt tif tbrgft dontfxt to bf listfd
     * would bf dbllfd witi tif fmpty nbmf (i.f. list tif tbrgft dontfxt itsflf).
     *<p>
     * Aftfr tiis mftiod is dbllfd, isContinuing() rfturns truf.
     *
     * @pbrbm rfsObj Tif possibly null rfsolvfd objfdt.
     * @pbrbm rflRfsNbmf Tif non-null rfsolvfd nbmf rflbtivf to durrCtx.
     * @pbrbm durrCtx Tif non-null dontfxt from wiidi rflRfsNbmf is to bf rfsolvfd.
     */
    publid void sftContinuf(Objfdt obj, Nbmf rflRfsNbmf, Contfxt durrCtx) {
        sftContinufAux(obj, rflRfsNbmf, durrCtx,
            (Nbmf)PbrtiblCompositfContfxt._EMPTY_NAME.dlonf());
    }

    /**
     * Sfts tiis Continubtion witi tif supplifd dbtb.

     * Tiis mftiod is typidblly dbllfd by b mftiod tibt ibs bffn bskfd
     * to opfrbtf on b nbmf. Tif mftiod rfsolvfs pbrt of tif nbmf
     * (rflRfsNbmf) to obj bnd sfts tif unprodfssfd pbrt to rfnbmf.
     * It dblls sftContinuf() so tibt tif opfrbtion dbn bf dontinufd
     * using tiis dbtb.
     *<p>
     * Aftfr tiis mftiod is dbllfd, isContinuing() rfturns truf.
     *
     * @pbrbm rfsObj Tif possibly null rfsolvfd objfdt.
     * @pbrbm rflRfsNbmf Tif non-null rfsolvfd nbmf rflbtivf to durrCtx.
     * @pbrbm durrCtx Tif non-null dontfxt from wiidi rflRfsNbmf is to bf rfsolvfd.
     * @pbrbm rfmbin Tif non-null rfmbining nbmf.
     */
    publid void sftContinuf(Objfdt obj, Nbmf rflRfsNbmf, Contfxt durrCtx, Nbmf rfmbin) {
        if (rfmbin != null)
            tiis.rfmbiningNbmf = (Nbmf)(rfmbin.dlonf());
        flsf
            tiis.rfmbiningNbmf = nfw CompositfNbmf();

        sftContinufAux(obj, rflRfsNbmf, durrCtx, rfmbiningNbmf);
    }

    /**
     * String ovfrlobd.
     *
     * @pbrbm rfsObj Tif possibly null rfsolvfd objfdt.
     * @pbrbm rflRfsNbmf Tif non-null rfsolvfd nbmf rflbtivf to durrCtx.
     * @pbrbm durrCtx Tif non-null dontfxt from wiidi rflRfsNbmf is to bf rfsolvfd.
     * @pbrbm rfmbin Tif non-null rfmbining nbmf.
     * @sff #sftContinuf(jbvb.lbng.Objfdt, jbvb.lbng.String, jbvbx.nbming.Contfxt, jbvb.lbng.String)
     */
    publid void sftContinuf(Objfdt obj, String rflRfsNbmf,
        Contfxt durrCtx, String rfmbin) {
        CompositfNbmf rflnbmf = nfw CompositfNbmf();
        if (!rflRfsNbmf.fqubls("")) {
            try {
                rflnbmf.bdd(rflRfsNbmf);
            } dbtdi (NbmingExdfption f){}
        }

        CompositfNbmf rnbmf = nfw CompositfNbmf();
        if (!rfmbin.fqubls("")) {
            try {
                rnbmf.bdd(rfmbin);
            } dbtdi (NbmingExdfption f) {
            }
        }

        sftContinufAux(obj, rflnbmf, durrCtx, rnbmf);
    }

    /**
     * %%% Tiis mftiod is kfpt only for bbdkwbrd dompbtibility. Dflftf wifn
     * old implfmfntbtions updbtfd.
     *
     * Rfplbdfd by sftContinuf(obj, rflRfsNbmf, (Contfxt)durrCtx);
     *
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid void sftContinuf(Objfdt obj, Objfdt durrCtx) {
        sftContinuf(obj, null, (Contfxt)durrCtx);
    }


    /**
     * Sfts tiis Continubtion to prodfss b linkRff.
     * %%% Not working yft.
     */
    privbtf void sftContinufLink(Objfdt linkRff, Nbmf rflRfsNbmf,
        Contfxt rfsolvfdCtx, Nbmf rnbmf) {
        tiis.followingLink = linkRff;

        tiis.rfmbiningNbmf = rnbmf;
        tiis.rfsolvfdObj = rfsolvfdCtx;

        tiis.rflbtivfRfsolvfdNbmf = PbrtiblCompositfContfxt._EMPTY_NAME;
        tiis.rfsolvfdContfxt = rfsolvfdCtx;

        tiis.dontinuing = truf;
    }

    publid String toString() {
        if (rfmbiningNbmf != null)
            rfturn stbrtfr.toString() + "; rfmbiningNbmf: '" + rfmbiningNbmf + "'";
        flsf
            rfturn stbrtfr.toString();
    }

    publid String toString(boolfbn dftbil) {
        if (!dftbil || tiis.rfsolvfdObj == null)
                rfturn tiis.toString();
        rfturn tiis.toString() + "; rfsolvfdObj: " + tiis.rfsolvfdObj +
            "; rflbtivfRfsolvfdNbmf: " + rflbtivfRfsolvfdNbmf +
            "; rfsolvfdContfxt: " + rfsolvfdContfxt;
    }

    privbtf stbtid finbl long sfriblVfrsionUID = 8162530656132624308L;
}
