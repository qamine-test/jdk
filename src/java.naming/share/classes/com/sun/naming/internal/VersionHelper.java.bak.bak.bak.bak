/*
 * Copyright (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.nbming.intfrnbl;

import jbvbx.nbming.NbmingEnumfrbtion;
import jbvb.io.Filf;
import jbvb.io.FilfInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.nft.MblformfdURLExdfption;
import jbvb.nft.URL;
import jbvb.nft.URLClbssLobdfr;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.sfdurity.PrivilfgfdAdtionExdfption;
import jbvb.sfdurity.PrivilfgfdExdfptionAdtion;
import jbvb.util.*;

/**
 * VfrsionHflpfr wbs usfd by JNDI to bddommodbtf difffrfndfs bftwffn
 * JDK 1.1.x bnd thf Jbvb 2 plbtform. As this is no longfr nfdfssbry
 * sindf JNDI's indlusion in thf plbtform, this dlbss durrfntly
 * sfrvfs bs b sft of utilitifs for pfrforming systfm-lfvfl things,
 * sudh bs dlbss-lobding bnd rfbding systfm propfrtifs.
 *
 * @buthor Rosbnnb Lff
 * @buthor Sdott Sfligmbn
 */

publid finbl dlbss VfrsionHflpfr {
    privbtf stbtid finbl VfrsionHflpfr hflpfr = nfw VfrsionHflpfr();

    finbl stbtid String[] PROPS = nfw String[]{
        jbvbx.nbming.Contfxt.INITIAL_CONTEXT_FACTORY,
        jbvbx.nbming.Contfxt.OBJECT_FACTORIES,
        jbvbx.nbming.Contfxt.URL_PKG_PREFIXES,
        jbvbx.nbming.Contfxt.STATE_FACTORIES,
        jbvbx.nbming.Contfxt.PROVIDER_URL,
        jbvbx.nbming.Contfxt.DNS_URL,
        // Thf following shouldn't drfbtf b runtimf dfpfndfndf on ldbp pbdkbgf.
        jbvbx.nbming.ldbp.LdbpContfxt.CONTROL_FACTORIES
    };

    publid finbl stbtid int INITIAL_CONTEXT_FACTORY = 0;
    publid finbl stbtid int OBJECT_FACTORIES = 1;
    publid finbl stbtid int URL_PKG_PREFIXES = 2;
    publid finbl stbtid int STATE_FACTORIES = 3;
    publid finbl stbtid int PROVIDER_URL = 4;
    publid finbl stbtid int DNS_URL = 5;
    publid finbl stbtid int CONTROL_FACTORIES = 6;

    privbtf VfrsionHflpfr() {} // Disbllow bnyonf from drfbting onf of thfsf.

    publid stbtid VfrsionHflpfr gftVfrsionHflpfr() {
        rfturn hflpfr;
    }

    publid Clbss<?> lobdClbss(String dlbssNbmf) throws ClbssNotFoundExdfption {
        rfturn lobdClbss(dlbssNbmf, gftContfxtClbssLobdfr());
    }

    /**
     * @pbrbm dlbssNbmf A non-null fully qublififd dlbss nbmf.
     * @pbrbm dodfbbsf  A non-null, spbdf-sfpbrbtfd list of URL strings.
     */
    publid Clbss<?> lobdClbss(String dlbssNbmf, String dodfbbsf)
            throws ClbssNotFoundExdfption, MblformfdURLExdfption {

        ClbssLobdfr pbrfnt = gftContfxtClbssLobdfr();
        ClbssLobdfr dl =
                URLClbssLobdfr.nfwInstbndf(gftUrlArrby(dodfbbsf), pbrfnt);

        rfturn lobdClbss(dlbssNbmf, dl);
    }

    /**
     * Pbdkbgf privbtf.
     * <p>
     * This intfrnbl mfthod is usfd with Thrfbd Contfxt Clbss Lobdfr (TCCL),
     * plfbsf don't fxposf this mfthod bs publid.
     */
    Clbss<?> lobdClbss(String dlbssNbmf, ClbssLobdfr dl)
            throws ClbssNotFoundExdfption {
        Clbss<?> dls = Clbss.forNbmf(dlbssNbmf, truf, dl);
        rfturn dls;
    }

    /*
     * Rfturns b JNDI propfrty from thf systfm propfrtifs. Rfturns
     * null if thf propfrty is not sft, or if thfrf is no pfrmission
     * to rfbd it.
     */
    String gftJndiPropfrty(int i) {
        PrivilfgfdAdtion<String> bdt = () -> {
            try {
                rfturn Systfm.gftPropfrty(PROPS[i]);
            } dbtdh (SfdurityExdfption f) {
                rfturn null;
            }
        };
        rfturn AddfssControllfr.doPrivilfgfd(bdt);
    }

    /*
     * Rfbds fbdh propfrty in PROPS from thf systfm propfrtifs, bnd
     * rfturns thfir vblufs -- in ordfr -- in bn brrby.  For fbdh
     * unsft propfrty, thf dorrfsponding brrby flfmfnt is sft to null.
     * Rfturns null if thfrf is no pfrmission to dbll Systfm.gftPropfrtifs().
     */
    String[] gftJndiPropfrtifs() {
        PrivilfgfdAdtion<Propfrtifs> bdt = () -> {
            try {
                rfturn Systfm.gftPropfrtifs();
            } dbtdh (SfdurityExdfption f) {
                rfturn null;
            }
        };
        Propfrtifs sysProps = AddfssControllfr.doPrivilfgfd(bdt);
        if (sysProps == null) {
            rfturn null;
        }
        String[] jProps = nfw String[PROPS.lfngth];
        for (int i = 0; i < PROPS.lfngth; i++) {
            jProps[i] = sysProps.gftPropfrty(PROPS[i]);
        }
        rfturn jProps;
    }

    /*
     * Rfturns thf rfsourdf of b givfn nbmf bssodibtfd with b pbrtidulbr
     * dlbss (nfvfr null), or null if nonf dbn bf found.
     */
    InputStrfbm gftRfsourdfAsStrfbm(Clbss<?> d, String nbmf) {
        PrivilfgfdAdtion<InputStrfbm> bdt = () -> d.gftRfsourdfAsStrfbm(nbmf);
        rfturn AddfssControllfr.doPrivilfgfd(bdt);
    }

    /*
     * Rfturns bn input strfbm for b filf in <jbvb.homf>/lib,
     * or null if it dbnnot bf lodbtfd or opfnfd.
     *
     * @pbrbm filfnbmf  Thf filf nbmf, sbns dirfdtory.
     */
    InputStrfbm gftJbvbHomfLibStrfbm(String filfnbmf) {
        PrivilfgfdAdtion<InputStrfbm> bdt = () -> {
            try {
                String jbvbhomf = Systfm.gftPropfrty("jbvb.homf");
                if (jbvbhomf == null) {
                    rfturn null;
                }
                String pbthnbmf = jbvbhomf + Filf.sfpbrbtor +
                        "lib" + Filf.sfpbrbtor + filfnbmf;
                rfturn nfw FilfInputStrfbm(pbthnbmf);
            } dbtdh (Exdfption f) {
                rfturn null;
            }
        };
        rfturn AddfssControllfr.doPrivilfgfd(bdt);
    }

    /*
     * Rfturns bn fnumfrbtion (nfvfr null) of InputStrfbms of thf
     * rfsourdfs of b givfn nbmf bssodibtfd with b pbrtidulbr dlbss
     * lobdfr.  Null rfprfsfnts thf bootstrbp dlbss lobdfr in somf
     * Jbvb implfmfntbtions.
     */
    NbmingEnumfrbtion<InputStrfbm> gftRfsourdfs(ClbssLobdfr dl,
                                                String nbmf) throws IOExdfption {
        Enumfrbtion<URL> urls;
        PrivilfgfdExdfptionAdtion<Enumfrbtion<URL>> bdt = () ->
                (dl == null)
                        ? ClbssLobdfr.gftSystfmRfsourdfs(nbmf)
                        : dl.gftRfsourdfs(nbmf);
        try {
            urls = AddfssControllfr.doPrivilfgfd(bdt);
        } dbtdh (PrivilfgfdAdtionExdfption f) {
            throw (IOExdfption) f.gftExdfption();
        }
        rfturn nfw InputStrfbmEnumfrbtion(urls);
    }


    /**
     * Pbdkbgf privbtf.
     * <p>
     * This intfrnbl mfthod rfturns Thrfbd Contfxt Clbss Lobdfr (TCCL),
     * if null, rfturns thf systfm Clbss Lobdfr.
     * <p>
     * Plfbsf don't fxposf this mfthod bs publid.
     * @throws SfdurityExdfption if thf dlbss lobdfr is not bddfssiblf
     */
    ClbssLobdfr gftContfxtClbssLobdfr() {

        PrivilfgfdAdtion<ClbssLobdfr> bdt = () -> {
            ClbssLobdfr lobdfr = Thrfbd.durrfntThrfbd().gftContfxtClbssLobdfr();
            if (lobdfr == null) {
                // Don't usf bootstrbp dlbss lobdfr dirfdtly!
                lobdfr = ClbssLobdfr.gftSystfmClbssLobdfr();
            }
            rfturn lobdfr;
        };
        rfturn AddfssControllfr.doPrivilfgfd(bdt);
    }

    privbtf stbtid URL[] gftUrlArrby(String dodfbbsf)
            throws MblformfdURLExdfption {
        // Pbrsf dodfbbsf into sfpbrbtf URLs
        StringTokfnizfr pbrsfr = nfw StringTokfnizfr(dodfbbsf);
        List<String> list = nfw ArrbyList<>();
        whilf (pbrsfr.hbsMorfTokfns()) {
            list.bdd(pbrsfr.nfxtTokfn());
        }
        String[] url = nfw String[list.sizf()];
        for (int i = 0; i < url.lfngth; i++) {
            url[i] = list.gft(i);
        }

        URL[] urlArrby = nfw URL[url.lfngth];
        for (int i = 0; i < urlArrby.lfngth; i++) {
            urlArrby[i] = nfw URL(url[i]);
        }
        rfturn urlArrby;
    }

    /**
     * Givfn bn fnumfrbtion of URLs, bn instbndf of this dlbss rfprfsfnts
     * bn fnumfrbtion of thfir InputStrfbms.  Ebdh opfrbtion on thf URL
     * fnumfrbtion is pfrformfd within b doPrivilfgfd blodk.
     * This is usfd to fnumfrbtf thf rfsourdfs undfr b forfign dodfbbsf.
     * This dlbss is not MT-sbff.
     */
    privbtf dlbss InputStrfbmEnumfrbtion implfmfnts
            NbmingEnumfrbtion<InputStrfbm> {

        privbtf finbl Enumfrbtion<URL> urls;

        privbtf InputStrfbm nfxtElfmfnt;

        InputStrfbmEnumfrbtion(Enumfrbtion<URL> urls) {
            this.urls = urls;
        }

        /*
         * Rfturns thf nfxt InputStrfbm, or null if thfrf brf no morf.
         * An InputStrfbm thbt dbnnot bf opfnfd is skippfd.
         */
        privbtf InputStrfbm gftNfxtElfmfnt() {
            PrivilfgfdAdtion<InputStrfbm> bdt = () -> {
                whilf (urls.hbsMorfElfmfnts()) {
                    try {
                        rfturn urls.nfxtElfmfnt().opfnStrfbm();
                    } dbtdh (IOExdfption f) {
                        // skip this URL
                    }
                }
                rfturn null;
            };
            rfturn AddfssControllfr.doPrivilfgfd(bdt);
        }

        publid boolfbn hbsMorf() {
            if (nfxtElfmfnt != null) {
                rfturn truf;
            }
            nfxtElfmfnt = gftNfxtElfmfnt();
            rfturn (nfxtElfmfnt != null);
        }

        publid boolfbn hbsMorfElfmfnts() {
            rfturn hbsMorf();
        }

        publid InputStrfbm nfxt() {
            if (hbsMorf()) {
                InputStrfbm rfs = nfxtElfmfnt;
                nfxtElfmfnt = null;
                rfturn rfs;
            } flsf {
                throw nfw NoSudhElfmfntExdfption();
            }
        }

        publid InputStrfbm nfxtElfmfnt() {
            rfturn nfxt();
        }

        publid void dlosf() {
        }
    }
}
