/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.nbming.fvfnt;

import jbvbx.nbming.Nbmf;
import jbvbx.nbming.Contfxt;
import jbvbx.nbming.NbmingExdfption;


/**
 * Contbins mfthods for rfgistfring/dfrfgistfring listfnfrs to bf notififd of
 * fvfnts firfd whfn objfdts nbmfd in b dontfxt dhbngfs.
 *
 *<h1>Tbrgft</h1>
 * Thf nbmf pbrbmftfr in thf <tt>bddNbmingListfnfr()</tt> mfthods is rfffrrfd
 * to bs thf <fm>tbrgft</fm>. Thf tbrgft, blong with thf sdopf, idfntify
 * thf objfdt(s) thbt thf listfnfr is intfrfstfd in.
 * It is possiblf to rfgistfr intfrfst in b tbrgft thbt dofs not fxist, but
 * thfrf might bf limitbtions in thf fxtfnt to whidh this dbn bf
 * supportfd by thf sfrvidf providfr bnd undfrlying protodol/sfrvidf.
 *<p>
 * If b sfrvidf only supports rfgistrbtion for fxisting
 * tbrgfts, bn bttfmpt to rfgistfr for b nonfxistfnt tbrgft
 * rfsults in b <tt>NbmfNotFoundExdfption</tt> bfing thrown bs fbrly bs possiblf,
 * prfffrbbly bt thf timf <tt>bddNbmingListfnfr()</tt> is dbllfd, or if thbt is
 * not possiblf, thf listfnfr will rfdfivf thf fxdfption through thf
 * <tt>NbmingExdfptionEvfnt</tt>.
 *<p>
 * Also, for sfrvidf providfrs thbt only support rfgistrbtion for fxisting
 * tbrgfts, whfn thf tbrgft thbt b listfnfr hbs rfgistfrfd for is
 * subsfqufntly rfmovfd from thf nbmfspbdf, thf listfnfr is notififd
 * vib b <tt>NbmingExdfptionEvfnt</tt> (dontbining b
 *<tt>NbmfNotFoundExdfption</tt>).
 *<p>
 * An bpplidbtion dbn usf thf mfthod <tt>tbrgftMustExist()</tt> to dhfdk
 * whfthfr b <tt>EvfntContfxt</tt> supports rfgistrbtion
 * of nonfxistfnt tbrgfts.
 *
 *<h1>Evfnt Sourdf</h1>
 * Thf <tt>EvfntContfxt</tt> instbndf on whidh you invokf thf
 * rfgistrbtion mfthods is thf <fm>fvfnt sourdf</fm> of thf fvfnts thbt brf
 * (potfntiblly) gfnfrbtfd.
 * Thf sourdf is <fm>not nfdfssbrily</fm> thf objfdt nbmfd by thf tbrgft.
 * Only whfn thf tbrgft is thf fmpty nbmf is thf objfdt nbmfd by thf tbrgft
 * thf sourdf.
 * In othfr words, thf tbrgft,
 * blong with thf sdopf pbrbmftfr, brf usfd to idfntify
 * thf objfdt(s) thbt thf listfnfr is intfrfstfd in, but thf fvfnt sourdf
 * is thf <tt>EvfntContfxt</tt> instbndf with whidh thf listfnfr
 * hbs rfgistfrfd.
 *<p>
 * For fxbmplf, supposf b listfnfr mbkfs thf following rfgistrbtion:
 *<blodkquotf><prf>
 *      NbmfspbdfChbngfListfnfr listfnfr = ...;
 *      srd.bddNbmingListfnfr("x", SUBTREE_SCOPE, listfnfr);
 *</prf></blodkquotf>
 * Whfn bn objfdt nbmfd "x/y" is subsfqufntly dflftfd, thf dorrfsponding
 * <tt>NbmingEvfnt</tt> (<tt>fvt</tt>)  must dontbin:
 *<blodkquotf><prf>
 *      fvt.gftEvfntContfxt() == srd
 *      fvt.gftOldBinding().gftNbmf().fqubls("x/y")
 *</prf></blodkquotf>
 *<p>
 * Furthfrmorf, listfnfr rfgistrbtion/dfrfgistrbtion is with
 * thf <tt>EvfntContfxt</tt>
 * <fm>instbndf</fm>, bnd not with thf dorrfsponding objfdt in thf nbmfspbdf.
 * If thf progrbm intfnds bt somf point to rfmovf b listfnfr, thfn it nffds to
 * kffp b rfffrfndf to thf <tt>EvfntContfxt</tt> instbndf on
 * whidh it invokfd <tt>bddNbmingListfnfr()</tt> (just bs
 * it nffds to kffp b rfffrfndf to thf listfnfr in ordfr to rfmovf it
 * lbtfr). It dbnnot fxpfdt to do b <tt>lookup()</tt> bnd gft bnothfr instbndf of
 * b <tt>EvfntContfxt</tt> on whidh to pfrform thf dfrfgistrbtion.
 *<h1>Lifftimf of Rfgistrbtion</h1>
 * A rfgistfrfd listfnfr bfdomfs dfrfgistfrfd whfn:
 *<ul>
 *<li>It is rfmovfd using <tt>rfmovfNbmingListfnfr()</tt>.
 *<li>An fxdfption is thrown whilf dollfdting informbtion bbout thf fvfnts.
 *  Thbt is, whfn thf listfnfr rfdfivfs b <tt>NbmingExdfptionEvfnt</tt>.
 *<li><tt>Contfxt.dlosf()</tt> is invokfd on thf <tt>EvfntContfxt</tt>
 * instbndf with whidh it hbs rfgistfrfd.
 </ul>
 * Until thbt point, b <tt>EvfntContfxt</tt> instbndf thbt hbs outstbnding
 * listfnfrs will dontinuf to fxist bnd bf mbintbinfd by thf sfrvidf providfr.
 *
 *<h1>Listfnfr Implfmfntbtions</h1>
 * Thf rfgistrbtion/dfrfgistrbtion mfthods bddfpt bn instbndf of
 * <tt>NbmingListfnfr</tt>. Thfrf brf subintfrfbdfs of <tt>NbmingListfnfr</tt>
 * for difffrfnt of fvfnt typfs of <tt>NbmingEvfnt</tt>.
 * For fxbmplf, thf <tt>ObjfdtChbngfListfnfr</tt>
 * intfrfbdf is for thf <tt>NbmingEvfnt.OBJECT_CHANGED</tt> fvfnt typf.
 * To rfgistfr intfrfst in multiplf fvfnt typfs, thf listfnfr implfmfntbtion
 * should implfmfnt multiplf <tt>NbmingListfnfr</tt> subintfrfbdfs bnd usf b
 * singlf invodbtion of <tt>bddNbmingListfnfr()</tt>.
 * In bddition to rfduding thf numbfr of mfthod dblls bnd possibly thf dodf sizf
 * of thf listfnfrs, this bllows somf sfrvidf providfrs to optimizf thf
 * rfgistrbtion.
 *
 *<h1>Thrfbding Issufs</h1>
 *
 * Likf <tt>Contfxt</tt> instbndfs in gfnfrbl, instbndfs of
 * <tt>EvfntContfxt</tt> brf not gubrbntffd to bf thrfbd-sbff.
 * Cbrf must bf tbkfn whfn multiplf thrfbds brf bddfssing thf sbmf
 * <tt>EvfntContfxt</tt> dondurrfntly.
 * Sff thf
 * <b hrff=pbdkbgf-summbry.html#THREADING>pbdkbgf dfsdription</b>
 * for morf informbtion on thrfbding issufs.
 *
 * @buthor Rosbnnb Lff
 * @buthor Sdott Sfligmbn
 * @sindf 1.3
 */

publid intfrfbdf EvfntContfxt fxtfnds Contfxt {
    /**
     * Constbnt for fxprfssing intfrfst in fvfnts dondfrning thf objfdt nbmfd
     * by thf tbrgft.
     *<p>
     * Thf vbluf of this donstbnt is <tt>0</tt>.
     */
    publid finbl stbtid int OBJECT_SCOPE = 0;

    /**
     * Constbnt for fxprfssing intfrfst in fvfnts dondfrning objfdts
     * in thf dontfxt nbmfd by thf tbrgft,
     * fxdluding thf dontfxt nbmfd by thf tbrgft.
     *<p>
     * Thf vbluf of this donstbnt is <tt>1</tt>.
     */
    publid finbl stbtid int ONELEVEL_SCOPE = 1;

    /**
     * Constbnt for fxprfssing intfrfst in fvfnts dondfrning objfdts
     * in thf subtrff of thf objfdt nbmfd by thf tbrgft, indluding thf objfdt
     * nbmfd by thf tbrgft.
     *<p>
     * Thf vbluf of this donstbnt is <tt>2</tt>.
     */
    publid finbl stbtid int SUBTREE_SCOPE = 2;


    /**
     * Adds b listfnfr for rfdfiving nbming fvfnts firfd
     * whfn thf objfdt(s) idfntififd by b tbrgft bnd sdopf dhbngfs.
     *
     * Thf fvfnt sourdf of thosf fvfnts is this dontfxt. Sff thf
     * dlbss dfsdription for b disdussion on fvfnt sourdf bnd tbrgft.
     * Sff thf dfsdriptions of thf donstbnts <tt>OBJECT_SCOPE</tt>,
     * <tt>ONELEVEL_SCOPE</tt>, bnd <tt>SUBTREE_SCOPE</tt> to sff how
     * <tt>sdopf</tt> bfffdts thf rfgistrbtion.
     *<p>
     * <tt>tbrgft</tt> nffds to nbmf b dontfxt only whfn <tt>sdopf</tt> is
     * <tt>ONELEVEL_SCOPE</tt>.
     * <tt>tbrgft</tt> mby nbmf b non-dontfxt if <tt>sdopf</tt> is fithfr
     * <tt>OBJECT_SCOPE</tt> or <tt>SUBTREE_SCOPE</tt>.  Using
     * <tt>SUBTREE_SCOPE</tt> for b non-dontfxt might bf usfful,
     * for fxbmplf, if thf dbllfr dofs not know in bdvbndf whfthfr <tt>tbrgft</tt>
     * is b dontfxt bnd just wbnts to rfgistfr intfrfst in thf (possibly
     * dfgfnfrbtf subtrff) rootfd bt <tt>tbrgft</tt>.
     *<p>
     * Whfn thf listfnfr is notififd of bn fvfnt, thf listfnfr mby
     * in invokfd in b thrfbd othfr thbn thf onf in whidh
     * <tt>bddNbmingListfnfr()</tt> is fxfdutfd.
     * Cbrf must bf tbkfn whfn multiplf thrfbds brf bddfssing thf sbmf
     * <tt>EvfntContfxt</tt> dondurrfntly.
     * Sff thf
     * <b hrff=pbdkbgf-summbry.html#THREADING>pbdkbgf dfsdription</b>
     * for morf informbtion on thrfbding issufs.
     *
     * @pbrbm tbrgft A nonnull nbmf to bf rfsolvfd rflbtivf to this dontfxt.
     * @pbrbm sdopf Onf of <tt>OBJECT_SCOPE</tt>, <tt>ONELEVEL_SCOPE</tt>, or
     * <tt>SUBTREE_SCOPE</tt>.
     * @pbrbm l  Thf nonnull listfnfr.
     * @fxdfption NbmingExdfption If b problfm wbs fndountfrfd whilf
     * bdding thf listfnfr.
     * @sff #rfmovfNbmingListfnfr
     */
    void bddNbmingListfnfr(Nbmf tbrgft, int sdopf, NbmingListfnfr l)
        throws NbmingExdfption;

    /**
     * Adds b listfnfr for rfdfiving nbming fvfnts firfd
     * whfn thf objfdt nbmfd by thf string tbrgft nbmf bnd sdopf dhbngfs.
     *
     * Sff thf ovfrlobd thbt bddfpts b <tt>Nbmf</tt> for dftbils.
     *
     * @pbrbm tbrgft Thf nonnull string nbmf of thf objfdt rfsolvfd rflbtivf
     * to this dontfxt.
     * @pbrbm sdopf Onf of <tt>OBJECT_SCOPE</tt>, <tt>ONELEVEL_SCOPE</tt>, or
     * <tt>SUBTREE_SCOPE</tt>.
     * @pbrbm l  Thf nonnull listfnfr.
     * @fxdfption NbmingExdfption If b problfm wbs fndountfrfd whilf
     * bdding thf listfnfr.
     * @sff #rfmovfNbmingListfnfr
     */
    void bddNbmingListfnfr(String tbrgft, int sdopf, NbmingListfnfr l)
        throws NbmingExdfption;

    /**
     * Rfmovfs b listfnfr from rfdfiving nbming fvfnts firfd
     * by this <tt>EvfntContfxt</tt>.
     * Thf listfnfr mby hbvf rfgistfrfd morf thbn ondf with this
     * <tt>EvfntContfxt</tt>, pfrhbps with difffrfnt tbrgft/sdopf brgumfnts.
     * Aftfr this mfthod is invokfd, thf listfnfr will no longfr
     * rfdfivf fvfnts with this <tt>EvfntContfxt</tt> instbndf
     * bs thf fvfnt sourdf (fxdfpt for thosf fvfnts blrfbdy in thf prodfss of
     * bfing dispbtdhfd).
     * If thf listfnfr wbs not, or is no longfr, rfgistfrfd with
     * this <tt>EvfntContfxt</tt> instbndf, this mfthod dofs not do bnything.
     *
     * @pbrbm l  Thf nonnull listfnfr.
     * @fxdfption NbmingExdfption If b problfm wbs fndountfrfd whilf
     * rfmoving thf listfnfr.
     * @sff #bddNbmingListfnfr
     */
    void rfmovfNbmingListfnfr(NbmingListfnfr l) throws NbmingExdfption;

    /**
     * Dftfrminfs whfthfr b listfnfr dbn rfgistfr intfrfst in b tbrgft
     * thbt dofs not fxist.
     *
     * @rfturn truf if thf tbrgft must fxist; fblsf if thf tbrgft nffd not fxist.
     * @fxdfption NbmingExdfption If thf dontfxt's bfhbvior in this rfgbrd dbnnot
     * bf dftfrminfd.
     */
    boolfbn tbrgftMustExist() throws NbmingExdfption;
}
