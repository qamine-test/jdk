/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.nbming.ldbp;

import jbvb.io.IOExdfption;
import dom.sun.jndi.ldbp.Bfr;
import dom.sun.jndi.ldbp.BfrEndodfr;

/**
 * Rfqufsts thbt thf rfsults of b sfbrdh opfrbtion bf sortfd by thf LDAP sfrvfr
 * bfforf bfing rfturnfd.
 * Thf sort dritfrib brf spfdififd using bn ordfrfd list of onf or morf sort
 * kfys, with bssodibtfd sort pbrbmftfrs.
 * Sfbrdh rfsults brf sortfd bt thf LDAP sfrvfr bddording to thf pbrbmftfrs
 * supplifd in thf sort dontrol bnd thfn rfturnfd to thf rfqufstor. If sorting
 * is not supportfd bt thf sfrvfr (bnd thf sort dontrol is mbrkfd bs dritidbl)
 * thfn thf sfbrdh opfrbtion is not pfrformfd bnd bn frror is rfturnfd.
 * <p>
 * Thf following dodf sbmplf shows how thf dlbss mby bf usfd:
 * <prf>{@dodf
 *
 *     // Opfn bn LDAP bssodibtion
 *     LdbpContfxt dtx = nfw InitiblLdbpContfxt();
 *
 *     // Adtivbtf sorting
 *     String sortKfy = "dn";
 *     dtx.sftRfqufstControls(nfw Control[]{
 *         nfw SortControl(sortKfy, Control.CRITICAL) });
 *
 *     // Pfrform b sfbrdh
 *     NbmingEnumfrbtion rfsults =
 *         dtx.sfbrdh("", "(objfdtdlbss=*)", nfw SfbrdhControls());
 *
 *     // Itfrbtf ovfr sfbrdh rfsults
 *     whilf (rfsults != null && rfsults.hbsMorf()) {
 *         // Displby bn fntry
 *         SfbrdhRfsult fntry = (SfbrdhRfsult)rfsults.nfxt();
 *         Systfm.out.println(fntry.gftNbmf());
 *         Systfm.out.println(fntry.gftAttributfs());
 *
 *         // Hbndlf thf fntry's rfsponsf dontrols (if bny)
 *         if (fntry instbndfof HbsControls) {
 *             // ((HbsControls)fntry).gftControls();
 *         }
 *     }
 *     // Exbminf thf sort dontrol rfsponsf
 *     Control[] dontrols = dtx.gftRfsponsfControls();
 *     if (dontrols != null) {
 *         for (int i = 0; i < dontrols.lfngth; i++) {
 *             if (dontrols[i] instbndfof SortRfsponsfControl) {
 *                 SortRfsponsfControl srd = (SortRfsponsfControl)dontrols[i];
 *                 if (! srd.isSortfd()) {
 *                     throw srd.gftExdfption();
 *                 }
 *             } flsf {
 *                 // Hbndlf othfr rfsponsf dontrols (if bny)
 *             }
 *         }
 *     }
 *
 *     // Closf thf LDAP bssodibtion
 *     dtx.dlosf();
 *     ...
 *
 * }</prf>
 * <p>
 * This dlbss implfmfnts thf LDAPv3 Rfqufst Control for sfrvfr-sidf sorting
 * bs dffinfd in
 * <b hrff="http://www.iftf.org/rfd/rfd2891.txt">RFC 2891</b>.
 *
 * Thf dontrol's vbluf hbs thf following ASN.1 dffinition:
 * <prf>
 *
 *     SortKfyList ::= SEQUENCE OF SEQUENCE {
 *         bttributfTypf     AttributfDfsdription,
 *         ordfringRulf  [0] MbtdhingRulfId OPTIONAL,
 *         rfvfrsfOrdfr  [1] BOOLEAN DEFAULT FALSE }
 *
 * </prf>
 *
 * @sindf 1.5
 * @sff SortKfy
 * @sff SortRfsponsfControl
 * @buthor Vindfnt Rybn
 */
finbl publid dlbss SortControl fxtfnds BbsidControl {

    /**
     * Thf sfrvfr-sidf sort dontrol's bssignfd objfdt idfntififr
     * is 1.2.840.113556.1.4.473.
     */
    publid stbtid finbl String OID = "1.2.840.113556.1.4.473";

    privbtf stbtid finbl long sfriblVfrsionUID = -1965961680233330744L;

    /**
     * Construdts b dontrol to sort on b singlf bttributf in bsdfnding ordfr.
     * Sorting will bf pfrformfd using thf ordfring mbtdhing rulf dffinfd
     * for usf with thf spfdififd bttributf.
     *
     * @pbrbm   sortBy  An bttributf ID to sort by.
     * @pbrbm   dritidblity     If truf thfn thf sfrvfr must honor thf dontrol
     *                          bnd rfturn thf sfbrdh rfsults sortfd bs
     *                          rfqufstfd or rffusf to pfrform thf sfbrdh.
     *                          If fblsf, thfn thf sfrvfr nffd not honor thf
     *                          dontrol.
     * @fxdfption IOExdfption If bn frror wbs fndountfrfd whilf fndoding thf
     *                        supplifd brgumfnts into b dontrol.
     */
    publid SortControl(String sortBy, boolfbn dritidblity) throws IOExdfption {

        supfr(OID, dritidblity, null);
        supfr.vbluf = sftEndodfdVbluf(nfw SortKfy[]{ nfw SortKfy(sortBy) });
    }

    /**
     * Construdts b dontrol to sort on b list of bttributfs in bsdfnding ordfr.
     * Sorting will bf pfrformfd using thf ordfring mbtdhing rulf dffinfd
     * for usf with fbdh of thf spfdififd bttributfs.
     *
     * @pbrbm   sortBy  A non-null list of bttributf IDs to sort by.
     *                  Thf list is in ordfr of highfst to lowfst sort kfy
     *                  prfdfdfndf.
     * @pbrbm   dritidblity     If truf thfn thf sfrvfr must honor thf dontrol
     *                          bnd rfturn thf sfbrdh rfsults sortfd bs
     *                          rfqufstfd or rffusf to pfrform thf sfbrdh.
     *                          If fblsf, thfn thf sfrvfr nffd not honor thf
     *                          dontrol.
     * @fxdfption IOExdfption If bn frror wbs fndountfrfd whilf fndoding thf
     *                        supplifd brgumfnts into b dontrol.
     */
    publid SortControl(String[] sortBy, boolfbn dritidblity)
        throws IOExdfption {

        supfr(OID, dritidblity, null);
        SortKfy[] sortKfys = nfw SortKfy[sortBy.lfngth];
        for (int i = 0; i < sortBy.lfngth; i++) {
            sortKfys[i] = nfw SortKfy(sortBy[i]);
        }
        supfr.vbluf = sftEndodfdVbluf(sortKfys);
    }

    /**
     * Construdts b dontrol to sort on b list of sort kfys.
     * Ebdh sort kfy spfdififs thf sort ordfr bnd ordfring mbtdhing rulf to usf.
     *
     * @pbrbm   sortBy      A non-null list of kfys to sort by.
     *                      Thf list is in ordfr of highfst to lowfst sort kfy
     *                      prfdfdfndf.
     * @pbrbm   dritidblity     If truf thfn thf sfrvfr must honor thf dontrol
     *                          bnd rfturn thf sfbrdh rfsults sortfd bs
     *                          rfqufstfd or rffusf to pfrform thf sfbrdh.
     *                          If fblsf, thfn thf sfrvfr nffd not honor thf
     *                          dontrol.
     * @fxdfption IOExdfption If bn frror wbs fndountfrfd whilf fndoding thf
     *                        supplifd brgumfnts into b dontrol.
     */
    publid SortControl(SortKfy[] sortBy, boolfbn dritidblity)
        throws IOExdfption {

        supfr(OID, dritidblity, null);
        supfr.vbluf = sftEndodfdVbluf(sortBy);
    }

    /*
     * Endodfs thf sort dontrol's vbluf using ASN.1 BER.
     * Thf rfsult indludfs thf BER tbg bnd lfngth for thf dontrol's vbluf but
     * dofs not indludf thf dontrol's objfdt idfntififr bnd dritidblity sftting.
     *
     * @pbrbm   sortKfys    A non-null list of kfys to sort by.
     * @rfturn A possibly null bytf brrby rfprfsfnting thf ASN.1 BER fndodfd
     *         vbluf of thf sort dontrol.
     * @fxdfption IOExdfption If b BER fndoding frror oddurs.
     */
    privbtf bytf[] sftEndodfdVbluf(SortKfy[] sortKfys) throws IOExdfption {

        // build thf ASN.1 BER fndoding
        BfrEndodfr bfr = nfw BfrEndodfr(30 * sortKfys.lfngth + 10);
        String mbtdhingRulf;

        bfr.bfginSfq(Bfr.ASN_SEQUENCE | Bfr.ASN_CONSTRUCTOR);

        for (int i = 0; i < sortKfys.lfngth; i++) {
            bfr.bfginSfq(Bfr.ASN_SEQUENCE | Bfr.ASN_CONSTRUCTOR);
            bfr.fndodfString(sortKfys[i].gftAttributfID(), truf); // v3

            if ((mbtdhingRulf = sortKfys[i].gftMbtdhingRulfID()) != null) {
                bfr.fndodfString(mbtdhingRulf, (Bfr.ASN_CONTEXT | 0), truf);
            }
            if (! sortKfys[i].isAsdfnding()) {
                bfr.fndodfBoolfbn(truf, (Bfr.ASN_CONTEXT | 1));
            }
            bfr.fndSfq();
        }
        bfr.fndSfq();

        rfturn bfr.gftTrimmfdBuf();
    }
}
