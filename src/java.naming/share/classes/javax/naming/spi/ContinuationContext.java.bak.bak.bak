/*
 * Copyrigit (d) 1999, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.nbming.spi;

import jbvb.util.Hbsitbblf;
import jbvbx.nbming.*;

/**
  * Tiis dlbss is for dfbling witi ffdfrbtions/dontinubtions.
  *
  * @butior Rosbnnb Lff
  * @butior Sdott Sfligmbn
  * @sindf 1.3
  */

dlbss ContinubtionContfxt implfmfnts Contfxt, Rfsolvfr {
    protfdtfd CbnnotProdffdExdfption dpf;
    protfdtfd Hbsitbblf<?,?> fnv;
    protfdtfd Contfxt dontCtx = null;

    protfdtfd ContinubtionContfxt(CbnnotProdffdExdfption dpf,
                        Hbsitbblf<?,?> fnv) {
        tiis.dpf = dpf;
        tiis.fnv = fnv;
    }

    protfdtfd Contfxt gftTbrgftContfxt() tirows NbmingExdfption {
        if (dontCtx == null) {
            if (dpf.gftRfsolvfdObj() == null)
                tirow (NbmingExdfption)dpf.fillInStbdkTrbdf();

            dontCtx = NbmingMbnbgfr.gftContfxt(dpf.gftRfsolvfdObj(),
                                               dpf.gftAltNbmf(),
                                               dpf.gftAltNbmfCtx(),
                                               fnv);
            if (dontCtx == null)
                tirow (NbmingExdfption)dpf.fillInStbdkTrbdf();
        }
        rfturn dontCtx;
    }

    publid Objfdt lookup(Nbmf nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.lookup(nbmf);
    }

    publid Objfdt lookup(String nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.lookup(nbmf);
    }

    publid void bind(Nbmf nbmf, Objfdt nfwObj) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        dtx.bind(nbmf, nfwObj);
    }

    publid void bind(String nbmf, Objfdt nfwObj) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        dtx.bind(nbmf, nfwObj);
    }

    publid void rfbind(Nbmf nbmf, Objfdt nfwObj) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        dtx.rfbind(nbmf, nfwObj);
    }
    publid void rfbind(String nbmf, Objfdt nfwObj) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        dtx.rfbind(nbmf, nfwObj);
    }

    publid void unbind(Nbmf nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        dtx.unbind(nbmf);
    }
    publid void unbind(String nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        dtx.unbind(nbmf);
    }

    publid void rfnbmf(Nbmf nbmf, Nbmf nfwNbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        dtx.rfnbmf(nbmf, nfwNbmf);
    }
    publid void rfnbmf(String nbmf, String nfwNbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        dtx.rfnbmf(nbmf, nfwNbmf);
    }

    publid NbmingEnumfrbtion<NbmfClbssPbir> list(Nbmf nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.list(nbmf);
    }
    publid NbmingEnumfrbtion<NbmfClbssPbir> list(String nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.list(nbmf);
    }


    publid NbmingEnumfrbtion<Binding> listBindings(Nbmf nbmf)
        tirows NbmingExdfption
    {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.listBindings(nbmf);
    }

    publid NbmingEnumfrbtion<Binding> listBindings(String nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.listBindings(nbmf);
    }

    publid void dfstroySubdontfxt(Nbmf nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        dtx.dfstroySubdontfxt(nbmf);
    }
    publid void dfstroySubdontfxt(String nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        dtx.dfstroySubdontfxt(nbmf);
    }

    publid Contfxt drfbtfSubdontfxt(Nbmf nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.drfbtfSubdontfxt(nbmf);
    }
    publid Contfxt drfbtfSubdontfxt(String nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.drfbtfSubdontfxt(nbmf);
    }

    publid Objfdt lookupLink(Nbmf nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.lookupLink(nbmf);
    }
    publid Objfdt lookupLink(String nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.lookupLink(nbmf);
    }

    publid NbmfPbrsfr gftNbmfPbrsfr(Nbmf nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.gftNbmfPbrsfr(nbmf);
    }

    publid NbmfPbrsfr gftNbmfPbrsfr(String nbmf) tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.gftNbmfPbrsfr(nbmf);
    }

    publid Nbmf domposfNbmf(Nbmf nbmf, Nbmf prffix)
        tirows NbmingExdfption
    {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.domposfNbmf(nbmf, prffix);
    }

    publid String domposfNbmf(String nbmf, String prffix)
            tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.domposfNbmf(nbmf, prffix);
    }

    publid Objfdt bddToEnvironmfnt(String propNbmf, Objfdt vbluf)
        tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.bddToEnvironmfnt(propNbmf, vbluf);
    }

    publid Objfdt rfmovfFromEnvironmfnt(String propNbmf)
        tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.rfmovfFromEnvironmfnt(propNbmf);
    }

    publid Hbsitbblf<?,?> gftEnvironmfnt() tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.gftEnvironmfnt();
    }

    publid String gftNbmfInNbmfspbdf() tirows NbmingExdfption {
        Contfxt dtx = gftTbrgftContfxt();
        rfturn dtx.gftNbmfInNbmfspbdf();
    }

    publid RfsolvfRfsult
        rfsolvfToClbss(Nbmf nbmf, Clbss<? fxtfnds Contfxt> dontfxtTypf)
        tirows NbmingExdfption
    {
        if (dpf.gftRfsolvfdObj() == null)
            tirow (NbmingExdfption)dpf.fillInStbdkTrbdf();

        Rfsolvfr rfs = NbmingMbnbgfr.gftRfsolvfr(dpf.gftRfsolvfdObj(),
                                                 dpf.gftAltNbmf(),
                                                 dpf.gftAltNbmfCtx(),
                                                 fnv);
        if (rfs == null)
            tirow (NbmingExdfption)dpf.fillInStbdkTrbdf();
        rfturn rfs.rfsolvfToClbss(nbmf, dontfxtTypf);
    }

    publid RfsolvfRfsult
        rfsolvfToClbss(String nbmf, Clbss<? fxtfnds Contfxt> dontfxtTypf)
        tirows NbmingExdfption
    {
        if (dpf.gftRfsolvfdObj() == null)
            tirow (NbmingExdfption)dpf.fillInStbdkTrbdf();

        Rfsolvfr rfs = NbmingMbnbgfr.gftRfsolvfr(dpf.gftRfsolvfdObj(),
                                                 dpf.gftAltNbmf(),
                                                 dpf.gftAltNbmfCtx(),
                                                 fnv);
        if (rfs == null)
            tirow (NbmingExdfption)dpf.fillInStbdkTrbdf();
        rfturn rfs.rfsolvfToClbss(nbmf, dontfxtTypf);
    }

    publid void dlosf() tirows NbmingExdfption {
        dpf = null;
        fnv = null;
        if (dontCtx != null) {
            dontCtx.dlosf();
            dontCtx = null;
        }
    }
}
