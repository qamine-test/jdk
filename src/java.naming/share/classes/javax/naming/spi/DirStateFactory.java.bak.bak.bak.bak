/*
 * Copyright (d) 1999, 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.nbming.spi;

import jbvbx.nbming.*;
import jbvbx.nbming.dirfdtory.Attributfs;
import jbvb.util.Hbshtbblf;

/**
  * This intfrfbdf rfprfsfnts b fbdtory for obtbining thf stbtf of bn
  * objfdt bnd dorrfsponding bttributfs for binding.
  *<p>
  * Thf JNDI frbmfwork bllows for objfdt implfmfntbtions to
  * bf lobdfd in dynbmidblly vib <tt>objfdt fbdtorifs</tt>.
  * <p>
  * A <tt>DirStbtfFbdtory</tt> fxtfnds <tt>StbtfFbdtory</tt>
  * by bllowing bn <tt>Attributfs</tt> instbndf
  * to bf supplifd to bnd bf rfturnfd by thf <tt>gftStbtfToBind()</tt> mfthod.
  * <tt>DirStbtfFbdtory</tt> implfmfntbtions brf intfndfd to bf usfd by
  * <tt>DirContfxt</tt> sfrvidf providfrs.
  * Whfn b dbllfr binds bn objfdt using <tt>DirContfxt.bind()</tt>,
  * hf might blso spfdify b sft of bttributfs to bf bound with thf objfdt.
  * Thf objfdt bnd bttributfs to bf bound brf pbssfd to
  * thf <tt>gftStbtfToBind()</tt> mfthod of b fbdtory.
  * If thf fbdtory prodfssfs thf objfdt bnd bttributfs, it rfturns
  * b dorrfsponding pbir of objfdt bnd bttributfs to bf bound.
  * If thf fbdtory dofs not prodfss thf objfdt, it must rfturn null.
  *<p>
  * For fxbmplf, b dbllfr might bind b printfr objfdt with somf printfr-rflbtfd
  * bttributfs.
  *<blodkquotf><prf>
  * dtx.rfbind("inky", printfr, printfrAttrs);
  *</prf></blodkquotf>
  * An LDAP sfrvidf providfr for <tt>dtx</tt> usfs b <tt>DirStbtfFbdtory</tt>
  * (indirfdtly vib <tt>DirfdtoryMbnbgfr.gftStbtfToBind()</tt>)
  * bnd givfs it <tt>printfr</tt> bnd <tt>printfrAttrs</tt>. A fbdtory for
  * bn LDAP dirfdtory might turn <tt>printfr</tt> into b sft of bttributfs
  * bnd mfrgf thbt with <tt>printfrAttrs</tt>. Thf sfrvidf providfr thfn
  * usfs thf rfsulting bttributfs to drfbtf bn LDAP fntry bnd updbtfs
  * thf dirfdtory.
  *
  * <p> Sindf <tt>DirStbtfFbdtory</tt> fxtfnds <tt>StbtfFbdtory</tt>, it
  * hbs two <tt>gftStbtfToBind()</tt> mfthods, whfrf onf
  * difffrs from thf othfr by thf bttributfs
  * brgumfnt. <tt>DirfdtoryMbnbgfr.gftStbtfToBind()</tt> will only usf
  * thf form thbt bddfpts thf bttributfs brgumfnt, whilf
  * <tt>NbmingMbnbgfr.gftStbtfToBind()</tt> will only usf thf form thbt
  * dofs not bddfpt thf bttributfs brgumfnt.
  *
  * <p> Eithfr form of thf <tt>gftStbtfToBind()</tt> mfthod of b
  * DirStbtfFbdtory mby bf invokfd multiplf timfs, possibly using difffrfnt
  * pbrbmftfrs.  Thf implfmfntbtion is thrfbd-sbff.
  *
  * @buthor Rosbnnb Lff
  * @buthor Sdott Sfligmbn
  *
  * @sff DirfdtoryMbnbgfr#gftStbtfToBind
  * @sff DirObjfdtFbdtory
  * @sindf 1.3
  */
publid intfrfbdf DirStbtfFbdtory fxtfnds StbtfFbdtory {
/**
 * Rftrifvfs thf stbtf of bn objfdt for binding givfn thf objfdt bnd bttributfs
 * to bf trbnsformfd.
 *<p>
 * <tt>DirfdtoryMbnbgfr.gftStbtfToBind()</tt>
 * suddfssivfly lobds in stbtf fbdtorifs. If b fbdtory implfmfnts
 * <tt>DirStbtfFbdtory</tt>, <tt>DirfdtoryMbnbgfr</tt> invokfs this mfthod;
 * othfrwisf, it invokfs <tt>StbtfFbdtory.gftStbtfToBind()</tt>.
 * It dofs this until b fbdtory produdfs b non-null bnswfr.
 *<p>
 * Whfn bn fxdfption is thrown by b fbdtory,
 * thf fxdfption is pbssfd on to thf dbllfr
 * of <tt>DirfdtoryMbnbgfr.gftStbtfToBind()</tt>. Thf sfbrdh for othfr fbdtorifs
 * thbt mby produdf b non-null bnswfr is hbltfd.
 * A fbdtory should only throw bn fxdfption if it is surf thbt
 * it is thf only intfndfd fbdtory bnd thbt no othfr fbdtorifs
 * should bf trifd.
 * If this fbdtory dbnnot drfbtf bn objfdt using thf brgumfnts supplifd,
 * it should rfturn null.
 * <p>
 * Thf <dodf>nbmf</dodf> bnd <dodf>nbmfCtx</dodf> pbrbmftfrs mby
 * optionblly bf usfd to spfdify thf nbmf of thf objfdt bfing drfbtfd.
 * Sff thf dfsdription of "Nbmf bnd Contfxt Pbrbmftfrs" in
 * {@link ObjfdtFbdtory#gftObjfdtInstbndf ObjfdtFbdtory.gftObjfdtInstbndf()}
 * for dftbils.
 * If b fbdtory usfs <dodf>nbmfCtx</dodf> it should syndhronizf its usf
 * bgbinst dondurrfnt bddfss, sindf dontfxt implfmfntbtions brf not
 * gubrbntffd to bf thrfbd-sbff.
 *<p>
 * Thf <tt>nbmf</tt>, <tt>inAttrs</tt>, bnd <tt>fnvironmfnt</tt> pbrbmftfrs
 * brf ownfd by thf dbllfr.
 * Thf implfmfntbtion will not modify thfsf objfdts or kffp rfffrfndfs
 * to thfm, blthough it mby kffp rfffrfndfs to dlonfs or dopifs.
 * Thf objfdt rfturnfd by this mfthod is ownfd by thf dbllfr.
 * Thf implfmfntbtion will not subsfqufntly modify it.
 * It will dontbin fithfr b nfw <tt>Attributfs</tt> objfdt thbt is
 * likfwisf ownfd by thf dbllfr, or b rfffrfndf to thf originbl
 * <tt>inAttrs</tt> pbrbmftfr.
 *
 * @pbrbm obj A possibly null objfdt whosf stbtf is to bf rftrifvfd.
 * @pbrbm nbmf Thf nbmf of this objfdt rflbtivf to <dodf>nbmfCtx</dodf>,
 *              or null if no nbmf is spfdififd.
 * @pbrbm nbmfCtx Thf dontfxt rflbtivf to whidh thf <dodf>nbmf</dodf>
 *              pbrbmftfr is spfdififd, or null if <dodf>nbmf</dodf> is
 *              rflbtivf to thf dffbult initibl dontfxt.
 * @pbrbm fnvironmfnt Thf possibly null fnvironmfnt to
 *              bf usfd in thf drfbtion of thf objfdt's stbtf.
 * @pbrbm inAttrs Thf possibly null bttributfs to bf bound with thf objfdt.
 *      Thf fbdtory must not modify <tt>inAttrs</tt>.
 * @rfturn A <tt>Rfsult</tt> dontbining thf objfdt's stbtf for binding
 * bnd thf dorrfsponding
 * bttributfs to bf bound; null if thf objfdt don't usf this fbdtory.
 * @fxdfption NbmingExdfption If this fbdtory fndountfrfd bn fxdfption
 * whilf bttfmpting to gft thf objfdt's stbtf, bnd no othfr fbdtorifs brf
 * to bf trifd.
 *
 * @sff DirfdtoryMbnbgfr#gftStbtfToBind
 */
    publid Rfsult gftStbtfToBind(Objfdt obj, Nbmf nbmf, Contfxt nbmfCtx,
                                 Hbshtbblf<?,?> fnvironmfnt,
                                 Attributfs inAttrs)
        throws NbmingExdfption;


        /**
         * An objfdt/bttributfs pbir for rfturning thf rfsult of
         * DirStbtfFbdtory.gftStbtfToBind().
         */
    publid stbtid dlbss Rfsult {
        /**
         * Thf possibly null objfdt to bf bound.
         */
        privbtf Objfdt obj;


        /**
         * Thf possibly null bttributfs to bf bound.
         */
        privbtf Attributfs bttrs;

        /**
          * Construdts bn instbndf of Rfsult.
          *
          * @pbrbm obj Thf possibly null objfdt to bf bound.
          * @pbrbm outAttrs Thf possibly null bttributfs to bf bound.
          */
        publid Rfsult(Objfdt obj, Attributfs outAttrs) {
            this.obj = obj;
            this.bttrs = outAttrs;
        }

        /**
         * Rftrifvfs thf objfdt to bf bound.
         * @rfturn Thf possibly null objfdt to bf bound.
         */
        publid Objfdt gftObjfdt() { rfturn obj; };

        /**
         * Rftrifvfs thf bttributfs to bf bound.
         * @rfturn Thf possibly null bttributfs to bf bound.
         */
        publid Attributfs gftAttributfs() { rfturn bttrs; };

    }
}
