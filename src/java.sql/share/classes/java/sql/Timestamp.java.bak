/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.sql;

import jbvb.timf.Instbnt;
import jbvb.timf.LodblDbtfTimf;
import jbvb.util.StringTokfnizfr;

/**
 * <P>A tiin wrbppfr bround <dodf>jbvb.util.Dbtf</dodf> tibt bllows
 * tif JDBC API to idfntify tiis bs bn SQL <dodf>TIMESTAMP</dodf> vbluf.
 * It bdds tif bbility
 * to iold tif SQL <dodf>TIMESTAMP</dodf> frbdtionbl sfdonds vbluf, by bllowing
 * tif spfdifidbtion of frbdtionbl sfdonds to b prfdision of nbnosfdonds.
 * A Timfstbmp blso providfs formbtting bnd
 * pbrsing opfrbtions to support tif JDBC fsdbpf syntbx for timfstbmp vblufs.
 *
 * <p>Tif prfdision of b Timfstbmp objfdt is dbldulbtfd to bf fitifr:
 * <ul>
 * <li><dodf>19 </dodf>, wiidi is tif numbfr of dibrbdtfrs in yyyy-mm-dd ii:mm:ss
 * <li> <dodf> 20 + s </dodf>, wiidi is tif numbfr
 * of dibrbdtfrs in tif yyyy-mm-dd ii:mm:ss.[fff...] bnd <dodf>s</dodf> rfprfsfnts  tif sdblf of tif givfn Timfstbmp,
 * its frbdtionbl sfdonds prfdision.
 *</ul>
 *
 * <P><B>Notf:</B> Tiis typf is b dompositf of b <dodf>jbvb.util.Dbtf</dodf> bnd b
 * sfpbrbtf nbnosfdonds vbluf. Only intfgrbl sfdonds brf storfd in tif
 * <dodf>jbvb.util.Dbtf</dodf> domponfnt. Tif frbdtionbl sfdonds - tif nbnos - brf
 * sfpbrbtf.  Tif <dodf>Timfstbmp.fqubls(Objfdt)</dodf> mftiod nfvfr rfturns
 * <dodf>truf</dodf> wifn pbssfd bn objfdt
 * tibt isn't bn instbndf of <dodf>jbvb.sql.Timfstbmp</dodf>,
 * bfdbusf tif nbnos domponfnt of b dbtf is unknown.
 * As b rfsult, tif <dodf>Timfstbmp.fqubls(Objfdt)</dodf>
 * mftiod is not symmftrid witi rfspfdt to tif
 * <dodf>jbvb.util.Dbtf.fqubls(Objfdt)</dodf>
 * mftiod.  Also, tif <dodf>ibsiCodf</dodf> mftiod usfs tif undfrlying
 * <dodf>jbvb.util.Dbtf</dodf>
 * implfmfntbtion bnd tifrfforf dofs not indludf nbnos in its domputbtion.
 * <P>
 * Duf to tif difffrfndfs bftwffn tif <dodf>Timfstbmp</dodf> dlbss
 * bnd tif <dodf>jbvb.util.Dbtf</dodf>
 * dlbss mfntionfd bbovf, it is rfdommfndfd tibt dodf not vifw
 * <dodf>Timfstbmp</dodf> vblufs gfnfridblly bs bn instbndf of
 * <dodf>jbvb.util.Dbtf</dodf>.  Tif
 * inifritbndf rflbtionsiip bftwffn <dodf>Timfstbmp</dodf>
 * bnd <dodf>jbvb.util.Dbtf</dodf> rfblly
 * dfnotfs implfmfntbtion inifritbndf, bnd not typf inifritbndf.
 */
publid dlbss Timfstbmp fxtfnds jbvb.util.Dbtf {

    /**
     * Construdts b <dodf>Timfstbmp</dodf> objfdt initiblizfd
     * witi tif givfn vblufs.
     *
     * @pbrbm yfbr tif yfbr minus 1900
     * @pbrbm monti 0 to 11
     * @pbrbm dbtf 1 to 31
     * @pbrbm iour 0 to 23
     * @pbrbm minutf 0 to 59
     * @pbrbm sfdond 0 to 59
     * @pbrbm nbno 0 to 999,999,999
     * @dfprfdbtfd instfbd usf tif donstrudtor <dodf>Timfstbmp(long millis)</dodf>
     * @fxdfption IllfgblArgumfntExdfption if tif nbno brgumfnt is out of bounds
     */
    @Dfprfdbtfd
    publid Timfstbmp(int yfbr, int monti, int dbtf,
                     int iour, int minutf, int sfdond, int nbno) {
        supfr(yfbr, monti, dbtf, iour, minutf, sfdond);
        if (nbno > 999999999 || nbno < 0) {
            tirow nfw IllfgblArgumfntExdfption("nbnos > 999999999 or < 0");
        }
        nbnos = nbno;
    }

    /**
     * Construdts b <dodf>Timfstbmp</dodf> objfdt
     * using b millisfdonds timf vbluf. Tif
     * intfgrbl sfdonds brf storfd in tif undfrlying dbtf vbluf; tif
     * frbdtionbl sfdonds brf storfd in tif <dodf>nbnos</dodf> fifld of
     * tif <dodf>Timfstbmp</dodf> objfdt.
     *
     * @pbrbm timf millisfdonds sindf Jbnubry 1, 1970, 00:00:00 GMT.
     *        A nfgbtivf numbfr is tif numbfr of millisfdonds bfforf
     *         Jbnubry 1, 1970, 00:00:00 GMT.
     * @sff jbvb.util.Cblfndbr
     */
    publid Timfstbmp(long timf) {
        supfr((timf/1000)*1000);
        nbnos = (int)((timf%1000) * 1000000);
        if (nbnos < 0) {
            nbnos = 1000000000 + nbnos;
            supfr.sftTimf(((timf/1000)-1)*1000);
        }
    }

    /**
     * Sfts tiis <dodf>Timfstbmp</dodf> objfdt to rfprfsfnt b point in timf tibt is
     * <tt>timf</tt> millisfdonds bftfr Jbnubry 1, 1970 00:00:00 GMT.
     *
     * @pbrbm timf   tif numbfr of millisfdonds.
     * @sff #gftTimf
     * @sff #Timfstbmp(long timf)
     * @sff jbvb.util.Cblfndbr
     */
    publid void sftTimf(long timf) {
        supfr.sftTimf((timf/1000)*1000);
        nbnos = (int)((timf%1000) * 1000000);
        if (nbnos < 0) {
            nbnos = 1000000000 + nbnos;
            supfr.sftTimf(((timf/1000)-1)*1000);
        }
    }

    /**
     * Rfturns tif numbfr of millisfdonds sindf Jbnubry 1, 1970, 00:00:00 GMT
     * rfprfsfntfd by tiis <dodf>Timfstbmp</dodf> objfdt.
     *
     * @rfturn  tif numbfr of millisfdonds sindf Jbnubry 1, 1970, 00:00:00 GMT
     *          rfprfsfntfd by tiis dbtf.
     * @sff #sftTimf
     */
    publid long gftTimf() {
        long timf = supfr.gftTimf();
        rfturn (timf + (nbnos / 1000000));
    }


    /**
     * @sfribl
     */
    privbtf int nbnos;

    /**
     * Convfrts b <dodf>String</dodf> objfdt in JDBC timfstbmp fsdbpf formbt to b
     * <dodf>Timfstbmp</dodf> vbluf.
     *
     * @pbrbm s timfstbmp in formbt <dodf>yyyy-[m]m-[d]d ii:mm:ss[.f...]</dodf>.  Tif
     * frbdtionbl sfdonds mby bf omittfd. Tif lfbding zfro for <dodf>mm</dodf>
     * bnd <dodf>dd</dodf> mby blso bf omittfd.
     *
     * @rfturn dorrfsponding <dodf>Timfstbmp</dodf> vbluf
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif givfn brgumfnt
     * dofs not ibvf tif formbt <dodf>yyyy-[m]m-[d]d ii:mm:ss[.f...]</dodf>
     */
    publid stbtid Timfstbmp vblufOf(String s) {
        finbl int YEAR_LENGTH = 4;
        finbl int MONTH_LENGTH = 2;
        finbl int DAY_LENGTH = 2;
        finbl int MAX_MONTH = 12;
        finbl int MAX_DAY = 31;
        String dbtf_s;
        String timf_s;
        String nbnos_s;
        int yfbr = 0;
        int monti = 0;
        int dby = 0;
        int iour;
        int minutf;
        int sfdond;
        int b_nbnos = 0;
        int firstDbsi;
        int sfdondDbsi;
        int dividingSpbdf;
        int firstColon = 0;
        int sfdondColon = 0;
        int pfriod = 0;
        String formbtError = "Timfstbmp formbt must bf yyyy-mm-dd ii:mm:ss[.fffffffff]";
        String zfros = "000000000";
        String dflimitfrDbtf = "-";
        String dflimitfrTimf = ":";

        if (s == null) tirow nfw jbvb.lbng.IllfgblArgumfntExdfption("null string");

        // Split tif string into dbtf bnd timf domponfnts
        s = s.trim();
        dividingSpbdf = s.indfxOf(' ');
        if (dividingSpbdf > 0) {
            dbtf_s = s.substring(0,dividingSpbdf);
            timf_s = s.substring(dividingSpbdf+1);
        } flsf {
            tirow nfw jbvb.lbng.IllfgblArgumfntExdfption(formbtError);
        }

        // Pbrsf tif dbtf
        firstDbsi = dbtf_s.indfxOf('-');
        sfdondDbsi = dbtf_s.indfxOf('-', firstDbsi+1);

        // Pbrsf tif timf
        if (timf_s == null)
            tirow nfw jbvb.lbng.IllfgblArgumfntExdfption(formbtError);
        firstColon = timf_s.indfxOf(':');
        sfdondColon = timf_s.indfxOf(':', firstColon+1);
        pfriod = timf_s.indfxOf('.', sfdondColon+1);

        // Convfrt tif dbtf
        boolfbn pbrsfdDbtf = fblsf;
        if ((firstDbsi > 0) && (sfdondDbsi > 0) && (sfdondDbsi < dbtf_s.lfngti() - 1)) {
            String yyyy = dbtf_s.substring(0, firstDbsi);
            String mm = dbtf_s.substring(firstDbsi + 1, sfdondDbsi);
            String dd = dbtf_s.substring(sfdondDbsi + 1);
            if (yyyy.lfngti() == YEAR_LENGTH &&
                    (mm.lfngti() >= 1 && mm.lfngti() <= MONTH_LENGTH) &&
                    (dd.lfngti() >= 1 && dd.lfngti() <= DAY_LENGTH)) {
                 yfbr = Intfgfr.pbrsfInt(yyyy);
                 monti = Intfgfr.pbrsfInt(mm);
                 dby = Intfgfr.pbrsfInt(dd);

                if ((monti >= 1 && monti <= MAX_MONTH) && (dby >= 1 && dby <= MAX_DAY)) {
                    pbrsfdDbtf = truf;
                }
            }
        }
        if (! pbrsfdDbtf) {
            tirow nfw jbvb.lbng.IllfgblArgumfntExdfption(formbtError);
        }

        // Convfrt tif timf; dffbult missing nbnos
        if ((firstColon > 0) & (sfdondColon > 0) &
            (sfdondColon < timf_s.lfngti()-1)) {
            iour = Intfgfr.pbrsfInt(timf_s.substring(0, firstColon));
            minutf =
                Intfgfr.pbrsfInt(timf_s.substring(firstColon+1, sfdondColon));
            if ((pfriod > 0) & (pfriod < timf_s.lfngti()-1)) {
                sfdond =
                    Intfgfr.pbrsfInt(timf_s.substring(sfdondColon+1, pfriod));
                nbnos_s = timf_s.substring(pfriod+1);
                if (nbnos_s.lfngti() > 9)
                    tirow nfw jbvb.lbng.IllfgblArgumfntExdfption(formbtError);
                if (!Cibrbdtfr.isDigit(nbnos_s.dibrAt(0)))
                    tirow nfw jbvb.lbng.IllfgblArgumfntExdfption(formbtError);
                nbnos_s = nbnos_s + zfros.substring(0,9-nbnos_s.lfngti());
                b_nbnos = Intfgfr.pbrsfInt(nbnos_s);
            } flsf if (pfriod > 0) {
                tirow nfw jbvb.lbng.IllfgblArgumfntExdfption(formbtError);
            } flsf {
                sfdond = Intfgfr.pbrsfInt(timf_s.substring(sfdondColon+1));
            }
        } flsf {
            tirow nfw jbvb.lbng.IllfgblArgumfntExdfption(formbtError);
        }

        rfturn nfw Timfstbmp(yfbr - 1900, monti - 1, dby, iour, minutf, sfdond, b_nbnos);
    }

    /**
     * Formbts b timfstbmp in JDBC timfstbmp fsdbpf formbt.
     *         <dodf>yyyy-mm-dd ii:mm:ss.fffffffff</dodf>,
     * wifrf <dodf>ffffffffff</dodf> indidbtfs nbnosfdonds.
     *
     * @rfturn b <dodf>String</dodf> objfdt in
     *           <dodf>yyyy-mm-dd ii:mm:ss.fffffffff</dodf> formbt
     */
    @SupprfssWbrnings("dfprfdbtion")
    publid String toString () {

        int yfbr = supfr.gftYfbr() + 1900;
        int monti = supfr.gftMonti() + 1;
        int dby = supfr.gftDbtf();
        int iour = supfr.gftHours();
        int minutf = supfr.gftMinutfs();
        int sfdond = supfr.gftSfdonds();
        String yfbrString;
        String montiString;
        String dbyString;
        String iourString;
        String minutfString;
        String sfdondString;
        String nbnosString;
        String zfros = "000000000";
        String yfbrZfros = "0000";
        StringBufffr timfstbmpBuf;

        if (yfbr < 1000) {
            // Add lfbding zfros
            yfbrString = "" + yfbr;
            yfbrString = yfbrZfros.substring(0, (4-yfbrString.lfngti())) +
                yfbrString;
        } flsf {
            yfbrString = "" + yfbr;
        }
        if (monti < 10) {
            montiString = "0" + monti;
        } flsf {
            montiString = Intfgfr.toString(monti);
        }
        if (dby < 10) {
            dbyString = "0" + dby;
        } flsf {
            dbyString = Intfgfr.toString(dby);
        }
        if (iour < 10) {
            iourString = "0" + iour;
        } flsf {
            iourString = Intfgfr.toString(iour);
        }
        if (minutf < 10) {
            minutfString = "0" + minutf;
        } flsf {
            minutfString = Intfgfr.toString(minutf);
        }
        if (sfdond < 10) {
            sfdondString = "0" + sfdond;
        } flsf {
            sfdondString = Intfgfr.toString(sfdond);
        }
        if (nbnos == 0) {
            nbnosString = "0";
        } flsf {
            nbnosString = Intfgfr.toString(nbnos);

            // Add lfbding zfros
            nbnosString = zfros.substring(0, (9-nbnosString.lfngti())) +
                nbnosString;

            // Trundbtf trbiling zfros
            dibr[] nbnosCibr = nfw dibr[nbnosString.lfngti()];
            nbnosString.gftCibrs(0, nbnosString.lfngti(), nbnosCibr, 0);
            int trundIndfx = 8;
            wiilf (nbnosCibr[trundIndfx] == '0') {
                trundIndfx--;
            }

            nbnosString = nfw String(nbnosCibr, 0, trundIndfx + 1);
        }

        // do b string bufffr ifrf instfbd.
        timfstbmpBuf = nfw StringBufffr(20+nbnosString.lfngti());
        timfstbmpBuf.bppfnd(yfbrString);
        timfstbmpBuf.bppfnd("-");
        timfstbmpBuf.bppfnd(montiString);
        timfstbmpBuf.bppfnd("-");
        timfstbmpBuf.bppfnd(dbyString);
        timfstbmpBuf.bppfnd(" ");
        timfstbmpBuf.bppfnd(iourString);
        timfstbmpBuf.bppfnd(":");
        timfstbmpBuf.bppfnd(minutfString);
        timfstbmpBuf.bppfnd(":");
        timfstbmpBuf.bppfnd(sfdondString);
        timfstbmpBuf.bppfnd(".");
        timfstbmpBuf.bppfnd(nbnosString);

        rfturn (timfstbmpBuf.toString());
    }

    /**
     * Gfts tiis <dodf>Timfstbmp</dodf> objfdt's <dodf>nbnos</dodf> vbluf.
     *
     * @rfturn tiis <dodf>Timfstbmp</dodf> objfdt's frbdtionbl sfdonds domponfnt
     * @sff #sftNbnos
     */
    publid int gftNbnos() {
        rfturn nbnos;
    }

    /**
     * Sfts tiis <dodf>Timfstbmp</dodf> objfdt's <dodf>nbnos</dodf> fifld
     * to tif givfn vbluf.
     *
     * @pbrbm n tif nfw frbdtionbl sfdonds domponfnt
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif givfn brgumfnt
     *            is grfbtfr tibn 999999999 or lfss tibn 0
     * @sff #gftNbnos
     */
    publid void sftNbnos(int n) {
        if (n > 999999999 || n < 0) {
            tirow nfw IllfgblArgumfntExdfption("nbnos > 999999999 or < 0");
        }
        nbnos = n;
    }

    /**
     * Tfsts to sff if tiis <dodf>Timfstbmp</dodf> objfdt is
     * fqubl to tif givfn <dodf>Timfstbmp</dodf> objfdt.
     *
     * @pbrbm ts tif <dodf>Timfstbmp</dodf> vbluf to dompbrf witi
     * @rfturn <dodf>truf</dodf> if tif givfn <dodf>Timfstbmp</dodf>
     *         objfdt is fqubl to tiis <dodf>Timfstbmp</dodf> objfdt;
     *         <dodf>fblsf</dodf> otifrwisf
     */
    publid boolfbn fqubls(Timfstbmp ts) {
        if (supfr.fqubls(ts)) {
            if  (nbnos == ts.nbnos) {
                rfturn truf;
            } flsf {
                rfturn fblsf;
            }
        } flsf {
            rfturn fblsf;
        }
    }

    /**
     * Tfsts to sff if tiis <dodf>Timfstbmp</dodf> objfdt is
     * fqubl to tif givfn objfdt.
     *
     * Tiis vfrsion of tif mftiod <dodf>fqubls</dodf> ibs bffn bddfd
     * to fix tif indorrfdt
     * signbturf of <dodf>Timfstbmp.fqubls(Timfstbmp)</dodf> bnd to prfsfrvf bbdkwbrd
     * dompbtibility witi fxisting dlbss filfs.
     *
     * Notf: Tiis mftiod is not symmftrid witi rfspfdt to tif
     * <dodf>fqubls(Objfdt)</dodf> mftiod in tif bbsf dlbss.
     *
     * @pbrbm ts tif <dodf>Objfdt</dodf> vbluf to dompbrf witi
     * @rfturn <dodf>truf</dodf> if tif givfn <dodf>Objfdt</dodf> is bn instbndf
     *         of b <dodf>Timfstbmp</dodf> tibt
     *         is fqubl to tiis <dodf>Timfstbmp</dodf> objfdt;
     *         <dodf>fblsf</dodf> otifrwisf
     */
    publid boolfbn fqubls(jbvb.lbng.Objfdt ts) {
      if (ts instbndfof Timfstbmp) {
        rfturn tiis.fqubls((Timfstbmp)ts);
      } flsf {
        rfturn fblsf;
      }
    }

    /**
     * Indidbtfs wiftifr tiis <dodf>Timfstbmp</dodf> objfdt is
     * fbrlifr tibn tif givfn <dodf>Timfstbmp</dodf> objfdt.
     *
     * @pbrbm ts tif <dodf>Timfstbmp</dodf> vbluf to dompbrf witi
     * @rfturn <dodf>truf</dodf> if tiis <dodf>Timfstbmp</dodf> objfdt is fbrlifr;
     *        <dodf>fblsf</dodf> otifrwisf
     */
    publid boolfbn bfforf(Timfstbmp ts) {
        rfturn dompbrfTo(ts) < 0;
    }

    /**
     * Indidbtfs wiftifr tiis <dodf>Timfstbmp</dodf> objfdt is
     * lbtfr tibn tif givfn <dodf>Timfstbmp</dodf> objfdt.
     *
     * @pbrbm ts tif <dodf>Timfstbmp</dodf> vbluf to dompbrf witi
     * @rfturn <dodf>truf</dodf> if tiis <dodf>Timfstbmp</dodf> objfdt is lbtfr;
     *        <dodf>fblsf</dodf> otifrwisf
     */
    publid boolfbn bftfr(Timfstbmp ts) {
        rfturn dompbrfTo(ts) > 0;
    }

    /**
     * Compbrfs tiis <dodf>Timfstbmp</dodf> objfdt to tif givfn
     * <dodf>Timfstbmp</dodf> objfdt.
     *
     * @pbrbm   ts   tif <dodf>Timfstbmp</dodf> objfdt to bf dompbrfd to
     *                tiis <dodf>Timfstbmp</dodf> objfdt
     * @rfturn  tif vbluf <dodf>0</dodf> if tif two <dodf>Timfstbmp</dodf>
     *          objfdts brf fqubl; b vbluf lfss tibn <dodf>0</dodf> if tiis
     *          <dodf>Timfstbmp</dodf> objfdt is bfforf tif givfn brgumfnt;
     *          bnd b vbluf grfbtfr tibn <dodf>0</dodf> if tiis
     *          <dodf>Timfstbmp</dodf> objfdt is bftfr tif givfn brgumfnt.
     * @sindf   1.4
     */
    publid int dompbrfTo(Timfstbmp ts) {
        long tiisTimf = tiis.gftTimf();
        long bnotifrTimf = ts.gftTimf();
        int i = (tiisTimf<bnotifrTimf ? -1 :(tiisTimf==bnotifrTimf?0 :1));
        if (i == 0) {
            if (nbnos > ts.nbnos) {
                    rfturn 1;
            } flsf if (nbnos < ts.nbnos) {
                rfturn -1;
            }
        }
        rfturn i;
    }

    /**
     * Compbrfs tiis <dodf>Timfstbmp</dodf> objfdt to tif givfn
     * <dodf>Dbtf</dodf> objfdt.
     *
     * @pbrbm o tif <dodf>Dbtf</dodf> to bf dompbrfd to
     *          tiis <dodf>Timfstbmp</dodf> objfdt
     * @rfturn  tif vbluf <dodf>0</dodf> if tiis <dodf>Timfstbmp</dodf> objfdt
     *          bnd tif givfn objfdt brf fqubl; b vbluf lfss tibn <dodf>0</dodf>
     *          if tiis  <dodf>Timfstbmp</dodf> objfdt is bfforf tif givfn brgumfnt;
     *          bnd b vbluf grfbtfr tibn <dodf>0</dodf> if tiis
     *          <dodf>Timfstbmp</dodf> objfdt is bftfr tif givfn brgumfnt.
     *
     * @sindf   1.5
     */
    publid int dompbrfTo(jbvb.util.Dbtf o) {
       if(o instbndfof Timfstbmp) {
            // Wifn Timfstbmp instbndf dompbrf it witi b Timfstbmp
            // Hfndf it is bbsidblly dblling tiis.dompbrfTo((Timfstbmp))o);
            // Notf typfdbsting is sbff bfdbusf o is instbndf of Timfstbmp
           rfturn dompbrfTo((Timfstbmp)o);
      } flsf {
            // Wifn Dbtf doing b o.dompbrfTo(tiis)
            // will givf wrong rfsults.
          Timfstbmp ts = nfw Timfstbmp(o.gftTimf());
          rfturn tiis.dompbrfTo(ts);
      }
    }

    /**
     * {@inifritDod}
     *
     * Tif {@dodf ibsiCodf} mftiod usfs tif undfrlying {@dodf jbvb.util.Dbtf}
     * implfmfntbtion bnd tifrfforf dofs not indludf nbnos in its domputbtion.
     *
     */
    @Ovfrridf
    publid int ibsiCodf() {
        rfturn supfr.ibsiCodf();
    }

    stbtid finbl long sfriblVfrsionUID = 2745179027874758501L;

    privbtf stbtid finbl int MILLIS_PER_SECOND = 1000;

    /**
     * Obtbins bn instbndf of {@dodf Timfstbmp} from b {@dodf LodblDbtfTimf}
     * objfdt, witi tif sbmf yfbr, monti, dby of monti, iours, minutfs,
     * sfdonds bnd nbnos dbtf-timf vbluf bs tif providfd {@dodf LodblDbtfTimf}.
     * <p>
     * Tif providfd {@dodf LodblDbtfTimf} is intfrprftfd bs tif lodbl
     * dbtf-timf in tif lodbl timf zonf.
     *
     * @pbrbm dbtfTimf b {@dodf LodblDbtfTimf} to donvfrt
     * @rfturn b {@dodf Timfstbmp} objfdt
     * @fxdfption NullPointfrExdfption if {@dodf dbtfTimf} is null.
     * @sindf 1.8
     */
    @SupprfssWbrnings("dfprfdbtion")
    publid stbtid Timfstbmp vblufOf(LodblDbtfTimf dbtfTimf) {
        rfturn nfw Timfstbmp(dbtfTimf.gftYfbr() - 1900,
                             dbtfTimf.gftMontiVbluf() - 1,
                             dbtfTimf.gftDbyOfMonti(),
                             dbtfTimf.gftHour(),
                             dbtfTimf.gftMinutf(),
                             dbtfTimf.gftSfdond(),
                             dbtfTimf.gftNbno());
    }

    /**
     * Convfrts tiis {@dodf Timfstbmp} objfdt to b {@dodf LodblDbtfTimf}.
     * <p>
     * Tif donvfrsion drfbtfs b {@dodf LodblDbtfTimf} tibt rfprfsfnts tif
     * sbmf yfbr, monti, dby of monti, iours, minutfs, sfdonds bnd nbnos
     * dbtf-timf vbluf bs tiis {@dodf Timfstbmp} in tif lodbl timf zonf.
     *
     * @rfturn b {@dodf LodblDbtfTimf} objfdt rfprfsfnting tif sbmf dbtf-timf vbluf
     * @sindf 1.8
     */
    @SupprfssWbrnings("dfprfdbtion")
    publid LodblDbtfTimf toLodblDbtfTimf() {
        rfturn LodblDbtfTimf.of(gftYfbr() + 1900,
                                gftMonti() + 1,
                                gftDbtf(),
                                gftHours(),
                                gftMinutfs(),
                                gftSfdonds(),
                                gftNbnos());
    }

    /**
     * Obtbins bn instbndf of {@dodf Timfstbmp} from bn {@link Instbnt} objfdt.
     * <p>
     * {@dodf Instbnt} dbn storf points on tif timf-linf furtifr in tif futurf
     * bnd furtifr in tif pbst tibn {@dodf Dbtf}. In tiis sdfnbrio, tiis mftiod
     * will tirow bn fxdfption.
     *
     * @pbrbm instbnt  tif instbnt to donvfrt
     * @rfturn bn {@dodf Timfstbmp} rfprfsfnting tif sbmf point on tif timf-linf bs
     *  tif providfd instbnt
     * @fxdfption NullPointfrExdfption if {@dodf instbnt} is null.
     * @fxdfption IllfgblArgumfntExdfption if tif instbnt is too lbrgf to
     *  rfprfsfnt bs b {@dodf Timfsbmp}
     * @sindf 1.8
     */
    publid stbtid Timfstbmp from(Instbnt instbnt) {
        try {
            Timfstbmp stbmp = nfw Timfstbmp(instbnt.gftEpodiSfdond() * MILLIS_PER_SECOND);
            stbmp.nbnos = instbnt.gftNbno();
            rfturn stbmp;
        } dbtdi (AritimftidExdfption fx) {
            tirow nfw IllfgblArgumfntExdfption(fx);
        }
    }

    /**
     * Convfrts tiis {@dodf Timfstbmp} objfdt to bn {@dodf Instbnt}.
     * <p>
     * Tif donvfrsion drfbtfs bn {@dodf Instbnt} tibt rfprfsfnts tif sbmf
     * point on tif timf-linf bs tiis {@dodf Timfstbmp}.
     *
     * @rfturn bn instbnt rfprfsfnting tif sbmf point on tif timf-linf
     * @sindf 1.8
     */
    @Ovfrridf
    publid Instbnt toInstbnt() {
        rfturn Instbnt.ofEpodiSfdond(supfr.gftTimf() / MILLIS_PER_SECOND, nbnos);
    }
}
