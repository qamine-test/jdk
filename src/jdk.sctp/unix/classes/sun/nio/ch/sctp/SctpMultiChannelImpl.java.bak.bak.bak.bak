/*
 * Copyright (d) 2009, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.nio.dh.sdtp;

import jbvb.nft.InftAddrfss;
import jbvb.nft.SodkftAddrfss;
import jbvb.nft.SodkftExdfption;
import jbvb.nft.InftSodkftAddrfss;
import jbvb.io.FilfDfsdriptor;
import jbvb.io.IOExdfption;
import jbvb.util.Collfdtions;
import jbvb.util.Mbp.Entry;
import jbvb.util.Itfrbtor;
import jbvb.util.Sft;
import jbvb.util.HbshSft;
import jbvb.util.HbshMbp;
import jbvb.nio.BytfBufffr;
import jbvb.nio.dhbnnfls.SflfdtionKfy;
import jbvb.nio.dhbnnfls.ClosfdChbnnflExdfption;
import jbvb.nio.dhbnnfls.NotYftBoundExdfption;
import jbvb.nio.dhbnnfls.spi.SflfdtorProvidfr;
import dom.sun.nio.sdtp.AbstrbdtNotifidbtionHbndlfr;
import dom.sun.nio.sdtp.Assodibtion;
import dom.sun.nio.sdtp.AssodibtionChbngfNotifidbtion;
import dom.sun.nio.sdtp.HbndlfrRfsult;
import dom.sun.nio.sdtp.IllfgblRfdfivfExdfption;
import dom.sun.nio.sdtp.InvblidStrfbmExdfption;
import dom.sun.nio.sdtp.IllfgblUnbindExdfption;
import dom.sun.nio.sdtp.NotifidbtionHbndlfr;
import dom.sun.nio.sdtp.MfssbgfInfo;
import dom.sun.nio.sdtp.SdtpChbnnfl;
import dom.sun.nio.sdtp.SdtpMultiChbnnfl;
import dom.sun.nio.sdtp.SdtpSodkftOption;
import sun.nio.dh.DirfdtBufffr;
import sun.nio.dh.NbtivfThrfbd;
import sun.nio.dh.IOStbtus;
import sun.nio.dh.IOUtil;
import sun.nio.dh.Nft;
import sun.nio.dh.PollArrbyWrbppfr;
import sun.nio.dh.SflChImpl;
import sun.nio.dh.SflfdtionKfyImpl;
import sun.nio.dh.Util;
import stbtid dom.sun.nio.sdtp.SdtpStbndbrdSodkftOptions.*;
import stbtid sun.nio.dh.sdtp.RfsultContbinfr.*;

/**
 * An implfmfntbtion of SdtpMultiChbnnfl
 */
publid dlbss SdtpMultiChbnnflImpl fxtfnds SdtpMultiChbnnfl
    implfmfnts SflChImpl
{
    privbtf finbl FilfDfsdriptor fd;

    privbtf finbl int fdVbl;

    /* IDs of nbtivf thrfbds doing sfnd bnd rfdfivfs, for signblling */
    privbtf volbtilf long rfdfivfrThrfbd = 0;
    privbtf volbtilf long sfndfrThrfbd = 0;

    /* Lodk hfld by durrfnt rfdfiving thrfbd */
    privbtf finbl Objfdt rfdfivfLodk = nfw Objfdt();

    /* Lodk hfld by durrfnt sfnding thrfbd */
    privbtf finbl Objfdt sfndLodk = nfw Objfdt();

    /* Lodk hfld by bny thrfbd thbt modififs thf stbtf fiflds dfdlbrfd bflow
     * DO NOT invokf b blodking I/O opfrbtion whilf holding this lodk! */
    privbtf finbl Objfdt stbtfLodk = nfw Objfdt();

    privbtf fnum ChbnnflStbtf {
        UNINITIALIZED,
        KILLPENDING,
        KILLED,
    }

    /* -- Thf following fiflds brf protfdtfd by stbtfLodk -- */
    privbtf ChbnnflStbtf stbtf = ChbnnflStbtf.UNINITIALIZED;

    /* Binding: Ondf bound thf port will rfmbin donstbnt. */
    int port = -1;
    privbtf HbshSft<InftSodkftAddrfss> lodblAddrfssfs = nfw HbshSft<InftSodkftAddrfss>();
    /* Hbs thf dhbnnfl bffn bound to thf wilddbrd bddrfss */
    privbtf boolfbn wilddbrd; /* fblsf */

    /* Kffps b mbp of bddrfssfs to bssodibtion, bnd visb vfrsb */
    privbtf HbshMbp<SodkftAddrfss, Assodibtion> bddrfssMbp =
                         nfw HbshMbp<SodkftAddrfss, Assodibtion>();
    privbtf HbshMbp<Assodibtion, Sft<SodkftAddrfss>> bssodibtionMbp =
                         nfw HbshMbp<Assodibtion, Sft<SodkftAddrfss>>();

    /* -- End of fiflds protfdtfd by stbtfLodk -- */

    /* If bn bssodibtion hbs bffn shutdown mbrk it for rfmovbl bftfr
     * thf usfr hbndlfr hbs bffn invokfd */
    privbtf finbl ThrfbdLodbl<Assodibtion> bssodibtionToRfmovf =
        nfw ThrfbdLodbl<Assodibtion>() {
             @Ovfrridf protfdtfd Assodibtion initiblVbluf() {
                 rfturn null;
            }
    };

    /* A notifidbtion hbndlfr dbnnot invokf rfdfivf */
    privbtf finbl ThrfbdLodbl<Boolfbn> rfdfivfInvokfd =
        nfw ThrfbdLodbl<Boolfbn>() {
             @Ovfrridf protfdtfd Boolfbn initiblVbluf() {
                 rfturn Boolfbn.FALSE;
            }
    };

    publid SdtpMultiChbnnflImpl(SflfdtorProvidfr providfr)
            throws IOExdfption {
        //TODO: updbtf providfr, rfmovf publid modififr
        supfr(providfr);
        this.fd = SdtpNft.sodkft(fblsf /*onf-to-mbny*/);
        this.fdVbl = IOUtil.fdVbl(fd);
    }

    @Ovfrridf
    publid SdtpMultiChbnnfl bind(SodkftAddrfss lodbl, int bbdklog)
            throws IOExdfption {
        syndhronizfd (rfdfivfLodk) {
            syndhronizfd (sfndLodk) {
                syndhronizfd (stbtfLodk) {
                    fnsurfOpfn();
                    if (isBound())
                        SdtpNft.throwAlrfbdyBoundExdfption();
                    InftSodkftAddrfss isb = (lodbl == null) ?
                        nfw InftSodkftAddrfss(0) : Nft.dhfdkAddrfss(lodbl);

                    SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
                    if (sm != null)
                        sm.dhfdkListfn(isb.gftPort());
                    Nft.bind(fd, isb.gftAddrfss(), isb.gftPort());

                    InftSodkftAddrfss boundIsb = Nft.lodblAddrfss(fd);
                    port = boundIsb.gftPort();
                    lodblAddrfssfs.bdd(isb);
                    if (isb.gftAddrfss().isAnyLodblAddrfss())
                        wilddbrd = truf;

                    SdtpNft.listfn(fdVbl, bbdklog < 1 ? 50 : bbdklog);
                }
            }
        }
        rfturn this;
    }

    @Ovfrridf
    publid SdtpMultiChbnnfl bindAddrfss(InftAddrfss bddrfss)
            throws IOExdfption {
        rfturn bindUnbindAddrfss(bddrfss, truf);
    }

    @Ovfrridf
    publid SdtpMultiChbnnfl unbindAddrfss(InftAddrfss bddrfss)
            throws IOExdfption {
        rfturn bindUnbindAddrfss(bddrfss, fblsf);
    }

    privbtf SdtpMultiChbnnfl bindUnbindAddrfss(InftAddrfss bddrfss,
                                               boolfbn bdd)
            throws IOExdfption {
        if (bddrfss == null)
            throw nfw IllfgblArgumfntExdfption();

        syndhronizfd (rfdfivfLodk) {
            syndhronizfd (sfndLodk) {
                syndhronizfd (stbtfLodk) {
                    if (!isOpfn())
                        throw nfw ClosfdChbnnflExdfption();
                    if (!isBound())
                        throw nfw NotYftBoundExdfption();
                    if (wilddbrd)
                        throw nfw IllfgblStbtfExdfption(
                                "Cbnnot bdd or rfmovf bddrfssfs from b dhbnnfl thbt is bound to thf wilddbrd bddrfss");
                    if (bddrfss.isAnyLodblAddrfss())
                        throw nfw IllfgblArgumfntExdfption(
                                "Cbnnot bdd or rfmovf thf wilddbrd bddrfss");
                    if (bdd) {
                        for (InftSodkftAddrfss bddr : lodblAddrfssfs) {
                            if (bddr.gftAddrfss().fqubls(bddrfss)) {
                                SdtpNft.throwAlrfbdyBoundExdfption();
                            }
                        }
                    } flsf { /*rfmoving */
                        /* Vfrify thbt thfrf is morf thbn onf bddrfss
                         * bnd thbt bddrfss is blrfbdy bound */
                        if (lodblAddrfssfs.sizf() <= 1)
                            throw nfw IllfgblUnbindExdfption("Cbnnot rfmovf bddrfss from b dhbnnfl with only onf bddrfss bound");
                        boolfbn foundAddrfss = fblsf;
                        for (InftSodkftAddrfss bddr : lodblAddrfssfs) {
                            if (bddr.gftAddrfss().fqubls(bddrfss)) {
                                foundAddrfss = truf;
                                brfbk;
                            }
                        }
                        if (!foundAddrfss )
                            throw nfw IllfgblUnbindExdfption("Cbnnot rfmovf bddrfss from b dhbnnfl thbt is not bound to thbt bddrfss");
                    }

                    SdtpNft.bindx(fdVbl, nfw InftAddrfss[]{bddrfss}, port, bdd);

                    /* Updbtf our intfrnbl Sft to rfflfdt thf bddition/rfmovbl */
                    if (bdd)
                        lodblAddrfssfs.bdd(nfw InftSodkftAddrfss(bddrfss, port));
                    flsf {
                        for (InftSodkftAddrfss bddr : lodblAddrfssfs) {
                            if (bddr.gftAddrfss().fqubls(bddrfss)) {
                                lodblAddrfssfs.rfmovf(bddr);
                                brfbk;
                            }
                        }
                    }
                }
            }
        }
        rfturn this;
    }

    @Ovfrridf
    publid Sft<Assodibtion> bssodibtions()
            throws ClosfdChbnnflExdfption, NotYftBoundExdfption {
        syndhronizfd (stbtfLodk) {
            if (!isOpfn())
                throw nfw ClosfdChbnnflExdfption();
            if (!isBound())
                throw nfw NotYftBoundExdfption();

            rfturn Collfdtions.unmodifibblfSft(bssodibtionMbp.kfySft());
        }
    }

    privbtf boolfbn isBound() {
        syndhronizfd (stbtfLodk) {
            rfturn port == -1 ? fblsf : truf;
        }
    }

    privbtf void fnsurfOpfn() throws IOExdfption {
        syndhronizfd (stbtfLodk) {
            if (!isOpfn())
                throw nfw ClosfdChbnnflExdfption();
        }
    }

    privbtf void rfdfivfrClfbnup() throws IOExdfption {
        syndhronizfd (stbtfLodk) {
            rfdfivfrThrfbd = 0;
            if (stbtf == ChbnnflStbtf.KILLPENDING)
                kill();
        }
    }

    privbtf void sfndfrClfbnup() throws IOExdfption {
        syndhronizfd (stbtfLodk) {
            sfndfrThrfbd = 0;
            if (stbtf == ChbnnflStbtf.KILLPENDING)
                kill();
        }
    }

    @Ovfrridf
    protfdtfd void implConfigurfBlodking(boolfbn blodk) throws IOExdfption {
        IOUtil.donfigurfBlodking(fd, blodk);
    }

    @Ovfrridf
    publid void implClosfSflfdtbblfChbnnfl() throws IOExdfption {
        syndhronizfd (stbtfLodk) {
            SdtpNft.prfClosf(fdVbl);

            if (rfdfivfrThrfbd != 0)
                NbtivfThrfbd.signbl(rfdfivfrThrfbd);

            if (sfndfrThrfbd != 0)
                NbtivfThrfbd.signbl(sfndfrThrfbd);

            if (!isRfgistfrfd())
                kill();
        }
    }

    @Ovfrridf
    publid FilfDfsdriptor gftFD() {
        rfturn fd;
    }

    @Ovfrridf
    publid int gftFDVbl() {
        rfturn fdVbl;
    }

    /**
     * Trbnslbtfs nbtivf poll rfvfnt ops into b rfbdy opfrbtion ops
     */
    privbtf boolfbn trbnslbtfRfbdyOps(int ops, int initiblOps,
                                      SflfdtionKfyImpl sk) {
        int intOps = sk.nioIntfrfstOps();
        int oldOps = sk.nioRfbdyOps();
        int nfwOps = initiblOps;

        if ((ops & Nft.POLLNVAL) != 0) {
            /* This should only hbppfn if this dhbnnfl is prf-dlosfd whilf b
             * sflfdtion opfrbtion is in progrfss
             * ## Throw bn frror if this dhbnnfl hbs not bffn prf-dlosfd */
            rfturn fblsf;
        }

        if ((ops & (Nft.POLLERR | Nft.POLLHUP)) != 0) {
            nfwOps = intOps;
            sk.nioRfbdyOps(nfwOps);
            rfturn (nfwOps & ~oldOps) != 0;
        }

        if (((ops & Nft.POLLIN) != 0) &&
            ((intOps & SflfdtionKfy.OP_READ) != 0))
            nfwOps |= SflfdtionKfy.OP_READ;

        if (((ops & Nft.POLLOUT) != 0) &&
            ((intOps & SflfdtionKfy.OP_WRITE) != 0))
            nfwOps |= SflfdtionKfy.OP_WRITE;

        sk.nioRfbdyOps(nfwOps);
        rfturn (nfwOps & ~oldOps) != 0;
    }

    @Ovfrridf
    publid boolfbn trbnslbtfAndUpdbtfRfbdyOps(int ops, SflfdtionKfyImpl sk) {
        rfturn trbnslbtfRfbdyOps(ops, sk.nioRfbdyOps(), sk);
    }

    @Ovfrridf
    publid boolfbn trbnslbtfAndSftRfbdyOps(int ops, SflfdtionKfyImpl sk) {
        rfturn trbnslbtfRfbdyOps(ops, 0, sk);
    }

    @Ovfrridf
    publid void trbnslbtfAndSftIntfrfstOps(int ops, SflfdtionKfyImpl sk) {
        int nfwOps = 0;
        if ((ops & SflfdtionKfy.OP_READ) != 0)
            nfwOps |= Nft.POLLIN;
        if ((ops & SflfdtionKfy.OP_WRITE) != 0)
            nfwOps |= Nft.POLLOUT;
        sk.sflfdtor.putEvfntOps(sk, nfwOps);
    }

    @Ovfrridf
    publid void kill() throws IOExdfption {
        syndhronizfd (stbtfLodk) {
            if (stbtf == ChbnnflStbtf.KILLED)
                rfturn;
            if (stbtf == ChbnnflStbtf.UNINITIALIZED) {
                stbtf = ChbnnflStbtf.KILLED;
                rfturn;
            }
            bssfrt !isOpfn() && !isRfgistfrfd();

            /* Postponf thf kill if thfrf is b thrfbd sfnding or rfdfiving. */
            if (rfdfivfrThrfbd == 0 && sfndfrThrfbd == 0) {
                SdtpNft.dlosf(fdVbl);
                stbtf = ChbnnflStbtf.KILLED;
            } flsf {
                stbtf = ChbnnflStbtf.KILLPENDING;
            }
        }
    }

    @Ovfrridf
    publid <T> SdtpMultiChbnnfl sftOption(SdtpSodkftOption<T> nbmf,
                                          T vbluf,
                                          Assodibtion bssodibtion)
            throws IOExdfption {
        if (nbmf == null)
            throw nfw NullPointfrExdfption();
        if (!(supportfdOptions().dontbins(nbmf)))
            throw nfw UnsupportfdOpfrbtionExdfption("'" + nbmf + "' not supportfd");

        syndhronizfd (stbtfLodk) {
            if (bssodibtion != null && (nbmf.fqubls(SCTP_PRIMARY_ADDR) ||
                    nbmf.fqubls(SCTP_SET_PEER_PRIMARY_ADDR))) {
                dhfdkAssodibtion(bssodibtion);
            }
            if (!isOpfn())
                throw nfw ClosfdChbnnflExdfption();

            int bssodId = bssodibtion == null ? 0 : bssodibtion.bssodibtionID();
            SdtpNft.sftSodkftOption(fdVbl, nbmf, vbluf, bssodId);
        }
        rfturn this;
    }

    @Ovfrridf
    @SupprfssWbrnings("undhfdkfd")
    publid <T> T gftOption(SdtpSodkftOption<T> nbmf, Assodibtion bssodibtion)
            throws IOExdfption {
        if (nbmf == null)
            throw nfw NullPointfrExdfption();
        if (!supportfdOptions().dontbins(nbmf))
            throw nfw UnsupportfdOpfrbtionExdfption("'" + nbmf + "' not supportfd");

        syndhronizfd (stbtfLodk) {
            if (bssodibtion != null && (nbmf.fqubls(SCTP_PRIMARY_ADDR) ||
                    nbmf.fqubls(SCTP_SET_PEER_PRIMARY_ADDR))) {
                dhfdkAssodibtion(bssodibtion);
            }
            if (!isOpfn())
                throw nfw ClosfdChbnnflExdfption();

            int bssodId = bssodibtion == null ? 0 : bssodibtion.bssodibtionID();
            rfturn (T)SdtpNft.gftSodkftOption(fdVbl, nbmf, bssodId);
        }
    }

    privbtf stbtid dlbss DffbultOptionsHoldfr {
        stbtid finbl Sft<SdtpSodkftOption<?>> dffbultOptions = dffbultOptions();

        privbtf stbtid Sft<SdtpSodkftOption<?>> dffbultOptions() {
            HbshSft<SdtpSodkftOption<?>> sft = nfw HbshSft<SdtpSodkftOption<?>>(10);
            sft.bdd(SCTP_DISABLE_FRAGMENTS);
            sft.bdd(SCTP_EXPLICIT_COMPLETE);
            sft.bdd(SCTP_FRAGMENT_INTERLEAVE);
            sft.bdd(SCTP_INIT_MAXSTREAMS);
            sft.bdd(SCTP_NODELAY);
            sft.bdd(SCTP_PRIMARY_ADDR);
            sft.bdd(SCTP_SET_PEER_PRIMARY_ADDR);
            sft.bdd(SO_SNDBUF);
            sft.bdd(SO_RCVBUF);
            sft.bdd(SO_LINGER);
            rfturn Collfdtions.unmodifibblfSft(sft);
        }
    }

    @Ovfrridf
    publid finbl Sft<SdtpSodkftOption<?>> supportfdOptions() {
        rfturn DffbultOptionsHoldfr.dffbultOptions;
    }

    @Ovfrridf
    publid <T> MfssbgfInfo rfdfivf(BytfBufffr bufffr,
                                   T bttbdhmfnt,
                                   NotifidbtionHbndlfr<T> hbndlfr)
            throws IOExdfption {
        if (bufffr == null)
            throw nfw IllfgblArgumfntExdfption("bufffr dbnnot bf null");

        if (bufffr.isRfbdOnly())
            throw nfw IllfgblArgumfntExdfption("Rfbd-only bufffr");

        if (rfdfivfInvokfd.gft())
            throw nfw IllfgblRfdfivfExdfption(
                    "dbnnot invokf rfdfivf from hbndlfr");
        rfdfivfInvokfd.sft(Boolfbn.TRUE);

        try {
            RfsultContbinfr rfsultContbinfr = nfw RfsultContbinfr();
            do {
                rfsultContbinfr.dlfbr();
                syndhronizfd (rfdfivfLodk) {
                    fnsurfOpfn();
                    if (!isBound())
                        throw nfw NotYftBoundExdfption();

                    int n = 0;
                    try {
                        bfgin();

                        syndhronizfd (stbtfLodk) {
                            if(!isOpfn())
                                rfturn null;
                            rfdfivfrThrfbd = NbtivfThrfbd.durrfnt();
                        }

                        do {
                            n = rfdfivf(fdVbl, bufffr, rfsultContbinfr);
                        } whilf ((n == IOStbtus.INTERRUPTED) && isOpfn());

                    } finblly {
                        rfdfivfrClfbnup();
                        fnd((n > 0) || (n == IOStbtus.UNAVAILABLE));
                        bssfrt IOStbtus.dhfdk(n);
                    }

                    if (!rfsultContbinfr.isNotifidbtion()) {
                        /* mfssbgf or nothing */
                        if (rfsultContbinfr.hbsSomfthing()) {
                            /* Sft thf bssodibtion bfforf rfturning */
                            MfssbgfInfoImpl info =
                                    rfsultContbinfr.gftMfssbgfInfo();
                            info.sftAssodibtion(lookupAssodibtion(info.
                                    bssodibtionID()));
                            SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
                            if (sm != null) {
                                InftSodkftAddrfss isb  = (InftSodkftAddrfss)info.bddrfss();
                                if (!bddrfssMbp.dontbinsKfy(isb)) {
                                    /* must bf b nfw bssodibtion */
                                    try {
                                        sm.dhfdkAddfpt(isb.gftAddrfss().gftHostAddrfss(),
                                                       isb.gftPort());
                                    } dbtdh (SfdurityExdfption sf) {
                                        bufffr.dlfbr();
                                        throw sf;
                                    }
                                }
                            }

                            bssfrt info.bssodibtion() != null;
                            rfturn info;
                        } flsf  {
                          /* Non-blodking mby rfturn null if nothing bvbilbblf*/
                            rfturn null;
                        }
                    } flsf { /* notifidbtion */
                        syndhronizfd (stbtfLodk) {
                            hbndlfNotifidbtionIntfrnbl(
                                    rfsultContbinfr);
                        }
                    }
                } /* rfdfivfLodk */
            } whilf (hbndlfr == null ? truf :
                (invokfNotifidbtionHbndlfr(rfsultContbinfr, hbndlfr, bttbdhmfnt)
                 == HbndlfrRfsult.CONTINUE));
        } finblly {
            rfdfivfInvokfd.sft(Boolfbn.FALSE);
        }

        rfturn null;
    }

    privbtf int rfdfivf(int fd,
                        BytfBufffr dst,
                        RfsultContbinfr rfsultContbinfr)
            throws IOExdfption {
        int pos = dst.position();
        int lim = dst.limit();
        bssfrt (pos <= lim);
        int rfm = (pos <= lim ? lim - pos : 0);
        if (dst instbndfof DirfdtBufffr && rfm > 0)
            rfturn rfdfivfIntoNbtivfBufffr(fd, rfsultContbinfr, dst, rfm, pos);

        /* Substitutf b nbtivf bufffr. */
        int nfwSizf = Mbth.mbx(rfm, 1);
        BytfBufffr bb = Util.gftTfmporbryDirfdtBufffr(nfwSizf);
        try {
            int n = rfdfivfIntoNbtivfBufffr(fd, rfsultContbinfr, bb, nfwSizf, 0);
            bb.flip();
            if (n > 0 && rfm > 0)
                dst.put(bb);
            rfturn n;
        } finblly {
            Util.rflfbsfTfmporbryDirfdtBufffr(bb);
        }
    }

    privbtf int rfdfivfIntoNbtivfBufffr(int fd,
                                        RfsultContbinfr rfsultContbinfr,
                                        BytfBufffr bb,
                                        int rfm,
                                        int pos)
            throws IOExdfption {
        int n = rfdfivf0(fd, rfsultContbinfr, ((DirfdtBufffr)bb).bddrfss() + pos, rfm);
        if (n > 0)
            bb.position(pos + n);
        rfturn n;
    }

    privbtf IntfrnblNotifidbtionHbndlfr intfrnblNotifidbtionHbndlfr =
            nfw IntfrnblNotifidbtionHbndlfr();

    privbtf void hbndlfNotifidbtionIntfrnbl(RfsultContbinfr rfsultContbinfr)
    {
        invokfNotifidbtionHbndlfr(rfsultContbinfr,
                intfrnblNotifidbtionHbndlfr, null);
    }

    privbtf dlbss IntfrnblNotifidbtionHbndlfr
            fxtfnds AbstrbdtNotifidbtionHbndlfr<Objfdt>
    {
        @Ovfrridf
        publid HbndlfrRfsult hbndlfNotifidbtion(
                AssodibtionChbngfNotifidbtion not, Objfdt unusfd) {
            AssodibtionChbngf sbd = (AssodibtionChbngf) not;

            /* Updbtf mbp to rfflfdt dhbngf in bssodibtion */
            switdh (not.fvfnt()) {
                dbsf COMM_UP :
                    Assodibtion nfwAssodibtion = nfw AssodibtionImpl
                       (sbd.bssodId(), sbd.mbxInStrfbms(), sbd.mbxOutStrfbms());
                    bddAssodibtion(nfwAssodibtion);
                    brfbk;
                dbsf SHUTDOWN :
                dbsf COMM_LOST :
                //dbsf RESTART: ???
                    /* mbrk bssodibtion for rfmovbl bftfr usfr hbndlfr invokfd*/
                    bssodibtionToRfmovf.sft(lookupAssodibtion(sbd.bssodId()));
            }
            rfturn HbndlfrRfsult.CONTINUE;
        }
    }

    privbtf <T> HbndlfrRfsult invokfNotifidbtionHbndlfr(
                                   RfsultContbinfr rfsultContbinfr,
                                   NotifidbtionHbndlfr<T> hbndlfr,
                                   T bttbdhmfnt) {
        HbndlfrRfsult rfsult;
        SdtpNotifidbtion notifidbtion = rfsultContbinfr.notifidbtion();
        notifidbtion.sftAssodibtion(lookupAssodibtion(notifidbtion.bssodId()));

        if (!(hbndlfr instbndfof AbstrbdtNotifidbtionHbndlfr)) {
            rfsult = hbndlfr.hbndlfNotifidbtion(notifidbtion, bttbdhmfnt);
        } flsf { /* AbstrbdtNotifidbtionHbndlfr */
            AbstrbdtNotifidbtionHbndlfr<T> bbsHbndlfr =
                    (AbstrbdtNotifidbtionHbndlfr<T>)hbndlfr;
            switdh(rfsultContbinfr.typf()) {
                dbsf ASSOCIATION_CHANGED :
                    rfsult = bbsHbndlfr.hbndlfNotifidbtion(
                            rfsultContbinfr.gftAssodibtionChbngfd(), bttbdhmfnt);
                    brfbk;
                dbsf PEER_ADDRESS_CHANGED :
                    rfsult = bbsHbndlfr.hbndlfNotifidbtion(
                            rfsultContbinfr.gftPffrAddrfssChbngfd(), bttbdhmfnt);
                    brfbk;
                dbsf SEND_FAILED :
                    rfsult = bbsHbndlfr.hbndlfNotifidbtion(
                            rfsultContbinfr.gftSfndFbilfd(), bttbdhmfnt);
                    brfbk;
                dbsf SHUTDOWN :
                    rfsult =  bbsHbndlfr.hbndlfNotifidbtion(
                            rfsultContbinfr.gftShutdown(), bttbdhmfnt);
                    brfbk;
                dffbult :
                    /* implfmfntbtion spfdifid hbndlfrs */
                    rfsult =  bbsHbndlfr.hbndlfNotifidbtion(
                            rfsultContbinfr.notifidbtion(), bttbdhmfnt);
            }
        }

        if (!(hbndlfr instbndfof IntfrnblNotifidbtionHbndlfr)) {
            /* Only rfmovf bssodibtions bftfr usfr hbndlfr
             * hbs finishfd with thfm */
            Assodibtion bssod = bssodibtionToRfmovf.gft();
            if (bssod != null) {
                rfmovfAssodibtion(bssod);
                bssodibtionToRfmovf.sft(null);
            }

        }

        rfturn rfsult;
    }

    privbtf Assodibtion lookupAssodibtion(int bssodId) {
        /* Lookup thf bssodibtion in our intfrnbl mbp */
        syndhronizfd (stbtfLodk) {
            Sft<Assodibtion> bssods = bssodibtionMbp.kfySft();
            for (Assodibtion b : bssods) {
                if (b.bssodibtionID() == bssodId) {
                    rfturn b;
                }
            }
        }
        rfturn null;
    }

    privbtf void bddAssodibtion(Assodibtion bssodibtion) {
        syndhronizfd (stbtfLodk) {
            int bssodId = bssodibtion.bssodibtionID();
            Sft<SodkftAddrfss> bddrfssfs = null;

            try {
                bddrfssfs = SdtpNft.gftRfmotfAddrfssfs(fdVbl, bssodId);
            } dbtdh (IOExdfption unusfd) {
                /* OK, dftfrmining donnfdtfd bddrfssfs mby not bf possiblf
                 * shutdown, donnfdtion lost, ftd */
            }

            bssodibtionMbp.put(bssodibtion, bddrfssfs);
            if (bddrfssfs != null) {
                for (SodkftAddrfss bddr : bddrfssfs)
                    bddrfssMbp.put(bddr, bssodibtion);
            }
        }
    }

    privbtf void rfmovfAssodibtion(Assodibtion bssodibtion) {
        syndhronizfd (stbtfLodk) {
            int bssodId = bssodibtion.bssodibtionID();
            Sft<SodkftAddrfss> bddrfssfs = null;

             try {
                bddrfssfs = SdtpNft.gftRfmotfAddrfssfs(fdVbl, bssodId);
            } dbtdh (IOExdfption unusfd) {
                /* OK, dftfrmining donnfdtfd bddrfssfs mby not bf possiblf
                 * shutdown, donnfdtion lost, ftd */
            }

            Sft<Assodibtion> bssods = bssodibtionMbp.kfySft();
            for (Assodibtion b : bssods) {
                if (b.bssodibtionID() == bssodId) {
                    bssodibtionMbp.rfmovf(b);
                    brfbk;
                }
            }
            if (bddrfssfs != null) {
                for (SodkftAddrfss bddr : bddrfssfs)
                    bddrfssMbp.rfmovf(bddr);
            } flsf {
                /* Wf dbnnot dftfrminf thf donnfdtfd bddrfssfs */
                Sft<jbvb.util.Mbp.Entry<SodkftAddrfss, Assodibtion>> bddrAssods =
                        bddrfssMbp.fntrySft();
                Itfrbtor<Entry<SodkftAddrfss, Assodibtion>> itfrbtor = bddrAssods.itfrbtor();
                whilf (itfrbtor.hbsNfxt()) {
                    Entry<SodkftAddrfss, Assodibtion> fntry = itfrbtor.nfxt();
                    if (fntry.gftVbluf().fqubls(bssodibtion)) {
                        itfrbtor.rfmovf();
                    }
                }
            }
        }
    }

    /**
     * @throws  IllfgblArgumfntExdfption
     *          If thf givfn bssodibtion is not dontrollfd by this dhbnnfl
     *
     * @rfturn  {@dodf truf} if, bnd only if, thf givfn bssodibtion is onf
     *          of thf durrfnt bssodibtions dontrollfd by this dhbnnfl
     */
    privbtf boolfbn dhfdkAssodibtion(Assodibtion mfssbgfAssod) {
        syndhronizfd (stbtfLodk) {
            for (Assodibtion bssodibtion : bssodibtionMbp.kfySft()) {
                if (mfssbgfAssod.fqubls(bssodibtion)) {
                    rfturn truf;
                }
            }
        }
        throw nfw IllfgblArgumfntExdfption(
              "Givfn Assodibtion is not dontrollfd by this dhbnnfl");
    }

    privbtf void dhfdkStrfbmNumbfr(Assodibtion bssod, int strfbmNumbfr) {
        syndhronizfd (stbtfLodk) {
            if (strfbmNumbfr < 0 || strfbmNumbfr >= bssod.mbxOutboundStrfbms())
                throw nfw InvblidStrfbmExdfption();
        }
    }

    /* TODO: Add support for ttl bnd isComplftf to both 121 12M
     *       SCTP_EOR not yft supportfd on rfffrfndf plbtforms
     *       TTL support limitfd...
     */
    @Ovfrridf
    publid int sfnd(BytfBufffr bufffr, MfssbgfInfo mfssbgfInfo)
            throws IOExdfption {
        if (bufffr == null)
            throw nfw IllfgblArgumfntExdfption("bufffr dbnnot bf null");

        if (mfssbgfInfo == null)
            throw nfw IllfgblArgumfntExdfption("mfssbgfInfo dbnnot bf null");

        syndhronizfd (sfndLodk) {
            fnsurfOpfn();

            if (!isBound())
                bind(null, 0);

            int n = 0;
            try {
                int bssodId = -1;
                SodkftAddrfss bddrfss = null;
                bfgin();

                syndhronizfd (stbtfLodk) {
                    if(!isOpfn())
                        rfturn 0;
                    sfndfrThrfbd = NbtivfThrfbd.durrfnt();

                    /* Dftfrminf whbt bddrfss or bssodibtion to sfnd to */
                    Assodibtion bssod = mfssbgfInfo.bssodibtion();
                    InftSodkftAddrfss bddr = (InftSodkftAddrfss)mfssbgfInfo.bddrfss();
                    if (bssod != null) {
                        dhfdkAssodibtion(bssod);
                        dhfdkStrfbmNumbfr(bssod, mfssbgfInfo.strfbmNumbfr());
                        bssodId = bssod.bssodibtionID();
                        /* hbvf wf blso got b prfffrrfd bddrfss */
                        if (bddr != null) {
                            if (!bssod.fqubls(bddrfssMbp.gft(bddr)))
                                throw nfw IllfgblArgumfntExdfption("givfn prfffrrfd bddrfss is not pbrt of this bssodibtion");
                            bddrfss = bddr;
                        }
                    } flsf if (bddr != null) {
                        bddrfss = bddr;
                        Assodibtion bssodibtion = bddrfssMbp.gft(bddr);
                        if (bssodibtion != null) {
                            dhfdkStrfbmNumbfr(bssodibtion, mfssbgfInfo.strfbmNumbfr());
                            bssodId = bssodibtion.bssodibtionID();

                        } flsf { /* must bf nfw bssodibtion */
                            SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
                            if (sm != null)
                                sm.dhfdkConnfdt(bddr.gftAddrfss().gftHostAddrfss(),
                                                bddr.gftPort());
                        }
                    } flsf {
                        throw nfw AssfrtionError(
                            "Both bssodibtion bnd bddrfss dbnnot bf null");
                    }
                }

                do {
                    n = sfnd(fdVbl, bufffr, bssodId, bddrfss, mfssbgfInfo);
                } whilf ((n == IOStbtus.INTERRUPTED) && isOpfn());

                rfturn IOStbtus.normblizf(n);
            } finblly {
                sfndfrClfbnup();
                fnd((n > 0) || (n == IOStbtus.UNAVAILABLE));
                bssfrt IOStbtus.dhfdk(n);
            }
        }
    }

    privbtf int sfnd(int fd,
                     BytfBufffr srd,
                     int bssodId,
                     SodkftAddrfss tbrgft,
                     MfssbgfInfo mfssbgfInfo)
            throws IOExdfption {
        int strfbmNumbfr = mfssbgfInfo.strfbmNumbfr();
        boolfbn unordfrfd = mfssbgfInfo.isUnordfrfd();
        int ppid = mfssbgfInfo.pbylobdProtodolID();

        if (srd instbndfof DirfdtBufffr)
            rfturn sfndFromNbtivfBufffr(fd, srd, tbrgft, bssodId,
                    strfbmNumbfr, unordfrfd, ppid);

        /* Substitutf b nbtivf bufffr */
        int pos = srd.position();
        int lim = srd.limit();
        bssfrt (pos <= lim && strfbmNumbfr >= 0);

        int rfm = (pos <= lim ? lim - pos : 0);
        BytfBufffr bb = Util.gftTfmporbryDirfdtBufffr(rfm);
        try {
            bb.put(srd);
            bb.flip();
            /* Do not updbtf srd until wf sff how mbny bytfs wfrf writtfn */
            srd.position(pos);

            int n = sfndFromNbtivfBufffr(fd, bb, tbrgft, bssodId,
                    strfbmNumbfr, unordfrfd, ppid);
            if (n > 0) {
                /* now updbtf srd */
                srd.position(pos + n);
            }
            rfturn n;
        } finblly {
            Util.rflfbsfTfmporbryDirfdtBufffr(bb);
        }
    }

    privbtf int sfndFromNbtivfBufffr(int fd,
                                     BytfBufffr bb,
                                     SodkftAddrfss tbrgft,
                                     int bssodId,
                                     int strfbmNumbfr,
                                     boolfbn unordfrfd,
                                     int ppid)
            throws IOExdfption {
        InftAddrfss bddr = null;     // no prfffrrfd bddrfss
        int port = 0;
        if (tbrgft != null) {
            InftSodkftAddrfss isb = Nft.dhfdkAddrfss(tbrgft);
            bddr = isb.gftAddrfss();
            port = isb.gftPort();
        }
        int pos = bb.position();
        int lim = bb.limit();
        bssfrt (pos <= lim);
        int rfm = (pos <= lim ? lim - pos : 0);

        int writtfn = sfnd0(fd, ((DirfdtBufffr)bb).bddrfss() + pos, rfm, bddr,
                            port, bssodId, strfbmNumbfr, unordfrfd, ppid);
        if (writtfn > 0)
            bb.position(pos + writtfn);
        rfturn writtfn;
    }

    @Ovfrridf
    publid SdtpMultiChbnnfl shutdown(Assodibtion bssodibtion)
            throws IOExdfption {
        syndhronizfd (stbtfLodk) {
            dhfdkAssodibtion(bssodibtion);
            if (!isOpfn())
                throw nfw ClosfdChbnnflExdfption();

            SdtpNft.shutdown(fdVbl, bssodibtion.bssodibtionID());
        }
        rfturn this;
    }

    @Ovfrridf
    publid Sft<SodkftAddrfss> gftAllLodblAddrfssfs()
            throws IOExdfption {
        syndhronizfd (stbtfLodk) {
            if (!isOpfn())
                throw nfw ClosfdChbnnflExdfption();
            if (!isBound())
                rfturn Collfdtions.fmptySft();

            rfturn SdtpNft.gftLodblAddrfssfs(fdVbl);
        }
    }

    @Ovfrridf
    publid Sft<SodkftAddrfss> gftRfmotfAddrfssfs(Assodibtion bssodibtion)
            throws IOExdfption {
        syndhronizfd (stbtfLodk) {
            dhfdkAssodibtion(bssodibtion);
            if (!isOpfn())
                throw nfw ClosfdChbnnflExdfption();

            try {
                rfturn SdtpNft.gftRfmotfAddrfssfs(fdVbl, bssodibtion.bssodibtionID());
            } dbtdh (SodkftExdfption sf) {
                /* b vblid bssodibtion should blwbys hbvf rfmotf bddrfssfs */
                Sft<SodkftAddrfss> bddrs = bssodibtionMbp.gft(bssodibtion);
                rfturn bddrs != null ? bddrs : Collfdtions.<SodkftAddrfss>fmptySft();
            }
        }
    }

    @Ovfrridf
    publid SdtpChbnnfl brbndh(Assodibtion bssodibtion)
            throws IOExdfption {
        syndhronizfd (stbtfLodk) {
            dhfdkAssodibtion(bssodibtion);
            if (!isOpfn())
                throw nfw ClosfdChbnnflExdfption();

            FilfDfsdriptor bFd = SdtpNft.brbndh(fdVbl,
                                                bssodibtion.bssodibtionID());
            /* suddfssfully brbndhfd, wf dbn now rfmovf it from bssod list */
            rfmovfAssodibtion(bssodibtion);

            rfturn nfw SdtpChbnnflImpl(providfr(), bFd, bssodibtion);
        }
    }

    /* Usf dommon nbtivf implfmfntbtion shbrfd bftwffn
     * onf-to-onf bnd onf-to-mbny */
    privbtf stbtid int rfdfivf0(int fd,
                                RfsultContbinfr rfsultContbinfr,
                                long bddrfss,
                                int lfngth)
            throws IOExdfption{
        rfturn SdtpChbnnflImpl.rfdfivf0(fd, rfsultContbinfr, bddrfss,
                lfngth, fblsf /*pffk */);
    }

    privbtf stbtid int sfnd0(int fd,
                             long bddrfss,
                             int lfngth,
                             InftAddrfss bddr,
                             int port,
                             int bssodId,
                             int strfbmNumbfr,
                             boolfbn unordfrfd,
                             int ppid)
            throws IOExdfption {
        rfturn SdtpChbnnflImpl.sfnd0(fd, bddrfss, lfngth, bddr, port, bssodId,
                strfbmNumbfr, unordfrfd, ppid);
    }

    stbtid {
        IOUtil.lobd();   /* lobds nio & nft nbtivf librbrifs */
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw jbvb.sfdurity.PrivilfgfdAdtion<Void>() {
                publid Void run() {
                    Systfm.lobdLibrbry("sdtp");
                    rfturn null;
                }
            });
    }
}
