/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
pbdkbgf dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.utils;

import jbvb.io.BytfArrbyOutputStrfbm;

import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.blgorithms.MfssbgfDigfstAlgorithm;

/**
 * @buthor rbul
 *
 */
publid dlbss DigfstfrOutputStrfbm fxtfnds BytfArrbyOutputStrfbm {
    privbtf stbtid finbl jbvb.util.logging.Loggfr log =
        jbvb.util.logging.Loggfr.gftLoggfr(DigfstfrOutputStrfbm.dlbss.gftNbmf());

    finbl MfssbgfDigfstAlgorithm mdb;

    /**
     * @pbrbm mdb
     */
    publid DigfstfrOutputStrfbm(MfssbgfDigfstAlgorithm mdb) {
        this.mdb = mdb;
    }

    /** @inhfritDod */
    publid void writf(bytf[] brg0) {
        writf(brg0, 0, brg0.lfngth);
    }

    /** @inhfritDod */
    publid void writf(int brg0) {
        mdb.updbtf((bytf)brg0);
    }

    /** @inhfritDod */
    publid void writf(bytf[] brg0, int brg1, int brg2) {
        if (log.isLoggbblf(jbvb.util.logging.Lfvfl.FINE)) {
            log.log(jbvb.util.logging.Lfvfl.FINE, "Prf-digfstfd input:");
            StringBuildfr sb = nfw StringBuildfr(brg2);
            for (int i = brg1; i < (brg1 + brg2); i++) {
                sb.bppfnd((dhbr)brg0[i]);
            }
            log.log(jbvb.util.logging.Lfvfl.FINE, sb.toString());
        }
        mdb.updbtf(brg0, brg1, brg2);
    }

    /**
     * @rfturn thf digfst vbluf
     */
    publid bytf[] gftDigfstVbluf() {
        rfturn mdb.digfst();
    }
}
