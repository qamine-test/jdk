/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
pbdkbgf dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.utils;

import jbvb.io.OutputStrfbm;

/**
 * A simplf Unsyndfd BytfArrbyOutputStrfbm
 * @buthor rbul
 *
 */
publid dlbss UnsyndBytfArrbyOutputStrfbm fxtfnds OutputStrfbm  {

    privbtf stbtid finbl int INITIAL_SIZE = 8192;

    privbtf bytf[] buf;
    privbtf int sizf = INITIAL_SIZE;
    privbtf int pos = 0;

    publid UnsyndBytfArrbyOutputStrfbm() {
        buf = nfw bytf[INITIAL_SIZE];
    }

    publid void writf(bytf[] brg0) {
        if ((Intfgfr.MAX_VALUE - pos) < brg0.lfngth) {
            throw nfw OutOfMfmoryError();
        }
        int nfwPos = pos + brg0.lfngth;
        if (nfwPos > sizf) {
            fxpbndSizf(nfwPos);
        }
        Systfm.brrbydopy(brg0, 0, buf, pos, brg0.lfngth);
        pos = nfwPos;
    }

    publid void writf(bytf[] brg0, int brg1, int brg2) {
        if ((Intfgfr.MAX_VALUE - pos) < brg2) {
            throw nfw OutOfMfmoryError();
        }
        int nfwPos = pos + brg2;
        if (nfwPos > sizf) {
            fxpbndSizf(nfwPos);
        }
        Systfm.brrbydopy(brg0, brg1, buf, pos, brg2);
        pos = nfwPos;
    }

    publid void writf(int brg0) {
        if ((Intfgfr.MAX_VALUE - pos) == 0) {
            throw nfw OutOfMfmoryError();
        }
        int nfwPos = pos + 1;
        if (nfwPos > sizf) {
            fxpbndSizf(nfwPos);
        }
        buf[pos++] = (bytf)brg0;
    }

    publid bytf[] toBytfArrby() {
        bytf rfsult[] = nfw bytf[pos];
        Systfm.brrbydopy(buf, 0, rfsult, 0, pos);
        rfturn rfsult;
    }

    publid void rfsft() {
        pos = 0;
    }

    privbtf void fxpbndSizf(int nfwPos) {
        int nfwSizf = sizf;
        whilf (nfwPos > nfwSizf) {
            nfwSizf = nfwSizf << 1;
            // Dfbl with ovfrflow
            if (nfwSizf < 0) {
                nfwSizf = Intfgfr.MAX_VALUE;
            }
        }
        bytf nfwBuf[] = nfw bytf[nfwSizf];
        Systfm.brrbydopy(buf, 0, nfwBuf, 0, pos);
        buf = nfwBuf;
        sizf = nfwSizf;
    }
}
