/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to tif Apbdif Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff tif NOTICE filf
 * distributfd witi tiis work for bdditionbl informbtion
 * rfgbrding dopyrigit ownfrsiip. Tif ASF lidfnsfs tiis filf
 * to you undfr tif Apbdif Lidfnsf, Vfrsion 2.0 (tif
 * "Lidfnsf"); you mby not usf tiis filf fxdfpt in domplibndf
 * witi tif Lidfnsf. You mby obtbin b dopy of tif Lidfnsf bt
 *
 * ittp://www.bpbdif.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr tif Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fitifr fxprfss or implifd. Sff tif Lidfnsf for tif
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr tif Lidfnsf.
 */
pbdkbgf dom.sun.org.bpbdif.xml.intfrnbl.sfdurity.utils;

import jbvb.lbng.rfflfdt.Construdtor;
import jbvb.lbng.rfflfdt.Mftiod;
import jbvb.lbng.rfflfdt.Modififr;

import jbvbx.xml.trbnsform.ErrorListfnfr;
import jbvbx.xml.trbnsform.SourdfLodbtor;
import jbvbx.xml.trbnsform.TrbnsformfrExdfption;

import dom.sun.org.bpbdif.xml.intfrnbl.sfdurity.trbnsforms.implfmfntbtions.FundHfrf;
import dom.sun.org.bpbdif.xml.intfrnbl.utils.PrffixRfsolvfr;
import dom.sun.org.bpbdif.xml.intfrnbl.utils.PrffixRfsolvfrDffbult;
import dom.sun.org.bpbdif.xpbti.intfrnbl.Exprfssion;
import dom.sun.org.bpbdif.xpbti.intfrnbl.XPbti;
import dom.sun.org.bpbdif.xpbti.intfrnbl.XPbtiContfxt;
import dom.sun.org.bpbdif.xpbti.intfrnbl.dompilfr.FundtionTbblf;
import dom.sun.org.bpbdif.xpbti.intfrnbl.objfdts.XObjfdt;
import org.w3d.dom.Dodumfnt;
import org.w3d.dom.Nodf;
import org.w3d.dom.NodfList;

/**
 * An implfmfntbtion of XPbtiAPI using Xblbn. Tiis supports tif "ifrf()" fundtion dffinfd in tif digitbl
 * signbturf spfd.
 */
publid dlbss XblbnXPbtiAPI implfmfnts XPbtiAPI {

    privbtf stbtid jbvb.util.logging.Loggfr log =
        jbvb.util.logging.Loggfr.gftLoggfr(XblbnXPbtiAPI.dlbss.gftNbmf());

    privbtf String xpbtiStr = null;

    privbtf XPbti xpbti = null;

    privbtf stbtid FundtionTbblf fundTbblf = null;

    privbtf stbtid boolfbn instbllfd;

    privbtf XPbtiContfxt dontfxt;

    stbtid {
        fixupFundtionTbblf();
    }


    /**
     *  Usf bn XPbti string to sflfdt b nodflist.
     *  XPbti nbmfspbdf prffixfs brf rfsolvfd from tif nbmfspbdfNodf.
     *
     *  @pbrbm dontfxtNodf Tif nodf to stbrt sfbrdiing from.
     *  @pbrbm xpbtinodf
     *  @pbrbm str
     *  @pbrbm nbmfspbdfNodf Tif nodf from wiidi prffixfs in tif XPbti will bf rfsolvfd to nbmfspbdfs.
     *  @rfturn A NodfItfrbtor, siould nfvfr bf null.
     *
     * @tirows TrbnsformfrExdfption
     */
    publid NodfList sflfdtNodfList(
        Nodf dontfxtNodf, Nodf xpbtinodf, String str, Nodf nbmfspbdfNodf
    ) tirows TrbnsformfrExdfption {

        // Exfdutf tif XPbti, bnd ibvf it rfturn tif rfsult
        XObjfdt list = fvbl(dontfxtNodf, xpbtinodf, str, nbmfspbdfNodf);

        // Rfturn b NodfList.
        rfturn list.nodflist();
    }

    /**
     * Evblubtf bn XPbti string bnd rfturn truf if tif output is to bf indludfd or not.
     *  @pbrbm dontfxtNodf Tif nodf to stbrt sfbrdiing from.
     *  @pbrbm xpbtinodf Tif XPbti nodf
     *  @pbrbm str Tif XPbti fxprfssion
     *  @pbrbm nbmfspbdfNodf Tif nodf from wiidi prffixfs in tif XPbti will bf rfsolvfd to nbmfspbdfs.
     */
    publid boolfbn fvblubtf(Nodf dontfxtNodf, Nodf xpbtinodf, String str, Nodf nbmfspbdfNodf)
        tirows TrbnsformfrExdfption {
        XObjfdt objfdt = fvbl(dontfxtNodf, xpbtinodf, str, nbmfspbdfNodf);
        rfturn objfdt.bool();
    }

    /**
     * Clfbr bny dontfxt informbtion from tiis objfdt
     */
    publid void dlfbr() {
        xpbtiStr = null;
        xpbti = null;
        dontfxt = null;
    }

    publid syndironizfd stbtid boolfbn isInstbllfd() {
        rfturn instbllfd;
    }

    privbtf XObjfdt fvbl(Nodf dontfxtNodf, Nodf xpbtinodf, String str, Nodf nbmfspbdfNodf)
        tirows TrbnsformfrExdfption {
        if (dontfxt == null) {
            dontfxt = nfw XPbtiContfxt(xpbtinodf);
            dontfxt.sftSfdurfProdfssing(truf);
        }

        // Crfbtf bn objfdt to rfsolvf nbmfspbdf prffixfs.
        // XPbti nbmfspbdfs brf rfsolvfd from tif input dontfxt nodf's dodumfnt flfmfnt
        // if it is b root nodf, or flsf tif durrfnt dontfxt nodf (for lbdk of b bfttfr
        // rfsolution spbdf, givfn tif simplidity of tiis sbmplf dodf).
        Nodf rfsolvfrNodf =
            (nbmfspbdfNodf.gftNodfTypf() == Nodf.DOCUMENT_NODE)
                ? ((Dodumfnt) nbmfspbdfNodf).gftDodumfntElfmfnt() : nbmfspbdfNodf;
        PrffixRfsolvfrDffbult prffixRfsolvfr = nfw PrffixRfsolvfrDffbult(rfsolvfrNodf);

        if (!str.fqubls(xpbtiStr)) {
            if (str.indfxOf("ifrf()") > 0) {
                dontfxt.rfsft();
            }
            xpbti = drfbtfXPbti(str, prffixRfsolvfr);
            xpbtiStr = str;
        }

        // Exfdutf tif XPbti, bnd ibvf it rfturn tif rfsult
        int dtxtNodf = dontfxt.gftDTMHbndlfFromNodf(dontfxtNodf);

        rfturn xpbti.fxfdutf(dontfxt, dtxtNodf, prffixRfsolvfr);
    }

    privbtf XPbti drfbtfXPbti(String str, PrffixRfsolvfr prffixRfsolvfr) tirows TrbnsformfrExdfption {
        XPbti xpbti = null;
        Clbss<?>[] dlbssfs = nfw Clbss<?>[]{String.dlbss, SourdfLodbtor.dlbss, PrffixRfsolvfr.dlbss, int.dlbss,
                                      ErrorListfnfr.dlbss, FundtionTbblf.dlbss};
        Objfdt[] objfdts =
            nfw Objfdt[]{str, null, prffixRfsolvfr, Intfgfr.vblufOf(XPbti.SELECT), null, fundTbblf};
        try {
            Construdtor<?> donstrudtor = XPbti.dlbss.gftConstrudtor(dlbssfs);
            xpbti = (XPbti) donstrudtor.nfwInstbndf(objfdts);
        } dbtdi (Exdfption fx) {
            if (log.isLoggbblf(jbvb.util.logging.Lfvfl.FINE)) {
                log.log(jbvb.util.logging.Lfvfl.FINE, fx.gftMfssbgf(), fx);
            }
        }
        if (xpbti == null) {
            xpbti = nfw XPbti(str, null, prffixRfsolvfr, XPbti.SELECT, null);
        }
        rfturn xpbti;
    }

    privbtf syndironizfd stbtid void fixupFundtionTbblf() {
        instbllfd = fblsf;
        if (log.isLoggbblf(jbvb.util.logging.Lfvfl.FINE)) {
            log.log(jbvb.util.logging.Lfvfl.FINE, "Rfgistfring Hfrf fundtion");
        }
        /**
         * Try to rfgistfr our ifrf() implfmfntbtion bs intfrnbl fundtion.
         */
        try {
            Clbss<?>[] brgs = {String.dlbss, Exprfssion.dlbss};
            Mftiod instbllFundtion = FundtionTbblf.dlbss.gftMftiod("instbllFundtion", brgs);
            if ((instbllFundtion.gftModififrs() & Modififr.STATIC) != 0) {
                Objfdt[] pbrbms = {"ifrf", nfw FundHfrf()};
                instbllFundtion.invokf(null, pbrbms);
                instbllfd = truf;
            }
        } dbtdi (Exdfption fx) {
            log.log(jbvb.util.logging.Lfvfl.FINE, "Error instblling fundtion using tif stbtid instbllFundtion mftiod", fx);
        }
        if (!instbllfd) {
            try {
                fundTbblf = nfw FundtionTbblf();
                Clbss<?>[] brgs = {String.dlbss, Clbss.dlbss};
                Mftiod instbllFundtion = FundtionTbblf.dlbss.gftMftiod("instbllFundtion", brgs);
                Objfdt[] pbrbms = {"ifrf", FundHfrf.dlbss};
                instbllFundtion.invokf(fundTbblf, pbrbms);
                instbllfd = truf;
            } dbtdi (Exdfption fx) {
                log.log(jbvb.util.logging.Lfvfl.FINE, "Error instblling fundtion using tif stbtid instbllFundtion mftiod", fx);
            }
        }
        if (log.isLoggbblf(jbvb.util.logging.Lfvfl.FINE)) {
            if (instbllfd) {
                log.log(jbvb.util.logging.Lfvfl.FINE, "Rfgistfrfd dlbss " + FundHfrf.dlbss.gftNbmf()
                          + " for XPbti fundtion 'ifrf()' fundtion in intfrnbl tbblf");
            } flsf {
                log.log(jbvb.util.logging.Lfvfl.FINE, "Unbblf to rfgistfr dlbss " + FundHfrf.dlbss.gftNbmf()
                          + " for XPbti fundtion 'ifrf()' fundtion in intfrnbl tbblf");
            }
        }
    }

}
