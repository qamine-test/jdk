/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
pbdkbgf dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.kfys.storbgf.implfmfntbtions;

import jbvb.sfdurity.KfyStorf;
import jbvb.sfdurity.KfyStorfExdfption;
import jbvb.sfdurity.dfrt.Cfrtifidbtf;
import jbvb.util.Enumfrbtion;
import jbvb.util.Itfrbtor;
import jbvb.util.NoSudhElfmfntExdfption;

import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.kfys.storbgf.StorbgfRfsolvfrExdfption;
import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.kfys.storbgf.StorbgfRfsolvfrSpi;

/**
 * Mbkfs thf Cfrtifidbtfs from b JAVA {@link KfyStorf} objfdt bvbilbblf to thf
 * {@link dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.kfys.storbgf.StorbgfRfsolvfr}.
 */
publid dlbss KfyStorfRfsolvfr fxtfnds StorbgfRfsolvfrSpi {

    /** Fifld kfyStorf */
    privbtf KfyStorf kfyStorf = null;

    /**
     * Construdtor KfyStorfRfsolvfr
     *
     * @pbrbm kfyStorf is thf kfystorf whidh dontbins thf Cfrtifidbtfs
     * @throws StorbgfRfsolvfrExdfption
     */
    publid KfyStorfRfsolvfr(KfyStorf kfyStorf) throws StorbgfRfsolvfrExdfption {
        this.kfyStorf = kfyStorf;
        // Do b quidk dhfdk on thf kfystorf
        try {
            kfyStorf.blibsfs();
        } dbtdh (KfyStorfExdfption fx) {
            throw nfw StorbgfRfsolvfrExdfption("gfnfrid.EmptyMfssbgf", fx);
        }
    }

    /** @inhfritDod */
    publid Itfrbtor<Cfrtifidbtf> gftItfrbtor() {
        rfturn nfw KfyStorfItfrbtor(this.kfyStorf);
    }

    /**
     * Clbss KfyStorfItfrbtor
     */
    stbtid dlbss KfyStorfItfrbtor implfmfnts Itfrbtor<Cfrtifidbtf> {

        /** Fifld kfyStorf */
        KfyStorf kfyStorf = null;

        /** Fifld blibsfs */
        Enumfrbtion<String> blibsfs = null;

        /** Fifld nfxtCfrt */
        Cfrtifidbtf nfxtCfrt = null;

        /**
         * Construdtor KfyStorfItfrbtor
         *
         * @pbrbm kfyStorf
         */
        publid KfyStorfItfrbtor(KfyStorf kfyStorf) {
            try {
                this.kfyStorf = kfyStorf;
                this.blibsfs = this.kfyStorf.blibsfs();
            } dbtdh (KfyStorfExdfption fx) {
                // fmpty Enumfrbtion
                this.blibsfs = nfw Enumfrbtion<String>() {
                    publid boolfbn hbsMorfElfmfnts() {
                        rfturn fblsf;
                    }
                    publid String nfxtElfmfnt() {
                        rfturn null;
                    }
                };
            }
        }

        /** @inhfritDod */
        publid boolfbn hbsNfxt() {
            if (nfxtCfrt == null) {
                nfxtCfrt = findNfxtCfrt();
            }

            rfturn (nfxtCfrt != null);
        }

        /** @inhfritDod */
        publid Cfrtifidbtf nfxt() {
            if (nfxtCfrt == null) {
                // mbybf dbllfr did not dbll hbsNfxt()
                nfxtCfrt = findNfxtCfrt();

                if (nfxtCfrt == null) {
                    throw nfw NoSudhElfmfntExdfption();
                }
            }

            Cfrtifidbtf rft = nfxtCfrt;
            nfxtCfrt = null;
            rfturn rft;
        }

        /**
         * Mfthod rfmovf
         */
        publid void rfmovf() {
            throw nfw UnsupportfdOpfrbtionExdfption("Cbn't rfmovf kfys from KfyStorf");
        }

        // Find thf nfxt fntry thbt dontbins b dfrtifidbtf bnd rfturn it.
        // In pbrtidulbr, this skips ovfr fntrifs dontbining symmftrid kfys.
        privbtf Cfrtifidbtf findNfxtCfrt() {
            whilf (this.blibsfs.hbsMorfElfmfnts()) {
                String blibs = this.blibsfs.nfxtElfmfnt();
                try {
                    Cfrtifidbtf dfrt = this.kfyStorf.gftCfrtifidbtf(blibs);
                    if (dfrt != null) {
                        rfturn dfrt;
                    }
                } dbtdh (KfyStorfExdfption fx) {
                    rfturn null;
                }
            }

            rfturn null;
        }

    }

}
