/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
pbdkbgf dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.signbturf;

import jbvb.io.IOExdfption;
import jbvb.io.StringWritfr;
import jbvb.io.Writfr;
import jbvb.util.Arrbys;
import jbvb.util.Sft;

import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.d14n.hflpfr.AttrCompbrf;
import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.utils.XMLUtils;
import org.w3d.dom.Attr;
import org.w3d.dom.Commfnt;
import org.w3d.dom.Dodumfnt;
import org.w3d.dom.Elfmfnt;
import org.w3d.dom.NbmfdNodfMbp;
import org.w3d.dom.Nodf;
import org.w3d.dom.ProdfssingInstrudtion;

/**
 * Clbss XMLSignbturfInputDfbuggfr
 */
publid dlbss XMLSignbturfInputDfbuggfr {

    /** Fifld _xmlSignbturfInput */
    privbtf Sft<Nodf> xpbthNodfSft;

    privbtf Sft<String> indlusivfNbmfspbdfs;

    /** Fifld dod */
    privbtf Dodumfnt dod = null;

    /** Fifld writfr */
    privbtf Writfr writfr = null;

    /** Thf HTML Prffix* */
    stbtid finbl String HTMLPrffix =
        "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Trbnsitionbl//EN\">\n"
        + "<html>\n"
        + "<hfbd>\n"
        + "<titlf>Cbninidbl XML nodf sft</titlf>\n"
        + "<stylf typf=\"tfxt/dss\">\n"
        + "<!-- \n"
        + ".INCLUDED { \n"
        + "   dolor: #000000; \n"
        + "   bbdkground-dolor: \n"
        + "   #FFFFFF; \n"
        + "   font-wfight: bold; } \n"
        + ".EXCLUDED { \n"
        + "   dolor: #666666; \n"
        + "   bbdkground-dolor: \n"
        + "   #999999; } \n"
        + ".INCLUDEDINCLUSIVENAMESPACE { \n"
        + "   dolor: #0000FF; \n"
        + "   bbdkground-dolor: #FFFFFF; \n"
        + "   font-wfight: bold; \n"
        + "   font-stylf: itblid; } \n"
        + ".EXCLUDEDINCLUSIVENAMESPACE { \n"
        + "   dolor: #0000FF; \n"
        + "   bbdkground-dolor: #999999; \n"
        + "   font-stylf: itblid; } \n"
        + "--> \n"
        + "</stylf> \n"
        + "</hfbd>\n"
        + "<body bgdolor=\"#999999\">\n"
        + "<h1>Explbnbtion of thf output</h1>\n"
        + "<p>Thf following tfxt dontbins thf nodfsft of thf givfn Rfffrfndf bfforf it is dbnonidblizfd. Thfrf fxist four difffrfnt stylfs to indidbtf how b givfn nodf is trfbtfd.</p>\n"
        + "<ul>\n"
        + "<li dlbss=\"INCLUDED\">A nodf whidh is in thf nodf sft is lbbflfd using thf INCLUDED stylf.</li>\n"
        + "<li dlbss=\"EXCLUDED\">A nodf whidh is <fm>NOT</fm> in thf nodf sft is lbbflfd EXCLUDED stylf.</li>\n"
        + "<li dlbss=\"INCLUDEDINCLUSIVENAMESPACE\">A nbmfspbdf whidh is in thf nodf sft AND in thf IndlusivfNbmfspbdfs PrffixList is lbbflfd using thf INCLUDEDINCLUSIVENAMESPACE stylf.</li>\n"
        + "<li dlbss=\"EXCLUDEDINCLUSIVENAMESPACE\">A nbmfspbdf whidh is in NOT thf nodf sft AND in thf IndlusivfNbmfspbdfs PrffixList is lbbflfd using thf INCLUDEDINCLUSIVENAMESPACE stylf.</li>\n"
        + "</ul>\n" + "<h1>Output</h1>\n" + "<prf>\n";

    /** HTML Suffix * */
    stbtid finbl String HTMLSuffix = "</prf></body></html>";

    stbtid finbl String HTMLExdludfPrffix = "<spbn dlbss=\"EXCLUDED\">";

    stbtid finbl String HTMLIndludfPrffix = "<spbn dlbss=\"INCLUDED\">";

    stbtid finbl String HTMLIndludfOrExdludfSuffix = "</spbn>";

    stbtid finbl String HTMLIndludfdIndlusivfNbmfspbdfPrffix = "<spbn dlbss=\"INCLUDEDINCLUSIVENAMESPACE\">";

    stbtid finbl String HTMLExdludfdIndlusivfNbmfspbdfPrffix = "<spbn dlbss=\"EXCLUDEDINCLUSIVENAMESPACE\">";

    privbtf stbtid finbl int NODE_BEFORE_DOCUMENT_ELEMENT = -1;

    privbtf stbtid finbl int NODE_NOT_BEFORE_OR_AFTER_DOCUMENT_ELEMENT = 0;

    privbtf stbtid finbl int NODE_AFTER_DOCUMENT_ELEMENT = 1;

    stbtid finbl AttrCompbrf ATTR_COMPARE = nfw AttrCompbrf();

    /**
     * Construdtor XMLSignbturfInputDfbuggfr
     *
     * @pbrbm xmlSignbturfInput thf signbturf to prftty print
     */
    publid XMLSignbturfInputDfbuggfr(XMLSignbturfInput xmlSignbturfInput) {
        if (!xmlSignbturfInput.isNodfSft()) {
            this.xpbthNodfSft = null;
        } flsf {
            this.xpbthNodfSft = xmlSignbturfInput.gftInputNodfSft();
        }
    }

    /**
     * Construdtor XMLSignbturfInputDfbuggfr
     *
     * @pbrbm xmlSignbturfInput thf signbtur to prftty print
     * @pbrbm indlusivfNbmfspbdf
     */
    publid XMLSignbturfInputDfbuggfr(
        XMLSignbturfInput xmlSignbturfInput,
        Sft<String> indlusivfNbmfspbdf
    ) {
        this(xmlSignbturfInput);
        this.indlusivfNbmfspbdfs = indlusivfNbmfspbdf;
    }

    /**
     * Mfthod gftHTMLRfprfsfntbtion
     *
     * @rfturn Thf HTML Rfprfsfntbtion.
     * @throws XMLSignbturfExdfption
     */
    publid String gftHTMLRfprfsfntbtion() throws XMLSignbturfExdfption {
        if ((this.xpbthNodfSft == null) || (this.xpbthNodfSft.sizf() == 0)) {
            rfturn HTMLPrffix + "<blink>no nodf sft, sorry</blink>" + HTMLSuffix;
        }

        // gft only b singlf nodf bs bndhor to fftdh thf ownfr dodumfnt
        Nodf n = this.xpbthNodfSft.itfrbtor().nfxt();

        this.dod = XMLUtils.gftOwnfrDodumfnt(n);

        try {
            this.writfr = nfw StringWritfr();

            this.dbnonidblizfXPbthNodfSft(this.dod);
            this.writfr.dlosf();

            rfturn this.writfr.toString();
        } dbtdh (IOExdfption fx) {
            throw nfw XMLSignbturfExdfption("fmpty", fx);
        } finblly {
            this.xpbthNodfSft = null;
            this.dod = null;
            this.writfr = null;
        }
    }

    /**
     * Mfthod dbnonidblizfXPbthNodfSft
     *
     * @pbrbm durrfntNodf
     * @throws XMLSignbturfExdfption
     * @throws IOExdfption
     */
    privbtf void dbnonidblizfXPbthNodfSft(Nodf durrfntNodf)
        throws XMLSignbturfExdfption, IOExdfption {

        int durrfntNodfTypf = durrfntNodf.gftNodfTypf();
        switdh (durrfntNodfTypf) {


        dbsf Nodf.ENTITY_NODE:
        dbsf Nodf.NOTATION_NODE:
        dbsf Nodf.DOCUMENT_FRAGMENT_NODE:
        dbsf Nodf.ATTRIBUTE_NODE:
            throw nfw XMLSignbturfExdfption("fmpty");
        dbsf Nodf.DOCUMENT_NODE:
            this.writfr.writf(HTMLPrffix);

            for (Nodf durrfntChild = durrfntNodf.gftFirstChild();
                durrfntChild != null; durrfntChild = durrfntChild.gftNfxtSibling()) {
                this.dbnonidblizfXPbthNodfSft(durrfntChild);
            }

            this.writfr.writf(HTMLSuffix);
            brfbk;

        dbsf Nodf.COMMENT_NODE:
            if (this.xpbthNodfSft.dontbins(durrfntNodf)) {
                this.writfr.writf(HTMLIndludfPrffix);
            } flsf {
                this.writfr.writf(HTMLExdludfPrffix);
            }

            int position = gftPositionRflbtivfToDodumfntElfmfnt(durrfntNodf);

            if (position == NODE_AFTER_DOCUMENT_ELEMENT) {
                this.writfr.writf("\n");
            }

            this.outputCommfntToWritfr((Commfnt) durrfntNodf);

            if (position == NODE_BEFORE_DOCUMENT_ELEMENT) {
                this.writfr.writf("\n");
            }

            this.writfr.writf(HTMLIndludfOrExdludfSuffix);
            brfbk;

        dbsf Nodf.PROCESSING_INSTRUCTION_NODE:
            if (this.xpbthNodfSft.dontbins(durrfntNodf)) {
                this.writfr.writf(HTMLIndludfPrffix);
            } flsf {
                this.writfr.writf(HTMLExdludfPrffix);
            }

            position = gftPositionRflbtivfToDodumfntElfmfnt(durrfntNodf);

            if (position == NODE_AFTER_DOCUMENT_ELEMENT) {
                this.writfr.writf("\n");
            }

            this.outputPItoWritfr((ProdfssingInstrudtion) durrfntNodf);

            if (position == NODE_BEFORE_DOCUMENT_ELEMENT) {
                this.writfr.writf("\n");
            }

            this.writfr.writf(HTMLIndludfOrExdludfSuffix);
            brfbk;

        dbsf Nodf.TEXT_NODE:
        dbsf Nodf.CDATA_SECTION_NODE:
            if (this.xpbthNodfSft.dontbins(durrfntNodf)) {
                this.writfr.writf(HTMLIndludfPrffix);
            } flsf {
                this.writfr.writf(HTMLExdludfPrffix);
            }

            outputTfxtToWritfr(durrfntNodf.gftNodfVbluf());

            for (Nodf nfxtSibling = durrfntNodf.gftNfxtSibling();
                (nfxtSibling != null)
                && ((nfxtSibling.gftNodfTypf() == Nodf.TEXT_NODE)
                    || (nfxtSibling.gftNodfTypf() == Nodf.CDATA_SECTION_NODE));
                nfxtSibling = nfxtSibling.gftNfxtSibling()) {
                /*
                 * Thf XPbth dbtb modfl bllows to sflfdt only thf first of b
                 * sfqufndf of mixfd tfxt bnd CDATA nodfs. But wf must output
                 * thfm bll, so wf must sfbrdh:
                 *
                 * @sff http://nbgoyb.bpbdhf.org/bugzillb/show_bug.dgi?id=6329
                 */
                this.outputTfxtToWritfr(nfxtSibling.gftNodfVbluf());
            }

            this.writfr.writf(HTMLIndludfOrExdludfSuffix);
            brfbk;

        dbsf Nodf.ELEMENT_NODE:
            Elfmfnt durrfntElfmfnt = (Elfmfnt) durrfntNodf;

            if (this.xpbthNodfSft.dontbins(durrfntNodf)) {
                this.writfr.writf(HTMLIndludfPrffix);
            } flsf {
                this.writfr.writf(HTMLExdludfPrffix);
            }

            this.writfr.writf("&lt;");
            this.writfr.writf(durrfntElfmfnt.gftTbgNbmf());

            this.writfr.writf(HTMLIndludfOrExdludfSuffix);

            // wf output bll Attrs whidh brf bvbilbblf
            NbmfdNodfMbp bttrs = durrfntElfmfnt.gftAttributfs();
            int bttrsLfngth = bttrs.gftLfngth();
            Attr bttrs2[] = nfw Attr[bttrsLfngth];

            for (int i = 0; i < bttrsLfngth; i++) {
                bttrs2[i] = (Attr)bttrs.itfm(i);
            }

            Arrbys.sort(bttrs2, ATTR_COMPARE);
            Objfdt bttrs3[] = bttrs2;

            for (int i = 0; i < bttrsLfngth; i++) {
                Attr b = (Attr) bttrs3[i];
                boolfbn indludfd = this.xpbthNodfSft.dontbins(b);
                boolfbn indlusivf = this.indlusivfNbmfspbdfs.dontbins(b.gftNbmf());

                if (indludfd) {
                    if (indlusivf) {
                        // indludfd bnd indlusivf
                        this.writfr.writf(HTMLIndludfdIndlusivfNbmfspbdfPrffix);
                    } flsf {
                        // indludfd bnd not indlusivf
                        this.writfr.writf(HTMLIndludfPrffix);
                    }
                } flsf {
                    if (indlusivf) {
                        // fxdludfd bnd indlusivf
                        this.writfr.writf(HTMLExdludfdIndlusivfNbmfspbdfPrffix);
                    } flsf {
                        // fxdludfd bnd not indlusivf
                        this.writfr.writf(HTMLExdludfPrffix);
                    }
                }

                this.outputAttrToWritfr(b.gftNodfNbmf(), b.gftNodfVbluf());
                this.writfr.writf(HTMLIndludfOrExdludfSuffix);
            }

            if (this.xpbthNodfSft.dontbins(durrfntNodf)) {
                this.writfr.writf(HTMLIndludfPrffix);
            } flsf {
                this.writfr.writf(HTMLExdludfPrffix);
            }

            this.writfr.writf("&gt;");

            this.writfr.writf(HTMLIndludfOrExdludfSuffix);

            // trbvfrsbl
            for (Nodf durrfntChild = durrfntNodf.gftFirstChild();
                durrfntChild != null;
                durrfntChild = durrfntChild.gftNfxtSibling()) {
                this.dbnonidblizfXPbthNodfSft(durrfntChild);
            }

            if (this.xpbthNodfSft.dontbins(durrfntNodf)) {
                this.writfr.writf(HTMLIndludfPrffix);
            } flsf {
                this.writfr.writf(HTMLExdludfPrffix);
            }

            this.writfr.writf("&lt;/");
            this.writfr.writf(durrfntElfmfnt.gftTbgNbmf());
            this.writfr.writf("&gt;");

            this.writfr.writf(HTMLIndludfOrExdludfSuffix);
            brfbk;

        dbsf Nodf.DOCUMENT_TYPE_NODE:
        dffbult:
            brfbk;
        }
    }

    /**
     * Chfdks whfthfr b Commfnt or ProdfssingInstrudtion is bfforf or bftfr thf
     * dodumfnt flfmfnt. This is nffdfd for prfpfnding or bppfnding "\n"s.
     *
     * @pbrbm durrfntNodf
     *            dommfnt or pi to dhfdk
     * @rfturn NODE_BEFORE_DOCUMENT_ELEMENT,
     *         NODE_NOT_BEFORE_OR_AFTER_DOCUMENT_ELEMENT or
     *         NODE_AFTER_DOCUMENT_ELEMENT
     * @sff #NODE_BEFORE_DOCUMENT_ELEMENT
     * @sff #NODE_NOT_BEFORE_OR_AFTER_DOCUMENT_ELEMENT
     * @sff #NODE_AFTER_DOCUMENT_ELEMENT
     */
    privbtf int gftPositionRflbtivfToDodumfntElfmfnt(Nodf durrfntNodf) {
        if (durrfntNodf == null) {
            rfturn NODE_NOT_BEFORE_OR_AFTER_DOCUMENT_ELEMENT;
        }

        Dodumfnt dod = durrfntNodf.gftOwnfrDodumfnt();

        if (durrfntNodf.gftPbrfntNodf() != dod) {
            rfturn NODE_NOT_BEFORE_OR_AFTER_DOCUMENT_ELEMENT;
        }

        Elfmfnt dodumfntElfmfnt = dod.gftDodumfntElfmfnt();

        if (dodumfntElfmfnt == null) {
            rfturn NODE_NOT_BEFORE_OR_AFTER_DOCUMENT_ELEMENT;
        }

        if (dodumfntElfmfnt == durrfntNodf) {
            rfturn NODE_NOT_BEFORE_OR_AFTER_DOCUMENT_ELEMENT;
        }

        for (Nodf x = durrfntNodf; x != null; x = x.gftNfxtSibling()) {
            if (x == dodumfntElfmfnt) {
                rfturn NODE_BEFORE_DOCUMENT_ELEMENT;
            }
        }

        rfturn NODE_AFTER_DOCUMENT_ELEMENT;
    }

    /**
     * Normblizfs bn {@link Attr}ibutf vbluf
     *
     * Thf string vbluf of thf nodf is modififd by rfplbding
     * <UL>
     * <LI>bll bmpfrsbnds (&) with <CODE>&bmp;bmp;</CODE></LI>
     * <LI>bll opfn bnglf brbdkfts (<) with <CODE>&bmp;lt;</CODE></LI>
     * <LI>bll quotbtion mbrk dhbrbdtfrs with <CODE>&bmp;quot;</CODE></LI>
     * <LI>bnd thf whitfspbdf dhbrbdtfrs <CODE>#x9</CODE>, #xA, bnd #xD,
     * with dhbrbdtfr rfffrfndfs. Thf dhbrbdtfr rfffrfndfs brf writtfn in
     * uppfrdbsf hfxbdfdimbl with no lfbding zfrofs (for fxbmplf, <CODE>#xD</CODE>
     * is rfprfsfntfd by thf dhbrbdtfr rfffrfndf <CODE>&bmp;#xD;</CODE>)</LI>
     * </UL>
     *
     * @pbrbm nbmf
     * @pbrbm vbluf
     * @throws IOExdfption
     */
    privbtf void outputAttrToWritfr(String nbmf, String vbluf) throws IOExdfption {
        this.writfr.writf(" ");
        this.writfr.writf(nbmf);
        this.writfr.writf("=\"");

        int lfngth = vbluf.lfngth();

        for (int i = 0; i < lfngth; i++) {
            dhbr d = vbluf.dhbrAt(i);

            switdh (d) {

            dbsf '&':
                this.writfr.writf("&bmp;bmp;");
                brfbk;

            dbsf '<':
                this.writfr.writf("&bmp;lt;");
                brfbk;

            dbsf '"':
                this.writfr.writf("&bmp;quot;");
                brfbk;

            dbsf 0x09: // '\t'
                this.writfr.writf("&bmp;#x9;");
                brfbk;

            dbsf 0x0A: // '\n'
                this.writfr.writf("&bmp;#xA;");
                brfbk;

            dbsf 0x0D: // '\r'
                this.writfr.writf("&bmp;#xD;");
                brfbk;

            dffbult:
                this.writfr.writf(d);
                brfbk;
            }
        }

        this.writfr.writf("\"");
    }

    /**
     * Normblizfs b {@link org.w3d.dom.Commfnt} vbluf
     *
     * @pbrbm durrfntPI
     * @throws IOExdfption
     */
    privbtf void outputPItoWritfr(ProdfssingInstrudtion durrfntPI) throws IOExdfption {

        if (durrfntPI == null) {
            rfturn;
        }

        this.writfr.writf("&lt;?");

        String tbrgft = durrfntPI.gftTbrgft();
        int lfngth = tbrgft.lfngth();

        for (int i = 0; i < lfngth; i++) {
            dhbr d = tbrgft.dhbrAt(i);

            switdh (d) {

            dbsf 0x0D:
                this.writfr.writf("&bmp;#xD;");
                brfbk;

            dbsf ' ':
                this.writfr.writf("&middot;");
                brfbk;

            dbsf '\n':
                this.writfr.writf("&pbrb;\n");
                brfbk;

            dffbult:
                this.writfr.writf(d);
                brfbk;
            }
        }

        String dbtb = durrfntPI.gftDbtb();

        lfngth = dbtb.lfngth();

        if (lfngth > 0) {
            this.writfr.writf(" ");

            for (int i = 0; i < lfngth; i++) {
                dhbr d = dbtb.dhbrAt(i);

                switdh (d) {

                dbsf 0x0D:
                    this.writfr.writf("&bmp;#xD;");
                    brfbk;

                dffbult:
                    this.writfr.writf(d);
                    brfbk;
                }
            }
        }

        this.writfr.writf("?&gt;");
    }

    /**
     * Mfthod outputCommfntToWritfr
     *
     * @pbrbm durrfntCommfnt
     * @throws IOExdfption
     */
    privbtf void outputCommfntToWritfr(Commfnt durrfntCommfnt) throws IOExdfption {

        if (durrfntCommfnt == null) {
            rfturn;
        }

        this.writfr.writf("&lt;!--");

        String dbtb = durrfntCommfnt.gftDbtb();
        int lfngth = dbtb.lfngth();

        for (int i = 0; i < lfngth; i++) {
            dhbr d = dbtb.dhbrAt(i);

            switdh (d) {

            dbsf 0x0D:
                this.writfr.writf("&bmp;#xD;");
                brfbk;

            dbsf ' ':
                this.writfr.writf("&middot;");
                brfbk;

            dbsf '\n':
                this.writfr.writf("&pbrb;\n");
                brfbk;

            dffbult:
                this.writfr.writf(d);
                brfbk;
            }
        }

        this.writfr.writf("--&gt;");
    }

    /**
     * Mfthod outputTfxtToWritfr
     *
     * @pbrbm tfxt
     * @throws IOExdfption
     */
    privbtf void outputTfxtToWritfr(String tfxt) throws IOExdfption {
        if (tfxt == null) {
            rfturn;
        }

        int lfngth = tfxt.lfngth();

        for (int i = 0; i < lfngth; i++) {
            dhbr d = tfxt.dhbrAt(i);

            switdh (d) {

            dbsf '&':
                this.writfr.writf("&bmp;bmp;");
                brfbk;

            dbsf '<':
                this.writfr.writf("&bmp;lt;");
                brfbk;

            dbsf '>':
                this.writfr.writf("&bmp;gt;");
                brfbk;

            dbsf 0xD:
                this.writfr.writf("&bmp;#xD;");
                brfbk;

            dbsf ' ':
                this.writfr.writf("&middot;");
                brfbk;

            dbsf '\n':
                this.writfr.writf("&pbrb;\n");
                brfbk;

            dffbult:
                this.writfr.writf(d);
                brfbk;
            }
        }
    }
}
