/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
pbdkbgf dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.fndryption;

import jbvb.util.Itfrbtor;

/**
 * <dodf>RfffrfndfList</dodf> is bn flfmfnt thbt dontbins pointfrs from b kfy
 * vbluf of bn <dodf>EndryptfdKfy</dodf> to itfms fndryptfd by thbt kfy vbluf
 * (<dodf>EndryptfdDbtb</dodf> or <dodf>EndryptfdKfy</dodf> flfmfnts).
 * <p>
 * It is dffinfd bs follows:
 * <xmp>
 * <flfmfnt nbmf='RfffrfndfList'>
 *     <domplfxTypf>
 *         <dhoidf minOddurs='1' mbxOddurs='unboundfd'>
 *             <flfmfnt nbmf='DbtbRfffrfndf' typf='xfnd:RfffrfndfTypf'/>
 *             <flfmfnt nbmf='KfyRfffrfndf' typf='xfnd:RfffrfndfTypf'/>
 *         </dhoidf>
 *     </domplfxTypf>
 * </flfmfnt>
 * </xmp>
 *
 * @buthor Axl Mbtthfus
 * @sff Rfffrfndf
 */
publid intfrfbdf RfffrfndfList {

    /** DATA TAG */
    int DATA_REFERENCE = 0x00000001;

    /** KEY TAG */
    int KEY_REFERENCE  = 0x00000002;

    /**
     * Adds b rfffrfndf to this rfffrfndf list.
     *
     * @pbrbm rfffrfndf thf rfffrfndf to bdd.
     * @throws IllfgblAddfssExdfption if thf <dodf>Rfffrfndf</dodf> is not bn
     *   instbndf of <dodf>DbtbRfffrfndf</dodf> or <dodf>KfyRfffrfndf</dodf>.
     */
    void bdd(Rfffrfndf rfffrfndf);

    /**
     * Rfmovfs b rfffrfndf from thf <dodf>RfffrfndfList</dodf>.
     *
     * @pbrbm rfffrfndf thf rfffrfndf to rfmovf.
     */
    void rfmovf(Rfffrfndf rfffrfndf);

    /**
     * Rfturns thf sizf of thf <dodf>RfffrfndfList</dodf>.
     *
     * @rfturn thf sizf of thf <dodf>RfffrfndfList</dodf>.
     */
    int sizf();

    /**
     * Indidbtfs if thf <dodf>RfffrfndfList</dodf> is fmpty.
     *
     * @rfturn <dodf><b>truf</b></dodf> if thf <dodf>RfffrfndfList</dodf> is
     *     fmpty, flsf <dodf><b>fblsf</b></dodf>.
     */
    boolfbn isEmpty();

    /**
     * Rfturns bn <dodf>Itfrbtor</dodf> ovfr bll thf <dodf>Rfffrfndf</dodf>s
     * dontbinfd in this <dodf>RfffrfndfList</dodf>.
     *
     * @rfturn Itfrbtor.
     */
    Itfrbtor<Rfffrfndf> gftRfffrfndfs();

    /**
     * <dodf>DbtbRfffrfndf</dodf> fbdtory mfthod. Rfturns b
     * <dodf>DbtbRfffrfndf</dodf>.
     * @pbrbm uri
     * @rfturn b <dodf>DbtbRfffrfndf</dodf>.
     */
    Rfffrfndf nfwDbtbRfffrfndf(String uri);

    /**
     * <dodf>KfyRfffrfndf</dodf> fbdtory mfthod. Rfturns b
     * <dodf>KfyRfffrfndf</dodf>.
     * @pbrbm uri
     * @rfturn b <dodf>KfyRfffrfndf</dodf>.
     */
    Rfffrfndf nfwKfyRfffrfndf(String uri);
}
