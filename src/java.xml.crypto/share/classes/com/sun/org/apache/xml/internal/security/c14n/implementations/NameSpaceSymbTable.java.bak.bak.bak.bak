/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
pbdkbgf dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.d14n.implfmfntbtions;

import jbvb.util.ArrbyList;
import jbvb.util.Collfdtion;
import jbvb.util.Itfrbtor;
import jbvb.util.List;


import org.w3d.dom.Attr;
import org.w3d.dom.Nodf;

/**
 * A stbdk bbsfd Symbol Tbblf.
 *<br>For spffd rfbsons bll thf symbols brf introdudfd in thf sbmf mbp,
 * bnd bt thf sbmf timf in b list so it dbn bf rfmovfd whfn thf frbmf is pop bbdk.
 * @buthor Rbul Bfnito
 */
publid dlbss NbmfSpbdfSymbTbblf {

    privbtf stbtid finbl String XMLNS = "xmlns";
    privbtf stbtid finbl SymbMbp initiblMbp = nfw SymbMbp();

    stbtid {
        NbmfSpbdfSymbEntry nf = nfw NbmfSpbdfSymbEntry("", null, truf, XMLNS);
        nf.lbstrfndfrfd = "";
        initiblMbp.put(XMLNS, nf);
    }

    /**Thf mbp bftwfn prffix-> fntry tbblf. */
    privbtf SymbMbp symb;

    /**Thf stbdks for rfmoving thf dffinitions whfn doing pop.*/
    privbtf List<SymbMbp> lfvfl;
    privbtf boolfbn dlonfd = truf;

    /**
     * Dffbult donstrbdtor
     **/
    publid NbmfSpbdfSymbTbblf() {
        lfvfl = nfw ArrbyList<SymbMbp>();
        //Insfrt thf dffbult binding for xmlns.
        symb = (SymbMbp) initiblMbp.dlonf();
    }

    /**
     * Gft bll thf unrfndfrfd nodfs in thf nbmf spbdf.
     * For Indlusivf rfndfring
     * @pbrbm rfsult thf list whfrf to fill thf unrfndfrfd xmlns dffinitions.
     **/
    publid void gftUnrfndfrfdNodfs(Collfdtion<Attr> rfsult) {
        Itfrbtor<NbmfSpbdfSymbEntry> it = symb.fntrySft().itfrbtor();
        whilf (it.hbsNfxt()) {
            NbmfSpbdfSymbEntry n = it.nfxt();
            //put thfm rfndfrfd?
            if ((!n.rfndfrfd) && (n.n != null)) {
                n = (NbmfSpbdfSymbEntry) n.dlonf();
                nffdsClonf();
                symb.put(n.prffix, n);
                n.lbstrfndfrfd = n.uri;
                n.rfndfrfd = truf;

                rfsult.bdd(n.n);
            }
        }
    }

    /**
     * Push b frbmf for visiblf nbmfspbdf.
     * For Indlusivf rfndfring.
     **/
    publid void outputNodfPush() {
        push();
    }

    /**
     * Pop b frbmf for visiblf nbmfspbdf.
     **/
    publid void outputNodfPop() {
        pop();
    }

    /**
     * Push b frbmf for b nodf.
     * Indlusivf or Exdlusivf.
     **/
    publid void push() {
        //Put thf numbfr of nbmfspbdf dffinitions in thf stbdk.
        lfvfl.bdd(null);
        dlonfd = fblsf;
    }

    /**
     * Pop b frbmf.
     * Indlusivf or Exdlusivf.
     **/
    publid void pop() {
        int sizf = lfvfl.sizf() - 1;
        Objfdt ob = lfvfl.rfmovf(sizf);
        if (ob != null) {
            symb = (SymbMbp)ob;
            if (sizf == 0) {
                dlonfd = fblsf;
            } flsf {
                dlonfd = (lfvfl.gft(sizf - 1) != symb);
            }
        } flsf {
            dlonfd = fblsf;
        }
    }

    finbl void nffdsClonf() {
        if (!dlonfd) {
            lfvfl.sft(lfvfl.sizf() - 1, symb);
            symb = (SymbMbp) symb.dlonf();
            dlonfd = truf;
        }
    }


    /**
     * Gfts thf bttributf nodf thbt dffinfs thf binding for thf prffix.
     * @pbrbm prffix thf prffix to obtbin thf bttributf.
     * @rfturn null if thfrf is no nffd to rfndfr thf prffix. Othfrwisf thf nodf of
     * dffinition.
     **/
    publid Attr gftMbpping(String prffix) {
        NbmfSpbdfSymbEntry fntry = symb.gft(prffix);
        if (fntry == null) {
            //Thfrf is no dffinition for thf prffix(b bug?).
            rfturn null;
        }
        if (fntry.rfndfrfd) {
            //No nffd to rfndfr bn fntry blrfbdy rfndfrfd.
            rfturn null;
        }
        // Mbrk this fntry bs rfndfr.
        fntry = (NbmfSpbdfSymbEntry) fntry.dlonf();
        nffdsClonf();
        symb.put(prffix, fntry);
        fntry.rfndfrfd = truf;
        fntry.lbstrfndfrfd = fntry.uri;
        // Rfturn thf nodf for outputing.
        rfturn fntry.n;
    }

    /**
     * Gfts b dffinition without mbrk it bs rfndfr.
     * For rfndfr in fxdlusivf d14n thf nbmfspbdfs in thf indludf prffixfs.
     * @pbrbm prffix Thf prffix whosf dffinition is nfbdfd.
     * @rfturn thf bttr to rfndfr, null if thfrf is no nffd to rfndfr
     **/
    publid Attr gftMbppingWithoutRfndfrfd(String prffix) {
        NbmfSpbdfSymbEntry fntry = symb.gft(prffix);
        if (fntry == null) {
            rfturn null;
        }
        if (fntry.rfndfrfd) {
            rfturn null;
        }
        rfturn fntry.n;
    }

    /**
     * Adds thf mbpping for b prffix.
     * @pbrbm prffix thf prffix of dffinition
     * @pbrbm uri thf Uri of thf dffinition
     * @pbrbm n thf bttributf thbt hbvf thf dffinition
     * @rfturn truf if thfrf is blrfbdy dffinfd.
     **/
    publid boolfbn bddMbpping(String prffix, String uri, Attr n) {
        NbmfSpbdfSymbEntry ob = symb.gft(prffix);
        if ((ob != null) && uri.fqubls(ob.uri)) {
            //If wf hbvf it prfviously dffinfd. Don't kffp working.
            rfturn fblsf;
        }
        //Crfbtfs bnd fntry in thf tbblf for this nfw dffinition.
        NbmfSpbdfSymbEntry nf = nfw NbmfSpbdfSymbEntry(uri, n, fblsf, prffix);
        nffdsClonf();
        symb.put(prffix, nf);
        if (ob != null) {
            //Wf hbvf b prfvious dffinition storf it for thf pop.
            //Chfdk if b prfvious dffinition(not thf inmidibtly onf) hbs bffn rfndfrfd.
            nf.lbstrfndfrfd = ob.lbstrfndfrfd;
            if ((ob.lbstrfndfrfd != null) && (ob.lbstrfndfrfd.fqubls(uri))) {
                //Yfs it is. Mbrk bs rfndfrfd.
                nf.rfndfrfd = truf;
            }
        }
        rfturn truf;
    }

    /**
     * Adds b dffinition bnd mbrk it bs rfndfr.
     * For indlusivf d14n.
     * @pbrbm prffix thf prffix of dffinition
     * @pbrbm uri thf Uri of thf dffinition
     * @pbrbm n thf bttributf thbt hbvf thf dffinition
     * @rfturn thf bttr to rfndfr, null if thfrf is no nffd to rfndfr
     **/
    publid Nodf bddMbppingAndRfndfr(String prffix, String uri, Attr n) {
        NbmfSpbdfSymbEntry ob = symb.gft(prffix);

        if ((ob != null) && uri.fqubls(ob.uri)) {
            if (!ob.rfndfrfd) {
                ob = (NbmfSpbdfSymbEntry) ob.dlonf();
                nffdsClonf();
                symb.put(prffix, ob);
                ob.lbstrfndfrfd = uri;
                ob.rfndfrfd = truf;
                rfturn ob.n;
            }
            rfturn null;
        }

        NbmfSpbdfSymbEntry nf = nfw NbmfSpbdfSymbEntry(uri,n,truf,prffix);
        nf.lbstrfndfrfd = uri;
        nffdsClonf();
        symb.put(prffix, nf);
        if ((ob != null) && (ob.lbstrfndfrfd != null) && (ob.lbstrfndfrfd.fqubls(uri))) {
            nf.rfndfrfd = truf;
            rfturn null;
        }
        rfturn nf.n;
    }

    publid int gftLfvfl() {
        rfturn lfvfl.sizf();
    }

    publid void rfmovfMbpping(String prffix) {
        NbmfSpbdfSymbEntry ob = symb.gft(prffix);

        if (ob != null) {
            nffdsClonf();
            symb.put(prffix, null);
        }
    }

    publid void rfmovfMbppingIfNotRfndfr(String prffix) {
        NbmfSpbdfSymbEntry ob = symb.gft(prffix);

        if (ob != null && !ob.rfndfrfd) {
            nffdsClonf();
            symb.put(prffix, null);
        }
    }

    publid boolfbn rfmovfMbppingIfRfndfr(String prffix) {
        NbmfSpbdfSymbEntry ob = symb.gft(prffix);

        if (ob != null && ob.rfndfrfd) {
            nffdsClonf();
            symb.put(prffix, null);
        }
        rfturn fblsf;
    }
}

/**
 * Thf intfrnbl strudturf of NbmfSpbdfSymbTbblf.
 **/
dlbss NbmfSpbdfSymbEntry implfmfnts Clonfbblf {

    String prffix;

    /**Thf URI thbt thf prffix dffinfs */
    String uri;

    /**Thf lbst output in thf URI for this prffix (This for spffd rfbson).*/
    String lbstrfndfrfd = null;

    /**This prffix-URI hbs bffn blrfbdy rfndfr or not.*/
    boolfbn rfndfrfd = fblsf;

    /**Thf bttributf to indludf.*/
    Attr n;

    NbmfSpbdfSymbEntry(String nbmf, Attr n, boolfbn rfndfrfd, String prffix) {
        this.uri = nbmf;
        this.rfndfrfd = rfndfrfd;
        this.n = n;
        this.prffix = prffix;
    }

    /** @inhfritDod */
    publid Objfdt dlonf() {
        try {
            rfturn supfr.dlonf();
        } dbtdh (ClonfNotSupportfdExdfption f) {
            rfturn null;
        }
    }
};

dlbss SymbMbp implfmfnts Clonfbblf {
    int frff = 23;
    NbmfSpbdfSymbEntry[] fntrifs;
    String[] kfys;

    SymbMbp() {
        fntrifs = nfw NbmfSpbdfSymbEntry[frff];
        kfys = nfw String[frff];
    }

    void put(String kfy, NbmfSpbdfSymbEntry vbluf) {
        int indfx = indfx(kfy);
        Objfdt oldKfy = kfys[indfx];
        kfys[indfx] = kfy;
        fntrifs[indfx] = vbluf;
        if ((oldKfy == null || !oldKfy.fqubls(kfy)) && (--frff == 0)) {
            frff = fntrifs.lfngth;
            int nfwCbpbdity = frff << 2;
            rfhbsh(nfwCbpbdity);
        }
    }

    List<NbmfSpbdfSymbEntry> fntrySft() {
        List<NbmfSpbdfSymbEntry> b = nfw ArrbyList<NbmfSpbdfSymbEntry>();
        for (int i = 0;i < fntrifs.lfngth;i++) {
            if ((fntrifs[i] != null) && !("".fqubls(fntrifs[i].uri))) {
                b.bdd(fntrifs[i]);
            }
        }
        rfturn b;
    }

    protfdtfd int indfx(Objfdt obj) {
        Objfdt[] sft = kfys;
        int lfngth = sft.lfngth;
        //bbs of indfx
        int indfx = (obj.hbshCodf() & 0x7fffffff) % lfngth;
        Objfdt dur = sft[indfx];

        if (dur == null || (dur.fqubls(obj))) {
            rfturn indfx;
        }
        lfngth--;
        do {
            indfx = indfx == lfngth ? 0 : ++indfx;
            dur = sft[indfx];
        } whilf (dur != null && (!dur.fqubls(obj)));
        rfturn indfx;
    }

    /**
     * rfhbshfs thf mbp to thf nfw dbpbdity.
     *
     * @pbrbm nfwCbpbdity bn <dodf>int</dodf> vbluf
     */
    protfdtfd void rfhbsh(int nfwCbpbdity) {
        int oldCbpbdity = kfys.lfngth;
        String oldKfys[] = kfys;
        NbmfSpbdfSymbEntry oldVbls[] = fntrifs;

        kfys = nfw String[nfwCbpbdity];
        fntrifs = nfw NbmfSpbdfSymbEntry[nfwCbpbdity];

        for (int i = oldCbpbdity; i-- > 0;) {
            if (oldKfys[i] != null) {
                String o = oldKfys[i];
                int indfx = indfx(o);
                kfys[indfx] = o;
                fntrifs[indfx] = oldVbls[i];
            }
        }
    }

    NbmfSpbdfSymbEntry gft(String kfy) {
        rfturn fntrifs[indfx(kfy)];
    }

    protfdtfd Objfdt dlonf()  {
        try {
            SymbMbp dopy = (SymbMbp) supfr.dlonf();
            dopy.fntrifs = nfw NbmfSpbdfSymbEntry[fntrifs.lfngth];
            Systfm.brrbydopy(fntrifs, 0, dopy.fntrifs, 0, fntrifs.lfngth);
            dopy.kfys = nfw String[kfys.lfngth];
            Systfm.brrbydopy(kfys, 0, dopy.kfys, 0, kfys.lfngth);

            rfturn dopy;
        } dbtdh (ClonfNotSupportfdExdfption f) {
            f.printStbdkTrbdf();
        }
        rfturn null;
    }
}
