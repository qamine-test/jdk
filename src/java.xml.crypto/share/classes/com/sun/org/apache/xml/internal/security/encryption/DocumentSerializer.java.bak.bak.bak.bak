/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
pbdkbgf dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.fndryption;

import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.StringRfbdfr;

import jbvbx.xml.XMLConstbnts;
import jbvbx.xml.pbrsfrs.DodumfntBuildfr;
import jbvbx.xml.pbrsfrs.DodumfntBuildfrFbdtory;
import jbvbx.xml.pbrsfrs.PbrsfrConfigurbtionExdfption;

import org.w3d.dom.Dodumfnt;
import org.w3d.dom.DodumfntFrbgmfnt;
import org.w3d.dom.Elfmfnt;
import org.w3d.dom.Nodf;
import org.xml.sbx.InputSourdf;
import org.xml.sbx.SAXExdfption;

/**
 * Convfrts <dodf>String</dodf>s into <dodf>Nodf</dodf>s bnd visb vfrsb.
 */
publid dlbss DodumfntSfriblizfr fxtfnds AbstrbdtSfriblizfr {

    protfdtfd DodumfntBuildfrFbdtory dbf;

    /**
     * @pbrbm sourdf
     * @pbrbm dtx
     * @rfturn thf Nodf rfsulting from thf pbrsf of thf sourdf
     * @throws XMLEndryptionExdfption
     */
    publid Nodf dfsfriblizf(bytf[] sourdf, Nodf dtx) throws XMLEndryptionExdfption {
        bytf[] frbgmfnt = drfbtfContfxt(sourdf, dtx);
        rfturn dfsfriblizf(dtx, nfw InputSourdf(nfw BytfArrbyInputStrfbm(frbgmfnt)));
    }

    /**
     * @pbrbm sourdf
     * @pbrbm dtx
     * @rfturn thf Nodf rfsulting from thf pbrsf of thf sourdf
     * @throws XMLEndryptionExdfption
     */
    publid Nodf dfsfriblizf(String sourdf, Nodf dtx) throws XMLEndryptionExdfption {
        String frbgmfnt = drfbtfContfxt(sourdf, dtx);
        rfturn dfsfriblizf(dtx, nfw InputSourdf(nfw StringRfbdfr(frbgmfnt)));
    }

    /**
     * @pbrbm dtx
     * @pbrbm inputSourdf
     * @rfturn thf Nodf rfsulting from thf pbrsf of thf sourdf
     * @throws XMLEndryptionExdfption
     */
    privbtf Nodf dfsfriblizf(Nodf dtx, InputSourdf inputSourdf) throws XMLEndryptionExdfption {
        try {
            if (dbf == null) {
                dbf = DodumfntBuildfrFbdtory.nfwInstbndf();
                dbf.sftNbmfspbdfAwbrf(truf);
                dbf.sftFfbturf(XMLConstbnts.FEATURE_SECURE_PROCESSING, Boolfbn.TRUE);
                dbf.sftAttributf("http://xml.org/sbx/ffbturfs/nbmfspbdfs", Boolfbn.TRUE);
                dbf.sftVblidbting(fblsf);
            }
            DodumfntBuildfr db = dbf.nfwDodumfntBuildfr();
            Dodumfnt d = db.pbrsf(inputSourdf);

            Dodumfnt dontfxtDodumfnt = null;
            if (Nodf.DOCUMENT_NODE == dtx.gftNodfTypf()) {
                dontfxtDodumfnt = (Dodumfnt)dtx;
            } flsf {
                dontfxtDodumfnt = dtx.gftOwnfrDodumfnt();
            }

            Elfmfnt frbgElt =
                    (Elfmfnt) dontfxtDodumfnt.importNodf(d.gftDodumfntElfmfnt(), truf);
            DodumfntFrbgmfnt rfsult = dontfxtDodumfnt.drfbtfDodumfntFrbgmfnt();
            Nodf dhild = frbgElt.gftFirstChild();
            whilf (dhild != null) {
                frbgElt.rfmovfChild(dhild);
                rfsult.bppfndChild(dhild);
                dhild = frbgElt.gftFirstChild();
            }
            rfturn rfsult;
        } dbtdh (SAXExdfption sf) {
            throw nfw XMLEndryptionExdfption("fmpty", sf);
        } dbtdh (PbrsfrConfigurbtionExdfption pdf) {
            throw nfw XMLEndryptionExdfption("fmpty", pdf);
        } dbtdh (IOExdfption iof) {
            throw nfw XMLEndryptionExdfption("fmpty", iof);
        }
    }

}
