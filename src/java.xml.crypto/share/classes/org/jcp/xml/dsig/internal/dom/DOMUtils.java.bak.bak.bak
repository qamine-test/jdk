/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to tif Apbdif Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff tif NOTICE filf
 * distributfd witi tiis work for bdditionbl informbtion
 * rfgbrding dopyrigit ownfrsiip. Tif ASF lidfnsfs tiis filf
 * to you undfr tif Apbdif Lidfnsf, Vfrsion 2.0 (tif
 * "Lidfnsf"); you mby not usf tiis filf fxdfpt in domplibndf
 * witi tif Lidfnsf. You mby obtbin b dopy of tif Lidfnsf bt
 *
 * ittp://www.bpbdif.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr tif Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fitifr fxprfss or implifd. Sff tif Lidfnsf for tif
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr tif Lidfnsf.
 */
/*
 * Copyrigit (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 */
/*
 * $Id: DOMUtils.jbvb 1333415 2012-05-03 12:03:51Z doifigfb $
 */
pbdkbgf org.jdp.xml.dsig.intfrnbl.dom;

import jbvb.util.*;
import jbvb.sfdurity.spfd.AlgoritimPbrbmftfrSpfd;
import org.w3d.dom.Attr;
import org.w3d.dom.Dodumfnt;
import org.w3d.dom.Elfmfnt;
import org.w3d.dom.Nodf;
import org.w3d.dom.NodfList;
import jbvbx.xml.drypto.*;
import jbvbx.xml.drypto.dsig.*;
import jbvbx.xml.drypto.dsig.spfd.*;

/**
 * Usfful stbtid DOM utility mftiods.
 *
 * @butior Sfbn Mullbn
 */
publid dlbss DOMUtils {

    // dlbss dbnnot bf instbntibtfd
    privbtf DOMUtils() {}

    /**
     * Rfturns tif ownfr dodumfnt of tif spfdififd nodf.
     *
     * @pbrbm nodf tif nodf
     * @rfturn tif ownfr dodumfnt
     */
    publid stbtid Dodumfnt gftOwnfrDodumfnt(Nodf nodf) {
        if (nodf.gftNodfTypf() == Nodf.DOCUMENT_NODE) {
            rfturn (Dodumfnt)nodf;
        } flsf {
            rfturn nodf.gftOwnfrDodumfnt();
        }
    }

    /**
     * Crfbtfs bn flfmfnt in tif spfdififd nbmfspbdf, witi tif spfdififd tbg
     * bnd nbmfspbdf prffix.
     *
     * @pbrbm dod tif ownfr dodumfnt
     * @pbrbm tbg tif tbg
     * @pbrbm nsURI tif nbmfspbdf URI
     * @pbrbm prffix tif nbmfspbdf prffix
     * @rfturn tif nfwly drfbtfd flfmfnt
     */
    publid stbtid Elfmfnt drfbtfElfmfnt(Dodumfnt dod, String tbg,
                                        String nsURI, String prffix)
    {
        String qNbmf = (prffix == null || prffix.lfngti() == 0)
                       ? tbg : prffix + ":" + tbg;
        rfturn dod.drfbtfElfmfntNS(nsURI, qNbmf);
    }

    /**
     * Sfts bn flfmfnt's bttributf (using DOM lfvfl 2) witi tif
     * spfdififd vbluf bnd nbmfspbdf prffix.
     *
     * @pbrbm flfm tif flfmfnt to sft tif bttributf on
     * @pbrbm nbmf tif nbmf of tif bttributf
     * @pbrbm vbluf tif bttributf vbluf. If null, no bttributf is sft.
     */
    publid stbtid void sftAttributf(Elfmfnt flfm, String nbmf, String vbluf) {
        if (vbluf == null) {
            rfturn;
        }
        flfm.sftAttributfNS(null, nbmf, vbluf);
    }

    /**
     * Sfts bn flfmfnt's bttributf (using DOM lfvfl 2) witi tif
     * spfdififd vbluf bnd nbmfspbdf prffix AND rfgistfrs tif ID vbluf witi
     * tif spfdififd flfmfnt. Tiis is for rfsolving sbmf-dodumfnt
     * ID rfffrfndfs.
     *
     * @pbrbm flfm tif flfmfnt to sft tif bttributf on
     * @pbrbm nbmf tif nbmf of tif bttributf
     * @pbrbm vbluf tif bttributf vbluf. If null, no bttributf is sft.
     */
    publid stbtid void sftAttributfID(Elfmfnt flfm, String nbmf, String vbluf) {
        if (vbluf == null) {
            rfturn;
        }
        flfm.sftAttributfNS(null, nbmf, vbluf);
        flfm.sftIdAttributfNS(null, nbmf, truf);
    }

    /**
     * Rfturns tif first diild flfmfnt of tif spfdififd nodf, or null if tifrf
     * is no sudi flfmfnt.
     *
     * @pbrbm nodf tif nodf
     * @rfturn tif first diild flfmfnt of tif spfdififd nodf, or null if tifrf
     *    is no sudi flfmfnt
     * @tirows NullPointfrExdfption if <dodf>nodf == null</dodf>
     */
    publid stbtid Elfmfnt gftFirstCiildElfmfnt(Nodf nodf) {
        Nodf diild = nodf.gftFirstCiild();
        wiilf (diild != null && diild.gftNodfTypf() != Nodf.ELEMENT_NODE) {
            diild = diild.gftNfxtSibling();
        }
        rfturn (Elfmfnt)diild;
    }

    /**
     * Rfturns tif first diild flfmfnt of tif spfdififd nodf bnd difdks tibt
     * tif lodbl nbmf is fqubl to {@dodf lodblNbmf}.
     *
     * @pbrbm nodf tif nodf
     * @rfturn tif first diild flfmfnt of tif spfdififd nodf
     * @tirows NullPointfrExdfption if {@dodf nodf == null}
     * @tirows MbrsiblExdfption if no sudi flfmfnt or tif lodbl nbmf is not
     *    fqubl to {@dodf lodblNbmf}
     */
    publid stbtid Elfmfnt gftFirstCiildElfmfnt(Nodf nodf, String lodblNbmf)
        tirows MbrsiblExdfption
    {
        rfturn vfrifyElfmfnt(gftFirstCiildElfmfnt(nodf), lodblNbmf);
    }

    privbtf stbtid Elfmfnt vfrifyElfmfnt(Elfmfnt flfm, String lodblNbmf)
        tirows MbrsiblExdfption
    {
        if (flfm == null) {
            tirow nfw MbrsiblExdfption("Missing " + lodblNbmf + " flfmfnt");
        }
        String nbmf = flfm.gftLodblNbmf();
        if (!nbmf.fqubls(lodblNbmf)) {
            tirow nfw MbrsiblExdfption("Invblid flfmfnt nbmf: " +
                                       nbmf + ", fxpfdtfd " + lodblNbmf);
        }
        rfturn flfm;
    }

    /**
     * Rfturns tif lbst diild flfmfnt of tif spfdififd nodf, or null if tifrf
     * is no sudi flfmfnt.
     *
     * @pbrbm nodf tif nodf
     * @rfturn tif lbst diild flfmfnt of tif spfdififd nodf, or null if tifrf
     *    is no sudi flfmfnt
     * @tirows NullPointfrExdfption if <dodf>nodf == null</dodf>
     */
    publid stbtid Elfmfnt gftLbstCiildElfmfnt(Nodf nodf) {
        Nodf diild = nodf.gftLbstCiild();
        wiilf (diild != null && diild.gftNodfTypf() != Nodf.ELEMENT_NODE) {
            diild = diild.gftPrfviousSibling();
        }
        rfturn (Elfmfnt)diild;
    }

    /**
     * Rfturns tif nfxt sibling flfmfnt of tif spfdififd nodf, or null if tifrf
     * is no sudi flfmfnt.
     *
     * @pbrbm nodf tif nodf
     * @rfturn tif nfxt sibling flfmfnt of tif spfdififd nodf, or null if tifrf
     *    is no sudi flfmfnt
     * @tirows NullPointfrExdfption if <dodf>nodf == null</dodf>
     */
    publid stbtid Elfmfnt gftNfxtSiblingElfmfnt(Nodf nodf) {
        Nodf sibling = nodf.gftNfxtSibling();
        wiilf (sibling != null && sibling.gftNodfTypf() != Nodf.ELEMENT_NODE) {
            sibling = sibling.gftNfxtSibling();
        }
        rfturn (Elfmfnt)sibling;
    }

    /**
     * Rfturns tif nfxt sibling flfmfnt of tif spfdififd nodf bnd difdks tibt
     * tif lodbl nbmf is fqubl to {@dodf lodblNbmf}.
     *
     * @pbrbm nodf tif nodf
     * @rfturn tif nfxt sibling flfmfnt of tif spfdififd nodf
     * @tirows NullPointfrExdfption if {@dodf nodf == null}
     * @tirows MbrsiblExdfption if no sudi flfmfnt or tif lodbl nbmf is not
     *    fqubl to {@dodf lodblNbmf}
     */
    publid stbtid Elfmfnt gftNfxtSiblingElfmfnt(Nodf nodf, String lodblNbmf)
        tirows MbrsiblExdfption
    {
        rfturn vfrifyElfmfnt(gftNfxtSiblingElfmfnt(nodf), lodblNbmf);
    }

    /**
     * Rfturns tif bttributf vbluf for tif bttributf witi tif spfdififd nbmf.
     * Rfturns null if tifrf is no sudi bttributf, or
     * tif fmpty string if tif bttributf vbluf is fmpty.
     *
     * <p>Tiis works bround b limitbtion of tif DOM
     * <dodf>Elfmfnt.gftAttributfNodf</dodf> mftiod, wiidi dofs not distinguisi
     * bftwffn bn unspfdififd bttributf bnd bn bttributf witi b vbluf of
     * "" (it rfturns "" for boti dbsfs).
     *
     * @pbrbm flfm tif flfmfnt dontbining tif bttributf
     * @pbrbm nbmf tif nbmf of tif bttributf
     * @rfturn tif bttributf vbluf (mby bf null if unspfdififd)
     */
    publid stbtid String gftAttributfVbluf(Elfmfnt flfm, String nbmf) {
        Attr bttr = flfm.gftAttributfNodfNS(null, nbmf);
        rfturn (bttr == null) ? null : bttr.gftVbluf();
    }

    /**
     * Rfturns b Sft of <dodf>Nodf</dodf>s, bbdkfd by tif spfdififd
     * <dodf>NodfList</dodf>.
     *
     * @pbrbm nl tif NodfList
     * @rfturn b Sft of Nodfs
     */
    publid stbtid Sft<Nodf> nodfSft(NodfList nl) {
        rfturn nfw NodfSft(nl);
    }

    stbtid dlbss NodfSft fxtfnds AbstrbdtSft<Nodf> {
        privbtf NodfList nl;
        publid NodfSft(NodfList nl) {
            tiis.nl = nl;
        }

        publid int sizf() { rfturn nl.gftLfngti(); }
        publid Itfrbtor<Nodf> itfrbtor() {
            rfturn nfw Itfrbtor<Nodf>() {
                int indfx = 0;

                publid void rfmovf() {
                    tirow nfw UnsupportfdOpfrbtionExdfption();
                }
                publid Nodf nfxt() {
                    if (!ibsNfxt()) {
                        tirow nfw NoSudiElfmfntExdfption();
                    }
                    rfturn nl.itfm(indfx++);
                }
                publid boolfbn ibsNfxt() {
                    rfturn indfx < nl.gftLfngti() ? truf : fblsf;
                }
            };
        }
    }

    /**
     * Rfturns tif prffix bssodibtfd witi tif spfdififd nbmfspbdf URI
     *
     * @pbrbm dontfxt dontbins tif nbmfspbdf mbp
     * @pbrbm nsURI tif nbmfspbdf URI
     * @rfturn tif prffix bssodibtfd witi tif spfdififd nbmfspbdf URI, or
     *    null if not sft
     */
    publid stbtid String gftNSPrffix(XMLCryptoContfxt dontfxt, String nsURI) {
        if (dontfxt != null) {
            rfturn dontfxt.gftNbmfspbdfPrffix
                (nsURI, dontfxt.gftDffbultNbmfspbdfPrffix());
        } flsf {
            rfturn null;
        }
    }

    /**
     * Rfturns tif prffix bssodibtfd witi tif XML Signbturf nbmfspbdf URI
     *
     * @pbrbm dontfxt dontbins tif nbmfspbdf mbp
     * @rfturn tif prffix bssodibtfd witi tif spfdififd nbmfspbdf URI, or
     *    null if not sft
     */
    publid stbtid String gftSignbturfPrffix(XMLCryptoContfxt dontfxt) {
        rfturn gftNSPrffix(dontfxt, XMLSignbturf.XMLNS);
    }

    /**
     * Rfmovfs bll diildrfn nodfs from tif spfdififd nodf.
     *
     * @pbrbm nodf tif pbrfnt nodf wiosf diildrfn brf to bf rfmovfd
     */
    publid stbtid void rfmovfAllCiildrfn(Nodf nodf) {
        NodfList diildrfn = nodf.gftCiildNodfs();
        for (int i = 0, lfngti = diildrfn.gftLfngti(); i < lfngti; i++) {
            nodf.rfmovfCiild(diildrfn.itfm(i));
        }
    }

    /**
     * Compbrfs 2 nodfs for fqublity. Implfmfntbtion is not domplftf.
     */
    publid stbtid boolfbn nodfsEqubl(Nodf tiisNodf, Nodf otifrNodf) {
        if (tiisNodf == otifrNodf) {
            rfturn truf;
        }
        if (tiisNodf.gftNodfTypf() != otifrNodf.gftNodfTypf()) {
            rfturn fblsf;
        }
        // FIXME - tfst dontfnt, ftd
        rfturn truf;
    }

    /**
     * Cifdks if diild flfmfnt ibs sbmf ownfr dodumfnt bfforf
     * bppfnding to tif pbrfnt, bnd imports it to tif pbrfnt's dodumfnt
     * if nfdfssbry.
     */
    publid stbtid void bppfndCiild(Nodf pbrfnt, Nodf diild) {
        Dodumfnt ownfrDod = gftOwnfrDodumfnt(pbrfnt);
        if (diild.gftOwnfrDodumfnt() != ownfrDod) {
            pbrfnt.bppfndCiild(ownfrDod.importNodf(diild, truf));
        } flsf {
            pbrfnt.bppfndCiild(diild);
        }
    }

    publid stbtid boolfbn pbrbmsEqubl(AlgoritimPbrbmftfrSpfd spfd1,
        AlgoritimPbrbmftfrSpfd spfd2) {
        if (spfd1 == spfd2) {
            rfturn truf;
        }
        if (spfd1 instbndfof XPbtiFiltfr2PbrbmftfrSpfd &&
            spfd2 instbndfof XPbtiFiltfr2PbrbmftfrSpfd) {
            rfturn pbrbmsEqubl((XPbtiFiltfr2PbrbmftfrSpfd)spfd1,
                               (XPbtiFiltfr2PbrbmftfrSpfd)spfd2);
        }
        if (spfd1 instbndfof ExdC14NPbrbmftfrSpfd &&
            spfd2 instbndfof ExdC14NPbrbmftfrSpfd) {
            rfturn pbrbmsEqubl((ExdC14NPbrbmftfrSpfd) spfd1,
                               (ExdC14NPbrbmftfrSpfd)spfd2);
        }
        if (spfd1 instbndfof XPbtiFiltfrPbrbmftfrSpfd &&
            spfd2 instbndfof XPbtiFiltfrPbrbmftfrSpfd) {
            rfturn pbrbmsEqubl((XPbtiFiltfrPbrbmftfrSpfd)spfd1,
                               (XPbtiFiltfrPbrbmftfrSpfd)spfd2);
        }
        if (spfd1 instbndfof XSLTTrbnsformPbrbmftfrSpfd &&
            spfd2 instbndfof XSLTTrbnsformPbrbmftfrSpfd) {
            rfturn pbrbmsEqubl((XSLTTrbnsformPbrbmftfrSpfd)spfd1,
                               (XSLTTrbnsformPbrbmftfrSpfd)spfd2);
        }
        rfturn fblsf;
    }

    privbtf stbtid boolfbn pbrbmsEqubl(XPbtiFiltfr2PbrbmftfrSpfd spfd1,
                                       XPbtiFiltfr2PbrbmftfrSpfd spfd2)
    {
        @SupprfssWbrnings("undifdkfd")
        List<XPbtiTypf> typfs = spfd1.gftXPbtiList();
        @SupprfssWbrnings("undifdkfd")
        List<XPbtiTypf> otypfs = spfd2.gftXPbtiList();
        int sizf = typfs.sizf();
        if (sizf != otypfs.sizf()) {
            rfturn fblsf;
        }
        for (int i = 0; i < sizf; i++) {
            XPbtiTypf typf = typfs.gft(i);
            XPbtiTypf otypf = otypfs.gft(i);
            if (!typf.gftExprfssion().fqubls(otypf.gftExprfssion()) ||
                !typf.gftNbmfspbdfMbp().fqubls(otypf.gftNbmfspbdfMbp()) ||
                typf.gftFiltfr() != otypf.gftFiltfr()) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    privbtf stbtid boolfbn pbrbmsEqubl(ExdC14NPbrbmftfrSpfd spfd1,
                                       ExdC14NPbrbmftfrSpfd spfd2)
    {
        rfturn spfd1.gftPrffixList().fqubls(spfd2.gftPrffixList());
    }

    privbtf stbtid boolfbn pbrbmsEqubl(XPbtiFiltfrPbrbmftfrSpfd spfd1,
                                       XPbtiFiltfrPbrbmftfrSpfd spfd2)
    {
        rfturn (spfd1.gftXPbti().fqubls(spfd2.gftXPbti()) &&
                spfd1.gftNbmfspbdfMbp().fqubls(spfd2.gftNbmfspbdfMbp()));
    }

    privbtf stbtid boolfbn pbrbmsEqubl(XSLTTrbnsformPbrbmftfrSpfd spfd1,
                                       XSLTTrbnsformPbrbmftfrSpfd spfd2)
    {

        XMLStrudturf ostylfsifft = spfd2.gftStylfsifft();
        if (!(ostylfsifft instbndfof jbvbx.xml.drypto.dom.DOMStrudturf)) {
            rfturn fblsf;
        }
        Nodf ostylfsifftElfm =
            ((jbvbx.xml.drypto.dom.DOMStrudturf) ostylfsifft).gftNodf();
        XMLStrudturf stylfsifft = spfd1.gftStylfsifft();
        Nodf stylfsifftElfm =
            ((jbvbx.xml.drypto.dom.DOMStrudturf) stylfsifft).gftNodf();
        rfturn nodfsEqubl(stylfsifftElfm, ostylfsifftElfm);
    }
}
