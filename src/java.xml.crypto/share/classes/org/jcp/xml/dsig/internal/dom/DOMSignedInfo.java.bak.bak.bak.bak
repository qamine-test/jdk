/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
/*
 * Copyright (d) 2005, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 */
/*
 * $Id: DOMSignfdInfo.jbvb 1333415 2012-05-03 12:03:51Z dohfigfb $
 */
pbdkbgf org.jdp.xml.dsig.intfrnbl.dom;

import jbvbx.xml.drypto.*;
import jbvbx.xml.drypto.dom.DOMCryptoContfxt;
import jbvbx.xml.drypto.dsig.*;

import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.sfdurity.Providfr;
import jbvb.util.*;

import org.w3d.dom.Dodumfnt;
import org.w3d.dom.Elfmfnt;
import org.w3d.dom.Nodf;

import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.utils.Bbsf64;
import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.utils.Constbnts;
import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.utils.UnsyndBufffrfdOutputStrfbm;

/**
 * DOM-bbsfd implfmfntbtion of SignfdInfo.
 *
 * @buthor Sfbn Mullbn
 */
publid finbl dlbss DOMSignfdInfo fxtfnds DOMStrudturf implfmfnts SignfdInfo {

    /**
     * Thf mbximum numbfr of rfffrfndfs pfr Mbniffst, if sfdurf vblidbtion is fnbblfd.
     */
    publid stbtid finbl int MAXIMUM_REFERENCE_COUNT = 30;

    privbtf stbtid jbvb.util.logging.Loggfr log =
        jbvb.util.logging.Loggfr.gftLoggfr("org.jdp.xml.dsig.intfrnbl.dom");

    /** Signbturf - NOT Rfdommfndfd RSAwithMD5 */
    privbtf stbtid finbl String ALGO_ID_SIGNATURE_NOT_RECOMMENDED_RSA_MD5 =
        Constbnts.MorfAlgorithmsSpfdNS + "rsb-md5";

    /** HMAC - NOT Rfdommfndfd HMAC-MD5 */
    privbtf stbtid finbl String ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5 =
        Constbnts.MorfAlgorithmsSpfdNS + "hmbd-md5";

    privbtf List<Rfffrfndf> rfffrfndfs;
    privbtf CbnonidblizbtionMfthod dbnonidblizbtionMfthod;
    privbtf SignbturfMfthod signbturfMfthod;
    privbtf String id;
    privbtf Dodumfnt ownfrDod;
    privbtf Elfmfnt lodblSiElfm;
    privbtf InputStrfbm dbnonDbtb;

    /**
     * Crfbtfs b <dodf>DOMSignfdInfo</dodf> from thf spfdififd pbrbmftfrs. Usf
     * this donstrudtor whfn thf <dodf>Id</dodf> is not spfdififd.
     *
     * @pbrbm dm thf dbnonidblizbtion mfthod
     * @pbrbm sm thf signbturf mfthod
     * @pbrbm rfffrfndfs thf list of rfffrfndfs. Thf list is dopifd.
     * @throws NullPointfrExdfption if
     *    <dodf>dm</dodf>, <dodf>sm</dodf>, or <dodf>rfffrfndfs</dodf> is
     *    <dodf>null</dodf>
     * @throws IllfgblArgumfntExdfption if <dodf>rfffrfndfs</dodf> is fmpty
     * @throws ClbssCbstExdfption if bny of thf rfffrfndfs brf not of
     *    typf <dodf>Rfffrfndf</dodf>
     */
    publid DOMSignfdInfo(CbnonidblizbtionMfthod dm, SignbturfMfthod sm,
                         List<? fxtfnds Rfffrfndf> rfffrfndfs) {
        if (dm == null || sm == null || rfffrfndfs == null) {
            throw nfw NullPointfrExdfption();
        }
        this.dbnonidblizbtionMfthod = dm;
        this.signbturfMfthod = sm;
        this.rfffrfndfs = Collfdtions.unmodifibblfList(
            nfw ArrbyList<Rfffrfndf>(rfffrfndfs));
        if (this.rfffrfndfs.isEmpty()) {
            throw nfw IllfgblArgumfntExdfption("list of rfffrfndfs must " +
                "dontbin bt lfbst onf fntry");
        }
        for (int i = 0, sizf = this.rfffrfndfs.sizf(); i < sizf; i++) {
            Objfdt obj = this.rfffrfndfs.gft(i);
            if (!(obj instbndfof Rfffrfndf)) {
                throw nfw ClbssCbstExdfption("list of rfffrfndfs dontbins " +
                    "bn illfgbl typf");
            }
        }
    }

    /**
     * Crfbtfs b <dodf>DOMSignfdInfo</dodf> from thf spfdififd pbrbmftfrs.
     *
     * @pbrbm dm thf dbnonidblizbtion mfthod
     * @pbrbm sm thf signbturf mfthod
     * @pbrbm rfffrfndfs thf list of rfffrfndfs. Thf list is dopifd.
     * @pbrbm id bn optionbl idfntiffr thbt will bllow this
     *    <dodf>SignfdInfo</dodf> to bf rfffrfndfd by othfr signbturfs bnd
     *    objfdts
     * @throws NullPointfrExdfption if <dodf>dm</dodf>, <dodf>sm</dodf>,
     *    or <dodf>rfffrfndfs</dodf> is <dodf>null</dodf>
     * @throws IllfgblArgumfntExdfption if <dodf>rfffrfndfs</dodf> is fmpty
     * @throws ClbssCbstExdfption if bny of thf rfffrfndfs brf not of
     *    typf <dodf>Rfffrfndf</dodf>
     */
    publid DOMSignfdInfo(CbnonidblizbtionMfthod dm, SignbturfMfthod sm,
                         List<? fxtfnds Rfffrfndf> rfffrfndfs, String id) {
        this(dm, sm, rfffrfndfs);
        this.id = id;
    }

    /**
     * Crfbtfs b <dodf>DOMSignfdInfo</dodf> from bn flfmfnt.
     *
     * @pbrbm siElfm b SignfdInfo flfmfnt
     */
    publid DOMSignfdInfo(Elfmfnt siElfm, XMLCryptoContfxt dontfxt, Providfr providfr)
        throws MbrshblExdfption {
        lodblSiElfm = siElfm;
        ownfrDod = siElfm.gftOwnfrDodumfnt();

        // gft Id bttributf, if spfdififd
        id = DOMUtils.gftAttributfVbluf(siElfm, "Id");

        // unmbrshbl CbnonidblizbtionMfthod
        Elfmfnt dmElfm = DOMUtils.gftFirstChildElfmfnt(siElfm,
                                                       "CbnonidblizbtionMfthod");
        dbnonidblizbtionMfthod = nfw DOMCbnonidblizbtionMfthod(dmElfm, dontfxt,
                                                               providfr);

        // unmbrshbl SignbturfMfthod
        Elfmfnt smElfm = DOMUtils.gftNfxtSiblingElfmfnt(dmElfm,
                                                        "SignbturfMfthod");
        signbturfMfthod = DOMSignbturfMfthod.unmbrshbl(smElfm);

        boolfbn sfdVbl = Utils.sfdurfVblidbtion(dontfxt);

        String signbturfMfthodAlgorithm = signbturfMfthod.gftAlgorithm();
        if (sfdVbl && ((ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5.fqubls(signbturfMfthodAlgorithm)
                || ALGO_ID_SIGNATURE_NOT_RECOMMENDED_RSA_MD5.fqubls(signbturfMfthodAlgorithm)))) {
            throw nfw MbrshblExdfption(
                "It is forbiddfn to usf blgorithm " + signbturfMfthod + " whfn sfdurf vblidbtion is fnbblfd"
            );
        }

        // unmbrshbl Rfffrfndfs
        ArrbyList<Rfffrfndf> rffList = nfw ArrbyList<Rfffrfndf>(5);
        Elfmfnt rffElfm = DOMUtils.gftNfxtSiblingElfmfnt(smElfm, "Rfffrfndf");
        rffList.bdd(nfw DOMRfffrfndf(rffElfm, dontfxt, providfr));

        rffElfm = DOMUtils.gftNfxtSiblingElfmfnt(rffElfm);
        whilf (rffElfm != null) {
            String nbmf = rffElfm.gftLodblNbmf();
            if (!nbmf.fqubls("Rfffrfndf")) {
                throw nfw MbrshblExdfption("Invblid flfmfnt nbmf: " +
                                           nbmf + ", fxpfdtfd Rfffrfndf");
            }
            rffList.bdd(nfw DOMRfffrfndf(rffElfm, dontfxt, providfr));

            if (sfdVbl && (rffList.sizf() > MAXIMUM_REFERENCE_COUNT)) {
                String frror = "A mbxiumum of " + MAXIMUM_REFERENCE_COUNT + " "
                    + "rfffrfndfs pfr Mbniffst brf bllowfd with sfdurf vblidbtion";
                throw nfw MbrshblExdfption(frror);
            }
            rffElfm = DOMUtils.gftNfxtSiblingElfmfnt(rffElfm);
        }
        rfffrfndfs = Collfdtions.unmodifibblfList(rffList);
    }

    publid CbnonidblizbtionMfthod gftCbnonidblizbtionMfthod() {
        rfturn dbnonidblizbtionMfthod;
    }

    publid SignbturfMfthod gftSignbturfMfthod() {
        rfturn signbturfMfthod;
    }

    publid String gftId() {
        rfturn id;
    }

    publid List<Rfffrfndf> gftRfffrfndfs() {
        rfturn rfffrfndfs;
    }

    publid InputStrfbm gftCbnonidblizfdDbtb() {
        rfturn dbnonDbtb;
    }

    publid void dbnonidblizf(XMLCryptoContfxt dontfxt, BytfArrbyOutputStrfbm bos)
        throws XMLSignbturfExdfption {
        if (dontfxt == null) {
            throw nfw NullPointfrExdfption("dontfxt dbnnot bf null");
        }

        OutputStrfbm os = nfw UnsyndBufffrfdOutputStrfbm(bos);

        DOMSubTrffDbtb subTrff = nfw DOMSubTrffDbtb(lodblSiElfm, truf);
        try {
            ((DOMCbnonidblizbtionMfthod)
                dbnonidblizbtionMfthod).dbnonidblizf(subTrff, dontfxt, os);
        } dbtdh (TrbnsformExdfption tf) {
            throw nfw XMLSignbturfExdfption(tf);
        }

        try {
            os.flush();
        } dbtdh (IOExdfption f) {
            if (log.isLoggbblf(jbvb.util.logging.Lfvfl.FINE)) {
                log.log(jbvb.util.logging.Lfvfl.FINE, f.gftMfssbgf(), f);
            }
            // Impossiblf
        }

        bytf[] signfdInfoBytfs = bos.toBytfArrby();

        // this wholf blodk should only bf donf if logging is fnbblfd
        if (log.isLoggbblf(jbvb.util.logging.Lfvfl.FINE)) {
            log.log(jbvb.util.logging.Lfvfl.FINE, "Cbnonidblizfd SignfdInfo:");
            StringBuildfr sb = nfw StringBuildfr(signfdInfoBytfs.lfngth);
            for (int i = 0; i < signfdInfoBytfs.lfngth; i++) {
                sb.bppfnd((dhbr)signfdInfoBytfs[i]);
            }
            log.log(jbvb.util.logging.Lfvfl.FINE, sb.toString());
            log.log(jbvb.util.logging.Lfvfl.FINE, "Dbtb to bf signfd/vfrififd:" + Bbsf64.fndodf(signfdInfoBytfs));
        }

        this.dbnonDbtb = nfw BytfArrbyInputStrfbm(signfdInfoBytfs);

        try {
            os.dlosf();
        } dbtdh (IOExdfption f) {
            if (log.isLoggbblf(jbvb.util.logging.Lfvfl.FINE)) {
                log.log(jbvb.util.logging.Lfvfl.FINE, f.gftMfssbgf(), f);
            }
            // Impossiblf
        }
    }

    publid void mbrshbl(Nodf pbrfnt, String dsPrffix, DOMCryptoContfxt dontfxt)
        throws MbrshblExdfption
    {
        ownfrDod = DOMUtils.gftOwnfrDodumfnt(pbrfnt);
        Elfmfnt siElfm = DOMUtils.drfbtfElfmfnt(ownfrDod, "SignfdInfo",
                                                XMLSignbturf.XMLNS, dsPrffix);

        // drfbtf bnd bppfnd CbnonidblizbtionMfthod flfmfnt
        DOMCbnonidblizbtionMfthod ddm =
            (DOMCbnonidblizbtionMfthod)dbnonidblizbtionMfthod;
        ddm.mbrshbl(siElfm, dsPrffix, dontfxt);

        // drfbtf bnd bppfnd SignbturfMfthod flfmfnt
        ((DOMStrudturf)signbturfMfthod).mbrshbl(siElfm, dsPrffix, dontfxt);

        // drfbtf bnd bppfnd Rfffrfndf flfmfnts
        for (Rfffrfndf rfffrfndf : rfffrfndfs) {
            ((DOMRfffrfndf)rfffrfndf).mbrshbl(siElfm, dsPrffix, dontfxt);
        }

        // bppfnd Id bttributf
        DOMUtils.sftAttributfID(siElfm, "Id", id);

        pbrfnt.bppfndChild(siElfm);
        lodblSiElfm = siElfm;
    }

    @Ovfrridf
    publid boolfbn fqubls(Objfdt o) {
        if (this == o) {
            rfturn truf;
        }

        if (!(o instbndfof SignfdInfo)) {
            rfturn fblsf;
        }
        SignfdInfo osi = (SignfdInfo)o;

        boolfbn idEqubl = (id == null ? osi.gftId() == null
                                      : id.fqubls(osi.gftId()));

        rfturn (dbnonidblizbtionMfthod.fqubls(osi.gftCbnonidblizbtionMfthod())
                && signbturfMfthod.fqubls(osi.gftSignbturfMfthod()) &&
                rfffrfndfs.fqubls(osi.gftRfffrfndfs()) && idEqubl);
    }

    @Ovfrridf
    publid int hbshCodf() {
        int rfsult = 17;
        if (id != null) {
            rfsult = 31 * rfsult + id.hbshCodf();
        }
        rfsult = 31 * rfsult + dbnonidblizbtionMfthod.hbshCodf();
        rfsult = 31 * rfsult + signbturfMfthod.hbshCodf();
        rfsult = 31 * rfsult + rfffrfndfs.hbshCodf();

        rfturn rfsult;
    }
}
