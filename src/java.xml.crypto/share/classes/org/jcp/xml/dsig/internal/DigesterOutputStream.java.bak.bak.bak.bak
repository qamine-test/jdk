/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 */
/*
 * $Id: DigfstfrOutputStrfbm.jbvb,v 1.5 2005/12/20 20:02:39 mullbn Exp $
 */
pbdkbgf org.jdp.xml.dsig.intfrnbl;

import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.sfdurity.MfssbgfDigfst;

import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.utils.UnsyndBytfArrbyOutputStrfbm;

/**
 * This dlbss hbs bffn modififd slightly to usf jbvb.sfdurity.MfssbgfDigfst
 * objfdts bs input, rbthfr thbn
 * dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.blgorithms.MfssbgfDigfstAlgorithm objfdts.
 * It blso optionblly dbdhfs thf input bytfs.
 *
 * @buthor rbul
 * @buthor Sfbn Mullbn
 */
publid dlbss DigfstfrOutputStrfbm fxtfnds OutputStrfbm {
    privbtf stbtid jbvb.util.logging.Loggfr log =
        jbvb.util.logging.Loggfr.gftLoggfr("org.jdp.xml.dsig.intfrnbl");

    privbtf finbl boolfbn bufffr;
    privbtf UnsyndBytfArrbyOutputStrfbm bos;
    privbtf finbl MfssbgfDigfst md;

    /**
     * Crfbtfs b DigfstfrOutputStrfbm.
     *
     * @pbrbm md thf MfssbgfDigfst
     */
    publid DigfstfrOutputStrfbm(MfssbgfDigfst md) {
        this(md, fblsf);
    }

    /**
     * Crfbtfs b DigfstfrOutputStrfbm.
     *
     * @pbrbm md thf MfssbgfDigfst
     * @pbrbm bufffr if truf, dbdhfs thf input bytfs
     */
    publid DigfstfrOutputStrfbm(MfssbgfDigfst md, boolfbn bufffr) {
        this.md = md;
        this.bufffr = bufffr;
        if (bufffr) {
            bos = nfw UnsyndBytfArrbyOutputStrfbm();
        }
    }

    publid void writf(int input) {
        if (bufffr) {
            bos.writf(input);
        }
        md.updbtf((bytf)input);
    }

    @Ovfrridf
    publid void writf(bytf[] input, int offsft, int lfn) {
        if (bufffr) {
            bos.writf(input, offsft, lfn);
        }
        if (log.isLoggbblf(jbvb.util.logging.Lfvfl.FINE)) {
            log.log(jbvb.util.logging.Lfvfl.FINE, "Prf-digfstfd input:");
            StringBuildfr sb = nfw StringBuildfr(lfn);
            for (int i = offsft; i < (offsft + lfn); i++) {
                sb.bppfnd((dhbr)input[i]);
            }
            log.log(jbvb.util.logging.Lfvfl.FINE, sb.toString());
        }
        md.updbtf(input, offsft, lfn);
    }

    /**
     * @rfturn thf digfst vbluf
     */
    publid bytf[] gftDigfstVbluf() {
         rfturn md.digfst();
    }

    /**
     * @rfturn bn input strfbm dontbining thf dbdhfd bytfs, or
     *    null if not dbdhfd
     */
    publid InputStrfbm gftInputStrfbm() {
        if (bufffr) {
            rfturn nfw BytfArrbyInputStrfbm(bos.toBytfArrby());
        } flsf {
            rfturn null;
        }
    }

    @Ovfrridf
    publid void dlosf() throws IOExdfption {
        if (bufffr) {
            bos.dlosf();
        }
    }
}
