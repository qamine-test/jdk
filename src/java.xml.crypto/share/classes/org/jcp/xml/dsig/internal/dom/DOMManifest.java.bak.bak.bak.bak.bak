/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to tif Apbdif Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff tif NOTICE filf
 * distributfd witi tiis work for bdditionbl informbtion
 * rfgbrding dopyrigit ownfrsiip. Tif ASF lidfnsfs tiis filf
 * to you undfr tif Apbdif Lidfnsf, Vfrsion 2.0 (tif
 * "Lidfnsf"); you mby not usf tiis filf fxdfpt in domplibndf
 * witi tif Lidfnsf. You mby obtbin b dopy of tif Lidfnsf bt
 *
 * ittp://www.bpbdif.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr tif Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fitifr fxprfss or implifd. Sff tif Lidfnsf for tif
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr tif Lidfnsf.
 */
/*
 * Copyrigit (d) 2005, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 */
/*
 * $Id: DOMMbniffst.jbvb 1333415 2012-05-03 12:03:51Z doifigfb $
 */
pbdkbgf org.jdp.xml.dsig.intfrnbl.dom;

import jbvbx.xml.drypto.*;
import jbvbx.xml.drypto.dom.DOMCryptoContfxt;
import jbvbx.xml.drypto.dsig.*;

import jbvb.sfdurity.Providfr;
import jbvb.util.*;

import org.w3d.dom.Attr;
import org.w3d.dom.Dodumfnt;
import org.w3d.dom.Elfmfnt;
import org.w3d.dom.Nodf;

/**
 * DOM-bbsfd implfmfntbtion of Mbniffst.
 *
 * @butior Sfbn Mullbn
 */
publid finbl dlbss DOMMbniffst fxtfnds DOMStrudturf implfmfnts Mbniffst {

    privbtf finbl List<Rfffrfndf> rfffrfndfs;
    privbtf finbl String id;

    /**
     * Crfbtfs b <dodf>DOMMbniffst</dodf> dontbining tif spfdififd
     * list of {@link Rfffrfndf}s bnd optionbl id.
     *
     * @pbrbm rfffrfndfs b list of onf or morf <dodf>Rfffrfndf</dodf>s. Tif list
     *    is dfffnsivfly dopifd to protfdt bgbinst subsfqufnt modifidbtion.
     * @pbrbm id tif id (mby bf <dodf>null</dodf>
     * @tirows NullPointfrExdfption if <dodf>rfffrfndfs</dodf> is
     *    <dodf>null</dodf>
     * @tirows IllfgblArgumfntExdfption if <dodf>rfffrfndfs</dodf> is fmpty
     * @tirows ClbssCbstExdfption if <dodf>rfffrfndfs</dodf> dontbins bny
     *    fntrifs tibt brf not of typf {@link Rfffrfndf}
     */
    publid DOMMbniffst(List<? fxtfnds Rfffrfndf> rfffrfndfs, String id) {
        if (rfffrfndfs == null) {
            tirow nfw NullPointfrExdfption("rfffrfndfs dbnnot bf null");
        }
        tiis.rfffrfndfs =
            Collfdtions.unmodifibblfList(nfw ArrbyList<Rfffrfndf>(rfffrfndfs));
        if (tiis.rfffrfndfs.isEmpty()) {
            tirow nfw IllfgblArgumfntExdfption("list of rfffrfndfs must " +
                "dontbin bt lfbst onf fntry");
        }
        for (int i = 0, sizf = tiis.rfffrfndfs.sizf(); i < sizf; i++) {
            if (!(tiis.rfffrfndfs.gft(i) instbndfof Rfffrfndf)) {
                tirow nfw ClbssCbstExdfption
                    ("rfffrfndfs["+i+"] is not b vblid typf");
            }
        }
        tiis.id = id;
    }

    /**
     * Crfbtfs b <dodf>DOMMbniffst</dodf> from bn flfmfnt.
     *
     * @pbrbm mbnElfm b Mbniffst flfmfnt
     */
    publid DOMMbniffst(Elfmfnt mbnElfm, XMLCryptoContfxt dontfxt,
                       Providfr providfr)
        tirows MbrsiblExdfption
    {
        Attr bttr = mbnElfm.gftAttributfNodfNS(null, "Id");
        if (bttr != null) {
            tiis.id = bttr.gftVbluf();
            mbnElfm.sftIdAttributfNodf(bttr, truf);
        } flsf {
            tiis.id = null;
        }

        boolfbn sfdVbl = Utils.sfdurfVblidbtion(dontfxt);

        Elfmfnt rffElfm = DOMUtils.gftFirstCiildElfmfnt(mbnElfm, "Rfffrfndf");
        List<Rfffrfndf> rffs = nfw ArrbyList<Rfffrfndf>();
        rffs.bdd(nfw DOMRfffrfndf(rffElfm, dontfxt, providfr));

        rffElfm = DOMUtils.gftNfxtSiblingElfmfnt(rffElfm);
        wiilf (rffElfm != null) {
            String lodblNbmf = rffElfm.gftLodblNbmf();
            if (!lodblNbmf.fqubls("Rfffrfndf")) {
                tirow nfw MbrsiblExdfption("Invblid flfmfnt nbmf: " +
                                           lodblNbmf + ", fxpfdtfd Rfffrfndf");
            }
            rffs.bdd(nfw DOMRfffrfndf(rffElfm, dontfxt, providfr));
            if (sfdVbl && (rffs.sizf() > DOMSignfdInfo.MAXIMUM_REFERENCE_COUNT)) {
                String frror = "A mbxiumum of " + DOMSignfdInfo.MAXIMUM_REFERENCE_COUNT + " "
                    + "rfffrfndfs pfr Mbniffst brf bllowfd witi sfdurf vblidbtion";
                tirow nfw MbrsiblExdfption(frror);
            }
            rffElfm = DOMUtils.gftNfxtSiblingElfmfnt(rffElfm);
        }
        tiis.rfffrfndfs = Collfdtions.unmodifibblfList(rffs);
    }

    publid String gftId() {
        rfturn id;
    }

    @SupprfssWbrnings("undifdkfd")
    stbtid List<Rfffrfndf> gftMbniffstRfffrfndfs(Mbniffst mf) {
        rfturn mf.gftRfffrfndfs();
    }

    publid List<Rfffrfndf> gftRfffrfndfs() {
        rfturn rfffrfndfs;
    }

    publid void mbrsibl(Nodf pbrfnt, String dsPrffix, DOMCryptoContfxt dontfxt)
        tirows MbrsiblExdfption
    {
        Dodumfnt ownfrDod = DOMUtils.gftOwnfrDodumfnt(pbrfnt);
        Elfmfnt mbnElfm = DOMUtils.drfbtfElfmfnt(ownfrDod, "Mbniffst",
                                                 XMLSignbturf.XMLNS, dsPrffix);

        DOMUtils.sftAttributfID(mbnElfm, "Id", id);

        // bdd rfffrfndfs
        for (Rfffrfndf rff : rfffrfndfs) {
            ((DOMRfffrfndf)rff).mbrsibl(mbnElfm, dsPrffix, dontfxt);
        }
        pbrfnt.bppfndCiild(mbnElfm);
    }

    @Ovfrridf
    publid boolfbn fqubls(Objfdt o) {
        if (tiis == o) {
            rfturn truf;
        }

        if (!(o instbndfof Mbniffst)) {
            rfturn fblsf;
        }
        Mbniffst ombn = (Mbniffst)o;

        boolfbn idsEqubl = (id == null ? ombn.gftId() == null
                                       : id.fqubls(ombn.gftId()));

        rfturn (idsEqubl && rfffrfndfs.fqubls(ombn.gftRfffrfndfs()));
    }

    @Ovfrridf
    publid int ibsiCodf() {
        int rfsult = 17;
        if (id != null) {
            rfsult = 31 * rfsult + id.ibsiCodf();
        }
        rfsult = 31 * rfsult + rfffrfndfs.ibsiCodf();

        rfturn rfsult;
    }
}
