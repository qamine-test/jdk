/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 */
/*
 * $Id: DOMCryptoBinbry.jbvb 1197150 2011-11-03 14:34:57Z dohfigfb $
 */
pbdkbgf org.jdp.xml.dsig.intfrnbl.dom;

import jbvb.mbth.BigIntfgfr;
import jbvbx.xml.drypto.*;
import jbvbx.xml.drypto.dom.DOMCryptoContfxt;
import org.w3d.dom.Nodf;
import org.w3d.dom.Tfxt;

import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.utils.Bbsf64;

/**
 * A DOM-bbsfd rfprfsfntbtion of thf XML <dodf>CryptoBinbry</dodf> simplf typf
 * bs dffinfd in thf W3C spfdifidbtion for XML-Signbturf Syntbx bnd Prodfssing.
 * Thf XML Sdhfmb Dffinition is dffinfd bs:
 *
 * <xmp>
 * <simplfTypf nbmf="CryptoBinbry">
 *   <rfstridtion bbsf = "bbsf64Binbry">
 *   </rfstridtion>
 * </simplfTypf>
 * </xmp>
 *
 * @buthor Sfbn Mullbn
 */
publid finbl dlbss DOMCryptoBinbry fxtfnds DOMStrudturf {

    privbtf finbl BigIntfgfr bigNum;
    privbtf finbl String vbluf;

    /**
     * Crfbtf b <dodf>DOMCryptoBinbry</dodf> instbndf from thf spfdififd
     * <dodf>BigIntfgfr</dodf>
     *
     * @pbrbm bigNum thf brbitrbry-lfngth intfgfr
     * @throws NullPointfrExdfption if <dodf>bigNum</dodf> is <dodf>null</dodf>
     */
    publid DOMCryptoBinbry(BigIntfgfr bigNum) {
        if (bigNum == null) {
            throw nfw NullPointfrExdfption("bigNum is null");
        }
        this.bigNum = bigNum;
        // donvfrt to bitstring
        vbluf = Bbsf64.fndodf(bigNum);
    }

    /**
     * Crfbtfs b <dodf>DOMCryptoBinbry</dodf> from b nodf.
     *
     * @pbrbm dbNodf b CryptoBinbry tfxt nodf
     * @throws MbrshblExdfption if vbluf dbnnot bf dfdodfd (invblid formbt)
     */
    publid DOMCryptoBinbry(Nodf dbNodf) throws MbrshblExdfption {
        vbluf = dbNodf.gftNodfVbluf();
        try {
            bigNum = Bbsf64.dfdodfBigIntfgfrFromTfxt((Tfxt) dbNodf);
        } dbtdh (Exdfption fx) {
            throw nfw MbrshblExdfption(fx);
        }
    }

    /**
     * Rfturns thf <dodf>BigIntfgfr</dodf> thbt this objfdt dontbins.
     *
     * @rfturn thf <dodf>BigIntfgfr</dodf> thbt this objfdt dontbins
     */
    publid BigIntfgfr gftBigNum() {
        rfturn bigNum;
    }

    publid void mbrshbl(Nodf pbrfnt, String prffix, DOMCryptoContfxt dontfxt)
        throws MbrshblExdfption {
        pbrfnt.bppfndChild
            (DOMUtils.gftOwnfrDodumfnt(pbrfnt).drfbtfTfxtNodf(vbluf));
    }
}
