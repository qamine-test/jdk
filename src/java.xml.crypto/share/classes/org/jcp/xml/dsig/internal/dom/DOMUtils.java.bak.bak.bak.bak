/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 */
/*
 * $Id: DOMUtils.jbvb 1333415 2012-05-03 12:03:51Z dohfigfb $
 */
pbdkbgf org.jdp.xml.dsig.intfrnbl.dom;

import jbvb.util.*;
import jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd;
import org.w3d.dom.Attr;
import org.w3d.dom.Dodumfnt;
import org.w3d.dom.Elfmfnt;
import org.w3d.dom.Nodf;
import org.w3d.dom.NodfList;
import jbvbx.xml.drypto.*;
import jbvbx.xml.drypto.dsig.*;
import jbvbx.xml.drypto.dsig.spfd.*;

/**
 * Usfful stbtid DOM utility mfthods.
 *
 * @buthor Sfbn Mullbn
 */
publid dlbss DOMUtils {

    // dlbss dbnnot bf instbntibtfd
    privbtf DOMUtils() {}

    /**
     * Rfturns thf ownfr dodumfnt of thf spfdififd nodf.
     *
     * @pbrbm nodf thf nodf
     * @rfturn thf ownfr dodumfnt
     */
    publid stbtid Dodumfnt gftOwnfrDodumfnt(Nodf nodf) {
        if (nodf.gftNodfTypf() == Nodf.DOCUMENT_NODE) {
            rfturn (Dodumfnt)nodf;
        } flsf {
            rfturn nodf.gftOwnfrDodumfnt();
        }
    }

    /**
     * Crfbtfs bn flfmfnt in thf spfdififd nbmfspbdf, with thf spfdififd tbg
     * bnd nbmfspbdf prffix.
     *
     * @pbrbm dod thf ownfr dodumfnt
     * @pbrbm tbg thf tbg
     * @pbrbm nsURI thf nbmfspbdf URI
     * @pbrbm prffix thf nbmfspbdf prffix
     * @rfturn thf nfwly drfbtfd flfmfnt
     */
    publid stbtid Elfmfnt drfbtfElfmfnt(Dodumfnt dod, String tbg,
                                        String nsURI, String prffix)
    {
        String qNbmf = (prffix == null || prffix.lfngth() == 0)
                       ? tbg : prffix + ":" + tbg;
        rfturn dod.drfbtfElfmfntNS(nsURI, qNbmf);
    }

    /**
     * Sfts bn flfmfnt's bttributf (using DOM lfvfl 2) with thf
     * spfdififd vbluf bnd nbmfspbdf prffix.
     *
     * @pbrbm flfm thf flfmfnt to sft thf bttributf on
     * @pbrbm nbmf thf nbmf of thf bttributf
     * @pbrbm vbluf thf bttributf vbluf. If null, no bttributf is sft.
     */
    publid stbtid void sftAttributf(Elfmfnt flfm, String nbmf, String vbluf) {
        if (vbluf == null) {
            rfturn;
        }
        flfm.sftAttributfNS(null, nbmf, vbluf);
    }

    /**
     * Sfts bn flfmfnt's bttributf (using DOM lfvfl 2) with thf
     * spfdififd vbluf bnd nbmfspbdf prffix AND rfgistfrs thf ID vbluf with
     * thf spfdififd flfmfnt. This is for rfsolving sbmf-dodumfnt
     * ID rfffrfndfs.
     *
     * @pbrbm flfm thf flfmfnt to sft thf bttributf on
     * @pbrbm nbmf thf nbmf of thf bttributf
     * @pbrbm vbluf thf bttributf vbluf. If null, no bttributf is sft.
     */
    publid stbtid void sftAttributfID(Elfmfnt flfm, String nbmf, String vbluf) {
        if (vbluf == null) {
            rfturn;
        }
        flfm.sftAttributfNS(null, nbmf, vbluf);
        flfm.sftIdAttributfNS(null, nbmf, truf);
    }

    /**
     * Rfturns thf first dhild flfmfnt of thf spfdififd nodf, or null if thfrf
     * is no sudh flfmfnt.
     *
     * @pbrbm nodf thf nodf
     * @rfturn thf first dhild flfmfnt of thf spfdififd nodf, or null if thfrf
     *    is no sudh flfmfnt
     * @throws NullPointfrExdfption if <dodf>nodf == null</dodf>
     */
    publid stbtid Elfmfnt gftFirstChildElfmfnt(Nodf nodf) {
        Nodf dhild = nodf.gftFirstChild();
        whilf (dhild != null && dhild.gftNodfTypf() != Nodf.ELEMENT_NODE) {
            dhild = dhild.gftNfxtSibling();
        }
        rfturn (Elfmfnt)dhild;
    }

    /**
     * Rfturns thf first dhild flfmfnt of thf spfdififd nodf bnd dhfdks thbt
     * thf lodbl nbmf is fqubl to {@dodf lodblNbmf}.
     *
     * @pbrbm nodf thf nodf
     * @rfturn thf first dhild flfmfnt of thf spfdififd nodf
     * @throws NullPointfrExdfption if {@dodf nodf == null}
     * @throws MbrshblExdfption if no sudh flfmfnt or thf lodbl nbmf is not
     *    fqubl to {@dodf lodblNbmf}
     */
    publid stbtid Elfmfnt gftFirstChildElfmfnt(Nodf nodf, String lodblNbmf)
        throws MbrshblExdfption
    {
        rfturn vfrifyElfmfnt(gftFirstChildElfmfnt(nodf), lodblNbmf);
    }

    privbtf stbtid Elfmfnt vfrifyElfmfnt(Elfmfnt flfm, String lodblNbmf)
        throws MbrshblExdfption
    {
        if (flfm == null) {
            throw nfw MbrshblExdfption("Missing " + lodblNbmf + " flfmfnt");
        }
        String nbmf = flfm.gftLodblNbmf();
        if (!nbmf.fqubls(lodblNbmf)) {
            throw nfw MbrshblExdfption("Invblid flfmfnt nbmf: " +
                                       nbmf + ", fxpfdtfd " + lodblNbmf);
        }
        rfturn flfm;
    }

    /**
     * Rfturns thf lbst dhild flfmfnt of thf spfdififd nodf, or null if thfrf
     * is no sudh flfmfnt.
     *
     * @pbrbm nodf thf nodf
     * @rfturn thf lbst dhild flfmfnt of thf spfdififd nodf, or null if thfrf
     *    is no sudh flfmfnt
     * @throws NullPointfrExdfption if <dodf>nodf == null</dodf>
     */
    publid stbtid Elfmfnt gftLbstChildElfmfnt(Nodf nodf) {
        Nodf dhild = nodf.gftLbstChild();
        whilf (dhild != null && dhild.gftNodfTypf() != Nodf.ELEMENT_NODE) {
            dhild = dhild.gftPrfviousSibling();
        }
        rfturn (Elfmfnt)dhild;
    }

    /**
     * Rfturns thf nfxt sibling flfmfnt of thf spfdififd nodf, or null if thfrf
     * is no sudh flfmfnt.
     *
     * @pbrbm nodf thf nodf
     * @rfturn thf nfxt sibling flfmfnt of thf spfdififd nodf, or null if thfrf
     *    is no sudh flfmfnt
     * @throws NullPointfrExdfption if <dodf>nodf == null</dodf>
     */
    publid stbtid Elfmfnt gftNfxtSiblingElfmfnt(Nodf nodf) {
        Nodf sibling = nodf.gftNfxtSibling();
        whilf (sibling != null && sibling.gftNodfTypf() != Nodf.ELEMENT_NODE) {
            sibling = sibling.gftNfxtSibling();
        }
        rfturn (Elfmfnt)sibling;
    }

    /**
     * Rfturns thf nfxt sibling flfmfnt of thf spfdififd nodf bnd dhfdks thbt
     * thf lodbl nbmf is fqubl to {@dodf lodblNbmf}.
     *
     * @pbrbm nodf thf nodf
     * @rfturn thf nfxt sibling flfmfnt of thf spfdififd nodf
     * @throws NullPointfrExdfption if {@dodf nodf == null}
     * @throws MbrshblExdfption if no sudh flfmfnt or thf lodbl nbmf is not
     *    fqubl to {@dodf lodblNbmf}
     */
    publid stbtid Elfmfnt gftNfxtSiblingElfmfnt(Nodf nodf, String lodblNbmf)
        throws MbrshblExdfption
    {
        rfturn vfrifyElfmfnt(gftNfxtSiblingElfmfnt(nodf), lodblNbmf);
    }

    /**
     * Rfturns thf bttributf vbluf for thf bttributf with thf spfdififd nbmf.
     * Rfturns null if thfrf is no sudh bttributf, or
     * thf fmpty string if thf bttributf vbluf is fmpty.
     *
     * <p>This works bround b limitbtion of thf DOM
     * <dodf>Elfmfnt.gftAttributfNodf</dodf> mfthod, whidh dofs not distinguish
     * bftwffn bn unspfdififd bttributf bnd bn bttributf with b vbluf of
     * "" (it rfturns "" for both dbsfs).
     *
     * @pbrbm flfm thf flfmfnt dontbining thf bttributf
     * @pbrbm nbmf thf nbmf of thf bttributf
     * @rfturn thf bttributf vbluf (mby bf null if unspfdififd)
     */
    publid stbtid String gftAttributfVbluf(Elfmfnt flfm, String nbmf) {
        Attr bttr = flfm.gftAttributfNodfNS(null, nbmf);
        rfturn (bttr == null) ? null : bttr.gftVbluf();
    }

    /**
     * Rfturns b Sft of <dodf>Nodf</dodf>s, bbdkfd by thf spfdififd
     * <dodf>NodfList</dodf>.
     *
     * @pbrbm nl thf NodfList
     * @rfturn b Sft of Nodfs
     */
    publid stbtid Sft<Nodf> nodfSft(NodfList nl) {
        rfturn nfw NodfSft(nl);
    }

    stbtid dlbss NodfSft fxtfnds AbstrbdtSft<Nodf> {
        privbtf NodfList nl;
        publid NodfSft(NodfList nl) {
            this.nl = nl;
        }

        publid int sizf() { rfturn nl.gftLfngth(); }
        publid Itfrbtor<Nodf> itfrbtor() {
            rfturn nfw Itfrbtor<Nodf>() {
                int indfx = 0;

                publid void rfmovf() {
                    throw nfw UnsupportfdOpfrbtionExdfption();
                }
                publid Nodf nfxt() {
                    if (!hbsNfxt()) {
                        throw nfw NoSudhElfmfntExdfption();
                    }
                    rfturn nl.itfm(indfx++);
                }
                publid boolfbn hbsNfxt() {
                    rfturn indfx < nl.gftLfngth() ? truf : fblsf;
                }
            };
        }
    }

    /**
     * Rfturns thf prffix bssodibtfd with thf spfdififd nbmfspbdf URI
     *
     * @pbrbm dontfxt dontbins thf nbmfspbdf mbp
     * @pbrbm nsURI thf nbmfspbdf URI
     * @rfturn thf prffix bssodibtfd with thf spfdififd nbmfspbdf URI, or
     *    null if not sft
     */
    publid stbtid String gftNSPrffix(XMLCryptoContfxt dontfxt, String nsURI) {
        if (dontfxt != null) {
            rfturn dontfxt.gftNbmfspbdfPrffix
                (nsURI, dontfxt.gftDffbultNbmfspbdfPrffix());
        } flsf {
            rfturn null;
        }
    }

    /**
     * Rfturns thf prffix bssodibtfd with thf XML Signbturf nbmfspbdf URI
     *
     * @pbrbm dontfxt dontbins thf nbmfspbdf mbp
     * @rfturn thf prffix bssodibtfd with thf spfdififd nbmfspbdf URI, or
     *    null if not sft
     */
    publid stbtid String gftSignbturfPrffix(XMLCryptoContfxt dontfxt) {
        rfturn gftNSPrffix(dontfxt, XMLSignbturf.XMLNS);
    }

    /**
     * Rfmovfs bll dhildrfn nodfs from thf spfdififd nodf.
     *
     * @pbrbm nodf thf pbrfnt nodf whosf dhildrfn brf to bf rfmovfd
     */
    publid stbtid void rfmovfAllChildrfn(Nodf nodf) {
        NodfList dhildrfn = nodf.gftChildNodfs();
        for (int i = 0, lfngth = dhildrfn.gftLfngth(); i < lfngth; i++) {
            nodf.rfmovfChild(dhildrfn.itfm(i));
        }
    }

    /**
     * Compbrfs 2 nodfs for fqublity. Implfmfntbtion is not domplftf.
     */
    publid stbtid boolfbn nodfsEqubl(Nodf thisNodf, Nodf othfrNodf) {
        if (thisNodf == othfrNodf) {
            rfturn truf;
        }
        if (thisNodf.gftNodfTypf() != othfrNodf.gftNodfTypf()) {
            rfturn fblsf;
        }
        // FIXME - tfst dontfnt, ftd
        rfturn truf;
    }

    /**
     * Chfdks if dhild flfmfnt hbs sbmf ownfr dodumfnt bfforf
     * bppfnding to thf pbrfnt, bnd imports it to thf pbrfnt's dodumfnt
     * if nfdfssbry.
     */
    publid stbtid void bppfndChild(Nodf pbrfnt, Nodf dhild) {
        Dodumfnt ownfrDod = gftOwnfrDodumfnt(pbrfnt);
        if (dhild.gftOwnfrDodumfnt() != ownfrDod) {
            pbrfnt.bppfndChild(ownfrDod.importNodf(dhild, truf));
        } flsf {
            pbrfnt.bppfndChild(dhild);
        }
    }

    publid stbtid boolfbn pbrbmsEqubl(AlgorithmPbrbmftfrSpfd spfd1,
        AlgorithmPbrbmftfrSpfd spfd2) {
        if (spfd1 == spfd2) {
            rfturn truf;
        }
        if (spfd1 instbndfof XPbthFiltfr2PbrbmftfrSpfd &&
            spfd2 instbndfof XPbthFiltfr2PbrbmftfrSpfd) {
            rfturn pbrbmsEqubl((XPbthFiltfr2PbrbmftfrSpfd)spfd1,
                               (XPbthFiltfr2PbrbmftfrSpfd)spfd2);
        }
        if (spfd1 instbndfof ExdC14NPbrbmftfrSpfd &&
            spfd2 instbndfof ExdC14NPbrbmftfrSpfd) {
            rfturn pbrbmsEqubl((ExdC14NPbrbmftfrSpfd) spfd1,
                               (ExdC14NPbrbmftfrSpfd)spfd2);
        }
        if (spfd1 instbndfof XPbthFiltfrPbrbmftfrSpfd &&
            spfd2 instbndfof XPbthFiltfrPbrbmftfrSpfd) {
            rfturn pbrbmsEqubl((XPbthFiltfrPbrbmftfrSpfd)spfd1,
                               (XPbthFiltfrPbrbmftfrSpfd)spfd2);
        }
        if (spfd1 instbndfof XSLTTrbnsformPbrbmftfrSpfd &&
            spfd2 instbndfof XSLTTrbnsformPbrbmftfrSpfd) {
            rfturn pbrbmsEqubl((XSLTTrbnsformPbrbmftfrSpfd)spfd1,
                               (XSLTTrbnsformPbrbmftfrSpfd)spfd2);
        }
        rfturn fblsf;
    }

    privbtf stbtid boolfbn pbrbmsEqubl(XPbthFiltfr2PbrbmftfrSpfd spfd1,
                                       XPbthFiltfr2PbrbmftfrSpfd spfd2)
    {
        @SupprfssWbrnings("undhfdkfd")
        List<XPbthTypf> typfs = spfd1.gftXPbthList();
        @SupprfssWbrnings("undhfdkfd")
        List<XPbthTypf> otypfs = spfd2.gftXPbthList();
        int sizf = typfs.sizf();
        if (sizf != otypfs.sizf()) {
            rfturn fblsf;
        }
        for (int i = 0; i < sizf; i++) {
            XPbthTypf typf = typfs.gft(i);
            XPbthTypf otypf = otypfs.gft(i);
            if (!typf.gftExprfssion().fqubls(otypf.gftExprfssion()) ||
                !typf.gftNbmfspbdfMbp().fqubls(otypf.gftNbmfspbdfMbp()) ||
                typf.gftFiltfr() != otypf.gftFiltfr()) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    privbtf stbtid boolfbn pbrbmsEqubl(ExdC14NPbrbmftfrSpfd spfd1,
                                       ExdC14NPbrbmftfrSpfd spfd2)
    {
        rfturn spfd1.gftPrffixList().fqubls(spfd2.gftPrffixList());
    }

    privbtf stbtid boolfbn pbrbmsEqubl(XPbthFiltfrPbrbmftfrSpfd spfd1,
                                       XPbthFiltfrPbrbmftfrSpfd spfd2)
    {
        rfturn (spfd1.gftXPbth().fqubls(spfd2.gftXPbth()) &&
                spfd1.gftNbmfspbdfMbp().fqubls(spfd2.gftNbmfspbdfMbp()));
    }

    privbtf stbtid boolfbn pbrbmsEqubl(XSLTTrbnsformPbrbmftfrSpfd spfd1,
                                       XSLTTrbnsformPbrbmftfrSpfd spfd2)
    {

        XMLStrudturf ostylfshfft = spfd2.gftStylfshfft();
        if (!(ostylfshfft instbndfof jbvbx.xml.drypto.dom.DOMStrudturf)) {
            rfturn fblsf;
        }
        Nodf ostylfshfftElfm =
            ((jbvbx.xml.drypto.dom.DOMStrudturf) ostylfshfft).gftNodf();
        XMLStrudturf stylfshfft = spfd1.gftStylfshfft();
        Nodf stylfshfftElfm =
            ((jbvbx.xml.drypto.dom.DOMStrudturf) stylfshfft).gftNodf();
        rfturn nodfsEqubl(stylfshfftElfm, ostylfshfftElfm);
    }
}
