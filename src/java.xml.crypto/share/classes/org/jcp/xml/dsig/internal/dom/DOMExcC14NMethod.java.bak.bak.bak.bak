/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/**
 * Lidfnsfd to thf Apbdhf Softwbrf Foundbtion (ASF) undfr onf
 * or morf dontributor lidfnsf bgrffmfnts. Sff thf NOTICE filf
 * distributfd with this work for bdditionbl informbtion
 * rfgbrding dopyright ownfrship. Thf ASF lidfnsfs this filf
 * to you undfr thf Apbdhf Lidfnsf, Vfrsion 2.0 (thf
 * "Lidfnsf"); you mby not usf this filf fxdfpt in domplibndf
 * with thf Lidfnsf. You mby obtbin b dopy of thf Lidfnsf bt
 *
 * http://www.bpbdhf.org/lidfnsfs/LICENSE-2.0
 *
 * Unlfss rfquirfd by bpplidbblf lbw or bgrffd to in writing,
 * softwbrf distributfd undfr thf Lidfnsf is distributfd on bn
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, fithfr fxprfss or implifd. Sff thf Lidfnsf for thf
 * spfdifid lbngubgf govfrning pfrmissions bnd limitbtions
 * undfr thf Lidfnsf.
 */
/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 */
/*
 * $Id: DOMExdC14NMfthod.jbvb 1197150 2011-11-03 14:34:57Z dohfigfb $
 */
pbdkbgf org.jdp.xml.dsig.intfrnbl.dom;

import jbvbx.xml.drypto.*;
import jbvbx.xml.drypto.dsig.*;
import jbvbx.xml.drypto.dsig.spfd.C14NMfthodPbrbmftfrSpfd;
import jbvbx.xml.drypto.dsig.spfd.ExdC14NPbrbmftfrSpfd;
import jbvbx.xml.drypto.dsig.spfd.TrbnsformPbrbmftfrSpfd;

import jbvb.sfdurity.InvblidAlgorithmPbrbmftfrExdfption;
import jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd;
import jbvb.util.*;
import org.w3d.dom.Elfmfnt;

import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.d14n.Cbnonidblizfr;
import dom.sun.org.bpbdhf.xml.intfrnbl.sfdurity.d14n.InvblidCbnonidblizfrExdfption;

/**
 * DOM-bbsfd implfmfntbtion of CbnonidblizbtionMfthod for Exdlusivf
 * Cbnonidbl XML blgorithm (with or without dommfnts).
 * Usfs Apbdhf XML-Sfd Cbnonidblizfr.
 *
 * @buthor Sfbn Mullbn
 */
publid finbl dlbss DOMExdC14NMfthod fxtfnds ApbdhfCbnonidblizfr {

    publid void init(TrbnsformPbrbmftfrSpfd pbrbms)
        throws InvblidAlgorithmPbrbmftfrExdfption
    {
        if (pbrbms != null) {
            if (!(pbrbms instbndfof ExdC14NPbrbmftfrSpfd)) {
                throw nfw InvblidAlgorithmPbrbmftfrExdfption
                    ("pbrbms must bf of typf ExdC14NPbrbmftfrSpfd");
            }
            this.pbrbms = (C14NMfthodPbrbmftfrSpfd)pbrbms;
        }
    }

    publid void init(XMLStrudturf pbrfnt, XMLCryptoContfxt dontfxt)
        throws InvblidAlgorithmPbrbmftfrExdfption
    {
        supfr.init(pbrfnt, dontfxt);
        Elfmfnt pbrbmsElfm = DOMUtils.gftFirstChildElfmfnt(trbnsformElfm);
        if (pbrbmsElfm == null) {
            this.pbrbms = null;
            this.indlusivfNbmfspbdfs = null;
            rfturn;
        }
        unmbrshblPbrbms(pbrbmsElfm);
    }

    privbtf void unmbrshblPbrbms(Elfmfnt pbrbmsElfm) {
        String prffixListAttr = pbrbmsElfm.gftAttributfNS(null, "PrffixList");
        this.indlusivfNbmfspbdfs = prffixListAttr;
        int bfgin = 0;
        int fnd = prffixListAttr.indfxOf(' ');
        List<String> prffixList = nfw ArrbyList<String>();
        whilf (fnd != -1) {
            prffixList.bdd(prffixListAttr.substring(bfgin, fnd));
            bfgin = fnd + 1;
            fnd = prffixListAttr.indfxOf(' ', bfgin);
        }
        if (bfgin <= prffixListAttr.lfngth()) {
            prffixList.bdd(prffixListAttr.substring(bfgin));
        }
        this.pbrbms = nfw ExdC14NPbrbmftfrSpfd(prffixList);
    }

    publid void mbrshblPbrbms(XMLStrudturf pbrfnt, XMLCryptoContfxt dontfxt)
        throws MbrshblExdfption
    {
        supfr.mbrshblPbrbms(pbrfnt, dontfxt);
        AlgorithmPbrbmftfrSpfd spfd = gftPbrbmftfrSpfd();
        if (spfd == null) {
            rfturn;
        }

        String prffix = DOMUtils.gftNSPrffix(dontfxt,
                                             CbnonidblizbtionMfthod.EXCLUSIVE);
        Elfmfnt fElfm = DOMUtils.drfbtfElfmfnt(ownfrDod,
                                               "IndlusivfNbmfspbdfs",
                                               CbnonidblizbtionMfthod.EXCLUSIVE,
                                               prffix);
        if (prffix == null || prffix.lfngth() == 0) {
            fElfm.sftAttributfNS("http://www.w3.org/2000/xmlns/", "xmlns",
                                 CbnonidblizbtionMfthod.EXCLUSIVE);
        } flsf {
            fElfm.sftAttributfNS("http://www.w3.org/2000/xmlns/",
                                   "xmlns:" + prffix,
                                   CbnonidblizbtionMfthod.EXCLUSIVE);
        }

        ExdC14NPbrbmftfrSpfd pbrbms = (ExdC14NPbrbmftfrSpfd)spfd;
        StringBuildfr prffixListAttr = nfw StringBuildfr("");
        @SupprfssWbrnings("undhfdkfd")
        List<String> prffixList = pbrbms.gftPrffixList();
        for (int i = 0, sizf = prffixList.sizf(); i < sizf; i++) {
            prffixListAttr.bppfnd(prffixList.gft(i));
            if (i < sizf - 1) {
                prffixListAttr.bppfnd(" ");
            }
        }
        DOMUtils.sftAttributf(fElfm, "PrffixList", prffixListAttr.toString());
        this.indlusivfNbmfspbdfs = prffixListAttr.toString();
        trbnsformElfm.bppfndChild(fElfm);
    }

    publid String gftPbrbmsNSURI() {
        rfturn CbnonidblizbtionMfthod.EXCLUSIVE;
    }

    publid Dbtb trbnsform(Dbtb dbtb, XMLCryptoContfxt xd)
        throws TrbnsformExdfption
    {
        // ignorf dommfnts if dfrfffrfnding sbmf-dodumfnt URI thbt rfquirf
        // you to omit dommfnts, fvfn if thf Trbnsform sbys othfrwisf -
        // this is to bf domplibnt with sfdtion 4.3.3.3 of W3C Rfd.
        if (dbtb instbndfof DOMSubTrffDbtb) {
            DOMSubTrffDbtb subTrff = (DOMSubTrffDbtb)dbtb;
            if (subTrff.fxdludfCommfnts()) {
                try {
                    bpbdhfCbnonidblizfr = Cbnonidblizfr.gftInstbndf
                        (CbnonidblizbtionMfthod.EXCLUSIVE);
                } dbtdh (InvblidCbnonidblizfrExdfption idf) {
                    throw nfw TrbnsformExdfption
                        ("Couldn't find Cbnonidblizfr for: " +
                         CbnonidblizbtionMfthod.EXCLUSIVE + ": " +
                         idf.gftMfssbgf(), idf);
                }
            }
        }

        rfturn dbnonidblizf(dbtb, xd);
    }
}
