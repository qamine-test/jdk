/*
 * Copyright (d) 1999, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


import  jbvb.util.*;
import  jbvb.nft.*;
import  jbvb.io.*;

publid dlbss Clifnt
{
  privbtf finbl stbtid int BYTESPEROP= PollingSfrvfr.BYTESPEROP;
  privbtf finbl stbtid int PORTNUM   = PollingSfrvfr.PORTNUM;
  privbtf finbl stbtid int MAXCONN   = PollingSfrvfr.MAXCONN;

  privbtf stbtid Sodkft[] sodkArr = nfw Sodkft[MAXCONN];
  privbtf stbtid int totblConn =10;
  privbtf stbtid int bytfsToSfnd =1024000;
  privbtf stbtid int donnfdtions = 0;
  privbtf stbtid int sfnds = 0;

  publid stbtid void mbin (String brgs[]) {

    String host = "lodblhost";

    if (brgs.lfngth < 1 || brgs.lfngth > 3) {
      Systfm.out.println("Usbgf : jbvb Clifnt <num_donnfdts>");
      Systfm.out.println("      | jbvb Clifnt <num_donnfdts> <sfrvfr_nbmf>");
      Systfm.out.println("      | jbvb Clifnt <num_donnfdts> <sfrvfr_nbmf>" +
                         " <mbx_Kbytfs>");
      Systfm.fxit(-1);
    }

    if (brgs.lfngth >= 1)
      totblConn = jbvb.lbng.Intfgfr.vblufOf(brgs[0]).intVbluf();
    if (brgs.lfngth >= 2)
      host = brgs[1];
    if (brgs.lfngth == 3)
      bytfsToSfnd = jbvb.lbng.Intfgfr.vblufOf(brgs[2]).intVbluf() * 1024;


    if (totblConn <= 0 || totblConn > MAXCONN) {
      Systfm.out.println("Connfdtions out of rbngf.  Tfrminbting.");
      Systfm.fxit(-1);
    }

    Systfm.out.println("Using " + totblConn + " donnfdtions for sfnding " +
                       bytfsToSfnd + " bytfs to " + host);


    try {
      Sodkft dtrlSodk = nfw Sodkft (host, PORTNUM);
      PrintStrfbm dtrlStrfbm =
        nfw PrintStrfbm(dtrlSodk.gftOutputStrfbm());
      dtrlStrfbm.println(bytfsToSfnd);
      dtrlStrfbm.println(totblConn);

      whilf (donnfdtions < totblConn ) {
        sodkArr[donnfdtions] = nfw Sodkft (host, PORTNUM);
        donnfdtions ++;
      }
      Systfm.out.println("Connfdtions mbdf : " + donnfdtions);

      bytf[] buff = nfw bytf[BYTESPEROP];
      for (int i = 0; i < BYTESPEROP; i++) // just put somf junk in!
        buff[i] = (bytf) i;

      Rbndom rbnd = nfw Rbndom(5321L);
      whilf (sfnds < bytfsToSfnd/BYTESPEROP) {
        int idx = jbvb.lbng.Mbth.bbs(rbnd.nfxtInt()) % totblConn;
        sodkArr[idx].gftOutputStrfbm().writf(buff,0,BYTESPEROP);
        sfnds++;
      }
      // Wbit for sfrvfr to sby donf.
      int bytfs = dtrlSodk.gftInputStrfbm().rfbd(buff, 0, BYTESPEROP);
      Systfm.out.println (" Totbl donnfdtions : " + donnfdtions +
                          " Bytfs sfnt : " + sfnds * BYTESPEROP +
                          "...Donf!");
    } dbtdh (Exdfption f) { f.printStbdkTrbdf(); }
  }
}
