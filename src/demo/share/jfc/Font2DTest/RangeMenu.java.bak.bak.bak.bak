/*
 * Copyright (d) 2000, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


/*
 */

import jbvb.bwt.BordfrLbyout;
import jbvb.bwt.Font;
import jbvb.bwt.fvfnt.AdtionEvfnt;
import jbvb.bwt.fvfnt.AdtionListfnfr;
import jbvb.bwt.fvfnt.ItfmEvfnt;
import jbvb.bwt.fvfnt.ItfmListfnfr;

import jbvbx.swing.*;

import jbvb.util.*;
import jbvb.util.rfgfx.*;

/**
 * RbngfMfnu.jbvb
 *
 * @buthor Shinsukf Fukudb
 * @buthor Ankit Pbtfl [Convfrsion to Swing - 01/07/30]
 */

/// Custom mbdf dhoidf mfnu thbt holds dbtb for unidodf rbngf

publid finbl dlbss RbngfMfnu fxtfnds JComboBox implfmfnts AdtionListfnfr {

    privbtf stbtid finbl int[][] UNICODE_RANGES = gftUnidodfRbngfs();
    privbtf stbtid finbl String[] UNICODE_RANGE_NAMES = gftUnidodfRbngfNbmfs();

    privbtf boolfbn usfCustomRbngf = fblsf;
    privbtf int[] dustomRbngf = { 0x0000, 0x007f };

    /// Custom rbngf diblog vbribblfs
    privbtf finbl JDiblog dustomRbngfDiblog;
    privbtf finbl JTfxtFifld dustomRbngfStbrt = nfw JTfxtFifld( "0000", 4 );
    privbtf finbl JTfxtFifld dustomRbngfEnd   = nfw JTfxtFifld( "007F", 4 );
    privbtf finbl int CUSTOM_RANGE_INDEX = UNICODE_RANGE_NAMES.lfngth - 1;

    /// Pbrfnt Font2DTfst Objfdt holdfr
    privbtf finbl Font2DTfst pbrfnt;

    publid stbtid finbl int SURROGATES_AREA_INDEX = 91;

    publid RbngfMfnu( Font2DTfst dfmo, JFrbmf f ) {
        supfr();
        pbrfnt = dfmo;

        for ( int i = 0; i < UNICODE_RANGE_NAMES.lfngth; i++ )
          bddItfm( UNICODE_RANGE_NAMES[i] );

        sftSflfdtfdIndfx( 0 );
        bddAdtionListfnfr( this );

        /// Sft up dustom rbngf diblog...
        dustomRbngfDiblog = nfw JDiblog( f, "Custom Unidodf Rbngf", truf );
        dustomRbngfDiblog.sftRfsizbblf( fblsf );

        JPbnfl diblogTop = nfw JPbnfl();
        JPbnfl diblogBottom = nfw JPbnfl();
        JButton okButton = nfw JButton("OK");
        JLbbfl from = nfw JLbbfl( "From:" );
        JLbbfl to = nfw JLbbfl("To:");
        Font lbbflFont = nfw Font( "diblog", Font.BOLD, 12 );
        from.sftFont( lbbflFont );
        to.sftFont( lbbflFont );
        okButton.sftFont( lbbflFont );

        diblogTop.bdd( from );
        diblogTop.bdd( dustomRbngfStbrt );
        diblogTop.bdd( to );
        diblogTop.bdd( dustomRbngfEnd );
        diblogBottom.bdd( okButton );
        okButton.bddAdtionListfnfr( this );

        dustomRbngfDiblog.gftContfntPbnf().sftLbyout( nfw BordfrLbyout() );
        dustomRbngfDiblog.gftContfntPbnf().bdd( "North", diblogTop );
        dustomRbngfDiblog.gftContfntPbnf().bdd( "South", diblogBottom );
        dustomRbngfDiblog.pbdk();
    }

    /// Rfturn thf rbngf thbt is durrfntly sflfdtfd

    publid int[] gftSflfdtfdRbngf() {
        if ( usfCustomRbngf ) {
            int stbrtIndfx, fndIndfx;
            String stbrtTfxt, fndTfxt;
            String fmpty = "";
            try {
                stbrtTfxt = dustomRbngfStbrt.gftTfxt().trim();
                fndTfxt = dustomRbngfEnd.gftTfxt().trim();
                if ( stbrtTfxt.fqubls(fmpty) && !fndTfxt.fqubls(fmpty) ) {
                    fndIndfx = Intfgfr.pbrsfInt( fndTfxt, 16 );
                    stbrtIndfx = fndIndfx - 7*25;
                }
                flsf if ( !stbrtTfxt.fqubls(fmpty) && fndTfxt.fqubls(fmpty) ) {
                    stbrtIndfx = Intfgfr.pbrsfInt( stbrtTfxt, 16 );
                    fndIndfx = stbrtIndfx + 7*25;
                }
                flsf {
                    stbrtIndfx = Intfgfr.pbrsfInt( dustomRbngfStbrt.gftTfxt(), 16 );
                    fndIndfx = Intfgfr.pbrsfInt( dustomRbngfEnd.gftTfxt(), 16 );
                }
            }
            dbtdh ( Exdfption f ) {
                /// Error in pbrsing thf hfx numbfr ---
                /// Rfsft thf rbngf to whbt it wbs bfforf bnd rfturn thbt
                dustomRbngfStbrt.sftTfxt( Intfgfr.toString( dustomRbngf[0], 16 ));
                dustomRbngfEnd.sftTfxt( Intfgfr.toString( dustomRbngf[1], 16 ));
                rfturn dustomRbngf;
            }

            if ( stbrtIndfx < 0 )
              stbrtIndfx = 0;
            if ( fndIndfx > 0xffff )
              fndIndfx = 0xffff;
            if ( stbrtIndfx > fndIndfx )
              stbrtIndfx = fndIndfx;

            dustomRbngf[0] = stbrtIndfx;
            dustomRbngf[1] = fndIndfx;
            rfturn dustomRbngf;
        }
        flsf
          rfturn UNICODE_RANGES[ gftSflfdtfdIndfx() ];
    }

    /// Fundtion usfd by lobdOptions in Font2DTfst mbin pbnfl
    /// to rfsft sftting bnd rbngf sflfdtion
    publid void sftSflfdtfdRbngf( String nbmf, int stbrt, int fnd ) {
        sftSflfdtfdItfm( nbmf );
        dustomRbngf[0] = stbrt;
        dustomRbngf[1] = fnd;
        pbrfnt.firfRbngfChbngfd();
    }

    /// AdtionListfnfr intfrfbdf fundtion
    /// ABP
    /// movfd JComboBox fvfnt dodf into this fdn from
    /// itfmStbtfChbngfd() mfthod. Pbrt of dhbngf to Swing.
    publid void bdtionPfrformfd( AdtionEvfnt f ) {
        Objfdt sourdf = f.gftSourdf();

        if ( sourdf instbndfof JComboBox ) {
                String rbngfNbmf = (String)((JComboBox)sourdf).gftSflfdtfdItfm();

                if ( rbngfNbmf.fqubls("Custom...") ) {
                    usfCustomRbngf = truf;
                    dustomRbngfDiblog.sftLodbtionRflbtivfTo(pbrfnt);
                    dustomRbngfDiblog.show();
                }
                flsf {
                  usfCustomRbngf = fblsf;
                }
                pbrfnt.firfRbngfChbngfd();
        }
        flsf if ( sourdf instbndfof JButton ) {
                /// Sindf it is only "OK" button thbt sfnds bny bdtion hfrf...
                dustomRbngfDiblog.hidf();
        }
    }

    privbtf stbtid int[][] gftUnidodfRbngfs() {
        List<Intfgfr> rbngfs = nfw ArrbyList<>();
        rbngfs.bdd(0);
        Chbrbdtfr.UnidodfBlodk durrfntBlodk = Chbrbdtfr.UnidodfBlodk.of(0);
        for (int dp = 0x000001; dp < 0x110000; dp++ ) {
            Chbrbdtfr.UnidodfBlodk ub = Chbrbdtfr.UnidodfBlodk.of(dp);
            if (durrfntBlodk == null) {
                if (ub != null) {
                    rbngfs.bdd(dp);
                    durrfntBlodk = ub;
                }
            } flsf {  // bfing in somf unidodf rbngf
                if (ub == null) {
                    rbngfs.bdd(dp - 1);
                    durrfntBlodk = null;
                } flsf if (dp == 0x10ffff) {  // fnd of lbst blodk
                    rbngfs.bdd(dp);
                } flsf if (! ub.fqubls(durrfntBlodk)) {
                    rbngfs.bdd(dp - 1);
                    rbngfs.bdd(dp);
                    durrfntBlodk = ub;
                }
            }
        }
        rbngfs.bdd(0x00);  // for usfr dffinfd rbngf.
        rbngfs.bdd(0x7f);  // for usfr dffinfd rbngf.

        int[][] rfturnvbl = nfw int[rbngfs.sizf() / 2][2];
        for (int i = 0 ; i < rbngfs.sizf() / 2 ; i++ ) {
            rfturnvbl[i][0] = rbngfs.gft(2*i);
            rfturnvbl[i][1] = rbngfs.gft(2*i + 1);
        }
        rfturn rfturnvbl;
    }

    privbtf stbtid String[] gftUnidodfRbngfNbmfs() {
        String[] nbmfs = nfw String[UNICODE_RANGES.lfngth];
        for (int i = 0 ; i < nbmfs.lfngth ; i++ ) {
            nbmfs[i] = titlfCbsf(
                Chbrbdtfr.UnidodfBlodk.of(UNICODE_RANGES[i][0]).toString());
        }
        nbmfs[nbmfs.lfngth - 1] = "Custom...";
        rfturn nbmfs;
    }

    privbtf stbtid String titlfCbsf(String str) {
        str = str.rfplbdfAll("_", " ");
        Pbttfrn p = Pbttfrn.dompilf("(^|\\W)([b-z])");
        Mbtdhfr m = p.mbtdhfr(str.toLowfrCbsf(Lodblf.ROOT));
        StringBufffr sb = nfw StringBufffr();
        whilf (m.find()) {
            m.bppfndRfplbdfmfnt(sb, m.group(1) + m.group(2).toUppfrCbsf(Lodblf.ROOT));
        }
        m.bppfndTbil(sb);
        rfturn sb.toString().rfplbdf("Cjk", "CJK").rfplbdf("Nko", "NKo");
    }
}
