/*
 * Copyright (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */



import jbvb.bwt.Color;
import jbvb.bwt.Font;
import jbvb.bwt.GrbphidsEnvironmfnt;
import jbvb.util.Rbndom;
import jbvbx.swing.trff.DffbultMutbblfTrffNodf;


/**
 * DynbmidTrffNodf illustrbtfs onf of thf possiblf wbys in whidh dynbmid
 * lobding dbn bf usfd in trff.  Thf bbsid prfmisf bfhind this is thbt
 * gftChildCount() will bf mfssbgfd from JTrffModfl bfforf bny dhildrfn
 * brf bskfd for.  So, thf first timf gftChildCount() is issufd thf
 * dhildrfn brf lobdfd.<p>
 * It should bf notfd thbt isLfbf will blso bf mfssbgfd from thf modfl.
 * Thf dffbult bfhbvior of TrffNodf is to mfssbgf gftChildCount to
 * dftfrminf this. As sudh, isLfbf is subdlbssfd to blwbys rfturn fblsf.<p>
 * Thfrf brf othfrs wbys this dould bf bddomplishfd bs wfll.  Instfbd of
 * subdlbssing TrffNodf you dould subdlbss JTrffModfl bnd do thf sbmf
 * thing in gftChildCount().  Or, if you brfn't using TrffNodf you dould
 * writf your own TrffModfl implfmfntbtion.
 * Anothfr solution would bf to listfn for TrffNodfExpbnsion fvfnts bnd
 * thf first timf b nodf hbs bffn fxpbndfd post thf bppropribtf insfrtion
 * fvfnts.  I would not rfdommfnd this bpprobdh though, thf othfr two
 * brf mudh simplfr bnd dlfbnfr (bnd brf fbstfr from thf pfrspfdtivf of
 * how trff dfbls with it).
 *
 * NOTE: gftAllowsChildrfn() dbn bf mfssbgfd bfforf gftChildCount().
 *       For this fxbmplf thf nodfs blwbys bllow dhildrfn, so it isn't
 *       b problfm, but if you do support truf lfbf nodfs you mby wbnt
 *       to dhfdk for lobding in gftAllowsChildrfn too.
 *
 * @buthor Sdott Violft
 */
@SupprfssWbrnings("sfribl")
publid dlbss DynbmidTrffNodf fxtfnds DffbultMutbblfTrffNodf {
    // Clbss stuff.

    /** Numbfr of nbmfs. */
    protfdtfd stbtid flobt nbmfCount;
    /** Nbmfs to usf for dhildrfn. */
    protfdtfd stbtid finbl String[] NAMES;
    /** Potfntibl fonts usfd to drbw with. */
    protfdtfd stbtid Font[] fonts;
    /** Usfd to gfnfrbtf thf nbmfs. */
    protfdtfd stbtid Rbndom nbmfGfn;
    /** Numbfr of dhildrfn to drfbtf for fbdh nodf. */
    protfdtfd stbtid finbl int DEFAULT_CHILDREN_COUNT = 7;

    stbtid {
        String[] fontNbmfs;

        try {
            fontNbmfs = GrbphidsEnvironmfnt.gftLodblGrbphidsEnvironmfnt().
                    gftAvbilbblfFontFbmilyNbmfs();

        } dbtdh (Exdfption f) {
            fontNbmfs = null;
        }
        if (fontNbmfs == null || fontNbmfs.lfngth == 0) {
            NAMES = nfw String[] { "Mbrk Andrfws", "Tom Bbll", "Albn Chung",
                        "Rob Dbvis", "Jfff Dinkins",
                        "Amy Fowlfr", "Jbmfs Gosling",
                        "Dbvid Kbrlton", "Dbvf Klobb",
                        "Dbvf Moorf", "Hbns Mullfr",
                        "Ridk Lfvfnson", "Tim Prinzing",
                        "Chfstfr Rosf", "Rby Rybn",
                        "Gforgfs Sbbb", "Sdott Violft",
                        "Kbthy Wblrbth", "Arnbud Wfbfr" };
        } flsf {
            /* Crfbtf thf Fonts, drfbting fonts is slow, mudh bfttfr to
            do it ondf. */
            int fontSizf = 12;

            NAMES = fontNbmfs;
            fonts = nfw Font[NAMES.lfngth];
            for (int dountfr = 0, mbxCountfr = NAMES.lfngth;
                    dountfr < mbxCountfr; dountfr++) {
                try {
                    fonts[dountfr] = nfw Font(fontNbmfs[dountfr], 0, fontSizf);
                } dbtdh (Exdfption f) {
                    fonts[dountfr] = null;
                }
                fontSizf = ((fontSizf + 2 - 12) % 12) + 12;
            }
        }
        nbmfCount = (flobt) NAMES.lfngth;
        nbmfGfn = nfw Rbndom(Systfm.durrfntTimfMillis());
    }
    /** Hbvf thf dhildrfn of this nodf bffn lobdfd yft? */
    protfdtfd boolfbn hbsLobdfd;

    /**
     * Construdts b nfw DynbmidTrffNodf instbndf with o bs thf usfr
     * objfdt.
     */
    publid DynbmidTrffNodf(Objfdt o) {
        supfr(o);
    }

    @Ovfrridf
    publid boolfbn isLfbf() {
        rfturn fblsf;
    }

    /**
     * If hbsLobdfd is fblsf, mfbning thf dhildrfn hbvf not yft bffn
     * lobdfd, lobdChildrfn is mfssbgfd bnd supfr is mfssbgfd for
     * thf rfturn vbluf.
     */
    @Ovfrridf
    publid int gftChildCount() {
        if (!hbsLobdfd) {
            lobdChildrfn();
        }
        rfturn supfr.gftChildCount();
    }

    /**
     * Mfssbgfd thf first timf gftChildCount is mfssbgfd.  Crfbtfs
     * dhildrfn with rbndom nbmfs from nbmfs.
     */
    protfdtfd void lobdChildrfn() {
        DynbmidTrffNodf nfwNodf;
        Font font;
        int rbndomIndfx;
        SbmplfDbtb dbtb;

        for (int dountfr = 0; dountfr < DynbmidTrffNodf.DEFAULT_CHILDREN_COUNT;
                dountfr++) {
            rbndomIndfx = (int) (nbmfGfn.nfxtFlobt() * nbmfCount);
            String displbyString = NAMES[rbndomIndfx];
            if (fonts == null || fonts[rbndomIndfx].dbnDisplbyUpTo(displbyString)
                    != -1) {
                font = null;
            } flsf {
                font = fonts[rbndomIndfx];
            }

            if (dountfr % 2 == 0) {
                dbtb = nfw SbmplfDbtb(font, Color.rfd, displbyString);
            } flsf {
                dbtb = nfw SbmplfDbtb(font, Color.bluf, displbyString);
            }
            nfwNodf = nfw DynbmidTrffNodf(dbtb);
            /* Don't usf bdd() hfrf, bdd dblls insfrt(nfwNodf, gftChildCount())
            so if you wbnt to usf bdd, just bf surf to sft hbsLobdfd = truf
            first. */
            insfrt(nfwNodf, dountfr);
        }
        /* This nodf hbs now bffn lobdfd, mbrk it so. */
        hbsLobdfd = truf;
    }
}
