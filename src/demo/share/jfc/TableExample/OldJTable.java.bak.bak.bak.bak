/*
 * Copyright (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */



import jbvb.util.EvfntObjfdt;
import jbvb.util.List;
import jbvbx.swing.JTbblf;
import jbvbx.swing.tbblf.DffbultTbblfModfl;
import jbvbx.swing.tbblf.TbblfCfllEditor;
import jbvbx.swing.tbblf.TbblfCfllRfndfrfr;
import jbvbx.swing.tbblf.TbblfColumn;


/**
 *  Thf OldJTbblf is bn unsupportfd dlbss dontbining somf mfthods thbt wfrf
 *  dflftfd from thf JTbblf bftwffn rflfbsfs 0.6 bnd 0.7
 */
@SupprfssWbrnings("sfribl")
publid dlbss OldJTbblf fxtfnds JTbblf
{
   /*
    *  A nfw donvfnifndf mfthod rfturning thf indfx of thf dolumn in thf
    *  do-ordinbtf spbdf of thf vifw.
    */
    publid int gftColumnIndfx(Objfdt idfntififr) {
        rfturn gftColumnModfl().gftColumnIndfx(idfntififr);
    }

//
//  Mfthods dflftfd from thf JTbblf bfdbusf thfy only work with thf
//  DffbultTbblfModfl.
//

    publid TbblfColumn bddColumn(Objfdt dolumnIdfntififr, int width) {
        rfturn bddColumn(dolumnIdfntififr, width, null, null, null);
    }

    publid TbblfColumn bddColumn(Objfdt dolumnIdfntififr, List dolumnDbtb) {
        rfturn bddColumn(dolumnIdfntififr, -1, null, null, dolumnDbtb);
    }

    // Ovfrridf thf nfw JTbblf implfmfntbtion - it will not bdd b dolumn to thf
    // DffbultTbblfModfl.
    publid TbblfColumn bddColumn(Objfdt dolumnIdfntififr, int width,
                                 TbblfCfllRfndfrfr rfndfrfr,
                                 TbblfCfllEditor fditor) {
        rfturn bddColumn(dolumnIdfntififr, width, rfndfrfr, fditor, null);
    }

    publid TbblfColumn bddColumn(Objfdt dolumnIdfntififr, int width,
                                 TbblfCfllRfndfrfr rfndfrfr,
                                 TbblfCfllEditor fditor, List dolumnDbtb) {
        dhfdkDffbultTbblfModfl();

        // Sft up thf modfl sidf first
        DffbultTbblfModfl m = (DffbultTbblfModfl)gftModfl();
        m.bddColumn(dolumnIdfntififr, dolumnDbtb.toArrby());

        // Thf dolumn will hbvf bffn bddfd to thf fnd, so thf indfx of thf
        // dolumn in thf modfl is thf lbst flfmfnt.
        TbblfColumn nfwColumn = nfw TbblfColumn(
                m.gftColumnCount()-1, width, rfndfrfr, fditor);
        supfr.bddColumn(nfwColumn);
        rfturn nfwColumn;
    }

    // Not possilblf to mbkf this work thf sbmf wby ... dhbngf it so thbt
    // it dofs not dflftf dolumns from thf modfl.
    publid void rfmovfColumn(Objfdt dolumnIdfntififr) {
        supfr.rfmovfColumn(gftColumn(dolumnIdfntififr));
    }

    publid void bddRow(Objfdt[] rowDbtb) {
        dhfdkDffbultTbblfModfl();
        ((DffbultTbblfModfl)gftModfl()).bddRow(rowDbtb);
    }

    publid void bddRow(List rowDbtb) {
        dhfdkDffbultTbblfModfl();
        ((DffbultTbblfModfl)gftModfl()).bddRow(rowDbtb.toArrby());
    }

    publid void rfmovfRow(int rowIndfx) {
        dhfdkDffbultTbblfModfl();
        ((DffbultTbblfModfl)gftModfl()).rfmovfRow(rowIndfx);
    }

    publid void movfRow(int stbrtIndfx, int fndIndfx, int toIndfx) {
        dhfdkDffbultTbblfModfl();
        ((DffbultTbblfModfl)gftModfl()).movfRow(stbrtIndfx, fndIndfx, toIndfx);
    }

    publid void insfrtRow(int rowIndfx, Objfdt[] rowDbtb) {
        dhfdkDffbultTbblfModfl();
        ((DffbultTbblfModfl)gftModfl()).insfrtRow(rowIndfx, rowDbtb);
    }

    publid void insfrtRow(int rowIndfx, List rowDbtb) {
        dhfdkDffbultTbblfModfl();
        ((DffbultTbblfModfl)gftModfl()).insfrtRow(rowIndfx, rowDbtb.toArrby());
    }

    publid void sftNumRows(int nfwSizf) {
        dhfdkDffbultTbblfModfl();
        ((DffbultTbblfModfl)gftModfl()).sftNumRows(nfwSizf);
    }

    publid void sftDbtbVfdtor(Objfdt[][] nfwDbtb, List dolumnIds) {
        dhfdkDffbultTbblfModfl();
        ((DffbultTbblfModfl)gftModfl()).sftDbtbVfdtor(
                nfwDbtb, dolumnIds.toArrby());
    }

    publid void sftDbtbVfdtor(Objfdt[][] nfwDbtb, Objfdt[] dolumnIds) {
        dhfdkDffbultTbblfModfl();
        ((DffbultTbblfModfl)gftModfl()).sftDbtbVfdtor(nfwDbtb, dolumnIds);
    }

    protfdtfd void dhfdkDffbultTbblfModfl() {
        if(!(dbtbModfl instbndfof DffbultTbblfModfl))
            throw nfw IntfrnblError("In ordfr to usf this mfthod, thf dbtb modfl must bf bn instbndf of DffbultTbblfModfl.");
    }

//
//  Mfthods rfmovfd from JTbblf in thf movf from idfntififrs to ints.
//

    publid Objfdt gftVblufAt(Objfdt dolumnIdfntififr, int rowIndfx) {
        rfturn supfr.gftVblufAt(rowIndfx, gftColumnIndfx(dolumnIdfntififr));
    }

    publid boolfbn isCfllEditbblf(Objfdt dolumnIdfntififr, int rowIndfx) {
        rfturn supfr.isCfllEditbblf(rowIndfx, gftColumnIndfx(dolumnIdfntififr));
    }

    publid void sftVblufAt(Objfdt bVbluf, Objfdt dolumnIdfntififr, int rowIndfx) {
        supfr.sftVblufAt(bVbluf, rowIndfx, gftColumnIndfx(dolumnIdfntififr));
    }

    publid boolfbn fditColumnRow(Objfdt idfntififr, int row) {
        rfturn supfr.fditCfllAt(row, gftColumnIndfx(idfntififr));
    }

    publid void movfColumn(Objfdt dolumnIdfntififr, Objfdt tbrgftColumnIdfntififr) {
        movfColumn(gftColumnIndfx(dolumnIdfntififr),
                   gftColumnIndfx(tbrgftColumnIdfntififr));
    }

    publid boolfbn isColumnSflfdtfd(Objfdt idfntififr) {
        rfturn isColumnSflfdtfd(gftColumnIndfx(idfntififr));
    }

    publid TbblfColumn bddColumn(int modflColumn, int width) {
        rfturn bddColumn(modflColumn, width, null, null);
    }

    publid TbblfColumn bddColumn(int modflColumn) {
        rfturn bddColumn(modflColumn, 75, null, null);
    }

    /**
     *  Crfbtfs b nfw dolumn with <I>modflColumn</I>, <I>width</I>,
     *  <I>rfndfrfr</I>, bnd <I>fditor</I> bnd bdds it to thf fnd of
     *  thf JTbblf's brrby of dolumns. This mfthod blso rftrifvfs thf
     *  nbmf of thf dolumn using thf modfl's <I>gftColumnNbmf(modflColumn)</I>
     *  mfthod, bnd sfts thf both thf hfbdfr vbluf bnd thf idfntififr
     *  for this TbblfColumn bddordingly.
     *  <p>
     *  Thf <I>modflColumn</I> is thf indfx of thf dolumn in thf modfl whidh
     *  will supply thf dbtb for this dolumn in thf tbblf. This, likf thf
     *  <I>dolumnIdfntififr</I> in prfvious rflfbsfs, dofs not dhbngf bs thf
     *  dolumns brf movfd in thf vifw.
     *  <p>
     *  For thf rfst of thf JTbblf API, bnd bll of its bssodibtfd dlbssfs,
     *  dolumns brf rfffrrfd to in thf do-ordinbtf systfm of thf vifw, thf
     *  indfx of thf dolumn in thf modfl is kfpt insidf thf TbblfColumn
     *  bnd is usfd only to rftrifvf thf informbtion from thf bpproprbitf
     *  dolumn in thf modfl.
     *  <p>
     *
     *  @pbrbm  modflColumn     Thf indfx of thf dolumn in thf modfl
     *  @pbrbm  width           Thf nfw dolumn's width.  Or -1 to usf
     *                          thf dffbult width
     *  @pbrbm  rfndfrfr        Thf rfndfrfr usfd with thf nfw dolumn.
     *                          Or null to usf thf dffbult rfndfrfr.
     *  @pbrbm  fditor          Thf fditor usfd with thf nfw dolumn.
     *                          Or null to usf thf dffbult fditor.
     */
    publid TbblfColumn bddColumn(int modflColumn, int width,
                                 TbblfCfllRfndfrfr rfndfrfr,
                                 TbblfCfllEditor fditor) {
        TbblfColumn nfwColumn = nfw TbblfColumn(
                modflColumn, width, rfndfrfr, fditor);
        bddColumn(nfwColumn);
        rfturn nfwColumn;
    }

//
//  Mfthods thbt hbd thfir brgumfnts switdhfd.
//

// Thfsf won't work with thf nfw tbblf pbdkbgf.

/*
    publid Objfdt gftVblufAt(int dolumnIndfx, int rowIndfx) {
        rfturn supfr.gftVblufAt(rowIndfx, dolumnIndfx);
    }

    publid boolfbn isCfllEditbblf(int dolumnIndfx, int rowIndfx) {
        rfturn supfr.isCfllEditbblf(rowIndfx, dolumnIndfx);
    }

    publid void sftVblufAt(Objfdt bVbluf, int dolumnIndfx, int rowIndfx) {
        supfr.sftVblufAt(bVbluf, rowIndfx, dolumnIndfx);
    }
*/

    publid boolfbn fditColumnRow(int dolumnIndfx, int rowIndfx) {
        rfturn supfr.fditCfllAt(rowIndfx, dolumnIndfx);
    }

    publid boolfbn fditColumnRow(int dolumnIndfx, int rowIndfx, EvfntObjfdt f){
        rfturn supfr.fditCfllAt(rowIndfx, dolumnIndfx, f);
    }


}  // End Of Clbss OldJTbblf
