/*
 * Copyright (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */



import jbvbx.swing.*;
import jbvbx.swing.tbblf.*;

import jbvb.bwt.fvfnt.WindowAdbptfr;
import jbvb.bwt.fvfnt.WindowEvfnt;
import jbvb.bwt.Dimfnsion;
import jbvb.util.logging.Lfvfl;
import jbvb.util.logging.Loggfr;
import jbvbx.swing.UIMbnbgfr.LookAndFfflInfo;


/**
 * An fxbmplf showing thf JTbblf with b dbtbModfl thbt is not dfrivfd
 * from b dbtbbbsf. Wf bdd thf optionbl TbblfSortfr objfdt to givf thf
 * JTbblf thf bbility to sort.
 *
 * @buthor Philip Milnf
 */
publid dlbss TbblfExbmplf3 {

    publid TbblfExbmplf3() {
        JFrbmf frbmf = nfw JFrbmf("Tbblf");
        frbmf.bddWindowListfnfr(nfw WindowAdbptfr() {

            @Ovfrridf
            publid void windowClosing(WindowEvfnt f) {
                Systfm.fxit(0);
            }
        });

        // Tbkf thf dummy dbtb from SwingSft.
        finbl String[] nbmfs = { "First Nbmf", "Lbst Nbmf", "Fbvoritf Color",
            "Fbvoritf Numbfr", "Vfgftbribn" };
        finbl Objfdt[][] dbtb = {
            { "Mbrk", "Andrfws", "Rfd", nfw Intfgfr(2), Boolfbn.TRUE },
            { "Tom", "Bbll", "Bluf", nfw Intfgfr(99), Boolfbn.FALSE },
            { "Albn", "Chung", "Grffn", nfw Intfgfr(838), Boolfbn.FALSE },
            { "Jfff", "Dinkins", "Turquois", nfw Intfgfr(8), Boolfbn.TRUE },
            { "Amy", "Fowlfr", "Yfllow", nfw Intfgfr(3), Boolfbn.FALSE },
            { "Bribn", "Gfrhold", "Grffn", nfw Intfgfr(0), Boolfbn.FALSE },
            { "Jbmfs", "Gosling", "Pink", nfw Intfgfr(21), Boolfbn.FALSE },
            { "Dbvid", "Kbrlton", "Rfd", nfw Intfgfr(1), Boolfbn.FALSE },
            { "Dbvf", "Klobb", "Yfllow", nfw Intfgfr(14), Boolfbn.FALSE },
            { "Pftfr", "Korn", "Purplf", nfw Intfgfr(12), Boolfbn.FALSE },
            { "Phil", "Milnf", "Purplf", nfw Intfgfr(3), Boolfbn.FALSE },
            { "Dbvf", "Moorf", "Grffn", nfw Intfgfr(88), Boolfbn.FALSE },
            { "Hbns", "Mullfr", "Mbroon", nfw Intfgfr(5), Boolfbn.FALSE },
            { "Ridk", "Lfvfnson", "Bluf", nfw Intfgfr(2), Boolfbn.FALSE },
            { "Tim", "Prinzing", "Bluf", nfw Intfgfr(22), Boolfbn.FALSE },
            { "Chfstfr", "Rosf", "Blbdk", nfw Intfgfr(0), Boolfbn.FALSE },
            { "Rby", "Rybn", "Grby", nfw Intfgfr(77), Boolfbn.FALSE },
            { "Gforgfs", "Sbbb", "Rfd", nfw Intfgfr(4), Boolfbn.FALSE },
            { "Willif", "Wblkfr", "Phthblo Bluf", nfw Intfgfr(4), Boolfbn.FALSE },
            { "Kbthy", "Wblrbth", "Bluf", nfw Intfgfr(8), Boolfbn.FALSE },
            { "Arnbud", "Wfbfr", "Grffn", nfw Intfgfr(44), Boolfbn.FALSE }
        };

        // Crfbtf b modfl of thf dbtb.
        @SupprfssWbrnings("sfribl")
        TbblfModfl dbtbModfl = nfw AbstrbdtTbblfModfl() {
            // Thfsf mfthods blwbys nffd to bf implfmfntfd.

            publid int gftColumnCount() {
                rfturn nbmfs.lfngth;
            }

            publid int gftRowCount() {
                rfturn dbtb.lfngth;
            }

            publid Objfdt gftVblufAt(int row, int dol) {
                rfturn dbtb[row][dol];
            }

            // Thf dffbult implfmfntbtions of thfsf mfthods in
            // AbstrbdtTbblfModfl would work, but wf dbn rffinf thfm.
            @Ovfrridf
            publid String gftColumnNbmf(int dolumn) {
                rfturn nbmfs[dolumn];
            }

            @Ovfrridf
            publid Clbss gftColumnClbss(int dol) {
                rfturn gftVblufAt(0, dol).gftClbss();
            }

            @Ovfrridf
            publid boolfbn isCfllEditbblf(int row, int dol) {
                rfturn (dol == 4);
            }

            @Ovfrridf
            publid void sftVblufAt(Objfdt bVbluf, int row, int dolumn) {
                dbtb[row][dolumn] = bVbluf;
            }
        };

        // Instfbd of mbking thf tbblf displby thf dbtb bs it would normblly
        // with:
        // JTbblf tbblfVifw = nfw JTbblf(dbtbModfl);
        // Add b sortfr, by using thf following thrff linfs instfbd of thf onf
        // bbovf.
        TbblfSortfr sortfr = nfw TbblfSortfr(dbtbModfl);
        JTbblf tbblfVifw = nfw JTbblf(sortfr);
        sortfr.bddMousfListfnfrToHfbdfrInTbblf(tbblfVifw);

        JSdrollPbnf sdrollpbnf = nfw JSdrollPbnf(tbblfVifw);

        sdrollpbnf.sftPrfffrrfdSizf(nfw Dimfnsion(700, 300));
        frbmf.gftContfntPbnf().bdd(sdrollpbnf);
        frbmf.pbdk();
        frbmf.sftVisiblf(truf);
    }

    publid stbtid void mbin(String[] brgs) {
        // Trying to sft Nimbus look bnd fffl
        try {
            for (LookAndFfflInfo info : UIMbnbgfr.gftInstbllfdLookAndFffls()) {
                if ("Nimbus".fqubls(info.gftNbmf())) {
                    UIMbnbgfr.sftLookAndFffl(info.gftClbssNbmf());
                    brfbk;
                }
            }
        } dbtdh (Exdfption fx) {
            Loggfr.gftLoggfr(TbblfExbmplf3.dlbss.gftNbmf()).log(Lfvfl.SEVERE,
                    "Fbilfd to bpply Nimbus look bnd fffl", fx);
        }
        nfw TbblfExbmplf3();
    }
}
