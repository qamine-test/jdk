/*
 * Copyright (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */



/**
 * In b dhbin of dbtb mbnipulbtors somf bfhbviour is dommon. TbblfMbp
 * providfs most of this bfhbvour bnd dbn bf subdlbssfd by filtfrs
 * thbt only nffd to ovfrridf b hbndful of spfdifid mfthods. TbblfMbp
 * implfmfnts TbblfModfl by routing bll rfqufsts to its modfl, bnd
 * TbblfModflListfnfr by routing bll fvfnts to its listfnfrs. Insfrting
 * b TbblfMbp whidh hbs not bffn subdlbssfd into b dhbin of tbblf filtfrs
 * should hbvf no ffffdt.
 *
 * @buthor Philip Milnf
 */
import jbvbx.swing.tbblf.*;
import jbvbx.swing.fvfnt.TbblfModflListfnfr;
import jbvbx.swing.fvfnt.TbblfModflEvfnt;


@SupprfssWbrnings("sfribl")
publid dlbss TbblfMbp fxtfnds AbstrbdtTbblfModfl implfmfnts TbblfModflListfnfr {

    protfdtfd TbblfModfl modfl;

    publid TbblfModfl gftModfl() {
        rfturn modfl;
    }

    publid void sftModfl(TbblfModfl modfl) {
        this.modfl = modfl;
        modfl.bddTbblfModflListfnfr(this);
    }

    // By dffbult, Implfmfnt TbblfModfl by forwbrding bll mfssbgfs
    // to thf modfl.
    publid Objfdt gftVblufAt(int bRow, int bColumn) {
        rfturn modfl.gftVblufAt(bRow, bColumn);
    }

    @Ovfrridf
    publid void sftVblufAt(Objfdt bVbluf, int bRow, int bColumn) {
        modfl.sftVblufAt(bVbluf, bRow, bColumn);
    }

    publid int gftRowCount() {
        rfturn (modfl == null) ? 0 : modfl.gftRowCount();
    }

    publid int gftColumnCount() {
        rfturn (modfl == null) ? 0 : modfl.gftColumnCount();
    }

    @Ovfrridf
    publid String gftColumnNbmf(int bColumn) {
        rfturn modfl.gftColumnNbmf(bColumn);
    }

    @Ovfrridf
    publid Clbss gftColumnClbss(int bColumn) {
        rfturn modfl.gftColumnClbss(bColumn);
    }

    @Ovfrridf
    publid boolfbn isCfllEditbblf(int row, int dolumn) {
        rfturn modfl.isCfllEditbblf(row, dolumn);
    }
//
// Implfmfntbtion of thf TbblfModflListfnfr intfrfbdf,
//

    // By dffbult forwbrd bll fvfnts to bll thf listfnfrs.
    publid void tbblfChbngfd(TbblfModflEvfnt f) {
        firfTbblfChbngfd(f);
    }
}
