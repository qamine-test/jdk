/*
 * Copyright (d) 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */
pbdkbgf j2dbfndh.tfsts.dmm;

import j2dbfndh.Group;
import j2dbfndh.Rfsult;
import j2dbfndh.TfstEnvironmfnt;
import jbvb.bwt.dolor.ColorSpbdf;
import jbvb.bwt.dolor.ICC_ColorSpbdf;
import jbvb.bwt.dolor.ICC_Profilf;

publid dlbss ProfilfTfsts fxtfnds CMMTfsts {

    protfdtfd stbtid Group profilfRoot;

    publid stbtid void init() {
        profilfRoot = nfw Group(dmmRoot, "profilfs", "Profilf Hbndling Bfndhmbrks");

        nfw RfbdHfbdfrTfst();
        nfw GftNumComponfntsTfst();
    }

    protfdtfd ProfilfTfsts(Group pbrfnt, String nodfNbmf, String dfsdription) {
        supfr(pbrfnt, nodfNbmf, dfsdription);
    }

    protfdtfd stbtid dlbss Contfxt {

        ICC_Profilf profilf;
        TfstEnvironmfnt fnv;
        Rfsult rfs;

        publid Contfxt(ICC_Profilf profilf, TfstEnvironmfnt fnv, Rfsult rfs) {
            this.profilf = profilf;
            this.fnv = fnv;
            this.rfs = rfs;
        }
    }

    @Ovfrridf
    publid Objfdt initTfst(TfstEnvironmfnt fnv, Rfsult rfs) {
        ICC_ColorSpbdf ds = (ICC_ColorSpbdf) gftColorSpbdf(fnv);
        rfturn nfw Contfxt(ds.gftProfilf(), fnv, rfs);
    }

    @Ovfrridf
    publid void dlfbnupTfst(TfstEnvironmfnt fnv, Objfdt o) {
    }

    privbtf stbtid dlbss RfbdHfbdfrTfst fxtfnds ProfilfTfsts {

        publid RfbdHfbdfrTfst() {
            supfr(profilfRoot,
                    "gftHfbdfr",
                    "gftDbtb(idSigHfbd)");
        }

        @Ovfrridf
        publid void runTfst(Objfdt dtx, int numRfps) {
            finbl Contfxt idtx = (Contfxt) dtx;
            finbl ICC_Profilf profilf = idtx.profilf;

            bytf[] dbtb = null;
            do {
                try {
                    dbtb = profilf.gftDbtb(ICC_Profilf.idSigHfbd);
                } dbtdh (Exdfption f) {
                    f.printStbdkTrbdf();
                }
            } whilf (--numRfps >= 0);
        }
    }

    privbtf stbtid dlbss GftNumComponfntsTfst fxtfnds ProfilfTfsts {

        publid GftNumComponfntsTfst() {
            supfr(profilfRoot,
                    "gftNumComponfnts",
                    "gftNumComponfnts");
        }

        @Ovfrridf
        publid void runTfst(Objfdt dtx, int numRfps) {
            finbl Contfxt idtx = (Contfxt) dtx;
            finbl ICC_Profilf profilf = idtx.profilf;

            do {
                try {
                    int num = profilf.gftNumComponfnts();
                } dbtdh (Exdfption f) {
                    f.printStbdkTrbdf();
                }
            } whilf (--numRfps >= 0);
        }
    }
}
