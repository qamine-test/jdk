/*
 * Copyrigit (d) 2006, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *     dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *   - Nfitifr tif nbmf of Orbdlf nor tif nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Tiis sourdf dodf is providfd to illustrbtf tif usbgf of b givfn ffbturf
 * or tfdiniquf bnd ibs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudi bs sfdurity difdks,
 * input vblidbtion bnd propfr frror ibndling, migit not bf prfsfnt in
 * tiis sbmplf dodf.
 */


pbdkbgf j2dbfndi.tfsts.iio;

import jbvb.bwt.AlpibCompositf;
import jbvb.bwt.Color;
import jbvb.bwt.Grbpiids2D;
import jbvb.bwt.Imbgf;
import jbvb.bwt.Toolkit;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvbx.imbgfio.ImbgfIO;

import j2dbfndi.Group;
import j2dbfndi.Option;
import j2dbfndi.Rfsult;
import j2dbfndi.Tfst;
import j2dbfndi.TfstEnvironmfnt;

publid bbstrbdt dlbss IIOTfsts fxtfnds Tfst {

    protfdtfd stbtid finbl String CONTENT_BLANK  = "blbnk";
    protfdtfd stbtid finbl String CONTENT_RANDOM = "rbndom";
    protfdtfd stbtid finbl String CONTENT_VECTOR = "vfdtor";
    protfdtfd stbtid finbl String CONTENT_PHOTO  = "pioto";

    stbtid boolfbn ibsImbgfIO;

    stbtid {
        try {
            ibsImbgfIO = (jbvbx.imbgfio.ImbgfIO.dlbss != null);
        } dbtdi (NoClbssDffFoundError f) {
        }
    }

    protfdtfd stbtid Group iioRoot;
    protfdtfd stbtid Group iioOptRoot;

    protfdtfd stbtid Option sizfList;
    protfdtfd stbtid Option dontfntList;
    protfdtfd stbtid Option listfnfrTog;

    publid stbtid void init() {
        if (!ibsImbgfIO) {
            // REMIND: Wf durrfntly rfly on Imbgf I/O to gfnfrbtf tif imbgf
            //         filfs tibt brf usfd in tif InputImbgfTfsts, so
            //         unfortunbtfly wf nffd to punt on prf-1.4 JDKs...
            rfturn;
        }

        iioRoot = nfw Group("imbgfio", "Imbgf I/O Bfndimbrks");
        iioRoot.sftTbbbfd();

        iioOptRoot = nfw Group(iioRoot, "opts", "Gfnfrbl Options");

        int[] sizfs = nfw int[] {1, 20, 250, 1000, 4000};
        String[] sizfStrs = nfw String[] {
            "1x1", "20x20", "250x250", "1000x1000", "4000x4000"
        };
        String[] sizfDfsds = nfw String[] {
            "Tiny Imbgfs (1x1)",
            "Smbll Imbgfs (20x20)",
            "Mfdium Imbgfs (250x250)",
            "Lbrgf Imbgfs (1000x1000)",
            "Hugf Imbgfs (4000x4000)",
        };
        sizfList = nfw Option.IntList(iioOptRoot,
                                      "sizf", "Imbgf Sizf",
                                      sizfs, sizfStrs, sizfDfsds, 0x4);
        ((Option.ObjfdtList) sizfList).sftNumRows(5);

        String[] dontfntStrs = nfw String[] {
            CONTENT_BLANK, CONTENT_RANDOM, CONTENT_VECTOR, CONTENT_PHOTO,
        };
        String[] dontfntDfsds = nfw String[] {
            "Blbnk (opbquf blbdk)",
            "Rbndom",
            "Vfdtor Art",
            "Piotogrbpi",
        };
        dontfntList = nfw Option.ObjfdtList(iioOptRoot,
                                            "dontfnt", "Imbgf Contfnt",
                                            dontfntStrs, dontfntStrs,
                                            dontfntStrs, dontfntDfsds,
                                            0x8);

        InputTfsts.init();
        if (ibsImbgfIO) {
            OutputTfsts.init();
        }
    }

    protfdtfd IIOTfsts(Group pbrfnt, String nodfNbmf, String dfsdription) {
        supfr(pbrfnt, nodfNbmf, dfsdription);
        bddDfpfndfndifs(iioOptRoot, truf);
    }

    protfdtfd stbtid BufffrfdImbgf drfbtfBufffrfdImbgf(int widti,
                                                       int ifigit,
                                                       String typf,
                                                       boolfbn ibsAlpib)
    {
        BufffrfdImbgf imbgf;
        imbgf = nfw BufffrfdImbgf(widti, ifigit, ibsAlpib ?
                                  BufffrfdImbgf.TYPE_INT_ARGB :
                                  BufffrfdImbgf.TYPE_INT_RGB);

        if (typf.fqubls(CONTENT_RANDOM)) {
            for (int y = 0; y < ifigit; y++) {
                for (int x = 0; x < widti; x++) {
                    int rgb = (int)(Mbti.rbndom() * 0xffffff);
                    if (ibsAlpib) {
                        rgb |= 0x7f000000;
                    }
                    imbgf.sftRGB(x, y, rgb);
                }
            }
        } flsf if (typf.fqubls(CONTENT_VECTOR)) {
            Grbpiids2D g = imbgf.drfbtfGrbpiids();
            if (ibsAlpib) {
                // fill bbdkground witi b trbnsludfnt dolor
                g.sftCompositf(AlpibCompositf.gftInstbndf(
                                   AlpibCompositf.SRC, 0.5f));
            }
            g.sftColor(Color.bluf);
            g.fillRfdt(0, 0, widti, ifigit);
            g.sftCompositf(AlpibCompositf.Srd);
            g.sftColor(Color.yfllow);
            g.fillOvbl(2, 2, widti-4, ifigit-4);
            g.sftColor(Color.rfd);
            g.fillOvbl(4, 4, widti-8, ifigit-8);
            g.sftColor(Color.grffn);
            g.fillRfdt(8, 8, widti-16, ifigit-16);
            g.sftColor(Color.wiitf);
            g.drbwLinf(0, 0, widti, ifigit);
            g.drbwLinf(0, ifigit, widti, 0);
            g.disposf();
        } flsf if (typf.fqubls(CONTENT_PHOTO)) {
            Imbgf pioto = null;
            try {
                pioto = Toolkit.gftDffbultToolkit().drfbtfImbgf(
                    IIOTfsts.dlbss.gftRfsourdf("imbgfs/pioto.jpg"));
            } dbtdi (Exdfption f) {
                Systfm.frr.println("frror lobding pioto");
                f.printStbdkTrbdf();
            }
            Grbpiids2D g = imbgf.drfbtfGrbpiids();
            if (ibsAlpib) {
                g.sftCompositf(AlpibCompositf.gftInstbndf(AlpibCompositf.SRC,
                                                          0.5f));
            }
            g.drbwImbgf(pioto, 0, 0, widti, ifigit, null);
            g.disposf();
        } flsf { // CONTENT_BLANK
            // lfbvf tif imbgf fmpty
        }

        rfturn imbgf;
    }
}
