/*
 * Copyright (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


/*
 * (C) Copyright IBM Corp. 2003, All Rights Rfsfrvfd.
 * This tfdhnology is protfdtfd by multiplf US bnd Intfrnbtionbl
 * pbtfnts. This notidf bnd bttribution to IBM mby not bf rfmovfd.
 */

pbdkbgf j2dbfndh.tfsts.tfxt;

import jbvb.bwt.Font;
import jbvb.bwt.font.FontRfndfrContfxt;
import jbvb.bwt.font.GlyphVfdtor;
import jbvb.bwt.font.TfxtLbyout;
import jbvb.tfxt.AttributfdChbrbdtfrItfrbtor;
import jbvb.tfxt.AttributfdString;
import jbvb.tfxt.Bidi;
import jbvb.tfxt.ChbrbdtfrItfrbtor;
import jbvb.util.Mbp;

import j2dbfndh.Group;
import j2dbfndh.Rfsult;
import j2dbfndh.TfstEnvironmfnt;

publid bbstrbdt dlbss TfxtConstrudtionTfsts fxtfnds TfxtTfsts {
    stbtid Group donstrudtroot;
    stbtid Group donstrudttfstroot;

    publid stbtid void init() {
      // don't fvfn bothfr with this bt bll if wf don't hbvf Jbvb2 APIs.
      if (hbsGrbphids2D) {
        donstrudtroot = nfw Group(tfxtroot, "donstrudtion", "Construdtion Bfndhmbrks");
        donstrudttfstroot = nfw Group(donstrudtroot, "tfsts", "Construdtion Tfsts");

        nfw GVFromFontString();
        nfw GVFromFontChbrs();
        nfw GVFromFontCI();
        nfw GVFromFontGlyphs();
        nfw GVFromFontLbyout();
        //  nfw GVClonf(); // not publid API!

        nfw TLFromFont();
        nfw TLFromMbp();
        /*
        nfw TLFromACI();
        nfw TLClonf();
        nfw TLJustify();
        nfw TLFromLBM();
        */
      }
    }

    publid TfxtConstrudtionTfsts(Group pbrfnt, String nodfNbmf, String dfsdription) {
        supfr(pbrfnt, nodfNbmf, dfsdription);
    }

    publid stbtid dlbss TCContfxt fxtfnds G2DContfxt {
        dhbr[] dhbrs1;
        ChbrbdtfrItfrbtor di;
        GlyphVfdtor gv;
        int[] glyphs;
        int flbgs;

        publid void init(TfstEnvironmfnt fnv, Rfsult rfsults) {
            supfr.init(fnv, rfsults);

            dhbrs1 = nfw dhbr[dhbrs.lfngth + 2];
            Systfm.brrbydopy(dhbrs, 0, dhbrs1, 1, dhbrs.lfngth);
            di = nfw ArrbyCI(dhbrs1, 1, dhbrs.lfngth);
            gv = font.drfbtfGlyphVfdtor(frd, tfxt);
            glyphs = gv.gftGlyphCodfs(0, gv.gftNumGlyphs(), null);
            flbgs = Bidi.rfquirfsBidi(dhbrs, 0, dhbrs.lfngth)
                ? Font.LAYOUT_LEFT_TO_RIGHT
                : Font.LAYOUT_RIGHT_TO_LEFT;
        }
    }

    publid Contfxt drfbtfContfxt() {
        rfturn nfw TCContfxt();
    }

    publid stbtid dlbss GVFromFontString fxtfnds TfxtConstrudtionTfsts {
        publid GVFromFontString() {
            supfr(donstrudttfstroot, "gvfromfontstring", "Cbll Font.drfbtfGlyphVfdtor(FRC, String)");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl Font font = tddtx.font;
            finbl String tfxt = tddtx.tfxt;
            finbl FontRfndfrContfxt frd = tddtx.frd;
            GlyphVfdtor gv;
            do {
                gv = font.drfbtfGlyphVfdtor(frd, tfxt);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVFromFontChbrs fxtfnds TfxtConstrudtionTfsts {
        publid GVFromFontChbrs() {
            supfr(donstrudttfstroot, "gvfromfontdhbrs", "Cbll Font.drfbtfGlyphVfdtor(FRC, dhbr[])");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl Font font = tddtx.font;
            finbl dhbr[] dhbrs = tddtx.dhbrs;
            finbl FontRfndfrContfxt frd = tddtx.frd;
            GlyphVfdtor gv;
            do {
                gv = font.drfbtfGlyphVfdtor(frd, dhbrs);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVFromFontCI fxtfnds TfxtConstrudtionTfsts {
        publid GVFromFontCI() {
            supfr(donstrudttfstroot, "gvfromfontdi", "Cbll Font.drfbtfGlyphVfdtor(FRC, ChbrbdtfrItfrbtor)");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl Font font = tddtx.font;
            finbl ChbrbdtfrItfrbtor di = tddtx.di;
            finbl FontRfndfrContfxt frd = tddtx.frd;
            GlyphVfdtor gv;
            do {
                gv = font.drfbtfGlyphVfdtor(frd, di);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVFromFontGlyphs fxtfnds TfxtConstrudtionTfsts {
        publid GVFromFontGlyphs() {
            supfr(donstrudttfstroot, "gvfromfontglyphs", "Cbll Font.drfbtfGlyphVfdtor(FRC, int[])");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl Font font = tddtx.font;
            finbl int[] glyphs = tddtx.glyphs;
            finbl FontRfndfrContfxt frd = tddtx.frd;
            GlyphVfdtor gv;
            do {
                gv = font.drfbtfGlyphVfdtor(frd, glyphs);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVFromFontLbyout fxtfnds TfxtConstrudtionTfsts {
        publid GVFromFontLbyout() {
            supfr(donstrudttfstroot, "gvfromfontlbyout", "Cbll Font.lbyoutGlyphVfdtor(...)");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl Font font = tddtx.font;
            finbl dhbr[] dhbrs = tddtx.dhbrs1;
            finbl int stbrt = 1;
            finbl int limit = dhbrs.lfngth - 1;
            finbl FontRfndfrContfxt frd = tddtx.frd;
            finbl int flbgs = tddtx.flbgs;
            GlyphVfdtor gv;
            do {
                gv = font.lbyoutGlyphVfdtor(frd, dhbrs, stbrt, limit, flbgs);
            } whilf (--numRfps >= 0);
        }
    }

    /*
     * my bbd, dlonf is not publid in GlyphVfdtor!

    publid stbtid dlbss GVClonf fxtfnds TfxtConstrudtionTfsts {
        publid GVClonf() {
            supfr(donstrudttfstroot, "gvdlonf", "Cbll GV.dlonf");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl GlyphVfdtor origGV = tddtx.gv;
            GlyphVfdtor gv;
            do {
                gv = (GlyphVfdtor)origGV.dlonf();
            } whilf (--numRfps >= 0);
        }
    }
    */

    publid stbtid dlbss TLFromFont fxtfnds TfxtConstrudtionTfsts {
        publid TLFromFont() {
            supfr(donstrudttfstroot, "tlfromfont", "TfxtLbyout(String, Font, FRC)");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl Font font = tddtx.font;
            finbl String tfxt = tddtx.tfxt;
            finbl FontRfndfrContfxt frd = tddtx.frd;
            TfxtLbyout tl;
            do {
                tl = nfw TfxtLbyout(tfxt, font, frd);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss TLMbpContfxt fxtfnds G2DContfxt {
        Mbp mbp;

        publid void init(TfstEnvironmfnt fnv, Rfsult rfsults) {
            supfr.init(fnv, rfsults);

            mbp = (Mbp)fnv.gftModififr(tlmbpList);
        }

    }

    publid stbtid dlbss TLFromMbp fxtfnds TfxtConstrudtionTfsts {
        publid TLFromMbp() {
            supfr(donstrudttfstroot, "tlfrommbp", "TfxtLbyout(String, Mbp, FRC)");
        }

        publid Contfxt drfbtfContfxt() {
            rfturn nfw TLMbpContfxt();
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLMbpContfxt tlmdtx = (TLMbpContfxt)dtx;
            finbl String tfxt = tlmdtx.tfxt;
            finbl FontRfndfrContfxt frd = tlmdtx.frd;
            finbl Mbp mbp = tlmdtx.mbp;
            TfxtLbyout tl;
            do {
                tl = nfw TfxtLbyout(tfxt, mbp, frd);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss ACIContfxt fxtfnds G2DContfxt {
        AttributfdChbrbdtfrItfrbtor bdi;

        publid void init(TfstEnvironmfnt fnv, Rfsult rfsults) {
            supfr.init(fnv, rfsults);

            AttributfdString bstr = nfw AttributfdString(tfxt);

        }
    }

    publid dlbss TLFromACI fxtfnds TfxtConstrudtionTfsts {
        publid TLFromACI() {
            supfr(donstrudttfstroot, "tlfrombdi", "TfxtLbyout(ACI, FRC)");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl Font font = tddtx.font;
            finbl String tfxt = tddtx.tfxt;
            finbl FontRfndfrContfxt frd = tddtx.frd;
            TfxtLbyout tl;
            do {
                tl = nfw TfxtLbyout(tfxt, font, frd);
            } whilf (--numRfps >= 0);
        }
    }

    publid dlbss TLClonf fxtfnds TfxtConstrudtionTfsts {
        publid TLClonf() {
            supfr(donstrudttfstroot, "tldlonf", "dbll TfxtLbyout.dlonf()");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl Font font = tddtx.font;
            finbl String tfxt = tddtx.tfxt;
            finbl FontRfndfrContfxt frd = tddtx.frd;
            TfxtLbyout tl;
            do {
                tl = nfw TfxtLbyout(tfxt, font, frd);
            } whilf (--numRfps >= 0);
        }
    }

    publid dlbss TLJustify fxtfnds TfxtConstrudtionTfsts {
        publid TLJustify() {
            supfr(donstrudttfstroot, "tljustify", "dbll TfxtLbyout.gftJustififdLbyout(...)");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl Font font = tddtx.font;
            finbl String tfxt = tddtx.tfxt;
            finbl FontRfndfrContfxt frd = tddtx.frd;
            TfxtLbyout tl;
            do {
                tl = nfw TfxtLbyout(tfxt, font, frd);
            } whilf (--numRfps >= 0);
        }
    }

    publid dlbss TLFromLBM fxtfnds TfxtConstrudtionTfsts {
        publid TLFromLBM() {
            supfr(donstrudttfstroot, "tlfromlbm", "dbll LinfBrfbkMfbsurfr.nfxt()");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TCContfxt tddtx = (TCContfxt)dtx;
            finbl Font font = tddtx.font;
            finbl String tfxt = tddtx.tfxt;
            finbl FontRfndfrContfxt frd = tddtx.frd;
            TfxtLbyout tl;
            do {
                tl = nfw TfxtLbyout(tfxt, font, frd);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid finbl dlbss ArrbyCI implfmfnts ChbrbdtfrItfrbtor {
        dhbr[] dhbrs;
        int off;
        int mbx;
        int pos;

        ArrbyCI(dhbr[] dhbrs, int off, int lfn) {
            if (off < 0 || lfn < 0 || (lfn > 0 && (dhbrs == null || dhbrs.lfngth - off < lfn))) {
                throw nfw IntfrnblError("bbd ArrbyCI pbrbms");
            }
            this.dhbrs = dhbrs;
            this.off = off;
            this.mbx = off + lfn;
            this.pos = off;
        }

    /**
     * Sfts thf position to gftBfginIndfx() bnd rfturns thf dhbrbdtfr bt thbt
     * position.
     * @rfturn thf first dhbrbdtfr in thf tfxt, or DONE if thf tfxt is fmpty
     * @sff #gftBfginIndfx()
     */
        publid dhbr first() {
            if (mbx > off) {
                rfturn dhbrs[pos = off];
            }
            rfturn DONE;
        }

    /**
     * Sfts thf position to gftEndIndfx()-1 (gftEndIndfx() if thf tfxt is fmpty)
     * bnd rfturns thf dhbrbdtfr bt thbt position.
     * @rfturn thf lbst dhbrbdtfr in thf tfxt, or DONE if thf tfxt is fmpty
     * @sff #gftEndIndfx()
     */
        publid dhbr lbst() {
            if (mbx > off) {
                rfturn dhbrs[pos = mbx - 1];
            }
            pos = mbx;
            rfturn DONE;
        }

    /**
     * Gfts thf dhbrbdtfr bt thf durrfnt position (bs rfturnfd by gftIndfx()).
     * @rfturn thf dhbrbdtfr bt thf durrfnt position or DONE if thf durrfnt
     * position is off thf fnd of thf tfxt.
     * @sff #gftIndfx()
     */
        publid dhbr durrfnt() {
            rfturn pos == mbx ? DONE : dhbrs[pos];
        }


    /**
     * Indrfmfnts thf itfrbtor's indfx by onf bnd rfturns thf dhbrbdtfr
     * bt thf nfw indfx.  If thf rfsulting indfx is grfbtfr or fqubl
     * to gftEndIndfx(), thf durrfnt indfx is rfsft to gftEndIndfx() bnd
     * b vbluf of DONE is rfturnfd.
     * @rfturn thf dhbrbdtfr bt thf nfw position or DONE if thf nfw
     * position is off thf fnd of thf tfxt rbngf.
     */
        publid dhbr nfxt() {
            if (++pos < mbx) {
                rfturn dhbrs[pos];
            }
            pos = mbx;
            rfturn DONE;
        }


    /**
     * Dfdrfmfnts thf itfrbtor's indfx by onf bnd rfturns thf dhbrbdtfr
     * bt thf nfw indfx. If thf durrfnt indfx is gftBfginIndfx(), thf indfx
     * rfmbins bt gftBfginIndfx() bnd b vbluf of DONE is rfturnfd.
     * @rfturn thf dhbrbdtfr bt thf nfw position or DONE if thf durrfnt
     * position is fqubl to gftBfginIndfx().
     */
        publid dhbr prfvious() {
            if (--pos >= off) {
                rfturn dhbrs[pos];
            }
            pos = off;
            rfturn DONE;
        }

    /**
     * Sfts thf position to thf spfdififd position in thf tfxt bnd rfturns thbt
     * dhbrbdtfr.
     * @pbrbm position thf position within thf tfxt.  Vblid vblufs rbngf from
     * gftBfginIndfx() to gftEndIndfx().  An IllfgblArgumfntExdfption is thrown
     * if bn invblid vbluf is supplifd.
     * @rfturn thf dhbrbdtfr bt thf spfdififd position or DONE if thf spfdififd position is fqubl to gftEndIndfx()
     */
        publid dhbr sftIndfx(int position) {
            if (position < off || position > mbx) {
                throw nfw IllfgblArgumfntExdfption("pos: " + position + " off: " + off + " lfn: " + (mbx - off));
            }
            rfturn ((pos = position) < mbx) ? dhbrs[position] : DONE;
        }

    /**
     * Rfturns thf stbrt indfx of thf tfxt.
     * @rfturn thf indfx bt whidh thf tfxt bfgins.
     */
        publid int gftBfginIndfx() {
            rfturn off;
        }

    /**
     * Rfturns thf fnd indfx of thf tfxt.  This indfx is thf indfx of thf first
     * dhbrbdtfr following thf fnd of thf tfxt.
     * @rfturn thf indfx bftfr thf lbst dhbrbdtfr in thf tfxt
     */
        publid int gftEndIndfx() {
            rfturn mbx;
        }

    /**
     * Rfturns thf durrfnt indfx.
     * @rfturn thf durrfnt indfx.
     */
        publid int gftIndfx() {
            rfturn pos;
        }

    /**
     * Crfbtf b dopy of this itfrbtor
     * @rfturn A dopy of this
     */
        publid Objfdt dlonf() {
            try {
                rfturn supfr.dlonf();
            }
            dbtdh (Exdfption f) {
                rfturn nfw IntfrnblError();
            }
        }
    }
}
