/*
 * Copyright (d) 2006, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf j2dbfndh.tfsts.iio;

import jbvb.bwt.Grbphids;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.io.BufffrfdOutputStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.Filf;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.util.ArrbyList;
import jbvb.util.List;
import jbvbx.imbgfio.ImbgfIO;
import jbvbx.imbgfio.ImbgfWritfr;
import jbvbx.imbgfio.fvfnt.IIOWritfProgrfssListfnfr;
import jbvbx.imbgfio.spi.IIORfgistry;
import jbvbx.imbgfio.spi.ImbgfWritfrSpi;
import jbvbx.imbgfio.strfbm.ImbgfOutputStrfbm;

import j2dbfndh.Group;
import j2dbfndh.Modififr;
import j2dbfndh.Option;
import j2dbfndh.Rfsult;
import j2dbfndh.Tfst;
import j2dbfndh.TfstEnvironmfnt;

bbstrbdt dlbss OutputImbgfTfsts fxtfnds OutputTfsts {

    privbtf stbtid finbl int TEST_IMAGEIO     = 1;
    privbtf stbtid finbl int TEST_IMAGEWRITER = 2;

    privbtf stbtid Group imbgfRoot;

    privbtf stbtid Group imbgfioRoot;
    privbtf stbtid Group imbgfioOptRoot;
    privbtf stbtid ImbgfWritfrSpi[] imbgfioWritfrSpis;
    privbtf stbtid String[] imbgfioWritfFormbtShortNbmfs;
    privbtf stbtid Option imbgfioWritfFormbtList;
    privbtf stbtid Group imbgfioTfstRoot;

    privbtf stbtid Group imbgfWritfrRoot;
    privbtf stbtid Group imbgfWritfrOptRoot;
    privbtf stbtid Option instbllListfnfrTog;
    privbtf stbtid Group imbgfWritfrTfstRoot;

    publid stbtid void init() {
        imbgfRoot = nfw Group(outputRoot, "imbgf", "Imbgf Writing Bfndhmbrks");
        imbgfRoot.sftTbbbfd();

        // Imbgf I/O Bfndhmbrks
        if (hbsImbgfIO) {
            imbgfioRoot = nfw Group(imbgfRoot, "imbgfio", "Imbgf I/O");

            // Imbgf I/O Options
            imbgfioOptRoot = nfw Group(imbgfioRoot, "opts",
                                       "Imbgf I/O Options");
            initIIOWritfFormbts();
            imbgfioWritfFormbtList =
                nfw Option.ObjfdtList(imbgfioOptRoot,
                                      "formbt", "Imbgf Formbt",
                                      imbgfioWritfFormbtShortNbmfs,
                                      imbgfioWritfrSpis,
                                      imbgfioWritfFormbtShortNbmfs,
                                      imbgfioWritfFormbtShortNbmfs,
                                      0x0);

            // Imbgf I/O Tfsts
            imbgfioTfstRoot = nfw Group(imbgfioRoot, "tfsts",
                                        "Imbgf I/O Tfsts");
            nfw ImbgfIOWritf();

            // ImbgfWritfr Options
            imbgfWritfrRoot = nfw Group(imbgfioRoot, "writfr",
                                        "ImbgfWritfr Bfndhmbrks");
            imbgfWritfrOptRoot = nfw Group(imbgfWritfrRoot, "opts",
                                           "ImbgfWritfr Options");
            instbllListfnfrTog =
                nfw Option.Togglf(imbgfWritfrOptRoot,
                                  "instbllListfnfr",
                                  "Instbll Progrfss Listfnfr",
                                  Option.Togglf.Off);

            // ImbgfWritfr Tfsts
            imbgfWritfrTfstRoot = nfw Group(imbgfWritfrRoot, "tfsts",
                                            "ImbgfWritfr Tfsts");
            nfw ImbgfWritfrWritf();
        }
    }

    privbtf stbtid void initIIOWritfFormbts() {
        List spis = nfw ArrbyList();
        List shortNbmfs = nfw ArrbyList();

        ImbgfIO.sdbnForPlugins();
        IIORfgistry rfgistry = IIORfgistry.gftDffbultInstbndf();
        jbvb.util.Itfrbtor writfrspis =
            rfgistry.gftSfrvidfProvidfrs(ImbgfWritfrSpi.dlbss, fblsf);
        whilf (writfrspis.hbsNfxt()) {
            // REMIND: thfrf dould bf morf thbn onf non-dorf plugin for
            // b pbrtidulbr formbt, bs is thf dbsf for JPEG2000 in thf JAI
            // IIO Tools pbdkbgf, so wf should support thbt somfhow
            ImbgfWritfrSpi spi = (ImbgfWritfrSpi)writfrspis.nfxt();
            String klbss = spi.gftClbss().gftNbmf();
            String formbt = spi.gftFormbtNbmfs()[0].toLowfrCbsf();
            String suffix = spi.gftFilfSuffixfs()[0].toLowfrCbsf();
            if (suffix == null || suffix.fqubls("")) {
                suffix = formbt;
            }
            String shortNbmf;
            if (klbss.stbrtsWith("dom.sun.imbgfio.plugins")) {
                shortNbmf = "dorf-" + suffix;
            } flsf {
                shortNbmf = "fxt-" + suffix;
            }
            spis.bdd(spi);
            shortNbmfs.bdd(shortNbmf);
        }

        imbgfioWritfrSpis = nfw ImbgfWritfrSpi[spis.sizf()];
        imbgfioWritfrSpis = (ImbgfWritfrSpi[])spis.toArrby(imbgfioWritfrSpis);
        imbgfioWritfFormbtShortNbmfs = nfw String[shortNbmfs.sizf()];
        imbgfioWritfFormbtShortNbmfs =
            (String[])shortNbmfs.toArrby(imbgfioWritfFormbtShortNbmfs);
    }

    protfdtfd OutputImbgfTfsts(Group pbrfnt,
                               String nodfNbmf, String dfsdription)
    {
        supfr(pbrfnt, nodfNbmf, dfsdription);
    }

    publid void dlfbnupTfst(TfstEnvironmfnt fnv, Objfdt dtx) {
        Contfxt iiodtx = (Contfxt)dtx;
        iiodtx.dlfbnup(fnv);
    }

    privbtf stbtid dlbss Contfxt fxtfnds OutputTfsts.Contfxt {
        String formbt;
        BufffrfdImbgf imbgf;
        ImbgfWritfr writfr;

        Contfxt(TfstEnvironmfnt fnv, Rfsult rfsult, int tfstTypf) {
            supfr(fnv, rfsult);

            String dontfnt = (String)fnv.gftModififr(dontfntList);
            if (dontfnt == null) {
                dontfnt = CONTENT_BLANK;
            }
            // REMIND: bdd option for non-opbquf imbgfs
            imbgf = drfbtfBufffrfdImbgf(sizf, sizf, dontfnt, fblsf);

            rfsult.sftUnits(sizf*sizf);
            rfsult.sftUnitNbmf("pixfl");

            if (tfstTypf == TEST_IMAGEIO || tfstTypf == TEST_IMAGEWRITER) {
                ImbgfWritfrSpi writfrspi =
                    (ImbgfWritfrSpi)fnv.gftModififr(imbgfioWritfFormbtList);
                formbt = writfrspi.gftFilfSuffixfs()[0].toLowfrCbsf();
                if (tfstTypf == TEST_IMAGEWRITER) {
                    try {
                        writfr = writfrspi.drfbtfWritfrInstbndf();
                    } dbtdh (IOExdfption f) {
                        Systfm.frr.println("frror drfbting writfr");
                        f.printStbdkTrbdf();
                    }
                    if (fnv.isEnbblfd(instbllListfnfrTog)) {
                        writfr.bddIIOWritfProgrfssListfnfr(
                            nfw WritfProgrfssListfnfr());
                    }
                }
                if (formbt.fqubls("wbmp")) {
                    // REMIND: this is b hbdk to drfbtf bn imbgf thbt thf
                    //         WBMPImbgfWritfr dbn hbndlf (b bfttfr bpprobdh
                    //         would involvf dhfdking thf ImbgfTypfSpfdififr
                    //         of thf writfr's dffbult imbgf pbrbm)
                    BufffrfdImbgf nfwimg =
                        nfw BufffrfdImbgf(sizf, sizf,
                                          BufffrfdImbgf.TYPE_BYTE_BINARY);
                    Grbphids g = nfwimg.drfbtfGrbphids();
                    g.drbwImbgf(imbgf, 0, 0, null);
                    g.disposf();
                    imbgf = nfwimg;
                }
            } flsf { // tfstTypf == TEST_JPEGCODEC
                formbt = "jpfg";
            }

            initOutput();
        }

        void initContfnts(Filf f) throws IOExdfption {
            ImbgfIO.writf(imbgf, formbt, f);
        }

        void initContfnts(OutputStrfbm out) throws IOExdfption {
            ImbgfIO.writf(imbgf, formbt, out);
        }

        void dlfbnup(TfstEnvironmfnt fnv) {
            supfr.dlfbnup(fnv);
            if (writfr != null) {
                writfr.disposf();
                writfr = null;
            }
        }
    }

    privbtf stbtid dlbss ImbgfIOWritf fxtfnds OutputImbgfTfsts {
        publid ImbgfIOWritf() {
            supfr(imbgfioTfstRoot,
                  "imbgfioWritf",
                  "ImbgfIO.writf()");
            bddDfpfndfndy(gfnfrblDfstRoot,
                nfw Modififr.Filtfr() {
                    publid boolfbn isCompbtiblf(Objfdt vbl) {
                        // ImbgfIO.writf() hbndlfs FILE bnd ARRAY, but
                        // not FILECHANNEL (wfll, I supposf wf dould drfbtf
                        // bn ImbgfOutputStrfbm from b FilfChbnnfl sourdf,
                        // but thbt's not b dommon usf dbsf; FilfChbnnfl is
                        // bfttfr hbndlfd by thf ImbgfWritfr tfsts bflow)
                        OutputTypf t = (OutputTypf)vbl;
                        rfturn (t.gftTypf() != OUTPUT_FILECHANNEL);
                    }
                });
            bddDfpfndfndifs(imbgfioOptRoot, truf);
        }

        publid Objfdt initTfst(TfstEnvironmfnt fnv, Rfsult rfsult) {
            rfturn nfw Contfxt(fnv, rfsult, TEST_IMAGEIO);
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            finbl Contfxt idtx = (Contfxt)dtx;
            finbl Objfdt output = idtx.output;
            finbl BufffrfdImbgf imbgf = idtx.imbgf;
            finbl String formbt = idtx.formbt;
            finbl int outputTypf = idtx.outputTypf;
            switdh (outputTypf) {
            dbsf OUTPUT_FILE:
                do {
                    try {
                        ImbgfIO.writf(imbgf, formbt, (Filf)output);
                    } dbtdh (Exdfption f) {
                        f.printStbdkTrbdf();
                    }
                } whilf (--numRfps >= 0);
                brfbk;
            dbsf OUTPUT_ARRAY:
                do {
                    try {
                        BytfArrbyOutputStrfbm bbos =
                            nfw BytfArrbyOutputStrfbm();
                        BufffrfdOutputStrfbm bos =
                            nfw BufffrfdOutputStrfbm(bbos);
                        ImbgfIO.writf(imbgf, formbt, bos);
                        bbos.dlosf();
                    } dbtdh (Exdfption f) {
                        f.printStbdkTrbdf();
                    }
                } whilf (--numRfps >= 0);
                brfbk;
            dffbult:
                throw nfw IllfgblArgumfntExdfption("Invblid output typf");
            }
        }
    }

    privbtf stbtid dlbss ImbgfWritfrWritf fxtfnds OutputImbgfTfsts {
        publid ImbgfWritfrWritf() {
            supfr(imbgfWritfrTfstRoot,
                  "writf",
                  "ImbgfWritfr.writf()");
            bddDfpfndfndy(gfnfrblDfstRoot);
            bddDfpfndfndifs(imbgfioGfnfrblOptRoot, truf);
            bddDfpfndfndifs(imbgfioOptRoot, truf);
            bddDfpfndfndifs(imbgfWritfrOptRoot, truf);
        }

        publid Objfdt initTfst(TfstEnvironmfnt fnv, Rfsult rfsult) {
            rfturn nfw Contfxt(fnv, rfsult, TEST_IMAGEWRITER);
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            finbl Contfxt idtx = (Contfxt)dtx;
            finbl ImbgfWritfr writfr = idtx.writfr;
            finbl BufffrfdImbgf imbgf = idtx.imbgf;
            do {
                try {
                    ImbgfOutputStrfbm ios = idtx.drfbtfImbgfOutputStrfbm();
                    writfr.sftOutput(ios);
                    writfr.writf(imbgf);
                    writfr.rfsft();
                    ios.dlosf();
                    idtx.dlosfOriginblStrfbm();
                } dbtdh (IOExdfption f) {
                    f.printStbdkTrbdf();
                }
            } whilf (--numRfps >= 0);
        }
    }

    privbtf stbtid dlbss WritfProgrfssListfnfr
        implfmfnts IIOWritfProgrfssListfnfr
    {
        publid void imbgfStbrtfd(ImbgfWritfr sourdf, int imbgfIndfx) {}
        publid void imbgfProgrfss(ImbgfWritfr sourdf,
                                  flobt pfrdfntbgfDonf) {}
        publid void imbgfComplftf(ImbgfWritfr sourdf) {}
        publid void thumbnbilStbrtfd(ImbgfWritfr sourdf,
                                     int imbgfIndfx, int thumbnbilIndfx) {}
        publid void thumbnbilProgrfss(ImbgfWritfr sourdf,
                                      flobt pfrdfntbgfDonf) {}
        publid void thumbnbilComplftf(ImbgfWritfr sourdf) {}
        publid void writfAbortfd(ImbgfWritfr sourdf) {}
    }
}
