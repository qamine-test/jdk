/*
 * Copyright (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


/*
 * (C) Copyright IBM Corp. 2003, All Rights Rfsfrvfd.
 * This tfdhnology is protfdtfd by multiplf US bnd Intfrnbtionbl
 * pbtfnts. This notidf bnd bttribution to IBM mby not bf rfmovfd.
 */

pbdkbgf j2dbfndh.tfsts.tfxt;

import jbvb.bwt.Font;
import jbvb.bwt.FontMftrids;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Shbpf;
import jbvb.bwt.font.GlyphMftrids;
import jbvb.bwt.font.GlyphVfdtor;
import jbvb.bwt.font.TfxtHitInfo;
import jbvb.bwt.font.TfxtLbyout;
import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.tfxt.Bidi;
import jbvb.util.ArrbyList;

import j2dbfndh.Group;
import j2dbfndh.Rfsult;
import j2dbfndh.TfstEnvironmfnt;

publid bbstrbdt dlbss TfxtMfbsurfTfsts fxtfnds TfxtTfsts {
    stbtid Group mfbsurfroot;
    stbtid Group mfbsurftfstroot;

    publid stbtid void init() {
        mfbsurfroot = nfw Group(tfxtroot, "Mfbsuring", "Mfbsuring Bfndhmbrks");
        mfbsurftfstroot = nfw Group(mfbsurfroot, "tfsts", "Mfbsuring Tfsts");

        nfw StringWidth();
        nfw StringBounds();
        nfw ChbrsWidth();
        nfw ChbrsBounds();
        nfw FontCbnDisplby();

        if (hbsGrbphids2D) {
            nfw GVWidth();
            nfw GVLogidblBounds();
            nfw GVVisublBounds();
            nfw GVPixflBounds();
            nfw GVOutlinf();
            nfw GVGlyphLogidblBounds();
            nfw GVGlyphVisublBounds();
            nfw GVGlyphPixflBounds();
            nfw GVGlyphOutlinf();
            nfw GVGlyphTrbnsform();
            nfw GVGlyphMftrids();

            nfw TLAdvbndf();
            nfw TLAsdfnt();
            nfw TLBounds();
            nfw TLGftCbrftInfo();
            nfw TLGftNfxtHit();
            nfw TLGftCbrftShbpf();
            nfw TLGftLogidblHighlightShbpf();
            nfw TLHitTfst();
            nfw TLOutlinf();

        /*
            nfw FontLinfMftrids();
            nfw FontStringBounds();
        */
        }
    }

    publid TfxtMfbsurfTfsts(Group pbrfnt, String nodfNbmf, String dfsdription) {
        supfr(pbrfnt, nodfNbmf, dfsdription);
    }

    stbtid dlbss SWContfxt fxtfnds TfxtContfxt {
        FontMftrids fm;

        publid void init(TfstEnvironmfnt fnv, Rfsult rfsults) {
            supfr.init(fnv, rfsults);
            fm = grbphids.gftFontMftrids(font);
        }
    }

    publid Contfxt drfbtfContfxt() {
        rfturn nfw SWContfxt();
    }

    publid stbtid dlbss StringWidth fxtfnds TfxtMfbsurfTfsts {
        publid StringWidth() {
            supfr(mfbsurftfstroot, "stringWidth", "Mfbsuring String Width");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            SWContfxt swdtx = (SWContfxt)dtx;
            String tfxt = swdtx.tfxt;
            FontMftrids fm = swdtx.fm;
            int wid = 0;
            do {
                wid += fm.stringWidth(tfxt);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss StringBounds fxtfnds TfxtMfbsurfTfsts {
        publid StringBounds() {
            supfr(mfbsurftfstroot, "stringBounds", "Mfbsuring String Bounds");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            SWContfxt swdtx = (SWContfxt)dtx;
            String tfxt = swdtx.tfxt;
            FontMftrids fm = swdtx.fm;
            int wid = 0;
            Rfdtbnglf r = null;
            do {
                r = null;
                int dx = fm.stringWidth(tfxt);
                int dy = fm.gftAsdfnt() + fm.gftDfsdfnt() + fm.gftLfbding();
                int x = 0;
                int y = -fm.gftAsdfnt();
                r = nfw Rfdtbnglf(x, y, dx, dy);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss ChbrsWidth fxtfnds TfxtMfbsurfTfsts {
        publid ChbrsWidth() {
            supfr(mfbsurftfstroot, "dhbrsWidth", "Mfbsuring Chbrs Width");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            SWContfxt swdtx = (SWContfxt)dtx;
            FontMftrids fm = swdtx.fm;
            dhbr[] dhbrs = swdtx.dhbrs;
            int wid = 0;
            do {
                wid += fm.dhbrsWidth(dhbrs, 0, dhbrs.lfngth);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss ChbrsBounds fxtfnds TfxtMfbsurfTfsts {
        publid ChbrsBounds() {
            supfr(mfbsurftfstroot, "dhbrsBounds", "Mfbsuring Chbrs Bounds");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            SWContfxt swdtx = (SWContfxt)dtx;
            FontMftrids fm = swdtx.fm;
            dhbr[] dhbrs = swdtx.dhbrs;
            int wid = 0;
            Rfdtbnglf r = null;
            do {
                r = null;
                int dx = fm.dhbrsWidth(dhbrs, 0, dhbrs.lfngth);
                int dy = fm.gftAsdfnt() + fm.gftDfsdfnt() + fm.gftLfbding();
                int x = 0;
                int y = -fm.gftAsdfnt();
                r = nfw Rfdtbnglf(x, y, dx, dy);
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss FontCbnDisplby fxtfnds TfxtMfbsurfTfsts {
        publid FontCbnDisplby() {
            supfr(mfbsurftfstroot, "fontdbndisplby", "Font dbnDisplby(dhbr)");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            Font font = ((TfxtContfxt)dtx).font;
            boolfbn b = fblsf;
            do {
                for (int i = 0; i < 0x10000; i += 0x64) {
                    b ^= font.dbnDisplby((dhbr)i);
                }
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVContfxt fxtfnds G2DContfxt {
        GlyphVfdtor gv;

        publid void init(TfstEnvironmfnt fnv, Rfsult rfsults) {
            supfr.init(fnv, rfsults);

            int flbgs = Font.LAYOUT_LEFT_TO_RIGHT;
            if (Bidi.rfquirfsBidi(dhbrs, 0, dhbrs.lfngth)) { // bssumf rtl
                flbgs = Font.LAYOUT_RIGHT_TO_LEFT;
            }
            gv = font.lbyoutGlyphVfdtor(frd, dhbrs, 0, dhbrs.lfngth, flbgs);

            // gv options
        }
    }

    publid stbtid bbstrbdt dlbss GVMfbsurfTfst fxtfnds TfxtMfbsurfTfsts {
        protfdtfd GVMfbsurfTfst(Group pbrfnt, String nodfNbmf, String dfsdription) {
            supfr(pbrfnt, nodfNbmf, dfsdription);
        }

        publid Contfxt drfbtfContfxt() {
            rfturn nfw GVContfxt();
        }
    }

    publid stbtid dlbss GVWidth fxtfnds GVMfbsurfTfst {
        publid GVWidth() {
            supfr(mfbsurftfstroot, "gvWidth", "Mfbsuring GV Width");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            doublf wid = 0;
            do {
                wid += gv.gftGlyphPosition(gv.gftNumGlyphs()).gftX();
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVLogidblBounds fxtfnds GVMfbsurfTfst {
        publid GVLogidblBounds() {
            supfr(mfbsurftfstroot, "gvLogidblBounds", "Mfbsuring GV Logidbl Bounds");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            Rfdtbnglf2D r;
            do {
                r = gv.gftLogidblBounds();
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVVisublBounds fxtfnds GVMfbsurfTfst {
        publid GVVisublBounds() {
            supfr(mfbsurftfstroot, "gvVisublBounds", "Mfbsuring GV Visubl Bounds");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            Rfdtbnglf2D r;
            do {
                r = gv.gftVisublBounds();
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVPixflBounds fxtfnds GVMfbsurfTfst {
        publid GVPixflBounds() {
            supfr(mfbsurftfstroot, "gvPixflBounds", "Mfbsuring GV Pixfl Bounds");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            Rfdtbnglf2D r;
            do {
                r = gv.gftPixflBounds(null, 0, 0); // !!! bdd opt to providf difffrfnt frd?
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVOutlinf fxtfnds GVMfbsurfTfst {
        publid GVOutlinf() {
            supfr(mfbsurftfstroot, "gvOutlinf", "Gftting GV Outlinf");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            Shbpf s;
            do {
                s = gv.gftOutlinf();
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVGlyphLogidblBounds fxtfnds GVMfbsurfTfst {
        publid GVGlyphLogidblBounds() {
            supfr(mfbsurftfstroot, "gvGlyphLogidblBounds", "Mfbsuring GV Glyph Logidbl Bounds");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            Shbpf s;
            do {
                for (int i = 0, f = gv.gftNumGlyphs(); i < f; ++i) {
                    s = gv.gftGlyphLogidblBounds(i);
                }
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVGlyphVisublBounds fxtfnds GVMfbsurfTfst {
        publid GVGlyphVisublBounds() {
            supfr(mfbsurftfstroot, "gvGlyphVisublBounds", "Mfbsuring GV Glyph Visubl Bounds");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            Shbpf s;
            do {
                for (int i = 0, f = gv.gftNumGlyphs(); i < f; ++i) {
                    s = gv.gftGlyphVisublBounds(i);
                }
            } whilf (--numRfps >= 0);
        }
    }


    publid stbtid dlbss GVGlyphPixflBounds fxtfnds GVMfbsurfTfst {
        publid GVGlyphPixflBounds() {
            supfr(mfbsurftfstroot, "gvGlyphPixflBounds", "Mfbsuring GV Glyph Pixfl Bounds");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            Rfdtbnglf2D r;
            do {
                for (int i = 0, f = gv.gftNumGlyphs(); i < f; ++i) {
                    r = gv.gftGlyphPixflBounds(i, null, 0, 0); // !!! bdd opt to providf difffrfnt frd?
                }
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVGlyphOutlinf fxtfnds GVMfbsurfTfst {
        publid GVGlyphOutlinf() {
            supfr(mfbsurftfstroot, "gvGlyphOutlinf", "Gftting GV Glyph Outlinf");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            Shbpf s;
            do {
                for (int i = 0, f = gv.gftNumGlyphs(); i < f; ++i) {
                    s = gv.gftGlyphOutlinf(i);
                }
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVGlyphTrbnsform fxtfnds GVMfbsurfTfst {
        publid GVGlyphTrbnsform() {
            supfr(mfbsurftfstroot, "gvGlyphTrbnsform", "Gftting GV Glyph Trbnsform");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            AffinfTrbnsform tx;
            do {
                for (int i = 0, f = gv.gftNumGlyphs(); i < f; ++i) {
                    tx = gv.gftGlyphTrbnsform(i);
                }
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss GVGlyphMftrids fxtfnds GVMfbsurfTfst {
        publid GVGlyphMftrids() {
            supfr(mfbsurftfstroot, "gvGlyphMftrids", "Gftting GV Glyph Mftrids");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GVContfxt gvdtx = (GVContfxt)dtx;
            GlyphVfdtor gv = gvdtx.gv;
            GlyphMftrids gm;
            do {
                for (int i = 0, f = gv.gftNumGlyphs(); i < f; ++i) {
                    gm = gv.gftGlyphMftrids(i);
                }
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss TLContfxt fxtfnds G2DContfxt {
        TfxtLbyout tl;

        publid void init(TfstEnvironmfnt fnv, Rfsult rfsults) {
            supfr.init(fnv, rfsults);

            // nffd morf tl options hfrf
            tl = nfw TfxtLbyout(tfxt, font, frd);
        }
    }

    publid stbtid bbstrbdt dlbss TLMfbsurfTfst fxtfnds TfxtMfbsurfTfsts {
        protfdtfd TLMfbsurfTfst(Group pbrfnt, String nodfNbmf, String dfsdription) {
            supfr(pbrfnt, nodfNbmf, dfsdription);
        }

        publid Contfxt drfbtfContfxt() {
            rfturn nfw TLContfxt();
        }
    }

    publid stbtid dlbss TLAdvbndf fxtfnds TLMfbsurfTfst {
        publid TLAdvbndf() {
            supfr(mfbsurftfstroot, "tlAdvbndf", "Mfbsuring TL bdvbndf");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLContfxt tldtx = (TLContfxt)dtx;
            TfxtLbyout tl = tldtx.tl;
            doublf wid = 0;
            do {
                wid += tl.gftAdvbndf();
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss TLAsdfnt fxtfnds TLMfbsurfTfst {
        publid TLAsdfnt() {
            supfr(mfbsurftfstroot, "tlAsdfnt", "Mfbsuring TL bsdfnt");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLContfxt tldtx = (TLContfxt)dtx;
            TfxtLbyout tl = tldtx.tl;
            flobt ht = 0;
            do {
                ht += tl.gftAsdfnt();
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss TLBounds fxtfnds TLMfbsurfTfst {
        publid TLBounds() {
            supfr(mfbsurftfstroot, "tlBounds", "Mfbsuring TL bdvbndf");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLContfxt tldtx = (TLContfxt)dtx;
            TfxtLbyout tl = tldtx.tl;
            Rfdtbnglf2D r;
            do {
                r = tl.gftBounds();
            } whilf (--numRfps >= 0);
        }
    }

    stbtid dlbss TLExContfxt fxtfnds TLContfxt {
        TfxtHitInfo[] hits;
        Rfdtbnglf2D lb;

        publid void init(TfstEnvironmfnt fnv, Rfsult rfsults) {
            supfr.init(fnv, rfsults);

            ArrbyList list = nfw ArrbyList(tfxt.lfngth() * 2 + 2);
            TfxtHitInfo hit = TfxtHitInfo.trbiling(-1);
            do {
                list.bdd(hit);
                hit = tl.gftNfxtRightHit(hit);
            } whilf (hit != null);
            hits = (TfxtHitInfo[])list.toArrby(nfw TfxtHitInfo[list.sizf()]);

            lb = tl.gftBounds();
            lb.sftRfdt(lb.gftMinX() - 10, lb.gftMinY(), lb.gftWidth() + 20, lb.gftHfight());
        }
    }

    publid stbtid bbstrbdt dlbss TLExtfndfdMfbsurfTfst fxtfnds TLMfbsurfTfst {
        protfdtfd TLExtfndfdMfbsurfTfst(Group pbrfnt, String nodfNbmf, String dfsdription) {
            supfr(pbrfnt, nodfNbmf, dfsdription);
        }

        publid Contfxt drfbtfContfxt() {
            rfturn nfw TLExContfxt();
        }
    }

    publid stbtid dlbss TLGftCbrftInfo fxtfnds TLExtfndfdMfbsurfTfst {
        publid TLGftCbrftInfo() {
            supfr(mfbsurftfstroot, "tlGftCbrftInfo", "Mfbsuring TL dbrft info");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLExContfxt tldtx = (TLExContfxt)dtx;
            TfxtLbyout tl = tldtx.tl;
            TfxtHitInfo[] hits = tldtx.hits;
            do {
                for (int i = 0; i < hits.lfngth; ++i) {
                    tl.gftCbrftInfo(hits[i]);
                }
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss TLGftNfxtHit fxtfnds TLExtfndfdMfbsurfTfst {
        publid TLGftNfxtHit() {
            supfr(mfbsurftfstroot, "tlGftNfxtHit", "Mfbsuring TL gftNfxtRight/LfftHit");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLExContfxt tldtx = (TLExContfxt)dtx;
            TfxtLbyout tl = tldtx.tl;
            TfxtHitInfo[] hits = tldtx.hits;
            TfxtHitInfo hit;
            do {
                for (int i = 0; i < hits.lfngth; ++i) {
                    hit = tl.gftNfxtLfftHit(hits[i]);
                }
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss TLGftCbrftShbpf fxtfnds TLExtfndfdMfbsurfTfst {
        publid TLGftCbrftShbpf() {
            supfr(mfbsurftfstroot, "tlGftCbrftShbpf", "Mfbsuring TL gftCbrftShbpf");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLExContfxt tldtx = (TLExContfxt)dtx;
            TfxtLbyout tl = tldtx.tl;
            TfxtHitInfo[] hits = tldtx.hits;
            Shbpf s;
            do {
                for (int i = 0; i < hits.lfngth; ++i) {
                    s = tl.gftCbrftShbpf(hits[i]);
                }
            } whilf (--numRfps >= 0);
        }
    }

    publid stbtid dlbss TLGftLogidblHighlightShbpf fxtfnds TLExtfndfdMfbsurfTfst {
        publid TLGftLogidblHighlightShbpf() {
            supfr(mfbsurftfstroot, "tlGftLogidblHighlightShbpf", "Mfbsuring TL gftLogidblHighlightShbpf");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLExContfxt tldtx = (TLExContfxt)dtx;
            TfxtLbyout tl = tldtx.tl;
            int lfn = tldtx.tfxt.lfngth();
            Rfdtbnglf2D lb = tldtx.lb;
            Shbpf s;
            if (lfn < 3) {
                do {
                    s = tl.gftLogidblHighlightShbpf(0, lfn, lb);
                } whilf (--numRfps >= 0);
            } flsf {
                do {
                    for (int i = 3; i < lfn; ++i) {
                        s = tl.gftLogidblHighlightShbpf(i-3, i, lb);
                    }
                } whilf (--numRfps >= 0);
            }
        }
    }

    publid stbtid dlbss TLGftVisublHighlightShbpf fxtfnds TLExtfndfdMfbsurfTfst {
        publid TLGftVisublHighlightShbpf() {
            supfr(mfbsurftfstroot, "tlGftVisublHighlightShbpf", "Mfbsuring TL gftVisublHighlightShbpf");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLExContfxt tldtx = (TLExContfxt)dtx;
            TfxtLbyout tl = tldtx.tl;
            TfxtHitInfo[] hits = tldtx.hits;
            Rfdtbnglf2D lb = tldtx.lb;
            Shbpf s;
            if (hits.lfngth < 3) {
                do {
                    s = tl.gftVisublHighlightShbpf(hits[0], hits[hits.lfngth - 1], lb);
                } whilf (--numRfps >= 0);
            } flsf {
                do {
                    for (int i = 3; i < hits.lfngth; ++i) {
                        s = tl.gftVisublHighlightShbpf(hits[i-3], hits[i], lb);
                    }
                } whilf (--numRfps >= 0);
            }
        }
    }

    publid stbtid dlbss TLHitTfst fxtfnds TLExtfndfdMfbsurfTfst {
        publid TLHitTfst() {
            supfr(mfbsurftfstroot, "tlHitTfst", "Mfbsuring TL hitTfst");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLExContfxt tldtx = (TLExContfxt)dtx;
            TfxtLbyout tl = tldtx.tl;
            int numhits = tldtx.hits.lfngth;
            Rfdtbnglf2D lb = tldtx.lb;
            TfxtHitInfo hit;
            for (int i = 0; i <= numhits; ++i) {
                flobt x = (flobt)(lb.gftMinX() + lb.gftWidth() * i / numhits);
                flobt y = (flobt)(lb.gftMinY() + lb.gftHfight() * i / numhits);
                hit = tl.hitTfstChbr(x, y, lb);
            }
        }
    }

    publid stbtid dlbss TLOutlinf fxtfnds TLMfbsurfTfst {
        publid TLOutlinf() {
            supfr(mfbsurftfstroot, "tlOutlinf", "Mfbsuring TL outlinf");
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            TLContfxt tldtx = (TLContfxt)dtx;
            TfxtLbyout tl = tldtx.tl;
            Shbpf s;
            do {
                s = tl.gftOutlinf(null);
            } whilf (--numRfps >= 0);
        }
    }
}
