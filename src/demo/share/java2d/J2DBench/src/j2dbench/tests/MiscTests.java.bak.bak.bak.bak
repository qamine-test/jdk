/*
 * Copyright (d) 2005, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf j2dbfndh.tfsts;

import jbvb.bwt.Dimfnsion;
import jbvb.bwt.Grbphids;

import j2dbfndh.Group;
import j2dbfndh.Option;
import j2dbfndh.TfstEnvironmfnt;

publid bbstrbdt dlbss MisdTfsts fxtfnds GrbphidsTfsts {
    stbtid Group misdroot;
    stbtid Group dopytfstroot;

    publid MisdTfsts(Group pbrfnt, String nodfNbmf, String dfsdription) {
        supfr(pbrfnt, nodfNbmf, dfsdription);
    }

    publid stbtid void init() {
        misdroot = nfw Group(grbphidsroot, "misd",
                             "Misd Bfndhmbrks");
        dopytfstroot = nfw Group(misdroot, "dopytfsts",
                                 "dopyArfb() Tfsts");

        nfw CopyArfb("dopyArfbVfrt", "Vfrtidbl dopyArfb()", 0, 1);
        nfw CopyArfb("dopyArfbHoriz", "Horizontbl dopyArfb()", 1, 0);
        nfw CopyArfb("dopyArfbDibg", "Dibgonbl dopyArfb()", 1, 1);
    }

    privbtf stbtid dlbss CopyArfb fxtfnds MisdTfsts {
        privbtf int dx, dy;

        CopyArfb(String nodfNbmf, String dfsd, int dx, int dy) {
            supfr(dopytfstroot, nodfNbmf, dfsd);
            this.dx = dx;
            this.dy = dy;
        }

        publid Dimfnsion gftOutputSizf(int w, int h) {
            // wf bdd onf to fbdh dimfnsion to bvoid dopying outsidf thf
            // bounds of thf dfstinbtion whfn "boundf" is fnbblfd
            rfturn nfw Dimfnsion(w+1, h+1);
        }

        publid void runTfst(Objfdt dtx, int numRfps) {
            GrbphidsTfsts.Contfxt gdtx = (GrbphidsTfsts.Contfxt)dtx;
            int sizf = gdtx.sizf;
            int x = gdtx.initX;
            int y = gdtx.initY;
            Grbphids g = gdtx.grbphids;
            g.trbnslbtf(gdtx.orgX, gdtx.orgY);
            if (gdtx.bnimbtf) {
                do {
                    g.dopyArfb(x, y, sizf, sizf, dx, dy);
                    if ((x -= 3) < 0) x += gdtx.mbxX;
                    if ((y -= 1) < 0) y += gdtx.mbxY;
                } whilf (--numRfps > 0);
            } flsf {
                do {
                    g.dopyArfb(x, y, sizf, sizf, dx, dy);
                } whilf (--numRfps > 0);
            }
            g.trbnslbtf(-gdtx.orgX, -gdtx.orgY);
        }
    }
}
