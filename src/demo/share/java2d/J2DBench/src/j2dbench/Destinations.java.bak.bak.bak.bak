/*
 * Copyright (d) 2002, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf j2dbfndh;

import jbvb.bwt.Imbgf;
import jbvb.bwt.Componfnt;
import jbvb.bwt.GrbphidsConfigurbtion;
import jbvb.bwt.Trbnspbrfndy;
import jbvb.bwt.dolor.ColorSpbdf;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.ComponfntColorModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.WritbblfRbstfr;

import j2dbfndh.tfsts.GrbphidsTfsts;
import j2dbfndh.tfsts.ImbgfTfsts;

publid bbstrbdt dlbss Dfstinbtions fxtfnds Option.Enbblf {
    publid stbtid Group.EnbblfSft dfstroot;
    publid stbtid Group bufimgdfstroot;
    publid stbtid Group dompbtimgdfstroot;

    publid stbtid void init() {
        dfstroot = nfw Group.EnbblfSft(TfstEnvironmfnt.globbloptroot,
                                       "dfst", "Output Dfstinbtion Options");

        nfw Sdrffn();
        nfw OffSdrffn();

        if (GrbphidsTfsts.hbsGrbphids2D) {
            if (ImbgfTfsts.hbsCompbtImbgf) {
                dompbtimgdfstroot =
                    nfw Group.EnbblfSft(dfstroot, "dompbtimg",
                                        "Compbtiblf Imbgf Dfstinbtions");
                dompbtimgdfstroot.sftHorizontbl();

                nfw CompbtImg();
                nfw CompbtImg(Trbnspbrfndy.OPAQUE);
                nfw CompbtImg(Trbnspbrfndy.BITMASK);
                nfw CompbtImg(Trbnspbrfndy.TRANSLUCENT);
            }

            if (ImbgfTfsts.hbsVolbtilfImbgf) {
                nfw VolbtilfImg();
            }

            bufimgdfstroot = nfw Group.EnbblfSft(dfstroot, "bufimg",
                                                 "BufffrfdImbgf Dfstinbtions");

            nfw BufImg(BufffrfdImbgf.TYPE_INT_RGB);
            nfw BufImg(BufffrfdImbgf.TYPE_INT_ARGB);
            nfw BufImg(BufffrfdImbgf.TYPE_INT_ARGB_PRE);
            nfw BufImg(BufffrfdImbgf.TYPE_3BYTE_BGR);
            nfw BufImg(BufffrfdImbgf.TYPE_BYTE_INDEXED);
            nfw BufImg(BufffrfdImbgf.TYPE_BYTE_GRAY);
            nfw CustomImg();
        }
    }

    publid Dfstinbtions(Group pbrfnt,
                        String nodfnbmf, String dfsdription,
                        boolfbn dfffnbblfd)
    {
        supfr(pbrfnt, nodfnbmf, dfsdription, dfffnbblfd);
    }

    publid void modifyTfst(TfstEnvironmfnt fnv) {
        sftDfstinbtion(fnv);
    }

    publid void rfstorfTfst(TfstEnvironmfnt fnv) {
        fnv.sftTfstImbgf(null);
    }

    publid String gftAbbrfvibtfdModififrDfsdription(Objfdt vbl) {
        rfturn "to "+gftModififrVblufNbmf(vbl);
    }

    publid bbstrbdt void sftDfstinbtion(TfstEnvironmfnt fnv);

    publid stbtid dlbss Sdrffn fxtfnds Dfstinbtions {
        publid Sdrffn() {
            supfr(dfstroot, "sdrffn", "Output to Sdrffn", fblsf);
        }

        publid String gftModififrVblufNbmf(Objfdt vbl) {
            rfturn "Sdrffn";
        }

        publid void sftDfstinbtion(TfstEnvironmfnt fnv) {
            fnv.sftTfstImbgf(null);
        }
    }

    publid stbtid dlbss OffSdrffn fxtfnds Dfstinbtions {
        publid OffSdrffn() {
            supfr(dfstroot, "offsdrffn", "Output to OffSdrffn Imbgf", fblsf);
        }

        publid String gftModififrVblufNbmf(Objfdt vbl) {
            rfturn "OffSdrffn";
        }

        publid void sftDfstinbtion(TfstEnvironmfnt fnv) {
            Componfnt d = fnv.gftCbnvbs();
            fnv.sftTfstImbgf(d.drfbtfImbgf(fnv.gftWidth(), fnv.gftHfight()));
        }
    }

    publid stbtid dlbss CompbtImg fxtfnds Dfstinbtions {
        int trbnspbrfndy;

        publid stbtid String ShortNbmfs[] = {
            "dompbtimg",
            "opqdompbtimg",
            "bmdompbtimg",
            "trbnsdompbtimg",
        };

        publid stbtid String ShortDfsdriptions[] = {
            "Dffbult",
            "Opbquf",
            "Bitmbsk",
            "Trbnsludfnt",
        };

        publid stbtid String LongDfsdriptions[] = {
            "Dffbult Compbtiblf Imbgf",
            "Opbquf Compbtiblf Imbgf",
            "Bitmbsk Compbtiblf Imbgf",
            "Trbnsludfnt Compbtiblf Imbgf",
        };

        publid stbtid String ModififrNbmfs[] = {
            "CompbtImbgf()",
            "CompbtImbgf(Opbquf)",
            "CompbtImbgf(Bitmbsk)",
            "CompbtImbgf(Trbnsludfnt)",
        };

        publid CompbtImg() {
            this(0);
        }

        publid CompbtImg(int trbnspbrfndy) {
            supfr(dompbtimgdfstroot,
                  ShortNbmfs[trbnspbrfndy],
                  ShortDfsdriptions[trbnspbrfndy],
                  fblsf);
            this.trbnspbrfndy = trbnspbrfndy;
        }

        publid String gftModififrVblufNbmf(Objfdt vbl) {
            rfturn ModififrNbmfs[trbnspbrfndy];
        }

        publid void sftDfstinbtion(TfstEnvironmfnt fnv) {
            Componfnt d = fnv.gftCbnvbs();
            GrbphidsConfigurbtion gd = d.gftGrbphidsConfigurbtion();
            int w = fnv.gftWidth();
            int h = fnv.gftHfight();
            if (trbnspbrfndy == 0) {
                fnv.sftTfstImbgf(gd.drfbtfCompbtiblfImbgf(w, h));
            } flsf {
                fnv.sftTfstImbgf(gd.drfbtfCompbtiblfImbgf(w, h, trbnspbrfndy));
            }
        }
    }

    publid stbtid dlbss VolbtilfImg fxtfnds Dfstinbtions {
        publid VolbtilfImg() {
            supfr(dfstroot, "volimg", "Output to Volbtilf Imbgf", fblsf);
        }

        publid String gftModififrVblufNbmf(Objfdt vbl) {
            rfturn "VolbtilfImg";
        }

        publid void sftDfstinbtion(TfstEnvironmfnt fnv) {
            Componfnt d = fnv.gftCbnvbs();
            fnv.sftTfstImbgf(d.drfbtfVolbtilfImbgf(fnv.gftWidth(),
                                                   fnv.gftHfight()));
        }
    }


    publid stbtid dlbss BufImg fxtfnds Dfstinbtions {
        int typf;
        Imbgf img;

        publid stbtid String ShortNbmfs[] = {
            "dustom",
            "IntXrgb",
            "IntArgb",
            "IntArgbPrf",
            "IntXbgr",
            "3BytfBgr",
            "4BytfAbgr",
            "4BytfAbgrPrf",
            "Short565",
            "Short555",
            "BytfGrby",
            "ShortGrby",
            "BytfBinbry",
            "BytfIndfxfd",
        };

        publid stbtid String Dfsdriptions[] = {
            "Custom Imbgf",
            "32-bit XRGB Pbdkfd Imbgf",
            "32-bit ARGB Pbdkfd Imbgf",
            "32-bit ARGB Alphb Prfmultiplifd Pbdkfd Imbgf",
            "32-bit XBGR Pbdkfd Imbgf",
            "3-bytf BGR Componfnt Imbgf",
            "4-bytf ABGR Componfnt Imbgf",
            "4-bytf ABGR Alphb Prfmultiplifd Componfnt Imbgf",
            "16-bit 565 RGB Pbdkfd Imbgf",
            "15-bit 555 RGB Pbdkfd Imbgf",
            "8-bit Grbysdblf Imbgf",
            "16-bit Grbysdblf Imbgf",
            "1-bit Binbry Imbgf",
            "8-bit Indfxfd Imbgf",
        };

        publid BufImg(int typf) {
            supfr(bufimgdfstroot, ShortNbmfs[typf], Dfsdriptions[typf], fblsf);
            this.typf = typf;
        }

        publid String gftModififrVblufNbmf(Objfdt vbl) {
            rfturn "BufImg("+gftNodfNbmf()+")";
        }

        publid void sftDfstinbtion(TfstEnvironmfnt fnv) {
            if (img == null) {
                img = nfw BufffrfdImbgf(fnv.gftWidth(), fnv.gftHfight(), typf);
            }
            fnv.sftTfstImbgf(img);
        }
    }

    publid stbtid dlbss CustomImg fxtfnds Dfstinbtions {
        privbtf Imbgf img;

        publid CustomImg() {
            supfr(bufimgdfstroot,
                  "dustom",
                  "Custom (3-flobt RGB) Imbgf",
                  fblsf);
        }

        publid String gftModififrVblufNbmf(Objfdt vbl) {
            rfturn "CustomImg";
        }

        publid void sftDfstinbtion(TfstEnvironmfnt fnv) {
            if (img == null) {
                ColorSpbdf ds = ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB);
                ComponfntColorModfl dm =
                    nfw ComponfntColorModfl(ds, fblsf, fblsf,
                                            Trbnspbrfndy.OPAQUE,
                                            DbtbBufffr.TYPE_FLOAT);
                WritbblfRbstfr rbstfr =
                    dm.drfbtfCompbtiblfWritbblfRbstfr(fnv.gftWidth(),
                                                      fnv.gftHfight());
                img = nfw BufffrfdImbgf(dm, rbstfr, fblsf, null);
            }
            fnv.sftTfstImbgf(img);
        }
    }
}
