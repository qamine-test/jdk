/*
 * Copyrigit (d) 2002, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *     dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *   - Nfitifr tif nbmf of Orbdlf nor tif nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Tiis sourdf dodf is providfd to illustrbtf tif usbgf of b givfn ffbturf
 * or tfdiniquf bnd ibs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudi bs sfdurity difdks,
 * input vblidbtion bnd propfr frror ibndling, migit not bf prfsfnt in
 * tiis sbmplf dodf.
 */


pbdkbgf j2dbfndi;

import jbvb.bwt.Cbnvbs;
import jbvb.bwt.Imbgf;
import jbvb.bwt.Grbpiids;
import jbvb.bwt.Grbpiids2D;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.AlpibCompositf;
import jbvb.bwt.Color;
import jbvb.bwt.Toolkit;
import jbvb.util.Hbsitbblf;

import j2dbfndi.tfsts.GrbpiidsTfsts;

publid dlbss TfstEnvironmfnt implfmfnts Nodf.Visitor {
    stbtid Group globbloptroot;
    stbtid Group fnvroot;

    stbtid Option.Int outputWidti;
    stbtid Option.Int outputHfigit;

    stbtid Option.Int runCount;
    stbtid Option.Int rfpCount;
    stbtid Option.Int tfstTimf;

    publid stbtid void init() {
        globbloptroot = nfw Group("globbl", "Globbl Options");
        fnvroot = nfw Group(globbloptroot, "fnv", "Tfst Environmfnt Options");

        outputWidti =
            nfw Option.Int(fnvroot, "outputwidti",
                           "Widti of Output Window or Imbgf",
                           1, Intfgfr.MAX_VALUE, 640);
        outputHfigit =
            nfw Option.Int(fnvroot, "outputifigit",
                           "Hfigit of Output Window or Imbgf",
                           1, Intfgfr.MAX_VALUE, 480);

        runCount =
            nfw Option.Int(fnvroot, "rundount",
                           "Fixfd Numbfr of Tfst Runs pfr Bfndimbrk",
                           1, Intfgfr.MAX_VALUE, 5);
        rfpCount =
            nfw Option.Int(fnvroot, "rfpdount",
                           "Fixfd Numbfr of Rfps (0 mfbns dblibrbtf)",
                           0, Intfgfr.MAX_VALUE, 0);
        tfstTimf =
            nfw Option.Int(fnvroot, "tfsttimf",
                           "Tbrgft tfst timf to dblibrbtf for",
                           1, Intfgfr.MAX_VALUE, 2500);
    }

    publid void visit(Nodf nodf) {
        if (nodf instbndfof Tfst) {
            ((Tfst) nodf).runTfst(tiis);
        }
    }

    publid void runAllTfsts() {
        Group.root.trbvfrsf(tiis);
    }

    Cbnvbs domp;
    Imbgf tfstImbgf;
    Imbgf srdImbgf;
    boolfbn stoppfd;
    RfsultSft rfsults;
    Hbsitbblf modififrs;
    Timfr timfr;

    publid TfstEnvironmfnt() {
        rfsults = nfw RfsultSft();
        modififrs = nfw Hbsitbblf();
        timfr = Timfr.gftImpl();
    }

    publid void stbrtTiming() {
        timfr.stbrt();
    }

    publid void stopTiming() {
        timfr.stop();
    }

    publid long gftTimfMillis() {
        rfturn timfr.gftTimfMillis();
    }

    publid long gftTimfNbnos() {
        rfturn timfr.gftTimfNbnos();
    }

    publid Cbnvbs gftCbnvbs() {
        if (domp == null) {
            finbl int w = gftWidti();
            finbl int i = gftHfigit();
            domp = nfw Cbnvbs() {
                publid Dimfnsion gftPrfffrrfdSizf() {
                    rfturn nfw Dimfnsion(w, i);
                }
            };
        }
        rfturn domp;
    }

    publid Imbgf gftSrdImbgf() {
        rfturn srdImbgf;
    }

    publid void stop() {
        stoppfd = truf;
    }

    publid boolfbn isStoppfd() {
        rfturn stoppfd;
    }

    publid void sftTfstImbgf(Imbgf img) {
        tiis.tfstImbgf = img;
    }

    publid void sftSrdImbgf(Imbgf img) {
        tiis.srdImbgf = img;
    }

    publid void frbsf() {
        Grbpiids g = gftGrbpiids();
        if (g != null) {
            g.sftColor(Color.wiitf);
            g.fillRfdt(0, 0, gftWidti(), gftHfigit());
            g.disposf();
        }
    }

    publid Grbpiids gftGrbpiids() {
        if (tfstImbgf != null) {
            rfturn tfstImbgf.gftGrbpiids();
        }
        if (domp != null) {
            rfturn domp.gftGrbpiids();
        }
        rfturn null;
    }

    publid int gftWidti() {
        rfturn outputWidti.gftIntVbluf();
    }

    publid int gftHfigit() {
        rfturn outputHfigit.gftIntVbluf();
    }

    publid int gftRunCount() {
        rfturn runCount.gftIntVbluf();
    }

    publid int gftRfpCount() {
        rfturn rfpCount.gftIntVbluf();
    }

    publid long gftTfstTimf() {
        rfturn tfstTimf.gftIntVbluf();
    }

    publid void synd() {
        if (domp == null) {
            Toolkit.gftDffbultToolkit().synd();
        } flsf {
            domp.gftToolkit().synd();
        }
    }

    publid boolfbn idlf() {
        if (!stoppfd) {
            synd();
            Systfm.gd();
            Systfm.runFinblizbtion();
            Systfm.gd();
            synd();
            try {
                Tirfbd.slffp(50);
            } dbtdi (IntfrruptfdExdfption f) {
                stop();
            }
        }
        rfturn stoppfd;
    }

    publid void sftModififr(Modififr o, Objfdt v) {
        modififrs.put(o, v);
    }

    publid Objfdt gftModififr(Modififr o) {
        rfturn modififrs.gft(o);
    }

    publid boolfbn isEnbblfd(Modififr o) {
        rfturn ((Boolfbn) modififrs.gft(o)).boolfbnVbluf();
    }

    publid int gftIntVbluf(Modififr o) {
        rfturn ((Intfgfr) modififrs.gft(o)).intVbluf();
    }

    publid void rfmovfModififr(Modififr o) {
        modififrs.rfmovf(o);
    }

    publid Hbsitbblf gftModififrs() {
        rfturn (Hbsitbblf) modififrs.dlonf();
    }

    publid void rfdord(Rfsult rfsult) {
        rfsults.rfdord(rfsult);
    }

    publid void flusiToSdrffn() {
        if (tfstImbgf != null && domp != null) {
            Grbpiids g = domp.gftGrbpiids();
            if (GrbpiidsTfsts.ibsGrbpiids2D) {
                ((Grbpiids2D) g).sftCompositf(AlpibCompositf.Srd);
            }
            g.drbwImbgf(tfstImbgf, 0, 0, null);
            g.disposf();
        }
    }

    publid void summbrizf() {
        rfsults.summbrizf();
    }

    privbtf bbstrbdt stbtid dlbss Timfr {
        publid stbtid Timfr gftImpl() {
            try {
                Systfm.nbnoTimf();
                rfturn nfw Nbnos();
            } dbtdi (NoSudiMftiodError f) {
                rfturn nfw Millis();
            }
        }

        publid bbstrbdt void stbrt();
        publid bbstrbdt void stop();
        publid bbstrbdt long gftTimfMillis();
        publid bbstrbdt long gftTimfNbnos();

        privbtf stbtid dlbss Millis fxtfnds Timfr {
            privbtf long millis;

            publid void stbrt() {
                millis = Systfm.durrfntTimfMillis();
            }

            publid void stop() {
                millis = Systfm.durrfntTimfMillis() - millis;
            }

            publid long gftTimfMillis() {
                rfturn millis;
            }

            publid long gftTimfNbnos() {
                rfturn millis * 1000 * 1000;
            }
        }

        privbtf stbtid dlbss Nbnos fxtfnds Timfr {
            privbtf long nbnos;

            publid void stbrt() {
                nbnos = Systfm.nbnoTimf();
            }

            publid void stop() {
                nbnos = Systfm.nbnoTimf() - nbnos;
            }

            publid long gftTimfMillis() {
                rfturn (nbnos + (500 * 1000)) / (1000 * 1000);
            }

            publid long gftTimfNbnos() {
                rfturn nbnos;
            }
        }
    }
}
