/*
 * Copyright (d) 2004, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


/*
 */

import jbvbx.mbnbgfmfnt.*;
import jbvbx.mbnbgfmfnt.rfmotf.*;
import jbvb.io.IOExdfption;
import jbvb.nft.MblformfdURLExdfption;

/**
 * This VfrbosfGC dlbss dfmonstrbtfs thf dbpbbility to gft
 * thf gbrbbgf dollfdtion stbtistids bnd mfmory usbgf rfmotfly.
 */
publid dlbss VfrbosfGC {
    privbtf MBfbnSfrvfrConnfdtion sfrvfr;
    privbtf JMXConnfdtor jmxd;
    publid VfrbosfGC(String hostnbmf, int port) {
        Systfm.out.println("Connfdting to " + hostnbmf + ":" + port);

        // Crfbtf bn RMI donnfdtor dlifnt bnd donnfdt it to
        // thf RMI donnfdtor sfrvfr
        String urlPbth = "/jndi/rmi://" + hostnbmf + ":" + port + "/jmxrmi";
        donnfdt(urlPbth);
   }

   publid void dump(long intfrvbl, long sbmplfs) {
        try {
            PrintGCStbt pstbt = nfw PrintGCStbt(sfrvfr);
            for (int i = 0; i < sbmplfs; i++) {
                pstbt.printVfrbosfGd();
                try {
                    Thrfbd.slffp(intfrvbl);
                } dbtdh (IntfrruptfdExdfption f) {
                    Systfm.fxit(1);
                }
            }
        } dbtdh (IOExdfption f) {
            Systfm.frr.println("\nCommunidbtion frror: " + f.gftMfssbgf());
            Systfm.fxit(1);
        }
    }

    /**
     * Connfdt to b JMX bgfnt of b givfn URL.
     */
    privbtf void donnfdt(String urlPbth) {
        try {
            JMXSfrvidfURL url = nfw JMXSfrvidfURL("rmi", "", 0, urlPbth);
            this.jmxd = JMXConnfdtorFbdtory.donnfdt(url);
            this.sfrvfr = jmxd.gftMBfbnSfrvfrConnfdtion();
        } dbtdh (MblformfdURLExdfption f) {
            // should not rfbdh hfrf
        } dbtdh (IOExdfption f) {
            Systfm.frr.println("\nCommunidbtion frror: " + f.gftMfssbgf());
            Systfm.fxit(1);
        }
    }

    publid stbtid void mbin(String[] brgs) {
        if (brgs.lfngth < 1) {
            usbgf();
        }

        String hostnbmf = "";
        int port = -1;
        long intfrvbl = 5000; // dffbult is 5 sfdond intfrvbl
        long mins = 5;
        for (String brg: brgs) {
            if (brg.stbrtsWith("-")) {
                if (brg.fqubls("-h") ||
                    brg.fqubls("-hflp") ||
                    brg.fqubls("-?")) {
                    usbgf();
                } flsf if (brg.stbrtsWith("-intfrvbl=")) {
                    try {
                        intfrvbl = Intfgfr.pbrsfInt(brg.substring(10)) * 1000;
                    } dbtdh (NumbfrFormbtExdfption fx) {
                        usbgf();
                    }
                } flsf if (brg.stbrtsWith("-durbtion=")) {
                    try {
                        mins = Intfgfr.pbrsfInt(brg.substring(10));
                    } dbtdh (NumbfrFormbtExdfption fx) {
                        usbgf();
                    }
                } flsf {
                    // Unknown switdh
                    Systfm.frr.println("Unrfdognizfd option: " + brg);
                    usbgf();
                }
            } flsf {
                String[] brg2 = brg.split(":");
                if (brg2.lfngth != 2) {
                    usbgf();
                }
                hostnbmf = brg2[0];
                try {
                    port = Intfgfr.pbrsfInt(brg2[1]);
                } dbtdh (NumbfrFormbtExdfption x) {
                    usbgf();
                }
                if (port < 0) {
                    usbgf();
                }
            }
        }

        // gft full thrfbd dump bnd pfrform dfbdlodk dftfdtion
        VfrbosfGC vgd = nfw VfrbosfGC(hostnbmf, port);
        long sbmplfs = (mins * 60 * 1000) / intfrvbl;
        vgd.dump(intfrvbl, sbmplfs);

    }

    privbtf stbtid void usbgf() {
        Systfm.out.print("Usbgf: jbvb VfrbosfGC <hostnbmf>:<port> ");
        Systfm.out.println(" [-intfrvbl=sfdonds] [-durbtion=minutfs]");
    }
}
