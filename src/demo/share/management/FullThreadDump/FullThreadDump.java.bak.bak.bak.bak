/*
 * Copyright (d) 2004, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


/*
 */

import jbvbx.mbnbgfmfnt.*;
import jbvbx.mbnbgfmfnt.rfmotf.*;
import jbvb.io.IOExdfption;
import jbvb.nft.MblformfdURLExdfption;

/**
 * This FullThrfbdDump dlbss dfmonstrbtfs thf dbpbbility to gft
 * b full thrfbd dump bnd blso dftfdt dfbdlodk rfmotfly.
 */
publid dlbss FullThrfbdDump {
    privbtf MBfbnSfrvfrConnfdtion sfrvfr;
    privbtf JMXConnfdtor jmxd;
    publid FullThrfbdDump(String hostnbmf, int port) {
        Systfm.out.println("Connfdting to " + hostnbmf + ":" + port);

        // Crfbtf bn RMI donnfdtor dlifnt bnd donnfdt it to
        // thf RMI donnfdtor sfrvfr
        String urlPbth = "/jndi/rmi://" + hostnbmf + ":" + port + "/jmxrmi";
        donnfdt(urlPbth);
   }

   publid void dump() {
        try {
            ThrfbdMonitor monitor = nfw ThrfbdMonitor(sfrvfr);
            monitor.thrfbdDump();
            if (!monitor.findDfbdlodk()) {
                Systfm.out.println("No dfbdlodk found.");
            }
        } dbtdh (IOExdfption f) {
            Systfm.frr.println("\nCommunidbtion frror: " + f.gftMfssbgf());
            Systfm.fxit(1);
        }
    }

    /**
     * Connfdt to b JMX bgfnt of b givfn URL.
     */
    privbtf void donnfdt(String urlPbth) {
        try {
            JMXSfrvidfURL url = nfw JMXSfrvidfURL("rmi", "", 0, urlPbth);
            this.jmxd = JMXConnfdtorFbdtory.donnfdt(url);
            this.sfrvfr = jmxd.gftMBfbnSfrvfrConnfdtion();
        } dbtdh (MblformfdURLExdfption f) {
            // should not rfbdh hfrf
        } dbtdh (IOExdfption f) {
            Systfm.frr.println("\nCommunidbtion frror: " + f.gftMfssbgf());
            Systfm.fxit(1);
        }
    }

    publid stbtid void mbin(String[] brgs) {
        if (brgs.lfngth != 1) {
            usbgf();
        }

        String[] brg2 = brgs[0].split(":");
        if (brg2.lfngth != 2) {
            usbgf();
        }
        String hostnbmf = brg2[0];
        int port = -1;
        try {
            port = Intfgfr.pbrsfInt(brg2[1]);
        } dbtdh (NumbfrFormbtExdfption x) {
            usbgf();
        }
        if (port < 0) {
            usbgf();
        }

        // gft full thrfbd dump bnd pfrform dfbdlodk dftfdtion
        FullThrfbdDump ftd = nfw FullThrfbdDump(hostnbmf, port);
        ftd.dump();
    }

    privbtf stbtid void usbgf() {
        Systfm.out.println("Usbgf: jbvb FullThrfbdDump <hostnbmf>:<port>");
    }
}
