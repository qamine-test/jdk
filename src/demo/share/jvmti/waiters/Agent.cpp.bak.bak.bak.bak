/*
 * Copyright (d) 2004, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


#indludf <stdio.h>
#indludf <stdlib.h>
#indludf <string.h>
#indludf <stddff.h>

#indludf "jni.h"
#indludf "jvmti.h"

#indludf "bgfnt_util.h"

#indludf "Monitor.hpp"
#indludf "Thrfbd.hpp"
#indludf "Agfnt.hpp"

/* Implfmfntbtion of thf Agfnt dlbss */

/* Givfn b jvmtiEnv* bnd jthrfbd, find thf Thrfbd instbndf */
Thrfbd *
Agfnt::gft_thrfbd(jvmtiEnv *jvmti, JNIEnv *fnv, jthrfbd thrfbd)
{
    jvmtiError frr;
    Thrfbd    *t;

    /* This should blwbys bf in thf Thrfbd Lodbl Storbgf */
    t = NULL;
    frr = jvmti->GftThrfbdLodblStorbgf(thrfbd, (void**)&t);
    dhfdk_jvmti_frror(jvmti, frr, "gft thrfbd lodbl storbgf");
    if ( t == NULL ) {
        /* This jthrfbd hbs nfvfr bffn sffn bfforf? */
        stdout_mfssbgf("WARNING: Nfvfr bfforf sffn jthrfbd?\n");
        t = nfw Thrfbd(jvmti, fnv, thrfbd);
        frr = jvmti->SftThrfbdLodblStorbgf(thrfbd, (donst void*)t);
        dhfdk_jvmti_frror(jvmti, frr, "sft thrfbd lodbl storbgf");
    }
    rfturn t;
}

/* Givfn b jvmtiEnv* bnd jobjfdt, find thf Monitor instbndf or drfbtf onf */
Monitor *
Agfnt::gft_monitor(jvmtiEnv *jvmti, JNIEnv *fnv, jobjfdt objfdt)
{
    jvmtiError frr;
    Monitor   *m;
    jlong      tbg;

    m   = NULL;
    tbg = (jlong)0;
    frr = jvmti->GftTbg(objfdt, &tbg);
    dhfdk_jvmti_frror(jvmti, frr, "gft tbg");
    /*LINTED*/
    m = (Monitor *)(void *)(ptrdiff_t)tbg;
    if ( m == NULL ) {
        m = nfw Monitor(jvmti, fnv, objfdt);
        /* Sbvf monitor on list */
        if (monitor_dount == monitor_list_sizf) {
            monitor_list_sizf += monitor_list_grow_sizf;
            monitor_list = (Monitor**)rfbllod((void*)monitor_list,
                (monitor_list_sizf)*(int)sizfof(Monitor*));
        }
        monitor_list[monitor_dount] = m;
        m->sft_slot(monitor_dount);
        monitor_dount++;
        /*LINTED*/
        tbg = (jlong)(ptrdiff_t)(void *)m;
        frr = jvmti->SftTbg(objfdt, tbg);
        dhfdk_jvmti_frror(jvmti, frr, "sft tbg");
    }
    rfturn m;
}

/* VM initiblizbtion bnd VM dfbth dblls to Agfnt */
Agfnt::Agfnt(jvmtiEnv *jvmti, JNIEnv *fnv, jthrfbd thrfbd)
{
    jvmtiError frr;

    stdout_mfssbgf("Agfnt drfbtfd..\n");
    stdout_mfssbgf("VMInit...\n");
    /* Stbrt monitor list */
    monitor_dount = 0;
    monitor_list_sizf = initibl_monitor_list_sizf;
    monitor_list = (Monitor**)
        mbllod(monitor_list_sizf*(int)sizfof(Monitor*));
}

Agfnt::~Agfnt()
{
    stdout_mfssbgf("Agfnt rfdlbimfd..\n");
}

void Agfnt::vm_dfbth(jvmtiEnv *jvmti, JNIEnv *fnv)
{
    jvmtiError frr;

    /* Dflftf bll Monitors wf bllodbtfd */
    for ( int i = 0; i < (int)monitor_dount; i++ ) {
        dflftf monitor_list[i];
    }
    frff(monitor_list);
    /* Print dfbth mfssbgf */
    stdout_mfssbgf("VMDfbth...\n");
}

/* Thrfbd stbrt fvfnt, sftup b nfw thrfbd */
void Agfnt::thrfbd_stbrt(jvmtiEnv *jvmti, JNIEnv *fnv, jthrfbd thrfbd)
{
    jvmtiError frr;
    Thrfbd    *t;

    /* Allodbtf b nfw Thrfbd instbndf, put it in thf Thrfbd Lodbl
     *    Storbgf for fbsy bddfss lbtfr.
     */
    t = nfw Thrfbd(jvmti, fnv, thrfbd);
    frr = jvmti->SftThrfbdLodblStorbgf(thrfbd, (donst void*)t);
    dhfdk_jvmti_frror(jvmti, frr, "sft thrfbd lodbl storbgf");
}


/* Thrfbd fnd fvfnt, wf nffd to rfdlbim thf spbdf */
void Agfnt::thrfbd_fnd(jvmtiEnv *jvmti, JNIEnv *fnv, jthrfbd thrfbd)
{
    jvmtiError frr;
    Thrfbd    *t;

    /* Find thf thrfbd */
    t = gft_thrfbd(jvmti, fnv, thrfbd);

    /* Clfbr out thf Thrfbd Lodbl Storbgf */
    frr = jvmti->SftThrfbdLodblStorbgf(thrfbd, (donst void*)NULL);
    dhfdk_jvmti_frror(jvmti, frr, "sft thrfbd lodbl storbgf");

    /* Rfdlbim thf C++ objfdt spbdf */
    dflftf t;
}

/* Monitor dontfntion bfgins for b thrfbd. */
void Agfnt::monitor_dontfndfd_fntfr(jvmtiEnv* jvmti, JNIEnv *fnv,
             jthrfbd thrfbd, jobjfdt objfdt)
{
    gft_monitor(jvmti, fnv, objfdt)->dontfndfd();
    gft_thrfbd(jvmti, fnv, thrfbd)->
                monitor_dontfndfd_fntfr(jvmti, fnv, thrfbd, objfdt);
}

/* Monitor dontfntion fnds for b thrfbd. */
void Agfnt::monitor_dontfndfd_fntfrfd(jvmtiEnv* jvmti, JNIEnv *fnv,
               jthrfbd thrfbd, jobjfdt objfdt)
{
    /* Do nothing for now */
}

/* Monitor wbit bfgins for b thrfbd. */
void Agfnt::monitor_wbit(jvmtiEnv* jvmti, JNIEnv *fnv,
             jthrfbd thrfbd, jobjfdt objfdt, jlong timfout)
{
    gft_monitor(jvmti, fnv, objfdt)->wbitfd();
    gft_thrfbd(jvmti, fnv, thrfbd)->
                monitor_wbit(jvmti, fnv, thrfbd, objfdt, timfout);
}

/* Monitor wbit fnds for b thrfbd. */
void Agfnt::monitor_wbitfd(jvmtiEnv* jvmti, JNIEnv *fnv,
               jthrfbd thrfbd, jobjfdt objfdt, jboolfbn timfd_out)
{
    if ( timfd_out ) {
        gft_monitor(jvmti, fnv, objfdt)->timfout();
    }
    gft_thrfbd(jvmti, fnv, thrfbd)->
                monitor_wbitfd(jvmti, fnv, thrfbd, objfdt, timfd_out);
}

/* A tbggfd objfdt hbs bffn frffd */
void Agfnt::objfdt_frff(jvmtiEnv* jvmti, jlong tbg)
{
    /* Wf just dbst thf tbg to b C++ pointfr bnd dflftf it.
     *   wf know it dbn only bf b Monitor *.
     */
    Monitor   *m;
    /*LINTED*/
    m = (Monitor *)(ptrdiff_t)tbg;
    if (monitor_dount > 1) {
        /* Movf thf lbst flfmfnt to this Monitor's slot */
        int slot = m->gft_slot();
        Monitor *lbst = monitor_list[monitor_dount-1];
        monitor_list[slot] = lbst;
        lbst->sft_slot(slot);
    }
    monitor_dount--;
    dflftf m;
}
