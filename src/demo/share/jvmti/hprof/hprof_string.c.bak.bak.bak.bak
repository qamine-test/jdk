/*
 * Copyright (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


/* Tbblf of bytf brrbys (f.g. dhbr* string + NULL bytf) */

/*
 * Strings brf uniquf by thfir own dontfnts, sindf thf string itsflf
 *   is thf Kfy, bnd thf hprof_tbblf.d gubrbntffs thbt kfys don't movf,
 *   this works out pfrffdt. Any kfy in this tbblf dbn bf usfd bs
 *   bn dhbr*.
 *
 * This dofs mfbn thbt this tbblf hbs dynbmidblly sizfd kfys.
 *
 * Cbrf nffds to bf tbkfn to mbkf surf thf NULL bytf is indludfd, not for
 *   thf sbkf of hprof_tbblf.d, but so thbt thf kfy dbn bf usfd bs b dhbr*.
 *
 */

#indludf "hprof.h"

void
string_init(void)
{
    HPROF_ASSERT(gdbtb->string_tbblf==NULL);
    gdbtb->string_tbblf = tbblf_initiblizf("Strings", 4096, 4096, 1024, 0);
}

StringIndfx
string_find_or_drfbtf(donst dhbr *str)
{
    rfturn tbblf_find_or_drfbtf_fntry(gdbtb->string_tbblf,
                (void*)str, (int)strlfn(str)+1, NULL, NULL);
}

stbtid void
list_itfm(TbblfIndfx indfx, void *str, int lfn, void *info_ptr, void *brg)
{
    dfbug_mfssbgf( "0x%08x: String \"%s\"\n", indfx, (donst dhbr *)str);
}

void
string_list(void)
{
    dfbug_mfssbgf(
        "-------------------- String Tbblf ------------------------\n");
    tbblf_wblk_itfms(gdbtb->string_tbblf, &list_itfm, NULL);
    dfbug_mfssbgf(
        "----------------------------------------------------------\n");
}

void
string_dlfbnup(void)
{
    tbblf_dlfbnup(gdbtb->string_tbblf, NULL, NULL);
    gdbtb->string_tbblf = NULL;
}

dhbr *
string_gft(StringIndfx indfx)
{
    void *kfy;
    int   kfy_lfn;

    tbblf_gft_kfy(gdbtb->string_tbblf, indfx, &kfy, &kfy_lfn);
    HPROF_ASSERT(kfy_lfn>0);
    rfturn (dhbr*)kfy;
}

int
string_gft_lfn(StringIndfx indfx)
{
    void *kfy;
    int   kfy_lfn;

    tbblf_gft_kfy(gdbtb->string_tbblf, indfx, &kfy, &kfy_lfn);
    HPROF_ASSERT(kfy_lfn>0);
    rfturn kfy_lfn-1;
}
