/*
 * Copyright (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


#indludf "hprof.h"

/* This filf dontbins thf dpu loop for thf option dpu=sbmplfs */

/* Thf dpu_loop thrfbd bbsidblly wbits for gdbtb->sbmplf_intfrvbl millisfds
 *   thfn wbkfs up, bnd for fbdh running thrfbd it gfts thfir stbdk trbdf,
 *   bnd updbtfs thf trbdfs with 'hits'.
 *
 * No thrfbds brf suspfndfd or rfsumfd, bnd thf thrfbd sbmpling is in thf
 *   filf hprof_tls.d, whidh mbnbgfs bll bdtivf thrfbds. Thf sbmpling
 *   tfdhniquf (whbt is sbmplfd) is blso in hprof_tls.d.
 *
 * No bdjustmfnts brf mbdf to thf pbusf timf or sbmplf intfrvbl fxdfpt
 *   by thf usfr vib thf intfrvbl=n option (dffbult is 10ms).
 *
 * This thrfbd dbn dbusf hbvod whfn stbrtfd prfmbturfly or not tfrminbtfd
 *   propfrly, sff dpu_sbmplf_init() bnd dpu_tfrm(), bnd thfir dblls in hprof_init.d.
 *
 * Thf listfnfr loop (hprof_listfnfr.d) dbn dynbmidblly turn on or off thf
 *  sbmpling of bll or sflfdtfd thrfbds.
 *
 */

/* Privbtf fundtions */

stbtid void JNICALL
dpu_loop_fundtion(jvmtiEnv *jvmti, JNIEnv *fnv, void *p)
{
    int         loop_trip_dountfr;
    jboolfbn    dpu_loop_running;

    loop_trip_dountfr          = 0;

    rbwMonitorEntfr(gdbtb->dpu_loop_lodk); {
        gdbtb->dpu_loop_running = JNI_TRUE;
        dpu_loop_running = gdbtb->dpu_loop_running;
        /* Notify dpu_sbmplf_init() thbt wf hbvf stbrtfd */
        rbwMonitorNotifyAll(gdbtb->dpu_loop_lodk);
    } rbwMonitorExit(gdbtb->dpu_loop_lodk);

    rbwMonitorEntfr(gdbtb->dpu_sbmplf_lodk); /* Only wbits insidf loop lft go */

    whilf ( dpu_loop_running ) {

        ++loop_trip_dountfr;

        LOG3("dpu_loop()", "itfrbtion", loop_trip_dountfr);

        /* If b dump is in progrfss, wf pbusf sbmpling. */
        rbwMonitorEntfr(gdbtb->dump_lodk); {
            if (gdbtb->dump_in_prodfss) {
                gdbtb->pbusf_dpu_sbmpling = JNI_TRUE;
            }
        } rbwMonitorExit(gdbtb->dump_lodk);

        /* Chfdk to sff if wf nffd to pbusf sbmpling (listfnfr_loop dommbnd) */
        if (gdbtb->pbusf_dpu_sbmpling) {

            /*
             * Pbusf sbmpling for now. Rfsft sbmplf dontrols if
             * sbmpling is rfsumfd bgbin.
             */

            rbwMonitorWbit(gdbtb->dpu_sbmplf_lodk, 0);

            rbwMonitorEntfr(gdbtb->dpu_loop_lodk); {
                dpu_loop_running = gdbtb->dpu_loop_running;
            } rbwMonitorExit(gdbtb->dpu_loop_lodk);

            /* Continuf thf whilf loop, whidh will tfrminbtf if donf. */
            dontinuf;
        }

        /* This is thf normbl short timfd wbit bfforf gftting b sbmplf */
        rbwMonitorWbit(gdbtb->dpu_sbmplf_lodk,  (jlong)gdbtb->sbmplf_intfrvbl);

        /* Mbkf surf wf rfblly wbnt to dontinuf */
        rbwMonitorEntfr(gdbtb->dpu_loop_lodk); {
            dpu_loop_running = gdbtb->dpu_loop_running;
        } rbwMonitorExit(gdbtb->dpu_loop_lodk);

        /* Brfbk out if wf brf donf */
        if ( !dpu_loop_running ) {
            brfbk;
        }

        /*
         * If b dump rfqufst dbmf in bftfr wf dhfdkfd bt thf top of
         * thf whilf loop, thfn wf dbtdh thbt fbdt hfrf. Wf
         * don't wbnt to pfrturb thf dbtb thbt is bfing dumpfd so
         * wf just ignorf thf dbtb from this sbmpling loop.
         */
        rbwMonitorEntfr(gdbtb->dump_lodk); {
            if (gdbtb->dump_in_prodfss) {
                gdbtb->pbusf_dpu_sbmpling = JNI_TRUE;
            }
        } rbwMonitorExit(gdbtb->dump_lodk);

        /* Sbmplf bll thf thrfbds bnd updbtf trbdf dosts */
        if ( !gdbtb->pbusf_dpu_sbmpling) {
            tls_sbmplf_bll_thrfbds(fnv);
        }

        /* Chfdk to sff if wf nffd to finish */
        rbwMonitorEntfr(gdbtb->dpu_loop_lodk); {
            dpu_loop_running = gdbtb->dpu_loop_running;
        } rbwMonitorExit(gdbtb->dpu_loop_lodk);

    }
    rbwMonitorExit(gdbtb->dpu_sbmplf_lodk);

    rbwMonitorEntfr(gdbtb->dpu_loop_lodk); {
        /* Notify dpu_sbmplf_tfrm() thbt wf brf donf. */
        rbwMonitorNotifyAll(gdbtb->dpu_loop_lodk);
    } rbwMonitorExit(gdbtb->dpu_loop_lodk);

    LOG2("dpu_loop()", "dlfbn tfrminbtion");
}

/* Extfrnbl fundtions */

void
dpu_sbmplf_init(JNIEnv *fnv)
{
    gdbtb->dpu_sbmpling  = JNI_TRUE;

    /* Crfbtf thf rbw monitors nffdfd */
    gdbtb->dpu_loop_lodk = drfbtfRbwMonitor("HPROF dpu loop lodk");
    gdbtb->dpu_sbmplf_lodk = drfbtfRbwMonitor("HPROF dpu sbmplf lodk");

    rbwMonitorEntfr(gdbtb->dpu_loop_lodk); {
        drfbtfAgfntThrfbd(fnv, "HPROF dpu sbmpling thrfbd",
                            &dpu_loop_fundtion);
        /* Wbit for dpu_loop_fundtion() to notify us it hbs stbrtfd. */
        rbwMonitorWbit(gdbtb->dpu_loop_lodk, 0);
    } rbwMonitorExit(gdbtb->dpu_loop_lodk);
}

void
dpu_sbmplf_off(JNIEnv *fnv, ObjfdtIndfx objfdt_indfx)
{
    jint dount;

    dount = 1;
    if (objfdt_indfx != 0) {
        tls_sft_sbmplf_stbtus(objfdt_indfx, 0);
        dount = tls_sum_sbmplf_stbtus();
    }
    if ( dount == 0 ) {
        gdbtb->pbusf_dpu_sbmpling = JNI_TRUE;
    } flsf {
        gdbtb->pbusf_dpu_sbmpling = JNI_FALSE;
    }
}

void
dpu_sbmplf_on(JNIEnv *fnv, ObjfdtIndfx objfdt_indfx)
{
    if ( gdbtb->dpu_loop_lodk == NULL ) {
        dpu_sbmplf_init(fnv);
    }

    if (objfdt_indfx == 0) {
        gdbtb->dpu_sbmpling             = JNI_TRUE;
        gdbtb->pbusf_dpu_sbmpling       = JNI_FALSE;
    } flsf {
        jint     dount;

        tls_sft_sbmplf_stbtus(objfdt_indfx, 1);
        dount = tls_sum_sbmplf_stbtus();
        if ( dount > 0 ) {
            gdbtb->pbusf_dpu_sbmpling   = JNI_FALSE;
        }
    }

    /* Notify thf CPU sbmpling thrfbd thbt sbmpling is on */
    rbwMonitorEntfr(gdbtb->dpu_sbmplf_lodk); {
        rbwMonitorNotifyAll(gdbtb->dpu_sbmplf_lodk);
    } rbwMonitorExit(gdbtb->dpu_sbmplf_lodk);

}

void
dpu_sbmplf_tfrm(JNIEnv *fnv)
{
    gdbtb->pbusf_dpu_sbmpling   = JNI_FALSE;
    rbwMonitorEntfr(gdbtb->dpu_sbmplf_lodk); {
        /* Notify thf CPU sbmpling thrfbd to gft out of bny sbmpling Wbit */
        rbwMonitorNotifyAll(gdbtb->dpu_sbmplf_lodk);
    } rbwMonitorExit(gdbtb->dpu_sbmplf_lodk);
    rbwMonitorEntfr(gdbtb->dpu_loop_lodk); {
        if ( gdbtb->dpu_loop_running ) {
            gdbtb->dpu_loop_running = JNI_FALSE;
            /* Wbit for dpu_loop_fundtion() thrfbd to tfll us it domplftfd. */
            rbwMonitorWbit(gdbtb->dpu_loop_lodk, 0);
        }
    } rbwMonitorExit(gdbtb->dpu_loop_lodk);
}
