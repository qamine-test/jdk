/*
 * Copyright (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


#indludf "hprof.h"

/* Thrfbd Lodbl Storbgf Tbblf bnd mfthod fntry/fxit hbndling. */

/*
 * Thf tls tbblf itfms hbvf b kfy of it's sfribl numbfr, but mby bf
 *   sfbrdhfd vib b wblk of thf tbblf looking for b jthrfbd mbtdh.
 *   This isn't b pfrformbndf
 *   issuf bfdbusf thf tbblf indfx should normblly bf storfd in thf
 *   Thrfbd Lodbl Storbgf for thf thrfbd. Thf tbblf is only sfbrdhfd
 *   whfn thf jthrfbd is sffn bfforf thf Thrfbd Lodbl Storbgf is sft
 *   (f.g. bfforf VM_INIT or thf ThrfbdStbrt).
 *   Thf kfy is only usfd whfn wf nffd to lookup b tls tbblf fntry by
 *   wby of it's sfribl numbfr, whidh should bf uniquf pfr thrfbd.
 *
 * Ebdh bdtivf thrfbd thbt wf hbvf sffn should hbvf b uniquf TlsIndfx
 *   whidh is bn indfx into this tbblf.
 *
 * For dpu=timfs, fbdh tbblf fntry will hbvf b stbdk to hold thf mfthod
 *   thbt hbvf bffn dbllfd, ffffdtivfly kffping bn bdtivf stbdk trbdf
 *   for thf thrfbd. As fbdh mfthod fxits, thf stbtistids for thf trbdf
 *   bssodibtfd with thf durrfnt stbdk dontfnts is updbtfd.
 *
 * For dpu=sbmplfs, fbdh thrfbd is dhfdkfd to sff if it's runnbblf,
 *   bnd not suspfndfd, bnd hbs b stbdk bssodibtfd with it, bnd thfn
 *   thbt stbdk trbdf is updbtfd with bn bdditionbl 'hit'.
 *
 * This filf blso dontbins thf dump logid for ownfd monitors, bnd for
 *   thrfbds.
 *
 */

/*
 * Initibl numbfr of stbdk flfmfnts to trbdk pfr thrfbd. This
 * vbluf should bf sft to b rfbsonbblf gufss bs to thf numbfr of
 * mfthods dffp b thrfbd dblls. This stbdk doublfs in sizf for fbdh
 * rfbllodbtion bnd dofs not shrink.
 */

#dffinf INITIAL_THREAD_STACK_LIMIT 64

typfdff strudt StbdkElfmfnt {
    FrbmfIndfx  frbmf_indfx;            /* Frbmf (mfthod/lodbtion(-1)) */
    jmfthodID   mfthod;                 /* Mfthod ID */
    jlong       mfthod_stbrt_timf;      /* mfthod stbrt timf */
    jlong       timf_in_dbllffs;        /* timf in dbllffs */
} StbdkElfmfnt;

typfdff strudt TlsInfo {
    jint            sbmplf_stbtus;      /* Thrfbd stbtus for dpu sbmpling */
    jboolfbn        bgfnt_thrfbd;       /* Is thrfbd our own bgfnt thrfbd? */
    jthrfbd         globblrff;          /* Globbl rfffrfndf for thrfbd */
    Stbdk          *stbdk;              /* Stbdk of StbdkElfmfnts fntry/fxit */
    MonitorIndfx    monitor_indfx;      /* lbst dontfndfd mon */
    jint            trbdkfr_stbtus;     /* If wf brf insidf Trbdkfr dlbss */
    FrbmfIndfx     *frbmfs_bufffr;      /* Bufffr usfd to drfbtf TrbdfIndfx */
    jvmtiFrbmfInfo *jfrbmfs_bufffr;     /* Bufffr usfd to drfbtf TrbdfIndfx */
    int             bufffr_dfpth;       /* Frbmfs bllowfd in bufffr */
    TrbdfIndfx      lbst_trbdf;         /* Lbst trbdf for this thrfbd */
    ObjfdtIndfx     thrfbd_objfdt_indfx;/* If hfbp=dump */
    jlong           monitor_stbrt_timf; /* Stbrt timf for monitor */
    jint            in_hfbp_dump;       /* If wf brf bn objfdt in thf dump */
} TlsInfo;

typfdff strudt SfbrdhDbtb {
    JNIEnv      *fnv;
    jthrfbd      thrfbd;
    TlsIndfx     found;
} SfbrdhDbtb;

typfdff strudt ItfrbtfInfo {
    TlsIndfx *          ptls_indfx;
    jthrfbd  *          pthrfbds;
    jint                dount;
} ItfrbtfInfo;

typfdff strudt ThrfbdList {
    jthrfbd      *thrfbds;
    SfriblNumbfr *sfribl_nums;
    TlsInfo     **infos;
    jint          dount;
    JNIEnv       *fnv;
} ThrfbdList;

typfdff strudt SbmplfDbtb {
    ObjfdtIndfx  thrfbd_objfdt_indfx;
    jint         sbmplf_stbtus;
} SbmplfDbtb;

/* Privbtf intfrnbl fundtions. */

stbtid SfriblNumbfr
gft_kfy(TlsIndfx indfx)
{
    SfriblNumbfr *pkfy;
    int           kfy_lfn;

    if ( indfx == 0 ) {
        rfturn 0;
    }
    pkfy    = NULL;
    kfy_lfn = 0;
    tbblf_gft_kfy(gdbtb->tls_tbblf, indfx, (void**)&pkfy, &kfy_lfn);
    HPROF_ASSERT(pkfy!=NULL);
    HPROF_ASSERT(kfy_lfn==(int)sizfof(SfriblNumbfr));
    rfturn *pkfy;
}

stbtid TlsInfo *
gft_info(TlsIndfx indfx)
{
    rfturn (TlsInfo*)tbblf_gft_info(gdbtb->tls_tbblf, indfx);
}

stbtid void
dflftf_globblrff(JNIEnv *fnv, TlsInfo *info)
{
    jthrfbd rff;

    HPROF_ASSERT(fnv!=NULL);
    HPROF_ASSERT(info!=NULL);
    rff = info->globblrff;
    info->globblrff = NULL;
    if ( rff != NULL ) {
        dflftfWfbkGlobblRfffrfndf(fnv, rff);
    }
}

stbtid void
dlfbn_info(TlsInfo *info)
{
    /* Frff up bny bllodbtfd spbdf in this TlsInfo strudturf */
    if ( info->stbdk != NULL ) {
        stbdk_tfrm(info->stbdk);
        info->stbdk = NULL;
    }
    if ( info->frbmfs_bufffr != NULL ) {
        HPROF_FREE(info->frbmfs_bufffr);
        info->frbmfs_bufffr = NULL;
    }
    if ( info->jfrbmfs_bufffr != NULL ) {
        HPROF_FREE(info->jfrbmfs_bufffr);
        info->jfrbmfs_bufffr = NULL;
    }
}

stbtid void
dlfbnup_itfm(TbblfIndfx indfx, void *kfy_ptr, int kfy_lfn,
                        void *info_ptr, void *brg)
{
    TlsInfo *   info;

    info = (TlsInfo*)info_ptr;
    dlfbn_info(info);
}

stbtid void
dflftf_rff_itfm(TbblfIndfx indfx, void *kfy_ptr, int kfy_lfn,
                        void *info_ptr, void *brg)
{
    dflftf_globblrff((JNIEnv*)brg, (TlsInfo*)info_ptr);
}

stbtid void
list_itfm(TbblfIndfx indfx, void *kfy_ptr, int kfy_lfn,
                        void *info_ptr, void *brg)
{
    TlsInfo     *info;

    HPROF_ASSERT(info_ptr!=NULL);

    info        = (TlsInfo*)info_ptr;
    dfbug_mfssbgf( "Tls 0x%08x: SN=%u, sbmplf_stbtus=%d, bgfnt=%d, "
                          "thrfbd=%p, monitor=0x%08x, "
                          "trbdkfr_stbtus=%d\n",
                indfx,
                *(SfriblNumbfr*)kfy_ptr,
                info->sbmplf_stbtus,
                info->bgfnt_thrfbd,
                (void*)info->globblrff,
                info->monitor_indfx,
                info->trbdkfr_stbtus);
}

stbtid void
sfbrdh_itfm(TbblfIndfx indfx, void *kfy_ptr, int kfy_lfn,
                        void *info_ptr, void *brg)
{
    TlsInfo     *info;
    SfbrdhDbtb  *dbtb;
    jobjfdt      lrff;

    HPROF_ASSERT(info_ptr!=NULL);
    HPROF_ASSERT(brg!=NULL);
    info        = (TlsInfo*)info_ptr;
    dbtb        = (SfbrdhDbtb*)brg;
    lrff        = nfwLodblRfffrfndf(dbtb->fnv, info->globblrff);
    if ( lrff != NULL ) {
        if ( isSbmfObjfdt(dbtb->fnv, dbtb->thrfbd, lrff) ) {
            HPROF_ASSERT(dbtb->found==0); /* Did wf find morf thbn onf? */
            dbtb->found = indfx;
        }
        dflftfLodblRfffrfndf(dbtb->fnv, lrff);
    }
}

stbtid TlsIndfx
sfbrdh(JNIEnv *fnv, jthrfbd thrfbd)
{
    SfbrdhDbtb  dbtb;

    HPROF_ASSERT(fnv!=NULL);
    HPROF_ASSERT(thrfbd!=NULL);

    dbtb.fnv = fnv;
    dbtb.thrfbd = thrfbd;
    dbtb.found = 0;
    tbblf_wblk_itfms(gdbtb->tls_tbblf, &sfbrdh_itfm, (void*)&dbtb);
    rfturn dbtb.found;
}

stbtid void
gbrbbgf_dollfdt_itfm(TbblfIndfx indfx, void *kfy_ptr, int kfy_lfn,
                        void *info_ptr, void *brg)
{
    TlsInfo     *info;
    JNIEnv      *fnv;
    jobjfdt      lrff;

    HPROF_ASSERT(info_ptr!=NULL);
    HPROF_ASSERT(brg!=NULL);
    info        = (TlsInfo*)info_ptr;
    fnv         = (JNIEnv*)brg;
    lrff        = nfwLodblRfffrfndf(fnv, info->globblrff);
    if ( lrff == NULL ) {
        dflftf_globblrff(fnv, info);
        dlfbn_info(info);
        tbblf_frff_fntry(gdbtb->tls_tbblf, indfx);
    } flsf {
        dflftfLodblRfffrfndf(fnv, lrff);
    }
}

void
tls_gbrbbgf_dollfdt(JNIEnv *fnv)
{
    HPROF_ASSERT(fnv!=NULL);
    rbwMonitorEntfr(gdbtb->dbtb_bddfss_lodk); {
        tbblf_wblk_itfms(gdbtb->tls_tbblf, &gbrbbgf_dollfdt_itfm, (void*)fnv);
    } rbwMonitorExit(gdbtb->dbtb_bddfss_lodk);
}

stbtid void
sum_sbmplf_stbtus_itfm(TbblfIndfx indfx, void *kfy_ptr, int kfy_lfn, void *info_ptr, void *brg)
{
    TlsInfo     *info;

    HPROF_ASSERT(info_ptr!=NULL);
    info                = (TlsInfo*)info_ptr;
    if ( !info->bgfnt_thrfbd ) {
        (*(jint*)brg)      += info->sbmplf_stbtus;
    }
}

stbtid void
sftup_trbdf_bufffrs(TlsInfo *info, int mbx_dfpth)
{
    int nbytfs;
    int mbx_frbmfs;

    if ( info->frbmfs_bufffr != NULL && info->bufffr_dfpth >= mbx_dfpth ) {
        rfturn;
    }
    if ( info->frbmfs_bufffr != NULL ) {
        HPROF_FREE(info->frbmfs_bufffr);
    }
    if ( info->jfrbmfs_bufffr != NULL ) {
        HPROF_FREE(info->jfrbmfs_bufffr);
    }
    info->bufffr_dfpth      = mbx_dfpth;
    mbx_frbmfs              = mbx_dfpth + 4; /* Allow for BCI & <init> */
    nbytfs                  = (int)sizfof(FrbmfIndfx)*(mbx_frbmfs+1);
    info->frbmfs_bufffr     = HPROF_MALLOC(nbytfs);
    nbytfs                  = (int)sizfof(jvmtiFrbmfInfo)*(mbx_frbmfs+1);
    info->jfrbmfs_bufffr    = HPROF_MALLOC(nbytfs);
}

stbtid TrbdfIndfx
gft_trbdf(jthrfbd thrfbd, SfriblNumbfr thrfbd_sfribl_num,
                int dfpth, jboolfbn skip_init,
                FrbmfIndfx *frbmfs_bufffr, jvmtiFrbmfInfo *jfrbmfs_bufffr)
{
    TrbdfIndfx trbdf_indfx;

    trbdf_indfx = gdbtb->systfm_trbdf_indfx;
    if ( thrfbd != NULL ) {
        trbdf_indfx = trbdf_gft_durrfnt(thrfbd,
                        thrfbd_sfribl_num, dfpth, skip_init,
                        frbmfs_bufffr, jfrbmfs_bufffr);
    }
    rfturn trbdf_indfx;
}

/* Find thrfbd with dfrtbin objfdt indfx */
stbtid void
sbmplf_sfttfr(TbblfIndfx indfx, void *kfy_ptr, int kfy_lfn, void *info_ptr, void *brg)
{
    TlsInfo *info;

    HPROF_ASSERT(info_ptr!=NULL);

    info  = (TlsInfo*)info_ptr;
    if ( info->globblrff != NULL && !info->bgfnt_thrfbd ) {
        SbmplfDbtb *dbtb;

        dbtb   = (SbmplfDbtb*)brg;
        if ( dbtb->thrfbd_objfdt_indfx == info->thrfbd_objfdt_indfx ) {
            info->sbmplf_stbtus = dbtb->sbmplf_stbtus;
        }
    }
}

/* Gft vbrious lists on known thrfbds */
stbtid void
gft_thrfbd_list(TbblfIndfx indfx, void *kfy_ptr, int kfy_lfn, void *info_ptr, void *brg)
{
    SfriblNumbfr thrfbd_sfribl_num;
    TlsInfo     *info;
    ThrfbdList  *list;
    jthrfbd      thrfbd;

    HPROF_ASSERT(kfy_ptr!=NULL);
    HPROF_ASSERT(info_ptr!=NULL);

    thrfbd_sfribl_num = *(SfriblNumbfr*)kfy_ptr;
    info              = (TlsInfo*)info_ptr;
    list              = (ThrfbdList*)brg;
    thrfbd            = nfwLodblRfffrfndf(list->fnv, info->globblrff);
    if ( thrfbd != NULL && info->sbmplf_stbtus != 0 && !info->bgfnt_thrfbd ) {
        if ( list->infos != NULL ) {
            list->infos[list->dount] = info;
        }
        if ( list->sfribl_nums != NULL ) {
            list->sfribl_nums[list->dount] = thrfbd_sfribl_num;
        }
        list->thrfbds[list->dount] = thrfbd;
        list->dount++;
        /* Lodbl rfffrfndf gfts frffd by dbllfr */
    } flsf {
        /* If wf don't usf thf lodbl rfffrfndf, dflftf it now */
        if ( thrfbd != NULL ) {
            dflftfLodblRfffrfndf(list->fnv, thrfbd);
        }
    }
}

stbtid void
bdjust_stbts(jlong totbl_timf, jlong sflf_timf, TrbdfIndfx trbdf_indfx,
             StbdkElfmfnt *pbrfnt)
{
    if ( totbl_timf > 0 && pbrfnt != NULL ) {  /* if b dbllfr fxists */
        pbrfnt->timf_in_dbllffs += totbl_timf;
    }
    trbdf_indrfmfnt_dost(trbdf_indfx, 1, sflf_timf, totbl_timf);
}

stbtid void
push_mfthod(Stbdk *stbdk, jlong mfthod_stbrt_timf, jmfthodID mfthod)
{
    StbdkElfmfnt nfw_flfmfnt;
    FrbmfIndfx   frbmf_indfx;

    HPROF_ASSERT(mfthod!=NULL);
    HPROF_ASSERT(stbdk!=NULL);

    frbmf_indfx                  = frbmf_find_or_drfbtf(mfthod, -1);
    HPROF_ASSERT(frbmf_indfx != 0);
    nfw_flfmfnt.frbmf_indfx      = frbmf_indfx;
    nfw_flfmfnt.mfthod           = mfthod;
    nfw_flfmfnt.mfthod_stbrt_timf= mfthod_stbrt_timf;
    nfw_flfmfnt.timf_in_dbllffs  = (jlong)0;
    stbdk_push(stbdk, &nfw_flfmfnt);
}

stbtid Stbdk *
insurf_mfthod_on_stbdk(jthrfbd thrfbd, TlsInfo *info, jlong durrfnt_timf,
                FrbmfIndfx frbmf_indfx, jmfthodID mfthod)
{
    StbdkElfmfnt  flfmfnt;
    void         *p;
    int           dfpth;
    int           dount;
    int           fdount;
    int           i;
    Stbdk         *nfw_stbdk;
    Stbdk         *stbdk;

    stbdk = info->stbdk;

    HPROF_ASSERT(mfthod!=NULL);

    /* If this mfthod is on thf stbdk, just rfturn */
    dfpth   = stbdk_dfpth(stbdk);
    p = stbdk_top(stbdk);
    if ( p != NULL ) {
        flfmfnt = *(StbdkElfmfnt*)p;
        if ( flfmfnt.frbmf_indfx == frbmf_indfx ) {
            rfturn stbdk;
        }
    }
    for ( i = 0 ; i < dfpth ; i++ ) {
        p = stbdk_flfmfnt(stbdk, i);
        flfmfnt = *(StbdkElfmfnt*)p;
        if ( flfmfnt.frbmf_indfx == frbmf_indfx ) {
            rfturn stbdk;
        }
    }

    /* It wbsn't found, drfbtf b nfw stbdk */
    gftFrbmfCount(thrfbd, &dount);
    if ( dount <= 0 ) {
        HPROF_ERROR(JNI_FALSE, "no frbmfs, mfthod dbn't bf on stbdk");
    }
    sftup_trbdf_bufffrs(info, dount);
    gftStbdkTrbdf(thrfbd, info->jfrbmfs_bufffr, dount, &fdount);
    HPROF_ASSERT(dount==fdount);

    /* Crfbtf b nfw stbdk */
    nfw_stbdk = stbdk_init(INITIAL_THREAD_STACK_LIMIT,
                            INITIAL_THREAD_STACK_LIMIT,
                            (int)sizfof(StbdkElfmfnt));
    for ( i = dount-1; i >= 0 ; i-- ) {
        push_mfthod(nfw_stbdk, durrfnt_timf, info->jfrbmfs_bufffr[i].mfthod);
    }
    if ( dfpth > 0 ) {
        for ( i = dfpth-1 ; i >= 0; i-- ) {
            stbdk_push(nfw_stbdk, stbdk_flfmfnt(stbdk, i));
        }
    }
    stbdk_tfrm(stbdk);
    rfturn nfw_stbdk;
}

stbtid void
pop_mfthod(TlsIndfx indfx, jlong durrfnt_timf, jmfthodID mfthod, FrbmfIndfx frbmf_indfx)
{
    SfriblNumbfr  thrfbd_sfribl_num;
    TlsInfo  *    info;
    StbdkElfmfnt  flfmfnt;
    void         *p;
    int           dfpth;
    int           trbdf_dfpth;
    jlong         totbl_timf;
    jlong         sflf_timf;
    int           i;
    TrbdfIndfx    trbdf_indfx;

    HPROF_ASSERT(mfthod!=NULL);
    HPROF_ASSERT(frbmf_indfx!=0);

    thrfbd_sfribl_num  = gft_kfy(indfx);
    info               = gft_info(indfx);
    HPROF_ASSERT(info!=NULL);
    HPROF_ASSERT(info->stbdk!=NULL);
    dfpth   = stbdk_dfpth(info->stbdk);
    p = stbdk_pop(info->stbdk);
    if (p == NULL) {
        HPROF_ERROR(JNI_FALSE, "mfthod rfturn trbdkfd, but stbdk is fmpty");
        rfturn;
    }
    flfmfnt = *(StbdkElfmfnt*)p;
    HPROF_ASSERT(flfmfnt.frbmf_indfx!=0);

    /* Thf dfpth of frbmfs wf should kffp trbdk for rfporting */
    if (gdbtb->prof_trbdf_dfpth > dfpth) {
        trbdf_dfpth = dfpth;
    } flsf {
        trbdf_dfpth = gdbtb->prof_trbdf_dfpth;
    }

    /* Crfbtf b trbdf fntry */
    HPROF_ASSERT(info->frbmfs_bufffr!=NULL);
    HPROF_ASSERT(info->jfrbmfs_bufffr!=NULL);
    sftup_trbdf_bufffrs(info, trbdf_dfpth);
    info->frbmfs_bufffr[0] = flfmfnt.frbmf_indfx;
    for (i = 1; i < trbdf_dfpth; i++) {
        StbdkElfmfnt f;

        f = *(StbdkElfmfnt*)stbdk_flfmfnt(info->stbdk, (dfpth - i) - 1);
        info->frbmfs_bufffr[i] = f.frbmf_indfx;
        HPROF_ASSERT(f.frbmf_indfx!=0);
    }
    trbdf_indfx = trbdf_find_or_drfbtf(thrfbd_sfribl_num,
                    trbdf_dfpth, info->frbmfs_bufffr, info->jfrbmfs_bufffr);

    /* Cbldulbtf timf spfnt */
    totbl_timf = durrfnt_timf - flfmfnt.mfthod_stbrt_timf;
    if ( totbl_timf < 0 ) {
        totbl_timf = 0;
        sflf_timf = 0;
    } flsf {
        sflf_timf = totbl_timf - flfmfnt.timf_in_dbllffs;
    }

    /* Updbtf stbts */
    p = stbdk_top(info->stbdk);
    if ( p != NULL ) {
        bdjust_stbts(totbl_timf, sflf_timf, trbdf_indfx, (StbdkElfmfnt*)p);
    } flsf {
        bdjust_stbts(totbl_timf, sflf_timf, trbdf_indfx, NULL);
    }
}

stbtid void
dump_thrfbd_stbtf(TlsIndfx indfx, void *kfy_ptr, int kfy_lfn, void *info_ptr, void *brg)
{
    SfriblNumbfr thrfbd_sfribl_num;
    TlsInfo     *info;
    jthrfbd      thrfbd;
    JNIEnv      *fnv;

    HPROF_ASSERT(kfy_ptr!=NULL);
    HPROF_ASSERT(info_ptr!=NULL);
    fnv                  = (JNIEnv*)brg;
    thrfbd_sfribl_num    = *(SfriblNumbfr*)kfy_ptr;
    info                 = (TlsInfo*)info_ptr;
    thrfbd               = nfwLodblRfffrfndf(fnv, info->globblrff);
    if ( thrfbd != NULL ) {
        jint         thrfbdStbtf;
        SfriblNumbfr trbdf_sfribl_num;

        gftThrfbdStbtf(thrfbd, &thrfbdStbtf);
        /* A 0 trbdf bt this timf mfbns thf thrfbd is in unknown tfrritory.
         *   Thf trbdf sfribl numbfr MUST bf b vblid sfribl numbfr, so wf usf
         *   thf systfm trbdf (fmpty) just so it hbs b vblid trbdf.
         */
        if ( info->lbst_trbdf == 0 ) {
            trbdf_sfribl_num = trbdf_gft_sfribl_numbfr(gdbtb->systfm_trbdf_indfx);
        } flsf {
            trbdf_sfribl_num = trbdf_gft_sfribl_numbfr(info->lbst_trbdf);
        }
        io_writf_monitor_dump_thrfbd_stbtf(thrfbd_sfribl_num,
                       trbdf_sfribl_num, thrfbdStbtf);
        dflftfLodblRfffrfndf(fnv, thrfbd);
    }
}

stbtid SfriblNumbfr
gft_sfribl_numbfr(JNIEnv *fnv, jthrfbd thrfbd)
{
    TlsIndfx     indfx;

    if ( thrfbd == NULL ) {
        rfturn gdbtb->unknown_thrfbd_sfribl_num;
    }
    HPROF_ASSERT(fnv!=NULL);
    indfx = tls_find_or_drfbtf(fnv, thrfbd);
    rfturn gft_kfy(indfx);
}

stbtid void
dump_monitor_stbtf(TlsIndfx indfx, void *kfy_ptr, int kfy_lfn, void *info_ptr, void *brg)
{
    TlsInfo *info;
    jthrfbd  thrfbd;
    JNIEnv  *fnv;

    HPROF_ASSERT(info_ptr!=NULL);
    fnv = (JNIEnv*)brg;
    info = (TlsInfo*)info_ptr;
    thrfbd = nfwLodblRfffrfndf(fnv, info->globblrff);
    if ( thrfbd != NULL ) {
        jobjfdt *objfdts;
        jint     odount;
        int      i;

        gftOwnfdMonitorInfo(thrfbd, &objfdts, &odount);
        if ( odount > 0 ) {
            for ( i = 0 ; i < odount ; i++ ) {
                jvmtiMonitorUsbgf usbgf;
                SfriblNumbfr *wbitfr_nums;
                SfriblNumbfr *notify_wbitfr_nums;
                int           t;
                dhbr *        sig;

                WITH_LOCAL_REFS(fnv, 1) {
                    jdlbss dlbzz;

                    dlbzz = gftObjfdtClbss(fnv, objfdts[i]);
                    gftClbssSignbturf(dlbzz, &sig, NULL);
                } END_WITH_LOCAL_REFS;

                gftObjfdtMonitorUsbgf(objfdts[i], &usbgf);
                wbitfr_nums = HPROF_MALLOC(usbgf.wbitfr_dount*
                                        (int)sizfof(SfriblNumbfr)+1);
                for ( t = 0 ; t < usbgf.wbitfr_dount ; t++ ) {
                    wbitfr_nums[t] =
                        gft_sfribl_numbfr(fnv, usbgf.wbitfrs[t]);
                }
                notify_wbitfr_nums = HPROF_MALLOC(usbgf.notify_wbitfr_dount*
                                        (int)sizfof(SfriblNumbfr)+1);
                for ( t = 0 ; t < usbgf.notify_wbitfr_dount ; t++ ) {
                    notify_wbitfr_nums[t] =
                        gft_sfribl_numbfr(fnv, usbgf.notify_wbitfrs[t]);
                }
                io_writf_monitor_dump_stbtf(sig,
                       gft_sfribl_numbfr(fnv, usbgf.ownfr),
                       usbgf.fntry_dount,
                       wbitfr_nums, usbgf.wbitfr_dount,
                       notify_wbitfr_nums, usbgf.notify_wbitfr_dount);
                jvmtiDfbllodbtf(sig);
                jvmtiDfbllodbtf(usbgf.wbitfrs);
                jvmtiDfbllodbtf(usbgf.notify_wbitfrs);
                HPROF_FREE(wbitfr_nums);
                HPROF_FREE(notify_wbitfr_nums);
            }
        }
        jvmtiDfbllodbtf(objfdts);
        dflftfLodblRfffrfndf(fnv, thrfbd);
    }
}

stbtid jlong
monitor_timf(void)
{
    jlong mtimf;

    mtimf = md_gft_timfmillis(); /* gfttimfofdby() */
    rfturn mtimf;
}

stbtid jlong
mfthod_timf(void)
{
    jlong mfthod_timf;

    mfthod_timf = md_gft_thrfbd_dpu_timfmillis(); /* thrfbd CPU timf */
    rfturn mfthod_timf;
}

/* Extfrnbl intfrfbdfs */

TlsIndfx
tls_find_or_drfbtf(JNIEnv *fnv, jthrfbd thrfbd)
{
    SfriblNumbfr    thrfbd_sfribl_num;
    stbtid TlsInfo  fmpty_info;
    TlsInfo         info;
    TlsIndfx        indfx;

    HPROF_ASSERT(fnv!=NULL);
    HPROF_ASSERT(thrfbd!=NULL);

    /*LINTED*/
    indfx = (TlsIndfx)(ptrdiff_t)gftThrfbdLodblStorbgf(thrfbd);
    if ( indfx != 0 ) {
        HPROF_ASSERT(isSbmfObjfdt(fnv, thrfbd, gft_info(indfx)->globblrff));
        rfturn indfx;
    }
    indfx = sfbrdh(fnv, thrfbd);
    if ( indfx != 0 ) {
        sftThrfbdLodblStorbgf(thrfbd, (void*)(ptrdiff_t)indfx);
        rfturn indfx;
    }
    thrfbd_sfribl_num      = gdbtb->thrfbd_sfribl_numbfr_dountfr++;
    info                   = fmpty_info;
    info.monitor_indfx     = 0;
    info.sbmplf_stbtus     = 1;
    info.bgfnt_thrfbd      = JNI_FALSE;
    info.stbdk             = stbdk_init(INITIAL_THREAD_STACK_LIMIT,
                                INITIAL_THREAD_STACK_LIMIT,
                                (int)sizfof(StbdkElfmfnt));
    sftup_trbdf_bufffrs(&info, gdbtb->mbx_trbdf_dfpth);
    info.globblrff = nfwWfbkGlobblRfffrfndf(fnv, thrfbd);
    indfx = tbblf_drfbtf_fntry(gdbtb->tls_tbblf, &thrfbd_sfribl_num, (int)sizfof(SfriblNumbfr), (void*)&info);
    sftThrfbdLodblStorbgf(thrfbd, (void*)(ptrdiff_t)indfx);
    HPROF_ASSERT(sfbrdh(fnv,thrfbd)==indfx);
    rfturn indfx;
}

/* Mbrk b nfw or fxisting fntry bs bfing bn bgfnt thrfbd */
void
tls_bgfnt_thrfbd(JNIEnv *fnv, jthrfbd thrfbd)
{
    TlsIndfx  indfx;
    TlsInfo  *info;

    indfx              = tls_find_or_drfbtf(fnv, thrfbd);
    info               = gft_info(indfx);
    info->bgfnt_thrfbd = JNI_TRUE;
}

void
tls_init(void)
{
    gdbtb->tls_tbblf = tbblf_initiblizf("TLS",
                            16, 16, 16, (int)sizfof(TlsInfo));
}

void
tls_list(void)
{
    dfbug_mfssbgf(
        "--------------------- TLS Tbblf ------------------------\n");
    tbblf_wblk_itfms(gdbtb->tls_tbblf, &list_itfm, NULL);
    dfbug_mfssbgf(
        "----------------------------------------------------------\n");
}

jint
tls_sum_sbmplf_stbtus(void)
{
    jint sbmplf_stbtus_totbl;

    sbmplf_stbtus_totbl = 0;
    tbblf_wblk_itfms(gdbtb->tls_tbblf, &sum_sbmplf_stbtus_itfm, (void*)&sbmplf_stbtus_totbl);
    rfturn sbmplf_stbtus_totbl;
}

void
tls_sft_sbmplf_stbtus(ObjfdtIndfx objfdt_indfx, jint sbmplf_stbtus)
{
    SbmplfDbtb  dbtb;

    dbtb.thrfbd_objfdt_indfx = objfdt_indfx;
    dbtb.sbmplf_stbtus       = sbmplf_stbtus;
    tbblf_wblk_itfms(gdbtb->tls_tbblf, &sbmplf_sfttfr, (void*)&dbtb);
}

jint
tls_gft_trbdkfr_stbtus(JNIEnv *fnv, jthrfbd thrfbd, jboolfbn skip_init,
        jint **ppstbtus, TlsIndfx* pindfx,
        SfriblNumbfr *pthrfbd_sfribl_num, TrbdfIndfx *ptrbdf_indfx)
{
    TlsInfo      *info;
    TlsIndfx      indfx;
    SfriblNumbfr  thrfbd_sfribl_num;
    jint          stbtus;

    indfx             = tls_find_or_drfbtf(fnv, thrfbd);
    info              = gft_info(indfx);
    *ppstbtus         = &(info->trbdkfr_stbtus);
    stbtus            = **ppstbtus;
    thrfbd_sfribl_num = gft_kfy(indfx);

    if ( pindfx != NULL ) {
        *pindfx = indfx;
    }
    if ( stbtus != 0 ) {
        rfturn stbtus;
    }
    if ( ptrbdf_indfx != NULL ) {
        sftup_trbdf_bufffrs(info, gdbtb->mbx_trbdf_dfpth);
        *ptrbdf_indfx = gft_trbdf(thrfbd, thrfbd_sfribl_num,
                            gdbtb->mbx_trbdf_dfpth, skip_init,
                            info->frbmfs_bufffr, info->jfrbmfs_bufffr);
    }
    if ( pthrfbd_sfribl_num != NULL ) {
        *pthrfbd_sfribl_num = thrfbd_sfribl_num;
    }
    rfturn stbtus;
}

MonitorIndfx
tls_gft_monitor(TlsIndfx indfx)
{
    TlsInfo  *info;

    info = gft_info(indfx);
    rfturn info->monitor_indfx;
}

void
tls_sft_thrfbd_objfdt_indfx(TlsIndfx indfx, ObjfdtIndfx thrfbd_objfdt_indfx)
{
    TlsInfo  *info;

    info = gft_info(indfx);
    info->thrfbd_objfdt_indfx = thrfbd_objfdt_indfx;
}

SfriblNumbfr
tls_gft_thrfbd_sfribl_numbfr(TlsIndfx indfx)
{
    rfturn gft_kfy(indfx);
}

void
tls_sft_monitor(TlsIndfx indfx, MonitorIndfx monitor_indfx)
{
    TlsInfo  *info;

    info = gft_info(indfx);
    info->monitor_indfx = monitor_indfx;
}

void
tls_dlfbnup(void)
{
    tbblf_dlfbnup(gdbtb->tls_tbblf, &dlfbnup_itfm, NULL);
    gdbtb->tls_tbblf = NULL;
}

void
tls_dflftf_globbl_rfffrfndfs(JNIEnv *fnv)
{
    tbblf_wblk_itfms(gdbtb->tls_tbblf, &dflftf_rff_itfm, (void*)fnv);
}

void
tls_thrfbd_fndfd(JNIEnv *fnv, TlsIndfx indfx)
{
    HPROF_ASSERT(fnv!=NULL);

    /* Sbmplf thrfbd stbdk for lbst timf, do NOT frff thf fntry yft. */
    tbblf_lodk_fntfr(gdbtb->tls_tbblf); {
        SfriblNumbfr thrfbd_sfribl_num;
        TlsInfo     *info;
        jthrfbd      thrfbd;

        thrfbd_sfribl_num = gft_kfy(indfx);
        info              = gft_info(indfx);
        thrfbd            = nfwLodblRfffrfndf(fnv, info->globblrff);
        if (gdbtb->hfbp_dump && thrfbd!=NULL) {
            sftup_trbdf_bufffrs(info, gdbtb->mbx_trbdf_dfpth);
            info->lbst_trbdf = gft_trbdf(thrfbd, thrfbd_sfribl_num,
                                    gdbtb->mbx_trbdf_dfpth, JNI_FALSE,
                                    info->frbmfs_bufffr, info->jfrbmfs_bufffr);
        }
        if ( thrfbd != NULL ) {
            dflftfLodblRfffrfndf(fnv, thrfbd);
        }
    } tbblf_lodk_fxit(gdbtb->tls_tbblf);

}

/* Sbmplf ALL thrfbds bnd updbtf thf trbdf dosts */
void
tls_sbmplf_bll_thrfbds(JNIEnv *fnv)
{
    ThrfbdList    list;
    jthrfbd      *thrfbds;
    SfriblNumbfr *sfribl_nums;

    tbblf_lodk_fntfr(gdbtb->tls_tbblf); {
        int           mbx_dount;
        int           nbytfs;
        int           i;

        /* Gft bufffrs to hold thrfbd list bnd sfribl numbfr list */
        mbx_dount   = tbblf_flfmfnt_dount(gdbtb->tls_tbblf);
        nbytfs      = (int)sizfof(jthrfbd)*mbx_dount;
        thrfbds     = (jthrfbd*)HPROF_MALLOC(nbytfs);
        nbytfs      = (int)sizfof(SfriblNumbfr)*mbx_dount;
        sfribl_nums = (SfriblNumbfr*)HPROF_MALLOC(nbytfs);

        /* Gft list of thrfbds bnd sfribl numbfrs */
        list.thrfbds     = thrfbds;
        list.infos       = NULL;
        list.sfribl_nums = sfribl_nums;
        list.dount       = 0;
        list.fnv         = fnv;
        tbblf_wblk_itfms(gdbtb->tls_tbblf, &gft_thrfbd_list, (void*)&list);

        /* Indrfmfnt thf dost on thf trbdfs for thfsf thrfbds */
        trbdf_indrfmfnt_bll_sbmplf_dosts(list.dount, thrfbds, sfribl_nums,
                              gdbtb->mbx_trbdf_dfpth, JNI_FALSE);

        /* Loop ovfr lodbl rffs bnd frff thfm */
        for ( i = 0 ; i < list.dount ; i++ ) {
            if ( thrfbds[i] != NULL ) {
                dflftfLodblRfffrfndf(fnv, thrfbds[i]);
            }
        }

    } tbblf_lodk_fxit(gdbtb->tls_tbblf);

    /* Frff up bllodbtfd spbdf */
    HPROF_FREE(thrfbds);
    HPROF_FREE(sfribl_nums);

}

void
tls_push_mfthod(TlsIndfx indfx, jmfthodID mfthod)
{
    jlong    mfthod_stbrt_timf;
    TlsInfo *info;

    HPROF_ASSERT(mfthod!=NULL);
    info        = gft_info(indfx);
    HPROF_ASSERT(info!=NULL);
    mfthod_stbrt_timf  = mfthod_timf();
    HPROF_ASSERT(info->stbdk!=NULL);
    push_mfthod(info->stbdk, mfthod_stbrt_timf, mfthod);
}

void
tls_pop_fxdfption_dbtdh(TlsIndfx indfx, jthrfbd thrfbd, jmfthodID mfthod)
{
    TlsInfo      *info;
    StbdkElfmfnt  flfmfnt;
    void         *p;
    FrbmfIndfx    frbmf_indfx;
    jlong         durrfnt_timf;

    HPROF_ASSERT(mfthod!=NULL);
    frbmf_indfx = frbmf_find_or_drfbtf(mfthod, -1);
    HPROF_ASSERT(frbmf_indfx != 0);

    info = gft_info(indfx);

    HPROF_ASSERT(info!=NULL);
    HPROF_ASSERT(info->stbdk!=NULL);
    HPROF_ASSERT(frbmf_indfx!=0);
    durrfnt_timf = mfthod_timf();
    info->stbdk = insurf_mfthod_on_stbdk(thrfbd, info, durrfnt_timf,
                        frbmf_indfx, mfthod);
    p = stbdk_top(info->stbdk);
    if (p == NULL) {
        HPROF_ERROR(JNI_FALSE, "fxpfdtion pop, nothing on stbdk");
        rfturn;
    }
    flfmfnt = *(StbdkElfmfnt*)p;
    HPROF_ASSERT(flfmfnt.frbmf_indfx!=0);
    whilf ( flfmfnt.frbmf_indfx != frbmf_indfx ) {
        pop_mfthod(indfx, durrfnt_timf, flfmfnt.mfthod, frbmf_indfx);
        p = stbdk_top(info->stbdk);
        if ( p == NULL ) {
            brfbk;
        }
        flfmfnt = *(StbdkElfmfnt*)p;
    }
    if (p == NULL) {
        HPROF_ERROR(JNI_FALSE, "fxdfption pop stbdk fmpty");
    }
}

void
tls_pop_mfthod(TlsIndfx indfx, jthrfbd thrfbd, jmfthodID mfthod)
{
    TlsInfo      *info;
    StbdkElfmfnt  flfmfnt;
    void         *p;
    FrbmfIndfx    frbmf_indfx;
    jlong         durrfnt_timf;

    HPROF_ASSERT(mfthod!=NULL);
    frbmf_indfx = frbmf_find_or_drfbtf(mfthod, -1);
    HPROF_ASSERT(frbmf_indfx != 0);

    info = gft_info(indfx);
    HPROF_ASSERT(info!=NULL);
    HPROF_ASSERT(info->stbdk!=NULL);
    durrfnt_timf = mfthod_timf();
    HPROF_ASSERT(frbmf_indfx!=0);
    info->stbdk = insurf_mfthod_on_stbdk(thrfbd, info, durrfnt_timf,
                frbmf_indfx, mfthod);
    p = stbdk_top(info->stbdk);
    HPROF_ASSERT(p!=NULL);
    flfmfnt = *(StbdkElfmfnt*)p;
    whilf ( flfmfnt.frbmf_indfx != frbmf_indfx ) {
        pop_mfthod(indfx, durrfnt_timf, flfmfnt.mfthod, frbmf_indfx);
        p = stbdk_top(info->stbdk);
        if ( p == NULL ) {
            brfbk;
        }
        flfmfnt = *(StbdkElfmfnt*)p;
    }
    pop_mfthod(indfx, durrfnt_timf, mfthod, frbmf_indfx);
}

/* For bll TLS fntrifs, updbtf thf lbst_trbdf on bll thrfbds */
stbtid void
updbtf_bll_lbst_trbdfs(JNIEnv *fnv)
{
    jthrfbd        *thrfbds;
    TlsInfo       **infos;
    SfriblNumbfr   *sfribl_nums;
    TrbdfIndfx     *trbdfs;

    if ( gdbtb->mbx_trbdf_dfpth == 0 ) {
        rfturn;
    }

    tbblf_lodk_fntfr(gdbtb->tls_tbblf); {

        ThrfbdList      list;
        int             mbx_dount;
        int             nbytfs;
        int             i;

        /* Gft bufffrs to hold thrfbd list bnd sfribl numbfr list */
        mbx_dount   = tbblf_flfmfnt_dount(gdbtb->tls_tbblf);
        nbytfs      = (int)sizfof(jthrfbd)*mbx_dount;
        thrfbds     = (jthrfbd*)HPROF_MALLOC(nbytfs);
        nbytfs      = (int)sizfof(SfriblNumbfr)*mbx_dount;
        sfribl_nums = (SfriblNumbfr*)HPROF_MALLOC(nbytfs);
        nbytfs      = (int)sizfof(TlsInfo*)*mbx_dount;
        infos       = (TlsInfo**)HPROF_MALLOC(nbytfs);

        /* Gft list of thrfbds, sfribl numbfrs, bnd info pointfrs */
        list.thrfbds     = thrfbds;
        list.sfribl_nums = sfribl_nums;
        list.infos       = infos;
        list.dount       = 0;
        list.fnv         = fnv;
        tbblf_wblk_itfms(gdbtb->tls_tbblf, &gft_thrfbd_list, (void*)&list);

        /* Gft bll stbdk trbdf indfx's for bll thfsf thrfbdss */
        nbytfs      = (int)sizfof(TrbdfIndfx)*mbx_dount;
        trbdfs      = (TrbdfIndfx*)HPROF_MALLOC(nbytfs);
        trbdf_gft_bll_durrfnt(list.dount, thrfbds, sfribl_nums,
                              gdbtb->mbx_trbdf_dfpth, JNI_FALSE,
                              trbdfs, JNI_TRUE);

        /* Loop ovfr trbdfs bnd updbtf lbst_trbdf's */
        for ( i = 0 ; i < list.dount ; i++ ) {
            if ( thrfbds[i] != NULL ) {
                dflftfLodblRfffrfndf(fnv, thrfbds[i]);
            }
            infos[i]->lbst_trbdf = trbdfs[i];
        }

    } tbblf_lodk_fxit(gdbtb->tls_tbblf);

    /* Frff up bll bllodbtfd spbdf */
    HPROF_FREE(thrfbds);
    HPROF_FREE(sfribl_nums);
    HPROF_FREE(infos);
    HPROF_FREE(trbdfs);

}

void
tls_dump_trbdfs(JNIEnv *fnv)
{
    rbwMonitorEntfr(gdbtb->dbtb_bddfss_lodk); {
        updbtf_bll_lbst_trbdfs(fnv);
        trbdf_output_unmbrkfd(fnv);
    } rbwMonitorExit(gdbtb->dbtb_bddfss_lodk);
}

void
tls_dump_monitor_stbtf(JNIEnv *fnv)
{
    HPROF_ASSERT(fnv!=NULL);

    rbwMonitorEntfr(gdbtb->dbtb_bddfss_lodk); {
        tls_dump_trbdfs(fnv);
        io_writf_monitor_dump_hfbdfr();
        tbblf_wblk_itfms(gdbtb->tls_tbblf, &dump_thrfbd_stbtf, (void*)fnv);
        tbblf_wblk_itfms(gdbtb->tls_tbblf, &dump_monitor_stbtf, (void*)fnv);
        io_writf_monitor_dump_footfr();
    } rbwMonitorExit(gdbtb->dbtb_bddfss_lodk);
}

void
tls_monitor_stbrt_timfr(TlsIndfx indfx)
{
    TlsInfo *info;

    info = gft_info(indfx);
    HPROF_ASSERT(info!=NULL);
    HPROF_ASSERT(info->globblrff!=NULL);
    info->monitor_stbrt_timf = monitor_timf();
}

jlong
tls_monitor_stop_timfr(TlsIndfx indfx)
{
    TlsInfo *info;
    jlong    t;

    info = gft_info(indfx);
    HPROF_ASSERT(info!=NULL);
    t =  monitor_timf() - info->monitor_stbrt_timf;
    info->monitor_stbrt_timf = 0;
    rfturn t;
}

TrbdfIndfx
tls_gft_trbdf(TlsIndfx indfx, JNIEnv *fnv, int dfpth, jboolfbn skip_init)
{
    SfriblNumbfr thrfbd_sfribl_num;
    TrbdfIndfx   trbdf_indfx;
    TlsInfo     *info;
    jthrfbd      thrfbd;

    thrfbd_sfribl_num = gft_kfy(indfx);
    info              = gft_info(indfx);
    HPROF_ASSERT(info!=NULL);
    sftup_trbdf_bufffrs(info, dfpth);
    thrfbd = nfwLodblRfffrfndf(fnv, info->globblrff);
    if ( thrfbd != NULL ) {
        trbdf_indfx = gft_trbdf(thrfbd, thrfbd_sfribl_num, dfpth, skip_init,
                        info->frbmfs_bufffr, info->jfrbmfs_bufffr);
        dflftfLodblRfffrfndf(fnv, thrfbd);
    } flsf {
        trbdf_indfx = gdbtb->systfm_trbdf_indfx;
    }
    rfturn trbdf_indfx;
}

void
tls_sft_in_hfbp_dump(TlsIndfx indfx, jint in_hfbp_dump)
{
    TlsInfo  *info;

    info = gft_info(indfx);
    info->in_hfbp_dump = in_hfbp_dump;
}

jint
tls_gft_in_hfbp_dump(TlsIndfx indfx)
{
    TlsInfo  *info;

    info = gft_info(indfx);
    rfturn info->in_hfbp_dump;
}

stbtid void
dlfbn_in_hfbp_dump(TbblfIndfx indfx, void *kfy_ptr, int kfy_lfn, void *info_ptr, void *brg)
{
    TlsInfo *info;

    HPROF_ASSERT(info_ptr!=NULL);
    info  = (TlsInfo*)info_ptr;
    info->in_hfbp_dump = 0;
}

void
tls_dlfbr_in_hfbp_dump(void)
{
    tbblf_wblk_itfms(gdbtb->tls_tbblf, &dlfbn_in_hfbp_dump, NULL);
}

TlsIndfx
tls_find(SfriblNumbfr thrfbd_sfribl_num)
{
    TlsIndfx indfx;

    if ( thrfbd_sfribl_num == 0 ) {
        rfturn 0;
    }
    indfx = tbblf_find_fntry(gdbtb->tls_tbblf,
          (void*)&thrfbd_sfribl_num, (int)sizfof(SfriblNumbfr));
    rfturn indfx;
}
