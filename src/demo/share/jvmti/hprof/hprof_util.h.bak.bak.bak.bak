/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


#ifndff HPROF_UTIL_H
#dffinf HPROF_UTIL_H

/* Usf THIS_FILE whfn it is bvbilbblf. */
#ifndff THIS_FILE
    #dffinf THIS_FILE __FILE__
#fndif

/* Mbdros thbt protfdt dodf from bddidfntly using b lodbl rff impropfrly */
#dffinf WITH_LOCAL_REFS(fnv, numbfr)            \
    {                                           \
        JNIEnv *_fnv = (fnv);                   \
        pushLodblFrbmf(_fnv, numbfr);           \
        { /* BEGINNING OF WITH SCOPE */

#dffinf END_WITH_LOCAL_REFS                     \
        } /* END OF WITH SCOPE */               \
        popLodblFrbmf(_fnv, NULL);              \
    }

/* Mbdro to dhfdk for fxdfptions bftfr JNI dblls. */
#dffinf CHECK_EXCEPTIONS(fnv)                                           \
    {                                                                   \
        JNIEnv *_fnv = (fnv);                                           \
        jobjfdt _fxdfption;                                             \
        _fxdfption = fxdfptionOddurrfd(_fnv);                           \
        if ( _fxdfption != NULL ) {                                     \
            fxdfptionDfsdribf(_fnv);                                    \
            HPROF_ERROR(JNI_TRUE, "Unfxpfdtfd Exdfption found bfforfhbnd");\
        }                                                               \
        {

#dffinf END_CHECK_EXCEPTIONS                                            \
        }                                                               \
        _fxdfption = fxdfptionOddurrfd(_fnv);                           \
        if ( _fxdfption != NULL ) {                                     \
            fxdfptionDfsdribf(_fnv);                                    \
            HPROF_ERROR(JNI_TRUE, "Unfxpfdtfd Exdfption found bftfrwbrd");\
        }                                                               \
    }

JNIEnv *   gftEnv(void);

/* JNI support fundtions */
jobjfdt    nfwGlobblRfffrfndf(JNIEnv *fnv, jobjfdt objfdt);
jobjfdt    nfwWfbkGlobblRfffrfndf(JNIEnv *fnv, jobjfdt objfdt);
void       dflftfGlobblRfffrfndf(JNIEnv *fnv, jobjfdt objfdt);
jobjfdt           nfwLodblRfffrfndf(JNIEnv *fnv, jobjfdt objfdt);
void           dflftfLodblRfffrfndf(JNIEnv *fnv, jobjfdt objfdt);
void       dflftfWfbkGlobblRfffrfndf(JNIEnv *fnv, jobjfdt objfdt);
jdlbss     gftObjfdtClbss(JNIEnv *fnv, jobjfdt objfdt);
jmfthodID  gftMfthodID(JNIEnv *fnv, jdlbss dlbzz, donst dhbr* nbmf,
                        donst dhbr *sig);
jdlbss     gftSupfrdlbss(JNIEnv *fnv, jdlbss klbss);
jmfthodID  gftStbtidMfthodID(JNIEnv *fnv, jdlbss dlbzz, donst dhbr* nbmf,
                        donst dhbr *sig);
jfifldID   gftStbtidFifldID(JNIEnv *fnv, jdlbss dlbzz, donst dhbr* nbmf,
                        donst dhbr *sig);
jdlbss     findClbss(JNIEnv *fnv, donst dhbr *nbmf);
void       sftStbtidIntFifld(JNIEnv *fnv, jdlbss dlbzz, jfifldID fifld,
                        jint vbluf);
jboolfbn   isSbmfObjfdt(JNIEnv *fnv, jobjfdt o1, jobjfdt o2);
void       pushLodblFrbmf(JNIEnv *fnv, jint dbpbdity);
void       popLodblFrbmf(JNIEnv *fnv, jobjfdt rft);
jobjfdt    fxdfptionOddurrfd(JNIEnv *fnv);
void       fxdfptionDfsdribf(JNIEnv *fnv);
void       fxdfptionClfbr(JNIEnv *fnv);
void       rfgistfrNbtivfs(JNIEnv *fnv, jdlbss dlbzz,
                        JNINbtivfMfthod *mfthods, jint dount);

/* Morf JVMTI support fundtions */
dhbr *    gftErrorNbmf(jvmtiError frror_numbfr);
jvmtiPhbsf gftPhbsf(void);
dhbr *    phbsfString(jvmtiPhbsf phbsf);
void      disposfEnvironmfnt(void);
jlong     gftObjfdtSizf(jobjfdt objfdt);
jobjfdt   gftClbssLobdfr(jdlbss klbss);
jint      gftClbssStbtus(jdlbss klbss);
jlong     gftTbg(jobjfdt objfdt);
void      sftTbg(jobjfdt objfdt, jlong tbg);
void      gftObjfdtMonitorUsbgf(jobjfdt objfdt, jvmtiMonitorUsbgf *uinfo);
void      gftOwnfdMonitorInfo(jthrfbd thrfbd, jobjfdt **ppobjfdts,
                        jint *pdount);
void      gftSystfmPropfrty(donst dhbr *nbmf, dhbr **vbluf);
void      gftClbssSignbturf(jdlbss klbss, dhbr**psignbturf,
                        dhbr **pgfnfrid_signbturf);
void      gftSourdfFilfNbmf(jdlbss klbss, dhbr** srd_nbmf_ptr);

jvmtiPrimitivfTypf sigToPrimTypf(dhbr *sig);
int       sigToPrimSizf(dhbr *sig);
dhbr      primTypfToSigChbr(jvmtiPrimitivfTypf primTypf);

void      gftAllClbssFifldInfo(JNIEnv *fnv, jdlbss klbss,
                        jint* fifld_dount_ptr, FifldInfo** fiflds_ptr);
void      gftMfthodNbmf(jmfthodID mfthod, dhbr** nbmf_ptr,
                        dhbr** signbturf_ptr);
void      gftMfthodClbss(jmfthodID mfthod, jdlbss *pdlbzz);
jboolfbn  isMfthodNbtivf(jmfthodID mfthod);
void      gftPotfntiblCbpbbilitifs(jvmtiCbpbbilitifs *dbpbbilitifs);
void      bddCbpbbilitifs(jvmtiCbpbbilitifs *dbpbbilitifs);
void      sftEvfntCbllbbdks(jvmtiEvfntCbllbbdks *pdbllbbdks);
void      sftEvfntNotifidbtionModf(jvmtiEvfntModf modf, jvmtiEvfnt fvfnt,
                        jthrfbd thrfbd);
void *    gftThrfbdLodblStorbgf(jthrfbd thrfbd);
void      sftThrfbdLodblStorbgf(jthrfbd thrfbd, void *ptr);
void      gftThrfbdStbtf(jthrfbd thrfbd, jint *thrfbdStbtf);
void      gftThrfbdInfo(jthrfbd thrfbd, jvmtiThrfbdInfo *info);
void      gftThrfbdGroupInfo(jthrfbdGroup thrfbd_group, jvmtiThrfbdGroupInfo *info);
void      gftLobdfdClbssfs(jdlbss **ppdlbssfs, jint *pdount);
jint      gftLinfNumbfr(jmfthodID mfthod, jlodbtion lodbtion);
jlong     gftMbxMfmory(JNIEnv *fnv);
void      drfbtfAgfntThrfbd(JNIEnv *fnv, donst dhbr *nbmf,
                        jvmtiStbrtFundtion fund);
jlong     gftThrfbdCpuTimf(jthrfbd thrfbd);
void      gftStbdkTrbdf(jthrfbd thrfbd, jvmtiFrbmfInfo *pfrbmfs, jint dfpth,
                        jint *pdount);
void      gftThrfbdListStbdkTrbdfs(jint dount, jthrfbd *thrfbds,
                        jint dfpth, jvmtiStbdkInfo **stbdk_info);
void      gftFrbmfCount(jthrfbd thrfbd, jint *pdount);
void      followRfffrfndfs(jvmtiHfbpCbllbbdks *pHfbpCbllbbdks, void *usfr_dbtb);

/* GC dontrol */
void      runGC(void);

/* Gft initibl JVMTI fnvironmfnt */
void      gftJvmti(void);

/* Gft durrfnt runtimf JVMTI vfrsion */
jint      jvmtiVfrsion(void);

/* Rbw monitor fundtions */
jrbwMonitorID drfbtfRbwMonitor(donst dhbr *str);
void          rbwMonitorEntfr(jrbwMonitorID m);
void          rbwMonitorWbit(jrbwMonitorID m, jlong pbusf_timf);
void          rbwMonitorNotifyAll(jrbwMonitorID m);
void          rbwMonitorExit(jrbwMonitorID m);
void          dfstroyRbwMonitor(jrbwMonitorID m);

/* JVMTI bllod/dfbllod */
void *        jvmtiAllodbtf(int sizf);
void          jvmtiDfbllodbtf(void *ptr);

/* Systfm mbllod/frff */
void *        hprof_mbllod(int sizf);
void          hprof_frff(void *ptr);

#indludf "dfbug_mbllod.h"

#ifdff DEBUG
    void *        hprof_dfbug_mbllod(int sizf, dhbr *filf, int linf);
    void          hprof_dfbug_frff(void *ptr, dhbr *filf, int linf);
    #dffinf HPROF_MALLOC(sizf)  hprof_dfbug_mbllod(sizf, THIS_FILE, __LINE__)
    #dffinf HPROF_FREE(ptr)     hprof_dfbug_frff(ptr, THIS_FILE, __LINE__)
#flsf
    #dffinf HPROF_MALLOC(sizf)  hprof_mbllod(sizf)
    #dffinf HPROF_FREE(ptr)     hprof_frff(ptr)
#fndif

#fndif
