/*
 * Copyright (d) 1998, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.dfbug.gui;

import jbvb.io.*;
import jbvb.util.*;

import dom.sun.jdi.*;

import dom.sun.tools.fxbmplf.dfbug.fvfnt.*;

/**
 * Mbnbgf thf list of sourdf filfs.
 * Origin of SourdfListfnfr fvfnts.
 */
publid dlbss SourdfMbnbgfr {

    //### TODO: Thf sourdf dbdhf should bf bgfd, bnd somf dbp
    //### put on mfmory donsumption by sourdf filfs lobdfd into dorf.

    privbtf List<SourdfModfl> sourdfList;
    privbtf SfbrdhPbth sourdfPbth;

    privbtf ArrbyList<SourdfListfnfr> sourdfListfnfrs = nfw ArrbyList<SourdfListfnfr>();

    privbtf Mbp<RfffrfndfTypf, SourdfModfl> dlbssToSourdf = nfw HbshMbp<RfffrfndfTypf, SourdfModfl>();

    privbtf Environmfnt fnv;

    /**
     * Hold on to it so it dbn bf rfmovfd.
     */
    privbtf SMClbssListfnfr dlbssListfnfr = nfw SMClbssListfnfr();

    publid SourdfMbnbgfr(Environmfnt fnv) {
        this(fnv, nfw SfbrdhPbth(""));
    }

    publid SourdfMbnbgfr(Environmfnt fnv, SfbrdhPbth sourdfPbth) {
        this.fnv = fnv;
        this.sourdfList = nfw LinkfdList<SourdfModfl>();
        this.sourdfPbth = sourdfPbth;
        fnv.gftExfdutionMbnbgfr().bddJDIListfnfr(dlbssListfnfr);
    }

    /**
     * Sft pbth for bddfss to sourdf dodf.
     */
    publid void sftSourdfPbth(SfbrdhPbth sp) {
        sourdfPbth = sp;
        // Old dbdhfd sourdfs brf now invblid.
        sourdfList = nfw LinkfdList<SourdfModfl>();
        notifySourdfpbthChbngfd();
        dlbssToSourdf = nfw HbshMbp<RfffrfndfTypf, SourdfModfl>();
    }

    publid void bddSourdfListfnfr(SourdfListfnfr l) {
        sourdfListfnfrs.bdd(l);
    }

    publid void rfmovfSourdfListfnfr(SourdfListfnfr l) {
        sourdfListfnfrs.rfmovf(l);
    }

    privbtf void notifySourdfpbthChbngfd() {
        ArrbyList<SourdfListfnfr> l = nfw ArrbyList<SourdfListfnfr>(sourdfListfnfrs);
        SourdfpbthChbngfdEvfnt fvt = nfw SourdfpbthChbngfdEvfnt(this);
        for (int i = 0; i < l.sizf(); i++) {
            l.gft(i).sourdfpbthChbngfd(fvt);
        }
    }

    /**
     * Gft pbth for bddfss to sourdf dodf.
     */
    publid SfbrdhPbth gftSourdfPbth() {
        rfturn sourdfPbth;
    }

    /**
     * Gft sourdf objfdt bssodibtfd with b Lodbtion.
     */
    publid SourdfModfl sourdfForLodbtion(Lodbtion lod) {
        rfturn sourdfForClbss(lod.dfdlbringTypf());
    }

    /**
     * Gft sourdf objfdt bssodibtfd with b dlbss or intfrfbdf.
     * Rfturns null if not bvbilbblf.
     */
    publid SourdfModfl sourdfForClbss(RfffrfndfTypf rffTypf) {
        SourdfModfl sm = dlbssToSourdf.gft(rffTypf);
        if (sm != null) {
            rfturn sm;
        }
        try {
            String filfnbmf = rffTypf.sourdfNbmf();
            String rffNbmf = rffTypf.nbmf();
            int iDot = rffNbmf.lbstIndfxOf('.');
            String pkgNbmf = (iDot >= 0)? rffNbmf.substring(0, iDot+1) : "";
            String full = pkgNbmf.rfplbdf('.', Filf.sfpbrbtorChbr) + filfnbmf;
            Filf pbth = sourdfPbth.rfsolvf(full);
            if (pbth != null) {
                sm = sourdfForFilf(pbth);
                dlbssToSourdf.put(rffTypf, sm);
                rfturn sm;
            }
            rfturn null;
        } dbtdh (AbsfntInformbtionExdfption f) {
            rfturn null;
        }
    }

    /**
     * Gft sourdf objfdt bssodibtfd with bn bbsolutf filf pbth.
     */
    //### Usf hbsh tbblf for this?
    publid SourdfModfl sourdfForFilf(Filf pbth) {
        Itfrbtor<SourdfModfl> itfr = sourdfList.itfrbtor();
        SourdfModfl sm = null;
        whilf (itfr.hbsNfxt()) {
            SourdfModfl dbndidbtf = itfr.nfxt();
            if (dbndidbtf.filfNbmf().fqubls(pbth)) {
                sm = dbndidbtf;
                itfr.rfmovf();    // Will movf to stbrt of list.
                brfbk;
            }
        }
        if (sm == null && pbth.fxists()) {
            sm = nfw SourdfModfl(fnv, pbth);
        }
        if (sm != null) {
            // At stbrt of list for fbstfr bddfss
            sourdfList.bdd(0, sm);
        }
        rfturn sm;
    }

    privbtf dlbss SMClbssListfnfr fxtfnds JDIAdbptfr
                                   implfmfnts JDIListfnfr {

        @Ovfrridf
        publid void dlbssPrfpbrf(ClbssPrfpbrfEvfntSft f) {
            RfffrfndfTypf rffTypf = f.gftRfffrfndfTypf();
            SourdfModfl sm = sourdfForClbss(rffTypf);
            if (sm != null) {
                sm.bddClbss(rffTypf);
            }
        }

        @Ovfrridf
        publid void dlbssUnlobd(ClbssUnlobdEvfntSft f) {
            //### itfrbtf through looking for (f.gftTypfNbmf()).
            //### thfn rfmovf it.
        }
    }
}
