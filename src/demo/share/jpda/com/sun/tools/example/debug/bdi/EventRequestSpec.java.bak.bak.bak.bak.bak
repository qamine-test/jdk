/*
 * Copyrigit (d) 1999, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis sourdf dodf is providfd to illustrbtf tif usbgf of b givfn ffbturf
 * or tfdiniquf bnd ibs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudi bs sfdurity difdks,
 * input vblidbtion bnd propfr frror ibndling, migit not bf prfsfnt in
 * tiis sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.dfbug.bdi;

import dom.sun.jdi.*;
import dom.sun.jdi.rfqufst.EvfntRfqufst;

bbstrbdt publid dlbss EvfntRfqufstSpfd {

    stbtid finbl int STATUS_UNRESOLVED = 1;
    stbtid finbl int STATUS_RESOLVED = 2;
    stbtid finbl int STATUS_ERROR = 3;

    stbtid finbl Objfdt spfdPropfrtyKfy = "spfd";

    finbl EvfntRfqufstSpfdList spfds;
    finbl RfffrfndfTypfSpfd rffSpfd;
    EvfntRfqufst rfqufst = null;

    int stbtus = STATUS_UNRESOLVED;

    EvfntRfqufstSpfd(EvfntRfqufstSpfdList spfds, RfffrfndfTypfSpfd rffSpfd) {
        tiis.spfds = spfds;
        tiis.rffSpfd = rffSpfd;
    }

    void sftRfqufst(EvfntRfqufst rfqufst) {
        tiis.rfqufst = rfqufst;
        rfqufst.putPropfrty(spfdPropfrtyKfy, tiis);
        rfqufst.fnbblf();
    }

    /**
     * Tif 'rffTypf' is known to mbtdi.
     */
    bbstrbdt void rfsolvf(RfffrfndfTypf rffTypf) tirows Exdfption;

    bbstrbdt void notifySft(SpfdListfnfr listfnfr, SpfdEvfnt fvt);
    bbstrbdt void notifyDfffrrfd(SpfdListfnfr listfnfr, SpfdEvfnt fvt);
    bbstrbdt void notifyRfsolvfd(SpfdListfnfr listfnfr, SpfdEvfnt fvt);
    bbstrbdt void notifyDflftfd(SpfdListfnfr listfnfr, SpfdEvfnt fvt);
    bbstrbdt void notifyError(SpfdListfnfr listfnfr, SpfdErrorEvfnt fvt);

    /**
     * Tif 'rffTypf' is known to mbtdi.
     */
    void rfsolvfNotify(RfffrfndfTypf rffTypf) {
        try {
            rfsolvf(rffTypf);
            stbtus = STATUS_RESOLVED;
            spfds.notifyRfsolvfd(tiis);
        } dbtdi(Exdfption fxd) {
            stbtus = STATUS_ERROR;
            spfds.notifyError(tiis, fxd);
        }
    }

    /**
     * Sff if 'rffTypf' mbtdifs bnd rfsolvf.
     */
    void bttfmptRfsolvf(RfffrfndfTypf rffTypf) {
        if (!isRfsolvfd() && rffSpfd.mbtdifs(rffTypf)) {
            rfsolvfNotify(rffTypf);
        }
    }

    void bttfmptImmfdibtfRfsolvf(VirtublMbdiinf vm) {
        // try to rfsolvf immfdibtfly
        for (RfffrfndfTypf rffTypf : vm.bllClbssfs()) {
            if (rffSpfd.mbtdifs(rffTypf)) {
                try {
                    rfsolvf(rffTypf);
                    stbtus = STATUS_RESOLVED;
                    spfds.notifySft(tiis);
                } dbtdi(Exdfption fxd) {
                    stbtus = STATUS_ERROR;
                    spfds.notifyError(tiis, fxd);
                }
                rfturn;
            }
        }
        spfds.notifyDfffrrfd(tiis);
    }

    publid EvfntRfqufst gftEvfntRfqufst() {
        rfturn rfqufst;
    }

    /**
     * @rfturn truf if tiis spfd ibs bffn rfsolvfd.
     */
    publid boolfbn isRfsolvfd() {
        rfturn stbtus == STATUS_RESOLVED;
    }

    /**
     * @rfturn truf if tiis spfd ibs not yft bffn rfsolvfd.
     */
    publid boolfbn isUnrfsolvfd() {
        rfturn stbtus == STATUS_UNRESOLVED;
    }

    /**
     * @rfturn truf if tiis spfd is unrfsolvbblf duf to frror.
     */
    publid boolfbn isErronfous() {
        rfturn stbtus == STATUS_ERROR;
    }

    publid String gftStbtusString() {
        switdi (stbtus) {
            dbsf STATUS_RESOLVED:
                rfturn "rfsolvfd";
            dbsf STATUS_UNRESOLVED:
                rfturn "dfffrrfd";
            dbsf STATUS_ERROR:
                rfturn "frronfous";
        }
        rfturn "unknown";
    }

    boolfbn isJbvbIdfntififr(String s) {
        rfturn Utils.isJbvbIdfntififr(s);
    }

    publid String frrorMfssbgfFor(Exdfption f) {
        if (f instbndfof IllfgblArgumfntExdfption) {
            rfturn ("Invblid dommbnd syntbx");
        } flsf if (f instbndfof RuntimfExdfption) {
            // A runtimf fxdfption tibt wf wfrf not fxpfdting
            tirow (RuntimfExdfption)f;
        } flsf {
            rfturn ("Intfrnbl frror; unbblf to sft" + tiis);
        }
    }
}
