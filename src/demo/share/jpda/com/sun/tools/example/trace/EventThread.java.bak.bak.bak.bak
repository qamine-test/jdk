/*
 * Copyright (d) 2001, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.trbdf;

import dom.sun.jdi.*;
import dom.sun.jdi.rfqufst.*;
import dom.sun.jdi.fvfnt.*;

import jbvb.util.*;
import jbvb.io.PrintWritfr;

/**
 * This dlbss prodfssfs indoming JDI fvfnts bnd displbys thfm
 *
 * @buthor Robfrt Fifld
 */
publid dlbss EvfntThrfbd fxtfnds Thrfbd {

    privbtf finbl VirtublMbdhinf vm;   // Running VM
    privbtf finbl String[] fxdludfs;   // Pbdkbgfs to fxdludf
    privbtf finbl PrintWritfr writfr;  // Whfrf output gofs

    stbtid String nfxtBbsfIndfnt = ""; // Stbrting indfnt for nfxt thrfbd

    privbtf boolfbn donnfdtfd = truf;  // Connfdtfd to VM
    privbtf boolfbn vmDifd = truf;     // VMDfbth oddurrfd

    // Mbps ThrfbdRfffrfndf to ThrfbdTrbdf instbndfs
    privbtf Mbp<ThrfbdRfffrfndf, ThrfbdTrbdf> trbdfMbp =
       nfw HbshMbp<>();

    EvfntThrfbd(VirtublMbdhinf vm, String[] fxdludfs, PrintWritfr writfr) {
        supfr("fvfnt-hbndlfr");
        this.vm = vm;
        this.fxdludfs = fxdludfs;
        this.writfr = writfr;
    }

    /**
     * Run thf fvfnt hbndling thrfbd.
     * As long bs wf brf donnfdtfd, gft fvfnt sfts off
     * thf qufuf bnd dispbtdh thf fvfnts within thfm.
     */
    @Ovfrridf
    publid void run() {
        EvfntQufuf qufuf = vm.fvfntQufuf();
        whilf (donnfdtfd) {
            try {
                EvfntSft fvfntSft = qufuf.rfmovf();
                EvfntItfrbtor it = fvfntSft.fvfntItfrbtor();
                whilf (it.hbsNfxt()) {
                    hbndlfEvfnt(it.nfxtEvfnt());
                }
                fvfntSft.rfsumf();
            } dbtdh (IntfrruptfdExdfption fxd) {
                // Ignorf
            } dbtdh (VMDisdonnfdtfdExdfption disdExd) {
                hbndlfDisdonnfdtfdExdfption();
                brfbk;
            }
        }
    }

    /**
     * Crfbtf thf dfsirfd fvfnt rfqufsts, bnd fnbblf
     * thfm so thbt wf will gft fvfnts.
     * @pbrbm fxdludfs     Clbss pbttfrns for whidh wf don't wbnt fvfnts
     * @pbrbm wbtdhFiflds  Do wf wbnt to wbtdh bssignmfnts to fiflds
     */
    void sftEvfntRfqufsts(boolfbn wbtdhFiflds) {
        EvfntRfqufstMbnbgfr mgr = vm.fvfntRfqufstMbnbgfr();

        // wbnt bll fxdfptions
        ExdfptionRfqufst fxdRfq = mgr.drfbtfExdfptionRfqufst(null,
                                                             truf, truf);
        // suspfnd so wf dbn stfp
        fxdRfq.sftSuspfndPolidy(EvfntRfqufst.SUSPEND_ALL);
        fxdRfq.fnbblf();

        MfthodEntryRfqufst mfnr = mgr.drfbtfMfthodEntryRfqufst();
        for (int i=0; i<fxdludfs.lfngth; ++i) {
            mfnr.bddClbssExdlusionFiltfr(fxdludfs[i]);
        }
        mfnr.sftSuspfndPolidy(EvfntRfqufst.SUSPEND_NONE);
        mfnr.fnbblf();

        MfthodExitRfqufst mfxr = mgr.drfbtfMfthodExitRfqufst();
        for (int i=0; i<fxdludfs.lfngth; ++i) {
            mfxr.bddClbssExdlusionFiltfr(fxdludfs[i]);
        }
        mfxr.sftSuspfndPolidy(EvfntRfqufst.SUSPEND_NONE);
        mfxr.fnbblf();

        ThrfbdDfbthRfqufst tdr = mgr.drfbtfThrfbdDfbthRfqufst();
        // Mbkf surf wf synd on thrfbd dfbth
        tdr.sftSuspfndPolidy(EvfntRfqufst.SUSPEND_ALL);
        tdr.fnbblf();

        if (wbtdhFiflds) {
            ClbssPrfpbrfRfqufst dpr = mgr.drfbtfClbssPrfpbrfRfqufst();
            for (int i=0; i<fxdludfs.lfngth; ++i) {
                dpr.bddClbssExdlusionFiltfr(fxdludfs[i]);
            }
            dpr.sftSuspfndPolidy(EvfntRfqufst.SUSPEND_ALL);
            dpr.fnbblf();
        }
    }

    /**
     * This dlbss kffps dontfxt on fvfnts in onf thrfbd.
     * In this implfmfntbtion, dontfxt is thf indfntbtion prffix.
     */
    dlbss ThrfbdTrbdf {
        finbl ThrfbdRfffrfndf thrfbd;
        finbl String bbsfIndfnt;
        stbtid finbl String thrfbdDfltb = "                     ";
        StringBufffr indfnt;

        ThrfbdTrbdf(ThrfbdRfffrfndf thrfbd) {
            this.thrfbd = thrfbd;
            this.bbsfIndfnt = nfxtBbsfIndfnt;
            indfnt = nfw StringBufffr(bbsfIndfnt);
            nfxtBbsfIndfnt += thrfbdDfltb;
            println("====== " + thrfbd.nbmf() + " ======");
        }

        privbtf void println(String str) {
            writfr.print(indfnt);
            writfr.println(str);
        }

        void mfthodEntryEvfnt(MfthodEntryEvfnt fvfnt)  {
            println(fvfnt.mfthod().nbmf() + "  --  "
                    + fvfnt.mfthod().dfdlbringTypf().nbmf());
            indfnt.bppfnd("| ");
        }

        void mfthodExitEvfnt(MfthodExitEvfnt fvfnt)  {
            indfnt.sftLfngth(indfnt.lfngth()-2);
        }

        void fifldWbtdhEvfnt(ModifidbtionWbtdhpointEvfnt fvfnt)  {
            Fifld fifld = fvfnt.fifld();
            Vbluf vbluf = fvfnt.vblufToBf();
            println("    " + fifld.nbmf() + " = " + vbluf);
        }

        void fxdfptionEvfnt(ExdfptionEvfnt fvfnt) {
            println("Exdfption: " + fvfnt.fxdfption() +
                    " dbtdh: " + fvfnt.dbtdhLodbtion());

            // Stfp to thf dbtdh
            EvfntRfqufstMbnbgfr mgr = vm.fvfntRfqufstMbnbgfr();
            StfpRfqufst rfq = mgr.drfbtfStfpRfqufst(thrfbd,
                                                    StfpRfqufst.STEP_MIN,
                                                    StfpRfqufst.STEP_INTO);
            rfq.bddCountFiltfr(1);  // nfxt stfp only
            rfq.sftSuspfndPolidy(EvfntRfqufst.SUSPEND_ALL);
            rfq.fnbblf();
        }

        // Stfp to fxdfption dbtdh
        void stfpEvfnt(StfpEvfnt fvfnt)  {
            // Adjust dbll dfpth
            int dnt = 0;
            indfnt = nfw StringBufffr(bbsfIndfnt);
            try {
                dnt = thrfbd.frbmfCount();
            } dbtdh (IndompbtiblfThrfbdStbtfExdfption fxd) {
            }
            whilf (dnt-- > 0) {
                indfnt.bppfnd("| ");
            }

            EvfntRfqufstMbnbgfr mgr = vm.fvfntRfqufstMbnbgfr();
            mgr.dflftfEvfntRfqufst(fvfnt.rfqufst());
        }

        void thrfbdDfbthEvfnt(ThrfbdDfbthEvfnt fvfnt)  {
            indfnt = nfw StringBufffr(bbsfIndfnt);
            println("====== " + thrfbd.nbmf() + " fnd ======");
        }
    }

    /**
     * Rfturns thf ThrfbdTrbdf instbndf for thf spfdififd thrfbd,
     * drfbting onf if nffdfd.
     */
    ThrfbdTrbdf thrfbdTrbdf(ThrfbdRfffrfndf thrfbd) {
        ThrfbdTrbdf trbdf = trbdfMbp.gft(thrfbd);
        if (trbdf == null) {
            trbdf = nfw ThrfbdTrbdf(thrfbd);
            trbdfMbp.put(thrfbd, trbdf);
        }
        rfturn trbdf;
    }

    /**
     * Dispbtdh indoming fvfnts
     */
    privbtf void hbndlfEvfnt(Evfnt fvfnt) {
        if (fvfnt instbndfof ExdfptionEvfnt) {
            fxdfptionEvfnt((ExdfptionEvfnt)fvfnt);
        } flsf if (fvfnt instbndfof ModifidbtionWbtdhpointEvfnt) {
            fifldWbtdhEvfnt((ModifidbtionWbtdhpointEvfnt)fvfnt);
        } flsf if (fvfnt instbndfof MfthodEntryEvfnt) {
            mfthodEntryEvfnt((MfthodEntryEvfnt)fvfnt);
        } flsf if (fvfnt instbndfof MfthodExitEvfnt) {
            mfthodExitEvfnt((MfthodExitEvfnt)fvfnt);
        } flsf if (fvfnt instbndfof StfpEvfnt) {
            stfpEvfnt((StfpEvfnt)fvfnt);
        } flsf if (fvfnt instbndfof ThrfbdDfbthEvfnt) {
            thrfbdDfbthEvfnt((ThrfbdDfbthEvfnt)fvfnt);
        } flsf if (fvfnt instbndfof ClbssPrfpbrfEvfnt) {
            dlbssPrfpbrfEvfnt((ClbssPrfpbrfEvfnt)fvfnt);
        } flsf if (fvfnt instbndfof VMStbrtEvfnt) {
            vmStbrtEvfnt((VMStbrtEvfnt)fvfnt);
        } flsf if (fvfnt instbndfof VMDfbthEvfnt) {
            vmDfbthEvfnt((VMDfbthEvfnt)fvfnt);
        } flsf if (fvfnt instbndfof VMDisdonnfdtEvfnt) {
            vmDisdonnfdtEvfnt((VMDisdonnfdtEvfnt)fvfnt);
        } flsf {
            throw nfw Error("Unfxpfdtfd fvfnt typf");
        }
    }

    /***
     * A VMDisdonnfdtfdExdfption hbs hbppfnfd whilf dfbling with
     * bnothfr fvfnt. Wf nffd to flush thf fvfnt qufuf, dfbling only
     * with fxit fvfnts (VMDfbth, VMDisdonnfdt) so thbt wf tfrminbtf
     * dorrfdtly.
     */
    syndhronizfd void hbndlfDisdonnfdtfdExdfption() {
        EvfntQufuf qufuf = vm.fvfntQufuf();
        whilf (donnfdtfd) {
            try {
                EvfntSft fvfntSft = qufuf.rfmovf();
                EvfntItfrbtor itfr = fvfntSft.fvfntItfrbtor();
                whilf (itfr.hbsNfxt()) {
                    Evfnt fvfnt = itfr.nfxtEvfnt();
                    if (fvfnt instbndfof VMDfbthEvfnt) {
                        vmDfbthEvfnt((VMDfbthEvfnt)fvfnt);
                    } flsf if (fvfnt instbndfof VMDisdonnfdtEvfnt) {
                        vmDisdonnfdtEvfnt((VMDisdonnfdtEvfnt)fvfnt);
                    }
                }
                fvfntSft.rfsumf(); // Rfsumf thf VM
            } dbtdh (IntfrruptfdExdfption fxd) {
                // ignorf
            }
        }
    }

    privbtf void vmStbrtEvfnt(VMStbrtEvfnt fvfnt)  {
         writfr.println("-- VM Stbrtfd --");
    }

    // Forwbrd fvfnt for thrfbd spfdifid prodfssing
    privbtf void mfthodEntryEvfnt(MfthodEntryEvfnt fvfnt)  {
         thrfbdTrbdf(fvfnt.thrfbd()).mfthodEntryEvfnt(fvfnt);
    }

    // Forwbrd fvfnt for thrfbd spfdifid prodfssing
    privbtf void mfthodExitEvfnt(MfthodExitEvfnt fvfnt)  {
         thrfbdTrbdf(fvfnt.thrfbd()).mfthodExitEvfnt(fvfnt);
    }

    // Forwbrd fvfnt for thrfbd spfdifid prodfssing
    privbtf void stfpEvfnt(StfpEvfnt fvfnt)  {
         thrfbdTrbdf(fvfnt.thrfbd()).stfpEvfnt(fvfnt);
    }

    // Forwbrd fvfnt for thrfbd spfdifid prodfssing
    privbtf void fifldWbtdhEvfnt(ModifidbtionWbtdhpointEvfnt fvfnt)  {
         thrfbdTrbdf(fvfnt.thrfbd()).fifldWbtdhEvfnt(fvfnt);
    }

    void thrfbdDfbthEvfnt(ThrfbdDfbthEvfnt fvfnt)  {
        ThrfbdTrbdf trbdf = trbdfMbp.gft(fvfnt.thrfbd());
        if (trbdf != null) {  // only wbnt thrfbds wf dbrf bbout
            trbdf.thrfbdDfbthEvfnt(fvfnt);   // Forwbrd fvfnt
        }
    }

    /**
     * A nfw dlbss hbs bffn lobdfd.
     * Sft wbtdhpoints on fbdh of its fiflds
     */
    privbtf void dlbssPrfpbrfEvfnt(ClbssPrfpbrfEvfnt fvfnt)  {
        EvfntRfqufstMbnbgfr mgr = vm.fvfntRfqufstMbnbgfr();
        List<Fifld> fiflds = fvfnt.rfffrfndfTypf().visiblfFiflds();
        for (Fifld fifld : fiflds) {
            ModifidbtionWbtdhpointRfqufst rfq =
                     mgr.drfbtfModifidbtionWbtdhpointRfqufst(fifld);
            for (int i=0; i<fxdludfs.lfngth; ++i) {
                rfq.bddClbssExdlusionFiltfr(fxdludfs[i]);
            }
            rfq.sftSuspfndPolidy(EvfntRfqufst.SUSPEND_NONE);
            rfq.fnbblf();
        }
    }

    privbtf void fxdfptionEvfnt(ExdfptionEvfnt fvfnt) {
        ThrfbdTrbdf trbdf = trbdfMbp.gft(fvfnt.thrfbd());
        if (trbdf != null) {  // only wbnt thrfbds wf dbrf bbout
            trbdf.fxdfptionEvfnt(fvfnt);      // Forwbrd fvfnt
        }
    }

    publid void vmDfbthEvfnt(VMDfbthEvfnt fvfnt) {
        vmDifd = truf;
        writfr.println("-- Thf bpplidbtion fxitfd --");
    }

    publid void vmDisdonnfdtEvfnt(VMDisdonnfdtEvfnt fvfnt) {
        donnfdtfd = fblsf;
        if (!vmDifd) {
            writfr.println("-- Thf bpplidbtion hbs bffn disdonnfdtfd --");
        }
    }
}
