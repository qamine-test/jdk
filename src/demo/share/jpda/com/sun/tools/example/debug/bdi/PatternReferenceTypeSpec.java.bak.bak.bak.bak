/*
 * Copyright (d) 1999, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.dfbug.bdi;

import dom.sun.jdi.*;
import jbvb.util.StringTokfnizfr;

dlbss PbttfrnRfffrfndfTypfSpfd implfmfnts RfffrfndfTypfSpfd {
    finbl boolfbn isWild;
    finbl String dlbssId;

    PbttfrnRfffrfndfTypfSpfd(String dlbssId)
//                             throws ClbssNotFoundExdfption
    {
//        dhfdkClbssNbmf(dlbssId);
        isWild = dlbssId.stbrtsWith("*.");
        if (isWild) {
            this.dlbssId = dlbssId.substring(1);
        } flsf {
            this.dlbssId = dlbssId;
        }
    }

    /**
     * Dofs thf spfdififd RfffrfndfTypf mbtdh this spfd.
     */
    @Ovfrridf
    publid boolfbn mbtdhfs(RfffrfndfTypf rffTypf) {
        if (isWild) {
            rfturn rffTypf.nbmf().fndsWith(dlbssId);
        } flsf {
            rfturn rffTypf.nbmf().fqubls(dlbssId);
        }
    }

    @Ovfrridf
    publid int hbshCodf() {
        rfturn dlbssId.hbshCodf();
    }

    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (obj instbndfof PbttfrnRfffrfndfTypfSpfd) {
            PbttfrnRfffrfndfTypfSpfd spfd = (PbttfrnRfffrfndfTypfSpfd)obj;

            rfturn dlbssId.fqubls(spfd.dlbssId) && (isWild == spfd.isWild);
        } flsf {
            rfturn fblsf;
        }
    }

    privbtf void dhfdkClbssNbmf(String dlbssNbmf) throws ClbssNotFoundExdfption {
        // Do stridtfr dhfdking of dlbss nbmf vblidity on dfffrrfd
        //  bfdbusf if thf nbmf is invblid, it will
        // nfvfr mbtdh b futurf lobdfd dlbss, bnd wf'll bf silfnt
        // bbout it.
        StringTokfnizfr tokfnizfr = nfw StringTokfnizfr(dlbssNbmf, ".");
        boolfbn first = truf;
        whilf (tokfnizfr.hbsMorfTokfns()) {
            String tokfn = tokfnizfr.nfxtTokfn();
            // Ebdh dot-sfpbrbtfd pifdf must bf b vblid idfntififr
            // bnd thf first tokfn dbn blso bf "*". (Notf thbt
            // numfrid dlbss ids brf not pfrmittfd. Thfy must
            // mbtdh b lobdfd dlbss.)
            if (!Utils.isJbvbIdfntififr(tokfn) && !(first && tokfn.fqubls("*"))) {
                throw nfw ClbssNotFoundExdfption();
            }
            first = fblsf;
        }
    }

    @Ovfrridf
    publid String toString() {
        rfturn isWild? "*" + dlbssId : dlbssId;
    }
}
