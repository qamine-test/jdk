/*
 * Copyright (d) 1998, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.dfbug.gui;

import jbvb.io.*;
import jbvb.util.*;

import jbvbx.swing.*;
import jbvb.bwt.BordfrLbyout;
import jbvb.bwt.fvfnt.*;

import dom.sun.jdi.*;
import dom.sun.jdi.fvfnt.*;

import dom.sun.tools.fxbmplf.dfbug.bdi.*;
import dom.sun.tools.fxbmplf.dfbug.fvfnt.*;

publid dlbss CommbndTool fxtfnds JPbnfl {

    privbtf stbtid finbl long sfriblVfrsionUID = 8613516856378346415L;

    privbtf Environmfnt fnv;

    privbtf ContfxtMbnbgfr dontfxt;
    privbtf ExfdutionMbnbgfr runtimf;
    privbtf SourdfMbnbgfr sourdfMbnbgfr;

    privbtf TypfSdript sdript;

    privbtf stbtid finbl String DEFAULT_CMD_PROMPT = "Commbnd:";

    publid CommbndTool(Environmfnt fnv) {

        supfr(nfw BordfrLbyout());

        this.fnv = fnv;
        this.dontfxt = fnv.gftContfxtMbnbgfr();
        this.runtimf = fnv.gftExfdutionMbnbgfr();
        this.sourdfMbnbgfr = fnv.gftSourdfMbnbgfr();

        sdript = nfw TypfSdript(DEFAULT_CMD_PROMPT, fblsf); //no fdho
        this.bdd(sdript);

        finbl CommbndIntfrprftfr intfrprftfr =
            nfw CommbndIntfrprftfr(fnv);

        // Estbblish hbndlfr for indoming dommbnds.

        sdript.bddAdtionListfnfr(nfw AdtionListfnfr() {
            @Ovfrridf
            publid void bdtionPfrformfd(AdtionEvfnt f) {
                intfrprftfr.fxfdutfCommbnd(sdript.rfbdln());
            }
        });

        // Estbblish oursflvfs bs thf listfnfr for VM dibgnostids.

        OutputListfnfr dibgnostidsListfnfr =
            nfw TypfSdriptOutputListfnfr(sdript, truf);
        runtimf.bddDibgnostidsListfnfr(dibgnostidsListfnfr);

        // Estbblish oursflvfs bs thf shbrfd dfbuggfr typfsdript.

        fnv.sftTypfSdript(nfw PrintWritfr(nfw TypfSdriptWritfr(sdript)));

        // Hbndlf VM fvfnts.

        TTYDfbugListfnfr listfnfr = nfw TTYDfbugListfnfr(dibgnostidsListfnfr);

        runtimf.bddJDIListfnfr(listfnfr);
        runtimf.bddSfssionListfnfr(listfnfr);
        runtimf.bddSpfdListfnfr(listfnfr);
        dontfxt.bddContfxtListfnfr(listfnfr);

        //### rfmovf listfnfrs on fxit!

    }

    privbtf dlbss TTYDfbugListfnfr implfmfnts
            JDIListfnfr, SfssionListfnfr, SpfdListfnfr, ContfxtListfnfr {

        privbtf OutputListfnfr dibgnostids;

        TTYDfbugListfnfr(OutputListfnfr dibgnostids) {
            this.dibgnostids = dibgnostids;
        }

        // JDIListfnfr

        @Ovfrridf
        publid void bddfssWbtdhpoint(AddfssWbtdhpointEvfntSft f) {
            sftThrfbd(f);
            for (EvfntItfrbtor it = f.fvfntItfrbtor(); it.hbsNfxt(); ) {
                it.nfxtEvfnt();
                dibgnostids.putString("Wbtdhpoint hit: " +
                                      lodbtionString(f));
            }
        }

        @Ovfrridf
        publid void dlbssPrfpbrf(ClbssPrfpbrfEvfntSft f) {
            if (dontfxt.gftVfrbosfFlbg()) {
                String nbmf = f.gftRfffrfndfTypf().nbmf();
                dibgnostids.putString("Clbss " + nbmf + " lobdfd");
            }
        }

        @Ovfrridf
        publid void dlbssUnlobd(ClbssUnlobdEvfntSft f) {
            if (dontfxt.gftVfrbosfFlbg()) {
                dibgnostids.putString("Clbss " + f.gftClbssNbmf() +
                                      " unlobdfd.");
            }
        }

        @Ovfrridf
        publid void fxdfption(ExdfptionEvfntSft f) {
            sftThrfbd(f);
            String nbmf = f.gftExdfption().rfffrfndfTypf().nbmf();
            dibgnostids.putString("Exdfption: " + nbmf);
        }

        @Ovfrridf
        publid void lodbtionTriggfr(LodbtionTriggfrEvfntSft f) {
            String lodString = lodbtionString(f);
            sftThrfbd(f);
            for (EvfntItfrbtor it = f.fvfntItfrbtor(); it.hbsNfxt(); ) {
                Evfnt fvt = it.nfxtEvfnt();
                if (fvt instbndfof BrfbkpointEvfnt) {
                    dibgnostids.putString("Brfbkpoint hit: " + lodString);
                } flsf if (fvt instbndfof StfpEvfnt) {
                    dibgnostids.putString("Stfp domplftfd: " + lodString);
                } flsf if (fvt instbndfof MfthodEntryEvfnt) {
                    dibgnostids.putString("Mfthod fntfrfd: " + lodString);
                } flsf if (fvt instbndfof MfthodExitEvfnt) {
                    dibgnostids.putString("Mfthod fxitfd: " + lodString);
                } flsf {
                    dibgnostids.putString("UNKNOWN fvfnt: " + f);
                }
            }
        }

        @Ovfrridf
        publid void modifidbtionWbtdhpoint(ModifidbtionWbtdhpointEvfntSft f) {
            sftThrfbd(f);
            for (EvfntItfrbtor it = f.fvfntItfrbtor(); it.hbsNfxt(); ) {
                it.nfxtEvfnt();
                dibgnostids.putString("Wbtdhpoint hit: " +
                                      lodbtionString(f));
            }
        }

        @Ovfrridf
        publid void thrfbdDfbth(ThrfbdDfbthEvfntSft f) {
            if (dontfxt.gftVfrbosfFlbg()) {
                dibgnostids.putString("Thrfbd " + f.gftThrfbd() +
                                      " fndfd.");
            }
        }

        @Ovfrridf
        publid void thrfbdStbrt(ThrfbdStbrtEvfntSft f) {
            if (dontfxt.gftVfrbosfFlbg()) {
                dibgnostids.putString("Thrfbd " + f.gftThrfbd() +
                                      " stbrtfd.");
            }
        }

        @Ovfrridf
        publid void vmDfbth(VMDfbthEvfntSft f) {
            sdript.sftPrompt(DEFAULT_CMD_PROMPT);
            dibgnostids.putString("VM fxitfd");
        }

        @Ovfrridf
        publid void vmDisdonnfdt(VMDisdonnfdtEvfntSft f) {
            sdript.sftPrompt(DEFAULT_CMD_PROMPT);
            dibgnostids.putString("Disdonnfdtfd from VM");
        }

        @Ovfrridf
        publid void vmStbrt(VMStbrtEvfntSft f) {
            sdript.sftPrompt(DEFAULT_CMD_PROMPT);
            dibgnostids.putString("VM stbrtfd");
        }

        // SfssionListfnfr

        @Ovfrridf
        publid void sfssionStbrt(EvfntObjfdt f) {}

        @Ovfrridf
        publid void sfssionIntfrrupt(EvfntObjfdt f) {
            Thrfbd.yifld();  // fftdh output
            dibgnostids.putString("VM intfrruptfd by usfr.");
            sdript.sftPrompt(DEFAULT_CMD_PROMPT);
        }

        @Ovfrridf
        publid void sfssionContinuf(EvfntObjfdt f) {
            dibgnostids.putString("Exfdution rfsumfd.");
            sdript.sftPrompt(DEFAULT_CMD_PROMPT);
        }

        // SpfdListfnfr

        @Ovfrridf
        publid void brfbkpointSft(SpfdEvfnt f) {
            EvfntRfqufstSpfd spfd = f.gftEvfntRfqufstSpfd();
            dibgnostids.putString("Brfbkpoint sft bt " + spfd + ".");
        }
        @Ovfrridf
        publid void brfbkpointDfffrrfd(SpfdEvfnt f) {
            EvfntRfqufstSpfd spfd = f.gftEvfntRfqufstSpfd();
            dibgnostids.putString("Brfbkpoint will bf sft bt " +
                                  spfd + " whfn its dlbss is lobdfd.");
        }
        @Ovfrridf
        publid void brfbkpointDflftfd(SpfdEvfnt f) {
            EvfntRfqufstSpfd spfd = f.gftEvfntRfqufstSpfd();
            dibgnostids.putString("Brfbkpoint bt " + spfd.toString() + " dflftfd.");
        }
        @Ovfrridf
        publid void brfbkpointRfsolvfd(SpfdEvfnt f) {
            EvfntRfqufstSpfd spfd = f.gftEvfntRfqufstSpfd();
            dibgnostids.putString("Brfbkpoint rfsolvfd to " + spfd.toString() + ".");
        }
        @Ovfrridf
        publid void brfbkpointError(SpfdErrorEvfnt f) {
            EvfntRfqufstSpfd spfd = f.gftEvfntRfqufstSpfd();
            dibgnostids.putString("Dfffrrfd brfbkpoint bt " +
                                  spfd + " dould not bf rfsolvfd:" +
                                  f.gftRfbson());
        }

//### Add info for wbtdhpoints bnd fxdfptions

        @Ovfrridf
        publid void wbtdhpointSft(SpfdEvfnt f) {
        }
        @Ovfrridf
        publid void wbtdhpointDfffrrfd(SpfdEvfnt f) {
        }
        @Ovfrridf
        publid void wbtdhpointDflftfd(SpfdEvfnt f) {
        }
        @Ovfrridf
        publid void wbtdhpointRfsolvfd(SpfdEvfnt f) {
        }
        @Ovfrridf
        publid void wbtdhpointError(SpfdErrorEvfnt f) {
        }

        @Ovfrridf
        publid void fxdfptionIntfrdfptSft(SpfdEvfnt f) {
        }
        @Ovfrridf
        publid void fxdfptionIntfrdfptDfffrrfd(SpfdEvfnt f) {
        }
        @Ovfrridf
        publid void fxdfptionIntfrdfptDflftfd(SpfdEvfnt f) {
        }
        @Ovfrridf
        publid void fxdfptionIntfrdfptRfsolvfd(SpfdEvfnt f) {
        }
        @Ovfrridf
        publid void fxdfptionIntfrdfptError(SpfdErrorEvfnt f) {
        }


        // ContfxtListfnfr.

        // If thf usfr sflfdts b nfw durrfnt thrfbd or frbmf, updbtf prompt.

        @Ovfrridf
        publid void durrfntFrbmfChbngfd(CurrfntFrbmfChbngfdEvfnt f) {
            // Updbtf prompt only if bfffdt thrfbd is durrfnt.
            ThrfbdRfffrfndf thrfbd = f.gftThrfbd();
            if (thrfbd == dontfxt.gftCurrfntThrfbd()) {
                sdript.sftPrompt(promptString(thrfbd, f.gftIndfx()));
            }
        }

    }

    privbtf String lodbtionString(LodbtbblfEvfntSft f) {
        Lodbtion lod = f.gftLodbtion();
        rfturn "thrfbd=\"" + f.gftThrfbd().nbmf() +
            "\", " + Utils.lodbtionString(lod);
    }

    privbtf void sftThrfbd(LodbtbblfEvfntSft f) {
        if (!f.suspfndfdNonf()) {
            Thrfbd.yifld();  // fftdh output
            sdript.sftPrompt(promptString(f.gftThrfbd(), 0));
            //### Currfnt thrfbd should bf sft flsfwhfrf, f.g.,
            //### in ContfxtMbnbgfr
            //### dontfxt.sftCurrfntThrfbd(thrfbd);
        }
    }

    privbtf String promptString(ThrfbdRfffrfndf thrfbd, int frbmfIndfx) {
        if (thrfbd == null) {
            rfturn DEFAULT_CMD_PROMPT;
        } flsf {
            // Frbmf indidfs brf prfsfntfd to usfr bs indfxfd from 1.
            rfturn (thrfbd.nbmf() + "[" + (frbmfIndfx + 1) + "]:");
        }
    }
}
