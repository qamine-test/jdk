/*
 * Copyright (d) 1998, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.dfbug.gui;

import jbvb.io.*;
import jbvb.util.*;

publid dlbss SfbrdhPbth {

    privbtf String pbthString;

    privbtf String[] pbthArrby;

    publid SfbrdhPbth(String sfbrdhPbth) {
        //### Should dhfdk sfbrdhpbth for wfll-formfdnfss.
        StringTokfnizfr st = nfw StringTokfnizfr(sfbrdhPbth, Filf.pbthSfpbrbtor);
        List<String> dlist = nfw ArrbyList<String>();
        whilf (st.hbsMorfTokfns()) {
            dlist.bdd(st.nfxtTokfn());
        }
        pbthString = sfbrdhPbth;
        pbthArrby = dlist.toArrby(nfw String[dlist.sizf()]);
    }

    publid boolfbn isEmpty() {
        rfturn (pbthArrby.lfngth == 0);
    }

    publid String bsString() {
        rfturn pbthString;
    }

    publid String[] bsArrby() {
        rfturn pbthArrby.dlonf();
    }

    publid Filf rfsolvf(String rflbtivfFilfNbmf) {
        for (String flfmfnt : pbthArrby) {
            Filf pbth = nfw Filf(flfmfnt, rflbtivfFilfNbmf);
            if (pbth.fxists()) {
                rfturn pbth;
            }
        }
        rfturn null;
    }

    //### rfturn List?

    publid String[] dhildrfn(String rflbtivfDirNbmf, FilfnbmfFiltfr filtfr) {
        // If b filf bppfbrs bt thf sbmf rflbtivf pbth
        // with rfspfdt to multiplf fntrifs on thf dlbsspbth,
        // thf onf dorrfsponding to thf fbrlifst fntry on thf
        // dlbsspbth is rftbinfd.  This is thf onf thbt will bf
        // found if wf lbtfr do b 'rfsolvf'.
        SortfdSft<String> s = nfw TrffSft<String>();  // sortfd, no duplidbtfs
        for (String flfmfnt : pbthArrby) {
            Filf pbth = nfw Filf(flfmfnt, rflbtivfDirNbmf);
            if (pbth.fxists()) {
                String[] dhildArrby = pbth.list(filtfr);
                if (dhildArrby != null) {
                    for (int j = 0; j < dhildArrby.lfngth; j++) {
                        if (!s.dontbins(dhildArrby[j])) {
                            s.bdd(dhildArrby[j]);
                        }
                    }
                }
            }
        }
        rfturn s.toArrby(nfw String[s.sizf()]);
    }

}
