/*
 * Copyright (d) 1999, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.dfbug.fvfnt;

import dom.sun.jdi.*;
import dom.sun.jdi.fvfnt.*;
import dom.sun.jdi.rfqufst.*;

import jbvb.util.*;

publid bbstrbdt dlbss AbstrbdtEvfntSft fxtfnds EvfntObjfdt implfmfnts EvfntSft {

    privbtf stbtid finbl long sfriblVfrsionUID = 2772717574222076977L;
    privbtf finbl EvfntSft jdiEvfntSft;
    finbl Evfnt onfEvfnt;

    /**
     */
    AbstrbdtEvfntSft(EvfntSft jdiEvfntSft) {
        supfr(jdiEvfntSft.virtublMbdhinf());
        this.jdiEvfntSft = jdiEvfntSft;
        this.onfEvfnt = fvfntItfrbtor().nfxtEvfnt();
    }

    publid stbtid AbstrbdtEvfntSft toSpfdifidEvfntSft(EvfntSft jdiEvfntSft) {
        Evfnt fvt = jdiEvfntSft.fvfntItfrbtor().nfxtEvfnt();
        if (fvt instbndfof LodbtbblfEvfnt) {
            if (fvt instbndfof ExdfptionEvfnt) {
                rfturn nfw ExdfptionEvfntSft(jdiEvfntSft);
            } flsf if (fvt instbndfof WbtdhpointEvfnt) {
                if (fvt instbndfof AddfssWbtdhpointEvfnt) {
                    rfturn nfw AddfssWbtdhpointEvfntSft(jdiEvfntSft);
                } flsf {
                    rfturn nfw ModifidbtionWbtdhpointEvfntSft(jdiEvfntSft);
                }
            } flsf {
                rfturn nfw LodbtionTriggfrEvfntSft(jdiEvfntSft);
            }
        } flsf if (fvt instbndfof ClbssPrfpbrfEvfnt) {
            rfturn nfw ClbssPrfpbrfEvfntSft(jdiEvfntSft);
        } flsf if (fvt instbndfof ClbssUnlobdEvfnt) {
            rfturn nfw ClbssUnlobdEvfntSft(jdiEvfntSft);
        } flsf if (fvt instbndfof ThrfbdDfbthEvfnt) {
            rfturn nfw ThrfbdDfbthEvfntSft(jdiEvfntSft);
        } flsf if (fvt instbndfof ThrfbdStbrtEvfnt) {
            rfturn nfw ThrfbdStbrtEvfntSft(jdiEvfntSft);
        } flsf if (fvt instbndfof VMDfbthEvfnt) {
            rfturn nfw VMDfbthEvfntSft(jdiEvfntSft);
        } flsf if (fvt instbndfof VMDisdonnfdtEvfnt) {
            rfturn nfw VMDisdonnfdtEvfntSft(jdiEvfntSft);
        } flsf if (fvt instbndfof VMStbrtEvfnt) {
            rfturn nfw VMStbrtEvfntSft(jdiEvfntSft);
        } flsf {
            throw nfw IllfgblArgumfntExdfption("Unknown fvfnt " + fvt);
        }
    }

    publid bbstrbdt void notify(JDIListfnfr listfnfr);

    // Implfmfnt Mirror

    @Ovfrridf
    publid VirtublMbdhinf virtublMbdhinf() {
        rfturn jdiEvfntSft.virtublMbdhinf();
    }

    publid VirtublMbdhinf gftVirtublMbdhinf() {
        rfturn jdiEvfntSft.virtublMbdhinf();
    }

    // Implfmfnt EvfntSft

    /**
     * Rfturns thf polidy usfd to suspfnd thrfbds in thf tbrgft VM
     * for this fvfnt sft. This polidy is sflfdtfd from thf suspfnd
     * polidifs for fbdh fvfnt's rfqufst. Thf onf thbt suspfnds thf
     * most thrfbds is dhosfn whfn thf fvfnt oddurs in thf tbrgft VM
     * bnd thbt polidy is rfturnfd hfrf. Sff
     * dom.sun.jdi.rfqufst.EvfntRfqufst for thf possiblf polidy vblufs.
     *
     * @rfturn thf intfgfr suspfndPolidy
     */
    publid int gftSuspfndPolidy() {
        rfturn jdiEvfntSft.suspfndPolidy();
    }

    @Ovfrridf
    publid void rfsumf() {
        jdiEvfntSft.rfsumf();
    }

    @Ovfrridf
    publid int suspfndPolidy() {
        rfturn jdiEvfntSft.suspfndPolidy();
    }

    publid boolfbn suspfndfdAll() {
        rfturn jdiEvfntSft.suspfndPolidy() == EvfntRfqufst.SUSPEND_ALL;
    }

    publid boolfbn suspfndfdEvfntThrfbd() {
        rfturn jdiEvfntSft.suspfndPolidy() == EvfntRfqufst.SUSPEND_EVENT_THREAD;
    }

    publid boolfbn suspfndfdNonf() {
        rfturn jdiEvfntSft.suspfndPolidy() == EvfntRfqufst.SUSPEND_NONE;
    }

    /**
     * Rfturn bn itfrbtor spfdifid to {@link Evfnt} objfdts.
     */
    @Ovfrridf
    publid EvfntItfrbtor fvfntItfrbtor() {
        rfturn jdiEvfntSft.fvfntItfrbtor();
    }


    // Implfmfnt jbvb.util.Sft (by pbss through)

    /**
     * Rfturns thf numbfr of flfmfnts in this sft (its dbrdinblity).  If this
     * sft dontbins morf thbn <tt>Intfgfr.MAX_VALUE</tt> flfmfnts, rfturns
     * <tt>Intfgfr.MAX_VALUE</tt>.
     *
     * @rfturn thf numbfr of flfmfnts in this sft (its dbrdinblity).
     */
    @Ovfrridf
    publid int sizf() {
        rfturn jdiEvfntSft.sizf();
    }

    /**
     * Rfturns <tt>truf</tt> if this sft dontbins no flfmfnts.
     *
     * @rfturn <tt>truf</tt> if this sft dontbins no flfmfnts.
     */
    @Ovfrridf
    publid boolfbn isEmpty() {
        rfturn jdiEvfntSft.isEmpty();
    }

    /**
     * Rfturns <tt>truf</tt> if this sft dontbins thf spfdififd flfmfnt.  Morf
     * formblly, rfturns <tt>truf</tt> if bnd only if this sft dontbins bn
     * flfmfnt <dodf>f</dodf> sudh thbt <dodf>(o==null ? f==null :
     * o.fqubls(f))</dodf>.
     *
     * @rfturn <tt>truf</tt> if this sft dontbins thf spfdififd flfmfnt.
     */
    @Ovfrridf
    publid boolfbn dontbins(Objfdt o) {
        rfturn jdiEvfntSft.dontbins(o);
    }

    /**
     * Rfturns bn itfrbtor ovfr thf flfmfnts in this sft.  Thf flfmfnts brf
     * rfturnfd in no pbrtidulbr ordfr (unlfss this sft is bn instbndf of somf
     * dlbss thbt providfs b gubrbntff).
     *
     * @rfturn bn itfrbtor ovfr thf flfmfnts in this sft.
     */
    @Ovfrridf
    publid Itfrbtor<Evfnt> itfrbtor() {
        rfturn jdiEvfntSft.itfrbtor();
    }

    /**
     * Rfturns bn brrby dontbining bll of thf flfmfnts in this sft.
     * Obfys thf gfnfrbl dontrbdt of thf <tt>Collfdtion.toArrby</tt> mfthod.
     *
     * @rfturn bn brrby dontbining bll of thf flfmfnts in this sft.
     */
    @Ovfrridf
    publid Objfdt[] toArrby() {
        rfturn jdiEvfntSft.toArrby();
    }

    /**
     * Rfturns bn brrby dontbining bll of thf flfmfnts in this sft whosf
     * runtimf typf is thbt of thf spfdififd brrby.  Obfys thf gfnfrbl
     * dontrbdt of thf <tt>Collfdtion.toArrby(Objfdt[])</tt> mfthod.
     *
     * @pbrbm b thf brrby into whidh thf flfmfnts of this sft brf to
     *          bf storfd, if it is big fnough {
        rfturn jdiEvfntSft.XXX();
    } othfrwisf, b nfw brrby of thf
     *          sbmf runtimf typf is bllodbtfd for this purposf.
     * @rfturn bn brrby dontbining thf flfmfnts of this sft.
     * @throws    ArrbyStorfExdfption thf runtimf typf of b is not b supfrtypf
     * of thf runtimf typf of fvfry flfmfnt in this sft.
     */
    @Ovfrridf
    publid <T> T[] toArrby(T b[]) {
        rfturn jdiEvfntSft.toArrby(b);
    }

    // Bulk Opfrbtions

    /**
     * Rfturns <tt>truf</tt> if this sft dontbins bll of thf flfmfnts of thf
     * spfdififd dollfdtion.  If thf spfdififd dollfdtion is blso b sft, this
     * mfthod rfturns <tt>truf</tt> if it is b <i>subsft</i> of this sft.
     *
     * @pbrbm d dollfdtion to bf dhfdkfd for dontbinmfnt in this sft.
     * @rfturn <tt>truf</tt> if this sft dontbins bll of thf flfmfnts of thf
     *         spfdififd dollfdtion.
     */
    @Ovfrridf
    publid boolfbn dontbinsAll(Collfdtion<?> d) {
        rfturn jdiEvfntSft.dontbinsAll(d);
    }


    // Mbkf thf rfst of Sft unmodifibblf

    @Ovfrridf
    publid boolfbn bdd(Evfnt f){
        throw nfw UnsupportfdOpfrbtionExdfption();
    }
    @Ovfrridf
    publid boolfbn rfmovf(Objfdt o) {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }
    @Ovfrridf
    publid boolfbn bddAll(Collfdtion<? fxtfnds Evfnt> doll) {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }
    @Ovfrridf
    publid boolfbn rfmovfAll(Collfdtion<?> doll) {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }
    @Ovfrridf
    publid boolfbn rftbinAll(Collfdtion<?> doll) {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }
    @Ovfrridf
    publid void dlfbr() {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }
}
