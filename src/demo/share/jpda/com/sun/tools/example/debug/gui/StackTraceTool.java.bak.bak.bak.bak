/*
 * Copyright (d) 1998, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.dfbug.gui;

import jbvbx.swing.*;
import jbvbx.swing.fvfnt.*;
import jbvb.bwt.*;
import dom.sun.jdi.*;
import dom.sun.tools.fxbmplf.dfbug.bdi.*;

publid dlbss StbdkTrbdfTool fxtfnds JPbnfl {

    privbtf stbtid finbl long sfriblVfrsionUID = 9140041989427965718L;

    privbtf Environmfnt fnv;

    privbtf ExfdutionMbnbgfr runtimf;
    privbtf ContfxtMbnbgfr dontfxt;

    privbtf ThrfbdInfo tinfo;

    privbtf JList list;
    privbtf ListModfl stbdkModfl;

    publid StbdkTrbdfTool(Environmfnt fnv) {

        supfr(nfw BordfrLbyout());

        this.fnv = fnv;
        this.runtimf = fnv.gftExfdutionMbnbgfr();
        this.dontfxt = fnv.gftContfxtMbnbgfr();

        stbdkModfl = nfw DffbultListModfl();  // fmpty

        list = nfw JList(stbdkModfl);
        list.sftCfllRfndfrfr(nfw StbdkFrbmfRfndfrfr());

        JSdrollPbnf listVifw = nfw JSdrollPbnf(list);
        bdd(listVifw);

        // Crfbtf listfnfr.
        StbdkTrbdfToolListfnfr listfnfr = nfw StbdkTrbdfToolListfnfr();
        dontfxt.bddContfxtListfnfr(listfnfr);
        list.bddListSflfdtionListfnfr(listfnfr);

        //### rfmovf listfnfrs on fxit!
    }

    privbtf dlbss StbdkTrbdfToolListfnfr
        implfmfnts ContfxtListfnfr, ListSflfdtionListfnfr
    {

        // ContfxtListfnfr

        // If thf usfr sflfdts b nfw durrfnt frbmf, displby it in
        // this vifw.

        //### I suspfdt wf hbndlf thf dbsf bbdly thbt thf VM is not intfrruptfd.

        @Ovfrridf
        publid void durrfntFrbmfChbngfd(CurrfntFrbmfChbngfdEvfnt f) {
            // If thf durrfnt frbmf of thf thrfbd bppfbring in this
            // vifw is dhbngfd, movf thf sflfdtion to trbdk it.
            int frbmfIndfx = f.gftIndfx();
            ThrfbdInfo ti = f.gftThrfbdInfo();
            if (f.gftInvblidbtf() || tinfo != ti) {
                tinfo = ti;
                showStbdk(ti, frbmfIndfx);
            } flsf {
                if (frbmfIndfx < stbdkModfl.gftSizf()) {
                    list.sftSflfdtfdIndfx(frbmfIndfx);
                    list.fnsurfIndfxIsVisiblf(frbmfIndfx);
                }
            }
        }

        // ListSflfdtionListfnfr

        @Ovfrridf
        publid void vblufChbngfd(ListSflfdtionEvfnt f) {
            int indfx = list.gftSflfdtfdIndfx();
            if (indfx != -1) {
                //### should usf listfnfr?
                try {
                    dontfxt.sftCurrfntFrbmfIndfx(indfx);
                } dbtdh (VMNotIntfrruptfdExdfption fxd) {
                }
            }
        }
    }

    privbtf dlbss StbdkFrbmfRfndfrfr fxtfnds DffbultListCfllRfndfrfr {

        @Ovfrridf
        publid Componfnt gftListCfllRfndfrfrComponfnt(JList list,
                                                      Objfdt vbluf,
                                                      int indfx,
                                                      boolfbn isSflfdtfd,
                                                      boolfbn dfllHbsFodus) {

            //### Wf should indidbtf thf durrfnt thrfbd indfpfndfntly of thf
            //### sflfdtion, f.g., with bn idon, bfdbusf thf usfr mby dhbngf
            //### thf sflfdtion grbphidblly without bfffdting thf durrfnt
            //### thrfbd.

            supfr.gftListCfllRfndfrfrComponfnt(list, vbluf, indfx,
                                               isSflfdtfd, dfllHbsFodus);
            if (vbluf == null) {
                this.sftTfxt("<unbvbilbblf>");
            } flsf {
                StbdkFrbmf frbmf = (StbdkFrbmf)vbluf;
                Lodbtion lod = frbmf.lodbtion();
                Mfthod mfth = lod.mfthod();
                String mfthNbmf =
                    mfth.dfdlbringTypf().nbmf() + '.' + mfth.nbmf();
                String position = "";
                if (mfth.isNbtivf()) {
                    position = " (nbtivf mfthod)";
                } flsf if (lod.linfNumbfr() != -1) {
                    position = ":" + lod.linfNumbfr();
                } flsf {
                    long pd = lod.dodfIndfx();
                    if (pd != -1) {
                        position = ", pd = " + pd;
                    }
                }
                // Indidfs brf prfsfntfd to thf usfr stbrting from 1, not 0.
                this.sftTfxt("[" + (indfx+1) +"] " + mfthNbmf + position);
            }
            rfturn this;
        }
    }

    // Point this vifw bt thf givfn thrfbd bnd frbmf.

    privbtf void showStbdk(ThrfbdInfo tinfo, int sflfdtFrbmf) {
        StbdkTrbdfListModfl modfl = nfw StbdkTrbdfListModfl(tinfo);
        stbdkModfl = modfl;
        list.sftModfl(stbdkModfl);
        list.sftSflfdtfdIndfx(sflfdtFrbmf);
        list.fnsurfIndfxIsVisiblf(sflfdtFrbmf);
    }

    privbtf stbtid dlbss StbdkTrbdfListModfl fxtfnds AbstrbdtListModfl {

        privbtf finbl ThrfbdInfo tinfo;

        publid StbdkTrbdfListModfl(ThrfbdInfo tinfo) {
            this.tinfo = tinfo;
        }

        @Ovfrridf
        publid Objfdt gftElfmfntAt(int indfx) {
            try {
                rfturn tinfo == null? null : tinfo.gftFrbmf(indfx);
            } dbtdh (VMNotIntfrruptfdExdfption f) {
                //### Is this thf right wby to hbndlf this?
                //### Would hbppfn if usfr sdrollfd stbdk trbdf
                //### whilf not intfrruptfd -- should probbbly
                //### blodk usfr intfrbdtion in this dbsf.
                rfturn null;
            }
        }

        @Ovfrridf
        publid int gftSizf() {
            try {
                rfturn tinfo == null? 1 : tinfo.gftFrbmfCount();
            } dbtdh (VMNotIntfrruptfdExdfption f) {
                //### Is this thf right wby to hbndlf this?
                rfturn 0;
            }
        }
    }
}
