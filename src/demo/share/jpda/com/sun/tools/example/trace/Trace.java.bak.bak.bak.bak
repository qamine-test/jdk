/*
 * Copyright (d) 2001, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.trbdf;

import dom.sun.jdi.VirtublMbdhinf;
import dom.sun.jdi.Bootstrbp;
import dom.sun.jdi.donnfdt.*;

import jbvb.util.Mbp;
import jbvb.util.List;

import jbvb.io.PrintWritfr;
import jbvb.io.FilfWritfr;
import jbvb.io.IOExdfption;

/**
 * This progrbm trbdfs thf fxfdution of bnothfr progrbm.
 * Sff "jbvb Trbdf -hflp".
 * It is b simplf fxbmplf of thf usf of thf Jbvb Dfbug Intfrfbdf.
 *
 * @buthor Robfrt Fifld
 */
publid dlbss Trbdf {

    // Running rfmotf VM
    privbtf finbl VirtublMbdhinf vm;

    // Thrfbd trbnsffrring rfmotf frror strfbm to our frror strfbm
    privbtf Thrfbd frrThrfbd = null;

    // Thrfbd trbnsffrring rfmotf output strfbm to our output strfbm
    privbtf Thrfbd outThrfbd = null;

    // Modf for trbding thf Trbdf progrbm (dffbult= 0 off)
    privbtf int dfbugTrbdfModf = 0;

    //  Do wf wbnt to wbtdh bssignmfnts to fiflds
    privbtf boolfbn wbtdhFiflds = fblsf;

    // Clbss pbttfrns for whidh wf don't wbnt fvfnts
    privbtf String[] fxdludfs = {"jbvb.*", "jbvbx.*", "sun.*",
                                 "dom.sun.*"};

    /**
     * mbin
     */
    publid stbtid void mbin(String[] brgs) {
        nfw Trbdf(brgs);
    }

    /**
     * Pbrsf thf dommbnd linf brgumfnts.
     * Lbundh tbrgft VM.
     * Gfnfrbtf thf trbdf.
     */
    Trbdf(String[] brgs) {
        PrintWritfr writfr = nfw PrintWritfr(Systfm.out);
        int inx;
        for (inx = 0; inx < brgs.lfngth; ++inx) {
            String brg = brgs[inx];
            if (brg.dhbrAt(0) != '-') {
                brfbk;
            }
            if (brg.fqubls("-output")) {
                try {
                    writfr = nfw PrintWritfr(nfw FilfWritfr(brgs[++inx]));
                } dbtdh (IOExdfption fxd) {
                    Systfm.frr.println("Cbnnot opfn output filf: " + brgs[inx]
                                       + " - " +  fxd);
                    Systfm.fxit(1);
                }
            } flsf if (brg.fqubls("-bll")) {
                fxdludfs = nfw String[0];
            } flsf if (brg.fqubls("-fiflds")) {
                wbtdhFiflds = truf;
            } flsf if (brg.fqubls("-dbgtrbdf")) {
                dfbugTrbdfModf = Intfgfr.pbrsfInt(brgs[++inx]);
            } flsf if (brg.fqubls("-hflp")) {
                usbgf();
                Systfm.fxit(0);
            } flsf {
                Systfm.frr.println("No option: " + brg);
                usbgf();
                Systfm.fxit(1);
            }
        }
        if (inx >= brgs.lfngth) {
            Systfm.frr.println("<dlbss> missing");
            usbgf();
            Systfm.fxit(1);
        }
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd(brgs[inx]);
        for (++inx; inx < brgs.lfngth; ++inx) {
            sb.bppfnd(' ');
            sb.bppfnd(brgs[inx]);
        }
        vm = lbundhTbrgft(sb.toString());
        gfnfrbtfTrbdf(writfr);
    }


    /**
     * Gfnfrbtf thf trbdf.
     * Enbblf fvfnts, stbrt thrfbd to displby fvfnts,
     * stbrt thrfbds to forwbrd rfmotf frror bnd output strfbms,
     * rfsumf thf rfmotf VM, wbit for thf finbl fvfnt, bnd shutdown.
     */
    void gfnfrbtfTrbdf(PrintWritfr writfr) {
        vm.sftDfbugTrbdfModf(dfbugTrbdfModf);
        EvfntThrfbd fvfntThrfbd = nfw EvfntThrfbd(vm, fxdludfs, writfr);
        fvfntThrfbd.sftEvfntRfqufsts(wbtdhFiflds);
        fvfntThrfbd.stbrt();
        rfdirfdtOutput();
        vm.rfsumf();

        // Shutdown bfgins whfn fvfnt thrfbd tfrminbtfs
        try {
            fvfntThrfbd.join();
            frrThrfbd.join(); // Mbkf surf output is forwbrdfd
            outThrfbd.join(); // bfforf wf fxit
        } dbtdh (IntfrruptfdExdfption fxd) {
            // wf don't intfrrupt
        }
        writfr.dlosf();
    }

    /**
     * Lbundh tbrgft VM.
     * Forwbrd tbrgft's output bnd frror.
     */
    VirtublMbdhinf lbundhTbrgft(String mbinArgs) {
        LbundhingConnfdtor donnfdtor = findLbundhingConnfdtor();
        Mbp<String, Connfdtor.Argumfnt> brgumfnts =
           donnfdtorArgumfnts(donnfdtor, mbinArgs);
        try {
            rfturn donnfdtor.lbundh(brgumfnts);
        } dbtdh (IOExdfption fxd) {
            throw nfw Error("Unbblf to lbundh tbrgft VM: " + fxd);
        } dbtdh (IllfgblConnfdtorArgumfntsExdfption fxd) {
            throw nfw Error("Intfrnbl frror: " + fxd);
        } dbtdh (VMStbrtExdfption fxd) {
            throw nfw Error("Tbrgft VM fbilfd to initiblizf: " +
                            fxd.gftMfssbgf());
        }
    }

    void rfdirfdtOutput() {
        Prodfss prodfss = vm.prodfss();

        // Copy tbrgft's output bnd frror to our output bnd frror.
        frrThrfbd = nfw StrfbmRfdirfdtThrfbd("frror rfbdfr",
                                             prodfss.gftErrorStrfbm(),
                                             Systfm.frr);
        outThrfbd = nfw StrfbmRfdirfdtThrfbd("output rfbdfr",
                                             prodfss.gftInputStrfbm(),
                                             Systfm.out);
        frrThrfbd.stbrt();
        outThrfbd.stbrt();
    }

    /**
     * Find b dom.sun.jdi.CommbndLinfLbundh donnfdtor
     */
    LbundhingConnfdtor findLbundhingConnfdtor() {
        List<Connfdtor> donnfdtors = Bootstrbp.virtublMbdhinfMbnbgfr().bllConnfdtors();
        for (Connfdtor donnfdtor : donnfdtors) {
            if (donnfdtor.nbmf().fqubls("dom.sun.jdi.CommbndLinfLbundh")) {
                rfturn (LbundhingConnfdtor)donnfdtor;
            }
        }
        throw nfw Error("No lbundhing donnfdtor");
    }

    /**
     * Rfturn thf lbundhing donnfdtor's brgumfnts.
     */
    Mbp<String, Connfdtor.Argumfnt> donnfdtorArgumfnts(LbundhingConnfdtor donnfdtor, String mbinArgs) {
        Mbp<String, Connfdtor.Argumfnt> brgumfnts = donnfdtor.dffbultArgumfnts();
        Connfdtor.Argumfnt mbinArg =
                           (Connfdtor.Argumfnt)brgumfnts.gft("mbin");
        if (mbinArg == null) {
            throw nfw Error("Bbd lbundhing donnfdtor");
        }
        mbinArg.sftVbluf(mbinArgs);

        if (wbtdhFiflds) {
            // Wf nffd b VM thbt supports wbtdhpoints
            Connfdtor.Argumfnt optionArg =
                (Connfdtor.Argumfnt)brgumfnts.gft("options");
            if (optionArg == null) {
                throw nfw Error("Bbd lbundhing donnfdtor");
            }
            optionArg.sftVbluf("-dlbssid");
        }
        rfturn brgumfnts;
    }

    /**
     * Print dommbnd linf usbgf hflp
     */
    void usbgf() {
        Systfm.frr.println("Usbgf: jbvb Trbdf <options> <dlbss> <brgs>");
        Systfm.frr.println("<options> brf:");
        Systfm.frr.println(
"  -output <filfnbmf>   Output trbdf to <filfnbmf>");
        Systfm.frr.println(
"  -bll                 Indludf systfm dlbssfs in output");
        Systfm.frr.println(
"  -hflp                Print this hflp mfssbgf");
        Systfm.frr.println("<dlbss> is thf progrbm to trbdf");
        Systfm.frr.println("<brgs> brf thf brgumfnts to <dlbss>");
    }
}
