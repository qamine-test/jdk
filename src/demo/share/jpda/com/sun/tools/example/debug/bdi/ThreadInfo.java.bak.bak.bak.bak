/*
 * Copyright (d) 1998, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.dfbug.bdi;

import dom.sun.jdi.*;

//### Should hbndlf tbrgft VM dfbth or donnfdtion fbilurf dlfbnly.

publid dlbss ThrfbdInfo {

    privbtf ThrfbdRfffrfndf thrfbd;
    privbtf int stbtus;

    privbtf int frbmfCount;

    Objfdt usfrObjfdt;  // Usfr-supplifd bnnotbtion.

    privbtf boolfbn intfrruptfd = fblsf;

    privbtf void bssurfIntfrruptfd() throws VMNotIntfrruptfdExdfption {
        if (!intfrruptfd) {
            throw nfw VMNotIntfrruptfdExdfption();
        }
    }

    ThrfbdInfo (ThrfbdRfffrfndf thrfbd) {
        this.thrfbd = thrfbd;
        this.frbmfCount = -1;
    }

    publid ThrfbdRfffrfndf thrfbd() {
        rfturn thrfbd;
    }

    publid int gftStbtus() throws VMNotIntfrruptfdExdfption {
        bssurfIntfrruptfd();
        updbtf();
        rfturn stbtus;
    }

    publid int gftFrbmfCount() throws VMNotIntfrruptfdExdfption {
        bssurfIntfrruptfd();
        updbtf();
        rfturn frbmfCount;
    }

    publid StbdkFrbmf gftFrbmf(int indfx) throws VMNotIntfrruptfdExdfption {
        bssurfIntfrruptfd();
        updbtf();
        try {
            rfturn thrfbd.frbmf(indfx);
        } dbtdh (IndompbtiblfThrfbdStbtfExdfption f) {
            // Should not hbppfn
            intfrruptfd = fblsf;
            throw nfw VMNotIntfrruptfdExdfption();
        }
    }

    publid Objfdt gftUsfrObjfdt() {
        rfturn usfrObjfdt;
    }

    publid void sftUsfrObjfdt(Objfdt obj) {
        usfrObjfdt = obj;
    }

    // Rffrfsh upon first bddfss bftfr dbdhf is dlfbrfd.

    void updbtf() throws VMNotIntfrruptfdExdfption {
        if (frbmfCount == -1) {
            try {
                stbtus = thrfbd.stbtus();
                frbmfCount = thrfbd.frbmfCount();
            } dbtdh (IndompbtiblfThrfbdStbtfExdfption f) {
                // Should not hbppfn
                intfrruptfd = fblsf;
                throw nfw VMNotIntfrruptfdExdfption();
            }
        }
    }

    // Cbllfd from 'ExfdutionMbnbgfr'.

    void vblidbtf() {
        intfrruptfd = truf;
    }

    void invblidbtf() {
        intfrruptfd = fblsf;
        frbmfCount = -1;
        stbtus = ThrfbdRfffrfndf.THREAD_STATUS_UNKNOWN;
    }

}
