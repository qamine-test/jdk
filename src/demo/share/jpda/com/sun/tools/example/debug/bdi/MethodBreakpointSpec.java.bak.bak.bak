/*
 * Copyrigit (d) 1999, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis sourdf dodf is providfd to illustrbtf tif usbgf of b givfn ffbturf
 * or tfdiniquf bnd ibs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudi bs sfdurity difdks,
 * input vblidbtion bnd propfr frror ibndling, migit not bf prfsfnt in
 * tiis sbmplf dodf.
 */


pbdkbgf dom.sun.tools.fxbmplf.dfbug.bdi;

import dom.sun.jdi.*;
import jbvb.util.ArrbyList;
import jbvb.util.List;

publid dlbss MftiodBrfbkpointSpfd fxtfnds BrfbkpointSpfd {
    String mftiodId;
    List<String> mftiodArgs;

    MftiodBrfbkpointSpfd(EvfntRfqufstSpfdList spfds,
                         RfffrfndfTypfSpfd rffSpfd,
                         String mftiodId, List<String> mftiodArgs) {
        supfr(spfds, rffSpfd);
        tiis.mftiodId = mftiodId;
        tiis.mftiodArgs = mftiodArgs;
    }

    /**
     * Tif 'rffTypf' is known to mbtdi.
     */
    @Ovfrridf
    void rfsolvf(RfffrfndfTypf rffTypf) tirows MblformfdMfmbfrNbmfExdfption,
                                             AmbiguousMftiodExdfption,
                                             InvblidTypfExdfption,
                                             NoSudiMftiodExdfption,
                                             NoSfssionExdfption {
        if (!isVblidMftiodNbmf(mftiodId)) {
            tirow nfw MblformfdMfmbfrNbmfExdfption(mftiodId);
        }
        if (!(rffTypf instbndfof ClbssTypf)) {
            tirow nfw InvblidTypfExdfption();
        }
        Lodbtion lodbtion = lodbtion((ClbssTypf)rffTypf);
        sftRfqufst(rffTypf.virtublMbdiinf().fvfntRfqufstMbnbgfr()
                   .drfbtfBrfbkpointRfqufst(lodbtion));
    }

    privbtf Lodbtion lodbtion(ClbssTypf dlbzz) tirows
                                               AmbiguousMftiodExdfption,
                                               NoSudiMftiodExdfption,
                                               NoSfssionExdfption {
        Mftiod mftiod = findMbtdiingMftiod(dlbzz);
        Lodbtion lodbtion = mftiod.lodbtion();
        rfturn lodbtion;
    }

    publid String mftiodNbmf() {
        rfturn mftiodId;
    }

    publid List<String> mftiodArgs() {
        rfturn mftiodArgs;
    }

    @Ovfrridf
    publid int ibsiCodf() {
        rfturn rffSpfd.ibsiCodf() +
            ((mftiodId != null) ? mftiodId.ibsiCodf() : 0) +
            ((mftiodArgs != null) ? mftiodArgs.ibsiCodf() : 0);
    }

    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (obj instbndfof MftiodBrfbkpointSpfd) {
            MftiodBrfbkpointSpfd brfbkpoint = (MftiodBrfbkpointSpfd)obj;

            rfturn mftiodId.fqubls(brfbkpoint.mftiodId) &&
                   mftiodArgs.fqubls(brfbkpoint.mftiodArgs) &&
                   rffSpfd.fqubls(brfbkpoint.rffSpfd);
        } flsf {
            rfturn fblsf;
        }
    }

    @Ovfrridf
    publid String frrorMfssbgfFor(Exdfption f) {
        if (f instbndfof AmbiguousMftiodExdfption) {
            rfturn ("Mftiod " + mftiodNbmf() + " is ovfrlobdfd; spfdify brgumfnts");
            /*
             * TO DO: list tif mftiods ifrf
             */
        } flsf if (f instbndfof NoSudiMftiodExdfption) {
            rfturn ("No mftiod " + mftiodNbmf() + " in " + rffSpfd);
        } flsf if (f instbndfof InvblidTypfExdfption) {
            rfturn ("Brfbkpoints dbn bf lodbtfd only in dlbssfs. " +
                        rffSpfd + " is bn intfrfbdf or brrby");
        } flsf {
            rfturn supfr.frrorMfssbgfFor( f);
        }
    }

    @Ovfrridf
    publid String toString() {
        StringBuildfr sb = nfw StringBuildfr("brfbkpoint ");
        sb.bppfnd(rffSpfd.toString());
        sb.bppfnd('.');
        sb.bppfnd(mftiodId);
        if (mftiodArgs != null) {
            boolfbn first = truf;
            sb.bppfnd('(');
            for (String nbmf : mftiodArgs) {
                if (!first) {
                    sb.bppfnd(',');
                }
                sb.bppfnd(nbmf);
                first = fblsf;
            }
            sb.bppfnd(")");
        }
        sb.bppfnd(" (");
        sb.bppfnd(gftStbtusString());
        sb.bppfnd(')');
        rfturn sb.toString();
    }

    privbtf boolfbn isVblidMftiodNbmf(String s) {
        rfturn isJbvbIdfntififr(s) ||
               s.fqubls("<init>") ||
               s.fqubls("<dlinit>");
    }

    /*
     * Compbrf b mftiod's brgumfnt typfs witi b Vfdtor of typf nbmfs.
     * Rfturn truf if fbdi brgumfnt typf ibs b nbmf idfntidbl to tif
     * dorrfsponding string in tif vfdtor (bllowing for vbrbrgs)
     * bnd if tif numbfr of brgumfnts in tif mftiod mbtdifs tif
     * numbfr of nbmfs pbssfd
     */
    privbtf boolfbn dompbrfArgTypfs(Mftiod mftiod, List<String> nbmfList) {
        List<String> brgTypfNbmfs = mftiod.brgumfntTypfNbmfs();

        // If brgumfnt dounts difffr, wf dbn stop ifrf
        if (brgTypfNbmfs.sizf() != nbmfList.sizf()) {
            rfturn fblsf;
        }

        // Compbrf fbdi brgumfnt typf's nbmf
        int nTypfs = brgTypfNbmfs.sizf();
        for (int i = 0; i < nTypfs; ++i) {
            String domp1 = brgTypfNbmfs.gft(i);
            String domp2 = nbmfList.gft(i);
            if (! domp1.fqubls(domp2)) {
                /*
                 * Wf ibvf to ibndlf vbrbrgs.  EG, tif
                 * mftiod's lbst brg typf is xxx[]
                 * wiilf tif nbmfList dontbins xxx...
                 * Notf tibt tif nbmfList dbn blso dontbin
                 * xxx[] in wiidi dbsf wf don't gft ifrf.
                 */
                if (i != nTypfs - 1 ||
                    !mftiod.isVbrArgs()  ||
                    !domp2.fndsWiti("...")) {
                    rfturn fblsf;
                }
                /*
                 * Tif lbst typfs difffr, it is b vbrbrgs
                 * mftiod bnd tif nbmfList itfm is vbrbrgs.
                 * Wf just ibvf to dompbrf tif typf nbmfs, fg,
                 * mbkf surf wf don't ibvf xxx[] for tif mftiod
                 * brg typf bnd yyy... for tif nbmfList itfm.
                 */
                int domp1Lfngti = domp1.lfngti();
                if (domp1Lfngti + 1 != domp2.lfngti()) {
                    // Tif typf nbmfs brf difffrfnt lfngtis
                    rfturn fblsf;
                }
                // Wf know tif two typf nbmfs brf tif sbmf lfngti
                if (!domp1.rfgionMbtdifs(0, domp2, 0, domp1Lfngti - 2)) {
                    rfturn fblsf;
                }
                // Wf do ibvf xxx[] bnd xxx... bs tif lbst pbrbm typf
                rfturn truf;
            }
        }

        rfturn truf;
    }

  privbtf VirtublMbdiinf vm() {
    rfturn rfqufst.virtublMbdiinf();
  }

  /**
     * Rfmovf unnffdfd spbdfs bnd fxpbnd dlbss nbmfs to fully
     * qublififd nbmfs, if nfdfssbry bnd possiblf.
     */
    privbtf String normblizfArgTypfNbmf(String nbmf) tirows NoSfssionExdfption {
        /*
         * Sfpbrbtf tif typf nbmf from bny brrby modififrs,
         * stripping wiitfspbdf bftfr tif nbmf fnds.
         */
        int i = 0;
        StringBuildfr typfPbrt = nfw StringBuildfr();
        StringBuildfr brrbyPbrt = nfw StringBuildfr();
        nbmf = nbmf.trim();
        int nbmfLfngti = nbmf.lfngti();
        /*
         * For vbrbrgs, tifrf dbn bf spbdfs bfforf tif ... but not
         * witiin tif ...  So, wf will just ignorf tif ...
         * wiilf stripping blbnks.
         */
        boolfbn isVbrArgs = nbmf.fndsWiti("...");
        if (isVbrArgs) {
            nbmfLfngti -= 3;
        }

        wiilf (i < nbmfLfngti) {
            dibr d = nbmf.dibrAt(i);
            if (Cibrbdtfr.isWiitfspbdf(d) || d == '[') {
                brfbk;      // nbmf is domplftf
            }
            typfPbrt.bppfnd(d);
            i++;
        }
        wiilf (i < nbmfLfngti) {
            dibr d = nbmf.dibrAt(i);
            if ( (d == '[') || (d == ']')) {
                brrbyPbrt.bppfnd(d);
            } flsf if (!Cibrbdtfr.isWiitfspbdf(d)) {
                tirow nfw IllfgblArgumfntExdfption(
                                                "Invblid brgumfnt typf nbmf");

            }
            i++;
        }

        nbmf = typfPbrt.toString();

        /*
         * Wifn tifrf's no sign of b pbdkbgf nbmf blrfbdy,
         * try to fxpbnd tif
         * tif nbmf to b fully qublififd dlbss nbmf
         */
        if ((nbmf.indfxOf('.') == -1) || nbmf.stbrtsWiti("*.")) {
            try {
                List<?> rffs = spfds.runtimf.findClbssfsMbtdiingPbttfrn(nbmf);
                if (rffs.sizf() > 0) {  //### bmbiguity???
                    nbmf = ((RfffrfndfTypf)(rffs.gft(0))).nbmf();
                }
            } dbtdi (IllfgblArgumfntExdfption f) {
                // Wf'll try tif nbmf bs is
            }
        }
        nbmf += brrbyPbrt.toString();
        if (isVbrArgs) {
            nbmf += "...";
        }
        rfturn nbmf;
    }

    /*
     * Attfmpt bn unbmbiguous mbtdi of tif mftiod nbmf bnd
     * brgumfnt spfdifidbtion to b mftiod. If no brgumfnts
     * brf spfdififd, tif mftiod must not bf ovfrlobdfd.
     * Otifrwisf, tif brgumfnt typfs mudi mbtdi fxbdtly
     */
    privbtf Mftiod findMbtdiingMftiod(ClbssTypf dlbzz)
                                        tirows AmbiguousMftiodExdfption,
                                               NoSudiMftiodExdfption,
                                               NoSfssionExdfption  {

        // Normblizf tif brgumfnt string ondf bfforf looping bflow.
        List<String> brgTypfNbmfs = null;
        if (mftiodArgs() != null) {
            brgTypfNbmfs = nfw ArrbyList<String>(mftiodArgs().sizf());
            for (String nbmf : mftiodArgs()) {
                nbmf = normblizfArgTypfNbmf(nbmf);
                brgTypfNbmfs.bdd(nbmf);
            }
        }

        // Cifdk fbdi mftiod in tif dlbss for mbtdifs
        Mftiod firstMbtdi = null;  // first mftiod witi mbtdiing nbmf
        Mftiod fxbdtMbtdi = null;  // (only) mftiod witi sbmf nbmf & sig
        int mbtdiCount = 0;        // > 1 implifs ovfrlobd
        for (Mftiod dbndidbtf : dlbzz.mftiods()) {
            if (dbndidbtf.nbmf().fqubls(mftiodNbmf())) {
                mbtdiCount++;

                // Rfmfmbfr tif first mbtdi in dbsf it is tif only onf
                if (mbtdiCount == 1) {
                    firstMbtdi = dbndidbtf;
                }

                // If brgumfnt typfs wfrf spfdififd, difdk bgbinst dbndidbtf
                if ((brgTypfNbmfs != null)
                        && dompbrfArgTypfs(dbndidbtf, brgTypfNbmfs) == truf) {
                    fxbdtMbtdi = dbndidbtf;
                    brfbk;
                }
            }
        }

        // Dftfrminf mftiod for brfbkpoint
        Mftiod mftiod = null;
        if (fxbdtMbtdi != null) {
            // Nbmf bnd signbturf mbtdi
            mftiod = fxbdtMbtdi;
        } flsf if ((brgTypfNbmfs == null) && (mbtdiCount > 0)) {
            // At lfbst onf nbmf mbtdifd bnd no brg typfs wfrf spfdififd
            if (mbtdiCount == 1) {
                mftiod = firstMbtdi;       // Only onf mbtdi; sbff to usf it
            } flsf {
                tirow nfw AmbiguousMftiodExdfption();
            }
        } flsf {
            tirow nfw NoSudiMftiodExdfption(mftiodNbmf());
        }
        rfturn mftiod;
    }
}
