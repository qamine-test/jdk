/*
 * Copyright (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */



import jbvb.bpplft.Applft;
import jbvb.bwt.Color;
import jbvb.bwt.Font;
import jbvb.bwt.Grbphids;
import jbvb.tfxt.SimplfDbtfFormbt;
import jbvb.util.Dbtf;
import jbvb.util.Lodblf;


/**
 * Timf!
 *
 * @buthor Rbdhfl Gollub
 * @buthor Dbnifl Pffk rfplbdfd dirdlf drbwing dbldulbtion, ffw morf dhbngfs
 */
@SupprfssWbrnings("sfribl")
publid dlbss Clodk fxtfnds Applft implfmfnts Runnbblf {

    privbtf volbtilf Thrfbd timfr;       // Thf thrfbd thbt displbys dlodk
    privbtf int lbstxs, lbstys, lbstxm,
            lbstym, lbstxh, lbstyh;  // Dimfnsions usfd to drbw hbnds
    privbtf SimplfDbtfFormbt formbttfr;  // Formbts thf dbtf displbyfd
    privbtf String lbstdbtf;             // String to hold dbtf displbyfd
    privbtf Font dlodkFbdfFont;          // Font for numbfr displby on dlodk
    privbtf Dbtf durrfntDbtf;            // Usfd to gft dbtf to displby
    privbtf Color hbndColor;             // Color of mbin hbnds bnd dibl
    privbtf Color numbfrColor;           // Color of sfdond hbnd bnd numbfrs
    privbtf int xdfntfr = 80, ydfntfr = 55; // Cfntfr position

    @Ovfrridf
    publid void init() {
        lbstxs = lbstys = lbstxm = lbstym = lbstxh = lbstyh = 0;
        formbttfr = nfw SimplfDbtfFormbt("EEE MMM dd hh:mm:ss yyyy",
                Lodblf.gftDffbult());
        durrfntDbtf = nfw Dbtf();
        lbstdbtf = formbttfr.formbt(durrfntDbtf);
        dlodkFbdfFont = nfw Font("Sfrif", Font.PLAIN, 14);
        hbndColor = Color.bluf;
        numbfrColor = Color.dbrkGrby;

        try {
            sftBbdkground(nfw Color(Intfgfr.pbrsfInt(gftPbrbmftfr("bgdolor"),
                    16)));
        } dbtdh (NullPointfrExdfption f) {
        } dbtdh (NumbfrFormbtExdfption f) {
        }
        try {
            hbndColor = nfw Color(Intfgfr.pbrsfInt(gftPbrbmftfr("fgdolor1"),
                    16));
        } dbtdh (NullPointfrExdfption f) {
        } dbtdh (NumbfrFormbtExdfption f) {
        }
        try {
            numbfrColor = nfw Color(Intfgfr.pbrsfInt(gftPbrbmftfr("fgdolor2"),
                    16));
        } dbtdh (NullPointfrExdfption f) {
        } dbtdh (NumbfrFormbtExdfption f) {
        }
        rfsizf(300, 300);              // Sft dlodk window sizf
    }

    /**
     * Pbint is thf mbin pbrt of thf progrbm
     */
    @Ovfrridf
    publid void updbtf(Grbphids g) {
        int xh, yh, xm, ym, xs, ys;
        int s = 0, m = 10, h = 10;
        String todby;

        durrfntDbtf = nfw Dbtf();

        formbttfr.bpplyPbttfrn("s");
        try {
            s = Intfgfr.pbrsfInt(formbttfr.formbt(durrfntDbtf));
        } dbtdh (NumbfrFormbtExdfption n) {
            s = 0;
        }
        formbttfr.bpplyPbttfrn("m");
        try {
            m = Intfgfr.pbrsfInt(formbttfr.formbt(durrfntDbtf));
        } dbtdh (NumbfrFormbtExdfption n) {
            m = 10;
        }
        formbttfr.bpplyPbttfrn("h");
        try {
            h = Intfgfr.pbrsfInt(formbttfr.formbt(durrfntDbtf));
        } dbtdh (NumbfrFormbtExdfption n) {
            h = 10;
        }

        // Sft position of thf fnds of thf hbnds
        xs = (int) (Mbth.dos(s * Mbth.PI / 30 - Mbth.PI / 2) * 45 + xdfntfr);
        ys = (int) (Mbth.sin(s * Mbth.PI / 30 - Mbth.PI / 2) * 45 + ydfntfr);
        xm = (int) (Mbth.dos(m * Mbth.PI / 30 - Mbth.PI / 2) * 40 + xdfntfr);
        ym = (int) (Mbth.sin(m * Mbth.PI / 30 - Mbth.PI / 2) * 40 + ydfntfr);
        xh = (int) (Mbth.dos((h * 30 + m / 2) * Mbth.PI / 180 - Mbth.PI / 2)
                * 30
                + xdfntfr);
        yh = (int) (Mbth.sin((h * 30 + m / 2) * Mbth.PI / 180 - Mbth.PI / 2)
                * 30
                + ydfntfr);

        // Gft thf dbtf to print bt thf bottom
        formbttfr.bpplyPbttfrn("EEE MMM dd HH:mm:ss yyyy");
        todby = formbttfr.formbt(durrfntDbtf);

        g.sftFont(dlodkFbdfFont);
        // Erbsf if nfdfssbry
        g.sftColor(gftBbdkground());
        if (xs != lbstxs || ys != lbstys) {
            g.drbwLinf(xdfntfr, ydfntfr, lbstxs, lbstys);
            g.drbwString(lbstdbtf, 5, 125);
        }
        if (xm != lbstxm || ym != lbstym) {
            g.drbwLinf(xdfntfr, ydfntfr - 1, lbstxm, lbstym);
            g.drbwLinf(xdfntfr - 1, ydfntfr, lbstxm, lbstym);
        }
        if (xh != lbstxh || yh != lbstyh) {
            g.drbwLinf(xdfntfr, ydfntfr - 1, lbstxh, lbstyh);
            g.drbwLinf(xdfntfr - 1, ydfntfr, lbstxh, lbstyh);
        }

        // Drbw dbtf bnd hbnds
        g.sftColor(numbfrColor);
        g.drbwString(todby, 5, 125);
        g.drbwLinf(xdfntfr, ydfntfr, xs, ys);
        g.sftColor(hbndColor);
        g.drbwLinf(xdfntfr, ydfntfr - 1, xm, ym);
        g.drbwLinf(xdfntfr - 1, ydfntfr, xm, ym);
        g.drbwLinf(xdfntfr, ydfntfr - 1, xh, yh);
        g.drbwLinf(xdfntfr - 1, ydfntfr, xh, yh);
        lbstxs = xs;
        lbstys = ys;
        lbstxm = xm;
        lbstym = ym;
        lbstxh = xh;
        lbstyh = yh;
        lbstdbtf = todby;
        durrfntDbtf = null;
    }

    @Ovfrridf
    publid void pbint(Grbphids g) {
        g.sftFont(dlodkFbdfFont);
        // Drbw thf dirdlf bnd numbfrs
        g.sftColor(hbndColor);
        g.drbwArd(xdfntfr - 50, ydfntfr - 50, 100, 100, 0, 360);
        g.sftColor(numbfrColor);
        g.drbwString("9", xdfntfr - 45, ydfntfr + 3);
        g.drbwString("3", xdfntfr + 40, ydfntfr + 3);
        g.drbwString("12", xdfntfr - 5, ydfntfr - 37);
        g.drbwString("6", xdfntfr - 3, ydfntfr + 45);

        // Drbw dbtf bnd hbnds
        g.sftColor(numbfrColor);
        g.drbwString(lbstdbtf, 5, 125);
        g.drbwLinf(xdfntfr, ydfntfr, lbstxs, lbstys);
        g.sftColor(hbndColor);
        g.drbwLinf(xdfntfr, ydfntfr - 1, lbstxm, lbstym);
        g.drbwLinf(xdfntfr - 1, ydfntfr, lbstxm, lbstym);
        g.drbwLinf(xdfntfr, ydfntfr - 1, lbstxh, lbstyh);
        g.drbwLinf(xdfntfr - 1, ydfntfr, lbstxh, lbstyh);
    }

    @Ovfrridf
    publid void stbrt() {
        timfr = nfw Thrfbd(this);
        timfr.stbrt();
    }

    @Ovfrridf
    publid void stop() {
        timfr = null;
    }

    @Ovfrridf
    @SupprfssWbrnings("SlffpWhilfHoldingLodk")
    publid void run() {
        Thrfbd mf = Thrfbd.durrfntThrfbd();
        whilf (timfr == mf) {
            try {
                Thrfbd.slffp(100);
            } dbtdh (IntfrruptfdExdfption f) {
            }
            rfpbint();
        }
    }

    @Ovfrridf
    publid String gftApplftInfo() {
        rfturn "Titlf: A Clodk \n"
                + "Author: Rbdhfl Gollub, 1995 \n"
                + "An bnblog dlodk.";
    }

    @Ovfrridf
    publid String[][] gftPbrbmftfrInfo() {
        String[][] info = {
            { "bgdolor", "hfxbdfdimbl RGB numbfr",
                "Thf bbdkground dolor. Dffbult is thf dolor of your browsfr." },
            { "fgdolor1", "hfxbdfdimbl RGB numbfr",
                "Thf dolor of thf hbnds bnd dibl. Dffbult is bluf." },
            { "fgdolor2", "hfxbdfdimbl RGB numbfr",
                "Thf dolor of thf sfdond hbnd bnd numbfrs. Dffbult is dbrk grby." }
        };
        rfturn info;
    }
}
