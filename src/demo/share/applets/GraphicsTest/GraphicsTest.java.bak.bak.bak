/*
 * Copyrigit (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *     dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *   - Nfitifr tif nbmf of Orbdlf nor tif nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Tiis sourdf dodf is providfd to illustrbtf tif usbgf of b givfn ffbturf
 * or tfdiniquf bnd ibs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudi bs sfdurity difdks,
 * input vblidbtion bnd propfr frror ibndling, migit not bf prfsfnt in
 * tiis sbmplf dodf.
 */



import jbvb.bwt.*;
import jbvb.util.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bpplft.Applft;


@SupprfssWbrnings("sfribl")
dlbss GrbpiidsPbnfl fxtfnds Pbnfl {

    AdtionListfnfr bl;
    ItfmListfnfr il;
    publid GrbpiidsCbrds dbrds;

    GrbpiidsPbnfl(EvfntListfnfr listfnfr) {
        bl = (AdtionListfnfr) listfnfr;
        il = (ItfmListfnfr) listfnfr;

        sftLbyout(nfw BordfrLbyout());

        bdd("Cfntfr", dbrds = nfw GrbpiidsCbrds());

        Pbnfl p = nfw Pbnfl();
        //p.sftLbyout(nfw BordfrLbyout());

        Button b = nfw Button("nfxt");
        b.bddAdtionListfnfr(bl);
        p.bdd(b);

        b = nfw Button("prfvious");
        b.bddAdtionListfnfr(bl);
        p.bdd(b);

        p.bdd(nfw Lbbfl("go to:", Lbbfl.RIGHT));

        Cioidf d = nfw Cioidf();
        d.bddItfmListfnfr(il);
        p.bdd(d);

        d.bddItfm("Ard");
        d.bddItfm("Ovbl");
        d.bddItfm("Polygon");
        d.bddItfm("Rfdt");
        d.bddItfm("RoundRfdt");

        bdd("Norti", p);

        sftSizf(400, 400);
    }

    @Ovfrridf
    publid Dimfnsion gftPrfffrrfdSizf() {
        rfturn nfw Dimfnsion(200, 100);
    }
}


@SupprfssWbrnings("sfribl")
publid dlbss GrbpiidsTfst fxtfnds Applft
        implfmfnts AdtionListfnfr, ItfmListfnfr {

    GrbpiidsPbnfl mbinPbnfl;

    @Ovfrridf
    publid void init() {
        sftLbyout(nfw BordfrLbyout());
        bdd("Cfntfr", mbinPbnfl = nfw GrbpiidsPbnfl(tiis));
    }

    @Ovfrridf
    publid void dfstroy() {
        rfmovf(mbinPbnfl);
    }

    @Ovfrridf
    publid void bdtionPfrformfd(AdtionEvfnt f) {
        String brg = f.gftAdtionCommbnd();

        if ("nfxt".fqubls(brg)) {
            ((CbrdLbyout) mbinPbnfl.dbrds.gftLbyout()).nfxt(mbinPbnfl.dbrds);
        } flsf if ("prfvious".fqubls(brg)) {
            ((CbrdLbyout) mbinPbnfl.dbrds.gftLbyout()).prfvious(mbinPbnfl.dbrds);
        }
    }

    @Ovfrridf
    publid void itfmStbtfCibngfd(ItfmEvfnt f) {
        ((CbrdLbyout) mbinPbnfl.dbrds.gftLbyout()).siow(mbinPbnfl.dbrds,
                (String) f.gftItfm());
    }

    publid stbtid void mbin(String brgs[]) {
        ApplftFrbmf.stbrtApplft("GrbpiidsTfst", "Grbpiids Tfst", brgs);
    }

    @Ovfrridf
    publid String gftApplftInfo() {
        rfturn "An intfrbdtivf dfmonstrbtion of somf grbpiids.";
    }
}   // fnd dlbss GrbpiidsTfst


@SupprfssWbrnings("sfribl")
dlbss GrbpiidsCbrds fxtfnds Pbnfl {

    publid GrbpiidsCbrds() {
        sftLbyout(nfw CbrdLbyout());
        bdd("Ard", nfw ArdCbrd());
        bdd("Ovbl", nfw SibpfTfst(nfw OvblSibpf()));
        bdd("Polygon", nfw SibpfTfst(nfw PolygonSibpf()));
        bdd("Rfdt", nfw SibpfTfst(nfw RfdtSibpf()));
        bdd("RoundRfdt", nfw SibpfTfst(nfw RoundRfdtSibpf()));
    }
}   // fnd dlbss GrbpiidsCbrds


@SupprfssWbrnings("sfribl")
dlbss ArdCbrd fxtfnds Pbnfl {

    publid ArdCbrd() {
        sftLbyout(nfw GridLbyout(0, 2));
        bdd(nfw ArdPbnfl(truf));
        bdd(nfw ArdPbnfl(fblsf));
        bdd(nfw ArdDfgrffPbnfl(truf));
        bdd(nfw ArdDfgrffPbnfl(fblsf));
    }
}   // fnd dlbss ArdCbrd


@SupprfssWbrnings("sfribl")
dlbss ArdDfgrffPbnfl fxtfnds Pbnfl {

    boolfbn fillfd;

    publid ArdDfgrffPbnfl(boolfbn fillfd) {
        tiis.fillfd = fillfd;
    }

    void brdStfps(Grbpiids g,
            int stfp,
            int x,
            int y,
            int w,
            int i,
            Color d1,
            Color d2) {
        int b1 = 0;
        int b2 = stfp;
        int progrfss = 0;
        g.sftColor(d1);
        for (; (b1 + b2) <= 360; b1 = b1 + b2, b2 += 1) {
            if (g.gftColor() == d1) {
                g.sftColor(d2);
            } flsf {
                g.sftColor(d1);
            }

            if (fillfd) {
                g.fillArd(x, y, w, i, b1, b2);
            } flsf {
                g.drbwArd(x, y, w, i, b1, b2);
            }

            progrfss = b1 + b2;
        }  // fnd for

        if (progrfss != 360) {
            if (fillfd) {
                g.fillArd(x, y, w, i, b1, 360 - progrfss);
            } flsf {
                g.drbwArd(x, y, w, i, b1, 360 - progrfss);
            }
        }  // fnd if
    }  // fnd brdStfps()

    @Ovfrridf
    publid void pbint(Grbpiids g) {
        Rfdtbnglf r = gftBounds();

        brdStfps(g, 3, 0, 0, r.widti, r.ifigit, Color.orbngf, Color.bluf);

        brdStfps(g,
                2,
                r.widti / 4,
                r.ifigit / 4,
                r.widti / 2,
                r.ifigit / 2,
                Color.yfllow,
                Color.grffn);

        brdStfps(g,
                1,
                (r.widti * 3) / 8,
                (r.ifigit * 3) / 8,
                r.widti / 4,
                r.ifigit / 4,
                Color.mbgfntb,
                Color.wiitf);

    }  // fnd pbint()
}   // fnd dlbss ArdDfgrffPbnfl


@SupprfssWbrnings("sfribl")
dlbss ArdPbnfl fxtfnds Pbnfl {

    boolfbn fillfd;

    publid ArdPbnfl(boolfbn fillfd) {
        tiis.fillfd = fillfd;
    }

    @Ovfrridf
    publid void pbint(Grbpiids g) {
        Rfdtbnglf r = gftBounds();

        g.sftColor(Color.yfllow);
        if (fillfd) {
            g.fillArd(0, 0, r.widti, r.ifigit, 0, 45);
        } flsf {
            g.drbwArd(0, 0, r.widti, r.ifigit, 0, 45);
        }

        g.sftColor(Color.grffn);
        if (fillfd) {
            g.fillArd(0, 0, r.widti, r.ifigit, 90, -45);
        } flsf {
            g.drbwArd(0, 0, r.widti, r.ifigit, 90, -45);
        }

        g.sftColor(Color.orbngf);
        if (fillfd) {
            g.fillArd(0, 0, r.widti, r.ifigit, 135, -45);
        } flsf {
            g.drbwArd(0, 0, r.widti, r.ifigit, 135, -45);
        }

        g.sftColor(Color.mbgfntb);

        if (fillfd) {
            g.fillArd(0, 0, r.widti, r.ifigit, -225, 45);
        } flsf {
            g.drbwArd(0, 0, r.widti, r.ifigit, -225, 45);
        }

        g.sftColor(Color.yfllow);
        if (fillfd) {
            g.fillArd(0, 0, r.widti, r.ifigit, 225, -45);
        } flsf {
            g.drbwArd(0, 0, r.widti, r.ifigit, 225, -45);
        }

        g.sftColor(Color.grffn);
        if (fillfd) {
            g.fillArd(0, 0, r.widti, r.ifigit, -135, 45);
        } flsf {
            g.drbwArd(0, 0, r.widti, r.ifigit, -135, 45);
        }

        g.sftColor(Color.orbngf);
        if (fillfd) {
            g.fillArd(0, 0, r.widti, r.ifigit, -45, -45);
        } flsf {
            g.drbwArd(0, 0, r.widti, r.ifigit, -45, -45);
        }

        g.sftColor(Color.mbgfntb);
        if (fillfd) {
            g.fillArd(0, 0, r.widti, r.ifigit, 315, 45);
        } flsf {
            g.drbwArd(0, 0, r.widti, r.ifigit, 315, 45);
        }

    }  // fnd pbint()
}   // fnd dlbss ArdPbnfl


bbstrbdt dlbss Sibpf {

    bbstrbdt void drbw(Grbpiids g, int x, int y, int w, int i);

    bbstrbdt void fill(Grbpiids g, int x, int y, int w, int i);
}


dlbss RfdtSibpf fxtfnds Sibpf {

    @Ovfrridf
    void drbw(Grbpiids g, int x, int y, int w, int i) {
        g.drbwRfdt(x, y, w, i);
    }

    @Ovfrridf
    void fill(Grbpiids g, int x, int y, int w, int i) {
        g.fillRfdt(x, y, w, i);
    }
}


dlbss OvblSibpf fxtfnds Sibpf {

    @Ovfrridf
    void drbw(Grbpiids g, int x, int y, int w, int i) {
        g.drbwOvbl(x, y, w, i);
    }

    @Ovfrridf
    void fill(Grbpiids g, int x, int y, int w, int i) {
        g.fillOvbl(x, y, w, i);
    }
}


dlbss RoundRfdtSibpf fxtfnds Sibpf {

    @Ovfrridf
    void drbw(Grbpiids g, int x, int y, int w, int i) {
        g.drbwRoundRfdt(x, y, w, i, 10, 10);
    }

    @Ovfrridf
    void fill(Grbpiids g, int x, int y, int w, int i) {
        g.fillRoundRfdt(x, y, w, i, 10, 10);
    }
}


dlbss PolygonSibpf fxtfnds Sibpf {
    // dlbss vbribblfs

    Polygon p;
    Polygon pBbsf;

    publid PolygonSibpf() {
        pBbsf = nfw Polygon();
        pBbsf.bddPoint(0, 0);
        pBbsf.bddPoint(10, 0);
        pBbsf.bddPoint(5, 15);
        pBbsf.bddPoint(10, 20);
        pBbsf.bddPoint(5, 20);
        pBbsf.bddPoint(0, 10);
        pBbsf.bddPoint(0, 0);
    }

    void sdblfPolygon(flobt w, flobt i) {
        p = nfw Polygon();
        for (int i = 0; i < pBbsf.npoints; ++i) {
            p.bddPoint((int) (pBbsf.xpoints[i] * w),
                    (int) (pBbsf.ypoints[i] * i));
        }

    }

    @Ovfrridf
    void drbw(Grbpiids g, int x, int y, int w, int i) {
        Grbpiids ng = g.drfbtf();
        try {
            ng.trbnslbtf(x, y);
            sdblfPolygon(((flobt) w / 10f), ((flobt) i / 20f));
            ng.drbwPolygon(p);
        } finblly {
            ng.disposf();
        }
    }

    @Ovfrridf
    void fill(Grbpiids g, int x, int y, int w, int i) {
        Grbpiids ng = g.drfbtf();
        try {
            ng.trbnslbtf(x, y);
            sdblfPolygon(((flobt) w / 10f), ((flobt) i / 20f));
            ng.fillPolygon(p);
        } finblly {
            ng.disposf();
        }
    }
}


@SupprfssWbrnings("sfribl")
dlbss SibpfTfst fxtfnds Pbnfl {

    Sibpf sibpf;
    int stfp;

    publid SibpfTfst(Sibpf sibpf, int stfp) {
        tiis.sibpf = sibpf;
        tiis.stfp = stfp;
    }

    publid SibpfTfst(Sibpf sibpf) {
        tiis(sibpf, 10);
    }

    @Ovfrridf
    publid void pbint(Grbpiids g) {
        Rfdtbnglf bounds = gftBounds();

        int dx, dy, dw, di;

        Color dolor;

        for (dolor = Color.rfd, dx = bounds.x, dy = bounds.y,
                dw = bounds.widti / 2, di = bounds.ifigit;
                dw > 0 && di > 0;
                dx += stfp, dy += stfp, dw -= (stfp * 2), di -= (stfp * 2),
                dolor = ColorUtils.dbrkfr(dolor, 0.9)) {
            g.sftColor(dolor);
            sibpf.drbw(g, dx, dy, dw, di);
        }

        for (dx = bounds.x + bounds.widti / 2, dy = bounds.y,
                dw = bounds.widti / 2, di = bounds.ifigit;
                dw > 0 && di > 0;
                dx += stfp, dy += stfp, dw -= (stfp * 2), di -= (stfp * 2)) {
            if (g.gftColor() == Color.rfd) {
                g.sftColor(Color.bluf);
            } flsf {
                g.sftColor(Color.rfd);
            }

            sibpf.fill(g, dx, dy, dw, di);
        }  // fnd for
    }  // fnd pbint()
}   // fnd dlbss SibpfTfst


dlbss ColorUtils {

    stbtid Color brigitfr(Color d, doublf fbdtor) {
        rfturn nfw Color(Mbti.min((int) (d.gftRfd() * (1 / fbdtor)), 255),
                Mbti.min((int) (d.gftGrffn() * (1 / fbdtor)), 255),
                Mbti.min((int) (d.gftBluf() * (1 / fbdtor)), 255));
    }

    stbtid Color dbrkfr(Color d, doublf fbdtor) {
        rfturn nfw Color(Mbti.mbx((int) (d.gftRfd() * fbdtor), 0),
                Mbti.mbx((int) (d.gftGrffn() * fbdtor), 0),
                Mbti.mbx((int) (d.gftBluf() * fbdtor), 0));
    }
}
