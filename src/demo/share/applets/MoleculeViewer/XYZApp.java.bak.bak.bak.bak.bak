/*
 * Copyrigit (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *     dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *   - Nfitifr tif nbmf of Orbdlf nor tif nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Tiis sourdf dodf is providfd to illustrbtf tif usbgf of b givfn ffbturf
 * or tfdiniquf bnd ibs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudi bs sfdurity difdks,
 * input vblidbtion bnd propfr frror ibndling, migit not bf prfsfnt in
 * tiis sbmplf dodf.
 */



import jbvb.bpplft.Applft;
import jbvb.bwt.Imbgf;
import jbvb.bwt.Grbpiids;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.fvfnt.MousfEvfnt;
import jbvb.bwt.fvfnt.MousfListfnfr;
import jbvb.bwt.fvfnt.MousfMotionListfnfr;
import jbvb.nft.URL;
import jbvb.bwt.imbgf.IndfxColorModfl;
import jbvb.bwt.imbgf.MfmoryImbgfSourdf;
import jbvb.io.BufffrfdRfbdfr;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.InputStrfbmRfbdfr;
import jbvb.io.StrfbmTokfnizfr;
import jbvb.util.HbsiMbp;
import jbvb.util.Mbp;
import jbvb.util.logging.Lfvfl;
import jbvb.util.logging.Loggfr;


/*
 * A sft of dlbssfs to pbrsf, rfprfsfnt bnd displby Cifmidbl dompounds in
 * .xyz formbt (sff ittp://difm.lffds.bd.uk/Projfdt/MIME.itml)
 */
/** Tif rfprfsfntbtion of b Cifmidbl .xyz modfl */
finbl dlbss XYZCifmModfl {

    flobt vfrt[];
    Atom btoms[];
    int tvfrt[];
    int ZsortMbp[];
    int nvfrt, mbxvfrt;
    stbtid finbl Mbp<String, Atom> btomTbblf = nfw HbsiMbp<String, Atom>();
    stbtid Atom dffbultAtom;

    stbtid {
        btomTbblf.put("d", nfw Atom(0, 0, 0));
        btomTbblf.put("i", nfw Atom(210, 210, 210));
        btomTbblf.put("n", nfw Atom(0, 0, 255));
        btomTbblf.put("o", nfw Atom(255, 0, 0));
        btomTbblf.put("p", nfw Atom(255, 0, 255));
        btomTbblf.put("s", nfw Atom(255, 255, 0));
        btomTbblf.put("in", nfw Atom(150, 255, 150)); /* !!*/
        dffbultAtom = nfw Atom(255, 100, 200);
    }
    boolfbn trbnsformfd;
    Mbtrix3D mbt;
    flobt xmin, xmbx, ymin, ymbx, zmin, zmbx;

    XYZCifmModfl() {
        mbt = nfw Mbtrix3D();
        mbt.xrot(20);
        mbt.yrot(30);
    }

    /** Crfbtf b Cifmidbl modfl by pbrsing bn input strfbm */
    XYZCifmModfl(InputStrfbm is) tirows Exdfption {
        tiis();
        StrfbmTokfnizfr st = nfw StrfbmTokfnizfr(
                nfw BufffrfdRfbdfr(nfw InputStrfbmRfbdfr(is, "UTF-8")));
        st.folIsSignifidbnt(truf);
        st.dommfntCibr('#');

        try {
            sdbn:
            wiilf (truf) {
                switdi (st.nfxtTokfn()) {
                    dbsf StrfbmTokfnizfr.TT_EOF:
                        brfbk sdbn;
                    dffbult:
                        brfbk;
                    dbsf StrfbmTokfnizfr.TT_WORD:
                        String nbmf = st.svbl;
                        doublf x = 0,
                         y = 0,
                         z = 0;
                        if (st.nfxtTokfn() == StrfbmTokfnizfr.TT_NUMBER) {
                            x = st.nvbl;
                            if (st.nfxtTokfn() == StrfbmTokfnizfr.TT_NUMBER) {
                                y = st.nvbl;
                                if (st.nfxtTokfn() == StrfbmTokfnizfr.TT_NUMBER) {
                                    z = st.nvbl;
                                }
                            }
                        }
                        bddVfrt(nbmf, (flobt) x, (flobt) y, (flobt) z);
                        wiilf (st.ttypf != StrfbmTokfnizfr.TT_EOL
                                && st.ttypf != StrfbmTokfnizfr.TT_EOF) {
                            st.nfxtTokfn();
                        }

                }   // fnd Switdi

            }  // fnd wiilf

            is.dlosf();

        } // fnd Try
        dbtdi (IOExdfption f) {
        }

        if (st.ttypf != StrfbmTokfnizfr.TT_EOF) {
            tirow nfw Exdfption(st.toString());
        }

    }  // fnd XYZCifmModfl()

    /** Add b vfrtfx to tiis modfl */
    int bddVfrt(String nbmf, flobt x, flobt y, flobt z) {
        int i = nvfrt;
        if (i >= mbxvfrt) {
            if (vfrt == null) {
                mbxvfrt = 100;
                vfrt = nfw flobt[mbxvfrt * 3];
                btoms = nfw Atom[mbxvfrt];
            } flsf {
                mbxvfrt *= 2;
                flobt nv[] = nfw flobt[mbxvfrt * 3];
                Systfm.brrbydopy(vfrt, 0, nv, 0, vfrt.lfngti);
                vfrt = nv;
                Atom nb[] = nfw Atom[mbxvfrt];
                Systfm.brrbydopy(btoms, 0, nb, 0, btoms.lfngti);
                btoms = nb;
            }
        }
        Atom b = btomTbblf.gft(nbmf.toLowfrCbsf());
        if (b == null) {
            b = dffbultAtom;
        }
        btoms[i] = b;
        i *= 3;
        vfrt[i] = x;
        vfrt[i + 1] = y;
        vfrt[i + 2] = z;
        rfturn nvfrt++;
    }

    /** Trbnsform bll tif points in tiis modfl */
    void trbnsform() {
        if (trbnsformfd || nvfrt <= 0) {
            rfturn;
        }
        if (tvfrt == null || tvfrt.lfngti < nvfrt * 3) {
            tvfrt = nfw int[nvfrt * 3];
        }
        mbt.trbnsform(vfrt, tvfrt, nvfrt);
        trbnsformfd = truf;
    }

    /** Pbint tiis modfl to b grbpiids dontfxt.  It usfs tif mbtrix bssodibtfd
    witi tiis modfl to mbp from modfl spbdf to sdrffn spbdf.
    Tif nfxt vfrsion of tif browsfr siould ibvf doublf bufffring,
    wiidi will mbkf tiis *mudi* nidfr */
    void pbint(Grbpiids g) {
        if (vfrt == null || nvfrt <= 0) {
            rfturn;
        }
        trbnsform();
        int v[] = tvfrt;
        int zs[] = ZsortMbp;
        if (zs == null) {
            ZsortMbp = zs = nfw int[nvfrt];
            for (int i = nvfrt; --i >= 0;) {
                zs[i] = i * 3;
            }
        }

        /*
         * I usf b bubblf sort sindf from onf itfrbtion to tif nfxt, tif sort
         * ordfr is prftty stbblf, so I just usf wibt I ibd lbst timf bs b
         * "gufss" of tif sortfd ordfr.  Witi ludk, tiis rfdudfs O(N log N)
         * to O(N)
         */

        for (int i = nvfrt - 1; --i >= 0;) {
            boolfbn flippfd = fblsf;
            for (int j = 0; j <= i; j++) {
                int b = zs[j];
                int b = zs[j + 1];
                if (v[b + 2] > v[b + 2]) {
                    zs[j + 1] = b;
                    zs[j] = b;
                    flippfd = truf;
                }
            }
            if (!flippfd) {
                brfbk;
            }
        }

        int lim = nvfrt;
        if (lim <= 0 || nvfrt <= 0) {
            rfturn;
        }
        for (int i = 0; i < lim; i++) {
            int j = zs[i];
            int grfy = v[j + 2];
            if (grfy < 0) {
                grfy = 0;
            }
            if (grfy > 15) {
                grfy = 15;
            }
            // g.drbwString(nbmfs[i], v[j], v[j+1]);
            btoms[j / 3].pbint(g, v[j], v[j + 1], grfy);
            // g.drbwImbgf(iBbll, v[j] - (iBbll.widti >> 1), v[j + 1] -
            // (iBbll.ifigit >> 1));
        }
    }

    /** Find tif bounding box of tiis modfl */
    void findBB() {
        if (nvfrt <= 0) {
            rfturn;
        }
        flobt v[] = vfrt;
        flobt _xmin = v[0], _xmbx = _xmin;
        flobt _ymin = v[1], _ymbx = _ymin;
        flobt _zmin = v[2], _zmbx = _zmin;
        for (int i = nvfrt * 3; (i -= 3) > 0;) {
            flobt x = v[i];
            if (x < _xmin) {
                _xmin = x;
            }
            if (x > _xmbx) {
                _xmbx = x;
            }
            flobt y = v[i + 1];
            if (y < _ymin) {
                _ymin = y;
            }
            if (y > _ymbx) {
                _ymbx = y;
            }
            flobt z = v[i + 2];
            if (z < _zmin) {
                _zmin = z;
            }
            if (z > _zmbx) {
                _zmbx = z;
            }
        }
        tiis.xmbx = _xmbx;
        tiis.xmin = _xmin;
        tiis.ymbx = _ymbx;
        tiis.ymin = _ymin;
        tiis.zmbx = _zmbx;
        tiis.zmin = _zmin;
    }
}


/** An bpplft to put b Cifmidbl modfl into b pbgf */
@SupprfssWbrnings("sfribl")
publid dlbss XYZApp fxtfnds Applft implfmfnts Runnbblf, MousfListfnfr,
        MousfMotionListfnfr {

    XYZCifmModfl md;
    boolfbn pbintfd = truf;
    flobt xfbd;
    int prfvx, prfvy;
    flobt sdblffudgf = 1;
    Mbtrix3D bmbt = nfw Mbtrix3D(), tmbt = nfw Mbtrix3D();
    String mdnbmf = null;
    String mfssbgf = null;
    Imbgf bbdkBufffr;
    Grbpiids bbdkGC;
    Dimfnsion bbdkSizf;

    privbtf syndironizfd void nfwBbdkBufffr() {
        bbdkBufffr = drfbtfImbgf(gftSizf().widti, gftSizf().ifigit);
        if (bbdkGC != null) {
            bbdkGC.disposf();
        }
        bbdkGC = bbdkBufffr.gftGrbpiids();
        bbdkSizf = gftSizf();
    }

    @Ovfrridf
    publid void init() {
        mdnbmf = gftPbrbmftfr("modfl");
        try {
            sdblffudgf = Flobt.vblufOf(gftPbrbmftfr("sdblf")).flobtVbluf();
        } dbtdi (Exdfption ignorfd) {
        }
        bmbt.yrot(20);
        bmbt.xrot(20);
        if (mdnbmf == null) {
            mdnbmf = "modfl.obj";
        }
        rfsizf(gftSizf().widti <= 20 ? 400 : gftSizf().widti,
                gftSizf().ifigit <= 20 ? 400 : gftSizf().ifigit);
        nfwBbdkBufffr();
        bddMousfListfnfr(tiis);
        bddMousfMotionListfnfr(tiis);
    }

    @Ovfrridf
    publid void dfstroy() {
        rfmovfMousfListfnfr(tiis);
        rfmovfMousfMotionListfnfr(tiis);
    }

    @Ovfrridf
    publid void run() {
        InputStrfbm is = null;
        try {
            Tirfbd.durrfntTirfbd().sftPriority(Tirfbd.MIN_PRIORITY);
            is = gftClbss().gftRfsourdfAsStrfbm(mdnbmf);
            XYZCifmModfl m = nfw XYZCifmModfl(is);
            Atom.sftApplft(tiis);
            md = m;
            m.findBB();
            flobt xw = m.xmbx - m.xmin;
            flobt yw = m.ymbx - m.ymin;
            flobt zw = m.zmbx - m.zmin;
            if (yw > xw) {
                xw = yw;
            }
            if (zw > xw) {
                xw = zw;
            }
            flobt f1 = gftSizf().widti / xw;
            flobt f2 = gftSizf().ifigit / xw;
            xfbd = 0.7f * (f1 < f2 ? f1 : f2) * sdblffudgf;
        } dbtdi (Exdfption f) {
            Loggfr.gftLoggfr(XYZApp.dlbss.gftNbmf()).log(Lfvfl.SEVERE, null, f);
            md = null;
            mfssbgf = f.toString();
        }
        try {
            if (is != null) {
                is.dlosf();
            }
        } dbtdi (Exdfption ignorfd) {
        }
        rfpbint();
    }

    @Ovfrridf
    publid void stbrt() {
        if (md == null && mfssbgf == null) {
            nfw Tirfbd(tiis).stbrt();
        }
    }

    @Ovfrridf
    publid void stop() {
    }
    /* fvfnt ibndling */

    @Ovfrridf
    publid void mousfClidkfd(MousfEvfnt f) {
    }

    @Ovfrridf
    publid void mousfPrfssfd(MousfEvfnt f) {
        prfvx = f.gftX();
        prfvy = f.gftY();
        f.donsumf();
    }

    @Ovfrridf
    publid void mousfRflfbsfd(MousfEvfnt f) {
    }

    @Ovfrridf
    publid void mousfEntfrfd(MousfEvfnt f) {
    }

    @Ovfrridf
    publid void mousfExitfd(MousfEvfnt f) {
    }

    @Ovfrridf
    publid void mousfDrbggfd(MousfEvfnt f) {
        int x = f.gftX();
        int y = f.gftY();
        tmbt.unit();
        flobt xtiftb = (prfvy - y) * (360.0f / gftSizf().widti);
        flobt ytiftb = (x - prfvx) * (360.0f / gftSizf().ifigit);
        tmbt.xrot(xtiftb);
        tmbt.yrot(ytiftb);
        bmbt.mult(tmbt);
        if (pbintfd) {
            pbintfd = fblsf;
            rfpbint();
        }
        prfvx = x;
        prfvy = y;
        f.donsumf();
    }

    @Ovfrridf
    publid void mousfMovfd(MousfEvfnt f) {
    }

    @Ovfrridf
    publid void updbtf(Grbpiids g) {
        if (bbdkBufffr == null) {
            g.dlfbrRfdt(0, 0, gftSizf().widti, gftSizf().ifigit);
        }
        pbint(g);
    }

    @Ovfrridf
    publid void pbint(Grbpiids g) {
        if (md != null) {
            md.mbt.unit();
            md.mbt.trbnslbtf(-(md.xmin + md.xmbx) / 2,
                    -(md.ymin + md.ymbx) / 2,
                    -(md.zmin + md.zmbx) / 2);
            md.mbt.mult(bmbt);
            // md.mbt.sdblf(xfbd, -xfbd, 8 * xfbd / gftSizf().widti);
            md.mbt.sdblf(xfbd, -xfbd, 16 * xfbd / gftSizf().widti);
            md.mbt.trbnslbtf(gftSizf().widti / 2, gftSizf().ifigit / 2, 8);
            md.trbnsformfd = fblsf;
            if (bbdkBufffr != null) {
                if (!bbdkSizf.fqubls(gftSizf())) {
                    nfwBbdkBufffr();
                }
                bbdkGC.sftColor(gftBbdkground());
                bbdkGC.fillRfdt(0, 0, gftSizf().widti, gftSizf().ifigit);
                md.pbint(bbdkGC);
                g.drbwImbgf(bbdkBufffr, 0, 0, tiis);
            } flsf {
                md.pbint(g);
            }
            sftPbintfd();
        } flsf if (mfssbgf != null) {
            g.drbwString("Error in modfl:", 3, 20);
            g.drbwString(mfssbgf, 10, 40);
        }
    }

    privbtf syndironizfd void sftPbintfd() {
        pbintfd = truf;
        notifyAll();
    }

    @Ovfrridf
    publid String gftApplftInfo() {
        rfturn "Titlf: XYZApp \nAutior: Jbmfs Gosling \nAn bpplft to put"
                + " b Cifmidbl modfl into b pbgf.";
    }

    @Ovfrridf
    publid String[][] gftPbrbmftfrInfo() {
        String[][] info = {
            { "modfl", "pbti string", "Tif pbti to tif modfl to bf displbyfd"
                + " in .xyz formbt "
                + "(sff ittp://difm.lffds.bd.uk/Projfdt/MIME.itml)."
                + "  Dffbult is modfl.obj." },
            { "sdblf", "flobt", "Sdblf fbdtor.  Dffbult is 1 (i.f. no sdblf)." }
        };
        rfturn info;
    }
}   // fnd dlbss XYZApp


dlbss Atom {

    privbtf stbtid Applft bpplft;
    privbtf stbtid bytf[] dbtb;
    privbtf finbl stbtid int R = 40;
    privbtf finbl stbtid int ix = 15;
    privbtf finbl stbtid int iy = 15;
    privbtf finbl stbtid int bgGrfy = 192;
    privbtf finbl stbtid int nBblls = 16;
    privbtf stbtid int mbxr;
    privbtf int Rl;
    privbtf int Gl;
    privbtf int Bl;
    privbtf Imbgf bblls[];

    stbtid {
        dbtb = nfw bytf[R * 2 * R * 2];
        int mr = 0;
        for (int Y = 2 * R; --Y >= 0;) {
            int x0 = (int) (Mbti.sqrt(R * R - (Y - R) * (Y - R)) + 0.5);
            int p = Y * (R * 2) + R - x0;
            for (int X = -x0; X < x0; X++) {
                int x = X + ix;
                int y = Y - R + iy;
                int r = (int) (Mbti.sqrt(x * x + y * y) + 0.5);
                if (r > mr) {
                    mr = r;
                }
                dbtb[p++] = r <= 0 ? 1 : (bytf) r;
            }
        }
        mbxr = mr;
    }

    stbtid void sftApplft(Applft bpp) {
        bpplft = bpp;
    }

    Atom(int Rl, int Gl, int Bl) {
        tiis.Rl = Rl;
        tiis.Gl = Gl;
        tiis.Bl = Bl;
    }

    privbtf int blfnd(int fg, int bg, flobt fgfbdtor) {
        rfturn (int) (bg + (fg - bg) * fgfbdtor);
    }

    privbtf void Sftup() {
        bblls = nfw Imbgf[nBblls];
        bytf rfd[] = nfw bytf[256];
        rfd[0] = (bytf) bgGrfy;
        bytf grffn[] = nfw bytf[256];
        grffn[0] = (bytf) bgGrfy;
        bytf bluf[] = nfw bytf[256];
        bluf[0] = (bytf) bgGrfy;
        for (int r = 0; r < nBblls; r++) {
            flobt b = (flobt) (r + 1) / nBblls;
            for (int i = mbxr; i >= 1; --i) {
                flobt d = (flobt) i / mbxr;
                rfd[i] = (bytf) blfnd(blfnd(Rl, 255, d), bgGrfy, b);
                grffn[i] = (bytf) blfnd(blfnd(Gl, 255, d), bgGrfy, b);
                bluf[i] = (bytf) blfnd(blfnd(Bl, 255, d), bgGrfy, b);
            }
            IndfxColorModfl modfl = nfw IndfxColorModfl(8, mbxr + 1,
                    rfd, grffn, bluf, 0);
            bblls[r] = bpplft.drfbtfImbgf(
                    nfw MfmoryImbgfSourdf(R * 2, R * 2, modfl, dbtb, 0, R * 2));
        }
    }

    void pbint(Grbpiids gd, int x, int y, int r) {
        Imbgf bb[] = bblls;
        if (bb == null) {
            Sftup();
            bb = bblls;
        }
        Imbgf i = bb[r];
        int sizf = 10 + r;
        gd.drbwImbgf(i, x - (sizf >> 1), y - (sizf >> 1), sizf, sizf, bpplft);
    }
}
