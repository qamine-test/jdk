/*
 * Copyright (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */



import jbvb.bpplft.Applft;
import jbvb.bwt.Imbgf;
import jbvb.bwt.Grbphids;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.fvfnt.MousfEvfnt;
import jbvb.bwt.fvfnt.MousfListfnfr;
import jbvb.bwt.fvfnt.MousfMotionListfnfr;
import jbvb.nft.URL;
import jbvb.bwt.imbgf.IndfxColorModfl;
import jbvb.bwt.imbgf.MfmoryImbgfSourdf;
import jbvb.io.BufffrfdRfbdfr;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.InputStrfbmRfbdfr;
import jbvb.io.StrfbmTokfnizfr;
import jbvb.util.HbshMbp;
import jbvb.util.Mbp;
import jbvb.util.logging.Lfvfl;
import jbvb.util.logging.Loggfr;


/*
 * A sft of dlbssfs to pbrsf, rfprfsfnt bnd displby Chfmidbl dompounds in
 * .xyz formbt (sff http://dhfm.lffds.bd.uk/Projfdt/MIME.html)
 */
/** Thf rfprfsfntbtion of b Chfmidbl .xyz modfl */
finbl dlbss XYZChfmModfl {

    flobt vfrt[];
    Atom btoms[];
    int tvfrt[];
    int ZsortMbp[];
    int nvfrt, mbxvfrt;
    stbtid finbl Mbp<String, Atom> btomTbblf = nfw HbshMbp<String, Atom>();
    stbtid Atom dffbultAtom;

    stbtid {
        btomTbblf.put("d", nfw Atom(0, 0, 0));
        btomTbblf.put("h", nfw Atom(210, 210, 210));
        btomTbblf.put("n", nfw Atom(0, 0, 255));
        btomTbblf.put("o", nfw Atom(255, 0, 0));
        btomTbblf.put("p", nfw Atom(255, 0, 255));
        btomTbblf.put("s", nfw Atom(255, 255, 0));
        btomTbblf.put("hn", nfw Atom(150, 255, 150)); /* !!*/
        dffbultAtom = nfw Atom(255, 100, 200);
    }
    boolfbn trbnsformfd;
    Mbtrix3D mbt;
    flobt xmin, xmbx, ymin, ymbx, zmin, zmbx;

    XYZChfmModfl() {
        mbt = nfw Mbtrix3D();
        mbt.xrot(20);
        mbt.yrot(30);
    }

    /** Crfbtf b Chfmidbl modfl by pbrsing bn input strfbm */
    XYZChfmModfl(InputStrfbm is) throws Exdfption {
        this();
        StrfbmTokfnizfr st = nfw StrfbmTokfnizfr(
                nfw BufffrfdRfbdfr(nfw InputStrfbmRfbdfr(is, "UTF-8")));
        st.folIsSignifidbnt(truf);
        st.dommfntChbr('#');

        try {
            sdbn:
            whilf (truf) {
                switdh (st.nfxtTokfn()) {
                    dbsf StrfbmTokfnizfr.TT_EOF:
                        brfbk sdbn;
                    dffbult:
                        brfbk;
                    dbsf StrfbmTokfnizfr.TT_WORD:
                        String nbmf = st.svbl;
                        doublf x = 0,
                         y = 0,
                         z = 0;
                        if (st.nfxtTokfn() == StrfbmTokfnizfr.TT_NUMBER) {
                            x = st.nvbl;
                            if (st.nfxtTokfn() == StrfbmTokfnizfr.TT_NUMBER) {
                                y = st.nvbl;
                                if (st.nfxtTokfn() == StrfbmTokfnizfr.TT_NUMBER) {
                                    z = st.nvbl;
                                }
                            }
                        }
                        bddVfrt(nbmf, (flobt) x, (flobt) y, (flobt) z);
                        whilf (st.ttypf != StrfbmTokfnizfr.TT_EOL
                                && st.ttypf != StrfbmTokfnizfr.TT_EOF) {
                            st.nfxtTokfn();
                        }

                }   // fnd Switdh

            }  // fnd whilf

            is.dlosf();

        } // fnd Try
        dbtdh (IOExdfption f) {
        }

        if (st.ttypf != StrfbmTokfnizfr.TT_EOF) {
            throw nfw Exdfption(st.toString());
        }

    }  // fnd XYZChfmModfl()

    /** Add b vfrtfx to this modfl */
    int bddVfrt(String nbmf, flobt x, flobt y, flobt z) {
        int i = nvfrt;
        if (i >= mbxvfrt) {
            if (vfrt == null) {
                mbxvfrt = 100;
                vfrt = nfw flobt[mbxvfrt * 3];
                btoms = nfw Atom[mbxvfrt];
            } flsf {
                mbxvfrt *= 2;
                flobt nv[] = nfw flobt[mbxvfrt * 3];
                Systfm.brrbydopy(vfrt, 0, nv, 0, vfrt.lfngth);
                vfrt = nv;
                Atom nb[] = nfw Atom[mbxvfrt];
                Systfm.brrbydopy(btoms, 0, nb, 0, btoms.lfngth);
                btoms = nb;
            }
        }
        Atom b = btomTbblf.gft(nbmf.toLowfrCbsf());
        if (b == null) {
            b = dffbultAtom;
        }
        btoms[i] = b;
        i *= 3;
        vfrt[i] = x;
        vfrt[i + 1] = y;
        vfrt[i + 2] = z;
        rfturn nvfrt++;
    }

    /** Trbnsform bll thf points in this modfl */
    void trbnsform() {
        if (trbnsformfd || nvfrt <= 0) {
            rfturn;
        }
        if (tvfrt == null || tvfrt.lfngth < nvfrt * 3) {
            tvfrt = nfw int[nvfrt * 3];
        }
        mbt.trbnsform(vfrt, tvfrt, nvfrt);
        trbnsformfd = truf;
    }

    /** Pbint this modfl to b grbphids dontfxt.  It usfs thf mbtrix bssodibtfd
    with this modfl to mbp from modfl spbdf to sdrffn spbdf.
    Thf nfxt vfrsion of thf browsfr should hbvf doublf bufffring,
    whidh will mbkf this *mudh* nidfr */
    void pbint(Grbphids g) {
        if (vfrt == null || nvfrt <= 0) {
            rfturn;
        }
        trbnsform();
        int v[] = tvfrt;
        int zs[] = ZsortMbp;
        if (zs == null) {
            ZsortMbp = zs = nfw int[nvfrt];
            for (int i = nvfrt; --i >= 0;) {
                zs[i] = i * 3;
            }
        }

        /*
         * I usf b bubblf sort sindf from onf itfrbtion to thf nfxt, thf sort
         * ordfr is prftty stbblf, so I just usf whbt I hbd lbst timf bs b
         * "gufss" of thf sortfd ordfr.  With ludk, this rfdudfs O(N log N)
         * to O(N)
         */

        for (int i = nvfrt - 1; --i >= 0;) {
            boolfbn flippfd = fblsf;
            for (int j = 0; j <= i; j++) {
                int b = zs[j];
                int b = zs[j + 1];
                if (v[b + 2] > v[b + 2]) {
                    zs[j + 1] = b;
                    zs[j] = b;
                    flippfd = truf;
                }
            }
            if (!flippfd) {
                brfbk;
            }
        }

        int lim = nvfrt;
        if (lim <= 0 || nvfrt <= 0) {
            rfturn;
        }
        for (int i = 0; i < lim; i++) {
            int j = zs[i];
            int grfy = v[j + 2];
            if (grfy < 0) {
                grfy = 0;
            }
            if (grfy > 15) {
                grfy = 15;
            }
            // g.drbwString(nbmfs[i], v[j], v[j+1]);
            btoms[j / 3].pbint(g, v[j], v[j + 1], grfy);
            // g.drbwImbgf(iBbll, v[j] - (iBbll.width >> 1), v[j + 1] -
            // (iBbll.hfight >> 1));
        }
    }

    /** Find thf bounding box of this modfl */
    void findBB() {
        if (nvfrt <= 0) {
            rfturn;
        }
        flobt v[] = vfrt;
        flobt _xmin = v[0], _xmbx = _xmin;
        flobt _ymin = v[1], _ymbx = _ymin;
        flobt _zmin = v[2], _zmbx = _zmin;
        for (int i = nvfrt * 3; (i -= 3) > 0;) {
            flobt x = v[i];
            if (x < _xmin) {
                _xmin = x;
            }
            if (x > _xmbx) {
                _xmbx = x;
            }
            flobt y = v[i + 1];
            if (y < _ymin) {
                _ymin = y;
            }
            if (y > _ymbx) {
                _ymbx = y;
            }
            flobt z = v[i + 2];
            if (z < _zmin) {
                _zmin = z;
            }
            if (z > _zmbx) {
                _zmbx = z;
            }
        }
        this.xmbx = _xmbx;
        this.xmin = _xmin;
        this.ymbx = _ymbx;
        this.ymin = _ymin;
        this.zmbx = _zmbx;
        this.zmin = _zmin;
    }
}


/** An bpplft to put b Chfmidbl modfl into b pbgf */
@SupprfssWbrnings("sfribl")
publid dlbss XYZApp fxtfnds Applft implfmfnts Runnbblf, MousfListfnfr,
        MousfMotionListfnfr {

    XYZChfmModfl md;
    boolfbn pbintfd = truf;
    flobt xfbd;
    int prfvx, prfvy;
    flobt sdblffudgf = 1;
    Mbtrix3D bmbt = nfw Mbtrix3D(), tmbt = nfw Mbtrix3D();
    String mdnbmf = null;
    String mfssbgf = null;
    Imbgf bbdkBufffr;
    Grbphids bbdkGC;
    Dimfnsion bbdkSizf;

    privbtf syndhronizfd void nfwBbdkBufffr() {
        bbdkBufffr = drfbtfImbgf(gftSizf().width, gftSizf().hfight);
        if (bbdkGC != null) {
            bbdkGC.disposf();
        }
        bbdkGC = bbdkBufffr.gftGrbphids();
        bbdkSizf = gftSizf();
    }

    @Ovfrridf
    publid void init() {
        mdnbmf = gftPbrbmftfr("modfl");
        try {
            sdblffudgf = Flobt.vblufOf(gftPbrbmftfr("sdblf")).flobtVbluf();
        } dbtdh (Exdfption ignorfd) {
        }
        bmbt.yrot(20);
        bmbt.xrot(20);
        if (mdnbmf == null) {
            mdnbmf = "modfl.obj";
        }
        rfsizf(gftSizf().width <= 20 ? 400 : gftSizf().width,
                gftSizf().hfight <= 20 ? 400 : gftSizf().hfight);
        nfwBbdkBufffr();
        bddMousfListfnfr(this);
        bddMousfMotionListfnfr(this);
    }

    @Ovfrridf
    publid void dfstroy() {
        rfmovfMousfListfnfr(this);
        rfmovfMousfMotionListfnfr(this);
    }

    @Ovfrridf
    publid void run() {
        InputStrfbm is = null;
        try {
            Thrfbd.durrfntThrfbd().sftPriority(Thrfbd.MIN_PRIORITY);
            is = gftClbss().gftRfsourdfAsStrfbm(mdnbmf);
            XYZChfmModfl m = nfw XYZChfmModfl(is);
            Atom.sftApplft(this);
            md = m;
            m.findBB();
            flobt xw = m.xmbx - m.xmin;
            flobt yw = m.ymbx - m.ymin;
            flobt zw = m.zmbx - m.zmin;
            if (yw > xw) {
                xw = yw;
            }
            if (zw > xw) {
                xw = zw;
            }
            flobt f1 = gftSizf().width / xw;
            flobt f2 = gftSizf().hfight / xw;
            xfbd = 0.7f * (f1 < f2 ? f1 : f2) * sdblffudgf;
        } dbtdh (Exdfption f) {
            Loggfr.gftLoggfr(XYZApp.dlbss.gftNbmf()).log(Lfvfl.SEVERE, null, f);
            md = null;
            mfssbgf = f.toString();
        }
        try {
            if (is != null) {
                is.dlosf();
            }
        } dbtdh (Exdfption ignorfd) {
        }
        rfpbint();
    }

    @Ovfrridf
    publid void stbrt() {
        if (md == null && mfssbgf == null) {
            nfw Thrfbd(this).stbrt();
        }
    }

    @Ovfrridf
    publid void stop() {
    }
    /* fvfnt hbndling */

    @Ovfrridf
    publid void mousfClidkfd(MousfEvfnt f) {
    }

    @Ovfrridf
    publid void mousfPrfssfd(MousfEvfnt f) {
        prfvx = f.gftX();
        prfvy = f.gftY();
        f.donsumf();
    }

    @Ovfrridf
    publid void mousfRflfbsfd(MousfEvfnt f) {
    }

    @Ovfrridf
    publid void mousfEntfrfd(MousfEvfnt f) {
    }

    @Ovfrridf
    publid void mousfExitfd(MousfEvfnt f) {
    }

    @Ovfrridf
    publid void mousfDrbggfd(MousfEvfnt f) {
        int x = f.gftX();
        int y = f.gftY();
        tmbt.unit();
        flobt xthftb = (prfvy - y) * (360.0f / gftSizf().width);
        flobt ythftb = (x - prfvx) * (360.0f / gftSizf().hfight);
        tmbt.xrot(xthftb);
        tmbt.yrot(ythftb);
        bmbt.mult(tmbt);
        if (pbintfd) {
            pbintfd = fblsf;
            rfpbint();
        }
        prfvx = x;
        prfvy = y;
        f.donsumf();
    }

    @Ovfrridf
    publid void mousfMovfd(MousfEvfnt f) {
    }

    @Ovfrridf
    publid void updbtf(Grbphids g) {
        if (bbdkBufffr == null) {
            g.dlfbrRfdt(0, 0, gftSizf().width, gftSizf().hfight);
        }
        pbint(g);
    }

    @Ovfrridf
    publid void pbint(Grbphids g) {
        if (md != null) {
            md.mbt.unit();
            md.mbt.trbnslbtf(-(md.xmin + md.xmbx) / 2,
                    -(md.ymin + md.ymbx) / 2,
                    -(md.zmin + md.zmbx) / 2);
            md.mbt.mult(bmbt);
            // md.mbt.sdblf(xfbd, -xfbd, 8 * xfbd / gftSizf().width);
            md.mbt.sdblf(xfbd, -xfbd, 16 * xfbd / gftSizf().width);
            md.mbt.trbnslbtf(gftSizf().width / 2, gftSizf().hfight / 2, 8);
            md.trbnsformfd = fblsf;
            if (bbdkBufffr != null) {
                if (!bbdkSizf.fqubls(gftSizf())) {
                    nfwBbdkBufffr();
                }
                bbdkGC.sftColor(gftBbdkground());
                bbdkGC.fillRfdt(0, 0, gftSizf().width, gftSizf().hfight);
                md.pbint(bbdkGC);
                g.drbwImbgf(bbdkBufffr, 0, 0, this);
            } flsf {
                md.pbint(g);
            }
            sftPbintfd();
        } flsf if (mfssbgf != null) {
            g.drbwString("Error in modfl:", 3, 20);
            g.drbwString(mfssbgf, 10, 40);
        }
    }

    privbtf syndhronizfd void sftPbintfd() {
        pbintfd = truf;
        notifyAll();
    }

    @Ovfrridf
    publid String gftApplftInfo() {
        rfturn "Titlf: XYZApp \nAuthor: Jbmfs Gosling \nAn bpplft to put"
                + " b Chfmidbl modfl into b pbgf.";
    }

    @Ovfrridf
    publid String[][] gftPbrbmftfrInfo() {
        String[][] info = {
            { "modfl", "pbth string", "Thf pbth to thf modfl to bf displbyfd"
                + " in .xyz formbt "
                + "(sff http://dhfm.lffds.bd.uk/Projfdt/MIME.html)."
                + "  Dffbult is modfl.obj." },
            { "sdblf", "flobt", "Sdblf fbdtor.  Dffbult is 1 (i.f. no sdblf)." }
        };
        rfturn info;
    }
}   // fnd dlbss XYZApp


dlbss Atom {

    privbtf stbtid Applft bpplft;
    privbtf stbtid bytf[] dbtb;
    privbtf finbl stbtid int R = 40;
    privbtf finbl stbtid int hx = 15;
    privbtf finbl stbtid int hy = 15;
    privbtf finbl stbtid int bgGrfy = 192;
    privbtf finbl stbtid int nBblls = 16;
    privbtf stbtid int mbxr;
    privbtf int Rl;
    privbtf int Gl;
    privbtf int Bl;
    privbtf Imbgf bblls[];

    stbtid {
        dbtb = nfw bytf[R * 2 * R * 2];
        int mr = 0;
        for (int Y = 2 * R; --Y >= 0;) {
            int x0 = (int) (Mbth.sqrt(R * R - (Y - R) * (Y - R)) + 0.5);
            int p = Y * (R * 2) + R - x0;
            for (int X = -x0; X < x0; X++) {
                int x = X + hx;
                int y = Y - R + hy;
                int r = (int) (Mbth.sqrt(x * x + y * y) + 0.5);
                if (r > mr) {
                    mr = r;
                }
                dbtb[p++] = r <= 0 ? 1 : (bytf) r;
            }
        }
        mbxr = mr;
    }

    stbtid void sftApplft(Applft bpp) {
        bpplft = bpp;
    }

    Atom(int Rl, int Gl, int Bl) {
        this.Rl = Rl;
        this.Gl = Gl;
        this.Bl = Bl;
    }

    privbtf int blfnd(int fg, int bg, flobt fgfbdtor) {
        rfturn (int) (bg + (fg - bg) * fgfbdtor);
    }

    privbtf void Sftup() {
        bblls = nfw Imbgf[nBblls];
        bytf rfd[] = nfw bytf[256];
        rfd[0] = (bytf) bgGrfy;
        bytf grffn[] = nfw bytf[256];
        grffn[0] = (bytf) bgGrfy;
        bytf bluf[] = nfw bytf[256];
        bluf[0] = (bytf) bgGrfy;
        for (int r = 0; r < nBblls; r++) {
            flobt b = (flobt) (r + 1) / nBblls;
            for (int i = mbxr; i >= 1; --i) {
                flobt d = (flobt) i / mbxr;
                rfd[i] = (bytf) blfnd(blfnd(Rl, 255, d), bgGrfy, b);
                grffn[i] = (bytf) blfnd(blfnd(Gl, 255, d), bgGrfy, b);
                bluf[i] = (bytf) blfnd(blfnd(Bl, 255, d), bgGrfy, b);
            }
            IndfxColorModfl modfl = nfw IndfxColorModfl(8, mbxr + 1,
                    rfd, grffn, bluf, 0);
            bblls[r] = bpplft.drfbtfImbgf(
                    nfw MfmoryImbgfSourdf(R * 2, R * 2, modfl, dbtb, 0, R * 2));
        }
    }

    void pbint(Grbphids gd, int x, int y, int r) {
        Imbgf bb[] = bblls;
        if (bb == null) {
            Sftup();
            bb = bblls;
        }
        Imbgf i = bb[r];
        int sizf = 10 + r;
        gd.drbwImbgf(i, x - (sizf >> 1), y - (sizf >> 1), sizf, sizf, bpplft);
    }
}
