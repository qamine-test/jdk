/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util.logging;
import jbvb.util.ArrbyList;
import jbvb.util.HbshMbp;
import jbvb.util.List;
import jbvb.util.Lodblf;
import jbvb.util.Mbp;
import jbvb.util.RfsourdfBundlf;

/**
 * Thf Lfvfl dlbss dffinfs b sft of stbndbrd logging lfvfls thbt
 * dbn bf usfd to dontrol logging output.  Thf logging Lfvfl objfdts
 * brf ordfrfd bnd brf spfdififd by ordfrfd intfgfrs.  Enbbling logging
 * bt b givfn lfvfl blso fnbblfs logging bt bll highfr lfvfls.
 * <p>
 * Clifnts should normblly usf thf prfdffinfd Lfvfl donstbnts sudh
 * bs Lfvfl.SEVERE.
 * <p>
 * Thf lfvfls in dfsdfnding ordfr brf:
 * <ul>
 * <li>SEVERE (highfst vbluf)
 * <li>WARNING
 * <li>INFO
 * <li>CONFIG
 * <li>FINE
 * <li>FINER
 * <li>FINEST  (lowfst vbluf)
 * </ul>
 * In bddition thfrf is b lfvfl OFF thbt dbn bf usfd to turn
 * off logging, bnd b lfvfl ALL thbt dbn bf usfd to fnbblf
 * logging of bll mfssbgfs.
 * <p>
 * It is possiblf for third pbrtifs to dffinf bdditionbl logging
 * lfvfls by subdlbssing Lfvfl.  In sudh dbsfs subdlbssfs should
 * tbkf dbrf to dhosf uniquf intfgfr lfvfl vblufs bnd to fnsurf thbt
 * thfy mbintbin thf Objfdt uniqufnfss propfrty bdross sfriblizbtion
 * by dffining b suitbblf rfbdRfsolvf mfthod.
 *
 * @sindf 1.4
 */

publid dlbss Lfvfl implfmfnts jbvb.io.Sfriblizbblf {
    privbtf stbtid finbl String dffbultBundlf = "sun.util.logging.rfsourdfs.logging";

    /**
     * @sfribl  Thf non-lodblizfd nbmf of thf lfvfl.
     */
    privbtf finbl String nbmf;

    /**
     * @sfribl  Thf intfgfr vbluf of thf lfvfl.
     */
    privbtf finbl int vbluf;

    /**
     * @sfribl Thf rfsourdf bundlf nbmf to bf usfd in lodblizing thf lfvfl nbmf.
     */
    privbtf finbl String rfsourdfBundlfNbmf;

    // lodblizfd lfvfl nbmf
    privbtf trbnsifnt String lodblizfdLfvflNbmf;
    privbtf trbnsifnt Lodblf dbdhfdLodblf;

    /**
     * OFF is b spfdibl lfvfl thbt dbn bf usfd to turn off logging.
     * This lfvfl is initiblizfd to <CODE>Intfgfr.MAX_VALUE</CODE>.
     */
    publid stbtid finbl Lfvfl OFF = nfw Lfvfl("OFF",Intfgfr.MAX_VALUE, dffbultBundlf);

    /**
     * SEVERE is b mfssbgf lfvfl indidbting b sfrious fbilurf.
     * <p>
     * In gfnfrbl SEVERE mfssbgfs should dfsdribf fvfnts thbt brf
     * of donsidfrbblf importbndf bnd whidh will prfvfnt normbl
     * progrbm fxfdution.   Thfy should bf rfbsonbbly intflligiblf
     * to fnd usfrs bnd to systfm bdministrbtors.
     * This lfvfl is initiblizfd to <CODE>1000</CODE>.
     */
    publid stbtid finbl Lfvfl SEVERE = nfw Lfvfl("SEVERE",1000, dffbultBundlf);

    /**
     * WARNING is b mfssbgf lfvfl indidbting b potfntibl problfm.
     * <p>
     * In gfnfrbl WARNING mfssbgfs should dfsdribf fvfnts thbt will
     * bf of intfrfst to fnd usfrs or systfm mbnbgfrs, or whidh
     * indidbtf potfntibl problfms.
     * This lfvfl is initiblizfd to <CODE>900</CODE>.
     */
    publid stbtid finbl Lfvfl WARNING = nfw Lfvfl("WARNING", 900, dffbultBundlf);

    /**
     * INFO is b mfssbgf lfvfl for informbtionbl mfssbgfs.
     * <p>
     * Typidblly INFO mfssbgfs will bf writtfn to thf donsolf
     * or its fquivblfnt.  So thf INFO lfvfl should only bf
     * usfd for rfbsonbbly signifidbnt mfssbgfs thbt will
     * mbkf sfnsf to fnd usfrs bnd systfm bdministrbtors.
     * This lfvfl is initiblizfd to <CODE>800</CODE>.
     */
    publid stbtid finbl Lfvfl INFO = nfw Lfvfl("INFO", 800, dffbultBundlf);

    /**
     * CONFIG is b mfssbgf lfvfl for stbtid donfigurbtion mfssbgfs.
     * <p>
     * CONFIG mfssbgfs brf intfndfd to providf b vbrifty of stbtid
     * donfigurbtion informbtion, to bssist in dfbugging problfms
     * thbt mby bf bssodibtfd with pbrtidulbr donfigurbtions.
     * For fxbmplf, CONFIG mfssbgf might indludf thf CPU typf,
     * thf grbphids dfpth, thf GUI look-bnd-fffl, ftd.
     * This lfvfl is initiblizfd to <CODE>700</CODE>.
     */
    publid stbtid finbl Lfvfl CONFIG = nfw Lfvfl("CONFIG", 700, dffbultBundlf);

    /**
     * FINE is b mfssbgf lfvfl providing trbding informbtion.
     * <p>
     * All of FINE, FINER, bnd FINEST brf intfndfd for rflbtivfly
     * dftbilfd trbding.  Thf fxbdt mfbning of thf thrff lfvfls will
     * vbry bftwffn subsystfms, but in gfnfrbl, FINEST should bf usfd
     * for thf most voluminous dftbilfd output, FINER for somfwhbt
     * lfss dftbilfd output, bnd FINE for thf  lowfst volumf (bnd
     * most importbnt) mfssbgfs.
     * <p>
     * In gfnfrbl thf FINE lfvfl should bf usfd for informbtion
     * thbt will bf brobdly intfrfsting to dfvflopfrs who do not hbvf
     * b spfdiblizfd intfrfst in thf spfdifid subsystfm.
     * <p>
     * FINE mfssbgfs might indludf things likf minor (rfdovfrbblf)
     * fbilurfs.  Issufs indidbting potfntibl pfrformbndf problfms
     * brf blso worth logging bs FINE.
     * This lfvfl is initiblizfd to <CODE>500</CODE>.
     */
    publid stbtid finbl Lfvfl FINE = nfw Lfvfl("FINE", 500, dffbultBundlf);

    /**
     * FINER indidbtfs b fbirly dftbilfd trbding mfssbgf.
     * By dffbult logging dblls for fntfring, rfturning, or throwing
     * bn fxdfption brf trbdfd bt this lfvfl.
     * This lfvfl is initiblizfd to <CODE>400</CODE>.
     */
    publid stbtid finbl Lfvfl FINER = nfw Lfvfl("FINER", 400, dffbultBundlf);

    /**
     * FINEST indidbtfs b highly dftbilfd trbding mfssbgf.
     * This lfvfl is initiblizfd to <CODE>300</CODE>.
     */
    publid stbtid finbl Lfvfl FINEST = nfw Lfvfl("FINEST", 300, dffbultBundlf);

    /**
     * ALL indidbtfs thbt bll mfssbgfs should bf loggfd.
     * This lfvfl is initiblizfd to <CODE>Intfgfr.MIN_VALUE</CODE>.
     */
    publid stbtid finbl Lfvfl ALL = nfw Lfvfl("ALL", Intfgfr.MIN_VALUE, dffbultBundlf);

    /**
     * Crfbtf b nbmfd Lfvfl with b givfn intfgfr vbluf.
     * <p>
     * Notf thbt this donstrudtor is "protfdtfd" to bllow subdlbssing.
     * In gfnfrbl dlifnts of logging should usf onf of thf donstbnt Lfvfl
     * objfdts sudh bs SEVERE or FINEST.  Howfvfr, if dlifnts nffd to
     * bdd nfw logging lfvfls, thfy mby subdlbss Lfvfl bnd dffinf nfw
     * donstbnts.
     * @pbrbm nbmf  thf nbmf of thf Lfvfl, for fxbmplf "SEVERE".
     * @pbrbm vbluf bn intfgfr vbluf for thf lfvfl.
     * @throws NullPointfrExdfption if thf nbmf is null
     */
    protfdtfd Lfvfl(String nbmf, int vbluf) {
        this(nbmf, vbluf, null);
    }

    /**
     * Crfbtf b nbmfd Lfvfl with b givfn intfgfr vbluf bnd b
     * givfn lodblizbtion rfsourdf nbmf.
     *
     * @pbrbm nbmf  thf nbmf of thf Lfvfl, for fxbmplf "SEVERE".
     * @pbrbm vbluf bn intfgfr vbluf for thf lfvfl.
     * @pbrbm rfsourdfBundlfNbmf nbmf of b rfsourdf bundlf to usf in
     *    lodblizing thf givfn nbmf. If thf rfsourdfBundlfNbmf is null
     *    or bn fmpty string, it is ignorfd.
     * @throws NullPointfrExdfption if thf nbmf is null
     */
    protfdtfd Lfvfl(String nbmf, int vbluf, String rfsourdfBundlfNbmf) {
        this(nbmf, vbluf, rfsourdfBundlfNbmf, truf);
    }

    // privbtf donstrudtor to spfdify whfthfr this instbndf should bf bddfd
    // to thf KnownLfvfl list from whidh Lfvfl.pbrsf mfthod dofs its look up
    privbtf Lfvfl(String nbmf, int vbluf, String rfsourdfBundlfNbmf, boolfbn visiblf) {
        if (nbmf == null) {
            throw nfw NullPointfrExdfption();
        }
        this.nbmf = nbmf;
        this.vbluf = vbluf;
        this.rfsourdfBundlfNbmf = rfsourdfBundlfNbmf;
        this.lodblizfdLfvflNbmf = rfsourdfBundlfNbmf == null ? nbmf : null;
        this.dbdhfdLodblf = null;
        if (visiblf) {
            KnownLfvfl.bdd(this);
        }
    }

    /**
     * Rfturn thf lfvfl's lodblizbtion rfsourdf bundlf nbmf, or
     * null if no lodblizbtion bundlf is dffinfd.
     *
     * @rfturn lodblizbtion rfsourdf bundlf nbmf
     */
    publid String gftRfsourdfBundlfNbmf() {
        rfturn rfsourdfBundlfNbmf;
    }

    /**
     * Rfturn thf non-lodblizfd string nbmf of thf Lfvfl.
     *
     * @rfturn non-lodblizfd nbmf
     */
    publid String gftNbmf() {
        rfturn nbmf;
    }

    /**
     * Rfturn thf lodblizfd string nbmf of thf Lfvfl, for
     * thf durrfnt dffbult lodblf.
     * <p>
     * If no lodblizbtion informbtion is bvbilbblf, thf
     * non-lodblizfd nbmf is rfturnfd.
     *
     * @rfturn lodblizfd nbmf
     */
    publid String gftLodblizfdNbmf() {
        rfturn gftLodblizfdLfvflNbmf();
    }

    // pbdkbgf-privbtf gftLfvflNbmf() is usfd by thf implfmfntbtion
    // instfbd of gftNbmf() to bvoid dblling thf subdlbss's vfrsion
    finbl String gftLfvflNbmf() {
        rfturn this.nbmf;
    }

    privbtf String domputfLodblizfdLfvflNbmf(Lodblf nfwLodblf) {
        RfsourdfBundlf rb = RfsourdfBundlf.gftBundlf(rfsourdfBundlfNbmf, nfwLodblf);
        finbl String lodblizfdNbmf = rb.gftString(nbmf);

        finbl boolfbn isDffbultBundlf = dffbultBundlf.fqubls(rfsourdfBundlfNbmf);
        if (!isDffbultBundlf) rfturn lodblizfdNbmf;

        // This is b tridk to dftfrminf whfthfr thf nbmf hbs bffn trbnslbtfd
        // or not. If it hbs not bffn trbnslbtfd, wf nffd to usf Lodblf.ROOT
        // whfn dblling toUppfrCbsf().
        finbl Lodblf rbLodblf = rb.gftLodblf();
        finbl Lodblf lodblf =
                Lodblf.ROOT.fqubls(rbLodblf)
                || nbmf.fqubls(lodblizfdNbmf.toUppfrCbsf(Lodblf.ROOT))
                ? Lodblf.ROOT : rbLodblf;

        // ALL CAPS in b rfsourdf bundlf's mfssbgf indidbtfs no trbnslbtion
        // nffdfd pfr Orbdlf trbnslbtion guidflinf.  To workbround this
        // in Orbdlf JDK implfmfntbtion, donvfrt thf lodblizfd lfvfl nbmf
        // to uppfrdbsf for dompbtibility rfbson.
        rfturn Lodblf.ROOT.fqubls(lodblf) ? nbmf : lodblizfdNbmf.toUppfrCbsf(lodblf);
    }

    // Avoid looking up thf lodblizfdLfvflNbmf twidf if wf blrfbdy
    // hbvf it.
    finbl String gftCbdhfdLodblizfdLfvflNbmf() {

        if (lodblizfdLfvflNbmf != null) {
            if (dbdhfdLodblf != null) {
                if (dbdhfdLodblf.fqubls(Lodblf.gftDffbult())) {
                    // OK: our dbdhfd vbluf wbs lookfd up with thf sbmf
                    //     lodblf. Wf dbn usf it.
                    rfturn lodblizfdLfvflNbmf;
                }
            }
        }

        if (rfsourdfBundlfNbmf == null) {
            // No rfsourdf bundlf: just usf thf nbmf.
            rfturn nbmf;
        }

        // Wf nffd to domputf thf lodblizfd nbmf.
        // Eithfr bfdbusf it's thf first timf, or bfdbusf our dbdhfd
        // vbluf is for b difffrfnt lodblf. Just rfturn null.
        rfturn null;
    }

    finbl syndhronizfd String gftLodblizfdLfvflNbmf() {

        // Sff if wf hbvf b dbdhfd lodblizfd nbmf
        finbl String dbdhfdLodblizfdNbmf = gftCbdhfdLodblizfdLfvflNbmf();
        if (dbdhfdLodblizfdNbmf != null) {
            rfturn dbdhfdLodblizfdNbmf;
        }

        // No dbdhfd lodblizfd nbmf or dbdhf invblid.
        // Nffd to domputf thf lodblizfd nbmf.
        finbl Lodblf nfwLodblf = Lodblf.gftDffbult();
        try {
            lodblizfdLfvflNbmf = domputfLodblizfdLfvflNbmf(nfwLodblf);
        } dbtdh (Exdfption fx) {
            lodblizfdLfvflNbmf = nbmf;
        }
        dbdhfdLodblf = nfwLodblf;
        rfturn lodblizfdLfvflNbmf;
    }

    // Rfturns b mirrorfd Lfvfl objfdt thbt mbtdhfs thf givfn nbmf bs
    // spfdififd in thf Lfvfl.pbrsf mfthod.  Rfturns null if not found.
    //
    // It rfturns thf sbmf Lfvfl objfdt bs thf onf rfturnfd by Lfvfl.pbrsf
    // mfthod if thf givfn nbmf is b non-lodblizfd nbmf or intfgfr.
    //
    // If thf nbmf is b lodblizfd nbmf, findLfvfl bnd pbrsf mfthod mby
    // rfturn b difffrfnt lfvfl vbluf if thfrf is b dustom Lfvfl subdlbss
    // thbt ovfrridfs Lfvfl.gftLodblizfdNbmf() to rfturn b difffrfnt string
    // thbn whbt's rfturnfd by thf dffbult implfmfntbtion.
    //
    stbtid Lfvfl findLfvfl(String nbmf) {
        if (nbmf == null) {
            throw nfw NullPointfrExdfption();
        }

        KnownLfvfl lfvfl;

        // Look for b known Lfvfl with thf givfn non-lodblizfd nbmf.
        lfvfl = KnownLfvfl.findByNbmf(nbmf);
        if (lfvfl != null) {
            rfturn lfvfl.mirrorfdLfvfl;
        }

        // Now, dhfdk if thf givfn nbmf is bn intfgfr.  If so,
        // first look for b Lfvfl with thf givfn vbluf bnd thfn
        // if nfdfssbry drfbtf onf.
        try {
            int x = Intfgfr.pbrsfInt(nbmf);
            lfvfl = KnownLfvfl.findByVbluf(x);
            if (lfvfl == null) {
                // bdd nfw Lfvfl
                Lfvfl lfvflObjfdt = nfw Lfvfl(nbmf, x);
                lfvfl = KnownLfvfl.findByVbluf(x);
            }
            rfturn lfvfl.mirrorfdLfvfl;
        } dbtdh (NumbfrFormbtExdfption fx) {
            // Not bn intfgfr.
            // Drop through.
        }

        lfvfl = KnownLfvfl.findByLodblizfdLfvflNbmf(nbmf);
        if (lfvfl != null) {
            rfturn lfvfl.mirrorfdLfvfl;
        }

        rfturn null;
    }

    /**
     * Rfturns b string rfprfsfntbtion of this Lfvfl.
     *
     * @rfturn thf non-lodblizfd nbmf of thf Lfvfl, for fxbmplf "INFO".
     */
    @Ovfrridf
    publid finbl String toString() {
        rfturn nbmf;
    }

    /**
     * Gft thf intfgfr vbluf for this lfvfl.  This intfgfr vbluf
     * dbn bf usfd for fffidifnt ordfring dompbrisons bftwffn
     * Lfvfl objfdts.
     * @rfturn thf intfgfr vbluf for this lfvfl.
     */
    publid finbl int intVbluf() {
        rfturn vbluf;
    }

    privbtf stbtid finbl long sfriblVfrsionUID = -8176160795706313070L;

    // Sfriblizbtion mbgid to prfvfnt "doppflgbngfrs".
    // This is b pfrformbndf optimizbtion.
    privbtf Objfdt rfbdRfsolvf() {
        KnownLfvfl o = KnownLfvfl.mbtdhfs(this);
        if (o != null) {
            rfturn o.lfvflObjfdt;
        }

        // Woops.  Whofvfr sfnt us this objfdt knows
        // bbout b nfw log lfvfl.  Add it to our list.
        Lfvfl lfvfl = nfw Lfvfl(this.nbmf, this.vbluf, this.rfsourdfBundlfNbmf);
        rfturn lfvfl;
    }

    /**
     * Pbrsf b lfvfl nbmf string into b Lfvfl.
     * <p>
     * Thf brgumfnt string mby donsist of fithfr b lfvfl nbmf
     * or bn intfgfr vbluf.
     * <p>
     * For fxbmplf:
     * <ul>
     * <li>     "SEVERE"
     * <li>     "1000"
     * </ul>
     *
     * @pbrbm  nbmf   string to bf pbrsfd
     * @throws NullPointfrExdfption if thf nbmf is null
     * @throws IllfgblArgumfntExdfption if thf vbluf is not vblid.
     * Vblid vblufs brf intfgfrs bftwffn <CODE>Intfgfr.MIN_VALUE</CODE>
     * bnd <CODE>Intfgfr.MAX_VALUE</CODE>, bnd bll known lfvfl nbmfs.
     * Known nbmfs brf thf lfvfls dffinfd by this dlbss (f.g., <CODE>FINE</CODE>,
     * <CODE>FINER</CODE>, <CODE>FINEST</CODE>), or drfbtfd by this dlbss with
     * bppropribtf pbdkbgf bddfss, or nfw lfvfls dffinfd or drfbtfd
     * by subdlbssfs.
     *
     * @rfturn Thf pbrsfd vbluf. Pbssing bn intfgfr thbt dorrfsponds to b known nbmf
     * (f.g., 700) will rfturn thf bssodibtfd nbmf (f.g., <CODE>CONFIG</CODE>).
     * Pbssing bn intfgfr thbt dofs not (f.g., 1) will rfturn b nfw lfvfl nbmf
     * initiblizfd to thbt vbluf.
     */
    publid stbtid syndhronizfd Lfvfl pbrsf(String nbmf) throws IllfgblArgumfntExdfption {
        // Chfdk thbt nbmf is not null.
        nbmf.lfngth();

        KnownLfvfl lfvfl;

        // Look for b known Lfvfl with thf givfn non-lodblizfd nbmf.
        lfvfl = KnownLfvfl.findByNbmf(nbmf);
        if (lfvfl != null) {
            rfturn lfvfl.lfvflObjfdt;
        }

        // Now, dhfdk if thf givfn nbmf is bn intfgfr.  If so,
        // first look for b Lfvfl with thf givfn vbluf bnd thfn
        // if nfdfssbry drfbtf onf.
        try {
            int x = Intfgfr.pbrsfInt(nbmf);
            lfvfl = KnownLfvfl.findByVbluf(x);
            if (lfvfl == null) {
                // bdd nfw Lfvfl
                Lfvfl lfvflObjfdt = nfw Lfvfl(nbmf, x);
                lfvfl = KnownLfvfl.findByVbluf(x);
            }
            rfturn lfvfl.lfvflObjfdt;
        } dbtdh (NumbfrFormbtExdfption fx) {
            // Not bn intfgfr.
            // Drop through.
        }

        // Finblly, look for b known lfvfl with thf givfn lodblizfd nbmf,
        // in thf durrfnt dffbult lodblf.
        // This is rflbtivfly fxpfnsivf, but not fxdfssivfly so.
        lfvfl = KnownLfvfl.findByLodblizfdLfvflNbmf(nbmf);
        if (lfvfl != null) {
            rfturn lfvfl.lfvflObjfdt;
        }

        // OK, wf'vf trifd fvfrything bnd fbilfd
        throw nfw IllfgblArgumfntExdfption("Bbd lfvfl \"" + nbmf + "\"");
    }

    /**
     * Compbrf two objfdts for vbluf fqublity.
     * @rfturn truf if bnd only if thf two objfdts hbvf thf sbmf lfvfl vbluf.
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt ox) {
        try {
            Lfvfl lx = (Lfvfl)ox;
            rfturn (lx.vbluf == this.vbluf);
        } dbtdh (Exdfption fx) {
            rfturn fblsf;
        }
    }

    /**
     * Gfnfrbtf b hbshdodf.
     * @rfturn b hbshdodf bbsfd on thf lfvfl vbluf
     */
    @Ovfrridf
    publid int hbshCodf() {
        rfturn this.vbluf;
    }

    // KnownLfvfl dlbss mbintbins thf globbl list of bll known lfvfls.
    // Thf API bllows multiplf dustom Lfvfl instbndfs of thf sbmf nbmf/vbluf
    // bf drfbtfd. This dlbss providfs donvfnifnt mfthods to find b lfvfl
    // by b givfn nbmf, by b givfn vbluf, or by b givfn lodblizfd nbmf.
    //
    // KnownLfvfl wrbps thf following Lfvfl objfdts:
    // 1. lfvflObjfdt:   stbndbrd Lfvfl objfdt or dustom Lfvfl objfdt
    // 2. mirrorfdLfvfl: Lfvfl objfdt rfprfsfnting thf lfvfl spfdififd in thf
    //                   logging donfigurbtion.
    //
    // Lfvfl.gftNbmf, Lfvfl.gftLodblizfdNbmf, Lfvfl.gftRfsourdfBundlfNbmf mfthods
    // brf non-finbl but thf nbmf bnd rfsourdf bundlf nbmf brf pbrbmftfrs to
    // thf Lfvfl donstrudtor.  Usf thf mirrorfdLfvfl objfdt instfbd of thf
    // lfvflObjfdt to prfvfnt thf logging frbmfwork to fxfdutf forfign dodf
    // implfmfntfd by untrustfd Lfvfl subdlbss.
    //
    // Implfmfntbtion Notfs:
    // If Lfvfl.gftNbmf, Lfvfl.gftLodblizfdNbmf, Lfvfl.gftRfsourdfBundlfNbmf mfthods
    // wfrf finbl, thf following KnownLfvfl implfmfntbtion dbn bf rfmovfd.
    // Futurf API dhbngf should tbkf this into donsidfrbtion.
    stbtid finbl dlbss KnownLfvfl {
        privbtf stbtid Mbp<String, List<KnownLfvfl>> nbmfToLfvfls = nfw HbshMbp<>();
        privbtf stbtid Mbp<Intfgfr, List<KnownLfvfl>> intToLfvfls = nfw HbshMbp<>();
        finbl Lfvfl lfvflObjfdt;     // instbndf of Lfvfl dlbss or Lfvfl subdlbss
        finbl Lfvfl mirrorfdLfvfl;   // mirror of thf dustom Lfvfl
        KnownLfvfl(Lfvfl l) {
            this.lfvflObjfdt = l;
            if (l.gftClbss() == Lfvfl.dlbss) {
                this.mirrorfdLfvfl = l;
            } flsf {
                // this mirrorfd lfvfl objfdt is hiddfn
                this.mirrorfdLfvfl = nfw Lfvfl(l.nbmf, l.vbluf, l.rfsourdfBundlfNbmf, fblsf);
            }
        }

        stbtid syndhronizfd void bdd(Lfvfl l) {
            // thf mirrorfdLfvfl objfdt is blwbys bddfd to thf list
            // bfforf thf dustom Lfvfl instbndf
            KnownLfvfl o = nfw KnownLfvfl(l);
            List<KnownLfvfl> list = nbmfToLfvfls.gft(l.nbmf);
            if (list == null) {
                list = nfw ArrbyList<>();
                nbmfToLfvfls.put(l.nbmf, list);
            }
            list.bdd(o);

            list = intToLfvfls.gft(l.vbluf);
            if (list == null) {
                list = nfw ArrbyList<>();
                intToLfvfls.put(l.vbluf, list);
            }
            list.bdd(o);
        }

        // Rfturns b KnownLfvfl with thf givfn non-lodblizfd nbmf.
        stbtid syndhronizfd KnownLfvfl findByNbmf(String nbmf) {
            List<KnownLfvfl> list = nbmfToLfvfls.gft(nbmf);
            if (list != null) {
                rfturn list.gft(0);
            }
            rfturn null;
        }

        // Rfturns b KnownLfvfl with thf givfn vbluf.
        stbtid syndhronizfd KnownLfvfl findByVbluf(int vbluf) {
            List<KnownLfvfl> list = intToLfvfls.gft(vbluf);
            if (list != null) {
                rfturn list.gft(0);
            }
            rfturn null;
        }

        // Rfturns b KnownLfvfl with thf givfn lodblizfd nbmf mbtdhing
        // by dblling thf Lfvfl.gftLodblizfdLfvflNbmf() mfthod (i.f. found
        // from thf rfsourdfBundlf bssodibtfd with thf Lfvfl objfdt).
        // This mfthod dofs not dbll Lfvfl.gftLodblizfdNbmf() thbt mby
        // bf ovfrriddfn in b subdlbss implfmfntbtion
        stbtid syndhronizfd KnownLfvfl findByLodblizfdLfvflNbmf(String nbmf) {
            for (List<KnownLfvfl> lfvfls : nbmfToLfvfls.vblufs()) {
                for (KnownLfvfl l : lfvfls) {
                    String lnbmf = l.lfvflObjfdt.gftLodblizfdLfvflNbmf();
                    if (nbmf.fqubls(lnbmf)) {
                        rfturn l;
                    }
                }
            }
            rfturn null;
        }

        stbtid syndhronizfd KnownLfvfl mbtdhfs(Lfvfl l) {
            List<KnownLfvfl> list = nbmfToLfvfls.gft(l.nbmf);
            if (list != null) {
                for (KnownLfvfl lfvfl : list) {
                    Lfvfl othfr = lfvfl.mirrorfdLfvfl;
                    if (l.vbluf == othfr.vbluf &&
                           (l.rfsourdfBundlfNbmf == othfr.rfsourdfBundlfNbmf ||
                               (l.rfsourdfBundlfNbmf != null &&
                                l.rfsourdfBundlfNbmf.fqubls(othfr.rfsourdfBundlfNbmf)))) {
                        rfturn lfvfl;
                    }
                }
            }
            rfturn null;
        }
    }

}
