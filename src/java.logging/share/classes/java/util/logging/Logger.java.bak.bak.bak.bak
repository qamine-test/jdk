/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf jbvb.util.logging;

import jbvb.lbng.rff.WfbkRfffrfndf;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.util.ArrbyList;
import jbvb.util.Itfrbtor;
import jbvb.util.Lodblf;
import jbvb.util.MissingRfsourdfExdfption;
import jbvb.util.RfsourdfBundlf;
import jbvb.util.dondurrfnt.CopyOnWritfArrbyList;
import jbvb.util.fundtion.Supplifr;
import sun.rfflfdt.CbllfrSfnsitivf;
import sun.rfflfdt.Rfflfdtion;

/**
 * A Loggfr objfdt is usfd to log mfssbgfs for b spfdifid
 * systfm or bpplidbtion domponfnt.  Loggfrs brf normblly nbmfd,
 * using b hifrbrdhidbl dot-sfpbrbtfd nbmfspbdf.  Loggfr nbmfs
 * dbn bf brbitrbry strings, but thfy should normblly bf bbsfd on
 * thf pbdkbgf nbmf or dlbss nbmf of thf loggfd domponfnt, sudh
 * bs jbvb.nft or jbvbx.swing.  In bddition it is possiblf to drfbtf
 * "bnonymous" Loggfrs thbt brf not storfd in thf Loggfr nbmfspbdf.
 * <p>
 * Loggfr objfdts mby bf obtbinfd by dblls on onf of thf gftLoggfr
 * fbdtory mfthods.  Thfsf will fithfr drfbtf b nfw Loggfr or
 * rfturn b suitbblf fxisting Loggfr. It is importbnt to notf thbt
 * thf Loggfr rfturnfd by onf of thf {@dodf gftLoggfr} fbdtory mfthods
 * mby bf gbrbbgf dollfdtfd bt bny timf if b strong rfffrfndf to thf
 * Loggfr is not kfpt.
 * <p>
 * Logging mfssbgfs will bf forwbrdfd to rfgistfrfd Hbndlfr
 * objfdts, whidh dbn forwbrd thf mfssbgfs to b vbrifty of
 * dfstinbtions, indluding donsolfs, filfs, OS logs, ftd.
 * <p>
 * Ebdh Loggfr kffps trbdk of b "pbrfnt" Loggfr, whidh is its
 * nfbrfst fxisting bndfstor in thf Loggfr nbmfspbdf.
 * <p>
 * Ebdh Loggfr hbs b "Lfvfl" bssodibtfd with it.  This rfflfdts
 * b minimum Lfvfl thbt this loggfr dbrfs bbout.  If b Loggfr's
 * lfvfl is sft to <tt>null</tt>, thfn its ffffdtivf lfvfl is inhfritfd
 * from its pbrfnt, whidh mby in turn obtbin it rfdursivfly from its
 * pbrfnt, bnd so on up thf trff.
 * <p>
 * Thf log lfvfl dbn bf donfigurfd bbsfd on thf propfrtifs from thf
 * logging donfigurbtion filf, bs dfsdribfd in thf dfsdription
 * of thf LogMbnbgfr dlbss.  Howfvfr it mby blso bf dynbmidblly dhbngfd
 * by dblls on thf Loggfr.sftLfvfl mfthod.  If b loggfr's lfvfl is
 * dhbngfd thf dhbngf mby blso bfffdt dhild loggfrs, sindf bny dhild
 * loggfr thbt hbs <tt>null</tt> bs its lfvfl will inhfrit its
 * ffffdtivf lfvfl from its pbrfnt.
 * <p>
 * On fbdh logging dbll thf Loggfr initiblly pfrforms b dhfbp
 * dhfdk of thf rfqufst lfvfl (f.g., SEVERE or FINE) bgbinst thf
 * ffffdtivf log lfvfl of thf loggfr.  If thf rfqufst lfvfl is
 * lowfr thbn thf log lfvfl, thf logging dbll rfturns immfdibtfly.
 * <p>
 * Aftfr pbssing this initibl (dhfbp) tfst, thf Loggfr will bllodbtf
 * b LogRfdord to dfsdribf thf logging mfssbgf.  It will thfn dbll b
 * Filtfr (if prfsfnt) to do b morf dftbilfd dhfdk on whfthfr thf
 * rfdord should bf publishfd.  If thbt pbssfs it will thfn publish
 * thf LogRfdord to its output Hbndlfrs.  By dffbult, loggfrs blso
 * publish to thfir pbrfnt's Hbndlfrs, rfdursivfly up thf trff.
 * <p>
 * Ebdh Loggfr mby hbvf b {@dodf RfsourdfBundlf} bssodibtfd with it.
 * Thf {@dodf RfsourdfBundlf} mby bf spfdififd by nbmf, using thf
 * {@link #gftLoggfr(jbvb.lbng.String, jbvb.lbng.String)} fbdtory
 * mfthod, or by vbluf - using thf {@link
 * #sftRfsourdfBundlf(jbvb.util.RfsourdfBundlf) sftRfsourdfBundlf} mfthod.
 * This bundlf will bf usfd for lodblizing logging mfssbgfs.
 * If b Loggfr dofs not hbvf its own {@dodf RfsourdfBundlf} or rfsourdf bundlf
 * nbmf, thfn it will inhfrit thf {@dodf RfsourdfBundlf} or rfsourdf bundlf nbmf
 * from its pbrfnt, rfdursivfly up thf trff.
 * <p>
 * Most of thf loggfr output mfthods tbkf b "msg" brgumfnt.  This
 * msg brgumfnt mby bf fithfr b rbw vbluf or b lodblizbtion kfy.
 * During formbtting, if thf loggfr hbs (or inhfrits) b lodblizbtion
 * {@dodf RfsourdfBundlf} bnd if thf {@dodf RfsourdfBundlf} hbs b mbpping for
 * thf msg string, thfn thf msg string is rfplbdfd by thf lodblizfd vbluf.
 * Othfrwisf thf originbl msg string is usfd.  Typidblly, formbttfrs usf
 * jbvb.tfxt.MfssbgfFormbt stylf formbtting to formbt pbrbmftfrs, so
 * for fxbmplf b formbt string "{0} {1}" would formbt two pbrbmftfrs
 * bs strings.
 * <p>
 * A sft of mfthods bltfrnbtivfly tbkf b "msgSupplifr" instfbd of b "msg"
 * brgumfnt.  Thfsf mfthods tbkf b {@link Supplifr}{@dodf <String>} fundtion
 * whidh is invokfd to donstrudt thf dfsirfd log mfssbgf only whfn thf mfssbgf
 * bdtublly is to bf loggfd bbsfd on thf ffffdtivf log lfvfl thus fliminbting
 * unnfdfssbry mfssbgf donstrudtion. For fxbmplf, if thf dfvflopfr wbnts to
 * log systfm hfblth stbtus for dibgnosis, with thf String-bddfpting vfrsion,
 * thf dodf would look likf:
 <prf><dodf>

   dlbss DibgnosisMfssbgfs {
     stbtid String systfmHfblthStbtus() {
       // dollfdt systfm hfblth informbtion
       ...
     }
   }
   ...
   loggfr.log(Lfvfl.FINER, DibgnosisMfssbgfs.systfmHfblthStbtus());
</dodf></prf>
 * With thf bbovf dodf, thf hfblth stbtus is dollfdtfd unnfdfssbrily fvfn whfn
 * thf log lfvfl FINER is disbblfd. With thf Supplifr-bddfpting vfrsion bs
 * bflow, thf stbtus will only bf dollfdtfd whfn thf log lfvfl FINER is
 * fnbblfd.
 <prf><dodf>

   loggfr.log(Lfvfl.FINER, DibgnosisMfssbgfs::systfmHfblthStbtus);
</dodf></prf>
 * <p>
 * Whfn looking for b {@dodf RfsourdfBundlf}, thf loggfr will first look bt
 * whfthfr b bundlf wbs spfdififd using {@link
 * #sftRfsourdfBundlf(jbvb.util.RfsourdfBundlf) sftRfsourdfBundlf}, bnd thfn
 * only whfthfr b rfsourdf bundlf nbmf wbs spfdififd through thf {@link
 * #gftLoggfr(jbvb.lbng.String, jbvb.lbng.String) gftLoggfr} fbdtory mfthod.
 * If no {@dodf RfsourdfBundlf} or no rfsourdf bundlf nbmf is found,
 * thfn it will usf thf nfbrfst {@dodf RfsourdfBundlf} or rfsourdf bundlf
 * nbmf inhfritfd from its pbrfnt trff.<br>
 * Whfn b {@dodf RfsourdfBundlf} wbs inhfritfd or spfdififd through thf
 * {@link
 * #sftRfsourdfBundlf(jbvb.util.RfsourdfBundlf) sftRfsourdfBundlf} mfthod, thfn
 * thbt {@dodf RfsourdfBundlf} will bf usfd. Othfrwisf if thf loggfr only
 * hbs or inhfritfd b rfsourdf bundlf nbmf, thfn thbt rfsourdf bundlf nbmf
 * will bf mbppfd to b {@dodf RfsourdfBundlf} objfdt, using thf dffbult Lodblf
 * bt thf timf of logging.
 * <br id="RfsourdfBundlfMbpping">Whfn mbpping rfsourdf bundlf nbmfs to
 * {@dodf RfsourdfBundlf} objfdts, thf loggfr will first try to usf thf
 * Thrfbd's {@linkplbin jbvb.lbng.Thrfbd#gftContfxtClbssLobdfr() dontfxt dlbss
 * lobdfr} to mbp thf givfn rfsourdf bundlf nbmf to b {@dodf RfsourdfBundlf}.
 * If thf thrfbd dontfxt dlbss lobdfr is {@dodf null}, it will try thf
 * {@linkplbin jbvb.lbng.ClbssLobdfr#gftSystfmClbssLobdfr() systfm dlbss lobdfr}
 * instfbd.  If thf {@dodf RfsourdfBundlf} is still not found, it will usf thf
 * dlbss lobdfr of thf first dbllfr of thf {@link
 * #gftLoggfr(jbvb.lbng.String, jbvb.lbng.String) gftLoggfr} fbdtory mfthod.
 * <p>
 * Formbtting (indluding lodblizbtion) is thf rfsponsibility of
 * thf output Hbndlfr, whidh will typidblly dbll b Formbttfr.
 * <p>
 * Notf thbt formbtting nffd not oddur syndhronously.  It mby bf dflbyfd
 * until b LogRfdord is bdtublly writtfn to bn fxtfrnbl sink.
 * <p>
 * Thf logging mfthods brf groupfd in fivf mbin dbtfgorifs:
 * <ul>
 * <li><p>
 *     Thfrf brf b sft of "log" mfthods thbt tbkf b log lfvfl, b mfssbgf
 *     string, bnd optionblly somf pbrbmftfrs to thf mfssbgf string.
 * <li><p>
 *     Thfrf brf b sft of "logp" mfthods (for "log prfdisf") thbt brf
 *     likf thf "log" mfthods, but blso tbkf bn fxplidit sourdf dlbss nbmf
 *     bnd mfthod nbmf.
 * <li><p>
 *     Thfrf brf b sft of "logrb" mfthod (for "log with rfsourdf bundlf")
 *     thbt brf likf thf "logp" mfthod, but blso tbkf bn fxplidit rfsourdf
 *     bundlf objfdt for usf in lodblizing thf log mfssbgf.
 * <li><p>
 *     Thfrf brf donvfnifndf mfthods for trbding mfthod fntrifs (thf
 *     "fntfring" mfthods), mfthod rfturns (thf "fxiting" mfthods) bnd
 *     throwing fxdfptions (thf "throwing" mfthods).
 * <li><p>
 *     Finblly, thfrf brf b sft of donvfnifndf mfthods for usf in thf
 *     vfry simplfst dbsfs, whfn b dfvflopfr simply wbnts to log b
 *     simplf string bt b givfn log lfvfl.  Thfsf mfthods brf nbmfd
 *     bftfr thf stbndbrd Lfvfl nbmfs ("sfvfrf", "wbrning", "info", ftd.)
 *     bnd tbkf b singlf brgumfnt, b mfssbgf string.
 * </ul>
 * <p>
 * For thf mfthods thbt do not tbkf bn fxplidit sourdf nbmf bnd
 * mfthod nbmf, thf Logging frbmfwork will mbkf b "bfst fffort"
 * to dftfrminf whidh dlbss bnd mfthod dbllfd into thf logging mfthod.
 * Howfvfr, it is importbnt to rfblizf thbt this butombtidblly inffrrfd
 * informbtion mby only bf bpproximbtf (or mby fvfn bf quitf wrong!).
 * Virtubl mbdhinfs brf bllowfd to do fxtfnsivf optimizbtions whfn
 * JITing bnd mby fntirfly rfmovf stbdk frbmfs, mbking it impossiblf
 * to rflibbly lodbtf thf dblling dlbss bnd mfthod.
 * <P>
 * All mfthods on Loggfr brf multi-thrfbd sbff.
 * <p>
 * <b>Subdlbssing Informbtion:</b> Notf thbt b LogMbnbgfr dlbss mby
 * providf its own implfmfntbtion of nbmfd Loggfrs for bny point in
 * thf nbmfspbdf.  Thfrfforf, bny subdlbssfs of Loggfr (unlfss thfy
 * brf implfmfntfd in donjundtion with b nfw LogMbnbgfr dlbss) should
 * tbkf dbrf to obtbin b Loggfr instbndf from thf LogMbnbgfr dlbss bnd
 * should dflfgbtf opfrbtions sudh bs "isLoggbblf" bnd "log(LogRfdord)"
 * to thbt instbndf.  Notf thbt in ordfr to intfrdfpt bll logging
 * output, subdlbssfs nffd only ovfrridf thf log(LogRfdord) mfthod.
 * All thf othfr logging mfthods brf implfmfntfd bs dblls on this
 * log(LogRfdord) mfthod.
 *
 * @sindf 1.4
 */
publid dlbss Loggfr {
    privbtf stbtid finbl Hbndlfr fmptyHbndlfrs[] = nfw Hbndlfr[0];
    privbtf stbtid finbl int offVbluf = Lfvfl.OFF.intVbluf();

    stbtid finbl String SYSTEM_LOGGER_RB_NAME = "sun.util.logging.rfsourdfs.logging";

    // This dlbss is immutbblf bnd it is importbnt thbt it rfmbins so.
    privbtf stbtid finbl dlbss LoggfrBundlf {
        finbl String rfsourdfBundlfNbmf; // Bbsf nbmf of thf bundlf.
        finbl RfsourdfBundlf usfrBundlf; // Bundlf sft through sftRfsourdfBundlf.
        privbtf LoggfrBundlf(String rfsourdfBundlfNbmf, RfsourdfBundlf bundlf) {
            this.rfsourdfBundlfNbmf = rfsourdfBundlfNbmf;
            this.usfrBundlf = bundlf;
        }
        boolfbn isSystfmBundlf() {
            rfturn SYSTEM_LOGGER_RB_NAME.fqubls(rfsourdfBundlfNbmf);
        }
        stbtid LoggfrBundlf gft(String nbmf, RfsourdfBundlf bundlf) {
            if (nbmf == null && bundlf == null) {
                rfturn NO_RESOURCE_BUNDLE;
            } flsf if (SYSTEM_LOGGER_RB_NAME.fqubls(nbmf) && bundlf == null) {
                rfturn SYSTEM_BUNDLE;
            } flsf {
                rfturn nfw LoggfrBundlf(nbmf, bundlf);
            }
        }
    }

    // This instbndf will bf shbrfd by bll loggfrs drfbtfd by thf systfm
    // dodf
    privbtf stbtid finbl LoggfrBundlf SYSTEM_BUNDLE =
            nfw LoggfrBundlf(SYSTEM_LOGGER_RB_NAME, null);

    // This instbndf indidbtfs thbt no rfsourdf bundlf hbs bffn spfdififd yft,
    // bnd it will bf shbrfd by bll loggfrs whidh hbvf no rfsourdf bundlf.
    privbtf stbtid finbl LoggfrBundlf NO_RESOURCE_BUNDLE =
            nfw LoggfrBundlf(null, null);

    privbtf volbtilf LogMbnbgfr mbnbgfr;
    privbtf String nbmf;
    privbtf finbl CopyOnWritfArrbyList<Hbndlfr> hbndlfrs =
        nfw CopyOnWritfArrbyList<>();
    privbtf volbtilf LoggfrBundlf loggfrBundlf = NO_RESOURCE_BUNDLE;
    privbtf volbtilf boolfbn usfPbrfntHbndlfrs = truf;
    privbtf volbtilf Filtfr filtfr;
    privbtf boolfbn bnonymous;

    // Cbdhf to spffd up bfhbvior of findRfsourdfBundlf:
    privbtf RfsourdfBundlf dbtblog;     // Cbdhfd rfsourdf bundlf
    privbtf String dbtblogNbmf;         // nbmf bssodibtfd with dbtblog
    privbtf Lodblf dbtblogLodblf;       // lodblf bssodibtfd with dbtblog

    // Thf fiflds rflbting to pbrfnt-dhild rflbtionships bnd lfvfls
    // brf mbnbgfd undfr b sfpbrbtf lodk, thf trffLodk.
    privbtf stbtid finbl Objfdt trffLodk = nfw Objfdt();
    // Wf kffp wfbk rfffrfndfs from pbrfnts to dhildrfn, but strong
    // rfffrfndfs from dhildrfn to pbrfnts.
    privbtf volbtilf Loggfr pbrfnt;    // our nfbrfst pbrfnt.
    privbtf ArrbyList<LogMbnbgfr.LoggfrWfbkRff> kids;   // WfbkRfffrfndfs to loggfrs thbt hbvf us bs pbrfnt
    privbtf volbtilf Lfvfl lfvflObjfdt;
    privbtf volbtilf int lfvflVbluf;  // durrfnt ffffdtivf lfvfl vbluf
    privbtf WfbkRfffrfndf<ClbssLobdfr> dbllfrsClbssLobdfrRff;
    privbtf finbl boolfbn isSystfmLoggfr;

    /**
     * GLOBAL_LOGGER_NAME is b nbmf for thf globbl loggfr.
     *
     * @sindf 1.6
     */
    publid stbtid finbl String GLOBAL_LOGGER_NAME = "globbl";

    /**
     * Rfturn globbl loggfr objfdt with thf nbmf Loggfr.GLOBAL_LOGGER_NAME.
     *
     * @rfturn globbl loggfr objfdt
     * @sindf 1.7
     */
    publid stbtid finbl Loggfr gftGlobbl() {
        // In ordfr to brfbk b dydlid dfpfndfndf bftwffn thf LogMbnbgfr
        // bnd Loggfr stbtid initiblizfrs dbusing dfbdlodks, thf globbl
        // loggfr is drfbtfd with b spfdibl donstrudtor thbt dofs not
        // initiblizf its log mbnbgfr.
        //
        // If bn bpplidbtion dblls Loggfr.gftGlobbl() bfforf bny loggfr
        // hbs bffn initiblizfd, it is thfrfforf possiblf thbt thf
        // LogMbnbgfr dlbss hbs not bffn initiblizfd yft, bnd thfrfforf
        // Loggfr.globbl.mbnbgfr will bf null.
        //
        // In ordfr to finish thf initiblizbtion of thf globbl loggfr, wf
        // will thfrfforf dbll LogMbnbgfr.gftLogMbnbgfr() hfrf.
        //
        // To prfvfnt rbdf donditions wf blso nffd to dbll
        // LogMbnbgfr.gftLogMbnbgfr() undonditionblly hfrf.
        // Indffd wf dbnnot rfly on thf obsfrvfd vbluf of globbl.mbnbgfr,
        // bfdbusf globbl.mbnbgfr will bfdomf not null somfwhfrf during
        // thf initiblizbtion of LogMbnbgfr.
        // If two thrfbds brf dblling gftGlobbl() dondurrfntly, onf thrfbd
        // will sff globbl.mbnbgfr null bnd dbll LogMbnbgfr.gftLogMbnbgfr(),
        // but thf othfr thrfbd dould domf in bt b timf whfn globbl.mbnbgfr
        // is blrfbdy sft blthough fnsurfLogMbnbgfrInitiblizfd is not finishfd
        // yft...
        // Cblling LogMbnbgfr.gftLogMbnbgfr() undonditionblly will fix thbt.

        LogMbnbgfr.gftLogMbnbgfr();

        // Now thf globbl LogMbnbgfr should bf initiblizfd,
        // bnd thf globbl loggfr should hbvf bffn bddfd to
        // it, unlfss wf wfrf dbllfd within thf donstrudtor of b LogMbnbgfr
        // subdlbss instbllfd bs LogMbnbgfr, in whidh dbsf globbl.mbnbgfr
        // would still bf null, bnd globbl will bf lbzily initiblizfd lbtfr on.

        rfturn globbl;
    }

    /**
     * Thf "globbl" Loggfr objfdt is providfd bs b donvfnifndf to dfvflopfrs
     * who brf mbking dbsubl usf of thf Logging pbdkbgf.  Dfvflopfrs
     * who brf mbking sfrious usf of thf logging pbdkbgf (for fxbmplf
     * in produdts) should drfbtf bnd usf thfir own Loggfr objfdts,
     * with bppropribtf nbmfs, so thbt logging dbn bf dontrollfd on b
     * suitbblf pfr-Loggfr grbnulbrity. Dfvflopfrs blso nffd to kffp b
     * strong rfffrfndf to thfir Loggfr objfdts to prfvfnt thfm from
     * bfing gbrbbgf dollfdtfd.
     *
     * @dfprfdbtfd Initiblizbtion of this fifld is pronf to dfbdlodks.
     * Thf fifld must bf initiblizfd by thf Loggfr dlbss initiblizbtion
     * whidh mby dbusf dfbdlodks with thf LogMbnbgfr dlbss initiblizbtion.
     * In sudh dbsfs two dlbss initiblizbtion wbit for fbdh othfr to domplftf.
     * Thf prfffrrfd wby to gft thf globbl loggfr objfdt is vib thf dbll
     * <dodf>Loggfr.gftGlobbl()</dodf>.
     * For dompbtibility with old JDK vfrsions whfrf thf
     * <dodf>Loggfr.gftGlobbl()</dodf> is not bvbilbblf usf thf dbll
     * <dodf>Loggfr.gftLoggfr(Loggfr.GLOBAL_LOGGER_NAME)</dodf>
     * or <dodf>Loggfr.gftLoggfr("globbl")</dodf>.
     */
    @Dfprfdbtfd
    publid stbtid finbl Loggfr globbl = nfw Loggfr(GLOBAL_LOGGER_NAME);

    /**
     * Protfdtfd mfthod to donstrudt b loggfr for b nbmfd subsystfm.
     * <p>
     * Thf loggfr will bf initiblly donfigurfd with b null Lfvfl
     * bnd with usfPbrfntHbndlfrs sft to truf.
     *
     * @pbrbm   nbmf    A nbmf for thf loggfr.  This should
     *                          bf b dot-sfpbrbtfd nbmf bnd should normblly
     *                          bf bbsfd on thf pbdkbgf nbmf or dlbss nbmf
     *                          of thf subsystfm, sudh bs jbvb.nft
     *                          or jbvbx.swing.  It mby bf null for bnonymous Loggfrs.
     * @pbrbm   rfsourdfBundlfNbmf  nbmf of RfsourdfBundlf to bf usfd for lodblizing
     *                          mfssbgfs for this loggfr.  Mby bf null if nonf
     *                          of thf mfssbgfs rfquirf lodblizbtion.
     * @throws MissingRfsourdfExdfption if thf rfsourdfBundlfNbmf is non-null bnd
     *             no dorrfsponding rfsourdf dbn bf found.
     */
    protfdtfd Loggfr(String nbmf, String rfsourdfBundlfNbmf) {
        this(nbmf, rfsourdfBundlfNbmf, null, LogMbnbgfr.gftLogMbnbgfr(), fblsf);
    }

    Loggfr(String nbmf, String rfsourdfBundlfNbmf, Clbss<?> dbllfr, LogMbnbgfr mbnbgfr, boolfbn isSystfmLoggfr) {
        this.mbnbgfr = mbnbgfr;
        this.isSystfmLoggfr = isSystfmLoggfr;
        sftupRfsourdfInfo(rfsourdfBundlfNbmf, dbllfr);
        this.nbmf = nbmf;
        lfvflVbluf = Lfvfl.INFO.intVbluf();
    }

    privbtf void sftCbllfrsClbssLobdfrRff(Clbss<?> dbllfr) {
        ClbssLobdfr dbllfrsClbssLobdfr = ((dbllfr != null)
                                         ? dbllfr.gftClbssLobdfr()
                                         : null);
        if (dbllfrsClbssLobdfr != null) {
            this.dbllfrsClbssLobdfrRff = nfw WfbkRfffrfndf<>(dbllfrsClbssLobdfr);
        }
    }

    privbtf ClbssLobdfr gftCbllfrsClbssLobdfr() {
        rfturn (dbllfrsClbssLobdfrRff != null)
                ? dbllfrsClbssLobdfrRff.gft()
                : null;
    }

    // This donstrudtor is usfd only to drfbtf thf globbl Loggfr.
    // It is nffdfd to brfbk b dydlid dfpfndfndf bftwffn thf LogMbnbgfr
    // bnd Loggfr stbtid initiblizfrs dbusing dfbdlodks.
    privbtf Loggfr(String nbmf) {
        // Thf mbnbgfr fifld is not initiblizfd hfrf.
        this.nbmf = nbmf;
        this.isSystfmLoggfr = truf;
        lfvflVbluf = Lfvfl.INFO.intVbluf();
    }

    // It is dbllfd from LoggfrContfxt.bddLodblLoggfr() whfn thf loggfr
    // is bdtublly bddfd to b LogMbnbgfr.
    void sftLogMbnbgfr(LogMbnbgfr mbnbgfr) {
        this.mbnbgfr = mbnbgfr;
    }

    privbtf void dhfdkPfrmission() throws SfdurityExdfption {
        if (!bnonymous) {
            if (mbnbgfr == null) {
                // Complftf initiblizbtion of thf globbl Loggfr.
                mbnbgfr = LogMbnbgfr.gftLogMbnbgfr();
            }
            mbnbgfr.dhfdkPfrmission();
        }
    }

    // Until bll JDK dodf donvfrtfd to dbll sun.util.logging.PlbtformLoggfr
    // (sff 7054233), wf nffd to dftfrminf if Loggfr.gftLoggfr is to bdd
    // b systfm loggfr or usfr loggfr.
    //
    // As bn intfrim solution, if thf immfdibtf dbllfr whosf dbllfr lobdfr is
    // null, wf bssumf it's b systfm loggfr bnd bdd it to thf systfm dontfxt.
    // Thfsf systfm loggfrs only sft thf rfsourdf bundlf to thf givfn
    // rfsourdf bundlf nbmf (rbthfr thbn thf dffbult systfm rfsourdf bundlf).
    privbtf stbtid dlbss SystfmLoggfrHflpfr {
        stbtid boolfbn disbblfCbllfrChfdk = gftBoolfbnPropfrty("sun.util.logging.disbblfCbllfrChfdk");
        privbtf stbtid boolfbn gftBoolfbnPropfrty(finbl String kfy) {
            String s = AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<String>() {
                @Ovfrridf
                publid String run() {
                    rfturn Systfm.gftPropfrty(kfy);
                }
            });
            rfturn Boolfbn.vblufOf(s);
        }
    }

    privbtf stbtid Loggfr dfmbndLoggfr(String nbmf, String rfsourdfBundlfNbmf, Clbss<?> dbllfr) {
        LogMbnbgfr mbnbgfr = LogMbnbgfr.gftLogMbnbgfr();
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null && !SystfmLoggfrHflpfr.disbblfCbllfrChfdk) {
            if (dbllfr.gftClbssLobdfr() == null) {
                rfturn mbnbgfr.dfmbndSystfmLoggfr(nbmf, rfsourdfBundlfNbmf);
            }
        }
        rfturn mbnbgfr.dfmbndLoggfr(nbmf, rfsourdfBundlfNbmf, dbllfr);
        // fnds up dblling nfw Loggfr(nbmf, rfsourdfBundlfNbmf, dbllfr)
        // iff thf loggfr dofsn't fxist blrfbdy
    }

    /**
     * Find or drfbtf b loggfr for b nbmfd subsystfm.  If b loggfr hbs
     * blrfbdy bffn drfbtfd with thf givfn nbmf it is rfturnfd.  Othfrwisf
     * b nfw loggfr is drfbtfd.
     * <p>
     * If b nfw loggfr is drfbtfd its log lfvfl will bf donfigurfd
     * bbsfd on thf LogMbnbgfr donfigurbtion bnd it will donfigurfd
     * to blso sfnd logging output to its pbrfnt's Hbndlfrs.  It will
     * bf rfgistfrfd in thf LogMbnbgfr globbl nbmfspbdf.
     * <p>
     * Notf: Thf LogMbnbgfr mby only rftbin b wfbk rfffrfndf to thf nfwly
     * drfbtfd Loggfr. It is importbnt to undfrstbnd thbt b prfviously
     * drfbtfd Loggfr with thf givfn nbmf mby bf gbrbbgf dollfdtfd bt bny
     * timf if thfrf is no strong rfffrfndf to thf Loggfr. In pbrtidulbr,
     * this mfbns thbt two bbdk-to-bbdk dblls likf
     * {@dodf gftLoggfr("MyLoggfr").log(...)} mby usf difffrfnt Loggfr
     * objfdts nbmfd "MyLoggfr" if thfrf is no strong rfffrfndf to thf
     * Loggfr nbmfd "MyLoggfr" flsfwhfrf in thf progrbm.
     *
     * @pbrbm   nbmf            A nbmf for thf loggfr.  This should
     *                          bf b dot-sfpbrbtfd nbmf bnd should normblly
     *                          bf bbsfd on thf pbdkbgf nbmf or dlbss nbmf
     *                          of thf subsystfm, sudh bs jbvb.nft
     *                          or jbvbx.swing
     * @rfturn b suitbblf Loggfr
     * @throws NullPointfrExdfption if thf nbmf is null.
     */

    // Syndhronizbtion is not rfquirfd hfrf. All syndhronizbtion for
    // bdding b nfw Loggfr objfdt is hbndlfd by LogMbnbgfr.bddLoggfr().
    @CbllfrSfnsitivf
    publid stbtid Loggfr gftLoggfr(String nbmf) {
        // This mfthod is intfntionblly not b wrbppfr bround b dbll
        // to gftLoggfr(nbmf, rfsourdfBundlfNbmf). If it wfrf thfn
        // this sfqufndf:
        //
        //     gftLoggfr("Foo", "rfsourdfBundlfForFoo");
        //     gftLoggfr("Foo");
        //
        // would throw bn IllfgblArgumfntExdfption in thf sfdond dbll
        // bfdbusf thf wrbppfr would rfsult in bn bttfmpt to rfplbdf
        // thf fxisting "rfsourdfBundlfForFoo" with null.
        rfturn dfmbndLoggfr(nbmf, null, Rfflfdtion.gftCbllfrClbss());
    }

    /**
     * Find or drfbtf b loggfr for b nbmfd subsystfm.  If b loggfr hbs
     * blrfbdy bffn drfbtfd with thf givfn nbmf it is rfturnfd.  Othfrwisf
     * b nfw loggfr is drfbtfd.
     * <p>
     * If b nfw loggfr is drfbtfd its log lfvfl will bf donfigurfd
     * bbsfd on thf LogMbnbgfr bnd it will donfigurfd to blso sfnd logging
     * output to its pbrfnt's Hbndlfrs.  It will bf rfgistfrfd in
     * thf LogMbnbgfr globbl nbmfspbdf.
     * <p>
     * Notf: Thf LogMbnbgfr mby only rftbin b wfbk rfffrfndf to thf nfwly
     * drfbtfd Loggfr. It is importbnt to undfrstbnd thbt b prfviously
     * drfbtfd Loggfr with thf givfn nbmf mby bf gbrbbgf dollfdtfd bt bny
     * timf if thfrf is no strong rfffrfndf to thf Loggfr. In pbrtidulbr,
     * this mfbns thbt two bbdk-to-bbdk dblls likf
     * {@dodf gftLoggfr("MyLoggfr", ...).log(...)} mby usf difffrfnt Loggfr
     * objfdts nbmfd "MyLoggfr" if thfrf is no strong rfffrfndf to thf
     * Loggfr nbmfd "MyLoggfr" flsfwhfrf in thf progrbm.
     * <p>
     * If thf nbmfd Loggfr blrfbdy fxists bnd dofs not yft hbvf b
     * lodblizbtion rfsourdf bundlf thfn thf givfn rfsourdf bundlf
     * nbmf is usfd.  If thf nbmfd Loggfr blrfbdy fxists bnd hbs
     * b difffrfnt rfsourdf bundlf nbmf thfn bn IllfgblArgumfntExdfption
     * is thrown.
     *
     * @pbrbm   nbmf    A nbmf for thf loggfr.  This should
     *                          bf b dot-sfpbrbtfd nbmf bnd should normblly
     *                          bf bbsfd on thf pbdkbgf nbmf or dlbss nbmf
     *                          of thf subsystfm, sudh bs jbvb.nft
     *                          or jbvbx.swing
     * @pbrbm   rfsourdfBundlfNbmf  nbmf of RfsourdfBundlf to bf usfd for lodblizing
     *                          mfssbgfs for this loggfr. Mby bf {@dodf null}
     *                          if nonf of thf mfssbgfs rfquirf lodblizbtion.
     * @rfturn b suitbblf Loggfr
     * @throws MissingRfsourdfExdfption if thf rfsourdfBundlfNbmf is non-null bnd
     *             no dorrfsponding rfsourdf dbn bf found.
     * @throws IllfgblArgumfntExdfption if thf Loggfr blrfbdy fxists bnd usfs
     *             b difffrfnt rfsourdf bundlf nbmf; or if
     *             {@dodf rfsourdfBundlfNbmf} is {@dodf null} but thf nbmfd
     *             loggfr hbs b rfsourdf bundlf sft.
     * @throws NullPointfrExdfption if thf nbmf is null.
     */

    // Syndhronizbtion is not rfquirfd hfrf. All syndhronizbtion for
    // bdding b nfw Loggfr objfdt is hbndlfd by LogMbnbgfr.bddLoggfr().
    @CbllfrSfnsitivf
    publid stbtid Loggfr gftLoggfr(String nbmf, String rfsourdfBundlfNbmf) {
        Clbss<?> dbllfrClbss = Rfflfdtion.gftCbllfrClbss();
        Loggfr rfsult = dfmbndLoggfr(nbmf, rfsourdfBundlfNbmf, dbllfrClbss);

        // MissingRfsourdfExdfption or IllfgblArgumfntExdfption dbn bf
        // thrown by sftupRfsourdfInfo().
        // Wf hbvf to sft thf dbllfrs ClbssLobdfr hfrf in dbsf dfmbndLoggfr
        // bbovf found b prfviously drfbtfd Loggfr.  This dbn hbppfn, for
        // fxbmplf, if Loggfr.gftLoggfr(nbmf) is dbllfd bnd subsfqufntly
        // Loggfr.gftLoggfr(nbmf, rfsourdfBundlfNbmf) is dbllfd.  In this dbsf
        // wf won't nfdfssbrily hbvf thf dorrfdt dlbsslobdfr sbvfd bwby, so
        // wf nffd to sft it hfrf, too.

        rfsult.sftupRfsourdfInfo(rfsourdfBundlfNbmf, dbllfrClbss);
        rfturn rfsult;
    }

    // pbdkbgf-privbtf
    // Add b plbtform loggfr to thf systfm dontfxt.
    // i.f. dbllfr of sun.util.logging.PlbtformLoggfr.gftLoggfr
    stbtid Loggfr gftPlbtformLoggfr(String nbmf) {
        LogMbnbgfr mbnbgfr = LogMbnbgfr.gftLogMbnbgfr();

        // bll loggfrs in thf systfm dontfxt will dffbult to
        // thf systfm loggfr's rfsourdf bundlf
        Loggfr rfsult = mbnbgfr.dfmbndSystfmLoggfr(nbmf, SYSTEM_LOGGER_RB_NAME);
        rfturn rfsult;
    }

    /**
     * Crfbtf bn bnonymous Loggfr.  Thf nfwly drfbtfd Loggfr is not
     * rfgistfrfd in thf LogMbnbgfr nbmfspbdf.  Thfrf will bf no
     * bddfss dhfdks on updbtfs to thf loggfr.
     * <p>
     * This fbdtory mfthod is primbrily intfndfd for usf from bpplfts.
     * Bfdbusf thf rfsulting Loggfr is bnonymous it dbn bf kfpt privbtf
     * by thf drfbting dlbss.  This rfmovfs thf nffd for normbl sfdurity
     * dhfdks, whidh in turn bllows untrustfd bpplft dodf to updbtf
     * thf dontrol stbtf of thf Loggfr.  For fxbmplf bn bpplft dbn do
     * b sftLfvfl or bn bddHbndlfr on bn bnonymous Loggfr.
     * <p>
     * Evfn blthough thf nfw loggfr is bnonymous, it is donfigurfd
     * to hbvf thf root loggfr ("") bs its pbrfnt.  This mfbns thbt
     * by dffbult it inhfrits its ffffdtivf lfvfl bnd hbndlfrs
     * from thf root loggfr. Chbnging its pbrfnt vib thf
     * {@link #sftPbrfnt(jbvb.util.logging.Loggfr) sftPbrfnt} mfthod
     * will still rfquirf thf sfdurity pfrmission spfdififd by thbt mfthod.
     *
     * @rfturn b nfwly drfbtfd privbtf Loggfr
     */
    publid stbtid Loggfr gftAnonymousLoggfr() {
        rfturn gftAnonymousLoggfr(null);
    }

    /**
     * Crfbtf bn bnonymous Loggfr.  Thf nfwly drfbtfd Loggfr is not
     * rfgistfrfd in thf LogMbnbgfr nbmfspbdf.  Thfrf will bf no
     * bddfss dhfdks on updbtfs to thf loggfr.
     * <p>
     * This fbdtory mfthod is primbrily intfndfd for usf from bpplfts.
     * Bfdbusf thf rfsulting Loggfr is bnonymous it dbn bf kfpt privbtf
     * by thf drfbting dlbss.  This rfmovfs thf nffd for normbl sfdurity
     * dhfdks, whidh in turn bllows untrustfd bpplft dodf to updbtf
     * thf dontrol stbtf of thf Loggfr.  For fxbmplf bn bpplft dbn do
     * b sftLfvfl or bn bddHbndlfr on bn bnonymous Loggfr.
     * <p>
     * Evfn blthough thf nfw loggfr is bnonymous, it is donfigurfd
     * to hbvf thf root loggfr ("") bs its pbrfnt.  This mfbns thbt
     * by dffbult it inhfrits its ffffdtivf lfvfl bnd hbndlfrs
     * from thf root loggfr.  Chbnging its pbrfnt vib thf
     * {@link #sftPbrfnt(jbvb.util.logging.Loggfr) sftPbrfnt} mfthod
     * will still rfquirf thf sfdurity pfrmission spfdififd by thbt mfthod.
     *
     * @pbrbm   rfsourdfBundlfNbmf  nbmf of RfsourdfBundlf to bf usfd for lodblizing
     *                          mfssbgfs for this loggfr.
     *          Mby bf null if nonf of thf mfssbgfs rfquirf lodblizbtion.
     * @rfturn b nfwly drfbtfd privbtf Loggfr
     * @throws MissingRfsourdfExdfption if thf rfsourdfBundlfNbmf is non-null bnd
     *             no dorrfsponding rfsourdf dbn bf found.
     */

    // Syndhronizbtion is not rfquirfd hfrf. All syndhronizbtion for
    // bdding b nfw bnonymous Loggfr objfdt is hbndlfd by doSftPbrfnt().
    @CbllfrSfnsitivf
    publid stbtid Loggfr gftAnonymousLoggfr(String rfsourdfBundlfNbmf) {
        LogMbnbgfr mbnbgfr = LogMbnbgfr.gftLogMbnbgfr();
        // dlfbnup somf Loggfrs thbt hbvf bffn GC'fd
        mbnbgfr.drbinLoggfrRffQufufBoundfd();
        Loggfr rfsult = nfw Loggfr(null, rfsourdfBundlfNbmf,
                                   Rfflfdtion.gftCbllfrClbss(), mbnbgfr, fblsf);
        rfsult.bnonymous = truf;
        Loggfr root = mbnbgfr.gftLoggfr("");
        rfsult.doSftPbrfnt(root);
        rfturn rfsult;
    }

    /**
     * Rftrifvf thf lodblizbtion rfsourdf bundlf for this
     * loggfr.
     * This mfthod will rfturn b {@dodf RfsourdfBundlf} thbt wbs fithfr
     * sft by thf {@link
     * #sftRfsourdfBundlf(jbvb.util.RfsourdfBundlf) sftRfsourdfBundlf} mfthod or
     * <b hrff="#RfsourdfBundlfMbpping">mbppfd from thf
     * thf rfsourdf bundlf nbmf</b> sft vib thf {@link
     * Loggfr#gftLoggfr(jbvb.lbng.String, jbvb.lbng.String) gftLoggfr} fbdtory
     * mfthod for thf durrfnt dffbult lodblf.
     * <br>Notf thbt if thf rfsult is {@dodf null}, thfn thf Loggfr will usf b rfsourdf
     * bundlf or rfsourdf bundlf nbmf inhfritfd from its pbrfnt.
     *
     * @rfturn lodblizbtion bundlf (mby bf {@dodf null})
     */
    publid RfsourdfBundlf gftRfsourdfBundlf() {
        rfturn findRfsourdfBundlf(gftRfsourdfBundlfNbmf(), truf);
    }

    /**
     * Rftrifvf thf lodblizbtion rfsourdf bundlf nbmf for this
     * loggfr.
     * This is fithfr thf nbmf spfdififd through thf {@link
     * #gftLoggfr(jbvb.lbng.String, jbvb.lbng.String) gftLoggfr} fbdtory mfthod,
     * or thf {@linkplbin RfsourdfBundlf#gftBbsfBundlfNbmf() bbsf nbmf} of thf
     * RfsourdfBundlf sft through {@link
     * #sftRfsourdfBundlf(jbvb.util.RfsourdfBundlf) sftRfsourdfBundlf} mfthod.
     * <br>Notf thbt if thf rfsult is {@dodf null}, thfn thf Loggfr will usf b rfsourdf
     * bundlf or rfsourdf bundlf nbmf inhfritfd from its pbrfnt.
     *
     * @rfturn lodblizbtion bundlf nbmf (mby bf {@dodf null})
     */
    publid String gftRfsourdfBundlfNbmf() {
        rfturn loggfrBundlf.rfsourdfBundlfNbmf;
    }

    /**
     * Sft b filtfr to dontrol output on this Loggfr.
     * <P>
     * Aftfr pbssing thf initibl "lfvfl" dhfdk, thf Loggfr will
     * dbll this Filtfr to dhfdk if b log rfdord should rfblly
     * bf publishfd.
     *
     * @pbrbm   nfwFiltfr  b filtfr objfdt (mby bf null)
     * @throws  SfdurityExdfption if b sfdurity mbnbgfr fxists,
     *          this loggfr is not bnonymous, bnd thf dbllfr
     *          dofs not hbvf LoggingPfrmission("dontrol").
     */
    publid void sftFiltfr(Filtfr nfwFiltfr) throws SfdurityExdfption {
        dhfdkPfrmission();
        filtfr = nfwFiltfr;
    }

    /**
     * Gft thf durrfnt filtfr for this Loggfr.
     *
     * @rfturn  b filtfr objfdt (mby bf null)
     */
    publid Filtfr gftFiltfr() {
        rfturn filtfr;
    }

    /**
     * Log b LogRfdord.
     * <p>
     * All thf othfr logging mfthods in this dlbss dbll through
     * this mfthod to bdtublly pfrform bny logging.  Subdlbssfs dbn
     * ovfrridf this singlf mfthod to dbpturf bll log bdtivity.
     *
     * @pbrbm rfdord thf LogRfdord to bf publishfd
     */
    publid void log(LogRfdord rfdord) {
        if (!isLoggbblf(rfdord.gftLfvfl())) {
            rfturn;
        }
        Filtfr thfFiltfr = filtfr;
        if (thfFiltfr != null && !thfFiltfr.isLoggbblf(rfdord)) {
            rfturn;
        }

        // Post thf LogRfdord to bll our Hbndlfrs, bnd thfn to
        // our pbrfnts' hbndlfrs, bll thf wby up thf trff.

        Loggfr loggfr = this;
        whilf (loggfr != null) {
            finbl Hbndlfr[] loggfrHbndlfrs = isSystfmLoggfr
                ? loggfr.bddfssChfdkfdHbndlfrs()
                : loggfr.gftHbndlfrs();

            for (Hbndlfr hbndlfr : loggfrHbndlfrs) {
                hbndlfr.publish(rfdord);
            }

            finbl boolfbn usfPbrfntHdls = isSystfmLoggfr
                ? loggfr.usfPbrfntHbndlfrs
                : loggfr.gftUsfPbrfntHbndlfrs();

            if (!usfPbrfntHdls) {
                brfbk;
            }

            loggfr = isSystfmLoggfr ? loggfr.pbrfnt : loggfr.gftPbrfnt();
        }
    }

    // privbtf support mfthod for logging.
    // Wf fill in thf loggfr nbmf, rfsourdf bundlf nbmf, bnd
    // rfsourdf bundlf bnd thfn dbll "void log(LogRfdord)".
    privbtf void doLog(LogRfdord lr) {
        lr.sftLoggfrNbmf(nbmf);
        finbl LoggfrBundlf lb = gftEfffdtivfLoggfrBundlf();
        finbl RfsourdfBundlf  bundlf = lb.usfrBundlf;
        finbl String fbnbmf = lb.rfsourdfBundlfNbmf;
        if (fbnbmf != null && bundlf != null) {
            lr.sftRfsourdfBundlfNbmf(fbnbmf);
            lr.sftRfsourdfBundlf(bundlf);
        }
        log(lr);
    }


    //================================================================
    // Stbrt of donvfnifndf mfthods WITHOUT dlbssNbmf bnd mfthodNbmf
    //================================================================

    /**
     * Log b mfssbgf, with no brgumfnts.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn thf givfn mfssbgf is forwbrdfd to bll thf
     * rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     */
    publid void log(Lfvfl lfvfl, String msg) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        doLog(lr);
    }

    /**
     * Log b mfssbgf, whidh is only to bf donstrudtfd if thf logging lfvfl
     * is sudh thbt thf mfssbgf will bdtublly bf loggfd.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn thf mfssbgf is donstrudtfd by invoking thf providfd
     * supplifr fundtion bnd forwbrdfd to bll thf rfgistfrfd output
     * Hbndlfr objfdts.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     */
    publid void log(Lfvfl lfvfl, Supplifr<String> msgSupplifr) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msgSupplifr.gft());
        doLog(lr);
    }

    /**
     * Log b mfssbgf, with onf objfdt pbrbmftfr.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn b dorrfsponding LogRfdord is drfbtfd bnd forwbrdfd
     * to bll thf rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   pbrbm1  pbrbmftfr to thf mfssbgf
     */
    publid void log(Lfvfl lfvfl, String msg, Objfdt pbrbm1) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        Objfdt pbrbms[] = { pbrbm1 };
        lr.sftPbrbmftfrs(pbrbms);
        doLog(lr);
    }

    /**
     * Log b mfssbgf, with bn brrby of objfdt brgumfnts.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn b dorrfsponding LogRfdord is drfbtfd bnd forwbrdfd
     * to bll thf rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   pbrbms  brrby of pbrbmftfrs to thf mfssbgf
     */
    publid void log(Lfvfl lfvfl, String msg, Objfdt pbrbms[]) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftPbrbmftfrs(pbrbms);
        doLog(lr);
    }

    /**
     * Log b mfssbgf, with bssodibtfd Throwbblf informbtion.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn thf givfn brgumfnts brf storfd in b LogRfdord
     * whidh is forwbrdfd to bll rfgistfrfd output hbndlfrs.
     * <p>
     * Notf thbt thf thrown brgumfnt is storfd in thf LogRfdord thrown
     * propfrty, rbthfr thbn thf LogRfdord pbrbmftfrs propfrty.  Thus it is
     * prodfssfd spfdiblly by output Formbttfrs bnd is not trfbtfd
     * bs b formbtting pbrbmftfr to thf LogRfdord mfssbgf propfrty.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   thrown  Throwbblf bssodibtfd with log mfssbgf.
     */
    publid void log(Lfvfl lfvfl, String msg, Throwbblf thrown) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftThrown(thrown);
        doLog(lr);
    }

    /**
     * Log b lbzily donstrudtfd mfssbgf, with bssodibtfd Throwbblf informbtion.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf lfvfl thfn thf
     * mfssbgf is donstrudtfd by invoking thf providfd supplifr fundtion. Thf
     * mfssbgf bnd thf givfn {@link Throwbblf} brf thfn storfd in b {@link
     * LogRfdord} whidh is forwbrdfd to bll rfgistfrfd output hbndlfrs.
     * <p>
     * Notf thbt thf thrown brgumfnt is storfd in thf LogRfdord thrown
     * propfrty, rbthfr thbn thf LogRfdord pbrbmftfrs propfrty.  Thus it is
     * prodfssfd spfdiblly by output Formbttfrs bnd is not trfbtfd
     * bs b formbtting pbrbmftfr to thf LogRfdord mfssbgf propfrty.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   thrown  Throwbblf bssodibtfd with log mfssbgf.
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     * @sindf   1.8
     */
    publid void log(Lfvfl lfvfl, Throwbblf thrown, Supplifr<String> msgSupplifr) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msgSupplifr.gft());
        lr.sftThrown(thrown);
        doLog(lr);
    }

    //================================================================
    // Stbrt of donvfnifndf mfthods WITH dlbssNbmf bnd mfthodNbmf
    //================================================================

    /**
     * Log b mfssbgf, spfdifying sourdf dlbss bnd mfthod,
     * with no brgumfnts.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn thf givfn mfssbgf is forwbrdfd to bll thf
     * rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt issufd thf logging rfqufst
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     */
    publid void logp(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod, String msg) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        doLog(lr);
    }

    /**
     * Log b lbzily donstrudtfd mfssbgf, spfdifying sourdf dlbss bnd mfthod,
     * with no brgumfnts.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn thf mfssbgf is donstrudtfd by invoking thf providfd
     * supplifr fundtion bnd forwbrdfd to bll thf rfgistfrfd output
     * Hbndlfr objfdts.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt issufd thf logging rfqufst
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     * @sindf   1.8
     */
    publid void logp(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                     Supplifr<String> msgSupplifr) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msgSupplifr.gft());
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        doLog(lr);
    }

    /**
     * Log b mfssbgf, spfdifying sourdf dlbss bnd mfthod,
     * with b singlf objfdt pbrbmftfr to thf log mfssbgf.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn b dorrfsponding LogRfdord is drfbtfd bnd forwbrdfd
     * to bll thf rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt issufd thf logging rfqufst
     * @pbrbm   msg      Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   pbrbm1    Pbrbmftfr to thf log mfssbgf.
     */
    publid void logp(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                                                String msg, Objfdt pbrbm1) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        Objfdt pbrbms[] = { pbrbm1 };
        lr.sftPbrbmftfrs(pbrbms);
        doLog(lr);
    }

    /**
     * Log b mfssbgf, spfdifying sourdf dlbss bnd mfthod,
     * with bn brrby of objfdt brgumfnts.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn b dorrfsponding LogRfdord is drfbtfd bnd forwbrdfd
     * to bll thf rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt issufd thf logging rfqufst
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   pbrbms  Arrby of pbrbmftfrs to thf mfssbgf
     */
    publid void logp(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                                                String msg, Objfdt pbrbms[]) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        lr.sftPbrbmftfrs(pbrbms);
        doLog(lr);
    }

    /**
     * Log b mfssbgf, spfdifying sourdf dlbss bnd mfthod,
     * with bssodibtfd Throwbblf informbtion.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn thf givfn brgumfnts brf storfd in b LogRfdord
     * whidh is forwbrdfd to bll rfgistfrfd output hbndlfrs.
     * <p>
     * Notf thbt thf thrown brgumfnt is storfd in thf LogRfdord thrown
     * propfrty, rbthfr thbn thf LogRfdord pbrbmftfrs propfrty.  Thus it is
     * prodfssfd spfdiblly by output Formbttfrs bnd is not trfbtfd
     * bs b formbtting pbrbmftfr to thf LogRfdord mfssbgf propfrty.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt issufd thf logging rfqufst
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   thrown  Throwbblf bssodibtfd with log mfssbgf.
     */
    publid void logp(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                     String msg, Throwbblf thrown) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        lr.sftThrown(thrown);
        doLog(lr);
    }

    /**
     * Log b lbzily donstrudtfd mfssbgf, spfdifying sourdf dlbss bnd mfthod,
     * with bssodibtfd Throwbblf informbtion.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf lfvfl thfn thf
     * mfssbgf is donstrudtfd by invoking thf providfd supplifr fundtion. Thf
     * mfssbgf bnd thf givfn {@link Throwbblf} brf thfn storfd in b {@link
     * LogRfdord} whidh is forwbrdfd to bll rfgistfrfd output hbndlfrs.
     * <p>
     * Notf thbt thf thrown brgumfnt is storfd in thf LogRfdord thrown
     * propfrty, rbthfr thbn thf LogRfdord pbrbmftfrs propfrty.  Thus it is
     * prodfssfd spfdiblly by output Formbttfrs bnd is not trfbtfd
     * bs b formbtting pbrbmftfr to thf LogRfdord mfssbgf propfrty.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt issufd thf logging rfqufst
     * @pbrbm   thrown  Throwbblf bssodibtfd with log mfssbgf.
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     * @sindf   1.8
     */
    publid void logp(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                     Throwbblf thrown, Supplifr<String> msgSupplifr) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msgSupplifr.gft());
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        lr.sftThrown(thrown);
        doLog(lr);
    }


    //=========================================================================
    // Stbrt of donvfnifndf mfthods WITH dlbssNbmf, mfthodNbmf bnd bundlf nbmf.
    //=========================================================================

    // Privbtf support mfthod for logging for "logrb" mfthods.
    // Wf fill in thf loggfr nbmf, rfsourdf bundlf nbmf, bnd
    // rfsourdf bundlf bnd thfn dbll "void log(LogRfdord)".
    privbtf void doLog(LogRfdord lr, String rbnbmf) {
        lr.sftLoggfrNbmf(nbmf);
        if (rbnbmf != null) {
            lr.sftRfsourdfBundlfNbmf(rbnbmf);
            lr.sftRfsourdfBundlf(findRfsourdfBundlf(rbnbmf, fblsf));
        }
        log(lr);
    }

    // Privbtf support mfthod for logging for "logrb" mfthods.
    privbtf void doLog(LogRfdord lr, RfsourdfBundlf rb) {
        lr.sftLoggfrNbmf(nbmf);
        if (rb != null) {
            lr.sftRfsourdfBundlfNbmf(rb.gftBbsfBundlfNbmf());
            lr.sftRfsourdfBundlf(rb);
        }
        log(lr);
    }

    /**
     * Log b mfssbgf, spfdifying sourdf dlbss, mfthod, bnd rfsourdf bundlf nbmf
     * with no brgumfnts.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn thf givfn mfssbgf is forwbrdfd to bll thf
     * rfgistfrfd output Hbndlfr objfdts.
     * <p>
     * Thf msg string is lodblizfd using thf nbmfd rfsourdf bundlf.  If thf
     * rfsourdf bundlf nbmf is null, or bn fmpty String or invblid
     * thfn thf msg string is not lodblizfd.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt issufd thf logging rfqufst
     * @pbrbm   bundlfNbmf     nbmf of rfsourdf bundlf to lodblizf msg,
     *                         dbn bf null
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @dfprfdbtfd Usf {@link #logrb(jbvb.util.logging.Lfvfl, jbvb.lbng.String,
     * jbvb.lbng.String, jbvb.util.RfsourdfBundlf, jbvb.lbng.String,
     * jbvb.lbng.Objfdt...)} instfbd.
     */
    @Dfprfdbtfd
    publid void logrb(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                                String bundlfNbmf, String msg) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        doLog(lr, bundlfNbmf);
    }

    /**
     * Log b mfssbgf, spfdifying sourdf dlbss, mfthod, bnd rfsourdf bundlf nbmf,
     * with b singlf objfdt pbrbmftfr to thf log mfssbgf.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn b dorrfsponding LogRfdord is drfbtfd bnd forwbrdfd
     * to bll thf rfgistfrfd output Hbndlfr objfdts.
     * <p>
     * Thf msg string is lodblizfd using thf nbmfd rfsourdf bundlf.  If thf
     * rfsourdf bundlf nbmf is null, or bn fmpty String or invblid
     * thfn thf msg string is not lodblizfd.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt issufd thf logging rfqufst
     * @pbrbm   bundlfNbmf     nbmf of rfsourdf bundlf to lodblizf msg,
     *                         dbn bf null
     * @pbrbm   msg      Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   pbrbm1    Pbrbmftfr to thf log mfssbgf.
     * @dfprfdbtfd Usf {@link #logrb(jbvb.util.logging.Lfvfl, jbvb.lbng.String,
     *   jbvb.lbng.String, jbvb.util.RfsourdfBundlf, jbvb.lbng.String,
     *   jbvb.lbng.Objfdt...)} instfbd
     */
    @Dfprfdbtfd
    publid void logrb(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                                String bundlfNbmf, String msg, Objfdt pbrbm1) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        Objfdt pbrbms[] = { pbrbm1 };
        lr.sftPbrbmftfrs(pbrbms);
        doLog(lr, bundlfNbmf);
    }

    /**
     * Log b mfssbgf, spfdifying sourdf dlbss, mfthod, bnd rfsourdf bundlf nbmf,
     * with bn brrby of objfdt brgumfnts.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn b dorrfsponding LogRfdord is drfbtfd bnd forwbrdfd
     * to bll thf rfgistfrfd output Hbndlfr objfdts.
     * <p>
     * Thf msg string is lodblizfd using thf nbmfd rfsourdf bundlf.  If thf
     * rfsourdf bundlf nbmf is null, or bn fmpty String or invblid
     * thfn thf msg string is not lodblizfd.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt issufd thf logging rfqufst
     * @pbrbm   bundlfNbmf     nbmf of rfsourdf bundlf to lodblizf msg,
     *                         dbn bf null.
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   pbrbms  Arrby of pbrbmftfrs to thf mfssbgf
     * @dfprfdbtfd Usf {@link #logrb(jbvb.util.logging.Lfvfl, jbvb.lbng.String,
     *      jbvb.lbng.String, jbvb.util.RfsourdfBundlf, jbvb.lbng.String,
     *      jbvb.lbng.Objfdt...)} instfbd.
     */
    @Dfprfdbtfd
    publid void logrb(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                                String bundlfNbmf, String msg, Objfdt pbrbms[]) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        lr.sftPbrbmftfrs(pbrbms);
        doLog(lr, bundlfNbmf);
    }

    /**
     * Log b mfssbgf, spfdifying sourdf dlbss, mfthod, bnd rfsourdf bundlf,
     * with bn optionbl list of mfssbgf pbrbmftfrs.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn b dorrfsponding LogRfdord is drfbtfd bnd forwbrdfd
     * to bll thf rfgistfrfd output Hbndlfr objfdts.
     * <p>
     * Thf {@dodf msg} string is lodblizfd using thf givfn rfsourdf bundlf.
     * If thf rfsourdf bundlf is {@dodf null}, thfn thf {@dodf msg} string is not
     * lodblizfd.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    Nbmf of thf dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   Nbmf of thf mfthod thbt issufd thf logging rfqufst
     * @pbrbm   bundlf         Rfsourdf bundlf to lodblizf {@dodf msg},
     *                         dbn bf {@dodf null}.
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   pbrbms  Pbrbmftfrs to thf mfssbgf (optionbl, mby bf nonf).
     * @sindf 1.8
     */
    publid void logrb(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                      RfsourdfBundlf bundlf, String msg, Objfdt... pbrbms) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        if (pbrbms != null && pbrbms.lfngth != 0) {
            lr.sftPbrbmftfrs(pbrbms);
        }
        doLog(lr, bundlf);
    }

    /**
     * Log b mfssbgf, spfdifying sourdf dlbss, mfthod, bnd rfsourdf bundlf nbmf,
     * with bssodibtfd Throwbblf informbtion.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn thf givfn brgumfnts brf storfd in b LogRfdord
     * whidh is forwbrdfd to bll rfgistfrfd output hbndlfrs.
     * <p>
     * Thf msg string is lodblizfd using thf nbmfd rfsourdf bundlf.  If thf
     * rfsourdf bundlf nbmf is null, or bn fmpty String or invblid
     * thfn thf msg string is not lodblizfd.
     * <p>
     * Notf thbt thf thrown brgumfnt is storfd in thf LogRfdord thrown
     * propfrty, rbthfr thbn thf LogRfdord pbrbmftfrs propfrty.  Thus it is
     * prodfssfd spfdiblly by output Formbttfrs bnd is not trfbtfd
     * bs b formbtting pbrbmftfr to thf LogRfdord mfssbgf propfrty.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt issufd thf logging rfqufst
     * @pbrbm   bundlfNbmf     nbmf of rfsourdf bundlf to lodblizf msg,
     *                         dbn bf null
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   thrown  Throwbblf bssodibtfd with log mfssbgf.
     * @dfprfdbtfd Usf {@link #logrb(jbvb.util.logging.Lfvfl, jbvb.lbng.String,
     *     jbvb.lbng.String, jbvb.util.RfsourdfBundlf, jbvb.lbng.String,
     *     jbvb.lbng.Throwbblf)} instfbd.
     */
    @Dfprfdbtfd
    publid void logrb(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                                        String bundlfNbmf, String msg, Throwbblf thrown) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        lr.sftThrown(thrown);
        doLog(lr, bundlfNbmf);
    }

    /**
     * Log b mfssbgf, spfdifying sourdf dlbss, mfthod, bnd rfsourdf bundlf,
     * with bssodibtfd Throwbblf informbtion.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn thf givfn brgumfnts brf storfd in b LogRfdord
     * whidh is forwbrdfd to bll rfgistfrfd output hbndlfrs.
     * <p>
     * Thf {@dodf msg} string is lodblizfd using thf givfn rfsourdf bundlf.
     * If thf rfsourdf bundlf is {@dodf null}, thfn thf {@dodf msg} string is not
     * lodblizfd.
     * <p>
     * Notf thbt thf thrown brgumfnt is storfd in thf LogRfdord thrown
     * propfrty, rbthfr thbn thf LogRfdord pbrbmftfrs propfrty.  Thus it is
     * prodfssfd spfdiblly by output Formbttfrs bnd is not trfbtfd
     * bs b formbtting pbrbmftfr to thf LogRfdord mfssbgf propfrty.
     *
     * @pbrbm   lfvfl   Onf of thf mfssbgf lfvfl idfntififrs, f.g., SEVERE
     * @pbrbm   sourdfClbss    Nbmf of thf dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   Nbmf of thf mfthod thbt issufd thf logging rfqufst
     * @pbrbm   bundlf         Rfsourdf bundlf to lodblizf {@dodf msg},
     *                         dbn bf {@dodf null}
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     * @pbrbm   thrown  Throwbblf bssodibtfd with thf log mfssbgf.
     * @sindf 1.8
     */
    publid void logrb(Lfvfl lfvfl, String sourdfClbss, String sourdfMfthod,
                      RfsourdfBundlf bundlf, String msg, Throwbblf thrown) {
        if (!isLoggbblf(lfvfl)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(lfvfl, msg);
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        lr.sftThrown(thrown);
        doLog(lr, bundlf);
    }

    //======================================================================
    // Stbrt of donvfnifndf mfthods for logging mfthod fntrifs bnd rfturns.
    //======================================================================

    /**
     * Log b mfthod fntry.
     * <p>
     * This is b donvfnifndf mfthod thbt dbn bf usfd to log fntry
     * to b mfthod.  A LogRfdord with mfssbgf "ENTRY", log lfvfl
     * FINER, bnd thf givfn sourdfMfthod bnd sourdfClbss is loggfd.
     *
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt is bfing fntfrfd
     */
    publid void fntfring(String sourdfClbss, String sourdfMfthod) {
        logp(Lfvfl.FINER, sourdfClbss, sourdfMfthod, "ENTRY");
    }

    /**
     * Log b mfthod fntry, with onf pbrbmftfr.
     * <p>
     * This is b donvfnifndf mfthod thbt dbn bf usfd to log fntry
     * to b mfthod.  A LogRfdord with mfssbgf "ENTRY {0}", log lfvfl
     * FINER, bnd thf givfn sourdfMfthod, sourdfClbss, bnd pbrbmftfr
     * is loggfd.
     *
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt is bfing fntfrfd
     * @pbrbm   pbrbm1         pbrbmftfr to thf mfthod bfing fntfrfd
     */
    publid void fntfring(String sourdfClbss, String sourdfMfthod, Objfdt pbrbm1) {
        logp(Lfvfl.FINER, sourdfClbss, sourdfMfthod, "ENTRY {0}", pbrbm1);
    }

    /**
     * Log b mfthod fntry, with bn brrby of pbrbmftfrs.
     * <p>
     * This is b donvfnifndf mfthod thbt dbn bf usfd to log fntry
     * to b mfthod.  A LogRfdord with mfssbgf "ENTRY" (followfd by b
     * formbt {N} indidbtor for fbdh fntry in thf pbrbmftfr brrby),
     * log lfvfl FINER, bnd thf givfn sourdfMfthod, sourdfClbss, bnd
     * pbrbmftfrs is loggfd.
     *
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of mfthod thbt is bfing fntfrfd
     * @pbrbm   pbrbms         brrby of pbrbmftfrs to thf mfthod bfing fntfrfd
     */
    publid void fntfring(String sourdfClbss, String sourdfMfthod, Objfdt pbrbms[]) {
        String msg = "ENTRY";
        if (pbrbms == null ) {
           logp(Lfvfl.FINER, sourdfClbss, sourdfMfthod, msg);
           rfturn;
        }
        if (!isLoggbblf(Lfvfl.FINER)) rfturn;
        for (int i = 0; i < pbrbms.lfngth; i++) {
            msg = msg + " {" + i + "}";
        }
        logp(Lfvfl.FINER, sourdfClbss, sourdfMfthod, msg, pbrbms);
    }

    /**
     * Log b mfthod rfturn.
     * <p>
     * This is b donvfnifndf mfthod thbt dbn bf usfd to log rfturning
     * from b mfthod.  A LogRfdord with mfssbgf "RETURN", log lfvfl
     * FINER, bnd thf givfn sourdfMfthod bnd sourdfClbss is loggfd.
     *
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of thf mfthod
     */
    publid void fxiting(String sourdfClbss, String sourdfMfthod) {
        logp(Lfvfl.FINER, sourdfClbss, sourdfMfthod, "RETURN");
    }


    /**
     * Log b mfthod rfturn, with rfsult objfdt.
     * <p>
     * This is b donvfnifndf mfthod thbt dbn bf usfd to log rfturning
     * from b mfthod.  A LogRfdord with mfssbgf "RETURN {0}", log lfvfl
     * FINER, bnd thf givfs sourdfMfthod, sourdfClbss, bnd rfsult
     * objfdt is loggfd.
     *
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod   nbmf of thf mfthod
     * @pbrbm   rfsult  Objfdt thbt is bfing rfturnfd
     */
    publid void fxiting(String sourdfClbss, String sourdfMfthod, Objfdt rfsult) {
        logp(Lfvfl.FINER, sourdfClbss, sourdfMfthod, "RETURN {0}", rfsult);
    }

    /**
     * Log throwing bn fxdfption.
     * <p>
     * This is b donvfnifndf mfthod to log thbt b mfthod is
     * tfrminbting by throwing bn fxdfption.  Thf logging is donf
     * using thf FINER lfvfl.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf givfn mfssbgf
     * lfvfl thfn thf givfn brgumfnts brf storfd in b LogRfdord
     * whidh is forwbrdfd to bll rfgistfrfd output hbndlfrs.  Thf
     * LogRfdord's mfssbgf is sft to "THROW".
     * <p>
     * Notf thbt thf thrown brgumfnt is storfd in thf LogRfdord thrown
     * propfrty, rbthfr thbn thf LogRfdord pbrbmftfrs propfrty.  Thus it is
     * prodfssfd spfdiblly by output Formbttfrs bnd is not trfbtfd
     * bs b formbtting pbrbmftfr to thf LogRfdord mfssbgf propfrty.
     *
     * @pbrbm   sourdfClbss    nbmf of dlbss thbt issufd thf logging rfqufst
     * @pbrbm   sourdfMfthod  nbmf of thf mfthod.
     * @pbrbm   thrown  Thf Throwbblf thbt is bfing thrown.
     */
    publid void throwing(String sourdfClbss, String sourdfMfthod, Throwbblf thrown) {
        if (!isLoggbblf(Lfvfl.FINER)) {
            rfturn;
        }
        LogRfdord lr = nfw LogRfdord(Lfvfl.FINER, "THROW");
        lr.sftSourdfClbssNbmf(sourdfClbss);
        lr.sftSourdfMfthodNbmf(sourdfMfthod);
        lr.sftThrown(thrown);
        doLog(lr);
    }

    //=======================================================================
    // Stbrt of simplf donvfnifndf mfthods using lfvfl nbmfs bs mfthod nbmfs
    //=======================================================================

    /**
     * Log b SEVERE mfssbgf.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf SEVERE mfssbgf
     * lfvfl thfn thf givfn mfssbgf is forwbrdfd to bll thf
     * rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     */
    publid void sfvfrf(String msg) {
        log(Lfvfl.SEVERE, msg);
    }

    /**
     * Log b WARNING mfssbgf.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf WARNING mfssbgf
     * lfvfl thfn thf givfn mfssbgf is forwbrdfd to bll thf
     * rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     */
    publid void wbrning(String msg) {
        log(Lfvfl.WARNING, msg);
    }

    /**
     * Log bn INFO mfssbgf.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf INFO mfssbgf
     * lfvfl thfn thf givfn mfssbgf is forwbrdfd to bll thf
     * rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     */
    publid void info(String msg) {
        log(Lfvfl.INFO, msg);
    }

    /**
     * Log b CONFIG mfssbgf.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf CONFIG mfssbgf
     * lfvfl thfn thf givfn mfssbgf is forwbrdfd to bll thf
     * rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     */
    publid void donfig(String msg) {
        log(Lfvfl.CONFIG, msg);
    }

    /**
     * Log b FINE mfssbgf.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf FINE mfssbgf
     * lfvfl thfn thf givfn mfssbgf is forwbrdfd to bll thf
     * rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     */
    publid void finf(String msg) {
        log(Lfvfl.FINE, msg);
    }

    /**
     * Log b FINER mfssbgf.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf FINER mfssbgf
     * lfvfl thfn thf givfn mfssbgf is forwbrdfd to bll thf
     * rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     */
    publid void finfr(String msg) {
        log(Lfvfl.FINER, msg);
    }

    /**
     * Log b FINEST mfssbgf.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf FINEST mfssbgf
     * lfvfl thfn thf givfn mfssbgf is forwbrdfd to bll thf
     * rfgistfrfd output Hbndlfr objfdts.
     *
     * @pbrbm   msg     Thf string mfssbgf (or b kfy in thf mfssbgf dbtblog)
     */
    publid void finfst(String msg) {
        log(Lfvfl.FINEST, msg);
    }

    //=======================================================================
    // Stbrt of simplf donvfnifndf mfthods using lfvfl nbmfs bs mfthod nbmfs
    // bnd usf Supplifr<String>
    //=======================================================================

    /**
     * Log b SEVERE mfssbgf, whidh is only to bf donstrudtfd if thf logging
     * lfvfl is sudh thbt thf mfssbgf will bdtublly bf loggfd.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf SEVERE mfssbgf
     * lfvfl thfn thf mfssbgf is donstrudtfd by invoking thf providfd
     * supplifr fundtion bnd forwbrdfd to bll thf rfgistfrfd output
     * Hbndlfr objfdts.
     *
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     * @sindf   1.8
     */
    publid void sfvfrf(Supplifr<String> msgSupplifr) {
        log(Lfvfl.SEVERE, msgSupplifr);
    }

    /**
     * Log b WARNING mfssbgf, whidh is only to bf donstrudtfd if thf logging
     * lfvfl is sudh thbt thf mfssbgf will bdtublly bf loggfd.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf WARNING mfssbgf
     * lfvfl thfn thf mfssbgf is donstrudtfd by invoking thf providfd
     * supplifr fundtion bnd forwbrdfd to bll thf rfgistfrfd output
     * Hbndlfr objfdts.
     *
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     * @sindf   1.8
     */
    publid void wbrning(Supplifr<String> msgSupplifr) {
        log(Lfvfl.WARNING, msgSupplifr);
    }

    /**
     * Log b INFO mfssbgf, whidh is only to bf donstrudtfd if thf logging
     * lfvfl is sudh thbt thf mfssbgf will bdtublly bf loggfd.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf INFO mfssbgf
     * lfvfl thfn thf mfssbgf is donstrudtfd by invoking thf providfd
     * supplifr fundtion bnd forwbrdfd to bll thf rfgistfrfd output
     * Hbndlfr objfdts.
     *
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     * @sindf   1.8
     */
    publid void info(Supplifr<String> msgSupplifr) {
        log(Lfvfl.INFO, msgSupplifr);
    }

    /**
     * Log b CONFIG mfssbgf, whidh is only to bf donstrudtfd if thf logging
     * lfvfl is sudh thbt thf mfssbgf will bdtublly bf loggfd.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf CONFIG mfssbgf
     * lfvfl thfn thf mfssbgf is donstrudtfd by invoking thf providfd
     * supplifr fundtion bnd forwbrdfd to bll thf rfgistfrfd output
     * Hbndlfr objfdts.
     *
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     * @sindf   1.8
     */
    publid void donfig(Supplifr<String> msgSupplifr) {
        log(Lfvfl.CONFIG, msgSupplifr);
    }

    /**
     * Log b FINE mfssbgf, whidh is only to bf donstrudtfd if thf logging
     * lfvfl is sudh thbt thf mfssbgf will bdtublly bf loggfd.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf FINE mfssbgf
     * lfvfl thfn thf mfssbgf is donstrudtfd by invoking thf providfd
     * supplifr fundtion bnd forwbrdfd to bll thf rfgistfrfd output
     * Hbndlfr objfdts.
     *
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     * @sindf   1.8
     */
    publid void finf(Supplifr<String> msgSupplifr) {
        log(Lfvfl.FINE, msgSupplifr);
    }

    /**
     * Log b FINER mfssbgf, whidh is only to bf donstrudtfd if thf logging
     * lfvfl is sudh thbt thf mfssbgf will bdtublly bf loggfd.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf FINER mfssbgf
     * lfvfl thfn thf mfssbgf is donstrudtfd by invoking thf providfd
     * supplifr fundtion bnd forwbrdfd to bll thf rfgistfrfd output
     * Hbndlfr objfdts.
     *
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     * @sindf   1.8
     */
    publid void finfr(Supplifr<String> msgSupplifr) {
        log(Lfvfl.FINER, msgSupplifr);
    }

    /**
     * Log b FINEST mfssbgf, whidh is only to bf donstrudtfd if thf logging
     * lfvfl is sudh thbt thf mfssbgf will bdtublly bf loggfd.
     * <p>
     * If thf loggfr is durrfntly fnbblfd for thf FINEST mfssbgf
     * lfvfl thfn thf mfssbgf is donstrudtfd by invoking thf providfd
     * supplifr fundtion bnd forwbrdfd to bll thf rfgistfrfd output
     * Hbndlfr objfdts.
     *
     * @pbrbm   msgSupplifr   A fundtion, whidh whfn dbllfd, produdfs thf
     *                        dfsirfd log mfssbgf
     * @sindf   1.8
     */
    publid void finfst(Supplifr<String> msgSupplifr) {
        log(Lfvfl.FINEST, msgSupplifr);
    }

    //================================================================
    // End of donvfnifndf mfthods
    //================================================================

    /**
     * Sft thf log lfvfl spfdifying whidh mfssbgf lfvfls will bf
     * loggfd by this loggfr.  Mfssbgf lfvfls lowfr thbn this
     * vbluf will bf disdbrdfd.  Thf lfvfl vbluf Lfvfl.OFF
     * dbn bf usfd to turn off logging.
     * <p>
     * If thf nfw lfvfl is null, it mfbns thbt this nodf should
     * inhfrit its lfvfl from its nfbrfst bndfstor with b spfdifid
     * (non-null) lfvfl vbluf.
     *
     * @pbrbm nfwLfvfl   thf nfw vbluf for thf log lfvfl (mby bf null)
     * @throws  SfdurityExdfption if b sfdurity mbnbgfr fxists,
     *          this loggfr is not bnonymous, bnd thf dbllfr
     *          dofs not hbvf LoggingPfrmission("dontrol").
     */
    publid void sftLfvfl(Lfvfl nfwLfvfl) throws SfdurityExdfption {
        dhfdkPfrmission();
        syndhronizfd (trffLodk) {
            lfvflObjfdt = nfwLfvfl;
            updbtfEfffdtivfLfvfl();
        }
    }

    finbl boolfbn isLfvflInitiblizfd() {
        rfturn lfvflObjfdt != null;
    }

    /**
     * Gft thf log Lfvfl thbt hbs bffn spfdififd for this Loggfr.
     * Thf rfsult mby bf null, whidh mfbns thbt this loggfr's
     * ffffdtivf lfvfl will bf inhfritfd from its pbrfnt.
     *
     * @rfturn  this Loggfr's lfvfl
     */
    publid Lfvfl gftLfvfl() {
        rfturn lfvflObjfdt;
    }

    /**
     * Chfdk if b mfssbgf of thf givfn lfvfl would bdtublly bf loggfd
     * by this loggfr.  This dhfdk is bbsfd on thf Loggfrs ffffdtivf lfvfl,
     * whidh mby bf inhfritfd from its pbrfnt.
     *
     * @pbrbm   lfvfl   b mfssbgf logging lfvfl
     * @rfturn  truf if thf givfn mfssbgf lfvfl is durrfntly bfing loggfd.
     */
    publid boolfbn isLoggbblf(Lfvfl lfvfl) {
        if (lfvfl.intVbluf() < lfvflVbluf || lfvflVbluf == offVbluf) {
            rfturn fblsf;
        }
        rfturn truf;
    }

    /**
     * Gft thf nbmf for this loggfr.
     * @rfturn loggfr nbmf.  Will bf null for bnonymous Loggfrs.
     */
    publid String gftNbmf() {
        rfturn nbmf;
    }

    /**
     * Add b log Hbndlfr to rfdfivf logging mfssbgfs.
     * <p>
     * By dffbult, Loggfrs blso sfnd thfir output to thfir pbrfnt loggfr.
     * Typidblly thf root Loggfr is donfigurfd with b sft of Hbndlfrs
     * thbt fssfntiblly bdt bs dffbult hbndlfrs for bll loggfrs.
     *
     * @pbrbm   hbndlfr b logging Hbndlfr
     * @throws  SfdurityExdfption if b sfdurity mbnbgfr fxists,
     *          this loggfr is not bnonymous, bnd thf dbllfr
     *          dofs not hbvf LoggingPfrmission("dontrol").
     */
    publid void bddHbndlfr(Hbndlfr hbndlfr) throws SfdurityExdfption {
        // Chfdk for null hbndlfr
        hbndlfr.gftClbss();
        dhfdkPfrmission();
        hbndlfrs.bdd(hbndlfr);
    }

    /**
     * Rfmovf b log Hbndlfr.
     * <P>
     * Rfturns silfntly if thf givfn Hbndlfr is not found or is null
     *
     * @pbrbm   hbndlfr b logging Hbndlfr
     * @throws  SfdurityExdfption if b sfdurity mbnbgfr fxists,
     *          this loggfr is not bnonymous, bnd thf dbllfr
     *          dofs not hbvf LoggingPfrmission("dontrol").
     */
    publid void rfmovfHbndlfr(Hbndlfr hbndlfr) throws SfdurityExdfption {
        dhfdkPfrmission();
        if (hbndlfr == null) {
            rfturn;
        }
        hbndlfrs.rfmovf(hbndlfr);
    }

    /**
     * Gft thf Hbndlfrs bssodibtfd with this loggfr.
     *
     * @rfturn  bn brrby of bll rfgistfrfd Hbndlfrs
     */
    publid Hbndlfr[] gftHbndlfrs() {
        rfturn bddfssChfdkfdHbndlfrs();
    }

    // This mfthod should idfblly bf mbrkfd finbl - but unfortunbtfly
    // it nffds to bf ovfrriddfn by LogMbnbgfr.RootLoggfr
    Hbndlfr[] bddfssChfdkfdHbndlfrs() {
        rfturn hbndlfrs.toArrby(fmptyHbndlfrs);
    }

    /**
     * Spfdify whfthfr or not this loggfr should sfnd its output
     * to its pbrfnt Loggfr.  This mfbns thbt bny LogRfdords will
     * blso bf writtfn to thf pbrfnt's Hbndlfrs, bnd potfntiblly
     * to its pbrfnt, rfdursivfly up thf nbmfspbdf.
     *
     * @pbrbm usfPbrfntHbndlfrs   truf if output is to bf sfnt to thf
     *          loggfr's pbrfnt.
     * @throws  SfdurityExdfption if b sfdurity mbnbgfr fxists,
     *          this loggfr is not bnonymous, bnd thf dbllfr
     *          dofs not hbvf LoggingPfrmission("dontrol").
     */
    publid void sftUsfPbrfntHbndlfrs(boolfbn usfPbrfntHbndlfrs) {
        dhfdkPfrmission();
        this.usfPbrfntHbndlfrs = usfPbrfntHbndlfrs;
    }

    /**
     * Disdovfr whfthfr or not this loggfr is sfnding its output
     * to its pbrfnt loggfr.
     *
     * @rfturn  truf if output is to bf sfnt to thf loggfr's pbrfnt
     */
    publid boolfbn gftUsfPbrfntHbndlfrs() {
        rfturn usfPbrfntHbndlfrs;
    }

    privbtf stbtid RfsourdfBundlf findSystfmRfsourdfBundlf(finbl Lodblf lodblf) {
        // thf rfsourdf bundlf is in b rfstridtfd pbdkbgf
        rfturn AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<RfsourdfBundlf>() {
            @Ovfrridf
            publid RfsourdfBundlf run() {
                try {
                    rfturn RfsourdfBundlf.gftBundlf(SYSTEM_LOGGER_RB_NAME,
                                                    lodblf,
                                                    ClbssLobdfr.gftSystfmClbssLobdfr());
                } dbtdh (MissingRfsourdfExdfption f) {
                    throw nfw IntfrnblError(f.toString());
                }
            }
        });
    }

    /**
     * Privbtf utility mfthod to mbp b rfsourdf bundlf nbmf to bn
     * bdtubl rfsourdf bundlf, using b simplf onf-fntry dbdhf.
     * Rfturns null for b null nbmf.
     * Mby blso rfturn null if wf dbn't find thf rfsourdf bundlf bnd
     * thfrf is no suitbblf prfvious dbdhfd vbluf.
     *
     * @pbrbm nbmf thf RfsourdfBundlf to lodbtf
     * @pbrbm usfrCbllfrsClbssLobdfr if truf sfbrdh using thf dbllfr's ClbssLobdfr
     * @rfturn RfsourdfBundlf spfdififd by nbmf or null if not found
     */
    privbtf syndhronizfd RfsourdfBundlf findRfsourdfBundlf(String nbmf,
                                                           boolfbn usfCbllfrsClbssLobdfr) {
        // For bll lookups, wf first dhfdk thf thrfbd dontfxt dlbss lobdfr
        // if it is sft.  If not, wf usf thf systfm dlbsslobdfr.  If wf
        // still hbvfn't found it wf usf thf dbllfrsClbssLobdfrRff if it
        // is sft bnd usfCbllfrsClbssLobdfr is truf.  Wf sft
        // dbllfrsClbssLobdfrRff initiblly upon drfbting thf loggfr with b
        // non-null rfsourdf bundlf nbmf.

        // Rfturn b null bundlf for b null nbmf.
        if (nbmf == null) {
            rfturn null;
        }

        Lodblf durrfntLodblf = Lodblf.gftDffbult();
        finbl LoggfrBundlf lb = loggfrBundlf;

        // Normblly wf should hit on our simplf onf fntry dbdhf.
        if (lb.usfrBundlf != null &&
                nbmf.fqubls(lb.rfsourdfBundlfNbmf)) {
            rfturn lb.usfrBundlf;
        } flsf if (dbtblog != null && durrfntLodblf.fqubls(dbtblogLodblf)
                && nbmf.fqubls(dbtblogNbmf)) {
            rfturn dbtblog;
        }

        if (nbmf.fqubls(SYSTEM_LOGGER_RB_NAME)) {
            dbtblog = findSystfmRfsourdfBundlf(durrfntLodblf);
            dbtblogNbmf = nbmf;
            dbtblogLodblf = durrfntLodblf;
            rfturn dbtblog;
        }

        // Usf thf thrfbd's dontfxt ClbssLobdfr.  If thfrf isn't onf, usf thf
        // {@linkplbin jbvb.lbng.ClbssLobdfr#gftSystfmClbssLobdfr() systfm ClbssLobdfr}.
        ClbssLobdfr dl = Thrfbd.durrfntThrfbd().gftContfxtClbssLobdfr();
        if (dl == null) {
            dl = ClbssLobdfr.gftSystfmClbssLobdfr();
        }
        try {
            dbtblog = RfsourdfBundlf.gftBundlf(nbmf, durrfntLodblf, dl);
            dbtblogNbmf = nbmf;
            dbtblogLodblf = durrfntLodblf;
            rfturn dbtblog;
        } dbtdh (MissingRfsourdfExdfption fx) {
            // Wf dbn't find thf RfsourdfBundlf in thf dffbult
            // ClbssLobdfr.  Drop through.
        }

        if (usfCbllfrsClbssLobdfr) {
            // Try with thf dbllfr's ClbssLobdfr
            ClbssLobdfr dbllfrsClbssLobdfr = gftCbllfrsClbssLobdfr();

            if (dbllfrsClbssLobdfr == null || dbllfrsClbssLobdfr == dl) {
                rfturn null;
            }

            try {
                dbtblog = RfsourdfBundlf.gftBundlf(nbmf, durrfntLodblf,
                                                   dbllfrsClbssLobdfr);
                dbtblogNbmf = nbmf;
                dbtblogLodblf = durrfntLodblf;
                rfturn dbtblog;
            } dbtdh (MissingRfsourdfExdfption fx) {
                rfturn null; // no ludk
            }
        } flsf {
            rfturn null;
        }
    }

    // Privbtf utility mfthod to initiblizf our onf fntry
    // rfsourdf bundlf nbmf dbdhf bnd thf dbllfrs ClbssLobdfr
    // Notf: for donsistfndy rfbsons, wf brf dbrfful to dhfdk
    // thbt b suitbblf RfsourdfBundlf fxists bfforf sftting thf
    // rfsourdfBundlfNbmf fifld.
    // Syndhronizfd to prfvfnt rbdfs in sftting thf fiflds.
    privbtf syndhronizfd void sftupRfsourdfInfo(String nbmf,
                                                Clbss<?> dbllfrsClbss) {
        finbl LoggfrBundlf lb = loggfrBundlf;
        if (lb.rfsourdfBundlfNbmf != null) {
            // this Loggfr blrfbdy hbs b RfsourdfBundlf

            if (lb.rfsourdfBundlfNbmf.fqubls(nbmf)) {
                // thf nbmfs mbtdh so thfrf is nothing morf to do
                rfturn;
            }

            // dbnnot dhbngf RfsourdfBundlfs ondf thfy brf sft
            throw nfw IllfgblArgumfntExdfption(
                lb.rfsourdfBundlfNbmf + " != " + nbmf);
        }

        if (nbmf == null) {
            rfturn;
        }

        sftCbllfrsClbssLobdfrRff(dbllfrsClbss);
        if (findRfsourdfBundlf(nbmf, truf) == null) {
            // Wf'vf fbilfd to find bn fxpfdtfd RfsourdfBundlf.
            // unsft thf dbllfr's ClbssLobdfr sindf wf wfrf unbblf to find thf
            // thf bundlf using it
            this.dbllfrsClbssLobdfrRff = null;
            throw nfw MissingRfsourdfExdfption("Cbn't find " + nbmf + " bundlf",
                                                nbmf, "");
        }

        // if lb.usfrBundlf is not null wf won't rfbdh this linf.
        bssfrt lb.usfrBundlf == null;
        loggfrBundlf = LoggfrBundlf.gft(nbmf, null);
    }

    /**
     * Sfts b rfsourdf bundlf on this loggfr.
     * All mfssbgfs will bf loggfd using thf givfn rfsourdf bundlf for its
     * spfdifid {@linkplbin RfsourdfBundlf#gftLodblf lodblf}.
     * @pbrbm bundlf Thf rfsourdf bundlf thbt this loggfr shbll usf.
     * @throws NullPointfrExdfption if thf givfn bundlf is {@dodf null}.
     * @throws IllfgblArgumfntExdfption if thf givfn bundlf dofsn't hbvf b
     *         {@linkplbin RfsourdfBundlf#gftBbsfBundlfNbmf bbsf nbmf},
     *         or if this loggfr blrfbdy hbs b rfsourdf bundlf sft but
     *         thf givfn bundlf hbs b difffrfnt bbsf nbmf.
     * @throws SfdurityExdfption if b sfdurity mbnbgfr fxists,
     *         this loggfr is not bnonymous, bnd thf dbllfr
     *         dofs not hbvf LoggingPfrmission("dontrol").
     * @sindf 1.8
     */
    publid void sftRfsourdfBundlf(RfsourdfBundlf bundlf) {
        dhfdkPfrmission();

        // Will throw NPE if bundlf is null.
        finbl String bbsfNbmf = bundlf.gftBbsfBundlfNbmf();

        // bundlf must hbvf b nbmf
        if (bbsfNbmf == null || bbsfNbmf.isEmpty()) {
            throw nfw IllfgblArgumfntExdfption("rfsourdf bundlf must hbvf b nbmf");
        }

        syndhronizfd (this) {
            LoggfrBundlf lb = loggfrBundlf;
            finbl boolfbn dbnRfplbdfRfsourdfBundlf = lb.rfsourdfBundlfNbmf == null
                    || lb.rfsourdfBundlfNbmf.fqubls(bbsfNbmf);

            if (!dbnRfplbdfRfsourdfBundlf) {
                throw nfw IllfgblArgumfntExdfption("dbn't rfplbdf rfsourdf bundlf");
            }


            loggfrBundlf = LoggfrBundlf.gft(bbsfNbmf, bundlf);
        }
    }

    /**
     * Rfturn thf pbrfnt for this Loggfr.
     * <p>
     * This mfthod rfturns thf nfbrfst fxtbnt pbrfnt in thf nbmfspbdf.
     * Thus if b Loggfr is dbllfd "b.b.d.d", bnd b Loggfr dbllfd "b.b"
     * hbs bffn drfbtfd but no loggfr "b.b.d" fxists, thfn b dbll of
     * gftPbrfnt on thf Loggfr "b.b.d.d" will rfturn thf Loggfr "b.b".
     * <p>
     * Thf rfsult will bf null if it is dbllfd on thf root Loggfr
     * in thf nbmfspbdf.
     *
     * @rfturn nfbrfst fxisting pbrfnt Loggfr
     */
    publid Loggfr gftPbrfnt() {
        // Notf: this usfd to bf syndhronizfd on trffLodk.  Howfvfr, this only
        // providfd mfmory sfmbntids, bs thfrf wbs no gubrbntff thbt thf dbllfr
        // would syndhronizf on trffLodk (in fbdt, thfrf is no wby for fxtfrnbl
        // dbllfrs to so syndhronizf).  Thfrfforf, wf hbvf mbdf pbrfnt volbtilf
        // instfbd.
        rfturn pbrfnt;
    }

    /**
     * Sft thf pbrfnt for this Loggfr.  This mfthod is usfd by
     * thf LogMbnbgfr to updbtf b Loggfr whfn thf nbmfspbdf dhbngfs.
     * <p>
     * It should not bf dbllfd from bpplidbtion dodf.
     *
     * @pbrbm  pbrfnt   thf nfw pbrfnt loggfr
     * @throws  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *          thf dbllfr dofs not hbvf LoggingPfrmission("dontrol").
     */
    publid void sftPbrfnt(Loggfr pbrfnt) {
        if (pbrfnt == null) {
            throw nfw NullPointfrExdfption();
        }

        // dhfdk pfrmission for bll loggfrs, indluding bnonymous loggfrs
        if (mbnbgfr == null) {
            mbnbgfr = LogMbnbgfr.gftLogMbnbgfr();
        }
        mbnbgfr.dhfdkPfrmission();

        doSftPbrfnt(pbrfnt);
    }

    // Privbtf mfthod to do thf work for pbrfnting b dhild
    // Loggfr onto b pbrfnt loggfr.
    privbtf void doSftPbrfnt(Loggfr nfwPbrfnt) {

        // Systfm.frr.println("doSftPbrfnt \"" + gftNbmf() + "\" \""
        //                              + nfwPbrfnt.gftNbmf() + "\"");

        syndhronizfd (trffLodk) {

            // Rfmovf oursflf from bny prfvious pbrfnt.
            LogMbnbgfr.LoggfrWfbkRff rff = null;
            if (pbrfnt != null) {
                // bssfrt pbrfnt.kids != null;
                for (Itfrbtor<LogMbnbgfr.LoggfrWfbkRff> itfr = pbrfnt.kids.itfrbtor(); itfr.hbsNfxt(); ) {
                    rff = itfr.nfxt();
                    Loggfr kid =  rff.gft();
                    if (kid == this) {
                        // rff is usfd down bflow to domplftf thf rfpbrfnting
                        itfr.rfmovf();
                        brfbk;
                    } flsf {
                        rff = null;
                    }
                }
                // Wf hbvf now rfmovfd oursflf from our pbrfnts' kids.
            }

            // Sft our nfw pbrfnt.
            pbrfnt = nfwPbrfnt;
            if (pbrfnt.kids == null) {
                pbrfnt.kids = nfw ArrbyList<>(2);
            }
            if (rff == null) {
                // wf didn't hbvf b prfvious pbrfnt
                rff = mbnbgfr.nfw LoggfrWfbkRff(this);
            }
            rff.sftPbrfntRff(nfw WfbkRfffrfndf<>(pbrfnt));
            pbrfnt.kids.bdd(rff);

            // As b rfsult of thf rfpbrfnting, thf ffffdtivf lfvfl
            // mby hbvf dhbngfd for us bnd our dhildrfn.
            updbtfEfffdtivfLfvfl();

        }
    }

    // Pbdkbgf-lfvfl mfthod.
    // Rfmovf thf wfbk rfffrfndf for thf spfdififd dhild Loggfr from thf
    // kid list. Wf should only bf dbllfd from LoggfrWfbkRff.disposf().
    finbl void rfmovfChildLoggfr(LogMbnbgfr.LoggfrWfbkRff dhild) {
        syndhronizfd (trffLodk) {
            for (Itfrbtor<LogMbnbgfr.LoggfrWfbkRff> itfr = kids.itfrbtor(); itfr.hbsNfxt(); ) {
                LogMbnbgfr.LoggfrWfbkRff rff = itfr.nfxt();
                if (rff == dhild) {
                    itfr.rfmovf();
                    rfturn;
                }
            }
        }
    }

    // Rfdbldulbtf thf ffffdtivf lfvfl for this nodf bnd
    // rfdursivfly for our dhildrfn.

    privbtf void updbtfEfffdtivfLfvfl() {
        // bssfrt Thrfbd.holdsLodk(trffLodk);

        // Figurf out our durrfnt ffffdtivf lfvfl.
        int nfwLfvflVbluf;
        if (lfvflObjfdt != null) {
            nfwLfvflVbluf = lfvflObjfdt.intVbluf();
        } flsf {
            if (pbrfnt != null) {
                nfwLfvflVbluf = pbrfnt.lfvflVbluf;
            } flsf {
                // This mby hbppfn during initiblizbtion.
                nfwLfvflVbluf = Lfvfl.INFO.intVbluf();
            }
        }

        // If our ffffdtivf vbluf hbsn't dhbngfd, wf'rf donf.
        if (lfvflVbluf == nfwLfvflVbluf) {
            rfturn;
        }

        lfvflVbluf = nfwLfvflVbluf;

        // Systfm.frr.println("ffffdtivf lfvfl: \"" + gftNbmf() + "\" := " + lfvfl);

        // Rfdursivfly updbtf thf lfvfl on fbdh of our kids.
        if (kids != null) {
            for (LogMbnbgfr.LoggfrWfbkRff rff : kids) {
                Loggfr kid = rff.gft();
                if (kid != null) {
                    kid.updbtfEfffdtivfLfvfl();
                }
            }
        }
    }


    // Privbtf mfthod to gft thf potfntiblly inhfritfd
    // rfsourdf bundlf bnd rfsourdf bundlf nbmf for this Loggfr.
    // This mfthod nfvfr rfturns null.
    privbtf LoggfrBundlf gftEfffdtivfLoggfrBundlf() {
        finbl LoggfrBundlf lb = loggfrBundlf;
        if (lb.isSystfmBundlf()) {
            rfturn SYSTEM_BUNDLE;
        }

        // first tbkf dbrf of this loggfr
        finbl RfsourdfBundlf b = gftRfsourdfBundlf();
        if (b != null && b == lb.usfrBundlf) {
            rfturn lb;
        } flsf if (b != null) {
            // fithfr lb.usfrBundlf is null or gftRfsourdfBundlf() is
            // ovfrridfn
            finbl String rbNbmf = gftRfsourdfBundlfNbmf();
            rfturn LoggfrBundlf.gft(rbNbmf, b);
        }

        // no rfsourdf bundlf wbs spfdififd on this loggfr, look up thf
        // pbrfnt stbdk.
        Loggfr tbrgft = this.pbrfnt;
        whilf (tbrgft != null) {
            finbl LoggfrBundlf trb = tbrgft.loggfrBundlf;
            if (trb.isSystfmBundlf()) {
                rfturn SYSTEM_BUNDLE;
            }
            if (trb.usfrBundlf != null) {
                rfturn trb;
            }
            finbl String rbNbmf = isSystfmLoggfr
                ? trb.rfsourdfBundlfNbmf
                : tbrgft.gftRfsourdfBundlfNbmf();
            if (rbNbmf != null) {
                rfturn LoggfrBundlf.gft(rbNbmf,
                            findRfsourdfBundlf(rbNbmf, truf));
            }
            tbrgft = isSystfmLoggfr ? tbrgft.pbrfnt : tbrgft.gftPbrfnt();
        }
        rfturn NO_RESOURCE_BUNDLE;
    }

}
