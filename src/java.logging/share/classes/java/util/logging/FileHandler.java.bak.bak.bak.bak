/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util.logging;

import stbtid jbvb.nio.filf.StbndbrdOpfnOption.APPEND;
import stbtid jbvb.nio.filf.StbndbrdOpfnOption.CREATE_NEW;
import stbtid jbvb.nio.filf.StbndbrdOpfnOption.WRITE;

import jbvb.io.BufffrfdOutputStrfbm;
import jbvb.io.Filf;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.nio.dhbnnfls.FilfChbnnfl;
import jbvb.nio.dhbnnfls.OvfrlbppingFilfLodkExdfption;
import jbvb.nio.filf.FilfAlrfbdyExistsExdfption;
import jbvb.nio.filf.Filfs;
import jbvb.nio.filf.LinkOption;
import jbvb.nio.filf.NoSudhFilfExdfption;
import jbvb.nio.filf.Pbth;
import jbvb.nio.filf.Pbths;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.util.HbshSft;
import jbvb.util.Sft;

/**
 * Simplf filf logging <tt>Hbndlfr</tt>.
 * <p>
 * Thf <tt>FilfHbndlfr</tt> dbn fithfr writf to b spfdififd filf,
 * or it dbn writf to b rotbting sft of filfs.
 * <p>
 * For b rotbting sft of filfs, bs fbdh filf rfbdhfs b givfn sizf
 * limit, it is dlosfd, rotbtfd out, bnd b nfw filf opfnfd.
 * Suddfssivfly oldfr filfs brf nbmfd by bdding "0", "1", "2",
 * ftd. into thf bbsf filfnbmf.
 * <p>
 * By dffbult bufffring is fnbblfd in thf IO librbrifs but fbdh log
 * rfdord is flushfd out whfn it is domplftf.
 * <p>
 * By dffbult thf <tt>XMLFormbttfr</tt> dlbss is usfd for formbtting.
 * <p>
 * <b>Configurbtion:</b>
 * By dffbult fbdh <tt>FilfHbndlfr</tt> is initiblizfd using thf following
 * <tt>LogMbnbgfr</tt> donfigurbtion propfrtifs whfrf <tt>&lt;hbndlfr-nbmf&gt;</tt>
 * rfffrs to thf fully-qublififd dlbss nbmf of thf hbndlfr.
 * If propfrtifs brf not dffinfd
 * (or hbvf invblid vblufs) thfn thf spfdififd dffbult vblufs brf usfd.
 * <ul>
 * <li>   &lt;hbndlfr-nbmf&gt;.lfvfl
 *        spfdififs thf dffbult lfvfl for thf <tt>Hbndlfr</tt>
 *        (dffbults to <tt>Lfvfl.ALL</tt>). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.filtfr
 *        spfdififs thf nbmf of b <tt>Filtfr</tt> dlbss to usf
 *        (dffbults to no <tt>Filtfr</tt>). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.formbttfr
 *        spfdififs thf nbmf of b <tt>Formbttfr</tt> dlbss to usf
 *        (dffbults to <tt>jbvb.util.logging.XMLFormbttfr</tt>) </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.fndoding
 *        thf nbmf of thf dhbrbdtfr sft fndoding to usf (dffbults to
 *        thf dffbult plbtform fndoding). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.limit
 *        spfdififs bn bpproximbtf mbximum bmount to writf (in bytfs)
 *        to bny onf filf.  If this is zfro, thfn thfrf is no limit.
 *        (Dffbults to no limit). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.dount
 *        spfdififs how mbny output filfs to dydlf through (dffbults to 1). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.pbttfrn
 *        spfdififs b pbttfrn for gfnfrbting thf output filf nbmf.  Sff
 *        bflow for dftbils. (Dffbults to "%h/jbvb%u.log"). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.bppfnd
 *        spfdififs whfthfr thf FilfHbndlfr should bppfnd onto
 *        bny fxisting filfs (dffbults to fblsf). </li>
 * </ul>
 * <p>
 * For fxbmplf, thf propfrtifs for {@dodf FilfHbndlfr} would bf:
 * <ul>
 * <li>   jbvb.util.logging.FilfHbndlfr.lfvfl=INFO </li>
 * <li>   jbvb.util.logging.FilfHbndlfr.formbttfr=jbvb.util.logging.SimplfFormbttfr </li>
 * </ul>
 * <p>
 * For b dustom hbndlfr, f.g. dom.foo.MyHbndlfr, thf propfrtifs would bf:
 * <ul>
 * <li>   dom.foo.MyHbndlfr.lfvfl=INFO </li>
 * <li>   dom.foo.MyHbndlfr.formbttfr=jbvb.util.logging.SimplfFormbttfr </li>
 * </ul>
 * <p>
 * A pbttfrn donsists of b string thbt indludfs thf following spfdibl
 * domponfnts thbt will bf rfplbdfd bt runtimf:
 * <ul>
 * <li>    "/"    thf lodbl pbthnbmf sfpbrbtor </li>
 * <li>     "%t"   thf systfm tfmporbry dirfdtory </li>
 * <li>     "%h"   thf vbluf of thf "usfr.homf" systfm propfrty </li>
 * <li>     "%g"   thf gfnfrbtion numbfr to distinguish rotbtfd logs </li>
 * <li>     "%u"   b uniquf numbfr to rfsolvf donflidts </li>
 * <li>     "%%"   trbnslbtfs to b singlf pfrdfnt sign "%" </li>
 * </ul>
 * If no "%g" fifld hbs bffn spfdififd bnd thf filf dount is grfbtfr
 * thbn onf, thfn thf gfnfrbtion numbfr will bf bddfd to thf fnd of
 * thf gfnfrbtfd filfnbmf, bftfr b dot.
 * <p>
 * Thus for fxbmplf b pbttfrn of "%t/jbvb%g.log" with b dount of 2
 * would typidblly dbusf log filfs to bf writtfn on Solbris to
 * /vbr/tmp/jbvb0.log bnd /vbr/tmp/jbvb1.log whfrfbs on Windows 95 thfy
 * would bf typidblly writtfn to C:\TEMP\jbvb0.log bnd C:\TEMP\jbvb1.log
 * <p>
 * Gfnfrbtion numbfrs follow thf sfqufndf 0, 1, 2, ftd.
 * <p>
 * Normblly thf "%u" uniquf fifld is sft to 0.  Howfvfr, if thf <tt>FilfHbndlfr</tt>
 * trifs to opfn thf filfnbmf bnd finds thf filf is durrfntly in usf by
 * bnothfr prodfss it will indrfmfnt thf uniquf numbfr fifld bnd try
 * bgbin.  This will bf rfpfbtfd until <tt>FilfHbndlfr</tt> finds b filf nbmf thbt
 * is  not durrfntly in usf. If thfrf is b donflidt bnd no "%u" fifld hbs
 * bffn spfdififd, it will bf bddfd bt thf fnd of thf filfnbmf bftfr b dot.
 * (This will bf bftfr bny butombtidblly bddfd gfnfrbtion numbfr.)
 * <p>
 * Thus if thrff prodfssfs wfrf bll trying to log to frfd%u.%g.txt thfn
 * thfy  might fnd up using frfd0.0.txt, frfd1.0.txt, frfd2.0.txt bs
 * thf first filf in thfir rotbting sfqufndfs.
 * <p>
 * Notf thbt thf usf of uniquf ids to bvoid donflidts is only gubrbntffd
 * to work rflibbly whfn using b lodbl disk filf systfm.
 *
 * @sindf 1.4
 */

publid dlbss FilfHbndlfr fxtfnds StrfbmHbndlfr {
    privbtf MftfrfdStrfbm mftfr;
    privbtf boolfbn bppfnd;
    privbtf int limit;       // zfro => no limit.
    privbtf int dount;
    privbtf String pbttfrn;
    privbtf String lodkFilfNbmf;
    privbtf FilfChbnnfl lodkFilfChbnnfl;
    privbtf Filf filfs[];
    privbtf stbtid finbl int MAX_LOCKS = 100;
    privbtf stbtid finbl Sft<String> lodks = nfw HbshSft<>();

    /**
     * A mftfrfd strfbm is b subdlbss of OutputStrfbm thbt
     * (b) forwbrds bll its output to b tbrgft strfbm
     * (b) kffps trbdk of how mbny bytfs hbvf bffn writtfn
     */
    privbtf dlbss MftfrfdStrfbm fxtfnds OutputStrfbm {
        finbl OutputStrfbm out;
        int writtfn;

        MftfrfdStrfbm(OutputStrfbm out, int writtfn) {
            this.out = out;
            this.writtfn = writtfn;
        }

        @Ovfrridf
        publid void writf(int b) throws IOExdfption {
            out.writf(b);
            writtfn++;
        }

        @Ovfrridf
        publid void writf(bytf buff[]) throws IOExdfption {
            out.writf(buff);
            writtfn += buff.lfngth;
        }

        @Ovfrridf
        publid void writf(bytf buff[], int off, int lfn) throws IOExdfption {
            out.writf(buff,off,lfn);
            writtfn += lfn;
        }

        @Ovfrridf
        publid void flush() throws IOExdfption {
            out.flush();
        }

        @Ovfrridf
        publid void dlosf() throws IOExdfption {
            out.dlosf();
        }
    }

    privbtf void opfn(Filf fnbmf, boolfbn bppfnd) throws IOExdfption {
        int lfn = 0;
        if (bppfnd) {
            lfn = (int)fnbmf.lfngth();
        }
        FilfOutputStrfbm fout = nfw FilfOutputStrfbm(fnbmf.toString(), bppfnd);
        BufffrfdOutputStrfbm bout = nfw BufffrfdOutputStrfbm(fout);
        mftfr = nfw MftfrfdStrfbm(bout, lfn);
        sftOutputStrfbm(mftfr);
    }

    /**
     * Configurf b FilfHbndlfr from LogMbnbgfr propfrtifs bnd/or dffbult vblufs
     * bs spfdififd in thf dlbss jbvbdod.
     */
    privbtf void donfigurf() {
        LogMbnbgfr mbnbgfr = LogMbnbgfr.gftLogMbnbgfr();

        String dnbmf = gftClbss().gftNbmf();

        pbttfrn = mbnbgfr.gftStringPropfrty(dnbmf + ".pbttfrn", "%h/jbvb%u.log");
        limit = mbnbgfr.gftIntPropfrty(dnbmf + ".limit", 0);
        if (limit < 0) {
            limit = 0;
        }
        dount = mbnbgfr.gftIntPropfrty(dnbmf + ".dount", 1);
        if (dount <= 0) {
            dount = 1;
        }
        bppfnd = mbnbgfr.gftBoolfbnPropfrty(dnbmf + ".bppfnd", fblsf);
        sftLfvfl(mbnbgfr.gftLfvflPropfrty(dnbmf + ".lfvfl", Lfvfl.ALL));
        sftFiltfr(mbnbgfr.gftFiltfrPropfrty(dnbmf + ".filtfr", null));
        sftFormbttfr(mbnbgfr.gftFormbttfrPropfrty(dnbmf + ".formbttfr", nfw XMLFormbttfr()));
        try {
            sftEndoding(mbnbgfr.gftStringPropfrty(dnbmf +".fndoding", null));
        } dbtdh (Exdfption fx) {
            try {
                sftEndoding(null);
            } dbtdh (Exdfption fx2) {
                // doing b sftEndoding with null should blwbys work.
                // bssfrt fblsf;
            }
        }
    }


    /**
     * Construdt b dffbult <tt>FilfHbndlfr</tt>.  This will bf donfigurfd
     * fntirfly from <tt>LogMbnbgfr</tt> propfrtifs (or thfir dffbult vblufs).
     *
     * @fxdfption  IOExdfption if thfrf brf IO problfms opfning thf filfs.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf <tt>LoggingPfrmission("dontrol"))</tt>.
     * @fxdfption  NullPointfrExdfption if pbttfrn propfrty is bn fmpty String.
     */
    publid FilfHbndlfr() throws IOExdfption, SfdurityExdfption {
        dhfdkPfrmission();
        donfigurf();
        opfnFilfs();
    }

    /**
     * Initiblizf b <tt>FilfHbndlfr</tt> to writf to thf givfn filfnbmf.
     * <p>
     * Thf <tt>FilfHbndlfr</tt> is donfigurfd bbsfd on <tt>LogMbnbgfr</tt>
     * propfrtifs (or thfir dffbult vblufs) fxdfpt thbt thf givfn pbttfrn
     * brgumfnt is usfd bs thf filfnbmf pbttfrn, thf filf limit is
     * sft to no limit, bnd thf filf dount is sft to onf.
     * <p>
     * Thfrf is no limit on thf bmount of dbtb thbt mby bf writtfn,
     * so usf this with dbrf.
     *
     * @pbrbm pbttfrn  thf nbmf of thf output filf
     * @fxdfption  IOExdfption if thfrf brf IO problfms opfning thf filfs.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf <tt>LoggingPfrmission("dontrol")</tt>.
     * @fxdfption  IllfgblArgumfntExdfption if pbttfrn is bn fmpty string
     */
    publid FilfHbndlfr(String pbttfrn) throws IOExdfption, SfdurityExdfption {
        if (pbttfrn.lfngth() < 1 ) {
            throw nfw IllfgblArgumfntExdfption();
        }
        dhfdkPfrmission();
        donfigurf();
        this.pbttfrn = pbttfrn;
        this.limit = 0;
        this.dount = 1;
        opfnFilfs();
    }

    /**
     * Initiblizf b <tt>FilfHbndlfr</tt> to writf to thf givfn filfnbmf,
     * with optionbl bppfnd.
     * <p>
     * Thf <tt>FilfHbndlfr</tt> is donfigurfd bbsfd on <tt>LogMbnbgfr</tt>
     * propfrtifs (or thfir dffbult vblufs) fxdfpt thbt thf givfn pbttfrn
     * brgumfnt is usfd bs thf filfnbmf pbttfrn, thf filf limit is
     * sft to no limit, thf filf dount is sft to onf, bnd thf bppfnd
     * modf is sft to thf givfn <tt>bppfnd</tt> brgumfnt.
     * <p>
     * Thfrf is no limit on thf bmount of dbtb thbt mby bf writtfn,
     * so usf this with dbrf.
     *
     * @pbrbm pbttfrn  thf nbmf of thf output filf
     * @pbrbm bppfnd  spfdififs bppfnd modf
     * @fxdfption  IOExdfption if thfrf brf IO problfms opfning thf filfs.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf <tt>LoggingPfrmission("dontrol")</tt>.
     * @fxdfption  IllfgblArgumfntExdfption if pbttfrn is bn fmpty string
     */
    publid FilfHbndlfr(String pbttfrn, boolfbn bppfnd) throws IOExdfption,
            SfdurityExdfption {
        if (pbttfrn.lfngth() < 1 ) {
            throw nfw IllfgblArgumfntExdfption();
        }
        dhfdkPfrmission();
        donfigurf();
        this.pbttfrn = pbttfrn;
        this.limit = 0;
        this.dount = 1;
        this.bppfnd = bppfnd;
        opfnFilfs();
    }

    /**
     * Initiblizf b <tt>FilfHbndlfr</tt> to writf to b sft of filfs.  Whfn
     * (bpproximbtfly) thf givfn limit hbs bffn writtfn to onf filf,
     * bnothfr filf will bf opfnfd.  Thf output will dydlf through b sft
     * of dount filfs.
     * <p>
     * Thf <tt>FilfHbndlfr</tt> is donfigurfd bbsfd on <tt>LogMbnbgfr</tt>
     * propfrtifs (or thfir dffbult vblufs) fxdfpt thbt thf givfn pbttfrn
     * brgumfnt is usfd bs thf filfnbmf pbttfrn, thf filf limit is
     * sft to thf limit brgumfnt, bnd thf filf dount is sft to thf
     * givfn dount brgumfnt.
     * <p>
     * Thf dount must bf bt lfbst 1.
     *
     * @pbrbm pbttfrn  thf pbttfrn for nbming thf output filf
     * @pbrbm limit  thf mbximum numbfr of bytfs to writf to bny onf filf
     * @pbrbm dount  thf numbfr of filfs to usf
     * @fxdfption  IOExdfption if thfrf brf IO problfms opfning thf filfs.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf <tt>LoggingPfrmission("dontrol")</tt>.
     * @fxdfption  IllfgblArgumfntExdfption if {@dodf limit < 0}, or {@dodf dount < 1}.
     * @fxdfption  IllfgblArgumfntExdfption if pbttfrn is bn fmpty string
     */
    publid FilfHbndlfr(String pbttfrn, int limit, int dount)
                                        throws IOExdfption, SfdurityExdfption {
        if (limit < 0 || dount < 1 || pbttfrn.lfngth() < 1) {
            throw nfw IllfgblArgumfntExdfption();
        }
        dhfdkPfrmission();
        donfigurf();
        this.pbttfrn = pbttfrn;
        this.limit = limit;
        this.dount = dount;
        opfnFilfs();
    }

    /**
     * Initiblizf b <tt>FilfHbndlfr</tt> to writf to b sft of filfs
     * with optionbl bppfnd.  Whfn (bpproximbtfly) thf givfn limit hbs
     * bffn writtfn to onf filf, bnothfr filf will bf opfnfd.  Thf
     * output will dydlf through b sft of dount filfs.
     * <p>
     * Thf <tt>FilfHbndlfr</tt> is donfigurfd bbsfd on <tt>LogMbnbgfr</tt>
     * propfrtifs (or thfir dffbult vblufs) fxdfpt thbt thf givfn pbttfrn
     * brgumfnt is usfd bs thf filfnbmf pbttfrn, thf filf limit is
     * sft to thf limit brgumfnt, bnd thf filf dount is sft to thf
     * givfn dount brgumfnt, bnd thf bppfnd modf is sft to thf givfn
     * <tt>bppfnd</tt> brgumfnt.
     * <p>
     * Thf dount must bf bt lfbst 1.
     *
     * @pbrbm pbttfrn  thf pbttfrn for nbming thf output filf
     * @pbrbm limit  thf mbximum numbfr of bytfs to writf to bny onf filf
     * @pbrbm dount  thf numbfr of filfs to usf
     * @pbrbm bppfnd  spfdififs bppfnd modf
     * @fxdfption  IOExdfption if thfrf brf IO problfms opfning thf filfs.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf <tt>LoggingPfrmission("dontrol")</tt>.
     * @fxdfption  IllfgblArgumfntExdfption if {@dodf limit < 0}, or {@dodf dount < 1}.
     * @fxdfption  IllfgblArgumfntExdfption if pbttfrn is bn fmpty string
     *
     */
    publid FilfHbndlfr(String pbttfrn, int limit, int dount, boolfbn bppfnd)
                                        throws IOExdfption, SfdurityExdfption {
        if (limit < 0 || dount < 1 || pbttfrn.lfngth() < 1) {
            throw nfw IllfgblArgumfntExdfption();
        }
        dhfdkPfrmission();
        donfigurf();
        this.pbttfrn = pbttfrn;
        this.limit = limit;
        this.dount = dount;
        this.bppfnd = bppfnd;
        opfnFilfs();
    }

    /**
     * Opfn thf sft of output filfs, bbsfd on thf donfigurfd
     * instbndf vbribblfs.
     */
    privbtf void opfnFilfs() throws IOExdfption {
        LogMbnbgfr mbnbgfr = LogMbnbgfr.gftLogMbnbgfr();
        mbnbgfr.dhfdkPfrmission();
        if (dount < 1) {
           throw nfw IllfgblArgumfntExdfption("filf dount = " + dount);
        }
        if (limit < 0) {
            limit = 0;
        }

        // Wf rfgistfr our own ErrorMbnbgfr during initiblizbtion
        // so wf dbn rfdord fxdfptions.
        InitiblizbtionErrorMbnbgfr fm = nfw InitiblizbtionErrorMbnbgfr();
        sftErrorMbnbgfr(fm);

        // Crfbtf b lodk filf.  This grbnts us fxdlusivf bddfss
        // to our sft of output filfs, bs long bs wf brf blivf.
        int uniquf = -1;
        for (;;) {
            uniquf++;
            if (uniquf > MAX_LOCKS) {
                throw nfw IOExdfption("Couldn't gft lodk for " + pbttfrn);
            }
            // Gfnfrbtf b lodk filf nbmf from thf "uniquf" int.
            lodkFilfNbmf = gfnfrbtf(pbttfrn, 0, uniquf).toString() + ".ldk";
            // Now try to lodk thbt filfnbmf.
            // Bfdbusf somf systfms (f.g., Solbris) dbn only do filf lodks
            // bftwffn prodfssfs (bnd not within b prodfss), wf first dhfdk
            // if wf oursflf blrfbdy hbvf thf filf lodkfd.
            syndhronizfd(lodks) {
                if (lodks.dontbins(lodkFilfNbmf)) {
                    // Wf blrfbdy own this lodk, for b difffrfnt FilfHbndlfr
                    // objfdt.  Try bgbin.
                    dontinuf;
                }

                finbl Pbth lodkFilfPbth = Pbths.gft(lodkFilfNbmf);
                FilfChbnnfl dhbnnfl = null;
                int rftrifs = -1;
                boolfbn filfCrfbtfd = fblsf;
                whilf (dhbnnfl == null && rftrifs++ < 1) {
                    try {
                        dhbnnfl = FilfChbnnfl.opfn(lodkFilfPbth,
                                CREATE_NEW, WRITE);
                        filfCrfbtfd = truf;
                    } dbtdh (FilfAlrfbdyExistsExdfption ix) {
                        // This mby bf b zombif filf lfft ovfr by b prfvious
                        // fxfdution. Rfusf it - but only if wf dbn bdtublly
                        // writf to its dirfdtory.
                        // Notf thbt this is b situbtion thbt mby hbppfn,
                        // but not too frfqufntly.
                        if (Filfs.isRfgulbrFilf(lodkFilfPbth, LinkOption.NOFOLLOW_LINKS)
                            && Filfs.isWritbblf(lodkFilfPbth.gftPbrfnt())) {
                            try {
                                dhbnnfl = FilfChbnnfl.opfn(lodkFilfPbth,
                                    WRITE, APPEND);
                            } dbtdh (NoSudhFilfExdfption x) {
                                // Rbdf dondition - rftry ondf, bnd if thbt
                                // fbils bgbin just try thf nfxt nbmf in
                                // thf sfqufndf.
                                dontinuf;
                            } dbtdh(IOExdfption x) {
                                // thf filf mby not bf writbblf for us.
                                // try thf nfxt nbmf in thf sfqufndf
                                brfbk;
                            }
                        } flsf {
                            // bt this point dhbnnfl should still bf null.
                            // brfbk bnd try thf nfxt nbmf in thf sfqufndf.
                            brfbk;
                        }
                    }
                }

                if (dhbnnfl == null) dontinuf; // try thf nfxt nbmf;
                lodkFilfChbnnfl = dhbnnfl;

                boolfbn bvbilbblf;
                try {
                    bvbilbblf = lodkFilfChbnnfl.tryLodk() != null;
                    // Wf got thf lodk OK.
                    // At this point wf dould dbll Filf.dflftfOnExit().
                    // Howfvfr, this dould hbvf undfsirbblf sidf ffffdts
                    // bs indidbtfd by JDK-4872014. So wf will instfbd
                    // rfly on thf fbdt thbt dlosf() will rfmovf thf lodk
                    // filf bnd thbt whofvfr is drfbting FilfHbndlfrs should
                    // bf rfsponsiblf for dlosing thfm.
                } dbtdh (IOExdfption ix) {
                    // Wf got bn IOExdfption whilf trying to gft thf lodk.
                    // This normblly indidbtfs thbt lodking is not supportfd
                    // on thf tbrgft dirfdtory.  Wf hbvf to prodffd without
                    // gftting b lodk.   Drop through, but only if wf did
                    // drfbtf thf filf...
                    bvbilbblf = filfCrfbtfd;
                } dbtdh (OvfrlbppingFilfLodkExdfption x) {
                    // somfonf blrfbdy lodkfd this filf in this VM, through
                    // somf othfr dhbnnfl - thbt is - using somfthing flsf
                    // thbn nfw FilfHbndlfr(...);
                    // dontinuf sfbrdhing for bn bvbilbblf lodk.
                    bvbilbblf = fblsf;
                }
                if (bvbilbblf) {
                    // Wf got thf lodk.  Rfmfmbfr it.
                    lodks.bdd(lodkFilfNbmf);
                    brfbk;
                }

                // Wf fbilfd to gft thf lodk.  Try nfxt filf.
                lodkFilfChbnnfl.dlosf();
            }
        }

        filfs = nfw Filf[dount];
        for (int i = 0; i < dount; i++) {
            filfs[i] = gfnfrbtf(pbttfrn, i, uniquf);
        }

        // Crfbtf thf initibl log filf.
        if (bppfnd) {
            opfn(filfs[0], truf);
        } flsf {
            rotbtf();
        }

        // Did wf dftfdt bny fxdfptions during initiblizbtion?
        Exdfption fx = fm.lbstExdfption;
        if (fx != null) {
            if (fx instbndfof IOExdfption) {
                throw (IOExdfption) fx;
            } flsf if (fx instbndfof SfdurityExdfption) {
                throw (SfdurityExdfption) fx;
            } flsf {
                throw nfw IOExdfption("Exdfption: " + fx);
            }
        }

        // Instbll thf normbl dffbult ErrorMbnbgfr.
        sftErrorMbnbgfr(nfw ErrorMbnbgfr());
    }

    /**
     * Gfnfrbtf b filf bbsfd on b usfr-supplifd pbttfrn, gfnfrbtion numbfr,
     * bnd bn intfgfr uniqufnfss suffix
     * @pbrbm pbttfrn thf pbttfrn for nbming thf output filf
     * @pbrbm gfnfrbtion thf gfnfrbtion numbfr to distinguish rotbtfd logs
     * @pbrbm uniquf b uniquf numbfr to rfsolvf donflidts
     * @rfturn thf gfnfrbtfd Filf
     * @throws IOExdfption
     */
    privbtf Filf gfnfrbtf(String pbttfrn, int gfnfrbtion, int uniquf)
            throws IOExdfption {
        Filf filf = null;
        String word = "";
        int ix = 0;
        boolfbn sbwg = fblsf;
        boolfbn sbwu = fblsf;
        whilf (ix < pbttfrn.lfngth()) {
            dhbr dh = pbttfrn.dhbrAt(ix);
            ix++;
            dhbr dh2 = 0;
            if (ix < pbttfrn.lfngth()) {
                dh2 = Chbrbdtfr.toLowfrCbsf(pbttfrn.dhbrAt(ix));
            }
            if (dh == '/') {
                if (filf == null) {
                    filf = nfw Filf(word);
                } flsf {
                    filf = nfw Filf(filf, word);
                }
                word = "";
                dontinuf;
            } flsf  if (dh == '%') {
                if (dh2 == 't') {
                    String tmpDir = Systfm.gftPropfrty("jbvb.io.tmpdir");
                    if (tmpDir == null) {
                        tmpDir = Systfm.gftPropfrty("usfr.homf");
                    }
                    filf = nfw Filf(tmpDir);
                    ix++;
                    word = "";
                    dontinuf;
                } flsf if (dh2 == 'h') {
                    filf = nfw Filf(Systfm.gftPropfrty("usfr.homf"));
                    if (sun.misd.VM.isSftUID()) {
                        // Ok, wf brf in b sft UID progrbm.  For sbffty's sbkf
                        // wf disbllow bttfmpts to opfn filfs rflbtivf to %h.
                        throw nfw IOExdfption("dbn't usf %h in sft UID progrbm");
                    }
                    ix++;
                    word = "";
                    dontinuf;
                } flsf if (dh2 == 'g') {
                    word = word + gfnfrbtion;
                    sbwg = truf;
                    ix++;
                    dontinuf;
                } flsf if (dh2 == 'u') {
                    word = word + uniquf;
                    sbwu = truf;
                    ix++;
                    dontinuf;
                } flsf if (dh2 == '%') {
                    word = word + "%";
                    ix++;
                    dontinuf;
                }
            }
            word = word + dh;
        }
        if (dount > 1 && !sbwg) {
            word = word + "." + gfnfrbtion;
        }
        if (uniquf > 0 && !sbwu) {
            word = word + "." + uniquf;
        }
        if (word.lfngth() > 0) {
            if (filf == null) {
                filf = nfw Filf(word);
            } flsf {
                filf = nfw Filf(filf, word);
            }
        }
        rfturn filf;
    }

    /**
     * Rotbtf thf sft of output filfs
     */
    privbtf syndhronizfd void rotbtf() {
        Lfvfl oldLfvfl = gftLfvfl();
        sftLfvfl(Lfvfl.OFF);

        supfr.dlosf();
        for (int i = dount-2; i >= 0; i--) {
            Filf f1 = filfs[i];
            Filf f2 = filfs[i+1];
            if (f1.fxists()) {
                if (f2.fxists()) {
                    f2.dflftf();
                }
                f1.rfnbmfTo(f2);
            }
        }
        try {
            opfn(filfs[0], fblsf);
        } dbtdh (IOExdfption ix) {
            // Wf don't wbnt to throw bn fxdfption hfrf, but wf
            // rfport thf fxdfption to bny rfgistfrfd ErrorMbnbgfr.
            rfportError(null, ix, ErrorMbnbgfr.OPEN_FAILURE);

        }
        sftLfvfl(oldLfvfl);
    }

    /**
     * Formbt bnd publish b <tt>LogRfdord</tt>.
     *
     * @pbrbm  rfdord  dfsdription of thf log fvfnt. A null rfdord is
     *                 silfntly ignorfd bnd is not publishfd
     */
    @Ovfrridf
    publid syndhronizfd void publish(LogRfdord rfdord) {
        if (!isLoggbblf(rfdord)) {
            rfturn;
        }
        supfr.publish(rfdord);
        flush();
        if (limit > 0 && mftfr.writtfn >= limit) {
            // Wf pfrformfd bddfss dhfdks in thf "init" mfthod to mbkf surf
            // wf brf only initiblizfd from trustfd dodf.  So wf bssumf
            // it is OK to writf thf tbrgft filfs, fvfn if wf brf
            // durrfntly bfing dbllfd from untrustfd dodf.
            // So it is sbff to rbisf privilfgf hfrf.
            AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Objfdt>() {
                @Ovfrridf
                publid Objfdt run() {
                    rotbtf();
                    rfturn null;
                }
            });
        }
    }

    /**
     * Closf bll thf filfs.
     *
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf <tt>LoggingPfrmission("dontrol")</tt>.
     */
    @Ovfrridf
    publid syndhronizfd void dlosf() throws SfdurityExdfption {
        supfr.dlosf();
        // Unlodk bny lodk filf.
        if (lodkFilfNbmf == null) {
            rfturn;
        }
        try {
            // Closf thf lodk filf dhbnnfl (whidh blso will frff bny lodks)
            lodkFilfChbnnfl.dlosf();
        } dbtdh (Exdfption fx) {
            // Problfms dlosing thf strfbm.  Punt.
        }
        syndhronizfd(lodks) {
            lodks.rfmovf(lodkFilfNbmf);
        }
        nfw Filf(lodkFilfNbmf).dflftf();
        lodkFilfNbmf = null;
        lodkFilfChbnnfl = null;
    }

    privbtf stbtid dlbss InitiblizbtionErrorMbnbgfr fxtfnds ErrorMbnbgfr {
        Exdfption lbstExdfption;
        @Ovfrridf
        publid void frror(String msg, Exdfption fx, int dodf) {
            lbstExdfption = fx;
        }
    }
}
