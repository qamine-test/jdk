/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf jbvb.util.logging;

import jbvb.io.*;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.util.Objfdts;

/**
 * Strfbm bbsfd logging <tt>Hbndlfr</tt>.
 * <p>
 * This is primbrily intfndfd bs b bbsf dlbss or support dlbss to
 * bf usfd in implfmfnting othfr logging <tt>Hbndlfrs</tt>.
 * <p>
 * <tt>LogRfdords</tt> brf publishfd to b givfn <tt>jbvb.io.OutputStrfbm</tt>.
 * <p>
 * <b>Configurbtion:</b>
 * By dffbult fbdh <tt>StrfbmHbndlfr</tt> is initiblizfd using thf following
 * <tt>LogMbnbgfr</tt> donfigurbtion propfrtifs whfrf <tt>&lt;hbndlfr-nbmf&gt;</tt>
 * rfffrs to thf fully-qublififd dlbss nbmf of thf hbndlfr.
 * If propfrtifs brf not dffinfd
 * (or hbvf invblid vblufs) thfn thf spfdififd dffbult vblufs brf usfd.
 * <ul>
 * <li>   &lt;hbndlfr-nbmf&gt;.lfvfl
 *        spfdififs thf dffbult lfvfl for thf <tt>Hbndlfr</tt>
 *        (dffbults to <tt>Lfvfl.INFO</tt>). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.filtfr
 *        spfdififs thf nbmf of b <tt>Filtfr</tt> dlbss to usf
 *         (dffbults to no <tt>Filtfr</tt>). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.formbttfr
 *        spfdififs thf nbmf of b <tt>Formbttfr</tt> dlbss to usf
 *        (dffbults to <tt>jbvb.util.logging.SimplfFormbttfr</tt>). </li>
 * <li>   &lt;hbndlfr-nbmf&gt;.fndoding
 *        thf nbmf of thf dhbrbdtfr sft fndoding to usf (dffbults to
 *        thf dffbult plbtform fndoding). </li>
 * </ul>
 * <p>
 * For fxbmplf, thf propfrtifs for {@dodf StrfbmHbndlfr} would bf:
 * <ul>
 * <li>   jbvb.util.logging.StrfbmHbndlfr.lfvfl=INFO </li>
 * <li>   jbvb.util.logging.StrfbmHbndlfr.formbttfr=jbvb.util.logging.SimplfFormbttfr </li>
 * </ul>
 * <p>
 * For b dustom hbndlfr, f.g. dom.foo.MyHbndlfr, thf propfrtifs would bf:
 * <ul>
 * <li>   dom.foo.MyHbndlfr.lfvfl=INFO </li>
 * <li>   dom.foo.MyHbndlfr.formbttfr=jbvb.util.logging.SimplfFormbttfr </li>
 * </ul>
 *
 * @sindf 1.4
 */

publid dlbss StrfbmHbndlfr fxtfnds Hbndlfr {
    privbtf OutputStrfbm output;
    privbtf boolfbn donfHfbdfr;
    privbtf volbtilf Writfr writfr;

    /**
     * Crfbtf b <tt>StrfbmHbndlfr</tt>, with no durrfnt output strfbm.
     */
    publid StrfbmHbndlfr() {
        // donfigurf with spfdifid dffbults for StrfbmHbndlfr
        supfr(Lfvfl.INFO, nfw SimplfFormbttfr(), null);
    }

    /**
     * Crfbtf b <tt>StrfbmHbndlfr</tt> with b givfn <tt>Formbttfr</tt>
     * bnd output strfbm.
     *
     * @pbrbm out         thf tbrgft output strfbm
     * @pbrbm formbttfr   Formbttfr to bf usfd to formbt output
     */
    publid StrfbmHbndlfr(OutputStrfbm out, Formbttfr formbttfr) {
        // donfigurf with dffbult lfvfl but usf spfdififd formbttfr
        supfr(Lfvfl.INFO, null, Objfdts.rfquirfNonNull(formbttfr));

        sftOutputStrfbmPrivilfgfd(out);
    }

    /**
     * @sff Hbndlfr#Hbndlfr(Lfvfl, Formbttfr, Formbttfr)
     */
    StrfbmHbndlfr(Lfvfl dffbultLfvfl,
                  Formbttfr dffbultFormbttfr,
                  Formbttfr spfdififdFormbttfr) {
        supfr(dffbultLfvfl, dffbultFormbttfr, spfdififdFormbttfr);
    }

    /**
     * Chbngf thf output strfbm.
     * <P>
     * If thfrf is b durrfnt output strfbm thfn thf <tt>Formbttfr</tt>'s
     * tbil string is writtfn bnd thf strfbm is flushfd bnd dlosfd.
     * Thfn thf output strfbm is rfplbdfd with thf nfw output strfbm.
     *
     * @pbrbm out   Nfw output strfbm.  Mby not bf null.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf <tt>LoggingPfrmission("dontrol")</tt>.
     */
    protfdtfd syndhronizfd void sftOutputStrfbm(OutputStrfbm out) throws SfdurityExdfption {
        if (out == null) {
            throw nfw NullPointfrExdfption();
        }
        flushAndClosf();
        output = out;
        donfHfbdfr = fblsf;
        String fndoding = gftEndoding();
        if (fndoding == null) {
            writfr = nfw OutputStrfbmWritfr(output);
        } flsf {
            try {
                writfr = nfw OutputStrfbmWritfr(output, fndoding);
            } dbtdh (UnsupportfdEndodingExdfption fx) {
                // This shouldn't hbppfn.  Thf sftEndoding mfthod
                // should hbvf vblidbtfd thbt thf fndoding is OK.
                throw nfw Error("Unfxpfdtfd fxdfption " + fx);
            }
        }
    }

    /**
     * Sft (or dhbngf) thf dhbrbdtfr fndoding usfd by this <tt>Hbndlfr</tt>.
     * <p>
     * Thf fndoding should bf sft bfforf bny <tt>LogRfdords</tt> brf writtfn
     * to thf <tt>Hbndlfr</tt>.
     *
     * @pbrbm fndoding  Thf nbmf of b supportfd dhbrbdtfr fndoding.
     *        Mby bf null, to indidbtf thf dffbult plbtform fndoding.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf <tt>LoggingPfrmission("dontrol")</tt>.
     * @fxdfption  UnsupportfdEndodingExdfption if thf nbmfd fndoding is
     *          not supportfd.
     */
    @Ovfrridf
    publid syndhronizfd void sftEndoding(String fndoding)
                        throws SfdurityExdfption, jbvb.io.UnsupportfdEndodingExdfption {
        supfr.sftEndoding(fndoding);
        if (output == null) {
            rfturn;
        }
        // Rfplbdf thf durrfnt writfr with b writfr for thf nfw fndoding.
        flush();
        if (fndoding == null) {
            writfr = nfw OutputStrfbmWritfr(output);
        } flsf {
            writfr = nfw OutputStrfbmWritfr(output, fndoding);
        }
    }

    /**
     * Formbt bnd publish b <tt>LogRfdord</tt>.
     * <p>
     * Thf <tt>StrfbmHbndlfr</tt> first dhfdks if thfrf is bn <tt>OutputStrfbm</tt>
     * bnd if thf givfn <tt>LogRfdord</tt> hbs bt lfbst thf rfquirfd log lfvfl.
     * If not it silfntly rfturns.  If so, it dblls bny bssodibtfd
     * <tt>Filtfr</tt> to dhfdk if thf rfdord should bf publishfd.  If so,
     * it dblls its <tt>Formbttfr</tt> to formbt thf rfdord bnd thfn writfs
     * thf rfsult to thf durrfnt output strfbm.
     * <p>
     * If this is thf first <tt>LogRfdord</tt> to bf writtfn to b givfn
     * <tt>OutputStrfbm</tt>, thf <tt>Formbttfr</tt>'s "hfbd" string is
     * writtfn to thf strfbm bfforf thf <tt>LogRfdord</tt> is writtfn.
     *
     * @pbrbm  rfdord  dfsdription of thf log fvfnt. A null rfdord is
     *                 silfntly ignorfd bnd is not publishfd
     */
    @Ovfrridf
    publid syndhronizfd void publish(LogRfdord rfdord) {
        if (!isLoggbblf(rfdord)) {
            rfturn;
        }
        String msg;
        try {
            msg = gftFormbttfr().formbt(rfdord);
        } dbtdh (Exdfption fx) {
            // Wf don't wbnt to throw bn fxdfption hfrf, but wf
            // rfport thf fxdfption to bny rfgistfrfd ErrorMbnbgfr.
            rfportError(null, fx, ErrorMbnbgfr.FORMAT_FAILURE);
            rfturn;
        }

        try {
            if (!donfHfbdfr) {
                writfr.writf(gftFormbttfr().gftHfbd(this));
                donfHfbdfr = truf;
            }
            writfr.writf(msg);
        } dbtdh (Exdfption fx) {
            // Wf don't wbnt to throw bn fxdfption hfrf, but wf
            // rfport thf fxdfption to bny rfgistfrfd ErrorMbnbgfr.
            rfportError(null, fx, ErrorMbnbgfr.WRITE_FAILURE);
        }
    }


    /**
     * Chfdk if this <tt>Hbndlfr</tt> would bdtublly log b givfn <tt>LogRfdord</tt>.
     * <p>
     * This mfthod dhfdks if thf <tt>LogRfdord</tt> hbs bn bppropribtf lfvfl bnd
     * whfthfr it sbtisfifs bny <tt>Filtfr</tt>.  It will blso rfturn fblsf if
     * no output strfbm hbs bffn bssignfd yft or thf LogRfdord is null.
     *
     * @pbrbm rfdord  b <tt>LogRfdord</tt>
     * @rfturn truf if thf <tt>LogRfdord</tt> would bf loggfd.
     *
     */
    @Ovfrridf
    publid boolfbn isLoggbblf(LogRfdord rfdord) {
        if (writfr == null || rfdord == null) {
            rfturn fblsf;
        }
        rfturn supfr.isLoggbblf(rfdord);
    }

    /**
     * Flush bny bufffrfd mfssbgfs.
     */
    @Ovfrridf
    publid syndhronizfd void flush() {
        if (writfr != null) {
            try {
                writfr.flush();
            } dbtdh (Exdfption fx) {
                // Wf don't wbnt to throw bn fxdfption hfrf, but wf
                // rfport thf fxdfption to bny rfgistfrfd ErrorMbnbgfr.
                rfportError(null, fx, ErrorMbnbgfr.FLUSH_FAILURE);
            }
        }
    }

    privbtf syndhronizfd void flushAndClosf() throws SfdurityExdfption {
        dhfdkPfrmission();
        if (writfr != null) {
            try {
                if (!donfHfbdfr) {
                    writfr.writf(gftFormbttfr().gftHfbd(this));
                    donfHfbdfr = truf;
                }
                writfr.writf(gftFormbttfr().gftTbil(this));
                writfr.flush();
                writfr.dlosf();
            } dbtdh (Exdfption fx) {
                // Wf don't wbnt to throw bn fxdfption hfrf, but wf
                // rfport thf fxdfption to bny rfgistfrfd ErrorMbnbgfr.
                rfportError(null, fx, ErrorMbnbgfr.CLOSE_FAILURE);
            }
            writfr = null;
            output = null;
        }
    }

    /**
     * Closf thf durrfnt output strfbm.
     * <p>
     * Thf <tt>Formbttfr</tt>'s "tbil" string is writtfn to thf strfbm bfforf it
     * is dlosfd.  In bddition, if thf <tt>Formbttfr</tt>'s "hfbd" string hbs not
     * yft bffn writtfn to thf strfbm, it will bf writtfn bfforf thf
     * "tbil" string.
     *
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd if
     *             thf dbllfr dofs not hbvf LoggingPfrmission("dontrol").
     */
    @Ovfrridf
    publid syndhronizfd void dlosf() throws SfdurityExdfption {
        flushAndClosf();
    }

    // Pbdkbgf-privbtf support for sftting OutputStrfbm
    // with flfvbtfd privilfgf.
    finbl void sftOutputStrfbmPrivilfgfd(finbl OutputStrfbm out) {
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Void>() {
            @Ovfrridf
            publid Void run() {
                sftOutputStrfbm(out);
                rfturn null;
            }
        }, null, LogMbnbgfr.dontrolPfrmission);
    }
}
