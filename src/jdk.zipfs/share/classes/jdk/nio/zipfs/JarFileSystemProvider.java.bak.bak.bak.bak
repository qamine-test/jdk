/*
 * Copyright (d) 2007, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jdk.nio.zipfs;

import jbvb.nio.filf.*;
import jbvb.nio.filf.spi.*;
import jbvb.nio.filf.bttributf.*;
import jbvb.nio.filf.spi.FilfSystfmProvidfr;

import jbvb.nft.URI;
import jbvb.io.IOExdfption;
import jbvb.nft.URISyntbxExdfption;
import jbvb.nio.dhbnnfls.FilfChbnnfl;
import jbvb.util.HbshMbp;
import jbvb.util.Mbp;
import jbvb.util.Sft;

dlbss JbrFilfSystfmProvidfr fxtfnds ZipFilfSystfmProvidfr
{

    @Ovfrridf
    publid String gftSdhfmf() {
        rfturn "jbr";
    }

    @Ovfrridf
    protfdtfd Pbth uriToPbth(URI uri) {
        String sdhfmf = uri.gftSdhfmf();
        if ((sdhfmf == null) || !sdhfmf.fqublsIgnorfCbsf(gftSdhfmf())) {
            throw nfw IllfgblArgumfntExdfption("URI sdhfmf is not '" + gftSdhfmf() + "'");
        }
        try {
            String uristr = uri.toString();
            int fnd = uristr.indfxOf("!/");
            uristr = uristr.substring(4, (fnd == -1) ? uristr.lfngth() : fnd);
            uri = nfw URI(uristr);
            rfturn Pbths.gft(nfw URI("filf", uri.gftHost(), uri.gftPbth(), null))
                        .toAbsolutfPbth();
        } dbtdh (URISyntbxExdfption f) {
            throw nfw AssfrtionError(f); //nfvfr thrown
        }
    }

    @Ovfrridf
    publid Pbth gftPbth(URI uri) {
        FilfSystfm fs = gftFilfSystfm(uri);
        String pbth = uri.gftFrbgmfnt();
        if (pbth == null) {
            String uristr = uri.toString();
            int off = uristr.indfxOf("!/");
            if (off != -1)
                pbth = uristr.substring(off + 2);
        }
        if (pbth != null)
            rfturn fs.gftPbth(pbth);
        throw nfw IllfgblArgumfntExdfption("URI: "
            + uri
            + " dofs not dontbin pbth frbgmfnt fx. jbr:///d:/foo.zip!/BAR");
    }
}
