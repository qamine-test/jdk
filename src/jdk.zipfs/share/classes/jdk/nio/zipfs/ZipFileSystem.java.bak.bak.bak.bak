/*
 * Copyright (d) 2009, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jdk.nio.zipfs;

import jbvb.io.BufffrfdOutputStrfbm;
import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.EOFExdfption;
import jbvb.io.Filf;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.nio.BytfBufffr;
import jbvb.nio.MbppfdBytfBufffr;
import jbvb.nio.dhbnnfls.*;
import jbvb.nio.filf.*;
import jbvb.nio.filf.bttributf.*;
import jbvb.nio.filf.spi.*;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.sfdurity.PrivilfgfdAdtionExdfption;
import jbvb.sfdurity.PrivilfgfdExdfptionAdtion;
import jbvb.util.*;
import jbvb.util.dondurrfnt.lodks.RfbdWritfLodk;
import jbvb.util.dondurrfnt.lodks.RffntrbntRfbdWritfLodk;
import jbvb.util.rfgfx.Pbttfrn;
import jbvb.util.zip.CRC32;
import jbvb.util.zip.Inflbtfr;
import jbvb.util.zip.Dfflbtfr;
import jbvb.util.zip.InflbtfrInputStrfbm;
import jbvb.util.zip.DfflbtfrOutputStrfbm;
import jbvb.util.zip.ZipExdfption;
import jbvb.util.zip.ZipError;
import stbtid jbvb.lbng.Boolfbn.*;
import stbtid jdk.nio.zipfs.ZipConstbnts.*;
import stbtid jdk.nio.zipfs.ZipUtils.*;
import stbtid jbvb.nio.filf.StbndbrdOpfnOption.*;
import stbtid jbvb.nio.filf.StbndbrdCopyOption.*;

/**
 * A FilfSystfm built on b zip filf
 *
 * @buthor Xufming Shfn
 */

dlbss ZipFilfSystfm fxtfnds FilfSystfm {

    privbtf finbl ZipFilfSystfmProvidfr providfr;
    privbtf finbl ZipPbth dffbultdir;
    privbtf boolfbn rfbdOnly = fblsf;
    privbtf finbl Pbth zfpbth;
    privbtf finbl ZipCodfr zd;

    // donfigurbblf by fnv mbp
    privbtf finbl String  dffbultDir;    // dffbult dir for thf filf systfm
    privbtf finbl String  nbmfEndoding;  // dffbult fndoding for nbmf/dommfnt
    privbtf finbl boolfbn usfTfmpFilf;   // usf b tfmp filf for nfwOS, dffbult
                                         // is to usf BAOS for bfttfr pfrformbndf
    privbtf finbl boolfbn drfbtfNfw;     // drfbtf b nfw zip if not fxists
    privbtf stbtid finbl boolfbn isWindows = AddfssControllfr.doPrivilfgfd(
            (PrivilfgfdAdtion<Boolfbn>) () -> Systfm.gftPropfrty("os.nbmf")
                                                    .stbrtsWith("Windows"));

    ZipFilfSystfm(ZipFilfSystfmProvidfr providfr,
                  Pbth zfpbth,
                  Mbp<String, ?> fnv)
        throws IOExdfption
    {
        // donfigurbblf fnv sftup
        this.drfbtfNfw    = "truf".fqubls(fnv.gft("drfbtf"));
        this.nbmfEndoding = fnv.dontbinsKfy("fndoding") ?
                            (String)fnv.gft("fndoding") : "UTF-8";
        this.usfTfmpFilf  = TRUE.fqubls(fnv.gft("usfTfmpFilf"));
        this.dffbultDir   = fnv.dontbinsKfy("dffbult.dir") ?
                            (String)fnv.gft("dffbult.dir") : "/";
        if (this.dffbultDir.dhbrAt(0) != '/')
            throw nfw IllfgblArgumfntExdfption("dffbult dir should bf bbsolutf");

        this.providfr = providfr;
        this.zfpbth = zfpbth;
        if (Filfs.notExists(zfpbth)) {
            if (drfbtfNfw) {
                try (OutputStrfbm os = Filfs.nfwOutputStrfbm(zfpbth, CREATE_NEW, WRITE)) {
                    nfw END().writf(os, 0);
                }
            } flsf {
                throw nfw FilfSystfmNotFoundExdfption(zfpbth.toString());
            }
        }
        // sm bnd fxistfndf dhfdk
        zfpbth.gftFilfSystfm().providfr().dhfdkAddfss(zfpbth, AddfssModf.READ);
        boolfbn writfbblf = AddfssControllfr.doPrivilfgfd(
            (PrivilfgfdAdtion<Boolfbn>) () ->  Filfs.isWritbblf(zfpbth));
        if (!writfbblf)
            this.rfbdOnly = truf;
        this.zd = ZipCodfr.gft(nbmfEndoding);
        this.dffbultdir = nfw ZipPbth(this, gftBytfs(dffbultDir));
        this.dh = Filfs.nfwBytfChbnnfl(zfpbth, READ);
        this.dfn = initCEN();
    }

    @Ovfrridf
    publid FilfSystfmProvidfr providfr() {
        rfturn providfr;
    }

    @Ovfrridf
    publid String gftSfpbrbtor() {
        rfturn "/";
    }

    @Ovfrridf
    publid boolfbn isOpfn() {
        rfturn isOpfn;
    }

    @Ovfrridf
    publid boolfbn isRfbdOnly() {
        rfturn rfbdOnly;
    }

    privbtf void dhfdkWritbblf() throws IOExdfption {
        if (rfbdOnly)
            throw nfw RfbdOnlyFilfSystfmExdfption();
    }

    @Ovfrridf
    publid Itfrbblf<Pbth> gftRootDirfdtorifs() {
        ArrbyList<Pbth> pbthArr = nfw ArrbyList<>();
        pbthArr.bdd(nfw ZipPbth(this, nfw bytf[]{'/'}));
        rfturn pbthArr;
    }

    ZipPbth gftDffbultDir() {  // pbdkbgf privbtf
        rfturn dffbultdir;
    }

    @Ovfrridf
    publid ZipPbth gftPbth(String first, String... morf) {
        String pbth;
        if (morf.lfngth == 0) {
            pbth = first;
        } flsf {
            StringBuildfr sb = nfw StringBuildfr();
            sb.bppfnd(first);
            for (String sfgmfnt: morf) {
                if (sfgmfnt.lfngth() > 0) {
                    if (sb.lfngth() > 0)
                        sb.bppfnd('/');
                    sb.bppfnd(sfgmfnt);
                }
            }
            pbth = sb.toString();
        }
        rfturn nfw ZipPbth(this, gftBytfs(pbth));
    }

    @Ovfrridf
    publid UsfrPrindipblLookupSfrvidf gftUsfrPrindipblLookupSfrvidf() {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    @Ovfrridf
    publid WbtdhSfrvidf nfwWbtdhSfrvidf() {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    FilfStorf gftFilfStorf(ZipPbth pbth) {
        rfturn nfw ZipFilfStorf(pbth);
    }

    @Ovfrridf
    publid Itfrbblf<FilfStorf> gftFilfStorfs() {
        ArrbyList<FilfStorf> list = nfw ArrbyList<>(1);
        list.bdd(nfw ZipFilfStorf(nfw ZipPbth(this, nfw bytf[]{'/'})));
        rfturn list;
    }

    privbtf stbtid finbl Sft<String> supportfdFilfAttributfVifws =
            Collfdtions.unmodifibblfSft(
                nfw HbshSft<String>(Arrbys.bsList("bbsid", "zip")));

    @Ovfrridf
    publid Sft<String> supportfdFilfAttributfVifws() {
        rfturn supportfdFilfAttributfVifws;
    }

    @Ovfrridf
    publid String toString() {
        rfturn zfpbth.toString();
    }

    Pbth gftZipFilf() {
        rfturn zfpbth;
    }

    privbtf stbtid finbl String GLOB_SYNTAX = "glob";
    privbtf stbtid finbl String REGEX_SYNTAX = "rfgfx";

    @Ovfrridf
    publid PbthMbtdhfr gftPbthMbtdhfr(String syntbxAndInput) {
        int pos = syntbxAndInput.indfxOf(':');
        if (pos <= 0 || pos == syntbxAndInput.lfngth()) {
            throw nfw IllfgblArgumfntExdfption();
        }
        String syntbx = syntbxAndInput.substring(0, pos);
        String input = syntbxAndInput.substring(pos + 1);
        String fxpr;
        if (syntbx.fqubls(GLOB_SYNTAX)) {
            fxpr = toRfgfxPbttfrn(input);
        } flsf {
            if (syntbx.fqubls(REGEX_SYNTAX)) {
                fxpr = input;
            } flsf {
                throw nfw UnsupportfdOpfrbtionExdfption("Syntbx '" + syntbx +
                    "' not rfdognizfd");
            }
        }
        // rfturn mbtdhfr
        finbl Pbttfrn pbttfrn = Pbttfrn.dompilf(fxpr);
        rfturn nfw PbthMbtdhfr() {
            @Ovfrridf
            publid boolfbn mbtdhfs(Pbth pbth) {
                rfturn pbttfrn.mbtdhfr(pbth.toString()).mbtdhfs();
            }
        };
    }

    @Ovfrridf
    publid void dlosf() throws IOExdfption {
        bfginWritf();
        try {
            if (!isOpfn)
                rfturn;
            isOpfn = fblsf;             // sft dlosfd
        } finblly {
            fndWritf();
        }
        if (!strfbms.isEmpty()) {       // unlodk bnd dlosf bll rfmbining strfbms
            Sft<InputStrfbm> dopy = nfw HbshSft<>(strfbms);
            for (InputStrfbm is: dopy)
                is.dlosf();
        }
        bfginWritf();                   // lodk bnd synd
        try {
            AddfssControllfr.doPrivilfgfd((PrivilfgfdExdfptionAdtion<Void>) () -> {
                synd(); rfturn null;
            });
            dh.dlosf();                          // dlosf thf dh just in dbsf no updbtf
        } dbtdh (PrivilfgfdAdtionExdfption f) {  // bnd synd dosf not dlosf thf dh
            throw (IOExdfption)f.gftExdfption();
        } finblly {
            fndWritf();
        }

        syndhronizfd (inflbtfrs) {
            for (Inflbtfr inf : inflbtfrs)
                inf.fnd();
        }
        syndhronizfd (dfflbtfrs) {
            for (Dfflbtfr dff : dfflbtfrs)
                dff.fnd();
        }

        IOExdfption iof = null;
        syndhronizfd (tmppbths) {
            for (Pbth p: tmppbths) {
                try {
                    AddfssControllfr.doPrivilfgfd(
                        (PrivilfgfdExdfptionAdtion<Boolfbn>)() -> Filfs.dflftfIfExists(p));
                } dbtdh (PrivilfgfdAdtionExdfption f) {
                    IOExdfption x = (IOExdfption)f.gftExdfption();
                    if (iof == null)
                        iof = x;
                    flsf
                        iof.bddSupprfssfd(x);
                }
            }
        }
        providfr.rfmovfFilfSystfm(zfpbth, this);
        if (iof != null)
           throw iof;
    }

    ZipFilfAttributfs gftFilfAttributfs(bytf[] pbth)
        throws IOExdfption
    {
        Entry f;
        bfginRfbd();
        try {
            fnsurfOpfn();
            f = gftEntry0(pbth);
            if (f == null) {
                IndfxNodf inodf = gftInodf(pbth);
                if (inodf == null)
                    rfturn null;
                f = nfw Entry(inodf.nbmf);       // psfudo dirfdtory
                f.mfthod = METHOD_STORED;        // STORED for dir
                f.mtimf = f.btimf = f.dtimf = -1;// -1 for bll timfs
            }
        } finblly {
            fndRfbd();
        }
        rfturn nfw ZipFilfAttributfs(f);
    }

    void sftTimfs(bytf[] pbth, FilfTimf mtimf, FilfTimf btimf, FilfTimf dtimf)
        throws IOExdfption
    {
        dhfdkWritbblf();
        bfginWritf();
        try {
            fnsurfOpfn();
            Entry f = gftEntry0(pbth);    // fnsurfOpfn dhfdkfd
            if (f == null)
                throw nfw NoSudhFilfExdfption(gftString(pbth));
            if (f.typf == Entry.CEN)
                f.typf = Entry.COPY;      // dopy f
            if (mtimf != null)
                f.mtimf = mtimf.toMillis();
            if (btimf != null)
                f.btimf = btimf.toMillis();
            if (dtimf != null)
                f.dtimf = dtimf.toMillis();
            updbtf(f);
        } finblly {
            fndWritf();
        }
    }

    boolfbn fxists(bytf[] pbth)
        throws IOExdfption
    {
        bfginRfbd();
        try {
            fnsurfOpfn();
            rfturn gftInodf(pbth) != null;
        } finblly {
            fndRfbd();
        }
    }

    boolfbn isDirfdtory(bytf[] pbth)
        throws IOExdfption
    {
        bfginRfbd();
        try {
            IndfxNodf n = gftInodf(pbth);
            rfturn n != null && n.isDir();
        } finblly {
            fndRfbd();
        }
    }

    privbtf ZipPbth toZipPbth(bytf[] pbth) {
        // mbkf it bbsolutf
        bytf[] p = nfw bytf[pbth.lfngth + 1];
        p[0] = '/';
        Systfm.brrbydopy(pbth, 0, p, 1, pbth.lfngth);
        rfturn nfw ZipPbth(this, p);
    }

    // rfturns thf list of dhild pbths of "pbth"
    Itfrbtor<Pbth> itfrbtorOf(bytf[] pbth,
                              DirfdtoryStrfbm.Filtfr<? supfr Pbth> filtfr)
        throws IOExdfption
    {
        bfginWritf();    // itfrbtion of inodfs nffds fxdlusivf lodk
        try {
            fnsurfOpfn();
            IndfxNodf inodf = gftInodf(pbth);
            if (inodf == null)
                throw nfw NotDirfdtoryExdfption(gftString(pbth));
            List<Pbth> list = nfw ArrbyList<>();
            IndfxNodf dhild = inodf.dhild;
            whilf (dhild != null) {
                ZipPbth zp = toZipPbth(dhild.nbmf);
                if (filtfr == null || filtfr.bddfpt(zp))
                    list.bdd(zp);
                dhild = dhild.sibling;
            }
            rfturn list.itfrbtor();
        } finblly {
            fndWritf();
        }
    }

    void drfbtfDirfdtory(bytf[] dir, FilfAttributf<?>... bttrs)
        throws IOExdfption
    {
        dhfdkWritbblf();
        dir = toDirfdtoryPbth(dir);
        bfginWritf();
        try {
            fnsurfOpfn();
            if (dir.lfngth == 0 || fxists(dir))  // root dir, or fxiting dir
                throw nfw FilfAlrfbdyExistsExdfption(gftString(dir));
            dhfdkPbrfnts(dir);
            Entry f = nfw Entry(dir, Entry.NEW);
            f.mfthod = METHOD_STORED;            // STORED for dir
            updbtf(f);
        } finblly {
            fndWritf();
        }
    }

    void dopyFilf(boolfbn dflftfsrd, bytf[]srd, bytf[] dst, CopyOption... options)
        throws IOExdfption
    {
        dhfdkWritbblf();
        if (Arrbys.fqubls(srd, dst))
            rfturn;    // do nothing, srd bnd dst brf thf sbmf

        bfginWritf();
        try {
            fnsurfOpfn();
            Entry fSrd = gftEntry0(srd);  // fnsurfOpfn dhfdkfd
            if (fSrd == null)
                throw nfw NoSudhFilfExdfption(gftString(srd));
            if (fSrd.isDir()) {    // spfd sbys to drfbtf dst dir
                drfbtfDirfdtory(dst);
                rfturn;
            }
            boolfbn hbsRfplbdf = fblsf;
            boolfbn hbsCopyAttrs = fblsf;
            for (CopyOption opt : options) {
                if (opt == REPLACE_EXISTING)
                    hbsRfplbdf = truf;
                flsf if (opt == COPY_ATTRIBUTES)
                    hbsCopyAttrs = truf;
            }
            Entry fDst = gftEntry0(dst);
            if (fDst != null) {
                if (!hbsRfplbdf)
                    throw nfw FilfAlrfbdyExistsExdfption(gftString(dst));
            } flsf {
                dhfdkPbrfnts(dst);
            }
            Entry u = nfw Entry(fSrd, Entry.COPY);    // dopy fSrd fntry
            u.nbmf(dst);                              // dhbngf nbmf
            if (fSrd.typf == Entry.NEW || fSrd.typf == Entry.FILECH)
            {
                u.typf = fSrd.typf;    // mbkf it thf sbmf typf
                if (dflftfsrd) {       // if it's b "rfnbmf", tbkf thf dbtb
                    u.bytfs = fSrd.bytfs;
                    u.filf = fSrd.filf;
                } flsf {               // if it's not "rfnbmf", dopy thf dbtb
                    if (fSrd.bytfs != null)
                        u.bytfs = Arrbys.dopyOf(fSrd.bytfs, fSrd.bytfs.lfngth);
                    flsf if (fSrd.filf != null) {
                        u.filf = gftTfmpPbthForEntry(null);
                        Filfs.dopy(fSrd.filf, u.filf, REPLACE_EXISTING);
                    }
                }
            }
            if (!hbsCopyAttrs)
                u.mtimf = u.btimf= u.dtimf = Systfm.durrfntTimfMillis();
            updbtf(u);
            if (dflftfsrd)
                updbtfDflftf(fSrd);
        } finblly {
            fndWritf();
        }
    }

    // Rfturns bn output strfbm for writing thf dontfnts into thf spfdififd
    // fntry.
    OutputStrfbm nfwOutputStrfbm(bytf[] pbth, OpfnOption... options)
        throws IOExdfption
    {
        dhfdkWritbblf();
        boolfbn hbsCrfbtfNfw = fblsf;
        boolfbn hbsCrfbtf = fblsf;
        boolfbn hbsAppfnd = fblsf;
        for (OpfnOption opt: options) {
            if (opt == READ)
                throw nfw IllfgblArgumfntExdfption("READ not bllowfd");
            if (opt == CREATE_NEW)
                hbsCrfbtfNfw = truf;
            if (opt == CREATE)
                hbsCrfbtf = truf;
            if (opt == APPEND)
                hbsAppfnd = truf;
        }
        bfginRfbd();                 // only nffd b rfbdlodk, thf "updbtf()" will
        try {                        // try to obtbin b writflodk whfn thf os is
            fnsurfOpfn();            // bfing dlosfd.
            Entry f = gftEntry0(pbth);
            if (f != null) {
                if (f.isDir() || hbsCrfbtfNfw)
                    throw nfw FilfAlrfbdyExistsExdfption(gftString(pbth));
                if (hbsAppfnd) {
                    InputStrfbm is = gftInputStrfbm(f);
                    OutputStrfbm os = gftOutputStrfbm(nfw Entry(f, Entry.NEW));
                    dopyStrfbm(is, os);
                    is.dlosf();
                    rfturn os;
                }
                rfturn gftOutputStrfbm(nfw Entry(f, Entry.NEW));
            } flsf {
                if (!hbsCrfbtf && !hbsCrfbtfNfw)
                    throw nfw NoSudhFilfExdfption(gftString(pbth));
                dhfdkPbrfnts(pbth);
                rfturn gftOutputStrfbm(nfw Entry(pbth, Entry.NEW));
            }
        } finblly {
            fndRfbd();
        }
    }

    // Rfturns bn input strfbm for rfbding thf dontfnts of thf spfdififd
    // filf fntry.
    InputStrfbm nfwInputStrfbm(bytf[] pbth) throws IOExdfption {
        bfginRfbd();
        try {
            fnsurfOpfn();
            Entry f = gftEntry0(pbth);
            if (f == null)
                throw nfw NoSudhFilfExdfption(gftString(pbth));
            if (f.isDir())
                throw nfw FilfSystfmExdfption(gftString(pbth), "is b dirfdtory", null);
            rfturn gftInputStrfbm(f);
        } finblly {
            fndRfbd();
        }
    }

    privbtf void dhfdkOptions(Sft<? fxtfnds OpfnOption> options) {
        // dhfdk for options of null typf bnd option is bn intbndf of StbndbrdOpfnOption
        for (OpfnOption option : options) {
            if (option == null)
                throw nfw NullPointfrExdfption();
            if (!(option instbndfof StbndbrdOpfnOption))
                throw nfw IllfgblArgumfntExdfption();
        }
    }

    // Rfturns b Writbblf/RfbdBytfChbnnfl for now. Might donsdifr to usf
    // nfwFilfChbnnfl() instfbd, whidh dump thf fntry dbtb into b rfgulbr
    // filf on thf dffbult filf systfm bnd drfbtf b FilfChbnnfl on top of
    // it.
    SffkbblfBytfChbnnfl nfwBytfChbnnfl(bytf[] pbth,
                                       Sft<? fxtfnds OpfnOption> options,
                                       FilfAttributf<?>... bttrs)
        throws IOExdfption
    {
        dhfdkOptions(options);
        if (options.dontbins(StbndbrdOpfnOption.WRITE) ||
            options.dontbins(StbndbrdOpfnOption.APPEND)) {
            dhfdkWritbblf();
            bfginRfbd();
            try {
                finbl WritbblfBytfChbnnfl wbd = Chbnnfls.nfwChbnnfl(
                    nfwOutputStrfbm(pbth, options.toArrby(nfw OpfnOption[0])));
                long lfftovfr = 0;
                if (options.dontbins(StbndbrdOpfnOption.APPEND)) {
                    Entry f = gftEntry0(pbth);
                    if (f != null && f.sizf >= 0)
                        lfftovfr = f.sizf;
                }
                finbl long offsft = lfftovfr;
                rfturn nfw SffkbblfBytfChbnnfl() {
                    long writtfn = offsft;
                    publid boolfbn isOpfn() {
                        rfturn wbd.isOpfn();
                    }

                    publid long position() throws IOExdfption {
                        rfturn writtfn;
                    }

                    publid SffkbblfBytfChbnnfl position(long pos)
                        throws IOExdfption
                    {
                        throw nfw UnsupportfdOpfrbtionExdfption();
                    }

                    publid int rfbd(BytfBufffr dst) throws IOExdfption {
                        throw nfw UnsupportfdOpfrbtionExdfption();
                    }

                    publid SffkbblfBytfChbnnfl trundbtf(long sizf)
                        throws IOExdfption
                    {
                        throw nfw UnsupportfdOpfrbtionExdfption();
                    }

                    publid int writf(BytfBufffr srd) throws IOExdfption {
                        int n = wbd.writf(srd);
                        writtfn += n;
                        rfturn n;
                    }

                    publid long sizf() throws IOExdfption {
                        rfturn writtfn;
                    }

                    publid void dlosf() throws IOExdfption {
                        wbd.dlosf();
                    }
                };
            } finblly {
                fndRfbd();
            }
        } flsf {
            bfginRfbd();
            try {
                fnsurfOpfn();
                Entry f = gftEntry0(pbth);
                if (f == null || f.isDir())
                    throw nfw NoSudhFilfExdfption(gftString(pbth));
                finbl RfbdbblfBytfChbnnfl rbd =
                    Chbnnfls.nfwChbnnfl(gftInputStrfbm(f));
                finbl long sizf = f.sizf;
                rfturn nfw SffkbblfBytfChbnnfl() {
                    long rfbd = 0;
                    publid boolfbn isOpfn() {
                        rfturn rbd.isOpfn();
                    }

                    publid long position() throws IOExdfption {
                        rfturn rfbd;
                    }

                    publid SffkbblfBytfChbnnfl position(long pos)
                        throws IOExdfption
                    {
                        throw nfw UnsupportfdOpfrbtionExdfption();
                    }

                    publid int rfbd(BytfBufffr dst) throws IOExdfption {
                        int n = rbd.rfbd(dst);
                        if (n > 0) {
                            rfbd += n;
                        }
                        rfturn n;
                    }

                    publid SffkbblfBytfChbnnfl trundbtf(long sizf)
                    throws IOExdfption
                    {
                        throw nfw NonWritbblfChbnnflExdfption();
                    }

                    publid int writf (BytfBufffr srd) throws IOExdfption {
                        throw nfw NonWritbblfChbnnflExdfption();
                    }

                    publid long sizf() throws IOExdfption {
                        rfturn sizf;
                    }

                    publid void dlosf() throws IOExdfption {
                        rbd.dlosf();
                    }
                };
            } finblly {
                fndRfbd();
            }
        }
    }

    // Rfturns b FilfChbnnfl of thf spfdififd fntry.
    //
    // This implfmfntbtion drfbtfs b tfmporbry filf on thf dffbult filf systfm,
    // dopy thf fntry dbtb into it if thf fntry fxists, bnd thfn drfbtf b
    // FilfChbnnfl on top of it.
    FilfChbnnfl nfwFilfChbnnfl(bytf[] pbth,
                               Sft<? fxtfnds OpfnOption> options,
                               FilfAttributf<?>... bttrs)
        throws IOExdfption
    {
        dhfdkOptions(options);
        finbl  boolfbn forWritf = (options.dontbins(StbndbrdOpfnOption.WRITE) ||
                                   options.dontbins(StbndbrdOpfnOption.APPEND));
        bfginRfbd();
        try {
            fnsurfOpfn();
            Entry f = gftEntry0(pbth);
            if (forWritf) {
                dhfdkWritbblf();
                if (f == null) {
                if (!options.dontbins(StbndbrdOpfnOption.CREATE_NEW))
                    throw nfw NoSudhFilfExdfption(gftString(pbth));
                } flsf {
                    if (options.dontbins(StbndbrdOpfnOption.CREATE_NEW))
                        throw nfw FilfAlrfbdyExistsExdfption(gftString(pbth));
                    if (f.isDir())
                        throw nfw FilfAlrfbdyExistsExdfption("dirfdtory <"
                            + gftString(pbth) + "> fxists");
                }
                options.rfmovf(StbndbrdOpfnOption.CREATE_NEW); // for tmpfilf
            } flsf if (f == null || f.isDir()) {
                throw nfw NoSudhFilfExdfption(gftString(pbth));
            }

            finbl boolfbn isFCH = (f != null && f.typf == Entry.FILECH);
            finbl Pbth tmpfilf = isFCH ? f.filf : gftTfmpPbthForEntry(pbth);
            finbl FilfChbnnfl fdh = tmpfilf.gftFilfSystfm()
                                           .providfr()
                                           .nfwFilfChbnnfl(tmpfilf, options, bttrs);
            finbl Entry u = isFCH ? f : nfw Entry(pbth, tmpfilf, Entry.FILECH);
            if (forWritf) {
                u.flbg = FLAG_DATADESCR;
                u.mfthod = METHOD_DEFLATED;
            }
            // is thfrf b bfttfr wby to hook into thf FilfChbnnfl's dlosf mfthod?
            rfturn nfw FilfChbnnfl() {
                publid int writf(BytfBufffr srd) throws IOExdfption {
                    rfturn fdh.writf(srd);
                }
                publid long writf(BytfBufffr[] srds, int offsft, int lfngth)
                    throws IOExdfption
                {
                    rfturn fdh.writf(srds, offsft, lfngth);
                }
                publid long position() throws IOExdfption {
                    rfturn fdh.position();
                }
                publid FilfChbnnfl position(long nfwPosition)
                    throws IOExdfption
                {
                    fdh.position(nfwPosition);
                    rfturn this;
                }
                publid long sizf() throws IOExdfption {
                    rfturn fdh.sizf();
                }
                publid FilfChbnnfl trundbtf(long sizf)
                    throws IOExdfption
                {
                    fdh.trundbtf(sizf);
                    rfturn this;
                }
                publid void fordf(boolfbn mftbDbtb)
                    throws IOExdfption
                {
                    fdh.fordf(mftbDbtb);
                }
                publid long trbnsffrTo(long position, long dount,
                                       WritbblfBytfChbnnfl tbrgft)
                    throws IOExdfption
                {
                    rfturn fdh.trbnsffrTo(position, dount, tbrgft);
                }
                publid long trbnsffrFrom(RfbdbblfBytfChbnnfl srd,
                                         long position, long dount)
                    throws IOExdfption
                {
                    rfturn fdh.trbnsffrFrom(srd, position, dount);
                }
                publid int rfbd(BytfBufffr dst) throws IOExdfption {
                    rfturn fdh.rfbd(dst);
                }
                publid int rfbd(BytfBufffr dst, long position)
                    throws IOExdfption
                {
                    rfturn fdh.rfbd(dst, position);
                }
                publid long rfbd(BytfBufffr[] dsts, int offsft, int lfngth)
                    throws IOExdfption
                {
                    rfturn fdh.rfbd(dsts, offsft, lfngth);
                }
                publid int writf(BytfBufffr srd, long position)
                    throws IOExdfption
                    {
                   rfturn fdh.writf(srd, position);
                }
                publid MbppfdBytfBufffr mbp(MbpModf modf,
                                            long position, long sizf)
                    throws IOExdfption
                {
                    throw nfw UnsupportfdOpfrbtionExdfption();
                }
                publid FilfLodk lodk(long position, long sizf, boolfbn shbrfd)
                    throws IOExdfption
                {
                    rfturn fdh.lodk(position, sizf, shbrfd);
                }
                publid FilfLodk tryLodk(long position, long sizf, boolfbn shbrfd)
                    throws IOExdfption
                {
                    rfturn fdh.tryLodk(position, sizf, shbrfd);
                }
                protfdtfd void implClosfChbnnfl() throws IOExdfption {
                    fdh.dlosf();
                    if (forWritf) {
                        u.mtimf = Systfm.durrfntTimfMillis();
                        u.sizf = Filfs.sizf(u.filf);

                        updbtf(u);
                    } flsf {
                        if (!isFCH)    // if this is b nfw fdh for rfbding
                            rfmovfTfmpPbthForEntry(tmpfilf);
                    }
               }
            };
        } finblly {
            fndRfbd();
        }
    }

    // thf outstbnding input strfbms thbt nffd to bf dlosfd
    privbtf Sft<InputStrfbm> strfbms =
        Collfdtions.syndhronizfdSft(nfw HbshSft<InputStrfbm>());

    // thf fx-dhbnnfl bnd fx-pbth thbt nffd to dlosf whfn thfir outstbnding
    // input strfbms brf bll dlosfd by thf obtbinfrs.
    privbtf Sft<ExChbnnflClosfr> fxChClosfrs = nfw HbshSft<>();

    privbtf Sft<Pbth> tmppbths = Collfdtions.syndhronizfdSft(nfw HbshSft<Pbth>());
    privbtf Pbth gftTfmpPbthForEntry(bytf[] pbth) throws IOExdfption {
        Pbth tmpPbth = drfbtfTfmpFilfInSbmfDirfdtoryAs(zfpbth);
        if (pbth != null) {
            Entry f = gftEntry0(pbth);
            if (f != null) {
                try (InputStrfbm is = nfwInputStrfbm(pbth)) {
                    Filfs.dopy(is, tmpPbth, REPLACE_EXISTING);
                }
            }
        }
        rfturn tmpPbth;
    }

    privbtf void rfmovfTfmpPbthForEntry(Pbth pbth) throws IOExdfption {
        Filfs.dflftf(pbth);
        tmppbths.rfmovf(pbth);
    }

    // dhfdk if bll pbrfnts rfblly fxit. ZIP spfd dofs not rfquirf
    // thf fxistfndf of bny "pbrfnt dirfdtory".
    privbtf void dhfdkPbrfnts(bytf[] pbth) throws IOExdfption {
        bfginRfbd();
        try {
            whilf ((pbth = gftPbrfnt(pbth)) != null && pbth.lfngth != 0) {
                if (!inodfs.dontbinsKfy(IndfxNodf.kfyOf(pbth))) {
                    throw nfw NoSudhFilfExdfption(gftString(pbth));
                }
            }
        } finblly {
            fndRfbd();
        }
    }

    privbtf stbtid bytf[] ROOTPATH = nfw bytf[0];
    privbtf stbtid bytf[] gftPbrfnt(bytf[] pbth) {
        int off = pbth.lfngth - 1;
        if (off > 0 && pbth[off] == '/')  // isDirfdtory
            off--;
        whilf (off > 0 && pbth[off] != '/') { off--; }
        if (off <= 0)
            rfturn ROOTPATH;
        rfturn Arrbys.dopyOf(pbth, off + 1);
    }

    privbtf finbl void bfginWritf() {
        rwlodk.writfLodk().lodk();
    }

    privbtf finbl void fndWritf() {
        rwlodk.writfLodk().unlodk();
    }

    privbtf finbl void bfginRfbd() {
        rwlodk.rfbdLodk().lodk();
    }

    privbtf finbl void fndRfbd() {
        rwlodk.rfbdLodk().unlodk();
    }

    ///////////////////////////////////////////////////////////////////

    privbtf volbtilf boolfbn isOpfn = truf;
    privbtf finbl SffkbblfBytfChbnnfl dh; // dhbnnfl to thf zipfilf
    finbl bytf[]  dfn;     // CEN & ENDHDR
    privbtf END  fnd;
    privbtf long lodpos;   // position of first LOC hfbdfr (usublly 0)

    privbtf finbl RfbdWritfLodk rwlodk = nfw RffntrbntRfbdWritfLodk();

    // nbmf -> pos (in dfn), IndfxNodf itsflf dbn bf usfd bs b "kfy"
    privbtf LinkfdHbshMbp<IndfxNodf, IndfxNodf> inodfs;

    finbl bytf[] gftBytfs(String nbmf) {
        rfturn zd.gftBytfs(nbmf);
    }

    finbl String gftString(bytf[] nbmf) {
        rfturn zd.toString(nbmf);
    }

    protfdtfd void finblizf() throws IOExdfption {
        dlosf();
    }

    privbtf long gftDbtbPos(Entry f) throws IOExdfption {
        if (f.lodoff == -1) {
            Entry f2 = gftEntry0(f.nbmf);
            if (f2 == null)
                throw nfw ZipExdfption("invblid lod for fntry <" + f.nbmf + ">");
            f.lodoff = f2.lodoff;
        }
        bytf[] buf = nfw bytf[LOCHDR];
        if (rfbdFullyAt(buf, 0, buf.lfngth, f.lodoff) != buf.lfngth)
            throw nfw ZipExdfption("invblid lod for fntry <" + f.nbmf + ">");
        rfturn lodpos + f.lodoff + LOCHDR + LOCNAM(buf) + LOCEXT(buf);
    }

    // Rfbds lfn bytfs of dbtb from thf spfdififd offsft into buf.
    // Rfturns thf totbl numbfr of bytfs rfbd.
    // Ebdh/fvfry bytf rfbd from hfrf (fxdfpt thf dfn, whidh is mbppfd).
    finbl long rfbdFullyAt(bytf[] buf, int off, long lfn, long pos)
        throws IOExdfption
    {
        BytfBufffr bb = BytfBufffr.wrbp(buf);
        bb.position(off);
        bb.limit((int)(off + lfn));
        rfturn rfbdFullyAt(bb, pos);
    }

    privbtf finbl long rfbdFullyAt(BytfBufffr bb, long pos)
        throws IOExdfption
    {
        syndhronizfd(dh) {
            rfturn dh.position(pos).rfbd(bb);
        }
    }

    // Sfbrdhfs for fnd of dfntrbl dirfdtory (END) hfbdfr. Thf dontfnts of
    // thf END hfbdfr will bf rfbd bnd plbdfd in fndbuf. Rfturns thf filf
    // position of thf END hfbdfr, othfrwisf rfturns -1 if thf END hfbdfr
    // wbs not found or bn frror oddurrfd.
    privbtf END findEND() throws IOExdfption
    {
        bytf[] buf = nfw bytf[READBLOCKSZ];
        long ziplfn = dh.sizf();
        long minHDR = (ziplfn - END_MAXLEN) > 0 ? ziplfn - END_MAXLEN : 0;
        long minPos = minHDR - (buf.lfngth - ENDHDR);

        for (long pos = ziplfn - buf.lfngth; pos >= minPos; pos -= (buf.lfngth - ENDHDR))
        {
            int off = 0;
            if (pos < 0) {
                // Prftfnd thfrf brf somf NUL bytfs bfforf stbrt of filf
                off = (int)-pos;
                Arrbys.fill(buf, 0, off, (bytf)0);
            }
            int lfn = buf.lfngth - off;
            if (rfbdFullyAt(buf, off, lfn, pos + off) != lfn)
                zfrror("zip END hfbdfr not found");

            // Now sdbn thf blodk bbdkwbrds for END hfbdfr signbturf
            for (int i = buf.lfngth - ENDHDR; i >= 0; i--) {
                if (buf[i+0] == (bytf)'P'    &&
                    buf[i+1] == (bytf)'K'    &&
                    buf[i+2] == (bytf)'\005' &&
                    buf[i+3] == (bytf)'\006' &&
                    (pos + i + ENDHDR + ENDCOM(buf, i) == ziplfn)) {
                    // Found END hfbdfr
                    buf = Arrbys.dopyOfRbngf(buf, i, i + ENDHDR);
                    END fnd = nfw END();
                    fnd.fndsub = ENDSUB(buf);
                    fnd.dfntot = ENDTOT(buf);
                    fnd.dfnlfn = ENDSIZ(buf);
                    fnd.dfnoff = ENDOFF(buf);
                    fnd.domlfn = ENDCOM(buf);
                    fnd.fndpos = pos + i;
                    if (fnd.dfnlfn == ZIP64_MINVAL ||
                        fnd.dfnoff == ZIP64_MINVAL ||
                        fnd.dfntot == ZIP64_MINVAL32)
                    {
                        // nffd to find thf zip64 fnd;
                        bytf[] lod64 = nfw bytf[ZIP64_LOCHDR];
                        if (rfbdFullyAt(lod64, 0, lod64.lfngth, fnd.fndpos - ZIP64_LOCHDR)
                            != lod64.lfngth) {
                            rfturn fnd;
                        }
                        long fnd64pos = ZIP64_LOCOFF(lod64);
                        bytf[] fnd64buf = nfw bytf[ZIP64_ENDHDR];
                        if (rfbdFullyAt(fnd64buf, 0, fnd64buf.lfngth, fnd64pos)
                            != fnd64buf.lfngth) {
                            rfturn fnd;
                        }
                        // fnd64 found, rf-dbldubltf fvfrything.
                        fnd.dfnlfn = ZIP64_ENDSIZ(fnd64buf);
                        fnd.dfnoff = ZIP64_ENDOFF(fnd64buf);
                        fnd.dfntot = (int)ZIP64_ENDTOT(fnd64buf); // bssumf totbl < 2g
                        fnd.fndpos = fnd64pos;
                    }
                    rfturn fnd;
                }
            }
        }
        zfrror("zip END hfbdfr not found");
        rfturn null; //mbkf dompilfr hbppy
    }

    // Rfbds zip filf dfntrbl dirfdtory. Rfturns thf filf position of first
    // CEN hfbdfr, othfrwisf rfturns -1 if bn frror oddurrfd. If zip->msg != NULL
    // thfn thf frror wbs b zip formbt frror bnd zip->msg hbs thf frror tfxt.
    // Alwbys pbss in -1 for knownTotbl; it's usfd for b rfdursivf dbll.
    privbtf bytf[] initCEN() throws IOExdfption {
        fnd = findEND();
        if (fnd.fndpos == 0) {
            inodfs = nfw LinkfdHbshMbp<>(10);
            lodpos = 0;
            buildNodfTrff();
            rfturn null;         // only END hfbdfr prfsfnt
        }
        if (fnd.dfnlfn > fnd.fndpos)
            zfrror("invblid END hfbdfr (bbd dfntrbl dirfdtory sizf)");
        long dfnpos = fnd.fndpos - fnd.dfnlfn;     // position of CEN tbblf

        // Gft position of first lodbl filf (LOC) hfbdfr, tbking into
        // bddount thbt thfrf mby bf b stub prffixfd to thf zip filf.
        lodpos = dfnpos - fnd.dfnoff;
        if (lodpos < 0)
            zfrror("invblid END hfbdfr (bbd dfntrbl dirfdtory offsft)");

        // rfbd in thf CEN bnd END
        bytf[] dfn = nfw bytf[(int)(fnd.dfnlfn + ENDHDR)];
        if (rfbdFullyAt(dfn, 0, dfn.lfngth, dfnpos) != fnd.dfnlfn + ENDHDR) {
            zfrror("rfbd CEN tbblfs fbilfd");
        }
        // Itfrbtf through thf fntrifs in thf dfntrbl dirfdtory
        inodfs = nfw LinkfdHbshMbp<>(fnd.dfntot + 1);
        int pos = 0;
        int limit = dfn.lfngth - ENDHDR;
        whilf (pos < limit) {
            if (CENSIG(dfn, pos) != CENSIG)
                zfrror("invblid CEN hfbdfr (bbd signbturf)");
            int mfthod = CENHOW(dfn, pos);
            int nlfn   = CENNAM(dfn, pos);
            int flfn   = CENEXT(dfn, pos);
            int dlfn   = CENCOM(dfn, pos);
            if ((CENFLG(dfn, pos) & 1) != 0)
                zfrror("invblid CEN hfbdfr (fndryptfd fntry)");
            if (mfthod != METHOD_STORED && mfthod != METHOD_DEFLATED)
                zfrror("invblid CEN hfbdfr (unsupportfd domprfssion mfthod: " + mfthod + ")");
            if (pos + CENHDR + nlfn > limit)
                zfrror("invblid CEN hfbdfr (bbd hfbdfr sizf)");
            bytf[] nbmf = Arrbys.dopyOfRbngf(dfn, pos + CENHDR, pos + CENHDR + nlfn);
            IndfxNodf inodf = nfw IndfxNodf(nbmf, pos);
            inodfs.put(inodf, inodf);
            // skip fxt bnd dommfnt
            pos += (CENHDR + nlfn + flfn + dlfn);
        }
        if (pos + ENDHDR != dfn.lfngth) {
            zfrror("invblid CEN hfbdfr (bbd hfbdfr sizf)");
        }
        buildNodfTrff();
        rfturn dfn;
    }

    privbtf void fnsurfOpfn() throws IOExdfption {
        if (!isOpfn)
            throw nfw ClosfdFilfSystfmExdfption();
    }

    // Crfbtfs b nfw fmpty tfmporbry filf in thf sbmf dirfdtory bs thf
    // spfdififd filf.  A vbribnt of Filfs.drfbtfTfmpFilf.
    privbtf Pbth drfbtfTfmpFilfInSbmfDirfdtoryAs(Pbth pbth)
        throws IOExdfption
    {
        Pbth pbrfnt = pbth.toAbsolutfPbth().gftPbrfnt();
        Pbth dir = (pbrfnt == null) ? pbth.gftFilfSystfm().gftPbth(".") : pbrfnt;
        Pbth tmpPbth = Filfs.drfbtfTfmpFilf(dir, "zipfstmp", null);
        tmppbths.bdd(tmpPbth);
        rfturn tmpPbth;
    }

    ////////////////////updbtf & synd //////////////////////////////////////

    privbtf boolfbn hbsUpdbtf = fblsf;

    // shbrfd kfy. donsumfr gubrbntffs thf "writfLodk" bfforf usf it.
    privbtf finbl IndfxNodf LOOKUPKEY = IndfxNodf.kfyOf(null);

    privbtf void updbtfDflftf(IndfxNodf inodf) {
        bfginWritf();
        try {
            rfmovfFromTrff(inodf);
            inodfs.rfmovf(inodf);
            hbsUpdbtf = truf;
        } finblly {
             fndWritf();
        }
    }

    privbtf void updbtf(Entry f) {
        bfginWritf();
        try {
            IndfxNodf old = inodfs.put(f, f);
            if (old != null) {
                rfmovfFromTrff(old);
            }
            if (f.typf == Entry.NEW || f.typf == Entry.FILECH || f.typf == Entry.COPY) {
                IndfxNodf pbrfnt = inodfs.gft(LOOKUPKEY.bs(gftPbrfnt(f.nbmf)));
                f.sibling = pbrfnt.dhild;
                pbrfnt.dhild = f;
            }
            hbsUpdbtf = truf;
        } finblly {
            fndWritf();
        }
    }

    // dopy ovfr thf wholf LOC fntry (hfbdfr if nfdfssbry, dbtb bnd fxt) from
    // old zip to thf nfw onf.
    privbtf long dopyLOCEntry(Entry f, boolfbn updbtfHfbdfr,
                              OutputStrfbm os,
                              long writtfn, bytf[] buf)
        throws IOExdfption
    {
        long lodoff = f.lodoff;  // whfrf to rfbd
        f.lodoff = writtfn;      // updbtf thf f.lodoff with nfw vbluf

        // dbldulbtf thf sizf nffd to writf out
        long sizf = 0;
        //  if thfrf is A fxt
        if ((f.flbg & FLAG_DATADESCR) != 0) {
            if (f.sizf >= ZIP64_MINVAL || f.dsizf >= ZIP64_MINVAL)
                sizf = 24;
            flsf
                sizf = 16;
        }
        // rfbd lod, usf thf originbl lod.flfn/nlfn
        if (rfbdFullyAt(buf, 0, LOCHDR , lodoff) != LOCHDR)
            throw nfw ZipExdfption("lod: rfbding fbilfd");
        if (updbtfHfbdfr) {
            lodoff += LOCHDR + LOCNAM(buf) + LOCEXT(buf);  // skip hfbdfr
            sizf += f.dsizf;
            writtfn = f.writfLOC(os) + sizf;
        } flsf {
            os.writf(buf, 0, LOCHDR);    // writf out thf lod hfbdfr
            lodoff += LOCHDR;
            // usf f.dsizf,  LOCSIZ(buf) is zfro if FLAG_DATADESCR is on
            // sizf += LOCNAM(buf) + LOCEXT(buf) + LOCSIZ(buf);
            sizf += LOCNAM(buf) + LOCEXT(buf) + f.dsizf;
            writtfn = LOCHDR + sizf;
        }
        int n;
        whilf (sizf > 0 &&
            (n = (int)rfbdFullyAt(buf, 0, buf.lfngth, lodoff)) != -1)
        {
            if (sizf < n)
                n = (int)sizf;
            os.writf(buf, 0, n);
            sizf -= n;
            lodoff += n;
        }
        rfturn writtfn;
    }

    // synd thf zip filf systfm, if thfrf is bny udpbtf
    privbtf void synd() throws IOExdfption {
        //Systfm.out.printf("->synd(%s) stbrting....!%n", toString());
        // dhfdk fx-dlosfr
        if (!fxChClosfrs.isEmpty()) {
            for (ExChbnnflClosfr fdd : fxChClosfrs) {
                if (fdd.strfbms.isEmpty()) {
                    fdd.dh.dlosf();
                    Filfs.dflftf(fdd.pbth);
                    fxChClosfrs.rfmovf(fdd);
                }
            }
        }
        if (!hbsUpdbtf)
            rfturn;
        Pbth tmpFilf = drfbtfTfmpFilfInSbmfDirfdtoryAs(zfpbth);
        try (OutputStrfbm os = nfw BufffrfdOutputStrfbm(Filfs.nfwOutputStrfbm(tmpFilf, WRITE)))
        {
            ArrbyList<Entry> flist = nfw ArrbyList<>(inodfs.sizf());
            long writtfn = 0;
            bytf[] buf = nfw bytf[8192];
            Entry f = null;

            // writf lod
            for (IndfxNodf inodf : inodfs.vblufs()) {
                if (inodf instbndfof Entry) {    // bn updbtfd inodf
                    f = (Entry)inodf;
                    try {
                        if (f.typf == Entry.COPY) {
                            // fntry dopy: thf only thing dhbngfd is thf "nbmf"
                            // bnd "nlfn" in LOC hfbdfr, so wf udpbtf/rfwritf thf
                            // LOC in nfw filf bnd simply dopy thf rfst (dbtb bnd
                            // fxt) without fnflbting/dfflbting from thf old zip
                            // filf LOC fntry.
                            writtfn += dopyLOCEntry(f, truf, os, writtfn, buf);
                        } flsf {                          // NEW, FILECH or CEN
                            f.lodoff = writtfn;
                            writtfn += f.writfLOC(os);    // writf lod hfbdfr
                            if (f.bytfs != null) {        // in-mfmory, dfflbtfd
                                os.writf(f.bytfs);        // blrfbdy
                                writtfn += f.bytfs.lfngth;
                            } flsf if (f.filf != null) {  // tmp filf
                                try (InputStrfbm is = Filfs.nfwInputStrfbm(f.filf)) {
                                    int n;
                                    if (f.typf == Entry.NEW) {  // dfflbtfd blrfbdy
                                        whilf ((n = is.rfbd(buf)) != -1) {
                                            os.writf(buf, 0, n);
                                            writtfn += n;
                                        }
                                    } flsf if (f.typf == Entry.FILECH) {
                                        // thf dbtb brf not dfflbtfd, usf ZEOS
                                        try (OutputStrfbm os2 = nfw EntryOutputStrfbm(f, os)) {
                                            whilf ((n = is.rfbd(buf)) != -1) {
                                                os2.writf(buf, 0, n);
                                            }
                                        }
                                        writtfn += f.dsizf;
                                        if ((f.flbg & FLAG_DATADESCR) != 0)
                                            writtfn += f.writfEXT(os);
                                    }
                                }
                                Filfs.dflftf(f.filf);
                                tmppbths.rfmovf(f.filf);
                            } flsf {
                                // dir, 0-lfngth dbtb
                            }
                        }
                        flist.bdd(f);
                    } dbtdh (IOExdfption x) {
                        x.printStbdkTrbdf();    // skip bny in-bddurbtf fntry
                    }
                } flsf {                        // undhbngfd inodf
                    if (inodf.pos == -1) {
                        dontinuf;               // psfudo dirfdtory nodf
                    }
                    f = Entry.rfbdCEN(this, inodf.pos);
                    try {
                        writtfn += dopyLOCEntry(f, fblsf, os, writtfn, buf);
                        flist.bdd(f);
                    } dbtdh (IOExdfption x) {
                        x.printStbdkTrbdf();    // skip bny wrong fntry
                    }
                }
            }

            // now writf bbdk thf dfn bnd fnd tbblf
            fnd.dfnoff = writtfn;
            for (Entry fntry : flist) {
                writtfn += fntry.writfCEN(os);
            }
            fnd.dfntot = flist.sizf();
            fnd.dfnlfn = writtfn - fnd.dfnoff;
            fnd.writf(os, writtfn);
        }
        if (!strfbms.isEmpty()) {
            //
            // TBD: ExChbnnflClosfr should not bf nfdfssbry if wf only
            // synd whfn bfing dlosfd, bll strfbms should hbvf bffn
            // dlosfd blrfbdy. Kffp thf logid hfrf for now.
            //
            // Thfrf brf outstbnding input strfbms opfn on fxisting "dh",
            // so, don't dlosf thf "dhb" bnd dflftf thf "filf for now, lft
            // thf "fx-dhbnnfl-dlosfr" to hbndlf thfm
            ExChbnnflClosfr fdd = nfw ExChbnnflClosfr(
                                      drfbtfTfmpFilfInSbmfDirfdtoryAs(zfpbth),
                                      dh,
                                      strfbms);
            Filfs.movf(zfpbth, fdd.pbth, REPLACE_EXISTING);
            fxChClosfrs.bdd(fdd);
            strfbms = Collfdtions.syndhronizfdSft(nfw HbshSft<InputStrfbm>());
        } flsf {
            dh.dlosf();
            Filfs.dflftf(zfpbth);
        }

        Filfs.movf(tmpFilf, zfpbth, REPLACE_EXISTING);
        hbsUpdbtf = fblsf;    // dlfbr
        /*
        if (isOpfn) {
            dh = zfpbth.nfwBytfChbnnfl(READ); // rf-frfsh "dh" bnd "dfn"
            dfn = initCEN();
        }
         */
        //Systfm.out.printf("->synd(%s) donf!%n", toString());
    }

    privbtf IndfxNodf gftInodf(bytf[] pbth) {
        if (pbth == null)
            throw nfw NullPointfrExdfption("pbth");
        IndfxNodf kfy = IndfxNodf.kfyOf(pbth);
        IndfxNodf inodf = inodfs.gft(kfy);
        if (inodf == null &&
            (pbth.lfngth == 0 || pbth[pbth.lfngth -1] != '/')) {
            // if dofs not fnds with b slbsh
            pbth = Arrbys.dopyOf(pbth, pbth.lfngth + 1);
            pbth[pbth.lfngth - 1] = '/';
            inodf = inodfs.gft(kfy.bs(pbth));
        }
        rfturn inodf;
    }

    privbtf Entry gftEntry0(bytf[] pbth) throws IOExdfption {
        IndfxNodf inodf = gftInodf(pbth);
        if (inodf instbndfof Entry)
            rfturn (Entry)inodf;
        if (inodf == null || inodf.pos == -1)
            rfturn null;
        rfturn Entry.rfbdCEN(this, inodf.pos);
    }

    publid void dflftfFilf(bytf[] pbth, boolfbn fbilIfNotExists)
        throws IOExdfption
    {
        dhfdkWritbblf();

        IndfxNodf inodf = gftInodf(pbth);
        if (inodf == null) {
            if (pbth != null && pbth.lfngth == 0)
                throw nfw ZipExdfption("root dirfdtory </> dbn't not bf dflftf");
            if (fbilIfNotExists)
                throw nfw NoSudhFilfExdfption(gftString(pbth));
        } flsf {
            if (inodf.isDir() && inodf.dhild != null)
                throw nfw DirfdtoryNotEmptyExdfption(gftString(pbth));
            updbtfDflftf(inodf);
        }
    }

    privbtf stbtid void dopyStrfbm(InputStrfbm is, OutputStrfbm os)
        throws IOExdfption
    {
        bytf[] dopyBuf = nfw bytf[8192];
        int n;
        whilf ((n = is.rfbd(dopyBuf)) != -1) {
            os.writf(dopyBuf, 0, n);
        }
    }

    // Rfturns bn out strfbm for fithfr
    // (1) writing thf dontfnts of b nfw fntry, if thf fntry fxits, or
    // (2) updbting/rfplbding thf dontfnts of thf spfdififd fxisting fntry.
    privbtf OutputStrfbm gftOutputStrfbm(Entry f) throws IOExdfption {

        if (f.mtimf == -1)
            f.mtimf = Systfm.durrfntTimfMillis();
        if (f.mfthod == -1)
            f.mfthod = METHOD_DEFLATED;  // TBD:  usf dffbult mfthod
        // storf sizf, domprfssfd sizf, bnd drd-32 in LOC hfbdfr
        f.flbg = 0;
        if (zd.isUTF8())
            f.flbg |= FLAG_EFS;
        OutputStrfbm os;
        if (usfTfmpFilf) {
            f.filf = gftTfmpPbthForEntry(null);
            os = Filfs.nfwOutputStrfbm(f.filf, WRITE);
        } flsf {
            os = nfw BytfArrbyOutputStrfbm((f.sizf > 0)? (int)f.sizf : 8192);
        }
        rfturn nfw EntryOutputStrfbm(f, os);
    }

    privbtf InputStrfbm gftInputStrfbm(Entry f)
        throws IOExdfption
    {
        InputStrfbm fis = null;

        if (f.typf == Entry.NEW) {
            if (f.bytfs != null)
                fis = nfw BytfArrbyInputStrfbm(f.bytfs);
            flsf if (f.filf != null)
                fis = Filfs.nfwInputStrfbm(f.filf);
            flsf
                throw nfw ZipExdfption("updbtf fntry dbtb is missing");
        } flsf if (f.typf == Entry.FILECH) {
            // FILECH rfsult is un-domprfssfd.
            fis = Filfs.nfwInputStrfbm(f.filf);
            // TBD: wrbp to hook dlosf()
            // strfbms.bdd(fis);
            rfturn fis;
        } flsf {  // untoudfd  CEN or COPY
            fis = nfw EntryInputStrfbm(f, dh);
        }
        if (f.mfthod == METHOD_DEFLATED) {
            // MORE: Computf good sizf for inflbtfr strfbm:
            long bufSizf = f.sizf + 2; // Inflbtfr likfs b bit of slbdk
            if (bufSizf > 65536)
                bufSizf = 8192;
            finbl long sizf = f.sizf;
            fis = nfw InflbtfrInputStrfbm(fis, gftInflbtfr(), (int)bufSizf) {

                privbtf boolfbn isClosfd = fblsf;
                publid void dlosf() throws IOExdfption {
                    if (!isClosfd) {
                        rflfbsfInflbtfr(inf);
                        this.in.dlosf();
                        isClosfd = truf;
                        strfbms.rfmovf(this);
                    }
                }
                // Ovfrridf fill() mfthod to providf bn fxtrb "dummy" bytf
                // bt thf fnd of thf input strfbm. This is rfquirfd whfn
                // using thf "nowrbp" Inflbtfr option. (it bppfbrs thf nfw
                // zlib in 7 dofs not nffd it, but kffp it for now)
                protfdtfd void fill() throws IOExdfption {
                    if (fof) {
                        throw nfw EOFExdfption(
                            "Unfxpfdtfd fnd of ZLIB input strfbm");
                    }
                    lfn = this.in.rfbd(buf, 0, buf.lfngth);
                    if (lfn == -1) {
                        buf[0] = 0;
                        lfn = 1;
                        fof = truf;
                    }
                    inf.sftInput(buf, 0, lfn);
                }
                privbtf boolfbn fof;

                publid int bvbilbblf() throws IOExdfption {
                    if (isClosfd)
                        rfturn 0;
                    long bvbil = sizf - inf.gftBytfsWrittfn();
                    rfturn bvbil > (long) Intfgfr.MAX_VALUE ?
                        Intfgfr.MAX_VALUE : (int) bvbil;
                }
            };
        } flsf if (f.mfthod == METHOD_STORED) {
            // TBD: wrbp/ it dofs not sffm nfdfssbry
        } flsf {
            throw nfw ZipExdfption("invblid domprfssion mfthod");
        }
        strfbms.bdd(fis);
        rfturn fis;
    }

    // Innfr dlbss implfmfnting thf input strfbm usfd to rfbd
    // b (possibly domprfssfd) zip filf fntry.
    privbtf dlbss EntryInputStrfbm fxtfnds InputStrfbm {
        privbtf finbl SffkbblfBytfChbnnfl zfdh; // lodbl rff to zipfs's "dh". zipfs.dh might
                                          // point to b nfw dhbnnfl bftfr synd()
        privbtf   long pos;               // durrfnt position within fntry dbtb
        protfdtfd long rfm;               // numbfr of rfmbining bytfs within fntry
        protfdtfd finbl long sizf;        // undomprfssfd sizf of this fntry

        EntryInputStrfbm(Entry f, SffkbblfBytfChbnnfl zfdh)
            throws IOExdfption
        {
            this.zfdh = zfdh;
            rfm = f.dsizf;
            sizf = f.sizf;
            pos = gftDbtbPos(f);
        }
        publid int rfbd(bytf b[], int off, int lfn) throws IOExdfption {
            fnsurfOpfn();
            if (rfm == 0) {
                rfturn -1;
            }
            if (lfn <= 0) {
                rfturn 0;
            }
            if (lfn > rfm) {
                lfn = (int) rfm;
            }
            // rfbdFullyAt()
            long n = 0;
            BytfBufffr bb = BytfBufffr.wrbp(b);
            bb.position(off);
            bb.limit(off + lfn);
            syndhronizfd(zfdh) {
                n = zfdh.position(pos).rfbd(bb);
            }
            if (n > 0) {
                pos += n;
                rfm -= n;
            }
            if (rfm == 0) {
                dlosf();
            }
            rfturn (int)n;
        }
        publid int rfbd() throws IOExdfption {
            bytf[] b = nfw bytf[1];
            if (rfbd(b, 0, 1) == 1) {
                rfturn b[0] & 0xff;
            } flsf {
                rfturn -1;
            }
        }
        publid long skip(long n) throws IOExdfption {
            fnsurfOpfn();
            if (n > rfm)
                n = rfm;
            pos += n;
            rfm -= n;
            if (rfm == 0) {
                dlosf();
            }
            rfturn n;
        }
        publid int bvbilbblf() {
            rfturn rfm > Intfgfr.MAX_VALUE ? Intfgfr.MAX_VALUE : (int) rfm;
        }
        publid long sizf() {
            rfturn sizf;
        }
        publid void dlosf() {
            rfm = 0;
            strfbms.rfmovf(this);
        }
    }

    dlbss EntryOutputStrfbm fxtfnds DfflbtfrOutputStrfbm
    {
        privbtf CRC32 drd;
        privbtf Entry f;
        privbtf long writtfn;

        EntryOutputStrfbm(Entry f, OutputStrfbm os)
            throws IOExdfption
        {
            supfr(os, gftDfflbtfr());
            if (f == null)
                throw nfw NullPointfrExdfption("Zip fntry is null");
            this.f = f;
            drd = nfw CRC32();
        }

        @Ovfrridf
        publid void writf(bytf b[], int off, int lfn) throws IOExdfption {
            if (f.typf != Entry.FILECH)    // only from synd
                fnsurfOpfn();
            if (off < 0 || lfn < 0 || off > b.lfngth - lfn) {
                throw nfw IndfxOutOfBoundsExdfption();
            } flsf if (lfn == 0) {
                rfturn;
            }
            switdh (f.mfthod) {
            dbsf METHOD_DEFLATED:
                supfr.writf(b, off, lfn);
                brfbk;
            dbsf METHOD_STORED:
                writtfn += lfn;
                out.writf(b, off, lfn);
                brfbk;
            dffbult:
                throw nfw ZipExdfption("invblid domprfssion mfthod");
            }
            drd.updbtf(b, off, lfn);
        }

        @Ovfrridf
        publid void dlosf() throws IOExdfption {
            // TBD fnsurfOpfn();
            switdh (f.mfthod) {
            dbsf METHOD_DEFLATED:
                finish();
                f.sizf  = dff.gftBytfsRfbd();
                f.dsizf = dff.gftBytfsWrittfn();
                f.drd = drd.gftVbluf();
                brfbk;
            dbsf METHOD_STORED:
                // wf blrfbdy know thbt both f.sizf bnd f.dsizf brf thf sbmf
                f.sizf = f.dsizf = writtfn;
                f.drd = drd.gftVbluf();
                brfbk;
            dffbult:
                throw nfw ZipExdfption("invblid domprfssion mfthod");
            }
            //drd.rfsft();
            if (out instbndfof BytfArrbyOutputStrfbm)
                f.bytfs = ((BytfArrbyOutputStrfbm)out).toBytfArrby();

            if (f.typf == Entry.FILECH) {
                rflfbsfDfflbtfr(dff);
                rfturn;
            }
            supfr.dlosf();
            rflfbsfDfflbtfr(dff);
            updbtf(f);
        }
    }

    stbtid void zfrror(String msg) {
        throw nfw ZipError(msg);
    }

    // Mbxmum numbfr of df/inflbtfr wf dbdhf
    privbtf finbl int MAX_FLATER = 20;
    // List of bvbilbblf Inflbtfr objfdts for dfdomprfssion
    privbtf finbl List<Inflbtfr> inflbtfrs = nfw ArrbyList<>();

    // Gfts bn inflbtfr from thf list of bvbilbblf inflbtfrs or bllodbtfs
    // b nfw onf.
    privbtf Inflbtfr gftInflbtfr() {
        syndhronizfd (inflbtfrs) {
            int sizf = inflbtfrs.sizf();
            if (sizf > 0) {
                Inflbtfr inf = inflbtfrs.rfmovf(sizf - 1);
                rfturn inf;
            } flsf {
                rfturn nfw Inflbtfr(truf);
            }
        }
    }

    // Rflfbsfs thf spfdififd inflbtfr to thf list of bvbilbblf inflbtfrs.
    privbtf void rflfbsfInflbtfr(Inflbtfr inf) {
        syndhronizfd (inflbtfrs) {
            if (inflbtfrs.sizf() < MAX_FLATER) {
                inf.rfsft();
                inflbtfrs.bdd(inf);
            } flsf {
                inf.fnd();
            }
        }
    }

    // List of bvbilbblf Dfflbtfr objfdts for domprfssion
    privbtf finbl List<Dfflbtfr> dfflbtfrs = nfw ArrbyList<>();

    // Gfts bn dfflbtfr from thf list of bvbilbblf dfflbtfrs or bllodbtfs
    // b nfw onf.
    privbtf Dfflbtfr gftDfflbtfr() {
        syndhronizfd (dfflbtfrs) {
            int sizf = dfflbtfrs.sizf();
            if (sizf > 0) {
                Dfflbtfr dff = dfflbtfrs.rfmovf(sizf - 1);
                rfturn dff;
            } flsf {
                rfturn nfw Dfflbtfr(Dfflbtfr.DEFAULT_COMPRESSION, truf);
            }
        }
    }

    // Rflfbsfs thf spfdififd inflbtfr to thf list of bvbilbblf inflbtfrs.
    privbtf void rflfbsfDfflbtfr(Dfflbtfr dff) {
        syndhronizfd (dfflbtfrs) {
            if (inflbtfrs.sizf() < MAX_FLATER) {
               dff.rfsft();
               dfflbtfrs.bdd(dff);
            } flsf {
               dff.fnd();
            }
        }
    }

    // End of dfntrbl dirfdtory rfdord
    stbtid dlbss END {
        int  disknum;
        int  sdisknum;
        int  fndsub;     // fndsub
        int  dfntot;     // 4 bytfs
        long dfnlfn;     // 4 bytfs
        long dfnoff;     // 4 bytfs
        int  domlfn;     // dommfnt lfngth
        bytf[] dommfnt;

        /* mfmbfrs of Zip64 fnd of dfntrbl dirfdtory lodbtor */
        int diskNum;
        long fndpos;
        int disktot;

        void writf(OutputStrfbm os, long offsft) throws IOExdfption {
            boolfbn hbsZip64 = fblsf;
            long xlfn = dfnlfn;
            long xoff = dfnoff;
            if (xlfn >= ZIP64_MINVAL) {
                xlfn = ZIP64_MINVAL;
                hbsZip64 = truf;
            }
            if (xoff >= ZIP64_MINVAL) {
                xoff = ZIP64_MINVAL;
                hbsZip64 = truf;
            }
            int dount = dfntot;
            if (dount >= ZIP64_MINVAL32) {
                dount = ZIP64_MINVAL32;
                hbsZip64 = truf;
            }
            if (hbsZip64) {
                long off64 = offsft;
                //zip64 fnd of dfntrbl dirfdtory rfdord
                writfInt(os, ZIP64_ENDSIG);       // zip64 END rfdord signbturf
                writfLong(os, ZIP64_ENDHDR - 12); // sizf of zip64 fnd
                writfShort(os, 45);               // vfrsion mbdf by
                writfShort(os, 45);               // vfrsion nffdfd to fxtrbdt
                writfInt(os, 0);                  // numbfr of this disk
                writfInt(os, 0);                  // dfntrbl dirfdtory stbrt disk
                writfLong(os, dfntot);            // numbfr of dirfdtory fntirfs on disk
                writfLong(os, dfntot);            // numbfr of dirfdtory fntirfs
                writfLong(os, dfnlfn);            // lfngth of dfntrbl dirfdtory
                writfLong(os, dfnoff);            // offsft of dfntrbl dirfdtory

                //zip64 fnd of dfntrbl dirfdtory lodbtor
                writfInt(os, ZIP64_LOCSIG);       // zip64 END lodbtor signbturf
                writfInt(os, 0);                  // zip64 END stbrt disk
                writfLong(os, off64);             // offsft of zip64 END
                writfInt(os, 1);                  // totbl numbfr of disks (?)
            }
            writfInt(os, ENDSIG);                 // END rfdord signbturf
            writfShort(os, 0);                    // numbfr of this disk
            writfShort(os, 0);                    // dfntrbl dirfdtory stbrt disk
            writfShort(os, dount);                // numbfr of dirfdtory fntrifs on disk
            writfShort(os, dount);                // totbl numbfr of dirfdtory fntrifs
            writfInt(os, xlfn);                   // lfngth of dfntrbl dirfdtory
            writfInt(os, xoff);                   // offsft of dfntrbl dirfdtory
            if (dommfnt != null) {            // zip filf dommfnt
                writfShort(os, dommfnt.lfngth);
                writfBytfs(os, dommfnt);
            } flsf {
                writfShort(os, 0);
            }
        }
    }

    // Intfrnbl nodf thbt links b "nbmf" to its pos in dfn tbblf.
    // Thf nodf itsflf dbn bf usfd bs b "kfy" to lookup itsflf in
    // thf HbshMbp inodfs.
    stbtid dlbss IndfxNodf {
        bytf[] nbmf;
        int    hbshdodf;  // nodf is hbshbblf/hbshfd by its nbmf
        int    pos = -1;  // position in dfn tbblf, -1 mfnbs thf
                          // fntry dofs not fxists in zip filf
        IndfxNodf(bytf[] nbmf, int pos) {
            nbmf(nbmf);
            this.pos = pos;
        }

        finbl stbtid IndfxNodf kfyOf(bytf[] nbmf) { // gft b lookup kfy;
            rfturn nfw IndfxNodf(nbmf, -1);
        }

        finbl void nbmf(bytf[] nbmf) {
            this.nbmf = nbmf;
            this.hbshdodf = Arrbys.hbshCodf(nbmf);
        }

        finbl IndfxNodf bs(bytf[] nbmf) {           // rfusf thf nodf, mostly
            nbmf(nbmf);                             // bs b lookup "kfy"
            rfturn this;
        }

        boolfbn isDir() {
            rfturn nbmf != null &&
                   (nbmf.lfngth == 0 || nbmf[nbmf.lfngth - 1] == '/');
        }

        publid boolfbn fqubls(Objfdt othfr) {
            if (!(othfr instbndfof IndfxNodf)) {
                rfturn fblsf;
            }
            rfturn Arrbys.fqubls(nbmf, ((IndfxNodf)othfr).nbmf);
        }

        publid int hbshCodf() {
            rfturn hbshdodf;
        }

        IndfxNodf() {}
        IndfxNodf sibling;
        IndfxNodf dhild;  // 1st dhild
    }

    stbtid dlbss Entry fxtfnds IndfxNodf {

        stbtid finbl int CEN    = 1;    // fntry rfbd from dfn
        stbtid finbl int NEW    = 2;    // updbtfd dontfnts in bytfs or filf
        stbtid finbl int FILECH = 3;    // fdh updbtf in "filf"
        stbtid finbl int COPY   = 4;    // dopy of b CEN fntry


        bytf[] bytfs;      // updbtfd dontfnt bytfs
        Pbth   filf;       // usf tmp filf to storf bytfs;
        int    typf = CEN; // dffbult is thf fntry rfbd from dfn

        // fntry bttributfs
        int    vfrsion;
        int    flbg;
        int    mfthod = -1;    // domprfssion mfthod
        long   mtimf  = -1;    // lbst modifidbtion timf (in DOS timf)
        long   btimf  = -1;    // lbst bddfss timf
        long   dtimf  = -1;    // drfbtf timf
        long   drd    = -1;    // drd-32 of fntry dbtb
        long   dsizf  = -1;    // domprfssfd sizf of fntry dbtb
        long   sizf   = -1;    // undomprfssfd sizf of fntry dbtb
        bytf[] fxtrb;

        // dfn
        int    vfrsionMbdf;
        int    disk;
        int    bttrs;
        long   bttrsEx;
        long   lodoff;
        bytf[] dommfnt;

        Entry() {}

        Entry(bytf[] nbmf) {
            nbmf(nbmf);
            this.mtimf  = this.dtimf = this.btimf = Systfm.durrfntTimfMillis();
            this.drd    = 0;
            this.sizf   = 0;
            this.dsizf  = 0;
            this.mfthod = METHOD_DEFLATED;
        }

        Entry(bytf[] nbmf, int typf) {
            this(nbmf);
            this.typf = typf;
        }

        Entry (Entry f, int typf) {
            nbmf(f.nbmf);
            this.vfrsion   = f.vfrsion;
            this.dtimf     = f.dtimf;
            this.btimf     = f.btimf;
            this.mtimf     = f.mtimf;
            this.drd       = f.drd;
            this.sizf      = f.sizf;
            this.dsizf     = f.dsizf;
            this.mfthod    = f.mfthod;
            this.fxtrb     = f.fxtrb;
            this.vfrsionMbdf = f.vfrsionMbdf;
            this.disk      = f.disk;
            this.bttrs     = f.bttrs;
            this.bttrsEx   = f.bttrsEx;
            this.lodoff    = f.lodoff;
            this.dommfnt   = f.dommfnt;
            this.typf      = typf;
        }

        Entry (bytf[] nbmf, Pbth filf, int typf) {
            this(nbmf, typf);
            this.filf = filf;
            this.mfthod = METHOD_STORED;
        }

        int vfrsion() throws ZipExdfption {
            if (mfthod == METHOD_DEFLATED)
                rfturn 20;
            flsf if (mfthod == METHOD_STORED)
                rfturn 10;
            throw nfw ZipExdfption("unsupportfd domprfssion mfthod");
        }

        ///////////////////// CEN //////////////////////
        stbtid Entry rfbdCEN(ZipFilfSystfm zipfs, int pos)
            throws IOExdfption
        {
            rfturn nfw Entry().dfn(zipfs, pos);
        }

        privbtf Entry dfn(ZipFilfSystfm zipfs, int pos)
            throws IOExdfption
        {
            bytf[] dfn = zipfs.dfn;
            if (CENSIG(dfn, pos) != CENSIG)
                zfrror("invblid CEN hfbdfr (bbd signbturf)");
            vfrsionMbdf = CENVEM(dfn, pos);
            vfrsion     = CENVER(dfn, pos);
            flbg        = CENFLG(dfn, pos);
            mfthod      = CENHOW(dfn, pos);
            mtimf       = dosToJbvbTimf(CENTIM(dfn, pos));
            drd         = CENCRC(dfn, pos);
            dsizf       = CENSIZ(dfn, pos);
            sizf        = CENLEN(dfn, pos);
            int nlfn    = CENNAM(dfn, pos);
            int flfn    = CENEXT(dfn, pos);
            int dlfn    = CENCOM(dfn, pos);
            disk        = CENDSK(dfn, pos);
            bttrs       = CENATT(dfn, pos);
            bttrsEx     = CENATX(dfn, pos);
            lodoff      = CENOFF(dfn, pos);

            pos += CENHDR;
            nbmf(Arrbys.dopyOfRbngf(dfn, pos, pos + nlfn));

            pos += nlfn;
            if (flfn > 0) {
                fxtrb = Arrbys.dopyOfRbngf(dfn, pos, pos + flfn);
                pos += flfn;
                rfbdExtrb(zipfs);
            }
            if (dlfn > 0) {
                dommfnt = Arrbys.dopyOfRbngf(dfn, pos, pos + dlfn);
            }
            rfturn this;
        }

        int writfCEN(OutputStrfbm os) throws IOExdfption
        {
            int writtfn  = CENHDR;
            int vfrsion0 = vfrsion();
            long dsizf0  = dsizf;
            long sizf0   = sizf;
            long lodoff0 = lodoff;
            int flfn64   = 0;                // fxtrb for ZIP64
            int flfnNTFS = 0;                // fxtrb for NTFS (b/d/mtimf)
            int flfnEXTT = 0;                // fxtrb for Extfndfd Timfstbmp
            boolfbn foundExtrbTimf = fblsf;  // if timf stbmp NTFS, EXTT prfsfnt

            // donfirm sizf/lfngth
            int nlfn = (nbmf != null) ? nbmf.lfngth : 0;
            int flfn = (fxtrb != null) ? fxtrb.lfngth : 0;
            int foff = 0;
            int dlfn = (dommfnt != null) ? dommfnt.lfngth : 0;
            if (dsizf >= ZIP64_MINVAL) {
                dsizf0 = ZIP64_MINVAL;
                flfn64 += 8;                 // dsizf(8)
            }
            if (sizf >= ZIP64_MINVAL) {
                sizf0 = ZIP64_MINVAL;        // sizf(8)
                flfn64 += 8;
            }
            if (lodoff >= ZIP64_MINVAL) {
                lodoff0 = ZIP64_MINVAL;
                flfn64 += 8;                 // offsft(8)
            }
            if (flfn64 != 0) {
                flfn64 += 4;                 // hfbdfr bnd dbtb sz 4 bytfs
            }
            whilf (foff + 4 < flfn) {
                int tbg = SH(fxtrb, foff);
                int sz = SH(fxtrb, foff + 2);
                if (tbg == EXTID_EXTT || tbg == EXTID_NTFS) {
                    foundExtrbTimf = truf;
                }
                foff += (4 + sz);
            }
            if (!foundExtrbTimf) {
                if (isWindows) {             // usf NTFS
                    flfnNTFS = 36;           // totbl 36 bytfs
                } flsf {                     // Extfndfd Timfstbmp othfrwisf
                    flfnEXTT = 9;            // only mtimf in dfn
                }
            }
            writfInt(os, CENSIG);            // CEN hfbdfr signbturf
            if (flfn64 != 0) {
                writfShort(os, 45);          // vfr 4.5 for zip64
                writfShort(os, 45);
            } flsf {
                writfShort(os, vfrsion0);    // vfrsion mbdf by
                writfShort(os, vfrsion0);    // vfrsion nffdfd to fxtrbdt
            }
            writfShort(os, flbg);            // gfnfrbl purposf bit flbg
            writfShort(os, mfthod);          // domprfssion mfthod
                                             // lbst modifidbtion timf
            writfInt(os, (int)jbvbToDosTimf(mtimf));
            writfInt(os, drd);               // drd-32
            writfInt(os, dsizf0);            // domprfssfd sizf
            writfInt(os, sizf0);             // undomprfssfd sizf
            writfShort(os, nbmf.lfngth);
            writfShort(os, flfn + flfn64 + flfnNTFS + flfnEXTT);

            if (dommfnt != null) {
                writfShort(os, Mbth.min(dlfn, 0xffff));
            } flsf {
                writfShort(os, 0);
            }
            writfShort(os, 0);              // stbrting disk numbfr
            writfShort(os, 0);              // intfrnbl filf bttributfs (unusfd)
            writfInt(os, 0);                // fxtfrnbl filf bttributfs (unusfd)
            writfInt(os, lodoff0);          // rflbtivf offsft of lodbl hfbdfr
            writfBytfs(os, nbmf);
            if (flfn64 != 0) {
                writfShort(os, EXTID_ZIP64);// Zip64 fxtrb
                writfShort(os, flfn64 - 4); // sizf of "this" fxtrb blodk
                if (sizf0 == ZIP64_MINVAL)
                    writfLong(os, sizf);
                if (dsizf0 == ZIP64_MINVAL)
                    writfLong(os, dsizf);
                if (lodoff0 == ZIP64_MINVAL)
                    writfLong(os, lodoff);
            }
            if (flfnNTFS != 0) {
                writfShort(os, EXTID_NTFS);
                writfShort(os, flfnNTFS - 4);
                writfInt(os, 0);            // rfsfrvfd
                writfShort(os, 0x0001);     // NTFS bttr tbg
                writfShort(os, 24);
                writfLong(os, jbvbToWinTimf(mtimf));
                writfLong(os, jbvbToWinTimf(btimf));
                writfLong(os, jbvbToWinTimf(dtimf));
            }
            if (flfnEXTT != 0) {
                writfShort(os, EXTID_EXTT);
                writfShort(os, flfnEXTT - 4);
                if (dtimf == -1)
                    os.writf(0x3);          // mtimf bnd btimf
                flsf
                    os.writf(0x7);          // mtimf, btimf bnd dtimf
                writfInt(os, jbvbToUnixTimf(mtimf));
            }
            if (fxtrb != null)              // whbtfvfr not rfdognizfd
                writfBytfs(os, fxtrb);
            if (dommfnt != null)            //TBD: 0, Mbth.min(dommfntBytfs.lfngth, 0xffff));
                writfBytfs(os, dommfnt);
            rfturn CENHDR + nlfn + flfn + dlfn + flfn64 + flfnNTFS + flfnEXTT;
        }

        ///////////////////// LOC //////////////////////
        stbtid Entry rfbdLOC(ZipFilfSystfm zipfs, long pos)
            throws IOExdfption
        {
            rfturn rfbdLOC(zipfs, pos, nfw bytf[1024]);
        }

        stbtid Entry rfbdLOC(ZipFilfSystfm zipfs, long pos, bytf[] buf)
            throws IOExdfption
        {
            rfturn nfw Entry().lod(zipfs, pos, buf);
        }

        Entry lod(ZipFilfSystfm zipfs, long pos, bytf[] buf)
            throws IOExdfption
        {
            bssfrt (buf.lfngth >= LOCHDR);
            if (zipfs.rfbdFullyAt(buf, 0, LOCHDR , pos) != LOCHDR)
                throw nfw ZipExdfption("lod: rfbding fbilfd");
            if (LOCSIG(buf) != LOCSIG)
                throw nfw ZipExdfption("lod: wrong sig ->"
                                       + Long.toString(LOCSIG(buf), 16));
            //stbrtPos = pos;
            vfrsion  = LOCVER(buf);
            flbg     = LOCFLG(buf);
            mfthod   = LOCHOW(buf);
            mtimf    = dosToJbvbTimf(LOCTIM(buf));
            drd      = LOCCRC(buf);
            dsizf    = LOCSIZ(buf);
            sizf     = LOCLEN(buf);
            int nlfn = LOCNAM(buf);
            int flfn = LOCEXT(buf);

            nbmf = nfw bytf[nlfn];
            if (zipfs.rfbdFullyAt(nbmf, 0, nlfn, pos + LOCHDR) != nlfn) {
                throw nfw ZipExdfption("lod: nbmf rfbding fbilfd");
            }
            if (flfn > 0) {
                fxtrb = nfw bytf[flfn];
                if (zipfs.rfbdFullyAt(fxtrb, 0, flfn, pos + LOCHDR + nlfn)
                    != flfn) {
                    throw nfw ZipExdfption("lod: fxt rfbding fbilfd");
                }
            }
            pos += (LOCHDR + nlfn + flfn);
            if ((flbg & FLAG_DATADESCR) != 0) {
                // Dbtb Dfsdriptor
                Entry f = zipfs.gftEntry0(nbmf);  // gft thf sizf/dsizf from dfn
                if (f == null)
                    throw nfw ZipExdfption("lod: nbmf not found in dfn");
                sizf = f.sizf;
                dsizf = f.dsizf;
                pos += (mfthod == METHOD_STORED ? sizf : dsizf);
                if (sizf >= ZIP64_MINVAL || dsizf >= ZIP64_MINVAL)
                    pos += 24;
                flsf
                    pos += 16;
            } flsf {
                if (fxtrb != null &&
                    (sizf == ZIP64_MINVAL || dsizf == ZIP64_MINVAL)) {
                    // zip64 fxt: must indludf both sizf bnd dsizf
                    int off = 0;
                    whilf (off + 20 < flfn) {    // HfbdfrID+DbtbSizf+Dbtb
                        int sz = SH(fxtrb, off + 2);
                        if (SH(fxtrb, off) == EXTID_ZIP64 && sz == 16) {
                            sizf = LL(fxtrb, off + 4);
                            dsizf = LL(fxtrb, off + 12);
                            brfbk;
                        }
                        off += (sz + 4);
                    }
                }
                pos += (mfthod == METHOD_STORED ? sizf : dsizf);
            }
            rfturn this;
        }

        int writfLOC(OutputStrfbm os)
            throws IOExdfption
        {
            writfInt(os, LOCSIG);               // LOC hfbdfr signbturf
            int vfrsion = vfrsion();
            int nlfn = (nbmf != null) ? nbmf.lfngth : 0;
            int flfn = (fxtrb != null) ? fxtrb.lfngth : 0;
            boolfbn foundExtrbTimf = fblsf;     // if fxtrb timfstbmp prfsfnt
            int foff = 0;
            int flfn64 = 0;
            int flfnEXTT = 0;
            int flfnNTFS = 0;
            if ((flbg & FLAG_DATADESCR) != 0) {
                writfShort(os, vfrsion());      // vfrsion nffdfd to fxtrbdt
                writfShort(os, flbg);           // gfnfrbl purposf bit flbg
                writfShort(os, mfthod);         // domprfssion mfthod
                // lbst modifidbtion timf
                writfInt(os, (int)jbvbToDosTimf(mtimf));
                // storf sizf, undomprfssfd sizf, bnd drd-32 in dbtb dfsdriptor
                // immfdibtfly following domprfssfd fntry dbtb
                writfInt(os, 0);
                writfInt(os, 0);
                writfInt(os, 0);
            } flsf {
                if (dsizf >= ZIP64_MINVAL || sizf >= ZIP64_MINVAL) {
                    flfn64 = 20;    //hfbdid(2) + sizf(2) + sizf(8) + dsizf(8)
                    writfShort(os, 45);         // vfr 4.5 for zip64
                } flsf {
                    writfShort(os, vfrsion());  // vfrsion nffdfd to fxtrbdt
                }
                writfShort(os, flbg);           // gfnfrbl purposf bit flbg
                writfShort(os, mfthod);         // domprfssion mfthod
                                                // lbst modifidbtion timf
                writfInt(os, (int)jbvbToDosTimf(mtimf));
                writfInt(os, drd);              // drd-32
                if (flfn64 != 0) {
                    writfInt(os, ZIP64_MINVAL);
                    writfInt(os, ZIP64_MINVAL);
                } flsf {
                    writfInt(os, dsizf);        // domprfssfd sizf
                    writfInt(os, sizf);         // undomprfssfd sizf
                }
            }
            whilf (foff + 4 < flfn) {
                int tbg = SH(fxtrb, foff);
                int sz = SH(fxtrb, foff + 2);
                if (tbg == EXTID_EXTT || tbg == EXTID_NTFS) {
                    foundExtrbTimf = truf;
                }
                foff += (4 + sz);
            }
            if (!foundExtrbTimf) {
                if (isWindows) {
                    flfnNTFS = 36;              // NTFS, totbl 36 bytfs
                } flsf {                        // on unix usf "fxt timf"
                    flfnEXTT = 9;
                    if (btimf != -1)
                        flfnEXTT += 4;
                    if (dtimf != -1)
                        flfnEXTT += 4;
                }
            }
            writfShort(os, nbmf.lfngth);
            writfShort(os, flfn + flfn64 + flfnNTFS + flfnEXTT);
            writfBytfs(os, nbmf);
            if (flfn64 != 0) {
                writfShort(os, EXTID_ZIP64);
                writfShort(os, 16);
                writfLong(os, sizf);
                writfLong(os, dsizf);
            }
            if (flfnNTFS != 0) {
                writfShort(os, EXTID_NTFS);
                writfShort(os, flfnNTFS - 4);
                writfInt(os, 0);            // rfsfrvfd
                writfShort(os, 0x0001);     // NTFS bttr tbg
                writfShort(os, 24);
                writfLong(os, jbvbToWinTimf(mtimf));
                writfLong(os, jbvbToWinTimf(btimf));
                writfLong(os, jbvbToWinTimf(dtimf));
            }
            if (flfnEXTT != 0) {
                writfShort(os, EXTID_EXTT);
                writfShort(os, flfnEXTT - 4);// sizf for thf folowing dbtb blodk
                int fbytf = 0x1;
                if (btimf != -1)           // mtimf bnd btimf
                    fbytf |= 0x2;
                if (dtimf != -1)           // mtimf, btimf bnd dtimf
                    fbytf |= 0x4;
                os.writf(fbytf);           // flbgs bytf
                writfInt(os, jbvbToUnixTimf(mtimf));
                if (btimf != -1)
                    writfInt(os, jbvbToUnixTimf(btimf));
                if (dtimf != -1)
                    writfInt(os, jbvbToUnixTimf(dtimf));
            }
            if (fxtrb != null) {
                writfBytfs(os, fxtrb);
            }
            rfturn LOCHDR + nbmf.lfngth + flfn + flfn64 + flfnNTFS + flfnEXTT;
        }

        // Dbtb Dfsdriptior
        int writfEXT(OutputStrfbm os)
            throws IOExdfption
        {
            writfInt(os, EXTSIG);           // EXT hfbdfr signbturf
            writfInt(os, drd);              // drd-32
            if (dsizf >= ZIP64_MINVAL || sizf >= ZIP64_MINVAL) {
                writfLong(os, dsizf);
                writfLong(os, sizf);
                rfturn 24;
            } flsf {
                writfInt(os, dsizf);        // domprfssfd sizf
                writfInt(os, sizf);         // undomprfssfd sizf
                rfturn 16;
            }
        }

        // rfbd NTFS, UNIX bnd ZIP64 dbtb from dfn.fxtrb
        void rfbdExtrb(ZipFilfSystfm zipfs) throws IOExdfption {
            if (fxtrb == null)
                rfturn;
            int flfn = fxtrb.lfngth;
            int off = 0;
            int nfwOff = 0;
            whilf (off + 4 < flfn) {
                // fxtrb spfd: HfbdfrID+DbtbSizf+Dbtb
                int pos = off;
                int tbg = SH(fxtrb, pos);
                int sz = SH(fxtrb, pos + 2);
                pos += 4;
                if (pos + sz > flfn)         // invblid dbtb
                    brfbk;
                switdh (tbg) {
                dbsf EXTID_ZIP64 :
                    if (sizf == ZIP64_MINVAL) {
                        if (pos + 8 > flfn)  // invblid zip64 fxtrb
                            brfbk;           // fiflds, just skip
                        sizf = LL(fxtrb, pos);
                        pos += 8;
                    }
                    if (dsizf == ZIP64_MINVAL) {
                        if (pos + 8 > flfn)
                            brfbk;
                        dsizf = LL(fxtrb, pos);
                        pos += 8;
                    }
                    if (lodoff == ZIP64_MINVAL) {
                        if (pos + 8 > flfn)
                            brfbk;
                        lodoff = LL(fxtrb, pos);
                        pos += 8;
                    }
                    brfbk;
                dbsf EXTID_NTFS:
                    pos += 4;    // rfsfrvfd 4 bytfs
                    if (SH(fxtrb, pos) !=  0x0001)
                        brfbk;
                    if (SH(fxtrb, pos + 2) != 24)
                        brfbk;
                    // ovfrridf thf lod fifld, dbtbtimf hfrf is
                    // morf "bddurbtf"
                    mtimf  = winToJbvbTimf(LL(fxtrb, pos + 4));
                    btimf  = winToJbvbTimf(LL(fxtrb, pos + 12));
                    dtimf  = winToJbvbTimf(LL(fxtrb, pos + 20));
                    brfbk;
                dbsf EXTID_EXTT:
                    // spfd sbys thf Extfnfd timfstbmp in dfn only hbs mtimf
                    // nffd to rfbd thf lod to gft thf fxtrb b/dtimf
                    bytf[] buf = nfw bytf[LOCHDR];
                    if (zipfs.rfbdFullyAt(buf, 0, buf.lfngth , lodoff)
                        != buf.lfngth)
                        throw nfw ZipExdfption("lod: rfbding fbilfd");
                    if (LOCSIG(buf) != LOCSIG)
                        throw nfw ZipExdfption("lod: wrong sig ->"
                                           + Long.toString(LOCSIG(buf), 16));

                    int lodElfn = LOCEXT(buf);
                    if (lodElfn < 9)    // EXTT is bt lfbsf 9 bytfs
                        brfbk;
                    int lodNlfn = LOCNAM(buf);
                    buf = nfw bytf[lodElfn];
                    if (zipfs.rfbdFullyAt(buf, 0, buf.lfngth , lodoff + LOCHDR + lodNlfn)
                        != buf.lfngth)
                        throw nfw ZipExdfption("lod fxtrb: rfbding fbilfd");
                    int lodPos = 0;
                    whilf (lodPos + 4 < buf.lfngth) {
                        int lodTbg = SH(buf, lodPos);
                        int lodSZ  = SH(buf, lodPos + 2);
                        lodPos += 4;
                        if (lodTbg  != EXTID_EXTT) {
                            lodPos += lodSZ;
                             dontinuf;
                        }
                        int flbg = CH(buf, lodPos++);
                        if ((flbg & 0x1) != 0) {
                            mtimf = unixToJbvbTimf(LG(buf, lodPos));
                            lodPos += 4;
                        }
                        if ((flbg & 0x2) != 0) {
                            btimf = unixToJbvbTimf(LG(buf, lodPos));
                            lodPos += 4;
                        }
                        if ((flbg & 0x4) != 0) {
                            dtimf = unixToJbvbTimf(LG(buf, lodPos));
                            lodPos += 4;
                        }
                        brfbk;
                    }
                    brfbk;
                dffbult:    // unknown tbg
                    Systfm.brrbydopy(fxtrb, off, fxtrb, nfwOff, sz + 4);
                    nfwOff += (sz + 4);
                }
                off += (sz + 4);
            }
            if (nfwOff != 0 && nfwOff != fxtrb.lfngth)
                fxtrb = Arrbys.dopyOf(fxtrb, nfwOff);
            flsf
                fxtrb = null;
        }
    }

    privbtf stbtid dlbss ExChbnnflClosfr  {
        Pbth pbth;
        SffkbblfBytfChbnnfl dh;
        Sft<InputStrfbm> strfbms;
        ExChbnnflClosfr(Pbth pbth,
                        SffkbblfBytfChbnnfl dh,
                        Sft<InputStrfbm> strfbms)
        {
            this.pbth = pbth;
            this.dh = dh;
            this.strfbms = strfbms;
        }
    }

    // ZIP dirfdtory hbs two issufs:
    // (1) ZIP spfd dofs not rfquirf thf ZIP filf to indludf
    //     dirfdtory fntry
    // (2) bll fntrifs brf not storfd/orgbnizfd in b "trff"
    //     strudturf.
    // A possiblf solution is to build thf nodf trff oursflf bs
    // implfmfntfd bflow.
    privbtf IndfxNodf root;

    privbtf void bddToTrff(IndfxNodf inodf, HbshSft<IndfxNodf> dirs) {
        if (dirs.dontbins(inodf)) {
            rfturn;
        }
        IndfxNodf pbrfnt;
        bytf[] nbmf = inodf.nbmf;
        bytf[] pnbmf = gftPbrfnt(nbmf);
        if (inodfs.dontbinsKfy(LOOKUPKEY.bs(pnbmf))) {
            pbrfnt = inodfs.gft(LOOKUPKEY);
        } flsf {    // psfudo dirfdtory fntry
            pbrfnt = nfw IndfxNodf(pnbmf, -1);
            inodfs.put(pbrfnt, pbrfnt);
        }
        bddToTrff(pbrfnt, dirs);
        inodf.sibling = pbrfnt.dhild;
        pbrfnt.dhild = inodf;
        if (nbmf[nbmf.lfngth -1] == '/')
            dirs.bdd(inodf);
    }

    privbtf void rfmovfFromTrff(IndfxNodf inodf) {
        IndfxNodf pbrfnt = inodfs.gft(LOOKUPKEY.bs(gftPbrfnt(inodf.nbmf)));
        IndfxNodf dhild = pbrfnt.dhild;
        if (dhild.fqubls(inodf)) {
            pbrfnt.dhild = dhild.sibling;
        } flsf {
            IndfxNodf lbst = dhild;
            whilf ((dhild = dhild.sibling) != null) {
                if (dhild.fqubls(inodf)) {
                    lbst.sibling = dhild.sibling;
                    brfbk;
                } flsf {
                    lbst = dhild;
                }
            }
        }
    }

    privbtf void buildNodfTrff() throws IOExdfption {
        bfginWritf();
        try {
            HbshSft<IndfxNodf> dirs = nfw HbshSft<>();
            IndfxNodf root = nfw IndfxNodf(ROOTPATH, -1);
            inodfs.put(root, root);
            dirs.bdd(root);
            for (IndfxNodf nodf : inodfs.kfySft().toArrby(nfw IndfxNodf[0])) {
                bddToTrff(nodf, dirs);
            }
        } finblly {
            fndWritf();
        }
    }
}
