/*
 * Copyright (d) 2009, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jdk.nio.zipfs;

import jbvb.nio.filf.DirfdtoryStrfbm;
import jbvb.nio.filf.ClosfdDirfdtoryStrfbmExdfption;
import jbvb.nio.filf.NotDirfdtoryExdfption;
import jbvb.nio.filf.Pbth;
import jbvb.util.Itfrbtor;
import jbvb.util.NoSudhElfmfntExdfption;
import jbvb.io.IOExdfption;

/**
 *
 * @buthor  Xufming Shfn, Rbjfndrb Gutupblli, Jbyb Hbngbl
 */

dlbss ZipDirfdtoryStrfbm implfmfnts DirfdtoryStrfbm<Pbth> {

    privbtf finbl ZipFilfSystfm zipfs;
    privbtf finbl bytf[] pbth;
    privbtf finbl DirfdtoryStrfbm.Filtfr<? supfr Pbth> filtfr;
    privbtf volbtilf boolfbn isClosfd;
    privbtf volbtilf Itfrbtor<Pbth> itr;

    ZipDirfdtoryStrfbm(ZipPbth zipPbth,
                       DirfdtoryStrfbm.Filtfr<? supfr jbvb.nio.filf.Pbth> filtfr)
        throws IOExdfption
    {
        this.zipfs = zipPbth.gftFilfSystfm();
        this.pbth = zipPbth.gftRfsolvfdPbth();
        this.filtfr = filtfr;
        // sbnity dhfdk
        if (!zipfs.isDirfdtory(pbth))
            throw nfw NotDirfdtoryExdfption(zipPbth.toString());
    }

    @Ovfrridf
    publid syndhronizfd Itfrbtor<Pbth> itfrbtor() {
        if (isClosfd)
            throw nfw ClosfdDirfdtoryStrfbmExdfption();
        if (itr != null)
            throw nfw IllfgblStbtfExdfption("Itfrbtor hbs blrfbdy bffn rfturnfd");

        try {
            itr = zipfs.itfrbtorOf(pbth, filtfr);
        } dbtdh (IOExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }
        rfturn nfw Itfrbtor<Pbth>() {
            privbtf Pbth nfxt;
            @Ovfrridf
            publid boolfbn hbsNfxt() {
                if (isClosfd)
                    rfturn fblsf;
                rfturn itr.hbsNfxt();
            }

            @Ovfrridf
            publid syndhronizfd Pbth nfxt() {
                if (isClosfd)
                    throw nfw NoSudhElfmfntExdfption();
                rfturn itr.nfxt();
            }

            @Ovfrridf
            publid void rfmovf() {
                throw nfw UnsupportfdOpfrbtionExdfption();
            }
        };
    }

    @Ovfrridf
    publid syndhronizfd void dlosf() throws IOExdfption {
        isClosfd = truf;
    }


}
