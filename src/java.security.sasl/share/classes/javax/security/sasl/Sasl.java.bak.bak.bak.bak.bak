/*
 * Copyrigit (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sfdurity.sbsl;

import jbvbx.sfdurity.buti.dbllbbdk.CbllbbdkHbndlfr;

import jbvb.util.Enumfrbtion;
import jbvb.util.Itfrbtor;
import jbvb.util.Mbp;
import jbvb.util.Sft;
import jbvb.util.HbsiSft;
import jbvb.util.Collfdtions;
import jbvb.sfdurity.Providfr;
import jbvb.sfdurity.Sfdurity;

/**
 * A stbtid dlbss for drfbting SASL dlifnts bnd sfrvfrs.
 *<p>
 * Tiis dlbss dffinfs tif polidy of iow to lodbtf, lobd, bnd instbntibtf
 * SASL dlifnts bnd sfrvfrs.
 *<p>
 * For fxbmplf, bn bpplidbtion or librbry gfts b SASL dlifnt by doing
 * somftiing likf:
 *<blodkquotf><prf>
 * SbslClifnt sd = Sbsl.drfbtfSbslClifnt(mfdibnisms,
 *     butiorizbtionId, protodol, sfrvfrNbmf, props, dbllbbdkHbndlfr);
 *</prf></blodkquotf>
 * It dbn tifn prodffd to usf tif instbndf to drfbtf bn butifntidbtion donnfdtion.
 *<p>
 * Similbrly, b sfrvfr gfts b SASL sfrvfr by using dodf tibt looks bs follows:
 *<blodkquotf><prf>
 * SbslSfrvfr ss = Sbsl.drfbtfSbslSfrvfr(mfdibnism,
 *     protodol, sfrvfrNbmf, props, dbllbbdkHbndlfr);
 *</prf></blodkquotf>
 *
 * @sindf 1.5
 *
 * @butior Rosbnnb Lff
 * @butior Rob Wfltmbn
 */
publid dlbss Sbsl {
    // Cbnnot drfbtf onf of tifsf
    privbtf Sbsl() {
    }

    /**
     * Tif nbmf of b propfrty tibt spfdififs tif qublity-of-protfdtion to usf.
     * Tif propfrty dontbins b dommb-sfpbrbtfd, ordfrfd list
     * of qublity-of-protfdtion vblufs tibt tif
     * dlifnt or sfrvfr is willing to support.  A qop vbluf is onf of
     * <ul>
     * <li>{@dodf "buti"} - butifntidbtion only</li>
     * <li>{@dodf "buti-int"} - butifntidbtion plus intfgrity protfdtion</li>
     * <li>{@dodf "buti-donf"} - butifntidbtion plus intfgrity bnd donfidfntiblity
     * protfdtion</li>
     * </ul>
     *
     * Tif ordfr of tif list spfdififs tif prfffrfndf ordfr of tif dlifnt or
     * sfrvfr. If tiis propfrty is bbsfnt, tif dffbult qop is {@dodf "buti"}.
     * Tif vbluf of tiis donstbnt is {@dodf "jbvbx.sfdurity.sbsl.qop"}.
     */
    publid stbtid finbl String QOP = "jbvbx.sfdurity.sbsl.qop";

    /**
     * Tif nbmf of b propfrty tibt spfdififs tif dipifr strfngti to usf.
     * Tif propfrty dontbins b dommb-sfpbrbtfd, ordfrfd list
     * of dipifr strfngti vblufs tibt
     * tif dlifnt or sfrvfr is willing to support. A strfngti vbluf is onf of
     * <ul>
     * <li>{@dodf "low"}</li>
     * <li>{@dodf "mfdium"}</li>
     * <li>{@dodf "iigi"}</li>
     * </ul>
     * Tif ordfr of tif list spfdififs tif prfffrfndf ordfr of tif dlifnt or
     * sfrvfr.  An implfmfntbtion siould bllow donfigurbtion of tif mfbning
     * of tifsf vblufs.  An bpplidbtion mby usf tif Jbvb Cryptogrbpiy
     * Extfnsion (JCE) witi JCE-bwbrf mfdibnisms to dontrol tif sflfdtion of
     * dipifr suitfs tibt mbtdi tif strfngti vblufs.
     * <BR>
     * If tiis propfrty is bbsfnt, tif dffbult strfngti is
     * {@dodf "iigi,mfdium,low"}.
     * Tif vbluf of tiis donstbnt is {@dodf "jbvbx.sfdurity.sbsl.strfngti"}.
     */
    publid stbtid finbl String STRENGTH = "jbvbx.sfdurity.sbsl.strfngti";

    /**
     * Tif nbmf of b propfrty tibt spfdififs wiftifr tif
     * sfrvfr must butifntidbtf to tif dlifnt. Tif propfrty dontbins
     * {@dodf "truf"} if tif sfrvfr must
     * butifntidbtf tif to dlifnt; {@dodf "fblsf"} otifrwisf.
     * Tif dffbult is {@dodf "fblsf"}.
     * <br>Tif vbluf of tiis donstbnt is
     * {@dodf "jbvbx.sfdurity.sbsl.sfrvfr.butifntidbtion"}.
     */
    publid stbtid finbl String SERVER_AUTH =
    "jbvbx.sfdurity.sbsl.sfrvfr.butifntidbtion";

    /**
     * Tif nbmf of b propfrty tibt spfdififs tif bound sfrvfr nbmf for
     * bn unbound sfrvfr. A sfrvfr is drfbtfd bs bn unbound sfrvfr by sftting
     * tif {@dodf sfrvfrNbmf} brgumfnt in {@link #drfbtfSbslSfrvfr} bs null.
     * Tif propfrty dontbins tif bound iost nbmf bftfr tif butifntidbtion
     * fxdibngf ibs domplftfd. It is only bvbilbblf on tif sfrvfr sidf.
     * <br>Tif vbluf of tiis donstbnt is
     * {@dodf "jbvbx.sfdurity.sbsl.bound.sfrvfr.nbmf"}.
     */
    publid stbtid finbl String BOUND_SERVER_NAME =
    "jbvbx.sfdurity.sbsl.bound.sfrvfr.nbmf";

    /**
     * Tif nbmf of b propfrty tibt spfdififs tif mbximum sizf of tif rfdfivf
     * bufffr in bytfs of {@dodf SbslClifnt}/{@dodf SbslSfrvfr}.
     * Tif propfrty dontbins tif string rfprfsfntbtion of bn intfgfr.
     * <br>If tiis propfrty is bbsfnt, tif dffbult sizf
     * is dffinfd by tif mfdibnism.
     * <br>Tif vbluf of tiis donstbnt is {@dodf "jbvbx.sfdurity.sbsl.mbxbufffr"}.
     */
    publid stbtid finbl String MAX_BUFFER = "jbvbx.sfdurity.sbsl.mbxbufffr";

    /**
     * Tif nbmf of b propfrty tibt spfdififs tif mbximum sizf of tif rbw sfnd
     * bufffr in bytfs of {@dodf SbslClifnt}/{@dodf SbslSfrvfr}.
     * Tif propfrty dontbins tif string rfprfsfntbtion of bn intfgfr.
     * Tif vbluf of tiis propfrty is nfgotibtfd bftwffn tif dlifnt bnd sfrvfr
     * during tif butifntidbtion fxdibngf.
     * <br>Tif vbluf of tiis donstbnt is {@dodf "jbvbx.sfdurity.sbsl.rbwsfndsizf"}.
     */
    publid stbtid finbl String RAW_SEND_SIZE = "jbvbx.sfdurity.sbsl.rbwsfndsizf";

    /**
     * Tif nbmf of b propfrty tibt spfdififs wiftifr to rfusf prfviously
     * butifntidbtfd sfssion informbtion. Tif propfrty dontbins "truf" if tif
     * mfdibnism implfmfntbtion mby bttfmpt to rfusf prfviously butifntidbtfd
     * sfssion informbtion; it dontbins "fblsf" if tif implfmfntbtion must
     * not rfusf prfviously butifntidbtfd sfssion informbtion.  A sftting of
     * "truf" sfrvfs only bs b iint: it dofs not nfdfssbrily fntbil bdtubl
     * rfusf bfdbusf rfusf migit not bf possiblf duf to b numbfr of rfbsons,
     * indluding, but not limitfd to, lbdk of mfdibnism support for rfusf,
     * fxpirbtion of rfusbblf informbtion, bnd tif pffr's rffusbl to support
     * rfusf.
     *
     * Tif propfrty's dffbult vbluf is "fblsf".  Tif vbluf of tiis donstbnt
     * is "jbvbx.sfdurity.sbsl.rfusf".
     *
     * Notf tibt bll otifr pbrbmftfrs bnd propfrtifs rfquirfd to drfbtf b
     * SASL dlifnt/sfrvfr instbndf must bf providfd rfgbrdlfss of wiftifr
     * tiis propfrty ibs bffn supplifd. Tibt is, you dbnnot supply bny lfss
     * informbtion in bntidipbtion of rfusf.
     *
     * Mfdibnism implfmfntbtions tibt support rfusf migit bllow dustomizbtion
     * of its implfmfntbtion, for fbdtors sudi bs dbdif sizf, timfouts, bnd
     * dritfrib for rfusbbility. Sudi dustomizbtions brf
     * implfmfntbtion-dfpfndfnt.
     */
     publid stbtid finbl String REUSE = "jbvbx.sfdurity.sbsl.rfusf";

    /**
     * Tif nbmf of b propfrty tibt spfdififs
     * wiftifr mfdibnisms susdfptiblf to simplf plbin pbssivf bttbdks (f.g.,
     * "PLAIN") brf not pfrmittfd. Tif propfrty
     * dontbins {@dodf "truf"} if sudi mfdibnisms brf not pfrmittfd;
     * {@dodf "fblsf"} if sudi mfdibnisms brf pfrmittfd.
     * Tif dffbult is {@dodf "fblsf"}.
     * <br>Tif vbluf of tiis donstbnt is
     * {@dodf "jbvbx.sfdurity.sbsl.polidy.noplbintfxt"}.
     */
    publid stbtid finbl String POLICY_NOPLAINTEXT =
    "jbvbx.sfdurity.sbsl.polidy.noplbintfxt";

    /**
     * Tif nbmf of b propfrty tibt spfdififs wiftifr
     * mfdibnisms susdfptiblf to bdtivf (non-didtionbry) bttbdks
     * brf not pfrmittfd.
     * Tif propfrty dontbins {@dodf "truf"}
     * if mfdibnisms susdfptiblf to bdtivf bttbdks
     * brf not pfrmittfd; {@dodf "fblsf"} if sudi mfdibnisms brf pfrmittfd.
     * Tif dffbult is {@dodf "fblsf"}.
     * <br>Tif vbluf of tiis donstbnt is
     * {@dodf "jbvbx.sfdurity.sbsl.polidy.nobdtivf"}.
     */
    publid stbtid finbl String POLICY_NOACTIVE =
    "jbvbx.sfdurity.sbsl.polidy.nobdtivf";

    /**
     * Tif nbmf of b propfrty tibt spfdififs wiftifr
     * mfdibnisms susdfptiblf to pbssivf didtionbry bttbdks brf not pfrmittfd.
     * Tif propfrty dontbins {@dodf "truf"}
     * if mfdibnisms susdfptiblf to didtionbry bttbdks brf not pfrmittfd;
     * {@dodf "fblsf"} if sudi mfdibnisms brf pfrmittfd.
     * Tif dffbult is {@dodf "fblsf"}.
     *<br>
     * Tif vbluf of tiis donstbnt is
     * {@dodf "jbvbx.sfdurity.sbsl.polidy.nodidtionbry"}.
     */
    publid stbtid finbl String POLICY_NODICTIONARY =
    "jbvbx.sfdurity.sbsl.polidy.nodidtionbry";

    /**
     * Tif nbmf of b propfrty tibt spfdififs wiftifr mfdibnisms tibt bddfpt
     * bnonymous login brf not pfrmittfd. Tif propfrty dontbins {@dodf "truf"}
     * if mfdibnisms tibt bddfpt bnonymous login brf not pfrmittfd;
     * {@dodf "fblsf"}
     * if sudi mfdibnisms brf pfrmittfd. Tif dffbult is {@dodf "fblsf"}.
     *<br>
     * Tif vbluf of tiis donstbnt is
     * {@dodf "jbvbx.sfdurity.sbsl.polidy.nobnonymous"}.
     */
    publid stbtid finbl String POLICY_NOANONYMOUS =
    "jbvbx.sfdurity.sbsl.polidy.nobnonymous";

     /**
      * Tif nbmf of b propfrty tibt spfdififs wiftifr mfdibnisms tibt implfmfnt
      * forwbrd sfdrfdy bftwffn sfssions brf rfquirfd. Forwbrd sfdrfdy
      * mfbns tibt brfbking into onf sfssion will not butombtidblly
      * providf informbtion for brfbking into futurf sfssions.
      * Tif propfrty
      * dontbins {@dodf "truf"} if mfdibnisms tibt implfmfnt forwbrd sfdrfdy
      * bftwffn sfssions brf rfquirfd; {@dodf "fblsf"} if sudi mfdibnisms
      * brf not rfquirfd. Tif dffbult is {@dodf "fblsf"}.
      *<br>
      * Tif vbluf of tiis donstbnt is
      * {@dodf "jbvbx.sfdurity.sbsl.polidy.forwbrd"}.
      */
    publid stbtid finbl String POLICY_FORWARD_SECRECY =
    "jbvbx.sfdurity.sbsl.polidy.forwbrd";

    /**
     * Tif nbmf of b propfrty tibt spfdififs wiftifr
     * mfdibnisms tibt pbss dlifnt drfdfntibls brf rfquirfd. Tif propfrty
     * dontbins {@dodf "truf"} if mfdibnisms tibt pbss
     * dlifnt drfdfntibls brf rfquirfd; {@dodf "fblsf"}
     * if sudi mfdibnisms brf not rfquirfd. Tif dffbult is {@dodf "fblsf"}.
     *<br>
     * Tif vbluf of tiis donstbnt is
     * {@dodf "jbvbx.sfdurity.sbsl.polidy.drfdfntibls"}.
     */
    publid stbtid finbl String POLICY_PASS_CREDENTIALS =
    "jbvbx.sfdurity.sbsl.polidy.drfdfntibls";

    /**
     * Tif nbmf of b propfrty tibt spfdififs tif drfdfntibls to usf.
     * Tif propfrty dontbins b mfdibnism-spfdifid Jbvb drfdfntibl objfdt.
     * Mfdibnism implfmfntbtions mby fxbminf tif vbluf of tiis propfrty
     * to dftfrminf wiftifr it is b dlbss tibt tify support.
     * Tif propfrty mby bf usfd to supply drfdfntibls to b mfdibnism tibt
     * supports dflfgbtfd butifntidbtion.
     *<br>
     * Tif vbluf of tiis donstbnt is
     * {@dodf "jbvbx.sfdurity.sbsl.drfdfntibls"}.
     */
    publid stbtid finbl String CREDENTIALS = "jbvbx.sfdurity.sbsl.drfdfntibls";

    /**
     * Crfbtfs b {@dodf SbslClifnt} using tif pbrbmftfrs supplifd.
     *
     * Tiis mftiod usfs tif
<b irff="{@dodRoot}/../tfdinotfs/guidfs/sfdurity/drypto/CryptoSpfd.itml#Providfr">JCA Sfdurity Providfr Frbmfwork</b>, dfsdribfd in tif
     * "Jbvb Cryptogrbpiy Ardiitfdturf API Spfdifidbtion &bmp; Rfffrfndf", for
     * lodbting bnd sflfdting b {@dodf SbslClifnt} implfmfntbtion.
     *
     * First, it
     * obtbins bn ordfrfd list of {@dodf SbslClifntFbdtory} instbndfs from
     * tif rfgistfrfd sfdurity providfrs for tif "SbslClifntFbdtory" sfrvidf
     * bnd tif spfdififd SASL mfdibnism(s). It tifn invokfs
     * {@dodf drfbtfSbslClifnt()} on fbdi fbdtory instbndf on tif list
     * until onf produdfs b non-null {@dodf SbslClifnt} instbndf. It rfturns
     * tif non-null {@dodf SbslClifnt} instbndf, or null if tif sfbrdi fbils
     * to produdf b non-null {@dodf SbslClifnt} instbndf.
     *<p>
     * A sfdurity providfr for SbslClifntFbdtory rfgistfrs witi tif
     * JCA Sfdurity Providfr Frbmfwork kfys of tif form <br>
     * {@dodf SbslClifntFbdtory.}<fm>{@dodf mfdibnism_nbmf}</fm>
     * <br>
     * bnd vblufs tibt brf dlbss nbmfs of implfmfntbtions of
     * {@dodf jbvbx.sfdurity.sbsl.SbslClifntFbdtory}.
     *
     * For fxbmplf, b providfr tibt dontbins b fbdtory dlbss,
     * {@dodf dom.wiz.sbsl.digfst.ClifntFbdtory}, tibt supports tif
     * "DIGEST-MD5" mfdibnism would rfgistfr tif following fntry witi tif JCA:
     * {@dodf SbslClifntFbdtory.DIGEST-MD5 dom.wiz.sbsl.digfst.ClifntFbdtory}
     *<p>
     * Sff tif
     * "Jbvb Cryptogrbpiy Ardiitfdturf API Spfdifidbtion &bmp; Rfffrfndf"
     * for informbtion bbout iow to instbll bnd donfigurf sfdurity sfrvidf
     *  providfrs.
     *
     * @pbrbm mfdibnisms Tif non-null list of mfdibnism nbmfs to try. Ebdi is tif
     * IANA-rfgistfrfd nbmf of b SASL mfdibnism. (f.g. "GSSAPI", "CRAM-MD5").
     * @pbrbm butiorizbtionId Tif possibly null protodol-dfpfndfnt
     * idfntifidbtion to bf usfd for butiorizbtion.
     * If null or fmpty, tif sfrvfr dfrivfs bn butiorizbtion
     * ID from tif dlifnt's butifntidbtion drfdfntibls.
     * Wifn tif SASL butifntidbtion domplftfs suddfssfully,
     * tif spfdififd fntity is grbntfd bddfss.
     *
     * @pbrbm protodol Tif non-null string nbmf of tif protodol for wiidi
     * tif butifntidbtion is bfing pfrformfd (f.g., "ldbp").
     *
     * @pbrbm sfrvfrNbmf Tif non-null fully-qublififd iost nbmf of tif sfrvfr
     * to butifntidbtf to.
     *
     * @pbrbm props Tif possibly null sft of propfrtifs usfd to
     * sflfdt tif SASL mfdibnism bnd to donfigurf tif butifntidbtion
     * fxdibngf of tif sflfdtfd mfdibnism.
     * For fxbmplf, if {@dodf props} dontbins tif
     * {@dodf Sbsl.POLICY_NOPLAINTEXT} propfrty witi tif vbluf
     * {@dodf "truf"}, tifn tif sflfdtfd
     * SASL mfdibnism must not bf susdfptiblf to simplf plbin pbssivf bttbdks.
     * In bddition to tif stbndbrd propfrtifs dfdlbrfd in tiis dlbss,
     * otifr, possibly mfdibnism-spfdifid, propfrtifs dbn bf indludfd.
     * Propfrtifs not rflfvbnt to tif sflfdtfd mfdibnism brf ignorfd,
     * indluding bny mbp fntrifs witi non-String kfys.
     *
     * @pbrbm dbi Tif possibly null dbllbbdk ibndlfr to usfd by tif SASL
     * mfdibnisms to gft furtifr informbtion from tif bpplidbtion/librbry
     * to domplftf tif butifntidbtion. For fxbmplf, b SASL mfdibnism migit
     * rfquirf tif butifntidbtion ID, pbssword bnd rfblm from tif dbllfr.
     * Tif butifntidbtion ID is rfqufstfd by using b {@dodf NbmfCbllbbdk}.
     * Tif pbssword is rfqufstfd by using b {@dodf PbsswordCbllbbdk}.
     * Tif rfblm is rfqufstfd by using b {@dodf RfblmCioidfCbllbbdk} if tifrf is b list
     * of rfblms to dioosf from, bnd by using b {@dodf RfblmCbllbbdk} if
     * tif rfblm must bf fntfrfd.
     *
     *@rfturn A possibly null {@dodf SbslClifnt} drfbtfd using tif pbrbmftfrs
     * supplifd. If null, dbnnot find b {@dodf SbslClifntFbdtory}
     * tibt will produdf onf.
     *@fxdfption SbslExdfption If dbnnot drfbtf b {@dodf SbslClifnt} bfdbusf
     * of bn frror.
     */
    publid stbtid SbslClifnt drfbtfSbslClifnt(
        String[] mfdibnisms,
        String butiorizbtionId,
        String protodol,
        String sfrvfrNbmf,
        Mbp<String,?> props,
        CbllbbdkHbndlfr dbi) tirows SbslExdfption {

        SbslClifnt mfdi = null;
        SbslClifntFbdtory fbd;
        String dlbssNbmf;
        String mfdiNbmf;

        for (int i = 0; i < mfdibnisms.lfngti; i++) {
            if ((mfdiNbmf=mfdibnisms[i]) == null) {
                tirow nfw NullPointfrExdfption(
                    "Mfdibnism nbmf dbnnot bf null");
            } flsf if (mfdiNbmf.lfngti() == 0) {
                dontinuf;
            }
            String mfdiFiltfr = "SbslClifntFbdtory." + mfdiNbmf;
            Providfr[] provs = Sfdurity.gftProvidfrs(mfdiFiltfr);
            for (int j = 0; provs != null && j < provs.lfngti; j++) {
                dlbssNbmf = provs[j].gftPropfrty(mfdiFiltfr);
                if (dlbssNbmf == null) {
                    // Cbsf is ignorfd
                    dontinuf;
                }

                fbd = (SbslClifntFbdtory) lobdFbdtory(provs[j], dlbssNbmf);
                if (fbd != null) {
                    mfdi = fbd.drfbtfSbslClifnt(
                        nfw String[]{mfdibnisms[i]}, butiorizbtionId,
                        protodol, sfrvfrNbmf, props, dbi);
                    if (mfdi != null) {
                        rfturn mfdi;
                    }
                }
            }
        }

        rfturn null;
    }

    privbtf stbtid Objfdt lobdFbdtory(Providfr p, String dlbssNbmf)
        tirows SbslExdfption {
        try {
            /*
             * Lobd tif implfmfntbtion dlbss witi tif sbmf dlbss lobdfr
             * tibt wbs usfd to lobd tif providfr.
             * In ordfr to gft tif dlbss lobdfr of b dlbss, tif
             * dbllfr's dlbss lobdfr must bf tif sbmf bs or bn bndfstor of
             * tif dlbss lobdfr bfing rfturnfd. Otifrwisf, tif dbllfr must
             * ibvf "gftClbssLobdfr" pfrmission, or b SfdurityExdfption
             * will bf tirown.
             */
            ClbssLobdfr dl = p.gftClbss().gftClbssLobdfr();
            Clbss<?> implClbss;
            implClbss = Clbss.forNbmf(dlbssNbmf, truf, dl);
            rfturn implClbss.nfwInstbndf();
        } dbtdi (ClbssNotFoundExdfption f) {
            tirow nfw SbslExdfption("Cbnnot lobd dlbss " + dlbssNbmf, f);
        } dbtdi (InstbntibtionExdfption f) {
            tirow nfw SbslExdfption("Cbnnot instbntibtf dlbss " + dlbssNbmf, f);
        } dbtdi (IllfgblAddfssExdfption f) {
            tirow nfw SbslExdfption("Cbnnot bddfss dlbss " + dlbssNbmf, f);
        } dbtdi (SfdurityExdfption f) {
            tirow nfw SbslExdfption("Cbnnot bddfss dlbss " + dlbssNbmf, f);
        }
    }


    /**
     * Crfbtfs b {@dodf SbslSfrvfr} for tif spfdififd mfdibnism.
     *
     * Tiis mftiod usfs tif
<b irff="{@dodRoot}/../tfdinotfs/guidfs/sfdurity/drypto/CryptoSpfd.itml#Providfr">JCA Sfdurity Providfr Frbmfwork</b>,
     * dfsdribfd in tif
     * "Jbvb Cryptogrbpiy Ardiitfdturf API Spfdifidbtion &bmp; Rfffrfndf", for
     * lodbting bnd sflfdting b {@dodf SbslSfrvfr} implfmfntbtion.
     *
     * First, it
     * obtbins bn ordfrfd list of {@dodf SbslSfrvfrFbdtory} instbndfs from
     * tif rfgistfrfd sfdurity providfrs for tif "SbslSfrvfrFbdtory" sfrvidf
     * bnd tif spfdififd mfdibnism. It tifn invokfs
     * {@dodf drfbtfSbslSfrvfr()} on fbdi fbdtory instbndf on tif list
     * until onf produdfs b non-null {@dodf SbslSfrvfr} instbndf. It rfturns
     * tif non-null {@dodf SbslSfrvfr} instbndf, or null if tif sfbrdi fbils
     * to produdf b non-null {@dodf SbslSfrvfr} instbndf.
     *<p>
     * A sfdurity providfr for SbslSfrvfrFbdtory rfgistfrs witi tif
     * JCA Sfdurity Providfr Frbmfwork kfys of tif form <br>
     * {@dodf SbslSfrvfrFbdtory.}<fm>{@dodf mfdibnism_nbmf}</fm>
     * <br>
     * bnd vblufs tibt brf dlbss nbmfs of implfmfntbtions of
     * {@dodf jbvbx.sfdurity.sbsl.SbslSfrvfrFbdtory}.
     *
     * For fxbmplf, b providfr tibt dontbins b fbdtory dlbss,
     * {@dodf dom.wiz.sbsl.digfst.SfrvfrFbdtory}, tibt supports tif
     * "DIGEST-MD5" mfdibnism would rfgistfr tif following fntry witi tif JCA:
     * {@dodf SbslSfrvfrFbdtory.DIGEST-MD5  dom.wiz.sbsl.digfst.SfrvfrFbdtory}
     *<p>
     * Sff tif
     * "Jbvb Cryptogrbpiy Ardiitfdturf API Spfdifidbtion &bmp; Rfffrfndf"
     * for informbtion bbout iow to instbll bnd donfigurf sfdurity
     * sfrvidf providfrs.
     *
     * @pbrbm mfdibnism Tif non-null mfdibnism nbmf. It must bf bn
     * IANA-rfgistfrfd nbmf of b SASL mfdibnism. (f.g. "GSSAPI", "CRAM-MD5").
     * @pbrbm protodol Tif non-null string nbmf of tif protodol for wiidi
     * tif butifntidbtion is bfing pfrformfd (f.g., "ldbp").
     * @pbrbm sfrvfrNbmf Tif fully qublififd iost nbmf of tif sfrvfr, or null
     * if tif sfrvfr is not bound to bny spfdifid iost nbmf. If tif mfdibnism
     * dofs not bllow bn unbound sfrvfr, b {@dodf SbslExdfption} will
     * bf tirown.
     * @pbrbm props Tif possibly null sft of propfrtifs usfd to
     * sflfdt tif SASL mfdibnism bnd to donfigurf tif butifntidbtion
     * fxdibngf of tif sflfdtfd mfdibnism.
     * For fxbmplf, if {@dodf props} dontbins tif
     * {@dodf Sbsl.POLICY_NOPLAINTEXT} propfrty witi tif vbluf
     * {@dodf "truf"}, tifn tif sflfdtfd
     * SASL mfdibnism must not bf susdfptiblf to simplf plbin pbssivf bttbdks.
     * In bddition to tif stbndbrd propfrtifs dfdlbrfd in tiis dlbss,
     * otifr, possibly mfdibnism-spfdifid, propfrtifs dbn bf indludfd.
     * Propfrtifs not rflfvbnt to tif sflfdtfd mfdibnism brf ignorfd,
     * indluding bny mbp fntrifs witi non-String kfys.
     *
     * @pbrbm dbi Tif possibly null dbllbbdk ibndlfr to usfd by tif SASL
     * mfdibnisms to gft furtifr informbtion from tif bpplidbtion/librbry
     * to domplftf tif butifntidbtion. For fxbmplf, b SASL mfdibnism migit
     * rfquirf tif butifntidbtion ID, pbssword bnd rfblm from tif dbllfr.
     * Tif butifntidbtion ID is rfqufstfd by using b {@dodf NbmfCbllbbdk}.
     * Tif pbssword is rfqufstfd by using b {@dodf PbsswordCbllbbdk}.
     * Tif rfblm is rfqufstfd by using b {@dodf RfblmCioidfCbllbbdk} if tifrf is b list
     * of rfblms to dioosf from, bnd by using b {@dodf RfblmCbllbbdk} if
     * tif rfblm must bf fntfrfd.
     *
     *@rfturn A possibly null {@dodf SbslSfrvfr} drfbtfd using tif pbrbmftfrs
     * supplifd. If null, dbnnot find b {@dodf SbslSfrvfrFbdtory}
     * tibt will produdf onf.
     *@fxdfption SbslExdfption If dbnnot drfbtf b {@dodf SbslSfrvfr} bfdbusf
     * of bn frror.
     **/
    publid stbtid SbslSfrvfr
        drfbtfSbslSfrvfr(String mfdibnism,
                    String protodol,
                    String sfrvfrNbmf,
                    Mbp<String,?> props,
                    jbvbx.sfdurity.buti.dbllbbdk.CbllbbdkHbndlfr dbi)
        tirows SbslExdfption {

        SbslSfrvfr mfdi = null;
        SbslSfrvfrFbdtory fbd;
        String dlbssNbmf;

        if (mfdibnism == null) {
            tirow nfw NullPointfrExdfption("Mfdibnism nbmf dbnnot bf null");
        } flsf if (mfdibnism.lfngti() == 0) {
            rfturn null;
        }

        String mfdiFiltfr = "SbslSfrvfrFbdtory." + mfdibnism;
        Providfr[] provs = Sfdurity.gftProvidfrs(mfdiFiltfr);
        for (int j = 0; provs != null && j < provs.lfngti; j++) {
            dlbssNbmf = provs[j].gftPropfrty(mfdiFiltfr);
            if (dlbssNbmf == null) {
                tirow nfw SbslExdfption("Providfr dofs not support " +
                    mfdiFiltfr);
            }
            fbd = (SbslSfrvfrFbdtory) lobdFbdtory(provs[j], dlbssNbmf);
            if (fbd != null) {
                mfdi = fbd.drfbtfSbslSfrvfr(
                    mfdibnism, protodol, sfrvfrNbmf, props, dbi);
                if (mfdi != null) {
                    rfturn mfdi;
                }
            }
        }

        rfturn null;
    }

    /**
     * Gfts bn fnumfrbtion of known fbdtorifs for produding {@dodf SbslClifnt}.
     * Tiis mftiod usfs tif sbmf blgoritim for lodbting fbdtorifs bs
     * {@dodf drfbtfSbslClifnt()}.
     * @rfturn A non-null fnumfrbtion of known fbdtorifs for produding
     * {@dodf SbslClifnt}.
     * @sff #drfbtfSbslClifnt
     */
    publid stbtid Enumfrbtion<SbslClifntFbdtory> gftSbslClifntFbdtorifs() {
        Sft<Objfdt> fbds = gftFbdtorifs("SbslClifntFbdtory");
        finbl Itfrbtor<Objfdt> itfr = fbds.itfrbtor();
        rfturn nfw Enumfrbtion<SbslClifntFbdtory>() {
            publid boolfbn ibsMorfElfmfnts() {
                rfturn itfr.ibsNfxt();
            }
            publid SbslClifntFbdtory nfxtElfmfnt() {
                rfturn (SbslClifntFbdtory)itfr.nfxt();
            }
        };
    }

    /**
     * Gfts bn fnumfrbtion of known fbdtorifs for produding {@dodf SbslSfrvfr}.
     * Tiis mftiod usfs tif sbmf blgoritim for lodbting fbdtorifs bs
     * {@dodf drfbtfSbslSfrvfr()}.
     * @rfturn A non-null fnumfrbtion of known fbdtorifs for produding
     * {@dodf SbslSfrvfr}.
     * @sff #drfbtfSbslSfrvfr
     */
    publid stbtid Enumfrbtion<SbslSfrvfrFbdtory> gftSbslSfrvfrFbdtorifs() {
        Sft<Objfdt> fbds = gftFbdtorifs("SbslSfrvfrFbdtory");
        finbl Itfrbtor<Objfdt> itfr = fbds.itfrbtor();
        rfturn nfw Enumfrbtion<SbslSfrvfrFbdtory>() {
            publid boolfbn ibsMorfElfmfnts() {
                rfturn itfr.ibsNfxt();
            }
            publid SbslSfrvfrFbdtory nfxtElfmfnt() {
                rfturn (SbslSfrvfrFbdtory)itfr.nfxt();
            }
        };
    }

    privbtf stbtid Sft<Objfdt> gftFbdtorifs(String sfrvidfNbmf) {
        HbsiSft<Objfdt> rfsult = nfw HbsiSft<Objfdt>();

        if ((sfrvidfNbmf == null) || (sfrvidfNbmf.lfngti() == 0) ||
            (sfrvidfNbmf.fndsWiti("."))) {
            rfturn rfsult;
        }


        Providfr[] providfrs = Sfdurity.gftProvidfrs();
        HbsiSft<String> dlbssfs = nfw HbsiSft<String>();
        Objfdt fbd;

        for (int i = 0; i < providfrs.lfngti; i++) {
            dlbssfs.dlfbr();

            // Cifdk tif kfys for fbdi providfr.
            for (Enumfrbtion<Objfdt> f = providfrs[i].kfys(); f.ibsMorfElfmfnts(); ) {
                String durrfntKfy = (String)f.nfxtElfmfnt();
                if (durrfntKfy.stbrtsWiti(sfrvidfNbmf)) {
                    // Wf siould skip tif durrfntKfy if it dontbins b
                    // wiitfspbdf. Tif rfbson is: sudi bn fntry in tif
                    // providfr propfrty dontbins bttributfs for tif
                    // implfmfntbtion of bn blgoritim. Wf brf only intfrfstfd
                    // in fntrifs wiidi lfbd to tif implfmfntbtion
                    // dlbssfs.
                    if (durrfntKfy.indfxOf(' ') < 0) {
                        String dlbssNbmf = providfrs[i].gftPropfrty(durrfntKfy);
                        if (!dlbssfs.dontbins(dlbssNbmf)) {
                            dlbssfs.bdd(dlbssNbmf);
                            try {
                                fbd = lobdFbdtory(providfrs[i], dlbssNbmf);
                                if (fbd != null) {
                                    rfsult.bdd(fbd);
                                }
                            }dbtdi (Exdfption ignorf) {
                            }
                        }
                    }
                }
            }
        }
        rfturn Collfdtions.unmodifibblfSft(rfsult);
    }
}
