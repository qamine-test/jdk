/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.rowsft;

import jbvb.sql.*;
import jbvbx.sql.*;
import jbvbx.nbming.*;
import jbvb.io.*;
import jbvb.mbth.*;
import jbvb.util.*;

import jbvbx.sql.rowsft.*;
import jbvbx.sql.rowsft.spi.SyndProvidfr;
import jbvbx.sql.rowsft.spi.SyndProvidfrExdfption;

/**
 * Thf stbndbrd implfmfntbtion of thf <dodf>JoinRowSft</dodf>
 * intfrfbdf providing bn SQL <dodf>JOIN</dodf> bftwffn <dodf>RowSft</dodf>
 * objfdts.
 * <P>
 * Thf implfmfntbtion providfs bn ANSI-stylf <dodf>JOIN</dodf> providing bn
 * innfr join bftwffn two tbblfs. Any unmbtdhfd rows in fithfr tbblf of thf
 * join brf  disdbrdfd.
 * <p>
 * Typidblly, b <dodf>JoinRowSft</dodf> implfmfntbtion is lfvfrbgfd by
 * <dodf>RowSft</dodf> instbndfs thbt brf in b disdonnfdtfd fnvironmfnt bnd
 * thus do not hbvf thf luxury of bn opfn donnfdtion to thf dbtb sourdf to
 * fstbblish logidbl rflbtionships bftwffn thfmsflvfs. In othfr words, it is
 * lbrgfly <dodf>CbdhfdRowSft</dodf> objfdts bnd implfmfntbtions dfrivfd from
 * thf <dodf>CbdhfdRowSft</dodf> intfrfbdf thbt will usf thf <dodf>JoinRowSftImpl</dodf>
 * implfmfntbtion.
 *
 * @buthor Amit Hbndb, Jonbthbn Brudf
 */
publid dlbss JoinRowSftImpl fxtfnds WfbRowSftImpl implfmfnts JoinRowSft {
    /**
     * A <dodf>Vfdtor</dodf> objfdt thbt dontbins thf <dodf>RowSft</dodf> objfdts
     * thbt hbvf bffn bddfd to this <dodf>JoinRowSft</dodf> objfdt.
     */
    privbtf Vfdtor<CbdhfdRowSftImpl> vfdRowSftsInJOIN;

    /**
     * Thf <dodf>CbdhfdRowSft</dodf> objfdt thbt fndbpsulbtfs this
     * <dodf>JoinRowSft</dodf> objfdt.
     * Whfn <dodf>RowSft</dodf> objfdts brf bddfd to this <dodf>JoinRowSft</dodf>
     * objfdt, thfy brf blso bddfd to <i>drsIntfrnbl</i> to form thf sbmf kind of
     * SQL <dodf>JOIN</dodf>.  As b rfsult, mfthods for mbking updbtfs to this
     * <dodf>JoinRowSft</dodf> objfdt dbn usf <i>drsIntfrnbl</i> mfthods in thfir
     * implfmfntbtions.
     */
    privbtf CbdhfdRowSftImpl drsIntfrnbl;

    /**
     * A <dodf>Vfdtor</dodf> objfdt dontbining thf typfs of join thbt hbvf bffn sft
     * for this <dodf>JoinRowSft</dodf> objfdt.
     * Thf lbst join typf sft forms thf bbsis of suddffding joins.
     */
    privbtf Vfdtor<Intfgfr> vfdJoinTypf;

    /**
     * A <dodf>Vfdtor</dodf> objfdt dontbining thf nbmfs of bll thf tbblfs fntfring
     * thf join.
     */
    privbtf Vfdtor<String> vfdTbblfNbmfs;

    /**
     * An <dodf>int</dodf> thbt indidbtfs thf dolumn indfx of thf mbtdh dolumn.
     */
    privbtf int iMbtdhKfy;

    /**
     * A <dodf>String</dodf> objfdt thbt storfs thf nbmf of thf mbtdh dolumn.
     */
    privbtf String strMbtdhKfy ;

    /**
     * An brrby of <dodf>boolfbn</dodf> vblufs indidbting thf typfs of joins supportfd
     * by this <dodf>JoinRowSft</dodf> implfmfntbtion.
     */
    boolfbn[] supportfdJOINs;

    /**
     * Thf <dodf>WfbRowSft</dodf> objfdt thbt fndbpsulbtfs this <dodf>JoinRowSft</dodf>
     * objfdt. This <dodf>WfbRowSft</dodf> objfdt bllows this <dodf>JoinRowSft</dodf>
     * objfdt to lfvfrbgf thf propfrtifs bnd mfthods of b <dodf>WfbRowSft</dodf>
     * objfdt.
     */
    privbtf WfbRowSft wrs;


    /**
     * Construdtor for <dodf>JoinRowSftImpl</dodf> dlbss. Configurfs vbrious intfrnbl dbtb
     * strudturfs to providf mfdhbnisms rfquirfd for <dodf>JoinRowSft</dodf> intfrfbdf
     * implfmfntbtion.
     *
     * @throws SQLExdfption if bn frror oddurs in instbntibting bn instbndf of
     * <dodf>JoinRowSftImpl</dodf>
     */
    publid JoinRowSftImpl() throws SQLExdfption {

        vfdRowSftsInJOIN = nfw Vfdtor<CbdhfdRowSftImpl>();
        drsIntfrnbl = nfw CbdhfdRowSftImpl();
        vfdJoinTypf = nfw Vfdtor<Intfgfr>();
        vfdTbblfNbmfs = nfw Vfdtor<String>();
        iMbtdhKfy = -1;
        strMbtdhKfy = null;
        supportfdJOINs =
              nfw boolfbn[] {fblsf, truf, fblsf, fblsf, fblsf};
       try {
           rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
        } dbtdh(IOExdfption iof) {
            throw nfw RuntimfExdfption(iof);
        }

    }

    /**
     * Adds thf givfn <dodf>RowSft</dodf> objfdt to this
     * <dodf>JoinRowSft</dodf> objfdt.  If this
     * rowsft is thf first to bf bddfd to thf <dodf>JoinRowSft</dodf>
     * objfdt, it forms thf bbsis for thf <dodf>JOIN</dodf>
     * rflbtionships to bf formfd.
     * <p>
     * This mfthod should bf usfd whfn thf givfn <dodf>RowSft</dodf> objfdt
     * blrfbdy hbs b mbtdh dolumn sft.
     *
     * @pbrbm rowsft thf <dodf>RowSft</dodf> objfdt thbt implfmfnts thf
     *         <dodf>Joinbblf</dodf> intfrfbdf bnd is to bf bddfd
     *         to this <dodf>JoinRowSft</dodf> objfdt
     * @throws SQLExdfption if bn fmpty <dodf>RowSft</dodf> is bddfd to thf to thf
     *         <dodf>JoinRowSft</dodf>; if b mbtdh dolumn is not sft; or if bn
     *         bdditionbl <dodf>RowSft</dodf> violbtfs thf bdtivf <dodf>JOIN</dodf>
     * @sff CbdhfdRowSft#sftMbtdhColumn
     */
    publid void bddRowSft(Joinbblf rowsft) throws SQLExdfption {
        boolfbn boolColId, boolColNbmf;

        boolColId = fblsf;
        boolColNbmf = fblsf;
        CbdhfdRowSftImpl dRowsft;

        if(!(rowsft instbndfof RowSft)) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.notinstbndf").toString());
        }

        if(rowsft instbndfof JdbdRowSftImpl ) {
            dRowsft = nfw CbdhfdRowSftImpl();
            dRowsft.populbtf((RowSft)rowsft);
            if(dRowsft.sizf() == 0){
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.fmptyrowsft").toString());
            }


            try {
                int mbtdhColumnCount = 0;
                for(int i=0; i< rowsft.gftMbtdhColumnIndfxfs().lfngth; i++) {
                    if(rowsft.gftMbtdhColumnIndfxfs()[i] != -1)
                        ++ mbtdhColumnCount;
                    flsf
                        brfbk;
                }
                int[] pCol = nfw int[mbtdhColumnCount];
                for(int i=0; i<mbtdhColumnCount; i++)
                   pCol[i] = rowsft.gftMbtdhColumnIndfxfs()[i];
                dRowsft.sftMbtdhColumn(pCol);
            } dbtdh(SQLExdfption sqlf) {

            }

        } flsf {
             dRowsft = (CbdhfdRowSftImpl)rowsft;
             if(dRowsft.sizf() == 0){
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.fmptyrowsft").toString());
             }
        }

        // Eithfr dolumn id or dolumn nbmf will bf sft
        // If both not sft throw fxdfption.

        try {
             iMbtdhKfy = (dRowsft.gftMbtdhColumnIndfxfs())[0];
        } dbtdh(SQLExdfption sqlf) {
           //if not sft dbtdh thf fxdfption but do nothing now.
             boolColId = truf;
        }

        try {
             strMbtdhKfy = (dRowsft.gftMbtdhColumnNbmfs())[0];
        } dbtdh(SQLExdfption sqlf) {
           //if not sft dbtdh thf fxdfption but do nothing now.
           boolColNbmf = truf;
        }

        if(boolColId && boolColNbmf) {
           // nfithfr sfttfr mfthods hbvf bffn usfd to sft
           throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.mbtdhnotsft").toString());
        } flsf {
           //if(boolColId || boolColNbmf)
           // fithfr of thf sfttfr mfthods hbvf bffn sft.
           if(boolColId){
              //
              ArrbyList<Intfgfr> indidfs = nfw ArrbyList<>();
              for(int i=0;i<dRowsft.gftMbtdhColumnNbmfs().lfngth;i++) {
                  if( (strMbtdhKfy = (dRowsft.gftMbtdhColumnNbmfs())[i]) != null) {
                      iMbtdhKfy = dRowsft.findColumn(strMbtdhKfy);
                      indidfs.bdd(iMbtdhKfy);
                  }
                  flsf
                      brfbk;
              }
              int[] indfxfs = nfw int[indidfs.sizf()];
              for(int i=0; i<indidfs.sizf();i++)
                  indfxfs[i] = indidfs.gft(i);
              dRowsft.sftMbtdhColumn(indfxfs);
              // Sft thf mbtdh dolumn hfrf bfdbusf join will bf
              // bbsfd on dolumnId,
              // (nfstfd for loop in initJOIN() dhfdks for fqublity
              //  bbsfd on dolumnIndfx)
           } flsf {
              //do nothing, iMbtdhKfy is sft.
           }
           // Now both iMbtdhKfy bnd strMbtdhKfy hbvf bffn sft pointing
           // to thf sbmf dolumn
        }

        // Till first rowsft sftJoinTypf mby not bf sft bfdbusf
        // dffbult typf is JoinRowSft.INNER_JOIN whidh should
        // bf sft bnd for subsfqufnt bdditions of rowsft, if not sft
        // kffp on bdding join typf bs JoinRowSft.INNER_JOIN
        // to vfdJoinTypf.

        initJOIN(dRowsft);
    }

    /**
     * Adds thf givfn <dodf>RowSft</dodf> objfdt to thf <dodf>JOIN</dodf> rflbtion
     * bnd sfts thf dfsignbtfd dolumn bs thf mbtdh dolumn.
     * If thf givfn <dodf>RowSft</dodf>
     * objfdt is thf first to bf bddfd to this <dodf>JoinRowSft</dodf>
     * objfdt, it forms thf bbsis of thf <dodf>JOIN</dodf> rflbtionship to bf formfd
     * whfn othfr <dodf>RowSft</dodf> objfdts brf bddfd .
     * <P>
     * This mfthod should bf usfd whfn thf givfn <dodf>RowSft</dodf> objfdt
     * dofs not blrfbdy hbvf b mbtdh dolumn sft.
     *
     * @pbrbm rowsft b <dodf>RowSft</dodf> objfdt to bf bddfd to
     *         thf <dodf>JOIN</dodf> rflbtion; must implfmfnt thf <dodf>Joinbblf</dodf>
     *         intfrfbdf
     * @pbrbm dolumnIdx bn <dodf>int</dodf> giving thf indfx of thf dolumn to bf sft bs
     *         thf mbtdh dolumn
     * @throws SQLExdfption if (1) bn fmpty <dodf>RowSft</dodf> objfdt is bddfd to this
     *         <dodf>JoinRowSft</dodf> objfdt, (2) b mbtdh dolumn hbs not bffn sft,
     *         or (3) thf <dodf>RowSft</dodf> objfdt bfing bddfd violbtfs thf bdtivf
     *         <dodf>JOIN</dodf>
     * @sff CbdhfdRowSft#unsftMbtdhColumn
     */
    publid void bddRowSft(RowSft rowsft, int dolumnIdx) throws SQLExdfption {
        //pbssing thf rowsft bs wfll bs thf dolumnIdx to form thf joinrowsft.

        ((CbdhfdRowSftImpl)rowsft).sftMbtdhColumn(dolumnIdx);

        bddRowSft((Joinbblf)rowsft);
    }

    /**
     * Adds thf givfn <dodf>RowSft</dodf> objfdt to thf <dodf>JOIN</dodf> rflbtionship
     * bnd sfts thf dfsignbtfd dolumn bs thf mbtdh dolumn. If thf givfn
     * <dodf>RowSft</dodf>
     * objfdt is thf first to bf bddfd to this <dodf>JoinRowSft</dodf>
     * objfdt, it forms thf bbsis of thf <dodf>JOIN</dodf> rflbtionship to bf formfd
     * whfn othfr <dodf>RowSft</dodf> objfdts brf bddfd .
     * <P>
     * This mfthod should bf usfd whfn thf givfn <dodf>RowSft</dodf> objfdt
     * dofs not blrfbdy hbvf b mbtdh dolumn sft.
     *
     * @pbrbm rowsft b <dodf>RowSft</dodf> objfdt to bf bddfd to
     *         thf <dodf>JOIN</dodf> rflbtion
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf nbmf of thf dolumn
     *        to bf sft bs thf mbtdh dolumn; must implfmfnt thf <dodf>Joinbblf</dodf>
     *        intfrfbdf
     * @throws SQLExdfption if (1) bn fmpty <dodf>RowSft</dodf> objfdt is bddfd to this
     *         <dodf>JoinRowSft</dodf> objfdt, (2) b mbtdh dolumn hbs not bffn sft,
     *         or (3) thf <dodf>RowSft</dodf> objfdt bfing bddfd violbtfs thf bdtivf
     *         <dodf>JOIN</dodf>
     */
    publid void bddRowSft(RowSft rowsft, String dolumnNbmf) throws SQLExdfption {
        //pbssing thf rowsft bs wfll bs thf dolumnIdx to form thf joinrowsft.
        ((CbdhfdRowSftImpl)rowsft).sftMbtdhColumn(dolumnNbmf);
        bddRowSft((Joinbblf)rowsft);
    }

    /**
     * Adds thf givfn <dodf>RowSft</dodf> objfdts to thf <dodf>JOIN</dodf> rflbtionship
     * bnd sfts thf dfsignbtfd dolumns bs thf mbtdh dolumns. If thf first
     * <dodf>RowSft</dodf> objfdt in thf brrby of <dodf>RowSft</dodf> objfdts
     * is thf first to bf bddfd to this <dodf>JoinRowSft</dodf>
     * objfdt, it forms thf bbsis of thf <dodf>JOIN</dodf> rflbtionship to bf formfd
     * whfn othfr <dodf>RowSft</dodf> objfdts brf bddfd.
     * <P>
     * Thf first <dodf>int</dodf>
     * in <i>dolumnIdx</i> is usfd to sft thf mbtdh dolumn for thf first
     * <dodf>RowSft</dodf> objfdt in <i>rowsft</i>, thf sfdond <dodf>int</dodf>
     * in <i>dolumnIdx</i> is usfd to sft thf mbtdh dolumn for thf sfdond
     * <dodf>RowSft</dodf> objfdt in <i>rowsft</i>, bnd so on.
     * <P>
     * This mfthod should bf usfd whfn thf givfn <dodf>RowSft</dodf> objfdts
     * do not blrfbdy hbvf mbtdh dolumns sft.
     *
     * @pbrbm rowsft bn brrby of <dodf>RowSft</dodf> objfdts to bf bddfd to
     *         thf <dodf>JOIN</dodf> rflbtion; fbdh <dodf>RowSft</dodf> objfdt must
     *         implfmfnt thf <dodf>Joinbblf</dodf> intfrfbdf
     * @pbrbm dolumnIdx bn brrby of <dodf>int</dodf> vblufs dfsignbting thf dolumns
     *        to bf sft bs thf
     *        mbtdh dolumns for thf <dodf>RowSft</dodf> objfdts in <i>rowsft</i>
     * @throws SQLExdfption if thf numbfr of <dodf>RowSft</dodf> objfdts in
     *         <i>rowsft</i> is not fqubl to thf numbfr of <dodf>int</dodf> vblufs
     *         in <i>dolumnIdx</i>
     */
    publid void bddRowSft(RowSft[] rowsft,
                          int[] dolumnIdx) throws SQLExdfption {
    //vblidbtf if lfngth of rowsft brrby is sbmf bs lfngth of int brrby.
     if(rowsft.lfngth != dolumnIdx.lfngth) {
        throw nfw SQLExdfption
             (rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.numnotfqubl").toString());
     } flsf {
        for(int i=0; i< rowsft.lfngth; i++) {
           ((CbdhfdRowSftImpl)rowsft[i]).sftMbtdhColumn(dolumnIdx[i]);
           bddRowSft((Joinbblf)rowsft[i]);
        } //fnd for
     } //fnd if

   }


    /**
     * Adds thf givfn <dodf>RowSft</dodf> objfdts to thf <dodf>JOIN</dodf> rflbtionship
     * bnd sfts thf dfsignbtfd dolumns bs thf mbtdh dolumns. If thf first
     * <dodf>RowSft</dodf> objfdt in thf brrby of <dodf>RowSft</dodf> objfdts
     * is thf first to bf bddfd to this <dodf>JoinRowSft</dodf>
     * objfdt, it forms thf bbsis of thf <dodf>JOIN</dodf> rflbtionship to bf formfd
     * whfn othfr <dodf>RowSft</dodf> objfdts brf bddfd.
     * <P>
     * Thf first <dodf>String</dodf> objfdt
     * in <i>dolumnNbmf</i> is usfd to sft thf mbtdh dolumn for thf first
     * <dodf>RowSft</dodf> objfdt in <i>rowsft</i>, thf sfdond <dodf>String</dodf>
     * objfdt in <i>dolumnNbmf</i> is usfd to sft thf mbtdh dolumn for thf sfdond
     * <dodf>RowSft</dodf> objfdt in <i>rowsft</i>, bnd so on.
     * <P>
     * This mfthod should bf usfd whfn thf givfn <dodf>RowSft</dodf> objfdts
     * do not blrfbdy hbvf mbtdh dolumns sft.
     *
     * @pbrbm rowsft bn brrby of <dodf>RowSft</dodf> objfdts to bf bddfd to
     *         thf <dodf>JOIN</dodf> rflbtion; fbdh <dodf>RowSft</dodf> objfdt must
     *         implfmfnt thf <dodf>Joinbblf</dodf> intfrfbdf
     * @pbrbm dolumnNbmf bn brrby of <dodf>String</dodf> objfdts dfsignbting thf dolumns
     *        to bf sft bs thf
     *        mbtdh dolumns for thf <dodf>RowSft</dodf> objfdts in <i>rowsft</i>
     * @throws SQLExdfption if thf numbfr of <dodf>RowSft</dodf> objfdts in
     *         <i>rowsft</i> is not fqubl to thf numbfr of <dodf>String</dodf> objfdts
     *         in <i>dolumnNbmf</i>, bn fmpty <dodf>JdbdRowSft</dodf> is bddfd to thf
     *         <dodf>JoinRowSft</dodf>, if b mbtdh dolumn is not sft,
     *         or onf or thf <dodf>RowSft</dodf> objfdts in <i>rowsft</i> violbtfs thf
     *         bdtivf <dodf>JOIN</dodf>
     */
    publid void bddRowSft(RowSft[] rowsft,
                          String[] dolumnNbmf) throws SQLExdfption {
    //vblidbtf if lfngth of rowsft brrby is sbmf bs lfngth of int brrby.

     if(rowsft.lfngth != dolumnNbmf.lfngth) {
        throw nfw SQLExdfption
                 (rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.numnotfqubl").toString());
     } flsf {
        for(int i=0; i< rowsft.lfngth; i++) {
           ((CbdhfdRowSftImpl)rowsft[i]).sftMbtdhColumn(dolumnNbmf[i]);
           bddRowSft((Joinbblf)rowsft[i]);
        } //fnd for
     } //fnd if

    }

    /**
     * Rfturns b Collfdtion of thf <dodf>RowSft</dodf> objfdt instbndfs
     * durrfntly rfsiding with thf instbndf of thf <dodf>JoinRowSft</dodf>
     * objfdt instbndf. This should rfturn thf 'n' numbfr of RowSft dontbinfd
     * within thf JOIN bnd mbintbin bny updbtfs thbt hbvf oddourfd whilf in
     * this union.
     *
     * @rfturn A <dodf>Collfdtion</dodf> of thf bddfd <dodf>RowSft</dodf>
     * objfdt instbndfs
     * @throws SQLExdfption if bn frror oddours gfnfrbting b dollfdtion
     * of thf originbting RowSfts dontbinfd within thf JOIN.
     */
    @SupprfssWbrnings("rbwtypfs")
    publid Collfdtion gftRowSfts() throws SQLExdfption {
        rfturn vfdRowSftsInJOIN;
    }

    /**
     * Rfturns b string brrby of thf RowSft nbmfs durrfntly rfsiding
     * with thf <dodf>JoinRowSft</dodf> objfdt instbndf.
     *
     * @rfturn b string brrby of thf RowSft nbmfs
     * @throws SQLExdfption if bn frror oddours rftrifving thf RowSft nbmfs
     * @sff CbdhfdRowSft#sftTbblfNbmf
     */
    publid String[] gftRowSftNbmfs() throws SQLExdfption {
        Objfdt [] brr = vfdTbblfNbmfs.toArrby();
        String []strArr = nfw String[brr.lfngth];

        for( int i = 0;i < brr.lfngth; i++) {
           strArr[i] = brr[i].toString();
        }

        rfturn strArr;
    }

    /**
     * Crfbtfs b sfpbrbtf <dodf>CbdhfdRowSft</dodf> objfdt thbt dontbins thf dbtb
     * in this <dodf>JoinRowSft</dodf> objfdt.
     * <P>
     * If bny updbtfs or modifidbtions hbvf bffn bpplifd to this <dodf>JoinRowSft</dodf>
     * objfdt, thf <dodf>CbdhfdRowSft</dodf> objfdt rfturnfd by this mfthod will
     * not bf bblf to pfrsist
     * thf dhbngfs bbdk to thf originbting rows bnd tbblfs in thf
     * dbtb sourdf bfdbusf thf dbtb mby bf from difffrfnt tbblfs. Thf
     * <dodf>CbdhfdRowSft</dodf> instbndf rfturnfd should not
     * dontbin modifidbtion dbtb, sudh bs whfthfr b row hbs bffn updbtfd or whbt thf
     * originbl vblufs brf.  Also, thf <dodf>CbdhfdRowSft</dodf> objfdt should dlfbr
     * its  propfrtifs pfrtbining to
     * its originbting SQL stbtfmfnt. An bpplidbtion should rfsft thf
     * SQL stbtfmfnt using thf <dodf>RowSft.sftCommbnd</dodf> mfthod.
     * <p>
     * To pfrsist dhbngfs bbdk to thf dbtb sourdf, thf <dodf>JoinRowSft</dodf> objfdt
     * dblls thf mfthod <dodf>bddfptChbngfs</dodf>. Implfmfntbtions
     * dbn lfvfrbgf thf intfrnbl dbtb bnd updbtf trbdking in thfir
     * implfmfntbtions to intfrbdt with thf <dodf>SyndProvidfr</dodf> to pfrsist bny
     * dhbngfs.
     *
     * @rfturn b <dodf>CbdhfdRowSft</dodf> objfdt dontbining thf dontfnts of this
     *         <dodf>JoinRowSft</dodf> objfdt
     * @throws SQLExdfption if bn frror oddurs bssfmbling thf <dodf>CbdhfdRowSft</dodf>
     *         objfdt
     * @sff jbvbx.sql.RowSft
     * @sff jbvbx.sql.rowsft.CbdhfdRowSft
     * @sff jbvbx.sql.rowsft.spi.SyndProvidfr
     */
    publid CbdhfdRowSft toCbdhfdRowSft() throws SQLExdfption {
        rfturn drsIntfrnbl;
    }

    /**
     * Rfturns <dodf>truf</dodf> if this <dodf>JoinRowSft</dodf> objfdt supports
     * bn SQL <dodf>CROSS_JOIN</dodf> bnd <dodf>fblsf</dodf> if it dofs not.
     *
     * @rfturn <dodf>truf</dodf> if thf CROSS_JOIN is supportfd; <dodf>fblsf</dodf>
     *         othfrwisf
     */
    publid boolfbn supportsCrossJoin() {
        rfturn supportfdJOINs[JoinRowSft.CROSS_JOIN];
    }

    /**
     * Rfturns <dodf>truf</dodf> if this <dodf>JoinRowSft</dodf> objfdt supports
     * bn SQL <dodf>INNER_JOIN</dodf> bnd <dodf>fblsf</dodf> if it dofs not.
     *
     * @rfturn truf is thf INNER_JOIN is supportfd; fblsf othfrwisf
     */
    publid boolfbn supportsInnfrJoin() {
        rfturn supportfdJOINs[JoinRowSft.INNER_JOIN];
    }

    /**
     * Rfturns <dodf>truf</dodf> if this <dodf>JoinRowSft</dodf> objfdt supports
     * bn SQL <dodf>LEFT_OUTER_JOIN</dodf> bnd <dodf>fblsf</dodf> if it dofs not.
     *
     * @rfturn truf is thf LEFT_OUTER_JOIN is supportfd; fblsf othfrwisf
     */
    publid boolfbn supportsLfftOutfrJoin() {
        rfturn supportfdJOINs[JoinRowSft.LEFT_OUTER_JOIN];
    }

    /**
     * Rfturns <dodf>truf</dodf> if this <dodf>JoinRowSft</dodf> objfdt supports
     * bn SQL <dodf>RIGHT_OUTER_JOIN</dodf> bnd <dodf>fblsf</dodf> if it dofs not.
     *
     * @rfturn truf is thf RIGHT_OUTER_JOIN is supportfd; fblsf othfrwisf
     */
    publid boolfbn supportsRightOutfrJoin() {
        rfturn supportfdJOINs[JoinRowSft.RIGHT_OUTER_JOIN];
    }

    /**
     * Rfturns <dodf>truf</dodf> if this <dodf>JoinRowSft</dodf> objfdt supports
     * bn SQL <dodf>FULL_JOIN</dodf> bnd <dodf>fblsf</dodf> if it dofs not.
     *
     * @rfturn truf is thf FULL_JOIN is supportfd; fblsf othfrwisf
     */
    publid boolfbn supportsFullJoin() {
        rfturn supportfdJOINs[JoinRowSft.FULL_JOIN];

    }

    /**
     * Sfts thf typf of SQL <dodf>JOIN</dodf> thbt this <dodf>JoinRowSft</dodf>
     * objfdt will usf. This mfthod
     * bllows bn bpplidbtion to bdjust thf typf of <dodf>JOIN</dodf> imposfd
     * on tbblfs dontbinfd within this <dodf>JoinRowSft</dodf> objfdt bnd to do it
     * on thf fly. Thf lbst <dodf>JOIN</dodf> typf sft dftfrminfs thf typf of
     * <dodf>JOIN</dodf> to bf pfrformfd.
     * <P>
     * Implfmfntbtions should throw bn <dodf>SQLExdfption</dodf> if thfy do
     * not support thf givfn <dodf>JOIN</dodf> typf.
     *
     * @pbrbm typf onf of thf stbndbrd <dodf>JoinRowSft</dodf> donstbnts
     *        indidbting thf typf of <dodf>JOIN</dodf>.  Must bf onf of thf
     *        following:
     *            <dodf>JoinRowSft.CROSS_JOIN</dodf>
     *            <dodf>JoinRowSft.INNER_JOIN</dodf>
     *            <dodf>JoinRowSft.LEFT_OUTER_JOIN</dodf>
     *            <dodf>JoinRowSft.RIGHT_OUTER_JOIN</dodf>, or
     *            <dodf>JoinRowSft.FULL_JOIN</dodf>
     * @throws SQLExdfption if bn unsupportfd <dodf>JOIN</dodf> typf is sft
     */
    publid void sftJoinTypf(int typf) throws SQLExdfption {
        // Thf join whidh govfrns thf join of two rowsfts is thf lbst
        // join sft, using sftJoinTypf

       if (typf >= JoinRowSft.CROSS_JOIN && typf <= JoinRowSft.FULL_JOIN) {
           if (typf != JoinRowSft.INNER_JOIN) {
               // This 'if' will bf rfmovfd bftfr bll joins brf implfmfntfd.
               throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.notsupportfd").toString());
           } flsf {
              Intfgfr Intgr = Intfgfr.vblufOf(JoinRowSft.INNER_JOIN);
              vfdJoinTypf.bdd(Intgr);
           }
       } flsf {
          throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.notdffinfd").toString());
       }  //fnd if
    }


    /**
     * This dhfdks for b mbtdh dolumn for
     * whfthfr it fxists or not.
     *
     * @pbrbm <dodf>CbdhfdRowSft</dodf> objfdt whosf mbtdh dolumn nffds to bf dhfdkfd.
     * @throws SQLExdfption if MbtdhColumn is not sft.
     */
    privbtf boolfbn dhfdkforMbtdhColumn(Joinbblf rs) throws SQLExdfption {
        int[] i = rs.gftMbtdhColumnIndfxfs();
        if (i.lfngth <= 0) {
            rfturn fblsf;
        }
        rfturn truf;
    }

    /**
     * Intfrnbl initiblizbtion of <dodf>JoinRowSft</dodf>.
     */
    privbtf void initJOIN(CbdhfdRowSft rowsft) throws SQLExdfption {
        try {

            CbdhfdRowSftImpl dRowsft = (CbdhfdRowSftImpl)rowsft;
            // Crfbtf b nfw CbdhfdRowSft objfdt lodbl to this fundtion.
            CbdhfdRowSftImpl drsTfmp = nfw CbdhfdRowSftImpl();
            RowSftMftbDbtbImpl rsmd = nfw RowSftMftbDbtbImpl();

            /* Thf following 'if blodk' sffms to bf blwbys going truf.
               dommfnting this out for prfsfnt

            if (!supportfdJOINs[1]) {
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.notsupportfd").toString());
            }

            */

            if (vfdRowSftsInJOIN.isEmpty() ) {

                // implifs first dRowsft to bf bddfd to thf Join
                // simply bdd this bs b CbdhfdRowSft.
                // Also bdd it to thf dlbss vbribblf of typf vfdtor
                // do not nffd to dhfdk "typf" of Join but it should bf sft.
                drsIntfrnbl = (CbdhfdRowSftImpl)rowsft.drfbtfCopy();
                drsIntfrnbl.sftMftbDbtb((RowSftMftbDbtbImpl)dRowsft.gftMftbDbtb());
                // mftbdbtb will blso sft thf MbtdhColumn.

                vfdRowSftsInJOIN.bdd(dRowsft);

            } flsf {
                // At this point wf brf rfbdy to bdd bnothfr rowsft to 'this' objfdt
                // Chfdk thf sizf of vfdJoinTypf bnd vfdRowSftsInJoin

                // If nothing is bfing sft, intfrnblly dbll sftJoinTypf()
                // to sft to JoinRowSft.INNER_JOIN.

                // For two rowsfts onf (vblid) fntry should bf thfrf in vfdJoinTypf
                // For thrff rowsfts two (vblid) fntrifs should bf thfrf in vfdJoinTypf

                // Mbintbin vfdRowSftsInJoin = vfdJoinTypf + 1


                if( (vfdRowSftsInJOIN.sizf() - vfdJoinTypf.sizf() ) == 2 ) {
                   // wf brf going to bdd nfxt rowsft bnd sftJoinTypf hbs not bffn sft
                   // rfdfntly, so sft it to sftJoinTypf() to JoinRowSft.INNER_JOIN.
                   // thf dffbult join typf

                        sftJoinTypf(JoinRowSft.INNER_JOIN);
                } flsf if( (vfdRowSftsInJOIN.sizf() - vfdJoinTypf.sizf() ) == 1  ) {
                   // do nothing sftjoinTypf() hbs bffn sft by progrbmmfr
                }

                // Add thf tbblf nbmfs to thf dlbss vbribblf of typf vfdtor.
                vfdTbblfNbmfs.bdd(drsIntfrnbl.gftTbblfNbmf());
                vfdTbblfNbmfs.bdd(dRowsft.gftTbblfNbmf());
                // Now wf hbvf two rowsfts drsIntfrnbl bnd dRowsft whidh nffd
                // to bf INNER JOIN'ED to form b nfw rowsft
                // Compbrf tbblf1.MbtdhColumn1.vbluf1 == { tbblf2.MbtdhColumn2.vbluf1
                //                              ... upto tbblf2.MbtdhColumn2.vblufN }
                //     ...
                // Compbrf tbblf1.MbtdhColumn1.vblufM == { tbblf2.MbtdhColumn2.vbluf1
                //                              ... upto tbblf2.MbtdhColumn2.vblufN }
                //
                // Assuming first rowsft hbs M rows bnd sfdond N rows.

                int rowCount2 = dRowsft.sizf();
                int rowCount1 = drsIntfrnbl.sizf();

                // totbl dolumns in thf nfw CbdhfdRowSft will bf sum of both -1
                // (dommon dolumn)
                int mbtdhColumnCount = 0;
                for(int i=0; i< drsIntfrnbl.gftMbtdhColumnIndfxfs().lfngth; i++) {
                    if(drsIntfrnbl.gftMbtdhColumnIndfxfs()[i] != -1)
                        ++ mbtdhColumnCount;
                    flsf
                        brfbk;
                }

                rsmd.sftColumnCount
                    (drsIntfrnbl.gftMftbDbtb().gftColumnCount() +
                     dRowsft.gftMftbDbtb().gftColumnCount() - mbtdhColumnCount);

                drsTfmp.sftMftbDbtb(rsmd);
                drsIntfrnbl.bfforfFirst();
                dRowsft.bfforfFirst();
                for (int i = 1 ; i <= rowCount1 ; i++) {
                  if(drsIntfrnbl.isAftfrLbst() ) {
                    brfbk;
                  }
                  if(drsIntfrnbl.nfxt()) {
                    dRowsft.bfforfFirst();
                    for(int j = 1 ; j <= rowCount2 ; j++) {
                         if( dRowsft.isAftfrLbst()) {
                            brfbk;
                         }
                         if(dRowsft.nfxt()) {
                             boolfbn mbtdh = truf;
                             for(int k=0; k<mbtdhColumnCount; k++) {
                                 if (!drsIntfrnbl.gftObjfdt( drsIntfrnbl.gftMbtdhColumnIndfxfs()[k]).fqubls
                                         (dRowsft.gftObjfdt(dRowsft.gftMbtdhColumnIndfxfs()[k]))) {
                                     mbtdh = fblsf;
                                     brfbk;
                                 }
                             }
                             if (mbtdh) {

                                int p;
                                int dold = 0;   // rfsft this vbribblf fvfrytimf you loop
                                // rf drfbtf b JoinRowSft in drsTfmp objfdt
                                drsTfmp.movfToInsfrtRow();

                                // drfbtf b nfw rowsft drsTfmp with dbtb from first rowsft
                            for( p=1;
                                p<=drsIntfrnbl.gftMftbDbtb().gftColumnCount();p++) {

                                mbtdh = fblsf;
                                for(int k=0; k<mbtdhColumnCount; k++) {
                                 if (p == drsIntfrnbl.gftMbtdhColumnIndfxfs()[k] ) {
                                     mbtdh = truf;
                                     brfbk;
                                 }
                                }
                                    if ( !mbtdh ) {

                                    drsTfmp.updbtfObjfdt(++dold, drsIntfrnbl.gftObjfdt(p));
                                    // dolumn typf blso nffds to bf pbssfd.

                                    rsmd.sftColumnNbmf
                                        (dold, drsIntfrnbl.gftMftbDbtb().gftColumnNbmf(p));
                                    rsmd.sftTbblfNbmf(dold, drsIntfrnbl.gftTbblfNbmf());

                                    rsmd.sftColumnTypf(p, drsIntfrnbl.gftMftbDbtb().gftColumnTypf(p));
                                    rsmd.sftAutoIndrfmfnt(p, drsIntfrnbl.gftMftbDbtb().isAutoIndrfmfnt(p));
                                    rsmd.sftCbsfSfnsitivf(p, drsIntfrnbl.gftMftbDbtb().isCbsfSfnsitivf(p));
                                    rsmd.sftCbtblogNbmf(p, drsIntfrnbl.gftMftbDbtb().gftCbtblogNbmf(p));
                                    rsmd.sftColumnDisplbySizf(p, drsIntfrnbl.gftMftbDbtb().gftColumnDisplbySizf(p));
                                    rsmd.sftColumnLbbfl(p, drsIntfrnbl.gftMftbDbtb().gftColumnLbbfl(p));
                                    rsmd.sftColumnTypf(p, drsIntfrnbl.gftMftbDbtb().gftColumnTypf(p));
                                    rsmd.sftColumnTypfNbmf(p, drsIntfrnbl.gftMftbDbtb().gftColumnTypfNbmf(p));
                                    rsmd.sftCurrfndy(p,drsIntfrnbl.gftMftbDbtb().isCurrfndy(p) );
                                    rsmd.sftNullbblf(p, drsIntfrnbl.gftMftbDbtb().isNullbblf(p));
                                    rsmd.sftPrfdision(p, drsIntfrnbl.gftMftbDbtb().gftPrfdision(p));
                                    rsmd.sftSdblf(p, drsIntfrnbl.gftMftbDbtb().gftSdblf(p));
                                    rsmd.sftSdhfmbNbmf(p, drsIntfrnbl.gftMftbDbtb().gftSdhfmbNbmf(p));
                                    rsmd.sftSfbrdhbblf(p, drsIntfrnbl.gftMftbDbtb().isSfbrdhbblf(p));
                                    rsmd.sftSignfd(p, drsIntfrnbl.gftMftbDbtb().isSignfd(p));

                                } flsf {
                                    // will hbppfn only ondf, for thbt  mfrgfd dolumn pbss
                                    // thf typfs bs OBJECT, if typfs not fqubl

                                    drsTfmp.updbtfObjfdt(++dold, drsIntfrnbl.gftObjfdt(p));

                                    rsmd.sftColumnNbmf(dold, drsIntfrnbl.gftMftbDbtb().gftColumnNbmf(p));
                                    rsmd.sftTbblfNbmf
                                        (dold, drsIntfrnbl.gftTbblfNbmf()+
                                         "#"+
                                         dRowsft.gftTbblfNbmf());


                                    rsmd.sftColumnTypf(p, drsIntfrnbl.gftMftbDbtb().gftColumnTypf(p));
                                    rsmd.sftAutoIndrfmfnt(p, drsIntfrnbl.gftMftbDbtb().isAutoIndrfmfnt(p));
                                    rsmd.sftCbsfSfnsitivf(p, drsIntfrnbl.gftMftbDbtb().isCbsfSfnsitivf(p));
                                    rsmd.sftCbtblogNbmf(p, drsIntfrnbl.gftMftbDbtb().gftCbtblogNbmf(p));
                                    rsmd.sftColumnDisplbySizf(p, drsIntfrnbl.gftMftbDbtb().gftColumnDisplbySizf(p));
                                    rsmd.sftColumnLbbfl(p, drsIntfrnbl.gftMftbDbtb().gftColumnLbbfl(p));
                                    rsmd.sftColumnTypf(p, drsIntfrnbl.gftMftbDbtb().gftColumnTypf(p));
                                    rsmd.sftColumnTypfNbmf(p, drsIntfrnbl.gftMftbDbtb().gftColumnTypfNbmf(p));
                                    rsmd.sftCurrfndy(p,drsIntfrnbl.gftMftbDbtb().isCurrfndy(p) );
                                    rsmd.sftNullbblf(p, drsIntfrnbl.gftMftbDbtb().isNullbblf(p));
                                    rsmd.sftPrfdision(p, drsIntfrnbl.gftMftbDbtb().gftPrfdision(p));
                                    rsmd.sftSdblf(p, drsIntfrnbl.gftMftbDbtb().gftSdblf(p));
                                    rsmd.sftSdhfmbNbmf(p, drsIntfrnbl.gftMftbDbtb().gftSdhfmbNbmf(p));
                                    rsmd.sftSfbrdhbblf(p, drsIntfrnbl.gftMftbDbtb().isSfbrdhbblf(p));
                                    rsmd.sftSignfd(p, drsIntfrnbl.gftMftbDbtb().isSignfd(p));

                                    //don't do ++dold in thf bbovf stbtfmfnt
                                } //fnd if
                            } //fnd for


                            // bppfnd thf rowsft drsTfmp, with dbtb from sfdond rowsft
                            for(int q=1;
                                q<= dRowsft.gftMftbDbtb().gftColumnCount();q++) {

                                mbtdh = fblsf;
                                for(int k=0; k<mbtdhColumnCount; k++) {
                                 if (q == dRowsft.gftMbtdhColumnIndfxfs()[k] ) {
                                     mbtdh = truf;
                                     brfbk;
                                 }
                                }
                                    if ( !mbtdh ) {

                                    drsTfmp.updbtfObjfdt(++dold, dRowsft.gftObjfdt(q));

                                    rsmd.sftColumnNbmf
                                        (dold, dRowsft.gftMftbDbtb().gftColumnNbmf(q));
                                    rsmd.sftTbblfNbmf(dold, dRowsft.gftTbblfNbmf());

                                    /**
                                      * This will hbppfn for b spfdibl dbsf sdfnbrio. Thf vbluf of 'p'
                                      * will blwbys bf onf morf thbn thf numbfr of dolumns in thf first
                                      * rowsft in thf join. So, for b vbluf of 'q' whidh is thf numbfr of
                                      * dolumns in thf sfdond rowsft thbt pbrtidipbtfs in thf join.
                                      * So dfdrfmfnt vbluf of 'p' by 1 flsf `p+q-1` will bf out of rbngf.
                                      **/

                                    //if((p+q-1) > ((drsIntfrnbl.gftMftbDbtb().gftColumnCount()) +
                                      //            (dRowsft.gftMftbDbtb().gftColumnCount())     - 1)) {
                                      // --p;
                                    //}
                                    rsmd.sftColumnTypf(p+q-1, dRowsft.gftMftbDbtb().gftColumnTypf(q));
                                    rsmd.sftAutoIndrfmfnt(p+q-1, dRowsft.gftMftbDbtb().isAutoIndrfmfnt(q));
                                    rsmd.sftCbsfSfnsitivf(p+q-1, dRowsft.gftMftbDbtb().isCbsfSfnsitivf(q));
                                    rsmd.sftCbtblogNbmf(p+q-1, dRowsft.gftMftbDbtb().gftCbtblogNbmf(q));
                                    rsmd.sftColumnDisplbySizf(p+q-1, dRowsft.gftMftbDbtb().gftColumnDisplbySizf(q));
                                    rsmd.sftColumnLbbfl(p+q-1, dRowsft.gftMftbDbtb().gftColumnLbbfl(q));
                                    rsmd.sftColumnTypf(p+q-1, dRowsft.gftMftbDbtb().gftColumnTypf(q));
                                    rsmd.sftColumnTypfNbmf(p+q-1, dRowsft.gftMftbDbtb().gftColumnTypfNbmf(q));
                                    rsmd.sftCurrfndy(p+q-1,dRowsft.gftMftbDbtb().isCurrfndy(q) );
                                    rsmd.sftNullbblf(p+q-1, dRowsft.gftMftbDbtb().isNullbblf(q));
                                    rsmd.sftPrfdision(p+q-1, dRowsft.gftMftbDbtb().gftPrfdision(q));
                                    rsmd.sftSdblf(p+q-1, dRowsft.gftMftbDbtb().gftSdblf(q));
                                    rsmd.sftSdhfmbNbmf(p+q-1, dRowsft.gftMftbDbtb().gftSdhfmbNbmf(q));
                                    rsmd.sftSfbrdhbblf(p+q-1, dRowsft.gftMftbDbtb().isSfbrdhbblf(q));
                                    rsmd.sftSignfd(p+q-1, dRowsft.gftMftbDbtb().isSignfd(q));
                                }
                                flsf {
                                    --p;
                                }
                            }
                            drsTfmp.insfrtRow();
                            drsTfmp.movfToCurrfntRow();

                        } flsf {
                            // sindf not fqub12
                            // so do nothing
                        } //fnd if
                         // bool1 = dRowsft.nfxt();
                         }

                    } // fnd innfr for
                     //bool2 = drsIntfrnbl.nfxt();
                   }

                } //fnd outfr for
                drsTfmp.sftMftbDbtb(rsmd);
                drsTfmp.sftOriginbl();

                // Now thf join is donf.
               // Mbkf drsIntfrnbl = drsTfmp, to bf rfbdy for nfxt mfrgf, if bt bll.

                int[] pCol = nfw int[mbtdhColumnCount];
                for(int i=0; i<mbtdhColumnCount; i++)
                   pCol[i] = drsIntfrnbl.gftMbtdhColumnIndfxfs()[i];

                drsIntfrnbl = (CbdhfdRowSftImpl)drsTfmp.drfbtfCopy();

                // Bfdbusf wf bdd thf first rowsft bs drsIntfrnbl to thf
                // mfrgfd rowsft, so pCol will point to thf Mbtdh dolumn.
                // until rfsft, bm not surf wf should sft this or not(?)
                // if this is not sft nfxt innfr join won't hbppfn
                // if wf fxpliditly do not sft b sft MbtdhColumn of
                // thf nfw drsIntfrnbl.

                drsIntfrnbl.sftMbtdhColumn(pCol);
                // Add thf mfrgfd rowsft to thf dlbss vbribblf of typf vfdtor.
                drsIntfrnbl.sftMftbDbtb(rsmd);
                vfdRowSftsInJOIN.bdd(dRowsft);
            } //fnd if
        } dbtdh(SQLExdfption sqlf) {
            // %%% Exdfption should not dump hfrf:
            sqlf.printStbdkTrbdf();
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.initfrror").toString() + sqlf);
        } dbtdh (Exdfption f) {
            f.printStbdkTrbdf();
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("joinrowsftimpl.gfnfridfrr").toString() + f);
        }
    }

    /**
     * Rfturn b SQL-likf dfsdription of thf <dodf>WHERE</dodf> dlbusf bfing usfd
     * in b <dodf>JoinRowSft</dodf> objfdt instbndf. An implfmfntbtion dbn dfsdribf
     * thf <dodf>WHERE</dodf> dlbusf of thf SQL <dodf>JOIN</dodf> by supplying b <dodf>SQL</dodf>
     * strings dfsdription of <dodf>JOIN</dodf> or providf b tfxtubl dfsdription to bssist
     * bpplidbtions using b <dodf>JoinRowSft</dodf>.
     *
     * @rfturn whfrfClbusf b tfxtubl or SQL dfsdripition of thf logidbl
     * <dodf>WHERE</dodf> dlubsf usfd in thf <dodf>JoinRowSft</dodf> instbndf
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting b rfprfsfntbtion
     * of thf <dodf>WHERE</dodf> dlbusf.
     */
    publid String gftWhfrfClbusf() throws SQLExdfption {

       String strWhfrfClbusf = "Sflfdt ";
       String whfrfClbusf;
       String tbbNbmf= "";
       String strTbbNbmf = "";
       int sz,dols;
       int j;
       CbdhfdRowSftImpl drs;

       // gft bll thf dolumn(s) nbmfs from fbdh rowsft.
       // bppfnd thfm with thfir tbblfnbmfs i.f. tbblfNbmf.dolumnNbmf
       // Sflfdt tbblfNbmf1.dolumnNbmf1,..., tbblfNbmfX.dolumnNbmfY
       // from tbblfNbmf1,...tbblfNbmfX whfrf
       // tbblfNbmf1.(rowsft1.gftMbtdhColumnNbmf()) ==
       // tbblfNbmf2.(rowsft2.gftMbtdhColumnNbmf()) + "bnd" +
       // tbblfNbmfX.(rowsftX.gftMbtdhColumnNbmf()) ==
       // tbblfNbmfZ.(rowsftZ.gftMbtdhColumnNbmf()));

       sz = vfdRowSftsInJOIN.sizf();
       for(int i=0;i<sz; i++) {
          drs = vfdRowSftsInJOIN.gft(i);
          dols = drs.gftMftbDbtb().gftColumnCount();
          tbbNbmf = tbbNbmf.dondbt(drs.gftTbblfNbmf());
          strTbbNbmf = strTbbNbmf.dondbt(tbbNbmf+", ");
          j = 1;
          whilf(j<dols) {

            strWhfrfClbusf = strWhfrfClbusf.dondbt
                (tbbNbmf+"."+drs.gftMftbDbtb().gftColumnNbmf(j++));
            strWhfrfClbusf = strWhfrfClbusf.dondbt(", ");
          } //fnd whilf
        } //fnd for


        // now rfmovf thf lbst ","
        strWhfrfClbusf = strWhfrfClbusf.substring
             (0, strWhfrfClbusf.lbstIndfxOf(','));

        // Add from dlbusf
        strWhfrfClbusf = strWhfrfClbusf.dondbt(" from ");

        // Add thf tbblf nbmfs.
        strWhfrfClbusf = strWhfrfClbusf.dondbt(strTbbNbmf);

        //Rfmovf thf lbst ","
        strWhfrfClbusf = strWhfrfClbusf.substring
             (0, strWhfrfClbusf.lbstIndfxOf(','));

        // Add thf whfrf dlbusf
        strWhfrfClbusf = strWhfrfClbusf.dondbt(" whfrf ");

        // Gft thf mbtdh dolumns
        // rowsft1.gftMbtdhColumnNbmf() == rowsft2.gftMbtdhColumnNbmf()
         for(int i=0;i<sz; i++) {
             strWhfrfClbusf = strWhfrfClbusf.dondbt(
               vfdRowSftsInJOIN.gft(i).gftMbtdhColumnNbmfs()[0]);
             if(i%2!=0) {
               strWhfrfClbusf = strWhfrfClbusf.dondbt("=");
             }  flsf {
               strWhfrfClbusf = strWhfrfClbusf.dondbt(" bnd");
             }
          strWhfrfClbusf = strWhfrfClbusf.dondbt(" ");
         }

        rfturn strWhfrfClbusf;
    }


    /**
     * Movfs thf dursor down onf row from its durrfnt position bnd
     * rfturns <dodf>truf</dodf> if thf nfw dursor position is b
     * vblid row.
     * Thf dursor for b nfw <dodf>RfsultSft</dodf> objfdt is initiblly
     * positionfd bfforf thf first row. Thf first dbll to thf mfthod
     * <dodf>nfxt</dodf> movfs thf dursor to thf first row, mbking it
     * thf durrfnt row; thf sfdond dbll mbkfs thf sfdond row thf
     * durrfnt row, bnd so on.
     *
     * <P>If bn input strfbm from thf prfvious row is opfn, it is
     * impliditly dlosfd. Thf <dodf>RfsultSft</dodf> objfdt's wbrning
     * dhbin is dlfbrfd whfn b nfw row is rfbd.
     *
     * @rfturn <dodf>truf</dodf> if thf nfw durrfnt row is vblid;
     *         <dodf>fblsf</dodf> if thfrf brf no morf rows
     * @throws SQLExdfption if bn frror oddurs or
     *            thf dursor is not positionfd in thf rowsft, bfforf
     *            thf first row, or bftfr thf lbst row
     */
    publid boolfbn nfxt() throws SQLExdfption {
        rfturn drsIntfrnbl.nfxt();
    }


    /**
     * Rflfbsfs thf durrfnt dontfnts of this rowsft, disdbrding  outstbnding
     * updbtfs.  Thf rowsft dontbins no rows bftfr thf mfthod
     * <dodf>rflfbsf</dodf> is dbllfd. This mfthod sfnds b
     * <dodf>RowSftChbngfdEvfnt</dodf> objfdt to bll rfgistfrfd listfnfrs prior
     * to rfturning.
     *
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void dlosf() throws SQLExdfption {
        drsIntfrnbl.dlosf();
    }


    /**
     * Rfports whfthfr thf lbst dolumn rfbd wbs SQL <dodf>NULL</dodf>.
     * Notf thbt you must first dbll thf mfthod <dodf>gftXXX</dodf>
     * on b dolumn to try to rfbd its vbluf bnd thfn dbll thf mfthod
     * <dodf>wbsNull</dodf> to dftfrminf whfthfr thf vbluf wbs
     * SQL <dodf>NULL</dodf>.
     *
     * @rfturn <dodf>truf</dodf> if thf vbluf in thf lbst dolumn rfbd
     *         wbs SQL <dodf>NULL</dodf>; <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn wbsNull() throws SQLExdfption {
        rfturn drsIntfrnbl.wbsNull();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>String</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds or
     *            thf dursor is not on b vblid row
     */
    publid String gftString(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftString(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>boolfbn</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>fblsf</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid boolfbn gftBoolfbn(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBoolfbn(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>bytf</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid bytf gftBytf(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBytf(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
             * <dodf>short</dodf> vbluf.
             *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid short gftShort(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftShort(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>short</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid int gftInt(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftInt(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>long</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid long gftLong(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftLong(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>flobt</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid flobt gftFlobt(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftFlobt(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>doublf</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid doublf gftDoublf(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftDoublf(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod is dfprfdbtfd; usf thf vfrsion of <dodf>gftBigDfdimbl</dodf>
     * thbt dofs not tbkf b sdblf pbrbmftfr bnd rfturns b vbluf with full
     * prfdision.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point in thf
     *        vbluf rfturnfd
     * @rfturn thf dolumn vbluf with thf spfdififd numbfr of digits to thf right
     *         of thf dfdimbl point; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid BigDfdimbl gftBigDfdimbl(int dolumnIndfx, int sdblf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBigDfdimbl(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>bytf brrby</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or thf thf vbluf to bf
     *            rftrifvfd is not binbry
     */
    publid bytf[] gftBytfs(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBytfs(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Dbtf</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid jbvb.sql.Dbtf gftDbtf(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftDbtf(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timf</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid jbvb.sql.Timf gftTimf(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftTimf(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftTimfstbmp(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid jbvb.io.InputStrfbm gftAsdiiStrfbm(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftAsdiiStrfbm(dolumnIndfx);
    }

    /**
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of Unidodf dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf LONGVARCHAR vblufs.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from thf dbtbbbsf formbt into Unidodf.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b gft mfthod impliditly dlosfs thf strfbm. . Also, b
     * strfbm mby rfturn 0 for bvbilbblf() whfthfr thfrf is dbtb
     * bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of two bytf Unidodf dhbrbdtfrs.  If thf vbluf is SQL NULL
     * thfn thf rfsult is null.
     * @throws SQLExdfption if bn frror oddurs
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid jbvb.io.InputStrfbm gftUnidodfStrfbm(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftUnidodfStrfbm(dolumnIndfx);
    }

    /**
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of unintfrprftfd bytfs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf LONGVARBINARY vblufs.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b gft mfthod impliditly dlosfs thf strfbm. Also, b
     * strfbm mby rfturn 0 for bvbilbblf() whfthfr thfrf is dbtb
     * bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of unintfrprftfd bytfs.  If thf vbluf is SQL NULL
     * thfn thf rfsult is null.
     * @throws SQLExdfption if bn frror oddurs
     */
    publid jbvb.io.InputStrfbm gftBinbryStrfbm(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBinbryStrfbm(dolumnIndfx);
    }

    // ColumnNbmf mfthods

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>String</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid String gftString(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftString(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>boolfbn</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>fblsf</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid boolfbn gftBoolfbn(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBoolfbn(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>bytf</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid bytf gftBytf(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBytf(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>short</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid short gftShort(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftShort(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs bn <dodf>int</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid int gftInt(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftInt(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>long</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid long gftLong(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftLong(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>flobt</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid flobt gftFlobt(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftFlobt(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>doublf</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid doublf gftDoublf(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftDoublf(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     * @dfprfdbtfd usf thf mfthod <dodf>gftBigDfdimbl(String dolumnNbmf)</dodf>
     *             instfbd
     */
    @Dfprfdbtfd
    publid BigDfdimbl gftBigDfdimbl(String dolumnNbmf, int sdblf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBigDfdimbl(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b bytf brrby.
     * Thf bytfs rfprfsfnt thf rbw vblufs rfturnfd by thf drivfr.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid bytf[] gftBytfs(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBytfs(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.sql.Dbtf</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid jbvb.sql.Dbtf gftDbtf(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftDbtf(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.sql.Timf</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid jbvb.sql.Timf gftTimf(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftTimf(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftTimfstbmp(dolumnNbmf);
    }

    /**
     * This mfthod is not supportfd, bnd it will throw bn
     * <dodf>UnsupportfdOpfrbtionExdfption</dodf> if it is dbllfd.
     * <P>
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of ASCII dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf LONGVARCHAR vblufs.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from thf dbtbbbsf formbt into ASCII formbt.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of onf-bytf ASCII dhbrbdtfrs.  If thf vbluf is SQL
     *         <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws UnsupportfdOpfrbtionExdfption if this mfthod is dbllfd
     */
    publid jbvb.io.InputStrfbm gftAsdiiStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftAsdiiStrfbm(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of Unidodf dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARCHAR</dodf> vblufs.
     * Thf JDBC drivfr will do bny nfdfssbry donvfrsion from thf dbtbbbsf
     * formbt into Unidodf.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of two-bytf Unidodf dhbrbdtfrs.  If thf vbluf is
     *         SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     * @dfprfdbtfd usf thf mfthod <dodf>gftChbrbdtfrStrfbm</dodf> instfbd
     */
    @Dfprfdbtfd
    publid jbvb.io.InputStrfbm gftUnidodfStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftUnidodfStrfbm(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of unintfrprftfd bytfs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARBINARY</dodf> vblufs.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b gft mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of unintfrprftfd bytfs.  If thf vbluf is SQL
     *         <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid jbvb.io.InputStrfbm gftBinbryStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBinbryStrfbm(dolumnNbmf);
    }

    /* Thf first wbrning rfportfd by dblls on this <dodf>JoinRowSftImpl</dodf>
     * objfdt is rfturnfd. Subsfqufnt <dodf>JoinRowSftImpl</dodf> wbrnings will
     * bf dhbinfd to this <dodf>SQLWbrning</dodf>.
     *
     * <P>Thf wbrning dhbin is butombtidblly dlfbrfd fbdh timf b nfw
     * row is rfbd.
     *
     * <P><B>Notf:</B> This wbrning dhbin only dovfrs wbrnings dbusfd
     * by <dodf>RfsultSft</dodf> mfthods.  Any wbrning dbusfd by stbtfmfnt
     * mfthods (sudh bs rfbding OUT pbrbmftfrs) will bf dhbinfd on thf
     * <dodf>Stbtfmfnt</dodf> objfdt.
     *
     * @rfturn thf first SQLWbrning or null
     * @throws UnsupportfdOpfrbtionExdfption if this mfthod is dbllfd
     */
    publid SQLWbrning gftWbrnings() {
        rfturn drsIntfrnbl.gftWbrnings();
    }

    /**
     * Throws bn <dodf>UnsupportfdOpfrbtionExdfption</dodf> if dbllfd.
     * <P>
     * Aftfr b dbll to this mfthod, thf <dodf>gftWbrnings</dodf> mfthod
     * rfturns <dodf>null</dodf> until b nfw wbrning is rfportfd for this
     * <dodf>JoinRowSftImpl</dodf> objfdt.
     *
     * @throws UnsupportfdOpfrbtionExdfption if this mfthod is dbllfd
     */
     publid void dlfbrWbrnings() {
        drsIntfrnbl.dlfbrWbrnings();
    }

    /**
     * Rftrifvfs thf nbmf of thf SQL dursor usfd by this
     * <dodf>JoinRowSftImpl</dodf> objfdt.
     *
     * <P>In SQL, b rfsult tbblf is rftrifvfd through b dursor thbt is
     * nbmfd. Thf durrfnt row of b rfsult dbn bf updbtfd or dflftfd
     * using b positionfd updbtf/dflftf stbtfmfnt thbt rfffrfndfs thf
     * dursor nbmf. To insurf thbt thf dursor hbs thf propfr isolbtion
     * lfvfl to support bn updbtf opfrbtion, thf dursor's <dodf>SELECT</dodf>
     * stbtfmfnt should bf of thf form 'sflfdt for updbtf'. If thf 'for updbtf'
     * dlbusf is omittfd, positionfd updbtfs mby fbil.
     *
     * <P>JDBC supports this SQL ffbturf by providing thf nbmf of thf
     * SQL dursor usfd by b <dodf>RfsultSft</dodf> objfdt. Thf durrfnt row
     * of b rfsult sft is blso thf durrfnt row of this SQL dursor.
     *
     * <P><B>Notf:</B> If positionfd updbtfs brf not supportfd, bn
     * <dodf>SQLExdfption</dodf> is thrown.
     *
     * @rfturn thf SQL dursor nbmf for this <dodf>JoinRowSftImpl</dodf> objfdt's
     *         dursor
     * @throws SQLExdfption if bn frror oddurs
     */
    publid String gftCursorNbmf() throws SQLExdfption {
        rfturn drsIntfrnbl.gftCursorNbmf();
    }

    /**
     * Rftrifvfs thf <dodf>RfsultSftMftbDbtb</dodf> objfdt thbt dontbins
     * informbtion bbout this <dodf>CbdhfdRowsSft</dodf> objfdt. Thf
     * informbtion indludfs thf numbfr of dolumns, thf dbtb typf for fbdh
     * dolumn, bnd othfr propfrtifs for fbdh dolumn.
     *
     * @rfturn thf <dodf>RfsultSftMftbDbtb</dodf> objfdt thbt dfsdribfs this
     *         <dodf>JoinRowSftImpl</dodf> objfdt's dolumns
     * @throws SQLExdfption if bn frror oddurs
     */
    publid RfsultSftMftbDbtb gftMftbDbtb() throws SQLExdfption {
        rfturn drsIntfrnbl.gftMftbDbtb();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs bn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * Thf typf of thf <dodf>Objfdt</dodf> will bf thf dffbult
     * Jbvb objfdt typf dorrfsponding to thf dolumn's SQL typf,
     * following thf mbpping for built-in typfs spfdififd in thf JDBC
     * spfdifidbtion.
     * <P>
     * This mfthod mby blso bf usfd to rfbd dbtbtbbbsf-spfdifid
     * bbstrbdt dbtb typfs.
     * <P>
     * This implfmfntbtion of thf mfthod <dodf>gftObjfdt</dodf> fxtfnds its
     * bfhbvior so thbt it gfts thf bttributfs of bn SQL strudturfd typf bs
     * bs bn brrby of <dodf>Objfdt</dodf> vblufs.  This mfthod blso dustom
     * mbps SQL usfr-dffinfd typfs to dlbssfs in thf Jbvb progrbmming lbngubgf.
     * Whfn thf spfdififd dolumn dontbins
     * b strudturfd or distindt vbluf, thf bfhbvior of this mfthod is bs
     * if it wfrf b dbll to thf mfthod <dodf>gftObjfdt(dolumnIndfx,
     * this.gftStbtfmfnt().gftConnfdtion().gftTypfMbp())</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b <dodf>jbvb.lbng.Objfdt</dodf> holding thf dolumn vbluf;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or thfrf is b problfm gftting
     *            thf <dodf>Clbss</dodf> objfdt for b dustom mbpping
     * @sindf 1.2
     */
    publid Objfdt gftObjfdt(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftObjfdt(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs bn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * Thf typf of thf <dodf>Objfdt</dodf> will bf thf dffbult
     * Jbvb objfdt typf dorrfsponding to thf dolumn's SQL typf,
     * following thf mbpping for built-in typfs spfdififd in thf JDBC
     * spfdifidbtion.
     * <P>
     * This mfthod mby blso bf usfd to rfbd dbtbtbbbsf-spfdifid
     * bbstrbdt dbtb typfs.
     * <P>
     * This implfmfntbtion of thf mfthod <dodf>gftObjfdt</dodf> fxtfnds its
     * bfhbvior so thbt it gfts thf bttributfs of bn SQL strudturfd typf bs
     * bs bn brrby of <dodf>Objfdt</dodf> vblufs.  This mfthod blso dustom
     * mbps SQL usfr-dffinfd typfs to dlbssfs
     * in thf Jbvb progrbmming lbngubgf. Whfn thf spfdififd dolumn dontbins
     * b strudturfd or distindt vbluf, thf bfhbvior of this mfthod is bs
     * if it wfrf b dbll to thf mfthod <dodf>gftObjfdt(dolumnIndfx,
     * this.gftStbtfmfnt().gftConnfdtion().gftTypfMbp())</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *         is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *         bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm mbp b <dodf>jbvb.util.Mbp</dodf> objfdt showing thf mbpping
     *         from SQL typf nbmfs to dlbssfs in thf Jbvb progrbmming
     *         lbngubgf
     * @rfturn b <dodf>jbvb.lbng.Objfdt</dodf> holding thf dolumn vbluf;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is
     *         <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh
     *         onf of this rowsft's dolumn nbmfs, (2) thf dursor is not
     *         on b vblid row, or (3) thfrf is b problfm gftting
     *         thf <dodf>Clbss</dodf> objfdt for b dustom mbpping
     */
    publid Objfdt gftObjfdt(int dolumnIndfx,
                            jbvb.util.Mbp<String,Clbss<?>> mbp)
    throws SQLExdfption {
        rfturn drsIntfrnbl.gftObjfdt(dolumnIndfx, mbp);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs bn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * Thf typf of thf <dodf>Objfdt</dodf> will bf thf dffbult
     * Jbvb objfdt typf dorrfsponding to thf dolumn's SQL typf,
     * following thf mbpping for built-in typfs spfdififd in thf JDBC
     * spfdifidbtion.
     * <P>
     * This mfthod mby blso bf usfd to rfbd dbtbtbbbsf-spfdifid
     * bbstrbdt dbtb typfs.
     * <P>
     * This implfmfntbtion of thf mfthod <dodf>gftObjfdt</dodf> fxtfnds its
     * bfhbvior so thbt it gfts thf bttributfs of bn SQL strudturfd typf bs
     * bs bn brrby of <dodf>Objfdt</dodf> vblufs.  This mfthod blso dustom
     * mbps SQL usfr-dffinfd typfs to dlbssfs
     * in thf Jbvb progrbmming lbngubgf. Whfn thf spfdififd dolumn dontbins
     * b strudturfd or distindt vbluf, thf bfhbvior of this mfthod is bs
     * if it wfrf b dbll to thf mfthod <dodf>gftObjfdt(dolumnIndfx,
     * this.gftStbtfmfnt().gftConnfdtion().gftTypfMbp())</dodf>.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>jbvb.lbng.Objfdt</dodf> holding thf dolumn vbluf;
     *        if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is
     *        <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh
     *        onf of this rowsft's dolumn nbmfs, (2) thf dursor is not
     *        on b vblid row, or (3) thfrf is b problfm gftting
     *        thf <dodf>Clbss</dodf> objfdt for b dustom mbpping
     */
    publid Objfdt gftObjfdt(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftObjfdt(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>JoinRowSftImpl</dodf> objfdt bs bn <dodf>Objfdt</dodf> in
     * thf Jbvb progrbmming lbnugbgf, using thf givfn
     * <dodf>jbvb.util.Mbp</dodf> objfdt to dustom mbp thf vbluf if
     * bppropribtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm mbp b <dodf>jbvb.util.Mbp</dodf> objfdt showing thf mbpping
     *            from SQL typf nbmfs to dlbssfs in thf Jbvb progrbmming
     *            lbngubgf
     * @rfturn bn <dodf>Objfdt</dodf> rfprfsfnting thf SQL vbluf
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds or
     *            thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row
     */
    publid Objfdt gftObjfdt(String dolumnNbmf,
                            jbvb.util.Mbp<String,Clbss<?>> mbp)
        throws SQLExdfption {
        rfturn drsIntfrnbl.gftObjfdt(dolumnNbmf, mbp);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b Jbvb dhbrbdtfr strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b <dodf>jbvb.io.Rfbdfr</dodf> objfdt.  If thf vbluf is
     *         SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or thfrf is b typf mismbtdh
     */
    publid jbvb.io.Rfbdfr gftChbrbdtfrStrfbm(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftChbrbdtfrStrfbm(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>JoinRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of two-bytf Unidodf dhbrbdtfrs.  If thf vbluf is
     *         SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or thfrf is b typf mismbtdh
     */
    publid jbvb.io.Rfbdfr gftChbrbdtfrStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftChbrbdtfrStrfbm(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b <dodf>jbvb.mbth.BigDfdimbl</dodf> vbluf with full prfdision;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid BigDfdimbl gftBigDfdimbl(int dolumnIndfx) throws SQLExdfption {
       rfturn drsIntfrnbl.gftBigDfdimbl(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>jbvb.mbth.BigDfdimbl</dodf> vbluf with full prfdision;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid BigDfdimbl gftBigDfdimbl(String dolumnNbmf) throws SQLExdfption {
       rfturn drsIntfrnbl.gftBigDfdimbl(dolumnNbmf);
    }

    /**
     * Rfturns thf numbfr of rows in this <dodf>JoinRowSftImpl</dodf> objfdt.
     *
     * @rfturn numbfr of rows in thf rowsft
     */
    publid int sizf() {
        rfturn drsIntfrnbl.sizf();
    }

    /**
     * Indidbtfs whfthfr thf dursor is bfforf thf first row in this
     * <dodf>JoinRowSftImpl</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is bfforf thf first row;
     *         <dodf>fblsf</dodf> othfrwisf or if thf rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isBfforfFirst() throws SQLExdfption {
        rfturn drsIntfrnbl.isBfforfFirst();
    }

    /**
     * Indidbtfs whfthfr thf dursor is bftfr thf lbst row in this
     * <dodf>JoinRowSftImpl</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is bftfr thf lbst row;
     *         <dodf>fblsf</dodf> othfrwisf or if thf rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isAftfrLbst() throws SQLExdfption {
        rfturn drsIntfrnbl.isAftfrLbst();
    }

    /**
     * Indidbtfs whfthfr thf dursor is on thf first row in this
     * <dodf>JoinRowSftImpl</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf first row;
     *         <dodf>fblsf</dodf> othfrwisf or if thf rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isFirst() throws SQLExdfption {
        rfturn drsIntfrnbl.isFirst();
    }

    /**
     * Indidbtfs whfthfr thf dursor is on thf lbst row in this
     * <dodf>JoinRowSftImpl</dodf> objfdt.
     * <P>
     * Notf: Cblling thf mfthod <dodf>isLbst</dodf> mby bf fxpfnsivf
     * bfdbusf thf JDBC drivfr might nffd to fftdh bhfbd onf row in ordfr
     * to dftfrminf whfthfr thf durrfnt row is thf lbst row in this rowsft.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf lbst row;
     *         <dodf>fblsf</dodf> othfrwisf or if this rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isLbst() throws SQLExdfption {
        rfturn drsIntfrnbl.isLbst();
    }

    /**
     * Movfs this <dodf>JoinRowSftImpl</dodf> objfdt's dursor to thf front of
     * thf rowsft, just bfforf thf first row. This mfthod hbs no ffffdt if
     * this rowsft dontbins no rows.
     *
     * @throws SQLExdfption if bn frror oddurs or thf typf of this rowsft
     *            is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid void bfforfFirst() throws SQLExdfption {
        drsIntfrnbl.bfforfFirst();
    }

    /**
     * Movfs this <dodf>JoinRowSftImpl</dodf> objfdt's dursor to thf fnd of
     * thf rowsft, just bftfr thf lbst row. This mfthod hbs no ffffdt if
     * this rowsft dontbins no rows.
     *
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void bftfrLbst() throws SQLExdfption {
        drsIntfrnbl.bftfrLbst();
    }

    /**
     * Movfs this <dodf>JoinRowSftImpl</dodf> objfdt's dursor to thf first row
     * bnd rfturns <dodf>truf</dodf> if thf opfrbtion wbs suddfssful.  This
     * mfthod blso notififs rfgistfrfd listfnfrs thbt thf dursor hbs movfd.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     *         <dodf>fblsf</dodf> othfrwisf or if thfrf brf no rows in this
     *         <dodf>JoinRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if thf typf of this rowsft
     *            is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn first() throws SQLExdfption {
        rfturn drsIntfrnbl.first();
    }


    /**
     * Movfs this <dodf>JoinRowSftImpl</dodf> objfdt's dursor to thf lbst row
     * bnd rfturns <dodf>truf</dodf> if thf opfrbtion wbs suddfssful.  This
     * mfthod blso notififs rfgistfrfd listfnfrs thbt thf dursor hbs movfd.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     *         <dodf>fblsf</dodf> othfrwisf or if thfrf brf no rows in this
     *         <dodf>JoinRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if thf typf of this rowsft
     *            is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn lbst() throws SQLExdfption {
        rfturn drsIntfrnbl.lbst();
    }

    /**
     * Rfturns thf numbfr of thf durrfnt row in this <dodf>JoinRowSftImpl</dodf>
     * objfdt. Thf first row is numbfr 1, thf sfdond numbfr 2, bnd so on.
     *
     * @rfturn thf numbfr of thf durrfnt row;  <dodf>0</dodf> if thfrf is no
     *         durrfnt row
     * @throws SQLExdfption if bn frror oddurs
     */
    publid int gftRow() throws SQLExdfption {
        rfturn drsIntfrnbl.gftRow();
    }

    /**
     * Movfs this <dodf>JoinRowSftImpl</dodf> objfdt's dursor to thf row numbfr
     * spfdififd.
     *
     * <p>If thf numbfr is positivf, thf dursor movfs to bn bbsolutf row with
     * rfspfdt to thf bfginning of thf rowsft.  Thf first row is row 1, thf sfdond
     * is row 2, bnd so on.  For fxbmplf, thf following dommbnd, in whidh
     * <dodf>drs</dodf> is b <dodf>JoinRowSftImpl</dodf> objfdt, movfs thf dursor
     * to thf fourth row, stbrting from thf bfginning of thf rowsft.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(4);
     *
     * </dodf> </PRE>
     * <P>
     * If thf numbfr is nfgbtivf, thf dursor movfs to bn bbsolutf row position
     * with rfspfdt to thf fnd of thf rowsft.  For fxbmplf, dblling
     * <dodf>bbsolutf(-1)</dodf> positions thf dursor on thf lbst row,
     * <dodf>bbsolutf(-2)</dodf> movfs it on thf nfxt-to-lbst row, bnd so on.
     * If thf <dodf>JoinRowSftImpl</dodf> objfdt <dodf>drs</dodf> hbs fivf rows,
     * thf following dommbnd movfs thf dursor to thf fourth-to-lbst row, whidh
     * in thf dbsf of b  rowsft with fivf rows, is blso thf sfdond row, dounting
     * from thf bfginning.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(-4);
     *
     * </dodf> </PRE>
     *
     * If thf numbfr spfdififd is lbrgfr thbn thf numbfr of rows, thf dursor
     * will movf to thf position bftfr thf lbst row. If thf numbfr spfdififd
     * would movf thf dursor onf or morf rows bfforf thf first row, thf dursor
     * movfs to thf position bfforf thf first row.
     * <P>
     * Notf: Cblling <dodf>bbsolutf(1)</dodf> is thf sbmf bs dblling thf
     * mfthod <dodf>first()</dodf>.  Cblling <dodf>bbsolutf(-1)</dodf> is thf
     * sbmf bs dblling <dodf>lbst()</dodf>.
     *
     * @pbrbm row b positivf numbfr to indidbtf thf row, stbrting row numbfring from
     *        thf first row, whidh is <dodf>1</dodf>; b nfgbtivf numbfr to indidbtf
     *        thf row, stbrting row numbfring from thf lbst row, whidh is
     *        <dodf>-1</dodf>; must not bf <dodf>0</dodf>
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf rowsft; <dodf>fblsf</dodf>
     *         othfrwisf
     * @throws SQLExdfption if thf givfn dursor position is <dodf>0</dodf> or thf
     *            typf of this rowsft is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn bbsolutf(int row) throws SQLExdfption {
        rfturn drsIntfrnbl.bbsolutf(row);
    }

    /**
     * Movfs thf dursor thf spfdififd numbfr of rows from thf durrfnt
     * position, with b positivf numbfr moving it forwbrd bnd b
     * nfgbtivf numbfr moving it bbdkwbrd.
     * <P>
     * If thf numbfr is positivf, thf dursor movfs thf spfdififd numbfr of
     * rows towbrd thf fnd of thf rowsft, stbrting bt thf durrfnt row.
     * For fxbmplf, thf following dommbnd, in whidh
     * <dodf>drs</dodf> is b <dodf>JoinRowSftImpl</dodf> objfdt with 100 rows,
     * movfs thf dursor forwbrd four rows from thf durrfnt row.  If thf
     * durrfnt row is 50, thf dursor would movf to row 54.
     * <PRE><dodf>
     *
     *    drs.rflbtivf(4);
     *
     * </dodf> </PRE>
     * <P>
     * If thf numbfr is nfgbtivf, thf dursor movfs bbdk towbrd thf bfginning
     * thf spfdififd numbfr of rows, stbrting bt thf durrfnt row.
     * For fxbmplf, dblling thf mfthod
     * <dodf>bbsolutf(-1)</dodf> positions thf dursor on thf lbst row,
     * <dodf>bbsolutf(-2)</dodf> movfs it on thf nfxt-to-lbst row, bnd so on.
     * If thf <dodf>JoinRowSftImpl</dodf> objfdt <dodf>drs</dodf> hbs fivf rows,
     * thf following dommbnd movfs thf dursor to thf fourth-to-lbst row, whidh
     * in thf dbsf of b  rowsft with fivf rows, is blso thf sfdond row
     * from thf bfginning.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(-4);
     *
     * </dodf> </PRE>
     *
     * If thf numbfr spfdififd is lbrgfr thbn thf numbfr of rows, thf dursor
     * will movf to thf position bftfr thf lbst row. If thf numbfr spfdififd
     * would movf thf dursor onf or morf rows bfforf thf first row, thf dursor
     * movfs to thf position bfforf thf first row. In both dbsfs, this mfthod
     * throws bn <dodf>SQLExdfption</dodf>.
     * <P>
     * Notf: Cblling <dodf>bbsolutf(1)</dodf> is thf sbmf bs dblling thf
     * mfthod <dodf>first()</dodf>.  Cblling <dodf>bbsolutf(-1)</dodf> is thf
     * sbmf bs dblling <dodf>lbst()</dodf>.  Cblling <dodf>rflbtivf(0)</dodf>
     * is vblid, but it dofs not dhbngf thf dursor position.
     *
     * @pbrbm rows bn <dodf>int</dodf> indidbting thf numbfr of rows to movf
     *             thf dursor, stbrting bt thf durrfnt row; b positivf numbfr
     *             movfs thf dursor forwbrd; b nfgbtivf numbfr movfs thf dursor
     *             bbdkwbrd; must not movf thf dursor pbst thf vblid
     *             rows
     * @rfturn <dodf>truf</dodf> if thf dursor is on b row in this
     *         <dodf>JoinRowSftImpl</dodf> objfdt; <dodf>fblsf</dodf>
     *         othfrwisf
     * @throws SQLExdfption if thfrf brf no rows in this rowsft, thf dursor is
     *         positionfd fithfr bfforf thf first row or bftfr thf lbst row, or
     *         thf rowsft is typf <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn rflbtivf(int rows) throws SQLExdfption {
        rfturn drsIntfrnbl.rflbtivf(rows);
    }

    /**
     * Movfs this <dodf>JoinRowSftImpl</dodf> objfdt's dursor to thf
     * prfvious row bnd rfturns <dodf>truf</dodf> if thf dursor is on
     * b vblid row or <dodf>fblsf</dodf> if it is not.
     * This mfthod blso notififs bll listfnfrs rfgistfrfd with this
     * <dodf>JoinRowSftImpl</dodf> objfdt thbt its dursor hbs movfd.
     * <P>
     * Notf: dblling thf mfthod <dodf>prfvious()</dodf> is not thf sbmf
     * bs dblling thf mfthod <dodf>rflbtivf(-1)</dodf>.  This is truf
     * bfdbusf it is possiblf to dbll <dodf>prfvious()</dodf> from thf insfrt
     * row, from bftfr thf lbst row, or from thf durrfnt row, whfrfbs
     * <dodf>rflbtivf</dodf> mby only bf dbllfd from thf durrfnt row.
     * <P>
     * Thf mfthod <dodf>prfvious</dodf> mby usfd in b <dodf>whilf</dodf>
     * loop to itfrbtf through b rowsft stbrting bftfr thf lbst row
     * bnd moving towbrd thf bfginning. Thf loop fnds whfn <dodf>prfvious</dodf>
     * rfturns <dodf>fblsf</dodf>, mfbning thbt thfrf brf no morf rows.
     * For fxbmplf, thf following dodf frbgmfnt rftrifvfs bll thf dbtb in
     * thf <dodf>JoinRowSftImpl</dodf> objfdt <dodf>drs</dodf>, whidh hbs
     * thrff dolumns.  Notf thbt thf dursor must initiblly bf positionfd
     * bftfr thf lbst row so thbt thf first dbll to thf mfthod
     * <dodf>prfvious</dodf> plbdfs thf dursor on thf lbst linf.
     * <PRE> <dodf>
     *
     *     drs.bftfrLbst();
     *     whilf (prfvious()) {
     *         String nbmf = drs.gftString(1);
     *         int bgf = drs.gftInt(2);
     *         short ssn = drs.gftShort(3);
     *         Systfm.out.println(nbmf + "   " + bgf + "   " + ssn);
     *     }
     *
     * </dodf> </PRE>
     * This mfthod throws bn <dodf>SQLExdfption</dodf> if thf dursor is not
     * on b row in thf rowsft, bfforf thf first row, or bftfr thf lbst row.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     *         <dodf>fblsf</dodf> if it is bfforf thf first row or bftfr thf
     *         lbst row
     * @throws SQLExdfption if thf dursor is not on b vblid position or thf
     *           typf of this rowsft is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn prfvious() throws SQLExdfption {
        rfturn drsIntfrnbl.prfvious();
    }

    /**
     * Rfturns thf indfx of thf dolumn whosf nbmf is <i>dolumnNbmf</i>.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf nbmf of thf
     *        dolumn for whidh thf indfx will bf rfturnfd; thf nbmf must
     *        mbtdh thf SQL nbmf of b dolumn in this <dodf>JoinRowSft</dodf>
     *        objfdt, ignoring dbsf
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of thf
     *         dolumn nbmfs for this <dodf>JoinRowSft</dodf> objfdt
     */
    publid int findColumn(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.findColumn(dolumnNbmf);
    }

    /**
     * Indidbtfs whfthfr thf durrfnt row of this <dodf>JoinRowSftImpl</dodf>
     * objfdt hbs bffn updbtfd.  Thf vbluf rfturnfd
     * dfpfnds on whfthfr this rowsft dbn dftfdt updbtfs: <dodf>fblsf</dodf>
     * will blwbys bf rfturnfd if it dofs not dftfdt updbtfs.
     *
     * @rfturn <dodf>truf</dodf> if thf row hbs bffn visibly updbtfd
     *         by thf ownfr or bnothfr bnd updbtfs brf dftfdtfd;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *            on b vblid row
     *
     * @sff DbtbbbsfMftbDbtb#updbtfsArfDftfdtfd
     */
    publid boolfbn rowUpdbtfd() throws SQLExdfption {
        rfturn drsIntfrnbl.rowUpdbtfd();
    }

    /**
     * Indidbtfs whfthfr thf dfsignbtfd dolumn of thf durrfnt row of
     * this <dodf>JoinRowSftImpl</dodf> objfdt hbs bffn updbtfd. Thf
     * vbluf rfturnfd dfpfnds on whfthfr this rowsft dbn dftdtfd updbtfs:
     * <dodf>fblsf</dodf> will blwbys bf rfturnfd if it dofs not dftfdt updbtfs.
     *
     * @rfturn <dodf>truf</dodf> if thf dolumn updbtfd
     *          <dodf>fblsf</dodf> othfrwsf
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *          on b vblid row
     * @sff DbtbbbsfMftbDbtb#updbtfsArfDftfdtfd
     */
    publid boolfbn dolumnUpdbtfd(int indfxColumn) throws SQLExdfption {
        rfturn drsIntfrnbl.dolumnUpdbtfd(indfxColumn);
    }

    /**
     * Indidbtfs whfthfr thf durrfnt row hbs bffn insfrtfd.  Thf vbluf rfturnfd
     * dfpfnds on whfthfr or not thf rowsft dbn dftfdt visiblf insfrts.
     *
     * @rfturn <dodf>truf</dodf> if b row hbs bffn insfrtfd bnd insfrts brf dftfdtfd;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *            not on b vblid row
     *
     * @sff DbtbbbsfMftbDbtb#insfrtsArfDftfdtfd
     */
    publid boolfbn rowInsfrtfd() throws SQLExdfption {
        rfturn drsIntfrnbl.rowInsfrtfd();
    }

    /**
     * Indidbtfs whfthfr thf durrfnt row hbs bffn dflftfd.  A dflftfd row
     * mby lfbvf b visiblf "holf" in b rowsft.  This mfthod dbn bf usfd to
     * dftfdt sudh holfs if thf rowsft dbn dftfdt dflftions. This mfthod
     * will blwbys rfturn <dodf>fblsf</dodf> if this rowsft dbnnot dftfdt
     * dflftions.
     *
     * @rfturn <dodf>truf</dodf> if (1)thf durrfnt row is blbnk, indidbting thbt
     *         thf row hbs bffn dflftfd, bnd (2)dflftions brf dftfdtfd;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if thf dursor is on b vblid row in this rowsft
     * @sff DbtbbbsfMftbDbtb#dflftfsArfDftfdtfd
     */
    publid boolfbn rowDflftfd() throws SQLExdfption {
        rfturn drsIntfrnbl.rowDflftfd();
    }

    /**
     * Sfts thf dfsignbtfd nullbblf dolumn in thf durrfnt row or thf
     * insfrt row of this <dodf>JoinRowSftImpl</dodf> objfdt with
     * <dodf>null</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft; howfvfr, bnothfr mfthod must bf dbllfd to domplftf
     * thf updbtf prodfss. If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to mbrk thf row bs updbtfd
     * bnd to notify listfnfrs thbt thf row hbs dhbngfd.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd to insfrt thf nfw row into this rowsft bnd to notify
     * listfnfrs thbt b row hbs dhbngfd.
     * <P>
     * In ordfr to propbgbtf updbtfs in this rowsft to thf undfrlying
     * dbtb sourdf, bn bpplidbtion must dbll thf mfthod bddfptChbngfs
     * bftfr it dblls fithfr <dodf>updbtfRow</dodf> or <dodf>insfrtRow</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfNull(int dolumnIndfx) throws SQLExdfption {
        drsIntfrnbl.updbtfNull(dolumnIndfx);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>boolfbn</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBoolfbn(int dolumnIndfx, boolfbn x) throws SQLExdfption {
        drsIntfrnbl.updbtfBoolfbn(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytf(int dolumnIndfx, bytf x) throws SQLExdfption {
        drsIntfrnbl.updbtfBytf(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>short</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfShort(int dolumnIndfx, short x) throws SQLExdfption {
        drsIntfrnbl.updbtfShort(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>int</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfInt(int dolumnIndfx, int x) throws SQLExdfption {
        drsIntfrnbl.updbtfInt(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>long</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfLong(int dolumnIndfx, long x) throws SQLExdfption {
        drsIntfrnbl.updbtfLong(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>flobt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfFlobt(int dolumnIndfx, flobt x) throws SQLExdfption {
        drsIntfrnbl.updbtfFlobt(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDoublf(int dolumnIndfx, doublf x) throws SQLExdfption {
        drsIntfrnbl.updbtfDoublf(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBigDfdimbl(int dolumnIndfx, BigDfdimbl x) throws SQLExdfption {
        drsIntfrnbl.updbtfBigDfdimbl(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>String</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to mbrk thf row bs updbtfd.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd to insfrt thf nfw row into this rowsft bnd mbrk it
     * bs insfrtfd. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     * <P>
     * Thf mfthod <dodf>bddfptChbngfs</dodf> must bf dbllfd if thf
     * updbtfd vblufs brf to bf writtfn bbdk to thf undfrlying dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfString(int dolumnIndfx, String x) throws SQLExdfption {
        drsIntfrnbl.updbtfString(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> brrby.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytfs(int dolumnIndfx, bytf x[]) throws SQLExdfption {
        drsIntfrnbl.updbtfBytfs(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Dbtf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>DATE</dodf> or <dodf>TIMESTAMP</dodf>, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDbtf(int dolumnIndfx, jbvb.sql.Dbtf x) throws SQLExdfption {
        drsIntfrnbl.updbtfDbtf(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>TIME</dodf> or <dodf>TIMESTAMP</dodf>, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimf(int dolumnIndfx, jbvb.sql.Timf x) throws SQLExdfption {
        drsIntfrnbl.updbtfTimf(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timfstbmp</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>DATE</dodf>, <dodf>TIME</dodf>, or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimfstbmp(int dolumnIndfx, jbvb.sql.Timfstbmp x) throws SQLExdfption {
        drsIntfrnbl.updbtfTimfstbmp(dolumnIndfx, x);
    }

    /*
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * ASCII strfbm vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf numbfr of onf-bytf ASCII dhbrbdtfrs in thf strfbm
     * @throws UnsupportfdOpfrbtionExdfption if this mfthod is invokfd
     */
    publid void updbtfAsdiiStrfbm(int dolumnIndfx, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        drsIntfrnbl.updbtfAsdiiStrfbm(dolumnIndfx, x, lfngth);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.InputStrfbm</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>, or
     *          <dodf>LONGVARBINARY</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in bytfs
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf dbtb in thf strfbm is not binbry, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBinbryStrfbm(int dolumnIndfx, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        drsIntfrnbl.updbtfBinbryStrfbm(dolumnIndfx, x, lfngth);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.Rfbdfr</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>,
     *          <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>, <dodf>VARCHAR</dodf>,
     *          or <dodf>LONGVARCHAR</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in dhbrbdtfrs
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf dbtb in thf strfbm is not b binbry or
     *            dhbrbdtfr typf, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfChbrbdtfrStrfbm(int dolumnIndfx, jbvb.io.Rfbdfr x, int lfngth) throws SQLExdfption {
        drsIntfrnbl.updbtfChbrbdtfrStrfbm(dolumnIndfx, x, lfngth);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.  Thf <dodf>sdblf</dodf> pbrbmftfr indidbtfs
     * thf numbfr of digits to thf right of thf dfdimbl point bnd is ignorfd
     * if thf nfw dolumn vbluf is not b typf thbt will bf mbppfd to bn SQL
     * <dodf>DECIMAL</dodf> or <dodf>NUMERIC</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point (for
     *              <dodf>DECIMAL</dodf> bnd <dodf>NUMERIC</dodf> typfs only)
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(int dolumnIndfx, Objfdt x, int sdblf) throws SQLExdfption {
        drsIntfrnbl.updbtfObjfdt(dolumnIndfx, x, sdblf);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(int dolumnIndfx, Objfdt x) throws SQLExdfption {
        drsIntfrnbl.updbtfObjfdt(dolumnIndfx, x);
    }

    // dolumnNbmf updbtfs

    /**
     * Sfts thf dfsignbtfd nullbblf dolumn in thf durrfnt row or thf
     * insfrt row of this <dodf>JoinRowSftImpl</dodf> objfdt with
     * <dodf>null</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfNull(String dolumnNbmf) throws SQLExdfption {
        drsIntfrnbl.updbtfNull(dolumnNbmf);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>boolfbn</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBoolfbn(String dolumnNbmf, boolfbn x) throws SQLExdfption {
        drsIntfrnbl.updbtfBoolfbn(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytf(String dolumnNbmf, bytf x) throws SQLExdfption {
        drsIntfrnbl.updbtfBytf(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>short</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfShort(String dolumnNbmf, short x) throws SQLExdfption {
        drsIntfrnbl.updbtfShort(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>int</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfInt(String dolumnNbmf, int x) throws SQLExdfption {
        drsIntfrnbl.updbtfInt(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>long</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfLong(String dolumnNbmf, long x) throws SQLExdfption {
        drsIntfrnbl.updbtfLong(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>flobt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfFlobt(String dolumnNbmf, flobt x) throws SQLExdfption {
        drsIntfrnbl.updbtfFlobt(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDoublf(String dolumnNbmf, doublf x) throws SQLExdfption {
        drsIntfrnbl.updbtfDoublf(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBigDfdimbl(String dolumnNbmf, BigDfdimbl x) throws SQLExdfption {
        drsIntfrnbl.updbtfBigDfdimbl(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>String</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfString(String dolumnNbmf, String x) throws SQLExdfption {
        drsIntfrnbl.updbtfString(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> brrby.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytfs(String dolumnNbmf, bytf x[]) throws SQLExdfption {
        drsIntfrnbl.updbtfBytfs(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Dbtf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDbtf(String dolumnNbmf, jbvb.sql.Dbtf x) throws SQLExdfption {
        drsIntfrnbl.updbtfDbtf(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimf(String dolumnNbmf, jbvb.sql.Timf x) throws SQLExdfption {
        drsIntfrnbl.updbtfTimf(dolumnNbmf, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timfstbmp</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds or
     *            thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>DATE</dodf>,
     *            <dodf>TIME</dodf>, or <dodf>TIMESTAMP</dodf>, or (4) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimfstbmp(String dolumnNbmf, jbvb.sql.Timfstbmp x) throws SQLExdfption {
        drsIntfrnbl.updbtfTimfstbmp(dolumnNbmf, x);
    }

    /**
     * Unsupportfd; throws bn <dodf>UnsupportfdOpfrbtionExdfption</dodf>
     * if dbllfd.
     * <P>
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * ASCII strfbm vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf numbfr of onf-bytf ASCII dhbrbdtfrs in thf strfbm
     * @throws UnsupportfdOpfrbtionExdfption if this mfthod is invokfd
     */
    publid void updbtfAsdiiStrfbm(String dolumnNbmf, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        drsIntfrnbl.updbtfAsdiiStrfbm(dolumnNbmf, x, lfngth);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.InputStrfbm</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>, or
     *          <dodf>LONGVARBINARY</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in bytfs
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf dbtb
     *            in thf strfbm is not binbry, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBinbryStrfbm(String dolumnNbmf, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        drsIntfrnbl.updbtfBinbryStrfbm(dolumnNbmf, x, lfngth);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.Rfbdfr</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>,
     *          <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>, <dodf>VARCHAR</dodf>,
     *          or <dodf>LONGVARCHAR</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in dhbrbdtfrs
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf dbtb
     *            in thf strfbm is not b binbry or dhbrbdtfr typf, or (4) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfChbrbdtfrStrfbm(String dolumnNbmf, jbvb.io.Rfbdfr x, int lfngth) throws SQLExdfption {
        drsIntfrnbl.updbtfChbrbdtfrStrfbm(dolumnNbmf, x, lfngth);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.  Thf <dodf>sdblf</dodf> pbrbmftfr
     * indidbtfs thf numbfr of digits to thf right of thf dfdimbl point
     * bnd is ignorfd if thf nfw dolumn vbluf is not b typf thbt will bf
     *  mbppfd to bn SQL <dodf>DECIMAL</dodf> or <dodf>NUMERIC</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point (for
     *              <dodf>DECIMAL</dodf> bnd <dodf>NUMERIC</dodf> typfs only)
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds or
     *            thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(String dolumnNbmf, Objfdt x, int sdblf) throws SQLExdfption {
        drsIntfrnbl.updbtfObjfdt(dolumnNbmf, x, sdblf);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(String dolumnNbmf, Objfdt x) throws SQLExdfption {
        drsIntfrnbl.updbtfObjfdt(dolumnNbmf, x);
    }

    /**
     * Insfrts thf dontfnts of this <dodf>JoinRowSftImpl</dodf> objfdt's insfrt
     * row into this rowsft immfdibtfly following thf durrfnt row.
     * If thf durrfnt row is thf
     * position bftfr thf lbst row or bfforf thf first row, thf nfw row will
     * bf insfrtfd bt thf fnd of thf rowsft.  This mfthod blso notififs
     * listfnfrs rfgistfrfd with this rowsft thbt thf row hbs dhbngfd.
     * <P>
     * Thf dursor must bf on thf insfrt row whfn this mfthod is dbllfd.
     *
     * @throws SQLExdfption if (1) thf dursor is not on thf insfrt row,
     *            (2) onf or morf of thf non-nullbblf dolumns in thf insfrt
     *            row hbs not bffn givfn b vbluf, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void insfrtRow() throws SQLExdfption {
        drsIntfrnbl.insfrtRow();
    }

    /**
     * Mbrks thf durrfnt row of this <dodf>JoinRowSftImpl</dodf> objfdt bs
     * updbtfd bnd notififs listfnfrs rfgistfrfd with this rowsft thbt thf
     * row hbs dhbngfd.
     * <P>
     * This mfthod  dbnnot bf dbllfd whfn thf dursor is on thf insfrt row, bnd
     * it should bf dbllfd bfforf thf dursor movfs to bnothfr row.  If it is
     * dbllfd bftfr thf dursor movfs to bnothfr row, this mfthod hbs no ffffdt,
     * bnd thf updbtfs mbdf bfforf thf dursor movfd will bf lost.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row or this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRow() throws SQLExdfption {
        drsIntfrnbl.updbtfRow();
    }

    /**
     * Dflftfs thf durrfnt row from this <dodf>JoinRowSftImpl</dodf> objfdt bnd
     * notififs listfnfrs rfgistfrfd with this rowsft thbt b row hbs dhbngfd.
     * This mfthod dbnnot bf dbllfd whfn thf dursor is on thf insfrt row.
     * <P>
     * This mfthod mbrks thf durrfnt row bs dflftfd, but it dofs not dflftf
     * thf row from thf undfrlying dbtb sourdf.  Thf mfthod
     * <dodf>bddfptChbngfs</dodf> must bf dbllfd to dflftf thf row in
     * thf dbtb sourdf.
     *
     * @throws SQLExdfption if (1) this mfthod is dbllfd whfn thf dursor
     *            is on thf insfrt row, bfforf thf first row, or bftfr thf
     *            lbst row or (2) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void dflftfRow() throws SQLExdfption {
        drsIntfrnbl.dflftfRow();
    }

    /**
     * Sfts thf durrfnt row with its originbl vbluf bnd mbrks thf row bs
     * not updbtfd, thus undoing bny dhbngfs mbdf to thf row sindf thf
     * lbst dbll to thf mfthods <dodf>updbtfRow</dodf> or <dodf>dflftfRow</dodf>.
     * This mfthod should bf dbllfd only whfn thf dursor is on b row in
     * this rowsft.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row, bfforf thf
     *            first row, or bftfr thf lbst row
     */
    publid void rffrfshRow() throws SQLExdfption {
        drsIntfrnbl.rffrfshRow();
    }

    /**
     * Rolls bbdk bny updbtfs mbdf to thf durrfnt row of this
     * <dodf>JoinRowSftImpl</dodf> objfdt bnd notififs listfnfrs thbt
     * b row hbs dhbngfd.  To hbvf bn ffffdt, this mfthod
     * must bf dbllfd bftfr bn <dodf>updbtfXXX</dodf> mfthod hbs bffn
     * dbllfd bnd bfforf thf mfthod <dodf>updbtfRow</dodf> hbs bffn dbllfd.
     * If no updbtfs hbvf bffn mbdf or thf mfthod <dodf>updbtfRow</dodf>
     * hbs blrfbdy bffn dbllfd, this mfthod hbs no ffffdt.
     * <P>
     * Aftfr <dodf>updbtfRow</dodf> is dbllfd it is thf
     * <dodf>dbndflRowUpdbtfs</dodf> hbs no bfffdt on thf nfwly
     * insfrtfd vblufs. Thf mfthod <dodf>dbndflRowInsfrt</dodf> dbn
     * bf usfd to rfmovf bny rows insfrtfd into thf RowSft.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row, bfforf thf
     *            first row, or bftfr thf lbst row
     */
    publid void dbndflRowUpdbtfs() throws SQLExdfption {
        drsIntfrnbl.dbndflRowUpdbtfs();
    }

    /**
     * Movfs thf dursor for this <dodf>JoinRowSftImpl</dodf> objfdt
     * to thf insfrt row.  Thf durrfnt row in thf rowsft is rfmfmbfrfd
     * whilf thf dursor is on thf insfrt row.
     * <P>
     * Thf insfrt row is b spfdibl row bssodibtfd with bn updbtbblf
     * rowsft.  It is fssfntiblly b bufffr whfrf b nfw row mby
     * bf donstrudtfd by dblling thf bppropribtf <dodf>updbtfXXX</dodf>
     * mfthods to bssign b vbluf to fbdh dolumn in thf row.  A domplftf
     * row must bf donstrudtfd; thbt is, fvfry dolumn thbt is not nullbblf
     * must bf bssignfd b vbluf.  In ordfr for thf nfw row to bfdomf pbrt
     * of this rowsft, thf mfthod <dodf>insfrtRow</dodf> must bf dbllfd
     * bfforf thf dursor is movfd bbdk to thf rowsft.
     * <P>
     * Only dfrtbin mfthods mby bf invokfd whilf thf dursor is on thf insfrt
     * row; mbny mfthods throw bn fxdfption if thfy brf dbllfd whilf thf
     * dursor is thfrf.  In bddition to thf <dodf>updbtfXXX</dodf>
     * bnd <dodf>insfrtRow</dodf> mfthods, only thf <dodf>gftXXX</dodf> mfthods
     * mby bf dbllfd whfn thf dursor is on thf insfrt row.  A <dodf>gftXXX</dodf>
     * mfthod should bf dbllfd on b dolumn only bftfr bn <dodf>updbtfXXX</dodf>
     * mfthod hbs bffn dbllfd on thbt dolumn; othfrwisf, thf vbluf rfturnfd is
     * undftfrminfd.
     *
     * @throws SQLExdfption if this <dodf>JoinRowSftImpl</dodf> objfdt is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void movfToInsfrtRow() throws SQLExdfption {
        drsIntfrnbl.movfToInsfrtRow();
    }

    /**
     * Movfs thf dursor for this <dodf>JoinRowSftImpl</dodf> objfdt to
     * thf durrfnt row.  Thf durrfnt row is thf row thf dursor wbs on
     * whfn thf mfthod <dodf>movfToInsfrtRow</dodf> wbs dbllfd.
     * <P>
     * Cblling this mfthod hbs no ffffdt unlfss it is dbllfd whilf thf
     * dursor is on thf insfrt row.
     *
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void movfToCurrfntRow() throws SQLExdfption {
        drsIntfrnbl.movfToCurrfntRow();
    }

    /**
     * Rfturns <dodf>null</dodf>.
     *
     * @rfturn <dodf>null</dodf>
     * @throws SQLExdfption if bn frror oddurs
     */
    publid Stbtfmfnt gftStbtfmfnt() throws SQLExdfption {
        rfturn drsIntfrnbl.gftStbtfmfnt();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>Rff</dodf> objfdt
     * in thf Jbvb progrbmming lbnugbgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b <dodf>Rff</dodf> objfdt rfprfsfnting bn SQL<dodf> REF</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>REF</dodf> vbluf
     */
    publid Rff gftRff(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftRff(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>Blob</dodf> objfdt
     * in thf Jbvb progrbmming lbnugbgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b <dodf>Blob</dodf> objfdt rfprfsfnting bn SQL <dodf>BLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>BLOB</dodf> vbluf
     */
    publid Blob gftBlob(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBlob(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>Clob</dodf> objfdt
     * in thf Jbvb progrbmming lbnugbgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b <dodf>Clob</dodf> objfdt rfprfsfnting bn SQL <dodf>CLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>CLOB</dodf> vbluf
     */
    publid Clob gftClob(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftClob(dolumnIndfx);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>JoinRowSftImpl</dodf> objfdt bs bn <dodf>Arrby</dodf> objfdt
     * in thf Jbvb progrbmming lbnugbgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn bn <dodf>Arrby</dodf> objfdt rfprfsfnting bn SQL
     *         <dodf>ARRAY</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>ARRAY</dodf> vbluf
     */
     publid Arrby gftArrby(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftArrby(dolumnIndfx);
    }

    // ColumnNbmf

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>Rff</dodf> objfdt
     * in thf Jbvb progrbmming lbnugbgf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>Rff</dodf> objfdt rfprfsfnting bn SQL<dodf> REF</dodf> vbluf
     * @throws SQLExdfption  if (1) thf givfn dolumn nbmf is not thf nbmf
     *         of b dolumn in this rowsft, (2) thf dursor is not on onf of
     *         this rowsft's rows or its insfrt row, or (3) thf dolumn vbluf
     *         is not bn SQL <dodf>REF</dodf> vbluf
     */
    publid Rff gftRff(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftRff(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>Blob</dodf> objfdt
     * in thf Jbvb progrbmming lbnugbgf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>Blob</dodf> objfdt rfprfsfnting bn SQL
     *        <dodf>BLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *        b dolumn in this rowsft, (2) thf dursor is not on onf of
     *        this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *        dolumn dofs not storf bn SQL <dodf>BLOB</dodf> vbluf
     */
    publid Blob gftBlob(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftBlob(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>Clob</dodf> objfdt
     * in thf Jbvb progrbmming lbnugbgf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>Clob</dodf> objfdt rfprfsfnting bn SQL
     *         <dodf>CLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>CLOB</dodf> vbluf
     */
    publid Clob gftClob(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftClob(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>JoinRowSftImpl</dodf> objfdt bs bn <dodf>Arrby</dodf> objfdt
     * in thf Jbvb progrbmming lbnugbgf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn bn <dodf>Arrby</dodf> objfdt rfprfsfnting bn SQL
     *        <dodf>ARRAY</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *        b dolumn in this rowsft, (2) thf dursor is not on onf of
     *        this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *        dolumn dofs not storf bn SQL <dodf>ARRAY</dodf> vbluf
     */
    publid Arrby gftArrby(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftArrby(dolumnNbmf);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Dbtf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Dbtf gftDbtf(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        rfturn drsIntfrnbl.gftDbtf(dolumnIndfx, dbl);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Dbtf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Dbtf gftDbtf(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        rfturn drsIntfrnbl.gftDbtf(dolumnNbmf, dbl);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Timf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timf gftTimf(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        rfturn drsIntfrnbl.gftTimf(dolumnIndfx, dbl);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Timf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timf gftTimf(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        rfturn drsIntfrnbl.gftTimf(dolumnNbmf, dbl);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Timfstbmp</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        rfturn drsIntfrnbl.gftTimfstbmp(dolumnIndfx, dbl);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>JoinRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timfstbmp</dodf> objfdt, using thf givfn
     * <dodf>Cblfndbr</dodf> objfdt to donstrudt bn bppropribtf
     * millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf>,
     *            <dodf>TIME</dodf>, or <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        rfturn drsIntfrnbl.gftTimfstbmp(dolumnNbmf, dbl);
    }

   /**
    * Sfts thf mftbdbtb for this <dodf>JoinRowSftImpl</dodf> objfdt
    * with thf givfn <dodf>RowSftMftbDbtb</dodf> objfdt.
    *
    * @pbrbm md b <dodf>RowSftMftbDbtb</dodf> objfdt instbndf dontbining
    *            mftbdbtb bbout thf dolumsn in thf rowsft
    * @throws SQLExdfption if invblid mftb dbtb is supplifd to thf
    *            rowsft
    */
    publid void sftMftbDbtb(RowSftMftbDbtb md) throws SQLExdfption {
        drsIntfrnbl.sftMftbDbtb(md);
    }

    publid RfsultSft gftOriginbl() throws SQLExdfption {
        rfturn drsIntfrnbl.gftOriginbl();
    }

   /**
    * Rfturns b rfsult sft dontbining thf originbl vbluf of thf rowsft.
    * Thf dursor is positionfd bfforf thf first row in thf rfsult sft.
    * Only rows dontbinfd in thf rfsult sft rfturnfd by gftOriginbl()
    * brf sbid to hbvf bn originbl vbluf.
    *
    * @rfturn thf originbl rfsult sft of thf rowsft
    * @throws SQLExdfption if bn frror oddurs produdf thf
    *           <dodf>RfsultSft</dodf> objfdt
    */
    publid RfsultSft gftOriginblRow() throws SQLExdfption {
        rfturn drsIntfrnbl.gftOriginblRow();
    }

   /**
    * Rfturns b rfsult sft dontbining thf originbl vbluf of thf durrfnt
    * row only.
    *
    * @throws SQLExdfption if thfrf is no durrfnt row
    * @sff #sftOriginblRow
    */
    publid void sftOriginblRow() throws SQLExdfption {
        drsIntfrnbl.sftOriginblRow();
    }

   /**
    * Rfturns thf dolumns thbt mbkf b kfy to uniqufly idfntify b
    * row in this <dodf>JoinRowSftImpl</dodf> objfdt.
    *
    * @rfturn bn brrby of dolumn numbfr thbt donstitfs b primbry
    *           kfy for this rowsft. This brrby should bf fmpty
    *           if no dolumns is rfprfsfntitivf of b primbry kfy
    * @throws SQLExdfption if thf rowsft is fmpty or no dolumns
    *           brf dfsignbtfd bs primbry kfys
    * @sff #sftKfyColumns
    */
    publid int[] gftKfyColumns() throws SQLExdfption {
        rfturn drsIntfrnbl.gftKfyColumns();
    }

    /**
     * Sfts this <dodf>JoinRowSftImpl</dodf> objfdt's
     * <dodf>kfyCols</dodf> fifld with thf givfn brrby of dolumn
     * numbfrs, whidh forms b kfy for uniqufly idfntifying b row
     * in this rowsft.
     *
     * @pbrbm dols bn brrby of <dodf>int</dodf> indidbting thf
     *        dolumns thbt form b primbry kfy for this
     *        <dodf>JoinRowSftImpl</dodf> objfdt; fvfry
     *        flfmfnt in thf brrby must bf grfbtfr thbn
     *        <dodf>0</dodf> bnd lfss thbn or fqubl to thf numbfr
     *        of dolumns in this rowsft
     * @throws SQLExdfption if bny of thf numbfrs in thf
     *            givfn brrby is not vblid for this rowsft
     * @sff #gftKfyColumns
     */
    publid void sftKfyColumns(int[] dols) throws SQLExdfption {
        drsIntfrnbl.sftKfyColumns(dols);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Rff</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Eithfr of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm rff thf <dodf>jbvb.sql.Rff</dodf> objfdt thbt will bf sft bs
     *         thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRff(int dolumnIndfx, jbvb.sql.Rff rff) throws SQLExdfption {
        drsIntfrnbl.updbtfRff(dolumnIndfx, rff);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Rff</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Eithfr of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf nbmf of thf dolumn
     *        to bf updbtfd; must mbtdh onf of thf dolumn nbmfs in this
     *        <dodf>JoinRowSftImpl</dodf> objfdt
     * @pbrbm rff thf <dodf>jbvb.sql.Rff</dodf> objfdt thbt will bf sft bs
     *         thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not vblid,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRff(String dolumnNbmf, jbvb.sql.Rff rff) throws SQLExdfption {
        drsIntfrnbl.updbtfRff(dolumnNbmf, rff);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Clob</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Eithfr of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm d thf <dodf>jbvb.sql.Clob</dodf> objfdt thbt will bf sft bs
     *         thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfClob(int dolumnIndfx, Clob d) throws SQLExdfption {
        drsIntfrnbl.updbtfClob(dolumnIndfx, d);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Clob</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Eithfr of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf nbmf of thf dolumn
     *        to bf updbtfd; must mbtdh onf of thf dolumn nbmfs in this
     *        <dodf>JoinRowSftImpl</dodf> objfdt
     * @pbrbm d thf <dodf>jbvb.sql.Clob</dodf> objfdt thbt will bf sft bs
     *         thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not vblid,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfClob(String dolumnNbmf, Clob d) throws SQLExdfption {
        drsIntfrnbl.updbtfClob(dolumnNbmf, d);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Blob</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Eithfr of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm b thf <dodf>jbvb.sql.Blob</dodf> objfdt thbt will bf sft bs
     *         thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBlob(int dolumnIndfx, Blob b) throws SQLExdfption {
         drsIntfrnbl.updbtfBlob(dolumnIndfx, b);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Blob</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Eithfr of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf nbmf of thf dolumn
     *        to bf updbtfd; must mbtdh onf of thf dolumn nbmfs in this
     *        <dodf>JoinRowSftImpl</dodf> objfdt
     * @pbrbm b thf <dodf>jbvb.sql.Blob</dodf> objfdt thbt will bf sft bs
     *         thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not vblid,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBlob(String dolumnNbmf, Blob b) throws SQLExdfption {
         drsIntfrnbl.updbtfBlob(dolumnNbmf, b);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Arrby</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Eithfr of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm b thf <dodf>jbvb.sql.Arrby</dodf> objfdt thbt will bf sft bs
     *         thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfArrby(int dolumnIndfx, Arrby b) throws SQLExdfption {
         drsIntfrnbl.updbtfArrby(dolumnIndfx, b);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JoinRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Arrby</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Eithfr of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf nbmf of thf dolumn
     *        to bf updbtfd; must mbtdh onf of thf dolumn nbmfs in this
     *        <dodf>JoinRowSftImpl</dodf> objfdt
     * @pbrbm b thf <dodf>jbvb.sql.Arrby</dodf> objfdt thbt will bf sft bs
     *         thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not vblid,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfArrby(String dolumnNbmf, Arrby b) throws SQLExdfption {
         drsIntfrnbl.updbtfArrby(dolumnNbmf, b);
    }

    /**
     * Populbtfs this <dodf>JoinRowSftImpl</dodf> objfdt with dbtb.
     * This form of thf mfthod usfs thf rowsft's usfr, pbssword, bnd url or
     * dbtb sourdf nbmf propfrtifs to drfbtf b dbtbbbsf
     * donnfdtion.  If propfrtifs thbt brf nffdfd
     * hbvf not bffn sft, this mfthod will throw bn fxdfption.
     * <P>
     * Anothfr form of this mfthod usfs bn fxisting JDBC <dodf>Connfdtion</dodf>
     * objfdt instfbd of drfbting b nfw onf; thfrfforf, it ignorfs thf
     * propfrtifs usfd for fstbblishing b nfw donnfdtion.
     * <P>
     * Thf qufry spfdififd by thf dommbnd propfrty is fxfdutfd to drfbtf b
     * <dodf>RfsultSft</dodf> objfdt from whidh to rftrifvf dbtb.
     * Thf durrfnt dontfnts of thf rowsft brf disdbrdfd, bnd thf
     * rowsft's mftbdbtb is blso (rf)sft.  If thfrf brf outstbnding updbtfs,
     * thfy brf blso ignorfd.
     * <P>
     * Thf mfthod <dodf>fxfdutf</dodf> dlosfs bny dbtbbbsf donnfdtions thbt it
     * drfbtfs.
     *
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         nfdfssbry propfrtifs hbvf not bffn sft
     */
    publid void fxfdutf() throws SQLExdfption {
        drsIntfrnbl.fxfdutf();
    }

    /**
     * Populbtfs this <dodf>JoinRowSftImpl</dodf> objfdt with dbtb,
     * using thf givfn donnfdtion to produdf thf rfsult sft from
     * whidh dbtb will bf rfbd.  A sfdond form of this mfthod,
     * whidh tbkfs no brgumfnts, usfs thf vblufs from this rowsft's
     * usfr, pbssword, bnd fithfr url or dbtb sourdf propfrtifs to
     * drfbtf b nfw dbtbbbsf donnfdtion. Thf form of <dodf>fxfdutf</dodf>
     * thbt is givfn b donnfdtion ignorfs thfsf propfrtifs.
     *
     *  @pbrbm donn A stbndbrd JDBC <dodf>Connfdtion</dodf> objfdt with vblid
     *           propfrtifs thbt thf <dodf>JoinRowSft</dodf> implfmfntbtion
     *           dbn pbss to b syndhronizbtion providfr to fstbblish b
     *           donnfdtion to thf dbtbsourdf
     * @throws SQLExdfption if bn invblid <dodf>Connfdtion</dodf> is supplifd
     *           or bn frror oddurs in fstbblishing thf donnfdtion to thf
     *           dbtb sourf
     * @sff jbvb.sql.Connfdtion
     */
    publid void fxfdutf(Connfdtion donn) throws SQLExdfption {
        drsIntfrnbl.fxfdutf(donn);
    }

    /**
     * Providf intfrfbdf dovfrbgf for gftURL(int) in RfsultSft->RowSft
     */
    publid jbvb.nft.URL gftURL(int dolumnIndfx) throws SQLExdfption {
        rfturn drsIntfrnbl.gftURL(dolumnIndfx);
    }

    /**
     * Providf intfrfbdf dovfrbgf for gftURL(String) in RfsultSft->RowSft
     */
    publid jbvb.nft.URL gftURL(String dolumnNbmf) throws SQLExdfption {
        rfturn drsIntfrnbl.gftURL(dolumnNbmf);
    }

   /**
    * Crfbtfs b nfw <dodf>WfbRowSft</dodf> objfdt, populbtfs it with thf
    * dbtb in thf givfn <dodf>RfsultSft</dodf> objfdt, bnd writfs it
    * to thf givfn <dodf>jbvb.io.Writfr</dodf> objfdt in XML formbt.
    *
    * @throws SQLExdfption if bn frror oddurs writing out thf rowsft
    *          dontfnts to XML
    */
    publid void writfXml(RfsultSft rs, jbvb.io.Writfr writfr)
        throws SQLExdfption {
             wrs = nfw WfbRowSftImpl();
             wrs.populbtf(rs);
             wrs.writfXml(writfr);
    }

    /**
     * Writfs this <dodf>JoinRowSft</dodf> objfdt to thf givfn
     * <dodf>jbvb.io.Writfr</dodf> objfdt in XML formbt. In
     * bddition to thf rowsft's dbtb, its propfrtifs bnd mftbdbtb
     * brf blso indludfd.
     *
     * @throws SQLExdfption if bn frror oddurs writing out thf rowsft
     *          dontfnts to XML
     */
    publid void writfXml(jbvb.io.Writfr writfr) throws SQLExdfption {
        drfbtfWfbRowSft().writfXml(writfr);
}

    /**
     * Rfbds this <dodf>JoinRowSft</dodf> objfdt in its XML formbt.
     *
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     */
    publid void rfbdXml(jbvb.io.Rfbdfr rfbdfr) throws SQLExdfption {
        wrs = nfw WfbRowSftImpl();
        wrs.rfbdXml(rfbdfr);
        drsIntfrnbl = (CbdhfdRowSftImpl)wrs;
    }

    // Strfbm bbsfd mfthods
    /**
     * Rfbds b strfbm bbsfd XML input to populbtf bn <dodf>WfbRowSft</dodf>
     *
     * @throws SQLExdfption if b dbtb sourdf bddfss oddurs
     * @throws IOExdfption if b IO fxdfption oddurs
     */
    publid void rfbdXml(jbvb.io.InputStrfbm iStrfbm) throws SQLExdfption, IOExdfption {
         wrs = nfw WfbRowSftImpl();
         wrs.rfbdXml(iStrfbm);
         drsIntfrnbl = (CbdhfdRowSftImpl)wrs;
    }

    /**
     * Crfbtfs bn bn output strfbm of thf intfrnbl stbtf bnd dontfnts of b
     * <dodf>WfbRowSft</dodf> for XML prodffssing
     *
     * @throws SQLExdfption if b dbtbsourdf bddfss oddurs
     * @throws IOExdfption if bn IO fxdfption oddurs
     */
    publid void writfXml(jbvb.io.OutputStrfbm oStrfbm) throws SQLExdfption, IOExdfption {
         drfbtfWfbRowSft().writfXml(oStrfbm);
    }

    /**
     * Crfbtfs b nfw <dodf>WfbRowSft</dodf> objfdt, populbtfs it with
     * thf dontfnts of thf <dodf>RfsultSft</dodf> bnd drfbtfs bn output
     * strfbms thf intfrnbl stbtf bnd dontfnts of thf rowsft for XML prodfssing.
     *
     * @throws SQLExdfption if b dbtbsourdf bddfss oddurs
     * @throws IOExdfption if bn IO fxdfption oddurs
     */
    publid void writfXml(RfsultSft rs, jbvb.io.OutputStrfbm oStrfbm) throws SQLExdfption, IOExdfption {
             wrs = nfw WfbRowSftImpl();
             wrs.populbtf(rs);
             wrs.writfXml(oStrfbm);
    }

    /**
     * %%% Jbvbdod dommfnts to bf bddfd hfrf
     */
    privbtf WfbRowSft drfbtfWfbRowSft() throws SQLExdfption {
       if(wrs != null) {
           // dhfdk if it hbs blrfbdy bffn initiblizfd.
           rfturn wrs;
       } flsf {
         wrs = nfw WfbRowSftImpl();
          drsIntfrnbl.bfforfFirst();
          wrs.populbtf(drsIntfrnbl);
          rfturn wrs;
       }
    }

    /**
     * Rfturns thf lbst sft SQL <dodf>JOIN</dodf> typf in this JoinRowSftImpl
     * objfdt
     *
     * @rfturn joinTypf Onf of thf stbndbrd JoinRowSft stbtid fifld JOIN typfs
     * @throws SQLExdfption if bn frror oddurs dftfrmining thf durrfnt join typf
     */
    publid int gftJoinTypf() throws SQLExdfption {
        if (vfdJoinTypf == null) {
            // Dffbult JoinRowSft typf
            this.sftJoinTypf(JoinRowSft.INNER_JOIN);
        }
        Intfgfr i = vfdJoinTypf.gft(vfdJoinTypf.sizf()-1);
        rfturn i.intVbluf();
    }

    /**
    * Thf listfnfr will bf notififd whfnfvfr bn fvfnt oddurs on this <dodf>JoinRowSft</dodf>
    * objfdt.
    * <P>
    * A listfnfr might, for fxbmplf, bf b tbblf or grbph thbt nffds to
    * bf updbtfd in ordfr to bddurbtfly rfflfdt thf durrfnt stbtf of
    * thf <dodf>RowSft</dodf> objfdt.
    * <p>
    * <b>Notf</b>: if thf <dodf>RowSftListfnfr</dodf> objfdt is
    * <dodf>null</dodf>, this mfthod silfntly disdbrds thf <dodf>null</dodf>
    * vbluf bnd dofs not bdd b null rfffrfndf to thf sft of listfnfrs.
    * <p>
    * <b>Notf</b>: if thf listfnfr is blrfbdy sft, bnd thf nfw <dodf>RowSftListfrnfr</dodf>
    * instbndf is bddfd to thf sft of listfnfrs blrfbdy rfgistfrfd to rfdfivf
    * fvfnt notifidbtions from this <dodf>RowSft</dodf>.
    *
    * @pbrbm listfnfr bn objfdt thbt hbs implfmfntfd thf
    *     <dodf>jbvbx.sql.RowSftListfnfr</dodf> intfrfbdf bnd wbnts to bf notififd
    *     of bny fvfnts thbt oddur on this <dodf>JoinRowSft</dodf> objfdt; Mby bf
    *     null.
    * @sff #rfmovfRowSftListfnfr
    */
    publid void bddRowSftListfnfr(RowSftListfnfr listfnfr) {
        drsIntfrnbl.bddRowSftListfnfr(listfnfr);
    }

    /**
    * Rfmovfs thf dfsignbtfd objfdt from this <dodf>JoinRowSft</dodf> objfdt's list of listfnfrs.
    * If thf givfn brgumfnt is not b rfgistfrfd listfnfr, this mfthod
    * dofs nothing.
    *
    *  <b>Notf</b>: if thf <dodf>RowSftListfnfr</dodf> objfdt is
    * <dodf>null</dodf>, this mfthod silfntly disdbrds thf <dodf>null</dodf>
    * vbluf.
    *
    * @pbrbm listfnfr b <dodf>RowSftListfnfr</dodf> objfdt thbt is on thf list
    *        of listfnfrs for this <dodf>JoinRowSft</dodf> objfdt
    * @sff #bddRowSftListfnfr
    */
     publid void rfmovfRowSftListfnfr(RowSftListfnfr listfnfr) {
        drsIntfrnbl.rfmovfRowSftListfnfr(listfnfr);
    }

    /**
     * Convfrts this <dodf>JoinRowSftImpl</dodf> objfdt to b dollfdtion
     * of tbblfs. Thf sbmplf implfmfntbtion utilitizfs thf <dodf>TrffMbp</dodf>
     * dollfdtion typf.
     * This dlbss gubrbntffs thbt thf mbp will bf in bsdfnding kfy ordfr,
     * sortfd bddording to thf nbturbl ordfr for thf kfy's dlbss.
     *
     * @rfturn b <dodf>Collfdtion</dodf> objfdt donsisting of tbblfs,
     *         fbdh of whidh is b dopy of b row in this
     *         <dodf>JoinRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf dollfdtion
     * @sff #toCollfdtion(int)
     * @sff #toCollfdtion(String)
     * @sff jbvb.util.TrffMbp
     */
     publid Collfdtion<?> toCollfdtion() throws SQLExdfption {
        rfturn drsIntfrnbl.toCollfdtion();
    }

    /**
     * Rfturns thf spfdififd dolumn of this <dodf>JoinRowSftImpl</dodf> objfdt
     * bs b <dodf>Collfdtion</dodf> objfdt.  This mfthod mbkfs b dopy of thf
     * dolumn's dbtb bnd utilitizfs thf <dodf>Vfdtor</dodf> to fstbblish thf
     * dollfdtion. Thf <dodf>Vfdtor</dodf> dlbss implfmfnts b growbblf brrby
     * objfdts bllowing thf individubl domponfnts to bf bddfssfd using bn
     * bn intfgfr indfx similbr to thbt of bn brrby.
     *
     * @rfturn b <dodf>Collfdtion</dodf> objfdt thbt dontbins thf vbluf(s)
     *         storfd in thf spfdififd dolumn of this
     *         <dodf>JoinRowSftImpl</dodf>
     *         objfdt
     * @throws SQLExdfption if bn frror oddurs gfnfrbtfd thf dollfdtion; or
     *          bn invblid dolumn is providfd.
     * @sff #toCollfdtion()
     * @sff #toCollfdtion(String)
     * @sff jbvb.util.Vfdtor
     */
    publid Collfdtion<?> toCollfdtion(int dolumn) throws SQLExdfption {
        rfturn drsIntfrnbl.toCollfdtion(dolumn);
    }

    /**
     * Rfturns thf spfdififd dolumn of this <dodf>JoinRowSftImpl</dodf> objfdt
     * bs b <dodf>Collfdtion</dodf> objfdt.  This mfthod mbkfs b dopy of thf
     * dolumn's dbtb bnd utilitizfs thf <dodf>Vfdtor</dodf> to fstbblish thf
     * dollfdtion. Thf <dodf>Vfdtor</dodf> dlbss implfmfnts b growbblf brrby
     * objfdts bllowing thf individubl domponfnts to bf bddfssfd using bn
     * bn intfgfr indfx similbr to thbt of bn brrby.
     *
     * @rfturn b <dodf>Collfdtion</dodf> objfdt thbt dontbins thf vbluf(s)
     *         storfd in thf spfdififd dolumn of this
     *         <dodf>JoinRowSftImpl</dodf>
     *         objfdt
     * @throws SQLExdfption if bn frror oddurs gfnfrbtfd thf dollfdtion; or
     *          bn invblid dolumn is providfd.
     * @sff #toCollfdtion()
     * @sff #toCollfdtion(int)
     * @sff jbvb.util.Vfdtor
     */
    publid Collfdtion<?> toCollfdtion(String dolumn) throws SQLExdfption {
        rfturn drsIntfrnbl.toCollfdtion(dolumn);
    }

    /**
     * Crfbtfs b <dodf>RowSft</dodf> objfdt thbt is b dopy of
     * this <dodf>JoinRowSftImpl</dodf> objfdt's tbblf strudturf
     * bnd thf donstrbints only.
     * Thfrf will bf no dbtb in thf objfdt bfing rfturnfd.
     * Updbtfs mbdf on b dopy brf not visiblf to thf originbl rowsft.
     * <P>
     * This hflps in gftting thf undfrlying XML sdhfmb whidh dbn
     * bf usfd bs thf bbsis for populbting b <dodf>WfbRowSft</dodf>.
     *
     * @rfturn b nfw <dodf>CbdhfdRowSft</dodf> objfdt thbt is b dopy
     * of this <dodf>JoinRowSftImpl</dodf> objfdt's sdhfmb bnd
     * rftbins bll thf donstrbints on thf originbl rowsft but dontbins
     * no dbtb
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf dopy
     * of thf <dodf>CbdhfdRowSft</dodf> objfdt
     * @sff #drfbtfShbrfd
     * @sff #drfbtfCopy
     * @sff #drfbtfCopyNoConstrbints
     * @sff jbvbx.sql.RowSftEvfnt
     * @sff jbvbx.sql.RowSftListfnfr
     */
     publid CbdhfdRowSft drfbtfCopySdhfmb() throws SQLExdfption {
         rfturn drsIntfrnbl.drfbtfCopySdhfmb();
     }

     /**
      * {@inhfritDod}
      */
     publid void sftSyndProvidfr(String providfrStr) throws SQLExdfption {
         drsIntfrnbl.sftSyndProvidfr(providfrStr);
     }

     /**
      * {@inhfritDod}
      */
     publid void bddfptChbngfs() throws SyndProvidfrExdfption {
         drsIntfrnbl.bddfptChbngfs();
     }

     /**
      * {@inhfritDod}
      */
     publid SyndProvidfr gftSyndProvidfr() throws SQLExdfption {
        rfturn drsIntfrnbl.gftSyndProvidfr();
     }

    /**
     * This mfthod rf populbtfs thf rfsBundlf
     * during thf dfsfriblizbtion prodfss
     *
     */
     privbtf void rfbdObjfdt(ObjfdtInputStrfbm ois) throws IOExdfption, ClbssNotFoundExdfption {
        // Dffbult stbtf initiblizbtion hbppfns hfrf
        ois.dffbultRfbdObjfdt();
        // Initiblizbtion of trbnsifnt Rfs Bundlf hbppfns hfrf .
        try {
           rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
        } dbtdh(IOExdfption iof) {
            throw nfw RuntimfExdfption(iof);
        }

     }

     stbtid finbl long sfriblVfrsionUID = -5590501621560008453L;
}
