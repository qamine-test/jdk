/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.rowsft;

import jbvb.sql.*;
import jbvbx.sql.*;
import jbvb.io.*;
import jbvb.mbth.*;
import jbvb.util.*;
import jbvb.tfxt.*;

import jbvbx.sql.rowsft.*;
import jbvbx.sql.rowsft.spi.*;
import jbvbx.sql.rowsft.sfribl.*;
import dom.sun.rowsft.intfrnbl.*;
import dom.sun.rowsft.providfrs.*;
import sun.rfflfdt.misd.RfflfdtUtil;

/**
 * Thf stbndbrd implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
 *
 * Sff intfrfbdf dffinition for full bfhbvior bnd implfmfntbtion rfquirfmfnts.
 * This rfffrfndf implfmfntbtion hbs mbdf provision for b onf-to-onf writf bbdk
 * fbdility bnd it is durrfmtly bf possiblf to dhbngf thf pfristfndf providfr
 * during thf liff-timf of bny CbdhfdRowSftImpl.
 *
 * @buthor Jonbthbn Brudf, Amit Hbndb
 */

publid dlbss CbdhfdRowSftImpl fxtfnds BbsfRowSft implfmfnts RowSft, RowSftIntfrnbl, Sfriblizbblf, Clonfbblf, CbdhfdRowSft {

    /**
     * Thf <dodf>SyndProvidfr</dodf> usfd by thf CbdhfdRowSft
     */
    privbtf SyndProvidfr providfr;

    /**
     * Thf <dodf>RowSftRfbdfrImpl</dodf> objfdt thbt is thf rfbdfr
     * for this rowsft.  Thf mfthod <dodf>fxfdutf</dodf> usfs this
     * rfbdfr bs pbrt of its implfmfntbtion.
     * @sfribl
     */
    privbtf RowSftRfbdfr rowSftRfbdfr;

    /**
     * Thf <dodf>RowSftWritfrImpl</dodf> objfdt thbt is thf writfr
     * for this rowsft.  Thf mfthod <dodf>bddfptChbngfs</dodf> usfs
     * this writfr bs pbrt of its implfmfntbtion.
     * @sfribl
     */
    privbtf RowSftWritfr rowSftWritfr;

    /**
     * Thf <dodf>Connfdtion</dodf> objfdt thbt donnfdts with this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt's durrfnt undfrlying dbtb sourdf.
     */
    privbtf trbnsifnt Connfdtion donn;

    /**
     * Thf <dodf>RfsultSftMftbDbtb</dodf> objfdt thbt dontbins informbtion
     * bbout thf dolumns in thf <dodf>RfsultSft</dodf> objfdt thbt is thf
     * durrfnt sourdf of dbtb for this <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     */
    privbtf trbnsifnt RfsultSftMftbDbtb RSMD;

    /**
     * Thf <dodf>RowSftMftbDbtb</dodf> objfdt thbt dontbins informbtion bbout
     * thf dolumns in this <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     * @sfribl
     */
    privbtf RowSftMftbDbtbImpl RowSftMD;

    // Propfrtifs of this RowSft

    /**
     * An brrby dontbining thf dolumns in this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt thbt form b uniquf idfntififr for b row. This brrby
     * is usfd by thf writfr.
     * @sfribl
     */
    privbtf int kfyCols[];

    /**
     * Thf nbmf of thf tbblf in thf undfrlying dbtbbbsf to whidh updbtfs
     * should bf writtfn.  This nbmf is nffdfd bfdbusf most drivfrs
     * do not rfturn this informbtion in b <dodf>RfsultSftMftbDbtb</dodf>
     * objfdt.
     * @sfribl
     */
    privbtf String tbblfNbmf;

    /**
     * A <dodf>Vfdtor</dodf> objfdt dontbining thf <dodf>Row</dodf>
     * objfdts thbt domprisf  this <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     * @sfribl
     */
    privbtf Vfdtor<Objfdt> rvh;

    /**
     * Thf durrfnt position of thf dursor in this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt.
     * @sfribl
     */
    privbtf int dursorPos;

    /**
     * Thf durrfnt position of thf dursor in this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt not dounting rows thbt hbvf bffn dflftfd, if bny.
     * <P>
     * For fxbmplf, supposf thbt thf dursor is on thf lbst row of b rowsft
     * thbt stbrtfd with fivf rows bnd subsfqufntly hbd thf sfdond bnd third
     * rows dflftfd. Thf <dodf>bbsolutfPos</dodf> would bf <dodf>3</dodf>,
     * whfrfbs thf <dodf>dursorPos</dodf> would bf <dodf>5</dodf>.
     * @sfribl
     */
    privbtf int bbsolutfPos;

    /**
     * Thf numbfr of dflftfd rows durrfntly in this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt.
     * @sfribl
     */
    privbtf int numDflftfd;

    /**
     * Thf totbl numbfr of rows durrfntly in this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt.
     * @sfribl
     */
    privbtf int numRows;

    /**
     * A spfdibl row usfd for donstrudting b nfw row. A nfw
     * row is donstrudtfd by using <dodf>RfsultSft.updbtfXXX</dodf>
     * mfthods to insfrt dolumn vblufs into thf insfrt row.
     * @sfribl
     */
    privbtf InsfrtRow insfrtRow;

    /**
     * A <dodf>boolfbn</dodf> indidbting whfthfr thf dursor is
     * durrfntly on thf insfrt row.
     * @sfribl
     */
    privbtf boolfbn onInsfrtRow;

    /**
     * Thf fifld thbt tfmporbrily holds thf lbst position of thf
     * dursor bfforf it movfd to thf insfrt row, thus prfsfrving
     * thf numbfr of thf durrfnt row to whidh thf dursor mby rfturn.
     * @sfribl
     */
    privbtf int durrfntRow;

    /**
     * A <dodf>boolfbn</dodf> indidbting whfthfr thf lbst vbluf
     * rfturnfd wbs bn SQL <dodf>NULL</dodf>.
     * @sfribl
     */
    privbtf boolfbn lbstVblufNull;

    /**
     * A <dodf>SQLWbrning</dodf> whidh logs on thf wbrnings
     */
    privbtf SQLWbrning sqlwbrn;

    /**
     * Usfd to trbdk mbtdh dolumn for JoinRowSft donsumption
     */
    privbtf String strMbtdhColumn ="";

    /**
     * Usfd to trbdk mbtdh dolumn for JoinRowSft donsumption
     */
    privbtf int iMbtdhColumn = -1;

    /**
     * A <dodf>RowSftWbrning</dodf> whidh logs on thf wbrnings
     */
    privbtf RowSftWbrning rowsftWbrning;

    /**
     * Thf dffbult SyndProvidfr for thf RI CbdhfdRowSftImpl
     */
    privbtf String DEFAULT_SYNC_PROVIDER = "dom.sun.rowsft.providfrs.RIOptimistidProvidfr";

    /**
     * Thf boolfbn vbribblf indidbting lodbtorsUpdbtfVbluf
     */
    privbtf boolfbn dbmslodbtorsUpdbtfCopy;

    /**
     * Thf <dodf>RfsultSft</dodf> objfdt thbt is usfd to mbintbin thf dbtb whfn
     * b RfsultSft bnd stbrt position brf pbssfd bs pbrbmftfrs to thf populbtf fundtion
     */
    privbtf trbnsifnt RfsultSft rfsultSft;

    /**
     * Thf intfgfr vbluf indidbting thf fnd position in thf RfsultSftwhfrf thf pidking
     * up of rows for populbting b CbdhfdRowSft objfdt wbs lfft off.
     */
    privbtf int fndPos;

    /**
     * Thf intfgfr vbluf indidbting thf fnd position in thf RfsultSftwhfrf thf pidking
     * up of rows for populbting b CbdhfdRowSft objfdt wbs lfft off.
     */
    privbtf int prfvEndPos;

    /**
     * Thf intfgfr vbluf indidbting thf position in thf RfsultSft, to populbtf thf
     * CbdhfdRowSft objfdt.
     */
    privbtf int stbrtPos;

    /**
     * Thf intfgfr vbluf indidbting thf position from whfrf thf pbgf prior to this
     * wbs populbtfd.
     */
    privbtf int stbrtPrfv;

    /**
     * Thf intfgfr vbluf indidbting sizf of thf pbgf.
     */
    privbtf int pbgfSizf;

    /**
     * Thf intfgfr vbluf indidbting numbfr of rows thbt hbvf bffn prodfssfd so fbr.
     * Usfd for dhfdking whfthfr mbxRows hbs bffn rfbdhfd or not.
     */
    privbtf int mbxRowsrfbdhfd;
    /**
     * Thf boolfbn vbluf whfn truf signififs thbt pbgfs brf still to follow bnd b
     * fblsf vbluf indidbtfs thbt this is thf lbst pbgf.
     */
    privbtf boolfbn pbgfnotfnd = truf;

    /**
     * Thf boolfbn vbluf indidbting whfthfr this is thf first pbgf or not.
     */
    privbtf boolfbn onFirstPbgf;

    /**
     * Thf boolfbn vbluf indidbting whfthfr this is thf lbst pbgf or not.
     */
    privbtf boolfbn onLbstPbgf;

    /**
     * Thf intfgfr vbluf indidbting how mbny timfs thf populbtf fundtion hbs bffn dbllfd.
     */
    privbtf int populbtfdblldount;

    /**
     * Thf intfgfr vbluf indidbting thf totbl numbfr of rows to bf prodfssfd in thf
     * RfsultSft objfdt pbssfd to thf populbtf fundtion.
     */
    privbtf int totblRows;

    /**
     * Thf boolfbn vbluf indidbting how thf CbhfdRowSft objfdt hbs bffn populbtfd for
     * pbging purposf. Truf indidbtfs thbt donnfdtion pbrbmftfr is pbssfd.
     */
    privbtf boolfbn dbllWithCon;

    /**
     * CbdhfdRowSft rfbdfr objfdt to rfbd thf dbtb from thf RfsultSft whfn b donnfdtion
     * pbrbmftfr is pbssfd to populbtf thf CbdhfdRowSft objfdt for pbging.
     */
    privbtf CbdhfdRowSftRfbdfr drsRfbdfr;

    /**
     * Thf Vfdtor holding thf Mbtdh Columns
     */
    privbtf Vfdtor<Intfgfr> iMbtdhColumns;

    /**
     * Thf Vfdtor thbt will hold thf Mbtdh Column nbmfs.
     */
    privbtf Vfdtor<String> strMbtdhColumns;

    /**
     * Triggfr thbt indidbtfs whfthfr thf bdtivf SyndProvidfr is fxposfs thf
     * bdditionbl TrbnsbdtionblWritfr mfthod
     */
    privbtf boolfbn tXWritfr = fblsf;

    /**
     * Thf fifld objfdt for b trbnsbdtionbl RowSft writfr
     */
    privbtf TrbnsbdtionblWritfr tWritfr = null;

    protfdtfd trbnsifnt JdbdRowSftRfsourdfBundlf rfsBundlf;

    privbtf boolfbn updbtfOnInsfrt;



    /**
     * Construdts b nfw dffbult <dodf>CbdhfdRowSftImpl</dodf> objfdt with
     * thf dbpbdity to hold 100 rows. This nfw objfdt hbs no mftbdbtb
     * bnd hbs thf following dffbult vblufs:
     * <prf>
     *     onInsfrtRow = fblsf
     *     insfrtRow = null
     *     dursorPos = 0
     *     numRows = 0
     *     showDflftfd = fblsf
     *     qufryTimfout = 0
     *     mbxRows = 0
     *     mbxFifldSizf = 0
     *     rowSftTypf = RfsultSft.TYPE_SCROLL_INSENSITIVE
     *     dondurrfndy = RfsultSft.CONCUR_UPDATABLE
     *     rfbdOnly = fblsf
     *     isolbtion = Connfdtion.TRANSACTION_READ_COMMITTED
     *     fsdbpfProdfssing = truf
     *     onInsfrtRow = fblsf
     *     insfrtRow = null
     *     dursorPos = 0
     *     bbsolutfPos = 0
     *     numRows = 0
     * </prf>
     * A <dodf>CbdhfdRowSftImpl</dodf> objfdt is donfigurfd to usf thf dffbult
     * <dodf>RIOptimistidProvidfr</dodf> implfmfntbtion to providf donnfdtivity
     * bnd syndhronizbtion dbpbbilitifs to thf sft dbtb sourdf.
     * <P>
     * @throws SQLExdfption if bn frror oddurs
     */
    publid CbdhfdRowSftImpl() throws SQLExdfption {

        try {
           rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
        } dbtdh(IOExdfption iof) {
            throw nfw RuntimfExdfption(iof);
        }

        // sft thf Rfbdfr, this mbybf ovfrriddfn lbttfr
        providfr =
        SyndFbdtory.gftInstbndf(DEFAULT_SYNC_PROVIDER);

        if (!(providfr instbndfof RIOptimistidProvidfr)) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invblidp").toString());
        }

        rowSftRfbdfr = (CbdhfdRowSftRfbdfr)providfr.gftRowSftRfbdfr();
        rowSftWritfr = (CbdhfdRowSftWritfr)providfr.gftRowSftWritfr();

        // bllodbtf thf pbrbmftfrs dollfdtion
        initPbrbms();

        initContbinfr();

        // sft up somf dffbult vblufs
        initPropfrtifs();

        // insfrt row sftup
        onInsfrtRow = fblsf;
        insfrtRow = null;

        // sft thf wbrninings
        sqlwbrn = nfw SQLWbrning();
        rowsftWbrning = nfw RowSftWbrning();

    }

    /**
     * Providfs b <dodf>CbdhfdRowSftImpl</dodf> instbndf with thf sbmf dffbult propfrtifs bs
     * bs thf zfro pbrbmftfr donstrudtor.
     * <prf>
     *     onInsfrtRow = fblsf
     *     insfrtRow = null
     *     dursorPos = 0
     *     numRows = 0
     *     showDflftfd = fblsf
     *     qufryTimfout = 0
     *     mbxRows = 0
     *     mbxFifldSizf = 0
     *     rowSftTypf = RfsultSft.TYPE_SCROLL_INSENSITIVE
     *     dondurrfndy = RfsultSft.CONCUR_UPDATABLE
     *     rfbdOnly = fblsf
     *     isolbtion = Connfdtion.TRANSACTION_READ_COMMITTED
     *     fsdbpfProdfssing = truf
     *     onInsfrtRow = fblsf
     *     insfrtRow = null
     *     dursorPos = 0
     *     bbsolutfPos = 0
     *     numRows = 0
     * </prf>
     *
     * Howfvfr, bpplidbtions will hbvf thf mfbns to spfdify bt runtimf thf
     * dfsirfd <dodf>SyndProvidfr</dodf> objfdt.
     * <p>
     * For fxbmplf, drfbting b <dodf>CbdhfdRowSftImpl</dodf> objfdt bs follows fnsurfs
     * thbt b it is fstbblishfd with thf <dodf>dom.foo.providfr.Impl</dodf> syndhronizbtion
     * implfmfntbtion providing thf syndhronizbtion mfdhbnism for this disdonnfdtfd
     * <dodf>RowSft</dodf> objfdt.
     * <prf>
     *     Hbshtbblf fnv = nfw Hbshtbblf();
     *     fnv.put(jbvbx.sql.rowsft.spi.SyndFbdtory.ROWSET_PROVIDER_NAME,
     *         "dom.foo.providfr.Impl");
     *     CbdhfdRowSftImpl drs = nfw CbdhfdRowSft(fnv);
     * </prf>
     * <p>
     * Cblling this donstrudtor with b <dodf>null</dodf> pbrbmftfr will
     * dbusf thf <dodf>SyndFbdtory</dodf> to providf thf rfffrfndf
     * optimistid providfr <dodf>dom.sun.rowsft.providfrs.RIOptimistidProvidfr</dodf>.
     * <p>
     * In bddition, thf following propfrtifs dbn bf bssodibtfd with thf
     * providfr to bssist in dftfrmining thf dhoidf of thf syndhronizbton
     * providfr sudh bs:
     * <ul>
     * <li><dodf>ROWSET_SYNC_PROVIDER</dodf> - thf propfrty spfdifying thf thf
     * <dodf>SyndProvidfr</dodf> dlbss nbmf to bf instbntibtfd by thf
     * <dodf>SyndFbdttory</dodf>
     * <li><dodf>ROWSET_SYNC_VENDOR</dodf> - thf propfrty spfdifying thf softwbrf
     * vfndor bssodibtfd with b <dodf>SyndProvidfr</dodf> implfmfntbtion.
     * <li><dodf>ROWSET_SYNC_PROVIDER_VER</dodf> - thf propfrty spfdifying thf
     * vfrsion of thf <dodf>SyndProvidfr</dodf> implfmfntbtion providfd by thf
     * softwbrf vfndor.
     * </ul>
     * Morf spfdifid dftbilfs brf bvbilbblf in thf <dodf>SyndFbdtory</dodf>
     * bnd <dodf>SyndProvidfr</dodf> spfdifidibtions lbtfr in this dodumfnt.
     * <p>
     * @pbrbm fnv b <dodf>Hbshtbblf</dodf> objfdt with b list of dfsirfd
     *        syndhronizbtion providfrs
     * @throws SQLExdfption if thf rfqufstfd providfr dbnnot bf found by thf
     * syndhronizbtion fbdtory
     * @sff SyndProvidfr
     */
    publid CbdhfdRowSftImpl(@SupprfssWbrnings("rbwtypfs") Hbshtbblf fnv) throws SQLExdfption {


        try {
           rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
        } dbtdh(IOExdfption iof) {
            throw nfw RuntimfExdfption(iof);
        }

        if (fnv == null) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.nullhbsh").toString());
        }

        String providfrNbmf = (String)fnv.gft(
        jbvbx.sql.rowsft.spi.SyndFbdtory.ROWSET_SYNC_PROVIDER);

        // sft thf Rfbdfr, this mbybf ovfrriddfn lbttfr
        providfr =
        SyndFbdtory.gftInstbndf(providfrNbmf);

        rowSftRfbdfr = providfr.gftRowSftRfbdfr();
        rowSftWritfr = providfr.gftRowSftWritfr();

        initPbrbms(); // bllodbtf thf pbrbmftfrs dollfdtion
        initContbinfr();
        initPropfrtifs(); // sft up somf dffbult vblufs
    }

    /**
     * Sfts thf <dodf>rvh</dodf> fifld to b nfw <dodf>Vfdtor</dodf>
     * objfdt with b dbpbdity of 100 bnd sfts thf
     * <dodf>dursorPos</dodf> bnd <dodf>numRows</dodf> fiflds to zfro.
     */
    privbtf void initContbinfr() {

        rvh = nfw Vfdtor<Objfdt>(100);
        dursorPos = 0;
        bbsolutfPos = 0;
        numRows = 0;
        numDflftfd = 0;
    }

    /**
     * Sfts thf propfrtifs for this <dodf>CbdhfdRowSftImpl</dodf> objfdt to
     * thfir dffbult vblufs. This mfthod is dbllfd intfrnblly by thf
     * dffbult donstrudtor.
     */

    privbtf void initPropfrtifs() throws SQLExdfption {

        if(rfsBundlf == null) {
            try {
               rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
            } dbtdh(IOExdfption iof) {
                throw nfw RuntimfExdfption(iof);
            }
        }
        sftShowDflftfd(fblsf);
        sftQufryTimfout(0);
        sftMbxRows(0);
        sftMbxFifldSizf(0);
        sftTypf(RfsultSft.TYPE_SCROLL_INSENSITIVE);
        sftCondurrfndy(RfsultSft.CONCUR_UPDATABLE);
        if((rvh.sizf() > 0) && (isRfbdOnly() == fblsf))
            sftRfbdOnly(fblsf);
        flsf
            sftRfbdOnly(truf);
        sftTrbnsbdtionIsolbtion(Connfdtion.TRANSACTION_READ_COMMITTED);
        sftEsdbpfProdfssing(truf);
        //sftTypfMbp(null);
        dhfdkTrbnsbdtionblWritfr();

        //Instbntibting thf vfdtor for MbtdhColumns

        iMbtdhColumns = nfw Vfdtor<Intfgfr>(10);
        for(int i = 0; i < 10 ; i++) {
           iMbtdhColumns.bdd(i, -1);
        }

        strMbtdhColumns = nfw Vfdtor<String>(10);
        for(int j = 0; j < 10; j++) {
           strMbtdhColumns.bdd(j,null);
        }
    }

    /**
     * Dftfrminf whfthfr thf SyndProvidfr's writfr implfmfnts thf
     * <dodf>TrbnsbdtionblWritfr<dodf> intfrfbdf
     */
    privbtf void dhfdkTrbnsbdtionblWritfr() {
        if (rowSftWritfr != null) {
            Clbss<?> d = rowSftWritfr.gftClbss();
            if (d != null) {
                Clbss<?>[] thfIntfrfbdfs = d.gftIntfrfbdfs();
                for (int i = 0; i < thfIntfrfbdfs.lfngth; i++) {
                    if ((thfIntfrfbdfs[i].gftNbmf()).indfxOf("TrbnsbdtionblWritfr") > 0) {
                        tXWritfr = truf;
                        fstbblishTrbnsbdtionblWritfr();
                    }
                }
            }
        }
    }

    /**
     * Sfts bn privbtf fifld to bll trbnsbdtion bounddbrifs to bf sft
     */
    privbtf void fstbblishTrbnsbdtionblWritfr() {
        tWritfr = (TrbnsbdtionblWritfr)providfr.gftRowSftWritfr();
    }

    //-----------------------------------------------------------------------
    // Propfrtifs
    //-----------------------------------------------------------------------

    /**
     * Sfts this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dommbnd propfrty
     * to thf givfn <dodf>String</dodf> objfdt bnd dlfbrs thf pbrbmftfrs,
     * if bny, thbt wfrf sft for thf prfvious dommbnd.
     * <P>
     * Thf dommbnd propfrty mby not bf nffdfd
     * if thf rowsft is produdfd by b dbtb sourdf, sudh bs b sprfbdshfft,
     * thbt dofs not support dommbnds. Thus, this propfrty is optionbl
     * bnd mby bf <dodf>null</dodf>.
     *
     * @pbrbm dmd b <dodf>String</dodf> objfdt dontbining bn SQL qufry
     *            thbt will bf sft bs thf dommbnd; mby bf <dodf>null</dodf>
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void sftCommbnd(String dmd) throws SQLExdfption {

        supfr.sftCommbnd(dmd);

        if(!buildTbblfNbmf(dmd).fqubls("")) {
            this.sftTbblfNbmf(buildTbblfNbmf(dmd));
        }
    }


    //---------------------------------------------------------------------
    // Rfbding bnd writing dbtb
    //---------------------------------------------------------------------

    /**
     * Populbtfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt with dbtb from
     * thf givfn <dodf>RfsultSft</dodf> objfdt.  This
     * mfthod is bn bltfrnbtivf to thf mfthod <dodf>fxfdutf</dodf>
     * for filling thf rowsft with dbtb.  Thf mfthod <dodf>populbtf</dodf>
     * dofs not rfquirf thbt thf propfrtifs nffdfd by thf mfthod
     * <dodf>fxfdutf</dodf>, sudh bs thf <dodf>dommbnd</dodf> propfrty,
     * bf sft. This is truf bfdbusf thf mfthod <dodf>populbtf</dodf>
     * is givfn thf <dodf>RfsultSft</dodf> objfdt from
     * whidh to gft dbtb bnd thus dofs not nffd to usf thf propfrtifs
     * rfquirfd for sftting up b donnfdtion bnd fxfduting this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt's dommbnd.
     * <P>
     * Aftfr populbting this rowsft with dbtb, thf mfthod
     * <dodf>populbtf</dodf> sfts thf rowsft's mftbdbtb bnd
     * thfn sfnds b <dodf>RowSftChbngfdEvfnt</dodf> objfdt
     * to bll rfgistfrfd listfnfrs prior to rfturning.
     *
     * @pbrbm dbtb thf <dodf>RfsultSft</dodf> objfdt dontbining thf dbtb
     *             to bf rfbd into this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if bn frror oddurs; or thf mbx row sftting is
     *          violbtfd whilf populbting thf RowSft
     * @sff #fxfdutf
     */

     publid void populbtf(RfsultSft dbtb) throws SQLExdfption {
        int rowsFftdhfd;
        Row durrfntRow;
        int numCols;
        int i;
        Mbp<String, Clbss<?>> mbp = gftTypfMbp();
        Objfdt obj;
        int mRows;

        if (dbtb == null) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.populbtf").toString());
        }
        this.rfsultSft = dbtb;

        // gft thf mftb dbtb for this RfsultSft
        RSMD = dbtb.gftMftbDbtb();

        // sft up thf mftbdbtb
        RowSftMD = nfw RowSftMftbDbtbImpl();
        initMftbDbtb(RowSftMD, RSMD);

        // rflfbsf thf mftb-dbtb so thbt brfn't tfmptfd to usf it.
        RSMD = null;
        numCols = RowSftMD.gftColumnCount();
        mRows = this.gftMbxRows();
        rowsFftdhfd = 0;
        durrfntRow = null;

        whilf ( dbtb.nfxt()) {

            durrfntRow = nfw Row(numCols);

            if ( rowsFftdhfd > mRows && mRows > 0) {
                rowsftWbrning.sftNfxtWbrning(nfw RowSftWbrning("Populbting rows "
                + "sftting hbs fxdffdfd mbx row sftting"));
            }
            for ( i = 1; i <= numCols; i++) {
                /*
                 * dhfdk if thf usfr hbs sft b mbp. If no mbp
                 * is sft thfn usf plbin gftObjfdt. This lfts
                 * us work with drivfrs thbt do not support
                 * gftObjfdt with b mbp in fbirly sfnsiblf wby
                 */
                if (mbp == null || mbp.isEmpty()) {
                    obj = dbtb.gftObjfdt(i);
                } flsf {
                    obj = dbtb.gftObjfdt(i, mbp);
                }
                /*
                 * thf following blodk dhfdks for thf vbrious
                 * typfs thbt wf hbvf to sfriblizf in ordfr to
                 * storf - right now only strudts hbvf bffn tfstfd
                 */
                if (obj instbndfof Strudt) {
                    obj = nfw SfriblStrudt((Strudt)obj, mbp);
                } flsf if (obj instbndfof SQLDbtb) {
                    obj = nfw SfriblStrudt((SQLDbtb)obj, mbp);
                } flsf if (obj instbndfof Blob) {
                    obj = nfw SfriblBlob((Blob)obj);
                } flsf if (obj instbndfof Clob) {
                    obj = nfw SfriblClob((Clob)obj);
                } flsf if (obj instbndfof jbvb.sql.Arrby) {
                    if(mbp != null)
                        obj = nfw SfriblArrby((jbvb.sql.Arrby)obj, mbp);
                    flsf
                        obj = nfw SfriblArrby((jbvb.sql.Arrby)obj);
                }

                durrfntRow.initColumnObjfdt(i, obj);
            }
            rowsFftdhfd++;
            rvh.bdd(durrfntRow);
        }

        numRows = rowsFftdhfd ;
        // Also rowsFftdhfd should bf fqubl to rvh.sizf()

        // notify bny listfnfrs thbt thf rowsft hbs dhbngfd
        notifyRowSftChbngfd();


    }

    /**
     * Initiblizfs thf givfn <dodf>RowSftMftbDbtb</dodf> objfdt with thf vblufs
     * in thf givfn <dodf>RfsultSftMftbDbtb</dodf> objfdt.
     *
     * @pbrbm md thf <dodf>RowSftMftbDbtb</dodf> objfdt for this
     *           <dodf>CbdhfdRowSftImpl</dodf> objfdt, whidh will bf sft with
     *           vblufs from rsmd
     * @pbrbm rsmd thf <dodf>RfsultSftMftbDbtb</dodf> objfdt from whidh nfw
     *             vblufs for md will bf rfbd
     * @throws SQLExdfption if bn frror oddurs
     */
    privbtf void initMftbDbtb(RowSftMftbDbtbImpl md, RfsultSftMftbDbtb rsmd) throws SQLExdfption {
        int numCols = rsmd.gftColumnCount();

        md.sftColumnCount(numCols);
        for (int dol=1; dol <= numCols; dol++) {
            md.sftAutoIndrfmfnt(dol, rsmd.isAutoIndrfmfnt(dol));
            if(rsmd.isAutoIndrfmfnt(dol))
                updbtfOnInsfrt = truf;
            md.sftCbsfSfnsitivf(dol, rsmd.isCbsfSfnsitivf(dol));
            md.sftCurrfndy(dol, rsmd.isCurrfndy(dol));
            md.sftNullbblf(dol, rsmd.isNullbblf(dol));
            md.sftSignfd(dol, rsmd.isSignfd(dol));
            md.sftSfbrdhbblf(dol, rsmd.isSfbrdhbblf(dol));
             /*
             * Thf PostgrfSQL drivfrs somftimfs rfturn nfgbtivf dolumnDisplbySizf,
             * whidh dbusfs bn fxdfption to bf thrown.  Chfdk for it.
             */
            int sizf = rsmd.gftColumnDisplbySizf(dol);
            if (sizf < 0) {
                sizf = 0;
            }
            md.sftColumnDisplbySizf(dol, sizf);
            md.sftColumnLbbfl(dol, rsmd.gftColumnLbbfl(dol));
            md.sftColumnNbmf(dol, rsmd.gftColumnNbmf(dol));
            md.sftSdhfmbNbmf(dol, rsmd.gftSdhfmbNbmf(dol));
            /*
             * Drivfrs rfturn somf strbngf vblufs for prfdision, for non-numfrid dbtb, indluding rfports of
             * non-intfgfr vblufs; mbybf wf should dhfdk typf, & sft to 0 for non-numfrid typfs.
             */
            int prfdision = rsmd.gftPrfdision(dol);
            if (prfdision < 0) {
                prfdision = 0;
            }
            md.sftPrfdision(dol, prfdision);

            /*
             * It sffms, from b bug rfport, thbt b drivfr dbn somftimfs rfturn b nfgbtivf
             * vbluf for sdblf.  jbvbx.sql.rowsft.RowSftMftbDbtbImpl will throw bn fxdfption
             * if wf bttfmpt to sft b nfgbtivf vbluf.  As sudh, wf'll dhfdk for this dbsf.
             */
            int sdblf = rsmd.gftSdblf(dol);
            if (sdblf < 0) {
                sdblf = 0;
            }
            md.sftSdblf(dol, sdblf);
            md.sftTbblfNbmf(dol, rsmd.gftTbblfNbmf(dol));
            md.sftCbtblogNbmf(dol, rsmd.gftCbtblogNbmf(dol));
            md.sftColumnTypf(dol, rsmd.gftColumnTypf(dol));
            md.sftColumnTypfNbmf(dol, rsmd.gftColumnTypfNbmf(dol));
        }

        if( donn != null){
           // JDBC 4.0 mbndbtfs bs dofs thf Jbvb EE spfd thbt bll DbtbBbsfMftbDbtb mfthods
           // must bf implfmfntfd, thfrfforf, thf prfvious fix for 5055528 is bfing bbdkfd out
            dbmslodbtorsUpdbtfCopy = donn.gftMftbDbtb().lodbtorsUpdbtfCopy();
        }
    }

    /**
     * Populbtfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt with dbtb,
     * using thf givfn donnfdtion to produdf thf rfsult sft from
     * whidh dbtb will bf rfbd.  A sfdond form of this mfthod,
     * whidh tbkfs no brgumfnts, usfs thf vblufs from this rowsft's
     * usfr, pbssword, bnd fithfr url or dbtb sourdf propfrtifs to
     * drfbtf b nfw dbtbbbsf donnfdtion. Thf form of <dodf>fxfdutf</dodf>
     * thbt is givfn b donnfdtion ignorfs thfsf propfrtifs.
     *
     * @pbrbm donn A stbndbrd JDBC <dodf>Connfdtion</dodf> objfdt thbt this
     * <dodf>CbdhfdRowSft</dodf> objfdt dbn pbss to b syndhronizbtion providfr
     * to fstbblish b donnfdtion to thf dbtb sourdf
     * @throws SQLExdfption if bn invblid <dodf>Connfdtion</dodf> is supplifd
     *           or bn frror oddurs in fstbblishing thf donnfdtion to thf
     *           dbtb sourdf
     * @sff #populbtf
     * @sff jbvb.sql.Connfdtion
     */
    publid void fxfdutf(Connfdtion donn) throws SQLExdfption {
        // storf thf donnfdtion so thf rfbdfr dbn find it.
        sftConnfdtion(donn);

        if(gftPbgfSizf() != 0){
            drsRfbdfr = (CbdhfdRowSftRfbdfr)providfr.gftRowSftRfbdfr();
            drsRfbdfr.sftStbrtPosition(1);
            dbllWithCon = truf;
            drsRfbdfr.rfbdDbtb((RowSftIntfrnbl)this);
        }

        // Now dbll thf durrfnt rfbdfr's rfbdDbtb mfthod
        flsf {
           rowSftRfbdfr.rfbdDbtb((RowSftIntfrnbl)this);
        }
        RowSftMD = (RowSftMftbDbtbImpl)this.gftMftbDbtb();

        if(donn != null){
            // JDBC 4.0 mbndbtfs bs dofs thf Jbvb EE spfd thbt bll DbtbBbsfMftbDbtb mfthods
            // must bf implfmfntfd, thfrfforf, thf prfvious fix for 5055528 is bfing bbdkfd out
            dbmslodbtorsUpdbtfCopy = donn.gftMftbDbtb().lodbtorsUpdbtfCopy();
        }

    }

    /**
     * Sfts this <dodf>CbdhfdRowSftImpl</dodf> objfdt's donnfdtion propfrty
     * to thf givfn <dodf>Connfdtion</dodf> objfdt.  This mfthod is dbllfd
     * intfrnblly by thf vfrsion of thf mfthod <dodf>fxfdutf</dodf> thbt tbkfs b
     * <dodf>Connfdtion</dodf> objfdt bs bn brgumfnt. Thf rfbdfr for this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt dbn rftrifvf thf donnfdtion storfd
     * in thf rowsft's donnfdtion propfrty by dblling its
     * <dodf>gftConnfdtion</dodf> mfthod.
     *
     * @pbrbm donnfdtion thf <dodf>Connfdtion</dodf> objfdt thbt wbs pbssfd in
     *                   to thf mfthod <dodf>fxfdutf</dodf> bnd is to bf storfd
     *                   in this <dodf>CbdhfdRowSftImpl</dodf> objfdt's donnfdtion
     *                   propfrty
     */
    privbtf void sftConnfdtion (Connfdtion donnfdtion) {
        donn = donnfdtion;
    }


    /**
     * Propbgbtfs bll row updbtf, insfrt, bnd dflftf dhbngfs to thf
     * undfrlying dbtb sourdf bbdking this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt.
     * <P>
     * <b>Notf</b>In thf rfffrfndf implfmfntbtion bn optimistid dondurrfndy implfmfntbtion
     * is providfd bs b sbmplf implfmfntbtion of b thf <dodf>SyndProvidfr</dodf>
     * bbstrbdt dlbss.
     * <P>
     * This mfthod fbils if bny of thf updbtfs dbnnot bf propbgbtfd bbdk
     * to thf dbtb sourdf.  Whfn it fbils, thf dbllfr dbn bssumf thbt
     * nonf of thf updbtfs brf rfflfdtfd in thf dbtb sourdf.
     * Whfn bn fxdfption is thrown, thf durrfnt row
     * is sft to thf first "updbtfd" row thbt rfsultfd in bn fxdfption
     * unlfss thf row thbt dbusfd thf fxdfption is b "dflftfd" row.
     * In thbt dbsf, whfn dflftfd rows brf not shown, whidh is usublly truf,
     * thf durrfnt row is not bfffdtfd.
     * <P>
     * If no <dodf>SyndProvidfr</dodf> is donfigurfd, thf rfffrfndf implfmfntbtion
     * lfvfrbgfs thf <dodf>RIOptimistidProvidfr</dodf> bvbilbblf whidh providfs thf
     * dffbult bnd rfffrfndf syndhronizbtion dbpbbilitifs for disdonnfdtfd
     * <dodf>RowSfts</dodf>.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row or thf undfrlying
     *          rfffrfndf syndhronizbtion providfr fbils to dommit thf updbtfs
     *          to thf dbtbsourdf
     * @throws SyndProvidfrExdfption if bn intfrnbl frror oddurs within thf
     *          <dodf>SyndProvidfr</dodf> instbndf during fithfr during thf
     *          prodfss or bt bny timf whfn thf <dodf>SyndProvidfr</dodf>
     *          instbndf toudhfs thf dbtb sourdf.
     * @sff #bddfptChbngfs(jbvb.sql.Connfdtion)
     * @sff jbvbx.sql.RowSftWritfr
     * @sff jbvbx.sql.rowsft.spi.SyndProvidfr
     */
    publid void bddfptChbngfs() throws SyndProvidfrExdfption {
        if (onInsfrtRow == truf) {
            throw nfw SyndProvidfrExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invblidop").toString());
        }

        int sbvfCursorPos = dursorPos;
        boolfbn suddfss = fblsf;
        boolfbn donflidt = fblsf;

        try {
            if (rowSftWritfr != null) {
                sbvfCursorPos = dursorPos;
                donflidt = rowSftWritfr.writfDbtb((RowSftIntfrnbl)this);
                dursorPos = sbvfCursorPos;
            }

            if (tXWritfr) {
                // do dommit/rollbbdk's hfrf
                if (!donflidt) {
                    tWritfr = (TrbnsbdtionblWritfr)rowSftWritfr;
                    tWritfr.rollbbdk();
                    suddfss = fblsf;
                } flsf {
                    tWritfr = (TrbnsbdtionblWritfr)rowSftWritfr;
                    if (tWritfr instbndfof CbdhfdRowSftWritfr) {
                        ((CbdhfdRowSftWritfr)tWritfr).dommit(this, updbtfOnInsfrt);
                    } flsf {
                        tWritfr.dommit();
                    }

                    suddfss = truf;
                }
            }

            if (suddfss == truf) {
                sftOriginbl();
            } flsf if (!(suddfss) ) {
                throw nfw SyndProvidfrExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.bddfbilfd").toString());
            }

        } dbtdh (SyndProvidfrExdfption spf) {
               throw spf;
        } dbtdh (SQLExdfption f) {
            f.printStbdkTrbdf();
            throw nfw SyndProvidfrExdfption(f.gftMfssbgf());
        } dbtdh (SfdurityExdfption f) {
            throw nfw SyndProvidfrExdfption(f.gftMfssbgf());
        }
    }

    /**
     * Propbgbtfs bll row updbtf, insfrt, bnd dflftf dhbngfs to thf
     * dbtb sourdf bbdking this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * using thf givfn <dodf>Connfdtion</dodf> objfdt.
     * <P>
     * Thf rfffrfndf implfmfntbtion <dodf>RIOptimistidProvidfr</dodf>
     * modififs its syndhronizbtion to b writf bbdk fundtion givfn
     * thf updbtfd donnfdtion
     * Thf rfffrfndf implfmfntbtion modififs its syndhronizbtion bfhbviour
     * vib thf <dodf>SyndProvidfr</dodf> to fnsurf thf syndhronizbtion
     * oddurs bddording to thf updbtfd JDBC <dodf>Connfdtion</dodf>
     * propfrtifs.
     *
     * @pbrbm don b stbndbrd JDBC <dodf>Connfdtion</dodf> objfdt
     * @throws SQLExdfption if thf dursor is on thf insfrt row or thf undfrlying
     *                   syndhronizbtion providfr fbils to dommit thf updbtfs
     *                   bbdk to thf dbtb sourdf
     * @sff #bddfptChbngfs
     * @sff jbvbx.sql.RowSftWritfr
     * @sff jbvbx.sql.rowsft.spi.SyndFbdtory
     * @sff jbvbx.sql.rowsft.spi.SyndProvidfr
     */
    publid void bddfptChbngfs(Connfdtion don) throws SyndProvidfrExdfption{
      sftConnfdtion(don);
      bddfptChbngfs();
    }

    /**
     * Rfstorfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt to its originbl stbtf,
     * thbt is, its stbtf bfforf thf lbst sft of dhbngfs.
     * <P>
     * Bfforf rfturning, this mfthod movfs thf dursor bfforf thf first row
     * bnd sfnds b <dodf>rowSftChbngfd</dodf> fvfnt to bll rfgistfrfd
     * listfnfrs.
     * @throws SQLExdfption if bn frror is oddurs rolling bbdk thf RowSft
     *           stbtf to thf dffinifd originbl vbluf.
     * @sff jbvbx.sql.RowSftListfnfr#rowSftChbngfd
     */
    publid void rfstorfOriginbl() throws SQLExdfption {
        Row durrfntRow;
        for (Itfrbtor<?> i = rvh.itfrbtor(); i.hbsNfxt();) {
            durrfntRow = (Row)i.nfxt();
            if (durrfntRow.gftInsfrtfd() == truf) {
                i.rfmovf();
                --numRows;
            } flsf {
                if (durrfntRow.gftDflftfd() == truf) {
                    durrfntRow.dlfbrDflftfd();
                }
                if (durrfntRow.gftUpdbtfd() == truf) {
                    durrfntRow.dlfbrUpdbtfd();
                }
            }
        }
        // movf to bfforf thf first
        dursorPos = 0;

        // notify bny listfnfrs
        notifyRowSftChbngfd();
    }

    /**
     * Rflfbsfs thf durrfnt dontfnts of this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt bnd sfnds b <dodf>rowSftChbngfd</dodf> fvfnt objfdt to bll
     * rfgistfrfd listfnfrs.
     *
     * @throws SQLExdfption if bn frror oddurs flushing thf dontfnts of
     *           RowSft.
     * @sff jbvbx.sql.RowSftListfnfr#rowSftChbngfd
     */
    publid void rflfbsf() throws SQLExdfption {
        initContbinfr();
        notifyRowSftChbngfd();
    }

    /**
     * Cbndfls dflftion of thf durrfnt row bnd notififs listfnfrs thbt
     * b row hbs dhbngfd.
     * <P>
     * Notf:  This mfthod dbn bf ignorfd if dflftfd rows brf not bfing shown,
     * whidh is thf normbl dbsf.
     *
     * @throws SQLExdfption if thf dursor is not on b vblid row
     */
    publid void undoDflftf() throws SQLExdfption {
        if (gftShowDflftfd() == fblsf) {
            rfturn;
        }
        // mbkf surf wf brf on b row
        dhfdkCursor();

        // don't wbnt this to hbppfn...
        if (onInsfrtRow == truf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbliddp").toString());
        }

        Row durrfntRow = (Row)gftCurrfntRow();
        if (durrfntRow.gftDflftfd() == truf) {
            durrfntRow.dlfbrDflftfd();
            --numDflftfd;
            notifyRowChbngfd();
        }
    }

    /**
     * Immfdibtfly rfmovfs thf durrfnt row from this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt if thf row hbs bffn insfrtfd, bnd
     * blso notififs listfnfrs thf b row hbs dhbngfd.  An fxdfption is thrown
     * if thf row is not b row thbt hbs bffn insfrtfd or thf dursor is bfforf
     * thf first row, bftfr thf lbst row, or on thf insfrt row.
     * <P>
     * This opfrbtion dbnnot bf undonf.
     *
     * @throws SQLExdfption if bn frror oddurs,
     *                         thf dursor is not on b vblid row,
     *                         or thf row hbs not bffn insfrtfd
     */
    publid void undoInsfrt() throws SQLExdfption {
        // mbkf surf wf brf on b row
        dhfdkCursor();

        // don't wbnt this to hbppfn...
        if (onInsfrtRow == truf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbliddp").toString());
        }

        Row durrfntRow = (Row)gftCurrfntRow();
        if (durrfntRow.gftInsfrtfd() == truf) {
            rvh.rfmovf(dursorPos-1);
            --numRows;
            notifyRowChbngfd();
        } flsf {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.illfgblop").toString());
        }
    }

    /**
     * Immfdibtfly rfvfrsfs thf lbst updbtf opfrbtion if thf
     * row hbs bffn modififd. This mfthod dbn bf
     * dbllfd to rfvfrsf updbtfs on b bll dolumns until bll updbtfs in b row hbvf
     * bffn rollfd bbdk to thfir originbting stbtf sindf thf lbst syndhronizbtion
     * (<dodf>bddfptChbngfs</dodf>) or populbtion. This mfthod mby blso bf dbllfd
     * whilf pfrforming updbtfs to thf insfrt row.
     * <P>
     * <dodf>undoUpdbtf</dodf mby bf dbllfd bt bny timf during thf liff-timf of b
     * rowsft, howfvfr bftfr b syndhronizbtion hbs oddurs this mfthod hbs no
     * bfffdt until furthfr modifidbtion to thf RowSft dbtb oddurs.
     *
     * @throws SQLExdfption if dursor is bfforf thf first row, bftfr thf lbst
     *     row in rowsft.
     * @sff #undoDflftf
     * @sff #undoInsfrt
     * @sff jbvb.sql.RfsultSft#dbndflRowUpdbtfs
     */
    publid void undoUpdbtf() throws SQLExdfption {
        // if on insfrt row, dbndfl thf insfrt row
        // mbkf thf insfrt row flbg,
        // dursorPos bbdk to thf durrfnt row
        movfToCurrfntRow();

        // flsf if not on insfrt row
        // dbll undoUpdbtf or undoInsfrt
        undoDflftf();

        undoInsfrt();

    }

    //--------------------------------------------------------------------
    // Vifws
    //--------------------------------------------------------------------

    /**
     * Rfturns b nfw <dodf>RowSft</dodf> objfdt bbdkfd by thf sbmf dbtb bs
     * thbt of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bnd shbring b sft of dursors
     * with it. This bllows dursors to intfrbtf ovfr b shbrfd sft of rows, providing
     * multiplf vifws of thf undfrlying dbtb.
     *
     * @rfturn b <dodf>RowSft</dodf> objfdt thbt is b dopy of this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt bnd shbrfs b sft of dursors with it
     * @throws SQLExdfption if bn frror oddurs or dloning is
     *                         not supportfd
     * @sff jbvbx.sql.RowSftEvfnt
     * @sff jbvbx.sql.RowSftListfnfr
     */
    publid RowSft drfbtfShbrfd() throws SQLExdfption {
        RowSft dlonf;
        try {
            dlonf = (RowSft)dlonf();
        } dbtdh (ClonfNotSupportfdExdfption fx) {
            throw nfw SQLExdfption(fx.gftMfssbgf());
        }
        rfturn dlonf;
    }

    /**
     * Rfturns b nfw <dodf>RowSft</dodf> objfdt dontbining by thf sbmf dbtb
     * bs this <dodf>CbdhfdRowSftImpl</dodf> objfdt.  This mfthod
     * difffrs from thf mfthod <dodf>drfbtfCopy</dodf> in thbt it throws b
     * <dodf>ClonfNotSupportfdExdfption</dodf> objfdt instfbd of bn
     * <dodf>SQLExdfption</dodf> objfdt, bs thf mfthod <dodf>drfbtfShbrfd</dodf>
     * dofs.  This <dodf>dlonf</dodf>
     * mfthod is dbllfd intfrnblly by thf mfthod <dodf>drfbtfShbrfd</dodf>,
     * whidh dbtdhfs thf <dodf>ClonfNotSupportfdExdfption</dodf> objfdt
     * bnd in turn throws b nfw <dodf>SQLExdfption</dodf> objfdt.
     *
     * @rfturn b dopy of this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws ClonfNotSupportfdExdfption if bn frror oddurs whfn
     * bttfmpting to dlonf this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @sff #drfbtfShbrfd
     */
    protfdtfd Objfdt dlonf() throws ClonfNotSupportfdExdfption  {
        rfturn (supfr.dlonf());
    }

    /**
     * Crfbtfs b <dodf>RowSft</dodf> objfdt thbt is b dffp dopy of
     * this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dbtb, indluding
     * donstrbints.  Updbtfs mbdf
     * on b dopy brf not visiblf to thf originbl rowsft;
     * b dopy of b rowsft is domplftfly indfpfndfnt from thf originbl.
     * <P>
     * Mbking b dopy sbvfs thf dost of drfbting bn idfntidbl rowsft
     * from first prindiplfs, whidh dbn bf quitf fxpfnsivf.
     * For fxbmplf, it dbn fliminbtf thf nffd to qufry b
     * rfmotf dbtbbbsf sfrvfr.
     * @rfturn b nfw <dodf>CbdhfdRowSft</dodf> objfdt thbt is b dffp dopy
     *           of this <dodf>CbdhfdRowSft</dodf> objfdt bnd is
     *           domplftfly indfpfndfnt from this <dodf>CbdhfdRowSftImpl</dodf>
     *           objfdt.
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf dopy of this
     *           of thf <dodf>CbdhfdRowSftImpl</dodf>
     * @sff #drfbtfShbrfd
     * @sff jbvbx.sql.RowSftEvfnt
     * @sff jbvbx.sql.RowSftListfnfr
     */
    publid CbdhfdRowSft drfbtfCopy() throws SQLExdfption {
        ObjfdtOutputStrfbm out;
        BytfArrbyOutputStrfbm bOut = nfw BytfArrbyOutputStrfbm();
        try {
            out = nfw ObjfdtOutputStrfbm(bOut);
            out.writfObjfdt(this);
        } dbtdh (IOExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dlonffbil").toString() , fx.gftMfssbgf()));
        }

        ObjfdtInputStrfbm in;

        try {
            BytfArrbyInputStrfbm bIn = nfw BytfArrbyInputStrfbm(bOut.toBytfArrby());
            in = nfw ObjfdtInputStrfbm(bIn);
        } dbtdh (StrfbmCorruptfdExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dlonffbil").toString() , fx.gftMfssbgf()));
        } dbtdh (IOExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dlonffbil").toString() , fx.gftMfssbgf()));
        }

        try {
            //rfturn ((CbdhfdRowSft)(in.rfbdObjfdt()));
            CbdhfdRowSftImpl drsTfmp = (CbdhfdRowSftImpl)in.rfbdObjfdt();
            drsTfmp.rfsBundlf = this.rfsBundlf;
            rfturn ((CbdhfdRowSft)drsTfmp);

        } dbtdh (ClbssNotFoundExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dlonffbil").toString() , fx.gftMfssbgf()));
        } dbtdh (OptionblDbtbExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dlonffbil").toString() , fx.gftMfssbgf()));
        } dbtdh (IOExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dlonffbil").toString() , fx.gftMfssbgf()));
        }
    }

    /**
     * Crfbtfs b <dodf>RowSft</dodf> objfdt thbt is b dopy of
     * this <dodf>CbdhfdRowSftImpl</dodf> objfdt's tbblf strudturf
     * bnd thf donstrbints only.
     * Thfrf will bf no dbtb in thf objfdt bfing rfturnfd.
     * Updbtfs mbdf on b dopy brf not visiblf to thf originbl rowsft.
     * <P>
     * This hflps in gftting thf undfrlying XML sdhfmb whidh dbn
     * bf usfd bs thf bbsis for populbting b <dodf>WfbRowSft</dodf>.
     *
     * @rfturn b nfw <dodf>CbdhfdRowSft</dodf> objfdt thbt is b dopy
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt's sdhfmb bnd
     * rftbins bll thf donstrbints on thf originbl rowsft but dontbins
     * no dbtb
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf dopy
     * of thf <dodf>CbdhfdRowSft</dodf> objfdt
     * @sff #drfbtfShbrfd
     * @sff #drfbtfCopy
     * @sff #drfbtfCopyNoConstrbints
     * @sff jbvbx.sql.RowSftEvfnt
     * @sff jbvbx.sql.RowSftListfnfr
     */
    publid CbdhfdRowSft drfbtfCopySdhfmb() throws SQLExdfption {
        // Copy fvfrything fxdfpt dbtb i.f bll donstrbints

        // Storf thf numbfr of rows of "this"
        // bnd mbkf numRows fqubls zfro.
        // bnd mbkf dbtb blso zfro.
        int nRows = numRows;
        numRows = 0;

        CbdhfdRowSft drs = this.drfbtfCopy();

        // rfsft this objfdt bbdk to numbfr of rows.
        numRows = nRows;

        rfturn drs;
    }

    /**
     * Crfbtfs b <dodf>CbdhfdRowSft</dodf> objfdt thbt is b dopy of
     * this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dbtb only.
     * All donstrbints sft in this objfdt will not bf thfrf
     * in thf rfturning objfdt.  Updbtfs mbdf
     * on b dopy brf not visiblf to thf originbl rowsft.
     *
     * @rfturn b nfw <dodf>CbdhfdRowSft</dodf> objfdt thbt is b dffp dopy
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bnd is
     * domplftfly indfpfndfnt from this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf dopy of thf
     * of thf <dodf>CbdhfdRowSft</dodf>
     * @sff #drfbtfShbrfd
     * @sff #drfbtfCopy
     * @sff #drfbtfCopySdhfmb
     * @sff jbvbx.sql.RowSftEvfnt
     * @sff jbvbx.sql.RowSftListfnfr
     */
    publid CbdhfdRowSft drfbtfCopyNoConstrbints() throws SQLExdfption {
        // Copy thf wholf dbtb ONLY without bny donstrbints.
        CbdhfdRowSftImpl drs;
        drs = (CbdhfdRowSftImpl)this.drfbtfCopy();

        drs.initPropfrtifs();
        try {
            drs.unsftMbtdhColumn(drs.gftMbtdhColumnIndfxfs());
        } dbtdh(SQLExdfption sqlf) {
            //do nothing, if thf sftMbtdhColumn is not sft.
        }

        try {
            drs.unsftMbtdhColumn(drs.gftMbtdhColumnNbmfs());
        } dbtdh(SQLExdfption sqlf) {
            //do nothing, if thf sftMbtdhColumn is not sft.
        }

        rfturn drs;
    }

    /**
     * Convfrts this <dodf>CbdhfdRowSftImpl</dodf> objfdt to b dollfdtion
     * of tbblfs. Thf sbmplf implfmfntbtion utilitizfs thf <dodf>TrffMbp</dodf>
     * dollfdtion typf.
     * This dlbss gubrbntffs thbt thf mbp will bf in bsdfnding kfy ordfr,
     * sortfd bddording to thf nbturbl ordfr for thf kfy's dlbss.
     *
     * @rfturn b <dodf>Collfdtion</dodf> objfdt donsisting of tbblfs,
     *         fbdh of whidh is b dopy of b row in this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf dollfdtion
     * @sff #toCollfdtion(int)
     * @sff #toCollfdtion(String)
     * @sff jbvb.util.TrffMbp
     */
    publid Collfdtion<?> toCollfdtion() throws SQLExdfption {

        TrffMbp<Intfgfr, Objfdt> tMbp = nfw TrffMbp<>();

        for (int i = 0; i<numRows; i++) {
            tMbp.put(i, rvh.gft(i));
        }

        rfturn (tMbp.vblufs());
    }

    /**
     * Rfturns thf spfdififd dolumn of this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * bs b <dodf>Collfdtion</dodf> objfdt.  This mfthod mbkfs b dopy of thf
     * dolumn's dbtb bnd utilitizfs thf <dodf>Vfdtor</dodf> to fstbblish thf
     * dollfdtion. Thf <dodf>Vfdtor</dodf> dlbss implfmfnts b growbblf brrby
     * objfdts bllowing thf individubl domponfnts to bf bddfssfd using bn
     * bn intfgfr indfx similbr to thbt of bn brrby.
     *
     * @rfturn b <dodf>Collfdtion</dodf> objfdt thbt dontbins thf vbluf(s)
     *         storfd in thf spfdififd dolumn of this
     *         <dodf>CbdhfdRowSftImpl</dodf>
     *         objfdt
     * @throws SQLExdfption if bn frror oddurs gfnfrbtfd thf dollfdtion; or
     *          bn invblid dolumn is providfd.
     * @sff #toCollfdtion()
     * @sff #toCollfdtion(String)
     * @sff jbvb.util.Vfdtor
     */
    publid Collfdtion<?> toCollfdtion(int dolumn) throws SQLExdfption {

        int nRows = numRows;
        Vfdtor<Objfdt> vfd = nfw Vfdtor<>(nRows);

        // drfbtf b dopy
        CbdhfdRowSftImpl drsTfmp;
        drsTfmp = (CbdhfdRowSftImpl) this.drfbtfCopy();

        whilf(nRows!=0) {
            drsTfmp.nfxt();
            vfd.bdd(drsTfmp.gftObjfdt(dolumn));
            nRows--;
        }

        rfturn (Collfdtion)vfd;
    }

    /**
     * Rfturns thf spfdififd dolumn of this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * bs b <dodf>Collfdtion</dodf> objfdt.  This mfthod mbkfs b dopy of thf
     * dolumn's dbtb bnd utilitizfs thf <dodf>Vfdtor</dodf> to fstbblish thf
     * dollfdtion. Thf <dodf>Vfdtor</dodf> dlbss implfmfnts b growbblf brrby
     * objfdts bllowing thf individubl domponfnts to bf bddfssfd using bn
     * bn intfgfr indfx similbr to thbt of bn brrby.
     *
     * @rfturn b <dodf>Collfdtion</dodf> objfdt thbt dontbins thf vbluf(s)
     *         storfd in thf spfdififd dolumn of this
     *         <dodf>CbdhfdRowSftImpl</dodf>
     *         objfdt
     * @throws SQLExdfption if bn frror oddurs gfnfrbtfd thf dollfdtion; or
     *          bn invblid dolumn is providfd.
     * @sff #toCollfdtion()
     * @sff #toCollfdtion(int)
     * @sff jbvb.util.Vfdtor
     */
    publid Collfdtion<?> toCollfdtion(String dolumn) throws SQLExdfption {
        rfturn toCollfdtion(gftColIdxByNbmf(dolumn));
    }

    //--------------------------------------------------------------------
    // Advbndfd ffbturfs
    //--------------------------------------------------------------------


    /**
     * Rfturns thf <dodf>SyndProvidfr</dodf> implfmfntbtion bfing usfd
     * with this <dodf>CbdhfdRowSftImpl</dodf> implfmfntbtion rowsft.
     *
     * @rfturn thf SyndProvidfr usfd by thf rowsft. If not providfr wbs
     *          sft whfn thf rowsft wbs instbntibtfd, thf rfffrfndf
     *          implfmfntbtion (dffbult) providfr is rfturnfd.
     * @throws SQLExdfption if frror oddurs whilf rfturn thf
     *          <dodf>SyndProvidfr</dodf> instbndf.
     */
    publid SyndProvidfr gftSyndProvidfr() throws SQLExdfption {
        rfturn providfr;
    }

    /**
     * Sfts thf bdtivf <dodf>SyndProvidfr</dodf> bnd bttfmpts to lobd
     * lobd thf nfw providfr using thf <dodf>SyndFbdtory</dodf> SPI.
     *
     * @throws SQLExdfption if bn frror oddurs whilf rfsftting thf
     *          <dodf>SyndProvidfr</dodf>.
     */
    publid void sftSyndProvidfr(String providfrStr) throws SQLExdfption {
        providfr =
        SyndFbdtory.gftInstbndf(providfrStr);

        rowSftRfbdfr = providfr.gftRowSftRfbdfr();
        rowSftWritfr = providfr.gftRowSftWritfr();
    }


    //-----------------
    // mfthods inhfritfd from RowSft
    //-----------------






    //---------------------------------------------------------------------
    // Rfbding bnd writing dbtb
    //---------------------------------------------------------------------

    /**
     * Populbtfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt with dbtb.
     * This form of thf mfthod usfs thf rowsft's usfr, pbssword, bnd url or
     * dbtb sourdf nbmf propfrtifs to drfbtf b dbtbbbsf
     * donnfdtion.  If propfrtifs thbt brf nffdfd
     * hbvf not bffn sft, this mfthod will throw bn fxdfption.
     * <P>
     * Anothfr form of this mfthod usfs bn fxisting JDBC <dodf>Connfdtion</dodf>
     * objfdt instfbd of drfbting b nfw onf; thfrfforf, it ignorfs thf
     * propfrtifs usfd for fstbblishing b nfw donnfdtion.
     * <P>
     * Thf qufry spfdififd by thf dommbnd propfrty is fxfdutfd to drfbtf b
     * <dodf>RfsultSft</dodf> objfdt from whidh to rftrifvf dbtb.
     * Thf durrfnt dontfnts of thf rowsft brf disdbrdfd, bnd thf
     * rowsft's mftbdbtb is blso (rf)sft.  If thfrf brf outstbnding updbtfs,
     * thfy brf blso ignorfd.
     * <P>
     * Thf mfthod <dodf>fxfdutf</dodf> dlosfs bny dbtbbbsf donnfdtions thbt it
     * drfbtfs.
     *
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         nfdfssbry propfrtifs hbvf not bffn sft
     */
    publid void fxfdutf() throws SQLExdfption {
        fxfdutf(null);
    }



    //-----------------------------------
    // Mfthods inhfritfd from RfsultSft
    //-----------------------------------

    /**
     * Movfs thf dursor down onf row from its durrfnt position bnd
     * rfturns <dodf>truf</dodf> if thf nfw dursor position is b
     * vblid row.
     * Thf dursor for b nfw <dodf>RfsultSft</dodf> objfdt is initiblly
     * positionfd bfforf thf first row. Thf first dbll to thf mfthod
     * <dodf>nfxt</dodf> movfs thf dursor to thf first row, mbking it
     * thf durrfnt row; thf sfdond dbll mbkfs thf sfdond row thf
     * durrfnt row, bnd so on.
     *
     * <P>If bn input strfbm from thf prfvious row is opfn, it is
     * impliditly dlosfd. Thf <dodf>RfsultSft</dodf> objfdt's wbrning
     * dhbin is dlfbrfd whfn b nfw row is rfbd.
     *
     * @rfturn <dodf>truf</dodf> if thf nfw durrfnt row is vblid;
     *         <dodf>fblsf</dodf> if thfrf brf no morf rows
     * @throws SQLExdfption if bn frror oddurs or
     *            thf dursor is not positionfd in thf rowsft, bfforf
     *            thf first row, or bftfr thf lbst row
     */
    publid boolfbn nfxt() throws SQLExdfption {
        /*
         * mbkf surf things look sbnf. Thf dursor must bf
         * positionfd in thf rowsft or bfforf first (0) or
         * bftfr lbst (numRows + 1)
         */
        if (dursorPos < 0 || dursorPos >= numRows + 1) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbliddp").toString());
        }
        // now movf bnd notify
        boolfbn rft = this.intfrnblNfxt();
        notifyCursorMovfd();

        rfturn rft;
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf nfxt
     * row bnd rfturns <dodf>truf</dodf> if thf dursor is still in thf rowsft;
     * rfturns <dodf>fblsf</dodf> if thf dursor hbs movfd to thf position bftfr
     * thf lbst row.
     * <P>
     * This mfthod hbndlfs thf dbsfs whfrf thf dursor movfs to b row thbt
     * hbs bffn dflftfd.
     * If this rowsft shows dflftfd rows bnd thf dursor movfs to b row
     * thbt hbs bffn dflftfd, this mfthod movfs thf dursor to thf nfxt
     * row until thf dursor is on b row thbt hbs not bffn dflftfd.
     * <P>
     * Thf mfthod <dodf>intfrnblNfxt</dodf> is dbllfd by mfthods sudh bs
     * <dodf>nfxt</dodf>, <dodf>bbsolutf</dodf>, bnd <dodf>rflbtivf</dodf>,
     * bnd, bs its nbmf implifs, is only dbllfd intfrnblly.
     * <p>
     * This is b implfmfntbtion only mfthod bnd is not rfquirfd bs b stbndbrd
     * implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row in this
     *         rowsft; <dodf>fblsf</dodf> if it is bftfr thf lbst row
     * @throws SQLExdfption if bn frror oddurs
     */
    protfdtfd boolfbn intfrnblNfxt() throws SQLExdfption {
        boolfbn rft = fblsf;

        do {
            if (dursorPos < numRows) {
                ++dursorPos;
                rft = truf;
            } flsf if (dursorPos == numRows) {
                // indrfmfnt to bftfr lbst
                ++dursorPos;
                rft = fblsf;
                brfbk;
            }
        } whilf ((gftShowDflftfd() == fblsf) && (rowDflftfd() == truf));

        /* fbdh dbll to intfrnblNfxt mby indrfmfnt dursorPos multiplf
         * timfs howfvfr, thf bbsolutfPos only indrfmfnts ondf pfr dbll.
         */
        if (rft == truf)
            bbsolutfPos++;
        flsf
            bbsolutfPos = 0;

        rfturn rft;
    }

    /**
     * Closfs this <dodf>CbdhfdRowSftImpl</dodf> objfdy bnd rflfbsfs bny rfsourdfs
     * it wbs using.
     *
     * @throws SQLExdfption if bn frror oddurs whfn rflfbsing bny rfsourdfs in usf
     * by this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     */
    publid void dlosf() throws SQLExdfption {

        // dlosf bll dbtb strudturfs holding
        // thf disdonnfdtfd rowsft

        dursorPos = 0;
        bbsolutfPos = 0;
        numRows = 0;
        numDflftfd = 0;

        // sft bll insfrt(s), updbtf(s) & dflftf(s),
        // if bt bll, to thfir initibl vblufs.
        initPropfrtifs();

        // dlfbr thf vfdtor of it's prfsfnt dontfnts
        rvh.dlfbr();

        // this will mbkf it fligiblf for gd
        // rvh = null;
    }

    /**
     * Rfports whfthfr thf lbst dolumn rfbd wbs SQL <dodf>NULL</dodf>.
     * Notf thbt you must first dbll thf mfthod <dodf>gftXXX</dodf>
     * on b dolumn to try to rfbd its vbluf bnd thfn dbll thf mfthod
     * <dodf>wbsNull</dodf> to dftfrminf whfthfr thf vbluf wbs
     * SQL <dodf>NULL</dodf>.
     *
     * @rfturn <dodf>truf</dodf> if thf vbluf in thf lbst dolumn rfbd
     *         wbs SQL <dodf>NULL</dodf>; <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn wbsNull() throws SQLExdfption {
        rfturn lbstVblufNull;
    }

    /**
     * Sfts thf fifld <dodf>lbstVblufNull</dodf> to thf givfn
     * <dodf>boolfbn</dodf> vbluf.
     *
     * @pbrbm vbluf <dodf>truf</dodf> to indidbtf thbt thf vbluf of
     *        thf lbst dolumn rfbd wbs SQL <dodf>NULL</dodf>;
     *        <dodf>fblsf</dodf> to indidbtf thbt it wbs not
     */
    privbtf void sftLbstVblufNull(boolfbn vbluf) {
        lbstVblufNull = vbluf;
    }

    // Mfthods for bddfssing rfsults by dolumn indfx

    /**
     * Chfdks to sff whfthfr thf givfn indfx is b vblid dolumn numbfr
     * in this <dodf>CbdhfdRowSftImpl</dodf> objfdt bnd throws
     * bn <dodf>SQLExdfption</dodf> if it is not. Thf indfx is out of bounds
     * if it is lfss thbn <dodf>1</dodf> or grfbtfr thbn thf numbfr of
     * dolumns in this rowsft.
     * <P>
     * This mfthod is dbllfd intfrnblly by thf <dodf>gftXXX</dodf> bnd
     * <dodf>updbtfXXX</dodf> mfthods.
     *
     * @pbrbm idx thf numbfr of b dolumn in this <dodf>CbdhfdRowSftImpl</dodf>
     *            objfdt; must bf bftwffn <dodf>1</dodf> bnd thf numbfr of
     *            rows in this rowsft
     * @throws SQLExdfption if thf givfn indfx is out of bounds
     */
    privbtf void dhfdkIndfx(int idx) throws SQLExdfption {
        if (idx < 1 || idx > RowSftMD.gftColumnCount()) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbliddol").toString());
        }
    }

    /**
     * Chfdks to sff whfthfr thf dursor for this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt is on b row in thf rowsft bnd throws bn
     * <dodf>SQLExdfption</dodf> if it is not.
     * <P>
     * This mfthod is dbllfd intfrnblly by <dodf>gftXXX</dodf> mfthods, by
     * <dodf>updbtfXXX</dodf> mfthods, bnd by mfthods thbt updbtf, insfrt,
     * or dflftf b row or thbt dbndfl b row updbtf, insfrt, or dflftf.
     *
     * @throws SQLExdfption if thf dursor for this <dodf>CbdhfdRowSftImpl</dodf>
     *         objfdt is not on b vblid row
     */
    privbtf void dhfdkCursor() throws SQLExdfption {
        if (isAftfrLbst() == truf || isBfforfFirst() == truf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbliddp").toString());
        }
    }

    /**
     * Rfturns thf dolumn numbfr of thf dolumn with thf givfn nbmf in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.  This mfthod throws bn
     * <dodf>SQLExdfption</dodf> if thf givfn nbmf is not thf nbmf of
     * onf of thf dolumns in this rowsft.
     *
     * @pbrbm nbmf b <dodf>String</dodf> objfdt thbt is thf nbmf of b dolumn in
     *              this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if thf givfn nbmf dofs not mbtdh thf nbmf of onf of
     *         thf dolumns in this rowsft
     */
    privbtf int gftColIdxByNbmf(String nbmf) throws SQLExdfption {
        RowSftMD = (RowSftMftbDbtbImpl)this.gftMftbDbtb();
        int dols = RowSftMD.gftColumnCount();

        for (int i=1; i <= dols; ++i) {
            String dolNbmf = RowSftMD.gftColumnNbmf(i);
            if (dolNbmf != null)
                if (nbmf.fqublsIgnorfCbsf(dolNbmf))
                    rfturn (i);
                flsf
                    dontinuf;
        }
        throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbldolnm").toString());

    }

    /**
     * Rfturns thf insfrt row or thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf>objfdt.
     *
     * @rfturn thf <dodf>Row</dodf> objfdt on whidh this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdts's dursor is positionfd
     */
    protfdtfd BbsfRow gftCurrfntRow() {
        if (onInsfrtRow == truf) {
            rfturn (BbsfRow)insfrtRow;
        } flsf {
            rfturn (BbsfRow)(rvh.gft(dursorPos - 1));
        }
    }

    /**
     * Rfmovfs thf row on whidh thf dursor is positionfd.
     * <p>
     * This is b implfmfntbtion only mfthod bnd is not rfquirfd bs b stbndbrd
     * implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
     *
     * @throws SQLExdfption if thf dursor is positionfd on thf insfrt
     *            row
     */
    protfdtfd void rfmovfCurrfntRow() {
        ((Row)gftCurrfntRow()).sftDflftfd();
        rvh.rfmovf(dursorPos - 1);
        --numRows;
    }


    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>String</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, INTEGER, BIGINT, REAL,
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, <b>CHAR</b>, <b>VARCHAR</b></dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     */
    publid String gftString(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        rfturn vbluf.toString();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>boolfbn</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf bs b <dodf>boolfbn</dodf> in thf Jbvb progbmming lbngubgf;
     *        if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>fblsf</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>BOOLEAN</dodf> vbluf
     * @sff #gftBoolfbn(String)
     */
    publid boolfbn gftBoolfbn(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn fblsf;
        }

        // dhfdk for Boolfbn...
        if (vbluf instbndfof Boolfbn) {
            rfturn ((Boolfbn)vbluf).boolfbnVbluf();
        }

        // donvfrt to b Doublf bnd dompbrf to zfro
        try {
            rfturn Doublf.dompbrf(Doublf.pbrsfDoublf(vbluf.toString()), 0) != 0;
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.boolfbil").toString(),
                  nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>bytf</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf bs b <dodf>bytf</dodf> in thf Jbvb progrbmming
     * lbngubgf; if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf><b>TINYINT</b>, SMALLINT, INTEGER, BIGINT, REAL,
     *            FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     *            or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     *            dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftBytf(String)
     */
    publid bytf gftBytf(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn (bytf)0;
        }
        try {
            rfturn ((Bytf.vblufOf(vbluf.toString())).bytfVbluf());
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.bytffbil").toString(),
                  nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>short</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, <b>SMALLINT</b>, INTEGER, BIGINT, REAL
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     * @sff #gftShort(String)
     */
    publid short gftShort(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn (short)0;
        }

        try {
            rfturn ((Short.vblufOf(vbluf.toString().trim())).shortVbluf());
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.shortfbil").toString(),
                  nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn
     * <dodf>int</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, <b>INTEGER</b>, BIGINT, REAL
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     */
    publid int gftInt(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn 0;
        }

        try {
            rfturn ((Intfgfr.vblufOf(vbluf.toString().trim())).intVbluf());
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.intfbil").toString(),
                  nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>long</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, INTEGER, <b>BIGINT</b>, REAL
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     * @sff #gftLong(String)
     */
    publid long gftLong(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn (long)0;
        }
        try {
            rfturn ((Long.vblufOf(vbluf.toString().trim())).longVbluf());
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.longfbil").toString(),
                  nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>flobt</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, INTEGER, BIGINT, <b>REAL</b>,
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     * @sff #gftFlobt(String)
     */
    publid flobt gftFlobt(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn (flobt)0;
        }
        try {
            rfturn ((nfw Flobt(vbluf.toString())).flobtVbluf());
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.flobtfbil").toString(),
                  nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>doublf</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, INTEGER, BIGINT, REAL,
     * <b>FLOAT</b>, <b>DOUBLE</b>, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     * @sff #gftDoublf(String)
     *
     */
    publid doublf gftDoublf(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn (doublf)0;
        }
        try {
            rfturn ((nfw Doublf(vbluf.toString().trim())).doublfVbluf());
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.doublffbil").toString(),
                  nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod is dfprfdbtfd; usf thf vfrsion of <dodf>gftBigDfdimbl</dodf>
     * thbt dofs not tbkf b sdblf pbrbmftfr bnd rfturns b vbluf with full
     * prfdision.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point in thf
     *        vbluf rfturnfd
     * @rfturn thf dolumn vbluf with thf spfdififd numbfr of digits to thf right
     *         of thf dfdimbl point; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid BigDfdimbl gftBigDfdimbl(int dolumnIndfx, int sdblf) throws SQLExdfption {
        Objfdt vbluf;
        BigDfdimbl bDfdimbl, rftVbl;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn (nfw BigDfdimbl(0));
        }

        bDfdimbl = this.gftBigDfdimbl(dolumnIndfx);

        rftVbl = bDfdimbl.sftSdblf(sdblf);

        rfturn rftVbl;
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>bytf</dodf> brrby vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf bs b <dodf>bytf</dodf> brrby in thf Jbvb progrbmming
     * lbngubgf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * rfsult is <dodf>null</dodf>
     *
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf><b>BINARY</b>, <b>VARBINARY</b> or
     * LONGVARBINARY</dodf> vbluf.
     * Thf bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftBytfs(String)
     */
    publid bytf[] gftBytfs(int dolumnIndfx) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (isBinbry(RowSftMD.gftColumnTypf(dolumnIndfx)) == fblsf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        rfturn (bytf[])(gftCurrfntRow().gftColumnObjfdt(dolumnIndfx));
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Dbtf</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf bs b <dodf>jbvb.sql.Dbtb</dodf> objfdt; if
     *        thf vbluf is SQL <dodf>NULL</dodf>, thf
     *        rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid jbvb.sql.Dbtf gftDbtf(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        /*
         * Thf objfdt doming bbdk from thf db dould bf
         * b dbtf, b timfstbmp, or b dhbr fifld vbrifty.
         * If it's b dbtf typf rfturn it, b timfstbmp
         * wf turn into b long bnd thfn into b dbtf,
         * dhbr strings wf try to pbrsf. Yudk.
         */
        switdh (RowSftMD.gftColumnTypf(dolumnIndfx)) {
            dbsf jbvb.sql.Typfs.DATE: {
                long sfd = ((jbvb.sql.Dbtf)vbluf).gftTimf();
                rfturn nfw jbvb.sql.Dbtf(sfd);
            }
            dbsf jbvb.sql.Typfs.TIMESTAMP: {
                long sfd = ((jbvb.sql.Timfstbmp)vbluf).gftTimf();
                rfturn nfw jbvb.sql.Dbtf(sfd);
            }
            dbsf jbvb.sql.Typfs.CHAR:
            dbsf jbvb.sql.Typfs.VARCHAR:
            dbsf jbvb.sql.Typfs.LONGVARCHAR: {
                try {
                    DbtfFormbt df = DbtfFormbt.gftDbtfInstbndf();
                    rfturn ((jbvb.sql.Dbtf)(df.pbrsf(vbluf.toString())));
                } dbtdh (PbrsfExdfption fx) {
                    throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dbtffbil").toString(),
                        nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
                }
            }
            dffbult: {
                throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dbtffbil").toString(),
                        nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
            }
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timf</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *         thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid jbvb.sql.Timf gftTimf(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        /*
         * Thf objfdt doming bbdk from thf db dould bf
         * b dbtf, b timfstbmp, or b dhbr fifld vbrifty.
         * If it's b dbtf typf rfturn it, b timfstbmp
         * wf turn into b long bnd thfn into b dbtf,
         * dhbr strings wf try to pbrsf. Yudk.
         */
        switdh (RowSftMD.gftColumnTypf(dolumnIndfx)) {
            dbsf jbvb.sql.Typfs.TIME: {
                rfturn (jbvb.sql.Timf)vbluf;
            }
            dbsf jbvb.sql.Typfs.TIMESTAMP: {
                long sfd = ((jbvb.sql.Timfstbmp)vbluf).gftTimf();
                rfturn nfw jbvb.sql.Timf(sfd);
            }
            dbsf jbvb.sql.Typfs.CHAR:
            dbsf jbvb.sql.Typfs.VARCHAR:
            dbsf jbvb.sql.Typfs.LONGVARCHAR: {
                try {
                    DbtfFormbt tf = DbtfFormbt.gftTimfInstbndf();
                    rfturn ((jbvb.sql.Timf)(tf.pbrsf(vbluf.toString())));
                } dbtdh (PbrsfExdfption fx) {
                    throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.timffbil").toString(),
                        nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
                }
            }
            dffbult: {
                throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.timffbil").toString(),
                        nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
            }
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        /*
         * Thf objfdt doming bbdk from thf db dould bf
         * b dbtf, b timfstbmp, or b dhbr fifld vbrifty.
         * If it's b dbtf typf rfturn it; b timfstbmp
         * wf turn into b long bnd thfn into b dbtf;
         * dhbr strings wf try to pbrsf. Yudk.
         */
        switdh (RowSftMD.gftColumnTypf(dolumnIndfx)) {
            dbsf jbvb.sql.Typfs.TIMESTAMP: {
                rfturn (jbvb.sql.Timfstbmp)vbluf;
            }
            dbsf jbvb.sql.Typfs.TIME: {
                long sfd = ((jbvb.sql.Timf)vbluf).gftTimf();
                rfturn nfw jbvb.sql.Timfstbmp(sfd);
            }
            dbsf jbvb.sql.Typfs.DATE: {
                long sfd = ((jbvb.sql.Dbtf)vbluf).gftTimf();
                rfturn nfw jbvb.sql.Timfstbmp(sfd);
            }
            dbsf jbvb.sql.Typfs.CHAR:
            dbsf jbvb.sql.Typfs.VARCHAR:
            dbsf jbvb.sql.Typfs.LONGVARCHAR: {
                try {
                    DbtfFormbt tf = DbtfFormbt.gftTimfInstbndf();
                    rfturn ((jbvb.sql.Timfstbmp)(tf.pbrsf(vbluf.toString())));
                } dbtdh (PbrsfExdfption fx) {
                    throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.timffbil").toString(),
                        nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
                }
            }
            dffbult: {
                throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.timffbil").toString(),
                        nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
            }
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.io.InputStrfbm</dodf>
     * objfdt.
     *
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of ASCII dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARCHAR</dodf> vblufs.  Thf JDBC
     * drivfr will do bny nfdfssbry donvfrsion from thf dbtbbbsf formbt into ASCII.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b gft mfthod impliditly dlosfs thf strfbm. . Also, b
     * strfbm mby rfturn <dodf>0</dodf> for <dodf>CbdhfdRowSftImpl.bvbilbblf()</dodf>
     * whfthfr thfrf is dbtb bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of onf-bytf ASCII dhbrbdtfrs.  If thf vbluf is SQL
     *         <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>CHAR, VARCHAR</dodf>, <dodf><b>LONGVARCHAR</b></dodf>
     * <dodf>BINARY, VARBINARY</dodf> or <dodf>LONGVARBINARY</dodf> vbluf. Thf
     * bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typfs thbt this mfthod is
     * usfd to rftrifvf.
     * @sff #gftAsdiiStrfbm(String)
     */
    publid jbvb.io.InputStrfbm gftAsdiiStrfbm(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // blwbys frff bn old strfbm
        bsdiiStrfbm = null;

        // sbnity dhfdk
        dhfdkIndfx(dolumnIndfx);
        //mbkf surf thf dursor is on b vlid row
        dhfdkCursor();

        vbluf =  gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);
        if (vbluf == null) {
            lbstVblufNull = truf;
            rfturn null;
        }

        try {
            if (isString(RowSftMD.gftColumnTypf(dolumnIndfx))) {
                bsdiiStrfbm = nfw BytfArrbyInputStrfbm(((String)vbluf).gftBytfs("ASCII"));
            } flsf {
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
            }
        } dbtdh (jbvb.io.UnsupportfdEndodingExdfption fx) {
            throw nfw SQLExdfption(fx.gftMfssbgf());
        }

        rfturn bsdiiStrfbm;
    }

    /**
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of Unidodf dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf LONGVARCHAR vblufs.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from thf dbtbbbsf formbt into Unidodf.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b gft mfthod impliditly dlosfs thf strfbm. . Also, b
     * strfbm mby rfturn 0 for bvbilbblf() whfthfr thfrf is dbtb
     * bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of two bytf Unidodf dhbrbdtfrs.  If thf vbluf is SQL NULL
     * thfn thf rfsult is null.
     * @throws SQLExdfption if bn frror oddurs
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid jbvb.io.InputStrfbm gftUnidodfStrfbm(int dolumnIndfx) throws SQLExdfption {
        // blwbys frff bn old strfbm
        unidodfStrfbm = null;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (isBinbry(RowSftMD.gftColumnTypf(dolumnIndfx)) == fblsf &&
        isString(RowSftMD.gftColumnTypf(dolumnIndfx)) == fblsf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        Objfdt vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);
        if (vbluf == null) {
            lbstVblufNull = truf;
            rfturn null;
        }

        unidodfStrfbm = nfw StringBufffrInputStrfbm(vbluf.toString());

        rfturn unidodfStrfbm;
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.io.InputStrfbm</dodf>
     * objfdt.
     * <P>
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of unintfrprftfd bytfs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARBINARY</dodf> vblufs.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b gft mfthod impliditly dlosfs thf strfbm. Also, b
     * strfbm mby rfturn <dodf>0</dodf> for
     * <dodf>CbdhfdRowSftImpl.bvbilbblf()</dodf> whfthfr thfrf is dbtb
     * bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     * is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     * bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of unintfrprftfd bytfs.  If thf vbluf is SQL <dodf>NULL</dodf>
     * thfn thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>BINARY, VARBINARY</dodf> or <dodf><b>LONGVARBINARY</b></dodf>
     * Thf bold typf indidbtfs thf SQL typf thbt this mfthod is rfdommfnfd
     * to rftrifvf.
     * @sff #gftBinbryStrfbm(String)
     */
    publid jbvb.io.InputStrfbm gftBinbryStrfbm(int dolumnIndfx) throws SQLExdfption {

        // blwbys frff bn old strfbm
        binbryStrfbm = null;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (isBinbry(RowSftMD.gftColumnTypf(dolumnIndfx)) == fblsf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        Objfdt vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);
        if (vbluf == null) {
            lbstVblufNull = truf;
            rfturn null;
        }

        binbryStrfbm = nfw BytfArrbyInputStrfbm((bytf[])vbluf);

        rfturn binbryStrfbm;

    }


    // Mfthods for bddfssing rfsults by dolumn nbmf

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>String</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * BIGINT, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, <b>CHAR</b>,
     * <b>VARCHAR</b></dodf> or <dodf>LONGVARCHAR<</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf.
     */
    publid String gftString(String dolumnNbmf) throws SQLExdfption {
        rfturn gftString(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>boolfbn</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf bs b <dodf>boolfbn</dodf> in thf Jbvb progrbmming
     *        lbngubgf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *        thf rfsult is <dodf>fblsf</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>BOOLEAN</dodf> vbluf
     * @sff #gftBoolfbn(int)
     */
    publid boolfbn gftBoolfbn(String dolumnNbmf) throws SQLExdfption {
        rfturn gftBoolfbn(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>bytf</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf bs b <dodf>bytf</dodf> in thf Jbvb progrbmming
     * lbngubgf; if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf><B>TINYINT</B>, SMALLINT, INTEGER,
     * BIGINT, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf
     * bold typf dfsignbtfs thf rfdommfndfd rfturn typf
     */
    publid bytf gftBytf(String dolumnNbmf) throws SQLExdfption {
        rfturn gftBytf(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>short</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, <b>SMALLINT</b>, INTEGER
     * BIGINT, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftShort(int)
     */
    publid short gftShort(String dolumnNbmf) throws SQLExdfption {
        rfturn gftShort(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs bn <dodf>int</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf
     * of b dolumn in this rowsft,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, <b>INTEGER</b>, BIGINT, REAL
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     */
    publid int gftInt(String dolumnNbmf) throws SQLExdfption {
        rfturn gftInt(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>long</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * <b>BIGINT</b>, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftLong(int)
     */
    publid long gftLong(String dolumnNbmf) throws SQLExdfption {
        rfturn gftLong(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>flobt</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * BIGINT, <b>REAL</b>, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftFlobt(String)
     */
    publid flobt gftFlobt(String dolumnNbmf) throws SQLExdfption {
        rfturn gftFlobt(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * bs b <dodf>doublf</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * BIGINT, REAL, <b>FLOAT</b>, <b>DOUBLE</b>, DECIMAL, NUMERIC, BIT, CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typfs.
     * @sff #gftDoublf(int)
     */
    publid doublf gftDoublf(String dolumnNbmf) throws SQLExdfption {
        rfturn gftDoublf(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point
     * @rfturn b jbvb.mbth.BugDfdimbl objfdt with <dodf><i>sdblf</i></dodf>
     * numbfr of digits to thf right of thf dfdimbl point.
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * BIGINT, REAL, FLOAT, DOUBLE, <b>DECIMAL</b>, <b>NUMERIC</b>, BIT CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf thbt this mfthod is usfd to
     * rftrifvf.
     * @dfprfdbtfd Usf thf <dodf>gftBigDfdimbl(String dolumnNbmf)</dodf>
     *             mfthod instfbd
     */
    @Dfprfdbtfd
    publid BigDfdimbl gftBigDfdimbl(String dolumnNbmf, int sdblf) throws SQLExdfption {
        rfturn gftBigDfdimbl(gftColIdxByNbmf(dolumnNbmf), sdblf);
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>bytf</dodf> brrby.
     * Thf bytfs rfprfsfnt thf rbw vblufs rfturnfd by thf drivfr.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf bs b <dodf>bytf</dodf> brrby in thf Jbvb progrbmming
     * lbngubgf; if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf><b>BINARY</b>, <b>VARBINARY</b>
     * </dodf> or <dodf>LONGVARBINARY</dodf> vblufs
     * Thf bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftBytfs(int)
     */
    publid bytf[] gftBytfs(String dolumnNbmf) throws SQLExdfption {
        rfturn gftBytfs(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.sql.Dbtf</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Dbtf gftDbtf(String dolumnNbmf) throws SQLExdfption {
        rfturn gftDbtf(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.sql.Timf</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid jbvb.sql.Timf gftTimf(String dolumnNbmf) throws SQLExdfption {
        rfturn gftTimf(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(String dolumnNbmf) throws SQLExdfption {
        rfturn gftTimfstbmp(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.io.InputStrfbm</dodf>
     * objfdt.
     *
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of ASCII dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm. This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARCHAR</dodf> vblufs. Thf
     * <dodf>SyndProvidfr</dodf> will rfly on thf JDBC drivfr to do bny nfdfssbry
     * donvfrsion from thf dbtbbbsf formbt into ASCII formbt.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of onf-bytf ASCII dhbrbdtfrs.  If thf vbluf is SQL
     *         <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>CHAR, VARCHAR</dodf>, <dodf><b>LONGVARCHAR</b></dodf>
     * <dodf>BINARY, VARBINARY</dodf> or <dodf>LONGVARBINARY</dodf> vbluf. Thf
     * bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typfs thbt this mfthod is
     * usfd to rftrifvf.
     * @sff #gftAsdiiStrfbm(int)
     */
    publid jbvb.io.InputStrfbm gftAsdiiStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn gftAsdiiStrfbm(gftColIdxByNbmf(dolumnNbmf));

    }

    /**
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of Unidodf dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARCHAR</dodf> vblufs.
     * Thf JDBC drivfr will do bny nfdfssbry donvfrsion from thf dbtbbbsf
     * formbt into Unidodf.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of two-bytf Unidodf dhbrbdtfrs.  If thf vbluf is
     *         SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     * @dfprfdbtfd usf thf mfthod <dodf>gftChbrbdtfrStrfbm</dodf> instfbd
     */
    @Dfprfdbtfd
    publid jbvb.io.InputStrfbm gftUnidodfStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn gftUnidodfStrfbm(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.io.InputStrfbm</dodf>
     * objfdt.
     * <P>
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of unintfrprftfd bytfs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARBINARY</dodf> vblufs.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b gft mfthod impliditly dlosfs thf strfbm. Also, b
     * strfbm mby rfturn <dodf>0</dodf> for <dodf>CbdhfdRowSftImpl.bvbilbblf()</dodf>
     * whfthfr thfrf is dbtb bvbilbblf or not.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of unintfrprftfd bytfs.  If thf vbluf is SQL
     *         <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is unknown,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>BINARY, VARBINARY</dodf> or <dodf><b>LONGVARBINARY</b></dodf>
     * Thf bold typf indidbtfs thf SQL typf thbt this mfthod is rfdommfnfd
     * to rftrifvf.
     * @sff #gftBinbryStrfbm(int)
     *
     */
    publid jbvb.io.InputStrfbm gftBinbryStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn gftBinbryStrfbm(gftColIdxByNbmf(dolumnNbmf));
    }


    // Advbndfd ffbturfs:

    /**
     * Thf first wbrning rfportfd by dblls on this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt is rfturnfd. Subsfqufnt <dodf>CbdhfdRowSftImpl</dodf> wbrnings will
     * bf dhbinfd to this <dodf>SQLWbrning</dodf>.
     *
     * <P>Thf wbrning dhbin is butombtidblly dlfbrfd fbdh timf b nfw
     * row is rfbd.
     *
     * <P><B>Notf:</B> This wbrning dhbin only dovfrs wbrnings dbusfd
     * by <dodf>RfsultSft</dodf> mfthods.  Any wbrning dbusfd by stbtfmfnt
     * mfthods (sudh bs rfbding OUT pbrbmftfrs) will bf dhbinfd on thf
     * <dodf>Stbtfmfnt</dodf> objfdt.
     *
     * @rfturn thf first SQLWbrning or null
     */
    publid SQLWbrning gftWbrnings() {
        rfturn sqlwbrn;
    }

    /**
     * Clfbrs bll thf wbrnings rfporftfd for thf <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt. Aftfr b dbll to this mfthod, thf <dodf>gftWbrnings</dodf> mfthod
     * rfturns <dodf>null</dodf> until b nfw wbrning is rfportfd for this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     */
    publid void dlfbrWbrnings() {
        sqlwbrn = null;
    }

    /**
     * Rftrifvfs thf nbmf of thf SQL dursor usfd by this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * <P>In SQL, b rfsult tbblf is rftrifvfd through b dursor thbt is
     * nbmfd. Thf durrfnt row of b <dodf>RfsultSft</dodf> dbn bf updbtfd or dflftfd
     * using b positionfd updbtf/dflftf stbtfmfnt thbt rfffrfndfs thf
     * dursor nbmf. To fnsurf thbt thf dursor hbs thf propfr isolbtion
     * lfvfl to support bn updbtf opfrbtion, thf dursor's <dodf>SELECT</dodf>
     * stbtfmfnt should bf of thf form <dodf>sflfdt for updbtf</dodf>.
     * If thf <dodf>for updbtf</dodf> dlbusf
     * is omittfd, positionfd updbtfs mby fbil.
     *
     * <P>JDBC supports this SQL ffbturf by providing thf nbmf of thf
     * SQL dursor usfd by b <dodf>RfsultSft</dodf> objfdt. Thf durrfnt row
     * of b rfsult sft is blso thf durrfnt row of this SQL dursor.
     *
     * <P><B>Notf:</B> If positionfd updbtfs brf not supportfd, bn
     * <dodf>SQLExdfption</dodf> is thrown.
     *
     * @rfturn thf SQL dursor nbmf for this <dodf>CbdhfdRowSftImpl</dodf> objfdt's
     *         dursor
     * @throws SQLExdfption if bn frror oddurs
     */
    publid String gftCursorNbmf() throws SQLExdfption {
        throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.posupdbtf").toString());
    }

    /**
     * Rftrifvfs b <dodf>RfsultSftMftbDbtb</dodf> objfdt instbndf thbt
     * dontbins informbtion bbout thf <dodf>CbdhfdRowSft</dodf> objfdt.
     * Howfvfr, bpplidbtions should dbst thf rfturnfd objfdt to b
     * <dodf>RowSftMftbDbtb</dodf> intfrfbdf implfmfntbtion. In thf
     * rfffrfndf implfmfntbtion, this dbst dbn bf donf on thf
     * <dodf>RowSftMftbDbtbImpl</dodf> dlbss.
     * <P>
     * For fxbmplf:
     * <prf>
     * CbdhfdRowSft drs = nfw CbdhfdRowSftImpl();
     * RowSftMftbDbtbImpl mftbDbtb =
     *     (RowSftMftbDbtbImpl)drs.gftMftbDbtb();
     * // Sft thf numbfr of dolumns in thf RowSft objfdt for
     * // whidh this RowSftMftbDbtbImpl objfdt wbs drfbtfd to thf
     * // givfn numbfr.
     * mftbDbtb.sftColumnCount(3);
     * drs.sftMftbDbtb(mftbDbtb);
     * </prf>
     *
     * @rfturn thf <dodf>RfsultSftMftbDbtb</dodf> objfdt thbt dfsdribfs this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt's dolumns
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf RowSft
     * mftb dbtb; or if thf <dodf>CbdhfdRowSftImpl</dodf> is fmpty.
     * @sff jbvbx.sql.RowSftMftbDbtb
     */
    publid RfsultSftMftbDbtb gftMftbDbtb() throws SQLExdfption {
        rfturn (RfsultSftMftbDbtb)RowSftMD;
    }


    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * Thf typf of thf <dodf>Objfdt</dodf> will bf thf dffbult
     * Jbvb objfdt typf dorrfsponding to thf dolumn's SQL typf,
     * following thf mbpping for built-in typfs spfdififd in thf JDBC 3.0
     * spfdifidbtion.
     * <P>
     * This mfthod mby blso bf usfd to rfbd dbtbtbbbsf-spfdifid
     * bbstrbdt dbtb typfs.
     * <P>
     * This implfmfntbtion of thf mfthod <dodf>gftObjfdt</dodf> fxtfnds its
     * bfhbvior so thbt it gfts thf bttributfs of bn SQL strudturfd typf
     * bs bn brrby of <dodf>Objfdt</dodf> vblufs.  This mfthod blso dustom
     * mbps SQL usfr-dffinfd typfs to dlbssfs in thf Jbvb progrbmming lbngubgf.
     * Whfn thf spfdififd dolumn dontbins
     * b strudturfd or distindt vbluf, thf bfhbvior of this mfthod is bs
     * if it wfrf b dbll to thf mfthod <dodf>gftObjfdt(dolumnIndfx,
     * this.gftStbtfmfnt().gftConnfdtion().gftTypfMbp())</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b <dodf>jbvb.lbng.Objfdt</dodf> holding thf dolumn vbluf;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or thfrf is b problfm gftting
     *            thf <dodf>Clbss</dodf> objfdt for b dustom mbpping
     * @sff #gftObjfdt(String)
     */
    publid Objfdt gftObjfdt(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;
        Mbp<String, Clbss<?>> mbp;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }
        if (vbluf instbndfof Strudt) {
            Strudt s = (Strudt)vbluf;
            mbp = gftTypfMbp();
            // look up thf dlbss in thf mbp
            Clbss<?> d = mbp.gft(s.gftSQLTypfNbmf());
            if (d != null) {
                // drfbtf nfw instbndf of thf dlbss
                SQLDbtb obj = null;
                try {
                    obj = (SQLDbtb) RfflfdtUtil.nfwInstbndf(d);
                } dbtdh(Exdfption fx) {
                    throw nfw SQLExdfption("Unbblf to Instbntibtf: ", fx);
                }
                // gft thf bttributfs from thf strudt
                Objfdt bttribs[] = s.gftAttributfs(mbp);
                // drfbtf thf SQLInput "strfbm"
                SQLInputImpl sqlInput = nfw SQLInputImpl(bttribs, mbp);
                // rfbd thf vblufs...
                obj.rfbdSQL(sqlInput, s.gftSQLTypfNbmf());
                rfturn (Objfdt)obj;
            }
        }
        rfturn vbluf;
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * Thf typf of thf <dodf>Objfdt</dodf> will bf thf dffbult
     * Jbvb objfdt typf dorrfsponding to thf dolumn's SQL typf,
     * following thf mbpping for built-in typfs spfdififd in thf JDBC 3.0
     * spfdifidbtion.
     * <P>
     * This mfthod mby blso bf usfd to rfbd dbtbtbbbsf-spfdifid
     * bbstrbdt dbtb typfs.
     * <P>
     * This implfmfntbtion of thf mfthod <dodf>gftObjfdt</dodf> fxtfnds its
     * bfhbvior so thbt it gfts thf bttributfs of bn SQL strudturfd typf
     * bs bn brrby of <dodf>Objfdt</dodf> vblufs.  This mfthod blso dustom
     * mbps SQL usfr-dffinfd typfs to dlbssfs
     * in thf Jbvb progrbmming lbngubgf. Whfn thf spfdififd dolumn dontbins
     * b strudturfd or distindt vbluf, thf bfhbvior of this mfthod is bs
     * if it wfrf b dbll to thf mfthod <dodf>gftObjfdt(dolumnIndfx,
     * this.gftStbtfmfnt().gftConnfdtion().gftTypfMbp())</dodf>.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>jbvb.lbng.Objfdt</dodf> holding thf dolumn vbluf;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs, (2) thf dursor is not
     *            on b vblid row, or (3) thfrf is b problfm gftting
     *            thf <dodf>Clbss</dodf> objfdt for b dustom mbpping
     * @sff #gftObjfdt(int)
     */
    publid Objfdt gftObjfdt(String dolumnNbmf) throws SQLExdfption {
        rfturn gftObjfdt(gftColIdxByNbmf(dolumnNbmf));
    }

    //----------------------------------------------------------------

    /**
     * Mbps thf givfn dolumn nbmf for onf of this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt's dolumns to its dolumn numbfr.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn thf dolumn indfx of thf givfn dolumn nbmf
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf
     *            of this rowsft's dolumn nbmfs
     */
    publid int findColumn(String dolumnNbmf) throws SQLExdfption {
        rfturn gftColIdxByNbmf(dolumnNbmf);
    }


    //--------------------------JDBC 2.0-----------------------------------

    //---------------------------------------------------------------------
    // Gfttfr's bnd Sfttfr's
    //---------------------------------------------------------------------

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b Jbvb dhbrbdtfr strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of two-bytf unidodf dhbrbdtfrs in b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.  If thf vbluf is
     * SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>CHAR, VARCHAR, <b>LONGVARCHAR</b>, BINARY, VARBINARY</dodf> or
     * <dodf>LONGVARBINARY</dodf> vbluf.
     * Thf bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftChbrbdtfrStrfbm(String)
     */
    publid jbvb.io.Rfbdfr gftChbrbdtfrStrfbm(int dolumnIndfx) throws SQLExdfption{

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (isBinbry(RowSftMD.gftColumnTypf(dolumnIndfx))) {
            Objfdt vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);
            if (vbluf == null) {
                lbstVblufNull = truf;
                rfturn null;
            }
            dhbrStrfbm = nfw InputStrfbmRfbdfr
            (nfw BytfArrbyInputStrfbm((bytf[])vbluf));
        } flsf if (isString(RowSftMD.gftColumnTypf(dolumnIndfx))) {
            Objfdt vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);
            if (vbluf == null) {
                lbstVblufNull = truf;
                rfturn null;
            }
            dhbrStrfbm = nfw StringRfbdfr(vbluf.toString());
        } flsf {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        rfturn dhbrStrfbm;
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of two-bytf Unidodf dhbrbdtfrs.  If thf vbluf is
     *         SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>CHAR, VARCHAR, <b>LONGVARCHAR</b>,
     * BINARY, VARYBINARY</dodf> or <dodf>LONGVARBINARY</dodf> vbluf.
     * Thf bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typf.
     */
    publid jbvb.io.Rfbdfr gftChbrbdtfrStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn gftChbrbdtfrStrfbm(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b <dodf>jbvb.mbth.BigDfdimbl</dodf> vbluf with full prfdision;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, INTEGER, BIGINT, REAL,
     * FLOAT, DOUBLE, <b>DECIMAL</b>, <b>NUMERIC</b>, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typfs thbt this mfthod is usfd to rftrifvf.
     * @sff #gftBigDfdimbl(String)
     */
    publid BigDfdimbl gftBigDfdimbl(int dolumnIndfx) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }
        try {
            rfturn (nfw BigDfdimbl(vbluf.toString().trim()));
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.doublffbil").toString(),
                nfw Objfdt[] {vbluf.toString().trim(), dolumnIndfx}));
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>jbvb.mbth.BigDfdimbl</dodf> vbluf with full prfdision;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * BIGINT, REAL, FLOAT, DOUBLE, <b>DECIMAL</b>, <b>NUMERIC</b>, BIT CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf thbt this mfthod is usfd to
     * rftrifvf
     * @sff #gftBigDfdimbl(int)
     */
    publid BigDfdimbl gftBigDfdimbl(String dolumnNbmf) throws SQLExdfption {
        rfturn gftBigDfdimbl(gftColIdxByNbmf(dolumnNbmf));
    }

    //---------------------------------------------------------------------
    // Trbvfrsbl/Positioning
    //---------------------------------------------------------------------

    /**
     * Rfturns thf numbfr of rows in this <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * @rfturn numbfr of rows in thf rowsft
     */
    publid int sizf() {
        rfturn numRows;
    }

    /**
     * Indidbtfs whfthfr thf dursor is bfforf thf first row in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is bfforf thf first row;
     *         <dodf>fblsf</dodf> othfrwisf or if thf rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isBfforfFirst() throws SQLExdfption {
        if (dursorPos == 0 && numRows > 0) {
            rfturn truf;
        } flsf {
            rfturn fblsf;
        }
    }

    /**
     * Indidbtfs whfthfr thf dursor is bftfr thf lbst row in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is bftfr thf lbst row;
     *         <dodf>fblsf</dodf> othfrwisf or if thf rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isAftfrLbst() throws SQLExdfption {
        if (dursorPos == numRows+1 && numRows > 0) {
            rfturn truf;
        } flsf {
            rfturn fblsf;
        }
    }

    /**
     * Indidbtfs whfthfr thf dursor is on thf first row in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf first row;
     *         <dodf>fblsf</dodf> othfrwisf or if thf rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isFirst() throws SQLExdfption {
        // this bfdomfs nbsty bfdbusf of dflftfs.
        int sbvfCursorPos = dursorPos;
        int sbvfAbsolutfCursorPos = bbsolutfPos;
        intfrnblFirst();
        if (dursorPos == sbvfCursorPos) {
            rfturn truf;
        } flsf {
            dursorPos = sbvfCursorPos;
            bbsolutfPos = sbvfAbsolutfCursorPos;
            rfturn fblsf;
        }
    }

    /**
     * Indidbtfs whfthfr thf dursor is on thf lbst row in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     * <P>
     * Notf: Cblling thf mfthod <dodf>isLbst</dodf> mby bf fxpfnsivf
     * bfdbusf thf JDBC drivfr might nffd to fftdh bhfbd onf row in ordfr
     * to dftfrminf whfthfr thf durrfnt row is thf lbst row in this rowsft.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf lbst row;
     *         <dodf>fblsf</dodf> othfrwisf or if this rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isLbst() throws SQLExdfption {
        int sbvfCursorPos = dursorPos;
        int sbvfAbsolutfCursorPos = bbsolutfPos;
        boolfbn sbvfShowDflftfd = gftShowDflftfd();
        sftShowDflftfd(truf);
        intfrnblLbst();
        if (dursorPos == sbvfCursorPos) {
            sftShowDflftfd(sbvfShowDflftfd);
            rfturn truf;
        } flsf {
            sftShowDflftfd(sbvfShowDflftfd);
            dursorPos = sbvfCursorPos;
            bbsolutfPos = sbvfAbsolutfCursorPos;
            rfturn fblsf;
        }
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf front of
     * thf rowsft, just bfforf thf first row. This mfthod hbs no ffffdt if
     * this rowsft dontbins no rows.
     *
     * @throws SQLExdfption if bn frror oddurs or thf typf of this rowsft
     *            is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid void bfforfFirst() throws SQLExdfption {
       if (gftTypf() == RfsultSft.TYPE_FORWARD_ONLY) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.bfforffirst").toString());
        }
        dursorPos = 0;
        bbsolutfPos = 0;
        notifyCursorMovfd();
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf fnd of
     * thf rowsft, just bftfr thf lbst row. This mfthod hbs no ffffdt if
     * this rowsft dontbins no rows.
     *
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void bftfrLbst() throws SQLExdfption {
        if (numRows > 0) {
            dursorPos = numRows + 1;
            bbsolutfPos = 0;
            notifyCursorMovfd();
        }
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf first row
     * bnd rfturns <dodf>truf</dodf> if thf opfrbtion wbs suddfssful.  This
     * mfthod blso notififs rfgistfrfd listfnfrs thbt thf dursor hbs movfd.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     *         <dodf>fblsf</dodf> othfrwisf or if thfrf brf no rows in this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if thf typf of this rowsft
     *            is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn first() throws SQLExdfption {
        if(gftTypf() == RfsultSft.TYPE_FORWARD_ONLY) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.first").toString());
        }

        // movf bnd notify
        boolfbn rft = this.intfrnblFirst();
        notifyCursorMovfd();

        rfturn rft;
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf first
     * row bnd rfturns <dodf>truf</dodf> if thf opfrbtion is suddfssful.
     * <P>
     * This mfthod is dbllfd intfrnblly by thf mfthods <dodf>first</dodf>,
     * <dodf>isFirst</dodf>, bnd <dodf>bbsolutf</dodf>.
     * It in turn dblls thf mfthod <dodf>intfrnblNfxt</dodf> in ordfr to
     * hbndlf thf dbsf whfrf thf first row is b dflftfd row thbt is not visiblf.
     * <p>
     * This is b implfmfntbtion only mfthod bnd is not rfquirfd bs b stbndbrd
     * implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor movfd to thf first row;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if bn frror oddurs
     */
    protfdtfd boolfbn intfrnblFirst() throws SQLExdfption {
        boolfbn rft = fblsf;

        if (numRows > 0) {
            dursorPos = 1;
            if ((gftShowDflftfd() == fblsf) && (rowDflftfd() == truf)) {
                rft = intfrnblNfxt();
            } flsf {
                rft = truf;
            }
        }

        if (rft == truf)
            bbsolutfPos = 1;
        flsf
            bbsolutfPos = 0;

        rfturn rft;
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf lbst row
     * bnd rfturns <dodf>truf</dodf> if thf opfrbtion wbs suddfssful.  This
     * mfthod blso notififs rfgistfrfd listfnfrs thbt thf dursor hbs movfd.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     *         <dodf>fblsf</dodf> othfrwisf or if thfrf brf no rows in this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if thf typf of this rowsft
     *            is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn lbst() throws SQLExdfption {
        if (gftTypf() == RfsultSft.TYPE_FORWARD_ONLY) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.lbst").toString());
        }

        // movf bnd notify
        boolfbn rft = this.intfrnblLbst();
        notifyCursorMovfd();

        rfturn rft;
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf lbst
     * row bnd rfturns <dodf>truf</dodf> if thf opfrbtion is suddfssful.
     * <P>
     * This mfthod is dbllfd intfrnblly by thf mfthod <dodf>lbst</dodf>
     * whfn rows hbvf bffn dflftfd bnd thf dflftions brf not visiblf.
     * Thf mfthod <dodf>intfrnblLbst</dodf> hbndlfs thf dbsf whfrf thf
     * lbst row is b dflftfd row thbt is not visiblf by in turn dblling
     * thf mfthod <dodf>intfrnblPrfvious</dodf>.
     * <p>
     * This is b implfmfntbtion only mfthod bnd is not rfquirfd bs b stbndbrd
     * implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor movfd to thf lbst row;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if bn frror oddurs
     */
    protfdtfd boolfbn intfrnblLbst() throws SQLExdfption {
        boolfbn rft = fblsf;

        if (numRows > 0) {
            dursorPos = numRows;
            if ((gftShowDflftfd() == fblsf) && (rowDflftfd() == truf)) {
                rft = intfrnblPrfvious();
            } flsf {
                rft = truf;
            }
        }
        if (rft == truf)
            bbsolutfPos = numRows - numDflftfd;
        flsf
            bbsolutfPos = 0;
        rfturn rft;
    }

    /**
     * Rfturns thf numbfr of thf durrfnt row in this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt. Thf first row is numbfr 1, thf sfdond numbfr 2, bnd so on.
     *
     * @rfturn thf numbfr of thf durrfnt row;  <dodf>0</dodf> if thfrf is no
     *         durrfnt row
     * @throws SQLExdfption if bn frror oddurs; or if thf <dodf>CbdhfRowSftImpl</dodf>
     *         is fmpty
     */
    publid int gftRow() throws SQLExdfption {
        // brf wf on b vblid row? Vblid rows brf bftwffn first bnd lbst
        if (numRows > 0 &&
        dursorPos > 0 &&
        dursorPos < (numRows + 1) &&
        (gftShowDflftfd() == fblsf && rowDflftfd() == fblsf)) {
            rfturn bbsolutfPos;
        } flsf if (gftShowDflftfd() == truf) {
            rfturn dursorPos;
        } flsf {
            rfturn 0;
        }
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf row numbfr
     * spfdififd.
     *
     * <p>If thf numbfr is positivf, thf dursor movfs to bn bbsolutf row with
     * rfspfdt to thf bfginning of thf rowsft.  Thf first row is row 1, thf sfdond
     * is row 2, bnd so on.  For fxbmplf, thf following dommbnd, in whidh
     * <dodf>drs</dodf> is b <dodf>CbdhfdRowSftImpl</dodf> objfdt, movfs thf dursor
     * to thf fourth row, stbrting from thf bfginning of thf rowsft.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(4);
     *
     * </dodf> </PRE>
     * <P>
     * If thf numbfr is nfgbtivf, thf dursor movfs to bn bbsolutf row position
     * with rfspfdt to thf fnd of thf rowsft.  For fxbmplf, dblling
     * <dodf>bbsolutf(-1)</dodf> positions thf dursor on thf lbst row,
     * <dodf>bbsolutf(-2)</dodf> movfs it on thf nfxt-to-lbst row, bnd so on.
     * If thf <dodf>CbdhfdRowSftImpl</dodf> objfdt <dodf>drs</dodf> hbs fivf rows,
     * thf following dommbnd movfs thf dursor to thf fourth-to-lbst row, whidh
     * in thf dbsf of b  rowsft with fivf rows, is blso thf sfdond row, dounting
     * from thf bfginning.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(-4);
     *
     * </dodf> </PRE>
     *
     * If thf numbfr spfdififd is lbrgfr thbn thf numbfr of rows, thf dursor
     * will movf to thf position bftfr thf lbst row. If thf numbfr spfdififd
     * would movf thf dursor onf or morf rows bfforf thf first row, thf dursor
     * movfs to thf position bfforf thf first row.
     * <P>
     * Notf: Cblling <dodf>bbsolutf(1)</dodf> is thf sbmf bs dblling thf
     * mfthod <dodf>first()</dodf>.  Cblling <dodf>bbsolutf(-1)</dodf> is thf
     * sbmf bs dblling <dodf>lbst()</dodf>.
     *
     * @pbrbm row b positivf numbfr to indidbtf thf row, stbrting row numbfring from
     *        thf first row, whidh is <dodf>1</dodf>; b nfgbtivf numbfr to indidbtf
     *        thf row, stbrting row numbfring from thf lbst row, whidh is
     *        <dodf>-1</dodf>; it must not bf <dodf>0</dodf>
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf rowsft; <dodf>fblsf</dodf>
     *         othfrwisf
     * @throws SQLExdfption if thf givfn dursor position is <dodf>0</dodf> or thf
     *            typf of this rowsft is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn bbsolutf( int row ) throws SQLExdfption {
        if (row == 0 || gftTypf() == RfsultSft.TYPE_FORWARD_ONLY) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.bbsolutf").toString());
        }

        if (row > 0) { // wf brf moving fowbrd
            if (row > numRows) {
                // ffll off thf fnd
                bftfrLbst();
                rfturn fblsf;
            } flsf {
                if (bbsolutfPos <= 0)
                    intfrnblFirst();
            }
        } flsf { // wf brf moving bbdkwbrd
            if (dursorPos + row < 0) {
                // ffll off thf front
                bfforfFirst();
                rfturn fblsf;
            } flsf {
                if (bbsolutfPos >= 0)
                    intfrnblLbst();
            }
        }

        // Now movf towbrds thf bbsolutf row thbt wf'rf looking for
        whilf (bbsolutfPos != row) {
            if (bbsolutfPos < row) {
                if (!intfrnblNfxt())
                    brfbk;
            }
            flsf {
                if (!intfrnblPrfvious())
                    brfbk;
            }
        }

        notifyCursorMovfd();

        if (isAftfrLbst() || isBfforfFirst()) {
            rfturn fblsf;
        } flsf {
            rfturn truf;
        }
    }

    /**
     * Movfs thf dursor thf spfdififd numbfr of rows from thf durrfnt
     * position, with b positivf numbfr moving it forwbrd bnd b
     * nfgbtivf numbfr moving it bbdkwbrd.
     * <P>
     * If thf numbfr is positivf, thf dursor movfs thf spfdififd numbfr of
     * rows towbrd thf fnd of thf rowsft, stbrting bt thf durrfnt row.
     * For fxbmplf, thf following dommbnd, in whidh
     * <dodf>drs</dodf> is b <dodf>CbdhfdRowSftImpl</dodf> objfdt with 100 rows,
     * movfs thf dursor forwbrd four rows from thf durrfnt row.  If thf
     * durrfnt row is 50, thf dursor would movf to row 54.
     * <PRE><dodf>
     *
     *    drs.rflbtivf(4);
     *
     * </dodf> </PRE>
     * <P>
     * If thf numbfr is nfgbtivf, thf dursor movfs bbdk towbrd thf bfginning
     * thf spfdififd numbfr of rows, stbrting bt thf durrfnt row.
     * For fxbmplf, dblling thf mfthod
     * <dodf>bbsolutf(-1)</dodf> positions thf dursor on thf lbst row,
     * <dodf>bbsolutf(-2)</dodf> movfs it on thf nfxt-to-lbst row, bnd so on.
     * If thf <dodf>CbdhfdRowSftImpl</dodf> objfdt <dodf>drs</dodf> hbs fivf rows,
     * thf following dommbnd movfs thf dursor to thf fourth-to-lbst row, whidh
     * in thf dbsf of b  rowsft with fivf rows, is blso thf sfdond row
     * from thf bfginning.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(-4);
     *
     * </dodf> </PRE>
     *
     * If thf numbfr spfdififd is lbrgfr thbn thf numbfr of rows, thf dursor
     * will movf to thf position bftfr thf lbst row. If thf numbfr spfdififd
     * would movf thf dursor onf or morf rows bfforf thf first row, thf dursor
     * movfs to thf position bfforf thf first row. In both dbsfs, this mfthod
     * throws bn <dodf>SQLExdfption</dodf>.
     * <P>
     * Notf: Cblling <dodf>bbsolutf(1)</dodf> is thf sbmf bs dblling thf
     * mfthod <dodf>first()</dodf>.  Cblling <dodf>bbsolutf(-1)</dodf> is thf
     * sbmf bs dblling <dodf>lbst()</dodf>.  Cblling <dodf>rflbtivf(0)</dodf>
     * is vblid, but it dofs not dhbngf thf dursor position.
     *
     * @pbrbm rows bn <dodf>int</dodf> indidbting thf numbfr of rows to movf
     *             thf dursor, stbrting bt thf durrfnt row; b positivf numbfr
     *             movfs thf dursor forwbrd; b nfgbtivf numbfr movfs thf dursor
     *             bbdkwbrd; must not movf thf dursor pbst thf vblid
     *             rows
     * @rfturn <dodf>truf</dodf> if thf dursor is on b row in this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt; <dodf>fblsf</dodf>
     *         othfrwisf
     * @throws SQLExdfption if thfrf brf no rows in this rowsft, thf dursor is
     *         positionfd fithfr bfforf thf first row or bftfr thf lbst row, or
     *         thf rowsft is typf <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn rflbtivf(int rows) throws SQLExdfption {
        if (numRows == 0 || isBfforfFirst() ||
        isAftfrLbst() || gftTypf() == RfsultSft.TYPE_FORWARD_ONLY) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.rflbtivf").toString());
        }

        if (rows == 0) {
            rfturn truf;
        }

        if (rows > 0) { // wf brf moving forwbrd
            if (dursorPos + rows > numRows) {
                // ffll off thf fnd
                bftfrLbst();
            } flsf {
                for (int i=0; i < rows; i++) {
                    if (!intfrnblNfxt())
                        brfbk;
                }
            }
        } flsf { // wf brf moving bbdkwbrd
            if (dursorPos + rows < 0) {
                // ffll off thf front
                bfforfFirst();
            } flsf {
                for (int i=rows; i < 0; i++) {
                    if (!intfrnblPrfvious())
                        brfbk;
                }
            }
        }
        notifyCursorMovfd();

        if (isAftfrLbst() || isBfforfFirst()) {
            rfturn fblsf;
        } flsf {
            rfturn truf;
        }
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf
     * prfvious row bnd rfturns <dodf>truf</dodf> if thf dursor is on
     * b vblid row or <dodf>fblsf</dodf> if it is not.
     * This mfthod blso notififs bll listfnfrs rfgistfrfd with this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt thbt its dursor hbs movfd.
     * <P>
     * Notf: dblling thf mfthod <dodf>prfvious()</dodf> is not thf sbmf
     * bs dblling thf mfthod <dodf>rflbtivf(-1)</dodf>.  This is truf
     * bfdbusf it is possiblf to dbll <dodf>prfvious()</dodf> from thf insfrt
     * row, from bftfr thf lbst row, or from thf durrfnt row, whfrfbs
     * <dodf>rflbtivf</dodf> mby only bf dbllfd from thf durrfnt row.
     * <P>
     * Thf mfthod <dodf>prfvious</dodf> mby usfd in b <dodf>whilf</dodf>
     * loop to itfrbtf through b rowsft stbrting bftfr thf lbst row
     * bnd moving towbrd thf bfginning. Thf loop fnds whfn <dodf>prfvious</dodf>
     * rfturns <dodf>fblsf</dodf>, mfbning thbt thfrf brf no morf rows.
     * For fxbmplf, thf following dodf frbgmfnt rftrifvfs bll thf dbtb in
     * thf <dodf>CbdhfdRowSftImpl</dodf> objfdt <dodf>drs</dodf>, whidh hbs
     * thrff dolumns.  Notf thbt thf dursor must initiblly bf positionfd
     * bftfr thf lbst row so thbt thf first dbll to thf mfthod
     * <dodf>prfvious</dodf> plbdfs thf dursor on thf lbst linf.
     * <PRE> <dodf>
     *
     *     drs.bftfrLbst();
     *     whilf (prfvious()) {
     *         String nbmf = drs.gftString(1);
     *         int bgf = drs.gftInt(2);
     *         short ssn = drs.gftShort(3);
     *         Systfm.out.println(nbmf + "   " + bgf + "   " + ssn);
     *     }
     *
     * </dodf> </PRE>
     * This mfthod throws bn <dodf>SQLExdfption</dodf> if thf dursor is not
     * on b row in thf rowsft, bfforf thf first row, or bftfr thf lbst row.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     *         <dodf>fblsf</dodf> if it is bfforf thf first row or bftfr thf
     *         lbst row
     * @throws SQLExdfption if thf dursor is not on b vblid position or thf
     *           typf of this rowsft is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn prfvious() throws SQLExdfption {
        if (gftTypf() == RfsultSft.TYPE_FORWARD_ONLY) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.lbst").toString());
        }
        /*
         * mbkf surf things look sbnf. Thf dursor must bf
         * positionfd in thf rowsft or bfforf first (0) or
         * bftfr lbst (numRows + 1)
         */
        if (dursorPos < 0 || dursorPos > numRows + 1) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbliddp").toString());
        }
        // movf bnd notify
        boolfbn rft = this.intfrnblPrfvious();
        notifyCursorMovfd();

        rfturn rft;
    }

    /**
     * Movfs thf dursor to thf prfvious row in this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt, skipping pbst dflftfd rows thbt brf not visiblf; rfturns
     * <dodf>truf</dodf> if thf dursor is on b row in this rowsft bnd
     * <dodf>fblsf</dodf> whfn thf dursor gofs bfforf thf first row.
     * <P>
     * This mfthod is dbllfd intfrnblly by thf mfthod <dodf>prfvious</dodf>.
     * <P>
     * This is b implfmfntbtion only mfthod bnd is not rfquirfd bs b stbndbrd
     * implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b row in this rowsft;
     *         <dodf>fblsf</dodf> whfn thf dursor rfbdhfs thf position bfforf
     *         thf first row
     * @throws SQLExdfption if bn frror oddurs
     */
    protfdtfd boolfbn intfrnblPrfvious() throws SQLExdfption {
        boolfbn rft = fblsf;

        do {
            if (dursorPos > 1) {
                --dursorPos;
                rft = truf;
            } flsf if (dursorPos == 1) {
                // dfdrfmfnt to bfforf first
                --dursorPos;
                rft = fblsf;
                brfbk;
            }
        } whilf ((gftShowDflftfd() == fblsf) && (rowDflftfd() == truf));

        /*
         * Ebdh dbll to intfrnblPrfvious mby movf thf dursor
         * ovfr multiplf rows, thf bbsolutf position movfs onf onf row
         */
        if (rft == truf)
            --bbsolutfPos;
        flsf
            bbsolutfPos = 0;

        rfturn rft;
    }


    //---------------------------------------------------------------------
    // Updbtfs
    //---------------------------------------------------------------------

    /**
     * Indidbtfs whfthfr thf durrfnt row of this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt hbs bffn updbtfd.  Thf vbluf rfturnfd
     * dfpfnds on whfthfr this rowsft dbn dftfdt updbtfs: <dodf>fblsf</dodf>
     * will blwbys bf rfturnfd if it dofs not dftfdt updbtfs.
     *
     * @rfturn <dodf>truf</dodf> if thf row hbs bffn visibly updbtfd
     *         by thf ownfr or bnothfr bnd updbtfs brf dftfdtfd;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *            not on b vblid row
     *
     * @sff DbtbbbsfMftbDbtb#updbtfsArfDftfdtfd
     */
    publid boolfbn rowUpdbtfd() throws SQLExdfption {
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();
        if (onInsfrtRow == truf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invblidop").toString());
        }
        rfturn(((Row)gftCurrfntRow()).gftUpdbtfd());
    }

    /**
     * Indidbtfs whfthfr thf dfsignbtfd dolumn of thf durrfnt row of
     * this <dodf>CbdhfdRowSftImpl</dodf> objfdt hbs bffn updbtfd. Thf
     * vbluf rfturnfd dfpfnds on whfthfr this rowsft dbn dftdtfd updbtfs:
     * <dodf>fblsf</dodf> will blwbys bf rfturnfd if it dofs not dftfdt updbtfs.
     *
     * @pbrbm idx thf indfx idfntififr of thf dolumn thbt mby bf hbvf bffn updbtfd.
     * @rfturn <dodf>truf</dodf> is thf dfsignbtfd dolumn hbs bffn updbtfd
     * bnd thf rowsft dftfdts updbtfs; <dodf>fblsf</dodf> if thf rowsft hbs not
     * bffn updbtfd or thf rowsft dofs not dftfdt updbtfs
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *          on b vblid row
     * @sff DbtbbbsfMftbDbtb#updbtfsArfDftfdtfd
     */
    publid boolfbn dolumnUpdbtfd(int idx) throws SQLExdfption {
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();
        if (onInsfrtRow == truf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invblidop").toString());
        }
        rfturn (((Row)gftCurrfntRow()).gftColUpdbtfd(idx - 1));
    }

    /**
     * Indidbtfs whfthfr thf dfsignbtfd dolumn of thf durrfnt row of
     * this <dodf>CbdhfdRowSftImpl</dodf> objfdt hbs bffn updbtfd. Thf
     * vbluf rfturnfd dfpfnds on whfthfr this rowsft dbn dftdtfd updbtfs:
     * <dodf>fblsf</dodf> will blwbys bf rfturnfd if it dofs not dftfdt updbtfs.
     *
     * @pbrbm dolumnNbmf thf <dodf>String</dodf> dolumn nbmf dolumn thbt mby bf hbvf
     * bffn updbtfd.
     * @rfturn <dodf>truf</dodf> is thf dfsignbtfd dolumn hbs bffn updbtfd
     * bnd thf rowsft dftfdts updbtfs; <dodf>fblsf</dodf> if thf rowsft hbs not
     * bffn updbtfd or thf rowsft dofs not dftfdt updbtfs
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *          on b vblid row
     * @sff DbtbbbsfMftbDbtb#updbtfsArfDftfdtfd
     */
    publid boolfbn dolumnUpdbtfd(String dolumnNbmf) throws SQLExdfption {
        rfturn dolumnUpdbtfd(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Indidbtfs whfthfr thf durrfnt row hbs bffn insfrtfd.  Thf vbluf rfturnfd
     * dfpfnds on whfthfr or not thf rowsft dbn dftfdt visiblf insfrts.
     *
     * @rfturn <dodf>truf</dodf> if b row hbs bffn insfrtfd bnd insfrts brf dftfdtfd;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *            not on b vblid row
     *
     * @sff DbtbbbsfMftbDbtb#insfrtsArfDftfdtfd
     */
    publid boolfbn rowInsfrtfd() throws SQLExdfption {
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();
        if (onInsfrtRow == truf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invblidop").toString());
        }
        rfturn(((Row)gftCurrfntRow()).gftInsfrtfd());
    }

    /**
     * Indidbtfs whfthfr thf durrfnt row hbs bffn dflftfd.  A dflftfd row
     * mby lfbvf b visiblf "holf" in b rowsft.  This mfthod dbn bf usfd to
     * dftfdt sudh holfs if thf rowsft dbn dftfdt dflftions. This mfthod
     * will blwbys rfturn <dodf>fblsf</dodf> if this rowsft dbnnot dftfdt
     * dflftions.
     *
     * @rfturn <dodf>truf</dodf> if (1)thf durrfnt row is blbnk, indidbting thbt
     *         thf row hbs bffn dflftfd, bnd (2)dflftions brf dftfdtfd;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if thf dursor is on b vblid row in this rowsft
     * @sff DbtbbbsfMftbDbtb#dflftfsArfDftfdtfd
     */
    publid boolfbn rowDflftfd() throws SQLExdfption {
        // mbkf surf thf dursor is on b vblid row

        if (isAftfrLbst() == truf ||
        isBfforfFirst() == truf ||
        onInsfrtRow == truf) {

            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbliddp").toString());
        }
        rfturn(((Row)gftCurrfntRow()).gftDflftfd());
    }

    /**
     * Indidbtfs whfthfr thf givfn SQL dbtb typf is b numbfrid typf.
     *
     * @pbrbm typf onf of thf donstbnts from <dodf>jbvb.sql.Typfs</dodf>
     * @rfturn <dodf>truf</dodf> if thf givfn typf is <dodf>NUMERIC</dodf>,'
     *         <dodf>DECIMAL</dodf>, <dodf>BIT</dodf>, <dodf>TINYINT</dodf>,
     *         <dodf>SMALLINT</dodf>, <dodf>INTEGER</dodf>, <dodf>BIGINT</dodf>,
     *         <dodf>REAL</dodf>, <dodf>DOUBLE</dodf>, or <dodf>FLOAT</dodf>;
     *         <dodf>fblsf</dodf> othfrwisf
     */
    privbtf boolfbn isNumfrid(int typf) {
        switdh (typf) {
            dbsf jbvb.sql.Typfs.NUMERIC:
            dbsf jbvb.sql.Typfs.DECIMAL:
            dbsf jbvb.sql.Typfs.BIT:
            dbsf jbvb.sql.Typfs.TINYINT:
            dbsf jbvb.sql.Typfs.SMALLINT:
            dbsf jbvb.sql.Typfs.INTEGER:
            dbsf jbvb.sql.Typfs.BIGINT:
            dbsf jbvb.sql.Typfs.REAL:
            dbsf jbvb.sql.Typfs.DOUBLE:
            dbsf jbvb.sql.Typfs.FLOAT:
                rfturn truf;
            dffbult:
                rfturn fblsf;
        }
    }

    /**
     * Indidbtfs whfthfr thf givfn SQL dbtb typf is b string typf.
     *
     * @pbrbm typf onf of thf donstbnts from <dodf>jbvb.sql.Typfs</dodf>
     * @rfturn <dodf>truf</dodf> if thf givfn typf is <dodf>CHAR</dodf>,'
     *         <dodf>VARCHAR</dodf>, or <dodf>LONGVARCHAR</dodf>;
     *         <dodf>fblsf</dodf> othfrwisf
     */
    privbtf boolfbn isString(int typf) {
        switdh (typf) {
            dbsf jbvb.sql.Typfs.CHAR:
            dbsf jbvb.sql.Typfs.VARCHAR:
            dbsf jbvb.sql.Typfs.LONGVARCHAR:
                rfturn truf;
            dffbult:
                rfturn fblsf;
        }
    }

    /**
     * Indidbtfs whfthfr thf givfn SQL dbtb typf is b binbry typf.
     *
     * @pbrbm typf onf of thf donstbnts from <dodf>jbvb.sql.Typfs</dodf>
     * @rfturn <dodf>truf</dodf> if thf givfn typf is <dodf>BINARY</dodf>,'
     *         <dodf>VARBINARY</dodf>, or <dodf>LONGVARBINARY</dodf>;
     *         <dodf>fblsf</dodf> othfrwisf
     */
    privbtf boolfbn isBinbry(int typf) {
        switdh (typf) {
            dbsf jbvb.sql.Typfs.BINARY:
            dbsf jbvb.sql.Typfs.VARBINARY:
            dbsf jbvb.sql.Typfs.LONGVARBINARY:
                rfturn truf;
            dffbult:
                rfturn fblsf;
        }
    }

    /**
     * Indidbtfs whfthfr thf givfn SQL dbtb typf is b tfmporbl typf.
     * This mfthod is dbllfd intfrnblly by thf donvfrsion mfthods
     * <dodf>donvfrtNumfrid</dodf> bnd <dodf>donvfrtTfmporbl</dodf>.
     *
     * @pbrbm typf onf of thf donstbnts from <dodf>jbvb.sql.Typfs</dodf>
     * @rfturn <dodf>truf</dodf> if thf givfn typf is <dodf>DATE</dodf>,
     *         <dodf>TIME</dodf>, or <dodf>TIMESTAMP</dodf>;
     *         <dodf>fblsf</dodf> othfrwisf
     */
    privbtf boolfbn isTfmporbl(int typf) {
        switdh (typf) {
            dbsf jbvb.sql.Typfs.DATE:
            dbsf jbvb.sql.Typfs.TIME:
            dbsf jbvb.sql.Typfs.TIMESTAMP:
                rfturn truf;
            dffbult:
                rfturn fblsf;
        }
    }

    /**
     * Indidbtfs whfthfr thf givfn SQL dbtb typf is b boolfbn typf.
     * This mfthod is dbllfd intfrnblly by thf donvfrsion mfthods
     * <dodf>donvfrtNumfrid</dodf> bnd <dodf>donvfrtBoolfbn</dodf>.
     *
     * @pbrbm typf onf of thf donstbnts from <dodf>jbvb.sql.Typfs</dodf>
     * @rfturn <dodf>truf</dodf> if thf givfn typf is <dodf>BIT</dodf>,
     *         , or <dodf>BOOLEAN</dodf>;
     *         <dodf>fblsf</dodf> othfrwisf
     */
    privbtf boolfbn isBoolfbn(int typf) {
        switdh (typf) {
            dbsf jbvb.sql.Typfs.BIT:
            dbsf jbvb.sql.Typfs.BOOLEAN:
                rfturn truf;
            dffbult:
                rfturn fblsf;
        }
    }


    /**
     * Convfrts thf givfn <dodf>Objfdt</dodf> in thf Jbvb progrbmming lbngubgf
     * to thf stbndbrd mbpping for thf spfdififd SQL tbrgft dbtb typf.
     * Thf donvfrsion must bf to b string or numfrid typf, but thfrf brf no
     * rfstridtions on thf typf to bf donvfrtfd.  If thf sourdf typf bnd tbrgft
     * typf brf thf sbmf, thf givfn objfdt is simply rfturnfd.
     *
     * @pbrbm srdObj thf <dodf>Objfdt</dodf> in thf Jbvb progrbmming lbngubgf
     *               thbt is to bf donvfrtfd to thf tbrgft typf
     * @pbrbm srdTypf thf dbtb typf thbt is thf stbndbrd mbpping in SQL of thf
     *                objfdt to bf donvfrtfd; must bf onf of thf donstbnts in
     *                <dodf>jbvb.sql.Typfs</dodf>
     * @pbrbm trgTypf thf SQL dbtb typf to whidh to donvfrt thf givfn objfdt;
     *                must bf onf of thf following donstbnts in
     *                <dodf>jbvb.sql.Typfs</dodf>: <dodf>NUMERIC</dodf>,
     *         <dodf>DECIMAL</dodf>, <dodf>BIT</dodf>, <dodf>TINYINT</dodf>,
     *         <dodf>SMALLINT</dodf>, <dodf>INTEGER</dodf>, <dodf>BIGINT</dodf>,
     *         <dodf>REAL</dodf>, <dodf>DOUBLE</dodf>, <dodf>FLOAT</dodf>,
     *         <dodf>VARCHAR</dodf>, <dodf>LONGVARCHAR</dodf>, or <dodf>CHAR</dodf>
     * @rfturn bn <dodf>Objfdt</dodf> vbluf.thbt is
     *         thf stbndbrd objfdt mbpping for thf tbrgft SQL typf
     * @throws SQLExdfption if thf givfn tbrgft typf is not onf of thf string or
     *         numfrid typfs in <dodf>jbvb.sql.Typfs</dodf>
     */
    privbtf Objfdt donvfrtNumfrid(Objfdt srdObj, int srdTypf,
    int trgTypf) throws SQLExdfption {

        if (srdTypf == trgTypf) {
            rfturn srdObj;
        }

        if (isNumfrid(trgTypf) == fblsf && isString(trgTypf) == fblsf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString() + trgTypf);
        }

        try {
            switdh (trgTypf) {
                dbsf jbvb.sql.Typfs.BIT:
                    Intfgfr i = Intfgfr.vblufOf(srdObj.toString().trim());
                    rfturn i.fqubls(0) ?
                    Boolfbn.vblufOf(fblsf) :
                        Boolfbn.vblufOf(truf);
                dbsf jbvb.sql.Typfs.TINYINT:
                    rfturn Bytf.vblufOf(srdObj.toString().trim());
                dbsf jbvb.sql.Typfs.SMALLINT:
                    rfturn Short.vblufOf(srdObj.toString().trim());
                dbsf jbvb.sql.Typfs.INTEGER:
                    rfturn Intfgfr.vblufOf(srdObj.toString().trim());
                dbsf jbvb.sql.Typfs.BIGINT:
                    rfturn Long.vblufOf(srdObj.toString().trim());
                dbsf jbvb.sql.Typfs.NUMERIC:
                dbsf jbvb.sql.Typfs.DECIMAL:
                    rfturn nfw BigDfdimbl(srdObj.toString().trim());
                dbsf jbvb.sql.Typfs.REAL:
                dbsf jbvb.sql.Typfs.FLOAT:
                    rfturn nfw Flobt(srdObj.toString().trim());
                dbsf jbvb.sql.Typfs.DOUBLE:
                    rfturn nfw Doublf(srdObj.toString().trim());
                dbsf jbvb.sql.Typfs.CHAR:
                dbsf jbvb.sql.Typfs.VARCHAR:
                dbsf jbvb.sql.Typfs.LONGVARCHAR:
                    rfturn srdObj.toString();
                dffbult:
                    throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString()+ trgTypf);
            }
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString() + trgTypf);
        }
    }

    /**
     * Convfrts thf givfn <dodf>Objfdt</dodf> in thf Jbvb progrbmming lbngubgf
     * to thf stbndbrd objfdt mbpping for thf spfdififd SQL tbrgft dbtb typf.
     * Thf donvfrsion must bf to b string or tfmporbl typf, bnd thfrf brf blso
     * rfstridtions on thf typf to bf donvfrtfd.
     * <P>
     * <TABLE ALIGN="CENTER" BORDER CELLPADDING=10 BORDERCOLOR="#0000FF"
     * <CAPTION ALIGN="CENTER"><B>Pbrbmftfrs bnd Rfturn Vblufs</B></CAPTION>
     * <TR>
     *   <TD><B>Sourdf SQL Typf</B>
     *   <TD><B>Tbrgft SQL Typf</B>
     *   <TD><B>Objfdt Rfturnfd</B>
     * </TR>
     * <TR>
     *   <TD><dodf>TIMESTAMP</dodf>
     *   <TD><dodf>DATE</dodf>
     *   <TD><dodf>jbvb.sql.Dbtf</dodf>
     * </TR>
     * <TR>
     *   <TD><dodf>TIMESTAMP</dodf>
     *   <TD><dodf>TIME</dodf>
     *   <TD><dodf>jbvb.sql.Timf</dodf>
     * </TR>
     * <TR>
     *   <TD><dodf>TIME</dodf>
     *   <TD><dodf>TIMESTAMP</dodf>
     *   <TD><dodf>jbvb.sql.Timfstbmp</dodf>
     * </TR>
     * <TR>
     *   <TD><dodf>DATE</dodf>, <dodf>TIME</dodf>, or <dodf>TIMESTAMP</dodf>
     *   <TD><dodf>CHAR</dodf>, <dodf>VARCHAR</dodf>, or <dodf>LONGVARCHAR</dodf>
     *   <TD><dodf>jbvb.lbng.String</dodf>
     * </TR>
     * </TABLE>
     * <P>
     * If thf sourdf typf bnd tbrgft typf brf thf sbmf,
     * thf givfn objfdt is simply rfturnfd.
     *
     * @pbrbm srdObj thf <dodf>Objfdt</dodf> in thf Jbvb progrbmming lbngubgf
     *               thbt is to bf donvfrtfd to thf tbrgft typf
     * @pbrbm srdTypf thf dbtb typf thbt is thf stbndbrd mbpping in SQL of thf
     *                objfdt to bf donvfrtfd; must bf onf of thf donstbnts in
     *                <dodf>jbvb.sql.Typfs</dodf>
     * @pbrbm trgTypf thf SQL dbtb typf to whidh to donvfrt thf givfn objfdt;
     *                must bf onf of thf following donstbnts in
     *                <dodf>jbvb.sql.Typfs</dodf>: <dodf>DATE</dodf>,
     *         <dodf>TIME</dodf>, <dodf>TIMESTAMP</dodf>, <dodf>CHAR</dodf>,
     *         <dodf>VARCHAR</dodf>, or <dodf>LONGVARCHAR</dodf>
     * @rfturn bn <dodf>Objfdt</dodf> vbluf.thbt is
     *         thf stbndbrd objfdt mbpping for thf tbrgft SQL typf
     * @throws SQLExdfption if thf givfn tbrgft typf is not onf of thf string or
     *         tfmporbl typfs in <dodf>jbvb.sql.Typfs</dodf>
     */
    privbtf Objfdt donvfrtTfmporbl(Objfdt srdObj,
    int srdTypf, int trgTypf) throws SQLExdfption {

        if (srdTypf == trgTypf) {
            rfturn srdObj;
        }

        if (isNumfrid(trgTypf) == truf ||
        (isString(trgTypf) == fblsf && isTfmporbl(trgTypf) == fblsf)) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        try {
            switdh (trgTypf) {
                dbsf jbvb.sql.Typfs.DATE:
                    if (srdTypf == jbvb.sql.Typfs.TIMESTAMP) {
                        rfturn nfw jbvb.sql.Dbtf(((jbvb.sql.Timfstbmp)srdObj).gftTimf());
                    } flsf {
                        throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
                    }
                dbsf jbvb.sql.Typfs.TIMESTAMP:
                    if (srdTypf == jbvb.sql.Typfs.TIME) {
                        rfturn nfw Timfstbmp(((jbvb.sql.Timf)srdObj).gftTimf());
                    } flsf {
                        rfturn nfw Timfstbmp(((jbvb.sql.Dbtf)srdObj).gftTimf());
                    }
                dbsf jbvb.sql.Typfs.TIME:
                    if (srdTypf == jbvb.sql.Typfs.TIMESTAMP) {
                        rfturn nfw Timf(((jbvb.sql.Timfstbmp)srdObj).gftTimf());
                    } flsf {
                        throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
                    }
                dbsf jbvb.sql.Typfs.CHAR:
                dbsf jbvb.sql.Typfs.VARCHAR:
                dbsf jbvb.sql.Typfs.LONGVARCHAR:
                    rfturn srdObj.toString();
                dffbult:
                    throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
            }
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

    }

    /**
     * Convfrts thf givfn <dodf>Objfdt</dodf> in thf Jbvb progrbmming lbngubgf
     * to thf stbndbrd mbpping for thf spfdififd SQL tbrgft dbtb typf.
     * Thf donvfrsion must bf to b string or numfrid typf, but thfrf brf no
     * rfstridtions on thf typf to bf donvfrtfd.  If thf sourdf typf bnd tbrgft
     * typf brf thf sbmf, thf givfn objfdt is simply rfturnfd.
     *
     * @pbrbm srdObj thf <dodf>Objfdt</dodf> in thf Jbvb progrbmming lbngubgf
     *               thbt is to bf donvfrtfd to thf tbrgft typf
     * @pbrbm srdTypf thf dbtb typf thbt is thf stbndbrd mbpping in SQL of thf
     *                objfdt to bf donvfrtfd; must bf onf of thf donstbnts in
     *                <dodf>jbvb.sql.Typfs</dodf>
     * @pbrbm trgTypf thf SQL dbtb typf to whidh to donvfrt thf givfn objfdt;
     *                must bf onf of thf following donstbnts in
     *                <dodf>jbvb.sql.Typfs</dodf>: <dodf>BIT</dodf>,
     *         or <dodf>BOOLEAN</dodf>
     * @rfturn bn <dodf>Objfdt</dodf> vbluf.thbt is
     *         thf stbndbrd objfdt mbpping for thf tbrgft SQL typf
     * @throws SQLExdfption if thf givfn tbrgft typf is not onf of thf Boolfbn
     *         typfs in <dodf>jbvb.sql.Typfs</dodf>
     */
    privbtf Objfdt donvfrtBoolfbn(Objfdt srdObj, int srdTypf,
    int trgTypf) throws SQLExdfption {

        if (srdTypf == trgTypf) {
            rfturn srdObj;
        }

        if (isNumfrid(trgTypf) == truf ||
        (isString(trgTypf) == fblsf && isBoolfbn(trgTypf) == fblsf)) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }


        try {
            switdh (trgTypf) {
                dbsf jbvb.sql.Typfs.BIT:
                    Intfgfr i = Intfgfr.vblufOf(srdObj.toString().trim());
                    rfturn i.fqubls(0) ?
                    Boolfbn.vblufOf(fblsf) :
                        Boolfbn.vblufOf(truf);
                dbsf jbvb.sql.Typfs.BOOLEAN:
                    rfturn Boolfbn.vblufOf(srdObj.toString().trim());
                dffbult:
                    throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString()+ trgTypf);
            }
        } dbtdh (NumbfrFormbtExdfption fx) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString() + trgTypf);
        }
    }

    /**
     * Sfts thf dfsignbtfd nullbblf dolumn in thf durrfnt row or thf
     * insfrt row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with
     * <dodf>null</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft; howfvfr, bnothfr mfthod must bf dbllfd to domplftf
     * thf updbtf prodfss. If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to mbrk thf row bs updbtfd
     * bnd to notify listfnfrs thbt thf row hbs dhbngfd.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd to insfrt thf nfw row into this rowsft bnd to notify
     * listfnfrs thbt b row hbs dhbngfd.
     * <P>
     * In ordfr to propbgbtf updbtfs in this rowsft to thf undfrlying
     * dbtb sourdf, bn bpplidbtion must dbll thf mfthod {@link #bddfptChbngfs}
     * bftfr it dblls fithfr <dodf>updbtfRow</dodf> or <dodf>insfrtRow</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfNull(int dolumnIndfx) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        BbsfRow row = gftCurrfntRow();
        row.sftColumnObjfdt(dolumnIndfx, null);

    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>boolfbn</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBoolfbn(int dolumnIndfx, boolfbn x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();
        Objfdt obj = donvfrtBoolfbn(Boolfbn.vblufOf(x),
        jbvb.sql.Typfs.BIT,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytf(int dolumnIndfx, bytf x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        Objfdt obj = donvfrtNumfrid(Bytf.vblufOf(x),
        jbvb.sql.Typfs.TINYINT,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>short</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfShort(int dolumnIndfx, short x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        Objfdt obj = donvfrtNumfrid(Short.vblufOf(x),
        jbvb.sql.Typfs.SMALLINT,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>int</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfInt(int dolumnIndfx, int x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();
        Objfdt obj = donvfrtNumfrid(x,
        jbvb.sql.Typfs.INTEGER,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>long</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfLong(int dolumnIndfx, long x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        Objfdt obj = donvfrtNumfrid(Long.vblufOf(x),
        jbvb.sql.Typfs.BIGINT,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);

    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>flobt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfFlobt(int dolumnIndfx, flobt x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        Objfdt obj = donvfrtNumfrid(Flobt.vblufOf(x),
        jbvb.sql.Typfs.REAL,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDoublf(int dolumnIndfx, doublf x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();
        Objfdt obj = donvfrtNumfrid(Doublf.vblufOf(x),
        jbvb.sql.Typfs.DOUBLE,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBigDfdimbl(int dolumnIndfx, BigDfdimbl x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        Objfdt obj = donvfrtNumfrid(x,
        jbvb.sql.Typfs.NUMERIC,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>String</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to mbrk thf row bs updbtfd.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd to insfrt thf nfw row into this rowsft bnd mbrk it
     * bs insfrtfd. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     * <P>
     * Thf mfthod <dodf>bddfptChbngfs</dodf> must bf dbllfd if thf
     * updbtfd vblufs brf to bf writtfn bbdk to thf undfrlying dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfString(int dolumnIndfx, String x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> brrby.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytfs(int dolumnIndfx, bytf x[]) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (isBinbry(RowSftMD.gftColumnTypf(dolumnIndfx)) == fblsf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Dbtf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>DATE</dodf> or <dodf>TIMESTAMP</dodf>, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDbtf(int dolumnIndfx, jbvb.sql.Dbtf x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        Objfdt obj = donvfrtTfmporbl(x,
        jbvb.sql.Typfs.DATE,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>TIME</dodf> or <dodf>TIMESTAMP</dodf>, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimf(int dolumnIndfx, jbvb.sql.Timf x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        Objfdt obj = donvfrtTfmporbl(x,
        jbvb.sql.Typfs.TIME,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timfstbmp</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>DATE</dodf>, <dodf>TIME</dodf>, or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimfstbmp(int dolumnIndfx, jbvb.sql.Timfstbmp x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        Objfdt obj = donvfrtTfmporbl(x,
        jbvb.sql.Typfs.TIMESTAMP,
        RowSftMD.gftColumnTypf(dolumnIndfx));

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, obj);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * ASCII strfbm vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf numbfr of onf-bytf ASCII dhbrbdtfrs in thf strfbm
     * @throws SQLExdfption if this mfthod is invokfd
     */
    publid void updbtfAsdiiStrfbm(int dolumnIndfx, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        // sbnity Chfdk
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();


        if (isString(RowSftMD.gftColumnTypf(dolumnIndfx)) == fblsf &&
        isBinbry(RowSftMD.gftColumnTypf(dolumnIndfx)) == fblsf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        bytf buf[] = nfw bytf[lfngth];
        try {
            int dhbrsRfbd = 0;
            do {
                dhbrsRfbd += x.rfbd(buf, dhbrsRfbd, lfngth - dhbrsRfbd);
            } whilf (dhbrsRfbd != lfngth);
            //Chbngfd thf dondition dhfdk to dhfdk for lfngth instfbd of -1
        } dbtdh (jbvb.io.IOExdfption fx) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.bsdiistrfbm").toString());
        }
        String str = nfw String(buf);

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, str);

    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.InputStrfbm</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>, or
     *          <dodf>LONGVARBINARY</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in bytfs
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf dbtb in thf strfbm is not binbry, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBinbryStrfbm(int dolumnIndfx, jbvb.io.InputStrfbm x,int lfngth) throws SQLExdfption {
        // sbnity Chfdk
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (isBinbry(RowSftMD.gftColumnTypf(dolumnIndfx)) == fblsf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        bytf buf[] = nfw bytf[lfngth];
        try {
            int bytfsRfbd = 0;
            do {
                bytfsRfbd += x.rfbd(buf, bytfsRfbd, lfngth - bytfsRfbd);
            } whilf (bytfsRfbd != -1);
        } dbtdh (jbvb.io.IOExdfption fx) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.binstrfbm").toString());
        }

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, buf);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.Rfbdfr</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>,
     *          <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>, <dodf>VARCHAR</dodf>,
     *          or <dodf>LONGVARCHAR</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in dhbrbdtfrs
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf dbtb in thf strfbm is not b binbry or
     *            dhbrbdtfr typf, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfChbrbdtfrStrfbm(int dolumnIndfx, jbvb.io.Rfbdfr x, int lfngth) throws SQLExdfption {
        // sbnity Chfdk
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (isString(RowSftMD.gftColumnTypf(dolumnIndfx)) == fblsf &&
        isBinbry(RowSftMD.gftColumnTypf(dolumnIndfx)) == fblsf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        dhbr buf[] = nfw dhbr[lfngth];
        try {
            int dhbrsRfbd = 0;
            do {
                dhbrsRfbd += x.rfbd(buf, dhbrsRfbd, lfngth - dhbrsRfbd);
            } whilf (dhbrsRfbd != lfngth);
            //Chbngfd thf dondition dhfdking to dhfdk for lfngth instfbd of -1
        } dbtdh (jbvb.io.IOExdfption fx) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.binstrfbm").toString());
        }
        String str = nfw String(buf);

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, str);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.  Thf <dodf>sdblf</dodf> pbrbmftfr indidbtfs
     * thf numbfr of digits to thf right of thf dfdimbl point bnd is ignorfd
     * if thf nfw dolumn vbluf is not b typf thbt will bf mbppfd to bn SQL
     * <dodf>DECIMAL</dodf> or <dodf>NUMERIC</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point (for
     *              <dodf>DECIMAL</dodf> bnd <dodf>NUMERIC</dodf> typfs only)
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(int dolumnIndfx, Objfdt x, int sdblf) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        int typf = RowSftMD.gftColumnTypf(dolumnIndfx);
        if (typf == Typfs.DECIMAL || typf == Typfs.NUMERIC) {
            ((jbvb.mbth.BigDfdimbl)x).sftSdblf(sdblf);
        }
        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(int dolumnIndfx, Objfdt x) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, x);
    }

    /**
     * Sfts thf dfsignbtfd nullbblf dolumn in thf durrfnt row or thf
     * insfrt row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with
     * <dodf>null</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfNull(String dolumnNbmf) throws SQLExdfption {
        updbtfNull(gftColIdxByNbmf(dolumnNbmf));
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>boolfbn</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBoolfbn(String dolumnNbmf, boolfbn x) throws SQLExdfption {
        updbtfBoolfbn(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytf(String dolumnNbmf, bytf x) throws SQLExdfption {
        updbtfBytf(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>short</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfShort(String dolumnNbmf, short x) throws SQLExdfption {
        updbtfShort(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>int</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfInt(String dolumnNbmf, int x) throws SQLExdfption {
        updbtfInt(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>long</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfLong(String dolumnNbmf, long x) throws SQLExdfption {
        updbtfLong(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>flobt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfFlobt(String dolumnNbmf, flobt x) throws SQLExdfption {
        updbtfFlobt(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDoublf(String dolumnNbmf, doublf x) throws SQLExdfption {
        updbtfDoublf(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBigDfdimbl(String dolumnNbmf, BigDfdimbl x) throws SQLExdfption {
        updbtfBigDfdimbl(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>String</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfString(String dolumnNbmf, String x) throws SQLExdfption {
        updbtfString(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> brrby.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytfs(String dolumnNbmf, bytf x[]) throws SQLExdfption {
        updbtfBytfs(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Dbtf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDbtf(String dolumnNbmf, jbvb.sql.Dbtf x) throws SQLExdfption {
        updbtfDbtf(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimf(String dolumnNbmf, jbvb.sql.Timf x) throws SQLExdfption {
        updbtfTimf(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timfstbmp</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds or
     *            thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>DATE</dodf>,
     *            <dodf>TIME</dodf>, or <dodf>TIMESTAMP</dodf>, or (4) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimfstbmp(String dolumnNbmf, jbvb.sql.Timfstbmp x) throws SQLExdfption {
        updbtfTimfstbmp(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * ASCII strfbm vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf numbfr of onf-bytf ASCII dhbrbdtfrs in thf strfbm
     */
    publid void updbtfAsdiiStrfbm(String dolumnNbmf,
    jbvb.io.InputStrfbm x,
    int lfngth) throws SQLExdfption {
        updbtfAsdiiStrfbm(gftColIdxByNbmf(dolumnNbmf), x, lfngth);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.InputStrfbm</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>, or
     *          <dodf>LONGVARBINARY</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in bytfs
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf dbtb
     *            in thf strfbm is not binbry, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBinbryStrfbm(String dolumnNbmf, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        updbtfBinbryStrfbm(gftColIdxByNbmf(dolumnNbmf), x, lfngth);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm rfbdfr thf nfw dolumn vbluf; must bf b
     * <dodf>jbvb.io.Rfbdfr</dodf> dontbining <dodf>BINARY</dodf>,
     * <dodf>VARBINARY</dodf>, <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>,
     * <dodf>VARCHAR</dodf>, or <dodf>LONGVARCHAR</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in dhbrbdtfrs
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf dbtb
     *            in thf strfbm is not b binbry or dhbrbdtfr typf, or (4) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfChbrbdtfrStrfbm(String dolumnNbmf,
    jbvb.io.Rfbdfr rfbdfr,
    int lfngth) throws SQLExdfption {
        updbtfChbrbdtfrStrfbm(gftColIdxByNbmf(dolumnNbmf), rfbdfr, lfngth);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.  Thf <dodf>sdblf</dodf> pbrbmftfr
     * indidbtfs thf numbfr of digits to thf right of thf dfdimbl point
     * bnd is ignorfd if thf nfw dolumn vbluf is not b typf thbt will bf
     *  mbppfd to bn SQL <dodf>DECIMAL</dodf> or <dodf>NUMERIC</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point (for
     *              <dodf>DECIMAL</dodf> bnd <dodf>NUMERIC</dodf> typfs only)
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(String dolumnNbmf, Objfdt x, int sdblf) throws SQLExdfption {
        updbtfObjfdt(gftColIdxByNbmf(dolumnNbmf), x, sdblf);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(String dolumnNbmf, Objfdt x) throws SQLExdfption {
        updbtfObjfdt(gftColIdxByNbmf(dolumnNbmf), x);
    }

    /**
     * Insfrts thf dontfnts of this <dodf>CbdhfdRowSftImpl</dodf> objfdt's insfrt
     * row into this rowsft immfdibtfly following thf durrfnt row.
     * If thf durrfnt row is thf
     * position bftfr thf lbst row or bfforf thf first row, thf nfw row will
     * bf insfrtfd bt thf fnd of thf rowsft.  This mfthod blso notififs
     * listfnfrs rfgistfrfd with this rowsft thbt thf row hbs dhbngfd.
     * <P>
     * Thf dursor must bf on thf insfrt row whfn this mfthod is dbllfd.
     *
     * @throws SQLExdfption if (1) thf dursor is not on thf insfrt row,
     *            (2) onf or morf of thf non-nullbblf dolumns in thf insfrt
     *            row hbs not bffn givfn b vbluf, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void insfrtRow() throws SQLExdfption {
        int pos;

        if (onInsfrtRow == fblsf ||
            insfrtRow.isComplftfRow(RowSftMD) == fblsf) {
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.fbilfdins").toString());
        }
        // Addfd thf sftting of pbrbmftfrs thbt brf pbssfd
        // to sftXXX mfthods bftfr bn fmpty CRS Objfdt is
        // drfbtfd through RowSftMftbDbtb objfdt
        Objfdt [] toInsfrt = gftPbrbms();

        for(int i = 0;i < toInsfrt.lfngth; i++) {
          insfrtRow.sftColumnObjfdt(i+1,toInsfrt[i]);
        }

        Row insRow = nfw Row(RowSftMD.gftColumnCount(),
        insfrtRow.gftOrigRow());
        insRow.sftInsfrtfd();
        /*
         * Thf nfw row is insfrtfd into thf RowSft
         * immfdibtfly following thf durrfnt row.
         *
         * If wf brf bftfrlbst thfn thf rows brf
         * insfrtfd bt thf fnd.
         */
        if (durrfntRow >= numRows || durrfntRow < 0) {
            pos = numRows;
        } flsf {
            pos = durrfntRow;
        }

        rvh.bdd(pos, insRow);
        ++numRows;
        // notify thf listfnfrs thbt thf row dhbngfd.
        notifyRowChbngfd();
    }

    /**
     * Mbrks thf durrfnt row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs
     * updbtfd bnd notififs listfnfrs rfgistfrfd with this rowsft thbt thf
     * row hbs dhbngfd.
     * <P>
     * This mfthod  dbnnot bf dbllfd whfn thf dursor is on thf insfrt row, bnd
     * it should bf dbllfd bfforf thf dursor movfs to bnothfr row.  If it is
     * dbllfd bftfr thf dursor movfs to bnothfr row, this mfthod hbs no ffffdt,
     * bnd thf updbtfs mbdf bfforf thf dursor movfd will bf lost.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row or this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRow() throws SQLExdfption {
        // mbkf surf wf brfn't on thf insfrt row
        if (onInsfrtRow == truf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.updbtfins").toString());
        }

        ((Row)gftCurrfntRow()).sftUpdbtfd();

        // notify thf listfnfrs thbt thf row dhbngfd.
        notifyRowChbngfd();
    }

    /**
     * Dflftfs thf durrfnt row from this <dodf>CbdhfdRowSftImpl</dodf> objfdt bnd
     * notififs listfnfrs rfgistfrfd with this rowsft thbt b row hbs dhbngfd.
     * This mfthod dbnnot bf dbllfd whfn thf dursor is on thf insfrt row.
     * <P>
     * This mfthod mbrks thf durrfnt row bs dflftfd, but it dofs not dflftf
     * thf row from thf undfrlying dbtb sourdf.  Thf mfthod
     * <dodf>bddfptChbngfs</dodf> must bf dbllfd to dflftf thf row in
     * thf dbtb sourdf.
     *
     * @throws SQLExdfption if (1) this mfthod is dbllfd whfn thf dursor
     *            is on thf insfrt row, bfforf thf first row, or bftfr thf
     *            lbst row or (2) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void dflftfRow() throws SQLExdfption {
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        ((Row)gftCurrfntRow()).sftDflftfd();
        ++numDflftfd;

        // notify thf listfnfrs thbt thf row dhbngfd.
        notifyRowChbngfd();
    }

    /**
     * Sfts thf durrfnt row with its originbl vbluf bnd mbrks thf row bs
     * not updbtfd, thus undoing bny dhbngfs mbdf to thf row sindf thf
     * lbst dbll to thf mfthods <dodf>updbtfRow</dodf> or <dodf>dflftfRow</dodf>.
     * This mfthod should bf dbllfd only whfn thf dursor is on b row in
     * this rowsft.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row, bfforf thf
     *            first row, or bftfr thf lbst row
     */
    publid void rffrfshRow() throws SQLExdfption {
        // mbkf surf wf brf on b row
        dhfdkCursor();

        // don't wbnt this to hbppfn...
        if (onInsfrtRow == truf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbliddp").toString());
        }

        Row durrfntRow = (Row)gftCurrfntRow();
        // just undo bny dhbngfs mbdf to this row.
        durrfntRow.dlfbrUpdbtfd();

    }

    /**
     * Rolls bbdk bny updbtfs mbdf to thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bnd notififs listfnfrs thbt
     * b row hbs dhbngfd.  To hbvf bn ffffdt, this mfthod
     * must bf dbllfd bftfr bn <dodf>updbtfXXX</dodf> mfthod hbs bffn
     * dbllfd bnd bfforf thf mfthod <dodf>updbtfRow</dodf> hbs bffn dbllfd.
     * If no updbtfs hbvf bffn mbdf or thf mfthod <dodf>updbtfRow</dodf>
     * hbs blrfbdy bffn dbllfd, this mfthod hbs no ffffdt.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row, bfforf thf
     *            first row, or bftfr thf lbst row
     */
    publid void dbndflRowUpdbtfs() throws SQLExdfption {
        // mbkf surf wf brf on b row
        dhfdkCursor();

        // don't wbnt this to hbppfn...
        if (onInsfrtRow == truf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbliddp").toString());
        }

        Row durrfntRow = (Row)gftCurrfntRow();
        if (durrfntRow.gftUpdbtfd() == truf) {
            durrfntRow.dlfbrUpdbtfd();
            notifyRowChbngfd();
        }
    }

    /**
     * Movfs thf dursor for this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * to thf insfrt row.  Thf durrfnt row in thf rowsft is rfmfmbfrfd
     * whilf thf dursor is on thf insfrt row.
     * <P>
     * Thf insfrt row is b spfdibl row bssodibtfd with bn updbtbblf
     * rowsft.  It is fssfntiblly b bufffr whfrf b nfw row mby
     * bf donstrudtfd by dblling thf bppropribtf <dodf>updbtfXXX</dodf>
     * mfthods to bssign b vbluf to fbdh dolumn in thf row.  A domplftf
     * row must bf donstrudtfd; thbt is, fvfry dolumn thbt is not nullbblf
     * must bf bssignfd b vbluf.  In ordfr for thf nfw row to bfdomf pbrt
     * of this rowsft, thf mfthod <dodf>insfrtRow</dodf> must bf dbllfd
     * bfforf thf dursor is movfd bbdk to thf rowsft.
     * <P>
     * Only dfrtbin mfthods mby bf invokfd whilf thf dursor is on thf insfrt
     * row; mbny mfthods throw bn fxdfption if thfy brf dbllfd whilf thf
     * dursor is thfrf.  In bddition to thf <dodf>updbtfXXX</dodf>
     * bnd <dodf>insfrtRow</dodf> mfthods, only thf <dodf>gftXXX</dodf> mfthods
     * mby bf dbllfd whfn thf dursor is on thf insfrt row.  A <dodf>gftXXX</dodf>
     * mfthod should bf dbllfd on b dolumn only bftfr bn <dodf>updbtfXXX</dodf>
     * mfthod hbs bffn dbllfd on thbt dolumn; othfrwisf, thf vbluf rfturnfd is
     * undftfrminfd.
     *
     * @throws SQLExdfption if this <dodf>CbdhfdRowSftImpl</dodf> objfdt is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void movfToInsfrtRow() throws SQLExdfption {
        if (gftCondurrfndy() == RfsultSft.CONCUR_READ_ONLY) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.movftoins").toString());
        }
        if (insfrtRow == null) {
            if (RowSftMD == null)
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.movftoins1").toString());
            int numCols = RowSftMD.gftColumnCount();
            if (numCols > 0) {
                insfrtRow = nfw InsfrtRow(numCols);
            } flsf {
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.movftoins2").toString());
            }
        }
        onInsfrtRow = truf;
        // %%% sftCurrfntRow dbllfd in BbsfRow

        durrfntRow = dursorPos;
        dursorPos = -1;

        insfrtRow.initInsfrtRow();
    }

    /**
     * Movfs thf dursor for this <dodf>CbdhfdRowSftImpl</dodf> objfdt to
     * thf durrfnt row.  Thf durrfnt row is thf row thf dursor wbs on
     * whfn thf mfthod <dodf>movfToInsfrtRow</dodf> wbs dbllfd.
     * <P>
     * Cblling this mfthod hbs no ffffdt unlfss it is dbllfd whilf thf
     * dursor is on thf insfrt row.
     *
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void movfToCurrfntRow() throws SQLExdfption {
        if (onInsfrtRow == fblsf) {
            rfturn;
        } flsf {
            dursorPos = durrfntRow;
            onInsfrtRow = fblsf;
        }
    }

    /**
     * Rfturns <dodf>null</dodf>.
     *
     * @rfturn <dodf>null</dodf>
     * @throws SQLExdfption if bn frror oddurs
     */
    publid Stbtfmfnt gftStbtfmfnt() throws SQLExdfption {
        rfturn null;
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn <dodf>Objfdt</dodf> in
     * thf Jbvb progrbmming lbngubgf, using thf givfn
     * <dodf>jbvb.util.Mbp</dodf> objfdt to dustom mbp thf vbluf if
     * bppropribtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm mbp b <dodf>jbvb.util.Mbp</dodf> objfdt showing thf mbpping
     *            from SQL typf nbmfs to dlbssfs in thf Jbvb progrbmming
     *            lbngubgf
     * @rfturn bn <dodf>Objfdt</dodf> rfprfsfnting thf SQL vbluf
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds or
     *            thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row
     */
     publid Objfdt gftObjfdt(int dolumnIndfx,
                             jbvb.util.Mbp<String,Clbss<?>> mbp)
         throws SQLExdfption
     {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }
        if (vbluf instbndfof Strudt) {
            Strudt s = (Strudt)vbluf;

            // look up thf dlbss in thf mbp
            Clbss<?> d = mbp.gft(s.gftSQLTypfNbmf());
            if (d != null) {
                // drfbtf nfw instbndf of thf dlbss
                SQLDbtb obj = null;
                try {
                    obj = (SQLDbtb) RfflfdtUtil.nfwInstbndf(d);
                } dbtdh(Exdfption fx) {
                    throw nfw SQLExdfption("Unbblf to Instbntibtf: ", fx);
                }
                // gft thf bttributfs from thf strudt
                Objfdt bttribs[] = s.gftAttributfs(mbp);
                // drfbtf thf SQLInput "strfbm"
                SQLInputImpl sqlInput = nfw SQLInputImpl(bttribs, mbp);
                // rfbd thf vblufs...
                obj.rfbdSQL(sqlInput, s.gftSQLTypfNbmf());
                rfturn (Objfdt)obj;
            }
        }
        rfturn vbluf;
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Rff</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b <dodf>Rff</dodf> objfdt rfprfsfnting bn SQL<dodf> REF</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>REF</dodf> vbluf
     * @sff #gftRff(String)
     */
    publid Rff gftRff(int dolumnIndfx) throws SQLExdfption {
        Rff vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (RowSftMD.gftColumnTypf(dolumnIndfx) != jbvb.sql.Typfs.REF) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        sftLbstVblufNull(fblsf);
        vbluf = (Rff)(gftCurrfntRow().gftColumnObjfdt(dolumnIndfx));

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        rfturn vbluf;
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Blob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b <dodf>Blob</dodf> objfdt rfprfsfnting bn SQL <dodf>BLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>BLOB</dodf> vbluf
     * @sff #gftBlob(String)
     */
    publid Blob gftBlob(int dolumnIndfx) throws SQLExdfption {
        Blob vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (RowSftMD.gftColumnTypf(dolumnIndfx) != jbvb.sql.Typfs.BLOB) {
            Systfm.out.println(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.typf").toString(), RowSftMD.gftColumnTypf(dolumnIndfx)));
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        sftLbstVblufNull(fblsf);
        vbluf = (Blob)(gftCurrfntRow().gftColumnObjfdt(dolumnIndfx));

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        rfturn vbluf;
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Clob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b <dodf>Clob</dodf> objfdt rfprfsfnting bn SQL <dodf>CLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>CLOB</dodf> vbluf
     * @sff #gftClob(String)
     */
    publid Clob gftClob(int dolumnIndfx) throws SQLExdfption {
        Clob vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (RowSftMD.gftColumnTypf(dolumnIndfx) != jbvb.sql.Typfs.CLOB) {
            Systfm.out.println(MfssbgfFormbt.formbt(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.typf").toString(), RowSftMD.gftColumnTypf(dolumnIndfx)));
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        sftLbstVblufNull(fblsf);
        vbluf = (Clob)(gftCurrfntRow().gftColumnObjfdt(dolumnIndfx));

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        rfturn vbluf;
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn <dodf>Arrby</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn bn <dodf>Arrby</dodf> objfdt rfprfsfnting bn SQL
     *         <dodf>ARRAY</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>ARRAY</dodf> vbluf
     * @sff #gftArrby(String)
     */
    publid Arrby gftArrby(int dolumnIndfx) throws SQLExdfption {
        jbvb.sql.Arrby vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (RowSftMD.gftColumnTypf(dolumnIndfx) != jbvb.sql.Typfs.ARRAY) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        sftLbstVblufNull(fblsf);
        vbluf = (jbvb.sql.Arrby)(gftCurrfntRow().gftColumnObjfdt(dolumnIndfx));

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        rfturn vbluf;
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn <dodf>Objfdt</dodf> in
     * thf Jbvb progrbmming lbngubgf, using thf givfn
     * <dodf>jbvb.util.Mbp</dodf> objfdt to dustom mbp thf vbluf if
     * bppropribtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm mbp b <dodf>jbvb.util.Mbp</dodf> objfdt showing thf mbpping
     *        from SQL typf nbmfs to dlbssfs in thf Jbvb progrbmming
     *        lbngubgf
     * @rfturn bn <dodf>Objfdt</dodf> rfprfsfnting thf SQL vbluf
     * @throws SQLExdfption if thf givfn dolumn nbmf is not thf nbmf of
     *         b dolumn in this rowsft or thf dursor is not on onf of
     *         this rowsft's rows or its insfrt row
     */
    publid Objfdt gftObjfdt(String dolumnNbmf,
                            jbvb.util.Mbp<String,Clbss<?>> mbp)
    throws SQLExdfption {
        rfturn gftObjfdt(gftColIdxByNbmf(dolumnNbmf), mbp);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Rff</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>Rff</dodf> objfdt rfprfsfnting bn SQL<dodf> REF</dodf> vbluf
     * @throws SQLExdfption  if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dolumn vbluf
     *            is not bn SQL <dodf>REF</dodf> vbluf
     * @sff #gftRff(int)
     */
    publid Rff gftRff(String dolNbmf) throws SQLExdfption {
        rfturn gftRff(gftColIdxByNbmf(dolNbmf));
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Blob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>Blob</dodf> objfdt rfprfsfnting bn SQL <dodf>BLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>BLOB</dodf> vbluf
     * @sff #gftBlob(int)
     */
    publid Blob gftBlob(String dolNbmf) throws SQLExdfption {
        rfturn gftBlob(gftColIdxByNbmf(dolNbmf));
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Clob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>Clob</dodf> objfdt rfprfsfnting bn SQL
     *         <dodf>CLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>CLOB</dodf> vbluf
     * @sff #gftClob(int)
     */
    publid Clob gftClob(String dolNbmf) throws SQLExdfption {
        rfturn gftClob(gftColIdxByNbmf(dolNbmf));
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn <dodf>Arrby</dodf> objfdt
     * in thf Jbvb progrbmming lbngugbgf.
     *
     * @pbrbm dolNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn bn <dodf>Arrby</dodf> objfdt rfprfsfnting bn SQL
     *         <dodf>ARRAY</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>ARRAY</dodf> vbluf
     * @sff #gftArrby(int)
     */
    publid Arrby gftArrby(String dolNbmf) throws SQLExdfption {
        rfturn gftArrby(gftColIdxByNbmf(dolNbmf));
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Dbtf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Dbtf gftDbtf(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        vbluf = donvfrtTfmporbl(vbluf,
        RowSftMD.gftColumnTypf(dolumnIndfx),
        jbvb.sql.Typfs.DATE);

        // drfbtf b dffbult dblfndbr
        Cblfndbr dffbultCbl = Cblfndbr.gftInstbndf();
        // sft this Cblfndbr to thf timf wf hbvf
        dffbultCbl.sftTimf((jbvb.util.Dbtf)vbluf);

        /*
         * Now wf dbn pull thf pifdfs of thf dbtf out
         * of thf dffbult dblfndbr bnd put thfm into
         * thf usfr providfd dblfndbr
         */
        dbl.sft(Cblfndbr.YEAR, dffbultCbl.gft(Cblfndbr.YEAR));
        dbl.sft(Cblfndbr.MONTH, dffbultCbl.gft(Cblfndbr.MONTH));
        dbl.sft(Cblfndbr.DAY_OF_MONTH, dffbultCbl.gft(Cblfndbr.DAY_OF_MONTH));

        /*
         * This looks b littlf odd but it is dorrfdt -
         * Cblfndbr.gftTimf() rfturns b Dbtf...
         */
        rfturn nfw jbvb.sql.Dbtf(dbl.gftTimf().gftTimf());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Dbtf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Dbtf gftDbtf(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        rfturn gftDbtf(gftColIdxByNbmf(dolumnNbmf), dbl);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Timf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timf gftTimf(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        vbluf = donvfrtTfmporbl(vbluf,
        RowSftMD.gftColumnTypf(dolumnIndfx),
        jbvb.sql.Typfs.TIME);

        // drfbtf b dffbult dblfndbr
        Cblfndbr dffbultCbl = Cblfndbr.gftInstbndf();
        // sft thf timf in thf dffbult dblfndbr
        dffbultCbl.sftTimf((jbvb.util.Dbtf)vbluf);

        /*
         * Now wf dbn pull thf pifdfs of thf dbtf out
         * of thf dffbult dblfndbr bnd put thfm into
         * thf usfr providfd dblfndbr
         */
        dbl.sft(Cblfndbr.HOUR_OF_DAY, dffbultCbl.gft(Cblfndbr.HOUR_OF_DAY));
        dbl.sft(Cblfndbr.MINUTE, dffbultCbl.gft(Cblfndbr.MINUTE));
        dbl.sft(Cblfndbr.SECOND, dffbultCbl.gft(Cblfndbr.SECOND));

        rfturn nfw jbvb.sql.Timf(dbl.gftTimf().gftTimf());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Timf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timf gftTimf(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        rfturn gftTimf(gftColIdxByNbmf(dolumnNbmf), dbl);
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Timfstbmp</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        Objfdt vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        sftLbstVblufNull(fblsf);
        vbluf = gftCurrfntRow().gftColumnObjfdt(dolumnIndfx);

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        vbluf = donvfrtTfmporbl(vbluf,
        RowSftMD.gftColumnTypf(dolumnIndfx),
        jbvb.sql.Typfs.TIMESTAMP);

        // drfbtf b dffbult dblfndbr
        Cblfndbr dffbultCbl = Cblfndbr.gftInstbndf();
        // sft thf timf in thf dffbult dblfndbr
        dffbultCbl.sftTimf((jbvb.util.Dbtf)vbluf);

        /*
         * Now wf dbn pull thf pifdfs of thf dbtf out
         * of thf dffbult dblfndbr bnd put thfm into
         * thf usfr providfd dblfndbr
         */
        dbl.sft(Cblfndbr.YEAR, dffbultCbl.gft(Cblfndbr.YEAR));
        dbl.sft(Cblfndbr.MONTH, dffbultCbl.gft(Cblfndbr.MONTH));
        dbl.sft(Cblfndbr.DAY_OF_MONTH, dffbultCbl.gft(Cblfndbr.DAY_OF_MONTH));
        dbl.sft(Cblfndbr.HOUR_OF_DAY, dffbultCbl.gft(Cblfndbr.HOUR_OF_DAY));
        dbl.sft(Cblfndbr.MINUTE, dffbultCbl.gft(Cblfndbr.MINUTE));
        dbl.sft(Cblfndbr.SECOND, dffbultCbl.gft(Cblfndbr.SECOND));

        rfturn nfw jbvb.sql.Timfstbmp(dbl.gftTimf().gftTimf());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timfstbmp</dodf> objfdt, using thf givfn
     * <dodf>Cblfndbr</dodf> objfdt to donstrudt bn bppropribtf
     * millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf>,
     *            <dodf>TIME</dodf>, or <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        rfturn gftTimfstbmp(gftColIdxByNbmf(dolumnNbmf), dbl);
    }

    /*
     * RowSftIntfrnbl Intfrfbdf
     */

    /**
     * Rftrifvfs thf <dodf>Connfdtion</dodf> objfdt pbssfd to this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.  This donnfdtion mby bf
     * usfd to populbtf this rowsft with dbtb or to writf dbtb bbdk
     * to its undfrlying dbtb sourdf.
     *
     * @rfturn thf <dodf>Connfdtion</dodf> objfdt pbssfd to this rowsft;
     *         mby bf <dodf>null</dodf> if thfrf is no donnfdtion
     * @throws SQLExdfption if bn frror oddurs
     */
    publid Connfdtion gftConnfdtion() throws SQLExdfption{
        rfturn donn;
    }

    /**
     * Sfts thf mftbdbtb for this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * with thf givfn <dodf>RowSftMftbDbtb</dodf> objfdt.
     *
     * @pbrbm md b <dodf>RowSftMftbDbtb</dodf> objfdt instbndf dontbining
     *            mftbdbtb bbout thf dolumsn in thf rowsft
     * @throws SQLExdfption if invblid mftb dbtb is supplifd to thf
     *            rowsft
     */
    publid void sftMftbDbtb(RowSftMftbDbtb md) throws SQLExdfption {
        RowSftMD =(RowSftMftbDbtbImpl) md;
    }

    /**
     * Rfturns b rfsult sft dontbining thf originbl vbluf of thf rowsft. Thf
     * originbl vbluf is thf stbtf of thf <dodf>CbdhfdRowSftImpl</dodf> bftfr thf
     * lbst populbtion or syndhronizbtion (whidhfvfr oddurrfd most rfdfntly) with
     * thf dbtb sourdf.
     * <p>
     * Thf dursor is positionfd bfforf thf first row in thf rfsult sft.
     * Only rows dontbinfd in thf rfsult sft rfturnfd by <dodf>gftOriginbl()</dodf>
     * brf sbid to hbvf bn originbl vbluf.
     *
     * @rfturn thf originbl rfsult sft of thf rowsft
     * @throws SQLExdfption if bn frror oddurs produdf thf
     *           <dodf>RfsultSft</dodf> objfdt
     */
    publid RfsultSft gftOriginbl() throws SQLExdfption {
        CbdhfdRowSftImpl drs = nfw CbdhfdRowSftImpl();
        drs.RowSftMD = RowSftMD;
        drs.numRows = numRows;
        drs.dursorPos = 0;

        // mbkf surf wf don't gft somfonf plbying with thfsf
        // %%% is this now nfdfssbry ???
        //drs.sftRfbdfr(null);
        //drs.sftWritfr(null);
        int dolCount = RowSftMD.gftColumnCount();
        Row orig;

        for (Itfrbtor<?> i = rvh.itfrbtor(); i.hbsNfxt();) {
            orig = nfw Row(dolCount, ((Row)i.nfxt()).gftOrigRow());
            drs.rvh.bdd(orig);
        }
        rfturn (RfsultSft)drs;
    }

    /**
     * Rfturns b rfsult sft dontbining thf originbl vbluf of thf durrfnt
     * row only.
     * Thf originbl vbluf is thf stbtf of thf <dodf>CbdhfdRowSftImpl</dodf> bftfr
     * thf lbst populbtion or syndhronizbtion (whidhfvfr oddurrfd most rfdfntly)
     * with thf dbtb sourdf.
     *
     * @rfturn thf originbl rfsult sft of thf row
     * @throws SQLExdfption if thfrf is no durrfnt row
     * @sff #sftOriginblRow
     */
    publid RfsultSft gftOriginblRow() throws SQLExdfption {
        CbdhfdRowSftImpl drs = nfw CbdhfdRowSftImpl();
        drs.RowSftMD = RowSftMD;
        drs.numRows = 1;
        drs.dursorPos = 0;
        drs.sftTypfMbp(this.gftTypfMbp());

        // mbkf surf wf don't gft somfonf plbying with thfsf
        // %%% is this now nfdfssbry ???
        //drs.sftRfbdfr(null);
        //drs.sftWritfr(null);

        Row orig = nfw Row(RowSftMD.gftColumnCount(),
        gftCurrfntRow().gftOrigRow());

        drs.rvh.bdd(orig);

        rfturn (RfsultSft)drs;

    }

    /**
     * Mbrks thf durrfnt row in this rowsft bs bfing bn originbl row.
     *
     * @throws SQLExdfption if thfrf is no durrfnt row
     * @sff #gftOriginblRow
     */
    publid void sftOriginblRow() throws SQLExdfption {
        if (onInsfrtRow == truf) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invblidop").toString());
        }

        Row row = (Row)gftCurrfntRow();
        mbkfRowOriginbl(row);

        // this dbn hbppfn if dflftfd rows brf bfing shown
        if (row.gftDflftfd() == truf) {
            rfmovfCurrfntRow();
        }
    }

    /**
     * Mbkfs thf givfn row of this rowsft thf originbl row by dlfbring bny
     * sfttings thbt mbrk thf row bs hbving bffn insfrtfd, dflftfd, or updbtfd.
     * This mfthod is dbllfd intfrnblly by thf mfthods
     * <dodf>sftOriginblRow</dodf>
     * bnd <dodf>sftOriginbl</dodf>.
     *
     * @pbrbm row thf row to bf mbdf thf originbl row
     */
    privbtf void mbkfRowOriginbl(Row row) {
        if (row.gftInsfrtfd() == truf) {
            row.dlfbrInsfrtfd();
        }

        if (row.gftUpdbtfd() == truf) {
            row.movfCurrfntToOrig();
        }
    }

    /**
     * Mbrks bll rows in this rowsft bs bfing originbl rows. Any updbtfs
     * mbdf to thf rows bfdomf thf originbl vblufs for thf rowsft.
     * Cblls to thf mfthod <dodf>sftOriginbl</dodf> donnot bf rfvfrsfd.
     *
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void sftOriginbl() throws SQLExdfption {
        for (Itfrbtor<?> i = rvh.itfrbtor(); i.hbsNfxt();) {
            Row row = (Row)i.nfxt();
            mbkfRowOriginbl(row);
            // rfmovf dflftfd rows from thf dollfdtion.
            if (row.gftDflftfd() == truf) {
                i.rfmovf();
                --numRows;
            }
        }
        numDflftfd = 0;

        // notify bny listfnfrs thbt thf rowsft hbs dhbngfd
        notifyRowSftChbngfd();
    }

    /**
     * Rfturns bn idfntififr for thf objfdt (tbblf) thbt wbs usfd to drfbtf this
     * rowsft.
     *
     * @rfturn b <dodf>String</dodf> objfdt thbt idfntififs thf tbblf from
     *         whidh this <dodf>CbdhfdRowSftImpl</dodf> objfdt wbs dfrivfd
     * @throws SQLExdfption if bn frror oddurs
     */
    publid String gftTbblfNbmf() throws SQLExdfption {
        rfturn tbblfNbmf;
    }

    /**
     * Sfts thf idfntififr for thf tbblf from whidh this rowsft wbs dfrivfd
     * to thf givfn tbblf nbmf.
     *
     * @pbrbm tbbNbmf b <dodf>String</dodf> objfdt thbt idfntififs thf
     *          tbblf from whidh this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     *          wbs dfrivfd
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void sftTbblfNbmf(String tbbNbmf) throws SQLExdfption {
        if (tbbNbmf == null)
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.tbblfnbmf").toString());
        flsf
            tbblfNbmf = tbbNbmf;
    }

    /**
     * Rfturns thf dolumns thbt mbkf b kfy to uniqufly idfntify b
     * row in this <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * @rfturn bn brrby of dolumn numbfrs thbt donstitutfs b primbry
     *           kfy for this rowsft. This brrby should bf fmpty
     *           if no dolumn is rfprfsfntitivf of b primbry kfy
     * @throws SQLExdfption if thf rowsft is fmpty or no dolumns
     *           brf dfsignbtfd bs primbry kfys
     * @sff #sftKfyColumns
     */
    publid int[] gftKfyColumns() throws SQLExdfption {
        int[]kfyColumns  = this.kfyCols;
        rfturn (kfyColumns == null) ? null : Arrbys.dopyOf(kfyColumns, kfyColumns.lfngth);
    }


    /**
     * Sfts this <dodf>CbdhfdRowSftImpl</dodf> objfdt's
     * <dodf>kfyCols</dodf> fifld with thf givfn brrby of dolumn
     * numbfrs, whidh forms b kfy for uniqufly idfntifying b row
     * in this rowsft.
     *
     * @pbrbm kfys bn brrby of <dodf>int</dodf> indidbting thf
     *        dolumns thbt form b primbry kfy for this
     *        <dodf>CbdhfdRowSftImpl</dodf> objfdt; fvfry
     *        flfmfnt in thf brrby must bf grfbtfr thbn
     *        <dodf>0</dodf> bnd lfss thbn or fqubl to thf numbfr
     *        of dolumns in this rowsft
     * @throws SQLExdfption if bny of thf numbfrs in thf
     *            givfn brrby is not vblid for this rowsft
     * @sff #gftKfyColumns
     */
    publid void sftKfyColumns(int [] kfys) throws SQLExdfption {
        int numCols = 0;
        if (RowSftMD != null) {
            numCols = RowSftMD.gftColumnCount();
            if (kfys.lfngth > numCols)
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.kfydols").toString());
        }
        kfyCols = nfw int[kfys.lfngth];
        for (int i = 0; i < kfys.lfngth; i++) {
            if (RowSftMD != null && (kfys[i] <= 0 ||
            kfys[i] > numCols)) {
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invbliddol").toString() +
                kfys[i]);
            }
            kfyCols[i] = kfys[i];
        }
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Rff</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm rff thf nfw dolumn <dodf>jbvb.sql.Rff</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *        (2) thf dursor is not on onf of this rowsft's rows or its
     *        insfrt row, or (3) this rowsft is
     *        <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRff(int dolumnIndfx, jbvb.sql.Rff rff) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        // SfriblClob will hflp in gftting thf bytf brrby bnd storing it.
        // Wf nffd to bf dhfdking DbtbbbsfMftbDbtb.lodbtorsUpdbtorCopy()
        // or through RowSftMftbDbtb.lodbtorsUpdbtorCopy()
        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, nfw SfriblRff(rff));
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm rff thf nfw dolumn <dodf>jbvb.sql.Rff</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *        nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *        onf of this rowsft's rows or its insfrt row, or (3) this
     *        rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRff(String dolumnNbmf, jbvb.sql.Rff rff) throws SQLExdfption {
        updbtfRff(gftColIdxByNbmf(dolumnNbmf), rff);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm d thf nfw dolumn <dodf>Clob</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *        (2) thf dursor is not on onf of this rowsft's rows or its
     *        insfrt row, or (3) this rowsft is
     *        <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfClob(int dolumnIndfx, Clob d) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        // SfriblClob will hflp in gftting thf bytf brrby bnd storing it.
        // Wf nffd to bf dhfdking DbtbbbsfMftbDbtb.lodbtorsUpdbtorCopy()
        // or through RowSftMftbDbtb.lodbtorsUpdbtorCopy()

        if(dbmslodbtorsUpdbtfCopy){
           gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, nfw SfriblClob(d));
        }
        flsf{
           throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotsupp").toString());
        }
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm d thf nfw dolumn <dodf>Clob</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfClob(String dolumnNbmf, Clob d) throws SQLExdfption {
        updbtfClob(gftColIdxByNbmf(dolumnNbmf), d);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Blob</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm b thf nfw dolumn <dodf>Blob</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBlob(int dolumnIndfx, Blob b) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        // SfriblBlob will hflp in gftting thf bytf brrby bnd storing it.
        // Wf nffd to bf dhfdking DbtbbbsfMftbDbtb.lodbtorsUpdbtorCopy()
        // or through RowSftMftbDbtb.lodbtorsUpdbtorCopy()

        if(dbmslodbtorsUpdbtfCopy){
           gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, nfw SfriblBlob(b));
        }
        flsf{
           throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotsupp").toString());
        }
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Blob </dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm b thf nfw dolumn <dodf>Blob</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBlob(String dolumnNbmf, Blob b) throws SQLExdfption {
        updbtfBlob(gftColIdxByNbmf(dolumnNbmf), b);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Arrby</dodf> vblufs.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm b thf nfw dolumn <dodf>Arrby</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfArrby(int dolumnIndfx, Arrby b) throws SQLExdfption {
        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        // SfriblArrby will hflp in gftting thf bytf brrby bnd storing it.
        // Wf nffd to bf dhfdking DbtbbbsfMftbDbtb.lodbtorsUpdbtorCopy()
        // or through RowSftMftbDbtb.lodbtorsUpdbtorCopy()
        gftCurrfntRow().sftColumnObjfdt(dolumnIndfx, nfw SfriblArrby(b));
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Arrby</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm b thf nfw dolumn <dodf>Arrby</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfArrby(String dolumnNbmf, Arrby b) throws SQLExdfption {
        updbtfArrby(gftColIdxByNbmf(dolumnNbmf), b);
    }


    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.nft.URL</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @rfturn b jbvb.nft.URL objfdt dontbining thf rfsourdf rfffrfndf dfsdribfd by
     * thf URL
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>DATALINK</dodf> vbluf.
     * @sff #gftURL(String)
     */
    publid jbvb.nft.URL gftURL(int dolumnIndfx) throws SQLExdfption {
        //throw nfw SQLExdfption("Opfrbtion not supportfd");

        jbvb.nft.URL vbluf;

        // sbnity dhfdk.
        dhfdkIndfx(dolumnIndfx);
        // mbkf surf thf dursor is on b vblid row
        dhfdkCursor();

        if (RowSftMD.gftColumnTypf(dolumnIndfx) != jbvb.sql.Typfs.DATALINK) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.dtypfmismt").toString());
        }

        sftLbstVblufNull(fblsf);
        vbluf = (jbvb.nft.URL)(gftCurrfntRow().gftColumnObjfdt(dolumnIndfx));

        // dhfdk for SQL NULL
        if (vbluf == null) {
            sftLbstVblufNull(truf);
            rfturn null;
        }

        rfturn vbluf;
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.nft.URL</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @rfturn b jbvb.nft.URL objfdt dontbining thf rfsourdf rfffrfndf dfsdribfd by
     * thf URL
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf not thf nbmf of b dolumn
     * in this rowsft, or
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>DATALINK</dodf> vbluf.
     * @sff #gftURL(int)
     */
    publid jbvb.nft.URL gftURL(String dolumnNbmf) throws SQLExdfption {
        rfturn gftURL(gftColIdxByNbmf(dolumnNbmf));

    }

    /**
     * Thf first wbrning rfportfd by dblls on this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt is rfturnfd. Subsfqufnt <dodf>CbdhfdRowSftImpl</dodf> wbrnings will
     * bf dhbinfd to this <dodf>SQLWbrning</dodf>. All <dodf>RowSftWbrnings</dodf>
     * wbrnings brf gfnfrbtfd in thf disdonnfdtfd fnvironmfnt bnd rfmbin b
     * sfpfrbtf wbrning dhbin to thbt providfd by thf <dodf>gftWbrnings</dodf>
     * mfthod.
     *
     * <P>Thf wbrning dhbin is butombtidblly dlfbrfd fbdh timf b nfw
     * row is rfbd.
     *
     * <P><B>Notf:</B> This wbrning dhbin only dovfrs wbrnings dbusfd
     * by <dodf>CbdhfdRowSft</dodf> (bnd thfir dhild intfrfbdf)
     * mfthods. All <dodf>SQLWbrnings</dodf> dbn bf obtbinfd using thf
     * <dodf>gftWbrnings</dodf> mfthod whidh trbdks wbrnings gfnfrbtfd
     * by thf undfrlying JDBC drivfr.
     * @rfturn thf first SQLWbrning or null
     *
     */
    publid RowSftWbrning gftRowSftWbrnings() {
        try {
            notifyCursorMovfd();
        } dbtdh (SQLExdfption f) {} // mbsk fxdfption
        rfturn rowsftWbrning;
    }


    /**
     * Thf fundtion trifs to isolbtf thf tbblfnbmf whfn only sftCommbnd
     * is sft bnd not sftTbblfnbmf is dbllfd providfd thfrf is only onf tbblf
     * nbmf in thf qufry flsf just lfbvfs thf sftting of tbblf nbmf bs sudh.
     * If sftTbblfnbmf is sft lbtfr it will ovfr ridf this tbblf nbmf
     * vbluf so rftrifvfd.
     *
     * @rfturn thf tbblfnbmf if only onf tbblf in qufry flsf rfturn ""
     */
    privbtf String buildTbblfNbmf(String dommbnd) throws SQLExdfption {

        // If wf hbvf b qufry from onf tbblf,
        // wf sft thf tbblf nbmf impliditly
        // flsf usfr hbs to fxpliditly sft thf tbblf nbmf.

        int indfxFrom, indfxCommb;
        String strTbblfnbmf ="";
        dommbnd = dommbnd.trim();

        // Qufry dbn bf b sflfdt, insfrt or  updbtf

        if(dommbnd.toLowfrCbsf().stbrtsWith("sflfdt")) {
            // look for "from" kfyword, bftfr thbt look for b
            // dommb bftfr from. If dommb is thfrf don't sft
            // tbblf nbmf flsf isolbtf tbblf nbmf.

            indfxFrom = dommbnd.toLowfrCbsf().indfxOf("from");
            indfxCommb = dommbnd.indfxOf(',', indfxFrom);

            if(indfxCommb == -1) {
                // implifs only onf tbblf
                strTbblfnbmf = (dommbnd.substring(indfxFrom+"from".lfngth(),dommbnd.lfngth())).trim();

                String tbbNbmf = strTbblfnbmf;

                int idxWhfrf = tbbNbmf.toLowfrCbsf().indfxOf("whfrf");

                /**
                  * Adding thf bddtionbl dhfdk for donditions following thf tbblf nbmf.
                  * If b dondition is found trundbtf it.
                  **/

                if(idxWhfrf != -1)
                {
                   tbbNbmf = tbbNbmf.substring(0,idxWhfrf).trim();
                }

                strTbblfnbmf = tbbNbmf;

            } flsf {
                //strTbblfnbmf="";
            }

        } flsf if(dommbnd.toLowfrCbsf().stbrtsWith("insfrt")) {
            //strTbblfnbmf="";
        } flsf if(dommbnd.toLowfrCbsf().stbrtsWith("updbtf")) {
            //strTbblfnbmf="";
        }
        rfturn strTbblfnbmf;
    }

    /**
     * Commits bll dhbngfs pfrformfd by thf <dodf>bddfptChbngfs()</dodf>
     * mfthods
     *
     * @sff jbvb.sql.Connfdtion#dommit
     */
    publid void dommit() throws SQLExdfption {
        donn.dommit();
    }

    /**
     * Rolls bbdk bll dhbngfs pfrformfd by thf <dodf>bddfptChbngfs()</dodf>
     * mfthods
     *
     * @sff jbvb.sql.Connfdtion#rollbbdk
     */
    publid void rollbbdk() throws SQLExdfption {
        donn.rollbbdk();
    }

    /**
     * Rolls bbdk bll dhbngfs pfrformfd by thf <dodf>bddfptChbngfs()</dodf>
     * to thf lbst <dodf>Sbvfpoint</dodf> trbnsbdtion mbrkfr.
     *
     * @sff jbvb.sql.Connfdtion#rollbbdk(Sbvfpoint)
     */
    publid void rollbbdk(Sbvfpoint s) throws SQLExdfption {
        donn.rollbbdk(s);
    }

    /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn int brrby.
     * This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnIdxfs thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnIdx is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(int [])</dodf>
     */
    publid void unsftMbtdhColumn(int[] dolumnIdxfs) throws SQLExdfption {

         int i_vbl;
         for( int j= 0 ;j < dolumnIdxfs.lfngth; j++) {
            i_vbl = (Intfgfr.pbrsfInt(iMbtdhColumns.gft(j).toString()));
            if(dolumnIdxfs[j] != i_vbl) {
               throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.mbtdhdols").toString());
            }
         }

         for( int i = 0;i < dolumnIdxfs.lfngth ;i++) {
            iMbtdhColumns.sft(i, -1);
         }
    }

   /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn String brrby.
     * This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnIdxfs thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnNbmf is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(String [])</dodf>
     */
    publid void unsftMbtdhColumn(String[] dolumnIdxfs) throws SQLExdfption {

        for(int j = 0 ;j < dolumnIdxfs.lfngth; j++) {
           if( !dolumnIdxfs[j].fqubls(strMbtdhColumns.gft(j)) ){
              throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.mbtdhdols").toString());
           }
        }

        for(int i = 0 ; i < dolumnIdxfs.lfngth; i++) {
           strMbtdhColumns.sft(i,null);
        }
    }

    /**
     * Rftrifvfs thf dolumn nbmf bs <dodf>String</dodf> brrby
     * thbt wbs sft using <dodf>sftMbtdhColumn(String [])</dodf>
     * for this rowsft.
     *
     * @rfturn b <dodf>String</dodf> brrby objfdt thbt dontbins thf dolumn nbmfs
     *         for thf rowsft whidh hbs this thf mbtdh dolumns
     *
     * @throws SQLExdfption if bn frror oddurs or dolumn nbmf is not sft
     */
    publid String[] gftMbtdhColumnNbmfs() throws SQLExdfption {

        String []str_tfmp = nfw String[strMbtdhColumns.sizf()];

        if( strMbtdhColumns.gft(0) == null) {
           throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.sftmbtdhdols").toString());
        }

        strMbtdhColumns.dopyInto(str_tfmp);
        rfturn str_tfmp;
    }

    /**
     * Rftrifvfs thf dolumn id bs <dodf>int</dodf> brrby thbt wbs sft using
     * <dodf>sftMbtdhColumn(int [])</dodf> for this rowsft.
     *
     * @rfturn b <dodf>int</dodf> brrby objfdt thbt dontbins thf dolumn ids
     *         for thf rowsft whidh hbs this bs thf mbtdh dolumns.
     *
     * @throws SQLExdfption if bn frror oddurs or dolumn indfx is not sft
     */
    publid int[] gftMbtdhColumnIndfxfs() throws SQLExdfption {

        Intfgfr []int_tfmp = nfw Intfgfr[iMbtdhColumns.sizf()];
        int [] i_tfmp = nfw int[iMbtdhColumns.sizf()];
        int i_vbl;

        i_vbl = iMbtdhColumns.gft(0);

        if( i_vbl == -1 ) {
           throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.sftmbtdhdols").toString());
        }


        iMbtdhColumns.dopyInto(int_tfmp);

        for(int i = 0; i < int_tfmp.lfngth; i++) {
           i_tfmp[i] = (int_tfmp[i]).intVbluf();
        }

        rfturn i_tfmp;
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn int brrby.
     * This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumnIndfxfs</dodf> is dbllfd.
     *
     * @pbrbm dolumnIdxfs thf indfxfs into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs; thf
     *        first pbrbmftfr is 0, thf sfdond is 1, bnd so on; must bf
     *        <dodf>0</dodf> or grfbtfr
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(int[] dolumnIdxfs) throws SQLExdfption {

        for(int j = 0 ; j < dolumnIdxfs.lfngth; j++) {
           if( dolumnIdxfs[j] < 0 ) {
              throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.mbtdhdols1").toString());
           }
        }
        for(int i = 0 ;i < dolumnIdxfs.lfngth; i++) {
           iMbtdhColumns.bdd(i,dolumnIdxfs[i]);
        }
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn String brrby.
     *  This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumn</dodf> is dbllfd.
     *
     * @pbrbm dolumnNbmfs thf nbmf of thf dolumn into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(String[] dolumnNbmfs) throws SQLExdfption {

        for(int j = 0; j < dolumnNbmfs.lfngth; j++) {
           if( dolumnNbmfs[j] == null || dolumnNbmfs[j].fqubls("")) {
              throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.mbtdhdols2").toString());
           }
        }
        for( int i = 0; i < dolumnNbmfs.lfngth; i++) {
           strMbtdhColumns.bdd(i,dolumnNbmfs[i]);
        }
    }


    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>int</dodf>
     * objfdt.  This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumn</dodf> is dbllfd.
     *
     * @pbrbm dolumnIdx thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs; thf
     *        first pbrbmftfr is 0, thf sfdond is 1, bnd so on; must bf
     *        <dodf>0</dodf> or grfbtfr
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(int dolumnIdx) throws SQLExdfption {
        // vblidbtf, if dol is ok to bf sft
        if(dolumnIdx < 0) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.mbtdhdols1").toString());
        } flsf {
            // sft iMbtdhColumn
            iMbtdhColumns.sft(0, dolumnIdx);
            //strMbtdhColumn = null;
        }
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf>
     * objfdt.  This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumn</dodf> is dbllfd.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(String dolumnNbmf) throws SQLExdfption {
        // vblidbtf, if dol is ok to bf sft
        if(dolumnNbmf == null || (dolumnNbmf= dolumnNbmf.trim()).fqubls("") ) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.mbtdhdols2").toString());
        } flsf {
            // sft strMbtdhColumn
            strMbtdhColumns.sft(0, dolumnNbmf);
            //iMbtdhColumn = -1;
        }
    }

    /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>int</dodf>
     * objfdt.  This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnIdx thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnIdx is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(int)</dodf>
     */
    publid void unsftMbtdhColumn(int dolumnIdx) throws SQLExdfption {
        // dhfdk if wf brf unsftting thf SAME dolumn
        if(! iMbtdhColumns.gft(0).fqubls(Intfgfr.vblufOf(dolumnIdx) )  ) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.unsftmbtdh").toString());
        } flsf if(strMbtdhColumns.gft(0) != null) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.unsftmbtdh1").toString());
        } flsf {
                // thbt is, wf brf unsftting it.
               iMbtdhColumns.sft(0, -1);
        }
    }

    /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf>
     * objfdt.  This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnNbmf thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnNbmf is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(String)</dodf>
     */
    publid void unsftMbtdhColumn(String dolumnNbmf) throws SQLExdfption {
        // dhfdk if wf brf unsftting thf sbmf dolumn
        dolumnNbmf = dolumnNbmf.trim();

        if(!((strMbtdhColumns.gft(0)).fqubls(dolumnNbmf))) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.unsftmbtdh").toString());
        } flsf if(iMbtdhColumns.gft(0) > 0) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.unsftmbtdh2").toString());
        } flsf {
            strMbtdhColumns.sft(0, null);   // thbt is, wf brf unsftting it.
        }
    }

    /**
     * Notififs rfgistfrfd listfnfrs thbt b RowSft objfdt in thf givfn RowSftEvfnt
     * objfdt hbs populbtfd b numbfr of bdditionbl rows. Thf <dodf>numRows</dodf> pbrbmftfr
     * fnsurfs thbt this fvfnt will only bf firfd fvfry <dodf>numRow</dodf>.
     * <p>
     * Thf sourdf of thf fvfnt dbn bf rftrifvfd with thf mfthod fvfnt.gftSourdf.
     *
     * @pbrbm fvfnt b <dodf>RowSftEvfnt</dodf> objfdt thbt dontbins thf
     *     <dodf>RowSft</dodf> objfdt thbt is thf sourdf of thf fvfnts
     * @pbrbm numRows whfn populbting, thf numbfr of rows intfrvbl on whidh thf
     *     <dodf>CbdhfdRowSft</dodf> populbtfd should firf; thf dffbult vbluf
     *     is zfro; dbnnot bf lfss thbn <dodf>fftdhSizf</dodf> or zfro
     */
    publid void rowSftPopulbtfd(RowSftEvfnt fvfnt, int numRows) throws SQLExdfption {

        if( numRows < 0 || numRows < gftFftdhSizf()) {
           throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.numrows").toString());
        }

        if(sizf() % numRows == 0) {
            RowSftEvfnt fvfnt_tfmp = nfw RowSftEvfnt(this);
            fvfnt = fvfnt_tfmp;
            notifyRowSftChbngfd();
        }
    }

    /**
     * Populbtfs this <dodf>CbdhfdRowSft</dodf> objfdt with dbtb from
     * thf givfn <dodf>RfsultSft</dodf> objfdt. Whilf rflbtfd to thf <dodf>populbtf(RfsultSft)</dodf>
     * mfthod, bn bdditionbl pbrbmftfr is providfd to bllow stbrting position within
     * thf <dodf>RfsultSft</dodf> from whfrf to populbtf thf CbdhfdRowSft
     * instbndf.
     *
     * This mfthod is bn bltfrnbtivf to thf mfthod <dodf>fxfdutf</dodf>
     * for filling thf rowsft with dbtb.  Thf mfthod <dodf>populbtf</dodf>
     * dofs not rfquirf thbt thf propfrtifs nffdfd by thf mfthod
     * <dodf>fxfdutf</dodf>, sudh bs thf <dodf>dommbnd</dodf> propfrty,
     * bf sft. This is truf bfdbusf thf mfthod <dodf>populbtf</dodf>
     * is givfn thf <dodf>RfsultSft</dodf> objfdt from
     * whidh to gft dbtb bnd thus dofs not nffd to usf thf propfrtifs
     * rfquirfd for sftting up b donnfdtion bnd fxfduting this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt's dommbnd.
     * <P>
     * Aftfr populbting this rowsft with dbtb, thf mfthod
     * <dodf>populbtf</dodf> sfts thf rowsft's mftbdbtb bnd
     * thfn sfnds b <dodf>RowSftChbngfdEvfnt</dodf> objfdt
     * to bll rfgistfrfd listfnfrs prior to rfturning.
     *
     * @pbrbm dbtb thf <dodf>RfsultSft</dodf> objfdt dontbining thf dbtb
     *             to bf rfbd into this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @pbrbm stbrt thf intfgfr spfdifing thf position in thf
     *        <dodf>RfsultSft</dodf> objfdt to popultbtf thf
     *        <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     * @throws SQLExdfption if bn frror oddurs; or thf mbx row sftting is
     *          violbtfd whilf populbting thf RowSft.Also id thf stbrt position
     *          is nfgbtivf.
     * @sff #fxfdutf
     */
     publid void populbtf(RfsultSft dbtb, int stbrt) throws SQLExdfption{

        int rowsFftdhfd;
        Row durrfntRow;
        int numCols;
        int i;
        Mbp<String, Clbss<?>> mbp = gftTypfMbp();
        Objfdt obj;
        int mRows;

        dursorPos = 0;
        if(populbtfdblldount == 0){
            if(stbrt < 0){
               throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.stbrtpos").toString());
            }
            if(gftMbxRows() == 0){
               dbtb.bbsolutf(stbrt);
               whilf(dbtb.nfxt()){
                   totblRows++;
               }
               totblRows++;
            }
            stbrtPos = stbrt;
        }
        populbtfdblldount = populbtfdblldount +1;
        rfsultSft = dbtb;
        if((fndPos - stbrtPos) >= gftMbxRows() && (gftMbxRows() > 0)){
            fndPos = prfvEndPos;
            pbgfnotfnd = fblsf;
            rfturn;
        }

        if((mbxRowsrfbdhfd != gftMbxRows() || mbxRowsrfbdhfd != totblRows) && pbgfnotfnd) {
           stbrtPrfv = stbrt - gftPbgfSizf();
        }

        if( pbgfSizf == 0){
           prfvEndPos = fndPos;
           fndPos = stbrt + gftMbxRows() ;
        }
        flsf{
            prfvEndPos = fndPos;
            fndPos = stbrt + gftPbgfSizf();
        }


        if (stbrt == 1){
            rfsultSft.bfforfFirst();
        }
        flsf {
            rfsultSft.bbsolutf(stbrt -1);
        }
        if( pbgfSizf == 0) {
           rvh = nfw Vfdtor<Objfdt>(gftMbxRows());

        }
        flsf{
            rvh = nfw Vfdtor<Objfdt>(gftPbgfSizf());
        }

        if (dbtb == null) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.populbtf").toString());
        }

        // gft thf mftb dbtb for this RfsultSft
        RSMD = dbtb.gftMftbDbtb();

        // sft up thf mftbdbtb
        RowSftMD = nfw RowSftMftbDbtbImpl();
        initMftbDbtb(RowSftMD, RSMD);

        // rflfbsf thf mftb-dbtb so thbt brfn't tfmptfd to usf it.
        RSMD = null;
        numCols = RowSftMD.gftColumnCount();
        mRows = this.gftMbxRows();
        rowsFftdhfd = 0;
        durrfntRow = null;

        if(!dbtb.nfxt() && mRows == 0){
            fndPos = prfvEndPos;
            pbgfnotfnd = fblsf;
            rfturn;
        }

        dbtb.prfvious();

        whilf ( dbtb.nfxt()) {

            durrfntRow = nfw Row(numCols);
          if(pbgfSizf == 0){
            if ( rowsFftdhfd >= mRows && mRows > 0) {
                rowsftWbrning.sftNfxtExdfption(nfw SQLExdfption("Populbting rows "
                + "sftting hbs fxdffdfd mbx row sftting"));
                brfbk;
            }
          }
          flsf {
              if ( (rowsFftdhfd >= pbgfSizf) ||( mbxRowsrfbdhfd >= mRows && mRows > 0)) {
                rowsftWbrning.sftNfxtExdfption(nfw SQLExdfption("Populbting rows "
                + "sftting hbs fxdffdfd mbx row sftting"));
                brfbk;
            }
          }

            for ( i = 1; i <= numCols; i++) {
                /*
                 * dhfdk if thf usfr hbs sft b mbp. If no mbp
                 * is sft thfn usf plbin gftObjfdt. This lfts
                 * us work with drivfrs thbt do not support
                 * gftObjfdt with b mbp in fbirly sfnsiblf wby
                 */
                if (mbp == null) {
                    obj = dbtb.gftObjfdt(i);
                } flsf {
                    obj = dbtb.gftObjfdt(i, mbp);
                }
                /*
                 * thf following blodk dhfdks for thf vbrious
                 * typfs thbt wf hbvf to sfriblizf in ordfr to
                 * storf - right now only strudts hbvf bffn tfstfd
                 */
                if (obj instbndfof Strudt) {
                    obj = nfw SfriblStrudt((Strudt)obj, mbp);
                } flsf if (obj instbndfof SQLDbtb) {
                    obj = nfw SfriblStrudt((SQLDbtb)obj, mbp);
                } flsf if (obj instbndfof Blob) {
                    obj = nfw SfriblBlob((Blob)obj);
                } flsf if (obj instbndfof Clob) {
                    obj = nfw SfriblClob((Clob)obj);
                } flsf if (obj instbndfof jbvb.sql.Arrby) {
                    obj = nfw SfriblArrby((jbvb.sql.Arrby)obj, mbp);
                }

                durrfntRow.initColumnObjfdt(i, obj);
            }
            rowsFftdhfd++;
            mbxRowsrfbdhfd++;
            rvh.bdd(durrfntRow);
        }
        numRows = rowsFftdhfd ;
        // Also rowsFftdhfd should bf fqubl to rvh.sizf()
        // notify bny listfnfrs thbt thf rowsft hbs dhbngfd
        notifyRowSftChbngfd();

     }

    /**
     * Thf nfxtPbgf gfts thf nfxt pbgf, thbt is b <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * dontbining thf numbfr of rows spfdififd by pbgf sizf.
     * @rfturn boolfbn vbluf truf indidbting whfthfr thfrf brf morf pbgfs to domf bnd
     *         fblsf indidbting thbt this is thf lbst pbgf.
     * @throws SQLExdfption if bn frror oddurs or this dbllfd bfforf dblling populbtf.
     */
     publid boolfbn nfxtPbgf() throws SQLExdfption {

         if (populbtfdblldount == 0){
             throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.nfxtpbgf").toString());
         }
         // Fix for 6554186
         onFirstPbgf = fblsf;
         if(dbllWithCon){
            drsRfbdfr.sftStbrtPosition(fndPos);
            drsRfbdfr.rfbdDbtb((RowSftIntfrnbl)this);
            rfsultSft = null;
         }
         flsf {
            populbtf(rfsultSft,fndPos);
         }
         rfturn pbgfnotfnd;
     }

    /**
     * This is thf sfttfr fundtion for sftting thf sizf of thf pbgf, whidh spfdififs
     * how mbny rows hbvf to bf rftrivfd bt b timf.
     *
     * @pbrbm sizf whidh is thf pbgf sizf
     * @throws SQLExdfption if sizf is lfss thbn zfro or grfbtfr thbn mbx rows.
     */
     publid void sftPbgfSizf (int sizf) throws SQLExdfption {
        if (sizf < 0) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.pbgfsizf").toString());
        }
        if (sizf > gftMbxRows() && gftMbxRows() != 0) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.pbgfsizf1").toString());
        }
        pbgfSizf = sizf;
     }

    /**
     * This is thf gfttfr fundtion for thf sizf of thf pbgf.
     *
     * @rfturn bn intfgfr thbt is thf pbgf sizf.
     */
    publid int gftPbgfSizf() {
        rfturn pbgfSizf;
    }


    /**
     * Rftrifvfs thf dbtb prfsfnt in thf pbgf prior to thf pbgf from whfrf it is
     * dbllfd.
     * @rfturn boolfbn vbluf truf if it rftrifvfs thf prfvious pbgf, flbsf if it
     *         is on thf first pbgf.
     * @throws SQLExdfption if it is dbllfd bfforf populbtf is dbllfd or RfsultSft
     *         is of typf <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf> or if bn frror
     *         oddurs.
     */
    publid boolfbn prfviousPbgf() throws SQLExdfption {
        int pS;
        int mR;
        int rfm;

        pS = gftPbgfSizf();
        mR = mbxRowsrfbdhfd;

        if (populbtfdblldount == 0){
             throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.nfxtpbgf").toString());
         }

        if( !dbllWithCon){
           if(rfsultSft.gftTypf() == RfsultSft.TYPE_FORWARD_ONLY){
               throw nfw SQLExdfption (rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.fwdonly").toString());
           }
        }

        pbgfnotfnd = truf;

        if(stbrtPrfv < stbrtPos ){
                onFirstPbgf = truf;
               rfturn fblsf;
            }

        if(onFirstPbgf){
            rfturn fblsf;
        }

        rfm = mR % pS;

        if(rfm == 0){
            mbxRowsrfbdhfd -= (2 * pS);
            if(dbllWithCon){
                drsRfbdfr.sftStbrtPosition(stbrtPrfv);
                drsRfbdfr.rfbdDbtb((RowSftIntfrnbl)this);
                rfsultSft = null;
            }
            flsf {
               populbtf(rfsultSft,stbrtPrfv);
            }
            rfturn truf;
        }
        flsf
        {
            mbxRowsrfbdhfd -= (pS + rfm);
            if(dbllWithCon){
                drsRfbdfr.sftStbrtPosition(stbrtPrfv);
                drsRfbdfr.rfbdDbtb((RowSftIntfrnbl)this);
                rfsultSft = null;
            }
            flsf {
               populbtf(rfsultSft,stbrtPrfv);
            }
            rfturn truf;
        }
    }

    /**
     * Gofs to thf pbgf numbfr pbssfd bs thf pbrbmftfr
     * @pbrbm pbgf , thf pbgf lobdfd on b dbll to this fundtion
     * @rfturn truf if thf pbgf fxists fblsf othfrwisf
     * @throws SQLExdfption if bn frror oddurs
     */
    /*
    publid boolfbn bbsolutfPbgf(int pbgf) throws SQLExdfption{

        boolfbn isAbs = truf, rftVbl = truf;
        int dountfr;

        if( pbgf <= 0 ){
            throw nfw SQLExdfption("Absolutf positoin is invblid");
        }
        dountfr = 0;

        firstPbgf();
        dountfr++;
        whilf((dountfr < pbgf) && isAbs) {
            isAbs = nfxtPbgf();
            dountfr ++;
        }

        if( !isAbs && dountfr < pbgf){
            rftVbl = fblsf;
        }
        flsf if(dountfr == pbgf){
            rftVbl = truf;
        }

       rfturn rftVbl;
    }
    */


    /**
     * Gofs to thf pbgf numbfr pbssfd bs thf pbrbmftfr  from thf durrfnt pbgf.
     * Thf pbrbmftfr dbn tbkf postivf or nfgbtivf vbluf bddordingly.
     * @pbrbm pbgf , thf pbgf lobdfd on b dbll to this fundtion
     * @rfturn truf if thf pbgf fxists fblsf othfrwisf
     * @throws SQLExdfption if bn frror oddurs
     */
    /*
    publid boolfbn rflbtivfPbgf(int pbgf) throws SQLExdfption {

        boolfbn isRfl = truf,rftVbl = truf;
        int dountfr;

        if(pbgf > 0){
           dountfr  = 0;
           whilf((dountfr < pbgf) && isRfl){
              isRfl = nfxtPbgf();
              dountfr++;
           }

           if(!isRfl && dountfr < pbgf){
               rftVbl = fblsf;
           }
           flsf if( dountfr == pbgf){
               rftVbl = truf;
           }
           rfturn rftVbl;
        }
        flsf {
            dountfr = pbgf;
            isRfl = truf;
            whilf((dountfr < 0) && isRfl){
                isRfl = prfviousPbgf();
                dountfr++;
            }

            if( !isRfl && dountfr < 0){
                rftVbl = fblsf;
            }
            flsf if(dountfr == 0){
                rftVbl = truf;
            }
            rfturn rftVbl;
        }
    }
    */

     /**
     * Rftrifvfs thf first pbgf of dbtb bs spfdififd by thf pbgf sizf.
     * @rfturn boolfbn vbluf truf if prfsfnt on first pbgf, fblsf othfrwisf
     * @throws SQLExdfption if it dbllfd bfforf populbtf or RfsultSft is of
     *         typf <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf> or bn frror oddurs
     */
    /*
    publid boolfbn firstPbgf() throws SQLExdfption {
           if (populbtfdblldount == 0){
             throw nfw SQLExdfption("Populbtf thf dbtb bfforf dblling ");
           }
           if( !dbllWithCon){
              if(rfsultSft.gftTypf() == RfsultSft.TYPE_FORWARD_ONLY) {
                  throw nfw SQLExdfption("Rfsult of typf forwbrd only");
              }
           }
           fndPos = 0;
           mbxRowsrfbdhfd = 0;
           pbgfnotfnd = truf;
           if(dbllWithCon){
               drsRfbdfr.sftStbrtPosition(stbrtPos);
               drsRfbdfr.rfbdDbtb((RowSftIntfrnbl)this);
               rfsultSft = null;
           }
           flsf {
              populbtf(rfsultSft,stbrtPos);
           }
           onFirstPbgf = truf;
           rfturn onFirstPbgf;
    }
    */

    /**
     * Rftrivfs thf lbst pbgf of dbtb bs spfdififd by thf pbgf sizf.
     * @rfturn boolfbn vbluf tur if prfsfnt on thf lbst pbgf, fblsf othfrwisf
     * @throws SQLExdfption if dbllfd bfforf populbtf or if bn frror oddurs.
     */
     /*
    publid boolfbn lbstPbgf() throws SQLExdfption{
          int pS;
          int mR;
          int quo;
          int rfm;

          pS = gftPbgfSizf();
          mR = gftMbxRows();

          if(pS == 0){
              onLbstPbgf = truf;
              rfturn onLbstPbgf;
          }

          if(gftMbxRows() == 0){
              mR = totblRows;
          }

          if (populbtfdblldount == 0){
             throw nfw SQLExdfption("Populbtf thf dbtb bfforf dblling ");
         }

         onFirstPbgf = fblsf;

         if((mR % pS) == 0){
             quo = mR / pS;
             int stbrt = stbrtPos + (pS * (quo - 1));
             mbxRowsrfbdhfd = mR - pS;
             if(dbllWithCon){
                 drsRfbdfr.sftStbrtPosition(stbrt);
                 drsRfbdfr.rfbdDbtb((RowSftIntfrnbl)this);
                 rfsultSft = null;
             }
             flsf {
                populbtf(rfsultSft,stbrt);
             }
             onLbstPbgf = truf;
             rfturn onLbstPbgf;
         }
        flsf {
              quo = mR /pS;
              rfm = mR % pS;
              int stbrt = stbrtPos + (pS * quo);
             mbxRowsrfbdhfd = mR - (rfm);
             if(dbllWithCon){
                 drsRfbdfr.sftStbrtPosition(stbrt);
                 drsRfbdfr.rfbdDbtb((RowSftIntfrnbl)this);
                 rfsultSft = null;
             }
             flsf {
                populbtf(rfsultSft,stbrt);
             }
             onLbstPbgf = truf;
             rfturn onLbstPbgf;
         }
    }
    */

   /**
     * Sfts thf stbtus for thf row on whidh thf dursor is positionfd. Thf insfrtFlbg is usfd
     * to mfntion thf togglf stbtus for this row
     * @pbrbm insfrtFlbg if it is truf  - mbrks this row bs insfrtfd
     *                   if it is fblsf - mbrks it bs not b nfwly insfrtfd row
     * @throws SQLExdfption if bn frror oddurs whilf doing this opfrbtion
     */
    publid void sftRowInsfrtfd(boolfbn insfrtFlbg) throws SQLExdfption {

        dhfdkCursor();

        if(onInsfrtRow == truf)
          throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.invblidop").toString());

        if( insfrtFlbg ) {
          ((Row)gftCurrfntRow()).sftInsfrtfd();
        } flsf {
          ((Row)gftCurrfntRow()).dlfbrInsfrtfd();
        }
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd <dodf>SQL XML</dodf> pbrbmftfr bs b
     * <dodf>SQLXML</dodf> objfdt in thf Jbvb progrbmming lbngubgf.
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @rfturn b SQLXML objfdt thbt mbps bn SQL XML vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid SQLXML gftSQLXML(int dolumnIndfx) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd <dodf>SQL XML</dodf> pbrbmftfr bs b
     * <dodf>SQLXML</dodf> objfdt in thf Jbvb progrbmming lbngubgf.
     * @pbrbm dolNbmf thf nbmf of thf dolumn from whidh to rftrifvf thf vbluf
     * @rfturn b SQLXML objfdt thbt mbps bn SQL XML vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     */
    publid SQLXML gftSQLXML(String dolNbmf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>RfsultSft</dodf> objfdt bs b jbvb.sql.RowId objfdt in thf Jbvb
     * progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @rfturn thf dolumn vbluf if thf vbluf is b SQL <dodf>NULL</dodf> thf
     *     vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid RowId gftRowId(int dolumnIndfx) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>RfsultSft</dodf> objfdt bs b jbvb.sql.RowId objfdt in thf Jbvb
     * progrbmming lbngubgf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @rfturn thf dolumn vbluf if thf vbluf is b SQL <dodf>NULL</dodf> thf
     *     vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid RowId gftRowId(String dolumnNbmf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>RowId</dodf> vbluf. Thf updbtfr
     * mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or thf insfrt
     * row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf; instfbd
     * thf <dodf>updbtfRow<dodf> or <dodf>insfrtRow</dodf> mfthods brf dbllfd
     * to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm x thf dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss oddurs
     * @sindf 1.6
     */
    publid void updbtfRowId(int dolumnIndfx, RowId x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>RowId</dodf> vbluf. Thf updbtfr
     * mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or thf insfrt
     * row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf; instfbd
     * thf <dodf>updbtfRow<dodf> or <dodf>insfrtRow</dodf> mfthods brf dbllfd
     * to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss oddurs
     * @sindf 1.6
     */
    publid void updbtfRowId(String dolumnNbmf, RowId x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * Rftrifvfs thf holdbbility of this RfsultSft objfdt
     * @rfturn  fithfr RfsultSft.HOLD_CURSORS_OVER_COMMIT or RfsultSft.CLOSE_CURSORS_AT_COMMIT
     * @throws SQLExdfption if b dbtbbbsf frror oddurs
     * @sindf 1.6
     */
    publid int gftHoldbbility() throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * Rftrifvfs whfthfr this RfsultSft objfdt hbs bffn dlosfd. A RfsultSft is dlosfd if thf
     * mfthod dlosf hbs bffn dbllfd on it, or if it is butombtidblly dlosfd.
     * @rfturn truf if this RfsultSft objfdt is dlosfd; fblsf if it is still opfn
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid boolfbn isClosfd() throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * This mfthod is usfd for updbting dolumns thbt support Nbtionbl Chbrbdtfr sfts.
     * It dbn bf usfd for updbting NCHAR,NVARCHAR bnd LONGNVARCHAR dolumns.
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm nString thf vbluf for thf dolumn to bf updbtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void updbtfNString(int dolumnIndfx, String nString) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * This mfthod is usfd for updbting dolumns thbt support Nbtionbl Chbrbdtfr sfts.
     * It dbn bf usfd for updbting NCHAR,NVARCHAR bnd LONGNVARCHAR dolumns.
     * @pbrbm dolumnNbmf nbmf of thf Column
     * @pbrbm nString thf vbluf for thf dolumn to bf updbtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void updbtfNString(String dolumnNbmf, String nString) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }


    /*o
     * This mfthod is usfd for updbting SQL <dodf>NCLOB</dodf>  typf thbt mbps
     * to <dodf>jbvb.sql.Typfs.NCLOB</dodf>
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm nClob thf vbluf for thf dolumn to bf updbtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void updbtfNClob(int dolumnIndfx, NClob nClob) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * This mfthod is usfd for updbting SQL <dodf>NCLOB</dodf>  typf thbt mbps
     * to <dodf>jbvb.sql.Typfs.NCLOB</dodf>
     * @pbrbm dolumnNbmf nbmf of thf dolumn
     * @pbrbm nClob thf vbluf for thf dolumn to bf updbtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void updbtfNClob(String dolumnNbmf, NClob nClob) throws SQLExdfption {
       throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs b <dodf>NClob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm i thf first dolumn is 1, thf sfdond is 2, ...
     * @rfturn b <dodf>NClob</dodf> objfdt rfprfsfnting thf SQL
     *         <dodf>NCLOB</dodf> vbluf in thf spfdififd dolumn
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid NClob gftNClob(int i) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }


   /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs b <dodf>NClob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolNbmf thf nbmf of thf dolumn from whidh to rftrifvf thf vbluf
     * @rfturn b <dodf>NClob</dodf> objfdt rfprfsfnting thf SQL <dodf>NCLOB</dodf>
     * vbluf in thf spfdififd dolumn
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid NClob gftNClob(String dolNbmf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    publid <T> T unwrbp(jbvb.lbng.Clbss<T> ifbdf) throws jbvb.sql.SQLExdfption {
        rfturn null;
    }

    publid boolfbn isWrbppfrFor(Clbss<?> intfrfbdfs) throws SQLExdfption {
        rfturn fblsf;
    }


   /**
      * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.SQLXML</dodf> objfdt. Thf drivfr donvfrts this to bn
      * SQL <dodf>XML</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
      * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
      * @pbrbm xmlObjfdt b <dodf>SQLXML</dodf> objfdt thbt mbps bn SQL <dodf>XML</dodf> vbluf
      * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
      * @sindf 1.6
      */
     publid void sftSQLXML(int pbrbmftfrIndfx, SQLXML xmlObjfdt) throws SQLExdfption {
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
     }

   /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.SQLXML</dodf> objfdt. Thf drivfr donvfrts this to bn
     * <dodf>SQL XML</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
     * @pbrbm xmlObjfdt b <dodf>SQLXML</dodf> objfdt thbt mbps bn <dodf>SQL XML</dodf> vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void sftSQLXML(String pbrbmftfrNbmf, SQLXML xmlObjfdt) throws SQLExdfption {
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
     }


    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.RowId</dodf> objfdt. Thf
     * drivfr donvfrts this to b SQL <dodf>ROWID</dodf> vbluf whfn it sfnds it
     * to thf dbtbbbsf
     *
     * @pbrbm pbrbmftfrIndfx thf first pbrbmftfr is 1, thf sfdond is 2, ...
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     * @sindf 1.6
     */
    publid void sftRowId(int pbrbmftfrIndfx, RowId x) throws SQLExdfption {
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
     }


    /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.RowId</dodf> objfdt. Thf
    * drivfr donvfrts this to b SQL <dodf>ROWID</dodf> whfn it sfnds it to thf
    * dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
    * @sindf 1.6
    */
   publid void sftRowId(String pbrbmftfrNbmf, RowId x) throws SQLExdfption {
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
     }


    /**
     * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt. Thf
     * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
     * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
     * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.

     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>sftNChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
     * @pbrbm vbluf thf pbrbmftfr vbluf
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur ; if b dbtbbbsf bddfss frror oddurs; or
     * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
     * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
     * @sindf 1.6
     */
     publid void sftNChbrbdtfrStrfbm(int pbrbmftfrIndfx, Rfbdfr vbluf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
     }


    /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>jbvb.sql.NClob</dodf> objfdt. Thf objfdt
    * implfmfnts thf <dodf>jbvb.sql.NClob</dodf> intfrfbdf. This <dodf>NClob</dodf>
    * objfdt mbps to b SQL <dodf>NCLOB</dodf>.
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf dolumn to bf sft
    * @pbrbm vbluf thf pbrbmftfr vbluf
    * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
    *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
    *  frror dould oddur; or if b dbtbbbsf bddfss frror oddurs
    * @sindf 1.6
    */
    publid void sftNClob(String pbrbmftfrNbmf, NClob vbluf) throws SQLExdfption {
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
     }


  /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * It is intfndfd for usf whfn
     * bddfssing  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * @rfturn b <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt dontbins thf dolumn
     * vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf vbluf rfturnfd is
     * <dodf>null</dodf> in thf Jbvb progrbmming lbngubgf.
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid jbvb.io.Rfbdfr gftNChbrbdtfrStrfbm(int dolumnIndfx) throws SQLExdfption {
       throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
     }


    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * It is intfndfd for usf whfn
     * bddfssing  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @rfturn b <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt dontbins thf dolumn
     * vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf vbluf rfturnfd is
     * <dodf>null</dodf> in thf Jbvb progrbmming lbngubgf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid jbvb.io.Rfbdfr gftNChbrbdtfrStrfbm(String dolumnNbmf) throws SQLExdfption {
       throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
     }


    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.SQLXML</dodf> vbluf.
     * Thf updbtfr
     * mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or thf insfrt
     * row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf; instfbd
     * thf <dodf>updbtfRow</dodf> or <dodf>insfrtRow</dodf> mfthods brf dbllfd
     * to updbtf thf dbtbbbsf.
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm xmlObjfdt thf vbluf for thf dolumn to bf updbtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void updbtfSQLXML(int dolumnIndfx, SQLXML xmlObjfdt) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.SQLXML</dodf> vbluf.
     * Thf updbtfr
     * mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or thf insfrt
     * row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf; instfbd
     * thf <dodf>updbtfRow</dodf> or <dodf>insfrtRow</dodf> mfthods brf dbllfd
     * to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm xmlObjfdt thf dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss oddurs
     * @sindf 1.6
     */
    publid void updbtfSQLXML(String dolumnNbmf, SQLXML xmlObjfdt) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

     /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>String</dodf> in thf Jbvb progrbmming lbngubgf.
     * It is intfndfd for usf whfn
     * bddfssing  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid String gftNString(int dolumnIndfx) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>String</dodf> in thf Jbvb progrbmming lbngubgf.
     * It is intfndfd for usf whfn
     * bddfssing  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid String gftNString(String dolumnNbmf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
    }

     /**
       * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf, whidh will
       * hbvf thf spfdififd numbfr of bytfs. Thf drivfr dofs thf nfdfssbry donvfrsion
       * from Jbvb dhbrbdtfr formbt to thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
       * It is intfndfd for usf whfn updbting NCHAR,NVARCHAR bnd LONGNVARCHAR dolumns.
       * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or
       * thf insfrt row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf;
       * instfbd thf updbtfRow or insfrtRow mfthods brf dbllfd to updbtf thf dbtbbbsf.
       *
       * @pbrbm dolumnIndfx - thf first dolumn is 1, thf sfdond is 2, ...
       * @pbrbm x - thf nfw dolumn vbluf
       * @pbrbm lfngth - thf lfngth of thf strfbm
       * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
       * @sindf 1.6
       */
       publid void updbtfNChbrbdtfrStrfbm(int dolumnIndfx,
                            jbvb.io.Rfbdfr x,
                            long lfngth)
                            throws SQLExdfption {
          throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
       }

     /**
       * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf, whidh will
       * hbvf thf spfdififd numbfr of bytfs. Thf drivfr dofs thf nfdfssbry donvfrsion
       * from Jbvb dhbrbdtfr formbt to thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
       * It is intfndfd for usf whfn updbting NCHAR,NVARCHAR bnd LONGNVARCHAR dolumns.
       * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or
       * thf insfrt row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf;
       * instfbd thf updbtfRow or insfrtRow mfthods brf dbllfd to updbtf thf dbtbbbsf.
       *
       * @pbrbm dolumnNbmf - nbmf of thf Column
       * @pbrbm x - thf nfw dolumn vbluf
       * @pbrbm lfngth - thf lfngth of thf strfbm
       * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
       * @sindf 1.6
       */
       publid void updbtfNChbrbdtfrStrfbm(String dolumnNbmf,
                            jbvb.io.Rfbdfr x,
                            long lfngth)
                            throws SQLExdfption {
          throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.opnotysupp").toString());
       }

     /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf.   Thf
     * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
     * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
     * It is intfndfd for usf whfn
     * updbting  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfNChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf> or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNChbrbdtfrStrfbm(int dolumnIndfx,
                             jbvb.io.Rfbdfr x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf.  Thf
     * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
     * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
     * It is intfndfd for usf whfn
     * updbting  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfNChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt dontbining
     *        thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf> or this mfthod is dbllfd on b dlosfd rfsult sft
      * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNChbrbdtfrStrfbm(String dolumnLbbfl,
                             jbvb.io.Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

//////////////////////////

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn input strfbm, whidh
     * will hbvf thf spfdififd numbfr of bytfs.
     * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
     * vbluf to.
     * @pbrbm lfngth thf numbfr of bytfs in thf pbrbmftfr dbtb.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBlob(int dolumnIndfx, InputStrfbm inputStrfbm, long lfngth) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn input strfbm, whidh
     * will hbvf thf spfdififd numbfr of bytfs.
     * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
     * vbluf to.
     * @pbrbm lfngth thf numbfr of bytfs in thf pbrbmftfr dbtb.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBlob(String dolumnLbbfl, InputStrfbm inputStrfbm, long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn input strfbm.
     * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     *
     *  <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfBlob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
     * vbluf to.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBlob(int dolumnIndfx, InputStrfbm inputStrfbm) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn input strfbm.
     * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     *   <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfBlob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
     * vbluf to.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBlob(String dolumnLbbfl, InputStrfbm inputStrfbm) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfClob(int dolumnIndfx,  Rfbdfr rfbdfr, long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfClob(String dolumnLbbfl,  Rfbdfr rfbdfr, long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

   /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     *   <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfClob(int dolumnIndfx,  Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     *  <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfClob(String dolumnLbbfl,  Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

   /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur; this mfthod is dbllfd on b dlosfd rfsult sft,
     * if b dbtbbbsf bddfss frror oddurs or
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNClob(int dolumnIndfx,  Rfbdfr rfbdfr, long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur; this mfthod is dbllfd on b dlosfd rfsult sft;
     *  if b dbtbbbsf bddfss frror oddurs or
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNClob(String dolumnLbbfl,  Rfbdfr rfbdfr, long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfNClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur; this mfthod is dbllfd on b dlosfd rfsult sft,
     * if b dbtbbbsf bddfss frror oddurs or
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNClob(int dolumnIndfx,  Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfNClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur; this mfthod is dbllfd on b dlosfd rfsult sft;
     *  if b dbtbbbsf bddfss frror oddurs or
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNClob(String dolumnLbbfl,  Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

        /**
     * Updbtfs thf dfsignbtfd dolumn with bn bsdii strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfAsdiiStrfbm(int dolumnIndfx,
                           jbvb.io.InputStrfbm x,
                           long lfngth) throws SQLExdfption {

    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b binbry strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBinbryStrfbm(int dolumnIndfx,
                            jbvb.io.InputStrfbm x,
                            long lfngth) throws SQLExdfption {
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfChbrbdtfrStrfbm(int dolumnIndfx,
                             jbvb.io.Rfbdfr x,
                             long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt dontbining
     *        thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfChbrbdtfrStrfbm(String dolumnLbbfl,
                             jbvb.io.Rfbdfr rfbdfr,
                             long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }
     /**
     * Updbtfs thf dfsignbtfd dolumn with bn bsdii strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs..
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfAsdiiStrfbm(String dolumnLbbfl,
                           jbvb.io.InputStrfbm x,
                           long lfngth) throws SQLExdfption {
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b binbry strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBinbryStrfbm(String dolumnLbbfl,
                            jbvb.io.InputStrfbm x,
                            long lfngth) throws SQLExdfption {
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b binbry strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfBinbryStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBinbryStrfbm(int dolumnIndfx,
                            jbvb.io.InputStrfbm x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }


    /**
     * Updbtfs thf dfsignbtfd dolumn with b binbry strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfBinbryStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBinbryStrfbm(String dolumnLbbfl,
                            jbvb.io.InputStrfbm x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfChbrbdtfrStrfbm(int dolumnIndfx,
                             jbvb.io.Rfbdfr x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt dontbining
     *        thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfChbrbdtfrStrfbm(String dolumnLbbfl,
                             jbvb.io.Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn bsdii strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfAsdiiStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfAsdiiStrfbm(int dolumnIndfx,
                           jbvb.io.InputStrfbm x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn bsdii strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfAsdiiStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfAsdiiStrfbm(String dolumnLbbfl,
                           jbvb.io.InputStrfbm x) throws SQLExdfption {

    }

   /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.nft.URL</dodf> vbluf.
  * Thf drivfr donvfrts this to bn SQL <dodf>DATALINK</dodf> vbluf
  * whfn it sfnds it to thf dbtbbbsf.
  *
  * @pbrbm pbrbmftfrIndfx thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm x thf <dodf>jbvb.nft.URL</dodf> objfdt to bf sft
  * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
  * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  * @sindf 1.4
  */
  publid void sftURL(int pbrbmftfrIndfx, jbvb.nft.URL x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

  /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
  * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
  * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
  * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
  * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
  * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
  * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
  * it might bf morf fffidifnt to usf b vfrsion of
  * <dodf>sftNClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
  *
  * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
  * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
  * mbrkfr in thf SQL stbtfmfnt;
  * if thf drivfr dofs not support nbtionbl dhbrbdtfr sfts;
  * if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur;  if b dbtbbbsf bddfss frror oddurs or
  * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  *
  * @sindf 1.6
  */
  publid void sftNClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr)
    throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

  /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf <dodf>rfbdfr</dodf> must dontbin  thf numbfr
             * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
            * gfnfrbtfd whfn thf <dodf>CbllbblfStbtfmfnt</dodf> is fxfdutfd.
            * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
            * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
            * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
            * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
            * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
            *
            * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr to bf sft
            * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
            * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
            * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
            * mbrkfr in thf SQL stbtfmfnt; if thf lfngth spfdififd is lfss thbn zfro;
            * if thf drivfr dofs not support nbtionbl
            *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
            *  frror dould oddur; if b dbtbbbsf bddfss frror oddurs or
            * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
            * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
            * this mfthod
            * @sindf 1.6
            */
            publid void sftNClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr, long lfngth)
    throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
  * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
  * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
  * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
  * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
  * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
  * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
  * it might bf morf fffidifnt to usf b vfrsion of
  * <dodf>sftNClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
  *
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
  * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl dhbrbdtfr sfts;
  * if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur;  if b dbtbbbsf bddfss frror oddurs or
  * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  *
  * @sindf 1.6
  */
  publid void sftNClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr)
    throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


    /**
     * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf rfbdfr must dontbin  thf numbfr
     * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
     * gfnfrbtfd whfn thf <dodf>PrfpbrfdStbtfmfnt</dodf> is fxfdutfd.
     * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
     * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
     * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
     * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
     * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
     * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
     * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
     * mbrkfr in thf SQL stbtfmfnt; if thf lfngth spfdififd is lfss thbn zfro;
     * if thf drivfr dofs not support nbtionbl dhbrbdtfr sfts;
     * if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur;  if b dbtbbbsf bddfss frror oddurs or
     * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
     * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
     *
     * @sindf 1.6
     */
     publid void sftNClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr, long lfngth)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


    /**
     * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>jbvb.sql.NClob</dodf> objfdt. Thf drivfr donvfrts this to
b
     * SQL <dodf>NCLOB</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
     * @pbrbm vbluf thf pbrbmftfr vbluf
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur ; or if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
     publid void sftNClob(int pbrbmftfrIndfx, NClob vbluf) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


   /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf> objfdt.
  * Thf drivfr donvfrts this to b SQL <dodf>NCHAR</dodf> or
  * <dodf>NVARCHAR</dodf> or <dodf>LONGNVARCHAR</dodf> vbluf
  * (dfpfnding on thf brgumfnt's
  * sizf rflbtivf to thf drivfr's limits on <dodf>NVARCHAR</dodf> vblufs)
  * whfn it sfnds it to thf dbtbbbsf.
  *
  * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur ; or if b dbtbbbsf bddfss frror oddurs
  * @sindf 1.6
  */
  publid void sftNString(int pbrbmftfrIndfx, String vbluf) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf> objfdt.
  * Thf drivfr donvfrts this to b SQL <dodf>NCHAR</dodf> or
  * <dodf>NVARCHAR</dodf> or <dodf>LONGNVARCHAR</dodf>
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf dolumn to bf sft
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur; or if b dbtbbbsf bddfss frror oddurs
  * @sindf 1.6
  */
 publid void sftNString(String pbrbmftfrNbmf, String vbluf)
         throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt. Thf
  * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
  * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
  * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
  * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur ; or if b dbtbbbsf bddfss frror oddurs
  * @sindf 1.6
  */
  publid void sftNChbrbdtfrStrfbm(int pbrbmftfrIndfx, Rfbdfr vbluf, long lfngth) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt. Thf
  * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
  * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
  * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf dolumn to bf sft
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur; or if b dbtbbbsf bddfss frror oddurs
  * @sindf 1.6
  */
 publid void sftNChbrbdtfrStrfbm(String pbrbmftfrNbmf, Rfbdfr vbluf, long lfngth)
         throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

  /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt. Thf
  * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
  * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
  * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.

  * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
  * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
  * stbndbrd intfrfbdf.
  * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
  * it might bf morf fffidifnt to usf b vfrsion of
  * <dodf>sftNChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
  *
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur ; if b dbtbbbsf bddfss frror oddurs; or
  * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  * @sindf 1.6
  */
  publid void sftNChbrbdtfrStrfbm(String pbrbmftfrNbmf, Rfbdfr vbluf) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

  /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timfstbmp</dodf> vbluf,
    * using thf givfn <dodf>Cblfndbr</dodf> objfdt.  Thf drivfr usfs
    * thf <dodf>Cblfndbr</dodf> objfdt to donstrudt bn SQL <dodf>TIMESTAMP</dodf> vbluf,
    * whidh thf drivfr thfn sfnds to thf dbtbbbsf.  With b
    * b <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf timfstbmp
    * tbking into bddount b dustom timfzonf.  If no
    * <dodf>Cblfndbr</dodf> objfdt is spfdififd, thf drivfr usfs thf dffbult
    * timfzonf, whidh is thbt of thf virtubl mbdhinf running thf bpplidbtion.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @pbrbm dbl thf <dodf>Cblfndbr</dodf> objfdt thf drivfr will usf
    *            to donstrudt thf timfstbmp
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftTimfstbmp
    * @sindf 1.4
    */
    publid void sftTimfstbmp(String pbrbmftfrNbmf, jbvb.sql.Timfstbmp x, Cblfndbr dbl)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

    /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf <dodf>rfbdfr</dodf> must dontbin  thf numbfr
               * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
               * gfnfrbtfd whfn thf <dodf>CbllbblfStbtfmfnt</dodf> is fxfdutfd.
              * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
              * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
              * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
              * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
              * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
              * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr to bf sft
              * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
              * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
              * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
              * mbrkfr in thf SQL stbtfmfnt; if thf lfngth spfdififd is lfss thbn zfro;
              * b dbtbbbsf bddfss frror oddurs or
              * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
              * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
              * this mfthod
              *
              * @sindf 1.6
              */
      publid  void sftClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr, long lfngth)
      throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


  /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Clob</dodf> objfdt.
    * Thf drivfr donvfrts this to bn SQL <dodf>CLOB</dodf> vbluf whfn it
    * sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x b <dodf>Clob</dodf> objfdt thbt mbps bn SQL <dodf>CLOB</dodf> vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.6
    */
    publid void sftClob (String pbrbmftfrNbmf, Clob x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
    * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
    * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
    * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
    * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
    *
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs or this mfthod is dbllfd on
    * b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    *
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    * @sindf 1.6
    */
    publid void sftClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr)
      throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Dbtf</dodf> vbluf
    * using thf dffbult timf zonf of thf virtubl mbdhinf thbt is running
    * thf bpplidbtion.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>DATE</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftDbtf
    * @sindf 1.4
    */
    publid void sftDbtf(String pbrbmftfrNbmf, jbvb.sql.Dbtf x)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Dbtf</dodf> vbluf,
    * using thf givfn <dodf>Cblfndbr</dodf> objfdt.  Thf drivfr usfs
    * thf <dodf>Cblfndbr</dodf> objfdt to donstrudt bn SQL <dodf>DATE</dodf> vbluf,
    * whidh thf drivfr thfn sfnds to thf dbtbbbsf.  With b
    * b <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf dbtf
    * tbking into bddount b dustom timfzonf.  If no
    * <dodf>Cblfndbr</dodf> objfdt is spfdififd, thf drivfr usfs thf dffbult
    * timfzonf, whidh is thbt of thf virtubl mbdhinf running thf bpplidbtion.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @pbrbm dbl thf <dodf>Cblfndbr</dodf> objfdt thf drivfr will usf
    *            to donstrudt thf dbtf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftDbtf
    * @sindf 1.4
    */
   publid void sftDbtf(String pbrbmftfrNbmf, jbvb.sql.Dbtf x, Cblfndbr dbl)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timf</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>TIME</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftTimf
    * @sindf 1.4
    */
   publid void sftTimf(String pbrbmftfrNbmf, jbvb.sql.Timf x)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timf</dodf> vbluf,
    * using thf givfn <dodf>Cblfndbr</dodf> objfdt.  Thf drivfr usfs
    * thf <dodf>Cblfndbr</dodf> objfdt to donstrudt bn SQL <dodf>TIME</dodf> vbluf,
    * whidh thf drivfr thfn sfnds to thf dbtbbbsf.  With b
    * b <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf timf
    * tbking into bddount b dustom timfzonf.  If no
    * <dodf>Cblfndbr</dodf> objfdt is spfdififd, thf drivfr usfs thf dffbult
    * timfzonf, whidh is thbt of thf virtubl mbdhinf running thf bpplidbtion.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @pbrbm dbl thf <dodf>Cblfndbr</dodf> objfdt thf drivfr will usf
    *            to donstrudt thf timf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftTimf
    * @sindf 1.4
    */
   publid void sftTimf(String pbrbmftfrNbmf, jbvb.sql.Timf x, Cblfndbr dbl)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

   /**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
   * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
   * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
   * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
   * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
   * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
   *
   * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
   * it might bf morf fffidifnt to usf b vfrsion of
   * <dodf>sftClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
   *
   * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
   * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs, this mfthod is dbllfd on
   * b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>or if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
   * mbrkfr in thf SQL stbtfmfnt
   *
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.6
   */
   publid void sftClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr)
     throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

    /**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf rfbdfr must dontbin  thf numbfr
   * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
   * gfnfrbtfd whfn thf <dodf>PrfpbrfdStbtfmfnt</dodf> is fxfdutfd.
   *This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
   * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
   * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
   * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
   * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
   * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
   * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
   * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs, this mfthod is dbllfd on
   * b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>, if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
   * mbrkfr in thf SQL stbtfmfnt, or if thf lfngth spfdififd is lfss thbn zfro.
   *
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.6
   */
   publid void sftClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr, long lfngth)
     throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.  Thf inputstrfbm must dontbin  thf numbfr
    * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
    * gfnfrbtfd whfn thf <dodf>PrfpbrfdStbtfmfnt</dodf> is fxfdutfd.
    * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm, int)</dodf>
    * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
    * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
    * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
    * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1,
    * thf sfdond is 2, ...
    * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
    * vbluf to.
    * @pbrbm lfngth thf numbfr of bytfs in thf pbrbmftfr dbtb.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs,
    * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>,
    * if pbrbmftfrIndfx dofs not dorrfspond
    * to b pbrbmftfr mbrkfr in thf SQL stbtfmfnt,  if thf lfngth spfdififd
    * is lfss thbn zfro or if thf numbfr of bytfs in thf inputstrfbm dofs not mbtdh
    * thf spfdififd lfngth.
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    *
    * @sindf 1.6
    */
    publid void sftBlob(int pbrbmftfrIndfx, InputStrfbm inputStrfbm, long lfngth)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.
    * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm)</dodf>
    * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
    * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
    * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
    *
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftBlob</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1,
    * thf sfdond is 2, ...
    * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
    * vbluf to.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs,
    * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf> or
    * if pbrbmftfrIndfx dofs not dorrfspond
    * to b pbrbmftfr mbrkfr in thf SQL stbtfmfnt,
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    *
    * @sindf 1.6
    */
    publid void sftBlob(int pbrbmftfrIndfx, InputStrfbm inputStrfbm)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.  Thf <dodf>inputstrfbm</dodf> must dontbin  thf numbfr
     * of dhbrbdtfrs spfdififd by lfngth, othfrwisf b <dodf>SQLExdfption</dodf> will bf
     * gfnfrbtfd whfn thf <dodf>CbllbblfStbtfmfnt</dodf> is fxfdutfd.
     * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm, int)</dodf>
     * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
     * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
     * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
     * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
     *
     * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr to bf sft
     * thf sfdond is 2, ...
     *
     * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
     * vbluf to.
     * @pbrbm lfngth thf numbfr of bytfs in thf pbrbmftfr dbtb.
     * @throws SQLExdfption  if pbrbmftfrIndfx dofs not dorrfspond
     * to b pbrbmftfr mbrkfr in thf SQL stbtfmfnt,  or if thf lfngth spfdififd
     * is lfss thbn zfro; if thf numbfr of bytfs in thf inputstrfbm dofs not mbtdh
     * thf spfdififd lfngth; if b dbtbbbsf bddfss frror oddurs or
     * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     *
     * @sindf 1.6
     */
     publid void sftBlob(String pbrbmftfrNbmf, InputStrfbm inputStrfbm, long lfngth)
        throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Blob</dodf> objfdt.
    * Thf drivfr donvfrts this to bn SQL <dodf>BLOB</dodf> vbluf whfn it
    * sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x b <dodf>Blob</dodf> objfdt thbt mbps bn SQL <dodf>BLOB</dodf> vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.6
    */
   publid void sftBlob (String pbrbmftfrNbmf, Blob x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.
    * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm)</dodf>
    * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
    * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
    * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
    *
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftBlob</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
    * vbluf to.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    *
    * @sindf 1.6
    */
    publid void sftBlob(String pbrbmftfrNbmf, InputStrfbm inputStrfbm)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

    /**
    * Sfts thf vbluf of thf dfsignbtfd pbrbmftfr with thf givfn objfdt. Thf sfdond
    * brgumfnt must bf bn objfdt typf; for intfgrbl vblufs, thf
    * <dodf>jbvb.lbng</dodf> fquivblfnt objfdts should bf usfd.
    *
    * <p>Thf givfn Jbvb objfdt will bf donvfrtfd to thf givfn tbrgftSqlTypf
    * bfforf bfing sfnt to thf dbtbbbsf.
    *
    * If thf objfdt hbs b dustom mbpping (is of b dlbss implfmfnting thf
    * intfrfbdf <dodf>SQLDbtb</dodf>),
    * thf JDBC drivfr should dbll thf mfthod <dodf>SQLDbtb.writfSQL</dodf> to writf it
    * to thf SQL dbtb strfbm.
    * If, on thf othfr hbnd, thf objfdt is of b dlbss implfmfnting
    * <dodf>Rff</dodf>, <dodf>Blob</dodf>, <dodf>Clob</dodf>,  <dodf>NClob</dodf>,
    *  <dodf>Strudt</dodf>, <dodf>jbvb.nft.URL</dodf>,
    * or <dodf>Arrby</dodf>, thf drivfr should pbss it to thf dbtbbbsf bs b
    * vbluf of thf dorrfsponding SQL typf.
    * <P>
    * Notf thbt this mfthod mby bf usfd to pbss dbtbtbbbsf-
    * spfdifid bbstrbdt dbtb typfs.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf objfdt dontbining thf input pbrbmftfr vbluf
    * @pbrbm tbrgftSqlTypf thf SQL typf (bs dffinfd in jbvb.sql.Typfs) to bf
    * sfnt to thf dbtbbbsf. Thf sdblf brgumfnt mby furthfr qublify this typf.
    * @pbrbm sdblf for jbvb.sql.Typfs.DECIMAL or jbvb.sql.Typfs.NUMERIC typfs,
    *          this is thf numbfr of digits bftfr thf dfdimbl point.  For bll othfr
    *          typfs, this vbluf will bf ignorfd.
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if <dodf>tbrgftSqlTypf</dodf> is
    * b <dodf>ARRAY</dodf>, <dodf>BLOB</dodf>, <dodf>CLOB</dodf>,
    * <dodf>DATALINK</dodf>, <dodf>JAVA_OBJECT</dodf>, <dodf>NCHAR</dodf>,
    * <dodf>NCLOB</dodf>, <dodf>NVARCHAR</dodf>, <dodf>LONGNVARCHAR</dodf>,
    *  <dodf>REF</dodf>, <dodf>ROWID</dodf>, <dodf>SQLXML</dodf>
    * or  <dodf>STRUCT</dodf> dbtb typf bnd thf JDBC drivfr dofs not support
    * this dbtb typf
    * @sff Typfs
    * @sff #gftObjfdt
    * @sindf 1.4
    */
    publid void sftObjfdt(String pbrbmftfrNbmf, Objfdt x, int tbrgftSqlTypf, int sdblf)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
    * Sfts thf vbluf of thf dfsignbtfd pbrbmftfr with thf givfn objfdt.
    * This mfthod is likf thf mfthod <dodf>sftObjfdt</dodf>
    * bbovf, fxdfpt thbt it bssumfs b sdblf of zfro.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf objfdt dontbining thf input pbrbmftfr vbluf
    * @pbrbm tbrgftSqlTypf thf SQL typf (bs dffinfd in jbvb.sql.Typfs) to bf
    *                      sfnt to thf dbtbbbsf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if <dodf>tbrgftSqlTypf</dodf> is
    * b <dodf>ARRAY</dodf>, <dodf>BLOB</dodf>, <dodf>CLOB</dodf>,
    * <dodf>DATALINK</dodf>, <dodf>JAVA_OBJECT</dodf>, <dodf>NCHAR</dodf>,
    * <dodf>NCLOB</dodf>, <dodf>NVARCHAR</dodf>, <dodf>LONGNVARCHAR</dodf>,
    *  <dodf>REF</dodf>, <dodf>ROWID</dodf>, <dodf>SQLXML</dodf>
    * or  <dodf>STRUCT</dodf> dbtb typf bnd thf JDBC drivfr dofs not support
    * this dbtb typf
    * @sff #gftObjfdt
    * @sindf 1.4
    */
    publid void sftObjfdt(String pbrbmftfrNbmf, Objfdt x, int tbrgftSqlTypf)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
   * Sfts thf vbluf of thf dfsignbtfd pbrbmftfr with thf givfn objfdt.
   * Thf sfdond pbrbmftfr must bf of typf <dodf>Objfdt</dodf>; thfrfforf, thf
   * <dodf>jbvb.lbng</dodf> fquivblfnt objfdts should bf usfd for built-in typfs.
   *
   * <p>Thf JDBC spfdifidbtion spfdififs b stbndbrd mbpping from
   * Jbvb <dodf>Objfdt</dodf> typfs to SQL typfs.  Thf givfn brgumfnt
   * will bf donvfrtfd to thf dorrfsponding SQL typf bfforf bfing
   * sfnt to thf dbtbbbsf.
   *
   * <p>Notf thbt this mfthod mby bf usfd to pbss dbtbtbbbsf-
   * spfdifid bbstrbdt dbtb typfs, by using b drivfr-spfdifid Jbvb
   * typf.
   *
   * If thf objfdt is of b dlbss implfmfnting thf intfrfbdf <dodf>SQLDbtb</dodf>,
   * thf JDBC drivfr should dbll thf mfthod <dodf>SQLDbtb.writfSQL</dodf>
   * to writf it to thf SQL dbtb strfbm.
   * If, on thf othfr hbnd, thf objfdt is of b dlbss implfmfnting
   * <dodf>Rff</dodf>, <dodf>Blob</dodf>, <dodf>Clob</dodf>,  <dodf>NClob</dodf>,
   *  <dodf>Strudt</dodf>, <dodf>jbvb.nft.URL</dodf>,
   * or <dodf>Arrby</dodf>, thf drivfr should pbss it to thf dbtbbbsf bs b
   * vbluf of thf dorrfsponding SQL typf.
   * <P>
   * This mfthod throws bn fxdfption if thfrf is bn bmbiguity, for fxbmplf, if thf
   * objfdt is of b dlbss implfmfnting morf thbn onf of thf intfrfbdfs nbmfd bbovf.
   *
   * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
   * @pbrbm x thf objfdt dontbining thf input pbrbmftfr vbluf
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
   * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf> or if thf givfn
   *            <dodf>Objfdt</dodf> pbrbmftfr is bmbiguous
   * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
   * this mfthod
   * @sff #gftObjfdt
   * @sindf 1.4
   */
   publid void sftObjfdt(String pbrbmftfrNbmf, Objfdt x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

    /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm, whidh will hbvf
    * thf spfdififd numbfr of bytfs.
    * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
    * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
    * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf Jbvb input strfbm thbt dontbins thf ASCII pbrbmftfr vbluf
    * @pbrbm lfngth thf numbfr of bytfs in thf strfbm
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftAsdiiStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x, int lfngth)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm, whidh will hbvf
    * thf spfdififd numbfr of bytfs.
    * Whfn b vfry lbrgf binbry vbluf is input to b <dodf>LONGVARBINARY</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.InputStrfbm</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
    * bs nffdfd until fnd-of-filf is rfbdhfd.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf jbvb input strfbm whidh dontbins thf binbry pbrbmftfr vbluf
    * @pbrbm lfngth thf numbfr of bytfs in thf strfbm
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftBinbryStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x,
                        int lfngth) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


  /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>Rfbdfr</dodf>
    * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
    * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
    * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
    * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt
    *        dontbins thf UNICODE dbtb usfd bs thf dfsignbtfd pbrbmftfr
    * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf strfbm
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftChbrbdtfrStrfbm(String pbrbmftfrNbmf,
                           jbvb.io.Rfbdfr rfbdfr,
                           int lfngth) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


  /**
   * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm.
   * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
   * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
   * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
   * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
   * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
   *
   * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
   * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
   * stbndbrd intfrfbdf.
   * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
   * it might bf morf fffidifnt to usf b vfrsion of
   * <dodf>sftAsdiiStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
   *
   * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
   * @pbrbm x thf Jbvb input strfbm thbt dontbins thf ASCII pbrbmftfr vbluf
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
     * @sindf 1.6
  */
  publid void sftAsdiiStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x)
          throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm.
    * Whfn b vfry lbrgf binbry vbluf is input to b <dodf>LONGVARBINARY</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.InputStrfbm</dodf> objfdt. Thf dbtb will bf rfbd from thf
    * strfbm bs nffdfd until fnd-of-filf is rfbdhfd.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftBinbryStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf jbvb input strfbm whidh dontbins thf binbry pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    * @sindf 1.6
    */
   publid void sftBinbryStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x)
   throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>Rfbdfr</dodf>
    * objfdt.
    * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
    * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
    * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt dontbins thf
    *        Unidodf dbtb
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    * @sindf 1.6
    */
   publid void sftChbrbdtfrStrfbm(String pbrbmftfrNbmf,
                         jbvb.io.Rfbdfr rfbdfr) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

   /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn
    * <dodf>jbvb.mbth.BigDfdimbl</dodf> vbluf.
    * Thf drivfr donvfrts this to bn SQL <dodf>NUMERIC</dodf> vbluf whfn
    * it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftBigDfdimbl
    * @sindf 1.4
    */
   publid void sftBigDfdimbl(String pbrbmftfrNbmf, BigDfdimbl x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>String</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf
    * (dfpfnding on thf brgumfnt's
    * sizf rflbtivf to thf drivfr's limits on <dodf>VARCHAR</dodf> vblufs)
    * whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftString
    * @sindf 1.4
    */
   publid void sftString(String pbrbmftfrNbmf, String x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb brrby of bytfs.
    * Thf drivfr donvfrts this to bn SQL <dodf>VARBINARY</dodf> or
    * <dodf>LONGVARBINARY</dodf> (dfpfnding on thf brgumfnt's sizf rflbtivf
    * to thf drivfr's limits on <dodf>VARBINARY</dodf> vblufs) whfn it sfnds
    * it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftBytfs
    * @sindf 1.4
    */
   publid void sftBytfs(String pbrbmftfrNbmf, bytf x[]) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timfstbmp</dodf> vbluf.
    * Thf drivfr
    * donvfrts this to bn SQL <dodf>TIMESTAMP</dodf> vbluf whfn it sfnds it to thf
    * dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftTimfstbmp
    * @sindf 1.4
    */
   publid void sftTimfstbmp(String pbrbmftfrNbmf, jbvb.sql.Timfstbmp x)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

    /**
    * Sfts thf dfsignbtfd pbrbmftfr to SQL <dodf>NULL</dodf>.
    *
    * <P><B>Notf:</B> You must spfdify thf pbrbmftfr's SQL typf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm sqlTypf thf SQL typf dodf dffinfd in <dodf>jbvb.sql.Typfs</dodf>
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftNull(String pbrbmftfrNbmf, int sqlTypf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to SQL <dodf>NULL</dodf>.
    * This vfrsion of thf mfthod <dodf>sftNull</dodf> should
    * bf usfd for usfr-dffinfd typfs bnd REF typf pbrbmftfrs.  Exbmplfs
    * of usfr-dffinfd typfs indludf: STRUCT, DISTINCT, JAVA_OBJECT, bnd
    * nbmfd brrby typfs.
    *
    * <P><B>Notf:</B> To bf portbblf, bpplidbtions must givf thf
    * SQL typf dodf bnd thf fully-qublififd SQL typf nbmf whfn spfdifying
    * b NULL usfr-dffinfd or REF pbrbmftfr.  In thf dbsf of b usfr-dffinfd typf
    * thf nbmf is thf typf nbmf of thf pbrbmftfr itsflf.  For b REF
    * pbrbmftfr, thf nbmf is thf typf nbmf of thf rfffrfndfd typf.  If
    * b JDBC drivfr dofs not nffd thf typf dodf or typf nbmf informbtion,
    * it mby ignorf it.
    *
    * Although it is intfndfd for usfr-dffinfd bnd Rff pbrbmftfrs,
    * this mfthod mby bf usfd to sft b null pbrbmftfr of bny JDBC typf.
    * If thf pbrbmftfr dofs not hbvf b usfr-dffinfd or REF typf, thf givfn
    * typfNbmf is ignorfd.
    *
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm sqlTypf b vbluf from <dodf>jbvb.sql.Typfs</dodf>
    * @pbrbm typfNbmf thf fully-qublififd nbmf of bn SQL usfr-dffinfd typf;
    *        ignorfd if thf pbrbmftfr is not b usfr-dffinfd typf or
    *        SQL <dodf>REF</dodf> vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftNull (String pbrbmftfrNbmf, int sqlTypf, String typfNbmf)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>boolfbn</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>BIT</dodf> or <dodf>BOOLEAN</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @sff #gftBoolfbn
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftBoolfbn(String pbrbmftfrNbmf, boolfbn x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>bytf</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>TINYINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftBytf
    * @sindf 1.4
    */
   publid void sftBytf(String pbrbmftfrNbmf, bytf x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>short</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>SMALLINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftShort
    * @sindf 1.4
    */
   publid void sftShort(String pbrbmftfrNbmf, short x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>int</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>INTEGER</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftInt
    * @sindf 1.4
    */
   publid void sftInt(String pbrbmftfrNbmf, int x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>long</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>BIGINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftLong
    * @sindf 1.4
    */
   publid void sftLong(String pbrbmftfrNbmf, long x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>flobt</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>FLOAT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftFlobt
    * @sindf 1.4
    */
   publid void sftFlobt(String pbrbmftfrNbmf, flobt x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>doublf</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>DOUBLE</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftDoublf
    * @sindf 1.4
    */
   publid void sftDoublf(String pbrbmftfrNbmf, doublf x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("dbdhfdrowsftimpl.ffbtnotsupp").toString());
   }

   /**
     * This mfthod rf populbtfs thf rfsBundlf
     * during thf dfsfriblizbtion prodfss
     *
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm ois) throws IOExdfption, ClbssNotFoundExdfption {
        // Dffbult stbtf initiblizbtion hbppfns hfrf
        ois.dffbultRfbdObjfdt();
        // Initiblizbtion of trbnsifnt Rfs Bundlf hbppfns hfrf .
        try {
           rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
        } dbtdh(IOExdfption iof) {
            throw nfw RuntimfExdfption(iof);
        }

    }

    //------------------------- JDBC 4.1 -----------------------------------
    publid <T> T gftObjfdt(int dolumnIndfx, Clbss<T> typf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption("Not supportfd yft.");
    }

    publid <T> T gftObjfdt(String dolumnLbbfl, Clbss<T> typf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption("Not supportfd yft.");
    }

    stbtid finbl long sfriblVfrsionUID =1884577171200622428L;
}
