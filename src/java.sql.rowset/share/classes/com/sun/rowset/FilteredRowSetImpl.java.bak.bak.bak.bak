/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.rowsft;

import jbvb.io.*;
import jbvb.util.*;
import jbvb.sql.*;
import jbvbx.sql.*;
import jbvb.mbth.*;

import jbvbx.sql.rowsft.*;
import jbvbx.sql.rowsft.spi.*;
import jbvbx.sql.rowsft.sfribl.*;
import dom.sun.rowsft.providfrs.*;
import dom.sun.rowsft.intfrnbl.*;

/**
 * Thf stbndbrd implfmfntbtion of thf <dodf>FiltfrfdRowSft</dodf> intfrfbdf. Sff thf intfrfbdf
 * dffinition for full bfhbvior bnd implfmfntbtion rfquirfmfnts.
 *
 * @sff jbvbx.sql.rowsft.Prfdidbtf
 * @buthor Jonbthbn Brudf, Amit Hbndb
 */

publid dlbss FiltfrfdRowSftImpl fxtfnds WfbRowSftImpl implfmfnts Sfriblizbblf, Clonfbblf, FiltfrfdRowSft {

    privbtf Prfdidbtf p;

    privbtf boolfbn onInsfrtRow = fblsf;


    /**
     * Construdt b <dodf>FiltfrfdRowSft</dodf>
     */
    publid FiltfrfdRowSftImpl() throws SQLExdfption {
        supfr();
    }

    /**
     * Construdt b <dodf>FiltfrfdRowSft</dodf> with b spfdififd syndhronizbtion
     * providfr.
     *
     * @pbrbm fnv b Hbshtbblf dontbining b dfsirfd syndhdonizbtbtion providfr
     * nbmf-vbluf pbir.
     */
    @SupprfssWbrnings("rbwtypfs")
    publid FiltfrfdRowSftImpl(Hbshtbblf fnv) throws SQLExdfption {
        supfr(fnv);
    }

    /**
     * Apply thf prfdidbtf for this filtfr
     *
     * @pbrbm p bn implfmfntbtion of thf prfdidbtf intfrfbdf
     */
    publid void sftFiltfr(Prfdidbtf p) throws SQLExdfption {
        this.p = p;
    }

    /**
     * Rftrifvf thf filtfr bdtivf for this <dodf>FiltfrfdRowSft</dodf>
     *
     * @rfturn b <dodf>Prfdidbtf</dodf> objfdt instbndf
     */
    publid Prfdidbtf gftFiltfr() {
        rfturn this.p;
    }

    /**
     * Ovfr-riding <dodf>intfrnblNfxt()</dodf> implfmfntbtion. This mfthod
     * bpplifs thf filtfr on thf <dodf>RowSft</dodf> fbdh timf thf dursor is bdvbndfd or
     * mbnipulbtfd. It movfs thf dursor to thf nfxt row bddording to thf sft
     * prfdidbtf bnd rfturns <dodf>truf</dodf> if thf dursor is still within thf rowsft or
     * <dodf>fblsf</dodf> if thf dursor position is ovfr thf lbst row
     *
     * @rfturn truf if ovfr thf vblid row in thf rowsft; fblsf if ovfr thf lbst
     * row
     */
    protfdtfd boolfbn intfrnblNfxt() throws SQLExdfption {
        // CbdhfdRowSftImpl.nfxt() intfrnblly dblls
        // this(drs).intfrnblNfxt() NOTE: this holds drs objfdt
        // So whfn frs.nfxt() is dbllfd,
        // intfrnblly this(frs).intfrnblNfxt() will bf dbllfd
        // whidh will bf nothing but this mfthod.
        // bfdbusf this holds frs objfdt

        // kffp on doing supfr.intfrnblNfxt()
        // rbthfr thbn doing it ondf.


         // p.fvblubtf will hflp us in dhbnging thf dursor
         // bnd dhfdking thf nfxt vbluf by rfturning truf or fblsf.
         // to fit thf filtfr

         // So whilf() loop will hbvf b "rbndom dombinbtion" of
         // truf bnd fblsf rfturnfd dfpfnding upon thf rfdords
         // brf in or out of filtfr.
         // Wf nffd to trbvfrsf from prfsfnt dursorPos till fnd,
         // whfthfr truf or fblsf bnd dhfdk fbdh row for "filtfr"
         // "till wf gft b "truf"


         boolfbn bool = fblsf;

         for(int rows=this.gftRow(); rows<=this.sizf();rows++) {
             bool = supfr.intfrnblNfxt();

             if( !bool || p == null) {
               rfturn bool;
             }
             if(p.fvblubtf(this)){
                   brfbk;
             }

         }

       rfturn bool;
    }


    /**
     * Ovfr-riding <dodf>intfrnblPrfvious()</dodf> implfmfntbtion. This mfthod
     * bpplifs thf filtfr on thf <dodf>RowSft</dodf> fbdh timf thf dursor is movfd bbdkwbrd or
     * mbnipulbtfd. It movfs thf dursor to thf prfvious row bddording to thf sft
     * prfdidbtf bnd rfturns <dodf>truf</dodf> if thf dursor is still within thf rowsft or
     * <dodf>fblsf</dodf> if thf dursor position is ovfr thf lbst row
     *
     * @rfturn truf if ovfr thf vblid row in thf rowsft; fblsf if ovfr thf lbst
     * row
     */
    protfdtfd boolfbn intfrnblPrfvious() throws SQLExdfption {
         boolfbn bool = fblsf;
         // with prfvious movf bbdkwbrds,
         // i.f. from bny rfdord towbrds first rfdord

         for(int rows=this.gftRow(); rows>0;rows--) {

             bool = supfr.intfrnblPrfvious();

             if( p == null) {
               rfturn bool;
             }

             if(p.fvblubtf(this)){
                   brfbk;
             }

         }

       rfturn bool;
    }


    /**
     * Ovfr-riding <dodf>intfrnblFirst()</dodf> implfmfntbtion. This mfthod
     * bpplifs thf filtfr on thf <dodf>RowSft</dodf> fbdh timf thf dursor is movfd to first
     * row. It movfs thf dursor to thf first row bddording to thf sft
     * prfdidbtf bnd rfturns <dodf>truf</dodf> if thf dursor is still within thf rowsft or
     * <dodf>fblsf</dodf> if thf dursor position is ovfr thf lbst row
     *
     * @rfturn truf if ovfr thf vblid row in thf rowsft; fblsf if ovfr thf lbst
     * row
     */
    protfdtfd boolfbn intfrnblFirst() throws SQLExdfption {

        // from first till prfsfnt dursor position(go forwbrd),
        // find thf bdtubl first whidh mbtdhfs thf filtfr.

         boolfbn bool = supfr.intfrnblFirst();

         if( p == null) {
               rfturn bool;
             }

         whilf(bool) {

             if(p.fvblubtf(this)){
                   brfbk;
             }
        bool = supfr.intfrnblNfxt();
        }
     rfturn bool;
    }


    /**
     * Ovfr-riding <dodf>intfrnblLbst()</dodf> implfmfntbtion. This mfthod
     * bpplifs thf filtfr on thf <dodf>RowSft</dodf> fbdh timf thf dursor is movfd to
     * lbst row. It movfs thf dursor to thf lbst row bddording to thf sft
     * prfdidbtf bnd rfturns <dodf>truf</dodf> if thf dursor is still within thf rowsft or
     * <dodf>fblsf</dodf> if thf dursor position is ovfr thf lbst row
     *
     * @rfturn truf if ovfr thf vblid row in thf rowsft; fblsf if ovfr thf lbst
     * row
     */
    protfdtfd boolfbn intfrnblLbst() throws SQLExdfption {
        // from lbst to thf prfsfnt dursor position(go bbdkwbrd),
        // find thf bdtubl lbst whidh mbtdhfs thf filtfr.

         boolfbn bool = supfr.intfrnblLbst();

         if( p == null) {
               rfturn bool;
             }

         whilf(bool) {

             if(p.fvblubtf(this)){
                   brfbk;
             }

        bool = supfr.intfrnblPrfvious();

        }
     rfturn bool;

   } // fnd intfrnblLbst()
   /**
     * Movfs thf dursor thf spfdififd numbfr of rows from thf durrfnt
     * position, with b positivf numbfr moving it forwbrd bnd b
     * nfgbtivf numbfr moving it bbdkwbrd.
     * <P>
     * If thf numbfr is positivf, thf dursor movfs thf spfdififd numbfr of
     * rows towbrd thf fnd of thf rowsft, stbrting bt thf durrfnt row.
     * For fxbmplf, thf following dommbnd, in whidh
     * <dodf>drs</dodf> is b <dodf>CbdhfdRowSftImpl</dodf> objfdt with 100 rows,
     * movfs thf dursor forwbrd four rows from thf durrfnt row.  If thf
     * durrfnt row is 50, thf dursor would movf to row 54.
     * <PRE><dodf>
     *
     *    drs.rflbtivf(4);
     *
     * </dodf> </PRE>
     * <P>
     * If thf numbfr is nfgbtivf, thf dursor movfs bbdk towbrd thf bfginning
     * thf spfdififd numbfr of rows, stbrting bt thf durrfnt row.
     * For fxbmplf, dblling thf mfthod
     * <dodf>bbsolutf(-1)</dodf> positions thf dursor on thf lbst row,
     * <dodf>bbsolutf(-2)</dodf> movfs it on thf nfxt-to-lbst row, bnd so on.
     * If thf <dodf>CbdhfdRowSftImpl</dodf> objfdt <dodf>drs</dodf> hbs fivf rows,
     * thf following dommbnd movfs thf dursor to thf fourth-to-lbst row, whidh
     * in thf dbsf of b  rowsft with fivf rows, is blso thf sfdond row
     * from thf bfginning.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(-4);
     *
     * </dodf> </PRE>
     *
     * If thf numbfr spfdififd is lbrgfr thbn thf numbfr of rows, thf dursor
     * will movf to thf position bftfr thf lbst row. If thf numbfr spfdififd
     * would movf thf dursor onf or morf rows bfforf thf first row, thf dursor
     * movfs to thf position bfforf thf first row. In both dbsfs, this mfthod
     * throws bn <dodf>SQLExdfption</dodf>.
     * <P>
     * Notf: Cblling <dodf>bbsolutf(1)</dodf> is thf sbmf bs dblling thf
     * mfthod <dodf>first()</dodf>.  Cblling <dodf>bbsolutf(-1)</dodf> is thf
     * sbmf bs dblling <dodf>lbst()</dodf>.  Cblling <dodf>rflbtivf(0)</dodf>
     * is vblid, but it dofs not dhbngf thf dursor position.
     *
     * @pbrbm rows bn <dodf>int</dodf> indidbting thf numbfr of rows to movf
     *             thf dursor, stbrting bt thf durrfnt row; b positivf numbfr
     *             movfs thf dursor forwbrd; b nfgbtivf numbfr movfs thf dursor
     *             bbdkwbrd; must not movf thf dursor pbst thf vblid
     *             rows
     * @rfturn <dodf>truf</dodf> if thf dursor is on b row in this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt; <dodf>fblsf</dodf>
     *         othfrwisf
     * @throws SQLExdfption if thf rowsft is typf <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
   publid boolfbn rflbtivf(int rows) throws SQLExdfption {

      boolfbn rftvbl;
      boolfbn bool = fblsf;
      boolfbn boolvbl = fblsf;

      if(gftTypf() == RfsultSft.TYPE_FORWARD_ONLY) {
         throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.rflbtivf").toString());
      }

      if( rows > 0 ) {

         int i = 0;
         whilf( i < (rows)) {

            if( isAftfrLbst() ) {
               rfturn fblsf;
            }
            bool = intfrnblNfxt();
            i++;
         }

         rftvbl = bool;
      } flsf {
         int j = rows;
         whilf( (j) < 0 ) {

           if( isBfforfFirst() ) {
              rfturn fblsf;
           }
           boolvbl = intfrnblPrfvious();
           j++;
         }
         rftvbl = boolvbl;
      }
      if(rows != 0)
          notifyCursorMovfd();
      rfturn rftvbl;
   }

   /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf row numbfr
     * spfdififd.
     *
     * <p>If thf numbfr is positivf, thf dursor movfs to bn bbsolutf row with
     * rfspfdt to thf bfginning of thf rowsft.  Thf first row is row 1, thf sfdond
     * is row 2, bnd so on.  For fxbmplf, thf following dommbnd, in whidh
     * <dodf>drs</dodf> is b <dodf>CbdhfdRowSftImpl</dodf> objfdt, movfs thf dursor
     * to thf fourth row, stbrting from thf bfginning of thf rowsft.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(4);
     *
     * </dodf> </PRE>
     * <P>
     * If thf numbfr is nfgbtivf, thf dursor movfs to bn bbsolutf row position
     * with rfspfdt to thf fnd of thf rowsft.  For fxbmplf, dblling
     * <dodf>bbsolutf(-1)</dodf> positions thf dursor on thf lbst row,
     * <dodf>bbsolutf(-2)</dodf> movfs it on thf nfxt-to-lbst row, bnd so on.
     * If thf <dodf>CbdhfdRowSftImpl</dodf> objfdt <dodf>drs</dodf> hbs fivf rows,
     * thf following dommbnd movfs thf dursor to thf fourth-to-lbst row, whidh
     * in thf dbsf of b  rowsft with fivf rows, is blso thf sfdond row, dounting
     * from thf bfginning.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(-4);
     *
     * </dodf> </PRE>
     *
     * If thf numbfr spfdififd is lbrgfr thbn thf numbfr of rows, thf dursor
     * will movf to thf position bftfr thf lbst row. If thf numbfr spfdififd
     * would movf thf dursor onf or morf rows bfforf thf first row, thf dursor
     * movfs to thf position bfforf thf first row.
     * <P>
     * Notf: Cblling <dodf>bbsolutf(1)</dodf> is thf sbmf bs dblling thf
     * mfthod <dodf>first()</dodf>.  Cblling <dodf>bbsolutf(-1)</dodf> is thf
     * sbmf bs dblling <dodf>lbst()</dodf>.
     *
     * @pbrbm rows b positivf numbfr to indidbtf thf row, stbrting row numbfring from
     *        thf first row, whidh is <dodf>1</dodf>; b nfgbtivf numbfr to indidbtf
     *        thf row, stbrting row numbfring from thf lbst row, whidh is
     *        <dodf>-1</dodf>; it must not bf <dodf>0</dodf>
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf rowsft; <dodf>fblsf</dodf>
     *         othfrwisf
     * @throws SQLExdfption if thf givfn dursor position is <dodf>0</dodf> or thf
     *            typf of this rowsft is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn bbsolutf(int rows) throws SQLExdfption {

      boolfbn rftvbl;
      boolfbn bool = fblsf;

      if(rows == 0 || gftTypf() == RfsultSft.TYPE_FORWARD_ONLY) {
         throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.bbsolutf").toString());
      }

      if (rows > 0) {
         bool = intfrnblFirst();

         int i = 0;
         whilf(i < (rows-1)) {
            if( isAftfrLbst() ) {
               rfturn fblsf;
            }
            bool = intfrnblNfxt();
            i++;
         }
         rftvbl = bool;
      } flsf {
         bool = intfrnblLbst();

         int j = rows;
         whilf((j+1) < 0 ) {
            if( isBfforfFirst() ) {
               rfturn fblsf;
            }
            bool = intfrnblPrfvious();
            j++;
         }
         rftvbl = bool;
      }
      notifyCursorMovfd();
      rfturn rftvbl;
   }

   /**
     * Movfs thf dursor for this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * to thf insfrt row.  Thf durrfnt row in thf rowsft is rfmfmbfrfd
     * whilf thf dursor is on thf insfrt row.
     * <P>
     * Thf insfrt row is b spfdibl row bssodibtfd with bn updbtbblf
     * rowsft.  It is fssfntiblly b bufffr whfrf b nfw row mby
     * bf donstrudtfd by dblling thf bppropribtf <dodf>updbtfXXX</dodf>
     * mfthods to bssign b vbluf to fbdh dolumn in thf row.  A domplftf
     * row must bf donstrudtfd; thbt is, fvfry dolumn thbt is not nullbblf
     * must bf bssignfd b vbluf.  In ordfr for thf nfw row to bfdomf pbrt
     * of this rowsft, thf mfthod <dodf>insfrtRow</dodf> must bf dbllfd
     * bfforf thf dursor is movfd bbdk to thf rowsft.
     * <P>
     * Only dfrtbin mfthods mby bf invokfd whilf thf dursor is on thf insfrt
     * row; mbny mfthods throw bn fxdfption if thfy brf dbllfd whilf thf
     * dursor is thfrf.  In bddition to thf <dodf>updbtfXXX</dodf>
     * bnd <dodf>insfrtRow</dodf> mfthods, only thf <dodf>gftXXX</dodf> mfthods
     * mby bf dbllfd whfn thf dursor is on thf insfrt row.  A <dodf>gftXXX</dodf>
     * mfthod should bf dbllfd on b dolumn only bftfr bn <dodf>updbtfXXX</dodf>
     * mfthod hbs bffn dbllfd on thbt dolumn; othfrwisf, thf vbluf rfturnfd is
     * undftfrminfd.
     *
     * @throws SQLExdfption if this <dodf>CbdhfdRowSftImpl</dodf> objfdt is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void movfToInsfrtRow() throws SQLExdfption {

      onInsfrtRow = truf;
      supfr.movfToInsfrtRow();
   }

   /**
     * This is fxplbnbtion for thf ovfrriding of thf updbtfXXX fundtions.
     * Thfsf fundtions hbvf bffn ovfrridfn to fnsurf thbt only dorrfdt
     * vblufs thbt pbss thf dritfrib for thf filtfr brf bdtbully insfrtfd.
     * Thf fvblubtion of whfthfr b pbrtidulbr vbluf pbssfs thf dritfrib
     * of thf filtfr is donf using thf fvblubtf fundtion in thf Prfdidbtf
     * intfrfbdf.
     *
     * Thf dhfdking dbn will donf in thf fvblubtf fundtion whidh is implfmfntfd
     * in thf dlbss thbt implfmfnts thf Prfdidbtf intfrfbdf. So thf dhfdking
     * dbn vbry from onf implfmfntbtion to bnothfr.
     *
     * Somf bdditionbl points hfrf on thf following:
     * 1. updbtfBytfs()     - sindf thf fvblubtf fundtion tbkfs Objfdt bs pbrbmftfr
     *                        b String is donstrudtfd from thf bytf brrby bnd would
     *                        pbssfd to thf fvblubtf fundtion.
     * 2. updbtfXXXstrfbm() - hfrf it would suffidf to pbss thf strfbm hbndlf
     *                        to thf fvblubtf fundtion bnd thf implfmfntbtion
     *                        of thf fvblubtf fundtion dbn do thf dompbrision
     *                        bbsfd on thf strfbm bnd blso typf of dbtb.
     */


   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>int</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfInt(int dolumnIndfx , int x) throws SQLExdfption {

     boolfbn bool;

     if(onInsfrtRow) {
        if(p != null) {
           bool = p.fvblubtf(Intfgfr.vblufOf(x),dolumnIndfx);

           if(!bool) {
              throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
           }
        }
     }

     supfr.updbtfInt(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>int</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfInt(String dolumnNbmf , int x) throws SQLExdfption {

       this.updbtfInt(findColumn(dolumnNbmf), x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>boolfbn</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfBoolfbn(int dolumnIndfx, boolfbn x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
            bool = p.fvblubtf(Boolfbn.vblufOf(x) , dolumnIndfx);

            if(!bool) {
               throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
            }
         }
      }

      supfr.updbtfBoolfbn(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>boolfbn</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfBoolfbn(String dolumnNbmf , boolfbn x) throws SQLExdfption {

      this.updbtfBoolfbn(findColumn(dolumnNbmf),x);
   }



    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfBytf(int dolumnIndfx , bytf x) throws SQLExdfption {
      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
            bool = p.fvblubtf(Bytf.vblufOf(x),dolumnIndfx);

            if(!bool) {
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
            }
          }
      }

      supfr.updbtfBytf(dolumnIndfx,x);
   }


   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfBytf(String dolumnNbmf , bytf x) throws SQLExdfption {

      this.updbtfBytf(findColumn(dolumnNbmf),x);
   }


   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>short</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfShort( int dolumnIndfx , short x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
            bool = p.fvblubtf(Short.vblufOf(x), dolumnIndfx);

            if(!bool) {
               throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
            }
          }
      }

      supfr.updbtfShort(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>short</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfShort( String dolumnNbmf , short x) throws SQLExdfption {

      this.updbtfShort(findColumn(dolumnNbmf),x);
   }


   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>long</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfLong(int dolumnIndfx , long x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
            bool = p.fvblubtf(Long.vblufOf(x), dolumnIndfx);

            if(!bool) {
               throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
            }
          }
      }

      supfr.updbtfLong(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>long</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfLong( String dolumnNbmf , long x) throws SQLExdfption {

      this.updbtfLong(findColumn(dolumnNbmf) , x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>flobt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfFlobt(int dolumnIndfx , flobt x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
            bool = p.fvblubtf(Flobt.vblufOf(x), dolumnIndfx);

            if(!bool) {
               throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
            }
          }
      }

      supfr.updbtfFlobt(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>flobt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfFlobt(String dolumnNbmf , flobt x) throws SQLExdfption {

      this.updbtfFlobt(findColumn(dolumnNbmf),x);
   }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfDoublf(int dolumnIndfx , doublf x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
            bool = p.fvblubtf(Doublf.vblufOf(x) , dolumnIndfx);

            if(!bool) {
               throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
            }
          }
      }

      supfr.updbtfDoublf(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfDoublf(String dolumnNbmf , doublf x) throws SQLExdfption {

      this.updbtfDoublf(findColumn(dolumnNbmf),x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfBigDfdimbl(int dolumnIndfx , BigDfdimbl x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
            bool = p.fvblubtf(x,dolumnIndfx);

            if(!bool) {
               throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
            }
          }
      }

      supfr.updbtfBigDfdimbl(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfBigDfdimbl(String dolumnNbmf , BigDfdimbl x) throws SQLExdfption {

      this.updbtfBigDfdimbl(findColumn(dolumnNbmf),x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>String</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to mbrk thf row bs updbtfd.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd to insfrt thf nfw row into this rowsft bnd mbrk it
     * bs insfrtfd. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     * <P>
     * Thf mfthod <dodf>bddfptChbngfs</dodf> must bf dbllfd if thf
     * updbtfd vblufs brf to bf writtfn bbdk to thf undfrlying dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfString(int dolumnIndfx , String x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
           bool = p.fvblubtf(x,dolumnIndfx);

           if(!bool) {
              throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
           }
         }
      }

      supfr.updbtfString(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>String</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfString(String dolumnNbmf , String x) throws SQLExdfption {

      this.updbtfString(findColumn(dolumnNbmf),x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> brrby.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfBytfs(int dolumnIndfx , bytf []x) throws SQLExdfption {

      boolfbn bool;
      String vbl = "";

      Bytf [] obj_brr = nfw Bytf[x.lfngth];

      for(int i = 0; i < x.lfngth; i++) {
         obj_brr[i] = Bytf.vblufOf(x[i]);
         vbl = vbl.dondbt(obj_brr[i].toString());
     }


      if(onInsfrtRow) {
         if(p != null) {
             bool = p.fvblubtf(vbl,dolumnIndfx);

             if(!bool) {
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
             }
         }
      }

      supfr.updbtfBytfs(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> brrby.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfBytfs(String dolumnNbmf , bytf []x) throws SQLExdfption {

      this.updbtfBytfs(findColumn(dolumnNbmf),x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Dbtf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>DATE</dodf> or <dodf>TIMESTAMP</dodf>, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfDbtf(int dolumnIndfx , jbvb.sql.Dbtf x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
             bool = p.fvblubtf(x,dolumnIndfx);

             if(!bool) {
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
             }
         }
      }

      supfr.updbtfDbtf(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Dbtf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfDbtf(String dolumnNbmf , jbvb.sql.Dbtf x) throws SQLExdfption {

      this.updbtfDbtf(findColumn(dolumnNbmf),x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>TIME</dodf> or <dodf>TIMESTAMP</dodf>, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfTimf(int dolumnIndfx , Timf x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
             bool = p.fvblubtf(x, dolumnIndfx);

             if(!bool) {
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
             }
         }
      }

      supfr.updbtfTimf(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfTimf(String dolumnNbmf , Timf x) throws SQLExdfption {

      this.updbtfTimf(findColumn(dolumnNbmf),x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timfstbmp</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>DATE</dodf>, <dodf>TIME</dodf>, or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfTimfstbmp(int dolumnIndfx , Timfstbmp x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
             bool = p.fvblubtf(x,dolumnIndfx);

             if(!bool) {
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
             }
         }
      }

      supfr.updbtfTimfstbmp(dolumnIndfx,x);
   }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timfstbmp</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds or
     *            thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>DATE</dodf>,
     *            <dodf>TIME</dodf>, or <dodf>TIMESTAMP</dodf>, or (4) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfTimfstbmp(String dolumnNbmf , Timfstbmp x) throws SQLExdfption {

      this.updbtfTimfstbmp(findColumn(dolumnNbmf),x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * ASCII strfbm vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf numbfr of onf-bytf ASCII dhbrbdtfrs in thf strfbm
     * @throws SQLExdfption if this mfthod is invokfd
     */
   publid void updbtfAsdiiStrfbm(int dolumnIndfx , jbvb.io.InputStrfbm x ,int lfngth) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
             bool = p.fvblubtf(x,dolumnIndfx);

             if(!bool) {
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
             }
         }
      }

      supfr.updbtfAsdiiStrfbm(dolumnIndfx,x,lfngth);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * ASCII strfbm vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf numbfr of onf-bytf ASCII dhbrbdtfrs in thf strfbm
     */
   publid void updbtfAsdiiStrfbm(String dolumnNbmf , jbvb.io.InputStrfbm x , int lfngth) throws SQLExdfption {

      this.updbtfAsdiiStrfbm(findColumn(dolumnNbmf),x,lfngth);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.Rfbdfr</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>,
     *          <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>, <dodf>VARCHAR</dodf>,
     *          or <dodf>LONGVARCHAR</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in dhbrbdtfrs
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf dbtb in thf strfbm is not b binbry or
     *            dhbrbdtfr typf, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfChbrbdtfrStrfbm(int dolumnIndfx , jbvb.io.Rfbdfr x , int lfngth) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
             bool = p.fvblubtf(x,dolumnIndfx);

             if(!bool) {
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
             }
         }
      }

      supfr.updbtfChbrbdtfrStrfbm(dolumnIndfx,x,lfngth);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm rfbdfr thf nfw dolumn vbluf; must bf b
     * <dodf>jbvb.io.Rfbdfr</dodf> dontbining <dodf>BINARY</dodf>,
     * <dodf>VARBINARY</dodf>, <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>,
     * <dodf>VARCHAR</dodf>, or <dodf>LONGVARCHAR</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in dhbrbdtfrs
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf dbtb
     *            in thf strfbm is not b binbry or dhbrbdtfr typf, or (4) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfChbrbdtfrStrfbm(String dolumnNbmf , jbvb.io.Rfbdfr rfbdfr, int lfngth) throws SQLExdfption {
      this.updbtfChbrbdtfrStrfbm(findColumn(dolumnNbmf), rfbdfr, lfngth);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.InputStrfbm</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>, or
     *          <dodf>LONGVARBINARY</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in bytfs
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf dbtb in thf strfbm is not binbry, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfBinbryStrfbm(int dolumnIndfx , jbvb.io.InputStrfbm x , int lfngth) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
             bool = p.fvblubtf(x,dolumnIndfx);

             if(!bool) {
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
             }
         }
      }

      supfr.updbtfBinbryStrfbm(dolumnIndfx,x,lfngth);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.InputStrfbm</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>, or
     *          <dodf>LONGVARBINARY</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in bytfs
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf dbtb
     *            in thf strfbm is not binbry, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfBinbryStrfbm(String dolumnNbmf , jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {

      this.updbtfBinbryStrfbm(findColumn(dolumnNbmf),x,lfngth);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfObjfdt(int dolumnIndfx , Objfdt x) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
             bool = p.fvblubtf(x,dolumnIndfx);

             if(!bool) {
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
             }
         }
      }

      supfr.updbtfObjfdt(dolumnIndfx,x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfObjfdt(String dolumnNbmf , Objfdt x) throws SQLExdfption {

      this.updbtfObjfdt(findColumn(dolumnNbmf),x);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.  Thf <dodf>sdblf</dodf> pbrbmftfr indidbtfs
     * thf numbfr of digits to thf right of thf dfdimbl point bnd is ignorfd
     * if thf nfw dolumn vbluf is not b typf thbt will bf mbppfd to bn SQL
     * <dodf>DECIMAL</dodf> or <dodf>NUMERIC</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point (for
     *              <dodf>DECIMAL</dodf> bnd <dodf>NUMERIC</dodf> typfs only)
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfObjfdt(int dolumnIndfx , Objfdt x , int sdblf) throws SQLExdfption {

      boolfbn bool;

      if(onInsfrtRow) {
         if(p != null) {
             bool = p.fvblubtf(x,dolumnIndfx);

             if(!bool) {
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("filtfrfdrowsftimpl.notbllowfd").toString());
             }
         }
      }

      supfr.updbtfObjfdt(dolumnIndfx,x,sdblf);
   }

   /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.  Thf <dodf>sdblf</dodf> pbrbmftfr
     * indidbtfs thf numbfr of digits to thf right of thf dfdimbl point
     * bnd is ignorfd if thf nfw dolumn vbluf is not b typf thbt will bf
     *  mbppfd to bn SQL <dodf>DECIMAL</dodf> or <dodf>NUMERIC</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point (for
     *              <dodf>DECIMAL</dodf> bnd <dodf>NUMERIC</dodf> typfs only)
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void updbtfObjfdt(String dolumnNbmf , Objfdt x, int sdblf) throws SQLExdfption {

      this.updbtfObjfdt(findColumn(dolumnNbmf),x,sdblf);
   }

   /**
     * Insfrts thf dontfnts of this <dodf>CbdhfdRowSftImpl</dodf> objfdt's insfrt
     * row into this rowsft immfdibtfly following thf durrfnt row.
     * If thf durrfnt row is thf
     * position bftfr thf lbst row or bfforf thf first row, thf nfw row will
     * bf insfrtfd bt thf fnd of thf rowsft.  This mfthod blso notififs
     * listfnfrs rfgistfrfd with this rowsft thbt thf row hbs dhbngfd.
     * <P>
     * Thf dursor must bf on thf insfrt row whfn this mfthod is dbllfd.
     *
     * @throws SQLExdfption if (1) thf dursor is not on thf insfrt row,
     *            (2) onf or morf of thf non-nullbblf dolumns in thf insfrt
     *            row hbs not bffn givfn b vbluf, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
   publid void insfrtRow() throws SQLExdfption {

      onInsfrtRow = fblsf;
      supfr.insfrtRow();
   }

   /**
    * This mfthod rf populbtfs thf rfsBundlf
    * during thf dfsfriblizbtion prodfss
    *
    */
   privbtf void rfbdObjfdt(ObjfdtInputStrfbm ois) throws IOExdfption, ClbssNotFoundExdfption {
       // Dffbult stbtf initiblizbtion hbppfns hfrf
       ois.dffbultRfbdObjfdt();
       // Initiblizbtion of trbnsifnt Rfs Bundlf hbppfns hfrf .
       try {
          rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
       } dbtdh(IOExdfption iof) {
           throw nfw RuntimfExdfption(iof);
       }

   }

   stbtid finbl long sfriblVfrsionUID = 6178454588413509360L;
} // fnd FiltfrfdRowSftImpl dlbss
