/*
 * Copyright (d) 2004, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.rowsft.intfrnbl;

import jbvb.sql.*;
import jbvbx.sql.*;
import jbvb.util.*;
import jbvb.mbth.BigDfdimbl;

import jbvbx.sql.rowsft.*;
import jbvbx.sql.rowsft.spi.*;

import dom.sun.rowsft.*;
import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputStrfbm;

/**
 * Thfrf will bf two sfts of dbtb whidh will bf mbintbinfd by thf rowsft bt thf
 * timf of syndhronizbtion. Thf <dodf>SyndProvidfr</dodf> will utilizf thf
 * <dodf>SyndRfsolvfr</dodf> to syndhronizf thf dhbngfs bbdk to dbtbbbsf.
 */
publid dlbss SyndRfsolvfrImpl fxtfnds CbdhfdRowSftImpl implfmfnts SyndRfsolvfr {
    /**
     * This CbdhfdRowSft objfdt will fndbpsulbtf b rowsft
     * whidh will bf synd'fd with thf dbtbsourdf but will
     * dontbin vblufs in rows whfrf thfrf is donflidt.
     * For rows othfr thbn donflidt, it will *not* dontbin
     * bny dbtb. For rows dontbining donflidt it will
     * rfturn fithfr of thf thrff vblufs sft by SyndRfsolvfr.*_CONFLICT
     * from gftStbtus()
     */
    privbtf CbdhfdRowSftImpl drsRfs;

    /**
     * This is thf bdtubl CbdhfdRowSft objfdt
     * whidh is bfing syndhronizfd bbdk to
     * dbtbsourdf.
     */
    privbtf CbdhfdRowSftImpl drsSynd;

    /**
     *  This ArrbyList will dontbin thf stbtus of b row
     *  from thf SyndRfsolvfr.* vblufs flsf it will bf null.
     */
    privbtf ArrbyList<?> stbts;

    /**
     * Thf RowSftWritfr bssodibtfd with thf originbl
     * CbdhfdRowSft objfdt whidh is bfing syndhronizfd.
     */
    privbtf CbdhfdRowSftWritfr drw;

    /**
     * Row numbfr idfntififr
     */
    privbtf int rowStbtus;

    /**
     * This will dontbin thf sizf of thf <dodf>CbdhfdRowSft</dodf> objfdt
     */
    privbtf int sz;

    /**
     * Thf <dodf>Connfdtion</dodf> hbndlf usfd to syndhronizf thf dhbngfs
     * bbdk to dbtbsourdf. This is thf sbmf donnfdtion hbndlf bs wbs pbssfd
     * to thf CbdhfdRowSft whilf fftdhing thf dbtb.
     */
    privbtf trbnsifnt Connfdtion don;

    /**
     * Thf <dodf>CbdhfdRowSft</dodf> objfdt whidh will fndbpsulbtf
     * b row bt bny timf. This will bf built from CbdhfdRowSft bnd
     * SyndRfsolvfr vblufs. Syndhronizbtion tbkfs plbdf on b row by
     * row bbsis fndbpsulbtfd bs b CbhfdRowSft.
     */
    privbtf CbdhfdRowSft row;

    privbtf JdbdRowSftRfsourdfBundlf rfsBundlf;

    /**
     * Publid donstrudtor
     */
    publid SyndRfsolvfrImpl() throws SQLExdfption {
        try {
            drsSynd = nfw CbdhfdRowSftImpl();
            drsRfs = nfw CbdhfdRowSftImpl();
            drw = nfw CbdhfdRowSftWritfr();
            row = nfw CbdhfdRowSftImpl();
            rowStbtus = 1;
            try {
                rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
            } dbtdh(IOExdfption iof) {
                throw nfw RuntimfExdfption(iof);
            }

        } dbtdh(SQLExdfption sqlf) {
        }
     }


    /**
     * Rftrifvfs thf donflidt stbtus of thf durrfnt row of this
     * <dodf>SyndRfsolvfr</dodf>, whidh indidbtfs thf opfrbtionthf <dodf>RowSft</dodf>
     * objfdt wbs bttfmpting whfn thf donflidt oddurrfd.
     *
     * @rfturn onf of thf following donstbnts:
     *         <dodf>SyndRfsolvfr.UPDATE_ROW_CONFLICT</dodf>,
     *         <dodf>SyndRfsolvfr.DELETE_ROW_CONFLICT</dodf>, or
     *         <dodf>SyndRfsolvfr.INSERT_ROW_CONFLICT</dodf>
     */
    publid int gftStbtus() {
        rfturn ((Intfgfr)stbts.gft(rowStbtus-1)).intVbluf();
    }

    /**
     * Rftrifvfs thf vbluf in thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>SyndRfsolvfr</dodf> objfdt, whidh is thf vbluf thbt dbusfd b donflidt.
     *
     * @pbrbm indfx <dodf>int</dodf> dfsignbting thf dolumn in this row of this
     *        <dodf>SyndRfsolvfr</dodf> objfdt from whidh to rftrifvf thf vbluf
     *        dbusing b donflidt
     */
    publid Objfdt gftConflidtVbluf(int indfx) throws SQLExdfption {
        try {
             rfturn drsRfs.gftObjfdt(indfx);
        } dbtdh(SQLExdfption sqlf) {
            throw nfw SQLExdfption(sqlf.gftMfssbgf());
        }
    }

    /**
     * Rftrifvfs thf vbluf in thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>SyndRfsolvfr</dodf> objfdt, whidh is thf vbluf thbt dbusfd b donflidt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt dfsignbting thf dolumn in this row of this
     *        <dodf>SyndRfsolvfr</dodf> objfdt from whidh to rftrifvf thf vbluf
     *        dbusing b donflidt
     */
    publid Objfdt gftConflidtVbluf(String dolumnNbmf) throws SQLExdfption {
        try {
             rfturn drsRfs.gftObjfdt(dolumnNbmf);
        } dbtdh(SQLExdfption sqlf) {
             throw nfw SQLExdfption(sqlf.gftMfssbgf());
        }
    }

    /**
     * Sfts <i>obj</i> bs thf vbluf in dolumn <i>indfx</i> in thf durrfnt row of thf
     * <dodf>RowSft</dodf> objfdt. This vbluf is thf rfsolvfd vbluf thbt is to bf
     * pfrsistfd in thf dbtb sourdf.
     *
     * @pbrbm indfx bn <dodf>int</dodf> giving thf numbfr of thf dolumn into whidh to
     *        sft thf vbluf to bf pfrsistfd
     * @pbrbm obj bn <dodf>Objfdt</dodf> thbt is thf vbluf to bf sft in thf dbtb sourdf
     */
    publid void sftRfsolvfdVbluf(int indfx, Objfdt obj) throws SQLExdfption {
        // modify mfthod to throw SQLExdfption in spfd

        /**
         * Whfn b vbluf is rfsolvfd propfrly mbkf it to null
         * insidf drsRfs for thbt dolumn.
         *
         * For morf thbn onf donflidts in thf row,
         * dhfdk for thf lbst rfsolvfd vbluf of thf durrfnt row
         * (Notf: it dbn bf rfsolvfd rbndomly for sbmf row)
         * thfn synd bbdk immfdibtfly.
         **/
        try {
            // dhfdk whfthfr thf indfx is in rbngf
            if(indfx<=0 || indfx > drsSynd.gftMftbDbtb().gftColumnCount() ) {
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("syndrsimpl.indfxvbl").toString()+ indfx);
            }
             // dhfdk whfthfr indfx dol is in donflidt
            if(drsRfs.gftObjfdt(indfx) == null) {
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("syndrsimpl.nodonflidt").toString());
            }
        } dbtdh (SQLExdfption sqlf) {
            // modify mfthod to throw for SQLExdfption
            throw nfw SQLExdfption(sqlf.gftMfssbgf());
        }
        try {
             boolfbn bool = truf;
             /** Chfdk rfsolvfd vbluf to bf fithfr of donflidt
               * or in rowsft flsf throw sql fxdfption.
               * If wf bllow b vbluf othfr thbn thbt in CbdhfdRowSft or
               * dbtbsourdf wf will fnd up in looping thf loop of fxdfptions.
              **/

             if( ((drsSynd.gftObjfdt(indfx)).toString()).fqubls(obj.toString()) ||
                     ((drsRfs.gftObjfdt(indfx)).toString()).fqubls(obj.toString()) ) {

                /**
                 * Chfdk whfthfr this is thf only donflidt in thf row.
                 * If yfs, syndhronizf this row bbdk
                 * whidh hbs bffn rfsolvfd, flsf wbit
                 * for bll donflidts of durrfnt row to bf rfsolvfd
                 *
                 * Stfp 1: Updbtf drsRfs bnd mbkf thf indfx dol bs null
                 * i.f. rfsolvfd
                 * drsRfs.updbtfObjfdt(indfx, obj);
                 **/
                  drsRfs.updbtfNull(indfx);
                  drsRfs.updbtfRow();

                 /**
                  * Stfp 2: Chbngf thf vbluf in thf CbdhfdRowSftImpl objfdt
                  * drsSynd.updbtfObjfdt(indfx, obj);
                  * drsSynd.updbtfRow();
                  **/
                 if(row.sizf() != 1) {
                    row = buildCbdhfdRow();
                 }

                 row.updbtfObjfdt(indfx, obj);
                 row.updbtfRow();

                 for(int j=1; j < drsRfs.gftMftbDbtb().gftColumnCount(); j++) {
                     if(drsRfs.gftObjfdt(j) != null) {
                        bool = fblsf;
                        brfbk;
                         // brfbk out of loop bnd wbit for othfr dols
                         // in sbmf row to gft rfsolvfd
                     } //fnd if

                  } //fnd for

                  if(bool) {
                     /**
                      * synd dbtb bbdk using CbdhfdRowSftWritfr
                      * donstrudt thf prfsfnt row bnd pbss it to thf writfr
                      * to writf bbdk to db.
                      **/
                     try {
                           /**
                            * Notf : Thf usf of CbdhfdRowSftWritfr to gft *sbmf* Connfdtion hbndlf.
                            * Thf CbdhfdRowSftWritfr usfs thf donnfdtion hbndlf
                            * from thf rfbdfr, Hfndf will usf thf sbmf donnfdtion hbndlf
                            * bs of originbl CbdhfdRowSftImpl
                            **/

                          writfDbtb(row);

                          //drw.writfDbtb( (RowSftIntfrnbl)drsRow);
                          //Systfm.out.printlnt.println("12");

                     } dbtdh(SyndProvidfrExdfption spf) {
                         /**
                          * This will oddur if db is not bllowing
                          * fvfn bftfr rfsolving thf donflidts
                          * duf to somf rfbsons.
                          * Also will prfvfnt from going into b loop of SPE's
                          **/
                         throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("syndrsimpl.syndnotpos").toString());
                     }
                  } //fnd if(bool)

             } flsf {
                 throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("syndrsimpl.vbltorfs").toString());
             } //fnd if (drs.gftObjfdt ...) blodk


        } dbtdh(SQLExdfption sqlf) {
           throw nfw SQLExdfption(sqlf.gftMfssbgf());
        }
    }

    /**
     * This pbssfs b CbdhfdRowSft bs b row thf thf CbdhfdRowSftWritfr
     * bftfr thf vblufs hbvf bffn rfsolvfd, bbdk to thf dbtbsourdf.
     *
     * @pbrbm row b <dodf>CbdhfdRowSft</dodf> objfdt whidh will hold thf
     *        vblufs of b pbrtidulbr row bftfr thfy hbvf bffn rfsolvfd by
     *        thf usfr to syndhronizf bbdk to dbtbsourdf.
     * @throws SQLExdfption if syndhronizbtion dofs not hbppfn propfrly
     *         mbybf bfbdusf <dodf>Connfdtion</dodf> hbs timfd out.
     **/
     privbtf void writfDbtb(CbdhfdRowSft row) throws SQLExdfption {
        drw.updbtfRfsolvfdConflidtToDB(row, drw.gftRfbdfr().donnfdt((RowSftIntfrnbl)drsSynd));
     }

    /**
     * This fundtion builds b row  bs b <dodf>CbdhfdRowSft</dodf> objfdt
     * whidh hbs bffn rfsolvfd bnd is rfbdy to bf syndhrinizfd to thf dbtbsourdf
     *
     * @throws SQLExdfption if thfrf is problfm in building
     *         thf mftbdbtb of thf row.
     **/
     privbtf CbdhfdRowSft buildCbdhfdRow() throws SQLExdfption {
       int iColCount;
       CbdhfdRowSftImpl drsRow = nfw CbdhfdRowSftImpl();

       RowSftMftbDbtbImpl rsmd = nfw RowSftMftbDbtbImpl();
       RowSftMftbDbtbImpl rsmdWritf = (RowSftMftbDbtbImpl)drsSynd.gftMftbDbtb();
       RowSftMftbDbtbImpl rsmdRow = nfw RowSftMftbDbtbImpl();

       iColCount = rsmdWritf.gftColumnCount();
       rsmdRow.sftColumnCount(iColCount);

       for(int i =1;i<=iColCount;i++) {
          rsmdRow.sftColumnTypf(i,rsmdWritf.gftColumnTypf(i));
          rsmdRow.sftColumnNbmf(i,rsmdWritf.gftColumnNbmf(i));
          rsmdRow.sftNullbblf(i,RfsultSftMftbDbtb.dolumnNullbblfUnknown);

          try {
             rsmdRow.sftCbtblogNbmf(i, rsmdWritf.gftCbtblogNbmf(i));
             rsmdRow.sftSdhfmbNbmf(i, rsmdWritf.gftSdhfmbNbmf(i));
          } dbtdh(SQLExdfption f) {
               f.printStbdkTrbdf();
          }
        } //fnd for

       drsRow.sftMftbDbtb(rsmdRow);

       drsRow.movfToInsfrtRow();

       for(int dol=1;dol<=drsSynd.gftMftbDbtb().gftColumnCount();dol++) {
           drsRow.updbtfObjfdt(dol, drsSynd.gftObjfdt(dol));
       }

       drsRow.insfrtRow();
       drsRow.movfToCurrfntRow();

       drsRow.bbsolutf(1);
       drsRow.sftOriginblRow();

      try {
          drsRow.sftUrl(drsSynd.gftUrl());
      } dbtdh(SQLExdfption sqlf) {

      }

      try {
          drsRow.sftDbtbSourdfNbmf(drsSynd.gftCommbnd());
       } dbtdh(SQLExdfption sqlf) {

       }

       try {
           if(drsSynd.gftTbblfNbmf()!= null){
              drsRow.sftTbblfNbmf(drsSynd.gftTbblfNbmf());
           }
        } dbtdh(SQLExdfption sqlf) {

        }

       try {
            if(drsSynd.gftCommbnd() != null)
                drsRow.sftCommbnd(drsSynd.gftCommbnd());
       } dbtdh(SQLExdfption sqlf) {

       }

       try {
            drsRow.sftKfyColumns(drsSynd.gftKfyColumns());
       } dbtdh(SQLExdfption sqlf) {

       }
       rfturn drsRow;
    }



    /**
     * Sfts <i>obj</i> bs thf vbluf in dolumn <i>dolumnNbmf</i> in thf durrfnt row of thf
     * <dodf>RowSft</dodf> objfdt. This vbluf is thf rfsolvfd vbluf thbt is to bf
     * pfrsistfd in thf dbtb sourdf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf nbmf of thf dolumn
     *        into whidh to sft thf vbluf to bf pfrsistfd
     * @pbrbm obj bn <dodf>Objfdt</dodf> thbt is thf vbluf to bf sft in thf dbtb sourdf
     */
    publid void sftRfsolvfdVbluf(String dolumnNbmf, Objfdt obj) throws SQLExdfption {
       // modify mfthod to throw SQLExdfption in spfd
       // %%% Missing implfmfntbtion!
    }

    /**
     * This fundtion is pbdkbgf privbtf,
     * i.f. dbnnot bf bddfssfs outsidf this pbdkbgf.
     * This is usfd to sft thf bdtubl CbdhfdRowSft
     * whidh is bfing syndhronizfd to thf dbtbbbsf
     **/
   void sftCbdhfdRowSft(CbdhfdRowSft drs) {
           drsSynd = (CbdhfdRowSftImpl)drs;
    }

    /**
     * This fundtion is pbdkbgf privbtf,
     * i.f. dbnnot bf bddfssfs outsidf this pbdkbgf.
     * This is usfd to sft thf CbdhfdRowSft formfd
     * with donflidt vblufs.
     **/
    void sftCbdhfdRowSftRfsolvfr(CbdhfdRowSft drs){
         try {
              drsRfs = (CbdhfdRowSftImpl)drs;
              drsRfs.bftfrLbst();
              sz = drsRfs.sizf();
         } dbtdh (SQLExdfption sqlf) {
            // do nothing
         }
    }

    /**
     * This fundtion is pbdkbgf privbtf,
     * i.f. dbnnot bf bddfssfs outsidf this pbdkbgf.
     * This is usfd to sft thf stbtus of fbdh row
     * to fithfr of thf vblufs SyndRfsolvfr.*_CONFLICT
     **/
    @SupprfssWbrnings("rbwtypfs")
    void sftStbtus(ArrbyList stbtus){
             stbts = stbtus;
    }

    /**
     * This fundtion is pbdkbgf privbtf,
     * i.f. dbnnot bf bddfssfs outsidf this pbdkbgf.
     * This is usfd to sft thf hbndlf to thf writfr objfdt
     * whidh will writf thf rfsolvfd vblufs bbdk to dbtbsourdf
     **/
    void sftCbdhfdRowSftWritfr(CbdhfdRowSftWritfr CRWritfr) {
         drw = CRWritfr;
    }

    /**
     * Movfs thf dursor down onf row from its durrfnt position. A <dodf>SyndRfsolvfr</dodf>
     * dursor is initiblly positionfd bfforf thf first donflidt row; thf first dbll to thf
     * mfthod <dodf>nfxtConflidt()</dodf> mbkfs thf first donflidt row thf durrfnt row;
     * thf sfdond dbll mbkfs thf sfdond donflidt row thf durrfnt row, bnd so on.
     * <p>
     * If bn input strfbm is opfn for thf durrfnt row, b dbll to thf mfthod nfxt will
     * impliditly dlosf it. A <dodf>SyndRfsolvfr</dodf> objfdt's wbrning dhbin is dlfbrfd
     * whfn b nfw row
     *
     * @rfturn truf if thf nfw durrfnt row is vblid; fblsf if thfrf brf no morf rows
     * @throws SQLExdfption if b dbtbbbsf bddfss oddurs
     *
     */
    publid boolfbn nfxtConflidt() throws SQLExdfption {
        /**
          * Thf nfxt() mfthod will hop from
          * onf donflidt to bnothfr
          *
          * Intfrnblly do b drs.nfxt() until
          * nfxt donflidt.
          **/
      boolfbn bool = fblsf;

      drsSynd.sftShowDflftfd(truf);
      whilf(drsSynd.nfxt()) {
           drsRfs.prfvious();
           rowStbtus++;  //sz--;

          if((rowStbtus-1) >= stbts.sizf()) {
             bool = fblsf;
             brfbk;
          }

          if(((Intfgfr)stbts.gft(rowStbtus-1)).intVbluf() == SyndRfsolvfr.NO_ROW_CONFLICT) {
              // do nothing
              // bool rfmbins bs fblsf
             ;
           } flsf {
             bool = truf;
             brfbk;
           } //fnd if

      } //fnd whilf

        drsSynd.sftShowDflftfd(fblsf);
        rfturn bool;
   } // fnd nfxt() mfthod


    /**
     * Movfs thf dursor to thf prfvious donflidt row in this <dodf>SyndRfsolvfr</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row; <dodf>fblsf</dodf>
     *     if it is off thf rfsult sft
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs or thf rfsult sft typf
     *     is TYPE_FORWARD_ONLY
     */
   publid boolfbn prfviousConflidt() throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
   }

    //-----------------------------------------------------------------------
    // Propfrtifs
    //-----------------------------------------------------------------------

    /**
     * Sfts this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dommbnd propfrty
     * to thf givfn <dodf>String</dodf> objfdt bnd dlfbrs thf pbrbmftfrs,
     * if bny, thbt wfrf sft for thf prfvious dommbnd.
     * <P>
     * Thf dommbnd propfrty mby not bf nffdfd
     * if thf rowsft is produdfd by b dbtb sourdf, sudh bs b sprfbdshfft,
     * thbt dofs not support dommbnds. Thus, this propfrty is optionbl
     * bnd mby bf <dodf>null</dodf>.
     *
     * @pbrbm dmd b <dodf>String</dodf> objfdt dontbining bn SQL qufry
     *            thbt will bf sft bs thf dommbnd; mby bf <dodf>null</dodf>
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void sftCommbnd(String dmd) throws SQLExdfption {
         throw nfw UnsupportfdOpfrbtionExdfption();
    }


    //---------------------------------------------------------------------
    // Rfbding bnd writing dbtb
    //---------------------------------------------------------------------

    /**
     * Populbtfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt with dbtb from
     * thf givfn <dodf>RfsultSft</dodf> objfdt.  This
     * mfthod is bn bltfrnbtivf to thf mfthod <dodf>fxfdutf</dodf>
     * for filling thf rowsft with dbtb.  Thf mfthod <dodf>populbtf</dodf>
     * dofs not rfquirf thbt thf propfrtifs nffdfd by thf mfthod
     * <dodf>fxfdutf</dodf>, sudh bs thf <dodf>dommbnd</dodf> propfrty,
     * bf sft. This is truf bfdbusf thf mfthod <dodf>populbtf</dodf>
     * is givfn thf <dodf>RfsultSft</dodf> objfdt from
     * whidh to gft dbtb bnd thus dofs not nffd to usf thf propfrtifs
     * rfquirfd for sftting up b donnfdtion bnd fxfduting this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt's dommbnd.
     * <P>
     * Aftfr populbting this rowsft with dbtb, thf mfthod
     * <dodf>populbtf</dodf> sfts thf rowsft's mftbdbtb bnd
     * thfn sfnds b <dodf>RowSftChbngfdEvfnt</dodf> objfdt
     * to bll rfgistfrfd listfnfrs prior to rfturning.
     *
     * @pbrbm dbtb thf <dodf>RfsultSft</dodf> objfdt dontbining thf dbtb
     *             to bf rfbd into this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if bn frror oddurs; or thf mbx row sftting is
     *          violbtfd whilf populbting thf RowSft
     * @sff #fxfdutf
     */
    publid void populbtf(RfsultSft dbtb) throws SQLExdfption {
         throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Populbtfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt with dbtb,
     * using thf givfn donnfdtion to produdf thf rfsult sft from
     * whidh dbtb will bf rfbd.  A sfdond form of this mfthod,
     * whidh tbkfs no brgumfnts, usfs thf vblufs from this rowsft's
     * usfr, pbssword, bnd fithfr url or dbtb sourdf propfrtifs to
     * drfbtf b nfw dbtbbbsf donnfdtion. Thf form of <dodf>fxfdutf</dodf>
     * thbt is givfn b donnfdtion ignorfs thfsf propfrtifs.
     *
     * @pbrbm donn A stbndbrd JDBC <dodf>Connfdtion</dodf> objfdt thbt this
     * <dodf>CbdhfdRowSft</dodf> objfdt dbn pbss to b syndhronizbtion providfr
     * to fstbblish b donnfdtion to thf dbtb sourdf
     * @throws SQLExdfption if bn invblid <dodf>Connfdtion</dodf> is supplifd
     *           or bn frror oddurs in fstbblishing thf donnfdtion to thf
     *           dbtb sourdf
     * @sff #populbtf
     * @sff jbvb.sql.Connfdtion
     */
    publid void fxfdutf(Connfdtion donn) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Propbgbtfs bll row updbtf, insfrt, bnd dflftf dhbngfs to thf
     * undfrlying dbtb sourdf bbdking this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt.
     * <P>
     * <b>Notf</b>In thf rfffrfndf implfmfntbtion bn optimistid dondurrfndy implfmfntbtion
     * is providfd bs b sbmplf implfmfntbtion of b thf <dodf>SyndProvidfr</dodf>
     * bbstrbdt dlbss.
     * <P>
     * This mfthod fbils if bny of thf updbtfs dbnnot bf propbgbtfd bbdk
     * to thf dbtb sourdf.  Whfn it fbils, thf dbllfr dbn bssumf thbt
     * nonf of thf updbtfs brf rfflfdtfd in thf dbtb sourdf.
     * Whfn bn fxdfption is thrown, thf durrfnt row
     * is sft to thf first "updbtfd" row thbt rfsultfd in bn fxdfption
     * unlfss thf row thbt dbusfd thf fxdfption is b "dflftfd" row.
     * In thbt dbsf, whfn dflftfd rows brf not shown, whidh is usublly truf,
     * thf durrfnt row is not bfffdtfd.
     * <P>
     * If no <dodf>SyndProvidfr</dodf> is donfigurfd, thf rfffrfndf implfmfntbtion
     * lfvfrbgfs thf <dodf>RIOptimistidProvidfr</dodf> bvbilbblf whidh providfs thf
     * dffbult bnd rfffrfndf syndhronizbtion dbpbbilitifs for disdonnfdtfd
     * <dodf>RowSfts</dodf>.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row or thf undfrlying
     *          rfffrfndf syndhronizbtion providfr fbils to dommit thf updbtfs
     *          to thf dbtbsourdf
     * @throws SyndProvidfrExdfption if bn intfrnbl frror oddurs within thf
     *          <dodf>SyndProvidfr</dodf> instbndf during fithfr during thf
     *          prodfss or bt bny timf whfn thf <dodf>SyndProvidfr</dodf>
     *          instbndf toudhfs thf dbtb sourdf.
     * @sff #bddfptChbngfs(jbvb.sql.Connfdtion)
     * @sff jbvbx.sql.RowSftWritfr
     * @sff jbvbx.sql.rowsft.spi.SyndProvidfr
     */
    publid void bddfptChbngfs() throws SyndProvidfrExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Propbgbtfs bll row updbtf, insfrt, bnd dflftf dhbngfs to thf
     * dbtb sourdf bbdking this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * using thf givfn <dodf>Connfdtion</dodf> objfdt.
     * <P>
     * Thf rfffrfndf implfmfntbtion <dodf>RIOptimistidProvidfr</dodf>
     * modififs its syndhronizbtion to b writf bbdk fundtion givfn
     * thf updbtfd donnfdtion
     * Thf rfffrfndf implfmfntbtion modififs its syndhronizbtion bfhbviour
     * vib thf <dodf>SyndProvidfr</dodf> to fnsurf thf syndhronizbtion
     * oddurs bddording to thf updbtfd JDBC <dodf>Connfdtion</dodf>
     * propfrtifs.
     *
     * @pbrbm don b stbndbrd JDBC <dodf>Connfdtion</dodf> objfdt
     * @throws SQLExdfption if thf dursor is on thf insfrt row or thf undfrlying
     *                   syndhronizbtion providfr fbils to dommit thf updbtfs
     *                   bbdk to thf dbtb sourdf
     * @sff #bddfptChbngfs
     * @sff jbvbx.sql.RowSftWritfr
     * @sff jbvbx.sql.rowsft.spi.SyndFbdtory
     * @sff jbvbx.sql.rowsft.spi.SyndProvidfr
     */
    publid void bddfptChbngfs(Connfdtion don) throws SyndProvidfrExdfption{
     throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfstorfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt to its originbl stbtf,
     * thbt is, its stbtf bfforf thf lbst sft of dhbngfs.
     * <P>
     * Bfforf rfturning, this mfthod movfs thf dursor bfforf thf first row
     * bnd sfnds b <dodf>rowSftChbngfd</dodf> fvfnt to bll rfgistfrfd
     * listfnfrs.
     * @throws SQLExdfption if bn frror is oddurs rolling bbdk thf RowSft
     *           stbtf to thf dffinifd originbl vbluf.
     * @sff jbvbx.sql.RowSftListfnfr#rowSftChbngfd
     */
    publid void rfstorfOriginbl() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rflfbsfs thf durrfnt dontfnts of this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt bnd sfnds b <dodf>rowSftChbngfd</dodf> fvfnt objfdt to bll
     * rfgistfrfd listfnfrs.
     *
     * @throws SQLExdfption if bn frror oddurs flushing thf dontfnts of
     *           RowSft.
     * @sff jbvbx.sql.RowSftListfnfr#rowSftChbngfd
     */
    publid void rflfbsf() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Cbndfls dflftion of thf durrfnt row bnd notififs listfnfrs thbt
     * b row hbs dhbngfd.
     * <P>
     * Notf:  This mfthod dbn bf ignorfd if dflftfd rows brf not bfing shown,
     * whidh is thf normbl dbsf.
     *
     * @throws SQLExdfption if thf dursor is not on b vblid row
     */
    publid void undoDflftf() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Immfdibtfly rfmovfs thf durrfnt row from this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt if thf row hbs bffn insfrtfd, bnd
     * blso notififs listfnfrs thf b row hbs dhbngfd.  An fxdfption is thrown
     * if thf row is not b row thbt hbs bffn insfrtfd or thf dursor is bfforf
     * thf first row, bftfr thf lbst row, or on thf insfrt row.
     * <P>
     * This opfrbtion dbnnot bf undonf.
     *
     * @throws SQLExdfption if bn frror oddurs,
     *                         thf dursor is not on b vblid row,
     *                         or thf row hbs not bffn insfrtfd
     */
    publid void undoInsfrt() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Immfdibtfly rfvfrsfs thf lbst updbtf opfrbtion if thf
     * row hbs bffn modififd. This mfthod dbn bf
     * dbllfd to rfvfrsf updbtfs on b bll dolumns until bll updbtfs in b row hbvf
     * bffn rollfd bbdk to thfir originbting stbtf sindf thf lbst syndhronizbtion
     * (<dodf>bddfptChbngfs</dodf>) or populbtion. This mfthod mby blso bf dbllfd
     * whilf pfrforming updbtfs to thf insfrt row.
     * <P>
     * <dodf>undoUpdbtf</dodf mby bf dbllfd bt bny timf during thf liff-timf of b
     * rowsft, howfvfr bftfr b syndhronizbtion hbs oddurs this mfthod hbs no
     * bfffdt until furthfr modifidbtion to thf RowSft dbtb oddurs.
     *
     * @throws SQLExdfption if dursor is bfforf thf first row, bftfr thf lbst
     *     row in rowsft.
     * @sff #undoDflftf
     * @sff #undoInsfrt
     * @sff jbvb.sql.RfsultSft#dbndflRowUpdbtfs
     */
    publid void undoUpdbtf() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();

    }

    //--------------------------------------------------------------------
    // Vifws
    //--------------------------------------------------------------------

    /**
     * Rfturns b nfw <dodf>RowSft</dodf> objfdt bbdkfd by thf sbmf dbtb bs
     * thbt of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bnd shbring b sft of dursors
     * with it. This bllows dursors to intfrbtf ovfr b shbrfd sft of rows, providing
     * multiplf vifws of thf undfrlying dbtb.
     *
     * @rfturn b <dodf>RowSft</dodf> objfdt thbt is b dopy of this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt bnd shbrfs b sft of dursors with it
     * @throws SQLExdfption if bn frror oddurs or dloning is
     *                         not supportfd
     * @sff jbvbx.sql.RowSftEvfnt
     * @sff jbvbx.sql.RowSftListfnfr
     */
    publid RowSft drfbtfShbrfd() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns b nfw <dodf>RowSft</dodf> objfdt dontbining by thf sbmf dbtb
     * bs this <dodf>CbdhfdRowSftImpl</dodf> objfdt.  This mfthod
     * difffrs from thf mfthod <dodf>drfbtfCopy</dodf> in thbt it throws b
     * <dodf>ClonfNotSupportfdExdfption</dodf> objfdt instfbd of bn
     * <dodf>SQLExdfption</dodf> objfdt, bs thf mfthod <dodf>drfbtfShbrfd</dodf>
     * dofs.  This <dodf>dlonf</dodf>
     * mfthod is dbllfd intfrnblly by thf mfthod <dodf>drfbtfShbrfd</dodf>,
     * whidh dbtdhfs thf <dodf>ClonfNotSupportfdExdfption</dodf> objfdt
     * bnd in turn throws b nfw <dodf>SQLExdfption</dodf> objfdt.
     *
     * @rfturn b dopy of this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws ClonfNotSupportfdExdfption if bn frror oddurs whfn
     * bttfmpting to dlonf this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @sff #drfbtfShbrfd
     */
    protfdtfd Objfdt dlonf() throws ClonfNotSupportfdExdfption  {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Crfbtfs b <dodf>RowSft</dodf> objfdt thbt is b dffp dopy of
     * this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dbtb, indluding
     * donstrbints.  Updbtfs mbdf
     * on b dopy brf not visiblf to thf originbl rowsft;
     * b dopy of b rowsft is domplftfly indfpfndfnt from thf originbl.
     * <P>
     * Mbking b dopy sbvfs thf dost of drfbting bn idfntidbl rowsft
     * from first prindiplfs, whidh dbn bf quitf fxpfnsivf.
     * For fxbmplf, it dbn fliminbtf thf nffd to qufry b
     * rfmotf dbtbbbsf sfrvfr.
     * @rfturn b nfw <dodf>CbdhfdRowSft</dodf> objfdt thbt is b dffp dopy
     *           of this <dodf>CbdhfdRowSft</dodf> objfdt bnd is
     *           domplftfly indfpfndfnt from this <dodf>CbdhfdRowSftImpl</dodf>
     *           objfdt.
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf dopy of this
     *           of thf <dodf>CbdhfdRowSftImpl</dodf>
     * @sff #drfbtfShbrfd
     * @sff jbvbx.sql.RowSftEvfnt
     * @sff jbvbx.sql.RowSftListfnfr
     */
    publid CbdhfdRowSft drfbtfCopy() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Crfbtfs b <dodf>RowSft</dodf> objfdt thbt is b dopy of
     * this <dodf>CbdhfdRowSftImpl</dodf> objfdt's tbblf strudturf
     * bnd thf donstrbints only.
     * Thfrf will bf no dbtb in thf objfdt bfing rfturnfd.
     * Updbtfs mbdf on b dopy brf not visiblf to thf originbl rowsft.
     * <P>
     * This hflps in gftting thf undfrlying XML sdhfmb whidh dbn
     * bf usfd bs thf bbsis for populbting b <dodf>WfbRowSft</dodf>.
     *
     * @rfturn b nfw <dodf>CbdhfdRowSft</dodf> objfdt thbt is b dopy
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt's sdhfmb bnd
     * rftbins bll thf donstrbints on thf originbl rowsft but dontbins
     * no dbtb
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf dopy
     * of thf <dodf>CbdhfdRowSft</dodf> objfdt
     * @sff #drfbtfShbrfd
     * @sff #drfbtfCopy
     * @sff #drfbtfCopyNoConstrbints
     * @sff jbvbx.sql.RowSftEvfnt
     * @sff jbvbx.sql.RowSftListfnfr
     */
    publid CbdhfdRowSft drfbtfCopySdhfmb() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Crfbtfs b <dodf>CbdhfdRowSft</dodf> objfdt thbt is b dopy of
     * this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dbtb only.
     * All donstrbints sft in this objfdt will not bf thfrf
     * in thf rfturning objfdt.  Updbtfs mbdf
     * on b dopy brf not visiblf to thf originbl rowsft.
     *
     * @rfturn b nfw <dodf>CbdhfdRowSft</dodf> objfdt thbt is b dffp dopy
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bnd is
     * domplftfly indfpfndfnt from this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf dopy of thf
     * of thf <dodf>CbdhfdRowSft</dodf>
     * @sff #drfbtfShbrfd
     * @sff #drfbtfCopy
     * @sff #drfbtfCopySdhfmb
     * @sff jbvbx.sql.RowSftEvfnt
     * @sff jbvbx.sql.RowSftListfnfr
     */
    publid CbdhfdRowSft drfbtfCopyNoConstrbints() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Convfrts this <dodf>CbdhfdRowSftImpl</dodf> objfdt to b dollfdtion
     * of tbblfs. Thf sbmplf implfmfntbtion utilitizfs thf <dodf>TrffMbp</dodf>
     * dollfdtion typf.
     * This dlbss gubrbntffs thbt thf mbp will bf in bsdfnding kfy ordfr,
     * sortfd bddording to thf nbturbl ordfr for thf kfy's dlbss.
     *
     * @rfturn b <dodf>Collfdtion</dodf> objfdt donsisting of tbblfs,
     *         fbdh of whidh is b dopy of b row in this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf dollfdtion
     * @sff #toCollfdtion(int)
     * @sff #toCollfdtion(String)
     * @sff jbvb.util.TrffMbp
     */
    @SupprfssWbrnings("rbwtypfs")
    publid Collfdtion toCollfdtion() throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns thf spfdififd dolumn of this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * bs b <dodf>Collfdtion</dodf> objfdt.  This mfthod mbkfs b dopy of thf
     * dolumn's dbtb bnd utilitizfs thf <dodf>Vfdtor</dodf> to fstbblish thf
     * dollfdtion. Thf <dodf>Vfdtor</dodf> dlbss implfmfnts b growbblf brrby
     * objfdts bllowing thf individubl domponfnts to bf bddfssfd using bn
     * bn intfgfr indfx similbr to thbt of bn brrby.
     *
     * @rfturn b <dodf>Collfdtion</dodf> objfdt thbt dontbins thf vbluf(s)
     *         storfd in thf spfdififd dolumn of this
     *         <dodf>CbdhfdRowSftImpl</dodf>
     *         objfdt
     * @throws SQLExdfption if bn frror oddurs gfnfrbtfd thf dollfdtion; or
     *          bn invblid dolumn is providfd.
     * @sff #toCollfdtion()
     * @sff #toCollfdtion(String)
     * @sff jbvb.util.Vfdtor
     */
    @SupprfssWbrnings("rbwtypfs")
    publid Collfdtion toCollfdtion(int dolumn) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns thf spfdififd dolumn of this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * bs b <dodf>Collfdtion</dodf> objfdt.  This mfthod mbkfs b dopy of thf
     * dolumn's dbtb bnd utilitizfs thf <dodf>Vfdtor</dodf> to fstbblish thf
     * dollfdtion. Thf <dodf>Vfdtor</dodf> dlbss implfmfnts b growbblf brrby
     * objfdts bllowing thf individubl domponfnts to bf bddfssfd using bn
     * bn intfgfr indfx similbr to thbt of bn brrby.
     *
     * @rfturn b <dodf>Collfdtion</dodf> objfdt thbt dontbins thf vbluf(s)
     *         storfd in thf spfdififd dolumn of this
     *         <dodf>CbdhfdRowSftImpl</dodf>
     *         objfdt
     * @throws SQLExdfption if bn frror oddurs gfnfrbtfd thf dollfdtion; or
     *          bn invblid dolumn is providfd.
     * @sff #toCollfdtion()
     * @sff #toCollfdtion(int)
     * @sff jbvb.util.Vfdtor
     */
    @SupprfssWbrnings("rbwtypfs")
    publid Collfdtion toCollfdtion(String dolumn) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    //--------------------------------------------------------------------
    // Advbndfd ffbturfs
    //--------------------------------------------------------------------


    /**
     * Rfturns thf <dodf>SyndProvidfr</dodf> implfmfntbtion bfing usfd
     * with this <dodf>CbdhfdRowSftImpl</dodf> implfmfntbtion rowsft.
     *
     * @rfturn thf SyndProvidfr usfd by thf rowsft. If not providfr wbs
     *          sft whfn thf rowsft wbs instbntibtfd, thf rfffrfndf
     *          implfmfntbtion (dffbult) providfr is rfturnfd.
     * @throws SQLExdfption if frror oddurs whilf rfturn thf
     *          <dodf>SyndProvidfr</dodf> instbndf.
     */
    publid SyndProvidfr gftSyndProvidfr() throws SQLExdfption {
      throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf bdtivf <dodf>SyndProvidfr</dodf> bnd bttfmpts to lobd
     * lobd thf nfw providfr using thf <dodf>SyndFbdtory</dodf> SPI.
     *
     * @throws SQLExdfption if bn frror oddurs whilf rfsftting thf
     *          <dodf>SyndProvidfr</dodf>.
     */
    publid void sftSyndProvidfr(String providfrStr) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    //-----------------
    // mfthods inhfritfd from RowSft
    //-----------------






    //---------------------------------------------------------------------
    // Rfbding bnd writing dbtb
    //---------------------------------------------------------------------

    /**
     * Populbtfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt with dbtb.
     * This form of thf mfthod usfs thf rowsft's usfr, pbssword, bnd url or
     * dbtb sourdf nbmf propfrtifs to drfbtf b dbtbbbsf
     * donnfdtion.  If propfrtifs thbt brf nffdfd
     * hbvf not bffn sft, this mfthod will throw bn fxdfption.
     * <P>
     * Anothfr form of this mfthod usfs bn fxisting JDBC <dodf>Connfdtion</dodf>
     * objfdt instfbd of drfbting b nfw onf; thfrfforf, it ignorfs thf
     * propfrtifs usfd for fstbblishing b nfw donnfdtion.
     * <P>
     * Thf qufry spfdififd by thf dommbnd propfrty is fxfdutfd to drfbtf b
     * <dodf>RfsultSft</dodf> objfdt from whidh to rftrifvf dbtb.
     * Thf durrfnt dontfnts of thf rowsft brf disdbrdfd, bnd thf
     * rowsft's mftbdbtb is blso (rf)sft.  If thfrf brf outstbnding updbtfs,
     * thfy brf blso ignorfd.
     * <P>
     * Thf mfthod <dodf>fxfdutf</dodf> dlosfs bny dbtbbbsf donnfdtions thbt it
     * drfbtfs.
     *
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         nfdfssbry propfrtifs hbvf not bffn sft
     */
    publid void fxfdutf() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }



    //-----------------------------------
    // Mfthods inhfritfd from RfsultSft
    //-----------------------------------

    /**
     * Movfs thf dursor down onf row from its durrfnt position bnd
     * rfturns <dodf>truf</dodf> if thf nfw dursor position is b
     * vblid row.
     * Thf dursor for b nfw <dodf>RfsultSft</dodf> objfdt is initiblly
     * positionfd bfforf thf first row. Thf first dbll to thf mfthod
     * <dodf>nfxt</dodf> movfs thf dursor to thf first row, mbking it
     * thf durrfnt row; thf sfdond dbll mbkfs thf sfdond row thf
     * durrfnt row, bnd so on.
     *
     * <P>If bn input strfbm from thf prfvious row is opfn, it is
     * impliditly dlosfd. Thf <dodf>RfsultSft</dodf> objfdt's wbrning
     * dhbin is dlfbrfd whfn b nfw row is rfbd.
     *
     * @rfturn <dodf>truf</dodf> if thf nfw durrfnt row is vblid;
     *         <dodf>fblsf</dodf> if thfrf brf no morf rows
     * @throws SQLExdfption if bn frror oddurs or
     *            thf dursor is not positionfd in thf rowsft, bfforf
     *            thf first row, or bftfr thf lbst row
     */
    publid boolfbn nfxt() throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf nfxt
     * row bnd rfturns <dodf>truf</dodf> if thf dursor is still in thf rowsft;
     * rfturns <dodf>fblsf</dodf> if thf dursor hbs movfd to thf position bftfr
     * thf lbst row.
     * <P>
     * This mfthod hbndlfs thf dbsfs whfrf thf dursor movfs to b row thbt
     * hbs bffn dflftfd.
     * If this rowsft shows dflftfd rows bnd thf dursor movfs to b row
     * thbt hbs bffn dflftfd, this mfthod movfs thf dursor to thf nfxt
     * row until thf dursor is on b row thbt hbs not bffn dflftfd.
     * <P>
     * Thf mfthod <dodf>intfrnblNfxt</dodf> is dbllfd by mfthods sudh bs
     * <dodf>nfxt</dodf>, <dodf>bbsolutf</dodf>, bnd <dodf>rflbtivf</dodf>,
     * bnd, bs its nbmf implifs, is only dbllfd intfrnblly.
     * <p>
     * This is b implfmfntbtion only mfthod bnd is not rfquirfd bs b stbndbrd
     * implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row in this
     *         rowsft; <dodf>fblsf</dodf> if it is bftfr thf lbst row
     * @throws SQLExdfption if bn frror oddurs
     */
    protfdtfd boolfbn intfrnblNfxt() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Closfs this <dodf>CbdhfdRowSftImpl</dodf> objfdy bnd rflfbsfs bny rfsourdfs
     * it wbs using.
     *
     * @throws SQLExdfption if bn frror oddurs whfn rflfbsing bny rfsourdfs in usf
     * by this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     */
    publid void dlosf() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfports whfthfr thf lbst dolumn rfbd wbs SQL <dodf>NULL</dodf>.
     * Notf thbt you must first dbll thf mfthod <dodf>gftXXX</dodf>
     * on b dolumn to try to rfbd its vbluf bnd thfn dbll thf mfthod
     * <dodf>wbsNull</dodf> to dftfrminf whfthfr thf vbluf wbs
     * SQL <dodf>NULL</dodf>.
     *
     * @rfturn <dodf>truf</dodf> if thf vbluf in thf lbst dolumn rfbd
     *         wbs SQL <dodf>NULL</dodf>; <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn wbsNull() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns thf insfrt row or thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf>objfdt.
     *
     * @rfturn thf <dodf>Row</dodf> objfdt on whidh this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdts's dursor is positionfd
     */
    protfdtfd BbsfRow gftCurrfntRow() {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfmovfs thf row on whidh thf dursor is positionfd.
     * <p>
     * This is b implfmfntbtion only mfthod bnd is not rfquirfd bs b stbndbrd
     * implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
     *
     * @throws SQLExdfption if thf dursor is positionfd on thf insfrt
     *            row
     */
    protfdtfd void rfmovfCurrfntRow() {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>String</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, INTEGER, BIGINT, REAL,
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, <b>CHAR</b>, <b>VARCHAR</b></dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     */
    publid String gftString(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>boolfbn</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf bs b <dodf>boolfbn</dodf> in thf Jbvb progbmming lbngubgf;
     *        if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>fblsf</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>BOOLEAN</dodf> vbluf
     * @sff #gftBoolfbn(String)
     */
    publid boolfbn gftBoolfbn(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>bytf</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf bs b <dodf>bytf</dodf> in thf Jbvb progrbmming
     * lbngubgf; if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf><b>TINYINT</b>, SMALLINT, INTEGER, BIGINT, REAL,
     *            FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     *            or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     *            dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftBytf(String)
     */
    publid bytf gftBytf(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>short</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, <b>SMALLINT</b>, INTEGER, BIGINT, REAL
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     * @sff #gftShort(String)
     */
    publid short gftShort(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn
     * <dodf>int</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, <b>INTEGER</b>, BIGINT, REAL
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     */
    publid int gftInt(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>long</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, INTEGER, <b>BIGINT</b>, REAL
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     * @sff #gftLong(String)
     */
    publid long gftLong(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>flobt</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, INTEGER, BIGINT, <b>REAL</b>,
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     * @sff #gftFlobt(String)
     */
    publid flobt gftFlobt(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>doublf</dodf> vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, INTEGER, BIGINT, REAL,
     * <b>FLOAT</b>, <b>DOUBLE</b>, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     * @sff #gftDoublf(String)
     *
     */
    publid doublf gftDoublf(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod is dfprfdbtfd; usf thf vfrsion of <dodf>gftBigDfdimbl</dodf>
     * thbt dofs not tbkf b sdblf pbrbmftfr bnd rfturns b vbluf with full
     * prfdision.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point in thf
     *        vbluf rfturnfd
     * @rfturn thf dolumn vbluf with thf spfdififd numbfr of digits to thf right
     *         of thf dfdimbl point; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid BigDfdimbl gftBigDfdimbl(int dolumnIndfx, int sdblf) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>bytf</dodf> brrby vbluf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf bs b <dodf>bytf</dodf> brrby in thf Jbvb progrbmming
     * lbngubgf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * rfsult is <dodf>null</dodf>
     *
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf><b>BINARY</b>, <b>VARBINARY</b> or
     * LONGVARBINARY</dodf> vbluf.
     * Thf bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftBytfs(String)
     */
    publid bytf[] gftBytfs(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Dbtf</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf bs b <dodf>jbvb.sql.Dbtb</dodf> objfdt; if
     *        thf vbluf is SQL <dodf>NULL</dodf>, thf
     *        rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid jbvb.sql.Dbtf gftDbtf(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timf</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *         thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid jbvb.sql.Timf gftTimf(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     *         rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or this mfthod fbils
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.io.InputStrfbm</dodf>
     * objfdt.
     *
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of ASCII dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARCHAR</dodf> vblufs.  Thf JDBC
     * drivfr will do bny nfdfssbry donvfrsion from thf dbtbbbsf formbt into ASCII.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b gft mfthod impliditly dlosfs thf strfbm. . Also, b
     * strfbm mby rfturn <dodf>0</dodf> for <dodf>CbdhfdRowSftImpl.bvbilbblf()</dodf>
     * whfthfr thfrf is dbtb bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of onf-bytf ASCII dhbrbdtfrs.  If thf vbluf is SQL
     *         <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>CHAR, VARCHAR</dodf>, <dodf><b>LONGVARCHAR</b></dodf>
     * <dodf>BINARY, VARBINARY</dodf> or <dodf>LONGVARBINARY</dodf> vbluf. Thf
     * bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typfs thbt this mfthod is
     * usfd to rftrifvf.
     * @sff #gftAsdiiStrfbm(String)
     */
    publid jbvb.io.InputStrfbm gftAsdiiStrfbm(int dolumnIndfx) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of Unidodf dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf LONGVARCHAR vblufs.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from thf dbtbbbsf formbt into Unidodf.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b gft mfthod impliditly dlosfs thf strfbm. . Also, b
     * strfbm mby rfturn 0 for bvbilbblf() whfthfr thfrf is dbtb
     * bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of two bytf Unidodf dhbrbdtfrs.  If thf vbluf is SQL NULL
     * thfn thf rfsult is null.
     * @throws SQLExdfption if bn frror oddurs
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid jbvb.io.InputStrfbm gftUnidodfStrfbm(int dolumnIndfx) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.io.InputStrfbm</dodf>
     * objfdt.
     * <P>
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of unintfrprftfd bytfs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARBINARY</dodf> vblufs.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b gft mfthod impliditly dlosfs thf strfbm. Also, b
     * strfbm mby rfturn <dodf>0</dodf> for
     * <dodf>CbdhfdRowSftImpl.bvbilbblf()</dodf> whfthfr thfrf is dbtb
     * bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     * is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     * bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of unintfrprftfd bytfs.  If thf vbluf is SQL <dodf>NULL</dodf>
     * thfn thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>BINARY, VARBINARY</dodf> or <dodf><b>LONGVARBINARY</b></dodf>
     * Thf bold typf indidbtfs thf SQL typf thbt this mfthod is rfdommfnfd
     * to rftrifvf.
     * @sff #gftBinbryStrfbm(String)
     */
    publid jbvb.io.InputStrfbm gftBinbryStrfbm(int dolumnIndfx) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();

    }


    //======================================================================
    // Mfthods for bddfssing rfsults by dolumn nbmf
    //======================================================================

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>String</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * BIGINT, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, <b>CHAR</b>,
     * <b>VARCHAR</b></dodf> or <dodf>LONGVARCHAR<</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf.
     */
    publid String gftString(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>boolfbn</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf bs b <dodf>boolfbn</dodf> in thf Jbvb progrbmming
     *        lbngubgf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *        thf rfsult is <dodf>fblsf</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>BOOLEAN</dodf> vbluf
     * @sff #gftBoolfbn(int)
     */
    publid boolfbn gftBoolfbn(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>bytf</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf bs b <dodf>bytf</dodf> in thf Jbvb progrbmming
     * lbngubgf; if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf><B>TINYINT</B>, SMALLINT, INTEGER,
     * BIGINT, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf
     * bold typf dfsignbtfs thf rfdommfndfd rfturn typf
     */
    publid bytf gftBytf(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>short</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, <b>SMALLINT</b>, INTEGER
     * BIGINT, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftShort(int)
     */
    publid short gftShort(String dolumnNbmf) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs bn <dodf>int</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf
     * of b dolumn in this rowsft,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, <b>INTEGER</b>, BIGINT, REAL
     * FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typf.
     */
    publid int gftInt(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>long</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * <b>BIGINT</b>, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftLong(int)
     */
    publid long gftLong(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>flobt</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * BIGINT, <b>REAL</b>, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftFlobt(String)
     */
    publid flobt gftFlobt(String dolumnNbmf) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * bs b <dodf>doublf</dodf> vbluf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>0</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * BIGINT, REAL, <b>FLOAT</b>, <b>DOUBLE</b>, DECIMAL, NUMERIC, BIT, CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typfs.
     * @sff #gftDoublf(int)
     */
    publid doublf gftDoublf(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point
     * @rfturn b jbvb.mbth.BugDfdimbl objfdt with <dodf><i>sdblf</i></dodf>
     * numbfr of digits to thf right of thf dfdimbl point.
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * BIGINT, REAL, FLOAT, DOUBLE, <b>DECIMAL</b>, <b>NUMERIC</b>, BIT CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf thbt this mfthod is usfd to
     * rftrifvf.
     * @dfprfdbtfd Usf thf <dodf>gftBigDfdimbl(String dolumnNbmf)</dodf>
     *             mfthod instfbd
     */
    @Dfprfdbtfd
    publid BigDfdimbl gftBigDfdimbl(String dolumnNbmf, int sdblf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>bytf</dodf> brrby.
     * Thf bytfs rfprfsfnt thf rbw vblufs rfturnfd by thf drivfr.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf bs b <dodf>bytf</dodf> brrby in thf Jbvb progrbmming
     * lbngubgf; if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf><b>BINARY</b>, <b>VARBINARY</b>
     * </dodf> or <dodf>LONGVARBINARY</dodf> vblufs
     * Thf bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftBytfs(int)
     */
    publid bytf[] gftBytfs(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.sql.Dbtf</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Dbtf gftDbtf(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.sql.Timf</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid jbvb.sql.Timf gftTimf(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.io.InputStrfbm</dodf>
     * objfdt.
     *
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of ASCII dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm. This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARCHAR</dodf> vblufs. Thf
     * <dodf>SyndProvidfr</dodf> will rfly on thf JDBC drivfr to do bny nfdfssbry
     * donvfrsion from thf dbtbbbsf formbt into ASCII formbt.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of onf-bytf ASCII dhbrbdtfrs.  If thf vbluf is SQL
     *         <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>CHAR, VARCHAR</dodf>, <dodf><b>LONGVARCHAR</b></dodf>
     * <dodf>BINARY, VARBINARY</dodf> or <dodf>LONGVARBINARY</dodf> vbluf. Thf
     * bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typfs thbt this mfthod is
     * usfd to rftrifvf.
     * @sff #gftAsdiiStrfbm(int)
     */
    publid jbvb.io.InputStrfbm gftAsdiiStrfbm(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();

    }

    /**
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of Unidodf dhbrbdtfrs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARCHAR</dodf> vblufs.
     * Thf JDBC drivfr will do bny nfdfssbry donvfrsion from thf dbtbbbsf
     * formbt into Unidodf.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of two-bytf Unidodf dhbrbdtfrs.  If thf vbluf is
     *         SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs or thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row
     * @dfprfdbtfd usf thf mfthod <dodf>gftChbrbdtfrStrfbm</dodf> instfbd
     */
    @Dfprfdbtfd
    publid jbvb.io.InputStrfbm gftUnidodfStrfbm(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.io.InputStrfbm</dodf>
     * objfdt.
     * <P>
     * A dolumn vbluf dbn bf rftrifvfd bs b strfbm of unintfrprftfd bytfs
     * bnd thfn rfbd in dhunks from thf strfbm.  This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARBINARY</dodf> vblufs.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b gft mfthod impliditly dlosfs thf strfbm. Also, b
     * strfbm mby rfturn <dodf>0</dodf> for <dodf>CbdhfdRowSftImpl.bvbilbblf()</dodf>
     * whfthfr thfrf is dbtb bvbilbblf or not.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of unintfrprftfd bytfs.  If thf vbluf is SQL
     *         <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is unknown,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>BINARY, VARBINARY</dodf> or <dodf><b>LONGVARBINARY</b></dodf>
     * Thf bold typf indidbtfs thf SQL typf thbt this mfthod is rfdommfnfd
     * to rftrifvf.
     * @sff #gftBinbryStrfbm(int)
     *
     */
    publid jbvb.io.InputStrfbm gftBinbryStrfbm(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    //=====================================================================
    // Advbndfd ffbturfs:
    //=====================================================================

    /**
     * Thf first wbrning rfportfd by dblls on this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt is rfturnfd. Subsfqufnt <dodf>CbdhfdRowSftImpl</dodf> wbrnings will
     * bf dhbinfd to this <dodf>SQLWbrning</dodf>.
     *
     * <P>Thf wbrning dhbin is butombtidblly dlfbrfd fbdh timf b nfw
     * row is rfbd.
     *
     * <P><B>Notf:</B> This wbrning dhbin only dovfrs wbrnings dbusfd
     * by <dodf>RfsultSft</dodf> mfthods.  Any wbrning dbusfd by stbtfmfnt
     * mfthods (sudh bs rfbding OUT pbrbmftfrs) will bf dhbinfd on thf
     * <dodf>Stbtfmfnt</dodf> objfdt.
     *
     * @rfturn thf first SQLWbrning or null
     */
    publid SQLWbrning gftWbrnings() {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Clfbrs bll thf wbrnings rfporftfd for thf <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt. Aftfr b dbll to this mfthod, thf <dodf>gftWbrnings</dodf> mfthod
     * rfturns <dodf>null</dodf> until b nfw wbrning is rfportfd for this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     */
    publid void dlfbrWbrnings() {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf nbmf of thf SQL dursor usfd by this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * <P>In SQL, b rfsult tbblf is rftrifvfd through b dursor thbt is
     * nbmfd. Thf durrfnt row of b <dodf>RfsultSft</dodf> dbn bf updbtfd or dflftfd
     * using b positionfd updbtf/dflftf stbtfmfnt thbt rfffrfndfs thf
     * dursor nbmf. To fnsurf thbt thf dursor hbs thf propfr isolbtion
     * lfvfl to support bn updbtf opfrbtion, thf dursor's <dodf>SELECT</dodf>
     * stbtfmfnt should bf of thf form <dodf>sflfdt for updbtf</dodf>.
     * If thf <dodf>for updbtf</dodf> dlbusf
     * is omittfd, positionfd updbtfs mby fbil.
     *
     * <P>JDBC supports this SQL ffbturf by providing thf nbmf of thf
     * SQL dursor usfd by b <dodf>RfsultSft</dodf> objfdt. Thf durrfnt row
     * of b rfsult sft is blso thf durrfnt row of this SQL dursor.
     *
     * <P><B>Notf:</B> If positionfd updbtfs brf not supportfd, bn
     * <dodf>SQLExdfption</dodf> is thrown.
     *
     * @rfturn thf SQL dursor nbmf for this <dodf>CbdhfdRowSftImpl</dodf> objfdt's
     *         dursor
     * @throws SQLExdfption if bn frror oddurs
     */
    publid String gftCursorNbmf() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs b <dodf>RfsultSftMftbDbtb</dodf> objfdt instbndf thbt
     * dontbins informbtion bbout thf <dodf>CbdhfdRowSft</dodf> objfdt.
     * Howfvfr, bpplidbtions should dbst thf rfturnfd objfdt to b
     * <dodf>RowSftMftbDbtb</dodf> intfrfbdf implfmfntbtion. In thf
     * rfffrfndf implfmfntbtion, this dbst dbn bf donf on thf
     * <dodf>RowSftMftbDbtbImpl</dodf> dlbss.
     * <P>
     * For fxbmplf:
     * <prf>
     * CbdhfdRowSft drs = nfw CbdhfdRowSftImpl();
     * RowSftMftbDbtbImpl mftbDbtb =
     *     (RowSftMftbDbtbImpl)drs.gftMftbDbtb();
     * // Sft thf numbfr of dolumns in thf RowSft objfdt for
     * // whidh this RowSftMftbDbtbImpl objfdt wbs drfbtfd to thf
     * // givfn numbfr.
     * mftbDbtb.sftColumnCount(3);
     * drs.sftMftbDbtb(mftbDbtb);
     * </prf>
     *
     * @rfturn thf <dodf>RfsultSftMftbDbtb</dodf> objfdt thbt dfsdribfs this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt's dolumns
     * @throws SQLExdfption if bn frror oddurs in gfnfrbting thf RowSft
     * mftb dbtb; or if thf <dodf>CbdhfdRowSftImpl</dodf> is fmpty.
     * @sff jbvbx.sql.RowSftMftbDbtb
     */
    publid RfsultSftMftbDbtb gftMftbDbtb() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * Thf typf of thf <dodf>Objfdt</dodf> will bf thf dffbult
     * Jbvb objfdt typf dorrfsponding to thf dolumn's SQL typf,
     * following thf mbpping for built-in typfs spfdififd in thf JDBC 3.0
     * spfdifidbtion.
     * <P>
     * This mfthod mby blso bf usfd to rfbd dbtbtbbbsf-spfdifid
     * bbstrbdt dbtb typfs.
     * <P>
     * This implfmfntbtion of thf mfthod <dodf>gftObjfdt</dodf> fxtfnds its
     * bfhbvior so thbt it gfts thf bttributfs of bn SQL strudturfd typf
     * bs bn brrby of <dodf>Objfdt</dodf> vblufs.  This mfthod blso dustom
     * mbps SQL usfr-dffinfd typfs to dlbssfs in thf Jbvb progrbmming lbngubgf.
     * Whfn thf spfdififd dolumn dontbins
     * b strudturfd or distindt vbluf, thf bfhbvior of this mfthod is bs
     * if it wfrf b dbll to thf mfthod <dodf>gftObjfdt(dolumnIndfx,
     * this.gftStbtfmfnt().gftConnfdtion().gftTypfMbp())</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b <dodf>jbvb.lbng.Objfdt</dodf> holding thf dolumn vbluf;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds,
     *            thf dursor is not on b vblid row, or thfrf is b problfm gftting
     *            thf <dodf>Clbss</dodf> objfdt for b dustom mbpping
     * @sff #gftObjfdt(String)
     */
    publid Objfdt gftObjfdt(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * Thf typf of thf <dodf>Objfdt</dodf> will bf thf dffbult
     * Jbvb objfdt typf dorrfsponding to thf dolumn's SQL typf,
     * following thf mbpping for built-in typfs spfdififd in thf JDBC 3.0
     * spfdifidbtion.
     * <P>
     * This mfthod mby blso bf usfd to rfbd dbtbtbbbsf-spfdifid
     * bbstrbdt dbtb typfs.
     * <P>
     * This implfmfntbtion of thf mfthod <dodf>gftObjfdt</dodf> fxtfnds its
     * bfhbvior so thbt it gfts thf bttributfs of bn SQL strudturfd typf
     * bs bn brrby of <dodf>Objfdt</dodf> vblufs.  This mfthod blso dustom
     * mbps SQL usfr-dffinfd typfs to dlbssfs
     * in thf Jbvb progrbmming lbngubgf. Whfn thf spfdififd dolumn dontbins
     * b strudturfd or distindt vbluf, thf bfhbvior of this mfthod is bs
     * if it wfrf b dbll to thf mfthod <dodf>gftObjfdt(dolumnIndfx,
     * this.gftStbtfmfnt().gftConnfdtion().gftTypfMbp())</dodf>.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>jbvb.lbng.Objfdt</dodf> holding thf dolumn vbluf;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh onf of
     *            this rowsft's dolumn nbmfs, (2) thf dursor is not
     *            on b vblid row, or (3) thfrf is b problfm gftting
     *            thf <dodf>Clbss</dodf> objfdt for b dustom mbpping
     * @sff #gftObjfdt(int)
     */
    publid Objfdt gftObjfdt(String dolumnNbmf) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    //----------------------------------------------------------------

    /**
     * Mbps thf givfn dolumn nbmf for onf of this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt's dolumns to its dolumn numbfr.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn thf dolumn indfx of thf givfn dolumn nbmf
     * @throws SQLExdfption if thf givfn dolumn nbmf dofs not mbtdh onf
     *            of this rowsft's dolumn nbmfs
     */
    publid int findColumn(String dolumnNbmf) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    //--------------------------JDBC 2.0-----------------------------------

    //---------------------------------------------------------------------
    // Gfttfr's bnd Sfttfr's
    //---------------------------------------------------------------------

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b Jbvb dhbrbdtfr strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of two-bytf unidodf dhbrbdtfrs in b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.  If thf vbluf is
     * SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>CHAR, VARCHAR, <b>LONGVARCHAR</b>, BINARY, VARBINARY</dodf> or
     * <dodf>LONGVARBINARY</dodf> vbluf.
     * Thf bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typf.
     * @sff #gftChbrbdtfrStrfbm(String)
     */
    publid jbvb.io.Rfbdfr gftChbrbdtfrStrfbm(int dolumnIndfx) throws SQLExdfption{
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf storfd in thf dfsignbtfd dolumn
     * of thf durrfnt row bs b <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must
     * bf rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf
     * nfxt dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt giving thf SQL nbmf of
     *        b dolumn in this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     *         bs b strfbm of two-bytf Unidodf dhbrbdtfrs.  If thf vbluf is
     *         SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>CHAR, VARCHAR, <b>LONGVARCHAR</b>,
     * BINARY, VARYBINARY</dodf> or <dodf>LONGVARBINARY</dodf> vbluf.
     * Thf bold SQL typf dfsignbtfs thf rfdommfndfd rfturn typf.
     */
    publid jbvb.io.Rfbdfr gftChbrbdtfrStrfbm(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @rfturn b <dodf>jbvb.mbth.BigDfdimbl</dodf> vbluf with full prfdision;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>TINYINT, SMALLINT, INTEGER, BIGINT, REAL,
     * FLOAT, DOUBLE, <b>DECIMAL</b>, <b>NUMERIC</b>, BIT, CHAR, VARCHAR</dodf>
     * or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf dfsignbtfs thf
     * rfdommfndfd rfturn typfs thbt this mfthod is usfd to rftrifvf.
     * @sff #gftBigDfdimbl(String)
     */
    publid BigDfdimbl gftBigDfdimbl(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>jbvb.mbth.BigDfdimbl</dodf> vbluf with full prfdision;
     *         if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     * b dolumn in this rowsft, (2) thf dursor is not on onf of
     * this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     * dolumn dofs not storf bn SQL <dodf>TINYINT, SMALLINT, INTEGER
     * BIGINT, REAL, FLOAT, DOUBLE, <b>DECIMAL</b>, <b>NUMERIC</b>, BIT CHAR,
     * VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf. Thf bold SQL typf
     * dfsignbtfs thf rfdommfndfd rfturn typf thbt this mfthod is usfd to
     * rftrifvf
     * @sff #gftBigDfdimbl(int)
     */
    publid BigDfdimbl gftBigDfdimbl(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    //---------------------------------------------------------------------
    // Trbvfrsbl/Positioning
    //---------------------------------------------------------------------

    /**
     * Rfturns thf numbfr of rows in this <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * @rfturn numbfr of rows in thf rowsft
     */
    publid int sizf() {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Indidbtfs whfthfr thf dursor is bfforf thf first row in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is bfforf thf first row;
     *         <dodf>fblsf</dodf> othfrwisf or if thf rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isBfforfFirst() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Indidbtfs whfthfr thf dursor is bftfr thf lbst row in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is bftfr thf lbst row;
     *         <dodf>fblsf</dodf> othfrwisf or if thf rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isAftfrLbst() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Indidbtfs whfthfr thf dursor is on thf first row in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf first row;
     *         <dodf>fblsf</dodf> othfrwisf or if thf rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isFirst() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Indidbtfs whfthfr thf dursor is on thf lbst row in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     * <P>
     * Notf: Cblling thf mfthod <dodf>isLbst</dodf> mby bf fxpfnsivf
     * bfdbusf thf JDBC drivfr might nffd to fftdh bhfbd onf row in ordfr
     * to dftfrminf whfthfr thf durrfnt row is thf lbst row in this rowsft.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf lbst row;
     *         <dodf>fblsf</dodf> othfrwisf or if this rowsft dontbins no rows
     * @throws SQLExdfption if bn frror oddurs
     */
    publid boolfbn isLbst() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf front of
     * thf rowsft, just bfforf thf first row. This mfthod hbs no ffffdt if
     * this rowsft dontbins no rows.
     *
     * @throws SQLExdfption if bn frror oddurs or thf typf of this rowsft
     *            is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid void bfforfFirst() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf fnd of
     * thf rowsft, just bftfr thf lbst row. This mfthod hbs no ffffdt if
     * this rowsft dontbins no rows.
     *
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void bftfrLbst() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf first row
     * bnd rfturns <dodf>truf</dodf> if thf opfrbtion wbs suddfssful.  This
     * mfthod blso notififs rfgistfrfd listfnfrs thbt thf dursor hbs movfd.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     *         <dodf>fblsf</dodf> othfrwisf or if thfrf brf no rows in this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if thf typf of this rowsft
     *            is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn first() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf first
     * row bnd rfturns <dodf>truf</dodf> if thf opfrbtion is suddfssful.
     * <P>
     * This mfthod is dbllfd intfrnblly by thf mfthods <dodf>first</dodf>,
     * <dodf>isFirst</dodf>, bnd <dodf>bbsolutf</dodf>.
     * It in turn dblls thf mfthod <dodf>intfrnblNfxt</dodf> in ordfr to
     * hbndlf thf dbsf whfrf thf first row is b dflftfd row thbt is not visiblf.
     * <p>
     * This is b implfmfntbtion only mfthod bnd is not rfquirfd bs b stbndbrd
     * implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor movfd to thf first row;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if bn frror oddurs
     */
    protfdtfd boolfbn intfrnblFirst() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf lbst row
     * bnd rfturns <dodf>truf</dodf> if thf opfrbtion wbs suddfssful.  This
     * mfthod blso notififs rfgistfrfd listfnfrs thbt thf dursor hbs movfd.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     *         <dodf>fblsf</dodf> othfrwisf or if thfrf brf no rows in this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @throws SQLExdfption if thf typf of this rowsft
     *            is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn lbst() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf lbst
     * row bnd rfturns <dodf>truf</dodf> if thf opfrbtion is suddfssful.
     * <P>
     * This mfthod is dbllfd intfrnblly by thf mfthod <dodf>lbst</dodf>
     * whfn rows hbvf bffn dflftfd bnd thf dflftions brf not visiblf.
     * Thf mfthod <dodf>intfrnblLbst</dodf> hbndlfs thf dbsf whfrf thf
     * lbst row is b dflftfd row thbt is not visiblf by in turn dblling
     * thf mfthod <dodf>intfrnblPrfvious</dodf>.
     * <p>
     * This is b implfmfntbtion only mfthod bnd is not rfquirfd bs b stbndbrd
     * implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor movfd to thf lbst row;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if bn frror oddurs
     */
    protfdtfd boolfbn intfrnblLbst() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns thf numbfr of thf durrfnt row in this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt. Thf first row is numbfr 1, thf sfdond numbfr 2, bnd so on.
     *
     * @rfturn thf numbfr of thf durrfnt row;  <dodf>0</dodf> if thfrf is no
     *         durrfnt row
     * @throws SQLExdfption if bn frror oddurs; or if thf <dodf>CbdhfRowSftImpl</dodf>
     *         is fmpty
     */
    publid int gftRow() throws SQLExdfption {
        rfturn drsSynd.gftRow();
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf row numbfr
     * spfdififd.
     *
     * <p>If thf numbfr is positivf, thf dursor movfs to bn bbsolutf row with
     * rfspfdt to thf bfginning of thf rowsft.  Thf first row is row 1, thf sfdond
     * is row 2, bnd so on.  For fxbmplf, thf following dommbnd, in whidh
     * <dodf>drs</dodf> is b <dodf>CbdhfdRowSftImpl</dodf> objfdt, movfs thf dursor
     * to thf fourth row, stbrting from thf bfginning of thf rowsft.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(4);
     *
     * </dodf> </PRE>
     * <P>
     * If thf numbfr is nfgbtivf, thf dursor movfs to bn bbsolutf row position
     * with rfspfdt to thf fnd of thf rowsft.  For fxbmplf, dblling
     * <dodf>bbsolutf(-1)</dodf> positions thf dursor on thf lbst row,
     * <dodf>bbsolutf(-2)</dodf> movfs it on thf nfxt-to-lbst row, bnd so on.
     * If thf <dodf>CbdhfdRowSftImpl</dodf> objfdt <dodf>drs</dodf> hbs fivf rows,
     * thf following dommbnd movfs thf dursor to thf fourth-to-lbst row, whidh
     * in thf dbsf of b  rowsft with fivf rows, is blso thf sfdond row, dounting
     * from thf bfginning.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(-4);
     *
     * </dodf> </PRE>
     *
     * If thf numbfr spfdififd is lbrgfr thbn thf numbfr of rows, thf dursor
     * will movf to thf position bftfr thf lbst row. If thf numbfr spfdififd
     * would movf thf dursor onf or morf rows bfforf thf first row, thf dursor
     * movfs to thf position bfforf thf first row.
     * <P>
     * Notf: Cblling <dodf>bbsolutf(1)</dodf> is thf sbmf bs dblling thf
     * mfthod <dodf>first()</dodf>.  Cblling <dodf>bbsolutf(-1)</dodf> is thf
     * sbmf bs dblling <dodf>lbst()</dodf>.
     *
     * @pbrbm row b positivf numbfr to indidbtf thf row, stbrting row numbfring from
     *        thf first row, whidh is <dodf>1</dodf>; b nfgbtivf numbfr to indidbtf
     *        thf row, stbrting row numbfring from thf lbst row, whidh is
     *        <dodf>-1</dodf>; it must not bf <dodf>0</dodf>
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf rowsft; <dodf>fblsf</dodf>
     *         othfrwisf
     * @throws SQLExdfption if thf givfn dursor position is <dodf>0</dodf> or thf
     *            typf of this rowsft is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn bbsolutf( int row ) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs thf dursor thf spfdififd numbfr of rows from thf durrfnt
     * position, with b positivf numbfr moving it forwbrd bnd b
     * nfgbtivf numbfr moving it bbdkwbrd.
     * <P>
     * If thf numbfr is positivf, thf dursor movfs thf spfdififd numbfr of
     * rows towbrd thf fnd of thf rowsft, stbrting bt thf durrfnt row.
     * For fxbmplf, thf following dommbnd, in whidh
     * <dodf>drs</dodf> is b <dodf>CbdhfdRowSftImpl</dodf> objfdt with 100 rows,
     * movfs thf dursor forwbrd four rows from thf durrfnt row.  If thf
     * durrfnt row is 50, thf dursor would movf to row 54.
     * <PRE><dodf>
     *
     *    drs.rflbtivf(4);
     *
     * </dodf> </PRE>
     * <P>
     * If thf numbfr is nfgbtivf, thf dursor movfs bbdk towbrd thf bfginning
     * thf spfdififd numbfr of rows, stbrting bt thf durrfnt row.
     * For fxbmplf, dblling thf mfthod
     * <dodf>bbsolutf(-1)</dodf> positions thf dursor on thf lbst row,
     * <dodf>bbsolutf(-2)</dodf> movfs it on thf nfxt-to-lbst row, bnd so on.
     * If thf <dodf>CbdhfdRowSftImpl</dodf> objfdt <dodf>drs</dodf> hbs fivf rows,
     * thf following dommbnd movfs thf dursor to thf fourth-to-lbst row, whidh
     * in thf dbsf of b  rowsft with fivf rows, is blso thf sfdond row
     * from thf bfginning.
     * <PRE><dodf>
     *
     *    drs.bbsolutf(-4);
     *
     * </dodf> </PRE>
     *
     * If thf numbfr spfdififd is lbrgfr thbn thf numbfr of rows, thf dursor
     * will movf to thf position bftfr thf lbst row. If thf numbfr spfdififd
     * would movf thf dursor onf or morf rows bfforf thf first row, thf dursor
     * movfs to thf position bfforf thf first row. In both dbsfs, this mfthod
     * throws bn <dodf>SQLExdfption</dodf>.
     * <P>
     * Notf: Cblling <dodf>bbsolutf(1)</dodf> is thf sbmf bs dblling thf
     * mfthod <dodf>first()</dodf>.  Cblling <dodf>bbsolutf(-1)</dodf> is thf
     * sbmf bs dblling <dodf>lbst()</dodf>.  Cblling <dodf>rflbtivf(0)</dodf>
     * is vblid, but it dofs not dhbngf thf dursor position.
     *
     * @pbrbm rows bn <dodf>int</dodf> indidbting thf numbfr of rows to movf
     *             thf dursor, stbrting bt thf durrfnt row; b positivf numbfr
     *             movfs thf dursor forwbrd; b nfgbtivf numbfr movfs thf dursor
     *             bbdkwbrd; must not movf thf dursor pbst thf vblid
     *             rows
     * @rfturn <dodf>truf</dodf> if thf dursor is on b row in this
     *         <dodf>CbdhfdRowSftImpl</dodf> objfdt; <dodf>fblsf</dodf>
     *         othfrwisf
     * @throws SQLExdfption if thfrf brf no rows in this rowsft, thf dursor is
     *         positionfd fithfr bfforf thf first row or bftfr thf lbst row, or
     *         thf rowsft is typf <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn rflbtivf(int rows) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs this <dodf>CbdhfdRowSftImpl</dodf> objfdt's dursor to thf
     * prfvious row bnd rfturns <dodf>truf</dodf> if thf dursor is on
     * b vblid row or <dodf>fblsf</dodf> if it is not.
     * This mfthod blso notififs bll listfnfrs rfgistfrfd with this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt thbt its dursor hbs movfd.
     * <P>
     * Notf: dblling thf mfthod <dodf>prfvious()</dodf> is not thf sbmf
     * bs dblling thf mfthod <dodf>rflbtivf(-1)</dodf>.  This is truf
     * bfdbusf it is possiblf to dbll <dodf>prfvious()</dodf> from thf insfrt
     * row, from bftfr thf lbst row, or from thf durrfnt row, whfrfbs
     * <dodf>rflbtivf</dodf> mby only bf dbllfd from thf durrfnt row.
     * <P>
     * Thf mfthod <dodf>prfvious</dodf> mby usfd in b <dodf>whilf</dodf>
     * loop to itfrbtf through b rowsft stbrting bftfr thf lbst row
     * bnd moving towbrd thf bfginning. Thf loop fnds whfn <dodf>prfvious</dodf>
     * rfturns <dodf>fblsf</dodf>, mfbning thbt thfrf brf no morf rows.
     * For fxbmplf, thf following dodf frbgmfnt rftrifvfs bll thf dbtb in
     * thf <dodf>CbdhfdRowSftImpl</dodf> objfdt <dodf>drs</dodf>, whidh hbs
     * thrff dolumns.  Notf thbt thf dursor must initiblly bf positionfd
     * bftfr thf lbst row so thbt thf first dbll to thf mfthod
     * <dodf>prfvious</dodf> plbdfs thf dursor on thf lbst linf.
     * <PRE> <dodf>
     *
     *     drs.bftfrLbst();
     *     whilf (prfvious()) {
     *         String nbmf = drs.gftString(1);
     *         int bgf = drs.gftInt(2);
     *         short ssn = drs.gftShort(3);
     *         Systfm.out.println(nbmf + "   " + bgf + "   " + ssn);
     *     }
     *
     * </dodf> </PRE>
     * This mfthod throws bn <dodf>SQLExdfption</dodf> if thf dursor is not
     * on b row in thf rowsft, bfforf thf first row, or bftfr thf lbst row.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     *         <dodf>fblsf</dodf> if it is bfforf thf first row or bftfr thf
     *         lbst row
     * @throws SQLExdfption if thf dursor is not on b vblid position or thf
     *           typf of this rowsft is <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>
     */
    publid boolfbn prfvious() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs thf dursor to thf prfvious row in this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt, skipping pbst dflftfd rows thbt brf not visiblf; rfturns
     * <dodf>truf</dodf> if thf dursor is on b row in this rowsft bnd
     * <dodf>fblsf</dodf> whfn thf dursor gofs bfforf thf first row.
     * <P>
     * This mfthod is dbllfd intfrnblly by thf mfthod <dodf>prfvious</dodf>.
     * <P>
     * This is b implfmfntbtion only mfthod bnd is not rfquirfd bs b stbndbrd
     * implfmfntbtion of thf <dodf>CbdhfdRowSft</dodf> intfrfbdf.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b row in this rowsft;
     *         <dodf>fblsf</dodf> whfn thf dursor rfbdhfs thf position bfforf
     *         thf first row
     * @throws SQLExdfption if bn frror oddurs
     */
    protfdtfd boolfbn intfrnblPrfvious() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    //---------------------------------------------------------------------
    // Updbtfs
    //---------------------------------------------------------------------

    /**
     * Indidbtfs whfthfr thf durrfnt row of this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt hbs bffn updbtfd.  Thf vbluf rfturnfd
     * dfpfnds on whfthfr this rowsft dbn dftfdt updbtfs: <dodf>fblsf</dodf>
     * will blwbys bf rfturnfd if it dofs not dftfdt updbtfs.
     *
     * @rfturn <dodf>truf</dodf> if thf row hbs bffn visibly updbtfd
     *         by thf ownfr or bnothfr bnd updbtfs brf dftfdtfd;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *            not on b vblid row
     *
     * @sff DbtbbbsfMftbDbtb#updbtfsArfDftfdtfd
     */
    publid boolfbn rowUpdbtfd() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Indidbtfs whfthfr thf dfsignbtfd dolumn of thf durrfnt row of
     * this <dodf>CbdhfdRowSftImpl</dodf> objfdt hbs bffn updbtfd. Thf
     * vbluf rfturnfd dfpfnds on whfthfr this rowsft dbn dftdtfd updbtfs:
     * <dodf>fblsf</dodf> will blwbys bf rfturnfd if it dofs not dftfdt updbtfs.
     *
     * @pbrbm idx thf indfx idfntififr of thf dolumn thbt mby bf hbvf bffn updbtfd.
     * @rfturn <dodf>truf</dodf> is thf dfsignbtfd dolumn hbs bffn updbtfd
     * bnd thf rowsft dftfdts updbtfs; <dodf>fblsf</dodf> if thf rowsft hbs not
     * bffn updbtfd or thf rowsft dofs not dftfdt updbtfs
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *          on b vblid row
     * @sff DbtbbbsfMftbDbtb#updbtfsArfDftfdtfd
     */
    publid boolfbn dolumnUpdbtfd(int idx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Indidbtfs whfthfr thf dfsignbtfd dolumn of thf durrfnt row of
     * this <dodf>CbdhfdRowSftImpl</dodf> objfdt hbs bffn updbtfd. Thf
     * vbluf rfturnfd dfpfnds on whfthfr this rowsft dbn dftdtfd updbtfs:
     * <dodf>fblsf</dodf> will blwbys bf rfturnfd if it dofs not dftfdt updbtfs.
     *
     * @pbrbm dolumnNbmf thf <dodf>String</dodf> dolumn nbmf dolumn thbt mby bf hbvf
     * bffn updbtfd.
     * @rfturn <dodf>truf</dodf> is thf dfsignbtfd dolumn hbs bffn updbtfd
     * bnd thf rowsft dftfdts updbtfs; <dodf>fblsf</dodf> if thf rowsft hbs not
     * bffn updbtfd or thf rowsft dofs not dftfdt updbtfs
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *          on b vblid row
     * @sff DbtbbbsfMftbDbtb#updbtfsArfDftfdtfd
     */
    publid boolfbn dolumnUpdbtfd(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Indidbtfs whfthfr thf durrfnt row hbs bffn insfrtfd.  Thf vbluf rfturnfd
     * dfpfnds on whfthfr or not thf rowsft dbn dftfdt visiblf insfrts.
     *
     * @rfturn <dodf>truf</dodf> if b row hbs bffn insfrtfd bnd insfrts brf dftfdtfd;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if thf dursor is on thf insfrt row or not
     *            not on b vblid row
     *
     * @sff DbtbbbsfMftbDbtb#insfrtsArfDftfdtfd
     */
    publid boolfbn rowInsfrtfd() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Indidbtfs whfthfr thf durrfnt row hbs bffn dflftfd.  A dflftfd row
     * mby lfbvf b visiblf "holf" in b rowsft.  This mfthod dbn bf usfd to
     * dftfdt sudh holfs if thf rowsft dbn dftfdt dflftions. This mfthod
     * will blwbys rfturn <dodf>fblsf</dodf> if this rowsft dbnnot dftfdt
     * dflftions.
     *
     * @rfturn <dodf>truf</dodf> if (1)thf durrfnt row is blbnk, indidbting thbt
     *         thf row hbs bffn dflftfd, bnd (2)dflftions brf dftfdtfd;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if thf dursor is on b vblid row in this rowsft
     * @sff DbtbbbsfMftbDbtb#dflftfsArfDftfdtfd
     */
    publid boolfbn rowDflftfd() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd nullbblf dolumn in thf durrfnt row or thf
     * insfrt row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with
     * <dodf>null</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft; howfvfr, bnothfr mfthod must bf dbllfd to domplftf
     * thf updbtf prodfss. If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to mbrk thf row bs updbtfd
     * bnd to notify listfnfrs thbt thf row hbs dhbngfd.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd to insfrt thf nfw row into this rowsft bnd to notify
     * listfnfrs thbt b row hbs dhbngfd.
     * <P>
     * In ordfr to propbgbtf updbtfs in this rowsft to thf undfrlying
     * dbtb sourdf, bn bpplidbtion must dbll thf mfthod {@link #bddfptChbngfs}
     * bftfr it dblls fithfr <dodf>updbtfRow</dodf> or <dodf>insfrtRow</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfNull(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>boolfbn</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBoolfbn(int dolumnIndfx, boolfbn x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytf(int dolumnIndfx, bytf x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>short</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfShort(int dolumnIndfx, short x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>int</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfInt(int dolumnIndfx, int x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>long</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfLong(int dolumnIndfx, long x) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();

    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>flobt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfFlobt(int dolumnIndfx, flobt x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDoublf(int dolumnIndfx, doublf x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBigDfdimbl(int dolumnIndfx, BigDfdimbl x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>String</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to mbrk thf row bs updbtfd.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd to insfrt thf nfw row into this rowsft bnd mbrk it
     * bs insfrtfd. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     * <P>
     * Thf mfthod <dodf>bddfptChbngfs</dodf> must bf dbllfd if thf
     * updbtfd vblufs brf to bf writtfn bbdk to thf undfrlying dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfString(int dolumnIndfx, String x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> brrby.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytfs(int dolumnIndfx, bytf x[]) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Dbtf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>DATE</dodf> or <dodf>TIMESTAMP</dodf>, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDbtf(int dolumnIndfx, jbvb.sql.Dbtf x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>TIME</dodf> or <dodf>TIMESTAMP</dodf>, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimf(int dolumnIndfx, jbvb.sql.Timf x) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timfstbmp</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf typf of thf dfsignbtfd dolumn is not
     *            bn SQL <dodf>DATE</dodf>, <dodf>TIME</dodf>, or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimfstbmp(int dolumnIndfx, jbvb.sql.Timfstbmp x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * ASCII strfbm vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf numbfr of onf-bytf ASCII dhbrbdtfrs in thf strfbm
     * @throws SQLExdfption if this mfthod is invokfd
     */
    publid void updbtfAsdiiStrfbm(int dolumnIndfx, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.InputStrfbm</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>, or
     *          <dodf>LONGVARBINARY</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in bytfs
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf dbtb in thf strfbm is not binbry, or
     *            (4) this rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBinbryStrfbm(int dolumnIndfx, jbvb.io.InputStrfbm x,int lfngth) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.Rfbdfr</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>,
     *          <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>, <dodf>VARCHAR</dodf>,
     *          or <dodf>LONGVARCHAR</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in dhbrbdtfrs
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, (3) thf dbtb in thf strfbm is not b binbry or
     *            dhbrbdtfr typf, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfChbrbdtfrStrfbm(int dolumnIndfx, jbvb.io.Rfbdfr x, int lfngth) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.  Thf <dodf>sdblf</dodf> pbrbmftfr indidbtfs
     * thf numbfr of digits to thf right of thf dfdimbl point bnd is ignorfd
     * if thf nfw dolumn vbluf is not b typf thbt will bf mbppfd to bn SQL
     * <dodf>DECIMAL</dodf> or <dodf>NUMERIC</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point (for
     *              <dodf>DECIMAL</dodf> bnd <dodf>NUMERIC</dodf> typfs only)
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(int dolumnIndfx, Objfdt x, int sdblf) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(int dolumnIndfx, Objfdt x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    /**
     * Sfts thf dfsignbtfd nullbblf dolumn in thf durrfnt row or thf
     * insfrt row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with
     * <dodf>null</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfNull(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>boolfbn</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBoolfbn(String dolumnNbmf, boolfbn x) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytf(String dolumnNbmf, bytf x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>short</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfShort(String dolumnNbmf, short x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>int</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfInt(String dolumnNbmf, int x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>long</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfLong(String dolumnNbmf, long x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>flobt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfFlobt(String dolumnNbmf, flobt x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDoublf(String dolumnNbmf, doublf x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in thf durrfnt row or thf insfrt
     * row of this rowsft, but it dofs not updbtf thf dbtbbbsf.
     * If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBigDfdimbl(String dolumnNbmf, BigDfdimbl x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>String</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfString(String dolumnNbmf, String x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>bytf</dodf> brrby.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBytfs(String dolumnNbmf, bytf x[]) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Dbtf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfDbtf(String dolumnNbmf, jbvb.sql.Dbtf x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timf</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf>, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimf(String dolumnNbmf, jbvb.sql.Timf x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Timfstbmp</dodf> objfdt.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds or
     *            thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf typf
     *            of thf dfsignbtfd dolumn is not bn SQL <dodf>DATE</dodf>,
     *            <dodf>TIME</dodf>, or <dodf>TIMESTAMP</dodf>, or (4) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfTimfstbmp(String dolumnNbmf, jbvb.sql.Timfstbmp x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * ASCII strfbm vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf numbfr of onf-bytf ASCII dhbrbdtfrs in thf strfbm
     */
    publid void updbtfAsdiiStrfbm(String dolumnNbmf,
    jbvb.io.InputStrfbm x,
    int lfngth) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf; must bf b <dodf>jbvb.io.InputStrfbm</dodf>
     *          dontbining <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>, or
     *          <dodf>LONGVARBINARY</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in bytfs
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf dbtb
     *            in thf strfbm is not binbry, or (4) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBinbryStrfbm(String dolumnNbmf, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm rfbdfr thf nfw dolumn vbluf; must bf b
     * <dodf>jbvb.io.Rfbdfr</dodf> dontbining <dodf>BINARY</dodf>,
     * <dodf>VARBINARY</dodf>, <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>,
     * <dodf>VARCHAR</dodf>, or <dodf>LONGVARCHAR</dodf> dbtb
     * @pbrbm lfngth thf lfngth of thf strfbm in dhbrbdtfrs
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, (3) thf dbtb
     *            in thf strfbm is not b binbry or dhbrbdtfr typf, or (4) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfChbrbdtfrStrfbm(String dolumnNbmf,
    jbvb.io.Rfbdfr rfbdfr,
    int lfngth) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.  Thf <dodf>sdblf</dodf> pbrbmftfr
     * indidbtfs thf numbfr of digits to thf right of thf dfdimbl point
     * bnd is ignorfd if thf nfw dolumn vbluf is not b typf thbt will bf
     *  mbppfd to bn SQL <dodf>DECIMAL</dodf> or <dodf>NUMERIC</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point (for
     *              <dodf>DECIMAL</dodf> bnd <dodf>NUMERIC</dodf> typfs only)
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(String dolumnNbmf, Objfdt x, int sdblf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>Objfdt</dodf> vbluf.
     * <P>
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfObjfdt(String dolumnNbmf, Objfdt x) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Insfrts thf dontfnts of this <dodf>CbdhfdRowSftImpl</dodf> objfdt's insfrt
     * row into this rowsft immfdibtfly following thf durrfnt row.
     * If thf durrfnt row is thf
     * position bftfr thf lbst row or bfforf thf first row, thf nfw row will
     * bf insfrtfd bt thf fnd of thf rowsft.  This mfthod blso notififs
     * listfnfrs rfgistfrfd with this rowsft thbt thf row hbs dhbngfd.
     * <P>
     * Thf dursor must bf on thf insfrt row whfn this mfthod is dbllfd.
     *
     * @throws SQLExdfption if (1) thf dursor is not on thf insfrt row,
     *            (2) onf or morf of thf non-nullbblf dolumns in thf insfrt
     *            row hbs not bffn givfn b vbluf, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void insfrtRow() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Mbrks thf durrfnt row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs
     * updbtfd bnd notififs listfnfrs rfgistfrfd with this rowsft thbt thf
     * row hbs dhbngfd.
     * <P>
     * This mfthod  dbnnot bf dbllfd whfn thf dursor is on thf insfrt row, bnd
     * it should bf dbllfd bfforf thf dursor movfs to bnothfr row.  If it is
     * dbllfd bftfr thf dursor movfs to bnothfr row, this mfthod hbs no ffffdt,
     * bnd thf updbtfs mbdf bfforf thf dursor movfd will bf lost.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row or this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRow() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Dflftfs thf durrfnt row from this <dodf>CbdhfdRowSftImpl</dodf> objfdt bnd
     * notififs listfnfrs rfgistfrfd with this rowsft thbt b row hbs dhbngfd.
     * This mfthod dbnnot bf dbllfd whfn thf dursor is on thf insfrt row.
     * <P>
     * This mfthod mbrks thf durrfnt row bs dflftfd, but it dofs not dflftf
     * thf row from thf undfrlying dbtb sourdf.  Thf mfthod
     * <dodf>bddfptChbngfs</dodf> must bf dbllfd to dflftf thf row in
     * thf dbtb sourdf.
     *
     * @throws SQLExdfption if (1) this mfthod is dbllfd whfn thf dursor
     *            is on thf insfrt row, bfforf thf first row, or bftfr thf
     *            lbst row or (2) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void dflftfRow() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf durrfnt row with its originbl vbluf bnd mbrks thf row bs
     * not updbtfd, thus undoing bny dhbngfs mbdf to thf row sindf thf
     * lbst dbll to thf mfthods <dodf>updbtfRow</dodf> or <dodf>dflftfRow</dodf>.
     * This mfthod should bf dbllfd only whfn thf dursor is on b row in
     * this rowsft.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row, bfforf thf
     *            first row, or bftfr thf lbst row
     */
    publid void rffrfshRow() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rolls bbdk bny updbtfs mbdf to thf durrfnt row of this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bnd notififs listfnfrs thbt
     * b row hbs dhbngfd.  To hbvf bn ffffdt, this mfthod
     * must bf dbllfd bftfr bn <dodf>updbtfXXX</dodf> mfthod hbs bffn
     * dbllfd bnd bfforf thf mfthod <dodf>updbtfRow</dodf> hbs bffn dbllfd.
     * If no updbtfs hbvf bffn mbdf or thf mfthod <dodf>updbtfRow</dodf>
     * hbs blrfbdy bffn dbllfd, this mfthod hbs no ffffdt.
     *
     * @throws SQLExdfption if thf dursor is on thf insfrt row, bfforf thf
     *            first row, or bftfr thf lbst row
     */
    publid void dbndflRowUpdbtfs() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs thf dursor for this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * to thf insfrt row.  Thf durrfnt row in thf rowsft is rfmfmbfrfd
     * whilf thf dursor is on thf insfrt row.
     * <P>
     * Thf insfrt row is b spfdibl row bssodibtfd with bn updbtbblf
     * rowsft.  It is fssfntiblly b bufffr whfrf b nfw row mby
     * bf donstrudtfd by dblling thf bppropribtf <dodf>updbtfXXX</dodf>
     * mfthods to bssign b vbluf to fbdh dolumn in thf row.  A domplftf
     * row must bf donstrudtfd; thbt is, fvfry dolumn thbt is not nullbblf
     * must bf bssignfd b vbluf.  In ordfr for thf nfw row to bfdomf pbrt
     * of this rowsft, thf mfthod <dodf>insfrtRow</dodf> must bf dbllfd
     * bfforf thf dursor is movfd bbdk to thf rowsft.
     * <P>
     * Only dfrtbin mfthods mby bf invokfd whilf thf dursor is on thf insfrt
     * row; mbny mfthods throw bn fxdfption if thfy brf dbllfd whilf thf
     * dursor is thfrf.  In bddition to thf <dodf>updbtfXXX</dodf>
     * bnd <dodf>insfrtRow</dodf> mfthods, only thf <dodf>gftXXX</dodf> mfthods
     * mby bf dbllfd whfn thf dursor is on thf insfrt row.  A <dodf>gftXXX</dodf>
     * mfthod should bf dbllfd on b dolumn only bftfr bn <dodf>updbtfXXX</dodf>
     * mfthod hbs bffn dbllfd on thbt dolumn; othfrwisf, thf vbluf rfturnfd is
     * undftfrminfd.
     *
     * @throws SQLExdfption if this <dodf>CbdhfdRowSftImpl</dodf> objfdt is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void movfToInsfrtRow() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Movfs thf dursor for this <dodf>CbdhfdRowSftImpl</dodf> objfdt to
     * thf durrfnt row.  Thf durrfnt row is thf row thf dursor wbs on
     * whfn thf mfthod <dodf>movfToInsfrtRow</dodf> wbs dbllfd.
     * <P>
     * Cblling this mfthod hbs no ffffdt unlfss it is dbllfd whilf thf
     * dursor is on thf insfrt row.
     *
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void movfToCurrfntRow() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns <dodf>null</dodf>.
     *
     * @rfturn <dodf>null</dodf>
     * @throws SQLExdfption if bn frror oddurs
     */
    publid Stbtfmfnt gftStbtfmfnt() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn <dodf>Objfdt</dodf> in
     * thf Jbvb progrbmming lbngubgf, using thf givfn
     * <dodf>jbvb.util.Mbp</dodf> objfdt to dustom mbp thf vbluf if
     * bppropribtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm mbp b <dodf>jbvb.util.Mbp</dodf> objfdt showing thf mbpping
     *            from SQL typf nbmfs to dlbssfs in thf Jbvb progrbmming
     *            lbngubgf
     * @rfturn bn <dodf>Objfdt</dodf> rfprfsfnting thf SQL vbluf
     * @throws SQLExdfption if thf givfn dolumn indfx is out of bounds or
     *            thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row
     */
    publid Objfdt gftObjfdt(int dolumnIndfx,
                            jbvb.util.Mbp<String,Clbss<?>> mbp)
          throws SQLExdfption
    {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Rff</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b <dodf>Rff</dodf> objfdt rfprfsfnting bn SQL<dodf> REF</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>REF</dodf> vbluf
     * @sff #gftRff(String)
     */
    publid Rff gftRff(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Blob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b <dodf>Blob</dodf> objfdt rfprfsfnting bn SQL <dodf>BLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>BLOB</dodf> vbluf
     * @sff #gftBlob(String)
     */
    publid Blob gftBlob(int dolumnIndfx) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Clob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn b <dodf>Clob</dodf> objfdt rfprfsfnting bn SQL <dodf>CLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>CLOB</dodf> vbluf
     * @sff #gftClob(String)
     */
    publid Clob gftClob(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn <dodf>Arrby</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @rfturn bn <dodf>Arrby</dodf> objfdt rfprfsfnting bn SQL
     *         <dodf>ARRAY</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     *            SQL <dodf>ARRAY</dodf> vbluf
     * @sff #gftArrby(String)
     */
    publid Arrby gftArrby(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn <dodf>Objfdt</dodf> in
     * thf Jbvb progrbmming lbngubgf, using thf givfn
     * <dodf>jbvb.util.Mbp</dodf> objfdt to dustom mbp thf vbluf if
     * bppropribtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm mbp b <dodf>jbvb.util.Mbp</dodf> objfdt showing thf mbpping
     *        from SQL typf nbmfs to dlbssfs in thf Jbvb progrbmming
     *        lbngubgf
     * @rfturn bn <dodf>Objfdt</dodf> rfprfsfnting thf SQL vbluf
     * @throws SQLExdfption if thf givfn dolumn nbmf is not thf nbmf of
     *         b dolumn in this rowsft or thf dursor is not on onf of
     *         this rowsft's rows or its insfrt row
     */
    publid Objfdt gftObjfdt(String dolumnNbmf,
                            jbvb.util.Mbp<String,Clbss<?>> mbp)
    throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Rff</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>Rff</dodf> objfdt rfprfsfnting bn SQL<dodf> REF</dodf> vbluf
     * @throws SQLExdfption  if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dolumn vbluf
     *            is not bn SQL <dodf>REF</dodf> vbluf
     * @sff #gftRff(int)
     */
    publid Rff gftRff(String dolNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Blob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>Blob</dodf> objfdt rfprfsfnting bn SQL <dodf>BLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>BLOB</dodf> vbluf
     * @sff #gftBlob(int)
     */
    publid Blob gftBlob(String dolNbmf) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>Clob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn b <dodf>Clob</dodf> objfdt rfprfsfnting bn SQL
     *         <dodf>CLOB</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>CLOB</dodf> vbluf
     * @sff #gftClob(int)
     */
    publid Clob gftClob(String dolNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs bn <dodf>Arrby</dodf> objfdt
     * in thf Jbvb progrbmming lbngugbgf.
     *
     * @pbrbm dolNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @rfturn bn <dodf>Arrby</dodf> objfdt rfprfsfnting bn SQL
     *         <dodf>ARRAY</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>ARRAY</dodf> vbluf
     * @sff #gftArrby(int)
     */
    publid Arrby gftArrby(String dolNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Dbtf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Dbtf gftDbtf(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Dbtf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Dbtf gftDbtf(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Timf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timf gftTimf(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Timf</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timf gftTimf(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.sql.Timfstbmp</dodf>
     * objfdt, using thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt bn
     * bppropribtf millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in thf rowsft
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>TIME</dodf> or
     *            <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timfstbmp</dodf> objfdt, using thf givfn
     * <dodf>Cblfndbr</dodf> objfdt to donstrudt bn bppropribtf
     * millisfdond vbluf for thf dbtf.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf in
     *            donstrudting thf dbtf
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf is not thf nbmf of
     *            b dolumn in this rowsft, (2) thf dursor is not on onf of
     *            this rowsft's rows or its insfrt row, or (3) thf dfsignbtfd
     *            dolumn dofs not storf bn SQL <dodf>DATE</dodf>,
     *            <dodf>TIME</dodf>, or <dodf>TIMESTAMP</dodf> vbluf
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /*
     * RowSftIntfrnbl Intfrfbdf
     */

    /**
     * Rftrifvfs thf <dodf>Connfdtion</dodf> objfdt pbssfd to this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt.  This donnfdtion mby bf
     * usfd to populbtf this rowsft with dbtb or to writf dbtb bbdk
     * to its undfrlying dbtb sourdf.
     *
     * @rfturn thf <dodf>Connfdtion</dodf> objfdt pbssfd to this rowsft;
     *         mby bf <dodf>null</dodf> if thfrf is no donnfdtion
     * @throws SQLExdfption if bn frror oddurs
     */
    publid Connfdtion gftConnfdtion() throws SQLExdfption{
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf mftbdbtb for this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * with thf givfn <dodf>RowSftMftbDbtb</dodf> objfdt.
     *
     * @pbrbm md b <dodf>RowSftMftbDbtb</dodf> objfdt instbndf dontbining
     *            mftbdbtb bbout thf dolumsn in thf rowsft
     * @throws SQLExdfption if invblid mftb dbtb is supplifd to thf
     *            rowsft
     */
    publid void sftMftbDbtb(RowSftMftbDbtb md) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns b rfsult sft dontbining thf originbl vbluf of thf rowsft. Thf
     * originbl vbluf is thf stbtf of thf <dodf>CbdhfdRowSftImpl</dodf> bftfr thf
     * lbst populbtion or syndhronizbtion (whidhfvfr oddurrfd most rfdfntly) with
     * thf dbtb sourdf.
     * <p>
     * Thf dursor is positionfd bfforf thf first row in thf rfsult sft.
     * Only rows dontbinfd in thf rfsult sft rfturnfd by <dodf>gftOriginbl()</dodf>
     * brf sbid to hbvf bn originbl vbluf.
     *
     * @rfturn thf originbl rfsult sft of thf rowsft
     * @throws SQLExdfption if bn frror oddurs produdf thf
     *           <dodf>RfsultSft</dodf> objfdt
     */
    publid RfsultSft gftOriginbl() throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns b rfsult sft dontbining thf originbl vbluf of thf durrfnt
     * row only.
     * Thf originbl vbluf is thf stbtf of thf <dodf>CbdhfdRowSftImpl</dodf> bftfr
     * thf lbst populbtion or syndhronizbtion (whidhfvfr oddurrfd most rfdfntly)
     * with thf dbtb sourdf.
     *
     * @rfturn thf originbl rfsult sft of thf row
     * @throws SQLExdfption if thfrf is no durrfnt row
     * @sff #sftOriginblRow
     */
    publid RfsultSft gftOriginblRow() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();

    }

    /**
     * Mbrks thf durrfnt row in this rowsft bs bfing bn originbl row.
     *
     * @throws SQLExdfption if thfrf is no durrfnt row
     * @sff #gftOriginblRow
     */
    publid void sftOriginblRow() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Mbrks bll rows in this rowsft bs bfing originbl rows. Any updbtfs
     * mbdf to thf rows bfdomf thf originbl vblufs for thf rowsft.
     * Cblls to thf mfthod <dodf>sftOriginbl</dodf> donnot bf rfvfrsfd.
     *
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void sftOriginbl() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns bn idfntififr for thf objfdt (tbblf) thbt wbs usfd to drfbtf this
     * rowsft.
     *
     * @rfturn b <dodf>String</dodf> objfdt thbt idfntififs thf tbblf from
     *         whidh this <dodf>CbdhfdRowSftImpl</dodf> objfdt wbs dfrivfd
     * @throws SQLExdfption if bn frror oddurs
     */
    publid String gftTbblfNbmf() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf idfntififr for thf tbblf from whidh this rowsft wbs dfrivfd
     * to thf givfn tbblf nbmf.
     *
     * @pbrbm tbbNbmf b <dodf>String</dodf> objfdt thbt idfntififs thf
     *          tbblf from whidh this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     *          wbs dfrivfd
     * @throws SQLExdfption if bn frror oddurs
     */
    publid void sftTbblfNbmf(String tbbNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns thf dolumns thbt mbkf b kfy to uniqufly idfntify b
     * row in this <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     *
     * @rfturn bn brrby of dolumn numbfrs thbt donstitutfs b primbry
     *           kfy for this rowsft. This brrby should bf fmpty
     *           if no dolumn is rfprfsfntitivf of b primbry kfy
     * @throws SQLExdfption if thf rowsft is fmpty or no dolumns
     *           brf dfsignbtfd bs primbry kfys
     * @sff #sftKfyColumns
     */
    publid int[] gftKfyColumns() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    /**
     * Sfts this <dodf>CbdhfdRowSftImpl</dodf> objfdt's
     * <dodf>kfyCols</dodf> fifld with thf givfn brrby of dolumn
     * numbfrs, whidh forms b kfy for uniqufly idfntifying b row
     * in this rowsft.
     *
     * @pbrbm kfys bn brrby of <dodf>int</dodf> indidbting thf
     *        dolumns thbt form b primbry kfy for this
     *        <dodf>CbdhfdRowSftImpl</dodf> objfdt; fvfry
     *        flfmfnt in thf brrby must bf grfbtfr thbn
     *        <dodf>0</dodf> bnd lfss thbn or fqubl to thf numbfr
     *        of dolumns in this rowsft
     * @throws SQLExdfption if bny of thf numbfrs in thf
     *            givfn brrby is not vblid for this rowsft
     * @sff #gftKfyColumns
     */
    publid void sftKfyColumns(int [] kfys) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm rff thf nfw dolumn <dodf>jbvb.sql.Rff</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *        (2) thf dursor is not on onf of this rowsft's rows or its
     *        insfrt row, or (3) this rowsft is
     *        <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRff(int dolumnIndfx, jbvb.sql.Rff rff) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm rff thf nfw dolumn <dodf>jbvb.sql.Rff</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *        nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *        onf of this rowsft's rows or its insfrt row, or (3) this
     *        rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRff(String dolumnNbmf, jbvb.sql.Rff rff) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm d thf nfw dolumn <dodf>Clob vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *        (2) thf dursor is not on onf of this rowsft's rows or its
     *        insfrt row, or (3) this rowsft is
     *        <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfClob(int dolumnIndfx, Clob d) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm d thf nfw dolumn <dodf>Clob</dodf>vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfClob(String dolumnNbmf, Clob d) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Blob</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm b thf nfw dolumn <dodf>Blob</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBlob(int dolumnIndfx, Blob b) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Blob </dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm b thf nfw dolumn <dodf>Blob</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBlob(String dolumnNbmf, Blob b) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Arrby</dodf> vblufs.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm b thf nfw dolumn <dodf>Arrby</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfArrby(int dolumnIndfx, Arrby b) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>CbdhfdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Arrby</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm b thf nfw dolumn <dodf>Arrby</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfArrby(String dolumnNbmf, Arrby b) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.nft.URL</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @rfturn b jbvb.nft.URL objfdt dontbining thf rfsourdf rfffrfndf dfsdribfd by
     * thf URL
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>DATALINK</dodf> vbluf.
     * @sff #gftURL(String)
     */
    publid jbvb.nft.URL gftURL(int dolumnIndfx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt bs b <dodf>jbvb.nft.URL</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @rfturn b jbvb.nft.URL objfdt dontbining thf rfsourdf rfffrfndf dfsdribfd by
     * thf URL
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf not thf nbmf of b dolumn
     * in this rowsft, or
     * (2) thf dursor is not on onf of this rowsft's rows or its
     * insfrt row, or (3) thf dfsignbtfd dolumn dofs not storf bn
     * SQL <dodf>DATALINK</dodf> vbluf.
     * @sff #gftURL(int)
     */
    publid jbvb.nft.URL gftURL(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();

    }

    /**
     * Thf first wbrning rfportfd by dblls on this <dodf>CbdhfdRowSftImpl</dodf>
     * objfdt is rfturnfd. Subsfqufnt <dodf>CbdhfdRowSftImpl</dodf> wbrnings will
     * bf dhbinfd to this <dodf>SQLWbrning</dodf>. All <dodf>RowSftWbrnings</dodf>
     * wbrnings brf gfnfrbtfd in thf disdonnfdtfd fnvironmfnt bnd rfmbin b
     * sfpfrbtf wbrning dhbin to thbt providfd by thf <dodf>gftWbrnings</dodf>
     * mfthod.
     *
     * <P>Thf wbrning dhbin is butombtidblly dlfbrfd fbdh timf b nfw
     * row is rfbd.
     *
     * <P><B>Notf:</B> This wbrning dhbin only dovfrs wbrnings dbusfd
     * by <dodf>CbdhfdRowSft</dodf> (bnd thfir dhild intfrfbdf)
     * mfthods. All <dodf>SQLWbrnings</dodf> dbn bf obtbinfd using thf
     * <dodf>gftWbrnings</dodf> mfthod whidh trbdks wbrnings gfnfrbtfd
     * by thf undfrlying JDBC drivfr.
     * @rfturn thf first SQLWbrning or null
     *
     */
    publid RowSftWbrning gftRowSftWbrnings() {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

     /**
     * Commits bll dhbngfs pfrformfd by thf <dodf>bddfptChbngfs()</dodf>
     * mfthods
     *
     * @sff jbvb.sql.Connfdtion#dommit
     */
    publid void dommit() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rolls bbdk bll dhbngfs pfrformfd by thf <dodf>bddfptChbngfs()</dodf>
     * mfthods
     *
     * @sff jbvb.sql.Connfdtion#rollbbdk
     */
    publid void rollbbdk() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rolls bbdk bll dhbngfs pfrformfd by thf <dodf>bddfptChbngfs()</dodf>
     * to thf lbst <dodf>Sbvfpoint</dodf> trbnsbdtion mbrkfr.
     *
     * @sff jbvb.sql.Connfdtion#rollbbdk(Sbvfpoint)
     */
    publid void rollbbdk(Sbvfpoint s) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn int brrby.
     * This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnIdxfs thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnIdx is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(int [])</dodf>
     */
    publid void unsftMbtdhColumn(int[] dolumnIdxfs) throws SQLExdfption {
         throw nfw UnsupportfdOpfrbtionExdfption();
    }

   /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn String brrby.
     * This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnIdxfs thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnNbmf is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(String [])</dodf>
     */
    publid void unsftMbtdhColumn(String[] dolumnIdxfs) throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf dolumn nbmf bs <dodf>String</dodf> brrby
     * thbt wbs sft using <dodf>sftMbtdhColumn(String [])</dodf>
     * for this rowsft.
     *
     * @rfturn b <dodf>String</dodf> brrby objfdt thbt dontbins thf dolumn nbmfs
     *         for thf rowsft whidh hbs this thf mbtdh dolumns
     *
     * @throws SQLExdfption if bn frror oddurs or dolumn nbmf is not sft
     */
    publid String[] gftMbtdhColumnNbmfs() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rftrifvfs thf dolumn id bs <dodf>int</dodf> brrby thbt wbs sft using
     * <dodf>sftMbtdhColumn(int [])</dodf> for this rowsft.
     *
     * @rfturn b <dodf>int</dodf> brrby objfdt thbt dontbins thf dolumn ids
     *         for thf rowsft whidh hbs this bs thf mbtdh dolumns.
     *
     * @throws SQLExdfption if bn frror oddurs or dolumn indfx is not sft
     */
    publid int[] gftMbtdhColumnIndfxfs() throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn int brrby.
     * This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumnIndfxfs</dodf> is dbllfd.
     *
     * @pbrbm dolumnIdxfs thf indfxfs into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs; thf
     *        first pbrbmftfr is 0, thf sfdond is 1, bnd so on; must bf
     *        <dodf>0</dodf> or grfbtfr
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(int[] dolumnIdxfs) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn String brrby.
     *  This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumn</dodf> is dbllfd.
     *
     * @pbrbm dolumnNbmfs thf nbmf of thf dolumn into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(String[] dolumnNbmfs) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>int</dodf>
     * objfdt.  This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumn</dodf> is dbllfd.
     *
     * @pbrbm dolumnIdx thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs; thf
     *        first pbrbmftfr is 0, thf sfdond is 1, bnd so on; must bf
     *        <dodf>0</dodf> or grfbtfr
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(int dolumnIdx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf>
     * objfdt.  This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumn</dodf> is dbllfd.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>int</dodf>
     * objfdt.  This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnIdx thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnIdx is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(int)</dodf>
     */
    publid void unsftMbtdhColumn(int dolumnIdx) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf>
     * objfdt.  This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnNbmf thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnNbmf is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(String)</dodf>
     */
    publid void unsftMbtdhColumn(String dolumnNbmf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Notififs rfgistfrfd listfnfrs thbt b RowSft objfdt in thf givfn RowSftEvfnt
     * objfdt hbs populbtfd b numbfr of bdditionbl rows. Thf <dodf>numRows</dodf> pbrbmftfr
     * fnsurfs thbt this fvfnt will only bf firfd fvfry <dodf>numRow</dodf>.
     * <p>
     * Thf sourdf of thf fvfnt dbn bf rftrifvfd with thf mfthod fvfnt.gftSourdf.
     *
     * @pbrbm fvfnt b <dodf>RowSftEvfnt</dodf> objfdt thbt dontbins thf
     *     <dodf>RowSft</dodf> objfdt thbt is thf sourdf of thf fvfnts
     * @pbrbm numRows whfn populbting, thf numbfr of rows intfrvbl on whidh thf
     *     <dodf>CbdhfdRowSft</dodf> populbtfd should firf; thf dffbult vbluf
     *     is zfro; dbnnot bf lfss thbn <dodf>fftdhSizf</dodf> or zfro
     */
    publid void rowSftPopulbtfd(RowSftEvfnt fvfnt, int numRows) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Populbtfs this <dodf>CbdhfdRowSft</dodf> objfdt with dbtb from
     * thf givfn <dodf>RfsultSft</dodf> objfdt. Whilf rflbtfd to thf <dodf>populbtf(RfsultSft)</dodf>
     * mfthod, bn bdditionbl pbrbmftfr is providfd to bllow stbrting position within
     * thf <dodf>RfsultSft</dodf> from whfrf to populbtf thf CbdhfdRowSft
     * instbndf.
     *
     * This mfthod is bn bltfrnbtivf to thf mfthod <dodf>fxfdutf</dodf>
     * for filling thf rowsft with dbtb.  Thf mfthod <dodf>populbtf</dodf>
     * dofs not rfquirf thbt thf propfrtifs nffdfd by thf mfthod
     * <dodf>fxfdutf</dodf>, sudh bs thf <dodf>dommbnd</dodf> propfrty,
     * bf sft. This is truf bfdbusf thf mfthod <dodf>populbtf</dodf>
     * is givfn thf <dodf>RfsultSft</dodf> objfdt from
     * whidh to gft dbtb bnd thus dofs not nffd to usf thf propfrtifs
     * rfquirfd for sftting up b donnfdtion bnd fxfduting this
     * <dodf>CbdhfdRowSftImpl</dodf> objfdt's dommbnd.
     * <P>
     * Aftfr populbting this rowsft with dbtb, thf mfthod
     * <dodf>populbtf</dodf> sfts thf rowsft's mftbdbtb bnd
     * thfn sfnds b <dodf>RowSftChbngfdEvfnt</dodf> objfdt
     * to bll rfgistfrfd listfnfrs prior to rfturning.
     *
     * @pbrbm dbtb thf <dodf>RfsultSft</dodf> objfdt dontbining thf dbtb
     *             to bf rfbd into this <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * @pbrbm stbrt thf intfgfr spfdifing thf position in thf
     *        <dodf>RfsultSft</dodf> objfdt to popultbtf thf
     *        <dodf>CbdhfdRowSftImpl</dodf> objfdt.
     * @throws SQLExdfption if bn frror oddurs; or thf mbx row sftting is
     *          violbtfd whilf populbting thf RowSft.Also id thf stbrt position
     *          is nfgbtivf.
     * @sff #fxfdutf
     */
     publid void populbtf(RfsultSft dbtb, int stbrt) throws SQLExdfption{
        throw nfw UnsupportfdOpfrbtionExdfption();

     }

    /**
     * Thf nfxtPbgf gfts thf nfxt pbgf, thbt is b <dodf>CbdhfdRowSftImpl</dodf> objfdt
     * dontbining thf numbfr of rows spfdififd by pbgf sizf.
     * @rfturn boolfbn vbluf truf indidbting whfthfr thfrf brf morf pbgfs to domf bnd
     *         fblsf indidbting thbt this is thf lbst pbgf.
     * @throws SQLExdfption if bn frror oddurs or this dbllfd bfforf dblling populbtf.
     */
     publid boolfbn nfxtPbgf() throws SQLExdfption {
         throw nfw UnsupportfdOpfrbtionExdfption();
     }

    /**
     * This is thf sfttfr fundtion for sftting thf sizf of thf pbgf, whidh spfdififs
     * how mbny rows hbvf to bf rftrivfd bt b timf.
     *
     * @pbrbm sizf whidh is thf pbgf sizf
     * @throws SQLExdfption if sizf is lfss thbn zfro or grfbtfr thbn mbx rows.
     */
     publid void sftPbgfSizf (int sizf) throws SQLExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
     }

    /**
     * This is thf gfttfr fundtion for thf sizf of thf pbgf.
     *
     * @rfturn bn intfgfr thbt is thf pbgf sizf.
     */
    publid int gftPbgfSizf() {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    /**
     * Rftrifvfs thf dbtb prfsfnt in thf pbgf prior to thf pbgf from whfrf it is
     * dbllfd.
     * @rfturn boolfbn vbluf truf if it rftrifvfs thf prfvious pbgf, flbsf if it
     *         is on thf first pbgf.
     * @throws SQLExdfption if it is dbllfd bfforf populbtf is dbllfd or RfsultSft
     *         is of typf <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf> or if bn frror
     *         oddurs.
     */
    publid boolfbn prfviousPbgf() throws SQLExdfption {
       throw nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
       * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf, whidh will
       * hbvf thf spfdififd numbfr of bytfs. Thf drivfr dofs thf nfdfssbry donvfrsion
       * from Jbvb dhbrbdtfr formbt to thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
       * It is intfndfd for usf whfn updbting NCHAR,NVARCHAR bnd LONGNVARCHAR dolumns.
       * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or
       * thf insfrt row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf;
       * instfbd thf updbtfRow or insfrtRow mfthods brf dbllfd to updbtf thf dbtbbbsf.
       *
       * @pbrbm dolumnIndfx - thf first dolumn is 1, thf sfdond is 2, ...
       * @pbrbm x - thf nfw dolumn vbluf
       * @pbrbm lfngth - thf lfngth of thf strfbm
       * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
       * @sindf 1.6
       */
       publid void updbtfNChbrbdtfrStrfbm(int dolumnIndfx,
                            jbvb.io.Rfbdfr x,
                            int lfngth)
                            throws SQLExdfption {
          throw nfw UnsupportfdOpfrbtionExdfption("Opfrbtion not yft supportfd");
       }

     /**
       * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf, whidh will
       * hbvf thf spfdififd numbfr of bytfs. Thf drivfr dofs thf nfdfssbry donvfrsion
       * from Jbvb dhbrbdtfr formbt to thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
       * It is intfndfd for usf whfn updbting NCHAR,NVARCHAR bnd LONGNVARCHAR dolumns.
       * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or
       * thf insfrt row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf;
       * instfbd thf updbtfRow or insfrtRow mfthods brf dbllfd to updbtf thf dbtbbbsf.
       *
       * @pbrbm dolumnNbmf - nbmf of thf Column
       * @pbrbm x - thf nfw dolumn vbluf
       * @pbrbm lfngth - thf lfngth of thf strfbm
       * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
       * @sindf 1.6
       */
       publid void updbtfNChbrbdtfrStrfbm(String dolumnNbmf,
                            jbvb.io.Rfbdfr x,
                            int lfngth)
                            throws SQLExdfption {
          throw nfw UnsupportfdOpfrbtionExdfption("Opfrbtion not yft supportfd");
       }

      /**
       * This mfthod rf populbtfs thf rfsBundlf
       * during thf dfsfriblizbtion prodfss
       *
       */
       privbtf void rfbdObjfdt(ObjfdtInputStrfbm ois) throws IOExdfption, ClbssNotFoundExdfption {
         // Dffbult stbtf initiblizbtion hbppfns hfrf
         ois.dffbultRfbdObjfdt();
         // Initiblizbtion of trbnsifnt Rfs Bundlf hbppfns hfrf .
         try {
            rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
         } dbtdh(IOExdfption iof) {
             throw nfw RuntimfExdfption(iof);
         }

       }

       stbtid finbl long sfriblVfrsionUID = -3345004441725080251L;
} //fnd dlbss
