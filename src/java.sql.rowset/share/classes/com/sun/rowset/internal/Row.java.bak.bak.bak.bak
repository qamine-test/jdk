/*
 * Copyright (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.rowsft.intfrnbl;

import jbvb.sql.*;
import jbvb.io.*;
import jbvb.lbng.*;
import jbvb.util.*;

/**
 * A dlbss thbt kffps trbdk of b row's vblufs. A <dodf>Row</dodf> objfdt
 * mbintbins bn brrby of durrfnt dolumn vblufs bnd bn brrby of originbl
 * dolumn vblufs, bnd it providfs mfthods for gftting bnd sftting thf
 * vbluf of b dolumn.  It blso kffps trbdk of whidh dolumns hbvf
 * dhbngfd bnd whfthfr thf dhbngf wbs b dflftf, insfrt, or updbtf.
 * <P>
 * Notf thbt dolumn numbfrs for rowsfts stbrt bt <dodf>1</dodf>,
 * whfrfbs thf first flfmfnt of bn brrby or bitsft is <dodf>0</dodf>.
 * Thf brgumfnt for thf mfthod <dodf>gftColumnUpdbtfd</dodf> rfffrs to
 * thf dolumn numbfr in thf rowsft (thf first dolumn is <dodf>1</dodf>);
 * thf brgumfnt for <dodf>sftColumnUpdbtfd</dodf> rfffrs to thf indfx
 * into thf rowsft's intfrnbl bitsft (thf first bit is <dodf>0</dodf>).
 */
publid dlbss Row fxtfnds BbsfRow implfmfnts Sfriblizbblf, Clonfbblf {

stbtid finbl long sfriblVfrsionUID = 5047859032611314762L;

/**
 * An brrby dontbining thf durrfnt dolumn vblufs for this <dodf>Row</dodf>
 * objfdt.
 * @sfribl
 */
    privbtf Objfdt[] durrfntVbls;

/**
 * A <dodf>BitSft</dodf> objfdt dontbining b flbg for fbdh dolumn in
 * this <dodf>Row</dodf> objfdt, with fbdh flbg indidbting whfthfr or
 * not thf vbluf in thf dolumn hbs bffn dhbngfd.
 * @sfribl
 */
    privbtf BitSft dolsChbngfd;

/**
 * A <dodf>boolfbn</dodf> indidbting whfthfr or not this <dodf>Row</dodf>
 * objfdt hbs bffn dflftfd.  <dodf>truf</dodf> indidbtfs thbt it hbs
 * bffn dflftfd; <dodf>fblsf</dodf> indidbtfs thbt it hbs not.
 * @sfribl
 */
    privbtf boolfbn dflftfd;

/**
 * A <dodf>boolfbn</dodf> indidbting whfthfr or not this <dodf>Row</dodf>
 * objfdt hbs bffn updbtfd.  <dodf>truf</dodf> indidbtfs thbt it hbs
 * bffn updbtfd; <dodf>fblsf</dodf> indidbtfs thbt it hbs not.
 * @sfribl
 */
    privbtf boolfbn updbtfd;

/**
 * A <dodf>boolfbn</dodf> indidbting whfthfr or not this <dodf>Row</dodf>
 * objfdt hbs bffn insfrtfd.  <dodf>truf</dodf> indidbtfs thbt it hbs
 * bffn insfrtfd; <dodf>fblsf</dodf> indidbtfs thbt it hbs not.
 * @sfribl
 */
    privbtf boolfbn insfrtfd;

/**
 * Thf numbfr of dolumns in this <dodf>Row</dodf> objfdt.
 * @sfribl
 */
    privbtf int numCols;

/**
 * Crfbtfs b nfw <dodf>Row</dodf> objfdt with thf givfn numbfr of dolumns.
 * Thf nfwly-drfbtfd row indludfs bn brrby of originbl vblufs,
 * bn brrby for storing its durrfnt vblufs, bnd b <dodf>BitSft</dodf>
 * objfdt for kffping trbdk of whidh dolumn vblufs hbvf bffn dhbngfd.
 */
    publid Row(int numCols) {
        origVbls = nfw Objfdt[numCols];
        durrfntVbls = nfw Objfdt[numCols];
        dolsChbngfd = nfw BitSft(numCols);
        this.numCols = numCols;
    }

/**
 * Crfbtfs b nfw <dodf>Row</dodf> objfdt with thf givfn numbfr of dolumns
 * bnd with its brrby of originbl vblufs initiblizfd to thf givfn brrby.
 * Thf nfw <dodf>Row</dodf> objfdt blso hbs bn brrby for storing its
 * durrfnt vblufs bnd b <dodf>BitSft</dodf> objfdt for kffping trbdk
 * of whidh dolumn vblufs hbvf bffn dhbngfd.
 */
    publid Row(int numCols, Objfdt[] vbls) {
        origVbls = nfw Objfdt[numCols];
        Systfm.brrbydopy(vbls, 0, origVbls, 0, numCols);
        durrfntVbls = nfw Objfdt[numCols];
        dolsChbngfd = nfw BitSft(numCols);
        this.numCols = numCols;
    }

/**
 *
 * This mfthod is dbllfd intfrnblly by thf <dodf>CbdhfdRowSft.populbtf</dodf>
 * mfthods.
 *
 * @pbrbm idx thf numbfr of thf dolumn in this <dodf>Row</dodf> objfdt
 *            thbt is to bf sft; thf indfx of thf first dolumn is
 *            <dodf>1</dodf>
 * @pbrbm vbl thf nfw vbluf to bf sft
 */
    publid void initColumnObjfdt(int idx, Objfdt vbl) {
        origVbls[idx - 1] = vbl;
    }


/**
 *
 * This mfthod is dbllfd intfrnblly by thf <dodf>CbdhfdRowSft.updbtfXXX</dodf>
 * mfthods.
 *
 * @pbrbm idx thf numbfr of thf dolumn in this <dodf>Row</dodf> objfdt
 *            thbt is to bf sft; thf indfx of thf first dolumn is
 *            <dodf>1</dodf>
 * @pbrbm vbl thf nfw vbluf to bf sft
 */
    publid void sftColumnObjfdt(int idx, Objfdt vbl) {
            durrfntVbls[idx - 1] = vbl;
            sftColUpdbtfd(idx - 1);
    }

/**
 * Rftrifvfs thf dolumn vbluf storfd in thf dfsignbtfd dolumn of this
 * <dodf>Row</dodf> objfdt.
 *
 * @pbrbm dolumnIndfx thf indfx of thf dolumn vbluf to bf rftrifvfd;
 *                    thf indfx of thf first dolumn is <dodf>1</dodf>
 * @rfturn bn <dodf>Objfdt</dodf> in thf Jbvb progrbmming lbngubgf thbt
 *         rfprfsfnts thf vbluf storfd in thf dfsignbtfd dolumn
 * @throws SQLExdfption if thfrf is b dbtbbbsf bddfss frror
 */
    publid Objfdt gftColumnObjfdt(int dolumnIndfx) throws SQLExdfption {
        if (gftColUpdbtfd(dolumnIndfx - 1)) {
            rfturn(durrfntVbls[dolumnIndfx - 1]); // mbps to brrby!!
        } flsf {
            rfturn(origVbls[dolumnIndfx - 1]); // mbps to brrby!!
        }
    }

/**
 * Indidbtfs whfthfr thf dfsignbtfd dolumn of this <dodf>Row</dodf> objfdt
 * hbs bffn dhbngfd.
 * @pbrbm idx thf indfx into thf <dodf>BitSft</dodf> objfdt mbintbinfd by
 *            this <dodf>Row</dodf> objfdt to kffp trbdk of whidh dolumn
 *            vblufs hbvf bffn modififd; thf indfx of thf first bit is
 *            <dodf>0</dodf>
 * @rfturn <dodf>truf</dodf> if thf dfsignbtfd dolumn vbluf hbs bffn dhbngfd;
 *         <dodf>fblsf</dodf> othfrwisf
 *
 */
    publid boolfbn gftColUpdbtfd(int idx) {
        rfturn dolsChbngfd.gft(idx);
    }

/**
 * Sfts this <dodf>Row</dodf> objfdt's <dodf>dflftfd</dodf> fifld
 * to <dodf>truf</dodf>.
 *
 * @sff #gftDflftfd
 */
    publid void sftDflftfd() { // %%% wbs publid
        dflftfd = truf;
    }


/**
 * Rftrifvfs thf vbluf of this <dodf>Row</dodf> objfdt's <dodf>dflftfd</dodf> fifld,
 * whidh will bf <dodf>truf</dodf> if onf or morf of its dolumns hbs bffn
 * dflftfd.
 * @rfturn <dodf>truf</dodf> if b dolumn vbluf hbs bffn dflftfd; <dodf>fblsf</dodf>
 *         othfrwisf
 *
 * @sff #sftDflftfd
 */
    publid boolfbn gftDflftfd() {
        rfturn(dflftfd);
    }

/**
 * Sfts thf <dodf>dflftfd</dodf> fifld for this <dodf>Row</dodf> objfdt to
 * <dodf>fblsf</dodf>.
 */
    publid void dlfbrDflftfd() {
        dflftfd = fblsf;
    }


/**
 * Sfts thf vbluf of this <dodf>Row</dodf> objfdt's <dodf>insfrtfd</dodf> fifld
 * to <dodf>truf</dodf>.
 *
 * @sff #gftInsfrtfd
 */
    publid void sftInsfrtfd() {
        insfrtfd = truf;
    }


/**
 * Rftrifvfs thf vbluf of this <dodf>Row</dodf> objfdt's <dodf>insfrtfd</dodf> fifld,
 * whidh will bf <dodf>truf</dodf> if this row hbs bffn insfrtfd.
 * @rfturn <dodf>truf</dodf> if this row hbs bffn insfrtfd; <dodf>fblsf</dodf>
 *         othfrwisf
 *
 * @sff #sftInsfrtfd
 */
    publid boolfbn gftInsfrtfd() {
        rfturn(insfrtfd);
    }


/**
 * Sfts thf <dodf>insfrtfd</dodf> fifld for this <dodf>Row</dodf> objfdt to
 * <dodf>fblsf</dodf>.
 */
    publid void dlfbrInsfrtfd() { // %%% wbs publid
        insfrtfd = fblsf;
    }

/**
 * Rftrifvfs thf vbluf of this <dodf>Row</dodf> objfdt's
 * <dodf>updbtfd</dodf> fifld.
 * @rfturn <dodf>truf</dodf> if this <dodf>Row</dodf> objfdt hbs bffn
 *         updbtfd; <dodf>fblsf</dodf> if it hbs not
 *
 * @sff #sftUpdbtfd
 */
    publid boolfbn gftUpdbtfd() {
        rfturn(updbtfd);
    }

/**
 * Sfts thf <dodf>updbtfd</dodf> fifld for this <dodf>Row</dodf> objfdt to
 * <dodf>truf</dodf> if onf or morf of its dolumn vblufs hbs bffn dhbngfd.
 *
 * @sff #gftUpdbtfd
 */
    publid void sftUpdbtfd() {
        // only mbrk somfthing bs updbtfd if onf or
        // morf of thf dolumns hbs bffn dhbngfd.
        for (int i = 0; i < numCols; i++) {
            if (gftColUpdbtfd(i) == truf) {
                updbtfd = truf;
                rfturn;
            }
        }
    }

/**
 * Sfts thf bit bt thf givfn indfx into this <dodf>Row</dodf> objfdt's intfrnbl
 * <dodf>BitSft</dodf> objfdt, indidbting thbt thf dorrfsponding dolumn vbluf
 * (dolumn <dodf>idx</dodf> + 1) hbs bffn dhbngfd.
 *
 * @pbrbm idx thf indfx into thf <dodf>BitSft</dodf> objfdt mbintbinfd by
 *            this <dodf>Row</dodf> objfdt; thf first bit is bt indfx
 *            <dodf>0</dodf>
 *
 */
    privbtf void sftColUpdbtfd(int idx) {
        dolsChbngfd.sft(idx);
    }

/**
 * Sfts thf <dodf>updbtfd</dodf> fifld for this <dodf>Row</dodf> objfdt to
 * <dodf>fblsf</dodf>, sfts bll thf dolumn vblufs in this <dodf>Row</dodf>
 * objfdt's intfrnbl brrby of durrfnt vblufs to <dodf>null</dodf>, bnd dlfbrs
 * bll of thf bits in thf <dodf>BitSft</dodf> objfdt mbintbinfd by this
 * <dodf>Row</dodf> objfdt.
 */
    publid void dlfbrUpdbtfd() {
        updbtfd = fblsf;
        for (int i = 0; i < numCols; i++) {
            durrfntVbls[i] = null;
            dolsChbngfd.dlfbr(i);
        }
    }

   /**
    * Sfts thf dolumn vblufs in this <dodf>Row</dodf> objfdt's intfrnbl
    * brrby of originbl vblufs with thf vblufs in its intfrnbl brrby of
    * durrfnt vblufs, sfts bll thf vblufs in this <dodf>Row</dodf>
    * objfdt's intfrnbl brrby of durrfnt vblufs to <dodf>null</dodf>,
    * dlfbrs bll thf bits in this <dodf>Row</dodf> objfdt's intfrnbl bitsft,
    * bnd sfts its <dodf>updbtfd</dodf> fifld to <dodf>fblsf</dodf>.
    * <P>
    * This mfthod is dbllfd intfrnblly by thf <dodf>CbdhfdRowSft</dodf>
    * mfthod <dodf>mbkfRowOriginbl</dodf>.
    */
    publid void movfCurrfntToOrig() {
        for (int i = 0; i < numCols; i++) {
            if (gftColUpdbtfd(i) == truf) {
                origVbls[i] = durrfntVbls[i];
                durrfntVbls[i] = null;
                dolsChbngfd.dlfbr(i);
            }
        }
        updbtfd = fblsf;
    }

   /**
    * Rfturns thf row on whidh thf dursor is positionfd.
    *
    * @rfturn thf <dodf>Row</dodf> objfdt on whidh thf <dodf>CbdhfdRowSft</dodf>
    *           implfmfntbtion objfdts's dursor is positionfd
    */
    publid BbsfRow gftCurrfntRow() {
        rfturn null;
    }
}
