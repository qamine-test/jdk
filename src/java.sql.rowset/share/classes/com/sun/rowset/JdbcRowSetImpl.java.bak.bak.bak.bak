/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.rowsft;

import jbvb.sql.*;
import jbvbx.sql.*;
import jbvbx.nbming.*;
import jbvb.io.*;
import jbvb.mbth.*;
import jbvb.util.*;

import jbvbx.sql.rowsft.*;

/**
 * Thf stbndbrd implfmfntbtion of thf <dodf>JdbdRowSft</dodf> intfrfbdf. Sff thf intfrfbdf
 * dffinition for full bfhbvior bnd implfmfntbtion rfquirfmfnts.
 *
 * @buthor Jonbthbn Brudf, Amit Hbndb
 */

publid dlbss JdbdRowSftImpl fxtfnds BbsfRowSft implfmfnts JdbdRowSft, Joinbblf {

    /**
     * Thf <dodf>Connfdtion</dodf> objfdt thbt is this rowsft's
     * durrfnt donnfdtion to thf dbtbbbsf.  This fifld is sft
     * intfrnblly whfn thf donnfdtion is fstbblishfd.
     */
    privbtf Connfdtion donn;

    /**
     * Thf <dodf>PrfpbrfdStbtfmfnt</dodf> objfdt thbt is this rowsft's
     * durrfnt dommbnd.  This fifld is sft intfrnblly whfn thf mfthod
     * <dodf>fxfdutf</dodf> drfbtfs thf <dodf>PrfpbrfdStbtfmfnt</dodf>
     * objfdt.
     */
    privbtf PrfpbrfdStbtfmfnt ps;

    /**
     * Thf <dodf>RfsultSft</dodf> objfdt thbt is this rowsft's
     * durrfnt rfsult sft.  This fifld is sft intfrnblly whfn thf mfthod
     * <dodf>fxfdutf</dodf> fxfdutfs thf rowsft's dommbnd bnd thfrfby
     * drfbtfs thf rowsft's <dodf>RfsultSft</dodf> objfdt.
     */
    privbtf RfsultSft rs;

    /**
     * Thf <dodf>RowSftMftbDbtbImpl</dodf> objfdt thbt is donstrudtfd whfn
     * b <dodf>RfsultSft</dodf> objfdt is pbssfd to thf <dodf>JdbdRowSft</dodf>
     * donstrudtor. This hflps in donstrudting bll mftbdbtb bssodibtfd
     * with thf <dodf>RfsultSft</dodf> objfdt using thf sfttfr mfthods of
     * <dodf>RowSftMftbDbtbImpl</dodf>.
     */
    privbtf RowSftMftbDbtbImpl rowsMD;

    /**
     * Thf <dodf>RfsultSftMftbDbtb</dodf> objfdt from whidh this
     * <dodf>RowSftMftbDbtbImpl</dodf> is formfd bnd whidh  hflps in gftting
     * thf mftbdbtb informbtion.
     */
    privbtf RfsultSftMftbDbtb rfsMD;


    /**
     * Thf Vfdtor holding thf Mbtdh Columns
     */
    privbtf Vfdtor<Intfgfr> iMbtdhColumns;

    /**
     * Thf Vfdtor thbt will hold thf Mbtdh Column nbmfs.
     */
    privbtf Vfdtor<String> strMbtdhColumns;


    protfdtfd trbnsifnt JdbdRowSftRfsourdfBundlf rfsBundlf;

    /**
     * Construdts b dffbult <dodf>JdbdRowSft</dodf> objfdt.
     * Thf nfw instbndf of <dodf>JdbdRowSft</dodf> will sfrvf bs b proxy
     * for thf <dodf>RfsultSft</dodf> objfdt it drfbtfs, bnd by so doing,
     * it will mbkf it possiblf to usf thf rfsult sft bs b JbvbBfbns
     * domponfnt.
     * <P>
     * Thf following is truf of b dffbult <dodf>JdbdRowSft</dodf> instbndf:
     * <UL>
     *   <LI>Dofs not show dflftfd rows
     *   <LI>Hbs no timf limit for how long b drivfr mby tbkf to
     *       fxfdutf thf rowsft's dommbnd
     *   <LI>Hbs no limit for thf numbfr of rows it mby dontbin
     *   <LI>Hbs no limit for thf numbfr of bytfs b dolumn mby dontbin
     *   <LI>Hbs b sdrollbblf dursor bnd dofs not show dhbngfs
     *       mbdf by othfrs
     *   <LI>Will not sff undommittfd dbtb (mbkf "dirty" rfbds)
     *   <LI>Hbs fsdbpf prodfssing turnfd on
     *   <LI>Hbs its donnfdtion's typf mbp sft to <dodf>null</dodf>
     *   <LI>Hbs bn fmpty <dodf>Hbshtbblf</dodf> objfdt for storing bny
     *       pbrbmftfrs thbt brf sft
     * </UL>
     * A nfwly drfbtfd <dodf>JdbdRowSft</dodf> objfdt must hbvf its
     * <dodf>fxfdutf</dodf> mfthod invokfd bfforf othfr publid mfthods
     * brf dbllfd on it; othfrwisf, sudh mfthod dblls will dbusf bn
     * fxdfption to bf thrown.
     *
     * @throws SQLExdfption [1] if bny of its publid mfthods brf dbllfd prior
     * to dblling thf <dodf>fxfdutf</dodf> mfthod; [2] if invblid JDBC drivfr
     * propfrtifs brf sft or [3] if no donnfdtion to b dbtb sourdf fxists.
     */
    publid JdbdRowSftImpl() {
        donn = null;
        ps   = null;
        rs   = null;

        try {
           rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
        } dbtdh(IOExdfption iof) {
            throw nfw RuntimfExdfption(iof);
        }


        initPbrbms();

        // sft thf dffbults

        try {
            sftShowDflftfd(fblsf);
        } dbtdh(SQLExdfption sqlf) {
             Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftshowdflftfd").toString() +
                                sqlf.gftLodblizfdMfssbgf());
        }

        try {
            sftQufryTimfout(0);
        } dbtdh(SQLExdfption sqlf) {
            Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftqufrytimfout").toString() +
                                sqlf.gftLodblizfdMfssbgf());
        }

        try {
            sftMbxRows(0);
        } dbtdh(SQLExdfption sqlf) {
            Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftmbxrows").toString() +
                                sqlf.gftLodblizfdMfssbgf());
        }

        try {
            sftMbxFifldSizf(0);
        } dbtdh(SQLExdfption sqlf) {
             Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftmbxfifldsizf").toString() +
                                sqlf.gftLodblizfdMfssbgf());
        }

        try {
            sftEsdbpfProdfssing(truf);
        } dbtdh(SQLExdfption sqlf) {
             Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftfsdbpfprodfssing").toString() +
                                sqlf.gftLodblizfdMfssbgf());
        }

        try {
            sftCondurrfndy(RfsultSft.CONCUR_UPDATABLE);
        } dbtdh (SQLExdfption sqlf) {
            Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftdondurrfndy").toString() +
                                sqlf.gftLodblizfdMfssbgf());
        }

        sftTypfMbp(null);

        try {
            sftTypf(RfsultSft.TYPE_SCROLL_INSENSITIVE);
        } dbtdh(SQLExdfption sqlf){
          Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sfttypf").toString() +
                                sqlf.gftLodblizfdMfssbgf());
        }

        sftRfbdOnly(truf);

        try {
            sftTrbnsbdtionIsolbtion(Connfdtion.TRANSACTION_READ_COMMITTED);
        } dbtdh(SQLExdfption sqlf){
            Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sfttrbnsbdtionisolbtion").toString() +
                                sqlf.gftLodblizfdMfssbgf());
        }

        //Instbntibting thf vfdtor for MbtdhColumns

        iMbtdhColumns = nfw Vfdtor<Intfgfr>(10);
        for(int i = 0; i < 10 ; i++) {
           iMbtdhColumns.bdd(i,Intfgfr.vblufOf(-1));
        }

        strMbtdhColumns = nfw Vfdtor<String>(10);
        for(int j = 0; j < 10; j++) {
           strMbtdhColumns.bdd(j,null);
        }
    }

    /**
     * Construdts b dffbult <dodf>JdbdRowSft</dodf> objfdt givfn b
     * vblid <dodf>Connfdtion</dodf> objfdt. Thf nfw
     * instbndf of <dodf>JdbdRowSft</dodf> will sfrvf bs b proxy for
     * thf <dodf>RfsultSft</dodf> objfdt it drfbtfs, bnd by so doing,
     * it will mbkf it possiblf to usf thf rfsult sft bs b JbvbBfbns
     * domponfnt.
     * <P>
     * Thf following is truf of b dffbult <dodf>JdbdRowSft</dodf> instbndf:
     * <UL>
     *   <LI>Dofs not show dflftfd rows
     *   <LI>Hbs no timf limit for how long b drivfr mby tbkf to
     *       fxfdutf thf rowsft's dommbnd
     *   <LI>Hbs no limit for thf numbfr of rows it mby dontbin
     *   <LI>Hbs no limit for thf numbfr of bytfs b dolumn mby dontbin
     *   <LI>Hbs b sdrollbblf dursor bnd dofs not show dhbngfs
     *       mbdf by othfrs
     *   <LI>Will not sff undommittfd dbtb (mbkf "dirty" rfbds)
     *   <LI>Hbs fsdbpf prodfssing turnfd on
     *   <LI>Hbs its donnfdtion's typf mbp sft to <dodf>null</dodf>
     *   <LI>Hbs bn fmpty <dodf>Hbshtbblf</dodf> objfdt for storing bny
     *       pbrbmftfrs thbt brf sft
     * </UL>
     * A nfwly drfbtfd <dodf>JdbdRowSft</dodf> objfdt must hbvf its
     * <dodf>fxfdutf</dodf> mfthod invokfd bfforf othfr publid mfthods
     * brf dbllfd on it; othfrwisf, sudh mfthod dblls will dbusf bn
     * fxdfption to bf thrown.
     *
     * @throws SQLExdfption [1] if bny of its publid mfthods brf dbllfd prior
     * to dblling thf <dodf>fxfdutf</dodf> mfthod, [2] if invblid JDBC drivfr
     * propfrtifs brf sft, or [3] if no donnfdtion to b dbtb sourdf fxists.
     */
    publid JdbdRowSftImpl(Connfdtion don) throws SQLExdfption {

        donn = don;
        ps = null;
        rs = null;

        try {
           rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
        } dbtdh(IOExdfption iof) {
            throw nfw RuntimfExdfption(iof);
        }


        initPbrbms();
        // sft thf dffbults
        sftShowDflftfd(fblsf);
        sftQufryTimfout(0);
        sftMbxRows(0);
        sftMbxFifldSizf(0);

        sftPbrbms();

        sftRfbdOnly(truf);
        sftTrbnsbdtionIsolbtion(Connfdtion.TRANSACTION_READ_COMMITTED);
        sftEsdbpfProdfssing(truf);
        sftTypfMbp(null);

        //Instbntibting thf vfdtor for MbtdhColumns

        iMbtdhColumns = nfw Vfdtor<Intfgfr>(10);
        for(int i = 0; i < 10 ; i++) {
           iMbtdhColumns.bdd(i,Intfgfr.vblufOf(-1));
        }

        strMbtdhColumns = nfw Vfdtor<String>(10);
        for(int j = 0; j < 10; j++) {
           strMbtdhColumns.bdd(j,null);
        }
    }

    /**
     * Construdts b dffbult <dodf>JdbdRowSft</dodf> objfdt using thf
     * URL, usfrnbmf, bnd pbssword brgumfnts supplifd. Thf nfw
     * instbndf of <dodf>JdbdRowSft</dodf> will sfrvf bs b proxy for
     * thf <dodf>RfsultSft</dodf> objfdt it drfbtfs, bnd by so doing,
     * it will mbkf it possiblf to usf thf rfsult sft bs b JbvbBfbns
     * domponfnt.
     *
     * <P>
     * Thf following is truf of b dffbult <dodf>JdbdRowSft</dodf> instbndf:
     * <UL>
     *   <LI>Dofs not show dflftfd rows
     *   <LI>Hbs no timf limit for how long b drivfr mby tbkf to
     *       fxfdutf thf rowsft's dommbnd
     *   <LI>Hbs no limit for thf numbfr of rows it mby dontbin
     *   <LI>Hbs no limit for thf numbfr of bytfs b dolumn mby dontbin
     *   <LI>Hbs b sdrollbblf dursor bnd dofs not show dhbngfs
     *       mbdf by othfrs
     *   <LI>Will not sff undommittfd dbtb (mbkf "dirty" rfbds)
     *   <LI>Hbs fsdbpf prodfssing turnfd on
     *   <LI>Hbs its donnfdtion's typf mbp sft to <dodf>null</dodf>
     *   <LI>Hbs bn fmpty <dodf>Hbshtbblf</dodf> objfdt for storing bny
     *       pbrbmftfrs thbt brf sft
     * </UL>
     *
     * @pbrbm url - b JDBC URL for thf dbtbbbsf to whidh this <dodf>JdbdRowSft</dodf>
     *        objfdt will bf donnfdtfd. Thf form for b JDBC URL is
     *        <dodf>jdbd:subprotodol:subnbmf</dodf>.
     * @pbrbm usfr - thf dbtbbbsf usfr on whosf bfhblf thf donnfdtion
     *        is bfing mbdf
     * @pbrbm pbssword - thf usfr's pbssword
     *
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid JdbdRowSftImpl(String url, String usfr, String pbssword) throws SQLExdfption {
        donn = null;
        ps = null;
        rs = null;

        try {
           rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
        } dbtdh(IOExdfption iof) {
            throw nfw RuntimfExdfption(iof);
        }


        initPbrbms();

        // Pbss thf brgumfnts to BbsfRowSft
        // sfttfr mfthods now.

        sftUsfrnbmf(usfr);
        sftPbssword(pbssword);
        sftUrl(url);

        // sft thf dffbults
        sftShowDflftfd(fblsf);
        sftQufryTimfout(0);
        sftMbxRows(0);
        sftMbxFifldSizf(0);

        sftPbrbms();

        sftRfbdOnly(truf);
        sftTrbnsbdtionIsolbtion(Connfdtion.TRANSACTION_READ_COMMITTED);
        sftEsdbpfProdfssing(truf);
        sftTypfMbp(null);

        //Instbntibting thf vfdtor for MbtdhColumns

        iMbtdhColumns = nfw Vfdtor<Intfgfr>(10);
        for(int i = 0; i < 10 ; i++) {
           iMbtdhColumns.bdd(i,Intfgfr.vblufOf(-1));
        }

        strMbtdhColumns = nfw Vfdtor<String>(10);
        for(int j = 0; j < 10; j++) {
           strMbtdhColumns.bdd(j,null);
        }
    }


    /**
     * Construdts b <dodf>JdbdRowSft</dodf> objfdt using thf givfn vblid
     * <dodf>RfsultSft</dodf> objfdt. Thf nfw
     * instbndf of <dodf>JdbdRowSft</dodf> will sfrvf bs b proxy for
     * thf <dodf>RfsultSft</dodf> objfdt, bnd by so doing,
     * it will mbkf it possiblf to usf thf rfsult sft bs b JbvbBfbns
     * domponfnt.
     *
     * <P>
     * Thf following is truf of b dffbult <dodf>JdbdRowSft</dodf> instbndf:
     * <UL>
     *   <LI>Dofs not show dflftfd rows
     *   <LI>Hbs no timf limit for how long b drivfr mby tbkf to
     *       fxfdutf thf rowsft's dommbnd
     *   <LI>Hbs no limit for thf numbfr of rows it mby dontbin
     *   <LI>Hbs no limit for thf numbfr of bytfs b dolumn mby dontbin
     *   <LI>Hbs b sdrollbblf dursor bnd dofs not show dhbngfs
     *       mbdf by othfrs
     *   <LI>Will not sff undommittfd dbtb (mbkf "dirty" rfbds)
     *   <LI>Hbs fsdbpf prodfssing turnfd on
     *   <LI>Hbs its donnfdtion's typf mbp sft to <dodf>null</dodf>
     *   <LI>Hbs bn fmpty <dodf>Hbshtbblf</dodf> objfdt for storing bny
     *       pbrbmftfrs thbt brf sft
     * </UL>
     *
     * @pbrbm rfs b vblid <dodf>RfsultSft</dodf> objfdt
     *
     * @throws SQLExdfption if b dbtbbbsf bddfss oddurs duf to b non
     * vblid RfsultSft hbndlf.
     */
    publid JdbdRowSftImpl(RfsultSft rfs) throws SQLExdfption {

        // A RfsultSft hbndlf fndbpsulbtfs b donnfdtion hbndlf.
        // But thfrf is no wby wf dbn rftrifvf b Connfdtion hbndlf
        // from b RfsultSft objfdt.
        // So to bvoid bny bnomblifs wf kffp thf donn = null
        // Thf pbssfd rs hbndlf will bf b wrbppfr bround for
        // "this" objfdt's bll opfrbtions.
        donn = null;

        ps = null;

        rs = rfs;

        try {
           rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
        } dbtdh(IOExdfption iof) {
            throw nfw RuntimfExdfption(iof);
        }


        initPbrbms();

        // gft thf vblufs from thf rfsultsft hbndlf.
        sftShowDflftfd(fblsf);
        sftQufryTimfout(0);
        sftMbxRows(0);
        sftMbxFifldSizf(0);

        sftPbrbms();

        sftRfbdOnly(truf);
        sftTrbnsbdtionIsolbtion(Connfdtion.TRANSACTION_READ_COMMITTED);
        sftEsdbpfProdfssing(truf);
        sftTypfMbp(null);

        // Gft b hbndlf to RfsultSftMftbDbtb
        // Construdt RowSftMftbDbtb out of it.

        rfsMD = rs.gftMftbDbtb();

        rowsMD = nfw RowSftMftbDbtbImpl();

        initMftbDbtb(rowsMD, rfsMD);

        //Instbntibting thf vfdtor for MbtdhColumns

        iMbtdhColumns = nfw Vfdtor<Intfgfr>(10);
        for(int i = 0; i < 10 ; i++) {
           iMbtdhColumns.bdd(i,Intfgfr.vblufOf(-1));
        }

        strMbtdhColumns = nfw Vfdtor<String>(10);
        for(int j = 0; j < 10; j++) {
           strMbtdhColumns.bdd(j,null);
        }
    }

    /**
     * Initiblizfs thf givfn <dodf>RowSftMftbDbtb</dodf> objfdt with thf vblufs
     * in thf givfn <dodf>RfsultSftMftbDbtb</dodf> objfdt.
     *
     * @pbrbm md thf <dodf>RowSftMftbDbtb</dodf> objfdt for this
     *           <dodf>JdbdRowSftImpl</dodf> objfdt, whidh will bf sft with
     *           vblufs from rsmd
     * @pbrbm rsmd thf <dodf>RfsultSftMftbDbtb</dodf> objfdt from whidh nfw
     *             vblufs for md will bf rfbd
     * @throws SQLExdfption if bn frror oddurs
     */
    protfdtfd void initMftbDbtb(RowSftMftbDbtb md, RfsultSftMftbDbtb rsmd) throws SQLExdfption {
        int numCols = rsmd.gftColumnCount();

        md.sftColumnCount(numCols);
        for (int dol=1; dol <= numCols; dol++) {
            md.sftAutoIndrfmfnt(dol, rsmd.isAutoIndrfmfnt(dol));
            md.sftCbsfSfnsitivf(dol, rsmd.isCbsfSfnsitivf(dol));
            md.sftCurrfndy(dol, rsmd.isCurrfndy(dol));
            md.sftNullbblf(dol, rsmd.isNullbblf(dol));
            md.sftSignfd(dol, rsmd.isSignfd(dol));
            md.sftSfbrdhbblf(dol, rsmd.isSfbrdhbblf(dol));
            md.sftColumnDisplbySizf(dol, rsmd.gftColumnDisplbySizf(dol));
            md.sftColumnLbbfl(dol, rsmd.gftColumnLbbfl(dol));
            md.sftColumnNbmf(dol, rsmd.gftColumnNbmf(dol));
            md.sftSdhfmbNbmf(dol, rsmd.gftSdhfmbNbmf(dol));
            md.sftPrfdision(dol, rsmd.gftPrfdision(dol));
            md.sftSdblf(dol, rsmd.gftSdblf(dol));
            md.sftTbblfNbmf(dol, rsmd.gftTbblfNbmf(dol));
            md.sftCbtblogNbmf(dol, rsmd.gftCbtblogNbmf(dol));
            md.sftColumnTypf(dol, rsmd.gftColumnTypf(dol));
            md.sftColumnTypfNbmf(dol, rsmd.gftColumnTypfNbmf(dol));
        }
    }


    protfdtfd void dhfdkStbtf() throws SQLExdfption {

        // If bll thf thrff i.f.  donn, ps & rs brf
        // simultbnfously null implifs wf brf not donnfdtfd
        // to thf db, implifs undfsirbblf stbtf so throw fxdfption

        if (donn == null && ps == null && rs == null ) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.invblstbtf").toString());
        }
    }

    //---------------------------------------------------------------------
    // Rfbding bnd writing dbtb
    //---------------------------------------------------------------------

    /**
     * Crfbtfs thf intfrnbl <dodf>RfsultSft</dodf> objfdt for whidh this
     * <dodf>JdbdRowSft</dodf> objfdt is b wrbppfr, ffffdtivfly
     * mbking thf rfsult sft b JbvbBfbns domponfnt.
     * <P>
     * Cfrtbin propfrtifs must hbvf bffn sft bfforf this mfthod is dbllfd
     * so thbt it dbn fstbblish b donnfdtion to b dbtbbbsf bnd fxfdutf thf
     * qufry thbt will drfbtf thf rfsult sft.  If b <dodf>DbtbSourdf</dodf>
     * objfdt will bf usfd to drfbtf thf donnfdtion, propfrtifs for thf
     * dbtb sourdf nbmf, usfr nbmf, bnd pbssword must bf sft.  If thf
     * <dodf>DrivfrMbnbgfr</dodf> will bf usfd, thf propfrtifs for thf
     * URL, usfr nbmf, bnd pbssword must bf sft.  In fithfr dbsf, thf
     * propfrty for thf dommbnd must bf sft.  If thf dommbnd hbs plbdfholdfr
     * pbrbmftfrs, thosf must blso bf sft. This mfthod throws
     * bn fxdfption if thf rfquirfd propfrtifs brf not sft.
     * <P>
     * Othfr propfrtifs hbvf dffbult vblufs thbt mby optionblly bf sft
     * to nfw vblufs. Thf <dodf>fxfdutf</dodf> mfthod will usf thf vbluf
     * for thf dommbnd propfrty to drfbtf b <dodf>PrfpbrfdStbtfmfnt</dodf>
     * objfdt bnd sft its propfrtifs (fsdbpf prodfssing, mbximum fifld
     * sizf, mbximum numbfr of rows, bnd qufry timfout limit) to bf thosf
     * of this rowsft.
     *
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     * (2) bny rfquirfd JDBC propfrtifs brf not sft, or (3) if bn
     * invblid donnfdtion fxists.
     */
    publid void fxfdutf() throws SQLExdfption {
        /*
         * To fxfdutf bbsfd on thf propfrtifs:
         * i) dftfrminf how to gft b donnfdtion
         * ii) prfpbrf thf stbtfmfnt
         * iii) sft thf propfrtifs of thf stbtfmfnt
         * iv) pbrsf thf pbrbms. bnd sft thfm
         * v) fxfdutf thf stbtfmfnt
         *
         * During bll of this try to tolfrbtf bs mbny frrors
         * bs possiblf, mbny drivfrs will not support bll of
         * thf propfrtifs bnd will/should throw SQLExdfption
         * bt us...
         *
         */

        prfpbrf();

        // sft thf propfrtifs of our shiny nfw stbtfmfnt
        sftPropfrtifs(ps);


        // sft thf pbrbmftfrs
        dfdodfPbrbms(gftPbrbms(), ps);


        // fxfdutf thf stbtfmfnt
        rs = ps.fxfdutfQufry();


        // notify listfnfrs
        notifyRowSftChbngfd();


    }

    protfdtfd void sftPropfrtifs(PrfpbrfdStbtfmfnt ps) throws SQLExdfption {

        try {
            ps.sftEsdbpfProdfssing(gftEsdbpfProdfssing());
        } dbtdh (SQLExdfption fx) {
            Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftfsdbpfprodfssing").toString() +
                                fx.gftLodblizfdMfssbgf());
        }

        try {
            ps.sftMbxFifldSizf(gftMbxFifldSizf());
        } dbtdh (SQLExdfption fx) {
            Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftmbxfifldsizf").toString() +
                                fx.gftLodblizfdMfssbgf());
        }

        try {
            ps.sftMbxRows(gftMbxRows());
        } dbtdh (SQLExdfption fx) {
           Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftmbxrows").toString() +
                                fx.gftLodblizfdMfssbgf());
        }

        try {
            ps.sftQufryTimfout(gftQufryTimfout());
        } dbtdh (SQLExdfption fx) {
           Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftqufrytimfout").toString() +
                                fx.gftLodblizfdMfssbgf());
        }

    }

    privbtf Connfdtion donnfdt() throws SQLExdfption {

        // Gft b JDBC donnfdtion.

        // First dhfdk for Connfdtion hbndlf objfdt bs sudh if
        // "this" initiblizfd  using donn.

        if(donn != null) {
            rfturn donn;

        } flsf if (gftDbtbSourdfNbmf() != null) {

            // Connfdt using JNDI.
            try {
                Contfxt dtx = nfw InitiblContfxt();
                DbtbSourdf ds = (DbtbSourdf)dtx.lookup
                    (gftDbtbSourdfNbmf());
                //rfturn ds.gftConnfdtion(gftUsfrnbmf(),gftPbssword());

                if(gftUsfrnbmf() != null && !gftUsfrnbmf().fqubls("")) {
                     rfturn ds.gftConnfdtion(gftUsfrnbmf(),gftPbssword());
                } flsf {
                     rfturn ds.gftConnfdtion();
                }
            }
            dbtdh (jbvbx.nbming.NbmingExdfption fx) {
                throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.donnfdt").toString());
            }

        } flsf if (gftUrl() != null) {
            // Chfdk only for gftUrl() != null bfdbusf
            // usfr, pbsswd dbn bf null
            // Connfdt using thf drivfr mbnbgfr.

            rfturn DrivfrMbnbgfr.gftConnfdtion
                    (gftUrl(), gftUsfrnbmf(), gftPbssword());
        }
        flsf {
            rfturn null;
        }

    }


    protfdtfd PrfpbrfdStbtfmfnt prfpbrf() throws SQLExdfption {
        // gft b donnfdtion
        donn = donnfdt();

        try {

            Mbp<String, Clbss<?>> bMbp = gftTypfMbp();
            if( bMbp != null) {
                donn.sftTypfMbp(bMbp);
            }
            ps = donn.prfpbrfStbtfmfnt(gftCommbnd(),RfsultSft.TYPE_SCROLL_INSENSITIVE,RfsultSft.CONCUR_UPDATABLE);
        } dbtdh (SQLExdfption fx) {
            Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.prfpbrf").toString() +
                                fx.gftLodblizfdMfssbgf());

            if (ps != null)
                ps.dlosf();
            if (donn != null)
                donn.dlosf();

            throw nfw SQLExdfption(fx.gftMfssbgf());
        }

        rfturn ps;
    }

    @SupprfssWbrnings("dfprfdbtion")
    privbtf void dfdodfPbrbms(Objfdt[] pbrbms, PrfpbrfdStbtfmfnt ps)
    throws SQLExdfption {

    // Thfrf is b dorrfsponding dfdodfPbrbms in JdbdRowSftImpl
    // whidh dofs thf sbmf bs this mfthod. This is b dfsign flbw.
    // Updbtf thf CbdhfdRowsftRfbdfr.dfdodfPbrbms whfn you updbtf
    // this mfthod.

    // Adding thf sbmf dommfnts to CbdhfdRowsftRfbdfr.dfdodfPbrbms.

        int brrbySizf;
        Objfdt[] pbrbm = null;

        for (int i=0; i < pbrbms.lfngth; i++) {
            if (pbrbms[i] instbndfof Objfdt[]) {
                pbrbm = (Objfdt[])pbrbms[i];

                if (pbrbm.lfngth == 2) {
                    if (pbrbm[0] == null) {
                        ps.sftNull(i + 1, ((Intfgfr)pbrbm[1]).intVbluf());
                        dontinuf;
                    }

                    if (pbrbm[0] instbndfof jbvb.sql.Dbtf ||
                        pbrbm[0] instbndfof jbvb.sql.Timf ||
                        pbrbm[0] instbndfof jbvb.sql.Timfstbmp) {
                        Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.dftfdtfddbtf"));
                        if (pbrbm[1] instbndfof jbvb.util.Cblfndbr) {
                            Systfm.frr.println(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.dftfdtfddblfndbr"));
                            ps.sftDbtf(i + 1, (jbvb.sql.Dbtf)pbrbm[0],
                                       (jbvb.util.Cblfndbr)pbrbm[1]);
                            dontinuf;
                        }
                        flsf {
                            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.pbrbmtypf").toString());
                        }
                    }

                    if (pbrbm[0] instbndfof Rfbdfr) {
                        ps.sftChbrbdtfrStrfbm(i + 1, (Rfbdfr)pbrbm[0],
                                              ((Intfgfr)pbrbm[1]).intVbluf());
                        dontinuf;
                    }

                    /*
                     * Whbt's lfft should bf sftObjfdt(int, Objfdt, sdblf)
                     */
                    if (pbrbm[1] instbndfof Intfgfr) {
                        ps.sftObjfdt(i + 1, pbrbm[0], ((Intfgfr)pbrbm[1]).intVbluf());
                        dontinuf;
                    }

                } flsf if (pbrbm.lfngth == 3) {

                    if (pbrbm[0] == null) {
                        ps.sftNull(i + 1, ((Intfgfr)pbrbm[1]).intVbluf(),
                                   (String)pbrbm[2]);
                        dontinuf;
                    }

                    if (pbrbm[0] instbndfof jbvb.io.InputStrfbm) {
                        switdh (((Intfgfr)pbrbm[2]).intVbluf()) {
                        dbsf JdbdRowSftImpl.UNICODE_STREAM_PARAM:
                            ps.sftUnidodfStrfbm(i + 1,
                                                (jbvb.io.InputStrfbm)pbrbm[0],
                                                ((Intfgfr)pbrbm[1]).intVbluf());
                            brfbk;
                        dbsf JdbdRowSftImpl.BINARY_STREAM_PARAM:
                            ps.sftBinbryStrfbm(i + 1,
                                               (jbvb.io.InputStrfbm)pbrbm[0],
                                               ((Intfgfr)pbrbm[1]).intVbluf());
                            brfbk;
                        dbsf JdbdRowSftImpl.ASCII_STREAM_PARAM:
                            ps.sftAsdiiStrfbm(i + 1,
                                              (jbvb.io.InputStrfbm)pbrbm[0],
                                              ((Intfgfr)pbrbm[1]).intVbluf());
                            brfbk;
                        dffbult:
                            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.pbrbmtypf").toString());
                        }
                    }

                    /*
                     * no point bt looking bt thf first flfmfnt now;
                     * whbt's lfft must bf thf sftObjfdt() dbsfs.
                     */
                    if (pbrbm[1] instbndfof Intfgfr && pbrbm[2] instbndfof Intfgfr) {
                        ps.sftObjfdt(i + 1, pbrbm[0], ((Intfgfr)pbrbm[1]).intVbluf(),
                                     ((Intfgfr)pbrbm[2]).intVbluf());
                        dontinuf;
                    }

                    throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.pbrbmtypf").toString());

                } flsf {
                    // dommon dbsf - this dbtdhfs bll SQL92 typfs
                    ps.sftObjfdt(i + 1, pbrbms[i]);
                    dontinuf;
                }
            }  flsf {
               // Try to gft bll thf pbrbms to bf sft hfrf
               ps.sftObjfdt(i + 1, pbrbms[i]);

            }
        }
    }

    /**
     * Movfs thf dursor for this rowsft's <dodf>RfsultSft</dodf>
     * objfdt down onf row from its durrfnt position.
     * A <dodf>RfsultSft</dodf> dursor is initiblly positionfd
     * bfforf thf first row; thf first dbll to thf mfthod
     * <dodf>nfxt</dodf> mbkfs thf first row thf durrfnt row; thf
     * sfdond dbll mbkfs thf sfdond row thf durrfnt row, bnd so on.
     *
     * <P>If bn input strfbm is opfn for thf durrfnt row, b dbll
     * to thf mfthod <dodf>nfxt</dodf> will
     * impliditly dlosf it. A <dodf>RfsultSft</dodf> objfdt's
     * wbrning dhbin is dlfbrfd whfn b nfw row is rfbd.
     *
     * @rfturn <dodf>truf</dodf> if thf nfw durrfnt row is vblid;
     *         <dodf>fblsf</dodf> if thfrf brf no morf rows
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn nfxt() throws SQLExdfption {
        dhfdkStbtf();

        boolfbn b = rs.nfxt();
        notifyCursorMovfd();
        rfturn b;
    }

    /**
     * Rflfbsfs this rowsft's <dodf>RfsultSft</dodf> objfdt's dbtbbbsf bnd
     * JDBC rfsourdfs immfdibtfly instfbd of wbiting for
     * this to hbppfn whfn it is butombtidblly dlosfd.
     *
     * <P><B>Notf:</B> A <dodf>RfsultSft</dodf> objfdt
     * is butombtidblly dlosfd by thf
     * <dodf>Stbtfmfnt</dodf> objfdt thbt gfnfrbtfd it whfn
     * thbt <dodf>Stbtfmfnt</dodf> objfdt is dlosfd,
     * rf-fxfdutfd, or is usfd to rftrifvf thf nfxt rfsult from b
     * sfqufndf of multiplf rfsults. A <dodf>RfsultSft</dodf> objfdt
     * is blso butombtidblly dlosfd whfn it is gbrbbgf dollfdtfd.
     *
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     */
    publid void dlosf() throws SQLExdfption {
        if (rs != null)
            rs.dlosf();
        if (ps != null)
            ps.dlosf();
        if (donn != null)
            donn.dlosf();
    }

    /**
     * Rfports whfthfr thf lbst dolumn rfbd from this rowsft's
     * <dodf>RfsultSft</dodf> objfdt hbd b vbluf of SQL <dodf>NULL</dodf>.
     * Notf thbt you must first dbll onf of thf <dodf>gftXXX</dodf> mfthods
     * on b dolumn to try to rfbd its vbluf bnd thfn dbll
     * thf mfthod <dodf>wbsNull</dodf> to sff if thf vbluf rfbd wbs
     * SQL <dodf>NULL</dodf>.
     *
     * @rfturn <dodf>truf</dodf> if thf lbst dolumn vbluf rfbd wbs SQL
     *         <dodf>NULL</dodf> bnd <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn wbsNull() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.wbsNull();
    }

    //======================================================================
    // Mfthods for bddfssing rfsults by dolumn indfx
    //======================================================================

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>String</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid String gftString(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftString(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>boolfbn</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>fblsf</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn gftBoolfbn(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftBoolfbn(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>bytf</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid bytf gftBytf(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftBytf(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>short</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid short gftShort(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftShort(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * bn <dodf>int</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid int gftInt(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftInt(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>long</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid long gftLong(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftLong(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>flobt</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid flobt gftFlobt(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftFlobt(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>doublf</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid doublf gftDoublf(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftDoublf(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>jbvb.sql.BigDfdimbl</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid BigDfdimbl gftBigDfdimbl(int dolumnIndfx, int sdblf) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftBigDfdimbl(dolumnIndfx, sdblf);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>bytf</dodf> brrby in thf Jbvb progrbmming lbngubgf.
     * Thf bytfs rfprfsfnt thf rbw vblufs rfturnfd by thf drivfr.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid bytf[] gftBytfs(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftBytfs(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>jbvb.sql.Dbtf</dodf> objfdt in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Dbtf gftDbtf(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftDbtf(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>jbvb.sql.Timf</dodf> objfdt in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Timf gftTimf(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftTimf(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>jbvb.sql.Timfstbmp</dodf> objfdt in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftTimfstbmp(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b strfbm of ASCII dhbrbdtfrs. Thf vbluf dbn thfn bf rfbd in dhunks from thf
     * strfbm. This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARCHAR</dodf> vblufs.
     * Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from thf dbtbbbsf formbt into ASCII.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.  Also, b
     * strfbm mby rfturn <dodf>0</dodf> whfn thf mfthod
     * <dodf>InputStrfbm.bvbilbblf</dodf>
     * is dbllfd whfthfr thfrf is dbtb bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of onf-bytf ASCII dhbrbdtfrs;
     * if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) dbtbbbsf bddfss frror oddurs
     *            (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.io.InputStrfbm gftAsdiiStrfbm(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftAsdiiStrfbm(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * bs b strfbm of Unidodf dhbrbdtfrs.
     * Thf vbluf dbn thfn bf rfbd in dhunks from thf
     * strfbm. This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf<dodf>LONGVARCHAR</dodf>vblufs.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from thf dbtbbbsf formbt into Unidodf.
     * Thf bytf formbt of thf Unidodf strfbm must bf Jbvb UTF-8,
     * bs spfdififd in thf Jbvb virtubl mbdhinf spfdifidbtion.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.  Also, b
     * strfbm mby rfturn <dodf>0</dodf> whfn thf mfthod
     * <dodf>InputStrfbm.bvbilbblf</dodf>
     * is dbllfd whfthfr thfrf is dbtb bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm in Jbvb UTF-8 bytf formbt;
     * if thf vbluf is SQL <dodf>NULL</dodf>, thf vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     * @dfprfdbtfd usf <dodf>gftChbrbdtfrStrfbm</dodf> in plbdf of
     *              <dodf>gftUnidodfStrfbm</dodf>
     */
    @Dfprfdbtfd
    publid jbvb.io.InputStrfbm gftUnidodfStrfbm(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftUnidodfStrfbm(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of b dolumn in thf durrfnt row bs b strfbm of
     * thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b binbry strfbm of
     * unintfrprftfd bytfs. Thf vbluf dbn thfn bf rfbd in dhunks from thf
     * strfbm. This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARBINARY</dodf> vblufs.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm.  Also, b
     * strfbm mby rfturn <dodf>0</dodf> whfn thf mfthod
     * <dodf>InputStrfbm.bvbilbblf</dodf>
     * is dbllfd whfthfr thfrf is dbtb bvbilbblf or not.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of unintfrprftfd bytfs;
     * if thf vbluf is SQL <dodf>NULL</dodf>, thf vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.io.InputStrfbm gftBinbryStrfbm(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftBinbryStrfbm(dolumnIndfx);
    }


    //======================================================================
    // Mfthods for bddfssing rfsults by dolumn nbmf
    //======================================================================

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>String</dodf>.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid String gftString(String dolumnNbmf) throws SQLExdfption {
        rfturn gftString(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>boolfbn</dodf>.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>fblsf</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn gftBoolfbn(String dolumnNbmf) throws SQLExdfption {
        rfturn gftBoolfbn(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>bytf</dodf>.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid bytf gftBytf(String dolumnNbmf) throws SQLExdfption {
        rfturn gftBytf(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>short</dodf>.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid short gftShort(String dolumnNbmf) throws SQLExdfption {
        rfturn gftShort(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * bn <dodf>int</dodf>.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid int gftInt(String dolumnNbmf) throws SQLExdfption {
        rfturn gftInt(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>long</dodf>.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid long gftLong(String dolumnNbmf) throws SQLExdfption {
        rfturn gftLong(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>flobt</dodf>.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid flobt gftFlobt(String dolumnNbmf) throws SQLExdfption {
        rfturn gftFlobt(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>doublf</dodf>.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>0</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid doublf gftDoublf(String dolumnNbmf) throws SQLExdfption {
        rfturn gftDoublf(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>jbvb.mbth.BigDfdimbl</dodf>.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @pbrbm sdblf thf numbfr of digits to thf right of thf dfdimbl point
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) bdbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid BigDfdimbl gftBigDfdimbl(String dolumnNbmf, int sdblf) throws SQLExdfption {
        rfturn gftBigDfdimbl(findColumn(dolumnNbmf), sdblf);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>bytf</dodf> brrby in thf Jbvb progrbmming lbngubgf.
     * Thf bytfs rfprfsfnt thf rbw vblufs rfturnfd by thf drivfr.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid bytf[] gftBytfs(String dolumnNbmf) throws SQLExdfption {
        rfturn gftBytfs(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>jbvb.sql.Dbtf</dodf> objfdt in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Dbtf gftDbtf(String dolumnNbmf) throws SQLExdfption {
        rfturn gftDbtf(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>jbvb.sql.Timf</dodf> objfdt in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf;
     * if thf vbluf is SQL <dodf>NULL</dodf>,
     * thf vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Timf gftTimf(String dolumnNbmf) throws SQLExdfption {
        rfturn gftTimf(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(String dolumnNbmf) throws SQLExdfption {
        rfturn gftTimfstbmp(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b strfbm of
     * ASCII dhbrbdtfrs. Thf vbluf dbn thfn bf rfbd in dhunks from thf
     * strfbm. This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARCHAR</dodf> vblufs.
     * Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from thf dbtbbbsf formbt into ASCII.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm. Also, b
     * strfbm mby rfturn <dodf>0</dodf> whfn thf mfthod <dodf>bvbilbblf</dodf>
     * is dbllfd whfthfr thfrf is dbtb bvbilbblf or not.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of onf-bytf ASCII dhbrbdtfrs.
     * If thf vbluf is SQL <dodf>NULL</dodf>,
     * thf vbluf rfturnfd is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.io.InputStrfbm gftAsdiiStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn gftAsdiiStrfbm(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b strfbm of
     * Unidodf dhbrbdtfrs. Thf vbluf dbn thfn bf rfbd in dhunks from thf
     * strfbm. This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARCHAR</dodf> vblufs.
     * Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from thf dbtbbbsf formbt into Unidodf.
     * Thf bytf formbt of thf Unidodf strfbm must bf Jbvb UTF-8,
     * bs dffinfd in thf Jbvb virtubl mbdhinf spfdifidbtion.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm. Also, b
     * strfbm mby rfturn <dodf>0</dodf> whfn thf mfthod <dodf>bvbilbblf</dodf>
     * is dbllfd whfthfr thfrf is dbtb bvbilbblf or not.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of two-bytf Unidodf dhbrbdtfrs.
     * If thf vbluf is SQL <dodf>NULL</dodf>,
     * thf vbluf rfturnfd is <dodf>null</dodf>.
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid jbvb.io.InputStrfbm gftUnidodfStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn gftUnidodfStrfbm(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b strfbm of unintfrprftfd
     * <dodf>bytf</dodf>s.
     * Thf vbluf dbn thfn bf rfbd in dhunks from thf
     * strfbm. This mfthod is pbrtidulbrly
     * suitbblf for rftrifving lbrgf <dodf>LONGVARBINARY</dodf>
     * vblufs.
     *
     * <P><B>Notf:</B> All thf dbtb in thf rfturnfd strfbm must bf
     * rfbd prior to gftting thf vbluf of bny othfr dolumn. Thf nfxt
     * dbll to b <dodf>gftXXX</dodf> mfthod impliditly dlosfs thf strfbm. Also, b
     * strfbm mby rfturn <dodf>0</dodf> whfn thf mfthod <dodf>bvbilbblf</dodf>
     * is dbllfd whfthfr thfrf is dbtb bvbilbblf or not.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn b Jbvb input strfbm thbt dflivfrs thf dbtbbbsf dolumn vbluf
     * bs b strfbm of unintfrprftfd bytfs;
     * if thf vbluf is SQL <dodf>NULL</dodf>, thf rfsult is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.io.InputStrfbm gftBinbryStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn gftBinbryStrfbm(findColumn(dolumnNbmf));
    }


    //=====================================================================
    // Advbndfd ffbturfs:
    //=====================================================================

    /**
     * Rfturns thf first wbrning rfportfd by dblls on this rowsft's
     * <dodf>RfsultSft</dodf> objfdt.
     * Subsfqufnt wbrnings on this rowsft's <dodf>RfsultSft</dodf> objfdt
     * will bf dhbinfd to thf <dodf>SQLWbrning</dodf> objfdt thbt
     * this mfthod rfturns.
     *
     * <P>Thf wbrning dhbin is butombtidblly dlfbrfd fbdh timf b nfw
     * row is rfbd.
     *
     * <P><B>Notf:</B> This wbrning dhbin only dovfrs wbrnings dbusfd
     * by <dodf>RfsultSft</dodf> mfthods.  Any wbrning dbusfd by
     * <dodf>Stbtfmfnt</dodf> mfthods
     * (sudh bs rfbding OUT pbrbmftfrs) will bf dhbinfd on thf
     * <dodf>Stbtfmfnt</dodf> objfdt.
     *
     * @rfturn thf first <dodf>SQLWbrning</dodf> objfdt rfportfd or <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid SQLWbrning gftWbrnings() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftWbrnings();
    }

    /**
     * Clfbrs bll wbrnings rfportfd on this rowsft's <dodf>RfsultSft</dodf> objfdt.
     * Aftfr this mfthod is dbllfd, thf mfthod <dodf>gftWbrnings</dodf>
     * rfturns <dodf>null</dodf> until b nfw wbrning is
     * rfportfd for this rowsft's <dodf>RfsultSft</dodf> objfdt.
     *
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid void dlfbrWbrnings() throws SQLExdfption {
        dhfdkStbtf();

        rs.dlfbrWbrnings();
    }

    /**
     * Gfts thf nbmf of thf SQL dursor usfd by this rowsft's <dodf>RfsultSft</dodf>
     * objfdt.
     *
     * <P>In SQL, b rfsult tbblf is rftrifvfd through b dursor thbt is
     * nbmfd. Thf durrfnt row of b rfsult sft dbn bf updbtfd or dflftfd
     * using b positionfd updbtf/dflftf stbtfmfnt thbt rfffrfndfs thf
     * dursor nbmf. To insurf thbt thf dursor hbs thf propfr isolbtion
     * lfvfl to support updbtf, thf dursor's <dodf>sflfdt</dodf> stbtfmfnt should bf
     * of thf form 'sflfdt for updbtf'. If thf 'for updbtf' dlbusf is
     * omittfd, thf positionfd updbtfs mby fbil.
     *
     * <P>Thf JDBC API supports this SQL ffbturf by providing thf nbmf of thf
     * SQL dursor usfd by b <dodf>RfsultSft</dodf> objfdt.
     * Thf durrfnt row of b <dodf>RfsultSft</dodf> objfdt
     * is blso thf durrfnt row of this SQL dursor.
     *
     * <P><B>Notf:</B> If positionfd updbtf is not supportfd, b
     * <dodf>SQLExdfption</dodf> is thrown.
     *
     * @rfturn thf SQL nbmf for this rowsft's <dodf>RfsultSft</dodf> objfdt's dursor
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) xthis rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid String gftCursorNbmf() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftCursorNbmf();
    }

    /**
     * Rftrifvfs thf  numbfr, typfs bnd propfrtifs of
     * this rowsft's <dodf>RfsultSft</dodf> objfdt's dolumns.
     *
     * @rfturn thf dfsdription of this rowsft's <dodf>RfsultSft</dodf>
     *     objfdt's dolumns
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *     or (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     *     prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid RfsultSftMftbDbtb gftMftbDbtb() throws SQLExdfption {

        dhfdkStbtf();

        // It mby bf thf dbsf thbt JdbdRowSft might not hbvf bffn
        // initiblizfd with RfsultSft hbndlf bnd mby bf by PrfpbrfdStbtfmfnt
        // intfrnblly whfn wf sft JdbdRowSft.sftCommbnd().
        // Wf mby rfquirf bll thf bbsid propfrtifs of sftEsdbpfProdfssing
        // sftMbxFifldSizf ftd. whidh bn bpplidbtion dbn usf bfforf wf dbll
        // fxfdutf.
        try {
             dhfdkStbtf();
        } dbtdh(SQLExdfption sqlf) {
             prfpbrf();
             // will rfturn RfsultSftMftbDbtb
             rfturn ps.gftMftbDbtb();
        }
        rfturn rs.gftMftbDbtb();
    }

    /**
     * <p>Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * bn <dodf>Objfdt</dodf>.
     *
     * <p>This mfthod will rfturn thf vbluf of thf givfn dolumn bs b
     * Jbvb objfdt.  Thf typf of thf Jbvb objfdt will bf thf dffbult
     * Jbvb objfdt typf dorrfsponding to thf dolumn's SQL typf,
     * following thf mbpping for built-in typfs spfdififd in thf JDBC
     * spfdifidbtion.
     *
     * <p>This mfthod mby blso bf usfd to rfbd dbtbtbbbsf-spfdifid
     * bbstrbdt dbtb typfs.
     *
     * In thf JDBC 3.0 API, thf bfhbvior of mfthod
     * <dodf>gftObjfdt</dodf> is fxtfndfd to mbtfriblizf
     * dbtb of SQL usfr-dffinfd typfs.  Whfn b dolumn dontbins
     * b strudturfd or distindt vbluf, thf bfhbvior of this mfthod is bs
     * if it wfrf b dbll to: <dodf>gftObjfdt(dolumnIndfx,
     * this.gftStbtfmfnt().gftConnfdtion().gftTypfMbp())</dodf>.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn b <dodf>jbvb.lbng.Objfdt</dodf> holding thf dolumn vbluf
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Objfdt gftObjfdt(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftObjfdt(dolumnIndfx);
    }

    /**
     * <p>Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs
     * bn <dodf>Objfdt</dodf>.
     *
     * <p>This mfthod will rfturn thf vbluf of thf givfn dolumn bs b
     * Jbvb objfdt.  Thf typf of thf Jbvb objfdt will bf thf dffbult
     * Jbvb objfdt typf dorrfsponding to thf dolumn's SQL typf,
     * following thf mbpping for built-in typfs spfdififd in thf JDBC
     * spfdifidbtion.
     *
     * <p>This mfthod mby blso bf usfd to rfbd dbtbtbbbsf-spfdifid
     * bbstrbdt dbtb typfs.
     *
     * In thf JDBC 3.0 API, thf bfhbvior of thf mfthod
     * <dodf>gftObjfdt</dodf> is fxtfndfd to mbtfriblizf
     * dbtb of SQL usfr-dffinfd typfs.  Whfn b dolumn dontbins
     * b strudturfd or distindt vbluf, thf bfhbvior of this mfthod is bs
     * if it wfrf b dbll to: <dodf>gftObjfdt(dolumnIndfx,
     * this.gftStbtfmfnt().gftConnfdtion().gftTypfMbp())</dodf>.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn b <dodf>jbvb.lbng.Objfdt</dodf> holding thf dolumn vbluf
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Objfdt gftObjfdt(String dolumnNbmf) throws SQLExdfption {
        rfturn gftObjfdt(findColumn(dolumnNbmf));
    }

    //----------------------------------------------------------------

    /**
     * Mbps thf givfn <dodf>JdbdRowSftImpl</dodf> dolumn nbmf to its
     * <dodf>JdbdRowSftImpl</dodf> dolumn indfx bnd rfflfdts this on
     * thf intfrnbl <dodf>RfsultSft</dodf> objfdt.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @rfturn thf dolumn indfx of thf givfn dolumn nbmf
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     * (2) this rowsft dofs not hbvf b durrfntly vblid donnfdtion,
     * prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid int findColumn(String dolumnNbmf) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.findColumn(dolumnNbmf);
    }


    //--------------------------JDBC 2.0-----------------------------------

    //---------------------------------------------------------------------
    // Gfttfrs bnd Sfttfrs
    //---------------------------------------------------------------------

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * @rfturn b <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt dontbins thf dolumn
     * vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf vbluf rfturnfd is
     * <dodf>null</dodf>.
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     *
     */
    publid jbvb.io.Rfbdfr gftChbrbdtfrStrfbm(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftChbrbdtfrStrfbm(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     *
     * @rfturn b <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt dontbins thf dolumn
     * vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf vbluf rfturnfd is
     * <dodf>null</dodf>.
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @rfturn thf vbluf in thf spfdififd dolumn bs b <dodf>jbvb.io.Rfbdfr</dodf>
     *
     */
    publid jbvb.io.Rfbdfr gftChbrbdtfrStrfbm(String dolumnNbmf) throws SQLExdfption {
        rfturn gftChbrbdtfrStrfbm(findColumn(dolumnNbmf));
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> with full prfdision.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn thf dolumn vbluf (full prfdision);
     * if thf vbluf is SQL <dodf>NULL</dodf>, thf vbluf rfturnfd is
     * <dodf>null</dodf>.
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid BigDfdimbl gftBigDfdimbl(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftBigDfdimbl(dolumnIndfx);
    }

    /**
     * Gfts thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b
     * <dodf>jbvb.mbth.BigDfdimbl</dodf> with full prfdision.
     *
     * @pbrbm dolumnNbmf thf dolumn nbmf
     * @rfturn thf dolumn vbluf (full prfdision);
     * if thf vbluf is SQL <dodf>NULL</dodf>, thf vbluf rfturnfd is
     * <dodf>null</dodf>.
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid BigDfdimbl gftBigDfdimbl(String dolumnNbmf) throws SQLExdfption {
        rfturn gftBigDfdimbl(findColumn(dolumnNbmf));
    }

    //---------------------------------------------------------------------
    // Trbvfrsbl/Positioning
    //---------------------------------------------------------------------

    /**
     * Indidbtfs whfthfr thf dursor is bfforf thf first row in
     * this rowsft's <dodf>RfsultSft</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is bfforf thf first row;
     * <dodf>fblsf</dodf> if thf dursor is bt bny othfr position or thf
     * rfsult sft dontbins no rows
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn isBfforfFirst() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.isBfforfFirst();
    }

    /**
     * Indidbtfs whfthfr thf dursor is bftfr thf lbst row in
     * this rowsft's <dodf>RfsultSft</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is bftfr thf lbst row;
     * <dodf>fblsf</dodf> if thf dursor is bt bny othfr position or thf
     * rfsult sft dontbins no rows
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn isAftfrLbst() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.isAftfrLbst();
    }

    /**
     * Indidbtfs whfthfr thf dursor is on thf first row of
     * this rowsft's <dodf>RfsultSft</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf first row;
     * <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn isFirst() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.isFirst();
    }

    /**
     * Indidbtfs whfthfr thf dursor is on thf lbst row of
     * this rowsft's <dodf>RfsultSft</dodf> objfdt.
     * Notf: Cblling thf mfthod <dodf>isLbst</dodf> mby bf fxpfnsivf
     * bfdbusf thf JDBC drivfr
     * might nffd to fftdh bhfbd onf row in ordfr to dftfrminf
     * whfthfr thf durrfnt row is thf lbst row in thf rfsult sft.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf lbst row;
     * <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid boolfbn isLbst() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.isLbst();
    }

    /**
     * Movfs thf dursor to thf front of
     * this rowsft's <dodf>RfsultSft</dodf> objfdt, just bfforf thf
     * first row. This mfthod hbs no ffffdt if thf rfsult sft dontbins no rows.
     *
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) thf rfsult sft typf is <dodf>TYPE_FORWARD_ONLY</dodf>,
     *            or (3) this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid void bfforfFirst() throws SQLExdfption {
        dhfdkStbtf();

        rs.bfforfFirst();
        notifyCursorMovfd();
    }

    /**
     * Movfs thf dursor to thf fnd of
     * this rowsft's <dodf>RfsultSft</dodf> objfdt, just bftfr thf
     * lbst row. This mfthod hbs no ffffdt if thf rfsult sft dontbins no rows.
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) thf rfsult sft typf is <dodf>TYPE_FORWARD_ONLY</dodf>,
     *            or (3) this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid void bftfrLbst() throws SQLExdfption {
        dhfdkStbtf();

        rs.bftfrLbst();
        notifyCursorMovfd();
    }

    /**
     * Movfs thf dursor to thf first row in
     * this rowsft's <dodf>RfsultSft</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     * <dodf>fblsf</dodf> if thfrf brf no rows in thf rfsult sft
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) thf rfsult sft typf is <dodf>TYPE_FORWARD_ONLY</dodf>,
     *            or (3) this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn first() throws SQLExdfption {
        dhfdkStbtf();

        boolfbn b = rs.first();
        notifyCursorMovfd();
        rfturn b;

    }

    /**
     * Movfs thf dursor to thf lbst row in
     * this rowsft's <dodf>RfsultSft</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     * <dodf>fblsf</dodf> if thfrf brf no rows in thf rfsult sft
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) thf rfsult sft typf is <dodf>TYPE_FORWARD_ONLY</dodf>,
     *            or (3) this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn lbst() throws SQLExdfption {
        dhfdkStbtf();

        boolfbn b = rs.lbst();
        notifyCursorMovfd();
        rfturn b;
    }

    /**
     * Rftrifvfs thf durrfnt row numbfr.  Thf first row is numbfr 1, thf
     * sfdond is numbfr 2, bnd so on.
     *
     * @rfturn thf durrfnt row numbfr; <dodf>0</dodf> if thfrf is no durrfnt row
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid int gftRow() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftRow();
    }

    /**
     * Movfs thf dursor to thf givfn row numbfr in
     * this rowsft's intfrnbl <dodf>RfsultSft</dodf> objfdt.
     *
     * <p>If thf row numbfr is positivf, thf dursor movfs to
     * thf givfn row numbfr with rfspfdt to thf
     * bfginning of thf rfsult sft.  Thf first row is row 1, thf sfdond
     * is row 2, bnd so on.
     *
     * <p>If thf givfn row numbfr is nfgbtivf, thf dursor movfs to
     * bn bbsolutf row position with rfspfdt to
     * thf fnd of thf rfsult sft.  For fxbmplf, dblling thf mfthod
     * <dodf>bbsolutf(-1)</dodf> positions thf
     * dursor on thf lbst row, dblling thf mfthod <dodf>bbsolutf(-2)</dodf>
     * movfs thf dursor to thf nfxt-to-lbst row, bnd so on.
     *
     * <p>An bttfmpt to position thf dursor bfyond thf first/lbst row in
     * thf rfsult sft lfbvfs thf dursor bfforf thf first row or bftfr
     * thf lbst row.
     *
     * <p><B>Notf:</B> Cblling <dodf>bbsolutf(1)</dodf> is thf sbmf
     * bs dblling <dodf>first()</dodf>. Cblling <dodf>bbsolutf(-1)</dodf>
     * is thf sbmf bs dblling <dodf>lbst()</dodf>.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on thf rfsult sft;
     * <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) thf row is <dodf>0</dodf>, (3) thf rfsult sft
     *            typf is <dodf>TYPE_FORWARD_ONLY</dodf>, or (4) this
     *            rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn bbsolutf(int row) throws SQLExdfption {
        dhfdkStbtf();

        boolfbn b = rs.bbsolutf(row);
        notifyCursorMovfd();
        rfturn b;
    }

    /**
     * Movfs thf dursor b rflbtivf numbfr of rows, fithfr positivf or nfgbtivf.
     * Attfmpting to movf bfyond thf first/lbst row in thf
     * rfsult sft positions thf dursor bfforf/bftfr thf
     * thf first/lbst row. Cblling <dodf>rflbtivf(0)</dodf> is vblid, but dofs
     * not dhbngf thf dursor position.
     *
     * <p>Notf: Cblling thf mfthod <dodf>rflbtivf(1)</dodf>
     * is difffrfnt from dblling thf mfthod <dodf>nfxt()</dodf>
     * bfdbusf is mbkfs sfnsf to dbll <dodf>nfxt()</dodf> whfn thfrf
     * is no durrfnt row,
     * for fxbmplf, whfn thf dursor is positionfd bfforf thf first row
     * or bftfr thf lbst row of thf rfsult sft.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b row;
     * <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) thfrf is no durrfnt row, (3) thf rfsult sft
     *            typf is <dodf>TYPE_FORWARD_ONLY</dodf>, or (4) this
     *            rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn rflbtivf(int rows) throws SQLExdfption {
        dhfdkStbtf();

        boolfbn b = rs.rflbtivf(rows);
        notifyCursorMovfd();
        rfturn b;
    }

    /**
     * Movfs thf dursor to thf prfvious row in this
     * <dodf>RfsultSft</dodf> objfdt.
     *
     * <p><B>Notf:</B> Cblling thf mfthod <dodf>prfvious()</dodf> is not thf sbmf bs
     * dblling thf mfthod <dodf>rflbtivf(-1)</dodf> bfdbusf it
     * mbkfs sfnsf to dbll <dodf>prfvious()</dodf> whfn thfrf is no durrfnt row.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor is on b vblid row;
     * <dodf>fblsf</dodf> if it is off thf rfsult sft
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) thf rfsult sft typf is <dodf>TYPE_FORWARD_ONLY</dodf>,
     *            or (3) this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid boolfbn prfvious() throws SQLExdfption {
        dhfdkStbtf();

        boolfbn b = rs.prfvious();
        notifyCursorMovfd();
        rfturn b;
    }

    /**
     * Givfs b hint bs to thf dirfdtion in whidh thf rows in this
     * <dodf>RfsultSft</dodf> objfdt will bf prodfssfd.
     * Thf initibl vbluf is dftfrminfd by thf
     * <dodf>Stbtfmfnt</dodf> objfdt
     * thbt produdfd this rowsft's <dodf>RfsultSft</dodf> objfdt.
     * Thf fftdh dirfdtion mby bf dhbngfd bt bny timf.
     *
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) thf rfsult sft typf is <dodf>TYPE_FORWARD_ONLY</dodf>
     *            bnd thf fftdh dirfdtion is not <dodf>FETCH_FORWARD</dodf>,
     *            or (3) this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     * @sff jbvb.sql.Stbtfmfnt#sftFftdhDirfdtion
     */
    publid void sftFftdhDirfdtion(int dirfdtion) throws SQLExdfption {
        dhfdkStbtf();

        rs.sftFftdhDirfdtion(dirfdtion);
    }

    /**
     * Rfturns thf fftdh dirfdtion for this
     * <dodf>RfsultSft</dodf> objfdt.
     *
     * @rfturn thf durrfnt fftdh dirfdtion for this rowsft's
     *         <dodf>RfsultSft</dodf> objfdt
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid int gftFftdhDirfdtion() throws SQLExdfption {
        try {
             dhfdkStbtf();
        } dbtdh(SQLExdfption sqlf) {
             supfr.gftFftdhDirfdtion();
        }
        rfturn rs.gftFftdhDirfdtion();
    }

    /**
     * Givfs thf JDBC drivfr b hint bs to thf numbfr of rows thbt should
     * bf fftdhfd from thf dbtbbbsf whfn morf rows brf nffdfd for this
     * <dodf>RfsultSft</dodf> objfdt.
     * If thf fftdh sizf spfdififd is zfro, thf JDBC drivfr
     * ignorfs thf vbluf bnd is frff to mbkf its own bfst gufss bs to whbt
     * thf fftdh sizf should bf.  Thf dffbult vbluf is sft by thf
     * <dodf>Stbtfmfnt</dodf> objfdt
     * thbt drfbtfd thf rfsult sft.  Thf fftdh sizf mby bf dhbngfd bt bny timf.
     *
     * @pbrbm rows thf numbfr of rows to fftdh
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs, (2) thf
     *            dondition <dodf>0 <= rows <= this.gftMbxRows()</dodf> is not
     *            sbtisfifd, or (3) this rowsft dofs not durrfntly hbvf b vblid
     *            donnfdtion, prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void sftFftdhSizf(int rows) throws SQLExdfption {
        dhfdkStbtf();

        rs.sftFftdhSizf(rows);
    }

    /**
     *
     * Rfturns thf fftdh sizf for this
     * <dodf>RfsultSft</dodf> objfdt.
     *
     * @rfturn thf durrfnt fftdh sizf for this rowsft's <dodf>RfsultSft</dodf> objfdt
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid int gftTypf() throws SQLExdfption {
        try {
             dhfdkStbtf();
        } dbtdh(SQLExdfption sqlf) {
            rfturn supfr.gftTypf();
        }

        // If thf RfsultSft hbs not bffn drfbtfd, thfn rfturn thf dffbult typf
        // othfrwisf rfturn thf typf from thf RfsultSft.
        if(rs == null) {
            rfturn supfr.gftTypf();
        } flsf {
           int rstypf = rs.gftTypf();
            rfturn rstypf;
        }


    }

    /**
     * Rfturns thf dondurrfndy modf of this rowsft's <dodf>RfsultSft</dodf> objfdt.
     * Thf dondurrfndy usfd is dftfrminfd by thf
     * <dodf>Stbtfmfnt</dodf> objfdt thbt drfbtfd thf rfsult sft.
     *
     * @rfturn thf dondurrfndy typf, fithfr <dodf>CONCUR_READ_ONLY</dodf>
     * or <dodf>CONCUR_UPDATABLE</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid int gftCondurrfndy() throws SQLExdfption {
        try {
             dhfdkStbtf();
        } dbtdh(SQLExdfption sqlf) {
             supfr.gftCondurrfndy();
        }
        rfturn rs.gftCondurrfndy();
    }

    //---------------------------------------------------------------------
    // Updbtfs
    //---------------------------------------------------------------------

    /**
     * Indidbtfs whfthfr thf durrfnt row hbs bffn updbtfd.  Thf vbluf rfturnfd
     * dfpfnds on whfthfr or not thf rfsult sft dbn dftfdt updbtfs.
     *
     * @rfturn <dodf>truf</dodf> if thf row hbs bffn visibly updbtfd
     * by thf ownfr or bnothfr, bnd updbtfs brf dftfdtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     * @sff jbvb.sql.DbtbbbsfMftbDbtb#updbtfsArfDftfdtfd
     */
    publid boolfbn rowUpdbtfd() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.rowUpdbtfd();
    }

    /**
     * Indidbtfs whfthfr thf durrfnt row hbs hbd bn insfrtion.
     * Thf vbluf rfturnfd dfpfnds on whfthfr or not this
     * <dodf>RfsultSft</dodf> objfdt dbn dftfdt visiblf insfrts.
     *
     * @rfturn <dodf>truf</dodf> if b row hbs hbd bn insfrtion
     * bnd insfrtions brf dftfdtfd; <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     * @sff jbvb.sql.DbtbbbsfMftbDbtb#insfrtsArfDftfdtfd
     *
     */
    publid boolfbn rowInsfrtfd() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.rowInsfrtfd();
    }

    /**
     * Indidbtfs whfthfr b row hbs bffn dflftfd.  A dflftfd row mby lfbvf
     * b visiblf "holf" in b rfsult sft.  This mfthod dbn bf usfd to
     * dftfdt holfs in b rfsult sft.  Thf vbluf rfturnfd dfpfnds on whfthfr
     * or not this rowsft's <dodf>RfsultSft</dodf> objfdt dbn dftfdt dflftions.
     *
     * @rfturn <dodf>truf</dodf> if b row wbs dflftfd bnd dflftions brf dftfdtfd;
     * <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     * @sff jbvb.sql.DbtbbbsfMftbDbtb#dflftfsArfDftfdtfd
     */
    publid boolfbn rowDflftfd() throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.rowDflftfd();
    }

    /**
     * Givfs b nullbblf dolumn b null vbluf.
     *
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf>
     * or <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid void updbtfNull(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfNull(dolumnIndfx);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>boolfbn</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfBoolfbn(int dolumnIndfx, boolfbn x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfBoolfbn(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>bytf</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfBytf(int dolumnIndfx, bytf x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfBytf(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>short</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfShort(int dolumnIndfx, short x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfShort(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn <dodf>int</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid void updbtfInt(int dolumnIndfx, int x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfInt(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>long</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfLong(int dolumnIndfx, long x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfLong(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>flobt</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfFlobt(int dolumnIndfx, flobt x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfFlobt(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>doublf</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfDoublf(int dolumnIndfx, doublf x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfDoublf(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.mbth.BigDfdimbl</dodf>
     * vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfBigDfdimbl(int dolumnIndfx, BigDfdimbl x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfBigDfdimbl(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>String</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfString(int dolumnIndfx, String x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfString(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>bytf</dodf> brrby vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfBytfs(int dolumnIndfx, bytf x[]) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfBytfs(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.Dbtf</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfDbtf(int dolumnIndfx, jbvb.sql.Dbtf x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfDbtf(dolumnIndfx, x);
    }


    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.Timf</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfTimf(int dolumnIndfx, jbvb.sql.Timf x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfTimf(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.Timfstbmp</dodf>
     * vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfTimfstbmp(int dolumnIndfx, jbvb.sql.Timfstbmp x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfTimfstbmp(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn bsdii strfbm vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            (2) or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfAsdiiStrfbm(int dolumnIndfx, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfAsdiiStrfbm(dolumnIndfx, x, lfngth);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b binbry strfbm vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfBinbryStrfbm(int dolumnIndfx, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfBinbryStrfbm(dolumnIndfx, x, lfngth);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfChbrbdtfrStrfbm(int dolumnIndfx, jbvb.io.Rfbdfr x, int lfngth) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfChbrbdtfrStrfbm(dolumnIndfx, x, lfngth);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn <dodf>Objfdt</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm sdblf for <dodf>jbvb.sql.Typfs.DECIMAl</dodf>
     *  or <dodf>jbvb.sql.Typfs.NUMERIC</dodf> typfs,
     *  this is thf numbfr of digits bftfr thf dfdimbl point.  For bll othfr
     *  typfs this vbluf will bf ignorfd.
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfObjfdt(int dolumnIndfx, Objfdt x, int sdblf) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfObjfdt(dolumnIndfx, x, sdblf);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn <dodf>Objfdt</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfObjfdt(int dolumnIndfx, Objfdt x) throws SQLExdfption {
        dhfdkStbtf();

        // To dhfdk thf typf bnd dondurrfndy of thf RfsultSft
        // to vfrify whfthfr updbtfs brf possiblf or not
        dhfdkTypfCondurrfndy();

        rs.updbtfObjfdt(dolumnIndfx, x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>null</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid void updbtfNull(String dolumnNbmf) throws SQLExdfption {
        updbtfNull(findColumn(dolumnNbmf));
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>boolfbn</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfBoolfbn(String dolumnNbmf, boolfbn x) throws SQLExdfption {
        updbtfBoolfbn(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>bytf</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfBytf(String dolumnNbmf, bytf x) throws SQLExdfption {
        updbtfBytf(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>short</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfShort(String dolumnNbmf, short x) throws SQLExdfption {
        updbtfShort(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn <dodf>int</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfInt(String dolumnNbmf, int x) throws SQLExdfption {
        updbtfInt(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>long</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfLong(String dolumnNbmf, long x) throws SQLExdfption {
        updbtfLong(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>flobt </dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfFlobt(String dolumnNbmf, flobt x) throws SQLExdfption {
        updbtfFlobt(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>doublf</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfDoublf(String dolumnNbmf, doublf x) throws SQLExdfption {
        updbtfDoublf(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.BigDfdimbl</dodf>
     * vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfBigDfdimbl(String dolumnNbmf, BigDfdimbl x) throws SQLExdfption {
        updbtfBigDfdimbl(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>String</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfString(String dolumnNbmf, String x) throws SQLExdfption {
        updbtfString(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>boolfbn</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * JDBC 2.0
     *
     * Updbtfs b dolumn with b bytf brrby vbluf.
     *
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row, or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or <dodf>insfrtRow</dodf>
     * mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfBytfs(String dolumnNbmf, bytf x[]) throws SQLExdfption {
        updbtfBytfs(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.Dbtf</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfDbtf(String dolumnNbmf, jbvb.sql.Dbtf x) throws SQLExdfption {
        updbtfDbtf(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.Timf</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfTimf(String dolumnNbmf, jbvb.sql.Timf x) throws SQLExdfption {
        updbtfTimf(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.Timfstbmp</dodf>
     * vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfTimfstbmp(String dolumnNbmf, jbvb.sql.Timfstbmp x) throws SQLExdfption {
        updbtfTimfstbmp(findColumn(dolumnNbmf), x);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn bsdii strfbm vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfAsdiiStrfbm(String dolumnNbmf, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        updbtfAsdiiStrfbm(findColumn(dolumnNbmf), x, lfngth);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b binbry strfbm vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfBinbryStrfbm(String dolumnNbmf, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        updbtfBinbryStrfbm(findColumn(dolumnNbmf), x, lfngth);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs
     * in thf durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf>
     * mfthods do not updbtf thf undfrlying dbtbbbsf; instfbd thf
     * <dodf>updbtfRow</dodf> or <dodf>insfrtRow</dodf> mfthods brf dbllfd
     * to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm rfbdfr thf nfw dolumn <dodf>Rfbdfr</dodf> strfbm vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfChbrbdtfrStrfbm(String dolumnNbmf, jbvb.io.Rfbdfr rfbdfr, int lfngth) throws SQLExdfption {
        updbtfChbrbdtfrStrfbm(findColumn(dolumnNbmf), rfbdfr, lfngth);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn <dodf>Objfdt</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm sdblf for <dodf>jbvb.sql.Typfs.DECIMAL</dodf>
     *  or <dodf>jbvb.sql.Typfs.NUMERIC</dodf> typfs,
     *  this is thf numbfr of digits bftfr thf dfdimbl point.  For bll othfr
     *  typfs this vbluf will bf ignorfd.
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfObjfdt(String dolumnNbmf, Objfdt x, int sdblf) throws SQLExdfption {
        updbtfObjfdt(findColumn(dolumnNbmf), x, sdblf);
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn <dodf>Objfdt</dodf> vbluf.
     * Thf <dodf>updbtfXXX</dodf> mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf <dodf>updbtfXXX</dodf> mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     */
    publid void updbtfObjfdt(String dolumnNbmf, Objfdt x) throws SQLExdfption {
        updbtfObjfdt(findColumn(dolumnNbmf), x);
    }

    /**
     * Insfrts thf dontfnts of thf insfrt row into this
     * <dodf>RfsultSft</dodf> objfdt bnd into thf dbtbbbsf
     * bnd blso notififs listfnfrs thbt b row hbs dhbngfd.
     * Thf dursor must bf on thf insfrt row whfn this mfthod is dbllfd.
     *
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) this mfthod is dbllfd whfn thf dursor is not
     *             on thf insfrt row, (3) not bll non-nullbblf dolumns in
     *             thf insfrt row hbvf bffn givfn b vbluf, or (4) this
     *             rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *             prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid void insfrtRow() throws SQLExdfption {
        dhfdkStbtf();

        rs.insfrtRow();
        notifyRowChbngfd();
    }

    /**
     * Updbtfs thf undfrlying dbtbbbsf with thf nfw dontfnts of thf
     * durrfnt row of this rowsft's <dodf>RfsultSft</dodf> objfdt
     * bnd notififs listfnfrs thbt b row hbs dhbngfd.
     * This mfthod dbnnot bf dbllfd whfn thf dursor is on thf insfrt row.
     *
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) this mfthod is dbllfd whfn thf dursor is
     *             on thf insfrt row, (3) thf dondurrfndy of thf rfsult
     *             sft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>, or
     *             (4) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *             prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid void updbtfRow() throws SQLExdfption {
        dhfdkStbtf();

        rs.updbtfRow();
        notifyRowChbngfd();
    }

    /**
     * Dflftfs thf durrfnt row from this rowsft's <dodf>RfsultSft</dodf> objfdt
     * bnd from thf undfrlying dbtbbbsf bnd blso notififs listfnfrs thbt b row
     * hbs dhbngfd.  This mfthod dbnnot bf dbllfd whfn thf dursor is on thf insfrt
     * row.
     *
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * or if this mfthod is dbllfd whfn thf dursor is on thf insfrt row
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) this mfthod is dbllfd whfn thf dursor is bfforf thf
     *            first row, bftfr thf lbst row, or on thf insfrt row,
     *            (3) thf dondurrfndy of this rowsft's rfsult
     *            sft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>, or
     *            (4) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid void dflftfRow() throws SQLExdfption {
        dhfdkStbtf();

        rs.dflftfRow();
        notifyRowChbngfd();
    }

    /**
     * Rffrfshfs thf durrfnt row of this rowsft's <dodf>RfsultSft</dodf>
     * objfdt with its most rfdfnt vbluf in thf dbtbbbsf.  This mfthod
     * dbnnot bf dbllfd whfn thf dursor is on thf insfrt row.
     *
     * <P>Thf <dodf>rffrfshRow</dodf> mfthod providfs b wby for bn
     * bpplidbtion to fxpliditly tfll thf JDBC drivfr to rffftdh
     * b row(s) from thf dbtbbbsf.  An bpplidbtion mby wbnt to dbll
     * <dodf>rffrfshRow</dodf> whfn dbdhing or prffftdhing is bfing
     * donf by thf JDBC drivfr to fftdh thf lbtfst vbluf of b row
     * from thf dbtbbbsf.  Thf JDBC drivfr mby bdtublly rffrfsh multiplf
     * rows bt ondf if thf fftdh sizf is grfbtfr thbn onf.
     *
     * <P> All vblufs brf rffftdhfd subjfdt to thf trbnsbdtion isolbtion
     * lfvfl bnd dursor sfnsitivity.  If <dodf>rffrfshRow</dodf> is dbllfd bftfr
     * dblling bn <dodf>updbtfXXX</dodf> mfthod, but bfforf dblling
     * thf mfthod <dodf>updbtfRow</dodf>, thfn thf
     * updbtfs mbdf to thf row brf lost.  Cblling thf mfthod
     * <dodf>rffrfshRow</dodf> frfqufntly will likfly slow pfrformbndf.
     *
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) this mfthod is dbllfd whfn thf dursor is
     *             on thf insfrt row, or (3) this rowsft dofs not
     *             durrfntly hbvf b vblid donnfdtion, prfpbrfd stbtfmfnt,
     *             bnd rfsult sft
     *
     */
    publid void rffrfshRow() throws SQLExdfption {
        dhfdkStbtf();

        rs.rffrfshRow();
    }

    /**
     * Cbndfls thf updbtfs mbdf to thf durrfnt row in this
     * <dodf>RfsultSft</dodf> objfdt bnd notififs listfnfrs thbt b row
     * hbs dhbngfd. This mfthod mby bf dbllfd bftfr dblling bn
     * <dodf>updbtfXXX</dodf> mfthod(s) bnd bfforf dblling
     * thf mfthod <dodf>updbtfRow</dodf> to roll bbdk
     * thf updbtfs mbdf to b row.  If no updbtfs hbvf bffn mbdf or
     * <dodf>updbtfRow</dodf> hbs blrfbdy bffn dbllfd, this mfthod hbs no
     * ffffdt.
     *
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) this mfthod is dbllfd whfn thf dursor is
     *             on thf insfrt row, or (3) this rowsft dofs not
     *             durrfntly hbvf b vblid donnfdtion, prfpbrfd stbtfmfnt,
     *             bnd rfsult sft
     */
    publid void dbndflRowUpdbtfs() throws SQLExdfption {
        dhfdkStbtf();

        rs.dbndflRowUpdbtfs();

        notifyRowChbngfd();
    }

    /**
     * Movfs thf dursor to thf insfrt row.  Thf durrfnt dursor position is
     * rfmfmbfrfd whilf thf dursor is positionfd on thf insfrt row.
     *
     * Thf insfrt row is b spfdibl row bssodibtfd with bn updbtbblf
     * rfsult sft.  It is fssfntiblly b bufffr whfrf b nfw row mby
     * bf donstrudtfd by dblling thf <dodf>updbtfXXX</dodf> mfthods prior to
     * insfrting thf row into thf rfsult sft.
     *
     * Only thf <dodf>updbtfXXX</dodf>, <dodf>gftXXX</dodf>,
     * bnd <dodf>insfrtRow</dodf> mfthods mby bf
     * dbllfd whfn thf dursor is on thf insfrt row.  All of thf dolumns in
     * b rfsult sft must bf givfn b vbluf fbdh timf this mfthod is
     * dbllfd bfforf dblling <dodf>insfrtRow</dodf>.
     * An <dodf>updbtfXXX</dodf> mfthod must bf dbllfd bfforf b
     * <dodf>gftXXX</dodf> mfthod dbn bf dbllfd on b dolumn vbluf.
     *
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) this rowsft's <dodf>RfsultSft</dodf> objfdt is
     *             not updbtbblf, or (3) this rowsft dofs not
     *             durrfntly hbvf b vblid donnfdtion, prfpbrfd stbtfmfnt,
     *             bnd rfsult sft
     *
     */
    publid void movfToInsfrtRow() throws SQLExdfption {
        dhfdkStbtf();

        rs.movfToInsfrtRow();
    }

    /**
     * Movfs thf dursor to thf rfmfmbfrfd dursor position, usublly thf
     * durrfnt row.  This mfthod hbs no ffffdt if thf dursor is not on
     * thf insfrt row.
     *
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs,
     *            (2) this rowsft's <dodf>RfsultSft</dodf> objfdt is
     *             not updbtbblf, or (3) this rowsft dofs not
     *             durrfntly hbvf b vblid donnfdtion, prfpbrfd stbtfmfnt,
     *             bnd rfsult sft
     */
    publid void movfToCurrfntRow() throws SQLExdfption {
        dhfdkStbtf();

        rs.movfToCurrfntRow();
    }

    /**
     * Rfturns thf <dodf>Stbtfmfnt</dodf> objfdt thbt produdfd this
     * <dodf>RfsultSft</dodf> objfdt.
     * If thf rfsult sft wbs gfnfrbtfd somf othfr wby, sudh bs by b
     * <dodf>DbtbbbsfMftbDbtb</dodf> mfthod, this mfthod rfturns
     * <dodf>null</dodf>.
     *
     * @rfturn thf <dodf>Stbtfmfnt</dodf> objfdt thbt produdfd
     * this rowsft's <dodf>RfsultSft</dodf> objfdt or <dodf>null</dodf>
     * if thf rfsult sft wbs produdfd somf othfr wby
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     */
    publid jbvb.sql.Stbtfmfnt gftStbtfmfnt() throws SQLExdfption {

        if(rs != null)
        {
           rfturn rs.gftStbtfmfnt();
        } flsf {
           rfturn null;
        }
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs bn <dodf>Objfdt</dodf>.
     * This mfthod usfs thf givfn <dodf>Mbp</dodf> objfdt
     * for thf dustom mbpping of thf
     * SQL strudturfd or distindt typf thbt is bfing rftrifvfd.
     *
     * @pbrbm i thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm mbp b <dodf>jbvb.util.Mbp</dodf> objfdt thbt dontbins thf mbpping
     * from SQL typf nbmfs to dlbssfs in thf Jbvb progrbmming lbngubgf
     * @rfturn bn <dodf>Objfdt</dodf> in thf Jbvb progrbmming lbngubgf
     * rfprfsfnting thf SQL vbluf
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Objfdt gftObjfdt(int i, jbvb.util.Mbp<String,Clbss<?>> mbp)
        throws SQLExdfption
    {
        dhfdkStbtf();

        rfturn rs.gftObjfdt(i, mbp);
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b <dodf>Rff</dodf> objfdt.
     *
     * @pbrbm i thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn b <dodf>Rff</dodf> objfdt rfprfsfnting bn SQL <dodf>REF</dodf> vbluf
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Rff gftRff(int i) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftRff(i);
    }


    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b <dodf>Blob</dodf> objfdt.
     *
     * @pbrbm i thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn b <dodf>Blob</dodf> objfdt rfprfsfnting thf SQL <dodf>BLOB</dodf>
     *         vbluf in thf spfdififd dolumn
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Blob gftBlob(int i) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftBlob(i);
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b <dodf>Clob</dodf> objfdt.
     *
     * @pbrbm i thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @rfturn b <dodf>Clob</dodf> objfdt rfprfsfnting thf SQL <dodf>CLOB</dodf>
     *         vbluf in thf spfdififd dolumn
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Clob gftClob(int i) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftClob(i);
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs bn <dodf>Arrby</dodf> objfdt.
     *
     * @pbrbm i thf first dolumn is 1, thf sfdond is 2, bnd so on.
     * @rfturn bn <dodf>Arrby</dodf> objfdt rfprfsfnting thf SQL <dodf>ARRAY</dodf>
     *         vbluf in thf spfdififd dolumn
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Arrby gftArrby(int i) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftArrby(i);
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs bn <dodf>Objfdt</dodf>.
     * This mfthod usfs thf spfdififd <dodf>Mbp</dodf> objfdt for
     * dustom mbpping if bppropribtf.
     *
     * @pbrbm dolNbmf thf nbmf of thf dolumn from whidh to rftrifvf thf vbluf
     * @pbrbm mbp b <dodf>jbvb.util.Mbp</dodf> objfdt thbt dontbins thf mbpping
     * from SQL typf nbmfs to dlbssfs in thf Jbvb progrbmming lbngubgf
     * @rfturn bn <dodf>Objfdt</dodf> rfprfsfnting thf SQL
     *         vbluf in thf spfdififd dolumn
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Objfdt gftObjfdt(String dolNbmf, jbvb.util.Mbp<String,Clbss<?>> mbp)
        throws SQLExdfption
    {
        rfturn gftObjfdt(findColumn(dolNbmf), mbp);
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b <dodf>Rff</dodf> objfdt.
     *
     * @pbrbm dolNbmf thf dolumn nbmf
     * @rfturn b <dodf>Rff</dodf> objfdt rfprfsfnting thf SQL <dodf>REF</dodf> vbluf in
     *         thf spfdififd dolumn
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Rff gftRff(String dolNbmf) throws SQLExdfption {
        rfturn gftRff(findColumn(dolNbmf));
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b <dodf>Blob</dodf> objfdt.
     *
     * @pbrbm dolNbmf thf nbmf of thf dolumn from whidh to rftrifvf thf vbluf
     * @rfturn b <dodf>Blob</dodf> objfdt rfprfsfnting thf SQL <dodf>BLOB</dodf>
     *         vbluf in thf spfdififd dolumn
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Blob gftBlob(String dolNbmf) throws SQLExdfption {
        rfturn gftBlob(findColumn(dolNbmf));
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b <dodf>Clob</dodf> objfdt.
     *
     * @pbrbm dolNbmf thf nbmf of thf dolumn from whidh to rftrifvf thf vbluf
     * @rfturn b <dodf>Clob</dodf> objfdt rfprfsfnting thf SQL <dodf>CLOB</dodf>
     *         vbluf in thf spfdififd dolumn
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Clob gftClob(String dolNbmf) throws SQLExdfption {
        rfturn gftClob(findColumn(dolNbmf));
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs bn <dodf>Arrby</dodf> objfdt.
     *
     * @pbrbm dolNbmf thf nbmf of thf dolumn from whidh to rftrifvf thf vbluf
     * @rfturn bn <dodf>Arrby</dodf> objfdt rfprfsfnting thf SQL <dodf>ARRAY</dodf>
     *         vbluf in thf spfdififd dolumn
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid Arrby gftArrby(String dolNbmf) throws SQLExdfption {
        rfturn gftArrby(findColumn(dolNbmf));
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b <dodf>jbvb.sql.Dbtf</dodf>
     * objfdt. This mfthod usfs thf givfn dblfndbr to donstrudt bn bppropribtf
     * millisfdond vbluf for thf dbtf if thf undfrlying dbtbbbsf dofs not storf
     * timfzonf informbtion.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt
     *        to usf in donstrudting thf dbtf
     * @rfturn thf dolumn vbluf bs b <dodf>jbvb.sql.Dbtf</dodf> objfdt;
     *         if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if (1) b dbtbbbsf bddfss frror oddurs
     *            or (2) this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Dbtf gftDbtf(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftDbtf(dolumnIndfx, dbl);
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b <dodf>jbvb.sql.Dbtf</dodf>
     * objfdt. This mfthod usfs thf givfn dblfndbr to donstrudt bn bppropribtf
     * millisfdond vbluf for thf dbtf if thf undfrlying dbtbbbsf dofs not storf
     * timfzonf informbtion.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn from whidh to rftrifvf thf vbluf
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt
     *        to usf in donstrudting thf dbtf
     * @rfturn thf dolumn vbluf bs b <dodf>jbvb.sql.Dbtf</dodf> objfdt;
     *         if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     *
     */
    publid jbvb.sql.Dbtf gftDbtf(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        rfturn gftDbtf(findColumn(dolumnNbmf), dbl);
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b <dodf>jbvb.sql.Timf</dodf>
     * objfdt. This mfthod usfs thf givfn dblfndbr to donstrudt bn bppropribtf
     * millisfdond vbluf for thf dbtf if thf undfrlying dbtbbbsf dofs not storf
     * timfzonf informbtion.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt
     *        to usf in donstrudting thf timf
     * @rfturn thf dolumn vbluf bs b <dodf>jbvb.sql.Timf</dodf> objfdt;
     *         if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf vbluf rfturnfd is <dodf>null</dodf> in thf Jbvb progrbmming lbngubgf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Timf gftTimf(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftTimf(dolumnIndfx, dbl);
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b <dodf>jbvb.sql.Timf</dodf>
     * objfdt. This mfthod usfs thf givfn dblfndbr to donstrudt bn bppropribtf
     * millisfdond vbluf for thf dbtf if thf undfrlying dbtbbbsf dofs not storf
     * timfzonf informbtion.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt
     *        to usf in donstrudting thf timf
     * @rfturn thf dolumn vbluf bs b <dodf>jbvb.sql.Timf</dodf> objfdt;
     *         if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf vbluf rfturnfd is <dodf>null</dodf> in thf Jbvb progrbmming lbngubgf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Timf gftTimf(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        rfturn gftTimf(findColumn(dolumnNbmf), dbl);
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     * This mfthod usfs thf givfn dblfndbr to donstrudt bn bppropribtf millisfdond
     * vbluf for thf timfstbmp if thf undfrlying dbtbbbsf dofs not storf
     * timfzonf informbtion.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, bnd so on
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt
     *        to usf in donstrudting thf timfstbmp
     * @rfturn thf dolumn vbluf bs b <dodf>jbvb.sql.Timfstbmp</dodf> objfdt;
     *         if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(int dolumnIndfx, Cblfndbr dbl) throws SQLExdfption {
        dhfdkStbtf();

        rfturn rs.gftTimfstbmp(dolumnIndfx, dbl);
    }

    /**
     * Rfturns thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this rowsft's <dodf>RfsultSft</dodf> objfdt bs b
     * <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     * This mfthod usfs thf givfn dblfndbr to donstrudt bn bppropribtf millisfdond
     * vbluf for thf timfstbmp if thf undfrlying dbtbbbsf dofs not storf
     * timfzonf informbtion.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt
     *        to usf in donstrudting thf timfstbmp
     * @rfturn thf dolumn vbluf bs b <dodf>jbvb.sql.Timfstbmp</dodf> objfdt;
     *         if thf vbluf is SQL <dodf>NULL</dodf>,
     *         thf vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *            or this rowsft dofs not durrfntly hbvf b vblid donnfdtion,
     *            prfpbrfd stbtfmfnt, bnd rfsult sft
     */
    publid jbvb.sql.Timfstbmp gftTimfstbmp(String dolumnNbmf, Cblfndbr dbl) throws SQLExdfption {
        rfturn gftTimfstbmp(findColumn(dolumnNbmf), dbl);
    }


    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JdbdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm rff thf nfw <dodf>Rff</dodf> dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRff(int dolumnIndfx, jbvb.sql.Rff rff)
        throws SQLExdfption {
        dhfdkStbtf();
        rs.updbtfRff(dolumnIndfx, rff);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JdbdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm rff thf nfw dolumn vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfRff(String dolumnNbmf, jbvb.sql.Rff rff)
        throws SQLExdfption {
        updbtfRff(findColumn(dolumnNbmf), rff);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JdbdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm d thf nfw dolumn <dodf>Clob</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfClob(int dolumnIndfx, Clob d) throws SQLExdfption {
        dhfdkStbtf();
        rs.updbtfClob(dolumnIndfx, d);
    }


    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JdbdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>doublf</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm d thf nfw dolumn <dodf>Clob</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfClob(String dolumnNbmf, Clob d) throws SQLExdfption {
        updbtfClob(findColumn(dolumnNbmf), d);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JdbdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Blob</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm b thf nfw dolumn <dodf>Blob</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBlob(int dolumnIndfx, Blob b) throws SQLExdfption {
        dhfdkStbtf();
        rs.updbtfBlob(dolumnIndfx, b);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JdbdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Blob </dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm b thf nfw dolumn <dodf>Blob</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfBlob(String dolumnNbmf, Blob b) throws SQLExdfption {
        updbtfBlob(findColumn(dolumnNbmf), b);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JdbdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Arrby</dodf> vblufs.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnIndfx thf first dolumn is <dodf>1</dodf>, thf sfdond
     *        is <dodf>2</dodf>, bnd so on; must bf <dodf>1</dodf> or lbrgfr
     *        bnd fqubl to or lfss thbn thf numbfr of dolumns in this rowsft
     * @pbrbm b thf nfw dolumn <dodf>Arrby</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn indfx is out of bounds,
     *            (2) thf dursor is not on onf of this rowsft's rows or its
     *            insfrt row, or (3) this rowsft is
     *            <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfArrby(int dolumnIndfx, Arrby b) throws SQLExdfption {
        dhfdkStbtf();
        rs.updbtfArrby(dolumnIndfx, b);
    }

    /**
     * Sfts thf dfsignbtfd dolumn in fithfr thf durrfnt row or thf insfrt
     * row of this <dodf>JdbdRowSftImpl</dodf> objfdt with thf givfn
     * <dodf>jbvb.sql.Arrby</dodf> vbluf.
     *
     * This mfthod updbtfs b dolumn vbluf in fithfr thf durrfnt row or
     * thf insfrt row of this rowsft, but it dofs not updbtf thf
     * dbtbbbsf.  If thf dursor is on b row in thf rowsft, thf
     * mfthod {@link #updbtfRow} must bf dbllfd to updbtf thf dbtbbbsf.
     * If thf dursor is on thf insfrt row, thf mfthod {@link #insfrtRow}
     * must bf dbllfd, whidh will insfrt thf nfw row into both this rowsft
     * bnd thf dbtbbbsf. Both of thfsf mfthods must bf dbllfd bfforf thf
     * dursor movfs to bnothfr row.
     *
     * @pbrbm dolumnNbmf b <dodf>String</dodf> objfdt thbt must mbtdh thf
     *        SQL nbmf of b dolumn in this rowsft, ignoring dbsf
     * @pbrbm b thf nfw dolumn <dodf>Arrby</dodf> vbluf
     * @throws SQLExdfption if (1) thf givfn dolumn nbmf dofs not mbtdh thf
     *            nbmf of b dolumn in this rowsft, (2) thf dursor is not on
     *            onf of this rowsft's rows or its insfrt row, or (3) this
     *            rowsft is <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     */
    publid void updbtfArrby(String dolumnNbmf, Arrby b) throws SQLExdfption {
        updbtfArrby(findColumn(dolumnNbmf), b);
    }

    /**
     * Providf intfrfbdf dovfrbgf for gftURL(int) in RfsultSft->RowSft
     */
    publid jbvb.nft.URL gftURL(int dolumnIndfx) throws SQLExdfption {
        dhfdkStbtf();
        rfturn rs.gftURL(dolumnIndfx);
    }

    /**
     * Providf intfrfbdf dovfrbgf for gftURL(String) in RfsultSft->RowSft
     */
    publid jbvb.nft.URL gftURL(String dolumnNbmf) throws SQLExdfption {
        rfturn gftURL(findColumn(dolumnNbmf));
    }

    /**
     * Rfturn thf RowSftWbrning objfdt for thf durrfnt row of b
     * <dodf>JdbdRowSftImpl</dodf>
     */
    publid RowSftWbrning gftRowSftWbrnings() throws SQLExdfption {
       rfturn null;
    }
    /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn int brrby.
     * This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnIdxfs thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnIdx is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(int [])</dodf>
     */
    publid void unsftMbtdhColumn(int[] dolumnIdxfs) throws SQLExdfption {

         int i_vbl;
         for( int j= 0 ;j < dolumnIdxfs.lfngth; j++) {
            i_vbl = (Intfgfr.pbrsfInt(iMbtdhColumns.gft(j).toString()));
            if(dolumnIdxfs[j] != i_vbl) {
               throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.mbtdhdols").toString());
            }
         }

         for( int i = 0;i < dolumnIdxfs.lfngth ;i++) {
            iMbtdhColumns.sft(i,Intfgfr.vblufOf(-1));
         }
    }

   /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn String brrby.
     * This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnIdxfs thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnNbmf is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(String [])</dodf>
     */
    publid void unsftMbtdhColumn(String[] dolumnIdxfs) throws SQLExdfption {

        for(int j = 0 ;j < dolumnIdxfs.lfngth; j++) {
           if( !dolumnIdxfs[j].fqubls(strMbtdhColumns.gft(j)) ){
              throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.mbtdhdols").toString());
           }
        }

        for(int i = 0 ; i < dolumnIdxfs.lfngth; i++) {
           strMbtdhColumns.sft(i,null);
        }
    }

    /**
     * Rftrifvfs thf dolumn nbmf bs <dodf>String</dodf> brrby
     * thbt wbs sft using <dodf>sftMbtdhColumn(String [])</dodf>
     * for this rowsft.
     *
     * @rfturn b <dodf>String</dodf> brrby objfdt thbt dontbins thf dolumn nbmfs
     *         for thf rowsft whidh hbs this thf mbtdh dolumns
     *
     * @throws SQLExdfption if bn frror oddurs or dolumn nbmf is not sft
     */
    publid String[] gftMbtdhColumnNbmfs() throws SQLExdfption {

        String []str_tfmp = nfw String[strMbtdhColumns.sizf()];

        if( strMbtdhColumns.gft(0) == null) {
           throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftmbtdhdols").toString());
        }

        strMbtdhColumns.dopyInto(str_tfmp);
        rfturn str_tfmp;
    }

    /**
     * Rftrifvfs thf dolumn id bs <dodf>int</dodf> brrby thbt wbs sft using
     * <dodf>sftMbtdhColumn(int [])</dodf> for this rowsft.
     *
     * @rfturn b <dodf>int</dodf> brrby objfdt thbt dontbins thf dolumn ids
     *         for thf rowsft whidh hbs this bs thf mbtdh dolumns.
     *
     * @throws SQLExdfption if bn frror oddurs or dolumn indfx is not sft
     */
    publid int[] gftMbtdhColumnIndfxfs() throws SQLExdfption {

        Intfgfr []int_tfmp = nfw Intfgfr[iMbtdhColumns.sizf()];
        int [] i_tfmp = nfw int[iMbtdhColumns.sizf()];
        int i_vbl;

        i_vbl = iMbtdhColumns.gft(0);

        if( i_vbl == -1 ) {
           throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.sftmbtdhdols").toString());
        }


        iMbtdhColumns.dopyInto(int_tfmp);

        for(int i = 0; i < int_tfmp.lfngth; i++) {
           i_tfmp[i] = (int_tfmp[i]).intVbluf();
        }

        rfturn i_tfmp;
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn int brrby.
     * This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumnIndfxfs</dodf> is dbllfd.
     *
     * @pbrbm dolumnIdxfs thf indfxfs into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs; thf
     *        first pbrbmftfr is 0, thf sfdond is 1, bnd so on; must bf
     *        <dodf>0</dodf> or grfbtfr
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(int[] dolumnIdxfs) throws SQLExdfption {

        for(int j = 0 ; j < dolumnIdxfs.lfngth; j++) {
           if( dolumnIdxfs[j] < 0 ) {
              throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.mbtdhdols1").toString());
           }
        }
        for(int i = 0 ;i < dolumnIdxfs.lfngth; i++) {
           iMbtdhColumns.bdd(i,Intfgfr.vblufOf(dolumnIdxfs[i]));
        }
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn String brrby.
     *  This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumn</dodf> is dbllfd.
     *
     * @pbrbm dolumnNbmfs thf nbmf of thf dolumn into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(String[] dolumnNbmfs) throws SQLExdfption {

        for(int j = 0; j < dolumnNbmfs.lfngth; j++) {
           if( dolumnNbmfs[j] == null || dolumnNbmfs[j].fqubls("")) {
              throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.mbtdhdols2").toString());
           }
        }
        for( int i = 0; i < dolumnNbmfs.lfngth; i++) {
           strMbtdhColumns.bdd(i,dolumnNbmfs[i]);
        }
    }


        /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>int</dodf>
     * objfdt.  This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumn</dodf> is dbllfd.
     *
     * @pbrbm dolumnIdx thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs; thf
     *        first pbrbmftfr is 0, thf sfdond is 1, bnd so on; must bf
     *        <dodf>0</dodf> or grfbtfr
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(int dolumnIdx) throws SQLExdfption {
        // vblidbtf, if dol is ok to bf sft
        if(dolumnIdx < 0) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.mbtdhdols1").toString());
        } flsf {
            // sft iMbtdhColumn
            iMbtdhColumns.sft(0, Intfgfr.vblufOf(dolumnIdx));
            //strMbtdhColumn = null;
        }
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf>
     * objfdt.  This forms thf bbsis of thf join for thf
     * <dodf>JoinRowSft</dodf> bs thf dolumn whidh will form thf bbsis of thf
     * join.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this rowsft's
     * dommbnd whfn thf mfthod <dodf>gftMbtdhColumn</dodf> is dbllfd.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds
     */
    publid void sftMbtdhColumn(String dolumnNbmf) throws SQLExdfption {
        // vblidbtf, if dol is ok to bf sft
        if(dolumnNbmf == null || (dolumnNbmf= dolumnNbmf.trim()).fqubls("")) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.mbtdhdols2").toString());
        } flsf {
            // sft strMbtdhColumn
            strMbtdhColumns.sft(0, dolumnNbmf);
            //iMbtdhColumn = -1;
        }
    }

    /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>int</dodf>
     * objfdt.  This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnIdx thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnIdx is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(int)</dodf>
     */
    publid void unsftMbtdhColumn(int dolumnIdx) throws SQLExdfption {
        // dhfdk if wf brf unsftting thf SAME dolumn
        if(! iMbtdhColumns.gft(0).fqubls(Intfgfr.vblufOf(dolumnIdx) )  ) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.unsftmbtdh").toString());
        } flsf if(strMbtdhColumns.gft(0) != null) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.usfdolnbmf").toString());
        } flsf {
                // thbt is, wf brf unsftting it.
               iMbtdhColumns.sft(0, Intfgfr.vblufOf(-1));
        }
    }

    /**
     * Unsfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf>
     * objfdt.  This wbs sft using <dodf>sftMbtdhColumn</dodf>
     * bs thf dolumn whidh will form thf bbsis of thf join.
     * <P>
     * Thf pbrbmftfr vbluf unsft by this mfthod should bf sbmf
     * bs wbs sft.
     *
     * @pbrbm dolumnNbmf thf indfx into this rowsft
     *        objfdt's intfrnbl rfprfsfntbtion of pbrbmftfr vblufs
     * @throws SQLExdfption if bn frror oddurs or thf
     *  pbrbmftfr indfx is out of bounds or if thf dolumnNbmf is
     *  not thf sbmf bs sft using <dodf>sftMbtdhColumn(String)</dodf>
     *
     */
    publid void unsftMbtdhColumn(String dolumnNbmf) throws SQLExdfption {
        // dhfdk if wf brf unsftting thf sbmf dolumn
        dolumnNbmf = dolumnNbmf.trim();

        if(!((strMbtdhColumns.gft(0)).fqubls(dolumnNbmf))) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.unsftmbtdh").toString());
        } flsf if(iMbtdhColumns.gft(0) > 0) {
            throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.usfdolid").toString());
        } flsf {
            strMbtdhColumns.sft(0, null);   // thbt is, wf brf unsftting it.
        }
    }

    /**
     * Rftrifvfs thf <dodf>DbtbbbsfMftbDbtb</dodf> bssodibtfd with
     * thf donnfdtion hbndlf bssodibtfd this this
     * <dodf>JdbdRowSft</dodf> objfdt.
     *
     * @rfturn thf <dodf>DbtbbbsfMftbdbtb</dodf> bssodibtfd
     *  with thf rowsft's donnfdtion.
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     */
    publid DbtbbbsfMftbDbtb gftDbtbbbsfMftbDbtb() throws SQLExdfption {
        Connfdtion don = donnfdt();
        rfturn don.gftMftbDbtb();
    }

    /**
     * Rftrifvfs thf <dodf>PbrbmftfrMftbDbtb</dodf> bssodibtfd with
     * thf donnfdtion hbndlf bssodibtfd this this
     * <dodf>JdbdRowSft</dodf> objfdt.
     *
     * @rfturn thf <dodf>PbrbmftfrMftbdbtb</dodf> bssodibtfd
     *  with thf rowsft's donnfdtion.
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     */
    publid PbrbmftfrMftbDbtb gftPbrbmftfrMftbDbtb() throws SQLExdfption {
        prfpbrf();
        rfturn (ps.gftPbrbmftfrMftbDbtb());
    }

    /**
     * Commits bll updbtfs in this <dodf>JdbdRowSft</dodf> objfdt by
     * wrbpping thf intfrnbl <dodf>Connfdtion</dodf> objfdt bnd dblling
     * its <dodf>dommit</dodf> mfthod.
     * This mfthod sfts this <dodf>JdbdRowSft</dodf> objfdt's privbtf fifld
     * <dodf>rs</dodf> to <dodf>null</dodf> bftfr sbving its vbluf to bnothfr
     * objfdt, but only if thf <dodf>RfsultSft</dodf>
     * donstbnt <dodf>HOLD_CURSORS_OVER_COMMIT</dodf> hbs not bffn sft.
     * (Thf fifld <dodf>rs</dodf> is this <dodf>JdbdRowSft</dodf> objfdt's
     * <dodf>RfsultSft</dodf> objfdt.)
     *
     * @throws SQLExdfption if butoCommit is sft to truf or if b dbtbbbsf
     * bddfss frror oddurs
     */
    publid void dommit() throws SQLExdfption {
      donn.dommit();

      // Chfdking thf holbdbility vbluf bnd mbking thf rfsult sft hbndlf null
      // Addfd bs pfr Rbvf rfquirfmfnts

      if( donn.gftHoldbbility() != HOLD_CURSORS_OVER_COMMIT) {
         rs = null;
      }
    }

    /**
     * Sfts buto-dommit on thf intfrnbl <dodf>Connfdtion</dodf> objfdt with this
     * <dodf>JdbdRowSft</dodf>
     *
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     */
    publid void sftAutoCommit(boolfbn butoCommit) throws SQLExdfption {
        // Thf donnfdtion objfdt should bf thfrf
        // in ordfr to dommit thf donnfdtion hbndlf on or off.

        if(donn != null) {
           donn.sftAutoCommit(butoCommit);
        } flsf {
           // Coming hfrf mfbns thf donnfdtion objfdt is null.
           // So gfnfrbtf b donnfdtion hbndlf intfrnblly, sindf
           // b JdbdRowSft is blwbys donnfdtfd to b db, it is finf
           // to gft b hbndlf to thf donnfdtion.

           // Gft hold of b donnfdtion hbndlf
           // bnd dhbngf thf butdommit bs pbssfsd.
           donn = donnfdt();

           // Aftfr sftting thf bflow thf donn.gftAutoCommit()
           // should rfturn thf sbmf vbluf.
           donn.sftAutoCommit(butoCommit);

        }
    }

    /**
     * Rfturns thf buto-dommit stbtus with this <dodf>JdbdRowSft</dodf>.
     *
     * @rfturn truf if buto dommit is truf; fblsf othfrwisf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     */
    publid boolfbn gftAutoCommit() throws SQLExdfption {
        rfturn donn.gftAutoCommit();
    }

    /**
     * Rolls bbdk bll thf updbtfs in this <dodf>JdbdRowSft</dodf> objfdt by
     * wrbpping thf intfrnbl <dodf>Connfdtion</dodf> objfdt bnd dblling its
     * <dodf>rollbbdk</dodf> mfthod.
     * This mfthod sfts this <dodf>JdbdRowSft</dodf> objfdt's privbtf fifld
     * <dodf>rs</dodf> to <dodf>null</dodf> bftfr sbving its vbluf to bnothfr objfdt.
     * (Thf fifld <dodf>rs</dodf> is this <dodf>JdbdRowSft</dodf> objfdt's
     * intfrnbl <dodf>RfsultSft</dodf> objfdt.)
     *
     * @throws SQLExdfption if butoCommit is sft to truf or b dbtbbbsf
     * bddfss frror oddurs
     */
    publid void rollbbdk() throws SQLExdfption {
        donn.rollbbdk();

        // Mbkfs thf rfsult stf hbndlf null bftfr rollbbdk
        // Addfd bs pfr Rbvf rfquirfmfnts

        rs = null;
    }


    /**
     * Rollbbdks bll thf updbtfs in thf <dodf>JdbdRowSft</dodf> bbdk to thf
     * lbst <dodf>Sbvfpoint</dodf> trbnsbdtion mbrkfr. Wrbps thf intfrnbl
     * <dodf>Connfdtion</dodf> objfdt bnd dbll it's rollbbdk mfthod
     *
     * @pbrbm s thf <dodf>Sbvfpoint</dodf> trbnsbdtion mbrkfr to roll thf
     * trbnsbdtion to.
     * @throws SQLExdfption if butoCommit is sft to truf; or ib b dbtbbbsf
     * bddfss frror oddurs
     */
    publid void rollbbdk(Sbvfpoint s) throws SQLExdfption {
        donn.rollbbdk(s);
    }

    // Sftting thf RfsultSft Typf bnd Condurrfndy
    protfdtfd void sftPbrbms() throws SQLExdfption {
        if(rs == null) {
           sftTypf(RfsultSft.TYPE_SCROLL_INSENSITIVE);
           sftCondurrfndy(RfsultSft.CONCUR_UPDATABLE);
        }
        flsf {
            sftTypf(rs.gftTypf());
            sftCondurrfndy(rs.gftCondurrfndy());
        }
    }


    // Chfdking RfsultSft Typf bnd Condurrfndy
    privbtf void dhfdkTypfCondurrfndy() throws SQLExdfption {
        if(rs.gftTypf() == TYPE_FORWARD_ONLY ||
           rs.gftCondurrfndy() == CONCUR_READ_ONLY) {
              throw nfw SQLExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.rfsnotupd").toString());
         }
    }

     // Rfturns b Connfdtion Hbndlf
    //  Addfd bs pfr Rbvf rfquirfmfnts

    /**
     * Gfts this <dodf>JdbdRowSft</dodf> objfdt's Connfdtion propfrty
     *
     *
     * @rfturn thf <dodf>Connfdtion</dodf> objfdt bssodibtfd with this rowsft;
     */

    protfdtfd Connfdtion gftConnfdtion() {
       rfturn donn;
    }

    // Sfts thf donnfdtion hbndlf with thf pbrbmftfr
    // Addfd bs pfr rbvf rfquirfmfnts

    /**
     * Sfts this <dodf>JdbdRowSft</dodf> objfdt's donnfdtion propfrty
     * to thf givfn <dodf>Connfdtion</dodf> objfdt.
     *
     * @pbrbm donnfdtion thf <dodf>Connfdtion</dodf> objfdt.
     */

    protfdtfd void sftConnfdtion(Connfdtion donnfdtion) {
       donn = donnfdtion;
    }

    // Rfturns b PrfpbrfdStbtfmfnt Hbndlf
    // Addfd bs pfr Rbvf rfquirfmfnts

    /**
     * Gfts this <dodf>JdbdRowSft</dodf> objfdt's PrfpbrfdStbtfmfnt propfrty
     *
     *
     * @rfturn thf <dodf>PrfpbrfdStbtfmfnt</dodf> objfdt bssodibtfd with this rowsft;
     */

    protfdtfd PrfpbrfdStbtfmfnt gftPrfpbrfdStbtfmfnt() {
       rfturn ps;
    }

    //Sfts thf prfpbrfd stbtfmfnt hbndlf to thf pbrbmftfr
    // Addfd bs pfr Rbvf rfquirfmfnts

    /**
     * Sfts this <dodf>JdbdRowSft</dodf> objfdt's prfpbrfdtsbtfmfnt propfrty
     * to thf givfn <dodf>PrfpbrfdStbtfmfnnt</dodf> objfdt.
     *
     * @pbrbm prfpbrfdStbtfmfnt thf <dodf>PrfpbrfdStbtfmfnt</dodf> objfdt
     *
     */
    protfdtfd void sftPrfpbrfdStbtfmfnt(PrfpbrfdStbtfmfnt prfpbrfdStbtfmfnt) {
       ps = prfpbrfdStbtfmfnt;
    }

    // Rfturns b RfsultSft hbndlf
    // Addfd bs pfr Rbvf rfquirfmfnts

    /**
     * Gfts this <dodf>JdbdRowSft</dodf> objfdt's RfsultSft propfrty
     *
     *
     * @rfturn thf <dodf>RfsultSft</dodf> objfdt bssodibtfd with this rowsft;
     */

    protfdtfd RfsultSft gftRfsultSft() throws SQLExdfption {

       dhfdkStbtf();

       rfturn rs;
    }

    // Sfts thf rfsult sft hbndlf to thf pbrbmftfr
    // Addfd bs pfr Rbvf rfquirfmfnts

    /**
     * Sfts this <dodf>JdbdRowSft</dodf> objfdt's rfsultsft propfrty
     * to thf givfn <dodf>RfsultSft</dodf> objfdt.
     *
     * @pbrbm rfsultSft thf <dodf>RfsultSft</dodf> objfdt
     *
     */
    protfdtfd void sftRfsultSft(RfsultSft rfsultSft) {
       rs = rfsultSft;
    }

    /**
     * Sfts this <dodf>JdbdRowSft</dodf> objfdt's <dodf>dommbnd</dodf> propfrty to
     * thf givfn <dodf>String</dodf> objfdt bnd dlfbrs thf pbrbmftfrs, if bny,
     * thbt wfrf sft for thf prfvious dommbnd. In bddition,
     * if thf <dodf>dommbnd</dodf> propfrty hbs prfviously bffn sft to b
     * non-null vbluf bnd it is
     * difffrfnt from thf <dodf>String</dodf> objfdt supplifd,
     * this mfthod sfts this <dodf>JdbdRowSft</dodf> objfdt's privbtf fiflds
     * <dodf>ps</dodf> bnd <dodf>rs</dodf> to <dodf>null</dodf>.
     * (Thf fifld <dodf>ps</dodf> is its <dodf>PrfpbrfdStbtfmfnt</dodf> objfdt, bnd
     * thf fifld <dodf>rs</dodf> is its <dodf>RfsultSft</dodf> objfdt.)
     * <P>
     * Thf <dodf>dommbnd</dodf> propfrty mby not bf nffdfd if thf <dodf>RowSft</dodf>
     * objfdt gfts its dbtb from b sourdf thbt dofs not support dommbnds,
     * sudh bs b sprfbdshfft or othfr tbbulbr filf.
     * Thus, this propfrty is optionbl bnd mby bf <dodf>null</dodf>.
     *
     * @pbrbm dommbnd b <dodf>String</dodf> objfdt dontbining bn SQL qufry
     *            thbt will bf sft bs this <dodf>RowSft</dodf> objfdt's dommbnd
     *            propfrty; mby bf <dodf>null</dodf> but mby not bf bn fmpty string
     * @throws SQLExdfption if bn fmpty string is providfd bs thf dommbnd vbluf
     * @sff #gftCommbnd
     */
    publid void sftCommbnd(String dommbnd) throws SQLExdfption {

       if (gftCommbnd() != null) {
          if(!gftCommbnd().fqubls(dommbnd)) {
             supfr.sftCommbnd(dommbnd);
             ps = null;
             rs = null;
          }
       }
       flsf {
          supfr.sftCommbnd(dommbnd);
       }
    }

    /**
     * Sfts thf <dodf>dbtbSourdfNbmf</dodf> propfrty for this <dodf>JdbdRowSft</dodf>
     * objfdt to thf givfn logidbl nbmf bnd sfts this <dodf>JdbdRowSft</dodf> objfdt's
     * Url propfrty to <dodf>null</dodf>. In bddition, if thf <dodf>dbtbSourdfNbmf</dodf>
     * propfrty hbs prfviously bffn sft bnd is difffrfnt from thf onf supplifd,
     * this mfthod sfts this <dodf>JdbdRowSft</dodf> objfdt's privbtf fiflds
     * <dodf>ps</dodf>, <dodf>rs</dodf>, bnd <dodf>donn</dodf> to <dodf>null</dodf>.
     * (Thf fifld <dodf>ps</dodf> is its <dodf>PrfpbrfdStbtfmfnt</dodf> objfdt,
     * thf fifld <dodf>rs</dodf> is its <dodf>RfsultSft</dodf> objfdt, bnd
     * thf fifld <dodf>donn</dodf> is its <dodf>Connfdtion</dodf> objfdt.)
     * <P>
     * Thf nbmf supplifd to this mfthod must hbvf bffn bound to b
     * <dodf>DbtbSourdf</dodf> objfdt in b JNDI nbming sfrvidf so thbt bn
     * bpplidbtion dbn do b lookup using thbt nbmf to rftrifvf thf
     * <dodf>DbtbSourdf</dodf> objfdt bound to it. Thf <dodf>DbtbSourdf</dodf>
     * objfdt dbn thfn bf usfd to fstbblish b donnfdtion to thf dbtb sourdf it
     * rfprfsfnts.
     * <P>
     * Usfrs should sft fithfr thf Url propfrty or thf dbtbSourdfNbmf propfrty.
     * If both propfrtifs brf sft, thf drivfr will usf thf propfrty sft most rfdfntly.
     *
     * @pbrbm dsNbmf b <dodf>String</dodf> objfdt with thf nbmf thbt dbn bf supplifd
     *        to b nbming sfrvidf bbsfd on JNDI tfdhnology to rftrifvf thf
     *        <dodf>DbtbSourdf</dodf> objfdt thbt dbn bf usfd to gft b donnfdtion;
     *        mby bf <dodf>null</dodf>
     * @throws SQLExdfption if thfrf is b problfm sftting thf
     *          <dodf>dbtbSourdfNbmf</dodf> propfrty
     * @sff #gftDbtbSourdfNbmf
     */
    publid void sftDbtbSourdfNbmf(String dsNbmf) throws SQLExdfption{

       if(gftDbtbSourdfNbmf() != null) {
          if(!gftDbtbSourdfNbmf().fqubls(dsNbmf)) {
             supfr.sftDbtbSourdfNbmf(dsNbmf);
             donn = null;
             ps = null;
             rs = null;
          }
       }
       flsf {
          supfr.sftDbtbSourdfNbmf(dsNbmf);
       }
    }


    /**
     * Sfts thf Url propfrty for this <dodf>JdbdRowSft</dodf> objfdt
     * to thf givfn <dodf>String</dodf> objfdt bnd sfts thf dbtbSourdf nbmf
     * propfrty to <dodf>null</dodf>. In bddition, if thf Url propfrty hbs
     * prfviously bffn sft to b non <dodf>null</dodf> vbluf bnd its vbluf
     * is difffrfnt from thf vbluf to bf sft,
     * this mfthod sfts this <dodf>JdbdRowSft</dodf> objfdt's privbtf fiflds
     * <dodf>ps</dodf>, <dodf>rs</dodf>, bnd <dodf>donn</dodf> to <dodf>null</dodf>.
     * (Thf fifld <dodf>ps</dodf> is its <dodf>PrfpbrfdStbtfmfnt</dodf> objfdt,
     * thf fifld <dodf>rs</dodf> is its <dodf>RfsultSft</dodf> objfdt, bnd
     * thf fifld <dodf>donn</dodf> is its <dodf>Connfdtion</dodf> objfdt.)
     * <P>
     * Thf Url propfrty is b JDBC URL thbt is usfd whfn
     * thf donnfdtion is drfbtfd using b JDBC tfdhnology-fnbblfd drivfr
     * ("JDBC drivfr") bnd thf <dodf>DrivfrMbnbgfr</dodf>.
     * Thf dorrfdt JDBC URL for thf spfdifid drivfr to bf usfd dbn bf found
     * in thf drivfr dodumfntbtion.  Although thfrf brf guidflinfs for for how
     * b JDBC URL is formfd,
     * b drivfr vfndor dbn spfdify bny <dodf>String</dodf> objfdt fxdfpt
     * onf with b lfngth of <dodf>0</dodf> (bn fmpty string).
     * <P>
     * Sftting thf Url propfrty is optionbl if donnfdtions brf fstbblishfd using
     * b <dodf>DbtbSourdf</dodf> objfdt instfbd of thf <dodf>DrivfrMbnbgfr</dodf>.
     * Thf drivfr will usf fithfr thf URL propfrty or thf
     * dbtbSourdfNbmf propfrty to drfbtf b donnfdtion, whidhfvfr wbs
     * spfdififd most rfdfntly. If bn bpplidbtion usfs b JDBC URL, it
     * must lobd b JDBC drivfr thbt bddfpts thf JDBC URL bfforf it usfs thf
     * <dodf>RowSft</dodf> objfdt to donnfdt to b dbtbbbsf.  Thf <dodf>RowSft</dodf>
     * objfdt will usf thf URL intfrnblly to drfbtf b dbtbbbsf donnfdtion in ordfr
     * to rfbd or writf dbtb.
     *
     * @pbrbm url b <dodf>String</dodf> objfdt thbt dontbins thf JDBC URL
     *            thbt will bf usfd to fstbblish thf donnfdtion to b dbtbbbsf for this
     *            <dodf>RowSft</dodf> objfdt; mby bf <dodf>null</dodf> but must not
     *            bf bn fmpty string
     * @throws SQLExdfption if bn frror oddurs sftting thf Url propfrty or thf
     *         pbrbmftfr supplifd is b string with b lfngth of <dodf>0</dodf> (bn
     *         fmpty string)
     * @sff #gftUrl
     */

    publid void sftUrl(String url) throws SQLExdfption {

       if(gftUrl() != null) {
          if(!gftUrl().fqubls(url)) {
             supfr.sftUrl(url);
             donn = null;
             ps = null;
             rs = null;
          }
       }
       flsf {
          supfr.sftUrl(url);
       }
    }

     /**
     * Sfts thf usfrnbmf propfrty for this <dodf>JdbdRowSft</dodf> objfdt
     * to thf givfn usfr nbmf. Bfdbusf it
     * is not sfriblizfd, thf usfrnbmf propfrty is sft bt run timf bfforf
     * dblling thf mfthod <dodf>fxfdutf</dodf>. In bddition,
     * if thf <dodf>usfrnbmf</dodf> propfrty is blrfbdy sft with b
     * non-null vbluf bnd thbt vbluf is difffrfnt from thf <dodf>String</dodf>
     * objfdt to bf sft,
     * this mfthod sfts this <dodf>JdbdRowSft</dodf> objfdt's privbtf fiflds
     * <dodf>ps</dodf>, <dodf>rs</dodf>, bnd <dodf>donn</dodf> to <dodf>null</dodf>.
     * (Thf fifld <dodf>ps</dodf> is its <dodf>PrfpbrfdStbtfmfnt</dodf> objfdt,
     * <dodf>rs</dodf> is its <dodf>RfsultSft</dodf> objfdt, bnd
     * <dodf>donn</dodf> is its <dodf>Connfdtion</dodf> objfdt.)
     * Sftting thfsf fiflds to <dodf>null</dodf> fnsurfs thbt only durrfnt
     * vblufs will bf usfd.
     *
     * @pbrbm unbmf thf <dodf>String</dodf> objfdt dontbining thf usfr nbmf thbt
     *     is supplifd to thf dbtb sourdf to drfbtf b donnfdtion. It mby bf null.
     * @sff #gftUsfrnbmf
     */
    publid void sftUsfrnbmf(String unbmf) {

       if( gftUsfrnbmf() != null) {
          if(!gftUsfrnbmf().fqubls(unbmf)) {
             supfr.sftUsfrnbmf(unbmf);
             donn = null;
             ps = null;
             rs = null;
          }
       }
       flsf{
          supfr.sftUsfrnbmf(unbmf);
       }
    }

     /**
     * Sfts thf pbssword propfrty for this <dodf>JdbdRowSft</dodf> objfdt
     * to thf givfn <dodf>String</dodf> objfdt. Bfdbusf it
     * is not sfriblizfd, thf pbssword propfrty is sft bt run timf bfforf
     * dblling thf mfthod <dodf>fxfdutf</dodf>. Its dffbult vblus is
     * <dodf>null</dodf>. In bddition,
     * if thf <dodf>pbssword</dodf> propfrty is blrfbdy sft with b
     * non-null vbluf bnd thbt vbluf is difffrfnt from thf onf bfing sft,
     * this mfthod sfts this <dodf>JdbdRowSft</dodf> objfdt's privbtf fiflds
     * <dodf>ps</dodf>, <dodf>rs</dodf>, bnd <dodf>donn</dodf> to <dodf>null</dodf>.
     * (Thf fifld <dodf>ps</dodf> is its <dodf>PrfpbrfdStbtfmfnt</dodf> objfdt,
     * <dodf>rs</dodf> is its <dodf>RfsultSft</dodf> objfdt, bnd
     * <dodf>donn</dodf> is its <dodf>Connfdtion</dodf> objfdt.)
     * Sftting thfsf fiflds to <dodf>null</dodf> fnsurfs thbt only durrfnt
     * vblufs will bf usfd.
     *
     * @pbrbm pbssword thf <dodf>String</dodf> objfdt thbt rfprfsfnts thf pbssword
     *     thbt must bf supplifd to thf dbtbbbsf to drfbtf b donnfdtion
     */
    publid void sftPbssword(String pbssword) {

       if ( gftPbssword() != null) {
          if(!gftPbssword().fqubls(pbssword)) {
             supfr.sftPbssword(pbssword);
             donn = null;
             ps = null;
             rs = null;
          }
       }
       flsf{
          supfr.sftPbssword(pbssword);
       }
    }

    /**
     * Sfts thf typf for this <dodf>RowSft</dodf> objfdt to thf spfdififd typf.
     * Thf dffbult typf is <dodf>RfsultSft.TYPE_SCROLL_INSENSITIVE</dodf>.
     *
     * @pbrbm typf onf of thf following donstbnts:
     *             <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>,
     *             <dodf>RfsultSft.TYPE_SCROLL_INSENSITIVE</dodf>, or
     *             <dodf>RfsultSft.TYPE_SCROLL_SENSITIVE</dodf>
     * @throws SQLExdfption if thf pbrbmftfr supplifd is not onf of thf
     *         following donstbnts:
     *          <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf> or
     *          <dodf>RfsultSft.TYPE_SCROLL_INSENSITIVE</dodf>
     *          <dodf>RfsultSft.TYPE_SCROLL_SENSITIVE</dodf>
     * @sff #gftCondurrfndy
     * @sff #gftTypf
     */

    publid void sftTypf(int typf) throws SQLExdfption {

       int oldVbl;

       try {
          oldVbl = gftTypf();
        }dbtdh(SQLExdfption fx) {
           oldVbl = 0;
        }

       if(oldVbl != typf) {
           supfr.sftTypf(typf);
       }

    }

    /**
     * Sfts thf dondurrfndy for this <dodf>RowSft</dodf> objfdt to
     * thf spfdififd dondurrfndy. Thf dffbult dondurrfndy for bny <dodf>RowSft</dodf>
     * objfdt (donnfdtfd or disdonnfdtfd) is <dodf>RfsultSft.CONCUR_UPDATABLE</dodf>,
     * but this mfthod mby bf dbllfd bt bny timf to dhbngf thf dondurrfndy.
     *
     * @pbrbm dondur onf of thf following donstbnts:
     *                    <dodf>RfsultSft.CONCUR_READ_ONLY</dodf> or
     *                    <dodf>RfsultSft.CONCUR_UPDATABLE</dodf>
     * @throws SQLExdfption if thf pbrbmftfr supplifd is not onf of thf
     *         following donstbnts:
     *          <dodf>RfsultSft.CONCUR_UPDATABLE</dodf> or
     *          <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     * @sff #gftCondurrfndy
     * @sff #isRfbdOnly
     */
    publid void sftCondurrfndy(int dondur) throws SQLExdfption {

       int oldVbl;

       try {
          oldVbl = gftCondurrfndy();
        }dbtdh(NullPointfrExdfption fx) {
           oldVbl = 0;
        }

       if(oldVbl != dondur) {
           supfr.sftCondurrfndy(dondur);
       }

    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd <dodf>SQL XML</dodf> pbrbmftfr bs b
     * <dodf>SQLXML</dodf> objfdt in thf Jbvb progrbmming lbngubgf.
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @rfturn b SQLXML objfdt thbt mbps bn SQL XML vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid SQLXML gftSQLXML(int dolumnIndfx) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd <dodf>SQL XML</dodf> pbrbmftfr bs b
     * <dodf>SQLXML</dodf> objfdt in thf Jbvb progrbmming lbngubgf.
     * @pbrbm dolNbmf thf nbmf of thf dolumn from whidh to rftrifvf thf vbluf
     * @rfturn b SQLXML objfdt thbt mbps bn SQL XML vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     */
    publid SQLXML gftSQLXML(String dolNbmf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>RfsultSft</dodf> objfdt bs b jbvb.sql.RowId objfdt in thf Jbvb
     * progrbmming lbngubgf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @rfturn thf dolumn vbluf if thf vbluf is b SQL <dodf>NULL</dodf> thf
     *     vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid RowId gftRowId(int dolumnIndfx) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row of this
     * <dodf>RfsultSft</dodf> objfdt bs b jbvb.sql.RowId objfdt in thf Jbvb
     * progrbmming lbngubgf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @rfturn thf dolumn vbluf if thf vbluf is b SQL <dodf>NULL</dodf> thf
     *     vbluf rfturnfd is <dodf>null</dodf>
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid RowId gftRowId(String dolumnNbmf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>RowId</dodf> vbluf. Thf updbtfr
     * mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or thf insfrt
     * row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf; instfbd
     * thf <dodf>updbtfRow<dodf> or <dodf>insfrtRow</dodf> mfthods brf dbllfd
     * to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm x thf dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss oddurs
     * @sindf 1.6
     */
    publid void updbtfRowId(int dolumnIndfx, RowId x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>RowId</dodf> vbluf. Thf updbtfr
     * mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or thf insfrt
     * row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf; instfbd
     * thf <dodf>updbtfRow<dodf> or <dodf>insfrtRow</dodf> mfthods brf dbllfd
     * to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm x thf dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss oddurs
     * @sindf 1.6
     */
    publid void updbtfRowId(String dolumnNbmf, RowId x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Rftrifvfs thf holdbbility of this RfsultSft objfdt
     * @rfturn  fithfr RfsultSft.HOLD_CURSORS_OVER_COMMIT or RfsultSft.CLOSE_CURSORS_AT_COMMIT
     * @throws SQLExdfption if b dbtbbbsf frror oddurs
     * @sindf 1.6
     */
    publid int gftHoldbbility() throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Rftrifvfs whfthfr this RfsultSft objfdt hbs bffn dlosfd. A RfsultSft is dlosfd if thf
     * mfthod dlosf hbs bffn dbllfd on it, or if it is butombtidblly dlosfd.
     * @rfturn truf if this RfsultSft objfdt is dlosfd; fblsf if it is still opfn
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid boolfbn isClosfd() throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * This mfthod is usfd for updbting dolumns thbt support Nbtionbl Chbrbdtfr sfts.
     * It dbn bf usfd for updbting NCHAR,NVARCHAR bnd LONGNVARCHAR dolumns.
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm nString thf vbluf for thf dolumn to bf updbtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void updbtfNString(int dolumnIndfx, String nString) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * This mfthod is usfd for updbting dolumns thbt support Nbtionbl Chbrbdtfr sfts.
     * It dbn bf usfd for updbting NCHAR,NVARCHAR bnd LONGNVARCHAR dolumns.
     * @pbrbm dolumnNbmf nbmf of thf Column
     * @pbrbm nString thf vbluf for thf dolumn to bf updbtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void updbtfNString(String dolumnNbmf, String nString) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }


    /*o
     * This mfthod is usfd for updbting SQL <dodf>NCLOB</dodf>  typf thbt mbps
     * to <dodf>jbvb.sql.Typfs.NCLOB</dodf>
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm nClob thf vbluf for thf dolumn to bf updbtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void updbtfNClob(int dolumnIndfx, NClob nClob) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * This mfthod is usfd for updbting SQL <dodf>NCLOB</dodf>  typf thbt mbps
     * to <dodf>jbvb.sql.Typfs.NCLOB</dodf>
     * @pbrbm dolumnNbmf nbmf of thf dolumn
     * @pbrbm nClob thf vbluf for thf dolumn to bf updbtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void updbtfNClob(String dolumnNbmf, NClob nClob) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs b <dodf>NClob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm i thf first dolumn is 1, thf sfdond is 2, ...
     * @rfturn b <dodf>NClob</dodf> objfdt rfprfsfnting thf SQL
     *         <dodf>NCLOB</dodf> vbluf in thf spfdififd dolumn
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid NClob gftNClob(int i) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }


  /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs b <dodf>NClob</dodf> objfdt
     * in thf Jbvb progrbmming lbngubgf.
     *
     * @pbrbm dolNbmf thf nbmf of thf dolumn from whidh to rftrifvf thf vbluf
     * @rfturn b <dodf>NClob</dodf> objfdt rfprfsfnting thf SQL <dodf>NCLOB</dodf>
     * vbluf in thf spfdififd dolumn
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid NClob gftNClob(String dolNbmf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    publid <T> T unwrbp(jbvb.lbng.Clbss<T> ifbdf) throws jbvb.sql.SQLExdfption{
        rfturn null;
    }

    publid boolfbn isWrbppfrFor(Clbss<?> intfrfbdfs) throws SQLExdfption {
        rfturn fblsf;
    }

    /**
      * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.SQLXML</dodf> objfdt. Thf drivfr donvfrts this to bn
      * SQL <dodf>XML</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
      * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
      * @pbrbm xmlObjfdt b <dodf>SQLXML</dodf> objfdt thbt mbps bn SQL <dodf>XML</dodf> vbluf
      * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
      * @sindf 1.6
      */
     publid void sftSQLXML(int pbrbmftfrIndfx, SQLXML xmlObjfdt) throws SQLExdfption {
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
     }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.SQLXML</dodf> objfdt. Thf drivfr donvfrts this to bn
     * <dodf>SQL XML</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
     * @pbrbm xmlObjfdt b <dodf>SQLXML</dodf> objfdt thbt mbps bn <dodf>SQL XML</dodf> vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void sftSQLXML(String pbrbmftfrNbmf, SQLXML xmlObjfdt) throws SQLExdfption {
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
     }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.RowId</dodf> objfdt. Thf
     * drivfr donvfrts this to b SQL <dodf>ROWID</dodf> vbluf whfn it sfnds it
     * to thf dbtbbbsf
     *
     * @pbrbm pbrbmftfrIndfx thf first pbrbmftfr is 1, thf sfdond is 2, ...
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     *
     * @sindf 1.6
     */
    publid void sftRowId(int pbrbmftfrIndfx, RowId x) throws SQLExdfption {
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
     }

    /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.RowId</dodf> objfdt. Thf
    * drivfr donvfrts this to b SQL <dodf>ROWID</dodf> whfn it sfnds it to thf
    * dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
    * @sindf 1.6
    */
   publid void sftRowId(String pbrbmftfrNbmf, RowId x) throws SQLExdfption {
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
     }


   /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf> objfdt.
     * Thf drivfr donvfrts this to b SQL <dodf>NCHAR</dodf> or
     * <dodf>NVARCHAR</dodf> or <dodf>LONGNVARCHAR</dodf> vbluf
     * (dfpfnding on thf brgumfnt's
     * sizf rflbtivf to thf drivfr's limits on <dodf>NVARCHAR</dodf> vblufs)
     * whfn it sfnds it to thf dbtbbbsf.
     *
     * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
     * @pbrbm vbluf thf pbrbmftfr vbluf
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur ; or if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
     publid void sftNString(int pbrbmftfrIndfx, String vbluf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
     }


   /**
    * Sfts thf dfsignbtfd pbrbmftfr in this <dodf>RowSft</dodf> objfdt's dommbnd
    * to b <dodf>Rfbdfr</dodf> objfdt. Thf
    * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
    * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
    * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.

    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftNChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
    * @pbrbm vbluf thf pbrbmftfr vbluf
    * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
    *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
    *  frror dould oddur ; if b dbtbbbsf bddfss frror oddurs; or
    * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    * @sindf 1.6
    */
    publid void sftNChbrbdtfrStrfbm(int pbrbmftfrIndfx, Rfbdfr vbluf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

  /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>jbvb.sql.NClob</dodf> objfdt. Thf objfdt
    * implfmfnts thf <dodf>jbvb.sql.NClob</dodf> intfrfbdf. This <dodf>NClob</dodf>
    * objfdt mbps to b SQL <dodf>NCLOB</dodf>.
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf dolumn to bf sft
    * @pbrbm vbluf thf pbrbmftfr vbluf
    * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
    *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
    *  frror dould oddur; or if b dbtbbbsf bddfss frror oddurs
    * @sindf 1.6
    */
    publid void sftNClob(String pbrbmftfrNbmf, NClob vbluf) throws SQLExdfption {
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
     }


  /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * It is intfndfd for usf whfn
     * bddfssing  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * @rfturn b <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt dontbins thf dolumn
     * vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf vbluf rfturnfd is
     * <dodf>null</dodf> in thf Jbvb progrbmming lbngubgf.
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid jbvb.io.Rfbdfr gftNChbrbdtfrStrfbm(int dolumnIndfx) throws SQLExdfption {
       throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
     }


    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * It is intfndfd for usf whfn
     * bddfssing  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @rfturn b <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt dontbins thf dolumn
     * vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf vbluf rfturnfd is
     * <dodf>null</dodf> in thf Jbvb progrbmming lbngubgf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid jbvb.io.Rfbdfr gftNChbrbdtfrStrfbm(String dolumnNbmf) throws SQLExdfption {
       throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
     }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.SQLXML</dodf> vbluf.
     * Thf updbtfr
     * mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or thf insfrt
     * row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf; instfbd
     * thf <dodf>updbtfRow</dodf> or <dodf>insfrtRow</dodf> mfthods brf dbllfd
     * to updbtf thf dbtbbbsf.
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm xmlObjfdt thf vbluf for thf dolumn to bf updbtfd
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid void updbtfSQLXML(int dolumnIndfx, SQLXML xmlObjfdt) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b <dodf>jbvb.sql.SQLXML</dodf> vbluf.
     * Thf updbtfr
     * mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or thf insfrt
     * row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf; instfbd
     * thf <dodf>updbtfRow</dodf> or <dodf>insfrtRow</dodf> mfthods brf dbllfd
     * to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnNbmf thf nbmf of thf dolumn
     * @pbrbm xmlObjfdt thf dolumn vbluf
     * @throws SQLExdfption if b dbtbbbsf bddfss oddurs
     * @sindf 1.6
     */
    publid void updbtfSQLXML(String dolumnNbmf, SQLXML xmlObjfdt) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

     /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>String</dodf> in thf Jbvb progrbmming lbngubgf.
     * It is intfndfd for usf whfn
     * bddfssing  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid String gftNString(int dolumnIndfx) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Rftrifvfs thf vbluf of thf dfsignbtfd dolumn in thf durrfnt row
     * of this <dodf>RfsultSft</dodf> objfdt bs
     * b <dodf>String</dodf> in thf Jbvb progrbmming lbngubgf.
     * It is intfndfd for usf whfn
     * bddfssing  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * @pbrbm dolumnNbmf thf SQL nbmf of thf dolumn
     * @rfturn thf dolumn vbluf; if thf vbluf is SQL <dodf>NULL</dodf>, thf
     * vbluf rfturnfd is <dodf>null</dodf>
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
    publid String gftNString(String dolumnNbmf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

     /**
       * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf, whidh will
       * hbvf thf spfdififd numbfr of bytfs. Thf drivfr dofs thf nfdfssbry donvfrsion
       * from Jbvb dhbrbdtfr formbt to thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
       * It is intfndfd for usf whfn updbting NCHAR,NVARCHAR bnd LONGNVARCHAR dolumns.
       * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or
       * thf insfrt row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf;
       * instfbd thf updbtfRow or insfrtRow mfthods brf dbllfd to updbtf thf dbtbbbsf.
       *
       * @pbrbm dolumnIndfx - thf first dolumn is 1, thf sfdond is 2, ...
       * @pbrbm x - thf nfw dolumn vbluf
       * @pbrbm lfngth - thf lfngth of thf strfbm
       * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
       * @sindf 1.6
       */
       publid void updbtfNChbrbdtfrStrfbm(int dolumnIndfx,
                            jbvb.io.Rfbdfr x,
                            long lfngth)
                            throws SQLExdfption {
          throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
       }

     /**
       * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf, whidh will
       * hbvf thf spfdififd numbfr of bytfs. Thf drivfr dofs thf nfdfssbry donvfrsion
       * from Jbvb dhbrbdtfr formbt to thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
       * It is intfndfd for usf whfn updbting NCHAR,NVARCHAR bnd LONGNVARCHAR dolumns.
       * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf durrfnt row or
       * thf insfrt row. Thf updbtfr mfthods do not updbtf thf undfrlying dbtbbbsf;
       * instfbd thf updbtfRow or insfrtRow mfthods brf dbllfd to updbtf thf dbtbbbsf.
       *
       * @pbrbm dolumnNbmf - nbmf of thf Column
       * @pbrbm x - thf nfw dolumn vbluf
       * @pbrbm lfngth - thf lfngth of thf strfbm
       * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs
       * @sindf 1.6
       */
       publid void updbtfNChbrbdtfrStrfbm(String dolumnNbmf,
                            jbvb.io.Rfbdfr x,
                            long lfngth)
                            throws SQLExdfption {
          throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
       }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf.   Thf
     * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
     * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
     * It is intfndfd for usf whfn
     * updbting  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfNChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf> or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNChbrbdtfrStrfbm(int dolumnIndfx,
                             jbvb.io.Rfbdfr x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf.  Thf
     * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
     * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
     * It is intfndfd for usf whfn
     * updbting  <dodf>NCHAR</dodf>,<dodf>NVARCHAR</dodf>
     * bnd <dodf>LONGNVARCHAR</dodf> dolumns.
     *
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfNChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt dontbining
     *        thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf> or this mfthod is dbllfd on b dlosfd rfsult sft
      * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNChbrbdtfrStrfbm(String dolumnLbbfl,
                             jbvb.io.Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn input strfbm, whidh
     * will hbvf thf spfdififd numbfr of bytfs.
     * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
     * vbluf to.
     * @pbrbm lfngth thf numbfr of bytfs in thf pbrbmftfr dbtb.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBlob(int dolumnIndfx, InputStrfbm inputStrfbm, long lfngth) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn input strfbm, whidh
     * will hbvf thf spfdififd numbfr of bytfs.
     * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
     * vbluf to.
     * @pbrbm lfngth thf numbfr of bytfs in thf pbrbmftfr dbtb.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBlob(String dolumnLbbfl, InputStrfbm inputStrfbm, long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn input strfbm.
     * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     *
     *  <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfBlob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
     * vbluf to.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBlob(int dolumnIndfx, InputStrfbm inputStrfbm) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn input strfbm.
     * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     *   <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfBlob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
     * vbluf to.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBlob(String dolumnLbbfl, InputStrfbm inputStrfbm) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfClob(int dolumnIndfx,  Rfbdfr rfbdfr, long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfClob(String dolumnLbbfl,  Rfbdfr rfbdfr, long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     *   <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfClob(int dolumnIndfx,  Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     *  <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfClob(String dolumnLbbfl,  Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

   /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur; this mfthod is dbllfd on b dlosfd rfsult sft,
     * if b dbtbbbsf bddfss frror oddurs or
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNClob(int dolumnIndfx,  Rfbdfr rfbdfr, long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur; this mfthod is dbllfd on b dlosfd rfsult sft;
     *  if b dbtbbbsf bddfss frror oddurs or
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNClob(String dolumnLbbfl,  Rfbdfr rfbdfr, long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfNClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond 2, ...
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur; this mfthod is dbllfd on b dlosfd rfsult sft,
     * if b dbtbbbsf bddfss frror oddurs or
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNClob(int dolumnIndfx,  Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn using thf givfn <dodf>Rfbdfr</dodf>
     * objfdt.
     * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
     * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
     * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfNClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
     * <p>
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur; this mfthod is dbllfd on b dlosfd rfsult sft;
     *  if b dbtbbbsf bddfss frror oddurs or
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfNClob(String dolumnLbbfl,  Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }


        /**
     * Updbtfs thf dfsignbtfd dolumn with bn bsdii strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfAsdiiStrfbm(int dolumnIndfx,
                           jbvb.io.InputStrfbm x,
                           long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b binbry strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBinbryStrfbm(int dolumnIndfx,
                            jbvb.io.InputStrfbm x,
                            long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfChbrbdtfrStrfbm(int dolumnIndfx,
                             jbvb.io.Rfbdfr x,
                             long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

     /**
     * Updbtfs thf dfsignbtfd dolumn with bn bsdii strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs..
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfAsdiiStrfbm(String dolumnLbbfl,
                           jbvb.io.InputStrfbm x,
                           long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn bsdii strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfAsdiiStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfAsdiiStrfbm(int dolumnIndfx,
                           jbvb.io.InputStrfbm x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with bn bsdii strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfAsdiiStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfAsdiiStrfbm(String dolumnLbbfl,
                           jbvb.io.InputStrfbm x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }


    /**
     * Updbtfs thf dfsignbtfd dolumn with b binbry strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBinbryStrfbm(String dolumnLbbfl,
                            jbvb.io.InputStrfbm x,
                            long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b binbry strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfBinbryStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBinbryStrfbm(int dolumnIndfx,
                            jbvb.io.InputStrfbm x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }


    /**
     * Updbtfs thf dfsignbtfd dolumn with b binbry strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfBinbryStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfBinbryStrfbm(String dolumnLbbfl,
                            jbvb.io.InputStrfbm x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }


    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf, whidh will hbvf
     * thf spfdififd numbfr of bytfs.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lbbfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt dontbining
     *        thf nfw dolumn vbluf
     * @pbrbm lfngth thf lfngth of thf strfbm
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfChbrbdtfrStrfbm(String dolumnLbbfl,
                             jbvb.io.Rfbdfr rfbdfr,
                             long lfngth) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnIndfx thf first dolumn is 1, thf sfdond is 2, ...
     * @pbrbm x thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfChbrbdtfrStrfbm(int dolumnIndfx,
                             jbvb.io.Rfbdfr x) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }

    /**
     * Updbtfs thf dfsignbtfd dolumn with b dhbrbdtfr strfbm vbluf.
     * Thf updbtfr mfthods brf usfd to updbtf dolumn vblufs in thf
     * durrfnt row or thf insfrt row.  Thf updbtfr mfthods do not
     * updbtf thf undfrlying dbtbbbsf; instfbd thf <dodf>updbtfRow</dodf> or
     * <dodf>insfrtRow</dodf> mfthods brf dbllfd to updbtf thf dbtbbbsf.
     *
     * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
     * it might bf morf fffidifnt to usf b vfrsion of
     * <dodf>updbtfChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
     *
     * @pbrbm dolumnLbbfl thf lbbfl for thf dolumn spfdififd with thf SQL AS dlbusf.  If thf SQL AS dlbusf wbs not spfdififd, thfn thf lb
bfl is thf nbmf of thf dolumn
     * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt dontbining
     *        thf nfw dolumn vbluf
     * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
     * thf rfsult sft dondurrfndy is <dodf>CONCUR_READ_ONLY</dodf>
     * or this mfthod is dbllfd on b dlosfd rfsult sft
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     * @sindf 1.6
     */
    publid void updbtfChbrbdtfrStrfbm(String dolumnLbbfl,
                             jbvb.io.Rfbdfr rfbdfr) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }


     /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.nft.URL</dodf> vbluf.
  * Thf drivfr donvfrts this to bn SQL <dodf>DATALINK</dodf> vbluf
  * whfn it sfnds it to thf dbtbbbsf.
  *
  * @pbrbm pbrbmftfrIndfx thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm x thf <dodf>jbvb.nft.URL</dodf> objfdt to bf sft
  * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
  * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  * @sindf 1.4
  */
  publid void sftURL(int pbrbmftfrIndfx, jbvb.nft.URL x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


   /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
  * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
  * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
  * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
  * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
  * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
  * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
  * it might bf morf fffidifnt to usf b vfrsion of
  * <dodf>sftNClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
  *
  * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
  * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
  * mbrkfr in thf SQL stbtfmfnt;
  * if thf drivfr dofs not support nbtionbl dhbrbdtfr sfts;
  * if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur;  if b dbtbbbsf bddfss frror oddurs or
  * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  *
  * @sindf 1.6
  */
  publid void sftNClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr)
    throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

   /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf <dodf>rfbdfr</dodf> must dontbin thf numbfr
             * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
            * gfnfrbtfd whfn thf <dodf>CbllbblfStbtfmfnt</dodf> is fxfdutfd.
            * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
            * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
            * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
            * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
            * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
            *
            * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr to bf sft
            * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
            * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
            * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
            * mbrkfr in thf SQL stbtfmfnt; if thf lfngth spfdififd is lfss thbn zfro;
            * if thf drivfr dofs not support nbtionbl
            *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
            *  frror dould oddur; if b dbtbbbsf bddfss frror oddurs or
            * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
            * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
            * this mfthod
            * @sindf 1.6
            */
            publid void sftNClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr, long lfngth)
    throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
  * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
  * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
  * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
  * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
  * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
  * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
  * it might bf morf fffidifnt to usf b vfrsion of
  * <dodf>sftNClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
  *
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
  * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl dhbrbdtfr sfts;
  * if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur;  if b dbtbbbsf bddfss frror oddurs or
  * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  *
  * @sindf 1.6
  */
  publid void sftNClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr)
    throws SQLExdfption{
             throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


   /**
     ** of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bfdontbin  thf numbfr
     * gfnfrbtfd whfn thf <dodf>PrfpbrfdStbtfmfnt</dodf> is fxfdutfd.
     * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
     * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
     * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
     * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
     * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
     * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
     * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
     * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
     * mbrkfr in thf SQL stbtfmfnt; if thf lfngth spfdififd is lfss thbn zfro;
     * if thf drivfr dofs not support nbtionbl dhbrbdtfr sfts;
     * if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur;  if b dbtbbbsf bddfss frror oddurs or
     * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
     * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
     *
     * @sindf 1.6
     */
     publid void sftNClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr, long lfngth)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


    /**
     * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>jbvb.sql.NClob</dodf> objfdt. Thf drivfr donvfrts this to
b
     * SQL <dodf>NCLOB</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
     * @pbrbm vbluf thf pbrbmftfr vbluf
     * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
     *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
     *  frror dould oddur ; or if b dbtbbbsf bddfss frror oddurs
     * @sindf 1.6
     */
     publid void sftNClob(int pbrbmftfrIndfx, NClob vbluf) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf> objfdt.
  * Thf drivfr donvfrts this to b SQL <dodf>NCHAR</dodf> or
  * <dodf>NVARCHAR</dodf> or <dodf>LONGNVARCHAR</dodf>
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf dolumn to bf sft
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur; or if b dbtbbbsf bddfss frror oddurs
  * @sindf 1.6
  */
 publid void sftNString(String pbrbmftfrNbmf, String vbluf)
         throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt. Thf
  * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
  * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
  * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
  * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur ; or if b dbtbbbsf bddfss frror oddurs
  * @sindf 1.6
  */
  publid void sftNChbrbdtfrStrfbm(int pbrbmftfrIndfx, Rfbdfr vbluf, long lfngth) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt. Thf
  * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
  * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
  * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf dolumn to bf sft
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur; or if b dbtbbbsf bddfss frror oddurs
  * @sindf 1.6
  */
 publid void sftNChbrbdtfrStrfbm(String pbrbmftfrNbmf, Rfbdfr vbluf, long lfngth)
         throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

  /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt. Thf
  * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
  * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
  * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.

  * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
  * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
  * stbndbrd intfrfbdf.
  * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
  * it might bf morf fffidifnt to usf b vfrsion of
  * <dodf>sftNChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
  *
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur ; if b dbtbbbsf bddfss frror oddurs; or
  * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  * @sindf 1.6
  */
  publid void sftNChbrbdtfrStrfbm(String pbrbmftfrNbmf, Rfbdfr vbluf) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

  /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timfstbmp</dodf> vbluf,
    * using thf givfn <dodf>Cblfndbr</dodf> objfdt.  Thf drivfr usfs
    * thf <dodf>Cblfndbr</dodf> objfdt to donstrudt bn SQL <dodf>TIMESTAMP</dodf> vbluf,
    * whidh thf drivfr thfn sfnds to thf dbtbbbsf.  With b
    * b <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf timfstbmp
    * tbking into bddount b dustom timfzonf.  If no
    * <dodf>Cblfndbr</dodf> objfdt is spfdififd, thf drivfr usfs thf dffbult
    * timfzonf, whidh is thbt of thf virtubl mbdhinf running thf bpplidbtion.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @pbrbm dbl thf <dodf>Cblfndbr</dodf> objfdt thf drivfr will usf
    *            to donstrudt thf timfstbmp
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftTimfstbmp
    * @sindf 1.4
    */
    publid void sftTimfstbmp(String pbrbmftfrNbmf, jbvb.sql.Timfstbmp x, Cblfndbr dbl)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

    /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf <dodf>rfbdfr</dodf> must dontbin  thf numbfr
               * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
               * gfnfrbtfd whfn thf <dodf>CbllbblfStbtfmfnt</dodf> is fxfdutfd.
              * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
              * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
              * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
               * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
               * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
               * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr to bf sft
              * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
              * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
              * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
              * mbrkfr in thf SQL stbtfmfnt; if thf lfngth spfdififd is lfss thbn zfro;
              * b dbtbbbsf bddfss frror oddurs or
              * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
              * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
              * this mfthod
              *
              * @sindf 1.6
              */
      publid  void sftClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr, long lfngth)
      throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }



  /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Clob</dodf> objfdt.
    * Thf drivfr donvfrts this to bn SQL <dodf>CLOB</dodf> vbluf whfn it
    * sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x b <dodf>Clob</dodf> objfdt thbt mbps bn SQL <dodf>CLOB</dodf> vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.6
    */
    publid void sftClob (String pbrbmftfrNbmf, Clob x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
    * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
    * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
    * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
    * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
    *
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs or this mfthod is dbllfd on
    * b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    *
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    * @sindf 1.6
    */
    publid void sftClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr)
      throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Dbtf</dodf> vbluf
    * using thf dffbult timf zonf of thf virtubl mbdhinf thbt is running
    * thf bpplidbtion.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>DATE</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftDbtf
    * @sindf 1.4
    */
    publid void sftDbtf(String pbrbmftfrNbmf, jbvb.sql.Dbtf x)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

   /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Dbtf</dodf> vbluf,
    * using thf givfn <dodf>Cblfndbr</dodf> objfdt.  Thf drivfr usfs
    * thf <dodf>Cblfndbr</dodf> objfdt to donstrudt bn SQL <dodf>DATE</dodf> vbluf,
    * whidh thf drivfr thfn sfnds to thf dbtbbbsf.  With b
    * b <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf dbtf
    * tbking into bddount b dustom timfzonf.  If no
    * <dodf>Cblfndbr</dodf> objfdt is spfdififd, thf drivfr usfs thf dffbult
    * timfzonf, whidh is thbt of thf virtubl mbdhinf running thf bpplidbtion.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @pbrbm dbl thf <dodf>Cblfndbr</dodf> objfdt thf drivfr will usf
    *            to donstrudt thf dbtf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftDbtf
    * @sindf 1.4
    */
   publid void sftDbtf(String pbrbmftfrNbmf, jbvb.sql.Dbtf x, Cblfndbr dbl)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timf</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>TIME</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftTimf
    * @sindf 1.4
    */
   publid void sftTimf(String pbrbmftfrNbmf, jbvb.sql.Timf x)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timf</dodf> vbluf,
    * using thf givfn <dodf>Cblfndbr</dodf> objfdt.  Thf drivfr usfs
    * thf <dodf>Cblfndbr</dodf> objfdt to donstrudt bn SQL <dodf>TIME</dodf> vbluf,
    * whidh thf drivfr thfn sfnds to thf dbtbbbsf.  With b
    * b <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf timf
    * tbking into bddount b dustom timfzonf.  If no
    * <dodf>Cblfndbr</dodf> objfdt is spfdififd, thf drivfr usfs thf dffbult
    * timfzonf, whidh is thbt of thf virtubl mbdhinf running thf bpplidbtion.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @pbrbm dbl thf <dodf>Cblfndbr</dodf> objfdt thf drivfr will usf
    *            to donstrudt thf timf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftTimf
    * @sindf 1.4
    */
   publid void sftTimf(String pbrbmftfrNbmf, jbvb.sql.Timf x, Cblfndbr dbl)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

   /**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
   * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
   * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
   * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
   * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
   * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
   *
   * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
   * it might bf morf fffidifnt to usf b vfrsion of
   * <dodf>sftClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
   *
   * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
   * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs, this mfthod is dbllfd on
   * b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>or if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
   * mbrkfr in thf SQL stbtfmfnt
   *
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.6
   */
   publid void sftClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr)
     throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


   /**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf rfbdfr must dontbin  thf numbfr
   * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
   * gfnfrbtfd whfn thf <dodf>PrfpbrfdStbtfmfnt</dodf> is fxfdutfd.
   *This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
   * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
   * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
   * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
   * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
   * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
   * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
   * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs, this mfthod is dbllfd on
   * b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>, if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
   * mbrkfr in thf SQL stbtfmfnt, or if thf lfngth spfdififd is lfss thbn zfro.
   *
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.6
   */
   publid void sftClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr, long lfngth)
     throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.  Thf inputstrfbm must dontbin  thf numbfr
    * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
    * gfnfrbtfd whfn thf <dodf>PrfpbrfdStbtfmfnt</dodf> is fxfdutfd.
    * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm, int)</dodf>
    * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
    * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
    * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
    * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1,
    * thf sfdond is 2, ...
    * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
    * vbluf to.
    * @pbrbm lfngth thf numbfr of bytfs in thf pbrbmftfr dbtb.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs,
    * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>,
    * if pbrbmftfrIndfx dofs not dorrfspond
    * to b pbrbmftfr mbrkfr in thf SQL stbtfmfnt,  if thf lfngth spfdififd
    * is lfss thbn zfro or if thf numbfr of bytfs in thf inputstrfbm dofs not mbtdh
    * thf spfdififd lfngth.
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    *
    * @sindf 1.6
    */
    publid void sftBlob(int pbrbmftfrIndfx, InputStrfbm inputStrfbm, long lfngth)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.
    * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm)</dodf>
    * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm)</dodf>
    * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
    * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
    * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
    *
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftBlob</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1,
    * thf sfdond is 2, ...


    * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
    * vbluf to.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs,
    * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf> or
    * if pbrbmftfrIndfx dofs not dorrfspond
    * to b pbrbmftfr mbrkfr in thf SQL stbtfmfnt,
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    *
    * @sindf 1.6
    */
    publid void sftBlob(int pbrbmftfrIndfx, InputStrfbm inputStrfbm)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.  Thf <dodf>inputstrfbm</dodf> must dontbin  thf numbfr
      * of dhbrbdtfrs spfdififd by lfngth, othfrwisf b <dodf>SQLExdfption</dodf> will bf
      * gfnfrbtfd whfn thf <dodf>CbllbblfStbtfmfnt</dodf> is fxfdutfd.
      * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm, int)</dodf>
      * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
      * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
      * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
      * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
      *
      * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr to bf sft
      * thf sfdond is 2, ...
      *
      * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
      * vbluf to.
      * @pbrbm lfngth thf numbfr of bytfs in thf pbrbmftfr dbtb.
      * @throws SQLExdfption  if pbrbmftfrIndfx dofs not dorrfspond
      * to b pbrbmftfr mbrkfr in thf SQL stbtfmfnt,  or if thf lfngth spfdififd
      * is lfss thbn zfro; if thf numbfr of bytfs in thf inputstrfbm dofs not mbtdh
      * thf spfdififd lfngth; if b dbtbbbsf bddfss frror oddurs or
      * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
      * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
      * this mfthod
      *
      * @sindf 1.6
      */
      publid void sftBlob(String pbrbmftfrNbmf, InputStrfbm inputStrfbm, long lfngth)
         throws SQLExdfption{
         throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
    }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Blob</dodf> objfdt.
    * Thf drivfr donvfrts this to bn SQL <dodf>BLOB</dodf> vbluf whfn it
    * sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x b <dodf>Blob</dodf> objfdt thbt mbps bn SQL <dodf>BLOB</dodf> vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.6
    */
   publid void sftBlob (String pbrbmftfrNbmf, Blob x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.
    * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm)</dodf>
    * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
    * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
    * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
    *
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftBlob</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
    * vbluf to.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    *
    * @sindf 1.6
    */
    publid void sftBlob(String pbrbmftfrNbmf, InputStrfbm inputStrfbm)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

  /**
  * Sfts thf vbluf of thf dfsignbtfd pbrbmftfr with thf givfn objfdt. Thf sfdond
  * brgumfnt must bf bn objfdt typf; for intfgrbl vblufs, thf
  * <dodf>jbvb.lbng</dodf> fquivblfnt objfdts should bf usfd.
  *
  * <p>Thf givfn Jbvb objfdt will bf donvfrtfd to thf givfn tbrgftSqlTypf
  * bfforf bfing sfnt to thf dbtbbbsf.
  *
  * If thf objfdt hbs b dustom mbpping (is of b dlbss implfmfnting thf
  * intfrfbdf <dodf>SQLDbtb</dodf>),
  * thf JDBC drivfr should dbll thf mfthod <dodf>SQLDbtb.writfSQL</dodf> to writf it
  * to thf SQL dbtb strfbm.
  * If, on thf othfr hbnd, thf objfdt is of b dlbss implfmfnting
  * <dodf>Rff</dodf>, <dodf>Blob</dodf>, <dodf>Clob</dodf>,  <dodf>NClob</dodf>,
  *  <dodf>Strudt</dodf>, <dodf>jbvb.nft.URL</dodf>,
  * or <dodf>Arrby</dodf>, thf drivfr should pbss it to thf dbtbbbsf bs b
  * vbluf of thf dorrfsponding SQL typf.
  * <P>
  * Notf thbt this mfthod mby bf usfd to pbss dbtbtbbbsf-
  * spfdifid bbstrbdt dbtb typfs.
  *
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
  * @pbrbm x thf objfdt dontbining thf input pbrbmftfr vbluf
  * @pbrbm tbrgftSqlTypf thf SQL typf (bs dffinfd in jbvb.sql.Typfs) to bf
  * sfnt to thf dbtbbbsf. Thf sdblf brgumfnt mby furthfr qublify this typf.
  * @pbrbm sdblf for jbvb.sql.Typfs.DECIMAL or jbvb.sql.Typfs.NUMERIC typfs,
  *          this is thf numbfr of digits bftfr thf dfdimbl point.  For bll othfr
  *          typfs, this vbluf will bf ignorfd.
  * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
  * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
  * @fxdfption SQLFfbturfNotSupportfdExdfption if <dodf>tbrgftSqlTypf</dodf> is
  * b <dodf>ARRAY</dodf>, <dodf>BLOB</dodf>, <dodf>CLOB</dodf>,
  * <dodf>DATALINK</dodf>, <dodf>JAVA_OBJECT</dodf>, <dodf>NCHAR</dodf>,
  * <dodf>NCLOB</dodf>, <dodf>NVARCHAR</dodf>, <dodf>LONGNVARCHAR</dodf>,
  *  <dodf>REF</dodf>, <dodf>ROWID</dodf>, <dodf>SQLXML</dodf>
  * or  <dodf>STRUCT</dodf> dbtb typf bnd thf JDBC drivfr dofs not support
  * this dbtb typf
  * @sff Typfs
  * @sff #gftObjfdt
  * @sindf 1.4
  */
  publid void sftObjfdt(String pbrbmftfrNbmf, Objfdt x, int tbrgftSqlTypf, int sdblf)
     throws SQLExdfption{
      throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
 }

  /**
    * Sfts thf vbluf of thf dfsignbtfd pbrbmftfr with thf givfn objfdt.
    * This mfthod is likf thf mfthod <dodf>sftObjfdt</dodf>
    * bbovf, fxdfpt thbt it bssumfs b sdblf of zfro.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf objfdt dontbining thf input pbrbmftfr vbluf
    * @pbrbm tbrgftSqlTypf thf SQL typf (bs dffinfd in jbvb.sql.Typfs) to bf
    *                      sfnt to thf dbtbbbsf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if <dodf>tbrgftSqlTypf</dodf> is
    * b <dodf>ARRAY</dodf>, <dodf>BLOB</dodf>, <dodf>CLOB</dodf>,
    * <dodf>DATALINK</dodf>, <dodf>JAVA_OBJECT</dodf>, <dodf>NCHAR</dodf>,
    * <dodf>NCLOB</dodf>, <dodf>NVARCHAR</dodf>, <dodf>LONGNVARCHAR</dodf>,
    *  <dodf>REF</dodf>, <dodf>ROWID</dodf>, <dodf>SQLXML</dodf>
    * or  <dodf>STRUCT</dodf> dbtb typf bnd thf JDBC drivfr dofs not support
    * this dbtb typf
    * @sff #gftObjfdt
    * @sindf 1.4
    */
    publid void sftObjfdt(String pbrbmftfrNbmf, Objfdt x, int tbrgftSqlTypf)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
   * Sfts thf vbluf of thf dfsignbtfd pbrbmftfr with thf givfn objfdt.
   * Thf sfdond pbrbmftfr must bf of typf <dodf>Objfdt</dodf>; thfrfforf, thf
   * <dodf>jbvb.lbng</dodf> fquivblfnt objfdts should bf usfd for built-in typfs.
   *
   * <p>Thf JDBC spfdifidbtion spfdififs b stbndbrd mbpping from
   * Jbvb <dodf>Objfdt</dodf> typfs to SQL typfs.  Thf givfn brgumfnt
   * will bf donvfrtfd to thf dorrfsponding SQL typf bfforf bfing
   * sfnt to thf dbtbbbsf.
   *
   * <p>Notf thbt this mfthod mby bf usfd to pbss dbtbtbbbsf-
   * spfdifid bbstrbdt dbtb typfs, by using b drivfr-spfdifid Jbvb
   * typf.
   *
   * If thf objfdt is of b dlbss implfmfnting thf intfrfbdf <dodf>SQLDbtb</dodf>,
   * thf JDBC drivfr should dbll thf mfthod <dodf>SQLDbtb.writfSQL</dodf>
   * to writf it to thf SQL dbtb strfbm.
   * If, on thf othfr hbnd, thf objfdt is of b dlbss implfmfnting
   * <dodf>Rff</dodf>, <dodf>Blob</dodf>, <dodf>Clob</dodf>,  <dodf>NClob</dodf>,
   *  <dodf>Strudt</dodf>, <dodf>jbvb.nft.URL</dodf>,
   * or <dodf>Arrby</dodf>, thf drivfr should pbss it to thf dbtbbbsf bs b
   * vbluf of thf dorrfsponding SQL typf.
   * <P>
   * This mfthod throws bn fxdfption if thfrf is bn bmbiguity, for fxbmplf, if thf
   * objfdt is of b dlbss implfmfnting morf thbn onf of thf intfrfbdfs nbmfd bbovf.
   *
   * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
   * @pbrbm x thf objfdt dontbining thf input pbrbmftfr vbluf
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
   * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf> or if thf givfn
   *            <dodf>Objfdt</dodf> pbrbmftfr is bmbiguous
   * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
   * this mfthod
   * @sff #gftObjfdt
   * @sindf 1.4
   */
   publid void sftObjfdt(String pbrbmftfrNbmf, Objfdt x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

  /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm, whidh will hbvf
  * thf spfdififd numbfr of bytfs.
  * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
  * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
  * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
  * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
  * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
  *
  * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
  * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
  * stbndbrd intfrfbdf.
  *
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
  * @pbrbm x thf Jbvb input strfbm thbt dontbins thf ASCII pbrbmftfr vbluf
  * @pbrbm lfngth thf numbfr of bytfs in thf strfbm
  * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
  * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
  * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
  * this mfthod
  * @sindf 1.4
  */
 publid void sftAsdiiStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x, int lfngth)
     throws SQLExdfption{
      throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
 }


/**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm, whidh will hbvf
  * thf spfdififd numbfr of bytfs.
  * Whfn b vfry lbrgf binbry vbluf is input to b <dodf>LONGVARBINARY</dodf>
  * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
  * <dodf>jbvb.io.InputStrfbm</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
  * bs nffdfd until fnd-of-filf is rfbdhfd.
  *
  * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
  * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
  * stbndbrd intfrfbdf.
  *
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
  * @pbrbm x thf jbvb input strfbm whidh dontbins thf binbry pbrbmftfr vbluf
  * @pbrbm lfngth thf numbfr of bytfs in thf strfbm
  * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
  * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
  * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
  * this mfthod
  * @sindf 1.4
  */
 publid void sftBinbryStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x,
                      int lfngth) throws SQLExdfption{
      throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
 }

 /**
   * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>Rfbdfr</dodf>
   * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
   * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
   * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
   * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
   * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
   * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
   *
   * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
   * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
   * stbndbrd intfrfbdf.
   *
   * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
   * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt
   *        dontbins thf UNICODE dbtb usfd bs thf dfsignbtfd pbrbmftfr
   * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf strfbm
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
   * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
   * this mfthod
   * @sindf 1.4
   */
  publid void sftChbrbdtfrStrfbm(String pbrbmftfrNbmf,
                          jbvb.io.Rfbdfr rfbdfr,
                          int lfngth) throws SQLExdfption{
       throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
  }

  /**
   * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm.
   * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
   * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
   * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
   * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
   * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
   *
   * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
   * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
   * stbndbrd intfrfbdf.
   * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
   * it might bf morf fffidifnt to usf b vfrsion of
   * <dodf>sftAsdiiStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
   *
   * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
   * @pbrbm x thf Jbvb input strfbm thbt dontbins thf ASCII pbrbmftfr vbluf
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
     * @sindf 1.6
  */
  publid void sftAsdiiStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x)
          throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm.
    * Whfn b vfry lbrgf binbry vbluf is input to b <dodf>LONGVARBINARY</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.InputStrfbm</dodf> objfdt. Thf dbtb will bf rfbd from thf
    * strfbm bs nffdfd until fnd-of-filf is rfbdhfd.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftBinbryStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf jbvb input strfbm whidh dontbins thf binbry pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    * @sindf 1.6
    */
   publid void sftBinbryStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x)
   throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>Rfbdfr</dodf>
    * objfdt.
    * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
    * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
    * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt dontbins thf
    *        Unidodf dbtb
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    * @sindf 1.6
    */
   publid void sftChbrbdtfrStrfbm(String pbrbmftfrNbmf,
                         jbvb.io.Rfbdfr rfbdfr) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

   /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn
    * <dodf>jbvb.mbth.BigDfdimbl</dodf> vbluf.
    * Thf drivfr donvfrts this to bn SQL <dodf>NUMERIC</dodf> vbluf whfn
    * it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftBigDfdimbl
    * @sindf 1.4
    */
   publid void sftBigDfdimbl(String pbrbmftfrNbmf, BigDfdimbl x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>String</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf
    * (dfpfnding on thf brgumfnt's
    * sizf rflbtivf to thf drivfr's limits on <dodf>VARCHAR</dodf> vblufs)
    * whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftString
    * @sindf 1.4
    */
   publid void sftString(String pbrbmftfrNbmf, String x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb brrby of bytfs.
    * Thf drivfr donvfrts this to bn SQL <dodf>VARBINARY</dodf> or
    * <dodf>LONGVARBINARY</dodf> (dfpfnding on thf brgumfnt's sizf rflbtivf
    * to thf drivfr's limits on <dodf>VARBINARY</dodf> vblufs) whfn it sfnds
    * it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftBytfs
    * @sindf 1.4
    */
   publid void sftBytfs(String pbrbmftfrNbmf, bytf x[]) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timfstbmp</dodf> vbluf.
    * Thf drivfr
    * donvfrts this to bn SQL <dodf>TIMESTAMP</dodf> vbluf whfn it sfnds it to thf
    * dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftTimfstbmp
    * @sindf 1.4
    */
   publid void sftTimfstbmp(String pbrbmftfrNbmf, jbvb.sql.Timfstbmp x)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

    /**
    * Sfts thf dfsignbtfd pbrbmftfr to SQL <dodf>NULL</dodf>.
    *
    * <P><B>Notf:</B> You must spfdify thf pbrbmftfr's SQL typf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm sqlTypf thf SQL typf dodf dffinfd in <dodf>jbvb.sql.Typfs</dodf>
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftNull(String pbrbmftfrNbmf, int sqlTypf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to SQL <dodf>NULL</dodf>.
    * This vfrsion of thf mfthod <dodf>sftNull</dodf> should
    * bf usfd for usfr-dffinfd typfs bnd REF typf pbrbmftfrs.  Exbmplfs
    * of usfr-dffinfd typfs indludf: STRUCT, DISTINCT, JAVA_OBJECT, bnd
    * nbmfd brrby typfs.
    *
    * <P><B>Notf:</B> To bf portbblf, bpplidbtions must givf thf
    * SQL typf dodf bnd thf fully-qublififd SQL typf nbmf whfn spfdifying
    * b NULL usfr-dffinfd or REF pbrbmftfr.  In thf dbsf of b usfr-dffinfd typf
    * thf nbmf is thf typf nbmf of thf pbrbmftfr itsflf.  For b REF
    * pbrbmftfr, thf nbmf is thf typf nbmf of thf rfffrfndfd typf.  If
    * b JDBC drivfr dofs not nffd thf typf dodf or typf nbmf informbtion,
    * it mby ignorf it.
    *
    * Although it is intfndfd for usfr-dffinfd bnd Rff pbrbmftfrs,
    * this mfthod mby bf usfd to sft b null pbrbmftfr of bny JDBC typf.
    * If thf pbrbmftfr dofs not hbvf b usfr-dffinfd or REF typf, thf givfn
    * typfNbmf is ignorfd.
    *
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm sqlTypf b vbluf from <dodf>jbvb.sql.Typfs</dodf>
    * @pbrbm typfNbmf thf fully-qublififd nbmf of bn SQL usfr-dffinfd typf;
    *        ignorfd if thf pbrbmftfr is not b usfr-dffinfd typf or
    *        SQL <dodf>REF</dodf> vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftNull (String pbrbmftfrNbmf, int sqlTypf, String typfNbmf)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>boolfbn</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>BIT</dodf> or <dodf>BOOLEAN</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @sff #gftBoolfbn
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftBoolfbn(String pbrbmftfrNbmf, boolfbn x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>bytf</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>TINYINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftBytf
    * @sindf 1.4
    */
   publid void sftBytf(String pbrbmftfrNbmf, bytf x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>short</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>SMALLINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftShort
    * @sindf 1.4
    */
   publid void sftShort(String pbrbmftfrNbmf, short x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


   /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>int</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>INTEGER</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftInt
    * @sindf 1.4
    */
   publid void sftInt(String pbrbmftfrNbmf, int x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>long</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>BIGINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftLong
    * @sindf 1.4
    */
   publid void sftLong(String pbrbmftfrNbmf, long x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>flobt</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>FLOAT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftFlobt
    * @sindf 1.4
    */
   publid void sftFlobt(String pbrbmftfrNbmf, flobt x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>doublf</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>DOUBLE</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftDoublf
    * @sindf 1.4
    */
   publid void sftDoublf(String pbrbmftfrNbmf, doublf x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption(rfsBundlf.hbndlfGftObjfdt("jdbdrowsftimpl.ffbtnotsupp").toString());
   }

    /**
     * This mfthod rf populbtfs thf rfsBundlf
     * during thf dfsfriblizbtion prodfss
     *
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm ois) throws IOExdfption, ClbssNotFoundExdfption {
        // Dffbult stbtf initiblizbtion hbppfns hfrf
        ois.dffbultRfbdObjfdt();
        // Initiblizbtion of trbnsifnt Rfs Bundlf hbppfns hfrf .
        try {
           rfsBundlf = JdbdRowSftRfsourdfBundlf.gftJdbdRowSftRfsourdfBundlf();
        } dbtdh(IOExdfption iof) {}

    }

   stbtid finbl long sfriblVfrsionUID = -3591946023893483003L;

 //------------------------- JDBC 4.1 -----------------------------------

    publid <T> T gftObjfdt(int dolumnIndfx, Clbss<T> typf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption("Not supportfd yft.");
    }

    publid <T> T gftObjfdt(String dolumnLbbfl, Clbss<T> typf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption("Not supportfd yft.");
    }
}
