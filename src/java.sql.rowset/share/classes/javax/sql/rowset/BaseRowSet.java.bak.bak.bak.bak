/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sql.rowsft;

import jbvb.sql.*;
import jbvbx.sql.*;
import jbvb.util.*;
import jbvb.io.*;
import jbvb.mbth.*;
import jbvb.io.Sfriblizbblf;

import jbvbx.sql.rowsft.sfribl.*;

/**
 * An bbstrbdt dlbss providing b <dodf>RowSft</dodf> objfdt with its bbsid fundtionblity.
 * Thf bbsid fundtions indludf hbving propfrtifs bnd sfnding fvfnt notifidbtions,
 * whidh bll JbvbBfbns&trbdf; domponfnts must implfmfnt.
 *
 * <h3>1.0 Ovfrvifw</h3>
 * Thf <dodf>BbsfRowSft</dodf> dlbss providfs thf dorf fundtionblity
 * for bll <dodf>RowSft</dodf> implfmfntbtions,
 * bnd bll stbndbrd implfmfntbtions <b>mby</b> usf this dlbss in dombinbtion with
 * onf or morf <dodf>RowSft</dodf> intfrfbdfs in ordfr to providf b stbndbrd
 * vfndor-spfdifid implfmfntbtion.  To dlbrify, bll implfmfntbtions must implfmfnt
 * bt lfbst onf of thf <dodf>RowSft</dodf> intfrfbdfs (<dodf>JdbdRowSft</dodf>,
 * <dodf>CbdhfdRowSft</dodf>, <dodf>JoinRowSft</dodf>, <dodf>FiltfrfdRowSft</dodf>,
 * or <dodf>WfbRowSft</dodf>). This mfbns thbt bny implfmfntbtion thbt fxtfnds
 * thf <dodf>BbsfRowSft</dodf> dlbss must blso implfmfnt onf of thf <dodf>RowSft</dodf>
 * intfrfbdfs.
 * <p>
 * Thf <dodf>BbsfRowSft</dodf> dlbss providfs thf following:
 *
 * <UL>
 * <LI><b>Propfrtifs</b>
 *     <ul>
 *     <li>Fiflds for storing durrfnt propfrtifs
 *     <li>Mfthods for gftting bnd sftting propfrtifs
 *     </ul>
 *
 * <LI><b>Evfnt notifidbtion</b>
 *
 * <LI><b>A domplftf sft of sfttfr mfthods</b> for sftting thf pbrbmftfrs in b
 *      <dodf>RowSft</dodf> objfdt's dommbnd
 *
 * <LI> <b>Strfbms</b>
 *  <ul>
 *  <li>Fiflds for storing strfbm instbndfs
 *  <li>Constbnts for indidbting thf typf of b strfbm
 *  </ul>
 * </UL>
 *
 * <h3>2.0 Sftting Propfrtifs</h3>
 * All rowsfts mbintbin b sft of propfrtifs, whidh will usublly bf sft using
 * b tool.  Thf numbfr bnd kinds of propfrtifs b rowsft hbs will vbry,
 * dfpfnding on whbt thf <dodf>RowSft</dodf> implfmfntbtion dofs bnd how it gfts
 * its dbtb.  For fxbmplf,
 * rowsfts thbt gft thfir dbtb from b <dodf>RfsultSft</dodf> objfdt nffd to
 * sft thf propfrtifs thbt brf rfquirfd for mbking b dbtbbbsf donnfdtion.
 * If b <dodf>RowSft</dodf> objfdt usfs thf <dodf>DrivfrMbnbgfr</dodf> fbdility to mbkf b
 * donnfdtion, it nffds to sft b propfrty for thf JDBC URL thbt idfntififs thf
 * bppropribtf drivfr, bnd it nffds to sft thf propfrtifs thbt givf thf
 * usfr nbmf bnd pbssword.
 * If, on thf othfr hbnd, thf rowsft usfs b <dodf>DbtbSourdf</dodf> objfdt
 * to mbkf thf donnfdtion, whidh is thf prfffrrfd mfthod, it dofs not nffd to
 * sft thf propfrty for thf JDBC URL.  Instfbd, it nffds to sft thf propfrty
 * for thf logidbl nbmf of thf dbtb sourdf blong with thf propfrtifs for
 * thf usfr nbmf bnd pbssword.
 * <P>
 * NOTE:  In ordfr to usf b <dodf>DbtbSourdf</dodf> objfdt for mbking b
 * donnfdtion, thf <dodf>DbtbSourdf</dodf> objfdt must hbvf bffn rfgistfrfd
 * with b nbming sfrvidf thbt usfs thf Jbvb Nbming bnd Dirfdtory
 * Intfrfbdf&trbdf; (JNDI) API.  This rfgistrbtion
 * is usublly donf by b pfrson bdting in thf dbpbdity of b systfm bdministrbtor.
 *
 * <h3>3.0 Sftting thf Commbnd bnd Its Pbrbmftfrs</h3>
 * Whfn b rowsft gfts its dbtb from b rflbtionbl dbtbbbsf, it fxfdutfs b dommbnd (b qufry)
 * thbt produdfs b <dodf>RfsultSft</dodf> objfdt.  This qufry is thf dommbnd thbt is sft
 * for thf <dodf>RowSft</dodf> objfdt's dommbnd propfrty.  Thf rowsft populbtfs itsflf with dbtb by rfbding thf
 * dbtb from thf <dodf>RfsultSft</dodf> objfdt into itsflf. If thf qufry
 * dontbins plbdfholdfrs for vblufs to bf sft, thf <dodf>BbsfRowSft</dodf> sfttfr mfthods
 * brf usfd to sft thfsf vblufs. All sfttfr mfthods bllow thfsf vblufs to bf sft
 * to <dodf>null</dodf> if rfquirfd.
 * <P>
 * Thf following dodf frbgmfnt illustrbtfs how thf
 * <dodf>CbdhfdRowSft</dodf>&trbdf;
 * objfdt <dodf>drs</dodf> might hbvf its dommbnd propfrty sft.  Notf thbt if b
 * tool is usfd to sft propfrtifs, this is thf dodf thbt thf tool would usf.
 * <PRE>{@dodf
 *    drs.sftCommbnd("SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS" +
 *                   "WHERE CREDIT_LIMIT > ? AND REGION = ?");
 * }</PRE>
 * <P>
 * In this fxbmplf, thf vblufs for <dodf>CREDIT_LIMIT</dodf> bnd
 * <dodf>REGION</dodf> brf plbdfholdfr pbrbmftfrs, whidh brf indidbtfd with b
 * qufstion mbrk (?).  Thf first qufstion mbrk is plbdfholdfr pbrbmftfr numbfr
 * <dodf>1</dodf>, thf sfdond qufstion mbrk is plbdfholdfr pbrbmftfr numbfr
 * <dodf>2</dodf>, bnd so on.  Any plbdfholdfr pbrbmftfrs must bf sft with
 * vblufs bfforf thf qufry dbn bf fxfdutfd. To sft thfsf
 * plbdfholdfr pbrbmftfrs, thf <dodf>BbsfRowSft</dodf> dlbss providfs b sft of sfttfr
 * mfthods, similbr to thosf providfd by thf <dodf>PrfpbrfdStbtfmfnt</dodf>
 * intfrfbdf, for sftting vblufs of fbdh dbtb typf.  A <dodf>RowSft</dodf> objfdt storfs thf
 * pbrbmftfr vblufs intfrnblly, bnd its <dodf>fxfdutf</dodf> mfthod usfs thfm intfrnblly
 * to sft vblufs for thf plbdfholdfr pbrbmftfrs
 * bfforf it sfnds thf dommbnd to thf DBMS to bf fxfdutfd.
 * <P>
 * Thf following dodf frbgmfnt dfmonstrbtfs
 * sftting thf two pbrbmftfrs in thf qufry from thf prfvious fxbmplf.
 * <PRE>{@dodf
 *    drs.sftInt(1, 5000);
 *    drs.sftString(2, "Wfst");
 * }</PRE>
 * If thf <dodf>fxfdutf</dodf> mfthod is dbllfd bt this point, thf qufry
 * sfnt to thf DBMS will bf:
 * <PRE>{@dodf
 *    "SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS" +
 *                   "WHERE CREDIT_LIMIT > 5000 AND REGION = 'Wfst'"
 * }</PRE>
 * NOTE: Sftting <dodf>Arrby</dodf>, <dodf>Clob</dodf>, <dodf>Blob</dodf> bnd
 * <dodf>Rff</dodf> objfdts bs b dommbnd pbrbmftfr, storfs thfsf vblufs bs
 * <dodf>SfriblArrby</dodf>, <dodf>SfriblClob</dodf>, <dodf>SfriblBlob</dodf>
 * bnd <dodf>SfriblRff</dodf> objfdts rfspfdtivfly.
 *
 * <h3>4.0 Hbndling of Pbrbmftfrs Bfhind thf Sdfnfs</h3>
 *
 * NOTE: Thf <dodf>BbsfRowSft</dodf> dlbss providfs two kinds of sfttfr mfthods,
 * thosf thbt sft propfrtifs bnd thosf thbt sft plbdfholdfr pbrbmftfrs. Thf sfttfr
 * mfthods disdussfd in this sfdtion brf thosf thbt sft plbdfholdfr pbrbmftfrs.
 * <P>
 * Thf plbdfholdfr pbrbmftfrs sft with thf <dodf>BbsfRowSft</dodf> sfttfr mfthods
 * brf storfd bs objfdts in bn intfrnbl <dodf>Hbshtbblf</dodf> objfdt.
 * Primitivfs brf storfd bs thfir <dodf>Objfdt</dodf> typf. For fxbmplf, <dodf>bytf</dodf>
 * is storfd bs <dodf>Bytf</dodf> objfdt, bnd <dodf>int</dodf> is storfd bs
 * bn <dodf>Intfgfr</dodf> objfdt.
 * Whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd, thf vblufs in thf
 * <dodf>Hbshtbblf</dodf> objfdt brf substitutfd for thf bppropribtf plbdfholdfr
 * pbrbmftfrs in thf dommbnd.
 * <P>
 * A dbll to thf mfthod <dodf>gftPbrbms</dodf> rfturns thf vblufs storfd in thf
 * <dodf>Hbshtbblf</dodf> objfdt bs bn brrby of <dodf>Objfdt</dodf> instbndfs.
 * An flfmfnt in this brrby mby bf b simplf <dodf>Objfdt</dodf> instbndf or bn
 * brrby (whidh is b typf of <dodf>Objfdt</dodf>). Thf pbrtidulbr sfttfr mfthod usfd
 * dftfrminfs whfthfr bn flfmfnt in this brrby is bn <dodf>Objfdt</dodf> or bn brrby.
 * <P>
 * Thf mbjority of mfthods for sftting plbdfholdfr pbrbmftfrs tbkf two pbrbmftfrs,
 *  with thf first pbrbmftfr
 * indidbting whidh plbdfholdfr pbrbmftfr is to bf sft, bnd thf sfdond pbrbmftfr
 * giving thf vbluf to bf sft.  Mfthods sudh bs <dodf>sftInt</dodf>,
 * <dodf>sftString</dodf>, <dodf>sftBoolfbn</dodf>, bnd <dodf>sftLong</dodf> fbll into
 * this dbtfgory.  Aftfr thfsf mfthods hbvf bffn dbllfd, b dbll to thf mfthod
 * <dodf>gftPbrbms</dodf> will rfturn bn brrby with thf vblufs thbt hbvf bffn sft. Ebdh
 * flfmfnt in thf brrby is bn <dodf>Objfdt</dodf> instbndf rfprfsfnting thf
 * vblufs thbt hbvf bffn sft. Thf ordfr of thfsf vblufs in thf brrby is dftfrminfd by thf
 * <dodf>int</dodf> (thf first pbrbmftfr) pbssfd to thf sfttfr mfthod. Thf vblufs in thf
 * brrby brf thf vblufs (thf sfdond pbrbmftfr) pbssfd to thf sfttfr mfthod.
 * In othfr words, thf first flfmfnt in thf brrby is thf vbluf
 * to bf sft for thf first plbdfholdfr pbrbmftfr in thf <dodf>RowSft</dodf> objfdt's
 * dommbnd. Thf sfdond flfmfnt is thf vbluf to
 * bf sft for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
 * <P>
 * Sfvfrbl sfttfr mfthods sfnd thf drivfr bnd DBMS informbtion bfyond thf vbluf to bf sft.
 * Whfn thf mfthod <dodf>gftPbrbms</dodf> is dbllfd bftfr onf of thfsf sfttfr mfthods hbs
 * bffn usfd, thf flfmfnts in thf brrby will thfmsflvfs bf brrbys to bddommodbtf thf
 * bdditionbl informbtion. In this dbtfgory, thf mfthod <dodf>sftNull</dodf> is b spfdibl dbsf
 * bfdbusf onf vfrsion tbkfs only
 * two pbrbmftfrs (<dodf>sftNull(int pbrbmftfrIndfx, int SqlTypf)</dodf>). Nfvfrthflfss,
 * it rfquirfs
 * bn brrby to dontbin thf informbtion thbt will bf pbssfd to thf drivfr bnd DBMS.  Thf first
 * flfmfnt in this brrby is thf vbluf to bf sft, whidh is <dodf>null</dodf>, bnd thf
 * sfdond flfmfnt is thf <dodf>int</dodf> supplifd for <i>sqlTypf</i>, whidh
 * indidbtfs thf typf of SQL vbluf thbt is bfing sft to <dodf>null</dodf>. This informbtion
 * is nffdfd by somf DBMSs bnd is thfrfforf rfquirfd in ordfr to fnsurf thbt bpplidbtions
 * brf portbblf.
 * Thf othfr vfrsion is intfndfd to bf usfd whfn thf vbluf to bf sft to <dodf>null</dodf>
 * is b usfr-dffinfd typf. It tbkfs thrff pbrbmftfrs
 * (<dodf>sftNull(int pbrbmftfrIndfx, int sqlTypf, String typfNbmf)</dodf>) bnd blso
 * rfquirfs bn brrby to dontbin thf informbtion to bf pbssfd to thf drivfr bnd DBMS.
 * Thf first two flfmfnts in this brrby brf thf sbmf bs for thf first vfrsion of
 * <dodf>sftNull</dodf>.  Thf third flfmfnt, <i>typfNbmf</i>, givfs thf SQL nbmf of
 * thf usfr-dffinfd typf. As is truf with thf othfr sfttfr mfthods, thf numbfr of thf
 * plbdfholdfr pbrbmftfr to bf sft is indidbtfd by bn flfmfnt's position in thf brrby
 * rfturnfd by <dodf>gftPbrbms</dodf>.  So, for fxbmplf, if thf pbrbmftfr
 * supplifd to <dodf>sftNull</dodf> is <dodf>2</dodf>, thf sfdond flfmfnt in thf brrby
 * rfturnfd by <dodf>gftPbrbms</dodf> will bf bn brrby of two or thrff flfmfnts.
 * <P>
 * Somf mfthods, sudh bs <dodf>sftObjfdt</dodf> bnd <dodf>sftDbtf</dodf> hbvf vfrsions
 * thbt tbkf morf thbn two pbrbmftfrs, with thf fxtrb pbrbmftfrs giving informbtion
 * to thf drivfr or thf DBMS. For fxbmplf, thf mfthods <dodf>sftDbtf</dodf>,
 * <dodf>sftTimf</dodf>, bnd <dodf>sftTimfstbmp</dodf> dbn tbkf b <dodf>Cblfndbr</dodf>
 * objfdt bs thfir third pbrbmftfr.  If thf DBMS dofs not storf timf zonf informbtion,
 * thf drivfr usfs thf <dodf>Cblfndbr</dodf> objfdt to donstrudt thf <dodf>Dbtf</dodf>,
 * <dodf>Timf</dodf>, or <dodf>Timfstbmp</dodf> objfdt bfing sft. As is truf with othfr
 * mfthods thbt providf bdditionbl informbtion, thf flfmfnt in thf brrby rfturnfd
 * by <dodf>gftPbrbms</dodf> is bn brrby instfbd of b simplf <dodf>Objfdt</dodf> instbndf.
 * <P>
 * Thf mfthods <dodf>sftAsdiiStrfbm</dodf>, <dodf>sftBinbryStrfbm</dodf>,
 * <dodf>sftChbrbdtfrStrfbm</dodf>, bnd <dodf>sftUnidodfStrfbm</dodf> (whidh is
 * dfprfdbtfd, so bpplidbtions should usf <dodf>gftChbrbdtfrStrfbm</dodf> instfbd)
 * tbkf thrff pbrbmftfrs, so for thfm, thf flfmfnt in thf brrby rfturnfd by
 * <dodf>gftPbrbms</dodf> is blso bn brrby.  Whbt is difffrfnt bbout thfsf sfttfr
 * mfthods is thbt in bddition to thf informbtion providfd by pbrbmftfrs, thf brrby dontbins
 * onf of thf <dodf>BbsfRowSft</dodf> donstbnts indidbting thf typf of strfbm bfing sft.
* <p>
* NOTE: Thf mfthod <dodf>gftPbrbms</dodf> is dbllfd intfrnblly by
* <dodf>RowSft</dodf> implfmfntbtions fxtfnding this dlbss; it is not normblly dbllfd by bn
* bpplidbtion progrbmmfr dirfdtly.
*
* <h3>5.0 Evfnt Notifidbtion</h3>
* Thf <dodf>BbsfRowSft</dodf> dlbss providfs thf fvfnt notifidbtion
* mfdhbnism for rowsfts.  It dontbins thf fifld
* <dodf>listfnfrs</dodf>, mfthods for bdding bnd rfmoving listfnfrs, bnd
* mfthods for notifying listfnfrs of dhbngfs.
* <P>
* A listfnfr is bn objfdt thbt hbs implfmfntfd thf <dodf>RowSftListfnfr</dodf> intfrfbdf.
* If it hbs bffn bddfd to b <dodf>RowSft</dodf> objfdt's list of listfnfrs, it will bf notififd
*  whfn bn fvfnt oddurs on thbt <dodf>RowSft</dodf> objfdt.  Ebdh listfnfr's
* implfmfntbtion of thf <dodf>RowSftListfnfr</dodf> mfthods dffinfs whbt thbt objfdt
* will do whfn it is notififd thbt bn fvfnt hbs oddurrfd.
* <P>
* Thfrf brf thrff possiblf fvfnts for b <dodf>RowSft</dodf> objfdt:
* <OL>
* <LI>thf dursor movfs
* <LI>bn individubl row is dhbngfd (updbtfd, dflftfd, or insfrtfd)
* <LI>thf dontfnts of thf fntirf <dodf>RowSft</dodf> objfdt  brf dhbngfd
* </OL>
* <P>
* Thf <dodf>BbsfRowSft</dodf> mfthod usfd for thf notifidbtion indidbtfs thf
* typf of fvfnt thbt hbs oddurrfd.  For fxbmplf, thf mfthod
* <dodf>notifyRowChbngfd</dodf> indidbtfs thbt b row hbs bffn updbtfd,
* dflftfd, or insfrtfd.  Ebdh of thf notifidbtion mfthods drfbtfs b
* <dodf>RowSftEvfnt</dodf> objfdt, whidh is supplifd to thf listfnfr in ordfr to
* idfntify thf <dodf>RowSft</dodf> objfdt on whidh thf fvfnt oddurrfd.
* Whbt thf listfnfr dofs with this informbtion, whidh mby bf nothing, dfpfnds on how it wbs
* implfmfntfd.
*
* <h3>6.0 Dffbult Bfhbvior</h3>
* A dffbult <dodf>BbsfRowSft</dodf> objfdt is initiblizfd with mbny stbrting vblufs.
*
* Thf following is truf of b dffbult <dodf>RowSft</dodf> instbndf thbt fxtfnds
* thf <dodf>BbsfRowSft</dodf> dlbss:
* <UL>
*   <LI>Hbs b sdrollbblf dursor bnd dofs not show dhbngfs
*       mbdf by othfrs.
*   <LI>Is updbtbblf.
*   <LI>Dofs not show rows thbt hbvf bffn dflftfd.
*   <LI>Hbs no timf limit for how long b drivfr mby tbkf to
*       fxfdutf thf <dodf>RowSft</dodf> objfdt's dommbnd.
*   <LI>Hbs no limit for thf numbfr of rows it mby dontbin.
*   <LI>Hbs no limit for thf numbfr of bytfs b dolumn mby dontbin. NOTE: This
*   limit bpplifs only to dolumns thbt hold vblufs of thf
*   following typfs:  <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>,
*   <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>, <dodf>VARCHAR</dodf>,
*   bnd <dodf>LONGVARCHAR</dodf>.
*   <LI>Will not sff undommittfd dbtb (mbkf "dirty" rfbds).
*   <LI>Hbs fsdbpf prodfssing turnfd on.
*   <LI>Hbs its donnfdtion's typf mbp sft to <dodf>null</dodf>.
*   <LI>Hbs bn fmpty <dodf>Vfdtor</dodf> objfdt for storing thf vblufs sft
*       for thf plbdfholdfr pbrbmftfrs in thf <dodf>RowSft</dodf> objfdt's dommbnd.
* </UL>
* <p>
* If othfr vblufs brf dfsirfd, bn bpplidbtion must sft thf propfrty vblufs
* fxpliditly. For fxbmplf, thf following linf of dodf sfts thf mbximum numbfr
* of rows for thf <dodf>CbdhfdRowSft</dodf> objfdt <i>drs</i> to 500.
* <PRE>
*    drs.sftMbxRows(500);
* </PRE>
* Mfthods implfmfntfd in fxtfnsions of this <dodf>BbsfRowSft</dodf> dlbss <b>must</b> throw bn
* <dodf>SQLExdfption</dodf> objfdt for bny violbtion of thf dffinfd bssfrtions.  Also, if thf
* fxtfnding dlbss ovfrridfs bnd rfimplfmfnts bny <dodf>BbsfRowSft</dodf> mfthod bnd fndountfrs
* donnfdtivity or undfrlying dbtb sourdf issufs, thbt mfthod <b>mby</b> in bddition throw bn
* <dodf>SQLExdfption</dodf> objfdt for thbt rfbson.
*
* @sindf 1.5
*/

publid bbstrbdt dlbss BbsfRowSft implfmfnts Sfriblizbblf, Clonfbblf {

    /**
     * A donstbnt indidbting to b <dodf>RowSftRfbdfrImpl</dodf> objfdt
     * thbt b givfn pbrbmftfr is b Unidodf strfbm. This
     * <dodf>RowSftRfbdfrImpl</dodf> objfdt is providfd bs bn fxtfnsion of thf
     * <dodf>SyndProvidfr</dodf> bbstrbdt dlbss dffinfd in thf
     * <dodf>SyndFbdtory</dodf> stbtid fbdtory SPI mfdhbnism.
     */
    publid stbtid finbl int UNICODE_STREAM_PARAM = 0;

    /**
     * A donstbnt indidbting to b <dodf>RowSftRfbdfrImpl</dodf> objfdt
     * thbt b givfn pbrbmftfr is b binbry strfbm. A
     * <dodf>RowSftRfbdfrImpl</dodf> objfdt is providfd bs bn fxtfnsion of thf
     * <dodf>SyndProvidfr</dodf> bbstrbdt dlbss dffinfd in thf
     * <dodf>SyndFbdtory</dodf> stbtid fbdtory SPI mfdhbnism.
     */
    publid stbtid finbl int BINARY_STREAM_PARAM = 1;

    /**
     * A donstbnt indidbting to b <dodf>RowSftRfbdfrImpl</dodf> objfdt
     * thbt b givfn pbrbmftfr is bn ASCII strfbm. A
     * <dodf>RowSftRfbdfrImpl</dodf> objfdt is providfd bs bn fxtfnsion of thf
     * <dodf>SyndProvidfr</dodf> bbstrbdt dlbss dffinfd in thf
     * <dodf>SyndFbdtory</dodf> stbtid fbdtory SPI mfdhbnism.
     */
    publid stbtid finbl int ASCII_STREAM_PARAM = 2;

    /**
     * Thf <dodf>InputStrfbm</dodf> objfdt thbt will bf
     * rfturnfd by thf mfthod <dodf>gftBinbryStrfbm</dodf>, whidh is
     * spfdififd in thf <dodf>RfsultSft</dodf> intfrfbdf.
     * @sfribl
     */
    protfdtfd jbvb.io.InputStrfbm binbryStrfbm;

    /**
     * Thf <dodf>InputStrfbm</dodf> objfdt thbt will bf
     * rfturnfd by thf mfthod <dodf>gftUnidodfStrfbm</dodf>,
     * whidh is spfdififd in thf <dodf>RfsultSft</dodf> intfrfbdf.
     * @sfribl
     */
    protfdtfd jbvb.io.InputStrfbm unidodfStrfbm;

    /**
     * Thf <dodf>InputStrfbm</dodf> objfdt thbt will bf
     * rfturnfd by thf mfthod <dodf>gftAsdiiStrfbm</dodf>,
     * whidh is spfdififd in thf <dodf>RfsultSft</dodf> intfrfbdf.
     * @sfribl
     */
    protfdtfd jbvb.io.InputStrfbm bsdiiStrfbm;

    /**
     * Thf <dodf>Rfbdfr</dodf> objfdt thbt will bf
     * rfturnfd by thf mfthod <dodf>gftChbrbdtfrStrfbm</dodf>,
     * whidh is spfdififd in thf <dodf>RfsultSft</dodf> intfrfbdf.
     * @sfribl
     */
    protfdtfd jbvb.io.Rfbdfr dhbrStrfbm;

    /**
     * Thf qufry thbt will bf sfnt to thf DBMS for fxfdution whfn thf
     * mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * @sfribl
     */
    privbtf String dommbnd;

    /**
     * Thf JDBC URL thf rfbdfr, writfr, or both supply to thf mfthod
     * <dodf>DrivfrMbnbgfr.gftConnfdtion</dodf> whfn thf
     * <dodf>DrivfrMbnbgfr</dodf> is usfd to gft b donnfdtion.
     * <P>
     * Thf JDBC URL idfntififs thf drivfr to bf usfd to mbkf thf donndfdtion.
     * This URL dbn bf found in thf dodumfntbtion supplifd by thf drivfr
     * vfndor.
     * @sfribl
     */
    privbtf String URL;

    /**
     * Thf logidbl nbmf of thf dbtb sourdf thbt thf rfbdfr/writfr should usf
     * in ordfr to rftrifvf b <dodf>DbtbSourdf</dodf> objfdt from b Jbvb
     * Dirfdtory bnd Nbming Intfrfbdf (JNDI) nbming sfrvidf.
     * @sfribl
     */
    privbtf String dbtbSourdf;

    /**
     * Thf usfr nbmf thf rfbdfr, writfr, or both supply to thf mfthod
     * <dodf>DrivfrMbnbgfr.gftConnfdtion</dodf> whfn thf
     * <dodf>DrivfrMbnbgfr</dodf> is usfd to gft b donnfdtion.
     * @sfribl
     */
    privbtf trbnsifnt String usfrnbmf;

    /**
     * Thf pbssword thf rfbdfr, writfr, or both supply to thf mfthod
     * <dodf>DrivfrMbnbgfr.gftConnfdtion</dodf> whfn thf
     * <dodf>DrivfrMbnbgfr</dodf> is usfd to gft b donnfdtion.
     * @sfribl
     */
    privbtf trbnsifnt String pbssword;

    /**
     * A donstbnt indidbting thf typf of this JDBC <dodf>RowSft</dodf>
     * objfdt. It must bf onf of thf following <dodf>RfsultSft</dodf>
     * donstbnts:  <dodf>TYPE_FORWARD_ONLY</dodf>,
     * <dodf>TYPE_SCROLL_INSENSITIVE</dodf>, or
     * <dodf>TYPE_SCROLL_SENSITIVE</dodf>.
     * @sfribl
     */
    privbtf int rowSftTypf = RfsultSft.TYPE_SCROLL_INSENSITIVE;

    /**
     * A <dodf>boolfbn</dodf> indidbting whfthfr dflftfd rows brf visiblf in this
     * JDBC <dodf>RowSft</dodf> objfdt .
     * @sfribl
     */
    privbtf boolfbn showDflftfd = fblsf; // dffbult is fblsf

    /**
     * Thf mbximum numbfr of sfdonds thf drivfr
     * will wbit for b dommbnd to fxfdutf.  This limit bpplifs whilf
     * this JDBC <dodf>RowSft</dodf> objfdt is donnfdtfd to its dbtb
     * sourdf, thbt is, whilf it is populbting itsflf with
     * dbtb bnd whilf it is writing dbtb bbdk to thf dbtb sourdf.
     * @sfribl
     */
    privbtf int qufryTimfout = 0; // dffbult is no timfout

    /**
     * Thf mbximum numbfr of rows thf rfbdfr should rfbd.
     * @sfribl
     */
    privbtf int mbxRows = 0; // dffbult is no limit

    /**
     * Thf mbximum fifld sizf thf rfbdfr should rfbd.
     * @sfribl
     */
    privbtf int mbxFifldSizf = 0; // dffbult is no limit

    /**
     * A donstbnt indidbting thf dondurrfndy of this JDBC <dodf>RowSft</dodf>
     * objfdt. It must bf onf of thf following <dodf>RfsultSft</dodf>
     * donstbnts: <dodf>CONCUR_READ_ONLY</dodf> or
     * <dodf>CONCUR_UPDATABLE</dodf>.
     * @sfribl
     */
    privbtf int dondurrfndy = RfsultSft.CONCUR_UPDATABLE;

    /**
     * A <dodf>boolfbn</dodf> indidbting whfthfr this JDBC <dodf>RowSft</dodf>
     * objfdt is rfbd-only.  <dodf>truf</dodf> indidbtfs thbt it is rfbd-only;
     * <dodf>fblsf</dodf> thbt it is writbblf.
     * @sfribl
     */
    privbtf boolfbn rfbdOnly;

    /**
     * A <dodf>boolfbn</dodf> indidbting whfthfr thf rfbdfr for this
     * JDBC <dodf>RowSft</dodf> objfdt should pfrform fsdbpf prodfssing.
     * <dodf>truf</dodf> mfbns thbt fsdbpf prodfssing is turnfd on;
     * <dodf>fblsf</dodf> thbt it is not. Thf dffbult is <dodf>truf</dodf>.
     * @sfribl
     */
    privbtf boolfbn fsdbpfProdfssing;

    /**
     * A donstbnt indidbting thf isolbtion lfvfl of thf donnfdtion
     * for this JDBC <dodf>RowSft</dodf> objfdt . It must bf onf of
     * thf following <dodf>Connfdtion</dodf> donstbnts:
     * <dodf>TRANSACTION_NONE</dodf>,
     * <dodf>TRANSACTION_READ_UNCOMMITTED</dodf>,
     * <dodf>TRANSACTION_READ_COMMITTED</dodf>,
     * <dodf>TRANSACTION_REPEATABLE_READ</dodf> or
     * <dodf>TRANSACTION_SERIALIZABLE</dodf>.
     * @sfribl
     */
    privbtf int isolbtion;

    /**
     * A donstbnt usfd bs b hint to thf drivfr thbt indidbtfs thf dirfdtion in
     * whidh dbtb from this JDBC <dodf>RowSft</dodf> objfdt  is going
     * to bf fftdhfd. Thf following <dodf>RfsultSft</dodf> donstbnts brf
     * possiblf vblufs:
     * <dodf>FETCH_FORWARD</dodf>,
     * <dodf>FETCH_REVERSE</dodf>,
     * <dodf>FETCH_UNKNOWN</dodf>.
     * <P>
     * Unusfd bt this timf.
     * @sfribl
     */
    privbtf int fftdhDir = RfsultSft.FETCH_FORWARD; // dffbult fftdh dirfdtion

    /**
     * A hint to thf drivfr thbt indidbtfs thf fxpfdtfd numbfr of rows
     * in this JDBC <dodf>RowSft</dodf> objfdt .
     * <P>
     * Unusfd bt this timf.
     * @sfribl
     */
    privbtf int fftdhSizf = 0; // dffbult fftdhSizf

    /**
     * Thf <dodf>jbvb.util.Mbp</dodf> objfdt thbt dontbins fntrifs mbpping
     * SQL typf nbmfs to dlbssfs in thf Jbvb progrbmming lbngubgf for thf
     * dustom mbpping of usfr-dffinfd typfs.
     * @sfribl
     */
    privbtf Mbp<String, Clbss<?>> mbp;

    /**
     * A <dodf>Vfdtor</dodf> objfdt thbt holds thf list of listfnfrs
     * thbt hbvf rfgistfrfd with this <dodf>RowSft</dodf> objfdt.
     * @sfribl
     */
    privbtf Vfdtor<RowSftListfnfr> listfnfrs;

    /**
     * A <dodf>Vfdtor</dodf> objfdt thbt holds thf pbrbmftfrs sft
     * for this <dodf>RowSft</dodf> objfdt's durrfnt dommbnd.
     * @sfribl
     */
    privbtf Hbshtbblf<Intfgfr, Objfdt> pbrbms; // dould bf trbnsifnt?

    /**
     * Construdts b nfw <dodf>BbsfRowSft</dodf> objfdt initiblizfd with
     * b dffbult <dodf>Vfdtor</dodf> objfdt for its <dodf>listfnfrs</dodf>
     * fifld. Thf othfr dffbult vblufs with whidh it is initiblizfd brf listfd
     * in Sfdtion 6.0 of thf dlbss dommfnt for this dlbss.
     */
    publid BbsfRowSft() {
        // bllodbtf thf listfnfrs dollfdtion
        listfnfrs = nfw Vfdtor<RowSftListfnfr>();
    }

    /**
     * Pfrforms thf nfdfssbry intfrnbl donfigurbtions bnd initiblizbtions
     * to bllow bny JDBC <dodf>RowSft</dodf> implfmfntbtion to stbrt using
     * thf stbndbrd fbdilitifs providfd by b <dodf>BbsfRowSft</dodf>
     * instbndf. This mfthod <b>should</b> bf dbllfd bftfr thf <dodf>RowSft</dodf> objfdt
     * hbs bffn instbntibtfd to dorrfdtly initiblizf bll pbrbmftfrs. This mfthod
     * <b>should</b> nfvfr bf dbllfd by bn bpplidbtion, but is dbllfd from with
     * b <dodf>RowSft</dodf> implfmfntbtion fxtfnding this dlbss.
     */
    protfdtfd void initPbrbms() {
        pbrbms = nfw Hbshtbblf<Intfgfr, Objfdt>();
    }

    //--------------------------------------------------------------------
    // Evfnts
    //--------------------------------------------------------------------

    /**
    * Thf listfnfr will bf notififd whfnfvfr bn fvfnt oddurs on this <dodf>RowSft</dodf>
    * objfdt.
    * <P>
    * A listfnfr might, for fxbmplf, bf b tbblf or grbph thbt nffds to
    * bf updbtfd in ordfr to bddurbtfly rfflfdt thf durrfnt stbtf of
    * thf <dodf>RowSft</dodf> objfdt.
    * <p>
    * <b>Notf</b>: if thf <dodf>RowSftListfnfr</dodf> objfdt is
    * <dodf>null</dodf>, this mfthod silfntly disdbrds thf <dodf>null</dodf>
    * vbluf bnd dofs not bdd b null rfffrfndf to thf sft of listfnfrs.
    * <p>
    * <b>Notf</b>: if thf listfnfr is blrfbdy sft, bnd thf nfw <dodf>RowSftListfrnfr</dodf>
    * instbndf is bddfd to thf sft of listfnfrs blrfbdy rfgistfrfd to rfdfivf
    * fvfnt notifidbtions from this <dodf>RowSft</dodf>.
    *
    * @pbrbm listfnfr bn objfdt thbt hbs implfmfntfd thf
    *     <dodf>jbvbx.sql.RowSftListfnfr</dodf> intfrfbdf bnd wbnts to bf notififd
    *     of bny fvfnts thbt oddur on this <dodf>RowSft</dodf> objfdt; Mby bf
    *     null.
    * @sff #rfmovfRowSftListfnfr
    */
    publid void bddRowSftListfnfr(RowSftListfnfr listfnfr) {
        listfnfrs.bdd(listfnfr);
    }

    /**
    * Rfmovfs thf dfsignbtfd objfdt from this <dodf>RowSft</dodf> objfdt's list of listfnfrs.
    * If thf givfn brgumfnt is not b rfgistfrfd listfnfr, this mfthod
    * dofs nothing.
    *
    *  <b>Notf</b>: if thf <dodf>RowSftListfnfr</dodf> objfdt is
    * <dodf>null</dodf>, this mfthod silfntly disdbrds thf <dodf>null</dodf>
    * vbluf.
    *
    * @pbrbm listfnfr b <dodf>RowSftListfnfr</dodf> objfdt thbt is on thf list
    *        of listfnfrs for this <dodf>RowSft</dodf> objfdt
    * @sff #bddRowSftListfnfr
    */
    publid void rfmovfRowSftListfnfr(RowSftListfnfr listfnfr) {
        listfnfrs.rfmovf(listfnfr);
    }

    /**
     * Dftfrminf if instbndf of this dlbss fxtfnds thf RowSft intfrfbdf.
     */
    privbtf void dhfdkforRowSftIntfrfbdf() throws SQLExdfption {
        if ((this instbndfof jbvbx.sql.RowSft) == fblsf) {
            throw nfw SQLExdfption("Thf dlbss fxtfnding bbstrbdt dlbss BbsfRowSft " +
                "must implfmfnt jbvbx.sql.RowSft or onf of it's sub-intfrfbdfs.");
        }
    }

    /**
    * Notififs bll of thf listfnfrs rfgistfrfd with this
    * <dodf>RowSft</dodf> objfdt thbt its dursor hbs movfd.
    * <P>
    * Whfn bn bpplidbtion dblls b mfthod to movf thf dursor,
    * thbt mfthod movfs thf dursor bnd thfn dblls this mfthod
    * intfrnblly. An bpplidbtion <b>should</b> nfvfr invokf
    * this mfthod dirfdtly.
    *
    * @throws SQLExdfption if thf dlbss fxtfnding thf <dodf>BbsfRowSft</dodf>
    *     bbstrbdt dlbss dofs not implfmfnt thf <dodf>RowSft</dodf> intfrfbdf or
    *     onf of it's sub-intfrfbdfs.
    */
    protfdtfd void notifyCursorMovfd() throws SQLExdfption {
        dhfdkforRowSftIntfrfbdf();
        if (listfnfrs.isEmpty() == fblsf) {
            RowSftEvfnt fvfnt = nfw RowSftEvfnt((RowSft)this);
            for (RowSftListfnfr rsl : listfnfrs) {
                rsl.dursorMovfd(fvfnt);
            }
        }
    }

    /**
    * Notififs bll of thf listfnfrs rfgistfrfd with this <dodf>RowSft</dodf> objfdt thbt
    * onf of its rows hbs dhbngfd.
    * <P>
    * Whfn bn bpplidbtion dblls b mfthod thbt dhbngfs b row, sudh bs
    * thf <dodf>CbdhfdRowSft</dodf> mfthods <dodf>insfrtRow</dodf>,
    * <dodf>updbtfRow</dodf>, or <dodf>dflftfRow</dodf>,
    * thbt mfthod dblls <dodf>notifyRowChbngfd</dodf>
    * intfrnblly. An bpplidbtion <b>should</b> nfvfr invokf
    * this mfthod dirfdtly.
    *
    * @throws SQLExdfption if thf dlbss fxtfnding thf <dodf>BbsfRowSft</dodf>
    *     bbstrbdt dlbss dofs not implfmfnt thf <dodf>RowSft</dodf> intfrfbdf or
    *     onf of it's sub-intfrfbdfs.
    */
    protfdtfd void notifyRowChbngfd() throws SQLExdfption {
        dhfdkforRowSftIntfrfbdf();
        if (listfnfrs.isEmpty() == fblsf) {
                RowSftEvfnt fvfnt = nfw RowSftEvfnt((RowSft)this);
                for (RowSftListfnfr rsl : listfnfrs) {
                    rsl.rowChbngfd(fvfnt);
                }
        }
    }

   /**
    * Notififs bll of thf listfnfrs rfgistfrfd with this <dodf>RowSft</dodf>
    * objfdt thbt its fntirf dontfnts hbvf dhbngfd.
    * <P>
    * Whfn bn bpplidbtion dblls mfthods thbt dhbngf thf fntirf dontfnts
    * of thf <dodf>RowSft</dodf> objfdt, sudh bs thf <dodf>CbdhfdRowSft</dodf> mfthods
    * <dodf>fxfdutf</dodf>, <dodf>populbtf</dodf>, <dodf>rfstorfOriginbl</dodf>,
    * or <dodf>rflfbsf</dodf>, thbt mfthod dblls <dodf>notifyRowSftChbngfd</dodf>
    * intfrnblly (fithfr dirfdtly or indirfdtly). An bpplidbtion <b>should</b>
    * nfvfr invokf this mfthod dirfdtly.
    *
    * @throws SQLExdfption if thf dlbss fxtfnding thf <dodf>BbsfRowSft</dodf>
    *     bbstrbdt dlbss dofs not implfmfnt thf <dodf>RowSft</dodf> intfrfbdf or
    *     onf of it's sub-intfrfbdfs.
    */
    protfdtfd void notifyRowSftChbngfd() throws SQLExdfption {
        dhfdkforRowSftIntfrfbdf();
        if (listfnfrs.isEmpty() == fblsf) {
                RowSftEvfnt fvfnt = nfw RowSftEvfnt((RowSft)this);
                for (RowSftListfnfr rsl : listfnfrs) {
                    rsl.rowSftChbngfd(fvfnt);
                }
        }
}

    /**
     * Rftrifvfs thf SQL qufry thbt is thf dommbnd for this
     * <dodf>RowSft</dodf> objfdt. Thf dommbnd propfrty dontbins thf qufry thbt
     * will bf fxfdutfd to populbtf this <dodf>RowSft</dodf> objfdt.
     * <P>
     * Thf SQL qufry rfturnfd by this mfthod is usfd by <dodf>RowSft</dodf> mfthods
     * sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf>, whidh mby bf implfmfntfd
     * by bny dlbss thbt fxtfnds thf <dodf>BbsfRowSft</dodf> bbstrbdt dlbss bnd
     * implfmfnts onf or morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf>
     * intfrfbdfs.
     * <P>
     * Thf dommbnd is usfd by thf <dodf>RowSft</dodf> objfdt's
     * rfbdfr to obtbin b <dodf>RfsultSft</dodf> objfdt.  Thf rfbdfr thfn
     * rfbds thf dbtb from thf <dodf>RfsultSft</dodf> objfdt bnd usfs it to
     * to populbtf this <dodf>RowSft</dodf> objfdt.
     * <P>
     * Thf dffbult vbluf for thf <dodf>dommbnd</dodf> propfrty is <dodf>null</dodf>.
     *
     * @rfturn thf <dodf>String</dodf> thbt is thf vbluf for this
     *         <dodf>RowSft</dodf> objfdt's <dodf>dommbnd</dodf> propfrty;
     *         mby bf <dodf>null</dodf>
     * @sff #sftCommbnd
     */
    publid String gftCommbnd() {
        rfturn dommbnd;
    }

    /**
     * Sfts this <dodf>RowSft</dodf> objfdt's <dodf>dommbnd</dodf> propfrty to
     * thf givfn <dodf>String</dodf> objfdt bnd dlfbrs thf pbrbmftfrs, if bny,
     * thbt wfrf sft for thf prfvious dommbnd.
     * <P>
     * Thf <dodf>dommbnd</dodf> propfrty mby not bf nffdfd if thf <dodf>RowSft</dodf>
     * objfdt gfts its dbtb from b sourdf thbt dofs not support dommbnds,
     * sudh bs b sprfbdshfft or othfr tbbulbr filf.
     * Thus, this propfrty is optionbl bnd mby bf <dodf>null</dodf>.
     *
     * @pbrbm dmd b <dodf>String</dodf> objfdt dontbining bn SQL qufry
     *            thbt will bf sft bs this <dodf>RowSft</dodf> objfdt's dommbnd
     *            propfrty; mby bf <dodf>null</dodf> but mby not bf bn fmpty string
     * @throws SQLExdfption if bn fmpty string is providfd bs thf dommbnd vbluf
     * @sff #gftCommbnd
     */
    publid void sftCommbnd(String dmd) throws SQLExdfption {
        // dmd fqubl to null or
        // dmd with lfngth 0 (implifs url =="")
        // brf not indfpfndfnt fvfnts.

        if(dmd == null) {
           dommbnd = null;
        } flsf if (dmd.lfngth() == 0) {
            throw nfw SQLExdfption("Invblid dommbnd string dftfdtfd. " +
            "Cbnnot bf of lfngth lfss thbn 0");
        } flsf {
            // "unbind" bny pbrbmftfrs from bny prfvious dommbnd.
            if(pbrbms == null){
                 throw nfw SQLExdfption("Sft initPbrbms() bfforf sftCommbnd");
            }
            pbrbms.dlfbr();
            dommbnd = dmd;
        }

    }

    /**
     * Rftrifvfs thf JDBC URL thbt this <dodf>RowSft</dodf> objfdt's
     * <dodf>jbvbx.sql.Rfbdfr</dodf> objfdt usfs to mbkf b donnfdtion
     * with b rflbtionbl dbtbbbsf using b JDBC tfdhnology-fnbblfd drivfr.
     *<P>
     * Thf <dodf>Url</dodf> propfrty will bf <dodf>null</dodf> if thf undfrlying dbtb
     * sourdf is b non-SQL dbtb sourdf, sudh bs b sprfbdshfft or bn XML
     * dbtb sourdf.
     *
     * @rfturn b <dodf>String</dodf> objfdt thbt dontbins thf JDBC URL
     *         usfd to fstbblish thf donnfdtion for this <dodf>RowSft</dodf>
     *         objfdt; mby bf <dodf>null</dodf> (dffbult vbluf) if not sft
     * @throws SQLExdfption if bn frror oddurs rftrifving thf URL vbluf
     * @sff #sftUrl
     */
    publid String gftUrl() throws SQLExdfption {
        rfturn URL;
    }

    /**
     * Sfts thf Url propfrty for this <dodf>RowSft</dodf> objfdt
     * to thf givfn <dodf>String</dodf> objfdt bnd sfts thf dbtbSourdf nbmf
     * propfrty to <dodf>null</dodf>. Thf Url propfrty is b
     * JDBC URL thbt is usfd whfn
     * thf donnfdtion is drfbtfd using b JDBC tfdhnology-fnbblfd drivfr
     * ("JDBC drivfr") bnd thf <dodf>DrivfrMbnbgfr</dodf>.
     * Thf dorrfdt JDBC URL for thf spfdifid drivfr to bf usfd dbn bf found
     * in thf drivfr dodumfntbtion.  Although thfrf brf guidflinfs for for how
     * b JDBC URL is formfd,
     * b drivfr vfndor dbn spfdify bny <dodf>String</dodf> objfdt fxdfpt
     * onf with b lfngth of <dodf>0</dodf> (bn fmpty string).
     * <P>
     * Sftting thf Url propfrty is optionbl if donnfdtions brf fstbblishfd using
     * b <dodf>DbtbSourdf</dodf> objfdt instfbd of thf <dodf>DrivfrMbnbgfr</dodf>.
     * Thf drivfr will usf fithfr thf URL propfrty or thf
     * dbtbSourdfNbmf propfrty to drfbtf b donnfdtion, whidhfvfr wbs
     * spfdififd most rfdfntly. If bn bpplidbtion usfs b JDBC URL, it
     * must lobd b JDBC drivfr thbt bddfpts thf JDBC URL bfforf it usfs thf
     * <dodf>RowSft</dodf> objfdt to donnfdt to b dbtbbbsf.  Thf <dodf>RowSft</dodf>
     * objfdt will usf thf URL intfrnblly to drfbtf b dbtbbbsf donnfdtion in ordfr
     * to rfbd or writf dbtb.
     *
     * @pbrbm url b <dodf>String</dodf> objfdt thbt dontbins thf JDBC URL
     *     thbt will bf usfd to fstbblish thf donnfdtion to b dbtbbbsf for this
     *     <dodf>RowSft</dodf> objfdt; mby bf <dodf>null</dodf> but must not
     *     bf bn fmpty string
     * @throws SQLExdfption if bn frror oddurs sftting thf Url propfrty or thf
     *     pbrbmftfr supplifd is b string with b lfngth of <dodf>0</dodf> (bn
     *     fmpty string)
     * @sff #gftUrl
     */
    publid void sftUrl(String url) throws SQLExdfption {
        if(url == null) {
           url = null;
        } flsf if (url.lfngth() < 1) {
            throw nfw SQLExdfption("Invblid url string dftfdtfd. " +
            "Cbnnot bf of lfngth lfss thbn 1");
        } flsf {
            URL = url;
        }

        dbtbSourdf = null;

    }

    /**
     * Rfturns thf logidbl nbmf thbt whfn supplifd to b nbming sfrvidf
     * thbt usfs thf Jbvb Nbming bnd Dirfdtory Intfrfbdf (JNDI) API, will
     * rftrifvf b <dodf>jbvbx.sql.DbtbSourdf</dodf> objfdt. This
     * <dodf>DbtbSourdf</dodf> objfdt dbn bf usfd to fstbblish b donnfdtion
     * to thf dbtb sourdf thbt it rfprfsfnts.
     * <P>
     * Usfrs should sft fithfr thf url or thf dbtb sourdf nbmf propfrty.
     * Thf drivfr will usf thf propfrty sft most rfdfntly to fstbblish b
     * donnfdtion.
     *
     * @rfturn b <dodf>String</dodf> objfdt thbt idfntififs thf
     *         <dodf>DbtbSourdf</dodf> objfdt to bf usfd for mbking b
     *         donnfdtion; if no logidbl nbmf hbs bffn sft, <dodf>null</dodf>
     *         is rfturnfd.
     * @sff #sftDbtbSourdfNbmf
     */
    publid String gftDbtbSourdfNbmf() {
        rfturn dbtbSourdf;
    }


    /**
     * Sfts thf <dodf>DbtbSourdf</dodf> nbmf propfrty for this <dodf>RowSft</dodf>
     * objfdt to thf givfn logidbl nbmf bnd sfts this <dodf>RowSft</dodf> objfdt's
     * Url propfrty to <dodf>null</dodf>. Thf nbmf must hbvf bffn bound to b
     * <dodf>DbtbSourdf</dodf> objfdt in b JNDI nbming sfrvidf so thbt bn
     * bpplidbtion dbn do b lookup using thbt nbmf to rftrifvf thf
     * <dodf>DbtbSourdf</dodf> objfdt bound to it. Thf <dodf>DbtbSourdf</dodf>
     * objfdt dbn thfn bf usfd to fstbblish b donnfdtion to thf dbtb sourdf it
     * rfprfsfnts.
     * <P>
     * Usfrs should sft fithfr thf Url propfrty or thf dbtbSourdfNbmf propfrty.
     * If both propfrtifs brf sft, thf drivfr will usf thf propfrty sft most rfdfntly.
     *
     * @pbrbm nbmf b <dodf>String</dodf> objfdt with thf nbmf thbt dbn bf supplifd
     *     to b nbming sfrvidf bbsfd on JNDI tfdhnology to rftrifvf thf
     *     <dodf>DbtbSourdf</dodf> objfdt thbt dbn bf usfd to gft b donnfdtion;
     *     mby bf <dodf>null</dodf> but must not bf bn fmpty string
     * @throws SQLExdfption if bn fmpty string is providfd bs thf <dodf>DbtbSourdf</dodf>
     *    nbmf
     * @sff #gftDbtbSourdfNbmf
     */
    publid void sftDbtbSourdfNbmf(String nbmf) throws SQLExdfption {

        if (nbmf == null) {
            dbtbSourdf = null;
        } flsf if (nbmf.fqubls("")) {
           throw nfw SQLExdfption("DbtbSourdf nbmf dbnnot bf fmpty string");
        } flsf {
           dbtbSourdf = nbmf;
        }

        URL = null;
    }

    /**
     * Rfturns thf usfr nbmf usfd to drfbtf b dbtbbbsf donnfdtion.  Bfdbusf it
     * is not sfriblizfd, thf usfrnbmf propfrty is sft bt runtimf bfforf
     * dblling thf mfthod <dodf>fxfdutf</dodf>.
     *
     * @rfturn thf <dodf>String</dodf> objfdt dontbining thf usfr nbmf thbt
     *         is supplifd to thf dbtb sourdf to drfbtf b donnfdtion; mby bf
     *         <dodf>null</dodf> (dffbult vbluf) if not sft
     * @sff #sftUsfrnbmf
     */
    publid String gftUsfrnbmf() {
        rfturn usfrnbmf;
    }

    /**
     * Sfts thf usfrnbmf propfrty for this <dodf>RowSft</dodf> objfdt
     * to thf givfn usfr nbmf. Bfdbusf it
     * is not sfriblizfd, thf usfrnbmf propfrty is sft bt run timf bfforf
     * dblling thf mfthod <dodf>fxfdutf</dodf>.
     *
     * @pbrbm nbmf thf <dodf>String</dodf> objfdt dontbining thf usfr nbmf thbt
     *     is supplifd to thf dbtb sourdf to drfbtf b donnfdtion. It mby bf null.
     * @sff #gftUsfrnbmf
     */
    publid void sftUsfrnbmf(String nbmf) {
        if(nbmf == null)
        {
           usfrnbmf = null;
        } flsf {
           usfrnbmf = nbmf;
        }
    }

    /**
     * Rfturns thf pbssword usfd to drfbtf b dbtbbbsf donnfdtion for this
     * <dodf>RowSft</dodf> objfdt.  Bfdbusf thf pbssword propfrty is not
     * sfriblizfd, it is sft bt run timf bfforf dblling thf mfthod
     * <dodf>fxfdutf</dodf>. Thf dffbult vbluf is <dodf>null</dodf>
     *
     * @rfturn thf <dodf>String</dodf> objfdt thbt rfprfsfnts thf pbssword
     *         thbt must bf supplifd to thf dbtbbbsf to drfbtf b donnfdtion
     * @sff #sftPbssword
     */
    publid String gftPbssword() {
        rfturn pbssword;
    }

    /**
     * Sfts thf pbssword usfd to drfbtf b dbtbbbsf donnfdtion for this
     * <dodf>RowSft</dodf> objfdt to thf givfn <dodf>String</dodf>
     * objfdt.  Bfdbusf thf pbssword propfrty is not
     * sfriblizfd, it is sft bt run timf bfforf dblling thf mfthod
     * <dodf>fxfdutf</dodf>.
     *
     * @pbrbm pbss thf <dodf>String</dodf> objfdt thbt rfprfsfnts thf pbssword
     *     thbt is supplifd to thf dbtbbbsf to drfbtf b donnfdtion. It mby bf
     *     null.
     * @sff #gftPbssword
     */
    publid void sftPbssword(String pbss) {
        if(pbss == null)
        {
           pbssword = null;
        } flsf {
           pbssword = pbss;
        }
    }

    /**
     * Sfts thf typf for this <dodf>RowSft</dodf> objfdt to thf spfdififd typf.
     * Thf dffbult typf is <dodf>RfsultSft.TYPE_SCROLL_INSENSITIVE</dodf>.
     *
     * @pbrbm typf onf of thf following donstbnts:
     *             <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>,
     *             <dodf>RfsultSft.TYPE_SCROLL_INSENSITIVE</dodf>, or
     *             <dodf>RfsultSft.TYPE_SCROLL_SENSITIVE</dodf>
     * @throws SQLExdfption if thf pbrbmftfr supplifd is not onf of thf
     *         following donstbnts:
     *          <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf> or
     *          <dodf>RfsultSft.TYPE_SCROLL_INSENSITIVE</dodf>
     *          <dodf>RfsultSft.TYPE_SCROLL_SENSITIVE</dodf>
     * @sff #gftCondurrfndy
     * @sff #gftTypf
     */
    publid void sftTypf(int typf) throws SQLExdfption {

        if ((typf != RfsultSft.TYPE_FORWARD_ONLY) &&
           (typf != RfsultSft.TYPE_SCROLL_INSENSITIVE) &&
           (typf != RfsultSft.TYPE_SCROLL_SENSITIVE)) {
                throw nfw SQLExdfption("Invblid typf of RowSft sft. Must bf fithfr " +
                "RfsultSft.TYPE_FORWARD_ONLY or RfsultSft.TYPE_SCROLL_INSENSITIVE " +
                "or RfsultSft.TYPE_SCROLL_SENSITIVE.");
        }
        this.rowSftTypf = typf;
    }

    /**
     * Rfturns thf typf of this <dodf>RowSft</dodf> objfdt. Thf typf is initiblly
     * dftfrminfd by thf stbtfmfnt thbt drfbtfd thf <dodf>RowSft</dodf> objfdt.
     * Thf <dodf>RowSft</dodf> objfdt dbn dbll thf mfthod
     * <dodf>sftTypf</dodf> bt bny timf to dhbngf its
     * typf.  Thf dffbult is <dodf>TYPE_SCROLL_INSENSITIVE</dodf>.
     *
     * @rfturn thf typf of this JDBC <dodf>RowSft</dodf>
     *         objfdt, whidh must bf onf of thf following:
     *         <dodf>RfsultSft.TYPE_FORWARD_ONLY</dodf>,
     *         <dodf>RfsultSft.TYPE_SCROLL_INSENSITIVE</dodf>, or
     *         <dodf>RfsultSft.TYPE_SCROLL_SENSITIVE</dodf>
     * @throws SQLExdfption if bn frror oddurs gftting thf typf of
     *     of this <dodf>RowSft</dodf> objfdt
     * @sff #sftTypf
     */
    publid int gftTypf() throws SQLExdfption {
        rfturn rowSftTypf;
    }

    /**
     * Sfts thf dondurrfndy for this <dodf>RowSft</dodf> objfdt to
     * thf spfdififd dondurrfndy. Thf dffbult dondurrfndy for bny <dodf>RowSft</dodf>
     * objfdt (donnfdtfd or disdonnfdtfd) is <dodf>RfsultSft.CONCUR_UPDATABLE</dodf>,
     * but this mfthod mby bf dbllfd bt bny timf to dhbngf thf dondurrfndy.
     *
     * @pbrbm dondurrfndy onf of thf following donstbnts:
     *                    <dodf>RfsultSft.CONCUR_READ_ONLY</dodf> or
     *                    <dodf>RfsultSft.CONCUR_UPDATABLE</dodf>
     * @throws SQLExdfption if thf pbrbmftfr supplifd is not onf of thf
     *         following donstbnts:
     *          <dodf>RfsultSft.CONCUR_UPDATABLE</dodf> or
     *          <dodf>RfsultSft.CONCUR_READ_ONLY</dodf>
     * @sff #gftCondurrfndy
     * @sff #isRfbdOnly
     */
    publid void sftCondurrfndy(int dondurrfndy) throws SQLExdfption {

        if((dondurrfndy != RfsultSft.CONCUR_READ_ONLY) &&
           (dondurrfndy != RfsultSft.CONCUR_UPDATABLE)) {
                throw nfw SQLExdfption("Invblid dondurrfndy sft. Must bf fithfr " +
                "RfsultSft.CONCUR_READ_ONLY or RfsultSft.CONCUR_UPDATABLE.");
        }
        this.dondurrfndy = dondurrfndy;
    }

    /**
     * Rfturns b <dodf>boolfbn</dodf> indidbting whfthfr this
     * <dodf>RowSft</dodf> objfdt is rfbd-only.
     * Any bttfmpts to updbtf b rfbd-only <dodf>RowSft</dodf> objfdt will rfsult in bn
     * <dodf>SQLExdfption</dodf> bfing thrown. By dffbult,
     * rowsfts brf updbtbblf if updbtfs brf possiblf.
     *
     * @rfturn <dodf>truf</dodf> if this <dodf>RowSft</dodf> objfdt
     *         dbnnot bf updbtfd; <dodf>fblsf</dodf> othfrwisf
     * @sff #sftCondurrfndy
     * @sff #sftRfbdOnly
     */
    publid boolfbn isRfbdOnly() {
        rfturn rfbdOnly;
    };

    /**
     * Sfts this <dodf>RowSft</dodf> objfdt's rfbdOnly  propfrty to thf givfn <dodf>boolfbn</dodf>.
     *
     * @pbrbm vbluf <dodf>truf</dodf> to indidbtf thbt this
     *              <dodf>RowSft</dodf> objfdt is rfbd-only;
     *              <dodf>fblsf</dodf> to indidbtf thbt it is updbtbblf
     */
    publid void sftRfbdOnly(boolfbn vbluf) {
        rfbdOnly = vbluf;
    }

    /**
     * Rfturns thf trbnsbdtion isolbtion propfrty for this
     * <dodf>RowSft</dodf> objfdt's donnfdtion. This propfrty rfprfsfnts
     * thf trbnsbdtion isolbtion lfvfl rfqufstfd for usf in trbnsbdtions.
     * <P>
     * For <dodf>RowSft</dodf> implfmfntbtions sudh bs
     * thf <dodf>CbdhfdRowSft</dodf> thbt opfrbtf in b disdonnfdtfd fnvironmfnt,
     * thf <dodf>SyndProvidfr</dodf> objfdt
     * offfrs domplfmfntbry lodking bnd dbtb intfgrity options. Thf
     * options dfsdribfd bflow brf pfrtinfnt only to donnfdtfd <dodf>RowSft</dodf>
     * objfdts (<dodf>JdbdRowSft</dodf> objfdts).
     *
     * @rfturn onf of thf following donstbnts:
     *         <dodf>Connfdtion.TRANSACTION_NONE</dodf>,
     *         <dodf>Connfdtion.TRANSACTION_READ_UNCOMMITTED</dodf>,
     *         <dodf>Connfdtion.TRANSACTION_READ_COMMITTED</dodf>,
     *         <dodf>Connfdtion.TRANSACTION_REPEATABLE_READ</dodf>, or
     *         <dodf>Connfdtion.TRANSACTION_SERIALIZABLE</dodf>
     * @sff jbvbx.sql.rowsft.spi.SyndFbdtory
     * @sff jbvbx.sql.rowsft.spi.SyndProvidfr
     * @sff #sftTrbnsbdtionIsolbtion

     */
    publid int gftTrbnsbdtionIsolbtion() {
        rfturn isolbtion;
    };

    /**
     * Sfts thf trbnsbdtion isolbtion propfrty for this JDBC <dodf>RowSft</dodf> objfdt to thf givfn
     * donstbnt. Thf DBMS will usf this trbnsbdtion isolbtion lfvfl for
     * trbnsbdtions if it dbn.
     * <p>
     * For <dodf>RowSft</dodf> implfmfntbtions sudh bs
     * thf <dodf>CbdhfdRowSft</dodf> thbt opfrbtf in b disdonnfdtfd fnvironmfnt,
     * thf <dodf>SyndProvidfr</dodf> objfdt bfing usfd
     * offfrs domplfmfntbry lodking bnd dbtb intfgrity options. Thf
     * options dfsdribfd bflow brf pfrtinfnt only to donnfdtfd <dodf>RowSft</dodf>
     * objfdts (<dodf>JdbdRowSft</dodf> objfdts).
     *
     * @pbrbm lfvfl onf of thf following donstbnts, listfd in bsdfnding ordfr:
     *              <dodf>Connfdtion.TRANSACTION_NONE</dodf>,
     *              <dodf>Connfdtion.TRANSACTION_READ_UNCOMMITTED</dodf>,
     *              <dodf>Connfdtion.TRANSACTION_READ_COMMITTED</dodf>,
     *              <dodf>Connfdtion.TRANSACTION_REPEATABLE_READ</dodf>, or
     *              <dodf>Connfdtion.TRANSACTION_SERIALIZABLE</dodf>
     * @throws SQLExdfption if thf givfn pbrbmftfr is not onf of thf Connfdtion
     *          donstbnts
     * @sff jbvbx.sql.rowsft.spi.SyndFbdtory
     * @sff jbvbx.sql.rowsft.spi.SyndProvidfr
     * @sff #gftTrbnsbdtionIsolbtion
     */
    publid void sftTrbnsbdtionIsolbtion(int lfvfl) throws SQLExdfption {
        if ((lfvfl != Connfdtion.TRANSACTION_NONE) &&
           (lfvfl != Connfdtion.TRANSACTION_READ_COMMITTED) &&
           (lfvfl != Connfdtion.TRANSACTION_READ_UNCOMMITTED) &&
           (lfvfl != Connfdtion.TRANSACTION_REPEATABLE_READ) &&
           (lfvfl != Connfdtion.TRANSACTION_SERIALIZABLE))
            {
                throw nfw SQLExdfption("Invblid trbnsbdtion isolbtion sft. Must " +
                "bf fithfr " +
                "Connfdtion.TRANSACTION_NONE or " +
                "Connfdtion.TRANSACTION_READ_UNCOMMITTED or " +
                "Connfdtion.TRANSACTION_READ_COMMITTED or " +
                "Connfdtion.RRANSACTION_REPEATABLE_READ or " +
                "Connfdtion.TRANSACTION_SERIALIZABLE");
            }
        this.isolbtion = lfvfl;
    }

    /**
     * Rftrifvfs thf typf mbp bssodibtfd with thf <dodf>Connfdtion</dodf>
     * objfdt for this <dodf>RowSft</dodf> objfdt.
     * <P>
     * Drivfrs thbt support thf JDBC 3.0 API will drfbtf
     * <dodf>Connfdtion</dodf> objfdts with bn bssodibtfd typf mbp.
     * This typf mbp, whidh is initiblly fmpty, dbn dontbin onf or morf
     * fully-qublififd SQL nbmfs bnd <dodf>Clbss</dodf> objfdts indidbting
     * thf dlbss to whidh thf nbmfd SQL vbluf will bf mbppfd. Thf typf mbpping
     * spfdififd in thf donnfdtion's typf mbp is usfd for dustom typf mbpping
     * whfn no othfr typf mbp supfrsfdfs it.
     * <p>
     * If b typf mbp is fxpliditly supplifd to b mfthod thbt dbn pfrform
     * dustom mbpping, thbt typf mbp supfrsfdfs thf donnfdtion's typf mbp.
     *
     * @rfturn thf <dodf>jbvb.util.Mbp</dodf> objfdt thbt is thf typf mbp
     *         for this <dodf>RowSft</dodf> objfdt's donnfdtion
     */
    publid jbvb.util.Mbp<String,Clbss<?>> gftTypfMbp() {
        rfturn mbp;
    }

    /**
     * Instblls thf givfn <dodf>jbvb.util.Mbp</dodf> objfdt bs thf typf mbp
     * bssodibtfd with thf <dodf>Connfdtion</dodf> objfdt for this
     * <dodf>RowSft</dodf> objfdt.  Thf dustom mbpping indidbtfd in
     * this typf mbp will bf usfd unlfss b difffrfnt typf mbp is fxpliditly
     * supplifd to b mfthod, in whidh dbsf thf typf mbp supplifd will bf usfd.
     *
     * @pbrbm mbp b <dodf>jbvb.util.Mbp</dodf> objfdt thbt dontbins thf
     *     mbpping from SQL typf nbmfs for usfr dffinfd typfs (UDT) to dlbssfs in
     *     thf Jbvb progrbmming lbngubgf.  Ebdh fntry in thf <dodf>Mbp</dodf>
     *     objfdt donsists of thf fully qublififd SQL nbmf of b UDT bnd thf
     *     <dodf>Clbss</dodf> objfdt for thf <dodf>SQLDbtb</dodf> implfmfntbtion
     *     of thbt UDT. Mby bf <dodf>null</dodf>.
     */
    publid void sftTypfMbp(jbvb.util.Mbp<String,Clbss<?>> mbp) {
        this.mbp = mbp;
    }

    /**
     * Rftrifvfs thf mbximum numbfr of bytfs thbt dbn bf usfd for b dolumn
     * vbluf in this <dodf>RowSft</dodf> objfdt.
     * This limit bpplifs only to dolumns thbt hold vblufs of thf
     * following typfs:  <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>,
     * <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>, <dodf>VARCHAR</dodf>,
     * bnd <dodf>LONGVARCHAR</dodf>.  If thf limit is fxdffdfd, thf fxdfss
     * dbtb is silfntly disdbrdfd.
     *
     * @rfturn bn <dodf>int</dodf> indidbting thf durrfnt mbximum dolumn sizf
     *     limit; zfro mfbns thbt thfrf is no limit
     * @throws SQLExdfption if bn frror oddurs intfrnblly dftfrmining thf
     *    mbximum limit of thf dolumn sizf
     */
    publid int gftMbxFifldSizf() throws SQLExdfption {
        rfturn mbxFifldSizf;
    }

    /**
     * Sfts thf mbximum numbfr of bytfs thbt dbn bf usfd for b dolumn
     * vbluf in this <dodf>RowSft</dodf> objfdt to thf givfn numbfr.
     * This limit bpplifs only to dolumns thbt hold vblufs of thf
     * following typfs:  <dodf>BINARY</dodf>, <dodf>VARBINARY</dodf>,
     * <dodf>LONGVARBINARY</dodf>, <dodf>CHAR</dodf>, <dodf>VARCHAR</dodf>,
     * bnd <dodf>LONGVARCHAR</dodf>.  If thf limit is fxdffdfd, thf fxdfss
     * dbtb is silfntly disdbrdfd. For mbximum portbbility, it is bdvisbblf to
     * usf vblufs grfbtfr thbn 256.
     *
     * @pbrbm mbx bn <dodf>int</dodf> indidbting thf nfw mbximum dolumn sizf
     *     limit; zfro mfbns thbt thfrf is no limit
     * @throws SQLExdfption if (1) bn frror oddurs intfrnblly sftting thf
     *     mbximum limit of thf dolumn sizf or (2) b sizf of lfss thbn 0 is sft
     */
    publid void sftMbxFifldSizf(int mbx) throws SQLExdfption {
        if (mbx < 0) {
            throw nfw SQLExdfption("Invblid mbx fifld sizf sft. Cbnnot bf of " +
            "vbluf: " + mbx);
        }
        mbxFifldSizf = mbx;
    }

    /**
     * Rftrifvfs thf mbximum numbfr of rows thbt this <dodf>RowSft</dodf> objfdt mby dontbin. If
     * this limit is fxdffdfd, thf fxdfss rows brf silfntly droppfd.
     *
     * @rfturn bn <dodf>int</dodf> indidbting thf durrfnt mbximum numbfr of
     *     rows; zfro mfbns thbt thfrf is no limit
     * @throws SQLExdfption if bn frror oddurs intfrnblly dftfrmining thf
     *     mbximum limit of rows thbt b <dodf>Rowsft</dodf> objfdt dbn dontbin
     */
    publid int gftMbxRows() throws SQLExdfption {
        rfturn mbxRows;
    }

    /**
     * Sfts thf mbximum numbfr of rows thbt this <dodf>RowSft</dodf> objfdt mby dontbin to
     * thf givfn numbfr. If this limit is fxdffdfd, thf fxdfss rows brf
     * silfntly droppfd.
     *
     * @pbrbm mbx bn <dodf>int</dodf> indidbting thf durrfnt mbximum numbfr
     *     of rows; zfro mfbns thbt thfrf is no limit
     * @throws SQLExdfption if bn frror oddurs intfrnblly sftting thf
     *     mbximum limit on thf numbfr of rows thbt b JDBC <dodf>RowSft</dodf> objfdt
     *     dbn dontbin; or if <i>mbx</i> is lfss thbn <dodf>0</dodf>; or
     *     if <i>mbx</i> is lfss thbn thf <dodf>fftdhSizf</dodf> of thf
     *     <dodf>RowSft</dodf>
     */
    publid void sftMbxRows(int mbx) throws SQLExdfption {
        if (mbx < 0) {
            throw nfw SQLExdfption("Invblid mbx row sizf sft. Cbnnot bf of " +
                "vbluf: " + mbx);
        } flsf if (mbx < this.gftFftdhSizf()) {
            throw nfw SQLExdfption("Invblid mbx row sizf sft. Cbnnot bf lfss " +
                "thbn thf fftdhSizf.");
        }
        this.mbxRows = mbx;
    }

    /**
     * Sfts to thf givfn <dodf>boolfbn</dodf> whfthfr or not thf drivfr will
     * sdbn for fsdbpf syntbx bnd do fsdbpf substitution bfforf sfnding SQL
     * stbtfmfnts to thf dbtbbbsf. Thf dffbult is for thf drivfr to do fsdbpf
     * prodfssing.
     * <P>
     * Notf: Sindf <dodf>PrfpbrfdStbtfmfnt</dodf> objfdts hbvf usublly bffn
     * pbrsfd prior to mbking this dbll, disbbling fsdbpf prodfssing for
     * prfpbrfd stbtfmfnts will likfly hbvf no ffffdt.
     *
     * @pbrbm fnbblf <dodf>truf</dodf> to fnbblf fsdbpf prodfssing;
     *     <dodf>fblsf</dodf> to disbblf it
     * @throws SQLExdfption if bn frror oddurs sftting thf undfrlying JDBC
     * tfdhnology-fnbblfd drivfr to prodfss thf fsdbpf syntbx
     */
    publid void sftEsdbpfProdfssing(boolfbn fnbblf) throws SQLExdfption {
        fsdbpfProdfssing = fnbblf;
    }

    /**
     * Rftrifvfs thf mbximum numbfr of sfdonds thf drivfr will wbit for b
     * qufry to fxfdutf. If thf limit is fxdffdfd, bn <dodf>SQLExdfption</dodf>
     * is thrown.
     *
     * @rfturn thf durrfnt qufry timfout limit in sfdonds; zfro mfbns thbt
     *     thfrf is no limit
     * @throws SQLExdfption if bn frror oddurs in dftfrmining thf qufry
     *     timf-out vbluf
     */
    publid int gftQufryTimfout() throws SQLExdfption {
        rfturn qufryTimfout;
    }

    /**
     * Sfts to thf givfn numbfr thf mbximum numbfr of sfdonds thf drivfr will
     * wbit for b qufry to fxfdutf. If thf limit is fxdffdfd, bn
     * <dodf>SQLExdfption</dodf> is thrown.
     *
     * @pbrbm sfdonds thf nfw qufry timf-out limit in sfdonds; zfro mfbns thbt
     *     thfrf is no limit; must not bf lfss thbn zfro
     * @throws SQLExdfption if bn frror oddurs sftting thf qufry
     *     timf-out or if thf qufry timf-out vbluf is lfss thbn 0
     */
    publid void sftQufryTimfout(int sfdonds) throws SQLExdfption {
        if (sfdonds < 0) {
            throw nfw SQLExdfption("Invblid qufry timfout vbluf sft. Cbnnot bf " +
            "of vbluf: " + sfdonds);
        }
        this.qufryTimfout = sfdonds;
    }

    /**
     * Rftrifvfs b <dodf>boolfbn</dodf> indidbting whfthfr rows mbrkfd
     * for dflftion bppfbr in thf sft of durrfnt rows.
     * Thf dffbult vbluf is <dodf>fblsf</dodf>.
     * <P>
     * Notf: Allowing dflftfd rows to rfmbin visiblf domplidbtfs thf bfhbvior
     * of somf of thf mfthods.  Howfvfr, most <dodf>RowSft</dodf> objfdt usfrs
     * dbn simply ignorf this fxtrb dftbil bfdbusf only sophistidbtfd
     * bpplidbtions will likfly wbnt to tbkf bdvbntbgf of this ffbturf.
     *
     * @rfturn <dodf>truf</dodf> if dflftfd rows brf visiblf;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if bn frror oddurs dftfrmining if dflftfd rows
     * brf visiblf or not
     * @sff #sftShowDflftfd
     */
    publid boolfbn gftShowDflftfd() throws SQLExdfption {
        rfturn showDflftfd;
    }

    /**
     * Sfts thf propfrty <dodf>showDflftfd</dodf> to thf givfn
     * <dodf>boolfbn</dodf> vbluf, whidh dftfrminfs whfthfr
     * rows mbrkfd for dflftion bppfbr in thf sft of durrfnt rows.
     *
     * @pbrbm vbluf <dodf>truf</dodf> if dflftfd rows should bf shown;
     *     <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if bn frror oddurs sftting whfthfr dflftfd
     *     rows brf visiblf or not
     * @sff #gftShowDflftfd
     */
    publid void sftShowDflftfd(boolfbn vbluf) throws SQLExdfption {
        showDflftfd = vbluf;
    }

    /**
     * Asdfrtbins whfthfr fsdbpf prodfssing is fnbblfd for this
     * <dodf>RowSft</dodf> objfdt.
     *
     * @rfturn <dodf>truf</dodf> if fsdbpf prodfssing is turnfd on;
     *         <dodf>fblsf</dodf> othfrwisf
     * @throws SQLExdfption if bn frror oddurs dftfrmining if fsdbpf
     *     prodfssing is fnbblfd or not or if thf intfrnbl fsdbpf
     *     prodfssing triggfr hbs not bffn fnbblfd
     */
    publid boolfbn gftEsdbpfProdfssing() throws SQLExdfption {
        rfturn fsdbpfProdfssing;
    }

    /**
     * Givfs thf drivfr b pfrformbndf hint bs to thf dirfdtion in
     * whidh thf rows in this <dodf>RowSft</dodf> objfdt will bf
     * prodfssfd.  Thf drivfr mby ignorf this hint.
     * <P>
     * A <dodf>RowSft</dodf> objfdt inhfrits thf dffbult propfrtifs of thf
     * <dodf>RfsultSft</dodf> objfdt from whidh it got its dbtb.  Thbt
     * <dodf>RfsultSft</dodf> objfdt's dffbult fftdh dirfdtion is sft by
     * thf <dodf>Stbtfmfnt</dodf> objfdt thbt drfbtfd it.
     * <P>
     * This mfthod bpplifs to b <dodf>RowSft</dodf> objfdt only whilf it is
     * donnfdtfd to b dbtbbbsf using b JDBC drivfr.
     * <p>
     * A <dodf>RowSft</dodf> objfdt mby usf this mfthod bt bny timf to dhbngf
     * its sftting for thf fftdh dirfdtion.
     *
     * @pbrbm dirfdtion onf of <dodf>RfsultSft.FETCH_FORWARD</dodf>,
     *                  <dodf>RfsultSft.FETCH_REVERSE</dodf>, or
     *                  <dodf>RfsultSft.FETCH_UNKNOWN</dodf>
     * @throws SQLExdfption if (1) thf <dodf>RowSft</dodf> typf is
     *     <dodf>TYPE_FORWARD_ONLY</dodf> bnd thf givfn fftdh dirfdtion is not
     *     <dodf>FETCH_FORWARD</dodf> or (2) thf givfn fftdh dirfdtion is not
     *     onf of thf following:
     *        RfsultSft.FETCH_FORWARD,
     *        RfsultSft.FETCH_REVERSE, or
     *        RfsultSft.FETCH_UNKNOWN
     * @sff #gftFftdhDirfdtion
     */
    publid void sftFftdhDirfdtion(int dirfdtion) throws SQLExdfption {
        // Chbngfd thf dondition dhfdking to thf bflow bs thfrf wfrf two
        // donditions thbt hbd to bf dhfdkfd
        // 1. RowSft is TYPE_FORWARD_ONLY bnd dirfdtion is not FETCH_FORWARD
        // 2. Dirfdtion is not onf of thf vblid vblufs

        if (((gftTypf() == RfsultSft.TYPE_FORWARD_ONLY) && (dirfdtion != RfsultSft.FETCH_FORWARD)) ||
            ((dirfdtion != RfsultSft.FETCH_FORWARD) &&
            (dirfdtion != RfsultSft.FETCH_REVERSE) &&
            (dirfdtion != RfsultSft.FETCH_UNKNOWN))) {
            throw nfw SQLExdfption("Invblid Fftdh Dirfdtion");
        }
        fftdhDir = dirfdtion;
    }

    /**
     * Rftrifvfs this <dodf>RowSft</dodf> objfdt's durrfnt sftting for thf
     * fftdh dirfdtion. Thf dffbult typf is <dodf>RfsultSft.FETCH_FORWARD</dodf>
     *
     * @rfturn onf of <dodf>RfsultSft.FETCH_FORWARD</dodf>,
     *                  <dodf>RfsultSft.FETCH_REVERSE</dodf>, or
     *                  <dodf>RfsultSft.FETCH_UNKNOWN</dodf>
     * @throws SQLExdfption if bn frror oddurs in dftfrmining thf
     *     durrfnt fftdh dirfdtion for fftdhing rows
     * @sff #sftFftdhDirfdtion
     */
    publid int gftFftdhDirfdtion() throws SQLExdfption {

        //Addfd thf following dodf to throw b
        //SQL Exdfption if thf fftdhDir is not
        //sft propfrly.Bug id:4914155

        // This dhfdking is not nfdfssbry!

        /*
         if((fftdhDir != RfsultSft.FETCH_FORWARD) &&
           (fftdhDir != RfsultSft.FETCH_REVERSE) &&
           (fftdhDir != RfsultSft.FETCH_UNKNOWN)) {
            throw nfw SQLExdfption("Fftdh Dirfdtion Invblid");
         }
         */
        rfturn (fftdhDir);
    }

    /**
     * Sfts thf fftdh sizf for this <dodf>RowSft</dodf> objfdt to thf givfn numbfr of
     * rows.  Thf fftdh sizf givfs b JDBC tfdhnology-fnbblfd drivfr ("JDBC drivfr")
     * b hint bs to thf
     * numbfr of rows thbt should bf fftdhfd from thf dbtbbbsf whfn morf rows
     * brf nffdfd for this <dodf>RowSft</dodf> objfdt. If thf fftdh sizf spfdififd
     * is zfro, thf drivfr ignorfs thf vbluf bnd is frff to mbkf its own bfst gufss
     * bs to whbt thf fftdh sizf should bf.
     * <P>
     * A <dodf>RowSft</dodf> objfdt inhfrits thf dffbult propfrtifs of thf
     * <dodf>RfsultSft</dodf> objfdt from whidh it got its dbtb.  Thbt
     * <dodf>RfsultSft</dodf> objfdt's dffbult fftdh sizf is sft by
     * thf <dodf>Stbtfmfnt</dodf> objfdt thbt drfbtfd it.
     * <P>
     * This mfthod bpplifs to b <dodf>RowSft</dodf> objfdt only whilf it is
     * donnfdtfd to b dbtbbbsf using b JDBC drivfr.
     * For donnfdtfd <dodf>RowSft</dodf> implfmfntbtions sudh bs
     * <dodf>JdbdRowSft</dodf>, this mfthod hbs b dirfdt bnd immfdibtf ffffdt
     * on thf undfrlying JDBC drivfr.
     * <P>
     * A <dodf>RowSft</dodf> objfdt mby usf this mfthod bt bny timf to dhbngf
     * its sftting for thf fftdh sizf.
     * <p>
     * For <dodf>RowSft</dodf> implfmfntbtions sudh bs
     * <dodf>CbdhfdRowSft</dodf>, whidh opfrbtf in b disdonnfdtfd fnvironmfnt,
     * thf <dodf>SyndProvidfr</dodf> objfdt bfing usfd
     * mby lfvfrbgf thf fftdh sizf to poll thf dbtb sourdf bnd
     * rftrifvf b numbfr of rows thbt do not fxdffd thf fftdh sizf bnd thbt mby
     * form b subsft of thf bdtubl rows rfturnfd by thf originbl qufry. This is
     * bn implfmfntbtion vbribndf dftfrminfd by thf spfdifid <dodf>SyndProvidfr</dodf>
     * objfdt fmployfd by thf disdonnfdtfd <dodf>RowSft</dodf> objfdt.
     *
     * @pbrbm rows thf numbfr of rows to fftdh; <dodf>0</dodf> to lft thf
     *        drivfr dfdidf whbt thf bfst fftdh sizf is; must not bf lfss
     *        thbn <dodf>0</dodf> or morf thbn thf mbximum numbfr of rows
     *        bllowfd for this <dodf>RowSft</dodf> objfdt (thf numbfr rfturnfd
     *        by b dbll to thf mfthod {@link #gftMbxRows})
     * @throws SQLExdfption if thf spfdififd fftdh sizf is lfss thbn <dodf>0</dodf>
     *        or morf thbn thf limit for thf mbximum numbfr of rows
     * @sff #gftFftdhSizf
     */
    publid void sftFftdhSizf(int rows) throws SQLExdfption {
        //Addfd this dhfdking bs mbxRows dbn bf 0 whfn this fundtion is dbllfd
        //mbxRows = 0 mfbns rowsft dbn hold bny numbfr of rows, os this dhfdking
        // is nffdfd to tbkf dbrf of this dondition.
        if (gftMbxRows() == 0 && rows >= 0)  {
            fftdhSizf = rows;
            rfturn;
        }
        if ((rows < 0) || (rows > gftMbxRows())) {
            throw nfw SQLExdfption("Invblid fftdh sizf sft. Cbnnot bf of " +
            "vbluf: " + rows);
        }
        fftdhSizf = rows;
    }

    /**
     * Rfturns thf fftdh sizf for this <dodf>RowSft</dodf> objfdt. Thf dffbult
     * vbluf is zfro.
     *
     * @rfturn thf numbfr of rows suggfstfd bs thf fftdh sizf whfn this <dodf>RowSft</dodf> objfdt
     *     nffds morf rows from thf dbtbbbsf
     * @throws SQLExdfption if bn frror oddurs dftfrmining thf numbfr of rows in thf
     *     durrfnt fftdh sizf
     * @sff #sftFftdhSizf
     */
    publid int gftFftdhSizf() throws SQLExdfption {
        rfturn fftdhSizf;
    }

    /**
     * Rfturns thf dondurrfndy for this <dodf>RowSft</dodf> objfdt.
     * Thf dffbult is <dodf>CONCUR_UPDATABLE</dodf> for both donnfdtfd bnd
     * disdonnfdtfd <dodf>RowSft</dodf> objfdts.
     * <P>
     * An bpplidbtion dbn dbll thf mfthod <dodf>sftCondurrfndy</dodf> bt bny timf
     * to dhbngf b <dodf>RowSft</dodf> objfdt's dondurrfndy.
     *
     * @rfturn thf dondurrfndy typf for this <dodf>RowSft</dodf>
     *     objfdt, whidh must bf onf of thf following:
     *     <dodf>RfsultSft.CONCUR_READ_ONLY</dodf> or
     *     <dodf>RfsultSft.CONCUR_UPDATABLE</dodf>
     * @throws SQLExdfption if bn frror oddurs gftting thf dondurrfndy
     *     of this <dodf>RowSft</dodf> objfdt
     * @sff #sftCondurrfndy
     * @sff #isRfbdOnly
     */
    publid int gftCondurrfndy() throws SQLExdfption {
        rfturn dondurrfndy;
    }

    //-----------------------------------------------------------------------
    // Pbrbmftfrs
    //-----------------------------------------------------------------------

    /**
     * Chfdks thf givfn indfx to sff whfthfr it is lfss thbn <dodf>1</dodf> bnd
     * throws bn <dodf>SQLExdfption</dodf> objfdt if it is.
     * <P>
     * This mfthod is dbllfd by mbny mfthods intfrnblly; it is nfvfr
     * dbllfd by bn bpplidbtion dirfdtly.
     *
     * @pbrbm idx bn <dodf>int</dodf> indidbting whidh pbrbmftfr is to bf
     *     dhfdkfd; thf first pbrbmftfr is <dodf>1</dodf>
     * @throws SQLExdfption if thf pbrbmftfr is lfss thbn <dodf>1</dodf>
     */
    privbtf void dhfdkPbrbmIndfx(int idx) throws SQLExdfption {
        if ((idx < 1)) {
            throw nfw SQLExdfption("Invblid Pbrbmftfr Indfx");
        }
    }

    //---------------------------------------------------------------------
    // sfttfr mfthods for sftting thf pbrbmftfrs in b <dodf>RowSft</dodf> objfdt's dommbnd
    //---------------------------------------------------------------------

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to SQL <dodf>NULL</dodf>.
     * Notf thbt thf pbrbmftfr's SQL typf must bf spfdififd using onf of thf
         * typf dodfs dffinfd in <dodf>jbvb.sql.Typfs</dodf>.  This SQL typf is
     * spfdififd in thf sfdond pbrbmftfr.
     * <p>
     * Notf thbt thf sfdond pbrbmftfr tflls thf DBMS thf dbtb typf of thf vbluf bfing
     * sft to <dodf>NULL</dodf>. Somf DBMSs rfquirf this informbtion, so it is rfquirfd
     * in ordfr to mbkf dodf morf portbblf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr this vfrsion of
     * <dodf>sftNull</dodf>
     * hbs bffn dbllfd will rfturn bn <dodf>Objfdt</dodf> brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  In thbt brrby, thf flfmfnt thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is <dodf>null</dodf>.
     * Thf sfdond flfmfnt is thf vbluf sft for <i>sqlTypf</i>.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf sfdond plbdfholdfr pbrbmftfr is bfing sft to
     * <dodf>null</dodf>, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm sqlTypf bn <dodf>int</dodf> thbt is onf of thf SQL typf dodfs
     *        dffinfd in thf dlbss {@link jbvb.sql.Typfs}. If b non-stbndbrd
     *        <i>sqlTypf</i> is supplifd, this mfthod will not throw b
     *        <dodf>SQLExdfption</dodf>. This bllows implidit support for
     *        non-stbndbrd SQL typfs.
     * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs or thf givfn
     *        pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftNull(int pbrbmftfrIndfx, int sqlTypf) throws SQLExdfption {
        Objfdt nullVbl[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        nullVbl = nfw Objfdt[2];
        nullVbl[0] = null;
        nullVbl[1] = Intfgfr.vblufOf(sqlTypf);

       if (pbrbms == null){
            throw nfw SQLExdfption("Sft initPbrbms() bfforf sftNull");
       }

        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), nullVbl);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to SQL <dodf>NULL</dodf>.
     *
     * Although this vfrsion of thf  mfthod <dodf>sftNull</dodf> is intfndfd
     * for usfr-dffinfd
     * bnd <dodf>REF</dodf> pbrbmftfrs, this mfthod mby bf usfd to sft b null
     * pbrbmftfr for bny JDBC typf. Thf following brf usfr-dffinfd typfs:
     * <dodf>STRUCT</dodf>, <dodf>DISTINCT</dodf>, bnd <dodf>JAVA_OBJECT</dodf>,
     * bnd nbmfd brrby typfs.
     *
     * <P><B>Notf:</B> To bf portbblf, bpplidbtions must givf thf
     * SQL typf dodf bnd thf fully qublififd SQL typf nbmf whfn spfdifying
     * b <dodf>NULL</dodf> usfr-dffinfd or <dodf>REF</dodf> pbrbmftfr.
     * In thf dbsf of b usfr-dffinfd typf, thf nbmf is thf typf nbmf of
     * thf pbrbmftfr itsflf.  For b <dodf>REF</dodf> pbrbmftfr, thf nbmf is
     * thf typf nbmf of thf rfffrfndfd typf.  If b JDBC tfdhnology-fnbblfd
     * drivfr dofs not nffd thf typf dodf or typf nbmf informbtion,
     * it mby ignorf it.
     * <P>
     * If thf pbrbmftfr dofs not hbvf b usfr-dffinfd or <dodf>REF</dodf> typf,
     * thf givfn <dodf>typfNbmf</dodf> pbrbmftfr is ignorfd.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr this vfrsion of
     * <dodf>sftNull</dodf>
     * hbs bffn dbllfd will rfturn bn <dodf>Objfdt</dodf> brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  In thbt brrby, thf flfmfnt thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is <dodf>null</dodf>.
     * Thf sfdond flfmfnt is thf vbluf sft for <i>sqlTypf</i>, bnd thf third
     * flfmfnt is thf vbluf sft for <i>typfNbmf</i>.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf sfdond plbdfholdfr pbrbmftfr is bfing sft to
     * <dodf>null</dodf>, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm sqlTypf b vbluf from <dodf>jbvb.sql.Typfs</dodf>
     * @pbrbm typfNbmf thf fully qublififd nbmf of bn SQL usfr-dffinfd typf,
     *                 whidh is ignorfd if thf pbrbmftfr is not b usfr-dffinfd
     *                 typf or <dodf>REF</dodf> vbluf
     * @throws SQLExdfption if bn frror oddurs or thf givfn pbrbmftfr indfx
     *            is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftNull(int pbrbmftfrIndfx, int sqlTypf, String typfNbmf)
        throws SQLExdfption {

        Objfdt nullVbl[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        nullVbl = nfw Objfdt[3];
        nullVbl[0] = null;
        nullVbl[1] = Intfgfr.vblufOf(sqlTypf);
        nullVbl[2] = typfNbmf;

       if(pbrbms == null){
            throw nfw SQLExdfption("Sft initPbrbms() bfforf sftNull");
       }

        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), nullVbl);
    }


    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>boolfbn</dodf> in thf
     * Jbvb progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>BIT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf>, <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <p>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftBoolfbn(int pbrbmftfrIndfx, boolfbn x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

       if(pbrbms == null){
            throw nfw SQLExdfption("Sft initPbrbms() bfforf sftNull");
       }

        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), Boolfbn.vblufOf(x));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>bytf</dodf> in thf Jbvb
     * progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>TINYINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <p>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftBytf(int pbrbmftfrIndfx, bytf x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

       if(pbrbms == null){
            throw nfw SQLExdfption("Sft initPbrbms() bfforf sftBytf");
       }

        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), Bytf.vblufOf(x));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>short</dodf> in thf
     * Jbvb progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>SMALLINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <p>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftShort(int pbrbmftfrIndfx, short x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftShort");
        }

        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), Short.vblufOf(x));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to bn <dodf>int</dodf> in thf Jbvb
     * progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>INTEGER</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftInt(int pbrbmftfrIndfx, int x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftInt");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), Intfgfr.vblufOf(x));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>long</dodf> in thf Jbvb
     * progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>BIGINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftLong(int pbrbmftfrIndfx, long x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftLong");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), Long.vblufOf(x));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>flobt</dodf> in thf
     * Jbvb progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>FLOAT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftFlobt(int pbrbmftfrIndfx, flobt x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftFlobt");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), Flobt.vblufOf(x));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>doublf</dodf> in thf
     * Jbvb progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>DOUBLE</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftDoublf(int pbrbmftfrIndfx, doublf x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftDoublf");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), Doublf.vblufOf(x));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn
     * <dodf>jbvb.lbng.BigDfdimbl</dodf> vbluf.  Thf drivfr donvfrts this to
     * bn SQL <dodf>NUMERIC</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * Notf: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftBigDfdimbl(int pbrbmftfrIndfx, jbvb.mbth.BigDfdimbl x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftBigDfdimbl");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), x);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf>
     * vbluf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf
     * (dfpfnding on thf brgumfnt's sizf rflbtivf to thf drivfr's limits
     * on <dodf>VARCHAR</dodf> vblufs) whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <p>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftString(int pbrbmftfrIndfx, String x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftString");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), x);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn brrby of bytfs.
     * Thf drivfr donvfrts this to bn SQL
     * <dodf>VARBINARY</dodf> or <dodf>LONGVARBINARY</dodf> vbluf
     * (dfpfnding on thf brgumfnt's sizf rflbtivf to thf drivfr's limits
     * on <dodf>VARBINARY</dodf> vblufs) whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <p>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftBytfs(int pbrbmftfrIndfx, bytf x[]) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftBytfs");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), x);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Dbtf</dodf>
     * vbluf. Thf drivfr donvfrts this to bn SQL
     * <dodf>DATE</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr this vfrsion
     * of <dodf>sftDbtf</dodf>
     * hbs bffn dbllfd will rfturn bn brrby with thf vbluf to bf sft for
     * plbdfholdfr pbrbmftfr numbfr <i>pbrbmftfrIndfx</i> bfing thf <dodf>Dbtf</dodf>
     * objfdt supplifd bs thf sfdond pbrbmftfr.
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftDbtf(int pbrbmftfrIndfx, jbvb.sql.Dbtf x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftDbtf");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), x);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timf</dodf>
     * vbluf.  Thf drivfr donvfrts this to bn SQL <dodf>TIME</dodf> vbluf
     * whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr this vfrsion
     * of thf mfthod <dodf>sftTimf</dodf>
     * hbs bffn dbllfd will rfturn bn brrby of thf pbrbmftfrs thbt hbvf bffn sft.
     * Thf pbrbmftfr to bf sft for pbrbmftfr plbdfholdfr numbfr <i>pbrbmftfrIndfx</i>
     * will bf thf <dodf>Timf</dodf> objfdt thbt wbs sft bs thf sfdond pbrbmftfr
     * to this mfthod.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x b <dodf>jbvb.sql.Timf</dodf> objfdt, whidh is to bf sft bs thf vbluf
     *              for plbdfholdfr pbrbmftfr <i>pbrbmftfrIndfx</i>
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftTimf(int pbrbmftfrIndfx, jbvb.sql.Timf x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftTimf");
        }

        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), x);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn
     * <dodf>jbvb.sql.Timfstbmp</dodf> vbluf.
     * Thf drivfr donvfrts this to bn SQL <dodf>TIMESTAMP</dodf> vbluf whfn it
     * sfnds it to thf dbtbbbsf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr this vfrsion of
     * <dodf>sftTimfstbmp</dodf>
     * hbs bffn dbllfd will rfturn bn brrby with thf vbluf for pbrbmftfr plbdfholdfr
     * numbfr <i>pbrbmftfrIndfx</i> bfing thf <dodf>Timfstbmp</dodf> objfdt thbt wbs
     * supplifd bs thf sfdond pbrbmftfr to this mfthod.
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x b <dodf>jbvb.sql.Timfstbmp</dodf> objfdt
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftTimfstbmp(int pbrbmftfrIndfx, jbvb.sql.Timfstbmp x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftTimfstbmp");
        }

        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), x);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt,
     * whidh will hbvf thf spfdififd numbfr of bytfs.
     * Thf dontfnts of thf strfbm will bf rfbd bnd sfnt to thf dbtbbbsf.
     * This mfthod throws bn <dodf>SQLExdfption</dodf> objfdt if thf numbfr of bytfs
     * rfbd bnd sfnt to thf dbtbbbsf is not fqubl to <i>lfngth</i>.
     * <P>
     * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
     * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt. A JDBC tfdhnology-fnbblfd
     * drivfr will rfbd thf dbtb from thf strfbm bs nffdfd until it rfbdhfs
     * fnd-of-filf. Thf drivfr will do bny nfdfssbry donvfrsion from ASCII to
     * thf dbtbbbsf <dodf>CHAR</dodf> formbt.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn bf fithfr b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * Notf: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr <dodf>sftAsdiiStrfbm</dodf>
     * hbs bffn dbllfd will rfturn bn brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  Thf flfmfnt in thf brrby thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is thf givfn <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * Thf sfdond flfmfnt is thf vbluf sft for <i>lfngth</i>.
     * Thf third flfmfnt is bn intfrnbl <dodf>BbsfRowSft</dodf> donstbnt
     * spfdifying thbt thf strfbm pbssfd to this mfthod is bn ASCII strfbm.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf input strfbm bfing sft is thf vbluf for thf sfdond
     * plbdfholdfr pbrbmftfr, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf Jbvb input strfbm thbt dontbins thf ASCII pbrbmftfr vbluf
     * @pbrbm lfngth thf numbfr of bytfs in thf strfbm. This is thf numbfr of bytfs
     *       thf drivfr will sfnd to thf DBMS; lfngths of 0 or lfss brf
     *       brf undffinfd but will dbusf bn invblid lfngth fxdfption to bf
     *       thrown in thf undfrlying JDBC drivfr.
     * @throws SQLExdfption if bn frror oddurs, thf pbrbmftfr indfx is out of bounds,
     *       or whfn donnfdtfd to b dbtb sourdf, thf numbfr of bytfs thf drivfr rfbds
     *       bnd sfnds to thf dbtbbbsf is not fqubl to thf numbfr of bytfs spfdififd
     *       in <i>lfngth</i>
     * @sff #gftPbrbms
     */
    publid void sftAsdiiStrfbm(int pbrbmftfrIndfx, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        Objfdt bsdiiStrfbm[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        bsdiiStrfbm = nfw Objfdt[3];
        bsdiiStrfbm[0] = x;
        bsdiiStrfbm[1] = Intfgfr.vblufOf(lfngth);
        bsdiiStrfbm[2] = Intfgfr.vblufOf(ASCII_STREAM_PARAM);

        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftAsdiiStrfbm");
        }

        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), bsdiiStrfbm);
    }

  /**
   * Sfts thf dfsignbtfd pbrbmftfr in this <dodf>RowSft</dodf> objfdt's dommbnd
   * to thf givfn input strfbm.
   * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
   * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
   * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
   * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
   * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
   *
   * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
   * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
   * stbndbrd intfrfbdf.
   * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
   * it might bf morf fffidifnt to usf b vfrsion of
   * <dodf>sftAsdiiStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
   *
   * @pbrbm pbrbmftfrIndfx thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm x thf Jbvb input strfbm thbt dontbins thf ASCII pbrbmftfr vbluf
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.6
   */
  publid void sftAsdiiStrfbm(int pbrbmftfrIndfx, jbvb.io.InputStrfbm x)
                      throws SQLExdfption {
      throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
  }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.io.InputStrfbm</dodf>
     * objfdt, whidh will hbvf thf spfdififd numbfr of bytfs.
     * Thf dontfnts of thf strfbm will bf rfbd bnd sfnt to thf dbtbbbsf.
     * This mfthod throws bn <dodf>SQLExdfption</dodf> objfdt if thf numbfr of bytfs
     * rfbd bnd sfnt to thf dbtbbbsf is not fqubl to <i>lfngth</i>.
     * <P>
     * Whfn b vfry lbrgf binbry vbluf is input to b
     * <dodf>LONGVARBINARY</dodf> pbrbmftfr, it mby bf morf prbdtidbl
     * to sfnd it vib b <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * A JDBC tfdhnology-fnbblfd drivfr will rfbd thf dbtb from thf
     * strfbm bs nffdfd until it rfbdhfs fnd-of-filf.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn bf fithfr b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     *<P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr <dodf>sftBinbryStrfbm</dodf>
     * hbs bffn dbllfd will rfturn bn brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  In thbt brrby, thf flfmfnt thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is thf givfn <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * Thf sfdond flfmfnt is thf vbluf sft for <i>lfngth</i>.
     * Thf third flfmfnt is bn intfrnbl <dodf>BbsfRowSft</dodf> donstbnt
     * spfdifying thbt thf strfbm pbssfd to this mfthod is b binbry strfbm.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf input strfbm bfing sft is thf vbluf for thf sfdond
     * plbdfholdfr pbrbmftfr, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf input strfbm thbt dontbins thf binbry vbluf to bf sft
     * @pbrbm lfngth thf numbfr of bytfs in thf strfbm; lfngths of 0 or lfss brf
     *         brf undffinfd but will dbusf bn invblid lfngth fxdfption to bf
     *         thrown in thf undfrlying JDBC drivfr.
     * @throws SQLExdfption if bn frror oddurs, thf pbrbmftfr indfx is out of bounds,
     *         or whfn donnfdtfd to b dbtb sourdf, thf numbfr of bytfs thf drivfr
     *         rfbds bnd sfnds to thf dbtbbbsf is not fqubl to thf numbfr of bytfs
     *         spfdififd in <i>lfngth</i>
     * @sff #gftPbrbms
     */
    publid void sftBinbryStrfbm(int pbrbmftfrIndfx, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        Objfdt binbryStrfbm[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        binbryStrfbm = nfw Objfdt[3];
        binbryStrfbm[0] = x;
        binbryStrfbm[1] = Intfgfr.vblufOf(lfngth);
        binbryStrfbm[2] = Intfgfr.vblufOf(BINARY_STREAM_PARAM);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftBinbryStrfbm");
        }

        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), binbryStrfbm);
    }


   /**
   * Sfts thf dfsignbtfd pbrbmftfr in this <dodf>RowSft</dodf> objfdt's dommbnd
   * to thf givfn input strfbm.
   * Whfn b vfry lbrgf binbry vbluf is input to b <dodf>LONGVARBINARY</dodf>
   * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
   * <dodf>jbvb.io.InputStrfbm</dodf> objfdt. Thf dbtb will bf rfbd from thf
   * strfbm bs nffdfd until fnd-of-filf is rfbdhfd.
   *
   * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
   * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
   * stbndbrd intfrfbdf.
   * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
   * it might bf morf fffidifnt to usf b vfrsion of
   * <dodf>sftBinbryStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
   *
   * @pbrbm pbrbmftfrIndfx thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm x thf jbvb input strfbm whidh dontbins thf binbry pbrbmftfr vbluf
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.6
   */
  publid void sftBinbryStrfbm(int pbrbmftfrIndfx, jbvb.io.InputStrfbm x)
                              throws SQLExdfption {
      throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
  }


    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn
     * <dodf>jbvb.io.InputStrfbm</dodf> objfdt, whidh will hbvf thf spfdififd
     * numbfr of bytfs. Thf dontfnts of thf strfbm will bf rfbd bnd sfnt
     * to thf dbtbbbsf.
     * This mfthod throws bn <dodf>SQLExdfption</dodf> if thf numbfr of bytfs
     * rfbd bnd sfnt to thf dbtbbbsf is not fqubl to <i>lfngth</i>.
     * <P>
     * Whfn b vfry lbrgf Unidodf vbluf is input to b
     * <dodf>LONGVARCHAR</dodf> pbrbmftfr, it mby bf morf prbdtidbl
     * to sfnd it vib b <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * A JDBC tfdhnology-fnbblfd drivfr will rfbd thf dbtb from thf
     * strfbm bs nffdfd, until it rfbdhfs fnd-of-filf.
     * Thf drivfr will do bny nfdfssbry donvfrsion from Unidodf to thf
     * dbtbbbsf <dodf>CHAR</dodf> formbt.
     * Thf bytf formbt of thf Unidodf strfbm must bf Jbvb UTF-8, bs
     * dffinfd in thf Jbvb Virtubl Mbdhinf Spfdifidbtion.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn bf fithfr b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <P>
     * This mfthod is dfprfdbtfd; thf mfthod <dodf>gftChbrbdtfrStrfbm</dodf>
     * should bf usfd in its plbdf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr <dodf>sftUnidodfStrfbm</dodf>
     * hbs bffn dbllfd will rfturn bn brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  In thbt brrby, thf flfmfnt thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is thf givfn <dodf>jbvb.io.InputStrfbm</dodf> objfdt.
     * Thf sfdond flfmfnt is thf vbluf sft for <i>lfngth</i>.
     * Thf third flfmfnt is bn intfrnbl <dodf>BbsfRowSft</dodf> donstbnt
     * spfdifying thbt thf strfbm pbssfd to this mfthod is b Unidodf strfbm.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf input strfbm bfing sft is thf vbluf for thf sfdond
     * plbdfholdfr pbrbmftfr, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf <dodf>jbvb.io.InputStrfbm</dodf> objfdt thbt dontbins thf
     *          UNICODE pbrbmftfr vbluf
     * @pbrbm lfngth thf numbfr of bytfs in thf input strfbm
     * @throws SQLExdfption if bn frror oddurs, thf pbrbmftfr indfx is out of bounds,
     *         or thf numbfr of bytfs thf drivfr rfbds bnd sfnds to thf dbtbbbsf is
     *         not fqubl to thf numbfr of bytfs spfdififd in <i>lfngth</i>
     * @dfprfdbtfd gftChbrbdtfrStrfbm should bf usfd in its plbdf
     * @sff #gftPbrbms
     */
    @Dfprfdbtfd
    publid void sftUnidodfStrfbm(int pbrbmftfrIndfx, jbvb.io.InputStrfbm x, int lfngth) throws SQLExdfption {
        Objfdt unidodfStrfbm[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        unidodfStrfbm = nfw Objfdt[3];
        unidodfStrfbm[0] = x;
        unidodfStrfbm[1] = Intfgfr.vblufOf(lfngth);
        unidodfStrfbm[2] = Intfgfr.vblufOf(UNICODE_STREAM_PARAM);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftUnidodfStrfbm");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), unidodfStrfbm);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.io.Rfbdfr</dodf>
     * objfdt, whidh will hbvf thf spfdififd numbfr of dhbrbdtfrs. Thf
     * dontfnts of thf rfbdfr will bf rfbd bnd sfnt to thf dbtbbbsf.
     * This mfthod throws bn <dodf>SQLExdfption</dodf> if thf numbfr of bytfs
     * rfbd bnd sfnt to thf dbtbbbsf is not fqubl to <i>lfngth</i>.
     * <P>
     * Whfn b vfry lbrgf Unidodf vbluf is input to b
     * <dodf>LONGVARCHAR</dodf> pbrbmftfr, it mby bf morf prbdtidbl
     * to sfnd it vib b <dodf>Rfbdfr</dodf> objfdt.
     * A JDBC tfdhnology-fnbblfd drivfr will rfbd thf dbtb from thf
     * strfbm bs nffdfd until it rfbdhfs fnd-of-filf.
     * Thf drivfr will do bny nfdfssbry donvfrsion from Unidodf to thf
     * dbtbbbsf <dodf>CHAR</dodf> formbt.
     * Thf bytf formbt of thf Unidodf strfbm must bf Jbvb UTF-8, bs
     * dffinfd in thf Jbvb Virtubl Mbdhinf Spfdifidbtion.
     *
     * <P><B>Notf:</B> This strfbm objfdt dbn bf fithfr b stbndbrd
     * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
     * stbndbrd intfrfbdf.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr
     * <dodf>sftChbrbdtfrStrfbm</dodf>
     * hbs bffn dbllfd will rfturn bn brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  In thbt brrby, thf flfmfnt thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is thf givfn <dodf>jbvb.io.Rfbdfr</dodf> objfdt.
     * Thf sfdond flfmfnt is thf vbluf sft for <i>lfngth</i>.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf rfbdfr bfing sft is thf vbluf for thf sfdond
     * plbdfholdfr pbrbmftfr, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm rfbdfr thf <dodf>Rfbdfr</dodf> objfdt thbt dontbins thf
     *        Unidodf dbtb
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf strfbm; lfngths of 0 or
     *        lfss brf undffinfd but will dbusf bn invblid lfngth fxdfption to
     *        bf thrown in thf undfrlying JDBC drivfr.
     * @throws SQLExdfption if bn frror oddurs, thf pbrbmftfr indfx is out of bounds,
     *        or whfn donnfdtfd to b dbtb sourdf, thf numbfr of bytfs thf drivfr
     *        rfbds bnd sfnds to thf dbtbbbsf is not fqubl to thf numbfr of bytfs
     *        spfdififd in <i>lfngth</i>
     * @sff #gftPbrbms
     */
    publid void sftChbrbdtfrStrfbm(int pbrbmftfrIndfx, Rfbdfr rfbdfr, int lfngth) throws SQLExdfption {
        Objfdt dhbrStrfbm[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        dhbrStrfbm = nfw Objfdt[2];
        dhbrStrfbm[0] = rfbdfr;
        dhbrStrfbm[1] = Intfgfr.vblufOf(lfngth);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftChbrbdtfrStrfbm");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), dhbrStrfbm);
    }

   /**
   * Sfts thf dfsignbtfd pbrbmftfr in this <dodf>RowSft</dodf> objfdt's dommbnd
   * to thf givfn <dodf>Rfbdfr</dodf>
   * objfdt.
   * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
   * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
   * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
   * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
   * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
   *
   * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
   * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
   * stbndbrd intfrfbdf.
   * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
   * it might bf morf fffidifnt to usf b vfrsion of
   * <dodf>sftChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
   *
   * @pbrbm pbrbmftfrIndfx thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt dontbins thf
   *        Unidodf dbtb
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.6
   */
  publid void sftChbrbdtfrStrfbm(int pbrbmftfrIndfx,
                          jbvb.io.Rfbdfr rfbdfr) throws SQLExdfption {
      throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
  }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to bn <dodf>Objfdt</dodf> in thf Jbvb
     * progrbmming lbngubgf. Thf sfdond pbrbmftfr must bf bn
     * <dodf>Objfdt</dodf> typf.  For intfgrbl vblufs, thf
     * <dodf>jbvb.lbng</dodf> fquivblfnt
     * objfdts should bf usfd. For fxbmplf, usf thf dlbss <dodf>Intfgfr</dodf>
     * for bn <dodf>int</dodf>.
     * <P>
     * Thf drivfr donvfrts this objfdt to thf spfdififd
     * tbrgft SQL typf bfforf sfnding it to thf dbtbbbsf.
     * If thf objfdt hbs b dustom mbpping (is of b dlbss implfmfnting
     * <dodf>SQLDbtb</dodf>), thf drivfr should dbll thf mfthod
     * <dodf>SQLDbtb.writfSQL</dodf> to writf thf objfdt to thf SQL
     * dbtb strfbm. If, on thf othfr hbnd, thf objfdt is of b dlbss
     * implfmfnting <dodf>Rff</dodf>, <dodf>Blob</dodf>, <dodf>Clob</dodf>,
     * <dodf>Strudt</dodf>, or <dodf>Arrby</dodf>,
     * thf drivfr should pbss it to thf dbtbbbsf bs b vbluf of thf
     * dorrfsponding SQL typf.
     *
     * <p>Notf thbt this mfthod mby bf usfd to pbss dbtbbbsf-
     * spfdifid bbstrbdt dbtb typfs.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr this vfrsion of
     * <dodf>sftObjfdt</dodf>
     * hbs bffn dbllfd will rfturn bn brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  In thbt brrby, thf flfmfnt thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is thf givfn <dodf>Objfdt</dodf> instbndf, bnd thf
     * sfdond flfmfnt is thf vbluf sft for <i>tbrgftSqlTypf</i>.  Thf
     * third flfmfnt is thf vbluf sft for <i>sdblf</i>, whidh thf drivfr will
     * ignorf if thf typf of thf objfdt bfing sft is not
     * <dodf>jbvb.sql.Typfs.NUMERIC</dodf> or <dodf>jbvb.sql.Typfs.DECIMAL</dodf>.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf objfdt bfing sft is thf vbluf for thf sfdond
     * plbdfholdfr pbrbmftfr, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     *<P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf <dodf>Objfdt</dodf> dontbining thf input pbrbmftfr vbluf;
     *        must bf bn <dodf>Objfdt</dodf> typf
     * @pbrbm tbrgftSqlTypf thf SQL typf (bs dffinfd in <dodf>jbvb.sql.Typfs</dodf>)
     *        to bf sfnt to thf dbtbbbsf. Thf <dodf>sdblf</dodf> brgumfnt mby
     *        furthfr qublify this typf. If b non-stbndbrd <i>tbrgftSqlTypf</i>
     *        is supplifd, this mfthod will not throw b <dodf>SQLExdfption</dodf>.
     *        This bllows implidit support for non-stbndbrd SQL typfs.
     * @pbrbm sdblf for thf typfs <dodf>jbvb.sql.Typfs.DECIMAL</dodf> bnd
     *        <dodf>jbvb.sql.Typfs.NUMERIC</dodf>, this is thf numbfr
     *        of digits bftfr thf dfdimbl point.  For bll othfr typfs, this
     *        vbluf will bf ignorfd.
     * @throws SQLExdfption if bn frror oddurs or thf pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftObjfdt(int pbrbmftfrIndfx, Objfdt x, int tbrgftSqlTypf, int sdblf) throws SQLExdfption {
        Objfdt obj[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        obj = nfw Objfdt[3];
        obj[0] = x;
        obj[1] = Intfgfr.vblufOf(tbrgftSqlTypf);
        obj[2] = Intfgfr.vblufOf(sdblf);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftObjfdt");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), obj);
    }

    /**
     * Sfts thf vbluf of thf dfsignbtfd pbrbmftfr with thf givfn
     * <dodf>Objfdt</dodf> vbluf.
     * This mfthod is likf <dodf>sftObjfdt(int pbrbmftfrIndfx, Objfdt x, int
     * tbrgftSqlTypf, int sdblf)</dodf> fxdfpt thbt it bssumfs b sdblf of zfro.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr this vfrsion of
     * <dodf>sftObjfdt</dodf>
     * hbs bffn dbllfd will rfturn bn brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  In thbt brrby, thf flfmfnt thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is thf givfn <dodf>Objfdt</dodf> instbndf.
     * Thf sfdond flfmfnt is thf vbluf sft for <i>tbrgftSqlTypf</i>.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf objfdt bfing sft is thf vbluf for thf sfdond
     * plbdfholdfr pbrbmftfr, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf <dodf>Objfdt</dodf> dontbining thf input pbrbmftfr vbluf;
     *        must bf bn <dodf>Objfdt</dodf> typf
     * @pbrbm tbrgftSqlTypf thf SQL typf (bs dffinfd in <dodf>jbvb.sql.Typfs</dodf>)
     *        to bf sfnt to thf dbtbbbsf. If b non-stbndbrd <i>tbrgftSqlTypf</i>
     *        is supplifd, this mfthod will not throw b <dodf>SQLExdfption</dodf>.
     *        This bllows implidit support for non-stbndbrd SQL typfs.
     * @throws SQLExdfption if bn frror oddurs or thf pbrbmftfr indfx
     *        is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftObjfdt(int pbrbmftfrIndfx, Objfdt x, int tbrgftSqlTypf) throws SQLExdfption {
        Objfdt obj[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        obj = nfw Objfdt[2];
        obj[0] = x;
        obj[1] = Intfgfr.vblufOf(tbrgftSqlTypf);
        if (pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftObjfdt");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), obj);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to bn <dodf>Objfdt</dodf> in thf Jbvb
     * progrbmming lbngubgf. Thf sfdond pbrbmftfr must bf bn
     * <dodf>Objfdt</dodf>
     * typf.  For intfgrbl vblufs, thf <dodf>jbvb.lbng</dodf> fquivblfnt
     * objfdts should bf usfd. For fxbmplf, usf thf dlbss <dodf>Intfgfr</dodf>
     * for bn <dodf>int</dodf>.
     * <P>
     * Thf JDBC spfdifidbtion dffinfs b stbndbrd mbpping from
     * Jbvb <dodf>Objfdt</dodf> typfs to SQL typfs.  Thf drivfr will
     * usf this stbndbrd mbpping to  donvfrt thf givfn objfdt
     * to its dorrfsponding SQL typf bfforf sfnding it to thf dbtbbbsf.
     * If thf objfdt hbs b dustom mbpping (is of b dlbss implfmfnting
     * <dodf>SQLDbtb</dodf>), thf drivfr should dbll thf mfthod
     * <dodf>SQLDbtb.writfSQL</dodf> to writf thf objfdt to thf SQL
     * dbtb strfbm.
     * <P>
     * If, on thf othfr hbnd, thf objfdt is of b dlbss
     * implfmfnting <dodf>Rff</dodf>, <dodf>Blob</dodf>, <dodf>Clob</dodf>,
     * <dodf>Strudt</dodf>, or <dodf>Arrby</dodf>,
     * thf drivfr should pbss it to thf dbtbbbsf bs b vbluf of thf
     * dorrfsponding SQL typf.
     * <P>
     * This mfthod throws bn fxdfption if thfrf
     * is bn bmbiguity, for fxbmplf, if thf objfdt is of b dlbss
     * implfmfnting morf thbn onf intfrfbdf.
     * <P>
     * Notf thbt this mfthod mby bf usfd to pbss dbtbbbsf-spfdifid
     * bbstrbdt dbtb typfs.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <p>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Aftfr this mfthod hbs bffn dbllfd, b dbll to thf
     * mfthod <dodf>gftPbrbms</dodf>
     * will rfturn bn objfdt brrby of thf durrfnt dommbnd pbrbmftfrs, whidh will
     * indludf thf <dodf>Objfdt</dodf> sft for plbdfholdfr pbrbmftfr numbfr
     * <dodf>pbrbmftfrIndfx</dodf>.
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x thf objfdt dontbining thf input pbrbmftfr vbluf
     * @throws SQLExdfption if bn frror oddurs thf
     *                         pbrbmftfr indfx is out of bounds, or thfrf
     *                         is bmbiguity in thf implfmfntbtion of thf
     *                         objfdt bfing sft
     * @sff #gftPbrbms
     */
    publid void sftObjfdt(int pbrbmftfrIndfx, Objfdt x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if (pbrbms == null) {
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftObjfdt");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), x);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>Rff</dodf> objfdt in
     * thf Jbvb progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>REF</dodf> vbluf whfn it sfnds it to thf dbtbbbsf. Intfrnblly, thf
     * <dodf>Rff</dodf> is rfprfsfntfd bs b <dodf>SfriblRff</dodf> to fnsurf
     * sfriblizbbility.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <p>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <p>
     * Aftfr this mfthod hbs bffn dbllfd, b dbll to thf
     * mfthod <dodf>gftPbrbms</dodf>
     * will rfturn bn objfdt brrby of thf durrfnt dommbnd pbrbmftfrs, whidh will
     * indludf thf <dodf>Rff</dodf> objfdt sft for plbdfholdfr pbrbmftfr numbfr
     * <dodf>pbrbmftfrIndfx</dodf>.
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm rff b <dodf>Rff</dodf> objfdt rfprfsfnting bn SQL <dodf>REF</dodf>
     *         vbluf; dbnnot bf null
     * @throws SQLExdfption if bn frror oddurs; thf pbrbmftfr indfx is out of
     *         bounds or thf <dodf>Rff</dodf> objfdt is <dodf>null</dodf>; or
     *         thf <dodf>Rff</dodf> objfdt rfturns b <dodf>null</dodf> bbsf typf
     *         nbmf.
     * @sff #gftPbrbms
     * @sff jbvbx.sql.rowsft.sfribl.SfriblRff
     */
    publid void sftRff (int pbrbmftfrIndfx, Rff rff) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if (pbrbms == null) {
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftRff");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), nfw SfriblRff(rff));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>Blob</dodf> objfdt in
     * thf Jbvb progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>BLOB</dodf> vbluf whfn it sfnds it to thf dbtbbbsf. Intfrnblly,
     * thf <dodf>Blob</dodf> is rfprfsfntfd bs b <dodf>SfriblBlob</dodf>
     * to fnsurf sfriblizbbility.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <p>
     * Aftfr this mfthod hbs bffn dbllfd, b dbll to thf
     * mfthod <dodf>gftPbrbms</dodf>
     * will rfturn bn objfdt brrby of thf durrfnt dommbnd pbrbmftfrs, whidh will
     * indludf thf <dodf>Blob</dodf> objfdt sft for plbdfholdfr pbrbmftfr numbfr
     * <dodf>pbrbmftfrIndfx</dodf>.
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x b <dodf>Blob</dodf> objfdt rfprfsfnting bn SQL
     *          <dodf>BLOB</dodf> vbluf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     * @sff jbvbx.sql.rowsft.sfribl.SfriblBlob
     */
    publid void sftBlob (int pbrbmftfrIndfx, Blob x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftBlob");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), nfw SfriblBlob(x));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>Clob</dodf> objfdt in
     * thf Jbvb progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>CLOB</dodf> vbluf whfn it sfnds it to thf dbtbbbsf. Intfrnblly, thf
     * <dodf>Clob</dodf> is rfprfsfntfd bs b <dodf>SfriblClob</dodf> to fnsurf
     * sfriblizbbility.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <p>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <p>
     * Aftfr this mfthod hbs bffn dbllfd, b dbll to thf
     * mfthod <dodf>gftPbrbms</dodf>
     * will rfturn bn objfdt brrby of thf durrfnt dommbnd pbrbmftfrs, whidh will
     * indludf thf <dodf>Clob</dodf> objfdt sft for plbdfholdfr pbrbmftfr numbfr
     * <dodf>pbrbmftfrIndfx</dodf>.
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *     in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *     Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *     <dodf>1</dodf> or grfbtfr
     * @pbrbm x b <dodf>Clob</dodf> objfdt rfprfsfnting bn SQL
     *     <dodf>CLOB</dodf> vbluf; dbnnot bf null
     * @throws SQLExdfption if bn frror oddurs; thf pbrbmftfr indfx is out of
     *     bounds or thf <dodf>Clob</dodf> is null
     * @sff #gftPbrbms
     * @sff jbvbx.sql.rowsft.sfribl.SfriblBlob
     */
    publid void sftClob (int pbrbmftfrIndfx, Clob x) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftClob");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), nfw SfriblClob(x));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to bn <dodf>Arrby</dodf> objfdt in thf
     * Jbvb progrbmming lbngubgf.  Thf drivfr donvfrts this to bn SQL
     * <dodf>ARRAY</dodf> vbluf whfn it sfnds it to thf dbtbbbsf. Intfrnblly,
     * thf <dodf>Arrby</dodf> is rfprfsfntfd bs b <dodf>SfriblArrby</dodf>
     * to fnsurf sfriblizbbility.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * Notf: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <p>
     * Aftfr this mfthod hbs bffn dbllfd, b dbll to thf
     * mfthod <dodf>gftPbrbms</dodf>
     * will rfturn bn objfdt brrby of thf durrfnt dommbnd pbrbmftfrs, whidh will
     * indludf thf <dodf>Arrby</dodf> objfdt sft for plbdfholdfr pbrbmftfr numbfr
     * <dodf>pbrbmftfrIndfx</dodf>.
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is flfmfnt numbfr <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm brrby bn <dodf>Arrby</dodf> objfdt rfprfsfnting bn SQL
     *        <dodf>ARRAY</dodf> vbluf; dbnnot bf null. Thf <dodf>Arrby</dodf> objfdt
     *        pbssfd to this mfthod must rfturn b non-null Objfdt for bll
     *        <dodf>gftArrby()</dodf> mfthod dblls. A null vbluf will dbusf b
     *        <dodf>SQLExdfption</dodf> to bf thrown.
     * @throws SQLExdfption if bn frror oddurs; thf pbrbmftfr indfx is out of
     *        bounds or thf <dodf>ARRAY</dodf> is null
     * @sff #gftPbrbms
     * @sff jbvbx.sql.rowsft.sfribl.SfriblArrby
     */
    publid void sftArrby (int pbrbmftfrIndfx, Arrby brrby) throws SQLExdfption {
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);
        if (pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftArrby");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), nfw SfriblArrby(brrby));
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Dbtf</dodf>
     * objfdt.
     * Whfn thf DBMS dofs not storf timf zonf informbtion, thf drivfr will usf
     * thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt thf SQL <dodf>DATE</dodf>
     * vbluf to sfnd to thf dbtbbbsf. With b
     * <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf dbtf
     * tbking into bddount b dustom timf zonf.  If no <dodf>Cblfndbr</dodf>
     * objfdt is spfdififd, thf drivfr usfs thf timf zonf of thf Virtubl Mbdhinf
     * thbt is running thf bpplidbtion.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr this vfrsion of
     * <dodf>sftDbtf</dodf>
     * hbs bffn dbllfd will rfturn bn brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  In thbt brrby, thf flfmfnt thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is thf givfn <dodf>jbvb.sql.Dbtf</dodf> objfdt.
     * Thf sfdond flfmfnt is thf vbluf sft for <i>dbl</i>.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf dbtf bfing sft is thf vbluf for thf sfdond
     * plbdfholdfr pbrbmftfr, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x b <dodf>jbvb.sql.Dbtf</dodf> objfdt rfprfsfnting bn SQL
     *        <dodf>DATE</dodf> vbluf
     * @pbrbm dbl b <dodf>jbvb.util.Cblfndbr</dodf> objfdt to usf whfn
     *        whfn donstrudting thf dbtf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftDbtf(int pbrbmftfrIndfx, jbvb.sql.Dbtf x, Cblfndbr dbl) throws SQLExdfption {
        Objfdt dbtf[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        dbtf = nfw Objfdt[2];
        dbtf[0] = x;
        dbtf[1] = dbl;
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftDbtf");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), dbtf);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timf</dodf>
     * objfdt.  Thf drivfr donvfrts this
     * to bn SQL <dodf>TIME</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Whfn thf DBMS dofs not storf timf zonf informbtion, thf drivfr will usf
     * thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt thf SQL <dodf>TIME</dodf>
     * vbluf to sfnd to thf dbtbbbsf. With b
     * <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf dbtf
     * tbking into bddount b dustom timf zonf.  If no <dodf>Cblfndbr</dodf>
     * objfdt is spfdififd, thf drivfr usfs thf timf zonf of thf Virtubl Mbdhinf
     * thbt is running thf bpplidbtion.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr this vfrsion of
     * <dodf>sftTimf</dodf>
     * hbs bffn dbllfd will rfturn bn brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  In thbt brrby, thf flfmfnt thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is thf givfn <dodf>jbvb.sql.Timf</dodf> objfdt.
     * Thf sfdond flfmfnt is thf vbluf sft for <i>dbl</i>.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf timf bfing sft is thf vbluf for thf sfdond
     * plbdfholdfr pbrbmftfr, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x b <dodf>jbvb.sql.Timf</dodf> objfdt
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt thf drivfr dbn usf to
     *         donstrudt thf timf
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftTimf(int pbrbmftfrIndfx, jbvb.sql.Timf x, Cblfndbr dbl) throws SQLExdfption {
        Objfdt timf[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        timf = nfw Objfdt[2];
        timf[0] = x;
        timf[1] = dbl;
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftTimf");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), timf);
    }

    /**
     * Sfts thf dfsignbtfd pbrbmftfr to thf givfn
     * <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.  Thf drivfr donvfrts this
     * to bn SQL <dodf>TIMESTAMP</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
     * <P>
     * Whfn thf DBMS dofs not storf timf zonf informbtion, thf drivfr will usf
     * thf givfn <dodf>Cblfndbr</dodf> objfdt to donstrudt thf SQL <dodf>TIMESTAMP</dodf>
     * vbluf to sfnd to thf dbtbbbsf. With b
     * <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf timfstbmp
     * tbking into bddount b dustom timf zonf.  If no <dodf>Cblfndbr</dodf>
     * objfdt is spfdififd, thf drivfr usfs thf timf zonf of thf Virtubl Mbdhinf
     * thbt is running thf bpplidbtion.
     * <P>
     * Thf pbrbmftfr vbluf sft by this mfthod is storfd intfrnblly bnd
     * will bf supplifd bs thf bppropribtf pbrbmftfr in this <dodf>RowSft</dodf>
     * objfdt's dommbnd whfn thf mfthod <dodf>fxfdutf</dodf> is dbllfd.
     * Mfthods sudh bs <dodf>fxfdutf</dodf> bnd <dodf>populbtf</dodf> must bf
     * providfd in bny dlbss thbt fxtfnds this dlbss bnd implfmfnts onf or
     * morf of thf stbndbrd JSR-114 <dodf>RowSft</dodf> intfrfbdfs.
     * <P>
     * NOTE: <dodf>JdbdRowSft</dodf> dofs not rfquirf thf <dodf>populbtf</dodf> mfthod
     * bs it is undffinfd in this dlbss.
     * <P>
     * Cblls mbdf to thf mfthod <dodf>gftPbrbms</dodf> bftfr this vfrsion of
     * <dodf>sftTimfstbmp</dodf>
     * hbs bffn dbllfd will rfturn bn brrby dontbining thf pbrbmftfr vblufs thbt
     * hbvf bffn sft.  In thbt brrby, thf flfmfnt thbt rfprfsfnts thf vblufs
     * sft with this mfthod will itsflf bf bn brrby. Thf first flfmfnt of thbt brrby
     * is thf givfn <dodf>jbvb.sql.Timfstbmp</dodf> objfdt.
     * Thf sfdond flfmfnt is thf vbluf sft for <i>dbl</i>.
     * Thf pbrbmftfr numbfr is indidbtfd by bn flfmfnt's position in thf brrby
     * rfturnfd by thf mfthod <dodf>gftPbrbms</dodf>,
     * with thf first flfmfnt bfing thf vbluf for thf first plbdfholdfr pbrbmftfr, thf
     * sfdond flfmfnt bfing thf vbluf for thf sfdond plbdfholdfr pbrbmftfr, bnd so on.
     * In othfr words, if thf timfstbmp bfing sft is thf vbluf for thf sfdond
     * plbdfholdfr pbrbmftfr, thf brrby dontbining it will bf thf sfdond flfmfnt in
     * thf brrby rfturnfd by <dodf>gftPbrbms</dodf>.
     * <P>
     * Notf thbt bfdbusf thf numbfring of flfmfnts in bn brrby stbrts bt zfro,
     * thf brrby flfmfnt thbt dorrfsponds to plbdfholdfr pbrbmftfr numbfr
     * <i>pbrbmftfrIndfx</i> is <i>pbrbmftfrIndfx</i> -1.
     *
     * @pbrbm pbrbmftfrIndfx thf ordinbl numbfr of thf plbdfholdfr pbrbmftfr
     *        in this <dodf>RowSft</dodf> objfdt's dommbnd thbt is to bf sft.
     *        Thf first pbrbmftfr is 1, thf sfdond is 2, bnd so on; must bf
     *        <dodf>1</dodf> or grfbtfr
     * @pbrbm x b <dodf>jbvb.sql.Timfstbmp</dodf> objfdt
     * @pbrbm dbl thf <dodf>jbvb.util.Cblfndbr</dodf> objfdt thf drivfr dbn usf to
     *         donstrudt thf timfstbmp
     * @throws SQLExdfption if bn frror oddurs or thf
     *                         pbrbmftfr indfx is out of bounds
     * @sff #gftPbrbms
     */
    publid void sftTimfstbmp(int pbrbmftfrIndfx, jbvb.sql.Timfstbmp x, Cblfndbr dbl) throws SQLExdfption {
        Objfdt timfstbmp[];
        dhfdkPbrbmIndfx(pbrbmftfrIndfx);

        timfstbmp = nfw Objfdt[2];
        timfstbmp[0] = x;
        timfstbmp[1] = dbl;
        if(pbrbms == null){
             throw nfw SQLExdfption("Sft initPbrbms() bfforf sftTimfstbmp");
        }
        pbrbms.put(Intfgfr.vblufOf(pbrbmftfrIndfx - 1), timfstbmp);
    }

    /**
     * Clfbrs bll of thf durrfnt pbrbmftfr vblufs in this <dodf>RowSft</dodf>
     * objfdt's intfrnbl rfprfsfntbtion of thf pbrbmftfrs to bf sft in
     * this <dodf>RowSft</dodf> objfdt's dommbnd whfn it is fxfdutfd.
     * <P>
     * In gfnfrbl, pbrbmftfr vblufs rfmbin in fordf for rfpfbtfd usf in
     * this <dodf>RowSft</dodf> objfdt's dommbnd. Sftting b pbrbmftfr vbluf with thf
     * sfttfr mfthods butombtidblly dlfbrs thf vbluf of thf
     * dfsignbtfd pbrbmftfr bnd rfplbdfs it with thf nfw spfdififd vbluf.
     * <P>
     * This mfthod is dbllfd intfrnblly by thf <dodf>sftCommbnd</dodf>
     * mfthod to dlfbr bll of thf pbrbmftfrs sft for thf prfvious dommbnd.
     * <P>
     * Furthfrmorf, this mfthod difffrs from thf <dodf>initPbrbms</dodf>
     * mfthod in thbt it mbintbins thf sdhfmb of thf <dodf>RowSft</dodf> objfdt.
     *
     * @throws SQLExdfption if bn frror oddurs dlfbring thf pbrbmftfrs
     */
    publid void dlfbrPbrbmftfrs() throws SQLExdfption {
        pbrbms.dlfbr();
    }

    /**
     * Rftrifvfs bn brrby dontbining thf pbrbmftfr vblufs (both Objfdts bnd
     * primitivfs) thbt hbvf bffn sft for this
     * <dodf>RowSft</dodf> objfdt's dommbnd bnd throws bn <dodf>SQLExdfption</dodf> objfdt
     * if bll pbrbmftfrs hbvf not bffn sft.   Bfforf thf dommbnd is sfnt to thf
     * DBMS to bf fxfdutfd, thfsf pbrbmftfrs will bf substitutfd
     * for plbdfholdfr pbrbmftfrs in thf  <dodf>PrfpbrfdStbtfmfnt</dodf> objfdt
     * thbt is thf dommbnd for b <dodf>RowSft</dodf> implfmfntbtion fxtfnding
     * thf <dodf>BbsfRowSft</dodf> dlbss.
     * <P>
     * Ebdh flfmfnt in thf brrby thbt is rfturnfd is bn <dodf>Objfdt</dodf> instbndf
     * thbt dontbins thf vblufs of thf pbrbmftfrs supplifd to b sfttfr mfthod.
     * Thf ordfr of thf flfmfnts is dftfrminfd by thf vbluf supplifd for
     * <i>pbrbmftfrIndfx</i>.  If thf sfttfr mfthod tbkfs only thf pbrbmftfr indfx
     * bnd thf vbluf to bf sft (possibly null), thf brrby flfmfnt will dontbin thf vbluf to bf sft
     * (whidh will bf fxprfssfd bs bn <dodf>Objfdt</dodf>).  If thfrf brf bdditionbl
     * pbrbmftfrs, thf brrby flfmfnt will itsflf bf bn brrby dontbining thf vbluf to bf sft
     * plus bny bdditionbl pbrbmftfr vblufs supplifd to thf sfttfr mfthod. If thf mfthod
     * sfts b strfbm, thf brrby flfmfnt indludfs thf typf of strfbm bfing supplifd to thf
     * mfthod. Thfsf bdditionbl pbrbmftfrs brf for thf usf of thf drivfr or thf DBMS bnd mby or
     * mby not bf usfd.
     * <P>
     * NOTE: Storfd pbrbmftfr vblufs of typfs <dodf>Arrby</dodf>, <dodf>Blob</dodf>,
     * <dodf>Clob</dodf> bnd <dodf>Rff</dodf> brf rfturnfd bs <dodf>SfriblArrby</dodf>,
     * <dodf>SfriblBlob</dodf>, <dodf>SfriblClob</dodf> bnd <dodf>SfriblRff</dodf>
     * rfspfdtivfly.
     *
     * @rfturn bn brrby of <dodf>Objfdt</dodf> instbndfs thbt indludfs thf
     *         pbrbmftfr vblufs thbt mby bf sft in this <dodf>RowSft</dodf> objfdt's
     *         dommbnd; bn fmpty brrby if no pbrbmftfrs hbvf bffn sft
     * @throws SQLExdfption if bn frror oddurs rftrifving thf objfdt brrby of
     *         pbrbmftfrs of this <dodf>RowSft</dodf> objfdt or if not bll pbrbmftfrs hbvf
     *         bffn sft
     */
    publid Objfdt[] gftPbrbms() throws SQLExdfption {
        if (pbrbms == null) {

            initPbrbms();
            Objfdt [] pbrbmsArrby = nfw Objfdt[pbrbms.sizf()];
            rfturn pbrbmsArrby;

        } flsf {
            // Thf pbrbmftfrs mby bf sft in rbndom ordfr
            // but bll must bf sft, dhfdk to vfrify bll
            // hbvf bffn sft till thf lbst pbrbmftfr
            // flsf throw fxdfption.

            Objfdt[] pbrbmsArrby = nfw Objfdt[pbrbms.sizf()];
            for (int i = 0; i < pbrbms.sizf(); i++) {
               pbrbmsArrby[i] = pbrbms.gft(Intfgfr.vblufOf(i));
               if (pbrbmsArrby[i] == null) {
                 throw nfw SQLExdfption("missing pbrbmftfr: " + (i + 1));
               } //fnd if
            } //fnd for
            rfturn pbrbmsArrby;

        } //fnd if

    } //fnd gftPbrbms


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to SQL <dodf>NULL</dodf>.
    *
    * <P><B>Notf:</B> You must spfdify thf pbrbmftfr's SQL typf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm sqlTypf thf SQL typf dodf dffinfd in <dodf>jbvb.sql.Typfs</dodf>
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftNull(String pbrbmftfrNbmf, int sqlTypf) throws SQLExdfption {
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to SQL <dodf>NULL</dodf>.
    * This vfrsion of thf mfthod <dodf>sftNull</dodf> should
    * bf usfd for usfr-dffinfd typfs bnd REF typf pbrbmftfrs.  Exbmplfs
    * of usfr-dffinfd typfs indludf: STRUCT, DISTINCT, JAVA_OBJECT, bnd
    * nbmfd brrby typfs.
    *
    * <P><B>Notf:</B> To bf portbblf, bpplidbtions must givf thf
    * SQL typf dodf bnd thf fully-qublififd SQL typf nbmf whfn spfdifying
    * b NULL usfr-dffinfd or REF pbrbmftfr.  In thf dbsf of b usfr-dffinfd typf
    * thf nbmf is thf typf nbmf of thf pbrbmftfr itsflf.  For b REF
    * pbrbmftfr, thf nbmf is thf typf nbmf of thf rfffrfndfd typf.  If
    * b JDBC drivfr dofs not nffd thf typf dodf or typf nbmf informbtion,
    * it mby ignorf it.
    *
    * Although it is intfndfd for usfr-dffinfd bnd Rff pbrbmftfrs,
    * this mfthod mby bf usfd to sft b null pbrbmftfr of bny JDBC typf.
    * If thf pbrbmftfr dofs not hbvf b usfr-dffinfd or REF typf, thf givfn
    * typfNbmf is ignorfd.
    *
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm sqlTypf b vbluf from <dodf>jbvb.sql.Typfs</dodf>
    * @pbrbm typfNbmf thf fully-qublififd nbmf of bn SQL usfr-dffinfd typf;
    *        ignorfd if thf pbrbmftfr is not b usfr-dffinfd typf or
    *        SQL <dodf>REF</dodf> vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftNull (String pbrbmftfrNbmf, int sqlTypf, String typfNbmf)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>boolfbn</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>BIT</dodf> or <dodf>BOOLEAN</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftBoolfbn(String pbrbmftfrNbmf, boolfbn x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>bytf</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>TINYINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftBytf(String pbrbmftfrNbmf, bytf x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>short</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>SMALLINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftShort(String pbrbmftfrNbmf, short x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>int</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>INTEGER</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftInt(String pbrbmftfrNbmf, int x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>long</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>BIGINT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftLong(String pbrbmftfrNbmf, long x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>flobt</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>FLOAT</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftFlobt(String pbrbmftfrNbmf, flobt x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>doublf</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>DOUBLE</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftDoublf(String pbrbmftfrNbmf, doublf x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn
    * <dodf>jbvb.mbth.BigDfdimbl</dodf> vbluf.
    * Thf drivfr donvfrts this to bn SQL <dodf>NUMERIC</dodf> vbluf whfn
    * it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftBigDfdimbl(String pbrbmftfrNbmf, BigDfdimbl x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb <dodf>String</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>VARCHAR</dodf> or <dodf>LONGVARCHAR</dodf> vbluf
    * (dfpfnding on thf brgumfnt's
    * sizf rflbtivf to thf drivfr's limits on <dodf>VARCHAR</dodf> vblufs)
    * whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftString(String pbrbmftfrNbmf, String x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn Jbvb brrby of bytfs.
    * Thf drivfr donvfrts this to bn SQL <dodf>VARBINARY</dodf> or
    * <dodf>LONGVARBINARY</dodf> (dfpfnding on thf brgumfnt's sizf rflbtivf
    * to thf drivfr's limits on <dodf>VARBINARY</dodf> vblufs) whfn it sfnds
    * it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftBytfs(String pbrbmftfrNbmf, bytf x[]) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timfstbmp</dodf> vbluf.
    * Thf drivfr
    * donvfrts this to bn SQL <dodf>TIMESTAMP</dodf> vbluf whfn it sfnds it to thf
    * dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftTimfstbmp(String pbrbmftfrNbmf, jbvb.sql.Timfstbmp x)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm, whidh will hbvf
    * thf spfdififd numbfr of bytfs.
    * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
    * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
    * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf Jbvb input strfbm thbt dontbins thf ASCII pbrbmftfr vbluf
    * @pbrbm lfngth thf numbfr of bytfs in thf strfbm
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftAsdiiStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x, int lfngth)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm, whidh will hbvf
    * thf spfdififd numbfr of bytfs.
    * Whfn b vfry lbrgf binbry vbluf is input to b <dodf>LONGVARBINARY</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.InputStrfbm</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
    * bs nffdfd until fnd-of-filf is rfbdhfd.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf jbvb input strfbm whidh dontbins thf binbry pbrbmftfr vbluf
    * @pbrbm lfngth thf numbfr of bytfs in thf strfbm
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftBinbryStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x,
                        int lfngth) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


  /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>Rfbdfr</dodf>
    * objfdt, whidh is thf givfn numbfr of dhbrbdtfrs long.
    * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
    * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
    * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt
    *        dontbins thf UNICODE dbtb usfd bs thf dfsignbtfd pbrbmftfr
    * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf strfbm
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.4
    */
   publid void sftChbrbdtfrStrfbm(String pbrbmftfrNbmf,
                           jbvb.io.Rfbdfr rfbdfr,
                           int lfngth) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


  /**
   * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm.
   * Whfn b vfry lbrgf ASCII vbluf is input to b <dodf>LONGVARCHAR</dodf>
   * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
   * <dodf>jbvb.io.InputStrfbm</dodf>. Dbtb will bf rfbd from thf strfbm
   * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
   * do bny nfdfssbry donvfrsion from ASCII to thf dbtbbbsf dhbr formbt.
   *
   * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
   * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
   * stbndbrd intfrfbdf.
   * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
   * it might bf morf fffidifnt to usf b vfrsion of
   * <dodf>sftAsdiiStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
   *
   * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
   * @pbrbm x thf Jbvb input strfbm thbt dontbins thf ASCII pbrbmftfr vbluf
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.6
  */
  publid void sftAsdiiStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x)
          throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn input strfbm.
    * Whfn b vfry lbrgf binbry vbluf is input to b <dodf>LONGVARBINARY</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.InputStrfbm</dodf> objfdt. Thf dbtb will bf rfbd from thf
    * strfbm bs nffdfd until fnd-of-filf is rfbdhfd.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftBinbryStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf jbvb input strfbm whidh dontbins thf binbry pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    * @sindf 1.6
    */
   publid void sftBinbryStrfbm(String pbrbmftfrNbmf, jbvb.io.InputStrfbm x)
   throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>Rfbdfr</dodf>
    * objfdt.
    * Whfn b vfry lbrgf UNICODE vbluf is input to b <dodf>LONGVARCHAR</dodf>
    * pbrbmftfr, it mby bf morf prbdtidbl to sfnd it vib b
    * <dodf>jbvb.io.Rfbdfr</dodf> objfdt. Thf dbtb will bf rfbd from thf strfbm
    * bs nffdfd until fnd-of-filf is rfbdhfd.  Thf JDBC drivfr will
    * do bny nfdfssbry donvfrsion from UNICODE to thf dbtbbbsf dhbr formbt.
    *
    * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
    * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
    * stbndbrd intfrfbdf.
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm rfbdfr thf <dodf>jbvb.io.Rfbdfr</dodf> objfdt thbt dontbins thf
    *        Unidodf dbtb
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    * @sindf 1.6
    */
   publid void sftChbrbdtfrStrfbm(String pbrbmftfrNbmf,
                         jbvb.io.Rfbdfr rfbdfr) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr in this <dodf>RowSft</dodf> objfdt's dommbnd
  * to b <dodf>Rfbdfr</dodf> objfdt. Thf
  * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
  * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
  * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
  *
  * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
  * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
  * stbndbrd intfrfbdf.
  * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
  * it might bf morf fffidifnt to usf b vfrsion of
  * <dodf>sftNChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
  *
  * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur ; if b dbtbbbsf bddfss frror oddurs; or
  * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  * @sindf 1.6
  */
  publid void sftNChbrbdtfrStrfbm(int pbrbmftfrIndfx, Rfbdfr vbluf) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf vbluf of thf dfsignbtfd pbrbmftfr with thf givfn objfdt. Thf sfdond
    * brgumfnt must bf bn objfdt typf; for intfgrbl vblufs, thf
    * <dodf>jbvb.lbng</dodf> fquivblfnt objfdts should bf usfd.
    *
    * <p>Thf givfn Jbvb objfdt will bf donvfrtfd to thf givfn tbrgftSqlTypf
    * bfforf bfing sfnt to thf dbtbbbsf.
    *
    * If thf objfdt hbs b dustom mbpping (is of b dlbss implfmfnting thf
    * intfrfbdf <dodf>SQLDbtb</dodf>),
    * thf JDBC drivfr should dbll thf mfthod <dodf>SQLDbtb.writfSQL</dodf> to writf it
    * to thf SQL dbtb strfbm.
    * If, on thf othfr hbnd, thf objfdt is of b dlbss implfmfnting
    * <dodf>Rff</dodf>, <dodf>Blob</dodf>, <dodf>Clob</dodf>,  <dodf>NClob</dodf>,
    *  <dodf>Strudt</dodf>, <dodf>jbvb.nft.URL</dodf>,
    * or <dodf>Arrby</dodf>, thf drivfr should pbss it to thf dbtbbbsf bs b
    * vbluf of thf dorrfsponding SQL typf.
    * <P>
    * Notf thbt this mfthod mby bf usfd to pbss dbtbtbbbsf-
    * spfdifid bbstrbdt dbtb typfs.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf objfdt dontbining thf input pbrbmftfr vbluf
    * @pbrbm tbrgftSqlTypf thf SQL typf (bs dffinfd in jbvb.sql.Typfs) to bf
    * sfnt to thf dbtbbbsf. Thf sdblf brgumfnt mby furthfr qublify this typf.
    * @pbrbm sdblf for jbvb.sql.Typfs.DECIMAL or jbvb.sql.Typfs.NUMERIC typfs,
    *          this is thf numbfr of digits bftfr thf dfdimbl point.  For bll othfr
    *          typfs, this vbluf will bf ignorfd.
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if <dodf>tbrgftSqlTypf</dodf> is
    * b <dodf>ARRAY</dodf>, <dodf>BLOB</dodf>, <dodf>CLOB</dodf>,
    * <dodf>DATALINK</dodf>, <dodf>JAVA_OBJECT</dodf>, <dodf>NCHAR</dodf>,
    * <dodf>NCLOB</dodf>, <dodf>NVARCHAR</dodf>, <dodf>LONGNVARCHAR</dodf>,
    *  <dodf>REF</dodf>, <dodf>ROWID</dodf>, <dodf>SQLXML</dodf>
    * or  <dodf>STRUCT</dodf> dbtb typf bnd thf JDBC drivfr dofs not support
    * this dbtb typf
    * @sff Typfs
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftObjfdt(String pbrbmftfrNbmf, Objfdt x, int tbrgftSqlTypf, int sdblf)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf vbluf of thf dfsignbtfd pbrbmftfr with thf givfn objfdt.
    * This mfthod is likf thf mfthod <dodf>sftObjfdt</dodf>
    * bbovf, fxdfpt thbt it bssumfs b sdblf of zfro.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf objfdt dontbining thf input pbrbmftfr vbluf
    * @pbrbm tbrgftSqlTypf thf SQL typf (bs dffinfd in jbvb.sql.Typfs) to bf
    *                      sfnt to thf dbtbbbsf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if <dodf>tbrgftSqlTypf</dodf> is
    * b <dodf>ARRAY</dodf>, <dodf>BLOB</dodf>, <dodf>CLOB</dodf>,
    * <dodf>DATALINK</dodf>, <dodf>JAVA_OBJECT</dodf>, <dodf>NCHAR</dodf>,
    * <dodf>NCLOB</dodf>, <dodf>NVARCHAR</dodf>, <dodf>LONGNVARCHAR</dodf>,
    *  <dodf>REF</dodf>, <dodf>ROWID</dodf>, <dodf>SQLXML</dodf>
    * or  <dodf>STRUCT</dodf> dbtb typf bnd thf JDBC drivfr dofs not support
    * this dbtb typf
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftObjfdt(String pbrbmftfrNbmf, Objfdt x, int tbrgftSqlTypf)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
   * Sfts thf vbluf of thf dfsignbtfd pbrbmftfr with thf givfn objfdt.
   * Thf sfdond pbrbmftfr must bf of typf <dodf>Objfdt</dodf>; thfrfforf, thf
   * <dodf>jbvb.lbng</dodf> fquivblfnt objfdts should bf usfd for built-in typfs.
   *
   * <p>Thf JDBC spfdifidbtion spfdififs b stbndbrd mbpping from
   * Jbvb <dodf>Objfdt</dodf> typfs to SQL typfs.  Thf givfn brgumfnt
   * will bf donvfrtfd to thf dorrfsponding SQL typf bfforf bfing
   * sfnt to thf dbtbbbsf.
   *
   * <p>Notf thbt this mfthod mby bf usfd to pbss dbtbtbbbsf-
   * spfdifid bbstrbdt dbtb typfs, by using b drivfr-spfdifid Jbvb
   * typf.
   *
   * If thf objfdt is of b dlbss implfmfnting thf intfrfbdf <dodf>SQLDbtb</dodf>,
   * thf JDBC drivfr should dbll thf mfthod <dodf>SQLDbtb.writfSQL</dodf>
   * to writf it to thf SQL dbtb strfbm.
   * If, on thf othfr hbnd, thf objfdt is of b dlbss implfmfnting
   * <dodf>Rff</dodf>, <dodf>Blob</dodf>, <dodf>Clob</dodf>,  <dodf>NClob</dodf>,
   *  <dodf>Strudt</dodf>, <dodf>jbvb.nft.URL</dodf>,
   * or <dodf>Arrby</dodf>, thf drivfr should pbss it to thf dbtbbbsf bs b
   * vbluf of thf dorrfsponding SQL typf.
   * <P>
   * This mfthod throws bn fxdfption if thfrf is bn bmbiguity, for fxbmplf, if thf
   * objfdt is of b dlbss implfmfnting morf thbn onf of thf intfrfbdfs nbmfd bbovf.
   *
   * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
   * @pbrbm x thf objfdt dontbining thf input pbrbmftfr vbluf
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs,
   * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf> or if thf givfn
   *            <dodf>Objfdt</dodf> pbrbmftfr is bmbiguous
   * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
   * this mfthod
   * @sff #gftPbrbms
   * @sindf 1.4
   */
  publid void sftObjfdt(String pbrbmftfrNbmf, Objfdt x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }



 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.  Thf inputstrfbm must dontbin  thf numbfr
    * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
    * gfnfrbtfd whfn thf <dodf>PrfpbrfdStbtfmfnt</dodf> is fxfdutfd.
    * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm, int)</dodf>
    * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
    * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
    * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
    * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1,
    * thf sfdond is 2, ...
    * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
    * vbluf to.
    * @pbrbm lfngth thf numbfr of bytfs in thf pbrbmftfr dbtb.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs,
    * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>,
    * if pbrbmftfrIndfx dofs not dorrfspond
    * to b pbrbmftfr mbrkfr in thf SQL stbtfmfnt,  if thf lfngth spfdififd
    * is lfss thbn zfro or if thf numbfr of bytfs in thf inputstrfbm dofs not mbtdh
    * thf spfdififd lfngth.
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    *
    * @sindf 1.6
    */
    publid void sftBlob(int pbrbmftfrIndfx, InputStrfbm inputStrfbm, long lfngth)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.
    * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm)</dodf>
    * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
    * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
    * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
    *
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftBlob</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1,
    * thf sfdond is 2, ...
    * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
    * vbluf to.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs,
    * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf> or
    * if pbrbmftfrIndfx dofs not dorrfspond
    * to b pbrbmftfr mbrkfr in thf SQL stbtfmfnt,
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    *
    * @sindf 1.6
    */
    publid void sftBlob(int pbrbmftfrIndfx, InputStrfbm inputStrfbm)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.  Thf <dodf>inputstrfbm</dodf> must dontbin  thf numbfr
     * of dhbrbdtfrs spfdififd by lfngth, othfrwisf b <dodf>SQLExdfption</dodf> will bf
     * gfnfrbtfd whfn thf <dodf>CbllbblfStbtfmfnt</dodf> is fxfdutfd.
     * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm, int)</dodf>
     * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
     * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
     * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
     * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
     *
     * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr to bf sft
     * thf sfdond is 2, ...
     *
     * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
     * vbluf to.
     * @pbrbm lfngth thf numbfr of bytfs in thf pbrbmftfr dbtb.
     * @throws SQLExdfption  if pbrbmftfrIndfx dofs not dorrfspond
     * to b pbrbmftfr mbrkfr in thf SQL stbtfmfnt,  or if thf lfngth spfdififd
     * is lfss thbn zfro; if thf numbfr of bytfs in thf inputstrfbm dofs not mbtdh
     * thf spfdififd lfngth; if b dbtbbbsf bddfss frror oddurs or
     * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
     * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
     * this mfthod
     *
     * @sindf 1.6
     */
     publid void sftBlob(String pbrbmftfrNbmf, InputStrfbm inputStrfbm, long lfngth)
        throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Blob</dodf> objfdt.
    * Thf drivfr donvfrts this to bn SQL <dodf>BLOB</dodf> vbluf whfn it
    * sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x b <dodf>Blob</dodf> objfdt thbt mbps bn SQL <dodf>BLOB</dodf> vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.6
    */
   publid void sftBlob (String pbrbmftfrNbmf, Blob x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>InputStrfbm</dodf> objfdt.
    * This mfthod difffrs from thf <dodf>sftBinbryStrfbm (int, InputStrfbm)</dodf>
    * mfthod bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf
    * sfnt to thf sfrvfr bs b <dodf>BLOB</dodf>.  Whfn thf <dodf>sftBinbryStrfbm</dodf> mfthod is usfd,
    * thf drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGVARBINARY</dodf> or b <dodf>BLOB</dodf>
    *
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftBlob</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm inputStrfbm An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr
    * vbluf to.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    *
    * @sindf 1.6
    */
    publid void sftBlob(String pbrbmftfrNbmf, InputStrfbm inputStrfbm)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf rfbdfr must dontbin  thf numbfr
   * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
   * gfnfrbtfd whfn thf <dodf>PrfpbrfdStbtfmfnt</dodf> is fxfdutfd.
   *This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
   * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
   * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
   * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
   * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
   * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
   * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
   * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs, this mfthod is dbllfd on
   * b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>, if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
   * mbrkfr in thf SQL stbtfmfnt, or if thf lfngth spfdififd is lfss thbn zfro.
   *
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.6
   */
   publid void sftClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr, long lfngth)
     throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


/**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
   * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
   * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
   * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
   * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
   * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
   *
   * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
   * it might bf morf fffidifnt to usf b vfrsion of
   * <dodf>sftClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
   *
   * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
   * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs, this mfthod is dbllfd on
   * b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>or if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
   * mbrkfr in thf SQL stbtfmfnt
   *
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.6
   */
   publid void sftClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr)
     throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf <dodf>rfbdfr</dodf> must dontbin  thf numbfr
               * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
               * gfnfrbtfd whfn thf <dodf>CbllbblfStbtfmfnt</dodf> is fxfdutfd.
              * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
              * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
              * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
              * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
              * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
              * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr to bf sft
              * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
              * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
              * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
              * mbrkfr in thf SQL stbtfmfnt; if thf lfngth spfdififd is lfss thbn zfro;
              * b dbtbbbsf bddfss frror oddurs or
              * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
              * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
              * this mfthod
              *
              * @sindf 1.6
              */
              publid void sftClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr, long lfngth)
      throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


  /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Clob</dodf> objfdt.
    * Thf drivfr donvfrts this to bn SQL <dodf>CLOB</dodf> vbluf whfn it
    * sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x b <dodf>Clob</dodf> objfdt thbt mbps bn SQL <dodf>CLOB</dodf> vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sindf 1.6
    */
   publid void sftClob (String pbrbmftfrNbmf, Clob x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
    * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
    * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
    * thf sfrvfr bs b <dodf>CLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
    * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
    * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGVARCHAR</dodf> or b <dodf>CLOB</dodf>
    *
    * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
    * it might bf morf fffidifnt to usf b vfrsion of
    * <dodf>sftClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
    * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs or this mfthod is dbllfd on
    * b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    *
    * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
    * @sindf 1.6
    */
    publid void sftClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr)
      throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Dbtf</dodf> vbluf
    * using thf dffbult timf zonf of thf virtubl mbdhinf thbt is running
    * thf bpplidbtion.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>DATE</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftDbtf(String pbrbmftfrNbmf, jbvb.sql.Dbtf x)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Dbtf</dodf> vbluf,
    * using thf givfn <dodf>Cblfndbr</dodf> objfdt.  Thf drivfr usfs
    * thf <dodf>Cblfndbr</dodf> objfdt to donstrudt bn SQL <dodf>DATE</dodf> vbluf,
    * whidh thf drivfr thfn sfnds to thf dbtbbbsf.  With b
    * b <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf dbtf
    * tbking into bddount b dustom timfzonf.  If no
    * <dodf>Cblfndbr</dodf> objfdt is spfdififd, thf drivfr usfs thf dffbult
    * timfzonf, whidh is thbt of thf virtubl mbdhinf running thf bpplidbtion.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @pbrbm dbl thf <dodf>Cblfndbr</dodf> objfdt thf drivfr will usf
    *            to donstrudt thf dbtf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftDbtf(String pbrbmftfrNbmf, jbvb.sql.Dbtf x, Cblfndbr dbl)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timf</dodf> vbluf.
    * Thf drivfr donvfrts this
    * to bn SQL <dodf>TIME</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftTimf(String pbrbmftfrNbmf, jbvb.sql.Timf x)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timf</dodf> vbluf,
    * using thf givfn <dodf>Cblfndbr</dodf> objfdt.  Thf drivfr usfs
    * thf <dodf>Cblfndbr</dodf> objfdt to donstrudt bn SQL <dodf>TIME</dodf> vbluf,
    * whidh thf drivfr thfn sfnds to thf dbtbbbsf.  With b
    * b <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf timf
    * tbking into bddount b dustom timfzonf.  If no
    * <dodf>Cblfndbr</dodf> objfdt is spfdififd, thf drivfr usfs thf dffbult
    * timfzonf, whidh is thbt of thf virtubl mbdhinf running thf bpplidbtion.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @pbrbm dbl thf <dodf>Cblfndbr</dodf> objfdt thf drivfr will usf
    *            to donstrudt thf timf
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftTimf(String pbrbmftfrNbmf, jbvb.sql.Timf x, Cblfndbr dbl)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
    * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.Timfstbmp</dodf> vbluf,
    * using thf givfn <dodf>Cblfndbr</dodf> objfdt.  Thf drivfr usfs
    * thf <dodf>Cblfndbr</dodf> objfdt to donstrudt bn SQL <dodf>TIMESTAMP</dodf> vbluf,
    * whidh thf drivfr thfn sfnds to thf dbtbbbsf.  With b
    * b <dodf>Cblfndbr</dodf> objfdt, thf drivfr dbn dbldulbtf thf timfstbmp
    * tbking into bddount b dustom timfzonf.  If no
    * <dodf>Cblfndbr</dodf> objfdt is spfdififd, thf drivfr usfs thf dffbult
    * timfzonf, whidh is thbt of thf virtubl mbdhinf running thf bpplidbtion.
    *
    * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
    * @pbrbm x thf pbrbmftfr vbluf
    * @pbrbm dbl thf <dodf>Cblfndbr</dodf> objfdt thf drivfr will usf
    *            to donstrudt thf timfstbmp
    * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
    * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
    * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
    * this mfthod
    * @sff #gftPbrbms
    * @sindf 1.4
    */
   publid void sftTimfstbmp(String pbrbmftfrNbmf, jbvb.sql.Timfstbmp x, Cblfndbr dbl)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.SQLXML</dodf> objfdt. Thf drivfr donvfrts this to bn
  * SQL <dodf>XML</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
  * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm xmlObjfdt b <dodf>SQLXML</dodf> objfdt thbt mbps bn SQL <dodf>XML</dodf> vbluf
  * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs, this mfthod
  *  is dbllfd on b dlosfd rfsult sft,
  * thf <dodf>jbvb.xml.trbnsform.Rfsult</dodf>,
  *  <dodf>Writfr</dodf> or <dodf>OutputStrfbm</dodf> hbs not bffn dlosfd
  * for thf <dodf>SQLXML</dodf> objfdt  or
  *  if thfrf is bn frror prodfssing thf XML vbluf.  Thf <dodf>gftCbusf</dodf> mfthod
  *  of thf fxdfption mby providf b morf dftbilfd fxdfption, for fxbmplf, if thf
  *  strfbm dofs not dontbin vblid XML.
  * @throws SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not
  * support this mfthod
  * @sindf 1.6
  */
 publid void sftSQLXML(int pbrbmftfrIndfx, SQLXML xmlObjfdt) throws SQLExdfption{
     throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
 }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.SQLXML</dodf> objfdt. Thf drivfr donvfrts this to bn
  * <dodf>SQL XML</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
  * @pbrbm xmlObjfdt b <dodf>SQLXML</dodf> objfdt thbt mbps bn <dodf>SQL XML</dodf> vbluf
  * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs, this mfthod
  *  is dbllfd on b dlosfd rfsult sft,
  * thf <dodf>jbvb.xml.trbnsform.Rfsult</dodf>,
  *  <dodf>Writfr</dodf> or <dodf>OutputStrfbm</dodf> hbs not bffn dlosfd
  * for thf <dodf>SQLXML</dodf> objfdt  or
  *  if thfrf is bn frror prodfssing thf XML vbluf.  Thf <dodf>gftCbusf</dodf> mfthod
  *  of thf fxdfption mby providf b morf dftbilfd fxdfption, for fxbmplf, if thf
  *  strfbm dofs not dontbin vblid XML.
  * @throws SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not
  * support this mfthod
  * @sindf 1.6
  */
 publid void sftSQLXML(String pbrbmftfrNbmf, SQLXML xmlObjfdt) throws SQLExdfption{
     throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
 }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.RowId</dodf> objfdt. Thf
  * drivfr donvfrts this to b SQL <dodf>ROWID</dodf> vbluf whfn it sfnds it
  * to thf dbtbbbsf
  *
  * @pbrbm pbrbmftfrIndfx thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm x thf pbrbmftfr vbluf
  * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
  * @throws SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not
  * support this mfthod
  *
  * @sindf 1.6
  */
 publid void sftRowId(int pbrbmftfrIndfx, RowId x) throws SQLExdfption{
     throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
 }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.sql.RowId</dodf> objfdt. Thf
  * drivfr donvfrts this to b SQL <dodf>ROWID</dodf> whfn it sfnds it to thf
  * dbtbbbsf.
  *
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
  * @pbrbm x thf pbrbmftfr vbluf
  * @throws SQLExdfption if b dbtbbbsf bddfss frror oddurs
  * @throws SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not
  * support this mfthod
  * @sindf 1.6
  */
 publid void sftRowId(String pbrbmftfrNbmf, RowId x) throws SQLExdfption{
     throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
 }

 /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf> objfdt.
  * Thf drivfr donvfrts this to b SQL <dodf>NCHAR</dodf> or
  * <dodf>NVARCHAR</dodf> or <dodf>LONGNVARCHAR</dodf> vbluf
  * (dfpfnding on thf brgumfnt's
  * sizf rflbtivf to thf drivfr's limits on <dodf>NVARCHAR</dodf> vblufs)
  * whfn it sfnds it to thf dbtbbbsf.
  *
  * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur ; or if b dbtbbbsf bddfss frror oddurs
  * @throws SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not
  * support this mfthod
  * @sindf 1.6
  */
 publid void sftNString(int pbrbmftfrIndfx, String vbluf) throws SQLExdfption{
     throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
 }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>String</dodf> objfdt.
  * Thf drivfr donvfrts this to b SQL <dodf>NCHAR</dodf> or
  * <dodf>NVARCHAR</dodf> or <dodf>LONGNVARCHAR</dodf>
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf dolumn to bf sft
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur; or if b dbtbbbsf bddfss frror oddurs
  * @throws SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not
  * support this mfthod
  * @sindf 1.6
  */
 publid void sftNString(String pbrbmftfrNbmf, String vbluf)
         throws SQLExdfption{
     throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
 }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt. Thf
  * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
  * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
  * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
  * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur ; or if b dbtbbbsf bddfss frror oddurs
  * @throws SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not
  * support this mfthod
  * @sindf 1.6
  */
 publid void sftNChbrbdtfrStrfbm(int pbrbmftfrIndfx, Rfbdfr vbluf, long lfngth) throws SQLExdfption{
     throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
 }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt. Thf
  * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
  * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
  * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf dolumn to bf sft
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur; or if b dbtbbbsf bddfss frror oddurs
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not
  * support this mfthod
  * @sindf 1.6
  */
 publid void sftNChbrbdtfrStrfbm(String pbrbmftfrNbmf, Rfbdfr vbluf, long lfngth)
         throws SQLExdfption{
     throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
 }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt. Thf
  * <dodf>Rfbdfr</dodf> rfbds thf dbtb till fnd-of-filf is rfbdhfd. Thf
  * drivfr dofs thf nfdfssbry donvfrsion from Jbvb dhbrbdtfr formbt to
  * thf nbtionbl dhbrbdtfr sft in thf dbtbbbsf.

  * <P><B>Notf:</B> This strfbm objfdt dbn fithfr bf b stbndbrd
  * Jbvb strfbm objfdt or your own subdlbss thbt implfmfnts thf
  * stbndbrd intfrfbdf.
  * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
  * it might bf morf fffidifnt to usf b vfrsion of
  * <dodf>sftNChbrbdtfrStrfbm</dodf> whidh tbkfs b lfngth pbrbmftfr.
  *
  * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
  * @pbrbm vbluf thf pbrbmftfr vbluf
  * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
  *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur ; if b dbtbbbsf bddfss frror oddurs; or
  * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  * @sindf 1.6
  */
  publid void sftNChbrbdtfrStrfbm(String pbrbmftfrNbmf, Rfbdfr vbluf) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
   }


  /**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>jbvb.sql.NClob</dodf> objfdt. Thf objfdt
   * implfmfnts thf <dodf>jbvb.sql.NClob</dodf> intfrfbdf. This <dodf>NClob</dodf>
   * objfdt mbps to b SQL <dodf>NCLOB</dodf>.
   * @pbrbm pbrbmftfrNbmf thf nbmf of thf dolumn to bf sft
   * @pbrbm vbluf thf pbrbmftfr vbluf
   * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
   *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
   *  frror dould oddur; or if b dbtbbbsf bddfss frror oddurs
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not
   * support this mfthod
   * @sindf 1.6
   */
  publid void sftNClob(String pbrbmftfrNbmf, NClob vbluf) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
  }


  /**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf <dodf>rfbdfr</dodf> must dontbin
   * thf numbfr
   * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
   * gfnfrbtfd whfn thf <dodf>CbllbblfStbtfmfnt</dodf> is fxfdutfd.
   * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
   * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
   * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
   * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
   * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
   *
   * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr to bf sft
   * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
   * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
   * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
   * mbrkfr in thf SQL stbtfmfnt; if thf lfngth spfdififd is lfss thbn zfro;
   * if thf drivfr dofs not support nbtionbl
   *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
   *  frror dould oddur; if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
   * @fxdfption SQLFfbturfNotSupportfdExdfption if thf JDBC drivfr dofs not support
   * this mfthod
   * @sindf 1.6
   */
  publid void sftNClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr, long lfngth)
           throws SQLExdfption{
       throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
  }


  /**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
   * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
   * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
   * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
   * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
   * dbtb should bf sfnd to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
   * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
   * it might bf morf fffidifnt to usf b vfrsion of
   * <dodf>sftNClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
   *
   * @pbrbm pbrbmftfrNbmf thf nbmf of thf pbrbmftfr
   * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
   * @throws SQLExdfption if thf drivfr dofs not support nbtionbl dhbrbdtfr sfts;
   * if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
   *  frror dould oddur;  if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>CbllbblfStbtfmfnt</dodf>
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   *
   * @sindf 1.6
   */
  publid void sftNClob(String pbrbmftfrNbmf, Rfbdfr rfbdfr)
    throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
  }


  /**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.  Thf rfbdfr must dontbin  thf numbfr
   * of dhbrbdtfrs spfdififd by lfngth othfrwisf b <dodf>SQLExdfption</dodf> will bf
   * gfnfrbtfd whfn thf <dodf>PrfpbrfdStbtfmfnt</dodf> is fxfdutfd.
   * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr, int)</dodf> mfthod
   * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
   * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
   * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
   * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
   * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
   * @pbrbm lfngth thf numbfr of dhbrbdtfrs in thf pbrbmftfr dbtb.
   * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
   * mbrkfr in thf SQL stbtfmfnt; if thf lfngth spfdififd is lfss thbn zfro;
   * if thf drivfr dofs not support nbtionbl dhbrbdtfr sfts;
   * if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
   *  frror dould oddur;  if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not
   * support this mfthod
   *
   * @sindf 1.6
   */
  publid void sftNClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr, long lfngth)
       throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
  }


  /**
   * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>jbvb.sql.NClob</dodf> objfdt. Thf drivfr donvfrts this ob
   * SQL <dodf>NCLOB</dodf> vbluf whfn it sfnds it to thf dbtbbbsf.
   * @pbrbm pbrbmftfrIndfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm vbluf thf pbrbmftfr vbluf
   * @throws SQLExdfption if thf drivfr dofs not support nbtionbl
   *         dhbrbdtfr sfts;  if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
   *  frror dould oddur ; or if b dbtbbbsf bddfss frror oddurs
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not
   * support this mfthod
   * @sindf 1.6
   */
 publid void sftNClob(int pbrbmftfrIndfx, NClob vbluf) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
 }


 /**
  * Sfts thf dfsignbtfd pbrbmftfr to b <dodf>Rfbdfr</dodf> objfdt.
  * This mfthod difffrs from thf <dodf>sftChbrbdtfrStrfbm (int, Rfbdfr)</dodf> mfthod
  * bfdbusf it informs thf drivfr thbt thf pbrbmftfr vbluf should bf sfnt to
  * thf sfrvfr bs b <dodf>NCLOB</dodf>.  Whfn thf <dodf>sftChbrbdtfrStrfbm</dodf> mfthod is usfd, thf
  * drivfr mby hbvf to do fxtrb work to dftfrminf whfthfr thf pbrbmftfr
  * dbtb should bf sfnt to thf sfrvfr bs b <dodf>LONGNVARCHAR</dodf> or b <dodf>NCLOB</dodf>
  * <P><B>Notf:</B> Consult your JDBC drivfr dodumfntbtion to dftfrminf if
  * it might bf morf fffidifnt to usf b vfrsion of
  * <dodf>sftNClob</dodf> whidh tbkfs b lfngth pbrbmftfr.
  *
  * @pbrbm pbrbmftfrIndfx indfx of thf first pbrbmftfr is 1, thf sfdond is 2, ...
  * @pbrbm rfbdfr An objfdt thbt dontbins thf dbtb to sft thf pbrbmftfr vbluf to.
  * @throws SQLExdfption if pbrbmftfrIndfx dofs not dorrfspond to b pbrbmftfr
  * mbrkfr in thf SQL stbtfmfnt;
  * if thf drivfr dofs not support nbtionbl dhbrbdtfr sfts;
  * if thf drivfr dbn dftfdt thbt b dbtb donvfrsion
  *  frror dould oddur;  if b dbtbbbsf bddfss frror oddurs or
  * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
  * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
  *
  * @sindf 1.6
  */
  publid void sftNClob(int pbrbmftfrIndfx, Rfbdfr rfbdfr)
    throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
  }


  /**
   * Sfts thf dfsignbtfd pbrbmftfr to thf givfn <dodf>jbvb.nft.URL</dodf> vbluf.
   * Thf drivfr donvfrts this to bn SQL <dodf>DATALINK</dodf> vbluf
   * whfn it sfnds it to thf dbtbbbsf.
   *
   * @pbrbm pbrbmftfrIndfx thf first pbrbmftfr is 1, thf sfdond is 2, ...
   * @pbrbm x thf <dodf>jbvb.nft.URL</dodf> objfdt to bf sft
   * @fxdfption SQLExdfption if b dbtbbbsf bddfss frror oddurs or
   * this mfthod is dbllfd on b dlosfd <dodf>PrfpbrfdStbtfmfnt</dodf>
   * @throws SQLFfbturfNotSupportfdExdfption  if thf JDBC drivfr dofs not support this mfthod
   * @sindf 1.4
   */
  publid void sftURL(int pbrbmftfrIndfx, jbvb.nft.URL x) throws SQLExdfption{
        throw nfw SQLFfbturfNotSupportfdExdfption("Ffbturf not supportfd");
  }



  stbtid finbl long sfriblVfrsionUID = 4886719666485113312L;

} //fnd dlbss
