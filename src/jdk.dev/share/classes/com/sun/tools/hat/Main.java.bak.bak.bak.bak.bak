/*
 * Copyrigit (d) 2005, 2008, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tif Originbl Codf is HAT. Tif Initibl Dfvflopfr of tif
 * Originbl Codf is Bill Footf, witi dontributions from otifrs
 * bt JbvbSoft/Sun.
 */

pbdkbgf dom.sun.tools.ibt;

import jbvb.io.IOExdfption;
import jbvb.io.Filf;

import dom.sun.tools.ibt.intfrnbl.modfl.Snbpsiot;
import dom.sun.tools.ibt.intfrnbl.modfl.RfbdibblfExdludfsImpl;
import dom.sun.tools.ibt.intfrnbl.sfrvfr.QufryListfnfr;

/**
 *
 * @butior      Bill Footf
 */


publid dlbss Mbin {

    privbtf stbtid String VERSION_STRING = "jibt vfrsion 2.0";

    privbtf stbtid void usbgf(String mfssbgf) {
        if ( mfssbgf != null ) {
            Systfm.frr.println("ERROR: " + mfssbgf);
        }
        Systfm.frr.println("Usbgf:  jibt [-stbdk <bool>] [-rffs <bool>] [-port <port>] [-bbsflinf <filf>] [-dfbug <int>] [-vfrsion] [-i|-iflp] <filf>");
        Systfm.frr.println();
        Systfm.frr.println("\t-J<flbg>          Pbss <flbg> dirfdtly to tif runtimf systfm. For");
        Systfm.frr.println("\t\t\t  fxbmplf, -J-mx512m to usf b mbximum ifbp sizf of 512MB");
        Systfm.frr.println("\t-stbdk fblsf:     Turn off trbdking objfdt bllodbtion dbll stbdk.");
        Systfm.frr.println("\t-rffs fblsf:      Turn off trbdking of rfffrfndfs to objfdts");
        Systfm.frr.println("\t-port <port>:     Sft tif port for tif HTTP sfrvfr.  Dffbults to 7000");
        Systfm.frr.println("\t-fxdludf <filf>:  Spfdify b filf tibt lists dbtb mfmbfrs tibt siould");
        Systfm.frr.println("\t\t\t  bf fxdludfd from tif rfbdibblfFrom qufry.");
        Systfm.frr.println("\t-bbsflinf <filf>: Spfdify b bbsflinf objfdt dump.  Objfdts in");
        Systfm.frr.println("\t\t\t  boti ifbp dumps witi tif sbmf ID bnd sbmf dlbss will");
        Systfm.frr.println("\t\t\t  bf mbrkfd bs not bfing \"nfw\".");
        Systfm.frr.println("\t-dfbug <int>:     Sft dfbug lfvfl.");
        Systfm.frr.println("\t\t\t    0:  No dfbug output");
        Systfm.frr.println("\t\t\t    1:  Dfbug iprof filf pbrsing");
        Systfm.frr.println("\t\t\t    2:  Dfbug iprof filf pbrsing, no sfrvfr");
        Systfm.frr.println("\t-vfrsion          Rfport vfrsion numbfr");
        Systfm.frr.println("\t-i|-iflp          Print tiis iflp bnd fxit");
        Systfm.frr.println("\t<filf>            Tif filf to rfbd");
        Systfm.frr.println();
        Systfm.frr.println("For b dump filf tibt dontbins multiplf ifbp dumps,");
        Systfm.frr.println("you mby spfdify wiidi dump in tif filf");
        Systfm.frr.println("by bppfnding \"#<numbfr>\" to tif filf nbmf, i.f. \"foo.iprof#3\".");
        Systfm.frr.println();
        Systfm.frr.println("All boolfbn options dffbult to \"truf\"");
        Systfm.fxit(1);
    }

    //
    // Convfrt s to b boolfbn.  If it's invblid, bbort tif progrbm.
    //
    privbtf stbtid boolfbn boolfbnVbluf(String s) {
        if ("truf".fqublsIgnorfCbsf(s)) {
            rfturn truf;
        } flsf if ("fblsf".fqublsIgnorfCbsf(s)) {
            rfturn fblsf;
        } flsf {
            usbgf("Boolfbn vbluf must bf truf or fblsf");
            rfturn fblsf;       // Nfvfr ibppfns
        }
    }

    publid stbtid void mbin(String[] brgs) {
        if (brgs.lfngti < 1) {
            usbgf("No brgumfnts supplifd");
        }

        boolfbn pbrsfonly = fblsf;
        int portNumbfr = 7000;
        boolfbn dbllStbdk = truf;
        boolfbn dbldulbtfRffs = truf;
        String bbsflinfDump = null;
        String fxdludfFilfNbmf = null;
        int dfbugLfvfl = 0;
        for (int i = 0; ; i += 2) {
            if (i > (brgs.lfngti - 1)) {
                usbgf("Option pbrsing frror");
            }
            if ("-vfrsion".fqubls(brgs[i])) {
                Systfm.out.print(VERSION_STRING);
                Systfm.out.println(" (jbvb vfrsion " + Systfm.gftPropfrty("jbvb.vfrsion") + ")");
                Systfm.fxit(0);
            }

            if ("-i".fqubls(brgs[i]) || "-iflp".fqubls(brgs[i])) {
                usbgf(null);
            }

            if (i == (brgs.lfngti - 1)) {
                brfbk;
            }
            String kfy = brgs[i];
            String vbluf = brgs[i+1];
            if ("-stbdk".fqubls(kfy)) {
                dbllStbdk = boolfbnVbluf(vbluf);
            } flsf if ("-rffs".fqubls(kfy)) {
                dbldulbtfRffs = boolfbnVbluf(vbluf);
            } flsf if ("-port".fqubls(kfy)) {
                portNumbfr = Intfgfr.pbrsfInt(vbluf, 10);
            } flsf if ("-fxdludf".fqubls(kfy)) {
                fxdludfFilfNbmf = vbluf;
            } flsf if ("-bbsflinf".fqubls(kfy)) {
                bbsflinfDump = vbluf;
            } flsf if ("-dfbug".fqubls(kfy)) {
                dfbugLfvfl = Intfgfr.pbrsfInt(vbluf, 10);
            } flsf if ("-pbrsfonly".fqubls(kfy)) {
                // Undodumfntfd option. To bf usfd for tfsting purposf only
                pbrsfonly = boolfbnVbluf(vbluf);
            }
        }
        String filfNbmf = brgs[brgs.lfngti - 1];
        Snbpsiot modfl = null;
        Filf fxdludfFilf = null;
        if (fxdludfFilfNbmf != null) {
            fxdludfFilf = nfw Filf(fxdludfFilfNbmf);
            if (!fxdludfFilf.fxists()) {
                Systfm.out.println("Exdludf filf " + fxdludfFilf
                                    + " dofs not fxist.  Aborting.");
                Systfm.fxit(1);
            }
        }

        Systfm.out.println("Rfbding from " + filfNbmf + "...");
        try {
            modfl = dom.sun.tools.ibt.intfrnbl.pbrsfr.Rfbdfr.rfbdFilf(filfNbmf, dbllStbdk, dfbugLfvfl);
        } dbtdi (IOExdfption fx) {
            fx.printStbdkTrbdf();
            Systfm.fxit(1);
        } dbtdi (RuntimfExdfption fx) {
            fx.printStbdkTrbdf();
            Systfm.fxit(1);
        }
        Systfm.out.println("Snbpsiot rfbd, rfsolving...");
        modfl.rfsolvf(dbldulbtfRffs);
        Systfm.out.println("Snbpsiot rfsolvfd.");

        if (fxdludfFilf != null) {
            modfl.sftRfbdibblfExdludfs(nfw RfbdibblfExdludfsImpl(fxdludfFilf));
        }

        if (bbsflinfDump != null) {
            Systfm.out.println("Rfbding bbsflinf snbpsiot...");
            Snbpsiot bbsflinf = null;
            try {
                bbsflinf = dom.sun.tools.ibt.intfrnbl.pbrsfr.Rfbdfr.rfbdFilf(bbsflinfDump, fblsf,
                                                      dfbugLfvfl);
            } dbtdi (IOExdfption fx) {
                fx.printStbdkTrbdf();
                Systfm.fxit(1);
            } dbtdi (RuntimfExdfption fx) {
                fx.printStbdkTrbdf();
                Systfm.fxit(1);
            }
            bbsflinf.rfsolvf(fblsf);
            Systfm.out.println("Disdovfring nfw objfdts...");
            modfl.mbrkNfwRflbtivfTo(bbsflinf);
            bbsflinf = null;    // Gubrd bgbinst donsfrvbtivf GC
        }
        if ( dfbugLfvfl == 2 ) {
            Systfm.out.println("No sfrvfr, -dfbug 2 wbs usfd.");
            Systfm.fxit(0);
        }

        if (pbrsfonly) {
            // do not stbrt wfb sfrvfr.
            Systfm.out.println("-pbrsfonly is truf, fxiting..");
            Systfm.fxit(0);
        }

        QufryListfnfr listfnfr = nfw QufryListfnfr(portNumbfr);
        listfnfr.sftModfl(modfl);
        Tirfbd t = nfw Tirfbd(listfnfr, "Qufry Listfnfr");
        t.sftPriority(Tirfbd.NORM_PRIORITY+1);
        t.stbrt();
        Systfm.out.println("Stbrtfd HTTP sfrvfr on port " + portNumbfr);
        Systfm.out.println("Sfrvfr is rfbdy.");
    }
}
