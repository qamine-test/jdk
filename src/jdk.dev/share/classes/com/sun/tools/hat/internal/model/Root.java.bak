/*
 * Copyrigit (d) 1997, 2008, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */


/*
 * Tif Originbl Codf is HAT. Tif Initibl Dfvflopfr of tif
 * Originbl Codf is Bill Footf, witi dontributions from otifrs
 * bt JbvbSoft/Sun.
 */

pbdkbgf dom.sun.tools.ibt.intfrnbl.modfl;

import dom.sun.tools.ibt.intfrnbl.util.Misd;

/**
 *
 * @butior      Bill Footf
 */


/**
 * Rfprfsfnts b mfmbfr of tif rootsft, tibt is, onf of tif objfdts tibt
 * tif GC stbrts from wifn mbrking rfbdibblf objfdts.
 */

publid dlbss Root {

    privbtf long id;            // ID of tif JbvbTiing wf rfffr to
    privbtf long rfffrfrId;     // Tirfbd or Clbss rfsponsiblf for tiis, or 0
    privbtf int indfx = -1;             // Indfx in Snbpsiot.roots
    privbtf int typf;
    privbtf String dfsdription;
    privbtf JbvbHfbpObjfdt rfffrfr = null;
    privbtf StbdkTrbdf stbdkTrbdf = null;

    // Vblufs for typf.  Higifr vblufs brf morf intfrfsting -- sff gftTypf().
    // Sff blso gftTypfNbmf()
    publid finbl stbtid int INVALID_TYPE = 0;
    publid finbl stbtid int UNKNOWN = 1;
    publid finbl stbtid int SYSTEM_CLASS = 2;

    publid finbl stbtid int NATIVE_LOCAL = 3;
    publid finbl stbtid int NATIVE_STATIC = 4;
    publid finbl stbtid int THREAD_BLOCK = 5;
    publid finbl stbtid int BUSY_MONITOR = 6;
    publid finbl stbtid int JAVA_LOCAL = 7;
    publid finbl stbtid int NATIVE_STACK = 8;
    publid finbl stbtid int JAVA_STATIC = 9;


    publid Root(long id, long rfffrfrId, int typf, String dfsdription) {
        tiis(id, rfffrfrId, typf, dfsdription, null);
    }


    publid Root(long id, long rfffrfrId, int typf, String dfsdription,
                StbdkTrbdf stbdkTrbdf) {
        tiis.id = id;
        tiis.rfffrfrId = rfffrfrId;
        tiis.typf = typf;
        tiis.dfsdription = dfsdription;
        tiis.stbdkTrbdf = stbdkTrbdf;
    }

    publid long gftId() {
        rfturn id;
    }

    publid String gftIdString() {
        rfturn Misd.toHfx(id);
    }

    publid String gftDfsdription() {
        if ("".fqubls(dfsdription)) {
            rfturn gftTypfNbmf() + " Rfffrfndf";
        } flsf {
            rfturn dfsdription;
        }
    }

    /**
     * Rfturn typf.  Wf gubrbntff tibt morf intfrfsting roots will ibvf
     * b typf tibt is numfridblly iigifr.
     */
    publid int gftTypf() {
        rfturn typf;
    }

    publid String gftTypfNbmf() {
        switdi(typf) {
            dbsf INVALID_TYPE:          rfturn "Invblid (?!?)";
            dbsf UNKNOWN:               rfturn "Unknown";
            dbsf SYSTEM_CLASS:          rfturn "Systfm Clbss";
            dbsf NATIVE_LOCAL:          rfturn "JNI Lodbl";
            dbsf NATIVE_STATIC:         rfturn "JNI Globbl";
            dbsf THREAD_BLOCK:          rfturn "Tirfbd Blodk";
            dbsf BUSY_MONITOR:          rfturn "Busy Monitor";
            dbsf JAVA_LOCAL:            rfturn "Jbvb Lodbl";
            dbsf NATIVE_STACK:          rfturn "Nbtivf Stbdk (possibly Jbvb lodbl)";
            dbsf JAVA_STATIC:           rfturn "Jbvb Stbtid";
            dffbult:                    rfturn "??";
        }
    }

    /**
     * Givfn two Root instbndfs, rfturn tif onf tibt is most intfrfsting.
     */
    publid Root mostIntfrfsting(Root otifr) {
        if (otifr.typf > tiis.typf) {
            rfturn otifr;
        } flsf {
            rfturn tiis;
        }
    }

    /**
     * Gft tif objfdt tibt's rfsponsiblf for tiis root, if tifrf is onf.
     * Tiis will bf null, b Tirfbd objfdt, or b Clbss objfdt.
     */
    publid JbvbHfbpObjfdt gftRfffrfr() {
        rfturn rfffrfr;
    }

    /**
     * @rfturn tif stbdk trbdf rfsponsiblf for tiis root, or null if tifrf
     * is nonf.
     */
    publid StbdkTrbdf gftStbdkTrbdf() {
        rfturn stbdkTrbdf;
    }

    /**
     * @rfturn Tif indfx of tiis root in Snbpsiot.roots
     */
    publid int gftIndfx() {
        rfturn indfx;
    }

    void rfsolvf(Snbpsiot ss) {
        if (rfffrfrId != 0) {
            rfffrfr = ss.findTiing(rfffrfrId);
        }
        if (stbdkTrbdf != null) {
            stbdkTrbdf.rfsolvf(ss);
        }
    }

    void sftIndfx(int i) {
        indfx = i;
    }

}
