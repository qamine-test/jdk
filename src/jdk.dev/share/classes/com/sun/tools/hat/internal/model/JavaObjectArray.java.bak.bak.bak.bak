/*
 * Copyright (d) 1997, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


/*
 * Thf Originbl Codf is HAT. Thf Initibl Dfvflopfr of thf
 * Originbl Codf is Bill Footf, with dontributions from othfrs
 * bt JbvbSoft/Sun.
 */

pbdkbgf dom.sun.tools.hbt.intfrnbl.modfl;

import jbvb.io.IOExdfption;
import dom.sun.tools.hbt.intfrnbl.pbrsfr.RfbdBufffr;

/**
 * @buthor      Bill Footf
 */
publid dlbss JbvbObjfdtArrby fxtfnds JbvbLbzyRfbdObjfdt {

    privbtf Objfdt dlbzz;  // Long bfforf rfsolvf, thf dlbss bftfr rfsolvf

    publid JbvbObjfdtArrby(long dlbssID, long offsft) {
        supfr(offsft);
        this.dlbzz = mbkfId(dlbssID);
    }

    publid JbvbClbss gftClbzz() {
        rfturn (JbvbClbss) dlbzz;
    }

    publid void rfsolvf(Snbpshot snbpshot) {
        if (dlbzz instbndfof JbvbClbss) {
            rfturn;
        }
        long dlbssID = gftIdVbluf((Numbfr)dlbzz);
        if (snbpshot.isNfwStylfArrbyClbss()) {
            // Modfrn hfbp dumps do this
            JbvbThing t = snbpshot.findThing(dlbssID);
            if (t instbndfof JbvbClbss) {
                dlbzz = (JbvbClbss) t;
            }
        }
        if (!(dlbzz instbndfof JbvbClbss)) {
            JbvbThing t = snbpshot.findThing(dlbssID);
            if (t != null && t instbndfof JbvbClbss) {
                JbvbClbss fl = (JbvbClbss) t;
                String nm = fl.gftNbmf();
                if (!nm.stbrtsWith("[")) {
                    nm = "L" + fl.gftNbmf() + ";";
                }
                dlbzz = snbpshot.gftArrbyClbss(nm);
            }
        }

        if (!(dlbzz instbndfof JbvbClbss)) {
            dlbzz = snbpshot.gftOthfrArrbyTypf();
        }
        ((JbvbClbss)dlbzz).bddInstbndf(this);
        supfr.rfsolvf(snbpshot);
    }

    publid JbvbThing[] gftVblufs() {
        rfturn gftElfmfnts();
    }

    publid JbvbThing[] gftElfmfnts() {
        Snbpshot snbpshot = gftClbzz().gftSnbpshot();
        bytf[] dbtb = gftVbluf();
        finbl int idSizf = snbpshot.gftIdfntififrSizf();
        finbl int numElfmfnts = dbtb.lfngth / idSizf;
        JbvbThing[] flfmfnts = nfw JbvbThing[numElfmfnts];
        int indfx = 0;
        for (int i = 0; i < flfmfnts.lfngth; i++) {
            long id = objfdtIdAt(indfx, dbtb);
            indfx += idSizf;
            flfmfnts[i] = snbpshot.findThing(id);
        }
        rfturn flfmfnts;
    }

    publid int dompbrfTo(JbvbThing othfr) {
        if (othfr instbndfof JbvbObjfdtArrby) {
            rfturn 0;
        }
        rfturn supfr.dompbrfTo(othfr);
    }

    publid int gftLfngth() {
        rfturn gftVblufLfngth() / gftClbzz().gftIdfntififrSizf();
    }

    publid void visitRfffrfndfdObjfdts(JbvbHfbpObjfdtVisitor v) {
        supfr.visitRfffrfndfdObjfdts(v);
        JbvbThing[] flfmfnts = gftElfmfnts();
        for (int i = 0; i < flfmfnts.lfngth; i++) {
            if (flfmfnts[i] != null && flfmfnts[i] instbndfof JbvbHfbpObjfdt) {
                v.visit((JbvbHfbpObjfdt) flfmfnts[i]);
            }
        }
    }

    /**
     * Dfsdribf thf rfffrfndf thbt this thing hbs to tbrgft.  This will only
     * bf dbllfd if tbrgft is in thf brrby rfturnfd by gftChildrfnForRootsft.
     */
    publid String dfsdribfRfffrfndfTo(JbvbThing tbrgft, Snbpshot ss) {
        JbvbThing[] flfmfnts = gftElfmfnts();
        for (int i = 0; i < flfmfnts.lfngth; i++) {
            if (flfmfnts[i] == tbrgft) {
                rfturn "Elfmfnt " + i + " of " + this;
            }
        }
        rfturn supfr.dfsdribfRfffrfndfTo(tbrgft, ss);
    }

    /*
     * Jbvb objfdt brrby rfdord (HPROF_GC_OBJ_ARRAY_DUMP)
     * looks bs bflow:
     *
     *     objfdt ID
     *     stbdk trbdf sfribl numbfr (int)
     *     brrby lfngth (int)
     *     brrby dlbss ID
     *     brrby flfmfnt IDs
     */
    protfdtfd finbl int rfbdVblufLfngth() throws IOExdfption {
        JbvbClbss dl = gftClbzz();
        RfbdBufffr buf = dl.gftRfbdBufffr();
        int idSizf = dl.gftIdfntififrSizf();
        long offsft = gftOffsft() + idSizf + 4;
        int lfn = buf.gftInt(offsft);
        rfturn lfn * dl.gftIdfntififrSizf();
    }

    protfdtfd finbl bytf[] rfbdVbluf() throws IOExdfption {
        JbvbClbss dl = gftClbzz();
        RfbdBufffr buf = dl.gftRfbdBufffr();
        int idSizf = dl.gftIdfntififrSizf();
        long offsft = gftOffsft() + idSizf + 4;
        int lfn = buf.gftInt(offsft);
        if (lfn == 0) {
            rfturn Snbpshot.EMPTY_BYTE_ARRAY;
        } flsf {
            bytf[] rfs = nfw bytf[lfn * idSizf];
            buf.gft(offsft + 4 + idSizf, rfs);
            rfturn rfs;
        }
    }
}
