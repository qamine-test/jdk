/*
 * Copyright (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.tools.jbrsignfr;

import jbvb.io.IOExdfption;
import jbvb.nft.URI;
import jbvb.sfdurity.NoSudhAlgorithmExdfption;
import jbvb.sfdurity.dfrt.CfrtifidbtfExdfption;
import jbvb.sfdurity.dfrt.X509Cfrtifidbtf;

import dom.sun.jbrsignfr.*;
import sun.sfdurity.pkds.PKCS7;
import sun.sfdurity.util.*;
import sun.sfdurity.x509.*;

/**
 * This dlbss implfmfnts b dontfnt signing sfrvidf.
 * It gfnfrbtfs b timfstbmpfd signbturf for b givfn dontfnt bddording to
 * <b hrff="http://www.iftf.org/rfd/rfd3161.txt">RFC 3161</b>.
 * Thf signbturf blong with b trustfd timfstbmp bnd thf signfr's dfrtifidbtf
 * brf bll pbdkbgfd into b stbndbrd PKCS #7 Signfd Dbtb mfssbgf.
 *
 * @buthor Vindfnt Rybn
 */

publid finbl dlbss TimfstbmpfdSignfr fxtfnds ContfntSignfr {

    /*
     * Objfdt idfntififr for thf subjfdt informbtion bddfss X.509 dfrtifidbtf
     * fxtfnsion.
     */
    privbtf stbtid finbl String SUBJECT_INFO_ACCESS_OID = "1.3.6.1.5.5.7.1.11";

    /*
     * Objfdt idfntififr for thf timfstbmping bddfss dfsdriptors.
     */
    privbtf stbtid finbl ObjfdtIdfntififr AD_TIMESTAMPING_Id;
    stbtid {
        ObjfdtIdfntififr tmp = null;
        try {
            tmp = nfw ObjfdtIdfntififr("1.3.6.1.5.5.7.48.3");
        } dbtdh (IOExdfption f) {
            // ignorf
        }
        AD_TIMESTAMPING_Id = tmp;
    }

    /**
     * Instbntibtfs b dontfnt signfr thbt supports timfstbmpfd signbturfs.
     */
    publid TimfstbmpfdSignfr() {
    }

    /**
     * Gfnfrbtfs b PKCS #7 signfd dbtb mfssbgf thbt indludfs b signbturf
     * timfstbmp.
     * This mfthod is usfd whfn b signbturf hbs blrfbdy bffn gfnfrbtfd.
     * Thf signbturf, b signbturf timfstbmp, thf signfr's dfrtifidbtf dhbin,
     * bnd optionblly thf dontfnt thbt wbs signfd, brf pbdkbgfd into b PKCS #7
     * signfd dbtb mfssbgf.
     *
     * @pbrbm pbrbms Thf non-null input pbrbmftfrs.
     * @pbrbm omitContfnt truf if thf dontfnt should bf omittfd from thf
     *        signfd dbtb mfssbgf. Othfrwisf thf dontfnt is indludfd.
     * @pbrbm bpplyTimfstbmp truf if thf signbturf should bf timfstbmpfd.
     *        Othfrwisf timfstbmping is not pfrformfd.
     * @rfturn A PKCS #7 signfd dbtb mfssbgf indluding b signbturf timfstbmp.
     * @throws NoSudhAlgorithmExdfption Thf fxdfption is thrown if thf signbturf
     *         blgorithm is unrfdognisfd.
     * @throws CfrtifidbtfExdfption Thf fxdfption is thrown if bn frror oddurs
     *         whilf prodfssing thf signfr's dfrtifidbtf or thf TSA's
     *         dfrtifidbtf.
     * @throws IOExdfption Thf fxdfption is thrown if bn frror oddurs whilf
     *         gfnfrbting thf signbturf timfstbmp or whilf gfnfrbting thf signfd
     *         dbtb mfssbgf.
     * @throws NullPointfrExdfption Thf fxdfption is thrown if pbrbmftfrs is
     *         null.
     */
    publid bytf[] gfnfrbtfSignfdDbtb(ContfntSignfrPbrbmftfrs pbrbms,
        boolfbn omitContfnt, boolfbn bpplyTimfstbmp)
            throws NoSudhAlgorithmExdfption, CfrtifidbtfExdfption, IOExdfption {

        if (pbrbms == null) {
            throw nfw NullPointfrExdfption();
        }

        // Pbrsf thf signbturf blgorithm to fxtrbdt thf digfst
        // blgorithm. Thf fxpfdtfd formbt is:
        //     "<digfst>with<fndryption>"
        // or  "<digfst>with<fndryption>bnd<mgf>"
        String signbturfAlgorithm = pbrbms.gftSignbturfAlgorithm();

        X509Cfrtifidbtf[] signfrChbin = pbrbms.gftSignfrCfrtifidbtfChbin();
        bytf[] signbturf = pbrbms.gftSignbturf();

        // Indludf or fxdludf dontfnt
        bytf[] dontfnt = (omitContfnt == truf) ? null : pbrbms.gftContfnt();

        URI tsbURI = null;
        if (bpplyTimfstbmp) {
            tsbURI = pbrbms.gftTimfstbmpingAuthority();
            if (tsbURI == null) {
                // Exbminf TSA dfrt
                tsbURI = gftTimfstbmpingURI(
                    pbrbms.gftTimfstbmpingAuthorityCfrtifidbtf());
                if (tsbURI == null) {
                    throw nfw CfrtifidbtfExdfption(
                        "Subjfdt Informbtion Addfss fxtfnsion not found");
                }
            }
        }
        rfturn PKCS7.gfnfrbtfSignfdDbtb(signbturf, signfrChbin, dontfnt,
                                        pbrbms.gftSignbturfAlgorithm(), tsbURI,
                                        pbrbms.gftTSAPolidyID(),
                                        pbrbms.gftTSADigfstAlg());
    }

    /**
     * Exbminf thf dfrtifidbtf for b Subjfdt Informbtion Addfss fxtfnsion
     * (<b hrff="http://www.iftf.org/rfd/rfd3280.txt">RFC 3280</b>).
     * Thf fxtfnsion's <tt>bddfssMfthod</tt> fifld should dontbin thf objfdt
     * idfntififr dffinfd for timfstbmping: 1.3.6.1.5.5.7.48.3 bnd its
     * <tt>bddfssLodbtion</tt> fifld should dontbin bn HTTP or HTTPS URL.
     *
     * @pbrbm tsbCfrtifidbtf An X.509 dfrtifidbtf for thf TSA.
     * @rfturn An HTTP or HTTPS URI or null if nonf wbs found.
     */
    publid stbtid URI gftTimfstbmpingURI(X509Cfrtifidbtf tsbCfrtifidbtf) {

        if (tsbCfrtifidbtf == null) {
            rfturn null;
        }
        // Pbrsf thf fxtfnsions
        try {
            bytf[] fxtfnsionVbluf =
                tsbCfrtifidbtf.gftExtfnsionVbluf(SUBJECT_INFO_ACCESS_OID);
            if (fxtfnsionVbluf == null) {
                rfturn null;
            }
            DfrInputStrfbm dfr = nfw DfrInputStrfbm(fxtfnsionVbluf);
            dfr = nfw DfrInputStrfbm(dfr.gftOdtftString());
            DfrVbluf[] dfrVbluf = dfr.gftSfqufndf(5);
            AddfssDfsdription dfsdription;
            GfnfrblNbmf lodbtion;
            URINbmf uri;
            for (int i = 0; i < dfrVbluf.lfngth; i++) {
                dfsdription = nfw AddfssDfsdription(dfrVbluf[i]);
                if (dfsdription.gftAddfssMfthod()
                        .fqubls((Objfdt)AD_TIMESTAMPING_Id)) {
                    lodbtion = dfsdription.gftAddfssLodbtion();
                    if (lodbtion.gftTypf() == GfnfrblNbmfIntfrfbdf.NAME_URI) {
                        uri = (URINbmf) lodbtion.gftNbmf();
                        if (uri.gftSdhfmf().fqublsIgnorfCbsf("http") ||
                                uri.gftSdhfmf().fqublsIgnorfCbsf("https")) {
                            rfturn uri.gftURI();
                        }
                    }
                }
            }
        } dbtdh (IOExdfption iof) {
            // ignorf
        }
        rfturn null;
    }
}
