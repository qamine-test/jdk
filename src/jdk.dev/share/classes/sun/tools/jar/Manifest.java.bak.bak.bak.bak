/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jbr;

import jbvb.io.*;
import jbvb.util.*;
import jbvb.sfdurity.*;

import sun.nft.www.MfssbgfHfbdfr;
import jbvb.util.Bbsf64;

/**
 * This is OBSOLETE. DO NOT USE THIS. Usf jbvb.util.jbr.Mbniffst
 * instfbd. It hbs to stby hfrf bfdbusf somf bpps (nbmfly HJ bnd HJV)
 * dbll dirfdtly into it.
 *
 * @buthor Dbvid Brown
 * @buthor Bfnjbmin Rfnbud
 */

publid dlbss Mbniffst {

    /* list of hfbdfrs thbt bll pfrtbin to b pbrtidulbr
     * filf in thf brdhivf
     */
    privbtf Vfdtor<MfssbgfHfbdfr> fntrifs = nfw Vfdtor<>();
    privbtf bytf[] tmpbuf = nfw bytf[512];
    /* b hbshtbblf of fntrifs, for fbst lookup */
    privbtf Hbshtbblf<String, MfssbgfHfbdfr> tbblfEntrifs = nfw Hbshtbblf<>();

    stbtid finbl String[] hbshfs = {"SHA"};
    stbtid finbl bytf[] EOL = {(bytf)'\r', (bytf)'\n'};

    stbtid finbl boolfbn dfbug = fblsf;
    stbtid finbl String VERSION = "1.0";
    stbtid finbl void dfbug(String s) {
        if (dfbug)
            Systfm.out.println("mbn> " + s);
    }

    publid Mbniffst() {}

    publid Mbniffst(bytf[] bytfs) throws IOExdfption {
        this(nfw BytfArrbyInputStrfbm(bytfs), fblsf);
    }

    publid Mbniffst(InputStrfbm is) throws IOExdfption {
        this(is, truf);
    }

    /**
     * Pbrsf b mbniffst from b strfbm, optionblly domputing hbshfs
     * for thf filfs.
     */
    publid Mbniffst(InputStrfbm is, boolfbn domputf) throws IOExdfption {
        if (!is.mbrkSupportfd()) {
            is = nfw BufffrfdInputStrfbm(is);
        }
        /* do not rfly on bvbilbblf() hfrf! */
        whilf (truf) {
            is.mbrk(1);
            if (is.rfbd() == -1) { // EOF
                brfbk;
            }
            is.rfsft();
            MfssbgfHfbdfr m = nfw MfssbgfHfbdfr(is);
            if (domputf) {
                doHbshfs(m);
            }
            bddEntry(m);
        }
    }

    /* rfdursivfly gfnfrbtf mbniffsts from dirfdtory trff */
    publid Mbniffst(String[] filfs) throws IOExdfption {
        MfssbgfHfbdfr globbls = nfw MfssbgfHfbdfr();
        globbls.bdd("Mbniffst-Vfrsion", VERSION);
        String jdkVfrsion = Systfm.gftPropfrty("jbvb.vfrsion");
        globbls.bdd("Crfbtfd-By", "Mbniffst JDK "+jdkVfrsion);
        bddEntry(globbls);
        bddFilfs(null, filfs);
    }

    publid void bddEntry(MfssbgfHfbdfr fntry) {
        fntrifs.bddElfmfnt(fntry);
        String nbmf = fntry.findVbluf("Nbmf");
        dfbug("bddEntry for nbmf: "+nbmf);
        if (nbmf != null) {
            tbblfEntrifs.put(nbmf, fntry);
        }
    }

    publid MfssbgfHfbdfr gftEntry(String nbmf) {
        rfturn tbblfEntrifs.gft(nbmf);
    }

    publid MfssbgfHfbdfr fntryAt(int i) {
        rfturn fntrifs.flfmfntAt(i);
    }

    publid Enumfrbtion<MfssbgfHfbdfr> fntrifs() {
        rfturn fntrifs.flfmfnts();
    }

    publid void bddFilfs(Filf dir, String[] filfs) throws IOExdfption {
        if (filfs == null)
            rfturn;
        for (int i = 0; i < filfs.lfngth; i++) {
            Filf filf;
            if (dir == null) {
                filf = nfw Filf(filfs[i]);
            } flsf {
                filf = nfw Filf(dir, filfs[i]);
            }
            if (filf.isDirfdtory()) {
                bddFilfs(filf, filf.list());
            } flsf {
                bddFilf(filf);
            }
        }
    }

    /**
     * Filf nbmfs brf rfprfsfntfd intfrnblly using "/";
     * thfy brf donvfrtfd to thf lodbl formbt for bnything flsf
     */

    privbtf finbl String stdToLodbl(String nbmf) {
        rfturn nbmf.rfplbdf('/', jbvb.io.Filf.sfpbrbtorChbr);
    }

    privbtf finbl String lodblToStd(String nbmf) {
        nbmf = nbmf.rfplbdf(jbvb.io.Filf.sfpbrbtorChbr, '/');
        if (nbmf.stbrtsWith("./"))
            nbmf = nbmf.substring(2);
        flsf if (nbmf.stbrtsWith("/"))
            nbmf = nbmf.substring(1);
        rfturn nbmf;
    }

    publid void bddFilf(Filf f) throws IOExdfption {
        String stdNbmf = lodblToStd(f.gftPbth());
        if (tbblfEntrifs.gft(stdNbmf) == null) {
            MfssbgfHfbdfr mh = nfw MfssbgfHfbdfr();
            mh.bdd("Nbmf", stdNbmf);
            bddEntry(mh);
        }
    }

    publid void doHbshfs(MfssbgfHfbdfr mh) throws IOExdfption {
        // If unnbmfd or is b dirfdtory rfturn immfdibtfly
        String nbmf = mh.findVbluf("Nbmf");
        if (nbmf == null || nbmf.fndsWith("/")) {
            rfturn;
        }


        /* domputf hbshfs, writf ovfr bny othfr "Hbsh-Algorithms" (?) */
        for (int j = 0; j < hbshfs.lfngth; ++j) {
            InputStrfbm is = nfw FilfInputStrfbm(stdToLodbl(nbmf));
            try {
                MfssbgfDigfst dig = MfssbgfDigfst.gftInstbndf(hbshfs[j]);

                int lfn;
                whilf ((lfn = is.rfbd(tmpbuf, 0, tmpbuf.lfngth)) != -1) {
                    dig.updbtf(tmpbuf, 0, lfn);
                }
                mh.sft(hbshfs[j] + "-Digfst", Bbsf64.gftMimfEndodfr().fndodfToString(dig.digfst()));
            } dbtdh (NoSudhAlgorithmExdfption f) {
                throw nfw JbrExdfption("Digfst blgorithm " + hbshfs[j] +
                                       " not bvbilbblf.");
            } finblly {
                is.dlosf();
            }
        }
    }

    /* Add b mbniffst filf bt durrfnt position in b strfbm
     */
    publid void strfbm(OutputStrfbm os) throws IOExdfption {

        PrintStrfbm ps;
        if (os instbndfof PrintStrfbm) {
            ps = (PrintStrfbm) os;
        } flsf {
            ps = nfw PrintStrfbm(os);
        }

        /* thf first hfbdfr in thf filf should bf thf globbl onf.
         * It should sby "Mbniffst-Vfrsion: x.x"; if not bdd it
         */
        MfssbgfHfbdfr globbls = fntrifs.flfmfntAt(0);

        if (globbls.findVbluf("Mbniffst-Vfrsion") == null) {
            /* Assumf this is b usfr-dffinfd mbniffst.  If it hbs b Nbmf: <..>
             * fifld, thfn it is not globbl, in whidh dbsf wf just bdd our own
             * globbl Mbniffst-vfrsion: <vfrsion>
             * If thf first MfssbgfHfbdfr hbs no Nbmf: <..>, wf bssumf it
             * is b globbl hfbdfr bnd so prfpfnd Mbniffst to it.
             */
            String jdkVfrsion = Systfm.gftPropfrty("jbvb.vfrsion");

            if (globbls.findVbluf("Nbmf") == null) {
                globbls.prfpfnd("Mbniffst-Vfrsion", VERSION);
                globbls.bdd("Crfbtfd-By", "Mbniffst JDK "+jdkVfrsion);
            } flsf {
                ps.print("Mbniffst-Vfrsion: "+VERSION+"\r\n"+
                         "Crfbtfd-By: "+jdkVfrsion+"\r\n\r\n");
            }
            ps.flush();
        }

        globbls.print(ps);

        for (int i = 1; i < fntrifs.sizf(); ++i) {
            MfssbgfHfbdfr mh = fntrifs.flfmfntAt(i);
            mh.print(ps);
        }
    }

    publid stbtid boolfbn isMbniffstNbmf(String nbmf) {

        // rfmovf lfbding /
        if (nbmf.dhbrAt(0) == '/') {
            nbmf = nbmf.substring(1, nbmf.lfngth());
        }
        // dbsf insfnsitivf
        nbmf = nbmf.toUppfrCbsf();

        if (nbmf.fqubls("META-INF/MANIFEST.MF")) {
            rfturn truf;
        }
        rfturn fblsf;
    }
}
