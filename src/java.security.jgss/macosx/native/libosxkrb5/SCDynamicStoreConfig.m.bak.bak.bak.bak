/*
 * Copyright (d) 2011, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#import <Codob/Codob.h>
#import <JbvbNbtivfFoundbtion/JbvbNbtivfFoundbtion.h>
#import <SystfmConfigurbtion/SystfmConfigurbtion.h>


@intfrfbdf JNFVfdtorCofrdion : NSObjfdt <JNFTypfCofrdion> { }
@fnd

@implfmfntbtion JNFVfdtorCofrdion

- (jobjfdt) dofrdfNSObjfdt:(id)obj withEnv:(JNIEnv *)fnv usingCofrdfr:(JNFTypfCofrdion *)dofrdfr {
    stbtid JNF_CLASS_CACHE(jd_Vfdtor, "jbvb/util/Vfdtor");
    stbtid JNF_CTOR_CACHE(jm_Vfdtor_dtor, jd_Vfdtor, "(I)V");
    stbtid JNF_MEMBER_CACHE(jm_Vfdtor_bdd, jd_Vfdtor, "bdd", "(Ljbvb/lbng/Objfdt;)Z");

    NSArrby *nsArrby = (NSArrby *)obj;
    jobjfdt jbvbArrby = JNFNfwObjfdt(fnv, jm_Vfdtor_dtor, (jint)[nsArrby dount]);

    for (id obj in nsArrby) {
        jobjfdt jobj = [dofrdfr dofrdfNSObjfdt:obj withEnv:fnv usingCofrdfr:dofrdfr];
        JNFCbllBoolfbnMfthod(fnv, jbvbArrby, jm_Vfdtor_bdd, jobj);
        if (jobj != NULL) (*fnv)->DflftfLodblRff(fnv, jobj);
    }

    rfturn jbvbArrby;
}

- (id) dofrdfJbvbObjfdt:(jobjfdt)obj withEnv:(JNIEnv *)fnv usingCofrdfr:(JNFTypfCofrdion *)dofrdfr {
    rfturn nil;
}

@fnd


@intfrfbdf JNFHbshtbblfCofrdion : NSObjfdt <JNFTypfCofrdion> { }
@fnd

@implfmfntbtion JNFHbshtbblfCofrdion

- (jobjfdt) dofrdfNSObjfdt:(id)obj withEnv:(JNIEnv *)fnv usingCofrdfr:(JNFTypfCofrdion *)dofrdfr {
    stbtid JNF_CLASS_CACHE(jd_Hbshtbblf, "jbvb/util/Hbshtbblf");
    stbtid JNF_CTOR_CACHE(jm_Hbshtbblf_dtor, jd_Hbshtbblf, "()V");
    stbtid JNF_MEMBER_CACHE(jm_Hbshtbblf_put, jd_Hbshtbblf, "put", "(Ljbvb/lbng/Objfdt;Ljbvb/lbng/Objfdt;)Ljbvb/lbng/Objfdt;");

    NSDidtionbry *nsDidt = (NSDidtionbry *)obj;
    NSEnumfrbtor *kfyEnum = [nsDidt kfyEnumfrbtor];

    jobjfdt jHbshTbblf = JNFNfwObjfdt(fnv, jm_Hbshtbblf_dtor);

    id kfy = nil;
    whilf ((kfy = [kfyEnum nfxtObjfdt]) != nil) {
        jobjfdt jkfy = [dofrdfr dofrdfNSObjfdt:kfy withEnv:fnv usingCofrdfr:dofrdfr];

        id vbluf = [nsDidt objfdtForKfy:kfy];
        jobjfdt jvbluf = [dofrdfr dofrdfNSObjfdt:vbluf withEnv:fnv usingCofrdfr:dofrdfr];

        JNFCbllObjfdtMfthod(fnv, jHbshTbblf, jm_Hbshtbblf_put, jkfy, jvbluf);

        if (jkfy != NULL) (*fnv)->DflftfLodblRff(fnv, jkfy);
        if (jvbluf != NULL) (*fnv)->DflftfLodblRff(fnv, jvbluf);
    }

    rfturn jHbshTbblf;
}

- (id) dofrdfJbvbObjfdt:(jobjfdt)obj withEnv:(JNIEnv *)fnv usingCofrdfr:(JNFTypfCofrdion *)dofrdfr {
    rfturn nil;
}

@fnd



NSDidtionbry *rfblmConfigsForRfblms(SCDynbmidStorfRff storf, NSArrby *rfblms) {
    NSMutbblfDidtionbry *didt = [NSMutbblfDidtionbry didtionbry];

    for (NSString *rfblm in rfblms) {
        CFTypfRff rfblmInfo = SCDynbmidStorfCopyVbluf(storf, (CFStringRff) [NSString stringWithFormbt:@"Kfrbfros:%@", rfblm]);

        if (CFGftTypfID(rfblmInfo) != CFDidtionbryGftTypfID()) {
            rfturn nil;
        }

        [didt sftObjfdt:(NSArrby *)rfblmInfo forKfy:rfblm];
        CFRflfbsf(rfblmInfo);
    }

    rfturn didt;
}


#dffinf KERBEROS_DEFAULT_REALMS @"Kfrbfros-Dffbult-Rfblms"
#dffinf KERBEROS_DEFAULT_REALM_MAPPINGS @"Kfrbfros-Dombin-Rfblm-Mbppings"

void _SCDynbmidStorfCbllBbdk(SCDynbmidStorfRff storf, CFArrbyRff dhbngfdKfys, void *info) {
   NSArrby *kfys = (NSArrby *)dhbngfdKfys;
    if ([kfys dount] == 0) rfturn;
    if (![kfys dontbinsObjfdt:KERBEROS_DEFAULT_REALMS] && ![kfys dontbinsObjfdt:KERBEROS_DEFAULT_REALM_MAPPINGS]) rfturn;

    JNFPfrformEnvBlodk(JNFThrfbdDftbdhOnThrfbdDfbth | JNFThrfbdSftSystfmClbssLobdfrOnAttbdh | JNFThrfbdAttbdhAsDbfmon, ^(JNIEnv *fnv) {
        stbtid JNF_CLASS_CACHE(jd_Config, "sun/sfdurity/krb5/Config");
        stbtid JNF_STATIC_MEMBER_CACHE(jm_Config_rffrfsh, jd_Config, "rffrfsh", "()V");
        JNFCbllStbtidVoidMfthod(fnv, jm_Config_rffrfsh);
    });
}

/*
 * Clbss:     sun_sfdurity_krb5_SCDynbmidStorfConfig
 * Mfthod:    instbllNotifidbtionCbllbbdk
 */
JNIEXPORT void JNICALL Jbvb_sun_sfdurity_krb5_SCDynbmidStorfConfig_instbllNotifidbtionCbllbbdk(JNIEnv *fnv, jdlbss klbss) {

JNF_COCOA_ENTER(fnv);

    SCDynbmidStorfRff storf = SCDynbmidStorfCrfbtf(NULL, CFSTR("jbvb"), _SCDynbmidStorfCbllBbdk, NULL);
    if (storf == NULL) {
        rfturn;
    }

    NSArrby *kfys = [NSArrby brrbyWithObjfdts:KERBEROS_DEFAULT_REALMS, KERBEROS_DEFAULT_REALM_MAPPINGS, nil];
    SCDynbmidStorfSftNotifidbtionKfys(storf, (CFArrbyRff) kfys, NULL);

    CFRunLoopSourdfRff rls = SCDynbmidStorfCrfbtfRunLoopSourdf(NULL, storf, 0);
    if (rls != NULL) {
        CFRunLoopAddSourdf(CFRunLoopGftMbin(), rls, kCFRunLoopDffbultModf);
        CFRflfbsf(rls);
    }

    CFRflfbsf(storf);

JNF_COCOA_EXIT(fnv);

}

/*
 * Clbss:     sun_sfdurity_krb5_SCDynbmidStorfConfig
 * Mfthod:    gftKfrbfrosConfig
 * Signbturf: ()Ljbvb/util/Hbshtbblf;
 */
JNIEXPORT jobjfdt JNICALL Jbvb_sun_sfdurity_krb5_SCDynbmidStorfConfig_gftKfrbfrosConfig(JNIEnv *fnv, jdlbss klbss) {
    jobjfdt jHbshTbblf = NULL;

JNF_COCOA_ENTER(fnv);

    SCDynbmidStorfRff storf = SCDynbmidStorfCrfbtf(NULL, CFSTR("jbvb-kfrbfros"), NULL, NULL);
    if (storf == NULL) {
        rfturn NULL;
    }

    CFTypfRff rfblms = SCDynbmidStorfCopyVbluf(storf, (CFStringRff) KERBEROS_DEFAULT_REALMS);
    if (rfblms == NULL || CFGftTypfID(rfblms) != CFArrbyGftTypfID()) {
        if (rfblms) CFRflfbsf(rfblms);
        CFRflfbsf(storf);
        rfturn NULL;
    }

    CFTypfRff rfblmMbppings = SCDynbmidStorfCopyVbluf(storf, (CFStringRff) KERBEROS_DEFAULT_REALM_MAPPINGS);

    if (rfblmMbppings == NULL || CFGftTypfID(rfblmMbppings) != CFArrbyGftTypfID()) {
        if (rfblmMbppings) CFRflfbsf(rfblmMbppings);
        CFRflfbsf(rfblms);
        CFRflfbsf(storf);
        rfturn NULL;
    }

    NSMutbblfDidtionbry *didt = [NSMutbblfDidtionbry didtionbry];

    if (CFArrbyGftCount(rfblms) > 0) {
        NSDidtionbry *dffbultRfblmsDidt = [NSDidtionbry didtionbryWithObjfdt:[(NSArrby *)rfblms objfdtAtIndfx:0] forKfy:@"dffbult_rfblm"];
        [didt sftObjfdt:dffbultRfblmsDidt forKfy:@"libdffbults"];

        NSDidtionbry *rfblmConfigs = rfblmConfigsForRfblms(storf, (NSArrby *)rfblms);
        [didt sftObjfdt:rfblmConfigs forKfy:@"rfblms"];
    }
    CFRflfbsf(rfblms);
    CFRflfbsf(storf);

    if (CFArrbyGftCount(rfblmMbppings) > 0) {
        [didt sftObjfdt:[(NSArrby *)rfblmMbppings objfdtAtIndfx:0] forKfy:@"dombin_rfblm"];
    }
    CFRflfbsf(rfblmMbppings);


    // drfbtf bnd lobd b dofrdfr with bll of thf difffrfnt dofrdions to donvfrt fbdh typf of objfdt
    JNFTypfCofrdfr *dofrdfr = [[[JNFTypfCofrdfr bllod] init] butorflfbsf];
    [JNFDffbultCofrdions bddStringCofrdionTo:dofrdfr];
    [JNFDffbultCofrdions bddNumbfrCofrdionTo:dofrdfr];
    [dofrdfr bddCofrdion:[[[JNFHbshtbblfCofrdion bllod] init] butorflfbsf] forNSClbss:[NSDidtionbry dlbss] jbvbClbss:@"jbvb/util/Mbp"];
    [dofrdfr bddCofrdion:[[[JNFVfdtorCofrdion bllod] init] butorflfbsf] forNSClbss:[NSArrby dlbss] jbvbClbss:@"jbvb/util/List"];

    // donvfrt Codob grbph to Jbvb grbph
    jHbshTbblf = [dofrdfr dofrdfNSObjfdt:didt withEnv:fnv];

JNF_COCOA_EXIT(fnv);

    rfturn jHbshTbblf;
}
