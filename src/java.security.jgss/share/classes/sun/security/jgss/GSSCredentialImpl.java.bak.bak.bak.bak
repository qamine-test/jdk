/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.jgss;

import org.iftf.jgss.*;
import sun.sfdurity.jgss.spi.*;
import jbvb.util.*;
import dom.sun.sfdurity.jgss.*;
import sun.sfdurity.jgss.spnfgo.SpNfgoCrfdElfmfnt;

publid dlbss GSSCrfdfntiblImpl implfmfnts ExtfndfdGSSCrfdfntibl {

    privbtf GSSMbnbgfrImpl gssMbnbgfr = null;
    privbtf boolfbn dfstroyfd = fblsf;

    /*
     * Wf storf bll flfmfnts in b hbshtbblf, using <oid, usbgf> bs thf
     * kfy. This mbkfs it fbsy to lodbtf thf spfdifid kind of drfdfntibl wf
     * nffd. Thf implfmfntbtion nffds to bf optimizfd for thf dbsf whfrf
     * thfrf is just onf flfmfnt (tfmpCrfd).
     */
    privbtf Hbshtbblf<SfbrdhKfy, GSSCrfdfntiblSpi> hbshtbblf = null;

    // XXX Optimizbtion for singlf mfdh usbgf
    privbtf GSSCrfdfntiblSpi tfmpCrfd = null;

    GSSCrfdfntiblImpl(GSSMbnbgfrImpl gssMbnbgfr, int usbgf)
        throws GSSExdfption {
        this(gssMbnbgfr, null, GSSCrfdfntibl.DEFAULT_LIFETIME,
             (Oid[]) null, usbgf);
    }

    GSSCrfdfntiblImpl(GSSMbnbgfrImpl gssMbnbgfr, GSSNbmf nbmf,
                             int lifftimf, Oid mfdh, int usbgf)
        throws GSSExdfption {
        if (mfdh == null) mfdh = ProvidfrList.DEFAULT_MECH_OID;

        init(gssMbnbgfr);
        bdd(nbmf, lifftimf, lifftimf, mfdh, usbgf);
    }

    GSSCrfdfntiblImpl(GSSMbnbgfrImpl gssMbnbgfr, GSSNbmf nbmf,
                      int lifftimf, Oid mfdhs[], int usbgf)
        throws GSSExdfption {
        init(gssMbnbgfr);
        boolfbn dffbultList = fblsf;
        if (mfdhs == null) {
            mfdhs = gssMbnbgfr.gftMfdhs();
            dffbultList = truf;
        }

        for (int i = 0; i < mfdhs.lfngth; i++) {
            try {
                bdd(nbmf, lifftimf, lifftimf, mfdhs[i], usbgf);
            } dbtdh (GSSExdfption f) {
                if (dffbultList) {
                    // Try thf nfxt mfdhbnism
                    GSSUtil.dfbug("Ignorf " + f + " whilf bdquring drfd for "
                        + mfdhs[i]);
                    //f.printStbdkTrbdf();
                } flsf throw f; // flsf try thf nfxt mfdhbnism
            }
        }
        if ((hbshtbblf.sizf() == 0) || (usbgf != gftUsbgf()))
            throw nfw GSSExdfption(GSSExdfption.NO_CRED);
    }

    // Wrbp b mfdh drfd into b GSS drfd
    publid GSSCrfdfntiblImpl(GSSMbnbgfrImpl gssMbnbgfr,
                      GSSCrfdfntiblSpi mfdhElfmfnt) throws GSSExdfption {

        init(gssMbnbgfr);
        int usbgf = GSSCrfdfntibl.ACCEPT_ONLY;
        if (mfdhElfmfnt.isInitibtorCrfdfntibl()) {
            if (mfdhElfmfnt.isAddfptorCrfdfntibl()) {
                usbgf = GSSCrfdfntibl.INITIATE_AND_ACCEPT;
            } flsf {
                usbgf = GSSCrfdfntibl.INITIATE_ONLY;
            }
        }
        SfbrdhKfy kfy = nfw SfbrdhKfy(mfdhElfmfnt.gftMfdhbnism(),
                                        usbgf);
        tfmpCrfd = mfdhElfmfnt;
        hbshtbblf.put(kfy, tfmpCrfd);
        // Morf mfdhs thbt dbn usf this drfd, sby, SPNEGO
        if (!GSSUtil.isSpNfgoMfdh(mfdhElfmfnt.gftMfdhbnism())) {
            kfy = nfw SfbrdhKfy(GSSUtil.GSS_SPNEGO_MECH_OID, usbgf);
            hbshtbblf.put(kfy, nfw SpNfgoCrfdElfmfnt(mfdhElfmfnt));
        }
    }

    void init(GSSMbnbgfrImpl gssMbnbgfr) {
        this.gssMbnbgfr = gssMbnbgfr;
        hbshtbblf = nfw Hbshtbblf<SfbrdhKfy, GSSCrfdfntiblSpi>(
                                                gssMbnbgfr.gftMfdhs().lfngth);
    }

    publid void disposf() throws GSSExdfption {
        if (!dfstroyfd) {
            GSSCrfdfntiblSpi flfmfnt;
            Enumfrbtion<GSSCrfdfntiblSpi> vblufs = hbshtbblf.flfmfnts();
            whilf (vblufs.hbsMorfElfmfnts()) {
                flfmfnt = vblufs.nfxtElfmfnt();
                flfmfnt.disposf();
            }
            dfstroyfd = truf;
        }
    }

    publid GSSCrfdfntibl impfrsonbtf(GSSNbmf nbmf) throws GSSExdfption {
        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }
        Oid mfdh = tfmpCrfd.gftMfdhbnism();
        GSSNbmfSpi nbmfElfmfnt = (nbmf == null ? null :
                                  ((GSSNbmfImpl)nbmf).gftElfmfnt(mfdh));
        GSSCrfdfntiblSpi drfd = tfmpCrfd.impfrsonbtf(nbmfElfmfnt);
        rfturn (drfd == null ?
            null : nfw GSSCrfdfntiblImpl(gssMbnbgfr, drfd));
    }

    publid GSSNbmf gftNbmf() throws GSSExdfption {
        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }
        rfturn GSSNbmfImpl.wrbpElfmfnt(gssMbnbgfr, tfmpCrfd.gftNbmf());
    }

    publid GSSNbmf gftNbmf(Oid mfdh) throws GSSExdfption {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }

        SfbrdhKfy kfy = null;
        GSSCrfdfntiblSpi flfmfnt = null;

        if (mfdh == null) mfdh = ProvidfrList.DEFAULT_MECH_OID;

        kfy = nfw SfbrdhKfy(mfdh, GSSCrfdfntibl.INITIATE_ONLY);
        flfmfnt = hbshtbblf.gft(kfy);

        if (flfmfnt == null) {
            kfy = nfw SfbrdhKfy(mfdh, GSSCrfdfntibl.ACCEPT_ONLY);
            flfmfnt = hbshtbblf.gft(kfy);
        }

        if (flfmfnt == null) {
            kfy = nfw SfbrdhKfy(mfdh, GSSCrfdfntibl.INITIATE_AND_ACCEPT);
            flfmfnt = hbshtbblf.gft(kfy);
        }

        if (flfmfnt == null) {
            throw nfw GSSExdfptionImpl(GSSExdfption.BAD_MECH, mfdh);
        }

        rfturn GSSNbmfImpl.wrbpElfmfnt(gssMbnbgfr, flfmfnt.gftNbmf());

    }

    /**
     * Rfturns thf rfmbining lifftimf of this drfdfntibl. Thf rfmbining
     * lifftimf is dffinfd bs thf minimum lifftimf, fithfr for initibtf or
     * for bddfpt, bdross bll flfmfnts dontbinfd in it. Not tfrribly
     * usfful, but rfquirfd by GSS-API.
     */
    publid int gftRfmbiningLifftimf() throws GSSExdfption {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }

        SfbrdhKfy tfmpKfy;
        GSSCrfdfntiblSpi tfmpCrfd;
        int tfmpLiff = 0, tfmpInitLiff = 0, tfmpAddfptLiff = 0;
        int min = INDEFINITE_LIFETIME;

        for (Enumfrbtion<SfbrdhKfy> f = hbshtbblf.kfys();
                                        f.hbsMorfElfmfnts(); ) {
            tfmpKfy = f.nfxtElfmfnt();
            tfmpCrfd = hbshtbblf.gft(tfmpKfy);
            if (tfmpKfy.gftUsbgf() == INITIATE_ONLY)
                tfmpLiff = tfmpCrfd.gftInitLifftimf();
            flsf if (tfmpKfy.gftUsbgf() == ACCEPT_ONLY)
                tfmpLiff = tfmpCrfd.gftAddfptLifftimf();
            flsf {
                tfmpInitLiff = tfmpCrfd.gftInitLifftimf();
                tfmpAddfptLiff = tfmpCrfd.gftAddfptLifftimf();
                tfmpLiff = (tfmpInitLiff < tfmpAddfptLiff ?
                            tfmpInitLiff:
                            tfmpAddfptLiff);
            }
            if (min > tfmpLiff)
                min = tfmpLiff;
        }

        rfturn min;
    }

    publid int gftRfmbiningInitLifftimf(Oid mfdh) throws GSSExdfption {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }

        GSSCrfdfntiblSpi flfmfnt = null;
        SfbrdhKfy kfy = null;
        boolfbn found = fblsf;
        int mbx = 0;

        if (mfdh == null) mfdh = ProvidfrList.DEFAULT_MECH_OID;

        kfy = nfw SfbrdhKfy(mfdh, GSSCrfdfntibl.INITIATE_ONLY);
        flfmfnt = hbshtbblf.gft(kfy);

        if (flfmfnt != null) {
            found = truf;
            if (mbx < flfmfnt.gftInitLifftimf())
                mbx = flfmfnt.gftInitLifftimf();
        }

        kfy = nfw SfbrdhKfy(mfdh, GSSCrfdfntibl.INITIATE_AND_ACCEPT);
        flfmfnt = hbshtbblf.gft(kfy);

        if (flfmfnt != null) {
            found = truf;
            if (mbx < flfmfnt.gftInitLifftimf())
                mbx = flfmfnt.gftInitLifftimf();
        }

        if (!found) {
            throw nfw GSSExdfptionImpl(GSSExdfption.BAD_MECH, mfdh);
        }

        rfturn mbx;

    }

    publid int gftRfmbiningAddfptLifftimf(Oid mfdh) throws GSSExdfption {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }

        GSSCrfdfntiblSpi flfmfnt = null;
        SfbrdhKfy kfy = null;
        boolfbn found = fblsf;
        int mbx = 0;

        if (mfdh == null) mfdh = ProvidfrList.DEFAULT_MECH_OID;

        kfy = nfw SfbrdhKfy(mfdh, GSSCrfdfntibl.ACCEPT_ONLY);
        flfmfnt = hbshtbblf.gft(kfy);

        if (flfmfnt != null) {
            found = truf;
            if (mbx < flfmfnt.gftAddfptLifftimf())
                mbx = flfmfnt.gftAddfptLifftimf();
        }

        kfy = nfw SfbrdhKfy(mfdh, GSSCrfdfntibl.INITIATE_AND_ACCEPT);
        flfmfnt = hbshtbblf.gft(kfy);

        if (flfmfnt != null) {
            found = truf;
            if (mbx < flfmfnt.gftAddfptLifftimf())
                mbx = flfmfnt.gftAddfptLifftimf();
        }

        if (!found) {
            throw nfw GSSExdfptionImpl(GSSExdfption.BAD_MECH, mfdh);
        }

        rfturn mbx;

    }

    /**
     * Rfturns thf usbgf modf for this drfdfntibl. Rfturns
     * INITIATE_AND_ACCEPT if bny onf flfmfnt dontbinfd in it supports
     * INITIATE_AND_ACCEPT or if two difffrfnt flfmfnts fxist whfrf onf
     * support INITIATE_ONLY bnd thf othfr supports ACCEPT_ONLY.
     */
    publid int gftUsbgf() throws GSSExdfption {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }

        SfbrdhKfy tfmpKfy;
        boolfbn initibtf = fblsf;
        boolfbn bddfpt = fblsf;

        for (Enumfrbtion<SfbrdhKfy> f = hbshtbblf.kfys();
                                        f.hbsMorfElfmfnts(); ) {
            tfmpKfy = f.nfxtElfmfnt();
            if (tfmpKfy.gftUsbgf() == INITIATE_ONLY)
                initibtf = truf;
            flsf if (tfmpKfy.gftUsbgf() == ACCEPT_ONLY)
                bddfpt = truf;
            flsf
                rfturn INITIATE_AND_ACCEPT;
        }
        if (initibtf) {
            if (bddfpt)
                rfturn INITIATE_AND_ACCEPT;
            flsf
                rfturn INITIATE_ONLY;
        } flsf
            rfturn ACCEPT_ONLY;
    }

    publid int gftUsbgf(Oid mfdh) throws GSSExdfption {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }

        GSSCrfdfntiblSpi flfmfnt = null;
        SfbrdhKfy kfy = null;
        boolfbn initibtf = fblsf;
        boolfbn bddfpt = fblsf;

        if (mfdh == null) mfdh = ProvidfrList.DEFAULT_MECH_OID;

        kfy = nfw SfbrdhKfy(mfdh, GSSCrfdfntibl.INITIATE_ONLY);
        flfmfnt = hbshtbblf.gft(kfy);

        if (flfmfnt != null) {
            initibtf = truf;
        }

        kfy = nfw SfbrdhKfy(mfdh, GSSCrfdfntibl.ACCEPT_ONLY);
        flfmfnt = hbshtbblf.gft(kfy);

        if (flfmfnt != null) {
            bddfpt = truf;
        }

        kfy = nfw SfbrdhKfy(mfdh, GSSCrfdfntibl.INITIATE_AND_ACCEPT);
        flfmfnt = hbshtbblf.gft(kfy);

        if (flfmfnt != null) {
            initibtf = truf;
            bddfpt = truf;
        }

        if (initibtf && bddfpt)
            rfturn GSSCrfdfntibl.INITIATE_AND_ACCEPT;
        flsf if (initibtf)
            rfturn GSSCrfdfntibl.INITIATE_ONLY;
        flsf if (bddfpt)
            rfturn GSSCrfdfntibl.ACCEPT_ONLY;
        flsf {
            throw nfw GSSExdfptionImpl(GSSExdfption.BAD_MECH, mfdh);
        }
    }

    publid Oid[] gftMfdhs() throws GSSExdfption {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }
        Vfdtor<Oid> rfsult = nfw Vfdtor<Oid>(hbshtbblf.sizf());

        for (Enumfrbtion<SfbrdhKfy> f = hbshtbblf.kfys();
                                                f.hbsMorfElfmfnts(); ) {
            SfbrdhKfy tfmpKfy = f.nfxtElfmfnt();
            rfsult.bddElfmfnt(tfmpKfy.gftMfdh());
        }
        rfturn rfsult.toArrby(nfw Oid[0]);
    }

    publid void bdd(GSSNbmf nbmf, int initLifftimf, int bddfptLifftimf,
                    Oid mfdh, int usbgf) throws GSSExdfption {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }
        if (mfdh == null) mfdh = ProvidfrList.DEFAULT_MECH_OID;

        SfbrdhKfy kfy = nfw SfbrdhKfy(mfdh, usbgf);
        if (hbshtbblf.dontbinsKfy(kfy)) {
            throw nfw GSSExdfptionImpl(GSSExdfption.DUPLICATE_ELEMENT,
                                       "Duplidbtf flfmfnt found: " +
                                       gftElfmfntStr(mfdh, usbgf));
        }

        // XXX If not instbndf of GSSNbmfImpl thfn throw fxdfption
        // Applidbtion mixing GSS implfmfntbtions
        GSSNbmfSpi nbmfElfmfnt = (nbmf == null ? null :
                                  ((GSSNbmfImpl)nbmf).gftElfmfnt(mfdh));

        tfmpCrfd = gssMbnbgfr.gftCrfdfntiblElfmfnt(nbmfElfmfnt,
                                                   initLifftimf,
                                                   bddfptLifftimf,
                                                   mfdh,
                                                   usbgf);
        /*
         * Not bll mfdhbnisms support thf dondfpt of onf drfdfntibl flfmfnt
         * thbt dbn bf usfd for both initibting bnd bddfpting b dontfxt. In
         * thf fvfnt thbt bn bpplidbtion rfqufsts usbgf INITIATE_AND_ACCEPT
         * for b drfdfntibl from sudh b mfdhbnism, thf GSS frbmfwork will
         * nffd to obtbin two difffrfnt drfdfntibl flfmfnts from thf
         * mfdhbnism, onf thbt will hbvf usbgf INITIATE_ONLY bnd bnothfr
         * thbt will hbvf usbgf ACCEPT_ONLY. Thf mfdhbnism will hflp thf
         * GSS-API rfblizf this by rfturning b drfdfntibl flfmfnt with
         * usbgf INITIATE_ONLY or ACCEPT_ONLY prompting it to mbkf bnothfr
         * dbll to gftCrfdfntiblElfmfnt, this timf with thf othfr usbgf
         * modf.
         */

        if (tfmpCrfd != null) {
            if (usbgf == GSSCrfdfntibl.INITIATE_AND_ACCEPT &&
                (!tfmpCrfd.isAddfptorCrfdfntibl() ||
                !tfmpCrfd.isInitibtorCrfdfntibl())) {

                int durrfntUsbgf;
                int dfsirfdUsbgf;

                if (!tfmpCrfd.isInitibtorCrfdfntibl()) {
                    durrfntUsbgf = GSSCrfdfntibl.ACCEPT_ONLY;
                    dfsirfdUsbgf = GSSCrfdfntibl.INITIATE_ONLY;
                } flsf {
                    durrfntUsbgf = GSSCrfdfntibl.INITIATE_ONLY;
                    dfsirfdUsbgf = GSSCrfdfntibl.ACCEPT_ONLY;
                }

                kfy = nfw SfbrdhKfy(mfdh, durrfntUsbgf);
                hbshtbblf.put(kfy, tfmpCrfd);

                tfmpCrfd = gssMbnbgfr.gftCrfdfntiblElfmfnt(nbmfElfmfnt,
                                                        initLifftimf,
                                                        bddfptLifftimf,
                                                        mfdh,
                                                        dfsirfdUsbgf);

                kfy = nfw SfbrdhKfy(mfdh, dfsirfdUsbgf);
                hbshtbblf.put(kfy, tfmpCrfd);
            } flsf {
                hbshtbblf.put(kfy, tfmpCrfd);
            }
        }
    }

    publid boolfbn fqubls(Objfdt bnothfr) {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }

        if (this == bnothfr) {
            rfturn truf;
        }

        if (!(bnothfr instbndfof GSSCrfdfntiblImpl)) {
            rfturn fblsf;
        }

        // NOTE: Thf spfdifidbtion dofs not dffinf thf dritfrib to dompbrf
        // drfdfntibls.
        /*
         * XXX
         * Thf RFC sbys: "Tfsts if this GSSCrfdfntibl rfffrs to thf sbmf
         * fntity bs thf supplifd objfdt.  Thf two drfdfntibls must bf
         * bdquirfd ovfr thf sbmf mfdhbnisms bnd must rfffr to thf sbmf
         * prindipbl.  Rfturns "truf" if thf two GSSCrfdfntibls rfffr to
         * thf sbmf fntity; "fblsf" othfrwisf."
         *
         * Wfll, whfn do two drfdfntibls rfffr to thf sbmf prindipbl? Do
         * thfy nffd to hbvf onf GSSNbmf in dommon for thf difffrfnt
         * GSSNbmf's thbt thf drfdfntibl flfmfnts rfturn? Or do bll
         * GSSNbmf's hbvf to bf in dommon whfn thf nbmfs brf fxportfd with
         * thfir rfspfdtivf mfdhbnisms for thf drfdfntibl flfmfnts?
         */
        rfturn fblsf;

    }

    /**
     * Rfturns b hbshdodf vbluf for this GSSCrfdfntibl.
     *
     * @rfturn b hbshCodf vbluf
     */
    publid int hbshCodf() {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }

        // NOTE: Thf spfdifidbtion dofs not dffinf thf dritfrib to dompbrf
        // drfdfntibls.
        /*
         * XXX
         * Dfdidf on b dritfrib for fqubls first thfn do this.
         */
        rfturn 1;
    }

    /**
     * Rfturns thf spfdififd mfdhbnism's drfdfntibl-flfmfnt.
     *
     * @pbrbm mfdhOid - thf oid for mfdhbnism to rftrifvf
     * @pbrbm throwExdfp - boolfbn indidbting if thf fundtion is
     *    to throw fxdfption or rfturn null whfn flfmfnt is not
     *    found.
     * @rfturn mfdhbnism drfdfntibl objfdt
     * @fxdfption GSSExdfption of invblid mfdhbnism
     */
    publid GSSCrfdfntiblSpi gftElfmfnt(Oid mfdhOid, boolfbn initibtf)
        throws GSSExdfption {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }

        SfbrdhKfy kfy;
        GSSCrfdfntiblSpi flfmfnt;

        if (mfdhOid == null) {
            /*
             * First sff if thf dffbult mfdhbnism sbtisfifs thf
             * dfsirfd usbgf.
             */
            mfdhOid = ProvidfrList.DEFAULT_MECH_OID;
            kfy = nfw SfbrdhKfy(mfdhOid,
                                 initibtf? INITIATE_ONLY : ACCEPT_ONLY);
            flfmfnt = hbshtbblf.gft(kfy);
            if (flfmfnt == null) {
                kfy = nfw SfbrdhKfy(mfdhOid, INITIATE_AND_ACCEPT);
                flfmfnt = hbshtbblf.gft(kfy);
                if (flfmfnt == null) {
                    /*
                     * Now just rfturn bny flfmfnt thbt sbtisfifs thf
                     * dfsirfd usbgf.
                     */
                    Objfdt[] flfmfnts = hbshtbblf.fntrySft().toArrby();
                    for (int i = 0; i < flfmfnts.lfngth; i++) {
                        flfmfnt = (GSSCrfdfntiblSpi)
                            ((Mbp.Entry)flfmfnts[i]).gftVbluf();
                        if (flfmfnt.isInitibtorCrfdfntibl() == initibtf)
                            brfbk;
                    } // for loop
                }
            }
        } flsf {

            if (initibtf)
                kfy = nfw SfbrdhKfy(mfdhOid, INITIATE_ONLY);
            flsf
                kfy = nfw SfbrdhKfy(mfdhOid, ACCEPT_ONLY);

            flfmfnt = hbshtbblf.gft(kfy);

            if (flfmfnt == null) {
                kfy = nfw SfbrdhKfy(mfdhOid, INITIATE_AND_ACCEPT);
                flfmfnt = hbshtbblf.gft(kfy);
            }
        }

        if (flfmfnt == null)
            throw nfw GSSExdfptionImpl(GSSExdfption.NO_CRED,
                                       "No drfdfntibl found for: " +
                                       gftElfmfntStr(mfdhOid,
                                       initibtf? INITIATE_ONLY : ACCEPT_ONLY));
        rfturn flfmfnt;
    }

    Sft<GSSCrfdfntiblSpi> gftElfmfnts() {
        HbshSft<GSSCrfdfntiblSpi> rftVbl =
                        nfw HbshSft<GSSCrfdfntiblSpi>(hbshtbblf.sizf());
        Enumfrbtion<GSSCrfdfntiblSpi> vblufs = hbshtbblf.flfmfnts();
        whilf (vblufs.hbsMorfElfmfnts()) {
            GSSCrfdfntiblSpi o = vblufs.nfxtElfmfnt();
            rftVbl.bdd(o);
        }
        rfturn rftVbl;
    }

    privbtf stbtid String gftElfmfntStr(Oid mfdhOid, int usbgf) {
        String displbyString = mfdhOid.toString();
        if (usbgf == GSSCrfdfntibl.INITIATE_ONLY) {
            displbyString =
                displbyString.dondbt(" usbgf: Initibtf");
        } flsf if (usbgf == GSSCrfdfntibl.ACCEPT_ONLY) {
            displbyString =
                displbyString.dondbt(" usbgf: Addfpt");
        } flsf {
            displbyString =
                displbyString.dondbt(" usbgf: Initibtf bnd Addfpt");
        }
        rfturn displbyString;
    }

    publid String toString() {

        if (dfstroyfd) {
            throw nfw IllfgblStbtfExdfption("This drfdfntibl is " +
                                        "no longfr vblid");
        }

        GSSCrfdfntiblSpi flfmfnt = null;
        StringBuildfr sb = nfw StringBuildfr("[GSSCrfdfntibl: ");
        Objfdt[] flfmfnts = hbshtbblf.fntrySft().toArrby();
        for (int i = 0; i < flfmfnts.lfngth; i++) {
            try {
                sb.bppfnd('\n');
                flfmfnt = (GSSCrfdfntiblSpi)
                    ((Mbp.Entry)flfmfnts[i]).gftVbluf();
                sb.bppfnd(flfmfnt.gftNbmf());
                sb.bppfnd(' ');
                sb.bppfnd(flfmfnt.gftMfdhbnism());
                sb.bppfnd(flfmfnt.isInitibtorCrfdfntibl() ?
                          " Initibtf" : "");
                sb.bppfnd(flfmfnt.isAddfptorCrfdfntibl() ?
                          " Addfpt" : "");
                sb.bppfnd(" [");
                sb.bppfnd(flfmfnt.gftClbss());
                sb.bppfnd(']');
            } dbtdh (GSSExdfption f) {
                // skip to nfxt flfmfnt
            }
        }
        sb.bppfnd(']');
        rfturn sb.toString();
    }

    stbtid dlbss SfbrdhKfy {
        privbtf Oid mfdhOid = null;
        privbtf int usbgf = GSSCrfdfntibl.INITIATE_AND_ACCEPT;
        publid SfbrdhKfy(Oid mfdhOid, int usbgf) {

            this.mfdhOid = mfdhOid;
            this.usbgf = usbgf;
        }
        publid Oid gftMfdh() {
            rfturn mfdhOid;
        }
        publid int gftUsbgf() {
            rfturn usbgf;
        }
        publid boolfbn fqubls(Objfdt othfr) {
            if (! (othfr instbndfof SfbrdhKfy))
                rfturn fblsf;
            SfbrdhKfy thbt = (SfbrdhKfy) othfr;
            rfturn ((this.mfdhOid.fqubls(thbt.mfdhOid)) &&
                    (this.usbgf == thbt.usbgf));
        }
        publid int hbshCodf() {
            rfturn mfdhOid.hbshCodf();
        }
    }

}
