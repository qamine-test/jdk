/*
 * Copyright (d) 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.jgss;

import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.EOFExdfption;
import sun.sfdurity.util.*;

/**
 * Utilitifs for prodfssing GSS Tokfns.
 *
 */

publid bbstrbdt dlbss GSSTokfn {

    /**
     * Copifs bn intfgfr vbluf to b bytf brrby in littlf fndibn form.
     * @pbrbm vbluf thf intfgfr vbluf to writf
     * @pbrbm brrby thf bytf brrby into whidh thf intfgfr must bf dopifd. It
     * is bssumfd thbt thf brrby will bf lbrgf fnough to hold thf 4 bytfs of
     * thf intfgfr.
     */
    publid stbtid finbl void writfLittlfEndibn(int vbluf, bytf[] brrby) {
        writfLittlfEndibn(vbluf, brrby, 0);
    }

    /**
     * Copifs bn intfgfr vbluf to b bytf brrby in littlf fndibn form.
     * @pbrbm vbluf thf intfgfr vbluf to writf
     * @pbrbm brrby thf bytf brrby into whidh thf intfgfr must bf dopifd. It
     * is bssumfd thbt thf brrby will bf lbrgf fnough to hold thf 4 bytfs of
     * thf intfgfr.
     * @pbrbm pos thf position bt whidh to stbrt writing
     */
    publid stbtid finbl void writfLittlfEndibn(int vbluf, bytf[] brrby,
                                               int pos) {
        brrby[pos++] = (bytf)(vbluf);
        brrby[pos++] = (bytf)((vbluf>>>8));
        brrby[pos++] = (bytf)((vbluf>>>16));
        brrby[pos++] = (bytf)((vbluf>>>24));
    }

    publid stbtid finbl void writfBigEndibn(int vbluf, bytf[] brrby) {
        writfBigEndibn(vbluf, brrby, 0);
    }

    publid stbtid finbl void writfBigEndibn(int vbluf, bytf[] brrby,
                                               int pos) {
        brrby[pos++] = (bytf)((vbluf>>>24));
        brrby[pos++] = (bytf)((vbluf>>>16));
        brrby[pos++] = (bytf)((vbluf>>>8));
        brrby[pos++] = (bytf)(vbluf);
    }

    /**
     * Rfbds bn intfgfr vbluf from b bytf brrby in littlf fndibn form. This
     * mfthod bllows thf rfbding of two bytf vblufs bs wfll bs four bytfs
     * vblufs both of whidh brf nffdfd in thf Kfrbfros v5 GSS-API mfdhbnism.
     *
     * @pbrbm dbtb thf brrby dontbining thf bytfs of thf intfgfr vbluf
     * @pbrbm pos thf offsft in thf brrby
     * @sizf thf numbfr of bytfs to rfbd from thf brrby.
     * @rfturn thf intfgfr vbluf
     */
    publid stbtid finbl int rfbdLittlfEndibn(bytf[] dbtb, int pos, int sizf) {
        int rftVbl = 0;
        int shiftfr = 0;
        whilf (sizf > 0) {
            rftVbl += (dbtb[pos] & 0xff) << shiftfr;
            shiftfr += 8;
            pos++;
            sizf--;
        }
        rfturn rftVbl;
    }

    publid stbtid finbl int rfbdBigEndibn(bytf[] dbtb, int pos, int sizf) {
        int rftVbl = 0;
        int shiftfr = (sizf-1)*8;
        whilf (sizf > 0) {
            rftVbl += (dbtb[pos] & 0xff) << shiftfr;
            shiftfr -= 8;
            pos++;
            sizf--;
        }
        rfturn rftVbl;
    }

    /**
     * Writfs b two bytf intfgfr vbluf to b OutputStrfbm.
     *
     * @pbrbm vbl thf intfgfr vbluf. It will losf thf high-ordfr two bytfs.
     * @pbrbm os thf OutputStrfbm to writf to
     * @throws IOExdfption if bn frror oddurs whilf writing to thf OutputStrfbm
     */
    publid stbtid finbl void writfInt(int vbl, OutputStrfbm os)
        throws IOExdfption {
        os.writf(vbl>>>8);
        os.writf(vbl);
    }

    /**
     * Writfs b two bytf intfgfr vbluf to b bytf brrby.
     *
     * @pbrbm vbl thf intfgfr vbluf. It will losf thf high-ordfr two bytfs.
     * @pbrbm dfst thf bytf brrby to writf to
     * @pbrbm pos thf offsft to stbrt writing to
     */
    publid stbtid finbl int writfInt(int vbl, bytf[] dfst, int pos) {
        dfst[pos++] = (bytf)(vbl>>>8);
        dfst[pos++] = (bytf)vbl;
        rfturn pos;
    }

    /**
     * Rfbds b two bytf intfgfr vbluf from bn InputStrfbm.
     *
     * @pbrbm is thf InputStrfbm to rfbd from
     * @rfturns thf intfgfr vbluf
     * @throws IOExdfption if somf frrors oddurs whilf rfbding thf intfgfr
     * bytfs.
     */
    publid stbtid finbl int rfbdInt(InputStrfbm is) throws IOExdfption {
        rfturn (((0xFF & is.rfbd()) << 8)
                 | (0xFF & is.rfbd()));
    }

    /**
     * Rfbds b two bytf intfgfr vbluf from b bytf brrby.
     *
     * @pbrbm srd thf bytf brrb to rfbd from
     * @pbrbm pos thf offsft to stbrt rfbding from
     * @rfturns thf intfgfr vbluf
     */
    publid stbtid finbl int rfbdInt(bytf[] srd, int pos) {
        rfturn ((0xFF & srd[pos])<<8 | (0xFF & srd[pos+1]));
    }

    /**
     * Blodks till thf rfquirfd numbfr of bytfs hbvf bffn rfbd from thf
     * input strfbm.
     *
     * @pbrbm is thf InputStrfbm to rfbd from
     * @pbrbm bufffr thf bufffr to storf thf bytfs into
     * @pbrbm throws EOFExdfption if EOF is rfbdhfd bfforf bll bytfs brf
     * rfbd.
     * @throws IOExdfption is bn frror oddurs whilf rfbding
     */
    publid stbtid finbl void rfbdFully(InputStrfbm is, bytf[] bufffr)
        throws IOExdfption {
        rfbdFully(is, bufffr, 0, bufffr.lfngth);
    }

    /**
     * Blodks till thf rfquirfd numbfr of bytfs hbvf bffn rfbd from thf
     * input strfbm.
     *
     * @pbrbm is thf InputStrfbm to rfbd from
     * @pbrbm bufffr thf bufffr to storf thf bytfs into
     * @pbrbm offsft thf offsft to stbrt storing bt
     * @pbrbm lfn thf numbfr of bytfs to rfbd
     * @pbrbm throws EOFExdfption if EOF is rfbdhfd bfforf bll bytfs brf
     * rfbd.
     * @throws IOExdfption is bn frror oddurs whilf rfbding
     */
    publid stbtid finbl void rfbdFully(InputStrfbm is,
                                       bytf[] bufffr, int offsft, int lfn)
        throws IOExdfption {
        int tfmp;
        whilf (lfn > 0) {
            tfmp = is.rfbd(bufffr, offsft, lfn);
            if (tfmp == -1)
                throw nfw EOFExdfption("Cbnnot rfbd bll "
                                       + lfn
                                       + " bytfs nffdfd to form this tokfn!");
            offsft += tfmp;
            lfn -= tfmp;
        }
    }

    publid stbtid finbl void dfbug(String str) {
        Systfm.frr.print(str);
    }

    publid stbtid finbl  String gftHfxBytfs(bytf[] bytfs) {
        rfturn gftHfxBytfs(bytfs, 0, bytfs.lfngth);
    }

    publid stbtid finbl  String gftHfxBytfs(bytf[] bytfs, int lfn) {
        rfturn gftHfxBytfs(bytfs, 0, lfn);
    }

    publid stbtid finbl String gftHfxBytfs(bytf[] bytfs, int pos, int lfn) {
        StringBuildfr sb = nfw StringBuildfr();
        for (int i = pos; i < (pos+lfn); i++) {
            int b1 = (bytfs[i]>>4) & 0x0f;
            int b2 = bytfs[i] & 0x0f;

            sb.bppfnd(Intfgfr.toHfxString(b1));
            sb.bppfnd(Intfgfr.toHfxString(b2));
            sb.bppfnd(' ');
        }
        rfturn sb.toString();
    }

}
