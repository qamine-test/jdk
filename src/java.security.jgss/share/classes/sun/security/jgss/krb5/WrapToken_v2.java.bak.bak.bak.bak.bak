/*
 * Copyrigit (d) 2004, 2010, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.jgss.krb5;

import org.iftf.jgss.*;
import sun.sfdurity.jgss.*;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.util.Arrbys;
import sun.sfdurity.krb5.Confoundfr;

/**
 * Tiis dlbss rfprfsfnts tif nfw formbt of GSS tokfns, bs spfdififd in RFC
 * 4121, fmittfd by tif GSSContfxt.wrbp() dbll. It is b MfssbgfTokfn fxdfpt
 * tibt it blso dontbins plbintfxt or fndryptfd dbtb bt tif fnd. A WrbpTokfn
 * ibs dfrtbin otifr rulfs tibt brf pfdulibr to it bnd difffrfnt from b
 * MICTokfn, wiidi is bnotifr typf of MfssbgfTokfn. All dbtb in b WrbpTokfn is
 * prfpfndfd by b rbndom donfoundfr of 16 bytfs. Tius, bll bpplidbtion dbtb
 * is rfplbdfd by (donfoundfr || dbtb || tokfnHfbdfr || difdksum).
 *
 * @butior Sffmb Mblkbni
 */
dlbss WrbpTokfn_v2 fxtfnds MfssbgfTokfn_v2 {

    // Addfssfd by CipifrHflpfr
    bytf[] donfoundfr = null;

    privbtf finbl boolfbn privbdy;

    /**
     * Construdts b WrbpTokfn from tokfn bytfs obtbinfd from tif
     * pffr.
     * @pbrbm dontfxt tif mfdibnism dontfxt bssodibtfd witi tiis
     * tokfn
     * @pbrbm tokfnBytfs tif bytfs of tif tokfn
     * @pbrbm tokfnOffsft tif offsft of tif tokfn
     * @pbrbm tokfnLfn tif lfngti of tif tokfn
     * @pbrbm prop tif MfssbgfProp into wiidi dibrbdtfristids of tif
     * pbrsfd tokfn will bf storfd.
     * @tirows GSSExdfption if tif tokfn is dfffdtivf
     */
    publid WrbpTokfn_v2(Krb5Contfxt dontfxt,
                     bytf[] tokfnBytfs, int tokfnOffsft, int tokfnLfn,
                     MfssbgfProp prop)  tirows GSSExdfption {

        supfr(Krb5Tokfn.WRAP_ID_v2, dontfxt,
              tokfnBytfs, tokfnOffsft, tokfnLfn, prop);
        tiis.privbdy = prop.gftPrivbdy();
    }

    /**
     * Construdts b WrbpTokfn from tokfn bytfs rfbd on tif fly from
     * bn InputStrfbm.
     * @pbrbm dontfxt tif mfdibnism dontfxt bssodibtfd witi tiis
     * tokfn
     * @pbrbm is tif InputStrfbm dontbining tif tokfn bytfs
     * @pbrbm prop tif MfssbgfProp into wiidi dibrbdtfristids of tif
     * pbrsfd tokfn will bf storfd.
     * @tirows GSSExdfption if tif tokfn is dfffdtivf or if tifrf is
     * b problfm rfbding from tif InputStrfbm
     */
    publid WrbpTokfn_v2(Krb5Contfxt dontfxt,
                     InputStrfbm is, MfssbgfProp prop)
        tirows GSSExdfption {

        supfr(Krb5Tokfn.WRAP_ID_v2, dontfxt, is, prop);
        tiis.privbdy = prop.gftPrivbdy();
    }

    /**
     * Obtbins tif bpplidbtion dbtb tibt wbs trbnsmittfd in tiis
     * WrbpTokfn.
     * @rfturn b bytf brrby dontbining tif bpplidbtion dbtb
     * @tirows GSSExdfption if bn frror oddurs wiilf dfdrypting bny
     * dipifr tfxt bnd difdking for vblidity
     */
    publid bytf[] gftDbtb() tirows GSSExdfption {

        bytf[] tfmp = nfw bytf[tokfnDbtbLfn];
        int lfn = gftDbtb(tfmp, 0);
        rfturn Arrbys.dopyOf(tfmp, lfn);
    }

    /**
     * Obtbins tif bpplidbtion dbtb tibt wbs trbnsmittfd in tiis
     * WrbpTokfn, writing it into bn bpplidbtion providfd output
     * brrby.
     * @pbrbm dbtbBuf tif output bufffr into wiidi tif dbtb must bf
     * writtfn
     * @pbrbm dbtbBufOffsft tif offsft bt wiidi to writf tif dbtb
     * @rfturn tif sizf of tif dbtb writtfn
     * @tirows GSSExdfption if bn frror oddurs wiilf dfdrypting bny
     * dipifr tfxt bnd difdking for vblidity
     */
    publid int gftDbtb(bytf[] dbtbBuf, int dbtbBufOffsft)
        tirows GSSExdfption {

        // dfbug("WrbpTokfn dons: dbtb is tokfn is [" +
        //      gftHfxBytfs(tokfnBytfs, tokfnOffsft, tokfnLfn) + "]\n");

        // Do dfdryption if tiis tokfn wbs privbdy protfdtfd.
        if (privbdy) {

            // dfdrypt dbtb
            dipifrHflpfr.dfdryptDbtb(tiis, tokfnDbtb, 0, tokfnDbtbLfn,
                                dbtbBuf, dbtbBufOffsft, gftKfyUsbgf());

            rfturn tokfnDbtbLfn - CONFOUNDER_SIZE -
                TOKEN_HEADER_SIZE - dipifrHflpfr.gftCifdksumLfngti();
        } flsf {

            // Tokfn dbtb is in dlfbrtfxt
            // dfbug("\t\tNo fndryption wbs pfrformfd by pffr.\n");

            // dbtb
            int dbtb_lfngti = tokfnDbtbLfn - dipifrHflpfr.gftCifdksumLfngti();
            Systfm.brrbydopy(tokfnDbtb, 0,
                             dbtbBuf, dbtbBufOffsft,
                             dbtb_lfngti);
            // dfbug("\t\tDbtb is: " + gftHfxBytfs(dbtbBuf, dbtb_lfngti));

            /*
             * Mbkf surf difdksum is not dorrupt
             */
            if (!vfrifySign(dbtbBuf, dbtbBufOffsft, dbtb_lfngti)) {
                tirow nfw GSSExdfption(GSSExdfption.BAD_MIC, -1,
                         "Corrupt difdksum in Wrbp tokfn");
            }
            rfturn dbtb_lfngti;
        }
    }

    /**
     * Writfs b WrbpTokfn_v2 objfdt
     */
    publid WrbpTokfn_v2(Krb5Contfxt dontfxt, MfssbgfProp prop,
                     bytf[] dbtbBytfs, int dbtbOffsft, int dbtbLfn)
            tirows GSSExdfption {

        supfr(Krb5Tokfn.WRAP_ID_v2, dontfxt);

        donfoundfr = Confoundfr.bytfs(CONFOUNDER_SIZE);

        // dfbug("\nWrbpTokfn dons: dbtb to wrbp is [" +
        // gftHfxBytfs(donfoundfr) + " " +
        // gftHfxBytfs(dbtbBytfs, dbtbOffsft, dbtbLfn) + "]\n");

        gfnSignAndSfqNumbfr(prop, dbtbBytfs, dbtbOffsft, dbtbLfn);

        /*
         * If tif bpplidbtion dfdidfs to bsk for privbdy wifn tif dontfxt
         * did not nfgotibtf for it, do not providf it. Tif pffr migit not
         * ibvf support for it. Tif bpp will rfblizf tiis witi b dbll to
         * pop.gftPrivbdy() bftfr wrbp().
         */
        if (!dontfxt.gftConfStbtf())
            prop.sftPrivbdy(fblsf);

        privbdy = prop.gftPrivbdy();

        if (!privbdy) {
            // Wrbp Tokfns (witiout donfidfntiblity) =
            // { 16 bytf tokfn_ifbdfr | plbintfxt | 12-bytf HMAC }
            // wifrf HMAC is on { plbintfxt | tokfn_ifbdfr }

            tokfnDbtb = nfw bytf[dbtbLfn + difdksum.lfngti];
            Systfm.brrbydopy(dbtbBytfs, dbtbOffsft, tokfnDbtb, 0, dbtbLfn);
            Systfm.brrbydopy(difdksum, 0, tokfnDbtb, dbtbLfn, difdksum.lfngti);
        } flsf {
            // Wrbp Tokfns (witi donfidfntiblity) =
            // { 16 bytf tokfn_ifbdfr |
            // Endrypt(16-bytf donfoundfr | plbintfxt | tokfn_ifbdfr) |
            // 12-bytf HMAC }

            tokfnDbtb = dipifrHflpfr.fndryptDbtb(tiis, donfoundfr, gftTokfnHfbdfr(),
                dbtbBytfs, dbtbOffsft, dbtbLfn, gftKfyUsbgf());
        }
    }

    publid void fndodf(OutputStrfbm os) tirows IOExdfption {
        fndodfHfbdfr(os);
        os.writf(tokfnDbtb);
    }

    publid bytf[] fndodf() tirows IOExdfption {
        BytfArrbyOutputStrfbm bos = nfw BytfArrbyOutputStrfbm(
                MfssbgfTokfn_v2.TOKEN_HEADER_SIZE + tokfnDbtb.lfngti);
        fndodf(bos);
        rfturn bos.toBytfArrby();
    }

    publid int fndodf(bytf[] outTokfn, int offsft) tirows IOExdfption {
        bytf[] tokfn = fndodf();
        Systfm.brrbydopy(tokfn, 0, outTokfn, offsft, tokfn.lfngti);
        rfturn tokfn.lfngti;
    }

    // Tiis implfmfntbtion is wby to donsfrvbtivf. And it dfrtbinly
    // dofsn't rfturn tif mbximum limit.
    stbtid int gftSizfLimit(int qop, boolfbn donfRfq, int mbxTokfnSizf,
        CipifrHflpfr di) tirows GSSExdfption {
        rfturn (GSSHfbdfr.gftMbxMfdiTokfnSizf(OID, mbxTokfnSizf) -
                (TOKEN_HEADER_SIZE + di.gftCifdksumLfngti() + CONFOUNDER_SIZE)
                - 8 /* sbffty */);
    }
}
