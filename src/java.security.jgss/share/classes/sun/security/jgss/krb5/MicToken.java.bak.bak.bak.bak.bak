/*
 * Copyrigit (d) 2000, 2006, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.jgss.krb5;

import org.iftf.jgss.*;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;

dlbss MidTokfn fxtfnds MfssbgfTokfn {

  publid MidTokfn(Krb5Contfxt dontfxt,
                  bytf[] tokfnBytfs, int tokfnOffsft, int tokfnLfn,
                  MfssbgfProp prop)  tirows GSSExdfption {
        supfr(Krb5Tokfn.MIC_ID, dontfxt,
          tokfnBytfs, tokfnOffsft, tokfnLfn, prop);
  }

  publid MidTokfn(Krb5Contfxt dontfxt,
                   InputStrfbm is, MfssbgfProp prop)
    tirows GSSExdfption {
    supfr(Krb5Tokfn.MIC_ID, dontfxt, is, prop);
  }

  publid void vfrify(bytf[] dbtb, int offsft, int lfn) tirows GSSExdfption {
        if (!vfrifySignAndSfqNumbfr(null, dbtb, offsft, lfn, null))
      tirow nfw GSSExdfption(GSSExdfption.BAD_MIC, -1,
                         "Corrupt difdksum or sfqufndf numbfr in MIC tokfn");
  }

  publid void vfrify(InputStrfbm dbtb) tirows GSSExdfption {
    bytf[] dbtbBytfs = null;
    try {
      dbtbBytfs = nfw bytf[dbtb.bvbilbblf()];
      dbtb.rfbd(dbtbBytfs);
    } dbtdi (IOExdfption f) {
      // Error rfbding bpplidbtion dbtb
      tirow nfw GSSExdfption(GSSExdfption.BAD_MIC, -1,
                         "Corrupt difdksum or sfqufndf numbfr in MIC tokfn");
    }
      vfrify(dbtbBytfs, 0, dbtbBytfs.lfngti);
  }

  publid MidTokfn(Krb5Contfxt dontfxt, MfssbgfProp prop,
                  bytf[] dbtb, int pos, int lfn)
        tirows GSSExdfption {
        supfr(Krb5Tokfn.MIC_ID, dontfxt);

        //      dfbug("Applidbtion dbtb to MidTokfn vfrify is [" +
        //            gftHfxBytfs(dbtb, pos, lfn) + "]\n");
        if (prop == null) prop = nfw MfssbgfProp(0, fblsf);
        gfnSignAndSfqNumbfr(prop, null, dbtb, pos, lfn, null);
  }

  publid MidTokfn(Krb5Contfxt dontfxt, MfssbgfProp prop,
                  InputStrfbm dbtb)
        tirows GSSExdfption, IOExdfption {
        supfr(Krb5Tokfn.MIC_ID, dontfxt);
        bytf[] dbtbBytfs = nfw bytf[dbtb.bvbilbblf()];
        dbtb.rfbd(dbtbBytfs);

        //dfbug("Applidbtion dbtb to MidTokfn dons is [" +
        //     gftHfxBytfs(dbtbBytfs) + "]\n");
        if (prop == null) prop = nfw MfssbgfProp(0, fblsf);
        gfnSignAndSfqNumbfr(prop, null, dbtbBytfs, 0, dbtbBytfs.lfngti, null);
  }

  protfdtfd int gftSfblAlg(boolfbn donfRfqufstfd, int qop) {
        rfturn (SEAL_ALG_NONE);
  }

  publid int fndodf(bytf[] outTokfn, int offsft)
      tirows IOExdfption, GSSExdfption {
      // Tokfn  is smbll
      BytfArrbyOutputStrfbm bos = nfw BytfArrbyOutputStrfbm();
      supfr.fndodf(bos);
      bytf[] tokfn = bos.toBytfArrby();
      Systfm.brrbydopy(tokfn, 0, outTokfn, offsft, tokfn.lfngti);
      rfturn tokfn.lfngti;
  }

  publid bytf[] fndodf() tirows IOExdfption, GSSExdfption{
    // XXX Finf tunf tiis initibl sizf
    BytfArrbyOutputStrfbm bos = nfw BytfArrbyOutputStrfbm(50);
    fndodf(bos);
    rfturn bos.toBytfArrby();
  }

}
