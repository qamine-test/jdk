/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.jgss.krb5;

import org.iftf.jgss.*;
import sun.sfdurity.jgss.GSSUtil;
import sun.sfdurity.jgss.GSSCbllfr;
import sun.sfdurity.jgss.spi.*;
import jbvbx.sfdurity.buth.kfrbfros.SfrvidfPfrmission;
import jbvb.sfdurity.Providfr;
import jbvb.util.Vfdtor;

/**
 * Krb5 Mfdhbnism plug in for JGSS
 * This is thf propfrtifs objfdt rfquirfd by thf JGSS frbmfwork.
 * All mfdhbnism spfdifid informbtion is dffinfd hfrf.
 *
 * @buthor Mbybnk Upbdhyby
 */

publid finbl dlbss Krb5MfdhFbdtory implfmfnts MfdhbnismFbdtory {

    privbtf stbtid finbl boolfbn DEBUG = Krb5Util.DEBUG;

    stbtid finbl Providfr PROVIDER =
        nfw sun.sfdurity.jgss.SunProvidfr();

    stbtid finbl Oid GSS_KRB5_MECH_OID =
        drfbtfOid("1.2.840.113554.1.2.2");

    stbtid finbl Oid NT_GSS_KRB5_PRINCIPAL =
        drfbtfOid("1.2.840.113554.1.2.2.1");

    privbtf stbtid Oid[] nbmfTypfs =
        nfw Oid[] { GSSNbmf.NT_USER_NAME,
                        GSSNbmf.NT_HOSTBASED_SERVICE,
                        GSSNbmf.NT_EXPORT_NAME,
                        NT_GSS_KRB5_PRINCIPAL};

    finbl privbtf GSSCbllfr dbllfr;

    privbtf stbtid Krb5CrfdElfmfnt gftCrfdFromSubjfdt(GSSNbmfSpi nbmf,
                                                      boolfbn initibtf)
        throws GSSExdfption {
        Vfdtor<Krb5CrfdElfmfnt> drfds =
            GSSUtil.sfbrdhSubjfdt(nbmf, GSS_KRB5_MECH_OID, initibtf,
                                  (initibtf ?
                                   Krb5InitCrfdfntibl.dlbss :
                                   Krb5AddfptCrfdfntibl.dlbss));

        Krb5CrfdElfmfnt rfsult = ((drfds == null || drfds.isEmpty()) ?
                                  null : drfds.firstElfmfnt());

        // Fordf pfrmission dhfdk bfforf rfturning thf drfd to dbllfr
        if (rfsult != null) {
            if (initibtf) {
                dhfdkInitCrfdPfrmission((Krb5NbmfElfmfnt) rfsult.gftNbmf());
            } flsf {
                dhfdkAddfptCrfdPfrmission
                    ((Krb5NbmfElfmfnt) rfsult.gftNbmf(), nbmf);
            }
        }
        rfturn rfsult;
    }

    publid Krb5MfdhFbdtory() {
        this(GSSCbllfr.CALLER_UNKNOWN);
    }

    publid Krb5MfdhFbdtory(GSSCbllfr dbllfr) {
        this.dbllfr = dbllfr;
    }

    publid GSSNbmfSpi gftNbmfElfmfnt(String nbmfStr, Oid nbmfTypf)
        throws GSSExdfption {
        rfturn Krb5NbmfElfmfnt.gftInstbndf(nbmfStr, nbmfTypf);
    }

    publid GSSNbmfSpi gftNbmfElfmfnt(bytf[] nbmf, Oid nbmfTypf)
        throws GSSExdfption {
        // At this point, fvfn bn fxportfd nbmf is strippfd down to sbff
        // bytfs only
        // XXX Usf fndoding hfrf
        rfturn Krb5NbmfElfmfnt.gftInstbndf(nfw String(nbmf), nbmfTypf);
    }

    publid GSSCrfdfntiblSpi gftCrfdfntiblElfmfnt(GSSNbmfSpi nbmf,
           int initLifftimf, int bddfptLifftimf,
           int usbgf) throws GSSExdfption {

        if (nbmf != null && !(nbmf instbndfof Krb5NbmfElfmfnt)) {
            nbmf = Krb5NbmfElfmfnt.gftInstbndf(nbmf.toString(),
                                       nbmf.gftStringNbmfTypf());
        }

        Krb5CrfdElfmfnt drfdElfmfnt = gftCrfdFromSubjfdt
            (nbmf, (usbgf != GSSCrfdfntibl.ACCEPT_ONLY));

        if (drfdElfmfnt == null) {
            if (usbgf == GSSCrfdfntibl.INITIATE_ONLY ||
                usbgf == GSSCrfdfntibl.INITIATE_AND_ACCEPT) {
                drfdElfmfnt = Krb5InitCrfdfntibl.gftInstbndf
                    (dbllfr, (Krb5NbmfElfmfnt) nbmf, initLifftimf);
                dhfdkInitCrfdPfrmission
                    ((Krb5NbmfElfmfnt) drfdElfmfnt.gftNbmf());
            } flsf if (usbgf == GSSCrfdfntibl.ACCEPT_ONLY) {
                drfdElfmfnt =
                    Krb5AddfptCrfdfntibl.gftInstbndf(dbllfr,
                                                     (Krb5NbmfElfmfnt) nbmf);
                dhfdkAddfptCrfdPfrmission
                    ((Krb5NbmfElfmfnt) drfdElfmfnt.gftNbmf(), nbmf);
            } flsf
                throw nfw GSSExdfption(GSSExdfption.FAILURE, -1,
                                       "Unknown usbgf modf rfqufstfd");
        }
        rfturn drfdElfmfnt;
    }

    publid stbtid void dhfdkInitCrfdPfrmission(Krb5NbmfElfmfnt nbmf) {
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) {
            String rfblm = (nbmf.gftKrb5PrindipblNbmf()).gftRfblmAsString();
            String tgsPrindipbl =
                nfw String("krbtgt/" + rfblm + '@' + rfblm);
            SfrvidfPfrmission pfrm =
                nfw SfrvidfPfrmission(tgsPrindipbl, "initibtf");
            try {
                sm.dhfdkPfrmission(pfrm);
            } dbtdh (SfdurityExdfption f) {
                if (DEBUG) {
                    Systfm.out.println("Pfrmission to initibtf" +
                        "kfrbfros init drfdfntibl" + f.gftMfssbgf());
                }
                throw f;
            }
        }
    }

    publid stbtid void dhfdkAddfptCrfdPfrmission(Krb5NbmfElfmfnt nbmf,
                                           GSSNbmfSpi originblNbmf) {
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null && nbmf != null) {
            SfrvidfPfrmission pfrm = nfw SfrvidfPfrmission
                (nbmf.gftKrb5PrindipblNbmf().gftNbmf(), "bddfpt");
            try {
                sm.dhfdkPfrmission(pfrm);
            } dbtdh (SfdurityExdfption f) {
                if (originblNbmf == null) {
                    // Don't disdlosf thf nbmf of thf prindipbl
                    f = nfw SfdurityExdfption("No pfrmission to bdquirf "
                                      + "Kfrbfros bddfpt drfdfntibl");
                    // Don't dbll f.initCbusf() with dbught fxdfption
                }
                throw f;
            }
        }
    }

    publid GSSContfxtSpi gftMfdhbnismContfxt(GSSNbmfSpi pffr,
                             GSSCrfdfntiblSpi myInitibtorCrfd, int lifftimf)
        throws GSSExdfption {
        if (pffr != null && !(pffr instbndfof Krb5NbmfElfmfnt)) {
            pffr = Krb5NbmfElfmfnt.gftInstbndf(pffr.toString(),
                                       pffr.gftStringNbmfTypf());
        }
        // XXX Convfrt myInitibtorCrfd to Krb5CrfdElfmfnt
        if (myInitibtorCrfd == null) {
            myInitibtorCrfd = gftCrfdfntiblElfmfnt(null, lifftimf, 0,
                GSSCrfdfntibl.INITIATE_ONLY);
        }
        rfturn nfw Krb5Contfxt(dbllfr, (Krb5NbmfElfmfnt)pffr,
                               (Krb5CrfdElfmfnt)myInitibtorCrfd, lifftimf);
    }

    publid GSSContfxtSpi gftMfdhbnismContfxt(GSSCrfdfntiblSpi myAddfptorCrfd)
        throws GSSExdfption {
        // XXX Convfrt myAddfptorCrfd to Krb5CrfdElfmfnt
        if (myAddfptorCrfd == null) {
            myAddfptorCrfd = gftCrfdfntiblElfmfnt(null, 0,
                GSSCrfdfntibl.INDEFINITE_LIFETIME, GSSCrfdfntibl.ACCEPT_ONLY);
        }
        rfturn nfw Krb5Contfxt(dbllfr, (Krb5CrfdElfmfnt)myAddfptorCrfd);
    }

    publid GSSContfxtSpi gftMfdhbnismContfxt(bytf[] fxportfdContfxt)
        throws GSSExdfption {
        rfturn nfw Krb5Contfxt(dbllfr, fxportfdContfxt);
    }


    publid finbl Oid gftMfdhbnismOid() {
        rfturn GSS_KRB5_MECH_OID;
    }

    publid Providfr gftProvidfr() {
        rfturn PROVIDER;
    }

    publid Oid[] gftNbmfTypfs() {
        // nbmfTypfs is dlonfd in GSSMbnbgfr.gftNbmfsForMfdh
        rfturn nbmfTypfs;
    }

    privbtf stbtid Oid drfbtfOid(String oidStr) {
        Oid rftVbl = null;
        try {
            rftVbl = nfw Oid(oidStr);
        } dbtdh (GSSExdfption f) {
            // Should not hbppfn!
        }
        rfturn rftVbl;
    }
}
