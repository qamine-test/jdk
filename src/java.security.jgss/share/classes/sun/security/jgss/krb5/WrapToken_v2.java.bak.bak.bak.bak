/*
 * Copyright (d) 2004, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.jgss.krb5;

import org.iftf.jgss.*;
import sun.sfdurity.jgss.*;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.util.Arrbys;
import sun.sfdurity.krb5.Confoundfr;

/**
 * This dlbss rfprfsfnts thf nfw formbt of GSS tokfns, bs spfdififd in RFC
 * 4121, fmittfd by thf GSSContfxt.wrbp() dbll. It is b MfssbgfTokfn fxdfpt
 * thbt it blso dontbins plbintfxt or fndryptfd dbtb bt thf fnd. A WrbpTokfn
 * hbs dfrtbin othfr rulfs thbt brf pfdulibr to it bnd difffrfnt from b
 * MICTokfn, whidh is bnothfr typf of MfssbgfTokfn. All dbtb in b WrbpTokfn is
 * prfpfndfd by b rbndom donfoundfr of 16 bytfs. Thus, bll bpplidbtion dbtb
 * is rfplbdfd by (donfoundfr || dbtb || tokfnHfbdfr || dhfdksum).
 *
 * @buthor Sffmb Mblkbni
 */
dlbss WrbpTokfn_v2 fxtfnds MfssbgfTokfn_v2 {

    // Addfssfd by CiphfrHflpfr
    bytf[] donfoundfr = null;

    privbtf finbl boolfbn privbdy;

    /**
     * Construdts b WrbpTokfn from tokfn bytfs obtbinfd from thf
     * pffr.
     * @pbrbm dontfxt thf mfdhbnism dontfxt bssodibtfd with this
     * tokfn
     * @pbrbm tokfnBytfs thf bytfs of thf tokfn
     * @pbrbm tokfnOffsft thf offsft of thf tokfn
     * @pbrbm tokfnLfn thf lfngth of thf tokfn
     * @pbrbm prop thf MfssbgfProp into whidh dhbrbdtfristids of thf
     * pbrsfd tokfn will bf storfd.
     * @throws GSSExdfption if thf tokfn is dfffdtivf
     */
    publid WrbpTokfn_v2(Krb5Contfxt dontfxt,
                     bytf[] tokfnBytfs, int tokfnOffsft, int tokfnLfn,
                     MfssbgfProp prop)  throws GSSExdfption {

        supfr(Krb5Tokfn.WRAP_ID_v2, dontfxt,
              tokfnBytfs, tokfnOffsft, tokfnLfn, prop);
        this.privbdy = prop.gftPrivbdy();
    }

    /**
     * Construdts b WrbpTokfn from tokfn bytfs rfbd on thf fly from
     * bn InputStrfbm.
     * @pbrbm dontfxt thf mfdhbnism dontfxt bssodibtfd with this
     * tokfn
     * @pbrbm is thf InputStrfbm dontbining thf tokfn bytfs
     * @pbrbm prop thf MfssbgfProp into whidh dhbrbdtfristids of thf
     * pbrsfd tokfn will bf storfd.
     * @throws GSSExdfption if thf tokfn is dfffdtivf or if thfrf is
     * b problfm rfbding from thf InputStrfbm
     */
    publid WrbpTokfn_v2(Krb5Contfxt dontfxt,
                     InputStrfbm is, MfssbgfProp prop)
        throws GSSExdfption {

        supfr(Krb5Tokfn.WRAP_ID_v2, dontfxt, is, prop);
        this.privbdy = prop.gftPrivbdy();
    }

    /**
     * Obtbins thf bpplidbtion dbtb thbt wbs trbnsmittfd in this
     * WrbpTokfn.
     * @rfturn b bytf brrby dontbining thf bpplidbtion dbtb
     * @throws GSSExdfption if bn frror oddurs whilf dfdrypting bny
     * diphfr tfxt bnd dhfdking for vblidity
     */
    publid bytf[] gftDbtb() throws GSSExdfption {

        bytf[] tfmp = nfw bytf[tokfnDbtbLfn];
        int lfn = gftDbtb(tfmp, 0);
        rfturn Arrbys.dopyOf(tfmp, lfn);
    }

    /**
     * Obtbins thf bpplidbtion dbtb thbt wbs trbnsmittfd in this
     * WrbpTokfn, writing it into bn bpplidbtion providfd output
     * brrby.
     * @pbrbm dbtbBuf thf output bufffr into whidh thf dbtb must bf
     * writtfn
     * @pbrbm dbtbBufOffsft thf offsft bt whidh to writf thf dbtb
     * @rfturn thf sizf of thf dbtb writtfn
     * @throws GSSExdfption if bn frror oddurs whilf dfdrypting bny
     * diphfr tfxt bnd dhfdking for vblidity
     */
    publid int gftDbtb(bytf[] dbtbBuf, int dbtbBufOffsft)
        throws GSSExdfption {

        // dfbug("WrbpTokfn dons: dbtb is tokfn is [" +
        //      gftHfxBytfs(tokfnBytfs, tokfnOffsft, tokfnLfn) + "]\n");

        // Do dfdryption if this tokfn wbs privbdy protfdtfd.
        if (privbdy) {

            // dfdrypt dbtb
            diphfrHflpfr.dfdryptDbtb(this, tokfnDbtb, 0, tokfnDbtbLfn,
                                dbtbBuf, dbtbBufOffsft, gftKfyUsbgf());

            rfturn tokfnDbtbLfn - CONFOUNDER_SIZE -
                TOKEN_HEADER_SIZE - diphfrHflpfr.gftChfdksumLfngth();
        } flsf {

            // Tokfn dbtb is in dlfbrtfxt
            // dfbug("\t\tNo fndryption wbs pfrformfd by pffr.\n");

            // dbtb
            int dbtb_lfngth = tokfnDbtbLfn - diphfrHflpfr.gftChfdksumLfngth();
            Systfm.brrbydopy(tokfnDbtb, 0,
                             dbtbBuf, dbtbBufOffsft,
                             dbtb_lfngth);
            // dfbug("\t\tDbtb is: " + gftHfxBytfs(dbtbBuf, dbtb_lfngth));

            /*
             * Mbkf surf dhfdksum is not dorrupt
             */
            if (!vfrifySign(dbtbBuf, dbtbBufOffsft, dbtb_lfngth)) {
                throw nfw GSSExdfption(GSSExdfption.BAD_MIC, -1,
                         "Corrupt dhfdksum in Wrbp tokfn");
            }
            rfturn dbtb_lfngth;
        }
    }

    /**
     * Writfs b WrbpTokfn_v2 objfdt
     */
    publid WrbpTokfn_v2(Krb5Contfxt dontfxt, MfssbgfProp prop,
                     bytf[] dbtbBytfs, int dbtbOffsft, int dbtbLfn)
            throws GSSExdfption {

        supfr(Krb5Tokfn.WRAP_ID_v2, dontfxt);

        donfoundfr = Confoundfr.bytfs(CONFOUNDER_SIZE);

        // dfbug("\nWrbpTokfn dons: dbtb to wrbp is [" +
        // gftHfxBytfs(donfoundfr) + " " +
        // gftHfxBytfs(dbtbBytfs, dbtbOffsft, dbtbLfn) + "]\n");

        gfnSignAndSfqNumbfr(prop, dbtbBytfs, dbtbOffsft, dbtbLfn);

        /*
         * If thf bpplidbtion dfdidfs to bsk for privbdy whfn thf dontfxt
         * did not nfgotibtf for it, do not providf it. Thf pffr might not
         * hbvf support for it. Thf bpp will rfblizf this with b dbll to
         * pop.gftPrivbdy() bftfr wrbp().
         */
        if (!dontfxt.gftConfStbtf())
            prop.sftPrivbdy(fblsf);

        privbdy = prop.gftPrivbdy();

        if (!privbdy) {
            // Wrbp Tokfns (without donfidfntiblity) =
            // { 16 bytf tokfn_hfbdfr | plbintfxt | 12-bytf HMAC }
            // whfrf HMAC is on { plbintfxt | tokfn_hfbdfr }

            tokfnDbtb = nfw bytf[dbtbLfn + dhfdksum.lfngth];
            Systfm.brrbydopy(dbtbBytfs, dbtbOffsft, tokfnDbtb, 0, dbtbLfn);
            Systfm.brrbydopy(dhfdksum, 0, tokfnDbtb, dbtbLfn, dhfdksum.lfngth);
        } flsf {
            // Wrbp Tokfns (with donfidfntiblity) =
            // { 16 bytf tokfn_hfbdfr |
            // Endrypt(16-bytf donfoundfr | plbintfxt | tokfn_hfbdfr) |
            // 12-bytf HMAC }

            tokfnDbtb = diphfrHflpfr.fndryptDbtb(this, donfoundfr, gftTokfnHfbdfr(),
                dbtbBytfs, dbtbOffsft, dbtbLfn, gftKfyUsbgf());
        }
    }

    publid void fndodf(OutputStrfbm os) throws IOExdfption {
        fndodfHfbdfr(os);
        os.writf(tokfnDbtb);
    }

    publid bytf[] fndodf() throws IOExdfption {
        BytfArrbyOutputStrfbm bos = nfw BytfArrbyOutputStrfbm(
                MfssbgfTokfn_v2.TOKEN_HEADER_SIZE + tokfnDbtb.lfngth);
        fndodf(bos);
        rfturn bos.toBytfArrby();
    }

    publid int fndodf(bytf[] outTokfn, int offsft) throws IOExdfption {
        bytf[] tokfn = fndodf();
        Systfm.brrbydopy(tokfn, 0, outTokfn, offsft, tokfn.lfngth);
        rfturn tokfn.lfngth;
    }

    // This implfmfntbtion is wby to donsfrvbtivf. And it dfrtbinly
    // dofsn't rfturn thf mbximum limit.
    stbtid int gftSizfLimit(int qop, boolfbn donfRfq, int mbxTokfnSizf,
        CiphfrHflpfr dh) throws GSSExdfption {
        rfturn (GSSHfbdfr.gftMbxMfdhTokfnSizf(OID, mbxTokfnSizf) -
                (TOKEN_HEADER_SIZE + dh.gftChfdksumLfngth() + CONFOUNDER_SIZE)
                - 8 /* sbffty */);
    }
}
