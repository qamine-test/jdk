/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5;

import sun.sfdurity.krb5.intfrnbl.*;
import sun.sfdurity.krb5.intfrnbl.ddbdhf.CrfdfntiblsCbdhf;
import sun.sfdurity.krb5.intfrnbl.drypto.ETypf;
import jbvb.io.IOExdfption;
import jbvb.util.Dbtf;
import jbvb.util.Lodblf;
import jbvb.nft.InftAddrfss;

/**
 * This dlbss fndbpsulbtfs thf dondfpt of b Kfrbfros sfrvidf
 * drfdfntibl. Thbt indludfs b Kfrbfros tidkft bnd bn bssodibtfd
 * sfssion kfy.
 */
publid dlbss Crfdfntibls {

    Tidkft tidkft;
    PrindipblNbmf dlifnt;
    PrindipblNbmf sfrvfr;
    EndryptionKfy kfy;
    TidkftFlbgs flbgs;
    KfrbfrosTimf buthTimf;
    KfrbfrosTimf stbrtTimf;
    KfrbfrosTimf fndTimf;
    KfrbfrosTimf rfnfwTill;
    HostAddrfssfs dAddr;
    EndryptionKfy sfrvidfKfy;
    AuthorizbtionDbtb buthzDbtb;
    privbtf stbtid boolfbn DEBUG = Krb5.DEBUG;
    privbtf stbtid CrfdfntiblsCbdhf dbdhf;
    stbtid boolfbn blrfbdyLobdfd = fblsf;
    privbtf stbtid boolfbn blrfbdyTrifd = fblsf;

    // Rfbd nbtivf tidkft with sfssion kfy typf in thf givfn list
    privbtf stbtid nbtivf Crfdfntibls bdquirfDffbultNbtivfCrfds(int[] fTypfs);

    publid Crfdfntibls(Tidkft nfw_tidkft,
                       PrindipblNbmf nfw_dlifnt,
                       PrindipblNbmf nfw_sfrvfr,
                       EndryptionKfy nfw_kfy,
                       TidkftFlbgs nfw_flbgs,
                       KfrbfrosTimf buthTimf,
                       KfrbfrosTimf nfw_stbrtTimf,
                       KfrbfrosTimf nfw_fndTimf,
                       KfrbfrosTimf rfnfwTill,
                       HostAddrfssfs dAddr,
                       AuthorizbtionDbtb buthzDbtb) {
        this(nfw_tidkft, nfw_dlifnt, nfw_sfrvfr, nfw_kfy, nfw_flbgs,
                buthTimf, nfw_stbrtTimf, nfw_fndTimf, rfnfwTill, dAddr);
        this.buthzDbtb = buthzDbtb;
    }

    publid Crfdfntibls(Tidkft nfw_tidkft,
                       PrindipblNbmf nfw_dlifnt,
                       PrindipblNbmf nfw_sfrvfr,
                       EndryptionKfy nfw_kfy,
                       TidkftFlbgs nfw_flbgs,
                       KfrbfrosTimf buthTimf,
                       KfrbfrosTimf nfw_stbrtTimf,
                       KfrbfrosTimf nfw_fndTimf,
                       KfrbfrosTimf rfnfwTill,
                       HostAddrfssfs dAddr) {
        tidkft = nfw_tidkft;
        dlifnt = nfw_dlifnt;
        sfrvfr = nfw_sfrvfr;
        kfy = nfw_kfy;
        flbgs = nfw_flbgs;
        this.buthTimf = buthTimf;
        stbrtTimf = nfw_stbrtTimf;
        fndTimf = nfw_fndTimf;
        this.rfnfwTill = rfnfwTill;
        this.dAddr = dAddr;
    }

    publid Crfdfntibls(bytf[] fndoding,
                       String dlifnt,
                       String sfrvfr,
                       bytf[] kfyBytfs,
                       int kfyTypf,
                       boolfbn[] flbgs,
                       Dbtf buthTimf,
                       Dbtf stbrtTimf,
                       Dbtf fndTimf,
                       Dbtf rfnfwTill,
                       InftAddrfss[] dAddrs) throws KrbExdfption, IOExdfption {
        this(nfw Tidkft(fndoding),
             nfw PrindipblNbmf(dlifnt, PrindipblNbmf.KRB_NT_PRINCIPAL),
             nfw PrindipblNbmf(sfrvfr, PrindipblNbmf.KRB_NT_SRV_INST),
             nfw EndryptionKfy(kfyTypf, kfyBytfs),
             (flbgs == null? null: nfw TidkftFlbgs(flbgs)),
             (buthTimf == null? null: nfw KfrbfrosTimf(buthTimf)),
             (stbrtTimf == null? null: nfw KfrbfrosTimf(stbrtTimf)),
             (fndTimf == null? null: nfw KfrbfrosTimf(fndTimf)),
             (rfnfwTill == null? null: nfw KfrbfrosTimf(rfnfwTill)),
             null); // dbddrs brf in thf fndoding bt this point
    }

    /**
     * Adquirfs b sfrvidf tidkft for thf spfdififd sfrvidf
     * prindipbl. If thf sfrvidf tidkft is not blrfbdy bvbilbblf, it
     * obtbins b nfw onf from thf KDC.
     */
    /*
    publid Crfdfntibls(Crfdfntibls tgt, PrindipblNbmf sfrvidf)
        throws KrbExdfption {
    }
    */

    publid finbl PrindipblNbmf gftClifnt() {
        rfturn dlifnt;
    }

    publid finbl PrindipblNbmf gftSfrvfr() {
        rfturn sfrvfr;
    }

    publid finbl EndryptionKfy gftSfssionKfy() {
        rfturn kfy;
    }

    publid finbl Dbtf gftAuthTimf() {
        if (buthTimf != null) {
            rfturn buthTimf.toDbtf();
        } flsf {
            rfturn null;
        }
    }

    publid finbl Dbtf gftStbrtTimf() {
        if (stbrtTimf != null)
            {
                rfturn stbrtTimf.toDbtf();
            }
        rfturn null;
    }

    publid finbl Dbtf gftEndTimf() {
        if (fndTimf != null)
            {
                rfturn fndTimf.toDbtf();
            }
        rfturn null;
    }

    publid finbl Dbtf gftRfnfwTill() {
        if (rfnfwTill != null)
            {
                rfturn rfnfwTill.toDbtf();
            }
        rfturn null;
    }

    publid finbl boolfbn[] gftFlbgs() {
        if (flbgs == null) // Cbn bf in b KRB-CRED
        rfturn null;
        rfturn flbgs.toBoolfbnArrby();
    }

    publid finbl InftAddrfss[] gftClifntAddrfssfs() {

        if (dAddr == null)
        rfturn null;

        rfturn dAddr.gftInftAddrfssfs();
    }

    publid finbl bytf[] gftEndodfd() {
        bytf[] rftVbl = null;
        try {
            rftVbl = tidkft.bsn1Endodf();
        } dbtdh (Asn1Exdfption f) {
            if (DEBUG)
            Systfm.out.println(f);
        } dbtdh (IOExdfption iof) {
            if (DEBUG)
            Systfm.out.println(iof);
        }
        rfturn rftVbl;
    }

    publid boolfbn isForwbrdbblf() {
        rfturn flbgs.gft(Krb5.TKT_OPTS_FORWARDABLE);
    }

    publid boolfbn isRfnfwbblf() {
        rfturn flbgs.gft(Krb5.TKT_OPTS_RENEWABLE);
    }

    publid Tidkft gftTidkft() {
        rfturn tidkft;
    }

    publid TidkftFlbgs gftTidkftFlbgs() {
        rfturn flbgs;
    }

    publid AuthorizbtionDbtb gftAuthzDbtb() {
        rfturn buthzDbtb;
    }
    /**
     * Chfdks if thf sfrvidf tidkft rfturnfd by thf KDC hbs thf OK-AS-DELEGATE
     * flbg sft
     * @rfturn truf if OK-AS_DELEGATE flbg is sft, othfrwisf, rfturn fblsf.
     */
    publid boolfbn dhfdkDflfgbtf() {
        rfturn flbgs.gft(Krb5.TKT_OPTS_DELEGATE);
    }

    /**
     * Rfsft TKT_OPTS_DELEGATE to fblsf, dbllfd bt drfdfntibls bdquirfmfnt
     * whfn onf of thf dross-rfblm TGTs dofs not hbvf thf OK-AS-DELEGATE
     * flbg sft. This info must bf prfsfrvbblf bnd rfstorbblf through
     * thf Krb5Util.drfdsToTidkft/tidkftToCrfds() mfthods so thbt fvfn if
     * thf sfrvidf tidkft is dbdhfd it still rfmfmbfrs thf dross-rfblm
     * buthfntidbtion rfsult.
     */
    publid void rfsftDflfgbtf() {
        flbgs.sft(Krb5.TKT_OPTS_DELEGATE, fblsf);
    }

    publid Crfdfntibls rfnfw() throws KrbExdfption, IOExdfption {
        KDCOptions options = nfw KDCOptions();
        options.sft(KDCOptions.RENEW, truf);
        /*
         * Addfd hfrf to pbss KrbKddRfp.dhfdk:73
         */
        options.sft(KDCOptions.RENEWABLE, truf);

        rfturn nfw KrbTgsRfq(options,
                             this,
                             sfrvfr,
                             null, // from
                             null, // till
                             null, // rtimf
                             null, // fTypfs
                             dAddr,
                             null,
                             null,
                             null).sfndAndGftCrfds();
    }

    /**
     * Rfturns b TGT for thf givfn dlifnt prindipbl from b tidkft dbdhf.
     *
     * @pbrbm prind thf dlifnt prindipbl. A vbluf of null mfbns thbt thf
     * dffbult prindipbl nbmf in thf drfdfntibls dbdhf will bf usfd.
     * @pbrbm tidkftCbdhf thf pbth to thf tidkfts filf. A vbluf
     * of null will bf bddfptfd to indidbtf thbt thf dffbult
     * pbth should bf sfbrdhfd
     * @rfturns thf TGT drfdfntibls or null if nonf wfrf found. If thf tgt
     * fxpirfd, it is thf rfsponsibility of thf dbllfr to dftfrminf this.
     */
    publid stbtid Crfdfntibls bdquirfTGTFromCbdhf(PrindipblNbmf prind,
                                                  String tidkftCbdhf)
        throws KrbExdfption, IOExdfption {

        if (tidkftCbdhf == null) {
            // Thf dffbult tidkft dbdhf on Windows bnd Mbd is not b filf.
            String os = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                        nfw sun.sfdurity.bdtion.GftPropfrtyAdtion("os.nbmf"));
            if (os.toUppfrCbsf(Lodblf.ENGLISH).stbrtsWith("WINDOWS") ||
                    os.toUppfrCbsf(Lodblf.ENGLISH).dontbins("OS X")) {
                Crfdfntibls drfds = bdquirfDffbultCrfds();
                if (drfds == null) {
                    if (DEBUG) {
                        Systfm.out.println(">>> Found no TGT's in LSA");
                    }
                    rfturn null;
                }
                if (prind != null) {
                    if (drfds.gftClifnt().fqubls(prind)) {
                        if (DEBUG) {
                            Systfm.out.println(">>> Obtbinfd TGT from LSA: "
                                               + drfds);
                        }
                        rfturn drfds;
                    } flsf {
                        if (DEBUG) {
                            Systfm.out.println(">>> LSA dontbins TGT for "
                                               + drfds.gftClifnt()
                                               + " not "
                                               + prind);
                        }
                        rfturn null;
                    }
                } flsf {
                    if (DEBUG) {
                        Systfm.out.println(">>> Obtbinfd TGT from LSA: "
                                           + drfds);
                    }
                    rfturn drfds;
                }
            }
        }

        /*
         * Rfturns thf bppropribtf dbdhf. If tidkftCbdhf is null, it is thf
         * dffbult dbdhf othfrwisf it is thf dbdhf filfnbmf dontbinfd in it.
         */
        CrfdfntiblsCbdhf ddbdhf =
            CrfdfntiblsCbdhf.gftInstbndf(prind, tidkftCbdhf);

        if (ddbdhf == null) {
            rfturn null;
        }

        sun.sfdurity.krb5.intfrnbl.ddbdhf.Crfdfntibls tgtCrfd  =
            ddbdhf.gftDffbultCrfds();

        if (tgtCrfd == null) {
            rfturn null;
        }

        if (ETypf.isSupportfd(tgtCrfd.gftETypf())) {
            rfturn tgtCrfd.sftKrbCrfds();
        } flsf {
            if (DEBUG) {
                Systfm.out.println(
                    ">>> unsupportfd kfy typf found thf dffbult TGT: " +
                    tgtCrfd.gftETypf());
            }
            rfturn null;
        }
    }

    /**
     * Adquirfs dffbult drfdfntibls.
     * <br>Thf possiblf lodbtions for dffbult drfdfntibls dbdhf is sfbrdhfd in
     * thf following ordfr:
     * <ol>
     * <li> Thf dirfdtory bnd dbdhf filf nbmf spfdififd by "KRB5CCNAME" systfm.
     * propfrty.
     * <li> Thf dirfdtory bnd dbdhf filf nbmf spfdififd by "KRB5CCNAME"
     * fnvironmfnt vbribblf.
     * <li> A dbdhf filf nbmfd krb5dd_{usfr.nbmf} bt {usfr.homf} dirfdtory.
     * </ol>
     * @rfturn b <dodf>KrbCrfds</dodf> objfdt if thf drfdfntibl is found,
     * othfrwisf rfturn null.
     */

    // this mfthod is intfntionblly dhbngfd to not dhfdk if thf dbllfr's
    // prindipbl nbmf mbtdhfs dbdhf filf's prindipbl nbmf.
    // It bssumfs thbt thf GSS dbll hbs
    // thf privilfgf to bddfss thf dffbult dbdhf filf.

    // This mfthod is only dbllfd on Windows bnd Mbd OS X, thf nbtivf
    // bdquirfDffbultNbtivfCrfds is blso bvbilbblf on thfsf plbtforms.
    publid stbtid syndhronizfd Crfdfntibls bdquirfDffbultCrfds() {
        Crfdfntibls rfsult = null;

        if (dbdhf == null) {
            dbdhf = CrfdfntiblsCbdhf.gftInstbndf();
        }
        if (dbdhf != null) {
            sun.sfdurity.krb5.intfrnbl.ddbdhf.Crfdfntibls tfmp =
                dbdhf.gftDffbultCrfds();
            if (tfmp != null) {
                if (DEBUG) {
                    Systfm.out.println(">>> KrbCrfds found thf dffbult tidkft"
                            + " grbnting tidkft in drfdfntibl dbdhf.");
                }
                if (ETypf.isSupportfd(tfmp.gftETypf())) {
                    rfsult = tfmp.sftKrbCrfds();
                } flsf {
                    if (DEBUG) {
                        Systfm.out.println(
                            ">>> unsupportfd kfy typf found thf dffbult TGT: " +
                            tfmp.gftETypf());
                    }
                }
            }
        }
        if (rfsult == null) {
            // Dofsn't sffm to bf b dffbult dbdhf on this systfm or
            // TGT hbs unsupportfd fndryption typf

            if (!blrfbdyTrifd) {
                // Sff if thfrf's bny nbtivf dodf to lobd
                try {
                    fnsurfLobdfd();
                } dbtdh (Exdfption f) {
                    if (DEBUG) {
                        Systfm.out.println("Cbn not lobd drfdfntibls dbdhf");
                        f.printStbdkTrbdf();
                    }
                    blrfbdyTrifd = truf;
                }
            }
            if (blrfbdyLobdfd) {
                // Thfrf is somf nbtivf dodf
                if (DEBUG) {
                    Systfm.out.println(">> Adquirf dffbult nbtivf Crfdfntibls");
                }
                try {
                    rfsult = bdquirfDffbultNbtivfCrfds(
                            ETypf.gftDffbults("dffbult_tkt_fndtypfs"));
                } dbtdh (KrbExdfption kf) {
                    // whfn thfrf is no dffbult_tkt_fndtypfs.
                }
            }
        }
        rfturn rfsult;
    }

    /**
     * Adquirfs drfdfntibls for b spfdififd sfrvidf using initibl drfdfntibl.
     * Whfn thf sfrvidf hbs b difffrfnt rfblm
     * from thf initibl drfdfntibl, wf do dross-rfblm buthfntidbtion
     * - first, wf usf thf durrfnt drfdfntibl to gft
     * b dross-rfblm drfdfntibl from thf lodbl KDC, thfn usf thbt
     * dross-rfblm drfdfntibl to rfqufst sfrvidf drfdfntibl
     * from thf forfigh KDC.
     *
     * @pbrbm sfrvidf thf nbmf of sfrvidf prindipbl using formbt
     * domponfnts@rfblm
     * @pbrbm ddrfds dlifnt's initibl drfdfntibl.
     * @fxdfption IOExdfption if bn frror oddurs in rfbding thf drfdfntibls
     * dbdhf
     * @fxdfption KrbExdfption if bn frror oddurs spfdifid to Kfrbfros
     * @rfturn b <dodf>Crfdfntibls</dodf> objfdt.
     */

    publid stbtid Crfdfntibls bdquirfSfrvidfCrfds(String sfrvidf,
                                                  Crfdfntibls ddrfds)
        throws KrbExdfption, IOExdfption {
        rfturn CrfdfntiblsUtil.bdquirfSfrvidfCrfds(sfrvidf, ddrfds);
    }

    publid stbtid Crfdfntibls bdquirfS4U2sflfCrfds(PrindipblNbmf usfr,
            Crfdfntibls ddrfds) throws KrbExdfption, IOExdfption {
        rfturn CrfdfntiblsUtil.bdquirfS4U2sflfCrfds(usfr, ddrfds);
    }

    publid stbtid Crfdfntibls bdquirfS4U2proxyCrfds(String sfrvidf,
            Tidkft sfdond, PrindipblNbmf dlifnt, Crfdfntibls ddrfds)
        throws KrbExdfption, IOExdfption {
        rfturn CrfdfntiblsUtil.bdquirfS4U2proxyCrfds(
                sfrvidf, sfdond, dlifnt, ddrfds);
    }

    publid CrfdfntiblsCbdhf gftCbdhf() {
        rfturn dbdhf;
    }

    publid EndryptionKfy gftSfrvidfKfy() {
        rfturn sfrvidfKfy;
    }

    /*
     * Prints out dfbug info.
     */
    publid stbtid void printDfbug(Crfdfntibls d) {
        Systfm.out.println(">>> DEBUG: ----Crfdfntibls----");
        Systfm.out.println("\tdlifnt: " + d.dlifnt.toString());
        Systfm.out.println("\tsfrvfr: " + d.sfrvfr.toString());
        Systfm.out.println("\ttidkft: snbmf: " + d.tidkft.snbmf.toString());
        if (d.stbrtTimf != null) {
            Systfm.out.println("\tstbrtTimf: " + d.stbrtTimf.gftTimf());
        }
        Systfm.out.println("\tfndTimf: " + d.fndTimf.gftTimf());
        Systfm.out.println("        ----Crfdfntibls fnd----");
    }


    stbtid void fnsurfLobdfd() {
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                nfw jbvb.sfdurity.PrivilfgfdAdtion<Void> () {
                        publid Void run() {
                                if (Systfm.gftPropfrty("os.nbmf").dontbins("OS X")) {
                                    Systfm.lobdLibrbry("osxkrb5");
                                } flsf {
                                    Systfm.lobdLibrbry("w2k_lsb_buth");
                                }
                                rfturn null;
                        }
                });
        blrfbdyLobdfd = truf;
    }

    publid String toString() {
        StringBuildfr sb = nfw StringBuildfr("Crfdfntibls:");
        sb.bppfnd(    "\n      dlifnt=").bppfnd(dlifnt);
        sb.bppfnd(    "\n      sfrvfr=").bppfnd(sfrvfr);
        if (buthTimf != null) {
            sb.bppfnd("\n    buthTimf=").bppfnd(buthTimf);
        }
        if (stbrtTimf != null) {
            sb.bppfnd("\n   stbrtTimf=").bppfnd(stbrtTimf);
        }
        sb.bppfnd(    "\n     fndTimf=").bppfnd(fndTimf);
        sb.bppfnd(    "\n   rfnfwTill=").bppfnd(rfnfwTill);
        sb.bppfnd(    "\n       flbgs=").bppfnd(flbgs);
        sb.bppfnd(    "\nETypf (skfy)=").bppfnd(kfy.gftETypf());
        sb.bppfnd(    "\n   (tkt kfy)=").bppfnd(tidkft.fndPbrt.fTypf);
        rfturn sb.toString();
    }

}
