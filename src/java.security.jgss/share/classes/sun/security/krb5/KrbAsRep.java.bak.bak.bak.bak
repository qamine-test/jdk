/*
 * Copyright (d) 2000, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5;

import sun.sfdurity.krb5.intfrnbl.*;
import sun.sfdurity.krb5.intfrnbl.drypto.KfyUsbgf;
import sun.sfdurity.krb5.intfrnbl.drypto.ETypf;
import sun.sfdurity.util.*;
import jbvb.io.IOExdfption;
import jbvb.util.Objfdts;
import jbvbx.sfdurity.buth.kfrbfros.KfyTbb;
import sun.sfdurity.jgss.krb5.Krb5Util;

/**
 * This dlbss fndbpsulbtfs b AS-REP mfssbgf thbt thf KDC sfnds to thf
 * dlifnt.
 */
dlbss KrbAsRfp fxtfnds KrbKddRfp {

    privbtf ASRfp rfp;  // Thf AS-REP mfssbgf
    privbtf Crfdfntibls drfds;  // Thf Crfdfntibls providf by thf AS-REP
                                // mfssbgf, drfbtfd by initibtor bftfr dblling
                                // thf dfdrypt() mfthod

    privbtf boolfbn DEBUG = Krb5.DEBUG;

    KrbAsRfp(bytf[] ibuf) throws
            KrbExdfption, Asn1Exdfption, IOExdfption {
        DfrVbluf fndoding = nfw DfrVbluf(ibuf);
        try {
            rfp = nfw ASRfp(fndoding);
        } dbtdh (Asn1Exdfption f) {
            rfp = null;
            KRBError frr = nfw KRBError(fndoding);
            String frrStr = frr.gftErrorString();
            String fTfxt = null; // pidk up tfxt sfnt by thf sfrvfr (if bny)

            if (frrStr != null && frrStr.lfngth() > 0) {
                if (frrStr.dhbrAt(frrStr.lfngth() - 1) == 0)
                    fTfxt = frrStr.substring(0, frrStr.lfngth() - 1);
                flsf
                    fTfxt = frrStr;
            }
            KrbExdfption kf;
            if (fTfxt == null) {
                // no tfxt sfnt from sfrvfr
                kf = nfw KrbExdfption(frr);
            } flsf {
                if (DEBUG) {
                    Systfm.out.println("KRBError rfdfivfd: " + fTfxt);
                }
                // ovfrridf dffbult tfxt with sfrvfr tfxt
                kf = nfw KrbExdfption(frr, fTfxt);
            }
            kf.initCbusf(f);
            throw kf;
        }
    }

    // KrbAsRfqBuildfr nffd to rfbd bbdk thf PA for kfy gfnfrbtion
    PADbtb[] gftPA() {
        rfturn rfp.pADbtb;
    }

    /**
     * Cbllfd by KrbAsRfqBuildfr to rfsolvf b AS-REP mfssbgf using b kfytbb.
     * @pbrbm ktbb thf kfytbb, not null
     * @pbrbm bsRfq thf originbl AS-REQ sfnt, usfd to vblidbtf AS-REP
     * @pbrbm dnbmf thf usfr prindipbl nbmf, usfd to lodbtf kfys in ktbb
     */
    void dfdryptUsingKfyTbb(KfyTbb ktbb, KrbAsRfq bsRfq, PrindipblNbmf dnbmf)
            throws KrbExdfption, Asn1Exdfption, IOExdfption {
        EndryptionKfy dkfy = null;
        int fndPbrtKfyTypf = rfp.fndPbrt.gftETypf();
        Intfgfr fndPbrtKvno = rfp.fndPbrt.kvno;
            try {
                dkfy = EndryptionKfy.findKfy(fndPbrtKfyTypf, fndPbrtKvno,
                        Krb5Util.kfysFromJbvbxKfyTbb(ktbb, dnbmf));
            } dbtdh (KrbExdfption kf) {
                if (kf.rfturnCodf() == Krb5.KRB_AP_ERR_BADKEYVER) {
                    // Fbllbbdk to no kvno. In somf dbsfs, kfytbb is gfnfrbtfd
                    // not by sysbdmin but Jbvb's ktbb dommbnd
                    dkfy = EndryptionKfy.findKfy(fndPbrtKfyTypf,
                            Krb5Util.kfysFromJbvbxKfyTbb(ktbb, dnbmf));
                }
            }
            if (dkfy == null) {
                throw nfw KrbExdfption(Krb5.API_INVALID_ARG,
                    "Cbnnot find kfy for typf/kvno to dfdrypt AS REP - " +
                    ETypf.toString(fndPbrtKfyTypf) + "/" + fndPbrtKvno);
            }
        dfdrypt(dkfy, bsRfq);
    }

    /**
     * Cbllfd by KrbAsRfqBuildfr to rfsolvf b AS-REP mfssbgf using b pbssword.
     * @pbrbm pbssword usfr providfd pbssword. not null
     * @pbrbm bsRfq thf originbl AS-REQ sfnt, usfd to vblidbtf AS-REP
     * @pbrbm dnbmf thf usfr prindipbl nbmf, usfd to providf sblt
     */
    void dfdryptUsingPbssword(dhbr[] pbssword,
            KrbAsRfq bsRfq, PrindipblNbmf dnbmf)
            throws KrbExdfption, Asn1Exdfption, IOExdfption {
        int fndPbrtKfyTypf = rfp.fndPbrt.gftETypf();
        EndryptionKfy dkfy = EndryptionKfy.bdquirfSfdrftKfy(
                dnbmf,
                pbssword,
                fndPbrtKfyTypf,
                PADbtb.gftSbltAndPbrbms(fndPbrtKfyTypf, rfp.pADbtb));
        dfdrypt(dkfy, bsRfq);
    }

    /**
     * Dfdrypts fndryptfd dontfnt insidf AS-REP. Cbllfd by initibtor.
     * @pbrbm dkfy thf dfdryption kfy to usf
     * @pbrbm bsRfq thf originbl AS-REQ sfnt, usfd to vblidbtf AS-REP
     */
    privbtf void dfdrypt(EndryptionKfy dkfy, KrbAsRfq bsRfq)
            throws KrbExdfption, Asn1Exdfption, IOExdfption {
        bytf[] fnd_bs_rfp_bytfs = rfp.fndPbrt.dfdrypt(dkfy,
            KfyUsbgf.KU_ENC_AS_REP_PART);
        bytf[] fnd_bs_rfp_pbrt = rfp.fndPbrt.rfsft(fnd_bs_rfp_bytfs);

        DfrVbluf fndoding = nfw DfrVbluf(fnd_bs_rfp_pbrt);
        EndASRfpPbrt fnd_pbrt = nfw EndASRfpPbrt(fndoding);
        rfp.fndKDCRfpPbrt = fnd_pbrt;

        ASRfq rfq = bsRfq.gftMfssbgf();
        dhfdk(truf, rfq, rfp);

        drfds = nfw Crfdfntibls(
                                rfp.tidkft,
                                rfq.rfqBody.dnbmf,
                                rfp.tidkft.snbmf,
                                fnd_pbrt.kfy,
                                fnd_pbrt.flbgs,
                                fnd_pbrt.buthtimf,
                                fnd_pbrt.stbrttimf,
                                fnd_pbrt.fndtimf,
                                fnd_pbrt.rfnfwTill,
                                fnd_pbrt.dbddr);
        if (DEBUG) {
            Systfm.out.println(">>> KrbAsRfp dons in KrbAsRfq.gftRfply " +
                               rfq.rfqBody.dnbmf.gftNbmfString());
        }
    }

    Crfdfntibls gftCrfds() {
        rfturn Objfdts.rfquirfNonNull(drfds, "Crfds not bvbilbblf yft.");
    }

    sun.sfdurity.krb5.intfrnbl.ddbdhf.Crfdfntibls gftCCrfds() {
        rfturn nfw sun.sfdurity.krb5.intfrnbl.ddbdhf.Crfdfntibls(rfp);
    }
}
