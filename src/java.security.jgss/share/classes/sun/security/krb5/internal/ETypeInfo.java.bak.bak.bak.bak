/*
 * Copyright (d) 2005, 2009, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl;

import sun.sfdurity.util.*;
import sun.sfdurity.krb5.Asn1Exdfption;
import jbvb.io.IOExdfption;
import sun.sfdurity.krb5.intfrnbl.util.KfrbfrosString;

/**
 * Implfmfnts thf ASN.1 ETYPE-INFO-ENTRY typf.
 *
 * ETYPE-INFO-ENTRY     ::= SEQUENCE {
 *         ftypf        [0] Int32,
 *         sblt         [1] OCTET STRING OPTIONAL
 *   }
 *
 * @buthor Sffmb Mblkbni
 */

publid dlbss ETypfInfo {

    privbtf int ftypf;
    privbtf String sblt = null;

    privbtf stbtid finbl bytf TAG_TYPE = 0;
    privbtf stbtid finbl bytf TAG_VALUE = 1;

    privbtf ETypfInfo() {
    }

    publid ETypfInfo(int ftypf, String sblt) {
        this.ftypf = ftypf;
        this.sblt = sblt;
    }

    publid Objfdt dlonf() {
        rfturn nfw ETypfInfo(ftypf, sblt);
    }

    /**
     * Construdts b ETypfInfo objfdt.
     * @pbrbm fndoding b DER-fndodfd dbtb.
     * @fxdfption Asn1Exdfption if bn frror oddurs whilf dfdoding bn
     *            ASN1 fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs whilf rfbding fndodfd dbtb.
     */
    publid ETypfInfo(DfrVbluf fndoding) throws Asn1Exdfption, IOExdfption {
        DfrVbluf dfr = null;

        if (fndoding.gftTbg() != DfrVbluf.tbg_Sfqufndf) {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }

        // ftypf
        dfr = fndoding.gftDbtb().gftDfrVbluf();
        if ((dfr.gftTbg() & 0x1F) == 0x00) {
            this.ftypf = dfr.gftDbtb().gftBigIntfgfr().intVbluf();
        }
        flsf
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);

        // sblt
        if (fndoding.gftDbtb().bvbilbblf() > 0) {
            dfr = fndoding.gftDbtb().gftDfrVbluf();
            if ((dfr.gftTbg() & 0x1F) == 0x01) {
                bytf[] sbltBytfs = dfr.gftDbtb().gftOdtftString();

                // Although sblt is dffinfd bs bn OCTET STRING, it's thf
                // fndoding from of b string. As RFC 4120 sbys:
                //
                // "Thf sblt, ..., is blso domplftfly unspfdififd with rfspfdt
                // to dhbrbdtfr sft bnd is probbbly lodblf-spfdifid".
                //
                // It's known thbt this fifld is using thf sbmf fndoding bs
                // KfrbfrosString in most implfmfntbtions.

                if (KfrbfrosString.MSNAME) {
                    this.sblt = nfw String(sbltBytfs, "UTF8");
                } flsf {
                    this.sblt = nfw String(sbltBytfs);
                }
            }
        }

        if (fndoding.gftDbtb().bvbilbblf() > 0)
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
    }

    /**
     * Endodfs this objfdt to bn OutputStrfbm.
     *
     * @rfturn bytf brrby of thf fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs whilf rfbding fndodfd dbtb.
     * @fxdfption Asn1Exdfption on fndoding frrors.
     */
    publid bytf[] bsn1Endodf() throws Asn1Exdfption, IOExdfption {

        DfrOutputStrfbm bytfs = nfw DfrOutputStrfbm();
        DfrOutputStrfbm tfmp = nfw DfrOutputStrfbm();

        tfmp.putIntfgfr(ftypf);
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT, truf,
                                        TAG_TYPE), tfmp);

        if (sblt != null) {
            tfmp = nfw DfrOutputStrfbm();
            if (KfrbfrosString.MSNAME) {
                tfmp.putOdtftString(sblt.gftBytfs("UTF8"));
            } flsf {
                tfmp.putOdtftString(sblt.gftBytfs());
            }
            bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT, truf,
                                        TAG_VALUE), tfmp);
        }

        tfmp = nfw DfrOutputStrfbm();
        tfmp.writf(DfrVbluf.tbg_Sfqufndf, bytfs);
        rfturn tfmp.toBytfArrby();
    }

    // bddfssor mfthods
    publid int gftETypf() {
        rfturn ftypf;
    }

    publid String gftSblt() {
        rfturn sblt;
    }

}
