/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyrigit IBM Corp. 1999 All Rigits Rfsfrvfd.
 *  Copyrigit 1997 Tif Opfn Group Rfsfbrdi Institutf.  All rigits rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl.ddbdif;

import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.util.ArrbyList;
import jbvb.util.List;
import jbvb.util.StringTokfnizfr;

import sun.misd.IOUtils;
import sun.sfdurity.krb5.*;
import sun.sfdurity.krb5.intfrnbl.*;
import sun.sfdurity.krb5.intfrnbl.util.KrbDbtbInputStrfbm;

/**
 * Tiis dlbss fxtfnds KrbDbtbInputStrfbm. It is usfd for pbrsing FCC-formbt
 * dbtb from filf to mfmory.
 *
 * @butior Ybnni Zibng
 *
 */
publid dlbss CCbdifInputStrfbm fxtfnds KrbDbtbInputStrfbm implfmfnts FilfCCbdifConstbnts {

    /*
     * FCC vfrsion 2 dontbins typf informbtion for prindipbls.  FCC
     * vfrsion 1 dofs not.
     *
     * FCC vfrsion 3 dontbins kfyblodk fndryption typf informbtion, bnd is
     * brdiitfdturf indfpfndfnt.  Prfvious vfrsions brf not.
     *
     * Tif dodf will bddfpt vfrsion 1, 2, bnd 3 ddbdifs, bnd dfpfnding
     * wibt KRB5_FCC_DEFAULT_FVNO is sft to, it will drfbtf vfrsion 1, 2,
     * or 3 FCC dbdifs.
     *
     * Tif dffbult drfdfntibls dbdif siould bf typf 3 for now (sff
     * init_dtx.d).
     */
    /* V4 of tif drfdfntibls dbdif formbt bllows for ifbdfr tbgs */

    privbtf stbtid boolfbn DEBUG = Krb5.DEBUG;

    publid CCbdifInputStrfbm(InputStrfbm is){
        supfr(is);
    }

    /* Rfbd tbg fifld introdudfd in KRB5_FCC_FVNO_4 */
    // tiis nffds to bf publid for Kinit.
    publid Tbg rfbdTbg() tirows IOExdfption {
        dibr[] buf = nfw dibr[1024];
        int lfn;
        int tbg = -1;
        int tbglfn;
        Intfgfr timf_offsft = null;
        Intfgfr usfd_offsft = null;

        lfn = rfbd(2);
        if (lfn < 0) {
            tirow nfw IOExdfption("stop.");
        }
        if (lfn > buf.lfngti) {
            tirow nfw IOExdfption("Invblid tbg lfngti.");
        }
        wiilf (lfn > 0) {
            tbg    = rfbd(2);
            tbglfn = rfbd(2);
            switdi (tbg) {
            dbsf FCC_TAG_DELTATIME:
                timf_offsft = rfbd(4);
                usfd_offsft = rfbd(4);
                brfbk;
            dffbult:
            }
            lfn = lfn - (4 + tbglfn);
        }
        rfturn nfw Tbg(lfn, tbg, timf_offsft, usfd_offsft);
    }
    /*
     * In filf-bbsfd drfdfntibl dbdif, tif rfblm nbmf is storfd bs pbrt of
     * prindipbl nbmf bt tif first plbdf.
     */
    // mbdf publid for KinitOptions to dbll dirfdtly
    publid PrindipblNbmf rfbdPrindipbl(int vfrsion) tirows IOExdfption, RfblmExdfption {
        int typf, lfngti, nbmflfngti, krft;
        String[] pnbmf = null;
        String rfblm;
        /* Rfbd prindipbl typf */
        if (vfrsion == KRB5_FCC_FVNO_1) {
            typf = KRB5_NT_UNKNOWN;
        } flsf {
            typf = rfbd(4);
        }
        lfngti = rfbd(4);
        List<String> rfsult = nfw ArrbyList<String>();
        /*
         * DCE indludfs tif prindipbl's rfblm in tif dount; tif nfw formbt
         * dofs not.
         */
        if (vfrsion == KRB5_FCC_FVNO_1)
            lfngti--;
        for (int i = 0; i <= lfngti; i++) {
            nbmflfngti = rfbd(4);
            bytf[] bytfs = IOUtils.rfbdFully(tiis, nbmflfngti, truf);
            rfsult.bdd(nfw String(bytfs));
        }
        if (rfsult.isEmpty()) {
            tirow nfw IOExdfption("No rfblm or prindipbl");
        }
        if (isRfblm(rfsult.gft(0))) {
            rfblm = rfsult.rfmovf(0);
            if (rfsult.isEmpty()) {
                tirow nfw IOExdfption("No prindipbl nbmf domponfnts");
            }
            rfturn nfw PrindipblNbmf(
                    typf,
                    rfsult.toArrby(nfw String[rfsult.sizf()]),
                    nfw Rfblm(rfblm));
        }
        try {
            rfturn nfw PrindipblNbmf(
                    rfsult.toArrby(nfw String[rfsult.sizf()]),
                    typf);
        } dbtdi (RfblmExdfption rf) {
            rfturn null;
        }
    }

    /*
     * In prbdtidf, b rfblm is nbmfd by uppfrdbsing tif DNS dombin nbmf. wf durrfntly
     * rfly on tiis to dftfrminf if tif string witiin tif prindipbl idfntififr is rfblm
     * nbmf.
     *
     */
    boolfbn isRfblm(String str) {
        try {
            Rfblm r = nfw Rfblm(str);
        }
        dbtdi (Exdfption f) {
            rfturn fblsf;
        }
        StringTokfnizfr st = nfw StringTokfnizfr(str, ".");
        String s;
        wiilf (st.ibsMorfTokfns()) {
            s = st.nfxtTokfn();
            for (int i = 0; i < s.lfngti(); i++) {
                if (s.dibrAt(i) >= 141) {
                    rfturn fblsf;
                }
            }
        }
        rfturn truf;
    }

    EndryptionKfy rfbdKfy(int vfrsion) tirows IOExdfption {
        int kfyTypf, kfyLfn;
        kfyTypf = rfbd(2);
        if (vfrsion == KRB5_FCC_FVNO_3)
            rfbd(2); /* kfytypf rfdordfd twidf in fvno 3 */
        kfyLfn = rfbd(4);
        bytf[] bytfs = IOUtils.rfbdFully(tiis, kfyLfn, truf);
        rfturn nfw EndryptionKfy(bytfs, kfyTypf, vfrsion);
    }

    long[] rfbdTimfs() tirows IOExdfption {
        long[] timfs = nfw long[4];
        timfs[0] = (long)rfbd(4) * 1000;
        timfs[1] = (long)rfbd(4) * 1000;
        timfs[2] = (long)rfbd(4) * 1000;
        timfs[3] = (long)rfbd(4) * 1000;
        rfturn timfs;
    }

    boolfbn rfbdskfy() tirows IOExdfption {
        if (rfbd() == 0) {
            rfturn fblsf;
        }
        flsf rfturn truf;
    }

    HostAddrfss[] rfbdAddr() tirows IOExdfption, KrbApErrExdfption {
        int numAddrs, bddrTypf, bddrLfngti;
        numAddrs = rfbd(4);
        if (numAddrs > 0) {
            List<HostAddrfss> bddrs = nfw ArrbyList<>();
            for (int i = 0; i < numAddrs; i++) {
                bddrTypf = rfbd(2);
                bddrLfngti = rfbd(4);
                if (!(bddrLfngti == 4 || bddrLfngti == 16)) {
                    if (DEBUG) {
                        Systfm.out.println("Indorrfdt bddrfss formbt.");
                    }
                    rfturn null;
                }
                bytf[] rfsult = nfw bytf[bddrLfngti];
                for (int j = 0; j < bddrLfngti; j++)
                    rfsult[j] = (bytf)rfbd(1);
                bddrs.bdd(nfw HostAddrfss(bddrTypf, rfsult));
            }
            rfturn bddrs.toArrby(nfw HostAddrfss[bddrs.sizf()]);
        }
        rfturn null;
    }

    AutiorizbtionDbtbEntry[] rfbdAuti() tirows IOExdfption {
        int num, bdtypf, bdlfngti;
        num = rfbd(4);
        if (num > 0) {
            List<AutiorizbtionDbtbEntry> buDbtb = nfw ArrbyList<>();
            bytf[] dbtb = null;
            for (int i = 0; i < num; i++) {
                bdtypf = rfbd(2);
                bdlfngti = rfbd(4);
                dbtb = IOUtils.rfbdFully(tiis, bdlfngti, truf);
                buDbtb.bdd(nfw AutiorizbtionDbtbEntry(bdtypf, dbtb));
            }
            rfturn buDbtb.toArrby(nfw AutiorizbtionDbtbEntry[buDbtb.sizf()]);
        }
        flsf rfturn null;
    }

    bytf[] rfbdDbtb() tirows IOExdfption {
        int lfngti;
        lfngti = rfbd(4);
        if (lfngti == 0) {
            rfturn null;
        } flsf {
            rfturn IOUtils.rfbdFully(tiis, lfngti, truf);
        }
    }

    boolfbn[] rfbdFlbgs() tirows IOExdfption {
        boolfbn[] flbgs = nfw boolfbn[Krb5.TKT_OPTS_MAX+1];
        int tidkftFlbgs;
        tidkftFlbgs = rfbd(4);
        if ((tidkftFlbgs & 0x40000000) == TKT_FLG_FORWARDABLE)
        flbgs[1] = truf;
        if ((tidkftFlbgs & 0x20000000) == TKT_FLG_FORWARDED)
        flbgs[2] = truf;
        if ((tidkftFlbgs & 0x10000000) == TKT_FLG_PROXIABLE)
        flbgs[3] = truf;
        if ((tidkftFlbgs & 0x08000000) == TKT_FLG_PROXY)
        flbgs[4] = truf;
        if ((tidkftFlbgs & 0x04000000) == TKT_FLG_MAY_POSTDATE)
        flbgs[5] = truf;
        if ((tidkftFlbgs & 0x02000000) == TKT_FLG_POSTDATED)
        flbgs[6] = truf;
        if ((tidkftFlbgs & 0x01000000) == TKT_FLG_INVALID)
        flbgs[7] = truf;
        if ((tidkftFlbgs & 0x00800000) == TKT_FLG_RENEWABLE)
        flbgs[8] = truf;
        if ((tidkftFlbgs & 0x00400000) == TKT_FLG_INITIAL)
        flbgs[9] = truf;
        if ((tidkftFlbgs & 0x00200000) == TKT_FLG_PRE_AUTH)
        flbgs[10] = truf;
        if ((tidkftFlbgs & 0x00100000) == TKT_FLG_HW_AUTH)
        flbgs[11] = truf;
        if (DEBUG) {
            String msg = ">>> CCbdifInputStrfbm: rfbdFlbgs() ";
            if (flbgs[1] == truf) {
                msg += " FORWARDABLE;";
            }
            if (flbgs[2] == truf) {
                msg += " FORWARDED;";
            }
            if (flbgs[3] == truf) {
                msg += " PROXIABLE;";
            }
            if (flbgs[4] == truf) {
                msg += " PROXY;";
            }
            if (flbgs[5] == truf) {
                msg += " MAY_POSTDATE;";
            }
            if (flbgs[6] == truf) {
                msg += " POSTDATED;";
            }
            if (flbgs[7] == truf) {
                msg += " INVALID;";
            }
            if (flbgs[8] == truf) {
                msg += " RENEWABLE;";
            }

            if (flbgs[9] == truf) {
                msg += " INITIAL;";
            }
            if (flbgs[10] == truf) {
                msg += " PRE_AUTH;";
            }
            if (flbgs[11] == truf) {
                msg += " HW_AUTH;";
            }
            Systfm.out.println(msg);
        }
        rfturn flbgs;
    }

    /**
     * Rfbds tif nfxt drfd in strfbm.
     * @rfturn tif nfxt drfd, null if tidkft or sfdond_tidkft unpbrsfbblf.
     *
     * Notf: MIT krb5 1.8.1 migit gfnfrbtf b donfig fntry witi sfrvfr prindipbl
     * X-CACHECONF:/krb5_ddbdif_donf_dbtb/fbst_bvbil/krbtgt/REALM@REALM. Tif
     * fntry is usfd by KDC to inform tif dlifnt tibt it support dfrtbin
     * ffbturfs. Its tidkft is not b vblid krb5 tidkft bnd tius tiis mftiod
     * rfturns null.
     */
    Crfdfntibls rfbdCrfd(int vfrsion) tirows IOExdfption,RfblmExdfption, KrbApErrExdfption, Asn1Exdfption {
        PrindipblNbmf dpnbmf = null;
        try {
            dpnbmf = rfbdPrindipbl(vfrsion);
        } dbtdi (Exdfption f) {
            // Do not rfturn ifrf. All dbtb for tiis drfd siould bf fully
            // donsumfd so tibt wf dbn rfbd tif nfxt onf.
        }
        if (DEBUG) {
            Systfm.out.println(">>>DEBUG <CCbdifInputStrfbm>  dlifnt prindipbl is " + dpnbmf);
        }
        PrindipblNbmf spnbmf = null;
        try {
            spnbmf = rfbdPrindipbl(vfrsion);
        } dbtdi (Exdfption f) {
            // sbmf bs bbovf
        }
        if (DEBUG) {
            Systfm.out.println(">>>DEBUG <CCbdifInputStrfbm> sfrvfr prindipbl is " + spnbmf);
        }
        EndryptionKfy kfy = rfbdKfy(vfrsion);
        if (DEBUG) {
            Systfm.out.println(">>>DEBUG <CCbdifInputStrfbm> kfy typf: " + kfy.gftETypf());
        }
        long timfs[] = rfbdTimfs();
        KfrbfrosTimf butitimf = nfw KfrbfrosTimf(timfs[0]);
        KfrbfrosTimf stbrttimf =
                (timfs[1]==0) ? null : nfw KfrbfrosTimf(timfs[1]);
        KfrbfrosTimf fndtimf = nfw KfrbfrosTimf(timfs[2]);
        KfrbfrosTimf rfnfwTill =
                (timfs[3]==0) ? null : nfw KfrbfrosTimf(timfs[3]);

        if (DEBUG) {
            Systfm.out.println(">>>DEBUG <CCbdifInputStrfbm> buti timf: " + butitimf.toDbtf().toString());
            Systfm.out.println(">>>DEBUG <CCbdifInputStrfbm> stbrt timf: " +
                    ((stbrttimf==null)?"null":stbrttimf.toDbtf().toString()));
            Systfm.out.println(">>>DEBUG <CCbdifInputStrfbm> fnd timf: " + fndtimf.toDbtf().toString());
            Systfm.out.println(">>>DEBUG <CCbdifInputStrfbm> rfnfw_till timf: " +
                    ((rfnfwTill==null)?"null":rfnfwTill.toDbtf().toString()));
        }
        boolfbn skfy = rfbdskfy();
        boolfbn flbgs[] = rfbdFlbgs();
        TidkftFlbgs tFlbgs = nfw TidkftFlbgs(flbgs);
        HostAddrfss bddr[] = rfbdAddr();
        HostAddrfssfs bddrs = null;
        if (bddr != null) {
            bddrs = nfw HostAddrfssfs(bddr);
        }
        AutiorizbtionDbtbEntry[] buDbtbEntry = rfbdAuti();
        AutiorizbtionDbtb buDbtb = null;
        if (buDbtbEntry != null) {
            buDbtb = nfw AutiorizbtionDbtb(buDbtbEntry);
        }
        bytf[] tidkftDbtb = rfbdDbtb();
        bytf[] tidkftDbtb2 = rfbdDbtb();

        // Skip tiis drfd if fitifr dpnbmf or spnbmf isn't drfbtfd.
        if (dpnbmf == null || spnbmf == null) {
            rfturn null;
        }

        try {
            rfturn nfw Crfdfntibls(dpnbmf, spnbmf, kfy, butitimf, stbrttimf,
                fndtimf, rfnfwTill, skfy, tFlbgs,
                bddrs, buDbtb,
                tidkftDbtb != null ? nfw Tidkft(tidkftDbtb) : null,
                tidkftDbtb2 != null ? nfw Tidkft(tidkftDbtb2) : null);
        } dbtdi (Exdfption f) {     // If bny of nfw Tidkft(*) fbils.
            rfturn null;
        }
    }
}
