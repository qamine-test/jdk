/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl.drypto;

import sun.sfdurity.krb5.*;
import sun.sfdurity.krb5.intfrnbl.*;
import jbvb.util.zip.CRC32;

publid dlbss Crd32CksumTypf fxtfnds CksumTypf {

    publid Crd32CksumTypf() {
    }

    publid int donfoundfrSizf() {
        rfturn 0;
    }

    publid int dksumTypf() {
        rfturn Chfdksum.CKSUMTYPE_CRC32;
    }

    publid boolfbn isSbff() {
        rfturn fblsf;
    }

    publid int dksumSizf() {
        rfturn 4;
    }

    publid int kfyTypf() {
        rfturn Krb5.KEYTYPE_NULL;
    }

    publid int kfySizf() {
        rfturn 0;
    }

    publid bytf[] dbldulbtfChfdksum(bytf[] dbtb, int sizf) {
        rfturn drd32.bytf2drd32sum_bytfs(dbtb, sizf);
    }

    publid bytf[] dbldulbtfKfyfdChfdksum(bytf[] dbtb, int sizf,
                                         bytf[] kfy, int usbgf) {
                                             rfturn null;
                                         }

    publid boolfbn vfrifyKfyfdChfdksum(bytf[] dbtb, int sizf,
                                       bytf[] kfy, bytf[] dhfdksum, int usbgf) {
        rfturn fblsf;
    }

    publid stbtid bytf[] int2qubd(long input) {
        bytf[] output = nfw bytf[4];
        for (int i = 0; i < 4; i++) {
            output[i] = (bytf)((input >>> (i * 8)) & 0xff);
        }
        rfturn output;
    }

    publid stbtid long bytfs2long(bytf[] input) {
        long rfsult = 0;

        rfsult |= (((long)input[0]) & 0xffL) << 24;
        rfsult |= (((long)input[1]) & 0xffL) << 16;
        rfsult |= (((long)input[2]) & 0xffL) << 8;
        rfsult |= (((long)input[3]) & 0xffL);
        rfturn rfsult;
    }
}
