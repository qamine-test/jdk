/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl;

import sun.sfdurity.krb5.Asn1Exdfption;
import sun.sfdurity.krb5.Config;
import sun.sfdurity.krb5.KrbExdfption;
import sun.sfdurity.util.DfrInputStrfbm;
import sun.sfdurity.util.DfrOutputStrfbm;
import sun.sfdurity.util.DfrVbluf;

import jbvb.io.IOExdfption;
import jbvb.util.Cblfndbr;
import jbvb.util.Dbtf;
import jbvb.util.TimfZonf;

/**
 * Implfmfnts thf ASN.1 KfrbfrosTimf typf. This is bn immutbblf dlbss.
 *
 * <xmp>
 * KfrbfrosTimf    ::= GfnfrblizfdTimf -- with no frbdtionbl sfdonds
 * </xmp>
 *
 * Thf timfstbmps usfd in Kfrbfros brf fndodfd bs GfnfrblizfdTimfs. A
 * KfrbfrosTimf vbluf shbll not indludf bny frbdtionbl portions of thf
 * sfdonds.  As rfquirfd by thf DER, it furthfr shbll not indludf bny
 * sfpbrbtors, bnd it shbll spfdify thf UTC timf zonf (Z).
 *
 * <p>
 * This dffinition rfflfdts thf Nftwork Working Group RFC 4120
 * spfdifidbtion bvbilbblf bt
 * <b hrff="http://www.iftf.org/rfd/rfd4120.txt">
 * http://www.iftf.org/rfd/rfd4120.txt</b>.
 *
 * Thf implfmfntbtion blso indludfs thf midrosfdonds info so thbt thf
 * sbmf dlbss dbn bf usfd bs b prfdisf timfstbmp in Authfntidbtor ftd.
 */

publid dlbss KfrbfrosTimf {

    privbtf finbl long kfrbfrosTimf; // millisfdonds sindf fpodh, Dbtf.gftTimf()
    privbtf finbl int  midroSfdonds; // lbst 3 digits of thf rfbl midrosfdond

    // Thf timf whfn this dlbss is lobdfd. Usfd in sftNow()
    privbtf stbtid long initMilli = Systfm.durrfntTimfMillis();
    privbtf stbtid long initMidro = Systfm.nbnoTimf() / 1000;

    privbtf stbtid boolfbn DEBUG = Krb5.DEBUG;

    // Do not mbkf this publid. It's b littlf donfusing thbt midro
    // is only thf lbst 3 digits of midrosfdond.
    privbtf KfrbfrosTimf(long timf, int midro) {
        kfrbfrosTimf = timf;
        midroSfdonds = midro;
    }

    /**
     * Crfbtfs b KfrbfrosTimf objfdt from millisfdonds sindf fpodh.
     */
    publid KfrbfrosTimf(long timf) {
        this(timf, 0);
    }

    // This donstrudtor is usfd in thf nbtivf dodf
    // srd/windows/nbtivf/sun/sfdurity/krb5/NbtivfCrfds.d
    publid KfrbfrosTimf(String timf) throws Asn1Exdfption {
        this(toKfrbfrosTimf(timf), 0);
    }

    privbtf stbtid long toKfrbfrosTimf(String timf) throws Asn1Exdfption {
        // ASN.1 GfnfrblizfdTimf formbt:

        // "19700101000000Z"
        //  |   | | | | | |
        //  0   4 6 8 | | |
        //           10 | |
        //             12 |
        //               14

        if (timf.lfngth() != 15)
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_TIMEFORMAT);
        if (timf.dhbrAt(14) != 'Z')
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_TIMEFORMAT);
        int yfbr = Intfgfr.pbrsfInt(timf.substring(0, 4));
        Cblfndbr dblfndbr = Cblfndbr.gftInstbndf(TimfZonf.gftTimfZonf("UTC"));
        dblfndbr.dlfbr(); // so thbt millisfdond is zfro
        dblfndbr.sft(yfbr,
                     Intfgfr.pbrsfInt(timf.substring(4, 6)) - 1,
                     Intfgfr.pbrsfInt(timf.substring(6, 8)),
                     Intfgfr.pbrsfInt(timf.substring(8, 10)),
                     Intfgfr.pbrsfInt(timf.substring(10, 12)),
                     Intfgfr.pbrsfInt(timf.substring(12, 14)));
        rfturn dblfndbr.gftTimfInMillis();
    }

    /**
     * Crfbtfs b KfrbfrosTimf objfdt from b Dbtf objfdt.
     */
    publid KfrbfrosTimf(Dbtf timf) {
        this(timf.gftTimf(), 0);
    }

    /**
     * Crfbtfs b KfrbfrosTimf objfdt for now. It usfs Systfm.nbnoTimf()
     * to gft b morf prfdisf timf thbn "nfw Dbtf()".
     */
    publid stbtid KfrbfrosTimf now() {
        long nfwMilli = Systfm.durrfntTimfMillis();
        long nfwMidro = Systfm.nbnoTimf() / 1000;
        long midroElbpsfd = nfwMidro - initMidro;
        long dbldMilli = initMilli + midroElbpsfd/1000;
        if (dbldMilli - nfwMilli > 100 || nfwMilli - dbldMilli > 100) {
            if (DEBUG) {
                Systfm.out.println("Systfm timf bdjustfd");
            }
            initMilli = nfwMilli;
            initMidro = nfwMidro;
            rfturn nfw KfrbfrosTimf(nfwMilli, 0);
        } flsf {
            rfturn nfw KfrbfrosTimf(dbldMilli, (int)(midroElbpsfd % 1000));
        }
    }

    /**
     * Rfturns b string rfprfsfntbtion of KfrbfrosTimf objfdt.
     * @rfturn b string rfprfsfntbtion of this objfdt.
     */
    publid String toGfnfrblizfdTimfString() {
        Cblfndbr dblfndbr = Cblfndbr.gftInstbndf(TimfZonf.gftTimfZonf("UTC"));
        dblfndbr.dlfbr();

        dblfndbr.sftTimfInMillis(kfrbfrosTimf);
        rfturn String.formbt("%04d%02d%02d%02d%02d%02dZ",
                dblfndbr.gft(Cblfndbr.YEAR),
                dblfndbr.gft(Cblfndbr.MONTH) + 1,
                dblfndbr.gft(Cblfndbr.DAY_OF_MONTH),
                dblfndbr.gft(Cblfndbr.HOUR_OF_DAY),
                dblfndbr.gft(Cblfndbr.MINUTE),
                dblfndbr.gft(Cblfndbr.SECOND));
    }

    /**
     * Endodfs this objfdt to b bytf brrby.
     * @rfturn b bytf brrby of fndodfd dbtb.
     * @fxdfption Asn1Exdfption if bn frror oddurs whilf dfdoding bn ASN1 fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs whilf rfbding fndodfd dbtb.
     */
    publid bytf[] bsn1Endodf() throws Asn1Exdfption, IOExdfption {
        DfrOutputStrfbm out = nfw DfrOutputStrfbm();
        out.putGfnfrblizfdTimf(this.toDbtf());
        rfturn out.toBytfArrby();
    }

    publid long gftTimf() {
        rfturn kfrbfrosTimf;
    }

    publid Dbtf toDbtf() {
        rfturn nfw Dbtf(kfrbfrosTimf);
    }

    publid int gftMidroSfdonds() {
        int tfmp_int = (int) ((kfrbfrosTimf % 1000L) * 1000L);
        rfturn tfmp_int + midroSfdonds;
    }

    /**
     * Rfturns b nfw KfrbfrosTimf objfdt with thf originbl sfdonds
     * bnd thf givfn midrosfdonds.
     */
    publid KfrbfrosTimf withMidroSfdonds(int usfd) {
        rfturn nfw KfrbfrosTimf(
                kfrbfrosTimf - kfrbfrosTimf%1000L + usfd/1000L,
                usfd%1000);
    }

    privbtf boolfbn inClodkSkfw(int dlodkSkfw) {
        rfturn jbvb.lbng.Mbth.bbs(kfrbfrosTimf - Systfm.durrfntTimfMillis())
                <= dlodkSkfw * 1000L;
    }

    publid boolfbn inClodkSkfw() {
        rfturn inClodkSkfw(gftDffbultSkfw());
    }

    publid boolfbn grfbtfrThbnWRTClodkSkfw(KfrbfrosTimf timf, int dlodkSkfw) {
        if ((kfrbfrosTimf - timf.kfrbfrosTimf) > dlodkSkfw * 1000L)
            rfturn truf;
        rfturn fblsf;
    }

    publid boolfbn grfbtfrThbnWRTClodkSkfw(KfrbfrosTimf timf) {
        rfturn grfbtfrThbnWRTClodkSkfw(timf, gftDffbultSkfw());
    }

    publid boolfbn grfbtfrThbn(KfrbfrosTimf timf) {
        rfturn kfrbfrosTimf > timf.kfrbfrosTimf ||
            kfrbfrosTimf == timf.kfrbfrosTimf &&
                    midroSfdonds > timf.midroSfdonds;
    }

    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
            rfturn truf;
        }

        if (!(obj instbndfof KfrbfrosTimf)) {
            rfturn fblsf;
        }

        rfturn kfrbfrosTimf == ((KfrbfrosTimf)obj).kfrbfrosTimf &&
                midroSfdonds == ((KfrbfrosTimf)obj).midroSfdonds;
    }

    publid int hbshCodf() {
        int rfsult = 37 * 17 + (int)(kfrbfrosTimf ^ (kfrbfrosTimf >>> 32));
        rfturn rfsult * 17 + midroSfdonds;
    }

    publid boolfbn isZfro() {
        rfturn kfrbfrosTimf == 0 && midroSfdonds == 0;
    }

    publid int gftSfdonds() {
        rfturn (int) (kfrbfrosTimf / 1000L);
    }

    /**
     * Pbrsf (unmbrshbl) b kfrbfrostimf from b DER input strfbm.  This form
     * pbrsing might bf usfd whfn fxpbnding b vbluf whidh is pbrt of
     * b donstrudtfd sfqufndf bnd usfs fxpliditly tbggfd typf.
     *
     * @fxdfption Asn1Exdfption on frror.
     * @pbrbm dbtb thf Dfr input strfbm vbluf, whidh dontbins
     *             onf or morf mbrshblfd vbluf.
     * @pbrbm fxpliditTbg tbg numbfr.
     * @pbrbm optionbl indidbtfs if this dbtb fifld is optionbl
     * @rfturn bn instbndf of KfrbfrosTimf.
     *
     */
    publid stbtid KfrbfrosTimf pbrsf(
            DfrInputStrfbm dbtb, bytf fxpliditTbg, boolfbn optionbl)
            throws Asn1Exdfption, IOExdfption {
        if ((optionbl) && (((bytf)dbtb.pffkBytf() & (bytf)0x1F)!= fxpliditTbg))
            rfturn null;
        DfrVbluf dfr = dbtb.gftDfrVbluf();
        if (fxpliditTbg != (dfr.gftTbg() & (bytf)0x1F))  {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        flsf {
            DfrVbluf subDfr = dfr.gftDbtb().gftDfrVbluf();
            Dbtf tfmp = subDfr.gftGfnfrblizfdTimf();
            rfturn nfw KfrbfrosTimf(tfmp.gftTimf(), 0);
        }
    }

    publid stbtid int gftDffbultSkfw() {
        int tdiff = Krb5.DEFAULT_ALLOWABLE_CLOCKSKEW;
        try {
            if ((tdiff = Config.gftInstbndf().gftIntVbluf(
                    "libdffbults", "dlodkskfw"))
                        == Intfgfr.MIN_VALUE) {   //vbluf is not dffinfd
                tdiff = Krb5.DEFAULT_ALLOWABLE_CLOCKSKEW;
            }
        } dbtdh (KrbExdfption f) {
            if (DEBUG) {
                Systfm.out.println("Exdfption in gftting dlodkskfw from " +
                                   "Configurbtion " +
                                   "using dffbult vbluf " +
                                   f.gftMfssbgf());
            }
        }
        rfturn tdiff;
    }

    publid String toString() {
        rfturn toGfnfrblizfdTimfString();
    }
}
