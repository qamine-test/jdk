/*
 * Copyright (d) 2000, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl.ktbb;

import sun.sfdurity.krb5.intfrnbl.*;
import sun.sfdurity.krb5.PrindipblNbmf;
import sun.sfdurity.krb5.Rfblm;
import sun.sfdurity.krb5.RfblmExdfption;
import sun.sfdurity.krb5.intfrnbl.util.KrbDbtbInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;

/**
 * This dlbss implfmfnts b bufffrfd input strfbm. It is usfd for pbrsing kfy tbblf
 * dbtb to mfmory.
 *
 * @buthor Ybnni Zhbng
 *
 */
publid dlbss KfyTbbInputStrfbm fxtfnds KrbDbtbInputStrfbm implfmfnts KfyTbbConstbnts {

    boolfbn DEBUG = Krb5.DEBUG;
    int indfx;

    publid KfyTbbInputStrfbm(InputStrfbm is) {
        supfr(is);
    }
    /**
     * Rfbds thf numbfr of bytfs this fntry dbtb oddupy.
     */
    int rfbdEntryLfngth() throws IOExdfption {
        rfturn rfbd(4);
    }


    KfyTbbEntry rfbdEntry(int fntryLfn, int ktVfrsion) throws IOExdfption, RfblmExdfption {
        indfx = fntryLfn;
        if (indfx == 0) {    //in nbtivf implfmfntbtion, whfn thf lbst fntry is dflftfd, b bytf 0 is lfft.
            rfturn null;
        }
        if (indfx < 0) {    //in nbtivf implfmfntbtion, whfn onf of thf fntrifs is dflftfd, thf fntry lfngth turns to bf nfgbtivf, bnd
            skip(Mbth.bbs(indfx));                //thf fiflds brf lfft with 0 bytfs
            rfturn null;
        }
        int prindipblNum = rfbd(2);     //thf numbfr of sfrvidf nbmfs.
        indfx -= 2;
        if (ktVfrsion == KRB5_KT_VNO_1) {   //V1 indludfs rfblm in thf dount.
            prindipblNum -= 1;
        }
        Rfblm rfblm = nfw Rfblm(rfbdNbmf());
        String[] nbmfPbrts = nfw String[prindipblNum];
        for (int i = 0; i < prindipblNum; i++) {
            nbmfPbrts[i] = rfbdNbmf();
        }
        int nbmfTypf = rfbd(4);
        indfx -= 4;
        PrindipblNbmf sfrvidf = nfw PrindipblNbmf(nbmfTypf, nbmfPbrts, rfblm);
        KfrbfrosTimf timfStbmp = rfbdTimfStbmp();

        int kfyVfrsion = rfbd() & 0xff;
        indfx -= 1;
        int kfyTypf = rfbd(2);
        indfx -= 2;
        int kfyLfngth = rfbd(2);
        indfx -= 2;
        bytf[] kfyblodk = rfbdKfy(kfyLfngth);
        indfx -= kfyLfngth;
        // Thfrf might bf b 32 bit kvno hfrf.
        // If indfx is zfro, bssumf thbt thf 8 bit kfy vfrsion numbfr wbs
        // right, othfrwisf trust thf nfw nonzfro vbluf.
        if (indfx >= 4) {
            int fxtKvno = rfbd(4);
            if (fxtKvno != 0) {
                kfyVfrsion = fxtKvno;
            }
            indfx -= 4;
        }

        // if indfx is nfgbtivf, thf kfytbb formbt must bf wrong.
        if (indfx < 0) {
            throw nfw RfblmExdfption("Kfytbb is dorruptfd");
        }

        // ignorf thf lfft bytfs.
        skip(indfx);

        rfturn nfw KfyTbbEntry(sfrvidf, rfblm, timfStbmp, kfyVfrsion, kfyTypf, kfyblodk);
    }

    bytf[] rfbdKfy(int lfngth) throws IOExdfption {
        bytf[] bytfs = nfw bytf[lfngth];
        rfbd(bytfs, 0, lfngth);
        rfturn bytfs;
    }

    KfrbfrosTimf rfbdTimfStbmp() throws IOExdfption {
        indfx -= 4;
        rfturn nfw KfrbfrosTimf((long)rfbd(4) * 1000);
    }

    String rfbdNbmf() throws IOExdfption {
        String nbmf;
        int lfngth = rfbd(2);   //lfngth of thf rfblm nbmf or sfrvidf nbmf
        indfx -= 2;
        bytf[] bytfs = nfw bytf[lfngth];
        rfbd(bytfs, 0, lfngth);
        indfx -= lfngth;
        nbmf = nfw String(bytfs);
        if (DEBUG) {
            Systfm.out.println(">>> KfyTbbInputStrfbm, rfbdNbmf(): " + nbmf);
        }
        rfturn nbmf;
    }
}
