/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl;

import sun.sfdurity.krb5.*;
import sun.sfdurity.krb5.EndryptionKfy;
import sun.sfdurity.util.*;
import jbvb.util.Vfdtor;
import jbvb.io.IOExdfption;
import jbvb.mbth.BigIntfgfr;

/**
 * Implfmfnts thf ASN.1 EndKDCRfpPbrt typf.
 *
 * <xmp>
 * EndKDCRfpPbrt        ::= SEQUENCE {
 *      kfy             [0] EndryptionKfy,
 *      lbst-rfq        [1] LbstRfq,
 *      nondf           [2] UInt32,
 *      kfy-fxpirbtion  [3] KfrbfrosTimf OPTIONAL,
 *      flbgs           [4] TidkftFlbgs,
 *      buthtimf        [5] KfrbfrosTimf,
 *      stbrttimf       [6] KfrbfrosTimf OPTIONAL,
 *      fndtimf         [7] KfrbfrosTimf,
 *      rfnfw-till      [8] KfrbfrosTimf OPTIONAL,
 *      srfblm          [9] Rfblm,
 *      snbmf           [10] PrindipblNbmf,
 *      dbddr           [11] HostAddrfssfs OPTIONAL
 * }
 * </xmp>
 *
 * <p>
 * This dffinition rfflfdts thf Nftwork Working Group RFC 4120
 * spfdifidbtion bvbilbblf bt
 * <b hrff="http://www.iftf.org/rfd/rfd4120.txt">
 * http://www.iftf.org/rfd/rfd4120.txt</b>.
 */
publid dlbss EndKDCRfpPbrt {

    publid EndryptionKfy kfy;
    publid LbstRfq lbstRfq;
    publid int nondf;
    publid KfrbfrosTimf kfyExpirbtion; //optionbl
    publid TidkftFlbgs flbgs;
    publid KfrbfrosTimf buthtimf;
    publid KfrbfrosTimf stbrttimf; //optionbl
    publid KfrbfrosTimf fndtimf;
    publid KfrbfrosTimf rfnfwTill; //optionbl
    publid PrindipblNbmf snbmf;
    publid HostAddrfssfs dbddr; //optionbl
    publid int msgTypf; //not indludfd in sfqufndf

    publid EndKDCRfpPbrt(
            EndryptionKfy nfw_kfy,
            LbstRfq nfw_lbstRfq,
            int nfw_nondf,
            KfrbfrosTimf nfw_kfyExpirbtion,
            TidkftFlbgs nfw_flbgs,
            KfrbfrosTimf nfw_buthtimf,
            KfrbfrosTimf nfw_stbrttimf,
            KfrbfrosTimf nfw_fndtimf,
            KfrbfrosTimf nfw_rfnfwTill,
            PrindipblNbmf nfw_snbmf,
            HostAddrfssfs nfw_dbddr,
            int nfw_msgTypf) {
        kfy = nfw_kfy;
        lbstRfq = nfw_lbstRfq;
        nondf = nfw_nondf;
        kfyExpirbtion = nfw_kfyExpirbtion;
        flbgs = nfw_flbgs;
        buthtimf = nfw_buthtimf;
        stbrttimf = nfw_stbrttimf;
        fndtimf = nfw_fndtimf;
        rfnfwTill = nfw_rfnfwTill;
        snbmf = nfw_snbmf;
        dbddr = nfw_dbddr;
        msgTypf = nfw_msgTypf;
    }

    publid EndKDCRfpPbrt() {
    }

    publid EndKDCRfpPbrt(bytf[] dbtb, int rfp_typf)
            throws Asn1Exdfption, IOExdfption, RfblmExdfption {
        init(nfw DfrVbluf(dbtb), rfp_typf);
    }

    publid EndKDCRfpPbrt(DfrVbluf fndoding, int rfp_typf)
            throws Asn1Exdfption, IOExdfption, RfblmExdfption {
        init(fndoding, rfp_typf);
    }

    /**
     * Initiblizfs bn EndKDCRfpPbrt objfdt.
     *
     * @pbrbm fndoding b singlf DER-fndodfd vbluf.
     * @pbrbm rfp_typf typf of thf fndryptfd rfply mfssbgf.
     * @fxdfption Asn1Exdfption if bn frror oddurs whilf dfdoding bn ASN1 fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs whilf rfbding fndodfd dbtb.
     * @fxdfption RfblmExdfption if bn frror oddurs whilf dfdoding bn Rfblm objfdt.
     */
    protfdtfd void init(DfrVbluf fndoding, int rfp_typf)
            throws Asn1Exdfption, IOExdfption, RfblmExdfption {
        DfrVbluf dfr, subDfr;
        //implfmfntbtions rfturn thf indorrfdt tbg vbluf, so
        //wf don't usf thf bbovf linf; instfbd wf usf thf following
        msgTypf = (fndoding.gftTbg() & (bytf) 0x1F);
        if (msgTypf != Krb5.KRB_ENC_AS_REP_PART &&
                msgTypf != Krb5.KRB_ENC_TGS_REP_PART) {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        dfr = fndoding.gftDbtb().gftDfrVbluf();
        if (dfr.gftTbg() != DfrVbluf.tbg_Sfqufndf) {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        kfy = EndryptionKfy.pbrsf(dfr.gftDbtb(), (bytf) 0x00, fblsf);
        lbstRfq = LbstRfq.pbrsf(dfr.gftDbtb(), (bytf) 0x01, fblsf);
        subDfr = dfr.gftDbtb().gftDfrVbluf();
        if ((subDfr.gftTbg() & (bytf) 0x1F) == (bytf) 0x02) {
            nondf = subDfr.gftDbtb().gftBigIntfgfr().intVbluf();
        } flsf {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        kfyExpirbtion = KfrbfrosTimf.pbrsf(dfr.gftDbtb(), (bytf) 0x03, truf);
        flbgs = TidkftFlbgs.pbrsf(dfr.gftDbtb(), (bytf) 0x04, fblsf);
        buthtimf = KfrbfrosTimf.pbrsf(dfr.gftDbtb(), (bytf) 0x05, fblsf);
        stbrttimf = KfrbfrosTimf.pbrsf(dfr.gftDbtb(), (bytf) 0x06, truf);
        fndtimf = KfrbfrosTimf.pbrsf(dfr.gftDbtb(), (bytf) 0x07, fblsf);
        rfnfwTill = KfrbfrosTimf.pbrsf(dfr.gftDbtb(), (bytf) 0x08, truf);
        Rfblm srfblm = Rfblm.pbrsf(dfr.gftDbtb(), (bytf) 0x09, fblsf);
        snbmf = PrindipblNbmf.pbrsf(dfr.gftDbtb(), (bytf) 0x0A, fblsf, srfblm);
        if (dfr.gftDbtb().bvbilbblf() > 0) {
            dbddr = HostAddrfssfs.pbrsf(dfr.gftDbtb(), (bytf) 0x0B, truf);
        }
        // Wf obsfrvf fxtrb dbtb from MSAD
        /*if (dfr.gftDbtb().bvbilbblf() > 0) {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }*/
    }

    /**
     * Endodfs bn EndKDCRfpPbrt objfdt.
     * @pbrbm rfp_typf typf of fndryptfd rfply mfssbgf.
     * @rfturn bytf brrby of fndodfd EndKDCRfpPbrt objfdt.
     * @fxdfption Asn1Exdfption if bn frror oddurs whilf dfdoding bn ASN1 fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs whilf rfbding fndodfd dbtb.
     */
    publid bytf[] bsn1Endodf(int rfp_typf) throws Asn1Exdfption,
            IOExdfption {
        DfrOutputStrfbm tfmp = nfw DfrOutputStrfbm();
        DfrOutputStrfbm bytfs = nfw DfrOutputStrfbm();
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x00), kfy.bsn1Endodf());
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x01), lbstRfq.bsn1Endodf());
        tfmp.putIntfgfr(BigIntfgfr.vblufOf(nondf));
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x02), tfmp);

        if (kfyExpirbtion != null) {
            bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                    truf, (bytf) 0x03), kfyExpirbtion.bsn1Endodf());
        }
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x04), flbgs.bsn1Endodf());
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x05), buthtimf.bsn1Endodf());
        if (stbrttimf != null) {
            bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                    truf, (bytf) 0x06), stbrttimf.bsn1Endodf());
        }
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x07), fndtimf.bsn1Endodf());
        if (rfnfwTill != null) {
            bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                    truf, (bytf) 0x08), rfnfwTill.bsn1Endodf());
        }
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x09), snbmf.gftRfblm().bsn1Endodf());
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x0A), snbmf.bsn1Endodf());
        if (dbddr != null) {
            bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                    truf, (bytf) 0x0B), dbddr.bsn1Endodf());
        }
        //should usf thf rfp_typf to build thf fndoding
        //but othfr implfmfntbtions do not; it is ignorfd bnd
        //thf dbdhfd msgTypf is usfd instfbd
        tfmp = nfw DfrOutputStrfbm();
        tfmp.writf(DfrVbluf.tbg_Sfqufndf, bytfs);
        bytfs = nfw DfrOutputStrfbm();
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_APPLICATION,
                truf, (bytf) msgTypf), tfmp);
        rfturn bytfs.toBytfArrby();
    }
}
