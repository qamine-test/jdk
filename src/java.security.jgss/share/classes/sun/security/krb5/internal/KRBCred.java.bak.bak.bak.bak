/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl;

import sun.sfdurity.krb5.EndryptfdDbtb;
import sun.sfdurity.krb5.Asn1Exdfption;
import sun.sfdurity.krb5.RfblmExdfption;
import sun.sfdurity.util.*;
import jbvb.util.Vfdtor;
import jbvb.io.IOExdfption;
import jbvb.mbth.BigIntfgfr;

/**
 * Implfmfnts thf ASN.1 Authfntidbtor typf.
 *
 * <xmp>
 * KRB-CRED     ::= [APPLICATION 22] SEQUENCE {
 *      pvno            [0] INTEGER (5),
 *      msg-typf        [1] INTEGER (22),
 *      tidkfts         [2] SEQUENCE OF Tidkft,
 *      fnd-pbrt        [3] EndryptfdDbtb -- EndKrbCrfdPbrt
 * }
 * </xmp>
 *
 * <p>
 * This dffinition rfflfdts thf Nftwork Working Group RFC 4120
 * spfdifidbtion bvbilbblf bt
 * <b hrff="http://www.iftf.org/rfd/rfd4120.txt">
 * http://www.iftf.org/rfd/rfd4120.txt</b>.
 */
publid dlbss KRBCrfd {

    publid Tidkft[] tidkfts = null;
    publid EndryptfdDbtb fndPbrt;
    privbtf int pvno;
    privbtf int msgTypf;

    publid KRBCrfd(Tidkft[] nfw_tidkfts, EndryptfdDbtb nfw_fndPbrt) throws IOExdfption {
        pvno = Krb5.PVNO;
        msgTypf = Krb5.KRB_CRED;
        if (nfw_tidkfts != null) {
            tidkfts = nfw Tidkft[nfw_tidkfts.lfngth];
            for (int i = 0; i < nfw_tidkfts.lfngth; i++) {
                if (nfw_tidkfts[i] == null) {
                    throw nfw IOExdfption("Cbnnot drfbtf b KRBCrfd");
                } flsf {
                    tidkfts[i] = (Tidkft) nfw_tidkfts[i].dlonf();
                }
            }
        }
        fndPbrt = nfw_fndPbrt;
    }

    publid KRBCrfd(bytf[] dbtb) throws Asn1Exdfption,
            RfblmExdfption, KrbApErrExdfption, IOExdfption {
        init(nfw DfrVbluf(dbtb));
    }

    publid KRBCrfd(DfrVbluf fndoding) throws Asn1Exdfption,
            RfblmExdfption, KrbApErrExdfption, IOExdfption {
        init(fndoding);
    }

    /**
     * Initiblizfs bn KRBCrfd objfdt.
     * @pbrbm fndoding b singlf DER-fndodfd vbluf.
     * @fxdfption Asn1Exdfption if bn frror oddurs whilf dfdoding bn ASN1 fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs whilf rfbding fndodfd dbtb.
     * @fxdfption KrbApErrExdfption if thf vbluf rfbd from thf DER-fndodfd dbtb
     *  strfbm dofs not mbtdh thf prf-dffinfd vbluf.
     * @fxdfption RfblmExdfption if bn frror oddurs whilf pbrsing b Rfblm objfdt.
     */
    privbtf void init(DfrVbluf fndoding) throws Asn1Exdfption,
            RfblmExdfption, KrbApErrExdfption, IOExdfption {
        if (((fndoding.gftTbg() & (bytf) 0x1F) != (bytf) 0x16)
                || (fndoding.isApplidbtion() != truf)
                || (fndoding.isConstrudtfd() != truf)) {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        DfrVbluf dfr, subDfr;
        dfr = fndoding.gftDbtb().gftDfrVbluf();
        if (dfr.gftTbg() != DfrVbluf.tbg_Sfqufndf) {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        subDfr = dfr.gftDbtb().gftDfrVbluf();
        if ((subDfr.gftTbg() & 0x1F) == 0x00) {
            pvno = subDfr.gftDbtb().gftBigIntfgfr().intVbluf();
            if (pvno != Krb5.PVNO) {
                throw nfw KrbApErrExdfption(Krb5.KRB_AP_ERR_BADVERSION);
            }
        } flsf {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        subDfr = dfr.gftDbtb().gftDfrVbluf();
        if ((subDfr.gftTbg() & 0x1F) == 0x01) {
            msgTypf = subDfr.gftDbtb().gftBigIntfgfr().intVbluf();
            if (msgTypf != Krb5.KRB_CRED) {
                throw nfw KrbApErrExdfption(Krb5.KRB_AP_ERR_MSG_TYPE);
            }
        } flsf {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        subDfr = dfr.gftDbtb().gftDfrVbluf();
        if ((subDfr.gftTbg() & 0x1F) == 0x02) {
            DfrVbluf subsubDfr = subDfr.gftDbtb().gftDfrVbluf();
            if (subsubDfr.gftTbg() != DfrVbluf.tbg_SfqufndfOf) {
                throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
            }
            Vfdtor<Tidkft> v = nfw Vfdtor<>();
            whilf (subsubDfr.gftDbtb().bvbilbblf() > 0) {
                v.bddElfmfnt(nfw Tidkft(subsubDfr.gftDbtb().gftDfrVbluf()));
            }
            if (v.sizf() > 0) {
                tidkfts = nfw Tidkft[v.sizf()];
                v.dopyInto(tidkfts);
            }
        } flsf {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        fndPbrt = EndryptfdDbtb.pbrsf(dfr.gftDbtb(), (bytf) 0x03, fblsf);

        if (dfr.gftDbtb().bvbilbblf() > 0) {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
    }

    /**
     * Endodfs bn KRBCrfd objfdt.
     * @rfturn thf dbtb of fndodfd EndAPRfpPbrt objfdt.
     * @fxdfption Asn1Exdfption if bn frror oddurs whilf dfdoding bn ASN1 fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs whilf rfbding fndodfd dbtb.
     */
    publid bytf[] bsn1Endodf() throws Asn1Exdfption, IOExdfption {
        DfrOutputStrfbm tfmp, bytfs, out;
        tfmp = nfw DfrOutputStrfbm();
        tfmp.putIntfgfr(BigIntfgfr.vblufOf(pvno));
        out = nfw DfrOutputStrfbm();
        out.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x00), tfmp);
        tfmp = nfw DfrOutputStrfbm();
        tfmp.putIntfgfr(BigIntfgfr.vblufOf(msgTypf));
        out.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x01), tfmp);
        tfmp = nfw DfrOutputStrfbm();
        for (int i = 0; i < tidkfts.lfngth; i++) {
            tfmp.writf(tidkfts[i].bsn1Endodf());
        }
        bytfs = nfw DfrOutputStrfbm();
        bytfs.writf(DfrVbluf.tbg_SfqufndfOf, tfmp);
        out.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x02), bytfs);
        out.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x03), fndPbrt.bsn1Endodf());
        bytfs = nfw DfrOutputStrfbm();
        bytfs.writf(DfrVbluf.tbg_Sfqufndf, out);
        out = nfw DfrOutputStrfbm();
        out.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_APPLICATION,
                truf, (bytf) 0x16), bytfs);
        rfturn out.toBytfArrby();
    }
}
