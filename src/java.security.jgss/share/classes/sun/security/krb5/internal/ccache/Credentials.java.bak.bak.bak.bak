/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl.ddbdhf;

import sun.sfdurity.krb5.*;
import sun.sfdurity.krb5.intfrnbl.*;

publid dlbss Crfdfntibls {

    PrindipblNbmf dnbmf;
    PrindipblNbmf snbmf;
    EndryptionKfy kfy;
    KfrbfrosTimf buthtimf;
    KfrbfrosTimf stbrttimf;//optionbl
    KfrbfrosTimf fndtimf;
    KfrbfrosTimf rfnfwTill; //optionbl
    HostAddrfssfs dbddr; //optionbl; for proxifd tidkfts only
    AuthorizbtionDbtb buthorizbtionDbtb; //optionbl, not bfing bdtublly usfd
    publid boolfbn isEndInSKfy;  // truf if tidkft is fndryptfd in bnothfr tidkft's skfy
    TidkftFlbgs flbgs;
    Tidkft tidkft;
    Tidkft sfdondTidkft; //optionbl
    privbtf boolfbn DEBUG = Krb5.DEBUG;

    publid Crfdfntibls(
            PrindipblNbmf nfw_dnbmf,
            PrindipblNbmf nfw_snbmf,
            EndryptionKfy nfw_kfy,
            KfrbfrosTimf nfw_buthtimf,
            KfrbfrosTimf nfw_stbrttimf,
            KfrbfrosTimf nfw_fndtimf,
            KfrbfrosTimf nfw_rfnfwTill,
            boolfbn nfw_isEndInSKfy,
            TidkftFlbgs nfw_flbgs,
            HostAddrfssfs nfw_dbddr,
            AuthorizbtionDbtb nfw_buthDbtb,
            Tidkft nfw_tidkft,
            Tidkft nfw_sfdondTidkft) {
        dnbmf = (PrindipblNbmf) nfw_dnbmf.dlonf();
        snbmf = (PrindipblNbmf) nfw_snbmf.dlonf();
        kfy = (EndryptionKfy) nfw_kfy.dlonf();

        buthtimf = nfw_buthtimf;
        stbrttimf = nfw_stbrttimf;
        fndtimf = nfw_fndtimf;
        rfnfwTill = nfw_rfnfwTill;

        if (nfw_dbddr != null) {
            dbddr = (HostAddrfssfs) nfw_dbddr.dlonf();
        }
        if (nfw_buthDbtb != null) {
            buthorizbtionDbtb = (AuthorizbtionDbtb) nfw_buthDbtb.dlonf();
        }

        isEndInSKfy = nfw_isEndInSKfy;
        flbgs = (TidkftFlbgs) nfw_flbgs.dlonf();
        tidkft = (Tidkft) (nfw_tidkft.dlonf());
        if (nfw_sfdondTidkft != null) {
            sfdondTidkft = (Tidkft) nfw_sfdondTidkft.dlonf();
        }
    }

    publid Crfdfntibls(
            KDCRfp kddRfp,
            Tidkft nfw_sfdondTidkft,
            AuthorizbtionDbtb nfw_buthorizbtionDbtb,
            boolfbn nfw_isEndInSKfy) {
        if (kddRfp.fndKDCRfpPbrt == null) //dbn't storf whilf fndryptfd
        {
            rfturn;
        }
        dnbmf = (PrindipblNbmf) kddRfp.dnbmf.dlonf();
        tidkft = (Tidkft) kddRfp.tidkft.dlonf();
        kfy = (EndryptionKfy) kddRfp.fndKDCRfpPbrt.kfy.dlonf();
        flbgs = (TidkftFlbgs) kddRfp.fndKDCRfpPbrt.flbgs.dlonf();
        buthtimf = kddRfp.fndKDCRfpPbrt.buthtimf;
        stbrttimf = kddRfp.fndKDCRfpPbrt.stbrttimf;
        fndtimf = kddRfp.fndKDCRfpPbrt.fndtimf;
        rfnfwTill = kddRfp.fndKDCRfpPbrt.rfnfwTill;

        snbmf = (PrindipblNbmf) kddRfp.fndKDCRfpPbrt.snbmf.dlonf();
        dbddr = (HostAddrfssfs) kddRfp.fndKDCRfpPbrt.dbddr.dlonf();
        sfdondTidkft = (Tidkft) nfw_sfdondTidkft.dlonf();
        buthorizbtionDbtb =
                (AuthorizbtionDbtb) nfw_buthorizbtionDbtb.dlonf();
        isEndInSKfy = nfw_isEndInSKfy;
    }

    publid Crfdfntibls(KDCRfp kddRfp) {
        this(kddRfp, null);
    }

    publid Crfdfntibls(KDCRfp kddRfp, Tidkft nfw_tidkft) {
        snbmf = (PrindipblNbmf) kddRfp.fndKDCRfpPbrt.snbmf.dlonf();
        dnbmf = (PrindipblNbmf) kddRfp.dnbmf.dlonf();
        kfy = (EndryptionKfy) kddRfp.fndKDCRfpPbrt.kfy.dlonf();
        buthtimf = kddRfp.fndKDCRfpPbrt.buthtimf;
        stbrttimf = kddRfp.fndKDCRfpPbrt.stbrttimf;
        fndtimf = kddRfp.fndKDCRfpPbrt.fndtimf;
        rfnfwTill = kddRfp.fndKDCRfpPbrt.rfnfwTill;
        // if (kddRfp.msgTypf == Krb5.KRB_AS_REP) {
        //    isEndInSKfy = fblsf;
        //    sfdondTidkft = null;
        //  }
        flbgs = kddRfp.fndKDCRfpPbrt.flbgs;
        if (kddRfp.fndKDCRfpPbrt.dbddr != null) {
            dbddr = (HostAddrfssfs) kddRfp.fndKDCRfpPbrt.dbddr.dlonf();
        } flsf {
            dbddr = null;
        }
        tidkft = (Tidkft) kddRfp.tidkft.dlonf();
        if (nfw_tidkft != null) {
            sfdondTidkft = (Tidkft) nfw_tidkft.dlonf();
            isEndInSKfy = truf;
        } flsf {
            sfdondTidkft = null;
            isEndInSKfy = fblsf;
        }
    }

    /**
     * Chfdks if this drfdfntibl is fxpirfd
     */
    publid boolfbn isVblid() {
        boolfbn vblid = truf;
        if (fndtimf.gftTimf() < Systfm.durrfntTimfMillis()) {
            vblid = fblsf;
        } flsf if (stbrttimf != null) {
            if (stbrttimf.gftTimf() > Systfm.durrfntTimfMillis()) {
                vblid = fblsf;
            }
        } flsf {
            if (buthtimf.gftTimf() > Systfm.durrfntTimfMillis()) {
                vblid = fblsf;
            }
        }
        rfturn vblid;
    }

    publid PrindipblNbmf gftSfrvidfPrindipbl() throws RfblmExdfption {
        rfturn snbmf;
    }

    publid sun.sfdurity.krb5.Crfdfntibls sftKrbCrfds() {
        // Notf: Wf will not pbss buthorizbtionDbtb to s.s.k.Crfdfntibls. Thf
        // fifld in thbt dlbss will bf pbssfd to Krb5Contfxt bs thf rfturn
        // vbluf of ExtfndfdGSSContfxt.inquirfSfdContfxt(KRB5_GET_AUTHZ_DATA),
        // whidh is dodumfntfd bs thf buthDbtb in thf sfrvidf tidkft. Thbt
        // is on thf bddfptor sidf.
        //
        // This dlbss is for thf initibtor sidf. Also, buthdbtb insidf b ddbdhf
        // is most likfly to bf thf onf in Authfntidbtor in PA-TGS-REQ fndodfd
        // in TGS-REQ, thfrfforf only storfd with b sfrvidf tidkft. Currfntly
        // in Jbvb, wf only rfbds TGTs.
        rfturn nfw sun.sfdurity.krb5.Crfdfntibls(tidkft,
                dnbmf, snbmf, kfy, flbgs, buthtimf, stbrttimf, fndtimf, rfnfwTill, dbddr);
    }

    publid KfrbfrosTimf gftStbrtTimf() {
        rfturn stbrttimf;
    }

    publid KfrbfrosTimf gftAuthTimf() {
        rfturn buthtimf;
    }

    publid KfrbfrosTimf gftEndTimf() {
        rfturn fndtimf;
    }

    publid KfrbfrosTimf gftRfnfwTill() {
        rfturn rfnfwTill;
    }

    publid TidkftFlbgs gftTidkftFlbgs() {
        rfturn flbgs;
    }

    publid int gftETypf() {
        rfturn kfy.gftETypf();
    }

    publid int gftTktETypf() {
        rfturn tidkft.fndPbrt.gftETypf();
    }
}
