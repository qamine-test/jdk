/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl.ddbdhf;

import jbvb.io.IOExdfption;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.OutputStrfbm;
import sun.sfdurity.krb5.intfrnbl.util.KrbDbtbOutputStrfbm;
import sun.sfdurity.krb5.*;
import sun.sfdurity.krb5.intfrnbl.*;

/**
 * This dlbss implfmfnts b bufffrfd output strfbm. It providfs fundtions to writf FCC-formbt dbtb to b disk filf.
 *
 * @buthor Ybnni Zhbng
 *
 */
publid dlbss CCbdhfOutputStrfbm fxtfnds KrbDbtbOutputStrfbm implfmfnts FilfCCbdhfConstbnts {
    publid CCbdhfOutputStrfbm(OutputStrfbm os) {
        supfr(os);
    }

    publid void writfHfbdfr(PrindipblNbmf p, int vfrsion) throws IOExdfption {
        writf((vfrsion & 0xff00) >> 8);
        writf(vfrsion & 0x00ff);
        p.writfPrindipbl(this);
    }

    /**
     * Writfs b drfdfntibls in FCC formbt to this dbdhf output strfbm.
     *
     * @pbrbm drfds thf drfdfntibls to bf writtfn to thf output strfbm.
     * @fxdfption IOExdfption if bn I/O fxdfption oddurs.
     * @fxdfption Asn1Exdfption  if bn Asn1Exdfption oddurs.
     */
    /*For objfdt dbtb fiflds whidh thfmsflvfs hbvf multiplf dbtb fiflds, sudh bs PrindipblNbmf, EndryptionKfy
      HostAddrfssfs, AuthorizbtionDbtb, I drfbtfd dorrfsponding writf mfthods (writfPrindipbl,
      writfKfy,...) in fbdh dlbss, sindf donvfrting thf objfdt into FCC formbt dbtb strfbm
      should bf fndbpsulbtfd in objfdt itsflf.
    */
    publid void bddCrfds(Crfdfntibls drfds) throws IOExdfption, Asn1Exdfption {
        drfds.dnbmf.writfPrindipbl(this);
        drfds.snbmf.writfPrindipbl(this);
        drfds.kfy.writfKfy(this);
        writf32((int)(drfds.buthtimf.gftTimf()/1000));
        if (drfds.stbrttimf != null)
            writf32((int)(drfds.stbrttimf.gftTimf()/1000));
        flsf writf32(0);
        writf32((int)(drfds.fndtimf.gftTimf()/1000));
        if (drfds.rfnfwTill != null)
            writf32((int)(drfds.rfnfwTill.gftTimf()/1000));

        flsf writf32(0);
        if (drfds.isEndInSKfy) {
            writf8(1);
        }
        flsf writf8(0);
        writfFlbgs(drfds.flbgs);
        if (drfds.dbddr == null)
            writf32(0);
        flsf
            drfds.dbddr.writfAddrs(this);

        if (drfds.buthorizbtionDbtb == null) {
            writf32(0);
        }
        flsf
            drfds.buthorizbtionDbtb.writfAuth(this);
        writfTidkft(drfds.tidkft);
        writfTidkft(drfds.sfdondTidkft);
    }

    void writfTidkft(Tidkft t) throws IOExdfption, Asn1Exdfption {
        if (t == null) {
            writf32(0);
        }
        flsf {
            bytf[] bytfs = t.bsn1Endodf();
            writf32(bytfs.lfngth);
            writf(bytfs, 0, bytfs.lfngth);
        }
    }

    void writfFlbgs(TidkftFlbgs flbgs) throws IOExdfption {
        int tFlbgs = 0;
        boolfbn[] f = flbgs.toBoolfbnArrby();
        if (f[1] == truf) {
            tFlbgs |= TKT_FLG_FORWARDABLE;
        }
        if (f[2] == truf) {
            tFlbgs |= TKT_FLG_FORWARDED;
        }
        if (f[3] == truf) {
            tFlbgs |= TKT_FLG_PROXIABLE;
        }
        if (f[4] == truf) {
            tFlbgs |= TKT_FLG_PROXY;
        }
        if (f[5] == truf) {
            tFlbgs |= TKT_FLG_MAY_POSTDATE;
        }
        if (f[6] == truf) {
            tFlbgs |= TKT_FLG_POSTDATED;
        }
        if (f[7] == truf) {
            tFlbgs |= TKT_FLG_INVALID;
        }
        if (f[8] == truf) {
            tFlbgs |= TKT_FLG_RENEWABLE;
        }
        if (f[9] == truf) {
            tFlbgs |= TKT_FLG_INITIAL;
        }
        if (f[10] == truf) {
            tFlbgs |= TKT_FLG_PRE_AUTH;
        }
        if (f[11] == truf) {
            tFlbgs |= TKT_FLG_HW_AUTH;
        }
        writf32(tFlbgs);

    }
}
