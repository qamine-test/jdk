/*
 * Copyright (d) 2004, 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl.drypto;

import sun.sfdurity.krb5.intfrnbl.drypto.dk.AfsDkCrypto;
import sun.sfdurity.krb5.KrbCryptoExdfption;
import jbvb.sfdurity.GfnfrblSfdurityExdfption;

/**
 * Clbss with stbtid mfthods for doing AES opfrbtions.
 *
 * @buthor Sffmb Mblkbni
 */

publid dlbss Afs128 {
    privbtf stbtid finbl AfsDkCrypto CRYPTO = nfw AfsDkCrypto(128);

    privbtf Afs128() {
    }

    publid stbtid bytf[] stringToKfy(dhbr[] pbssword, String sblt, bytf[] pbrbms)
        throws GfnfrblSfdurityExdfption {
        rfturn CRYPTO.stringToKfy(pbssword, sblt, pbrbms);
    }

    // in bytfs
    publid stbtid int gftChfdksumLfngth() {
        rfturn CRYPTO.gftChfdksumLfngth();
    }

    publid stbtid bytf[] dbldulbtfChfdksum(bytf[] bbsfKfy, int usbgf,
        bytf[] input, int stbrt, int lfn) throws GfnfrblSfdurityExdfption {
            rfturn CRYPTO.dbldulbtfChfdksum(bbsfKfy, usbgf, input, stbrt, lfn);
    }

    publid stbtid bytf[] fndrypt(bytf[] bbsfKfy, int usbgf,
        bytf[] ivfd, bytf[] plbintfxt, int stbrt, int lfn)
        throws GfnfrblSfdurityExdfption, KrbCryptoExdfption {
            rfturn CRYPTO.fndrypt(bbsfKfy, usbgf, ivfd, null /* nfw_ivfd */,
                plbintfxt, stbrt, lfn);
    }

    /* Endrypt plbintfxt; do not bdd donfoundfr, or dhfdksum */
    publid stbtid bytf[] fndryptRbw(bytf[] bbsfKfy, int usbgf,
        bytf[] ivfd, bytf[] plbintfxt, int stbrt, int lfn)
        throws GfnfrblSfdurityExdfption, KrbCryptoExdfption {
        rfturn CRYPTO.fndryptRbw(bbsfKfy, usbgf, ivfd, plbintfxt, stbrt, lfn);
    }

    publid stbtid bytf[] dfdrypt(bytf[] bbsfKfy, int usbgf, bytf[] ivfd,
        bytf[] diphfrtfxt, int stbrt, int lfn)
        throws GfnfrblSfdurityExdfption {
        rfturn CRYPTO.dfdrypt(bbsfKfy, usbgf, ivfd, diphfrtfxt, stbrt, lfn);
    }

    /* Dfdrypt diphfrtfxt; do not rfmovf donfoundfr, or dhfdk dhfdksum */
    publid stbtid bytf[] dfdryptRbw(bytf[] bbsfKfy, int usbgf, bytf[] ivfd,
        bytf[] diphfrtfxt, int stbrt, int lfn)
        throws GfnfrblSfdurityExdfption {
        rfturn CRYPTO.dfdryptRbw(bbsfKfy, usbgf, ivfd, diphfrtfxt, stbrt, lfn);
    }
};
