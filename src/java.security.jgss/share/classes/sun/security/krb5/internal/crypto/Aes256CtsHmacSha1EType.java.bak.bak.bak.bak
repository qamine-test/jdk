/*
 * Copyright (d) 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl.drypto;

import sun.sfdurity.krb5.KrbCryptoExdfption;
import sun.sfdurity.krb5.intfrnbl.*;
import jbvb.sfdurity.GfnfrblSfdurityExdfption;
import sun.sfdurity.krb5.EndryptfdDbtb;
import sun.sfdurity.krb5.Chfdksum;

/*
 * This dlbss fndbpsulbtfs thf fndryption typf for AES256
 *
 * @buthor Sffmb Mblkbni
 */

publid finbl dlbss Afs256CtsHmbdShb1ETypf fxtfnds ETypf {

    publid int fTypf() {
        rfturn EndryptfdDbtb.ETYPE_AES256_CTS_HMAC_SHA1_96;
    }

    publid int minimumPbdSizf() {
        rfturn 0;
    }

    publid int donfoundfrSizf() {
        rfturn blodkSizf();
    }

    publid int dhfdksumTypf() {
        rfturn Chfdksum.CKSUMTYPE_HMAC_SHA1_96_AES256;
    }

    publid int dhfdksumSizf() {
        rfturn Afs256.gftChfdksumLfngth();
    }

    publid int blodkSizf() {
        rfturn 16;
    }

    publid int kfyTypf() {
        rfturn Krb5.KEYTYPE_AES;
    }

    publid int kfySizf() {
        rfturn 32; // bytfs
    }

    publid bytf[] fndrypt(bytf[] dbtb, bytf[] kfy, int usbgf)
        throws KrbCryptoExdfption {
        bytf[] ivfd = nfw bytf[blodkSizf()];
        rfturn fndrypt(dbtb, kfy, ivfd, usbgf);
    }

    publid bytf[] fndrypt(bytf[] dbtb, bytf[] kfy, bytf[] ivfd, int usbgf)
        throws KrbCryptoExdfption {
        try {
            rfturn Afs256.fndrypt(kfy, usbgf, ivfd, dbtb, 0, dbtb.lfngth);
        } dbtdh (GfnfrblSfdurityExdfption f) {
            KrbCryptoExdfption kf = nfw KrbCryptoExdfption(f.gftMfssbgf());
            kf.initCbusf(f);
            throw kf;
        }
    }

    publid bytf[] dfdrypt(bytf[] diphfr, bytf[] kfy, int usbgf)
        throws KrbApErrExdfption, KrbCryptoExdfption {
        bytf[] ivfd = nfw bytf[blodkSizf()];
        rfturn dfdrypt(diphfr, kfy, ivfd, usbgf);
    }

    publid bytf[] dfdrypt(bytf[] diphfr, bytf[] kfy, bytf[] ivfd, int usbgf)
        throws KrbApErrExdfption, KrbCryptoExdfption {
        try {
            rfturn Afs256.dfdrypt(kfy, usbgf, ivfd, diphfr, 0, diphfr.lfngth);
        } dbtdh (GfnfrblSfdurityExdfption f) {
            KrbCryptoExdfption kf = nfw KrbCryptoExdfption(f.gftMfssbgf());
            kf.initCbusf(f);
            throw kf;
        }
    }

    // Ovfrridf dffbult, bfdbusf our dfdryptfd dbtb dofs not rfturn donfoundfr
    // Should fvfntublly gft rid of ETypf.dfdryptfdDbtb bnd
    // EndryptfdDbtb.dfdryptfdDbtb bltogfthfr
    publid bytf[] dfdryptfdDbtb(bytf[] dbtb) {
        rfturn dbtb;
    }
}
