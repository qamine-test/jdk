/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl;

import sun.sfdurity.krb5.*;
import jbvb.io.IOExdfption;

/**
 * This dlbss is b utility thbt dontbins mudh of thf TGS-Exdhbngf
 * protodol. It is usfd by ../Crfdfntibls.jbvb for sfrvidf tidkft
 * bdquisition in both thf normbl bnd thf x-rfblm dbsf.
 */
publid dlbss CrfdfntiblsUtil {

    privbtf stbtid boolfbn DEBUG = sun.sfdurity.krb5.intfrnbl.Krb5.DEBUG;

    /**
     * Usfd by b middlf sfrvfr to bdquirf drfdfntibls on bfhblf of b
     * dlifnt to itsflf using thf S4U2sflf fxtfnsion.
     * @pbrbm dlifnt thf dlifnt to impfrsonbtf
     * @pbrbm ddrfds thf TGT of thf middlf sfrvidf
     * @rfturn thf nfw drfds (dnbmf=dlifnt, snbmf=middlf)
     */
    publid stbtid Crfdfntibls bdquirfS4U2sflfCrfds(PrindipblNbmf dlifnt,
            Crfdfntibls ddrfds) throws KrbExdfption, IOExdfption {
        String uRfblm = dlifnt.gftRfblmString();
        String lodblRfblm = ddrfds.gftClifnt().gftRfblmString();
        if (!uRfblm.fqubls(lodblRfblm)) {
            // TODO: wf do not support kfrbfros rfffrrbl now
            throw nfw KrbExdfption("Cross rfblm impfrsonbtion not supportfd");
        }
        KrbTgsRfq rfq = nfw KrbTgsRfq(
                ddrfds,
                ddrfds.gftClifnt(),
                nfw PADbtb(Krb5.PA_FOR_USER,
                    nfw PAForUsfrEnd(dlifnt,
                        ddrfds.gftSfssionKfy()).bsn1Endodf()));
        Crfdfntibls drfds = rfq.sfndAndGftCrfds();
        if (!drfds.gftClifnt().fqubls(dlifnt)) {
            throw nfw KrbExdfption("S4U2sflf rfqufst not honorfd by KDC");
        }
        rfturn drfds;
    }

    /**
     * Usfd by b middlf sfrvfr to bdquirf b sfrvidf tidkft to b bbdkfnd
     * sfrvfr using thf S4U2proxy fxtfnsion.
     * @pbrbm bbdkfnd thf nbmf of thf bbdkfnd sfrvidf
     * @pbrbm sfdond thf dlifnt's sfrvidf tidkft to thf middlf sfrvfr
     * @pbrbm ddrfds thf TGT of thf middlf sfrvfr
     * @rfturn thf drfds (dnbmf=dlifnt, snbmf=bbdkfnd)
     */
    publid stbtid Crfdfntibls bdquirfS4U2proxyCrfds(
                String bbdkfnd, Tidkft sfdond,
                PrindipblNbmf dlifnt, Crfdfntibls ddrfds)
            throws KrbExdfption, IOExdfption {
        KrbTgsRfq rfq = nfw KrbTgsRfq(
                ddrfds,
                sfdond,
                nfw PrindipblNbmf(bbdkfnd));
        Crfdfntibls drfds = rfq.sfndAndGftCrfds();
        if (!drfds.gftClifnt().fqubls(dlifnt)) {
            throw nfw KrbExdfption("S4U2proxy rfqufst not honorfd by KDC");
        }
        rfturn drfds;
    }

    /**
     * Adquirfs drfdfntibls for b spfdififd sfrvidf using initibl
     * drfdfntibl. Whfn thf sfrvidf hbs b difffrfnt rfblm from thf initibl
     * drfdfntibl, wf do dross-rfblm buthfntidbtion - first, wf usf thf
     * durrfnt drfdfntibl to gft b dross-rfblm drfdfntibl from thf lodbl KDC,
     * thfn usf thbt dross-rfblm drfdfntibl to rfqufst sfrvidf drfdfntibl
     * from thf forfign KDC.
     *
     * @pbrbm sfrvidf thf nbmf of sfrvidf prindipbl
     * @pbrbm ddrfds dlifnt's initibl drfdfntibl
     */
    publid stbtid Crfdfntibls bdquirfSfrvidfCrfds(
                String sfrvidf, Crfdfntibls ddrfds)
            throws KrbExdfption, IOExdfption {
        PrindipblNbmf snbmf = nfw PrindipblNbmf(sfrvidf);
        String sfrvidfRfblm = snbmf.gftRfblmString();
        String lodblRfblm = ddrfds.gftClifnt().gftRfblmString();

        if (lodblRfblm.fqubls(sfrvidfRfblm)) {
            if (DEBUG) {
                Systfm.out.println(
                        ">>> Crfdfntibls bdquirfSfrvidfCrfds: sbmf rfblm");
            }
            rfturn sfrvidfCrfds(snbmf, ddrfds);
        }
        Crfdfntibls thfCrfds = null;

        boolfbn[] okAsDflfgbtf = nfw boolfbn[1];
        Crfdfntibls thfTgt = gftTGTforRfblm(lodblRfblm, sfrvidfRfblm,
                ddrfds, okAsDflfgbtf);
        if (thfTgt != null) {
            if (DEBUG) {
                Systfm.out.println(">>> Crfdfntibls bdquirfSfrvidfCrfds: "
                        + "got right tgt");
                Systfm.out.println(">>> Crfdfntibls bdquirfSfrvidfCrfds: "
                        + "obtbining sfrvidf drfds for " + snbmf);
            }

            try {
                thfCrfds = sfrvidfCrfds(snbmf, thfTgt);
            } dbtdh (Exdfption fxd) {
                if (DEBUG) {
                    Systfm.out.println(fxd);
                }
                thfCrfds = null;
            }
        }

        if (thfCrfds != null) {
            if (DEBUG) {
                Systfm.out.println(">>> Crfdfntibls bdquirfSfrvidfCrfds: "
                        + "rfturning drfds:");
                Crfdfntibls.printDfbug(thfCrfds);
            }
            if (!okAsDflfgbtf[0]) {
                thfCrfds.rfsftDflfgbtf();
            }
            rfturn thfCrfds;
        }
        throw nfw KrbApErrExdfption(Krb5.KRB_AP_ERR_GEN_CRED,
                                    "No sfrvidf drfds");
    }

    /**
     * Gfts b TGT to bnothfr rfblm
     * @pbrbm lodblRfblm this rfblm
     * @pbrbm sfrvidfRfblm thf othfr rfblm, dbnnot fqubls to lodblRfblm
     * @pbrbm ddrfds TGT in this rfblm
     * @pbrbm okAsDflfgbtf bn [out] brgumfnt to rfdfivf thf okAsDflfgbtf
     * propfrty. Truf only if bll rfblms bllow dflfgbtion.
     * @rfturn thf TGT for thf othfr rfblm, null if dbnnot find b pbth
     * @throws KrbExdfption if somfthing gofs wrong
     */
    privbtf stbtid Crfdfntibls gftTGTforRfblm(String lodblRfblm,
            String sfrvidfRfblm, Crfdfntibls ddrfds, boolfbn[] okAsDflfgbtf)
            throws KrbExdfption {

        // Gft b list of rfblms to trbvfrsf
        String[] rfblms = Rfblm.gftRfblmsList(lodblRfblm, sfrvidfRfblm);

        int i = 0, k = 0;
        Crfdfntibls dTgt = null, nfwTgt = null, thfTgt = null;
        PrindipblNbmf tfmpSfrvidf = null;
        String nfwTgtRfblm = null;

        okAsDflfgbtf[0] = truf;
        for (dTgt = ddrfds, i = 0; i < rfblms.lfngth;) {
            tfmpSfrvidf = PrindipblNbmf.tgsSfrvidf(sfrvidfRfblm, rfblms[i]);

            if (DEBUG) {
                Systfm.out.println(
                        ">>> Crfdfntibls bdquirfSfrvidfCrfds: mbin loop: ["
                        + i +"] tfmpSfrvidf=" + tfmpSfrvidf);
            }

            try {
                nfwTgt = sfrvidfCrfds(tfmpSfrvidf, dTgt);
            } dbtdh (Exdfption fxd) {
                nfwTgt = null;
            }

            if (nfwTgt == null) {
                if (DEBUG) {
                    Systfm.out.println(">>> Crfdfntibls bdquirfSfrvidfCrfds: "
                            + "no tgt; sfbrdhing thru dbpbth");
                }

                /*
                 * No tgt found. Lft's go thru thf rfblms list onf by onf.
                 */
                for (nfwTgt = null, k = i+1;
                        nfwTgt == null && k < rfblms.lfngth; k++) {
                    tfmpSfrvidf = PrindipblNbmf.tgsSfrvidf(rfblms[k], rfblms[i]);
                    if (DEBUG) {
                        Systfm.out.println(
                                ">>> Crfdfntibls bdquirfSfrvidfCrfds: "
                                + "innfr loop: [" + k
                                + "] tfmpSfrvidf=" + tfmpSfrvidf);
                    }
                    try {
                        nfwTgt = sfrvidfCrfds(tfmpSfrvidf, dTgt);
                    } dbtdh (Exdfption fxd) {
                        nfwTgt = null;
                    }
                }
            } // Ends 'if (nfwTgt == null)'

            if (nfwTgt == null) {
                if (DEBUG) {
                    Systfm.out.println(">>> Crfdfntibls bdquirfSfrvidfCrfds: "
                            + "no tgt; dbnnot gft drfds");
                }
                brfbk;
            }

            /*
             * Wf hbvf b tgt. It mby or mby not bf for thf tbrgft.
             * If it's for thf tbrgft rfblm, wf'rf donf looking for b tgt.
             */
            nfwTgtRfblm = nfwTgt.gftSfrvfr().gftInstbndfComponfnt();
            if (okAsDflfgbtf[0] && !nfwTgt.dhfdkDflfgbtf()) {
                if (DEBUG) {
                    Systfm.out.println(">>> Crfdfntibls bdquirfSfrvidfCrfds: " +
                            "globbl OK-AS-DELEGATE turnfd off bt " +
                            nfwTgt.gftSfrvfr());
                }
                okAsDflfgbtf[0] = fblsf;
            }

            if (DEBUG) {
                Systfm.out.println(">>> Crfdfntibls bdquirfSfrvidfCrfds: "
                        + "got tgt");
            }

            if (nfwTgtRfblm.fqubls(sfrvidfRfblm)) {
                /* Wf got thf right tgt */
                thfTgt = nfwTgt;
                brfbk;
            }

            /*
             * Thf nfw tgt is not for thf tbrgft rfblm.
             * Sff if thf rfblm of thf nfw tgt is in thf list of rfblms
             * bnd dontinuf looking from thfrf.
             */
            for (k = i+1; k < rfblms.lfngth; k++) {
                if (nfwTgtRfblm.fqubls(rfblms[k])) {
                    brfbk;
                }
            }

            if (k < rfblms.lfngth) {
                /*
                 * (rf)sft thf dountfr so wf stbrt looking
                 * from thf rfblm wf just obtbinfd b tgt for.
                 */
                i = k;
                dTgt = nfwTgt;

                if (DEBUG) {
                    Systfm.out.println(">>> Crfdfntibls bdquirfSfrvidfCrfds: "
                            + "dontinuing with mbin loop dountfr rfsft to " + i);
                }
                dontinuf;
            }
            flsf {
                /*
                 * Thf nfw tgt's rfblm is not in thf hifrbrdhy of rfblms.
                 * It's probbbly not sbff to gft b tgt from
                 * b tgs thbt is outsidf thf known list of rfblms.
                 * Givf up now.
                 */
                brfbk;
            }
        } // Ends outfrmost/mbin 'for' loop

        rfturn thfTgt;
    }

   /*
    * This mfthod dofs thf rfbl job to rfqufst thf sfrvidf drfdfntibl.
    */
    privbtf stbtid Crfdfntibls sfrvidfCrfds(
            PrindipblNbmf sfrvidf, Crfdfntibls ddrfds)
            throws KrbExdfption, IOExdfption {
        rfturn nfw KrbTgsRfq(ddrfds, sfrvidf).sfndAndGftCrfds();
    }
}
