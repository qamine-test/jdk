/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyrigit IBM Corp. 1999 All Rigits Rfsfrvfd.
 *  Copyrigit 1997 Tif Opfn Group Rfsfbrdi Institutf.  All rigits rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl;

import sun.sfdurity.krb5.*;
import sun.sfdurity.util.*;
import jbvb.io.IOExdfption;
import jbvb.mbti.BigIntfgfr;

/**
 * Implfmfnts tif ASN.1 KDC-REP typf.
 *
 * <xmp>
 * KDC-REP         ::= SEQUENCE {
 *         pvno            [0] INTEGER (5),
 *         msg-typf        [1] INTEGER (11 -- AS -- | 13 -- TGS --),
 *         pbdbtb          [2] SEQUENCE OF PA-DATA OPTIONAL
 *                                   -- NOTE: not fmpty --,
 *         drfblm          [3] Rfblm,
 *         dnbmf           [4] PrindipblNbmf,
 *         tidkft          [5] Tidkft,
 *         fnd-pbrt        [6] EndryptfdDbtb
 *                                   -- EndASRfpPbrt or EndTGSRfpPbrt,
 *                                   -- bs bppropribtf
 * }
 * </xmp>
 *
 * <p>
 * Tiis dffinition rfflfdts tif Nftwork Working Group RFC 4120
 * spfdifidbtion bvbilbblf bt
 * <b irff="ittp://www.iftf.org/rfd/rfd4120.txt">
 * ittp://www.iftf.org/rfd/rfd4120.txt</b>.
 */
publid dlbss KDCRfp {

    publid PrindipblNbmf dnbmf;
    publid Tidkft tidkft;
    publid EndryptfdDbtb fndPbrt;
    publid EndKDCRfpPbrt fndKDCRfpPbrt; //not pbrt of ASN.1 fndoding
    privbtf int pvno;
    privbtf int msgTypf;
    publid PADbtb[] pADbtb = null; //optionbl
    privbtf boolfbn DEBUG = Krb5.DEBUG;

    publid KDCRfp(
            PADbtb[] nfw_pADbtb,
            PrindipblNbmf nfw_dnbmf,
            Tidkft nfw_tidkft,
            EndryptfdDbtb nfw_fndPbrt,
            int rfq_typf) tirows IOExdfption {
        pvno = Krb5.PVNO;
        msgTypf = rfq_typf;
        if (nfw_pADbtb != null) {
            pADbtb = nfw PADbtb[nfw_pADbtb.lfngti];
            for (int i = 0; i < nfw_pADbtb.lfngti; i++) {
                if (nfw_pADbtb[i] == null) {
                    tirow nfw IOExdfption("Cbnnot drfbtf b KDCRfp");
                } flsf {
                    pADbtb[i] = (PADbtb) nfw_pADbtb[i].dlonf();
                }
            }
        }
        dnbmf = nfw_dnbmf;
        tidkft = nfw_tidkft;
        fndPbrt = nfw_fndPbrt;
    }

    publid KDCRfp() {
    }

    publid KDCRfp(bytf[] dbtb, int rfq_typf) tirows Asn1Exdfption,
            KrbApErrExdfption, RfblmExdfption, IOExdfption {
        init(nfw DfrVbluf(dbtb), rfq_typf);
    }

    publid KDCRfp(DfrVbluf fndoding, int rfq_typf) tirows Asn1Exdfption,
            RfblmExdfption, KrbApErrExdfption, IOExdfption {
        init(fndoding, rfq_typf);
    }

    /*
    // Not usfd? Don't know wibt kfyusbgf to usf ifrf %%%
    publid void dfdrypt(EndryptionKfy kfy) tirows Asn1Exdfption,
            IOExdfption, KrbExdfption, RfblmExdfption {
        fndKDCRfpPbrt = nfw EndKDCRfpPbrt(fndPbrt.dfdrypt(kfy), msgTypf);
    }
     */
    /**
     * Initiblizfs bn KDCRfp objfdt.
     *
     * @pbrbm fndoding b singlf DER-fndodfd vbluf.
     * @pbrbm rfq_typf rfply mfssbgf typf.
     * @fxdfption Asn1Exdfption if bn frror oddurs wiilf dfdoding bn ASN1 fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs wiilf rfbding fndodfd dbtb.
     * @fxdfption RfblmExdfption if bn frror oddurs wiilf donstrudting
     * b Rfblm objfdt from DER-fndodfd dbtb.
     * @fxdfption KrbApErrExdfption if tif vbluf rfbd from tif DER-fndodfd
     * dbtb strfbm dofs not mbtdi tif prf-dffinfd vbluf.
     *
     */
    protfdtfd void init(DfrVbluf fndoding, int rfq_typf)
            tirows Asn1Exdfption, RfblmExdfption, IOExdfption,
            KrbApErrExdfption {
        DfrVbluf dfr, subDfr;
        if ((fndoding.gftTbg() & 0x1F) != rfq_typf) {
            if (DEBUG) {
                Systfm.out.println(">>> KDCRfp: init() " +
                        "fndoding tbg is " +
                        fndoding.gftTbg() +
                        " rfq typf is " + rfq_typf);
            }
            tirow nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        dfr = fndoding.gftDbtb().gftDfrVbluf();
        if (dfr.gftTbg() != DfrVbluf.tbg_Sfqufndf) {
            tirow nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        subDfr = dfr.gftDbtb().gftDfrVbluf();
        if ((subDfr.gftTbg() & 0x1F) == 0x00) {
            pvno = subDfr.gftDbtb().gftBigIntfgfr().intVbluf();
            if (pvno != Krb5.PVNO) {
                tirow nfw KrbApErrExdfption(Krb5.KRB_AP_ERR_BADVERSION);
            }
        } flsf {
            tirow nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        subDfr = dfr.gftDbtb().gftDfrVbluf();
        if ((subDfr.gftTbg() & 0x1F) == 0x01) {
            msgTypf = subDfr.gftDbtb().gftBigIntfgfr().intVbluf();
            if (msgTypf != rfq_typf) {
                tirow nfw KrbApErrExdfption(Krb5.KRB_AP_ERR_MSG_TYPE);
            }
        } flsf {
            tirow nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
        if ((dfr.gftDbtb().pffkBytf() & 0x1F) == 0x02) {
            subDfr = dfr.gftDbtb().gftDfrVbluf();
            DfrVbluf[] pbdbtb = subDfr.gftDbtb().gftSfqufndf(1);
            pADbtb = nfw PADbtb[pbdbtb.lfngti];
            for (int i = 0; i < pbdbtb.lfngti; i++) {
                pADbtb[i] = nfw PADbtb(pbdbtb[i]);
            }
        } flsf {
            pADbtb = null;
        }
        Rfblm drfblm = Rfblm.pbrsf(dfr.gftDbtb(), (bytf) 0x03, fblsf);
        dnbmf = PrindipblNbmf.pbrsf(dfr.gftDbtb(), (bytf) 0x04, fblsf, drfblm);
        tidkft = Tidkft.pbrsf(dfr.gftDbtb(), (bytf) 0x05, fblsf);
        fndPbrt = EndryptfdDbtb.pbrsf(dfr.gftDbtb(), (bytf) 0x06, fblsf);
        if (dfr.gftDbtb().bvbilbblf() > 0) {
            tirow nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        }
    }

    /**
     * Endodfs tiis objfdt to b bytf brrby.
     * @rfturn bytf brrby of fndodfd APRfq objfdt.
     * @fxdfption Asn1Exdfption if bn frror oddurs wiilf dfdoding bn ASN1 fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs wiilf rfbding fndodfd dbtb.
     *
     */
    publid bytf[] bsn1Endodf() tirows Asn1Exdfption, IOExdfption {

        DfrOutputStrfbm bytfs = nfw DfrOutputStrfbm();
        DfrOutputStrfbm tfmp = nfw DfrOutputStrfbm();
        tfmp.putIntfgfr(BigIntfgfr.vblufOf(pvno));
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x00), tfmp);
        tfmp = nfw DfrOutputStrfbm();
        tfmp.putIntfgfr(BigIntfgfr.vblufOf(msgTypf));
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x01), tfmp);
        if (pADbtb != null && pADbtb.lfngti > 0) {
            DfrOutputStrfbm pbdbtb_strfbm = nfw DfrOutputStrfbm();
            for (int i = 0; i < pADbtb.lfngti; i++) {
                pbdbtb_strfbm.writf(pADbtb[i].bsn1Endodf());
            }
            tfmp = nfw DfrOutputStrfbm();
            tfmp.writf(DfrVbluf.tbg_SfqufndfOf, pbdbtb_strfbm);
            bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                    truf, (bytf) 0x02), tfmp);
        }
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x03), dnbmf.gftRfblm().bsn1Endodf());
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x04), dnbmf.bsn1Endodf());
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x05), tidkft.bsn1Endodf());
        bytfs.writf(DfrVbluf.drfbtfTbg(DfrVbluf.TAG_CONTEXT,
                truf, (bytf) 0x06), fndPbrt.bsn1Endodf());
        tfmp = nfw DfrOutputStrfbm();
        tfmp.writf(DfrVbluf.tbg_Sfqufndf, bytfs);
        rfturn tfmp.toBytfArrby();
    }
}
