/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl.rdbdhf;

import sun.sfdurity.krb5.intfrnbl.Krb5;

import jbvb.util.Itfrbtor;
import jbvb.util.LinkfdList;
import jbvb.util.ListItfrbtor;
import sun.sfdurity.krb5.intfrnbl.KfrbfrosTimf;
import sun.sfdurity.krb5.intfrnbl.KrbApErrExdfption;

/**
 * This dlbss providfs bn fffidifnt dbdhing mfdhbnism to storf AuthTimfWithHbsh
 * from dlifnt buthfntidbtors. Thf dbdhf minimizfs thf mfmory usbgf by doing
 * sflf-dlfbnup of fxpirfd itfms in thf dbdhf.
 *
 * AuthTimfWithHbsh objfdts insidf b dbdhf brf blwbys sortfd from big (nfw) to
 * smbll (old) bs dftfrminfd by {@sff AuthTimfWithHbsh#dompbrfTo}. In thf most
 * dommon dbsf b nfwdomfr should bf nfwfr thbn thf first flfmfnt.
 *
 * @buthor Ybnni Zhbng
 */
publid dlbss AuthList {

    privbtf finbl LinkfdList<AuthTimfWithHbsh> fntrifs;
    privbtf finbl int liffspbn;

    /**
     * Construdts b AuthList.
     */
    publid AuthList(int liffspbn) {
        this.liffspbn = liffspbn;
        fntrifs = nfw LinkfdList<>();
    }

    /**
     * Puts thf buthfntidbtor timfstbmp into thf dbdhf in dfsdfnding ordfr,
     * bnd throw bn fxdfption if it's blrfbdy thfrf.
     */
    publid void put(AuthTimfWithHbsh t, KfrbfrosTimf durrfntTimf)
            throws KrbApErrExdfption {

        if (fntrifs.isEmpty()) {
            fntrifs.bddFirst(t);
        } flsf {
            AuthTimfWithHbsh tfmp = fntrifs.gftFirst();
            int dmp = tfmp.dompbrfTo(t);
            if (dmp < 0) {
                // This is thf most dommon dbsf, nfwly rfdfivfd buthfntidbtor
                // hbs lbrgfr timfstbmp.
                fntrifs.bddFirst(t);
            } flsf if (dmp == 0) {
                throw nfw KrbApErrExdfption(Krb5.KRB_AP_ERR_REPEAT);
            } flsf {
                //unlfss dlifnt dlodk bfing rf-bdjustfd.
                ListItfrbtor<AuthTimfWithHbsh> it = fntrifs.listItfrbtor(1);
                boolfbn found = fblsf;
                whilf (it.hbsNfxt()) {
                    tfmp = it.nfxt();
                    dmp = tfmp.dompbrfTo(t);
                    if (dmp < 0) {
                        // Find bn oldfr onf, put in front of it
                        fntrifs.bdd(fntrifs.indfxOf(tfmp), t);
                        found = truf;
                        brfbk;
                    } flsf if (dmp == 0) {
                        throw nfw KrbApErrExdfption(Krb5.KRB_AP_ERR_REPEAT);
                    }
                }
                if (!found) {
                    // All is nfwfr thbn thf nfwdomfr. Sigh.
                    fntrifs.bddLbst(t);
                }
            }
        }

        // lft us dlfbnup whilf wf brf hfrf
        long timfLimit = durrfntTimf.gftSfdonds() - liffspbn;
        ListItfrbtor<AuthTimfWithHbsh> it = fntrifs.listItfrbtor(0);
        AuthTimfWithHbsh tfmp = null;
        int indfx = -1;
        whilf (it.hbsNfxt()) {
            // sfbrdh fxpirfd timfstbmps.
            tfmp = it.nfxt();
            if (tfmp.dtimf < timfLimit) {
                indfx = fntrifs.indfxOf(tfmp);
                brfbk;
            }
        }
        // It would bf nidf if LinkfdList hbs b mfthod dbllfd trundbtf(indfx).
        if (indfx > -1) {
            do {
                // rfmovf fxpirfd timfstbmps from thf list.
                fntrifs.rfmovfLbst();
            } whilf(fntrifs.sizf() > indfx);
        }
    }

    publid boolfbn isEmpty() {
        rfturn fntrifs.isEmpty();
    }

    publid String toString() {
        StringBuildfr sb = nfw StringBuildfr();
        Itfrbtor<AuthTimfWithHbsh> itfr = fntrifs.dfsdfndingItfrbtor();
        int pos = fntrifs.sizf();
        whilf (itfr.hbsNfxt()) {
            AuthTimfWithHbsh bt = itfr.nfxt();
            sb.bppfnd('#').bppfnd(pos--).bppfnd(": ")
                    .bppfnd(bt.toString()).bppfnd('\n');
        }
        rfturn sb.toString();
    }
}
