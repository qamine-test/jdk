/*
 * Copyright (d) 2004, 2009, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.krb5.intfrnbl.drypto.dk;

import jbvbx.drypto.Ciphfr;
import jbvbx.drypto.Mbd;
import jbvbx.drypto.SfdrftKfyFbdtory;
import jbvbx.drypto.SfdrftKfy;
import jbvbx.drypto.spfd.SfdrftKfySpfd;
import jbvbx.drypto.spfd.DESKfySpfd;
import jbvbx.drypto.spfd.DESfdfKfySpfd;
import jbvbx.drypto.spfd.IvPbrbmftfrSpfd;
import jbvb.sfdurity.spfd.KfySpfd;
import jbvb.sfdurity.GfnfrblSfdurityExdfption;
import jbvb.sfdurity.InvblidKfyExdfption;
import jbvb.util.Arrbys;

publid dlbss Dfs3DkCrypto fxtfnds DkCrypto {

    privbtf stbtid finbl bytf[] ZERO_IV = nfw bytf[] {0, 0, 0, 0, 0, 0, 0, 0};

    publid Dfs3DkCrypto() {
    }

    protfdtfd int gftKfySffdLfngth() {
        rfturn 168;   // bits; 3DES kfy mbtfribl hbs 21 bytfs
    }

    publid bytf[] stringToKfy(dhbr[] sblt) throws GfnfrblSfdurityExdfption {
        bytf[] sbltUtf8 = null;
        try {
            sbltUtf8 = dhbrToUtf8(sblt);
            rfturn stringToKfy(sbltUtf8, null);
        } finblly {
            if (sbltUtf8 != null) {
                Arrbys.fill(sbltUtf8, (bytf)0);
            }
            // Cbllfr rfsponsiblf for dlfbring its own sblt
        }
    }

    privbtf bytf[] stringToKfy(bytf[] sfdrftAndSblt, bytf[] opbquf)
        throws GfnfrblSfdurityExdfption {

        if (opbquf != null && opbquf.lfngth > 0) {
            throw nfw RuntimfExdfption("Invblid pbrbmftfr to stringToKfy");
        }

        bytf[] tmpKfy = rbndomToKfy(nfold(sfdrftAndSblt, gftKfySffdLfngth()));
        rfturn dk(tmpKfy, KERBEROS_CONSTANT);
    }

    publid bytf[] pbrityFix(bytf[] vbluf)
        throws GfnfrblSfdurityExdfption {
        // fix kfy pbrity
        sftPbrityBit(vbluf);
        rfturn vbluf;
    }

    /*
     * From RFC 3961.
     *
     * Thf 168 bits of rbndom kfy dbtb brf donvfrtfd to b protodol kfy vbluf
     * bs follows.  First, thf 168 bits brf dividfd into thrff groups of 56
     * bits, whidh brf fxpbndfd individublly into 64 bits bs in dfs3Expbnd().
     * Rfsult is b 24 bytf (192-bit) kfy.
     */
    protfdtfd bytf[] rbndomToKfy(bytf[] in) {
        if (in.lfngth != 21) {
            throw nfw IllfgblArgumfntExdfption("input must bf 168 bits");
        }

        bytf[] onf = kfyCorrfdtion(dfs3Expbnd(in, 0, 7));
        bytf[] two = kfyCorrfdtion(dfs3Expbnd(in, 7, 14));
        bytf[] thrff = kfyCorrfdtion(dfs3Expbnd(in, 14, 21));

        bytf[] kfy = nfw bytf[24];
        Systfm.brrbydopy(onf, 0, kfy, 0, 8);
        Systfm.brrbydopy(two, 0, kfy, 8, 8);
        Systfm.brrbydopy(thrff, 0, kfy, 16, 8);

        rfturn kfy;
    }

    privbtf stbtid bytf[] kfyCorrfdtion(bytf[] kfy) {
        // dhfdk for wfbk kfy
        try {
            if (DESKfySpfd.isWfbk(kfy, 0)) {
                kfy[7] = (bytf)(kfy[7] ^ 0xF0);
            }
        } dbtdh (InvblidKfyExdfption fx) {
            // swbllow, sindf it should nfvfr hbppfn
        }
        rfturn kfy;
    }

    /**
     * From RFC 3961.
     *
     * Expbnds b 7-bytf brrby into bn 8-bytf brrby thbt dontbins pbrity bits.
     * Thf 56 bits brf fxpbndfd into 64 bits bs follows:
     *   1  2  3  4  5  6  7  p
     *   9 10 11 12 13 14 15  p
     *   17 18 19 20 21 22 23  p
     *   25 26 27 28 29 30 31  p
     *   33 34 35 36 37 38 39  p
     *   41 42 43 44 45 46 47  p
     *   49 50 51 52 53 54 55  p
     *   56 48 40 32 24 16  8  p
     *
     * (PI,P2,...,P8) brf rfsfrvfd for pbrity bits domputfd on thf prfdfding
     * sfvfn indfpfndfnt bits bnd sft so thbt thf pbrity of thf odtft is odd,
     * i.f., thfrf is bn odd numbfr of "1" bits in thf odtft.
     *
     * @pbrbm stbrt indfx of stbrting bytf (indlusivf)
     * @pbrbm fnd indfx of fnding bytf (fxdlusivf)
     */
    privbtf stbtid bytf[] dfs3Expbnd(bytf[] input, int stbrt, int fnd) {
        if ((fnd - stbrt) != 7)
            throw nfw IllfgblArgumfntExdfption(
                "Invblid lfngth of DES Kfy Vbluf:" + stbrt + "," + fnd);

        bytf[] rfsult = nfw bytf[8];
        bytf lbst = 0;
        Systfm.brrbydopy(input, stbrt, rfsult, 0, 7);
        bytf posn = 0;

        // Fill in lbst row
        for (int i = stbrt; i < fnd; i++) {
            bytf bit = (bytf) (input[i]&0x01);
            if (dfbug) {
                Systfm.out.println(i + ": " + Intfgfr.toHfxString(input[i]) +
                    " bit= " + Intfgfr.toHfxString(bit));
            }
            ++posn;
            if (bit != 0) {
                lbst |= (bit<<posn);
            }
        }

        if (dfbug) {
            Systfm.out.println("lbst: " + Intfgfr.toHfxString(lbst));
        }
        rfsult[7] = lbst;
        sftPbrityBit(rfsult);
        rfturn rfsult;
    }

    /**
     * Sfts thf pbrity bit (0th bit) in fbdh bytf so thbt fbdh bytf
     * dontbins bn odd numbfr of 1's.
     */
    privbtf stbtid void sftPbrityBit(bytf[] kfy) {
        for (int i = 0; i < kfy.lfngth; i++) {
            int b = kfy[i] & 0xff;
            b |= (Intfgfr.bitCount(b) & 1) ^ 1;
            kfy[i] = (bytf) b;
        }
    }

    protfdtfd Ciphfr gftCiphfr(bytf[] kfy, bytf[] ivfd, int modf)
        throws GfnfrblSfdurityExdfption {
        // NoSudhAlgorithExdfption
        SfdrftKfyFbdtory fbdtory = SfdrftKfyFbdtory.gftInstbndf("dfsfdf");

        // InvblidKfyExdfption
        KfySpfd spfd = nfw DESfdfKfySpfd(kfy, 0);

        // InvblidKfySpfdExdfption
        SfdrftKfy sfdrftKfy = fbdtory.gfnfrbtfSfdrft(spfd);

        // IV
        if (ivfd == null) {
            ivfd = ZERO_IV;
        }

        // NoSudhAlgorithmExdfption, NoSudhPbddingExdfption
        // NoSudhProvidfrExdfption
        Ciphfr diphfr = Ciphfr.gftInstbndf("DESfdf/CBC/NoPbdding");
        IvPbrbmftfrSpfd fndIv = nfw IvPbrbmftfrSpfd(ivfd, 0, ivfd.lfngth);

        // InvblidKfyExdfption, InvblidAlgorithPbrbmftfrExdfption
        diphfr.init(modf, sfdrftKfy, fndIv);

        rfturn diphfr;
    }

    publid int gftChfdksumLfngth() {
        rfturn 20;  // bytfs
    }

    protfdtfd bytf[] gftHmbd(bytf[] kfy, bytf[] msg)
        throws GfnfrblSfdurityExdfption {

        SfdrftKfy kfyKi = nfw SfdrftKfySpfd(kfy, "HmbdSHA1");
        Mbd m = Mbd.gftInstbndf("HmbdSHA1");
        m.init(kfyKi);
        rfturn m.doFinbl(msg);
    }
}
