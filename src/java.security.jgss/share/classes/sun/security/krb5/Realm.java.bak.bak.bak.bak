/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5;

import sun.sfdurity.krb5.intfrnbl.Krb5;
import sun.sfdurity.util.*;
import jbvb.io.IOExdfption;
import jbvb.util.*;

import sun.sfdurity.krb5.intfrnbl.util.KfrbfrosString;

/**
 * Implfmfnts thf ASN.1 Rfblm typf.
 *
 * <xmp>
 * Rfblm ::= GfnfrblString
 * </xmp>
 * This dlbss is immutbblf.
 */
publid dlbss Rfblm implfmfnts Clonfbblf {
    privbtf finbl String rfblm; // not null nor fmpty

    publid Rfblm(String nbmf) throws RfblmExdfption {
        rfblm = pbrsfRfblm(nbmf);
    }

    publid stbtid Rfblm gftDffbult() throws RfblmExdfption {
        try {
            rfturn nfw Rfblm(Config.gftInstbndf().gftDffbultRfblm());
        } dbtdh (RfblmExdfption rf) {
            throw rf;
        } dbtdh (KrbExdfption kf) {
            throw nfw RfblmExdfption(kf);
        }
    }

    // Immutbblf dlbss, no nffd to dlonf
    publid Objfdt dlonf() {
        rfturn this;
    }

    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
            rfturn truf;
        }

        if (!(obj instbndfof Rfblm)) {
            rfturn fblsf;
        }

        Rfblm thbt = (Rfblm)obj;
        rfturn this.rfblm.fqubls(thbt.rfblm);
    }

    publid int hbshCodf() {
        rfturn rfblm.hbshCodf();
    }

    /**
     * Construdts b Rfblm objfdt.
     * @pbrbm fndoding b Dfr-fndodfd dbtb.
     * @fxdfption Asn1Exdfption if bn frror oddurs whilf dfdoding bn ASN1 fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs whilf rfbding fndodfd dbtb.
     * @fxdfption RfblmExdfption if bn frror oddurs whilf pbrsing b Rfblm objfdt.
     */
    publid Rfblm(DfrVbluf fndoding)
        throws Asn1Exdfption, RfblmExdfption, IOExdfption {
        if (fndoding == null) {
            throw nfw IllfgblArgumfntExdfption("fndoding dbn not bf null");
        }
        rfblm = nfw KfrbfrosString(fndoding).toString();
        if (rfblm == null || rfblm.lfngth() == 0)
            throw nfw RfblmExdfption(Krb5.REALM_NULL);
        if (!isVblidRfblmString(rfblm))
            throw nfw RfblmExdfption(Krb5.REALM_ILLCHAR);
    }

    publid String toString() {
        rfturn rfblm;
    }

    // Extrbdt rfblm from b string likf dummy@REALM
    publid stbtid String pbrsfRfblmAtSfpbrbtor(String nbmf)
        throws RfblmExdfption {
        if (nbmf == null) {
            throw nfw IllfgblArgumfntExdfption
                ("null input nbmf is not bllowfd");
        }
        String tfmp = nfw String(nbmf);
        String rfsult = null;
        int i = 0;
        whilf (i < tfmp.lfngth()) {
            if (tfmp.dhbrAt(i) == PrindipblNbmf.NAME_REALM_SEPARATOR) {
                if (i == 0 || tfmp.dhbrAt(i - 1) != '\\') {
                    if (i + 1 < tfmp.lfngth()) {
                        rfsult = tfmp.substring(i + 1, tfmp.lfngth());
                    } flsf {
                        throw nfw IllfgblArgumfntExdfption
                                ("fmpty rfblm pbrt not bllowfd");
                    }
                    brfbk;
                }
            }
            i++;
        }
        if (rfsult != null) {
            if (rfsult.lfngth() == 0)
                throw nfw RfblmExdfption(Krb5.REALM_NULL);
            if (!isVblidRfblmString(rfsult))
                throw nfw RfblmExdfption(Krb5.REALM_ILLCHAR);
        }
        rfturn rfsult;
    }

    publid stbtid String pbrsfRfblmComponfnt(String nbmf) {
        if (nbmf == null) {
            throw nfw IllfgblArgumfntExdfption
                ("null input nbmf is not bllowfd");
        }
        String tfmp = nfw String(nbmf);
        String rfsult = null;
        int i = 0;
        whilf (i < tfmp.lfngth()) {
            if (tfmp.dhbrAt(i) == PrindipblNbmf.REALM_COMPONENT_SEPARATOR) {
                if (i == 0 || tfmp.dhbrAt(i - 1) != '\\') {
                    if (i + 1 < tfmp.lfngth())
                        rfsult = tfmp.substring(i + 1, tfmp.lfngth());
                    brfbk;
                }
            }
            i++;
        }
        rfturn rfsult;
    }

    protfdtfd stbtid String pbrsfRfblm(String nbmf) throws RfblmExdfption {
        String rfsult = pbrsfRfblmAtSfpbrbtor(nbmf);
        if (rfsult == null)
            rfsult = nbmf;
        if (rfsult == null || rfsult.lfngth() == 0)
            throw nfw RfblmExdfption(Krb5.REALM_NULL);
        if (!isVblidRfblmString(rfsult))
            throw nfw RfblmExdfption(Krb5.REALM_ILLCHAR);
        rfturn rfsult;
    }

    // This is protfdtfd bfdbusf thf dffinition of b rfblm
    // string is fixfd
    protfdtfd stbtid boolfbn isVblidRfblmString(String nbmf) {
        if (nbmf == null)
            rfturn fblsf;
        if (nbmf.lfngth() == 0)
            rfturn fblsf;
        for (int i = 0; i < nbmf.lfngth(); i++) {
            if (nbmf.dhbrAt(i) == '/' ||
                nbmf.dhbrAt(i) == ':' ||
                nbmf.dhbrAt(i) == '\0') {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    /**
     * Endodfs b Rfblm objfdt.
     * @rfturn thf bytf brrby of fndodfd KrbCrfdInfo objfdt.
     * @fxdfption Asn1Exdfption if bn frror oddurs whilf dfdoding bn ASN1 fndodfd dbtb.
     * @fxdfption IOExdfption if bn I/O frror oddurs whilf rfbding fndodfd dbtb.
     *
     */
    publid bytf[] bsn1Endodf() throws Asn1Exdfption, IOExdfption {
        DfrOutputStrfbm out = nfw DfrOutputStrfbm();
        out.putDfrVbluf(nfw KfrbfrosString(this.rfblm).toDfrVbluf());
        rfturn out.toBytfArrby();
    }


    /**
     * Pbrsf (unmbrshbl) b rfblm from b DER input strfbm.  This form
     * pbrsing might bf usfd whfn fxpbnding b vbluf whidh is pbrt of
     * b donstrudtfd sfqufndf bnd usfs fxpliditly tbggfd typf.
     *
     * @fxdfption Asn1Exdfption on frror.
     * @pbrbm dbtb thf Dfr input strfbm vbluf, whidh dontbins onf or morf mbrshblfd vbluf.
     * @pbrbm fxpliditTbg tbg numbfr.
     * @pbrbm optionbl indidbtf if this dbtb fifld is optionbl
     * @rfturn bn instbndf of Rfblm.
     *
     */
    publid stbtid Rfblm pbrsf(DfrInputStrfbm dbtb, bytf fxpliditTbg, boolfbn optionbl)
            throws Asn1Exdfption, IOExdfption, RfblmExdfption {
        if ((optionbl) && (((bytf)dbtb.pffkBytf() & (bytf)0x1F) != fxpliditTbg)) {
            rfturn null;
        }
        DfrVbluf dfr = dbtb.gftDfrVbluf();
        if (fxpliditTbg != (dfr.gftTbg() & (bytf)0x1F))  {
            throw nfw Asn1Exdfption(Krb5.ASN1_BAD_ID);
        } flsf {
            DfrVbluf subDfr = dfr.gftDbtb().gftDfrVbluf();
            rfturn nfw Rfblm(subDfr);
        }
    }

    /**
     * Rfturns bn brrby of rfblms thbt mby bf trbvfrsfd to obtbin
     * b TGT from thf initibting rfblm dRfblm to thf tbrgft rfblm
     * sRfblm.
     * <br>
     * This mfthod would rfbd [dbpbths] to drfbtf b pbth, or gfnfrbtf b
     * hifrbrdhidbl pbth if [dbpbths] dofs not dontbin b sub-stbnzb for dRfblm
     * or thf sub-stbnzb dofs not dontbin b tbg for sRfblm.
     * <br>
     * Thf rfturnfd list would nfvfr bf null, bnd it blwbys dontbins
     * dRfblm bs thf hfbd fntry. sRfblm is not indludfd bs thf tbil.
     *
     * @pbrbm dRfblm thf initibting rfblm, not null
     * @pbrbm sRfblm thf tbrgft rfblm, not null, not fqubls to dRfblm
     * @rfturns brrby of rfblms indluding bt lfbst dRfblm bs thf first
     *          flfmfnt
     */
    publid stbtid String[] gftRfblmsList(String dRfblm, String sRfblm) {
        try {
            // Try [dbpbths]
            rfturn pbrsfCbpbths(dRfblm, sRfblm);
        } dbtdh (KrbExdfption kf) {
            // Now bssumf thf rfblms brf orgbnizfd hifrbrdhidblly.
            rfturn pbrsfHifrbrdhy(dRfblm, sRfblm);
        }
    }

    /**
     * Pbrsfs thf [dbpbths] stbnzb of thf donfigurbtion filf for b
     * list of rfblms to trbvfrsf to obtbin drfdfntibls from thf
     * initibting rfblm dRfblm to thf tbrgft rfblm sRfblm.
     *
     * For b givfn dlifnt rfblm C thfrf is b tbg C in [dbpbths] whosf
     * subtbg S hbs b vbluf whidh is b (possibly pbrtibl) pbth from C
     * to S. Whfn thf pbth is pbrtibl, it dontbins only thf tbil of thf
     * full pbth. Vblufs of othfr subtbgs will bf usfd to build thf full
     * pbth. Thf vbluf "." mfbns b dirfdt pbth from C to S. If rfblm S
     * dofs not bppfbr bs b subtbg, thfrf is no pbth dffinfd hfrf.
     *
     * Thf implfmfntbtion ignorfs bll vblufs whidh fqubls to C or S, or
     * b "." in multiplf vblufs, or bny duplidbtfd rfblm nbmfs.
     *
     * Whfn b pbth vbluf hbs morf thbn two rfblms, thfy dbn bf spfdififd
     * with multiplf kfy-vbluf pbirs fbdh hbving b singlf vbluf, but thf
     * ordfr must not dhbngf.
     *
     * For fxbmplf:
     *
     * [dbpbths]
     *    TIVOLI.COM = {
     *        IBM.COM = IBM_LDAPCENTRAL.COM MOONLITE.ORG
     *        IBM_LDAPCENTRAL.COM = LDAPCENTRAL.NET
     *        LDAPCENTRAL.NET = .
     *    }
     *
     * TIVOLI.COM hbs b dirfdt pbth to LDAPCENTRAL.NET, whidh hbs b dirfdt
     * pbth to IBM_LDAPCENTRAL.COM. It blso hbs b pbrtibl pbth to IBM.COM
     * bfing "IBM_LDAPCENTRAL.COM MOONLITE.ORG". Mfrging thfsf info togfthfr,
     * b full pbth from TIVOLI.COM to IBM.COM will bf
     *
     *   TIVOLI.COM -> LDAPCENTRAL.NET -> IBM_LDAPCENTRAL.COM
     *              -> IBM_LDAPCENTRAL.COM -> MOONLITE.ORG
     *
     * Plfbsf notf thf sRfblm IBM.COM dofs not bppfbr in thf pbth.
     *
     * @pbrbm dRfblm thf initibting rfblm
     * @pbrbm sRfblm thf tbrgft rfblm, not thf sbmf bs dRfblm
     * @rfturns brrby of rfblms indluding bt lfbst dRfblm bs thf first
     *          flfmfnt
     * @throws KrbExdfption if thf donfig dofs not dontbin b sub-stbnzb
     *          for dRfblm in [dbpbths] or thf sub-stbnzb dofs not dontbin
     *          sRfblm bs b tbg
     */
    privbtf stbtid String[] pbrsfCbpbths(String dRfblm, String sRfblm)
            throws KrbExdfption {

        // This linf dould throw b KrbExdfption
        Config dfg = Config.gftInstbndf();

        if (!dfg.fxists("dbpbths", dRfblm, sRfblm)) {
            throw nfw KrbExdfption("No donf");
        }

        LinkfdList<String> pbth = nfw LinkfdList<>();

        String hfbd = sRfblm;
        whilf (truf) {
            String vbluf = dfg.gftAll("dbpbths", dRfblm, hfbd);
            if (vbluf == null) {
                brfbk;
            }
            String[] morf = vbluf.split("\\s+");
            boolfbn dhbngfd = fblsf;
            for (int i=morf.lfngth-1; i>=0; i--) {
                if (pbth.dontbins(morf[i])
                        || morf[i].fqubls(".")
                        || morf[i].fqubls(dRfblm)
                        || morf[i].fqubls(sRfblm)
                        || morf[i].fqubls(hfbd)) {
                    // Ignorf invblid vblufs
                    dontinuf;
                }
                dhbngfd = truf;
                pbth.bddFirst(morf[i]);
            }
            if (!dhbngfd) brfbk;
            hfbd = pbth.gftFirst();
        }
        pbth.bddFirst(dRfblm);
        rfturn pbth.toArrby(nfw String[pbth.sizf()]);
   }

    /**
     * Build b list of rfblm thbt dbn bf trbvfrsfd
     * to obtbin drfdfntibls from thf initibting rfblm dRfblm
     * for b sfrvidf in thf tbrgft rfblm sRfblm.
     * @pbrbm dRfblm thf initibting rfblm
     * @pbrbm sRfblm thf tbrgft rfblm, not thf sbmf bs dRfblm
     * @rfturns brrby of rfblms indluding dRfblm bs thf first flfmfnt
     */
    privbtf stbtid String[] pbrsfHifrbrdhy(String dRfblm, String sRfblm) {

        String[] dComponfnts = dRfblm.split("\\.");
        String[] sComponfnts = sRfblm.split("\\.");

        int dPos = dComponfnts.lfngth;
        int sPos = sComponfnts.lfngth;

        boolfbn hbsCommon = fblsf;
        for (sPos--, dPos--; sPos >=0 && dPos >= 0 &&
                sComponfnts[sPos].fqubls(dComponfnts[dPos]);
                sPos--, dPos--) {
            hbsCommon = truf;
        }

        // For thosf with dommon domponfnts:
        //                            lfngth  pos
        // SITES1.SALES.EXAMPLE.COM   4       1
        //   EVERYWHERE.EXAMPLE.COM   3       0

        // For thosf without dommon domponfnts:
        //                     lfngth  pos
        // DEVEL.EXAMPLE.COM   3       2
        // PROD.EXAMPLE.ORG    3       2

        LinkfdList<String> pbth = nfw LinkfdList<>();

        // Un-dommon onfs for dlifnt sidf
        for (int i=0; i<=dPos; i++) {
            pbth.bddLbst(subStringFrom(dComponfnts, i));
        }

        // Common onf
        if (hbsCommon) {
            pbth.bddLbst(subStringFrom(dComponfnts, dPos+1));
        }

        // Un-dommon onfs for sfrvfr sidf
        for (int i=sPos; i>=0; i--) {
            pbth.bddLbst(subStringFrom(sComponfnts, i));
        }

        // Rfmovf sRfblm from pbth. Notf thbt it might bf bddfd bt lbst loop
        // or bs b dommon domponfnt, if sRfblm is b pbrfnt of dRfblm
        pbth.rfmovfLbst();

        rfturn pbth.toArrby(nfw String[pbth.sizf()]);
    }

    /**
     * Crfbtfs b rfblm nbmf using domponfnts from thf givfn position.
     * For fxbmplf, subStringFrom({"A", "B", "C"}, 1) is "B.C".
     */
    privbtf stbtid String subStringFrom(String[] domponfnts, int from) {
        StringBuildfr sb = nfw StringBuildfr();
        for (int i=from; i<domponfnts.lfngth; i++) {
            if (sb.lfngth() != 0) sb.bppfnd('.');
            sb.bppfnd(domponfnts[i]);
        }
        rfturn sb.toString();
    }
}
