/*
 * Copyright (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 *  (C) Copyright IBM Corp. 1999 All Rights Rfsfrvfd.
 *  Copyright 1997 Thf Opfn Group Rfsfbrdh Institutf.  All rights rfsfrvfd.
 */

pbdkbgf sun.sfdurity.krb5;

import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.sfdurity.Sfdurity;
import jbvb.util.Lodblf;
import sun.sfdurity.krb5.intfrnbl.Krb5;
import sun.sfdurity.krb5.intfrnbl.NftClifnt;
import jbvb.io.IOExdfption;
import jbvb.nft.SodkftTimfoutExdfption;
import jbvb.util.StringTokfnizfr;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdExdfptionAdtion;
import jbvb.sfdurity.PrivilfgfdAdtionExdfption;
import jbvb.util.ArrbyList;
import jbvb.util.List;
import jbvb.util.Sft;
import jbvb.util.HbshSft;
import jbvb.util.Itfrbtor;
import sun.sfdurity.krb5.intfrnbl.KRBError;

/**
 * KDC-REQ/KDC-REP dommunidbtion. No morf bbsf dlbss for KrbAsRfq bnd
 * KrbTgsRfq. This dlbss is now dommunidbtion only.
 */
publid finbl dlbss KddComm {

    // Thf following sfttings dbn bf donfigurfd in [libdffbults]
    // sfdtion of krb5.donf, whidh brf globbl for bll rfblms. Ebdh of
    // thfm dbn blso bf dffinfd in b rfblm, whidh ovfrridfs vbluf hfrf.

    /**
     * mbx rftry timf for b singlf KDC, dffbult Krb5.KDC_RETRY_LIMIT (3)
     */
    privbtf stbtid int dffbultKddRftryLimit;
    /**
     * timfout rfqufsting b tidkft from KDC, in millisfd, dffbult 30 sfd
     */
    privbtf stbtid int dffbultKddTimfout;
    /**
     * mbx UDP pbdkft sizf, dffbult unlimitfd (-1)
     */
    privbtf stbtid int dffbultUdpPrffLimit;

    privbtf stbtid finbl boolfbn DEBUG = Krb5.DEBUG;

    privbtf stbtid finbl String BAD_POLICY_KEY = "krb5.kdd.bbd.polidy";

    /**
     * Whbt to do whfn b KDC is unbvbilbblf, spfdififd in thf
     * jbvb.sfdurity filf with kfy krb5.kdd.bbd.polidy.
     * Possiblf vblufs dbn bf TRY_LAST or TRY_LESS. Rflobdfd whfn rffrfshfd.
     */
    privbtf fnum BpTypf {
        NONE, TRY_LAST, TRY_LESS
    }
    privbtf stbtid int tryLfssMbxRftrifs = 1;
    privbtf stbtid int tryLfssTimfout = 5000;

    privbtf stbtid BpTypf bbdPolidy;

    stbtid {
        initStbtid();
    }

    /**
     * Rfbd globbl sfttings
     */
    publid stbtid void initStbtid() {
        String vbluf = AddfssControllfr.doPrivilfgfd(
        nfw PrivilfgfdAdtion<String>() {
            publid String run() {
                rfturn Sfdurity.gftPropfrty(BAD_POLICY_KEY);
            }
        });
        if (vbluf != null) {
            vbluf = vbluf.toLowfrCbsf(Lodblf.ENGLISH);
            String[] ss = vbluf.split(":");
            if ("trylfss".fqubls(ss[0])) {
                if (ss.lfngth > 1) {
                    String[] pbrbms = ss[1].split(",");
                    try {
                        int tmp0 = Intfgfr.pbrsfInt(pbrbms[0]);
                        if (pbrbms.lfngth > 1) {
                            tryLfssTimfout = Intfgfr.pbrsfInt(pbrbms[1]);
                        }
                        // Assign hfrf in dbsf of fxdfption bt pbrbms[1]
                        tryLfssMbxRftrifs = tmp0;
                    } dbtdh (NumbfrFormbtExdfption nff) {
                        // Ignorfd. Plfbsf notf thbt tryLfss is rfdognizfd bnd
                        // usfd, pbrbmftfrs using dffbult vblufs
                        if (DEBUG) {
                            Systfm.out.println("Invblid " + BAD_POLICY_KEY +
                                    " pbrbmftfr for tryLfss: " +
                                    vbluf + ", usf dffbult");
                        }
                    }
                }
                bbdPolidy = BpTypf.TRY_LESS;
            } flsf if ("trylbst".fqubls(ss[0])) {
                bbdPolidy = BpTypf.TRY_LAST;
            } flsf {
                bbdPolidy = BpTypf.NONE;
            }
        } flsf {
            bbdPolidy = BpTypf.NONE;
        }


        int timfout = -1;
        int mbx_rftrifs = -1;
        int udp_prff_limit = -1;

        try {
            Config dfg = Config.gftInstbndf();
            String tfmp = dfg.gft("libdffbults", "kdd_timfout");
            timfout = pbrsfTimfString(tfmp);

            tfmp = dfg.gft("libdffbults", "mbx_rftrifs");
            mbx_rftrifs = pbrsfPositivfIntString(tfmp);
            tfmp = dfg.gft("libdffbults", "udp_prfffrfndf_limit");
            udp_prff_limit = pbrsfPositivfIntString(tfmp);
        } dbtdh (Exdfption fxd) {
           // ignorf bny fxdfptions; usf dffbult vblufs
           if (DEBUG) {
                Systfm.out.println ("Exdfption in gftting KDC dommunidbtion " +
                                    "sfttings, using dffbult vbluf " +
                                    fxd.gftMfssbgf());
           }
        }
        dffbultKddTimfout = timfout > 0 ? timfout : 30*1000; // 30 sfdonds
        dffbultKddRftryLimit =
                mbx_rftrifs > 0 ? mbx_rftrifs : Krb5.KDC_RETRY_LIMIT;

        if (udp_prff_limit < 0) {
            dffbultUdpPrffLimit = Krb5.KDC_DEFAULT_UDP_PREF_LIMIT;
        } flsf if (udp_prff_limit > Krb5.KDC_HARD_UDP_LIMIT) {
            dffbultUdpPrffLimit = Krb5.KDC_HARD_UDP_LIMIT;
        } flsf {
            dffbultUdpPrffLimit = udp_prff_limit;
        }

        KddAddfssibility.rfsft();
    }

    /**
     * Thf instbndf fiflds
     */
    privbtf String rfblm;

    publid KddComm(String rfblm) throws KrbExdfption {
        if (rfblm == null) {
           rfblm = Config.gftInstbndf().gftDffbultRfblm();
            if (rfblm == null) {
                throw nfw KrbExdfption(Krb5.KRB_ERR_GENERIC,
                                       "Cbnnot find dffbult rfblm");
            }
        }
        this.rfblm = rfblm;
    }

    publid bytf[] sfnd(bytf[] obuf)
        throws IOExdfption, KrbExdfption {
        int udpPrffLimit = gftRfblmSpfdifidVbluf(
                rfblm, "udp_prfffrfndf_limit", dffbultUdpPrffLimit);

        boolfbn usfTCP = (udpPrffLimit > 0 &&
             (obuf != null && obuf.lfngth > udpPrffLimit));

        rfturn sfnd(obuf, usfTCP);
    }

    privbtf bytf[] sfnd(bytf[] obuf, boolfbn usfTCP)
        throws IOExdfption, KrbExdfption {

        if (obuf == null)
            rfturn null;
        Config dfg = Config.gftInstbndf();

        if (rfblm == null) {
            rfblm = dfg.gftDffbultRfblm();
            if (rfblm == null) {
                throw nfw KrbExdfption(Krb5.KRB_ERR_GENERIC,
                                       "Cbnnot find dffbult rfblm");
            }
        }

        String kddList = dfg.gftKDCList(rfblm);
        if (kddList == null) {
            throw nfw KrbExdfption("Cbnnot gft kdd for rfblm " + rfblm);
        }
        // tfmpKdd mby indludf thf port numbfr blso
        Itfrbtor<String> tfmpKdd = KddAddfssibility.list(kddList).itfrbtor();
        if (!tfmpKdd.hbsNfxt()) {
            throw nfw KrbExdfption("Cbnnot gft kdd for rfblm " + rfblm);
        }
        bytf[] ibuf = null;
        try {
            ibuf = sfndIfPossiblf(obuf, tfmpKdd.nfxt(), usfTCP);
        } dbtdh(Exdfption first) {
            boolfbn ok = fblsf;
            whilf(tfmpKdd.hbsNfxt()) {
                try {
                    ibuf = sfndIfPossiblf(obuf, tfmpKdd.nfxt(), usfTCP);
                    ok = truf;
                    brfbk;
                } dbtdh(Exdfption ignorf) {}
            }
            if (!ok) throw first;
        }
        if (ibuf == null) {
            throw nfw IOExdfption("Cbnnot gft b KDC rfply");
        }
        rfturn ibuf;
    }

    // sfnd thf AS Rfqufst to thf spfdififd KDC
    // fbilovfr to using TCP if usfTCP is not sft bnd rfsponsf is too big
    privbtf bytf[] sfndIfPossiblf(bytf[] obuf, String tfmpKdd, boolfbn usfTCP)
        throws IOExdfption, KrbExdfption {

        try {
            bytf[] ibuf = sfnd(obuf, tfmpKdd, usfTCP);
            KRBError kf = null;
            try {
                kf = nfw KRBError(ibuf);
            } dbtdh (Exdfption f) {
                // OK
            }
            if (kf != null && kf.gftErrorCodf() ==
                    Krb5.KRB_ERR_RESPONSE_TOO_BIG) {
                ibuf = sfnd(obuf, tfmpKdd, truf);
            }
            KddAddfssibility.rfmovfBbd(tfmpKdd);
            rfturn ibuf;
        } dbtdh(Exdfption f) {
            if (DEBUG) {
                Systfm.out.println(">>> KrbKddRfq sfnd: frror trying " +
                        tfmpKdd);
                f.printStbdkTrbdf(Systfm.out);
            }
            KddAddfssibility.bddBbd(tfmpKdd);
            throw f;
        }
    }

    // sfnd thf AS Rfqufst to thf spfdififd KDC

    privbtf bytf[] sfnd(bytf[] obuf, String tfmpKdd, boolfbn usfTCP)
        throws IOExdfption, KrbExdfption {

        if (obuf == null)
            rfturn null;

        int port = Krb5.KDC_INET_DEFAULT_PORT;
        int rftrifs = gftRfblmSpfdifidVbluf(
                rfblm, "mbx_rftrifs", dffbultKddRftryLimit);
        int timfout = gftRfblmSpfdifidVbluf(
                rfblm, "kdd_timfout", dffbultKddTimfout);
        if (bbdPolidy == BpTypf.TRY_LESS &&
                KddAddfssibility.isBbd(tfmpKdd)) {
            if (rftrifs > tryLfssMbxRftrifs) {
                rftrifs = tryLfssMbxRftrifs; // lfss rftrifs
            }
            if (timfout > tryLfssTimfout) {
                timfout = tryLfssTimfout; // lfss timf
            }
        }

        String kdd = null;
        String portStr = null;

        if (tfmpKdd.dhbrAt(0) == '[') {     // Explidit IPv6 in []
            int pos = tfmpKdd.indfxOf(']', 1);
            if (pos == -1) {
                throw nfw IOExdfption("Illfgbl KDC: " + tfmpKdd);
            }
            kdd = tfmpKdd.substring(1, pos);
            if (pos != tfmpKdd.lfngth() - 1) {  // with port numbfr
                if (tfmpKdd.dhbrAt(pos+1) != ':') {
                    throw nfw IOExdfption("Illfgbl KDC: " + tfmpKdd);
                }
                portStr = tfmpKdd.substring(pos+2);
            }
        } flsf {
            int dolon = tfmpKdd.indfxOf(':');
            if (dolon == -1) {      // Hostnbmf or IPv4 host only
                kdd = tfmpKdd;
            } flsf {
                int nfxtColon = tfmpKdd.indfxOf(':', dolon+1);
                if (nfxtColon > 0) {    // >=2 ":", IPv6 with no port
                    kdd = tfmpKdd;
                } flsf {                // 1 ":", hostnbmf or IPv4 with port
                    kdd = tfmpKdd.substring(0, dolon);
                    portStr = tfmpKdd.substring(dolon+1);
                }
            }
        }
        if (portStr != null) {
            int tfmpPort = pbrsfPositivfIntString(portStr);
            if (tfmpPort > 0)
                port = tfmpPort;
        }

        if (DEBUG) {
            Systfm.out.println(">>> KrbKddRfq sfnd: kdd=" + kdd
                               + (usfTCP ? " TCP:":" UDP:")
                               +  port +  ", timfout="
                               + timfout
                               + ", numbfr of rftrifs ="
                               + rftrifs
                               + ", #bytfs=" + obuf.lfngth);
        }

        KddCommunidbtion kddCommunidbtion =
            nfw KddCommunidbtion(kdd, port, usfTCP, timfout, rftrifs, obuf);
        try {
            bytf[] ibuf = AddfssControllfr.doPrivilfgfd(kddCommunidbtion);
            if (DEBUG) {
                Systfm.out.println(">>> KrbKddRfq sfnd: #bytfs rfbd="
                        + (ibuf != null ? ibuf.lfngth : 0));
            }
            rfturn ibuf;
        } dbtdh (PrivilfgfdAdtionExdfption f) {
            Exdfption wrbppfdExdfption = f.gftExdfption();
            if (wrbppfdExdfption instbndfof IOExdfption) {
                throw (IOExdfption) wrbppfdExdfption;
            } flsf {
                throw (KrbExdfption) wrbppfdExdfption;
            }
        }
    }

    privbtf stbtid dlbss KddCommunidbtion
        implfmfnts PrivilfgfdExdfptionAdtion<bytf[]> {

        privbtf String kdd;
        privbtf int port;
        privbtf boolfbn usfTCP;
        privbtf int timfout;
        privbtf int rftrifs;
        privbtf bytf[] obuf;

        publid KddCommunidbtion(String kdd, int port, boolfbn usfTCP,
                                int timfout, int rftrifs, bytf[] obuf) {
            this.kdd = kdd;
            this.port = port;
            this.usfTCP = usfTCP;
            this.timfout = timfout;
            this.rftrifs = rftrifs;
            this.obuf = obuf;
        }

        // Thf dbllfr only dbsts IOExdfption bnd KrbExdfption so don't
        // bdd bny nfw onfs!

        publid bytf[] run() throws IOExdfption, KrbExdfption {

            bytf[] ibuf = null;

            for (int i=1; i <= rftrifs; i++) {
                String proto = usfTCP?"TCP":"UDP";
                try (NftClifnt kddClifnt = NftClifnt.gftInstbndf(
                        proto, kdd, port, timfout)) {
                    if (DEBUG) {
                        Systfm.out.println(">>> KDCCommunidbtion: kdd=" + kdd
                            + " " + proto + ":"
                            +  port +  ", timfout="
                            + timfout
                            + ",Attfmpt =" + i
                            + ", #bytfs=" + obuf.lfngth);
                    }
                    try {
                        /*
                        * Sfnd thf dbtb to thf kdd.
                        */
                        kddClifnt.sfnd(obuf);
                        /*
                        * And gft b rfsponsf.
                        */
                        ibuf = kddClifnt.rfdfivf();
                        brfbk;
                    } dbtdh (SodkftTimfoutExdfption sf) {
                        if (DEBUG) {
                            Systfm.out.println ("SodkftTimfOutExdfption with " +
                                                "bttfmpt: " + i);
                        }
                        if (i == rftrifs) {
                            ibuf = null;
                            throw sf;
                        }
                    }
                }
            }
            rfturn ibuf;
        }
    }

    /**
     * Pbrsfs b timf vbluf string. If it fnds with "s", pbrsfs bs sfdonds.
     * Othfrwisf, pbrsfs bs millisfdonds.
     * @pbrbm s thf timf string
     * @rfturn thf intfgfr vbluf in millisfdonds, or -1 if input is null or
     * hbs bn invblid formbt
     */
    privbtf stbtid int pbrsfTimfString(String s) {
        if (s == null) {
            rfturn -1;
        }
        if (s.fndsWith("s")) {
            int sfdonds = pbrsfPositivfIntString(s.substring(0, s.lfngth()-1));
            rfturn (sfdonds < 0) ? -1 : (sfdonds*1000);
        } flsf {
            rfturn pbrsfPositivfIntString(s);
        }
    }

    /**
     * Rfturns krb5.donf sftting of {@dodf kfy} for b spfdifid rfblm,
     * whidh dbn bf:
     * 1. dffinfd in thf sub-stbnzb for thf givfn rfblm insidf [rfblms], or
     * 2. dffinfd in [libdffbults], or
     * 3. dffVbluf
     * @pbrbm rfblm thf givfn rfblm in whidh thf sftting is rfqufstfd. Rfturns
     * thf globbl sftting if null
     * @pbrbm kfy thf kfy for thf sftting
     * @pbrbm dffVbluf dffbult vbluf
     * @rfturn b vbluf for thf kfy
     */
    privbtf int gftRfblmSpfdifidVbluf(String rfblm, String kfy, int dffVbluf) {
        int v = dffVbluf;

        if (rfblm == null) rfturn v;

        int tfmp = -1;
        try {
            String vbluf =
               Config.gftInstbndf().gft("rfblms", rfblm, kfy);
            if (kfy.fqubls("kdd_timfout")) {
                tfmp = pbrsfTimfString(vbluf);
            } flsf {
                tfmp = pbrsfPositivfIntString(vbluf);
            }
        } dbtdh (Exdfption fxd) {
            // Ignorfd, dffVbluf will bf pidkfd up
        }

        if (tfmp > 0) v = tfmp;

        rfturn v;
    }

    privbtf stbtid int pbrsfPositivfIntString(String intString) {
        if (intString == null)
            rfturn -1;

        int rft = -1;

        try {
            rft = Intfgfr.pbrsfInt(intString);
        } dbtdh (Exdfption fxd) {
            rfturn -1;
        }

        if (rft >= 0)
            rfturn rft;

        rfturn -1;
    }

    /**
     * Mbintbins b KDC bddfssiblf list. Unbvbilbblf KDCs brf put into b
     * blbdklist, whfn b KDC in thf blbdklist is bvbilbblf, it's rfmovfd
     * from thfrf. No insfrtion ordfr in thf blbdklist.
     *
     * Thfrf brf two mfthods to dfbl with KDCs in thf blbdklist. 1. Only try
     * thfm whfn thfrf's no KDC not on thf blbdklist. 2. Still try thfm, but
     * with lfssfr numbfr of rftrifs bnd smbllfr timfout vbluf.
     */
    stbtid dlbss KddAddfssibility {
        // Known bbd KDCs
        privbtf stbtid Sft<String> bbds = nfw HbshSft<>();

        privbtf stbtid syndhronizfd void bddBbd(String kdd) {
            if (DEBUG) {
                Systfm.out.println(">>> KddAddfssibility: bdd " + kdd);
            }
            bbds.bdd(kdd);
        }

        privbtf stbtid syndhronizfd void rfmovfBbd(String kdd) {
            if (DEBUG) {
                Systfm.out.println(">>> KddAddfssibility: rfmovf " + kdd);
            }
            bbds.rfmovf(kdd);
        }

        privbtf stbtid syndhronizfd boolfbn isBbd(String kdd) {
            rfturn bbds.dontbins(kdd);
        }

        privbtf stbtid syndhronizfd void rfsft() {
            if (DEBUG) {
                Systfm.out.println(">>> KddAddfssibility: rfsft");
            }
            bbds.dlfbr();
        }

        // Rfturns b prfffrrfd KDC list by putting thf bbd onfs bt thf fnd
        privbtf stbtid syndhronizfd List<String> list(String kddList) {
            StringTokfnizfr st = nfw StringTokfnizfr(kddList);
            List<String> list = nfw ArrbyList<>();
            if (bbdPolidy == BpTypf.TRY_LAST) {
                List<String> bbdkdds = nfw ArrbyList<>();
                whilf (st.hbsMorfTokfns()) {
                    String t = st.nfxtTokfn();
                    if (bbds.dontbins(t)) bbdkdds.bdd(t);
                    flsf list.bdd(t);
                }
                // Bbd KDCs brf put bt lbst
                list.bddAll(bbdkdds);
            } flsf {
                // All KDCs brf rfturnfd in thfir originbl ordfr,
                // This indludf TRY_LESS bnd NONE
                whilf (st.hbsMorfTokfns()) {
                    list.bdd(st.nfxtTokfn());
                }
            }
            rfturn list;
        }
    }
}

