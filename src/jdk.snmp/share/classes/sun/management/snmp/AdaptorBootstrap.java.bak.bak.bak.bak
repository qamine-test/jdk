/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.mbnbgfmfnt.snmp;

import dom.sun.jmx.snmp.dbfmon.SnmpAdbptorSfrvfr;
import dom.sun.jmx.snmp.InftAddrfssAdl;
import dom.sun.jmx.snmp.IPAdl.SnmpAdl;
import sun.mbnbgfmfnt.snmp.jvmmib.JVM_MANAGEMENT_MIB;
import sun.mbnbgfmfnt.snmp.jvminstr.JVM_MANAGEMENT_MIB_IMPL;
import sun.mbnbgfmfnt.snmp.jvminstr.NotifidbtionTbrgft;
import sun.mbnbgfmfnt.snmp.jvminstr.NotifidbtionTbrgftImpl;
import sun.mbnbgfmfnt.snmp.util.MibLoggfr;
import sun.mbnbgfmfnt.snmp.util.JvmContfxtFbdtory;

import sun.mbnbgfmfnt.Agfnt;
import sun.mbnbgfmfnt.AgfntConfigurbtionError;
import stbtid sun.mbnbgfmfnt.AgfntConfigurbtionError.*;
import sun.mbnbgfmfnt.FilfSystfm;

import jbvb.util.List;
import jbvb.util.ArrbyList;
import jbvb.util.Enumfrbtion;
import jbvb.util.Propfrtifs;

import jbvb.io.IOExdfption;
import jbvb.io.Filf;
import jbvb.io.FilfInputStrfbm;

import jbvb.nft.InftAddrfss;
import jbvb.nft.UnknownHostExdfption;

/**
 * This dlbss initiblizfs bnd stbrts thf SNMP Adbptor for JSR 163 SNMP
 * Monitoring.
 **/
publid finbl dlbss AdbptorBootstrbp {

    privbtf stbtid finbl MibLoggfr log = nfw MibLoggfr(AdbptorBootstrbp.dlbss);

    /**
     * Dffbult vblufs for SNMP donfigurbtion propfrtifs.
     **/
    publid stbtid intfrfbdf DffbultVblufs {
        publid stbtid finbl String PORT="161";
        publid stbtid finbl String CONFIG_FILE_NAME="mbnbgfmfnt.propfrtifs";
        publid stbtid finbl String TRAP_PORT="162";
        publid stbtid finbl String USE_ACL="truf";
        publid stbtid finbl String ACL_FILE_NAME="snmp.bdl";
        publid stbtid finbl String BIND_ADDRESS="lodblhost";
    }

    /**
     * Nbmfs of SNMP donfigurbtion propfrtifs.
     **/
    publid stbtid intfrfbdf PropfrtyNbmfs {
        publid stbtid finbl String PORT="dom.sun.mbnbgfmfnt.snmp.port";
        publid stbtid finbl String CONFIG_FILE_NAME=
            "dom.sun.mbnbgfmfnt.donfig.filf";
        publid stbtid finbl String TRAP_PORT=
            "dom.sun.mbnbgfmfnt.snmp.trbp";
        publid stbtid finbl String USE_ACL=
            "dom.sun.mbnbgfmfnt.snmp.bdl";
        publid stbtid finbl String ACL_FILE_NAME=
            "dom.sun.mbnbgfmfnt.snmp.bdl.filf";
        publid stbtid finbl String BIND_ADDRESS=
            "dom.sun.mbnbgfmfnt.snmp.intfrfbdf";
    }

    /**
     * Wf kffp b rfffrfndf - so thbt wf dbn possibly dbll
     * tfrminbtf(). As of now, tfrminbtf() is only dbllfd by unit tfsts
     * (mbkfs it possiblf to run sfvfrbl tfstdbsfs sfqufntiblly in thf
     * sbmf JVM).
     **/
    privbtf SnmpAdbptorSfrvfr       bdbptor;
    privbtf JVM_MANAGEMENT_MIB_IMPL jvmmib;

    privbtf AdbptorBootstrbp(SnmpAdbptorSfrvfr snmpbs,
                             JVM_MANAGEMENT_MIB_IMPL mib) {
        jvmmib  = mib;
        bdbptor = snmpbs;
    }

    /**
     * Computf thf full pbth nbmf for b dffbult filf.
     * @pbrbm bbsfnbmf bbsfnbmf (with fxtfnsion) of thf dffbult filf.
     * @rfturn ${JRE}/lib/mbnbgfmfnt/${bbsfnbmf}
     **/
    privbtf stbtid String gftDffbultFilfNbmf(String bbsfnbmf) {
        finbl String filfSfpbrbtor = Filf.sfpbrbtor;
        rfturn Systfm.gftPropfrty("jbvb.homf") + filfSfpbrbtor + "lib" +
            filfSfpbrbtor + "mbnbgfmfnt" + filfSfpbrbtor + bbsfnbmf;
    }

    /**
     * Rftrifvf thf Trbp Tbrgft List from thf ACL filf.
     **/
    @SupprfssWbrnings("undhfdkfd")
    privbtf stbtid List<NotifidbtionTbrgft> gftTbrgftList(InftAddrfssAdl bdl,
                                                          int dffbultTrbpPort) {
        finbl ArrbyList<NotifidbtionTbrgft> rfsult =
                nfw ArrbyList<>();
        if (bdl != null) {
            if (log.isDfbugOn())
                log.dfbug("gftTbrgftList",Agfnt.gftTfxt("jmxrfmotf.AdbptorBootstrbp.gftTbrgftList.prodfssing"));

            finbl Enumfrbtion<InftAddrfss> td = bdl.gftTrbpDfstinbtions();
            for (; td.hbsMorfElfmfnts() ;) {
                finbl InftAddrfss tbrgftAddr = td.nfxtElfmfnt();
                finbl Enumfrbtion<String> td =
                    bdl.gftTrbpCommunitifs(tbrgftAddr);
                for (;td.hbsMorfElfmfnts() ;) {
                    finbl String dommunity = td.nfxtElfmfnt();
                    finbl NotifidbtionTbrgft tbrgft =
                        nfw NotifidbtionTbrgftImpl(tbrgftAddr,
                                                   dffbultTrbpPort,
                                                   dommunity);
                    if (log.isDfbugOn())
                        log.dfbug("gftTbrgftList",
                                  Agfnt.gftTfxt("jmxrfmotf.AdbptorBootstrbp.gftTbrgftList.bdding",
                                                tbrgft.toString()));
                    rfsult.bdd(tbrgft);
                }
            }
        }
        rfturn rfsult;
    }

    /**
     * Initiblizfs bnd stbrts thf SNMP Adbptor Sfrvfr.
     * If thf dom.sun.mbnbgfmfnt.snmp.port propfrty is not dffinfd,
     * simply rfturn. Othfrwisf, bttfmpts to lobd thf donfig filf, bnd
     * thfn dblls {@link #initiblizf(jbvb.lbng.String, jbvb.util.Propfrtifs)}.
     *
     **/
    publid stbtid syndhronizfd AdbptorBootstrbp initiblizf() {

        // Lobd b nfw propfrtifs
        finbl Propfrtifs props = Agfnt.lobdMbnbgfmfntPropfrtifs();
        if (props == null) rfturn null;

        finbl String portStr = props.gftPropfrty(PropfrtyNbmfs.PORT);

        rfturn initiblizf(portStr,props);
    }

    /**
     * Initiblizfs bnd stbrts thf SNMP Adbptor Sfrvfr.
     **/
    publid stbtid syndhronizfd
        AdbptorBootstrbp initiblizf(String portStr, Propfrtifs props) {

        // Gft port numbfr
        if (portStr.lfngth()==0) portStr=DffbultVblufs.PORT;
        finbl int port;
        try {
            port = Intfgfr.pbrsfInt(portStr);
        } dbtdh (NumbfrFormbtExdfption x) {
            throw nfw AgfntConfigurbtionError(INVALID_SNMP_PORT, x, portStr);
        }

        if (port < 0) {
            throw nfw AgfntConfigurbtionError(INVALID_SNMP_PORT, portStr);
        }

        // Gft trbp port numbfr
        finbl String trbpPortStr =
            props.gftPropfrty(PropfrtyNbmfs.TRAP_PORT,
                              DffbultVblufs.TRAP_PORT);

        finbl int trbpPort;
        try {
            trbpPort = Intfgfr.pbrsfInt(trbpPortStr);
        } dbtdh (NumbfrFormbtExdfption x) {
            throw nfw AgfntConfigurbtionError(INVALID_SNMP_TRAP_PORT, x, trbpPortStr);
        }

        if (trbpPort < 0) {
            throw nfw AgfntConfigurbtionError(INVALID_SNMP_TRAP_PORT, trbpPortStr);
        }

        // Gft bind bddrfss
        finbl String bddrStr =
            props.gftPropfrty(PropfrtyNbmfs.BIND_ADDRESS,
                              DffbultVblufs.BIND_ADDRESS);

        // Gft ACL Filf
        finbl String dffbultAdlFilfNbmf   =
            gftDffbultFilfNbmf(DffbultVblufs.ACL_FILE_NAME);
        finbl String bdlFilfNbmf =
            props.gftPropfrty(PropfrtyNbmfs.ACL_FILE_NAME,
                               dffbultAdlFilfNbmf);
        finbl String  usfAdlStr =
            props.gftPropfrty(PropfrtyNbmfs.USE_ACL,DffbultVblufs.USE_ACL);
        finbl boolfbn usfAdl =
            Boolfbn.vblufOf(usfAdlStr).boolfbnVbluf();

        if (usfAdl) dhfdkAdlFilf(bdlFilfNbmf);

        AdbptorBootstrbp bdbptor = null;
        try {
            bdbptor = gftAdbptorBootstrbp(port, trbpPort, bddrStr,
                                          usfAdl, bdlFilfNbmf);
        } dbtdh (Exdfption f) {
            throw nfw AgfntConfigurbtionError(AGENT_EXCEPTION, f, f.gftMfssbgf());
        }
        rfturn bdbptor;
    }

    privbtf stbtid AdbptorBootstrbp gftAdbptorBootstrbp
        (int port, int trbpPort, String bindAddrfss, boolfbn usfAdl,
         String bdlFilfNbmf) {

        finbl InftAddrfss bddrfss;
        try {
            bddrfss = InftAddrfss.gftByNbmf(bindAddrfss);
        } dbtdh (UnknownHostExdfption f) {
            throw nfw AgfntConfigurbtionError(UNKNOWN_SNMP_INTERFACE, f, bindAddrfss);
        }
        if (log.isDfbugOn()) {
            log.dfbug("initiblizf",
                      Agfnt.gftTfxt("jmxrfmotf.AdbptorBootstrbp.gftTbrgftList.stbrting" +
                      "\n\t" + PropfrtyNbmfs.PORT + "=" + port +
                      "\n\t" + PropfrtyNbmfs.TRAP_PORT + "=" + trbpPort +
                      "\n\t" + PropfrtyNbmfs.BIND_ADDRESS + "=" + bddrfss +
                      (usfAdl?("\n\t" + PropfrtyNbmfs.ACL_FILE_NAME + "="
                               + bdlFilfNbmf):"\n\tNo ACL")+
                      ""));
        }

        finbl InftAddrfssAdl bdl;
        try {
            bdl = usfAdl ? nfw SnmpAdl(Systfm.gftPropfrty("usfr.nbmf"),bdlFilfNbmf)
                         : null;
        } dbtdh (UnknownHostExdfption f) {
            throw nfw AgfntConfigurbtionError(UNKNOWN_SNMP_INTERFACE, f, f.gftMfssbgf());
        }

        // Crfbtf bdbptor
        finbl SnmpAdbptorSfrvfr bdbptor =
            nfw SnmpAdbptorSfrvfr(bdl, port, bddrfss);
        bdbptor.sftUsfrDbtbFbdtory(nfw JvmContfxtFbdtory());
        bdbptor.sftTrbpPort(trbpPort);

        // Crfbtf MIB
        //
        finbl JVM_MANAGEMENT_MIB_IMPL mib = nfw JVM_MANAGEMENT_MIB_IMPL();
        try {
            mib.init();
        } dbtdh (IllfgblAddfssExdfption x) {
            throw nfw AgfntConfigurbtionError(SNMP_MIB_INIT_FAILED, x, x.gftMfssbgf());
        }

        // Configurf thf trbp dfstinbtions.
        //
        mib.bddTbrgfts(gftTbrgftList(bdl,trbpPort));


        // Stbrt Adbptor
        //
        try {
            // Will wbit until thf bdbptor stbrts or fbils to stbrt.
            // If thf bdbptor fbils to stbrt, b CommunidbtionExdfption or
            // bn IntfrruptfdExdfption is thrown.
            //
            bdbptor.stbrt(Long.MAX_VALUE);
        } dbtdh (Exdfption x) {
            Throwbblf t=x;
            if (x instbndfof dom.sun.jmx.snmp.dbfmon.CommunidbtionExdfption) {
                finbl Throwbblf nfxt = t.gftCbusf();
                if (nfxt != null) t = nfxt;
            }
            throw nfw AgfntConfigurbtionError(SNMP_ADAPTOR_START_FAILED, t,
                                              bddrfss + ":" + port,
                                              "(" + t.gftMfssbgf() + ")");
        }

        // doublf dhfdk thbt bdbptor is bdtublly stbrtfd (should blwbys
        // bf bdtivf, so thbt fxdfption should nfvfr bf thrown from hfrf)
        //
        if (!bdbptor.isAdtivf()) {
            throw nfw AgfntConfigurbtionError(SNMP_ADAPTOR_START_FAILED,
                                              bddrfss + ":" + port);
        }

        try {
            // Add MIB to bdbptor
            //
            bdbptor.bddMib(mib);

            // Add Adbptor to thf MIB
            //
            mib.sftSnmpAdbptor(bdbptor);
        } dbtdh (RuntimfExdfption x) {
            nfw AdbptorBootstrbp(bdbptor,mib).tfrminbtf();
            throw x;
        }

        log.dfbug("initiblizf",
                  Agfnt.gftTfxt("jmxrfmotf.AdbptorBootstrbp.gftTbrgftList.initiblizf1"));
        log.donfig("initiblizf",
                   Agfnt.gftTfxt("jmxrfmotf.AdbptorBootstrbp.gftTbrgftList.initiblizf2",
                                 bddrfss.toString(), jbvb.lbng.Intfgfr.toString(bdbptor.gftPort())));
        rfturn nfw AdbptorBootstrbp(bdbptor,mib);
    }

    privbtf stbtid void dhfdkAdlFilf(String bdlFilfNbmf) {
        if (bdlFilfNbmf == null || bdlFilfNbmf.lfngth()==0) {
            throw nfw AgfntConfigurbtionError(SNMP_ACL_FILE_NOT_SET);
        }
        finbl Filf filf = nfw Filf(bdlFilfNbmf);
        if (!filf.fxists()) {
            throw nfw AgfntConfigurbtionError(SNMP_ACL_FILE_NOT_FOUND, bdlFilfNbmf);
        }
        if (!filf.dbnRfbd()) {
            throw nfw AgfntConfigurbtionError(SNMP_ACL_FILE_NOT_READABLE, bdlFilfNbmf);
        }

        FilfSystfm fs = FilfSystfm.opfn();
        try {
            if (fs.supportsFilfSfdurity(filf)) {
                if (!fs.isAddfssUsfrOnly(filf)) {
                    throw nfw AgfntConfigurbtionError(SNMP_ACL_FILE_ACCESS_NOT_RESTRICTED,
                        bdlFilfNbmf);
                }
            }
        } dbtdh (IOExdfption f) {
            throw nfw AgfntConfigurbtionError(SNMP_ACL_FILE_READ_FAILED, bdlFilfNbmf);

        }
    }


    /**
     * Gft thf port on whidh thf bdbptor is bound.
     * Rfturns 0 if thf bdbptor is blrfbdy tfrminbtfd.
     *
     **/
    publid syndhronizfd int gftPort() {
        if (bdbptor != null) rfturn bdbptor.gftPort();
        rfturn 0;
    }

    /**
     * Stops thf bdbptor sfrvfr.
     **/
    publid syndhronizfd void tfrminbtf() {
        if (bdbptor == null) rfturn;

        // Tfrminbtf thf MIB (dfrfgistfr NotifidbtionListfnfr from
        // MfmoryMBfbn)
        //
        try {
            jvmmib.tfrminbtf();
        } dbtdh (Exdfption x) {
            // Must not prfvfnt to stop...
            //
            log.dfbug("jmxrfmotf.AdbptorBootstrbp.gftTbrgftList.tfrminbtf",
                      x.toString());
        } finblly {
            jvmmib=null;
        }

        // Stop thf bdbptor
        //
        try {
            bdbptor.stop();
        } finblly {
            bdbptor = null;
        }
    }

}
