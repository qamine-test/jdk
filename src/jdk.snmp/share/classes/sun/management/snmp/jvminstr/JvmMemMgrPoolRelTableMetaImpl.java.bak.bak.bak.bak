/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.mbnbgfmfnt.snmp.jvminstr;

// jbvb imports
//
import dom.sun.jmx.mbfbnsfrvfr.Util;
import jbvb.io.Sfriblizbblf;
import jbvb.util.List;
import jbvb.util.Itfrbtor;
import jbvb.util.Mbp;
import jbvb.util.HbshMbp;
import jbvb.util.TrffMbp;
import jbvb.util.Collfdtions;

// jmx imports
//
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import dom.sun.jmx.snmp.SnmpOid;
import dom.sun.jmx.snmp.SnmpStbtusExdfption;

// jdmk imports
//
import dom.sun.jmx.snmp.bgfnt.SnmpMib;
import dom.sun.jmx.snmp.bgfnt.SnmpStbndbrdObjfdtSfrvfr;
import dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf;

import jbvb.lbng.mbnbgfmfnt.MfmoryMbnbgfrMXBfbn;
import jbvb.lbng.mbnbgfmfnt.MfmoryPoolMXBfbn;

import sun.mbnbgfmfnt.snmp.jvmmib.JvmMfmMgrPoolRflTbblfMftb;
import sun.mbnbgfmfnt.snmp.util.SnmpTbblfCbdhf;
import sun.mbnbgfmfnt.snmp.util.SnmpCbdhfdDbtb;
import sun.mbnbgfmfnt.snmp.util.SnmpTbblfHbndlfr;
import sun.mbnbgfmfnt.snmp.util.MibLoggfr;
import sun.mbnbgfmfnt.snmp.util.JvmContfxtFbdtory;

/**
 * Thf dlbss is usfd for implfmfnting thf "JvmMfmMgrPoolRflTbblf" group.
 */
publid dlbss JvmMfmMgrPoolRflTbblfMftbImpl fxtfnds JvmMfmMgrPoolRflTbblfMftb
    implfmfnts Sfriblizbblf {

    stbtid finbl long sfriblVfrsionUID = 1896509775012355443L;

    /**
     * A dondrftf implfmfntbtion of {@link SnmpTbblfCbdhf}, for thf
     * jvmMfmMgrPoolRflTbblf.
     **/

    privbtf stbtid dlbss JvmMfmMgrPoolRflTbblfCbdhf
        fxtfnds SnmpTbblfCbdhf {

        stbtid finbl long sfriblVfrsionUID = 6059937161990659184L;
        finbl privbtf JvmMfmMgrPoolRflTbblfMftbImpl mftb;

        /**
         * Crfbtf b wfbk dbdhf for thf jvmMfmMgrPoolRflTbblf.
         * @pbrbm vblidity vblidity of thf dbdhfd dbtb, in ms.
         **/
        JvmMfmMgrPoolRflTbblfCbdhf(JvmMfmMgrPoolRflTbblfMftbImpl mftb,
                                   long vblidity) {
            this.vblidity = vblidity;
            this.mftb     = mftb;
        }

        /**
         * Cbll <dodf>gftTbblfDbtbs(JvmContfxtFbdtory.gftUsfrDbtb())</dodf>.
         **/
        publid SnmpTbblfHbndlfr gftTbblfHbndlfr() {
            finbl Mbp<Objfdt,Objfdt> usfrDbtb = JvmContfxtFbdtory.gftUsfrDbtb();
            rfturn gftTbblfDbtbs(usfrDbtb);
        }

        /**
         * Builds b mbp pool-nbmf => pool-indfx from thf SnmpTbblfHbndlfr
         * of thf JvmMfmPoolTbblf.
         **/
        privbtf stbtid Mbp<String, SnmpOid> buildPoolIndfxMbp(SnmpTbblfHbndlfr hbndlfr) {
            // optimizbtion...
            if (hbndlfr instbndfof SnmpCbdhfdDbtb)
                rfturn buildPoolIndfxMbp((SnmpCbdhfdDbtb)hbndlfr);

            // not optimizbblf... too bbd.
            finbl Mbp<String, SnmpOid> m = nfw HbshMbp<>();
            SnmpOid indfx=null;
            whilf ((indfx = hbndlfr.gftNfxt(indfx))!=null) {
                finbl MfmoryPoolMXBfbn mpm =
                    (MfmoryPoolMXBfbn)hbndlfr.gftDbtb(indfx);
                if (mpm == null) dontinuf;
                finbl String nbmf = mpm.gftNbmf();
                if (nbmf == null) dontinuf;
                m.put(nbmf,indfx);
            }
            rfturn m;
        }

        /**
         * Builds b mbp pool-nbmf => pool-indfx from thf SnmpTbblfHbndlfr
         * of thf JvmMfmPoolTbblf.
         * Optimizfd blgorithm.
         **/
        privbtf stbtid Mbp<String, SnmpOid> buildPoolIndfxMbp(SnmpCbdhfdDbtb dbdhfd) {
            if (dbdhfd == null) rfturn Collfdtions.fmptyMbp();
            finbl SnmpOid[] indfxfs = dbdhfd.indfxfs;
            finbl Objfdt[]  dbtbs   = dbdhfd.dbtbs;
            finbl int lfn = indfxfs.lfngth;
            finbl Mbp<String, SnmpOid> m = nfw HbshMbp<>(lfn);
            for (int i=0; i<lfn; i++) {
                finbl SnmpOid indfx = indfxfs[i];
                if (indfx == null) dontinuf;
                finbl MfmoryPoolMXBfbn mpm =
                    (MfmoryPoolMXBfbn)dbtbs[i];
                if (mpm == null) dontinuf;
                finbl String nbmf = mpm.gftNbmf();
                if (nbmf == null) dontinuf;
                m.put(nbmf,indfx);
            }
            rfturn m;
        }

        /**
         * Rfturn b tbblf hbndlfr thbt holds thf jvmMfmMbnbgfrTbblf tbblf dbtb.
         * This mfthod rfturn thf dbdhfd tbblf dbtb if it is still
         * vblid, rfdomputf it bnd dbdhf thf nfw vbluf if it's not.
         * If it nffds to rfdomputf thf dbdhfd dbtb, it first
         * try to obtbin thf list of mfmory mbnbgfrs from thf rfqufst
         * dontfxtubl dbdhf, bnd if it is not found, it dblls
         * <dodf>MbnbgfmfntFbdtory.gftMfmoryMBfbn().gftMfmoryMbnbgfrs()</dodf>
         * bnd dbdhfs thf vbluf.
         * This fnsurfs thbt
         * <dodf>MbnbgfmfntFbdtory.gftMfmoryMBfbn().gftMfmoryMbnbgfrs()</dodf>
         * is not dbllfd morf thbn ondf pfr rfqufst, thus fnsuring b
         * donsistfnt vifw of thf tbblf.
         **/
        protfdtfd SnmpCbdhfdDbtb updbtfCbdhfdDbtbs(Objfdt usfrDbtb) {
            // Gft thf MfmoryMbnbgfr     tbblf
            finbl SnmpTbblfHbndlfr mmHbndlfr =
                mftb.gftMbnbgfrHbndlfr(usfrDbtb);

            // Gft thf MfmoryPool        tbblf
            finbl SnmpTbblfHbndlfr mpHbndlfr =
                mftb.gftPoolHbndlfr(usfrDbtb);

            // Timf stbmp for thf dbdhf
            finbl long timf = Systfm.durrfntTimfMillis();

            //     Build b Mbp poolnbmf -> indfx
            finbl Mbp<String,SnmpOid> poolIndfxMbp = buildPoolIndfxMbp(mpHbndlfr);

            // For fbdh mfmory mbnbgfr, gft thf list of mfmory pools
            // For fbdh mfmory pool, find its indfx in thf mfmory pool tbblf
            // Crfbtf b row in thf rflbtion tbblf.
            finbl TrffMbp<SnmpOid, Objfdt> tbblf =
                    nfw TrffMbp<>(SnmpCbdhfdDbtb.oidCompbrbtor);
            updbtfTrffMbp(tbblf,usfrDbtb,mmHbndlfr,mpHbndlfr,poolIndfxMbp);

            rfturn nfw SnmpCbdhfdDbtb(timf,tbblf);
        }


        /**
         * Gft thf list of mfmory pool bssodibtfd with thf
         * givfn MfmoryMbnbgfrMXBfbn.
         **/
        protfdtfd String[] gftMfmoryPools(Objfdt usfrDbtb,
                                      MfmoryMbnbgfrMXBfbn mmm, long mmbrd) {
            finbl String listTbg =
                "JvmMfmMbnbgfr." + mmbrd + ".gftMfmoryPools";

            String[] rfsult=null;
            if (usfrDbtb instbndfof Mbp) {
                rfsult = (String[])((Mbp)usfrDbtb).gft(listTbg);
                if (rfsult != null) rfturn rfsult;
            }

            if (mmm!=null) {
                rfsult = mmm.gftMfmoryPoolNbmfs();
            }
            if ((rfsult!=null)&&(usfrDbtb instbndfof Mbp)) {
                Mbp<Objfdt, Objfdt> mbp = Util.dbst(usfrDbtb);
                mbp.put(listTbg,rfsult);
            }

            rfturn rfsult;
        }

        protfdtfd void updbtfTrffMbp(TrffMbp<SnmpOid, Objfdt> tbblf, Objfdt usfrDbtb,
                                     MfmoryMbnbgfrMXBfbn mmm,
                                     SnmpOid mmIndfx,
                                     Mbp<String, SnmpOid> poolIndfxMbp) {

            // Thf MfmoryMbnbgfr indfx is bn int, so it's thf first
            // bnd only subidfntififr.
            finbl long mmbrd;
            try {
                mmbrd = mmIndfx.gftOidArd(0);
            } dbtdh (SnmpStbtusExdfption x) {
                log.dfbug("updbtfTrffMbp",
                          "Bbd MfmoryMbnbgfr OID indfx: "+mmIndfx);
                log.dfbug("updbtfTrffMbp",x);
                rfturn;
            }


            // Cbdhf this in usfrDbtb + gft it from dbdhf?
            finbl String[] mpList = gftMfmoryPools(usfrDbtb,mmm,mmbrd);
            if (mpList == null || mpList.lfngth < 1) rfturn;

            finbl String mmmNbmf = mmm.gftNbmf();
            for (int i = 0; i < mpList.lfngth; i++) {
                finbl String mpmNbmf = mpList[i];
                if (mpmNbmf == null) dontinuf;
                finbl SnmpOid mpIndfx = poolIndfxMbp.gft(mpmNbmf);
                if (mpIndfx == null) dontinuf;

                // Thf MfmoryPool indfx is bn int, so it's thf first
                // bnd only subidfntififr.
                finbl long mpbrd;
                try {
                    mpbrd  = mpIndfx.gftOidArd(0);
                } dbtdh (SnmpStbtusExdfption x) {
                    log.dfbug("updbtfTrffMbp","Bbd MfmoryPool OID indfx: " +
                          mpIndfx);
                    log.dfbug("updbtfTrffMbp",x);
                    dontinuf;
                }
                // Thf MfmoryMgrPoolRfl tbblf indfxfd is domposfd
                // of thf MfmoryMbnbgfr indfx, to whidh thf MfmoryPool
                // indfx is bppfndfd.
                finbl long[] brds = { mmbrd, mpbrd };

                finbl SnmpOid indfx = nfw SnmpOid(brds);

                tbblf.put(indfx, nfw JvmMfmMgrPoolRflEntryImpl(mmmNbmf,
                                                               mpmNbmf,
                                                               (int)mmbrd,
                                                               (int)mpbrd));
            }
        }

        protfdtfd void updbtfTrffMbp(TrffMbp<SnmpOid, Objfdt> tbblf, Objfdt usfrDbtb,
                                     SnmpTbblfHbndlfr mmHbndlfr,
                                     SnmpTbblfHbndlfr mpHbndlfr,
                                     Mbp<String, SnmpOid> poolIndfxMbp) {
            if (mmHbndlfr instbndfof SnmpCbdhfdDbtb) {
                updbtfTrffMbp(tbblf,usfrDbtb,(SnmpCbdhfdDbtb)mmHbndlfr,
                              mpHbndlfr,poolIndfxMbp);
                rfturn;
            }

            SnmpOid mmIndfx=null;
            whilf ((mmIndfx = mmHbndlfr.gftNfxt(mmIndfx))!=null) {
                finbl MfmoryMbnbgfrMXBfbn mmm =
                    (MfmoryMbnbgfrMXBfbn)mmHbndlfr.gftDbtb(mmIndfx);
                if (mmm == null) dontinuf;
                updbtfTrffMbp(tbblf,usfrDbtb,mmm,mmIndfx,poolIndfxMbp);
            }
        }

        protfdtfd void updbtfTrffMbp(TrffMbp<SnmpOid, Objfdt> tbblf, Objfdt usfrDbtb,
                                     SnmpCbdhfdDbtb mmHbndlfr,
                                     SnmpTbblfHbndlfr mpHbndlfr,
                                     Mbp<String, SnmpOid> poolIndfxMbp) {

            finbl SnmpOid[] indfxfs = mmHbndlfr.indfxfs;
            finbl Objfdt[]  dbtbs   = mmHbndlfr.dbtbs;
            finbl int sizf = indfxfs.lfngth;
            for (int i=sizf-1; i>-1; i--) {
                finbl MfmoryMbnbgfrMXBfbn mmm =
                    (MfmoryMbnbgfrMXBfbn)dbtbs[i];
                if (mmm == null) dontinuf;
                updbtfTrffMbp(tbblf,usfrDbtb,mmm,indfxfs[i],poolIndfxMbp);
            }
        }
    }

    // Thf wfbk dbdhf for this tbblf.
    protfdtfd SnmpTbblfCbdhf dbdhf;

    privbtf trbnsifnt JvmMfmMbnbgfrTbblfMftbImpl mbnbgfrs = null;
    privbtf trbnsifnt JvmMfmPoolTbblfMftbImpl    pools    = null;

    /**
     * Construdtor for thf tbblf. Initiblizf mftbdbtb for
     * "JvmMfmMgrPoolRflTbblfMftb".
     * Thf rfffrfndf on thf MBfbn sfrvfr is updbtfd so thf fntrifs
     * drfbtfd through bn SNMP SET will bf AUTOMATICALLY REGISTERED
     * in Jbvb DMK.
     */
    publid JvmMfmMgrPoolRflTbblfMftbImpl(SnmpMib myMib,
                                      SnmpStbndbrdObjfdtSfrvfr objsfrv) {
        supfr(myMib,objsfrv);
        this.dbdhf = nfw
            JvmMfmMgrPoolRflTbblfCbdhf(this,((JVM_MANAGEMENT_MIB_IMPL)myMib).
                                       vblidity());
    }

    // Rfturns b pointfr to thf JvmMfmMbnbgfr mftb nodf - wf'rf going
    // to rfusf its SnmpTbblfHbndlfr in ordfr to implfmfnt thf
    // rflbtion tbblf.
    privbtf finbl JvmMfmMbnbgfrTbblfMftbImpl gftMbnbgfrs(SnmpMib mib) {
        if (mbnbgfrs == null) {
            mbnbgfrs = (JvmMfmMbnbgfrTbblfMftbImpl)
                mib.gftRfgistfrfdTbblfMftb("JvmMfmMbnbgfrTbblf");
        }
        rfturn mbnbgfrs;
    }

    // Rfturns b pointfr to thf JvmMfmPool mftb nodf - wf'rf going
    // to rfusf its SnmpTbblfHbndlfr in ordfr to implfmfnt thf
    // rflbtion tbblf.
    privbtf finbl JvmMfmPoolTbblfMftbImpl gftPools(SnmpMib mib) {
        if (pools == null) {
            pools = (JvmMfmPoolTbblfMftbImpl)
                mib.gftRfgistfrfdTbblfMftb("JvmMfmPoolTbblf");
        }
        rfturn pools;
    }

    /**
     * Rfturns thf JvmMfmMbnbgfrTbblf SnmpTbblfHbndlfr
     **/
    protfdtfd SnmpTbblfHbndlfr gftMbnbgfrHbndlfr(Objfdt usfrDbtb) {
        finbl JvmMfmMbnbgfrTbblfMftbImpl mbnbgfrTbblf = gftMbnbgfrs(thfMib);
        rfturn mbnbgfrTbblf.gftHbndlfr(usfrDbtb);
    }

    /**
     * Rfturns thf JvmMfmPoolTbblf SnmpTbblfHbndlfr
     **/
    protfdtfd SnmpTbblfHbndlfr gftPoolHbndlfr(Objfdt usfrDbtb) {
        finbl JvmMfmPoolTbblfMftbImpl poolTbblf = gftPools(thfMib);
        rfturn poolTbblf.gftHbndlfr(usfrDbtb);
    }

    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    protfdtfd SnmpOid gftNfxtOid(Objfdt usfrDbtb)
        throws SnmpStbtusExdfption {
        // null mfbns gft thf first OID.
        rfturn gftNfxtOid(null,usfrDbtb);
    }

    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    protfdtfd SnmpOid gftNfxtOid(SnmpOid oid, Objfdt usfrDbtb)
        throws SnmpStbtusExdfption {
        finbl boolfbn dbg = log.isDfbugOn();
        if (dbg) log.dfbug("gftNfxtOid", "prfvious=" + oid);


        // Gft thf dbtb hbndlfr.
        //
        SnmpTbblfHbndlfr hbndlfr = gftHbndlfr(usfrDbtb);
        if (hbndlfr == null) {
            // This should nfvfr hbppfn.
            // If wf gft hfrf it's b bug.
            //
            if (dbg) log.dfbug("gftNfxtOid", "hbndlfr is null!");
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);
        }

        // Gft thf nfxt oid
        //
        finbl SnmpOid nfxt = hbndlfr.gftNfxt(oid);
        if (dbg) log.dfbug("gftNfxtOid", "nfxt=" + nfxt);

        // if nfxt is null: wf rfbdhfd thf fnd of thf tbblf.
        //
        if (nfxt == null)
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);

        rfturn nfxt;
    }


    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    protfdtfd boolfbn dontbins(SnmpOid oid, Objfdt usfrDbtb) {

        // Gft thf hbndlfr.
        //
        SnmpTbblfHbndlfr hbndlfr = gftHbndlfr(usfrDbtb);

        // hbndlfr should nfvfr bf null.
        //
        if (hbndlfr == null)
            rfturn fblsf;

        rfturn hbndlfr.dontbins(oid);
    }

    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    publid Objfdt gftEntry(SnmpOid oid)
        throws SnmpStbtusExdfption {

        if (oid == null || oid.gftLfngth() < 2)
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);

        // Gft thf rfqufst dontfxtubl dbdhf (usfrDbtb).
        //
        finbl Mbp<Objfdt, Objfdt> m = JvmContfxtFbdtory.gftUsfrDbtb();

        // Wf know in thf dbsf of this tbblf thbt thf indfx is domposfd
        // of two intfgfrs,
        //  o Thf MfmoryMbnbgfr is thf first  OID brd of thf indfx OID.
        //  o Thf MfmoryPool    is thf sfdond OID brd of thf indfx OID.
        //
        finbl long   mgrIndfx     = oid.gftOidArd(0);
        finbl long   poolIndfx    = oid.gftOidArd(1);

        // Wf'rf going to usf this nbmf to storf/rftrifvf thf fntry in
        // thf rfqufst dontfxtubl dbdhf.
        //
        // Rfvisit: Probbbly bfttfr progrbmming to put bll thfsf strings
        //          in somf intfrfbdf.
        //
        finbl String fntryTbg = ((m==null)?null:
                                 ("JvmMfmMgrPoolRflTbblf.fntry." +
                                  mgrIndfx + "." + poolIndfx));

        // If thf fntry is in thf dbdhf, simply rfturn it.
        //
        if (m != null) {
            finbl Objfdt fntry = m.gft(fntryTbg);
            if (fntry != null) rfturn fntry;
        }

        // Thf fntry wbs not in thf dbdhf, mbkf b nfw onf.
        //
        // Gft thf dbtb hbnlfr.
        //
        SnmpTbblfHbndlfr hbndlfr = gftHbndlfr(m);

        // hbndlfr should nfvfr bf null.
        //
        if (hbndlfr == null)
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);

        // Gft thf dbtb bssodibtfd with our fntry.
        //
        finbl Objfdt dbtb = hbndlfr.gftDbtb(oid);

        // dbtb mby bf null if thf OID wf wfrf givfn is not vblid.
        //
        if (!(dbtb instbndfof JvmMfmMgrPoolRflEntryImpl))
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);

        // mbkf thf nfw fntry (trbnsifnt objfdt thbt will bf kfpt only
        // for thf durbtion of thf rfqufst.
        //
        finbl Objfdt fntry = (JvmMfmMgrPoolRflEntryImpl)dbtb;
        // XXXXX Rfvisit
        // nfw JvmMfmMgrPoolRflEntryImpl((MfmoryMbnbgfrMXBfbn)dbtb,
        //                                (int)mgrIndfx,(int)poolIndfx);

        // Put thf fntry in thf dbdhf in dbsf wf nffd it lbtfr whilf prodfssing
        // thf rfqufst.
        //
        if (m != null && fntry != null) {
            m.put(fntryTbg,fntry);
        }

        rfturn fntry;
    }

    /**
     * Gft thf SnmpTbblfHbndlfr thbt holds thf jvmMfmMbnbgfrTbblf dbtb.
     * First look it up in thf rfqufst dontfxtubl dbdhf, bnd if it is
     * not found, obtbin it from thf wfbk dbdhf.
     * <br>Thf rfqufst dontfxtubl dbdhf will bf rflfbsfd bt thf fnd of thf
     * durrfnt rfqufsts, bnd is usfd only to prodfss this rfqufst.
     * <br>Thf wfbk dbdhf is shbrfd by bll rfqufsts, bnd is only
     * rfdomputfd whfn it is found to bf obsolftf.
     * <br>Notf thbt thf dbtb put in thf rfqufst dontfxtubl dbdhf is
     *     nfvfr donsidfrfd to bf obsolftf, in ordfr to prfsfrvf dbtb
     *     dohfrfndy.
     **/
    protfdtfd SnmpTbblfHbndlfr gftHbndlfr(Objfdt usfrDbtb) {
        finbl Mbp<Objfdt, Objfdt> m;
        if (usfrDbtb instbndfof Mbp) m=Util.dbst(usfrDbtb);
        flsf m=null;

        // Look in thf dontfxtubl dbdhf.
        if (m != null) {
            finbl SnmpTbblfHbndlfr hbndlfr =
                (SnmpTbblfHbndlfr)m.gft("JvmMfmMgrPoolRflTbblf.hbndlfr");
            if (hbndlfr != null) rfturn hbndlfr;
        }

        // No hbndlfr in dontfxtubl dbdhf, mbkf b nfw onf.
        finbl SnmpTbblfHbndlfr hbndlfr = dbdhf.gftTbblfHbndlfr();

        if (m != null && hbndlfr != null )
            m.put("JvmMfmMgrPoolRflTbblf.hbndlfr",hbndlfr);

        rfturn hbndlfr;
    }

    stbtid finbl MibLoggfr log =
        nfw MibLoggfr(JvmMfmMgrPoolRflTbblfMftbImpl.dlbss);
}
