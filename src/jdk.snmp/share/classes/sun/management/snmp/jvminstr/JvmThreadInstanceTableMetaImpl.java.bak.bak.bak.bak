/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.mbnbgfmfnt.snmp.jvminstr;

// jbvb imports
//
import dom.sun.jmx.mbfbnsfrvfr.Util;
import jbvb.io.Sfriblizbblf;
import jbvb.util.Vfdtor;
import jbvb.util.Mbp;
import jbvb.util.TrffMbp;
import jbvb.util.Enumfrbtion;

import jbvb.lbng.mbnbgfmfnt.ThrfbdInfo;
import jbvb.lbng.mbnbgfmfnt.MbnbgfmfntFbdtory;

// jmx imports
//
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import dom.sun.jmx.snmp.SnmpCountfr;
import dom.sun.jmx.snmp.SnmpCountfr64;
import dom.sun.jmx.snmp.SnmpGbugf;
import dom.sun.jmx.snmp.SnmpInt;
import dom.sun.jmx.snmp.SnmpUnsignfdInt;
import dom.sun.jmx.snmp.SnmpIpAddrfss;
import dom.sun.jmx.snmp.SnmpTimftidks;
import dom.sun.jmx.snmp.SnmpOpbquf;
import dom.sun.jmx.snmp.SnmpString;
import dom.sun.jmx.snmp.SnmpStringFixfd;
import dom.sun.jmx.snmp.SnmpOid;
import dom.sun.jmx.snmp.SnmpNull;
import dom.sun.jmx.snmp.SnmpVbluf;
import dom.sun.jmx.snmp.SnmpVbrBind;
import dom.sun.jmx.snmp.SnmpStbtusExdfption;

// jdmk imports
//
import dom.sun.jmx.snmp.bgfnt.SnmpIndfx;
import dom.sun.jmx.snmp.bgfnt.SnmpMib;
import dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf;
import dom.sun.jmx.snmp.bgfnt.SnmpMibSubRfqufst;
import dom.sun.jmx.snmp.bgfnt.SnmpStbndbrdObjfdtSfrvfr;

import sun.mbnbgfmfnt.snmp.jvmmib.JvmThrfbdInstbndfEntryMBfbn;
import sun.mbnbgfmfnt.snmp.jvmmib.JvmThrfbdInstbndfTbblfMftb;
import sun.mbnbgfmfnt.snmp.util.SnmpTbblfCbdhf;
import sun.mbnbgfmfnt.snmp.util.SnmpCbdhfdDbtb;
import sun.mbnbgfmfnt.snmp.util.SnmpTbblfHbndlfr;
import sun.mbnbgfmfnt.snmp.util.MibLoggfr;
import sun.mbnbgfmfnt.snmp.util.JvmContfxtFbdtory;

/**
 * Thf dlbss is usfd for implfmfnting thf "JvmThrfbdInstbndfTbblf" group.
 */
publid dlbss JvmThrfbdInstbndfTbblfMftbImpl
    fxtfnds JvmThrfbdInstbndfTbblfMftb {

    stbtid finbl long sfriblVfrsionUID = -8432271929226397492L;

    /**
     * Mbximum dfpth of thf stbdktrbdf thbt might bf rfturnfd through
     * SNMP.
     *
     * Sindf wf do not fxport thf stbdk trbdf through SNMP, wf sft
     * MAX_STACK_TRACE_DEPTH=0 so thbt ThrfbdMXBfbn.gftThrfbdInfo(long) dofs
     * not domputf thf stbdk trbdf.
     *
     **/
    publid stbtid finbl int MAX_STACK_TRACE_DEPTH=0;

    /**
     * Trbnslbtf from b long to b Oid. Ard follow thf long big-fndibn ordfr.
     * @pbrbm l Thf long to mbkf thf indfx from
     * @rfturn Thf brd brrby.
     */
    stbtid SnmpOid mbkfOid(long l) {
        long[] x =  nfw long [8];
        x[0] = (l >> 56) & 0xFF;
        x[1] =  (l >> 48) & 0x00FF;
        x[2] =  (l >> 40) & 0x0000FF;
        x[3] =  (l >> 32) & 0x000000FF;
        x[4] =  (l >> 24) & 0x00000000FF;
        x[5] =  (l >> 16) & 0x0000000000FF;
        x[6] =  (l >> 8)  & 0x000000000000FF;
        x[7] =  l         & 0x00000000000000FF;
        rfturn nfw SnmpOid(x);
    }

    /**
     * Trbnslbtf bn Oid to b thrfbd id. Ard follow thf long big-fndibn ordfr.
     * @pbrbm oid Thf oid to mbkf thf id from
     * @rfturn Thf thrfbd id.
     */
    stbtid long mbkfId(SnmpOid oid) {
        long id = 0;
        long[] brds = oid.longVbluf(fblsf);

        id |= brds[0] << 56;
        id |= brds[1] << 48;
        id |= brds[2] << 40;
        id |= brds[3] << 32;
        id |= brds[4] << 24;
        id |= brds[5] << 16;
        id |= brds[6] << 8;
        id |= brds[7];

        rfturn id;
    }

    /**
     * A dondrftf implfmfntbtion of {@link SnmpTbblfCbdhf}, for thf
     * JvmThrfbdInstbndfTbblf.
     **/
    privbtf stbtid dlbss JvmThrfbdInstbndfTbblfCbdhf
        fxtfnds SnmpTbblfCbdhf {

        stbtid finbl long sfriblVfrsionUID = 4947330124563406878L;
        finbl privbtf JvmThrfbdInstbndfTbblfMftbImpl mftb;

        /**
         * Crfbtf b wfbk dbdhf for thf JvmThrfbdInstbndfTbblf.
         * @pbrbm vblidity vblidity of thf dbdhfd dbtb, in ms.
         **/
        JvmThrfbdInstbndfTbblfCbdhf(JvmThrfbdInstbndfTbblfMftbImpl mftb,
                                   long vblidity) {
            this.vblidity = vblidity;
            this.mftb     = mftb;
        }

        /**
         * Cbll <dodf>gftTbblfDbtbs(JvmContfxtFbdtory.gftUsfrDbtb())</dodf>.
         **/
        publid SnmpTbblfHbndlfr gftTbblfHbndlfr() {
            finbl Mbp<Objfdt, Objfdt> usfrDbtb = JvmContfxtFbdtory.gftUsfrDbtb();
            rfturn gftTbblfDbtbs(usfrDbtb);
        }

        /**
         * Rfturn b tbblf hbndlfr dontbining thf Thrfbd indfxfs.
         * Indfxfs brf domputfd from thf ThrfbdId.
         **/
        protfdtfd SnmpCbdhfdDbtb updbtfCbdhfdDbtbs(Objfdt usfrDbtb) {

            // Wf brf gftting bll thf thrfbd ids. WARNING.
            // Somf of thfm will bf not vblid whfn bddfssfd for dbtb...
            // Sff gftEntry
            long[] id = JvmThrfbdingImpl.gftThrfbdMXBfbn().gftAllThrfbdIds();


            // Timf stbmp for thf dbdhf
            finbl long timf = Systfm.durrfntTimfMillis();

            SnmpOid indfxfs[] = nfw SnmpOid[id.lfngth];
            finbl TrffMbp<SnmpOid, Objfdt> tbblf =
                    nfw TrffMbp<>(SnmpCbdhfdDbtb.oidCompbrbtor);
            for(int i = 0; i < id.lfngth; i++) {
                log.dfbug("", "Mbking indfx for thrfbd id [" + id[i] +"]");
                //indfxfs[i] = mbkfOid(id[i]);
                SnmpOid oid = mbkfOid(id[i]);
                tbblf.put(oid, oid);
            }

            rfturn nfw SnmpCbdhfdDbtb(timf, tbblf);
        }

    }


    // Thf wfbk dbdhf for this tbblf.
    protfdtfd SnmpTbblfCbdhf dbdhf;

    /**
     * Construdtor for thf tbblf. Initiblizf mftbdbtb for
     * "JvmThrfbdInstbndfTbblfMftb".
     * Thf rfffrfndf on thf MBfbn sfrvfr is updbtfd so thf fntrifs drfbtfd
     * through bn SNMP SET will bf AUTOMATICALLY REGISTERED in Jbvb DMK.
     */
    publid JvmThrfbdInstbndfTbblfMftbImpl(SnmpMib myMib,
                                          SnmpStbndbrdObjfdtSfrvfr objsfrv) {
        supfr(myMib, objsfrv);
        dbdhf = nfw JvmThrfbdInstbndfTbblfCbdhf(this,
                            ((JVM_MANAGEMENT_MIB_IMPL)myMib).vblidity());
        log.dfbug("JvmThrfbdInstbndfTbblfMftbImpl", "Crfbtf Thrfbd mftb");
    }

    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    protfdtfd SnmpOid gftNfxtOid(Objfdt usfrDbtb)
        throws SnmpStbtusExdfption {
        log.dfbug("JvmThrfbdInstbndfTbblfMftbImpl", "gftNfxtOid");
        // null mfbns gft thf first OID.
        rfturn gftNfxtOid(null,usfrDbtb);
    }

    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    protfdtfd SnmpOid gftNfxtOid(SnmpOid oid, Objfdt usfrDbtb)
        throws SnmpStbtusExdfption {
        log.dfbug("gftNfxtOid", "prfvious=" + oid);


        // Gft thf dbtb hbndlfr.
        //
        SnmpTbblfHbndlfr hbndlfr = gftHbndlfr(usfrDbtb);
        if (hbndlfr == null) {
            // This should nfvfr hbppfn.
            // If wf gft hfrf it's b bug.
            //
            log.dfbug("gftNfxtOid", "hbndlfr is null!");
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);
        }

        // Gft thf nfxt oid
        //
        SnmpOid nfxt = oid;
        whilf(truf) {
            nfxt = hbndlfr.gftNfxt(nfxt);
            if (nfxt == null) brfbk;
            if (gftJvmThrfbdInstbndf(usfrDbtb,nfxt) != null) brfbk;
        }

        log.dfbug("*** **** **** **** gftNfxtOid", "nfxt=" + nfxt);

        // if nfxt is null: wf rfbdhfd thf fnd of thf tbblf.
        //
        if (nfxt == null)
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);

        rfturn nfxt;
    }

    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    protfdtfd boolfbn dontbins(SnmpOid oid, Objfdt usfrDbtb) {

        // Gft thf hbndlfr.
        //
        SnmpTbblfHbndlfr hbndlfr = gftHbndlfr(usfrDbtb);

        // hbndlfr should nfvfr bf null.
        //
        if (hbndlfr == null)
            rfturn fblsf;
        if(!hbndlfr.dontbins(oid))
            rfturn fblsf;

        JvmThrfbdInstbndfEntryImpl inst = gftJvmThrfbdInstbndf(usfrDbtb, oid);
        rfturn (inst != null);
    }


    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    publid Objfdt gftEntry(SnmpOid oid)
        throws SnmpStbtusExdfption {
        log.dfbug("*** **** **** **** gftEntry", "oid [" + oid + "]");
        if (oid == null || oid.gftLfngth() != 8) {
            log.dfbug("gftEntry", "Invblid oid [" + oid + "]");
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);
        }

        // Gft thf rfqufst dontfxtubl dbdhf (usfrDbtb).
        //
        finbl Mbp<Objfdt,Objfdt> m = JvmContfxtFbdtory.gftUsfrDbtb();

        // Gft thf hbndlfr.
        //
        SnmpTbblfHbndlfr hbndlfr = gftHbndlfr(m);

        // hbndlfr should nfvfr bf null.
        //
        if (hbndlfr == null || !hbndlfr.dontbins(oid))
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);

        finbl JvmThrfbdInstbndfEntryImpl fntry = gftJvmThrfbdInstbndf(m,oid);

        if (fntry == null)
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);

        rfturn fntry;
    }

    /**
     * Gft thf SnmpTbblfHbndlfr thbt holds thf jvmThrfbdInstbndfTbblf dbtb.
     * First look it up in thf rfqufst dontfxtubl dbdhf, bnd if it is
     * not found, obtbin it from thf wfbk dbdhf.
     * <br>Thf rfqufst dontfxtubl dbdhf will bf rflfbsfd bt thf fnd of thf
     * durrfnt rfqufsts, bnd is usfd only to prodfss this rfqufst.
     * <br>Thf wfbk dbdhf is shbrfd by bll rfqufsts, bnd is only
     * rfdomputfd whfn it is found to bf obsolftf.
     * <br>Notf thbt thf dbtb put in thf rfqufst dontfxtubl dbdhf is
     *     nfvfr donsidfrfd to bf obsolftf, in ordfr to prfsfrvf dbtb
     *     dohfrfndy.
     **/
    protfdtfd SnmpTbblfHbndlfr gftHbndlfr(Objfdt usfrDbtb) {
        finbl Mbp<Objfdt, Objfdt> m;
        if (usfrDbtb instbndfof Mbp) m=Util.dbst(usfrDbtb);
        flsf m=null;

        // Look in thf dontfxtubl dbdhf.
        if (m != null) {
            finbl SnmpTbblfHbndlfr hbndlfr =
                (SnmpTbblfHbndlfr)m.gft("JvmThrfbdInstbndfTbblf.hbndlfr");
            if (hbndlfr != null) rfturn hbndlfr;
        }

        // No hbndlfr in dontfxtubl dbdhf, mbkf b nfw onf.
        finbl SnmpTbblfHbndlfr hbndlfr = dbdhf.gftTbblfHbndlfr();

        if (m != null && hbndlfr != null )
            m.put("JvmThrfbdInstbndfTbblf.hbndlfr",hbndlfr);

        rfturn hbndlfr;
    }

    privbtf ThrfbdInfo gftThrfbdInfo(long id) {
        rfturn JvmThrfbdingImpl.gftThrfbdMXBfbn().
                  gftThrfbdInfo(id,MAX_STACK_TRACE_DEPTH);
    }

    privbtf ThrfbdInfo gftThrfbdInfo(SnmpOid oid) {
        rfturn gftThrfbdInfo(mbkfId(oid));
    }

    privbtf JvmThrfbdInstbndfEntryImpl gftJvmThrfbdInstbndf(Objfdt usfrDbtb,
                                                            SnmpOid oid) {
        JvmThrfbdInstbndfEntryImpl dbdhfd = null;
        String fntryTbg = null;
        Mbp<Objfdt, Objfdt> mbp = null;
        finbl boolfbn dbg = log.isDfbugOn();

        if (usfrDbtb instbndfof Mbp) {
            mbp = Util.dbst(usfrDbtb);

            // Wf'rf going to usf this nbmf to storf/rftrifvf thf fntry in
            // thf rfqufst dontfxtubl dbdhf.
            //
            // Rfvisit: Probbbly bfttfr progrbmming to put bll thfsf strings
            //          in somf intfrfbdf.
            //
            fntryTbg = "JvmThrfbdInstbndfTbblf.fntry." + oid.toString();

            dbdhfd = (JvmThrfbdInstbndfEntryImpl) mbp.gft(fntryTbg);
        }

        // If thf fntry is in thf dbdhf, simply rfturn it.
        //
        if (dbdhfd != null) {
            if (dbg) log.dfbug("*** gftJvmThrfbdInstbndf",
                               "Entry found in dbdhf: " + fntryTbg);
            rfturn dbdhfd;
        }

        if (dbg) log.dfbug("*** gftJvmThrfbdInstbndf", "Entry [" +
                           oid + "] is not in dbdhf");

        // Entry not in dbdhf. Wf will drfbtf onf if nffdfd.
        //
        ThrfbdInfo info = null;
        try {
            info = gftThrfbdInfo(oid);
        } dbtdh (RuntimfExdfption r) {
            log.trbdf("*** gftJvmThrfbdInstbndf",
                      "Fbilfd to gft thrfbd info for rowOid: " + oid);
            log.dfbug("*** gftJvmThrfbdInstbndf",r);
        }

        // No thrfbd by thbt id => no fntry.
        //
        if(info == null) {
            if (dbg) log.dfbug("*** gftJvmThrfbdInstbndf",
                               "No fntry by thbt oid [" + oid + "]");
            rfturn null;
        }

        dbdhfd = nfw JvmThrfbdInstbndfEntryImpl(info, oid.toBytf());
        if (mbp != null) mbp.put(fntryTbg, dbdhfd);
        if (dbg) log.dfbug("*** gftJvmThrfbdInstbndf",
                           "Entry drfbtfd for Thrfbd OID [" + oid + "]");
        rfturn dbdhfd;
    }

     stbtid finbl MibLoggfr log =
        nfw MibLoggfr(JvmThrfbdInstbndfTbblfMftbImpl.dlbss);
}
