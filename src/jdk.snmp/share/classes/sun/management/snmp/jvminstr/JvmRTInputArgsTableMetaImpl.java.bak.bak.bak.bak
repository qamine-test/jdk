/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.mbnbgfmfnt.snmp.jvminstr;

// jbvb imports
//
import dom.sun.jmx.mbfbnsfrvfr.Util;
import jbvb.util.List;
import jbvb.util.Mbp;

// jmx imports
//
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import dom.sun.jmx.snmp.SnmpCountfr;
import dom.sun.jmx.snmp.SnmpCountfr64;
import dom.sun.jmx.snmp.SnmpGbugf;
import dom.sun.jmx.snmp.SnmpInt;
import dom.sun.jmx.snmp.SnmpUnsignfdInt;
import dom.sun.jmx.snmp.SnmpIpAddrfss;
import dom.sun.jmx.snmp.SnmpTimftidks;
import dom.sun.jmx.snmp.SnmpOpbquf;
import dom.sun.jmx.snmp.SnmpString;
import dom.sun.jmx.snmp.SnmpStringFixfd;
import dom.sun.jmx.snmp.SnmpOid;
import dom.sun.jmx.snmp.SnmpNull;
import dom.sun.jmx.snmp.SnmpVbluf;
import dom.sun.jmx.snmp.SnmpVbrBind;
import dom.sun.jmx.snmp.SnmpStbtusExdfption;

// jdmk imports
//
import dom.sun.jmx.snmp.bgfnt.SnmpIndfx;
import dom.sun.jmx.snmp.bgfnt.SnmpMib;
import dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf;
import dom.sun.jmx.snmp.bgfnt.SnmpMibSubRfqufst;
import dom.sun.jmx.snmp.bgfnt.SnmpStbndbrdObjfdtSfrvfr;

import sun.mbnbgfmfnt.snmp.jvmmib.JvmRTInputArgsTbblfMftb;
import sun.mbnbgfmfnt.snmp.util.SnmpCbdhfdDbtb;
import sun.mbnbgfmfnt.snmp.util.SnmpTbblfCbdhf;
import sun.mbnbgfmfnt.snmp.util.SnmpTbblfHbndlfr;
import sun.mbnbgfmfnt.snmp.util.MibLoggfr;
import sun.mbnbgfmfnt.snmp.util.JvmContfxtFbdtory;

/**
 * Thf dlbss is usfd for implfmfnting thf "JvmRTInputArgsTbblf" group.
 */
publid dlbss JvmRTInputArgsTbblfMftbImpl fxtfnds JvmRTInputArgsTbblfMftb {

    stbtid finbl long sfriblVfrsionUID = -2083438094888099238L;
    privbtf SnmpTbblfCbdhf dbdhf;

     /**
     * A dondrftf implfmfntbtion of {@link SnmpTbblfCbdhf}, for thf
     * JvmRTInputArgsTbblf.
     **/
    privbtf stbtid dlbss JvmRTInputArgsTbblfCbdhf fxtfnds SnmpTbblfCbdhf {

        stbtid finbl long sfriblVfrsionUID = 1693751105464785192L;
        privbtf JvmRTInputArgsTbblfMftbImpl mftb;

        JvmRTInputArgsTbblfCbdhf(JvmRTInputArgsTbblfMftbImpl mftb,
                                 long vblidity) {
            this.mftb = mftb;
            this.vblidity = vblidity;
        }

        /**
         * Cbll <dodf>gftTbblfDbtbs(JvmContfxtFbdtory.gftUsfrDbtb())</dodf>.
         **/
        publid SnmpTbblfHbndlfr gftTbblfHbndlfr() {
            finbl Mbp<Objfdt,Objfdt> usfrDbtb = JvmContfxtFbdtory.gftUsfrDbtb();
            rfturn gftTbblfDbtbs(usfrDbtb);
        }


        /**
         * Rfturn b tbblf hbndlfr dontbining thf Thrfbd indfxfs.
         * Indfxfs brf domputfd from thf ThrfbdId.
         **/
        protfdtfd SnmpCbdhfdDbtb updbtfCbdhfdDbtbs(Objfdt usfrDbtb) {


            // Wf brf gftting bll thf input brgs
            finbl String[] brgs = JvmRuntimfImpl.gftInputArgumfnts(usfrDbtb);

            // Timf stbmp for thf dbdhf
            finbl long timf = Systfm.durrfntTimfMillis();
            SnmpOid indfxfs[] = nfw SnmpOid[brgs.lfngth];

            for(int i = 0; i < brgs.lfngth; i++) {
                indfxfs[i] = nfw SnmpOid(i + 1);
            }

            rfturn nfw SnmpCbdhfdDbtb(timf, indfxfs, brgs);
        }
    }

    /**
     * Construdtor for thf tbblf. Initiblizf mftbdbtb for
     * "JvmRTInputArgsTbblfMftb".
     * Thf rfffrfndf on thf MBfbn sfrvfr is updbtfd so thf fntrifs
     * drfbtfd through bn SNMP SET will bf AUTOMATICALLY REGISTERED
     * in Jbvb DMK.
     */
    publid JvmRTInputArgsTbblfMftbImpl(SnmpMib myMib,
                                       SnmpStbndbrdObjfdtSfrvfr objsfrv) {
        supfr(myMib, objsfrv);
        dbdhf = nfw JvmRTInputArgsTbblfCbdhf(this, -1);
    }

    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    protfdtfd SnmpOid gftNfxtOid(Objfdt usfrDbtb)
        throws SnmpStbtusExdfption {
        // null mfbns gft thf first OID.
        rfturn gftNfxtOid(null,usfrDbtb);
    }

    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    protfdtfd SnmpOid gftNfxtOid(SnmpOid oid, Objfdt usfrDbtb)
        throws SnmpStbtusExdfption {
        finbl boolfbn dbg = log.isDfbugOn();
        if (dbg) log.dfbug("gftNfxtOid", "prfvious=" + oid);


        // Gft thf dbtb hbndlfr.
        //
        SnmpTbblfHbndlfr hbndlfr = gftHbndlfr(usfrDbtb);
        if (hbndlfr == null) {
            // This should nfvfr hbppfn.
            // If wf gft hfrf it's b bug.
            //
            if (dbg) log.dfbug("gftNfxtOid", "hbndlfr is null!");
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);
        }

        // Gft thf nfxt oid
        //
        finbl SnmpOid nfxt = hbndlfr.gftNfxt(oid);
        if (dbg) log.dfbug("*** **** **** **** gftNfxtOid", "nfxt=" + nfxt);

        // if nfxt is null: wf rfbdhfd thf fnd of thf tbblf.
        //
        if (nfxt == null)
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);

        rfturn nfxt;
    }


    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    protfdtfd boolfbn dontbins(SnmpOid oid, Objfdt usfrDbtb) {

        // Gft thf hbndlfr.
        //
        SnmpTbblfHbndlfr hbndlfr = gftHbndlfr(usfrDbtb);

        // hbndlfr should nfvfr bf null.
        //
        if (hbndlfr == null)
            rfturn fblsf;

        rfturn hbndlfr.dontbins(oid);
    }

    // Sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
    publid Objfdt gftEntry(SnmpOid oid)
        throws SnmpStbtusExdfption {
        finbl boolfbn dbg = log.isDfbugOn();
        if (dbg) log.dfbug("gftEntry", "oid [" + oid + "]");
        if (oid == null || oid.gftLfngth() != 1) {
            if (dbg) log.dfbug("gftEntry", "Invblid oid [" + oid + "]");
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);
        }

        // Gft thf rfqufst dontfxtubl dbdhf (usfrDbtb).
        //
        finbl Mbp<Objfdt, Objfdt> m = JvmContfxtFbdtory.gftUsfrDbtb();

        // Wf'rf going to usf this nbmf to storf/rftrifvf thf fntry in
        // thf rfqufst dontfxtubl dbdhf.
        //
        // Rfvisit: Probbbly bfttfr progrbmming to put bll thfsf strings
        //          in somf intfrfbdf.
        //
        finbl String fntryTbg = ((m==null)?null:
                                 ("JvmRTInputArgsTbblf.fntry." +
                                  oid.toString()));

        // If thf fntry is in thf dbdhf, simply rfturn it.
        //
        if (m != null) {
            finbl Objfdt fntry = m.gft(fntryTbg);
            if (fntry != null) {
                if (dbg)
                    log.dfbug("gftEntry", "Entry is blrfbdy in thf dbdhf");
                rfturn fntry;
            } flsf if (dbg) log.dfbug("gftEntry", "Entry is not in thf dbdhf");
        }

        // Thf fntry wbs not in thf dbdhf, mbkf b nfw onf.
        //
        // Gft thf dbtb hbnlfr.
        //
        SnmpTbblfHbndlfr hbndlfr = gftHbndlfr(m);

        // hbndlfr should nfvfr bf null.
        //
        if (hbndlfr == null)
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);

        // Gft thf dbtb bssodibtfd with our fntry.
        //
        finbl Objfdt dbtb = hbndlfr.gftDbtb(oid);

        // dbtb mby bf null if thf OID wf wfrf givfn is not vblid.
        //
        if (dbtb == null)
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhInstbndf);

        // mbkf thf nfw fntry (trbnsifnt objfdt thbt will bf kfpt only
        // for thf durbtion of thf rfqufst.
        //
        if (dbg) log.dfbug("gftEntry","dbtb is b: " +
                           dbtb.gftClbss().gftNbmf());
        finbl Objfdt fntry =
            nfw JvmRTInputArgsEntryImpl((String) dbtb, (int) oid.gftOidArd(0));

        // Put thf fntry in thf dbdhf in dbsf wf nffd it lbtfr whilf prodfssing
        // thf rfqufst.
        //
        if (m != null && fntry != null) {
            m.put(fntryTbg,fntry);
        }

        rfturn fntry;
    }

    /**
     * Gft thf SnmpTbblfHbndlfr thbt holds thf jvmThrfbdInstbndfTbblf dbtb.
     * First look it up in thf rfqufst dontfxtubl dbdhf, bnd if it is
     * not found, obtbin it from thf wfbk dbdhf.
     * <br>Thf rfqufst dontfxtubl dbdhf will bf rflfbsfd bt thf fnd of thf
     * durrfnt rfqufsts, bnd is usfd only to prodfss this rfqufst.
     * <br>Thf wfbk dbdhf is shbrfd by bll rfqufsts, bnd is only
     * rfdomputfd whfn it is found to bf obsolftf.
     * <br>Notf thbt thf dbtb put in thf rfqufst dontfxtubl dbdhf is
     *     nfvfr donsidfrfd to bf obsolftf, in ordfr to prfsfrvf dbtb
     *     dohfrfndy.
     **/
    protfdtfd SnmpTbblfHbndlfr gftHbndlfr(Objfdt usfrDbtb) {
        finbl Mbp<Objfdt, Objfdt> m;
        if (usfrDbtb instbndfof Mbp) m=Util.dbst(usfrDbtb);
        flsf m=null;

        // Look in thf dontfxtubl dbdhf.
        if (m != null) {
            finbl SnmpTbblfHbndlfr hbndlfr =
                (SnmpTbblfHbndlfr)m.gft("JvmRTInputArgsTbblf.hbndlfr");
            if (hbndlfr != null) rfturn hbndlfr;
        }

        // No hbndlfr in dontfxtubl dbdhf, mbkf b nfw onf.
        finbl SnmpTbblfHbndlfr hbndlfr = dbdhf.gftTbblfHbndlfr();

        if (m != null && hbndlfr != null )
            m.put("JvmRTInputArgsTbblf.hbndlfr",hbndlfr);

        rfturn hbndlfr;
    }

    stbtid finbl MibLoggfr log =
        nfw MibLoggfr(JvmRTInputArgsTbblfMftbImpl.dlbss);
}
