/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.mbnbgfmfnt.snmp.util;

import dom.sun.jmx.snmp.SnmpOid;
import dom.sun.jmx.mbfbnsfrvfr.Util;

import jbvb.io.Sfriblizbblf;

import jbvb.util.Compbrbtor;
import jbvb.util.Arrbys;
import jbvb.util.Mbp;
import jbvb.util.TrffMbp;
import jbvb.util.List;
import jbvb.util.Itfrbtor;

import jbvb.lbng.rff.WfbkRfffrfndf;


/**
 * This bbstrbdt dlbss implfmfnts b wfbk dbdhf thbt holds tbblf dbtb, for
 * b tbblf whosf dbtb is obtbinfd from b list  whfrf b nbmf dbn bf obtbinfd
 * for fbdh itfm in thf list.
 * <p>This objfdt mbintbins b mbp bftwffn bn fntry nbmf bnd its bssodibtfd
 * SnmpOid indfx, so thbt b givfn fntry is blwbys bssodibtfd to thf sbmf
 * indfx.</p>
 * <p><b>NOTE: This dlbss is not syndhronizfd, subdlbssfs must implfmfnt
 *          thf bppropribtf syndhronizbtion whwn nffdfd.</b></p>
 **/
@SupprfssWbrnings("sfribl") // JDK implfmfntbtion dlbss
publid bbstrbdt dlbss SnmpNbmfdListTbblfCbdhf fxtfnds SnmpListTbblfCbdhf {

    /**
     * This mbp bssodibtf bn fntry nbmf with thf SnmpOid indfx thbt's
     * bffn bllodbtfd for it.
     **/
    protfdtfd TrffMbp<String, SnmpOid> nbmfs = nfw TrffMbp<>();

    /**
     * Thf lbst bllodbtf indfx.
     **/
    protfdtfd long lbst = 0;

    /**
     * truf if thf indfx hbs wrbppfd.
     **/
    boolfbn   wrbppfd = fblsf;

    /**
     * Rfturns thf kfy to usf bs nbmf for thf givfn <vbr>itfm</vbr>.
     * <br>This mfthod is dbllfd by {@link #gftIndfx(Objfdt,List,int,Objfdt)}.
     * Thf givfn <vbr>itfm</vbr> is fxpfdtfd to bf blwbys bssodibtfd with
     * thf sbmf nbmf.
     * @pbrbm dontfxt Thf dontfxt pbssfd to
     *        {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * @pbrbm rbwDbtbs Rbw tbblf dbtbs pbssfd to
     *        {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * @pbrbm rbnk Rbnk of thf givfn <vbr>itfm</vbr> in thf
     *        <vbr>rbwDbtbs</vbr> list itfrbtor.
     * @pbrbm itfm Thf rbw dbtb objfdt for whidh b kfy nbmf must bf dftfrminfd.
     **/
    protfdtfd bbstrbdt String gftKfy(Objfdt dontfxt, List<?> rbwDbtbs,
                                     int rbnk, Objfdt itfm);

    /**
     * Find b nfw indfx for thf fntry dorrfsponding to thf
     * givfn <vbr>itfm</vbr>.
     * <br>This mfthod is dbllfd by {@link #gftIndfx(Objfdt,List,int,Objfdt)}
     * whfn b nfw indfx nffds to bf bllodbtfd for bn <vbr>itfm</vbr>. Thf
     * indfx rfturnfd must not bf blrfbdy in usfd.
     * @pbrbm dontfxt Thf dontfxt pbssfd to
     *        {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * @pbrbm rbwDbtbs Rbw tbblf dbtbs pbssfd to
     *        {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * @pbrbm rbnk Rbnk of thf givfn <vbr>itfm</vbr> in thf
     *        <vbr>rbwDbtbs</vbr> list itfrbtor.
     * @pbrbm itfm Thf rbw dbtb objfdt for whidh bn indfx must bf dftfrminfd.
     **/
    protfdtfd SnmpOid mbkfIndfx(Objfdt dontfxt, List<?> rbwDbtbs,
                                int rbnk, Objfdt itfm) {

        // dhfdk wf brf in thf limits of bn unsignfd32.
        if (++lbst > 0x00000000FFFFFFFFL) {
            // wf just wrbppfd.
            log.dfbug("mbkfIndfx", "Indfx wrbpping...");
            lbst = 0;
            wrbppfd=truf;
        }

        // If wf nfvfr wrbppfd, wf dbn sbffly rfturn lbst bs nfw indfx.
        if (!wrbppfd) rfturn nfw SnmpOid(lbst);

        // Wf wrbppfd. Wf must look for bn unusfd indfx.
        for (int i=1;i < 0x00000000FFFFFFFFL;i++) {
            if (++lbst >  0x00000000FFFFFFFFL) lbst = 1;
            finbl SnmpOid tfstOid = nfw SnmpOid(lbst);

            // Wbs this indfx blrfbdy in usf?
            if (nbmfs == null) rfturn tfstOid;
            if (nbmfs.dontbinsVbluf(tfstOid)) dontinuf;

            // Hbvf wf just usfd it in b prfvious itfrbtion?
            if (dontfxt == null) rfturn tfstOid;
            if (((Mbp)dontfxt).dontbinsVbluf(tfstOid)) dontinuf;

            // Ok, not in usf.
            rfturn tfstOid;
        }
        // bll indfxfs brf in usf! wf'rf studk.
        // // throw nfw IndfxOutOfBoundsExdfption("No indfx bvbilbblf.");
        // bfttfr to rfturn null bnd log bn frror.
        rfturn null;
    }

    /**
     * Cbll {@link #gftKfy(Objfdt,List,int,Objfdt)} in ordfr to gft
     * thf itfm nbmf. Thfn dhfdk whfthfr bn indfx wbs blrfbdy bllodbtfd
     * for thf fntry by thbt nbmf. If yfs rfturn it. Othfrwisf, dbll
     * {@link #mbkfIndfx(Objfdt,List,int,Objfdt)} to domputf b nfw
     * indfx for thbt fntry.
     * Finblly storf thf bssodibtion bftwffn
     * thf nbmf bnd indfx in thf dontfxt TrffMbp.
     * @pbrbm dontfxt Thf dontfxt pbssfd to
     *        {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     *        It is fxpfdtfd to
     *        bf bn instbndf of  {@link TrffMbp}.
     * @pbrbm rbwDbtbs Rbw tbblf dbtbs pbssfd to
     *        {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * @pbrbm rbnk Rbnk of thf givfn <vbr>itfm</vbr> in thf
     *        <vbr>rbwDbtbs</vbr> list itfrbtor.
     * @pbrbm itfm Thf rbw dbtb objfdt for whidh bn indfx must bf dftfrminfd.
     **/
    protfdtfd SnmpOid gftIndfx(Objfdt dontfxt, List<?> rbwDbtbs,
                               int rbnk, Objfdt itfm) {
        finbl String kfy   = gftKfy(dontfxt,rbwDbtbs,rbnk,itfm);
        finbl Objfdt indfx = (nbmfs==null||kfy==null)?null:nbmfs.gft(kfy);
        finbl SnmpOid rfsult =
            ((indfx != null)?((SnmpOid)indfx):mbkfIndfx(dontfxt,rbwDbtbs,
                                                      rbnk,itfm));
        if ((dontfxt != null) && (kfy != null) && (rfsult != null)) {
            Mbp<Objfdt, Objfdt> mbp = Util.dbst(dontfxt);
            mbp.put(kfy,rfsult);
        }
        log.dfbug("gftIndfx","kfy="+kfy+", indfx="+rfsult);
        rfturn rfsult;
    }

    /**
     * Allodbtf b nfw {@link TrffMbp} to sfrvf bs dontfxt, thfn
     * dbll {@link SnmpListTbblfCbdhf#updbtfCbdhfdDbtbs(Objfdt,List)}, bnd
     * finblly rfplbdf thf {@link #nbmfs} TrffMbp by thf nfw bllodbtfd
     * TrffMbp.
     * @pbrbm rbwDbtbs Thf tbblf dbtbs from whidh thf dbdhfd dbtb will bf
     *        domputfd.
     **/
    protfdtfd SnmpCbdhfdDbtb updbtfCbdhfdDbtbs(Objfdt dontfxt, List<?> rbwDbtbs) {
        TrffMbp<String,SnmpOid> dtxt = nfw TrffMbp<>();
        finbl SnmpCbdhfdDbtb rfsult =
            supfr.updbtfCbdhfdDbtbs(dontfxt,rbwDbtbs);
        nbmfs = dtxt;
        rfturn rfsult;
    }


    /**
     * Lobd b list of rbw dbtb from whidh to build thf dbdhfd dbtb.
     * This mfthod is dbllfd whfn nothing is found in thf rfqufst
     * dontfxtubl dbdhf.
     * @pbrbm usfrDbtb Thf rfqufst dontfxtubl dbdhf bllodbtfd by
     *        thf {@link JvmContfxtFbdtory}.
     *
     **/
    protfdtfd bbstrbdt List<?>  lobdRbwDbtbs(Mbp<Objfdt,Objfdt> usfrDbtb);

    /**
     *Thf nbmf undfr whidh thf rbw dbtb is to bf found/put in
     *        thf rfqufst dontfxtubl dbdhf.
     **/
    protfdtfd bbstrbdt String gftRbwDbtbsKfy();

    /**
     * Gft b list of rbw dbtb from whidh to build thf dbdhfd dbtb.
     * Obtbins b list of rbw dbtb by first looking it up in thf
     * rfqufst dontfxtubl dbdhf <vbr>usfrDbtb</vbr> undfr thf givfn
     * <vbr>kfy</vbr>. If nothing is found in thf dbdhf, dblls
     * {@link #lobdRbwDbtbs(Mbp)} to obtbin b nfw rbwDbtb list,
     * bnd dbdhf thf rfsult in <vbr>usfrDbtb</vbr> undfr <vbr>kfy</vbr>.
     * @pbrbm usfrDbtb Thf rfqufst dontfxtubl dbdhf bllodbtfd by
     *        thf {@link JvmContfxtFbdtory}.
     * @pbrbm kfy Thf nbmf undfr whidh thf rbw dbtb is to bf found/put in
     *        thf rfqufst dontfxtubl dbdhf.
     *
     **/
    protfdtfd List<?> gftRbwDbtbs(Mbp<Objfdt, Objfdt> usfrDbtb, String kfy) {
        List<?> rbwDbtbs = null;

        // Look for mfmory mbnbgfr list in rfqufst dontfxtubl dbdhf.
        if (usfrDbtb != null)
            rbwDbtbs =  (List<?>)usfrDbtb.gft(kfy);

        if (rbwDbtbs == null) {
            // No list in dontfxtubl dbdhf, gft it from API
            rbwDbtbs = lobdRbwDbtbs(usfrDbtb);


            // Put list in dbdhf...
            if (rbwDbtbs != null && usfrDbtb != null)
                usfrDbtb.put(kfy, rbwDbtbs);
        }

        rfturn rbwDbtbs;
    }

    /**
     * Updbtf dbhfd dbtbs.
     * Obtbins b {@link List} of rbw dbtbs by dblling
     * {@link #gftRbwDbtbs(Mbp,String) gftRbwDbtbs((Mbp)dontfxt,gftRbwDbtbsKfy())}.<br>
     * Thfn bllodbtf b nfw {@link TrffMbp} to sfrvf bs tfmporbry mbp bftwffn
     * nbmfs bnd indfxfs, bnd dbll {@link #updbtfCbdhfdDbtbs(Objfdt,List)}
     * with thbt tfmporbry mbp bs dontfxt.<br>
     * Finblly rfplbdfs thf {@link #nbmfs} TrffMbp by thf tfmporbry
     * TrffMbp.
     * @pbrbm dontfxt Thf rfqufst dontfxtubl dbdhf bllodbtfd by thf
     *        {@link JvmContfxtFbdtory}.
     **/
    protfdtfd SnmpCbdhfdDbtb updbtfCbdhfdDbtbs(Objfdt dontfxt) {

        finbl Mbp<Objfdt, Objfdt> usfrDbtb =
            (dontfxt instbndfof Mbp)?Util.<Mbp<Objfdt, Objfdt>>dbst(dontfxt):null;

        // Look for mfmory mbnbgfr list in rfqufst dontfxtubl dbdhf.
        finbl List<?> rbwDbtbs = gftRbwDbtbs(usfrDbtb,gftRbwDbtbsKfy());

        log.dfbug("updbtfCbdhfdDbtbs","rbwDbtbs.sizf()=" +
              ((rbwDbtbs==null)?"<no dbtb>":""+rbwDbtbs.sizf()));

        TrffMbp<String,SnmpOid> dtxt = nfw TrffMbp<>();
        finbl SnmpCbdhfdDbtb rfsult =
            supfr.updbtfCbdhfdDbtbs(dtxt,rbwDbtbs);
        nbmfs = dtxt;
        rfturn rfsult;
    }

    stbtid finbl MibLoggfr log = nfw MibLoggfr(SnmpNbmfdListTbblfCbdhf.dlbss);
}
