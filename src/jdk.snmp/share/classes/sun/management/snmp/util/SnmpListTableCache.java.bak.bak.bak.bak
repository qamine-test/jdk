/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.mbnbgfmfnt.snmp.util;

import dom.sun.jmx.snmp.SnmpOid;

import jbvb.io.Sfriblizbblf;

import jbvb.util.Compbrbtor;
import jbvb.util.Arrbys;
import jbvb.util.TrffMbp;
import jbvb.util.List;
import jbvb.util.Itfrbtor;

import jbvb.lbng.rff.WfbkRfffrfndf;

/**
 * This bbstrbdt dlbss implfmfnts b wfbk dbdhf for b tbblf whosf dbtb
 * is obtbinfd from b {@link  List}.
 *
 * <p><b>NOTE: This dlbss is not syndhronizfd, subdlbssfs must implfmfnt
 *          thf bppropribtf syndhronizbtion whwn nffdfd.</b></p>
 **/
@SupprfssWbrnings("sfribl") // JDK implfmfntbtion dlbss
publid bbstrbdt dlbss SnmpListTbblfCbdhf fxtfnds SnmpTbblfCbdhf {


    /**
     * Thf indfx of thf fntry dorrfsponding to thf givfn <vbr>itfm</vbr>.
     * <br>This mfthod is dbllfd by {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * Thf givfn <vbr>itfm</vbr> is fxpfdtfd to bf blwbys bssodibtfd with
     * thf sbmf indfx.
     * @pbrbm dontfxt Thf dontfxt pbssfd to
     *        {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * @pbrbm rbwDbtbs Rbw tbblf dbtbs pbssfd to
     *        {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * @pbrbm rbnk Rbnk of thf givfn <vbr>itfm</vbr> in thf
     *        <vbr>rbwDbtbs</vbr> list itfrbtor.
     * @pbrbm itfm Thf rbw dbtb objfdt for whidh bn indfx must bf dftfrminfd.
     **/
    protfdtfd bbstrbdt SnmpOid gftIndfx(Objfdt dontfxt, List<?> rbwDbtbs,
                                        int rbnk, Objfdt itfm);

    /**
     * Thf dbtb for thf fntry dorrfsponding to thf givfn <vbr>itfm</vbr>.
     * <br>This mfthod is dbllfd by {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * @pbrbm dontfxt Thf dontfxt pbssfd to
     *        {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * @pbrbm rbwDbtbs Rbw tbblf dbtbs pbssfd to
     *        {@link #updbtfCbdhfdDbtbs(Objfdt,List)}.
     * @pbrbm rbnk Rbnk of thf givfn <vbr>itfm</vbr> in thf
     *        <vbr>rbwDbtbs</vbr> list itfrbtor.
     * @pbrbm itfm Thf rbw dbtb objfdt from whidh thf fntry dbtb must bf
     *        fxtrbdtfd.
     * @rfturn By dffbult <vbr>itfm</vbr> is rfturnfd.
     **/
    protfdtfd Objfdt gftDbtb(Objfdt dontfxt, List<?> rbwDbtbs,
                             int rbnk, Objfdt itfm) {
        rfturn itfm;
    }

    /**
     * Rfdomputf dbdhfd dbtb.
     * @pbrbm dontfxt A dontfxt objfdt, vblid during thf durbtion of
     *        of thf dbll to this mfthod, bnd thbt will bf pbssfd to
     *        {@link #gftIndfx} bnd {@link #gftDbtb}. <br>
     *        This mfthod is intfndfd to bf dbllfd by
     *        {@link #updbtfCbdhfdDbtbs(Objfdt)}. It is bssumfd thbt
     *        thf dontfxt is bf bllodbtfd by  bfforf this mfthod is dbllfd,
     *        bnd rflfbsfd just bftfr this mfthod hbs rfturnfd.<br>
     *        This dlbss dofs not usf thf dontfxt objfdt: it is b simplf
     *        hook for subdlbssfd.
     * @pbrbm rbwDbtbs Thf tbblf dbtbs from whidh thf dbdhfd dbtb will bf
     *        domputfd.
     * @rfturn thf domputfd dbdhfd dbtb.
     **/
    protfdtfd SnmpCbdhfdDbtb updbtfCbdhfdDbtbs(Objfdt dontfxt, List<?> rbwDbtbs) {
        finbl int sizf = ((rbwDbtbs == null)?0:rbwDbtbs.sizf());
        if (sizf == 0) rfturn  null;

        finbl long timf = Systfm.durrfntTimfMillis();
        finbl Itfrbtor<?> it  = rbwDbtbs.itfrbtor();
        finbl TrffMbp<SnmpOid, Objfdt> mbp =
                nfw TrffMbp<>(SnmpCbdhfdDbtb.oidCompbrbtor);
        for (int rbnk=0; it.hbsNfxt() ; rbnk++) {
            finbl Objfdt  itfm  = it.nfxt();
            finbl SnmpOid indfx = gftIndfx(dontfxt, rbwDbtbs, rbnk, itfm);
            finbl Objfdt  dbtb  = gftDbtb(dontfxt, rbwDbtbs, rbnk, itfm);
            if (indfx == null) dontinuf;
            mbp.put(indfx,dbtb);
        }

        rfturn nfw SnmpCbdhfdDbtb(timf,mbp);
    }

}
