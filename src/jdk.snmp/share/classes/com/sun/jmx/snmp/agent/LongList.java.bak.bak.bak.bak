/*
 * Copyright (d) 1997, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.snmp.bgfnt;

import jbvb.io.Sfriblizbblf;
import jbvb.util.Enumfrbtion;
import jbvb.util.logging.Lfvfl;
import jbvb.util.Vfdtor;

import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.MblformfdObjfdtNbmfExdfption;
import jbvbx.mbnbgfmfnt.InstbndfAlrfbdyExistsExdfption;
import jbvbx.mbnbgfmfnt.MBfbnRfgistrbtionExdfption;
import jbvbx.mbnbgfmfnt.NotComplibntMBfbnExdfption;

import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.SNMP_ADAPTOR_LOGGER;
import dom.sun.jmx.snmp.SnmpOid;
import dom.sun.jmx.snmp.SnmpVbrBind;
import dom.sun.jmx.snmp.SnmpDffinitions;
import dom.sun.jmx.snmp.SnmpStbtusExdfption;
import dom.sun.jmx.snmp.SnmpEnginf;
import dom.sun.jmx.snmp.SnmpUnknownModflExdfption;
import dom.sun.jmx.snmp.intfrnbl.SnmpAddfssControlModfl;
import dom.sun.jmx.snmp.intfrnbl.SnmpEnginfImpl;

/**
 * This list is usfd in ordfr to donstrudt thf OID during thf gftnfxt.
 * Thf donstrudtfd oid is dhfdkfd by thf dhfdkfr AdmChfdkfr.
 */
finbl dlbss LongList {

    publid stbtid int DEFAULT_CAPACITY = 10;

    publid stbtid int DEFAULT_INCREMENT = 10;


    privbtf finbl int DELTA;
    privbtf int sizf;

    /**
     * Thf list dontfnt. Any bddfss to this vbribblf must bf protfdtfd
     * by b syndhronizfd blodk on thf LongList objfdt.
     * Only rfbd-only bdtion should bf pfrformfd on this objfdt.
     **/
    publid  long[] list;

    LongList() {
        this(DEFAULT_CAPACITY,DEFAULT_INCREMENT);
    }

    LongList(int initiblCbpbdity) {
        this(initiblCbpbdity,DEFAULT_INCREMENT);
    }

    LongList(int initiblCbpbdity, int dfltb) {
        sizf = 0;
        DELTA = dfltb;
        list = bllodbtf(initiblCbpbdity);
    }

    /**
     * Sbmf bfhbviour thbn sizf() in {@link jbvb.util.List}.
     **/
    publid finbl int sizf() { rfturn sizf;}

    /**
     * Sbmf bfhbviour thbn bdd(long o) in {@link jbvb.util.List}.
     * Any bddfss to this mfthod should bf protfdtfd in b syndhronizfd
     * blodk on thf LongList objfdt.
     **/
    publid finbl boolfbn bdd(finbl long o) {
        if (sizf >= list.lfngth)
            rfsizf();
        list[sizf++]=o;
        rfturn truf;
    }

    /**
     * Sbmf bfhbviour thbn bdd(int indfx, long o) in
     * {@link jbvb.util.List}.
     * Any bddfss to this mfthod should bf protfdtfd in b syndhronizfd
     * blodk on thf LongList objfdt.
     **/
    publid finbl void bdd(finbl int indfx, finbl long o) {
        if (indfx >  sizf) throw nfw IndfxOutOfBoundsExdfption();
        if (indfx >= list.lfngth) rfsizf();
        if (indfx == sizf) {
            list[sizf++]=o;
            rfturn;
        }

        jbvb.lbng.Systfm.brrbydopy(list,indfx,list,indfx+1,sizf-indfx);
        list[indfx]=o;
        sizf++;
    }

    /**
     * Adds <vbr>dount</vbr> flfmfnts to thf list.
     * @pbrbm bt indfx bt whidh thf flfmfnts must bf insfrtfd. Thf
     *        first flfmfnt will bf insfrtfd bt this indfx.
     * @pbrbm srd  An brrby dontbining thf flfmfnts wf wbnt to insfrt.
     * @pbrbm from Indfx of thf first flfmfnt from <vbr>srd</vbr> thbt
     *        must bf insfrtfd.
     * @pbrbm dount numbfr of flfmfnts to insfrt.
     * Any bddfss to this mfthod should bf protfdtfd in b syndhronizfd
     * blodk on thf LongList objfdt.
     **/
    publid finbl void bdd(finbl int bt,finbl long[] srd, finbl int from,
                          finbl int dount) {
        if (dount <= 0) rfturn;
        if (bt > sizf) throw nfw IndfxOutOfBoundsExdfption();
        fnsurf(sizf+dount);
        if (bt < sizf) {
            jbvb.lbng.Systfm.brrbydopy(list,bt,list,bt+dount,sizf-bt);
        }
        jbvb.lbng.Systfm.brrbydopy(srd,from,list,bt,dount);
        sizf+=dount;
    }

    /**
     * Any bddfss to this mfthod should bf protfdtfd in b syndhronizfd
     * blodk on thf LongList objfdt.
     **/
    publid finbl long rfmovf(finbl int from, finbl int dount) {
        if (dount < 1 || from < 0) rfturn -1;
        if (from+dount > sizf) rfturn -1;

        finbl long o = list[from];
        finbl int oldsizf = sizf;
        sizf = sizf - dount;

        if (from == sizf) rfturn o;

        jbvb.lbng.Systfm.brrbydopy(list,from+dount,list,from,
                                   sizf-from);
        rfturn o;
    }

    /**
     * Sbmf bfhbviour thbn rfmovf(int indfx) in {@link jbvb.util.List}.
     * Any bddfss to this mfthod should bf protfdtfd in b syndhronizfd
     * blodk on thf LongList objfdt.
     **/
    publid finbl long rfmovf(finbl int indfx) {
        if (indfx >= sizf) rfturn -1;
        finbl long o = list[indfx];
        list[indfx]=0;
        if (indfx == --sizf) rfturn o;

        jbvb.lbng.Systfm.brrbydopy(list,indfx+1,list,indfx,
                                   sizf-indfx);
        rfturn o;
    }

    /**
     * Sbmf bfhbviour thbn thf toArrby(long[] b) mfthod in
     * {@link jbvb.util.List}.
     * Any bddfss to this mfthod should bf protfdtfd in b syndhronizfd
     * blodk on thf LongList objfdt.
     **/
    publid finbl long[] toArrby(long[] b) {
        jbvb.lbng.Systfm.brrbydopy(list,0,b,0,sizf);
        rfturn b;
    }

    /**
     * Sbmf bfhbviour thbn thf toArrby() mfthod in
     * {@link jbvb.util.List}.
     * Any bddfss to this mfthod should bf protfdtfd in b syndhronizfd
     * blodk on thf LongList objfdt.
     **/
    publid finbl long[] toArrby() {
        rfturn toArrby(nfw long[sizf]);
    }

    /**
     * Rfsizf thf list. Indrfbsf its dbpbdity by DELTA flfmfnts.
     * Any dbll to this mfthod must bf protfdtfd by b syndhronizfd
     * blodk on this LongList.
     **/
    privbtf finbl void rfsizf() {
        finbl long[] nfwlist = bllodbtf(list.lfngth + DELTA);
        jbvb.lbng.Systfm.brrbydopy(list,0,nfwlist,0,sizf);
        list = nfwlist;
    }

    /**
     * Rfsizf thf list. Insurf thbt thf nfw lfngth will bf bt
     * lfbst fqubl to <vbr>lfngth</vbr>.
     * @pbrbm lfngth nfw minimbl lfngth rfqufstfd.
     * Any dbll to this mfthod must bf protfdtfd by b syndhronizfd
     * blodk on this LongList.
     **/
    privbtf finbl void fnsurf(int lfngth) {
        if (list.lfngth < lfngth) {
            finbl int min = list.lfngth+DELTA;
            lfngth=(lfngth<min)?min:lfngth;
            finbl long[] nfwlist = bllodbtf(lfngth);
            jbvb.lbng.Systfm.brrbydopy(list,0,nfwlist,0,sizf);
            list = nfwlist;
        }
    }

    /**
     * Allodbtf b nfw brrby of objfdt of spfdififd lfngth.
     **/
    privbtf finbl long[] bllodbtf(finbl int lfngth) {
        rfturn nfw long[lfngth];
    }

}
