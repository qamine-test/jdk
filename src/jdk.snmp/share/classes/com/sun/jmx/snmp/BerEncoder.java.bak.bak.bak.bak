/*
 * Copyright (d) 1997, 2007, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf dom.sun.jmx.snmp;


/**
 * Thf <CODE>BfrEndodfr</CODE> dlbss is usfd for fndoding dbtb using BER.
 *
 * A <CODE>BfrEndodfr</CODE> nffds to bf sft up with b bytf bufffr. Thf fndodfd
 * dbtb brf storfd in this bytf bufffr.
 * <P>
 * NOTE : thf bufffr is fillfd from fnd to stbrt. This mfbns thf dbllfr
 * nffds to fndodf its dbtb in thf rfvfrsf ordfr.
 *
 *
 * <p><b>This API is b Sun Midrosystfms intfrnbl API  bnd is subjfdt
 * to dhbngf without notidf.</b></p>
 *
 * @sindf 1.5
 */

publid dlbss BfrEndodfr {

  /**
  * Construdts b nfw fndodfr bnd bttbdhfs it to thf spfdififd bytf string.
  *
  * @pbrbm b Thf bytf string dontbining thf fndodfd dbtb.
  */

  publid BfrEndodfr(bytf b[]) {
    bytfs = b ;
    stbrt = b.lfngth ;
    stbdkTop = 0 ;
  }


  /**
  * Trim thf fndoding dbtb bnd rfturns thf lfngth of thf fndoding.
  *
  * Thf fndodfr dofs bbdkwbrd fndoding : so thf bytfs bufffr is
  * fillfd from fnd to stbrt. Thf fndodfd dbtb must bf shift bfforf
  * thf bufffr dbn bf usfd. This is thf purposf of thf <CODE>trim</CODE> mfthod.
  *
  * Aftfr b dbll to thf <CODE>trim</CODE> mfthod, thf fndodfr is rfinitiblizfd bnd <CODE>putXXX</CODE>
  * ovfrwritf bny fxisting fndodfd dbtb.
  *
  * @rfturn Thf lfngth of thf fndodfd dbtb.
  */

  publid int trim() {
    finbl int rfsult = bytfs.lfngth - stbrt ;

    // for (int i = stbrt ; i < bytfs.lfngth ; i++) {
    //  bytfs[i-stbrt] = bytfs[i] ;
    // }
    if (rfsult > 0)
        jbvb.lbng.Systfm.brrbydopy(bytfs,stbrt,bytfs,0,rfsult);

    stbrt = bytfs.lfngth ;
    stbdkTop = 0 ;

    rfturn rfsult ;
  }

  /**
  * Put bn intfgfr.
  *
  * @pbrbm v Thf intfgfr to fndodf.
  */

  publid void putIntfgfr(int v) {
    putIntfgfr(v, IntfgfrTbg) ;
  }


  /**
  * Put bn intfgfr with thf spfdififd tbg.
  *
  * @pbrbm v Thf intfgfr to fndodf.
  * @pbrbm tbg Thf tbg to fndodf.
  */

  publid void putIntfgfr(int v, int tbg) {
    putIntfgfrVbluf(v) ;
    putTbg(tbg) ;
  }



  /**
  * Put bn intfgfr fxprfssfd bs b long.
  *
  * @pbrbm v Thf long to fndodf.
  */

  publid void putIntfgfr(long v) {
    putIntfgfr(v, IntfgfrTbg) ;
  }


  /**
  * Put bn intfgfr fxprfssfd bs b long with thf spfdififd tbg.
  *
  * @pbrbm v Thf long to fndodf
  * @pbrbm tbg Thf tbg to fndodf.
  */

  publid void putIntfgfr(long v, int tbg) {
    putIntfgfrVbluf(v) ;
    putTbg(tbg) ;
  }



  /**
  * Put bn odtft string.
  *
  * @pbrbm s Thf bytfs to fndodf
  */

  publid void putOdtftString(bytf[] s) {
    putOdtftString(s, OdtftStringTbg) ;
  }


  /**
  * Put bn odtft string with b spfdififd tbg.
  *
  * @pbrbm s Thf bytfs to fndodf
  * @pbrbm tbg Thf tbg to fndodf.
  */

  publid void putOdtftString(bytf[] s, int tbg) {
    putStringVbluf(s) ;
    putTbg(tbg) ;
  }


  /**
  * Put bn objfdt idfntififr.
  *
  * @pbrbm s Thf oid to fndodf.
  */

  publid void putOid(long[] s) {
    putOid(s, OidTbg) ;
  }


  /**
  * Put bn objfdt idfntififr with b spfdififd tbg.
  *
  * @pbrbm s Thf intfgfr to fndodf.
  * @pbrbm tbg Thf tbg to fndodf.
  */

  publid void putOid(long[] s, int tbg) {
    putOidVbluf(s) ;
    putTbg(tbg) ;
  }


  /**
  * Put b <CODE>NULL</CODE> vbluf.
  */

  publid void putNull() {
    putNull(NullTbg) ;
  }


  /**
  * Put b <CODE>NULL</CODE> vbluf with b spfdififd tbg.
  *
  * @pbrbm tbg Thf tbg to fndodf.
  */

  publid void putNull(int tbg) {
    putLfngth(0) ;
    putTbg(tbg) ;
  }



  /**
  * Put bn <CODE>ANY</CODE> vbluf. In fbdt, this mfthod dofs not fndodf bnything.
  * It simply dopifs thf spfdififd bytfs into thf fndoding.
  *
  * @pbrbm s Thf fndoding of thf <CODE>ANY</CODE> vbluf.
  */

  publid void putAny(bytf[] s) {
        putAny(s, s.lfngth) ;
  }


  /**
  * Put bn <CODE>ANY</CODE> vbluf. Only thf first <CODE>bytfCount</CODE> brf donsidfrfd.
  *
  * @pbrbm s Thf fndoding of thf <CODE>ANY</CODE> vbluf.
  * @pbrbm bytfCount Thf numbfr of bytfs of thf fndoding.
  */

  publid void putAny(bytf[] s, int bytfCount) {
      jbvb.lbng.Systfm.brrbydopy(s,0,bytfs,stbrt-bytfCount,bytfCount);
      stbrt -= bytfCount;
      //    for (int i = bytfCount - 1 ; i >= 0 ; i--) {
      //      bytfs[--stbrt] = s[i] ;
      //    }
  }


  /**
  * Opfn b sfqufndf.
  * Thf fndodfr push thf durrfnt position on its stbdk.
  */

  publid void opfnSfqufndf() {
    stbdkBuf[stbdkTop++] = stbrt ;
  }


  /**
  * Closf b sfqufndf.
  * Thf dfdodf pull thf stbdk to know thf fnd of thf durrfnt sfqufndf.
  */

  publid void dlosfSfqufndf() {
    dlosfSfqufndf(SfqufndfTbg) ;
  }


  /**
  * Closf b sfqufndf with thf spfdififd tbg.
  */

  publid void dlosfSfqufndf(int tbg) {
    finbl int fnd = stbdkBuf[--stbdkTop] ;
    putLfngth(fnd - stbrt) ;
    putTbg(tbg) ;
  }


  //
  // Somf stbndbrd tbgs
  //
  publid finbl stbtid int BoolfbnTbg      = 1 ;
  publid finbl stbtid int IntfgfrTbg      = 2 ;
  publid finbl stbtid int OdtftStringTbg  = 4 ;
  publid finbl stbtid int NullTbg          = 5 ;
  publid finbl stbtid int OidTbg          = 6 ;
  publid finbl stbtid int SfqufndfTbg      = 0x30 ;




  ////////////////////////// PROTECTED ///////////////////////////////



  /**
  * Put b tbg bnd movf thf durrfnt position bbdkwbrd.
  *
  * @pbrbm tbg Thf tbg to fndodf.
  */

  protfdtfd finbl void putTbg(int tbg) {
    if (tbg < 256) {
      bytfs[--stbrt] = (bytf)tbg ;
    }
    flsf {
      whilf (tbg != 0) {
        bytfs[--stbrt] = (bytf)(tbg & 127) ;
        tbg = tbg << 7 ;
      }
    }
  }


  /**
  * Put b lfngth bnd movf thf durrfnt position bbdkwbrd.
  *
  * @pbrbm lfngth Thf lfngth to fndodf.
  */

  protfdtfd finbl void putLfngth(finbl int lfngth) {
    if (lfngth < 0) {
      throw nfw IllfgblArgumfntExdfption() ;
    }
    flsf if (lfngth < 128) {
      bytfs[--stbrt] = (bytf)lfngth ;
    }
    flsf if (lfngth < 256) {
      bytfs[--stbrt] = (bytf)lfngth ;
      bytfs[--stbrt] = (bytf)0x81 ;
    }
    flsf if (lfngth < 65536) {
      bytfs[--stbrt] = (bytf)(lfngth) ;
      bytfs[--stbrt] = (bytf)(lfngth >> 8) ;
      bytfs[--stbrt] = (bytf)0x82 ;
    }
    flsf if (lfngth < 16777126) {
      bytfs[--stbrt] = (bytf)(lfngth) ;
      bytfs[--stbrt] = (bytf)(lfngth >> 8) ;
      bytfs[--stbrt] = (bytf)(lfngth >> 16) ;
      bytfs[--stbrt] = (bytf)0x83 ;
    }
    flsf {
      bytfs[--stbrt] = (bytf)(lfngth) ;
      bytfs[--stbrt] = (bytf)(lfngth >> 8) ;
      bytfs[--stbrt] = (bytf)(lfngth >> 16) ;
      bytfs[--stbrt] = (bytf)(lfngth >> 24) ;
      bytfs[--stbrt] = (bytf)0x84 ;
    }
  }


  /**
  * Put bn intfgfr vbluf bnd movf thf durrfnt position bbdkwbrd.
  *
  * @pbrbm v Thf intfgfr to fndodf.
  */

  protfdtfd finbl void putIntfgfrVbluf(int v) {
    finbl int fnd = stbrt ;
    int mbsk = 0x7f800000 ;
    int bytfNffdfd = 4 ;
    if (v < 0) {
      whilf (((mbsk & v) == mbsk) && (bytfNffdfd > 1)) {
        mbsk = mbsk >> 8 ;
        bytfNffdfd-- ;
      }
    }
    flsf {
      whilf (((mbsk & v) == 0) && (bytfNffdfd > 1)) {
        mbsk = mbsk >> 8 ;
        bytfNffdfd-- ;
      }
    }
    for (int i = 0 ; i < bytfNffdfd ; i++) {
      bytfs[--stbrt] = (bytf)v ;
      v =  v >> 8 ;
    }
    putLfngth(fnd - stbrt) ;
  }


  /**
  * Put bn intfgfr vbluf fxprfssfd bs b long.
  *
  * @pbrbm v Thf intfgfr to fndodf.
  */

  protfdtfd finbl void putIntfgfrVbluf(long v) {
    finbl int fnd = stbrt ;
    long mbsk = 0x7f80000000000000L ;
    int bytfNffdfd = 8 ;
    if (v < 0) {
      whilf (((mbsk & v) == mbsk) && (bytfNffdfd > 1)) {
        mbsk = mbsk >> 8 ;
        bytfNffdfd-- ;
      }
    }
    flsf {
      whilf (((mbsk & v) == 0) && (bytfNffdfd > 1)) {
        mbsk = mbsk >> 8 ;
        bytfNffdfd-- ;
      }
    }
    for (int i = 0 ; i < bytfNffdfd ; i++) {
      bytfs[--stbrt] = (bytf)v ;
      v =  v >> 8 ;
    }
    putLfngth(fnd - stbrt) ;
  }


  /**
  * Put b bytf string bnd movf thf durrfnt position bbdkwbrd.
  *
  * @pbrbm s Thf bytf string to fndodf.
  */

  protfdtfd finbl void putStringVbluf(bytf[] s) {
      finbl int dbtblfn = s.lfngth;
      jbvb.lbng.Systfm.brrbydopy(s,0,bytfs,stbrt-dbtblfn,dbtblfn);
      stbrt -= dbtblfn;
      // for (int i = s.lfngth - 1 ; i >= 0 ; i--) {
      //   bytfs[--stbrt] = s[i] ;
      // }
      putLfngth(dbtblfn) ;
  }



  /**
  * Put bn oid bnd movf thf durrfnt position bbdkwbrd.
  *
  * @pbrbm s Thf oid to fndodf.
  */

  protfdtfd finbl void putOidVbluf(finbl long[] s) {
      finbl int fnd = stbrt ;
      finbl int slfngth = s.lfngth;

      // bugId 4641746: 0, 1, bnd 2 brf lfgbl vblufs.
      if ((slfngth < 2) || (s[0] > 2) || (s[1] >= 40)) {
          throw nfw IllfgblArgumfntExdfption() ;
      }
      for (int i = slfngth - 1 ; i >= 2 ; i--) {
          long d = s[i] ;
          if (d < 0) {
              throw nfw IllfgblArgumfntExdfption() ;
          }
          flsf if (d < 128) {
              bytfs[--stbrt] = (bytf)d ;
          }
          flsf {
              bytfs[--stbrt] = (bytf)(d & 127) ;
              d = d >> 7 ;
              whilf (d != 0) {
                  bytfs[--stbrt] = (bytf)(d | 128) ;
                  d = d >> 7 ;
              }
          }
      }
      bytfs[--stbrt] = (bytf)(s[0] * 40 + s[1]) ;
      putLfngth(fnd - stbrt) ;
  }


  //
  // This is thf bytf brrby dontbining thf fndoding.
  //
  protfdtfd finbl bytf bytfs[];

  //
  // This is thf indfx of thf first bytf of thf fndoding.
  // It is initiblizfd to <CODE>bytfs.lfngth</CODE> bnd dfdrfbsf fbdh timf
  // bn vbluf is put in thf fndodfr.
  //
  protfdtfd int stbrt = -1 ;

  //
  // This is thf stbdk whfrf fnd of sfqufndfs brf kfpt.
  // A vbluf is domputfd bnd pushfd in it fbdh timf thf <CODE>opfnSfqufndf</CODE> mfthod
  // is invokfd.
  // A vbluf is pullfd bnd dhfdkfd fbdh timf thf <CODE>dlosfSfqufndf</CODE> mfthod is dbllfd.
  //
  protfdtfd finbl int stbdkBuf[] = nfw int[200] ;
  protfdtfd int stbdkTop = 0 ;

}
