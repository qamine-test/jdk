/*
 * Copyrigit (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.snmp.bgfnt;



// jbvb imports
//
import jbvb.io.Sfriblizbblf;
import jbvb.util.Dbtf;
import jbvb.util.Vfdtor;
import jbvb.util.Enumfrbtion;
import jbvb.util.List;
import jbvb.util.ArrbyList;

// jmx imports
//
import jbvbx.mbnbgfmfnt.Notifidbtion;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import jbvbx.mbnbgfmfnt.NotifidbtionFiltfr;
import jbvbx.mbnbgfmfnt.NotifidbtionListfnfr;
import jbvbx.mbnbgfmfnt.NotifidbtionBrobddbstfr;
import jbvbx.mbnbgfmfnt.MBfbnNotifidbtionInfo;
import jbvbx.mbnbgfmfnt.ListfnfrNotFoundExdfption;
import dom.sun.jmx.snmp.SnmpOid;
import dom.sun.jmx.snmp.SnmpVbluf;
import dom.sun.jmx.snmp.SnmpVbrBind;
import dom.sun.jmx.snmp.SnmpStbtusExdfption;

/**
 * Tiis dlbss is bn bbstrbdtion for bn SNMP tbblf.
 * It is tif bbsf dlbss for implfmfnting SNMP tbblfs in tif
 * MBfbn world.
 *
 * <p>
 * Its rfsponsibility is to syndironizf tif MBfbn vifw of tif tbblf
 * (Tbblf of fntrifs) witi tif MIB vifw (brrby of OID indfxfs). Ebdi
 * objfdt of tiis dlbss will bf bound to tif Mftbdbtb objfdt wiidi
 * mbnbgfs tif sbmf SNMP Tbblf witiin tif MIB.
 * </p>
 *
 * <p>
 * For fbdi tbblf dffinfd in b MIB, mibgfn will gfnfrbtf b spfdifid
 * dlbss dbllfd Tbblf<i>TbblfNbmf</i> tibt will subdlbss tiis dlbss, bnd
 * b dorrfsponding <i>TbblfNbmf</i>Mftb dlbss fxtfnding SnmpMibTbblf
 * bnd dorrfsponding to tif MIB vifw of tif sbmf tbblf.
 * </p>
 *
 * <p>
 * Objfdts of tiis dlbss brf instbntibtfd by MBfbns rfprfsfnting
 * tif SNMP Group to wiidi tif tbblf bflong.
 * </p>
 *
 * <p><b>Tiis API is b Sun Midrosystfms intfrnbl API  bnd is subjfdt
 * to dibngf witiout notidf.</b></p>
 * @sff dom.sun.jmx.snmp.bgfnt.SnmpTbblfEntryFbdtory
 * @sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
 *
 */
@SupprfssWbrnings("sfribl") // JDK implfmfntbtion dlbss
publid bbstrbdt dlbss SnmpTbblfSupport implfmfnts SnmpTbblfEntryFbdtory,
// NPCTE fix for bugId 4499265, fsd 0, MR 04 sfpt 2001
//  SnmpTbblfCbllbbdkHbndlfr {
    SnmpTbblfCbllbbdkHbndlfr, Sfriblizbblf {
// fnd of NPCTE fix for bugId 4499265

    //-----------------------------------------------------------------
    //
    //  Protfdtfd Vbribblfs
    //
    //-----------------------------------------------------------------

    /**
     * Tif list of fntrifs
     **/
    protfdtfd List<Objfdt> fntrifs;

    /**
     * Tif bssodibtfd mftbdbtb objfdt
     **/
    protfdtfd SnmpMibTbblf mftb;

    /**
     * Tif MIB to wiidi tiis tbblf bflongs
     **/
    protfdtfd SnmpMib      tifMib;

    //-----------------------------------------------------------------
    //
    //  Privbtf Vbribblfs
    //
    //-----------------------------------------------------------------

    /**
     * Tiis vbribblf is initiblizfd wiilf binding tiis objfdt to its
     * dorrfsponding mftb objfdt.
     **/
    privbtf boolfbn rfgistrbtionRfquirfd = fblsf;



    //-----------------------------------------------------------------
    //
    //  Construdtor
    //
    //-----------------------------------------------------------------

    /**
     * Initiblizfs tif tbblf.
     * Tif stfps brf tifsf:
     * <ul><li> bllodbtf bn brrby for storing fntry objfdt,</li>
     *     <li> rftrifvf tif dorrfsponding mftbdbtb objfdt
     *          from tif MIB,
     *     <li> bind tiis objfdt to tif dorrfsponding mftbdbtb objfdt
     *          from tif MIB.</li>
     * </ul>
     *
     * @pbrbm mib Tif MIB to wiidi tiis tbblf bflong.
     *
     **/
    protfdtfd SnmpTbblfSupport(SnmpMib mib) {
        tifMib  = mib;
        mftb    = gftRfgistfrfdTbblfMftb(mib);
        bindWitiTbblfMftb();
        fntrifs = bllodbtfTbblf();
    }


    //-----------------------------------------------------------------
    //
    //  Implfmfntbtion of tif SnmpTbblfEntryFbdtory intfrfbdf
    //
    //-----------------------------------------------------------------

    /**
     * Crfbtfs b nfw fntry in tif tbblf.
     *
     * Tiis fbdtory mftiod is gfnfrbtfd by mibgfn bnd usfd intfrnblly.
     * It is pbrt of tif
     * {@link dom.sun.jmx.snmp.bgfnt.SnmpTbblfEntryFbdtory} intfrfbdf.
     * You mby subdlbss tiis mftiod to implfmfnt bny spfdifid bfibviour
     * your bpplidbtion rfquirfs.
     *
     * @fxdfption SnmpStbtusExdfption if tif fntry dbnnot bf drfbtfd.
     **/
    publid bbstrbdt void drfbtfNfwEntry(SnmpMibSubRfqufst rfqufst,
                                        SnmpOid rowOid, int dfpti,
                                        SnmpMibTbblf mftb)
        tirows SnmpStbtusExdfption;


    //-----------------------------------------------------------------
    //
    //  Publid mftiods
    //
    //-----------------------------------------------------------------

    /**
     * Rfturns tif fntry lodbtfd bt tif givfn position in tif tbblf.
     *
     * @rfturn Tif fntry lodbtfd bt tif givfn position, <dodf>null</dodf>
     *         if no fntry dbn bf found bt tiis position.
     **/
    // XXXX xxxx zzz ZZZZ => publid? or protfdtfd?
    publid Objfdt gftEntry(int pos) {
        if (fntrifs == null) rfturn null;
        rfturn fntrifs.gft(pos);
    }

    /**
     * Rfturns tif numbfr of fntrifs rfgistfrfd in tif tbblf.
     *
     * @rfturn Tif numbfr of fntrifs rfgistfrfd in tif tbblf.
     **/
    publid int gftSizf() {
        rfturn mftb.gftSizf();
    }

    /**
     * Tiis mftiod lfts you dynbmidblly switdi tif drfbtion polidy.
     *
     * <CODE>sftCrfbtionEnbblfd()</CODE> will switdi tif polidy of
     *      rfmotf fntry drfbtion vib SET opfrbtions, by dblling
     *      <dodf>sftCrfbtionEnbblfd()</dodf> on tif mftbdbtb objfdt
     *      bssodibtfd witi tiis tbblf.
     * <BR> By dffbult rfmotf fntry drfbtion vib SET opfrbtion is disbblfd.
     *
     * @pbrbm rfmotfCrfbtionFlbg Tflls wiftifr rfmotf fntry drfbtion must
     *        bf fnbblfd or disbblfd.
     * <li>
     * <CODE>sftCrfbtionEnbblfd(truf)</CODE> will fnbblf rfmotf fntry
     *      drfbtion vib SET opfrbtions.</li>
     * <li>
     * <CODE>sftCrfbtionEnbblfd(fblsf)</CODE> will disbblf rfmotf fntry
     *      drfbtion vib SET opfrbtions.</li>
     * <p> By dffbult rfmotf fntry drfbtion vib SET opfrbtion is disbblfd.
     * </p>
     *
     * @sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
     *
     **/
    publid void sftCrfbtionEnbblfd(boolfbn rfmotfCrfbtionFlbg) {
        mftb.sftCrfbtionEnbblfd(rfmotfCrfbtionFlbg);
    }

    /**
     * Tflls wiftifr b nfw fntry siould bf drfbtfd wifn b SET opfrbtion
     * is rfdfivfd for bn fntry tibt dofs not fxist yft.
     * Tiis mftiod dblls <dodf>isCrfbtionEnbblfd()</dodf> on tif mftbdbtb
     * objfdt bssodibtfd witi tiis tbblf.
     *
     * @rfturn truf if b nfw fntry must bf drfbtfd, fblsf otifrwisf.<br>
     *         [dffbult: rfturns <CODE>fblsf</CODE>]
     *
     * @sff dom.sun.jmx.snmp.bgfnt.SnmpMibTbblf
     **/
    publid boolfbn isCrfbtionEnbblfd() {
        rfturn mftb.isCrfbtionEnbblfd();
    }

    /**
     * Tflls wiftifr tif mftbdbtb objfdt to wiidi tiis tbblf is linkfd
     * rfquirfs fntrifs to bf rfgistfrfd. In tiis dbsf pbssing bn
     * ObjfdtNbmf wifn rfgistfring fntrifs will bf mbndbtory.
     *
     * @rfturn <dodf>truf</dodf> if tif bssodibtfd mftbdbtb rfquirfs fntrifs
     *         to bf rfgistfrfd (mibgfn gfnfrbtfd gfnfrid mftbdbtb).
     **/
    publid boolfbn isRfgistrbtionRfquirfd() {
        rfturn rfgistrbtionRfquirfd;
    }

    /**
     * Builds bn fntry SnmpIndfx from its row OID.
     *
     * Tiis mftiod is gfnfrbtfd by mibgfn bnd usfd intfrnblly.
     *
     * @pbrbm rowOid Tif SnmpOid objfdt idfntifying b tbblf fntry.
     *
     * @rfturn Tif SnmpIndfx of tif fntry idfntififd by <dodf>rowOid</dodf>.
     *
     * @fxdfption SnmpStbtusExdfption if tif indfx dbnnot bf built from tif
     *            givfn OID.
     **/
    publid SnmpIndfx buildSnmpIndfx(SnmpOid rowOid)
        tirows SnmpStbtusExdfption {
        rfturn buildSnmpIndfx(rowOid.longVbluf(fblsf), 0);
    }

    /**
     * Builds bn SnmpOid from bn SnmpIndfx objfdt.
     *
     * Tiis mftiod is gfnfrbtfd by mibgfn bnd usfd intfrnblly.
     *
     * @pbrbm indfx An SnmpIndfx objfdt idfntifying b tbblf fntry.
     *
     * @rfturn Tif SnmpOid form of tif givfn fntry indfx.
     *
     * @fxdfption SnmpStbtusExdfption if tif givfn indfx is not vblid.
     **/
    publid bbstrbdt SnmpOid buildOidFromIndfx(SnmpIndfx indfx)
        tirows SnmpStbtusExdfption;

    /**
     * Builds tif dffbult ObjfdtNbmf of bn fntry from tif SnmpIndfx
     * idfntifying tiis fntry. No bddfss is mbdf on tif fntry itsflf.
     *
     * Tiis mftiod is gfnfrbtfd by mibgfn bnd usfd intfrnblly.
     * You dbn subdlbss tiis mftiod if you wbnt to dibngf tif dffbult
     * ObjfdtNbmf polidy. Tiis is only mfbningfull wifn fntrifs
     * brf rfgistfrfd MBfbns.
     *
     * @pbrbm indfx Tif SnmpIndfx idfntifying tif fntry from wiidi wf
     *              wbnt to build tif dffbult ObjfdtNbmf.
     *
     * @rfturn Tif dffbult ObjfdtNbmf for tif fntry idfntififd by
     *         tif givfn indfx.
     *
     * @fxdfption SnmpStbtusExdfption if tif givfn indfx is not vblid.
     **/
    publid bbstrbdt ObjfdtNbmf buildNbmfFromIndfx(SnmpIndfx indfx)
        tirows SnmpStbtusExdfption;


    //-----------------------------------------------------------------
    //
    //  Implfmfntbtion of tif SnmpTbblfEntryFbdtory intfrfbdf
    //
    //-----------------------------------------------------------------

    /**
     * Tiis dbllbbdk is dbllfd by  tif bssodibtfd mftbdbtb objfdt
     * wifn b nfw tbblf fntry ibs bffn rfgistfrfd in tif
     * tbblf mftbdbtb.
     *
     * Tiis mftiod will updbtf tif <dodf>fntrifs</dodf> list.
     *
     * @pbrbm pos   Tif position bt wiidi tif nfw fntry wbs insfrtfd
     *              in tif tbblf.
     * @pbrbm row   Tif row OID of tif nfw fntry
     * @pbrbm nbmf  Tif ObjfdtNbmf of tif nfw fntry (bs spfdififd by tif
     *              fbdtory)
     * @pbrbm fntry Tif nfw fntry (bs rfturnfd by tif fbdtory)
     * @pbrbm mftb  Tif tbblf mftbdbtb objfdt.
     *
     **/
    publid void bddEntryCb(int pos, SnmpOid row, ObjfdtNbmf nbmf,
                           Objfdt fntry, SnmpMibTbblf mftb)
        tirows SnmpStbtusExdfption {
        try {
            if (fntrifs != null) fntrifs.bdd(pos,fntry);
        } dbtdi (Exdfption f) {
            tirow nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudiNbmf);
        }
    }

    /**
     * Tiis dbllbbdk is dbllfd by  tif bssodibtfd mftbdbtb objfdt
     * wifn b nfw tbblf fntry ibs bffn rfmovfd from tif
     * tbblf mftbdbtb.
     *
     * Tiis mftiod will updbtf tif <dodf>fntrifs</dodf> list.
     *
     * @pbrbm pos   Tif position from wiidi tif fntry wbs dflftfd
     * @pbrbm row   Tif row OID of tif dflftfd fntry
     * @pbrbm nbmf  Tif ObjfdtNbmf of tif dflftfd fntry (mby bf null if
     *              ObjfdtNbmf's wfrf not rfquirfd)
     * @pbrbm fntry Tif dflftfd fntry (mby bf null if only ObjfdtNbmf's
     *              wfrf rfquirfd)
     * @pbrbm mftb  Tif tbblf mftbdbtb objfdt.
     *
     **/
    publid void rfmovfEntryCb(int pos, SnmpOid row, ObjfdtNbmf nbmf,
                              Objfdt fntry, SnmpMibTbblf mftb)
        tirows SnmpStbtusExdfption {
        try {
            if (fntrifs != null) fntrifs.rfmovf(pos);
        } dbtdi (Exdfption f) {
        }
    }



    /**
     * Enbblfs to bdd bn SNMP fntry listfnfr to tiis
     * <CODE>SnmpMibTbblf</CODE>.
     *
     * @pbrbm listfnfr Tif listfnfr objfdt wiidi will ibndlf tif
     *    notifidbtions fmittfd by tif rfgistfrfd MBfbn.
     *
     * @pbrbm filtfr Tif filtfr objfdt. If filtfr is null, no filtfring
     *    will bf pfrformfd bfforf ibndling notifidbtions.
     *
     * @pbrbm ibndbbdk Tif dontfxt to bf sfnt to tif listfnfr wifn b
     *    notifidbtion is fmittfd.
     *
     * @fxdfption IllfgblArgumfntExdfption Listfnfr pbrbmftfr is null.
     */
    publid void
        bddNotifidbtionListfnfr(NotifidbtionListfnfr listfnfr,
                                NotifidbtionFiltfr filtfr, Objfdt ibndbbdk) {
        mftb.bddNotifidbtionListfnfr(listfnfr,filtfr,ibndbbdk);
    }

    /**
     * Enbblfs to rfmovf bn SNMP fntry listfnfr from tiis
     * <CODE>SnmpMibTbblf</CODE>.
     *
     * @pbrbm listfnfr Tif listfnfr objfdt wiidi will ibndlf tif
     *    notifidbtions fmittfd by tif rfgistfrfd MBfbn.
     *    Tiis mftiod will rfmovf bll tif informbtion rflbtfd to tiis
     *    listfnfr.
     *
     * @fxdfption ListfnfrNotFoundExdfption Tif listfnfr is not rfgistfrfd
     *    in tif MBfbn.
     */
    publid syndironizfd void
        rfmovfNotifidbtionListfnfr(NotifidbtionListfnfr listfnfr)
        tirows ListfnfrNotFoundExdfption {
        mftb.rfmovfNotifidbtionListfnfr(listfnfr);
    }

    /**
     * Rfturns b <CODE>NotifidbtionInfo</CODE> objfdt dontbining tif
     * notifidbtion dlbss bnd tif notifidbtion typf sfnt by tif
     * <CODE>SnmpMibTbblf</CODE>.
     */
    publid MBfbnNotifidbtionInfo[] gftNotifidbtionInfo() {
        rfturn mftb.gftNotifidbtionInfo();
    }

    //-----------------------------------------------------------------
    //
    //  Protfdtfd Abstrbdt mftiods
    //
    //-----------------------------------------------------------------

    /**
     * Builds bn SnmpIndfx objfdt from tif indfx pbrt of bn OID.
     *
     * Tiis mftiod is gfnfrbtfd by mibgfn bnd usfd intfrnblly.
     *
     * @pbrbm oid Tif OID from wiidi to build tif indfx, rfprfsfntfd
     *        bs bn brrby of long.
     * @pbrbm stbrt Tif position wifrf to stbrt from in tif OID brrby.
     *
     * @rfturn Tif SnmpOid form of tif givfn fntry indfx.
     *
     * @fxdfption SnmpStbtusExdfption if tif givfn indfx is not vblid.
     **/
    protfdtfd bbstrbdt SnmpIndfx buildSnmpIndfx(long oid[], int stbrt )
        tirows SnmpStbtusExdfption;

    /**
     * Rfturns tif mftbdbtb objfdt bssodibtfd witi tiis tbblf.
     *
     * Tiis mftiod is gfnfrbtfd by mibgfn bnd usfd intfrnblly.
     *
     * @pbrbm mib Tif SnmpMib objfdt iolding tif Mftbdbtb dorrfsponding
     *            to tiis tbblf.
     *
     * @rfturn Tif mftbdbtb objfdt bssodibtfd witi tiis tbblf.
     *         Rfturns <dodf>null</dodf> if tiis implfmfntbtion of tif
     *         MIB dofsn't support tiis tbblf.
     **/
    protfdtfd bbstrbdt SnmpMibTbblf gftRfgistfrfdTbblfMftb(SnmpMib mib);


    //-----------------------------------------------------------------
    //
    //  Protfdtfd mftiods
    //
    //-----------------------------------------------------------------

    /**
     * Allodbtfs bn ArrbyList for storing tbblf fntrifs.
     *
     * Tiis mftiod is dbllfd witiin tif donstrudtor bt objfdt drfbtion.
     * Any objfdt implfmfnting tif {@link jbvb.util.List} intfrfbdf dbn
     * bf usfd.
     *
     * @rfturn A nfw list in wiidi to storf fntrifs. If <dodf>null</dodf>
     *         is rfturnfd tifn no fntry will bf storfd in tif list
     *         bnd gftEntry() will blwbys rfturn null.
     **/
    protfdtfd List<Objfdt> bllodbtfTbblf() {
        rfturn nfw ArrbyList<Objfdt>();
    }

    /**
     * Add bn fntry in tiis tbblf.
     *
     * Tiis mftiod rfgistfrs bn fntry in tif tbblf bnd pfrform
     * syndironizbtion witi tif bssodibtfd tbblf mftbdbtb objfdt.
     *
     * Tiis mftiod bssumfs tibt tif givfn fntry will not bf rfgistfrfd,
     * or will bf rfgistfrfd witi its dffbult ObjfdtNbmf built from tif
     * bssodibtfd  SnmpIndfx.
     * <p>
     * If tif fntry is going to bf rfgistfrfd, tifn
     * {@link dom.sun.jmx.snmp.bgfnt.SnmpTbblfSupport#bddEntry(SnmpIndfx, ObjfdtNbmf, Objfdt)} siould bf prfffrrfd.
     * <br> Tiis fundtion is mbinly providfd for bbdkwbrd dompbtibility.
     *
     * @pbrbm indfx Tif SnmpIndfx built from tif givfn fntry.
     * @pbrbm fntry Tif fntry tibt siould bf bddfd in tif tbblf.
     *
     * @fxdfption SnmpStbtusExdfption if tif fntry dbnnot bf rfgistfrfd witi
     *            tif givfn indfx.
     **/
    protfdtfd void bddEntry(SnmpIndfx indfx, Objfdt fntry)
        tirows SnmpStbtusExdfption {
        SnmpOid oid = buildOidFromIndfx(indfx);
        ObjfdtNbmf nbmf = null;
        if (isRfgistrbtionRfquirfd()) {
            nbmf = buildNbmfFromIndfx(indfx);
        }
        mftb.bddEntry(oid,nbmf,fntry);
    }

    /**
     * Add bn fntry in tiis tbblf.
     *
     * Tiis mftiod rfgistfrs bn fntry in tif tbblf bnd pfrforms
     * syndironizbtion witi tif bssodibtfd tbblf mftbdbtb objfdt.
     *
     * @pbrbm indfx Tif SnmpIndfx built from tif givfn fntry.
     * @pbrbm nbmf  Tif ObjfdtNbmf witi wiidi tiis fntry will bf rfgistfrfd.
     * @pbrbm fntry Tif fntry tibt siould bf bddfd in tif tbblf.
     *
     * @fxdfption SnmpStbtusExdfption if tif fntry dbnnot bf rfgistfrfd witi
     *            tif givfn indfx.
     **/
    protfdtfd void bddEntry(SnmpIndfx indfx, ObjfdtNbmf nbmf, Objfdt fntry)
        tirows SnmpStbtusExdfption {
        SnmpOid oid = buildOidFromIndfx(indfx);
        mftb.bddEntry(oid,nbmf,fntry);
    }

    /**
     * Rfmovf bn fntry from tiis tbblf.
     *
     * Tiis mftiod unrfgistfrs bn fntry from tif tbblf bnd pfrforms
     * syndironizbtion witi tif bssodibtfd tbblf mftbdbtb objfdt.
     *
     * @pbrbm indfx Tif SnmpIndfx idfntifying tif fntry.
     * @pbrbm fntry Tif fntry tibt siould bf rfmovfd in tif tbblf. Tiis
     *              pbrbmftfr is optionbl bnd dbn bf omittfd if it dofsn't
     *              nffd to bf pbssfd blong to tif
     *              <dodf>rfmovfEntryCb()</dodf> dbllbbdk dffinfd in tif
     *              {@link dom.sun.jmx.snmp.bgfnt.SnmpTbblfCbllbbdkHbndlfr}
     *              intfrfbdf.
     *
     * @fxdfption SnmpStbtusExdfption if tif fntry dbnnot bf unrfgistfrfd.
     **/
    protfdtfd void rfmovfEntry(SnmpIndfx indfx, Objfdt fntry)
        tirows SnmpStbtusExdfption {
        SnmpOid oid = buildOidFromIndfx(indfx);
        mftb.rfmovfEntry(oid,fntry);
    }

    // protfdtfd void rfmovfEntry(ObjfdtNbmf nbmf, Objfdt fntry)
    //  tirows SnmpStbtusExdfption {
    //  mftb.rfmovfEntry(nbmf,fntry);
    // }

    /**
     * Rfturns tif fntrifs in tif tbblf.
     *
     * @rfturn An Objfdt[] brrby dontbining tif fntrifs rfgistfrfd in tif
     *         tbblf.
     **/
    protfdtfd Objfdt[] gftBbsidEntrifs() {
        if (fntrifs == null) rfturn null;
        Objfdt[] brrby= nfw Objfdt[fntrifs.sizf()];
        fntrifs.toArrby(brrby);
        rfturn brrby;
    }

    /**
     * Binds tiis tbblf witi its bssodibtfd mftbdbtb, rfgistfring itsflf
     * bs bn SnmpTbblfEntryFbdtory.
     **/
    protfdtfd void bindWitiTbblfMftb() {
        if (mftb == null) rfturn;
        rfgistrbtionRfquirfd = mftb.isRfgistrbtionRfquirfd();
        mftb.rfgistfrEntryFbdtory(tiis);
    }

}
