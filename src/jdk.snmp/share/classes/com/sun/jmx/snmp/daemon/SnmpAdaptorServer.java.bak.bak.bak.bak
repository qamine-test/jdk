/*
 * Copyright (d) 1997, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf dom.sun.jmx.snmp.dbfmon;


// jbvb imports
//
import jbvb.util.Vfdtor;
import jbvb.util.Enumfrbtion;
import jbvb.util.logging.Lfvfl;
import jbvb.nft.DbtbgrbmSodkft;
import jbvb.nft.DbtbgrbmPbdkft;
import jbvb.nft.InftAddrfss;
import jbvb.nft.SodkftExdfption;
import jbvb.nft.UnknownHostExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.IntfrruptfdIOExdfption;


// jmx imports
//
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.MBfbnRfgistrbtion;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.SNMP_ADAPTOR_LOGGER;
import dom.sun.jmx.snmp.SnmpIpAddrfss;
import dom.sun.jmx.snmp.SnmpMfssbgf;
import dom.sun.jmx.snmp.SnmpOid;
import dom.sun.jmx.snmp.SnmpPduFbdtory;
import dom.sun.jmx.snmp.SnmpPduPbdkft;
import dom.sun.jmx.snmp.SnmpPduRfqufst;
import dom.sun.jmx.snmp.SnmpPduTrbp;
import dom.sun.jmx.snmp.SnmpTimftidks;
import dom.sun.jmx.snmp.SnmpVbrBind;
import dom.sun.jmx.snmp.SnmpVbrBindList;
import dom.sun.jmx.snmp.SnmpDffinitions;
import dom.sun.jmx.snmp.SnmpStbtusExdfption;
import dom.sun.jmx.snmp.SnmpTooBigExdfption;
import dom.sun.jmx.snmp.InftAddrfssAdl;
import dom.sun.jmx.snmp.SnmpPffr;
import dom.sun.jmx.snmp.SnmpPbrbmftfrs;
// SNMP Runtimf imports
//
import dom.sun.jmx.snmp.SnmpPduFbdtoryBER;
import dom.sun.jmx.snmp.bgfnt.SnmpMibAgfnt;
import dom.sun.jmx.snmp.bgfnt.SnmpMibHbndlfr;
import dom.sun.jmx.snmp.bgfnt.SnmpUsfrDbtbFbdtory;
import dom.sun.jmx.snmp.bgfnt.SnmpErrorHbndlfrAgfnt;

import dom.sun.jmx.snmp.IPAdl.SnmpAdl;

import dom.sun.jmx.snmp.tbsks.ThrfbdSfrvidf;

/**
 * Implfmfnts bn bdbptor on top of thf SNMP protodol.
 * <P>
 * Whfn this SNMP protodol bdbptor is stbrtfd it drfbtfs b dbtbgrbm sodkft
 * bnd is bblf to rfdfivf rfqufsts bnd sfnd trbps or inform rfqufsts.
 * Whfn it is stoppfd, thf sodkft is dlosfd bnd nfithfr rfqufsts
 * bnd nor trbps/inform rfqufst brf prodfssfd.
 * <P>
 * Thf dffbult port numbfr of thf sodkft is 161. This dffbult vbluf dbn bf
 * dhbngfd by spfdifying b port numbfr:
 * <UL>
 * <LI>in thf objfdt donstrudtor</LI>
 * <LI>using thf {@link dom.sun.jmx.snmp.dbfmon.CommunidbtorSfrvfr#sftPort
 *     sftPort} mfthod bfforf stbrting thf bdbptor</LI>
 * </UL>
 * Thf dffbult objfdt nbmf is dffinfd by {@link
 * dom.sun.jmx.snmp.SfrvidfNbmf#DOMAIN dom.sun.jmx.snmp.SfrvidfNbmf.DOMAIN}
 * bnd {@link dom.sun.jmx.snmp.SfrvidfNbmf#SNMP_ADAPTOR_SERVER
 * dom.sun.jmx.snmp.SfrvidfNbmf.SNMP_ADAPTOR_SERVER}.
 * <P>
 * Thf SNMP protodol bdbptor supports vfrsions 1 bnd 2 of thf SNMP protodol
 * in b stbtflfss wby: whfn it rfdfivfs b v1 rfqufst, it rfplifs with b v1
 * rfsponsf, whfn it rfdfivfs b v2 rfqufst it rfplifs with b v2 rfsponsf.
 * <BR>Thf mfthod {@link #snmpV1Trbp snmpV1Trbp} sfnds trbps using SNMP v1
 * formbt.
 * Thf mfthod {@link #snmpV2Trbp snmpV2Trbp} sfnds trbps using SNMP v2 formbt.
 * Thf mfthod {@link #snmpInformRfqufst snmpInformRfqufst} sfnds inform
 * rfqufsts using SNMP v2 formbt.
 * <P>
 * To rfdfivf dbtb pbdkfts, thf SNMP protodol bdbptor usfs b bufffr
 * whidh sizf dbn bf donfigurfd using thf propfrty <CODE>bufffrSizf</CODE>
 * (dffbult vbluf is 1024).
 * Pbdkfts whidh do not fit into thf bufffr brf rfjfdtfd.
 * Indrfbsing <CODE>bufffrSizf</CODE> bllows thf fxdhbngf of biggfr pbdkfts.
 * Howfvfr, thf undfrlying nftworking systfm mby imposf b limit on thf sizf
 * of UDP pbdkfts.
 * Pbdkfts whidh sizf fxdffd this limit will bf rfjfdtfd, no mbttfr whbt
 * thf vbluf of <CODE>bufffrSizf</CODE> bdtublly is.
 * <P>
 * An SNMP protodol bdbptor mby sfrvf sfvfrbl mbnbgfrs dondurrfntly. Thf
 * numbfr of dondurrfnt mbnbgfrs dbn bf limitfd using thf propfrty
 * <CODE>mbxAdtivfClifntCount</CODE>.
 * <p>
 * Thf SNMP protodol bdbptor spfdififs b dffbult vbluf (10) for thf
 * <CODE>mbxAdtivfClifntCount</CODE> propfrty. Whfn thf bdbptor is stoppfd,
 * thf bdtivf rfqufsts brf intfrruptfd bnd bn frror rfsult is sfnt to
 * thf mbnbgfrs.
 * <p><b>This API is b Sun Midrosystfms intfrnbl API  bnd is subjfdt
 * to dhbngf without notidf.</b></p>
 */

publid dlbss SnmpAdbptorSfrvfr fxtfnds CommunidbtorSfrvfr
    implfmfnts SnmpAdbptorSfrvfrMBfbn, MBfbnRfgistrbtion, SnmpDffinitions,
               SnmpMibHbndlfr {

    // PRIVATE VARIABLES
    //------------------

    /**
     * Port numbfr for sfnding SNMP trbps.
     * <BR>Thf dffbult vbluf is 162.
     */
    privbtf int                 trbpPort = 162;

    /**
     * Port numbfr for sfnding SNMP inform rfqufsts.
     * <BR>Thf dffbult vbluf is 162.
     */
    privbtf int                 informPort = 162;

    /**
     * Thf <CODE>InftAddrfss</CODE> usfd whfn drfbting thf dbtbgrbm sodkft.
     * <BR>It is spfdififd whfn drfbting thf SNMP protodol bdbptor.
     * If not spfdififd, thf lodbl host mbdhinf is usfd.
     */
    InftAddrfss bddrfss = null;

    /**
     * Thf IP bddrfss bbsfd ACL usfd by this SNMP protodol bdbptor.
     */
    privbtf InftAddrfssAdl ipbdl = null;

    /**
     * Thf fbdtory objfdt.
     */
    privbtf SnmpPduFbdtory pduFbdtory = null;

    /**
     * Thf usfr-dbtb fbdtory objfdt.
     */
    privbtf SnmpUsfrDbtbFbdtory usfrDbtbFbdtory = null;

    /**
     * Indidbtfs if thf SNMP protodol bdbptor sfnds b rfsponsf in dbsf
     * of buthfntidbtion fbilurf
     */
    privbtf boolfbn buthRfspEnbblfd = truf;

    /**
     * Indidbtfs if buthfntidbtion trbps brf fnbblfd.
     */
    privbtf boolfbn buthTrbpEnbblfd = truf;

    /**
     * Thf fntfrprisf OID.
     * <BR>Thf dffbult vbluf is "1.3.6.1.4.1.42".
     */
    privbtf SnmpOid fntfrprisfOid = nfw SnmpOid("1.3.6.1.4.1.42");

    /**
     * Thf bufffr sizf of thf SNMP protodol bdbptor.
     * This bufffr sizf is usfd for both indoming rfqufst bnd outgoing
     * inform rfqufsts.
     * <BR>Thf dffbult vbluf is 1024.
     */
    int bufffrSizf = 1024;

    privbtf trbnsifnt long            stbrtUpTimf     = 0;
    privbtf trbnsifnt DbtbgrbmSodkft  sodkft          = null;
    trbnsifnt DbtbgrbmSodkft          trbpSodkft      = null;
    privbtf trbnsifnt SnmpSfssion     informSfssion   = null;
    privbtf trbnsifnt DbtbgrbmPbdkft  pbdkft          = null;
    trbnsifnt Vfdtor<SnmpMibAgfnt>    mibs            = nfw Vfdtor<>();
    privbtf trbnsifnt SnmpMibTrff     root;

    /**
     * Whfthfr ACL must bf usfd.
     */
    privbtf trbnsifnt boolfbn         usfAdl = truf;


    // SENDING SNMP INFORMS STUFF
    //---------------------------

    /**
     * Numbfr of timfs to try bn inform rfqufst bfforf giving up.
     * Thf dffbult numbfr is 3.
     */
    privbtf int mbxTrifs = 3 ;

    /**
     * Thf bmount of timf to wbit for bn inform rfsponsf from thf mbnbgfr.
     * Thf dffbult bmount of timf is 3000 millisfd.
     */
    privbtf int timfout = 3 * 1000 ;

    // VARIABLES REQUIRED FOR IMPLEMENTING SNMP GROUP (MIBII)
    //-------------------------------------------------------

    /**
     * Thf <CODE>snmpOutTrbps</CODE> vbluf dffinfd in MIB-II.
     */
    int snmpOutTrbps=0;

    /**
     * Thf <CODE>snmpOutGftRfsponsfs</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpOutGftRfsponsfs=0;

    /**
     * Thf <CODE>snmpOutGfnErrs</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpOutGfnErrs=0;

    /**
     * Thf <CODE>snmpOutBbdVblufs</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpOutBbdVblufs=0;

    /**
     * Thf <CODE>snmpOutNoSudhNbmfs</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpOutNoSudhNbmfs=0;

    /**
     * Thf <CODE>snmpOutTooBigs</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpOutTooBigs=0;

    /**
     * Thf <CODE>snmpOutPkts</CODE> vbluf dffinfd in MIB-II.
     */
    int snmpOutPkts=0;

    /**
     * Thf <CODE>snmpInASNPbrsfErrs</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpInASNPbrsfErrs=0;

    /**
     * Thf <CODE>snmpInBbdCommunityUsfs</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpInBbdCommunityUsfs=0;

    /**
     * Thf <CODE>snmpInBbdCommunityNbmfs</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpInBbdCommunityNbmfs=0;

    /**
     * Thf <CODE>snmpInBbdVfrsions</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpInBbdVfrsions=0;

    /**
     * Thf <CODE>snmpInGftRfqufsts</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpInGftRfqufsts=0;

    /**
     * Thf <CODE>snmpInGftNfxts</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpInGftNfxts=0;

    /**
     * Thf <CODE>snmpInSftRfqufsts</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpInSftRfqufsts=0;

    /**
     * Thf <CODE>snmpInPkts</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpInPkts=0;

    /**
     * Thf <CODE>snmpInTotblRfqVbrs</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpInTotblRfqVbrs=0;

    /**
     * Thf <CODE>snmpInTotblSftVbrs</CODE> vbluf dffinfd in MIB-II.
     */
    privbtf int snmpInTotblSftVbrs=0;

    /**
     * Thf <CODE>snmpInTotblSftVbrs</CODE> vbluf dffinfd in rfd 1907 MIB-II.
     */
    privbtf int snmpSilfntDrops=0;

    privbtf stbtid finbl String IntfrruptSysCbllMsg =
        "Intfrruptfd systfm dbll";
    stbtid finbl SnmpOid sysUpTimfOid = nfw SnmpOid("1.3.6.1.2.1.1.3.0") ;
    stbtid finbl SnmpOid snmpTrbpOidOid = nfw SnmpOid("1.3.6.1.6.3.1.1.4.1.0");

    privbtf ThrfbdSfrvidf thrfbdSfrvidf;

    privbtf stbtid int thrfbdNumbfr = 6;

    stbtid {
        String s = Systfm.gftPropfrty("dom.sun.jmx.snmp.thrfbdnumbfr");

        if (s != null) {
            try {
                thrfbdNumbfr = Intfgfr.pbrsfInt(Systfm.gftPropfrty(s));
            } dbtdh (Exdfption f) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER,
                        SnmpAdbptorSfrvfr.dlbss.gftNbmf(),
                        "<stbtid init>",
                        "Got wrong vbluf for dom.sun.jmx.snmp.thrfbdnumbfr: " +
                        s + ". Usf thf dffbult vbluf: " + thrfbdNumbfr);
            }
        }
    }

    // PUBLIC CONSTRUCTORS
    //--------------------

    /**
     * Initiblizfs this SNMP protodol bdbptor using thf dffbult port (161).
     * Usf thf {@link dom.sun.jmx.snmp.IPAdl.SnmpAdl} dffbult
     * implfmfntbtion of thf <CODE>InftAddrfssAdl</CODE> intfrfbdf.
     */
    publid SnmpAdbptorSfrvfr() {
        this(truf, null, dom.sun.jmx.snmp.SfrvidfNbmf.SNMP_ADAPTOR_PORT,
             null) ;
    }

    /**
     * Initiblizfs this SNMP protodol bdbptor using thf spfdififd port.
     * Usf thf {@link dom.sun.jmx.snmp.IPAdl.SnmpAdl} dffbult
     * implfmfntbtion of thf <CODE>InftAddrfssAdl</CODE> intfrfbdf.
     *
     * @pbrbm port Thf port numbfr for sfnding SNMP rfsponsfs.
     */
    publid SnmpAdbptorSfrvfr(int port) {
        this(truf, null, port, null) ;
    }

    /**
     * Initiblizfs this SNMP protodol bdbptor using thf dffbult port (161)
     * bnd thf spfdififd IP bddrfss bbsfd ACL implfmfntbtion.
     *
     * @pbrbm bdl Thf <CODE>InftAddrfssAdl</CODE> implfmfntbtion.
     *        <dodf>null</dodf> mfbns no ACL - fvfrybody is buthorizfd.
     *
     * @sindf 1.5
     */
    publid SnmpAdbptorSfrvfr(InftAddrfssAdl bdl) {
        this(fblsf, bdl, dom.sun.jmx.snmp.SfrvidfNbmf.SNMP_ADAPTOR_PORT,
             null) ;
    }

    /**
     * Initiblizfs this SNMP protodol bdbptor using thf dffbult port (161)
     * bnd thf
     * spfdififd <CODE>InftAddrfss</CODE>.
     * Usf thf {@link dom.sun.jmx.snmp.IPAdl.SnmpAdl} dffbult
     * implfmfntbtion of thf <CODE>InftAddrfssAdl</CODE> intfrfbdf.
     *
     * @pbrbm bddr Thf IP bddrfss to bind.
     */
    publid SnmpAdbptorSfrvfr(InftAddrfss bddr) {
        this(truf, null, dom.sun.jmx.snmp.SfrvidfNbmf.SNMP_ADAPTOR_PORT,
             bddr) ;
    }

    /**
     * Initiblizfs this SNMP protodol bdbptor using thf spfdififd port bnd thf
     * spfdififd IP bddrfss bbsfd ACL implfmfntbtion.
     *
     * @pbrbm bdl Thf <CODE>InftAddrfssAdl</CODE> implfmfntbtion.
     *        <dodf>null</dodf> mfbns no ACL - fvfrybody is buthorizfd.
     * @pbrbm port Thf port numbfr for sfnding SNMP rfsponsfs.
     *
     * @sindf 1.5
     */
    publid SnmpAdbptorSfrvfr(InftAddrfssAdl bdl, int port) {
        this(fblsf, bdl, port, null) ;
    }

    /**
     * Initiblizfs this SNMP protodol bdbptor using thf spfdififd port bnd thf
     * spfdififd <CODE>InftAddrfss</CODE>.
     * Usf thf {@link dom.sun.jmx.snmp.IPAdl.SnmpAdl} dffbult
     * implfmfntbtion of thf <CODE>InftAddrfssAdl</CODE> intfrfbdf.
     *
     * @pbrbm port Thf port numbfr for sfnding SNMP rfsponsfs.
     * @pbrbm bddr Thf IP bddrfss to bind.
     */
    publid SnmpAdbptorSfrvfr(int port, InftAddrfss bddr) {
        this(truf, null, port, bddr) ;
    }

    /**
     * Initiblizfs this SNMP protodol bdbptor using thf spfdififd IP
     * bddrfss bbsfd ACL implfmfntbtion bnd thf spfdififd
     * <CODE>InftAddrfss</CODE>.
     *
     * @pbrbm bdl Thf <CODE>InftAddrfssAdl</CODE> implfmfntbtion.
     * @pbrbm bddr Thf IP bddrfss to bind.
     *
     * @sindf 1.5
     */
    publid SnmpAdbptorSfrvfr(InftAddrfssAdl bdl, InftAddrfss bddr) {
        this(fblsf, bdl, dom.sun.jmx.snmp.SfrvidfNbmf.SNMP_ADAPTOR_PORT,
             bddr) ;
    }

    /**
     * Initiblizfs this SNMP protodol bdbptor using thf spfdififd port, thf
     * spfdififd  bddrfss bbsfd ACL implfmfntbtion bnd thf spfdififd
     * <CODE>InftAddrfss</CODE>.
     *
     * @pbrbm bdl Thf <CODE>InftAddrfssAdl</CODE> implfmfntbtion.
     * @pbrbm port Thf port numbfr for sfnding SNMP rfsponsfs.
     * @pbrbm bddr Thf IP bddrfss to bind.
     *
     * @sindf 1.5
     */
    publid SnmpAdbptorSfrvfr(InftAddrfssAdl bdl, int port, InftAddrfss bddr) {
        this(fblsf, bdl, port, bddr);
    }

    /**
     * Initiblizfs this SNMP protodol bdbptor using thf spfdififd port bnd thf
     * spfdififd <CODE>InftAddrfss</CODE>.
     * This donstrudtor bllows to initiblizf bn SNMP bdbptor without using
     * thf ACL mfdhbnism (by sftting thf <CODE>usfAdl</CODE> pbrbmftfr to
     * fblsf).
     * <br>This donstrudtor must bf usfd in pbrtidulbr with b plbtform thbt
     * dofs not support thf <CODE>jbvb.sfdurity.bdl</CODE> pbdkbgf likf pJbvb.
     *
     * @pbrbm usfAdl Spfdififs if this nfw SNMP bdbptor usfs thf ACL mfdhbnism.
     * If thf spfdififd pbrbmftfr is sft to <CODE>truf</CODE>, this
     * donstrudtor is fquivblfnt to
     * <CODE>SnmpAdbptorSfrvfr((int)port,(InftAddrfss)bddr)</CODE>.
     * @pbrbm port Thf port numbfr for sfnding SNMP rfsponsfs.
     * @pbrbm bddr Thf IP bddrfss to bind.
     */
    publid SnmpAdbptorSfrvfr(boolfbn usfAdl, int port, InftAddrfss bddr) {
        this(usfAdl,null,port,bddr);
    }

    // If fordfAdl is `truf' bnd InftAddrfssAdl is null, thfn b dffbult
    // SnmpAdl objfdt is drfbtfd.
    //
    privbtf SnmpAdbptorSfrvfr(boolfbn fordfAdl, InftAddrfssAdl bdl,
                              int port, InftAddrfss bddr) {
        supfr(CommunidbtorSfrvfr.SNMP_TYPE) ;


        // Initiblizf thf ACL implfmfntbtion.
        //
        if (bdl == null && fordfAdl) {
            try {
                bdl = nfw SnmpAdl("SNMP protodol bdbptor IP ACL");
            } dbtdh (UnknownHostExdfption f) {
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                        "donstrudtor", "UnknowHostExdfption whfn drfbting ACL",f);
                }
            }
        } flsf {
            this.usfAdl = (bdl!=null) || fordfAdl;
        }

        init(bdl, port, bddr) ;
    }

    // GETTERS AND SETTERS
    //--------------------

    /**
     * Gfts thf numbfr of mbnbgfrs thbt hbvf bffn prodfssfd by this
     * SNMP protodol bdbptor  sindf its drfbtion.
     *
     * @rfturn Thf numbfr of mbnbgfrs hbndlfd by this SNMP protodol bdbptor
     * sindf its drfbtion. This dountfr is not rfsft by thf <CODE>stop</CODE>
     * mfthod.
     */
    @Ovfrridf
    publid int gftSfrvfdClifntCount() {
        rfturn supfr.gftSfrvfdClifntCount();
    }

    /**
     * Gfts thf numbfr of mbnbgfrs durrfntly bfing prodfssfd by this
     * SNMP protodol bdbptor.
     *
     * @rfturn Thf numbfr of mbnbgfrs durrfntly bfing prodfssfd by this
     * SNMP protodol bdbptor.
     */
    @Ovfrridf
    publid int gftAdtivfClifntCount() {
        rfturn supfr.gftAdtivfClifntCount();
    }

    /**
     * Gfts thf mbximum numbfr of mbnbgfrs thbt this SNMP protodol bdbptor dbn
     * prodfss dondurrfntly.
     *
     * @rfturn Thf mbximum numbfr of mbnbgfrs thbt this SNMP protodol bdbptor
     *         dbn prodfss dondurrfntly.
     */
    @Ovfrridf
    publid int gftMbxAdtivfClifntCount() {
        rfturn supfr.gftMbxAdtivfClifntCount();
    }

    /**
     * Sfts thf mbximum numbfr of mbnbgfrs this SNMP protodol bdbptor dbn
     * prodfss dondurrfntly.
     *
     * @pbrbm d Thf numbfr of mbnbgfrs.
     *
     * @fxdfption jbvb.lbng.IllfgblStbtfExdfption This mfthod hbs bffn invokfd
     * whilf thf dommunidbtor wbs <CODE>ONLINE</CODE> or <CODE>STARTING</CODE>.
     */
    @Ovfrridf
    publid void sftMbxAdtivfClifntCount(int d)
        throws jbvb.lbng.IllfgblStbtfExdfption {
        supfr.sftMbxAdtivfClifntCount(d);
    }

    /**
     * Rfturns thf Ip bddrfss bbsfd ACL usfd by this SNMP protodol bdbptor.
     * @rfturn Thf <CODE>InftAddrfssAdl</CODE> implfmfntbtion.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid InftAddrfssAdl gftInftAddrfssAdl() {
        rfturn ipbdl;
    }

    /**
     * Rfturns thf port usfd by this SNMP protodol bdbptor for sfnding trbps.
     * By dffbult, port 162 is usfd.
     *
     * @rfturn Thf port numbfr for sfnding SNMP trbps.
     */
    @Ovfrridf
    publid Intfgfr gftTrbpPort() {
        rfturn trbpPort;
    }

    /**
     * Sfts thf port usfd by this SNMP protodol bdbptor for sfnding trbps.
     *
     * @pbrbm port Thf port numbfr for sfnding SNMP trbps.
     */
    @Ovfrridf
    publid void sftTrbpPort(Intfgfr port) {
        sftTrbpPort(port.intVbluf());
    }

    /**
     * Sfts thf port usfd by this SNMP protodol bdbptor for sfnding trbps.
     *
     * @pbrbm port Thf port numbfr for sfnding SNMP trbps.
     */
    publid void sftTrbpPort(int port) {
        int vbl= port ;
        if (vbl < 0) throw nfw
            IllfgblArgumfntExdfption("Trbp port dbnnot bf b nfgbtivf vbluf");
        trbpPort= vbl ;
    }

    /**
     * Rfturns thf port usfd by this SNMP protodol bdbptor for sfnding
     * inform rfqufsts. By dffbult, port 162 is usfd.
     *
     * @rfturn Thf port numbfr for sfnding SNMP inform rfqufsts.
     */
    @Ovfrridf
    publid int gftInformPort() {
        rfturn informPort;
    }

    /**
     * Sfts thf port usfd by this SNMP protodol bdbptor for sfnding
     * inform rfqufsts.
     *
     * @pbrbm port Thf port numbfr for sfnding SNMP inform rfqufsts.
     */
    @Ovfrridf
    publid void sftInformPort(int port) {
        if (port < 0)
            throw nfw IllfgblArgumfntExdfption("Inform rfqufst port "+
                                               "dbnnot bf b nfgbtivf vbluf");
        informPort= port ;
    }

    /**
     * Rfturns thf protodol of this SNMP protodol bdbptor.
     *
     * @rfturn Thf string "snmp".
     */
    @Ovfrridf
    publid String gftProtodol() {
        rfturn "snmp";
    }

    /**
     * Rfturns thf bufffr sizf of this SNMP protodol bdbptor.
     * This bufffr sizf is usfd for both indoming rfqufst bnd outgoing
     * inform rfqufsts.
     * By dffbult, bufffr sizf 1024 is usfd.
     *
     * @rfturn Thf bufffr sizf.
     */
    @Ovfrridf
    publid Intfgfr gftBufffrSizf() {
        rfturn bufffrSizf;
    }

    /**
     * Sfts thf bufffr sizf of this SNMP protodol bdbptor.
     * This bufffr sizf is usfd for both indoming rfqufst bnd outgoing
     * inform rfqufsts.
     *
     * @pbrbm s Thf bufffr sizf.
     *
     * @fxdfption jbvb.lbng.IllfgblStbtfExdfption This mfthod hbs bffn invokfd
     * whilf thf dommunidbtor wbs <CODE>ONLINE</CODE> or <CODE>STARTING</CODE>.
     */
    @Ovfrridf
    publid void sftBufffrSizf(Intfgfr s)
        throws jbvb.lbng.IllfgblStbtfExdfption {
        if ((stbtf == ONLINE) || (stbtf == STARTING)) {
            throw nfw IllfgblStbtfExdfption("Stop sfrvfr bfforf dbrrying out"+
                                            " this opfrbtion");
        }
        bufffrSizf = s.intVbluf() ;
    }

    /**
     * Gfts thf numbfr of timfs to try sfnding bn inform rfqufst bfforf
     * giving up.
     * By dffbult, b mbximum of 3 trifs is usfd.
     * @rfturn Thf mbximun numbfr of trifs.
     */
    @Ovfrridf
    finbl publid int gftMbxTrifs() {
        rfturn mbxTrifs;
    }

    /**
     * Chbngfs thf mbximun numbfr of timfs to try sfnding bn inform
     * rfqufst bfforf giving up.
     * @pbrbm nfwMbxTrifs Thf mbximun numbfr of trifs.
     */
    @Ovfrridf
    finbl publid syndhronizfd void sftMbxTrifs(int nfwMbxTrifs) {
        if (nfwMbxTrifs < 0)
            throw nfw IllfgblArgumfntExdfption();
        mbxTrifs = nfwMbxTrifs;
    }

    /**
     * Gfts thf timfout to wbit for bn inform rfsponsf from thf mbnbgfr.
     * By dffbult, b timfout of 3 sfdonds is usfd.
     * @rfturn Thf vbluf of thf timfout propfrty.
     */
    @Ovfrridf
    finbl publid int gftTimfout() {
        rfturn timfout;
    }

    /**
     * Chbngfs thf timfout to wbit for bn inform rfsponsf from thf mbnbgfr.
     * @pbrbm nfwTimfout Thf timfout (in millisfdonds).
     */
    @Ovfrridf
    finbl publid syndhronizfd void sftTimfout(int nfwTimfout) {
        if (nfwTimfout < 0)
            throw nfw IllfgblArgumfntExdfption();
        timfout= nfwTimfout;
    }

    /**
     * Rfturns thf mfssbgf fbdtory of this SNMP protodol bdbptor.
     *
     * @rfturn Thf fbdtory objfdt.
     */
    @Ovfrridf
    publid SnmpPduFbdtory gftPduFbdtory() {
        rfturn pduFbdtory ;
    }

    /**
     * Sfts thf mfssbgf fbdtory of this SNMP protodol bdbptor.
     *
     * @pbrbm fbdtory Thf fbdtory objfdt (null mfbns thf dffbult fbdtory).
     */
    @Ovfrridf
    publid void sftPduFbdtory(SnmpPduFbdtory fbdtory) {
        if (fbdtory == null)
            pduFbdtory = nfw SnmpPduFbdtoryBER() ;
        flsf
            pduFbdtory = fbdtory ;
    }

    /**
     * Sft thf usfr-dbtb fbdtory of this SNMP protodol bdbptor.
     *
     * @pbrbm fbdtory Thf fbdtory objfdt (null mfbns no fbdtory).
     * @sff dom.sun.jmx.snmp.bgfnt.SnmpUsfrDbtbFbdtory
     */
    @Ovfrridf
    publid void sftUsfrDbtbFbdtory(SnmpUsfrDbtbFbdtory fbdtory) {
        usfrDbtbFbdtory = fbdtory ;
    }

    /**
     * Gft thf usfr-dbtb fbdtory bssodibtfd with this SNMP protodol bdbptor.
     *
     * @rfturn Thf fbdtory objfdt (null mfbns no fbdtory).
     * @sff dom.sun.jmx.snmp.bgfnt.SnmpUsfrDbtbFbdtory
     */
    @Ovfrridf
    publid SnmpUsfrDbtbFbdtory gftUsfrDbtbFbdtory() {
        rfturn usfrDbtbFbdtory;
    }

    /**
     * Rfturns <CODE>truf</CODE> if buthfntidbtion trbps brf fnbblfd.
     * <P>
     * Whfn this ffbturf is fnbblfd, thf SNMP protodol bdbptor sfnds
     * bn <CODE>buthfntidbtionFbilurf</CODE> trbp fbdh timf bn
     * buthfntidbtion fbils.
     * <P>
     * Thf dffbult bfhbviour is to sfnd buthfntidbtion trbps.
     *
     * @rfturn <CODE>truf</CODE> if buthfntidbtion trbps brf fnbblfd,
     *         <CODE>fblsf</CODE> othfrwisf.
     */
    @Ovfrridf
    publid boolfbn gftAuthTrbpEnbblfd() {
        rfturn buthTrbpEnbblfd ;
    }

    /**
     * Sfts thf flbg indidbting if trbps nffd to bf sfnt in dbsf of
     * buthfntidbtion fbilurf.
     *
     * @pbrbm fnbblfd Flbg indidbting if trbps nffd to bf sfnt.
     */
    @Ovfrridf
    publid void sftAuthTrbpEnbblfd(boolfbn fnbblfd) {
        buthTrbpEnbblfd = fnbblfd ;
    }

    /**
     * Rfturns <dodf>truf</dodf> if this SNMP protodol bdbptor sfnds b
     * rfsponsf in dbsf of buthfntidbtion fbilurf.
     * <P>
     * Whfn this ffbturf is fnbblfd, thf SNMP protodol bdbptor sfnds b
     * rfsponsf with <CODE>noSudhNbmf</CODE> or <CODE>rfbdOnly</CODE> whfn
     * thf buthfntidbtion fbilfd. If thf flbg is disbblfd, thf
     * SNMP protodol bdbptor trbshfs thf PDU silfntly.
     * <P>
     * Thf dffbult bfhbvior is to sfnd rfsponsfs.
     *
     * @rfturn <CODE>truf</CODE> if rfsponsfs brf sfnt.
     */
    @Ovfrridf
    publid boolfbn gftAuthRfspEnbblfd() {
        rfturn buthRfspEnbblfd ;
    }

    /**
     * Sfts thf flbg indidbting if rfsponsfs nffd to bf sfnt in dbsf of
     * buthfntidbtion fbilurf.
     *
     * @pbrbm fnbblfd Flbg indidbting if rfsponsfs nffd to bf sfnt.
     */
    @Ovfrridf
    publid void sftAuthRfspEnbblfd(boolfbn fnbblfd) {
        buthRfspEnbblfd = fnbblfd ;
    }

    /**
     * Rfturns thf fntfrprisf OID. It is usfd by
     * {@link #snmpV1Trbp snmpV1Trbp} to fill thf 'fntfrprisf' fifld of thf
     * trbp rfqufst.
     *
     * @rfturn Thf OID in string formbt "x.x.x.x".
     */
    @Ovfrridf
    publid String gftEntfrprisfOid() {
        rfturn fntfrprisfOid.toString() ;
    }

    /**
     * Sfts thf fntfrprisf OID.
     *
     * @pbrbm oid Thf OID in string formbt "x.x.x.x".
     *
     * @fxdfption IllfgblArgumfntExdfption Thf string formbt is indorrfdt
     */
    @Ovfrridf
    publid void sftEntfrprisfOid(String oid) throws IllfgblArgumfntExdfption {
        fntfrprisfOid = nfw SnmpOid(oid) ;
    }

    /**
     * Rfturns thf nbmfs of thf MIBs bvbilbblf in this SNMP protodol bdbptor.
     *
     * @rfturn An brrby of MIB nbmfs.
     */
    @Ovfrridf
    publid String[] gftMibs() {
        String[] rfsult = nfw String[mibs.sizf()] ;
        int i = 0 ;
        for (Enumfrbtion<SnmpMibAgfnt> f = mibs.flfmfnts() ; f.hbsMorfElfmfnts() ;) {
            SnmpMibAgfnt mib = f.nfxtElfmfnt() ;
            rfsult[i++] = mib.gftMibNbmf();
        }
        rfturn rfsult ;
    }

    // GETTERS FOR SNMP GROUP (MIBII)
    //-------------------------------

    /**
     * Rfturns thf <CODE>snmpOutTrbps</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpOutTrbps</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpOutTrbps() {
        rfturn (long)snmpOutTrbps;
    }

    /**
     * Rfturns thf <CODE>snmpOutGftRfsponsfs</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpOutGftRfsponsfs</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpOutGftRfsponsfs() {
        rfturn (long)snmpOutGftRfsponsfs;
    }

    /**
     * Rfturns thf <CODE>snmpOutGfnErrs</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpOutGfnErrs</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpOutGfnErrs() {
        rfturn (long)snmpOutGfnErrs;
    }

    /**
     * Rfturns thf <CODE>snmpOutBbdVblufs</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpOutBbdVblufs</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpOutBbdVblufs() {
        rfturn (long)snmpOutBbdVblufs;
    }

    /**
     * Rfturns thf <CODE>snmpOutNoSudhNbmfs</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpOutNoSudhNbmfs</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpOutNoSudhNbmfs() {
        rfturn (long)snmpOutNoSudhNbmfs;
    }

    /**
     * Rfturns thf <CODE>snmpOutTooBigs</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpOutTooBigs</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpOutTooBigs() {
        rfturn (long)snmpOutTooBigs;
    }

    /**
     * Rfturns thf <CODE>snmpInASNPbrsfErrs</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpInASNPbrsfErrs</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpInASNPbrsfErrs() {
        rfturn (long)snmpInASNPbrsfErrs;
    }

    /**
     * Rfturns thf <CODE>snmpInBbdCommunityUsfs</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpInBbdCommunityUsfs</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpInBbdCommunityUsfs() {
        rfturn (long)snmpInBbdCommunityUsfs;
    }

    /**
     * Rfturns thf <CODE>snmpInBbdCommunityNbmfs</CODE> vbluf dffinfd in
     * MIB-II.
     *
     * @rfturn Thf <CODE>snmpInBbdCommunityNbmfs</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpInBbdCommunityNbmfs() {
        rfturn (long)snmpInBbdCommunityNbmfs;
    }

    /**
     * Rfturns thf <CODE>snmpInBbdVfrsions</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpInBbdVfrsions</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpInBbdVfrsions() {
        rfturn (long)snmpInBbdVfrsions;
    }

    /**
     * Rfturns thf <CODE>snmpOutPkts</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpOutPkts</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpOutPkts() {
        rfturn (long)snmpOutPkts;
    }

    /**
     * Rfturns thf <CODE>snmpInPkts</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpInPkts</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpInPkts() {
        rfturn (long)snmpInPkts;
    }

    /**
     * Rfturns thf <CODE>snmpInGftRfqufsts</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpInGftRfqufsts</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpInGftRfqufsts() {
        rfturn (long)snmpInGftRfqufsts;
    }

    /**
     * Rfturns thf <CODE>snmpInGftNfxts</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpInGftNfxts</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpInGftNfxts() {
        rfturn (long)snmpInGftNfxts;
    }

    /**
     * Rfturns thf <CODE>snmpInSftRfqufsts</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpInSftRfqufsts</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpInSftRfqufsts() {
        rfturn (long)snmpInSftRfqufsts;
    }

    /**
     * Rfturns thf <CODE>snmpInTotblSftVbrs</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpInTotblSftVbrs</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpInTotblSftVbrs() {
        rfturn (long)snmpInTotblSftVbrs;
    }

    /**
     * Rfturns thf <CODE>snmpInTotblRfqVbrs</CODE> vbluf dffinfd in MIB-II.
     *
     * @rfturn Thf <CODE>snmpInTotblRfqVbrs</CODE> vbluf.
     */
    @Ovfrridf
    publid Long gftSnmpInTotblRfqVbrs() {
        rfturn (long)snmpInTotblRfqVbrs;
    }

    /**
     * Rfturns thf <CODE>snmpSilfntDrops</CODE> vbluf dffinfd in RFC
     * 1907 NMPv2-MIB .
     *
     * @rfturn Thf <CODE>snmpSilfntDrops</CODE> vbluf.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid Long gftSnmpSilfntDrops() {
        rfturn (long)snmpSilfntDrops;
    }

    /**
     * Rfturns thf <CODE>snmpProxyDrops</CODE> vbluf dffinfd in RFC
     * 1907 NMPv2-MIB .
     *
     * @rfturn Thf <CODE>snmpProxyDrops</CODE> vbluf.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid Long gftSnmpProxyDrops() {
        rfturn 0L;
    }


    // PUBLIC METHODS
    //---------------

    /**
     * Allows thf MBfbn to pfrform bny opfrbtions it nffds bfforf bfing
     * rfgistfrfd in thf MBfbn sfrvfr.
     * If thf nbmf of thf SNMP protodol bdbptor MBfbn is not spfdififd,
     * it is initiblizfd with thf dffbult vbluf:
     * {@link dom.sun.jmx.snmp.SfrvidfNbmf#DOMAIN
     *   dom.sun.jmx.snmp.SfrvidfNbmf.DOMAIN}:{@link
     * dom.sun.jmx.snmp.SfrvidfNbmf#SNMP_ADAPTOR_SERVER
     * dom.sun.jmx.snmp.SfrvidfNbmf.SNMP_ADAPTOR_SERVER}.
     * If bny fxdfption is rbisfd, thf SNMP protodol bdbptor MBfbn will
     * not bf rfgistfrfd in thf MBfbn sfrvfr.
     *
     * @pbrbm sfrvfr Thf MBfbn sfrvfr to rfgistfr thf sfrvidf with.
     * @pbrbm nbmf Thf objfdt nbmf.
     *
     * @rfturn Thf nbmf of thf SNMP protodol bdbptor rfgistfrfd.
     *
     * @fxdfption jbvb.lbng.Exdfption
     */
    @Ovfrridf
    publid ObjfdtNbmf prfRfgistfr(MBfbnSfrvfr sfrvfr, ObjfdtNbmf nbmf)
        throws jbvb.lbng.Exdfption {

        if (nbmf == null) {
            nbmf = nfw ObjfdtNbmf(sfrvfr.gftDffbultDombin() + ":" +
                             dom.sun.jmx.snmp.SfrvidfNbmf.SNMP_ADAPTOR_SERVER);
        }
        rfturn (supfr.prfRfgistfr(sfrvfr, nbmf));
    }

    /**
     * Not usfd in this dontfxt.
     */
    @Ovfrridf
    publid void postRfgistfr (Boolfbn rfgistrbtionDonf) {
        supfr.postRfgistfr(rfgistrbtionDonf);
    }

    /**
     * Not usfd in this dontfxt.
     */
    @Ovfrridf
    publid void prfDfrfgistfr() throws jbvb.lbng.Exdfption {
        supfr.prfDfrfgistfr();
    }

    /**
     * Not usfd in this dontfxt.
     */
    @Ovfrridf
    publid void postDfrfgistfr() {
        supfr.postDfrfgistfr();
    }

    /**
     * Adds b nfw MIB in thf SNMP MIB hbndlfr.
     *
     * @pbrbm mib Thf MIB to bdd.
     *
     * @rfturn A rfffrfndf to thf SNMP MIB hbndlfr.
     *
     * @fxdfption IllfgblArgumfntExdfption If thf pbrbmftfr is null.
     */
    @Ovfrridf
    publid SnmpMibHbndlfr bddMib(SnmpMibAgfnt mib)
        throws IllfgblArgumfntExdfption {
        if (mib == null) {
            throw nfw IllfgblArgumfntExdfption() ;
        }

        if(!mibs.dontbins(mib))
            mibs.bddElfmfnt(mib);

        root.rfgistfr(mib);

        rfturn this;
    }

    /**
     * Adds b nfw MIB in thf SNMP MIB hbndlfr.
     * This mfthod is to bf dbllfd to sft b spfdifid bgfnt to b spfdifid OID.
     * This dbn bf usfful whfn dfbling with MIB ovfrlbpping.
     * Somf OID dbn bf implfmfntfd in morf thbn onf MIB. In this dbsf,
     * thf OID nfbrfr bgfnt will bf usfd on SNMP opfrbtions.
     *
     * @pbrbm mib Thf MIB to bdd.
     * @pbrbm oids Thf sft of OIDs this bgfnt implfmfnts.
     *
     * @rfturn A rfffrfndf to thf SNMP MIB hbndlfr.
     *
     * @fxdfption IllfgblArgumfntExdfption If thf pbrbmftfr is null.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid SnmpMibHbndlfr bddMib(SnmpMibAgfnt mib, SnmpOid[] oids)
        throws IllfgblArgumfntExdfption {
        if (mib == null) {
            throw nfw IllfgblArgumfntExdfption() ;
        }

        //If null oid brrby, just bdd it to thf mib.
        if(oids == null)
            rfturn bddMib(mib);

        if(!mibs.dontbins(mib))
            mibs.bddElfmfnt(mib);

        for (int i = 0; i < oids.lfngth; i++) {
            root.rfgistfr(mib, oids[i].longVbluf());
        }
        rfturn this;
    }

    /**
     * Adds b nfw MIB in thf SNMP MIB hbndlfr. In SNMP V1 bnd V2 thf
     * <CODE>dontfxtNbmf</CODE> is usflfss bnd this mfthod
     * is fquivblfnt to <CODE>bddMib(SnmpMibAgfnt mib)</CODE>.
     *
     * @pbrbm mib Thf MIB to bdd.
     * @pbrbm dontfxtNbmf Thf MIB dontfxt nbmf.
     * @rfturn A rfffrfndf on thf SNMP MIB hbndlfr.
     *
     * @fxdfption IllfgblArgumfntExdfption If thf pbrbmftfr is null.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid SnmpMibHbndlfr bddMib(SnmpMibAgfnt mib, String dontfxtNbmf)
        throws IllfgblArgumfntExdfption {
        rfturn bddMib(mib);
    }

    /**
     * Adds b nfw MIB in thf SNMP MIB hbndlfr. In SNMP V1 bnd V2 thf
     * <CODE>dontfxtNbmf</CODE> is usflfss bnd this mfthod
     * is fquivblfnt to <CODE>bddMib(SnmpMibAgfnt mib, SnmpOid[] oids)</CODE>.
     *
     * @pbrbm mib Thf MIB to bdd.
     * @pbrbm dontfxtNbmf Thf MIB dontfxt. If null is pbssfd, will bf
     *        rfgistfrfd in thf dffbult dontfxt.
     * @pbrbm oids Thf sft of OIDs this bgfnt implfmfnts.
     *
     * @rfturn A rfffrfndf to thf SNMP MIB hbndlfr.
     *
     * @fxdfption IllfgblArgumfntExdfption If thf pbrbmftfr is null.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid SnmpMibHbndlfr bddMib(SnmpMibAgfnt mib,
                                 String dontfxtNbmf,
                                 SnmpOid[] oids)
        throws IllfgblArgumfntExdfption {

        rfturn bddMib(mib, oids);
    }

    /**
     * Rfmovfs thf spfdififd MIB from thf SNMP protodol bdbptor.
     * In SNMP V1 bnd V2 thf <CODE>dontfxtNbmf</CODE> is usflfss bnd this
     * mfthod is fquivblfnt to <CODE>rfmovfMib(SnmpMibAgfnt mib)</CODE>.
     *
     * @pbrbm mib Thf MIB to bf rfmovfd.
     * @pbrbm dontfxtNbmf Thf dontfxt nbmf usfd bt rfgistrbtion timf.
     *
     * @rfturn <CODE>truf</CODE> if thf spfdififd <CODE>mib</CODE> wbs
     * b MIB indludfd in thf SNMP MIB hbndlfr, <CODE>fblsf</CODE>
     * othfrwisf.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid boolfbn rfmovfMib(SnmpMibAgfnt mib, String dontfxtNbmf) {
        rfturn rfmovfMib(mib);
    }

    /**
     * Rfmovfs thf spfdififd MIB from thf SNMP protodol bdbptor.
     *
     * @pbrbm mib Thf MIB to bf rfmovfd.
     *
     * @rfturn <CODE>truf</CODE> if thf spfdififd <CODE>mib</CODE> wbs b MIB
     *         indludfd in thf SNMP MIB hbndlfr, <CODE>fblsf</CODE> othfrwisf.
     */
    @Ovfrridf
    publid boolfbn rfmovfMib(SnmpMibAgfnt mib) {
        root.unrfgistfr(mib);
        rfturn (mibs.rfmovfElfmfnt(mib)) ;
    }

    /**
     * Rfmovfs thf spfdififd MIB from thf SNMP protodol bdbptor.
     *
     * @pbrbm mib Thf MIB to bf rfmovfd.
     * @pbrbm oids Thf oid thf MIB wbs prfviously rfgistfrfd for.
     * @rfturn <CODE>truf</CODE> if thf spfdififd <CODE>mib</CODE> wbs
     * b MIB indludfd in thf SNMP MIB hbndlfr, <CODE>fblsf</CODE>
     * othfrwisf.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid boolfbn rfmovfMib(SnmpMibAgfnt mib, SnmpOid[] oids) {
        root.unrfgistfr(mib, oids);
        rfturn (mibs.rfmovfElfmfnt(mib)) ;
    }

     /**
     * Rfmovfs thf spfdififd MIB from thf SNMP protodol bdbptor.
     *
     * @pbrbm mib Thf MIB to bf rfmovfd.
     * @pbrbm dontfxtNbmf Thf dontfxt nbmf usfd bt rfgistrbtion timf.
     * @pbrbm oids Thf oid thf MIB wbs prfviously rfgistfrfd for.
     * @rfturn <CODE>truf</CODE> if thf spfdififd <CODE>mib</CODE> wbs
     * b MIB indludfd in thf SNMP MIB hbndlfr, <CODE>fblsf</CODE>
     * othfrwisf.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid boolfbn rfmovfMib(SnmpMibAgfnt mib,
                             String dontfxtNbmf,
                             SnmpOid[] oids) {
        rfturn rfmovfMib(mib, oids);
    }

    // SUBCLASSING OF COMMUNICATOR SERVER
    //-----------------------------------

    /**
     * Crfbtfs thf dbtbgrbm sodkft.
     */
    @Ovfrridf
    protfdtfd void doBind()
        throws CommunidbtionExdfption, IntfrruptfdExdfption {

        try {
            syndhronizfd (this) {
                sodkft = nfw DbtbgrbmSodkft(port, bddrfss) ;
            }
            dbgTbg = mbkfDfbugTbg();
        } dbtdh (SodkftExdfption f) {
            if (f.gftMfssbgf().fqubls(IntfrruptSysCbllMsg))
                throw nfw IntfrruptfdExdfption(f.toString()) ;
            flsf {
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                        "doBind", "dbnnot bind on port " + port);
                }
                throw nfw CommunidbtionExdfption(f) ;
            }
        }
    }

    /**
     * Rfturn thf bdtubl port to whidh thf bdbptor is bound.
     * Cbn bf difffrfnt from thf port givfn bt donstrudtion timf if
     * thbt port numbfr wbs 0.
     * @rfturn thf bdtubl port to whidh thf bdbptor is bound.
     **/
    @Ovfrridf
    publid int gftPort() {
        syndhronizfd (this) {
            if (sodkft != null) rfturn sodkft.gftLodblPort();
        }
        rfturn supfr.gftPort();
    }

    /**
     * Closfs thf dbtbgrbm sodkft.
     */
    @Ovfrridf
    protfdtfd void doUnbind()
        throws CommunidbtionExdfption, IntfrruptfdExdfption {
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "doUnbind","Finblly dlosf thf sodkft");
        }
        syndhronizfd (this) {
            if (sodkft != null) {
                sodkft.dlosf() ;
                sodkft = null ;
                // Importbnt to inform finblizf() thbt thf sodkft is dlosfd...
            }
        }
        dlosfTrbpSodkftIfNffdfd() ;
        dlosfInformSodkftIfNffdfd() ;
    }

    privbtf void drfbtfSnmpRfqufstHbndlfr(SnmpAdbptorSfrvfr sfrvfr,
                                          int id,
                                          DbtbgrbmSodkft s,
                                          DbtbgrbmPbdkft p,
                                          SnmpMibTrff trff,
                                          Vfdtor<SnmpMibAgfnt> m,
                                          InftAddrfssAdl b,
                                          SnmpPduFbdtory fbdtory,
                                          SnmpUsfrDbtbFbdtory dbtbFbdtory,
                                          MBfbnSfrvfr f,
                                          ObjfdtNbmf n) {
        finbl SnmpRfqufstHbndlfr hbndlfr =
            nfw SnmpRfqufstHbndlfr(this, id, s, p, trff, m, b, fbdtory,
                                   dbtbFbdtory, f, n);
        thrfbdSfrvidf.submitTbsk(hbndlfr);
    }

    /**
     * Rfbds b pbdkft from thf dbtbgrbm sodkft bnd drfbtfs b rfqufst
     * hbndlfr whidh dfdodfs bnd prodfssfs thf rfqufst.
     */
    @Ovfrridf
    protfdtfd void doRfdfivf()
        throws CommunidbtionExdfption, IntfrruptfdExdfption {

        // Lft's wbit for somfthing to bf rfdfivfd.
        //
        try {
            pbdkft = nfw DbtbgrbmPbdkft(nfw bytf[bufffrSizf], bufffrSizf) ;
            sodkft.rfdfivf(pbdkft);
            int stbtf = gftStbtf();

            if(stbtf != ONLINE) {
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                        "doRfdfivf","rfdfivfd b mfssbgf but stbtf not onlinf, rfturning.");
                }
                rfturn;
            }

            drfbtfSnmpRfqufstHbndlfr(this, sfrvfdClifntCount, sodkft,
                                     pbdkft, root, mibs, ipbdl, pduFbdtory,
                                     usfrDbtbFbdtory, topMBS, objfdtNbmf);
        } dbtdh (SodkftExdfption f) {
            // Lft's dhfdk if wf hbvf bffn intfrruptfd by stop().
            //
            if (f.gftMfssbgf().fqubls(IntfrruptSysCbllMsg))
                throw nfw IntfrruptfdExdfption(f.toString()) ;
            flsf
                throw nfw CommunidbtionExdfption(f) ;
        } dbtdh (IntfrruptfdIOExdfption f) {
            throw nfw IntfrruptfdExdfption(f.toString()) ;
        } dbtdh (CommunidbtionExdfption f) {
            throw f ;
        } dbtdh (Exdfption f) {
            throw nfw CommunidbtionExdfption(f) ;
        }
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "doRfdfivf", "rfdfivfd b mfssbgf");
        }
    }

    @Ovfrridf
    protfdtfd void doError(Exdfption f) throws CommunidbtionExdfption {
    }

    /**
     * Not usfd in this dontfxt.
     */
    @Ovfrridf
    protfdtfd void doProdfss()
        throws CommunidbtionExdfption, IntfrruptfdExdfption {
    }


    /**
     * Thf numbfr of timfs thf dommunidbtor sfrvfr will bttfmpt
     * to bind bfforf giving up.
     * Wf bttfmpt only ondf...
     * @rfturn 1
     **/
    @Ovfrridf
    protfdtfd int gftBindTrifs() {
        rfturn 1;
    }

    /**
     * Stops this SNMP protodol bdbptor.
     * Closfs thf dbtbgrbm sodkft.
     * <p>
     * Hbs no ffffdt if this SNMP protodol bdbptor is <CODE>OFFLINE</CODE> or
     * <CODE>STOPPING</CODE>.
     */
    @Ovfrridf
    publid void stop(){

        finbl int port = gftPort();
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "stop", "Stopping: using port " + port);
        }
        if ((stbtf == ONLINE) || (stbtf == STARTING)){
            supfr.stop();
            try {
                DbtbgrbmSodkft sn = nfw DbtbgrbmSodkft(0);
                try {
                    bytf[] ob = nfw bytf[1];

                    DbtbgrbmPbdkft pk;
                    if (bddrfss != null)
                        pk = nfw DbtbgrbmPbdkft(ob , 1, bddrfss, port);
                    flsf
                        pk = nfw DbtbgrbmPbdkft(ob , 1,
                                 jbvb.nft.InftAddrfss.gftLodblHost(), port);

                    if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                        SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                            "stop", "Sfnding: using port " + port);
                    }
                    sn.sfnd(pk);
                } finblly {
                    sn.dlosf();
                }
            } dbtdh (Throwbblf f){
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                        "stop", "Got unfxpfdtfd Throwbblf", f);
                }
            }
        }
    }

    // SENDING SNMP TRAPS STUFF
    //-------------------------

    /**
     * Sfnds b trbp using SNMP V1 trbp formbt.
     * <BR>Thf trbp is sfnt to fbdh dfstinbtion dffinfd in thf ACL filf
     * (if bvbilbblf).
     * If no ACL filf or no dfstinbtions brf bvbilbblf, thf trbp is sfnt
     * to thf lodbl host.
     *
     * @pbrbm gfnfrid Thf gfnfrid numbfr of thf trbp.
     * @pbrbm spfdifid Thf spfdifid numbfr of thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     *
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf trbp.
     * @fxdfption SnmpStbtusExdfption If thf trbp fxdffds thf limit dffinfd
     *            by <CODE>bufffrSizf</CODE>.
     */
    @Ovfrridf
    publid void snmpV1Trbp(int gfnfrid, int spfdifid,
                           SnmpVbrBindList vbrBindList)
        throws IOExdfption, SnmpStbtusExdfption {

        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "snmpV1Trbp", "gfnfrid=" + gfnfrid +
                  ", spfdifid=" + spfdifid);
        }

        // First, mbkf bn SNMP V1 trbp pdu
        //
        SnmpPduTrbp pdu = nfw SnmpPduTrbp() ;
        pdu.bddrfss = null ;
        pdu.port = trbpPort ;
        pdu.typf = pduV1TrbpPdu ;
        pdu.vfrsion = snmpVfrsionOnf ;
        pdu.dommunity = null ;
        pdu.fntfrprisf = fntfrprisfOid ;
        pdu.gfnfridTrbp = gfnfrid ;
        pdu.spfdifidTrbp = spfdifid ;
        pdu.timfStbmp = gftSysUpTimf();

        if (vbrBindList != null) {
            pdu.vbrBindList = nfw SnmpVbrBind[vbrBindList.sizf()] ;
            vbrBindList.dopyInto(pdu.vbrBindList);
        }
        flsf
            pdu.vbrBindList = null ;

        // If thf lodbl host dbnnot bf dftfrminfd, wf put 0.0.0.0 in bgfntAddr
        try {
            if (bddrfss != null)
                pdu.bgfntAddr = hbndlfMultiplfIpVfrsion(bddrfss.gftAddrfss());
            flsf pdu.bgfntAddr =
              hbndlfMultiplfIpVfrsion(InftAddrfss.gftLodblHost().gftAddrfss());
        } dbtdh (UnknownHostExdfption f) {
            bytf[] zfrofdAddr = nfw bytf[4];
            pdu.bgfntAddr = hbndlfMultiplfIpVfrsion(zfrofdAddr) ;
        }

        // Nfxt, sfnd thf pdu to bll dfstinbtions dffinfd in ACL
        //
        sfndTrbpPdu(pdu) ;
    }

    privbtf SnmpIpAddrfss hbndlfMultiplfIpVfrsion(bytf[] bddrfss) {
        if(bddrfss.lfngth == 4)
          rfturn nfw SnmpIpAddrfss(bddrfss);
        flsf {
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                    "hbndlfMultiplfIPVfrsion",
                      "Not bn IPv4 bddrfss, rfturn null");
            }
            rfturn null;
        }
    }

    /**
     * Sfnds b trbp using SNMP V1 trbp formbt.
     * <BR>Thf trbp is sfnt to thf spfdififd <CODE>InftAddrfss</CODE>
     * dfstinbtion using thf spfdififd dommunity string (bnd thf ACL filf
     * is not usfd).
     *
     * @pbrbm bddr Thf <CODE>InftAddrfss</CODE> dfstinbtion of thf trbp.
     * @pbrbm ds Thf dommunity string to bf usfd for thf trbp.
     * @pbrbm gfnfrid Thf gfnfrid numbfr of thf trbp.
     * @pbrbm spfdifid Thf spfdifid numbfr of thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     *
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf trbp.
     * @fxdfption SnmpStbtusExdfption If thf trbp fxdffds thf limit dffinfd
     *            by <CODE>bufffrSizf</CODE>.
     */
    @Ovfrridf
    publid void snmpV1Trbp(InftAddrfss bddr, String ds, int gfnfrid,
                           int spfdifid, SnmpVbrBindList vbrBindList)
        throws IOExdfption, SnmpStbtusExdfption {

        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "snmpV1Trbp", "gfnfrid=" + gfnfrid + ", spfdifid=" +
                  spfdifid);
        }

        // First, mbkf bn SNMP V1 trbp pdu
        //
        SnmpPduTrbp pdu = nfw SnmpPduTrbp() ;
        pdu.bddrfss = null ;
        pdu.port = trbpPort ;
        pdu.typf = pduV1TrbpPdu ;
        pdu.vfrsion = snmpVfrsionOnf ;

        if(ds != null)
            pdu.dommunity = ds.gftBytfs();
        flsf
            pdu.dommunity = null ;

        pdu.fntfrprisf = fntfrprisfOid ;
        pdu.gfnfridTrbp = gfnfrid ;
        pdu.spfdifidTrbp = spfdifid ;
        pdu.timfStbmp = gftSysUpTimf();

        if (vbrBindList != null) {
            pdu.vbrBindList = nfw SnmpVbrBind[vbrBindList.sizf()] ;
            vbrBindList.dopyInto(pdu.vbrBindList);
        }
        flsf
            pdu.vbrBindList = null ;

        // If thf lodbl host dbnnot bf dftfrminfd, wf put 0.0.0.0 in bgfntAddr
        try {
            if (bddrfss != null)
                pdu.bgfntAddr = hbndlfMultiplfIpVfrsion(bddrfss.gftAddrfss());
            flsf pdu.bgfntAddr =
              hbndlfMultiplfIpVfrsion(InftAddrfss.gftLodblHost().gftAddrfss());
        } dbtdh (UnknownHostExdfption f) {
            bytf[] zfrofdAddr = nfw bytf[4];
            pdu.bgfntAddr = hbndlfMultiplfIpVfrsion(zfrofdAddr) ;
        }

        // Nfxt, sfnd thf pdu to thf spfdififd dfstinbtion
        //
        if(bddr != null)
            sfndTrbpPdu(bddr, pdu) ;
        flsf
            sfndTrbpPdu(pdu);
    }

    /**
     * Sfnds b trbp using SNMP V1 trbp formbt.
     * <BR>Thf trbp is sfnt to thf spfdififd <CODE>InftAddrfss</CODE>
     * dfstinbtion using thf spfdififd pbrbmftfrs (bnd thf ACL filf is not
     * usfd).
     * Notf thbt if thf spfdififd <CODE>InftAddrfss</CODE> dfstinbtion is null,
     * thfn thf ACL filf mfdhbnism is usfd.
     *
     * @pbrbm bddr Thf <CODE>InftAddrfss</CODE> dfstinbtion of thf trbp.
     * @pbrbm bgfntAddr Thf bgfnt bddrfss to bf usfd for thf trbp.
     * @pbrbm ds Thf dommunity string to bf usfd for thf trbp.
     * @pbrbm fntfrpOid Thf fntfrprisf OID to bf usfd for thf trbp.
     * @pbrbm gfnfrid Thf gfnfrid numbfr of thf trbp.
     * @pbrbm spfdifid Thf spfdifid numbfr of thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     * @pbrbm timf Thf timf stbmp (ovfrwritf thf durrfnt timf).
     *
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf trbp.
     * @fxdfption SnmpStbtusExdfption If thf trbp fxdffds thf limit dffinfd
     *            by <CODE>bufffrSizf</CODE>.
     *
     * @sindf 1.5
     */
    publid void snmpV1Trbp(InftAddrfss bddr,
                           SnmpIpAddrfss bgfntAddr,
                           String ds,
                           SnmpOid fntfrpOid,
                           int gfnfrid,
                           int spfdifid,
                           SnmpVbrBindList vbrBindList,
                           SnmpTimftidks timf)
        throws IOExdfption, SnmpStbtusExdfption {
        snmpV1Trbp(bddr,
                   trbpPort,
                   bgfntAddr,
                   ds,
                   fntfrpOid,
                   gfnfrid,
                   spfdifid,
                   vbrBindList,
                   timf);
    }

    /**
     * Sfnds b trbp using SNMP V1 trbp formbt.
     * <BR>Thf trbp is sfnt to thf spfdififd <CODE>SnmpPffr</CODE> dfstinbtion.
     * Thf dommunity string usfd is thf onf lodbtfd in thf
     * <CODE>SnmpPffr</CODE> pbrbmftfrs
     * (<CODE>SnmpPbrbmftfrs.gftRdCommunity() </CODE>).
     *
     * @pbrbm pffr Thf <CODE>SnmpPffr</CODE> dfstinbtion of thf trbp.
     * @pbrbm bgfntAddr Thf bgfnt bddrfss to bf usfd for thf trbp.
     * @pbrbm fntfrpOid Thf fntfrprisf OID to bf usfd for thf trbp.
     * @pbrbm gfnfrid Thf gfnfrid numbfr of thf trbp.
     * @pbrbm spfdifid Thf spfdifid numbfr of thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     * @pbrbm timf Thf timf stbmp (ovfrwritf thf durrfnt timf).
     *
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf trbp.
     * @fxdfption SnmpStbtusExdfption If thf trbp fxdffds thf limit
     * dffinfd by <CODE>bufffrSizf</CODE>.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid void snmpV1Trbp(SnmpPffr pffr,
                           SnmpIpAddrfss bgfntAddr,
                           SnmpOid fntfrpOid,
                           int gfnfrid,
                           int spfdifid,
                           SnmpVbrBindList vbrBindList,
                           SnmpTimftidks timf)
        throws IOExdfption, SnmpStbtusExdfption {

        SnmpPbrbmftfrs p = (SnmpPbrbmftfrs) pffr.gftPbrbms();
        snmpV1Trbp(pffr.gftDfstAddr(),
                   pffr.gftDfstPort(),
                   bgfntAddr,
                   p.gftRdCommunity(),
                   fntfrpOid,
                   gfnfrid,
                   spfdifid,
                   vbrBindList,
                   timf);
    }

    privbtf void snmpV1Trbp(InftAddrfss bddr,
                            int port,
                            SnmpIpAddrfss bgfntAddr,
                            String ds,
                            SnmpOid fntfrpOid,
                            int gfnfrid,
                            int spfdifid,
                            SnmpVbrBindList vbrBindList,
                            SnmpTimftidks timf)
        throws IOExdfption, SnmpStbtusExdfption {

        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "snmpV1Trbp", "gfnfrid=" + gfnfrid + ", spfdifid=" +
                  spfdifid);
        }

        // First, mbkf bn SNMP V1 trbp pdu
        //
        SnmpPduTrbp pdu = nfw SnmpPduTrbp() ;
        pdu.bddrfss = null ;
        pdu.port = port ;
        pdu.typf = pduV1TrbpPdu ;
        pdu.vfrsion = snmpVfrsionOnf ;

        //Diff stbrt
        if(ds != null)
            pdu.dommunity = ds.gftBytfs();
        flsf
            pdu.dommunity = null ;
        //Diff fnd

        // Diff stbrt
        if(fntfrpOid != null)
            pdu.fntfrprisf = fntfrpOid;
        flsf
            pdu.fntfrprisf = fntfrprisfOid ;
        //Diff fnd
        pdu.gfnfridTrbp = gfnfrid ;
        pdu.spfdifidTrbp = spfdifid ;
        //Diff stbrt
        if(timf != null)
            pdu.timfStbmp = timf.longVbluf();
        flsf
            pdu.timfStbmp = gftSysUpTimf();
        //Diff fnd

        if (vbrBindList != null) {
            pdu.vbrBindList = nfw SnmpVbrBind[vbrBindList.sizf()] ;
            vbrBindList.dopyInto(pdu.vbrBindList);
        }
        flsf
            pdu.vbrBindList = null ;

        if (bgfntAddr == null) {
            // If thf lodbl host dbnnot bf dftfrminfd,
            // wf put 0.0.0.0 in bgfntAddr
            try {
                finbl InftAddrfss inftAddr =
                    (bddrfss!=null)?bddrfss:InftAddrfss.gftLodblHost();
                bgfntAddr = hbndlfMultiplfIpVfrsion(inftAddr.gftAddrfss());
            }  dbtdh (UnknownHostExdfption f) {
                bytf[] zfrofdAddr = nfw bytf[4];
                bgfntAddr = hbndlfMultiplfIpVfrsion(zfrofdAddr);
            }
        }

        pdu.bgfntAddr = bgfntAddr;

        // Nfxt, sfnd thf pdu to thf spfdififd dfstinbtion
        //
        // Diff stbrt
        if(bddr != null)
            sfndTrbpPdu(bddr, pdu) ;
        flsf
            sfndTrbpPdu(pdu);

        //End diff
    }

    /**
     * Sfnds b trbp using SNMP V2 trbp formbt.
     * <BR>Thf trbp is sfnt to thf spfdififd <CODE>SnmpPffr</CODE> dfstinbtion.
     * <BR>Thf dommunity string usfd is thf onf lodbtfd in thf
     * <CODE>SnmpPffr</CODE> pbrbmftfrs
     * (<CODE>SnmpPbrbmftfrs.gftRdCommunity() </CODE>).
     * <BR>Thf vbribblf list indludfd in thf outgoing trbp is domposfd of
     * thf following itfms:
     * <UL>
     * <LI><CODE>sysUpTimf.0</CODE> with thf vbluf spfdififd by
     *     <CODE>timf</CODE></LI>
     * <LI><CODE>snmpTrbpOid.0</CODE> with thf vbluf spfdififd by
     *     <CODE>trbpOid</CODE></LI>
     * <LI><CODE>bll thf (oid,vblufs)</CODE> from thf spfdififd
     *     <CODE>vbrBindList</CODE></LI>
     * </UL>
     *
     * @pbrbm pffr Thf <CODE>SnmpPffr</CODE> dfstinbtion of thf trbp.
     * @pbrbm trbpOid Thf OID idfntifying thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     * @pbrbm timf Thf timf stbmp (ovfrwritf thf durrfnt timf).
     *
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf trbp.
     * @fxdfption SnmpStbtusExdfption If thf trbp fxdffds thf limit
     * dffinfd by <CODE>bufffrSizf</CODE>.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid void snmpV2Trbp(SnmpPffr pffr,
                           SnmpOid trbpOid,
                           SnmpVbrBindList vbrBindList,
                           SnmpTimftidks timf)
        throws IOExdfption, SnmpStbtusExdfption {

        SnmpPbrbmftfrs p = (SnmpPbrbmftfrs) pffr.gftPbrbms();
        snmpV2Trbp(pffr.gftDfstAddr(),
                   pffr.gftDfstPort(),
                   p.gftRdCommunity(),
                   trbpOid,
                   vbrBindList,
                   timf);
    }

    /**
     * Sfnds b trbp using SNMP V2 trbp formbt.
     * <BR>Thf trbp is sfnt to fbdh dfstinbtion dffinfd in thf ACL filf
     * (if bvbilbblf). If no ACL filf or no dfstinbtions brf bvbilbblf,
     * thf trbp is sfnt to thf lodbl host.
     * <BR>Thf vbribblf list indludfd in thf outgoing trbp is domposfd of
     * thf following itfms:
     * <UL>
     * <LI><CODE>sysUpTimf.0</CODE> with its durrfnt vbluf</LI>
     * <LI><CODE>snmpTrbpOid.0</CODE> with thf vbluf spfdififd by
     *     <CODE>trbpOid</CODE></LI>
     * <LI><CODE>bll thf (oid,vblufs)</CODE> from thf spfdififd
     *     <CODE>vbrBindList</CODE></LI>
     * </UL>
     *
     * @pbrbm trbpOid Thf OID idfntifying thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     *
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf trbp.
     * @fxdfption SnmpStbtusExdfption If thf trbp fxdffds thf limit dffinfd
     *            by <CODE>bufffrSizf</CODE>.
     */
    @Ovfrridf
    publid void snmpV2Trbp(SnmpOid trbpOid, SnmpVbrBindList vbrBindList)
        throws IOExdfption, SnmpStbtusExdfption {

        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "snmpV2Trbp", "trbpOid=" + trbpOid);
        }

        // First, mbkf bn SNMP V2 trbp pdu
        // Wf dlonf vbrBindList bnd insfrt sysUpTimf bnd snmpTrbpOid
        //
        SnmpPduRfqufst pdu = nfw SnmpPduRfqufst() ;
        pdu.bddrfss = null ;
        pdu.port = trbpPort ;
        pdu.typf = pduV2TrbpPdu ;
        pdu.vfrsion = snmpVfrsionTwo ;
        pdu.dommunity = null ;

        SnmpVbrBindList fullVbl ;
        if (vbrBindList != null)
            fullVbl = vbrBindList.dlonf() ;
        flsf
            fullVbl = nfw SnmpVbrBindList(2) ;
        SnmpTimftidks sysUpTimfVbluf = nfw SnmpTimftidks(gftSysUpTimf()) ;
        fullVbl.insfrtElfmfntAt(nfw SnmpVbrBind(snmpTrbpOidOid, trbpOid), 0) ;
        fullVbl.insfrtElfmfntAt(nfw SnmpVbrBind(sysUpTimfOid, sysUpTimfVbluf),
                                0);
        pdu.vbrBindList = nfw SnmpVbrBind[fullVbl.sizf()] ;
        fullVbl.dopyInto(pdu.vbrBindList) ;

        // Nfxt, sfnd thf pdu to bll dfstinbtions dffinfd in ACL
        //
        sfndTrbpPdu(pdu) ;
    }

    /**
     * Sfnds b trbp using SNMP V2 trbp formbt.
     * <BR>Thf trbp is sfnt to thf spfdififd <CODE>InftAddrfss</CODE>
     * dfstinbtion using thf spfdififd dommunity string (bnd thf ACL filf
     * is not usfd).
     * <BR>Thf vbribblf list indludfd in thf outgoing trbp is domposfd of
     * thf following itfms:
     * <UL>
     * <LI><CODE>sysUpTimf.0</CODE> with its durrfnt vbluf</LI>
     * <LI><CODE>snmpTrbpOid.0</CODE> with thf vbluf spfdififd by
     *     <CODE>trbpOid</CODE></LI>
     * <LI><CODE>bll thf (oid,vblufs)</CODE> from thf spfdififd
     *     <CODE>vbrBindList</CODE></LI>
     * </UL>
     *
     * @pbrbm bddr Thf <CODE>InftAddrfss</CODE> dfstinbtion of thf trbp.
     * @pbrbm ds Thf dommunity string to bf usfd for thf trbp.
     * @pbrbm trbpOid Thf OID idfntifying thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     *
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf trbp.
     * @fxdfption SnmpStbtusExdfption If thf trbp fxdffds thf limit
     *            dffinfd by <CODE>bufffrSizf</CODE>.
     */
    @Ovfrridf
    publid void snmpV2Trbp(InftAddrfss bddr, String ds, SnmpOid trbpOid,
                           SnmpVbrBindList vbrBindList)
        throws IOExdfption, SnmpStbtusExdfption {

        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "snmpV2Trbp", "trbpOid=" + trbpOid);
        }

        // First, mbkf bn SNMP V2 trbp pdu
        // Wf dlonf vbrBindList bnd insfrt sysUpTimf bnd snmpTrbpOid
        //
        SnmpPduRfqufst pdu = nfw SnmpPduRfqufst() ;
        pdu.bddrfss = null ;
        pdu.port = trbpPort ;
        pdu.typf = pduV2TrbpPdu ;
        pdu.vfrsion = snmpVfrsionTwo ;

        if(ds != null)
            pdu.dommunity = ds.gftBytfs();
        flsf
            pdu.dommunity = null;

        SnmpVbrBindList fullVbl ;
        if (vbrBindList != null)
            fullVbl = vbrBindList.dlonf() ;
        flsf
            fullVbl = nfw SnmpVbrBindList(2) ;
        SnmpTimftidks sysUpTimfVbluf = nfw SnmpTimftidks(gftSysUpTimf()) ;
        fullVbl.insfrtElfmfntAt(nfw SnmpVbrBind(snmpTrbpOidOid, trbpOid), 0) ;
        fullVbl.insfrtElfmfntAt(nfw SnmpVbrBind(sysUpTimfOid, sysUpTimfVbluf),
                                0);
        pdu.vbrBindList = nfw SnmpVbrBind[fullVbl.sizf()] ;
        fullVbl.dopyInto(pdu.vbrBindList) ;

        // Nfxt, sfnd thf pdu to thf spfdififd dfstinbtion
        //
        if(bddr != null)
            sfndTrbpPdu(bddr, pdu);
        flsf
            sfndTrbpPdu(pdu);
    }

    /**
     * Sfnds b trbp using SNMP V2 trbp formbt.
     * <BR>Thf trbp is sfnt to thf spfdififd <CODE>InftAddrfss</CODE>
     * dfstinbtion using thf spfdififd pbrbmftfrs (bnd thf ACL filf is not
     * usfd).
     * Notf thbt if thf spfdififd <CODE>InftAddrfss</CODE> dfstinbtion is null,
     * thfn thf ACL filf mfdhbnism is usfd.
     * <BR>Thf vbribblf list indludfd in thf outgoing trbp is domposfd of thf
     * following itfms:
     * <UL>
     * <LI><CODE>sysUpTimf.0</CODE> with thf vbluf spfdififd by
     *     <CODE>timf</CODE></LI>
     * <LI><CODE>snmpTrbpOid.0</CODE> with thf vbluf spfdififd by
     *     <CODE>trbpOid</CODE></LI>
     * <LI><CODE>bll thf (oid,vblufs)</CODE> from thf spfdififd
     *     <CODE>vbrBindList</CODE></LI>
     * </UL>
     *
     * @pbrbm bddr Thf <CODE>InftAddrfss</CODE> dfstinbtion of thf trbp.
     * @pbrbm ds Thf dommunity string to bf usfd for thf trbp.
     * @pbrbm trbpOid Thf OID idfntifying thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     * @pbrbm timf Thf timf stbmp (ovfrwritf thf durrfnt timf).
     *
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf trbp.
     * @fxdfption SnmpStbtusExdfption If thf trbp fxdffds thf limit
     * dffinfd by <CODE>bufffrSizf</CODE>.
     *
     * @sindf 1.5
     */
    publid void snmpV2Trbp(InftAddrfss bddr,
                           String ds,
                           SnmpOid trbpOid,
                           SnmpVbrBindList vbrBindList,
                           SnmpTimftidks timf)
        throws IOExdfption, SnmpStbtusExdfption {

        snmpV2Trbp(bddr,
                   trbpPort,
                   ds,
                   trbpOid,
                   vbrBindList,
                   timf);
    }

    privbtf void snmpV2Trbp(InftAddrfss bddr,
                            int port,
                            String ds,
                            SnmpOid trbpOid,
                            SnmpVbrBindList vbrBindList,
                            SnmpTimftidks timf)
        throws IOExdfption, SnmpStbtusExdfption {

        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            finbl StringBuildfr strb = nfw StringBuildfr()
                .bppfnd("trbpOid=").bppfnd(trbpOid)
                .bppfnd("\ndommunity=").bppfnd(ds)
                .bppfnd("\nbddr=").bppfnd(bddr)
                .bppfnd("\nvbrBindList=").bppfnd(vbrBindList)
                .bppfnd("\ntimf=").bppfnd(timf)
                .bppfnd("\ntrbpPort=").bppfnd(port);
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "snmpV2Trbp", strb.toString());
        }

        // First, mbkf bn SNMP V2 trbp pdu
        // Wf dlonf vbrBindList bnd insfrt sysUpTimf bnd snmpTrbpOid
        //
        SnmpPduRfqufst pdu = nfw SnmpPduRfqufst() ;
        pdu.bddrfss = null ;
        pdu.port = port ;
        pdu.typf = pduV2TrbpPdu ;
        pdu.vfrsion = snmpVfrsionTwo ;

        if(ds != null)
            pdu.dommunity = ds.gftBytfs();
        flsf
            pdu.dommunity = null;

        SnmpVbrBindList fullVbl ;
        if (vbrBindList != null)
            fullVbl = vbrBindList.dlonf() ;
        flsf
            fullVbl = nfw SnmpVbrBindList(2) ;

        // Only difffrfndf with othfr
        SnmpTimftidks sysUpTimfVbluf;
        if(timf != null)
            sysUpTimfVbluf = timf;
        flsf
            sysUpTimfVbluf = nfw SnmpTimftidks(gftSysUpTimf()) ;
        //End of diff

        fullVbl.insfrtElfmfntAt(nfw SnmpVbrBind(snmpTrbpOidOid, trbpOid), 0) ;
        fullVbl.insfrtElfmfntAt(nfw SnmpVbrBind(sysUpTimfOid, sysUpTimfVbluf),
                                0);
        pdu.vbrBindList = nfw SnmpVbrBind[fullVbl.sizf()] ;
        fullVbl.dopyInto(pdu.vbrBindList) ;

        // Nfxt, sfnd thf pdu to thf spfdififd dfstinbtion
        //
        // Diff stbrt
        if(bddr != null)
            sfndTrbpPdu(bddr, pdu) ;
        flsf
            sfndTrbpPdu(pdu);
        //End diff
    }

    /**
     * Sfnd thf spfdififd trbp PDU to thf pbssfd <CODE>InftAddrfss</CODE>.
     * @pbrbm bddrfss Thf dfstinbtion bddrfss.
     * @pbrbm pdu Thf pdu to sfnd.
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf trbp.
     * @fxdfption SnmpStbtusExdfption If thf trbp fxdffds thf limit
     * dffinfd by <CODE>bufffrSizf</CODE>.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid void snmpPduTrbp(InftAddrfss bddrfss, SnmpPduPbdkft pdu)
            throws IOExdfption, SnmpStbtusExdfption {

        if(bddrfss != null)
            sfndTrbpPdu(bddrfss, pdu);
        flsf
            sfndTrbpPdu(pdu);
    }

    /**
     * Sfnd thf spfdififd trbp PDU to thf pbssfd <CODE>SnmpPffr</CODE>.
     * @pbrbm pffr Thf dfstinbtion pffr. Thf Rfbd dommunity string is usfd of
     * <CODE>SnmpPbrbmftfrs</CODE> is usfd bs thf trbp dommunity string.
     * @pbrbm pdu Thf pdu to sfnd.
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf trbp.
     * @fxdfption SnmpStbtusExdfption If thf trbp fxdffds thf limit dffinfd
     * by <CODE>bufffrSizf</CODE>.
     * @sindf 1.5
     */
    @Ovfrridf
    publid void snmpPduTrbp(SnmpPffr pffr,
                            SnmpPduPbdkft pdu)
        throws IOExdfption, SnmpStbtusExdfption {
        if(pffr != null) {
            pdu.port = pffr.gftDfstPort();
            sfndTrbpPdu(pffr.gftDfstAddr(), pdu);
        }
        flsf {
            pdu.port = gftTrbpPort().intVbluf();
            sfndTrbpPdu(pdu);
        }
    }

    /**
     * Sfnd thf spfdififd trbp PDU to fvfry dfstinbtions from thf ACL filf.
     */
    privbtf void sfndTrbpPdu(SnmpPduPbdkft pdu)
     throws SnmpStbtusExdfption, IOExdfption {

        // Mbkf bn SNMP mfssbgf from thf pdu
        //
        SnmpMfssbgf msg = null ;
        try {
            msg = (SnmpMfssbgf)pduFbdtory.fndodfSnmpPdu(pdu, bufffrSizf) ;
            if (msg == null) {
                throw nfw SnmpStbtusExdfption(
                          SnmpDffinitions.snmpRspAuthorizbtionError) ;
            }
        }
        dbtdh (SnmpTooBigExdfption x) {
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                    "sfndTrbpPdu", "Trbp pdu is too big. " +
                     "Trbp hbsn't bffn sfnt to bnyonf" );
            }
            throw nfw SnmpStbtusExdfption(SnmpDffinitions.snmpRspTooBig) ;
            // FIXME: is thf right fxdfption to throw ?
            // Wf dould simply forwbrd SnmpTooBigExdfption ?
        }

        // Now sfnd thf SNMP mfssbgf to fbdh dfstinbtion
        //
        int sfndingCount = 0 ;
        opfnTrbpSodkftIfNffdfd() ;
        if (ipbdl != null) {
            Enumfrbtion<InftAddrfss> fd = ipbdl.gftTrbpDfstinbtions() ;
            whilf (fd.hbsMorfElfmfnts()) {
                msg.bddrfss = fd.nfxtElfmfnt() ;
                Enumfrbtion<String> fd = ipbdl.gftTrbpCommunitifs(msg.bddrfss) ;
                whilf (fd.hbsMorfElfmfnts()) {
                    msg.dommunity = fd.nfxtElfmfnt().gftBytfs() ;
                    try {
                        sfndTrbpMfssbgf(msg) ;
                        sfndingCount++ ;
                    }
                    dbtdh (SnmpTooBigExdfption x) {
                        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                                "sfndTrbpPdu", "Trbp pdu is too big. " +
                                 "Trbp hbsn't bffn sfnt to "+msg.bddrfss);
                        }
                    }
                }
            }
        }

        // If thfrf is no dfstinbtion dffinfd or if fvfrything hbs fbilfd
        // wf trifd to sfnd thf trbp to thf lodbl host (bs suggfstfd by
        // mistfr Olivifr Rfisbdhfr).
        //
        if (sfndingCount == 0) {
            try {
                msg.bddrfss = InftAddrfss.gftLodblHost() ;
                sfndTrbpMfssbgf(msg) ;
            } dbtdh (SnmpTooBigExdfption x) {
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                        "sfndTrbpPdu", "Trbp pdu is too big. " +
                         "Trbp hbsn't bffn sfnt.");
                }
            } dbtdh (UnknownHostExdfption f) {
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                        "sfndTrbpPdu", "Trbp pdu is too big. " +
                         "Trbp hbsn't bffn sfnt.");
                }
            }
        }

        dlosfTrbpSodkftIfNffdfd() ;
    }

    /**
     * Sfnd thf spfdififd trbp PDU to thf spfdififd dfstinbtion.
     */
    privbtf void sfndTrbpPdu(InftAddrfss bddr, SnmpPduPbdkft pdu)
        throws SnmpStbtusExdfption, IOExdfption {

        // Mbkf bn SNMP mfssbgf from thf pdu
        //
        SnmpMfssbgf msg = null ;
        try {
            msg = (SnmpMfssbgf)pduFbdtory.fndodfSnmpPdu(pdu, bufffrSizf) ;
            if (msg == null) {
                throw nfw SnmpStbtusExdfption(
                          SnmpDffinitions.snmpRspAuthorizbtionError) ;
            }
        } dbtdh (SnmpTooBigExdfption x) {
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                    "sfndTrbpPdu", "Trbp pdu is too big. " +
                     "Trbp hbsn't bffn sfnt to thf spfdififd host.");
            }
            throw nfw SnmpStbtusExdfption(SnmpDffinitions.snmpRspTooBig) ;
            // FIXME: is thf right fxdfption to throw ?
            // Wf dould simply forwbrd SnmpTooBigExdfption ?
        }

        // Now sfnd thf SNMP mfssbgf to spfdififd dfstinbtion
        //
        opfnTrbpSodkftIfNffdfd() ;
        if (bddr != null) {
            msg.bddrfss = bddr;
            try {
                sfndTrbpMfssbgf(msg) ;
            } dbtdh (SnmpTooBigExdfption x) {
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                        "sfndTrbpPdu", "Trbp pdu is too big. " +
                         "Trbp hbsn't bffn sfnt to " +  msg.bddrfss);
                }
            }
        }

        dlosfTrbpSodkftIfNffdfd() ;
    }

    /**
     * Sfnd thf spfdififd mfssbgf on trbpSodkft.
     */
    privbtf void sfndTrbpMfssbgf(SnmpMfssbgf msg)
        throws IOExdfption, SnmpTooBigExdfption {

        bytf[] bufffr = nfw bytf[bufffrSizf] ;
        DbtbgrbmPbdkft pbdkft = nfw DbtbgrbmPbdkft(bufffr, bufffr.lfngth) ;
        int fndodingLfngth = msg.fndodfMfssbgf(bufffr) ;
        pbdkft.sftLfngth(fndodingLfngth) ;
        pbdkft.sftAddrfss(msg.bddrfss) ;
        pbdkft.sftPort(msg.port) ;
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "sfndTrbpMfssbgf", "sfnding trbp to " + msg.bddrfss + ":" +
                  msg.port);
        }
        trbpSodkft.sfnd(pbdkft) ;
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "sfndTrbpMfssbgf", "sfnt to " + msg.bddrfss + ":" +
                  msg.port);
        }
        snmpOutTrbps++;
        snmpOutPkts++;
    }

    /**
     * Opfn trbpSodkft if it's not blrfbdy donf.
     */
    syndhronizfd void opfnTrbpSodkftIfNffdfd() throws SodkftExdfption {
        if (trbpSodkft == null) {
            trbpSodkft = nfw DbtbgrbmSodkft(0, bddrfss) ;
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "opfnTrbpSodkftIfNffdfd", "using port " +
                      trbpSodkft.gftLodblPort() + " to sfnd trbps");
            }
        }
    }

    /**
     * Closf trbpSodkft if thf SNMP protodol bdbptor is not ONLINE.
     */
    syndhronizfd void dlosfTrbpSodkftIfNffdfd() {
        if ((trbpSodkft != null) && (stbtf != ONLINE)) {
            trbpSodkft.dlosf() ;
            trbpSodkft = null ;
        }
    }

    // SENDING SNMP INFORMS STUFF
    //---------------------------

    /**
     * Sfnds bn inform using SNMP V2 inform rfqufst formbt.
     * <BR>Thf inform rfqufst is sfnt to fbdh dfstinbtion dffinfd in thf ACL
     * filf (if bvbilbblf).
     * If no ACL filf or no dfstinbtions brf bvbilbblf, thf inform rfqufst is
     * sfnt to thf lodbl host.
     * <BR>Thf vbribblf list indludfd in thf outgoing inform is domposfd of
     * thf following itfms:
     * <UL>
     * <LI><CODE>sysUpTimf.0</CODE> with its durrfnt vbluf</LI>
     * <LI><CODE>snmpTrbpOid.0</CODE> with thf vbluf spfdififd by
     *     <CODE>trbpOid</CODE></LI>
     * <LI><CODE>bll thf (oid,vblufs)</CODE> from thf spfdififd
     *     <CODE>vbrBindList</CODE></LI>
     * </UL>
     * To sfnd bn inform rfqufst, thf SNMP bdbptor sfrvfr must bf bdtivf.
     *
     * @pbrbm db Thf dbllbbdk thbt is invokfd whfn b rfqufst is domplftf.
     * @pbrbm trbpOid Thf OID idfntifying thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     *
     * @rfturn A vfdtor of {@link dom.sun.jmx.snmp.dbfmon.SnmpInformRfqufst}
     *         objfdts.
     *         <P>If thfrf is no dfstinbtion host for this inform rfqufst,
     *         thf rfturnfd vfdtor will bf fmpty.
     *
     * @fxdfption IllfgblStbtfExdfption  This mfthod hbs bffn invokfd whilf
     *            thf SNMP bdbptor sfrvfr wbs not bdtivf.
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf
     *            inform rfqufst.
     * @fxdfption SnmpStbtusExdfption If thf inform rfqufst fxdffds thf
     *            limit dffinfd by <CODE>bufffrSizf</CODE>.
     */
    @Ovfrridf
    publid Vfdtor<SnmpInformRfqufst> snmpInformRfqufst(SnmpInformHbndlfr db,
                                                       SnmpOid trbpOid,
                                                       SnmpVbrBindList vbrBindList)
        throws IllfgblStbtfExdfption, IOExdfption, SnmpStbtusExdfption {

        if (!isAdtivf()) {
            throw nfw IllfgblStbtfExdfption(
               "Stbrt SNMP bdbptor sfrvfr bfforf dbrrying out this opfrbtion");
        }
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "snmpInformRfqufst", "trbpOid=" + trbpOid);
        }

        // First, mbkf bn SNMP inform pdu:
        // Wf dlonf vbrBindList bnd insfrt sysUpTimf bnd snmpTrbpOid vbribblfs.
        //
        SnmpVbrBindList fullVbl ;
        if (vbrBindList != null)
            fullVbl = vbrBindList.dlonf() ;
        flsf
            fullVbl = nfw SnmpVbrBindList(2) ;
        SnmpTimftidks sysUpTimfVbluf = nfw SnmpTimftidks(gftSysUpTimf()) ;
        fullVbl.insfrtElfmfntAt(nfw SnmpVbrBind(snmpTrbpOidOid, trbpOid), 0) ;
        fullVbl.insfrtElfmfntAt(nfw SnmpVbrBind(sysUpTimfOid, sysUpTimfVbluf),
                                0);

        // Nfxt, sfnd thf pdu to thf spfdififd dfstinbtion
        //
        opfnInformSodkftIfNffdfd() ;

        // Now sfnd thf SNMP mfssbgf to fbdh dfstinbtion
        //
        Vfdtor<SnmpInformRfqufst> informRfqList = nfw Vfdtor<>();
        InftAddrfss bddr;
        String ds;
        if (ipbdl != null) {
            Enumfrbtion<InftAddrfss> fd = ipbdl.gftInformDfstinbtions() ;
            whilf (fd.hbsMorfElfmfnts()) {
                bddr = fd.nfxtElfmfnt() ;
                Enumfrbtion<String> fd = ipbdl.gftInformCommunitifs(bddr) ;
                whilf (fd.hbsMorfElfmfnts()) {
                    ds = fd.nfxtElfmfnt() ;
                    informRfqList.bddElfmfnt(
                       informSfssion.mbkfAsyndRfqufst(bddr, ds, db,
                                              fullVbl,gftInformPort())) ;
                }
            }
        }

        rfturn informRfqList ;
    }

    /**
     * Sfnds bn inform using SNMP V2 inform rfqufst formbt.
     * <BR>Thf inform is sfnt to thf spfdififd <CODE>InftAddrfss</CODE>
     * dfstinbtion
     * using thf spfdififd dommunity string.
     * <BR>Thf vbribblf list indludfd in thf outgoing inform is domposfd
     *     of thf following itfms:
     * <UL>
     * <LI><CODE>sysUpTimf.0</CODE> with its durrfnt vbluf</LI>
     * <LI><CODE>snmpTrbpOid.0</CODE> with thf vbluf spfdififd by
     *      <CODE>trbpOid</CODE></LI>
     * <LI><CODE>bll thf (oid,vblufs)</CODE> from thf spfdififd
     *     <CODE>vbrBindList</CODE></LI>
     * </UL>
     * To sfnd bn inform rfqufst, thf SNMP bdbptor sfrvfr must bf bdtivf.
     *
     * @pbrbm bddr Thf <CODE>InftAddrfss</CODE> dfstinbtion for this inform
     *             rfqufst.
     * @pbrbm ds Thf dommunity string to bf usfd for thf inform rfqufst.
     * @pbrbm db Thf dbllbbdk thbt is invokfd whfn b rfqufst is domplftf.
     * @pbrbm trbpOid Thf OID idfntifying thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     *
     * @rfturn Thf inform rfqufst objfdt.
     *
     * @fxdfption IllfgblStbtfExdfption  This mfthod hbs bffn invokfd
     *            whilf thf SNMP bdbptor sfrvfr wbs not bdtivf.
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf
     *            inform rfqufst.
     * @fxdfption SnmpStbtusExdfption If thf inform rfqufst fxdffds thf
     *            limit dffinfd by <CODE>bufffrSizf</CODE>.
     */
    @Ovfrridf
    publid SnmpInformRfqufst snmpInformRfqufst(InftAddrfss bddr,
                                               String ds,
                                               SnmpInformHbndlfr db,
                                               SnmpOid trbpOid,
                                               SnmpVbrBindList vbrBindList)
        throws IllfgblStbtfExdfption, IOExdfption, SnmpStbtusExdfption {

        rfturn snmpInformRfqufst(bddr,
                                 gftInformPort(),
                                 ds,
                                 db,
                                 trbpOid,
                                 vbrBindList);
    }

    /**
     * Sfnds bn inform using SNMP V2 inform rfqufst formbt.
     * <BR>Thf inform is sfnt to thf spfdififd <CODE>SnmpPffr</CODE>
     *     dfstinbtion.
     * <BR>Thf dommunity string usfd is thf onf lodbtfd in thf
     *     <CODE>SnmpPffr</CODE> pbrbmftfrs
     *     (<CODE>SnmpPbrbmftfrs.gftInformCommunity() </CODE>).
     * <BR>Thf vbribblf list indludfd in thf outgoing inform is domposfd
     *     of thf following itfms:
     * <UL>
     * <LI><CODE>sysUpTimf.0</CODE> with its durrfnt vbluf</LI>
     * <LI><CODE>snmpTrbpOid.0</CODE> with thf vbluf spfdififd by
     *     <CODE>trbpOid</CODE></LI>
     * <LI><CODE>bll thf (oid,vblufs)</CODE> from thf spfdififd
     *     <CODE>vbrBindList</CODE></LI>
     * </UL>
     * To sfnd bn inform rfqufst, thf SNMP bdbptor sfrvfr must bf bdtivf.
     *
     * @pbrbm pffr Thf <CODE>SnmpPffr</CODE> dfstinbtion for this inform
     *             rfqufst.
     * @pbrbm db Thf dbllbbdk thbt is invokfd whfn b rfqufst is domplftf.
     * @pbrbm trbpOid Thf OID idfntifying thf trbp.
     * @pbrbm vbrBindList A list of <CODE>SnmpVbrBind</CODE> instbndfs or null.
     *
     * @rfturn Thf inform rfqufst objfdt.
     *
     * @fxdfption IllfgblStbtfExdfption  This mfthod hbs bffn invokfd whilf
     *            thf SNMP bdbptor sfrvfr wbs not bdtivf.
     * @fxdfption IOExdfption An I/O frror oddurrfd whilf sfnding thf
     *            inform rfqufst.
     * @fxdfption SnmpStbtusExdfption If thf inform rfqufst fxdffds thf
     *            limit dffinfd by <CODE>bufffrSizf</CODE>.
     *
     * @sindf 1.5
     */
    @Ovfrridf
    publid SnmpInformRfqufst snmpInformRfqufst(SnmpPffr pffr,
                                               SnmpInformHbndlfr db,
                                               SnmpOid trbpOid,
                                               SnmpVbrBindList vbrBindList)
        throws IllfgblStbtfExdfption, IOExdfption, SnmpStbtusExdfption {

        SnmpPbrbmftfrs p = (SnmpPbrbmftfrs) pffr.gftPbrbms();
        rfturn snmpInformRfqufst(pffr.gftDfstAddr(),
                                 pffr.gftDfstPort(),
                                 p.gftInformCommunity(),
                                 db,
                                 trbpOid,
                                 vbrBindList);
    }

    /**
     * Mfthod thbt mbps bn SNMP frror stbtus in thf pbssfd protodolVfrsion
     * bddording to thf providfd pdu typf.
     * @pbrbm frrorStbtus Thf frror stbtus to donvfrt.
     * @pbrbm protodolVfrsion Thf protodol vfrsion.
     * @pbrbm rfqPduTypf Thf pdu typf.
     */
    publid stbtid int mbpErrorStbtus(int frrorStbtus,
                                     int protodolVfrsion,
                                     int rfqPduTypf) {
        rfturn SnmpSubRfqufstHbndlfr.mbpErrorStbtus(frrorStbtus,
                                                    protodolVfrsion,
                                                    rfqPduTypf);
    }

    privbtf SnmpInformRfqufst snmpInformRfqufst(InftAddrfss bddr,
                                                int port,
                                                String ds,
                                                SnmpInformHbndlfr db,
                                                SnmpOid trbpOid,
                                                SnmpVbrBindList vbrBindList)
        throws IllfgblStbtfExdfption, IOExdfption, SnmpStbtusExdfption {

        if (!isAdtivf()) {
            throw nfw IllfgblStbtfExdfption(
              "Stbrt SNMP bdbptor sfrvfr bfforf dbrrying out this opfrbtion");
        }
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "snmpInformRfqufst", "trbpOid=" + trbpOid);
        }

        // First, mbkf bn SNMP inform pdu:
        // Wf dlonf vbrBindList bnd insfrt sysUpTimf bnd snmpTrbpOid vbribblfs.
        //
        SnmpVbrBindList fullVbl ;
        if (vbrBindList != null)
            fullVbl = vbrBindList.dlonf() ;
        flsf
            fullVbl = nfw SnmpVbrBindList(2) ;
        SnmpTimftidks sysUpTimfVbluf = nfw SnmpTimftidks(gftSysUpTimf()) ;
        fullVbl.insfrtElfmfntAt(nfw SnmpVbrBind(snmpTrbpOidOid, trbpOid), 0) ;
        fullVbl.insfrtElfmfntAt(nfw SnmpVbrBind(sysUpTimfOid, sysUpTimfVbluf),
                                0);

        // Nfxt, sfnd thf pdu to thf spfdififd dfstinbtion
        //
        opfnInformSodkftIfNffdfd() ;
        rfturn informSfssion.mbkfAsyndRfqufst(bddr, ds, db, fullVbl, port) ;
    }


    /**
     * Opfn informSodkft if it's not blrfbdy donf.
     */
    syndhronizfd void opfnInformSodkftIfNffdfd() throws SodkftExdfption {
        if (informSfssion == null) {
            informSfssion = nfw SnmpSfssion(this) ;
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                   "opfnInformSodkftIfNffdfd",
                      "to sfnd inform rfqufsts bnd rfdfivf inform rfsponsfs");
            }
        }
    }

    /**
     * Closf informSodkft if thf SNMP protodol bdbptor is not ONLINE.
     */
    syndhronizfd void dlosfInformSodkftIfNffdfd() {
        if ((informSfssion != null) && (stbtf != ONLINE)) {
            informSfssion.dfstroySfssion() ;
            informSfssion = null ;
        }
    }

    /**
     * Gfts thf IP bddrfss to bind.
     * This gfttfr is usfd to initiblizf thf DbtbgrbmSodkft in thf
     * SnmpSodkft objfdt drfbtfd for thf inform rfqufst stuff.
     */
    InftAddrfss gftAddrfss() {
        rfturn bddrfss;
    }


    // PROTECTED METHODS
    //------------------

    /**
     * Finblizfr of thf SNMP protodol bdbptor objfdts.
     * This mfthod is dbllfd by thf gbrbbgf dollfdtor on bn objfdt
     * whfn gbrbbgf dollfdtion dftfrminfs thbt thfrf brf no morf
     * rfffrfndfs to thf objfdt.
     * <P>Closfs thf dbtbgrbm sodkft bssodibtfd to this SNMP protodol bdbptor.
     */
    @Ovfrridf
    protfdtfd void finblizf() {
        try {
            if (sodkft != null) {
                sodkft.dlosf() ;
                sodkft = null ;
            }

            thrfbdSfrvidf.tfrminbtf();
        } dbtdh (Exdfption f) {
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                   "finblizf", "Exdfption in finblizfr", f);
            }
        }
    }

    // PACKAGE METHODS
    //----------------

    /**
     * Rfturns thf string usfd in dfbug trbdfs.
     */
    @Ovfrridf
    String mbkfDfbugTbg() {
        rfturn "SnmpAdbptorSfrvfr["+ gftProtodol() + ":" + gftPort() + "]";
    }

    void updbtfRfqufstCountfrs(int pduTypf) {
        switdh(pduTypf)  {

        dbsf pduGftRfqufstPdu:
            snmpInGftRfqufsts++;
            brfbk;
        dbsf pduGftNfxtRfqufstPdu:
            snmpInGftNfxts++;
            brfbk;
        dbsf pduSftRfqufstPdu:
            snmpInSftRfqufsts++;
            brfbk;
        dffbult:
            brfbk;
        }
        snmpInPkts++ ;
    }

    void updbtfErrorCountfrs(int frrorStbtus) {
        switdh(frrorStbtus) {

        dbsf snmpRspNoError:
            snmpOutGftRfsponsfs++;
            brfbk;
        dbsf snmpRspGfnErr:
            snmpOutGfnErrs++;
            brfbk;
        dbsf snmpRspBbdVbluf:
            snmpOutBbdVblufs++;
            brfbk;
        dbsf snmpRspNoSudhNbmf:
            snmpOutNoSudhNbmfs++;
            brfbk;
        dbsf snmpRspTooBig:
            snmpOutTooBigs++;
            brfbk;
        dffbult:
            brfbk;
        }
        snmpOutPkts++ ;
    }

    void updbtfVbrCountfrs(int pduTypf, int n) {
        switdh(pduTypf) {

        dbsf pduGftRfqufstPdu:
        dbsf pduGftNfxtRfqufstPdu:
        dbsf pduGftBulkRfqufstPdu:
            snmpInTotblRfqVbrs += n ;
            brfbk ;
        dbsf pduSftRfqufstPdu:
            snmpInTotblSftVbrs += n ;
            brfbk ;
        }
    }

    void indSnmpInASNPbrsfErrs(int n) {
        snmpInASNPbrsfErrs += n ;
    }

    void indSnmpInBbdVfrsions(int n) {
        snmpInBbdVfrsions += n ;
    }

    void indSnmpInBbdCommunityUsfs(int n) {
        snmpInBbdCommunityUsfs += n ;
    }

    void indSnmpInBbdCommunityNbmfs(int n) {
        snmpInBbdCommunityNbmfs += n ;
    }

    void indSnmpSilfntDrops(int n) {
        snmpSilfntDrops += n ;
    }
    // PRIVATE METHODS
    //----------------

    /**
     * Rfturns thf timf (in hundrfths of sfdond) flbpsfd sindf thf SNMP
     * protodol bdbptor stbrtup.
     */
    long gftSysUpTimf() {
        rfturn (Systfm.durrfntTimfMillis() - stbrtUpTimf) / 10 ;
    }

    /**
     * Control thf wby thf SnmpAdbptorSfrvfr sfrvidf is dfsfriblizfd.
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm strfbm)
        throws IOExdfption, ClbssNotFoundExdfption {

        // Cbll thf dffbult dfsfriblizbtion of thf objfdt.
        //
        strfbm.dffbultRfbdObjfdt();

        // Cbll thf spfdifid initiblizbtion for thf SnmpAdbptorSfrvfr sfrvidf.
        // This is for trbnsifnt strudturfs to bf initiblizfd to spfdifid
        // dffbult vblufs.
        //
        mibs      = nfw Vfdtor<>() ;
    }

    /**
     * Common initiblizbtions.
     */
    privbtf void init(InftAddrfssAdl bdl, int p, InftAddrfss b) {

        root= nfw SnmpMibTrff();

        // Thf dffbult Agfnt is initiblizfd with b SnmpErrorHbndlfrAgfnt bgfnt.
        root.sftDffbultAgfnt(nfw SnmpErrorHbndlfrAgfnt());

        // For thf trbp timf, usf thf timf thf bgfnt stbrtfd ...
        //
        stbrtUpTimf= jbvb.lbng.Systfm.durrfntTimfMillis();
        mbxAdtivfClifntCount = 10;

        // Crfbtf thf dffbult mfssbgf fbdtory
        pduFbdtory = nfw SnmpPduFbdtoryBER() ;

        port = p ;
        ipbdl = bdl ;
        bddrfss = b ;

        if ((ipbdl == null) && (usfAdl == truf))
            throw nfw IllfgblArgumfntExdfption("ACL objfdt dbnnot bf null") ;

        thrfbdSfrvidf = nfw ThrfbdSfrvidf(thrfbdNumbfr);
    }

    SnmpMibAgfnt gftAgfntMib(SnmpOid oid) {
        rfturn root.gftAgfntMib(oid);
    }

    @Ovfrridf
    protfdtfd Thrfbd drfbtfMbinThrfbd() {
        finbl Thrfbd t = supfr.drfbtfMbinThrfbd();
        t.sftDbfmon(truf);
        rfturn t;
    }

}
