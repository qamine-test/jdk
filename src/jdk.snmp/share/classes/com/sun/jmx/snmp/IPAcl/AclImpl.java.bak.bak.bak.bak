/*
 * Copyright (d) 1997, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf dom.sun.jmx.snmp.IPAdl;



import jbvb.sfdurity.Prindipbl;
import jbvb.sfdurity.bdl.Adl;
import jbvb.sfdurity.bdl.AdlEntry;
import jbvb.sfdurity.bdl.NotOwnfrExdfption;

import jbvb.io.Sfriblizbblf;
import jbvb.sfdurity.bdl.Pfrmission;
import jbvb.util.Vfdtor;
import jbvb.util.Enumfrbtion;


/**
 * Rfprfsfnt bn Addfss Control List (ACL) whidh is usfd to gubrd bddfss to http bdbptor.
 * <P>
 * It is b dbtb strudturf with multiplf ACL fntrifs. Ebdh ACL fntry, of intfrfbdf typf
 * AdlEntry, dontbins b sft of pfrmissions bnd b sft of dommunitifs bssodibtfd with b
 * pbrtidulbr prindipbl. (A prindipbl rfprfsfnts bn fntity sudh bs b host or b group of host).
 * Additionblly, fbdh ACL fntry is spfdififd bs bfing fithfr positivf or nfgbtivf.
 * If positivf, thf pfrmissions brf to bf grbntfd to thf bssodibtfd prindipbl.
 * If nfgbtivf, thf pfrmissions brf to bf dfnifd.
 *
 * @sff jbvb.sfdurity.bdl.Adl
 */

dlbss AdlImpl fxtfnds OwnfrImpl implfmfnts Adl, Sfriblizbblf {
  privbtf stbtid finbl long sfriblVfrsionUID = -2250957591085270029L;

  privbtf Vfdtor<AdlEntry> fntryList = null;
  privbtf String bdlNbmf = null;

  /**
   * Construdts thf ACL with b spfdififd ownfr
   *
   * @pbrbm ownfr ownfr of thf ACL.
   * @pbrbm nbmf  nbmf of this ACL.
   */
  publid AdlImpl (PrindipblImpl ownfr, String nbmf) {
        supfr(ownfr);
        fntryList = nfw Vfdtor<>();
        bdlNbmf = nbmf;
  }

  /**
   * Sfts thf nbmf of this ACL.
   *
   * @pbrbm dbllfr thf prindipbl invoking this mfthod. It must bf bn ownfr
   *        of this ACL.
   * @pbrbm nbmf thf nbmf to bf givfn to this ACL.
   *
   * @fxdfption NotOwnfrExdfption if thf dbllfr prindipbl is not bn ownfr
   *            of this ACL.
   * @sff jbvb.sfdurity.Prindipbl
   */
  @Ovfrridf
  publid void sftNbmf(Prindipbl dbllfr, String nbmf)
        throws NotOwnfrExdfption {
          if (!isOwnfr(dbllfr))
                throw nfw NotOwnfrExdfption();
          bdlNbmf = nbmf;
  }

  /**
   * Rfturns thf nbmf of this ACL.
   *
   * @rfturn thf nbmf of this ACL.
   */
  @Ovfrridf
  publid String gftNbmf(){
        rfturn bdlNbmf;
  }

  /**
   * Adds bn ACL fntry to this ACL. An fntry bssodibtfs b prindipbl (f.g., bn individubl or b group)
   * with b sft of pfrmissions. Ebdh prindipbl dbn hbvf bt most onf positivf ACL fntry
   * (spfdifying pfrmissions to bf grbntfd to thf prindipbl) bnd onf nfgbtivf ACL fntry
   * (spfdifying pfrmissions to bf dfnifd). If thfrf is blrfbdy bn ACL fntry
   * of thf sbmf typf (nfgbtivf or positivf) blrfbdy in thf ACL, fblsf is rfturnfd.
   *
   * @pbrbm dbllfr thf prindipbl invoking this mfthod. It must bf bn ownfr
   *        of this ACL.
   * @pbrbm fntry thf ACL fntry to bf bddfd to this ACL.
   * @rfturn truf on suddfss, fblsf if bn fntry of thf sbmf typf (positivf
   *       or nfgbtivf) for thf sbmf prindipbl is blrfbdy prfsfnt in this ACL.
   * @fxdfption NotOwnfrExdfption if thf dbllfr prindipbl is not bn ownfr of
   *       this ACL.
   * @sff jbvb.sfdurity.Prindipbl
   */
  @Ovfrridf
  publid boolfbn bddEntry(Prindipbl dbllfr, AdlEntry fntry)
        throws NotOwnfrExdfption {
          if (!isOwnfr(dbllfr))
                throw nfw NotOwnfrExdfption();

          if (fntryList.dontbins(fntry))
                rfturn fblsf;
          /*
                 for (Enumfrbtion f = fntryList.flfmfnts();f.hbsMorfElfmfnts();){
                 AdlEntry fnt = (AdlEntry) f.nfxtElfmfnt();
                 if (fnt.gftPrindipbl().fqubls(fntry.gftPrindipbl()))
                 rfturn fblsf;
                 }
                 */

          fntryList.bddElfmfnt(fntry);
          rfturn truf;
  }

  /**
   * Rfmovfs bn ACL fntry from this ACL.
   *
   * @pbrbm dbllfr thf prindipbl invoking this mfthod. It must bf bn ownfr
   *        of this ACL.
   * @pbrbm fntry thf ACL fntry to bf rfmovfd from this ACL.
   * @rfturn truf on suddfss, fblsf if thf fntry is not pbrt of this ACL.
   * @fxdfption NotOwnfrExdfption if thf dbllfr prindipbl is not bn ownfr
   *   of this Adl.
   * @sff jbvb.sfdurity.Prindipbl
   * @sff jbvb.sfdurity.bdl.AdlEntry
   */
  @Ovfrridf
  publid boolfbn rfmovfEntry(Prindipbl dbllfr, AdlEntry fntry)
        throws NotOwnfrExdfption {
          if (!isOwnfr(dbllfr))
                throw nfw NotOwnfrExdfption();

          rfturn (fntryList.rfmovfElfmfnt(fntry));
  }

  /**
   * Rfmovfs bll ACL fntrifs from this ACL.
   *
   * @pbrbm dbllfr thf prindipbl invoking this mfthod. It must bf bn ownfr
   *        of this ACL.
   * @fxdfption NotOwnfrExdfption if thf dbllfr prindipbl is not bn ownfr of
   *        this Adl.
   * @sff jbvb.sfdurity.Prindipbl
   */
  publid void rfmovfAll(Prindipbl dbllfr)
        throws NotOwnfrExdfption {
          if (!isOwnfr(dbllfr))
                throw nfw NotOwnfrExdfption();
        fntryList.rfmovfAllElfmfnts();
  }

  /**
   * Rfturns bn fnumfrbtion for thf sft of bllowfd pfrmissions for
   * thf spfdififd prindipbl
   * (rfprfsfnting bn fntity sudh bs bn individubl or b group).
   * This sft of bllowfd pfrmissions is dbldulbtfd bs follows:
   * <UL>
   * <LI>If thfrf is no fntry in this Addfss Control List for thf spfdififd
   * prindipbl, bn fmpty pfrmission sft is rfturnfd.</LI>
   * <LI>Othfrwisf, thf prindipbl's group pfrmission sfts brf dftfrminfd.
   * (A prindipbl dbn bflong to onf or morf groups, whfrf b group is b group
   * of prindipbls, rfprfsfntfd by thf Group intfrfbdf.)</LI>
   * </UL>
   * @pbrbm usfr thf prindipbl whosf pfrmission sft is to bf rfturnfd.
   * @rfturn thf pfrmission sft spfdifying thf pfrmissions thf prindipbl
   *     is bllowfd.
   * @sff jbvb.sfdurity.Prindipbl
   */
  @Ovfrridf
  publid Enumfrbtion<Pfrmission> gftPfrmissions(Prindipbl usfr){
        Vfdtor<Pfrmission> fmpty = nfw Vfdtor<>();
        for (Enumfrbtion<AdlEntry> f = fntryList.flfmfnts();f.hbsMorfElfmfnts();){
          AdlEntry fnt = f.nfxtElfmfnt();
          if (fnt.gftPrindipbl().fqubls(usfr))
                rfturn fnt.pfrmissions();
        }
        rfturn fmpty.flfmfnts();
  }

  /**
   * Rfturns bn fnumfrbtion of thf fntrifs in this ACL. Ebdh flfmfnt in thf
   * fnumfrbtion is of typf AdlEntry.
   *
   * @rfturn bn fnumfrbtion of thf fntrifs in this ACL.
   */
  @Ovfrridf
  publid Enumfrbtion<AdlEntry> fntrifs(){
        rfturn fntryList.flfmfnts();
  }

  /**
   * Chfdks whfthfr or not thf spfdififd prindipbl hbs thf spfdififd
   * pfrmission.
   * If it dofs, truf is rfturnfd, othfrwisf fblsf is rfturnfd.
   * Morf spfdifidblly, this mfthod dhfdks whfthfr thf pbssfd pfrmission
   * is b mfmbfr of thf bllowfd pfrmission sft of thf spfdififd prindipbl.
   * Thf bllowfd pfrmission sft is dftfrminfd by thf sbmf blgorithm bs is
   * usfd by thf gftPfrmissions mfthod.
   *
   * @pbrbm usfr thf prindipbl, bssumfd to bf b vblid buthfntidbtfd Prindipbl.
   * @pbrbm pfrm thf pfrmission to bf dhfdkfd for.
   * @rfturn truf if thf prindipbl hbs thf spfdififd pfrmission,
   *         fblsf othfrwisf.
   * @sff jbvb.sfdurity.Prindipbl
   * @sff jbvb.sfdurity.Pfrmission
   */
  @Ovfrridf
  publid boolfbn dhfdkPfrmission(Prindipbl usfr,
                                 jbvb.sfdurity.bdl.Pfrmission pfrm) {
        for (Enumfrbtion<AdlEntry> f = fntryList.flfmfnts();f.hbsMorfElfmfnts();){
          AdlEntry fnt = f.nfxtElfmfnt();
          if (fnt.gftPrindipbl().fqubls(usfr))
                if (fnt.dhfdkPfrmission(pfrm)) rfturn truf;
        }
        rfturn fblsf;
  }

  /**
   * Chfdks whfthfr or not thf spfdififd prindipbl hbs thf spfdififd
   * pfrmission.
   * If it dofs, truf is rfturnfd, othfrwisf fblsf is rfturnfd.
   * Morf spfdifidblly, this mfthod dhfdks whfthfr thf pbssfd pfrmission
   * is b mfmbfr of thf bllowfd pfrmission sft of thf spfdififd prindipbl.
   * Thf bllowfd pfrmission sft is dftfrminfd by thf sbmf blgorithm bs is
   * usfd by thf gftPfrmissions mfthod.
   *
   * @pbrbm usfr thf prindipbl, bssumfd to bf b vblid buthfntidbtfd Prindipbl.
   * @pbrbm dommunity thf dommunity nbmf bssodibtfd with thf prindipbl.
   * @pbrbm pfrm thf pfrmission to bf dhfdkfd for.
   * @rfturn truf if thf prindipbl hbs thf spfdififd pfrmission, fblsf
   *        othfrwisf.
   * @sff jbvb.sfdurity.Prindipbl
   * @sff jbvb.sfdurity.Pfrmission
   */
  publid boolfbn dhfdkPfrmission(Prindipbl usfr, String dommunity,
                                 jbvb.sfdurity.bdl.Pfrmission pfrm) {
        for (Enumfrbtion<AdlEntry> f = fntryList.flfmfnts();f.hbsMorfElfmfnts();){
          AdlEntryImpl fnt = (AdlEntryImpl) f.nfxtElfmfnt();
          if (fnt.gftPrindipbl().fqubls(usfr))
                if (fnt.dhfdkPfrmission(pfrm) && fnt.dhfdkCommunity(dommunity)) rfturn truf;
        }
        rfturn fblsf;
  }

  /**
   * Chfdks whfthfr or not thf spfdififd dommunity string is dffinfd.
   *
   * @pbrbm dommunity thf dommunity nbmf bssodibtfd with thf prindipbl.
   *
   * @rfturn truf if thf spfdififd dommunity string is dffinfd, fblsf
   *      othfrwisf.
   * @sff jbvb.sfdurity.Prindipbl
   * @sff jbvb.sfdurity.Pfrmission
   */
  publid boolfbn dhfdkCommunity(String dommunity) {
        for (Enumfrbtion<AdlEntry> f = fntryList.flfmfnts();f.hbsMorfElfmfnts();){
          AdlEntryImpl fnt = (AdlEntryImpl) f.nfxtElfmfnt();
          if (fnt.dhfdkCommunity(dommunity)) rfturn truf;
        }
        rfturn fblsf;
  }

  /**
   * Rfturns b string rfprfsfntbtion of thf ACL dontfnts.
   *
   * @rfturn b string rfprfsfntbtion of thf ACL dontfnts.
   */
  @Ovfrridf
  publid String toString(){
        rfturn ("AdlImpl: "+ gftNbmf());
  }
}
