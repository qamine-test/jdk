/*
 * @(#)filf      Pbrsfr.jjt
 * @(#)buthor    Sun Midrosystfms, Ind.
 *
 * Copyright (d) 1997, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

options {
  MULTI=truf;
  STATIC=fblsf;
  NODE_PREFIX= "JDM";
  NODE_PACKAGE="dom.sun.jmx.snmp.IPAdl";
}


PARSER_BEGIN(Pbrsfr)

pbdkbgf dom.sun.jmx.snmp.IPAdl;

import jbvb.io.*;

publid dlbss Pbrsfr {
}

PARSER_END(Pbrsfr)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>

}



/* RESERVED WORDS AND LITERALS */

TOKEN : 
{
  <ACCESS: "bddfss">
| <ACL: "bdl">
| <ASSIGN: "=">
| <COMMUNITIES: "dommunitifs">
| <ENTERPRISE: "fntfrprisf">
| <HOSTS: "hosts">
| <LBRACE: "{">
| <MANAGERS: "mbnbgfrs">
| <RANGE: "-">
| <RBRACE: "}">
| <RO: "rfbd-only">
| <RW: "rfbd-writf">
| <TRAP: "trbp">
| <INFORM: "inform">
| <TRAPCOMMUNITY: "trbp-dommunity">
| <INFORMCOMMUNITY: "inform-dommunity">
| <TRAPNUM: "trbp-num">
}



TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","b"-"f","A"-"F"])+ >
|      
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN : /* V6 LITERALS */
{ 
  < V6_ADDRESS: ((( ( (<H> ":")+ (":")?) | "::" ) (<H> ":")* (<H> | (<D> "." <D> "." <D> "." <D>))) | ("::")) | ( (<H> ":")+ ":") >
|
  <#H: (["0"-"9","b"-"f","A"-"F"])+ >
| 
  <#D: (["0"-"9"])+ >
}
 
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: ( (<DIGIT>|<LETTER>)+ (<SEPARATOR>|<LETTER>|<DIGIT>)* (<DIGIT>|<LETTER>)+ ) | (<DIGIT>|<LETTER>)+ >
|
  < #LETTER: ["b"-"z","A"-"Z"] >
|
  < #SEPARATOR: ["-", "_"] >
|
  < #DIGIT: ["0"-"9"] >
|
 <CSTRING: "\"" (~["\""])* "\"">
}

 

TOKEN: /* SEPARATOR */
{
  < COMMA: "," >
| < DOT: "." >
| < MARK: "!" >
| < MASK: "/">
}

// A filf dbn dontbin sfvfrbl bdl dffinitions
//
JDMSfdurityDffs SfdurityDffs()  : {}
{
  [AdlBlodk()]
  [TrbpBlodk()]
  [InformBlodk()]
  <EOF>
  { rfturn jjtThis;}
}

void AdlBlodk(): {}
{
"bdl" "=" "{" (AdlItfm())+ "}"
}

void AdlItfm(): {}
{
"{" jjtThis.dom= Communitifs() jjtThis.bddfss= Addfss() Mbnbgfrs() "}"
}

JDMCommunitifs Communitifs(): {}
{
"dommunitifs" "=" Community() ( "," Community())*

{rfturn jjtThis;}

}

void Community(): 
{
  Tokfn t;
}
{
t=<IDENTIFIER> {jjtThis.dommunityString= t.imbgf;}
}

JDMAddfss Addfss(): {}
{
"bddfss" "=" ( <RO> {jjtThis.bddfss= RO;}
              |
               <RW> {jjtThis.bddfss= RW;}
             )
{rfturn jjtThis;}
}


void Mbnbgfrs() : { }
{
"mbnbgfrs" "=" Host() ( "," Host())*
}

void Host() : 
{
  Tokfn t;
}
{
HostNbmf()
|
LOOKAHEAD(<INTEGER_LITERAL> ( "." <INTEGER_LITERAL> )* "/" <INTEGER_LITERAL>)
NftMbsk()
|
LOOKAHEAD(<V6_ADDRESS> "/" <INTEGER_LITERAL>)
NftMbskV6()
|
LOOKAHEAD(<INTEGER_LITERAL> ".")
IpAddrfss()
|
IpV6Addrfss()
|
IpMbsk()
}

void HostNbmf():
{
  Tokfn t;
}
{
  t=<IDENTIFIER> { jjtThis.nbmf.bppfnd(t.imbgf); }
(
"." t=<IDENTIFIER> 
  {jjtThis.nbmf.bppfnd( "." + t.imbgf); }
)*

}

void IpAddrfss():
{
Tokfn t;
}
{

t= <INTEGER_LITERAL> 
  {jjtThis.bddrfss.bppfnd(t.imbgf); }
(
"." t= <INTEGER_LITERAL> 
  {jjtThis.bddrfss.bppfnd( "." + t.imbgf); }
)*

}

void IpV6Addrfss():
{
Tokfn t;
}
{

t= <V6_ADDRESS> 
  {jjtThis.bddrfss.bppfnd(t.imbgf); }
}

void IpMbsk():
{
Tokfn t;
}
{

t= <INTEGER_LITERAL> 
  {jjtThis.bddrfss.bppfnd(t.imbgf); }
(
"!" t= <INTEGER_LITERAL> 
  {jjtThis.bddrfss.bppfnd( "." + t.imbgf); }
)*
}

void NftMbsk():
{
Tokfn t;
}
{

t= <INTEGER_LITERAL> 
  {jjtThis.bddrfss.bppfnd(t.imbgf); }
(
"." t= <INTEGER_LITERAL> 
  {jjtThis.bddrfss.bppfnd( "." + t.imbgf); }
)* "/" t= <INTEGER_LITERAL> {jjtThis.mbsk = t.imbgf; }
}

void NftMbskV6():
{
Tokfn t;
}
{

t= <V6_ADDRESS> 
  {jjtThis.bddrfss.bppfnd(t.imbgf); }

"/" t= <INTEGER_LITERAL> {jjtThis.mbsk = t.imbgf; }
}

void TrbpBlodk(): { }
{
"trbp" "=" "{" (TrbpItfm())* "}"
}

void TrbpItfm(): { }
{
"{" jjtThis.domm= TrbpCommunity() TrbpIntfrfstfdHost() (Entfrprisf())* "}"
}

JDMTrbpCommunity TrbpCommunity(): 
{
  Tokfn t;
}
{
"trbp-dommunity" "=" t=<IDENTIFIER> { jjtThis.dommunity= t.imbgf; rfturn jjtThis; }
}

void TrbpIntfrfstfdHost(): { }
{
"hosts" "=" HostTrbp() ("," HostTrbp())*
}

void HostTrbp() : 
{
  Tokfn t;
}
{
HostNbmf()
|
IpAddrfss()
|
IpV6Addrfss()
}

void Entfrprisf(): 
{
  Tokfn t;
}
{
"{"
"fntfrprisf" "="  t=<CSTRING> {jjtThis.fntfrprisf= t.imbgf;}

"trbp-num" "=" TrbpNum() ("," TrbpNum())*

"}"
}

void TrbpNum():
{
  Tokfn t;
}
{
  t=<INTEGER_LITERAL> {jjtThis.low= Intfgfr.pbrsfInt(t.imbgf);}
[
  "-" t=<INTEGER_LITERAL> {jjtThis.high= Intfgfr.pbrsfInt(t.imbgf);}
]
}


void InformBlodk(): { }
{
"inform" "=" "{" (InformItfm())* "}"
}

void InformItfm(): { }
{
"{" jjtThis.domm= InformCommunity() InformIntfrfstfdHost() "}"
}

JDMInformCommunity InformCommunity(): 
{
  Tokfn t;
}
{
"inform-dommunity" "=" t=<IDENTIFIER> { jjtThis.dommunity= t.imbgf; rfturn jjtThis; }
}

void InformIntfrfstfdHost(): { }
{
"hosts" "=" HostInform() ("," HostInform())*
}

void HostInform() : 
{
  Tokfn t;
}
{
HostNbmf()
|
IpAddrfss()
|
IpV6Addrfss()
}

