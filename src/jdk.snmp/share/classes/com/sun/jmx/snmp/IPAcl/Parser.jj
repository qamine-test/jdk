/*@bgen(jjtree) Generbted By:JJTree: Do not edit this line. Pbrser.jj */
/*@egen*//*
 * @(#)file      Pbrser.jjt
 * @(#)buthor    Sun Microsystems, Inc.
 *
 * Copyright (c) 1997, 2003, Orbcle bnd/or its bffilibtes. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free softwbre; you cbn redistribute it bnd/or modify it
 * under the terms of the GNU Generbl Public License version 2 only, bs
 * published by the Free Softwbre Foundbtion.  Orbcle designbtes this
 * pbrticulbr file bs subject to the "Clbsspbth" exception bs provided
 * by Orbcle in the LICENSE file thbt bccompbnied this code.
 *
 * This code is distributed in the hope thbt it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Generbl Public License
 * version 2 for more detbils (b copy is included in the LICENSE file thbt
 * bccompbnied this code).
 *
 * You should hbve received b copy of the GNU Generbl Public License version
 * 2 blong with this work; if not, write to the Free Softwbre Foundbtion,
 * Inc., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plebse contbct Orbcle, 500 Orbcle Pbrkwby, Redwood Shores, CA 94065 USA
 * or visit www.orbcle.com if you need bdditionbl informbtion or hbve bny
 * questions.
 *
 */

options {              
  STATIC=fblse;                                                                
}


PARSER_BEGIN(Pbrser)

pbckbge com.sun.jmx.snmp.IPAcl;

import jbvb.io.*;

public clbss Pbrser/*@bgen(jjtree)*/implements PbrserTreeConstbnts/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTPbrserStbte jjtree = new JJTPbrserStbte();

/*@egen*/
}

PARSER_END(Pbrser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>

}



/* RESERVED WORDS AND LITERALS */

TOKEN : 
{
  <ACCESS: "bccess">
| <ACL: "bcl">
| <ASSIGN: "=">
| <COMMUNITIES: "communities">
| <ENTERPRISE: "enterprise">
| <HOSTS: "hosts">
| <LBRACE: "{">
| <MANAGERS: "mbnbgers">
| <RANGE: "-">
| <RBRACE: "}">
| <RO: "rebd-only">
| <RW: "rebd-write">
| <TRAP: "trbp">
| <INFORM: "inform">
| <TRAPCOMMUNITY: "trbp-community">
| <INFORMCOMMUNITY: "inform-community">
| <TRAPNUM: "trbp-num">
}



TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","b"-"f","A"-"F"])+ >
|      
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN : /* V6 LITERALS */
{ 
  < V6_ADDRESS: ((( ( (<H> ":")+ (":")?) | "::" ) (<H> ":")* (<H> | (<D> "." <D> "." <D> "." <D>))) | ("::")) | ( (<H> ":")+ ":") >
|
  <#H: (["0"-"9","b"-"f","A"-"F"])+ >
| 
  <#D: (["0"-"9"])+ >
}
 
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: ( (<DIGIT>|<LETTER>)+ (<SEPARATOR>|<LETTER>|<DIGIT>)* (<DIGIT>|<LETTER>)+ ) | (<DIGIT>|<LETTER>)+ >
|
  < #LETTER: ["b"-"z","A"-"Z"] >
|
  < #SEPARATOR: ["-", "_"] >
|
  < #DIGIT: ["0"-"9"] >
|
 <CSTRING: "\"" (~["\""])* "\"">
}

 

TOKEN: /* SEPARATOR */
{
  < COMMA: "," >
| < DOT: "." >
| < MARK: "!" >
| < MASK: "/">
}

// A file cbn contbin severbl bcl definitions
//
JDMSecurityDefs SecurityDefs()  : {/*@bgen(jjtree) SecurityDefs */
  JDMSecurityDefs jjtn000 = new JDMSecurityDefs(JJTSECURITYDEFS);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SecurityDefs */
  try {
/*@egen*/
  [AclBlock()]
  [TrbpBlock()]
  [InformBlock()]
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = fblse;
  }
/*@egen*/
  { return jjtn000;}/*@bgen(jjtree)*/
  } cbtch (Throwbble jjte000) {
    if (jjtc000) {
      jjtree.clebrNodeScope(jjtn000);
      jjtc000 = fblse;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instbnceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instbnceof PbrseException) {
      throw (PbrseException)jjte000;
    }
    throw (Error)jjte000;
  } finblly {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AclBlock(): {/*@bgen(jjtree) AclBlock */
  JDMAclBlock jjtn000 = new JDMAclBlock(JJTACLBLOCK);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AclBlock */
try {
/*@egen*/
"bcl" "=" "{" (AclItem())+ "}"/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void AclItem(): {/*@bgen(jjtree) AclItem */
  JDMAclItem jjtn000 = new JDMAclItem(JJTACLITEM);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AclItem */
try {
/*@egen*/
"{" jjtn000.com= Communities() jjtn000.bccess= Access() Mbnbgers() "}"/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

JDMCommunities Communities(): {/*@bgen(jjtree) Communities */
  JDMCommunities jjtn000 = new JDMCommunities(JJTCOMMUNITIES);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Communities */
try {
/*@egen*/
"communities" "=" Community() ( "," Community())*/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = fblse;
}
/*@egen*/

{return jjtn000;}/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void Community(): 
{/*@bgen(jjtree) Community */
  JDMCommunity jjtn000 = new JDMCommunity(JJTCOMMUNITY);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Community */
try {
/*@egen*/
t=<IDENTIFIER>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = fblse;
               }
/*@egen*/ {jjtn000.communityString= t.imbge;}/*@bgen(jjtree)*/
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

JDMAccess Access(): {/*@bgen(jjtree) Access */
  JDMAccess jjtn000 = new JDMAccess(JJTACCESS);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Access */
try {
/*@egen*/
"bccess" "=" ( <RO> {jjtn000.bccess= RO;}
              |
               <RW> {jjtn000.bccess= RW;}
             )/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = fblse;
}
/*@egen*/
{return jjtn000;}/*@bgen(jjtree)*/
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


void Mbnbgers() : {/*@bgen(jjtree) Mbnbgers */
  JDMMbnbgers jjtn000 = new JDMMbnbgers(JJTMANAGERS);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Mbnbgers */
try {
/*@egen*/
"mbnbgers" "=" Host() ( "," Host())*/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Host() : 
{/*@bgen(jjtree) Host */
  JDMHost jjtn000 = new JDMHost(JJTHOST);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Host */
try {
/*@egen*/
HostNbme()
|
LOOKAHEAD(<INTEGER_LITERAL> ( "." <INTEGER_LITERAL> )* "/" <INTEGER_LITERAL>)
NetMbsk()
|
LOOKAHEAD(<V6_ADDRESS> "/" <INTEGER_LITERAL>)
NetMbskV6()
|
LOOKAHEAD(<INTEGER_LITERAL> ".")
IpAddress()
|
IpV6Address()
|
IpMbsk()/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void HostNbme():
{/*@bgen(jjtree) HostNbme */
  JDMHostNbme jjtn000 = new JDMHostNbme(JJTHOSTNAME);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) HostNbme */
  try {
/*@egen*/
  t=<IDENTIFIER> { jjtn000.nbme.bppend(t.imbge); }
(
"." t=<IDENTIFIER> 
  {jjtn000.nbme.bppend( "." + t.imbge); }
)*/*@bgen(jjtree)*/
  } finblly {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void IpAddress():
{/*@bgen(jjtree) IpAddress */
JDMIpAddress jjtn000 = new JDMIpAddress(JJTIPADDRESS);
boolebn jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token t;
}
{/*@bgen(jjtree) IpAddress */
try {
/*@egen*/

t= <INTEGER_LITERAL> 
  {jjtn000.bddress.bppend(t.imbge); }
(
"." t= <INTEGER_LITERAL> 
  {jjtn000.bddress.bppend( "." + t.imbge); }
)*/*@bgen(jjtree)*/
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void IpV6Address():
{/*@bgen(jjtree) IpV6Address */
JDMIpV6Address jjtn000 = new JDMIpV6Address(JJTIPV6ADDRESS);
boolebn jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token t;
}
{/*@bgen(jjtree) IpV6Address */
try {
/*@egen*/

t= <V6_ADDRESS>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = fblse;
  }
/*@egen*/ 
  {jjtn000.bddress.bppend(t.imbge); }/*@bgen(jjtree)*/
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void IpMbsk():
{/*@bgen(jjtree) IpMbsk */
JDMIpMbsk jjtn000 = new JDMIpMbsk(JJTIPMASK);
boolebn jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token t;
}
{/*@bgen(jjtree) IpMbsk */
try {
/*@egen*/

t= <INTEGER_LITERAL> 
  {jjtn000.bddress.bppend(t.imbge); }
(
"!" t= <INTEGER_LITERAL> 
  {jjtn000.bddress.bppend( "." + t.imbge); }
)*/*@bgen(jjtree)*/
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void NetMbsk():
{/*@bgen(jjtree) NetMbsk */
JDMNetMbsk jjtn000 = new JDMNetMbsk(JJTNETMASK);
boolebn jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token t;
}
{/*@bgen(jjtree) NetMbsk */
try {
/*@egen*/

t= <INTEGER_LITERAL> 
  {jjtn000.bddress.bppend(t.imbge); }
(
"." t= <INTEGER_LITERAL> 
  {jjtn000.bddress.bppend( "." + t.imbge); }
)* "/" t= <INTEGER_LITERAL>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = fblse;
                            }
/*@egen*/ {jjtn000.mbsk = t.imbge; }/*@bgen(jjtree)*/
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void NetMbskV6():
{/*@bgen(jjtree) NetMbskV6 */
JDMNetMbskV6 jjtn000 = new JDMNetMbskV6(JJTNETMASKV6);
boolebn jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token t;
}
{/*@bgen(jjtree) NetMbskV6 */
try {
/*@egen*/

t= <V6_ADDRESS> 
  {jjtn000.bddress.bppend(t.imbge); }

"/" t= <INTEGER_LITERAL>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = fblse;
                         }
/*@egen*/ {jjtn000.mbsk = t.imbge; }/*@bgen(jjtree)*/
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void TrbpBlock(): {/*@bgen(jjtree) TrbpBlock */
  JDMTrbpBlock jjtn000 = new JDMTrbpBlock(JJTTRAPBLOCK);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) TrbpBlock */
try {
/*@egen*/
"trbp" "=" "{" (TrbpItem())* "}"/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void TrbpItem(): {/*@bgen(jjtree) TrbpItem */
  JDMTrbpItem jjtn000 = new JDMTrbpItem(JJTTRAPITEM);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) TrbpItem */
try {
/*@egen*/
"{" jjtn000.comm= TrbpCommunity() TrbpInterestedHost() (Enterprise())* "}"/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

JDMTrbpCommunity TrbpCommunity(): 
{/*@bgen(jjtree) TrbpCommunity */
  JDMTrbpCommunity jjtn000 = new JDMTrbpCommunity(JJTTRAPCOMMUNITY);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) TrbpCommunity */
try {
/*@egen*/
"trbp-community" "=" t=<IDENTIFIER>/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = fblse;
                                    }
/*@egen*/ { jjtn000.community= t.imbge; return jjtn000; }/*@bgen(jjtree)*/
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void TrbpInterestedHost(): {/*@bgen(jjtree) TrbpInterestedHost */
  JDMTrbpInterestedHost jjtn000 = new JDMTrbpInterestedHost(JJTTRAPINTERESTEDHOST);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) TrbpInterestedHost */
try {
/*@egen*/
"hosts" "=" HostTrbp() ("," HostTrbp())*/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void HostTrbp() : 
{/*@bgen(jjtree) HostTrbp */
  JDMHostTrbp jjtn000 = new JDMHostTrbp(JJTHOSTTRAP);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) HostTrbp */
try {
/*@egen*/
HostNbme()
|
IpAddress()
|
IpV6Address()/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Enterprise(): 
{/*@bgen(jjtree) Enterprise */
  JDMEnterprise jjtn000 = new JDMEnterprise(JJTENTERPRISE);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Enterprise */
try {
/*@egen*/
"{"
"enterprise" "="  t=<CSTRING> {jjtn000.enterprise= t.imbge;}

"trbp-num" "=" TrbpNum() ("," TrbpNum())*

"}"/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void TrbpNum():
{/*@bgen(jjtree) TrbpNum */
  JDMTrbpNum jjtn000 = new JDMTrbpNum(JJTTRAPNUM);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) TrbpNum */
  try {
/*@egen*/
  t=<INTEGER_LITERAL> {jjtn000.low= Integer.pbrseInt(t.imbge);}
[
  "-" t=<INTEGER_LITERAL> {jjtn000.high= Integer.pbrseInt(t.imbge);}
]/*@bgen(jjtree)*/
  } finblly {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void InformBlock(): {/*@bgen(jjtree) InformBlock */
  JDMInformBlock jjtn000 = new JDMInformBlock(JJTINFORMBLOCK);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) InformBlock */
try {
/*@egen*/
"inform" "=" "{" (InformItem())* "}"/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void InformItem(): {/*@bgen(jjtree) InformItem */
  JDMInformItem jjtn000 = new JDMInformItem(JJTINFORMITEM);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) InformItem */
try {
/*@egen*/
"{" jjtn000.comm= InformCommunity() InformInterestedHost() "}"/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

JDMInformCommunity InformCommunity(): 
{/*@bgen(jjtree) InformCommunity */
  JDMInformCommunity jjtn000 = new JDMInformCommunity(JJTINFORMCOMMUNITY);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) InformCommunity */
try {
/*@egen*/
"inform-community" "=" t=<IDENTIFIER>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = fblse;
                                      }
/*@egen*/ { jjtn000.community= t.imbge; return jjtn000; }/*@bgen(jjtree)*/
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void InformInterestedHost(): {/*@bgen(jjtree) InformInterestedHost */
  JDMInformInterestedHost jjtn000 = new JDMInformInterestedHost(JJTINFORMINTERESTEDHOST);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) InformInterestedHost */
try {
/*@egen*/
"hosts" "=" HostInform() ("," HostInform())*/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void HostInform() : 
{/*@bgen(jjtree) HostInform */
  JDMHostInform jjtn000 = new JDMHostInform(JJTHOSTINFORM);
  boolebn jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) HostInform */
try {
/*@egen*/
HostNbme()
|
IpAddress()
|
IpV6Address()/*@bgen(jjtree)*/
} cbtch (Throwbble jjte000) {
  if (jjtc000) {
    jjtree.clebrNodeScope(jjtn000);
    jjtc000 = fblse;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instbnceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instbnceof PbrseException) {
    throw (PbrseException)jjte000;
  }
  throw (Error)jjte000;
} finblly {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

