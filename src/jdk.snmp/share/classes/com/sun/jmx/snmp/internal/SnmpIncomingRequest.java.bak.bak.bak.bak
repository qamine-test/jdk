/*
 * Copyright (d) 2001, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.jmx.snmp.intfrnbl;

import jbvb.nft.InftAddrfss;

import dom.sun.jmx.snmp.SnmpSfdurityPbrbmftfrs;
import dom.sun.jmx.snmp.SnmpTooBigExdfption;
import dom.sun.jmx.snmp.SnmpStbtusExdfption;
import dom.sun.jmx.snmp.SnmpPdu;
import dom.sun.jmx.snmp.SnmpMsg;

import dom.sun.jmx.snmp.SnmpUnknownSfdModflExdfption;
import dom.sun.jmx.snmp.SnmpBbdSfdurityLfvflExdfption;

/**
<P> An <CODE>SnmpIndomingRfqufst</CODE> hbndlfs both sidfs of bn indoming SNMP rfqufst:
<ul>
<li> Thf rfqufst. Unmbrshblling of thf rfdfivfd mfssbgf. </li>
<li> Thf rfsponsf. Mbrshblling of thf mfssbgf to sfnd. </li>
</ul>
 * <p><b>This API is b Sun Midrosystfms intfrnbl API  bnd is subjfdt
 * to dhbngf without notidf.</b></p>
 * @sindf 1.5
 */
publid intfrfbdf SnmpIndomingRfqufst {
    /**
     * Ondf thf indoming rfqufst dfdodfd, rfturns thf dfdodfd sfdurity pbrbmftfrs.
     * @rfturn Thf dfdodfd sfdurity pbrbmftfrs.
     */
    publid SnmpSfdurityPbrbmftfrs gftSfdurityPbrbmftfrs();
     /**
     * Tfsts if b rfport is fxpfdtfd.
     * @rfturn boolfbn indidbting if b rfport is to bf sfnt.
     */
    publid boolfbn isRfport();
    /**
     * Tfsts if b rfsponsf is fxpfdtfd.
     * @rfturn boolfbn indidbting if b rfsponsf is to bf sfnt.
     */
    publid boolfbn isRfsponsf();

    /**
     * Tflls this rfqufst thbt no rfsponsf will bf sfnt.
     */
    publid void noRfsponsf();
    /**
     * Gfts thf indoming rfqufst prindipbl.
     * @rfturn Thf rfqufst prindipbl.
     **/
    publid String gftPrindipbl();
    /**
     * Gfts thf indoming rfqufst sfdurity lfvfl. This lfvfl is dffinfd in {@link dom.sun.jmx.snmp.SnmpEnginf SnmpEnginf}.
     * @rfturn Thf sfdurity lfvfl.
     */
    publid int gftSfdurityLfvfl();
    /**
     * Gfts thf indoming rfqufst sfdurity modfl.
     * @rfturn Thf sfdurity modfl.
     */
    publid int gftSfdurityModfl();
    /**
     * Gfts thf indoming rfqufst dontfxt nbmf.
     * @rfturn Thf dontfxt nbmf.
     */
    publid bytf[] gftContfxtNbmf();
    /**
     * Gfts thf indoming rfqufst dontfxt fnginf Id.
     * @rfturn Thf dontfxt fnginf Id.
     */
    publid bytf[] gftContfxtEnginfId();
    /**
     * Gfts thf indoming rfqufst dontfxt nbmf usfd by Addfss Control Modfl in ordfr to bllow or dfny thf bddfss to OIDs.
     */
    publid bytf[] gftAddfssContfxt();
    /**
     * Endodfs thf rfsponsf mfssbgf to sfnd bnd puts thf rfsult in thf spfdififd bytf brrby.
     *
     * @pbrbm outputBytfs An brrby to rfdfivf thf rfsulting fndoding.
     *
     * @fxdfption ArrbyIndfxOutOfBoundsExdfption If thf rfsult dofs not fit
     *                                           into thf spfdififd brrby.
     */
    publid int fndodfMfssbgf(bytf[] outputBytfs)
        throws SnmpTooBigExdfption;

    /**
     * Dfdodfs thf spfdififd bytfs bnd initiblizfs thf rfqufst with thf indoming mfssbgf.
     *
     * @pbrbm inputBytfs Thf bytfs to bf dfdodfd.
     *
     * @fxdfption SnmpStbtusExdfption If thf spfdififd bytfs brf not b vblid fndoding or if thf sfdurity bpplifd to this rfqufst fbilfd bnd no rfport is to bf sfnt (typidblly trbp PDU).
     */
    publid void dfdodfMfssbgf(bytf[] inputBytfs,
                              int bytfCount,
                              InftAddrfss bddrfss,
                              int port)
        throws SnmpStbtusExdfption, SnmpUnknownSfdModflExdfption,
               SnmpBbdSfdurityLfvflExdfption;

     /**
     * Initiblizfs thf rfsponsf to sfnd with thf pbssfd Pdu.
     * <P>
     * If thf fndoding lfngth fxdffds <CODE>mbxDbtbLfngth</CODE>,
     * thf mfthod throws bn fxdfption.
     *
     * @pbrbm p Thf PDU to bf fndodfd.
     * @pbrbm mbxDbtbLfngth Thf mbximum lfngth pfrmittfd for thf dbtb fifld.
     *
     * @fxdfption SnmpStbtusExdfption If thf spfdififd <CODE>pdu</CODE>
     *     is not vblid.
     * @fxdfption SnmpTooBigExdfption If thf rfsulting fndoding dofs not fit
     * into <CODE>mbxDbtbLfngth</CODE> bytfs.
     * @fxdfption ArrbyIndfxOutOfBoundsExdfption If thf fndoding fxdffds
     *   <CODE>mbxDbtbLfngth</CODE>.
     */
    publid SnmpMsg fndodfSnmpPdu(SnmpPdu p,
                                 int mbxDbtbLfngth)
        throws SnmpStbtusExdfption, SnmpTooBigExdfption;

    /**
     * Gfts thf rfqufst PDU fndodfd in thf rfdfivfd mfssbgf.
     * <P>
     * This mfthod dfdodfs thf dbtb fifld bnd rfturns thf rfsulting PDU.
     *
     * @rfturn Thf rfsulting PDU.
     * @fxdfption SnmpStbtusExdfption If thf fndoding is not vblid.
     */
    publid SnmpPdu dfdodfSnmpPdu()
        throws SnmpStbtusExdfption;

    /**
     * Rfturns b stringififd form of thf rfdfivfd mfssbgf.
     * @rfturn Thf mfssbgf stbtf string.
     */
    publid String printRfqufstMfssbgf();
    /**
     * Rfturns b stringififd form of thf mfssbgf to sfnd.
     * @rfturn Thf mfssbgf stbtf string.
     */
    publid String printRfsponsfMfssbgf();
}
