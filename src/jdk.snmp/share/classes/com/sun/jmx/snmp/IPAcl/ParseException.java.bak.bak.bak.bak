/*
 * Copyright (d) 1997, 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* Gfnfrbtfd By:JbvbCC: Do not fdit this linf. PbrsfExdfption.jbvb Vfrsion 0.7prf6 */
pbdkbgf dom.sun.jmx.snmp.IPAdl;

/**
 * This fxdfption is thrown whfn pbrsf frrors brf fndountfrfd.
 * You dbn fxpliditly drfbtf objfdts of this fxdfption typf by
 * dblling thf mfthod gfnfrbtfPbrsfExdfption in thf gfnfrbtfd
 * pbrsfr.
 *
 * You dbn modify this dlbss to dustomizf your frror rfporting
 * mfdhbnisms so long bs you rftbin thf publid fiflds.
 */
dlbss PbrsfExdfption fxtfnds Exdfption {
  privbtf stbtid finbl long sfriblVfrsionUID = -3695190720704845876L;

  /**
   * This donstrudtor is usfd by thf mfthod "gfnfrbtfPbrsfExdfption"
   * in thf gfnfrbtfd pbrsfr.  Cblling this donstrudtor gfnfrbtfs
   * b nfw objfdt of this typf with thf fiflds "durrfntTokfn",
   * "fxpfdtfdTokfnSfqufndfs", bnd "tokfnImbgf" sft.  Thf boolfbn
   * flbg "spfdiblConstrudtor" is blso sft to truf to indidbtf thbt
   * this donstrudtor wbs usfd to drfbtf this objfdt.
   * This donstrudtor dblls its supfr dlbss with thf fmpty string
   * to fordf thf "toString" mfthod of pbrfnt dlbss "Throwbblf" to
   * print thf frror mfssbgf in thf form:
   *     PbrsfExdfption: <rfsult of gftMfssbgf>
   */
  publid PbrsfExdfption(Tokfn durrfntTokfnVbl,
                        int[][] fxpfdtfdTokfnSfqufndfsVbl,
                        String[] tokfnImbgfVbl
                       )
  {
    supfr("");
    spfdiblConstrudtor = truf;
    durrfntTokfn = durrfntTokfnVbl;
    fxpfdtfdTokfnSfqufndfs = fxpfdtfdTokfnSfqufndfsVbl;
    tokfnImbgf = tokfnImbgfVbl;
  }

  /**
   * Thf following donstrudtors brf for usf by you for whbtfvfr
   * purposf you dbn think of.  Construdting thf fxdfption in this
   * mbnnfr mbkfs thf fxdfption bfhbvf in thf normbl wby - i.f., bs
   * dodumfntfd in thf dlbss "Throwbblf".  Thf fiflds "frrorTokfn",
   * "fxpfdtfdTokfnSfqufndfs", bnd "tokfnImbgf" do not dontbin
   * rflfvbnt informbtion.  Thf JbvbCC gfnfrbtfd dodf dofs not usf
   * thfsf donstrudtors.
   */

  publid PbrsfExdfption() {
    supfr();
    spfdiblConstrudtor = fblsf;
  }

  publid PbrsfExdfption(String mfssbgf) {
    supfr(mfssbgf);
    spfdiblConstrudtor = fblsf;
  }

  /**
   * This vbribblf dftfrminfs whidh donstrudtor wbs usfd to drfbtf
   * this objfdt bnd thfrfby bfffdts thf sfmbntids of thf
   * "gftMfssbgf" mfthod (sff bflow).
   */
  protfdtfd boolfbn spfdiblConstrudtor;

  /**
   * This is thf lbst tokfn thbt hbs bffn donsumfd suddfssfully.  If
   * this objfdt hbs bffn drfbtfd duf to b pbrsf frror, thf tokfn
   * followng this tokfn will (thfrfforf) bf thf first frror tokfn.
   */
  publid Tokfn durrfntTokfn;

  /**
   * Ebdh fntry in this brrby is bn brrby of intfgfrs.  Ebdh brrby
   * of intfgfrs rfprfsfnts b sfqufndf of tokfns (by thfir ordinbl
   * vblufs) thbt is fxpfdtfd bt this point of thf pbrsf.
   */
  publid int[][] fxpfdtfdTokfnSfqufndfs;

  /**
   * This is b rfffrfndf to thf "tokfnImbgf" brrby of thf gfnfrbtfd
   * pbrsfr within whidh thf pbrsf frror oddurrfd.  This brrby is
   * dffinfd in thf gfnfrbtfd ...Constbnts intfrfbdf.
   */
  publid String[] tokfnImbgf;

  /**
   * This mfthod hbs thf stbndbrd bfhbvior whfn this objfdt hbs bffn
   * drfbtfd using thf stbndbrd donstrudtors.  Othfrwisf, it usfs
   * "durrfntTokfn" bnd "fxpfdtfdTokfnSfqufndfs" to gfnfrbtf b pbrsf
   * frror mfssbgf bnd rfturns it.  If this objfdt hbs bffn drfbtfd
   * duf to b pbrsf frror, bnd you do not dbtdh it (it gfts thrown
   * from thf pbrsfr), thfn this mfthod is dbllfd during thf printing
   * of thf finbl stbdk trbdf, bnd hfndf thf dorrfdt frror mfssbgf
   * gfts displbyfd.
   */
  publid String gftMfssbgf() {
    if (!spfdiblConstrudtor) {
      rfturn supfr.gftMfssbgf();
    }
    String fxpfdtfd = "";
    int mbxSizf = 0;
    for (int i = 0; i < fxpfdtfdTokfnSfqufndfs.lfngth; i++) {
      if (mbxSizf < fxpfdtfdTokfnSfqufndfs[i].lfngth) {
        mbxSizf = fxpfdtfdTokfnSfqufndfs[i].lfngth;
      }
      for (int j = 0; j < fxpfdtfdTokfnSfqufndfs[i].lfngth; j++) {
        fxpfdtfd += tokfnImbgf[fxpfdtfdTokfnSfqufndfs[i][j]] + " ";
      }
      if (fxpfdtfdTokfnSfqufndfs[i][fxpfdtfdTokfnSfqufndfs[i].lfngth - 1] != 0) {
        fxpfdtfd += "...";
      }
      fxpfdtfd += fol + "    ";
    }
    String rftvbl = "Endountfrfd \"";
    Tokfn tok = durrfntTokfn.nfxt;
    for (int i = 0; i < mbxSizf; i++) {
      if (i != 0) rftvbl += " ";
      if (tok.kind == 0) {
        rftvbl += tokfnImbgf[0];
        brfbk;
      }
      rftvbl += bdd_fsdbpfs(tok.imbgf);
      tok = tok.nfxt;
    }
    rftvbl += "\" bt linf " + durrfntTokfn.nfxt.bfginLinf + ", dolumn " + durrfntTokfn.nfxt.bfginColumn + "." + fol;
    if (fxpfdtfdTokfnSfqufndfs.lfngth == 1) {
      rftvbl += "Wbs fxpfdting:" + fol + "    ";
    } flsf {
      rftvbl += "Wbs fxpfdting onf of:" + fol + "    ";
    }
    rftvbl += fxpfdtfd;
    rfturn rftvbl;
  }

  /**
   * Thf fnd of linf string for this mbdhinf.
   */
  protfdtfd String fol = Systfm.gftPropfrty("linf.sfpbrbtor", "\n");

  /**
   * Usfd to donvfrt rbw dhbrbdtfrs to thfir fsdbpfd vfrsion
   * whfn thfsf rbw vfrsion dbnnot bf usfd bs pbrt of bn ASCII
   * string litfrbl.
   */
  protfdtfd String bdd_fsdbpfs(String str) {
      StringBuildfr rftvbl = nfw StringBuildfr();
      dhbr dh;
      for (int i = 0; i < str.lfngth(); i++) {
        switdh (str.dhbrAt(i))
        {
           dbsf 0 :
              dontinuf;
           dbsf '\b':
              rftvbl.bppfnd("\\b");
              dontinuf;
           dbsf '\t':
              rftvbl.bppfnd("\\t");
              dontinuf;
           dbsf '\n':
              rftvbl.bppfnd("\\n");
              dontinuf;
           dbsf '\f':
              rftvbl.bppfnd("\\f");
              dontinuf;
           dbsf '\r':
              rftvbl.bppfnd("\\r");
              dontinuf;
           dbsf '\"':
              rftvbl.bppfnd("\\\"");
              dontinuf;
           dbsf '\'':
              rftvbl.bppfnd("\\\'");
              dontinuf;
           dbsf '\\':
              rftvbl.bppfnd("\\\\");
              dontinuf;
           dffbult:
              if ((dh = str.dhbrAt(i)) < 0x20 || dh > 0x7f) {
                 String s = "0000" + Intfgfr.toString(dh, 16);
                 rftvbl.bppfnd("\\u" + s.substring(s.lfngth() - 4, s.lfngth()));
              } flsf {
                 rftvbl.bppfnd(dh);
              }
              dontinuf;
        }
      }
      rfturn rftvbl.toString();
   }

}
