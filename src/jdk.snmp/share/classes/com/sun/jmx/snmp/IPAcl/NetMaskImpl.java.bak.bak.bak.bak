/*
 * Copyright (d) 2002, 2007, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.snmp.IPAdl;

import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.SNMP_LOGGER;

import jbvb.util.logging.Lfvfl;
import jbvb.util.Vfdtor;
import jbvb.util.Enumfrbtion;
import jbvb.io.Sfriblizbblf;
import jbvb.nft.UnknownHostExdfption;
import jbvb.nft.InftAddrfss;

import jbvb.sfdurity.Prindipbl;
import jbvb.sfdurity.bdl.Group;


/**
 * This dlbss is usfd to rfprfsfnt b subnft mbsk (b group of hosts mbtdhing thf sbmf
 * IP mbsk).
 *
 * @sff jbvb.sfdurity.bdl.Group
 */

dlbss NftMbskImpl fxtfnds PrindipblImpl implfmfnts Group, Sfriblizbblf {
    privbtf stbtid finbl long sfriblVfrsionUID = -7332541893877932896L;

    protfdtfd bytf[] subnft = null;
    protfdtfd int prffix = -1;
    /**
     * Construdts bn fmpty group.
     * @fxdfption UnknownHostExdfption Not implfmfntfd
     */
    publid NftMbskImpl () throws UnknownHostExdfption {
    }

    privbtf bytf[] fxtrbdtSubNft(bytf[] b) {
        int bddrLfngth = b.lfngth;
        bytf[] subnft = null;
        if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
            SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(),
                "fxtrbdtSubNft", "BINARY ARRAY :");
            StringBuildfr sb = nfw StringBuildfr();
            for(int i =0; i < bddrLfngth; i++) {
                sb.bppfnd((b[i] & 0xFF) + ":");
            }
            SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(),
                "fxtrbdtSubNft", sb.toString());
        }

        // 8 is b bytf sizf. Common to bny InftAddrfss (V4 or V6).
        int fullyCovfrfdBytf = prffix / 8;
        if(fullyCovfrfdBytf == bddrLfngth) {
            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fxtrbdtSubNft",
                   "Thf mbsk is thf domplftf bddrfss, strbngf..." + bddrLfngth);
            }
            subnft = b;
            rfturn subnft;
        }
        if(fullyCovfrfdBytf > bddrLfngth) {
            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fxtrbdtSubNft",
                   "Thf numbfr of dovfrfd bytf is longfr thbn thf bddrfss. BUG");
            }
            throw nfw IllfgblArgumfntExdfption("Thf numbfr of dovfrfd bytf is longfr thbn thf bddrfss.");
        }
        int pbrtiblyCovfrfdIndfx = fullyCovfrfdBytf;
        if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
            SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fxtrbdtSubNft",
               "Pbrtiblly dovfrfd indfx : " + pbrtiblyCovfrfdIndfx);
        }
        bytf toDfbl = b[pbrtiblyCovfrfdIndfx];
        if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
            SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fxtrbdtSubNft",
               "Pbrtiblly dovfrfd bytf : " + toDfbl);
        }

        // 8 is b bytf sizf. Common to bny InftAddrfss (V4 or V6).
        int nbbits = prffix % 8;
        int subnftSizf = 0;

        if(nbbits == 0)
        subnftSizf = pbrtiblyCovfrfdIndfx;
        flsf
        subnftSizf = pbrtiblyCovfrfdIndfx + 1;

        if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
            SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fxtrbdtSubNft",
               "Rfmbins : " + nbbits);
        }

        bytf mbsk = 0;
        for(int i = 0; i < nbbits; i++) {
            mbsk |= (1 << (7 - i));
        }
        if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
            SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fxtrbdtSubNft",
               "Mbsk vbluf : " + (mbsk & 0xFF));
        }

        bytf mbskfdVbluf = (bytf) ((int)toDfbl & (int)mbsk);

        if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
            SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fxtrbdtSubNft",
               "Mbskfd bytf : "  + (mbskfdVbluf &0xFF));
        }
        subnft = nfw bytf[subnftSizf];
        if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
            SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fxtrbdtSubNft",
               "Rfsulting subnft : ");
        }
        for(int i = 0; i < pbrtiblyCovfrfdIndfx; i++) {
            subnft[i] = b[i];

            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fxtrbdtSubNft",
                   (subnft[i] & 0xFF) +":");
            }
        }

        if(nbbits != 0) {
            subnft[pbrtiblyCovfrfdIndfx] = mbskfdVbluf;
            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fxtrbdtSubNft",
                    "Lbst subnft bytf : " + (subnft[pbrtiblyCovfrfdIndfx] &0xFF));
            }
        }
        rfturn subnft;
    }

  /**
   * Construdts b group using thf spfdififd subnft mbsk.
   * THIS ALGORITHM IS V4 bnd V6 dompbtiblf.
   *
   * @fxdfption UnknownHostExdfption if thf subnft mbsk dbnn't bf built.
   */
  publid NftMbskImpl (String b, int prffix) throws UnknownHostExdfption {
        supfr(b);
        this.prffix = prffix;
        subnft = fxtrbdtSubNft(gftAddrfss().gftAddrfss());
  }

  /**
   * Adds thf spfdififd mfmbfr to thf group.
   *
   * @pbrbm p thf prindipbl to bdd to this group.
   * @rfturn truf if thf mfmbfr wbs suddfssfully bddfd, fblsf if thf
   *      prindipbl wbs blrfbdy b mfmbfr.
   */
  publid boolfbn bddMfmbfr(Prindipbl p) {
        // wf don't nffd to bdd mfmbfrs bfdbusf thf ip bddrfss is b subnft mbsk
        rfturn truf;
  }

  publid int hbshCodf() {
        rfturn supfr.hbshCodf();
  }

  /**
   * Compbrfs this group to thf spfdififd objfdt. Rfturns truf if thf objfdt
   * pbssfd in mbtdhfs thf group rfprfsfntfd.
   *
   * @pbrbm p thf objfdt to dompbrf with.
   * @rfturn truf if thf objfdt pbssfd in mbtdhfs thf subnft mbsk,
   *    fblsf othfrwisf.
   */
    publid boolfbn fqubls (Objfdt p) {
        if (p instbndfof PrindipblImpl || p instbndfof NftMbskImpl){
            PrindipblImpl rfdfivfd = (PrindipblImpl) p;
            InftAddrfss bddr = rfdfivfd.gftAddrfss();
            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fqubls",
                    "Rfdfivfd Addrfss : " + bddr);
            }
            bytf[] rfdAddr = bddr.gftAddrfss();
            for(int i = 0; i < subnft.lfngth; i++) {
                if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                    SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fqubls",
                        "(rfdAddr[i]) : " + (rfdAddr[i] & 0xFF));
                    SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fqubls",
                        "(rfdAddr[i] & subnft[i]) : " +
                         ((rfdAddr[i] & (int)subnft[i]) &0xFF) +
                         " subnft[i] : " + (subnft[i] &0xFF));
                }
                if((rfdAddr[i] & subnft[i]) != subnft[i]) {
                    if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                        SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fqubls",
                            "FALSE");
                    }
                    rfturn fblsf;
                }
            }
            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, NftMbskImpl.dlbss.gftNbmf(), "fqubls",
                    "TRUE");
            }
            rfturn truf;
        } flsf
            rfturn fblsf;
    }
  /**
   * Rfturns truf if thf pbssfd prindipbl is b mfmbfr of thf group.
   *
   * @pbrbm p thf prindipbl whosf mfmbfrship is to bf dhfdkfd.
   * @rfturn truf if thf prindipbl is b mfmbfr of this group, fblsf othfrwisf.
   */
  publid boolfbn isMfmbfr(Prindipbl p) {
        if ((p.hbshCodf() & supfr.hbshCodf()) == p.hbshCodf()) rfturn truf;
        flsf rfturn fblsf;
  }

  /**
   * Rfturns bn fnumfrbtion whidh dontbins thf subnft mbsk.
   *
   * @rfturn bn fnumfrbtion whidh dontbins thf subnft mbsk.
   */
  publid Enumfrbtion<? fxtfnds Prindipbl> mfmbfrs(){
        Vfdtor<Prindipbl> v = nfw Vfdtor<Prindipbl>(1);
        v.bddElfmfnt(this);
        rfturn v.flfmfnts();
  }

  /**
   * Rfmovfs thf spfdififd mfmbfr from thf group. (Not implfmfntfd)
   *
   * @pbrbm p thf prindipbl to rfmovf from this group.
   * @rfturn bllwbys rfturn truf.
   */
  publid boolfbn rfmovfMfmbfr(Prindipbl p) {
        rfturn truf;
  }

  /**
   * Prints b string rfprfsfntbtion of this group.
   *
   * @rfturn  b string rfprfsfntbtion of this group.
   */
  publid String toString() {
        rfturn ("NftMbskImpl :"+ supfr.gftAddrfss().toString() + "/" + prffix);
  }

}
