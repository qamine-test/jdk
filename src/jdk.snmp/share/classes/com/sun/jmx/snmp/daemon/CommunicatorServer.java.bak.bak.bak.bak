/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf dom.sun.jmx.snmp.dbfmon;



// jbvb import
//
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.nft.InftAddrfss;
import jbvb.util.logging.Lfvfl;
import jbvb.util.Vfdtor;
import jbvb.util.NoSudhElfmfntExdfption;

// jmx import
//
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.MBfbnRfgistrbtion;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import jbvbx.mbnbgfmfnt.NotifidbtionListfnfr;
import jbvbx.mbnbgfmfnt.NotifidbtionFiltfr;
import jbvbx.mbnbgfmfnt.NotifidbtionBrobddbstfr;
import jbvbx.mbnbgfmfnt.NotifidbtionBrobddbstfrSupport;
import jbvbx.mbnbgfmfnt.MBfbnNotifidbtionInfo;
import jbvbx.mbnbgfmfnt.AttributfChbngfNotifidbtion;
import jbvbx.mbnbgfmfnt.ListfnfrNotFoundExdfption;

import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.SNMP_ADAPTOR_LOGGER;

// JSR 160 import
//
// XXX Rfvisit:
//   usfd to import dom.sun.jmx.snmp.MBfbnSfrvfrForwbrdfr
// Now using JSR 160 instfbd. => this is bn bdditionbl
// dfpfndfndy to JSR 160.
//
import jbvbx.mbnbgfmfnt.rfmotf.MBfbnSfrvfrForwbrdfr;

/**
 * Dffinfs gfnfrid bfhbvior for thf sfrvfr pbrt of b donnfdtor or bn bdbptor.
 * Most donnfdtors or bdbptors fxtfnd <CODE>CommunidbtorSfrvfr</CODE>
 * bnd inhfrit this bfhbvior. Connfdtors or bdbptors thbt do not fit into
 * this modfl do not fxtfnd <CODE>CommunidbtorSfrvfr</CODE>.
 * <p>
 * A <CODE>CommunidbtorSfrvfr</CODE> is bn bdtivf objfdt, it listfns for
 * dlifnt rfqufsts  bnd prodfssfs thfm in its own thrfbd. Whfn nfdfssbry, b
 * <CODE>CommunidbtorSfrvfr</CODE> drfbtfs othfr thrfbds to prodfss multiplf
 * rfqufsts dondurrfntly.
 * <p>
 * A <CODE>CommunidbtorSfrvfr</CODE> objfdt dbn bf stoppfd by dblling thf
 * <CODE>stop</CODE> mfthod. Whfn it is stoppfd, thf
 * <CODE>CommunidbtorSfrvfr</CODE> no longfr listfns to dlifnt rfqufsts bnd
 * no longfr holds bny thrfbd or dommunidbtion rfsourdfs.
 * It dbn bf stbrtfd bgbin by dblling thf <CODE>stbrt</CODE> mfthod.
 * <p>
 * A <CODE>CommunidbtorSfrvfr</CODE> hbs b <CODE>Stbtf</CODE> bttributf
 * whidh rfflfdts its  bdtivity.
 * <p>
 * <TABLE>
 * <TR><TH>CommunidbtorSfrvfr</TH>      <TH>Stbtf</TH></TR>
 * <TR><TD><CODE>stoppfd</CODE></TD>    <TD><CODE>OFFLINE</CODE></TD></TR>
 * <TR><TD><CODE>stbrting</CODE></TD>    <TD><CODE>STARTING</CODE></TD></TR>
 * <TR><TD><CODE>running</CODE></TD>     <TD><CODE>ONLINE</CODE></TD></TR>
 * <TR><TD><CODE>stopping</CODE></TD>     <TD><CODE>STOPPING</CODE></TD></TR>
 * </TABLE>
 * <p>
 * Thf <CODE>STARTING</CODE> stbtf mbrks thf trbnsition
 * from <CODE>OFFLINE</CODE> to <CODE>ONLINE</CODE>.
 * <p>
 * Thf <CODE>STOPPING</CODE> stbtf mbrks thf trbnsition from
 * <CODE>ONLINE</CODE> to <CODE>OFFLINE</CODE>. This oddurs whfn thf
 * <CODE>CommunidbtorSfrvfr</CODE> is finishing or intfrrupting bdtivf
 * rfqufsts.
 * <p>
 * Whfn b <CODE>CommunidbtorSfrvfr</CODE> is unrfgistfrfd from thf MBfbnSfrvfr,
 * it is stoppfd butombtidblly.
 * <p>
 * Whfn thf vbluf of thf <CODE>Stbtf</CODE> bttributf dhbngfs thf
 * <CODE>CommunidbtorSfrvfr</CODE> sfnds b
 * <tt>{@link jbvbx.mbnbgfmfnt.AttributfChbngfNotifidbtion}</tt> to thf
 * rfgistfrfd listfnfrs, if bny.
 *
 * <p><b>This API is b Sun Midrosystfms intfrnbl API  bnd is subjfdt
 * to dhbngf without notidf.</b></p>
 */

publid bbstrbdt dlbss CommunidbtorSfrvfr
    implfmfnts Runnbblf, MBfbnRfgistrbtion, NotifidbtionBrobddbstfr,
               CommunidbtorSfrvfrMBfbn {

    //
    // Stbtfs of b CommunidbtorSfrvfr
    //

    /**
     * Rfprfsfnts bn <CODE>ONLINE</CODE> stbtf.
     */
    publid stbtid finbl int ONLINE = 0 ;

    /**
     * Rfprfsfnts bn <CODE>OFFLINE</CODE> stbtf.
     */
    publid stbtid finbl int OFFLINE = 1 ;

    /**
     * Rfprfsfnts b <CODE>STOPPING</CODE> stbtf.
     */
    publid stbtid finbl int STOPPING = 2 ;

    /**
     * Rfprfsfnts b <CODE>STARTING</CODE> stbtf.
     */
    publid stbtid finbl int STARTING = 3 ;

    //
    // Typfs of donnfdtors.
    //

    /**
     * Indidbtfs thbt it is bn RMI donnfdtor typf.
     */
    //publid stbtid finbl int RMI_TYPE = 1 ;

    /**
     * Indidbtfs thbt it is bn HTTP donnfdtor typf.
     */
    //publid stbtid finbl int HTTP_TYPE = 2 ;

    /**
     * Indidbtfs thbt it is bn HTML donnfdtor typf.
     */
    //publid stbtid finbl int HTML_TYPE = 3 ;

    /**
     * Indidbtfs thbt it is bn SNMP donnfdtor typf.
     */
    publid stbtid finbl int SNMP_TYPE = 4 ;

    /**
     * Indidbtfs thbt it is bn HTTPS donnfdtor typf.
     */
    //publid stbtid finbl int HTTPS_TYPE = 5 ;

    //
    // Pbdkbgf vbribblfs
    //

    /**
     * Thf stbtf of thf donnfdtor sfrvfr.
     */
     trbnsifnt volbtilf int stbtf = OFFLINE ;

    /**
     * Thf objfdt nbmf of thf donnfdtor sfrvfr.
     * @sfribl
     */
    ObjfdtNbmf objfdtNbmf ;

    MBfbnSfrvfr topMBS;
    MBfbnSfrvfr bottomMBS;

    /**
     */
    trbnsifnt String dbgTbg = null ;

    /**
     * Thf mbximum numbfr of dlifnts thbt thf CommunidbtorSfrvfr dbn
     * prodfss dondurrfntly.
     * @sfribl
     */
    int mbxAdtivfClifntCount = 1 ;

    /**
     */
    trbnsifnt int sfrvfdClifntCount = 0 ;

    /**
     * Thf host nbmf usfd by this CommunidbtorSfrvfr.
     * @sfribl
     */
    String host = null ;

    /**
     * Thf port numbfr usfd by this CommunidbtorSfrvfr.
     * @sfribl
     */
    int port = -1 ;


    //
    // Privbtf fiflds
    //

    /* This objfdt dontrols bddfss to thf "stbtf" bnd "intfrruptfd" vbribblfs.
       If hfld bt thf sbmf timf bs thf lodk on "this", thf "this" lodk must
       bf tbkfn first.  */
    privbtf trbnsifnt Objfdt stbtfLodk = nfw Objfdt();

    privbtf trbnsifnt Vfdtor<ClifntHbndlfr>
            dlifntHbndlfrVfdtor = nfw Vfdtor<>() ;

    privbtf trbnsifnt Thrfbd mbinThrfbd = null ;

    privbtf volbtilf boolfbn stopRfqufstfd = fblsf ;
    privbtf boolfbn intfrruptfd = fblsf;
    privbtf trbnsifnt Exdfption stbrtExdfption = null;

    // Notifs dount, brobddbstfr bnd info
    privbtf trbnsifnt long notifCount = 0;
    privbtf trbnsifnt NotifidbtionBrobddbstfrSupport notifBrobddbstfr =
        nfw NotifidbtionBrobddbstfrSupport();
    privbtf trbnsifnt MBfbnNotifidbtionInfo[] notifInfos = null;


    /**
     * Instbntibtfs b <CODE>CommunidbtorSfrvfr</CODE>.
     *
     * @pbrbm donnfdtorTypf Indidbtfs thf donnfdtor typf. Possiblf vblufs brf:
     * SNMP_TYPE.
     *
     * @fxdfption <CODE>jbvb.lbng.IllfgblArgumfntExdfption</CODE>
     *            This donnfdtor typf is not dorrfdt.
     */
    publid CommunidbtorSfrvfr(int donnfdtorTypf)
        throws IllfgblArgumfntExdfption {
        switdh (donnfdtorTypf) {
        dbsf SNMP_TYPE :
            //No op. int Typf dfdiding dfbugging rfmovfd.
            brfbk;
        dffbult:
            throw nfw IllfgblArgumfntExdfption("Invblid donnfdtor Typf") ;
        }
        dbgTbg = mbkfDfbugTbg() ;
    }

    protfdtfd Thrfbd drfbtfMbinThrfbd() {
        rfturn nfw Thrfbd (this, mbkfThrfbdNbmf());
    }

    /**
     * Stbrts this <CODE>CommunidbtorSfrvfr</CODE>.
     * <p>
     * Hbs no ffffdt if this <CODE>CommunidbtorSfrvfr</CODE> is
     * <CODE>ONLINE</CODE> or <CODE>STOPPING</CODE>.
     * @pbrbm timfout Timf in ms to wbit for thf donnfdtor to stbrt.
     *        If <dodf>timfout</dodf> is positivf, wbit for bt most
     *        thf spfdififd timf. An infinitf timfout dbn bf spfdififd
     *        by pbssing b <dodf>timfout</dodf> vbluf fqubls
     *        <dodf>Long.MAX_VALUE</dodf>. In thbt dbsf thf mfthod
     *        will wbit until thf donnfdtor stbrts or fbils to stbrt.
     *        If timfout is nfgbtivf or zfro, rfturns bs soon bs possiblf
     *        without wbiting.
     * @fxdfption CommunidbtionExdfption if thf donnfdtors fbils to stbrt.
     * @fxdfption IntfrruptfdExdfption if thf thrfbd is intfrruptfd or thf
     *            timfout fxpirfs.
     */
    publid void stbrt(long timfout)
        throws CommunidbtionExdfption, IntfrruptfdExdfption {
        boolfbn stbrt;

        syndhronizfd (stbtfLodk) {
            if (stbtf == STOPPING) {
                // Fix for bug 4352451:
                //     "jbvb.nft.BindExdfption: Addrfss in usf".
                wbitStbtf(OFFLINE, 60000);
            }
            stbrt = (stbtf == OFFLINE);
            if (stbrt) {
                dhbngfStbtf(STARTING);
                stopRfqufstfd = fblsf;
                intfrruptfd = fblsf;
                stbrtExdfption = null;
            }
        }

        if (!stbrt) {
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "stbrt","Connfdtor is not OFFLINE");
            }
            rfturn;
        }

        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "stbrt","--> Stbrt donnfdtor ");
        }

        mbinThrfbd = drfbtfMbinThrfbd();

        mbinThrfbd.stbrt() ;

        if (timfout > 0) wbitForStbrt(timfout);
    }

    /**
     * Stbrts this <CODE>CommunidbtorSfrvfr</CODE>.
     * <p>
     * Hbs no ffffdt if this <CODE>CommunidbtorSfrvfr</CODE> is
     * <CODE>ONLINE</CODE> or <CODE>STOPPING</CODE>.
     */
    @Ovfrridf
    publid void stbrt() {
        try {
            stbrt(0);
        } dbtdh (IntfrruptfdExdfption x) {
            // dbnnot hbppfn bfdbusf of `0'
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "stbrt","intfrruptfd", x);
            }
        }
    }

    /**
     * Stops this <CODE>CommunidbtorSfrvfr</CODE>.
     * <p>
     * Hbs no ffffdt if this <CODE>CommunidbtorSfrvfr</CODE> is
     * <CODE>OFFLINE</CODE> or  <CODE>STOPPING</CODE>.
     */
    @Ovfrridf
    publid void stop() {
        syndhronizfd (stbtfLodk) {
            if (stbtf == OFFLINE || stbtf == STOPPING) {
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                        "stop","Connfdtor is not ONLINE");
                }
                rfturn;
            }
            dhbngfStbtf(STOPPING);
            //
            // Stop thf donnfdtor thrfbd
            //
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "stop","Intfrrupt mbin thrfbd");
            }
            stopRfqufstfd = truf ;
            if (!intfrruptfd) {
                intfrruptfd = truf;
                mbinThrfbd.intfrrupt();
            }
        }

        //
        // Cbll tfrminbtf on fbdh bdtivf dlifnt hbndlfr
        //
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "stop","tfrminbtfAllClifnt");
        }
        tfrminbtfAllClifnt() ;

        // ----------------------
        // dhbngfStbtf
        // ----------------------
        syndhronizfd (stbtfLodk) {
            if (stbtf == STARTING)
                dhbngfStbtf(OFFLINE);
        }
    }

    /**
     * Tfsts whfthfr thf <CODE>CommunidbtorSfrvfr</CODE> is bdtivf.
     *
     * @rfturn Truf if donnfdtor is <CODE>ONLINE</CODE>; fblsf othfrwisf.
     */
    @Ovfrridf
    publid boolfbn isAdtivf() {
        syndhronizfd (stbtfLodk) {
            rfturn (stbtf == ONLINE);
        }
    }

    /**
     * <p>Wbits until fithfr thf Stbtf bttributf of this MBfbn fqubls thf
     * spfdififd <VAR>wbntfdStbtf</VAR> pbrbmftfr,
     * or thf spfdififd  <VAR>timfOut</VAR> hbs flbpsfd.
     * Thf mfthod <CODE>wbitStbtf</CODE> rfturns with b boolfbn vbluf
     * indidbting whfthfr thf spfdififd <VAR>wbntfdStbtf</VAR> pbrbmftfr
     * fqubls thf vbluf of this MBfbn's Stbtf bttributf bt thf timf thf mfthod
     * tfrminbtfs.</p>
     *
     * <p>Two spfdibl dbsfs for thf <VAR>timfOut</VAR> pbrbmftfr vbluf brf:</p>
     * <UL><LI> if <VAR>timfOut</VAR> is nfgbtivf thfn <CODE>wbitStbtf</CODE>
     *     rfturns immfdibtfly (i.f. dofs not wbit bt bll),</LI>
     * <LI> if <VAR>timfOut</VAR> fqubls zfro thfn <CODE>wbitStbtf</CODE>
     *     wbits untill thf vbluf of this MBfbn's Stbtf bttributf
     *     is thf sbmf bs thf <VAR>wbntfdStbtf</VAR> pbrbmftfr (i.f. will wbit
     *     indffinitfly if this dondition is nfvfr mft).</LI></UL>
     *
     * @pbrbm wbntfdStbtf Thf vbluf of this MBfbn's Stbtf bttributf to wbit
     *        for. <VAR>wbntfdStbtf</VAR> dbn bf onf of:
     * <ul>
     * <li><CODE>CommunidbtorSfrvfr.OFFLINE</CODE>,</li>
     * <li><CODE>CommunidbtorSfrvfr.ONLINE</CODE>,</li>
     * <li><CODE>CommunidbtorSfrvfr.STARTING</CODE>,</li>
     * <li><CODE>CommunidbtorSfrvfr.STOPPING</CODE>.</li>
     * </ul>
     * @pbrbm timfOut Thf mbximum timf to wbit for, in millisfdonds,
     *        if positivf.
     * Infinitf timf out if 0, or no wbiting bt bll if nfgbtivf.
     *
     * @rfturn truf if thf vbluf of this MBfbn's Stbtf bttributf is thf
     *      sbmf bs thf <VAR>wbntfdStbtf</VAR> pbrbmftfr; fblsf othfrwisf.
     */
    @Ovfrridf
    publid boolfbn wbitStbtf(int wbntfdStbtf, long timfOut) {
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "wbitStbtf", wbntfdStbtf + "(0on,1off,2st) TO=" + timfOut +
                  " ; durrfnt stbtf = " + gftStbtfString());
        }

        long fndTimf = 0;
        if (timfOut > 0)
            fndTimf = Systfm.durrfntTimfMillis() + timfOut;

        syndhronizfd (stbtfLodk) {
            whilf (stbtf != wbntfdStbtf) {
                if (timfOut < 0) {
                    if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                        SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                            "wbitStbtf", "timfOut < 0, rfturn without wbit");
                    }
                    rfturn fblsf;
                } flsf {
                    try {
                        if (timfOut > 0) {
                            long toWbit = fndTimf - Systfm.durrfntTimfMillis();
                            if (toWbit <= 0) {
                                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                                        "wbitStbtf", "timfd out");
                                }
                                rfturn fblsf;
                            }
                            stbtfLodk.wbit(toWbit);
                        } flsf {  // timfOut == 0
                            stbtfLodk.wbit();
                        }
                    } dbtdh (IntfrruptfdExdfption f) {
                        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                                "wbitStbtf", "wbit intfrruptfd");
                        }
                        rfturn (stbtf == wbntfdStbtf);
                    }
                }
            }
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "wbitStbtf","rfturning in dfsirfd stbtf");
            }
            rfturn truf;
        }
    }

    /**
     * <p>Wbits until thf dommunidbtor is stbrtfd or timfout fxpirfs.
     *
     * @pbrbm timfout Timf in ms to wbit for thf donnfdtor to stbrt.
     *        If <dodf>timfout</dodf> is positivf, wbit for bt most
     *        thf spfdififd timf. An infinitf timfout dbn bf spfdififd
     *        by pbssing b <dodf>timfout</dodf> vbluf fqubls
     *        <dodf>Long.MAX_VALUE</dodf>. In thbt dbsf thf mfthod
     *        will wbit until thf donnfdtor stbrts or fbils to stbrt.
     *        If timfout is nfgbtivf or zfro, rfturns bs soon bs possiblf
     *        without wbiting.
     *
     * @fxdfption CommunidbtionExdfption if thf donnfdtors fbils to stbrt.
     * @fxdfption IntfrruptfdExdfption if thf thrfbd is intfrruptfd or thf
     *            timfout fxpirfs.
     *
     */
    privbtf void wbitForStbrt(long timfout)
        throws CommunidbtionExdfption, IntfrruptfdExdfption {
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "wbitForStbrt", "Timfout=" + timfout +
                 " ; durrfnt stbtf = " + gftStbtfString());
        }

        finbl long stbrtTimf = Systfm.durrfntTimfMillis();

        syndhronizfd (stbtfLodk) {
            whilf (stbtf == STARTING) {
                // Timf flbpsfd sindf stbrtTimf...
                //
                finbl long flbpsfd = Systfm.durrfntTimfMillis() - stbrtTimf;

                // wbit for timfout - flbpsfd.
                // A timfout of Long.MAX_VALUE is fquivblfnt to somfthing
                // likf 292271023 yfbrs - whidh is prftty dlosf to
                // forfvfr bs fbr bs wf brf dondfrnfd ;-)
                //
                finbl long rfmbiningTimf = timfout-flbpsfd;

                // If rfmbiningTimf is nfgbtivf, thf timfout hbs flbpsfd.
                //
                if (rfmbiningTimf < 0) {
                    if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                        SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                            "wbitForStbrt", "timfout < 0, rfturn without wbit");
                    }
                    throw nfw IntfrruptfdExdfption("Timfout fxpirfd");
                }

                // Wf'rf going to wbit until somfonf notififs on thf
                // thf stbtfLodk objfdt, or until thf timfout fxpirfs,
                // or until thf thrfbd is intfrruptfd.
                //
                try {
                    stbtfLodk.wbit(rfmbiningTimf);
                } dbtdh (IntfrruptfdExdfption f) {
                    if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                        SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                            "wbitForStbrt", "wbit intfrruptfd");
                    }

                    // If wf brf now ONLINE, thfn no nffd to rfthrow thf
                    // fxdfption... wf'rf simply going to fxit thf whilf
                    // loop. Othfrwisf, throw thf IntfrruptfdExdfption.
                    //
                    if (stbtf != ONLINE) throw f;
                }
            }

            // Wf'rf no longfr in STARTING stbtf
            //
            if (stbtf == ONLINE) {
                // OK, wf'rf stbrtfd, fvfrything wfnt finf, just rfturn
                //
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                        "wbitForStbrt", "stbrtfd");
                }
                rfturn;
            } flsf if (stbrtExdfption instbndfof CommunidbtionExdfption) {
                // Thfrf wbs somf fxdfption during thf stbrting phbsf.
                // Cbst bnd throw...
                //
                throw (CommunidbtionExdfption)stbrtExdfption;
            } flsf if (stbrtExdfption instbndfof IntfrruptfdExdfption) {
                // Thfrf wbs somf fxdfption during thf stbrting phbsf.
                // Cbst bnd throw...
                //
                throw (IntfrruptfdExdfption)stbrtExdfption;
            } flsf if (stbrtExdfption != null) {
                // Thfrf wbs somf fxdfption during thf stbrting phbsf.
                // Wrbp bnd throw...
                //
                throw nfw CommunidbtionExdfption(stbrtExdfption,
                                                 "Fbilfd to stbrt: "+
                                                 stbrtExdfption);
            } flsf {
                // Wf'rf not ONLINE, bnd thfrf's no fxdfption...
                // Somfthing wfnt wrong but wf don't know whbt...
                //
                throw nfw CommunidbtionExdfption("Fbilfd to stbrt: stbtf is "+
                                                 gftStringForStbtf(stbtf));
            }
        }
    }

    /**
     * Gfts thf stbtf of this <CODE>CommunidbtorSfrvfr</CODE> bs bn intfgfr.
     *
     * @rfturn <CODE>ONLINE</CODE>, <CODE>OFFLINE</CODE>,
     *         <CODE>STARTING</CODE> or <CODE>STOPPING</CODE>.
     */
    @Ovfrridf
    publid int gftStbtf() {
        syndhronizfd (stbtfLodk) {
            rfturn stbtf ;
        }
    }

    /**
     * Gfts thf stbtf of this <CODE>CommunidbtorSfrvfr</CODE> bs b string.
     *
     * @rfturn Onf of thf strings "ONLINE", "OFFLINE", "STARTING" or
     *         "STOPPING".
     */
    @Ovfrridf
    publid String gftStbtfString() {
        rfturn gftStringForStbtf(stbtf) ;
    }

    /**
     * Gfts thf host nbmf usfd by this <CODE>CommunidbtorSfrvfr</CODE>.
     *
     * @rfturn Thf host nbmf usfd by this <CODE>CommunidbtorSfrvfr</CODE>.
     */
    @Ovfrridf
    publid String gftHost() {
        try {
            host = InftAddrfss.gftLodblHost().gftHostNbmf();
        } dbtdh (Exdfption f) {
            host = "Unknown host";
        }
        rfturn host ;
    }

    /**
     * Gfts thf port numbfr usfd by this <CODE>CommunidbtorSfrvfr</CODE>.
     *
     * @rfturn Thf port numbfr usfd by this <CODE>CommunidbtorSfrvfr</CODE>.
     */
    @Ovfrridf
    publid int gftPort() {
        syndhronizfd (stbtfLodk) {
            rfturn port ;
        }
    }

    /**
     * Sfts thf port numbfr usfd by this <CODE>CommunidbtorSfrvfr</CODE>.
     *
     * @pbrbm port Thf port numbfr usfd by this
     *             <CODE>CommunidbtorSfrvfr</CODE>.
     *
     * @fxdfption jbvb.lbng.IllfgblStbtfExdfption This mfthod hbs bffn invokfd
     * whilf thf dommunidbtor wbs ONLINE or STARTING.
     */
    @Ovfrridf
    publid void sftPort(int port) throws jbvb.lbng.IllfgblStbtfExdfption {
        syndhronizfd (stbtfLodk) {
            if ((stbtf == ONLINE) || (stbtf == STARTING))
                throw nfw IllfgblStbtfExdfption("Stop sfrvfr bfforf " +
                                                "dbrrying out this opfrbtion");
            this.port = port;
            dbgTbg = mbkfDfbugTbg();
        }
    }

    /**
     * Gfts thf protodol bfing usfd by this <CODE>CommunidbtorSfrvfr</CODE>.
     * @rfturn Thf protodol bs b string.
     */
    @Ovfrridf
    publid bbstrbdt String gftProtodol();

    /**
     * Gfts thf numbfr of dlifnts thbt hbvf bffn prodfssfd by this
     * <CODE>CommunidbtorSfrvfr</CODE>  sindf its drfbtion.
     *
     * @rfturn Thf numbfr of dlifnts hbndlfd by this
     *         <CODE>CommunidbtorSfrvfr</CODE>
     *         sindf its drfbtion. This dountfr is not rfsft by thf
     *         <CODE>stop</CODE> mfthod.
     */
    int gftSfrvfdClifntCount() {
        rfturn sfrvfdClifntCount ;
    }

    /**
     * Gfts thf numbfr of dlifnts durrfntly bfing prodfssfd by this
     * <CODE>CommunidbtorSfrvfr</CODE>.
     *
     * @rfturn Thf numbfr of dlifnts durrfntly bfing prodfssfd by this
     *         <CODE>CommunidbtorSfrvfr</CODE>.
     */
    int gftAdtivfClifntCount() {
        int rfsult = dlifntHbndlfrVfdtor.sizf() ;
        rfturn rfsult ;
    }

    /**
     * Gfts thf mbximum numbfr of dlifnts thbt this
     * <CODE>CommunidbtorSfrvfr</CODE> dbn  prodfss dondurrfntly.
     *
     * @rfturn Thf mbximum numbfr of dlifnts thbt this
     *         <CODE>CommunidbtorSfrvfr</CODE> dbn
     *         prodfss dondurrfntly.
     */
    int gftMbxAdtivfClifntCount() {
        rfturn mbxAdtivfClifntCount ;
    }

    /**
     * Sfts thf mbximum numbfr of dlifnts this
     * <CODE>CommunidbtorSfrvfr</CODE> dbn prodfss dondurrfntly.
     *
     * @pbrbm d Thf numbfr of dlifnts.
     *
     * @fxdfption jbvb.lbng.IllfgblStbtfExdfption This mfthod hbs bffn invokfd
     * whilf thf dommunidbtor wbs ONLINE or STARTING.
     */
    void sftMbxAdtivfClifntCount(int d)
        throws jbvb.lbng.IllfgblStbtfExdfption {
        syndhronizfd (stbtfLodk) {
            if ((stbtf == ONLINE) || (stbtf == STARTING)) {
                throw nfw IllfgblStbtfExdfption(
                          "Stop sfrvfr bfforf dbrrying out this opfrbtion");
            }
            mbxAdtivfClifntCount = d ;
        }
    }

    /**
     * For SNMP Runtimf intfrnbl usf only.
     */
    void notifyClifntHbndlfrCrfbtfd(ClifntHbndlfr h) {
        dlifntHbndlfrVfdtor.bddElfmfnt(h) ;
    }

    /**
     * For SNMP Runtimf intfrnbl usf only.
     */
    syndhronizfd void notifyClifntHbndlfrDflftfd(ClifntHbndlfr h) {
        dlifntHbndlfrVfdtor.rfmovfElfmfnt(h);
        notifyAll();
    }

    /**
     * Thf numbfr of timfs thf dommunidbtor sfrvfr will bttfmpt
     * to bind bfforf giving up.
     **/
    protfdtfd int gftBindTrifs() {
        rfturn 50;
    }

    /**
     * Thf dflby, in ms, during whidh thf dommunidbtor sfrvfr will slffp bfforf
     * bttfmpting to bind bgbin.
     **/
    protfdtfd long gftBindSlffpTimf() {
        rfturn 100;
    }

    /**
     * For SNMP Runtimf intfrnbl usf only.
     * <p>
     * Thf <CODE>run</CODE> mfthod fxfdutfd by this donnfdtor's mbin thrfbd.
     */
    @Ovfrridf
    publid void run() {

        // Fix jbw.00667.B
        // It sffms thbt thf init of "i" bnd "suddfss"
        // nffd to bf donf outsidf thf "try" dlbusf...
        // A bug in Jbvb 2 produdtion rflfbsf ?
        //
        int i = 0;
        boolfbn suddfss = fblsf;

        // ----------------------
        // Bind
        // ----------------------
        try {
            // Fix for bug 4352451: "jbvb.nft.BindExdfption: Addrfss in usf".
            //
            finbl int  bindRftrifs = gftBindTrifs();
            finbl long slffpTimf   = gftBindSlffpTimf();
            whilf (i < bindRftrifs && !suddfss) {
                try {
                    // Try sodkft donnfdtion.
                    //
                    doBind();
                    suddfss = truf;
                } dbtdh (CommunidbtionExdfption df) {
                    i++;
                    try {
                        Thrfbd.slffp(slffpTimf);
                    } dbtdh (IntfrruptfdExdfption if) {
                        throw if;
                    }
                }
            }
            // Rftry lbst timf to gft dorrfdt fxdfption.
            //
            if (!suddfss) {
                // Try sodkft donnfdtion.
                //
                doBind();
            }

        } dbtdh(Exdfption x) {
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                    "run", "Got unfxpfdtfd fxdfption", x);
            }
            syndhronizfd(stbtfLodk) {
                stbrtExdfption = x;
                dhbngfStbtf(OFFLINE);
            }
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "run","Stbtf is OFFLINE");
            }
            doError(x);
            rfturn;
        }

        try {
            // ----------------------
            // Stbtf dhbngf
            // ----------------------
            dhbngfStbtf(ONLINE) ;
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "run","Stbtf is ONLINE");
            }

            // ----------------------
            // Mbin loop
            // ----------------------
            whilf (!stopRfqufstfd) {
                sfrvfdClifntCount++;
                doRfdfivf() ;
                wbitIfTooMbnyClifnts() ;
                doProdfss() ;
            }
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "run","Stop hbs bffn rfqufstfd");
            }

        } dbtdh(IntfrruptfdExdfption x) {
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                    "run","Intfrrupt dbught");
            }
            dhbngfStbtf(STOPPING);
        } dbtdh(Exdfption x) {
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                    "run","Got unfxpfdtfd fxdfption", x);
            }
            dhbngfStbtf(STOPPING);
        } finblly {
            syndhronizfd (stbtfLodk) {
                intfrruptfd = truf;
                Thrfbd.intfrruptfd();
            }

            // ----------------------
            // unBind
            // ----------------------
            try {
                doUnbind() ;
                wbitClifntTfrminbtion() ;
                dhbngfStbtf(OFFLINE);
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                        "run","Stbtf is OFFLINE");
                }
            } dbtdh(Exdfption x) {
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                        "run","Got unfxpfdtfd fxdfption", x);
                }
                dhbngfStbtf(OFFLINE);
            }

        }
    }

    /**
     */
    protfdtfd bbstrbdt void doError(Exdfption f) throws CommunidbtionExdfption;

    //
    // To bf dffinfd by thf subdlbss.
    //
    // Ebdh mfthod bflow is dbllfd by run() bnd must bf subdlbssfd.
    // If thf mfthod sfnds bn fxdfption (Communidbtion or Intfrrupt), this
    // will fnd up thf run() mfthod bnd switdh thf donnfdtor offlinf.
    //
    // If it is b CommunidbtionExdfption, run() will dbll
    //       Dfbug.printExdfption().
    //
    // All thfsf mfthods should propbgbtf thf IntfrruptfdExdfption to inform
    // run() thbt thf donnfdtor must bf switdh OFFLINE.
    //
    //
    //
    // doBind() should do bll whbt is nffdfd bfforf dblling doRfdfivf().
    // If doBind() throws bn fxdfption, doUnbind() is not to bf dbllfd
    // bnd run() fnds up.
    //

    /**
     */
    protfdtfd bbstrbdt void doBind()
        throws CommunidbtionExdfption, IntfrruptfdExdfption ;

    /**
     * <CODE>doRfdfivf()</CODE> should blodk until b dlifnt is bvbilbblf.
     * If this mfthod throws bn fxdfption, <CODE>doProdfss()</CODE> is not
     * dbllfd but <CODE>doUnbind()</CODE> is dbllfd thfn <CODE>run()</CODE>
     * stops.
     */
    protfdtfd bbstrbdt void doRfdfivf()
        throws CommunidbtionExdfption, IntfrruptfdExdfption ;

    /**
     * <CODE>doProdfss()</CODE> is dbllfd bftfr <CODE>doRfdfivf()</CODE>:
     * it should prodfss thf rfqufsts of thf indoming dlifnt.
     * If it throws bn fxdfption, <CODE>doUnbind()</CODE> is dbllfd bnd
     * <CODE>run()</CODE> stops.
     */
    protfdtfd bbstrbdt void doProdfss()
        throws CommunidbtionExdfption, IntfrruptfdExdfption ;

    /**
     * <CODE>doUnbind()</CODE> is dbllfd whfnfvfr thf donnfdtor gofs
     * <CODE>OFFLINE</CODE>, fxdfpt if <CODE>doBind()</CODE> hbs thrown bn
     * fxdfption.
     */
    protfdtfd bbstrbdt void doUnbind()
        throws CommunidbtionExdfption, IntfrruptfdExdfption ;

    /**
     * Gft thf <dodf>MBfbnSfrvfr</dodf> objfdt to whidh indoming rfqufsts brf
     * sfnt.  This is fithfr thf MBfbn sfrvfr in whidh this donnfdtor is
     * rfgistfrfd, or bn <dodf>MBfbnSfrvfrForwbrdfr</dodf> lfbding to thbt
     * sfrvfr.
     */
    publid syndhronizfd MBfbnSfrvfr gftMBfbnSfrvfr() {
        rfturn topMBS;
    }

    /**
     * Sft thf <dodf>MBfbnSfrvfr</dodf> objfdt to whidh indoming
     * rfqufsts brf sfnt.  This must bf fithfr thf MBfbn sfrvfr in
     * whidh this donnfdtor is rfgistfrfd, or bn
     * <dodf>MBfbnSfrvfrForwbrdfr</dodf> lfbding to thbt sfrvfr.  An
     * <dodf>MBfbnSfrvfrForwbrdfr</dodf> <dodf>mbsf</dodf> lfbds to bn
     * MBfbn sfrvfr <dodf>mbs</dodf> if
     * <dodf>mbsf.gftMBfbnSfrvfr()</dodf> is fithfr <dodf>mbs</dodf>
     * or bn <dodf>MBfbnSfrvfrForwbrdfr</dodf> lfbding to
     * <dodf>mbs</dodf>.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>nfwMBS</dodf> is nfithfr
     * thf MBfbn sfrvfr in whidh this donnfdtor is rfgistfrfd nor bn
     * <dodf>MBfbnSfrvfrForwbrdfr</dodf> lfbding to thbt sfrvfr.
     *
     * @fxdfption IllfgblStbtfExdfption This mfthod hbs bffn invokfd
     * whilf thf dommunidbtor wbs ONLINE or STARTING.
     */
    publid syndhronizfd void sftMBfbnSfrvfr(MBfbnSfrvfr nfwMBS)
            throws IllfgblArgumfntExdfption, IllfgblStbtfExdfption {
        syndhronizfd (stbtfLodk) {
            if (stbtf == ONLINE || stbtf == STARTING)
                throw nfw IllfgblStbtfExdfption("Stop sfrvfr bfforf " +
                                                "dbrrying out this opfrbtion");
        }
        finbl String frror =
            "MBfbnSfrvfr brgumfnt must bf MBfbn sfrvfr whfrf this " +
            "sfrvfr is rfgistfrfd, or bn MBfbnSfrvfrForwbrdfr " +
            "lfbding to thbt sfrvfr";
        Vfdtor<MBfbnSfrvfr> sffnMBS = nfw Vfdtor<>();
        for (MBfbnSfrvfr mbs = nfwMBS;
             mbs != bottomMBS;
             mbs = ((MBfbnSfrvfrForwbrdfr) mbs).gftMBfbnSfrvfr()) {
            if (!(mbs instbndfof MBfbnSfrvfrForwbrdfr))
                throw nfw IllfgblArgumfntExdfption(frror);
            if (sffnMBS.dontbins(mbs))
                throw nfw IllfgblArgumfntExdfption("MBfbnSfrvfrForwbrdfr " +
                                                   "loop");
            sffnMBS.bddElfmfnt(mbs);
        }
        topMBS = nfwMBS;
    }

    //
    // To bf dbllfd by thf subdlbss if nffdfd
    //
    /**
     * For intfrnbl usf only.
     */
    ObjfdtNbmf gftObjfdtNbmf() {
        rfturn objfdtNbmf ;
    }

    /**
     * For intfrnbl usf only.
     */
    void dhbngfStbtf(int nfwStbtf) {
        int oldStbtf;
        syndhronizfd (stbtfLodk) {
            if (stbtf == nfwStbtf)
                rfturn;
            oldStbtf = stbtf;
            stbtf = nfwStbtf;
            stbtfLodk.notifyAll();
        }
        sfndStbtfChbngfNotifidbtion(oldStbtf, nfwStbtf);
    }

    /**
     * Rfturns thf string usfd in dfbug trbdfs.
     */
    String mbkfDfbugTbg() {
        rfturn "CommunidbtorSfrvfr["+ gftProtodol() + ":" + gftPort() + "]" ;
    }

    /**
     * Rfturns thf string usfd to nbmf thf donnfdtor thrfbd.
     */
    String mbkfThrfbdNbmf() {
        String rfsult ;

        if (objfdtNbmf == null)
            rfsult = "CommunidbtorSfrvfr" ;
        flsf
            rfsult = objfdtNbmf.toString() ;

        rfturn rfsult ;
    }

    /**
     * This mfthod blodks if thfrf brf too mbny bdtivf dlifnts.
     * Cbll to <CODE>wbit()</CODE> is tfrminbtfd whfn b dlifnt hbndlfr
     * thrfbd dblls <CODE>notifyClifntHbndlfrDflftfd(this)</CODE> ;
     */
    privbtf syndhronizfd void wbitIfTooMbnyClifnts()
        throws IntfrruptfdExdfption {
        whilf (gftAdtivfClifntCount() >= mbxAdtivfClifntCount) {
            if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "wbitIfTooMbnyClifnts","Wbiting for b dlifnt to tfrminbtf");
            }
            wbit();
        }
    }

    /**
     * This mfthod blodks until thfrf is no morf bdtivf dlifnt.
     */
    privbtf void wbitClifntTfrminbtion() {
        int s = dlifntHbndlfrVfdtor.sizf() ;
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            if (s >= 1) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                "wbitClifntTfrminbtion","wbiting for " +
                      s + " dlifnts to tfrminbtf");
            }
        }

        // Thf ClifntHbndlfr will rfmovf thfmsflvfs from thf
        // dlifntHbndlfrVfdtor bt thf fnd of thfir run() mfthod, by
        // dblling notifyClifntHbndlfrDflftfd().
        // Sindf thf dlifntHbndlfrVfdtor is modififd by thf ClifntHbndlfr
        // thrfbds wf must bvoid using Enumfrbtion or Itfrbtor to loop
        // ovfr this brrby. Wf must blso tbkf dbrf of NoSudhElfmfntExdfption
        // whidh dould bf thrown if thf lbst ClifntHbndlfr rfmovfs itsflf
        // bftwffn thf dbll to dlifntHbndlfrVfdtor.isEmpty() bnd thf dbll
        // to dlifntHbndlfrVfdtor.firstElfmfnt().
        // Whbt wf *MUST NOT DO* is lodking thf dlifntHbndlfrVfdtor, bfdbusf
        // this would most probbbly dbusf b dfbdlodk.
        //
        whilf (! dlifntHbndlfrVfdtor.isEmpty()) {
            try {
                dlifntHbndlfrVfdtor.firstElfmfnt().join();
            } dbtdh (NoSudhElfmfntExdfption x) {
                if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                    SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                        "wbitClifntTfrminbtion","No flfmfnts lfft",  x);
                }
            }
        }

        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            if (s >= 1) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "wbitClifntTfrminbtion","Ok, lft's go...");
            }
        }
    }

    /**
     * Cbll <CODE>intfrrupt()</CODE> on fbdh pfnding dlifnt.
     */
    privbtf void tfrminbtfAllClifnt() {
        finbl int s = dlifntHbndlfrVfdtor.sizf() ;
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            if (s >= 1) {
                SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                    "tfrminbtfAllClifnt","Intfrrupting " + s + " dlifnts");
            }
        }

        // Thf ClifntHbndlfr will rfmovf thfmsflvfs from thf
        // dlifntHbndlfrVfdtor bt thf fnd of thfir run() mfthod, by
        // dblling notifyClifntHbndlfrDflftfd().
        // Sindf thf dlifntHbndlfrVfdtor is modififd by thf ClifntHbndlfr
        // thrfbds wf must bvoid using Enumfrbtion or Itfrbtor to loop
        // ovfr this brrby.
        // Wf dbnnot usf thf sbmf logid hfrf thbn in wbitClifntTfrminbtion()
        // bfdbusf thfrf is no gubrbntff thbt dblling intfrrupt() on thf
        // ClifntHbndlfr will bdtublly tfrminbtf thf ClifntHbndlfr.
        // Sindf wf do not wbnt to wbit for thf bdtubl ClifntHbndlfr
        // tfrminbtion, wf dbnnot simply loop ovfr thf brrby until it is
        // fmpty (this might rfsult in dblling intfrrupt() fndlfssly on
        // thf sbmf dlifnt hbndlfr. So whbt wf do is simply tbkf b snbpshot
        // dopy of thf vfdtor bnd loop ovfr thf dopy.
        // Whbt wf *MUST NOT DO* is lodking thf dlifntHbndlfrVfdtor, bfdbusf
        // this would most probbbly dbusf b dfbdlodk.
        //
        finbl  ClifntHbndlfr[] hbndlfrs =
                dlifntHbndlfrVfdtor.toArrby(nfw ClifntHbndlfr[0]);
         for (ClifntHbndlfr h : hbndlfrs) {
             try {
                 h.intfrrupt() ;
             } dbtdh (Exdfption x) {
                 if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                     SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINER, dbgTbg,
                             "tfrminbtfAllClifnt",
                             "Fbilfd to intfrrupt pfnding rfqufst. " +
                             "Ignorf thf fxdfption.", x);
                 }
            }
        }
    }

    /**
     * Controls thf wby thf CommunidbtorSfrvfr sfrvidf is dfsfriblizfd.
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm strfbm)
        throws IOExdfption, ClbssNotFoundExdfption {

        // Cbll thf dffbult dfsfriblizbtion of thf objfdt.
        //
        strfbm.dffbultRfbdObjfdt();

        // Cbll thf spfdifid initiblizbtion for thf CommunidbtorSfrvfr sfrvidf.
        // This is for trbnsifnt strudturfs to bf initiblizfd to spfdifid
        // dffbult vblufs.
        //
        stbtfLodk = nfw Objfdt();
        stbtf = OFFLINE;
        stopRfqufstfd = fblsf;
        sfrvfdClifntCount = 0;
        dlifntHbndlfrVfdtor = nfw Vfdtor<>();
        mbinThrfbd = null;
        notifCount = 0;
        notifInfos = null;
        notifBrobddbstfr = nfw NotifidbtionBrobddbstfrSupport();
        dbgTbg = mbkfDfbugTbg();
    }


    //
    // NotifidbtionBrobddbstfr
    //

    /**
     * Adds b listfnfr for thf notifidbtions fmittfd by this
     * CommunidbtorSfrvfr.
     * Thfrf is only onf typf of notifidbtions sfnt by thf CommunidbtorSfrvfr:
     * thfy brf <tt>{@link jbvbx.mbnbgfmfnt.AttributfChbngfNotifidbtion}</tt>,
     * sfnt whfn thf <tt>Stbtf</tt> bttributf of this CommunidbtorSfrvfr
     * dhbngfs.
     *
     * @pbrbm listfnfr Thf listfnfr objfdt whidh will hbndlf thf fmittfd
     *        notifidbtions.
     * @pbrbm filtfr Thf filtfr objfdt. If filtfr is null, no filtfring
     *        will bf pfrformfd bfforf hbndling notifidbtions.
     * @pbrbm hbndbbdk An objfdt whidh will bf sfnt bbdk undhbngfd to thf
     *        listfnfr whfn b notifidbtion is fmittfd.
     *
     * @fxdfption IllfgblArgumfntExdfption Listfnfr pbrbmftfr is null.
     */
    @Ovfrridf
    publid void bddNotifidbtionListfnfr(NotifidbtionListfnfr listfnfr,
                                        NotifidbtionFiltfr filtfr,
                                        Objfdt hbndbbdk)
        throws jbvb.lbng.IllfgblArgumfntExdfption {

        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                "bddNotifidbtionListfnfr","Adding listfnfr "+ listfnfr +
                  " with filtfr "+ filtfr + " bnd hbndbbdk "+ hbndbbdk);
        }
        notifBrobddbstfr.bddNotifidbtionListfnfr(listfnfr, filtfr, hbndbbdk);
    }

    /**
     * Rfmovfs thf spfdififd listfnfr from this CommunidbtorSfrvfr.
     * Notf thbt if thf listfnfr hbs bffn rfgistfrfd with difffrfnt
     * hbndbbdk objfdts or notifidbtion filtfrs, bll fntrifs dorrfsponding
     * to thf listfnfr will bf rfmovfd.
     *
     * @pbrbm listfnfr Thf listfnfr objfdt to bf rfmovfd.
     *
     * @fxdfption ListfnfrNotFoundExdfption Thf listfnfr is not rfgistfrfd.
     */
    @Ovfrridf
    publid void rfmovfNotifidbtionListfnfr(NotifidbtionListfnfr listfnfr)
        throws ListfnfrNotFoundExdfption {

        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                "rfmovfNotifidbtionListfnfr","Rfmoving listfnfr "+ listfnfr);
        }
        notifBrobddbstfr.rfmovfNotifidbtionListfnfr(listfnfr);
    }

    /**
     * Rfturns bn brrby of MBfbnNotifidbtionInfo objfdts dfsdribing
     * thf notifidbtion typfs sfnt by this CommunidbtorSfrvfr.
     * Thfrf is only onf typf of notifidbtions sfnt by thf CommunidbtorSfrvfr:
     * it is <tt>{@link jbvbx.mbnbgfmfnt.AttributfChbngfNotifidbtion}</tt>,
     * sfnt whfn thf <tt>Stbtf</tt> bttributf of this CommunidbtorSfrvfr
     * dhbngfs.
     */
    @Ovfrridf
    publid MBfbnNotifidbtionInfo[] gftNotifidbtionInfo() {

        // Initiblizf notifInfos on first dbll to gftNotifidbtionInfo()
        //
        if (notifInfos == null) {
            notifInfos = nfw MBfbnNotifidbtionInfo[1];
            String[] notifTypfs = {
                AttributfChbngfNotifidbtion.ATTRIBUTE_CHANGE};
            notifInfos[0] = nfw MBfbnNotifidbtionInfo( notifTypfs,
                     AttributfChbngfNotifidbtion.dlbss.gftNbmf(),
                     "Sfnt to notify thbt thf vbluf of thf Stbtf bttributf "+
                     "of this CommunidbtorSfrvfr instbndf hbs dhbngfd.");
        }

        rfturn notifInfos.dlonf();
    }

    /**
     *
     */
    privbtf void sfndStbtfChbngfNotifidbtion(int oldStbtf, int nfwStbtf) {

        String oldStbtfString = gftStringForStbtf(oldStbtf);
        String nfwStbtfString = gftStringForStbtf(nfwStbtf);
        String mfssbgf = nfw StringBufffr().bppfnd(dbgTbg)
            .bppfnd(" Thf vbluf of bttributf Stbtf hbs dhbngfd from ")
            .bppfnd(oldStbtf).bppfnd(" (").bppfnd(oldStbtfString)
            .bppfnd(") to ").bppfnd(nfwStbtf).bppfnd(" (")
            .bppfnd(nfwStbtfString).bppfnd(").").toString();

        notifCount++;
        AttributfChbngfNotifidbtion notif =
            nfw AttributfChbngfNotifidbtion(this,    // sourdf
                         notifCount,                 // sfqufndf numbfr
                         Systfm.durrfntTimfMillis(), // timf stbmp
                         mfssbgf,                    // mfssbgf
                         "Stbtf",                    // bttributf nbmf
                         "int",                      // bttributf typf
                         oldStbtf,                   // old vbluf
                         nfwStbtf );                 // nfw vbluf
        if (SNMP_ADAPTOR_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
            SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST, dbgTbg,
                "sfndStbtfChbngfNotifidbtion","Sfnding AttributfChbngfNotifidbtion #"
                    + notifCount + " with mfssbgf: "+ mfssbgf);
        }
        notifBrobddbstfr.sfndNotifidbtion(notif);
    }

    /**
     *
     */
    privbtf stbtid String gftStringForStbtf(int s) {
        switdh (s) {
        dbsf ONLINE:   rfturn "ONLINE";
        dbsf STARTING: rfturn "STARTING";
        dbsf OFFLINE:  rfturn "OFFLINE";
        dbsf STOPPING: rfturn "STOPPING";
        dffbult:       rfturn "UNDEFINED";
        }
    }


    //
    // MBfbnRfgistrbtion
    //

    /**
     * Prfrfgistfr mfthod of donnfdtor.
     *
     *@pbrbm sfrvfr Thf <CODE>MBfbnSfrvfr</CODE> in whidh thf MBfbn will
     *       bf rfgistfrfd.
     *@pbrbm nbmf Thf objfdt nbmf of thf MBfbn.
     *
     *@rfturn  Thf nbmf of thf MBfbn rfgistfrfd.
     *
     *@fxdfption jbvb.lbngExdfption This fxdfption should bf dbught by
     *           thf <CODE>MBfbnSfrvfr</CODE> bnd rf-thrown
     *           bs bn <CODE>MBfbnRfgistrbtionExdfption</CODE>.
     */
    @Ovfrridf
    publid ObjfdtNbmf prfRfgistfr(MBfbnSfrvfr sfrvfr, ObjfdtNbmf nbmf)
            throws jbvb.lbng.Exdfption {
        objfdtNbmf = nbmf;
        syndhronizfd (this) {
            if (bottomMBS != null) {
                throw nfw IllfgblArgumfntExdfption("donnfdtor blrfbdy " +
                                                   "rfgistfrfd in bn MBfbn " +
                                                   "sfrvfr");
            }
            topMBS = bottomMBS = sfrvfr;
        }
        dbgTbg = mbkfDfbugTbg();
        rfturn nbmf;
    }

    /**
     *
     *@pbrbm rfgistrbtionDonf Indidbtfs whfthfr or not thf MBfbn hbs bffn
     *       suddfssfully rfgistfrfd in thf <CODE>MBfbnSfrvfr</CODE>.
     *       Thf vbluf fblsf mfbns thbt thf rfgistrbtion phbsf hbs fbilfd.
     */
    @Ovfrridf
    publid void postRfgistfr(Boolfbn rfgistrbtionDonf) {
        if (!rfgistrbtionDonf.boolfbnVbluf()) {
            syndhronizfd (this) {
                topMBS = bottomMBS = null;
            }
        }
    }

    /**
     * Stop thf donnfdtor.
     *
     * @fxdfption jbvb.lbngExdfption This fxdfption should bf dbught by
     *            thf <CODE>MBfbnSfrvfr</CODE> bnd rf-thrown
     *            bs bn <CODE>MBfbnRfgistrbtionExdfption</CODE>.
     */
    @Ovfrridf
    publid void prfDfrfgistfr() throws jbvb.lbng.Exdfption {
        syndhronizfd (this) {
            topMBS = bottomMBS = null;
        }
        objfdtNbmf = null ;
        finbl int dstbtf = gftStbtf();
        if ((dstbtf == ONLINE) || ( dstbtf == STARTING)) {
            stop() ;
        }
    }

    /**
     * Do nothing.
     */
    @Ovfrridf
    publid void postDfrfgistfr(){
    }

}
