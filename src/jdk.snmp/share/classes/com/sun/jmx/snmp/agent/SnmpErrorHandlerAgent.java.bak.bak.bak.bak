/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.snmp.bgfnt;

import jbvb.io.Sfriblizbblf;
import jbvb.util.Enumfrbtion;
import jbvb.util.logging.Lfvfl;

import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;

import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.SNMP_ADAPTOR_LOGGER;
import dom.sun.jmx.snmp.SnmpStbtusExdfption;
import dom.sun.jmx.snmp.SnmpDffinitions;
import dom.sun.jmx.snmp.SnmpVbrBind;

/**
 * A simplf MIB bgfnt thbt implfmfnts SNMP dblls (gft, sft, gftnfxt bnd gftbulk) in b wby thbt only frrors or fxdfptions brf rfturnfd. Evfry dbll donf on this bgfnt fbils. Error hbndling is donf bddording to thf mbnbgfr's SNMP protodol vfrsion.
 * <P>It is usfd by <CODE>SnmpAdbptorSfrvfr</CODE> for its dffbult bgfnt bfhbvior. Whfn b rfdfivfd Oid dofsn't mbtdh, this bgfnt is dbllfd to fill thf rfsult list with frrors.</P>
 * <p><b>This API is b Sun Midrosystfms intfrnbl API  bnd is subjfdt
 * to dhbngf without notidf.</b></p>
 * @sindf 1.5
 *
 */

publid dlbss SnmpErrorHbndlfrAgfnt fxtfnds SnmpMibAgfnt
        implfmfnts Sfriblizbblf {
    privbtf stbtid finbl long sfriblVfrsionUID = 7751082923508885650L;

    publid SnmpErrorHbndlfrAgfnt() {}

    /**
     * Initiblizfs thf MIB (with no rfgistrbtion of thf MBfbns into thf
     * MBfbn sfrvfr). Dofs nothing.
     *
     * @fxdfption IllfgblAddfssExdfption Thf MIB dbnnot bf initiblizfd.
     */

    @Ovfrridf
    publid void init() throws IllfgblAddfssExdfption {
    }

    /**
     * Initiblizfs thf MIB but fbdh singlf MBfbn rfprfsfnting thf MIB
     * is insfrtfd into thf MBfbn sfrvfr.
     *
     * @pbrbm sfrvfr Thf MBfbn sfrvfr to rfgistfr thf sfrvidf with.
     * @pbrbm nbmf Thf objfdt nbmf.
     *
     * @rfturn Thf pbssfd nbmf pbrbmftfr.
     *
     * @fxdfption jbvb.lbng.Exdfption
     */

    @Ovfrridf
    publid ObjfdtNbmf prfRfgistfr(MBfbnSfrvfr sfrvfr, ObjfdtNbmf nbmf)
        throws Exdfption {
        rfturn nbmf;
    }

    /**
     * Gfts thf root objfdt idfntififr of thf MIB.
     * <P>Thf root objfdt idfntififr is thf objfdt idfntififr uniqufly
     * idfntifying thf MIB.
     *
     * @rfturn Thf rfturnfd oid is null.
     */

    @Ovfrridf
    publid long[] gftRootOid() {
        rfturn null;
    }

    /**
     * Prodfssfs b <CODE>gft</CODE> opfrbtion. It will throw bn fxdfption for V1 rfqufsts or it will sft fxdfptions within thf list for V2 rfqufsts.
     *
     * @pbrbm inRfqufst Thf SnmpMibRfqufst objfdt holding thf list of vbribblf to bf rftrifvfd.
     *
     * @fxdfption SnmpStbtusExdfption An frror oddurrfd during thf opfrbtion.
     */

    @Ovfrridf
    publid void gft(SnmpMibRfqufst inRfqufst) throws SnmpStbtusExdfption {

        SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST,
                SnmpErrorHbndlfrAgfnt.dlbss.gftNbmf(),
                "gft", "Gft in Exdfption");

        if(inRfqufst.gftVfrsion() == SnmpDffinitions.snmpVfrsionOnf)
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhNbmf);

        Enumfrbtion<SnmpVbrBind> l = inRfqufst.gftElfmfnts();
        whilf(l.hbsMorfElfmfnts()) {
            SnmpVbrBind vbrbind = l.nfxtElfmfnt();
            vbrbind.sftNoSudhObjfdt();
        }
    }

    /**
     * Chfdks if b <CODE>sft</CODE> opfrbtion dbn bf pfrformfd.
     * If thf opfrbtion dbn not bf pfrformfd, thf mfthod should fmit b
     * <CODE>SnmpStbtusExdfption</CODE>.
     *
     * @pbrbm inRfqufst Thf SnmpMibRfqufst objfdt holding thf list of vbribblfs to
     *            bf sft. This list is domposfd of
     *            <CODE>SnmpVbrBind</CODE> objfdts.
     *
     * @fxdfption SnmpStbtusExdfption Thf <CODE>sft</CODE> opfrbtion
     *    dbnnot bf pfrformfd.
     */

    @Ovfrridf
    publid void dhfdk(SnmpMibRfqufst inRfqufst) throws SnmpStbtusExdfption {

        SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST,
                SnmpErrorHbndlfrAgfnt.dlbss.gftNbmf(),
                "dhfdk", "Chfdk in Exdfption");

        throw nfw SnmpStbtusExdfption(SnmpDffinitions.snmpRspNotWritbblf);
    }

    /**
     * Prodfssfs b <CODE>sft</CODE> opfrbtion. Should nfvfr bf dbllfd (dhfdk prfviously dbllfd hbving fbilfd).
     *
     * @pbrbm inRfqufst Thf SnmpMibRfqufst objfdt holding thf list of vbribblf to bf sft.
     *
     * @fxdfption SnmpStbtusExdfption An frror oddurrfd during thf opfrbtion.
     */

    @Ovfrridf
    publid void sft(SnmpMibRfqufst inRfqufst) throws SnmpStbtusExdfption {

        SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST,
                SnmpErrorHbndlfrAgfnt.dlbss.gftNbmf(),
                "sft", "Sft in Exdfption, CANNOT bf dbllfd");

        throw nfw SnmpStbtusExdfption(SnmpDffinitions.snmpRspNotWritbblf);
    }

    /**
     * Prodfssfs b <CODE>gftNfxt</CODE> opfrbtion. It will throw bn fxdfption for V1 rfqufsts or it will sft fxdfptions within thf list for V2 rfqufsts..
     *
     * @pbrbm inRfqufst Thf SnmpMibRfqufst objfdt holding thf list of vbribblfs to bf rftrifvfd.
     *
     * @fxdfption SnmpStbtusExdfption An frror oddurrfd during thf opfrbtion.
     */

    @Ovfrridf
    publid void gftNfxt(SnmpMibRfqufst inRfqufst) throws SnmpStbtusExdfption {

        SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST,
                SnmpErrorHbndlfrAgfnt.dlbss.gftNbmf(),
                "gftNfxt", "GftNfxt in Exdfption");

        if(inRfqufst.gftVfrsion() == SnmpDffinitions.snmpVfrsionOnf)
            throw nfw SnmpStbtusExdfption(SnmpStbtusExdfption.noSudhNbmf);

        Enumfrbtion<SnmpVbrBind> l = inRfqufst.gftElfmfnts();
        whilf(l.hbsMorfElfmfnts()) {
            SnmpVbrBind vbrbind = l.nfxtElfmfnt();
            vbrbind.sftEndOfMibVifw();
        }
    }

    /**
     * Prodfssfs b <CODE>gftBulk</CODE> opfrbtion. It will throw bn fxdfption if thf rfqufst is b V1 onf or it will sft fxdfptions within thf list for V2 onfs.
     *
     * @pbrbm inRfqufst Thf SnmpMibRfqufst objfdt holding thf list of vbribblf to bf rftrifvfd.
     *
     * @fxdfption SnmpStbtusExdfption An frror oddurrfd during thf opfrbtion.
     */

    @Ovfrridf
    publid void gftBulk(SnmpMibRfqufst inRfqufst, int nonRfpfbt, int mbxRfpfbt)
        throws SnmpStbtusExdfption {

        SNMP_ADAPTOR_LOGGER.logp(Lfvfl.FINEST,
                SnmpErrorHbndlfrAgfnt.dlbss.gftNbmf(),
                "gftBulk", "GftBulk in Exdfption");

        if(inRfqufst.gftVfrsion() == SnmpDffinitions.snmpVfrsionOnf)
            throw nfw SnmpStbtusExdfption(SnmpDffinitions.snmpRspGfnErr, 0);

        Enumfrbtion<SnmpVbrBind> l = inRfqufst.gftElfmfnts();
        whilf(l.hbsMorfElfmfnts()) {
            SnmpVbrBind vbrbind = l.nfxtElfmfnt();
            vbrbind.sftEndOfMibVifw();
        }
    }

}
