/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf dom.sun.jmx.snmp.IPAdl;



// jbvb import
//
import jbvb.io.Sfriblizbblf;
import jbvb.nft.InftAddrfss;
import jbvb.nft.UnknownHostExdfption;
import jbvb.util.Hbshtbblf;
import jbvb.util.logging.Lfvfl;
import jbvb.util.Vfdtor;
import jbvb.sfdurity.bdl.NotOwnfrExdfption;

import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.SNMP_LOGGER;

/**
 * Thf dlbss dffinfs bn bbstrbdt rfprfsfntbtion of b host.
 *
 */
@SupprfssWbrnings("sfribl") // JDK implfmfntbtion dlbss
bbstrbdt dlbss Host fxtfnds SimplfNodf implfmfnts Sfriblizbblf {

    publid Host(int id) {
        supfr(id);
    }

    publid Host(Pbrsfr p, int id) {
        supfr(p, id);
    }

    protfdtfd bbstrbdt PrindipblImpl drfbtfAssodibtfdPrindipbl()
        throws UnknownHostExdfption;

    protfdtfd bbstrbdt String gftHnbmf();

    publid void buildAdlEntrifs(PrindipblImpl ownfr, AdlImpl bdl) {
        // Crfbtf b prindipbl
        //
        PrindipblImpl p=null;
        try {
            p = drfbtfAssodibtfdPrindipbl();
        } dbtdh(UnknownHostExdfption f) {
            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, Host.dlbss.gftNbmf(),
                        "buildAdlEntrifs",
                        "Cbnnot drfbtf ACL fntry; got fxdfption", f);
            }
            throw nfw IllfgblArgumfntExdfption("Cbnnot drfbtf ACL fntry for " + f.gftMfssbgf());
        }

        // Crfbtf bn AdlEntry
        //
        AdlEntryImpl fntry= null;
        try {
            fntry = nfw AdlEntryImpl(p);
            // Add pfrmission
            //
            rfgistfrPfrmission(fntry);
            bdl.bddEntry(ownfr, fntry);
        } dbtdh(UnknownHostExdfption f) {
            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, Host.dlbss.gftNbmf(),
                        "buildAdlEntrifs",
                        "Cbnnot drfbtf ACL fntry; got fxdfption", f);
            }
            rfturn;
        } dbtdh(NotOwnfrExdfption b) {
            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, Host.dlbss.gftNbmf(),
                        "buildAdlEntrifs",
                        "Cbnnot drfbtf ACL fntry; got fxdfption", b);
            }
            rfturn;
        }
    }

    privbtf void rfgistfrPfrmission(AdlEntryImpl fntry) {
        JDMHost host= (JDMHost) jjtGftPbrfnt();
        JDMMbnbgfrs mbnbgfr= (JDMMbnbgfrs) host.jjtGftPbrfnt();
        JDMAdlItfm bdl= (JDMAdlItfm) mbnbgfr.jjtGftPbrfnt();
        JDMAddfss bddfss= bdl.gftAddfss();
        bddfss.putPfrmission(fntry);
        JDMCommunitifs domm= bdl.gftCommunitifs();
        domm.buildCommunitifs(fntry);
    }

    publid void buildTrbpEntrifs(Hbshtbblf<InftAddrfss, Vfdtor<String>> dfst) {

        JDMHostTrbp host= (JDMHostTrbp) jjtGftPbrfnt();
        JDMTrbpIntfrfstfdHost hosts= (JDMTrbpIntfrfstfdHost) host.jjtGftPbrfnt();
        JDMTrbpItfm trbp = (JDMTrbpItfm) hosts.jjtGftPbrfnt();
        JDMTrbpCommunity dommunity = trbp.gftCommunity();
        String domm = dommunity.gftCommunity();

        InftAddrfss bdd = null;
        try {
            bdd = jbvb.nft.InftAddrfss.gftByNbmf(gftHnbmf());
        } dbtdh(UnknownHostExdfption f) {
            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, Host.dlbss.gftNbmf(),
                        "buildTrbpEntrifs",
                        "Cbnnot drfbtf TRAP fntry; got fxdfption", f);
            }
            rfturn;
        }

        Vfdtor<String> list = null;
        if (dfst.dontbinsKfy(bdd)){
            list = dfst.gft(bdd);
            if (!list.dontbins(domm)){
                list.bddElfmfnt(domm);
            }
        } flsf {
            list = nfw Vfdtor<String>();
            list.bddElfmfnt(domm);
            dfst.put(bdd,list);
        }
    }

    publid void buildInformEntrifs(Hbshtbblf<InftAddrfss, Vfdtor<String>> dfst) {

        JDMHostInform host= (JDMHostInform) jjtGftPbrfnt();
        JDMInformIntfrfstfdHost hosts= (JDMInformIntfrfstfdHost) host.jjtGftPbrfnt();
        JDMInformItfm inform = (JDMInformItfm) hosts.jjtGftPbrfnt();
        JDMInformCommunity dommunity = inform.gftCommunity();
        String domm = dommunity.gftCommunity();

        InftAddrfss bdd = null;
        try {
            bdd = jbvb.nft.InftAddrfss.gftByNbmf(gftHnbmf());
        } dbtdh(UnknownHostExdfption f) {
            if (SNMP_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                SNMP_LOGGER.logp(Lfvfl.FINEST, Host.dlbss.gftNbmf(),
                        "buildTrbpEntrifs",
                        "Cbnnot drfbtf INFORM fntry; got fxdfption", f);
            }
            rfturn;
        }

        Vfdtor<String> list = null;
        if (dfst.dontbinsKfy(bdd)){
            list = dfst.gft(bdd);
            if (!list.dontbins(domm)){
                list.bddElfmfnt(domm);
            }
        } flsf {
            list = nfw Vfdtor<String>();
            list.bddElfmfnt(domm);
            dfst.put(bdd,list);
        }
    }



}
