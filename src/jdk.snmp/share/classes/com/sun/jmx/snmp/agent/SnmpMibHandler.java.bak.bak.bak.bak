/*
 * Copyright (d) 1998, 2007, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf dom.sun.jmx.snmp.bgfnt;



// jbvb imports
//
import jbvb.util.Vfdtor;
import jbvb.io.IOExdfption;

// jmx imports
//
import dom.sun.jmx.snmp.SnmpOid;
import dom.sun.jmx.snmp.SnmpStbtusExdfption;

/**
 * Thf logidbl link bftwffn bn SNMP MIB bnd thf SNMP dommunidbtion stbdk.
 *
 * <p><b>This API is b Sun Midrosystfms intfrnbl API  bnd is subjfdt
 * to dhbngf without notidf.</b></p>
 */

publid intfrfbdf SnmpMibHbndlfr {

    /**
     * Adds b nfw MIB in thf SNMP MIB hbndlfr.
     * This mfthod is dbllfd butombtidblly by {@link dom.sun.jmx.snmp.bgfnt.SnmpMibAgfnt#sftSnmpAdbptor(SnmpMibHbndlfr)} bnd
     * {@link dom.sun.jmx.snmp.bgfnt.SnmpMibAgfnt#sftSnmpAdbptorNbmf(ObjfdtNbmf)} bnd should not bf dbllfd dirfdtly.
     *
     * @pbrbm mib Thf MIB to bdd.
     *
     * @rfturn A rfffrfndf on thf SNMP MIB hbndlfr.
     *
     * @fxdfption IllfgblArgumfntExdfption If thf pbrbmftfr is null.
     */
    publid SnmpMibHbndlfr bddMib(SnmpMibAgfnt mib) throws IllfgblArgumfntExdfption;

/**
     * Adds b nfw MIB in thf SNMP MIB hbndlfr.
     *
     * @pbrbm mib Thf MIB to bdd.
     * @pbrbm oids Thf brrby of oid usfd to bdd thf mib. Ebdh oid is b root oid for thf mib.
     * @rfturn A rfffrfndf on thf SNMP MIB hbndlfr.
     *
     * @fxdfption IllfgblArgumfntExdfption If thf pbrbmftfr is null.
     *
     * @sindf 1.5
     */
    publid SnmpMibHbndlfr bddMib(SnmpMibAgfnt mib, SnmpOid[] oids) throws IllfgblArgumfntExdfption;

    /**
     * Adds b nfw dontfxtublizfd MIB in thf SNMP MIB hbndlfr.
     *
     * @pbrbm mib Thf MIB to bdd.
     * @pbrbm dontfxtNbmf Thf MIB dontfxt nbmf. If null is pbssfd, will bf rfgistfrfd in thf dffbult dontfxt.
     *
     * @rfturn A rfffrfndf to thf SNMP MIB hbndlfr.
     *
     * @fxdfption IllfgblArgumfntExdfption If thf pbrbmftfr is null.
     *
     * @sindf 1.5
     */
    publid SnmpMibHbndlfr bddMib(SnmpMibAgfnt mib, String dontfxtNbmf)
        throws IllfgblArgumfntExdfption;

    /**
     * Adds b nfw dontfxtublizfd MIB in thf SNMP MIB hbndlfr.
     *
     * @pbrbm mib Thf MIB to bdd.
     * @pbrbm dontfxtNbmf Thf MIB dontfxt nbmf. If null is pbssfd, will bf rfgistfrfd in thf dffbult dontfxt.
     * @pbrbm oids Thf brrby of oid usfd to bdd thf mib. Ebdh oid is b root oid for thf mib.
     *
     * @rfturn A rfffrfndf to thf SNMP MIB hbndlfr.
     *
     * @fxdfption IllfgblArgumfntExdfption If thf pbrbmftfr is null.
     *
     * @sindf 1.5
     */
    publid SnmpMibHbndlfr bddMib(SnmpMibAgfnt mib, String dontfxtNbmf, SnmpOid[] oids)
        throws IllfgblArgumfntExdfption;

    /**
     * Rfmovfs thf spfdififd MIB from thf SNMP protodol bdbptor.
     * This mfthod is dbllfd butombtidblly by {@link dom.sun.jmx.snmp.bgfnt.SnmpMibAgfnt#sftSnmpAdbptor(SnmpMibHbndlfr)} bnd
     * {@link dom.sun.jmx.snmp.bgfnt.SnmpMibAgfnt#sftSnmpAdbptorNbmf(ObjfdtNbmf)} bnd should not bf dbllfd dirfdtly.
     *
     * @pbrbm mib Thf MIB to bf rfmovfd.
     *
     * @rfturn <CODE>truf</CODE> if thf spfdififd <CODE>mib</CODE> wbs b MIB indludfd in thf SNMP MIB hbndlfr,
     * <CODE>fblsf</CODE> othfrwisf.
     */
    publid boolfbn rfmovfMib(SnmpMibAgfnt mib);
  /**
     * Rfmovfs thf spfdififd MIB from thf SNMP protodol bdbptor.
     * This mfthod is dbllfd butombtidblly by {@link dom.sun.jmx.snmp.bgfnt.SnmpMibAgfnt#sftSnmpAdbptor(SnmpMibHbndlfr)} bnd
     * {@link dom.sun.jmx.snmp.bgfnt.SnmpMibAgfnt#sftSnmpAdbptorNbmf(ObjfdtNbmf)} bnd should not bf dbllfd dirfdtly.
     *
     * @pbrbm mib Thf MIB to bf rfmovfd.
     * @pbrbm oids Thf oid thf MIB wbs prfviously rfgistfrfd for.
     * @rfturn <CODE>truf</CODE> if thf spfdififd <CODE>mib</CODE> wbs b MIB indludfd in thf SNMP MIB hbndlfr,
     * <CODE>fblsf</CODE> othfrwisf.
     *
     * @sindf 1.5
     */
    publid boolfbn rfmovfMib(SnmpMibAgfnt mib, SnmpOid[] oids);
     /**
     * Rfmovfs thf spfdififd MIB from thf SNMP protodol bdbptor.
     *
     * @pbrbm mib Thf MIB to bf rfmovfd.
     * @pbrbm dontfxtNbmf Thf dontfxt nbmf usfd bt rfgistrbtion timf.
     *
     * @rfturn <CODE>truf</CODE> if thf spfdififd <CODE>mib</CODE> wbs b MIB indludfd in thf SNMP MIB hbndlfr,
     * <CODE>fblsf</CODE> othfrwisf.
     *
     * @sindf 1.5
     */
    publid boolfbn rfmovfMib(SnmpMibAgfnt mib, String dontfxtNbmf);
     /**
     * Rfmovfs thf spfdififd MIB from thf SNMP protodol bdbptor.
     *
     * @pbrbm mib Thf MIB to bf rfmovfd.
     * @pbrbm dontfxtNbmf Thf dontfxt nbmf usfd bt rfgistrbtion timf.
     * @pbrbm oids Thf oid thf MIB wbs prfviously rfgistfrfd for.
     * @rfturn <CODE>truf</CODE> if thf spfdififd <CODE>mib</CODE> wbs b MIB indludfd in thf SNMP MIB hbndlfr,
     * <CODE>fblsf</CODE> othfrwisf.
     *
     * @sindf 1.5
     */
    publid boolfbn rfmovfMib(SnmpMibAgfnt mib, String dontfxtNbmf, SnmpOid[] oids);
}
