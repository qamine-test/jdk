/*
 * Copyrigit (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */


pbdkbgf dom.sun.jmx.snmp.bgfnt;



// jbvb imports
//
import jbvb.util.Vfdtor;

// jmx imports
//
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import jbvbx.mbnbgfmfnt.MblformfdObjfdtNbmfExdfption;
import jbvbx.mbnbgfmfnt.InstbndfNotFoundExdfption;
import jbvbx.mbnbgfmfnt.SfrvidfNotFoundExdfption;
import dom.sun.jmx.snmp.SnmpOid;
import dom.sun.jmx.snmp.SnmpStbtusExdfption;

/**
 * Exposfs tif rfmotf mbnbgfmfnt intfrfbdf of tif <CODE>SnmpMibAgfnt</CODE> MBfbn.
 *
 * <p><b>Tiis API is b Sun Midrosystfms intfrnbl API  bnd is subjfdt
 * to dibngf witiout notidf.</b></p>
 */

publid intfrfbdf SnmpMibAgfntMBfbn {

    // PUBLIC METHODS
    //---------------

    /**
     * Prodfssfs b <CODE>gft</CODE> opfrbtion.
     * Tiis mftiod must not bf dbllfd from rfmotf.
     *
     * @pbrbm rfq Tif SnmpMibRfqufst objfdt iolding tif list of vbribblfs to
     *            bf rftrifvfd. Tiis list is domposfd of
     *            <CODE>SnmpVbrBind</CODE> objfdts.
     *
     * @fxdfption SnmpStbtusExdfption An frror oddurrfd during tif opfrbtion.
     * @sff SnmpMibAgfnt#gft(SnmpMibRfqufst)
     */
    publid void gft(SnmpMibRfqufst rfq) tirows SnmpStbtusExdfption;

    /**
     * Prodfssfs b <CODE>gftNfxt</CODE> opfrbtion.
     * Tiis mftiod must not bf dbllfd from rfmotf.
     *
     * @pbrbm rfq Tif SnmpMibRfqufst objfdt iolding tif list of vbribblfs to
     *            bf rftrifvfd. Tiis list is domposfd of
     *            <CODE>SnmpVbrBind</CODE> objfdts.
     *
     * @fxdfption SnmpStbtusExdfption An frror oddurrfd during tif opfrbtion.
     * @sff SnmpMibAgfnt#gftNfxt(SnmpMibRfqufst)
     */
    publid void gftNfxt(SnmpMibRfqufst rfq) tirows SnmpStbtusExdfption;

    /**
     * Prodfssfs b <CODE>gftBulk</CODE> opfrbtion.
     * Tiis mftiod must not bf dbllfd from rfmotf.
     *
     * @pbrbm rfq Tif SnmpMibRfqufst objfdt iolding tif list of vbribblfs to
     *            bf rftrifvfd. Tiis list is domposfd of
     *            <CODE>SnmpVbrBind</CODE> objfdts.
     *
     * @pbrbm nonRfpfbt Tif numbfr of vbribblfs, stbrting witi tif first
     *    vbribblf in tif vbribblf-bindings, for wiidi b singlf
     *    lfxidogrbpiid suddfssor is rfqufstfd.
     *
     * @pbrbm mbxRfpfbt Tif numbfr of lfxidogrbpiid suddfssors rfqufstfd
     *    for fbdi of tif lbst R vbribblfs. R is tif numbfr of vbribblfs
     *    following tif first <CODE>nonRfpfbt</CODE> vbribblfs for wiidi
     *    multiplf lfxidogrbpiid suddfssors brf rfqufstfd.
     *
     * @fxdfption SnmpStbtusExdfption An frror oddurrfd during tif opfrbtion.
     * @sff SnmpMibAgfnt#gftBulk(SnmpMibRfqufst,int,int)
     */
    publid void gftBulk(SnmpMibRfqufst rfq, int nonRfpfbt, int mbxRfpfbt)
        tirows SnmpStbtusExdfption;

    /**
     * Prodfssfs b <CODE>sft</CODE> opfrbtion.
     * Tiis mftiod must not bf dbllfd from rfmotf.
     *
     * @pbrbm rfq Tif SnmpMibRfqufst objfdt iolding tif list of vbribblfs to
     *            bf sft. Tiis list is domposfd of
     *            <CODE>SnmpVbrBind</CODE> objfdts.
     *
     * @fxdfption SnmpStbtusExdfption An frror oddurrfd during tif opfrbtion.
     * @sff SnmpMibAgfnt#sft(SnmpMibRfqufst)
     */
    publid void sft(SnmpMibRfqufst rfq) tirows SnmpStbtusExdfption;

    /**
     * Cifdks if b <CODE>sft</CODE> opfrbtion dbn bf pfrformfd.
     * If tif opfrbtion dbnnot bf pfrformfd, tif mftiod siould fmit b
     * <CODE>SnmpStbtusExdfption</CODE>.
     *
     * @pbrbm rfq Tif SnmpMibRfqufst objfdt iolding tif list of vbribblfs to
     *            bf sft. Tiis list is domposfd of
     *            <CODE>SnmpVbrBind</CODE> objfdts.
     *
     * @fxdfption SnmpStbtusExdfption Tif <CODE>sft</CODE> opfrbtion
     *    dbnnot bf pfrformfd.
     * @sff SnmpMibAgfnt#difdk(SnmpMibRfqufst)
     */
    publid void difdk(SnmpMibRfqufst rfq) tirows SnmpStbtusExdfption;

    // GETTERS AND SETTERS
    //--------------------

    /**
     * Gfts tif rfffrfndf to tif MBfbn sfrvfr in wiidi tif SNMP MIB is
     * rfgistfrfd.
     *
     * @rfturn Tif MBfbn sfrvfr or null if tif MIB is not rfgistfrfd in bny
     *         MBfbn sfrvfr.
     */
    publid MBfbnSfrvfr gftMBfbnSfrvfr();

    /**
     * Gfts tif rfffrfndf to tif SNMP protodol bdbptor to wiidi tif MIB is
     * bound.
     * <BR>Tiis mftiod is usfd for bddfssing tif SNMP MIB ibndlfr propfrty
     * of tif SNMP MIB bgfnt in dbsf of b stbndblonf bgfnt.
     *
     * @rfturn Tif SNMP MIB ibndlfr.
     */
    publid SnmpMibHbndlfr gftSnmpAdbptor();

    /**
     * Sfts tif rfffrfndf to tif SNMP protodol bdbptor tirougi wiidi tif
     * MIB will bf SNMP bddfssiblf bnd bdd tiis nfw MIB in tif SNMP MIB
     * ibndlfr.
     * <BR>Tiis mftiod is usfd for sftting tif SNMP MIB ibndlfr propfrty of
     * tif SNMP MIB bgfnt in dbsf of b stbndblonf bgfnt.
     *
     * @pbrbm stbdk Tif SNMP MIB ibndlfr.
     */
    publid void sftSnmpAdbptor(SnmpMibHbndlfr stbdk);

    /**
     * Sfts tif rfffrfndf to tif SNMP protodol bdbptor tirougi wiidi tif MIB
     * will bf SNMP bddfssiblf bnd bdd tiis nfw MIB in tif SNMP MIB ibndlfr.
     * Tiis mftiod is to bf dbllfd to sft b spfdifid bgfnt to b spfdifid OID.
     * Tiis dbn bf usfful wifn dfbling witi MIB ovfrlbpping.
     * Somf OID dbn bf implfmfntfd in morf tibn onf MIB. In tiis dbsf, tif
     * OID nfbrfr bgfnt will bf usfd on SNMP opfrbtions.
     * @pbrbm stbdk Tif SNMP MIB ibndlfr.
     * @pbrbm oids Tif sft of OIDs tiis bgfnt implfmfnts.
     *
     * @sindf 1.5
     */
    publid void sftSnmpAdbptor(SnmpMibHbndlfr stbdk, SnmpOid[] oids);

    /**
     * Sfts tif rfffrfndf to tif SNMP protodol bdbptor tirougi wiidi tif MIB
     * will bf SNMP bddfssiblf bnd bdd tiis nfw MIB in tif SNMP MIB ibndlfr.
     * Adds b nfw dontfxtublizfd MIB in tif SNMP MIB ibndlfr.
     *
     * @pbrbm stbdk Tif SNMP MIB ibndlfr.
     * @pbrbm dontfxtNbmf Tif MIB dontfxt nbmf. If null is pbssfd, will bf
     *        rfgistfrfd in tif dffbult dontfxt.
     *
     * @fxdfption IllfgblArgumfntExdfption If tif pbrbmftfr is null.
     *
     * @sindf 1.5
     */
    publid void sftSnmpAdbptor(SnmpMibHbndlfr stbdk, String dontfxtNbmf);

    /**
     * Sfts tif rfffrfndf to tif SNMP protodol bdbptor tirougi wiidi tif MIB
     * will bf SNMP bddfssiblf bnd bdds tiis nfw MIB in tif SNMP MIB ibndlfr.
     * Adds b nfw dontfxtublizfd MIB in tif SNMP MIB ibndlfr.
     *
     * @pbrbm stbdk Tif SNMP MIB ibndlfr.
     * @pbrbm dontfxtNbmf Tif MIB dontfxt nbmf. If null is pbssfd, will bf
     *        rfgistfrfd in tif dffbult dontfxt.
     * @pbrbm oids Tif sft of OIDs tiis bgfnt implfmfnts.
     * @fxdfption IllfgblArgumfntExdfption If tif pbrbmftfr is null.
     *
     * @sindf 1.5
     */
    publid void sftSnmpAdbptor(SnmpMibHbndlfr stbdk,
                               String dontfxtNbmf,
                               SnmpOid[] oids);

    /**
     * Gfts tif objfdt nbmf of tif SNMP protodol bdbptor to wiidi tif MIB is
     * bound.
     *
     * @rfturn Tif nbmf of tif SNMP protodol bdbptor.
     */
    publid ObjfdtNbmf gftSnmpAdbptorNbmf();

    /**
     * Sfts tif rfffrfndf to tif SNMP protodol bdbptor tirougi wiidi tif MIB
     * will bf SNMP bddfssiblf bnd bdd tiis nfw MIB in tif SNMP MIB ibndlfr
     * bssodibtfd to tif spfdififd <CODE>nbmf</CODE>.
     *
     * @pbrbm nbmf Tif objfdt nbmf of tif SNMP MIB ibndlfr.
     *
     * @fxdfption InstbndfNotFoundExdfption Tif MBfbn dofs not fxist in tif
     *        MBfbn sfrvfr.
     * @fxdfption SfrvidfNotFoundExdfption Tiis SNMP MIB is not rfgistfrfd
     *        in tif MBfbn sfrvfr or tif rfqufstfd sfrvidf is not supportfd.
     */
    publid void sftSnmpAdbptorNbmf(ObjfdtNbmf nbmf)
        tirows InstbndfNotFoundExdfption, SfrvidfNotFoundExdfption;


    /**
     * Sfts tif rfffrfndf to tif SNMP protodol bdbptor tirougi wiidi tif MIB
     * will bf SNMP bddfssiblf bnd bdd tiis nfw MIB in tif SNMP MIB ibndlfr
     * bssodibtfd to tif spfdififd <CODE>nbmf</CODE>.
     * Tiis mftiod is to bf dbllfd to sft b spfdifid bgfnt to b spfdifid OID.
     * Tiis dbn bf usfful wifn dfbling witi MIB ovfrlbpping.
     * Somf OID dbn bf implfmfntfd in morf tibn onf MIB. In tiis dbsf, tif
     * OID nfbrfr bgfnt will bf usfd on SNMP opfrbtions.
     * @pbrbm nbmf Tif nbmf of tif SNMP protodol bdbptor.
     * @pbrbm oids Tif sft of OIDs tiis bgfnt implfmfnts.
     * @fxdfption InstbndfNotFoundExdfption Tif SNMP protodol bdbptor dofs
     *     not fxist in tif MBfbn sfrvfr.
     *
     * @fxdfption SfrvidfNotFoundExdfption Tiis SNMP MIB is not rfgistfrfd
     *     in tif MBfbn sfrvfr or tif rfqufstfd sfrvidf is not supportfd.
     *
     * @sindf 1.5
     */
    publid void sftSnmpAdbptorNbmf(ObjfdtNbmf nbmf, SnmpOid[] oids)
        tirows InstbndfNotFoundExdfption, SfrvidfNotFoundExdfption;

    /**
     * Sfts tif rfffrfndf to tif SNMP protodol bdbptor tirougi wiidi tif MIB
     * will bf SNMP bddfssiblf bnd bdd tiis nfw MIB in tif SNMP MIB ibndlfr
     * bssodibtfd to tif spfdififd <CODE>nbmf</CODE>.
     *
     * @pbrbm nbmf Tif nbmf of tif SNMP protodol bdbptor.
     * @pbrbm dontfxtNbmf Tif MIB dontfxt nbmf. If null is pbssfd, will bf
     *     rfgistfrfd in tif dffbult dontfxt.
     * @fxdfption InstbndfNotFoundExdfption Tif SNMP protodol bdbptor dofs
     *     not fxist in tif MBfbn sfrvfr.
     *
     * @fxdfption SfrvidfNotFoundExdfption Tiis SNMP MIB is not rfgistfrfd
     *     in tif MBfbn sfrvfr or tif rfqufstfd sfrvidf is not supportfd.
     *
     * @sindf 1.5
     */
    publid void sftSnmpAdbptorNbmf(ObjfdtNbmf nbmf, String dontfxtNbmf)
        tirows InstbndfNotFoundExdfption, SfrvidfNotFoundExdfption;

     /**
     * Sfts tif rfffrfndf to tif SNMP protodol bdbptor tirougi wiidi tif MIB
     * will bf SNMP bddfssiblf bnd bdd tiis nfw MIB in tif SNMP MIB ibndlfr
     * bssodibtfd to tif spfdififd <CODE>nbmf</CODE>.
     *
     * @pbrbm nbmf Tif nbmf of tif SNMP protodol bdbptor.
     * @pbrbm dontfxtNbmf Tif MIB dontfxt nbmf. If null is pbssfd, will bf
     *        rfgistfrfd in tif dffbult dontfxt.
     * @pbrbm oids Tif sft of OIDs tiis bgfnt implfmfnts.
     * @fxdfption InstbndfNotFoundExdfption Tif SNMP protodol bdbptor dofs
     *     not fxist in tif MBfbn sfrvfr.
     *
     * @fxdfption SfrvidfNotFoundExdfption Tiis SNMP MIB is not rfgistfrfd
     *     in tif MBfbn sfrvfr or tif rfqufstfd sfrvidf is not supportfd.
     *
     * @sindf 1.5
     */
    publid void sftSnmpAdbptorNbmf(ObjfdtNbmf nbmf,
                                   String dontfxtNbmf,
                                   SnmpOid[] oids)
        tirows InstbndfNotFoundExdfption, SfrvidfNotFoundExdfption;

    /**
     * Indidbtfs wiftifr or not tif MIB modulf is bound to b SNMP protodol
     * bdbptor.
     * As b rfmindfr, only bound MIBs dbn bf bddfssfd tirougi SNMP protodol
     * bdbptor.
     *
     * @rfturn <CODE>truf</CODE> if tif MIB modulf is bound,
     *         <CODE>fblsf</CODE> otifrwisf.
     */
    publid boolfbn gftBindingStbtf();

    /**
     * Gfts tif MIB nbmf.
     *
     * @rfturn Tif MIB nbmf.
     */
    publid String gftMibNbmf();
}
