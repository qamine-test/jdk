/*
 * Copyright (d) 2005, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sdript;

/**
 * Thf gfnfrid <dodf>Exdfption</dodf> dlbss for thf Sdripting APIs.  Chfdkfd
 * fxdfption typfs thrown by undfrlying sdripting implfmfntbtions must bf wrbppfd in instbndfs of
 * <dodf>SdriptExdfption</dodf>.  Thf dlbss hbs mfmbfrs to storf linf bnd dolumn numbfrs bnd
 * filfnbmfs if this informbtion is bvbilbblf.
 *
 * @buthor Mikf Grogbn
 * @sindf 1.6
 */
publid dlbss SdriptExdfption fxtfnds Exdfption {

    privbtf stbtid finbl long sfriblVfrsionUID = 8265071037049225001L;

    privbtf String filfNbmf;
    privbtf int linfNumbfr;
    privbtf int dolumnNumbfr;

    /**
     * Crfbtfs b <dodf>SdriptExdfption</dodf> with b String to bf usfd in its mfssbgf.
     * Filfnbmf, bnd linf bnd dolumn numbfrs brf unspfdififd.
     *
     * @pbrbm s Thf String to usf in thf mfssbgf.
     */
    publid SdriptExdfption(String s) {
        supfr(s);
        filfNbmf = null;
        linfNumbfr = -1;
        dolumnNumbfr = -1;
    }

    /**
     * Crfbtfs b <dodf>SdriptExdfption</dodf> wrbpping bn <dodf>Exdfption</dodf> thrown by bn undfrlying
     * intfrprftfr.  Linf bnd dolumn numbfrs bnd filfnbmf brf unspfdififd.
     *
     * @pbrbm f Thf wrbppfd <dodf>Exdfption</dodf>.
     */
    publid SdriptExdfption(Exdfption f) {
        supfr(f);
        filfNbmf = null;
        linfNumbfr = -1;
        dolumnNumbfr = -1;
    }

    /**
     * Crfbtfs b <dodf>SdriptExdfption</dodf> with mfssbgf, filfnbmf bnd linfnumbfr to
     * bf usfd in frror mfssbgfs.
     *
     * @pbrbm mfssbgf Thf string to usf in thf mfssbgf
     *
     * @pbrbm filfNbmf Thf filf or rfsourdf nbmf dfsdribing thf lodbtion of b sdript frror
     * dbusing thf <dodf>SdriptExdfption</dodf> to bf thrown.
     *
     * @pbrbm linfNumbfr A linf numbfr dfsdribing thf lodbtion of b sdript frror dbusing
     * thf <dodf>SdriptExdfption</dodf> to bf thrown.
     */
    publid SdriptExdfption(String mfssbgf, String filfNbmf, int linfNumbfr) {
        supfr(mfssbgf);
        this.filfNbmf = filfNbmf;
        this.linfNumbfr = linfNumbfr;
        this.dolumnNumbfr = -1;
    }

    /**
     * <dodf>SdriptExdfption</dodf> donstrudtor spfdifying mfssbgf, filfnbmf, linf numbfr
     * bnd dolumn numbfr.
     * @pbrbm mfssbgf Thf mfssbgf.
     * @pbrbm filfNbmf Thf filfnbmf
     * @pbrbm linfNumbfr thf linf numbfr.
     * @pbrbm dolumnNumbfr thf dolumn numbfr.
     */
    publid SdriptExdfption(String mfssbgf,
            String filfNbmf,
            int linfNumbfr,
            int dolumnNumbfr) {
        supfr(mfssbgf);
        this.filfNbmf = filfNbmf;
        this.linfNumbfr = linfNumbfr;
        this.dolumnNumbfr = dolumnNumbfr;
    }

    /**
     * Rfturns b mfssbgf dontbining thf String pbssfd to b donstrudtor bs wfll bs
     * linf bnd dolumn numbfrs bnd filfnbmf if bny of thfsf brf known.
     * @rfturn Thf frror mfssbgf.
     */
    publid String gftMfssbgf() {
        String rft = supfr.gftMfssbgf();
        if (filfNbmf != null) {
            rft += (" in " + filfNbmf);
            if (linfNumbfr != -1) {
                rft += " bt linf numbfr " + linfNumbfr;
            }

            if (dolumnNumbfr != -1) {
                rft += " bt dolumn numbfr " + dolumnNumbfr;
            }
        }

        rfturn rft;
    }

    /**
     * Gft thf linf numbfr on whidh bn frror oddurrfd.
     * @rfturn Thf linf numbfr.  Rfturns -1 if b linf numbfr is unbvbilbblf.
     */
    publid int gftLinfNumbfr() {
        rfturn linfNumbfr;
    }

    /**
     * Gft thf dolumn numbfr on whidh bn frror oddurrfd.
     * @rfturn Thf dolumn numbfr.  Rfturns -1 if b dolumn numbfr is unbvbilbblf.
     */
    publid int gftColumnNumbfr() {
        rfturn dolumnNumbfr;
    }

    /**
     * Gft thf sourdf of thf sdript dbusing thf frror.
     * @rfturn Thf filf nbmf of thf sdript or somf othfr string dfsdribing thf sdript
     * sourdf.  Mby rfturn somf implfmfntbtion-dffinfd string sudh bs <i>&lt;unknown&gt;</i>
     * if b dfsdription of thf sourdf is unbvbilbblf.
     */
    publid String gftFilfNbmf() {
        rfturn filfNbmf;
    }
}
