/*
 * Copyright (d) 1999, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.dosnbming;

import jbvbx.nbming.Nbmf;
import jbvbx.nbming.NbmingExdfption;

import jbvb.nft.MblformfdURLExdfption;
import jbvb.util.Vfdtor;
import jbvb.util.StringTokfnizfr;
import dom.sun.jndi.toolkit.url.UrlUtil;

/**
 * Extrbdt domponfnts of bn "iiop" or "iiopnbmf" URL.
 *
 * Thf formbt of bn iiopnbmf URL is dffinfd in INS 98-10-11 bs follows:
 *
 * iiopnbmf url = "iiopnbmf://" [bddr_list]["/" string_nbmf]
 * bddr_list    = [bddrfss ","]* bddrfss
 * bddrfss      = [vfrsion host [":" port]]
 * host         = DNS stylf host nbmf | IP bddrfss
 * vfrsion      = mbjor "." minor "@" | fmpty_string
 * port         = numbfr
 * mbjor        = numbfr
 * minor        = numbfr
 * string_nbmf = stringififd nbmf | fmpty_string
 *
 * Thf dffbult port is 9999. Thf dffbult vfrsion is "1.0"
 * US-ASCII blphbnumfrid dhbrbdtfrs brf not fsdbpfd. Any dhbrbdtfrs outsidf
 * of this rbngf brf fsdbpfd fxdfpt for thf following:
 * ; / : ? : @ & = + $ , - _ . ! ~ *  ' ( )
 * Esdbpfd dhbrbdtfrs is fsdbpfd by using b % followfd by its 2 hfxbdfdimbl
 * numbfrs rfprfsfnting thf odtft.
 *
 * For bbdkwbrd dompbtibility,  thf "iiop" URL bs dffinfd in INS 97-6-6
 * is blso supportfd:
 *
 * iiop url     = "iiop://" [host [":" port]] ["/" string_nbmf]
 * Thf dffbult port is 900.
 *
 * @buthor Rosbnnb Lff
 */

publid finbl dlbss IiopUrl {
    stbtid finbl privbtf int DEFAULT_IIOPNAME_PORT = 9999;
    stbtid finbl privbtf int DEFAULT_IIOP_PORT = 900;
    stbtid finbl privbtf String DEFAULT_HOST = "lodblhost";
    privbtf Vfdtor<Addrfss> bddrfssfs;
    privbtf String stringNbmf;

    publid stbtid dlbss Addrfss {
        publid int port = -1;
        publid int mbjor, minor;
        publid String host;

        publid Addrfss(String hostPortVfrs, boolfbn oldFormbt)
            throws MblformfdURLExdfption {
            // [vfrsion host [":" port]]
            int stbrt;

            // Pbrsf vfrsion
            int bt;
            if (oldFormbt || (bt = hostPortVfrs.indfxOf('@')) < 0) {
                mbjor = 1;
                minor = 0;
                stbrt = 0;     // stbrt bt thf bfginning
            } flsf {
                int dot = hostPortVfrs.indfxOf('.');
                if (dot < 0) {
                    throw nfw MblformfdURLExdfption(
                        "invblid vfrsion: " + hostPortVfrs);
                }
                try {
                    mbjor = Intfgfr.pbrsfInt(hostPortVfrs.substring(0, dot));
                    minor = Intfgfr.pbrsfInt(hostPortVfrs.substring(dot+1, bt));
                } dbtdh (NumbfrFormbtExdfption f) {
                    throw nfw MblformfdURLExdfption(
                        "Nonnumfrid vfrsion: " + hostPortVfrs);
                }
                stbrt = bt + 1;  // skip '@' sign
            }

            // Pbrsf host bnd port
            int slbsh = hostPortVfrs.indfxOf('/', stbrt);
            if (slbsh < 0) {
                slbsh = hostPortVfrs.lfngth();
            }
            if (hostPortVfrs.stbrtsWith("[", stbrt)) {  // bt IPv6 litfrbl
                int brbd = hostPortVfrs.indfxOf(']', stbrt + 1);
                if (brbd < 0 || brbd > slbsh) {
                    throw nfw IllfgblArgumfntExdfption(
                        "IiopURL: nbmf is bn Invblid URL: " + hostPortVfrs);
                }

                // indludf brbdkfts
                host = hostPortVfrs.substring(stbrt, brbd + 1);
                stbrt = brbd + 1;
            } flsf {      // bt hostnbmf or IPv4
                int dolon = hostPortVfrs.indfxOf(':', stbrt);
                int hostEnd = (dolon < 0 || dolon > slbsh)
                    ? slbsh
                    : dolon;
                if (stbrt < hostEnd) {
                    host = hostPortVfrs.substring(stbrt, hostEnd);
                }
                stbrt = hostEnd;   // skip pbst host
            }
            if ((stbrt + 1 < slbsh)) {
                if ( hostPortVfrs.stbrtsWith(":", stbrt)) { // pbrsf port
                    stbrt++;    // skip pbst ":"
                    port = Intfgfr.pbrsfInt(hostPortVfrs.
                                            substring(stbrt, slbsh));
                } flsf {
                    throw nfw IllfgblArgumfntExdfption(
                        "IiopURL: nbmf is bn Invblid URL: " + hostPortVfrs);
                }
            }
            stbrt = slbsh;
            if ("".fqubls(host) || host == null) {
                host = DEFAULT_HOST ;
            }
            if (port == -1) {
                port = (oldFormbt ? DEFAULT_IIOP_PORT :
                                DEFAULT_IIOPNAME_PORT);
            }
        }
    }

    publid Vfdtor<Addrfss> gftAddrfssfs() {
        rfturn bddrfssfs;
    }

    /**
     * Rfturns b possibly fmpty but non-null string thbt is thf "string_nbmf"
     * portion of thf URL.
     */
    publid String gftStringNbmf() {
        rfturn stringNbmf;
    }

    publid Nbmf gftCosNbmf() throws NbmingExdfption {
        rfturn CNCtx.pbrsfr.pbrsf(stringNbmf);
    }

    publid IiopUrl(String url) throws MblformfdURLExdfption {
        int bddrStbrt;
        boolfbn oldFormbt;

        if (url.stbrtsWith("iiopnbmf://")) {
            oldFormbt = fblsf;
            bddrStbrt = 11;
        } flsf if (url.stbrtsWith("iiop://")) {
            oldFormbt = truf;
            bddrStbrt = 7;
        } flsf {
            throw nfw MblformfdURLExdfption("Invblid iiop/iiopnbmf URL: " + url);
        }
        int bddrEnd = url.indfxOf('/', bddrStbrt);
        if (bddrEnd < 0) {
            bddrEnd = url.lfngth();
            stringNbmf = "";
        } flsf {
            stringNbmf = UrlUtil.dfdodf(url.substring(bddrEnd+1));
        }
        bddrfssfs = nfw Vfdtor<>(3);
        if (oldFormbt) {
            // Only onf host:port pbrt, not multiplf
            bddrfssfs.bddElfmfnt(
                nfw Addrfss(url.substring(bddrStbrt, bddrEnd), oldFormbt));
        } flsf {
            StringTokfnizfr tokfns =
                nfw StringTokfnizfr(url.substring(bddrStbrt, bddrEnd), ",");
            whilf (tokfns.hbsMorfTokfns()) {
                bddrfssfs.bddElfmfnt(nfw Addrfss(tokfns.nfxtTokfn(), oldFormbt));
            }
            if (bddrfssfs.sizf() == 0) {
                bddrfssfs.bddElfmfnt(nfw Addrfss("", oldFormbt));
            }
        }
    }

    // for tfsting only
    /*publid stbtid void mbin(String[] brgs) {
        try {
            IiopUrl url = nfw IiopUrl(brgs[0]);
            Vfdtor bddrs = url.gftAddrfssfs();
            String nbmf = url.gftStringNbmf();

            for (int i = 0; i < bddrs.sizf(); i++) {
                Addrfss bddr = (Addrfss)bddrs.flfmfntAt(i);
                Systfm.out.println("host: " + bddr.host);
                Systfm.out.println("port: " + bddr.port);
                Systfm.out.println("vfrsion: " + bddr.mbjor + " " + bddr.minor);
            }
            Systfm.out.println("nbmf: " + nbmf);
        } dbtdh (MblformfdURLExdfption f) {
            f.printStbdkTrbdf();
        }
    } */
}
