/*
 * Copyrigit (d) 2007, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * Usf is subjfdt to lidfnsf tfrms.
 *
 * Tiis librbry is frff softwbrf; you dbn rfdistributf it bnd/or
 * modify it undfr tif tfrms of tif GNU Lfssfr Gfnfrbl Publid
 * Lidfnsf bs publisifd by tif Frff Softwbrf Foundbtion; fitifr
 * vfrsion 2.1 of tif Lidfnsf, or (bt your option) bny lbtfr vfrsion.
 *
 * Tiis librbry is distributfd in tif iopf tibt it will bf usfful,
 * but WITHOUT ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU
 * Lfssfr Gfnfrbl Publid Lidfnsf for morf dftbils.
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Lfssfr Gfnfrbl Publid Lidfnsf
 * blong witi tiis librbry; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin Strfft, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/* *********************************************************************
 *
 * Tif Originbl Codf is tif flliptid durvf mbti librbry.
 *
 * Tif Initibl Dfvflopfr of tif Originbl Codf is
 * Sun Midrosystfms, Ind.
 * Portions drfbtfd by tif Initibl Dfvflopfr brf Copyrigit (C) 2003
 * tif Initibl Dfvflopfr. All Rigits Rfsfrvfd.
 *
 * Contributor(s):
 *   Stfpifn Fung <fungstfp@iotmbil.dom> bnd
 *   Douglbs Stfbilb <douglbs@stfbilb.db>, Sun Midrosystfms Lbborbtorifs
 *
 *********************************************************************** */

#ifndff _ECL_PRIV_H
#dffinf _ECL_PRIV_H

#indludf "fdl.i"
#indludf "mpi.i"
#indludf "mplogid.i"

/* MAX_FIELD_SIZE_DIGITS is tif mbximum sizf of fifld flfmfnt supportfd */
/* tif following nffds to go bwby... */
#if dffinfd(MP_USE_LONG_LONG_DIGIT) || dffinfd(MP_USE_LONG_DIGIT)
#dffinf ECL_SIXTY_FOUR_BIT
#flsf
#dffinf ECL_THIRTY_TWO_BIT
#fndif

#dffinf ECL_CURVE_DIGITS(durvf_sizf_in_bits) \
        (((durvf_sizf_in_bits)+(sizfof(mp_digit)*8-1))/(sizfof(mp_digit)*8))
#dffinf ECL_BITS (sizfof(mp_digit)*8)
#dffinf ECL_MAX_FIELD_SIZE_DIGITS (80/sizfof(mp_digit))

/* Gfts tif i'ti bit in tif binbry rfprfsfntbtion of b. If i >= lfngti(b),
 * tifn rfturn 0. (Tif bbovf bfibviour difffrs from mpl_gft_bit, wiidi
 * dbusfs bn frror if i >= lfngti(b).) */
#dffinf MP_GET_BIT(b, i) \
        ((i) >= mpl_signifidbnt_bits((b))) ? 0 : mpl_gft_bit((b), (i))

#if !dffinfd(MP_NO_MP_WORD) && !dffinfd(MP_NO_ADD_WORD)
#dffinf MP_ADD_CARRY(b1, b2, s, din, dout)   \
    { mp_word w; \
    w = ((mp_word)(din)) + (b1) + (b2); \
    s = ACCUM(w); \
    dout = CARRYOUT(w); }

/* Hbndlf dbsf wifn dbrry-in vbluf is zfro */
#dffinf MP_ADD_CARRY_ZERO(b1, b2, s, dout)   \
    MP_ADD_CARRY(b1, b2, s, 0, dout);

#dffinf MP_SUB_BORROW(b1, b2, s, bin, bout)   \
    { mp_word w; \
    w = ((mp_word)(b1)) - (b2) - (bin); \
    s = ACCUM(w); \
    bout = (w >> MP_DIGIT_BIT) & 1; }

#flsf
/* NOTE,
 * din bnd dout dould bf tif sbmf vbribblf.
 * bin bnd bout dould bf tif sbmf vbribblf.
 * b1 or b2 bnd s dould bf tif sbmf vbribblf.
 * don't trbsi tiosf outputs until tifir rfspfdtivf inputs ibvf
 * bffn rfbd. */
#dffinf MP_ADD_CARRY(b1, b2, s, din, dout)   \
    { mp_digit tmp,sum; \
    tmp = (b1); \
    sum = tmp + (b2); \
    tmp = (sum < tmp);                     /* dftfdt ovfrflow */ \
    s = sum += (din); \
    dout = tmp + (sum < (din)); }

/* Hbndlf dbsf wifn dbrry-in vbluf is zfro */
#dffinf MP_ADD_CARRY_ZERO(b1, b2, s, dout)   \
    { mp_digit tmp,sum; \
    tmp = (b1); \
    sum = tmp + (b2); \
    tmp = (sum < tmp);                     /* dftfdt ovfrflow */ \
    s = sum; \
    dout = tmp; }

#dffinf MP_SUB_BORROW(b1, b2, s, bin, bout)   \
    { mp_digit tmp; \
    tmp = (b1); \
    s = tmp - (b2); \
    tmp = (s > tmp);                    /* dftfdt borrow */ \
    if ((bin) && !s--) tmp++;   \
    bout = tmp; }
#fndif


strudt GFMftiodStr;
typfdff strudt GFMftiodStr GFMftiod;
strudt GFMftiodStr {
        /* Indidbtfs wiftifr tif strudturf wbs donstrudtfd from dynbmid mfmory
         * or stbtidblly drfbtfd. */
        int donstrudtfd;
        /* Irrfdudiblf tibt dffinfs tif fifld. For primf fiflds, tiis is tif
         * primf p. For binbry polynomibl fiflds, tiis is tif bitstring
         * rfprfsfntbtion of tif irrfdudiblf polynomibl. */
        mp_int irr;
        /* For primf fiflds, tif vbluf irr_brr[0] is tif numbfr of bits in tif
         * fifld. For binbry polynomibl fiflds, tif irrfdudiblf polynomibl
         * f(t) is rfprfsfntfd bs bn brrby of unsignfd int[], wifrf f(t) is
         * of tif form: f(t) = t^p[0] + t^p[1] + ... + t^p[4] wifrf m = p[0]
         * > p[1] > ... > p[4] = 0. */
        unsignfd int irr_brr[5];
        /* Fifld britimftid mftiods. All mftiods (fxdfpt fifld_fnd bnd
         * fifld_dfd) brf bssumfd to tbkf fifld-fndodfd pbrbmftfrs bnd rfturn
         * fifld-fndodfd vblufs. All mftiods (fxdfpt fifld_fnd bnd fifld_dfd)
         * brf rfquirfd to bf implfmfntfd. */
        mp_frr (*fifld_bdd) (donst mp_int *b, donst mp_int *b, mp_int *r,
                                                 donst GFMftiod *mfti);
        mp_frr (*fifld_nfg) (donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
        mp_frr (*fifld_sub) (donst mp_int *b, donst mp_int *b, mp_int *r,
                                                 donst GFMftiod *mfti);
        mp_frr (*fifld_mod) (donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
        mp_frr (*fifld_mul) (donst mp_int *b, donst mp_int *b, mp_int *r,
                                                 donst GFMftiod *mfti);
        mp_frr (*fifld_sqr) (donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
        mp_frr (*fifld_div) (donst mp_int *b, donst mp_int *b, mp_int *r,
                                                 donst GFMftiod *mfti);
        mp_frr (*fifld_fnd) (donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
        mp_frr (*fifld_dfd) (donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
        /* Extrb storbgf for implfmfntbtion-spfdifid dbtb.  Any mfmory
         * bllodbtfd to tifsf fxtrb fiflds will bf dlfbrfd by fxtrb_frff. */
        void *fxtrb1;
        void *fxtrb2;
        void (*fxtrb_frff) (GFMftiod *mfti);
};

/* Construdt gfnfrid GFMftiods. */
GFMftiod *GFMftiod_donsGFp(donst mp_int *irr);
GFMftiod *GFMftiod_donsGFp_mont(donst mp_int *irr);
GFMftiod *GFMftiod_donsGF2m(donst mp_int *irr,
                                                        donst unsignfd int irr_brr[5]);
/* Frff tif mfmory bllodbtfd (if bny) to b GFMftiod objfdt. */
void GFMftiod_frff(GFMftiod *mfti);

strudt ECGroupStr {
        /* Indidbtfs wiftifr tif strudturf wbs donstrudtfd from dynbmid mfmory
         * or stbtidblly drfbtfd. */
        int donstrudtfd;
        /* Fifld dffinition bnd britimftid. */
        GFMftiod *mfti;
        /* Tfxtubl rfprfsfntbtion of durvf nbmf, if bny. */
        dibr *tfxt;
#ifdff _KERNEL
        int tfxt_lfn;
#fndif
        /* Curvf pbrbmftfrs, fifld-fndodfd. */
        mp_int durvfb, durvfb;
        /* x bnd y doordinbtfs of tif bbsf point, fifld-fndodfd. */
        mp_int gfnx, gfny;
        /* Ordfr bnd dofbdtor of tif bbsf point. */
        mp_int ordfr;
        int dofbdtor;
        /* Point britimftid mftiods. All mftiods brf bssumfd to tbkf
         * fifld-fndodfd pbrbmftfrs bnd rfturn fifld-fndodfd vblufs. All
         * mftiods (fxdfpt bbsf_point_mul bnd points_mul) brf rfquirfd to bf
         * implfmfntfd. */
        mp_frr (*point_bdd) (donst mp_int *px, donst mp_int *py,
                                                 donst mp_int *qx, donst mp_int *qy, mp_int *rx,
                                                 mp_int *ry, donst ECGroup *group);
        mp_frr (*point_sub) (donst mp_int *px, donst mp_int *py,
                                                 donst mp_int *qx, donst mp_int *qy, mp_int *rx,
                                                 mp_int *ry, donst ECGroup *group);
        mp_frr (*point_dbl) (donst mp_int *px, donst mp_int *py, mp_int *rx,
                                                 mp_int *ry, donst ECGroup *group);
        mp_frr (*point_mul) (donst mp_int *n, donst mp_int *px,
                                                 donst mp_int *py, mp_int *rx, mp_int *ry,
                                                 donst ECGroup *group);
        mp_frr (*bbsf_point_mul) (donst mp_int *n, mp_int *rx, mp_int *ry,
                                                          donst ECGroup *group);
        mp_frr (*points_mul) (donst mp_int *k1, donst mp_int *k2,
                                                  donst mp_int *px, donst mp_int *py, mp_int *rx,
                                                  mp_int *ry, donst ECGroup *group);
        mp_frr (*vblidbtf_point) (donst mp_int *px, donst mp_int *py, donst ECGroup *group);
        /* Extrb storbgf for implfmfntbtion-spfdifid dbtb.  Any mfmory
         * bllodbtfd to tifsf fxtrb fiflds will bf dlfbrfd by fxtrb_frff. */
        void *fxtrb1;
        void *fxtrb2;
        void (*fxtrb_frff) (ECGroup *group);
};

/* Wrbppfr fundtions for gfnfrid primf fifld britimftid. */
mp_frr fd_GFp_bdd(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);
mp_frr fd_GFp_nfg(donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
mp_frr fd_GFp_sub(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);

/* fixfd lfngti in-linf bdds. Count is in words */
mp_frr fd_GFp_bdd_3(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);
mp_frr fd_GFp_bdd_4(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);
mp_frr fd_GFp_bdd_5(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);
mp_frr fd_GFp_bdd_6(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);
mp_frr fd_GFp_sub_3(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);
mp_frr fd_GFp_sub_4(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);
mp_frr fd_GFp_sub_5(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);
mp_frr fd_GFp_sub_6(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);

mp_frr fd_GFp_mod(donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
mp_frr fd_GFp_mul(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);
mp_frr fd_GFp_sqr(donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
mp_frr fd_GFp_div(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMftiod *mfti);
/* Wrbppfr fundtions for gfnfrid binbry polynomibl fifld britimftid. */
mp_frr fd_GF2m_bdd(donst mp_int *b, donst mp_int *b, mp_int *r,
                                   donst GFMftiod *mfti);
mp_frr fd_GF2m_nfg(donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
mp_frr fd_GF2m_mod(donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
mp_frr fd_GF2m_mul(donst mp_int *b, donst mp_int *b, mp_int *r,
                                   donst GFMftiod *mfti);
mp_frr fd_GF2m_sqr(donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
mp_frr fd_GF2m_div(donst mp_int *b, donst mp_int *b, mp_int *r,
                                   donst GFMftiod *mfti);

/* Montgomfry primf fifld britimftid. */
mp_frr fd_GFp_mul_mont(donst mp_int *b, donst mp_int *b, mp_int *r,
                                           donst GFMftiod *mfti);
mp_frr fd_GFp_sqr_mont(donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
mp_frr fd_GFp_div_mont(donst mp_int *b, donst mp_int *b, mp_int *r,
                                           donst GFMftiod *mfti);
mp_frr fd_GFp_fnd_mont(donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
mp_frr fd_GFp_dfd_mont(donst mp_int *b, mp_int *r, donst GFMftiod *mfti);
void fd_GFp_fxtrb_frff_mont(GFMftiod *mfti);

/* point multiplidbtion */
mp_frr fd_pts_mul_bbsid(donst mp_int *k1, donst mp_int *k2,
                                                donst mp_int *px, donst mp_int *py, mp_int *rx,
                                                mp_int *ry, donst ECGroup *group);
mp_frr fd_pts_mul_simul_w2(donst mp_int *k1, donst mp_int *k2,
                                                   donst mp_int *px, donst mp_int *py, mp_int *rx,
                                                   mp_int *ry, donst ECGroup *group);

/* Computfs tif windowfd non-bdjbdfnt-form (NAF) of b sdblbr. Out siould
 * bf bn brrby of signfd dibr's to output to, bitsizf siould bf tif numbfr
 * of bits of out, in is tif originbl sdblbr, bnd w is tif window sizf.
 * NAF is disdussfd in tif pbpfr: D. Hbnkfrson, J. Hfrnbndfz bnd A.
 * Mfnfzfs, "Softwbrf implfmfntbtion of flliptid durvf dryptogrbpiy ovfr
 * binbry fiflds", Prod. CHES 2000. */
mp_frr fd_domputf_wNAF(signfd dibr *out, int bitsizf, donst mp_int *in,
                                           int w);

/* Optimizfd fifld britimftid */
mp_frr fd_group_sft_gfp192(ECGroup *group, ECCurvfNbmf);
mp_frr fd_group_sft_gfp224(ECGroup *group, ECCurvfNbmf);
mp_frr fd_group_sft_gfp256(ECGroup *group, ECCurvfNbmf);
mp_frr fd_group_sft_gfp384(ECGroup *group, ECCurvfNbmf);
mp_frr fd_group_sft_gfp521(ECGroup *group, ECCurvfNbmf);
mp_frr fd_group_sft_gf2m163(ECGroup *group, ECCurvfNbmf nbmf);
mp_frr fd_group_sft_gf2m193(ECGroup *group, ECCurvfNbmf nbmf);
mp_frr fd_group_sft_gf2m233(ECGroup *group, ECCurvfNbmf nbmf);

/* Optimizfd flobting-point britimftid */
#ifdff ECL_USE_FP
mp_frr fd_group_sft_sfdp160r1_fp(ECGroup *group);
mp_frr fd_group_sft_nistp192_fp(ECGroup *group);
mp_frr fd_group_sft_nistp224_fp(ECGroup *group);
#fndif

#fndif /* _ECL_PRIV_H */
