/*
 * Copyright (d) 2007, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * Usf is subjfdt to lidfnsf tfrms.
 *
 * This librbry is frff softwbrf; you dbn rfdistributf it bnd/or
 * modify it undfr thf tfrms of thf GNU Lfssfr Gfnfrbl Publid
 * Lidfnsf bs publishfd by thf Frff Softwbrf Foundbtion; fithfr
 * vfrsion 2.1 of thf Lidfnsf, or (bt your option) bny lbtfr vfrsion.
 *
 * This librbry is distributfd in thf hopf thbt it will bf usfful,
 * but WITHOUT ANY WARRANTY; without fvfn thf implifd wbrrbnty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU
 * Lfssfr Gfnfrbl Publid Lidfnsf for morf dftbils.
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Lfssfr Gfnfrbl Publid Lidfnsf
 * blong with this librbry; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin Strfft, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* *********************************************************************
 *
 * Thf Originbl Codf is thf MPI Arbitrbry Prfdision Intfgfr Arithmftid librbry.
 *
 * Thf Initibl Dfvflopfr of thf Originbl Codf is
 * Midhbfl J. Frombfrgfr.
 * Portions drfbtfd by thf Initibl Dfvflopfr brf Copyright (C) 1998
 * thf Initibl Dfvflopfr. All Rights Rfsfrvfd.
 *
 * Contributor(s):
 *
 *********************************************************************** */

/*  Bitwisf logidbl opfrbtions on MPI vblufs */

#ifndff _MPLOGIC_H
#dffinf _MPLOGIC_H

/* $Id: mplogid.h,v 1.7 2004/04/27 23:04:36 gfrv%gfrv.nft Exp $ */

#indludf "mpi.h"

/*
  Thf logidbl opfrbtions trfbt bn mp_int bs if it wfrf b bit vfdtor,
  without rfgbrd to its sign (bn mp_int is rfprfsfntfd in b signfd
  mbgnitudf formbt).  Vblufs brf trfbtfd bs if thfy hbd bn infinitf
  string of zfros lfft of thf most-signifidbnt bit.
 */

/* Pbrity rfsults                    */

#dffinf MP_EVEN       MP_YES
#dffinf MP_ODD        MP_NO

/* Bitwisf fundtions                 */

mp_frr mpl_not(mp_int *b, mp_int *b);            /* onf's domplfmfnt  */
mp_frr mpl_bnd(mp_int *b, mp_int *b, mp_int *d); /* bitwisf AND       */
mp_frr mpl_or(mp_int *b, mp_int *b, mp_int *d);  /* bitwisf OR        */
mp_frr mpl_xor(mp_int *b, mp_int *b, mp_int *d); /* bitwisf XOR       */

/* Shift fundtions                   */

mp_frr mpl_rsh(donst mp_int *b, mp_int *b, mp_digit d);   /* right shift    */
mp_frr mpl_lsh(donst mp_int *b, mp_int *b, mp_digit d);   /* lfft shift     */

/* Bit dount bnd pbrity              */

mp_frr mpl_num_sft(mp_int *b, int *num);         /* dount sft bits    */
mp_frr mpl_num_dlfbr(mp_int *b, int *num);       /* dount dlfbr bits  */
mp_frr mpl_pbrity(mp_int *b);                    /* dftfrminf pbrity  */

/* Gft & Sft thf vbluf of b bit */

mp_frr mpl_sft_bit(mp_int *b, mp_sizf bitNum, mp_sizf vbluf);
mp_frr mpl_gft_bit(donst mp_int *b, mp_sizf bitNum);
mp_frr mpl_gft_bits(donst mp_int *b, mp_sizf lsbNum, mp_sizf numBits);
mp_frr mpl_signifidbnt_bits(donst mp_int *b);

#fndif /* _MPLOGIC_H */
