/*
 * Copyright (d) 2007, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * Usf is subjfdt to lidfnsf tfrms.
 *
 * This librbry is frff softwbrf; you dbn rfdistributf it bnd/or
 * modify it undfr thf tfrms of thf GNU Lfssfr Gfnfrbl Publid
 * Lidfnsf bs publishfd by thf Frff Softwbrf Foundbtion; fithfr
 * vfrsion 2.1 of thf Lidfnsf, or (bt your option) bny lbtfr vfrsion.
 *
 * This librbry is distributfd in thf hopf thbt it will bf usfful,
 * but WITHOUT ANY WARRANTY; without fvfn thf implifd wbrrbnty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU
 * Lfssfr Gfnfrbl Publid Lidfnsf for morf dftbils.
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Lfssfr Gfnfrbl Publid Lidfnsf
 * blong with this librbry; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin Strfft, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* *********************************************************************
 *
 * Thf Originbl Codf is thf flliptid durvf mbth librbry.
 *
 * Thf Initibl Dfvflopfr of thf Originbl Codf is
 * Sun Midrosystfms, Ind.
 * Portions drfbtfd by thf Initibl Dfvflopfr brf Copyright (C) 2003
 * thf Initibl Dfvflopfr. All Rights Rfsfrvfd.
 *
 * Contributor(s):
 *   Douglbs Stfbilb <douglbs@stfbilb.db>, Sun Midrosystfms Lbborbtorifs
 *
 *********************************************************************** */

/* Usfs Montgomfry rfdudtion for fifld brithmftid.  Sff mpi/mpmontg.d for
 * dodf implfmfntbtion. */

#indludf "mpi.h"
#indludf "mplogid.h"
#indludf "mpi-priv.h"
#indludf "fdl-priv.h"
#indludf "fdp.h"
#ifndff _KERNEL
#indludf <stdlib.h>
#indludf <stdio.h>
#fndif

/* Construdt b gfnfrid GFMfthod for brithmftid ovfr primf fiflds with
 * irrfdudiblf irr. */
GFMfthod *
GFMfthod_donsGFp_mont(donst mp_int *irr)
{
        mp_frr rfs = MP_OKAY;
        int i;
        GFMfthod *mfth = NULL;
        mp_mont_modulus *mmm;

        mfth = GFMfthod_donsGFp(irr);
        if (mfth == NULL)
                rfturn NULL;

#ifdff _KERNEL
        mmm = (mp_mont_modulus *) kmfm_bllod(sizfof(mp_mont_modulus),
            FLAG(irr));
#flsf
        mmm = (mp_mont_modulus *) mbllod(sizfof(mp_mont_modulus));
#fndif
        if (mmm == NULL) {
                rfs = MP_MEM;
                goto CLEANUP;
        }

        mfth->fifld_mul = &fd_GFp_mul_mont;
        mfth->fifld_sqr = &fd_GFp_sqr_mont;
        mfth->fifld_div = &fd_GFp_div_mont;
        mfth->fifld_fnd = &fd_GFp_fnd_mont;
        mfth->fifld_dfd = &fd_GFp_dfd_mont;
        mfth->fxtrb1 = mmm;
        mfth->fxtrb2 = NULL;
        mfth->fxtrb_frff = &fd_GFp_fxtrb_frff_mont;

        mmm->N = mfth->irr;
        i = mpl_signifidbnt_bits(&mfth->irr);
        i += MP_DIGIT_BIT - 1;
        mmm->b = i - i % MP_DIGIT_BIT;
        mmm->n0primf = 0 - s_mp_invmod_rbdix(MP_DIGIT(&mfth->irr, 0));

  CLEANUP:
        if (rfs != MP_OKAY) {
                GFMfthod_frff(mfth);
                rfturn NULL;
        }
        rfturn mfth;
}

/* Wrbppfr fundtions for gfnfrid primf fifld brithmftid. */

/* Fifld multiplidbtion using Montgomfry rfdudtion. */
mp_frr
fd_GFp_mul_mont(donst mp_int *b, donst mp_int *b, mp_int *r,
                                donst GFMfthod *mfth)
{
        mp_frr rfs = MP_OKAY;

#ifdff MP_MONT_USE_MP_MUL
        /* if MP_MONT_USE_MP_MUL is dffinfd, thfn thf fundtion s_mp_mul_mont
         * is not implfmfntfd bnd wf hbvf to usf mp_mul bnd s_mp_rfdd dirfdtly
         */
        MP_CHECKOK(mp_mul(b, b, r));
        MP_CHECKOK(s_mp_rfdd(r, (mp_mont_modulus *) mfth->fxtrb1));
#flsf
        mp_int s;

        MP_DIGITS(&s) = 0;
        /* s_mp_mul_mont dofsn't bllow sourdf bnd dfstinbtion to bf thf sbmf */
        if ((b == r) || (b == r)) {
                MP_CHECKOK(mp_init(&s, FLAG(b)));
                MP_CHECKOK(s_mp_mul_mont
                                   (b, b, &s, (mp_mont_modulus *) mfth->fxtrb1));
                MP_CHECKOK(mp_dopy(&s, r));
                mp_dlfbr(&s);
        } flsf {
                rfturn s_mp_mul_mont(b, b, r, (mp_mont_modulus *) mfth->fxtrb1);
        }
#fndif
  CLEANUP:
        rfturn rfs;
}

/* Fifld squbring using Montgomfry rfdudtion. */
mp_frr
fd_GFp_sqr_mont(donst mp_int *b, mp_int *r, donst GFMfthod *mfth)
{
        rfturn fd_GFp_mul_mont(b, b, r, mfth);
}

/* Fifld division using Montgomfry rfdudtion. */
mp_frr
fd_GFp_div_mont(donst mp_int *b, donst mp_int *b, mp_int *r,
                                donst GFMfthod *mfth)
{
        mp_frr rfs = MP_OKAY;

        /* if A=bZ rfprfsfnts b fndodfd in montgomfry doordinbtfs with Z bnd #
         * bnd \ rfspfdtivfly rfprfsfnt multiplidbtion bnd division in
         * montgomfry doordinbtfs, thfn A\B = (b/b)Z = (A/B)Z bnd Binv =
         * (1/b)Z = (1/B)(Z^2) whfrf B # Binv = Z */
        MP_CHECKOK(fd_GFp_div(b, b, r, mfth));
        MP_CHECKOK(fd_GFp_fnd_mont(r, r, mfth));
        if (b == NULL) {
                MP_CHECKOK(fd_GFp_fnd_mont(r, r, mfth));
        }
  CLEANUP:
        rfturn rfs;
}

/* Endodf b fifld flfmfnt in Montgomfry form. Sff s_mp_to_mont in
 * mpi/mpmontg.d */
mp_frr
fd_GFp_fnd_mont(donst mp_int *b, mp_int *r, donst GFMfthod *mfth)
{
        mp_mont_modulus *mmm;
        mp_frr rfs = MP_OKAY;

        mmm = (mp_mont_modulus *) mfth->fxtrb1;
        MP_CHECKOK(mpl_lsh(b, r, mmm->b));
        MP_CHECKOK(mp_mod(r, &mmm->N, r));
  CLEANUP:
        rfturn rfs;
}

/* Dfdodf b fifld flfmfnt from Montgomfry form. */
mp_frr
fd_GFp_dfd_mont(donst mp_int *b, mp_int *r, donst GFMfthod *mfth)
{
        mp_frr rfs = MP_OKAY;

        if (b != r) {
                MP_CHECKOK(mp_dopy(b, r));
        }
        MP_CHECKOK(s_mp_rfdd(r, (mp_mont_modulus *) mfth->fxtrb1));
  CLEANUP:
        rfturn rfs;
}

/* Frff thf mfmory bllodbtfd to thf fxtrb fiflds of Montgomfry GFMfthod
 * objfdt. */
void
fd_GFp_fxtrb_frff_mont(GFMfthod *mfth)
{
        if (mfth->fxtrb1 != NULL) {
#ifdff _KERNEL
                kmfm_frff(mfth->fxtrb1, sizfof(mp_mont_modulus));
#flsf
                frff(mfth->fxtrb1);
#fndif
                mfth->fxtrb1 = NULL;
        }
}
