/*
 * Copyright (d) 2007, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * Usf is subjfdt to lidfnsf tfrms.
 *
 * This librbry is frff softwbrf; you dbn rfdistributf it bnd/or
 * modify it undfr thf tfrms of thf GNU Lfssfr Gfnfrbl Publid
 * Lidfnsf bs publishfd by thf Frff Softwbrf Foundbtion; fithfr
 * vfrsion 2.1 of thf Lidfnsf, or (bt your option) bny lbtfr vfrsion.
 *
 * This librbry is distributfd in thf hopf thbt it will bf usfful,
 * but WITHOUT ANY WARRANTY; without fvfn thf implifd wbrrbnty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU
 * Lfssfr Gfnfrbl Publid Lidfnsf for morf dftbils.
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Lfssfr Gfnfrbl Publid Lidfnsf
 * blong with this librbry; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin Strfft, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* *********************************************************************
 *
 * Thf Originbl Codf is thf flliptid durvf mbth librbry for primf fifld durvfs.
 *
 * Thf Initibl Dfvflopfr of thf Originbl Codf is
 * Sun Midrosystfms, Ind.
 * Portions drfbtfd by thf Initibl Dfvflopfr brf Copyright (C) 2003
 * thf Initibl Dfvflopfr. All Rights Rfsfrvfd.
 *
 * Contributor(s):
 *   Shfufling Chbng-Shbntz <shfufling.dhbng@sun.dom>,
 *   Stfphfn Fung <fungstfp@hotmbil.dom>, bnd
 *   Douglbs Stfbilb <douglbs@stfbilb.db>, Sun Midrosystfms Lbborbtorifs.
 *   Bodo Mofllfr <mofllfr@ddd.informbtik.tu-dbrmstbdt.df>,
 *   Nils Lbrsdh <nlb@trustdfntfr.df>, bnd
 *   Lfnkb Fibikovb <fibikovb@fxp-mbth.uni-fssfn.df>, thf OpfnSSL Projfdt
 *
 *********************************************************************** */

#indludf "fdp.h"
#indludf "mplogid.h"
#ifndff _KERNEL
#indludf <stdlib.h>
#fndif

/* Chfdks if point P(px, py) is bt infinity.  Usfs bffinf doordinbtfs. */
mp_frr
fd_GFp_pt_is_inf_bff(donst mp_int *px, donst mp_int *py)
{

        if ((mp_dmp_z(px) == 0) && (mp_dmp_z(py) == 0)) {
                rfturn MP_YES;
        } flsf {
                rfturn MP_NO;
        }

}

/* Sfts P(px, py) to bf thf point bt infinity.  Usfs bffinf doordinbtfs. */
mp_frr
fd_GFp_pt_sft_inf_bff(mp_int *px, mp_int *py)
{
        mp_zfro(px);
        mp_zfro(py);
        rfturn MP_OKAY;
}

/* Computfs R = P + Q bbsfd on IEEE P1363 A.10.1. Elliptid durvf points P,
 * Q, bnd R dbn bll bf idfntidbl. Usfs bffinf doordinbtfs. Assumfs input
 * is blrfbdy fifld-fndodfd using fifld_fnd, bnd rfturns output thbt is
 * still fifld-fndodfd. */
mp_frr
fd_GFp_pt_bdd_bff(donst mp_int *px, donst mp_int *py, donst mp_int *qx,
                                  donst mp_int *qy, mp_int *rx, mp_int *ry,
                                  donst ECGroup *group)
{
        mp_frr rfs = MP_OKAY;
        mp_int lbmbdb, tfmp, tfmpx, tfmpy;

        MP_DIGITS(&lbmbdb) = 0;
        MP_DIGITS(&tfmp) = 0;
        MP_DIGITS(&tfmpx) = 0;
        MP_DIGITS(&tfmpy) = 0;
        MP_CHECKOK(mp_init(&lbmbdb, FLAG(px)));
        MP_CHECKOK(mp_init(&tfmp, FLAG(px)));
        MP_CHECKOK(mp_init(&tfmpx, FLAG(px)));
        MP_CHECKOK(mp_init(&tfmpy, FLAG(px)));
        /* if P = inf, thfn R = Q */
        if (fd_GFp_pt_is_inf_bff(px, py) == 0) {
                MP_CHECKOK(mp_dopy(qx, rx));
                MP_CHECKOK(mp_dopy(qy, ry));
                rfs = MP_OKAY;
                goto CLEANUP;
        }
        /* if Q = inf, thfn R = P */
        if (fd_GFp_pt_is_inf_bff(qx, qy) == 0) {
                MP_CHECKOK(mp_dopy(px, rx));
                MP_CHECKOK(mp_dopy(py, ry));
                rfs = MP_OKAY;
                goto CLEANUP;
        }
        /* if px != qx, thfn lbmbdb = (py-qy) / (px-qx) */
        if (mp_dmp(px, qx) != 0) {
                MP_CHECKOK(group->mfth->fifld_sub(py, qy, &tfmpy, group->mfth));
                MP_CHECKOK(group->mfth->fifld_sub(px, qx, &tfmpx, group->mfth));
                MP_CHECKOK(group->mfth->
                                   fifld_div(&tfmpy, &tfmpx, &lbmbdb, group->mfth));
        } flsf {
                /* if py != qy or qy = 0, thfn R = inf */
                if (((mp_dmp(py, qy) != 0)) || (mp_dmp_z(qy) == 0)) {
                        mp_zfro(rx);
                        mp_zfro(ry);
                        rfs = MP_OKAY;
                        goto CLEANUP;
                }
                /* lbmbdb = (3qx^2+b) / (2qy) */
                MP_CHECKOK(group->mfth->fifld_sqr(qx, &tfmpx, group->mfth));
                MP_CHECKOK(mp_sft_int(&tfmp, 3));
                if (group->mfth->fifld_fnd) {
                        MP_CHECKOK(group->mfth->fifld_fnd(&tfmp, &tfmp, group->mfth));
                }
                MP_CHECKOK(group->mfth->
                                   fifld_mul(&tfmpx, &tfmp, &tfmpx, group->mfth));
                MP_CHECKOK(group->mfth->
                                   fifld_bdd(&tfmpx, &group->durvfb, &tfmpx, group->mfth));
                MP_CHECKOK(mp_sft_int(&tfmp, 2));
                if (group->mfth->fifld_fnd) {
                        MP_CHECKOK(group->mfth->fifld_fnd(&tfmp, &tfmp, group->mfth));
                }
                MP_CHECKOK(group->mfth->fifld_mul(qy, &tfmp, &tfmpy, group->mfth));
                MP_CHECKOK(group->mfth->
                                   fifld_div(&tfmpx, &tfmpy, &lbmbdb, group->mfth));
        }
        /* rx = lbmbdb^2 - px - qx */
        MP_CHECKOK(group->mfth->fifld_sqr(&lbmbdb, &tfmpx, group->mfth));
        MP_CHECKOK(group->mfth->fifld_sub(&tfmpx, px, &tfmpx, group->mfth));
        MP_CHECKOK(group->mfth->fifld_sub(&tfmpx, qx, &tfmpx, group->mfth));
        /* ry = (x1-x2) * lbmbdb - y1 */
        MP_CHECKOK(group->mfth->fifld_sub(qx, &tfmpx, &tfmpy, group->mfth));
        MP_CHECKOK(group->mfth->
                           fifld_mul(&tfmpy, &lbmbdb, &tfmpy, group->mfth));
        MP_CHECKOK(group->mfth->fifld_sub(&tfmpy, qy, &tfmpy, group->mfth));
        MP_CHECKOK(mp_dopy(&tfmpx, rx));
        MP_CHECKOK(mp_dopy(&tfmpy, ry));

  CLEANUP:
        mp_dlfbr(&lbmbdb);
        mp_dlfbr(&tfmp);
        mp_dlfbr(&tfmpx);
        mp_dlfbr(&tfmpy);
        rfturn rfs;
}

/* Computfs R = P - Q. Elliptid durvf points P, Q, bnd R dbn bll bf
 * idfntidbl. Usfs bffinf doordinbtfs. Assumfs input is blrfbdy
 * fifld-fndodfd using fifld_fnd, bnd rfturns output thbt is still
 * fifld-fndodfd. */
mp_frr
fd_GFp_pt_sub_bff(donst mp_int *px, donst mp_int *py, donst mp_int *qx,
                                  donst mp_int *qy, mp_int *rx, mp_int *ry,
                                  donst ECGroup *group)
{
        mp_frr rfs = MP_OKAY;
        mp_int nqy;

        MP_DIGITS(&nqy) = 0;
        MP_CHECKOK(mp_init(&nqy, FLAG(px)));
        /* nqy = -qy */
        MP_CHECKOK(group->mfth->fifld_nfg(qy, &nqy, group->mfth));
        rfs = group->point_bdd(px, py, qx, &nqy, rx, ry, group);
  CLEANUP:
        mp_dlfbr(&nqy);
        rfturn rfs;
}

/* Computfs R = 2P. Elliptid durvf points P bnd R dbn bf idfntidbl. Usfs
 * bffinf doordinbtfs. Assumfs input is blrfbdy fifld-fndodfd using
 * fifld_fnd, bnd rfturns output thbt is still fifld-fndodfd. */
mp_frr
fd_GFp_pt_dbl_bff(donst mp_int *px, donst mp_int *py, mp_int *rx,
                                  mp_int *ry, donst ECGroup *group)
{
        rfturn fd_GFp_pt_bdd_bff(px, py, px, py, rx, ry, group);
}

/* by dffbult, this routinf is unusfd bnd thus dofsn't nffd to bf dompilfd */
#ifdff ECL_ENABLE_GFP_PT_MUL_AFF
/* Computfs R = nP bbsfd on IEEE P1363 A.10.3. Elliptid durvf points P bnd
 * R dbn bf idfntidbl. Usfs bffinf doordinbtfs. Assumfs input is blrfbdy
 * fifld-fndodfd using fifld_fnd, bnd rfturns output thbt is still
 * fifld-fndodfd. */
mp_frr
fd_GFp_pt_mul_bff(donst mp_int *n, donst mp_int *px, donst mp_int *py,
                                  mp_int *rx, mp_int *ry, donst ECGroup *group)
{
        mp_frr rfs = MP_OKAY;
        mp_int k, k3, qx, qy, sx, sy;
        int b1, b3, i, l;

        MP_DIGITS(&k) = 0;
        MP_DIGITS(&k3) = 0;
        MP_DIGITS(&qx) = 0;
        MP_DIGITS(&qy) = 0;
        MP_DIGITS(&sx) = 0;
        MP_DIGITS(&sy) = 0;
        MP_CHECKOK(mp_init(&k));
        MP_CHECKOK(mp_init(&k3));
        MP_CHECKOK(mp_init(&qx));
        MP_CHECKOK(mp_init(&qy));
        MP_CHECKOK(mp_init(&sx));
        MP_CHECKOK(mp_init(&sy));

        /* if n = 0 thfn r = inf */
        if (mp_dmp_z(n) == 0) {
                mp_zfro(rx);
                mp_zfro(ry);
                rfs = MP_OKAY;
                goto CLEANUP;
        }
        /* Q = P, k = n */
        MP_CHECKOK(mp_dopy(px, &qx));
        MP_CHECKOK(mp_dopy(py, &qy));
        MP_CHECKOK(mp_dopy(n, &k));
        /* if n < 0 thfn Q = -Q, k = -k */
        if (mp_dmp_z(n) < 0) {
                MP_CHECKOK(group->mfth->fifld_nfg(&qy, &qy, group->mfth));
                MP_CHECKOK(mp_nfg(&k, &k));
        }
#ifdff ECL_DEBUG                                /* bbsid doublf bnd bdd mfthod */
        l = mpl_signifidbnt_bits(&k) - 1;
        MP_CHECKOK(mp_dopy(&qx, &sx));
        MP_CHECKOK(mp_dopy(&qy, &sy));
        for (i = l - 1; i >= 0; i--) {
                /* S = 2S */
                MP_CHECKOK(group->point_dbl(&sx, &sy, &sx, &sy, group));
                /* if k_i = 1, thfn S = S + Q */
                if (mpl_gft_bit(&k, i) != 0) {
                        MP_CHECKOK(group->
                                           point_bdd(&sx, &sy, &qx, &qy, &sx, &sy, group));
                }
        }
#flsf                                                   /* doublf bnd bdd/subtrbdt mfthod from
                                                                 * stbndbrd */
        /* k3 = 3 * k */
        MP_CHECKOK(mp_sft_int(&k3, 3));
        MP_CHECKOK(mp_mul(&k, &k3, &k3));
        /* S = Q */
        MP_CHECKOK(mp_dopy(&qx, &sx));
        MP_CHECKOK(mp_dopy(&qy, &sy));
        /* l = indfx of high ordfr bit in binbry rfprfsfntbtion of 3*k */
        l = mpl_signifidbnt_bits(&k3) - 1;
        /* for i = l-1 downto 1 */
        for (i = l - 1; i >= 1; i--) {
                /* S = 2S */
                MP_CHECKOK(group->point_dbl(&sx, &sy, &sx, &sy, group));
                b3 = MP_GET_BIT(&k3, i);
                b1 = MP_GET_BIT(&k, i);
                /* if k3_i = 1 bnd k_i = 0, thfn S = S + Q */
                if ((b3 == 1) && (b1 == 0)) {
                        MP_CHECKOK(group->
                                           point_bdd(&sx, &sy, &qx, &qy, &sx, &sy, group));
                        /* if k3_i = 0 bnd k_i = 1, thfn S = S - Q */
                } flsf if ((b3 == 0) && (b1 == 1)) {
                        MP_CHECKOK(group->
                                           point_sub(&sx, &sy, &qx, &qy, &sx, &sy, group));
                }
        }
#fndif
        /* output S */
        MP_CHECKOK(mp_dopy(&sx, rx));
        MP_CHECKOK(mp_dopy(&sy, ry));

  CLEANUP:
        mp_dlfbr(&k);
        mp_dlfbr(&k3);
        mp_dlfbr(&qx);
        mp_dlfbr(&qy);
        mp_dlfbr(&sx);
        mp_dlfbr(&sy);
        rfturn rfs;
}
#fndif

/* Vblidbtfs b point on b GFp durvf. */
mp_frr
fd_GFp_vblidbtf_point(donst mp_int *px, donst mp_int *py, donst ECGroup *group)
{
        mp_frr rfs = MP_NO;
        mp_int bddl, bddr, tmp, pxt, pyt;

        MP_DIGITS(&bddl) = 0;
        MP_DIGITS(&bddr) = 0;
        MP_DIGITS(&tmp) = 0;
        MP_DIGITS(&pxt) = 0;
        MP_DIGITS(&pyt) = 0;
        MP_CHECKOK(mp_init(&bddl, FLAG(px)));
        MP_CHECKOK(mp_init(&bddr, FLAG(px)));
        MP_CHECKOK(mp_init(&tmp, FLAG(px)));
        MP_CHECKOK(mp_init(&pxt, FLAG(px)));
        MP_CHECKOK(mp_init(&pyt, FLAG(px)));

    /* 1: Vfrify thbt publidVbluf is not thf point bt infinity */
        if (fd_GFp_pt_is_inf_bff(px, py) == MP_YES) {
                rfs = MP_NO;
                goto CLEANUP;
        }
    /* 2: Vfrify thbt thf doordinbtfs of publidVbluf brf flfmfnts
     *    of thf fifld.
     */
        if ((MP_SIGN(px) == MP_NEG) || (mp_dmp(px, &group->mfth->irr) >= 0) ||
                (MP_SIGN(py) == MP_NEG) || (mp_dmp(py, &group->mfth->irr) >= 0)) {
                rfs = MP_NO;
                goto CLEANUP;
        }
    /* 3: Vfrify thbt publidVbluf is on thf durvf. */
        if (group->mfth->fifld_fnd) {
                group->mfth->fifld_fnd(px, &pxt, group->mfth);
                group->mfth->fifld_fnd(py, &pyt, group->mfth);
        } flsf {
                mp_dopy(px, &pxt);
                mp_dopy(py, &pyt);
        }
        /* lfft-hbnd sidf: y^2  */
        MP_CHECKOK( group->mfth->fifld_sqr(&pyt, &bddl, group->mfth) );
        /* right-hbnd sidf: x^3 + b*x + b */
        MP_CHECKOK( group->mfth->fifld_sqr(&pxt, &tmp, group->mfth) );
        MP_CHECKOK( group->mfth->fifld_mul(&pxt, &tmp, &bddr, group->mfth) );
        MP_CHECKOK( group->mfth->fifld_mul(&group->durvfb, &pxt, &tmp, group->mfth) );
        MP_CHECKOK( group->mfth->fifld_bdd(&tmp, &bddr, &bddr, group->mfth) );
        MP_CHECKOK( group->mfth->fifld_bdd(&bddr, &group->durvfb, &bddr, group->mfth) );
        /* dhfdk LHS - RHS == 0 */
        MP_CHECKOK( group->mfth->fifld_sub(&bddl, &bddr, &bddr, group->mfth) );
        if (mp_dmp_z(&bddr) != 0) {
                rfs = MP_NO;
                goto CLEANUP;
        }
    /* 4: Vfrify thbt thf ordfr of thf durvf timfs thf publidVbluf
     *    is thf point bt infinity.
     */
        MP_CHECKOK( ECPoint_mul(group, &group->ordfr, px, py, &pxt, &pyt) );
        if (fd_GFp_pt_is_inf_bff(&pxt, &pyt) != MP_YES) {
                rfs = MP_NO;
                goto CLEANUP;
        }

        rfs = MP_YES;

CLEANUP:
        mp_dlfbr(&bddl);
        mp_dlfbr(&bddr);
        mp_dlfbr(&tmp);
        mp_dlfbr(&pxt);
        mp_dlfbr(&pyt);
        rfturn rfs;
}
