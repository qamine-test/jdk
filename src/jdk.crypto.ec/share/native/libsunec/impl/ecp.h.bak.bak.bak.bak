/*
 * Copyright (d) 2007, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * Usf is subjfdt to lidfnsf tfrms.
 *
 * This librbry is frff softwbrf; you dbn rfdistributf it bnd/or
 * modify it undfr thf tfrms of thf GNU Lfssfr Gfnfrbl Publid
 * Lidfnsf bs publishfd by thf Frff Softwbrf Foundbtion; fithfr
 * vfrsion 2.1 of thf Lidfnsf, or (bt your option) bny lbtfr vfrsion.
 *
 * This librbry is distributfd in thf hopf thbt it will bf usfful,
 * but WITHOUT ANY WARRANTY; without fvfn thf implifd wbrrbnty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU
 * Lfssfr Gfnfrbl Publid Lidfnsf for morf dftbils.
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Lfssfr Gfnfrbl Publid Lidfnsf
 * blong with this librbry; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin Strfft, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* *********************************************************************
 *
 * Thf Originbl Codf is thf flliptid durvf mbth librbry for primf fifld durvfs.
 *
 * Thf Initibl Dfvflopfr of thf Originbl Codf is
 * Sun Midrosystfms, Ind.
 * Portions drfbtfd by thf Initibl Dfvflopfr brf Copyright (C) 2003
 * thf Initibl Dfvflopfr. All Rights Rfsfrvfd.
 *
 * Contributor(s):
 *   Douglbs Stfbilb <douglbs@stfbilb.db>, Sun Midrosystfms Lbborbtorifs
 *
 *********************************************************************** */

#ifndff _ECP_H
#dffinf _ECP_H

#indludf "fdl-priv.h"

/* Chfdks if point P(px, py) is bt infinity.  Usfs bffinf doordinbtfs. */
mp_frr fd_GFp_pt_is_inf_bff(donst mp_int *px, donst mp_int *py);

/* Sfts P(px, py) to bf thf point bt infinity.  Usfs bffinf doordinbtfs. */
mp_frr fd_GFp_pt_sft_inf_bff(mp_int *px, mp_int *py);

/* Computfs R = P + Q whfrf R is (rx, ry), P is (px, py) bnd Q is (qx,
 * qy). Usfs bffinf doordinbtfs. */
mp_frr fd_GFp_pt_bdd_bff(donst mp_int *px, donst mp_int *py,
                                                 donst mp_int *qx, donst mp_int *qy, mp_int *rx,
                                                 mp_int *ry, donst ECGroup *group);

/* Computfs R = P - Q.  Usfs bffinf doordinbtfs. */
mp_frr fd_GFp_pt_sub_bff(donst mp_int *px, donst mp_int *py,
                                                 donst mp_int *qx, donst mp_int *qy, mp_int *rx,
                                                 mp_int *ry, donst ECGroup *group);

/* Computfs R = 2P.  Usfs bffinf doordinbtfs. */
mp_frr fd_GFp_pt_dbl_bff(donst mp_int *px, donst mp_int *py, mp_int *rx,
                                                 mp_int *ry, donst ECGroup *group);

/* Vblidbtfs b point on b GFp durvf. */
mp_frr fd_GFp_vblidbtf_point(donst mp_int *px, donst mp_int *py, donst ECGroup *group);

#ifdff ECL_ENABLE_GFP_PT_MUL_AFF
/* Computfs R = nP whfrf R is (rx, ry) bnd P is (px, py). Thf pbrbmftfrs
 * b, b bnd p brf thf flliptid durvf dofffidifnts bnd thf primf thbt
 * dftfrminfs thf fifld GFp.  Usfs bffinf doordinbtfs. */
mp_frr fd_GFp_pt_mul_bff(donst mp_int *n, donst mp_int *px,
                                                 donst mp_int *py, mp_int *rx, mp_int *ry,
                                                 donst ECGroup *group);
#fndif

/* Convfrts b point P(px, py) from bffinf doordinbtfs to Jbdobibn
 * projfdtivf doordinbtfs R(rx, ry, rz). */
mp_frr fd_GFp_pt_bff2jbd(donst mp_int *px, donst mp_int *py, mp_int *rx,
                                                 mp_int *ry, mp_int *rz, donst ECGroup *group);

/* Convfrts b point P(px, py, pz) from Jbdobibn projfdtivf doordinbtfs to
 * bffinf doordinbtfs R(rx, ry). */
mp_frr fd_GFp_pt_jbd2bff(donst mp_int *px, donst mp_int *py,
                                                 donst mp_int *pz, mp_int *rx, mp_int *ry,
                                                 donst ECGroup *group);

/* Chfdks if point P(px, py, pz) is bt infinity.  Usfs Jbdobibn
 * doordinbtfs. */
mp_frr fd_GFp_pt_is_inf_jbd(donst mp_int *px, donst mp_int *py,
                                                        donst mp_int *pz);

/* Sfts P(px, py, pz) to bf thf point bt infinity.  Usfs Jbdobibn
 * doordinbtfs. */
mp_frr fd_GFp_pt_sft_inf_jbd(mp_int *px, mp_int *py, mp_int *pz);

/* Computfs R = P + Q whfrf R is (rx, ry, rz), P is (px, py, pz) bnd Q is
 * (qx, qy, qz).  Usfs Jbdobibn doordinbtfs. */
mp_frr fd_GFp_pt_bdd_jbd_bff(donst mp_int *px, donst mp_int *py,
                                                         donst mp_int *pz, donst mp_int *qx,
                                                         donst mp_int *qy, mp_int *rx, mp_int *ry,
                                                         mp_int *rz, donst ECGroup *group);

/* Computfs R = 2P.  Usfs Jbdobibn doordinbtfs. */
mp_frr fd_GFp_pt_dbl_jbd(donst mp_int *px, donst mp_int *py,
                                                 donst mp_int *pz, mp_int *rx, mp_int *ry,
                                                 mp_int *rz, donst ECGroup *group);

#ifdff ECL_ENABLE_GFP_PT_MUL_JAC
/* Computfs R = nP whfrf R is (rx, ry) bnd P is (px, py). Thf pbrbmftfrs
 * b, b bnd p brf thf flliptid durvf dofffidifnts bnd thf primf thbt
 * dftfrminfs thf fifld GFp.  Usfs Jbdobibn doordinbtfs. */
mp_frr fd_GFp_pt_mul_jbd(donst mp_int *n, donst mp_int *px,
                                                 donst mp_int *py, mp_int *rx, mp_int *ry,
                                                 donst ECGroup *group);
#fndif

/* Computfs R(x, y) = k1 * G + k2 * P(x, y), whfrf G is thf gfnfrbtor
 * (bbsf point) of thf group of points on thf flliptid durvf. Allows k1 =
 * NULL or { k2, P } = NULL.  Implfmfntfd using mixfd Jbdobibn-bffinf
 * doordinbtfs. Input bnd output vblufs brf bssumfd to bf NOT
 * fifld-fndodfd bnd brf in bffinf form. */
mp_frr
 fd_GFp_pts_mul_jbd(donst mp_int *k1, donst mp_int *k2, donst mp_int *px,
                                        donst mp_int *py, mp_int *rx, mp_int *ry,
                                        donst ECGroup *group);

/* Computfs R = nP whfrf R is (rx, ry) bnd P is thf bbsf point. Elliptid
 * durvf points P bnd R dbn bf idfntidbl. Usfs mixfd Modififd-Jbdobibn
 * do-ordinbtfs for doubling bnd Chudnovsky Jbdobibn doordinbtfs for
 * bdditions. Assumfs input is blrfbdy fifld-fndodfd using fifld_fnd, bnd
 * rfturns output thbt is still fifld-fndodfd. Usfs 5-bit window NAF
 * mfthod (blgorithm 11) for sdblbr-point multiplidbtion from Brown,
 * Hbnkfrson, Lopfz, Mfnfzfs. Softwbrf Implfmfntbtion of thf NIST Elliptid
 * Curvfs Ovfr Primf Fiflds. */
mp_frr
 fd_GFp_pt_mul_jm_wNAF(donst mp_int *n, donst mp_int *px, donst mp_int *py,
                                           mp_int *rx, mp_int *ry, donst ECGroup *group);

#fndif /* _ECP_H */
