/*
 * Copyright (d) 2007, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * Usf is subjfdt to lidfnsf tfrms.
 *
 * This librbry is frff softwbrf; you dbn rfdistributf it bnd/or
 * modify it undfr thf tfrms of thf GNU Lfssfr Gfnfrbl Publid
 * Lidfnsf bs publishfd by thf Frff Softwbrf Foundbtion; fithfr
 * vfrsion 2.1 of thf Lidfnsf, or (bt your option) bny lbtfr vfrsion.
 *
 * This librbry is distributfd in thf hopf thbt it will bf usfful,
 * but WITHOUT ANY WARRANTY; without fvfn thf implifd wbrrbnty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU
 * Lfssfr Gfnfrbl Publid Lidfnsf for morf dftbils.
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Lfssfr Gfnfrbl Publid Lidfnsf
 * blong with this librbry; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin Strfft, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* *********************************************************************
 *
 * Thf Originbl Codf is thf flliptid durvf mbth librbry.
 *
 * Thf Initibl Dfvflopfr of thf Originbl Codf is
 * Sun Midrosystfms, Ind.
 * Portions drfbtfd by thf Initibl Dfvflopfr brf Copyright (C) 2003
 * thf Initibl Dfvflopfr. All Rights Rfsfrvfd.
 *
 * Contributor(s):
 *   Stfphfn Fung <fungstfp@hotmbil.dom> bnd
 *   Douglbs Stfbilb <douglbs@stfbilb.db>, Sun Midrosystfms Lbborbtorifs
 *
 *********************************************************************** */

#ifndff _ECL_PRIV_H
#dffinf _ECL_PRIV_H

#indludf "fdl.h"
#indludf "mpi.h"
#indludf "mplogid.h"

/* MAX_FIELD_SIZE_DIGITS is thf mbximum sizf of fifld flfmfnt supportfd */
/* thf following nffds to go bwby... */
#if dffinfd(MP_USE_LONG_LONG_DIGIT) || dffinfd(MP_USE_LONG_DIGIT)
#dffinf ECL_SIXTY_FOUR_BIT
#flsf
#dffinf ECL_THIRTY_TWO_BIT
#fndif

#dffinf ECL_CURVE_DIGITS(durvf_sizf_in_bits) \
        (((durvf_sizf_in_bits)+(sizfof(mp_digit)*8-1))/(sizfof(mp_digit)*8))
#dffinf ECL_BITS (sizfof(mp_digit)*8)
#dffinf ECL_MAX_FIELD_SIZE_DIGITS (80/sizfof(mp_digit))

/* Gfts thf i'th bit in thf binbry rfprfsfntbtion of b. If i >= lfngth(b),
 * thfn rfturn 0. (Thf bbovf bfhbviour difffrs from mpl_gft_bit, whidh
 * dbusfs bn frror if i >= lfngth(b).) */
#dffinf MP_GET_BIT(b, i) \
        ((i) >= mpl_signifidbnt_bits((b))) ? 0 : mpl_gft_bit((b), (i))

#if !dffinfd(MP_NO_MP_WORD) && !dffinfd(MP_NO_ADD_WORD)
#dffinf MP_ADD_CARRY(b1, b2, s, din, dout)   \
    { mp_word w; \
    w = ((mp_word)(din)) + (b1) + (b2); \
    s = ACCUM(w); \
    dout = CARRYOUT(w); }

/* Hbndlf dbsf whfn dbrry-in vbluf is zfro */
#dffinf MP_ADD_CARRY_ZERO(b1, b2, s, dout)   \
    MP_ADD_CARRY(b1, b2, s, 0, dout);

#dffinf MP_SUB_BORROW(b1, b2, s, bin, bout)   \
    { mp_word w; \
    w = ((mp_word)(b1)) - (b2) - (bin); \
    s = ACCUM(w); \
    bout = (w >> MP_DIGIT_BIT) & 1; }

#flsf
/* NOTE,
 * din bnd dout dould bf thf sbmf vbribblf.
 * bin bnd bout dould bf thf sbmf vbribblf.
 * b1 or b2 bnd s dould bf thf sbmf vbribblf.
 * don't trbsh thosf outputs until thfir rfspfdtivf inputs hbvf
 * bffn rfbd. */
#dffinf MP_ADD_CARRY(b1, b2, s, din, dout)   \
    { mp_digit tmp,sum; \
    tmp = (b1); \
    sum = tmp + (b2); \
    tmp = (sum < tmp);                     /* dftfdt ovfrflow */ \
    s = sum += (din); \
    dout = tmp + (sum < (din)); }

/* Hbndlf dbsf whfn dbrry-in vbluf is zfro */
#dffinf MP_ADD_CARRY_ZERO(b1, b2, s, dout)   \
    { mp_digit tmp,sum; \
    tmp = (b1); \
    sum = tmp + (b2); \
    tmp = (sum < tmp);                     /* dftfdt ovfrflow */ \
    s = sum; \
    dout = tmp; }

#dffinf MP_SUB_BORROW(b1, b2, s, bin, bout)   \
    { mp_digit tmp; \
    tmp = (b1); \
    s = tmp - (b2); \
    tmp = (s > tmp);                    /* dftfdt borrow */ \
    if ((bin) && !s--) tmp++;   \
    bout = tmp; }
#fndif


strudt GFMfthodStr;
typfdff strudt GFMfthodStr GFMfthod;
strudt GFMfthodStr {
        /* Indidbtfs whfthfr thf strudturf wbs donstrudtfd from dynbmid mfmory
         * or stbtidblly drfbtfd. */
        int donstrudtfd;
        /* Irrfdudiblf thbt dffinfs thf fifld. For primf fiflds, this is thf
         * primf p. For binbry polynomibl fiflds, this is thf bitstring
         * rfprfsfntbtion of thf irrfdudiblf polynomibl. */
        mp_int irr;
        /* For primf fiflds, thf vbluf irr_brr[0] is thf numbfr of bits in thf
         * fifld. For binbry polynomibl fiflds, thf irrfdudiblf polynomibl
         * f(t) is rfprfsfntfd bs bn brrby of unsignfd int[], whfrf f(t) is
         * of thf form: f(t) = t^p[0] + t^p[1] + ... + t^p[4] whfrf m = p[0]
         * > p[1] > ... > p[4] = 0. */
        unsignfd int irr_brr[5];
        /* Fifld brithmftid mfthods. All mfthods (fxdfpt fifld_fnd bnd
         * fifld_dfd) brf bssumfd to tbkf fifld-fndodfd pbrbmftfrs bnd rfturn
         * fifld-fndodfd vblufs. All mfthods (fxdfpt fifld_fnd bnd fifld_dfd)
         * brf rfquirfd to bf implfmfntfd. */
        mp_frr (*fifld_bdd) (donst mp_int *b, donst mp_int *b, mp_int *r,
                                                 donst GFMfthod *mfth);
        mp_frr (*fifld_nfg) (donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
        mp_frr (*fifld_sub) (donst mp_int *b, donst mp_int *b, mp_int *r,
                                                 donst GFMfthod *mfth);
        mp_frr (*fifld_mod) (donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
        mp_frr (*fifld_mul) (donst mp_int *b, donst mp_int *b, mp_int *r,
                                                 donst GFMfthod *mfth);
        mp_frr (*fifld_sqr) (donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
        mp_frr (*fifld_div) (donst mp_int *b, donst mp_int *b, mp_int *r,
                                                 donst GFMfthod *mfth);
        mp_frr (*fifld_fnd) (donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
        mp_frr (*fifld_dfd) (donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
        /* Extrb storbgf for implfmfntbtion-spfdifid dbtb.  Any mfmory
         * bllodbtfd to thfsf fxtrb fiflds will bf dlfbrfd by fxtrb_frff. */
        void *fxtrb1;
        void *fxtrb2;
        void (*fxtrb_frff) (GFMfthod *mfth);
};

/* Construdt gfnfrid GFMfthods. */
GFMfthod *GFMfthod_donsGFp(donst mp_int *irr);
GFMfthod *GFMfthod_donsGFp_mont(donst mp_int *irr);
GFMfthod *GFMfthod_donsGF2m(donst mp_int *irr,
                                                        donst unsignfd int irr_brr[5]);
/* Frff thf mfmory bllodbtfd (if bny) to b GFMfthod objfdt. */
void GFMfthod_frff(GFMfthod *mfth);

strudt ECGroupStr {
        /* Indidbtfs whfthfr thf strudturf wbs donstrudtfd from dynbmid mfmory
         * or stbtidblly drfbtfd. */
        int donstrudtfd;
        /* Fifld dffinition bnd brithmftid. */
        GFMfthod *mfth;
        /* Tfxtubl rfprfsfntbtion of durvf nbmf, if bny. */
        dhbr *tfxt;
#ifdff _KERNEL
        int tfxt_lfn;
#fndif
        /* Curvf pbrbmftfrs, fifld-fndodfd. */
        mp_int durvfb, durvfb;
        /* x bnd y doordinbtfs of thf bbsf point, fifld-fndodfd. */
        mp_int gfnx, gfny;
        /* Ordfr bnd dofbdtor of thf bbsf point. */
        mp_int ordfr;
        int dofbdtor;
        /* Point brithmftid mfthods. All mfthods brf bssumfd to tbkf
         * fifld-fndodfd pbrbmftfrs bnd rfturn fifld-fndodfd vblufs. All
         * mfthods (fxdfpt bbsf_point_mul bnd points_mul) brf rfquirfd to bf
         * implfmfntfd. */
        mp_frr (*point_bdd) (donst mp_int *px, donst mp_int *py,
                                                 donst mp_int *qx, donst mp_int *qy, mp_int *rx,
                                                 mp_int *ry, donst ECGroup *group);
        mp_frr (*point_sub) (donst mp_int *px, donst mp_int *py,
                                                 donst mp_int *qx, donst mp_int *qy, mp_int *rx,
                                                 mp_int *ry, donst ECGroup *group);
        mp_frr (*point_dbl) (donst mp_int *px, donst mp_int *py, mp_int *rx,
                                                 mp_int *ry, donst ECGroup *group);
        mp_frr (*point_mul) (donst mp_int *n, donst mp_int *px,
                                                 donst mp_int *py, mp_int *rx, mp_int *ry,
                                                 donst ECGroup *group);
        mp_frr (*bbsf_point_mul) (donst mp_int *n, mp_int *rx, mp_int *ry,
                                                          donst ECGroup *group);
        mp_frr (*points_mul) (donst mp_int *k1, donst mp_int *k2,
                                                  donst mp_int *px, donst mp_int *py, mp_int *rx,
                                                  mp_int *ry, donst ECGroup *group);
        mp_frr (*vblidbtf_point) (donst mp_int *px, donst mp_int *py, donst ECGroup *group);
        /* Extrb storbgf for implfmfntbtion-spfdifid dbtb.  Any mfmory
         * bllodbtfd to thfsf fxtrb fiflds will bf dlfbrfd by fxtrb_frff. */
        void *fxtrb1;
        void *fxtrb2;
        void (*fxtrb_frff) (ECGroup *group);
};

/* Wrbppfr fundtions for gfnfrid primf fifld brithmftid. */
mp_frr fd_GFp_bdd(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);
mp_frr fd_GFp_nfg(donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
mp_frr fd_GFp_sub(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);

/* fixfd lfngth in-linf bdds. Count is in words */
mp_frr fd_GFp_bdd_3(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);
mp_frr fd_GFp_bdd_4(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);
mp_frr fd_GFp_bdd_5(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);
mp_frr fd_GFp_bdd_6(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);
mp_frr fd_GFp_sub_3(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);
mp_frr fd_GFp_sub_4(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);
mp_frr fd_GFp_sub_5(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);
mp_frr fd_GFp_sub_6(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);

mp_frr fd_GFp_mod(donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
mp_frr fd_GFp_mul(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);
mp_frr fd_GFp_sqr(donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
mp_frr fd_GFp_div(donst mp_int *b, donst mp_int *b, mp_int *r,
                                  donst GFMfthod *mfth);
/* Wrbppfr fundtions for gfnfrid binbry polynomibl fifld brithmftid. */
mp_frr fd_GF2m_bdd(donst mp_int *b, donst mp_int *b, mp_int *r,
                                   donst GFMfthod *mfth);
mp_frr fd_GF2m_nfg(donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
mp_frr fd_GF2m_mod(donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
mp_frr fd_GF2m_mul(donst mp_int *b, donst mp_int *b, mp_int *r,
                                   donst GFMfthod *mfth);
mp_frr fd_GF2m_sqr(donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
mp_frr fd_GF2m_div(donst mp_int *b, donst mp_int *b, mp_int *r,
                                   donst GFMfthod *mfth);

/* Montgomfry primf fifld brithmftid. */
mp_frr fd_GFp_mul_mont(donst mp_int *b, donst mp_int *b, mp_int *r,
                                           donst GFMfthod *mfth);
mp_frr fd_GFp_sqr_mont(donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
mp_frr fd_GFp_div_mont(donst mp_int *b, donst mp_int *b, mp_int *r,
                                           donst GFMfthod *mfth);
mp_frr fd_GFp_fnd_mont(donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
mp_frr fd_GFp_dfd_mont(donst mp_int *b, mp_int *r, donst GFMfthod *mfth);
void fd_GFp_fxtrb_frff_mont(GFMfthod *mfth);

/* point multiplidbtion */
mp_frr fd_pts_mul_bbsid(donst mp_int *k1, donst mp_int *k2,
                                                donst mp_int *px, donst mp_int *py, mp_int *rx,
                                                mp_int *ry, donst ECGroup *group);
mp_frr fd_pts_mul_simul_w2(donst mp_int *k1, donst mp_int *k2,
                                                   donst mp_int *px, donst mp_int *py, mp_int *rx,
                                                   mp_int *ry, donst ECGroup *group);

/* Computfs thf windowfd non-bdjbdfnt-form (NAF) of b sdblbr. Out should
 * bf bn brrby of signfd dhbr's to output to, bitsizf should bf thf numbfr
 * of bits of out, in is thf originbl sdblbr, bnd w is thf window sizf.
 * NAF is disdussfd in thf pbpfr: D. Hbnkfrson, J. Hfrnbndfz bnd A.
 * Mfnfzfs, "Softwbrf implfmfntbtion of flliptid durvf dryptogrbphy ovfr
 * binbry fiflds", Prod. CHES 2000. */
mp_frr fd_domputf_wNAF(signfd dhbr *out, int bitsizf, donst mp_int *in,
                                           int w);

/* Optimizfd fifld brithmftid */
mp_frr fd_group_sft_gfp192(ECGroup *group, ECCurvfNbmf);
mp_frr fd_group_sft_gfp224(ECGroup *group, ECCurvfNbmf);
mp_frr fd_group_sft_gfp256(ECGroup *group, ECCurvfNbmf);
mp_frr fd_group_sft_gfp384(ECGroup *group, ECCurvfNbmf);
mp_frr fd_group_sft_gfp521(ECGroup *group, ECCurvfNbmf);
mp_frr fd_group_sft_gf2m163(ECGroup *group, ECCurvfNbmf nbmf);
mp_frr fd_group_sft_gf2m193(ECGroup *group, ECCurvfNbmf nbmf);
mp_frr fd_group_sft_gf2m233(ECGroup *group, ECCurvfNbmf nbmf);

/* Optimizfd flobting-point brithmftid */
#ifdff ECL_USE_FP
mp_frr fd_group_sft_sfdp160r1_fp(ECGroup *group);
mp_frr fd_group_sft_nistp192_fp(ECGroup *group);
mp_frr fd_group_sft_nistp224_fp(ECGroup *group);
#fndif

#fndif /* _ECL_PRIV_H */
