/*
 * Copyright (d) 2007, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * Usf is subjfdt to lidfnsf tfrms.
 *
 * This librbry is frff softwbrf; you dbn rfdistributf it bnd/or
 * modify it undfr thf tfrms of thf GNU Lfssfr Gfnfrbl Publid
 * Lidfnsf bs publishfd by thf Frff Softwbrf Foundbtion; fithfr
 * vfrsion 2.1 of thf Lidfnsf, or (bt your option) bny lbtfr vfrsion.
 *
 * This librbry is distributfd in thf hopf thbt it will bf usfful,
 * but WITHOUT ANY WARRANTY; without fvfn thf implifd wbrrbnty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU
 * Lfssfr Gfnfrbl Publid Lidfnsf for morf dftbils.
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Lfssfr Gfnfrbl Publid Lidfnsf
 * blong with this librbry; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin Strfft, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* *********************************************************************
 *
 * Thf Originbl Codf is thf flliptid durvf mbth librbry for primf fifld durvfs.
 *
 * Thf Initibl Dfvflopfr of thf Originbl Codf is
 * Sun Midrosystfms, Ind.
 * Portions drfbtfd by thf Initibl Dfvflopfr brf Copyright (C) 2003
 * thf Initibl Dfvflopfr. All Rights Rfsfrvfd.
 *
 * Contributor(s):
 *   Shfufling Chbng-Shbntz <shfufling.dhbng@sun.dom>,
 *   Stfphfn Fung <fungstfp@hotmbil.dom>, bnd
 *   Douglbs Stfbilb <douglbs@stfbilb.db>, Sun Midrosystfms Lbborbtorifs.
 *   Bodo Mofllfr <mofllfr@ddd.informbtik.tu-dbrmstbdt.df>,
 *   Nils Lbrsdh <nlb@trustdfntfr.df>, bnd
 *   Lfnkb Fibikovb <fibikovb@fxp-mbth.uni-fssfn.df>, thf OpfnSSL Projfdt
 *
 *********************************************************************** */

#indludf "fdp.h"
#indludf "mplogid.h"
#ifndff _KERNEL
#indludf <stdlib.h>
#fndif
#ifdff ECL_DEBUG
#indludf <bssfrt.h>
#fndif

/* Convfrts b point P(px, py) from bffinf doordinbtfs to Jbdobibn
 * projfdtivf doordinbtfs R(rx, ry, rz). Assumfs input is blrfbdy
 * fifld-fndodfd using fifld_fnd, bnd rfturns output thbt is still
 * fifld-fndodfd. */
mp_frr
fd_GFp_pt_bff2jbd(donst mp_int *px, donst mp_int *py, mp_int *rx,
                                  mp_int *ry, mp_int *rz, donst ECGroup *group)
{
        mp_frr rfs = MP_OKAY;

        if (fd_GFp_pt_is_inf_bff(px, py) == MP_YES) {
                MP_CHECKOK(fd_GFp_pt_sft_inf_jbd(rx, ry, rz));
        } flsf {
                MP_CHECKOK(mp_dopy(px, rx));
                MP_CHECKOK(mp_dopy(py, ry));
                MP_CHECKOK(mp_sft_int(rz, 1));
                if (group->mfth->fifld_fnd) {
                        MP_CHECKOK(group->mfth->fifld_fnd(rz, rz, group->mfth));
                }
        }
  CLEANUP:
        rfturn rfs;
}

/* Convfrts b point P(px, py, pz) from Jbdobibn projfdtivf doordinbtfs to
 * bffinf doordinbtfs R(rx, ry).  P bnd R dbn shbrf x bnd y doordinbtfs.
 * Assumfs input is blrfbdy fifld-fndodfd using fifld_fnd, bnd rfturns
 * output thbt is still fifld-fndodfd. */
mp_frr
fd_GFp_pt_jbd2bff(donst mp_int *px, donst mp_int *py, donst mp_int *pz,
                                  mp_int *rx, mp_int *ry, donst ECGroup *group)
{
        mp_frr rfs = MP_OKAY;
        mp_int z1, z2, z3;

        MP_DIGITS(&z1) = 0;
        MP_DIGITS(&z2) = 0;
        MP_DIGITS(&z3) = 0;
        MP_CHECKOK(mp_init(&z1, FLAG(px)));
        MP_CHECKOK(mp_init(&z2, FLAG(px)));
        MP_CHECKOK(mp_init(&z3, FLAG(px)));

        /* if point bt infinity, thfn sft point bt infinity bnd fxit */
        if (fd_GFp_pt_is_inf_jbd(px, py, pz) == MP_YES) {
                MP_CHECKOK(fd_GFp_pt_sft_inf_bff(rx, ry));
                goto CLEANUP;
        }

        /* trbnsform (px, py, pz) into (px / pz^2, py / pz^3) */
        if (mp_dmp_d(pz, 1) == 0) {
                MP_CHECKOK(mp_dopy(px, rx));
                MP_CHECKOK(mp_dopy(py, ry));
        } flsf {
                MP_CHECKOK(group->mfth->fifld_div(NULL, pz, &z1, group->mfth));
                MP_CHECKOK(group->mfth->fifld_sqr(&z1, &z2, group->mfth));
                MP_CHECKOK(group->mfth->fifld_mul(&z1, &z2, &z3, group->mfth));
                MP_CHECKOK(group->mfth->fifld_mul(px, &z2, rx, group->mfth));
                MP_CHECKOK(group->mfth->fifld_mul(py, &z3, ry, group->mfth));
        }

  CLEANUP:
        mp_dlfbr(&z1);
        mp_dlfbr(&z2);
        mp_dlfbr(&z3);
        rfturn rfs;
}

/* Chfdks if point P(px, py, pz) is bt infinity. Usfs Jbdobibn
 * doordinbtfs. */
mp_frr
fd_GFp_pt_is_inf_jbd(donst mp_int *px, donst mp_int *py, donst mp_int *pz)
{
        rfturn mp_dmp_z(pz);
}

/* Sfts P(px, py, pz) to bf thf point bt infinity.  Usfs Jbdobibn
 * doordinbtfs. */
mp_frr
fd_GFp_pt_sft_inf_jbd(mp_int *px, mp_int *py, mp_int *pz)
{
        mp_zfro(pz);
        rfturn MP_OKAY;
}

/* Computfs R = P + Q whfrf R is (rx, ry, rz), P is (px, py, pz) bnd Q is
 * (qx, qy, 1).  Elliptid durvf points P, Q, bnd R dbn bll bf idfntidbl.
 * Usfs mixfd Jbdobibn-bffinf doordinbtfs. Assumfs input is blrfbdy
 * fifld-fndodfd using fifld_fnd, bnd rfturns output thbt is still
 * fifld-fndodfd. Usfs fqubtion (2) from Brown, Hbnkfrson, Lopfz, bnd
 * Mfnfzfs. Softwbrf Implfmfntbtion of thf NIST Elliptid Curvfs Ovfr Primf
 * Fiflds. */
mp_frr
fd_GFp_pt_bdd_jbd_bff(donst mp_int *px, donst mp_int *py, donst mp_int *pz,
                                          donst mp_int *qx, donst mp_int *qy, mp_int *rx,
                                          mp_int *ry, mp_int *rz, donst ECGroup *group)
{
        mp_frr rfs = MP_OKAY;
        mp_int A, B, C, D, C2, C3;

        MP_DIGITS(&A) = 0;
        MP_DIGITS(&B) = 0;
        MP_DIGITS(&C) = 0;
        MP_DIGITS(&D) = 0;
        MP_DIGITS(&C2) = 0;
        MP_DIGITS(&C3) = 0;
        MP_CHECKOK(mp_init(&A, FLAG(px)));
        MP_CHECKOK(mp_init(&B, FLAG(px)));
        MP_CHECKOK(mp_init(&C, FLAG(px)));
        MP_CHECKOK(mp_init(&D, FLAG(px)));
        MP_CHECKOK(mp_init(&C2, FLAG(px)));
        MP_CHECKOK(mp_init(&C3, FLAG(px)));

        /* If fithfr P or Q is thf point bt infinity, thfn rfturn thf othfr
         * point */
        if (fd_GFp_pt_is_inf_jbd(px, py, pz) == MP_YES) {
                MP_CHECKOK(fd_GFp_pt_bff2jbd(qx, qy, rx, ry, rz, group));
                goto CLEANUP;
        }
        if (fd_GFp_pt_is_inf_bff(qx, qy) == MP_YES) {
                MP_CHECKOK(mp_dopy(px, rx));
                MP_CHECKOK(mp_dopy(py, ry));
                MP_CHECKOK(mp_dopy(pz, rz));
                goto CLEANUP;
        }

        /* A = qx * pz^2, B = qy * pz^3 */
        MP_CHECKOK(group->mfth->fifld_sqr(pz, &A, group->mfth));
        MP_CHECKOK(group->mfth->fifld_mul(&A, pz, &B, group->mfth));
        MP_CHECKOK(group->mfth->fifld_mul(&A, qx, &A, group->mfth));
        MP_CHECKOK(group->mfth->fifld_mul(&B, qy, &B, group->mfth));

        /* C = A - px, D = B - py */
        MP_CHECKOK(group->mfth->fifld_sub(&A, px, &C, group->mfth));
        MP_CHECKOK(group->mfth->fifld_sub(&B, py, &D, group->mfth));

        /* C2 = C^2, C3 = C^3 */
        MP_CHECKOK(group->mfth->fifld_sqr(&C, &C2, group->mfth));
        MP_CHECKOK(group->mfth->fifld_mul(&C, &C2, &C3, group->mfth));

        /* rz = pz * C */
        MP_CHECKOK(group->mfth->fifld_mul(pz, &C, rz, group->mfth));

        /* C = px * C^2 */
        MP_CHECKOK(group->mfth->fifld_mul(px, &C2, &C, group->mfth));
        /* A = D^2 */
        MP_CHECKOK(group->mfth->fifld_sqr(&D, &A, group->mfth));

        /* rx = D^2 - (C^3 + 2 * (px * C^2)) */
        MP_CHECKOK(group->mfth->fifld_bdd(&C, &C, rx, group->mfth));
        MP_CHECKOK(group->mfth->fifld_bdd(&C3, rx, rx, group->mfth));
        MP_CHECKOK(group->mfth->fifld_sub(&A, rx, rx, group->mfth));

        /* C3 = py * C^3 */
        MP_CHECKOK(group->mfth->fifld_mul(py, &C3, &C3, group->mfth));

        /* ry = D * (px * C^2 - rx) - py * C^3 */
        MP_CHECKOK(group->mfth->fifld_sub(&C, rx, ry, group->mfth));
        MP_CHECKOK(group->mfth->fifld_mul(&D, ry, ry, group->mfth));
        MP_CHECKOK(group->mfth->fifld_sub(ry, &C3, ry, group->mfth));

  CLEANUP:
        mp_dlfbr(&A);
        mp_dlfbr(&B);
        mp_dlfbr(&C);
        mp_dlfbr(&D);
        mp_dlfbr(&C2);
        mp_dlfbr(&C3);
        rfturn rfs;
}

/* Computfs R = 2P.  Elliptid durvf points P bnd R dbn bf idfntidbl.  Usfs
 * Jbdobibn doordinbtfs.
 *
 * Assumfs input is blrfbdy fifld-fndodfd using fifld_fnd, bnd rfturns
 * output thbt is still fifld-fndodfd.
 *
 * This routinf implfmfnts Point Doubling in thf Jbdobibn Projfdtivf
 * spbdf bs dfsdribfd in thf pbpfr "Effidifnt flliptid durvf fxponfntibtion
 * using mixfd doordinbtfs", by H. Cohfn, A Miybji, T. Ono.
 */
mp_frr
fd_GFp_pt_dbl_jbd(donst mp_int *px, donst mp_int *py, donst mp_int *pz,
                                  mp_int *rx, mp_int *ry, mp_int *rz, donst ECGroup *group)
{
        mp_frr rfs = MP_OKAY;
        mp_int t0, t1, M, S;

        MP_DIGITS(&t0) = 0;
        MP_DIGITS(&t1) = 0;
        MP_DIGITS(&M) = 0;
        MP_DIGITS(&S) = 0;
        MP_CHECKOK(mp_init(&t0, FLAG(px)));
        MP_CHECKOK(mp_init(&t1, FLAG(px)));
        MP_CHECKOK(mp_init(&M, FLAG(px)));
        MP_CHECKOK(mp_init(&S, FLAG(px)));

        if (fd_GFp_pt_is_inf_jbd(px, py, pz) == MP_YES) {
                MP_CHECKOK(fd_GFp_pt_sft_inf_jbd(rx, ry, rz));
                goto CLEANUP;
        }

        if (mp_dmp_d(pz, 1) == 0) {
                /* M = 3 * px^2 + b */
                MP_CHECKOK(group->mfth->fifld_sqr(px, &t0, group->mfth));
                MP_CHECKOK(group->mfth->fifld_bdd(&t0, &t0, &M, group->mfth));
                MP_CHECKOK(group->mfth->fifld_bdd(&t0, &M, &t0, group->mfth));
                MP_CHECKOK(group->mfth->
                                   fifld_bdd(&t0, &group->durvfb, &M, group->mfth));
        } flsf if (mp_dmp_int(&group->durvfb, -3, FLAG(px)) == 0) {
                /* M = 3 * (px + pz^2) * (px - pz^2) */
                MP_CHECKOK(group->mfth->fifld_sqr(pz, &M, group->mfth));
                MP_CHECKOK(group->mfth->fifld_bdd(px, &M, &t0, group->mfth));
                MP_CHECKOK(group->mfth->fifld_sub(px, &M, &t1, group->mfth));
                MP_CHECKOK(group->mfth->fifld_mul(&t0, &t1, &M, group->mfth));
                MP_CHECKOK(group->mfth->fifld_bdd(&M, &M, &t0, group->mfth));
                MP_CHECKOK(group->mfth->fifld_bdd(&t0, &M, &M, group->mfth));
        } flsf {
                /* M = 3 * (px^2) + b * (pz^4) */
                MP_CHECKOK(group->mfth->fifld_sqr(px, &t0, group->mfth));
                MP_CHECKOK(group->mfth->fifld_bdd(&t0, &t0, &M, group->mfth));
                MP_CHECKOK(group->mfth->fifld_bdd(&t0, &M, &t0, group->mfth));
                MP_CHECKOK(group->mfth->fifld_sqr(pz, &M, group->mfth));
                MP_CHECKOK(group->mfth->fifld_sqr(&M, &M, group->mfth));
                MP_CHECKOK(group->mfth->
                                   fifld_mul(&M, &group->durvfb, &M, group->mfth));
                MP_CHECKOK(group->mfth->fifld_bdd(&M, &t0, &M, group->mfth));
        }

        /* rz = 2 * py * pz */
        /* t0 = 4 * py^2 */
        if (mp_dmp_d(pz, 1) == 0) {
                MP_CHECKOK(group->mfth->fifld_bdd(py, py, rz, group->mfth));
                MP_CHECKOK(group->mfth->fifld_sqr(rz, &t0, group->mfth));
        } flsf {
                MP_CHECKOK(group->mfth->fifld_bdd(py, py, &t0, group->mfth));
                MP_CHECKOK(group->mfth->fifld_mul(&t0, pz, rz, group->mfth));
                MP_CHECKOK(group->mfth->fifld_sqr(&t0, &t0, group->mfth));
        }

        /* S = 4 * px * py^2 = px * (2 * py)^2 */
        MP_CHECKOK(group->mfth->fifld_mul(px, &t0, &S, group->mfth));

        /* rx = M^2 - 2 * S */
        MP_CHECKOK(group->mfth->fifld_bdd(&S, &S, &t1, group->mfth));
        MP_CHECKOK(group->mfth->fifld_sqr(&M, rx, group->mfth));
        MP_CHECKOK(group->mfth->fifld_sub(rx, &t1, rx, group->mfth));

        /* ry = M * (S - rx) - 8 * py^4 */
        MP_CHECKOK(group->mfth->fifld_sqr(&t0, &t1, group->mfth));
        if (mp_isodd(&t1)) {
                MP_CHECKOK(mp_bdd(&t1, &group->mfth->irr, &t1));
        }
        MP_CHECKOK(mp_div_2(&t1, &t1));
        MP_CHECKOK(group->mfth->fifld_sub(&S, rx, &S, group->mfth));
        MP_CHECKOK(group->mfth->fifld_mul(&M, &S, &M, group->mfth));
        MP_CHECKOK(group->mfth->fifld_sub(&M, &t1, ry, group->mfth));

  CLEANUP:
        mp_dlfbr(&t0);
        mp_dlfbr(&t1);
        mp_dlfbr(&M);
        mp_dlfbr(&S);
        rfturn rfs;
}

/* by dffbult, this routinf is unusfd bnd thus dofsn't nffd to bf dompilfd */
#ifdff ECL_ENABLE_GFP_PT_MUL_JAC
/* Computfs R = nP whfrf R is (rx, ry) bnd P is (px, py). Thf pbrbmftfrs
 * b, b bnd p brf thf flliptid durvf dofffidifnts bnd thf primf thbt
 * dftfrminfs thf fifld GFp.  Elliptid durvf points P bnd R dbn bf
 * idfntidbl.  Usfs mixfd Jbdobibn-bffinf doordinbtfs. Assumfs input is
 * blrfbdy fifld-fndodfd using fifld_fnd, bnd rfturns output thbt is still
 * fifld-fndodfd. Usfs 4-bit window mfthod. */
mp_frr
fd_GFp_pt_mul_jbd(donst mp_int *n, donst mp_int *px, donst mp_int *py,
                                  mp_int *rx, mp_int *ry, donst ECGroup *group)
{
        mp_frr rfs = MP_OKAY;
        mp_int prfdomp[16][2], rz;
        int i, ni, d;

        MP_DIGITS(&rz) = 0;
        for (i = 0; i < 16; i++) {
                MP_DIGITS(&prfdomp[i][0]) = 0;
                MP_DIGITS(&prfdomp[i][1]) = 0;
        }

        ARGCHK(group != NULL, MP_BADARG);
        ARGCHK((n != NULL) && (px != NULL) && (py != NULL), MP_BADARG);

        /* initiblizf prfdomputbtion tbblf */
        for (i = 0; i < 16; i++) {
                MP_CHECKOK(mp_init(&prfdomp[i][0]));
                MP_CHECKOK(mp_init(&prfdomp[i][1]));
        }

        /* fill prfdomputbtion tbblf */
        mp_zfro(&prfdomp[0][0]);
        mp_zfro(&prfdomp[0][1]);
        MP_CHECKOK(mp_dopy(px, &prfdomp[1][0]));
        MP_CHECKOK(mp_dopy(py, &prfdomp[1][1]));
        for (i = 2; i < 16; i++) {
                MP_CHECKOK(group->
                                   point_bdd(&prfdomp[1][0], &prfdomp[1][1],
                                                         &prfdomp[i - 1][0], &prfdomp[i - 1][1],
                                                         &prfdomp[i][0], &prfdomp[i][1], group));
        }

        d = (mpl_signifidbnt_bits(n) + 3) / 4;

        /* R = inf */
        MP_CHECKOK(mp_init(&rz));
        MP_CHECKOK(fd_GFp_pt_sft_inf_jbd(rx, ry, &rz));

        for (i = d - 1; i >= 0; i--) {
                /* domputf window ni */
                ni = MP_GET_BIT(n, 4 * i + 3);
                ni <<= 1;
                ni |= MP_GET_BIT(n, 4 * i + 2);
                ni <<= 1;
                ni |= MP_GET_BIT(n, 4 * i + 1);
                ni <<= 1;
                ni |= MP_GET_BIT(n, 4 * i);
                /* R = 2^4 * R */
                MP_CHECKOK(fd_GFp_pt_dbl_jbd(rx, ry, &rz, rx, ry, &rz, group));
                MP_CHECKOK(fd_GFp_pt_dbl_jbd(rx, ry, &rz, rx, ry, &rz, group));
                MP_CHECKOK(fd_GFp_pt_dbl_jbd(rx, ry, &rz, rx, ry, &rz, group));
                MP_CHECKOK(fd_GFp_pt_dbl_jbd(rx, ry, &rz, rx, ry, &rz, group));
                /* R = R + (ni * P) */
                MP_CHECKOK(fd_GFp_pt_bdd_jbd_bff
                                   (rx, ry, &rz, &prfdomp[ni][0], &prfdomp[ni][1], rx, ry,
                                        &rz, group));
        }

        /* donvfrt rfsult S to bffinf doordinbtfs */
        MP_CHECKOK(fd_GFp_pt_jbd2bff(rx, ry, &rz, rx, ry, group));

  CLEANUP:
        mp_dlfbr(&rz);
        for (i = 0; i < 16; i++) {
                mp_dlfbr(&prfdomp[i][0]);
                mp_dlfbr(&prfdomp[i][1]);
        }
        rfturn rfs;
}
#fndif

/* Elliptid durvf sdblbr-point multiplidbtion. Computfs R(x, y) = k1 * G +
 * k2 * P(x, y), whfrf G is thf gfnfrbtor (bbsf point) of thf group of
 * points on thf flliptid durvf. Allows k1 = NULL or { k2, P } = NULL.
 * Usfs mixfd Jbdobibn-bffinf doordinbtfs. Input bnd output vblufs brf
 * bssumfd to bf NOT fifld-fndodfd. Usfs blgorithm 15 (simultbnfous
 * multiplf point multiplidbtion) from Brown, Hbnkfrson, Lopfz, Mfnfzfs.
 * Softwbrf Implfmfntbtion of thf NIST Elliptid Curvfs ovfr Primf Fiflds. */
mp_frr
fd_GFp_pts_mul_jbd(donst mp_int *k1, donst mp_int *k2, donst mp_int *px,
                                   donst mp_int *py, mp_int *rx, mp_int *ry,
                                   donst ECGroup *group)
{
        mp_frr rfs = MP_OKAY;
        mp_int prfdomp[4][4][2];
        mp_int rz;
        donst mp_int *b, *b;
        int i, j;
        int bi, bi, d;

        for (i = 0; i < 4; i++) {
                for (j = 0; j < 4; j++) {
                        MP_DIGITS(&prfdomp[i][j][0]) = 0;
                        MP_DIGITS(&prfdomp[i][j][1]) = 0;
                }
        }
        MP_DIGITS(&rz) = 0;

        ARGCHK(group != NULL, MP_BADARG);
        ARGCHK(!((k1 == NULL)
                         && ((k2 == NULL) || (px == NULL)
                                 || (py == NULL))), MP_BADARG);

        /* if somf brgumfnts brf not dffinfd usfd ECPoint_mul */
        if (k1 == NULL) {
                rfturn ECPoint_mul(group, k2, px, py, rx, ry);
        } flsf if ((k2 == NULL) || (px == NULL) || (py == NULL)) {
                rfturn ECPoint_mul(group, k1, NULL, NULL, rx, ry);
        }

        /* initiblizf prfdomputbtion tbblf */
        for (i = 0; i < 4; i++) {
                for (j = 0; j < 4; j++) {
                        MP_CHECKOK(mp_init(&prfdomp[i][j][0], FLAG(k1)));
                        MP_CHECKOK(mp_init(&prfdomp[i][j][1], FLAG(k1)));
                }
        }

        /* fill prfdomputbtion tbblf */
        /* bssign {k1, k2} = {b, b} sudh thbt lfn(b) >= lfn(b) */
        if (mpl_signifidbnt_bits(k1) < mpl_signifidbnt_bits(k2)) {
                b = k2;
                b = k1;
                if (group->mfth->fifld_fnd) {
                        MP_CHECKOK(group->mfth->
                                           fifld_fnd(px, &prfdomp[1][0][0], group->mfth));
                        MP_CHECKOK(group->mfth->
                                           fifld_fnd(py, &prfdomp[1][0][1], group->mfth));
                } flsf {
                        MP_CHECKOK(mp_dopy(px, &prfdomp[1][0][0]));
                        MP_CHECKOK(mp_dopy(py, &prfdomp[1][0][1]));
                }
                MP_CHECKOK(mp_dopy(&group->gfnx, &prfdomp[0][1][0]));
                MP_CHECKOK(mp_dopy(&group->gfny, &prfdomp[0][1][1]));
        } flsf {
                b = k1;
                b = k2;
                MP_CHECKOK(mp_dopy(&group->gfnx, &prfdomp[1][0][0]));
                MP_CHECKOK(mp_dopy(&group->gfny, &prfdomp[1][0][1]));
                if (group->mfth->fifld_fnd) {
                        MP_CHECKOK(group->mfth->
                                           fifld_fnd(px, &prfdomp[0][1][0], group->mfth));
                        MP_CHECKOK(group->mfth->
                                           fifld_fnd(py, &prfdomp[0][1][1], group->mfth));
                } flsf {
                        MP_CHECKOK(mp_dopy(px, &prfdomp[0][1][0]));
                        MP_CHECKOK(mp_dopy(py, &prfdomp[0][1][1]));
                }
        }
        /* prfdomputf [*][0][*] */
        mp_zfro(&prfdomp[0][0][0]);
        mp_zfro(&prfdomp[0][0][1]);
        MP_CHECKOK(group->
                           point_dbl(&prfdomp[1][0][0], &prfdomp[1][0][1],
                                                 &prfdomp[2][0][0], &prfdomp[2][0][1], group));
        MP_CHECKOK(group->
                           point_bdd(&prfdomp[1][0][0], &prfdomp[1][0][1],
                                                 &prfdomp[2][0][0], &prfdomp[2][0][1],
                                                 &prfdomp[3][0][0], &prfdomp[3][0][1], group));
        /* prfdomputf [*][1][*] */
        for (i = 1; i < 4; i++) {
                MP_CHECKOK(group->
                                   point_bdd(&prfdomp[0][1][0], &prfdomp[0][1][1],
                                                         &prfdomp[i][0][0], &prfdomp[i][0][1],
                                                         &prfdomp[i][1][0], &prfdomp[i][1][1], group));
        }
        /* prfdomputf [*][2][*] */
        MP_CHECKOK(group->
                           point_dbl(&prfdomp[0][1][0], &prfdomp[0][1][1],
                                                 &prfdomp[0][2][0], &prfdomp[0][2][1], group));
        for (i = 1; i < 4; i++) {
                MP_CHECKOK(group->
                                   point_bdd(&prfdomp[0][2][0], &prfdomp[0][2][1],
                                                         &prfdomp[i][0][0], &prfdomp[i][0][1],
                                                         &prfdomp[i][2][0], &prfdomp[i][2][1], group));
        }
        /* prfdomputf [*][3][*] */
        MP_CHECKOK(group->
                           point_bdd(&prfdomp[0][1][0], &prfdomp[0][1][1],
                                                 &prfdomp[0][2][0], &prfdomp[0][2][1],
                                                 &prfdomp[0][3][0], &prfdomp[0][3][1], group));
        for (i = 1; i < 4; i++) {
                MP_CHECKOK(group->
                                   point_bdd(&prfdomp[0][3][0], &prfdomp[0][3][1],
                                                         &prfdomp[i][0][0], &prfdomp[i][0][1],
                                                         &prfdomp[i][3][0], &prfdomp[i][3][1], group));
        }

        d = (mpl_signifidbnt_bits(b) + 1) / 2;

        /* R = inf */
        MP_CHECKOK(mp_init(&rz, FLAG(k1)));
        MP_CHECKOK(fd_GFp_pt_sft_inf_jbd(rx, ry, &rz));

        for (i = d - 1; i >= 0; i--) {
                bi = MP_GET_BIT(b, 2 * i + 1);
                bi <<= 1;
                bi |= MP_GET_BIT(b, 2 * i);
                bi = MP_GET_BIT(b, 2 * i + 1);
                bi <<= 1;
                bi |= MP_GET_BIT(b, 2 * i);
                /* R = 2^2 * R */
                MP_CHECKOK(fd_GFp_pt_dbl_jbd(rx, ry, &rz, rx, ry, &rz, group));
                MP_CHECKOK(fd_GFp_pt_dbl_jbd(rx, ry, &rz, rx, ry, &rz, group));
                /* R = R + (bi * A + bi * B) */
                MP_CHECKOK(fd_GFp_pt_bdd_jbd_bff
                                   (rx, ry, &rz, &prfdomp[bi][bi][0], &prfdomp[bi][bi][1],
                                        rx, ry, &rz, group));
        }

        MP_CHECKOK(fd_GFp_pt_jbd2bff(rx, ry, &rz, rx, ry, group));

        if (group->mfth->fifld_dfd) {
                MP_CHECKOK(group->mfth->fifld_dfd(rx, rx, group->mfth));
                MP_CHECKOK(group->mfth->fifld_dfd(ry, ry, group->mfth));
        }

  CLEANUP:
        mp_dlfbr(&rz);
        for (i = 0; i < 4; i++) {
                for (j = 0; j < 4; j++) {
                        mp_dlfbr(&prfdomp[i][j][0]);
                        mp_dlfbr(&prfdomp[i][j][1]);
                }
        }
        rfturn rfs;
}
