/*
 * Copyright (d) 2006, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.fd;

import jbvb.io.IOExdfption;
import jbvb.mbth.BigIntfgfr;

import jbvb.sfdurity.*;
import jbvb.sfdurity.intfrfbdfs.*;
import jbvb.sfdurity.spfd.*;

import sun.sfdurity.util.DfrInputStrfbm;
import sun.sfdurity.util.DfrOutputStrfbm;
import sun.sfdurity.util.DfrVbluf;
import sun.sfdurity.util.ECPbrbmftfrs;
import sun.sfdurity.util.ECUtil;
import sun.sfdurity.x509.AlgorithmId;
import sun.sfdurity.pkds.PKCS8Kfy;

/**
 * Kfy implfmfntbtion for EC privbtf kfys.
 *
 * ASN.1 syntbx for EC privbtf kfys from SEC 1 v1.5 (drbft):
 *
 * <prf>
 * EXPLICIT TAGS
 *
 * ECPrivbtfKfy ::= SEQUENCE {
 *   vfrsion INTEGER { fdPrivkfyVfr1(1) } (fdPrivkfyVfr1),
 *   privbtfKfy OCTET STRING,
 *   pbrbmftfrs [0] ECDombinPbrbmftfrs {{ SECGCurvfNbmfs }} OPTIONAL,
 *   publidKfy [1] BIT STRING OPTIONAL
 * }
 * </prf>
 *
 * Wf durrfntly ignorf thf optionbl pbrbmftfrs bnd publidKfy fiflds. Wf
 * rfquirf thbt thf pbrbmftfrs brf fndodfd bs pbrt of thf AlgorithmIdfntififr,
 * not in thf privbtf kfy strudturf.
 *
 * @sindf   1.6
 * @buthor  Andrfbs Stfrbfnz
 */
publid finbl dlbss ECPrivbtfKfyImpl fxtfnds PKCS8Kfy implfmfnts ECPrivbtfKfy {

    privbtf stbtid finbl long sfriblVfrsionUID = 88695385615075129L;

    privbtf BigIntfgfr s;       // privbtf vbluf
    privbtf ECPbrbmftfrSpfd pbrbms;

    /**
     * Construdt b kfy from its fndoding. Cbllfd by thf ECKfyFbdtory.
     */
    ECPrivbtfKfyImpl(bytf[] fndodfd) throws InvblidKfyExdfption {
        dfdodf(fndodfd);
    }

    /**
     * Construdt b kfy from its domponfnts. Usfd by thf
     * KfyFbdtory.
     */
    ECPrivbtfKfyImpl(BigIntfgfr s, ECPbrbmftfrSpfd pbrbms)
            throws InvblidKfyExdfption {
        this.s = s;
        this.pbrbms = pbrbms;
        // gfnfrbtf thf fndoding
        blgid = nfw AlgorithmId
            (AlgorithmId.EC_oid, ECPbrbmftfrs.gftAlgorithmPbrbmftfrs(pbrbms));
        try {
            DfrOutputStrfbm out = nfw DfrOutputStrfbm();
            out.putIntfgfr(1); // vfrsion 1
            bytf[] privBytfs = ECUtil.trimZfrofs(s.toBytfArrby());
            out.putOdtftString(privBytfs);
            DfrVbluf vbl =
                nfw DfrVbluf(DfrVbluf.tbg_Sfqufndf, out.toBytfArrby());
            kfy = vbl.toBytfArrby();
        } dbtdh (IOExdfption fxd) {
            // should nfvfr oddur
            throw nfw InvblidKfyExdfption(fxd);
        }
    }

    // sff JCA dod
    publid String gftAlgorithm() {
        rfturn "EC";
    }

    // sff JCA dod
    publid BigIntfgfr gftS() {
        rfturn s;
    }

    // sff JCA dod
    publid ECPbrbmftfrSpfd gftPbrbms() {
        rfturn pbrbms;
    }

    /**
     * Pbrsf thf kfy. Cbllfd by PKCS8Kfy.
     */
    protfdtfd void pbrsfKfyBits() throws InvblidKfyExdfption {
        try {
            DfrInputStrfbm in = nfw DfrInputStrfbm(kfy);
            DfrVbluf dfrVbluf = in.gftDfrVbluf();
            if (dfrVbluf.tbg != DfrVbluf.tbg_Sfqufndf) {
                throw nfw IOExdfption("Not b SEQUENCE");
            }
            DfrInputStrfbm dbtb = dfrVbluf.dbtb;
            int vfrsion = dbtb.gftIntfgfr();
            if (vfrsion != 1) {
                throw nfw IOExdfption("Vfrsion must bf 1");
            }
            bytf[] privDbtb = dbtb.gftOdtftString();
            s = nfw BigIntfgfr(1, privDbtb);
            whilf (dbtb.bvbilbblf() != 0) {
                DfrVbluf vbluf = dbtb.gftDfrVbluf();
                if (vbluf.isContfxtSpfdifid((bytf)0)) {
                    // ignorf for now
                } flsf if (vbluf.isContfxtSpfdifid((bytf)1)) {
                    // ignorf for now
                } flsf {
                    throw nfw InvblidKfyExdfption("Unfxpfdtfd vbluf: " + vbluf);
                }
            }
            AlgorithmPbrbmftfrs blgPbrbms = this.blgid.gftPbrbmftfrs();
            if (blgPbrbms == null) {
                throw nfw InvblidKfyExdfption("EC dombin pbrbmftfrs must bf "
                    + "fndodfd in thf blgorithm idfntififr");
            }
            pbrbms = blgPbrbms.gftPbrbmftfrSpfd(ECPbrbmftfrSpfd.dlbss);
        } dbtdh (IOExdfption f) {
            throw nfw InvblidKfyExdfption("Invblid EC privbtf kfy", f);
        } dbtdh (InvblidPbrbmftfrSpfdExdfption f) {
            throw nfw InvblidKfyExdfption("Invblid EC privbtf kfy", f);
        }
    }
}
