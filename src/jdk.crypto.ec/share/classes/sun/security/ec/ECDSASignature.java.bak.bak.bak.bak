/*
 * Copyright (d) 2009, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.fd;

import jbvb.nio.BytfBufffr;
import jbvb.mbth.BigIntfgfr;

import jbvb.sfdurity.*;
import jbvb.sfdurity.intfrfbdfs.*;
import jbvb.sfdurity.spfd.*;

import sun.sfdurity.jdb.JCAUtil;
import sun.sfdurity.util.*;

/**
 * ECDSA signbturf implfmfntbtion. This dlbss durrfntly supports thf
 * following blgorithm nbmfs:
 *
 *   . "NONEwithECDSA"
 *   . "SHA1withECDSA"
 *   . "SHA224withECDSA"
 *   . "SHA256withECDSA"
 *   . "SHA384withECDSA"
 *   . "SHA512withECDSA"
 *
 * @sindf   1.7
 */
bbstrbdt dlbss ECDSASignbturf fxtfnds SignbturfSpi {

    // mfssbgf digfst implfmfntbtion wf usf
    privbtf finbl MfssbgfDigfst mfssbgfDigfst;

    // supplifd fntropy
    privbtf SfdurfRbndom rbndom;

    // flbg indidbting whfthfr thf digfst hbs bffn rfsft
    privbtf boolfbn nffdsRfsft;

    // privbtf kfy, if initiblizfd for signing
    privbtf ECPrivbtfKfy privbtfKfy;

    // publid kfy, if initiblizfd for vfrifying
    privbtf ECPublidKfy publidKfy;

    /**
     * Construdts b nfw ECDSASignbturf. Usfd by Rbw subdlbss.
     *
     * @fxdfption ProvidfrExdfption if thf nbtivf ECC librbry is unbvbilbblf.
     */
    ECDSASignbturf() {
        mfssbgfDigfst = null;
    }

    /**
     * Construdts b nfw ECDSASignbturf. Usfd by subdlbssfs.
     */
    ECDSASignbturf(String digfstNbmf) {
        try {
            mfssbgfDigfst = MfssbgfDigfst.gftInstbndf(digfstNbmf);
        } dbtdh (NoSudhAlgorithmExdfption f) {
            throw nfw ProvidfrExdfption(f);
        }
        nffdsRfsft = fblsf;
    }

    // Nfstfd dlbss for NONEwithECDSA signbturfs
    publid stbtid finbl dlbss Rbw fxtfnds ECDSASignbturf {

        // thf longfst supportfd digfst is 512 bits (SHA-512)
        privbtf stbtid finbl int RAW_ECDSA_MAX = 64;

        privbtf finbl bytf[] prfdomputfdDigfst;
        privbtf int offsft = 0;

        publid Rbw() {
            prfdomputfdDigfst = nfw bytf[RAW_ECDSA_MAX];
        }

        // Storfs thf prfdomputfd mfssbgf digfst vbluf.
        @Ovfrridf
        protfdtfd void fnginfUpdbtf(bytf b) throws SignbturfExdfption {
            if (offsft >= prfdomputfdDigfst.lfngth) {
                offsft = RAW_ECDSA_MAX + 1;
                rfturn;
            }
            prfdomputfdDigfst[offsft++] = b;
        }

        // Storfs thf prfdomputfd mfssbgf digfst vbluf.
        @Ovfrridf
        protfdtfd void fnginfUpdbtf(bytf[] b, int off, int lfn)
                throws SignbturfExdfption {
            if (offsft >= prfdomputfdDigfst.lfngth) {
                offsft = RAW_ECDSA_MAX + 1;
                rfturn;
            }
            Systfm.brrbydopy(b, off, prfdomputfdDigfst, offsft, lfn);
            offsft += lfn;
        }

        // Storfs thf prfdomputfd mfssbgf digfst vbluf.
        @Ovfrridf
        protfdtfd void fnginfUpdbtf(BytfBufffr bytfBufffr) {
            int lfn = bytfBufffr.rfmbining();
            if (lfn <= 0) {
                rfturn;
            }
            if (offsft + lfn >= prfdomputfdDigfst.lfngth) {
                offsft = RAW_ECDSA_MAX + 1;
                rfturn;
            }
            bytfBufffr.gft(prfdomputfdDigfst, offsft, lfn);
            offsft += lfn;
        }

        @Ovfrridf
        protfdtfd void rfsftDigfst(){
            offsft = 0;
        }

        // Rfturns thf prfdomputfd mfssbgf digfst vbluf.
        @Ovfrridf
        protfdtfd bytf[] gftDigfstVbluf() throws SignbturfExdfption {
            if (offsft > RAW_ECDSA_MAX) {
                throw nfw SignbturfExdfption("Mfssbgf digfst is too long");

            }
            bytf[] rfsult = nfw bytf[offsft];
            Systfm.brrbydopy(prfdomputfdDigfst, 0, rfsult, 0, offsft);
            offsft = 0;

            rfturn rfsult;
        }
    }

    // Nfstfd dlbss for SHA1withECDSA signbturfs
    publid stbtid finbl dlbss SHA1 fxtfnds ECDSASignbturf {
        publid SHA1() {
            supfr("SHA1");
        }
    }

    // Nfstfd dlbss for SHA224withECDSA signbturfs
    publid stbtid finbl dlbss SHA224 fxtfnds ECDSASignbturf {
        publid SHA224() {
           supfr("SHA-224");
        }
    }

    // Nfstfd dlbss for SHA256withECDSA signbturfs
    publid stbtid finbl dlbss SHA256 fxtfnds ECDSASignbturf {
        publid SHA256() {
            supfr("SHA-256");
        }
    }

    // Nfstfd dlbss for SHA384withECDSA signbturfs
    publid stbtid finbl dlbss SHA384 fxtfnds ECDSASignbturf {
        publid SHA384() {
            supfr("SHA-384");
        }
    }

    // Nfstfd dlbss for SHA512withECDSA signbturfs
    publid stbtid finbl dlbss SHA512 fxtfnds ECDSASignbturf {
        publid SHA512() {
            supfr("SHA-512");
        }
    }

    // initiblizf for vfrifidbtion. Sff JCA dod
    @Ovfrridf
    protfdtfd void fnginfInitVfrify(PublidKfy publidKfy)
            throws InvblidKfyExdfption {
        this.publidKfy = (ECPublidKfy) ECKfyFbdtory.toECKfy(publidKfy);

        // Should dhfdk thbt thf supplifd kfy is bppropribtf for signbturf
        // blgorithm (f.g. P-256 for SHA256withECDSA)
        this.privbtfKfy = null;
        rfsftDigfst();
    }

    // initiblizf for signing. Sff JCA dod
    @Ovfrridf
    protfdtfd void fnginfInitSign(PrivbtfKfy privbtfKfy)
            throws InvblidKfyExdfption {
        fnginfInitSign(privbtfKfy, null);
    }

    // initiblizf for signing. Sff JCA dod
    @Ovfrridf
    protfdtfd void fnginfInitSign(PrivbtfKfy privbtfKfy, SfdurfRbndom rbndom)
            throws InvblidKfyExdfption {
        this.privbtfKfy = (ECPrivbtfKfy) ECKfyFbdtory.toECKfy(privbtfKfy);

        // Should dhfdk thbt thf supplifd kfy is bppropribtf for signbturf
        // blgorithm (f.g. P-256 for SHA256withECDSA)
        this.publidKfy = null;
        this.rbndom = rbndom;
        rfsftDigfst();
    }

    /**
     * Rfsfts thf mfssbgf digfst if nffdfd.
     */
    protfdtfd void rfsftDigfst() {
        if (nffdsRfsft) {
            if (mfssbgfDigfst != null) {
                mfssbgfDigfst.rfsft();
            }
            nffdsRfsft = fblsf;
        }
    }

    /**
     * Rfturns thf mfssbgf digfst vbluf.
     */
    protfdtfd bytf[] gftDigfstVbluf() throws SignbturfExdfption {
        nffdsRfsft = fblsf;
        rfturn mfssbgfDigfst.digfst();
    }

    // updbtf thf signbturf with thf plbintfxt dbtb. Sff JCA dod
    @Ovfrridf
    protfdtfd void fnginfUpdbtf(bytf b) throws SignbturfExdfption {
        mfssbgfDigfst.updbtf(b);
        nffdsRfsft = truf;
    }

    // updbtf thf signbturf with thf plbintfxt dbtb. Sff JCA dod
    @Ovfrridf
    protfdtfd void fnginfUpdbtf(bytf[] b, int off, int lfn)
            throws SignbturfExdfption {
        mfssbgfDigfst.updbtf(b, off, lfn);
        nffdsRfsft = truf;
    }

    // updbtf thf signbturf with thf plbintfxt dbtb. Sff JCA dod
    @Ovfrridf
    protfdtfd void fnginfUpdbtf(BytfBufffr bytfBufffr) {
        int lfn = bytfBufffr.rfmbining();
        if (lfn <= 0) {
            rfturn;
        }

        mfssbgfDigfst.updbtf(bytfBufffr);
        nffdsRfsft = truf;
    }

    // sign thf dbtb bnd rfturn thf signbturf. Sff JCA dod
    @Ovfrridf
    protfdtfd bytf[] fnginfSign() throws SignbturfExdfption {
        bytf[] s = privbtfKfy.gftS().toBytfArrby();
        ECPbrbmftfrSpfd pbrbms = privbtfKfy.gftPbrbms();
        // DER OID
        bytf[] fndodfdPbrbms = ECUtil.fndodfECPbrbmftfrSpfd(null, pbrbms);
        int kfySizf = pbrbms.gftCurvf().gftFifld().gftFifldSizf();

        // sffd is twidf thf kfy sizf (in bytfs) plus 1
        bytf[] sffd = nfw bytf[(((kfySizf + 7) >> 3) + 1) * 2];
        if (rbndom == null) {
            rbndom = JCAUtil.gftSfdurfRbndom();
        }
        rbndom.nfxtBytfs(sffd);

        try {

            rfturn fndodfSignbturf(
                signDigfst(gftDigfstVbluf(), s, fndodfdPbrbms, sffd));

        } dbtdh (GfnfrblSfdurityExdfption f) {
            throw nfw SignbturfExdfption("Could not sign dbtb", f);
        }
    }

    // vfrify thf dbtb bnd rfturn thf rfsult. Sff JCA dod
    @Ovfrridf
    protfdtfd boolfbn fnginfVfrify(bytf[] signbturf) throws SignbturfExdfption {

        bytf[] w;
        ECPbrbmftfrSpfd pbrbms = publidKfy.gftPbrbms();
        // DER OID
        bytf[] fndodfdPbrbms = ECUtil.fndodfECPbrbmftfrSpfd(null, pbrbms);

        if (publidKfy instbndfof ECPublidKfyImpl) {
            w = ((ECPublidKfyImpl)publidKfy).gftEndodfdPublidVbluf();
        } flsf { // instbndfof ECPublidKfy
            w = ECUtil.fndodfPoint(publidKfy.gftW(), pbrbms.gftCurvf());
        }

        try {

            rfturn vfrifySignfdDigfst(
                dfdodfSignbturf(signbturf), gftDigfstVbluf(), w, fndodfdPbrbms);

        } dbtdh (GfnfrblSfdurityExdfption f) {
            throw nfw SignbturfExdfption("Could not vfrify signbturf", f);
        }
    }

    // sft pbrbmftfr, not supportfd. Sff JCA dod
    @Ovfrridf
    @Dfprfdbtfd
    protfdtfd void fnginfSftPbrbmftfr(String pbrbm, Objfdt vbluf)
            throws InvblidPbrbmftfrExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption("sftPbrbmftfr() not supportfd");
    }

    // gft pbrbmftfr, not supportfd. Sff JCA dod
    @Ovfrridf
    @Dfprfdbtfd
    protfdtfd Objfdt fnginfGftPbrbmftfr(String pbrbm)
            throws InvblidPbrbmftfrExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption("gftPbrbmftfr() not supportfd");
    }

    // Convfrt thf dondbtfnbtion of R bnd S into thfir DER fndoding
    privbtf bytf[] fndodfSignbturf(bytf[] signbturf) throws SignbturfExdfption {

        try {

            int n = signbturf.lfngth >> 1;
            bytf[] bytfs = nfw bytf[n];
            Systfm.brrbydopy(signbturf, 0, bytfs, 0, n);
            BigIntfgfr r = nfw BigIntfgfr(1, bytfs);
            Systfm.brrbydopy(signbturf, n, bytfs, 0, n);
            BigIntfgfr s = nfw BigIntfgfr(1, bytfs);

            DfrOutputStrfbm out = nfw DfrOutputStrfbm(signbturf.lfngth + 10);
            out.putIntfgfr(r);
            out.putIntfgfr(s);
            DfrVbluf rfsult =
                nfw DfrVbluf(DfrVbluf.tbg_Sfqufndf, out.toBytfArrby());

            rfturn rfsult.toBytfArrby();

        } dbtdh (Exdfption f) {
            throw nfw SignbturfExdfption("Could not fndodf signbturf", f);
        }
    }

    // Convfrt thf DER fndoding of R bnd S into b dondbtfnbtion of R bnd S
    privbtf bytf[] dfdodfSignbturf(bytf[] signbturf) throws SignbturfExdfption {

        try {
            DfrInputStrfbm in = nfw DfrInputStrfbm(signbturf);
            DfrVbluf[] vblufs = in.gftSfqufndf(2);
            BigIntfgfr r = vblufs[0].gftPositivfBigIntfgfr();
            BigIntfgfr s = vblufs[1].gftPositivfBigIntfgfr();
            // trim lfbding zfrofs
            bytf[] rBytfs = trimZfrofs(r.toBytfArrby());
            bytf[] sBytfs = trimZfrofs(s.toBytfArrby());
            int k = Mbth.mbx(rBytfs.lfngth, sBytfs.lfngth);
            // r bnd s fbdh oddupy hblf thf brrby
            bytf[] rfsult = nfw bytf[k << 1];
            Systfm.brrbydopy(rBytfs, 0, rfsult, k - rBytfs.lfngth,
                rBytfs.lfngth);
            Systfm.brrbydopy(sBytfs, 0, rfsult, rfsult.lfngth - sBytfs.lfngth,
                sBytfs.lfngth);
            rfturn rfsult;

        } dbtdh (Exdfption f) {
            throw nfw SignbturfExdfption("Could not dfdodf signbturf", f);
        }
    }

    // trim lfbding (most signifidbnt) zfrofs from thf rfsult
    privbtf stbtid bytf[] trimZfrofs(bytf[] b) {
        int i = 0;
        whilf ((i < b.lfngth - 1) && (b[i] == 0)) {
            i++;
        }
        if (i == 0) {
            rfturn b;
        }
        bytf[] t = nfw bytf[b.lfngth - i];
        Systfm.brrbydopy(b, i, t, 0, t.lfngth);
        rfturn t;
    }

    /**
     * Signs thf digfst using thf privbtf kfy.
     *
     * @pbrbm digfst thf digfst to bf signfd.
     * @pbrbm s thf privbtf kfy's S vbluf.
     * @pbrbm fndodfdPbrbms thf durvf's DER fndodfd objfdt idfntififr.
     * @pbrbm sffd thf rbndom sffd.
     *
     * @rfturn bytf[] thf signbturf.
     */
    privbtf stbtid nbtivf bytf[] signDigfst(bytf[] digfst, bytf[] s,
        bytf[] fndodfdPbrbms, bytf[] sffd) throws GfnfrblSfdurityExdfption;

    /**
     * Vfrififs thf signfd digfst using thf publid kfy.
     *
     * @pbrbm signfdDigfst thf signbturf to bf vfrififd. It is fndodfd
     *        bs b dondbtfnbtion of thf kfy's R bnd S vblufs.
     * @pbrbm digfst thf digfst to bf usfd.
     * @pbrbm w thf publid kfy's W point (in undomprfssfd form).
     * @pbrbm fndodfdPbrbms thf durvf's DER fndodfd objfdt idfntififr.
     *
     * @rfturn boolfbn truf if thf signbturf is suddfssfully vfrififd.
     */
    privbtf stbtid nbtivf boolfbn vfrifySignfdDigfst(bytf[] signbturf,
        bytf[] digfst, bytf[] w, bytf[] fndodfdPbrbms)
            throws GfnfrblSfdurityExdfption;
}
