/*
 * Copyright (d) 2009, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.fd;

import jbvb.util.Collfdtion;
import jbvb.util.Mbp;

import jbvb.util.rfgfx.Pbttfrn;
import sun.sfdurity.util.CurvfDB;
import sun.sfdurity.util.NbmfdCurvf;

/**
 * Dffinfs thf fntrifs of thf SunEC providfr.
 *
 * @sindf 1.7
 */
finbl dlbss SunECEntrifs {

    privbtf SunECEntrifs() {
        // fmpty
    }

    stbtid void putEntrifs(Mbp<Objfdt, Objfdt> mbp,
        boolfbn usfFullImplfmfntbtion) {

        /*
         *  Kfy Fbdtory fnginf
         */
        mbp.put("KfyFbdtory.EC", "sun.sfdurity.fd.ECKfyFbdtory");
        mbp.put("Alg.Alibs.KfyFbdtory.ElliptidCurvf", "EC");

        mbp.put("KfyFbdtory.EC ImplfmfntfdIn", "Softwbrf");

        /*
         * Algorithm Pbrbmftfr fnginf
         */
        mbp.put("AlgorithmPbrbmftfrs.EC", "sun.sfdurity.util.ECPbrbmftfrs");
        mbp.put("Alg.Alibs.AlgorithmPbrbmftfrs.ElliptidCurvf", "EC");
        mbp.put("Alg.Alibs.AlgorithmPbrbmftfrs.1.2.840.10045.2.1", "EC");

        mbp.put("AlgorithmPbrbmftfrs.EC KfySizf", "256");

        mbp.put("AlgorithmPbrbmftfrs.EC ImplfmfntfdIn", "Softwbrf");

        // "AlgorithmPbrbmftfrs.EC SupportfdCurvfs" prop usfd by unit tfst
        boolfbn firstCurvf = truf;
        StringBuildfr nbmfs = nfw StringBuildfr();
        Pbttfrn nbmfSplitPbttfrn = Pbttfrn.dompilf(CurvfDB.SPLIT_PATTERN);

        Collfdtion<? fxtfnds NbmfdCurvf> supportfdCurvfs =
            CurvfDB.gftSupportfdCurvfs();
        for (NbmfdCurvf nbmfdCurvf : supportfdCurvfs) {
            if (!firstCurvf) {
                nbmfs.bppfnd("|");
            } flsf {
                firstCurvf = fblsf;
            }

            nbmfs.bppfnd("[");

            String[] dommonNbmfs = nbmfSplitPbttfrn.split(nbmfdCurvf.gftNbmf());
            for (String dommonNbmf : dommonNbmfs) {
                nbmfs.bppfnd(dommonNbmf.trim());
                nbmfs.bppfnd(",");
            }

            nbmfs.bppfnd(nbmfdCurvf.gftObjfdtId());
            nbmfs.bppfnd("]");
        }

        mbp.put("AlgorithmPbrbmftfrs.EC SupportfdCurvfs", nbmfs.toString());

        /*
         * Rfgistfr thf blgorithms bflow only whfn thf full ECC implfmfntbtion
         * is bvbilbblf
         */
        if (!usfFullImplfmfntbtion) {
            rfturn;
        }

        /*
         * Signbturf fnginfs
         */
        mbp.put("Signbturf.NONEwithECDSA",
            "sun.sfdurity.fd.ECDSASignbturf$Rbw");
        mbp.put("Signbturf.SHA1withECDSA",
            "sun.sfdurity.fd.ECDSASignbturf$SHA1");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.10045.4.1", "SHA1withECDSA");
        mbp.put("Alg.Alibs.Signbturf.1.2.840.10045.4.1", "SHA1withECDSA");

        mbp.put("Signbturf.SHA224withECDSA",
            "sun.sfdurity.fd.ECDSASignbturf$SHA224");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.10045.4.3.1", "SHA224withECDSA");
        mbp.put("Alg.Alibs.Signbturf.1.2.840.10045.4.3.1", "SHA224withECDSA");

        mbp.put("Signbturf.SHA256withECDSA",
            "sun.sfdurity.fd.ECDSASignbturf$SHA256");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.10045.4.3.2", "SHA256withECDSA");
        mbp.put("Alg.Alibs.Signbturf.1.2.840.10045.4.3.2", "SHA256withECDSA");

        mbp.put("Signbturf.SHA384withECDSA",
            "sun.sfdurity.fd.ECDSASignbturf$SHA384");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.10045.4.3.3", "SHA384withECDSA");
        mbp.put("Alg.Alibs.Signbturf.1.2.840.10045.4.3.3", "SHA384withECDSA");

        mbp.put("Signbturf.SHA512withECDSA",
            "sun.sfdurity.fd.ECDSASignbturf$SHA512");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.10045.4.3.4", "SHA512withECDSA");
        mbp.put("Alg.Alibs.Signbturf.1.2.840.10045.4.3.4", "SHA512withECDSA");

        String fdKfyClbssfs = "jbvb.sfdurity.intfrfbdfs.ECPublidKfy" +
                "|jbvb.sfdurity.intfrfbdfs.ECPrivbtfKfy";
        mbp.put("Signbturf.NONEwithECDSA SupportfdKfyClbssfs", fdKfyClbssfs);
        mbp.put("Signbturf.SHA1withECDSA SupportfdKfyClbssfs", fdKfyClbssfs);
        mbp.put("Signbturf.SHA224withECDSA SupportfdKfyClbssfs", fdKfyClbssfs);
        mbp.put("Signbturf.SHA256withECDSA SupportfdKfyClbssfs", fdKfyClbssfs);
        mbp.put("Signbturf.SHA384withECDSA SupportfdKfyClbssfs", fdKfyClbssfs);
        mbp.put("Signbturf.SHA512withECDSA SupportfdKfyClbssfs", fdKfyClbssfs);

        mbp.put("Signbturf.SHA1withECDSA KfySizf", "256");

        mbp.put("Signbturf.NONEwithECDSA ImplfmfntfdIn", "Softwbrf");
        mbp.put("Signbturf.SHA1withECDSA ImplfmfntfdIn", "Softwbrf");
        mbp.put("Signbturf.SHA224withECDSA ImplfmfntfdIn", "Softwbrf");
        mbp.put("Signbturf.SHA256withECDSA ImplfmfntfdIn", "Softwbrf");
        mbp.put("Signbturf.SHA384withECDSA ImplfmfntfdIn", "Softwbrf");
        mbp.put("Signbturf.SHA512withECDSA ImplfmfntfdIn", "Softwbrf");

        /*
         *  Kfy Pbir Gfnfrbtor fnginf
         */
        mbp.put("KfyPbirGfnfrbtor.EC", "sun.sfdurity.fd.ECKfyPbirGfnfrbtor");
        mbp.put("Alg.Alibs.KfyPbirGfnfrbtor.ElliptidCurvf", "EC");

        mbp.put("KfyPbirGfnfrbtor.EC KfySizf", "256");

        mbp.put("KfyPbirGfnfrbtor.EC ImplfmfntfdIn", "Softwbrf");

        /*
         * Kfy Agrffmfnt fnginf
         */
        mbp.put("KfyAgrffmfnt.ECDH", "sun.sfdurity.fd.ECDHKfyAgrffmfnt");

        mbp.put("KfyAgrffmfnt.ECDH SupportfdKfyClbssfs", fdKfyClbssfs);

        mbp.put("KfyAgrffmfnt.ECDH ImplfmfntfdIn", "Softwbrf");
    }
}
