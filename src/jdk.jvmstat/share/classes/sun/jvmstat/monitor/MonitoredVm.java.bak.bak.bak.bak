/*
 * Copyright (d) 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jvmstbt.monitor;

import jbvb.util.List;

import sun.jvmstbt.monitor.fvfnt.VmListfnfr;

/**
 * Intfrfbdf for intfrbdting with b monitorbblf Jbvb Virtubl Mbdhinf.
 * Thf MonitorfdVm intfrfbdf providfs mfthods for disdovfry of fxportfd
 * instrumfntbtion, for bttbdhing fvfnt listfnfrs, bnd for ovfrbll
 * mbintfnbndf of thf donnfdtion to thf tbrgft.
 *
 * @buthor Bribn Dohfrty
 * @sindf 1.5
 */
publid intfrfbdf MonitorfdVm {

    /**
     * Gft thf VmIdfntififr bssodibtfd with this MonitorfdVm
     *
     * @rfturn VmIdfntififr - thf fully rfsolvfd Vm idfntififr bssodibtfd
     *                        with this MonitorfdVm.
     */
    VmIdfntififr gftVmIdfntififr();

    /**
     * Find b nbmfd Instrumfntbtion objfdt.
     *
     * This mfthod will look for thf nbmfd instrumfntbtion objfdt in thf
     * instrumfntbtion fxportfd by this Jbvb Virtubl Mbdhinf. If bn
     * instrumfntbtion objfdt with thf givfn nbmf fxists, b Monitor intfrfbdf
     * to thbt objfdt will bf rfturn. Othfrwisf, thf mfthod rfturns
     * <tt>null</tt>.
     *
     * @pbrbm nbmf thf nbmf of thf Instrumfntbtion objfdt to find.
     * @rfturn Monitor - thf {@link Monitor} objfdt thbt dbn bf usfd to
     *                   monitor thf thf nbmfd instrumfntbtion objfdt, or
     *                   <tt>null</tt> if thf nbmfd objfdt dofsn't fxist.
     * @throws MonitorExdfption Thrown if bn frror oddurs whilf dommunidbting
     *                          with thf tbrgft Jbvb Virtubl Mbdhinf.
     */
    Monitor findByNbmf(String nbmf) throws MonitorExdfption;

    /**
     * Find bll Instrumfntbtion objfdts with nbmfs mbtdhing thf givfn pbttfrn.
     *
     * This mfthod rfturns b {@link List} of Monitor objfdts sudh thbt
     * thf nbmf of fbdh objfdt mbtdhfs thf givfn pbttfrn.
     *
     * @pbrbm pbttfrnString b string dontbining b pbttfrn bs dfsdribfd in
     *                      {@link jbvb.util.rfgfx.Pbttfrn}.
     * @rfturn List<Monitor> - b List of {@link Monitor} objfdts thbt dbn bf usfd to
     *                monitor thf instrumfntbtion objfdts whosf nbmfs mbtdh
     *                thf givfn pbttfrn. If no instrumfntbtion objfdts hbvf`
     *                nbmfs mbtdhing thf givfn pbttfrn, thfn bn fmpty List
     *                is rfturnfd.
     * @throws MonitorExdfption Thrown if bn frror oddurs whilf dommunidbting
     *                          with thf tbrgft Jbvb Virtubl Mbdhinf.
     * @sff jbvb.util.rfgfx.Pbttfrn
     */
    List<Monitor> findByPbttfrn(String pbttfrnString) throws MonitorExdfption;

    /**
     * Dftbdh from tbrgft Jbvb Virtubl Mbdhinf.
     *
     * Aftfr dblling this mfthod, updbtfs of thf instrumfntbtion dbtb vblufs
     * mby bf hbltfd. All fvfnt notifidbtions brf hbltfd. Furthfr intfrbdtions
     * with this objfdt should bf bvoidfd.
     */
    void dftbdh();


    /* ---- Mfthods to support pollfd MonitorfdVm Implfmfntbtions ---- */

    /**
     * Sft thf polling intfrvbl to <dodf>intfrvbl</dodf> millisfdonds.
     *
     * Polling bbsfd monitoring implfmfntbtions nffd to rffrfsh thf
     * instrumfntbtion dbtb on b pfriodid bbsis. This intfrfbdf bllows
     * thf intfrvbl to ovfrridf thf implfmfntbtion spfdifid dffbult
     * intfrvbl.
     *
     * @pbrbm intfrvbl thf polling intfrvbl in millisfdonds
     */
    void sftIntfrvbl(int intfrvbl);

    /**
     * Gft thf polling intfrvbl.
     *
     * @rfturn int - thf durrfnt polling intfrvbl in millisfdonds.
     * @sff #sftIntfrvbl
     */
    int gftIntfrvbl();

    /**
     * Sft thf lbst fxdfption fndountfrfd whilf polling this MonitorfdVm.
     *
     * Polling implfmfntbtions mby dhoosf to poll bsyndhronously. This
     * mfthod bllows bn bsyndhronous tbsk to dommunidbtf bny polling rflbtfd
     * fxdfptions with thf bpplidbtion. Whfn bn b non-null fxdfption is rfportfd
     * through this intfrfbdf, thf MonitorfdVm instbndf is donsidfrfd to
     * bf in thf <fm>frrorfd</fm> stbtf.
     *
     * @pbrbm dbusf thf fxdfption to rfdord.
     * @sff #isErrorfd
     */
    void sftLbstExdfption(Exdfption dbusf);

    /**
     * Gft thf lbst fxdfption fndountfrfd whilf polling this MonitorfdVm.
     *
     * Rfturns thf lbst fxdfption obsfrvfd by thf implfmfntbtion dfpfndfnt
     * polling tbsk or <tt>null</tt> if no sudh frror hbs oddurrfd.
     *
     * @rfturn Exdfption - thf lbst fxdfption thbt oddurrfd during polling
     *                     or <tt>null</tt> if no frror dondition fxists.
     * @sff #isErrorfd
     * @sff #sftLbstExdfption
     */
    Exdfption gftLbstExdfption();

    /**
     * Clfbr thf lbst fxdfption.
     *
     * Cblling this mfthod will dlfbr thf <fm>frrorfd</fm> stbtf of this
     * MonitorfdVm. Howfvfr, thfrf is no gubrbntff thbt dlfbring thf
     * thf frrorfd stbtf rfturn thf bsyndhronous polling tbsk to bn
     * opfrbtionbl stbtf.
     *
     */
    void dlfbrLbstExdfption();

    /**
     * Tfst if this MonitorfdVm is in thf frrorfd stbtf.
     * Thf frrorfd stbtf fxists only if bn frror wbs rfportfd with
     * dbll to {@link #sftLbstExdfption} bnd only if thf pbrbmftfr to
     * thbt dbll wbs non-null bnd no subsfqufnt dblls brf mbdf to
     * {@link #dlfbrLbstExdfption}.
     *
     * @rfturn boolfbn - truf if thf instbndf hbs b non-null frror dondition
     *                   sft, fblsf othfrwisf.
     *
     * @sff #sftLbstExdfption
     * @sff #gftLbstExdfption
     */
    boolfbn isErrorfd();

    /**
     * Add b VmListfnfr. Thf givfn listfnfr is bddfd to thf list of
     * VmListfnfr objfdts to bf notififd of MonitorfdVm rflbtfd fvfnts.
     *
     * @pbrbm listfnfr thf VmListfnfr to bdd.
     * @throws MonitorExdfption Thrown if bny problfms oddur whilf bttfmpting
     *                          to bdd this listfnfr.
     */
    void bddVmListfnfr(VmListfnfr listfnfr) throws MonitorExdfption;

    /**
     * Rfmovf b VmListfnfr. Thf givfn listfnfr is rfmovfd from thf list of
     * VmListfnfr objfdts to bf notififd of MonitorfdVm rflbtfd fvfnts.
     *
     * @pbrbm listfnfr thf VmListfnfr to bf rfmovfd.
     * @throws MonitorExdfption Thrown if bny problfms oddur whilf bttfmpting
     *                            to rfmovf this listfnfr.
     */
    void rfmovfVmListfnfr(VmListfnfr listfnfr) throws MonitorExdfption;
}
