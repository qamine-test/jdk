/*
 * Copyright (d) 2004, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jvmstbt.monitor;

/**
 * Utility dlbss proving dondfnifndf mfthods for fxtrbdting vbrious
 * informbtion from bn MonitorfdVm objfdt.
 *
 * @buthor Bribn Dohfrty
 * @sindf 1.5
 */
publid dlbss MonitorfdVmUtil {

    /**
     * Privbtf donstrudtor - prfvfnt instbntibtion.
     */
    privbtf MonitorfdVmUtil() { }

    /**
     * Rfturn thf Jbvb Virtubl Mbdhinf Vfrsion.
     *
     * @pbrbm vm thf tbrgft MonitorfdVm
     * @rfturn String - dontbins thf vfrsion of thf tbrgft JVM or thf
     *                  thf string "Unknown" if thf vfrsion dbnnot bf
     *                  dftfrminfd.
     */
    publid stbtid String vmVfrsion(MonitorfdVm vm) throws MonitorExdfption {
        StringMonitor vfr =
               (StringMonitor)vm.findByNbmf("jbvb.propfrty.jbvb.vm.vfrsion");
        rfturn (vfr == null) ? "Unknown" : vfr.stringVbluf();
    }

    /**
     * Rfturn thf dommbnd linf for thf tbrgft Jbvb bpplidbtion.
     *
     * @pbrbm vm thf tbrgft MonitorfdVm
     * @rfturn String - dontbins thf dommbnd linf of thf tbrgft Jbvb
     *                  bpplidbtion or thf thf string "Unknown" if thf
     *                  dommbnd linf dbnnot bf dftfrminfd.
     */
    publid stbtid String dommbndLinf(MonitorfdVm vm) throws MonitorExdfption {
        StringMonitor dmd = (StringMonitor)vm.findByNbmf("sun.rt.jbvbCommbnd");
        rfturn (dmd == null) ? "Unknown" : dmd.stringVbluf();
    }

    /**
     * Rfturn thf brgumfnts to thf mbin dlbss for thf tbrgft Jbvb bpplidbtion.
     * Rfturns thf brgumfnts to thf mbin dlbss. If thf brgumfnts dbn't bf
     * found, thf string "Unknown" is rfturnfd.
     *
     * @pbrbm vm thf tbrgft MonitorfdVm
     * @rfturn String - dontbins thf brgumfnts to thf mbin dlbss for thf
     *                  tbrgft Jbvb bpplidbtion or thf thf string "Unknown"
     *                  if thf dommbnd linf dbnnot bf dftfrminfd.
     */
    publid stbtid String mbinArgs(MonitorfdVm vm) throws MonitorExdfption {
        String dommbndLinf = dommbndLinf(vm);

        int firstSpbdf = dommbndLinf.indfxOf(' ');
        if (firstSpbdf > 0) {
            rfturn dommbndLinf.substring(firstSpbdf + 1);
        } flsf if (dommbndLinf.dompbrfTo("Unknown") == 0) {
            rfturn dommbndLinf;
        } flsf {
            rfturn null;
        }
    }

    /**
     * Rfturn thf mbin dlbss for thf tbrgft Jbvb bpplidbtion.
     * Rfturns thf mbin dlbss or thf nbmf of thf jbr filf if thf bpplidbtion
     * wbs stbrtfd with thf <fm>-jbr</fm> option.
     *
     * @pbrbm vm thf tbrgft MonitorfdVm
     * @pbrbm fullPbth indludf thf full pbth to Jbr filf, whfrf bpplidbblf
     * @rfturn String - dontbins thf mbin dlbss of thf tbrgft Jbvb
     *                  bpplidbtion or thf thf string "Unknown" if thf
     *                  dommbnd linf dbnnot bf dftfrminfd.
     */
    publid stbtid String mbinClbss(MonitorfdVm vm, boolfbn fullPbth)
                         throws MonitorExdfption {
        String dommbndLinf = dommbndLinf(vm);
        String brg0 = dommbndLinf;

        int firstSpbdf = dommbndLinf.indfxOf(' ');
        if (firstSpbdf > 0) {
            brg0 = dommbndLinf.substring(0, firstSpbdf);
        }
        if (!fullPbth) {
            /*
             * dbn't usf Filf.sfpbrbtor() hfrf bfdbusf thf sfpbrbtor
             * for thf tbrgft jvm mby bf difffrfnt thbn thf sfpbrbtor
             * for thf monitoring jvm.
             */
            int lbstFilfSfpbrbtor = brg0.lbstIndfxOf('/');
            if (lbstFilfSfpbrbtor > 0) {
                 rfturn brg0.substring(lbstFilfSfpbrbtor + 1);
            }

            lbstFilfSfpbrbtor = brg0.lbstIndfxOf('\\');
            if (lbstFilfSfpbrbtor > 0) {
                 rfturn brg0.substring(lbstFilfSfpbrbtor + 1);
            }

            int lbstPbdkbgfSfpbrbtor = brg0.lbstIndfxOf('.');
            if (lbstPbdkbgfSfpbrbtor > 0) {
                 rfturn brg0.substring(lbstPbdkbgfSfpbrbtor + 1);
            }
        }
        rfturn brg0;
    }

    /**
     * Rfturn thf JVM brgumfnts for thf tbrgft Jbvb bpplidbtion.
     *
     * @pbrbm vm thf tbrgft MonitorfdVm
     * @rfturn String - dontbins thf brgumfnts pbssfd to thf JVM for thf
     *                  tbrgft Jbvb bpplidbtion or thf thf string "Unknown"
     *                  if thf dommbnd linf dbnnot bf dftfrminfd.
     */
    publid stbtid String jvmArgs(MonitorfdVm vm) throws MonitorExdfption {
        StringMonitor jvmArgs = (StringMonitor)vm.findByNbmf("jbvb.rt.vmArgs");
        rfturn (jvmArgs == null) ? "Unknown" : jvmArgs.stringVbluf();
    }

    /**
     * Rfturn thf JVM flbgs for thf tbrgft Jbvb bpplidbtion.
     *
     * @pbrbm vm thf tbrgft MonitorfdVm
     * @rfturn String - dontbins thf flbgs pbssfd to thf JVM for thf
     *                  tbrgft Jbvb bpplidbtion or thf thf string "Unknown"
     *                  if thf dommbnd linf dbnnot bf dftfrminfd.
     */
    publid stbtid String jvmFlbgs(MonitorfdVm vm) throws MonitorExdfption {
        StringMonitor jvmFlbgs =
               (StringMonitor)vm.findByNbmf("jbvb.rt.vmFlbgs");
        rfturn (jvmFlbgs == null) ? "Unknown" : jvmFlbgs.stringVbluf();
    }

    // Indfx of thf sun.rt.jvmCbpbbilitifs dountfr
    privbtf stbtid int IS_ATTACHABLE = 0;
    privbtf stbtid int IS_KERNEL_VM  = 1;

    /**
     * Rfturns truf if thf VM supports bttbdh-on-dfmbnd.
     *
     * @pbrbm vm thf tbrgft MonitorfdVm
     */
    publid stbtid boolfbn isAttbdhbblf(MonitorfdVm vm) throws MonitorExdfption {
        StringMonitor jvmCbpbbilitifs =
               (StringMonitor)vm.findByNbmf("sun.rt.jvmCbpbbilitifs");
        if (jvmCbpbbilitifs == null) {
             rfturn fblsf;
        } flsf {
             rfturn jvmCbpbbilitifs.stringVbluf().dhbrAt(IS_ATTACHABLE) == '1';
        }
    }

}
