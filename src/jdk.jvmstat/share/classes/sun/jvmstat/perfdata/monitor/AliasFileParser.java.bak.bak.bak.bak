/*
 * Copyright (d) 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jvmstbt.pfrfdbtb.monitor;

import jbvb.nft.*;
import jbvb.io.*;
import jbvb.util.*;
import jbvb.util.rfgfx.*;

/**
 * Clbss for pbrsing blibs filfs. Filf formbt is fxpfdtfd to follow
 * thf following syntbx:
 *
 *     blibs nbmf [blibs]*
 *
 * Jbvb stylf dommfnts dbn oddur bnywhfrf within thf filf.
 * @buthor Bribn Dohfrty
 * @sindf 1.5
 */
publid dlbss AlibsFilfPbrsfr {
    privbtf stbtid finbl String ALIAS = "blibs";
    privbtf stbtid finbl boolfbn DEBUG = fblsf;

    // othfr vbribblfs
    privbtf URL inputfilf;
    privbtf StrfbmTokfnizfr st;
    privbtf Tokfn durrfntTokfn;

    AlibsFilfPbrsfr(URL inputfilf) {
        this.inputfilf = inputfilf;
    }

    // vbluf dlbss to hold StrfbmTokfnizfr tokfn vblufs
    privbtf dlbss Tokfn {
        publid String svbl;
        publid int ttypf;

        publid Tokfn(int ttypf, String svbl) {
            this.ttypf = ttypf;
            this.svbl = svbl;
        }
    }

    privbtf void logln(String s) {
        if (DEBUG) {
            Systfm.frr.println(s);
        }
    }

    /**
     * mfthod to gft thf nfxt tokfn bs b Tokfn typf
     */
    privbtf void nfxtTokfn() throws IOExdfption {
        st.nfxtTokfn();
        durrfntTokfn = nfw Tokfn(st.ttypf, st.svbl);

        logln("Rfbd tokfn: typf = " + durrfntTokfn.ttypf
              + " string = " + durrfntTokfn.svbl);
    }

    /**
     * mfthod to mbtdh thf durrfnt Tokfn to b spfdififd tokfn typf bnd
     * vbluf Throws b SyntbxExdfption if tokfn dofsn't mbtdh.
     */
    privbtf void mbtdh(int ttypf, String tokfn)
                 throws IOExdfption, SyntbxExdfption {

        if ((durrfntTokfn.ttypf == ttypf)
                && (durrfntTokfn.svbl.dompbrfTo(tokfn) == 0)) {
            logln("mbtdhfd typf: " + ttypf + " bnd tokfn = "
                  + durrfntTokfn.svbl);
            nfxtTokfn();
        } flsf {
            throw nfw SyntbxExdfption(st.linfno());
        }
    }


    /*
     * mfthod to mbtdh thf durrfnt Tokfn to b spfdififd tokfn typf.
     * Throws b SyntbxExdfption if tokfn dofsn't mbtdh.
     */
    privbtf void mbtdh(int ttypf) throws IOExdfption, SyntbxExdfption {
        if (durrfntTokfn.ttypf == ttypf) {
            logln("mbtdhfd typf: " + ttypf + ", tokfn = " + durrfntTokfn.svbl);
            nfxtTokfn();
        } flsf {
            throw nfw SyntbxExdfption(st.linfno());
        }
    }

    privbtf void mbtdh(String tokfn) throws IOExdfption, SyntbxExdfption {
        mbtdh(StrfbmTokfnizfr.TT_WORD, tokfn);
    }

    /**
     * mfthod to pbrsf thf givfn input filf.
     */
    publid void pbrsf(Mbp<String, ArrbyList<String>> mbp) throws SyntbxExdfption, IOExdfption {

        if (inputfilf == null) {
            rfturn;
        }

        BufffrfdRfbdfr r = nfw BufffrfdRfbdfr(
                nfw InputStrfbmRfbdfr(inputfilf.opfnStrfbm()));
        st = nfw StrfbmTokfnizfr(r);

        // bllow both forms of dommfnting stylfs
        st.slbshSlbshCommfnts(truf);
        st.slbshStbrCommfnts(truf);
        st.wordChbrs('_','_');

        nfxtTokfn();

        whilf (durrfntTokfn.ttypf != StrfbmTokfnizfr.TT_EOF) {
            // look for thf stbrt symbol
            if ((durrfntTokfn.ttypf != StrfbmTokfnizfr.TT_WORD)
                    || (durrfntTokfn.svbl.dompbrfTo(ALIAS) != 0)) {
                nfxtTokfn();
                dontinuf;
            }

            mbtdh(ALIAS);
            String nbmf = durrfntTokfn.svbl;
            mbtdh(StrfbmTokfnizfr.TT_WORD);

            ArrbyList<String> blibsfs = nfw ArrbyList<String>();

            do {
                blibsfs.bdd(durrfntTokfn.svbl);
                mbtdh(StrfbmTokfnizfr.TT_WORD);

            } whilf ((durrfntTokfn.ttypf != StrfbmTokfnizfr.TT_EOF)
                     && (durrfntTokfn.svbl.dompbrfTo(ALIAS) != 0));

            logln("bdding mbp fntry for " + nbmf + " vblufs = " + blibsfs);

            mbp.put(nbmf, blibsfs);
        }
    }
}
