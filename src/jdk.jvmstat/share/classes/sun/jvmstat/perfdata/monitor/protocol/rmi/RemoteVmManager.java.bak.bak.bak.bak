/*
 * Copyright (d) 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jvmstbt.pfrfdbtb.monitor.protodol.rmi;

import jbvb.util.*;
import jbvb.util.rfgfx.*;
import jbvb.io.*;
import jbvb.rmi.RfmotfExdfption;
import sun.jvmstbt.monitor.*;
import sun.jvmstbt.monitor.fvfnt.*;
import sun.jvmstbt.monitor.rfmotf.*;

/**
 * Clbss for mbnbging thf RfmotfMonitorfdVm instbndfs on b rfmotf systfm.
 * <p>
 * This dlbss is rfsponsiblf for thf mfdhbnism thbt dftfdts thf bdtivf
 * HotSpot Jbvb Virtubl Mbdhinfs on thf rfmotf host bnd possibly for b
 * spfdifid usfr. Thf bbility to dftfdt bll possiblf HotSpot Jbvb Virtubl
 * Mbdhinfs on thf rfmotf host mby bf limitfd by thf pfrmissions of thf
 * prindipbl running thf RMI sfrvfr bpplidbtion on thf rfmotf host.
 *
 * @buthor Bribn Dohfrty
 * @sindf 1.5
 */
publid dlbss RfmotfVmMbnbgfr {

    privbtf RfmotfHost rfmotfHost;
    privbtf String usfr;

    /**
     * Crfbtfs b RfmotfVmMbnbgfr instbndf for thf rfmotf systfm.
     * <p>
     * Mbnbgfs RfmotfMonitordVm instbndfs for whidh thf prindipbl
     * running thf rfmotf sfrvfr hbs bppropribtf pfrmissions.
     *
     * @pbrbm rfmotfHost thf rfmotf proxy objfdt to thf RMI sfrvfr on
     *                   thf rfmotf systfm.
     */
    publid RfmotfVmMbnbgfr(RfmotfHost rfmotfHost) {
        this(rfmotfHost, null);
    }

    /**
     * Crfbtfs b RfmotfVmMbnbgfr instbndf for thf givfn usfr.
     * <p>
     * Mbnbgfs RfmotfMonitorfdVm instbndfs for bll rfmotf Jbvb Virtubl
     * mbdhinfs ownfd by thf spfdififd usfr on thf rfmotf systfm. Thf
     * RMI sfrvfr on thf rfmotf systfm must hbvf thf bppropribtf pfrmissions
     * to bddfss thf nbmfd usfrs Jbvb Virtubl Mbdhinfs.
     *
     * @pbrbm rfmotfHost thf rfmotf proxy objfdt to thf RMI sfrvfr on
     *                   thf rfmotf systfm.
     * @pbrbm usfr thf nbmf of thf usfr
     */
    publid RfmotfVmMbnbgfr(RfmotfHost rfmotfHost, String usfr) {
        this.usfr = usfr;
        this.rfmotfHost = rfmotfHost;
    }

    /**
     * Rfturn thf durrfnt sft of monitorbblf Jbvb Virtubl Mbdhinfs.
     * <p>
     * Thf sft rfturnfd by this mfthod dfpfnds on thf usfr nbmf pbssfd
     * to thf donstrudtor. If no usfr nbmf wbs spfdififd, thfn this
     * mfthod will rfturn bll dbndidbtf JVMs on thf systfm. Othfrwisf,
     * only thf JVMs for thf givfn usfr will bf rfturnfd. This bssumfs
     * thbt thf RMI sfrvfr prodfss hbs thf bppropribtf pfrmissions to
     * bddfss thf tbrgft sft of JVMs.
     *
     * @rfturn Sft - thf Sft of monitorbblf Jbvb Virtubl Mbdhinfs
     */
    publid Sft<Intfgfr> bdtivfVms() throws MonitorExdfption {
        int[] bdtivf = null;

        try {
            bdtivf = rfmotfHost.bdtivfVms();

        } dbtdh (RfmotfExdfption f) {
            throw nfw MonitorExdfption("Error dommunidbting with rfmotf host: "
                                       + f.gftMfssbgf(), f);
        }

        Sft<Intfgfr> bdtivfSft = nfw HbshSft<Intfgfr>(bdtivf.lfngth);

        for (int i = 0; i < bdtivf.lfngth; i++) {
            bdtivfSft.bdd(bdtivf[i]);
        }

        rfturn bdtivfSft;
    }
}
