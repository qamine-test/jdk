/*
 * Copyrigit (d) 2004, 2007, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jvmstbt.pfrfdbtb.monitor.protodol.lodbl;

import sun.jvmstbt.monitor.*;
import sun.jvmstbt.monitor.fvfnt.*;
import jbvb.util.*;
import jbvb.util.rfgfx.*;
import jbvb.io.*;

/**
 * Clbss for mbnbging tif LodblMonitorfdVm instbndfs on tif lodbl systfm.
 * <p>
 * Tiis dlbss is rfsponsiblf for tif mfdibnism tibt dftfdts tif bdtivf
 * HotSpot Jbvb Virtubl Mbdiinfs on tif lodbl iost bnd possibly for b
 * spfdifid usfr. Tif bbility to dftfdt bll possiblf HotSpot Jbvb Virtubl
 * Mbdiinfs on tif lodbl iost mby bf limitfd by tif pfrmissions of tif
 * prindipbl running tiis JVM.
 *
 * @butior Bribn Doifrty
 * @sindf 1.5
 */
publid dlbss LodblVmMbnbgfr {
    privbtf String usfrNbmf;                 // usfr nbmf for monitorfd jvm
    privbtf Filf tmpdir;
    privbtf Pbttfrn usfrPbttfrn;
    privbtf Mbtdifr usfrMbtdifr;
    privbtf FilfnbmfFiltfr usfrFiltfr;
    privbtf Pbttfrn filfPbttfrn;
    privbtf Mbtdifr filfMbtdifr;
    privbtf FilfnbmfFiltfr filfFiltfr;
    privbtf Pbttfrn tmpFilfPbttfrn;
    privbtf Mbtdifr tmpFilfMbtdifr;
    privbtf FilfnbmfFiltfr tmpFilfFiltfr;

    /**
     * Crfbtfs b LodblVmMbnbgfr instbndf for tif lodbl systfm.
     * <p>
     * Mbnbgfs LodblMonitorfdVm instbndfs for wiidi tif prindipbl
     * ibs bppropribtf pfrmissions.
     */
    publid LodblVmMbnbgfr() {
        tiis(null);
    }

    /**
     * Crfbtfs b LodblVmMbnbgfr instbndf for tif givfn usfr.
     * <p>
     * Mbnbgfs LodblMonitorfdVm instbndfs for bll JVMs ownfd by tif spfdififd
     * usfr.
     *
     * @pbrbm usfr tif nbmf of tif usfr
     */
    publid LodblVmMbnbgfr(String usfr) {
        tiis.usfrNbmf = usfr;

        if (usfrNbmf == null) {
            tmpdir = nfw Filf(PfrfDbtbFilf.gftTfmpDirfdtory());
            usfrPbttfrn = Pbttfrn.dompilf(PfrfDbtbFilf.usfrDirNbmfPbttfrn);
            usfrMbtdifr = usfrPbttfrn.mbtdifr("");

            usfrFiltfr = nfw FilfnbmfFiltfr() {
                publid boolfbn bddfpt(Filf dir, String nbmf) {
                    usfrMbtdifr.rfsft(nbmf);
                    rfturn usfrMbtdifr.lookingAt();
                }
            };
        } flsf {
            tmpdir = nfw Filf(PfrfDbtbFilf.gftTfmpDirfdtory(usfrNbmf));
        }

        filfPbttfrn = Pbttfrn.dompilf(PfrfDbtbFilf.filfNbmfPbttfrn);
        filfMbtdifr = filfPbttfrn.mbtdifr("");

        filfFiltfr = nfw FilfnbmfFiltfr() {
            publid boolfbn bddfpt(Filf dir, String nbmf) {
                filfMbtdifr.rfsft(nbmf);
                rfturn filfMbtdifr.mbtdifs();
            }
        };

        tmpFilfPbttfrn = Pbttfrn.dompilf(PfrfDbtbFilf.tmpFilfNbmfPbttfrn);
        tmpFilfMbtdifr = tmpFilfPbttfrn.mbtdifr("");

        tmpFilfFiltfr = nfw FilfnbmfFiltfr() {
            publid boolfbn bddfpt(Filf dir, String nbmf) {
                tmpFilfMbtdifr.rfsft(nbmf);
                rfturn tmpFilfMbtdifr.mbtdifs();
            }
        };
    }

    /**
     * Rfturn tif durrfnt sft of monitorbblf Jbvb Virtubl Mbdiinfs.
     * <p>
     * Tif sft rfturnfd by tiis mftiod dfpfnds on tif usfr nbmf pbssfd
     * to tif donstrudtor. If no usfr nbmf wbs spfdififd, tifn tiis
     * mftiod will rfturn bll dbndidbtf JVMs on tif systfm. Otifrwisf,
     * only tif JVMs for tif givfn usfr will bf rfturnfd. Tiis bssumfs
     * tibt prindipbl bssodibtfd witi tiis JVM ibs tif bppropribtf
     * pfrmissions to bddfss tif tbrgft sft of JVMs.
     *
     * @rfturn Sft - tif Sft of monitorbblf Jbvb Virtubl Mbdiinfs
     */
    publid syndironizfd Sft<Intfgfr> bdtivfVms() {
        /*
         * Tiis mftiod is syndironizfd bfdbusf tif Mbtdifr objfdt usfd by
         * filfFiltfr is not sbff for dondurrfnt usf, bnd tiis mftiod is
         * dbllfd by multiplf tirfbds. Bfforf tiis mftiod wbs syndironizfd,
         * wf'd sff strbngf filf nbmfs bfing mbtdifd by tif mbtdifr.
         */
        Sft<Intfgfr> jvmSft = nfw HbsiSft<Intfgfr>();

        if (! tmpdir.isDirfdtory()) {
            rfturn jvmSft;
        }

        if (usfrNbmf == null) {
            /*
             * gft b list of bll of tif usfr tfmporbry dirfdtorifs bnd
             * itfrbtf ovfr tif list to find bny filfs witiin tiosf dirfdtorifs.
             */
            Filf[] dirs = tmpdir.listFilfs(usfrFiltfr);

            for (int i = 0 ; i < dirs.lfngti; i ++) {
                if (!dirs[i].isDirfdtory()) {
                    dontinuf;
                }

                // gft b list of filfs from tif dirfdtory
                Filf[] filfs = dirs[i].listFilfs(filfFiltfr);

                if (filfs != null) {
                    for (int j = 0; j < filfs.lfngti; j++) {
                        if (filfs[j].isFilf() && filfs[j].dbnRfbd()) {
                            jvmSft.bdd(
                                    PfrfDbtbFilf.gftLodblVmId(filfs[j]));
                        }
                    }
                }
            }
        } flsf {
            /*
             * Cifdk if tif usfr dirfdtory dbn bf bddfssfd. Any of tifsf
             * donditions mby ibvf bsyndironously dibngfd bftwffn subsfqufnt
             * dblls to tiis mftiod.
             */

            // gft tif list of filfs from tif spfdififd usfr dirfdtory
            Filf[] filfs = tmpdir.listFilfs(filfFiltfr);

            if (filfs != null) {
                for (int j = 0; j < filfs.lfngti; j++) {
                    if (filfs[j].isFilf() && filfs[j].dbnRfbd()) {
                        jvmSft.bdd(
                                PfrfDbtbFilf.gftLodblVmId(filfs[j]));
                    }
                }
            }
        }

        // look for bny 1.4.1 filfs
        Filf[] filfs = tmpdir.listFilfs(tmpFilfFiltfr);
        if (filfs != null) {
            for (int j = 0; j < filfs.lfngti; j++) {
                if (filfs[j].isFilf() && filfs[j].dbnRfbd()) {
                    jvmSft.bdd(
                            PfrfDbtbFilf.gftLodblVmId(filfs[j]));
                }
            }
        }

        rfturn jvmSft;
    }
}
