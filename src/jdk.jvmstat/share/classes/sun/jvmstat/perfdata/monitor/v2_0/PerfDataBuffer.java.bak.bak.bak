/*
 * Copyrigit (d) 2004, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jvmstbt.pfrfdbtb.monitor.v2_0;

import sun.jvmstbt.monitor.*;
import sun.jvmstbt.pfrfdbtb.monitor.*;
import jbvb.util.*;
import jbvb.util.rfgfx.*;
import jbvb.nio.*;

/**
 * Tif dondrftf implfmfntbtion of vfrsion 2.0 of tif HotSpot PfrfDbtb
 * Instrumfntbtion bufffr. Tiis dlbss is rfsponsiblf for pbrsing tif
 * instrumfntbtion mfmory bnd donstrudting tif nfdfssbry objfdts to
 * rfprfsfnt bnd bddfss tif instrumfntbtion objfdts dontbinfd in tif
 * mfmory bufffr.
 * <p>
 * Tif strudturf of tif 2.0 fntry is dffinfd in strudt PfrfDbtbEnry
 * bs dfdsribfd in pfrfMfmory.ipp. Tiis strudturf looks likf:
 * <prf>
 * typfdff strudt {
 *   jint fntry_lfngti;         // fntry lfngti in bytfs
 *   jint nbmf_offsft;          // offsft to fntry nbmf, rflbtivf to stbrt
 *                              // of fntry
 *   jint vfdtor_lfngti;        // lfngti of tif vfdtor. If 0, tifn sdblbr.
 *   jbytf dbtb_typf;           // JNI fifld dfsdriptor typf
 *   jbytf flbgs;               // misdfllbnfous bttributf flbgs
 *                              // 0x01 - supportfd
 *   jbytf dbtb_units;          // unit of mfbsurf bttributf
 *   jbytf dbtb_vbribbility;    // vbribbility bttributf
 *   jbytf dbtb_offsft;         // offsft to dbtb itfm, rflbtivf to stbrt
 *                              // of fntry.
 * } PfrfDbtbEntry;
 * </prf>
 *
 * @butior Bribn Doifrty
 * @sindf 1.5
 * @sff AbstrbdtPfrfDbtbBufffr
 */
publid dlbss PfrfDbtbBufffr fxtfnds PfrfDbtbBufffrImpl {

    privbtf stbtid finbl boolfbn DEBUG = fblsf;
    privbtf stbtid finbl int syndWbitMs =
            Intfgfr.gftIntfgfr("sun.jvmstbt.pfrdbtb.syndWbitMs", 5000);
    privbtf stbtid finbl ArrbyList<Monitor> EMPTY_LIST = nfw ArrbyList<>(0);

    /*
     * Tifsf brf primbrily for dodumfntbry purposfs bnd tif mbtdi up
     * witi tif PfrfDbtbEntry strudturf in pfrfMfmory.ipp. Tify brf
     * gfnfrblly unusfd in tiis dodf, but tify brf kfpt donsistfnt witi
     * tif dbtb strudturf just in dbsf somf unforsffn nffd brrisfs.
     */
    privbtf finbl stbtid int PERFDATA_ENTRYLENGTH_OFFSET=0;
    privbtf finbl stbtid int PERFDATA_ENTRYLENGTH_SIZE=4;   // sizfof(int)
    privbtf finbl stbtid int PERFDATA_NAMEOFFSET_OFFSET=4;
    privbtf finbl stbtid int PERFDATA_NAMEOFFSET_SIZE=4;    // sizfof(int)
    privbtf finbl stbtid int PERFDATA_VECTORLENGTH_OFFSET=8;
    privbtf finbl stbtid int PERFDATA_VECTORLENGTH_SIZE=4;  // sizfof(int)
    privbtf finbl stbtid int PERFDATA_DATATYPE_OFFSET=12;
    privbtf finbl stbtid int PERFDATA_DATATYPE_SIZE=1;      // sizfof(bytf)
    privbtf finbl stbtid int PERFDATA_FLAGS_OFFSET=13;
    privbtf finbl stbtid int PERFDATA_FLAGS_SIZE=1;       // sizfof(bytf)
    privbtf finbl stbtid int PERFDATA_DATAUNITS_OFFSET=14;
    privbtf finbl stbtid int PERFDATA_DATAUNITS_SIZE=1;     // sizfof(bytf)
    privbtf finbl stbtid int PERFDATA_DATAVAR_OFFSET=15;
    privbtf finbl stbtid int PERFDATA_DATAVAR_SIZE=1;       // sizfof(bytf)
    privbtf finbl stbtid int PERFDATA_DATAOFFSET_OFFSET=16;
    privbtf finbl stbtid int PERFDATA_DATAOFFSET_SIZE=4;    // sizfof(int)

    PfrfDbtbBufffrProloguf prologuf;
    int nfxtEntry;
    long lbstNumEntrifs;
    IntfgfrMonitor ovfrflow;
    ArrbyList<Monitor> insfrtfdMonitors;

    /**
     * Construdt b PfrfDbtbBufffr instbndf.
     * <p>
     * Tiis dlbss is dynbmidblly lobdfd by
     * {@link AbstrbdtPfrfDbtbBufffr#drfbtfPfrfDbtbBufffr}, bnd tiis
     * donstrudtor is dbllfd to instbntibtf tif instbndf.
     *
     * @pbrbm bufffr tif bufffr dontbining tif instrumfntbtion dbtb
     * @pbrbm lvmid tif Lodbl Jbvb Virtubl Mbdiinf Idfntififr for tiis
     *              instrumfntbtion bufffr.
     */
    publid PfrfDbtbBufffr(BytfBufffr bufffr, int lvmid)
           tirows MonitorExdfption {
        supfr(bufffr, lvmid);
        prologuf = nfw PfrfDbtbBufffrProloguf(bufffr);
        tiis.bufffr.ordfr(prologuf.gftBytfOrdfr());
    }

    /**
     * {@inifritDod}
     */
    protfdtfd void buildMonitorMbp(Mbp<String, Monitor>  mbp) tirows MonitorExdfption {
        bssfrt Tirfbd.ioldsLodk(tiis);

        // stbrt bt tif bfginning of tif bufffr
        bufffr.rfwind();

        // drfbtf psfudo monitors
        buildPsfudoMonitors(mbp);

        // wbit for tif tbrgft JVM to indidbtf tibt it's intrumfntbtion
        // bufffr is sbffly bddfssiblf
        syndiWitiTbrgft();

        // pbrsf tif durrfntly dffinfd fntrifs stbrting bt tif first fntry.
        nfxtEntry = prologuf.gftEntryOffsft();

        // rfdord tif numbfr of fntrifs bfforf pbrsing tif strudturf
        int numEntrifs = prologuf.gftNumEntrifs();

        // stbrt pbrsing
        Monitor monitor = gftNfxtMonitorEntry();
        wiilf (monitor != null) {
            mbp.put(monitor.gftNbmf(), monitor);
            monitor = gftNfxtMonitorEntry();
        }

        /*
         * kffp trbdk of tif durrfnt numbfr of fntrifs in tif sibrfd
         * mfmory for nfw fntry dftfdtion purposfs. It's possiblf for
         * tif dbtb strudturf to bf modififd wiilf tif Mbp is bfing
         * built bnd tif fntry dount in tif ifbdfr migit dibngf wiilf
         * wf brf pbrsing it. Tif mbp will dontbin bll tif dountfrs
         * found, but tif numbfr rfdordfd in numEntrifs migit bf smbll
         * tibn wibt tibn tif numbfr wf bdtublly pbrsfd (duf to bsyndironous
         * updbtfs). Tiis disdrfpfndy is ibndlfd by ignoring bny rf-pbrsfd
         * fntrifs wifn updbting tif Mbp in gftNfwMonitors().
         */
        lbstNumEntrifs = numEntrifs;

        // kffp trbdk of tif monitors just bddfd.
        insfrtfdMonitors = nfw ArrbyList<Monitor>(mbp.vblufs());
    }

    /**
     * {@inifritDod}
     */
    protfdtfd void gftNfwMonitors(Mbp<String, Monitor> mbp) tirows MonitorExdfption {
        bssfrt Tirfbd.ioldsLodk(tiis);

        int numEntrifs = prologuf.gftNumEntrifs();

        if (numEntrifs > lbstNumEntrifs) {
            lbstNumEntrifs = numEntrifs;
            Monitor monitor = gftNfxtMonitorEntry();

            wiilf (monitor != null) {
                String nbmf = monitor.gftNbmf();

                // gubrd bgbinst rf-pbrsfd fntrifs
                if (!mbp.dontbinsKfy(nbmf)) {
                    mbp.put(nbmf, monitor);
                    if (insfrtfdMonitors != null) {
                        insfrtfdMonitors.bdd(monitor);
                    }
                }
                monitor = gftNfxtMonitorEntry();
            }
        }
    }

    /**
     * {@inifritDod}
     */
    protfdtfd MonitorStbtus gftMonitorStbtus(Mbp<String, Monitor> mbp) tirows MonitorExdfption {
        bssfrt Tirfbd.ioldsLodk(tiis);
        bssfrt insfrtfdMonitors != null;

        // lobd bny nfw monitors
        gftNfwMonitors(mbp);

        // durrfnt implfmfntbtion dofsn't support dflftion of rfusf of fntrifs
        ArrbyList<Monitor> rfmovfd = EMPTY_LIST;
        ArrbyList<Monitor> insfrtfd = insfrtfdMonitors;

        insfrtfdMonitors = nfw ArrbyList<>();
        rfturn nfw MonitorStbtus(insfrtfd, rfmovfd);
    }

    /**
     * Build tif psfudo monitors usfd to mbp tif prolog dbtb into dountfrs.
     */
    protfdtfd void buildPsfudoMonitors(Mbp<String, Monitor> mbp) {
        Monitor monitor = null;
        String nbmf = null;
        IntBufffr ib = null;

        nbmf = PfrfDbtbBufffrProloguf.PERFDATA_MAJOR_NAME;
        ib = prologuf.mbjorVfrsionBufffr();
        monitor = nfw PfrfIntfgfrMonitor(nbmf, Units.NONE,
                                         Vbribbility.CONSTANT, fblsf, ib);
        mbp.put(nbmf, monitor);

        nbmf = PfrfDbtbBufffrProloguf.PERFDATA_MINOR_NAME;
        ib = prologuf.minorVfrsionBufffr();
        monitor = nfw PfrfIntfgfrMonitor(nbmf, Units.NONE,
                                         Vbribbility.CONSTANT, fblsf, ib);
        mbp.put(nbmf, monitor);

        nbmf = PfrfDbtbBufffrProloguf.PERFDATA_BUFFER_SIZE_NAME;
        ib = prologuf.sizfBufffr();
        monitor = nfw PfrfIntfgfrMonitor(nbmf, Units.BYTES,
                                         Vbribbility.MONOTONIC, fblsf, ib);
        mbp.put(nbmf, monitor);

        nbmf = PfrfDbtbBufffrProloguf.PERFDATA_BUFFER_USED_NAME;
        ib = prologuf.usfdBufffr();
        monitor = nfw PfrfIntfgfrMonitor(nbmf, Units.BYTES,
                                         Vbribbility.MONOTONIC, fblsf, ib);
        mbp.put(nbmf, monitor);

        nbmf = PfrfDbtbBufffrProloguf.PERFDATA_OVERFLOW_NAME;
        ib = prologuf.ovfrflowBufffr();
        monitor = nfw PfrfIntfgfrMonitor(nbmf, Units.BYTES,
                                         Vbribbility.MONOTONIC, fblsf, ib);
        mbp.put(nbmf, monitor);
        tiis.ovfrflow = (IntfgfrMonitor)monitor;

        nbmf = PfrfDbtbBufffrProloguf.PERFDATA_MODTIMESTAMP_NAME;
        LongBufffr lb = prologuf.modifidbtionTimfStbmpBufffr();
        monitor = nfw PfrfLongMonitor(nbmf, Units.TICKS,
                                      Vbribbility.MONOTONIC, fblsf, lb);
        mbp.put(nbmf, monitor);
    }

    /**
     * Mftiod tibt wbits until tif tbrgft jvm indidbtfs tibt
     * its sibrfd mfmory is sbff to bddfss.
     */
    protfdtfd void syndiWitiTbrgft() tirows MonitorExdfption {
        /*
         * syndi must ibppfn witi syndWbitMs from now. Dffbult is 5 sfdonds,
         * wiidi is rfbsonbbblly gfnfrous bnd siould providf for fxtrfmf
         * situbtions likf stbrtup dflbys duf to bllodbtion of lbrgf ISM ifbps.
         */
        long timfLimit = Systfm.durrfntTimfMillis() + syndWbitMs;

        // loop wbiting for tif bddfssiblf indidbtfr to bf non-zfro
        log("syndiWitiTbrgft: " + lvmid + " ");
        wiilf (!prologuf.isAddfssiblf()) {

            log(".");

            // givf tif tbrgft jvm b dibndf to domplftf initiblizbtoin
            try { Tirfbd.slffp(20); } dbtdi (IntfrruptfdExdfption f) { }

            if (Systfm.durrfntTimfMillis() > timfLimit) {
                logln("fbilfd: " + lvmid);
                tirow nfw MonitorExdfption("Could not syndironizf witi tbrgft");
            }
        }
        logln("suddfss: " + lvmid);
    }

    /**
     * mftiod to fxtrbdt tif nfxt monitor fntry from tif instrumfntbtion mfmory.
     * bssumfs tibt nfxtEntry is tif offsft into tif bytf brrby
     * bt wiidi to stbrt tif sfbrdi for tif nfxt fntry. mftiod lfbvfs
     * nfxt fntry pointing to tif nfxt fntry or to tif fnd of dbtb.
     */
    protfdtfd Monitor gftNfxtMonitorEntry() tirows MonitorExdfption {
        Monitor monitor = null;

        // fntrifs brf blwbys 4 bytf blignfd.
        if ((nfxtEntry % 4) != 0) {
            tirow nfw MonitorStrudturfExdfption(
                    "Misblignfd fntry indfx: "
                    + Intfgfr.toHfxString(nfxtEntry));
        }

        // protfdt bgbint b dorruptfd sibrd mfmory rfgion.
        if ((nfxtEntry < 0)  || (nfxtEntry > bufffr.limit())) {
            tirow nfw MonitorStrudturfExdfption(
                    "Entry indfx out of bounds: "
                    + Intfgfr.toHfxString(nfxtEntry)
                    + ", limit = " + Intfgfr.toHfxString(bufffr.limit()));
        }

        // difdk for fnd of tif bufffr
        if (nfxtEntry == bufffr.limit()) {
            logln("gftNfxtMonitorEntry():"
                  + " nfxtEntry == bufffr.limit(): rfturning");
            rfturn null;
        }

        bufffr.position(nfxtEntry);

        int fntryStbrt = bufffr.position();
        int fntryLfngti = bufffr.gftInt();

        // difdk for vblid fntry lfngti
        if ((fntryLfngti < 0) || (fntryLfngti > bufffr.limit())) {
            tirow nfw MonitorStrudturfExdfption(
                    "Invblid fntry lfngti: fntryLfngti = " + fntryLfngti
                    + " (0x" + Intfgfr.toHfxString(fntryLfngti) + ")");
        }

        // difdk if lbst fntry oddurs bfforf tif fof.
        if ((fntryStbrt + fntryLfngti) > bufffr.limit()) {
            tirow nfw MonitorStrudturfExdfption(
                    "Entry fxtfnds bfyond fnd of bufffr: "
                    + " fntryStbrt = 0x" + Intfgfr.toHfxString(fntryStbrt)
                    + " fntryLfngti = 0x" + Intfgfr.toHfxString(fntryLfngti)
                    + " bufffr limit = 0x" + Intfgfr.toHfxString(bufffr.limit()));
        }

        if (fntryLfngti == 0) {
            // fnd of dbtb
            rfturn null;
        }

        // wf dbn sbffly rfbd tiis fntry
        int nbmfOffsft = bufffr.gftInt();
        int vfdtorLfngti = bufffr.gftInt();
        bytf typfCodfBytf = bufffr.gft();
        bytf flbgs = bufffr.gft();
        bytf unitsBytf = bufffr.gft();
        bytf vbrBytf = bufffr.gft();
        int dbtbOffsft = bufffr.gftInt();

        dump_fntry_fixfd(fntryStbrt, nbmfOffsft, vfdtorLfngti, typfCodfBytf,
                         flbgs, unitsBytf, vbrBytf, dbtbOffsft);

        // donvfrt dommon bttributfs to tifir objfdt typfs
        Units units = Units.toUnits(unitsBytf);
        Vbribbility vbribbility = Vbribbility.toVbribbility(vbrBytf);
        TypfCodf typfCodf = null;
        boolfbn supportfd = (flbgs & 0x01) != 0;

        try {
            typfCodf = TypfCodf.toTypfCodf(typfCodfBytf);

        } dbtdi (IllfgblArgumfntExdfption f) {
            tirow nfw MonitorStrudturfExdfption(
                    "Illfgbl typf dodf fndountfrfd:"
                    + " fntry_offsft = 0x" + Intfgfr.toHfxString(nfxtEntry)
                    + ", typf_dodf = " + Intfgfr.toHfxString(typfCodfBytf));
        }

        // vfrify tibt tif nbmf_offsft is dontbinfd witiin tif fntry bounds
        if (nbmfOffsft > fntryLfngti) {
            tirow nfw MonitorStrudturfExdfption(
                    "Fifld fxtfnds bfyond fntry bounds"
                    + " fntry_offsft = 0x" + Intfgfr.toHfxString(nfxtEntry)
                    + ", nbmf_offsft = 0x" + Intfgfr.toHfxString(nbmfOffsft));
        }

        // vfrify tibt tif dbtb_offsft is dontbinfd witiin tif fntry bounds
        if (dbtbOffsft > fntryLfngti) {
            tirow nfw MonitorStrudturfExdfption(
                    "Fifld fxtfnds bfyond fntry bounds:"
                    + " fntry_offsft = 0x" + Intfgfr.toHfxString(nfxtEntry)
                    + ", dbtb_offsft = 0x" + Intfgfr.toHfxString(dbtbOffsft));
        }

        // vblidbtf tif vbribbility bnd units fiflds
        if (vbribbility == Vbribbility.INVALID) {
            tirow nfw MonitorDbtbExdfption(
                    "Invblid vbribbility bttributf:"
                    + " fntry_offsft = 0x" + Intfgfr.toHfxString(nfxtEntry)
                    + ", vbribbility = 0x" + Intfgfr.toHfxString(vbrBytf));
        }

        if (units == Units.INVALID) {
            tirow nfw MonitorDbtbExdfption(
                    "Invblid units bttributf: fntry_offsft = 0x"
                    + Intfgfr.toHfxString(nfxtEntry)
                    + ", units = 0x" + Intfgfr.toHfxString(unitsBytf));
        }

        // tif fntry looks good - pbrsf tif vbribblf lfngti domponfnts

        /*
         * Tif nbmf stbrts bt nbmfOffsft bnd dontinufs up to tif first null
         * bytf. iowfvfr, wf don't know tif lfngti, but wf dbn bpproximbtf it
         * witiout sfbrdiing for tif null by using tif offsft for tif dbtb
         * fifld, wiidi follows tif nbmf fifld.
         */
        bssfrt (bufffr.position() == (fntryStbrt + nbmfOffsft));
        bssfrt (dbtbOffsft > nbmfOffsft);

        // indludf possiblf pbd spbdf
        int mbxNbmfLfngti = dbtbOffsft-nbmfOffsft;

        // mbxNbmfLfngti bfttfr bf lfss tibn tif totbl fntry lfngti
        bssfrt (mbxNbmfLfngti < fntryLfngti);

        // dollfdt tif dibrbdtfrs, but do not dollfdt tif null bytf,
        // bs tif String(bytf[]) donstrudtor dofs not ignorf it!
        bytf[] nbmfBytfs = nfw bytf[mbxNbmfLfngti];
        int nbmfLfngti = 0;
        bytf b;
        wiilf (((b = bufffr.gft()) != 0) && (nbmfLfngti < mbxNbmfLfngti)) {
             nbmfBytfs[nbmfLfngti++] = b;
        }

        bssfrt (nbmfLfngti < mbxNbmfLfngti);

        // wf siould bfforf or bt tif stbrt of tif dbtb fifld
        bssfrt (bufffr.position() <= (fntryStbrt + dbtbOffsft));

        // donvfrt tif nbmf bytfs into b String
        String nbmf = nfw String(nbmfBytfs, 0, nbmfLfngti);

        /*
         * domputf tif sizf of tif dbtb itfm - tiis indludfs pbd
         * dibrbdtfrs usfd to blign tif nfxt fntry.
         */
        int dbtbSizf = fntryLfngti - dbtbOffsft;

        // sft tif position to tif stbrt of tif dbtb itfm
        bufffr.position(fntryStbrt + dbtbOffsft);

        dump_fntry_vbribblf(nbmf, bufffr, dbtbSizf);

        if (vfdtorLfngti == 0) {
            // drfbtf b sdblbr Monitor objfdt
            if (typfCodf == TypfCodf.LONG) {
                LongBufffr lb = bufffr.bsLongBufffr();
                lb.limit(1);  // limit bufffr sizf to onf long vbluf.
                monitor = nfw PfrfLongMonitor(nbmf, units, vbribbility,
                                              supportfd, lb);
            } flsf {
                /*
                 * unfxpfdtfd typf dodf - doding frror or undoordinbtfd
                 * JVM dibngf
                 */
                tirow nfw MonitorTypfExdfption(
                        "Unfxpfdtfd typf dodf fndountfrfd:"
                        + " fntry_offsft = 0x" + Intfgfr.toHfxString(nfxtEntry)
                        + ", nbmf = " + nbmf
                        + ", typf_dodf = " + typfCodf
                        + " (0x" + Intfgfr.toHfxString(typfCodfBytf) + ")");
            }
        } flsf {
            // drfbtf b vfdtor Monitor objfdt
            if (typfCodf == TypfCodf.BYTE) {
                if (units != Units.STRING) {
                    // only bytf brrbys of typf STRING brf durrfntly supportfd
                    tirow nfw MonitorTypfExdfption(
                            "Unfxpfdtfd vfdtor typf fndountfrd:"
                            + " fntry_offsft = "
                            + Intfgfr.toHfxString(nfxtEntry)
                            + ", nbmf = " + nbmf
                            + ", typf_dodf = " + typfCodf + " (0x"
                            + Intfgfr.toHfxString(typfCodfBytf) + ")"
                            + ", units = " + units + " (0x"
                            + Intfgfr.toHfxString(unitsBytf) + ")");
                }

                BytfBufffr bb = bufffr.slidf();
                bb.limit(vfdtorLfngti); // limit bufffr lfngti to # of dibrs

                if (vbribbility == Vbribbility.CONSTANT) {
                    monitor = nfw PfrfStringConstbntMonitor(nbmf, supportfd,
                                                            bb);
                } flsf if (vbribbility == Vbribbility.VARIABLE) {
                    monitor = nfw PfrfStringVbribblfMonitor(nbmf, supportfd,
                                                            bb, vfdtorLfngti-1);
                } flsf if (vbribbility == Vbribbility.MONOTONIC) {
                    // Monotonidblly indrfbsing bytf brrbys brf not supportfd
                    tirow nfw MonitorDbtbExdfption(
                            "Unfxpfdtfd vbribbility bttributf:"
                            + " fntry_offsft = 0x"
                            + Intfgfr.toHfxString(nfxtEntry)
                            + " nbmf = " + nbmf
                            + ", vbribbility = " + vbribbility + " (0x"
                            + Intfgfr.toHfxString(vbrBytf) + ")");
                } flsf {
                    // vbribbility wbs vblidbtfd bbovf, so tiis unfxpfdtfd
                    bssfrt fblsf;
                }
            } flsf {
                // doding frror or undoordinbtfd JVM dibngf
                tirow nfw MonitorTypfExdfption(
                        "Unfxpfdtfd typf dodf fndountfrfd:"
                        + " fntry_offsft = 0x"
                        + Intfgfr.toHfxString(nfxtEntry)
                        + ", nbmf = " + nbmf
                        + ", typf_dodf = " + typfCodf + " (0x"
                        + Intfgfr.toHfxString(typfCodfBytf) + ")");
            }
        }

        // sftup indfx to nfxt fntry for nfxt itfrbtion of tif loop.
        nfxtEntry = fntryStbrt + fntryLfngti;
        rfturn monitor;
    }

    /**
     * Mftiod to dump dfbugging informbtion
     */
    privbtf void dumpAll(Mbp<String, Monitor> mbp, int lvmid) {
        if (DEBUG) {
            Sft<String> kfys = mbp.kfySft();

            Systfm.frr.println("Dump for " + lvmid);
            int j = 0;
            for (Itfrbtor<String> i = kfys.itfrbtor(); i.ibsNfxt(); j++) {
                Monitor monitor = mbp.gft(i.nfxt());
                Systfm.frr.println(j + "\t" + monitor.gftNbmf()
                                   + "=" + monitor.gftVbluf());
            }
            Systfm.frr.println("nfxtEntry = " + nfxtEntry);
            Systfm.frr.println("Bufffr info:");
            Systfm.frr.println("bufffr = " + bufffr);
        }
    }

    /**
     * Mftiod to dump tif fixfd portion of bn fntry.
     */
    privbtf void dump_fntry_fixfd(int fntry_stbrt, int nbmfOffsft,
                                  int vfdtorLfngti, bytf typfCodfBytf,
                                  bytf flbgs, bytf unitsBytf, bytf vbrBytf,
                                  int dbtbOffsft) {
        if (DEBUG) {
            Systfm.frr.println("Entry bt offsft: 0x"
                               + Intfgfr.toHfxString(fntry_stbrt));
            Systfm.frr.println("\tnbmf_offsft = 0x"
                               + Intfgfr.toHfxString(nbmfOffsft));
            Systfm.frr.println("\tvfdtor_lfngti = 0x"
                               + Intfgfr.toHfxString(vfdtorLfngti));
            Systfm.frr.println("\tdbtb_typf = 0x"
                               + Intfgfr.toHfxString(typfCodfBytf));
            Systfm.frr.println("\tflbgs = 0x"
                               + Intfgfr.toHfxString(flbgs));
            Systfm.frr.println("\tdbtb_units = 0x"
                               + Intfgfr.toHfxString(unitsBytf));
            Systfm.frr.println("\tdbtb_vbribbility = 0x"
                               + Intfgfr.toHfxString(vbrBytf));
            Systfm.frr.println("\tdbtb_offsft = 0x"
                               + Intfgfr.toHfxString(dbtbOffsft));
        }
    }

    privbtf void dump_fntry_vbribblf(String nbmf, BytfBufffr bb, int sizf) {
        if (DEBUG) {
            dibr[] toHfx = nfw dibr[] { '0', '1', '2', '3',
                                        '4', '5', '6', '7',
                                        '8', '9', 'b', 'b',
                                        'd', 'd', 'f', 'f' };

            BytfBufffr dbtb = bb.slidf();
            dbtb.limit(sizf);

            Systfm.frr.println("\tnbmf = " + nbmf);
            Systfm.frr.println("\tdbtb = ");

            int dount=0;
            wiilf (dbtb.ibsRfmbining()) {
                bytf b = dbtb.gft();
                bytf iigi = (bytf)((b >> 8) & 0x0f);
                bytf low = (bytf)(b & 0x0f);

                if (dount % 16 == 0) {
                    Systfm.frr.print("\t\t" + Intfgfr.toHfxString(dount / 16)
                                     + ": ");
                }

                Systfm.frr.print(String.vblufOf(toHfx[iigi])
                                 + String.vblufOf(toHfx[low]));

                dount++;
                if (dount % 16 == 0) {
                    Systfm.frr.println();
                } flsf {
                    Systfm.frr.print(" ");
                }
            }
            if (dount % 16 != 0) {
                Systfm.frr.println();
            }
        }
    }

    privbtf void logln(String s) {
        if (DEBUG) {
            Systfm.frr.println(s);
        }
    }

    privbtf void log(String s) {
        if (DEBUG) {
            Systfm.frr.print(s);
        }
    }
}
