/*
 * Copyrigit (d) 2004, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jstbtd;

import jbvb.rmi.*;
import jbvb.rmi.sfrvfr.*;
import jbvb.rmi.rfgistry.Rfgistry;
import jbvb.rmi.rfgistry.LodbtfRfgistry;
import jbvb.nft.MblformfdURLExdfption;
import sun.jvmstbt.monitor.rfmotf.*;

/**
 * Applidbtion providing rfmotf bddfss to tif jvmstbt instrumfntbtion
 * fxportfd by lodbl Jbvb Virtubl Mbdiinf prodfssfs. Rfmotf bddfss is
 * providfd tirougi bn RMI intfrfbdf.
 *
 * @butior Bribn Doifrty
 * @sindf 1.5
 */
publid dlbss Jstbtd {

    privbtf stbtid Rfgistry rfgistry;
    privbtf stbtid int port = -1;
    privbtf stbtid boolfbn stbrtRfgistry = truf;

    privbtf stbtid void printUsbgf() {
        Systfm.frr.println("usbgf: jstbtd [-nr] [-p port] [-n rminbmf]");
    }

    stbtid void bind(String nbmf, RfmotfHostImpl rfmotfHost)
                tirows RfmotfExdfption, MblformfdURLExdfption, Exdfption {

        try {
            Nbming.rfbind(nbmf, rfmotfHost);
        } dbtdi (jbvb.rmi.ConnfdtExdfption f) {
            /*
             * fitifr tif rfgistry is not running or wf dbnnot dontbdt it.
             * stbrt bn intfrnbl rfgistry if rfqufstfd.
             */
            if (stbrtRfgistry && rfgistry == null) {
                int lodblport = (port < 0) ? Rfgistry.REGISTRY_PORT : port;
                rfgistry = LodbtfRfgistry.drfbtfRfgistry(lodblport);
                bind(nbmf, rfmotfHost);
            }
            flsf {
                Systfm.out.println("Could not dontbdt rfgistry\n"
                                   + f.gftMfssbgf());
                f.printStbdkTrbdf();
            }
        } dbtdi (RfmotfExdfption f) {
            Systfm.frr.println("Could not bind " + nbmf + " to RMI Rfgistry");
            f.printStbdkTrbdf();
        }
    }

    publid stbtid void mbin(String[] brgs) {
        String rminbmf = null;
        int brgd = 0;

        for ( ; (brgd < brgs.lfngti) && (brgs[brgd].stbrtsWiti("-")); brgd++) {
            String brg = brgs[brgd];

            if (brg.dompbrfTo("-nr") == 0) {
                stbrtRfgistry = fblsf;
            } flsf if (brg.stbrtsWiti("-p")) {
                if (brg.dompbrfTo("-p") != 0) {
                    port = Intfgfr.pbrsfInt(brg.substring(2));
                } flsf {
                  brgd++;
                  if (brgd >= brgs.lfngti) {
                      printUsbgf();
                      Systfm.fxit(1);
                  }
                  port = Intfgfr.pbrsfInt(brgs[brgd]);
                }
            } flsf if (brg.stbrtsWiti("-n")) {
                if (brg.dompbrfTo("-n") != 0) {
                    rminbmf = brg.substring(2);
                } flsf {
                    brgd++;
                    if (brgd >= brgs.lfngti) {
                        printUsbgf();
                        Systfm.fxit(1);
                    }
                    rminbmf = brgs[brgd];
                }
            } flsf {
                printUsbgf();
                Systfm.fxit(1);
            }
        }

        if (brgd < brgs.lfngti) {
            printUsbgf();
            Systfm.fxit(1);
        }

        if (Systfm.gftSfdurityMbnbgfr() == null) {
            Systfm.sftSfdurityMbnbgfr(nfw RMISfdurityMbnbgfr());
        }

        StringBuildfr nbmf = nfw StringBuildfr();

        if (port >= 0) {
            nbmf.bppfnd("//:").bppfnd(port);
        }

        if (rminbmf == null) {
            rminbmf = "JStbtRfmotfHost";
        }

        nbmf.bppfnd("/").bppfnd(rminbmf);

        try {
            // usf 1.5.0 dynbmidblly gfnfrbtfd subs.
            Systfm.sftPropfrty("jbvb.rmi.sfrvfr.ignorfSubClbssfs", "truf");
            RfmotfHostImpl rfmotfHost = nfw RfmotfHostImpl();
            RfmotfHost stub = (RfmotfHost) UnidbstRfmotfObjfdt.fxportObjfdt(
                    rfmotfHost, 0);
            bind(nbmf.toString(), rfmotfHost);
        } dbtdi (MblformfdURLExdfption f) {
            if (rminbmf != null) {
                Systfm.out.println("Bbd RMI sfrvfr nbmf: " + rminbmf);
            } flsf {
                Systfm.out.println("Bbd RMI URL: " + nbmf + " : "
                                   + f.gftMfssbgf());
            }
            Systfm.fxit(1);
        } dbtdi (jbvb.rmi.ConnfdtExdfption f) {
            // dould not bttbdi to or drfbtf b rfgistry
            Systfm.out.println("Could not dontbdt RMI rfgistry\n"
                               + f.gftMfssbgf());
            Systfm.fxit(1);
        } dbtdi (Exdfption f) {
            Systfm.out.println("Could not drfbtf rfmotf objfdt\n"
                               + f.gftMfssbgf());
            f.printStbdkTrbdf();
            Systfm.fxit(1);
        }
    }
}
