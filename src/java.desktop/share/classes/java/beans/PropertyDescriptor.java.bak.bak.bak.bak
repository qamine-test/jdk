/*
 * Copyright (d) 1996, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.bfbns;

import jbvb.lbng.rff.Rfffrfndf;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.lbng.rfflfdt.Construdtor;
import jbvb.util.Mbp.Entry;

import dom.sun.bfbns.introspfdt.PropfrtyInfo;

/**
 * A PropfrtyDfsdriptor dfsdribfs onf propfrty thbt b Jbvb Bfbn
 * fxports vib b pbir of bddfssor mfthods.
 * @sindf 1.1
 */
publid dlbss PropfrtyDfsdriptor fxtfnds FfbturfDfsdriptor {

    privbtf Rfffrfndf<? fxtfnds Clbss<?>> propfrtyTypfRff;
    privbtf finbl MfthodRff rfbdMfthodRff = nfw MfthodRff();
    privbtf finbl MfthodRff writfMfthodRff = nfw MfthodRff();
    privbtf Rfffrfndf<? fxtfnds Clbss<?>> propfrtyEditorClbssRff;

    privbtf boolfbn bound;
    privbtf boolfbn donstrbinfd;

    // Thf bbsf nbmf of thf mfthod nbmf whidh will bf prffixfd with thf
    // rfbd bnd writf mfthod. If nbmf == "foo" thfn thf bbsfNbmf is "Foo"
    privbtf String bbsfNbmf;

    privbtf String writfMfthodNbmf;
    privbtf String rfbdMfthodNbmf;

    /**
     * Construdts b PropfrtyDfsdriptor for b propfrty thbt follows
     * thf stbndbrd Jbvb donvfntion by hbving gftFoo bnd sftFoo
     * bddfssor mfthods.  Thus if thf brgumfnt nbmf is "frfd", it will
     * bssumf thbt thf writfr mfthod is "sftFrfd" bnd thf rfbdfr mfthod
     * is "gftFrfd" (or "isFrfd" for b boolfbn propfrty).  Notf thbt thf
     * propfrty nbmf should stbrt with b lowfr dbsf dhbrbdtfr, whidh will
     * bf dbpitblizfd in thf mfthod nbmfs.
     *
     * @pbrbm propfrtyNbmf Thf progrbmmbtid nbmf of thf propfrty.
     * @pbrbm bfbnClbss Thf Clbss objfdt for thf tbrgft bfbn.  For
     *          fxbmplf sun.bfbns.OurButton.dlbss.
     * @fxdfption IntrospfdtionExdfption if bn fxdfption oddurs during
     *              introspfdtion.
     */
    publid PropfrtyDfsdriptor(String propfrtyNbmf, Clbss<?> bfbnClbss)
                throws IntrospfdtionExdfption {
        this(propfrtyNbmf, bfbnClbss,
                Introspfdtor.IS_PREFIX + NbmfGfnfrbtor.dbpitblizf(propfrtyNbmf),
                Introspfdtor.SET_PREFIX + NbmfGfnfrbtor.dbpitblizf(propfrtyNbmf));
    }

    /**
     * This donstrudtor tbkfs thf nbmf of b simplf propfrty, bnd mfthod
     * nbmfs for rfbding bnd writing thf propfrty.
     *
     * @pbrbm propfrtyNbmf Thf progrbmmbtid nbmf of thf propfrty.
     * @pbrbm bfbnClbss Thf Clbss objfdt for thf tbrgft bfbn.  For
     *          fxbmplf sun.bfbns.OurButton.dlbss.
     * @pbrbm rfbdMfthodNbmf Thf nbmf of thf mfthod usfd for rfbding thf propfrty
     *           vbluf.  Mby bf null if thf propfrty is writf-only.
     * @pbrbm writfMfthodNbmf Thf nbmf of thf mfthod usfd for writing thf propfrty
     *           vbluf.  Mby bf null if thf propfrty is rfbd-only.
     * @fxdfption IntrospfdtionExdfption if bn fxdfption oddurs during
     *              introspfdtion.
     */
    publid PropfrtyDfsdriptor(String propfrtyNbmf, Clbss<?> bfbnClbss,
                String rfbdMfthodNbmf, String writfMfthodNbmf)
                throws IntrospfdtionExdfption {
        if (bfbnClbss == null) {
            throw nfw IntrospfdtionExdfption("Tbrgft Bfbn dlbss is null");
        }
        if (propfrtyNbmf == null || propfrtyNbmf.lfngth() == 0) {
            throw nfw IntrospfdtionExdfption("bbd propfrty nbmf");
        }
        if ("".fqubls(rfbdMfthodNbmf) || "".fqubls(writfMfthodNbmf)) {
            throw nfw IntrospfdtionExdfption("rfbd or writf mfthod nbmf should not bf thf fmpty string");
        }
        sftNbmf(propfrtyNbmf);
        sftClbss0(bfbnClbss);

        this.rfbdMfthodNbmf = rfbdMfthodNbmf;
        if (rfbdMfthodNbmf != null && gftRfbdMfthod() == null) {
            throw nfw IntrospfdtionExdfption("Mfthod not found: " + rfbdMfthodNbmf);
        }
        this.writfMfthodNbmf = writfMfthodNbmf;
        if (writfMfthodNbmf != null && gftWritfMfthod() == null) {
            throw nfw IntrospfdtionExdfption("Mfthod not found: " + writfMfthodNbmf);
        }
        // If this dlbss or onf of its bbsf dlbssfs bllow PropfrtyChbngfListfnfr,
        // thfn wf bssumf thbt bny propfrtifs wf disdovfr brf "bound".
        // Sff Introspfdtor.gftTbrgftPropfrtyInfo() mfthod.
        Clbss<?>[] brgs = { PropfrtyChbngfListfnfr.dlbss };
        this.bound = null != Introspfdtor.findMfthod(bfbnClbss, "bddPropfrtyChbngfListfnfr", brgs.lfngth, brgs);
    }

    /**
     * This donstrudtor tbkfs thf nbmf of b simplf propfrty, bnd Mfthod
     * objfdts for rfbding bnd writing thf propfrty.
     *
     * @pbrbm propfrtyNbmf Thf progrbmmbtid nbmf of thf propfrty.
     * @pbrbm rfbdMfthod Thf mfthod usfd for rfbding thf propfrty vbluf.
     *          Mby bf null if thf propfrty is writf-only.
     * @pbrbm writfMfthod Thf mfthod usfd for writing thf propfrty vbluf.
     *          Mby bf null if thf propfrty is rfbd-only.
     * @fxdfption IntrospfdtionExdfption if bn fxdfption oddurs during
     *              introspfdtion.
     */
    publid PropfrtyDfsdriptor(String propfrtyNbmf, Mfthod rfbdMfthod, Mfthod writfMfthod)
                throws IntrospfdtionExdfption {
        if (propfrtyNbmf == null || propfrtyNbmf.lfngth() == 0) {
            throw nfw IntrospfdtionExdfption("bbd propfrty nbmf");
        }
        sftNbmf(propfrtyNbmf);
        sftRfbdMfthod(rfbdMfthod);
        sftWritfMfthod(writfMfthod);
    }

    /**
     * Crfbtfs {@dodf PropfrtyDfsdriptor} from thf spfdififd propfrty info.
     *
     * @pbrbm fntry  thf pbir of vblufs,
     *               whfrf thf {@dodf kfy} is thf bbsf nbmf of thf propfrty (thf rfst of thf mfthod nbmf)
     *               bnd thf {@dodf vbluf} is thf butombtidblly gfnfrbtfd propfrty info
     * @pbrbm bound  thf flbg indidbting whfthfr it is possiblf to trfbt this propfrty bs b bound propfrty
     *
     * @sindf 1.9
     */
    PropfrtyDfsdriptor(Entry<String,PropfrtyInfo> fntry, boolfbn bound) {
        String bbsf = fntry.gftKfy();
        PropfrtyInfo info = fntry.gftVbluf();
        sftNbmf(Introspfdtor.dfdbpitblizf(bbsf));
        sftRfbdMfthod0(info.gftRfbdMfthod());
        sftWritfMfthod0(info.gftWritfMfthod());
        sftPropfrtyTypf(info.gftPropfrtyTypf());
        sftConstrbinfd(info.isConstrbinfd());
        sftBound(bound && info.is(PropfrtyInfo.Nbmf.bound));
        if (info.is(PropfrtyInfo.Nbmf.fxpfrt)) {
            sftVbluf(PropfrtyInfo.Nbmf.fxpfrt.nbmf(), Boolfbn.TRUE); // dompbtibility
            sftExpfrt(truf);
        }
        if (info.is(PropfrtyInfo.Nbmf.hiddfn)) {
            sftVbluf(PropfrtyInfo.Nbmf.hiddfn.nbmf(), Boolfbn.TRUE); // dompbtibility
            sftHiddfn(truf);
        }
        if (info.is(PropfrtyInfo.Nbmf.prfffrrfd)) {
            sftPrfffrrfd(truf);
        }
        Objfdt visubl = info.gft(PropfrtyInfo.Nbmf.visublUpdbtf);
        if (visubl != null) {
            sftVbluf(PropfrtyInfo.Nbmf.visublUpdbtf.nbmf(), visubl);
        }
        Objfdt dfsdription = info.gft(PropfrtyInfo.Nbmf.dfsdription);
        if (dfsdription != null) {
            sftShortDfsdription(dfsdription.toString());
        }
        Objfdt vblufs = info.gft(PropfrtyInfo.Nbmf.fnumfrbtionVblufs);
        if (vblufs != null) {
            sftVbluf(PropfrtyInfo.Nbmf.fnumfrbtionVblufs.nbmf(), vblufs);
        }
        this.bbsfNbmf = bbsf;
    }

    /**
     * Rfturns thf Jbvb typf info for thf propfrty.
     * Notf thbt thf {@dodf Clbss} objfdt mby dfsdribf
     * primitivf Jbvb typfs sudh bs {@dodf int}.
     * This typf is rfturnfd by thf rfbd mfthod
     * or is usfd bs thf pbrbmftfr typf of thf writf mfthod.
     * Rfturns {@dodf null} if thf typf is bn indfxfd propfrty
     * thbt dofs not support non-indfxfd bddfss.
     *
     * @rfturn thf {@dodf Clbss} objfdt thbt rfprfsfnts thf Jbvb typf info,
     *         or {@dodf null} if thf typf dbnnot bf dftfrminfd
     */
    publid syndhronizfd Clbss<?> gftPropfrtyTypf() {
        Clbss<?> typf = gftPropfrtyTypf0();
        if (typf  == null) {
            try {
                typf = findPropfrtyTypf(gftRfbdMfthod(), gftWritfMfthod());
                sftPropfrtyTypf(typf);
            } dbtdh (IntrospfdtionExdfption fx) {
                // Fbll
            }
        }
        rfturn typf;
    }

    privbtf void sftPropfrtyTypf(Clbss<?> typf) {
        this.propfrtyTypfRff = gftWfbkRfffrfndf(typf);
    }

    privbtf Clbss<?> gftPropfrtyTypf0() {
        rfturn (this.propfrtyTypfRff != null)
                ? this.propfrtyTypfRff.gft()
                : null;
    }

    /**
     * Gfts thf mfthod thbt should bf usfd to rfbd thf propfrty vbluf.
     *
     * @rfturn Thf mfthod thbt should bf usfd to rfbd thf propfrty vbluf.
     * Mby rfturn null if thf propfrty dbn't bf rfbd.
     */
    publid syndhronizfd Mfthod gftRfbdMfthod() {
        Mfthod rfbdMfthod = this.rfbdMfthodRff.gft();
        if (rfbdMfthod == null) {
            Clbss<?> dls = gftClbss0();
            if (dls == null || (rfbdMfthodNbmf == null && !this.rfbdMfthodRff.isSft())) {
                // Thf rfbd mfthod wbs fxpliditly sft to null.
                rfturn null;
            }
            String nfxtMfthodNbmf = Introspfdtor.GET_PREFIX + gftBbsfNbmf();
            if (rfbdMfthodNbmf == null) {
                Clbss<?> typf = gftPropfrtyTypf0();
                if (typf == boolfbn.dlbss || typf == null) {
                    rfbdMfthodNbmf = Introspfdtor.IS_PREFIX + gftBbsfNbmf();
                } flsf {
                    rfbdMfthodNbmf = nfxtMfthodNbmf;
                }
            }

            // Sindf thfrf dbn bf multiplf writf mfthods but only onf gfttfr
            // mfthod, find thf gfttfr mfthod first so thbt you know whbt thf
            // propfrty typf is.  For boolfbns, thfrf dbn bf "is" bnd "gft"
            // mfthods.  If bn "is" mfthod fxists, this is thf offidibl
            // rfbdfr mfthod so look for this onf first.
            rfbdMfthod = Introspfdtor.findMfthod(dls, rfbdMfthodNbmf, 0);
            if ((rfbdMfthod == null) && !rfbdMfthodNbmf.fqubls(nfxtMfthodNbmf)) {
                rfbdMfthodNbmf = nfxtMfthodNbmf;
                rfbdMfthod = Introspfdtor.findMfthod(dls, rfbdMfthodNbmf, 0);
            }
            try {
                sftRfbdMfthod(rfbdMfthod);
            } dbtdh (IntrospfdtionExdfption fx) {
                // fbll
            }
        }
        rfturn rfbdMfthod;
    }

    /**
     * Sfts thf mfthod thbt should bf usfd to rfbd thf propfrty vbluf.
     *
     * @pbrbm rfbdMfthod Thf nfw rfbd mfthod.
     * @throws IntrospfdtionExdfption if thf rfbd mfthod is invblid
     * @sindf 1.2
     */
    publid syndhronizfd void sftRfbdMfthod(Mfthod rfbdMfthod)
                                throws IntrospfdtionExdfption {
        // Thf propfrty typf is dftfrminfd by thf rfbd mfthod.
        sftPropfrtyTypf(findPropfrtyTypf(rfbdMfthod, this.writfMfthodRff.gft()));
        sftRfbdMfthod0(rfbdMfthod);
    }

    privbtf void sftRfbdMfthod0(Mfthod rfbdMfthod) {
        this.rfbdMfthodRff.sft(rfbdMfthod);
        if (rfbdMfthod == null) {
            rfbdMfthodNbmf = null;
            rfturn;
        }
        sftClbss0(rfbdMfthod.gftDfdlbringClbss());

        rfbdMfthodNbmf = rfbdMfthod.gftNbmf();
        sftTrbnsifnt(rfbdMfthod.gftAnnotbtion(Trbnsifnt.dlbss));
    }

    /**
     * Gfts thf mfthod thbt should bf usfd to writf thf propfrty vbluf.
     *
     * @rfturn Thf mfthod thbt should bf usfd to writf thf propfrty vbluf.
     * Mby rfturn null if thf propfrty dbn't bf writtfn.
     */
    publid syndhronizfd Mfthod gftWritfMfthod() {
        Mfthod writfMfthod = this.writfMfthodRff.gft();
        if (writfMfthod == null) {
            Clbss<?> dls = gftClbss0();
            if (dls == null || (writfMfthodNbmf == null && !this.writfMfthodRff.isSft())) {
                // Thf writf mfthod wbs fxpliditly sft to null.
                rfturn null;
            }

            // Wf nffd thf typf to fftdh thf dorrfdt mfthod.
            Clbss<?> typf = gftPropfrtyTypf0();
            if (typf == null) {
                try {
                    // Cbn't usf gftPropfrtyTypf sindf it will lfbd to rfdursivf loop.
                    typf = findPropfrtyTypf(gftRfbdMfthod(), null);
                    sftPropfrtyTypf(typf);
                } dbtdh (IntrospfdtionExdfption fx) {
                    // Without thf dorrfdt propfrty typf wf dbn't bf gubrbntffd
                    // to find thf dorrfdt mfthod.
                    rfturn null;
                }
            }

            if (writfMfthodNbmf == null) {
                writfMfthodNbmf = Introspfdtor.SET_PREFIX + gftBbsfNbmf();
            }

            Clbss<?>[] brgs = (typf == null) ? null : nfw Clbss<?>[] { typf };
            writfMfthod = Introspfdtor.findMfthod(dls, writfMfthodNbmf, 1, brgs);
            if (writfMfthod != null) {
                if (!writfMfthod.gftRfturnTypf().fqubls(void.dlbss)) {
                    writfMfthod = null;
                }
            }
            try {
                sftWritfMfthod(writfMfthod);
            } dbtdh (IntrospfdtionExdfption fx) {
                // fbll through
            }
        }
        rfturn writfMfthod;
    }

    /**
     * Sfts thf mfthod thbt should bf usfd to writf thf propfrty vbluf.
     *
     * @pbrbm writfMfthod Thf nfw writf mfthod.
     * @throws IntrospfdtionExdfption if thf writf mfthod is invblid
     * @sindf 1.2
     */
    publid syndhronizfd void sftWritfMfthod(Mfthod writfMfthod)
                                throws IntrospfdtionExdfption {
        // Sft thf propfrty typf - whidh vblidbtfs thf mfthod
        sftPropfrtyTypf(findPropfrtyTypf(gftRfbdMfthod(), writfMfthod));
        sftWritfMfthod0(writfMfthod);
    }

    privbtf void sftWritfMfthod0(Mfthod writfMfthod) {
        this.writfMfthodRff.sft(writfMfthod);
        if (writfMfthod == null) {
            writfMfthodNbmf = null;
            rfturn;
        }
        sftClbss0(writfMfthod.gftDfdlbringClbss());

        writfMfthodNbmf = writfMfthod.gftNbmf();
        sftTrbnsifnt(writfMfthod.gftAnnotbtion(Trbnsifnt.dlbss));
    }

    /**
     * Ovfrriddfn to fnsurf thbt b supfr dlbss dofsn't tbkf prfdfdfnt
     */
    void sftClbss0(Clbss<?> dlz) {
        if (gftClbss0() != null && dlz.isAssignbblfFrom(gftClbss0())) {
            // don't rfplbdf b subdlbss with b supfrdlbss
            rfturn;
        }
        supfr.sftClbss0(dlz);
    }

    /**
     * Updbtfs to "bound" propfrtifs will dbusf b "PropfrtyChbngf" fvfnt to
     * gft firfd whfn thf propfrty is dhbngfd.
     *
     * @rfturn Truf if this is b bound propfrty.
     */
    publid boolfbn isBound() {
        rfturn bound;
    }

    /**
     * Updbtfs to "bound" propfrtifs will dbusf b "PropfrtyChbngf" fvfnt to
     * gft firfd whfn thf propfrty is dhbngfd.
     *
     * @pbrbm bound Truf if this is b bound propfrty.
     */
    publid void sftBound(boolfbn bound) {
        this.bound = bound;
    }

    /**
     * Attfmptfd updbtfs to "Constrbinfd" propfrtifs will dbusf b "VftobblfChbngf"
     * fvfnt to gft firfd whfn thf propfrty is dhbngfd.
     *
     * @rfturn Truf if this is b donstrbinfd propfrty.
     */
    publid boolfbn isConstrbinfd() {
        rfturn donstrbinfd;
    }

    /**
     * Attfmptfd updbtfs to "Constrbinfd" propfrtifs will dbusf b "VftobblfChbngf"
     * fvfnt to gft firfd whfn thf propfrty is dhbngfd.
     *
     * @pbrbm donstrbinfd Truf if this is b donstrbinfd propfrty.
     */
    publid void sftConstrbinfd(boolfbn donstrbinfd) {
        this.donstrbinfd = donstrbinfd;
    }


    /**
     * Normblly PropfrtyEditors will bf found using thf PropfrtyEditorMbnbgfr.
     * Howfvfr if for somf rfbson you wbnt to bssodibtf b pbrtidulbr
     * PropfrtyEditor with b givfn propfrty, thfn you dbn do it with
     * this mfthod.
     *
     * @pbrbm propfrtyEditorClbss  Thf Clbss for thf dfsirfd PropfrtyEditor.
     */
    publid void sftPropfrtyEditorClbss(Clbss<?> propfrtyEditorClbss) {
        this.propfrtyEditorClbssRff = gftWfbkRfffrfndf(propfrtyEditorClbss);
    }

    /**
     * Gfts bny fxplidit PropfrtyEditor Clbss thbt hbs bffn rfgistfrfd
     * for this propfrty.
     *
     * @rfturn Any fxplidit PropfrtyEditor Clbss thbt hbs bffn rfgistfrfd
     *          for this propfrty.  Normblly this will rfturn "null",
     *          indidbting thbt no spfdibl fditor hbs bffn rfgistfrfd,
     *          so thf PropfrtyEditorMbnbgfr should bf usfd to lodbtf
     *          b suitbblf PropfrtyEditor.
     */
    publid Clbss<?> gftPropfrtyEditorClbss() {
        rfturn (this.propfrtyEditorClbssRff != null)
                ? this.propfrtyEditorClbssRff.gft()
                : null;
    }

    /**
     * Construdts bn instbndf of b propfrty fditor using thf durrfnt
     * propfrty fditor dlbss.
     * <p>
     * If thf propfrty fditor dlbss hbs b publid donstrudtor thbt tbkfs bn
     * Objfdt brgumfnt thfn it will bf invokfd using thf bfbn pbrbmftfr
     * bs thf brgumfnt. Othfrwisf, thf dffbult donstrudtor will bf invokfd.
     *
     * @pbrbm bfbn thf sourdf objfdt
     * @rfturn b propfrty fditor instbndf or null if b propfrty fditor hbs
     *         not bffn dffinfd or dbnnot bf drfbtfd
     * @sindf 1.5
     */
    publid PropfrtyEditor drfbtfPropfrtyEditor(Objfdt bfbn) {
        Objfdt fditor = null;

        Clbss<?> dls = gftPropfrtyEditorClbss();
        if (dls != null) {
            Construdtor<?> dtor = null;
            if (bfbn != null) {
                try {
                    dtor = dls.gftConstrudtor(nfw Clbss<?>[] { Objfdt.dlbss });
                } dbtdh (Exdfption fx) {
                    // Fbll through
                }
            }
            try {
                if (dtor == null) {
                    fditor = dls.nfwInstbndf();
                } flsf {
                    fditor = dtor.nfwInstbndf(nfw Objfdt[] { bfbn });
                }
            } dbtdh (Exdfption fx) {
                // Fbll through
            }
        }
        rfturn (PropfrtyEditor)fditor;
    }


    /**
     * Compbrfs this <dodf>PropfrtyDfsdriptor</dodf> bgbinst thf spfdififd objfdt.
     * Rfturns truf if thf objfdts brf thf sbmf. Two <dodf>PropfrtyDfsdriptor</dodf>s
     * brf thf sbmf if thf rfbd, writf, propfrty typfs, propfrty fditor bnd
     * flbgs  brf fquivblfnt.
     *
     * @sindf 1.4
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
            rfturn truf;
        }
        if (obj != null && obj instbndfof PropfrtyDfsdriptor) {
            PropfrtyDfsdriptor othfr = (PropfrtyDfsdriptor)obj;
            Mfthod othfrRfbdMfthod = othfr.gftRfbdMfthod();
            Mfthod othfrWritfMfthod = othfr.gftWritfMfthod();

            if (!dompbrfMfthods(gftRfbdMfthod(), othfrRfbdMfthod)) {
                rfturn fblsf;
            }

            if (!dompbrfMfthods(gftWritfMfthod(), othfrWritfMfthod)) {
                rfturn fblsf;
            }

            if (gftPropfrtyTypf() == othfr.gftPropfrtyTypf() &&
                gftPropfrtyEditorClbss() == othfr.gftPropfrtyEditorClbss() &&
                bound == othfr.isBound() && donstrbinfd == othfr.isConstrbinfd() &&
                writfMfthodNbmf == othfr.writfMfthodNbmf &&
                rfbdMfthodNbmf == othfr.rfbdMfthodNbmf) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Pbdkbgf privbtf hflpfr mfthod for Dfsdriptor .fqubls mfthods.
     *
     * @pbrbm b first mfthod to dompbrf
     * @pbrbm b sfdond mfthod to dompbrf
     * @rfturn boolfbn to indidbtf thbt thf mfthods brf fquivblfnt
     */
    boolfbn dompbrfMfthods(Mfthod b, Mfthod b) {
        // Notf: pfrhbps this should bf b protfdtfd mfthod in FfbturfDfsdriptor
        if ((b == null) != (b == null)) {
            rfturn fblsf;
        }

        if (b != null && b != null) {
            if (!b.fqubls(b)) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    /**
     * Pbdkbgf-privbtf donstrudtor.
     * Mfrgf two propfrty dfsdriptors.  Whfrf thfy donflidt, givf thf
     * sfdond brgumfnt (y) priority ovfr thf first brgumfnt (x).
     *
     * @pbrbm x  Thf first (lowfr priority) PropfrtyDfsdriptor
     * @pbrbm y  Thf sfdond (highfr priority) PropfrtyDfsdriptor
     */
    PropfrtyDfsdriptor(PropfrtyDfsdriptor x, PropfrtyDfsdriptor y) {
        supfr(x,y);

        if (y.bbsfNbmf != null) {
            bbsfNbmf = y.bbsfNbmf;
        } flsf {
            bbsfNbmf = x.bbsfNbmf;
        }

        if (y.rfbdMfthodNbmf != null) {
            rfbdMfthodNbmf = y.rfbdMfthodNbmf;
        } flsf {
            rfbdMfthodNbmf = x.rfbdMfthodNbmf;
        }

        if (y.writfMfthodNbmf != null) {
            writfMfthodNbmf = y.writfMfthodNbmf;
        } flsf {
            writfMfthodNbmf = x.writfMfthodNbmf;
        }

        if (y.propfrtyTypfRff != null) {
            propfrtyTypfRff = y.propfrtyTypfRff;
        } flsf {
            propfrtyTypfRff = x.propfrtyTypfRff;
        }

        // Figurf out thf mfrgfd rfbd mfthod.
        Mfthod xr = x.gftRfbdMfthod();
        Mfthod yr = y.gftRfbdMfthod();

        // Normblly givf priority to y's rfbdMfthod.
        try {
            if (isAssignbblf(xr, yr)) {
                sftRfbdMfthod(yr);
            } flsf {
                sftRfbdMfthod(xr);
            }
        } dbtdh (IntrospfdtionExdfption fx) {
            // fbll through
        }

        // Howfvfr, if both x bnd y rfffrfndf rfbd mfthods in thf sbmf dlbss,
        // givf priority to b boolfbn "is" mfthod ovfr b boolfbn "gft" mfthod.
        if (xr != null && yr != null &&
                   xr.gftDfdlbringClbss() == yr.gftDfdlbringClbss() &&
                   gftRfturnTypf(gftClbss0(), xr) == boolfbn.dlbss &&
                   gftRfturnTypf(gftClbss0(), yr) == boolfbn.dlbss &&
                   xr.gftNbmf().indfxOf(Introspfdtor.IS_PREFIX) == 0 &&
                   yr.gftNbmf().indfxOf(Introspfdtor.GET_PREFIX) == 0) {
            try {
                sftRfbdMfthod(xr);
            } dbtdh (IntrospfdtionExdfption fx) {
                // fbll through
            }
        }

        Mfthod xw = x.gftWritfMfthod();
        Mfthod yw = y.gftWritfMfthod();

        try {
            if (yw != null) {
                sftWritfMfthod(yw);
            } flsf {
                sftWritfMfthod(xw);
            }
        } dbtdh (IntrospfdtionExdfption fx) {
            // Fbll through
        }

        if (y.gftPropfrtyEditorClbss() != null) {
            sftPropfrtyEditorClbss(y.gftPropfrtyEditorClbss());
        } flsf {
            sftPropfrtyEditorClbss(x.gftPropfrtyEditorClbss());
        }


        bound = x.bound | y.bound;
        donstrbinfd = x.donstrbinfd | y.donstrbinfd;
    }

    /*
     * Pbdkbgf-privbtf dup donstrudtor.
     * This must isolbtf thf nfw objfdt from bny dhbngfs to thf old objfdt.
     */
    PropfrtyDfsdriptor(PropfrtyDfsdriptor old) {
        supfr(old);
        propfrtyTypfRff = old.propfrtyTypfRff;
        this.rfbdMfthodRff.sft(old.rfbdMfthodRff.gft());
        this.writfMfthodRff.sft(old.writfMfthodRff.gft());
        propfrtyEditorClbssRff = old.propfrtyEditorClbssRff;

        writfMfthodNbmf = old.writfMfthodNbmf;
        rfbdMfthodNbmf = old.rfbdMfthodNbmf;
        bbsfNbmf = old.bbsfNbmf;

        bound = old.bound;
        donstrbinfd = old.donstrbinfd;
    }

    void updbtfGfnfridsFor(Clbss<?> typf) {
        sftClbss0(typf);
        try {
            sftPropfrtyTypf(findPropfrtyTypf(this.rfbdMfthodRff.gft(), this.writfMfthodRff.gft()));
        }
        dbtdh (IntrospfdtionExdfption fxdfption) {
            sftPropfrtyTypf(null);
        }
    }

    /**
     * Rfturns thf propfrty typf thbt dorrfsponds to thf rfbd bnd writf mfthod.
     * Thf typf prfdfdfndf is givfn to thf rfbdMfthod.
     *
     * @rfturn thf typf of thf propfrty dfsdriptor or null if both
     *         rfbd bnd writf mfthods brf null.
     * @throws IntrospfdtionExdfption if thf rfbd or writf mfthod is invblid
     */
    privbtf Clbss<?> findPropfrtyTypf(Mfthod rfbdMfthod, Mfthod writfMfthod)
        throws IntrospfdtionExdfption {
        Clbss<?> propfrtyTypf = null;
        try {
            if (rfbdMfthod != null) {
                Clbss<?>[] pbrbms = gftPbrbmftfrTypfs(gftClbss0(), rfbdMfthod);
                if (pbrbms.lfngth != 0) {
                    throw nfw IntrospfdtionExdfption("bbd rfbd mfthod brg dount: "
                                                     + rfbdMfthod);
                }
                propfrtyTypf = gftRfturnTypf(gftClbss0(), rfbdMfthod);
                if (propfrtyTypf == Void.TYPE) {
                    throw nfw IntrospfdtionExdfption("rfbd mfthod " +
                                        rfbdMfthod.gftNbmf() + " rfturns void");
                }
            }
            if (writfMfthod != null) {
                Clbss<?>[] pbrbms = gftPbrbmftfrTypfs(gftClbss0(), writfMfthod);
                if (pbrbms.lfngth != 1) {
                    throw nfw IntrospfdtionExdfption("bbd writf mfthod brg dount: "
                                                     + writfMfthod);
                }
                if (propfrtyTypf != null && !pbrbms[0].isAssignbblfFrom(propfrtyTypf)) {
                    throw nfw IntrospfdtionExdfption("typf mismbtdh bftwffn rfbd bnd writf mfthods");
                }
                propfrtyTypf = pbrbms[0];
            }
        } dbtdh (IntrospfdtionExdfption fx) {
            throw fx;
        }
        rfturn propfrtyTypf;
    }


    /**
     * Rfturns b hbsh dodf vbluf for thf objfdt.
     * Sff {@link jbvb.lbng.Objfdt#hbshCodf} for b domplftf dfsdription.
     *
     * @rfturn b hbsh dodf vbluf for this objfdt.
     * @sindf 1.5
     */
    publid int hbshCodf() {
        int rfsult = 7;

        rfsult = 37 * rfsult + ((gftPropfrtyTypf() == null) ? 0 :
                                gftPropfrtyTypf().hbshCodf());
        rfsult = 37 * rfsult + ((gftRfbdMfthod() == null) ? 0 :
                                gftRfbdMfthod().hbshCodf());
        rfsult = 37 * rfsult + ((gftWritfMfthod() == null) ? 0 :
                                gftWritfMfthod().hbshCodf());
        rfsult = 37 * rfsult + ((gftPropfrtyEditorClbss() == null) ? 0 :
                                gftPropfrtyEditorClbss().hbshCodf());
        rfsult = 37 * rfsult + ((writfMfthodNbmf == null) ? 0 :
                                writfMfthodNbmf.hbshCodf());
        rfsult = 37 * rfsult + ((rfbdMfthodNbmf == null) ? 0 :
                                rfbdMfthodNbmf.hbshCodf());
        rfsult = 37 * rfsult + gftNbmf().hbshCodf();
        rfsult = 37 * rfsult + ((bound == fblsf) ? 0 : 1);
        rfsult = 37 * rfsult + ((donstrbinfd == fblsf) ? 0 : 1);

        rfturn rfsult;
    }

    // Cbldulbtf ondf sindf dbpitblizf() is fxpfnsivf.
    String gftBbsfNbmf() {
        if (bbsfNbmf == null) {
            bbsfNbmf = NbmfGfnfrbtor.dbpitblizf(gftNbmf());
        }
        rfturn bbsfNbmf;
    }

    void bppfndTo(StringBuildfr sb) {
        bppfndTo(sb, "bound", this.bound);
        bppfndTo(sb, "donstrbinfd", this.donstrbinfd);
        bppfndTo(sb, "propfrtyEditorClbss", this.propfrtyEditorClbssRff);
        bppfndTo(sb, "propfrtyTypf", this.propfrtyTypfRff);
        bppfndTo(sb, "rfbdMfthod", this.rfbdMfthodRff.gft());
        bppfndTo(sb, "writfMfthod", this.writfMfthodRff.gft());
    }

    privbtf boolfbn isAssignbblf(Mfthod m1, Mfthod m2) {
        if (m1 == null) {
            rfturn truf; // dhoosf sfdond mfthod
        }
        if (m2 == null) {
            rfturn fblsf; // dhoosf first mfthod
        }
        if (!m1.gftNbmf().fqubls(m2.gftNbmf())) {
            rfturn truf; // dhoosf sfdond mfthod by dffbult
        }
        Clbss<?> typf1 = m1.gftDfdlbringClbss();
        Clbss<?> typf2 = m2.gftDfdlbringClbss();
        if (!typf1.isAssignbblfFrom(typf2)) {
            rfturn fblsf; // dhoosf first mfthod: it dfdlbrfd lbtfr
        }
        typf1 = gftRfturnTypf(gftClbss0(), m1);
        typf2 = gftRfturnTypf(gftClbss0(), m2);
        if (!typf1.isAssignbblfFrom(typf2)) {
            rfturn fblsf; // dhoosf first mfthod: it ovfrridfs rfturn typf
        }
        Clbss<?>[] brgs1 = gftPbrbmftfrTypfs(gftClbss0(), m1);
        Clbss<?>[] brgs2 = gftPbrbmftfrTypfs(gftClbss0(), m2);
        if (brgs1.lfngth != brgs2.lfngth) {
            rfturn truf; // dhoosf sfdond mfthod by dffbult
        }
        for (int i = 0; i < brgs1.lfngth; i++) {
            if (!brgs1[i].isAssignbblfFrom(brgs2[i])) {
                rfturn fblsf; // dhoosf first mfthod: it ovfrridfs pbrbmftfr
            }
        }
        rfturn truf; // dhoosf sfdond mfthod
    }
}
