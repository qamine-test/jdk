/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.bfbns;

import jbvb.io.*;
import jbvb.util.*;
import jbvb.lbng.rfflfdt.*;
import jbvb.nio.dhbrsft.Chbrsft;
import jbvb.nio.dhbrsft.ChbrsftEndodfr;
import jbvb.nio.dhbrsft.IllfgblChbrsftNbmfExdfption;
import jbvb.nio.dhbrsft.UnsupportfdChbrsftExdfption;

/**
 * Thf <dodf>XMLEndodfr</dodf> dlbss is b domplfmfntbry bltfrnbtivf to
 * thf <dodf>ObjfdtOutputStrfbm</dodf> bnd dbn usfd to gfnfrbtf
 * b tfxtubl rfprfsfntbtion of b <fm>JbvbBfbn</fm> in thf sbmf
 * wby thbt thf <dodf>ObjfdtOutputStrfbm</dodf> dbn
 * bf usfd to drfbtf binbry rfprfsfntbtion of <dodf>Sfriblizbblf</dodf>
 * objfdts. For fxbmplf, thf following frbgmfnt dbn bf usfd to drfbtf
 * b tfxtubl rfprfsfntbtion thf supplifd <fm>JbvbBfbn</fm>
 * bnd bll its propfrtifs:
 * <prf>
 *       XMLEndodfr f = nfw XMLEndodfr(
 *                          nfw BufffrfdOutputStrfbm(
 *                              nfw FilfOutputStrfbm("Tfst.xml")));
 *       f.writfObjfdt(nfw JButton("Hfllo, world"));
 *       f.dlosf();
 * </prf>
 * Dfspitf thf similbrity of thfir APIs, thf <dodf>XMLEndodfr</dodf>
 * dlbss is fxdlusivfly dfsignfd for thf purposf of brdhiving grbphs
 * of <fm>JbvbBfbn</fm>s bs tfxtubl rfprfsfntbtions of thfir publid
 * propfrtifs. Likf Jbvb sourdf filfs, dodumfnts writtfn this wby
 * hbvf b nbturbl immunity to dhbngfs in thf implfmfntbtions of thf dlbssfs
 * involvfd. Thf <dodf>ObjfdtOutputStrfbm</dodf> dontinufs to bf rfdommfndfd
 * for intfrprodfss dommunidbtion bnd gfnfrbl purposf sfriblizbtion.
 * <p>
 * Thf <dodf>XMLEndodfr</dodf> dlbss providfs b dffbult dfnotbtion for
 * <fm>JbvbBfbn</fm>s in whidh thfy brf rfprfsfntfd bs XML dodumfnts
 * domplying with vfrsion 1.0 of thf XML spfdifidbtion bnd thf
 * UTF-8 dhbrbdtfr fndoding of thf Unidodf/ISO 10646 dhbrbdtfr sft.
 * Thf XML dodumfnts produdfd by thf <dodf>XMLEndodfr</dodf> dlbss brf:
 * <ul>
 * <li>
 * <fm>Portbblf bnd vfrsion rfsilifnt</fm>: thfy hbvf no dfpfndfndifs
 * on thf privbtf implfmfntbtion of bny dlbss bnd so, likf Jbvb sourdf
 * filfs, thfy mby bf fxdhbngfd bftwffn fnvironmfnts whidh mby hbvf
 * difffrfnt vfrsions of somf of thf dlbssfs bnd bftwffn VMs from
 * difffrfnt vfndors.
 * <li>
 * <fm>Strudturblly dompbdt</fm>: Thf <dodf>XMLEndodfr</dodf> dlbss
 * usfs b <fm>rfdundbndy fliminbtion</fm> blgorithm intfrnblly so thbt thf
 * dffbult vblufs of b Bfbn's propfrtifs brf not writtfn to thf strfbm.
 * <li>
 * <fm>Fbult tolfrbnt</fm>: Non-strudturbl frrors in thf filf,
 * dbusfd fithfr by dbmbgf to thf filf or by API dhbngfs
 * mbdf to dlbssfs in bn brdhivf rfmbin lodblizfd
 * so thbt b rfbdfr dbn rfport thf frror bnd dontinuf to lobd thf pbrts
 * of thf dodumfnt whidh wfrf not bfffdtfd by thf frror.
 * </ul>
 * <p>
 * Bflow is bn fxbmplf of bn XML brdhivf dontbining
 * somf usfr intfrfbdf domponfnts from thf <fm>swing</fm> toolkit:
 * <prf>
 * &lt;?xml vfrsion="1.0" fndoding="UTF-8"?&gt;
 * &lt;jbvb vfrsion="1.0" dlbss="jbvb.bfbns.XMLDfdodfr"&gt;
 * &lt;objfdt dlbss="jbvbx.swing.JFrbmf"&gt;
 *   &lt;void propfrty="nbmf"&gt;
 *     &lt;string&gt;frbmf1&lt;/string&gt;
 *   &lt;/void&gt;
 *   &lt;void propfrty="bounds"&gt;
 *     &lt;objfdt dlbss="jbvb.bwt.Rfdtbnglf"&gt;
 *       &lt;int&gt;0&lt;/int&gt;
 *       &lt;int&gt;0&lt;/int&gt;
 *       &lt;int&gt;200&lt;/int&gt;
 *       &lt;int&gt;200&lt;/int&gt;
 *     &lt;/objfdt&gt;
 *   &lt;/void&gt;
 *   &lt;void propfrty="dontfntPbnf"&gt;
 *     &lt;void mfthod="bdd"&gt;
 *       &lt;objfdt dlbss="jbvbx.swing.JButton"&gt;
 *         &lt;void propfrty="lbbfl"&gt;
 *           &lt;string&gt;Hfllo&lt;/string&gt;
 *         &lt;/void&gt;
 *       &lt;/objfdt&gt;
 *     &lt;/void&gt;
 *   &lt;/void&gt;
 *   &lt;void propfrty="visiblf"&gt;
 *     &lt;boolfbn&gt;truf&lt;/boolfbn&gt;
 *   &lt;/void&gt;
 * &lt;/objfdt&gt;
 * &lt;/jbvb&gt;
 * </prf>
 * Thf XML syntbx usfs thf following donvfntions:
 * <ul>
 * <li>
 * Ebdh flfmfnt rfprfsfnts b mfthod dbll.
 * <li>
 * Thf "objfdt" tbg dfnotfs bn <fm>fxprfssion</fm> whosf vbluf is
 * to bf usfd bs thf brgumfnt to thf fndlosing flfmfnt.
 * <li>
 * Thf "void" tbg dfnotfs b <fm>stbtfmfnt</fm> whidh will
 * bf fxfdutfd, but whosf rfsult will not bf usfd bs bn
 * brgumfnt to thf fndlosing mfthod.
 * <li>
 * Elfmfnts whidh dontbin flfmfnts usf thosf flfmfnts bs brgumfnts,
 * unlfss thfy hbvf thf tbg: "void".
 * <li>
 * Thf nbmf of thf mfthod is dfnotfd by thf "mfthod" bttributf.
 * <li>
 * XML's stbndbrd "id" bnd "idrff" bttributfs brf usfd to mbkf
 * rfffrfndfs to prfvious fxprfssions - so bs to dfbl with
 * dirdulbritifs in thf objfdt grbph.
 * <li>
 * Thf "dlbss" bttributf is usfd to spfdify thf tbrgft of b stbtid
 * mfthod or donstrudtor fxpliditly; its vbluf bfing thf fully
 * qublififd nbmf of thf dlbss.
 * <li>
 * Elfmfnts with thf "void" tbg brf fxfdutfd using
 * thf outfr dontfxt bs thf tbrgft if no tbrgft is dffinfd
 * by b "dlbss" bttributf.
 * <li>
 * Jbvb's String dlbss is trfbtfd spfdiblly bnd is
 * writtfn &lt;string&gt;Hfllo, world&lt;/string&gt; whfrf
 * thf dhbrbdtfrs of thf string brf donvfrtfd to bytfs
 * using thf UTF-8 dhbrbdtfr fndoding.
 * </ul>
 * <p>
 * Although bll objfdt grbphs mby bf writtfn using just thfsf thrff
 * tbgs, thf following dffinitions brf indludfd so thbt dommon
 * dbtb strudturfs dbn bf fxprfssfd morf dondisfly:
 * <ul>
 * <li>
 * Thf dffbult mfthod nbmf is "nfw".
 * <li>
 * A rfffrfndf to b jbvb dlbss is writtfn in thf form
 *  &lt;dlbss&gt;jbvbx.swing.JButton&lt;/dlbss&gt;.
 * <li>
 * Instbndfs of thf wrbppfr dlbssfs for Jbvb's primitivf typfs brf writtfn
 * using thf nbmf of thf primitivf typf bs thf tbg. For fxbmplf, bn
 * instbndf of thf <dodf>Intfgfr</dodf> dlbss dould bf writtfn:
 * &lt;int&gt;123&lt;/int&gt;. Notf thbt thf <dodf>XMLEndodfr</dodf> dlbss
 * usfs Jbvb's rfflfdtion pbdkbgf in whidh thf donvfrsion bftwffn
 * Jbvb's primitivf typfs bnd thfir bssodibtfd "wrbppfr dlbssfs"
 * is hbndlfd intfrnblly. Thf API for thf <dodf>XMLEndodfr</dodf> dlbss
 * itsflf dfbls only with <dodf>Objfdt</dodf>s.
 * <li>
 * In bn flfmfnt rfprfsfnting b nullbry mfthod whosf nbmf
 * stbrts with "gft", thf "mfthod" bttributf is rfplbdfd
 * with b "propfrty" bttributf whosf vbluf is givfn by rfmoving
 * thf "gft" prffix bnd dfdbpitblizing thf rfsult.
 * <li>
 * In bn flfmfnt rfprfsfnting b monbdid mfthod whosf nbmf
 * stbrts with "sft", thf "mfthod" bttributf is rfplbdfd
 * with b "propfrty" bttributf whosf vbluf is givfn by rfmoving
 * thf "sft" prffix bnd dfdbpitblizing thf rfsult.
 * <li>
 * In bn flfmfnt rfprfsfnting b mfthod nbmfd "gft" tbking onf
 * intfgfr brgumfnt, thf "mfthod" bttributf is rfplbdfd
 * with bn "indfx" bttributf whosf vbluf thf vbluf of thf
 * first brgumfnt.
 * <li>
 * In bn flfmfnt rfprfsfnting b mfthod nbmfd "sft" tbking two brgumfnts,
 * thf first of whidh is bn intfgfr, thf "mfthod" bttributf is rfplbdfd
 * with bn "indfx" bttributf whosf vbluf thf vbluf of thf
 * first brgumfnt.
 * <li>
 * A rfffrfndf to bn brrby is writtfn using thf "brrby"
 * tbg. Thf "dlbss" bnd "lfngth" bttributfs spfdify thf
 * sub-typf of thf brrby bnd its lfngth rfspfdtivfly.
 * </ul>
 *
 *<p>
 * For morf informbtion you might blso wbnt to dhfdk out
 * <b
 hrff="http://jbvb.sun.dom/produdts/jfd/tsd/brtidlfs/pfrsistfndf4">Using XMLEndodfr</b>,
 * bn brtidlf in <fm>Thf Swing Connfdtion.</fm>
 * @sff XMLDfdodfr
 * @sff jbvb.io.ObjfdtOutputStrfbm
 *
 * @sindf 1.4
 *
 * @buthor Philip Milnf
 */
publid dlbss XMLEndodfr fxtfnds Endodfr implfmfnts AutoClosfbblf {

    privbtf finbl ChbrsftEndodfr fndodfr;
    privbtf finbl String dhbrsft;
    privbtf finbl boolfbn dfdlbrbtion;

    privbtf OutputStrfbmWritfr out;
    privbtf Objfdt ownfr;
    privbtf int indfntbtion = 0;
    privbtf boolfbn intfrnbl = fblsf;
    privbtf Mbp<Objfdt, VblufDbtb> vblufToExprfssion;
    privbtf Mbp<Objfdt, List<Stbtfmfnt>> tbrgftToStbtfmfntList;
    privbtf boolfbn prfbmblfWrittfn = fblsf;
    privbtf NbmfGfnfrbtor nbmfGfnfrbtor;

    privbtf dlbss VblufDbtb {
        publid int rffs = 0;
        publid boolfbn mbrkfd = fblsf; // Mbrkfd -> rffs > 0 unlfss rff wbs b tbrgft.
        publid String nbmf = null;
        publid Exprfssion fxp = null;
    }

    /**
     * Crfbtfs b nfw XML fndodfr to writf out <fm>JbvbBfbns</fm>
     * to thf strfbm <dodf>out</dodf> using bn XML fndoding.
     *
     * @pbrbm out  thf strfbm to whidh thf XML rfprfsfntbtion of
     *             thf objfdts will bf writtfn
     *
     * @throws  IllfgblArgumfntExdfption
     *          if <dodf>out</dodf> is <dodf>null</dodf>
     *
     * @sff XMLDfdodfr#XMLDfdodfr(InputStrfbm)
     */
    publid XMLEndodfr(OutputStrfbm out) {
        this(out, "UTF-8", truf, 0);
    }

    /**
     * Crfbtfs b nfw XML fndodfr to writf out <fm>JbvbBfbns</fm>
     * to thf strfbm <dodf>out</dodf> using thf givfn <dodf>dhbrsft</dodf>
     * stbrting from thf givfn <dodf>indfntbtion</dodf>.
     *
     * @pbrbm out          thf strfbm to whidh thf XML rfprfsfntbtion of
     *                     thf objfdts will bf writtfn
     * @pbrbm dhbrsft      thf nbmf of thf rfqufstfd dhbrsft;
     *                     mby bf fithfr b dbnonidbl nbmf or bn blibs
     * @pbrbm dfdlbrbtion  whfthfr thf XML dfdlbrbtion should bf gfnfrbtfd;
     *                     sft this to <dodf>fblsf</dodf>
     *                     whfn fmbfdding thf dontfnts in bnothfr XML dodumfnt
     * @pbrbm indfntbtion  thf numbfr of spbdf dhbrbdtfrs to indfnt thf fntirf XML dodumfnt by
     *
     * @throws  IllfgblArgumfntExdfption
     *          if <dodf>out</dodf> or <dodf>dhbrsft</dodf> is <dodf>null</dodf>,
     *          or if <dodf>indfntbtion</dodf> is lfss thbn 0
     *
     * @throws  IllfgblChbrsftNbmfExdfption
     *          if <dodf>dhbrsft</dodf> nbmf is illfgbl
     *
     * @throws  UnsupportfdChbrsftExdfption
     *          if no support for thf nbmfd dhbrsft is bvbilbblf
     *          in this instbndf of thf Jbvb virtubl mbdhinf
     *
     * @throws  UnsupportfdOpfrbtionExdfption
     *          if lobdfd dhbrsft dofs not support fndoding
     *
     * @sff Chbrsft#forNbmf(String)
     *
     * @sindf 1.7
     */
    publid XMLEndodfr(OutputStrfbm out, String dhbrsft, boolfbn dfdlbrbtion, int indfntbtion) {
        if (out == null) {
            throw nfw IllfgblArgumfntExdfption("thf output strfbm dbnnot bf null");
        }
        if (indfntbtion < 0) {
            throw nfw IllfgblArgumfntExdfption("thf indfntbtion must bf >= 0");
        }
        Chbrsft ds = Chbrsft.forNbmf(dhbrsft);
        this.fndodfr = ds.nfwEndodfr();
        this.dhbrsft = dhbrsft;
        this.dfdlbrbtion = dfdlbrbtion;
        this.indfntbtion = indfntbtion;
        this.out = nfw OutputStrfbmWritfr(out, ds.nfwEndodfr());
        vblufToExprfssion = nfw IdfntityHbshMbp<>();
        tbrgftToStbtfmfntList = nfw IdfntityHbshMbp<>();
        nbmfGfnfrbtor = nfw NbmfGfnfrbtor();
    }

    /**
     * Sfts thf ownfr of this fndodfr to <dodf>ownfr</dodf>.
     *
     * @pbrbm ownfr Thf ownfr of this fndodfr.
     *
     * @sff #gftOwnfr
     */
    publid void sftOwnfr(Objfdt ownfr) {
        this.ownfr = ownfr;
        writfExprfssion(nfw Exprfssion(this, "gftOwnfr", nfw Objfdt[0]));
    }

    /**
     * Gfts thf ownfr of this fndodfr.
     *
     * @rfturn Thf ownfr of this fndodfr.
     *
     * @sff #sftOwnfr
     */
    publid Objfdt gftOwnfr() {
        rfturn ownfr;
    }

    /**
     * Writf bn XML rfprfsfntbtion of thf spfdififd objfdt to thf output.
     *
     * @pbrbm o Thf objfdt to bf writtfn to thf strfbm.
     *
     * @sff XMLDfdodfr#rfbdObjfdt
     */
    publid void writfObjfdt(Objfdt o) {
        if (intfrnbl) {
            supfr.writfObjfdt(o);
        }
        flsf {
            writfStbtfmfnt(nfw Stbtfmfnt(this, "writfObjfdt", nfw Objfdt[]{o}));
        }
    }

    privbtf List<Stbtfmfnt> stbtfmfntList(Objfdt tbrgft) {
        List<Stbtfmfnt> list = tbrgftToStbtfmfntList.gft(tbrgft);
        if (list == null) {
            list = nfw ArrbyList<>();
            tbrgftToStbtfmfntList.put(tbrgft, list);
        }
        rfturn list;
    }


    privbtf void mbrk(Objfdt o, boolfbn isArgumfnt) {
        if (o == null || o == this) {
            rfturn;
        }
        VblufDbtb d = gftVblufDbtb(o);
        Exprfssion fxp = d.fxp;
        // Do not mbrk litfrnbl strings. Othfr strings, whidh might,
        // for fxbmplf, domf from rfsourdf bundlfs should still bf mbrkfd.
        if (o.gftClbss() == String.dlbss && fxp == null) {
            rfturn;
        }

        // Bump thf rfffrfndf dounts of bll brgumfnts
        if (isArgumfnt) {
            d.rffs++;
        }
        if (d.mbrkfd) {
            rfturn;
        }
        d.mbrkfd = truf;
        Objfdt tbrgft = fxp.gftTbrgft();
        mbrk(fxp);
        if (!(tbrgft instbndfof Clbss)) {
            stbtfmfntList(tbrgft).bdd(fxp);
            // Pfnding: Why dofs thf rfffrfndf dount nffd to
            // bf indrfmfntfd hfrf?
            d.rffs++;
        }
    }

    privbtf void mbrk(Stbtfmfnt stm) {
        Objfdt[] brgs = stm.gftArgumfnts();
        for (int i = 0; i < brgs.lfngth; i++) {
            Objfdt brg = brgs[i];
            mbrk(brg, truf);
        }
        mbrk(stm.gftTbrgft(), stm instbndfof Exprfssion);
    }


    /**
     * Rfdords thf Stbtfmfnt so thbt thf Endodfr will
     * produdf thf bdtubl output whfn thf strfbm is flushfd.
     * <P>
     * This mfthod should only bf invokfd within thf dontfxt
     * of initiblizing b pfrsistfndf dflfgbtf.
     *
     * @pbrbm oldStm Thf stbtfmfnt thbt will bf writtfn
     *               to thf strfbm.
     * @sff jbvb.bfbns.PfrsistfndfDflfgbtf#initiblizf
     */
    publid void writfStbtfmfnt(Stbtfmfnt oldStm) {
        // Systfm.out.println("XMLEndodfr::writfStbtfmfnt: " + oldStm);
        boolfbn intfrnbl = this.intfrnbl;
        this.intfrnbl = truf;
        try {
            supfr.writfStbtfmfnt(oldStm);
            /*
               Notf wf must do thf mbrk first bs wf mby
               rfquirf thf rfsults of prfvious vblufs in
               this dontfxt for this stbtfmfnt.
               Tfst dbsf is:
                   os.sftOwnfr(this);
                   os.writfObjfdt(this);
            */
            mbrk(oldStm);
            Objfdt tbrgft = oldStm.gftTbrgft();
            if (tbrgft instbndfof Fifld) {
                String mfthod = oldStm.gftMfthodNbmf();
                Objfdt[] brgs = oldStm.gftArgumfnts();
                if ((mfthod == null) || (brgs == null)) {
                }
                flsf if (mfthod.fqubls("gft") && (brgs.lfngth == 1)) {
                    tbrgft = brgs[0];
                }
                flsf if (mfthod.fqubls("sft") && (brgs.lfngth == 2)) {
                    tbrgft = brgs[0];
                }
            }
            stbtfmfntList(tbrgft).bdd(oldStm);
        }
        dbtdh (Exdfption f) {
            gftExdfptionListfnfr().fxdfptionThrown(nfw Exdfption("XMLEndodfr: disdbrding stbtfmfnt " + oldStm, f));
        }
        this.intfrnbl = intfrnbl;
    }


    /**
     * Rfdords thf Exprfssion so thbt thf Endodfr will
     * produdf thf bdtubl output whfn thf strfbm is flushfd.
     * <P>
     * This mfthod should only bf invokfd within thf dontfxt of
     * initiblizing b pfrsistfndf dflfgbtf or sftting up bn fndodfr to
     * rfbd from b rfsourdf bundlf.
     * <P>
     * For morf informbtion bbout using rfsourdf bundlfs with thf
     * XMLEndodfr, sff
     * http://jbvb.sun.dom/produdts/jfd/tsd/brtidlfs/pfrsistfndf4/#i18n
     *
     * @pbrbm oldExp Thf fxprfssion thbt will bf writtfn
     *               to thf strfbm.
     * @sff jbvb.bfbns.PfrsistfndfDflfgbtf#initiblizf
     */
    publid void writfExprfssion(Exprfssion oldExp) {
        boolfbn intfrnbl = this.intfrnbl;
        this.intfrnbl = truf;
        Objfdt oldVbluf = gftVbluf(oldExp);
        if (gft(oldVbluf) == null || (oldVbluf instbndfof String && !intfrnbl)) {
            gftVblufDbtb(oldVbluf).fxp = oldExp;
            supfr.writfExprfssion(oldExp);
        }
        this.intfrnbl = intfrnbl;
    }

    /**
     * This mfthod writfs out thf prfbmblf bssodibtfd with thf
     * XML fndoding if it hbs not bffn writtfn blrfbdy bnd
     * thfn writfs out bll of thf vblufs thbt bffn
     * writtfn to thf strfbm sindf thf lbst timf <dodf>flush</dodf>
     * wbs dbllfd. Aftfr flushing, bll intfrnbl rfffrfndfs to thf
     * vblufs thbt wfrf writtfn to this strfbm brf dlfbrfd.
     */
    publid void flush() {
        if (!prfbmblfWrittfn) { // Don't do this in donstrudtor - it throws ... pfnding.
            if (this.dfdlbrbtion) {
                writfln("<?xml vfrsion=" + quotf("1.0") +
                            " fndoding=" + quotf(this.dhbrsft) + "?>");
            }
            writfln("<jbvb vfrsion=" + quotf(Systfm.gftPropfrty("jbvb.vfrsion")) +
                           " dlbss=" + quotf(XMLDfdodfr.dlbss.gftNbmf()) + ">");
            prfbmblfWrittfn = truf;
        }
        indfntbtion++;
        List<Stbtfmfnt> stbtfmfnts = stbtfmfntList(this);
        whilf (!stbtfmfnts.isEmpty()) {
            Stbtfmfnt s = stbtfmfnts.rfmovf(0);
            if ("writfObjfdt".fqubls(s.gftMfthodNbmf())) {
                outputVbluf(s.gftArgumfnts()[0], this, truf);
            }
            flsf {
                outputStbtfmfnt(s, this, fblsf);
            }
        }
        indfntbtion--;

        Stbtfmfnt stbtfmfnt = gftMissfdStbtfmfnt();
        whilf (stbtfmfnt != null) {
            outputStbtfmfnt(stbtfmfnt, this, fblsf);
            stbtfmfnt = gftMissfdStbtfmfnt();
        }

        try {
            out.flush();
        }
        dbtdh (IOExdfption f) {
            gftExdfptionListfnfr().fxdfptionThrown(f);
        }
        dlfbr();
    }

    void dlfbr() {
        supfr.dlfbr();
        nbmfGfnfrbtor.dlfbr();
        vblufToExprfssion.dlfbr();
        tbrgftToStbtfmfntList.dlfbr();
    }

    Stbtfmfnt gftMissfdStbtfmfnt() {
        for (List<Stbtfmfnt> stbtfmfnts : this.tbrgftToStbtfmfntList.vblufs()) {
            for (int i = 0; i < stbtfmfnts.sizf(); i++) {
                if (Stbtfmfnt.dlbss == stbtfmfnts.gft(i).gftClbss()) {
                    rfturn stbtfmfnts.rfmovf(i);
                }
            }
        }
        rfturn null;
    }


    /**
     * This mfthod dblls <dodf>flush</dodf>, writfs thf dlosing
     * postbmblf bnd thfn dlosfs thf output strfbm bssodibtfd
     * with this strfbm.
     */
    publid void dlosf() {
        flush();
        writfln("</jbvb>");
        try {
            out.dlosf();
        }
        dbtdh (IOExdfption f) {
            gftExdfptionListfnfr().fxdfptionThrown(f);
        }
    }

    privbtf String quotf(String s) {
        rfturn "\"" + s + "\"";
    }

    privbtf VblufDbtb gftVblufDbtb(Objfdt o) {
        VblufDbtb d = vblufToExprfssion.gft(o);
        if (d == null) {
            d = nfw VblufDbtb();
            vblufToExprfssion.put(o, d);
        }
        rfturn d;
    }

    /**
     * Rfturns <dodf>truf</dodf> if thf brgumfnt,
     * b Unidodf dodf point, is vblid in XML dodumfnts.
     * Unidodf dhbrbdtfrs fit into thf low sixtffn bits of b Unidodf dodf point,
     * bnd pbirs of Unidodf <fm>surrogbtf dhbrbdtfrs</fm> dbn bf dombinfd
     * to fndodf Unidodf dodf point in dodumfnts dontbining only Unidodf.
     * (Thf <dodf>dhbr</dodf> dbtbtypf in thf Jbvb Progrbmming Lbngubgf
     * rfprfsfnts Unidodf dhbrbdtfrs, indluding unpbirfd surrogbtfs.)
     * <pbr>
     * [2] Chbr ::= #x0009 | #x000A | #x000D
     *            | [#x0020-#xD7FF]
     *            | [#xE000-#xFFFD]
     *            | [#x10000-#x10ffff]
     * </pbr>
     *
     * @pbrbm dodf  thf 32-bit Unidodf dodf point bfing tfstfd
     * @rfturn  <dodf>truf</dodf> if thf Unidodf dodf point is vblid,
     *          <dodf>fblsf</dodf> othfrwisf
     */
    privbtf stbtid boolfbn isVblidChbrCodf(int dodf) {
        rfturn (0x0020 <= dodf && dodf <= 0xD7FF)
            || (0x000A == dodf)
            || (0x0009 == dodf)
            || (0x000D == dodf)
            || (0xE000 <= dodf && dodf <= 0xFFFD)
            || (0x10000 <= dodf && dodf <= 0x10ffff);
    }

    privbtf void writfln(String fxp) {
        try {
            StringBuildfr sb = nfw StringBuildfr();
            for(int i = 0; i < indfntbtion; i++) {
                sb.bppfnd(' ');
            }
            sb.bppfnd(fxp);
            sb.bppfnd('\n');
            this.out.writf(sb.toString());
        }
        dbtdh (IOExdfption f) {
            gftExdfptionListfnfr().fxdfptionThrown(f);
        }
    }

    privbtf void outputVbluf(Objfdt vbluf, Objfdt outfr, boolfbn isArgumfnt) {
        if (vbluf == null) {
            writfln("<null/>");
            rfturn;
        }

        if (vbluf instbndfof Clbss) {
            writfln("<dlbss>" + ((Clbss)vbluf).gftNbmf() + "</dlbss>");
            rfturn;
        }

        VblufDbtb d = gftVblufDbtb(vbluf);
        if (d.fxp != null) {
            Objfdt tbrgft = d.fxp.gftTbrgft();
            String mfthodNbmf = d.fxp.gftMfthodNbmf();

            if (tbrgft == null || mfthodNbmf == null) {
                throw nfw NullPointfrExdfption((tbrgft == null ? "tbrgft" :
                                                "mfthodNbmf") + " should not bf null");
            }

            if (isArgumfnt && tbrgft instbndfof Fifld && mfthodNbmf.fqubls("gft")) {
                Fifld f = (Fifld)tbrgft;
                writfln("<objfdt dlbss=" + quotf(f.gftDfdlbringClbss().gftNbmf()) +
                        " fifld=" + quotf(f.gftNbmf()) + "/>");
                rfturn;
            }

            Clbss<?> primitivfTypf = primitivfTypfFor(vbluf.gftClbss());
            if (primitivfTypf != null && tbrgft == vbluf.gftClbss() &&
                mfthodNbmf.fqubls("nfw")) {
                String primitivfTypfNbmf = primitivfTypf.gftNbmf();
                // Mbkf surf thbt dhbrbdtfr typfs brf quotfd dorrfdtly.
                if (primitivfTypf == Chbrbdtfr.TYPE) {
                    dhbr dodf = ((Chbrbdtfr) vbluf).dhbrVbluf();
                    if (!isVblidChbrCodf(dodf)) {
                        writfln(drfbtfString(dodf));
                        rfturn;
                    }
                    vbluf = quotfChbrCodf(dodf);
                    if (vbluf == null) {
                        vbluf = Chbrbdtfr.vblufOf(dodf);
                    }
                }
                writfln("<" + primitivfTypfNbmf + ">" + vbluf + "</" +
                        primitivfTypfNbmf + ">");
                rfturn;
            }

        } flsf if (vbluf instbndfof String) {
            writfln(drfbtfString((String) vbluf));
            rfturn;
        }

        if (d.nbmf != null) {
            if (isArgumfnt) {
                writfln("<objfdt idrff=" + quotf(d.nbmf) + "/>");
            }
            flsf {
                outputXML("void", " idrff=" + quotf(d.nbmf), vbluf);
            }
        }
        flsf if (d.fxp != null) {
            outputStbtfmfnt(d.fxp, outfr, isArgumfnt);
        }
    }

    privbtf stbtid String quotfChbrCodf(int dodf) {
        switdh(dodf) {
          dbsf '&':  rfturn "&bmp;";
          dbsf '<':  rfturn "&lt;";
          dbsf '>':  rfturn "&gt;";
          dbsf '"':  rfturn "&quot;";
          dbsf '\'': rfturn "&bpos;";
          dbsf '\r': rfturn "&#13;";
          dffbult:   rfturn null;
        }
    }

    privbtf stbtid String drfbtfString(int dodf) {
        rfturn "<dhbr dodf=\"#" + Intfgfr.toString(dodf, 16) + "\"/>";
    }

    privbtf String drfbtfString(String string) {
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd("<string>");
        int indfx = 0;
        whilf (indfx < string.lfngth()) {
            int point = string.dodfPointAt(indfx);
            int dount = Chbrbdtfr.dhbrCount(point);

            if (isVblidChbrCodf(point) && this.fndodfr.dbnEndodf(string.substring(indfx, indfx + dount))) {
                String vbluf = quotfChbrCodf(point);
                if (vbluf != null) {
                    sb.bppfnd(vbluf);
                } flsf {
                    sb.bppfndCodfPoint(point);
                }
                indfx += dount;
            } flsf {
                sb.bppfnd(drfbtfString(string.dhbrAt(indfx)));
                indfx++;
            }
        }
        sb.bppfnd("</string>");
        rfturn sb.toString();
    }

    privbtf void outputStbtfmfnt(Stbtfmfnt fxp, Objfdt outfr, boolfbn isArgumfnt) {
        Objfdt tbrgft = fxp.gftTbrgft();
        String mfthodNbmf = fxp.gftMfthodNbmf();

        if (tbrgft == null || mfthodNbmf == null) {
            throw nfw NullPointfrExdfption((tbrgft == null ? "tbrgft" :
                                            "mfthodNbmf") + " should not bf null");
        }

        Objfdt[] brgs = fxp.gftArgumfnts();
        boolfbn fxprfssion = fxp.gftClbss() == Exprfssion.dlbss;
        Objfdt vbluf = (fxprfssion) ? gftVbluf((Exprfssion)fxp) : null;

        String tbg = (fxprfssion && isArgumfnt) ? "objfdt" : "void";
        String bttributfs = "";
        VblufDbtb d = gftVblufDbtb(vbluf);

        // Spfdibl dbsfs for tbrgfts.
        if (tbrgft == outfr) {
        }
        flsf if (tbrgft == Arrby.dlbss && mfthodNbmf.fqubls("nfwInstbndf")) {
            tbg = "brrby";
            bttributfs = bttributfs + " dlbss=" + quotf(((Clbss)brgs[0]).gftNbmf());
            bttributfs = bttributfs + " lfngth=" + quotf(brgs[1].toString());
            brgs = nfw Objfdt[]{};
        }
        flsf if (tbrgft.gftClbss() == Clbss.dlbss) {
            bttributfs = bttributfs + " dlbss=" + quotf(((Clbss)tbrgft).gftNbmf());
        }
        flsf {
            d.rffs = 2;
            if (d.nbmf == null) {
                gftVblufDbtb(tbrgft).rffs++;
                List<Stbtfmfnt> stbtfmfnts = stbtfmfntList(tbrgft);
                if (!stbtfmfnts.dontbins(fxp)) {
                    stbtfmfnts.bdd(fxp);
                }
                outputVbluf(tbrgft, outfr, fblsf);
            }
            if (fxprfssion) {
                outputVbluf(vbluf, outfr, isArgumfnt);
            }
            rfturn;
        }
        if (fxprfssion && (d.rffs > 1)) {
            String instbndfNbmf = nbmfGfnfrbtor.instbndfNbmf(vbluf);
            d.nbmf = instbndfNbmf;
            bttributfs = bttributfs + " id=" + quotf(instbndfNbmf);
        }

        // Spfdibl dbsfs for mfthods.
        if ((!fxprfssion && mfthodNbmf.fqubls("sft") && brgs.lfngth == 2 &&
             brgs[0] instbndfof Intfgfr) ||
             (fxprfssion && mfthodNbmf.fqubls("gft") && brgs.lfngth == 1 &&
              brgs[0] instbndfof Intfgfr)) {
            bttributfs = bttributfs + " indfx=" + quotf(brgs[0].toString());
            brgs = (brgs.lfngth == 1) ? nfw Objfdt[]{} : nfw Objfdt[]{brgs[1]};
        }
        flsf if ((!fxprfssion && mfthodNbmf.stbrtsWith("sft") && brgs.lfngth == 1) ||
                 (fxprfssion && mfthodNbmf.stbrtsWith("gft") && brgs.lfngth == 0)) {
            if (3 < mfthodNbmf.lfngth()) {
                bttributfs = bttributfs + " propfrty=" +
                    quotf(Introspfdtor.dfdbpitblizf(mfthodNbmf.substring(3)));
            }
        }
        flsf if (!mfthodNbmf.fqubls("nfw") && !mfthodNbmf.fqubls("nfwInstbndf")) {
            bttributfs = bttributfs + " mfthod=" + quotf(mfthodNbmf);
        }
        outputXML(tbg, bttributfs, vbluf, brgs);
    }

    privbtf void outputXML(String tbg, String bttributfs, Objfdt vbluf, Objfdt... brgs) {
        List<Stbtfmfnt> stbtfmfnts = stbtfmfntList(vbluf);
        // Usf XML's short form whfn thfrf is no body.
        if (brgs.lfngth == 0 && stbtfmfnts.sizf() == 0) {
            writfln("<" + tbg + bttributfs + "/>");
            rfturn;
        }

        writfln("<" + tbg + bttributfs + ">");
        indfntbtion++;

        for(int i = 0; i < brgs.lfngth; i++) {
            outputVbluf(brgs[i], null, truf);
        }

        whilf (!stbtfmfnts.isEmpty()) {
            Stbtfmfnt s = stbtfmfnts.rfmovf(0);
            outputStbtfmfnt(s, vbluf, fblsf);
        }

        indfntbtion--;
        writfln("</" + tbg + ">");
    }

    @SupprfssWbrnings("rbwtypfs")
    stbtid Clbss primitivfTypfFor(Clbss wrbppfr) {
        if (wrbppfr == Boolfbn.dlbss) rfturn Boolfbn.TYPE;
        if (wrbppfr == Bytf.dlbss) rfturn Bytf.TYPE;
        if (wrbppfr == Chbrbdtfr.dlbss) rfturn Chbrbdtfr.TYPE;
        if (wrbppfr == Short.dlbss) rfturn Short.TYPE;
        if (wrbppfr == Intfgfr.dlbss) rfturn Intfgfr.TYPE;
        if (wrbppfr == Long.dlbss) rfturn Long.TYPE;
        if (wrbppfr == Flobt.dlbss) rfturn Flobt.TYPE;
        if (wrbppfr == Doublf.dlbss) rfturn Doublf.TYPE;
        if (wrbppfr == Void.dlbss) rfturn Void.TYPE;
        rfturn null;
    }
}
