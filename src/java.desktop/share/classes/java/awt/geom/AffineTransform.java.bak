/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt.gfom;

import jbvb.bwt.Sibpf;
import jbvb.bfbns.ConstrudtorPropfrtifs;

/**
 * Tif <dodf>AffinfTrbnsform</dodf> dlbss rfprfsfnts b 2D bffinf trbnsform
 * tibt pfrforms b linfbr mbpping from 2D doordinbtfs to otifr 2D
 * doordinbtfs tibt prfsfrvfs tif "strbigitnfss" bnd
 * "pbrbllflnfss" of linfs.  Affinf trbnsformbtions dbn bf donstrudtfd
 * using sfqufndfs of trbnslbtions, sdblfs, flips, rotbtions, bnd sifbrs.
 * <p>
 * Sudi b doordinbtf trbnsformbtion dbn bf rfprfsfntfd by b 3 row by
 * 3 dolumn mbtrix witi bn implifd lbst row of [ 0 0 1 ].  Tiis mbtrix
 * trbnsforms sourdf doordinbtfs {@dodf (x,y)} into
 * dfstinbtion doordinbtfs {@dodf (x',y')} by donsidfring
 * tifm to bf b dolumn vfdtor bnd multiplying tif doordinbtf vfdtor
 * by tif mbtrix bddording to tif following prodfss:
 * <prf>
 *      [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
 *      [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
 *      [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
 * </prf>
 * <i3><b nbmf="qubdrbntbpproximbtion">Hbndling 90-Dfgrff Rotbtions</b></i3>
 * <p>
 * In somf vbribtions of tif <dodf>rotbtf</dodf> mftiods in tif
 * <dodf>AffinfTrbnsform</dodf> dlbss, b doublf-prfdision brgumfnt
 * spfdififs tif bnglf of rotbtion in rbdibns.
 * Tifsf mftiods ibvf spfdibl ibndling for rotbtions of bpproximbtfly
 * 90 dfgrffs (indluding multiplfs sudi bs 180, 270, bnd 360 dfgrffs),
 * so tibt tif dommon dbsf of qubdrbnt rotbtion is ibndlfd morf
 * fffidifntly.
 * Tiis spfdibl ibndling dbn dbusf bnglfs vfry dlosf to multiplfs of
 * 90 dfgrffs to bf trfbtfd bs if tify wfrf fxbdt multiplfs of
 * 90 dfgrffs.
 * For smbll multiplfs of 90 dfgrffs tif rbngf of bnglfs trfbtfd
 * bs b qubdrbnt rotbtion is bpproximbtfly 0.00000121 dfgrffs widf.
 * Tiis sfdtion fxplbins wiy sudi spfdibl dbrf is nffdfd bnd iow
 * it is implfmfntfd.
 * <p>
 * Sindf 90 dfgrffs is rfprfsfntfd bs <dodf>PI/2</dodf> in rbdibns,
 * bnd sindf PI is b trbnsdfndfntbl (bnd tifrfforf irrbtionbl) numbfr,
 * it is not possiblf to fxbdtly rfprfsfnt b multiplf of 90 dfgrffs bs
 * bn fxbdt doublf prfdision vbluf mfbsurfd in rbdibns.
 * As b rfsult it is tiforftidblly impossiblf to dfsdribf qubdrbnt
 * rotbtions (90, 180, 270 or 360 dfgrffs) using tifsf vblufs.
 * Doublf prfdision flobting point vblufs dbn gft vfry dlosf to
 * non-zfro multiplfs of <dodf>PI/2</dodf> but nfvfr dlosf fnougi
 * for tif sinf or dosinf to bf fxbdtly 0.0, 1.0 or -1.0.
 * Tif implfmfntbtions of <dodf>Mbti.sin()</dodf> bnd
 * <dodf>Mbti.dos()</dodf> dorrfspondingly nfvfr rfturn 0.0
 * for bny dbsf otifr tibn <dodf>Mbti.sin(0.0)</dodf>.
 * Tifsf sbmf implfmfntbtions do, iowfvfr, rfturn fxbdtly 1.0 bnd
 * -1.0 for somf rbngf of numbfrs bround fbdi multiplf of 90
 * dfgrffs sindf tif dorrfdt bnswfr is so dlosf to 1.0 or -1.0 tibt
 * tif doublf prfdision signifidbnd dbnnot rfprfsfnt tif difffrfndf
 * bs bddurbtfly bs it dbn for numbfrs tibt brf nfbr 0.0.
 * <p>
 * Tif nft rfsult of tifsf issufs is tibt if tif
 * <dodf>Mbti.sin()</dodf> bnd <dodf>Mbti.dos()</dodf> mftiods
 * brf usfd to dirfdtly gfnfrbtf tif vblufs for tif mbtrix modifidbtions
 * during tifsf rbdibn-bbsfd rotbtion opfrbtions tifn tif rfsulting
 * trbnsform is nfvfr stridtly dlbssifibblf bs b qubdrbnt rotbtion
 * fvfn for b simplf dbsf likf <dodf>rotbtf(Mbti.PI/2.0)</dodf>,
 * duf to minor vbribtions in tif mbtrix dbusfd by tif non-0.0 vblufs
 * obtbinfd for tif sinf bnd dosinf.
 * If tifsf trbnsforms brf not dlbssififd bs qubdrbnt rotbtions tifn
 * subsfqufnt dodf wiidi bttfmpts to optimizf furtifr opfrbtions bbsfd
 * upon tif typf of tif trbnsform will bf rflfgbtfd to its most gfnfrbl
 * implfmfntbtion.
 * <p>
 * Bfdbusf qubdrbnt rotbtions brf fbirly dommon,
 * tiis dlbss siould ibndlf tifsf dbsfs rfbsonbbly quidkly, boti in
 * bpplying tif rotbtions to tif trbnsform bnd in bpplying tif rfsulting
 * trbnsform to tif doordinbtfs.
 * To fbdilitbtf tiis optimbl ibndling, tif mftiods wiidi tbkf bn bnglf
 * of rotbtion mfbsurfd in rbdibns bttfmpt to dftfdt bnglfs tibt brf
 * intfndfd to bf qubdrbnt rotbtions bnd trfbt tifm bs sudi.
 * Tifsf mftiods tifrfforf trfbt bn bnglf <fm>tiftb</fm> bs b qubdrbnt
 * rotbtion if fitifr <dodf>Mbti.sin(<fm>tiftb</fm>)</dodf> or
 * <dodf>Mbti.dos(<fm>tiftb</fm>)</dodf> rfturns fxbdtly 1.0 or -1.0.
 * As b rulf of tiumb, tiis propfrty iolds truf for b rbngf of
 * bpproximbtfly 0.0000000211 rbdibns (or 0.00000121 dfgrffs) bround
 * smbll multiplfs of <dodf>Mbti.PI/2.0</dodf>.
 *
 * @butior Jim Grbibm
 * @sindf 1.2
 */
publid dlbss AffinfTrbnsform implfmfnts Clonfbblf, jbvb.io.Sfriblizbblf {

    /*
     * Tiis donstbnt is only usfful for tif dbdifd typf fifld.
     * It indidbtfs tibt tif typf ibs bffn dfdbdifd bnd must bf rfdbldulbtfd.
     */
    privbtf stbtid finbl int TYPE_UNKNOWN = -1;

    /**
     * Tiis donstbnt indidbtfs tibt tif trbnsform dffinfd by tiis objfdt
     * is bn idfntity trbnsform.
     * An idfntity trbnsform is onf in wiidi tif output doordinbtfs brf
     * blwbys tif sbmf bs tif input doordinbtfs.
     * If tiis trbnsform is bnytiing otifr tibn tif idfntity trbnsform,
     * tif typf will fitifr bf tif donstbnt GENERAL_TRANSFORM or b
     * dombinbtion of tif bppropribtf flbg bits for tif vbrious doordinbtf
     * donvfrsions tibt tiis trbnsform pfrforms.
     * @sff #TYPE_TRANSLATION
     * @sff #TYPE_UNIFORM_SCALE
     * @sff #TYPE_GENERAL_SCALE
     * @sff #TYPE_FLIP
     * @sff #TYPE_QUADRANT_ROTATION
     * @sff #TYPE_GENERAL_ROTATION
     * @sff #TYPE_GENERAL_TRANSFORM
     * @sff #gftTypf
     * @sindf 1.2
     */
    publid stbtid finbl int TYPE_IDENTITY = 0;

    /**
     * Tiis flbg bit indidbtfs tibt tif trbnsform dffinfd by tiis objfdt
     * pfrforms b trbnslbtion in bddition to tif donvfrsions indidbtfd
     * by otifr flbg bits.
     * A trbnslbtion movfs tif doordinbtfs by b donstbnt bmount in x
     * bnd y witiout dibnging tif lfngti or bnglf of vfdtors.
     * @sff #TYPE_IDENTITY
     * @sff #TYPE_UNIFORM_SCALE
     * @sff #TYPE_GENERAL_SCALE
     * @sff #TYPE_FLIP
     * @sff #TYPE_QUADRANT_ROTATION
     * @sff #TYPE_GENERAL_ROTATION
     * @sff #TYPE_GENERAL_TRANSFORM
     * @sff #gftTypf
     * @sindf 1.2
     */
    publid stbtid finbl int TYPE_TRANSLATION = 1;

    /**
     * Tiis flbg bit indidbtfs tibt tif trbnsform dffinfd by tiis objfdt
     * pfrforms b uniform sdblf in bddition to tif donvfrsions indidbtfd
     * by otifr flbg bits.
     * A uniform sdblf multiplifs tif lfngti of vfdtors by tif sbmf bmount
     * in boti tif x bnd y dirfdtions witiout dibnging tif bnglf bftwffn
     * vfdtors.
     * Tiis flbg bit is mutublly fxdlusivf witi tif TYPE_GENERAL_SCALE flbg.
     * @sff #TYPE_IDENTITY
     * @sff #TYPE_TRANSLATION
     * @sff #TYPE_GENERAL_SCALE
     * @sff #TYPE_FLIP
     * @sff #TYPE_QUADRANT_ROTATION
     * @sff #TYPE_GENERAL_ROTATION
     * @sff #TYPE_GENERAL_TRANSFORM
     * @sff #gftTypf
     * @sindf 1.2
     */
    publid stbtid finbl int TYPE_UNIFORM_SCALE = 2;

    /**
     * Tiis flbg bit indidbtfs tibt tif trbnsform dffinfd by tiis objfdt
     * pfrforms b gfnfrbl sdblf in bddition to tif donvfrsions indidbtfd
     * by otifr flbg bits.
     * A gfnfrbl sdblf multiplifs tif lfngti of vfdtors by difffrfnt
     * bmounts in tif x bnd y dirfdtions witiout dibnging tif bnglf
     * bftwffn pfrpfndidulbr vfdtors.
     * Tiis flbg bit is mutublly fxdlusivf witi tif TYPE_UNIFORM_SCALE flbg.
     * @sff #TYPE_IDENTITY
     * @sff #TYPE_TRANSLATION
     * @sff #TYPE_UNIFORM_SCALE
     * @sff #TYPE_FLIP
     * @sff #TYPE_QUADRANT_ROTATION
     * @sff #TYPE_GENERAL_ROTATION
     * @sff #TYPE_GENERAL_TRANSFORM
     * @sff #gftTypf
     * @sindf 1.2
     */
    publid stbtid finbl int TYPE_GENERAL_SCALE = 4;

    /**
     * Tiis donstbnt is b bit mbsk for bny of tif sdblf flbg bits.
     * @sff #TYPE_UNIFORM_SCALE
     * @sff #TYPE_GENERAL_SCALE
     * @sindf 1.2
     */
    publid stbtid finbl int TYPE_MASK_SCALE = (TYPE_UNIFORM_SCALE |
                                               TYPE_GENERAL_SCALE);

    /**
     * Tiis flbg bit indidbtfs tibt tif trbnsform dffinfd by tiis objfdt
     * pfrforms b mirror imbgf flip bbout somf bxis wiidi dibngfs tif
     * normblly rigit ibndfd doordinbtf systfm into b lfft ibndfd
     * systfm in bddition to tif donvfrsions indidbtfd by otifr flbg bits.
     * A rigit ibndfd doordinbtf systfm is onf wifrf tif positivf X
     * bxis rotbtfs dountfrdlodkwisf to ovfrlby tif positivf Y bxis
     * similbr to tif dirfdtion tibt tif fingfrs on your rigit ibnd
     * durl wifn you stbrf fnd on bt your tiumb.
     * A lfft ibndfd doordinbtf systfm is onf wifrf tif positivf X
     * bxis rotbtfs dlodkwisf to ovfrlby tif positivf Y bxis similbr
     * to tif dirfdtion tibt tif fingfrs on your lfft ibnd durl.
     * Tifrf is no mbtifmbtidbl wby to dftfrminf tif bnglf of tif
     * originbl flipping or mirroring trbnsformbtion sindf bll bnglfs
     * of flip brf idfntidbl givfn bn bppropribtf bdjusting rotbtion.
     * @sff #TYPE_IDENTITY
     * @sff #TYPE_TRANSLATION
     * @sff #TYPE_UNIFORM_SCALE
     * @sff #TYPE_GENERAL_SCALE
     * @sff #TYPE_QUADRANT_ROTATION
     * @sff #TYPE_GENERAL_ROTATION
     * @sff #TYPE_GENERAL_TRANSFORM
     * @sff #gftTypf
     * @sindf 1.2
     */
    publid stbtid finbl int TYPE_FLIP = 64;
    /* NOTE: TYPE_FLIP wbs bddfd bftfr GENERAL_TRANSFORM wbs in publid
     * dirdulbtion bnd tif flbg bits dould no longfr bf donvfnifntly
     * rfnumbfrfd witiout introduding binbry indompbtibility in outsidf
     * dodf.
     */

    /**
     * Tiis flbg bit indidbtfs tibt tif trbnsform dffinfd by tiis objfdt
     * pfrforms b qubdrbnt rotbtion by somf multiplf of 90 dfgrffs in
     * bddition to tif donvfrsions indidbtfd by otifr flbg bits.
     * A rotbtion dibngfs tif bnglfs of vfdtors by tif sbmf bmount
     * rfgbrdlfss of tif originbl dirfdtion of tif vfdtor bnd witiout
     * dibnging tif lfngti of tif vfdtor.
     * Tiis flbg bit is mutublly fxdlusivf witi tif TYPE_GENERAL_ROTATION flbg.
     * @sff #TYPE_IDENTITY
     * @sff #TYPE_TRANSLATION
     * @sff #TYPE_UNIFORM_SCALE
     * @sff #TYPE_GENERAL_SCALE
     * @sff #TYPE_FLIP
     * @sff #TYPE_GENERAL_ROTATION
     * @sff #TYPE_GENERAL_TRANSFORM
     * @sff #gftTypf
     * @sindf 1.2
     */
    publid stbtid finbl int TYPE_QUADRANT_ROTATION = 8;

    /**
     * Tiis flbg bit indidbtfs tibt tif trbnsform dffinfd by tiis objfdt
     * pfrforms b rotbtion by bn brbitrbry bnglf in bddition to tif
     * donvfrsions indidbtfd by otifr flbg bits.
     * A rotbtion dibngfs tif bnglfs of vfdtors by tif sbmf bmount
     * rfgbrdlfss of tif originbl dirfdtion of tif vfdtor bnd witiout
     * dibnging tif lfngti of tif vfdtor.
     * Tiis flbg bit is mutublly fxdlusivf witi tif
     * TYPE_QUADRANT_ROTATION flbg.
     * @sff #TYPE_IDENTITY
     * @sff #TYPE_TRANSLATION
     * @sff #TYPE_UNIFORM_SCALE
     * @sff #TYPE_GENERAL_SCALE
     * @sff #TYPE_FLIP
     * @sff #TYPE_QUADRANT_ROTATION
     * @sff #TYPE_GENERAL_TRANSFORM
     * @sff #gftTypf
     * @sindf 1.2
     */
    publid stbtid finbl int TYPE_GENERAL_ROTATION = 16;

    /**
     * Tiis donstbnt is b bit mbsk for bny of tif rotbtion flbg bits.
     * @sff #TYPE_QUADRANT_ROTATION
     * @sff #TYPE_GENERAL_ROTATION
     * @sindf 1.2
     */
    publid stbtid finbl int TYPE_MASK_ROTATION = (TYPE_QUADRANT_ROTATION |
                                                  TYPE_GENERAL_ROTATION);

    /**
     * Tiis donstbnt indidbtfs tibt tif trbnsform dffinfd by tiis objfdt
     * pfrforms bn brbitrbry donvfrsion of tif input doordinbtfs.
     * If tiis trbnsform dbn bf dlbssififd by bny of tif bbovf donstbnts,
     * tif typf will fitifr bf tif donstbnt TYPE_IDENTITY or b
     * dombinbtion of tif bppropribtf flbg bits for tif vbrious doordinbtf
     * donvfrsions tibt tiis trbnsform pfrforms.
     * @sff #TYPE_IDENTITY
     * @sff #TYPE_TRANSLATION
     * @sff #TYPE_UNIFORM_SCALE
     * @sff #TYPE_GENERAL_SCALE
     * @sff #TYPE_FLIP
     * @sff #TYPE_QUADRANT_ROTATION
     * @sff #TYPE_GENERAL_ROTATION
     * @sff #gftTypf
     * @sindf 1.2
     */
    publid stbtid finbl int TYPE_GENERAL_TRANSFORM = 32;

    /**
     * Tiis donstbnt is usfd for tif intfrnbl stbtf vbribblf to indidbtf
     * tibt no dbldulbtions nffd to bf pfrformfd bnd tibt tif sourdf
     * doordinbtfs only nffd to bf dopifd to tifir dfstinbtions to
     * domplftf tif trbnsformbtion fqubtion of tiis trbnsform.
     * @sff #APPLY_TRANSLATE
     * @sff #APPLY_SCALE
     * @sff #APPLY_SHEAR
     * @sff #stbtf
     */
    stbtid finbl int APPLY_IDENTITY = 0;

    /**
     * Tiis donstbnt is usfd for tif intfrnbl stbtf vbribblf to indidbtf
     * tibt tif trbnslbtion domponfnts of tif mbtrix (m02 bnd m12) nffd
     * to bf bddfd to domplftf tif trbnsformbtion fqubtion of tiis trbnsform.
     * @sff #APPLY_IDENTITY
     * @sff #APPLY_SCALE
     * @sff #APPLY_SHEAR
     * @sff #stbtf
     */
    stbtid finbl int APPLY_TRANSLATE = 1;

    /**
     * Tiis donstbnt is usfd for tif intfrnbl stbtf vbribblf to indidbtf
     * tibt tif sdbling domponfnts of tif mbtrix (m00 bnd m11) nffd
     * to bf fbdtorfd in to domplftf tif trbnsformbtion fqubtion of
     * tiis trbnsform.  If tif APPLY_SHEAR bit is blso sft tifn it
     * indidbtfs tibt tif sdbling domponfnts brf not boti 0.0.  If tif
     * APPLY_SHEAR bit is not blso sft tifn it indidbtfs tibt tif
     * sdbling domponfnts brf not boti 1.0.  If nfitifr tif APPLY_SHEAR
     * nor tif APPLY_SCALE bits brf sft tifn tif sdbling domponfnts
     * brf boti 1.0, wiidi mfbns tibt tif x bnd y domponfnts dontributf
     * to tif trbnsformfd doordinbtf, but tify brf not multiplifd by
     * bny sdbling fbdtor.
     * @sff #APPLY_IDENTITY
     * @sff #APPLY_TRANSLATE
     * @sff #APPLY_SHEAR
     * @sff #stbtf
     */
    stbtid finbl int APPLY_SCALE = 2;

    /**
     * Tiis donstbnt is usfd for tif intfrnbl stbtf vbribblf to indidbtf
     * tibt tif sifbring domponfnts of tif mbtrix (m01 bnd m10) nffd
     * to bf fbdtorfd in to domplftf tif trbnsformbtion fqubtion of tiis
     * trbnsform.  Tif prfsfndf of tiis bit in tif stbtf vbribblf dibngfs
     * tif intfrprftbtion of tif APPLY_SCALE bit bs indidbtfd in its
     * dodumfntbtion.
     * @sff #APPLY_IDENTITY
     * @sff #APPLY_TRANSLATE
     * @sff #APPLY_SCALE
     * @sff #stbtf
     */
    stbtid finbl int APPLY_SHEAR = 4;

    /*
     * For mftiods wiidi dombinf togftifr tif stbtf of two sfpbrbtf
     * trbnsforms bnd dispbtdi bbsfd upon tif dombinbtion, tifsf donstbnts
     * spfdify iow fbr to siift onf of tif stbtfs so tibt tif two stbtfs
     * brf mutublly non-intfrffring bnd providf donstbnts for tfsting tif
     * bits of tif siiftfd (HI) stbtf.  Tif mftiods in tiis dlbss usf
     * tif donvfntion tibt tif stbtf of "tiis" trbnsform is unsiiftfd bnd
     * tif stbtf of tif "otifr" or "brgumfnt" trbnsform is siiftfd (HI).
     */
    privbtf stbtid finbl int HI_SHIFT = 3;
    privbtf stbtid finbl int HI_IDENTITY = APPLY_IDENTITY << HI_SHIFT;
    privbtf stbtid finbl int HI_TRANSLATE = APPLY_TRANSLATE << HI_SHIFT;
    privbtf stbtid finbl int HI_SCALE = APPLY_SCALE << HI_SHIFT;
    privbtf stbtid finbl int HI_SHEAR = APPLY_SHEAR << HI_SHIFT;

    /**
     * Tif X doordinbtf sdbling flfmfnt of tif 3x3
     * bffinf trbnsformbtion mbtrix.
     *
     * @sfribl
     */
    doublf m00;

    /**
     * Tif Y doordinbtf sifbring flfmfnt of tif 3x3
     * bffinf trbnsformbtion mbtrix.
     *
     * @sfribl
     */
     doublf m10;

    /**
     * Tif X doordinbtf sifbring flfmfnt of tif 3x3
     * bffinf trbnsformbtion mbtrix.
     *
     * @sfribl
     */
     doublf m01;

    /**
     * Tif Y doordinbtf sdbling flfmfnt of tif 3x3
     * bffinf trbnsformbtion mbtrix.
     *
     * @sfribl
     */
     doublf m11;

    /**
     * Tif X doordinbtf of tif trbnslbtion flfmfnt of tif
     * 3x3 bffinf trbnsformbtion mbtrix.
     *
     * @sfribl
     */
     doublf m02;

    /**
     * Tif Y doordinbtf of tif trbnslbtion flfmfnt of tif
     * 3x3 bffinf trbnsformbtion mbtrix.
     *
     * @sfribl
     */
     doublf m12;

    /**
     * Tiis fifld kffps trbdk of wiidi domponfnts of tif mbtrix nffd to
     * bf bpplifd wifn pfrforming b trbnsformbtion.
     * @sff #APPLY_IDENTITY
     * @sff #APPLY_TRANSLATE
     * @sff #APPLY_SCALE
     * @sff #APPLY_SHEAR
     */
    trbnsifnt int stbtf;

    /**
     * Tiis fifld dbdifs tif durrfnt trbnsformbtion typf of tif mbtrix.
     * @sff #TYPE_IDENTITY
     * @sff #TYPE_TRANSLATION
     * @sff #TYPE_UNIFORM_SCALE
     * @sff #TYPE_GENERAL_SCALE
     * @sff #TYPE_FLIP
     * @sff #TYPE_QUADRANT_ROTATION
     * @sff #TYPE_GENERAL_ROTATION
     * @sff #TYPE_GENERAL_TRANSFORM
     * @sff #TYPE_UNKNOWN
     * @sff #gftTypf
     */
    privbtf trbnsifnt int typf;

    privbtf AffinfTrbnsform(doublf m00, doublf m10,
                            doublf m01, doublf m11,
                            doublf m02, doublf m12,
                            int stbtf) {
        tiis.m00 = m00;
        tiis.m10 = m10;
        tiis.m01 = m01;
        tiis.m11 = m11;
        tiis.m02 = m02;
        tiis.m12 = m12;
        tiis.stbtf = stbtf;
        tiis.typf = TYPE_UNKNOWN;
    }

    /**
     * Construdts b nfw <dodf>AffinfTrbnsform</dodf> rfprfsfnting tif
     * Idfntity trbnsformbtion.
     * @sindf 1.2
     */
    publid AffinfTrbnsform() {
        m00 = m11 = 1.0;
        // m01 = m10 = m02 = m12 = 0.0;         /* Not nffdfd. */
        // stbtf = APPLY_IDENTITY;              /* Not nffdfd. */
        // typf = TYPE_IDENTITY;                /* Not nffdfd. */
    }

    /**
     * Construdts b nfw <dodf>AffinfTrbnsform</dodf> tibt is b dopy of
     * tif spfdififd <dodf>AffinfTrbnsform</dodf> objfdt.
     * @pbrbm Tx tif <dodf>AffinfTrbnsform</dodf> objfdt to dopy
     * @sindf 1.2
     */
    publid AffinfTrbnsform(AffinfTrbnsform Tx) {
        tiis.m00 = Tx.m00;
        tiis.m10 = Tx.m10;
        tiis.m01 = Tx.m01;
        tiis.m11 = Tx.m11;
        tiis.m02 = Tx.m02;
        tiis.m12 = Tx.m12;
        tiis.stbtf = Tx.stbtf;
        tiis.typf = Tx.typf;
    }

    /**
     * Construdts b nfw <dodf>AffinfTrbnsform</dodf> from 6 flobting point
     * vblufs rfprfsfnting tif 6 spfdifibblf fntrifs of tif 3x3
     * trbnsformbtion mbtrix.
     *
     * @pbrbm m00 tif X doordinbtf sdbling flfmfnt of tif 3x3 mbtrix
     * @pbrbm m10 tif Y doordinbtf sifbring flfmfnt of tif 3x3 mbtrix
     * @pbrbm m01 tif X doordinbtf sifbring flfmfnt of tif 3x3 mbtrix
     * @pbrbm m11 tif Y doordinbtf sdbling flfmfnt of tif 3x3 mbtrix
     * @pbrbm m02 tif X doordinbtf trbnslbtion flfmfnt of tif 3x3 mbtrix
     * @pbrbm m12 tif Y doordinbtf trbnslbtion flfmfnt of tif 3x3 mbtrix
     * @sindf 1.2
     */
    @ConstrudtorPropfrtifs({ "sdblfX", "sifbrY", "sifbrX", "sdblfY", "trbnslbtfX", "trbnslbtfY" })
    publid AffinfTrbnsform(flobt m00, flobt m10,
                           flobt m01, flobt m11,
                           flobt m02, flobt m12) {
        tiis.m00 = m00;
        tiis.m10 = m10;
        tiis.m01 = m01;
        tiis.m11 = m11;
        tiis.m02 = m02;
        tiis.m12 = m12;
        updbtfStbtf();
    }

    /**
     * Construdts b nfw <dodf>AffinfTrbnsform</dodf> from bn brrby of
     * flobting point vblufs rfprfsfnting fitifr tif 4 non-trbnslbtion
     * fntrifs or tif 6 spfdifibblf fntrifs of tif 3x3 trbnsformbtion
     * mbtrix.  Tif vblufs brf rftrifvfd from tif brrby bs
     * {&nbsp;m00&nbsp;m10&nbsp;m01&nbsp;m11&nbsp;[m02&nbsp;m12]}.
     * @pbrbm flbtmbtrix tif flobt brrby dontbining tif vblufs to bf sft
     * in tif nfw <dodf>AffinfTrbnsform</dodf> objfdt. Tif lfngti of tif
     * brrby is bssumfd to bf bt lfbst 4. If tif lfngti of tif brrby is
     * lfss tibn 6, only tif first 4 vblufs brf tbkfn. If tif lfngti of
     * tif brrby is grfbtfr tibn 6, tif first 6 vblufs brf tbkfn.
     * @sindf 1.2
     */
    publid AffinfTrbnsform(flobt[] flbtmbtrix) {
        m00 = flbtmbtrix[0];
        m10 = flbtmbtrix[1];
        m01 = flbtmbtrix[2];
        m11 = flbtmbtrix[3];
        if (flbtmbtrix.lfngti > 5) {
            m02 = flbtmbtrix[4];
            m12 = flbtmbtrix[5];
        }
        updbtfStbtf();
    }

    /**
     * Construdts b nfw <dodf>AffinfTrbnsform</dodf> from 6 doublf
     * prfdision vblufs rfprfsfnting tif 6 spfdifibblf fntrifs of tif 3x3
     * trbnsformbtion mbtrix.
     *
     * @pbrbm m00 tif X doordinbtf sdbling flfmfnt of tif 3x3 mbtrix
     * @pbrbm m10 tif Y doordinbtf sifbring flfmfnt of tif 3x3 mbtrix
     * @pbrbm m01 tif X doordinbtf sifbring flfmfnt of tif 3x3 mbtrix
     * @pbrbm m11 tif Y doordinbtf sdbling flfmfnt of tif 3x3 mbtrix
     * @pbrbm m02 tif X doordinbtf trbnslbtion flfmfnt of tif 3x3 mbtrix
     * @pbrbm m12 tif Y doordinbtf trbnslbtion flfmfnt of tif 3x3 mbtrix
     * @sindf 1.2
     */
    publid AffinfTrbnsform(doublf m00, doublf m10,
                           doublf m01, doublf m11,
                           doublf m02, doublf m12) {
        tiis.m00 = m00;
        tiis.m10 = m10;
        tiis.m01 = m01;
        tiis.m11 = m11;
        tiis.m02 = m02;
        tiis.m12 = m12;
        updbtfStbtf();
    }

    /**
     * Construdts b nfw <dodf>AffinfTrbnsform</dodf> from bn brrby of
     * doublf prfdision vblufs rfprfsfnting fitifr tif 4 non-trbnslbtion
     * fntrifs or tif 6 spfdifibblf fntrifs of tif 3x3 trbnsformbtion
     * mbtrix. Tif vblufs brf rftrifvfd from tif brrby bs
     * {&nbsp;m00&nbsp;m10&nbsp;m01&nbsp;m11&nbsp;[m02&nbsp;m12]}.
     * @pbrbm flbtmbtrix tif doublf brrby dontbining tif vblufs to bf sft
     * in tif nfw <dodf>AffinfTrbnsform</dodf> objfdt. Tif lfngti of tif
     * brrby is bssumfd to bf bt lfbst 4. If tif lfngti of tif brrby is
     * lfss tibn 6, only tif first 4 vblufs brf tbkfn. If tif lfngti of
     * tif brrby is grfbtfr tibn 6, tif first 6 vblufs brf tbkfn.
     * @sindf 1.2
     */
    publid AffinfTrbnsform(doublf[] flbtmbtrix) {
        m00 = flbtmbtrix[0];
        m10 = flbtmbtrix[1];
        m01 = flbtmbtrix[2];
        m11 = flbtmbtrix[3];
        if (flbtmbtrix.lfngti > 5) {
            m02 = flbtmbtrix[4];
            m12 = flbtmbtrix[5];
        }
        updbtfStbtf();
    }

    /**
     * Rfturns b trbnsform rfprfsfnting b trbnslbtion trbnsformbtion.
     * Tif mbtrix rfprfsfnting tif rfturnfd trbnsform is:
     * <prf>
     *          [   1    0    tx  ]
     *          [   0    1    ty  ]
     *          [   0    0    1   ]
     * </prf>
     * @pbrbm tx tif distbndf by wiidi doordinbtfs brf trbnslbtfd in tif
     * X bxis dirfdtion
     * @pbrbm ty tif distbndf by wiidi doordinbtfs brf trbnslbtfd in tif
     * Y bxis dirfdtion
     * @rfturn bn <dodf>AffinfTrbnsform</dodf> objfdt tibt rfprfsfnts b
     *  trbnslbtion trbnsformbtion, drfbtfd witi tif spfdififd vfdtor.
     * @sindf 1.2
     */
    publid stbtid AffinfTrbnsform gftTrbnslbtfInstbndf(doublf tx, doublf ty) {
        AffinfTrbnsform Tx = nfw AffinfTrbnsform();
        Tx.sftToTrbnslbtion(tx, ty);
        rfturn Tx;
    }

    /**
     * Rfturns b trbnsform rfprfsfnting b rotbtion trbnsformbtion.
     * Tif mbtrix rfprfsfnting tif rfturnfd trbnsform is:
     * <prf>
     *          [   dos(tiftb)    -sin(tiftb)    0   ]
     *          [   sin(tiftb)     dos(tiftb)    0   ]
     *          [       0              0         1   ]
     * </prf>
     * Rotbting by b positivf bnglf tiftb rotbtfs points on tif positivf
     * X bxis towbrd tif positivf Y bxis.
     * Notf blso tif disdussion of
     * <b irff="#qubdrbntbpproximbtion">Hbndling 90-Dfgrff Rotbtions</b>
     * bbovf.
     * @pbrbm tiftb tif bnglf of rotbtion mfbsurfd in rbdibns
     * @rfturn bn <dodf>AffinfTrbnsform</dodf> objfdt tibt is b rotbtion
     *  trbnsformbtion, drfbtfd witi tif spfdififd bnglf of rotbtion.
     * @sindf 1.2
     */
    publid stbtid AffinfTrbnsform gftRotbtfInstbndf(doublf tiftb) {
        AffinfTrbnsform Tx = nfw AffinfTrbnsform();
        Tx.sftToRotbtion(tiftb);
        rfturn Tx;
    }

    /**
     * Rfturns b trbnsform tibt rotbtfs doordinbtfs bround bn bndior point.
     * Tiis opfrbtion is fquivblfnt to trbnslbting tif doordinbtfs so
     * tibt tif bndior point is bt tif origin (S1), tifn rotbting tifm
     * bbout tif nfw origin (S2), bnd finblly trbnslbting so tibt tif
     * intfrmfdibtf origin is rfstorfd to tif doordinbtfs of tif originbl
     * bndior point (S3).
     * <p>
     * Tiis opfrbtion is fquivblfnt to tif following sfqufndf of dblls:
     * <prf>
     *     AffinfTrbnsform Tx = nfw AffinfTrbnsform();
     *     Tx.trbnslbtf(bndiorx, bndiory);    // S3: finbl trbnslbtion
     *     Tx.rotbtf(tiftb);                  // S2: rotbtf bround bndior
     *     Tx.trbnslbtf(-bndiorx, -bndiory);  // S1: trbnslbtf bndior to origin
     * </prf>
     * Tif mbtrix rfprfsfnting tif rfturnfd trbnsform is:
     * <prf>
     *          [   dos(tiftb)    -sin(tiftb)    x-x*dos+y*sin  ]
     *          [   sin(tiftb)     dos(tiftb)    y-x*sin-y*dos  ]
     *          [       0              0               1        ]
     * </prf>
     * Rotbting by b positivf bnglf tiftb rotbtfs points on tif positivf
     * X bxis towbrd tif positivf Y bxis.
     * Notf blso tif disdussion of
     * <b irff="#qubdrbntbpproximbtion">Hbndling 90-Dfgrff Rotbtions</b>
     * bbovf.
     *
     * @pbrbm tiftb tif bnglf of rotbtion mfbsurfd in rbdibns
     * @pbrbm bndiorx tif X doordinbtf of tif rotbtion bndior point
     * @pbrbm bndiory tif Y doordinbtf of tif rotbtion bndior point
     * @rfturn bn <dodf>AffinfTrbnsform</dodf> objfdt tibt rotbtfs
     *  doordinbtfs bround tif spfdififd point by tif spfdififd bnglf of
     *  rotbtion.
     * @sindf 1.2
     */
    publid stbtid AffinfTrbnsform gftRotbtfInstbndf(doublf tiftb,
                                                    doublf bndiorx,
                                                    doublf bndiory)
    {
        AffinfTrbnsform Tx = nfw AffinfTrbnsform();
        Tx.sftToRotbtion(tiftb, bndiorx, bndiory);
        rfturn Tx;
    }

    /**
     * Rfturns b trbnsform tibt rotbtfs doordinbtfs bddording to
     * b rotbtion vfdtor.
     * All doordinbtfs rotbtf bbout tif origin by tif sbmf bmount.
     * Tif bmount of rotbtion is sudi tibt doordinbtfs blong tif formfr
     * positivf X bxis will subsfqufntly blign witi tif vfdtor pointing
     * from tif origin to tif spfdififd vfdtor doordinbtfs.
     * If boti <dodf>vfdx</dodf> bnd <dodf>vfdy</dodf> brf 0.0,
     * bn idfntity trbnsform is rfturnfd.
     * Tiis opfrbtion is fquivblfnt to dblling:
     * <prf>
     *     AffinfTrbnsform.gftRotbtfInstbndf(Mbti.btbn2(vfdy, vfdx));
     * </prf>
     *
     * @pbrbm vfdx tif X doordinbtf of tif rotbtion vfdtor
     * @pbrbm vfdy tif Y doordinbtf of tif rotbtion vfdtor
     * @rfturn bn <dodf>AffinfTrbnsform</dodf> objfdt tibt rotbtfs
     *  doordinbtfs bddording to tif spfdififd rotbtion vfdtor.
     * @sindf 1.6
     */
    publid stbtid AffinfTrbnsform gftRotbtfInstbndf(doublf vfdx, doublf vfdy) {
        AffinfTrbnsform Tx = nfw AffinfTrbnsform();
        Tx.sftToRotbtion(vfdx, vfdy);
        rfturn Tx;
    }

    /**
     * Rfturns b trbnsform tibt rotbtfs doordinbtfs bround bn bndior
     * point bddording to b rotbtion vfdtor.
     * All doordinbtfs rotbtf bbout tif spfdififd bndior doordinbtfs
     * by tif sbmf bmount.
     * Tif bmount of rotbtion is sudi tibt doordinbtfs blong tif formfr
     * positivf X bxis will subsfqufntly blign witi tif vfdtor pointing
     * from tif origin to tif spfdififd vfdtor doordinbtfs.
     * If boti <dodf>vfdx</dodf> bnd <dodf>vfdy</dodf> brf 0.0,
     * bn idfntity trbnsform is rfturnfd.
     * Tiis opfrbtion is fquivblfnt to dblling:
     * <prf>
     *     AffinfTrbnsform.gftRotbtfInstbndf(Mbti.btbn2(vfdy, vfdx),
     *                                       bndiorx, bndiory);
     * </prf>
     *
     * @pbrbm vfdx tif X doordinbtf of tif rotbtion vfdtor
     * @pbrbm vfdy tif Y doordinbtf of tif rotbtion vfdtor
     * @pbrbm bndiorx tif X doordinbtf of tif rotbtion bndior point
     * @pbrbm bndiory tif Y doordinbtf of tif rotbtion bndior point
     * @rfturn bn <dodf>AffinfTrbnsform</dodf> objfdt tibt rotbtfs
     *  doordinbtfs bround tif spfdififd point bddording to tif
     *  spfdififd rotbtion vfdtor.
     * @sindf 1.6
     */
    publid stbtid AffinfTrbnsform gftRotbtfInstbndf(doublf vfdx,
                                                    doublf vfdy,
                                                    doublf bndiorx,
                                                    doublf bndiory)
    {
        AffinfTrbnsform Tx = nfw AffinfTrbnsform();
        Tx.sftToRotbtion(vfdx, vfdy, bndiorx, bndiory);
        rfturn Tx;
    }

    /**
     * Rfturns b trbnsform tibt rotbtfs doordinbtfs by tif spfdififd
     * numbfr of qubdrbnts.
     * Tiis opfrbtion is fquivblfnt to dblling:
     * <prf>
     *     AffinfTrbnsform.gftRotbtfInstbndf(numqubdrbnts * Mbti.PI / 2.0);
     * </prf>
     * Rotbting by b positivf numbfr of qubdrbnts rotbtfs points on
     * tif positivf X bxis towbrd tif positivf Y bxis.
     * @pbrbm numqubdrbnts tif numbfr of 90 dfgrff brds to rotbtf by
     * @rfturn bn <dodf>AffinfTrbnsform</dodf> objfdt tibt rotbtfs
     *  doordinbtfs by tif spfdififd numbfr of qubdrbnts.
     * @sindf 1.6
     */
    publid stbtid AffinfTrbnsform gftQubdrbntRotbtfInstbndf(int numqubdrbnts) {
        AffinfTrbnsform Tx = nfw AffinfTrbnsform();
        Tx.sftToQubdrbntRotbtion(numqubdrbnts);
        rfturn Tx;
    }

    /**
     * Rfturns b trbnsform tibt rotbtfs doordinbtfs by tif spfdififd
     * numbfr of qubdrbnts bround tif spfdififd bndior point.
     * Tiis opfrbtion is fquivblfnt to dblling:
     * <prf>
     *     AffinfTrbnsform.gftRotbtfInstbndf(numqubdrbnts * Mbti.PI / 2.0,
     *                                       bndiorx, bndiory);
     * </prf>
     * Rotbting by b positivf numbfr of qubdrbnts rotbtfs points on
     * tif positivf X bxis towbrd tif positivf Y bxis.
     *
     * @pbrbm numqubdrbnts tif numbfr of 90 dfgrff brds to rotbtf by
     * @pbrbm bndiorx tif X doordinbtf of tif rotbtion bndior point
     * @pbrbm bndiory tif Y doordinbtf of tif rotbtion bndior point
     * @rfturn bn <dodf>AffinfTrbnsform</dodf> objfdt tibt rotbtfs
     *  doordinbtfs by tif spfdififd numbfr of qubdrbnts bround tif
     *  spfdififd bndior point.
     * @sindf 1.6
     */
    publid stbtid AffinfTrbnsform gftQubdrbntRotbtfInstbndf(int numqubdrbnts,
                                                            doublf bndiorx,
                                                            doublf bndiory)
    {
        AffinfTrbnsform Tx = nfw AffinfTrbnsform();
        Tx.sftToQubdrbntRotbtion(numqubdrbnts, bndiorx, bndiory);
        rfturn Tx;
    }

    /**
     * Rfturns b trbnsform rfprfsfnting b sdbling trbnsformbtion.
     * Tif mbtrix rfprfsfnting tif rfturnfd trbnsform is:
     * <prf>
     *          [   sx   0    0   ]
     *          [   0    sy   0   ]
     *          [   0    0    1   ]
     * </prf>
     * @pbrbm sx tif fbdtor by wiidi doordinbtfs brf sdblfd blong tif
     * X bxis dirfdtion
     * @pbrbm sy tif fbdtor by wiidi doordinbtfs brf sdblfd blong tif
     * Y bxis dirfdtion
     * @rfturn bn <dodf>AffinfTrbnsform</dodf> objfdt tibt sdblfs
     *  doordinbtfs by tif spfdififd fbdtors.
     * @sindf 1.2
     */
    publid stbtid AffinfTrbnsform gftSdblfInstbndf(doublf sx, doublf sy) {
        AffinfTrbnsform Tx = nfw AffinfTrbnsform();
        Tx.sftToSdblf(sx, sy);
        rfturn Tx;
    }

    /**
     * Rfturns b trbnsform rfprfsfnting b sifbring trbnsformbtion.
     * Tif mbtrix rfprfsfnting tif rfturnfd trbnsform is:
     * <prf>
     *          [   1   six   0   ]
     *          [  siy   1    0   ]
     *          [   0    0    1   ]
     * </prf>
     * @pbrbm six tif multiplifr by wiidi doordinbtfs brf siiftfd in tif
     * dirfdtion of tif positivf X bxis bs b fbdtor of tifir Y doordinbtf
     * @pbrbm siy tif multiplifr by wiidi doordinbtfs brf siiftfd in tif
     * dirfdtion of tif positivf Y bxis bs b fbdtor of tifir X doordinbtf
     * @rfturn bn <dodf>AffinfTrbnsform</dodf> objfdt tibt sifbrs
     *  doordinbtfs by tif spfdififd multiplifrs.
     * @sindf 1.2
     */
    publid stbtid AffinfTrbnsform gftSifbrInstbndf(doublf six, doublf siy) {
        AffinfTrbnsform Tx = nfw AffinfTrbnsform();
        Tx.sftToSifbr(six, siy);
        rfturn Tx;
    }

    /**
     * Rftrifvfs tif flbg bits dfsdribing tif donvfrsion propfrtifs of
     * tiis trbnsform.
     * Tif rfturn vbluf is fitifr onf of tif donstbnts TYPE_IDENTITY
     * or TYPE_GENERAL_TRANSFORM, or b dombinbtion of tif
     * bppropribtf flbg bits.
     * A vblid dombinbtion of flbg bits is bn fxdlusivf OR opfrbtion
     * tibt dbn dombinf
     * tif TYPE_TRANSLATION flbg bit
     * in bddition to fitifr of tif
     * TYPE_UNIFORM_SCALE or TYPE_GENERAL_SCALE flbg bits
     * bs wfll bs fitifr of tif
     * TYPE_QUADRANT_ROTATION or TYPE_GENERAL_ROTATION flbg bits.
     * @rfturn tif OR dombinbtion of bny of tif indidbtfd flbgs tibt
     * bpply to tiis trbnsform
     * @sff #TYPE_IDENTITY
     * @sff #TYPE_TRANSLATION
     * @sff #TYPE_UNIFORM_SCALE
     * @sff #TYPE_GENERAL_SCALE
     * @sff #TYPE_QUADRANT_ROTATION
     * @sff #TYPE_GENERAL_ROTATION
     * @sff #TYPE_GENERAL_TRANSFORM
     * @sindf 1.2
     */
    publid int gftTypf() {
        if (typf == TYPE_UNKNOWN) {
            dbldulbtfTypf();
        }
        rfturn typf;
    }

    /**
     * Tiis is tif utility fundtion to dbldulbtf tif flbg bits wifn
     * tify ibvf not bffn dbdifd.
     * @sff #gftTypf
     */
    @SupprfssWbrnings("fblltirougi")
    privbtf void dbldulbtfTypf() {
        int rft = TYPE_IDENTITY;
        boolfbn sgn0, sgn1;
        doublf M0, M1, M2, M3;
        updbtfStbtf();
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            rft = TYPE_TRANSLATION;
            /* NOBREAK */
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            if ((M0 = m00) * (M2 = m01) + (M3 = m10) * (M1 = m11) != 0) {
                // Trbnsformfd unit vfdtors brf not pfrpfndidulbr...
                tiis.typf = TYPE_GENERAL_TRANSFORM;
                rfturn;
            }
            sgn0 = (M0 >= 0.0);
            sgn1 = (M1 >= 0.0);
            if (sgn0 == sgn1) {
                // sgn(M0) == sgn(M1) tifrfforf sgn(M2) == -sgn(M3)
                // Tiis is tif "unflippfd" (rigit-ibndfd) stbtf
                if (M0 != M1 || M2 != -M3) {
                    rft |= (TYPE_GENERAL_ROTATION | TYPE_GENERAL_SCALE);
                } flsf if (M0 * M1 - M2 * M3 != 1.0) {
                    rft |= (TYPE_GENERAL_ROTATION | TYPE_UNIFORM_SCALE);
                } flsf {
                    rft |= TYPE_GENERAL_ROTATION;
                }
            } flsf {
                // sgn(M0) == -sgn(M1) tifrfforf sgn(M2) == sgn(M3)
                // Tiis is tif "flippfd" (lfft-ibndfd) stbtf
                if (M0 != -M1 || M2 != M3) {
                    rft |= (TYPE_GENERAL_ROTATION |
                            TYPE_FLIP |
                            TYPE_GENERAL_SCALE);
                } flsf if (M0 * M1 - M2 * M3 != 1.0) {
                    rft |= (TYPE_GENERAL_ROTATION |
                            TYPE_FLIP |
                            TYPE_UNIFORM_SCALE);
                } flsf {
                    rft |= (TYPE_GENERAL_ROTATION | TYPE_FLIP);
                }
            }
            brfbk;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            rft = TYPE_TRANSLATION;
            /* NOBREAK */
        dbsf (APPLY_SHEAR):
            sgn0 = ((M0 = m01) >= 0.0);
            sgn1 = ((M1 = m10) >= 0.0);
            if (sgn0 != sgn1) {
                // Difffrfnt signs - simplf 90 dfgrff rotbtion
                if (M0 != -M1) {
                    rft |= (TYPE_QUADRANT_ROTATION | TYPE_GENERAL_SCALE);
                } flsf if (M0 != 1.0 && M0 != -1.0) {
                    rft |= (TYPE_QUADRANT_ROTATION | TYPE_UNIFORM_SCALE);
                } flsf {
                    rft |= TYPE_QUADRANT_ROTATION;
                }
            } flsf {
                // Sbmf signs - 90 dfgrff rotbtion plus bn bxis flip too
                if (M0 == M1) {
                    rft |= (TYPE_QUADRANT_ROTATION |
                            TYPE_FLIP |
                            TYPE_UNIFORM_SCALE);
                } flsf {
                    rft |= (TYPE_QUADRANT_ROTATION |
                            TYPE_FLIP |
                            TYPE_GENERAL_SCALE);
                }
            }
            brfbk;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            rft = TYPE_TRANSLATION;
            /* NOBREAK */
        dbsf (APPLY_SCALE):
            sgn0 = ((M0 = m00) >= 0.0);
            sgn1 = ((M1 = m11) >= 0.0);
            if (sgn0 == sgn1) {
                if (sgn0) {
                    // Boti sdbling fbdtors non-nfgbtivf - simplf sdblf
                    // Notf: APPLY_SCALE implifs M0, M1 brf not boti 1
                    if (M0 == M1) {
                        rft |= TYPE_UNIFORM_SCALE;
                    } flsf {
                        rft |= TYPE_GENERAL_SCALE;
                    }
                } flsf {
                    // Boti sdbling fbdtors nfgbtivf - 180 dfgrff rotbtion
                    if (M0 != M1) {
                        rft |= (TYPE_QUADRANT_ROTATION | TYPE_GENERAL_SCALE);
                    } flsf if (M0 != -1.0) {
                        rft |= (TYPE_QUADRANT_ROTATION | TYPE_UNIFORM_SCALE);
                    } flsf {
                        rft |= TYPE_QUADRANT_ROTATION;
                    }
                }
            } flsf {
                // Sdbling fbdtor signs difffrfnt - flip bbout somf bxis
                if (M0 == -M1) {
                    if (M0 == 1.0 || M0 == -1.0) {
                        rft |= TYPE_FLIP;
                    } flsf {
                        rft |= (TYPE_FLIP | TYPE_UNIFORM_SCALE);
                    }
                } flsf {
                    rft |= (TYPE_FLIP | TYPE_GENERAL_SCALE);
                }
            }
            brfbk;
        dbsf (APPLY_TRANSLATE):
            rft = TYPE_TRANSLATION;
            brfbk;
        dbsf (APPLY_IDENTITY):
            brfbk;
        }
        tiis.typf = rft;
    }

    /**
     * Rfturns tif dftfrminbnt of tif mbtrix rfprfsfntbtion of tif trbnsform.
     * Tif dftfrminbnt is usfful boti to dftfrminf if tif trbnsform dbn
     * bf invfrtfd bnd to gft b singlf vbluf rfprfsfnting tif
     * dombinfd X bnd Y sdbling of tif trbnsform.
     * <p>
     * If tif dftfrminbnt is non-zfro, tifn tiis trbnsform is
     * invfrtiblf bnd tif vbrious mftiods tibt dfpfnd on tif invfrsf
     * trbnsform do not nffd to tirow b
     * {@link NoninvfrtiblfTrbnsformExdfption}.
     * If tif dftfrminbnt is zfro tifn tiis trbnsform dbn not bf
     * invfrtfd sindf tif trbnsform mbps bll input doordinbtfs onto
     * b linf or b point.
     * If tif dftfrminbnt is nfbr fnougi to zfro tifn invfrsf trbnsform
     * opfrbtions migit not dbrry fnougi prfdision to produdf mfbningful
     * rfsults.
     * <p>
     * If tiis trbnsform rfprfsfnts b uniform sdblf, bs indidbtfd by
     * tif <dodf>gftTypf</dodf> mftiod tifn tif dftfrminbnt blso
     * rfprfsfnts tif squbrf of tif uniform sdblf fbdtor by wiidi bll of
     * tif points brf fxpbndfd from or dontrbdtfd towbrds tif origin.
     * If tiis trbnsform rfprfsfnts b non-uniform sdblf or morf gfnfrbl
     * trbnsform tifn tif dftfrminbnt is not likfly to rfprfsfnt b
     * vbluf usfful for bny purposf otifr tibn dftfrmining if invfrsf
     * trbnsforms brf possiblf.
     * <p>
     * Mbtifmbtidblly, tif dftfrminbnt is dbldulbtfd using tif formulb:
     * <prf>
     *          |  m00  m01  m02  |
     *          |  m10  m11  m12  |  =  m00 * m11 - m01 * m10
     *          |   0    0    1   |
     * </prf>
     *
     * @rfturn tif dftfrminbnt of tif mbtrix usfd to trbnsform tif
     * doordinbtfs.
     * @sff #gftTypf
     * @sff #drfbtfInvfrsf
     * @sff #invfrsfTrbnsform
     * @sff #TYPE_UNIFORM_SCALE
     * @sindf 1.2
     */
    @SupprfssWbrnings("fblltirougi")
    publid doublf gftDftfrminbnt() {
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            rfturn m00 * m11 - m01 * m10;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR):
            rfturn -(m01 * m10);
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SCALE):
            rfturn m00 * m11;
        dbsf (APPLY_TRANSLATE):
        dbsf (APPLY_IDENTITY):
            rfturn 1.0;
        }
    }

    /**
     * Mbnublly rfdbldulbtfs tif stbtf of tif trbnsform wifn tif mbtrix
     * dibngfs too mudi to prfdidt tif ffffdts on tif stbtf.
     * Tif following tbblf spfdififs wibt tif vbrious sfttings of tif
     * stbtf fifld sby bbout tif vblufs of tif dorrfsponding mbtrix
     * flfmfnt fiflds.
     * Notf tibt tif rulfs govfrning tif SCALE fiflds brf sligitly
     * difffrfnt dfpfnding on wiftifr tif SHEAR flbg is blso sft.
     * <prf>
     *                     SCALE            SHEAR          TRANSLATE
     *                    m00/m11          m01/m10          m02/m12
     *
     * IDENTITY             1.0              0.0              0.0
     * TRANSLATE (TR)       1.0              0.0          not boti 0.0
     * SCALE (SC)       not boti 1.0         0.0              0.0
     * TR | SC          not boti 1.0         0.0          not boti 0.0
     * SHEAR (SH)           0.0          not boti 0.0         0.0
     * TR | SH              0.0          not boti 0.0     not boti 0.0
     * SC | SH          not boti 0.0     not boti 0.0         0.0
     * TR | SC | SH     not boti 0.0     not boti 0.0     not boti 0.0
     * </prf>
     */
    void updbtfStbtf() {
        if (m01 == 0.0 && m10 == 0.0) {
            if (m00 == 1.0 && m11 == 1.0) {
                if (m02 == 0.0 && m12 == 0.0) {
                    stbtf = APPLY_IDENTITY;
                    typf = TYPE_IDENTITY;
                } flsf {
                    stbtf = APPLY_TRANSLATE;
                    typf = TYPE_TRANSLATION;
                }
            } flsf {
                if (m02 == 0.0 && m12 == 0.0) {
                    stbtf = APPLY_SCALE;
                    typf = TYPE_UNKNOWN;
                } flsf {
                    stbtf = (APPLY_SCALE | APPLY_TRANSLATE);
                    typf = TYPE_UNKNOWN;
                }
            }
        } flsf {
            if (m00 == 0.0 && m11 == 0.0) {
                if (m02 == 0.0 && m12 == 0.0) {
                    stbtf = APPLY_SHEAR;
                    typf = TYPE_UNKNOWN;
                } flsf {
                    stbtf = (APPLY_SHEAR | APPLY_TRANSLATE);
                    typf = TYPE_UNKNOWN;
                }
            } flsf {
                if (m02 == 0.0 && m12 == 0.0) {
                    stbtf = (APPLY_SHEAR | APPLY_SCALE);
                    typf = TYPE_UNKNOWN;
                } flsf {
                    stbtf = (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE);
                    typf = TYPE_UNKNOWN;
                }
            }
        }
    }

    /*
     * Convfnifndf mftiod usfd intfrnblly to tirow fxdfptions wifn
     * b dbsf wbs forgottfn in b switdi stbtfmfnt.
     */
    privbtf void stbtfError() {
        tirow nfw IntfrnblError("missing dbsf in trbnsform stbtf switdi");
    }

    /**
     * Rftrifvfs tif 6 spfdifibblf vblufs in tif 3x3 bffinf trbnsformbtion
     * mbtrix bnd plbdfs tifm into bn brrby of doublf prfdisions vblufs.
     * Tif vblufs brf storfd in tif brrby bs
     * {&nbsp;m00&nbsp;m10&nbsp;m01&nbsp;m11&nbsp;m02&nbsp;m12&nbsp;}.
     * An brrby of 4 doublfs dbn blso bf spfdififd, in wiidi dbsf only tif
     * first four flfmfnts rfprfsfnting tif non-trbnsform
     * pbrts of tif brrby brf rftrifvfd bnd tif vblufs brf storfd into
     * tif brrby bs {&nbsp;m00&nbsp;m10&nbsp;m01&nbsp;m11&nbsp;}
     * @pbrbm flbtmbtrix tif doublf brrby usfd to storf tif rfturnfd
     * vblufs.
     * @sff #gftSdblfX
     * @sff #gftSdblfY
     * @sff #gftSifbrX
     * @sff #gftSifbrY
     * @sff #gftTrbnslbtfX
     * @sff #gftTrbnslbtfY
     * @sindf 1.2
     */
    publid void gftMbtrix(doublf[] flbtmbtrix) {
        flbtmbtrix[0] = m00;
        flbtmbtrix[1] = m10;
        flbtmbtrix[2] = m01;
        flbtmbtrix[3] = m11;
        if (flbtmbtrix.lfngti > 5) {
            flbtmbtrix[4] = m02;
            flbtmbtrix[5] = m12;
        }
    }

    /**
     * Rfturns tif X doordinbtf sdbling flfmfnt (m00) of tif 3x3
     * bffinf trbnsformbtion mbtrix.
     * @rfturn b doublf vbluf tibt is tif X doordinbtf of tif sdbling
     *  flfmfnt of tif bffinf trbnsformbtion mbtrix.
     * @sff #gftMbtrix
     * @sindf 1.2
     */
    publid doublf gftSdblfX() {
        rfturn m00;
    }

    /**
     * Rfturns tif Y doordinbtf sdbling flfmfnt (m11) of tif 3x3
     * bffinf trbnsformbtion mbtrix.
     * @rfturn b doublf vbluf tibt is tif Y doordinbtf of tif sdbling
     *  flfmfnt of tif bffinf trbnsformbtion mbtrix.
     * @sff #gftMbtrix
     * @sindf 1.2
     */
    publid doublf gftSdblfY() {
        rfturn m11;
    }

    /**
     * Rfturns tif X doordinbtf sifbring flfmfnt (m01) of tif 3x3
     * bffinf trbnsformbtion mbtrix.
     * @rfturn b doublf vbluf tibt is tif X doordinbtf of tif sifbring
     *  flfmfnt of tif bffinf trbnsformbtion mbtrix.
     * @sff #gftMbtrix
     * @sindf 1.2
     */
    publid doublf gftSifbrX() {
        rfturn m01;
    }

    /**
     * Rfturns tif Y doordinbtf sifbring flfmfnt (m10) of tif 3x3
     * bffinf trbnsformbtion mbtrix.
     * @rfturn b doublf vbluf tibt is tif Y doordinbtf of tif sifbring
     *  flfmfnt of tif bffinf trbnsformbtion mbtrix.
     * @sff #gftMbtrix
     * @sindf 1.2
     */
    publid doublf gftSifbrY() {
        rfturn m10;
    }

    /**
     * Rfturns tif X doordinbtf of tif trbnslbtion flfmfnt (m02) of tif
     * 3x3 bffinf trbnsformbtion mbtrix.
     * @rfturn b doublf vbluf tibt is tif X doordinbtf of tif trbnslbtion
     *  flfmfnt of tif bffinf trbnsformbtion mbtrix.
     * @sff #gftMbtrix
     * @sindf 1.2
     */
    publid doublf gftTrbnslbtfX() {
        rfturn m02;
    }

    /**
     * Rfturns tif Y doordinbtf of tif trbnslbtion flfmfnt (m12) of tif
     * 3x3 bffinf trbnsformbtion mbtrix.
     * @rfturn b doublf vbluf tibt is tif Y doordinbtf of tif trbnslbtion
     *  flfmfnt of tif bffinf trbnsformbtion mbtrix.
     * @sff #gftMbtrix
     * @sindf 1.2
     */
    publid doublf gftTrbnslbtfY() {
        rfturn m12;
    }

    /**
     * Condbtfnbtfs tiis trbnsform witi b trbnslbtion trbnsformbtion.
     * Tiis is fquivblfnt to dblling dondbtfnbtf(T), wifrf T is bn
     * <dodf>AffinfTrbnsform</dodf> rfprfsfntfd by tif following mbtrix:
     * <prf>
     *          [   1    0    tx  ]
     *          [   0    1    ty  ]
     *          [   0    0    1   ]
     * </prf>
     * @pbrbm tx tif distbndf by wiidi doordinbtfs brf trbnslbtfd in tif
     * X bxis dirfdtion
     * @pbrbm ty tif distbndf by wiidi doordinbtfs brf trbnslbtfd in tif
     * Y bxis dirfdtion
     * @sindf 1.2
     */
    publid void trbnslbtf(doublf tx, doublf ty) {
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            m02 = tx * m00 + ty * m01 + m02;
            m12 = tx * m10 + ty * m11 + m12;
            if (m02 == 0.0 && m12 == 0.0) {
                stbtf = APPLY_SHEAR | APPLY_SCALE;
                if (typf != TYPE_UNKNOWN) {
                    typf -= TYPE_TRANSLATION;
                }
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            m02 = tx * m00 + ty * m01;
            m12 = tx * m10 + ty * m11;
            if (m02 != 0.0 || m12 != 0.0) {
                stbtf = APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE;
                typf |= TYPE_TRANSLATION;
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            m02 = ty * m01 + m02;
            m12 = tx * m10 + m12;
            if (m02 == 0.0 && m12 == 0.0) {
                stbtf = APPLY_SHEAR;
                if (typf != TYPE_UNKNOWN) {
                    typf -= TYPE_TRANSLATION;
                }
            }
            rfturn;
        dbsf (APPLY_SHEAR):
            m02 = ty * m01;
            m12 = tx * m10;
            if (m02 != 0.0 || m12 != 0.0) {
                stbtf = APPLY_SHEAR | APPLY_TRANSLATE;
                typf |= TYPE_TRANSLATION;
            }
            rfturn;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            m02 = tx * m00 + m02;
            m12 = ty * m11 + m12;
            if (m02 == 0.0 && m12 == 0.0) {
                stbtf = APPLY_SCALE;
                if (typf != TYPE_UNKNOWN) {
                    typf -= TYPE_TRANSLATION;
                }
            }
            rfturn;
        dbsf (APPLY_SCALE):
            m02 = tx * m00;
            m12 = ty * m11;
            if (m02 != 0.0 || m12 != 0.0) {
                stbtf = APPLY_SCALE | APPLY_TRANSLATE;
                typf |= TYPE_TRANSLATION;
            }
            rfturn;
        dbsf (APPLY_TRANSLATE):
            m02 = tx + m02;
            m12 = ty + m12;
            if (m02 == 0.0 && m12 == 0.0) {
                stbtf = APPLY_IDENTITY;
                typf = TYPE_IDENTITY;
            }
            rfturn;
        dbsf (APPLY_IDENTITY):
            m02 = tx;
            m12 = ty;
            if (tx != 0.0 || ty != 0.0) {
                stbtf = APPLY_TRANSLATE;
                typf = TYPE_TRANSLATION;
            }
            rfturn;
        }
    }

    // Utility mftiods to optimizf rotbtf mftiods.
    // Tifsf tbblfs trbnslbtf tif flbgs during prfdidtbblf qubdrbnt
    // rotbtions wifrf tif sifbr bnd sdblf vblufs brf swbppfd bnd nfgbtfd.
    privbtf stbtid finbl int rot90donvfrsion[] = {
        /* IDENTITY => */        APPLY_SHEAR,
        /* TRANSLATE (TR) => */  APPLY_SHEAR | APPLY_TRANSLATE,
        /* SCALE (SC) => */      APPLY_SHEAR,
        /* SC | TR => */         APPLY_SHEAR | APPLY_TRANSLATE,
        /* SHEAR (SH) => */      APPLY_SCALE,
        /* SH | TR => */         APPLY_SCALE | APPLY_TRANSLATE,
        /* SH | SC => */         APPLY_SHEAR | APPLY_SCALE,
        /* SH | SC | TR => */    APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE,
    };
    privbtf finbl void rotbtf90() {
        doublf M0 = m00;
        m00 = m01;
        m01 = -M0;
        M0 = m10;
        m10 = m11;
        m11 = -M0;
        int stbtf = rot90donvfrsion[tiis.stbtf];
        if ((stbtf & (APPLY_SHEAR | APPLY_SCALE)) == APPLY_SCALE &&
            m00 == 1.0 && m11 == 1.0)
        {
            stbtf -= APPLY_SCALE;
        }
        tiis.stbtf = stbtf;
        typf = TYPE_UNKNOWN;
    }
    privbtf finbl void rotbtf180() {
        m00 = -m00;
        m11 = -m11;
        int stbtf = tiis.stbtf;
        if ((stbtf & (APPLY_SHEAR)) != 0) {
            // If tifrf wbs b sifbr, tifn tiis rotbtion ibs no
            // ffffdt on tif stbtf.
            m01 = -m01;
            m10 = -m10;
        } flsf {
            // No sifbr mfbns tif SCALE stbtf mby togglf wifn
            // m00 bnd m11 brf nfgbtfd.
            if (m00 == 1.0 && m11 == 1.0) {
                tiis.stbtf = stbtf & ~APPLY_SCALE;
            } flsf {
                tiis.stbtf = stbtf | APPLY_SCALE;
            }
        }
        typf = TYPE_UNKNOWN;
    }
    privbtf finbl void rotbtf270() {
        doublf M0 = m00;
        m00 = -m01;
        m01 = M0;
        M0 = m10;
        m10 = -m11;
        m11 = M0;
        int stbtf = rot90donvfrsion[tiis.stbtf];
        if ((stbtf & (APPLY_SHEAR | APPLY_SCALE)) == APPLY_SCALE &&
            m00 == 1.0 && m11 == 1.0)
        {
            stbtf -= APPLY_SCALE;
        }
        tiis.stbtf = stbtf;
        typf = TYPE_UNKNOWN;
    }

    /**
     * Condbtfnbtfs tiis trbnsform witi b rotbtion trbnsformbtion.
     * Tiis is fquivblfnt to dblling dondbtfnbtf(R), wifrf R is bn
     * <dodf>AffinfTrbnsform</dodf> rfprfsfntfd by tif following mbtrix:
     * <prf>
     *          [   dos(tiftb)    -sin(tiftb)    0   ]
     *          [   sin(tiftb)     dos(tiftb)    0   ]
     *          [       0              0         1   ]
     * </prf>
     * Rotbting by b positivf bnglf tiftb rotbtfs points on tif positivf
     * X bxis towbrd tif positivf Y bxis.
     * Notf blso tif disdussion of
     * <b irff="#qubdrbntbpproximbtion">Hbndling 90-Dfgrff Rotbtions</b>
     * bbovf.
     * @pbrbm tiftb tif bnglf of rotbtion mfbsurfd in rbdibns
     * @sindf 1.2
     */
    publid void rotbtf(doublf tiftb) {
        doublf sin = Mbti.sin(tiftb);
        if (sin == 1.0) {
            rotbtf90();
        } flsf if (sin == -1.0) {
            rotbtf270();
        } flsf {
            doublf dos = Mbti.dos(tiftb);
            if (dos == -1.0) {
                rotbtf180();
            } flsf if (dos != 1.0) {
                doublf M0, M1;
                M0 = m00;
                M1 = m01;
                m00 =  dos * M0 + sin * M1;
                m01 = -sin * M0 + dos * M1;
                M0 = m10;
                M1 = m11;
                m10 =  dos * M0 + sin * M1;
                m11 = -sin * M0 + dos * M1;
                updbtfStbtf();
            }
        }
    }

    /**
     * Condbtfnbtfs tiis trbnsform witi b trbnsform tibt rotbtfs
     * doordinbtfs bround bn bndior point.
     * Tiis opfrbtion is fquivblfnt to trbnslbting tif doordinbtfs so
     * tibt tif bndior point is bt tif origin (S1), tifn rotbting tifm
     * bbout tif nfw origin (S2), bnd finblly trbnslbting so tibt tif
     * intfrmfdibtf origin is rfstorfd to tif doordinbtfs of tif originbl
     * bndior point (S3).
     * <p>
     * Tiis opfrbtion is fquivblfnt to tif following sfqufndf of dblls:
     * <prf>
     *     trbnslbtf(bndiorx, bndiory);      // S3: finbl trbnslbtion
     *     rotbtf(tiftb);                    // S2: rotbtf bround bndior
     *     trbnslbtf(-bndiorx, -bndiory);    // S1: trbnslbtf bndior to origin
     * </prf>
     * Rotbting by b positivf bnglf tiftb rotbtfs points on tif positivf
     * X bxis towbrd tif positivf Y bxis.
     * Notf blso tif disdussion of
     * <b irff="#qubdrbntbpproximbtion">Hbndling 90-Dfgrff Rotbtions</b>
     * bbovf.
     *
     * @pbrbm tiftb tif bnglf of rotbtion mfbsurfd in rbdibns
     * @pbrbm bndiorx tif X doordinbtf of tif rotbtion bndior point
     * @pbrbm bndiory tif Y doordinbtf of tif rotbtion bndior point
     * @sindf 1.2
     */
    publid void rotbtf(doublf tiftb, doublf bndiorx, doublf bndiory) {
        // REMIND: Simplf for now - optimizf lbtfr
        trbnslbtf(bndiorx, bndiory);
        rotbtf(tiftb);
        trbnslbtf(-bndiorx, -bndiory);
    }

    /**
     * Condbtfnbtfs tiis trbnsform witi b trbnsform tibt rotbtfs
     * doordinbtfs bddording to b rotbtion vfdtor.
     * All doordinbtfs rotbtf bbout tif origin by tif sbmf bmount.
     * Tif bmount of rotbtion is sudi tibt doordinbtfs blong tif formfr
     * positivf X bxis will subsfqufntly blign witi tif vfdtor pointing
     * from tif origin to tif spfdififd vfdtor doordinbtfs.
     * If boti <dodf>vfdx</dodf> bnd <dodf>vfdy</dodf> brf 0.0,
     * no bdditionbl rotbtion is bddfd to tiis trbnsform.
     * Tiis opfrbtion is fquivblfnt to dblling:
     * <prf>
     *          rotbtf(Mbti.btbn2(vfdy, vfdx));
     * </prf>
     *
     * @pbrbm vfdx tif X doordinbtf of tif rotbtion vfdtor
     * @pbrbm vfdy tif Y doordinbtf of tif rotbtion vfdtor
     * @sindf 1.6
     */
    publid void rotbtf(doublf vfdx, doublf vfdy) {
        if (vfdy == 0.0) {
            if (vfdx < 0.0) {
                rotbtf180();
            }
            // If vfdx > 0.0 - no rotbtion
            // If vfdx == 0.0 - undffinfd rotbtion - trfbt bs no rotbtion
        } flsf if (vfdx == 0.0) {
            if (vfdy > 0.0) {
                rotbtf90();
            } flsf {  // vfdy must bf < 0.0
                rotbtf270();
            }
        } flsf {
            doublf lfn = Mbti.sqrt(vfdx * vfdx + vfdy * vfdy);
            doublf sin = vfdy / lfn;
            doublf dos = vfdx / lfn;
            doublf M0, M1;
            M0 = m00;
            M1 = m01;
            m00 =  dos * M0 + sin * M1;
            m01 = -sin * M0 + dos * M1;
            M0 = m10;
            M1 = m11;
            m10 =  dos * M0 + sin * M1;
            m11 = -sin * M0 + dos * M1;
            updbtfStbtf();
        }
    }

    /**
     * Condbtfnbtfs tiis trbnsform witi b trbnsform tibt rotbtfs
     * doordinbtfs bround bn bndior point bddording to b rotbtion
     * vfdtor.
     * All doordinbtfs rotbtf bbout tif spfdififd bndior doordinbtfs
     * by tif sbmf bmount.
     * Tif bmount of rotbtion is sudi tibt doordinbtfs blong tif formfr
     * positivf X bxis will subsfqufntly blign witi tif vfdtor pointing
     * from tif origin to tif spfdififd vfdtor doordinbtfs.
     * If boti <dodf>vfdx</dodf> bnd <dodf>vfdy</dodf> brf 0.0,
     * tif trbnsform is not modififd in bny wby.
     * Tiis mftiod is fquivblfnt to dblling:
     * <prf>
     *     rotbtf(Mbti.btbn2(vfdy, vfdx), bndiorx, bndiory);
     * </prf>
     *
     * @pbrbm vfdx tif X doordinbtf of tif rotbtion vfdtor
     * @pbrbm vfdy tif Y doordinbtf of tif rotbtion vfdtor
     * @pbrbm bndiorx tif X doordinbtf of tif rotbtion bndior point
     * @pbrbm bndiory tif Y doordinbtf of tif rotbtion bndior point
     * @sindf 1.6
     */
    publid void rotbtf(doublf vfdx, doublf vfdy,
                       doublf bndiorx, doublf bndiory)
    {
        // REMIND: Simplf for now - optimizf lbtfr
        trbnslbtf(bndiorx, bndiory);
        rotbtf(vfdx, vfdy);
        trbnslbtf(-bndiorx, -bndiory);
    }

    /**
     * Condbtfnbtfs tiis trbnsform witi b trbnsform tibt rotbtfs
     * doordinbtfs by tif spfdififd numbfr of qubdrbnts.
     * Tiis is fquivblfnt to dblling:
     * <prf>
     *     rotbtf(numqubdrbnts * Mbti.PI / 2.0);
     * </prf>
     * Rotbting by b positivf numbfr of qubdrbnts rotbtfs points on
     * tif positivf X bxis towbrd tif positivf Y bxis.
     * @pbrbm numqubdrbnts tif numbfr of 90 dfgrff brds to rotbtf by
     * @sindf 1.6
     */
    publid void qubdrbntRotbtf(int numqubdrbnts) {
        switdi (numqubdrbnts & 3) {
        dbsf 0:
            brfbk;
        dbsf 1:
            rotbtf90();
            brfbk;
        dbsf 2:
            rotbtf180();
            brfbk;
        dbsf 3:
            rotbtf270();
            brfbk;
        }
    }

    /**
     * Condbtfnbtfs tiis trbnsform witi b trbnsform tibt rotbtfs
     * doordinbtfs by tif spfdififd numbfr of qubdrbnts bround
     * tif spfdififd bndior point.
     * Tiis mftiod is fquivblfnt to dblling:
     * <prf>
     *     rotbtf(numqubdrbnts * Mbti.PI / 2.0, bndiorx, bndiory);
     * </prf>
     * Rotbting by b positivf numbfr of qubdrbnts rotbtfs points on
     * tif positivf X bxis towbrd tif positivf Y bxis.
     *
     * @pbrbm numqubdrbnts tif numbfr of 90 dfgrff brds to rotbtf by
     * @pbrbm bndiorx tif X doordinbtf of tif rotbtion bndior point
     * @pbrbm bndiory tif Y doordinbtf of tif rotbtion bndior point
     * @sindf 1.6
     */
    publid void qubdrbntRotbtf(int numqubdrbnts,
                               doublf bndiorx, doublf bndiory)
    {
        switdi (numqubdrbnts & 3) {
        dbsf 0:
            rfturn;
        dbsf 1:
            m02 += bndiorx * (m00 - m01) + bndiory * (m01 + m00);
            m12 += bndiorx * (m10 - m11) + bndiory * (m11 + m10);
            rotbtf90();
            brfbk;
        dbsf 2:
            m02 += bndiorx * (m00 + m00) + bndiory * (m01 + m01);
            m12 += bndiorx * (m10 + m10) + bndiory * (m11 + m11);
            rotbtf180();
            brfbk;
        dbsf 3:
            m02 += bndiorx * (m00 + m01) + bndiory * (m01 - m00);
            m12 += bndiorx * (m10 + m11) + bndiory * (m11 - m10);
            rotbtf270();
            brfbk;
        }
        if (m02 == 0.0 && m12 == 0.0) {
            stbtf &= ~APPLY_TRANSLATE;
        } flsf {
            stbtf |= APPLY_TRANSLATE;
        }
    }

    /**
     * Condbtfnbtfs tiis trbnsform witi b sdbling trbnsformbtion.
     * Tiis is fquivblfnt to dblling dondbtfnbtf(S), wifrf S is bn
     * <dodf>AffinfTrbnsform</dodf> rfprfsfntfd by tif following mbtrix:
     * <prf>
     *          [   sx   0    0   ]
     *          [   0    sy   0   ]
     *          [   0    0    1   ]
     * </prf>
     * @pbrbm sx tif fbdtor by wiidi doordinbtfs brf sdblfd blong tif
     * X bxis dirfdtion
     * @pbrbm sy tif fbdtor by wiidi doordinbtfs brf sdblfd blong tif
     * Y bxis dirfdtion
     * @sindf 1.2
     */
    @SupprfssWbrnings("fblltirougi")
    publid void sdblf(doublf sx, doublf sy) {
        int stbtf = tiis.stbtf;
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            m00 *= sx;
            m11 *= sy;
            /* NOBREAK */
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR):
            m01 *= sy;
            m10 *= sx;
            if (m01 == 0 && m10 == 0) {
                stbtf &= APPLY_TRANSLATE;
                if (m00 == 1.0 && m11 == 1.0) {
                    tiis.typf = (stbtf == APPLY_IDENTITY
                                 ? TYPE_IDENTITY
                                 : TYPE_TRANSLATION);
                } flsf {
                    stbtf |= APPLY_SCALE;
                    tiis.typf = TYPE_UNKNOWN;
                }
                tiis.stbtf = stbtf;
            }
            rfturn;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SCALE):
            m00 *= sx;
            m11 *= sy;
            if (m00 == 1.0 && m11 == 1.0) {
                tiis.stbtf = (stbtf &= APPLY_TRANSLATE);
                tiis.typf = (stbtf == APPLY_IDENTITY
                             ? TYPE_IDENTITY
                             : TYPE_TRANSLATION);
            } flsf {
                tiis.typf = TYPE_UNKNOWN;
            }
            rfturn;
        dbsf (APPLY_TRANSLATE):
        dbsf (APPLY_IDENTITY):
            m00 = sx;
            m11 = sy;
            if (sx != 1.0 || sy != 1.0) {
                tiis.stbtf = stbtf | APPLY_SCALE;
                tiis.typf = TYPE_UNKNOWN;
            }
            rfturn;
        }
    }

    /**
     * Condbtfnbtfs tiis trbnsform witi b sifbring trbnsformbtion.
     * Tiis is fquivblfnt to dblling dondbtfnbtf(SH), wifrf SH is bn
     * <dodf>AffinfTrbnsform</dodf> rfprfsfntfd by tif following mbtrix:
     * <prf>
     *          [   1   six   0   ]
     *          [  siy   1    0   ]
     *          [   0    0    1   ]
     * </prf>
     * @pbrbm six tif multiplifr by wiidi doordinbtfs brf siiftfd in tif
     * dirfdtion of tif positivf X bxis bs b fbdtor of tifir Y doordinbtf
     * @pbrbm siy tif multiplifr by wiidi doordinbtfs brf siiftfd in tif
     * dirfdtion of tif positivf Y bxis bs b fbdtor of tifir X doordinbtf
     * @sindf 1.2
     */
    publid void sifbr(doublf six, doublf siy) {
        int stbtf = tiis.stbtf;
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            doublf M0, M1;
            M0 = m00;
            M1 = m01;
            m00 = M0 + M1 * siy;
            m01 = M0 * six + M1;

            M0 = m10;
            M1 = m11;
            m10 = M0 + M1 * siy;
            m11 = M0 * six + M1;
            updbtfStbtf();
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR):
            m00 = m01 * siy;
            m11 = m10 * six;
            if (m00 != 0.0 || m11 != 0.0) {
                tiis.stbtf = stbtf | APPLY_SCALE;
            }
            tiis.typf = TYPE_UNKNOWN;
            rfturn;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SCALE):
            m01 = m00 * six;
            m10 = m11 * siy;
            if (m01 != 0.0 || m10 != 0.0) {
                tiis.stbtf = stbtf | APPLY_SHEAR;
            }
            tiis.typf = TYPE_UNKNOWN;
            rfturn;
        dbsf (APPLY_TRANSLATE):
        dbsf (APPLY_IDENTITY):
            m01 = six;
            m10 = siy;
            if (m01 != 0.0 || m10 != 0.0) {
                tiis.stbtf = stbtf | APPLY_SCALE | APPLY_SHEAR;
                tiis.typf = TYPE_UNKNOWN;
            }
            rfturn;
        }
    }

    /**
     * Rfsfts tiis trbnsform to tif Idfntity trbnsform.
     * @sindf 1.2
     */
    publid void sftToIdfntity() {
        m00 = m11 = 1.0;
        m10 = m01 = m02 = m12 = 0.0;
        stbtf = APPLY_IDENTITY;
        typf = TYPE_IDENTITY;
    }

    /**
     * Sfts tiis trbnsform to b trbnslbtion trbnsformbtion.
     * Tif mbtrix rfprfsfnting tiis trbnsform bfdomfs:
     * <prf>
     *          [   1    0    tx  ]
     *          [   0    1    ty  ]
     *          [   0    0    1   ]
     * </prf>
     * @pbrbm tx tif distbndf by wiidi doordinbtfs brf trbnslbtfd in tif
     * X bxis dirfdtion
     * @pbrbm ty tif distbndf by wiidi doordinbtfs brf trbnslbtfd in tif
     * Y bxis dirfdtion
     * @sindf 1.2
     */
    publid void sftToTrbnslbtion(doublf tx, doublf ty) {
        m00 = 1.0;
        m10 = 0.0;
        m01 = 0.0;
        m11 = 1.0;
        m02 = tx;
        m12 = ty;
        if (tx != 0.0 || ty != 0.0) {
            stbtf = APPLY_TRANSLATE;
            typf = TYPE_TRANSLATION;
        } flsf {
            stbtf = APPLY_IDENTITY;
            typf = TYPE_IDENTITY;
        }
    }

    /**
     * Sfts tiis trbnsform to b rotbtion trbnsformbtion.
     * Tif mbtrix rfprfsfnting tiis trbnsform bfdomfs:
     * <prf>
     *          [   dos(tiftb)    -sin(tiftb)    0   ]
     *          [   sin(tiftb)     dos(tiftb)    0   ]
     *          [       0              0         1   ]
     * </prf>
     * Rotbting by b positivf bnglf tiftb rotbtfs points on tif positivf
     * X bxis towbrd tif positivf Y bxis.
     * Notf blso tif disdussion of
     * <b irff="#qubdrbntbpproximbtion">Hbndling 90-Dfgrff Rotbtions</b>
     * bbovf.
     * @pbrbm tiftb tif bnglf of rotbtion mfbsurfd in rbdibns
     * @sindf 1.2
     */
    publid void sftToRotbtion(doublf tiftb) {
        doublf sin = Mbti.sin(tiftb);
        doublf dos;
        if (sin == 1.0 || sin == -1.0) {
            dos = 0.0;
            stbtf = APPLY_SHEAR;
            typf = TYPE_QUADRANT_ROTATION;
        } flsf {
            dos = Mbti.dos(tiftb);
            if (dos == -1.0) {
                sin = 0.0;
                stbtf = APPLY_SCALE;
                typf = TYPE_QUADRANT_ROTATION;
            } flsf if (dos == 1.0) {
                sin = 0.0;
                stbtf = APPLY_IDENTITY;
                typf = TYPE_IDENTITY;
            } flsf {
                stbtf = APPLY_SHEAR | APPLY_SCALE;
                typf = TYPE_GENERAL_ROTATION;
            }
        }
        m00 =  dos;
        m10 =  sin;
        m01 = -sin;
        m11 =  dos;
        m02 =  0.0;
        m12 =  0.0;
    }

    /**
     * Sfts tiis trbnsform to b trbnslbtfd rotbtion trbnsformbtion.
     * Tiis opfrbtion is fquivblfnt to trbnslbting tif doordinbtfs so
     * tibt tif bndior point is bt tif origin (S1), tifn rotbting tifm
     * bbout tif nfw origin (S2), bnd finblly trbnslbting so tibt tif
     * intfrmfdibtf origin is rfstorfd to tif doordinbtfs of tif originbl
     * bndior point (S3).
     * <p>
     * Tiis opfrbtion is fquivblfnt to tif following sfqufndf of dblls:
     * <prf>
     *     sftToTrbnslbtion(bndiorx, bndiory); // S3: finbl trbnslbtion
     *     rotbtf(tiftb);                      // S2: rotbtf bround bndior
     *     trbnslbtf(-bndiorx, -bndiory);      // S1: trbnslbtf bndior to origin
     * </prf>
     * Tif mbtrix rfprfsfnting tiis trbnsform bfdomfs:
     * <prf>
     *          [   dos(tiftb)    -sin(tiftb)    x-x*dos+y*sin  ]
     *          [   sin(tiftb)     dos(tiftb)    y-x*sin-y*dos  ]
     *          [       0              0               1        ]
     * </prf>
     * Rotbting by b positivf bnglf tiftb rotbtfs points on tif positivf
     * X bxis towbrd tif positivf Y bxis.
     * Notf blso tif disdussion of
     * <b irff="#qubdrbntbpproximbtion">Hbndling 90-Dfgrff Rotbtions</b>
     * bbovf.
     *
     * @pbrbm tiftb tif bnglf of rotbtion mfbsurfd in rbdibns
     * @pbrbm bndiorx tif X doordinbtf of tif rotbtion bndior point
     * @pbrbm bndiory tif Y doordinbtf of tif rotbtion bndior point
     * @sindf 1.2
     */
    publid void sftToRotbtion(doublf tiftb, doublf bndiorx, doublf bndiory) {
        sftToRotbtion(tiftb);
        doublf sin = m10;
        doublf onfMinusCos = 1.0 - m00;
        m02 = bndiorx * onfMinusCos + bndiory * sin;
        m12 = bndiory * onfMinusCos - bndiorx * sin;
        if (m02 != 0.0 || m12 != 0.0) {
            stbtf |= APPLY_TRANSLATE;
            typf |= TYPE_TRANSLATION;
        }
    }

    /**
     * Sfts tiis trbnsform to b rotbtion trbnsformbtion tibt rotbtfs
     * doordinbtfs bddording to b rotbtion vfdtor.
     * All doordinbtfs rotbtf bbout tif origin by tif sbmf bmount.
     * Tif bmount of rotbtion is sudi tibt doordinbtfs blong tif formfr
     * positivf X bxis will subsfqufntly blign witi tif vfdtor pointing
     * from tif origin to tif spfdififd vfdtor doordinbtfs.
     * If boti <dodf>vfdx</dodf> bnd <dodf>vfdy</dodf> brf 0.0,
     * tif trbnsform is sft to bn idfntity trbnsform.
     * Tiis opfrbtion is fquivblfnt to dblling:
     * <prf>
     *     sftToRotbtion(Mbti.btbn2(vfdy, vfdx));
     * </prf>
     *
     * @pbrbm vfdx tif X doordinbtf of tif rotbtion vfdtor
     * @pbrbm vfdy tif Y doordinbtf of tif rotbtion vfdtor
     * @sindf 1.6
     */
    publid void sftToRotbtion(doublf vfdx, doublf vfdy) {
        doublf sin, dos;
        if (vfdy == 0) {
            sin = 0.0;
            if (vfdx < 0.0) {
                dos = -1.0;
                stbtf = APPLY_SCALE;
                typf = TYPE_QUADRANT_ROTATION;
            } flsf {
                dos = 1.0;
                stbtf = APPLY_IDENTITY;
                typf = TYPE_IDENTITY;
            }
        } flsf if (vfdx == 0) {
            dos = 0.0;
            sin = (vfdy > 0.0) ? 1.0 : -1.0;
            stbtf = APPLY_SHEAR;
            typf = TYPE_QUADRANT_ROTATION;
        } flsf {
            doublf lfn = Mbti.sqrt(vfdx * vfdx + vfdy * vfdy);
            dos = vfdx / lfn;
            sin = vfdy / lfn;
            stbtf = APPLY_SHEAR | APPLY_SCALE;
            typf = TYPE_GENERAL_ROTATION;
        }
        m00 =  dos;
        m10 =  sin;
        m01 = -sin;
        m11 =  dos;
        m02 =  0.0;
        m12 =  0.0;
    }

    /**
     * Sfts tiis trbnsform to b rotbtion trbnsformbtion tibt rotbtfs
     * doordinbtfs bround bn bndior point bddording to b rotbtion
     * vfdtor.
     * All doordinbtfs rotbtf bbout tif spfdififd bndior doordinbtfs
     * by tif sbmf bmount.
     * Tif bmount of rotbtion is sudi tibt doordinbtfs blong tif formfr
     * positivf X bxis will subsfqufntly blign witi tif vfdtor pointing
     * from tif origin to tif spfdififd vfdtor doordinbtfs.
     * If boti <dodf>vfdx</dodf> bnd <dodf>vfdy</dodf> brf 0.0,
     * tif trbnsform is sft to bn idfntity trbnsform.
     * Tiis opfrbtion is fquivblfnt to dblling:
     * <prf>
     *     sftToTrbnslbtion(Mbti.btbn2(vfdy, vfdx), bndiorx, bndiory);
     * </prf>
     *
     * @pbrbm vfdx tif X doordinbtf of tif rotbtion vfdtor
     * @pbrbm vfdy tif Y doordinbtf of tif rotbtion vfdtor
     * @pbrbm bndiorx tif X doordinbtf of tif rotbtion bndior point
     * @pbrbm bndiory tif Y doordinbtf of tif rotbtion bndior point
     * @sindf 1.6
     */
    publid void sftToRotbtion(doublf vfdx, doublf vfdy,
                              doublf bndiorx, doublf bndiory)
    {
        sftToRotbtion(vfdx, vfdy);
        doublf sin = m10;
        doublf onfMinusCos = 1.0 - m00;
        m02 = bndiorx * onfMinusCos + bndiory * sin;
        m12 = bndiory * onfMinusCos - bndiorx * sin;
        if (m02 != 0.0 || m12 != 0.0) {
            stbtf |= APPLY_TRANSLATE;
            typf |= TYPE_TRANSLATION;
        }
    }

    /**
     * Sfts tiis trbnsform to b rotbtion trbnsformbtion tibt rotbtfs
     * doordinbtfs by tif spfdififd numbfr of qubdrbnts.
     * Tiis opfrbtion is fquivblfnt to dblling:
     * <prf>
     *     sftToRotbtion(numqubdrbnts * Mbti.PI / 2.0);
     * </prf>
     * Rotbting by b positivf numbfr of qubdrbnts rotbtfs points on
     * tif positivf X bxis towbrd tif positivf Y bxis.
     * @pbrbm numqubdrbnts tif numbfr of 90 dfgrff brds to rotbtf by
     * @sindf 1.6
     */
    publid void sftToQubdrbntRotbtion(int numqubdrbnts) {
        switdi (numqubdrbnts & 3) {
        dbsf 0:
            m00 =  1.0;
            m10 =  0.0;
            m01 =  0.0;
            m11 =  1.0;
            m02 =  0.0;
            m12 =  0.0;
            stbtf = APPLY_IDENTITY;
            typf = TYPE_IDENTITY;
            brfbk;
        dbsf 1:
            m00 =  0.0;
            m10 =  1.0;
            m01 = -1.0;
            m11 =  0.0;
            m02 =  0.0;
            m12 =  0.0;
            stbtf = APPLY_SHEAR;
            typf = TYPE_QUADRANT_ROTATION;
            brfbk;
        dbsf 2:
            m00 = -1.0;
            m10 =  0.0;
            m01 =  0.0;
            m11 = -1.0;
            m02 =  0.0;
            m12 =  0.0;
            stbtf = APPLY_SCALE;
            typf = TYPE_QUADRANT_ROTATION;
            brfbk;
        dbsf 3:
            m00 =  0.0;
            m10 = -1.0;
            m01 =  1.0;
            m11 =  0.0;
            m02 =  0.0;
            m12 =  0.0;
            stbtf = APPLY_SHEAR;
            typf = TYPE_QUADRANT_ROTATION;
            brfbk;
        }
    }

    /**
     * Sfts tiis trbnsform to b trbnslbtfd rotbtion trbnsformbtion
     * tibt rotbtfs doordinbtfs by tif spfdififd numbfr of qubdrbnts
     * bround tif spfdififd bndior point.
     * Tiis opfrbtion is fquivblfnt to dblling:
     * <prf>
     *     sftToRotbtion(numqubdrbnts * Mbti.PI / 2.0, bndiorx, bndiory);
     * </prf>
     * Rotbting by b positivf numbfr of qubdrbnts rotbtfs points on
     * tif positivf X bxis towbrd tif positivf Y bxis.
     *
     * @pbrbm numqubdrbnts tif numbfr of 90 dfgrff brds to rotbtf by
     * @pbrbm bndiorx tif X doordinbtf of tif rotbtion bndior point
     * @pbrbm bndiory tif Y doordinbtf of tif rotbtion bndior point
     * @sindf 1.6
     */
    publid void sftToQubdrbntRotbtion(int numqubdrbnts,
                                      doublf bndiorx, doublf bndiory)
    {
        switdi (numqubdrbnts & 3) {
        dbsf 0:
            m00 =  1.0;
            m10 =  0.0;
            m01 =  0.0;
            m11 =  1.0;
            m02 =  0.0;
            m12 =  0.0;
            stbtf = APPLY_IDENTITY;
            typf = TYPE_IDENTITY;
            brfbk;
        dbsf 1:
            m00 =  0.0;
            m10 =  1.0;
            m01 = -1.0;
            m11 =  0.0;
            m02 =  bndiorx + bndiory;
            m12 =  bndiory - bndiorx;
            if (m02 == 0.0 && m12 == 0.0) {
                stbtf = APPLY_SHEAR;
                typf = TYPE_QUADRANT_ROTATION;
            } flsf {
                stbtf = APPLY_SHEAR | APPLY_TRANSLATE;
                typf = TYPE_QUADRANT_ROTATION | TYPE_TRANSLATION;
            }
            brfbk;
        dbsf 2:
            m00 = -1.0;
            m10 =  0.0;
            m01 =  0.0;
            m11 = -1.0;
            m02 =  bndiorx + bndiorx;
            m12 =  bndiory + bndiory;
            if (m02 == 0.0 && m12 == 0.0) {
                stbtf = APPLY_SCALE;
                typf = TYPE_QUADRANT_ROTATION;
            } flsf {
                stbtf = APPLY_SCALE | APPLY_TRANSLATE;
                typf = TYPE_QUADRANT_ROTATION | TYPE_TRANSLATION;
            }
            brfbk;
        dbsf 3:
            m00 =  0.0;
            m10 = -1.0;
            m01 =  1.0;
            m11 =  0.0;
            m02 =  bndiorx - bndiory;
            m12 =  bndiory + bndiorx;
            if (m02 == 0.0 && m12 == 0.0) {
                stbtf = APPLY_SHEAR;
                typf = TYPE_QUADRANT_ROTATION;
            } flsf {
                stbtf = APPLY_SHEAR | APPLY_TRANSLATE;
                typf = TYPE_QUADRANT_ROTATION | TYPE_TRANSLATION;
            }
            brfbk;
        }
    }

    /**
     * Sfts tiis trbnsform to b sdbling trbnsformbtion.
     * Tif mbtrix rfprfsfnting tiis trbnsform bfdomfs:
     * <prf>
     *          [   sx   0    0   ]
     *          [   0    sy   0   ]
     *          [   0    0    1   ]
     * </prf>
     * @pbrbm sx tif fbdtor by wiidi doordinbtfs brf sdblfd blong tif
     * X bxis dirfdtion
     * @pbrbm sy tif fbdtor by wiidi doordinbtfs brf sdblfd blong tif
     * Y bxis dirfdtion
     * @sindf 1.2
     */
    publid void sftToSdblf(doublf sx, doublf sy) {
        m00 = sx;
        m10 = 0.0;
        m01 = 0.0;
        m11 = sy;
        m02 = 0.0;
        m12 = 0.0;
        if (sx != 1.0 || sy != 1.0) {
            stbtf = APPLY_SCALE;
            typf = TYPE_UNKNOWN;
        } flsf {
            stbtf = APPLY_IDENTITY;
            typf = TYPE_IDENTITY;
        }
    }

    /**
     * Sfts tiis trbnsform to b sifbring trbnsformbtion.
     * Tif mbtrix rfprfsfnting tiis trbnsform bfdomfs:
     * <prf>
     *          [   1   six   0   ]
     *          [  siy   1    0   ]
     *          [   0    0    1   ]
     * </prf>
     * @pbrbm six tif multiplifr by wiidi doordinbtfs brf siiftfd in tif
     * dirfdtion of tif positivf X bxis bs b fbdtor of tifir Y doordinbtf
     * @pbrbm siy tif multiplifr by wiidi doordinbtfs brf siiftfd in tif
     * dirfdtion of tif positivf Y bxis bs b fbdtor of tifir X doordinbtf
     * @sindf 1.2
     */
    publid void sftToSifbr(doublf six, doublf siy) {
        m00 = 1.0;
        m01 = six;
        m10 = siy;
        m11 = 1.0;
        m02 = 0.0;
        m12 = 0.0;
        if (six != 0.0 || siy != 0.0) {
            stbtf = (APPLY_SHEAR | APPLY_SCALE);
            typf = TYPE_UNKNOWN;
        } flsf {
            stbtf = APPLY_IDENTITY;
            typf = TYPE_IDENTITY;
        }
    }

    /**
     * Sfts tiis trbnsform to b dopy of tif trbnsform in tif spfdififd
     * <dodf>AffinfTrbnsform</dodf> objfdt.
     * @pbrbm Tx tif <dodf>AffinfTrbnsform</dodf> objfdt from wiidi to
     * dopy tif trbnsform
     * @sindf 1.2
     */
    publid void sftTrbnsform(AffinfTrbnsform Tx) {
        tiis.m00 = Tx.m00;
        tiis.m10 = Tx.m10;
        tiis.m01 = Tx.m01;
        tiis.m11 = Tx.m11;
        tiis.m02 = Tx.m02;
        tiis.m12 = Tx.m12;
        tiis.stbtf = Tx.stbtf;
        tiis.typf = Tx.typf;
    }

    /**
     * Sfts tiis trbnsform to tif mbtrix spfdififd by tif 6
     * doublf prfdision vblufs.
     *
     * @pbrbm m00 tif X doordinbtf sdbling flfmfnt of tif 3x3 mbtrix
     * @pbrbm m10 tif Y doordinbtf sifbring flfmfnt of tif 3x3 mbtrix
     * @pbrbm m01 tif X doordinbtf sifbring flfmfnt of tif 3x3 mbtrix
     * @pbrbm m11 tif Y doordinbtf sdbling flfmfnt of tif 3x3 mbtrix
     * @pbrbm m02 tif X doordinbtf trbnslbtion flfmfnt of tif 3x3 mbtrix
     * @pbrbm m12 tif Y doordinbtf trbnslbtion flfmfnt of tif 3x3 mbtrix
     * @sindf 1.2
     */
    publid void sftTrbnsform(doublf m00, doublf m10,
                             doublf m01, doublf m11,
                             doublf m02, doublf m12) {
        tiis.m00 = m00;
        tiis.m10 = m10;
        tiis.m01 = m01;
        tiis.m11 = m11;
        tiis.m02 = m02;
        tiis.m12 = m12;
        updbtfStbtf();
    }

    /**
     * Condbtfnbtfs bn <dodf>AffinfTrbnsform</dodf> <dodf>Tx</dodf> to
     * tiis <dodf>AffinfTrbnsform</dodf> Cx in tif most dommonly usfful
     * wby to providf b nfw usfr spbdf
     * tibt is mbppfd to tif formfr usfr spbdf by <dodf>Tx</dodf>.
     * Cx is updbtfd to pfrform tif dombinfd trbnsformbtion.
     * Trbnsforming b point p by tif updbtfd trbnsform Cx' is
     * fquivblfnt to first trbnsforming p by <dodf>Tx</dodf> bnd tifn
     * trbnsforming tif rfsult by tif originbl trbnsform Cx likf tiis:
     * Cx'(p) = Cx(Tx(p))
     * In mbtrix notbtion, if tiis trbnsform Cx is
     * rfprfsfntfd by tif mbtrix [tiis] bnd <dodf>Tx</dodf> is rfprfsfntfd
     * by tif mbtrix [Tx] tifn tiis mftiod dofs tif following:
     * <prf>
     *          [tiis] = [tiis] x [Tx]
     * </prf>
     * @pbrbm Tx tif <dodf>AffinfTrbnsform</dodf> objfdt to bf
     * dondbtfnbtfd witi tiis <dodf>AffinfTrbnsform</dodf> objfdt.
     * @sff #prfCondbtfnbtf
     * @sindf 1.2
     */
    @SupprfssWbrnings("fblltirougi")
    publid void dondbtfnbtf(AffinfTrbnsform Tx) {
        doublf M0, M1;
        doublf T00, T01, T10, T11;
        doublf T02, T12;
        int mystbtf = stbtf;
        int txstbtf = Tx.stbtf;
        switdi ((txstbtf << HI_SHIFT) | mystbtf) {

            /* ---------- Tx == IDENTITY dbsfs ---------- */
        dbsf (HI_IDENTITY | APPLY_IDENTITY):
        dbsf (HI_IDENTITY | APPLY_TRANSLATE):
        dbsf (HI_IDENTITY | APPLY_SCALE):
        dbsf (HI_IDENTITY | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_IDENTITY | APPLY_SHEAR):
        dbsf (HI_IDENTITY | APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (HI_IDENTITY | APPLY_SHEAR | APPLY_SCALE):
        dbsf (HI_IDENTITY | APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            rfturn;

            /* ---------- tiis == IDENTITY dbsfs ---------- */
        dbsf (HI_SHEAR | HI_SCALE | HI_TRANSLATE | APPLY_IDENTITY):
            m01 = Tx.m01;
            m10 = Tx.m10;
            /* NOBREAK */
        dbsf (HI_SCALE | HI_TRANSLATE | APPLY_IDENTITY):
            m00 = Tx.m00;
            m11 = Tx.m11;
            /* NOBREAK */
        dbsf (HI_TRANSLATE | APPLY_IDENTITY):
            m02 = Tx.m02;
            m12 = Tx.m12;
            stbtf = txstbtf;
            typf = Tx.typf;
            rfturn;
        dbsf (HI_SHEAR | HI_SCALE | APPLY_IDENTITY):
            m01 = Tx.m01;
            m10 = Tx.m10;
            /* NOBREAK */
        dbsf (HI_SCALE | APPLY_IDENTITY):
            m00 = Tx.m00;
            m11 = Tx.m11;
            stbtf = txstbtf;
            typf = Tx.typf;
            rfturn;
        dbsf (HI_SHEAR | HI_TRANSLATE | APPLY_IDENTITY):
            m02 = Tx.m02;
            m12 = Tx.m12;
            /* NOBREAK */
        dbsf (HI_SHEAR | APPLY_IDENTITY):
            m01 = Tx.m01;
            m10 = Tx.m10;
            m00 = m11 = 0.0;
            stbtf = txstbtf;
            typf = Tx.typf;
            rfturn;

            /* ---------- Tx == TRANSLATE dbsfs ---------- */
        dbsf (HI_TRANSLATE | APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_TRANSLATE | APPLY_SHEAR | APPLY_SCALE):
        dbsf (HI_TRANSLATE | APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (HI_TRANSLATE | APPLY_SHEAR):
        dbsf (HI_TRANSLATE | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_TRANSLATE | APPLY_SCALE):
        dbsf (HI_TRANSLATE | APPLY_TRANSLATE):
            trbnslbtf(Tx.m02, Tx.m12);
            rfturn;

            /* ---------- Tx == SCALE dbsfs ---------- */
        dbsf (HI_SCALE | APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_SCALE | APPLY_SHEAR | APPLY_SCALE):
        dbsf (HI_SCALE | APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (HI_SCALE | APPLY_SHEAR):
        dbsf (HI_SCALE | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_SCALE | APPLY_SCALE):
        dbsf (HI_SCALE | APPLY_TRANSLATE):
            sdblf(Tx.m00, Tx.m11);
            rfturn;

            /* ---------- Tx == SHEAR dbsfs ---------- */
        dbsf (HI_SHEAR | APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_SHEAR | APPLY_SHEAR | APPLY_SCALE):
            T01 = Tx.m01; T10 = Tx.m10;
            M0 = m00;
            m00 = m01 * T10;
            m01 = M0 * T01;
            M0 = m10;
            m10 = m11 * T10;
            m11 = M0 * T01;
            typf = TYPE_UNKNOWN;
            rfturn;
        dbsf (HI_SHEAR | APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (HI_SHEAR | APPLY_SHEAR):
            m00 = m01 * Tx.m10;
            m01 = 0.0;
            m11 = m10 * Tx.m01;
            m10 = 0.0;
            stbtf = mystbtf ^ (APPLY_SHEAR | APPLY_SCALE);
            typf = TYPE_UNKNOWN;
            rfturn;
        dbsf (HI_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_SHEAR | APPLY_SCALE):
            m01 = m00 * Tx.m01;
            m00 = 0.0;
            m10 = m11 * Tx.m10;
            m11 = 0.0;
            stbtf = mystbtf ^ (APPLY_SHEAR | APPLY_SCALE);
            typf = TYPE_UNKNOWN;
            rfturn;
        dbsf (HI_SHEAR | APPLY_TRANSLATE):
            m00 = 0.0;
            m01 = Tx.m01;
            m10 = Tx.m10;
            m11 = 0.0;
            stbtf = APPLY_TRANSLATE | APPLY_SHEAR;
            typf = TYPE_UNKNOWN;
            rfturn;
        }
        // If Tx ibs morf tibn onf bttributf, it is not worti optimizing
        // bll of tiosf dbsfs...
        T00 = Tx.m00; T01 = Tx.m01; T02 = Tx.m02;
        T10 = Tx.m10; T11 = Tx.m11; T12 = Tx.m12;
        switdi (mystbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            stbtf = mystbtf | txstbtf;
            /* NOBREAK */
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            M0 = m00;
            M1 = m01;
            m00  = T00 * M0 + T10 * M1;
            m01  = T01 * M0 + T11 * M1;
            m02 += T02 * M0 + T12 * M1;

            M0 = m10;
            M1 = m11;
            m10  = T00 * M0 + T10 * M1;
            m11  = T01 * M0 + T11 * M1;
            m12 += T02 * M0 + T12 * M1;
            typf = TYPE_UNKNOWN;
            rfturn;

        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR):
            M0 = m01;
            m00  = T10 * M0;
            m01  = T11 * M0;
            m02 += T12 * M0;

            M0 = m10;
            m10  = T00 * M0;
            m11  = T01 * M0;
            m12 += T02 * M0;
            brfbk;

        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SCALE):
            M0 = m00;
            m00  = T00 * M0;
            m01  = T01 * M0;
            m02 += T02 * M0;

            M0 = m11;
            m10  = T10 * M0;
            m11  = T11 * M0;
            m12 += T12 * M0;
            brfbk;

        dbsf (APPLY_TRANSLATE):
            m00  = T00;
            m01  = T01;
            m02 += T02;

            m10  = T10;
            m11  = T11;
            m12 += T12;
            stbtf = txstbtf | APPLY_TRANSLATE;
            typf = TYPE_UNKNOWN;
            rfturn;
        }
        updbtfStbtf();
    }

    /**
     * Condbtfnbtfs bn <dodf>AffinfTrbnsform</dodf> <dodf>Tx</dodf> to
     * tiis <dodf>AffinfTrbnsform</dodf> Cx
     * in b lfss dommonly usfd wby sudi tibt <dodf>Tx</dodf> modififs tif
     * doordinbtf trbnsformbtion rflbtivf to tif bbsolutf pixfl
     * spbdf rbtifr tibn rflbtivf to tif fxisting usfr spbdf.
     * Cx is updbtfd to pfrform tif dombinfd trbnsformbtion.
     * Trbnsforming b point p by tif updbtfd trbnsform Cx' is
     * fquivblfnt to first trbnsforming p by tif originbl trbnsform
     * Cx bnd tifn trbnsforming tif rfsult by
     * <dodf>Tx</dodf> likf tiis:
     * Cx'(p) = Tx(Cx(p))
     * In mbtrix notbtion, if tiis trbnsform Cx
     * is rfprfsfntfd by tif mbtrix [tiis] bnd <dodf>Tx</dodf> is
     * rfprfsfntfd by tif mbtrix [Tx] tifn tiis mftiod dofs tif
     * following:
     * <prf>
     *          [tiis] = [Tx] x [tiis]
     * </prf>
     * @pbrbm Tx tif <dodf>AffinfTrbnsform</dodf> objfdt to bf
     * dondbtfnbtfd witi tiis <dodf>AffinfTrbnsform</dodf> objfdt.
     * @sff #dondbtfnbtf
     * @sindf 1.2
     */
    @SupprfssWbrnings("fblltirougi")
    publid void prfCondbtfnbtf(AffinfTrbnsform Tx) {
        doublf M0, M1;
        doublf T00, T01, T10, T11;
        doublf T02, T12;
        int mystbtf = stbtf;
        int txstbtf = Tx.stbtf;
        switdi ((txstbtf << HI_SHIFT) | mystbtf) {
        dbsf (HI_IDENTITY | APPLY_IDENTITY):
        dbsf (HI_IDENTITY | APPLY_TRANSLATE):
        dbsf (HI_IDENTITY | APPLY_SCALE):
        dbsf (HI_IDENTITY | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_IDENTITY | APPLY_SHEAR):
        dbsf (HI_IDENTITY | APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (HI_IDENTITY | APPLY_SHEAR | APPLY_SCALE):
        dbsf (HI_IDENTITY | APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            // Tx is IDENTITY...
            rfturn;

        dbsf (HI_TRANSLATE | APPLY_IDENTITY):
        dbsf (HI_TRANSLATE | APPLY_SCALE):
        dbsf (HI_TRANSLATE | APPLY_SHEAR):
        dbsf (HI_TRANSLATE | APPLY_SHEAR | APPLY_SCALE):
            // Tx is TRANSLATE, tiis ibs no TRANSLATE
            m02 = Tx.m02;
            m12 = Tx.m12;
            stbtf = mystbtf | APPLY_TRANSLATE;
            typf |= TYPE_TRANSLATION;
            rfturn;

        dbsf (HI_TRANSLATE | APPLY_TRANSLATE):
        dbsf (HI_TRANSLATE | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_TRANSLATE | APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (HI_TRANSLATE | APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            // Tx is TRANSLATE, tiis ibs onf too
            m02 = m02 + Tx.m02;
            m12 = m12 + Tx.m12;
            rfturn;

        dbsf (HI_SCALE | APPLY_TRANSLATE):
        dbsf (HI_SCALE | APPLY_IDENTITY):
            // Only tifsf two fxisting stbtfs nffd b nfw stbtf
            stbtf = mystbtf | APPLY_SCALE;
            /* NOBREAK */
        dbsf (HI_SCALE | APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_SCALE | APPLY_SHEAR | APPLY_SCALE):
        dbsf (HI_SCALE | APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (HI_SCALE | APPLY_SHEAR):
        dbsf (HI_SCALE | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_SCALE | APPLY_SCALE):
            // Tx is SCALE, tiis is bnytiing
            T00 = Tx.m00;
            T11 = Tx.m11;
            if ((mystbtf & APPLY_SHEAR) != 0) {
                m01 = m01 * T00;
                m10 = m10 * T11;
                if ((mystbtf & APPLY_SCALE) != 0) {
                    m00 = m00 * T00;
                    m11 = m11 * T11;
                }
            } flsf {
                m00 = m00 * T00;
                m11 = m11 * T11;
            }
            if ((mystbtf & APPLY_TRANSLATE) != 0) {
                m02 = m02 * T00;
                m12 = m12 * T11;
            }
            typf = TYPE_UNKNOWN;
            rfturn;
        dbsf (HI_SHEAR | APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (HI_SHEAR | APPLY_SHEAR):
            mystbtf = mystbtf | APPLY_SCALE;
            /* NOBREAK */
        dbsf (HI_SHEAR | APPLY_TRANSLATE):
        dbsf (HI_SHEAR | APPLY_IDENTITY):
        dbsf (HI_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_SHEAR | APPLY_SCALE):
            stbtf = mystbtf ^ APPLY_SHEAR;
            /* NOBREAK */
        dbsf (HI_SHEAR | APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (HI_SHEAR | APPLY_SHEAR | APPLY_SCALE):
            // Tx is SHEAR, tiis is bnytiing
            T01 = Tx.m01;
            T10 = Tx.m10;

            M0 = m00;
            m00 = m10 * T01;
            m10 = M0 * T10;

            M0 = m01;
            m01 = m11 * T01;
            m11 = M0 * T10;

            M0 = m02;
            m02 = m12 * T01;
            m12 = M0 * T10;
            typf = TYPE_UNKNOWN;
            rfturn;
        }
        // If Tx ibs morf tibn onf bttributf, it is not worti optimizing
        // bll of tiosf dbsfs...
        T00 = Tx.m00; T01 = Tx.m01; T02 = Tx.m02;
        T10 = Tx.m10; T11 = Tx.m11; T12 = Tx.m12;
        switdi (mystbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            M0 = m02;
            M1 = m12;
            T02 += M0 * T00 + M1 * T01;
            T12 += M0 * T10 + M1 * T11;

            /* NOBREAK */
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            m02 = T02;
            m12 = T12;

            M0 = m00;
            M1 = m10;
            m00 = M0 * T00 + M1 * T01;
            m10 = M0 * T10 + M1 * T11;

            M0 = m01;
            M1 = m11;
            m01 = M0 * T00 + M1 * T01;
            m11 = M0 * T10 + M1 * T11;
            brfbk;

        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            M0 = m02;
            M1 = m12;
            T02 += M0 * T00 + M1 * T01;
            T12 += M0 * T10 + M1 * T11;

            /* NOBREAK */
        dbsf (APPLY_SHEAR):
            m02 = T02;
            m12 = T12;

            M0 = m10;
            m00 = M0 * T01;
            m10 = M0 * T11;

            M0 = m01;
            m01 = M0 * T00;
            m11 = M0 * T10;
            brfbk;

        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            M0 = m02;
            M1 = m12;
            T02 += M0 * T00 + M1 * T01;
            T12 += M0 * T10 + M1 * T11;

            /* NOBREAK */
        dbsf (APPLY_SCALE):
            m02 = T02;
            m12 = T12;

            M0 = m00;
            m00 = M0 * T00;
            m10 = M0 * T10;

            M0 = m11;
            m01 = M0 * T01;
            m11 = M0 * T11;
            brfbk;

        dbsf (APPLY_TRANSLATE):
            M0 = m02;
            M1 = m12;
            T02 += M0 * T00 + M1 * T01;
            T12 += M0 * T10 + M1 * T11;

            /* NOBREAK */
        dbsf (APPLY_IDENTITY):
            m02 = T02;
            m12 = T12;

            m00 = T00;
            m10 = T10;

            m01 = T01;
            m11 = T11;

            stbtf = mystbtf | txstbtf;
            typf = TYPE_UNKNOWN;
            rfturn;
        }
        updbtfStbtf();
    }

    /**
     * Rfturns bn <dodf>AffinfTrbnsform</dodf> objfdt rfprfsfnting tif
     * invfrsf trbnsformbtion.
     * Tif invfrsf trbnsform Tx' of tiis trbnsform Tx
     * mbps doordinbtfs trbnsformfd by Tx bbdk
     * to tifir originbl doordinbtfs.
     * In otifr words, Tx'(Tx(p)) = p = Tx(Tx'(p)).
     * <p>
     * If tiis trbnsform mbps bll doordinbtfs onto b point or b linf
     * tifn it will not ibvf bn invfrsf, sindf doordinbtfs tibt do
     * not lif on tif dfstinbtion point or linf will not ibvf bn invfrsf
     * mbpping.
     * Tif <dodf>gftDftfrminbnt</dodf> mftiod dbn bf usfd to dftfrminf if tiis
     * trbnsform ibs no invfrsf, in wiidi dbsf bn fxdfption will bf
     * tirown if tif <dodf>drfbtfInvfrsf</dodf> mftiod is dbllfd.
     * @rfturn b nfw <dodf>AffinfTrbnsform</dodf> objfdt rfprfsfnting tif
     * invfrsf trbnsformbtion.
     * @sff #gftDftfrminbnt
     * @fxdfption NoninvfrtiblfTrbnsformExdfption
     * if tif mbtrix dbnnot bf invfrtfd.
     * @sindf 1.2
     */
    publid AffinfTrbnsform drfbtfInvfrsf()
        tirows NoninvfrtiblfTrbnsformExdfption
    {
        doublf dft;
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn null;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            dft = m00 * m11 - m01 * m10;
            if (Mbti.bbs(dft) <= Doublf.MIN_VALUE) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is "+
                                                          dft);
            }
            rfturn nfw AffinfTrbnsform( m11 / dft, -m10 / dft,
                                       -m01 / dft,  m00 / dft,
                                       (m01 * m12 - m11 * m02) / dft,
                                       (m10 * m02 - m00 * m12) / dft,
                                       (APPLY_SHEAR |
                                        APPLY_SCALE |
                                        APPLY_TRANSLATE));
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            dft = m00 * m11 - m01 * m10;
            if (Mbti.bbs(dft) <= Doublf.MIN_VALUE) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is "+
                                                          dft);
            }
            rfturn nfw AffinfTrbnsform( m11 / dft, -m10 / dft,
                                       -m01 / dft,  m00 / dft,
                                        0.0,        0.0,
                                       (APPLY_SHEAR | APPLY_SCALE));
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            if (m01 == 0.0 || m10 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            rfturn nfw AffinfTrbnsform( 0.0,        1.0 / m01,
                                        1.0 / m10,  0.0,
                                       -m12 / m10, -m02 / m01,
                                       (APPLY_SHEAR | APPLY_TRANSLATE));
        dbsf (APPLY_SHEAR):
            if (m01 == 0.0 || m10 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            rfturn nfw AffinfTrbnsform(0.0,       1.0 / m01,
                                       1.0 / m10, 0.0,
                                       0.0,       0.0,
                                       (APPLY_SHEAR));
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            if (m00 == 0.0 || m11 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            rfturn nfw AffinfTrbnsform( 1.0 / m00,  0.0,
                                        0.0,        1.0 / m11,
                                       -m02 / m00, -m12 / m11,
                                       (APPLY_SCALE | APPLY_TRANSLATE));
        dbsf (APPLY_SCALE):
            if (m00 == 0.0 || m11 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            rfturn nfw AffinfTrbnsform(1.0 / m00, 0.0,
                                       0.0,       1.0 / m11,
                                       0.0,       0.0,
                                       (APPLY_SCALE));
        dbsf (APPLY_TRANSLATE):
            rfturn nfw AffinfTrbnsform( 1.0,  0.0,
                                        0.0,  1.0,
                                       -m02, -m12,
                                       (APPLY_TRANSLATE));
        dbsf (APPLY_IDENTITY):
            rfturn nfw AffinfTrbnsform();
        }

        /* NOTREACHED */
    }

    /**
     * Sfts tiis trbnsform to tif invfrsf of itsflf.
     * Tif invfrsf trbnsform Tx' of tiis trbnsform Tx
     * mbps doordinbtfs trbnsformfd by Tx bbdk
     * to tifir originbl doordinbtfs.
     * In otifr words, Tx'(Tx(p)) = p = Tx(Tx'(p)).
     * <p>
     * If tiis trbnsform mbps bll doordinbtfs onto b point or b linf
     * tifn it will not ibvf bn invfrsf, sindf doordinbtfs tibt do
     * not lif on tif dfstinbtion point or linf will not ibvf bn invfrsf
     * mbpping.
     * Tif <dodf>gftDftfrminbnt</dodf> mftiod dbn bf usfd to dftfrminf if tiis
     * trbnsform ibs no invfrsf, in wiidi dbsf bn fxdfption will bf
     * tirown if tif <dodf>invfrt</dodf> mftiod is dbllfd.
     * @sff #gftDftfrminbnt
     * @fxdfption NoninvfrtiblfTrbnsformExdfption
     * if tif mbtrix dbnnot bf invfrtfd.
     * @sindf 1.6
     */
    publid void invfrt()
        tirows NoninvfrtiblfTrbnsformExdfption
    {
        doublf M00, M01, M02;
        doublf M10, M11, M12;
        doublf dft;
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M01 = m01; M02 = m02;
            M10 = m10; M11 = m11; M12 = m12;
            dft = M00 * M11 - M01 * M10;
            if (Mbti.bbs(dft) <= Doublf.MIN_VALUE) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is "+
                                                          dft);
            }
            m00 =  M11 / dft;
            m10 = -M10 / dft;
            m01 = -M01 / dft;
            m11 =  M00 / dft;
            m02 = (M01 * M12 - M11 * M02) / dft;
            m12 = (M10 * M02 - M00 * M12) / dft;
            brfbk;
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            M00 = m00; M01 = m01;
            M10 = m10; M11 = m11;
            dft = M00 * M11 - M01 * M10;
            if (Mbti.bbs(dft) <= Doublf.MIN_VALUE) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is "+
                                                          dft);
            }
            m00 =  M11 / dft;
            m10 = -M10 / dft;
            m01 = -M01 / dft;
            m11 =  M00 / dft;
            // m02 = 0.0;
            // m12 = 0.0;
            brfbk;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            M01 = m01; M02 = m02;
            M10 = m10; M12 = m12;
            if (M01 == 0.0 || M10 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            // m00 = 0.0;
            m10 = 1.0 / M01;
            m01 = 1.0 / M10;
            // m11 = 0.0;
            m02 = -M12 / M10;
            m12 = -M02 / M01;
            brfbk;
        dbsf (APPLY_SHEAR):
            M01 = m01;
            M10 = m10;
            if (M01 == 0.0 || M10 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            // m00 = 0.0;
            m10 = 1.0 / M01;
            m01 = 1.0 / M10;
            // m11 = 0.0;
            // m02 = 0.0;
            // m12 = 0.0;
            brfbk;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M02 = m02;
            M11 = m11; M12 = m12;
            if (M00 == 0.0 || M11 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            m00 = 1.0 / M00;
            // m10 = 0.0;
            // m01 = 0.0;
            m11 = 1.0 / M11;
            m02 = -M02 / M00;
            m12 = -M12 / M11;
            brfbk;
        dbsf (APPLY_SCALE):
            M00 = m00;
            M11 = m11;
            if (M00 == 0.0 || M11 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            m00 = 1.0 / M00;
            // m10 = 0.0;
            // m01 = 0.0;
            m11 = 1.0 / M11;
            // m02 = 0.0;
            // m12 = 0.0;
            brfbk;
        dbsf (APPLY_TRANSLATE):
            // m00 = 1.0;
            // m10 = 0.0;
            // m01 = 0.0;
            // m11 = 1.0;
            m02 = -m02;
            m12 = -m12;
            brfbk;
        dbsf (APPLY_IDENTITY):
            // m00 = 1.0;
            // m10 = 0.0;
            // m01 = 0.0;
            // m11 = 1.0;
            // m02 = 0.0;
            // m12 = 0.0;
            brfbk;
        }
    }

    /**
     * Trbnsforms tif spfdififd <dodf>ptSrd</dodf> bnd storfs tif rfsult
     * in <dodf>ptDst</dodf>.
     * If <dodf>ptDst</dodf> is <dodf>null</dodf>, b nfw {@link Point2D}
     * objfdt is bllodbtfd bnd tifn tif rfsult of tif trbnsformbtion is
     * storfd in tiis objfdt.
     * In fitifr dbsf, <dodf>ptDst</dodf>, wiidi dontbins tif
     * trbnsformfd point, is rfturnfd for donvfnifndf.
     * If <dodf>ptSrd</dodf> bnd <dodf>ptDst</dodf> brf tif sbmf
     * objfdt, tif input point is dorrfdtly ovfrwrittfn witi
     * tif trbnsformfd point.
     * @pbrbm ptSrd tif spfdififd <dodf>Point2D</dodf> to bf trbnsformfd
     * @pbrbm ptDst tif spfdififd <dodf>Point2D</dodf> tibt storfs tif
     * rfsult of trbnsforming <dodf>ptSrd</dodf>
     * @rfturn tif <dodf>ptDst</dodf> bftfr trbnsforming
     * <dodf>ptSrd</dodf> bnd storing tif rfsult in <dodf>ptDst</dodf>.
     * @sindf 1.2
     */
    publid Point2D trbnsform(Point2D ptSrd, Point2D ptDst) {
        if (ptDst == null) {
            if (ptSrd instbndfof Point2D.Doublf) {
                ptDst = nfw Point2D.Doublf();
            } flsf {
                ptDst = nfw Point2D.Flobt();
            }
        }
        // Copy sourdf doords into lodbl vbribblfs in dbsf srd == dst
        doublf x = ptSrd.gftX();
        doublf y = ptSrd.gftY();
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn null;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            ptDst.sftLodbtion(x * m00 + y * m01 + m02,
                              x * m10 + y * m11 + m12);
            rfturn ptDst;
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            ptDst.sftLodbtion(x * m00 + y * m01, x * m10 + y * m11);
            rfturn ptDst;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            ptDst.sftLodbtion(y * m01 + m02, x * m10 + m12);
            rfturn ptDst;
        dbsf (APPLY_SHEAR):
            ptDst.sftLodbtion(y * m01, x * m10);
            rfturn ptDst;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            ptDst.sftLodbtion(x * m00 + m02, y * m11 + m12);
            rfturn ptDst;
        dbsf (APPLY_SCALE):
            ptDst.sftLodbtion(x * m00, y * m11);
            rfturn ptDst;
        dbsf (APPLY_TRANSLATE):
            ptDst.sftLodbtion(x + m02, y + m12);
            rfturn ptDst;
        dbsf (APPLY_IDENTITY):
            ptDst.sftLodbtion(x, y);
            rfturn ptDst;
        }

        /* NOTREACHED */
    }

    /**
     * Trbnsforms bn brrby of point objfdts by tiis trbnsform.
     * If bny flfmfnt of tif <dodf>ptDst</dodf> brrby is
     * <dodf>null</dodf>, b nfw <dodf>Point2D</dodf> objfdt is bllodbtfd
     * bnd storfd into tibt flfmfnt bfforf storing tif rfsults of tif
     * trbnsformbtion.
     * <p>
     * Notf tibt tiis mftiod dofs not tbkf bny prfdbutions to
     * bvoid problfms dbusfd by storing rfsults into <dodf>Point2D</dodf>
     * objfdts tibt will bf usfd bs tif sourdf for dbldulbtions
     * furtifr down tif sourdf brrby.
     * Tiis mftiod dofs gubrbntff tibt if b spfdififd <dodf>Point2D</dodf>
     * objfdt is boti tif sourdf bnd dfstinbtion for tif sbmf singlf point
     * trbnsform opfrbtion tifn tif rfsults will not bf storfd until
     * tif dbldulbtions brf domplftf to bvoid storing tif rfsults on
     * top of tif opfrbnds.
     * If, iowfvfr, tif dfstinbtion <dodf>Point2D</dodf> objfdt for onf
     * opfrbtion is tif sbmf objfdt bs tif sourdf <dodf>Point2D</dodf>
     * objfdt for bnotifr opfrbtion furtifr down tif sourdf brrby tifn
     * tif originbl doordinbtfs in tibt point brf ovfrwrittfn bfforf
     * tify dbn bf donvfrtfd.
     * @pbrbm ptSrd tif brrby dontbining tif sourdf point objfdts
     * @pbrbm ptDst tif brrby into wiidi tif trbnsform point objfdts brf
     * rfturnfd
     * @pbrbm srdOff tif offsft to tif first point objfdt to bf
     * trbnsformfd in tif sourdf brrby
     * @pbrbm dstOff tif offsft to tif lodbtion of tif first
     * trbnsformfd point objfdt tibt is storfd in tif dfstinbtion brrby
     * @pbrbm numPts tif numbfr of point objfdts to bf trbnsformfd
     * @sindf 1.2
     */
    publid void trbnsform(Point2D[] ptSrd, int srdOff,
                          Point2D[] ptDst, int dstOff,
                          int numPts) {
        int stbtf = tiis.stbtf;
        wiilf (--numPts >= 0) {
            // Copy sourdf doords into lodbl vbribblfs in dbsf srd == dst
            Point2D srd = ptSrd[srdOff++];
            doublf x = srd.gftX();
            doublf y = srd.gftY();
            Point2D dst = ptDst[dstOff++];
            if (dst == null) {
                if (srd instbndfof Point2D.Doublf) {
                    dst = nfw Point2D.Doublf();
                } flsf {
                    dst = nfw Point2D.Flobt();
                }
                ptDst[dstOff - 1] = dst;
            }
            switdi (stbtf) {
            dffbult:
                stbtfError();
                /* NOTREACHED */
                rfturn;
            dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
                dst.sftLodbtion(x * m00 + y * m01 + m02,
                                x * m10 + y * m11 + m12);
                brfbk;
            dbsf (APPLY_SHEAR | APPLY_SCALE):
                dst.sftLodbtion(x * m00 + y * m01, x * m10 + y * m11);
                brfbk;
            dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
                dst.sftLodbtion(y * m01 + m02, x * m10 + m12);
                brfbk;
            dbsf (APPLY_SHEAR):
                dst.sftLodbtion(y * m01, x * m10);
                brfbk;
            dbsf (APPLY_SCALE | APPLY_TRANSLATE):
                dst.sftLodbtion(x * m00 + m02, y * m11 + m12);
                brfbk;
            dbsf (APPLY_SCALE):
                dst.sftLodbtion(x * m00, y * m11);
                brfbk;
            dbsf (APPLY_TRANSLATE):
                dst.sftLodbtion(x + m02, y + m12);
                brfbk;
            dbsf (APPLY_IDENTITY):
                dst.sftLodbtion(x, y);
                brfbk;
            }
        }

        /* NOTREACHED */
    }

    /**
     * Trbnsforms bn brrby of flobting point doordinbtfs by tiis trbnsform.
     * Tif two doordinbtf brrby sfdtions dbn bf fxbdtly tif sbmf or
     * dbn bf ovfrlbpping sfdtions of tif sbmf brrby witiout bfffdting tif
     * vblidity of tif rfsults.
     * Tiis mftiod fnsurfs tibt no sourdf doordinbtfs brf ovfrwrittfn by b
     * prfvious opfrbtion bfforf tify dbn bf trbnsformfd.
     * Tif doordinbtfs brf storfd in tif brrbys stbrting bt tif spfdififd
     * offsft in tif ordfr <dodf>[x0, y0, x1, y1, ..., xn, yn]</dodf>.
     * @pbrbm srdPts tif brrby dontbining tif sourdf point doordinbtfs.
     * Ebdi point is storfd bs b pbir of x,&nbsp;y doordinbtfs.
     * @pbrbm dstPts tif brrby into wiidi tif trbnsformfd point doordinbtfs
     * brf rfturnfd.  Ebdi point is storfd bs b pbir of x,&nbsp;y
     * doordinbtfs.
     * @pbrbm srdOff tif offsft to tif first point to bf trbnsformfd
     * in tif sourdf brrby
     * @pbrbm dstOff tif offsft to tif lodbtion of tif first
     * trbnsformfd point tibt is storfd in tif dfstinbtion brrby
     * @pbrbm numPts tif numbfr of points to bf trbnsformfd
     * @sindf 1.2
     */
    publid void trbnsform(flobt[] srdPts, int srdOff,
                          flobt[] dstPts, int dstOff,
                          int numPts) {
        doublf M00, M01, M02, M10, M11, M12;    // For dbdiing
        if (dstPts == srdPts &&
            dstOff > srdOff && dstOff < srdOff + numPts * 2)
        {
            // If tif brrbys ovfrlbp pbrtiblly witi tif dfstinbtion iigifr
            // tibn tif sourdf bnd wf trbnsform tif doordinbtfs normblly
            // wf would ovfrwritf somf of tif lbtfr sourdf doordinbtfs
            // witi rfsults of prfvious trbnsformbtions.
            // To gft bround tiis wf usf brrbydopy to dopy tif points
            // to tifir finbl dfstinbtion witi dorrfdt ovfrwritf
            // ibndling bnd tifn trbnsform tifm in plbdf in tif nfw
            // sbffr lodbtion.
            Systfm.brrbydopy(srdPts, srdOff, dstPts, dstOff, numPts * 2);
            // srdPts = dstPts;         // Tify brf known to bf fqubl.
            srdOff = dstOff;
        }
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M01 = m01; M02 = m02;
            M10 = m10; M11 = m11; M12 = m12;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                doublf y = srdPts[srdOff++];
                dstPts[dstOff++] = (flobt) (M00 * x + M01 * y + M02);
                dstPts[dstOff++] = (flobt) (M10 * x + M11 * y + M12);
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            M00 = m00; M01 = m01;
            M10 = m10; M11 = m11;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                doublf y = srdPts[srdOff++];
                dstPts[dstOff++] = (flobt) (M00 * x + M01 * y);
                dstPts[dstOff++] = (flobt) (M10 * x + M11 * y);
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            M01 = m01; M02 = m02;
            M10 = m10; M12 = m12;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                dstPts[dstOff++] = (flobt) (M01 * srdPts[srdOff++] + M02);
                dstPts[dstOff++] = (flobt) (M10 * x + M12);
            }
            rfturn;
        dbsf (APPLY_SHEAR):
            M01 = m01; M10 = m10;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                dstPts[dstOff++] = (flobt) (M01 * srdPts[srdOff++]);
                dstPts[dstOff++] = (flobt) (M10 * x);
            }
            rfturn;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M02 = m02;
            M11 = m11; M12 = m12;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = (flobt) (M00 * srdPts[srdOff++] + M02);
                dstPts[dstOff++] = (flobt) (M11 * srdPts[srdOff++] + M12);
            }
            rfturn;
        dbsf (APPLY_SCALE):
            M00 = m00; M11 = m11;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = (flobt) (M00 * srdPts[srdOff++]);
                dstPts[dstOff++] = (flobt) (M11 * srdPts[srdOff++]);
            }
            rfturn;
        dbsf (APPLY_TRANSLATE):
            M02 = m02; M12 = m12;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = (flobt) (srdPts[srdOff++] + M02);
                dstPts[dstOff++] = (flobt) (srdPts[srdOff++] + M12);
            }
            rfturn;
        dbsf (APPLY_IDENTITY):
            if (srdPts != dstPts || srdOff != dstOff) {
                Systfm.brrbydopy(srdPts, srdOff, dstPts, dstOff,
                                 numPts * 2);
            }
            rfturn;
        }

        /* NOTREACHED */
    }

    /**
     * Trbnsforms bn brrby of doublf prfdision doordinbtfs by tiis trbnsform.
     * Tif two doordinbtf brrby sfdtions dbn bf fxbdtly tif sbmf or
     * dbn bf ovfrlbpping sfdtions of tif sbmf brrby witiout bfffdting tif
     * vblidity of tif rfsults.
     * Tiis mftiod fnsurfs tibt no sourdf doordinbtfs brf
     * ovfrwrittfn by b prfvious opfrbtion bfforf tify dbn bf trbnsformfd.
     * Tif doordinbtfs brf storfd in tif brrbys stbrting bt tif indidbtfd
     * offsft in tif ordfr <dodf>[x0, y0, x1, y1, ..., xn, yn]</dodf>.
     * @pbrbm srdPts tif brrby dontbining tif sourdf point doordinbtfs.
     * Ebdi point is storfd bs b pbir of x,&nbsp;y doordinbtfs.
     * @pbrbm dstPts tif brrby into wiidi tif trbnsformfd point
     * doordinbtfs brf rfturnfd.  Ebdi point is storfd bs b pbir of
     * x,&nbsp;y doordinbtfs.
     * @pbrbm srdOff tif offsft to tif first point to bf trbnsformfd
     * in tif sourdf brrby
     * @pbrbm dstOff tif offsft to tif lodbtion of tif first
     * trbnsformfd point tibt is storfd in tif dfstinbtion brrby
     * @pbrbm numPts tif numbfr of point objfdts to bf trbnsformfd
     * @sindf 1.2
     */
    publid void trbnsform(doublf[] srdPts, int srdOff,
                          doublf[] dstPts, int dstOff,
                          int numPts) {
        doublf M00, M01, M02, M10, M11, M12;    // For dbdiing
        if (dstPts == srdPts &&
            dstOff > srdOff && dstOff < srdOff + numPts * 2)
        {
            // If tif brrbys ovfrlbp pbrtiblly witi tif dfstinbtion iigifr
            // tibn tif sourdf bnd wf trbnsform tif doordinbtfs normblly
            // wf would ovfrwritf somf of tif lbtfr sourdf doordinbtfs
            // witi rfsults of prfvious trbnsformbtions.
            // To gft bround tiis wf usf brrbydopy to dopy tif points
            // to tifir finbl dfstinbtion witi dorrfdt ovfrwritf
            // ibndling bnd tifn trbnsform tifm in plbdf in tif nfw
            // sbffr lodbtion.
            Systfm.brrbydopy(srdPts, srdOff, dstPts, dstOff, numPts * 2);
            // srdPts = dstPts;         // Tify brf known to bf fqubl.
            srdOff = dstOff;
        }
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M01 = m01; M02 = m02;
            M10 = m10; M11 = m11; M12 = m12;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                doublf y = srdPts[srdOff++];
                dstPts[dstOff++] = M00 * x + M01 * y + M02;
                dstPts[dstOff++] = M10 * x + M11 * y + M12;
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            M00 = m00; M01 = m01;
            M10 = m10; M11 = m11;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                doublf y = srdPts[srdOff++];
                dstPts[dstOff++] = M00 * x + M01 * y;
                dstPts[dstOff++] = M10 * x + M11 * y;
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            M01 = m01; M02 = m02;
            M10 = m10; M12 = m12;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                dstPts[dstOff++] = M01 * srdPts[srdOff++] + M02;
                dstPts[dstOff++] = M10 * x + M12;
            }
            rfturn;
        dbsf (APPLY_SHEAR):
            M01 = m01; M10 = m10;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                dstPts[dstOff++] = M01 * srdPts[srdOff++];
                dstPts[dstOff++] = M10 * x;
            }
            rfturn;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M02 = m02;
            M11 = m11; M12 = m12;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = M00 * srdPts[srdOff++] + M02;
                dstPts[dstOff++] = M11 * srdPts[srdOff++] + M12;
            }
            rfturn;
        dbsf (APPLY_SCALE):
            M00 = m00; M11 = m11;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = M00 * srdPts[srdOff++];
                dstPts[dstOff++] = M11 * srdPts[srdOff++];
            }
            rfturn;
        dbsf (APPLY_TRANSLATE):
            M02 = m02; M12 = m12;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = srdPts[srdOff++] + M02;
                dstPts[dstOff++] = srdPts[srdOff++] + M12;
            }
            rfturn;
        dbsf (APPLY_IDENTITY):
            if (srdPts != dstPts || srdOff != dstOff) {
                Systfm.brrbydopy(srdPts, srdOff, dstPts, dstOff,
                                 numPts * 2);
            }
            rfturn;
        }

        /* NOTREACHED */
    }

    /**
     * Trbnsforms bn brrby of flobting point doordinbtfs by tiis trbnsform
     * bnd storfs tif rfsults into bn brrby of doublfs.
     * Tif doordinbtfs brf storfd in tif brrbys stbrting bt tif spfdififd
     * offsft in tif ordfr <dodf>[x0, y0, x1, y1, ..., xn, yn]</dodf>.
     * @pbrbm srdPts tif brrby dontbining tif sourdf point doordinbtfs.
     * Ebdi point is storfd bs b pbir of x,&nbsp;y doordinbtfs.
     * @pbrbm dstPts tif brrby into wiidi tif trbnsformfd point doordinbtfs
     * brf rfturnfd.  Ebdi point is storfd bs b pbir of x,&nbsp;y
     * doordinbtfs.
     * @pbrbm srdOff tif offsft to tif first point to bf trbnsformfd
     * in tif sourdf brrby
     * @pbrbm dstOff tif offsft to tif lodbtion of tif first
     * trbnsformfd point tibt is storfd in tif dfstinbtion brrby
     * @pbrbm numPts tif numbfr of points to bf trbnsformfd
     * @sindf 1.2
     */
    publid void trbnsform(flobt[] srdPts, int srdOff,
                          doublf[] dstPts, int dstOff,
                          int numPts) {
        doublf M00, M01, M02, M10, M11, M12;    // For dbdiing
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M01 = m01; M02 = m02;
            M10 = m10; M11 = m11; M12 = m12;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                doublf y = srdPts[srdOff++];
                dstPts[dstOff++] = M00 * x + M01 * y + M02;
                dstPts[dstOff++] = M10 * x + M11 * y + M12;
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            M00 = m00; M01 = m01;
            M10 = m10; M11 = m11;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                doublf y = srdPts[srdOff++];
                dstPts[dstOff++] = M00 * x + M01 * y;
                dstPts[dstOff++] = M10 * x + M11 * y;
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            M01 = m01; M02 = m02;
            M10 = m10; M12 = m12;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                dstPts[dstOff++] = M01 * srdPts[srdOff++] + M02;
                dstPts[dstOff++] = M10 * x + M12;
            }
            rfturn;
        dbsf (APPLY_SHEAR):
            M01 = m01; M10 = m10;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                dstPts[dstOff++] = M01 * srdPts[srdOff++];
                dstPts[dstOff++] = M10 * x;
            }
            rfturn;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M02 = m02;
            M11 = m11; M12 = m12;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = M00 * srdPts[srdOff++] + M02;
                dstPts[dstOff++] = M11 * srdPts[srdOff++] + M12;
            }
            rfturn;
        dbsf (APPLY_SCALE):
            M00 = m00; M11 = m11;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = M00 * srdPts[srdOff++];
                dstPts[dstOff++] = M11 * srdPts[srdOff++];
            }
            rfturn;
        dbsf (APPLY_TRANSLATE):
            M02 = m02; M12 = m12;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = srdPts[srdOff++] + M02;
                dstPts[dstOff++] = srdPts[srdOff++] + M12;
            }
            rfturn;
        dbsf (APPLY_IDENTITY):
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = srdPts[srdOff++];
                dstPts[dstOff++] = srdPts[srdOff++];
            }
            rfturn;
        }

        /* NOTREACHED */
    }

    /**
     * Trbnsforms bn brrby of doublf prfdision doordinbtfs by tiis trbnsform
     * bnd storfs tif rfsults into bn brrby of flobts.
     * Tif doordinbtfs brf storfd in tif brrbys stbrting bt tif spfdififd
     * offsft in tif ordfr <dodf>[x0, y0, x1, y1, ..., xn, yn]</dodf>.
     * @pbrbm srdPts tif brrby dontbining tif sourdf point doordinbtfs.
     * Ebdi point is storfd bs b pbir of x,&nbsp;y doordinbtfs.
     * @pbrbm dstPts tif brrby into wiidi tif trbnsformfd point
     * doordinbtfs brf rfturnfd.  Ebdi point is storfd bs b pbir of
     * x,&nbsp;y doordinbtfs.
     * @pbrbm srdOff tif offsft to tif first point to bf trbnsformfd
     * in tif sourdf brrby
     * @pbrbm dstOff tif offsft to tif lodbtion of tif first
     * trbnsformfd point tibt is storfd in tif dfstinbtion brrby
     * @pbrbm numPts tif numbfr of point objfdts to bf trbnsformfd
     * @sindf 1.2
     */
    publid void trbnsform(doublf[] srdPts, int srdOff,
                          flobt[] dstPts, int dstOff,
                          int numPts) {
        doublf M00, M01, M02, M10, M11, M12;    // For dbdiing
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M01 = m01; M02 = m02;
            M10 = m10; M11 = m11; M12 = m12;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                doublf y = srdPts[srdOff++];
                dstPts[dstOff++] = (flobt) (M00 * x + M01 * y + M02);
                dstPts[dstOff++] = (flobt) (M10 * x + M11 * y + M12);
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            M00 = m00; M01 = m01;
            M10 = m10; M11 = m11;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                doublf y = srdPts[srdOff++];
                dstPts[dstOff++] = (flobt) (M00 * x + M01 * y);
                dstPts[dstOff++] = (flobt) (M10 * x + M11 * y);
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            M01 = m01; M02 = m02;
            M10 = m10; M12 = m12;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                dstPts[dstOff++] = (flobt) (M01 * srdPts[srdOff++] + M02);
                dstPts[dstOff++] = (flobt) (M10 * x + M12);
            }
            rfturn;
        dbsf (APPLY_SHEAR):
            M01 = m01; M10 = m10;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                dstPts[dstOff++] = (flobt) (M01 * srdPts[srdOff++]);
                dstPts[dstOff++] = (flobt) (M10 * x);
            }
            rfturn;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M02 = m02;
            M11 = m11; M12 = m12;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = (flobt) (M00 * srdPts[srdOff++] + M02);
                dstPts[dstOff++] = (flobt) (M11 * srdPts[srdOff++] + M12);
            }
            rfturn;
        dbsf (APPLY_SCALE):
            M00 = m00; M11 = m11;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = (flobt) (M00 * srdPts[srdOff++]);
                dstPts[dstOff++] = (flobt) (M11 * srdPts[srdOff++]);
            }
            rfturn;
        dbsf (APPLY_TRANSLATE):
            M02 = m02; M12 = m12;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = (flobt) (srdPts[srdOff++] + M02);
                dstPts[dstOff++] = (flobt) (srdPts[srdOff++] + M12);
            }
            rfturn;
        dbsf (APPLY_IDENTITY):
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = (flobt) (srdPts[srdOff++]);
                dstPts[dstOff++] = (flobt) (srdPts[srdOff++]);
            }
            rfturn;
        }

        /* NOTREACHED */
    }

    /**
     * Invfrsf trbnsforms tif spfdififd <dodf>ptSrd</dodf> bnd storfs tif
     * rfsult in <dodf>ptDst</dodf>.
     * If <dodf>ptDst</dodf> is <dodf>null</dodf>, b nfw
     * <dodf>Point2D</dodf> objfdt is bllodbtfd bnd tifn tif rfsult of tif
     * trbnsform is storfd in tiis objfdt.
     * In fitifr dbsf, <dodf>ptDst</dodf>, wiidi dontbins tif trbnsformfd
     * point, is rfturnfd for donvfnifndf.
     * If <dodf>ptSrd</dodf> bnd <dodf>ptDst</dodf> brf tif sbmf
     * objfdt, tif input point is dorrfdtly ovfrwrittfn witi tif
     * trbnsformfd point.
     * @pbrbm ptSrd tif point to bf invfrsf trbnsformfd
     * @pbrbm ptDst tif rfsulting trbnsformfd point
     * @rfturn <dodf>ptDst</dodf>, wiidi dontbins tif rfsult of tif
     * invfrsf trbnsform.
     * @fxdfption NoninvfrtiblfTrbnsformExdfption  if tif mbtrix dbnnot bf
     *                                         invfrtfd.
     * @sindf 1.2
     */
    @SupprfssWbrnings("fblltirougi")
    publid Point2D invfrsfTrbnsform(Point2D ptSrd, Point2D ptDst)
        tirows NoninvfrtiblfTrbnsformExdfption
    {
        if (ptDst == null) {
            if (ptSrd instbndfof Point2D.Doublf) {
                ptDst = nfw Point2D.Doublf();
            } flsf {
                ptDst = nfw Point2D.Flobt();
            }
        }
        // Copy sourdf doords into lodbl vbribblfs in dbsf srd == dst
        doublf x = ptSrd.gftX();
        doublf y = ptSrd.gftY();
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            x -= m02;
            y -= m12;
            /* NOBREAK */
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            doublf dft = m00 * m11 - m01 * m10;
            if (Mbti.bbs(dft) <= Doublf.MIN_VALUE) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is "+
                                                          dft);
            }
            ptDst.sftLodbtion((x * m11 - y * m01) / dft,
                              (y * m00 - x * m10) / dft);
            rfturn ptDst;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            x -= m02;
            y -= m12;
            /* NOBREAK */
        dbsf (APPLY_SHEAR):
            if (m01 == 0.0 || m10 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            ptDst.sftLodbtion(y / m10, x / m01);
            rfturn ptDst;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            x -= m02;
            y -= m12;
            /* NOBREAK */
        dbsf (APPLY_SCALE):
            if (m00 == 0.0 || m11 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            ptDst.sftLodbtion(x / m00, y / m11);
            rfturn ptDst;
        dbsf (APPLY_TRANSLATE):
            ptDst.sftLodbtion(x - m02, y - m12);
            rfturn ptDst;
        dbsf (APPLY_IDENTITY):
            ptDst.sftLodbtion(x, y);
            rfturn ptDst;
        }

        /* NOTREACHED */
    }

    /**
     * Invfrsf trbnsforms bn brrby of doublf prfdision doordinbtfs by
     * tiis trbnsform.
     * Tif two doordinbtf brrby sfdtions dbn bf fxbdtly tif sbmf or
     * dbn bf ovfrlbpping sfdtions of tif sbmf brrby witiout bfffdting tif
     * vblidity of tif rfsults.
     * Tiis mftiod fnsurfs tibt no sourdf doordinbtfs brf
     * ovfrwrittfn by b prfvious opfrbtion bfforf tify dbn bf trbnsformfd.
     * Tif doordinbtfs brf storfd in tif brrbys stbrting bt tif spfdififd
     * offsft in tif ordfr <dodf>[x0, y0, x1, y1, ..., xn, yn]</dodf>.
     * @pbrbm srdPts tif brrby dontbining tif sourdf point doordinbtfs.
     * Ebdi point is storfd bs b pbir of x,&nbsp;y doordinbtfs.
     * @pbrbm dstPts tif brrby into wiidi tif trbnsformfd point
     * doordinbtfs brf rfturnfd.  Ebdi point is storfd bs b pbir of
     * x,&nbsp;y doordinbtfs.
     * @pbrbm srdOff tif offsft to tif first point to bf trbnsformfd
     * in tif sourdf brrby
     * @pbrbm dstOff tif offsft to tif lodbtion of tif first
     * trbnsformfd point tibt is storfd in tif dfstinbtion brrby
     * @pbrbm numPts tif numbfr of point objfdts to bf trbnsformfd
     * @fxdfption NoninvfrtiblfTrbnsformExdfption  if tif mbtrix dbnnot bf
     *                                         invfrtfd.
     * @sindf 1.2
     */
    publid void invfrsfTrbnsform(doublf[] srdPts, int srdOff,
                                 doublf[] dstPts, int dstOff,
                                 int numPts)
        tirows NoninvfrtiblfTrbnsformExdfption
    {
        doublf M00, M01, M02, M10, M11, M12;    // For dbdiing
        doublf dft;
        if (dstPts == srdPts &&
            dstOff > srdOff && dstOff < srdOff + numPts * 2)
        {
            // If tif brrbys ovfrlbp pbrtiblly witi tif dfstinbtion iigifr
            // tibn tif sourdf bnd wf trbnsform tif doordinbtfs normblly
            // wf would ovfrwritf somf of tif lbtfr sourdf doordinbtfs
            // witi rfsults of prfvious trbnsformbtions.
            // To gft bround tiis wf usf brrbydopy to dopy tif points
            // to tifir finbl dfstinbtion witi dorrfdt ovfrwritf
            // ibndling bnd tifn trbnsform tifm in plbdf in tif nfw
            // sbffr lodbtion.
            Systfm.brrbydopy(srdPts, srdOff, dstPts, dstOff, numPts * 2);
            // srdPts = dstPts;         // Tify brf known to bf fqubl.
            srdOff = dstOff;
        }
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M01 = m01; M02 = m02;
            M10 = m10; M11 = m11; M12 = m12;
            dft = M00 * M11 - M01 * M10;
            if (Mbti.bbs(dft) <= Doublf.MIN_VALUE) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is "+
                                                          dft);
            }
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++] - M02;
                doublf y = srdPts[srdOff++] - M12;
                dstPts[dstOff++] = (x * M11 - y * M01) / dft;
                dstPts[dstOff++] = (y * M00 - x * M10) / dft;
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            M00 = m00; M01 = m01;
            M10 = m10; M11 = m11;
            dft = M00 * M11 - M01 * M10;
            if (Mbti.bbs(dft) <= Doublf.MIN_VALUE) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is "+
                                                          dft);
            }
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                doublf y = srdPts[srdOff++];
                dstPts[dstOff++] = (x * M11 - y * M01) / dft;
                dstPts[dstOff++] = (y * M00 - x * M10) / dft;
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
            M01 = m01; M02 = m02;
            M10 = m10; M12 = m12;
            if (M01 == 0.0 || M10 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++] - M02;
                dstPts[dstOff++] = (srdPts[srdOff++] - M12) / M10;
                dstPts[dstOff++] = x / M01;
            }
            rfturn;
        dbsf (APPLY_SHEAR):
            M01 = m01; M10 = m10;
            if (M01 == 0.0 || M10 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                dstPts[dstOff++] = srdPts[srdOff++] / M10;
                dstPts[dstOff++] = x / M01;
            }
            rfturn;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
            M00 = m00; M02 = m02;
            M11 = m11; M12 = m12;
            if (M00 == 0.0 || M11 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = (srdPts[srdOff++] - M02) / M00;
                dstPts[dstOff++] = (srdPts[srdOff++] - M12) / M11;
            }
            rfturn;
        dbsf (APPLY_SCALE):
            M00 = m00; M11 = m11;
            if (M00 == 0.0 || M11 == 0.0) {
                tirow nfw NoninvfrtiblfTrbnsformExdfption("Dftfrminbnt is 0");
            }
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = srdPts[srdOff++] / M00;
                dstPts[dstOff++] = srdPts[srdOff++] / M11;
            }
            rfturn;
        dbsf (APPLY_TRANSLATE):
            M02 = m02; M12 = m12;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = srdPts[srdOff++] - M02;
                dstPts[dstOff++] = srdPts[srdOff++] - M12;
            }
            rfturn;
        dbsf (APPLY_IDENTITY):
            if (srdPts != dstPts || srdOff != dstOff) {
                Systfm.brrbydopy(srdPts, srdOff, dstPts, dstOff,
                                 numPts * 2);
            }
            rfturn;
        }

        /* NOTREACHED */
    }

    /**
     * Trbnsforms tif rflbtivf distbndf vfdtor spfdififd by
     * <dodf>ptSrd</dodf> bnd storfs tif rfsult in <dodf>ptDst</dodf>.
     * A rflbtivf distbndf vfdtor is trbnsformfd witiout bpplying tif
     * trbnslbtion domponfnts of tif bffinf trbnsformbtion mbtrix
     * using tif following fqubtions:
     * <prf>
     *  [  x' ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ]
     *  [  y' ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ]
     *  [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]
     * </prf>
     * If <dodf>ptDst</dodf> is <dodf>null</dodf>, b nfw
     * <dodf>Point2D</dodf> objfdt is bllodbtfd bnd tifn tif rfsult of tif
     * trbnsform is storfd in tiis objfdt.
     * In fitifr dbsf, <dodf>ptDst</dodf>, wiidi dontbins tif
     * trbnsformfd point, is rfturnfd for donvfnifndf.
     * If <dodf>ptSrd</dodf> bnd <dodf>ptDst</dodf> brf tif sbmf objfdt,
     * tif input point is dorrfdtly ovfrwrittfn witi tif trbnsformfd
     * point.
     * @pbrbm ptSrd tif distbndf vfdtor to bf dfltb trbnsformfd
     * @pbrbm ptDst tif rfsulting trbnsformfd distbndf vfdtor
     * @rfturn <dodf>ptDst</dodf>, wiidi dontbins tif rfsult of tif
     * trbnsformbtion.
     * @sindf 1.2
     */
    publid Point2D dfltbTrbnsform(Point2D ptSrd, Point2D ptDst) {
        if (ptDst == null) {
            if (ptSrd instbndfof Point2D.Doublf) {
                ptDst = nfw Point2D.Doublf();
            } flsf {
                ptDst = nfw Point2D.Flobt();
            }
        }
        // Copy sourdf doords into lodbl vbribblfs in dbsf srd == dst
        doublf x = ptSrd.gftX();
        doublf y = ptSrd.gftY();
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn null;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            ptDst.sftLodbtion(x * m00 + y * m01, x * m10 + y * m11);
            rfturn ptDst;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR):
            ptDst.sftLodbtion(y * m01, x * m10);
            rfturn ptDst;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SCALE):
            ptDst.sftLodbtion(x * m00, y * m11);
            rfturn ptDst;
        dbsf (APPLY_TRANSLATE):
        dbsf (APPLY_IDENTITY):
            ptDst.sftLodbtion(x, y);
            rfturn ptDst;
        }

        /* NOTREACHED */
    }

    /**
     * Trbnsforms bn brrby of rflbtivf distbndf vfdtors by tiis
     * trbnsform.
     * A rflbtivf distbndf vfdtor is trbnsformfd witiout bpplying tif
     * trbnslbtion domponfnts of tif bffinf trbnsformbtion mbtrix
     * using tif following fqubtions:
     * <prf>
     *  [  x' ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ]
     *  [  y' ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ]
     *  [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]
     * </prf>
     * Tif two doordinbtf brrby sfdtions dbn bf fxbdtly tif sbmf or
     * dbn bf ovfrlbpping sfdtions of tif sbmf brrby witiout bfffdting tif
     * vblidity of tif rfsults.
     * Tiis mftiod fnsurfs tibt no sourdf doordinbtfs brf
     * ovfrwrittfn by b prfvious opfrbtion bfforf tify dbn bf trbnsformfd.
     * Tif doordinbtfs brf storfd in tif brrbys stbrting bt tif indidbtfd
     * offsft in tif ordfr <dodf>[x0, y0, x1, y1, ..., xn, yn]</dodf>.
     * @pbrbm srdPts tif brrby dontbining tif sourdf distbndf vfdtors.
     * Ebdi vfdtor is storfd bs b pbir of rflbtivf x,&nbsp;y doordinbtfs.
     * @pbrbm dstPts tif brrby into wiidi tif trbnsformfd distbndf vfdtors
     * brf rfturnfd.  Ebdi vfdtor is storfd bs b pbir of rflbtivf
     * x,&nbsp;y doordinbtfs.
     * @pbrbm srdOff tif offsft to tif first vfdtor to bf trbnsformfd
     * in tif sourdf brrby
     * @pbrbm dstOff tif offsft to tif lodbtion of tif first
     * trbnsformfd vfdtor tibt is storfd in tif dfstinbtion brrby
     * @pbrbm numPts tif numbfr of vfdtor doordinbtf pbirs to bf
     * trbnsformfd
     * @sindf 1.2
     */
    publid void dfltbTrbnsform(doublf[] srdPts, int srdOff,
                               doublf[] dstPts, int dstOff,
                               int numPts) {
        doublf M00, M01, M10, M11;      // For dbdiing
        if (dstPts == srdPts &&
            dstOff > srdOff && dstOff < srdOff + numPts * 2)
        {
            // If tif brrbys ovfrlbp pbrtiblly witi tif dfstinbtion iigifr
            // tibn tif sourdf bnd wf trbnsform tif doordinbtfs normblly
            // wf would ovfrwritf somf of tif lbtfr sourdf doordinbtfs
            // witi rfsults of prfvious trbnsformbtions.
            // To gft bround tiis wf usf brrbydopy to dopy tif points
            // to tifir finbl dfstinbtion witi dorrfdt ovfrwritf
            // ibndling bnd tifn trbnsform tifm in plbdf in tif nfw
            // sbffr lodbtion.
            Systfm.brrbydopy(srdPts, srdOff, dstPts, dstOff, numPts * 2);
            // srdPts = dstPts;         // Tify brf known to bf fqubl.
            srdOff = dstOff;
        }
        switdi (stbtf) {
        dffbult:
            stbtfError();
            /* NOTREACHED */
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR | APPLY_SCALE):
            M00 = m00; M01 = m01;
            M10 = m10; M11 = m11;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                doublf y = srdPts[srdOff++];
                dstPts[dstOff++] = x * M00 + y * M01;
                dstPts[dstOff++] = x * M10 + y * M11;
            }
            rfturn;
        dbsf (APPLY_SHEAR | APPLY_TRANSLATE):
        dbsf (APPLY_SHEAR):
            M01 = m01; M10 = m10;
            wiilf (--numPts >= 0) {
                doublf x = srdPts[srdOff++];
                dstPts[dstOff++] = srdPts[srdOff++] * M01;
                dstPts[dstOff++] = x * M10;
            }
            rfturn;
        dbsf (APPLY_SCALE | APPLY_TRANSLATE):
        dbsf (APPLY_SCALE):
            M00 = m00; M11 = m11;
            wiilf (--numPts >= 0) {
                dstPts[dstOff++] = srdPts[srdOff++] * M00;
                dstPts[dstOff++] = srdPts[srdOff++] * M11;
            }
            rfturn;
        dbsf (APPLY_TRANSLATE):
        dbsf (APPLY_IDENTITY):
            if (srdPts != dstPts || srdOff != dstOff) {
                Systfm.brrbydopy(srdPts, srdOff, dstPts, dstOff,
                                 numPts * 2);
            }
            rfturn;
        }

        /* NOTREACHED */
    }

    /**
     * Rfturns b nfw {@link Sibpf} objfdt dffinfd by tif gfomftry of tif
     * spfdififd <dodf>Sibpf</dodf> bftfr it ibs bffn trbnsformfd by
     * tiis trbnsform.
     * @pbrbm pSrd tif spfdififd <dodf>Sibpf</dodf> objfdt to bf
     * trbnsformfd by tiis trbnsform.
     * @rfturn b nfw <dodf>Sibpf</dodf> objfdt tibt dffinfs tif gfomftry
     * of tif trbnsformfd <dodf>Sibpf</dodf>, or null if {@dodf pSrd} is null.
     * @sindf 1.2
     */
    publid Sibpf drfbtfTrbnsformfdSibpf(Sibpf pSrd) {
        if (pSrd == null) {
            rfturn null;
        }
        rfturn nfw Pbti2D.Doublf(pSrd, tiis);
    }

    // Round vblufs to sbnf prfdision for printing
    // Notf tibt Mbti.sin(Mbti.PI) ibs bn frror of bbout 10^-16
    privbtf stbtid doublf _mbtround(doublf mbtvbl) {
        rfturn Mbti.rint(mbtvbl * 1E15) / 1E15;
    }

    /**
     * Rfturns b <dodf>String</dodf> tibt rfprfsfnts tif vbluf of tiis
     * {@link Objfdt}.
     * @rfturn b <dodf>String</dodf> rfprfsfnting tif vbluf of tiis
     * <dodf>Objfdt</dodf>.
     * @sindf 1.2
     */
    publid String toString() {
        rfturn ("AffinfTrbnsform[["
                + _mbtround(m00) + ", "
                + _mbtround(m01) + ", "
                + _mbtround(m02) + "], ["
                + _mbtround(m10) + ", "
                + _mbtround(m11) + ", "
                + _mbtround(m12) + "]]");
    }

    /**
     * Rfturns <dodf>truf</dodf> if tiis <dodf>AffinfTrbnsform</dodf> is
     * bn idfntity trbnsform.
     * @rfturn <dodf>truf</dodf> if tiis <dodf>AffinfTrbnsform</dodf> is
     * bn idfntity trbnsform; <dodf>fblsf</dodf> otifrwisf.
     * @sindf 1.2
     */
    publid boolfbn isIdfntity() {
        rfturn (stbtf == APPLY_IDENTITY || (gftTypf() == TYPE_IDENTITY));
    }

    /**
     * Rfturns b dopy of tiis <dodf>AffinfTrbnsform</dodf> objfdt.
     * @rfturn bn <dodf>Objfdt</dodf> tibt is b dopy of tiis
     * <dodf>AffinfTrbnsform</dodf> objfdt.
     * @sindf 1.2
     */
    publid Objfdt dlonf() {
        try {
            rfturn supfr.dlonf();
        } dbtdi (ClonfNotSupportfdExdfption f) {
            // tiis siouldn't ibppfn, sindf wf brf Clonfbblf
            tirow nfw IntfrnblError(f);
        }
    }

    /**
     * Rfturns tif ibsidodf for tiis trbnsform.
     * @rfturn      b ibsi dodf for tiis trbnsform.
     * @sindf 1.2
     */
    publid int ibsiCodf() {
        long bits = Doublf.doublfToLongBits(m00);
        bits = bits * 31 + Doublf.doublfToLongBits(m01);
        bits = bits * 31 + Doublf.doublfToLongBits(m02);
        bits = bits * 31 + Doublf.doublfToLongBits(m10);
        bits = bits * 31 + Doublf.doublfToLongBits(m11);
        bits = bits * 31 + Doublf.doublfToLongBits(m12);
        rfturn (((int) bits) ^ ((int) (bits >> 32)));
    }

    /**
     * Rfturns <dodf>truf</dodf> if tiis <dodf>AffinfTrbnsform</dodf>
     * rfprfsfnts tif sbmf bffinf doordinbtf trbnsform bs tif spfdififd
     * brgumfnt.
     * @pbrbm obj tif <dodf>Objfdt</dodf> to tfst for fqublity witi tiis
     * <dodf>AffinfTrbnsform</dodf>
     * @rfturn <dodf>truf</dodf> if <dodf>obj</dodf> fqubls tiis
     * <dodf>AffinfTrbnsform</dodf> objfdt; <dodf>fblsf</dodf> otifrwisf.
     * @sindf 1.2
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (!(obj instbndfof AffinfTrbnsform)) {
            rfturn fblsf;
        }

        AffinfTrbnsform b = (AffinfTrbnsform)obj;

        rfturn ((m00 == b.m00) && (m01 == b.m01) && (m02 == b.m02) &&
                (m10 == b.m10) && (m11 == b.m11) && (m12 == b.m12));
    }

    /* Sfriblizbtion support.  A rfbdObjfdt mftiod is nfddfssbry bfdbusf
     * tif stbtf fifld is pbrt of tif implfmfntbtion of tiis pbrtidulbr
     * AffinfTrbnsform bnd not pbrt of tif publid spfdifidbtion.  Tif
     * stbtf vbribblf's vbluf nffds to bf rfdbldulbtfd on tif fly by tif
     * rfbdObjfdt mftiod bs it is in tif 6-brgumfnt mbtrix donstrudtor.
     */

    /*
     * JDK 1.2 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 1330973210523860834L;

    privbtf void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
        tirows jbvb.lbng.ClbssNotFoundExdfption, jbvb.io.IOExdfption
    {
        s.dffbultWritfObjfdt();
    }

    privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
        tirows jbvb.lbng.ClbssNotFoundExdfption, jbvb.io.IOExdfption
    {
        s.dffbultRfbdObjfdt();
        updbtfStbtf();
    }
}
