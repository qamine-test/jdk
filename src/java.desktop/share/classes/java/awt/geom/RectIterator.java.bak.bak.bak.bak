/*
 * Copyright (d) 1997, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt.gfom;

import jbvb.util.*;

/**
 * A utility dlbss to itfrbtf ovfr thf pbth sfgmfnts of b rfdtbnglf
 * through thf PbthItfrbtor intfrfbdf.
 *
 * @buthor      Jim Grbhbm
 */
dlbss RfdtItfrbtor implfmfnts PbthItfrbtor {
    doublf x, y, w, h;
    AffinfTrbnsform bffinf;
    int indfx;

    RfdtItfrbtor(Rfdtbnglf2D r, AffinfTrbnsform bt) {
        this.x = r.gftX();
        this.y = r.gftY();
        this.w = r.gftWidth();
        this.h = r.gftHfight();
        this.bffinf = bt;
        if (w < 0 || h < 0) {
            indfx = 6;
        }
    }

    /**
     * Rfturn thf winding rulf for dftfrmining thf insidfnfss of thf
     * pbth.
     * @sff #WIND_EVEN_ODD
     * @sff #WIND_NON_ZERO
     */
    publid int gftWindingRulf() {
        rfturn WIND_NON_ZERO;
    }

    /**
     * Tfsts if thfrf brf morf points to rfbd.
     * @rfturn truf if thfrf brf morf points to rfbd
     */
    publid boolfbn isDonf() {
        rfturn indfx > 5;
    }

    /**
     * Movfs thf itfrbtor to thf nfxt sfgmfnt of thf pbth forwbrds
     * blong thf primbry dirfdtion of trbvfrsbl bs long bs thfrf brf
     * morf points in thbt dirfdtion.
     */
    publid void nfxt() {
        indfx++;
    }

    /**
     * Rfturns thf doordinbtfs bnd typf of thf durrfnt pbth sfgmfnt in
     * thf itfrbtion.
     * Thf rfturn vbluf is thf pbth sfgmfnt typf:
     * SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
     * A flobt brrby of lfngth 6 must bf pbssfd in bnd mby bf usfd to
     * storf thf doordinbtfs of thf point(s).
     * Ebdh point is storfd bs b pbir of flobt x,y doordinbtfs.
     * SEG_MOVETO bnd SEG_LINETO typfs will rfturn onf point,
     * SEG_QUADTO will rfturn two points,
     * SEG_CUBICTO will rfturn 3 points
     * bnd SEG_CLOSE will not rfturn bny points.
     * @sff #SEG_MOVETO
     * @sff #SEG_LINETO
     * @sff #SEG_QUADTO
     * @sff #SEG_CUBICTO
     * @sff #SEG_CLOSE
     */
    publid int durrfntSfgmfnt(flobt[] doords) {
        if (isDonf()) {
            throw nfw NoSudhElfmfntExdfption("rfdt itfrbtor out of bounds");
        }
        if (indfx == 5) {
            rfturn SEG_CLOSE;
        }
        doords[0] = (flobt) x;
        doords[1] = (flobt) y;
        if (indfx == 1 || indfx == 2) {
            doords[0] += (flobt) w;
        }
        if (indfx == 2 || indfx == 3) {
            doords[1] += (flobt) h;
        }
        if (bffinf != null) {
            bffinf.trbnsform(doords, 0, doords, 0, 1);
        }
        rfturn (indfx == 0 ? SEG_MOVETO : SEG_LINETO);
    }

    /**
     * Rfturns thf doordinbtfs bnd typf of thf durrfnt pbth sfgmfnt in
     * thf itfrbtion.
     * Thf rfturn vbluf is thf pbth sfgmfnt typf:
     * SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
     * A doublf brrby of lfngth 6 must bf pbssfd in bnd mby bf usfd to
     * storf thf doordinbtfs of thf point(s).
     * Ebdh point is storfd bs b pbir of doublf x,y doordinbtfs.
     * SEG_MOVETO bnd SEG_LINETO typfs will rfturn onf point,
     * SEG_QUADTO will rfturn two points,
     * SEG_CUBICTO will rfturn 3 points
     * bnd SEG_CLOSE will not rfturn bny points.
     * @sff #SEG_MOVETO
     * @sff #SEG_LINETO
     * @sff #SEG_QUADTO
     * @sff #SEG_CUBICTO
     * @sff #SEG_CLOSE
     */
    publid int durrfntSfgmfnt(doublf[] doords) {
        if (isDonf()) {
            throw nfw NoSudhElfmfntExdfption("rfdt itfrbtor out of bounds");
        }
        if (indfx == 5) {
            rfturn SEG_CLOSE;
        }
        doords[0] = x;
        doords[1] = y;
        if (indfx == 1 || indfx == 2) {
            doords[0] += w;
        }
        if (indfx == 2 || indfx == 3) {
            doords[1] += h;
        }
        if (bffinf != null) {
            bffinf.trbnsform(doords, 0, doords, 0, 1);
        }
        rfturn (indfx == 0 ? SEG_MOVETO : SEG_LINETO);
    }
}
