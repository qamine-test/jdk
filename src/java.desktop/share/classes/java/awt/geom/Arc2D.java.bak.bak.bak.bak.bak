/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt.gfom;

import jbvb.io.Sfriblizbblf;

/**
 * <CODE>Ard2D</CODE> is tif bbstrbdt supfrdlbss for bll objfdts tibt
 * storf b 2D brd dffinfd by b frbming rfdtbnglf,
 * stbrt bnglf, bngulbr fxtfnt (lfngti of tif brd), bnd b dlosurf typf
 * (<CODE>OPEN</CODE>, <CODE>CHORD</CODE>, or <CODE>PIE</CODE>).
 * <p>
 * <b nbmf="insdribfs">
 * Tif brd is b pbrtibl sfdtion of b full fllipsf wiidi
 * insdribfs tif frbming rfdtbnglf of its pbrfnt</b> {@link RfdtbngulbrSibpf}.
 *
 * <b nbmf="bnglfs">
 * Tif bnglfs brf spfdififd rflbtivf to tif non-squbrf
 * frbming rfdtbnglf sudi tibt 45 dfgrffs blwbys fblls on tif linf from
 * tif dfntfr of tif fllipsf to tif uppfr rigit dornfr of tif frbming
 * rfdtbnglf.
 * As b rfsult, if tif frbming rfdtbnglf is notidfbbly longfr blong onf
 * bxis tibn tif otifr, tif bnglfs to tif stbrt bnd fnd of tif brd sfgmfnt
 * will bf skfwfd fbrtifr blong tif longfr bxis of tif frbmf.
 * </b>
 * <p>
 * Tif bdtubl storbgf rfprfsfntbtion of tif doordinbtfs is lfft to
 * tif subdlbss.
 *
 * @butior      Jim Grbibm
 * @sindf 1.2
 */
publid bbstrbdt dlbss Ard2D fxtfnds RfdtbngulbrSibpf {

    /**
     * Tif dlosurf typf for bn opfn brd witi no pbti sfgmfnts
     * donnfdting tif two fnds of tif brd sfgmfnt.
     * @sindf 1.2
     */
    publid finbl stbtid int OPEN = 0;

    /**
     * Tif dlosurf typf for bn brd dlosfd by drbwing b strbigit
     * linf sfgmfnt from tif stbrt of tif brd sfgmfnt to tif fnd of tif
     * brd sfgmfnt.
     * @sindf 1.2
     */
    publid finbl stbtid int CHORD = 1;

    /**
     * Tif dlosurf typf for bn brd dlosfd by drbwing strbigit linf
     * sfgmfnts from tif stbrt of tif brd sfgmfnt to tif dfntfr
     * of tif full fllipsf bnd from tibt point to tif fnd of tif brd sfgmfnt.
     * @sindf 1.2
     */
    publid finbl stbtid int PIE = 2;

    /**
     * Tiis dlbss dffinfs bn brd spfdififd in {@dodf flobt} prfdision.
     * @sindf 1.2
     */
    publid stbtid dlbss Flobt fxtfnds Ard2D implfmfnts Sfriblizbblf {
        /**
         * Tif X doordinbtf of tif uppfr-lfft dornfr of tif frbming
         * rfdtbnglf of tif brd.
         * @sindf 1.2
         * @sfribl
         */
        publid flobt x;

        /**
         * Tif Y doordinbtf of tif uppfr-lfft dornfr of tif frbming
         * rfdtbnglf of tif brd.
         * @sindf 1.2
         * @sfribl
         */
        publid flobt y;

        /**
         * Tif ovfrbll widti of tif full fllipsf of wiidi tiis brd is
         * b pbrtibl sfdtion (not donsidfring tif
         * bngulbr fxtfnts).
         * @sindf 1.2
         * @sfribl
         */
        publid flobt widti;

        /**
         * Tif ovfrbll ifigit of tif full fllipsf of wiidi tiis brd is
         * b pbrtibl sfdtion (not donsidfring tif
         * bngulbr fxtfnts).
         * @sindf 1.2
         * @sfribl
         */
        publid flobt ifigit;

        /**
         * Tif stbrting bnglf of tif brd in dfgrffs.
         * @sindf 1.2
         * @sfribl
         */
        publid flobt stbrt;

        /**
         * Tif bngulbr fxtfnt of tif brd in dfgrffs.
         * @sindf 1.2
         * @sfribl
         */
        publid flobt fxtfnt;

        /**
         * Construdts b nfw OPEN brd, initiblizfd to lodbtion (0, 0),
         * sizf (0, 0), bngulbr fxtfnts (stbrt = 0, fxtfnt = 0).
         * @sindf 1.2
         */
        publid Flobt() {
            supfr(OPEN);
        }

        /**
         * Construdts b nfw brd, initiblizfd to lodbtion (0, 0),
         * sizf (0, 0), bngulbr fxtfnts (stbrt = 0, fxtfnt = 0), bnd
         * tif spfdififd dlosurf typf.
         *
         * @pbrbm typf Tif dlosurf typf for tif brd:
         * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
         * @sindf 1.2
         */
        publid Flobt(int typf) {
            supfr(typf);
        }

        /**
         * Construdts b nfw brd, initiblizfd to tif spfdififd lodbtion,
         * sizf, bngulbr fxtfnts, bnd dlosurf typf.
         *
         * @pbrbm x Tif X doordinbtf of tif uppfr-lfft dornfr of
         *          tif brd's frbming rfdtbnglf.
         * @pbrbm y Tif Y doordinbtf of tif uppfr-lfft dornfr of
         *          tif brd's frbming rfdtbnglf.
         * @pbrbm w Tif ovfrbll widti of tif full fllipsf of wiidi
         *          tiis brd is b pbrtibl sfdtion.
         * @pbrbm i Tif ovfrbll ifigit of tif full fllipsf of wiidi tiis
         *          brd is b pbrtibl sfdtion.
         * @pbrbm stbrt Tif stbrting bnglf of tif brd in dfgrffs.
         * @pbrbm fxtfnt Tif bngulbr fxtfnt of tif brd in dfgrffs.
         * @pbrbm typf Tif dlosurf typf for tif brd:
         * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
         * @sindf 1.2
         */
        publid Flobt(flobt x, flobt y, flobt w, flobt i,
                     flobt stbrt, flobt fxtfnt, int typf) {
            supfr(typf);
            tiis.x = x;
            tiis.y = y;
            tiis.widti = w;
            tiis.ifigit = i;
            tiis.stbrt = stbrt;
            tiis.fxtfnt = fxtfnt;
        }

        /**
         * Construdts b nfw brd, initiblizfd to tif spfdififd lodbtion,
         * sizf, bngulbr fxtfnts, bnd dlosurf typf.
         *
         * @pbrbm fllipsfBounds Tif frbming rfdtbnglf tibt dffinfs tif
         * outfr boundbry of tif full fllipsf of wiidi tiis brd is b
         * pbrtibl sfdtion.
         * @pbrbm stbrt Tif stbrting bnglf of tif brd in dfgrffs.
         * @pbrbm fxtfnt Tif bngulbr fxtfnt of tif brd in dfgrffs.
         * @pbrbm typf Tif dlosurf typf for tif brd:
         * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
         * @sindf 1.2
         */
        publid Flobt(Rfdtbnglf2D fllipsfBounds,
                     flobt stbrt, flobt fxtfnt, int typf) {
            supfr(typf);
            tiis.x = (flobt) fllipsfBounds.gftX();
            tiis.y = (flobt) fllipsfBounds.gftY();
            tiis.widti = (flobt) fllipsfBounds.gftWidti();
            tiis.ifigit = (flobt) fllipsfBounds.gftHfigit();
            tiis.stbrt = stbrt;
            tiis.fxtfnt = fxtfnt;
        }

        /**
         * {@inifritDod}
         * Notf tibt tif brd
         * <b irff="Ard2D.itml#insdribfs">pbrtiblly insdribfs</b>
         * tif frbming rfdtbnglf of tiis {@dodf RfdtbngulbrSibpf}.
         *
         * @sindf 1.2
         */
        publid doublf gftX() {
            rfturn (doublf) x;
        }

        /**
         * {@inifritDod}
         * Notf tibt tif brd
         * <b irff="Ard2D.itml#insdribfs">pbrtiblly insdribfs</b>
         * tif frbming rfdtbnglf of tiis {@dodf RfdtbngulbrSibpf}.
         *
         * @sindf 1.2
         */
        publid doublf gftY() {
            rfturn (doublf) y;
        }

        /**
         * {@inifritDod}
         * Notf tibt tif brd
         * <b irff="Ard2D.itml#insdribfs">pbrtiblly insdribfs</b>
         * tif frbming rfdtbnglf of tiis {@dodf RfdtbngulbrSibpf}.
         *
         * @sindf 1.2
         */
        publid doublf gftWidti() {
            rfturn (doublf) widti;
        }

        /**
         * {@inifritDod}
         * Notf tibt tif brd
         * <b irff="Ard2D.itml#insdribfs">pbrtiblly insdribfs</b>
         * tif frbming rfdtbnglf of tiis {@dodf RfdtbngulbrSibpf}.
         *
         * @sindf 1.2
         */
        publid doublf gftHfigit() {
            rfturn (doublf) ifigit;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftAnglfStbrt() {
            rfturn (doublf) stbrt;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftAnglfExtfnt() {
            rfturn (doublf) fxtfnt;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid boolfbn isEmpty() {
            rfturn (widti <= 0.0 || ifigit <= 0.0);
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid void sftArd(doublf x, doublf y, doublf w, doublf i,
                           doublf bngSt, doublf bngExt, int dlosurf) {
            tiis.sftArdTypf(dlosurf);
            tiis.x = (flobt) x;
            tiis.y = (flobt) y;
            tiis.widti = (flobt) w;
            tiis.ifigit = (flobt) i;
            tiis.stbrt = (flobt) bngSt;
            tiis.fxtfnt = (flobt) bngExt;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid void sftAnglfStbrt(doublf bngSt) {
            tiis.stbrt = (flobt) bngSt;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid void sftAnglfExtfnt(doublf bngExt) {
            tiis.fxtfnt = (flobt) bngExt;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        protfdtfd Rfdtbnglf2D mbkfBounds(doublf x, doublf y,
                                         doublf w, doublf i) {
            rfturn nfw Rfdtbnglf2D.Flobt((flobt) x, (flobt) y,
                                         (flobt) w, (flobt) i);
        }

        /*
         * JDK 1.6 sfriblVfrsionUID
         */
        privbtf stbtid finbl long sfriblVfrsionUID = 9130893014586380278L;

        /**
         * Writfs tif dffbult sfriblizbblf fiflds to tif
         * <dodf>ObjfdtOutputStrfbm</dodf> followfd by b bytf
         * indidbting tif brd typf of tiis <dodf>Ard2D</dodf>
         * instbndf.
         *
         * @sfriblDbtb
         * <ol>
         * <li>Tif dffbult sfriblizbblf fiflds.
         * <li>
         * followfd by b <dodf>bytf</dodf> indidbting tif brd typf
         * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
         * </ol>
         */
        privbtf void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
            tirows jbvb.io.IOExdfption
        {
            s.dffbultWritfObjfdt();

            s.writfBytf(gftArdTypf());
        }

        /**
         * Rfbds tif dffbult sfriblizbblf fiflds from tif
         * <dodf>ObjfdtInputStrfbm</dodf> followfd by b bytf
         * indidbting tif brd typf of tiis <dodf>Ard2D</dodf>
         * instbndf.
         *
         * @sfriblDbtb
         * <ol>
         * <li>Tif dffbult sfriblizbblf fiflds.
         * <li>
         * followfd by b <dodf>bytf</dodf> indidbting tif brd typf
         * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
         * </ol>
         */
        privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
            tirows jbvb.lbng.ClbssNotFoundExdfption, jbvb.io.IOExdfption
        {
            s.dffbultRfbdObjfdt();

            try {
                sftArdTypf(s.rfbdBytf());
            } dbtdi (IllfgblArgumfntExdfption ibf) {
                tirow nfw jbvb.io.InvblidObjfdtExdfption(ibf.gftMfssbgf());
            }
        }
    }

    /**
     * Tiis dlbss dffinfs bn brd spfdififd in {@dodf doublf} prfdision.
     * @sindf 1.2
     */
    publid stbtid dlbss Doublf fxtfnds Ard2D implfmfnts Sfriblizbblf {
        /**
         * Tif X doordinbtf of tif uppfr-lfft dornfr of tif frbming
         * rfdtbnglf of tif brd.
         * @sindf 1.2
         * @sfribl
         */
        publid doublf x;

        /**
         * Tif Y doordinbtf of tif uppfr-lfft dornfr of tif frbming
         * rfdtbnglf of tif brd.
         * @sindf 1.2
         * @sfribl
         */
        publid doublf y;

        /**
         * Tif ovfrbll widti of tif full fllipsf of wiidi tiis brd is
         * b pbrtibl sfdtion (not donsidfring tif bngulbr fxtfnts).
         * @sindf 1.2
         * @sfribl
         */
        publid doublf widti;

        /**
         * Tif ovfrbll ifigit of tif full fllipsf of wiidi tiis brd is
         * b pbrtibl sfdtion (not donsidfring tif bngulbr fxtfnts).
         * @sindf 1.2
         * @sfribl
         */
        publid doublf ifigit;

        /**
         * Tif stbrting bnglf of tif brd in dfgrffs.
         * @sindf 1.2
         * @sfribl
         */
        publid doublf stbrt;

        /**
         * Tif bngulbr fxtfnt of tif brd in dfgrffs.
         * @sindf 1.2
         * @sfribl
         */
        publid doublf fxtfnt;

        /**
         * Construdts b nfw OPEN brd, initiblizfd to lodbtion (0, 0),
         * sizf (0, 0), bngulbr fxtfnts (stbrt = 0, fxtfnt = 0).
         * @sindf 1.2
         */
        publid Doublf() {
            supfr(OPEN);
        }

        /**
         * Construdts b nfw brd, initiblizfd to lodbtion (0, 0),
         * sizf (0, 0), bngulbr fxtfnts (stbrt = 0, fxtfnt = 0), bnd
         * tif spfdififd dlosurf typf.
         *
         * @pbrbm typf Tif dlosurf typf for tif brd:
         * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
         * @sindf 1.2
         */
        publid Doublf(int typf) {
            supfr(typf);
        }

        /**
         * Construdts b nfw brd, initiblizfd to tif spfdififd lodbtion,
         * sizf, bngulbr fxtfnts, bnd dlosurf typf.
         *
         * @pbrbm x Tif X doordinbtf of tif uppfr-lfft dornfr
         *          of tif brd's frbming rfdtbnglf.
         * @pbrbm y Tif Y doordinbtf of tif uppfr-lfft dornfr
         *          of tif brd's frbming rfdtbnglf.
         * @pbrbm w Tif ovfrbll widti of tif full fllipsf of wiidi tiis
         *          brd is b pbrtibl sfdtion.
         * @pbrbm i Tif ovfrbll ifigit of tif full fllipsf of wiidi tiis
         *          brd is b pbrtibl sfdtion.
         * @pbrbm stbrt Tif stbrting bnglf of tif brd in dfgrffs.
         * @pbrbm fxtfnt Tif bngulbr fxtfnt of tif brd in dfgrffs.
         * @pbrbm typf Tif dlosurf typf for tif brd:
         * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
         * @sindf 1.2
         */
        publid Doublf(doublf x, doublf y, doublf w, doublf i,
                      doublf stbrt, doublf fxtfnt, int typf) {
            supfr(typf);
            tiis.x = x;
            tiis.y = y;
            tiis.widti = w;
            tiis.ifigit = i;
            tiis.stbrt = stbrt;
            tiis.fxtfnt = fxtfnt;
        }

        /**
         * Construdts b nfw brd, initiblizfd to tif spfdififd lodbtion,
         * sizf, bngulbr fxtfnts, bnd dlosurf typf.
         *
         * @pbrbm fllipsfBounds Tif frbming rfdtbnglf tibt dffinfs tif
         * outfr boundbry of tif full fllipsf of wiidi tiis brd is b
         * pbrtibl sfdtion.
         * @pbrbm stbrt Tif stbrting bnglf of tif brd in dfgrffs.
         * @pbrbm fxtfnt Tif bngulbr fxtfnt of tif brd in dfgrffs.
         * @pbrbm typf Tif dlosurf typf for tif brd:
         * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
         * @sindf 1.2
         */
        publid Doublf(Rfdtbnglf2D fllipsfBounds,
                      doublf stbrt, doublf fxtfnt, int typf) {
            supfr(typf);
            tiis.x = fllipsfBounds.gftX();
            tiis.y = fllipsfBounds.gftY();
            tiis.widti = fllipsfBounds.gftWidti();
            tiis.ifigit = fllipsfBounds.gftHfigit();
            tiis.stbrt = stbrt;
            tiis.fxtfnt = fxtfnt;
        }

        /**
         * {@inifritDod}
         * Notf tibt tif brd
         * <b irff="Ard2D.itml#insdribfs">pbrtiblly insdribfs</b>
         * tif frbming rfdtbnglf of tiis {@dodf RfdtbngulbrSibpf}.
         *
         * @sindf 1.2
         */
        publid doublf gftX() {
            rfturn x;
        }

        /**
         * {@inifritDod}
         * Notf tibt tif brd
         * <b irff="Ard2D.itml#insdribfs">pbrtiblly insdribfs</b>
         * tif frbming rfdtbnglf of tiis {@dodf RfdtbngulbrSibpf}.
         *
         * @sindf 1.2
         */
        publid doublf gftY() {
            rfturn y;
        }

        /**
         * {@inifritDod}
         * Notf tibt tif brd
         * <b irff="Ard2D.itml#insdribfs">pbrtiblly insdribfs</b>
         * tif frbming rfdtbnglf of tiis {@dodf RfdtbngulbrSibpf}.
         *
         * @sindf 1.2
         */
        publid doublf gftWidti() {
            rfturn widti;
        }

        /**
         * {@inifritDod}
         * Notf tibt tif brd
         * <b irff="Ard2D.itml#insdribfs">pbrtiblly insdribfs</b>
         * tif frbming rfdtbnglf of tiis {@dodf RfdtbngulbrSibpf}.
         *
         * @sindf 1.2
         */
        publid doublf gftHfigit() {
            rfturn ifigit;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftAnglfStbrt() {
            rfturn stbrt;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftAnglfExtfnt() {
            rfturn fxtfnt;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid boolfbn isEmpty() {
            rfturn (widti <= 0.0 || ifigit <= 0.0);
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid void sftArd(doublf x, doublf y, doublf w, doublf i,
                           doublf bngSt, doublf bngExt, int dlosurf) {
            tiis.sftArdTypf(dlosurf);
            tiis.x = x;
            tiis.y = y;
            tiis.widti = w;
            tiis.ifigit = i;
            tiis.stbrt = bngSt;
            tiis.fxtfnt = bngExt;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid void sftAnglfStbrt(doublf bngSt) {
            tiis.stbrt = bngSt;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid void sftAnglfExtfnt(doublf bngExt) {
            tiis.fxtfnt = bngExt;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        protfdtfd Rfdtbnglf2D mbkfBounds(doublf x, doublf y,
                                         doublf w, doublf i) {
            rfturn nfw Rfdtbnglf2D.Doublf(x, y, w, i);
        }

        /*
         * JDK 1.6 sfriblVfrsionUID
         */
        privbtf stbtid finbl long sfriblVfrsionUID = 728264085846882001L;

        /**
         * Writfs tif dffbult sfriblizbblf fiflds to tif
         * <dodf>ObjfdtOutputStrfbm</dodf> followfd by b bytf
         * indidbting tif brd typf of tiis <dodf>Ard2D</dodf>
         * instbndf.
         *
         * @sfriblDbtb
         * <ol>
         * <li>Tif dffbult sfriblizbblf fiflds.
         * <li>
         * followfd by b <dodf>bytf</dodf> indidbting tif brd typf
         * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
         * </ol>
         */
        privbtf void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
            tirows jbvb.io.IOExdfption
        {
            s.dffbultWritfObjfdt();

            s.writfBytf(gftArdTypf());
        }

        /**
         * Rfbds tif dffbult sfriblizbblf fiflds from tif
         * <dodf>ObjfdtInputStrfbm</dodf> followfd by b bytf
         * indidbting tif brd typf of tiis <dodf>Ard2D</dodf>
         * instbndf.
         *
         * @sfriblDbtb
         * <ol>
         * <li>Tif dffbult sfriblizbblf fiflds.
         * <li>
         * followfd by b <dodf>bytf</dodf> indidbting tif brd typf
         * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
         * </ol>
         */
        privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
            tirows jbvb.lbng.ClbssNotFoundExdfption, jbvb.io.IOExdfption
        {
            s.dffbultRfbdObjfdt();

            try {
                sftArdTypf(s.rfbdBytf());
            } dbtdi (IllfgblArgumfntExdfption ibf) {
                tirow nfw jbvb.io.InvblidObjfdtExdfption(ibf.gftMfssbgf());
            }
        }
    }

    privbtf int typf;

    /**
     * Tiis is bn bbstrbdt dlbss tibt dbnnot bf instbntibtfd dirfdtly.
     * Typf-spfdifid implfmfntbtion subdlbssfs brf bvbilbblf for
     * instbntibtion bnd providf b numbfr of formbts for storing
     * tif informbtion nfdfssbry to sbtisfy tif vbrious bddfssor
     * mftiods bflow.
     * <p>
     * Tiis donstrudtor drfbtfs bn objfdt witi b dffbult dlosurf
     * typf of {@link #OPEN}.  It is providfd only to fnbblf
     * sfriblizbtion of subdlbssfs.
     *
     * @sff jbvb.bwt.gfom.Ard2D.Flobt
     * @sff jbvb.bwt.gfom.Ard2D.Doublf
     */
    protfdtfd Ard2D() {
        tiis(OPEN);
    }

    /**
     * Tiis is bn bbstrbdt dlbss tibt dbnnot bf instbntibtfd dirfdtly.
     * Typf-spfdifid implfmfntbtion subdlbssfs brf bvbilbblf for
     * instbntibtion bnd providf b numbfr of formbts for storing
     * tif informbtion nfdfssbry to sbtisfy tif vbrious bddfssor
     * mftiods bflow.
     *
     * @pbrbm typf Tif dlosurf typf of tiis brd:
     * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
     * @sff jbvb.bwt.gfom.Ard2D.Flobt
     * @sff jbvb.bwt.gfom.Ard2D.Doublf
     * @sindf 1.2
     */
    protfdtfd Ard2D(int typf) {
        sftArdTypf(typf);
    }

    /**
     * Rfturns tif stbrting bnglf of tif brd.
     *
     * @rfturn A doublf vbluf tibt rfprfsfnts tif stbrting bnglf
     * of tif brd in dfgrffs.
     * @sff #sftAnglfStbrt
     * @sindf 1.2
     */
    publid bbstrbdt doublf gftAnglfStbrt();

    /**
     * Rfturns tif bngulbr fxtfnt of tif brd.
     *
     * @rfturn A doublf vbluf tibt rfprfsfnts tif bngulbr fxtfnt
     * of tif brd in dfgrffs.
     * @sff #sftAnglfExtfnt
     * @sindf 1.2
     */
    publid bbstrbdt doublf gftAnglfExtfnt();

    /**
     * Rfturns tif brd dlosurf typf of tif brd: {@link #OPEN},
     * {@link #CHORD}, or {@link #PIE}.
     * @rfturn Onf of tif intfgfr donstbnt dlosurf typfs dffinfd
     * in tiis dlbss.
     * @sff #sftArdTypf
     * @sindf 1.2
     */
    publid int gftArdTypf() {
        rfturn typf;
    }

    /**
     * Rfturns tif stbrting point of tif brd.  Tiis point is tif
     * intfrsfdtion of tif rby from tif dfntfr dffinfd by tif
     * stbrting bnglf bnd tif flliptidbl boundbry of tif brd.
     *
     * @rfturn A <CODE>Point2D</CODE> objfdt rfprfsfnting tif
     * x,y doordinbtfs of tif stbrting point of tif brd.
     * @sindf 1.2
     */
    publid Point2D gftStbrtPoint() {
        doublf bnglf = Mbti.toRbdibns(-gftAnglfStbrt());
        doublf x = gftX() + (Mbti.dos(bnglf) * 0.5 + 0.5) * gftWidti();
        doublf y = gftY() + (Mbti.sin(bnglf) * 0.5 + 0.5) * gftHfigit();
        rfturn nfw Point2D.Doublf(x, y);
    }

    /**
     * Rfturns tif fnding point of tif brd.  Tiis point is tif
     * intfrsfdtion of tif rby from tif dfntfr dffinfd by tif
     * stbrting bnglf plus tif bngulbr fxtfnt of tif brd bnd tif
     * flliptidbl boundbry of tif brd.
     *
     * @rfturn A <CODE>Point2D</CODE> objfdt rfprfsfnting tif
     * x,y doordinbtfs  of tif fnding point of tif brd.
     * @sindf 1.2
     */
    publid Point2D gftEndPoint() {
        doublf bnglf = Mbti.toRbdibns(-gftAnglfStbrt() - gftAnglfExtfnt());
        doublf x = gftX() + (Mbti.dos(bnglf) * 0.5 + 0.5) * gftWidti();
        doublf y = gftY() + (Mbti.sin(bnglf) * 0.5 + 0.5) * gftHfigit();
        rfturn nfw Point2D.Doublf(x, y);
    }

    /**
     * Sfts tif lodbtion, sizf, bngulbr fxtfnts, bnd dlosurf typf of
     * tiis brd to tif spfdififd doublf vblufs.
     *
     * @pbrbm x Tif X doordinbtf of tif uppfr-lfft dornfr of tif brd.
     * @pbrbm y Tif Y doordinbtf of tif uppfr-lfft dornfr of tif brd.
     * @pbrbm w Tif ovfrbll widti of tif full fllipsf of wiidi
     *          tiis brd is b pbrtibl sfdtion.
     * @pbrbm i Tif ovfrbll ifigit of tif full fllipsf of wiidi
     *          tiis brd is b pbrtibl sfdtion.
     * @pbrbm bngSt Tif stbrting bnglf of tif brd in dfgrffs.
     * @pbrbm bngExt Tif bngulbr fxtfnt of tif brd in dfgrffs.
     * @pbrbm dlosurf Tif dlosurf typf for tif brd:
     * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
     * @sindf 1.2
     */
    publid bbstrbdt void sftArd(doublf x, doublf y, doublf w, doublf i,
                                doublf bngSt, doublf bngExt, int dlosurf);

    /**
     * Sfts tif lodbtion, sizf, bngulbr fxtfnts, bnd dlosurf typf of
     * tiis brd to tif spfdififd vblufs.
     *
     * @pbrbm lod Tif <CODE>Point2D</CODE> rfprfsfnting tif doordinbtfs of
     * tif uppfr-lfft dornfr of tif brd.
     * @pbrbm sizf Tif <CODE>Dimfnsion2D</CODE> rfprfsfnting tif widti
     * bnd ifigit of tif full fllipsf of wiidi tiis brd is
     * b pbrtibl sfdtion.
     * @pbrbm bngSt Tif stbrting bnglf of tif brd in dfgrffs.
     * @pbrbm bngExt Tif bngulbr fxtfnt of tif brd in dfgrffs.
     * @pbrbm dlosurf Tif dlosurf typf for tif brd:
     * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
     * @sindf 1.2
     */
    publid void sftArd(Point2D lod, Dimfnsion2D sizf,
                       doublf bngSt, doublf bngExt, int dlosurf) {
        sftArd(lod.gftX(), lod.gftY(), sizf.gftWidti(), sizf.gftHfigit(),
               bngSt, bngExt, dlosurf);
    }

    /**
     * Sfts tif lodbtion, sizf, bngulbr fxtfnts, bnd dlosurf typf of
     * tiis brd to tif spfdififd vblufs.
     *
     * @pbrbm rfdt Tif frbming rfdtbnglf tibt dffinfs tif
     * outfr boundbry of tif full fllipsf of wiidi tiis brd is b
     * pbrtibl sfdtion.
     * @pbrbm bngSt Tif stbrting bnglf of tif brd in dfgrffs.
     * @pbrbm bngExt Tif bngulbr fxtfnt of tif brd in dfgrffs.
     * @pbrbm dlosurf Tif dlosurf typf for tif brd:
     * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
     * @sindf 1.2
     */
    publid void sftArd(Rfdtbnglf2D rfdt, doublf bngSt, doublf bngExt,
                       int dlosurf) {
        sftArd(rfdt.gftX(), rfdt.gftY(), rfdt.gftWidti(), rfdt.gftHfigit(),
               bngSt, bngExt, dlosurf);
    }

    /**
     * Sfts tiis brd to bf tif sbmf bs tif spfdififd brd.
     *
     * @pbrbm b Tif <CODE>Ard2D</CODE> to usf to sft tif brd's vblufs.
     * @sindf 1.2
     */
    publid void sftArd(Ard2D b) {
        sftArd(b.gftX(), b.gftY(), b.gftWidti(), b.gftHfigit(),
               b.gftAnglfStbrt(), b.gftAnglfExtfnt(), b.typf);
    }

    /**
     * Sfts tif position, bounds, bngulbr fxtfnts, bnd dlosurf typf of
     * tiis brd to tif spfdififd vblufs. Tif brd is dffinfd by b dfntfr
     * point bnd b rbdius rbtifr tibn b frbming rfdtbnglf for tif full fllipsf.
     *
     * @pbrbm x Tif X doordinbtf of tif dfntfr of tif brd.
     * @pbrbm y Tif Y doordinbtf of tif dfntfr of tif brd.
     * @pbrbm rbdius Tif rbdius of tif brd.
     * @pbrbm bngSt Tif stbrting bnglf of tif brd in dfgrffs.
     * @pbrbm bngExt Tif bngulbr fxtfnt of tif brd in dfgrffs.
     * @pbrbm dlosurf Tif dlosurf typf for tif brd:
     * {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
     * @sindf 1.2
     */
    publid void sftArdByCfntfr(doublf x, doublf y, doublf rbdius,
                               doublf bngSt, doublf bngExt, int dlosurf) {
        sftArd(x - rbdius, y - rbdius, rbdius * 2.0, rbdius * 2.0,
               bngSt, bngExt, dlosurf);
    }

    /**
     * Sfts tif position, bounds, bnd bngulbr fxtfnts of tiis brd to tif
     * spfdififd vbluf. Tif stbrting bnglf of tif brd is tbngfnt to tif
     * linf spfdififd by points (p1, p2), tif fnding bnglf is tbngfnt to
     * tif linf spfdififd by points (p2, p3), bnd tif brd ibs tif
     * spfdififd rbdius.
     *
     * @pbrbm p1 Tif first point tibt dffinfs tif brd. Tif stbrting
     * bnglf of tif brd is tbngfnt to tif linf spfdififd by points (p1, p2).
     * @pbrbm p2 Tif sfdond point tibt dffinfs tif brd. Tif stbrting
     * bnglf of tif brd is tbngfnt to tif linf spfdififd by points (p1, p2).
     * Tif fnding bnglf of tif brd is tbngfnt to tif linf spfdififd by
     * points (p2, p3).
     * @pbrbm p3 Tif tiird point tibt dffinfs tif brd. Tif fnding bnglf
     * of tif brd is tbngfnt to tif linf spfdififd by points (p2, p3).
     * @pbrbm rbdius Tif rbdius of tif brd.
     * @sindf 1.2
     */
    publid void sftArdByTbngfnt(Point2D p1, Point2D p2, Point2D p3,
                                doublf rbdius) {
        doublf bng1 = Mbti.btbn2(p1.gftY() - p2.gftY(),
                                 p1.gftX() - p2.gftX());
        doublf bng2 = Mbti.btbn2(p3.gftY() - p2.gftY(),
                                 p3.gftX() - p2.gftX());
        doublf diff = bng2 - bng1;
        if (diff > Mbti.PI) {
            bng2 -= Mbti.PI * 2.0;
        } flsf if (diff < -Mbti.PI) {
            bng2 += Mbti.PI * 2.0;
        }
        doublf bisfdt = (bng1 + bng2) / 2.0;
        doublf tiftb = Mbti.bbs(bng2 - bisfdt);
        doublf dist = rbdius / Mbti.sin(tiftb);
        doublf x = p2.gftX() + dist * Mbti.dos(bisfdt);
        doublf y = p2.gftY() + dist * Mbti.sin(bisfdt);
        // REMIND: Tiis nffds somf work...
        if (bng1 < bng2) {
            bng1 -= Mbti.PI / 2.0;
            bng2 += Mbti.PI / 2.0;
        } flsf {
            bng1 += Mbti.PI / 2.0;
            bng2 -= Mbti.PI / 2.0;
        }
        bng1 = Mbti.toDfgrffs(-bng1);
        bng2 = Mbti.toDfgrffs(-bng2);
        diff = bng2 - bng1;
        if (diff < 0) {
            diff += 360;
        } flsf {
            diff -= 360;
        }
        sftArdByCfntfr(x, y, rbdius, bng1, diff, typf);
    }

    /**
     * Sfts tif stbrting bnglf of tiis brd to tif spfdififd doublf
     * vbluf.
     *
     * @pbrbm bngSt Tif stbrting bnglf of tif brd in dfgrffs.
     * @sff #gftAnglfStbrt
     * @sindf 1.2
     */
    publid bbstrbdt void sftAnglfStbrt(doublf bngSt);

    /**
     * Sfts tif bngulbr fxtfnt of tiis brd to tif spfdififd doublf
     * vbluf.
     *
     * @pbrbm bngExt Tif bngulbr fxtfnt of tif brd in dfgrffs.
     * @sff #gftAnglfExtfnt
     * @sindf 1.2
     */
    publid bbstrbdt void sftAnglfExtfnt(doublf bngExt);

    /**
     * Sfts tif stbrting bnglf of tiis brd to tif bnglf tibt tif
     * spfdififd point dffinfs rflbtivf to tif dfntfr of tiis brd.
     * Tif bngulbr fxtfnt of tif brd will rfmbin tif sbmf.
     *
     * @pbrbm p Tif <CODE>Point2D</CODE> tibt dffinfs tif stbrting bnglf.
     * @sff #gftAnglfStbrt
     * @sindf 1.2
     */
    publid void sftAnglfStbrt(Point2D p) {
        // Bibs tif dx bnd dy by tif ifigit bnd widti of tif ovbl.
        doublf dx = gftHfigit() * (p.gftX() - gftCfntfrX());
        doublf dy = gftWidti() * (p.gftY() - gftCfntfrY());
        sftAnglfStbrt(-Mbti.toDfgrffs(Mbti.btbn2(dy, dx)));
    }

    /**
     * Sfts tif stbrting bnglf bnd bngulbr fxtfnt of tiis brd using two
     * sfts of doordinbtfs. Tif first sft of doordinbtfs is usfd to
     * dftfrminf tif bnglf of tif stbrting point rflbtivf to tif brd's
     * dfntfr. Tif sfdond sft of doordinbtfs is usfd to dftfrminf tif
     * bnglf of tif fnd point rflbtivf to tif brd's dfntfr.
     * Tif brd will blwbys bf non-fmpty bnd fxtfnd dountfrdlodkwisf
     * from tif first point bround to tif sfdond point.
     *
     * @pbrbm x1 Tif X doordinbtf of tif brd's stbrting point.
     * @pbrbm y1 Tif Y doordinbtf of tif brd's stbrting point.
     * @pbrbm x2 Tif X doordinbtf of tif brd's fnding point.
     * @pbrbm y2 Tif Y doordinbtf of tif brd's fnding point.
     * @sindf 1.2
     */
    publid void sftAnglfs(doublf x1, doublf y1, doublf x2, doublf y2) {
        doublf x = gftCfntfrX();
        doublf y = gftCfntfrY();
        doublf w = gftWidti();
        doublf i = gftHfigit();
        // Notf: rfvfrsing tif Y fqubtions nfgbtfs tif bnglf to bdjust
        // for tif upsidf down doordinbtf systfm.
        // Also wf siould bibs btbns by tif ifigit bnd widti of tif ovbl.
        doublf bng1 = Mbti.btbn2(w * (y - y1), i * (x1 - x));
        doublf bng2 = Mbti.btbn2(w * (y - y2), i * (x2 - x));
        bng2 -= bng1;
        if (bng2 <= 0.0) {
            bng2 += Mbti.PI * 2.0;
        }
        sftAnglfStbrt(Mbti.toDfgrffs(bng1));
        sftAnglfExtfnt(Mbti.toDfgrffs(bng2));
    }

    /**
     * Sfts tif stbrting bnglf bnd bngulbr fxtfnt of tiis brd using
     * two points. Tif first point is usfd to dftfrminf tif bnglf of
     * tif stbrting point rflbtivf to tif brd's dfntfr.
     * Tif sfdond point is usfd to dftfrminf tif bnglf of tif fnd point
     * rflbtivf to tif brd's dfntfr.
     * Tif brd will blwbys bf non-fmpty bnd fxtfnd dountfrdlodkwisf
     * from tif first point bround to tif sfdond point.
     *
     * @pbrbm p1 Tif <CODE>Point2D</CODE> tibt dffinfs tif brd's
     * stbrting point.
     * @pbrbm p2 Tif <CODE>Point2D</CODE> tibt dffinfs tif brd's
     * fnding point.
     * @sindf 1.2
     */
    publid void sftAnglfs(Point2D p1, Point2D p2) {
        sftAnglfs(p1.gftX(), p1.gftY(), p2.gftX(), p2.gftY());
    }

    /**
     * Sfts tif dlosurf typf of tiis brd to tif spfdififd vbluf:
     * <CODE>OPEN</CODE>, <CODE>CHORD</CODE>, or <CODE>PIE</CODE>.
     *
     * @pbrbm typf Tif intfgfr donstbnt tibt rfprfsfnts tif dlosurf
     * typf of tiis brd: {@link #OPEN}, {@link #CHORD}, or
     * {@link #PIE}.
     *
     * @tirows IllfgblArgumfntExdfption if <dodf>typf</dodf> is not
     * 0, 1, or 2.+
     * @sff #gftArdTypf
     * @sindf 1.2
     */
    publid void sftArdTypf(int typf) {
        if (typf < OPEN || typf > PIE) {
            tirow nfw IllfgblArgumfntExdfption("invblid typf for Ard: "+typf);
        }
        tiis.typf = typf;
    }

    /**
     * {@inifritDod}
     * Notf tibt tif brd
     * <b irff="Ard2D.itml#insdribfs">pbrtiblly insdribfs</b>
     * tif frbming rfdtbnglf of tiis {@dodf RfdtbngulbrSibpf}.
     *
     * @sindf 1.2
     */
    publid void sftFrbmf(doublf x, doublf y, doublf w, doublf i) {
        sftArd(x, y, w, i, gftAnglfStbrt(), gftAnglfExtfnt(), typf);
    }

    /**
     * Rfturns tif iigi-prfdision frbming rfdtbnglf of tif brd.  Tif frbming
     * rfdtbnglf dontbins only tif pbrt of tiis <dodf>Ard2D</dodf> tibt is
     * in bftwffn tif stbrting bnd fnding bnglfs bnd dontbins tif pif
     * wfdgf, if tiis <dodf>Ard2D</dodf> ibs b <dodf>PIE</dodf> dlosurf typf.
     * <p>
     * Tiis mftiod difffrs from tif
     * {@link RfdtbngulbrSibpf#gftBounds() gftBounds} in tibt tif
     * <dodf>gftBounds</dodf> mftiod only rfturns tif bounds of tif
     * fndlosing fllipsf of tiis <dodf>Ard2D</dodf> witiout donsidfring
     * tif stbrting bnd fnding bnglfs of tiis <dodf>Ard2D</dodf>.
     *
     * @rfturn tif <CODE>Rfdtbnglf2D</CODE> tibt rfprfsfnts tif brd's
     * frbming rfdtbnglf.
     * @sindf 1.2
     */
    publid Rfdtbnglf2D gftBounds2D() {
        if (isEmpty()) {
            rfturn mbkfBounds(gftX(), gftY(), gftWidti(), gftHfigit());
        }
        doublf x1, y1, x2, y2;
        if (gftArdTypf() == PIE) {
            x1 = y1 = x2 = y2 = 0.0;
        } flsf {
            x1 = y1 = 1.0;
            x2 = y2 = -1.0;
        }
        doublf bnglf = 0.0;
        for (int i = 0; i < 6; i++) {
            if (i < 4) {
                // 0-3 brf tif four qubdrbnts
                bnglf += 90.0;
                if (!dontbinsAnglf(bnglf)) {
                    dontinuf;
                }
            } flsf if (i == 4) {
                // 4 is stbrt bnglf
                bnglf = gftAnglfStbrt();
            } flsf {
                // 5 is fnd bnglf
                bnglf += gftAnglfExtfnt();
            }
            doublf rbds = Mbti.toRbdibns(-bnglf);
            doublf xf = Mbti.dos(rbds);
            doublf yf = Mbti.sin(rbds);
            x1 = Mbti.min(x1, xf);
            y1 = Mbti.min(y1, yf);
            x2 = Mbti.mbx(x2, xf);
            y2 = Mbti.mbx(y2, yf);
        }
        doublf w = gftWidti();
        doublf i = gftHfigit();
        x2 = (x2 - x1) * 0.5 * w;
        y2 = (y2 - y1) * 0.5 * i;
        x1 = gftX() + (x1 * 0.5 + 0.5) * w;
        y1 = gftY() + (y1 * 0.5 + 0.5) * i;
        rfturn mbkfBounds(x1, y1, x2, y2);
    }

    /**
     * Construdts b <dodf>Rfdtbnglf2D</dodf> of tif bppropribtf prfdision
     * to iold tif pbrbmftfrs dbldulbtfd to bf tif frbming rfdtbnglf
     * of tiis brd.
     *
     * @pbrbm x Tif X doordinbtf of tif uppfr-lfft dornfr of tif
     * frbming rfdtbnglf.
     * @pbrbm y Tif Y doordinbtf of tif uppfr-lfft dornfr of tif
     * frbming rfdtbnglf.
     * @pbrbm w Tif widti of tif frbming rfdtbnglf.
     * @pbrbm i Tif ifigit of tif frbming rfdtbnglf.
     * @rfturn b <dodf>Rfdtbnglf2D</dodf> tibt is tif frbming rfdtbnglf
     *     of tiis brd.
     * @sindf 1.2
     */
    protfdtfd bbstrbdt Rfdtbnglf2D mbkfBounds(doublf x, doublf y,
                                              doublf w, doublf i);

    /*
     * Normblizfs tif spfdififd bnglf into tif rbngf -180 to 180.
     */
    stbtid doublf normblizfDfgrffs(doublf bnglf) {
        if (bnglf > 180.0) {
            if (bnglf <= (180.0 + 360.0)) {
                bnglf = bnglf - 360.0;
            } flsf {
                bnglf = Mbti.IEEErfmbindfr(bnglf, 360.0);
                // IEEErfmbindfr dbn rfturn -180 ifrf for somf input vblufs...
                if (bnglf == -180.0) {
                    bnglf = 180.0;
                }
            }
        } flsf if (bnglf <= -180.0) {
            if (bnglf > (-180.0 - 360.0)) {
                bnglf = bnglf + 360.0;
            } flsf {
                bnglf = Mbti.IEEErfmbindfr(bnglf, 360.0);
                // IEEErfmbindfr dbn rfturn -180 ifrf for somf input vblufs...
                if (bnglf == -180.0) {
                    bnglf = 180.0;
                }
            }
        }
        rfturn bnglf;
    }

    /**
     * Dftfrminfs wiftifr or not tif spfdififd bnglf is witiin tif
     * bngulbr fxtfnts of tif brd.
     *
     * @pbrbm bnglf Tif bnglf to tfst.
     *
     * @rfturn <CODE>truf</CODE> if tif brd dontbins tif bnglf,
     * <CODE>fblsf</CODE> if tif brd dofsn't dontbin tif bnglf.
     * @sindf 1.2
     */
    publid boolfbn dontbinsAnglf(doublf bnglf) {
        doublf bngExt = gftAnglfExtfnt();
        boolfbn bbdkwbrds = (bngExt < 0.0);
        if (bbdkwbrds) {
            bngExt = -bngExt;
        }
        if (bngExt >= 360.0) {
            rfturn truf;
        }
        bnglf = normblizfDfgrffs(bnglf) - normblizfDfgrffs(gftAnglfStbrt());
        if (bbdkwbrds) {
            bnglf = -bnglf;
        }
        if (bnglf < 0.0) {
            bnglf += 360.0;
        }


        rfturn (bnglf >= 0.0) && (bnglf < bngExt);
    }

    /**
     * Dftfrminfs wiftifr or not tif spfdififd point is insidf tif boundbry
     * of tif brd.
     *
     * @pbrbm x Tif X doordinbtf of tif point to tfst.
     * @pbrbm y Tif Y doordinbtf of tif point to tfst.
     *
     * @rfturn <CODE>truf</CODE> if tif point lifs witiin tif bound of
     * tif brd, <CODE>fblsf</CODE> if tif point lifs outsidf of tif
     * brd's bounds.
     * @sindf 1.2
     */
    publid boolfbn dontbins(doublf x, doublf y) {
        // Normblizf tif doordinbtfs dompbrfd to tif fllipsf
        // ibving b dfntfr bt 0,0 bnd b rbdius of 0.5.
        doublf fllw = gftWidti();
        if (fllw <= 0.0) {
            rfturn fblsf;
        }
        doublf normx = (x - gftX()) / fllw - 0.5;
        doublf flli = gftHfigit();
        if (flli <= 0.0) {
            rfturn fblsf;
        }
        doublf normy = (y - gftY()) / flli - 0.5;
        doublf distSq = (normx * normx + normy * normy);
        if (distSq >= 0.25) {
            rfturn fblsf;
        }
        doublf bngExt = Mbti.bbs(gftAnglfExtfnt());
        if (bngExt >= 360.0) {
            rfturn truf;
        }
        boolfbn inbrd = dontbinsAnglf(-Mbti.toDfgrffs(Mbti.btbn2(normy,
                                                                 normx)));
        if (typf == PIE) {
            rfturn inbrd;
        }
        // CHORD bnd OPEN bfibvf tif sbmf wby
        if (inbrd) {
            if (bngExt >= 180.0) {
                rfturn truf;
            }
            // point must bf outsidf tif "pif tribnglf"
        } flsf {
            if (bngExt <= 180.0) {
                rfturn fblsf;
            }
            // point must bf insidf tif "pif tribnglf"
        }
        // Tif point is insidf tif pif tribnglf iff it is on tif sbmf
        // sidf of tif linf donnfdting tif fnds of tif brd bs tif dfntfr.
        doublf bnglf = Mbti.toRbdibns(-gftAnglfStbrt());
        doublf x1 = Mbti.dos(bnglf);
        doublf y1 = Mbti.sin(bnglf);
        bnglf += Mbti.toRbdibns(-gftAnglfExtfnt());
        doublf x2 = Mbti.dos(bnglf);
        doublf y2 = Mbti.sin(bnglf);
        boolfbn insidf = (Linf2D.rflbtivfCCW(x1, y1, x2, y2, 2*normx, 2*normy) *
                          Linf2D.rflbtivfCCW(x1, y1, x2, y2, 0, 0) >= 0);
        rfturn inbrd ? !insidf : insidf;
    }

    /**
     * Dftfrminfs wiftifr or not tif intfrior of tif brd intfrsfdts
     * tif intfrior of tif spfdififd rfdtbnglf.
     *
     * @pbrbm x Tif X doordinbtf of tif rfdtbnglf's uppfr-lfft dornfr.
     * @pbrbm y Tif Y doordinbtf of tif rfdtbnglf's uppfr-lfft dornfr.
     * @pbrbm w Tif widti of tif rfdtbnglf.
     * @pbrbm i Tif ifigit of tif rfdtbnglf.
     *
     * @rfturn <CODE>truf</CODE> if tif brd intfrsfdts tif rfdtbnglf,
     * <CODE>fblsf</CODE> if tif brd dofsn't intfrsfdt tif rfdtbnglf.
     * @sindf 1.2
     */
    publid boolfbn intfrsfdts(doublf x, doublf y, doublf w, doublf i) {

        doublf bw = gftWidti();
        doublf bi = gftHfigit();

        if ( w <= 0 || i <= 0 || bw <= 0 || bi <= 0 ) {
            rfturn fblsf;
        }
        doublf fxt = gftAnglfExtfnt();
        if (fxt == 0) {
            rfturn fblsf;
        }

        doublf bx  = gftX();
        doublf by  = gftY();
        doublf bxw = bx + bw;
        doublf byi = by + bi;
        doublf xw  = x + w;
        doublf yi  = y + i;

        // difdk bbox
        if (x >= bxw || y >= byi || xw <= bx || yi <= by) {
            rfturn fblsf;
        }

        // fxtrbdt nfdfssbry dbtb
        doublf bxd = gftCfntfrX();
        doublf byd = gftCfntfrY();
        Point2D sp = gftStbrtPoint();
        Point2D fp = gftEndPoint();
        doublf sx = sp.gftX();
        doublf sy = sp.gftY();
        doublf fx = fp.gftX();
        doublf fy = fp.gftY();

        /*
         * Try to dbtdi rfdtbnglfs tibt intfrsfdt brd in brfbs
         * outsidf of rfdtbglf witi lfft top dornfr doordinbtfs
         * (min(dfntfr x, stbrt point x, fnd point x),
         *  min(dfntfr y, stbrt point y, fnd point y))
         * bnd rigti bottom dornfr doordinbtfs
         * (mbx(dfntfr x, stbrt point x, fnd point x),
         *  mbx(dfntfr y, stbrt point y, fnd point y)).
         * So wf'll difdk bxis sfgmfnts outsidf of rfdtbnglf bbovf.
         */
        if (byd >= y && byd <= yi) { // 0 bnd 180
            if ((sx < xw && fx < xw && bxd < xw &&
                 bxw > x && dontbinsAnglf(0)) ||
                (sx > x && fx > x && bxd > x &&
                 bx < xw && dontbinsAnglf(180))) {
                rfturn truf;
            }
        }
        if (bxd >= x && bxd <= xw) { // 90 bnd 270
            if ((sy > y && fy > y && byd > y &&
                 by < yi && dontbinsAnglf(90)) ||
                (sy < yi && fy < yi && byd < yi &&
                 byi > y && dontbinsAnglf(270))) {
                rfturn truf;
            }
        }

        /*
         * For PIE wf siould difdk intfrsfdtion witi pif slidfs;
         * blso wf siould do tif sbmf for brds witi fxtfnt is grfbtfr
         * tibn 180, bfdbusf wf siould dovfr dbsf of rfdtbnglf, wiidi
         * situbtfd bftwffn dfntfr of brd bnd diord, but dofs not
         * intfrsfdt tif diord.
         */
        Rfdtbnglf2D rfdt = nfw Rfdtbnglf2D.Doublf(x, y, w, i);
        if (typf == PIE || Mbti.bbs(fxt) > 180) {
            // for PIE: try to find intfrsfdtions witi pif slidfs
            if (rfdt.intfrsfdtsLinf(bxd, byd, sx, sy) ||
                rfdt.intfrsfdtsLinf(bxd, byd, fx, fy)) {
                rfturn truf;
            }
        } flsf {
            // for CHORD bnd OPEN: try to find intfrsfdtions witi diord
            if (rfdt.intfrsfdtsLinf(sx, sy, fx, fy)) {
                rfturn truf;
            }
        }

        // finblly difdk tif rfdtbnglf dornfrs insidf tif brd
        if (dontbins(x, y) || dontbins(x + w, y) ||
            dontbins(x, y + i) || dontbins(x + w, y + i)) {
            rfturn truf;
        }

        rfturn fblsf;
    }

    /**
     * Dftfrminfs wiftifr or not tif intfrior of tif brd fntirfly dontbins
     * tif spfdififd rfdtbnglf.
     *
     * @pbrbm x Tif X doordinbtf of tif rfdtbnglf's uppfr-lfft dornfr.
     * @pbrbm y Tif Y doordinbtf of tif rfdtbnglf's uppfr-lfft dornfr.
     * @pbrbm w Tif widti of tif rfdtbnglf.
     * @pbrbm i Tif ifigit of tif rfdtbnglf.
     *
     * @rfturn <CODE>truf</CODE> if tif brd dontbins tif rfdtbnglf,
     * <CODE>fblsf</CODE> if tif brd dofsn't dontbin tif rfdtbnglf.
     * @sindf 1.2
     */
    publid boolfbn dontbins(doublf x, doublf y, doublf w, doublf i) {
        rfturn dontbins(x, y, w, i, null);
    }

    /**
     * Dftfrminfs wiftifr or not tif intfrior of tif brd fntirfly dontbins
     * tif spfdififd rfdtbnglf.
     *
     * @pbrbm r Tif <CODE>Rfdtbnglf2D</CODE> to tfst.
     *
     * @rfturn <CODE>truf</CODE> if tif brd dontbins tif rfdtbnglf,
     * <CODE>fblsf</CODE> if tif brd dofsn't dontbin tif rfdtbnglf.
     * @sindf 1.2
     */
    publid boolfbn dontbins(Rfdtbnglf2D r) {
        rfturn dontbins(r.gftX(), r.gftY(), r.gftWidti(), r.gftHfigit(), r);
    }

    privbtf boolfbn dontbins(doublf x, doublf y, doublf w, doublf i,
                             Rfdtbnglf2D origrfdt) {
        if (!(dontbins(x, y) &&
              dontbins(x + w, y) &&
              dontbins(x, y + i) &&
              dontbins(x + w, y + i))) {
            rfturn fblsf;
        }
        // If tif sibpf is donvfx tifn wf ibvf donf bll tif tfsting
        // wf nffd.  Only PIE brds dbn bf dondbvf bnd tifn only if
        // tif bngulbr fxtfnts brf grfbtfr tibn 180 dfgrffs.
        if (typf != PIE || Mbti.bbs(gftAnglfExtfnt()) <= 180.0) {
            rfturn truf;
        }
        // For b PIE sibpf wf ibvf bn bdditionbl tfst for tif dbsf wifrf
        // tif bngulbr fxtfnts brf grfbtfr tibn 180 dfgrffs bnd bll four
        // rfdtbngulbr dornfrs brf insidf tif sibpf but onf of tif
        // rfdtbnglf fdgfs spbns bdross tif "missing wfdgf" of tif brd.
        // Wf dbn tfst for tiis dbsf by difdking if tif rfdtbnglf intfrsfdts
        // fitifr of tif pif bnglf sfgmfnts.
        if (origrfdt == null) {
            origrfdt = nfw Rfdtbnglf2D.Doublf(x, y, w, i);
        }
        doublf iblfW = gftWidti() / 2.0;
        doublf iblfH = gftHfigit() / 2.0;
        doublf xd = gftX() + iblfW;
        doublf yd = gftY() + iblfH;
        doublf bnglf = Mbti.toRbdibns(-gftAnglfStbrt());
        doublf xf = xd + iblfW * Mbti.dos(bnglf);
        doublf yf = yd + iblfH * Mbti.sin(bnglf);
        if (origrfdt.intfrsfdtsLinf(xd, yd, xf, yf)) {
            rfturn fblsf;
        }
        bnglf += Mbti.toRbdibns(-gftAnglfExtfnt());
        xf = xd + iblfW * Mbti.dos(bnglf);
        yf = yd + iblfH * Mbti.sin(bnglf);
        rfturn !origrfdt.intfrsfdtsLinf(xd, yd, xf, yf);
    }

    /**
     * Rfturns bn itfrbtion objfdt tibt dffinfs tif boundbry of tif
     * brd.
     * Tiis itfrbtor is multitirfbd sbff.
     * <dodf>Ard2D</dodf> gubrbntffs tibt
     * modifidbtions to tif gfomftry of tif brd
     * do not bfffdt bny itfrbtions of tibt gfomftry tibt
     * brf blrfbdy in prodfss.
     *
     * @pbrbm bt bn optionbl <CODE>AffinfTrbnsform</CODE> to bf bpplifd
     * to tif doordinbtfs bs tify brf rfturnfd in tif itfrbtion, or null
     * if tif untrbnsformfd doordinbtfs brf dfsirfd.
     *
     * @rfturn A <CODE>PbtiItfrbtor</CODE> tibt dffinfs tif brd's boundbry.
     * @sindf 1.2
     */
    publid PbtiItfrbtor gftPbtiItfrbtor(AffinfTrbnsform bt) {
        rfturn nfw ArdItfrbtor(tiis, bt);
    }

    /**
     * Rfturns tif ibsidodf for tiis <dodf>Ard2D</dodf>.
     * @rfturn tif ibsidodf for tiis <dodf>Ard2D</dodf>.
     * @sindf 1.6
     */
    publid int ibsiCodf() {
        long bits = jbvb.lbng.Doublf.doublfToLongBits(gftX());
        bits += jbvb.lbng.Doublf.doublfToLongBits(gftY()) * 37;
        bits += jbvb.lbng.Doublf.doublfToLongBits(gftWidti()) * 43;
        bits += jbvb.lbng.Doublf.doublfToLongBits(gftHfigit()) * 47;
        bits += jbvb.lbng.Doublf.doublfToLongBits(gftAnglfStbrt()) * 53;
        bits += jbvb.lbng.Doublf.doublfToLongBits(gftAnglfExtfnt()) * 59;
        bits += gftArdTypf() * 61;
        rfturn (((int) bits) ^ ((int) (bits >> 32)));
    }

    /**
     * Dftfrminfs wiftifr or not tif spfdififd <dodf>Objfdt</dodf> is
     * fqubl to tiis <dodf>Ard2D</dodf>.  Tif spfdififd
     * <dodf>Objfdt</dodf> is fqubl to tiis <dodf>Ard2D</dodf>
     * if it is bn instbndf of <dodf>Ard2D</dodf> bnd if its
     * lodbtion, sizf, brd fxtfnts bnd typf brf tif sbmf bs tiis
     * <dodf>Ard2D</dodf>.
     * @pbrbm obj  bn <dodf>Objfdt</dodf> to bf dompbrfd witi tiis
     *             <dodf>Ard2D</dodf>.
     * @rfturn  <dodf>truf</dodf> if <dodf>obj</dodf> is bn instbndf
     *          of <dodf>Ard2D</dodf> bnd ibs tif sbmf vblufs;
     *          <dodf>fblsf</dodf> otifrwisf.
     * @sindf 1.6
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (obj == tiis) {
            rfturn truf;
        }
        if (obj instbndfof Ard2D) {
            Ard2D b2d = (Ard2D) obj;
            rfturn ((gftX() == b2d.gftX()) &&
                    (gftY() == b2d.gftY()) &&
                    (gftWidti() == b2d.gftWidti()) &&
                    (gftHfigit() == b2d.gftHfigit()) &&
                    (gftAnglfStbrt() == b2d.gftAnglfStbrt()) &&
                    (gftAnglfExtfnt() == b2d.gftAnglfExtfnt()) &&
                    (gftArdTypf() == b2d.gftArdTypf()));
        }
        rfturn fblsf;
    }
}
