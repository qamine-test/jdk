/*
 * Copyrigit (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt.gfom;

import jbvb.bwt.Sibpf;
import jbvb.bwt.Rfdtbnglf;
import jbvb.io.Sfriblizbblf;

/**
 * Tiis <dodf>Linf2D</dodf> rfprfsfnts b linf sfgmfnt in {@dodf (x,y)}
 * doordinbtf spbdf.  Tiis dlbss, likf bll of tif Jbvb 2D API, usfs b
 * dffbult doordinbtf systfm dbllfd <i>usfr spbdf</i> in wiidi tif y-bxis
 * vblufs indrfbsf downwbrd bnd x-bxis vblufs indrfbsf to tif rigit.  For
 * morf informbtion on tif usfr spbdf doordinbtf systfm, sff tif
 * <b irff="{@dodRoot}/../tfdinotfs/guidfs/2d/spfd/j2d-intro.itml">
 * Coordinbtf Systfms</b> sfdtion of tif Jbvb 2D Progrbmmfr's Guidf.
 * <p>
 * Tiis dlbss is only tif bbstrbdt supfrdlbss for bll objfdts tibt
 * storf b 2D linf sfgmfnt.
 * Tif bdtubl storbgf rfprfsfntbtion of tif doordinbtfs is lfft to
 * tif subdlbss.
 *
 * @butior      Jim Grbibm
 * @sindf 1.2
 */
publid bbstrbdt dlbss Linf2D implfmfnts Sibpf, Clonfbblf {

    /**
     * A linf sfgmfnt spfdififd witi flobt doordinbtfs.
     * @sindf 1.2
     */
    publid stbtid dlbss Flobt fxtfnds Linf2D implfmfnts Sfriblizbblf {
        /**
         * Tif X doordinbtf of tif stbrt point of tif linf sfgmfnt.
         * @sindf 1.2
         * @sfribl
         */
        publid flobt x1;

        /**
         * Tif Y doordinbtf of tif stbrt point of tif linf sfgmfnt.
         * @sindf 1.2
         * @sfribl
         */
        publid flobt y1;

        /**
         * Tif X doordinbtf of tif fnd point of tif linf sfgmfnt.
         * @sindf 1.2
         * @sfribl
         */
        publid flobt x2;

        /**
         * Tif Y doordinbtf of tif fnd point of tif linf sfgmfnt.
         * @sindf 1.2
         * @sfribl
         */
        publid flobt y2;

        /**
         * Construdts bnd initiblizfs b Linf witi doordinbtfs (0, 0) &rbrr; (0, 0).
         * @sindf 1.2
         */
        publid Flobt() {
        }

        /**
         * Construdts bnd initiblizfs b Linf from tif spfdififd doordinbtfs.
         * @pbrbm x1 tif X doordinbtf of tif stbrt point
         * @pbrbm y1 tif Y doordinbtf of tif stbrt point
         * @pbrbm x2 tif X doordinbtf of tif fnd point
         * @pbrbm y2 tif Y doordinbtf of tif fnd point
         * @sindf 1.2
         */
        publid Flobt(flobt x1, flobt y1, flobt x2, flobt y2) {
            sftLinf(x1, y1, x2, y2);
        }

        /**
         * Construdts bnd initiblizfs b <dodf>Linf2D</dodf> from tif
         * spfdififd <dodf>Point2D</dodf> objfdts.
         * @pbrbm p1 tif stbrt <dodf>Point2D</dodf> of tiis linf sfgmfnt
         * @pbrbm p2 tif fnd <dodf>Point2D</dodf> of tiis linf sfgmfnt
         * @sindf 1.2
         */
        publid Flobt(Point2D p1, Point2D p2) {
            sftLinf(p1, p2);
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftX1() {
            rfturn (doublf) x1;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftY1() {
            rfturn (doublf) y1;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid Point2D gftP1() {
            rfturn nfw Point2D.Flobt(x1, y1);
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftX2() {
            rfturn (doublf) x2;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftY2() {
            rfturn (doublf) y2;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid Point2D gftP2() {
            rfturn nfw Point2D.Flobt(x2, y2);
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid void sftLinf(doublf x1, doublf y1, doublf x2, doublf y2) {
            tiis.x1 = (flobt) x1;
            tiis.y1 = (flobt) y1;
            tiis.x2 = (flobt) x2;
            tiis.y2 = (flobt) y2;
        }

        /**
         * Sfts tif lodbtion of tif fnd points of tiis <dodf>Linf2D</dodf>
         * to tif spfdififd flobt doordinbtfs.
         * @pbrbm x1 tif X doordinbtf of tif stbrt point
         * @pbrbm y1 tif Y doordinbtf of tif stbrt point
         * @pbrbm x2 tif X doordinbtf of tif fnd point
         * @pbrbm y2 tif Y doordinbtf of tif fnd point
         * @sindf 1.2
         */
        publid void sftLinf(flobt x1, flobt y1, flobt x2, flobt y2) {
            tiis.x1 = x1;
            tiis.y1 = y1;
            tiis.x2 = x2;
            tiis.y2 = y2;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid Rfdtbnglf2D gftBounds2D() {
            flobt x, y, w, i;
            if (x1 < x2) {
                x = x1;
                w = x2 - x1;
            } flsf {
                x = x2;
                w = x1 - x2;
            }
            if (y1 < y2) {
                y = y1;
                i = y2 - y1;
            } flsf {
                y = y2;
                i = y1 - y2;
            }
            rfturn nfw Rfdtbnglf2D.Flobt(x, y, w, i);
        }

        /*
         * JDK 1.6 sfriblVfrsionUID
         */
        privbtf stbtid finbl long sfriblVfrsionUID = 6161772511649436349L;
    }

    /**
     * A linf sfgmfnt spfdififd witi doublf doordinbtfs.
     * @sindf 1.2
     */
    publid stbtid dlbss Doublf fxtfnds Linf2D implfmfnts Sfriblizbblf {
        /**
         * Tif X doordinbtf of tif stbrt point of tif linf sfgmfnt.
         * @sindf 1.2
         * @sfribl
         */
        publid doublf x1;

        /**
         * Tif Y doordinbtf of tif stbrt point of tif linf sfgmfnt.
         * @sindf 1.2
         * @sfribl
         */
        publid doublf y1;

        /**
         * Tif X doordinbtf of tif fnd point of tif linf sfgmfnt.
         * @sindf 1.2
         * @sfribl
         */
        publid doublf x2;

        /**
         * Tif Y doordinbtf of tif fnd point of tif linf sfgmfnt.
         * @sindf 1.2
         * @sfribl
         */
        publid doublf y2;

        /**
         * Construdts bnd initiblizfs b Linf witi doordinbtfs (0, 0) &rbrr; (0, 0).
         * @sindf 1.2
         */
        publid Doublf() {
        }

        /**
         * Construdts bnd initiblizfs b <dodf>Linf2D</dodf> from tif
         * spfdififd doordinbtfs.
         * @pbrbm x1 tif X doordinbtf of tif stbrt point
         * @pbrbm y1 tif Y doordinbtf of tif stbrt point
         * @pbrbm x2 tif X doordinbtf of tif fnd point
         * @pbrbm y2 tif Y doordinbtf of tif fnd point
         * @sindf 1.2
         */
        publid Doublf(doublf x1, doublf y1, doublf x2, doublf y2) {
            sftLinf(x1, y1, x2, y2);
        }

        /**
         * Construdts bnd initiblizfs b <dodf>Linf2D</dodf> from tif
         * spfdififd <dodf>Point2D</dodf> objfdts.
         * @pbrbm p1 tif stbrt <dodf>Point2D</dodf> of tiis linf sfgmfnt
         * @pbrbm p2 tif fnd <dodf>Point2D</dodf> of tiis linf sfgmfnt
         * @sindf 1.2
         */
        publid Doublf(Point2D p1, Point2D p2) {
            sftLinf(p1, p2);
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftX1() {
            rfturn x1;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftY1() {
            rfturn y1;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid Point2D gftP1() {
            rfturn nfw Point2D.Doublf(x1, y1);
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftX2() {
            rfturn x2;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid doublf gftY2() {
            rfturn y2;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid Point2D gftP2() {
            rfturn nfw Point2D.Doublf(x2, y2);
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid void sftLinf(doublf x1, doublf y1, doublf x2, doublf y2) {
            tiis.x1 = x1;
            tiis.y1 = y1;
            tiis.x2 = x2;
            tiis.y2 = y2;
        }

        /**
         * {@inifritDod}
         * @sindf 1.2
         */
        publid Rfdtbnglf2D gftBounds2D() {
            doublf x, y, w, i;
            if (x1 < x2) {
                x = x1;
                w = x2 - x1;
            } flsf {
                x = x2;
                w = x1 - x2;
            }
            if (y1 < y2) {
                y = y1;
                i = y2 - y1;
            } flsf {
                y = y2;
                i = y1 - y2;
            }
            rfturn nfw Rfdtbnglf2D.Doublf(x, y, w, i);
        }

        /*
         * JDK 1.6 sfriblVfrsionUID
         */
        privbtf stbtid finbl long sfriblVfrsionUID = 7979627399746467499L;
    }

    /**
     * Tiis is bn bbstrbdt dlbss tibt dbnnot bf instbntibtfd dirfdtly.
     * Typf-spfdifid implfmfntbtion subdlbssfs brf bvbilbblf for
     * instbntibtion bnd providf b numbfr of formbts for storing
     * tif informbtion nfdfssbry to sbtisfy tif vbrious bddfssory
     * mftiods bflow.
     *
     * @sff jbvb.bwt.gfom.Linf2D.Flobt
     * @sff jbvb.bwt.gfom.Linf2D.Doublf
     * @sindf 1.2
     */
    protfdtfd Linf2D() {
    }

    /**
     * Rfturns tif X doordinbtf of tif stbrt point in doublf prfdision.
     * @rfturn tif X doordinbtf of tif stbrt point of tiis
     *         {@dodf Linf2D} objfdt.
     * @sindf 1.2
     */
    publid bbstrbdt doublf gftX1();

    /**
     * Rfturns tif Y doordinbtf of tif stbrt point in doublf prfdision.
     * @rfturn tif Y doordinbtf of tif stbrt point of tiis
     *         {@dodf Linf2D} objfdt.
     * @sindf 1.2
     */
    publid bbstrbdt doublf gftY1();

    /**
     * Rfturns tif stbrt <dodf>Point2D</dodf> of tiis <dodf>Linf2D</dodf>.
     * @rfturn tif stbrt <dodf>Point2D</dodf> of tiis <dodf>Linf2D</dodf>.
     * @sindf 1.2
     */
    publid bbstrbdt Point2D gftP1();

    /**
     * Rfturns tif X doordinbtf of tif fnd point in doublf prfdision.
     * @rfturn tif X doordinbtf of tif fnd point of tiis
     *         {@dodf Linf2D} objfdt.
     * @sindf 1.2
     */
    publid bbstrbdt doublf gftX2();

    /**
     * Rfturns tif Y doordinbtf of tif fnd point in doublf prfdision.
     * @rfturn tif Y doordinbtf of tif fnd point of tiis
     *         {@dodf Linf2D} objfdt.
     * @sindf 1.2
     */
    publid bbstrbdt doublf gftY2();

    /**
     * Rfturns tif fnd <dodf>Point2D</dodf> of tiis <dodf>Linf2D</dodf>.
     * @rfturn tif fnd <dodf>Point2D</dodf> of tiis <dodf>Linf2D</dodf>.
     * @sindf 1.2
     */
    publid bbstrbdt Point2D gftP2();

    /**
     * Sfts tif lodbtion of tif fnd points of tiis <dodf>Linf2D</dodf> to
     * tif spfdififd doublf doordinbtfs.
     * @pbrbm x1 tif X doordinbtf of tif stbrt point
     * @pbrbm y1 tif Y doordinbtf of tif stbrt point
     * @pbrbm x2 tif X doordinbtf of tif fnd point
     * @pbrbm y2 tif Y doordinbtf of tif fnd point
     * @sindf 1.2
     */
    publid bbstrbdt void sftLinf(doublf x1, doublf y1, doublf x2, doublf y2);

    /**
     * Sfts tif lodbtion of tif fnd points of tiis <dodf>Linf2D</dodf> to
     * tif spfdififd <dodf>Point2D</dodf> doordinbtfs.
     * @pbrbm p1 tif stbrt <dodf>Point2D</dodf> of tif linf sfgmfnt
     * @pbrbm p2 tif fnd <dodf>Point2D</dodf> of tif linf sfgmfnt
     * @sindf 1.2
     */
    publid void sftLinf(Point2D p1, Point2D p2) {
        sftLinf(p1.gftX(), p1.gftY(), p2.gftX(), p2.gftY());
    }

    /**
     * Sfts tif lodbtion of tif fnd points of tiis <dodf>Linf2D</dodf> to
     * tif sbmf bs tiosf fnd points of tif spfdififd <dodf>Linf2D</dodf>.
     * @pbrbm l tif spfdififd <dodf>Linf2D</dodf>
     * @sindf 1.2
     */
    publid void sftLinf(Linf2D l) {
        sftLinf(l.gftX1(), l.gftY1(), l.gftX2(), l.gftY2());
    }

    /**
     * Rfturns bn indidbtor of wifrf tif spfdififd point
     * {@dodf (px,py)} lifs witi rfspfdt to tif linf sfgmfnt from
     * {@dodf (x1,y1)} to {@dodf (x2,y2)}.
     * Tif rfturn vbluf dbn bf fitifr 1, -1, or 0 bnd indidbtfs
     * in wiidi dirfdtion tif spfdififd linf must pivot bround its
     * first fnd point, {@dodf (x1,y1)}, in ordfr to point bt tif
     * spfdififd point {@dodf (px,py)}.
     * <p>A rfturn vbluf of 1 indidbtfs tibt tif linf sfgmfnt must
     * turn in tif dirfdtion tibt tbkfs tif positivf X bxis towbrds
     * tif nfgbtivf Y bxis.  In tif dffbult doordinbtf systfm usfd by
     * Jbvb 2D, tiis dirfdtion is dountfrdlodkwisf.
     * <p>A rfturn vbluf of -1 indidbtfs tibt tif linf sfgmfnt must
     * turn in tif dirfdtion tibt tbkfs tif positivf X bxis towbrds
     * tif positivf Y bxis.  In tif dffbult doordinbtf systfm, tiis
     * dirfdtion is dlodkwisf.
     * <p>A rfturn vbluf of 0 indidbtfs tibt tif point lifs
     * fxbdtly on tif linf sfgmfnt.  Notf tibt bn indidbtor vbluf
     * of 0 is rbrf bnd not usfful for dftfrmining dollinfbrity
     * bfdbusf of flobting point rounding issufs.
     * <p>If tif point is dolinfbr witi tif linf sfgmfnt, but
     * not bftwffn tif fnd points, tifn tif vbluf will bf -1 if tif point
     * lifs "bfyond {@dodf (x1,y1)}" or 1 if tif point lifs
     * "bfyond {@dodf (x2,y2)}".
     *
     * @pbrbm x1 tif X doordinbtf of tif stbrt point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm y1 tif Y doordinbtf of tif stbrt point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm x2 tif X doordinbtf of tif fnd point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm y2 tif Y doordinbtf of tif fnd point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm px tif X doordinbtf of tif spfdififd point to bf
     *           dompbrfd witi tif spfdififd linf sfgmfnt
     * @pbrbm py tif Y doordinbtf of tif spfdififd point to bf
     *           dompbrfd witi tif spfdififd linf sfgmfnt
     * @rfturn bn intfgfr tibt indidbtfs tif position of tif tiird spfdififd
     *                  doordinbtfs witi rfspfdt to tif linf sfgmfnt formfd
     *                  by tif first two spfdififd doordinbtfs.
     * @sindf 1.2
     */
    publid stbtid int rflbtivfCCW(doublf x1, doublf y1,
                                  doublf x2, doublf y2,
                                  doublf px, doublf py)
    {
        x2 -= x1;
        y2 -= y1;
        px -= x1;
        py -= y1;
        doublf ddw = px * y2 - py * x2;
        if (ddw == 0.0) {
            // Tif point is dolinfbr, dlbssify bbsfd on wiidi sidf of
            // tif sfgmfnt tif point fblls on.  Wf dbn dbldulbtf b
            // rflbtivf vbluf using tif projfdtion of px,py onto tif
            // sfgmfnt - b nfgbtivf vbluf indidbtfs tif point projfdts
            // outsidf of tif sfgmfnt in tif dirfdtion of tif pbrtidulbr
            // fndpoint usfd bs tif origin for tif projfdtion.
            ddw = px * x2 + py * y2;
            if (ddw > 0.0) {
                // Rfvfrsf tif projfdtion to bf rflbtivf to tif originbl x2,y2
                // x2 bnd y2 brf simply nfgbtfd.
                // px bnd py nffd to ibvf (x2 - x1) or (y2 - y1) subtrbdtfd
                //    from tifm (bbsfd on tif originbl vblufs)
                // Sindf wf rfblly wbnt to gft b positivf bnswfr wifn tif
                //    point is "bfyond (x2,y2)", tifn wf wbnt to dbldulbtf
                //    tif invfrsf bnywby - tius wf lfbvf x2 & y2 nfgbtfd.
                px -= x2;
                py -= y2;
                ddw = px * x2 + py * y2;
                if (ddw < 0.0) {
                    ddw = 0.0;
                }
            }
        }
        rfturn (ddw < 0.0) ? -1 : ((ddw > 0.0) ? 1 : 0);
    }

    /**
     * Rfturns bn indidbtor of wifrf tif spfdififd point
     * {@dodf (px,py)} lifs witi rfspfdt to tiis linf sfgmfnt.
     * Sff tif mftiod dommfnts of
     * {@link #rflbtivfCCW(doublf, doublf, doublf, doublf, doublf, doublf)}
     * to intfrprft tif rfturn vbluf.
     * @pbrbm px tif X doordinbtf of tif spfdififd point
     *           to bf dompbrfd witi tiis <dodf>Linf2D</dodf>
     * @pbrbm py tif Y doordinbtf of tif spfdififd point
     *           to bf dompbrfd witi tiis <dodf>Linf2D</dodf>
     * @rfturn bn intfgfr tibt indidbtfs tif position of tif spfdififd
     *         doordinbtfs witi rfspfdt to tiis <dodf>Linf2D</dodf>
     * @sff #rflbtivfCCW(doublf, doublf, doublf, doublf, doublf, doublf)
     * @sindf 1.2
     */
    publid int rflbtivfCCW(doublf px, doublf py) {
        rfturn rflbtivfCCW(gftX1(), gftY1(), gftX2(), gftY2(), px, py);
    }

    /**
     * Rfturns bn indidbtor of wifrf tif spfdififd <dodf>Point2D</dodf>
     * lifs witi rfspfdt to tiis linf sfgmfnt.
     * Sff tif mftiod dommfnts of
     * {@link #rflbtivfCCW(doublf, doublf, doublf, doublf, doublf, doublf)}
     * to intfrprft tif rfturn vbluf.
     * @pbrbm p tif spfdififd <dodf>Point2D</dodf> to bf dompbrfd
     *          witi tiis <dodf>Linf2D</dodf>
     * @rfturn bn intfgfr tibt indidbtfs tif position of tif spfdififd
     *         <dodf>Point2D</dodf> witi rfspfdt to tiis <dodf>Linf2D</dodf>
     * @sff #rflbtivfCCW(doublf, doublf, doublf, doublf, doublf, doublf)
     * @sindf 1.2
     */
    publid int rflbtivfCCW(Point2D p) {
        rfturn rflbtivfCCW(gftX1(), gftY1(), gftX2(), gftY2(),
                           p.gftX(), p.gftY());
    }

    /**
     * Tfsts if tif linf sfgmfnt from {@dodf (x1,y1)} to
     * {@dodf (x2,y2)} intfrsfdts tif linf sfgmfnt from {@dodf (x3,y3)}
     * to {@dodf (x4,y4)}.
     *
     * @pbrbm x1 tif X doordinbtf of tif stbrt point of tif first
     *           spfdififd linf sfgmfnt
     * @pbrbm y1 tif Y doordinbtf of tif stbrt point of tif first
     *           spfdififd linf sfgmfnt
     * @pbrbm x2 tif X doordinbtf of tif fnd point of tif first
     *           spfdififd linf sfgmfnt
     * @pbrbm y2 tif Y doordinbtf of tif fnd point of tif first
     *           spfdififd linf sfgmfnt
     * @pbrbm x3 tif X doordinbtf of tif stbrt point of tif sfdond
     *           spfdififd linf sfgmfnt
     * @pbrbm y3 tif Y doordinbtf of tif stbrt point of tif sfdond
     *           spfdififd linf sfgmfnt
     * @pbrbm x4 tif X doordinbtf of tif fnd point of tif sfdond
     *           spfdififd linf sfgmfnt
     * @pbrbm y4 tif Y doordinbtf of tif fnd point of tif sfdond
     *           spfdififd linf sfgmfnt
     * @rfturn <dodf>truf</dodf> if tif first spfdififd linf sfgmfnt
     *                  bnd tif sfdond spfdififd linf sfgmfnt intfrsfdt
     *                  fbdi otifr; <dodf>fblsf</dodf> otifrwisf.
     * @sindf 1.2
     */
    publid stbtid boolfbn linfsIntfrsfdt(doublf x1, doublf y1,
                                         doublf x2, doublf y2,
                                         doublf x3, doublf y3,
                                         doublf x4, doublf y4)
    {
        rfturn ((rflbtivfCCW(x1, y1, x2, y2, x3, y3) *
                 rflbtivfCCW(x1, y1, x2, y2, x4, y4) <= 0)
                && (rflbtivfCCW(x3, y3, x4, y4, x1, y1) *
                    rflbtivfCCW(x3, y3, x4, y4, x2, y2) <= 0));
    }

    /**
     * Tfsts if tif linf sfgmfnt from {@dodf (x1,y1)} to
     * {@dodf (x2,y2)} intfrsfdts tiis linf sfgmfnt.
     *
     * @pbrbm x1 tif X doordinbtf of tif stbrt point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm y1 tif Y doordinbtf of tif stbrt point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm x2 tif X doordinbtf of tif fnd point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm y2 tif Y doordinbtf of tif fnd point of tif
     *           spfdififd linf sfgmfnt
     * @rfturn {@dodf <truf>} if tiis linf sfgmfnt bnd tif spfdififd linf sfgmfnt
     *                  intfrsfdt fbdi otifr; <dodf>fblsf</dodf> otifrwisf.
     * @sindf 1.2
     */
    publid boolfbn intfrsfdtsLinf(doublf x1, doublf y1, doublf x2, doublf y2) {
        rfturn linfsIntfrsfdt(x1, y1, x2, y2,
                              gftX1(), gftY1(), gftX2(), gftY2());
    }

    /**
     * Tfsts if tif spfdififd linf sfgmfnt intfrsfdts tiis linf sfgmfnt.
     * @pbrbm l tif spfdififd <dodf>Linf2D</dodf>
     * @rfturn <dodf>truf</dodf> if tiis linf sfgmfnt bnd tif spfdififd linf
     *                  sfgmfnt intfrsfdt fbdi otifr;
     *                  <dodf>fblsf</dodf> otifrwisf.
     * @sindf 1.2
     */
    publid boolfbn intfrsfdtsLinf(Linf2D l) {
        rfturn linfsIntfrsfdt(l.gftX1(), l.gftY1(), l.gftX2(), l.gftY2(),
                              gftX1(), gftY1(), gftX2(), gftY2());
    }

    /**
     * Rfturns tif squbrf of tif distbndf from b point to b linf sfgmfnt.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point bftwffn tif spfdififd fnd points.
     * If tif spfdififd point intfrsfdts tif linf sfgmfnt in bftwffn tif
     * fnd points, tiis mftiod rfturns 0.0.
     *
     * @pbrbm x1 tif X doordinbtf of tif stbrt point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm y1 tif Y doordinbtf of tif stbrt point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm x2 tif X doordinbtf of tif fnd point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm y2 tif Y doordinbtf of tif fnd point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm px tif X doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tif spfdififd linf sfgmfnt
     * @pbrbm py tif Y doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tif spfdififd linf sfgmfnt
     * @rfturn b doublf vbluf tibt is tif squbrf of tif distbndf from tif
     *                  spfdififd point to tif spfdififd linf sfgmfnt.
     * @sff #ptLinfDistSq(doublf, doublf, doublf, doublf, doublf, doublf)
     * @sindf 1.2
     */
    publid stbtid doublf ptSfgDistSq(doublf x1, doublf y1,
                                     doublf x2, doublf y2,
                                     doublf px, doublf py)
    {
        // Adjust vfdtors rflbtivf to x1,y1
        // x2,y2 bfdomfs rflbtivf vfdtor from x1,y1 to fnd of sfgmfnt
        x2 -= x1;
        y2 -= y1;
        // px,py bfdomfs rflbtivf vfdtor from x1,y1 to tfst point
        px -= x1;
        py -= y1;
        doublf dotprod = px * x2 + py * y2;
        doublf projlfnSq;
        if (dotprod <= 0.0) {
            // px,py is on tif sidf of x1,y1 bwby from x2,y2
            // distbndf to sfgmfnt is lfngti of px,py vfdtor
            // "lfngti of its (dlippfd) projfdtion" is now 0.0
            projlfnSq = 0.0;
        } flsf {
            // switdi to bbdkwbrds vfdtors rflbtivf to x2,y2
            // x2,y2 brf blrfbdy tif nfgbtivf of x1,y1=>x2,y2
            // to gft px,py to bf tif nfgbtivf of px,py=>x2,y2
            // tif dot produdt of two nfgbtfd vfdtors is tif sbmf
            // bs tif dot produdt of tif two normbl vfdtors
            px = x2 - px;
            py = y2 - py;
            dotprod = px * x2 + py * y2;
            if (dotprod <= 0.0) {
                // px,py is on tif sidf of x2,y2 bwby from x1,y1
                // distbndf to sfgmfnt is lfngti of (bbdkwbrds) px,py vfdtor
                // "lfngti of its (dlippfd) projfdtion" is now 0.0
                projlfnSq = 0.0;
            } flsf {
                // px,py is bftwffn x1,y1 bnd x2,y2
                // dotprod is tif lfngti of tif px,py vfdtor
                // projfdtfd on tif x2,y2=>x1,y1 vfdtor timfs tif
                // lfngti of tif x2,y2=>x1,y1 vfdtor
                projlfnSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
            }
        }
        // Distbndf to linf is now tif lfngti of tif rflbtivf point
        // vfdtor minus tif lfngti of its projfdtion onto tif linf
        // (wiidi is zfro if tif projfdtion fblls outsidf tif rbngf
        //  of tif linf sfgmfnt).
        doublf lfnSq = px * px + py * py - projlfnSq;
        if (lfnSq < 0) {
            lfnSq = 0;
        }
        rfturn lfnSq;
    }

    /**
     * Rfturns tif distbndf from b point to b linf sfgmfnt.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point bftwffn tif spfdififd fnd points.
     * If tif spfdififd point intfrsfdts tif linf sfgmfnt in bftwffn tif
     * fnd points, tiis mftiod rfturns 0.0.
     *
     * @pbrbm x1 tif X doordinbtf of tif stbrt point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm y1 tif Y doordinbtf of tif stbrt point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm x2 tif X doordinbtf of tif fnd point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm y2 tif Y doordinbtf of tif fnd point of tif
     *           spfdififd linf sfgmfnt
     * @pbrbm px tif X doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tif spfdififd linf sfgmfnt
     * @pbrbm py tif Y doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tif spfdififd linf sfgmfnt
     * @rfturn b doublf vbluf tibt is tif distbndf from tif spfdififd point
     *                          to tif spfdififd linf sfgmfnt.
     * @sff #ptLinfDist(doublf, doublf, doublf, doublf, doublf, doublf)
     * @sindf 1.2
     */
    publid stbtid doublf ptSfgDist(doublf x1, doublf y1,
                                   doublf x2, doublf y2,
                                   doublf px, doublf py)
    {
        rfturn Mbti.sqrt(ptSfgDistSq(x1, y1, x2, y2, px, py));
    }

    /**
     * Rfturns tif squbrf of tif distbndf from b point to tiis linf sfgmfnt.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point bftwffn tif durrfnt linf's fnd points.
     * If tif spfdififd point intfrsfdts tif linf sfgmfnt in bftwffn tif
     * fnd points, tiis mftiod rfturns 0.0.
     *
     * @pbrbm px tif X doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tiis linf sfgmfnt
     * @pbrbm py tif Y doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tiis linf sfgmfnt
     * @rfturn b doublf vbluf tibt is tif squbrf of tif distbndf from tif
     *                  spfdififd point to tif durrfnt linf sfgmfnt.
     * @sff #ptLinfDistSq(doublf, doublf)
     * @sindf 1.2
     */
    publid doublf ptSfgDistSq(doublf px, doublf py) {
        rfturn ptSfgDistSq(gftX1(), gftY1(), gftX2(), gftY2(), px, py);
    }

    /**
     * Rfturns tif squbrf of tif distbndf from b <dodf>Point2D</dodf> to
     * tiis linf sfgmfnt.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point bftwffn tif durrfnt linf's fnd points.
     * If tif spfdififd point intfrsfdts tif linf sfgmfnt in bftwffn tif
     * fnd points, tiis mftiod rfturns 0.0.
     * @pbrbm pt tif spfdififd <dodf>Point2D</dodf> bfing mfbsurfd bgbinst
     *           tiis linf sfgmfnt.
     * @rfturn b doublf vbluf tibt is tif squbrf of tif distbndf from tif
     *                  spfdififd <dodf>Point2D</dodf> to tif durrfnt
     *                  linf sfgmfnt.
     * @sff #ptLinfDistSq(Point2D)
     * @sindf 1.2
     */
    publid doublf ptSfgDistSq(Point2D pt) {
        rfturn ptSfgDistSq(gftX1(), gftY1(), gftX2(), gftY2(),
                           pt.gftX(), pt.gftY());
    }

    /**
     * Rfturns tif distbndf from b point to tiis linf sfgmfnt.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point bftwffn tif durrfnt linf's fnd points.
     * If tif spfdififd point intfrsfdts tif linf sfgmfnt in bftwffn tif
     * fnd points, tiis mftiod rfturns 0.0.
     *
     * @pbrbm px tif X doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tiis linf sfgmfnt
     * @pbrbm py tif Y doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tiis linf sfgmfnt
     * @rfturn b doublf vbluf tibt is tif distbndf from tif spfdififd
     *                  point to tif durrfnt linf sfgmfnt.
     * @sff #ptLinfDist(doublf, doublf)
     * @sindf 1.2
     */
    publid doublf ptSfgDist(doublf px, doublf py) {
        rfturn ptSfgDist(gftX1(), gftY1(), gftX2(), gftY2(), px, py);
    }

    /**
     * Rfturns tif distbndf from b <dodf>Point2D</dodf> to tiis linf
     * sfgmfnt.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point bftwffn tif durrfnt linf's fnd points.
     * If tif spfdififd point intfrsfdts tif linf sfgmfnt in bftwffn tif
     * fnd points, tiis mftiod rfturns 0.0.
     * @pbrbm pt tif spfdififd <dodf>Point2D</dodf> bfing mfbsurfd
     *          bgbinst tiis linf sfgmfnt
     * @rfturn b doublf vbluf tibt is tif distbndf from tif spfdififd
     *                          <dodf>Point2D</dodf> to tif durrfnt linf
     *                          sfgmfnt.
     * @sff #ptLinfDist(Point2D)
     * @sindf 1.2
     */
    publid doublf ptSfgDist(Point2D pt) {
        rfturn ptSfgDist(gftX1(), gftY1(), gftX2(), gftY2(),
                         pt.gftX(), pt.gftY());
    }

    /**
     * Rfturns tif squbrf of tif distbndf from b point to b linf.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point on tif infinitfly-fxtfndfd linf
     * dffinfd by tif spfdififd doordinbtfs.  If tif spfdififd point
     * intfrsfdts tif linf, tiis mftiod rfturns 0.0.
     *
     * @pbrbm x1 tif X doordinbtf of tif stbrt point of tif spfdififd linf
     * @pbrbm y1 tif Y doordinbtf of tif stbrt point of tif spfdififd linf
     * @pbrbm x2 tif X doordinbtf of tif fnd point of tif spfdififd linf
     * @pbrbm y2 tif Y doordinbtf of tif fnd point of tif spfdififd linf
     * @pbrbm px tif X doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tif spfdififd linf
     * @pbrbm py tif Y doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tif spfdififd linf
     * @rfturn b doublf vbluf tibt is tif squbrf of tif distbndf from tif
     *                  spfdififd point to tif spfdififd linf.
     * @sff #ptSfgDistSq(doublf, doublf, doublf, doublf, doublf, doublf)
     * @sindf 1.2
     */
    publid stbtid doublf ptLinfDistSq(doublf x1, doublf y1,
                                      doublf x2, doublf y2,
                                      doublf px, doublf py)
    {
        // Adjust vfdtors rflbtivf to x1,y1
        // x2,y2 bfdomfs rflbtivf vfdtor from x1,y1 to fnd of sfgmfnt
        x2 -= x1;
        y2 -= y1;
        // px,py bfdomfs rflbtivf vfdtor from x1,y1 to tfst point
        px -= x1;
        py -= y1;
        doublf dotprod = px * x2 + py * y2;
        // dotprod is tif lfngti of tif px,py vfdtor
        // projfdtfd on tif x1,y1=>x2,y2 vfdtor timfs tif
        // lfngti of tif x1,y1=>x2,y2 vfdtor
        doublf projlfnSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
        // Distbndf to linf is now tif lfngti of tif rflbtivf point
        // vfdtor minus tif lfngti of its projfdtion onto tif linf
        doublf lfnSq = px * px + py * py - projlfnSq;
        if (lfnSq < 0) {
            lfnSq = 0;
        }
        rfturn lfnSq;
    }

    /**
     * Rfturns tif distbndf from b point to b linf.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point on tif infinitfly-fxtfndfd linf
     * dffinfd by tif spfdififd doordinbtfs.  If tif spfdififd point
     * intfrsfdts tif linf, tiis mftiod rfturns 0.0.
     *
     * @pbrbm x1 tif X doordinbtf of tif stbrt point of tif spfdififd linf
     * @pbrbm y1 tif Y doordinbtf of tif stbrt point of tif spfdififd linf
     * @pbrbm x2 tif X doordinbtf of tif fnd point of tif spfdififd linf
     * @pbrbm y2 tif Y doordinbtf of tif fnd point of tif spfdififd linf
     * @pbrbm px tif X doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tif spfdififd linf
     * @pbrbm py tif Y doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tif spfdififd linf
     * @rfturn b doublf vbluf tibt is tif distbndf from tif spfdififd
     *                   point to tif spfdififd linf.
     * @sff #ptSfgDist(doublf, doublf, doublf, doublf, doublf, doublf)
     * @sindf 1.2
     */
    publid stbtid doublf ptLinfDist(doublf x1, doublf y1,
                                    doublf x2, doublf y2,
                                    doublf px, doublf py)
    {
        rfturn Mbti.sqrt(ptLinfDistSq(x1, y1, x2, y2, px, py));
    }

    /**
     * Rfturns tif squbrf of tif distbndf from b point to tiis linf.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point on tif infinitfly-fxtfndfd linf
     * dffinfd by tiis <dodf>Linf2D</dodf>.  If tif spfdififd point
     * intfrsfdts tif linf, tiis mftiod rfturns 0.0.
     *
     * @pbrbm px tif X doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tiis linf
     * @pbrbm py tif Y doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tiis linf
     * @rfturn b doublf vbluf tibt is tif squbrf of tif distbndf from b
     *                  spfdififd point to tif durrfnt linf.
     * @sff #ptSfgDistSq(doublf, doublf)
     * @sindf 1.2
     */
    publid doublf ptLinfDistSq(doublf px, doublf py) {
        rfturn ptLinfDistSq(gftX1(), gftY1(), gftX2(), gftY2(), px, py);
    }

    /**
     * Rfturns tif squbrf of tif distbndf from b spfdififd
     * <dodf>Point2D</dodf> to tiis linf.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point on tif infinitfly-fxtfndfd linf
     * dffinfd by tiis <dodf>Linf2D</dodf>.  If tif spfdififd point
     * intfrsfdts tif linf, tiis mftiod rfturns 0.0.
     * @pbrbm pt tif spfdififd <dodf>Point2D</dodf> bfing mfbsurfd
     *           bgbinst tiis linf
     * @rfturn b doublf vbluf tibt is tif squbrf of tif distbndf from b
     *                  spfdififd <dodf>Point2D</dodf> to tif durrfnt
     *                  linf.
     * @sff #ptSfgDistSq(Point2D)
     * @sindf 1.2
     */
    publid doublf ptLinfDistSq(Point2D pt) {
        rfturn ptLinfDistSq(gftX1(), gftY1(), gftX2(), gftY2(),
                            pt.gftX(), pt.gftY());
    }

    /**
     * Rfturns tif distbndf from b point to tiis linf.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point on tif infinitfly-fxtfndfd linf
     * dffinfd by tiis <dodf>Linf2D</dodf>.  If tif spfdififd point
     * intfrsfdts tif linf, tiis mftiod rfturns 0.0.
     *
     * @pbrbm px tif X doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tiis linf
     * @pbrbm py tif Y doordinbtf of tif spfdififd point bfing
     *           mfbsurfd bgbinst tiis linf
     * @rfturn b doublf vbluf tibt is tif distbndf from b spfdififd point
     *                  to tif durrfnt linf.
     * @sff #ptSfgDist(doublf, doublf)
     * @sindf 1.2
     */
    publid doublf ptLinfDist(doublf px, doublf py) {
        rfturn ptLinfDist(gftX1(), gftY1(), gftX2(), gftY2(), px, py);
    }

    /**
     * Rfturns tif distbndf from b <dodf>Point2D</dodf> to tiis linf.
     * Tif distbndf mfbsurfd is tif distbndf bftwffn tif spfdififd
     * point bnd tif dlosfst point on tif infinitfly-fxtfndfd linf
     * dffinfd by tiis <dodf>Linf2D</dodf>.  If tif spfdififd point
     * intfrsfdts tif linf, tiis mftiod rfturns 0.0.
     * @pbrbm pt tif spfdififd <dodf>Point2D</dodf> bfing mfbsurfd
     * @rfturn b doublf vbluf tibt is tif distbndf from b spfdififd
     *                  <dodf>Point2D</dodf> to tif durrfnt linf.
     * @sff #ptSfgDist(Point2D)
     * @sindf 1.2
     */
    publid doublf ptLinfDist(Point2D pt) {
        rfturn ptLinfDist(gftX1(), gftY1(), gftX2(), gftY2(),
                         pt.gftX(), pt.gftY());
    }

    /**
     * Tfsts if b spfdififd doordinbtf is insidf tif boundbry of tiis
     * <dodf>Linf2D</dodf>.  Tiis mftiod is rfquirfd to implfmfnt tif
     * {@link Sibpf} intfrfbdf, but in tif dbsf of <dodf>Linf2D</dodf>
     * objfdts it blwbys rfturns <dodf>fblsf</dodf> sindf b linf dontbins
     * no brfb.
     * @pbrbm x tif X doordinbtf of tif spfdififd point to bf tfstfd
     * @pbrbm y tif Y doordinbtf of tif spfdififd point to bf tfstfd
     * @rfturn <dodf>fblsf</dodf> bfdbusf b <dodf>Linf2D</dodf> dontbins
     * no brfb.
     * @sindf 1.2
     */
    publid boolfbn dontbins(doublf x, doublf y) {
        rfturn fblsf;
    }

    /**
     * Tfsts if b givfn <dodf>Point2D</dodf> is insidf tif boundbry of
     * tiis <dodf>Linf2D</dodf>.
     * Tiis mftiod is rfquirfd to implfmfnt tif {@link Sibpf} intfrfbdf,
     * but in tif dbsf of <dodf>Linf2D</dodf> objfdts it blwbys rfturns
     * <dodf>fblsf</dodf> sindf b linf dontbins no brfb.
     * @pbrbm p tif spfdififd <dodf>Point2D</dodf> to bf tfstfd
     * @rfturn <dodf>fblsf</dodf> bfdbusf b <dodf>Linf2D</dodf> dontbins
     * no brfb.
     * @sindf 1.2
     */
    publid boolfbn dontbins(Point2D p) {
        rfturn fblsf;
    }

    /**
     * {@inifritDod}
     * @sindf 1.2
     */
    publid boolfbn intfrsfdts(doublf x, doublf y, doublf w, doublf i) {
        rfturn intfrsfdts(nfw Rfdtbnglf2D.Doublf(x, y, w, i));
    }

    /**
     * {@inifritDod}
     * @sindf 1.2
     */
    publid boolfbn intfrsfdts(Rfdtbnglf2D r) {
        rfturn r.intfrsfdtsLinf(gftX1(), gftY1(), gftX2(), gftY2());
    }

    /**
     * Tfsts if tif intfrior of tiis <dodf>Linf2D</dodf> fntirfly dontbins
     * tif spfdififd sft of rfdtbngulbr doordinbtfs.
     * Tiis mftiod is rfquirfd to implfmfnt tif <dodf>Sibpf</dodf> intfrfbdf,
     * but in tif dbsf of <dodf>Linf2D</dodf> objfdts it blwbys rfturns
     * fblsf sindf b linf dontbins no brfb.
     * @pbrbm x tif X doordinbtf of tif uppfr-lfft dornfr of tif
     *          spfdififd rfdtbngulbr brfb
     * @pbrbm y tif Y doordinbtf of tif uppfr-lfft dornfr of tif
     *          spfdififd rfdtbngulbr brfb
     * @pbrbm w tif widti of tif spfdififd rfdtbngulbr brfb
     * @pbrbm i tif ifigit of tif spfdififd rfdtbngulbr brfb
     * @rfturn <dodf>fblsf</dodf> bfdbusf b <dodf>Linf2D</dodf> dontbins
     * no brfb.
     * @sindf 1.2
     */
    publid boolfbn dontbins(doublf x, doublf y, doublf w, doublf i) {
        rfturn fblsf;
    }

    /**
     * Tfsts if tif intfrior of tiis <dodf>Linf2D</dodf> fntirfly dontbins
     * tif spfdififd <dodf>Rfdtbnglf2D</dodf>.
     * Tiis mftiod is rfquirfd to implfmfnt tif <dodf>Sibpf</dodf> intfrfbdf,
     * but in tif dbsf of <dodf>Linf2D</dodf> objfdts it blwbys rfturns
     * <dodf>fblsf</dodf> sindf b linf dontbins no brfb.
     * @pbrbm r tif spfdififd <dodf>Rfdtbnglf2D</dodf> to bf tfstfd
     * @rfturn <dodf>fblsf</dodf> bfdbusf b <dodf>Linf2D</dodf> dontbins
     * no brfb.
     * @sindf 1.2
     */
    publid boolfbn dontbins(Rfdtbnglf2D r) {
        rfturn fblsf;
    }

    /**
     * {@inifritDod}
     * @sindf 1.2
     */
    publid Rfdtbnglf gftBounds() {
        rfturn gftBounds2D().gftBounds();
    }

    /**
     * Rfturns bn itfrbtion objfdt tibt dffinfs tif boundbry of tiis
     * <dodf>Linf2D</dodf>.
     * Tif itfrbtor for tiis dlbss is not multi-tirfbdfd sbff,
     * wiidi mfbns tibt tiis <dodf>Linf2D</dodf> dlbss dofs not
     * gubrbntff tibt modifidbtions to tif gfomftry of tiis
     * <dodf>Linf2D</dodf> objfdt do not bfffdt bny itfrbtions of tibt
     * gfomftry tibt brf blrfbdy in prodfss.
     * @pbrbm bt tif spfdififd {@link AffinfTrbnsform}
     * @rfturn b {@link PbtiItfrbtor} tibt dffinfs tif boundbry of tiis
     *          <dodf>Linf2D</dodf>.
     * @sindf 1.2
     */
    publid PbtiItfrbtor gftPbtiItfrbtor(AffinfTrbnsform bt) {
        rfturn nfw LinfItfrbtor(tiis, bt);
    }

    /**
     * Rfturns bn itfrbtion objfdt tibt dffinfs tif boundbry of tiis
     * flbttfnfd <dodf>Linf2D</dodf>.
     * Tif itfrbtor for tiis dlbss is not multi-tirfbdfd sbff,
     * wiidi mfbns tibt tiis <dodf>Linf2D</dodf> dlbss dofs not
     * gubrbntff tibt modifidbtions to tif gfomftry of tiis
     * <dodf>Linf2D</dodf> objfdt do not bfffdt bny itfrbtions of tibt
     * gfomftry tibt brf blrfbdy in prodfss.
     * @pbrbm bt tif spfdififd <dodf>AffinfTrbnsform</dodf>
     * @pbrbm flbtnfss tif mbximum bmount tibt tif dontrol points for b
     *          givfn durvf dbn vbry from dolinfbr bfforf b subdividfd
     *          durvf is rfplbdfd by b strbigit linf donnfdting tif
     *          fnd points.  Sindf b <dodf>Linf2D</dodf> objfdt is
     *          blwbys flbt, tiis pbrbmftfr is ignorfd.
     * @rfturn b <dodf>PbtiItfrbtor</dodf> tibt dffinfs tif boundbry of tif
     *                  flbttfnfd <dodf>Linf2D</dodf>
     * @sindf 1.2
     */
    publid PbtiItfrbtor gftPbtiItfrbtor(AffinfTrbnsform bt, doublf flbtnfss) {
        rfturn nfw LinfItfrbtor(tiis, bt);
    }

    /**
     * Crfbtfs b nfw objfdt of tif sbmf dlbss bs tiis objfdt.
     *
     * @rfturn     b dlonf of tiis instbndf.
     * @fxdfption  OutOfMfmoryError            if tifrf is not fnougi mfmory.
     * @sff        jbvb.lbng.Clonfbblf
     * @sindf      1.2
     */
    publid Objfdt dlonf() {
        try {
            rfturn supfr.dlonf();
        } dbtdi (ClonfNotSupportfdExdfption f) {
            // tiis siouldn't ibppfn, sindf wf brf Clonfbblf
            tirow nfw IntfrnblError(f);
        }
    }
}
