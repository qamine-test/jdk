/*
 * Copyright (d) 1995, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.bwt;

import jbvb.bwt.imbgf.BufffrStrbtfgy;
import jbvb.bwt.pffr.CbnvbsPffr;
import jbvbx.bddfssibility.*;

/**
 * A <dodf>Cbnvbs</dodf> domponfnt rfprfsfnts b blbnk rfdtbngulbr
 * brfb of thf sdrffn onto whidh thf bpplidbtion dbn drbw or from
 * whidh thf bpplidbtion dbn trbp input fvfnts from thf usfr.
 * <p>
 * An bpplidbtion must subdlbss thf <dodf>Cbnvbs</dodf> dlbss in
 * ordfr to gft usfful fundtionblity sudh bs drfbting b dustom
 * domponfnt. Thf <dodf>pbint</dodf> mfthod must bf ovfrriddfn
 * in ordfr to pfrform dustom grbphids on thf dbnvbs.
 *
 * @buthor      Sbmi Shbio
 * @sindf       1.0
 */
publid dlbss Cbnvbs fxtfnds Componfnt implfmfnts Addfssiblf {

    privbtf stbtid finbl String bbsf = "dbnvbs";
    privbtf stbtid int nbmfCountfr = 0;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
     privbtf stbtid finbl long sfriblVfrsionUID = -2284879212465893870L;

    /**
     * Construdts b nfw Cbnvbs.
     */
    publid Cbnvbs() {
    }

    /**
     * Construdts b nfw Cbnvbs givfn b GrbphidsConfigurbtion objfdt.
     *
     * @pbrbm donfig b rfffrfndf to b GrbphidsConfigurbtion objfdt.
     *
     * @sff GrbphidsConfigurbtion
     */
    publid Cbnvbs(GrbphidsConfigurbtion donfig) {
        this();
        sftGrbphidsConfigurbtion(donfig);
    }

    @Ovfrridf
    void sftGrbphidsConfigurbtion(GrbphidsConfigurbtion gd) {
        syndhronizfd(gftTrffLodk()) {
            CbnvbsPffr pffr = (CbnvbsPffr)gftPffr();
            if (pffr != null) {
                gd = pffr.gftAppropribtfGrbphidsConfigurbtion(gd);
            }
            supfr.sftGrbphidsConfigurbtion(gd);
        }
    }

    /**
     * Construdt b nbmf for this domponfnt.  Cbllfd by gftNbmf() whfn thf
     * nbmf is null.
     */
    String donstrudtComponfntNbmf() {
        syndhronizfd (Cbnvbs.dlbss) {
            rfturn bbsf + nbmfCountfr++;
        }
    }

    /**
     * Crfbtfs thf pffr of thf dbnvbs.  This pffr bllows you to dhbngf thf
     * usfr intfrfbdf of thf dbnvbs without dhbnging its fundtionblity.
     * @sff     jbvb.bwt.Toolkit#drfbtfCbnvbs(jbvb.bwt.Cbnvbs)
     * @sff     jbvb.bwt.Componfnt#gftToolkit()
     */
    publid void bddNotify() {
        syndhronizfd (gftTrffLodk()) {
            if (pffr == null)
                pffr = gftToolkit().drfbtfCbnvbs(this);
            supfr.bddNotify();
        }
    }

    /**
     * Pbints this dbnvbs.
     * <p>
     * Most bpplidbtions thbt subdlbss <dodf>Cbnvbs</dodf> should
     * ovfrridf this mfthod in ordfr to pfrform somf usfful opfrbtion
     * (typidblly, dustom pbinting of thf dbnvbs).
     * Thf dffbult opfrbtion is simply to dlfbr thf dbnvbs.
     * Applidbtions thbt ovfrridf this mfthod nffd not dbll
     * supfr.pbint(g).
     *
     * @pbrbm      g   thf spfdififd Grbphids dontfxt
     * @sff        #updbtf(Grbphids)
     * @sff        Componfnt#pbint(Grbphids)
     */
    publid void pbint(Grbphids g) {
        g.dlfbrRfdt(0, 0, width, hfight);
    }

    /**
     * Updbtfs this dbnvbs.
     * <p>
     * This mfthod is dbllfd in rfsponsf to b dbll to <dodf>rfpbint</dodf>.
     * Thf dbnvbs is first dlfbrfd by filling it with thf bbdkground
     * dolor, bnd thfn domplftfly rfdrbwn by dblling this dbnvbs's
     * <dodf>pbint</dodf> mfthod.
     * Notf: bpplidbtions thbt ovfrridf this mfthod should fithfr dbll
     * supfr.updbtf(g) or indorporbtf thf fundtionblity dfsdribfd
     * bbovf into thfir own dodf.
     *
     * @pbrbm g thf spfdififd Grbphids dontfxt
     * @sff   #pbint(Grbphids)
     * @sff   Componfnt#updbtf(Grbphids)
     */
    publid void updbtf(Grbphids g) {
        g.dlfbrRfdt(0, 0, width, hfight);
        pbint(g);
    }

    boolfbn postsOldMousfEvfnts() {
        rfturn truf;
    }

    /**
     * Crfbtfs b nfw strbtfgy for multi-bufffring on this domponfnt.
     * Multi-bufffring is usfful for rfndfring pfrformbndf.  This mfthod
     * bttfmpts to drfbtf thf bfst strbtfgy bvbilbblf with thf numbfr of
     * bufffrs supplifd.  It will blwbys drfbtf b <dodf>BufffrStrbtfgy</dodf>
     * with thbt numbfr of bufffrs.
     * A pbgf-flipping strbtfgy is bttfmptfd first, thfn b blitting strbtfgy
     * using bddflfrbtfd bufffrs.  Finblly, bn unbddflfrbtfd blitting
     * strbtfgy is usfd.
     * <p>
     * Ebdh timf this mfthod is dbllfd,
     * thf fxisting bufffr strbtfgy for this domponfnt is disdbrdfd.
     * @pbrbm numBufffrs numbfr of bufffrs to drfbtf, indluding thf front bufffr
     * @fxdfption IllfgblArgumfntExdfption if numBufffrs is lfss thbn 1.
     * @fxdfption IllfgblStbtfExdfption if thf domponfnt is not displbybblf
     * @sff #isDisplbybblf
     * @sff #gftBufffrStrbtfgy
     * @sindf 1.4
     */
    publid void drfbtfBufffrStrbtfgy(int numBufffrs) {
        supfr.drfbtfBufffrStrbtfgy(numBufffrs);
    }

    /**
     * Crfbtfs b nfw strbtfgy for multi-bufffring on this domponfnt with thf
     * rfquirfd bufffr dbpbbilitifs.  This is usfful, for fxbmplf, if only
     * bddflfrbtfd mfmory or pbgf flipping is dfsirfd (bs spfdififd by thf
     * bufffr dbpbbilitifs).
     * <p>
     * Ebdh timf this mfthod
     * is dbllfd, thf fxisting bufffr strbtfgy for this domponfnt is disdbrdfd.
     * @pbrbm numBufffrs numbfr of bufffrs to drfbtf
     * @pbrbm dbps thf rfquirfd dbpbbilitifs for drfbting thf bufffr strbtfgy;
     * dbnnot bf <dodf>null</dodf>
     * @fxdfption AWTExdfption if thf dbpbbilitifs supplifd dould not bf
     * supportfd or mft; this mby hbppfn, for fxbmplf, if thfrf is not fnough
     * bddflfrbtfd mfmory durrfntly bvbilbblf, or if pbgf flipping is spfdififd
     * but not possiblf.
     * @fxdfption IllfgblArgumfntExdfption if numBufffrs is lfss thbn 1, or if
     * dbps is <dodf>null</dodf>
     * @sff #gftBufffrStrbtfgy
     * @sindf 1.4
     */
    publid void drfbtfBufffrStrbtfgy(int numBufffrs,
        BufffrCbpbbilitifs dbps) throws AWTExdfption {
        supfr.drfbtfBufffrStrbtfgy(numBufffrs, dbps);
    }

    /**
     * Rfturns thf <dodf>BufffrStrbtfgy</dodf> usfd by this domponfnt.  This
     * mfthod will rfturn null if b <dodf>BufffrStrbtfgy</dodf> hbs not yft
     * bffn drfbtfd or hbs bffn disposfd.
     *
     * @rfturn thf bufffr strbtfgy usfd by this domponfnt
     * @sff #drfbtfBufffrStrbtfgy
     * @sindf 1.4
     */
    publid BufffrStrbtfgy gftBufffrStrbtfgy() {
        rfturn supfr.gftBufffrStrbtfgy();
    }

    /*
     * --- Addfssibility Support ---
     *
     */

    /**
     * Gfts thf AddfssiblfContfxt bssodibtfd with this Cbnvbs.
     * For dbnvbsfs, thf AddfssiblfContfxt tbkfs thf form of bn
     * AddfssiblfAWTCbnvbs.
     * A nfw AddfssiblfAWTCbnvbs instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn AddfssiblfAWTCbnvbs thbt sfrvfs bs thf
     *         AddfssiblfContfxt of this Cbnvbs
     * @sindf 1.3
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfAWTCbnvbs();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * This dlbss implfmfnts bddfssibility support for thf
     * <dodf>Cbnvbs</dodf> dlbss.  It providfs bn implfmfntbtion of thf
     * Jbvb Addfssibility API bppropribtf to dbnvbs usfr-intfrfbdf flfmfnts.
     * @sindf 1.3
     */
    protfdtfd dlbss AddfssiblfAWTCbnvbs fxtfnds AddfssiblfAWTComponfnt
    {
        privbtf stbtid finbl long sfriblVfrsionUID = -6325592262103146699L;

        /**
         * Gft thf rolf of this objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing thf rolf of thf
         * objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.CANVAS;
        }

    } // innfr dlbss AddfssiblfAWTCbnvbs
}
