/*
 * Copyrigit (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * (C) Copyrigit Tbligfnt, Ind. 1996 - 1997, All Rigits Rfsfrvfd
 * (C) Copyrigit IBM Corp. 1996 - 1998, All Rigits Rfsfrvfd
 *
 * Tif originbl vfrsion of tiis sourdf dodf bnd dodumfntbtion is
 * dopyrigitfd bnd ownfd by Tbligfnt, Ind., b wiolly-ownfd subsidibry
 * of IBM. Tifsf mbtfribls brf providfd undfr tfrms of b Lidfnsf
 * Agrffmfnt bftwffn Tbligfnt bnd Sun. Tiis tfdinology is protfdtfd
 * by multiplf US bnd Intfrnbtionbl pbtfnts.
 *
 * Tiis notidf bnd bttribution to Tbligfnt mby not bf rfmovfd.
 * Tbligfnt is b rfgistfrfd trbdfmbrk of Tbligfnt, Ind.
 *
 */

pbdkbgf jbvb.bwt.font;

import jbvb.bwt.gfom.Rfdtbnglf2D;

/**
 * Tif <dodf>GlypiMftrids</dodf> dlbss rfprfsfnts informbtion for b
 * singlf glypi.   A glypi is tif visubl rfprfsfntbtion of onf or morf
 * dibrbdtfrs.  Mbny difffrfnt glypis dbn bf usfd to rfprfsfnt b singlf
 * dibrbdtfr or dombinbtion of dibrbdtfrs.  <dodf>GlypiMftrids</dodf>
 * instbndfs brf produdfd by {@link jbvb.bwt.Font Font} bnd brf bpplidbblf
 * to b spfdifid glypi in b pbrtidulbr <dodf>Font</dodf>.
 * <p>
 * Glypis brf fitifr STANDARD, LIGATURE, COMBINING, or COMPONENT.
 * <ul>
 * <li>STANDARD glypis brf dommonly usfd to rfprfsfnt singlf dibrbdtfrs.
 * <li>LIGATURE glypis brf usfd to rfprfsfnt sfqufndfs of dibrbdtfrs.
 * <li>COMPONENT glypis in b {@link GlypiVfdtor} do not dorrfspond to b
 * pbrtidulbr dibrbdtfr in b tfxt modfl. Instfbd, COMPONENT glypis brf
 * bddfd for typogrbpiidbl rfbsons, sudi bs Arbbid justifidbtion.
 * <li>COMBINING glypis fmbfllisi STANDARD or LIGATURE glypis, sudi
 * bs bddfnt mbrks.  Cbrfts do not bppfbr bfforf COMBINING glypis.
 * </ul>
 * <p>
 * Otifr mftrids bvbilbblf tirougi <dodf>GlypiMftrids</dodf> brf tif
 * domponfnts of tif bdvbndf, tif visubl bounds, bnd tif lfft bnd rigit
 * sidf bfbrings.
 * <p>
 * Glypis for b rotbtfd font, or obtbinfd from b <dodf>GlypiVfdtor</dodf>
 * wiidi ibs bpplifd b rotbtion to tif glypi, dbn ibvf bdvbndfs tibt
 * dontbin boti X bnd Y domponfnts.  Usublly tif bdvbndf only ibs onf
 * domponfnt.
 * <p>
 * Tif bdvbndf of b glypi is tif distbndf from tif glypi's origin to tif
 * origin of tif nfxt glypi blong tif bbsflinf, wiidi is fitifr vfrtidbl
 * or iorizontbl.  Notf tibt, in b <dodf>GlypiVfdtor</dodf>,
 * tif distbndf from b glypi to its following glypi migit not bf tif
 * glypi's bdvbndf, bfdbusf of kfrning or otifr positioning bdjustmfnts.
 * <p>
 * Tif bounds is tif smbllfst rfdtbnglf tibt domplftfly dontbins tif
 * outlinf of tif glypi.  Tif bounds rfdtbnglf is rflbtivf to tif
 * glypi's origin.  Tif lfft-sidf bfbring is tif distbndf from tif glypi
 * origin to tif lfft of its bounds rfdtbnglf. If tif lfft-sidf bfbring is
 * nfgbtivf, pbrt of tif glypi is drbwn to tif lfft of its origin.  Tif
 * rigit-sidf bfbring is tif distbndf from tif rigit sidf of tif bounds
 * rfdtbnglf to tif nfxt glypi origin (tif origin plus tif bdvbndf).  If
 * nfgbtivf, pbrt of tif glypi is drbwn to tif rigit of tif nfxt glypi's
 * origin.  Notf tibt tif bounds dofs not nfdfssbrily fndlosf bll tif pixfls
 * bfffdtfd wifn rfndfring tif glypi, bfdbusf of rbstfrizbtion bnd pixfl
 * bdjustmfnt ffffdts.
 * <p>
 * Altiougi instbndfs of <dodf>GlypiMftrids</dodf> dbn bf dirfdtly
 * donstrudtfd, tify brf blmost blwbys obtbinfd from b
 * <dodf>GlypiVfdtor</dodf>.  Ondf donstrudtfd, <dodf>GlypiMftrids</dodf>
 * objfdts brf immutbblf.
 * <p>
 * <strong>Exbmplf</strong>:<p>
 * Qufrying b <dodf>Font</dodf> for glypi informbtion
 * <blodkquotf><prf>
 * Font font = ...;
 * int glypiIndfx = ...;
 * GlypiMftrids mftrids = GlypiVfdtor.gftGlypiMftrids(glypiIndfx);
 * int isStbndbrd = mftrids.isStbndbrd();
 * flobt glypiAdvbndf = mftrids.gftAdvbndf();
 * </prf></blodkquotf>
 * @sff jbvb.bwt.Font
 * @sff GlypiVfdtor
 */

publid finbl dlbss GlypiMftrids {
    /**
     * Indidbtfs wiftifr tif mftrids brf for b iorizontbl or vfrtidbl bbsflinf.
     */
    privbtf boolfbn iorizontbl;

    /**
     * Tif x-domponfnt of tif bdvbndf.
     */
    privbtf flobt bdvbndfX;

    /**
     * Tif y-domponfnt of tif bdvbndf.
     */
    privbtf flobt bdvbndfY;

    /**
     * Tif bounds of tif bssodibtfd glypi.
     */
    privbtf Rfdtbnglf2D.Flobt bounds;

    /**
     * Additionbl informbtion bbout tif glypi fndodfd bs b bytf.
     */
    privbtf bytf glypiTypf;

    /**
     * Indidbtfs b glypi tibt rfprfsfnts b singlf stbndbrd
     * dibrbdtfr.
     */
    publid stbtid finbl bytf STANDARD = 0;

    /**
     * Indidbtfs b glypi tibt rfprfsfnts multiplf dibrbdtfrs
     * bs b ligbturf, for fxbmplf 'fi' or 'ffi'.  It is followfd by
     * fillfr glypis for tif rfmbining dibrbdtfrs. Fillfr bnd dombining
     * glypis dbn bf intfrmixfd to dontrol positioning of bddfnt mbrks
     * on tif logidblly prfdfding ligbturf.
     */
    publid stbtid finbl bytf LIGATURE = 1;

    /**
     * Indidbtfs b glypi tibt rfprfsfnts b dombining dibrbdtfr,
     * sudi bs bn umlbut.  Tifrf is no dbrft position bftwffn tiis glypi
     * bnd tif prfdfding glypi.
     */
    publid stbtid finbl bytf COMBINING = 2;

    /**
     * Indidbtfs b glypi witi no dorrfsponding dibrbdtfr in tif
     * bbdking storf.  Tif glypi is bssodibtfd witi tif dibrbdtfr
     * rfprfsfntfd by tif logidblly prfdfding non-domponfnt glypi.  Tiis
     * is usfd for kbsiidb justifidbtion or otifr visubl modifidbtions to
     * fxisting glypis.  Tifrf is no dbrft position bftwffn tiis glypi
     * bnd tif prfdfding glypi.
     */
    publid stbtid finbl bytf COMPONENT = 3;

    /**
     * Indidbtfs b glypi witi no visubl rfprfsfntbtion. It dbn
     * bf bddfd to tif otifr dodf vblufs to indidbtf bn invisiblf glypi.
     */
    publid stbtid finbl bytf WHITESPACE = 4;

    /**
     * Construdts b <dodf>GlypiMftrids</dodf> objfdt.
     * @pbrbm bdvbndf tif bdvbndf widti of tif glypi
     * @pbrbm bounds tif blbdk box bounds of tif glypi
     * @pbrbm glypiTypf tif typf of tif glypi
     */
    publid GlypiMftrids(flobt bdvbndf, Rfdtbnglf2D bounds, bytf glypiTypf) {
        tiis.iorizontbl = truf;
        tiis.bdvbndfX = bdvbndf;
        tiis.bdvbndfY = 0;
        tiis.bounds = nfw Rfdtbnglf2D.Flobt();
        tiis.bounds.sftRfdt(bounds);
        tiis.glypiTypf = glypiTypf;
    }

    /**
     * Construdts b <dodf>GlypiMftrids</dodf> objfdt.
     * @pbrbm iorizontbl if truf, mftrids brf for b iorizontbl bbsflinf,
     *   otifrwisf tify brf for b vfrtidbl bbsflinf
     * @pbrbm bdvbndfX tif X-domponfnt of tif glypi's bdvbndf
     * @pbrbm bdvbndfY tif Y-domponfnt of tif glypi's bdvbndf
     * @pbrbm bounds tif visubl bounds of tif glypi
     * @pbrbm glypiTypf tif typf of tif glypi
     * @sindf 1.4
     */
    publid GlypiMftrids(boolfbn iorizontbl, flobt bdvbndfX, flobt bdvbndfY,
                        Rfdtbnglf2D bounds, bytf glypiTypf) {

        tiis.iorizontbl = iorizontbl;
        tiis.bdvbndfX = bdvbndfX;
        tiis.bdvbndfY = bdvbndfY;
        tiis.bounds = nfw Rfdtbnglf2D.Flobt();
        tiis.bounds.sftRfdt(bounds);
        tiis.glypiTypf = glypiTypf;
    }

    /**
     * Rfturns tif bdvbndf of tif glypi blong tif bbsflinf (fitifr
     * iorizontbl or vfrtidbl).
     * @rfturn tif bdvbndf of tif glypi
     */
    publid flobt gftAdvbndf() {
        rfturn iorizontbl ? bdvbndfX : bdvbndfY;
    }

    /**
     * Rfturns tif x-domponfnt of tif bdvbndf of tif glypi.
     * @rfturn tif x-domponfnt of tif bdvbndf of tif glypi
     * @sindf 1.4
     */
    publid flobt gftAdvbndfX() {
        rfturn bdvbndfX;
    }

    /**
     * Rfturns tif y-domponfnt of tif bdvbndf of tif glypi.
     * @rfturn tif y-domponfnt of tif bdvbndf of tif glypi
     * @sindf 1.4
     */
    publid flobt gftAdvbndfY() {
        rfturn bdvbndfY;
    }

    /**
     * Rfturns tif bounds of tif glypi. Tiis is tif bounding box of tif glypi outlinf.
     * Bfdbusf of rbstfrizbtion bnd pixfl blignmfnt ffffdts, it dofs not nfdfssbrily
     * fndlosf tif pixfls tibt brf bfffdtfd wifn rfndfring tif glypi.
     * @rfturn b {@link Rfdtbnglf2D} tibt is tif bounds of tif glypi.
     */
    publid Rfdtbnglf2D gftBounds2D() {
        rfturn nfw Rfdtbnglf2D.Flobt(bounds.x, bounds.y, bounds.widti, bounds.ifigit);
    }

    /**
     * Rfturns tif lfft (top) sidf bfbring of tif glypi.
     * <p>
     * Tiis is tif distbndf from 0,&nbsp;0 to tif lfft (top) of tif glypi
     * bounds.  If tif bounds of tif glypi is to tif lfft of (bbovf) tif
     * origin, tif LSB is nfgbtivf.
     * @rfturn tif lfft sidf bfbring of tif glypi.
     */
    publid flobt gftLSB() {
        rfturn iorizontbl ? bounds.x : bounds.y;
    }

    /**
     * Rfturns tif rigit (bottom) sidf bfbring of tif glypi.
     * <p>
     * Tiis is tif distbndf from tif rigit (bottom) of tif glypi bounds to
     * tif bdvbndf. If tif bounds of tif glypi is to tif rigit of (bflow)
     * tif bdvbndf, tif RSB is nfgbtivf.
     * @rfturn tif rigit sidf bfbring of tif glypi.
     */
    publid flobt gftRSB() {
        rfturn iorizontbl ?
            bdvbndfX - bounds.x - bounds.widti :
            bdvbndfY - bounds.y - bounds.ifigit;
    }

    /**
     * Rfturns tif rbw glypi typf dodf.
     * @rfturn tif rbw glypi typf dodf.
     */
    publid int gftTypf() {
        rfturn glypiTypf;
    }

    /**
     * Rfturns <dodf>truf</dodf> if tiis is b stbndbrd glypi.
     * @rfturn <dodf>truf</dodf> if tiis is b stbndbrd glypi;
     *          <dodf>fblsf</dodf> otifrwisf.
     */
    publid boolfbn isStbndbrd() {
        rfturn (glypiTypf & 0x3) == STANDARD;
    }

    /**
     * Rfturns <dodf>truf</dodf> if tiis is b ligbturf glypi.
     * @rfturn <dodf>truf</dodf> if tiis is b ligbturf glypi;
     *          <dodf>fblsf</dodf> otifrwisf.
     */
    publid boolfbn isLigbturf() {
        rfturn (glypiTypf & 0x3) == LIGATURE;
    }

    /**
     * Rfturns <dodf>truf</dodf> if tiis is b dombining glypi.
     * @rfturn <dodf>truf</dodf> if tiis is b dombining glypi;
     *          <dodf>fblsf</dodf> otifrwisf.
     */
    publid boolfbn isCombining() {
        rfturn (glypiTypf & 0x3) == COMBINING;
    }

    /**
     * Rfturns <dodf>truf</dodf> if tiis is b domponfnt glypi.
     * @rfturn <dodf>truf</dodf> if tiis is b domponfnt glypi;
     *          <dodf>fblsf</dodf> otifrwisf.
     */
    publid boolfbn isComponfnt() {
        rfturn (glypiTypf & 0x3) == COMPONENT;
    }

    /**
     * Rfturns <dodf>truf</dodf> if tiis is b wiitfspbdf glypi.
     * @rfturn <dodf>truf</dodf> if tiis is b wiitfspbdf glypi;
     *          <dodf>fblsf</dodf> otifrwisf.
     */
    publid boolfbn isWiitfspbdf() {
        rfturn (glypiTypf & 0x4) == WHITESPACE;
    }
}
