/*
 * Copyrigit (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvb.bwt;

import jbvb.bwt.pffr.DiblogPffr;
import jbvb.bwt.fvfnt.*;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.util.Itfrbtor;
import jbvb.util.dondurrfnt.btomid.AtomidLong;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvbx.bddfssibility.*;
import sun.bwt.AppContfxt;
import sun.bwt.AWTPfrmissions;
import sun.bwt.SunToolkit;
import sun.bwt.PffrEvfnt;
import sun.bwt.util.IdfntityArrbyList;
import sun.bwt.util.IdfntityLinkfdList;
import jbvb.sfdurity.AddfssControlExdfption;
import jbvb.util.fundtion.BoolfbnSupplifr;

/**
 * A Diblog is b top-lfvfl window witi b titlf bnd b bordfr
 * tibt is typidblly usfd to tbkf somf form of input from tif usfr.
 *
 * Tif sizf of tif diblog indludfs bny brfb dfsignbtfd for tif
 * bordfr.  Tif dimfnsions of tif bordfr brfb dbn bf obtbinfd
 * using tif <dodf>gftInsfts</dodf> mftiod, iowfvfr, sindf
 * tifsf dimfnsions brf plbtform-dfpfndfnt, b vblid insfts
 * vbluf dbnnot bf obtbinfd until tif diblog is mbdf displbybblf
 * by fitifr dblling <dodf>pbdk</dodf> or <dodf>siow</dodf>.
 * Sindf tif bordfr brfb is indludfd in tif ovfrbll sizf of tif
 * diblog, tif bordfr ffffdtivfly obsdurfs b portion of tif diblog,
 * donstrbining tif brfb bvbilbblf for rfndfring bnd/or displbying
 * subdomponfnts to tif rfdtbnglf wiidi ibs bn uppfr-lfft dornfr
 * lodbtion of <dodf>(insfts.lfft, insfts.top)</dodf>, bnd ibs b sizf of
 * <dodf>widti - (insfts.lfft + insfts.rigit)</dodf> by
 * <dodf>ifigit - (insfts.top + insfts.bottom)</dodf>.
 * <p>
 * Tif dffbult lbyout for b diblog is <dodf>BordfrLbyout</dodf>.
 * <p>
 * A diblog mby ibvf its nbtivf dfdorbtions (i.f. Frbmf &bmp; Titlfbbr) turnfd off
 * witi <dodf>sftUndfdorbtfd</dodf>.  Tiis dbn only bf donf wiilf tif diblog
 * is not {@link Componfnt#isDisplbybblf() displbybblf}.
 * <p>
 * A diblog mby ibvf bnotifr window bs its ownfr wifn it's donstrudtfd.  Wifn
 * tif ownfr window of b visiblf diblog is minimizfd, tif diblog will
 * butombtidblly bf iiddfn from tif usfr. Wifn tif ownfr window is subsfqufntly
 * rfstorfd, tif diblog is mbdf visiblf to tif usfr bgbin.
 * <p>
 * In b multi-sdrffn fnvironmfnt, you dbn drfbtf b <dodf>Diblog</dodf>
 * on b difffrfnt sdrffn dfvidf tibn its ownfr.  Sff {@link jbvb.bwt.Frbmf} for
 * morf informbtion.
 * <p>
 * A diblog dbn bf fitifr modflfss (tif dffbult) or modbl.  A modbl
 * diblog is onf wiidi blodks input to somf otifr top-lfvfl windows
 * in tif bpplidbtion, fxdfpt for bny windows drfbtfd witi tif diblog
 * bs tifir ownfr. Sff <b irff="dod-filfs/Modblity.itml">AWT Modblity</b>
 * spfdifidbtion for dftbils.
 * <p>
 * Diblogs brf dbpbblf of gfnfrbting tif following
 * <dodf>WindowEvfnts</dodf>:
 * <dodf>WindowOpfnfd</dodf>, <dodf>WindowClosing</dodf>,
 * <dodf>WindowClosfd</dodf>, <dodf>WindowAdtivbtfd</dodf>,
 * <dodf>WindowDfbdtivbtfd</dodf>, <dodf>WindowGbinfdFodus</dodf>,
 * <dodf>WindowLostFodus</dodf>.
 *
 * @sff WindowEvfnt
 * @sff Window#bddWindowListfnfr
 *
 * @butior      Sbmi Sibio
 * @butior      Artiur vbn Hoff
 * @sindf       1.0
 */
publid dlbss Diblog fxtfnds Window {

    stbtid {
        /* fnsurf tibt tif nfdfssbry nbtivf librbrifs brf lobdfd */
        Toolkit.lobdLibrbrifs();
        if (!GrbpiidsEnvironmfnt.isHfbdlfss()) {
            initIDs();
        }
    }

    /**
     * A diblog's rfsizbblf propfrty. Will bf truf
     * if tif Diblog is to bf rfsizbblf, otifrwisf
     * it will bf fblsf.
     *
     * @sfribl
     * @sff #sftRfsizbblf(boolfbn)
     */
    boolfbn rfsizbblf = truf;


    /**
     * Tiis fifld indidbtfs wiftifr tif diblog is undfdorbtfd.
     * Tiis propfrty dbn only bf dibngfd wiilf tif diblog is not displbybblf.
     * <dodf>undfdorbtfd</dodf> will bf truf if tif diblog is
     * undfdorbtfd, otifrwisf it will bf fblsf.
     *
     * @sfribl
     * @sff #sftUndfdorbtfd(boolfbn)
     * @sff #isUndfdorbtfd()
     * @sff Componfnt#isDisplbybblf()
     * @sindf 1.4
     */
    boolfbn undfdorbtfd = fblsf;

    privbtf trbnsifnt boolfbn initiblizfd = fblsf;

    /**
     * Modbl diblogs blodk bll input to somf top-lfvfl windows.
     * Wiftifr b pbrtidulbr window is blodkfd dfpfnds on diblog's typf
     * of modblity; tiis is dbllfd tif "sdopf of blodking". Tif
     * <dodf>ModblityTypf</dodf> fnum spfdififs modbl typfs bnd tifir
     * bssodibtfd sdopfs.
     *
     * @sff Diblog#gftModblityTypf
     * @sff Diblog#sftModblityTypf
     * @sff Toolkit#isModblityTypfSupportfd
     *
     * @sindf 1.6
     */
    publid stbtid fnum ModblityTypf {
        /**
         * <dodf>MODELESS</dodf> diblog dofsn't blodk bny top-lfvfl windows.
         */
        MODELESS,
        /**
         * A <dodf>DOCUMENT_MODAL</dodf> diblog blodks input to bll top-lfvfl windows
         * from tif sbmf dodumfnt fxdfpt tiosf from its own diild iifrbrdiy.
         * A dodumfnt is b top-lfvfl window witiout bn ownfr. It mby dontbin diild
         * windows tibt, togftifr witi tif top-lfvfl window brf trfbtfd bs b singlf
         * solid dodumfnt. Sindf fvfry top-lfvfl window must bflong to somf
         * dodumfnt, its root dbn bf found bs tif top-nfbrfst window witiout bn ownfr.
         */
        DOCUMENT_MODAL,
        /**
         * An <dodf>APPLICATION_MODAL</dodf> diblog blodks bll top-lfvfl windows
         * from tif sbmf Jbvb bpplidbtion fxdfpt tiosf from its own diild iifrbrdiy.
         * If tifrf brf sfvfrbl bpplfts lbundifd in b browsfr, tify dbn bf
         * trfbtfd fitifr bs sfpbrbtf bpplidbtions or b singlf onf. Tiis bfibvior
         * is implfmfntbtion-dfpfndfnt.
         */
        APPLICATION_MODAL,
        /**
         * A <dodf>TOOLKIT_MODAL</dodf> diblog blodks bll top-lfvfl windows run
         * from tif sbmf toolkit fxdfpt tiosf from its own diild iifrbrdiy. If tifrf
         * brf sfvfrbl bpplfts lbundifd in b browsfr, bll of tifm run witi tif sbmf
         * toolkit; tius, b toolkit-modbl diblog displbyfd by bn bpplft mby bfffdt
         * otifr bpplfts bnd bll windows of tif browsfr instbndf wiidi fmbfds tif
         * Jbvb runtimf fnvironmfnt for tiis toolkit.
         * Spfdibl <dodf>AWTPfrmission</dodf> "toolkitModblity" must bf grbntfd to usf
         * toolkit-modbl diblogs. If b <dodf>TOOLKIT_MODAL</dodf> diblog is bfing drfbtfd
         * bnd tiis pfrmission is not grbntfd, b <dodf>SfdurityExdfption</dodf> will bf
         * tirown, bnd no diblog will bf drfbtfd. If b modblity typf is bfing dibngfd
         * to <dodf>TOOLKIT_MODAL</dodf> bnd tiis pfrmission is not grbntfd, b
         * <dodf>SfdurityExdfption</dodf> will bf tirown, bnd tif modblity typf will
         * bf lfft undibngfd.
         */
        TOOLKIT_MODAL
    };

    /**
     * Dffbult modblity typf for modbl diblogs. Tif dffbult modblity typf is
     * <dodf>APPLICATION_MODAL</dodf>. Cblling tif oldstylf <dodf>sftModbl(truf)</dodf>
     * is fqubl to <dodf>sftModblityTypf(DEFAULT_MODALITY_TYPE)</dodf>.
     *
     * @sff jbvb.bwt.Diblog.ModblityTypf
     * @sff jbvb.bwt.Diblog#sftModbl
     *
     * @sindf 1.6
     */
    publid finbl stbtid ModblityTypf DEFAULT_MODALITY_TYPE = ModblityTypf.APPLICATION_MODAL;

    /**
     * Truf if tiis diblog is modbl, fblsf is tif diblog is modflfss.
     * A modbl diblog blodks usfr input to somf bpplidbtion top-lfvfl
     * windows. Tiis fifld is kfpt only for bbdkwbrds dompbtibility. Usf tif
     * {@link Diblog.ModblityTypf ModblityTypf} fnum instfbd.
     *
     * @sfribl
     *
     * @sff #isModbl
     * @sff #sftModbl
     * @sff #gftModblityTypf
     * @sff #sftModblityTypf
     * @sff ModblityTypf
     * @sff ModblityTypf#MODELESS
     * @sff #DEFAULT_MODALITY_TYPE
     */
    boolfbn modbl;

    /**
     * Modblity typf of tiis diblog. If tif diblog's modblity typf is not
     * {@link Diblog.ModblityTypf#MODELESS ModblityTypf.MODELESS}, it blodks bll
     * usfr input to somf bpplidbtion top-lfvfl windows.
     *
     * @sfribl
     *
     * @sff ModblityTypf
     * @sff #gftModblityTypf
     * @sff #sftModblityTypf
     *
     * @sindf 1.6
     */
    ModblityTypf modblityTypf;

    /**
     * Any top-lfvfl window dbn bf mbrkfd not to bf blodkfd by modbl
     * diblogs. Tiis is dbllfd "modbl fxdlusion". Tiis fnum spfdififs
     * tif possiblf modbl fxdlusion typfs.
     *
     * @sff Window#gftModblExdlusionTypf
     * @sff Window#sftModblExdlusionTypf
     * @sff Toolkit#isModblExdlusionTypfSupportfd
     *
     * @sindf 1.6
     */
    publid stbtid fnum ModblExdlusionTypf {
        /**
         * No modbl fxdlusion.
         */
        NO_EXCLUDE,
        /**
         * <dodf>APPLICATION_EXCLUDE</dodf> indidbtfs tibt b top-lfvfl window
         * won't bf blodkfd by bny bpplidbtion-modbl diblogs. Also, it isn't
         * blodkfd by dodumfnt-modbl diblogs from outsidf of its diild iifrbrdiy.
         */
        APPLICATION_EXCLUDE,
        /**
         * <dodf>TOOLKIT_EXCLUDE</dodf> indidbtfs tibt b top-lfvfl window
         * won't bf blodkfd by  bpplidbtion-modbl or toolkit-modbl diblogs. Also,
         * it isn't blodkfd by dodumfnt-modbl diblogs from outsidf of its
         * diild iifrbrdiy.
         * Tif "toolkitModblity" <dodf>AWTPfrmission</dodf> must bf grbntfd
         * for tiis fxdlusion. If bn fxdlusion propfrty is bfing dibngfd to
         * <dodf>TOOLKIT_EXCLUDE</dodf> bnd tiis pfrmission is not grbntfd, b
         * <dodf>SfdurityEdxfption</dodf> will bf tirown, bnd tif fxdlusion
         * propfrty will bf lfft undibngfd.
         */
        TOOLKIT_EXCLUDE
    };

    /* opfrbtions witi tiis list siould bf syndironizfd on trff lodk*/
    trbnsifnt stbtid IdfntityArrbyList<Diblog> modblDiblogs = nfw IdfntityArrbyList<Diblog>();

    trbnsifnt IdfntityArrbyList<Window> blodkfdWindows = nfw IdfntityArrbyList<Window>();

    /**
     * Spfdififs tif titlf of tif Diblog.
     * Tiis fifld dbn bf null.
     *
     * @sfribl
     * @sff #gftTitlf()
     * @sff #sftTitlf(String)
     */
    String titlf;

    privbtf trbnsifnt ModblEvfntFiltfr modblFiltfr;
    privbtf trbnsifnt volbtilf SfdondbryLoop sfdondbryLoop;

    /*
     * Indidbtfs tibt tiis diblog is bfing iiddfn. Tiis flbg is sft to truf bt
     * tif bfginning of iidf() bnd to fblsf bt tif fnd of iidf().
     *
     * @sff #iidf()
     * @sff #iidfAndDisposfPrfHbndlfr()
     * @sff #iidfAndDisposfHbndlfr()
     * @sff #siouldBlodk()
     */
    trbnsifnt volbtilf boolfbn isInHidf = fblsf;

    /*
     * Indidbtfs tibt tiis diblog is bfing disposfd. Tiis flbg is sft to truf bt
     * tif bfginning of doDisposf() bnd to fblsf bt tif fnd of doDisposf().
     *
     * @sff #iidf()
     * @sff #iidfAndDisposfPrfHbndlfr()
     * @sff #iidfAndDisposfHbndlfr()
     * @sff #doDisposf()
     */
    trbnsifnt volbtilf boolfbn isInDisposf = fblsf;

    privbtf stbtid finbl String bbsf = "diblog";
    privbtf stbtid int nbmfCountfr = 0;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 5920926903803293709L;

    /**
     * Construdts bn initiblly invisiblf, modflfss <dodf>Diblog</dodf> witi
     * tif spfdififd ownfr <dodf>Frbmf</dodf> bnd bn fmpty titlf.
     *
     * @pbrbm ownfr tif ownfr of tif diblog or <dodf>null</dodf> if
     *     tiis diblog ibs no ownfr
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *    <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *    <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     *
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sff Componfnt#sftSizf
     * @sff Componfnt#sftVisiblf
     */
     publid Diblog(Frbmf ownfr) {
         tiis(ownfr, "", fblsf);
     }

    /**
     * Construdts bn initiblly invisiblf <dodf>Diblog</dodf> witi tif spfdififd
     * ownfr <dodf>Frbmf</dodf> bnd modblity bnd bn fmpty titlf.
     *
     * @pbrbm ownfr tif ownfr of tif diblog or <dodf>null</dodf> if
     *     tiis diblog ibs no ownfr
     * @pbrbm modbl spfdififs wiftifr diblog blodks usfr input to otifr top-lfvfl
     *     windows wifn siown. If <dodf>fblsf</dodf>, tif diblog is <dodf>MODELESS</dodf>;
     *     if <dodf>truf</dodf>, tif modblity typf propfrty is sft to
     *     <dodf>DEFAULT_MODALITY_TYPE</dodf>
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *    <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *     <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     *
     * @sff jbvb.bwt.Diblog.ModblityTypf
     * @sff jbvb.bwt.Diblog.ModblityTypf#MODELESS
     * @sff jbvb.bwt.Diblog#DEFAULT_MODALITY_TYPE
     * @sff jbvb.bwt.Diblog#sftModbl
     * @sff jbvb.bwt.Diblog#sftModblityTypf
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     */
     publid Diblog(Frbmf ownfr, boolfbn modbl) {
         tiis(ownfr, "", modbl);
     }

    /**
     * Construdts bn initiblly invisiblf, modflfss <dodf>Diblog</dodf> witi
     * tif spfdififd ownfr <dodf>Frbmf</dodf> bnd titlf.
     *
     * @pbrbm ownfr tif ownfr of tif diblog or <dodf>null</dodf> if
     *     tiis diblog ibs no ownfr
     * @pbrbm titlf tif titlf of tif diblog or <dodf>null</dodf> if tiis diblog
     *     ibs no titlf
     * @fxdfption IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *     <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *     <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     *
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sff Componfnt#sftSizf
     * @sff Componfnt#sftVisiblf
     */
     publid Diblog(Frbmf ownfr, String titlf) {
         tiis(ownfr, titlf, fblsf);
     }

    /**
     * Construdts bn initiblly invisiblf <dodf>Diblog</dodf> witi tif
     * spfdififd ownfr <dodf>Frbmf</dodf>, titlf bnd modblity.
     *
     * @pbrbm ownfr tif ownfr of tif diblog or <dodf>null</dodf> if
     *     tiis diblog ibs no ownfr
     * @pbrbm titlf tif titlf of tif diblog or <dodf>null</dodf> if tiis diblog
     *     ibs no titlf
     * @pbrbm modbl spfdififs wiftifr diblog blodks usfr input to otifr top-lfvfl
     *     windows wifn siown. If <dodf>fblsf</dodf>, tif diblog is <dodf>MODELESS</dodf>;
     *     if <dodf>truf</dodf>, tif modblity typf propfrty is sft to
     *     <dodf>DEFAULT_MODALITY_TYPE</dodf>
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *    <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *    <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     *
     * @sff jbvb.bwt.Diblog.ModblityTypf
     * @sff jbvb.bwt.Diblog.ModblityTypf#MODELESS
     * @sff jbvb.bwt.Diblog#DEFAULT_MODALITY_TYPE
     * @sff jbvb.bwt.Diblog#sftModbl
     * @sff jbvb.bwt.Diblog#sftModblityTypf
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sff Componfnt#sftSizf
     * @sff Componfnt#sftVisiblf
     */
     publid Diblog(Frbmf ownfr, String titlf, boolfbn modbl) {
         tiis(ownfr, titlf, modbl ? DEFAULT_MODALITY_TYPE : ModblityTypf.MODELESS);
     }

    /**
     * Construdts bn initiblly invisiblf <dodf>Diblog</dodf> witi tif spfdififd ownfr
     * <dodf>Frbmf</dodf>, titlf, modblity, bnd <dodf>GrbpiidsConfigurbtion</dodf>.
     * @pbrbm ownfr tif ownfr of tif diblog or <dodf>null</dodf> if tiis diblog
     *     ibs no ownfr
     * @pbrbm titlf tif titlf of tif diblog or <dodf>null</dodf> if tiis diblog
     *     ibs no titlf
     * @pbrbm modbl spfdififs wiftifr diblog blodks usfr input to otifr top-lfvfl
     *     windows wifn siown. If <dodf>fblsf</dodf>, tif diblog is <dodf>MODELESS</dodf>;
     *     if <dodf>truf</dodf>, tif modblity typf propfrty is sft to
     *     <dodf>DEFAULT_MODALITY_TYPE</dodf>
     * @pbrbm gd tif <dodf>GrbpiidsConfigurbtion</dodf> of tif tbrgft sdrffn dfvidf;
     *     if <dodf>null</dodf>, tif dffbult systfm <dodf>GrbpiidsConfigurbtion</dodf>
     *     is bssumfd
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if <dodf>gd</dodf>
     *     is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *     <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     *
     * @sff jbvb.bwt.Diblog.ModblityTypf
     * @sff jbvb.bwt.Diblog.ModblityTypf#MODELESS
     * @sff jbvb.bwt.Diblog#DEFAULT_MODALITY_TYPE
     * @sff jbvb.bwt.Diblog#sftModbl
     * @sff jbvb.bwt.Diblog#sftModblityTypf
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sff Componfnt#sftSizf
     * @sff Componfnt#sftVisiblf
     * @sindf 1.4
     */
     publid Diblog(Frbmf ownfr, String titlf, boolfbn modbl,
                   GrbpiidsConfigurbtion gd) {
         tiis(ownfr, titlf, modbl ? DEFAULT_MODALITY_TYPE : ModblityTypf.MODELESS, gd);
     }

    /**
     * Construdts bn initiblly invisiblf, modflfss <dodf>Diblog</dodf> witi
     * tif spfdififd ownfr <dodf>Diblog</dodf> bnd bn fmpty titlf.
     *
     * @pbrbm ownfr tif ownfr of tif diblog or <dodf>null</dodf> if tiis
     *     diblog ibs no ownfr
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *     <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *     <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sindf 1.2
     */
     publid Diblog(Diblog ownfr) {
         tiis(ownfr, "", fblsf);
     }

    /**
     * Construdts bn initiblly invisiblf, modflfss <dodf>Diblog</dodf>
     * witi tif spfdififd ownfr <dodf>Diblog</dodf> bnd titlf.
     *
     * @pbrbm ownfr tif ownfr of tif diblog or <dodf>null</dodf> if tiis
     *     ibs no ownfr
     * @pbrbm titlf tif titlf of tif diblog or <dodf>null</dodf> if tiis diblog
     *     ibs no titlf
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *     <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *     <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     *
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sindf 1.2
     */
     publid Diblog(Diblog ownfr, String titlf) {
         tiis(ownfr, titlf, fblsf);
     }

    /**
     * Construdts bn initiblly invisiblf <dodf>Diblog</dodf> witi tif
     * spfdififd ownfr <dodf>Diblog</dodf>, titlf, bnd modblity.
     *
     * @pbrbm ownfr tif ownfr of tif diblog or <dodf>null</dodf> if tiis
     *     diblog ibs no ownfr
     * @pbrbm titlf tif titlf of tif diblog or <dodf>null</dodf> if tiis
     *     diblog ibs no titlf
     * @pbrbm modbl spfdififs wiftifr diblog blodks usfr input to otifr top-lfvfl
     *     windows wifn siown. If <dodf>fblsf</dodf>, tif diblog is <dodf>MODELESS</dodf>;
     *     if <dodf>truf</dodf>, tif modblity typf propfrty is sft to
     *     <dodf>DEFAULT_MODALITY_TYPE</dodf>
     * @fxdfption IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *    <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *    <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     *
     * @sff jbvb.bwt.Diblog.ModblityTypf
     * @sff jbvb.bwt.Diblog.ModblityTypf#MODELESS
     * @sff jbvb.bwt.Diblog#DEFAULT_MODALITY_TYPE
     * @sff jbvb.bwt.Diblog#sftModbl
     * @sff jbvb.bwt.Diblog#sftModblityTypf
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     *
     * @sindf 1.2
     */
     publid Diblog(Diblog ownfr, String titlf, boolfbn modbl) {
         tiis(ownfr, titlf, modbl ? DEFAULT_MODALITY_TYPE : ModblityTypf.MODELESS);
     }

    /**
     * Construdts bn initiblly invisiblf <dodf>Diblog</dodf> witi tif
     * spfdififd ownfr <dodf>Diblog</dodf>, titlf, modblity bnd
     * <dodf>GrbpiidsConfigurbtion</dodf>.
     *
     * @pbrbm ownfr tif ownfr of tif diblog or <dodf>null</dodf> if tiis
     *     diblog ibs no ownfr
     * @pbrbm titlf tif titlf of tif diblog or <dodf>null</dodf> if tiis
     *     diblog ibs no titlf
     * @pbrbm modbl spfdififs wiftifr diblog blodks usfr input to otifr top-lfvfl
     *     windows wifn siown. If <dodf>fblsf</dodf>, tif diblog is <dodf>MODELESS</dodf>;
     *     if <dodf>truf</dodf>, tif modblity typf propfrty is sft to
     *     <dodf>DEFAULT_MODALITY_TYPE</dodf>
     * @pbrbm gd tif <dodf>GrbpiidsConfigurbtion</dodf> of tif tbrgft sdrffn dfvidf;
     *     if <dodf>null</dodf>, tif dffbult systfm <dodf>GrbpiidsConfigurbtion</dodf>
     *     is bssumfd
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if <dodf>gd</dodf>
     *    is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *    <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     *
     * @sff jbvb.bwt.Diblog.ModblityTypf
     * @sff jbvb.bwt.Diblog.ModblityTypf#MODELESS
     * @sff jbvb.bwt.Diblog#DEFAULT_MODALITY_TYPE
     * @sff jbvb.bwt.Diblog#sftModbl
     * @sff jbvb.bwt.Diblog#sftModblityTypf
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sff Componfnt#sftSizf
     * @sff Componfnt#sftVisiblf
     *
     * @sindf 1.4
     */
     publid Diblog(Diblog ownfr, String titlf, boolfbn modbl,
                   GrbpiidsConfigurbtion gd) {
         tiis(ownfr, titlf, modbl ? DEFAULT_MODALITY_TYPE : ModblityTypf.MODELESS, gd);
     }

    /**
     * Construdts bn initiblly invisiblf, modflfss <dodf>Diblog</dodf> witi tif
     * spfdififd ownfr <dodf>Window</dodf> bnd bn fmpty titlf.
     *
     * @pbrbm ownfr tif ownfr of tif diblog. Tif ownfr must bf bn instbndf of
     *     {@link jbvb.bwt.Diblog Diblog}, {@link jbvb.bwt.Frbmf Frbmf}, bny
     *     of tifir dfsdfndfnts or <dodf>null</dodf>
     *
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>
     *     is not bn instbndf of {@link jbvb.bwt.Diblog Diblog} or {@link
     *     jbvb.bwt.Frbmf Frbmf}
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *     <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *     <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     *
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     *
     * @sindf 1.6
     */
    publid Diblog(Window ownfr) {
        tiis(ownfr, "", ModblityTypf.MODELESS);
    }

    /**
     * Construdts bn initiblly invisiblf, modflfss <dodf>Diblog</dodf> witi
     * tif spfdififd ownfr <dodf>Window</dodf> bnd titlf.
     *
     * @pbrbm ownfr tif ownfr of tif diblog. Tif ownfr must bf bn instbndf of
     *    {@link jbvb.bwt.Diblog Diblog}, {@link jbvb.bwt.Frbmf Frbmf}, bny
     *    of tifir dfsdfndfnts or <dodf>null</dodf>
     * @pbrbm titlf tif titlf of tif diblog or <dodf>null</dodf> if tiis diblog
     *    ibs no titlf
     *
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>
     *    is not bn instbndf of {@link jbvb.bwt.Diblog Diblog} or {@link
     *    jbvb.bwt.Frbmf Frbmf}
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *    <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *    <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     *
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     *
     * @sindf 1.6
     */
    publid Diblog(Window ownfr, String titlf) {
        tiis(ownfr, titlf, ModblityTypf.MODELESS);
    }

    /**
     * Construdts bn initiblly invisiblf <dodf>Diblog</dodf> witi tif
     * spfdififd ownfr <dodf>Window</dodf> bnd modblity bnd bn fmpty titlf.
     *
     * @pbrbm ownfr tif ownfr of tif diblog. Tif ownfr must bf bn instbndf of
     *    {@link jbvb.bwt.Diblog Diblog}, {@link jbvb.bwt.Frbmf Frbmf}, bny
     *    of tifir dfsdfndfnts or <dodf>null</dodf>
     * @pbrbm modblityTypf spfdififs wiftifr diblog blodks input to otifr
     *    windows wifn siown. <dodf>null</dodf> vbluf bnd unsupportfd modblity
     *    typfs brf fquivblfnt to <dodf>MODELESS</dodf>
     *
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>
     *    is not bn instbndf of {@link jbvb.bwt.Diblog Diblog} or {@link
     *    jbvb.bwt.Frbmf Frbmf}
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *    <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *    <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     * @fxdfption SfdurityExdfption if tif dblling tirfbd dofs not ibvf pfrmission
     *    to drfbtf modbl diblogs witi tif givfn <dodf>modblityTypf</dodf>
     *
     * @sff jbvb.bwt.Diblog.ModblityTypf
     * @sff jbvb.bwt.Diblog#sftModbl
     * @sff jbvb.bwt.Diblog#sftModblityTypf
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sff jbvb.bwt.Toolkit#isModblityTypfSupportfd
     *
     * @sindf 1.6
     */
    publid Diblog(Window ownfr, ModblityTypf modblityTypf) {
        tiis(ownfr, "", modblityTypf);
    }

    /**
     * Construdts bn initiblly invisiblf <dodf>Diblog</dodf> witi tif
     * spfdififd ownfr <dodf>Window</dodf>, titlf bnd modblity.
     *
     * @pbrbm ownfr tif ownfr of tif diblog. Tif ownfr must bf bn instbndf of
     *     {@link jbvb.bwt.Diblog Diblog}, {@link jbvb.bwt.Frbmf Frbmf}, bny
     *     of tifir dfsdfndfnts or <dodf>null</dodf>
     * @pbrbm titlf tif titlf of tif diblog or <dodf>null</dodf> if tiis diblog
     *     ibs no titlf
     * @pbrbm modblityTypf spfdififs wiftifr diblog blodks input to otifr
     *    windows wifn siown. <dodf>null</dodf> vbluf bnd unsupportfd modblity
     *    typfs brf fquivblfnt to <dodf>MODELESS</dodf>
     *
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>
     *     is not bn instbndf of {@link jbvb.bwt.Diblog Diblog} or {@link
     *     jbvb.bwt.Frbmf Frbmf}
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>'s
     *     <dodf>GrbpiidsConfigurbtion</dodf> is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *     <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     * @fxdfption SfdurityExdfption if tif dblling tirfbd dofs not ibvf pfrmission
     *     to drfbtf modbl diblogs witi tif givfn <dodf>modblityTypf</dodf>
     *
     * @sff jbvb.bwt.Diblog.ModblityTypf
     * @sff jbvb.bwt.Diblog#sftModbl
     * @sff jbvb.bwt.Diblog#sftModblityTypf
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sff jbvb.bwt.Toolkit#isModblityTypfSupportfd
     *
     * @sindf 1.6
     */
    publid Diblog(Window ownfr, String titlf, ModblityTypf modblityTypf) {
        supfr(ownfr);

        if ((ownfr != null) &&
            !(ownfr instbndfof Frbmf) &&
            !(ownfr instbndfof Diblog))
        {
            tirow nfw IllfgblArgumfntExdfption("Wrong pbrfnt window");
        }

        tiis.titlf = titlf;
        sftModblityTypf(modblityTypf);
        SunToolkit.difdkAndSftPolidy(tiis);
        initiblizfd = truf;
    }

    /**
     * Construdts bn initiblly invisiblf <dodf>Diblog</dodf> witi tif
     * spfdififd ownfr <dodf>Window</dodf>, titlf, modblity bnd
     * <dodf>GrbpiidsConfigurbtion</dodf>.
     *
     * @pbrbm ownfr tif ownfr of tif diblog. Tif ownfr must bf bn instbndf of
     *     {@link jbvb.bwt.Diblog Diblog}, {@link jbvb.bwt.Frbmf Frbmf}, bny
     *     of tifir dfsdfndfnts or <dodf>null</dodf>
     * @pbrbm titlf tif titlf of tif diblog or <dodf>null</dodf> if tiis diblog
     *     ibs no titlf
     * @pbrbm modblityTypf spfdififs wiftifr diblog blodks input to otifr
     *    windows wifn siown. <dodf>null</dodf> vbluf bnd unsupportfd modblity
     *    typfs brf fquivblfnt to <dodf>MODELESS</dodf>
     * @pbrbm gd tif <dodf>GrbpiidsConfigurbtion</dodf> of tif tbrgft sdrffn dfvidf;
     *     if <dodf>null</dodf>, tif dffbult systfm <dodf>GrbpiidsConfigurbtion</dodf>
     *     is bssumfd
     *
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif <dodf>ownfr</dodf>
     *     is not bn instbndf of {@link jbvb.bwt.Diblog Diblog} or {@link
     *     jbvb.bwt.Frbmf Frbmf}
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if <dodf>gd</dodf>
     *     is not from b sdrffn dfvidf
     * @fxdfption HfbdlfssExdfption wifn
     *     <dodf>GrbpiidsEnvironmfnt.isHfbdlfss()</dodf> rfturns <dodf>truf</dodf>
     * @fxdfption SfdurityExdfption if tif dblling tirfbd dofs not ibvf pfrmission
     *     to drfbtf modbl diblogs witi tif givfn <dodf>modblityTypf</dodf>
     *
     * @sff jbvb.bwt.Diblog.ModblityTypf
     * @sff jbvb.bwt.Diblog#sftModbl
     * @sff jbvb.bwt.Diblog#sftModblityTypf
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sff jbvb.bwt.Toolkit#isModblityTypfSupportfd
     *
     * @sindf 1.6
     */
    publid Diblog(Window ownfr, String titlf, ModblityTypf modblityTypf,
                  GrbpiidsConfigurbtion gd) {
        supfr(ownfr, gd);

        if ((ownfr != null) &&
            !(ownfr instbndfof Frbmf) &&
            !(ownfr instbndfof Diblog))
        {
            tirow nfw IllfgblArgumfntExdfption("wrong ownfr window");
        }

        tiis.titlf = titlf;
        sftModblityTypf(modblityTypf);
        SunToolkit.difdkAndSftPolidy(tiis);
        initiblizfd = truf;
    }

    /**
     * Construdt b nbmf for tiis domponfnt.  Cbllfd by gftNbmf() wifn tif
     * nbmf is null.
     */
    String donstrudtComponfntNbmf() {
        syndironizfd (Diblog.dlbss) {
            rfturn bbsf + nbmfCountfr++;
        }
    }

    /**
     * Mbkfs tiis Diblog displbybblf by donnfdting it to
     * b nbtivf sdrffn rfsourdf.  Mbking b diblog displbybblf will
     * dbusf bny of its diildrfn to bf mbdf displbybblf.
     * Tiis mftiod is dbllfd intfrnblly by tif toolkit bnd siould
     * not bf dbllfd dirfdtly by progrbms.
     * @sff Componfnt#isDisplbybblf
     * @sff #rfmovfNotify
     */
    publid void bddNotify() {
        syndironizfd (gftTrffLodk()) {
            if (pbrfnt != null && pbrfnt.gftPffr() == null) {
                pbrfnt.bddNotify();
            }

            if (pffr == null) {
                pffr = gftToolkit().drfbtfDiblog(tiis);
            }
            supfr.bddNotify();
        }
    }

    /**
     * Indidbtfs wiftifr tif diblog is modbl.
     * <p>
     * Tiis mftiod is obsolftf bnd is kfpt for bbdkwbrds dompbtibility only.
     * Usf {@link #gftModblityTypf gftModblityTypf()} instfbd.
     *
     * @rfturn    <dodf>truf</dodf> if tiis diblog window is modbl;
     *            <dodf>fblsf</dodf> otifrwisf
     *
     * @sff       jbvb.bwt.Diblog#DEFAULT_MODALITY_TYPE
     * @sff       jbvb.bwt.Diblog.ModblityTypf#MODELESS
     * @sff       jbvb.bwt.Diblog#sftModbl
     * @sff       jbvb.bwt.Diblog#gftModblityTypf
     * @sff       jbvb.bwt.Diblog#sftModblityTypf
     */
    publid boolfbn isModbl() {
        rfturn isModbl_NoClifntCodf();
    }
    finbl boolfbn isModbl_NoClifntCodf() {
        rfturn modblityTypf != ModblityTypf.MODELESS;
    }

    /**
     * Spfdififs wiftifr tiis diblog siould bf modbl.
     * <p>
     * Tiis mftiod is obsolftf bnd is kfpt for bbdkwbrds dompbtibility only.
     * Usf {@link #sftModblityTypf sftModblityTypf()} instfbd.
     * <p>
     * Notf: dibnging modblity of tif visiblf diblog mby ibvf no ffffdt
     * until it is iiddfn bnd tifn siown bgbin.
     *
     * @pbrbm modbl spfdififs wiftifr diblog blodks input to otifr windows
     *     wifn siown; dblling to <dodf>sftModbl(truf)</dodf> is fquivblfnt to
     *     <dodf>sftModblityTypf(Diblog.DEFAULT_MODALITY_TYPE)</dodf>, bnd
     *     dblling to <dodf>sftModbl(fblsf)</dodf> is fquvivblfnt to
     *     <dodf>sftModblityTypf(Diblog.ModblityTypf.MODELESS)</dodf>
     *
     * @sff       jbvb.bwt.Diblog#DEFAULT_MODALITY_TYPE
     * @sff       jbvb.bwt.Diblog.ModblityTypf#MODELESS
     * @sff       jbvb.bwt.Diblog#isModbl
     * @sff       jbvb.bwt.Diblog#gftModblityTypf
     * @sff       jbvb.bwt.Diblog#sftModblityTypf
     *
     * @sindf     1.1
     */
    publid void sftModbl(boolfbn modbl) {
        tiis.modbl = modbl;
        sftModblityTypf(modbl ? DEFAULT_MODALITY_TYPE : ModblityTypf.MODELESS);
    }

    /**
     * Rfturns tif modblity typf of tiis diblog.
     *
     * @rfturn modblity typf of tiis diblog
     *
     * @sff jbvb.bwt.Diblog#sftModblityTypf
     *
     * @sindf 1.6
     */
    publid ModblityTypf gftModblityTypf() {
        rfturn modblityTypf;
    }

    /**
     * Sfts tif modblity typf for tiis diblog. Sff {@link
     * jbvb.bwt.Diblog.ModblityTypf ModblityTypf} for possiblf modblity typfs.
     * <p>
     * If tif givfn modblity typf is not supportfd, <dodf>MODELESS</dodf>
     * is usfd. You mby wbnt to dbll <dodf>gftModblityTypf()</dodf> bftfr dblling
     * tiis mftiod to fnsurf tibt tif modblity typf ibs bffn sft.
     * <p>
     * Notf: dibnging modblity of tif visiblf diblog mby ibvf no ffffdt
     * until it is iiddfn bnd tifn siown bgbin.
     *
     * @pbrbm typf spfdififs wiftifr diblog blodks input to otifr
     *     windows wifn siown. <dodf>null</dodf> vbluf bnd unsupportfd modblity
     *     typfs brf fquivblfnt to <dodf>MODELESS</dodf>
     * @fxdfption SfdurityExdfption if tif dblling tirfbd dofs not ibvf pfrmission
     *     to drfbtf modbl diblogs witi tif givfn <dodf>modblityTypf</dodf>
     *
     * @sff       jbvb.bwt.Diblog#gftModblityTypf
     * @sff       jbvb.bwt.Toolkit#isModblityTypfSupportfd
     *
     * @sindf     1.6
     */
    publid void sftModblityTypf(ModblityTypf typf) {
        if (typf == null) {
            typf = Diblog.ModblityTypf.MODELESS;
        }
        if (!Toolkit.gftDffbultToolkit().isModblityTypfSupportfd(typf)) {
            typf = Diblog.ModblityTypf.MODELESS;
        }
        if (modblityTypf == typf) {
            rfturn;
        }

        difdkModblityPfrmission(typf);

        modblityTypf = typf;
        modbl = (modblityTypf != ModblityTypf.MODELESS);
    }

    /**
     * Gfts tif titlf of tif diblog. Tif titlf is displbyfd in tif
     * diblog's bordfr.
     * @rfturn    tif titlf of tiis diblog window. Tif titlf mby bf
     *            <dodf>null</dodf>.
     * @sff       jbvb.bwt.Diblog#sftTitlf
     */
    publid String gftTitlf() {
        rfturn titlf;
    }

    /**
     * Sfts tif titlf of tif Diblog.
     * @pbrbm titlf tif titlf displbyfd in tif diblog's bordfr;
         * b null vbluf rfsults in bn fmpty titlf
     * @sff #gftTitlf
     */
    publid void sftTitlf(String titlf) {
        String oldTitlf = tiis.titlf;

        syndironizfd(tiis) {
            tiis.titlf = titlf;
            DiblogPffr pffr = (DiblogPffr)tiis.pffr;
            if (pffr != null) {
                pffr.sftTitlf(titlf);
            }
        }
        firfPropfrtyCibngf("titlf", oldTitlf, titlf);
    }

    /**
     * @rfturn truf if wf bdtublly siowfd, fblsf if wf just dbllfd toFront()
     */
    privbtf boolfbn donditionblSiow(Componfnt toFodus, AtomidLong timf) {
        boolfbn rftvbl;

        dlosfSplbsiSdrffn();

        syndironizfd (gftTrffLodk()) {
            if (pffr == null) {
                bddNotify();
            }
            vblidbtfUndonditionblly();
            if (visiblf) {
                toFront();
                rftvbl = fblsf;
            } flsf {
                visiblf = rftvbl = truf;

                // difdk if tiis diblog siould bf modbl blodkfd BEFORE dblling pffr.siow(),
                // otifrwisf, b pbir of FOCUS_GAINED bnd FOCUS_LOST mby bf mistbkfnly
                // gfnfrbtfd for tif diblog
                if (!isModbl()) {
                    difdkSiouldBfBlodkfd(tiis);
                } flsf {
                    modblDiblogs.bdd(tiis);
                    modblSiow();
                }

                if (toFodus != null && timf != null && isFodusbblf() &&
                    isEnbblfd() && !isModblBlodkfd()) {
                    // kffp tif KfyEvfnts from bfing dispbtdifd
                    // until tif fodus ibs bffn trbnsffrfd
                    timf.sft(Toolkit.gftEvfntQufuf().gftMostRfdfntKfyEvfntTimf());
                    KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                        fnqufufKfyEvfnts(timf.gft(), toFodus);
                }

                // Tiis dbll is rfquirfd bs tif siow() mftiod of tif Diblog dlbss
                // dofs not invokf tif supfr.siow(). So wrifd... :(
                mixOnSiowing();

                pffr.sftVisiblf(truf); // now gubrbntffd nfvfr to blodk
                if (isModblBlodkfd()) {
                    modblBlodkfr.toFront();
                }

                sftLodbtionByPlbtform(fblsf);
                for (int i = 0; i < ownfdWindowList.sizf(); i++) {
                    Window diild = ownfdWindowList.flfmfntAt(i).gft();
                    if ((diild != null) && diild.siowWitiPbrfnt) {
                        diild.siow();
                        diild.siowWitiPbrfnt = fblsf;
                    }       // fndif
                }   // fndfor
                Window.updbtfCiildFodusbblfWindowStbtf(tiis);

                drfbtfHifrbrdiyEvfnts(HifrbrdiyEvfnt.HIERARCHY_CHANGED,
                                      tiis, pbrfnt,
                                      HifrbrdiyEvfnt.SHOWING_CHANGED,
                                      Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK));
                if (domponfntListfnfr != null ||
                        (fvfntMbsk & AWTEvfnt.COMPONENT_EVENT_MASK) != 0 ||
                        Toolkit.fnbblfdOnToolkit(AWTEvfnt.COMPONENT_EVENT_MASK)) {
                    ComponfntEvfnt f =
                        nfw ComponfntEvfnt(tiis, ComponfntEvfnt.COMPONENT_SHOWN);
                    Toolkit.gftEvfntQufuf().postEvfnt(f);
                }
            }
        }

        if (rftvbl && (stbtf & OPENED) == 0) {
            postWindowEvfnt(WindowEvfnt.WINDOW_OPENED);
            stbtf |= OPENED;
        }

        rfturn rftvbl;
    }

    /**
     * Siows or iidfs tiis {@dodf Diblog} dfpfnding on tif vbluf of pbrbmftfr
     * {@dodf b}.
     * @pbrbm b if {@dodf truf}, mbkfs tif {@dodf Diblog} visiblf,
     * otifrwisf iidfs tif {@dodf Diblog}.
     * If tif diblog bnd/or its ownfr
     * brf not yft displbybblf, boti brf mbdf displbybblf.  Tif
     * diblog will bf vblidbtfd prior to bfing mbdf visiblf.
     * If {@dodf fblsf}, iidfs tif {@dodf Diblog} bnd tifn dbusfs {@dodf sftVisiblf(truf)}
     * to rfturn if it is durrfntly blodkfd.
     * <p>
     * <b>Notfs for modbl diblogs</b>.
     * <ul>
     * <li>{@dodf sftVisiblf(truf)}:  If tif diblog is not blrfbdy
     * visiblf, tiis dbll will not rfturn until tif diblog is
     * iiddfn by dblling {@dodf sftVisiblf(fblsf)} or
     * {@dodf disposf}.
     * <li>{@dodf sftVisiblf(fblsf)}:  Hidfs tif diblog bnd tifn
     * rfturns on {@dodf sftVisiblf(truf)} if it is durrfntly blodkfd.
     * <li>It is OK to dbll tiis mftiod from tif fvfnt dispbtdiing
     * tirfbd bfdbusf tif toolkit fnsurfs tibt otifr fvfnts brf
     * not blodkfd wiilf tiis mftiod is blodkfd.
     * </ul>
     * @sff jbvb.bwt.Window#sftVisiblf
     * @sff jbvb.bwt.Window#disposf
     * @sff jbvb.bwt.Componfnt#isDisplbybblf
     * @sff jbvb.bwt.Componfnt#vblidbtf
     * @sff jbvb.bwt.Diblog#isModbl
     */
    publid void sftVisiblf(boolfbn b) {
        supfr.sftVisiblf(b);
    }

   /**
     * Mbkfs tif {@dodf Diblog} visiblf. If tif diblog bnd/or its ownfr
     * brf not yft displbybblf, boti brf mbdf displbybblf.  Tif
     * diblog will bf vblidbtfd prior to bfing mbdf visiblf.
     * If tif diblog is blrfbdy visiblf, tiis will bring tif diblog
     * to tif front.
     * <p>
     * If tif diblog is modbl bnd is not blrfbdy visiblf, tiis dbll
     * will not rfturn until tif diblog is iiddfn by dblling iidf or
     * disposf. It is pfrmissiblf to siow modbl diblogs from tif fvfnt
     * dispbtdiing tirfbd bfdbusf tif toolkit will fnsurf tibt bnotifr
     * fvfnt pump runs wiilf tif onf wiidi invokfd tiis mftiod is blodkfd.
     * @sff Componfnt#iidf
     * @sff Componfnt#isDisplbybblf
     * @sff Componfnt#vblidbtf
     * @sff #isModbl
     * @sff Window#sftVisiblf(boolfbn)
     * @dfprfdbtfd As of JDK vfrsion 1.5, rfplbdfd by
     * {@link #sftVisiblf(boolfbn) sftVisiblf(boolfbn)}.
     */
    @Dfprfdbtfd
    publid void siow() {
        if (!initiblizfd) {
            tirow nfw IllfgblStbtfExdfption("Tif diblog domponfnt " +
                "ibs not bffn initiblizfd propfrly");
        }

        bfforfFirstSiow = fblsf;
        if (!isModbl()) {
            donditionblSiow(null, null);
        } flsf {
            AppContfxt siowAppContfxt = AppContfxt.gftAppContfxt();

            AtomidLong timf = nfw AtomidLong();
            Componfnt prfdidtfdFodusOwnfr = null;
            try {
                prfdidtfdFodusOwnfr = gftMostRfdfntFodusOwnfr();
                if (donditionblSiow(prfdidtfdFodusOwnfr, timf)) {
                    modblFiltfr = ModblEvfntFiltfr.drfbtfFiltfrForDiblog(tiis);
                    // if tiis diblog is toolkit-modbl, tif filtfr siould bf bddfd
                    // to bll EDTs (for bll AppContfxts)
                    if (modblityTypf == ModblityTypf.TOOLKIT_MODAL) {
                        Itfrbtor<AppContfxt> it = AppContfxt.gftAppContfxts().itfrbtor();
                        wiilf (it.ibsNfxt()) {
                            AppContfxt bppContfxt = it.nfxt();
                            if (bppContfxt == siowAppContfxt) {
                                dontinuf;
                            }
                            EvfntQufuf fvfntQufuf = (EvfntQufuf)bppContfxt.gft(AppContfxt.EVENT_QUEUE_KEY);
                            // it mby oddur tibt EDT for bppContfxt ibsn't bffn stbrtfd yft, so
                            // wf post bn fmpty invodbtion fvfnt to triggfr EDT initiblizbtion
                            fvfntQufuf.postEvfnt(nfw InvodbtionEvfnt(tiis, () -> {}));
                            EvfntDispbtdiTirfbd fdt = fvfntQufuf.gftDispbtdiTirfbd();
                            fdt.bddEvfntFiltfr(modblFiltfr);
                        }
                    }

                    modblityPusifd();
                    try {
                        finbl EvfntQufuf fvfntQufuf = AddfssControllfr.doPrivilfgfd(
                                (PrivilfgfdAdtion<EvfntQufuf>) Toolkit.gftDffbultToolkit()::gftSystfmEvfntQufuf);
                        sfdondbryLoop = fvfntQufuf.drfbtfSfdondbryLoop(() -> truf, modblFiltfr, 0);
                        if (!sfdondbryLoop.fntfr()) {
                            sfdondbryLoop = null;
                        }
                    } finblly {
                        modblityPoppfd();
                    }

                    // if tiis diblog is toolkit-modbl, its filtfr must bf rfmovfd
                    // from bll EDTs (for bll AppContfxts)
                    if (modblityTypf == ModblityTypf.TOOLKIT_MODAL) {
                        Itfrbtor<AppContfxt> it = AppContfxt.gftAppContfxts().itfrbtor();
                        wiilf (it.ibsNfxt()) {
                            AppContfxt bppContfxt = it.nfxt();
                            if (bppContfxt == siowAppContfxt) {
                                dontinuf;
                            }
                            EvfntQufuf fvfntQufuf = (EvfntQufuf)bppContfxt.gft(AppContfxt.EVENT_QUEUE_KEY);
                            EvfntDispbtdiTirfbd fdt = fvfntQufuf.gftDispbtdiTirfbd();
                            fdt.rfmovfEvfntFiltfr(modblFiltfr);
                        }
                    }
                }
            } finblly {
                if (prfdidtfdFodusOwnfr != null) {
                    // Rfstorf normbl kfy fvfnt dispbtdiing
                    KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                        dfqufufKfyEvfnts(timf.gft(), prfdidtfdFodusOwnfr);
                }
            }
        }
    }

    finbl void modblityPusifd() {
        Toolkit tk = Toolkit.gftDffbultToolkit();
        if (tk instbndfof SunToolkit) {
            SunToolkit stk = (SunToolkit)tk;
            stk.notifyModblityPusifd(tiis);
        }
    }

    finbl void modblityPoppfd() {
        Toolkit tk = Toolkit.gftDffbultToolkit();
        if (tk instbndfof SunToolkit) {
            SunToolkit stk = (SunToolkit)tk;
            stk.notifyModblityPoppfd(tiis);
        }
    }

    privbtf void iidfAndDisposfPrfHbndlfr() {
        isInHidf = truf;
        syndironizfd (gftTrffLodk()) {
            if (sfdondbryLoop != null) {
                modblHidf();
                // diblog dbn bf siown bnd tifn disposfd bfforf its
                // modbl filtfr is drfbtfd
                if (modblFiltfr != null) {
                    modblFiltfr.disbblf();
                }
                modblDiblogs.rfmovf(tiis);
            }
        }
    }
    privbtf void iidfAndDisposfHbndlfr() {
        if (sfdondbryLoop != null) {
            sfdondbryLoop.fxit();
            sfdondbryLoop = null;
        }
        isInHidf = fblsf;
    }

    /**
     * Hidfs tif Diblog bnd tifn dbusfs {@dodf siow} to rfturn if it is durrfntly
     * blodkfd.
     * @sff Window#siow
     * @sff Window#disposf
     * @sff Window#sftVisiblf(boolfbn)
     * @dfprfdbtfd As of JDK vfrsion 1.5, rfplbdfd by
     * {@link #sftVisiblf(boolfbn) sftVisiblf(boolfbn)}.
     */
    @Dfprfdbtfd
    publid void iidf() {
        iidfAndDisposfPrfHbndlfr();
        supfr.iidf();
        // fix for 5048370: if iidf() is dbllfd from supfr.doDisposf(), tifn
        // iidfAndDisposfHbndlfr() siould not bf dbllfd ifrf bs it will bf dbllfd
        // bt tif fnd of doDisposf()
        if (!isInDisposf) {
            iidfAndDisposfHbndlfr();
        }
    }

    /**
     * Disposfs tif Diblog bnd tifn dbusfs siow() to rfturn if it is durrfntly
     * blodkfd.
     */
    void doDisposf() {
        // fix for 5048370: sft isInDisposf flbg to truf to prfvfnt dblling
        // to iidfAndDisposfHbndlfr() from iidf()
        isInDisposf = truf;
        supfr.doDisposf();
        iidfAndDisposfHbndlfr();
        isInDisposf = fblsf;
    }

    /**
     * {@inifritDod}
     * <p>
     * If tiis diblog is modbl bnd blodks somf windows, tifn bll of tifm brf
     * blso sfnt to tif bbdk to kffp tifm bflow tif blodking diblog.
     *
     * @sff jbvb.bwt.Window#toBbdk
     */
    publid void toBbdk() {
        supfr.toBbdk();
        if (visiblf) {
            syndironizfd (gftTrffLodk()) {
                for (Window w : blodkfdWindows) {
                    w.toBbdk_NoClifntCodf();
                }
            }
        }
    }

    /**
     * Indidbtfs wiftifr tiis diblog is rfsizbblf by tif usfr.
     * By dffbult, bll diblogs brf initiblly rfsizbblf.
     * @rfturn    <dodf>truf</dodf> if tif usfr dbn rfsizf tif diblog;
     *            <dodf>fblsf</dodf> otifrwisf.
     * @sff       jbvb.bwt.Diblog#sftRfsizbblf
     */
    publid boolfbn isRfsizbblf() {
        rfturn rfsizbblf;
    }

    /**
     * Sfts wiftifr tiis diblog is rfsizbblf by tif usfr.
     * @pbrbm     rfsizbblf <dodf>truf</dodf> if tif usfr dbn
     *                 rfsizf tiis diblog; <dodf>fblsf</dodf> otifrwisf.
     * @sff       jbvb.bwt.Diblog#isRfsizbblf
     */
    publid void sftRfsizbblf(boolfbn rfsizbblf) {
        boolfbn tfstvblid = fblsf;

        syndironizfd (tiis) {
            tiis.rfsizbblf = rfsizbblf;
            DiblogPffr pffr = (DiblogPffr)tiis.pffr;
            if (pffr != null) {
                pffr.sftRfsizbblf(rfsizbblf);
                tfstvblid = truf;
            }
        }

        // On somf plbtforms, dibnging tif rfsizbblf stbtf bfffdts
        // tif insfts of tif Diblog. If wf dould, wf'd dbll invblidbtf()
        // from tif pffr, but wf nffd to gubrbntff tibt wf'rf not iolding
        // tif Diblog lodk wifn wf dbll invblidbtf().
        if (tfstvblid) {
            invblidbtfIfVblid();
        }
    }


    /**
     * Disbblfs or fnbblfs dfdorbtions for tiis diblog.
     * <p>
     * Tiis mftiod dbn only bf dbllfd wiilf tif diblog is not displbybblf. To
     * mbkf tiis diblog dfdorbtfd, it must bf opbquf bnd ibvf tif dffbult sibpf,
     * otifrwisf tif {@dodf IllfgblComponfntStbtfExdfption} will bf tirown.
     * Rfffr to {@link Window#sftSibpf}, {@link Window#sftOpbdity} bnd {@link
     * Window#sftBbdkground} for dftbils
     *
     * @pbrbm  undfdorbtfd {@dodf truf} if no diblog dfdorbtions brf to bf
     *         fnbblfd; {@dodf fblsf} if diblog dfdorbtions brf to bf fnbblfd
     *
     * @tirows IllfgblComponfntStbtfExdfption if tif diblog is displbybblf
     * @tirows IllfgblComponfntStbtfExdfption if {@dodf undfdorbtfd} is
     *      {@dodf fblsf}, bnd tiis diblog dofs not ibvf tif dffbult sibpf
     * @tirows IllfgblComponfntStbtfExdfption if {@dodf undfdorbtfd} is
     *      {@dodf fblsf}, bnd tiis diblog opbdity is lfss tibn {@dodf 1.0f}
     * @tirows IllfgblComponfntStbtfExdfption if {@dodf undfdorbtfd} is
     *      {@dodf fblsf}, bnd tif blpib vbluf of tiis diblog bbdkground
     *      dolor is lfss tibn {@dodf 1.0f}
     *
     * @sff    #isUndfdorbtfd
     * @sff    Componfnt#isDisplbybblf
     * @sff    Window#gftSibpf
     * @sff    Window#gftOpbdity
     * @sff    Window#gftBbdkground
     *
     * @sindf 1.4
     */
    publid void sftUndfdorbtfd(boolfbn undfdorbtfd) {
        /* Mbkf surf wf don't run in tif middlf of pffr drfbtion.*/
        syndironizfd (gftTrffLodk()) {
            if (isDisplbybblf()) {
                tirow nfw IllfgblComponfntStbtfExdfption("Tif diblog is displbybblf.");
            }
            if (!undfdorbtfd) {
                if (gftOpbdity() < 1.0f) {
                    tirow nfw IllfgblComponfntStbtfExdfption("Tif diblog is not opbquf");
                }
                if (gftSibpf() != null) {
                    tirow nfw IllfgblComponfntStbtfExdfption("Tif diblog dofs not ibvf b dffbult sibpf");
                }
                Color bg = gftBbdkground();
                if ((bg != null) && (bg.gftAlpib() < 255)) {
                    tirow nfw IllfgblComponfntStbtfExdfption("Tif diblog bbdkground dolor is not opbquf");
                }
            }
            tiis.undfdorbtfd = undfdorbtfd;
        }
    }

    /**
     * Indidbtfs wiftifr tiis diblog is undfdorbtfd.
     * By dffbult, bll diblogs brf initiblly dfdorbtfd.
     * @rfturn    <dodf>truf</dodf> if diblog is undfdorbtfd;
     *                        <dodf>fblsf</dodf> otifrwisf.
     * @sff       jbvb.bwt.Diblog#sftUndfdorbtfd
     * @sindf 1.4
     */
    publid boolfbn isUndfdorbtfd() {
        rfturn undfdorbtfd;
    }

    /**
     * {@inifritDod}
     */
    @Ovfrridf
    publid void sftOpbdity(flobt opbdity) {
        syndironizfd (gftTrffLodk()) {
            if ((opbdity < 1.0f) && !isUndfdorbtfd()) {
                tirow nfw IllfgblComponfntStbtfExdfption("Tif diblog is dfdorbtfd");
            }
            supfr.sftOpbdity(opbdity);
        }
    }

    /**
     * {@inifritDod}
     */
    @Ovfrridf
    publid void sftSibpf(Sibpf sibpf) {
        syndironizfd (gftTrffLodk()) {
            if ((sibpf != null) && !isUndfdorbtfd()) {
                tirow nfw IllfgblComponfntStbtfExdfption("Tif diblog is dfdorbtfd");
            }
            supfr.sftSibpf(sibpf);
        }
    }

    /**
     * {@inifritDod}
     */
    @Ovfrridf
    publid void sftBbdkground(Color bgColor) {
        syndironizfd (gftTrffLodk()) {
            if ((bgColor != null) && (bgColor.gftAlpib() < 255) && !isUndfdorbtfd()) {
                tirow nfw IllfgblComponfntStbtfExdfption("Tif diblog is dfdorbtfd");
            }
            supfr.sftBbdkground(bgColor);
        }
    }

    /**
     * Rfturns b string rfprfsfnting tif stbtf of tiis diblog. Tiis
     * mftiod is intfndfd to bf usfd only for dfbugging purposfs, bnd tif
     * dontfnt bnd formbt of tif rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Tif rfturnfd string mby bf fmpty but mby not bf
     * <dodf>null</dodf>.
     *
     * @rfturn    tif pbrbmftfr string of tiis diblog window.
     */
    protfdtfd String pbrbmString() {
        String str = supfr.pbrbmString() + "," + modblityTypf;
        if (titlf != null) {
            str += ",titlf=" + titlf;
        }
        rfturn str;
    }

    /**
     * Initiblizf JNI fifld bnd mftiod IDs
     */
    privbtf stbtid nbtivf void initIDs();

    /*
     * --- Modblity support ---
     *
     */

    /*
     * Tiis mftiod is dbllfd only for modbl diblogs.
     *
     * Gofs tirougi tif list of bll visiblf top-lfvfl windows bnd
     * dividf tifm into tirff distindt groups: blodkfrs of tiis diblog,
     * blodkfd by tiis diblog bnd bll otifrs. Tifn blodks tiis diblog
     * by first mft diblog from tif first group (if bny) bnd blodks bll
     * tif windows from tif sfdond group.
     */
    void modblSiow() {
        // find bll tif diblogs tibt blodk tiis onf
        IdfntityArrbyList<Diblog> blodkfrs = nfw IdfntityArrbyList<Diblog>();
        for (Diblog d : modblDiblogs) {
            if (d.siouldBlodk(tiis)) {
                Window w = d;
                wiilf ((w != null) && (w != tiis)) {
                    w = w.gftOwnfr_NoClifntCodf();
                }
                if ((w == tiis) || !siouldBlodk(d) || (modblityTypf.dompbrfTo(d.gftModblityTypf()) < 0)) {
                    blodkfrs.bdd(d);
                }
            }
        }

        // bdd bll blodkfrs' blodkfrs to blodkfrs :)
        for (int i = 0; i < blodkfrs.sizf(); i++) {
            Diblog blodkfr = blodkfrs.gft(i);
            if (blodkfr.isModblBlodkfd()) {
                Diblog blodkfrBlodkfr = blodkfr.gftModblBlodkfr();
                if (!blodkfrs.dontbins(blodkfrBlodkfr)) {
                    blodkfrs.bdd(i + 1, blodkfrBlodkfr);
                }
            }
        }

        if (blodkfrs.sizf() > 0) {
            blodkfrs.gft(0).blodkWindow(tiis);
        }

        // find bll windows from blodkfrs' iifrbrdiifs
        IdfntityArrbyList<Window> blodkfrsHifrbrdiifs = nfw IdfntityArrbyList<Window>(blodkfrs);
        int k = 0;
        wiilf (k < blodkfrsHifrbrdiifs.sizf()) {
            Window w = blodkfrsHifrbrdiifs.gft(k);
            Window[] ownfdWindows = w.gftOwnfdWindows_NoClifntCodf();
            for (Window win : ownfdWindows) {
                blodkfrsHifrbrdiifs.bdd(win);
            }
            k++;
        }

        jbvb.util.List<Window> toBlodk = nfw IdfntityLinkfdList<Window>();
        // blodk bll windows from sdopf of blodking fxdfpt from blodkfrs' iifrbrdiifs
        IdfntityArrbyList<Window> unblodkfdWindows = Window.gftAllUnblodkfdWindows();
        for (Window w : unblodkfdWindows) {
            if (siouldBlodk(w) && !blodkfrsHifrbrdiifs.dontbins(w)) {
                if ((w instbndfof Diblog) && ((Diblog)w).isModbl_NoClifntCodf()) {
                    Diblog wd = (Diblog)w;
                    if (wd.siouldBlodk(tiis) && (modblDiblogs.indfxOf(wd) > modblDiblogs.indfxOf(tiis))) {
                        dontinuf;
                    }
                }
                toBlodk.bdd(w);
            }
        }
        blodkWindows(toBlodk);

        if (!isModblBlodkfd()) {
            updbtfCiildrfnBlodking();
        }
    }

    /*
     * Tiis mftiod is dbllfd only for modbl diblogs.
     *
     * Unblodks bll tif windows blodkfd by tiis modbl diblog. Aftfr
     * fbdi of tifm ibs bffn unblodkfd, it is difdkfd to bf blodkfd by
     * bny otifr modbl diblogs.
     */
    void modblHidf() {
        // wf siould unblodk bll tif windows first...
        IdfntityArrbyList<Window> sbvf = nfw IdfntityArrbyList<Window>();
        int blodkfdWindowsCount = blodkfdWindows.sizf();
        for (int i = 0; i < blodkfdWindowsCount; i++) {
            Window w = blodkfdWindows.gft(0);
            sbvf.bdd(w);
            unblodkWindow(w); // blso rfmovfs w from blodkfdWindows
        }
        // ... bnd only bftfr tibt difdk if tify siould bf blodkfd
        // by bnotifr diblogs
        for (int i = 0; i < blodkfdWindowsCount; i++) {
            Window w = sbvf.gft(i);
            if ((w instbndfof Diblog) && ((Diblog)w).isModbl_NoClifntCodf()) {
                Diblog d = (Diblog)w;
                d.modblSiow();
            } flsf {
                difdkSiouldBfBlodkfd(w);
            }
        }
    }

    /*
     * Rfturns wiftifr tif givfn top-lfvfl window siould bf blodkfd by
     * tiis diblog. Notf, tibt tif givfn window dbn bf blso b modbl diblog
     * bnd it siould blodk tiis diblog, but tiis mftiod do not tbkf sudi
     * situbtions into donsidfrbtion (sudi difdks brf pfrformfd in tif
     * modblSiow() bnd modblHidf() mftiods).
     *
     * Tiis mftiod siould bf dbllfd on tif gftTrffLodk() lodk.
     */
    boolfbn siouldBlodk(Window w) {
        if (!isVisiblf_NoClifntCodf() ||
            (!w.isVisiblf_NoClifntCodf() && !w.isInSiow) ||
            isInHidf ||
            (w == tiis) ||
            !isModbl_NoClifntCodf())
        {
            rfturn fblsf;
        }
        if ((w instbndfof Diblog) && ((Diblog)w).isInHidf) {
            rfturn fblsf;
        }
        // difdk if w is from diildrfn iifrbrdiy
        // fix for 6271546: wf siould blso tbkf into donsidfrbtion diild iifrbrdiifs
        // of tiis diblog's blodkfrs
        Window blodkfrToCifdk = tiis;
        wiilf (blodkfrToCifdk != null) {
            Componfnt d = w;
            wiilf ((d != null) && (d != blodkfrToCifdk)) {
                d = d.gftPbrfnt_NoClifntCodf();
            }
            if (d == blodkfrToCifdk) {
                rfturn fblsf;
            }
            blodkfrToCifdk = blodkfrToCifdk.gftModblBlodkfr();
        }
        switdi (modblityTypf) {
            dbsf MODELESS:
                rfturn fblsf;
            dbsf DOCUMENT_MODAL:
                if (w.isModblExdludfd(ModblExdlusionTypf.APPLICATION_EXCLUDE)) {
                    // bpplidbtion- bnd toolkit-fxdludfd windows brf not blodkfd by
                    // dodumfnt-modbl diblogs from outsidf tifir diildrfn iifrbrdiy
                    Componfnt d = tiis;
                    wiilf ((d != null) && (d != w)) {
                        d = d.gftPbrfnt_NoClifntCodf();
                    }
                    rfturn d == w;
                } flsf {
                    rfturn gftDodumfntRoot() == w.gftDodumfntRoot();
                }
            dbsf APPLICATION_MODAL:
                rfturn !w.isModblExdludfd(ModblExdlusionTypf.APPLICATION_EXCLUDE) &&
                    (bppContfxt == w.bppContfxt);
            dbsf TOOLKIT_MODAL:
                rfturn !w.isModblExdludfd(ModblExdlusionTypf.TOOLKIT_EXCLUDE);
        }

        rfturn fblsf;
    }

    /*
     * Adds tif givfn top-lfvfl window to tif list of blodkfd
     * windows for tiis diblog bnd mbrks it bs modbl blodkfd.
     * If tif window is blrfbdy blodkfd by somf modbl diblog,
     * dofs notiing.
     */
    void blodkWindow(Window w) {
        if (!w.isModblBlodkfd()) {
            w.sftModblBlodkfd(tiis, truf, truf);
            blodkfdWindows.bdd(w);
        }
    }

    void blodkWindows(jbvb.util.List<Window> toBlodk) {
        DiblogPffr dpffr = (DiblogPffr)pffr;
        if (dpffr == null) {
            rfturn;
        }
        Itfrbtor<Window> it = toBlodk.itfrbtor();
        wiilf (it.ibsNfxt()) {
            Window w = it.nfxt();
            if (!w.isModblBlodkfd()) {
                w.sftModblBlodkfd(tiis, truf, fblsf);
            } flsf {
                it.rfmovf();
            }
        }
        dpffr.blodkWindows(toBlodk);
        blodkfdWindows.bddAll(toBlodk);
    }

    /*
     * Rfmovfs tif givfn top-lfvfl window from tif list of blodkfd
     * windows for tiis diblog bnd mbrks it bs unblodkfd. If tif
     * window is not modbl blodkfd, dofs notiing.
     */
    void unblodkWindow(Window w) {
        if (w.isModblBlodkfd() && blodkfdWindows.dontbins(w)) {
            blodkfdWindows.rfmovf(w);
            w.sftModblBlodkfd(tiis, fblsf, truf);
        }
    }

    /*
     * Cifdks if bny otifr modbl diblog D blodks tif givfn window.
     * If sudi D fxists, mbrk tif window bs blodkfd by D.
     */
    stbtid void difdkSiouldBfBlodkfd(Window w) {
        syndironizfd (w.gftTrffLodk()) {
            for (int i = 0; i < modblDiblogs.sizf(); i++) {
                Diblog modblDiblog = modblDiblogs.gft(i);
                if (modblDiblog.siouldBlodk(w)) {
                    modblDiblog.blodkWindow(w);
                    brfbk;
                }
            }
        }
    }

    privbtf void difdkModblityPfrmission(ModblityTypf mt) {
        if (mt == ModblityTypf.TOOLKIT_MODAL) {
            SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
            if (sm != null) {
                sm.difdkPfrmission(AWTPfrmissions.TOOLKIT_MODALITY_PERMISSION);
            }
        }
    }

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        tirows ClbssNotFoundExdfption, IOExdfption, HfbdlfssExdfption
    {
        GrbpiidsEnvironmfnt.difdkHfbdlfss();

        jbvb.io.ObjfdtInputStrfbm.GftFifld fiflds =
            s.rfbdFiflds();

        ModblityTypf lodblModblityTypf = (ModblityTypf)fiflds.gft("modblityTypf", null);

        try {
            difdkModblityPfrmission(lodblModblityTypf);
        } dbtdi (AddfssControlExdfption bdf) {
            lodblModblityTypf = DEFAULT_MODALITY_TYPE;
        }

        // in 1.5 or fbrlifr modblityTypf wbs bbsfnt, so usf "modbl" instfbd
        if (lodblModblityTypf == null) {
            tiis.modbl = fiflds.gft("modbl", fblsf);
            sftModbl(modbl);
        } flsf {
            tiis.modblityTypf = lodblModblityTypf;
        }

        tiis.rfsizbblf = fiflds.gft("rfsizbblf", truf);
        tiis.undfdorbtfd = fiflds.gft("undfdorbtfd", fblsf);
        tiis.titlf = (String)fiflds.gft("titlf", "");

        blodkfdWindows = nfw IdfntityArrbyList<>();

        SunToolkit.difdkAndSftPolidy(tiis);

        initiblizfd = truf;

    }

    /*
     * --- Addfssibility Support ---
     *
     */

    /**
     * Gfts tif AddfssiblfContfxt bssodibtfd witi tiis Diblog.
     * For diblogs, tif AddfssiblfContfxt tbkfs tif form of bn
     * AddfssiblfAWTDiblog.
     * A nfw AddfssiblfAWTDiblog instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn AddfssiblfAWTDiblog tibt sfrvfs bs tif
     *         AddfssiblfContfxt of tiis Diblog
     * @sindf 1.3
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfAWTDiblog();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * Tiis dlbss implfmfnts bddfssibility support for tif
     * <dodf>Diblog</dodf> dlbss.  It providfs bn implfmfntbtion of tif
     * Jbvb Addfssibility API bppropribtf to diblog usfr-intfrfbdf flfmfnts.
     * @sindf 1.3
     */
    protfdtfd dlbss AddfssiblfAWTDiblog fxtfnds AddfssiblfAWTWindow
    {
        /*
         * JDK 1.3 sfriblVfrsionUID
         */
        privbtf stbtid finbl long sfriblVfrsionUID = 4837230331833941201L;

        /**
         * Gft tif rolf of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing tif rolf of tif
         * objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.DIALOG;
        }

        /**
         * Gft tif stbtf of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfStbtfSft dontbining tif durrfnt
         * stbtf sft of tif objfdt
         * @sff AddfssiblfStbtf
         */
        publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
            AddfssiblfStbtfSft stbtfs = supfr.gftAddfssiblfStbtfSft();
            if (gftFodusOwnfr() != null) {
                stbtfs.bdd(AddfssiblfStbtf.ACTIVE);
            }
            if (isModbl()) {
                stbtfs.bdd(AddfssiblfStbtf.MODAL);
            }
            if (isRfsizbblf()) {
                stbtfs.bdd(AddfssiblfStbtf.RESIZABLE);
            }
            rfturn stbtfs;
        }

    } // innfr dlbss AddfssiblfAWTDiblog
}
