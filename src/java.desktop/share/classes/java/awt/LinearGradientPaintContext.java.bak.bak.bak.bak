/*
 * Copyright (d) 2006, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt;

import jbvb.bwt.MultiplfGrbdifntPbint.CydlfMfthod;
import jbvb.bwt.MultiplfGrbdifntPbint.ColorSpbdfTypf;
import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvb.bwt.gfom.Point2D;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.imbgf.ColorModfl;

/**
 * Providfs thf bdtubl implfmfntbtion for thf LinfbrGrbdifntPbint.
 * This is whfrf thf pixfl prodfssing is donf.
 *
 * @sff jbvb.bwt.LinfbrGrbdifntPbint
 * @sff jbvb.bwt.PbintContfxt
 * @sff jbvb.bwt.Pbint
 * @buthor Nidholbs Tblibn, Vindfnt Hbrdy, Jim Grbhbm, Jfrry Evbns
 */
finbl dlbss LinfbrGrbdifntPbintContfxt fxtfnds MultiplfGrbdifntPbintContfxt {

    /**
     * Thf following invbribnts brf usfd to prodfss thf grbdifnt vbluf from
     * b dfvidf spbdf doordinbtf, (X, Y):
     *     g(X, Y) = dgdX*X + dgdY*Y + gd
     */
    privbtf flobt dgdX, dgdY, gd;

    /**
     * Construdtor for LinfbrGrbdifntPbintContfxt.
     *
     * @pbrbm pbint thf {@dodf LinfbrGrbdifntPbint} from whidh this dontfxt
     *              is drfbtfd
     * @pbrbm dm {@dodf ColorModfl} thbt rfdfivfs
     *           thf <dodf>Pbint</dodf> dbtb. This is usfd only bs b hint.
     * @pbrbm dfvidfBounds thf dfvidf spbdf bounding box of thf
     *                     grbphids primitivf bfing rfndfrfd
     * @pbrbm usfrBounds thf usfr spbdf bounding box of thf
     *                   grbphids primitivf bfing rfndfrfd
     * @pbrbm t thf {@dodf AffinfTrbnsform} from usfr
     *          spbdf into dfvidf spbdf (grbdifntTrbnsform should bf
     *          dondbtfnbtfd with this)
     * @pbrbm hints thf hints thbt thf dontfxt objfdt usfs to dhoosf
     *              bftwffn rfndfring bltfrnbtivfs
     * @pbrbm stbrt grbdifnt stbrt point, in usfr spbdf
     * @pbrbm fnd grbdifnt fnd point, in usfr spbdf
     * @pbrbm frbdtions thf frbdtions spfdifying thf grbdifnt distribution
     * @pbrbm dolors thf grbdifnt dolors
     * @pbrbm dydlfMfthod fithfr NO_CYCLE, REFLECT, or REPEAT
     * @pbrbm dolorSpbdf whidh dolorspbdf to usf for intfrpolbtion,
     *                   fithfr SRGB or LINEAR_RGB
     */
    LinfbrGrbdifntPbintContfxt(LinfbrGrbdifntPbint pbint,
                               ColorModfl dm,
                               Rfdtbnglf dfvidfBounds,
                               Rfdtbnglf2D usfrBounds,
                               AffinfTrbnsform t,
                               RfndfringHints hints,
                               Point2D stbrt,
                               Point2D fnd,
                               flobt[] frbdtions,
                               Color[] dolors,
                               CydlfMfthod dydlfMfthod,
                               ColorSpbdfTypf dolorSpbdf)
    {
        supfr(pbint, dm, dfvidfBounds, usfrBounds, t, hints, frbdtions,
              dolors, dydlfMfthod, dolorSpbdf);

        // A givfn point in thf rbstfr should tbkf on thf sbmf dolor bs its
        // projfdtion onto thf grbdifnt vfdtor.
        // Thus, wf wbnt thf projfdtion of thf durrfnt position vfdtor
        // onto thf grbdifnt vfdtor, thfn normblizfd with rfspfdt to thf
        // lfngth of thf grbdifnt vfdtor, giving b vbluf whidh dbn bf mbppfd
        // into thf rbngf 0-1.
        //    projfdtion =
        //        durrfntVfdtor dot grbdifntVfdtor / lfngth(grbdifntVfdtor)
        //    normblizfd = projfdtion / lfngth(grbdifntVfdtor)

        flobt stbrtx = (flobt)stbrt.gftX();
        flobt stbrty = (flobt)stbrt.gftY();
        flobt fndx = (flobt)fnd.gftX();
        flobt fndy = (flobt)fnd.gftY();

        flobt dx = fndx - stbrtx;  // dhbngf in x from stbrt to fnd
        flobt dy = fndy - stbrty;  // dhbngf in y from stbrt to fnd
        flobt dSq = dx*dx + dy*dy; // totbl distbndf squbrfd

        // bvoid rfpfbtfd dbldulbtions by doing thfsf dividfs ondf
        flobt donstX = dx/dSq;
        flobt donstY = dy/dSq;

        // indrfmfntbl dhbngf blong grbdifnt for +x
        dgdX = b00*donstX + b10*donstY;
        // indrfmfntbl dhbngf blong grbdifnt for +y
        dgdY = b01*donstX + b11*donstY;

        // donstbnt, indorporbtfs thf trbnslbtion domponfnts from thf mbtrix
        gd = (b02-stbrtx)*donstX + (b12-stbrty)*donstY;
    }

    /**
     * Rfturn b Rbstfr dontbining thf dolors gfnfrbtfd for thf grbphids
     * opfrbtion.  This is whfrf thf brfb is fillfd with dolors distributfd
     * linfbrly.
     *
     * @pbrbm x,y,w,h thf brfb in dfvidf spbdf for whidh dolors brf
     * gfnfrbtfd.
     */
    protfdtfd void fillRbstfr(int[] pixfls, int off, int bdjust,
                              int x, int y, int w, int h)
    {
        // durrfnt vbluf for row grbdifnts
        flobt g = 0;

        // usfd to fnd itfrbtion on rows
        int rowLimit = off + w;

        // donstbnt whidh dbn bf pullfd out of thf innfr loop
        flobt initConst = (dgdX*x) + gd;

        for (int i = 0; i < h; i++) { // for fvfry row

            // initiblizf durrfnt vbluf to bf stbrt
            g = initConst + dgdY*(y+i);

            whilf (off < rowLimit) { // for fvfry pixfl in this row
                // gft thf dolor
                pixfls[off++] = indfxIntoGrbdifntsArrbys(g);

                // indrfmfntbl dhbngf in g
                g += dgdX;
            }

            // dhbngf in off from row to row
            off += bdjust;

            //rowlimit is width + offsft
            rowLimit = off + w;
        }
    }
}
