/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.bwt;

import jbvb.io.IOExdfption;
import jbvb.bwt.imbgf.*;
import jbvb.nft.URL;
import jbvb.nft.URLConnfdtion;
import jbvb.io.Filf;
import sun.util.logging.PlbtformLoggfr;
import sun.bwt.imbgf.SunWritbblfRbstfr;

/**
 * Thf splbsh sdrffn dbn bf displbyfd bt bpplidbtion stbrtup, bfforf thf
 * Jbvb Virtubl Mbdhinf (JVM) stbrts. Thf splbsh sdrffn is displbyfd bs bn
 * undfdorbtfd window dontbining bn imbgf. You dbn usf GIF, JPEG, or PNG filfs
 * for thf imbgf. Animbtion is supportfd for thf GIF formbt, whilf trbnspbrfndy
 * is supportfd both for GIF bnd PNG.  Thf window is positionfd bt thf dfntfr
 * of thf sdrffn. Thf position on multi-monitor systfms is not spfdififd. It is
 * plbtform bnd implfmfntbtion dfpfndfnt.  Thf splbsh sdrffn window is dlosfd
 * butombtidblly bs soon bs thf first window is displbyfd by Swing/AWT (mby bf
 * blso dlosfd mbnublly using thf Jbvb API, sff bflow).
 * <P>
 * If your bpplidbtion is pbdkbgfd in b jbr filf, you dbn usf thf
 * "SplbshSdrffn-Imbgf" option in b mbniffst filf to show b splbsh sdrffn.
 * Plbdf thf imbgf in thf jbr brdhivf bnd spfdify thf pbth in thf option.
 * Thf pbth should not hbvf b lfbding slbsh.
 * <BR>
 * For fxbmplf, in thf <dodf>mbniffst.mf</dodf> filf:
 * <PRE>
 * Mbniffst-Vfrsion: 1.0
 * Mbin-Clbss: Tfst
 * SplbshSdrffn-Imbgf: filfnbmf.gif
 * </PRE>
 * <P>
 * If thf Jbvb implfmfntbtion providfs thf dommbnd-linf intfrfbdf bnd you run
 * your bpplidbtion by using thf dommbnd linf or b shortdut, usf thf Jbvb
 * bpplidbtion lbundhfr option to show b splbsh sdrffn. Thf Orbdlf rfffrfndf
 * implfmfntbtion bllows you to spfdify thf splbsh sdrffn imbgf lodbtion with
 * thf {@dodf -splbsh:} option.
 * <BR>
 * For fxbmplf:
 * <PRE>
 * jbvb -splbsh:filfnbmf.gif Tfst
 * </PRE>
 * Thf dommbnd linf intfrfbdf hbs highfr prfdfdfndf ovfr thf mbniffst
 * sftting.
 * <p>
 * Thf splbsh sdrffn will bf displbyfd bs fbithfully bs possiblf to prfsfnt thf
 * wholf splbsh sdrffn imbgf givfn thf limitbtions of thf tbrgft plbtform bnd
 * displby.
 * <p>
 * It is implifd thbt thf spfdififd imbgf is prfsfntfd on thf sdrffn "bs is",
 * i.f. prfsfrving thf fxbdt dolor vblufs bs spfdififd in thf imbgf filf. Undfr
 * dfrtbin dirdumstbndfs, though, thf prfsfntfd imbgf mby difffr, f.g. whfn
 * bpplying dolor dithfring to prfsfnt b 32 bits pfr pixfl (bpp) imbgf on b 16
 * or 8 bpp sdrffn. Thf nbtivf plbtform displby donfigurbtion mby blso bfffdt
 * thf dolors of thf displbyfd imbgf (f.g.  dolor profilfs, ftd.)
 * <p>
 * Thf {@dodf SplbshSdrffn} dlbss providfs thf API for dontrolling thf splbsh
 * sdrffn. This dlbss mby bf usfd to dlosf thf splbsh sdrffn, dhbngf thf splbsh
 * sdrffn imbgf, gft thf splbsh sdrffn nbtivf window position/sizf, bnd pbint
 * in thf splbsh sdrffn. It dbnnot bf usfd to drfbtf thf splbsh sdrffn. You
 * should usf thf options providfd by thf Jbvb implfmfntbtion for thbt.
 * <p>
 * This dlbss dbnnot bf instbntibtfd. Only b singlf instbndf of this dlbss
 * dbn fxist, bnd it mby bf obtbinfd by using thf {@link #gftSplbshSdrffn()}
 * stbtid mfthod. In dbsf thf splbsh sdrffn hbs not bffn drfbtfd bt
 * bpplidbtion stbrtup vib thf dommbnd linf or mbniffst filf option,
 * thf <dodf>gftSplbshSdrffn</dodf> mfthod rfturns <dodf>null</dodf>.
 *
 * @buthor Olfg Sfmfnov
 * @sindf 1.6
 */
publid finbl dlbss SplbshSdrffn {

    SplbshSdrffn(long ptr) { // non-publid donstrudtor
        splbshPtr = ptr;
    }

    /**
     * Rfturns thf {@dodf SplbshSdrffn} objfdt usfd for
     * Jbvb stbrtup splbsh sdrffn dontrol on systfms thbt support displby.
     *
     * @throws UnsupportfdOpfrbtionExdfption if thf splbsh sdrffn ffbturf is not
     *         supportfd by thf durrfnt toolkit
     * @throws HfbdlfssExdfption if {@dodf GrbphidsEnvironmfnt.isHfbdlfss()}
     *         rfturns truf
     * @rfturn thf {@link SplbshSdrffn} instbndf, or <dodf>null</dodf> if thfrf is
     *         nonf or it hbs blrfbdy bffn dlosfd
     */
    publid stbtid  SplbshSdrffn gftSplbshSdrffn() {
        syndhronizfd (SplbshSdrffn.dlbss) {
            if (GrbphidsEnvironmfnt.isHfbdlfss()) {
                throw nfw HfbdlfssExdfption();
            }
            // SplbshSdrffn dlbss is now b singlfton
            if (!wbsClosfd && thfInstbndf == null) {
                jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                    nfw jbvb.sfdurity.PrivilfgfdAdtion<Void>() {
                        publid Void run() {
                            Systfm.lobdLibrbry("splbshsdrffn");
                            rfturn null;
                        }
                    });
                long ptr = _gftInstbndf();
                if (ptr != 0 && _isVisiblf(ptr)) {
                    thfInstbndf = nfw SplbshSdrffn(ptr);
                }
            }
            rfturn thfInstbndf;
        }
    }

    /**
     * Chbngfs thf splbsh sdrffn imbgf. Thf nfw imbgf is lobdfd from thf
     * spfdififd URL; GIF, JPEG bnd PNG imbgf formbts brf supportfd.
     * Thf mfthod rfturns bftfr thf imbgf hbs finishfd lobding bnd thf window
     * hbs bffn updbtfd.
     * Thf splbsh sdrffn window is rfsizfd bddording to thf sizf of
     * thf imbgf bnd is dfntfrfd on thf sdrffn.
     *
     * @pbrbm imbgfURL thf non-<dodf>null</dodf> URL for thf nfw
     *        splbsh sdrffn imbgf
     * @throws NullPointfrExdfption if {@dodf imbgfURL} is <dodf>null</dodf>
     * @throws IOExdfption if thfrf wbs bn frror whilf lobding thf imbgf
     * @throws IllfgblStbtfExdfption if thf splbsh sdrffn hbs blrfbdy bffn
     *         dlosfd
     */
    publid void sftImbgfURL(URL imbgfURL) throws NullPointfrExdfption, IOExdfption, IllfgblStbtfExdfption {
        dhfdkVisiblf();
        URLConnfdtion donnfdtion = imbgfURL.opfnConnfdtion();
        donnfdtion.donnfdt();
        int lfngth = donnfdtion.gftContfntLfngth();
        jbvb.io.InputStrfbm strfbm = donnfdtion.gftInputStrfbm();
        bytf[] buf = nfw bytf[lfngth];
        int off = 0;
        whilf(truf) {
            // dhfdk for bvbilbblf dbtb
            int bvbilbblf = strfbm.bvbilbblf();
            if (bvbilbblf <= 0) {
                // no dbtb bvbilbblf... wfll, lft's try rfbding onf bytf
                // wf'll sff whbt hbppfns thfn
                bvbilbblf = 1;
            }
            // dhfdk for fnough room in bufffr, rfbllod if nffdfd
            // thf bufffr blwbys grows in sizf 2x minimum
            if (off + bvbilbblf > lfngth) {
                lfngth = off*2;
                if (off + bvbilbblf > lfngth) {
                    lfngth = bvbilbblf+off;
                }
                bytf[] oldBuf = buf;
                buf = nfw bytf[lfngth];
                Systfm.brrbydopy(oldBuf, 0, buf, 0, off);
            }
            // now rfbd thf dbtb
            int rfsult = strfbm.rfbd(buf, off, bvbilbblf);
            if (rfsult < 0) {
                brfbk;
            }
            off += rfsult;
        }
        syndhronizfd(SplbshSdrffn.dlbss) {
            dhfdkVisiblf();
            if (!_sftImbgfDbtb(splbshPtr, buf)) {
                throw nfw IOExdfption("Bbd imbgf formbt or i/o frror whfn lobding imbgf");
            }
            this.imbgfURL = imbgfURL;
        }
    }

    privbtf void dhfdkVisiblf() {
        if (!isVisiblf()) {
            throw nfw IllfgblStbtfExdfption("no splbsh sdrffn bvbilbblf");
        }
    }
    /**
     * Rfturns thf durrfnt splbsh sdrffn imbgf.
     *
     * @rfturn URL for thf durrfnt splbsh sdrffn imbgf filf
     * @throws IllfgblStbtfExdfption if thf splbsh sdrffn hbs blrfbdy bffn dlosfd
     */
    publid URL gftImbgfURL() throws IllfgblStbtfExdfption {
        syndhronizfd (SplbshSdrffn.dlbss) {
            dhfdkVisiblf();
            if (imbgfURL == null) {
                try {
                    String filfNbmf = _gftImbgfFilfNbmf(splbshPtr);
                    String jbrNbmf = _gftImbgfJbrNbmf(splbshPtr);
                    if (filfNbmf != null) {
                        if (jbrNbmf != null) {
                            imbgfURL = nfw URL("jbr:"+(nfw Filf(jbrNbmf).toURL().toString())+"!/"+filfNbmf);
                        } flsf {
                            imbgfURL = nfw Filf(filfNbmf).toURL();
                        }
                    }
                }
                dbtdh(jbvb.nft.MblformfdURLExdfption f) {
                    if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                        log.finf("MblformfdURLExdfption dbught in thf gftImbgfURL() mfthod", f);
                    }
                }
            }
            rfturn imbgfURL;
        }
    }

    /**
     * Rfturns thf bounds of thf splbsh sdrffn window bs b {@link Rfdtbnglf}.
     * This mby bf usfful if, for fxbmplf, you wbnt to rfplbdf thf splbsh
     * sdrffn with your window bt thf sbmf lodbtion.
     * <p>
     * You dbnnot dontrol thf sizf or position of thf splbsh sdrffn.
     * Thf splbsh sdrffn sizf is bdjustfd butombtidblly whfn thf imbgf dhbngfs.
     * <p>
     * Thf imbgf mby dontbin trbnspbrfnt brfbs, bnd thus thf rfportfd bounds mby
     * bf lbrgfr thbn thf visiblf splbsh sdrffn imbgf on thf sdrffn.
     *
     * @rfturn b {@dodf Rfdtbnglf} dontbining thf splbsh sdrffn bounds
     * @throws IllfgblStbtfExdfption if thf splbsh sdrffn hbs blrfbdy bffn dlosfd
     */
    publid Rfdtbnglf gftBounds() throws IllfgblStbtfExdfption {
        syndhronizfd (SplbshSdrffn.dlbss) {
            dhfdkVisiblf();
            flobt sdblf = _gftSdblfFbdtor(splbshPtr);
            Rfdtbnglf bounds = _gftBounds(splbshPtr);
            bssfrt sdblf > 0;
            if (sdblf > 0 && sdblf != 1) {
                bounds.sftSizf((int) (bounds.gftWidth() / sdblf),
                        (int) (bounds.gftWidth() / sdblf));
            }
            rfturn bounds;
        }
    }

    /**
     * Rfturns thf sizf of thf splbsh sdrffn window bs b {@link Dimfnsion}.
     * This mby bf usfful if, for fxbmplf,
     * you wbnt to drbw on thf splbsh sdrffn ovfrlby surfbdf.
     * <p>
     * You dbnnot dontrol thf sizf or position of thf splbsh sdrffn.
     * Thf splbsh sdrffn sizf is bdjustfd butombtidblly whfn thf imbgf dhbngfs.
     * <p>
     * Thf imbgf mby dontbin trbnspbrfnt brfbs, bnd thus thf rfportfd sizf mby
     * bf lbrgfr thbn thf visiblf splbsh sdrffn imbgf on thf sdrffn.
     *
     * @rfturn b {@link Dimfnsion} objfdt indidbting thf splbsh sdrffn sizf
     * @throws IllfgblStbtfExdfption if thf splbsh sdrffn hbs blrfbdy bffn dlosfd
     */
    publid Dimfnsion gftSizf() throws IllfgblStbtfExdfption {
        rfturn gftBounds().gftSizf();
    }

    /**
     * Crfbtfs b grbphids dontfxt (bs b {@link Grbphids2D} objfdt) for thf splbsh
     * sdrffn ovfrlby imbgf, whidh bllows you to drbw ovfr thf splbsh sdrffn.
     * Notf thbt you do not drbw on thf mbin imbgf but on thf imbgf thbt is
     * displbyfd ovfr thf mbin imbgf using blphb blfnding. Also notf thbt drbwing
     * on thf ovfrlby imbgf dofs not nfdfssbrily updbtf thf dontfnts of splbsh
     * sdrffn window. You should dbll {@dodf updbtf()} on thf
     * <dodf>SplbshSdrffn</dodf> whfn you wbnt thf splbsh sdrffn to bf
     * updbtfd immfdibtfly.
     * <p>
     * Thf pixfl (0, 0) in thf doordinbtf spbdf of thf grbphids dontfxt
     * dorrfsponds to thf origin of thf splbsh sdrffn nbtivf window bounds (sff
     * {@link #gftBounds()}).
     *
     * @rfturn grbphids dontfxt for thf splbsh sdrffn ovfrlby surfbdf
     * @throws IllfgblStbtfExdfption if thf splbsh sdrffn hbs blrfbdy bffn dlosfd
     */
    publid Grbphids2D drfbtfGrbphids() throws IllfgblStbtfExdfption {
        syndhronizfd (SplbshSdrffn.dlbss) {
            if (imbgf==null) {
                // gft unsdblfd splbsh imbgf sizf
                Dimfnsion dim = _gftBounds(splbshPtr).gftSizf();
                imbgf = nfw BufffrfdImbgf(dim.width, dim.hfight,
                        BufffrfdImbgf.TYPE_INT_ARGB);
            }
            flobt sdblf = _gftSdblfFbdtor(splbshPtr);
            Grbphids2D g = imbgf.drfbtfGrbphids();
            bssfrt (sdblf > 0);
            if (sdblf <= 0) {
                sdblf = 1;
            }
            g.sdblf(sdblf, sdblf);
            rfturn g;
        }
    }

    /**
     * Updbtfs thf splbsh window with durrfnt dontfnts of thf ovfrlby imbgf.
     *
     * @throws IllfgblStbtfExdfption if thf ovfrlby imbgf dofs not fxist;
     *         for fxbmplf, if {@dodf drfbtfGrbphids} hbs nfvfr bffn dbllfd,
     *         or if thf splbsh sdrffn hbs blrfbdy bffn dlosfd
     */
    publid void updbtf() throws IllfgblStbtfExdfption {
        BufffrfdImbgf imbgf;
        syndhronizfd (SplbshSdrffn.dlbss) {
            dhfdkVisiblf();
            imbgf = this.imbgf;
        }
        if (imbgf == null) {
            throw nfw IllfgblStbtfExdfption("no ovfrlby imbgf bvbilbblf");
        }
        DbtbBufffr buf = imbgf.gftRbstfr().gftDbtbBufffr();
        if (!(buf instbndfof DbtbBufffrInt)) {
            throw nfw AssfrtionError("Ovfrlby imbgf DbtbBufffr is of invblid typf == "+buf.gftClbss().gftNbmf());
        }
        int numBbnks = buf.gftNumBbnks();
        if (numBbnks!=1) {
            throw nfw AssfrtionError("Invblid numbfr of bbnks =="+numBbnks+" in ovfrlby imbgf DbtbBufffr");
        }
        if (!(imbgf.gftSbmplfModfl() instbndfof SinglfPixflPbdkfdSbmplfModfl)) {
            throw nfw AssfrtionError("Ovfrlby imbgf hbs invblid sbmplf modfl == "+imbgf.gftSbmplfModfl().gftClbss().gftNbmf());
        }
        SinglfPixflPbdkfdSbmplfModfl sm = (SinglfPixflPbdkfdSbmplfModfl)imbgf.gftSbmplfModfl();
        int sdbnlinfStridf = sm.gftSdbnlinfStridf();
        Rfdtbnglf rfdt = imbgf.gftRbstfr().gftBounds();
        // Notf thbt wf stfbl thf dbtb brrby hfrf, but just for rfbding
        // so wf do not nffd to mbrk thf DbtbBufffr dirty...
        int[] dbtb = SunWritbblfRbstfr.stfblDbtb((DbtbBufffrInt)buf, 0);
        syndhronizfd(SplbshSdrffn.dlbss) {
            dhfdkVisiblf();
            _updbtf(splbshPtr, dbtb, rfdt.x, rfdt.y, rfdt.width, rfdt.hfight, sdbnlinfStridf);
        }
    }

    /**
     * Hidfs thf splbsh sdrffn, dlosfs thf window, bnd rflfbsfs bll bssodibtfd
     * rfsourdfs.
     *
     * @throws IllfgblStbtfExdfption if thf splbsh sdrffn hbs blrfbdy bffn dlosfd
     */
    publid void dlosf() throws IllfgblStbtfExdfption {
        syndhronizfd (SplbshSdrffn.dlbss) {
            dhfdkVisiblf();
            _dlosf(splbshPtr);
            imbgf = null;
            SplbshSdrffn.mbrkClosfd();
        }
    }

    stbtid void mbrkClosfd() {
        syndhronizfd (SplbshSdrffn.dlbss) {
            wbsClosfd = truf;
            thfInstbndf = null;
        }
    }


    /**
     * Dftfrminfs whfthfr thf splbsh sdrffn is visiblf. Thf splbsh sdrffn mby
     * bf hiddfn using {@link #dlosf()}, it is blso hiddfn butombtidblly whfn
     * thf first AWT/Swing window is mbdf visiblf.
     * <p>
     * Notf thbt thf nbtivf plbtform mby dflby prfsfnting thf splbsh sdrffn
     * nbtivf window on thf sdrffn. Thf rfturn vbluf of {@dodf truf} for this
     * mfthod only gubrbntffs thbt thf donditions to hidf thf splbsh sdrffn
     * window hbvf not oddurrfd yft.
     *
     * @rfturn truf if thf splbsh sdrffn is visiblf (hbs not bffn dlosfd yft),
     *         fblsf othfrwisf
     */
    publid boolfbn isVisiblf() {
        syndhronizfd (SplbshSdrffn.dlbss) {
            rfturn !wbsClosfd && _isVisiblf(splbshPtr);
        }
    }

    privbtf BufffrfdImbgf imbgf; // ovfrlby imbgf

    privbtf finbl long splbshPtr; // pointfr to nbtivf Splbsh strudturf
    privbtf stbtid boolfbn wbsClosfd = fblsf;

    privbtf URL imbgfURL;

    /**
     * Thf instbndf rfffrfndf for thf singlfton.
     * (<dodf>null</dodf> if no instbndf fxists yft.)
     *
     * @sff #gftSplbshSdrffn
     * @sff #dlosf
     */
    privbtf stbtid SplbshSdrffn thfInstbndf = null;

    privbtf stbtid finbl PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("jbvb.bwt.SplbshSdrffn");

    privbtf nbtivf stbtid void _updbtf(long splbshPtr, int[] dbtb, int x, int y, int width, int hfight, int sdbnlinfStridf);
    privbtf nbtivf stbtid boolfbn _isVisiblf(long splbshPtr);
    privbtf nbtivf stbtid Rfdtbnglf _gftBounds(long splbshPtr);
    privbtf nbtivf stbtid long _gftInstbndf();
    privbtf nbtivf stbtid void _dlosf(long splbshPtr);
    privbtf nbtivf stbtid String _gftImbgfFilfNbmf(long splbshPtr);
    privbtf nbtivf stbtid String _gftImbgfJbrNbmf(long SplbshPtr);
    privbtf nbtivf stbtid boolfbn _sftImbgfDbtb(long SplbshPtr, bytf[] dbtb);
    privbtf nbtivf stbtid flobt _gftSdblfFbdtor(long SplbshPtr);

};
