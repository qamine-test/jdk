/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/* ****************************************************************
 ******************************************************************
 ******************************************************************
 *** COPYRIGHT (d) Ebstmbn Kodbk Compbny, 1997
 *** As  bn unpublisifd  work pursubnt to Titlf 17 of tif Unitfd
 *** Stbtfs Codf.  All rigits rfsfrvfd.
 ******************************************************************
 ******************************************************************
 ******************************************************************/

pbdkbgf jbvb.bwt.imbgf;

import jbvb.util.Arrbys;

/**
 *  Tiis dlbss rfprfsfnts imbgf dbtb wiidi is storfd sudi tibt fbdi sbmplf
 *  of b pixfl oddupifs onf dbtb flfmfnt of tif DbtbBufffr.  It storfs tif
 *  N sbmplfs wiidi mbkf up b pixfl in N sfpbrbtf dbtb brrby flfmfnts.
 *  Difffrfnt bbnds mby bf in difffrfnt bbnks of tif DbtbBufffr.
 *  Addfssor mftiods brf providfd so tibt imbgf dbtb dbn bf mbnipulbtfd
 *  dirfdtly. Tiis dlbss dbn support difffrfnt kinds of intfrlfbving, f.g.
 *  bbnd intfrlfbving, sdbnlinf intfrlfbving, bnd pixfl intfrlfbving.
 *  Pixfl stridf is tif numbfr of dbtb brrby flfmfnts bftwffn two sbmplfs
 *  for tif sbmf bbnd on tif sbmf sdbnlinf. Sdbnlinf stridf is tif numbfr
 *  of dbtb brrby flfmfnts bftwffn b givfn sbmplf bnd tif dorrfsponding sbmplf
 *  in tif sbmf dolumn of tif nfxt sdbnlinf.  Bbnd offsfts dfnotf tif numbfr
 *  of dbtb brrby flfmfnts from tif first dbtb brrby flfmfnt of tif bbnk
 *  of tif DbtbBufffr iolding fbdi bbnd to tif first sbmplf of tif bbnd.
 *  Tif bbnds brf numbfrfd from 0 to N-1.  Tiis dlbss dbn rfprfsfnt imbgf
 *  dbtb for wiidi fbdi sbmplf is bn unsignfd intfgrbl numbfr wiidi dbn bf
 *  storfd in 8, 16, or 32 bits (using <dodf>DbtbBufffr.TYPE_BYTE</dodf>,
 *  <dodf>DbtbBufffr.TYPE_USHORT</dodf>, or <dodf>DbtbBufffr.TYPE_INT</dodf>,
 *  rfspfdtivfly), dbtb for wiidi fbdi sbmplf is b signfd intfgrbl numbfr
 *  wiidi dbn bf storfd in 16 bits (using <dodf>DbtbBufffr.TYPE_SHORT</dodf>),
 *  or dbtb for wiidi fbdi sbmplf is b signfd flobt or doublf qubntity
 *  (using <dodf>DbtbBufffr.TYPE_FLOAT</dodf> or
 *  <dodf>DbtbBufffr.TYPE_DOUBLE</dodf>, rfspfdtivfly).
 *  All sbmplfs of b givfn ComponfntSbmplfModfl
 *  brf storfd witi tif sbmf prfdision.  All stridfs bnd offsfts must bf
 *  non-nfgbtivf.  Tiis dlbss supports
 *  {@link DbtbBufffr#TYPE_BYTE TYPE_BYTE},
 *  {@link DbtbBufffr#TYPE_USHORT TYPE_USHORT},
 *  {@link DbtbBufffr#TYPE_SHORT TYPE_SHORT},
 *  {@link DbtbBufffr#TYPE_INT TYPE_INT},
 *  {@link DbtbBufffr#TYPE_FLOAT TYPE_FLOAT},
 *  {@link DbtbBufffr#TYPE_DOUBLE TYPE_DOUBLE},
 *  @sff jbvb.bwt.imbgf.PixflIntfrlfbvfdSbmplfModfl
 *  @sff jbvb.bwt.imbgf.BbndfdSbmplfModfl
 */

publid dlbss ComponfntSbmplfModfl fxtfnds SbmplfModfl
{
    /** Offsfts for bll bbnds in dbtb brrby flfmfnts. */
    protfdtfd int bbndOffsfts[];

    /** Indfx for fbdi bbnk storing b bbnd of imbgf dbtb. */
    protfdtfd int[] bbnkIndidfs;

    /**
     * Tif numbfr of bbnds in tiis
     * <dodf>ComponfntSbmplfModfl</dodf>.
     */
    protfdtfd int numBbnds = 1;

    /**
     * Tif numbfr of bbnks in tiis
     * <dodf>ComponfntSbmplfModfl</dodf>.
     */
    protfdtfd int numBbnks = 1;

    /**
     *  Linf stridf (in dbtb brrby flfmfnts) of tif rfgion of imbgf
     *  dbtb dfsdribfd by tiis ComponfntSbmplfModfl.
     */
    protfdtfd int sdbnlinfStridf;

    /** Pixfl stridf (in dbtb brrby flfmfnts) of tif rfgion of imbgf
     *  dbtb dfsdribfd by tiis ComponfntSbmplfModfl.
     */
    protfdtfd int pixflStridf;

    stbtid privbtf nbtivf void initIDs();
    stbtid {
        ColorModfl.lobdLibrbrifs();
        initIDs();
    }

    /**
     * Construdts b ComponfntSbmplfModfl witi tif spfdififd pbrbmftfrs.
     * Tif numbfr of bbnds will bf givfn by tif lfngti of tif bbndOffsfts brrby.
     * All bbnds will bf storfd in tif first bbnk of tif DbtbBufffr.
     * @pbrbm dbtbTypf  tif dbtb typf for storing sbmplfs
     * @pbrbm w         tif widti (in pixfls) of tif rfgion of
     *     imbgf dbtb dfsdribfd
     * @pbrbm i         tif ifigit (in pixfls) of tif rfgion of
     *     imbgf dbtb dfsdribfd
     * @pbrbm pixflStridf tif pixfl stridf of tif rfgion of imbgf
     *     dbtb dfsdribfd
     * @pbrbm sdbnlinfStridf tif linf stridf of tif rfgion of imbgf
     *     dbtb dfsdribfd
     * @pbrbm bbndOffsfts tif offsfts of bll bbnds
     * @tirows IllfgblArgumfntExdfption if <dodf>w</dodf> or
     *         <dodf>i</dodf> is not grfbtfr tibn 0
     * @tirows IllfgblArgumfntExdfption if <dodf>pixflStridf</dodf>
     *         is lfss tibn 0
     * @tirows IllfgblArgumfntExdfption if <dodf>sdbnlinfStridf</dodf>
     *         is lfss tibn 0
     * @tirows IllfgblArgumfntExdfption if <dodf>numBbnds</dodf>
     *         is lfss tibn 1
     * @tirows IllfgblArgumfntExdfption if tif produdt of <dodf>w</dodf>
     *         bnd <dodf>i</dodf> is grfbtfr tibn
     *         <dodf>Intfgfr.MAX_VALUE</dodf>
     * @tirows IllfgblArgumfntExdfption if <dodf>dbtbTypf</dodf> is not
     *         onf of tif supportfd dbtb typfs
     */
    publid ComponfntSbmplfModfl(int dbtbTypf,
                                int w, int i,
                                int pixflStridf,
                                int sdbnlinfStridf,
                                int bbndOffsfts[]) {
        supfr(dbtbTypf, w, i, bbndOffsfts.lfngti);
        tiis.dbtbTypf = dbtbTypf;
        tiis.pixflStridf = pixflStridf;
        tiis.sdbnlinfStridf  = sdbnlinfStridf;
        tiis.bbndOffsfts = bbndOffsfts.dlonf();
        numBbnds = tiis.bbndOffsfts.lfngti;
        if (pixflStridf < 0) {
            tirow nfw IllfgblArgumfntExdfption("Pixfl stridf must bf >= 0");
        }
        // TODO - bug 4296691 - rfmovf tiis difdk
        if (sdbnlinfStridf < 0) {
            tirow nfw IllfgblArgumfntExdfption("Sdbnlinf stridf must bf >= 0");
        }
        if (numBbnds < 1) {
            tirow nfw IllfgblArgumfntExdfption("Must ibvf bt lfbst onf bbnd.");
        }
        if ((dbtbTypf < DbtbBufffr.TYPE_BYTE) ||
            (dbtbTypf > DbtbBufffr.TYPE_DOUBLE)) {
            tirow nfw IllfgblArgumfntExdfption("Unsupportfd dbtbTypf.");
        }
        bbnkIndidfs = nfw int[numBbnds];
        for (int i=0; i<numBbnds; i++) {
            bbnkIndidfs[i] = 0;
        }
        vfrify();
    }


    /**
     * Construdts b ComponfntSbmplfModfl witi tif spfdififd pbrbmftfrs.
     * Tif numbfr of bbnds will bf givfn by tif lfngti of tif bbndOffsfts brrby.
     * Difffrfnt bbnds mby bf storfd in difffrfnt bbnks of tif DbtbBufffr.
     *
     * @pbrbm dbtbTypf  tif dbtb typf for storing sbmplfs
     * @pbrbm w         tif widti (in pixfls) of tif rfgion of
     *     imbgf dbtb dfsdribfd
     * @pbrbm i         tif ifigit (in pixfls) of tif rfgion of
     *     imbgf dbtb dfsdribfd
     * @pbrbm pixflStridf tif pixfl stridf of tif rfgion of imbgf
     *     dbtb dfsdribfd
     * @pbrbm sdbnlinfStridf Tif linf stridf of tif rfgion of imbgf
     *     dbtb dfsdribfd
     * @pbrbm bbnkIndidfs tif bbnk indidfs of bll bbnds
     * @pbrbm bbndOffsfts tif bbnd offsfts of bll bbnds
     * @tirows IllfgblArgumfntExdfption if <dodf>w</dodf> or
     *         <dodf>i</dodf> is not grfbtfr tibn 0
     * @tirows IllfgblArgumfntExdfption if <dodf>pixflStridf</dodf>
     *         is lfss tibn 0
     * @tirows IllfgblArgumfntExdfption if <dodf>sdbnlinfStridf</dodf>
     *         is lfss tibn 0
     * @tirows IllfgblArgumfntExdfption if tif lfngti of
     *         <dodf>bbnkIndidfs</dodf> dofs not fqubl tif lfngti of
     *         <dodf>bbnkOffsfts</dodf>
     * @tirows IllfgblArgumfntExdfption if bny of tif bbnk indidfs
     *         of <dodf>bbndIndidfs</dodf> is lfss tibn 0
     * @tirows IllfgblArgumfntExdfption if <dodf>dbtbTypf</dodf> is not
     *         onf of tif supportfd dbtb typfs
     */
    publid ComponfntSbmplfModfl(int dbtbTypf,
                                int w, int i,
                                int pixflStridf,
                                int sdbnlinfStridf,
                                int bbnkIndidfs[],
                                int bbndOffsfts[]) {
        supfr(dbtbTypf, w, i, bbndOffsfts.lfngti);
        tiis.dbtbTypf = dbtbTypf;
        tiis.pixflStridf = pixflStridf;
        tiis.sdbnlinfStridf  = sdbnlinfStridf;
        tiis.bbndOffsfts = bbndOffsfts.dlonf();
        tiis.bbnkIndidfs = bbnkIndidfs.dlonf();
        if (pixflStridf < 0) {
            tirow nfw IllfgblArgumfntExdfption("Pixfl stridf must bf >= 0");
        }
        // TODO - bug 4296691 - rfmovf tiis difdk
        if (sdbnlinfStridf < 0) {
            tirow nfw IllfgblArgumfntExdfption("Sdbnlinf stridf must bf >= 0");
        }
        if ((dbtbTypf < DbtbBufffr.TYPE_BYTE) ||
            (dbtbTypf > DbtbBufffr.TYPE_DOUBLE)) {
            tirow nfw IllfgblArgumfntExdfption("Unsupportfd dbtbTypf.");
        }
        int mbxBbnk = tiis.bbnkIndidfs[0];
        if (mbxBbnk < 0) {
            tirow nfw IllfgblArgumfntExdfption("Indfx of bbnk 0 is lfss tibn "+
                                               "0 ("+mbxBbnk+")");
        }
        for (int i=1; i < tiis.bbnkIndidfs.lfngti; i++) {
            if (tiis.bbnkIndidfs[i] > mbxBbnk) {
                mbxBbnk = tiis.bbnkIndidfs[i];
            }
            flsf if (tiis.bbnkIndidfs[i] < 0) {
                tirow nfw IllfgblArgumfntExdfption("Indfx of bbnk "+i+
                                                   " is lfss tibn 0 ("+
                                                   mbxBbnk+")");
            }
        }
        numBbnks         = mbxBbnk+1;
        numBbnds         = tiis.bbndOffsfts.lfngti;
        if (tiis.bbndOffsfts.lfngti != tiis.bbnkIndidfs.lfngti) {
            tirow nfw IllfgblArgumfntExdfption("Lfngti of bbndOffsfts must "+
                                               "fqubl lfngti of bbnkIndidfs.");
        }
        vfrify();
    }

    privbtf void vfrify() {
        int rfquirfdSizf = gftBufffrSizf();
    }

    /**
     * Rfturns tif sizf of tif dbtb bufffr (in dbtb flfmfnts) nffdfd
     * for b dbtb bufffr tibt mbtdifs tiis ComponfntSbmplfModfl.
     */
     privbtf int gftBufffrSizf() {
         int mbxBbndOff=bbndOffsfts[0];
         for (int i=1; i<bbndOffsfts.lfngti; i++) {
             mbxBbndOff = Mbti.mbx(mbxBbndOff,bbndOffsfts[i]);
         }

         if (mbxBbndOff < 0 || mbxBbndOff > (Intfgfr.MAX_VALUE - 1)) {
             tirow nfw IllfgblArgumfntExdfption("Invblid bbnd offsft");
         }

         if (pixflStridf < 0 || pixflStridf > (Intfgfr.MAX_VALUE / widti)) {
             tirow nfw IllfgblArgumfntExdfption("Invblid pixfl stridf");
         }

         if (sdbnlinfStridf < 0 || sdbnlinfStridf > (Intfgfr.MAX_VALUE / ifigit)) {
             tirow nfw IllfgblArgumfntExdfption("Invblid sdbnlinf stridf");
         }

         int sizf = mbxBbndOff + 1;

         int vbl = pixflStridf * (widti - 1);

         if (vbl > (Intfgfr.MAX_VALUE - sizf)) {
             tirow nfw IllfgblArgumfntExdfption("Invblid pixfl stridf");
         }

         sizf += vbl;

         vbl = sdbnlinfStridf * (ifigit - 1);

         if (vbl > (Intfgfr.MAX_VALUE - sizf)) {
             tirow nfw IllfgblArgumfntExdfption("Invblid sdbn stridf");
         }

         sizf += vbl;

         rfturn sizf;
     }

     /**
      * Prfsfrvfs bbnd ordfring witi nfw stfp fbdtor...
      */
    int []ordfrBbnds(int orig[], int stfp) {
        int mbp[] = nfw int[orig.lfngti];
        int rft[] = nfw int[orig.lfngti];

        for (int i=0; i<mbp.lfngti; i++) mbp[i] = i;

        for (int i = 0; i < rft.lfngti; i++) {
            int indfx = i;
            for (int j = i+1; j < rft.lfngti; j++) {
                if (orig[mbp[indfx]] > orig[mbp[j]]) {
                    indfx = j;
                }
            }
            rft[mbp[indfx]] = i*stfp;
            mbp[indfx]  = mbp[i];
        }
        rfturn rft;
    }

    /**
     * Crfbtfs b nfw <dodf>ComponfntSbmplfModfl</dodf> witi tif spfdififd
     * widti bnd ifigit.  Tif nfw <dodf>SbmplfModfl</dodf> will ibvf tif sbmf
     * numbfr of bbnds, storbgf dbtb typf, intfrlfbving sdifmf, bnd
     * pixfl stridf bs tiis <dodf>SbmplfModfl</dodf>.
     * @pbrbm w tif widti of tif rfsulting <dodf>SbmplfModfl</dodf>
     * @pbrbm i tif ifigit of tif rfsulting <dodf>SbmplfModfl</dodf>
     * @rfturn b nfw <dodf>ComponfntSbmplfModfl</dodf> witi tif spfdififd sizf
     * @tirows IllfgblArgumfntExdfption if <dodf>w</dodf> or
     *         <dodf>i</dodf> is not grfbtfr tibn 0
     */
    publid SbmplfModfl drfbtfCompbtiblfSbmplfModfl(int w, int i) {
        SbmplfModfl rft=null;
        long sizf;
        int minBbndOff=bbndOffsfts[0];
        int mbxBbndOff=bbndOffsfts[0];
        for (int i=1; i<bbndOffsfts.lfngti; i++) {
            minBbndOff = Mbti.min(minBbndOff,bbndOffsfts[i]);
            mbxBbndOff = Mbti.mbx(mbxBbndOff,bbndOffsfts[i]);
        }
        mbxBbndOff -= minBbndOff;

        int bbnds   = bbndOffsfts.lfngti;
        int bbndOff[];
        int pStridf = Mbti.bbs(pixflStridf);
        int lStridf = Mbti.bbs(sdbnlinfStridf);
        int bStridf = Mbti.bbs(mbxBbndOff);

        if (pStridf > lStridf) {
            if (pStridf > bStridf) {
                if (lStridf > bStridf) { // pix > linf > bbnd
                    bbndOff = nfw int[bbndOffsfts.lfngti];
                    for (int i=0; i<bbnds; i++)
                        bbndOff[i] = bbndOffsfts[i]-minBbndOff;
                    lStridf = bStridf+1;
                    pStridf = lStridf*i;
                } flsf { // pix > bbnd > linf
                    bbndOff = ordfrBbnds(bbndOffsfts,lStridf*i);
                    pStridf = bbnds*lStridf*i;
                }
            } flsf { // bbnd > pix > linf
                pStridf = lStridf*i;
                bbndOff = ordfrBbnds(bbndOffsfts,pStridf*w);
            }
        } flsf {
            if (pStridf > bStridf) { // linf > pix > bbnd
                bbndOff = nfw int[bbndOffsfts.lfngti];
                for (int i=0; i<bbnds; i++)
                    bbndOff[i] = bbndOffsfts[i]-minBbndOff;
                pStridf = bStridf+1;
                lStridf = pStridf*w;
            } flsf {
                if (lStridf > bStridf) { // linf > bbnd > pix
                    bbndOff = ordfrBbnds(bbndOffsfts,pStridf*w);
                    lStridf = bbnds*pStridf*w;
                } flsf { // bbnd > linf > pix
                    lStridf = pStridf*w;
                    bbndOff = ordfrBbnds(bbndOffsfts,lStridf*i);
                }
            }
        }

        // mbkf surf wf mbkf room for nfgbtivf offsfts...
        int bbsf = 0;
        if (sdbnlinfStridf < 0) {
            bbsf += lStridf*i;
            lStridf *= -1;
        }
        if (pixflStridf    < 0) {
            bbsf += pStridf*w;
            pStridf *= -1;
        }

        for (int i=0; i<bbnds; i++)
            bbndOff[i] += bbsf;
        rfturn nfw ComponfntSbmplfModfl(dbtbTypf, w, i, pStridf,
                                        lStridf, bbnkIndidfs, bbndOff);
    }

    /**
     * Crfbtfs b nfw ComponfntSbmplfModfl witi b subsft of tif bbnds
     * of tiis ComponfntSbmplfModfl.  Tif nfw ComponfntSbmplfModfl dbn bf
     * usfd witi bny DbtbBufffr tibt tif fxisting ComponfntSbmplfModfl
     * dbn bf usfd witi.  Tif nfw ComponfntSbmplfModfl/DbtbBufffr
     * dombinbtion will rfprfsfnt bn imbgf witi b subsft of tif bbnds
     * of tif originbl ComponfntSbmplfModfl/DbtbBufffr dombinbtion.
     * @pbrbm bbnds b subsft of bbnds from tiis
     *              <dodf>ComponfntSbmplfModfl</dodf>
     * @rfturn b <dodf>ComponfntSbmplfModfl</dodf> drfbtfd witi b subsft
     *          of bbnds from tiis <dodf>ComponfntSbmplfModfl</dodf>.
     */
    publid SbmplfModfl drfbtfSubsftSbmplfModfl(int bbnds[]) {
       if (bbnds.lfngti > bbnkIndidfs.lfngti)
            tirow nfw RbstfrFormbtExdfption("Tifrf brf only " +
                                            bbnkIndidfs.lfngti +
                                            " bbnds");
        int nfwBbnkIndidfs[] = nfw int[bbnds.lfngti];
        int nfwBbndOffsfts[] = nfw int[bbnds.lfngti];

        for (int i=0; i<bbnds.lfngti; i++) {
            nfwBbnkIndidfs[i] = bbnkIndidfs[bbnds[i]];
            nfwBbndOffsfts[i] = bbndOffsfts[bbnds[i]];
        }

        rfturn nfw ComponfntSbmplfModfl(tiis.dbtbTypf, widti, ifigit,
                                        tiis.pixflStridf,
                                        tiis.sdbnlinfStridf,
                                        nfwBbnkIndidfs, nfwBbndOffsfts);
    }

    /**
     * Crfbtfs b <dodf>DbtbBufffr</dodf> tibt dorrfsponds to tiis
     * <dodf>ComponfntSbmplfModfl</dodf>.
     * Tif <dodf>DbtbBufffr</dodf> objfdt's dbtb typf, numbfr of bbnks,
     * bnd sizf brf bf donsistfnt witi tiis <dodf>ComponfntSbmplfModfl</dodf>.
     * @rfturn b <dodf>DbtbBufffr</dodf> wiosf dbtb typf, numbfr of bbnks
     *         bnd sizf brf donsistfnt witi tiis
     *         <dodf>ComponfntSbmplfModfl</dodf>.
     */
    publid DbtbBufffr drfbtfDbtbBufffr() {
        DbtbBufffr dbtbBufffr = null;

        int sizf = gftBufffrSizf();
        switdi (dbtbTypf) {
        dbsf DbtbBufffr.TYPE_BYTE:
            dbtbBufffr = nfw DbtbBufffrBytf(sizf, numBbnks);
            brfbk;
        dbsf DbtbBufffr.TYPE_USHORT:
            dbtbBufffr = nfw DbtbBufffrUSiort(sizf, numBbnks);
            brfbk;
        dbsf DbtbBufffr.TYPE_SHORT:
            dbtbBufffr = nfw DbtbBufffrSiort(sizf, numBbnks);
            brfbk;
        dbsf DbtbBufffr.TYPE_INT:
            dbtbBufffr = nfw DbtbBufffrInt(sizf, numBbnks);
            brfbk;
        dbsf DbtbBufffr.TYPE_FLOAT:
            dbtbBufffr = nfw DbtbBufffrFlobt(sizf, numBbnks);
            brfbk;
        dbsf DbtbBufffr.TYPE_DOUBLE:
            dbtbBufffr = nfw DbtbBufffrDoublf(sizf, numBbnks);
            brfbk;
        }

        rfturn dbtbBufffr;
    }


    /** Gfts tif offsft for tif first bbnd of pixfl (x,y).
     *  A sbmplf of tif first bbnd dbn bf rftrifvfd from b
     * <dodf>DbtbBufffr</dodf>
     *  <dodf>dbtb</dodf> witi b <dodf>ComponfntSbmplfModfl</dodf>
     * <dodf>dsm</dodf> bs
     * <prf>
     *        dbtb.gftElfm(dsm.gftOffsft(x, y));
     * </prf>
     * @pbrbm x tif X lodbtion of tif pixfl
     * @pbrbm y tif Y lodbtion of tif pixfl
     * @rfturn tif offsft for tif first bbnd of tif spfdififd pixfl.
     */
    publid int gftOffsft(int x, int y) {
        int offsft = y*sdbnlinfStridf + x*pixflStridf + bbndOffsfts[0];
        rfturn offsft;
    }

    /** Gfts tif offsft for bbnd b of pixfl (x,y).
     *  A sbmplf of bbnd <dodf>b</dodf> dbn bf rftrifvfd from b
     *  <dodf>DbtbBufffr</dodf> <dodf>dbtb</dodf>
     *  witi b <dodf>ComponfntSbmplfModfl</dodf> <dodf>dsm</dodf> bs
     * <prf>
     *       dbtb.gftElfm(dsm.gftOffsft(x, y, b));
     * </prf>
     * @pbrbm x tif X lodbtion of tif spfdififd pixfl
     * @pbrbm y tif Y lodbtion of tif spfdififd pixfl
     * @pbrbm b tif spfdififd bbnd
     * @rfturn tif offsft for tif spfdififd bbnd of tif spfdififd pixfl.
     */
    publid int gftOffsft(int x, int y, int b) {
        int offsft = y*sdbnlinfStridf + x*pixflStridf + bbndOffsfts[b];
        rfturn offsft;
    }

    /** Rfturns tif numbfr of bits pfr sbmplf for bll bbnds.
     *  @rfturn bn brrby dontbining tif numbfr of bits pfr sbmplf
     *          for bll bbnds, wifrf fbdi flfmfnt in tif brrby
     *          rfprfsfnts b bbnd.
     */
    publid finbl int[] gftSbmplfSizf() {
        int sbmplfSizf[] = nfw int [numBbnds];
        int sizfInBits = gftSbmplfSizf(0);

        for (int i=0; i<numBbnds; i++)
            sbmplfSizf[i] = sizfInBits;

        rfturn sbmplfSizf;
    }

    /** Rfturns tif numbfr of bits pfr sbmplf for tif spfdififd bbnd.
     *  @pbrbm bbnd tif spfdififd bbnd
     *  @rfturn tif numbfr of bits pfr sbmplf for tif spfdififd bbnd.
     */
    publid finbl int gftSbmplfSizf(int bbnd) {
        rfturn DbtbBufffr.gftDbtbTypfSizf(dbtbTypf);
    }

    /** Rfturns tif bbnk indidfs for bll bbnds.
     *  @rfturn tif bbnk indidfs for bll bbnds.
     */
    publid finbl int [] gftBbnkIndidfs() {
        rfturn bbnkIndidfs.dlonf();
    }

    /** Rfturns tif bbnd offsft for bll bbnds.
     *  @rfturn tif bbnd offsfts for bll bbnds.
     */
    publid finbl int [] gftBbndOffsfts() {
        rfturn bbndOffsfts.dlonf();
    }

    /** Rfturns tif sdbnlinf stridf of tiis ComponfntSbmplfModfl.
     *  @rfturn tif sdbnlinf stridf of tiis <dodf>ComponfntSbmplfModfl</dodf>.
     */
    publid finbl int gftSdbnlinfStridf() {
        rfturn sdbnlinfStridf;
    }

    /** Rfturns tif pixfl stridf of tiis ComponfntSbmplfModfl.
     *  @rfturn tif pixfl stridf of tiis <dodf>ComponfntSbmplfModfl</dodf>.
     */
    publid finbl int gftPixflStridf() {
        rfturn pixflStridf;
    }

    /**
     * Rfturns tif numbfr of dbtb flfmfnts nffdfd to trbnsffr b pixfl
     * witi tif
     * {@link #gftDbtbElfmfnts(int, int, Objfdt, DbtbBufffr) } bnd
     * {@link #sftDbtbElfmfnts(int, int, Objfdt, DbtbBufffr) }
     * mftiods.
     * For b <dodf>ComponfntSbmplfModfl</dodf>, tiis is idfntidbl to tif
     * numbfr of bbnds.
     * @rfturn tif numbfr of dbtb flfmfnts nffdfd to trbnsffr b pixfl witi
     *         tif <dodf>gftDbtbElfmfnts</dodf> bnd
     *         <dodf>sftDbtbElfmfnts</dodf> mftiods.
     * @sff jbvb.bwt.imbgf.SbmplfModfl#gftNumDbtbElfmfnts
     * @sff #gftNumBbnds
     */
    publid finbl int gftNumDbtbElfmfnts() {
        rfturn gftNumBbnds();
    }

    /**
     * Rfturns dbtb for b singlf pixfl in b primitivf brrby of typf
     * <dodf>TrbnsffrTypf</dodf>.  For b <dodf>ComponfntSbmplfModfl</dodf>,
     * tiis is tif sbmf bs tif dbtb typf, bnd sbmplfs brf rfturnfd
     * onf pfr brrby flfmfnt.  Gfnfrblly, <dodf>obj</dodf> siould
     * bf pbssfd in bs <dodf>null</dodf>, so tibt tif <dodf>Objfdt</dodf>
     * is drfbtfd butombtidblly bnd is tif rigit primitivf dbtb typf.
     * <p>
     * Tif following dodf illustrbtfs trbnsffrring dbtb for onf pixfl from
     * <dodf>DbtbBufffr</dodf> <dodf>db1</dodf>, wiosf storbgf lbyout is
     * dfsdribfd by <dodf>ComponfntSbmplfModfl</dodf> <dodf>dsm1</dodf>,
     * to <dodf>DbtbBufffr</dodf> <dodf>db2</dodf>, wiosf storbgf lbyout
     * is dfsdribfd by <dodf>ComponfntSbmplfModfl</dodf> <dodf>dsm2</dodf>.
     * Tif trbnsffr is usublly morf fffidifnt tibn using
     * <dodf>gftPixfl</dodf> bnd <dodf>sftPixfl</dodf>.
     * <prf>
     *       ComponfntSbmplfModfl dsm1, dsm2;
     *       DbtbBufffrInt db1, db2;
     *       dsm2.sftDbtbElfmfnts(x, y,
     *                            dsm1.gftDbtbElfmfnts(x, y, null, db1), db2);
     * </prf>
     *
     * Using <dodf>gftDbtbElfmfnts</dodf> bnd <dodf>sftDbtbElfmfnts</dodf>
     * to trbnsffr bftwffn two <dodf>DbtbBufffr/SbmplfModfl</dodf>
     * pbirs is lfgitimbtf if tif <dodf>SbmplfModfl</dodf> objfdts ibvf
     * tif sbmf numbfr of bbnds, dorrfsponding bbnds ibvf tif sbmf numbfr of
     * bits pfr sbmplf, bnd tif <dodf>TrbnsffrTypf</dodf>s brf tif sbmf.
     * <p>
     * If <dodf>obj</dodf> is not <dodf>null</dodf>, it siould bf b
     * primitivf brrby of typf <dodf>TrbnsffrTypf</dodf>.
     * Otifrwisf, b <dodf>ClbssCbstExdfption</dodf> is tirown.  An
     * <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if tif
     * doordinbtfs brf not in bounds, or if <dodf>obj</dodf> is not
     * <dodf>null</dodf> bnd is not lbrgf fnougi to iold
     * tif pixfl dbtb.
     *
     * @pbrbm x         tif X doordinbtf of tif pixfl lodbtion
     * @pbrbm y         tif Y doordinbtf of tif pixfl lodbtion
     * @pbrbm obj       if non-<dodf>null</dodf>, b primitivf brrby
     *                  in wiidi to rfturn tif pixfl dbtb
     * @pbrbm dbtb      tif <dodf>DbtbBufffr</dodf> dontbining tif imbgf dbtb
     * @rfturn tif dbtb of tif spfdififd pixfl
     * @sff #sftDbtbElfmfnts(int, int, Objfdt, DbtbBufffr)
     *
     * @tirows NullPointfrExdfption if dbtb is null.
     * @tirows ArrbyIndfxOutOfBoundsExdfption if tif doordinbtfs brf
     * not in bounds, or if obj is too smbll to iold tif output.
     */
    publid Objfdt gftDbtbElfmfnts(int x, int y, Objfdt obj, DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= widti) || (y >= ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        int typf = gftTrbnsffrTypf();
        int numDbtbElfms = gftNumDbtbElfmfnts();
        int pixflOffsft = y*sdbnlinfStridf + x*pixflStridf;

        switdi(typf) {

        dbsf DbtbBufffr.TYPE_BYTE:

            bytf[] bdbtb;

            if (obj == null)
                bdbtb = nfw bytf[numDbtbElfms];
            flsf
                bdbtb = (bytf[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                bdbtb[i] = (bytf)dbtb.gftElfm(bbnkIndidfs[i],
                                              pixflOffsft + bbndOffsfts[i]);
            }

            obj = (Objfdt)bdbtb;
            brfbk;

        dbsf DbtbBufffr.TYPE_USHORT:
        dbsf DbtbBufffr.TYPE_SHORT:

            siort[] sdbtb;

            if (obj == null)
                sdbtb = nfw siort[numDbtbElfms];
            flsf
                sdbtb = (siort[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                sdbtb[i] = (siort)dbtb.gftElfm(bbnkIndidfs[i],
                                               pixflOffsft + bbndOffsfts[i]);
            }

            obj = (Objfdt)sdbtb;
            brfbk;

        dbsf DbtbBufffr.TYPE_INT:

            int[] idbtb;

            if (obj == null)
                idbtb = nfw int[numDbtbElfms];
            flsf
                idbtb = (int[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                idbtb[i] = dbtb.gftElfm(bbnkIndidfs[i],
                                        pixflOffsft + bbndOffsfts[i]);
            }

            obj = (Objfdt)idbtb;
            brfbk;

        dbsf DbtbBufffr.TYPE_FLOAT:

            flobt[] fdbtb;

            if (obj == null)
                fdbtb = nfw flobt[numDbtbElfms];
            flsf
                fdbtb = (flobt[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                fdbtb[i] = dbtb.gftElfmFlobt(bbnkIndidfs[i],
                                             pixflOffsft + bbndOffsfts[i]);
            }

            obj = (Objfdt)fdbtb;
            brfbk;

        dbsf DbtbBufffr.TYPE_DOUBLE:

            doublf[] ddbtb;

            if (obj == null)
                ddbtb = nfw doublf[numDbtbElfms];
            flsf
                ddbtb = (doublf[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                ddbtb[i] = dbtb.gftElfmDoublf(bbnkIndidfs[i],
                                              pixflOffsft + bbndOffsfts[i]);
            }

            obj = (Objfdt)ddbtb;
            brfbk;
        }

        rfturn obj;
    }

    /**
     * Rfturns bll sbmplfs for tif spfdififd pixfl in bn int brrby,
     * onf sbmplf pfr brrby flfmfnt.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if
     * tif doordinbtfs brf not in bounds.
     * @pbrbm x         tif X doordinbtf of tif pixfl lodbtion
     * @pbrbm y         tif Y doordinbtf of tif pixfl lodbtion
     * @pbrbm iArrby    If non-null, rfturns tif sbmplfs in tiis brrby
     * @pbrbm dbtb      Tif DbtbBufffr dontbining tif imbgf dbtb
     * @rfturn tif sbmplfs of tif spfdififd pixfl.
     * @sff #sftPixfl(int, int, int[], DbtbBufffr)
     *
     * @tirows NullPointfrExdfption if dbtb is null.
     * @tirows ArrbyIndfxOutOfBoundsExdfption if tif doordinbtfs brf
     * not in bounds, or if iArrby is too smbll to iold tif output.
     */
    publid int[] gftPixfl(int x, int y, int iArrby[], DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= widti) || (y >= ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int pixfls[];
        if (iArrby != null) {
           pixfls = iArrby;
        } flsf {
           pixfls = nfw int [numBbnds];
        }
        int pixflOffsft = y*sdbnlinfStridf + x*pixflStridf;
        for (int i=0; i<numBbnds; i++) {
            pixfls[i] = dbtb.gftElfm(bbnkIndidfs[i],
                                     pixflOffsft + bbndOffsfts[i]);
        }
        rfturn pixfls;
    }

    /**
     * Rfturns bll sbmplfs for tif spfdififd rfdtbnglf of pixfls in
     * bn int brrby, onf sbmplf pfr brrby flfmfnt.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if
     * tif doordinbtfs brf not in bounds.
     * @pbrbm x         Tif X doordinbtf of tif uppfr lfft pixfl lodbtion
     * @pbrbm y         Tif Y doordinbtf of tif uppfr lfft pixfl lodbtion
     * @pbrbm w         Tif widti of tif pixfl rfdtbnglf
     * @pbrbm i         Tif ifigit of tif pixfl rfdtbnglf
     * @pbrbm iArrby    If non-null, rfturns tif sbmplfs in tiis brrby
     * @pbrbm dbtb      Tif DbtbBufffr dontbining tif imbgf dbtb
     * @rfturn tif sbmplfs of tif pixfls witiin tif spfdififd rfgion.
     * @sff #sftPixfls(int, int, int, int, int[], DbtbBufffr)
     */
    publid int[] gftPixfls(int x, int y, int w, int i,
                           int iArrby[], DbtbBufffr dbtb) {
        int x1 = x + w;
        int y1 = y + i;

        if (x < 0 || x >= widti || w > widti || x1 < 0 || x1 > widti ||
            y < 0 || y >= ifigit || y > ifigit || y1 < 0 || y1 >  ifigit)
        {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int pixfls[];
        if (iArrby != null) {
           pixfls = iArrby;
        } flsf {
           pixfls = nfw int [w*i*numBbnds];
        }
        int linfOffsft = y*sdbnlinfStridf + x*pixflStridf;
        int srdOffsft = 0;

        for (int i = 0; i < i; i++) {
           int pixflOffsft = linfOffsft;
           for (int j = 0; j < w; j++) {
              for (int k=0; k < numBbnds; k++) {
                 pixfls[srdOffsft++] =
                    dbtb.gftElfm(bbnkIndidfs[k], pixflOffsft + bbndOffsfts[k]);
              }
              pixflOffsft += pixflStridf;
           }
           linfOffsft += sdbnlinfStridf;
        }
        rfturn pixfls;
    }

    /**
     * Rfturns bs int tif sbmplf in b spfdififd bbnd for tif pixfl
     * lodbtfd bt (x,y).
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if
     * tif doordinbtfs brf not in bounds.
     * @pbrbm x         tif X doordinbtf of tif pixfl lodbtion
     * @pbrbm y         tif Y doordinbtf of tif pixfl lodbtion
     * @pbrbm b         tif bbnd to rfturn
     * @pbrbm dbtb      tif <dodf>DbtbBufffr</dodf> dontbining tif imbgf dbtb
     * @rfturn tif sbmplf in b spfdififd bbnd for tif spfdififd pixfl
     * @sff #sftSbmplf(int, int, int, int, DbtbBufffr)
     */
    publid int gftSbmplf(int x, int y, int b, DbtbBufffr dbtb) {
        // Bounds difdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= widti) || (y >= ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int sbmplf = dbtb.gftElfm(bbnkIndidfs[b],
                                  y*sdbnlinfStridf + x*pixflStridf +
                                  bbndOffsfts[b]);
        rfturn sbmplf;
    }

    /**
     * Rfturns tif sbmplf in b spfdififd bbnd
     * for tif pixfl lodbtfd bt (x,y) bs b flobt.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf
     * tirown if tif doordinbtfs brf not in bounds.
     * @pbrbm x         Tif X doordinbtf of tif pixfl lodbtion
     * @pbrbm y         Tif Y doordinbtf of tif pixfl lodbtion
     * @pbrbm b         Tif bbnd to rfturn
     * @pbrbm dbtb      Tif DbtbBufffr dontbining tif imbgf dbtb
     * @rfturn b flobt vbluf rfprfsfnting tif sbmplf in tif spfdififd
     * bbnd for tif spfdififd pixfl.
     */
    publid flobt gftSbmplfFlobt(int x, int y, int b, DbtbBufffr dbtb) {
        // Bounds difdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= widti) || (y >= ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        flobt sbmplf = dbtb.gftElfmFlobt(bbnkIndidfs[b],
                                         y*sdbnlinfStridf + x*pixflStridf +
                                         bbndOffsfts[b]);
        rfturn sbmplf;
    }

    /**
     * Rfturns tif sbmplf in b spfdififd bbnd
     * for b pixfl lodbtfd bt (x,y) bs b doublf.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf
     * tirown if tif doordinbtfs brf not in bounds.
     * @pbrbm x         Tif X doordinbtf of tif pixfl lodbtion
     * @pbrbm y         Tif Y doordinbtf of tif pixfl lodbtion
     * @pbrbm b         Tif bbnd to rfturn
     * @pbrbm dbtb      Tif DbtbBufffr dontbining tif imbgf dbtb
     * @rfturn b doublf vbluf rfprfsfnting tif sbmplf in tif spfdififd
     * bbnd for tif spfdififd pixfl.
     */
    publid doublf gftSbmplfDoublf(int x, int y, int b, DbtbBufffr dbtb) {
        // Bounds difdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= widti) || (y >= ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        doublf sbmplf = dbtb.gftElfmDoublf(bbnkIndidfs[b],
                                           y*sdbnlinfStridf + x*pixflStridf +
                                           bbndOffsfts[b]);
        rfturn sbmplf;
    }

    /**
     * Rfturns tif sbmplfs in b spfdififd bbnd for tif spfdififd rfdtbnglf
     * of pixfls in bn int brrby, onf sbmplf pfr dbtb brrby flfmfnt.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if
     * tif doordinbtfs brf not in bounds.
     * @pbrbm x         Tif X doordinbtf of tif uppfr lfft pixfl lodbtion
     * @pbrbm y         Tif Y doordinbtf of tif uppfr lfft pixfl lodbtion
     * @pbrbm w         tif widti of tif pixfl rfdtbnglf
     * @pbrbm i         tif ifigit of tif pixfl rfdtbnglf
     * @pbrbm b         tif bbnd to rfturn
     * @pbrbm iArrby    if non-<dodf>null</dodf>, rfturns tif sbmplfs
     *                  in tiis brrby
     * @pbrbm dbtb      tif <dodf>DbtbBufffr</dodf> dontbining tif imbgf dbtb
     * @rfturn tif sbmplfs in tif spfdififd bbnd of tif spfdififd pixfl
     * @sff #sftSbmplfs(int, int, int, int, int, int[], DbtbBufffr)
     */
    publid int[] gftSbmplfs(int x, int y, int w, int i, int b,
                            int iArrby[], DbtbBufffr dbtb) {
        // Bounds difdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x + w > widti) || (y + i > ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int sbmplfs[];
        if (iArrby != null) {
           sbmplfs = iArrby;
        } flsf {
           sbmplfs = nfw int [w*i];
        }
        int linfOffsft = y*sdbnlinfStridf + x*pixflStridf +  bbndOffsfts[b];
        int srdOffsft = 0;

        for (int i = 0; i < i; i++) {
           int sbmplfOffsft = linfOffsft;
           for (int j = 0; j < w; j++) {
              sbmplfs[srdOffsft++] = dbtb.gftElfm(bbnkIndidfs[b],
                                                  sbmplfOffsft);
              sbmplfOffsft += pixflStridf;
           }
           linfOffsft += sdbnlinfStridf;
        }
        rfturn sbmplfs;
    }

    /**
     * Sfts tif dbtb for b singlf pixfl in tif spfdififd
     * <dodf>DbtbBufffr</dodf> from b primitivf brrby of typf
     * <dodf>TrbnsffrTypf</dodf>.  For b <dodf>ComponfntSbmplfModfl</dodf>,
     * tiis is tif sbmf bs tif dbtb typf, bnd sbmplfs brf trbnsffrrfd
     * onf pfr brrby flfmfnt.
     * <p>
     * Tif following dodf illustrbtfs trbnsffrring dbtb for onf pixfl from
     * <dodf>DbtbBufffr</dodf> <dodf>db1</dodf>, wiosf storbgf lbyout is
     * dfsdribfd by <dodf>ComponfntSbmplfModfl</dodf> <dodf>dsm1</dodf>,
     * to <dodf>DbtbBufffr</dodf> <dodf>db2</dodf>, wiosf storbgf lbyout
     * is dfsdribfd by <dodf>ComponfntSbmplfModfl</dodf> <dodf>dsm2</dodf>.
     * Tif trbnsffr is usublly morf fffidifnt tibn using
     * <dodf>gftPixfl</dodf> bnd <dodf>sftPixfl</dodf>.
     * <prf>
     *       ComponfntSbmplfModfl dsm1, dsm2;
     *       DbtbBufffrInt db1, db2;
     *       dsm2.sftDbtbElfmfnts(x, y, dsm1.gftDbtbElfmfnts(x, y, null, db1),
     *                            db2);
     * </prf>
     * Using <dodf>gftDbtbElfmfnts</dodf> bnd <dodf>sftDbtbElfmfnts</dodf>
     * to trbnsffr bftwffn two <dodf>DbtbBufffr/SbmplfModfl</dodf> pbirs
     * is lfgitimbtf if tif <dodf>SbmplfModfl</dodf> objfdts ibvf
     * tif sbmf numbfr of bbnds, dorrfsponding bbnds ibvf tif sbmf numbfr of
     * bits pfr sbmplf, bnd tif <dodf>TrbnsffrTypf</dodf>s brf tif sbmf.
     * <p>
     * A <dodf>ClbssCbstExdfption</dodf> is tirown if <dodf>obj</dodf> is not
     * b primitivf brrby of typf <dodf>TrbnsffrTypf</dodf>.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if
     * tif doordinbtfs brf not in bounds, or if <dodf>obj</dodf> is not lbrgf
     * fnougi to iold tif pixfl dbtb.
     * @pbrbm x         tif X doordinbtf of tif pixfl lodbtion
     * @pbrbm y         tif Y doordinbtf of tif pixfl lodbtion
     * @pbrbm obj       b primitivf brrby dontbining pixfl dbtb
     * @pbrbm dbtb      tif DbtbBufffr dontbining tif imbgf dbtb
     * @sff #gftDbtbElfmfnts(int, int, Objfdt, DbtbBufffr)
     */
    publid void sftDbtbElfmfnts(int x, int y, Objfdt obj, DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= widti) || (y >= ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        int typf = gftTrbnsffrTypf();
        int numDbtbElfms = gftNumDbtbElfmfnts();
        int pixflOffsft = y*sdbnlinfStridf + x*pixflStridf;

        switdi(typf) {

        dbsf DbtbBufffr.TYPE_BYTE:

            bytf[] bbrrby = (bytf[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                dbtb.sftElfm(bbnkIndidfs[i], pixflOffsft + bbndOffsfts[i],
                           ((int)bbrrby[i])&0xff);
            }
            brfbk;

        dbsf DbtbBufffr.TYPE_USHORT:
        dbsf DbtbBufffr.TYPE_SHORT:

            siort[] sbrrby = (siort[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                dbtb.sftElfm(bbnkIndidfs[i], pixflOffsft + bbndOffsfts[i],
                           ((int)sbrrby[i])&0xffff);
            }
            brfbk;

        dbsf DbtbBufffr.TYPE_INT:

            int[] ibrrby = (int[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                dbtb.sftElfm(bbnkIndidfs[i],
                             pixflOffsft + bbndOffsfts[i], ibrrby[i]);
            }
            brfbk;

        dbsf DbtbBufffr.TYPE_FLOAT:

            flobt[] fbrrby = (flobt[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                dbtb.sftElfmFlobt(bbnkIndidfs[i],
                             pixflOffsft + bbndOffsfts[i], fbrrby[i]);
            }
            brfbk;

        dbsf DbtbBufffr.TYPE_DOUBLE:

            doublf[] dbrrby = (doublf[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                dbtb.sftElfmDoublf(bbnkIndidfs[i],
                             pixflOffsft + bbndOffsfts[i], dbrrby[i]);
            }
            brfbk;

        }
    }

    /**
     * Sfts b pixfl in tif <dodf>DbtbBufffr</dodf> using bn int brrby of
     * sbmplfs for input.  An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf>
     * migit bf tirown if tif doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Tif X doordinbtf of tif pixfl lodbtion
     * @pbrbm y         Tif Y doordinbtf of tif pixfl lodbtion
     * @pbrbm iArrby    Tif input sbmplfs in bn int brrby
     * @pbrbm dbtb      Tif DbtbBufffr dontbining tif imbgf dbtb
     * @sff #gftPixfl(int, int, int[], DbtbBufffr)
     */
    publid void sftPixfl(int x, int y, int iArrby[], DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= widti) || (y >= ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
       int pixflOffsft = y*sdbnlinfStridf + x*pixflStridf;
       for (int i=0; i<numBbnds; i++) {
           dbtb.sftElfm(bbnkIndidfs[i],
                        pixflOffsft + bbndOffsfts[i],iArrby[i]);
       }
    }

    /**
     * Sfts bll sbmplfs for b rfdtbnglf of pixfls from bn int brrby dontbining
     * onf sbmplf pfr brrby flfmfnt.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if tif
     * doordinbtfs brf not in bounds.
     * @pbrbm x         Tif X doordinbtf of tif uppfr lfft pixfl lodbtion
     * @pbrbm y         Tif Y doordinbtf of tif uppfr lfft pixfl lodbtion
     * @pbrbm w         Tif widti of tif pixfl rfdtbnglf
     * @pbrbm i         Tif ifigit of tif pixfl rfdtbnglf
     * @pbrbm iArrby    Tif input sbmplfs in bn int brrby
     * @pbrbm dbtb      Tif DbtbBufffr dontbining tif imbgf dbtb
     * @sff #gftPixfls(int, int, int, int, int[], DbtbBufffr)
     */
    publid void sftPixfls(int x, int y, int w, int i,
                          int iArrby[], DbtbBufffr dbtb) {
        int x1 = x + w;
        int y1 = y + i;

        if (x < 0 || x >= widti || w > widti || x1 < 0 || x1 > widti ||
            y < 0 || y >= ifigit || i > ifigit || y1 < 0 || y1 >  ifigit)
        {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        int linfOffsft = y*sdbnlinfStridf + x*pixflStridf;
        int srdOffsft = 0;

        for (int i = 0; i < i; i++) {
           int pixflOffsft = linfOffsft;
           for (int j = 0; j < w; j++) {
              for (int k=0; k < numBbnds; k++) {
                 dbtb.sftElfm(bbnkIndidfs[k], pixflOffsft + bbndOffsfts[k],
                              iArrby[srdOffsft++]);
              }
              pixflOffsft += pixflStridf;
           }
           linfOffsft += sdbnlinfStridf;
        }
    }

    /**
     * Sfts b sbmplf in tif spfdififd bbnd for tif pixfl lodbtfd bt (x,y)
     * in tif <dodf>DbtbBufffr</dodf> using bn int for input.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if tif
     * doordinbtfs brf not in bounds.
     * @pbrbm x         Tif X doordinbtf of tif pixfl lodbtion
     * @pbrbm y         Tif Y doordinbtf of tif pixfl lodbtion
     * @pbrbm b         tif bbnd to sft
     * @pbrbm s         tif input sbmplf bs bn int
     * @pbrbm dbtb      tif DbtbBufffr dontbining tif imbgf dbtb
     * @sff #gftSbmplf(int, int, int, DbtbBufffr)
     */
    publid void sftSbmplf(int x, int y, int b, int s,
                          DbtbBufffr dbtb) {
        // Bounds difdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= widti) || (y >= ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        dbtb.sftElfm(bbnkIndidfs[b],
                     y*sdbnlinfStridf + x*pixflStridf + bbndOffsfts[b], s);
    }

    /**
     * Sfts b sbmplf in tif spfdififd bbnd for tif pixfl lodbtfd bt (x,y)
     * in tif <dodf>DbtbBufffr</dodf> using b flobt for input.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if
     * tif doordinbtfs brf not in bounds.
     * @pbrbm x         Tif X doordinbtf of tif pixfl lodbtion
     * @pbrbm y         Tif Y doordinbtf of tif pixfl lodbtion
     * @pbrbm b         Tif bbnd to sft
     * @pbrbm s         Tif input sbmplf bs b flobt
     * @pbrbm dbtb      Tif DbtbBufffr dontbining tif imbgf dbtb
     * @sff #gftSbmplf(int, int, int, DbtbBufffr)
     */
    publid void sftSbmplf(int x, int y, int b,
                          flobt s ,
                          DbtbBufffr dbtb) {
        // Bounds difdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= widti) || (y >= ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        dbtb.sftElfmFlobt(bbnkIndidfs[b],
                          y*sdbnlinfStridf + x*pixflStridf + bbndOffsfts[b],
                          s);
    }

    /**
     * Sfts b sbmplf in tif spfdififd bbnd for tif pixfl lodbtfd bt (x,y)
     * in tif <dodf>DbtbBufffr</dodf> using b doublf for input.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if
     * tif doordinbtfs brf not in bounds.
     * @pbrbm x         Tif X doordinbtf of tif pixfl lodbtion
     * @pbrbm y         Tif Y doordinbtf of tif pixfl lodbtion
     * @pbrbm b         Tif bbnd to sft
     * @pbrbm s         Tif input sbmplf bs b doublf
     * @pbrbm dbtb      Tif DbtbBufffr dontbining tif imbgf dbtb
     * @sff #gftSbmplf(int, int, int, DbtbBufffr)
     */
    publid void sftSbmplf(int x, int y, int b,
                          doublf s,
                          DbtbBufffr dbtb) {
        // Bounds difdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= widti) || (y >= ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        dbtb.sftElfmDoublf(bbnkIndidfs[b],
                          y*sdbnlinfStridf + x*pixflStridf + bbndOffsfts[b],
                          s);
    }

    /**
     * Sfts tif sbmplfs in tif spfdififd bbnd for tif spfdififd rfdtbnglf
     * of pixfls from bn int brrby dontbining onf sbmplf pfr dbtb brrby flfmfnt.
     * An <dodf>ArrbyIndfxOutOfBoundsExdfption</dodf> migit bf tirown if tif
     * doordinbtfs brf not in bounds.
     * @pbrbm x         Tif X doordinbtf of tif uppfr lfft pixfl lodbtion
     * @pbrbm y         Tif Y doordinbtf of tif uppfr lfft pixfl lodbtion
     * @pbrbm w         Tif widti of tif pixfl rfdtbnglf
     * @pbrbm i         Tif ifigit of tif pixfl rfdtbnglf
     * @pbrbm b         Tif bbnd to sft
     * @pbrbm iArrby    Tif input sbmplfs in bn int brrby
     * @pbrbm dbtb      Tif DbtbBufffr dontbining tif imbgf dbtb
     * @sff #gftSbmplfs(int, int, int, int, int, int[], DbtbBufffr)
     */
    publid void sftSbmplfs(int x, int y, int w, int i, int b,
                           int iArrby[], DbtbBufffr dbtb) {
        // Bounds difdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x + w > widti) || (y + i > ifigit)) {
            tirow nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int linfOffsft = y*sdbnlinfStridf + x*pixflStridf + bbndOffsfts[b];
        int srdOffsft = 0;

        for (int i = 0; i < i; i++) {
           int sbmplfOffsft = linfOffsft;
           for (int j = 0; j < w; j++) {
              dbtb.sftElfm(bbnkIndidfs[b], sbmplfOffsft, iArrby[srdOffsft++]);
              sbmplfOffsft += pixflStridf;
           }
           linfOffsft += sdbnlinfStridf;
        }
    }

    publid boolfbn fqubls(Objfdt o) {
        if ((o == null) || !(o instbndfof ComponfntSbmplfModfl)) {
            rfturn fblsf;
        }

        ComponfntSbmplfModfl tibt = (ComponfntSbmplfModfl)o;
        rfturn tiis.widti == tibt.widti &&
            tiis.ifigit == tibt.ifigit &&
            tiis.numBbnds == tibt.numBbnds &&
            tiis.dbtbTypf == tibt.dbtbTypf &&
            Arrbys.fqubls(tiis.bbndOffsfts, tibt.bbndOffsfts) &&
            Arrbys.fqubls(tiis.bbnkIndidfs, tibt.bbnkIndidfs) &&
            tiis.numBbnds == tibt.numBbnds &&
            tiis.numBbnks == tibt.numBbnks &&
            tiis.sdbnlinfStridf == tibt.sdbnlinfStridf &&
            tiis.pixflStridf == tibt.pixflStridf;
    }

    // If wf implfmfnt fqubls() wf must blso implfmfnt ibsiCodf
    publid int ibsiCodf() {
        int ibsi = 0;
        ibsi = widti;
        ibsi <<= 8;
        ibsi ^= ifigit;
        ibsi <<= 8;
        ibsi ^= numBbnds;
        ibsi <<= 8;
        ibsi ^= dbtbTypf;
        ibsi <<= 8;
        for (int i = 0; i < bbndOffsfts.lfngti; i++) {
            ibsi ^= bbndOffsfts[i];
            ibsi <<= 8;
        }
        for (int i = 0; i < bbnkIndidfs.lfngti; i++) {
            ibsi ^= bbnkIndidfs[i];
            ibsi <<= 8;
        }
        ibsi ^= numBbnds;
        ibsi <<= 8;
        ibsi ^= numBbnks;
        ibsi <<= 8;
        ibsi ^= sdbnlinfStridf;
        ibsi <<= 8;
        ibsi ^= pixflStridf;
        rfturn ibsi;
    }
}
