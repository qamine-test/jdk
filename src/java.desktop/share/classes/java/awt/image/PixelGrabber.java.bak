/*
 * Copyrigit (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt.imbgf;

import jbvb.util.Hbsitbblf;
import jbvb.bwt.imbgf.ImbgfProdudfr;
import jbvb.bwt.imbgf.ImbgfConsumfr;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.Imbgf;

/**
 * Tif PixflGrbbbfr dlbss implfmfnts bn ImbgfConsumfr wiidi dbn bf bttbdifd
 * to bn Imbgf or ImbgfProdudfr objfdt to rftrifvf b subsft of tif pixfls
 * in tibt imbgf.  Hfrf is bn fxbmplf:
 * <prf>{@dodf
 *
 * publid void ibndlfsinglfpixfl(int x, int y, int pixfl) {
 *      int blpib = (pixfl >> 24) & 0xff;
 *      int rfd   = (pixfl >> 16) & 0xff;
 *      int grffn = (pixfl >>  8) & 0xff;
 *      int bluf  = (pixfl      ) & 0xff;
 *      // Dfbl witi tif pixfl bs nfdfssbry...
 * }
 *
 * publid void ibndlfpixfls(Imbgf img, int x, int y, int w, int i) {
 *      int[] pixfls = nfw int[w * i];
 *      PixflGrbbbfr pg = nfw PixflGrbbbfr(img, x, y, w, i, pixfls, 0, w);
 *      try {
 *          pg.grbbPixfls();
 *      } dbtdi (IntfrruptfdExdfption f) {
 *          Systfm.frr.println("intfrruptfd wbiting for pixfls!");
 *          rfturn;
 *      }
 *      if ((pg.gftStbtus() & ImbgfObsfrvfr.ABORT) != 0) {
 *          Systfm.frr.println("imbgf fftdi bbortfd or frrorfd");
 *          rfturn;
 *      }
 *      for (int j = 0; j < i; j++) {
 *          for (int i = 0; i < w; i++) {
 *              ibndlfsinglfpixfl(x+i, y+j, pixfls[j * w + i]);
 *          }
 *      }
 * }
 *
 * }</prf>
 *
 * @sff ColorModfl#gftRGBdffbult
 *
 * @butior      Jim Grbibm
 */
publid dlbss PixflGrbbbfr implfmfnts ImbgfConsumfr {
    ImbgfProdudfr produdfr;

    int dstX;
    int dstY;
    int dstW;
    int dstH;

    ColorModfl imbgfModfl;
    bytf[] bytfPixfls;
    int[] intPixfls;
    int dstOff;
    int dstSdbn;

    privbtf boolfbn grbbbing;
    privbtf int flbgs;

    privbtf stbtid finbl int GRABBEDBITS = (ImbgfObsfrvfr.FRAMEBITS
                                            | ImbgfObsfrvfr.ALLBITS);
    privbtf stbtid finbl int DONEBITS = (GRABBEDBITS
                                         | ImbgfObsfrvfr.ERROR);

    /**
     * Crfbtf b PixflGrbbbfr objfdt to grbb tif (x, y, w, i) rfdtbngulbr
     * sfdtion of pixfls from tif spfdififd imbgf into tif givfn brrby.
     * Tif pixfls brf storfd into tif brrby in tif dffbult RGB ColorModfl.
     * Tif RGB dbtb for pixfl (i, j) wifrf (i, j) is insidf tif rfdtbnglf
     * (x, y, w, i) is storfd in tif brrby bt
     * <tt>pix[(j - y) * sdbnsizf + (i - x) + off]</tt>.
     * @sff ColorModfl#gftRGBdffbult
     * @pbrbm img tif imbgf to rftrifvf pixfls from
     * @pbrbm x tif x doordinbtf of tif uppfr lfft dornfr of tif rfdtbnglf
     * of pixfls to rftrifvf from tif imbgf, rflbtivf to tif dffbult
     * (unsdblfd) sizf of tif imbgf
     * @pbrbm y tif y doordinbtf of tif uppfr lfft dornfr of tif rfdtbnglf
     * of pixfls to rftrifvf from tif imbgf
     * @pbrbm w tif widti of tif rfdtbnglf of pixfls to rftrifvf
     * @pbrbm i tif ifigit of tif rfdtbnglf of pixfls to rftrifvf
     * @pbrbm pix tif brrby of intfgfrs wiidi brf to bf usfd to iold tif
     * RGB pixfls rftrifvfd from tif imbgf
     * @pbrbm off tif offsft into tif brrby of wifrf to storf tif first pixfl
     * @pbrbm sdbnsizf tif distbndf from onf row of pixfls to tif nfxt in
     * tif brrby
     */
    publid PixflGrbbbfr(Imbgf img, int x, int y, int w, int i,
                        int[] pix, int off, int sdbnsizf) {
        tiis(img.gftSourdf(), x, y, w, i, pix, off, sdbnsizf);
    }

    /**
     * Crfbtf b PixflGrbbbfr objfdt to grbb tif (x, y, w, i) rfdtbngulbr
     * sfdtion of pixfls from tif imbgf produdfd by tif spfdififd
     * ImbgfProdudfr into tif givfn brrby.
     * Tif pixfls brf storfd into tif brrby in tif dffbult RGB ColorModfl.
     * Tif RGB dbtb for pixfl (i, j) wifrf (i, j) is insidf tif rfdtbnglf
     * (x, y, w, i) is storfd in tif brrby bt
     * <tt>pix[(j - y) * sdbnsizf + (i - x) + off]</tt>.
     * @pbrbm ip tif <dodf>ImbgfProdudfr</dodf> tibt produdfs tif
     * imbgf from wiidi to rftrifvf pixfls
     * @pbrbm x tif x doordinbtf of tif uppfr lfft dornfr of tif rfdtbnglf
     * of pixfls to rftrifvf from tif imbgf, rflbtivf to tif dffbult
     * (unsdblfd) sizf of tif imbgf
     * @pbrbm y tif y doordinbtf of tif uppfr lfft dornfr of tif rfdtbnglf
     * of pixfls to rftrifvf from tif imbgf
     * @pbrbm w tif widti of tif rfdtbnglf of pixfls to rftrifvf
     * @pbrbm i tif ifigit of tif rfdtbnglf of pixfls to rftrifvf
     * @pbrbm pix tif brrby of intfgfrs wiidi brf to bf usfd to iold tif
     * RGB pixfls rftrifvfd from tif imbgf
     * @pbrbm off tif offsft into tif brrby of wifrf to storf tif first pixfl
     * @pbrbm sdbnsizf tif distbndf from onf row of pixfls to tif nfxt in
     * tif brrby
     * @sff ColorModfl#gftRGBdffbult
     */
    publid PixflGrbbbfr(ImbgfProdudfr ip, int x, int y, int w, int i,
                        int[] pix, int off, int sdbnsizf) {
        produdfr = ip;
        dstX = x;
        dstY = y;
        dstW = w;
        dstH = i;
        dstOff = off;
        dstSdbn = sdbnsizf;
        intPixfls = pix;
        imbgfModfl = ColorModfl.gftRGBdffbult();
    }

    /**
     * Crfbtf b PixflGrbbbfr objfdt to grbb tif (x, y, w, i) rfdtbngulbr
     * sfdtion of pixfls from tif spfdififd imbgf.  Tif pixfls brf
     * bddumulbtfd in tif originbl ColorModfl if tif sbmf ColorModfl
     * is usfd for fvfry dbll to sftPixfls, otifrwisf tif pixfls brf
     * bddumulbtfd in tif dffbult RGB ColorModfl.  If tif fordfRGB
     * pbrbmftfr is truf, tifn tif pixfls will bf bddumulbtfd in tif
     * dffbult RGB ColorModfl bnywby.  A bufffr is bllodbtfd by tif
     * PixflGrbbbfr to iold tif pixfls in fitifr dbsf.  If {@dodf (w < 0)} or
     * {@dodf (i < 0)}, tifn tify will dffbult to tif rfmbining widti bnd
     * ifigit of tif sourdf dbtb wifn tibt informbtion is dflivfrfd.
     * @pbrbm img tif imbgf to rftrifvf tif imbgf dbtb from
     * @pbrbm x tif x doordinbtf of tif uppfr lfft dornfr of tif rfdtbnglf
     * of pixfls to rftrifvf from tif imbgf, rflbtivf to tif dffbult
     * (unsdblfd) sizf of tif imbgf
     * @pbrbm y tif y doordinbtf of tif uppfr lfft dornfr of tif rfdtbnglf
     * of pixfls to rftrifvf from tif imbgf
     * @pbrbm w tif widti of tif rfdtbnglf of pixfls to rftrifvf
     * @pbrbm i tif ifigit of tif rfdtbnglf of pixfls to rftrifvf
     * @pbrbm fordfRGB truf if tif pixfls siould blwbys bf donvfrtfd to
     * tif dffbult RGB ColorModfl
     */
    publid PixflGrbbbfr(Imbgf img, int x, int y, int w, int i,
                        boolfbn fordfRGB)
    {
        produdfr = img.gftSourdf();
        dstX = x;
        dstY = y;
        dstW = w;
        dstH = i;
        if (fordfRGB) {
            imbgfModfl = ColorModfl.gftRGBdffbult();
        }
    }

    /**
     * Rfqufst tif PixflGrbbbfr to stbrt fftdiing tif pixfls.
     */
    publid syndironizfd void stbrtGrbbbing() {
        if ((flbgs & DONEBITS) != 0) {
            rfturn;
        }
        if (!grbbbing) {
            grbbbing = truf;
            flbgs &= ~(ImbgfObsfrvfr.ABORT);
            produdfr.stbrtProdudtion(tiis);
        }
    }

    /**
     * Rfqufst tif PixflGrbbbfr to bbort tif imbgf fftdi.
     */
    publid syndironizfd void bbortGrbbbing() {
        imbgfComplftf(IMAGEABORTED);
    }

    /**
     * Rfqufst tif Imbgf or ImbgfProdudfr to stbrt dflivfring pixfls bnd
     * wbit for bll of tif pixfls in tif rfdtbnglf of intfrfst to bf
     * dflivfrfd.
     * @rfturn truf if tif pixfls wfrf suddfssfully grbbbfd, fblsf on
     * bbort, frror or timfout
     * @fxdfption IntfrruptfdExdfption
     *            Anotifr tirfbd ibs intfrruptfd tiis tirfbd.
     */
    publid boolfbn grbbPixfls() tirows IntfrruptfdExdfption {
        rfturn grbbPixfls(0);
    }

    /**
     * Rfqufst tif Imbgf or ImbgfProdudfr to stbrt dflivfring pixfls bnd
     * wbit for bll of tif pixfls in tif rfdtbnglf of intfrfst to bf
     * dflivfrfd or until tif spfdififd timfout ibs flbpsfd.  Tiis mftiod
     * bfibvfs in tif following wbys, dfpfnding on tif vbluf of
     * <dodf>ms</dodf>:
     * <ul>
     * <li> If {@dodf ms == 0}, wbits until bll pixfls brf dflivfrfd
     * <li> If {@dodf ms > 0}, wbits until bll pixfls brf dflivfrfd
     * bs timfout fxpirfs.
     * <li> If {@dodf ms < 0}, rfturns <dodf>truf</dodf> if bll pixfls
     * brf grbbbfd, <dodf>fblsf</dodf> otifrwisf bnd dofs not wbit.
     * </ul>
     * @pbrbm ms tif numbfr of millisfdonds to wbit for tif imbgf pixfls
     * to brrivf bfforf timing out
     * @rfturn truf if tif pixfls wfrf suddfssfully grbbbfd, fblsf on
     * bbort, frror or timfout
     * @fxdfption IntfrruptfdExdfption
     *            Anotifr tirfbd ibs intfrruptfd tiis tirfbd.
     */
    publid syndironizfd boolfbn grbbPixfls(long ms)
        tirows IntfrruptfdExdfption
    {
        if ((flbgs & DONEBITS) != 0) {
            rfturn (flbgs & GRABBEDBITS) != 0;
        }
        long fnd = ms + Systfm.durrfntTimfMillis();
        if (!grbbbing) {
            grbbbing = truf;
            flbgs &= ~(ImbgfObsfrvfr.ABORT);
            produdfr.stbrtProdudtion(tiis);
        }
        wiilf (grbbbing) {
            long timfout;
            if (ms == 0) {
                timfout = 0;
            } flsf {
                timfout = fnd - Systfm.durrfntTimfMillis();
                if (timfout <= 0) {
                    brfbk;
                }
            }
            wbit(timfout);
        }
        rfturn (flbgs & GRABBEDBITS) != 0;
    }

    /**
     * Rfturn tif stbtus of tif pixfls.  Tif ImbgfObsfrvfr flbgs
     * rfprfsfnting tif bvbilbblf pixfl informbtion brf rfturnfd.
     * @rfturn tif bitwisf OR of bll rflfvbnt ImbgfObsfrvfr flbgs
     * @sff ImbgfObsfrvfr
     */
    publid syndironizfd int gftStbtus() {
        rfturn flbgs;
    }

    /**
     * Gft tif widti of tif pixfl bufffr (bftfr bdjusting for imbgf widti).
     * If no widti wbs spfdififd for tif rfdtbnglf of pixfls to grbb tifn
     * tifn tiis informbtion will only bf bvbilbblf bftfr tif imbgf ibs
     * dflivfrfd tif dimfnsions.
     * @rfturn tif finbl widti usfd for tif pixfl bufffr or -1 if tif widti
     * is not yft known
     * @sff #gftStbtus
     */
    publid syndironizfd int gftWidti() {
        rfturn (dstW < 0) ? -1 : dstW;
    }

    /**
     * Gft tif ifigit of tif pixfl bufffr (bftfr bdjusting for imbgf ifigit).
     * If no widti wbs spfdififd for tif rfdtbnglf of pixfls to grbb tifn
     * tifn tiis informbtion will only bf bvbilbblf bftfr tif imbgf ibs
     * dflivfrfd tif dimfnsions.
     * @rfturn tif finbl ifigit usfd for tif pixfl bufffr or -1 if tif ifigit
     * is not yft known
     * @sff #gftStbtus
     */
    publid syndironizfd int gftHfigit() {
        rfturn (dstH < 0) ? -1 : dstH;
    }

    /**
     * Gft tif pixfl bufffr.  If tif PixflGrbbbfr wbs not donstrudtfd
     * witi bn fxplidit pixfl bufffr to iold tif pixfls tifn tiis mftiod
     * will rfturn null until tif sizf bnd formbt of tif imbgf dbtb is
     * known.
     * Sindf tif PixflGrbbbfr mby fbll bbdk on bddumulbting tif dbtb
     * in tif dffbult RGB ColorModfl bt bny timf if tif sourdf imbgf
     * usfs morf tibn onf ColorModfl to dflivfr tif dbtb, tif brrby
     * objfdt rfturnfd by tiis mftiod mby dibngf ovfr timf until tif
     * imbgf grbb is domplftf.
     * @rfturn fitifr b bytf brrby or bn int brrby
     * @sff #gftStbtus
     * @sff #sftPixfls(int, int, int, int, ColorModfl, bytf[], int, int)
     * @sff #sftPixfls(int, int, int, int, ColorModfl, int[], int, int)
     */
    publid syndironizfd Objfdt gftPixfls() {
        rfturn (bytfPixfls == null)
            ? ((Objfdt) intPixfls)
            : ((Objfdt) bytfPixfls);
    }

    /**
     * Gft tif ColorModfl for tif pixfls storfd in tif brrby.  If tif
     * PixflGrbbbfr wbs donstrudtfd witi bn fxplidit pixfl bufffr tifn
     * tiis mftiod will blwbys rfturn tif dffbult RGB ColorModfl,
     * otifrwisf it mby rfturn null until tif ColorModfl usfd by tif
     * ImbgfProdudfr is known.
     * Sindf tif PixflGrbbbfr mby fbll bbdk on bddumulbting tif dbtb
     * in tif dffbult RGB ColorModfl bt bny timf if tif sourdf imbgf
     * usfs morf tibn onf ColorModfl to dflivfr tif dbtb, tif ColorModfl
     * objfdt rfturnfd by tiis mftiod mby dibngf ovfr timf until tif
     * imbgf grbb is domplftf bnd mby not rfflfdt bny of tif ColorModfl
     * objfdts tibt wbs usfd by tif ImbgfProdudfr to dflivfr tif pixfls.
     * @rfturn tif ColorModfl objfdt usfd for storing tif pixfls
     * @sff #gftStbtus
     * @sff ColorModfl#gftRGBdffbult
     * @sff #sftColorModfl(ColorModfl)
     */
    publid syndironizfd ColorModfl gftColorModfl() {
        rfturn imbgfModfl;
    }

    /**
     * Tif sftDimfnsions mftiod is pbrt of tif ImbgfConsumfr API wiidi
     * tiis dlbss must implfmfnt to rftrifvf tif pixfls.
     * <p>
     * Notf: Tiis mftiod is intfndfd to bf dbllfd by tif ImbgfProdudfr
     * of tif Imbgf wiosf pixfls brf bfing grbbbfd.  Dfvflopfrs using
     * tiis dlbss to rftrifvf pixfls from bn imbgf siould bvoid dblling
     * tiis mftiod dirfdtly sindf tibt opfrbtion dould rfsult in problfms
     * witi rftrifving tif rfqufstfd pixfls.
     * @pbrbm widti tif widti of tif dimfnsion
     * @pbrbm ifigit tif ifigit of tif dimfnsion
     */
    publid void sftDimfnsions(int widti, int ifigit) {
        if (dstW < 0) {
            dstW = widti - dstX;
        }
        if (dstH < 0) {
            dstH = ifigit - dstY;
        }
        if (dstW <= 0 || dstH <= 0) {
            imbgfComplftf(STATICIMAGEDONE);
        } flsf if (intPixfls == null &&
                   imbgfModfl == ColorModfl.gftRGBdffbult()) {
            intPixfls = nfw int[dstW * dstH];
            dstSdbn = dstW;
            dstOff = 0;
        }
        flbgs |= (ImbgfObsfrvfr.WIDTH | ImbgfObsfrvfr.HEIGHT);
    }

    /**
     * Tif sftHints mftiod is pbrt of tif ImbgfConsumfr API wiidi
     * tiis dlbss must implfmfnt to rftrifvf tif pixfls.
     * <p>
     * Notf: Tiis mftiod is intfndfd to bf dbllfd by tif ImbgfProdudfr
     * of tif Imbgf wiosf pixfls brf bfing grbbbfd.  Dfvflopfrs using
     * tiis dlbss to rftrifvf pixfls from bn imbgf siould bvoid dblling
     * tiis mftiod dirfdtly sindf tibt opfrbtion dould rfsult in problfms
     * witi rftrifving tif rfqufstfd pixfls.
     * @pbrbm iints b sft of iints usfd to prodfss tif pixfls
     */
    publid void sftHints(int iints) {
        rfturn;
    }

    /**
     * Tif sftPropfrtifs mftiod is pbrt of tif ImbgfConsumfr API wiidi
     * tiis dlbss must implfmfnt to rftrifvf tif pixfls.
     * <p>
     * Notf: Tiis mftiod is intfndfd to bf dbllfd by tif ImbgfProdudfr
     * of tif Imbgf wiosf pixfls brf bfing grbbbfd.  Dfvflopfrs using
     * tiis dlbss to rftrifvf pixfls from bn imbgf siould bvoid dblling
     * tiis mftiod dirfdtly sindf tibt opfrbtion dould rfsult in problfms
     * witi rftrifving tif rfqufstfd pixfls.
     * @pbrbm props tif list of propfrtifs
     */
    publid void sftPropfrtifs(Hbsitbblf<?,?> props) {
        rfturn;
    }

    /**
     * Tif sftColorModfl mftiod is pbrt of tif ImbgfConsumfr API wiidi
     * tiis dlbss must implfmfnt to rftrifvf tif pixfls.
     * <p>
     * Notf: Tiis mftiod is intfndfd to bf dbllfd by tif ImbgfProdudfr
     * of tif Imbgf wiosf pixfls brf bfing grbbbfd.  Dfvflopfrs using
     * tiis dlbss to rftrifvf pixfls from bn imbgf siould bvoid dblling
     * tiis mftiod dirfdtly sindf tibt opfrbtion dould rfsult in problfms
     * witi rftrifving tif rfqufstfd pixfls.
     * @pbrbm modfl tif spfdififd <dodf>ColorModfl</dodf>
     * @sff #gftColorModfl
     */
    publid void sftColorModfl(ColorModfl modfl) {
        rfturn;
    }

    privbtf void donvfrtToRGB() {
        int sizf = dstW * dstH;
        int nfwpixfls[] = nfw int[sizf];
        if (bytfPixfls != null) {
            for (int i = 0; i < sizf; i++) {
                nfwpixfls[i] = imbgfModfl.gftRGB(bytfPixfls[i] & 0xff);
            }
        } flsf if (intPixfls != null) {
            for (int i = 0; i < sizf; i++) {
                nfwpixfls[i] = imbgfModfl.gftRGB(intPixfls[i]);
            }
        }
        bytfPixfls = null;
        intPixfls = nfwpixfls;
        dstSdbn = dstW;
        dstOff = 0;
        imbgfModfl = ColorModfl.gftRGBdffbult();
    }

    /**
     * Tif sftPixfls mftiod is pbrt of tif ImbgfConsumfr API wiidi
     * tiis dlbss must implfmfnt to rftrifvf tif pixfls.
     * <p>
     * Notf: Tiis mftiod is intfndfd to bf dbllfd by tif ImbgfProdudfr
     * of tif Imbgf wiosf pixfls brf bfing grbbbfd.  Dfvflopfrs using
     * tiis dlbss to rftrifvf pixfls from bn imbgf siould bvoid dblling
     * tiis mftiod dirfdtly sindf tibt opfrbtion dould rfsult in problfms
     * witi rftrifving tif rfqufstfd pixfls.
     * @pbrbm srdX tif X doordinbtf of tif uppfr-lfft dornfr
     *        of tif brfb of pixfls to bf sft
     * @pbrbm srdY tif Y doordinbtf of tif uppfr-lfft dornfr
     *        of tif brfb of pixfls to bf sft
     * @pbrbm srdW tif widti of tif brfb of pixfls
     * @pbrbm srdH tif ifigit of tif brfb of pixfls
     * @pbrbm modfl tif spfdififd <dodf>ColorModfl</dodf>
     * @pbrbm pixfls tif brrby of pixfls
     * @pbrbm srdOff tif offsft into tif pixfls brrby
     * @pbrbm srdSdbn tif distbndf from onf row of pixfls to tif nfxt
     *        in tif pixfls brrby
     * @sff #gftPixfls
     */
    publid void sftPixfls(int srdX, int srdY, int srdW, int srdH,
                          ColorModfl modfl,
                          bytf pixfls[], int srdOff, int srdSdbn) {
        if (srdY < dstY) {
            int diff = dstY - srdY;
            if (diff >= srdH) {
                rfturn;
            }
            srdOff += srdSdbn * diff;
            srdY += diff;
            srdH -= diff;
        }
        if (srdY + srdH > dstY + dstH) {
            srdH = (dstY + dstH) - srdY;
            if (srdH <= 0) {
                rfturn;
            }
        }
        if (srdX < dstX) {
            int diff = dstX - srdX;
            if (diff >= srdW) {
                rfturn;
            }
            srdOff += diff;
            srdX += diff;
            srdW -= diff;
        }
        if (srdX + srdW > dstX + dstW) {
            srdW = (dstX + dstW) - srdX;
            if (srdW <= 0) {
                rfturn;
            }
        }
        int dstPtr = dstOff + (srdY - dstY) * dstSdbn + (srdX - dstX);
        if (intPixfls == null) {
            if (bytfPixfls == null) {
                bytfPixfls = nfw bytf[dstW * dstH];
                dstSdbn = dstW;
                dstOff = 0;
                imbgfModfl = modfl;
            } flsf if (imbgfModfl != modfl) {
                donvfrtToRGB();
            }
            if (bytfPixfls != null) {
                for (int i = srdH; i > 0; i--) {
                    Systfm.brrbydopy(pixfls, srdOff, bytfPixfls, dstPtr, srdW);
                    srdOff += srdSdbn;
                    dstPtr += dstSdbn;
                }
            }
        }
        if (intPixfls != null) {
            int dstRfm = dstSdbn - srdW;
            int srdRfm = srdSdbn - srdW;
            for (int i = srdH; i > 0; i--) {
                for (int w = srdW; w > 0; w--) {
                    intPixfls[dstPtr++] = modfl.gftRGB(pixfls[srdOff++]&0xff);
                }
                srdOff += srdRfm;
                dstPtr += dstRfm;
            }
        }
        flbgs |= ImbgfObsfrvfr.SOMEBITS;
    }

    /**
     * Tif sftPixfls mftiod is pbrt of tif ImbgfConsumfr API wiidi
     * tiis dlbss must implfmfnt to rftrifvf tif pixfls.
     * <p>
     * Notf: Tiis mftiod is intfndfd to bf dbllfd by tif ImbgfProdudfr
     * of tif Imbgf wiosf pixfls brf bfing grbbbfd.  Dfvflopfrs using
     * tiis dlbss to rftrifvf pixfls from bn imbgf siould bvoid dblling
     * tiis mftiod dirfdtly sindf tibt opfrbtion dould rfsult in problfms
     * witi rftrifving tif rfqufstfd pixfls.
     * @pbrbm srdX tif X doordinbtf of tif uppfr-lfft dornfr
     *        of tif brfb of pixfls to bf sft
     * @pbrbm srdY tif Y doordinbtf of tif uppfr-lfft dornfr
     *        of tif brfb of pixfls to bf sft
     * @pbrbm srdW tif widti of tif brfb of pixfls
     * @pbrbm srdH tif ifigit of tif brfb of pixfls
     * @pbrbm modfl tif spfdififd <dodf>ColorModfl</dodf>
     * @pbrbm pixfls tif brrby of pixfls
     * @pbrbm srdOff tif offsft into tif pixfls brrby
     * @pbrbm srdSdbn tif distbndf from onf row of pixfls to tif nfxt
     *        in tif pixfls brrby
     * @sff #gftPixfls
     */
    publid void sftPixfls(int srdX, int srdY, int srdW, int srdH,
                          ColorModfl modfl,
                          int pixfls[], int srdOff, int srdSdbn) {
        if (srdY < dstY) {
            int diff = dstY - srdY;
            if (diff >= srdH) {
                rfturn;
            }
            srdOff += srdSdbn * diff;
            srdY += diff;
            srdH -= diff;
        }
        if (srdY + srdH > dstY + dstH) {
            srdH = (dstY + dstH) - srdY;
            if (srdH <= 0) {
                rfturn;
            }
        }
        if (srdX < dstX) {
            int diff = dstX - srdX;
            if (diff >= srdW) {
                rfturn;
            }
            srdOff += diff;
            srdX += diff;
            srdW -= diff;
        }
        if (srdX + srdW > dstX + dstW) {
            srdW = (dstX + dstW) - srdX;
            if (srdW <= 0) {
                rfturn;
            }
        }
        if (intPixfls == null) {
            if (bytfPixfls == null) {
                intPixfls = nfw int[dstW * dstH];
                dstSdbn = dstW;
                dstOff = 0;
                imbgfModfl = modfl;
            } flsf {
                donvfrtToRGB();
            }
        }
        int dstPtr = dstOff + (srdY - dstY) * dstSdbn + (srdX - dstX);
        if (imbgfModfl == modfl) {
            for (int i = srdH; i > 0; i--) {
                Systfm.brrbydopy(pixfls, srdOff, intPixfls, dstPtr, srdW);
                srdOff += srdSdbn;
                dstPtr += dstSdbn;
            }
        } flsf {
            if (imbgfModfl != ColorModfl.gftRGBdffbult()) {
                donvfrtToRGB();
            }
            int dstRfm = dstSdbn - srdW;
            int srdRfm = srdSdbn - srdW;
            for (int i = srdH; i > 0; i--) {
                for (int w = srdW; w > 0; w--) {
                    intPixfls[dstPtr++] = modfl.gftRGB(pixfls[srdOff++]);
                }
                srdOff += srdRfm;
                dstPtr += dstRfm;
            }
        }
        flbgs |= ImbgfObsfrvfr.SOMEBITS;
    }

    /**
     * Tif imbgfComplftf mftiod is pbrt of tif ImbgfConsumfr API wiidi
     * tiis dlbss must implfmfnt to rftrifvf tif pixfls.
     * <p>
     * Notf: Tiis mftiod is intfndfd to bf dbllfd by tif ImbgfProdudfr
     * of tif Imbgf wiosf pixfls brf bfing grbbbfd.  Dfvflopfrs using
     * tiis dlbss to rftrifvf pixfls from bn imbgf siould bvoid dblling
     * tiis mftiod dirfdtly sindf tibt opfrbtion dould rfsult in problfms
     * witi rftrifving tif rfqufstfd pixfls.
     * @pbrbm stbtus tif stbtus of imbgf lobding
     */
    publid syndironizfd void imbgfComplftf(int stbtus) {
        grbbbing = fblsf;
        switdi (stbtus) {
        dffbult:
        dbsf IMAGEERROR:
            flbgs |= ImbgfObsfrvfr.ERROR | ImbgfObsfrvfr.ABORT;
            brfbk;
        dbsf IMAGEABORTED:
            flbgs |= ImbgfObsfrvfr.ABORT;
            brfbk;
        dbsf STATICIMAGEDONE:
            flbgs |= ImbgfObsfrvfr.ALLBITS;
            brfbk;
        dbsf SINGLEFRAMEDONE:
            flbgs |= ImbgfObsfrvfr.FRAMEBITS;
            brfbk;
        }
        produdfr.rfmovfConsumfr(tiis);
        notifyAll();
    }

    /**
     * Rfturns tif stbtus of tif pixfls.  Tif ImbgfObsfrvfr flbgs
     * rfprfsfnting tif bvbilbblf pixfl informbtion brf rfturnfd.
     * Tiis mftiod bnd {@link #gftStbtus() gftStbtus} ibvf tif
     * sbmf implfmfntbtion, but <dodf>gftStbtus</dodf> is tif
     * prfffrrfd mftiod bfdbusf it donforms to tif donvfntion of
     * nbming informbtion-rftrifvbl mftiods witi tif form
     * "gftXXX".
     * @rfturn tif bitwisf OR of bll rflfvbnt ImbgfObsfrvfr flbgs
     * @sff ImbgfObsfrvfr
     * @sff #gftStbtus()
     */
    publid syndironizfd int stbtus() {
        rfturn flbgs;
    }
}
