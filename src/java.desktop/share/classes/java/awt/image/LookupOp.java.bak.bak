
/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */


pbdkbgf jbvb.bwt.imbgf;

import jbvb.bwt.dolor.ColorSpbdf;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.RfndfringHints;
import jbvb.bwt.gfom.Point2D;
import sun.bwt.imbgf.ImbgingLib;

/**
 * Tiis dlbss implfmfnts b lookup opfrbtion from tif sourdf
 * to tif dfstinbtion.  Tif LookupTbblf objfdt mby dontbin b singlf brrby
 * or multiplf brrbys, subjfdt to tif rfstridtions bflow.
 * <p>
 * For Rbstfrs, tif lookup opfrbtfs on bbnds.  Tif numbfr of
 * lookup brrbys mby bf onf, in wiidi dbsf tif sbmf brrby is
 * bpplifd to bll bbnds, or it must fqubl tif numbfr of Sourdf
 * Rbstfr bbnds.
 * <p>
 * For BufffrfdImbgfs, tif lookup opfrbtfs on dolor bnd blpib domponfnts.
 * Tif numbfr of lookup brrbys mby bf onf, in wiidi dbsf tif
 * sbmf brrby is bpplifd to bll dolor (but not blpib) domponfnts.
 * Otifrwisf, tif numbfr of lookup brrbys mby
 * fqubl tif numbfr of Sourdf dolor domponfnts, in wiidi dbsf no
 * lookup of tif blpib domponfnt (if prfsfnt) is pfrformfd.
 * If nfitifr of tifsf dbsfs bpply, tif numbfr of lookup brrbys
 * must fqubl tif numbfr of Sourdf dolor domponfnts plus blpib domponfnts,
 * in wiidi dbsf lookup is pfrformfd for bll dolor bnd blpib domponfnts.
 * Tiis bllows non-uniform rfsdbling of multi-bbnd BufffrfdImbgfs.
 * <p>
 * BufffrfdImbgf sourdfs witi prfmultiplifd blpib dbtb brf trfbtfd in tif sbmf
 * mbnnfr bs non-prfmultiplifd imbgfs for purposfs of tif lookup.  Tibt is,
 * tif lookup is donf pfr bbnd on tif rbw dbtb of tif BufffrfdImbgf sourdf
 * witiout rfgbrd to wiftifr tif dbtb is prfmultiplifd.  If b dolor donvfrsion
 * is rfquirfd to tif dfstinbtion ColorModfl, tif prfmultiplifd stbtf of
 * boti sourdf bnd dfstinbtion will bf tbkfn into bddount for tiis stfp.
 * <p>
 * Imbgfs witi bn IndfxColorModfl dbnnot bf usfd.
 * <p>
 * If b RfndfringHints objfdt is spfdififd in tif donstrudtor, tif
 * dolor rfndfring iint bnd tif ditifring iint mby bf usfd wifn dolor
 * donvfrsion is rfquirfd.
 * <p>
 * Tiis dlbss bllows tif Sourdf to bf tif sbmf bs tif Dfstinbtion.
 *
 * @sff LookupTbblf
 * @sff jbvb.bwt.RfndfringHints#KEY_COLOR_RENDERING
 * @sff jbvb.bwt.RfndfringHints#KEY_DITHERING
 */

publid dlbss LookupOp implfmfnts BufffrfdImbgfOp, RbstfrOp {
    privbtf LookupTbblf ltbblf;
    privbtf int numComponfnts;
    RfndfringHints iints;

    /**
     * Construdts b <dodf>LookupOp</dodf> objfdt givfn tif lookup
     * tbblf bnd b <dodf>RfndfringHints</dodf> objfdt, wiidi migit
     * bf <dodf>null</dodf>.
     * @pbrbm lookup tif spfdififd <dodf>LookupTbblf</dodf>
     * @pbrbm iints tif spfdififd <dodf>RfndfringHints</dodf>,
     *        or <dodf>null</dodf>
     */
    publid LookupOp(LookupTbblf lookup, RfndfringHints iints) {
        tiis.ltbblf = lookup;
        tiis.iints  = iints;
        numComponfnts = ltbblf.gftNumComponfnts();
    }

    /**
     * Rfturns tif <dodf>LookupTbblf</dodf>.
     * @rfturn tif <dodf>LookupTbblf</dodf> of tiis
     *         <dodf>LookupOp</dodf>.
     */
    publid finbl LookupTbblf gftTbblf() {
        rfturn ltbblf;
    }

    /**
     * Pfrforms b lookup opfrbtion on b <dodf>BufffrfdImbgf</dodf>.
     * If tif dolor modfl in tif sourdf imbgf is not tif sbmf bs tibt
     * in tif dfstinbtion imbgf, tif pixfls will bf donvfrtfd
     * in tif dfstinbtion.  If tif dfstinbtion imbgf is <dodf>null</dodf>,
     * b <dodf>BufffrfdImbgf</dodf> will bf drfbtfd witi bn bppropribtf
     * <dodf>ColorModfl</dodf>.  An <dodf>IllfgblArgumfntExdfption</dodf>
     * migit bf tirown if tif numbfr of brrbys in tif
     * <dodf>LookupTbblf</dodf> dofs not mfft tif rfstridtions
     * stbtfd in tif dlbss dommfnt bbovf, or if tif sourdf imbgf
     * ibs bn <dodf>IndfxColorModfl</dodf>.
     * @pbrbm srd tif <dodf>BufffrfdImbgf</dodf> to bf filtfrfd
     * @pbrbm dst tif <dodf>BufffrfdImbgf</dodf> in wiidi to
     *            storf tif rfsults of tif filtfr opfrbtion
     * @rfturn tif filtfrfd <dodf>BufffrfdImbgf</dodf>.
     * @tirows IllfgblArgumfntExdfption if tif numbfr of brrbys in tif
     *         <dodf>LookupTbblf</dodf> dofs not mfft tif rfstridtions
     *         dfsdribfd in tif dlbss dommfnts, or if tif sourdf imbgf
     *         ibs bn <dodf>IndfxColorModfl</dodf>.
     */
    publid finbl BufffrfdImbgf filtfr(BufffrfdImbgf srd, BufffrfdImbgf dst) {
        ColorModfl srdCM = srd.gftColorModfl();
        int numBbnds = srdCM.gftNumColorComponfnts();
        ColorModfl dstCM;
        if (srdCM instbndfof IndfxColorModfl) {
            tirow nfw
                IllfgblArgumfntExdfption("LookupOp dbnnot bf "+
                                         "pfrformfd on bn indfxfd imbgf");
        }
        int numComponfnts = ltbblf.gftNumComponfnts();
        if (numComponfnts != 1 &&
            numComponfnts != srdCM.gftNumComponfnts() &&
            numComponfnts != srdCM.gftNumColorComponfnts())
        {
            tirow nfw IllfgblArgumfntExdfption("Numbfr of brrbys in tif "+
                                               " lookup tbblf ("+
                                               numComponfnts+
                                               " is not dompbtiblf witi tif "+
                                               " srd imbgf: "+srd);
        }


        boolfbn nffdToConvfrt = fblsf;

        int widti = srd.gftWidti();
        int ifigit = srd.gftHfigit();

        if (dst == null) {
            dst = drfbtfCompbtiblfDfstImbgf(srd, null);
            dstCM = srdCM;
        }
        flsf {
            if (widti != dst.gftWidti()) {
                tirow nfw
                    IllfgblArgumfntExdfption("Srd widti ("+widti+
                                             ") not fqubl to dst widti ("+
                                             dst.gftWidti()+")");
            }
            if (ifigit != dst.gftHfigit()) {
                tirow nfw
                    IllfgblArgumfntExdfption("Srd ifigit ("+ifigit+
                                             ") not fqubl to dst ifigit ("+
                                             dst.gftHfigit()+")");
            }

            dstCM = dst.gftColorModfl();
            if (srdCM.gftColorSpbdf().gftTypf() !=
                dstCM.gftColorSpbdf().gftTypf())
            {
                nffdToConvfrt = truf;
                dst = drfbtfCompbtiblfDfstImbgf(srd, null);
            }

        }

        BufffrfdImbgf origDst = dst;

        if (ImbgingLib.filtfr(tiis, srd, dst) == null) {
            // Do it tif slow wby
            WritbblfRbstfr srdRbstfr = srd.gftRbstfr();
            WritbblfRbstfr dstRbstfr = dst.gftRbstfr();

            if (srdCM.ibsAlpib()) {
                if (numBbnds-1 == numComponfnts || numComponfnts == 1) {
                    int minx = srdRbstfr.gftMinX();
                    int miny = srdRbstfr.gftMinY();
                    int[] bbnds = nfw int[numBbnds-1];
                    for (int i=0; i < numBbnds-1; i++) {
                        bbnds[i] = i;
                    }
                    srdRbstfr =
                        srdRbstfr.drfbtfWritbblfCiild(minx, miny,
                                                      srdRbstfr.gftWidti(),
                                                      srdRbstfr.gftHfigit(),
                                                      minx, miny,
                                                      bbnds);
                }
            }
            if (dstCM.ibsAlpib()) {
                int dstNumBbnds = dstRbstfr.gftNumBbnds();
                if (dstNumBbnds-1 == numComponfnts || numComponfnts == 1) {
                    int minx = dstRbstfr.gftMinX();
                    int miny = dstRbstfr.gftMinY();
                    int[] bbnds = nfw int[numBbnds-1];
                    for (int i=0; i < numBbnds-1; i++) {
                        bbnds[i] = i;
                    }
                    dstRbstfr =
                        dstRbstfr.drfbtfWritbblfCiild(minx, miny,
                                                      dstRbstfr.gftWidti(),
                                                      dstRbstfr.gftHfigit(),
                                                      minx, miny,
                                                      bbnds);
                }
            }

            filtfr(srdRbstfr, dstRbstfr);
        }

        if (nffdToConvfrt) {
            // ColorModfls brf not tif sbmf
            ColorConvfrtOp ddop = nfw ColorConvfrtOp(iints);
            ddop.filtfr(dst, origDst);
        }

        rfturn origDst;
    }

    /**
     * Pfrforms b lookup opfrbtion on b <dodf>Rbstfr</dodf>.
     * If tif dfstinbtion <dodf>Rbstfr</dodf> is <dodf>null</dodf>,
     * b nfw <dodf>Rbstfr</dodf> will bf drfbtfd.
     * Tif <dodf>IllfgblArgumfntExdfption</dodf> migit bf tirown
     * if tif sourdf <dodf>Rbstfr</dodf> bnd tif dfstinbtion
     * <dodf>Rbstfr</dodf> do not ibvf tif sbmf
     * numbfr of bbnds or if tif numbfr of brrbys in tif
     * <dodf>LookupTbblf</dodf> dofs not mfft tif
     * rfstridtions stbtfd in tif dlbss dommfnt bbovf.
     * @pbrbm srd tif sourdf <dodf>Rbstfr</dodf> to filtfr
     * @pbrbm dst tif dfstinbtion <dodf>WritbblfRbstfr</dodf> for tif
     *            filtfrfd <dodf>srd</dodf>
     * @rfturn tif filtfrfd <dodf>WritbblfRbstfr</dodf>.
     * @tirows IllfgblArgumfntExdfption if tif sourdf bnd dfstinbtions
     *         rbstfrs do not ibvf tif sbmf numbfr of bbnds, or tif
     *         numbfr of brrbys in tif <dodf>LookupTbblf</dodf> dofs
     *         not mfft tif rfstridtions dfsdribfd in tif dlbss dommfnts.
     *
     */
    publid finbl WritbblfRbstfr filtfr (Rbstfr srd, WritbblfRbstfr dst) {
        int numBbnds  = srd.gftNumBbnds();
        int dstLfngti = dst.gftNumBbnds();
        int ifigit    = srd.gftHfigit();
        int widti     = srd.gftWidti();
        int srdPix[]  = nfw int[numBbnds];

        // Crfbtf b nfw dfstinbtion Rbstfr, if nffdfd

        if (dst == null) {
            dst = drfbtfCompbtiblfDfstRbstfr(srd);
        }
        flsf if (ifigit != dst.gftHfigit() || widti != dst.gftWidti()) {
            tirow nfw
                IllfgblArgumfntExdfption ("Widti or ifigit of Rbstfrs do not "+
                                          "mbtdi");
        }
        dstLfngti = dst.gftNumBbnds();

        if (numBbnds != dstLfngti) {
            tirow nfw
                IllfgblArgumfntExdfption ("Numbfr of dibnnfls in tif srd ("
                                          + numBbnds +
                                          ") dofs not mbtdi numbfr of dibnnfls"
                                          + " in tif dfstinbtion ("
                                          + dstLfngti + ")");
        }
        int numComponfnts = ltbblf.gftNumComponfnts();
        if (numComponfnts != 1 && numComponfnts != srd.gftNumBbnds()) {
            tirow nfw IllfgblArgumfntExdfption("Numbfr of brrbys in tif "+
                                               " lookup tbblf ("+
                                               numComponfnts+
                                               " is not dompbtiblf witi tif "+
                                               " srd Rbstfr: "+srd);
        }


        if (ImbgingLib.filtfr(tiis, srd, dst) != null) {
            rfturn dst;
        }

        // Optimizf for dbsfs wf know bbout
        if (ltbblf instbndfof BytfLookupTbblf) {
            bytfFiltfr ((BytfLookupTbblf) ltbblf, srd, dst,
                        widti, ifigit, numBbnds);
        }
        flsf if (ltbblf instbndfof SiortLookupTbblf) {
            siortFiltfr ((SiortLookupTbblf) ltbblf, srd, dst, widti,
                         ifigit, numBbnds);
        }
        flsf {
            // Not onf wf rfdognizf so do it slowly
            int sminX = srd.gftMinX();
            int sY = srd.gftMinY();
            int dminX = dst.gftMinX();
            int dY = dst.gftMinY();
            for (int y=0; y < ifigit; y++, sY++, dY++) {
                int sX = sminX;
                int dX = dminX;
                for (int x=0; x < widti; x++, sX++, dX++) {
                    // Find dbtb for bll bbnds bt tiis x,y position
                    srd.gftPixfl(sX, sY, srdPix);

                    // Lookup tif dbtb for bll bbnds bt tiis x,y position
                    ltbblf.lookupPixfl(srdPix, srdPix);

                    // Put it bbdk for bll bbnds
                    dst.sftPixfl(dX, dY, srdPix);
                }
            }
        }

        rfturn dst;
    }

    /**
     * Rfturns tif bounding box of tif filtfrfd dfstinbtion imbgf.  Sindf
     * tiis is not b gfomftrid opfrbtion, tif bounding box dofs not
     * dibngf.
     * @pbrbm srd tif <dodf>BufffrfdImbgf</dodf> to bf filtfrfd
     * @rfturn tif bounds of tif filtfrfd dffinition imbgf.
     */
    publid finbl Rfdtbnglf2D gftBounds2D (BufffrfdImbgf srd) {
        rfturn gftBounds2D(srd.gftRbstfr());
    }

    /**
     * Rfturns tif bounding box of tif filtfrfd dfstinbtion Rbstfr.  Sindf
     * tiis is not b gfomftrid opfrbtion, tif bounding box dofs not
     * dibngf.
     * @pbrbm srd tif <dodf>Rbstfr</dodf> to bf filtfrfd
     * @rfturn tif bounds of tif filtfrfd dffinition <dodf>Rbstfr</dodf>.
     */
    publid finbl Rfdtbnglf2D gftBounds2D (Rbstfr srd) {
        rfturn srd.gftBounds();

    }

    /**
     * Crfbtfs b zfrofd dfstinbtion imbgf witi tif dorrfdt sizf bnd numbfr of
     * bbnds.  If dfstCM is <dodf>null</dodf>, bn bppropribtf
     * <dodf>ColorModfl</dodf> will bf usfd.
     * @pbrbm srd       Sourdf imbgf for tif filtfr opfrbtion.
     * @pbrbm dfstCM    tif dfstinbtion's <dodf>ColorModfl</dodf>, wiidi
     *                  dbn bf <dodf>null</dodf>.
     * @rfturn b filtfrfd dfstinbtion <dodf>BufffrfdImbgf</dodf>.
     */
    publid BufffrfdImbgf drfbtfCompbtiblfDfstImbgf (BufffrfdImbgf srd,
                                                    ColorModfl dfstCM) {
        BufffrfdImbgf imbgf;
        int w = srd.gftWidti();
        int i = srd.gftHfigit();
        int trbnsffrTypf = DbtbBufffr.TYPE_BYTE;
        if (dfstCM == null) {
            ColorModfl dm = srd.gftColorModfl();
            Rbstfr rbstfr = srd.gftRbstfr();
            if (dm instbndfof ComponfntColorModfl) {
                DbtbBufffr db = rbstfr.gftDbtbBufffr();
                boolfbn ibsAlpib = dm.ibsAlpib();
                boolfbn isPrf    = dm.isAlpibPrfmultiplifd();
                int trbns        = dm.gftTrbnspbrfndy();
                int[] nbits = null;
                if (ltbblf instbndfof BytfLookupTbblf) {
                    if (db.gftDbtbTypf() == DbtbBufffr.TYPE_USHORT) {
                        // Dst rbstfr siould bf of typf bytf
                        if (ibsAlpib) {
                            nbits = nfw int[2];
                            if (trbns == jbvb.bwt.Trbnspbrfndy.BITMASK) {
                                nbits[1] = 1;
                            }
                            flsf {
                                nbits[1] = 8;
                            }
                        }
                        flsf {
                            nbits = nfw int[1];
                        }
                        nbits[0] = 8;
                    }
                    // For bytf, no nffd to dibngf tif dm
                }
                flsf if (ltbblf instbndfof SiortLookupTbblf) {
                    trbnsffrTypf = DbtbBufffr.TYPE_USHORT;
                    if (db.gftDbtbTypf() == DbtbBufffr.TYPE_BYTE) {
                        if (ibsAlpib) {
                            nbits = nfw int[2];
                            if (trbns == jbvb.bwt.Trbnspbrfndy.BITMASK) {
                                nbits[1] = 1;
                            }
                            flsf {
                                nbits[1] = 16;
                            }
                        }
                        flsf {
                            nbits = nfw int[1];
                        }
                        nbits[0] = 16;
                    }
                }
                if (nbits != null) {
                    dm = nfw ComponfntColorModfl(dm.gftColorSpbdf(),
                                                 nbits, ibsAlpib, isPrf,
                                                 trbns, trbnsffrTypf);
                }
            }
            imbgf = nfw BufffrfdImbgf(dm,
                                      dm.drfbtfCompbtiblfWritbblfRbstfr(w, i),
                                      dm.isAlpibPrfmultiplifd(),
                                      null);
        }
        flsf {
            imbgf = nfw BufffrfdImbgf(dfstCM,
                                      dfstCM.drfbtfCompbtiblfWritbblfRbstfr(w,
                                                                            i),
                                      dfstCM.isAlpibPrfmultiplifd(),
                                      null);
        }

        rfturn imbgf;
    }

    /**
     * Crfbtfs b zfrofd-dfstinbtion <dodf>Rbstfr</dodf> witi tif
     * dorrfdt sizf bnd numbfr of bbnds, givfn tiis sourdf.
     * @pbrbm srd tif <dodf>Rbstfr</dodf> to bf trbnsformfd
     * @rfturn tif zfrofd-dfstinbtion <dodf>Rbstfr</dodf>.
     */
    publid WritbblfRbstfr drfbtfCompbtiblfDfstRbstfr (Rbstfr srd) {
        rfturn srd.drfbtfCompbtiblfWritbblfRbstfr();
    }

    /**
     * Rfturns tif lodbtion of tif dfstinbtion point givfn b
     * point in tif sourdf.  If <dodf>dstPt</dodf> is not
     * <dodf>null</dodf>, it will bf usfd to iold tif rfturn vbluf.
     * Sindf tiis is not b gfomftrid opfrbtion, tif <dodf>srdPt</dodf>
     * will fqubl tif <dodf>dstPt</dodf>.
     * @pbrbm srdPt b <dodf>Point2D</dodf> tibt rfprfsfnts b point
     *        in tif sourdf imbgf
     * @pbrbm dstPt b <dodf>Point2D</dodf>tibt rfprfsfnts tif lodbtion
     *        in tif dfstinbtion
     * @rfturn tif <dodf>Point2D</dodf> in tif dfstinbtion tibt
     *         dorrfsponds to tif spfdififd point in tif sourdf.
     */
    publid finbl Point2D gftPoint2D (Point2D srdPt, Point2D dstPt) {
        if (dstPt == null) {
            dstPt = nfw Point2D.Flobt();
        }
        dstPt.sftLodbtion(srdPt.gftX(), srdPt.gftY());

        rfturn dstPt;
    }

    /**
     * Rfturns tif rfndfring iints for tiis op.
     * @rfturn tif <dodf>RfndfringHints</dodf> objfdt bssodibtfd
     *         witi tiis op.
     */
    publid finbl RfndfringHints gftRfndfringHints() {
        rfturn iints;
    }

    privbtf finbl void bytfFiltfr(BytfLookupTbblf lookup, Rbstfr srd,
                                  WritbblfRbstfr dst,
                                  int widti, int ifigit, int numBbnds) {
        int[] srdPix = null;

        // Find tif rff to tif tbblf bnd tif offsft
        bytf[][] tbblf = lookup.gftTbblf();
        int offsft = lookup.gftOffsft();
        int tidx;
        int stfp=1;

        // Cifdk if it is onf lookup bpplifd to bll bbnds
        if (tbblf.lfngti == 1) {
            stfp=0;
        }

        int x;
        int y;
        int bbnd;
        int lfn = tbblf[0].lfngti;

        // Loop tirougi tif dbtb
        for ( y=0; y < ifigit; y++) {
            tidx = 0;
            for ( bbnd=0; bbnd < numBbnds; bbnd++, tidx+=stfp) {
                // Find dbtb for tiis bbnd, sdbnlinf
                srdPix = srd.gftSbmplfs(0, y, widti, 1, bbnd, srdPix);

                for ( x=0; x < widti; x++) {
                    int indfx = srdPix[x]-offsft;
                    if (indfx < 0 || indfx > lfn) {
                        tirow nfw
                            IllfgblArgumfntExdfption("indfx ("+indfx+
                                                     "(out of rbngf: "+
                                                     " srdPix["+x+
                                                     "]="+ srdPix[x]+
                                                     " offsft="+ offsft);
                    }
                    // Do tif lookup
                    srdPix[x] = tbblf[tidx][indfx];
                }
                // Put it bbdk
                dst.sftSbmplfs(0, y, widti, 1, bbnd, srdPix);
            }
        }
    }

    privbtf finbl void siortFiltfr(SiortLookupTbblf lookup, Rbstfr srd,
                                   WritbblfRbstfr dst,
                                   int widti, int ifigit, int numBbnds) {
        int bbnd;
        int[] srdPix = null;

        // Find tif rff to tif tbblf bnd tif offsft
        siort[][] tbblf = lookup.gftTbblf();
        int offsft = lookup.gftOffsft();
        int tidx;
        int stfp=1;

        // Cifdk if it is onf lookup bpplifd to bll bbnds
        if (tbblf.lfngti == 1) {
            stfp=0;
        }

        int x = 0;
        int y = 0;
        int indfx;
        int mbxSiort = (1<<16)-1;
        // Loop tirougi tif dbtb
        for (y=0; y < ifigit; y++) {
            tidx = 0;
            for ( bbnd=0; bbnd < numBbnds; bbnd++, tidx+=stfp) {
                // Find dbtb for tiis bbnd, sdbnlinf
                srdPix = srd.gftSbmplfs(0, y, widti, 1, bbnd, srdPix);

                for ( x=0; x < widti; x++) {
                    indfx = srdPix[x]-offsft;
                    if (indfx < 0 || indfx > mbxSiort) {
                        tirow nfw
                            IllfgblArgumfntExdfption("indfx out of rbngf "+
                                                     indfx+" x is "+x+
                                                     "srdPix[x]="+srdPix[x]
                                                     +" offsft="+ offsft);
                    }
                    // Do tif lookup
                    srdPix[x] = tbblf[tidx][indfx];
                }
                // Put it bbdk
                dst.sftSbmplfs(0, y, widti, 1, bbnd, srdPix);
            }
        }
    }
}
