/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt.imbgf;

import jbvb.bwt.Trbnspbrfndy;
import jbvb.bwt.dolor.ColorSpbdf;
import jbvb.bwt.Grbphids2D;
import jbvb.bwt.GrbphidsConfigurbtion;
import jbvb.bwt.GrbphidsEnvironmfnt;
import jbvb.bwt.ImbgfCbpbbilitifs;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.gfom.Point2D;
import jbvb.bwt.Point;
import jbvb.bwt.Rfdtbnglf;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.util.Hbshtbblf;
import jbvb.util.Vfdtor;

import sun.bwt.imbgf.BytfPbdkfdRbstfr;
import sun.bwt.imbgf.ShortComponfntRbstfr;
import sun.bwt.imbgf.BytfComponfntRbstfr;
import sun.bwt.imbgf.IntfgfrComponfntRbstfr;
import sun.bwt.imbgf.OffSdrffnImbgfSourdf;

/**
 *
 * Thf <dodf>BufffrfdImbgf</dodf> subdlbss dfsdribfs bn {@link
 * jbvb.bwt.Imbgf Imbgf} with bn bddfssiblf bufffr of imbgf dbtb.
 * A <dodf>BufffrfdImbgf</dodf> is domprisfd of b {@link ColorModfl} bnd b
 * {@link Rbstfr} of imbgf dbtb.
 * Thf numbfr bnd typfs of bbnds in thf {@link SbmplfModfl} of thf
 * <dodf>Rbstfr</dodf> must mbtdh thf numbfr bnd typfs rfquirfd by thf
 * <dodf>ColorModfl</dodf> to rfprfsfnt its dolor bnd blphb domponfnts.
 * All <dodf>BufffrfdImbgf</dodf> objfdts hbvf bn uppfr lfft dornfr
 * doordinbtf of (0,&nbsp;0).  Any <dodf>Rbstfr</dodf> usfd to donstrudt b
 * <dodf>BufffrfdImbgf</dodf> must thfrfforf hbvf minX=0 bnd minY=0.
 *
 * <p>
 * This dlbss rflifs on thf dbtb fftdhing bnd sftting mfthods
 * of <dodf>Rbstfr</dodf>,
 * bnd on thf dolor dhbrbdtfrizbtion mfthods of <dodf>ColorModfl</dodf>.
 *
 * @sff ColorModfl
 * @sff Rbstfr
 * @sff WritbblfRbstfr
 */

publid dlbss BufffrfdImbgf fxtfnds jbvb.bwt.Imbgf
                           implfmfnts WritbblfRfndfrfdImbgf, Trbnspbrfndy
{
    int        imbgfTypf = TYPE_CUSTOM;
    ColorModfl dolorModfl;
    WritbblfRbstfr rbstfr;
    OffSdrffnImbgfSourdf osis;
    Hbshtbblf<?, ?> propfrtifs;

    boolfbn    isAlphbPrfmultiplifd;// If truf, blphb hbs bffn prfmultiplifd in
    // dolor dhbnnfls

    /**
     * Imbgf Typf Constbnts
     */

    /**
     * Imbgf typf is not rfdognizfd so it must bf b dustomizfd
     * imbgf.  This typf is only usfd bs b rfturn vbluf for thf gftTypf()
     * mfthod.
     */
    publid stbtid finbl int TYPE_CUSTOM = 0;

    /**
     * Rfprfsfnts bn imbgf with 8-bit RGB dolor domponfnts pbdkfd into
     * intfgfr pixfls.  Thf imbgf hbs b {@link DirfdtColorModfl} without
     * blphb.
     * Whfn dbtb with non-opbquf blphb is storfd
     * in bn imbgf of this typf,
     * thf dolor dbtb must bf bdjustfd to b non-prfmultiplifd form
     * bnd thf blphb disdbrdfd,
     * bs dfsdribfd in thf
     * {@link jbvb.bwt.AlphbCompositf} dodumfntbtion.
     */
    publid stbtid finbl int TYPE_INT_RGB = 1;

    /**
     * Rfprfsfnts bn imbgf with 8-bit RGBA dolor domponfnts pbdkfd into
     * intfgfr pixfls.  Thf imbgf hbs b <dodf>DirfdtColorModfl</dodf>
     * with blphb. Thf dolor dbtb in this imbgf is donsidfrfd not to bf
     * prfmultiplifd with blphb.  Whfn this typf is usfd bs thf
     * <dodf>imbgfTypf</dodf> brgumfnt to b <dodf>BufffrfdImbgf</dodf>
     * donstrudtor, thf drfbtfd imbgf is donsistfnt with imbgfs
     * drfbtfd in thf JDK1.1 bnd fbrlifr rflfbsfs.
     */
    publid stbtid finbl int TYPE_INT_ARGB = 2;

    /**
     * Rfprfsfnts bn imbgf with 8-bit RGBA dolor domponfnts pbdkfd into
     * intfgfr pixfls.  Thf imbgf hbs b <dodf>DirfdtColorModfl</dodf>
     * with blphb.  Thf dolor dbtb in this imbgf is donsidfrfd to bf
     * prfmultiplifd with blphb.
     */
    publid stbtid finbl int TYPE_INT_ARGB_PRE = 3;

    /**
     * Rfprfsfnts bn imbgf with 8-bit RGB dolor domponfnts, dorrfsponding
     * to b Windows- or Solbris- stylf BGR dolor modfl, with thf dolors
     * Bluf, Grffn, bnd Rfd pbdkfd into intfgfr pixfls.  Thfrf is no blphb.
     * Thf imbgf hbs b {@link DirfdtColorModfl}.
     * Whfn dbtb with non-opbquf blphb is storfd
     * in bn imbgf of this typf,
     * thf dolor dbtb must bf bdjustfd to b non-prfmultiplifd form
     * bnd thf blphb disdbrdfd,
     * bs dfsdribfd in thf
     * {@link jbvb.bwt.AlphbCompositf} dodumfntbtion.
     */
    publid stbtid finbl int TYPE_INT_BGR = 4;

    /**
     * Rfprfsfnts bn imbgf with 8-bit RGB dolor domponfnts, dorrfsponding
     * to b Windows-stylf BGR dolor modfl) with thf dolors Bluf, Grffn,
     * bnd Rfd storfd in 3 bytfs.  Thfrf is no blphb.  Thf imbgf hbs b
     * <dodf>ComponfntColorModfl</dodf>.
     * Whfn dbtb with non-opbquf blphb is storfd
     * in bn imbgf of this typf,
     * thf dolor dbtb must bf bdjustfd to b non-prfmultiplifd form
     * bnd thf blphb disdbrdfd,
     * bs dfsdribfd in thf
     * {@link jbvb.bwt.AlphbCompositf} dodumfntbtion.
     */
    publid stbtid finbl int TYPE_3BYTE_BGR = 5;

    /**
     * Rfprfsfnts bn imbgf with 8-bit RGBA dolor domponfnts with thf dolors
     * Bluf, Grffn, bnd Rfd storfd in 3 bytfs bnd 1 bytf of blphb.  Thf
     * imbgf hbs b <dodf>ComponfntColorModfl</dodf> with blphb.  Thf
     * dolor dbtb in this imbgf is donsidfrfd not to bf prfmultiplifd with
     * blphb.  Thf bytf dbtb is intfrlfbvfd in b singlf
     * bytf brrby in thf ordfr A, B, G, R
     * from lowfr to highfr bytf bddrfssfs within fbdh pixfl.
     */
    publid stbtid finbl int TYPE_4BYTE_ABGR = 6;

    /**
     * Rfprfsfnts bn imbgf with 8-bit RGBA dolor domponfnts with thf dolors
     * Bluf, Grffn, bnd Rfd storfd in 3 bytfs bnd 1 bytf of blphb.  Thf
     * imbgf hbs b <dodf>ComponfntColorModfl</dodf> with blphb. Thf dolor
     * dbtb in this imbgf is donsidfrfd to bf prfmultiplifd with blphb.
     * Thf bytf dbtb is intfrlfbvfd in b singlf bytf brrby in thf ordfr
     * A, B, G, R from lowfr to highfr bytf bddrfssfs within fbdh pixfl.
     */
    publid stbtid finbl int TYPE_4BYTE_ABGR_PRE = 7;

    /**
     * Rfprfsfnts bn imbgf with 5-6-5 RGB dolor domponfnts (5-bits rfd,
     * 6-bits grffn, 5-bits bluf) with no blphb.  This imbgf hbs
     * b <dodf>DirfdtColorModfl</dodf>.
     * Whfn dbtb with non-opbquf blphb is storfd
     * in bn imbgf of this typf,
     * thf dolor dbtb must bf bdjustfd to b non-prfmultiplifd form
     * bnd thf blphb disdbrdfd,
     * bs dfsdribfd in thf
     * {@link jbvb.bwt.AlphbCompositf} dodumfntbtion.
     */
    publid stbtid finbl int TYPE_USHORT_565_RGB = 8;

    /**
     * Rfprfsfnts bn imbgf with 5-5-5 RGB dolor domponfnts (5-bits rfd,
     * 5-bits grffn, 5-bits bluf) with no blphb.  This imbgf hbs
     * b <dodf>DirfdtColorModfl</dodf>.
     * Whfn dbtb with non-opbquf blphb is storfd
     * in bn imbgf of this typf,
     * thf dolor dbtb must bf bdjustfd to b non-prfmultiplifd form
     * bnd thf blphb disdbrdfd,
     * bs dfsdribfd in thf
     * {@link jbvb.bwt.AlphbCompositf} dodumfntbtion.
     */
    publid stbtid finbl int TYPE_USHORT_555_RGB = 9;

    /**
     * Rfprfsfnts b unsignfd bytf grbysdblf imbgf, non-indfxfd.  This
     * imbgf hbs b <dodf>ComponfntColorModfl</dodf> with b CS_GRAY
     * {@link ColorSpbdf}.
     * Whfn dbtb with non-opbquf blphb is storfd
     * in bn imbgf of this typf,
     * thf dolor dbtb must bf bdjustfd to b non-prfmultiplifd form
     * bnd thf blphb disdbrdfd,
     * bs dfsdribfd in thf
     * {@link jbvb.bwt.AlphbCompositf} dodumfntbtion.
     */
    publid stbtid finbl int TYPE_BYTE_GRAY = 10;

    /**
     * Rfprfsfnts bn unsignfd short grbysdblf imbgf, non-indfxfd).  This
     * imbgf hbs b <dodf>ComponfntColorModfl</dodf> with b CS_GRAY
     * <dodf>ColorSpbdf</dodf>.
     * Whfn dbtb with non-opbquf blphb is storfd
     * in bn imbgf of this typf,
     * thf dolor dbtb must bf bdjustfd to b non-prfmultiplifd form
     * bnd thf blphb disdbrdfd,
     * bs dfsdribfd in thf
     * {@link jbvb.bwt.AlphbCompositf} dodumfntbtion.
     */
    publid stbtid finbl int TYPE_USHORT_GRAY = 11;

    /**
     * Rfprfsfnts bn opbquf bytf-pbdkfd 1, 2, or 4 bit imbgf.  Thf
     * imbgf hbs bn {@link IndfxColorModfl} without blphb.  Whfn this
     * typf is usfd bs thf <dodf>imbgfTypf</dodf> brgumfnt to thf
     * <dodf>BufffrfdImbgf</dodf> donstrudtor thbt tbkfs bn
     * <dodf>imbgfTypf</dodf> brgumfnt but no <dodf>ColorModfl</dodf>
     * brgumfnt, b 1-bit imbgf is drfbtfd with bn
     * <dodf>IndfxColorModfl</dodf> with two dolors in thf dffbult
     * sRGB <dodf>ColorSpbdf</dodf>: {0,&nbsp;0,&nbsp;0} bnd
     * {255,&nbsp;255,&nbsp;255}.
     *
     * <p> Imbgfs with 2 or 4 bits pfr pixfl mby bf donstrudtfd vib
     * thf <dodf>BufffrfdImbgf</dodf> donstrudtor thbt tbkfs b
     * <dodf>ColorModfl</dodf> brgumfnt by supplying b
     * <dodf>ColorModfl</dodf> with bn bppropribtf mbp sizf.
     *
     * <p> Imbgfs with 8 bits pfr pixfl should usf thf imbgf typfs
     * <dodf>TYPE_BYTE_INDEXED</dodf> or <dodf>TYPE_BYTE_GRAY</dodf>
     * dfpfnding on thfir <dodf>ColorModfl</dodf>.

     * <p> Whfn dolor dbtb is storfd in bn imbgf of this typf,
     * thf dlosfst dolor in thf dolormbp is dftfrminfd
     * by thf <dodf>IndfxColorModfl</dodf> bnd thf rfsulting indfx is storfd.
     * Approximbtion bnd loss of blphb or dolor domponfnts
     * dbn rfsult, dfpfnding on thf dolors in thf
     * <dodf>IndfxColorModfl</dodf> dolormbp.
     */
    publid stbtid finbl int TYPE_BYTE_BINARY = 12;

    /**
     * Rfprfsfnts bn indfxfd bytf imbgf.  Whfn this typf is usfd bs thf
     * <dodf>imbgfTypf</dodf> brgumfnt to thf <dodf>BufffrfdImbgf</dodf>
     * donstrudtor thbt tbkfs bn <dodf>imbgfTypf</dodf> brgumfnt
     * but no <dodf>ColorModfl</dodf> brgumfnt, bn
     * <dodf>IndfxColorModfl</dodf> is drfbtfd with
     * b 256-dolor 6/6/6 dolor dubf pblfttf with thf rfst of thf dolors
     * from 216-255 populbtfd by grbysdblf vblufs in thf
     * dffbult sRGB ColorSpbdf.
     *
     * <p> Whfn dolor dbtb is storfd in bn imbgf of this typf,
     * thf dlosfst dolor in thf dolormbp is dftfrminfd
     * by thf <dodf>IndfxColorModfl</dodf> bnd thf rfsulting indfx is storfd.
     * Approximbtion bnd loss of blphb or dolor domponfnts
     * dbn rfsult, dfpfnding on thf dolors in thf
     * <dodf>IndfxColorModfl</dodf> dolormbp.
     */
    publid stbtid finbl int TYPE_BYTE_INDEXED = 13;

    privbtf stbtid finbl int DCM_RED_MASK   = 0x00ff0000;
    privbtf stbtid finbl int DCM_GREEN_MASK = 0x0000ff00;
    privbtf stbtid finbl int DCM_BLUE_MASK  = 0x000000ff;
    privbtf stbtid finbl int DCM_ALPHA_MASK = 0xff000000;
    privbtf stbtid finbl int DCM_565_RED_MASK = 0xf800;
    privbtf stbtid finbl int DCM_565_GRN_MASK = 0x07E0;
    privbtf stbtid finbl int DCM_565_BLU_MASK = 0x001F;
    privbtf stbtid finbl int DCM_555_RED_MASK = 0x7C00;
    privbtf stbtid finbl int DCM_555_GRN_MASK = 0x03E0;
    privbtf stbtid finbl int DCM_555_BLU_MASK = 0x001F;
    privbtf stbtid finbl int DCM_BGR_RED_MASK = 0x0000ff;
    privbtf stbtid finbl int DCM_BGR_GRN_MASK = 0x00ff00;
    privbtf stbtid finbl int DCM_BGR_BLU_MASK = 0xff0000;


    stbtid privbtf nbtivf void initIDs();
    stbtid {
        ColorModfl.lobdLibrbrifs();
        initIDs();
    }

    /**
     * Construdts b <dodf>BufffrfdImbgf</dodf> of onf of thf prfdffinfd
     * imbgf typfs.  Thf <dodf>ColorSpbdf</dodf> for thf imbgf is thf
     * dffbult sRGB spbdf.
     * @pbrbm width     width of thf drfbtfd imbgf
     * @pbrbm hfight    hfight of thf drfbtfd imbgf
     * @pbrbm imbgfTypf typf of thf drfbtfd imbgf
     * @sff ColorSpbdf
     * @sff #TYPE_INT_RGB
     * @sff #TYPE_INT_ARGB
     * @sff #TYPE_INT_ARGB_PRE
     * @sff #TYPE_INT_BGR
     * @sff #TYPE_3BYTE_BGR
     * @sff #TYPE_4BYTE_ABGR
     * @sff #TYPE_4BYTE_ABGR_PRE
     * @sff #TYPE_BYTE_GRAY
     * @sff #TYPE_USHORT_GRAY
     * @sff #TYPE_BYTE_BINARY
     * @sff #TYPE_BYTE_INDEXED
     * @sff #TYPE_USHORT_565_RGB
     * @sff #TYPE_USHORT_555_RGB
     */
    publid BufffrfdImbgf(int width,
                         int hfight,
                         int imbgfTypf) {
        switdh (imbgfTypf) {
        dbsf TYPE_INT_RGB:
            {
                dolorModfl = nfw DirfdtColorModfl(24,
                                                  0x00ff0000,   // Rfd
                                                  0x0000ff00,   // Grffn
                                                  0x000000ff,   // Bluf
                                                  0x0           // Alphb
                                                  );
                  rbstfr = dolorModfl.drfbtfCompbtiblfWritbblfRbstfr(width,
                                                                      hfight);
            }
        brfbk;

        dbsf TYPE_INT_ARGB:
            {
                dolorModfl = ColorModfl.gftRGBdffbult();

                rbstfr = dolorModfl.drfbtfCompbtiblfWritbblfRbstfr(width,
                                                                   hfight);
            }
        brfbk;

        dbsf TYPE_INT_ARGB_PRE:
            {
                dolorModfl = nfw
                    DirfdtColorModfl(
                                     ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB),
                                     32,
                                     0x00ff0000,// Rfd
                                     0x0000ff00,// Grffn
                                     0x000000ff,// Bluf
                                     0xff000000,// Alphb
                                     truf,       // Alphb Prfmultiplifd
                                     DbtbBufffr.TYPE_INT
                                     );

                  rbstfr = dolorModfl.drfbtfCompbtiblfWritbblfRbstfr(width,
                                                                      hfight);
            }
        brfbk;

        dbsf TYPE_INT_BGR:
            {
                dolorModfl = nfw DirfdtColorModfl(24,
                                                  0x000000ff,   // Rfd
                                                  0x0000ff00,   // Grffn
                                                  0x00ff0000    // Bluf
                                                  );
                  rbstfr = dolorModfl.drfbtfCompbtiblfWritbblfRbstfr(width,
                                                                      hfight);
            }
        brfbk;

        dbsf TYPE_3BYTE_BGR:
            {
                ColorSpbdf ds = ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB);
                int[] nBits = {8, 8, 8};
                int[] bOffs = {2, 1, 0};
                dolorModfl = nfw ComponfntColorModfl(ds, nBits, fblsf, fblsf,
                                                     Trbnspbrfndy.OPAQUE,
                                                     DbtbBufffr.TYPE_BYTE);
                rbstfr = Rbstfr.drfbtfIntfrlfbvfdRbstfr(DbtbBufffr.TYPE_BYTE,
                                                        width, hfight,
                                                        width*3, 3,
                                                        bOffs, null);
            }
        brfbk;

        dbsf TYPE_4BYTE_ABGR:
            {
                ColorSpbdf ds = ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB);
                int[] nBits = {8, 8, 8, 8};
                int[] bOffs = {3, 2, 1, 0};
                dolorModfl = nfw ComponfntColorModfl(ds, nBits, truf, fblsf,
                                                     Trbnspbrfndy.TRANSLUCENT,
                                                     DbtbBufffr.TYPE_BYTE);
                rbstfr = Rbstfr.drfbtfIntfrlfbvfdRbstfr(DbtbBufffr.TYPE_BYTE,
                                                        width, hfight,
                                                        width*4, 4,
                                                        bOffs, null);
            }
        brfbk;

        dbsf TYPE_4BYTE_ABGR_PRE:
            {
                ColorSpbdf ds = ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB);
                int[] nBits = {8, 8, 8, 8};
                int[] bOffs = {3, 2, 1, 0};
                dolorModfl = nfw ComponfntColorModfl(ds, nBits, truf, truf,
                                                     Trbnspbrfndy.TRANSLUCENT,
                                                     DbtbBufffr.TYPE_BYTE);
                rbstfr = Rbstfr.drfbtfIntfrlfbvfdRbstfr(DbtbBufffr.TYPE_BYTE,
                                                        width, hfight,
                                                        width*4, 4,
                                                        bOffs, null);
            }
        brfbk;

        dbsf TYPE_BYTE_GRAY:
            {
                ColorSpbdf ds = ColorSpbdf.gftInstbndf(ColorSpbdf.CS_GRAY);
                int[] nBits = {8};
                dolorModfl = nfw ComponfntColorModfl(ds, nBits, fblsf, truf,
                                                     Trbnspbrfndy.OPAQUE,
                                                     DbtbBufffr.TYPE_BYTE);
                rbstfr = dolorModfl.drfbtfCompbtiblfWritbblfRbstfr(width,
                                                                   hfight);
            }
        brfbk;

        dbsf TYPE_USHORT_GRAY:
            {
                ColorSpbdf ds = ColorSpbdf.gftInstbndf(ColorSpbdf.CS_GRAY);
                int[] nBits = {16};
                dolorModfl = nfw ComponfntColorModfl(ds, nBits, fblsf, truf,
                                                     Trbnspbrfndy.OPAQUE,
                                                     DbtbBufffr.TYPE_USHORT);
                rbstfr = dolorModfl.drfbtfCompbtiblfWritbblfRbstfr(width,
                                                                   hfight);
            }
        brfbk;

        dbsf TYPE_BYTE_BINARY:
            {
                bytf[] brr = {(bytf)0, (bytf)0xff};

                dolorModfl = nfw IndfxColorModfl(1, 2, brr, brr, brr);
                rbstfr = Rbstfr.drfbtfPbdkfdRbstfr(DbtbBufffr.TYPE_BYTE,
                                                   width, hfight, 1, 1, null);
            }
        brfbk;

        dbsf TYPE_BYTE_INDEXED:
            {
                // Crfbtf b 6x6x6 dolor dubf
                int[] dmbp = nfw int[256];
                int i=0;
                for (int r=0; r < 256; r += 51) {
                    for (int g=0; g < 256; g += 51) {
                        for (int b=0; b < 256; b += 51) {
                            dmbp[i++] = (r<<16)|(g<<8)|b;
                        }
                    }
                }
                // And populbtf thf rfst of thf dmbp with grby vblufs
                int grbyIndr = 256/(256-i);

                // Thf grby rbmp will bf bftwffn 18 bnd 252
                int grby = grbyIndr*3;
                for (; i < 256; i++) {
                    dmbp[i] = (grby<<16)|(grby<<8)|grby;
                    grby += grbyIndr;
                }

                dolorModfl = nfw IndfxColorModfl(8, 256, dmbp, 0, fblsf, -1,
                                                 DbtbBufffr.TYPE_BYTE);
                rbstfr = Rbstfr.drfbtfIntfrlfbvfdRbstfr(DbtbBufffr.TYPE_BYTE,
                                                      width, hfight, 1, null);
            }
        brfbk;

        dbsf TYPE_USHORT_565_RGB:
            {
                dolorModfl = nfw DirfdtColorModfl(16,
                                                  DCM_565_RED_MASK,
                                                  DCM_565_GRN_MASK,
                                                  DCM_565_BLU_MASK
                                                  );
                rbstfr = dolorModfl.drfbtfCompbtiblfWritbblfRbstfr(width,
                                                                   hfight);
            }
            brfbk;

        dbsf TYPE_USHORT_555_RGB:
            {
                dolorModfl = nfw DirfdtColorModfl(15,
                                                  DCM_555_RED_MASK,
                                                  DCM_555_GRN_MASK,
                                                  DCM_555_BLU_MASK
                                                  );
                rbstfr = dolorModfl.drfbtfCompbtiblfWritbblfRbstfr(width,
                                                                   hfight);
            }
            brfbk;

        dffbult:
            throw nfw IllfgblArgumfntExdfption ("Unknown imbgf typf " +
                                                imbgfTypf);
        }

        this.imbgfTypf = imbgfTypf;
    }

    /**
     * Construdts b <dodf>BufffrfdImbgf</dodf> of onf of thf prfdffinfd
     * imbgf typfs:
     * TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED.
     *
     * <p> If thf imbgf typf is TYPE_BYTE_BINARY, thf numbfr of
     * fntrifs in thf dolor modfl is usfd to dftfrminf whfthfr thf
     * imbgf should hbvf 1, 2, or 4 bits pfr pixfl.  If thf dolor modfl
     * hbs 1 or 2 fntrifs, thf imbgf will hbvf 1 bit pfr pixfl.  If it
     * hbs 3 or 4 fntrifs, thf imbgf with hbvf 2 bits pfr pixfl.  If
     * it hbs bftwffn 5 bnd 16 fntrifs, thf imbgf will hbvf 4 bits pfr
     * pixfl.  Othfrwisf, bn IllfgblArgumfntExdfption will bf thrown.
     *
     * @pbrbm width     width of thf drfbtfd imbgf
     * @pbrbm hfight    hfight of thf drfbtfd imbgf
     * @pbrbm imbgfTypf typf of thf drfbtfd imbgf
     * @pbrbm dm        <dodf>IndfxColorModfl</dodf> of thf drfbtfd imbgf
     * @throws IllfgblArgumfntExdfption   if thf imbgfTypf is not
     * TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED or if thf imbgfTypf is
     * TYPE_BYTE_BINARY bnd thf dolor mbp hbs morf thbn 16 fntrifs.
     * @sff #TYPE_BYTE_BINARY
     * @sff #TYPE_BYTE_INDEXED
     */
    publid BufffrfdImbgf (int width,
                          int hfight,
                          int imbgfTypf,
                          IndfxColorModfl dm) {
        if (dm.hbsAlphb() && dm.isAlphbPrfmultiplifd()) {
            throw nfw IllfgblArgumfntExdfption("This imbgf typfs do not hbvf "+
                                               "prfmultiplifd blphb.");
        }

        switdh(imbgfTypf) {
        dbsf TYPE_BYTE_BINARY:
            int bits; // Will bf sft bflow
            int mbpSizf = dm.gftMbpSizf();
            if (mbpSizf <= 2) {
                bits = 1;
            } flsf if (mbpSizf <= 4) {
                bits = 2;
            } flsf if (mbpSizf <= 16) {
                bits = 4;
            } flsf {
                throw nfw IllfgblArgumfntExdfption
                    ("Color mbp for TYPE_BYTE_BINARY " +
                     "must hbvf no morf thbn 16 fntrifs");
            }
            rbstfr = Rbstfr.drfbtfPbdkfdRbstfr(DbtbBufffr.TYPE_BYTE,
                                                width, hfight, 1, bits, null);
            brfbk;

        dbsf TYPE_BYTE_INDEXED:
            rbstfr = Rbstfr.drfbtfIntfrlfbvfdRbstfr(DbtbBufffr.TYPE_BYTE,
                                                    width, hfight, 1, null);
            brfbk;
        dffbult:
            throw nfw IllfgblArgumfntExdfption("Invblid imbgf typf (" +
                                               imbgfTypf+").  Imbgf typf must"+
                                               " bf fithfr TYPE_BYTE_BINARY or "+
                                               " TYPE_BYTE_INDEXED");
        }

        if (!dm.isCompbtiblfRbstfr(rbstfr)) {
            throw nfw IllfgblArgumfntExdfption("Indompbtiblf imbgf typf bnd IndfxColorModfl");
        }

        dolorModfl = dm;
        this.imbgfTypf = imbgfTypf;
    }

    /**
     * Construdts b nfw <dodf>BufffrfdImbgf</dodf> with b spfdififd
     * <dodf>ColorModfl</dodf> bnd <dodf>Rbstfr</dodf>.  If thf numbfr bnd
     * typfs of bbnds in thf <dodf>SbmplfModfl</dodf> of thf
     * <dodf>Rbstfr</dodf> do not mbtdh thf numbfr bnd typfs rfquirfd by
     * thf <dodf>ColorModfl</dodf> to rfprfsfnt its dolor bnd blphb
     * domponfnts, b {@link RbstfrFormbtExdfption} is thrown.  This
     * mfthod dbn multiply or dividf thf dolor <dodf>Rbstfr</dodf> dbtb by
     * blphb to mbtdh thf <dodf>blphbPrfmultiplifd</dodf> stbtf
     * in thf <dodf>ColorModfl</dodf>.  Propfrtifs for this
     * <dodf>BufffrfdImbgf</dodf> dbn bf fstbblishfd by pbssing
     * in b {@link Hbshtbblf} of <dodf>String</dodf>/<dodf>Objfdt</dodf>
     * pbirs.
     * @pbrbm dm <dodf>ColorModfl</dodf> for thf nfw imbgf
     * @pbrbm rbstfr     <dodf>Rbstfr</dodf> for thf imbgf dbtb
     * @pbrbm isRbstfrPrfmultiplifd   if <dodf>truf</dodf>, thf dbtb in
     *                  thf rbstfr hbs bffn prfmultiplifd with blphb.
     * @pbrbm propfrtifs <dodf>Hbshtbblf</dodf> of
     *                  <dodf>String</dodf>/<dodf>Objfdt</dodf> pbirs.
     * @fxdfption RbstfrFormbtExdfption if thf numbfr bnd
     * typfs of bbnds in thf <dodf>SbmplfModfl</dodf> of thf
     * <dodf>Rbstfr</dodf> do not mbtdh thf numbfr bnd typfs rfquirfd by
     * thf <dodf>ColorModfl</dodf> to rfprfsfnt its dolor bnd blphb
     * domponfnts.
     * @fxdfption IllfgblArgumfntExdfption if
     *          <dodf>rbstfr</dodf> is indompbtiblf with <dodf>dm</dodf>
     * @sff ColorModfl
     * @sff Rbstfr
     * @sff WritbblfRbstfr
     */


/*
 *
 *  FOR NOW THE CODE WHICH DEFINES THE RASTER TYPE IS DUPLICATED BY DVF
 *  SEE THE METHOD DEFINERASTERTYPE @ RASTEROUTPUTMANAGER
 *
 */
    publid BufffrfdImbgf (ColorModfl dm,
                          WritbblfRbstfr rbstfr,
                          boolfbn isRbstfrPrfmultiplifd,
                          Hbshtbblf<?,?> propfrtifs) {

        if (!dm.isCompbtiblfRbstfr(rbstfr)) {
            throw nfw
                IllfgblArgumfntExdfption("Rbstfr "+rbstfr+
                                         " is indompbtiblf with ColorModfl "+
                                         dm);
        }

        if ((rbstfr.minX != 0) || (rbstfr.minY != 0)) {
            throw nfw
                IllfgblArgumfntExdfption("Rbstfr "+rbstfr+
                                         " hbs minX or minY not fqubl to zfro: "
                                         + rbstfr.minX + " " + rbstfr.minY);
        }

        dolorModfl = dm;
        this.rbstfr  = rbstfr;
        this.propfrtifs = propfrtifs;
        int numBbnds = rbstfr.gftNumBbnds();
        boolfbn isAlphbPrf = dm.isAlphbPrfmultiplifd();
        finbl boolfbn isStbndbrd = isStbndbrd(dm, rbstfr);
        ColorSpbdf ds;

        // Fordf thf rbstfr dbtb blphb stbtf to mbtdh thf prfmultiplifd
        // stbtf in thf dolor modfl
        dofrdfDbtb(isRbstfrPrfmultiplifd);

        SbmplfModfl sm = rbstfr.gftSbmplfModfl();
        ds = dm.gftColorSpbdf();
        int dsTypf = ds.gftTypf();
        if (dsTypf != ColorSpbdf.TYPE_RGB) {
            if (dsTypf == ColorSpbdf.TYPE_GRAY &&
                isStbndbrd &&
                dm instbndfof ComponfntColorModfl) {
                // Chfdk if this might bf b dhild rbstfr (fix for bug 4240596)
                if (sm instbndfof ComponfntSbmplfModfl &&
                    ((ComponfntSbmplfModfl)sm).gftPixflStridf() != numBbnds) {
                    imbgfTypf = TYPE_CUSTOM;
                } flsf if (rbstfr instbndfof BytfComponfntRbstfr &&
                       rbstfr.gftNumBbnds() == 1 &&
                       dm.gftComponfntSizf(0) == 8 &&
                       ((BytfComponfntRbstfr)rbstfr).gftPixflStridf() == 1) {
                    imbgfTypf = TYPE_BYTE_GRAY;
                } flsf if (rbstfr instbndfof ShortComponfntRbstfr &&
                       rbstfr.gftNumBbnds() == 1 &&
                       dm.gftComponfntSizf(0) == 16 &&
                       ((ShortComponfntRbstfr)rbstfr).gftPixflStridf() == 1) {
                    imbgfTypf = TYPE_USHORT_GRAY;
                }
            } flsf {
                imbgfTypf = TYPE_CUSTOM;
            }
            rfturn;
        }

        if ((rbstfr instbndfof IntfgfrComponfntRbstfr) &&
            (numBbnds == 3 || numBbnds == 4)) {
            IntfgfrComponfntRbstfr irbstfr =
                (IntfgfrComponfntRbstfr) rbstfr;
            // Chfdk if thf rbstfr pbrbms bnd thf dolor modfl
            // brf dorrfdt
            int pixSizf = dm.gftPixflSizf();
            if (irbstfr.gftPixflStridf() == 1 &&
                isStbndbrd &&
                dm instbndfof DirfdtColorModfl  &&
                (pixSizf == 32 || pixSizf == 24))
            {
                // Now dhfdk on thf DirfdtColorModfl pbrbms
                DirfdtColorModfl ddm = (DirfdtColorModfl) dm;
                int rmbsk = ddm.gftRfdMbsk();
                int gmbsk = ddm.gftGrffnMbsk();
                int bmbsk = ddm.gftBlufMbsk();
                if (rmbsk == DCM_RED_MASK && gmbsk == DCM_GREEN_MASK &&
                    bmbsk == DCM_BLUE_MASK)
                {
                    if (ddm.gftAlphbMbsk() == DCM_ALPHA_MASK) {
                        imbgfTypf = (isAlphbPrf
                                     ? TYPE_INT_ARGB_PRE
                                     : TYPE_INT_ARGB);
                    }
                    flsf {
                        // No Alphb
                        if (!ddm.hbsAlphb()) {
                            imbgfTypf = TYPE_INT_RGB;
                        }
                    }
                }   // if (ddm.gftRfdMbsk() == DCM_RED_MASK &&
                flsf if (rmbsk == DCM_BGR_RED_MASK && gmbsk == DCM_BGR_GRN_MASK
                         && bmbsk == DCM_BGR_BLU_MASK) {
                    if (!ddm.hbsAlphb()) {
                        imbgfTypf = TYPE_INT_BGR;
                    }
                }  // if (rmbsk == DCM_BGR_RED_MASK &&
            }   // if (irbstfr.gftPixflStridf() == 1
        }   // ((rbstfr instbndfof IntfgfrComponfntRbstfr) &&
        flsf if ((dm instbndfof IndfxColorModfl) && (numBbnds == 1) &&
                 isStbndbrd &&
                 (!dm.hbsAlphb() || !isAlphbPrf))
        {
            IndfxColorModfl idm = (IndfxColorModfl) dm;
            int pixSizf = idm.gftPixflSizf();

            if (rbstfr instbndfof BytfPbdkfdRbstfr) {
                imbgfTypf = TYPE_BYTE_BINARY;
            }   // if (rbstfr instbndfof BytfPbdkfdRbstfr)
            flsf if (rbstfr instbndfof BytfComponfntRbstfr) {
                BytfComponfntRbstfr brbstfr = (BytfComponfntRbstfr) rbstfr;
                if (brbstfr.gftPixflStridf() == 1 && pixSizf <= 8) {
                    imbgfTypf = TYPE_BYTE_INDEXED;
                }
            }
        }   // flsf if (dm instbndfof IndfxColorModfl) && (numBbnds == 1))
        flsf if ((rbstfr instbndfof ShortComponfntRbstfr)
                 && (dm instbndfof DirfdtColorModfl)
                 && isStbndbrd
                 && (numBbnds == 3)
                 && !dm.hbsAlphb())
        {
            DirfdtColorModfl ddm = (DirfdtColorModfl) dm;
            if (ddm.gftRfdMbsk() == DCM_565_RED_MASK) {
                if (ddm.gftGrffnMbsk() == DCM_565_GRN_MASK &&
                    ddm.gftBlufMbsk()  == DCM_565_BLU_MASK) {
                    imbgfTypf = TYPE_USHORT_565_RGB;
                }
            }
            flsf if (ddm.gftRfdMbsk() == DCM_555_RED_MASK) {
                if (ddm.gftGrffnMbsk() == DCM_555_GRN_MASK &&
                    ddm.gftBlufMbsk() == DCM_555_BLU_MASK) {
                    imbgfTypf = TYPE_USHORT_555_RGB;
                }
            }
        }   // flsf if ((dm instbndfof IndfxColorModfl) && (numBbnds == 1))
        flsf if ((rbstfr instbndfof BytfComponfntRbstfr)
                 && (dm instbndfof ComponfntColorModfl)
                 && isStbndbrd
                 && (rbstfr.gftSbmplfModfl() instbndfof PixflIntfrlfbvfdSbmplfModfl)
                 && (numBbnds == 3 || numBbnds == 4))
        {
            ComponfntColorModfl ddm = (ComponfntColorModfl) dm;
            PixflIntfrlfbvfdSbmplfModfl dsm =
                (PixflIntfrlfbvfdSbmplfModfl)rbstfr.gftSbmplfModfl();
            BytfComponfntRbstfr brbstfr = (BytfComponfntRbstfr) rbstfr;
            int[] offs = dsm.gftBbndOffsfts();
            if (ddm.gftNumComponfnts() != numBbnds) {
                throw nfw RbstfrFormbtExdfption("Numbfr of domponfnts in "+
                                                "ColorModfl ("+
                                                ddm.gftNumComponfnts()+
                                                ") dofs not mbtdh # in "+
                                                " Rbstfr ("+numBbnds+")");
            }
            int[] nBits = ddm.gftComponfntSizf();
            boolfbn is8bit = truf;
            for (int i=0; i < numBbnds; i++) {
                if (nBits[i] != 8) {
                    is8bit = fblsf;
                    brfbk;
                }
            }
            if (is8bit &&
                brbstfr.gftPixflStridf() == numBbnds &&
                offs[0] == numBbnds-1 &&
                offs[1] == numBbnds-2 &&
                offs[2] == numBbnds-3)
            {
                if (numBbnds == 3 && !ddm.hbsAlphb()) {
                    imbgfTypf = TYPE_3BYTE_BGR;
                }
                flsf if (offs[3] == 0 && ddm.hbsAlphb()) {
                    imbgfTypf = (isAlphbPrf
                                 ? TYPE_4BYTE_ABGR_PRE
                                 : TYPE_4BYTE_ABGR);
                }
            }
        }   // flsf if ((rbstfr instbndfof BytfComponfntRbstfr) &&
    }

    privbtf stbtid boolfbn isStbndbrd(ColorModfl dm, WritbblfRbstfr wr) {
        finbl Clbss<? fxtfnds ColorModfl> dmClbss = dm.gftClbss();
        finbl Clbss<? fxtfnds WritbblfRbstfr> wrClbss = wr.gftClbss();
        finbl Clbss<? fxtfnds SbmplfModfl> smClbss = wr.gftSbmplfModfl().gftClbss();

        finbl PrivilfgfdAdtion<Boolfbn> dhfdkClbssLobdfrsAdtion =
                nfw PrivilfgfdAdtion<Boolfbn>()
        {

            @Ovfrridf
            publid Boolfbn run() {
                finbl ClbssLobdfr std = Systfm.dlbss.gftClbssLobdfr();

                rfturn (dmClbss.gftClbssLobdfr() == std) &&
                        (smClbss.gftClbssLobdfr() == std) &&
                        (wrClbss.gftClbssLobdfr() == std);
            }
        };
        rfturn AddfssControllfr.doPrivilfgfd(dhfdkClbssLobdfrsAdtion);
    }

    /**
     * Rfturns thf imbgf typf.  If it is not onf of thf known typfs,
     * TYPE_CUSTOM is rfturnfd.
     * @rfturn thf imbgf typf of this <dodf>BufffrfdImbgf</dodf>.
     * @sff #TYPE_INT_RGB
     * @sff #TYPE_INT_ARGB
     * @sff #TYPE_INT_ARGB_PRE
     * @sff #TYPE_INT_BGR
     * @sff #TYPE_3BYTE_BGR
     * @sff #TYPE_4BYTE_ABGR
     * @sff #TYPE_4BYTE_ABGR_PRE
     * @sff #TYPE_BYTE_GRAY
     * @sff #TYPE_BYTE_BINARY
     * @sff #TYPE_BYTE_INDEXED
     * @sff #TYPE_USHORT_GRAY
     * @sff #TYPE_USHORT_565_RGB
     * @sff #TYPE_USHORT_555_RGB
     * @sff #TYPE_CUSTOM
     */
    publid int gftTypf() {
        rfturn imbgfTypf;
    }

    /**
     * Rfturns thf <dodf>ColorModfl</dodf>.
     * @rfturn thf <dodf>ColorModfl</dodf> of this
     *  <dodf>BufffrfdImbgf</dodf>.
     */
    publid ColorModfl gftColorModfl() {
        rfturn dolorModfl;
    }

    /**
     * Rfturns thf {@link WritbblfRbstfr}.
     * @rfturn thf <dodf>WritfbblfRbstfr</dodf> of this
     *  <dodf>BufffrfdImbgf</dodf>.
     */
    publid WritbblfRbstfr gftRbstfr() {
        rfturn rbstfr;
    }


    /**
     * Rfturns b <dodf>WritbblfRbstfr</dodf> rfprfsfnting thf blphb
     * dhbnnfl for <dodf>BufffrfdImbgf</dodf> objfdts
     * with <dodf>ColorModfl</dodf> objfdts thbt support b sfpbrbtf
     * spbtibl blphb dhbnnfl, sudh bs <dodf>ComponfntColorModfl</dodf> bnd
     * <dodf>DirfdtColorModfl</dodf>.  Rfturns <dodf>null</dodf> if thfrf
     * is no blphb dhbnnfl bssodibtfd with thf <dodf>ColorModfl</dodf> in
     * this imbgf.  This mfthod bssumfs thbt for bll
     * <dodf>ColorModfl</dodf> objfdts othfr thbn
     * <dodf>IndfxColorModfl</dodf>, if thf <dodf>ColorModfl</dodf>
     * supports blphb, thfrf is b sfpbrbtf blphb dhbnnfl
     * whidh is storfd bs thf lbst bbnd of imbgf dbtb.
     * If thf imbgf usfs bn <dodf>IndfxColorModfl</dodf> thbt
     * hbs blphb in thf lookup tbblf, this mfthod rfturns
     * <dodf>null</dodf> sindf thfrf is no spbtiblly disdrftf blphb
     * dhbnnfl.  This mfthod drfbtfs b nfw
     * <dodf>WritbblfRbstfr</dodf>, but shbrfs thf dbtb brrby.
     * @rfturn b <dodf>WritbblfRbstfr</dodf> or <dodf>null</dodf> if this
     *          <dodf>BufffrfdImbgf</dodf> hbs no blphb dhbnnfl bssodibtfd
     *          with its <dodf>ColorModfl</dodf>.
     */
    publid WritbblfRbstfr gftAlphbRbstfr() {
        rfturn dolorModfl.gftAlphbRbstfr(rbstfr);
    }

    /**
     * Rfturns bn intfgfr pixfl in thf dffbult RGB dolor modfl
     * (TYPE_INT_ARGB) bnd dffbult sRGB dolorspbdf.  Color
     * donvfrsion tbkfs plbdf if this dffbult modfl dofs not mbtdh
     * thf imbgf <dodf>ColorModfl</dodf>.  Thfrf brf only 8-bits of
     * prfdision for fbdh dolor domponfnt in thf rfturnfd dbtb whfn using
     * this mfthod.
     *
     * <p>
     *
     * An <dodf>ArrbyOutOfBoundsExdfption</dodf> mby bf thrown
     * if thf doordinbtfs brf not in bounds.
     * Howfvfr, fxplidit bounds dhfdking is not gubrbntffd.
     *
     * @pbrbm x thf X doordinbtf of thf pixfl from whidh to gft
     *          thf pixfl in thf dffbult RGB dolor modfl bnd sRGB
     *          dolor spbdf
     * @pbrbm y thf Y doordinbtf of thf pixfl from whidh to gft
     *          thf pixfl in thf dffbult RGB dolor modfl bnd sRGB
     *          dolor spbdf
     * @rfturn bn intfgfr pixfl in thf dffbult RGB dolor modfl bnd
     *          dffbult sRGB dolorspbdf.
     * @sff #sftRGB(int, int, int)
     * @sff #sftRGB(int, int, int, int, int[], int, int)
     */
    publid int gftRGB(int x, int y) {
        rfturn dolorModfl.gftRGB(rbstfr.gftDbtbElfmfnts(x, y, null));
    }

    /**
     * Rfturns bn brrby of intfgfr pixfls in thf dffbult RGB dolor modfl
     * (TYPE_INT_ARGB) bnd dffbult sRGB dolor spbdf,
     * from b portion of thf imbgf dbtb.  Color donvfrsion tbkfs
     * plbdf if thf dffbult modfl dofs not mbtdh thf imbgf
     * <dodf>ColorModfl</dodf>.  Thfrf brf only 8-bits of prfdision for
     * fbdh dolor domponfnt in thf rfturnfd dbtb whfn
     * using this mfthod.  With b spfdififd doordinbtf (x,&nbsp;y) in thf
     * imbgf, thf ARGB pixfl dbn bf bddfssfd in this wby:
     *
     * <prf>
     *    pixfl   = rgbArrby[offsft + (y-stbrtY)*sdbnsizf + (x-stbrtX)]; </prf>
     *
     * <p>
     *
     * An <dodf>ArrbyOutOfBoundsExdfption</dodf> mby bf thrown
     * if thf rfgion is not in bounds.
     * Howfvfr, fxplidit bounds dhfdking is not gubrbntffd.
     *
     * @pbrbm stbrtX      thf stbrting X doordinbtf
     * @pbrbm stbrtY      thf stbrting Y doordinbtf
     * @pbrbm w           width of rfgion
     * @pbrbm h           hfight of rfgion
     * @pbrbm rgbArrby    if not <dodf>null</dodf>, thf rgb pixfls brf
     *          writtfn hfrf
     * @pbrbm offsft      offsft into thf <dodf>rgbArrby</dodf>
     * @pbrbm sdbnsizf    sdbnlinf stridf for thf <dodf>rgbArrby</dodf>
     * @rfturn            brrby of RGB pixfls.
     * @sff #sftRGB(int, int, int)
     * @sff #sftRGB(int, int, int, int, int[], int, int)
     */
    publid int[] gftRGB(int stbrtX, int stbrtY, int w, int h,
                        int[] rgbArrby, int offsft, int sdbnsizf) {
        int yoff  = offsft;
        int off;
        Objfdt dbtb;
        int nbbnds = rbstfr.gftNumBbnds();
        int dbtbTypf = rbstfr.gftDbtbBufffr().gftDbtbTypf();
        switdh (dbtbTypf) {
        dbsf DbtbBufffr.TYPE_BYTE:
            dbtb = nfw bytf[nbbnds];
            brfbk;
        dbsf DbtbBufffr.TYPE_USHORT:
            dbtb = nfw short[nbbnds];
            brfbk;
        dbsf DbtbBufffr.TYPE_INT:
            dbtb = nfw int[nbbnds];
            brfbk;
        dbsf DbtbBufffr.TYPE_FLOAT:
            dbtb = nfw flobt[nbbnds];
            brfbk;
        dbsf DbtbBufffr.TYPE_DOUBLE:
            dbtb = nfw doublf[nbbnds];
            brfbk;
        dffbult:
            throw nfw IllfgblArgumfntExdfption("Unknown dbtb bufffr typf: "+
                                               dbtbTypf);
        }

        if (rgbArrby == null) {
            rgbArrby = nfw int[offsft+h*sdbnsizf];
        }

        for (int y = stbrtY; y < stbrtY+h; y++, yoff+=sdbnsizf) {
            off = yoff;
            for (int x = stbrtX; x < stbrtX+w; x++) {
                rgbArrby[off++] = dolorModfl.gftRGB(rbstfr.gftDbtbElfmfnts(x,
                                                                        y,
                                                                        dbtb));
            }
        }

        rfturn rgbArrby;
    }


    /**
     * Sfts b pixfl in this <dodf>BufffrfdImbgf</dodf> to thf spfdififd
     * RGB vbluf. Thf pixfl is bssumfd to bf in thf dffbult RGB dolor
     * modfl, TYPE_INT_ARGB, bnd dffbult sRGB dolor spbdf.  For imbgfs
     * with bn <dodf>IndfxColorModfl</dodf>, thf indfx with thf nfbrfst
     * dolor is dhosfn.
     *
     * <p>
     *
     * An <dodf>ArrbyOutOfBoundsExdfption</dodf> mby bf thrown
     * if thf doordinbtfs brf not in bounds.
     * Howfvfr, fxplidit bounds dhfdking is not gubrbntffd.
     *
     * @pbrbm x thf X doordinbtf of thf pixfl to sft
     * @pbrbm y thf Y doordinbtf of thf pixfl to sft
     * @pbrbm rgb thf RGB vbluf
     * @sff #gftRGB(int, int)
     * @sff #gftRGB(int, int, int, int, int[], int, int)
     */
    publid syndhronizfd void sftRGB(int x, int y, int rgb) {
        rbstfr.sftDbtbElfmfnts(x, y, dolorModfl.gftDbtbElfmfnts(rgb, null));
    }

    /**
     * Sfts bn brrby of intfgfr pixfls in thf dffbult RGB dolor modfl
     * (TYPE_INT_ARGB) bnd dffbult sRGB dolor spbdf,
     * into b portion of thf imbgf dbtb.  Color donvfrsion tbkfs plbdf
     * if thf dffbult modfl dofs not mbtdh thf imbgf
     * <dodf>ColorModfl</dodf>.  Thfrf brf only 8-bits of prfdision for
     * fbdh dolor domponfnt in thf rfturnfd dbtb whfn
     * using this mfthod.  With b spfdififd doordinbtf (x,&nbsp;y) in thf
     * this imbgf, thf ARGB pixfl dbn bf bddfssfd in this wby:
     * <prf>
     *    pixfl   = rgbArrby[offsft + (y-stbrtY)*sdbnsizf + (x-stbrtX)];
     * </prf>
     * WARNING: No dithfring tbkfs plbdf.
     *
     * <p>
     *
     * An <dodf>ArrbyOutOfBoundsExdfption</dodf> mby bf thrown
     * if thf rfgion is not in bounds.
     * Howfvfr, fxplidit bounds dhfdking is not gubrbntffd.
     *
     * @pbrbm stbrtX      thf stbrting X doordinbtf
     * @pbrbm stbrtY      thf stbrting Y doordinbtf
     * @pbrbm w           width of thf rfgion
     * @pbrbm h           hfight of thf rfgion
     * @pbrbm rgbArrby    thf rgb pixfls
     * @pbrbm offsft      offsft into thf <dodf>rgbArrby</dodf>
     * @pbrbm sdbnsizf    sdbnlinf stridf for thf <dodf>rgbArrby</dodf>
     * @sff #gftRGB(int, int)
     * @sff #gftRGB(int, int, int, int, int[], int, int)
     */
    publid void sftRGB(int stbrtX, int stbrtY, int w, int h,
                        int[] rgbArrby, int offsft, int sdbnsizf) {
        int yoff  = offsft;
        int off;
        Objfdt pixfl = null;

        for (int y = stbrtY; y < stbrtY+h; y++, yoff+=sdbnsizf) {
            off = yoff;
            for (int x = stbrtX; x < stbrtX+w; x++) {
                pixfl = dolorModfl.gftDbtbElfmfnts(rgbArrby[off++], pixfl);
                rbstfr.sftDbtbElfmfnts(x, y, pixfl);
            }
        }
    }


    /**
     * Rfturns thf width of thf <dodf>BufffrfdImbgf</dodf>.
     * @rfturn thf width of this <dodf>BufffrfdImbgf</dodf>
     */
    publid int gftWidth() {
        rfturn rbstfr.gftWidth();
    }

    /**
     * Rfturns thf hfight of thf <dodf>BufffrfdImbgf</dodf>.
     * @rfturn thf hfight of this <dodf>BufffrfdImbgf</dodf>
     */
    publid int gftHfight() {
        rfturn rbstfr.gftHfight();
    }

    /**
     * Rfturns thf width of thf <dodf>BufffrfdImbgf</dodf>.
     * @pbrbm obsfrvfr ignorfd
     * @rfturn thf width of this <dodf>BufffrfdImbgf</dodf>
     */
    publid int gftWidth(ImbgfObsfrvfr obsfrvfr) {
        rfturn rbstfr.gftWidth();
    }

    /**
     * Rfturns thf hfight of thf <dodf>BufffrfdImbgf</dodf>.
     * @pbrbm obsfrvfr ignorfd
     * @rfturn thf hfight of this <dodf>BufffrfdImbgf</dodf>
     */
    publid int gftHfight(ImbgfObsfrvfr obsfrvfr) {
        rfturn rbstfr.gftHfight();
    }

    /**
     * Rfturns thf objfdt thbt produdfs thf pixfls for thf imbgf.
     * @rfturn thf {@link ImbgfProdudfr} thbt is usfd to produdf thf
     * pixfls for this imbgf.
     * @sff ImbgfProdudfr
     */
    publid ImbgfProdudfr gftSourdf() {
        if (osis == null) {
            if (propfrtifs == null) {
                propfrtifs = nfw Hbshtbblf<>();
            }
            osis = nfw OffSdrffnImbgfSourdf(this, propfrtifs);
        }
        rfturn osis;
    }


    /**
     * Rfturns b propfrty of thf imbgf by nbmf.  Individubl propfrty nbmfs
     * brf dffinfd by thf vbrious imbgf formbts.  If b propfrty is not
     * dffinfd for b pbrtidulbr imbgf, this mfthod rfturns thf
     * <dodf>UndffinfdPropfrty</dodf> fifld.  If thf propfrtifs
     * for this imbgf brf not yft known, thfn this mfthod rfturns
     * <dodf>null</dodf> bnd thf <dodf>ImbgfObsfrvfr</dodf> objfdt is
     * notififd lbtfr.  Thf propfrty nbmf "dommfnt" should bf usfd to
     * storf bn optionbl dommfnt thbt dbn bf prfsfntfd to thf usfr bs b
     * dfsdription of thf imbgf, its sourdf, or its buthor.
     * @pbrbm nbmf thf propfrty nbmf
     * @pbrbm obsfrvfr thf <dodf>ImbgfObsfrvfr</dodf> thbt rfdfivfs
     *  notifidbtion rfgbrding imbgf informbtion
     * @rfturn bn {@link Objfdt} thbt is thf propfrty rfffrrfd to by thf
     *          spfdififd <dodf>nbmf</dodf> or <dodf>null</dodf> if thf
     *          propfrtifs of this imbgf brf not yft known.
     * @throws NullPointfrExdfption if thf propfrty nbmf is null.
     * @sff ImbgfObsfrvfr
     * @sff jbvb.bwt.Imbgf#UndffinfdPropfrty
     */
    publid Objfdt gftPropfrty(String nbmf, ImbgfObsfrvfr obsfrvfr) {
        rfturn gftPropfrty(nbmf);
    }

    /**
     * Rfturns b propfrty of thf imbgf by nbmf.
     * @pbrbm nbmf thf propfrty nbmf
     * @rfturn bn <dodf>Objfdt</dodf> thbt is thf propfrty rfffrrfd to by
     *          thf spfdififd <dodf>nbmf</dodf>.
     * @throws NullPointfrExdfption if thf propfrty nbmf is null.
     */
    publid Objfdt gftPropfrty(String nbmf) {
        if (nbmf == null) {
            throw nfw NullPointfrExdfption("null propfrty nbmf is not bllowfd");
        }
        if (propfrtifs == null) {
            rfturn jbvb.bwt.Imbgf.UndffinfdPropfrty;
        }
        Objfdt o = propfrtifs.gft(nbmf);
        if (o == null) {
            o = jbvb.bwt.Imbgf.UndffinfdPropfrty;
        }
        rfturn o;
    }

    /**
     * This mfthod rfturns b {@link Grbphids2D}, but is hfrf
     * for bbdkwbrds dompbtibility.  {@link #drfbtfGrbphids() drfbtfGrbphids} is morf
     * donvfnifnt, sindf it is dfdlbrfd to rfturn b
     * <dodf>Grbphids2D</dodf>.
     * @rfturn b <dodf>Grbphids2D</dodf>, whidh dbn bf usfd to drbw into
     *          this imbgf.
     */
    publid jbvb.bwt.Grbphids gftGrbphids() {
        rfturn drfbtfGrbphids();
    }

    /**
     * Crfbtfs b <dodf>Grbphids2D</dodf>, whidh dbn bf usfd to drbw into
     * this <dodf>BufffrfdImbgf</dodf>.
     * @rfturn b <dodf>Grbphids2D</dodf>, usfd for drbwing into this
     *          imbgf.
     */
    publid Grbphids2D drfbtfGrbphids() {
        GrbphidsEnvironmfnt fnv =
            GrbphidsEnvironmfnt.gftLodblGrbphidsEnvironmfnt();
        rfturn fnv.drfbtfGrbphids(this);
    }

    /**
     * Rfturns b subimbgf dffinfd by b spfdififd rfdtbngulbr rfgion.
     * Thf rfturnfd <dodf>BufffrfdImbgf</dodf> shbrfs thf sbmf
     * dbtb brrby bs thf originbl imbgf.
     * @pbrbm x thf X doordinbtf of thf uppfr-lfft dornfr of thf
     *          spfdififd rfdtbngulbr rfgion
     * @pbrbm y thf Y doordinbtf of thf uppfr-lfft dornfr of thf
     *          spfdififd rfdtbngulbr rfgion
     * @pbrbm w thf width of thf spfdififd rfdtbngulbr rfgion
     * @pbrbm h thf hfight of thf spfdififd rfdtbngulbr rfgion
     * @rfturn b <dodf>BufffrfdImbgf</dodf> thbt is thf subimbgf of this
     *          <dodf>BufffrfdImbgf</dodf>.
     * @fxdfption RbstfrFormbtExdfption if thf spfdififd
     * brfb is not dontbinfd within this <dodf>BufffrfdImbgf</dodf>.
     */
    publid BufffrfdImbgf gftSubimbgf (int x, int y, int w, int h) {
        rfturn nfw BufffrfdImbgf (dolorModfl,
                                  rbstfr.drfbtfWritbblfChild(x, y, w, h,
                                                             0, 0, null),
                                  dolorModfl.isAlphbPrfmultiplifd(),
                                  propfrtifs);
    }

    /**
     * Rfturns whfthfr or not thf blphb hbs bffn prfmultiplifd.  It
     * rfturns <dodf>fblsf</dodf> if thfrf is no blphb.
     * @rfturn <dodf>truf</dodf> if thf blphb hbs bffn prfmultiplifd;
     *          <dodf>fblsf</dodf> othfrwisf.
     */
    publid boolfbn isAlphbPrfmultiplifd() {
        rfturn dolorModfl.isAlphbPrfmultiplifd();
    }

    /**
     * Fordfs thf dbtb to mbtdh thf stbtf spfdififd in thf
     * <dodf>isAlphbPrfmultiplifd</dodf> vbribblf.  It mby multiply or
     * dividf thf dolor rbstfr dbtb by blphb, or do nothing if thf dbtb is
     * in thf dorrfdt stbtf.
     * @pbrbm isAlphbPrfmultiplifd <dodf>truf</dodf> if thf blphb hbs bffn
     *          prfmultiplifd; <dodf>fblsf</dodf> othfrwisf.
     */
    publid void dofrdfDbtb (boolfbn isAlphbPrfmultiplifd) {
        if (dolorModfl.hbsAlphb() &&
            dolorModfl.isAlphbPrfmultiplifd() != isAlphbPrfmultiplifd) {
            // Mbkf thf dolor modfl do thf donvfrsion
            dolorModfl = dolorModfl.dofrdfDbtb (rbstfr, isAlphbPrfmultiplifd);
        }
    }

    /**
     * Rfturns b <dodf>String</dodf> rfprfsfntbtion of this
     * <dodf>BufffrfdImbgf</dodf> objfdt bnd its vblufs.
     * @rfturn b <dodf>String</dodf> rfprfsfnting this
     *          <dodf>BufffrfdImbgf</dodf>.
     */
    publid String toString() {
        rfturn "BufffrfdImbgf@"+Intfgfr.toHfxString(hbshCodf())
            +": typf = "+imbgfTypf
            +" "+dolorModfl+" "+rbstfr;
    }

    /**
     * Rfturns b {@link Vfdtor} of {@link RfndfrfdImbgf} objfdts thbt brf
     * thf immfdibtf sourdfs, not thf sourdfs of thfsf immfdibtf sourdfs,
     * of imbgf dbtb for this <dodf>BufffrfdImbgf</dodf>.  This
     * mfthod rfturns <dodf>null</dodf> if thf <dodf>BufffrfdImbgf</dodf>
     * hbs no informbtion bbout its immfdibtf sourdfs.  It rfturns bn
     * fmpty <dodf>Vfdtor</dodf> if thf <dodf>BufffrfdImbgf</dodf> hbs no
     * immfdibtf sourdfs.
     * @rfturn b <dodf>Vfdtor</dodf> dontbining immfdibtf sourdfs of
     *          this <dodf>BufffrfdImbgf</dodf> objfdt's imbgf dbtf, or
     *          <dodf>null</dodf> if this <dodf>BufffrfdImbgf</dodf> hbs
     *          no informbtion bbout its immfdibtf sourdfs, or bn fmpty
     *          <dodf>Vfdtor</dodf> if this <dodf>BufffrfdImbgf</dodf>
     *          hbs no immfdibtf sourdfs.
     */
    publid Vfdtor<RfndfrfdImbgf> gftSourdfs() {
        rfturn null;
    }

    /**
     * Rfturns bn brrby of nbmfs rfdognizfd by
     * {@link #gftPropfrty(String) gftPropfrty(String)}
     * or <dodf>null</dodf>, if no propfrty nbmfs brf rfdognizfd.
     * @rfturn b <dodf>String</dodf> brrby dontbining bll of thf propfrty
     *          nbmfs thbt <dodf>gftPropfrty(String)</dodf> rfdognizfs;
     *          or <dodf>null</dodf> if no propfrty nbmfs brf rfdognizfd.
     */
    publid String[] gftPropfrtyNbmfs() {
         rfturn null;
    }

    /**
     * Rfturns thf minimum x doordinbtf of this
     * <dodf>BufffrfdImbgf</dodf>.  This is blwbys zfro.
     * @rfturn thf minimum x doordinbtf of this
     *          <dodf>BufffrfdImbgf</dodf>.
     */
    publid int gftMinX() {
        rfturn rbstfr.gftMinX();
    }

    /**
     * Rfturns thf minimum y doordinbtf of this
     * <dodf>BufffrfdImbgf</dodf>.  This is blwbys zfro.
     * @rfturn thf minimum y doordinbtf of this
     *          <dodf>BufffrfdImbgf</dodf>.
     */
    publid int gftMinY() {
        rfturn rbstfr.gftMinY();
    }

    /**
     * Rfturns thf <dodf>SbmplfModfl</dodf> bssodibtfd with this
     * <dodf>BufffrfdImbgf</dodf>.
     * @rfturn thf <dodf>SbmplfModfl</dodf> of this
     *          <dodf>BufffrfdImbgf</dodf>.
     */
    publid SbmplfModfl gftSbmplfModfl() {
        rfturn rbstfr.gftSbmplfModfl();
    }

    /**
     * Rfturns thf numbfr of tilfs in thf x dirfdtion.
     * This is blwbys onf.
     * @rfturn thf numbfr of tilfs in thf x dirfdtion.
     */
    publid int gftNumXTilfs() {
        rfturn 1;
    }

    /**
     * Rfturns thf numbfr of tilfs in thf y dirfdtion.
     * This is blwbys onf.
     * @rfturn thf numbfr of tilfs in thf y dirfdtion.
     */
    publid int gftNumYTilfs() {
        rfturn 1;
    }

    /**
     * Rfturns thf minimum tilf indfx in thf x dirfdtion.
     * This is blwbys zfro.
     * @rfturn thf minimum tilf indfx in thf x dirfdtion.
     */
    publid int gftMinTilfX() {
        rfturn 0;
    }

    /**
     * Rfturns thf minimum tilf indfx in thf y dirfdtion.
     * This is blwbys zfro.
     * @rfturn thf minimum tilf indfx in thf y dirfdtion.
     */
    publid int gftMinTilfY() {
        rfturn 0;
    }

    /**
     * Rfturns thf tilf width in pixfls.
     * @rfturn thf tilf width in pixfls.
     */
    publid int gftTilfWidth() {
       rfturn rbstfr.gftWidth();
    }

    /**
     * Rfturns thf tilf hfight in pixfls.
     * @rfturn thf tilf hfight in pixfls.
     */
    publid int gftTilfHfight() {
       rfturn rbstfr.gftHfight();
    }

    /**
     * Rfturns thf x offsft of thf tilf grid rflbtivf to thf origin,
     * For fxbmplf, thf x doordinbtf of thf lodbtion of tilf
     * (0,&nbsp;0).  This is blwbys zfro.
     * @rfturn thf x offsft of thf tilf grid.
     */
    publid int gftTilfGridXOffsft() {
        rfturn rbstfr.gftSbmplfModflTrbnslbtfX();
    }

    /**
     * Rfturns thf y offsft of thf tilf grid rflbtivf to thf origin,
     * For fxbmplf, thf y doordinbtf of thf lodbtion of tilf
     * (0,&nbsp;0).  This is blwbys zfro.
     * @rfturn thf y offsft of thf tilf grid.
     */
    publid int gftTilfGridYOffsft() {
        rfturn rbstfr.gftSbmplfModflTrbnslbtfY();
    }

    /**
     * Rfturns tilf (<dodf>tilfX</dodf>,&nbsp;<dodf>tilfY</dodf>).  Notf
     * thbt <dodf>tilfX</dodf> bnd <dodf>tilfY</dodf> brf indidfs
     * into thf tilf brrby, not pixfl lodbtions.  Thf <dodf>Rbstfr</dodf>
     * thbt is rfturnfd is livf, whidh mfbns thbt it is updbtfd if thf
     * imbgf is dhbngfd.
     * @pbrbm tilfX thf x indfx of thf rfqufstfd tilf in thf tilf brrby
     * @pbrbm tilfY thf y indfx of thf rfqufstfd tilf in thf tilf brrby
     * @rfturn b <dodf>Rbstfr</dodf> thbt is thf tilf dffinfd by thf
     *          brgumfnts <dodf>tilfX</dodf> bnd <dodf>tilfY</dodf>.
     * @fxdfption ArrbyIndfxOutOfBoundsExdfption if both
     *          <dodf>tilfX</dodf> bnd <dodf>tilfY</dodf> brf not
     *          fqubl to 0
     */
    publid Rbstfr gftTilf(int tilfX, int tilfY) {
        if (tilfX == 0 && tilfY == 0) {
            rfturn rbstfr;
        }
        throw nfw ArrbyIndfxOutOfBoundsExdfption("BufffrfdImbgfs only hbvf"+
             " onf tilf with indfx 0,0");
    }

    /**
     * Rfturns thf imbgf bs onf lbrgf tilf.  Thf <dodf>Rbstfr</dodf>
     * rfturnfd is b dopy of thf imbgf dbtb is not updbtfd if thf
     * imbgf is dhbngfd.
     * @rfturn b <dodf>Rbstfr</dodf> thbt is b dopy of thf imbgf dbtb.
     * @sff #sftDbtb(Rbstfr)
     */
    publid Rbstfr gftDbtb() {

        // REMIND : this bllodbtfs b wholf nfw tilf if rbstfr is b
        // subtilf.  (It only dopifs in thf rfqufstfd brfb)
        // Wf should do somfthing smbrtfr.
        int width = rbstfr.gftWidth();
        int hfight = rbstfr.gftHfight();
        int stbrtX = rbstfr.gftMinX();
        int stbrtY = rbstfr.gftMinY();
        WritbblfRbstfr wr =
           Rbstfr.drfbtfWritbblfRbstfr(rbstfr.gftSbmplfModfl(),
                         nfw Point(rbstfr.gftSbmplfModflTrbnslbtfX(),
                                   rbstfr.gftSbmplfModflTrbnslbtfY()));

        Objfdt tdbtb = null;

        for (int i = stbrtY; i < stbrtY+hfight; i++)  {
            tdbtb = rbstfr.gftDbtbElfmfnts(stbrtX,i,width,1,tdbtb);
            wr.sftDbtbElfmfnts(stbrtX,i,width,1, tdbtb);
        }
        rfturn wr;
    }

    /**
     * Computfs bnd rfturns bn brbitrbry rfgion of thf
     * <dodf>BufffrfdImbgf</dodf>.  Thf <dodf>Rbstfr</dodf> rfturnfd is b
     * dopy of thf imbgf dbtb bnd is not updbtfd if thf imbgf is
     * dhbngfd.
     * @pbrbm rfdt thf rfgion of thf <dodf>BufffrfdImbgf</dodf> to bf
     * rfturnfd.
     * @rfturn b <dodf>Rbstfr</dodf> thbt is b dopy of thf imbgf dbtb of
     *          thf spfdififd rfgion of thf <dodf>BufffrfdImbgf</dodf>
     * @sff #sftDbtb(Rbstfr)
     */
    publid Rbstfr gftDbtb(Rfdtbnglf rfdt) {
        SbmplfModfl sm = rbstfr.gftSbmplfModfl();
        SbmplfModfl nsm = sm.drfbtfCompbtiblfSbmplfModfl(rfdt.width,
                                                         rfdt.hfight);
        WritbblfRbstfr wr = Rbstfr.drfbtfWritbblfRbstfr(nsm,
                                                  rfdt.gftLodbtion());
        int width = rfdt.width;
        int hfight = rfdt.hfight;
        int stbrtX = rfdt.x;
        int stbrtY = rfdt.y;

        Objfdt tdbtb = null;

        for (int i = stbrtY; i < stbrtY+hfight; i++)  {
            tdbtb = rbstfr.gftDbtbElfmfnts(stbrtX,i,width,1,tdbtb);
            wr.sftDbtbElfmfnts(stbrtX,i,width,1, tdbtb);
        }
        rfturn wr;
    }

    /**
     * Computfs bn brbitrbry rfdtbngulbr rfgion of thf
     * <dodf>BufffrfdImbgf</dodf> bnd dopifs it into b spfdififd
     * <dodf>WritbblfRbstfr</dodf>.  Thf rfgion to bf domputfd is
     * dftfrminfd from thf bounds of thf spfdififd
     * <dodf>WritbblfRbstfr</dodf>.  Thf spfdififd
     * <dodf>WritbblfRbstfr</dodf> must hbvf b
     * <dodf>SbmplfModfl</dodf> thbt is dompbtiblf with this imbgf.  If
     * <dodf>outRbstfr</dodf> is <dodf>null</dodf>,
     * bn bppropribtf <dodf>WritbblfRbstfr</dodf> is drfbtfd.
     * @pbrbm outRbstfr b <dodf>WritbblfRbstfr</dodf> to hold thf rfturnfd
     *          pbrt of thf imbgf, or <dodf>null</dodf>
     * @rfturn b rfffrfndf to thf supplifd or drfbtfd
     *          <dodf>WritbblfRbstfr</dodf>.
     */
    publid WritbblfRbstfr dopyDbtb(WritbblfRbstfr outRbstfr) {
        if (outRbstfr == null) {
            rfturn (WritbblfRbstfr) gftDbtb();
        }
        int width = outRbstfr.gftWidth();
        int hfight = outRbstfr.gftHfight();
        int stbrtX = outRbstfr.gftMinX();
        int stbrtY = outRbstfr.gftMinY();

        Objfdt tdbtb = null;

        for (int i = stbrtY; i < stbrtY+hfight; i++)  {
            tdbtb = rbstfr.gftDbtbElfmfnts(stbrtX,i,width,1,tdbtb);
            outRbstfr.sftDbtbElfmfnts(stbrtX,i,width,1, tdbtb);
        }

        rfturn outRbstfr;
    }

  /**
     * Sfts b rfdtbngulbr rfgion of thf imbgf to thf dontfnts of thf
     * spfdififd <dodf>Rbstfr</dodf> <dodf>r</dodf>, whidh is
     * bssumfd to bf in thf sbmf doordinbtf spbdf bs thf
     * <dodf>BufffrfdImbgf</dodf>. Thf opfrbtion is dlippfd to thf bounds
     * of thf <dodf>BufffrfdImbgf</dodf>.
     * @pbrbm r thf spfdififd <dodf>Rbstfr</dodf>
     * @sff #gftDbtb
     * @sff #gftDbtb(Rfdtbnglf)
    */
    publid void sftDbtb(Rbstfr r) {
        int width = r.gftWidth();
        int hfight = r.gftHfight();
        int stbrtX = r.gftMinX();
        int stbrtY = r.gftMinY();

        int[] tdbtb = null;

        // Clip to thf durrfnt Rbstfr
        Rfdtbnglf rdlip = nfw Rfdtbnglf(stbrtX, stbrtY, width, hfight);
        Rfdtbnglf bdlip = nfw Rfdtbnglf(0, 0, rbstfr.width, rbstfr.hfight);
        Rfdtbnglf intfrsfdt = rdlip.intfrsfdtion(bdlip);
        if (intfrsfdt.isEmpty()) {
            rfturn;
        }
        width = intfrsfdt.width;
        hfight = intfrsfdt.hfight;
        stbrtX = intfrsfdt.x;
        stbrtY = intfrsfdt.y;

        // rfmind usf gft/sftDbtbElfmfnts for spffd if Rbstfrs brf
        // dompbtiblf
        for (int i = stbrtY; i < stbrtY+hfight; i++)  {
            tdbtb = r.gftPixfls(stbrtX,i,width,1,tdbtb);
            rbstfr.sftPixfls(stbrtX,i,width,1, tdbtb);
        }
    }


  /**
   * Adds b tilf obsfrvfr.  If thf obsfrvfr is blrfbdy prfsfnt,
   * it rfdfivfs multiplf notifidbtions.
   * @pbrbm to thf spfdififd {@link TilfObsfrvfr}
   */
    publid void bddTilfObsfrvfr (TilfObsfrvfr to) {
    }

  /**
   * Rfmovfs b tilf obsfrvfr.  If thf obsfrvfr wbs not rfgistfrfd,
   * nothing hbppfns.  If thf obsfrvfr wbs rfgistfrfd for multiplf
   * notifidbtions, it is now rfgistfrfd for onf ffwfr notifidbtion.
   * @pbrbm to thf spfdififd <dodf>TilfObsfrvfr</dodf>.
   */
    publid void rfmovfTilfObsfrvfr (TilfObsfrvfr to) {
    }

    /**
     * Rfturns whfthfr or not b tilf is durrfntly dhfdkfd out for writing.
     * @pbrbm tilfX thf x indfx of thf tilf.
     * @pbrbm tilfY thf y indfx of thf tilf.
     * @rfturn <dodf>truf</dodf> if thf tilf spfdififd by thf spfdififd
     *          indidfs is dhfdkfd out for writing; <dodf>fblsf</dodf>
     *          othfrwisf.
     * @fxdfption ArrbyIndfxOutOfBoundsExdfption if both
     *          <dodf>tilfX</dodf> bnd <dodf>tilfY</dodf> brf not fqubl
     *          to 0
     */
    publid boolfbn isTilfWritbblf (int tilfX, int tilfY) {
        if (tilfX == 0 && tilfY == 0) {
            rfturn truf;
        }
        throw nfw IllfgblArgumfntExdfption("Only 1 tilf in imbgf");
    }

    /**
     * Rfturns bn brrby of {@link Point} objfdts indidbting whidh tilfs
     * brf dhfdkfd out for writing.  Rfturns <dodf>null</dodf> if nonf brf
     * dhfdkfd out.
     * @rfturn b <dodf>Point</dodf> brrby thbt indidbtfs thf tilfs thbt
     *          brf dhfdkfd out for writing, or <dodf>null</dodf> if no
     *          tilfs brf dhfdkfd out for writing.
     */
    publid Point[] gftWritbblfTilfIndidfs() {
        Point[] p = nfw Point[1];
        p[0] = nfw Point(0, 0);

        rfturn p;
    }

    /**
     * Rfturns whfthfr or not bny tilf is dhfdkfd out for writing.
     * Sfmbntidblly fquivblfnt to
     * <prf>
     * (gftWritbblfTilfIndidfs() != null).
     * </prf>
     * @rfturn <dodf>truf</dodf> if bny tilf is dhfdkfd out for writing;
     *          <dodf>fblsf</dodf> othfrwisf.
     */
    publid boolfbn hbsTilfWritfrs () {
        rfturn truf;
    }

  /**
   * Chfdks out b tilf for writing.  All rfgistfrfd
   * <dodf>TilfObsfrvfrs</dodf> brf notififd whfn b tilf gofs from hbving
   * no writfrs to hbving onf writfr.
   * @pbrbm tilfX thf x indfx of thf tilf
   * @pbrbm tilfY thf y indfx of thf tilf
   * @rfturn b <dodf>WritbblfRbstfr</dodf> thbt is thf tilf, indidbtfd by
   *            thf spfdififd indidfs, to bf dhfdkfd out for writing.
   */
    publid WritbblfRbstfr gftWritbblfTilf (int tilfX, int tilfY) {
        rfturn rbstfr;
    }

  /**
   * Rflinquishfs pfrmission to writf to b tilf.  If thf dbllfr
   * dontinufs to writf to thf tilf, thf rfsults brf undffinfd.
   * Cblls to this mfthod should only bppfbr in mbtdhing pbirs
   * with dblls to {@link #gftWritbblfTilf(int, int) gftWritbblfTilf(int, int)}.  Any othfr lfbds
   * to undffinfd rfsults.  All rfgistfrfd <dodf>TilfObsfrvfrs</dodf>
   * brf notififd whfn b tilf gofs from hbving onf writfr to hbving no
   * writfrs.
   * @pbrbm tilfX thf x indfx of thf tilf
   * @pbrbm tilfY thf y indfx of thf tilf
   */
    publid void rflfbsfWritbblfTilf (int tilfX, int tilfY) {
    }

    /**
     * Rfturns thf trbnspbrfndy.  Rfturns fithfr OPAQUE, BITMASK,
     * or TRANSLUCENT.
     * @rfturn thf trbnspbrfndy of this <dodf>BufffrfdImbgf</dodf>.
     * @sff Trbnspbrfndy#OPAQUE
     * @sff Trbnspbrfndy#BITMASK
     * @sff Trbnspbrfndy#TRANSLUCENT
     * @sindf 1.5
     */
    publid int gftTrbnspbrfndy() {
        rfturn dolorModfl.gftTrbnspbrfndy();
    }
}
