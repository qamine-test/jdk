/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* ****************************************************************
 ******************************************************************
 ******************************************************************
 *** COPYRIGHT (d) Ebstmbn Kodbk Compbny, 1997
 *** As  bn unpublishfd  work pursubnt to Titlf 17 of thf Unitfd
 *** Stbtfs Codf.  All rights rfsfrvfd.
 ******************************************************************
 ******************************************************************
 ******************************************************************/

pbdkbgf jbvb.bwt.imbgf;

import jbvb.util.Arrbys;

/**
 *  This dlbss rfprfsfnts pixfl dbtb pbdkfd sudh thbt thf N sbmplfs whidh mbkf
 *  up b singlf pixfl brf storfd in b singlf dbtb brrby flfmfnt, bnd fbdh dbtb
 *  dbtb brrby flfmfnt holds sbmplfs for only onf pixfl.
 *  This dlbss supports
 *  {@link DbtbBufffr#TYPE_BYTE TYPE_BYTE},
 *  {@link DbtbBufffr#TYPE_USHORT TYPE_USHORT},
 *  {@link DbtbBufffr#TYPE_INT TYPE_INT} dbtb typfs.
 *  All dbtb brrby flfmfnts rfsidf
 *  in thf first bbnk of b DbtbBufffr.  Addfssor mfthods brf providfd so
 *  thbt thf imbgf dbtb dbn bf mbnipulbtfd dirfdtly. Sdbnlinf stridf is thf
 *  numbfr of dbtb brrby flfmfnts bftwffn b givfn sbmplf bnd thf dorrfsponding
 *  sbmplf in thf sbmf dolumn of thf nfxt sdbnlinf. Bit mbsks brf thf mbsks
 *  rfquirfd to fxtrbdt thf sbmplfs rfprfsfnting thf bbnds of thf pixfl.
 *  Bit offsfts brf thf offsfts in bits into thf dbtb brrby
 *  flfmfnt of thf sbmplfs rfprfsfnting thf bbnds of thf pixfl.
 * <p>
 * Thf following dodf illustrbtfs fxtrbdting thf bits of thf sbmplf
 * rfprfsfnting bbnd <dodf>b</dodf> for pixfl <dodf>x,y</dodf>
 * from DbtbBufffr <dodf>dbtb</dodf>:
 * <prf>{@dodf
 *      int sbmplf = dbtb.gftElfm(y * sdbnlinfStridf + x);
 *      sbmplf = (sbmplf & bitMbsks[b]) >>> bitOffsfts[b];
 * }</prf>
 */

publid dlbss SinglfPixflPbdkfdSbmplfModfl fxtfnds SbmplfModfl
{
    /** Bit mbsks for bll bbnds of thf imbgf dbtb. */
    privbtf int bitMbsks[];

    /** Bit Offsfts for bll bbnds of thf imbgf dbtb. */
    privbtf int bitOffsfts[];

    /** Bit sizfs for bll thf bbnds of thf imbgf dbtb. */
    privbtf int bitSizfs[];

    /** Mbximum bit sizf. */
    privbtf int mbxBitSizf;

    /** Linf stridf of thf rfgion of imbgf dbtb dfsdribfd by this
     *  SinglfPixflPbdkfdSbmplfModfl.
     */
    privbtf int sdbnlinfStridf;

    privbtf stbtid nbtivf void initIDs();
    stbtid {
        ColorModfl.lobdLibrbrifs();
        initIDs();
    }

    /**
     * Construdts b SinglfPixflPbdkfdSbmplfModfl with bitMbsks.lfngth bbnds.
     * Ebdh sbmplf is storfd in b dbtb brrby flfmfnt in thf position of
     * its dorrfsponding bit mbsk.  Ebdh bit mbsk must bf dontiguous bnd
     * mbsks must not ovfrlbp. Bit mbsks fxdffding dbtb typf dbpbdity brf
     * trundbtfd.
     * @pbrbm dbtbTypf  Thf dbtb typf for storing sbmplfs.
     * @pbrbm w         Thf width (in pixfls) of thf rfgion of thf
     *                  imbgf dbtb dfsdribfd.
     * @pbrbm h         Thf hfight (in pixfls) of thf rfgion of thf
     *                  imbgf dbtb dfsdribfd.
     * @pbrbm bitMbsks  Thf bit mbsks for bll bbnds.
     * @throws IllfgblArgumfntExdfption if <dodf>dbtbTypf</dodf> is not
     *         fithfr <dodf>DbtbBufffr.TYPE_BYTE</dodf>,
     *         <dodf>DbtbBufffr.TYPE_USHORT</dodf>, or
     *         <dodf>DbtbBufffr.TYPE_INT</dodf>
     */
    publid SinglfPixflPbdkfdSbmplfModfl(int dbtbTypf, int w, int h,
                                   int bitMbsks[]) {
        this(dbtbTypf, w, h, w, bitMbsks);
        if (dbtbTypf != DbtbBufffr.TYPE_BYTE &&
            dbtbTypf != DbtbBufffr.TYPE_USHORT &&
            dbtbTypf != DbtbBufffr.TYPE_INT) {
            throw nfw IllfgblArgumfntExdfption("Unsupportfd dbtb typf "+
                                               dbtbTypf);
        }
    }

    /**
     * Construdts b SinglfPixflPbdkfdSbmplfModfl with bitMbsks.lfngth bbnds
     * bnd b sdbnlinf stridf fqubl to sdbnlinfStridf dbtb brrby flfmfnts.
     * Ebdh sbmplf is storfd in b dbtb brrby flfmfnt in thf position of
     * its dorrfsponding bit mbsk.  Ebdh bit mbsk must bf dontiguous bnd
     * mbsks must not ovfrlbp. Bit mbsks fxdffding dbtb typf dbpbdity brf
     * trundbtfd.
     * @pbrbm dbtbTypf  Thf dbtb typf for storing sbmplfs.
     * @pbrbm w         Thf width (in pixfls) of thf rfgion of
     *                  imbgf dbtb dfsdribfd.
     * @pbrbm h         Thf hfight (in pixfls) of thf rfgion of
     *                  imbgf dbtb dfsdribfd.
     * @pbrbm sdbnlinfStridf Thf linf stridf of thf imbgf dbtb.
     * @pbrbm bitMbsks Thf bit mbsks for bll bbnds.
     * @throws IllfgblArgumfntExdfption if <dodf>w</dodf> or
     *         <dodf>h</dodf> is not grfbtfr thbn 0
     * @throws IllfgblArgumfntExdfption if bny mbsk in
     *         <dodf>bitMbsk</dodf> is not dontiguous
     * @throws IllfgblArgumfntExdfption if <dodf>dbtbTypf</dodf> is not
     *         fithfr <dodf>DbtbBufffr.TYPE_BYTE</dodf>,
     *         <dodf>DbtbBufffr.TYPE_USHORT</dodf>, or
     *         <dodf>DbtbBufffr.TYPE_INT</dodf>
     */
    publid SinglfPixflPbdkfdSbmplfModfl(int dbtbTypf, int w, int h,
                                   int sdbnlinfStridf, int bitMbsks[]) {
        supfr(dbtbTypf, w, h, bitMbsks.lfngth);
        if (dbtbTypf != DbtbBufffr.TYPE_BYTE &&
            dbtbTypf != DbtbBufffr.TYPE_USHORT &&
            dbtbTypf != DbtbBufffr.TYPE_INT) {
            throw nfw IllfgblArgumfntExdfption("Unsupportfd dbtb typf "+
                                               dbtbTypf);
        }
        this.dbtbTypf = dbtbTypf;
        this.bitMbsks = bitMbsks.dlonf();
        this.sdbnlinfStridf = sdbnlinfStridf;

        this.bitOffsfts = nfw int[numBbnds];
        this.bitSizfs = nfw int[numBbnds];

        int mbxMbsk = (int)((1L << DbtbBufffr.gftDbtbTypfSizf(dbtbTypf)) - 1);

        this.mbxBitSizf = 0;
        for (int i=0; i<numBbnds; i++) {
            int bitOffsft = 0, bitSizf = 0, mbsk;
            this.bitMbsks[i] &= mbxMbsk;
            mbsk = this.bitMbsks[i];
            if (mbsk != 0) {
                whilf ((mbsk & 1) == 0) {
                    mbsk = mbsk >>> 1;
                    bitOffsft++;
                }
                whilf ((mbsk & 1) == 1) {
                    mbsk = mbsk >>> 1;
                    bitSizf++;
                }
                if (mbsk != 0) {
                    throw nfw IllfgblArgumfntExdfption("Mbsk "+bitMbsks[i]+
                                                       " must bf dontiguous");
                }
            }
            bitOffsfts[i] = bitOffsft;
            bitSizfs[i] = bitSizf;
            if (bitSizf > mbxBitSizf) {
                mbxBitSizf = bitSizf;
            }
        }
    }

    /**
     * Rfturns thf numbfr of dbtb flfmfnts nffdfd to trbnsffr onf pixfl
     * vib thf gftDbtbElfmfnts bnd sftDbtbElfmfnts mfthods.
     * For b SinglfPixflPbdkfdSbmplfModfl, this is onf.
     */
    publid int gftNumDbtbElfmfnts() {
        rfturn 1;
    }

    /**
     * Rfturns thf sizf of thf bufffr (in dbtb brrby flfmfnts)
     * nffdfd for b dbtb bufffr thbt mbtdhfs this
     * SinglfPixflPbdkfdSbmplfModfl.
     */
    privbtf long gftBufffrSizf() {
      long sizf = sdbnlinfStridf * (hfight-1) + width;
      rfturn sizf;
    }

    /**
     * Crfbtfs b nfw SinglfPixflPbdkfdSbmplfModfl with thf spfdififd
     * width bnd hfight.  Thf nfw SinglfPixflPbdkfdSbmplfModfl will hbvf thf
     * sbmf storbgf dbtb typf bnd bit mbsks bs this
     * SinglfPixflPbdkfdSbmplfModfl.
     * @pbrbm w thf width of thf rfsulting <dodf>SbmplfModfl</dodf>
     * @pbrbm h thf hfight of thf rfsulting <dodf>SbmplfModfl</dodf>
     * @rfturn b <dodf>SinglfPixflPbdkfdSbmplfModfl</dodf> with thf
     *         spfdififd width bnd hfight.
     * @throws IllfgblArgumfntExdfption if <dodf>w</dodf> or
     *         <dodf>h</dodf> is not grfbtfr thbn 0
     */
    publid SbmplfModfl drfbtfCompbtiblfSbmplfModfl(int w, int h) {
      SbmplfModfl sbmplfModfl = nfw SinglfPixflPbdkfdSbmplfModfl(dbtbTypf, w, h,
                                                              bitMbsks);
      rfturn sbmplfModfl;
    }

    /**
     * Crfbtfs b DbtbBufffr thbt dorrfsponds to this
     * SinglfPixflPbdkfdSbmplfModfl.  Thf DbtbBufffr's dbtb typf bnd sizf
     * will bf donsistfnt with this SinglfPixflPbdkfdSbmplfModfl.  Thf
     * DbtbBufffr will hbvf b singlf bbnk.
     */
    publid DbtbBufffr drfbtfDbtbBufffr() {
        DbtbBufffr dbtbBufffr = null;

        int sizf = (int)gftBufffrSizf();
        switdh (dbtbTypf) {
        dbsf DbtbBufffr.TYPE_BYTE:
            dbtbBufffr = nfw DbtbBufffrBytf(sizf);
            brfbk;
        dbsf DbtbBufffr.TYPE_USHORT:
            dbtbBufffr = nfw DbtbBufffrUShort(sizf);
            brfbk;
        dbsf DbtbBufffr.TYPE_INT:
            dbtbBufffr = nfw DbtbBufffrInt(sizf);
            brfbk;
        }
        rfturn dbtbBufffr;
    }

    /** Rfturns thf numbfr of bits pfr sbmplf for bll bbnds. */
    publid int[] gftSbmplfSizf() {
        rfturn bitSizfs.dlonf();
    }

    /** Rfturns thf numbfr of bits pfr sbmplf for thf spfdififd bbnd. */
    publid int gftSbmplfSizf(int bbnd) {
        rfturn bitSizfs[bbnd];
    }

    /** Rfturns thf offsft (in dbtb brrby flfmfnts) of pixfl (x,y).
     *  Thf dbtb flfmfnt dontbining pixfl <dodf>x,y</dodf>
     *  dbn bf rftrifvfd from b DbtbBufffr <dodf>dbtb</dodf> with b
     *  SinglfPixflPbdkfdSbmplfModfl <dodf>sppsm</dodf> bs:
     * <prf>
     *        dbtb.gftElfm(sppsm.gftOffsft(x, y));
     * </prf>
     * @pbrbm x thf X doordinbtf of thf spfdififd pixfl
     * @pbrbm y thf Y doordinbtf of thf spfdififd pixfl
     * @rfturn thf offsft of thf spfdififd pixfl.
     */
    publid int gftOffsft(int x, int y) {
        int offsft = y * sdbnlinfStridf + x;
        rfturn offsft;
    }

    /** Rfturns thf bit offsfts into thf dbtb brrby flfmfnt rfprfsfnting
     *  b pixfl for bll bbnds.
     *  @rfturn thf bit offsfts rfprfsfnting b pixfl for bll bbnds.
     */
    publid int [] gftBitOffsfts() {
      rfturn bitOffsfts.dlonf();
    }

    /** Rfturns thf bit mbsks for bll bbnds.
     *  @rfturn thf bit mbsks for bll bbnds.
     */
    publid int [] gftBitMbsks() {
      rfturn bitMbsks.dlonf();
    }

    /** Rfturns thf sdbnlinf stridf of this SinglfPixflPbdkfdSbmplfModfl.
     *  @rfturn thf sdbnlinf stridf of this
     *          <dodf>SinglfPixflPbdkfdSbmplfModfl</dodf>.
     */
    publid int gftSdbnlinfStridf() {
      rfturn sdbnlinfStridf;
    }

    /**
     * This drfbtfs b nfw SinglfPixflPbdkfdSbmplfModfl with b subsft of thf
     * bbnds of this SinglfPixflPbdkfdSbmplfModfl.  Thf nfw
     * SinglfPixflPbdkfdSbmplfModfl dbn bf usfd with bny DbtbBufffr thbt thf
     * fxisting SinglfPixflPbdkfdSbmplfModfl dbn bf usfd with.  Thf nfw
     * SinglfPixflPbdkfdSbmplfModfl/DbtbBufffr dombinbtion will rfprfsfnt
     * bn imbgf with b subsft of thf bbnds of thf originbl
     * SinglfPixflPbdkfdSbmplfModfl/DbtbBufffr dombinbtion.
     * @fxdfption RbstfrFormbtExdfption if thf lfngth of thf bbnds brgumfnt is
     *                                  grfbtfr thbn thf numbfr of bbnds in
     *                                  thf sbmplf modfl.
     */
    publid SbmplfModfl drfbtfSubsftSbmplfModfl(int bbnds[]) {
        if (bbnds.lfngth > numBbnds)
            throw nfw RbstfrFormbtExdfption("Thfrf brf only " +
                                            numBbnds +
                                            " bbnds");
        int nfwBitMbsks[] = nfw int[bbnds.lfngth];
        for (int i=0; i<bbnds.lfngth; i++)
            nfwBitMbsks[i] = bitMbsks[bbnds[i]];

        rfturn nfw SinglfPixflPbdkfdSbmplfModfl(this.dbtbTypf, width, hfight,
                                           this.sdbnlinfStridf, nfwBitMbsks);
    }

    /**
     * Rfturns dbtb for b singlf pixfl in b primitivf brrby of typf
     * TrbnsffrTypf.  For b SinglfPixflPbdkfdSbmplfModfl, thf brrby will
     * hbvf onf flfmfnt, bnd thf typf will bf thf sbmf bs thf storbgf
     * dbtb typf.  Gfnfrblly, obj
     * should bf pbssfd in bs null, so thbt thf Objfdt will bf drfbtfd
     * butombtidblly bnd will bf of thf right primitivf dbtb typf.
     * <p>
     * Thf following dodf illustrbtfs trbnsffrring dbtb for onf pixfl from
     * DbtbBufffr <dodf>db1</dodf>, whosf storbgf lbyout is dfsdribfd by
     * SinglfPixflPbdkfdSbmplfModfl <dodf>sppsm1</dodf>, to
     * DbtbBufffr <dodf>db2</dodf>, whosf storbgf lbyout is dfsdribfd by
     * SinglfPixflPbdkfdSbmplfModfl <dodf>sppsm2</dodf>.
     * Thf trbnsffr will gfnfrblly bf morf fffidifnt thbn using
     * gftPixfl/sftPixfl.
     * <prf>
     *       SinglfPixflPbdkfdSbmplfModfl sppsm1, sppsm2;
     *       DbtbBufffrInt db1, db2;
     *       sppsm2.sftDbtbElfmfnts(x, y, sppsm1.gftDbtbElfmfnts(x, y, null,
     *                              db1), db2);
     * </prf>
     * Using gftDbtbElfmfnts/sftDbtbElfmfnts to trbnsffr bftwffn two
     * DbtbBufffr/SbmplfModfl pbirs is lfgitimbtf if thf SbmplfModfls hbvf
     * thf sbmf numbfr of bbnds, dorrfsponding bbnds hbvf thf sbmf numbfr of
     * bits pfr sbmplf, bnd thf TrbnsffrTypfs brf thf sbmf.
     * <p>
     * If obj is non-null, it should bf b primitivf brrby of typf TrbnsffrTypf.
     * Othfrwisf, b ClbssCbstExdfption is thrown.  An
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds, or if obj is non-null bnd is not lbrgf fnough to hold
     * thf pixfl dbtb.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion.
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion.
     * @pbrbm obj       If non-null, b primitivf brrby in whidh to rfturn
     *                  thf pixfl dbtb.
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @rfturn thf dbtb for thf spfdififd pixfl.
     * @sff #sftDbtbElfmfnts(int, int, Objfdt, DbtbBufffr)
     */
    publid Objfdt gftDbtbElfmfnts(int x, int y, Objfdt obj, DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        int typf = gftTrbnsffrTypf();

        switdh(typf) {

        dbsf DbtbBufffr.TYPE_BYTE:

            bytf[] bdbtb;

            if (obj == null)
                bdbtb = nfw bytf[1];
            flsf
                bdbtb = (bytf[])obj;

            bdbtb[0] = (bytf)dbtb.gftElfm(y * sdbnlinfStridf + x);

            obj = (Objfdt)bdbtb;
            brfbk;

        dbsf DbtbBufffr.TYPE_USHORT:

            short[] sdbtb;

            if (obj == null)
                sdbtb = nfw short[1];
            flsf
                sdbtb = (short[])obj;

            sdbtb[0] = (short)dbtb.gftElfm(y * sdbnlinfStridf + x);

            obj = (Objfdt)sdbtb;
            brfbk;

        dbsf DbtbBufffr.TYPE_INT:

            int[] idbtb;

            if (obj == null)
                idbtb = nfw int[1];
            flsf
                idbtb = (int[])obj;

            idbtb[0] = dbtb.gftElfm(y * sdbnlinfStridf + x);

            obj = (Objfdt)idbtb;
            brfbk;
        }

        rfturn obj;
    }

    /**
     * Rfturns bll sbmplfs in for thf spfdififd pixfl in bn int brrby.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion.
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion.
     * @pbrbm iArrby    If non-null, rfturns thf sbmplfs in this brrby
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @rfturn bll sbmplfs for thf spfdififd pixfl.
     * @sff #sftPixfl(int, int, int[], DbtbBufffr)
     */
    publid int [] gftPixfl(int x, int y, int iArrby[], DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int pixfls[];
        if (iArrby == null) {
            pixfls = nfw int [numBbnds];
        } flsf {
            pixfls = iArrby;
        }

        int vbluf = dbtb.gftElfm(y * sdbnlinfStridf + x);
        for (int i=0; i<numBbnds; i++) {
            pixfls[i] = (vbluf & bitMbsks[i]) >>> bitOffsfts[i];
        }
        rfturn pixfls;
    }

    /**
     * Rfturns bll sbmplfs for thf spfdififd rfdtbnglf of pixfls in
     * bn int brrby, onf sbmplf pfr brrby flfmfnt.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm y         Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm w         Thf width of thf pixfl rfdtbnglf.
     * @pbrbm h         Thf hfight of thf pixfl rfdtbnglf.
     * @pbrbm iArrby    If non-null, rfturns thf sbmplfs in this brrby.
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @rfturn bll sbmplfs for thf spfdififd rfgion of pixfls.
     * @sff #sftPixfls(int, int, int, int, int[], DbtbBufffr)
     */
    publid int[] gftPixfls(int x, int y, int w, int h,
                           int iArrby[], DbtbBufffr dbtb) {
        int x1 = x + w;
        int y1 = y + h;

        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||
            y < 0 || y >= hfight || h > hfight || y1 < 0 || y1 >  hfight)
        {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int pixfls[];
        if (iArrby != null) {
           pixfls = iArrby;
        } flsf {
           pixfls = nfw int [w*h*numBbnds];
        }
        int linfOffsft = y*sdbnlinfStridf + x;
        int dstOffsft = 0;

        for (int i = 0; i < h; i++) {
           for (int j = 0; j < w; j++) {
              int vbluf = dbtb.gftElfm(linfOffsft+j);
              for (int k=0; k < numBbnds; k++) {
                  pixfls[dstOffsft++] =
                     ((vbluf & bitMbsks[k]) >>> bitOffsfts[k]);
              }
           }
           linfOffsft += sdbnlinfStridf;
        }
        rfturn pixfls;
    }

    /**
     * Rfturns bs int thf sbmplf in b spfdififd bbnd for thf pixfl
     * lodbtfd bt (x,y).
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion.
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion.
     * @pbrbm b         Thf bbnd to rfturn.
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @rfturn thf sbmplf in b spfdififd bbnd for thf spfdififd
     *         pixfl.
     * @sff #sftSbmplf(int, int, int, int, DbtbBufffr)
     */
    publid int gftSbmplf(int x, int y, int b, DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int sbmplf = dbtb.gftElfm(y * sdbnlinfStridf + x);
        rfturn ((sbmplf & bitMbsks[b]) >>> bitOffsfts[b]);
    }

    /**
     * Rfturns thf sbmplfs for b spfdififd bbnd for thf spfdififd rfdtbnglf
     * of pixfls in bn int brrby, onf sbmplf pfr brrby flfmfnt.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm y         Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm w         Thf width of thf pixfl rfdtbnglf.
     * @pbrbm h         Thf hfight of thf pixfl rfdtbnglf.
     * @pbrbm b         Thf bbnd to rfturn.
     * @pbrbm iArrby    If non-null, rfturns thf sbmplfs in this brrby.
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @rfturn thf sbmplfs for thf spfdififd bbnd for thf spfdififd
     *         rfgion of pixfls.
     * @sff #sftSbmplfs(int, int, int, int, int, int[], DbtbBufffr)
     */
    publid int[] gftSbmplfs(int x, int y, int w, int h, int b,
                           int iArrby[], DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x + w > width) || (y + h > hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int sbmplfs[];
        if (iArrby != null) {
           sbmplfs = iArrby;
        } flsf {
           sbmplfs = nfw int [w*h];
        }
        int linfOffsft = y*sdbnlinfStridf + x;
        int dstOffsft = 0;

        for (int i = 0; i < h; i++) {
           for (int j = 0; j < w; j++) {
              int vbluf = dbtb.gftElfm(linfOffsft+j);
              sbmplfs[dstOffsft++] =
                 ((vbluf & bitMbsks[b]) >>> bitOffsfts[b]);
           }
           linfOffsft += sdbnlinfStridf;
        }
        rfturn sbmplfs;
    }

    /**
     * Sfts thf dbtb for b singlf pixfl in thf spfdififd DbtbBufffr from b
     * primitivf brrby of typf TrbnsffrTypf.  For b
     * SinglfPixflPbdkfdSbmplfModfl, only thf first flfmfnt of thf brrby
     * will hold vblid dbtb, bnd thf typf of thf brrby must bf thf sbmf bs
     * thf storbgf dbtb typf of thf SinglfPixflPbdkfdSbmplfModfl.
     * <p>
     * Thf following dodf illustrbtfs trbnsffrring dbtb for onf pixfl from
     * DbtbBufffr <dodf>db1</dodf>, whosf storbgf lbyout is dfsdribfd by
     * SinglfPixflPbdkfdSbmplfModfl <dodf>sppsm1</dodf>,
     * to DbtbBufffr <dodf>db2</dodf>, whosf storbgf lbyout is dfsdribfd by
     * SinglfPixflPbdkfdSbmplfModfl <dodf>sppsm2</dodf>.
     * Thf trbnsffr will gfnfrblly bf morf fffidifnt thbn using
     * gftPixfl/sftPixfl.
     * <prf>
     *       SinglfPixflPbdkfdSbmplfModfl sppsm1, sppsm2;
     *       DbtbBufffrInt db1, db2;
     *       sppsm2.sftDbtbElfmfnts(x, y, sppsm1.gftDbtbElfmfnts(x, y, null,
     *                              db1), db2);
     * </prf>
     * Using gftDbtbElfmfnts/sftDbtbElfmfnts to trbnsffr bftwffn two
     * DbtbBufffr/SbmplfModfl pbirs is lfgitimbtf if thf SbmplfModfls hbvf
     * thf sbmf numbfr of bbnds, dorrfsponding bbnds hbvf thf sbmf numbfr of
     * bits pfr sbmplf, bnd thf TrbnsffrTypfs brf thf sbmf.
     * <p>
     * obj must bf b primitivf brrby of typf TrbnsffrTypf.  Othfrwisf,
     * b ClbssCbstExdfption is thrown.  An
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds, or if obj is not lbrgf fnough to hold thf pixfl dbtb.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion.
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion.
     * @pbrbm obj       A primitivf brrby dontbining pixfl dbtb.
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @sff #gftDbtbElfmfnts(int, int, Objfdt, DbtbBufffr)
     */
    publid void sftDbtbElfmfnts(int x, int y, Objfdt obj, DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        int typf = gftTrbnsffrTypf();

        switdh(typf) {

        dbsf DbtbBufffr.TYPE_BYTE:

            bytf[] bbrrby = (bytf[])obj;
            dbtb.sftElfm(y*sdbnlinfStridf+x, ((int)bbrrby[0])&0xff);
            brfbk;

        dbsf DbtbBufffr.TYPE_USHORT:

            short[] sbrrby = (short[])obj;
            dbtb.sftElfm(y*sdbnlinfStridf+x, ((int)sbrrby[0])&0xffff);
            brfbk;

        dbsf DbtbBufffr.TYPE_INT:

            int[] ibrrby = (int[])obj;
            dbtb.sftElfm(y*sdbnlinfStridf+x, ibrrby[0]);
            brfbk;
        }
    }

    /**
     * Sfts b pixfl in thf DbtbBufffr using bn int brrby of sbmplfs for input.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion.
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion.
     * @pbrbm iArrby    Thf input sbmplfs in bn int brrby.
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @sff #gftPixfl(int, int, int[], DbtbBufffr)
     */
    publid void sftPixfl(int x, int y,
                         int iArrby[],
                         DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int linfOffsft = y * sdbnlinfStridf + x;
        int vbluf = dbtb.gftElfm(linfOffsft);
        for (int i=0; i < numBbnds; i++) {
            vbluf &= ~bitMbsks[i];
            vbluf |= ((iArrby[i] << bitOffsfts[i]) & bitMbsks[i]);
        }
        dbtb.sftElfm(linfOffsft, vbluf);
    }

    /**
     * Sfts bll sbmplfs for b rfdtbnglf of pixfls from bn int brrby dontbining
     * onf sbmplf pfr brrby flfmfnt.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm y         Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm w         Thf width of thf pixfl rfdtbnglf.
     * @pbrbm h         Thf hfight of thf pixfl rfdtbnglf.
     * @pbrbm iArrby    Thf input sbmplfs in bn int brrby.
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @sff #gftPixfls(int, int, int, int, int[], DbtbBufffr)
     */
    publid void sftPixfls(int x, int y, int w, int h,
                          int iArrby[], DbtbBufffr dbtb) {
        int x1 = x + w;
        int y1 = y + h;

        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||
            y < 0 || y >= hfight || h > hfight || y1 < 0 || y1 >  hfight)
        {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        int linfOffsft = y*sdbnlinfStridf + x;
        int srdOffsft = 0;

        for (int i = 0; i < h; i++) {
           for (int j = 0; j < w; j++) {
               int vbluf = dbtb.gftElfm(linfOffsft+j);
               for (int k=0; k < numBbnds; k++) {
                   vbluf &= ~bitMbsks[k];
                   int srdVbluf = iArrby[srdOffsft++];
                   vbluf |= ((srdVbluf << bitOffsfts[k])
                             & bitMbsks[k]);
               }
               dbtb.sftElfm(linfOffsft+j, vbluf);
           }
           linfOffsft += sdbnlinfStridf;
        }
    }

    /**
     * Sfts b sbmplf in thf spfdififd bbnd for thf pixfl lodbtfd bt (x,y)
     * in thf DbtbBufffr using bn int for input.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion.
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion.
     * @pbrbm b         Thf bbnd to sft.
     * @pbrbm s         Thf input sbmplf bs bn int.
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @sff #gftSbmplf(int, int, int, DbtbBufffr)
     */
    publid void sftSbmplf(int x, int y, int b, int s,
                          DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int vbluf = dbtb.gftElfm(y*sdbnlinfStridf + x);
        vbluf &= ~bitMbsks[b];
        vbluf |= (s << bitOffsfts[b]) & bitMbsks[b];
        dbtb.sftElfm(y*sdbnlinfStridf + x,vbluf);
    }

    /**
     * Sfts thf sbmplfs in thf spfdififd bbnd for thf spfdififd rfdtbnglf
     * of pixfls from bn int brrby dontbining onf sbmplf pfr brrby flfmfnt.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm y         Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm w         Thf width of thf pixfl rfdtbnglf.
     * @pbrbm h         Thf hfight of thf pixfl rfdtbnglf.
     * @pbrbm b         Thf bbnd to sft.
     * @pbrbm iArrby    Thf input sbmplfs in bn int brrby.
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @sff #gftSbmplfs(int, int, int, int, int, int[], DbtbBufffr)
     */
    publid void sftSbmplfs(int x, int y, int w, int h, int b,
                          int iArrby[], DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x + w > width) || (y + h > hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int linfOffsft = y*sdbnlinfStridf + x;
        int srdOffsft = 0;

        for (int i = 0; i < h; i++) {
           for (int j = 0; j < w; j++) {
              int vbluf = dbtb.gftElfm(linfOffsft+j);
              vbluf &= ~bitMbsks[b];
              int sbmplf = iArrby[srdOffsft++];
              vbluf |= (sbmplf << bitOffsfts[b]) & bitMbsks[b];
              dbtb.sftElfm(linfOffsft+j,vbluf);
           }
           linfOffsft += sdbnlinfStridf;
        }
    }

    publid boolfbn fqubls(Objfdt o) {
        if ((o == null) || !(o instbndfof SinglfPixflPbdkfdSbmplfModfl)) {
            rfturn fblsf;
        }

        SinglfPixflPbdkfdSbmplfModfl thbt = (SinglfPixflPbdkfdSbmplfModfl)o;
        rfturn this.width == thbt.width &&
            this.hfight == thbt.hfight &&
            this.numBbnds == thbt.numBbnds &&
            this.dbtbTypf == thbt.dbtbTypf &&
            Arrbys.fqubls(this.bitMbsks, thbt.bitMbsks) &&
            Arrbys.fqubls(this.bitOffsfts, thbt.bitOffsfts) &&
            Arrbys.fqubls(this.bitSizfs, thbt.bitSizfs) &&
            this.mbxBitSizf == thbt.mbxBitSizf &&
            this.sdbnlinfStridf == thbt.sdbnlinfStridf;
    }

    // If wf implfmfnt fqubls() wf must blso implfmfnt hbshCodf
    publid int hbshCodf() {
        int hbsh = 0;
        hbsh = width;
        hbsh <<= 8;
        hbsh ^= hfight;
        hbsh <<= 8;
        hbsh ^= numBbnds;
        hbsh <<= 8;
        hbsh ^= dbtbTypf;
        hbsh <<= 8;
        for (int i = 0; i < bitMbsks.lfngth; i++) {
            hbsh ^= bitMbsks[i];
            hbsh <<= 8;
        }
        for (int i = 0; i < bitOffsfts.lfngth; i++) {
            hbsh ^= bitOffsfts[i];
            hbsh <<= 8;
        }
        for (int i = 0; i < bitSizfs.lfngth; i++) {
            hbsh ^= bitSizfs[i];
            hbsh <<= 8;
        }
        hbsh ^= mbxBitSizf;
        hbsh <<= 8;
        hbsh ^= sdbnlinfStridf;
        rfturn hbsh;
    }
}
