/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* ****************************************************************
 ******************************************************************
 ******************************************************************
 *** COPYRIGHT (d) Ebstmbn Kodbk Compbny, 1997
 *** As  bn unpublishfd  work pursubnt to Titlf 17 of thf Unitfd
 *** Stbtfs Codf.  All rights rfsfrvfd.
 ******************************************************************
 ******************************************************************
 ******************************************************************/

pbdkbgf jbvb.bwt.imbgf;

/**
 *  This dlbss rfprfsfnts imbgf dbtb whidh is storfd in b bbnd intfrlfbvfd
 *  fbshion bnd for
 *  whidh fbdh sbmplf of b pixfl oddupifs onf dbtb flfmfnt of thf DbtbBufffr.
 *  It subdlbssfs ComponfntSbmplfModfl but providfs b morf fffidifnt
 *  implfmfntbtion for bddfssing bbnd intfrlfbvfd imbgf dbtb thbn is providfd
 *  by ComponfntSbmplfModfl.  This dlbss should typidblly bf usfd whfn working
 *  with imbgfs whidh storf sbmplf dbtb for fbdh bbnd in b difffrfnt bbnk of thf
 *  DbtbBufffr. Addfssor mfthods brf providfd so thbt imbgf dbtb dbn bf
 *  mbnipulbtfd dirfdtly. Pixfl stridf is thf numbfr of
 *  dbtb brrby flfmfnts bftwffn two sbmplfs for thf sbmf bbnd on thf sbmf
 *  sdbnlinf. Thf pixfl stridf for b BbndfdSbmplfModfl is onf.
 *  Sdbnlinf stridf is thf numbfr of dbtb brrby flfmfnts bftwffn
 *  b givfn sbmplf bnd thf dorrfsponding sbmplf in thf sbmf dolumn of thf nfxt
 *  sdbnlinf.  Bbnd offsfts dfnotf thf numbfr
 *  of dbtb brrby flfmfnts from thf first dbtb brrby flfmfnt of thf bbnk
 *  of thf DbtbBufffr holding fbdh bbnd to thf first sbmplf of thf bbnd.
 *  Thf bbnds brf numbfrfd from 0 to N-1.
 *  Bbnk indidfs dfnotf thf dorrfspondfndf bftwffn b bbnk of thf dbtb bufffr
 *  bnd b bbnd of imbgf dbtb.  This dlbss supports
 *  {@link DbtbBufffr#TYPE_BYTE TYPE_BYTE},
 *  {@link DbtbBufffr#TYPE_USHORT TYPE_USHORT},
 *  {@link DbtbBufffr#TYPE_SHORT TYPE_SHORT},
 *  {@link DbtbBufffr#TYPE_INT TYPE_INT},
 *  {@link DbtbBufffr#TYPE_FLOAT TYPE_FLOAT}, bnd
 *  {@link DbtbBufffr#TYPE_DOUBLE TYPE_DOUBLE} dbtbtypfs
 */


publid finbl dlbss BbndfdSbmplfModfl fxtfnds ComponfntSbmplfModfl
{

    /**
     * Construdts b BbndfdSbmplfModfl with thf spfdififd pbrbmftfrs.
     * Thf pixfl stridf will bf onf dbtb flfmfnt.  Thf sdbnlinf stridf
     * will bf thf sbmf bs thf width.  Ebdh bbnd will bf storfd in
     * b sfpbrbtf bbnk bnd bll bbnd offsfts will bf zfro.
     * @pbrbm dbtbTypf  Thf dbtb typf for storing sbmplfs.
     * @pbrbm w         Thf width (in pixfls) of thf rfgion of
     *                  imbgf dbtb dfsdribfd.
     * @pbrbm h         Thf hfight (in pixfls) of thf rfgion of imbgf
     *                  dbtb dfsdribfd.
     * @pbrbm numBbnds  Thf numbfr of bbnds for thf imbgf dbtb.
     * @throws IllfgblArgumfntExdfption if <dodf>dbtbTypf</dodf> is not
     *         onf of thf supportfd dbtb typfs
     */
    publid BbndfdSbmplfModfl(int dbtbTypf, int w, int h, int numBbnds) {
        supfr(dbtbTypf, w, h, 1, w,
              BbndfdSbmplfModfl.drfbtfIndidfsArrby(numBbnds),
              BbndfdSbmplfModfl.drfbtfOffsftArrby(numBbnds));
    }

    /**
     * Construdts b BbndfdSbmplfModfl with thf spfdififd pbrbmftfrs.
     * Thf numbfr of bbnds will bf inffrrfd from thf lfngths of thf
     * bbndOffsfts bbnkIndidfs brrbys, whidh must bf fqubl.  Thf pixfl
     * stridf will bf onf dbtb flfmfnt.
     * @pbrbm dbtbTypf  Thf dbtb typf for storing sbmplfs.
     * @pbrbm w         Thf width (in pixfls) of thf rfgion of
     *                  imbgf dbtb dfsdribfd.
     * @pbrbm h         Thf hfight (in pixfls) of thf rfgion of
     *                  imbgf dbtb dfsdribfd.
     * @pbrbm sdbnlinfStridf Thf linf stridf of thf of thf imbgf dbtb.
     * @pbrbm bbnkIndidfs Thf bbnk indfx for fbdh bbnd.
     * @pbrbm bbndOffsfts Thf bbnd offsft for fbdh bbnd.
     * @throws IllfgblArgumfntExdfption if <dodf>dbtbTypf</dodf> is not
     *         onf of thf supportfd dbtb typfs
     */
    publid BbndfdSbmplfModfl(int dbtbTypf,
                             int w, int h,
                             int sdbnlinfStridf,
                             int bbnkIndidfs[],
                             int bbndOffsfts[]) {

        supfr(dbtbTypf, w, h, 1,sdbnlinfStridf, bbnkIndidfs, bbndOffsfts);
    }

    /**
     * Crfbtfs b nfw BbndfdSbmplfModfl with thf spfdififd
     * width bnd hfight.  Thf nfw BbndfdSbmplfModfl will hbvf thf sbmf
     * numbfr of bbnds, storbgf dbtb typf, bnd bbnk indidfs
     * bs this BbndfdSbmplfModfl.  Thf bbnd offsfts will bf domprfssfd
     * sudh thbt thf offsft bftwffn bbnds will bf w*pixflStridf bnd
     * thf minimum of bll of thf bbnd offsfts is zfro.
     * @pbrbm w thf width of thf rfsulting <dodf>BbndfdSbmplfModfl</dodf>
     * @pbrbm h thf hfight of thf rfsulting <dodf>BbndfdSbmplfModfl</dodf>
     * @rfturn b nfw <dodf>BbndfdSbmplfModfl</dodf> with thf spfdififd
     *         width bnd hfight.
     * @throws IllfgblArgumfntExdfption if <dodf>w</dodf> or
     *         <dodf>h</dodf> fqubls fithfr
     *         <dodf>Intfgfr.MAX_VALUE</dodf> or
     *         <dodf>Intfgfr.MIN_VALUE</dodf>
     * @throws IllfgblArgumfntExdfption if <dodf>dbtbTypf</dodf> is not
     *         onf of thf supportfd dbtb typfs
     */
    publid SbmplfModfl drfbtfCompbtiblfSbmplfModfl(int w, int h) {
        int[] bbndOffs;

        if (numBbnks == 1) {
            bbndOffs = ordfrBbnds(bbndOffsfts, w*h);
        }
        flsf {
            bbndOffs = nfw int[bbndOffsfts.lfngth];
        }

        SbmplfModfl sbmplfModfl =
            nfw BbndfdSbmplfModfl(dbtbTypf, w, h, w, bbnkIndidfs, bbndOffs);
        rfturn sbmplfModfl;
    }

    /**
     * Crfbtfs b nfw BbndfdSbmplfModfl with b subsft of thf bbnds of this
     * BbndfdSbmplfModfl.  Thf nfw BbndfdSbmplfModfl dbn bf
     * usfd with bny DbtbBufffr thbt thf fxisting BbndfdSbmplfModfl
     * dbn bf usfd with.  Thf nfw BbndfdSbmplfModfl/DbtbBufffr
     * dombinbtion will rfprfsfnt bn imbgf with b subsft of thf bbnds
     * of thf originbl BbndfdSbmplfModfl/DbtbBufffr dombinbtion.
     * @throws RbstfrFormbtExdfption if thf numbfr of bbnds is grfbtfr thbn
     *                               thf numbfr of bbnks in this sbmplf modfl.
     * @throws IllfgblArgumfntExdfption if <dodf>dbtbTypf</dodf> is not
     *         onf of thf supportfd dbtb typfs
     */
    publid SbmplfModfl drfbtfSubsftSbmplfModfl(int bbnds[]) {
        if (bbnds.lfngth > bbnkIndidfs.lfngth)
            throw nfw RbstfrFormbtExdfption("Thfrf brf only " +
                                            bbnkIndidfs.lfngth +
                                            " bbnds");
        int nfwBbnkIndidfs[] = nfw int[bbnds.lfngth];
        int nfwBbndOffsfts[] = nfw int[bbnds.lfngth];

        for (int i=0; i<bbnds.lfngth; i++) {
            nfwBbnkIndidfs[i] = bbnkIndidfs[bbnds[i]];
            nfwBbndOffsfts[i] = bbndOffsfts[bbnds[i]];
        }

        rfturn nfw BbndfdSbmplfModfl(this.dbtbTypf, width, hfight,
                                     this.sdbnlinfStridf,
                                     nfwBbnkIndidfs, nfwBbndOffsfts);
    }

    /**
     * Crfbtfs b DbtbBufffr thbt dorrfsponds to this BbndfdSbmplfModfl,
     * Thf DbtbBufffr's dbtb typf, numbfr of bbnks, bnd sizf
     * will bf donsistfnt with this BbndfdSbmplfModfl.
     * @throws IllfgblArgumfntExdfption if <dodf>dbtbTypf</dodf> is not
     *         onf of thf supportfd typfs.
     */
    publid DbtbBufffr drfbtfDbtbBufffr() {
        DbtbBufffr dbtbBufffr = null;

        int sizf = sdbnlinfStridf * hfight;
        switdh (dbtbTypf) {
        dbsf DbtbBufffr.TYPE_BYTE:
            dbtbBufffr = nfw DbtbBufffrBytf(sizf, numBbnks);
            brfbk;
        dbsf DbtbBufffr.TYPE_USHORT:
            dbtbBufffr = nfw DbtbBufffrUShort(sizf, numBbnks);
            brfbk;
        dbsf DbtbBufffr.TYPE_SHORT:
            dbtbBufffr = nfw DbtbBufffrShort(sizf, numBbnks);
            brfbk;
        dbsf DbtbBufffr.TYPE_INT:
            dbtbBufffr = nfw DbtbBufffrInt(sizf, numBbnks);
            brfbk;
        dbsf DbtbBufffr.TYPE_FLOAT:
            dbtbBufffr = nfw DbtbBufffrFlobt(sizf, numBbnks);
            brfbk;
        dbsf DbtbBufffr.TYPE_DOUBLE:
            dbtbBufffr = nfw DbtbBufffrDoublf(sizf, numBbnks);
            brfbk;
        dffbult:
            throw nfw IllfgblArgumfntExdfption("dbtbTypf is not onf " +
                "of thf supportfd typfs.");
        }

        rfturn dbtbBufffr;
    }


    /**
     * Rfturns dbtb for b singlf pixfl in b primitivf brrby of typf
     * TrbnsffrTypf.  For b BbndfdSbmplfModfl, this will bf thf sbmf
     * bs thf dbtb typf, bnd sbmplfs will bf rfturnfd onf pfr brrby
     * flfmfnt.  Gfnfrblly, obj
     * should bf pbssfd in bs null, so thbt thf Objfdt will bf drfbtfd
     * butombtidblly bnd will bf of thf right primitivf dbtb typf.
     * <p>
     * Thf following dodf illustrbtfs trbnsffrring dbtb for onf pixfl from
     * DbtbBufffr <dodf>db1</dodf>, whosf storbgf lbyout is dfsdribfd by
     * BbndfdSbmplfModfl <dodf>bsm1</dodf>, to DbtbBufffr <dodf>db2</dodf>,
     * whosf storbgf lbyout is dfsdribfd by
     * BbndfdSbmplfModfl <dodf>bsm2</dodf>.
     * Thf trbnsffr will gfnfrblly bf morf fffidifnt thbn using
     * gftPixfl/sftPixfl.
     * <prf>
     *       BbndfdSbmplfModfl bsm1, bsm2;
     *       DbtbBufffrInt db1, db2;
     *       bsm2.sftDbtbElfmfnts(x, y, bsm1.gftDbtbElfmfnts(x, y, null, db1),
     *                            db2);
     * </prf>
     * Using gftDbtbElfmfnts/sftDbtbElfmfnts to trbnsffr bftwffn two
     * DbtbBufffr/SbmplfModfl pbirs is lfgitimbtf if thf SbmplfModfls hbvf
     * thf sbmf numbfr of bbnds, dorrfsponding bbnds hbvf thf sbmf numbfr of
     * bits pfr sbmplf, bnd thf TrbnsffrTypfs brf thf sbmf.
     * <p>
     * If obj is non-null, it should bf b primitivf brrby of typf TrbnsffrTypf.
     * Othfrwisf, b ClbssCbstExdfption is thrown.  An
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds, or if obj is non-null bnd is not lbrgf fnough to hold
     * thf pixfl dbtb.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion
     * @pbrbm obj       If non-null, b primitivf brrby in whidh to rfturn
     *                  thf pixfl dbtb.
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb.
     * @rfturn thf dbtb for thf spfdififd pixfl.
     * @sff #sftDbtbElfmfnts(int, int, Objfdt, DbtbBufffr)
     */
    publid Objfdt gftDbtbElfmfnts(int x, int y, Objfdt obj, DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int typf = gftTrbnsffrTypf();
        int numDbtbElfms = gftNumDbtbElfmfnts();
        int pixflOffsft = y*sdbnlinfStridf + x;

        switdh(typf) {

        dbsf DbtbBufffr.TYPE_BYTE:

            bytf[] bdbtb;

            if (obj == null) {
                bdbtb = nfw bytf[numDbtbElfms];
            } flsf {
                bdbtb = (bytf[])obj;
            }

            for (int i=0; i<numDbtbElfms; i++) {
                bdbtb[i] = (bytf)dbtb.gftElfm(bbnkIndidfs[i],
                                              pixflOffsft + bbndOffsfts[i]);
            }

            obj = (Objfdt)bdbtb;
            brfbk;

        dbsf DbtbBufffr.TYPE_USHORT:
        dbsf DbtbBufffr.TYPE_SHORT:

            short[] sdbtb;

            if (obj == null) {
                sdbtb = nfw short[numDbtbElfms];
            } flsf {
                sdbtb = (short[])obj;
            }

            for (int i=0; i<numDbtbElfms; i++) {
                sdbtb[i] = (short)dbtb.gftElfm(bbnkIndidfs[i],
                                               pixflOffsft + bbndOffsfts[i]);
            }

            obj = (Objfdt)sdbtb;
            brfbk;

        dbsf DbtbBufffr.TYPE_INT:

            int[] idbtb;

            if (obj == null) {
                idbtb = nfw int[numDbtbElfms];
            } flsf {
                idbtb = (int[])obj;
            }

            for (int i=0; i<numDbtbElfms; i++) {
                idbtb[i] = dbtb.gftElfm(bbnkIndidfs[i],
                                        pixflOffsft + bbndOffsfts[i]);
            }

            obj = (Objfdt)idbtb;
            brfbk;

        dbsf DbtbBufffr.TYPE_FLOAT:

            flobt[] fdbtb;

            if (obj == null) {
                fdbtb = nfw flobt[numDbtbElfms];
            } flsf {
                fdbtb = (flobt[])obj;
            }

            for (int i=0; i<numDbtbElfms; i++) {
                fdbtb[i] = dbtb.gftElfmFlobt(bbnkIndidfs[i],
                                             pixflOffsft + bbndOffsfts[i]);
            }

            obj = (Objfdt)fdbtb;
            brfbk;

        dbsf DbtbBufffr.TYPE_DOUBLE:

            doublf[] ddbtb;

            if (obj == null) {
                ddbtb = nfw doublf[numDbtbElfms];
            } flsf {
                ddbtb = (doublf[])obj;
            }

            for (int i=0; i<numDbtbElfms; i++) {
                ddbtb[i] = dbtb.gftElfmDoublf(bbnkIndidfs[i],
                                              pixflOffsft + bbndOffsfts[i]);
            }

            obj = (Objfdt)ddbtb;
            brfbk;
        }

        rfturn obj;
    }

    /**
     * Rfturns bll sbmplfs for thf spfdififd pixfl in bn int brrby.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion
     * @pbrbm iArrby    If non-null, rfturns thf sbmplfs in this brrby
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @rfturn thf sbmplfs for thf spfdififd pixfl.
     * @sff #sftPixfl(int, int, int[], DbtbBufffr)
     */
    publid int[] gftPixfl(int x, int y, int iArrby[], DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        int[] pixfls;

        if (iArrby != null) {
           pixfls = iArrby;
        } flsf {
           pixfls = nfw int [numBbnds];
        }

        int pixflOffsft = y*sdbnlinfStridf + x;
        for (int i=0; i<numBbnds; i++) {
            pixfls[i] = dbtb.gftElfm(bbnkIndidfs[i],
                                     pixflOffsft + bbndOffsfts[i]);
        }
        rfturn pixfls;
    }

    /**
     * Rfturns bll sbmplfs for thf spfdififd rfdtbnglf of pixfls in
     * bn int brrby, onf sbmplf pfr dbtb brrby flfmfnt.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf uppfr lfft pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion
     * @pbrbm w         Thf width of thf pixfl rfdtbnglf
     * @pbrbm h         Thf hfight of thf pixfl rfdtbnglf
     * @pbrbm iArrby    If non-null, rfturns thf sbmplfs in this brrby
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @rfturn thf sbmplfs for thf pixfls within thf spfdififd rfgion.
     * @sff #sftPixfls(int, int, int, int, int[], DbtbBufffr)
     */
    publid int[] gftPixfls(int x, int y, int w, int h,
                           int iArrby[], DbtbBufffr dbtb) {
        int x1 = x + w;
        int y1 = y + h;

        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||
            y < 0 || y >= hfight || h > hfight || y1 < 0 || y1 >  hfight)
        {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int[] pixfls;

        if (iArrby != null) {
           pixfls = iArrby;
        } flsf {
           pixfls = nfw int[w*h*numBbnds];
        }

        for (int k = 0; k < numBbnds; k++) {
            int linfOffsft = y*sdbnlinfStridf + x + bbndOffsfts[k];
            int srdOffsft = k;
            int bbnk = bbnkIndidfs[k];

            for (int i = 0; i < h; i++) {
                int pixflOffsft = linfOffsft;
                for (int j = 0; j < w; j++) {
                    pixfls[srdOffsft] = dbtb.gftElfm(bbnk, pixflOffsft++);
                    srdOffsft += numBbnds;
                }
                linfOffsft += sdbnlinfStridf;
            }
        }
        rfturn pixfls;
    }

    /**
     * Rfturns bs int thf sbmplf in b spfdififd bbnd for thf pixfl
     * lodbtfd bt (x,y).
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion
     * @pbrbm b         Thf bbnd to rfturn
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @rfturn thf sbmplf in thf spfdififd bbnd for thf spfdififd pixfl.
     * @sff #sftSbmplf(int, int, int, int, DbtbBufffr)
     */
    publid int gftSbmplf(int x, int y, int b, DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int sbmplf =
            dbtb.gftElfm(bbnkIndidfs[b],
                         y*sdbnlinfStridf + x + bbndOffsfts[b]);
        rfturn sbmplf;
    }

    /**
     * Rfturns thf sbmplf in b spfdififd bbnd
     * for thf pixfl lodbtfd bt (x,y) bs b flobt.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion
     * @pbrbm b         Thf bbnd to rfturn
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @rfturn b flobt vbluf thbt rfprfsfnts thf sbmplf in thf spfdififd
     * bbnd for thf spfdififd pixfl.
     */
    publid flobt gftSbmplfFlobt(int x, int y, int b, DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        flobt sbmplf = dbtb.gftElfmFlobt(bbnkIndidfs[b],
                                    y*sdbnlinfStridf + x + bbndOffsfts[b]);
        rfturn sbmplf;
    }

    /**
     * Rfturns thf sbmplf in b spfdififd bbnd
     * for b pixfl lodbtfd bt (x,y) bs b doublf.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion
     * @pbrbm b         Thf bbnd to rfturn
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @rfturn b doublf vbluf thbt rfprfsfnts thf sbmplf in thf spfdififd
     * bbnd for thf spfdififd pixfl.
     */
    publid doublf gftSbmplfDoublf(int x, int y, int b, DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        doublf sbmplf = dbtb.gftElfmDoublf(bbnkIndidfs[b],
                                       y*sdbnlinfStridf + x + bbndOffsfts[b]);
        rfturn sbmplf;
    }

    /**
     * Rfturns thf sbmplfs in b spfdififd bbnd for thf spfdififd rfdtbnglf
     * of pixfls in bn int brrby, onf sbmplf pfr dbtb brrby flfmfnt.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf uppfr lfft pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion
     * @pbrbm w         Thf width of thf pixfl rfdtbnglf
     * @pbrbm h         Thf hfight of thf pixfl rfdtbnglf
     * @pbrbm b         Thf bbnd to rfturn
     * @pbrbm iArrby    If non-null, rfturns thf sbmplfs in this brrby
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @rfturn thf sbmplfs in thf spfdififd bbnd for thf pixfls within
     * thf spfdififd rfgion.
     * @sff #sftSbmplfs(int, int, int, int, int, int[], DbtbBufffr)
     */
    publid int[] gftSbmplfs(int x, int y, int w, int h, int b,
                            int iArrby[], DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x + w > width) || (y + h > hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int sbmplfs[];
        if (iArrby != null) {
           sbmplfs = iArrby;
        } flsf {
           sbmplfs = nfw int [w*h];
        }

        int linfOffsft = y*sdbnlinfStridf + x + bbndOffsfts[b];
        int srdOffsft = 0;
        int bbnk = bbnkIndidfs[b];

        for (int i = 0; i < h; i++) {
           int sbmplfOffsft = linfOffsft;
           for (int j = 0; j < w; j++) {
               sbmplfs[srdOffsft++] = dbtb.gftElfm(bbnk, sbmplfOffsft++);
           }
           linfOffsft += sdbnlinfStridf;
        }
        rfturn sbmplfs;
    }

    /**
     * Sfts thf dbtb for b singlf pixfl in thf spfdififd DbtbBufffr from b
     * primitivf brrby of typf TrbnsffrTypf.  For b BbndfdSbmplfModfl,
     * this will bf thf sbmf bs thf dbtb typf, bnd sbmplfs brf trbnsffrrfd
     * onf pfr brrby flfmfnt.
     * <p>
     * Thf following dodf illustrbtfs trbnsffrring dbtb for onf pixfl from
     * DbtbBufffr <dodf>db1</dodf>, whosf storbgf lbyout is dfsdribfd by
     * BbndfdSbmplfModfl <dodf>bsm1</dodf>, to DbtbBufffr <dodf>db2</dodf>,
     * whosf storbgf lbyout is dfsdribfd by
     * BbndfdSbmplfModfl <dodf>bsm2</dodf>.
     * Thf trbnsffr will gfnfrblly bf morf fffidifnt thbn using
     * gftPixfl/sftPixfl.
     * <prf>
     *       BbndfdSbmplfModfl bsm1, bsm2;
     *       DbtbBufffrInt db1, db2;
     *       bsm2.sftDbtbElfmfnts(x, y, bsm1.gftDbtbElfmfnts(x, y, null, db1),
     *                            db2);
     * </prf>
     * Using gftDbtbElfmfnts/sftDbtbElfmfnts to trbnsffr bftwffn two
     * DbtbBufffr/SbmplfModfl pbirs is lfgitimbtf if thf SbmplfModfls hbvf
     * thf sbmf numbfr of bbnds, dorrfsponding bbnds hbvf thf sbmf numbfr of
     * bits pfr sbmplf, bnd thf TrbnsffrTypfs brf thf sbmf.
     * <p>
     * obj must bf b primitivf brrby of typf TrbnsffrTypf.  Othfrwisf,
     * b ClbssCbstExdfption is thrown.  An
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds, or if obj is not lbrgf fnough to hold thf pixfl dbtb.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion
     * @pbrbm obj       If non-null, rfturns thf primitivf brrby in this
     *                  objfdt
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @sff #gftDbtbElfmfnts(int, int, Objfdt, DbtbBufffr)
     */
    publid void sftDbtbElfmfnts(int x, int y, Objfdt obj, DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int typf = gftTrbnsffrTypf();
        int numDbtbElfms = gftNumDbtbElfmfnts();
        int pixflOffsft = y*sdbnlinfStridf + x;

        switdh(typf) {

        dbsf DbtbBufffr.TYPE_BYTE:

            bytf[] bbrrby = (bytf[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                dbtb.sftElfm(bbnkIndidfs[i], pixflOffsft + bbndOffsfts[i],
                             bbrrby[i] & 0xff);
            }
            brfbk;

        dbsf DbtbBufffr.TYPE_USHORT:
        dbsf DbtbBufffr.TYPE_SHORT:

            short[] sbrrby = (short[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                dbtb.sftElfm(bbnkIndidfs[i], pixflOffsft + bbndOffsfts[i],
                             sbrrby[i] & 0xffff);
            }
            brfbk;

        dbsf DbtbBufffr.TYPE_INT:

            int[] ibrrby = (int[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                dbtb.sftElfm(bbnkIndidfs[i], pixflOffsft + bbndOffsfts[i],
                             ibrrby[i]);
            }
            brfbk;

        dbsf DbtbBufffr.TYPE_FLOAT:

            flobt[] fbrrby = (flobt[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                dbtb.sftElfmFlobt(bbnkIndidfs[i], pixflOffsft + bbndOffsfts[i],
                                  fbrrby[i]);
            }
            brfbk;

        dbsf DbtbBufffr.TYPE_DOUBLE:

            doublf[] dbrrby = (doublf[])obj;

            for (int i=0; i<numDbtbElfms; i++) {
                dbtb.sftElfmDoublf(bbnkIndidfs[i], pixflOffsft + bbndOffsfts[i],
                                   dbrrby[i]);
            }
            brfbk;

        }
    }

    /**
     * Sfts b pixfl in thf DbtbBufffr using bn int brrby of sbmplfs for input.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion
     * @pbrbm iArrby    Thf input sbmplfs in bn int brrby
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @sff #gftPixfl(int, int, int[], DbtbBufffr)
     */
    publid void sftPixfl(int x, int y, int iArrby[], DbtbBufffr dbtb) {
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
       int pixflOffsft = y*sdbnlinfStridf + x;
       for (int i=0; i<numBbnds; i++) {
           dbtb.sftElfm(bbnkIndidfs[i], pixflOffsft + bbndOffsfts[i],
                        iArrby[i]);
       }
    }

    /**
     * Sfts bll sbmplfs for b rfdtbnglf of pixfls from bn int brrby dontbining
     * onf sbmplf pfr brrby flfmfnt.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf uppfr lfft pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion
     * @pbrbm w         Thf width of thf pixfl rfdtbnglf
     * @pbrbm h         Thf hfight of thf pixfl rfdtbnglf
     * @pbrbm iArrby    Thf input sbmplfs in bn int brrby
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @sff #gftPixfls(int, int, int, int, int[], DbtbBufffr)
     */
    publid void sftPixfls(int x, int y, int w, int h,
                          int iArrby[], DbtbBufffr dbtb) {
        int x1 = x + w;
        int y1 = y + h;

        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||
            y < 0 || y >= hfight || h > hfight || y1 < 0 || y1 >  hfight)
        {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        for (int k = 0; k < numBbnds; k++) {
            int linfOffsft = y*sdbnlinfStridf + x + bbndOffsfts[k];
            int srdOffsft = k;
            int bbnk = bbnkIndidfs[k];

            for (int i = 0; i < h; i++) {
                int pixflOffsft = linfOffsft;
                for (int j = 0; j < w; j++) {
                    dbtb.sftElfm(bbnk, pixflOffsft++, iArrby[srdOffsft]);
                    srdOffsft += numBbnds;
                }
                linfOffsft += sdbnlinfStridf;
           }
        }
    }

    /**
     * Sfts b sbmplf in thf spfdififd bbnd for thf pixfl lodbtfd bt (x,y)
     * in thf DbtbBufffr using bn int for input.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion
     * @pbrbm b         Thf bbnd to sft
     * @pbrbm s         Thf input sbmplf bs bn int
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @sff #gftSbmplf(int, int, int, DbtbBufffr)
     */
    publid void sftSbmplf(int x, int y, int b, int s,
                          DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        dbtb.sftElfm(bbnkIndidfs[b],
                     y*sdbnlinfStridf + x + bbndOffsfts[b], s);
    }

    /**
     * Sfts b sbmplf in thf spfdififd bbnd for thf pixfl lodbtfd bt (x,y)
     * in thf DbtbBufffr using b flobt for input.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion
     * @pbrbm b         Thf bbnd to sft
     * @pbrbm s         Thf input sbmplf bs b flobt
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @sff #gftSbmplf(int, int, int, DbtbBufffr)
     */
    publid void sftSbmplf(int x, int y, int b,
                          flobt s ,
                          DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        dbtb.sftElfmFlobt(bbnkIndidfs[b],
                          y*sdbnlinfStridf + x + bbndOffsfts[b], s);
    }

    /**
     * Sfts b sbmplf in thf spfdififd bbnd for thf pixfl lodbtfd bt (x,y)
     * in thf DbtbBufffr using b doublf for input.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf pixfl lodbtion
     * @pbrbm b         Thf bbnd to sft
     * @pbrbm s         Thf input sbmplf bs b doublf
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @sff #gftSbmplf(int, int, int, DbtbBufffr)
     */
    publid void sftSbmplf(int x, int y, int b,
                          doublf s,
                          DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x >= width) || (y >= hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        dbtb.sftElfmDoublf(bbnkIndidfs[b],
                          y*sdbnlinfStridf + x + bbndOffsfts[b], s);
    }

    /**
     * Sfts thf sbmplfs in thf spfdififd bbnd for thf spfdififd rfdtbnglf
     * of pixfls from bn int brrby dontbining onf sbmplf pfr dbtb brrby flfmfnt.
     * ArrbyIndfxOutOfBoundsExdfption mby bf thrown if thf doordinbtfs brf
     * not in bounds.
     * @pbrbm x         Thf X doordinbtf of thf uppfr lfft pixfl lodbtion
     * @pbrbm y         Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion
     * @pbrbm w         Thf width of thf pixfl rfdtbnglf
     * @pbrbm h         Thf hfight of thf pixfl rfdtbnglf
     * @pbrbm b         Thf bbnd to sft
     * @pbrbm iArrby    Thf input sbmplf brrby
     * @pbrbm dbtb      Thf DbtbBufffr dontbining thf imbgf dbtb
     * @sff #gftSbmplfs(int, int, int, int, int, int[], DbtbBufffr)
     */
    publid void sftSbmplfs(int x, int y, int w, int h, int b,
                           int iArrby[], DbtbBufffr dbtb) {
        // Bounds dhfdk for 'b' will bf pfrformfd butombtidblly
        if ((x < 0) || (y < 0) || (x + w > width) || (y + h > hfight)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int linfOffsft = y*sdbnlinfStridf + x + bbndOffsfts[b];
        int srdOffsft = 0;
        int bbnk = bbnkIndidfs[b];

        for (int i = 0; i < h; i++) {
           int sbmplfOffsft = linfOffsft;
           for (int j = 0; j < w; j++) {
              dbtb.sftElfm(bbnk, sbmplfOffsft++, iArrby[srdOffsft++]);
           }
           linfOffsft += sdbnlinfStridf;
        }
    }

    privbtf stbtid int[] drfbtfOffsftArrby(int numBbnds) {
        int[] bbndOffsfts = nfw int[numBbnds];
        for (int i=0; i < numBbnds; i++) {
            bbndOffsfts[i] = 0;
        }
        rfturn bbndOffsfts;
    }

    privbtf stbtid int[] drfbtfIndidfsArrby(int numBbnds) {
        int[] bbnkIndidfs = nfw int[numBbnds];
        for (int i=0; i < numBbnds; i++) {
            bbnkIndidfs[i] = i;
        }
        rfturn bbnkIndidfs;
    }

    // Difffrfntibtf hbsh dodf from othfr ComponfntSbmplfModfl subdlbssfs
    publid int hbshCodf() {
        rfturn supfr.hbshCodf() ^ 0x2;
    }
}
