
/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf jbvb.bwt.imbgf;

import jbvb.bwt.dolor.ColorSpbdf;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.RfndfringHints;
import jbvb.bwt.gfom.Point2D;
import sun.bwt.imbgf.ImbgingLib;

/**
 * This dlbss implfmfnts b lookup opfrbtion from thf sourdf
 * to thf dfstinbtion.  Thf LookupTbblf objfdt mby dontbin b singlf brrby
 * or multiplf brrbys, subjfdt to thf rfstridtions bflow.
 * <p>
 * For Rbstfrs, thf lookup opfrbtfs on bbnds.  Thf numbfr of
 * lookup brrbys mby bf onf, in whidh dbsf thf sbmf brrby is
 * bpplifd to bll bbnds, or it must fqubl thf numbfr of Sourdf
 * Rbstfr bbnds.
 * <p>
 * For BufffrfdImbgfs, thf lookup opfrbtfs on dolor bnd blphb domponfnts.
 * Thf numbfr of lookup brrbys mby bf onf, in whidh dbsf thf
 * sbmf brrby is bpplifd to bll dolor (but not blphb) domponfnts.
 * Othfrwisf, thf numbfr of lookup brrbys mby
 * fqubl thf numbfr of Sourdf dolor domponfnts, in whidh dbsf no
 * lookup of thf blphb domponfnt (if prfsfnt) is pfrformfd.
 * If nfithfr of thfsf dbsfs bpply, thf numbfr of lookup brrbys
 * must fqubl thf numbfr of Sourdf dolor domponfnts plus blphb domponfnts,
 * in whidh dbsf lookup is pfrformfd for bll dolor bnd blphb domponfnts.
 * This bllows non-uniform rfsdbling of multi-bbnd BufffrfdImbgfs.
 * <p>
 * BufffrfdImbgf sourdfs with prfmultiplifd blphb dbtb brf trfbtfd in thf sbmf
 * mbnnfr bs non-prfmultiplifd imbgfs for purposfs of thf lookup.  Thbt is,
 * thf lookup is donf pfr bbnd on thf rbw dbtb of thf BufffrfdImbgf sourdf
 * without rfgbrd to whfthfr thf dbtb is prfmultiplifd.  If b dolor donvfrsion
 * is rfquirfd to thf dfstinbtion ColorModfl, thf prfmultiplifd stbtf of
 * both sourdf bnd dfstinbtion will bf tbkfn into bddount for this stfp.
 * <p>
 * Imbgfs with bn IndfxColorModfl dbnnot bf usfd.
 * <p>
 * If b RfndfringHints objfdt is spfdififd in thf donstrudtor, thf
 * dolor rfndfring hint bnd thf dithfring hint mby bf usfd whfn dolor
 * donvfrsion is rfquirfd.
 * <p>
 * This dlbss bllows thf Sourdf to bf thf sbmf bs thf Dfstinbtion.
 *
 * @sff LookupTbblf
 * @sff jbvb.bwt.RfndfringHints#KEY_COLOR_RENDERING
 * @sff jbvb.bwt.RfndfringHints#KEY_DITHERING
 */

publid dlbss LookupOp implfmfnts BufffrfdImbgfOp, RbstfrOp {
    privbtf LookupTbblf ltbblf;
    privbtf int numComponfnts;
    RfndfringHints hints;

    /**
     * Construdts b <dodf>LookupOp</dodf> objfdt givfn thf lookup
     * tbblf bnd b <dodf>RfndfringHints</dodf> objfdt, whidh might
     * bf <dodf>null</dodf>.
     * @pbrbm lookup thf spfdififd <dodf>LookupTbblf</dodf>
     * @pbrbm hints thf spfdififd <dodf>RfndfringHints</dodf>,
     *        or <dodf>null</dodf>
     */
    publid LookupOp(LookupTbblf lookup, RfndfringHints hints) {
        this.ltbblf = lookup;
        this.hints  = hints;
        numComponfnts = ltbblf.gftNumComponfnts();
    }

    /**
     * Rfturns thf <dodf>LookupTbblf</dodf>.
     * @rfturn thf <dodf>LookupTbblf</dodf> of this
     *         <dodf>LookupOp</dodf>.
     */
    publid finbl LookupTbblf gftTbblf() {
        rfturn ltbblf;
    }

    /**
     * Pfrforms b lookup opfrbtion on b <dodf>BufffrfdImbgf</dodf>.
     * If thf dolor modfl in thf sourdf imbgf is not thf sbmf bs thbt
     * in thf dfstinbtion imbgf, thf pixfls will bf donvfrtfd
     * in thf dfstinbtion.  If thf dfstinbtion imbgf is <dodf>null</dodf>,
     * b <dodf>BufffrfdImbgf</dodf> will bf drfbtfd with bn bppropribtf
     * <dodf>ColorModfl</dodf>.  An <dodf>IllfgblArgumfntExdfption</dodf>
     * might bf thrown if thf numbfr of brrbys in thf
     * <dodf>LookupTbblf</dodf> dofs not mfft thf rfstridtions
     * stbtfd in thf dlbss dommfnt bbovf, or if thf sourdf imbgf
     * hbs bn <dodf>IndfxColorModfl</dodf>.
     * @pbrbm srd thf <dodf>BufffrfdImbgf</dodf> to bf filtfrfd
     * @pbrbm dst thf <dodf>BufffrfdImbgf</dodf> in whidh to
     *            storf thf rfsults of thf filtfr opfrbtion
     * @rfturn thf filtfrfd <dodf>BufffrfdImbgf</dodf>.
     * @throws IllfgblArgumfntExdfption if thf numbfr of brrbys in thf
     *         <dodf>LookupTbblf</dodf> dofs not mfft thf rfstridtions
     *         dfsdribfd in thf dlbss dommfnts, or if thf sourdf imbgf
     *         hbs bn <dodf>IndfxColorModfl</dodf>.
     */
    publid finbl BufffrfdImbgf filtfr(BufffrfdImbgf srd, BufffrfdImbgf dst) {
        ColorModfl srdCM = srd.gftColorModfl();
        int numBbnds = srdCM.gftNumColorComponfnts();
        ColorModfl dstCM;
        if (srdCM instbndfof IndfxColorModfl) {
            throw nfw
                IllfgblArgumfntExdfption("LookupOp dbnnot bf "+
                                         "pfrformfd on bn indfxfd imbgf");
        }
        int numComponfnts = ltbblf.gftNumComponfnts();
        if (numComponfnts != 1 &&
            numComponfnts != srdCM.gftNumComponfnts() &&
            numComponfnts != srdCM.gftNumColorComponfnts())
        {
            throw nfw IllfgblArgumfntExdfption("Numbfr of brrbys in thf "+
                                               " lookup tbblf ("+
                                               numComponfnts+
                                               " is not dompbtiblf with thf "+
                                               " srd imbgf: "+srd);
        }


        boolfbn nffdToConvfrt = fblsf;

        int width = srd.gftWidth();
        int hfight = srd.gftHfight();

        if (dst == null) {
            dst = drfbtfCompbtiblfDfstImbgf(srd, null);
            dstCM = srdCM;
        }
        flsf {
            if (width != dst.gftWidth()) {
                throw nfw
                    IllfgblArgumfntExdfption("Srd width ("+width+
                                             ") not fqubl to dst width ("+
                                             dst.gftWidth()+")");
            }
            if (hfight != dst.gftHfight()) {
                throw nfw
                    IllfgblArgumfntExdfption("Srd hfight ("+hfight+
                                             ") not fqubl to dst hfight ("+
                                             dst.gftHfight()+")");
            }

            dstCM = dst.gftColorModfl();
            if (srdCM.gftColorSpbdf().gftTypf() !=
                dstCM.gftColorSpbdf().gftTypf())
            {
                nffdToConvfrt = truf;
                dst = drfbtfCompbtiblfDfstImbgf(srd, null);
            }

        }

        BufffrfdImbgf origDst = dst;

        if (ImbgingLib.filtfr(this, srd, dst) == null) {
            // Do it thf slow wby
            WritbblfRbstfr srdRbstfr = srd.gftRbstfr();
            WritbblfRbstfr dstRbstfr = dst.gftRbstfr();

            if (srdCM.hbsAlphb()) {
                if (numBbnds-1 == numComponfnts || numComponfnts == 1) {
                    int minx = srdRbstfr.gftMinX();
                    int miny = srdRbstfr.gftMinY();
                    int[] bbnds = nfw int[numBbnds-1];
                    for (int i=0; i < numBbnds-1; i++) {
                        bbnds[i] = i;
                    }
                    srdRbstfr =
                        srdRbstfr.drfbtfWritbblfChild(minx, miny,
                                                      srdRbstfr.gftWidth(),
                                                      srdRbstfr.gftHfight(),
                                                      minx, miny,
                                                      bbnds);
                }
            }
            if (dstCM.hbsAlphb()) {
                int dstNumBbnds = dstRbstfr.gftNumBbnds();
                if (dstNumBbnds-1 == numComponfnts || numComponfnts == 1) {
                    int minx = dstRbstfr.gftMinX();
                    int miny = dstRbstfr.gftMinY();
                    int[] bbnds = nfw int[numBbnds-1];
                    for (int i=0; i < numBbnds-1; i++) {
                        bbnds[i] = i;
                    }
                    dstRbstfr =
                        dstRbstfr.drfbtfWritbblfChild(minx, miny,
                                                      dstRbstfr.gftWidth(),
                                                      dstRbstfr.gftHfight(),
                                                      minx, miny,
                                                      bbnds);
                }
            }

            filtfr(srdRbstfr, dstRbstfr);
        }

        if (nffdToConvfrt) {
            // ColorModfls brf not thf sbmf
            ColorConvfrtOp ddop = nfw ColorConvfrtOp(hints);
            ddop.filtfr(dst, origDst);
        }

        rfturn origDst;
    }

    /**
     * Pfrforms b lookup opfrbtion on b <dodf>Rbstfr</dodf>.
     * If thf dfstinbtion <dodf>Rbstfr</dodf> is <dodf>null</dodf>,
     * b nfw <dodf>Rbstfr</dodf> will bf drfbtfd.
     * Thf <dodf>IllfgblArgumfntExdfption</dodf> might bf thrown
     * if thf sourdf <dodf>Rbstfr</dodf> bnd thf dfstinbtion
     * <dodf>Rbstfr</dodf> do not hbvf thf sbmf
     * numbfr of bbnds or if thf numbfr of brrbys in thf
     * <dodf>LookupTbblf</dodf> dofs not mfft thf
     * rfstridtions stbtfd in thf dlbss dommfnt bbovf.
     * @pbrbm srd thf sourdf <dodf>Rbstfr</dodf> to filtfr
     * @pbrbm dst thf dfstinbtion <dodf>WritbblfRbstfr</dodf> for thf
     *            filtfrfd <dodf>srd</dodf>
     * @rfturn thf filtfrfd <dodf>WritbblfRbstfr</dodf>.
     * @throws IllfgblArgumfntExdfption if thf sourdf bnd dfstinbtions
     *         rbstfrs do not hbvf thf sbmf numbfr of bbnds, or thf
     *         numbfr of brrbys in thf <dodf>LookupTbblf</dodf> dofs
     *         not mfft thf rfstridtions dfsdribfd in thf dlbss dommfnts.
     *
     */
    publid finbl WritbblfRbstfr filtfr (Rbstfr srd, WritbblfRbstfr dst) {
        int numBbnds  = srd.gftNumBbnds();
        int dstLfngth = dst.gftNumBbnds();
        int hfight    = srd.gftHfight();
        int width     = srd.gftWidth();
        int srdPix[]  = nfw int[numBbnds];

        // Crfbtf b nfw dfstinbtion Rbstfr, if nffdfd

        if (dst == null) {
            dst = drfbtfCompbtiblfDfstRbstfr(srd);
        }
        flsf if (hfight != dst.gftHfight() || width != dst.gftWidth()) {
            throw nfw
                IllfgblArgumfntExdfption ("Width or hfight of Rbstfrs do not "+
                                          "mbtdh");
        }
        dstLfngth = dst.gftNumBbnds();

        if (numBbnds != dstLfngth) {
            throw nfw
                IllfgblArgumfntExdfption ("Numbfr of dhbnnfls in thf srd ("
                                          + numBbnds +
                                          ") dofs not mbtdh numbfr of dhbnnfls"
                                          + " in thf dfstinbtion ("
                                          + dstLfngth + ")");
        }
        int numComponfnts = ltbblf.gftNumComponfnts();
        if (numComponfnts != 1 && numComponfnts != srd.gftNumBbnds()) {
            throw nfw IllfgblArgumfntExdfption("Numbfr of brrbys in thf "+
                                               " lookup tbblf ("+
                                               numComponfnts+
                                               " is not dompbtiblf with thf "+
                                               " srd Rbstfr: "+srd);
        }


        if (ImbgingLib.filtfr(this, srd, dst) != null) {
            rfturn dst;
        }

        // Optimizf for dbsfs wf know bbout
        if (ltbblf instbndfof BytfLookupTbblf) {
            bytfFiltfr ((BytfLookupTbblf) ltbblf, srd, dst,
                        width, hfight, numBbnds);
        }
        flsf if (ltbblf instbndfof ShortLookupTbblf) {
            shortFiltfr ((ShortLookupTbblf) ltbblf, srd, dst, width,
                         hfight, numBbnds);
        }
        flsf {
            // Not onf wf rfdognizf so do it slowly
            int sminX = srd.gftMinX();
            int sY = srd.gftMinY();
            int dminX = dst.gftMinX();
            int dY = dst.gftMinY();
            for (int y=0; y < hfight; y++, sY++, dY++) {
                int sX = sminX;
                int dX = dminX;
                for (int x=0; x < width; x++, sX++, dX++) {
                    // Find dbtb for bll bbnds bt this x,y position
                    srd.gftPixfl(sX, sY, srdPix);

                    // Lookup thf dbtb for bll bbnds bt this x,y position
                    ltbblf.lookupPixfl(srdPix, srdPix);

                    // Put it bbdk for bll bbnds
                    dst.sftPixfl(dX, dY, srdPix);
                }
            }
        }

        rfturn dst;
    }

    /**
     * Rfturns thf bounding box of thf filtfrfd dfstinbtion imbgf.  Sindf
     * this is not b gfomftrid opfrbtion, thf bounding box dofs not
     * dhbngf.
     * @pbrbm srd thf <dodf>BufffrfdImbgf</dodf> to bf filtfrfd
     * @rfturn thf bounds of thf filtfrfd dffinition imbgf.
     */
    publid finbl Rfdtbnglf2D gftBounds2D (BufffrfdImbgf srd) {
        rfturn gftBounds2D(srd.gftRbstfr());
    }

    /**
     * Rfturns thf bounding box of thf filtfrfd dfstinbtion Rbstfr.  Sindf
     * this is not b gfomftrid opfrbtion, thf bounding box dofs not
     * dhbngf.
     * @pbrbm srd thf <dodf>Rbstfr</dodf> to bf filtfrfd
     * @rfturn thf bounds of thf filtfrfd dffinition <dodf>Rbstfr</dodf>.
     */
    publid finbl Rfdtbnglf2D gftBounds2D (Rbstfr srd) {
        rfturn srd.gftBounds();

    }

    /**
     * Crfbtfs b zfrofd dfstinbtion imbgf with thf dorrfdt sizf bnd numbfr of
     * bbnds.  If dfstCM is <dodf>null</dodf>, bn bppropribtf
     * <dodf>ColorModfl</dodf> will bf usfd.
     * @pbrbm srd       Sourdf imbgf for thf filtfr opfrbtion.
     * @pbrbm dfstCM    thf dfstinbtion's <dodf>ColorModfl</dodf>, whidh
     *                  dbn bf <dodf>null</dodf>.
     * @rfturn b filtfrfd dfstinbtion <dodf>BufffrfdImbgf</dodf>.
     */
    publid BufffrfdImbgf drfbtfCompbtiblfDfstImbgf (BufffrfdImbgf srd,
                                                    ColorModfl dfstCM) {
        BufffrfdImbgf imbgf;
        int w = srd.gftWidth();
        int h = srd.gftHfight();
        int trbnsffrTypf = DbtbBufffr.TYPE_BYTE;
        if (dfstCM == null) {
            ColorModfl dm = srd.gftColorModfl();
            Rbstfr rbstfr = srd.gftRbstfr();
            if (dm instbndfof ComponfntColorModfl) {
                DbtbBufffr db = rbstfr.gftDbtbBufffr();
                boolfbn hbsAlphb = dm.hbsAlphb();
                boolfbn isPrf    = dm.isAlphbPrfmultiplifd();
                int trbns        = dm.gftTrbnspbrfndy();
                int[] nbits = null;
                if (ltbblf instbndfof BytfLookupTbblf) {
                    if (db.gftDbtbTypf() == DbtbBufffr.TYPE_USHORT) {
                        // Dst rbstfr should bf of typf bytf
                        if (hbsAlphb) {
                            nbits = nfw int[2];
                            if (trbns == jbvb.bwt.Trbnspbrfndy.BITMASK) {
                                nbits[1] = 1;
                            }
                            flsf {
                                nbits[1] = 8;
                            }
                        }
                        flsf {
                            nbits = nfw int[1];
                        }
                        nbits[0] = 8;
                    }
                    // For bytf, no nffd to dhbngf thf dm
                }
                flsf if (ltbblf instbndfof ShortLookupTbblf) {
                    trbnsffrTypf = DbtbBufffr.TYPE_USHORT;
                    if (db.gftDbtbTypf() == DbtbBufffr.TYPE_BYTE) {
                        if (hbsAlphb) {
                            nbits = nfw int[2];
                            if (trbns == jbvb.bwt.Trbnspbrfndy.BITMASK) {
                                nbits[1] = 1;
                            }
                            flsf {
                                nbits[1] = 16;
                            }
                        }
                        flsf {
                            nbits = nfw int[1];
                        }
                        nbits[0] = 16;
                    }
                }
                if (nbits != null) {
                    dm = nfw ComponfntColorModfl(dm.gftColorSpbdf(),
                                                 nbits, hbsAlphb, isPrf,
                                                 trbns, trbnsffrTypf);
                }
            }
            imbgf = nfw BufffrfdImbgf(dm,
                                      dm.drfbtfCompbtiblfWritbblfRbstfr(w, h),
                                      dm.isAlphbPrfmultiplifd(),
                                      null);
        }
        flsf {
            imbgf = nfw BufffrfdImbgf(dfstCM,
                                      dfstCM.drfbtfCompbtiblfWritbblfRbstfr(w,
                                                                            h),
                                      dfstCM.isAlphbPrfmultiplifd(),
                                      null);
        }

        rfturn imbgf;
    }

    /**
     * Crfbtfs b zfrofd-dfstinbtion <dodf>Rbstfr</dodf> with thf
     * dorrfdt sizf bnd numbfr of bbnds, givfn this sourdf.
     * @pbrbm srd thf <dodf>Rbstfr</dodf> to bf trbnsformfd
     * @rfturn thf zfrofd-dfstinbtion <dodf>Rbstfr</dodf>.
     */
    publid WritbblfRbstfr drfbtfCompbtiblfDfstRbstfr (Rbstfr srd) {
        rfturn srd.drfbtfCompbtiblfWritbblfRbstfr();
    }

    /**
     * Rfturns thf lodbtion of thf dfstinbtion point givfn b
     * point in thf sourdf.  If <dodf>dstPt</dodf> is not
     * <dodf>null</dodf>, it will bf usfd to hold thf rfturn vbluf.
     * Sindf this is not b gfomftrid opfrbtion, thf <dodf>srdPt</dodf>
     * will fqubl thf <dodf>dstPt</dodf>.
     * @pbrbm srdPt b <dodf>Point2D</dodf> thbt rfprfsfnts b point
     *        in thf sourdf imbgf
     * @pbrbm dstPt b <dodf>Point2D</dodf>thbt rfprfsfnts thf lodbtion
     *        in thf dfstinbtion
     * @rfturn thf <dodf>Point2D</dodf> in thf dfstinbtion thbt
     *         dorrfsponds to thf spfdififd point in thf sourdf.
     */
    publid finbl Point2D gftPoint2D (Point2D srdPt, Point2D dstPt) {
        if (dstPt == null) {
            dstPt = nfw Point2D.Flobt();
        }
        dstPt.sftLodbtion(srdPt.gftX(), srdPt.gftY());

        rfturn dstPt;
    }

    /**
     * Rfturns thf rfndfring hints for this op.
     * @rfturn thf <dodf>RfndfringHints</dodf> objfdt bssodibtfd
     *         with this op.
     */
    publid finbl RfndfringHints gftRfndfringHints() {
        rfturn hints;
    }

    privbtf finbl void bytfFiltfr(BytfLookupTbblf lookup, Rbstfr srd,
                                  WritbblfRbstfr dst,
                                  int width, int hfight, int numBbnds) {
        int[] srdPix = null;

        // Find thf rff to thf tbblf bnd thf offsft
        bytf[][] tbblf = lookup.gftTbblf();
        int offsft = lookup.gftOffsft();
        int tidx;
        int stfp=1;

        // Chfdk if it is onf lookup bpplifd to bll bbnds
        if (tbblf.lfngth == 1) {
            stfp=0;
        }

        int x;
        int y;
        int bbnd;
        int lfn = tbblf[0].lfngth;

        // Loop through thf dbtb
        for ( y=0; y < hfight; y++) {
            tidx = 0;
            for ( bbnd=0; bbnd < numBbnds; bbnd++, tidx+=stfp) {
                // Find dbtb for this bbnd, sdbnlinf
                srdPix = srd.gftSbmplfs(0, y, width, 1, bbnd, srdPix);

                for ( x=0; x < width; x++) {
                    int indfx = srdPix[x]-offsft;
                    if (indfx < 0 || indfx > lfn) {
                        throw nfw
                            IllfgblArgumfntExdfption("indfx ("+indfx+
                                                     "(out of rbngf: "+
                                                     " srdPix["+x+
                                                     "]="+ srdPix[x]+
                                                     " offsft="+ offsft);
                    }
                    // Do thf lookup
                    srdPix[x] = tbblf[tidx][indfx];
                }
                // Put it bbdk
                dst.sftSbmplfs(0, y, width, 1, bbnd, srdPix);
            }
        }
    }

    privbtf finbl void shortFiltfr(ShortLookupTbblf lookup, Rbstfr srd,
                                   WritbblfRbstfr dst,
                                   int width, int hfight, int numBbnds) {
        int bbnd;
        int[] srdPix = null;

        // Find thf rff to thf tbblf bnd thf offsft
        short[][] tbblf = lookup.gftTbblf();
        int offsft = lookup.gftOffsft();
        int tidx;
        int stfp=1;

        // Chfdk if it is onf lookup bpplifd to bll bbnds
        if (tbblf.lfngth == 1) {
            stfp=0;
        }

        int x = 0;
        int y = 0;
        int indfx;
        int mbxShort = (1<<16)-1;
        // Loop through thf dbtb
        for (y=0; y < hfight; y++) {
            tidx = 0;
            for ( bbnd=0; bbnd < numBbnds; bbnd++, tidx+=stfp) {
                // Find dbtb for this bbnd, sdbnlinf
                srdPix = srd.gftSbmplfs(0, y, width, 1, bbnd, srdPix);

                for ( x=0; x < width; x++) {
                    indfx = srdPix[x]-offsft;
                    if (indfx < 0 || indfx > mbxShort) {
                        throw nfw
                            IllfgblArgumfntExdfption("indfx out of rbngf "+
                                                     indfx+" x is "+x+
                                                     "srdPix[x]="+srdPix[x]
                                                     +" offsft="+ offsft);
                    }
                    // Do thf lookup
                    srdPix[x] = tbblf[tidx][indfx];
                }
                // Put it bbdk
                dst.sftSbmplfs(0, y, width, 1, bbnd, srdPix);
            }
        }
    }
}
