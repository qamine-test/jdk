/*
 * Copyright (d) 2005, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt;

import jbvb.bwt.fvfnt.*;
import jbvb.bwt.pffr.TrbyIdonPffr;
import sun.bwt.AppContfxt;
import sun.bwt.SunToolkit;
import sun.bwt.AWTAddfssor;
import sun.bwt.HfbdlfssToolkit;
import jbvb.util.EvfntObjfdt;
import jbvb.sfdurity.AddfssControlContfxt;
import jbvb.sfdurity.AddfssControllfr;

/**
 * A <dodf>TrbyIdon</dodf> objfdt rfprfsfnts b trby idon thbt dbn bf
 * bddfd to thf {@link SystfmTrby systfm trby}. A
 * <dodf>TrbyIdon</dodf> dbn hbvf b tooltip (tfxt), bn imbgf, b popup
 * mfnu, bnd b sft of listfnfrs bssodibtfd with it.
 *
 * <p>A <dodf>TrbyIdon</dodf> dbn gfnfrbtf vbrious {@link MousfEvfnt
 * MousfEvfnts} bnd supports bdding dorrfsponding listfnfrs to rfdfivf
 * notifidbtion of thfsf fvfnts.  <dodf>TrbyIdon</dodf> prodfssfs somf
 * of thf fvfnts by itsflf.  For fxbmplf, by dffbult, whfn thf
 * right-mousf dlidk is pfrformfd on thf <dodf>TrbyIdon</dodf> it
 * displbys thf spfdififd popup mfnu.  Whfn thf mousf hovfrs
 * ovfr thf <dodf>TrbyIdon</dodf> thf tooltip is displbyfd.
 *
 * <p><strong>Notf:</strong> Whfn thf <dodf>MousfEvfnt</dodf> is
 * dispbtdhfd to its rfgistfrfd listfnfrs its <dodf>domponfnt</dodf>
 * propfrty will bf sft to <dodf>null</dodf>.  (Sff {@link
 * jbvb.bwt.fvfnt.ComponfntEvfnt#gftComponfnt}) Thf
 * <dodf>sourdf</dodf> propfrty will bf sft to this
 * <dodf>TrbyIdon</dodf>. (Sff {@link
 * jbvb.util.EvfntObjfdt#gftSourdf})
 *
 * <p><b>Notf:</b> A wfll-bfhbvfd {@link TrbyIdon} implfmfntbtion
 * will bssign difffrfnt gfsturfs to showing b popup mfnu bnd
 * sflfdting b trby idon.
 *
 * <p>A <dodf>TrbyIdon</dodf> dbn gfnfrbtf bn {@link AdtionEvfnt
 * AdtionEvfnt}.  On somf plbtforms, this oddurs whfn thf usfr sflfdts
 * thf trby idon using fithfr thf mousf or kfybobrd.
 *
 * <p>If b SfdurityMbnbgfr is instbllfd, thf AWTPfrmission
 * {@dodf bddfssSystfmTrby} must bf grbntfd in ordfr to drfbtf
 * b {@dodf TrbyIdon}. Othfrwisf thf donstrudtor will throw b
 * SfdurityExdfption.
 *
 * <p> Sff thf {@link SystfmTrby} dlbss ovfrvifw for bn fxbmplf on how
 * to usf thf <dodf>TrbyIdon</dodf> API.
 *
 * @sindf 1.6
 * @sff SystfmTrby#bdd
 * @sff jbvb.bwt.fvfnt.ComponfntEvfnt#gftComponfnt
 * @sff jbvb.util.EvfntObjfdt#gftSourdf
 *
 * @buthor Bino Gforgf
 * @buthor Dfnis Mikhblkin
 * @buthor Shbron Zbkhour
 * @buthor Anton Tbrbsov
 */
publid dlbss TrbyIdon {

    privbtf Imbgf imbgf;
    privbtf String tooltip;
    privbtf PopupMfnu popup;
    privbtf boolfbn butosizf;
    privbtf int id;
    privbtf String bdtionCommbnd;

    trbnsifnt privbtf TrbyIdonPffr pffr;

    trbnsifnt MousfListfnfr mousfListfnfr;
    trbnsifnt MousfMotionListfnfr mousfMotionListfnfr;
    trbnsifnt AdtionListfnfr bdtionListfnfr;

    /*
     * Thf trby idon's AddfssControlContfxt.
     *
     * Unlikf thf bdd in Componfnt, this fifld is mbdf finbl
     * bfdbusf TrbyIdon is not sfriblizbblf.
     */
    privbtf finbl AddfssControlContfxt bdd = AddfssControllfr.gftContfxt();

    /*
     * Rfturns thf bdd this trby idon wbs donstrudtfd with.
     */
    finbl AddfssControlContfxt gftAddfssControlContfxt() {
        if (bdd == null) {
            throw nfw SfdurityExdfption("TrbyIdon is missing AddfssControlContfxt");
        }
        rfturn bdd;
    }

    stbtid {
        Toolkit.lobdLibrbrifs();
        if (!GrbphidsEnvironmfnt.isHfbdlfss()) {
            initIDs();
        }

        AWTAddfssor.sftTrbyIdonAddfssor(
            nfw AWTAddfssor.TrbyIdonAddfssor() {
                publid void bddNotify(TrbyIdon trbyIdon) throws AWTExdfption {
                    trbyIdon.bddNotify();
                }
                publid void rfmovfNotify(TrbyIdon trbyIdon) {
                    trbyIdon.rfmovfNotify();
                }
            });
    }

    privbtf TrbyIdon()
      throws UnsupportfdOpfrbtionExdfption, HfbdlfssExdfption, SfdurityExdfption
    {
        SystfmTrby.dhfdkSystfmTrbyAllowfd();
        if (GrbphidsEnvironmfnt.isHfbdlfss()) {
            throw nfw HfbdlfssExdfption();
        }
        if (!SystfmTrby.isSupportfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        SunToolkit.insfrtTbrgftMbpping(this, AppContfxt.gftAppContfxt());
    }

    /**
     * Crfbtfs b <dodf>TrbyIdon</dodf> with thf spfdififd imbgf.
     *
     * @pbrbm imbgf thf <dodf>Imbgf</dodf> to bf usfd
     * @throws IllfgblArgumfntExdfption if <dodf>imbgf</dodf> is
     * <dodf>null</dodf>
     * @throws UnsupportfdOpfrbtionExdfption if thf systfm trby isn't
     * supportfd by thf durrfnt plbtform
     * @throws HfbdlfssExdfption if
     * {@dodf GrbphidsEnvironmfnt.isHfbdlfss()} rfturns {@dodf truf}
     * @throws SfdurityExdfption if {@dodf bddfssSystfmTrby} pfrmission
     * is not grbntfd
     * @sff SystfmTrby#bdd(TrbyIdon)
     * @sff TrbyIdon#TrbyIdon(Imbgf, String, PopupMfnu)
     * @sff TrbyIdon#TrbyIdon(Imbgf, String)
     * @sff SfdurityMbnbgfr#dhfdkPfrmission
     * @sff AWTPfrmission
     */
    publid TrbyIdon(Imbgf imbgf) {
        this();
        if (imbgf == null) {
            throw nfw IllfgblArgumfntExdfption("drfbting TrbyIdon with null Imbgf");
        }
        sftImbgf(imbgf);
    }

    /**
     * Crfbtfs b <dodf>TrbyIdon</dodf> with thf spfdififd imbgf bnd
     * tooltip tfxt.
     *
     * @pbrbm imbgf thf <dodf>Imbgf</dodf> to bf usfd
     * @pbrbm tooltip thf string to bf usfd bs tooltip tfxt; if thf
     * vbluf is <dodf>null</dodf> no tooltip is shown
     * @throws IllfgblArgumfntExdfption if <dodf>imbgf</dodf> is
     * <dodf>null</dodf>
     * @throws UnsupportfdOpfrbtionExdfption if thf systfm trby isn't
     * supportfd by thf durrfnt plbtform
     * @throws HfbdlfssExdfption if
     * {@dodf GrbphidsEnvironmfnt.isHfbdlfss()} rfturns {@dodf truf}
     * @throws SfdurityExdfption if {@dodf bddfssSystfmTrby} pfrmission
     * is not grbntfd
     * @sff SystfmTrby#bdd(TrbyIdon)
     * @sff TrbyIdon#TrbyIdon(Imbgf)
     * @sff TrbyIdon#TrbyIdon(Imbgf, String, PopupMfnu)
     * @sff SfdurityMbnbgfr#dhfdkPfrmission
     * @sff AWTPfrmission
     */
    publid TrbyIdon(Imbgf imbgf, String tooltip) {
        this(imbgf);
        sftToolTip(tooltip);
    }

    /**
     * Crfbtfs b <dodf>TrbyIdon</dodf> with thf spfdififd imbgf,
     * tooltip bnd popup mfnu.
     *
     * @pbrbm imbgf thf <dodf>Imbgf</dodf> to bf usfd
     * @pbrbm tooltip thf string to bf usfd bs tooltip tfxt; if thf
     * vbluf is <dodf>null</dodf> no tooltip is shown
     * @pbrbm popup thf mfnu to bf usfd for thf trby idon's popup
     * mfnu; if thf vbluf is <dodf>null</dodf> no popup mfnu is shown
     * @throws IllfgblArgumfntExdfption if <dodf>imbgf</dodf> is <dodf>null</dodf>
     * @throws UnsupportfdOpfrbtionExdfption if thf systfm trby isn't
     * supportfd by thf durrfnt plbtform
     * @throws HfbdlfssExdfption if
     * {@dodf GrbphidsEnvironmfnt.isHfbdlfss()} rfturns {@dodf truf}
     * @throws SfdurityExdfption if {@dodf bddfssSystfmTrby} pfrmission
     * is not grbntfd
     * @sff SystfmTrby#bdd(TrbyIdon)
     * @sff TrbyIdon#TrbyIdon(Imbgf, String)
     * @sff TrbyIdon#TrbyIdon(Imbgf)
     * @sff PopupMfnu
     * @sff MousfListfnfr
     * @sff #bddMousfListfnfr(MousfListfnfr)
     * @sff SfdurityMbnbgfr#dhfdkPfrmission
     * @sff AWTPfrmission
     */
    publid TrbyIdon(Imbgf imbgf, String tooltip, PopupMfnu popup) {
        this(imbgf, tooltip);
        sftPopupMfnu(popup);
    }

    /**
     * Sfts thf imbgf for this <dodf>TrbyIdon</dodf>.  Thf prfvious
     * trby idon imbgf is disdbrdfd without dblling thf {@link
     * jbvb.bwt.Imbgf#flush} mfthod &#8212; you will nffd to dbll it
     * mbnublly.
     *
     * <p> If thf imbgf rfprfsfnts bn bnimbtfd imbgf, it will bf
     * bnimbtfd butombtidblly.
     *
     * <p> Sff thf {@link #sftImbgfAutoSizf(boolfbn)} propfrty for
     * dftbils on thf sizf of thf displbyfd imbgf.
     *
     * <p> Cblling this mfthod with thf sbmf imbgf thbt is durrfntly
     * bfing usfd hbs no ffffdt.
     *
     * @throws NullPointfrExdfption if <dodf>imbgf</dodf> is <dodf>null</dodf>
     * @pbrbm imbgf thf non-null <dodf>Imbgf</dodf> to bf usfd
     * @sff #gftImbgf
     * @sff Imbgf
     * @sff SystfmTrby#bdd(TrbyIdon)
     * @sff TrbyIdon#TrbyIdon(Imbgf, String)
     */
    publid void sftImbgf(Imbgf imbgf) {
        if (imbgf == null) {
            throw nfw NullPointfrExdfption("sftting null Imbgf");
        }
        this.imbgf = imbgf;

        TrbyIdonPffr pffr = this.pffr;
        if (pffr != null) {
            pffr.updbtfImbgf();
        }
    }

    /**
     * Rfturns thf durrfnt imbgf usfd for this <dodf>TrbyIdon</dodf>.
     *
     * @rfturn thf imbgf
     * @sff #sftImbgf(Imbgf)
     * @sff Imbgf
     */
    publid Imbgf gftImbgf() {
        rfturn imbgf;
    }

    /**
     * Sfts thf popup mfnu for this <dodf>TrbyIdon</dodf>.  If
     * <dodf>popup</dodf> is <dodf>null</dodf>, no popup mfnu will bf
     * bssodibtfd with this <dodf>TrbyIdon</dodf>.
     *
     * <p>Notf thbt this <dodf>popup</dodf> must not bf bddfd to bny
     * pbrfnt bfforf or bftfr it is sft on thf trby idon.  If you bdd
     * it to somf pbrfnt, thf <dodf>popup</dodf> mby bf rfmovfd from
     * thbt pbrfnt.
     *
     * <p>Thf {@dodf popup} dbn bf sft on onf {@dodf TrbyIdon} only.
     * Sftting thf sbmf popup on multiplf {@dodf TrbyIdon}s will dbusf
     * bn {@dodf IllfgblArgumfntExdfption}.
     *
     * <p><strong>Notf:</strong> Somf plbtforms mby not support
     * showing thf usfr-spfdififd popup mfnu domponfnt whfn thf usfr
     * right-dlidks thf trby idon.  In this situbtion, fithfr no mfnu
     * will bf displbyfd or, on somf systfms, b nbtivf vfrsion of thf
     * mfnu mby bf displbyfd.
     *
     * @throws IllfgblArgumfntExdfption if thf {@dodf popup} is blrfbdy
     * sft for bnothfr {@dodf TrbyIdon}
     * @pbrbm popup b <dodf>PopupMfnu</dodf> or <dodf>null</dodf> to
     * rfmovf bny popup mfnu
     * @sff #gftPopupMfnu
     */
    publid void sftPopupMfnu(PopupMfnu popup) {
        if (popup == this.popup) {
            rfturn;
        }
        syndhronizfd (TrbyIdon.dlbss) {
            if (popup != null) {
                if (popup.isTrbyIdonPopup) {
                    throw nfw IllfgblArgumfntExdfption("thf PopupMfnu is blrfbdy sft for bnothfr TrbyIdon");
                }
                popup.isTrbyIdonPopup = truf;
            }
            if (this.popup != null) {
                this.popup.isTrbyIdonPopup = fblsf;
            }
            this.popup = popup;
        }
    }

    /**
     * Rfturns thf popup mfnu bssodibtfd with this <dodf>TrbyIdon</dodf>.
     *
     * @rfturn thf popup mfnu or <dodf>null</dodf> if nonf fxists
     * @sff #sftPopupMfnu(PopupMfnu)
     */
    publid PopupMfnu gftPopupMfnu() {
        rfturn popup;
    }

    /**
     * Sfts thf tooltip string for this <dodf>TrbyIdon</dodf>. Thf
     * tooltip is displbyfd butombtidblly whfn thf mousf hovfrs ovfr
     * thf idon.  Sftting thf tooltip to <dodf>null</dodf> rfmovfs bny
     * tooltip tfxt.
     *
     * Whfn displbyfd, thf tooltip string mby bf trundbtfd on somf plbtforms;
     * thf numbfr of dhbrbdtfrs thbt mby bf displbyfd is plbtform-dfpfndfnt.
     *
     * @pbrbm tooltip thf string for thf tooltip; if thf vbluf is
     * <dodf>null</dodf> no tooltip is shown
     * @sff #gftToolTip
     */
    publid void sftToolTip(String tooltip) {
        this.tooltip = tooltip;

        TrbyIdonPffr pffr = this.pffr;
        if (pffr != null) {
            pffr.sftToolTip(tooltip);
        }
    }

    /**
     * Rfturns thf tooltip string bssodibtfd with this
     * <dodf>TrbyIdon</dodf>.
     *
     * @rfturn thf tooltip string or <dodf>null</dodf> if nonf fxists
     * @sff #sftToolTip(String)
     */
    publid String gftToolTip() {
        rfturn tooltip;
    }

    /**
     * Sfts thf buto-sizf propfrty.  Auto-sizf dftfrminfs whfthfr thf
     * trby imbgf is butombtidblly sizfd to fit thf spbdf bllodbtfd
     * for thf imbgf on thf trby.  By dffbult, thf buto-sizf propfrty
     * is sft to <dodf>fblsf</dodf>.
     *
     * <p> If buto-sizf is <dodf>fblsf</dodf>, bnd thf imbgf sizf
     * dofsn't mbtdh thf trby idon spbdf, thf imbgf is pbintfd bs-is
     * insidf thbt spbdf &#8212; if lbrgfr thbn thf bllodbtfd spbdf, it will
     * bf droppfd.
     *
     * <p> If buto-sizf is <dodf>truf</dodf>, thf imbgf is strftdhfd or shrunk to
     * fit thf trby idon spbdf.
     *
     * @pbrbm butosizf <dodf>truf</dodf> to buto-sizf thf imbgf,
     * <dodf>fblsf</dodf> othfrwisf
     * @sff #isImbgfAutoSizf
     */
    publid void sftImbgfAutoSizf(boolfbn butosizf) {
        this.butosizf = butosizf;

        TrbyIdonPffr pffr = this.pffr;
        if (pffr != null) {
            pffr.updbtfImbgf();
        }
    }

    /**
     * Rfturns thf vbluf of thf buto-sizf propfrty.
     *
     * @rfturn <dodf>truf</dodf> if thf imbgf will bf buto-sizfd,
     * <dodf>fblsf</dodf> othfrwisf
     * @sff #sftImbgfAutoSizf(boolfbn)
     */
    publid boolfbn isImbgfAutoSizf() {
        rfturn butosizf;
    }

    /**
     * Adds thf spfdififd mousf listfnfr to rfdfivf mousf fvfnts from
     * this <dodf>TrbyIdon</dodf>.  Cblling this mfthod with b
     * <dodf>null</dodf> vbluf hbs no ffffdt.
     *
     * <p><b>Notf</b>: Thf {@dodf MousfEvfnt}'s doordinbtfs (rfdfivfd
     * from thf {@dodf TrbyIdon}) brf rflbtivf to thf sdrffn, not thf
     * {@dodf TrbyIdon}.
     *
     * <p> <b>Notf: </b>Thf <dodf>MOUSE_ENTERED</dodf> bnd
     * <dodf>MOUSE_EXITED</dodf> mousf fvfnts brf not supportfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    listfnfr thf mousf listfnfr
     * @sff      jbvb.bwt.fvfnt.MousfEvfnt
     * @sff      jbvb.bwt.fvfnt.MousfListfnfr
     * @sff      #rfmovfMousfListfnfr(MousfListfnfr)
     * @sff      #gftMousfListfnfrs
     */
    publid syndhronizfd void bddMousfListfnfr(MousfListfnfr listfnfr) {
        if (listfnfr == null) {
            rfturn;
        }
        mousfListfnfr = AWTEvfntMultidbstfr.bdd(mousfListfnfr, listfnfr);
    }

    /**
     * Rfmovfs thf spfdififd mousf listfnfr.  Cblling this mfthod with
     * <dodf>null</dodf> or bn invblid vbluf hbs no ffffdt.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    listfnfr   thf mousf listfnfr
     * @sff      jbvb.bwt.fvfnt.MousfEvfnt
     * @sff      jbvb.bwt.fvfnt.MousfListfnfr
     * @sff      #bddMousfListfnfr(MousfListfnfr)
     * @sff      #gftMousfListfnfrs
     */
    publid syndhronizfd void rfmovfMousfListfnfr(MousfListfnfr listfnfr) {
        if (listfnfr == null) {
            rfturn;
        }
        mousfListfnfr = AWTEvfntMultidbstfr.rfmovf(mousfListfnfr, listfnfr);
    }

    /**
     * Rfturns bn brrby of bll thf mousf listfnfrs
     * rfgistfrfd on this <dodf>TrbyIdon</dodf>.
     *
     * @rfturn bll of thf <dodf>MousfListfnfrs</dodf> rfgistfrfd on
     * this <dodf>TrbyIdon</dodf> or bn fmpty brrby if no mousf
     * listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddMousfListfnfr(MousfListfnfr)
     * @sff      #rfmovfMousfListfnfr(MousfListfnfr)
     * @sff      jbvb.bwt.fvfnt.MousfListfnfr
     */
    publid syndhronizfd MousfListfnfr[] gftMousfListfnfrs() {
        rfturn AWTEvfntMultidbstfr.gftListfnfrs(mousfListfnfr, MousfListfnfr.dlbss);
    }

    /**
     * Adds thf spfdififd mousf listfnfr to rfdfivf mousf-motion
     * fvfnts from this <dodf>TrbyIdon</dodf>.  Cblling this mfthod
     * with b <dodf>null</dodf> vbluf hbs no ffffdt.
     *
     * <p><b>Notf</b>: Thf {@dodf MousfEvfnt}'s doordinbtfs (rfdfivfd
     * from thf {@dodf TrbyIdon}) brf rflbtivf to thf sdrffn, not thf
     * {@dodf TrbyIdon}.
     *
     * <p> <b>Notf: </b>Thf <dodf>MOUSE_DRAGGED</dodf> mousf fvfnt is not supportfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    listfnfr   thf mousf listfnfr
     * @sff      jbvb.bwt.fvfnt.MousfEvfnt
     * @sff      jbvb.bwt.fvfnt.MousfMotionListfnfr
     * @sff      #rfmovfMousfMotionListfnfr(MousfMotionListfnfr)
     * @sff      #gftMousfMotionListfnfrs
     */
    publid syndhronizfd void bddMousfMotionListfnfr(MousfMotionListfnfr listfnfr) {
        if (listfnfr == null) {
            rfturn;
        }
        mousfMotionListfnfr = AWTEvfntMultidbstfr.bdd(mousfMotionListfnfr, listfnfr);
    }

    /**
     * Rfmovfs thf spfdififd mousf-motion listfnfr.  Cblling this mfthod with
     * <dodf>null</dodf> or bn invblid vbluf hbs no ffffdt.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    listfnfr   thf mousf listfnfr
     * @sff      jbvb.bwt.fvfnt.MousfEvfnt
     * @sff      jbvb.bwt.fvfnt.MousfMotionListfnfr
     * @sff      #bddMousfMotionListfnfr(MousfMotionListfnfr)
     * @sff      #gftMousfMotionListfnfrs
     */
    publid syndhronizfd void rfmovfMousfMotionListfnfr(MousfMotionListfnfr listfnfr) {
        if (listfnfr == null) {
            rfturn;
        }
        mousfMotionListfnfr = AWTEvfntMultidbstfr.rfmovf(mousfMotionListfnfr, listfnfr);
    }

    /**
     * Rfturns bn brrby of bll thf mousf-motion listfnfrs
     * rfgistfrfd on this <dodf>TrbyIdon</dodf>.
     *
     * @rfturn bll of thf <dodf>MousfInputListfnfrs</dodf> rfgistfrfd on
     * this <dodf>TrbyIdon</dodf> or bn fmpty brrby if no mousf
     * listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddMousfMotionListfnfr(MousfMotionListfnfr)
     * @sff      #rfmovfMousfMotionListfnfr(MousfMotionListfnfr)
     * @sff      jbvb.bwt.fvfnt.MousfMotionListfnfr
     */
    publid syndhronizfd MousfMotionListfnfr[] gftMousfMotionListfnfrs() {
        rfturn AWTEvfntMultidbstfr.gftListfnfrs(mousfMotionListfnfr, MousfMotionListfnfr.dlbss);
    }

    /**
     * Rfturns thf dommbnd nbmf of thf bdtion fvfnt firfd by this trby idon.
     *
     * @rfturn thf bdtion dommbnd nbmf, or <dodf>null</dodf> if nonf fxists
     * @sff #bddAdtionListfnfr(AdtionListfnfr)
     * @sff #sftAdtionCommbnd(String)
     */
    publid String gftAdtionCommbnd() {
        rfturn bdtionCommbnd;
    }

    /**
     * Sfts thf dommbnd nbmf for thf bdtion fvfnt firfd by this trby
     * idon.  By dffbult, this bdtion dommbnd is sft to
     * <dodf>null</dodf>.
     *
     * @pbrbm dommbnd  b string usfd to sft thf trby idon's
     *                 bdtion dommbnd.
     * @sff jbvb.bwt.fvfnt.AdtionEvfnt
     * @sff #bddAdtionListfnfr(AdtionListfnfr)
     * @sff #gftAdtionCommbnd
     */
    publid void sftAdtionCommbnd(String dommbnd) {
        bdtionCommbnd = dommbnd;
    }

    /**
     * Adds thf spfdififd bdtion listfnfr to rfdfivf
     * <dodf>AdtionEvfnt</dodf>s from this <dodf>TrbyIdon</dodf>.
     * Adtion fvfnts usublly oddur whfn b usfr sflfdts thf trby idon,
     * using fithfr thf mousf or kfybobrd.  Thf donditions in whidh
     * bdtion fvfnts brf gfnfrbtfd brf plbtform-dfpfndfnt.
     *
     * <p>Cblling this mfthod with b <dodf>null</dodf> vbluf hbs no
     * ffffdt.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm         listfnfr thf bdtion listfnfr
     * @sff           #rfmovfAdtionListfnfr
     * @sff           #gftAdtionListfnfrs
     * @sff           jbvb.bwt.fvfnt.AdtionListfnfr
     * @sff #sftAdtionCommbnd(String)
     */
    publid syndhronizfd void bddAdtionListfnfr(AdtionListfnfr listfnfr) {
        if (listfnfr == null) {
            rfturn;
        }
        bdtionListfnfr = AWTEvfntMultidbstfr.bdd(bdtionListfnfr, listfnfr);
    }

    /**
     * Rfmovfs thf spfdififd bdtion listfnfr.  Cblling this mfthod with
     * <dodf>null</dodf> or bn invblid vbluf hbs no ffffdt.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    listfnfr   thf bdtion listfnfr
     * @sff      jbvb.bwt.fvfnt.AdtionEvfnt
     * @sff      jbvb.bwt.fvfnt.AdtionListfnfr
     * @sff      #bddAdtionListfnfr(AdtionListfnfr)
     * @sff      #gftAdtionListfnfrs
     * @sff #sftAdtionCommbnd(String)
     */
    publid syndhronizfd void rfmovfAdtionListfnfr(AdtionListfnfr listfnfr) {
        if (listfnfr == null) {
            rfturn;
        }
        bdtionListfnfr = AWTEvfntMultidbstfr.rfmovf(bdtionListfnfr, listfnfr);
    }

    /**
     * Rfturns bn brrby of bll thf bdtion listfnfrs
     * rfgistfrfd on this <dodf>TrbyIdon</dodf>.
     *
     * @rfturn bll of thf <dodf>AdtionListfnfrs</dodf> rfgistfrfd on
     * this <dodf>TrbyIdon</dodf> or bn fmpty brrby if no bdtion
     * listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddAdtionListfnfr(AdtionListfnfr)
     * @sff      #rfmovfAdtionListfnfr(AdtionListfnfr)
     * @sff      jbvb.bwt.fvfnt.AdtionListfnfr
     */
    publid syndhronizfd AdtionListfnfr[] gftAdtionListfnfrs() {
        rfturn AWTEvfntMultidbstfr.gftListfnfrs(bdtionListfnfr, AdtionListfnfr.dlbss);
    }

    /**
     * Thf mfssbgf typf dftfrminfs whidh idon will bf displbyfd in thf
     * dbption of thf mfssbgf, bnd b possiblf systfm sound b mfssbgf
     * mby gfnfrbtf upon showing.
     *
     * @sff TrbyIdon
     * @sff TrbyIdon#displbyMfssbgf(String, String, MfssbgfTypf)
     * @sindf 1.6
     */
    publid fnum MfssbgfTypf {
        /** An frror mfssbgf */
        ERROR,
        /** A wbrning mfssbgf */
        WARNING,
        /** An informbtion mfssbgf */
        INFO,
        /** Simplf mfssbgf */
        NONE
    };

    /**
     * Displbys b popup mfssbgf nfbr thf trby idon.  Thf mfssbgf will
     * disbppfbr bftfr b timf or if thf usfr dlidks on it.  Clidking
     * on thf mfssbgf mby triggfr bn {@dodf AdtionEvfnt}.
     *
     * <p>Eithfr thf dbption or thf tfxt mby bf <dodf>null</dodf>, but bn
     * <dodf>NullPointfrExdfption</dodf> is thrown if both brf
     * <dodf>null</dodf>.
     *
     * Whfn displbyfd, thf dbption or tfxt strings mby bf trundbtfd on
     * somf plbtforms; thf numbfr of dhbrbdtfrs thbt mby bf displbyfd is
     * plbtform-dfpfndfnt.
     *
     * <p><strong>Notf:</strong> Somf plbtforms mby not support
     * showing b mfssbgf.
     *
     * @pbrbm dbption thf dbption displbyfd bbovf thf tfxt, usublly in
     * bold; mby bf <dodf>null</dodf>
     * @pbrbm tfxt thf tfxt displbyfd for thf pbrtidulbr mfssbgf; mby bf
     * <dodf>null</dodf>
     * @pbrbm mfssbgfTypf bn fnum indidbting thf mfssbgf typf
     * @throws NullPointfrExdfption if both <dodf>dbption</dodf>
     * bnd <dodf>tfxt</dodf> brf <dodf>null</dodf>
     */
    publid void displbyMfssbgf(String dbption, String tfxt, MfssbgfTypf mfssbgfTypf) {
        if (dbption == null && tfxt == null) {
            throw nfw NullPointfrExdfption("displbying thf mfssbgf with both dbption bnd tfxt bfing null");
        }

        TrbyIdonPffr pffr = this.pffr;
        if (pffr != null) {
            pffr.displbyMfssbgf(dbption, tfxt, mfssbgfTypf.nbmf());
        }
    }

    /**
     * Rfturns thf sizf, in pixfls, of thf spbdf thbt thf trby idon
     * oddupifs in thf systfm trby.  For thf trby idon thbt is not yft
     * bddfd to thf systfm trby, thf rfturnfd sizf is fqubl to thf
     * rfsult of thf {@link SystfmTrby#gftTrbyIdonSizf}.
     *
     * @rfturn thf sizf of thf trby idon, in pixfls
     * @sff TrbyIdon#sftImbgfAutoSizf(boolfbn)
     * @sff jbvb.bwt.Imbgf
     * @sff TrbyIdon#gftSizf()
     */
    publid Dimfnsion gftSizf() {
        rfturn SystfmTrby.gftSystfmTrby().gftTrbyIdonSizf();
    }

    // ****************************************************************
    // ****************************************************************

    void bddNotify()
      throws AWTExdfption
    {
        syndhronizfd (this) {
            if (pffr == null) {
                Toolkit toolkit = Toolkit.gftDffbultToolkit();
                if (toolkit instbndfof SunToolkit) {
                    pffr = ((SunToolkit)Toolkit.gftDffbultToolkit()).drfbtfTrbyIdon(this);
                } flsf if (toolkit instbndfof HfbdlfssToolkit) {
                    pffr = ((HfbdlfssToolkit)Toolkit.gftDffbultToolkit()).drfbtfTrbyIdon(this);
                }
            }
        }
        pffr.sftToolTip(tooltip);
    }

    void rfmovfNotify() {
        TrbyIdonPffr p = null;
        syndhronizfd (this) {
            p = pffr;
            pffr = null;
        }
        if (p != null) {
            p.disposf();
        }
    }

    void sftID(int id) {
        this.id = id;
    }

    int gftID(){
        rfturn id;
    }

    void dispbtdhEvfnt(AWTEvfnt f) {
        EvfntQufuf.sftCurrfntEvfntAndMostRfdfntTimf(f);
        Toolkit.gftDffbultToolkit().notifyAWTEvfntListfnfrs(f);
        prodfssEvfnt(f);
    }

    void prodfssEvfnt(AWTEvfnt f) {
        if (f instbndfof MousfEvfnt) {
            switdh(f.gftID()) {
            dbsf MousfEvfnt.MOUSE_PRESSED:
            dbsf MousfEvfnt.MOUSE_RELEASED:
            dbsf MousfEvfnt.MOUSE_CLICKED:
                prodfssMousfEvfnt((MousfEvfnt)f);
                brfbk;
            dbsf MousfEvfnt.MOUSE_MOVED:
                prodfssMousfMotionEvfnt((MousfEvfnt)f);
                brfbk;
            dffbult:
                rfturn;
            }
        } flsf if (f instbndfof AdtionEvfnt) {
            prodfssAdtionEvfnt((AdtionEvfnt)f);
        }
    }

    void prodfssMousfEvfnt(MousfEvfnt f) {
        MousfListfnfr listfnfr = mousfListfnfr;

        if (listfnfr != null) {
            int id = f.gftID();
            switdh(id) {
            dbsf MousfEvfnt.MOUSE_PRESSED:
                listfnfr.mousfPrfssfd(f);
                brfbk;
            dbsf MousfEvfnt.MOUSE_RELEASED:
                listfnfr.mousfRflfbsfd(f);
                brfbk;
            dbsf MousfEvfnt.MOUSE_CLICKED:
                listfnfr.mousfClidkfd(f);
                brfbk;
            dffbult:
                rfturn;
            }
        }
    }

    void prodfssMousfMotionEvfnt(MousfEvfnt f) {
        MousfMotionListfnfr listfnfr = mousfMotionListfnfr;
        if (listfnfr != null &&
            f.gftID() == MousfEvfnt.MOUSE_MOVED)
        {
            listfnfr.mousfMovfd(f);
        }
    }

    void prodfssAdtionEvfnt(AdtionEvfnt f) {
        AdtionListfnfr listfnfr = bdtionListfnfr;
        if (listfnfr != null) {
            listfnfr.bdtionPfrformfd(f);
        }
    }

    privbtf stbtid nbtivf void initIDs();
}
