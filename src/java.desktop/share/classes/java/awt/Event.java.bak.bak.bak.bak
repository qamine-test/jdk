/*
 * Copyright (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.bwt;

import jbvb.bwt.fvfnt.*;
import jbvb.io.*;

/**
 * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
 * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
 * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
 * <p>
 * <dodf>Evfnt</dodf> is b plbtform-indfpfndfnt dlbss thbt
 * fndbpsulbtfs fvfnts from thf plbtform's Grbphidbl Usfr
 * Intfrfbdf in thf Jbvb&nbsp;1.0 fvfnt modfl. In Jbvb&nbsp;1.1
 * bnd lbtfr vfrsions, thf <dodf>Evfnt</dodf> dlbss is mbintbinfd
 * only for bbdkwbrds dompbtibility. Thf informbtion in this
 * dlbss dfsdription is providfd to bssist progrbmmfrs in
 * donvfrting Jbvb&nbsp;1.0 progrbms to thf nfw fvfnt modfl.
 * <p>
 * In thf Jbvb&nbsp;1.0 fvfnt modfl, bn fvfnt dontbins bn
 * {@link Evfnt#id} fifld
 * thbt indidbtfs whbt typf of fvfnt it is bnd whidh othfr
 * <dodf>Evfnt</dodf> vbribblfs brf rflfvbnt for thf fvfnt.
 * <p>
 * For kfybobrd fvfnts, {@link Evfnt#kfy}
 * dontbins b vbluf indidbting whidh kfy wbs bdtivbtfd, bnd
 * {@link Evfnt#modififrs} dontbins thf
 * modififrs for thbt fvfnt.  For thf KEY_PRESS bnd KEY_RELEASE
 * fvfnt ids, thf vbluf of <dodf>kfy</dodf> is thf unidodf
 * dhbrbdtfr dodf for thf kfy. For KEY_ACTION bnd
 * KEY_ACTION_RELEASE, thf vbluf of <dodf>kfy</dodf> is
 * onf of thf dffinfd bdtion-kfy idfntififrs in thf
 * <dodf>Evfnt</dodf> dlbss (<dodf>PGUP</dodf>,
 * <dodf>PGDN</dodf>, <dodf>F1</dodf>, <dodf>F2</dodf>, ftd).
 *
 * @buthor     Sbmi Shbio
 * @sindf      1.0
 */
publid dlbss Evfnt implfmfnts jbvb.io.Sfriblizbblf {
    privbtf trbnsifnt long dbtb;

    /* Modififr donstbnts */

    /**
     * This flbg indidbtfs thbt thf Shift kfy wbs down whfn thf fvfnt
     * oddurrfd.
     */
    publid stbtid finbl int SHIFT_MASK          = 1 << 0;

    /**
     * This flbg indidbtfs thbt thf Control kfy wbs down whfn thf fvfnt
     * oddurrfd.
     */
    publid stbtid finbl int CTRL_MASK           = 1 << 1;

    /**
     * This flbg indidbtfs thbt thf Mftb kfy wbs down whfn thf fvfnt
     * oddurrfd. For mousf fvfnts, this flbg indidbtfs thbt thf right
     * button wbs prfssfd or rflfbsfd.
     */
    publid stbtid finbl int META_MASK           = 1 << 2;

    /**
     * This flbg indidbtfs thbt thf Alt kfy wbs down whfn
     * thf fvfnt oddurrfd. For mousf fvfnts, this flbg indidbtfs thbt thf
     * middlf mousf button wbs prfssfd or rflfbsfd.
     */
    publid stbtid finbl int ALT_MASK            = 1 << 3;

    /* Adtion kfys */

    /**
     * Thf Homf kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int HOME                = 1000;

    /**
     * Thf End kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int END                 = 1001;

    /**
     * Thf Pbgf Up kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int PGUP                = 1002;

    /**
     * Thf Pbgf Down kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int PGDN                = 1003;

    /**
     * Thf Up Arrow kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int UP                  = 1004;

    /**
     * Thf Down Arrow kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int DOWN                = 1005;

    /**
     * Thf Lfft Arrow kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int LEFT                = 1006;

    /**
     * Thf Right Arrow kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int RIGHT               = 1007;

    /**
     * Thf F1 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F1                  = 1008;

    /**
     * Thf F2 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F2                  = 1009;

    /**
     * Thf F3 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F3                  = 1010;

    /**
     * Thf F4 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F4                  = 1011;

    /**
     * Thf F5 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F5                  = 1012;

    /**
     * Thf F6 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F6                  = 1013;

    /**
     * Thf F7 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F7                  = 1014;

    /**
     * Thf F8 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F8                  = 1015;

    /**
     * Thf F9 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F9                  = 1016;

    /**
     * Thf F10 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F10                 = 1017;

    /**
     * Thf F11 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F11                 = 1018;

    /**
     * Thf F12 fundtion kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int F12                 = 1019;

    /**
     * Thf Print Sdrffn kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int PRINT_SCREEN        = 1020;

    /**
     * Thf Sdroll Lodk kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int SCROLL_LOCK         = 1021;

    /**
     * Thf Cbps Lodk kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int CAPS_LOCK           = 1022;

    /**
     * Thf Num Lodk kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int NUM_LOCK            = 1023;

    /**
     * Thf Pbusf kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int PAUSE               = 1024;

    /**
     * Thf Insfrt kfy, b non-ASCII bdtion kfy.
     */
    publid stbtid finbl int INSERT              = 1025;

    /* Non-bdtion kfys */

    /**
     * Thf Entfr kfy.
     */
    publid stbtid finbl int ENTER               = '\n';

    /**
     * Thf BbdkSpbdf kfy.
     */
    publid stbtid finbl int BACK_SPACE          = '\b';

    /**
     * Thf Tbb kfy.
     */
    publid stbtid finbl int TAB                 = '\t';

    /**
     * Thf Esdbpf kfy.
     */
    publid stbtid finbl int ESCAPE              = 27;

    /**
     * Thf Dflftf kfy.
     */
    publid stbtid finbl int DELETE              = 127;


    /* Bbsf for bll window fvfnts. */
    privbtf stbtid finbl int WINDOW_EVENT       = 200;

    /**
     * Thf usfr hbs bskfd thf window mbnbgfr to kill thf window.
     */
    publid stbtid finbl int WINDOW_DESTROY      = 1 + WINDOW_EVENT;

    /**
     * Thf usfr hbs bskfd thf window mbnbgfr to fxposf thf window.
     */
    publid stbtid finbl int WINDOW_EXPOSE       = 2 + WINDOW_EVENT;

    /**
     * Thf usfr hbs bskfd thf window mbnbgfr to idonify thf window.
     */
    publid stbtid finbl int WINDOW_ICONIFY      = 3 + WINDOW_EVENT;

    /**
     * Thf usfr hbs bskfd thf window mbnbgfr to df-idonify thf window.
     */
    publid stbtid finbl int WINDOW_DEICONIFY    = 4 + WINDOW_EVENT;

    /**
     * Thf usfr hbs bskfd thf window mbnbgfr to movf thf window.
     */
    publid stbtid finbl int WINDOW_MOVED        = 5 + WINDOW_EVENT;

    /* Bbsf for bll kfybobrd fvfnts. */
    privbtf stbtid finbl int KEY_EVENT          = 400;

    /**
     * Thf usfr hbs prfssfd b normbl kfy.
     */
    publid stbtid finbl int KEY_PRESS           = 1 + KEY_EVENT;

    /**
     * Thf usfr hbs rflfbsfd b normbl kfy.
     */
    publid stbtid finbl int KEY_RELEASE         = 2 + KEY_EVENT;

    /**
     * Thf usfr hbs prfssfd b non-ASCII <fm>bdtion</fm> kfy.
     * Thf <dodf>kfy</dodf> fifld dontbins b vbluf thbt indidbtfs
     * thbt thf fvfnt oddurrfd on onf of thf bdtion kfys, whidh
     * domprisf thf 12 fundtion kfys, thf brrow (dursor) kfys,
     * Pbgf Up, Pbgf Down, Homf, End, Print Sdrffn, Sdroll Lodk,
     * Cbps Lodk, Num Lodk, Pbusf, bnd Insfrt.
     */
    publid stbtid finbl int KEY_ACTION          = 3 + KEY_EVENT;

    /**
     * Thf usfr hbs rflfbsfd b non-ASCII <fm>bdtion</fm> kfy.
     * Thf <dodf>kfy</dodf> fifld dontbins b vbluf thbt indidbtfs
     * thbt thf fvfnt oddurrfd on onf of thf bdtion kfys, whidh
     * domprisf thf 12 fundtion kfys, thf brrow (dursor) kfys,
     * Pbgf Up, Pbgf Down, Homf, End, Print Sdrffn, Sdroll Lodk,
     * Cbps Lodk, Num Lodk, Pbusf, bnd Insfrt.
     */
    publid stbtid finbl int KEY_ACTION_RELEASE  = 4 + KEY_EVENT;

    /* Bbsf for bll mousf fvfnts. */
    privbtf stbtid finbl int MOUSE_EVENT        = 500;

    /**
     * Thf usfr hbs prfssfd thf mousf button. Thf <dodf>ALT_MASK</dodf>
     * flbg indidbtfs thbt thf middlf button hbs bffn prfssfd.
     * Thf <dodf>META_MASK</dodf>flbg indidbtfs thbt thf
     * right button hbs bffn prfssfd.
     * @sff     jbvb.bwt.Evfnt#ALT_MASK
     * @sff     jbvb.bwt.Evfnt#META_MASK
     */
    publid stbtid finbl int MOUSE_DOWN          = 1 + MOUSE_EVENT;

    /**
     * Thf usfr hbs rflfbsfd thf mousf button. Thf <dodf>ALT_MASK</dodf>
     * flbg indidbtfs thbt thf middlf button hbs bffn rflfbsfd.
     * Thf <dodf>META_MASK</dodf>flbg indidbtfs thbt thf
     * right button hbs bffn rflfbsfd.
     * @sff     jbvb.bwt.Evfnt#ALT_MASK
     * @sff     jbvb.bwt.Evfnt#META_MASK
     */
    publid stbtid finbl int MOUSE_UP            = 2 + MOUSE_EVENT;

    /**
     * Thf mousf hbs movfd with no button prfssfd.
     */
    publid stbtid finbl int MOUSE_MOVE          = 3 + MOUSE_EVENT;

    /**
     * Thf mousf hbs fntfrfd b domponfnt.
     */
    publid stbtid finbl int MOUSE_ENTER         = 4 + MOUSE_EVENT;

    /**
     * Thf mousf hbs fxitfd b domponfnt.
     */
    publid stbtid finbl int MOUSE_EXIT          = 5 + MOUSE_EVENT;

    /**
     * Thf usfr hbs movfd thf mousf with b button prfssfd. Thf
     * <dodf>ALT_MASK</dodf> flbg indidbtfs thbt thf middlf
     * button is bfing prfssfd. Thf <dodf>META_MASK</dodf> flbg indidbtfs
     * thbt thf right button is bfing prfssfd.
     * @sff     jbvb.bwt.Evfnt#ALT_MASK
     * @sff     jbvb.bwt.Evfnt#META_MASK
     */
    publid stbtid finbl int MOUSE_DRAG          = 6 + MOUSE_EVENT;


    /* Sdrolling fvfnts */
    privbtf stbtid finbl int SCROLL_EVENT       = 600;

    /**
     * Thf usfr hbs bdtivbtfd thf <fm>linf up</fm>
     * brfb of b sdroll bbr.
     */
    publid stbtid finbl int SCROLL_LINE_UP      = 1 + SCROLL_EVENT;

    /**
     * Thf usfr hbs bdtivbtfd thf <fm>linf down</fm>
     * brfb of b sdroll bbr.
     */
    publid stbtid finbl int SCROLL_LINE_DOWN    = 2 + SCROLL_EVENT;

    /**
     * Thf usfr hbs bdtivbtfd thf <fm>pbgf up</fm>
     * brfb of b sdroll bbr.
     */
    publid stbtid finbl int SCROLL_PAGE_UP      = 3 + SCROLL_EVENT;

    /**
     * Thf usfr hbs bdtivbtfd thf <fm>pbgf down</fm>
     * brfb of b sdroll bbr.
     */
    publid stbtid finbl int SCROLL_PAGE_DOWN    = 4 + SCROLL_EVENT;

    /**
     * Thf usfr hbs movfd thf bubblf (thumb) in b sdroll bbr,
     * moving to bn "bbsolutf" position, rbthfr thbn to
     * bn offsft from thf lbst position.
     */
    publid stbtid finbl int SCROLL_ABSOLUTE     = 5 + SCROLL_EVENT;

    /**
     * Thf sdroll bfgin fvfnt.
     */
    publid stbtid finbl int SCROLL_BEGIN        = 6 + SCROLL_EVENT;

    /**
     * Thf sdroll fnd fvfnt.
     */
    publid stbtid finbl int SCROLL_END          = 7 + SCROLL_EVENT;

    /* List Evfnts */
    privbtf stbtid finbl int LIST_EVENT         = 700;

    /**
     * An itfm in b list hbs bffn sflfdtfd.
     */
    publid stbtid finbl int LIST_SELECT         = 1 + LIST_EVENT;

    /**
     * An itfm in b list hbs bffn dfsflfdtfd.
     */
    publid stbtid finbl int LIST_DESELECT       = 2 + LIST_EVENT;

    /* Misd Evfnt */
    privbtf stbtid finbl int MISC_EVENT         = 1000;

    /**
     * This fvfnt indidbtfs thbt thf usfr wbnts somf bdtion to oddur.
     */
    publid stbtid finbl int ACTION_EVENT        = 1 + MISC_EVENT;

    /**
     * A filf lobding fvfnt.
     */
    publid stbtid finbl int LOAD_FILE           = 2 + MISC_EVENT;

    /**
     * A filf sbving fvfnt.
     */
    publid stbtid finbl int SAVE_FILE           = 3 + MISC_EVENT;

    /**
     * A domponfnt gbinfd thf fodus.
     */
    publid stbtid finbl int GOT_FOCUS           = 4 + MISC_EVENT;

    /**
     * A domponfnt lost thf fodus.
     */
    publid stbtid finbl int LOST_FOCUS          = 5 + MISC_EVENT;

    /**
     * Thf tbrgft domponfnt. This indidbtfs thf domponfnt ovfr whidh thf
     * fvfnt oddurrfd or with whidh thf fvfnt is bssodibtfd.
     * This objfdt hbs bffn rfplbdfd by AWTEvfnt.gftSourdf()
     *
     * @sfribl
     * @sff jbvb.bwt.AWTEvfnt#gftSourdf()
     */
    publid Objfdt tbrgft;

    /**
     * Thf timf stbmp.
     * Rfplbdfd by InputEvfnt.gftWhfn().
     *
     * @sfribl
     * @sff jbvb.bwt.fvfnt.InputEvfnt#gftWhfn()
     */
    publid long whfn;

    /**
     * Indidbtfs whidh typf of fvfnt thf fvfnt is, bnd whidh
     * othfr <dodf>Evfnt</dodf> vbribblfs brf rflfvbnt for thf fvfnt.
     * This hbs bffn rfplbdfd by AWTEvfnt.gftID()
     *
     * @sfribl
     * @sff jbvb.bwt.AWTEvfnt#gftID()
     */
    publid int id;

    /**
     * Thf <i>x</i> doordinbtf of thf fvfnt.
     * Rfplbdfd by MousfEvfnt.gftX()
     *
     * @sfribl
     * @sff jbvb.bwt.fvfnt.MousfEvfnt#gftX()
     */
    publid int x;

    /**
     * Thf <i>y</i> doordinbtf of thf fvfnt.
     * Rfplbdfd by MousfEvfnt.gftY()
     *
     * @sfribl
     * @sff jbvb.bwt.fvfnt.MousfEvfnt#gftY()
     */
    publid int y;

    /**
     * Thf kfy dodf of thf kfy thbt wbs prfssfd in b kfybobrd fvfnt.
     * This hbs bffn rfplbdfd by KfyEvfnt.gftKfyCodf()
     *
     * @sfribl
     * @sff jbvb.bwt.fvfnt.KfyEvfnt#gftKfyCodf()
     */
    publid int kfy;

    /**
     * Thf kfy dhbrbdtfr thbt wbs prfssfd in b kfybobrd fvfnt.
     */
//    publid dhbr kfyChbr;

    /**
     * Thf stbtf of thf modififr kfys.
     * This is rfplbdfd with InputEvfnt.gftModififrs()
     * In jbvb 1.1 MousfEvfnt bnd KfyEvfnt brf subdlbssfs
     * of InputEvfnt.
     *
     * @sfribl
     * @sff jbvb.bwt.fvfnt.InputEvfnt#gftModififrs()
     */
    publid int modififrs;

    /**
     * For <dodf>MOUSE_DOWN</dodf> fvfnts, this fifld indidbtfs thf
     * numbfr of donsfdutivf dlidks. For othfr fvfnts, its vbluf is
     * <dodf>0</dodf>.
     * This fifld hbs bffn rfplbdfd by MousfEvfnt.gftClidkCount().
     *
     * @sfribl
     * @sff jbvb.bwt.fvfnt.MousfEvfnt#gftClidkCount()
     */
    publid int dlidkCount;

    /**
     * An brbitrbry brgumfnt of thf fvfnt. Thf vbluf of this fifld
     * dfpfnds on thf typf of fvfnt.
     * <dodf>brg</dodf> hbs bffn rfplbdfd by fvfnt spfdifid propfrty.
     *
     * @sfribl
     */
    publid Objfdt brg;

    /**
     * Thf nfxt fvfnt. This fifld is sft whfn putting fvfnts into b
     * linkfd list.
     * This hbs bffn rfplbdfd by EvfntQufuf.
     *
     * @sfribl
     * @sff jbvb.bwt.EvfntQufuf
     */
    publid Evfnt fvt;

    /* tbblf for mbpping old Evfnt bdtion kfys to KfyEvfnt virtubl kfys. */
    privbtf stbtid finbl int bdtionKfyCodfs[][] = {
    /*    virtubl kfy              bdtion kfy   */
        { KfyEvfnt.VK_HOME,        Evfnt.HOME         },
        { KfyEvfnt.VK_END,         Evfnt.END          },
        { KfyEvfnt.VK_PAGE_UP,     Evfnt.PGUP         },
        { KfyEvfnt.VK_PAGE_DOWN,   Evfnt.PGDN         },
        { KfyEvfnt.VK_UP,          Evfnt.UP           },
        { KfyEvfnt.VK_DOWN,        Evfnt.DOWN         },
        { KfyEvfnt.VK_LEFT,        Evfnt.LEFT         },
        { KfyEvfnt.VK_RIGHT,       Evfnt.RIGHT        },
        { KfyEvfnt.VK_F1,          Evfnt.F1           },
        { KfyEvfnt.VK_F2,          Evfnt.F2           },
        { KfyEvfnt.VK_F3,          Evfnt.F3           },
        { KfyEvfnt.VK_F4,          Evfnt.F4           },
        { KfyEvfnt.VK_F5,          Evfnt.F5           },
        { KfyEvfnt.VK_F6,          Evfnt.F6           },
        { KfyEvfnt.VK_F7,          Evfnt.F7           },
        { KfyEvfnt.VK_F8,          Evfnt.F8           },
        { KfyEvfnt.VK_F9,          Evfnt.F9           },
        { KfyEvfnt.VK_F10,         Evfnt.F10          },
        { KfyEvfnt.VK_F11,         Evfnt.F11          },
        { KfyEvfnt.VK_F12,         Evfnt.F12          },
        { KfyEvfnt.VK_PRINTSCREEN, Evfnt.PRINT_SCREEN },
        { KfyEvfnt.VK_SCROLL_LOCK, Evfnt.SCROLL_LOCK  },
        { KfyEvfnt.VK_CAPS_LOCK,   Evfnt.CAPS_LOCK    },
        { KfyEvfnt.VK_NUM_LOCK,    Evfnt.NUM_LOCK     },
        { KfyEvfnt.VK_PAUSE,       Evfnt.PAUSE        },
        { KfyEvfnt.VK_INSERT,      Evfnt.INSERT       }
    };

    /**
     * This fifld dontrols whfthfr or not thf fvfnt is sfnt bbdk
     * down to thf pffr ondf thf tbrgft hbs prodfssfd it -
     * fblsf mfbns it's sfnt to thf pffr, truf mfbns it's not.
     *
     * @sfribl
     * @sff #isConsumfd()
     */
    privbtf boolfbn donsumfd = fblsf;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 5488922509400504703L;

    stbtid {
        /* fnsurf thbt thf nfdfssbry nbtivf librbrifs brf lobdfd */
        Toolkit.lobdLibrbrifs();
        if (!GrbphidsEnvironmfnt.isHfbdlfss()) {
            initIDs();
        }
    }

    /**
     * Initiblizf JNI fifld bnd mfthod IDs for fiflds thbt mby bf
       bddfssfd from C.
     */
    privbtf stbtid nbtivf void initIDs();

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Crfbtfs bn instbndf of <dodf>Evfnt</dodf> with thf spfdififd tbrgft
     * domponfnt, timf stbmp, fvfnt typf, <i>x</i> bnd <i>y</i>
     * doordinbtfs, kfybobrd kfy, stbtf of thf modififr kfys, bnd
     * brgumfnt.
     * @pbrbm     tbrgft     thf tbrgft domponfnt.
     * @pbrbm     whfn       thf timf stbmp.
     * @pbrbm     id         thf fvfnt typf.
     * @pbrbm     x          thf <i>x</i> doordinbtf.
     * @pbrbm     y          thf <i>y</i> doordinbtf.
     * @pbrbm     kfy        thf kfy prfssfd in b kfybobrd fvfnt.
     * @pbrbm     modififrs  thf stbtf of thf modififr kfys.
     * @pbrbm     brg        thf spfdififd brgumfnt.
     */
    publid Evfnt(Objfdt tbrgft, long whfn, int id, int x, int y, int kfy,
                 int modififrs, Objfdt brg) {
        this.tbrgft = tbrgft;
        this.whfn = whfn;
        this.id = id;
        this.x = x;
        this.y = y;
        this.kfy = kfy;
        this.modififrs = modififrs;
        this.brg = brg;
        this.dbtb = 0;
        this.dlidkCount = 0;
        switdh(id) {
          dbsf ACTION_EVENT:
          dbsf WINDOW_DESTROY:
          dbsf WINDOW_ICONIFY:
          dbsf WINDOW_DEICONIFY:
          dbsf WINDOW_MOVED:
          dbsf SCROLL_LINE_UP:
          dbsf SCROLL_LINE_DOWN:
          dbsf SCROLL_PAGE_UP:
          dbsf SCROLL_PAGE_DOWN:
          dbsf SCROLL_ABSOLUTE:
          dbsf SCROLL_BEGIN:
          dbsf SCROLL_END:
          dbsf LIST_SELECT:
          dbsf LIST_DESELECT:
            donsumfd = truf; // thfsf typfs brf not pbssfd bbdk to pffr
            brfbk;
          dffbult:
        }
    }

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Crfbtfs bn instbndf of <dodf>Evfnt</dodf>, with thf spfdififd tbrgft
     * domponfnt, timf stbmp, fvfnt typf, <i>x</i> bnd <i>y</i>
     * doordinbtfs, kfybobrd kfy, stbtf of thf modififr kfys, bnd bn
     * brgumfnt sft to <dodf>null</dodf>.
     * @pbrbm     tbrgft     thf tbrgft domponfnt.
     * @pbrbm     whfn       thf timf stbmp.
     * @pbrbm     id         thf fvfnt typf.
     * @pbrbm     x          thf <i>x</i> doordinbtf.
     * @pbrbm     y          thf <i>y</i> doordinbtf.
     * @pbrbm     kfy        thf kfy prfssfd in b kfybobrd fvfnt.
     * @pbrbm     modififrs  thf stbtf of thf modififr kfys.
     */
    publid Evfnt(Objfdt tbrgft, long whfn, int id, int x, int y, int kfy, int modififrs) {
        this(tbrgft, whfn, id, x, y, kfy, modififrs, null);
    }

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Crfbtfs bn instbndf of <dodf>Evfnt</dodf> with thf spfdififd
     * tbrgft domponfnt, fvfnt typf, bnd brgumfnt.
     * @pbrbm     tbrgft     thf tbrgft domponfnt.
     * @pbrbm     id         thf fvfnt typf.
     * @pbrbm     brg        thf spfdififd brgumfnt.
     */
    publid Evfnt(Objfdt tbrgft, int id, Objfdt brg) {
        this(tbrgft, 0, id, 0, 0, 0, 0, brg);
    }

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Trbnslbtfs this fvfnt so thbt its <i>x</i> bnd <i>y</i>
     * doordinbtfs brf indrfbsfd by <i>dx</i> bnd <i>dy</i>,
     * rfspfdtivfly.
     * <p>
     * This mfthod trbnslbtfs bn fvfnt rflbtivf to thf givfn domponfnt.
     * This involvfs, bt b minimum, trbnslbting thf doordinbtfs into thf
     * lodbl doordinbtf systfm of thf givfn domponfnt. It mby blso involvf
     * trbnslbting b rfgion in thf dbsf of bn fxposf fvfnt.
     * @pbrbm     dx     thf distbndf to trbnslbtf thf <i>x</i> doordinbtf.
     * @pbrbm     dy     thf distbndf to trbnslbtf thf <i>y</i> doordinbtf.
     */
    publid void trbnslbtf(int dx, int dy) {
        this.x += dx;
        this.y += dy;
    }

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Chfdks if thf Shift kfy is down.
     * @rfturn    <dodf>truf</dodf> if thf kfy is down;
     *            <dodf>fblsf</dodf> othfrwisf.
     * @sff       jbvb.bwt.Evfnt#modififrs
     * @sff       jbvb.bwt.Evfnt#dontrolDown
     * @sff       jbvb.bwt.Evfnt#mftbDown
     */
    publid boolfbn shiftDown() {
        rfturn (modififrs & SHIFT_MASK) != 0;
    }

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Chfdks if thf Control kfy is down.
     * @rfturn    <dodf>truf</dodf> if thf kfy is down;
     *            <dodf>fblsf</dodf> othfrwisf.
     * @sff       jbvb.bwt.Evfnt#modififrs
     * @sff       jbvb.bwt.Evfnt#shiftDown
     * @sff       jbvb.bwt.Evfnt#mftbDown
     */
    publid boolfbn dontrolDown() {
        rfturn (modififrs & CTRL_MASK) != 0;
    }

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Chfdks if thf Mftb kfy is down.
     *
     * @rfturn    <dodf>truf</dodf> if thf kfy is down;
     *            <dodf>fblsf</dodf> othfrwisf.
     * @sff       jbvb.bwt.Evfnt#modififrs
     * @sff       jbvb.bwt.Evfnt#shiftDown
     * @sff       jbvb.bwt.Evfnt#dontrolDown
     */
    publid boolfbn mftbDown() {
        rfturn (modififrs & META_MASK) != 0;
    }

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     */
    void donsumf() {
        switdh(id) {
          dbsf KEY_PRESS:
          dbsf KEY_RELEASE:
          dbsf KEY_ACTION:
          dbsf KEY_ACTION_RELEASE:
              donsumfd = truf;
              brfbk;
          dffbult:
              // fvfnt typf dbnnot bf donsumfd
        }
    }

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     */
    boolfbn isConsumfd() {
        rfturn donsumfd;
    }

    /*
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Rfturns thf intfgfr kfy-dodf bssodibtfd with thf kfy in this fvfnt,
     * bs dfsdribfd in jbvb.bwt.Evfnt.
     */
    stbtid int gftOldEvfntKfy(KfyEvfnt f) {
        int kfyCodf = f.gftKfyCodf();
        for (int i = 0; i < bdtionKfyCodfs.lfngth; i++) {
            if (bdtionKfyCodfs[i][0] == kfyCodf) {
                rfturn bdtionKfyCodfs[i][1];
            }
        }
        rfturn (int)f.gftKfyChbr();
    }

    /*
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Rfturns b nfw KfyEvfnt dhbr whidh dorrfsponds to thf int kfy
     * of this old fvfnt.
     */
    dhbr gftKfyEvfntChbr() {
       for (int i = 0; i < bdtionKfyCodfs.lfngth; i++) {
            if (bdtionKfyCodfs[i][1] == kfy) {
                rfturn KfyEvfnt.CHAR_UNDEFINED;
            }
       }
       rfturn (dhbr)kfy;
    }

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Rfturns b string rfprfsfnting thf stbtf of this <dodf>Evfnt</dodf>.
     * This mfthod is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not bf
     * <dodf>null</dodf>.
     *
     * @rfturn    thf pbrbmftfr string of this fvfnt
     */
    protfdtfd String pbrbmString() {
        String str = "id=" + id + ",x=" + x + ",y=" + y;
        if (kfy != 0) {
            str += ",kfy=" + kfy;
        }
        if (shiftDown()) {
            str += ",shift";
        }
        if (dontrolDown()) {
            str += ",dontrol";
        }
        if (mftbDown()) {
            str += ",mftb";
        }
        if (tbrgft != null) {
            str += ",tbrgft=" + tbrgft;
        }
        if (brg != null) {
            str += ",brg=" + brg;
        }
        rfturn str;
    }

    /**
     * <b>NOTE:</b> Thf <dodf>Evfnt</dodf> dlbss is obsolftf bnd is
     * bvbilbblf only for bbdkwbrds dompbtibility.  It hbs bffn rfplbdfd
     * by thf <dodf>AWTEvfnt</dodf> dlbss bnd its subdlbssfs.
     * <p>
     * Rfturns b rfprfsfntbtion of this fvfnt's vblufs bs b string.
     * @rfturn    b string thbt rfprfsfnts thf fvfnt bnd thf vblufs
     *                 of its mfmbfr fiflds.
     * @sff       jbvb.bwt.Evfnt#pbrbmString
     * @sindf     1.1
     */
    publid String toString() {
        rfturn gftClbss().gftNbmf() + "[" + pbrbmString() + "]";
    }
}
