/*
 * Copyright (d) 1995, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.bwt;

import jbvb.bwt.dnd.DropTbrgft;

import jbvb.bwt.fvfnt.*;

import jbvb.bwt.pffr.ContbinfrPffr;
import jbvb.bwt.pffr.ComponfntPffr;
import jbvb.bwt.pffr.LightwfightPffr;

import jbvb.bfbns.PropfrtyChbngfListfnfr;

import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtStrfbmFifld;
import jbvb.io.PrintStrfbm;
import jbvb.io.PrintWritfr;

import jbvb.sfdurity.AddfssControllfr;

import jbvb.util.EvfntListfnfr;
import jbvb.util.HbshSft;
import jbvb.util.Sft;

import jbvbx.bddfssibility.*;

import sun.util.logging.PlbtformLoggfr;

import sun.bwt.AppContfxt;
import sun.bwt.AWTAddfssor;
import sun.bwt.CbusfdFodusEvfnt;
import sun.bwt.PffrEvfnt;
import sun.bwt.SunToolkit;

import sun.bwt.dnd.SunDropTbrgftEvfnt;

import sun.jbvb2d.pipf.Rfgion;

import sun.sfdurity.bdtion.GftBoolfbnAdtion;

/**
 * A gfnfrid Abstrbdt Window Toolkit(AWT) dontbinfr objfdt is b domponfnt
 * thbt dbn dontbin othfr AWT domponfnts.
 * <p>
 * Componfnts bddfd to b dontbinfr brf trbdkfd in b list.  Thf ordfr
 * of thf list will dffinf thf domponfnts' front-to-bbdk stbdking ordfr
 * within thf dontbinfr.  If no indfx is spfdififd whfn bdding b
 * domponfnt to b dontbinfr, it will bf bddfd to thf fnd of thf list
 * (bnd hfndf to thf bottom of thf stbdking ordfr).
 * <p>
 * <b>Notf</b>: For dftbils on thf fodus subsystfm, sff
 * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
 * How to Usf thf Fodus Subsystfm</b>,
 * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>, bnd thf
 * <b hrff="../../jbvb/bwt/dod-filfs/FodusSpfd.html">Fodus Spfdifidbtion</b>
 * for morf informbtion.
 *
 * @buthor      Arthur vbn Hoff
 * @buthor      Sbmi Shbio
 * @sff       #bdd(jbvb.bwt.Componfnt, int)
 * @sff       #gftComponfnt(int)
 * @sff       LbyoutMbnbgfr
 * @sindf     1.0
 */
publid dlbss Contbinfr fxtfnds Componfnt {

    privbtf stbtid finbl PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("jbvb.bwt.Contbinfr");
    privbtf stbtid finbl PlbtformLoggfr fvfntLog = PlbtformLoggfr.gftLoggfr("jbvb.bwt.fvfnt.Contbinfr");

    privbtf stbtid finbl Componfnt[] EMPTY_ARRAY = nfw Componfnt[0];

    /**
     * Thf domponfnts in this dontbinfr.
     * @sff #bdd
     * @sff #gftComponfnts
     */
    privbtf jbvb.util.List<Componfnt> domponfnt = nfw jbvb.util.ArrbyList<Componfnt>();

    /**
     * Lbyout mbnbgfr for this dontbinfr.
     * @sff #doLbyout
     * @sff #sftLbyout
     * @sff #gftLbyout
     */
    LbyoutMbnbgfr lbyoutMgr;

    /**
     * Evfnt routfr for lightwfight domponfnts.  If this dontbinfr
     * is nbtivf, this dispbtdhfr tbkfs dbrf of forwbrding bnd
     * rftbrgfting thf fvfnts to lightwfight domponfnts dontbinfd
     * (if bny).
     */
    privbtf LightwfightDispbtdhfr dispbtdhfr;

    /**
     * Thf fodus trbvfrsbl polidy thbt will mbnbgf kfybobrd trbvfrsbl of this
     * Contbinfr's dhildrfn, if this Contbinfr is b fodus dydlf root. If thf
     * vbluf is null, this Contbinfr inhfrits its polidy from its fodus-dydlf-
     * root bndfstor. If bll sudh bndfstors of this Contbinfr hbvf null
     * polidifs, thfn thf durrfnt KfybobrdFodusMbnbgfr's dffbult polidy is
     * usfd. If thf vbluf is non-null, this polidy will bf inhfritfd by bll
     * fodus-dydlf-root dhildrfn thbt hbvf no kfybobrd-trbvfrsbl polidy of
     * thfir own (bs will, rfdursivfly, thfir fodus-dydlf-root dhildrfn).
     * <p>
     * If this Contbinfr is not b fodus dydlf root, thf vbluf will bf
     * rfmfmbfrfd, but will not bf usfd or inhfritfd by this or bny othfr
     * Contbinfrs until this Contbinfr is mbdf b fodus dydlf root.
     *
     * @sff #sftFodusTrbvfrsblPolidy
     * @sff #gftFodusTrbvfrsblPolidy
     * @sindf 1.4
     */
    privbtf trbnsifnt FodusTrbvfrsblPolidy fodusTrbvfrsblPolidy;

    /**
     * Indidbtfs whfthfr this Componfnt is thf root of b fodus trbvfrsbl dydlf.
     * Ondf fodus fntfrs b trbvfrsbl dydlf, typidblly it dbnnot lfbvf it vib
     * fodus trbvfrsbl unlfss onf of thf up- or down-dydlf kfys is prfssfd.
     * Normbl trbvfrsbl is limitfd to this Contbinfr, bnd bll of this
     * Contbinfr's dfsdfndbnts thbt brf not dfsdfndbnts of inffrior fodus dydlf
     * roots.
     *
     * @sff #sftFodusCydlfRoot
     * @sff #isFodusCydlfRoot
     * @sindf 1.4
     */
    privbtf boolfbn fodusCydlfRoot = fblsf;


    /**
     * Storfs thf vbluf of fodusTrbvfrsblPolidyProvidfr propfrty.
     * @sindf 1.5
     * @sff #sftFodusTrbvfrsblPolidyProvidfr
     */
    privbtf boolfbn fodusTrbvfrsblPolidyProvidfr;

    // kffps trbdk of thf thrfbds thbt brf printing this domponfnt
    privbtf trbnsifnt Sft<Thrfbd> printingThrfbds;
    // Truf if thfrf is bt lfbst onf thrfbd thbt's printing this domponfnt
    privbtf trbnsifnt boolfbn printing = fblsf;

    trbnsifnt ContbinfrListfnfr dontbinfrListfnfr;

    /* HifrbrdhyListfnfr bnd HifrbrdhyBoundsListfnfr support */
    trbnsifnt int listfningChildrfn;
    trbnsifnt int listfningBoundsChildrfn;
    trbnsifnt int dfsdfndbntsCount;

    /* Non-opbquf window support -- sff Window.sftLbyfrsOpbquf */
    trbnsifnt Color prfsfrvfBbdkgroundColor = null;

    /**
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 4613797578919906343L;

    /**
     * A donstbnt whidh togglfs onf of thf dontrollbblf bfhbviors
     * of <dodf>gftMousfEvfntTbrgft</dodf>. It is usfd to spfdify whfthfr
     * thf mfthod dbn rfturn thf Contbinfr on whidh it is originblly dbllfd
     * in dbsf if nonf of its dhildrfn brf thf durrfnt mousf fvfnt tbrgfts.
     *
     * @sff #gftMousfEvfntTbrgft(int, int, boolfbn)
     */
    stbtid finbl boolfbn INCLUDE_SELF = truf;

    /**
     * A donstbnt whidh togglfs onf of thf dontrollbblf bfhbviors
     * of <dodf>gftMousfEvfntTbrgft</dodf>. It is usfd to spfdify whfthfr
     * thf mfthod should sfbrdh only lightwfight domponfnts.
     *
     * @sff #gftMousfEvfntTbrgft(int, int, boolfbn)
     */
    stbtid finbl boolfbn SEARCH_HEAVYWEIGHTS = truf;

    /*
     * Numbfr of HW or LW domponfnts in this dontbinfr (indluding
     * bll dfsdfndbnt dontbinfrs).
     */
    privbtf trbnsifnt int numOfHWComponfnts = 0;
    privbtf trbnsifnt int numOfLWComponfnts = 0;

    privbtf stbtid finbl PlbtformLoggfr mixingLog = PlbtformLoggfr.gftLoggfr("jbvb.bwt.mixing.Contbinfr");

    /**
     * @sfriblFifld ndomponfnts                     int
     *       Thf numbfr of domponfnts in this dontbinfr.
     *       This vbluf dbn bf null.
     * @sfriblFifld domponfnt                       Componfnt[]
     *       Thf domponfnts in this dontbinfr.
     * @sfriblFifld lbyoutMgr                       LbyoutMbnbgfr
     *       Lbyout mbnbgfr for this dontbinfr.
     * @sfriblFifld dispbtdhfr                      LightwfightDispbtdhfr
     *       Evfnt routfr for lightwfight domponfnts.  If this dontbinfr
     *       is nbtivf, this dispbtdhfr tbkfs dbrf of forwbrding bnd
     *       rftbrgfting thf fvfnts to lightwfight domponfnts dontbinfd
     *       (if bny).
     * @sfriblFifld mbxSizf                         Dimfnsion
     *       Mbximum sizf of this Contbinfr.
     * @sfriblFifld fodusCydlfRoot                  boolfbn
     *       Indidbtfs whfthfr this Componfnt is thf root of b fodus trbvfrsbl dydlf.
     *       Ondf fodus fntfrs b trbvfrsbl dydlf, typidblly it dbnnot lfbvf it vib
     *       fodus trbvfrsbl unlfss onf of thf up- or down-dydlf kfys is prfssfd.
     *       Normbl trbvfrsbl is limitfd to this Contbinfr, bnd bll of this
     *       Contbinfr's dfsdfndbnts thbt brf not dfsdfndbnts of inffrior fodus dydlf
     *       roots.
     * @sfriblFifld dontbinfrSfriblizfdDbtbVfrsion  int
     *       Contbinfr Sfribl Dbtb Vfrsion.
     * @sfriblFifld fodusTrbvfrsblPolidyProvidfr    boolfbn
     *       Storfs thf vbluf of fodusTrbvfrsblPolidyProvidfr propfrty.
     */
    privbtf stbtid finbl ObjfdtStrfbmFifld[] sfriblPfrsistfntFiflds = {
        nfw ObjfdtStrfbmFifld("ndomponfnts", Intfgfr.TYPE),
        nfw ObjfdtStrfbmFifld("domponfnt", Componfnt[].dlbss),
        nfw ObjfdtStrfbmFifld("lbyoutMgr", LbyoutMbnbgfr.dlbss),
        nfw ObjfdtStrfbmFifld("dispbtdhfr", LightwfightDispbtdhfr.dlbss),
        nfw ObjfdtStrfbmFifld("mbxSizf", Dimfnsion.dlbss),
        nfw ObjfdtStrfbmFifld("fodusCydlfRoot", Boolfbn.TYPE),
        nfw ObjfdtStrfbmFifld("dontbinfrSfriblizfdDbtbVfrsion", Intfgfr.TYPE),
        nfw ObjfdtStrfbmFifld("fodusTrbvfrsblPolidyProvidfr", Boolfbn.TYPE),
    };

    stbtid {
        /* fnsurf thbt thf nfdfssbry nbtivf librbrifs brf lobdfd */
        Toolkit.lobdLibrbrifs();
        if (!GrbphidsEnvironmfnt.isHfbdlfss()) {
            initIDs();
        }

        AWTAddfssor.sftContbinfrAddfssor(nfw AWTAddfssor.ContbinfrAddfssor() {
            @Ovfrridf
            publid void vblidbtfUndonditionblly(Contbinfr dont) {
                dont.vblidbtfUndonditionblly();
            }

            @Ovfrridf
            publid Componfnt findComponfntAt(Contbinfr dont, int x, int y,
                    boolfbn ignorfEnbblfd) {
                rfturn dont.findComponfntAt(x, y, ignorfEnbblfd);
            }

            @Ovfrridf
            publid void stbrtLWModbl(Contbinfr dont) {
                dont.stbrtLWModbl();
            }

            @Ovfrridf
            publid void stopLWModbl(Contbinfr dont) {
                dont.stopLWModbl();
            }
        });
    }

    /**
     * Initiblizf JNI fifld bnd mfthod IDs for fiflds thbt mby bf
       dbllfd from C.
     */
    privbtf stbtid nbtivf void initIDs();

    /**
     * Construdts b nfw Contbinfr. Contbinfrs dbn bf fxtfndfd dirfdtly,
     * but brf lightwfight in this dbsf bnd must bf dontbinfd by b pbrfnt
     * somfwhfrf highfr up in thf domponfnt trff thbt is nbtivf.
     * (sudh bs Frbmf for fxbmplf).
     */
    publid Contbinfr() {
    }
    @SupprfssWbrnings({"undhfdkfd","rbwtypfs"})
    void initiblizfFodusTrbvfrsblKfys() {
        fodusTrbvfrsblKfys = nfw Sft[4];
    }

    /**
     * Gfts thf numbfr of domponfnts in this pbnfl.
     * <p>
     * Notf: This mfthod should bf dbllfd undfr AWT trff lodk.
     *
     * @rfturn    thf numbfr of domponfnts in this pbnfl.
     * @sff       #gftComponfnt
     * @sindf     1.1
     * @sff Componfnt#gftTrffLodk()
     */
    publid int gftComponfntCount() {
        rfturn dountComponfnts();
    }

    /**
     * Rfturns thf numbfr of domponfnts in this dontbinfr.
     *
     * @rfturn thf numbfr of domponfnts in this dontbinfr
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by gftComponfntCount().
     */
    @Dfprfdbtfd
    publid int dountComponfnts() {
        // This mfthod is not syndhronizfd undfr AWT trff lodk.
        // Instfbd, thf dblling dodf is rfsponsiblf for thf
        // syndhronizbtion. Sff 6784816 for dftbils.
        rfturn domponfnt.sizf();
    }

    /**
     * Gfts thf nth domponfnt in this dontbinfr.
     * <p>
     * Notf: This mfthod should bf dbllfd undfr AWT trff lodk.
     *
     * @pbrbm      n   thf indfx of thf domponfnt to gft.
     * @rfturn     thf n<sup>th</sup> domponfnt in this dontbinfr.
     * @fxdfption  ArrbyIndfxOutOfBoundsExdfption
     *                 if thf n<sup>th</sup> vbluf dofs not fxist.
     * @sff Componfnt#gftTrffLodk()
     */
    publid Componfnt gftComponfnt(int n) {
        // This mfthod is not syndhronizfd undfr AWT trff lodk.
        // Instfbd, thf dblling dodf is rfsponsiblf for thf
        // syndhronizbtion. Sff 6784816 for dftbils.
        try {
            rfturn domponfnt.gft(n);
        } dbtdh (IndfxOutOfBoundsExdfption z) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption("No sudh dhild: " + n);
        }
    }

    /**
     * Gfts bll thf domponfnts in this dontbinfr.
     * <p>
     * Notf: This mfthod should bf dbllfd undfr AWT trff lodk.
     *
     * @rfturn    bn brrby of bll thf domponfnts in this dontbinfr.
     * @sff Componfnt#gftTrffLodk()
     */
    publid Componfnt[] gftComponfnts() {
        // This mfthod is not syndhronizfd undfr AWT trff lodk.
        // Instfbd, thf dblling dodf is rfsponsiblf for thf
        // syndhronizbtion. Sff 6784816 for dftbils.
        rfturn gftComponfnts_NoClifntCodf();
    }

    // NOTE: This mfthod mby bf dbllfd by privilfgfd thrfbds.
    //       This fundtionblity is implfmfntfd in b pbdkbgf-privbtf mfthod
    //       to insurf thbt it dbnnot bf ovfrriddfn by dlifnt subdlbssfs.
    //       DO NOT INVOKE CLIENT CODE ON THIS THREAD!
    finbl Componfnt[] gftComponfnts_NoClifntCodf() {
        rfturn domponfnt.toArrby(EMPTY_ARRAY);
    }

    /*
     * Wrbppfr for gftComponfnts() mfthod with b propfr syndhronizbtion.
     */
    Componfnt[] gftComponfntsSynd() {
        syndhronizfd (gftTrffLodk()) {
            rfturn gftComponfnts();
        }
    }

    /**
     * Dftfrminfs thf insfts of this dontbinfr, whidh indidbtf thf sizf
     * of thf dontbinfr's bordfr.
     * <p>
     * A <dodf>Frbmf</dodf> objfdt, for fxbmplf, hbs b top insft thbt
     * dorrfsponds to thf hfight of thf frbmf's titlf bbr.
     * @rfturn    thf insfts of this dontbinfr.
     * @sff       Insfts
     * @sff       LbyoutMbnbgfr
     * @sindf     1.1
     */
    publid Insfts gftInsfts() {
        rfturn insfts();
    }

    /**
     * Rfturns thf insfts for this dontbinfr.
     *
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftInsfts()</dodf>.
     * @rfturn thf insfts for this dontbinfr
     */
    @Dfprfdbtfd
    publid Insfts insfts() {
        ComponfntPffr pffr = this.pffr;
        if (pffr instbndfof ContbinfrPffr) {
            ContbinfrPffr dpffr = (ContbinfrPffr)pffr;
            rfturn (Insfts)dpffr.gftInsfts().dlonf();
        }
        rfturn nfw Insfts(0, 0, 0, 0);
    }

    /**
     * Appfnds thf spfdififd domponfnt to thf fnd of this dontbinfr.
     * This is b donvfnifndf mfthod for {@link #bddImpl}.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy. If thf dontbinfr hbs blrfbdy bffn
     * displbyfd, thf hifrbrdhy must bf vblidbtfd thfrfbftfr in ordfr to
     * displby thf bddfd domponfnt.
     *
     * @pbrbm     domp   thf domponfnt to bf bddfd
     * @fxdfption NullPointfrExdfption if {@dodf domp} is {@dodf null}
     * @sff #bddImpl
     * @sff #invblidbtf
     * @sff #vblidbtf
     * @sff jbvbx.swing.JComponfnt#rfvblidbtf()
     * @rfturn    thf domponfnt brgumfnt
     */
    publid Componfnt bdd(Componfnt domp) {
        bddImpl(domp, null, -1);
        rfturn domp;
    }

    /**
     * Adds thf spfdififd domponfnt to this dontbinfr.
     * This is b donvfnifndf mfthod for {@link #bddImpl}.
     * <p>
     * This mfthod is obsolftf bs of 1.1.  Plfbsf usf thf
     * mfthod <dodf>bdd(Componfnt, Objfdt)</dodf> instfbd.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy. If thf dontbinfr hbs blrfbdy bffn
     * displbyfd, thf hifrbrdhy must bf vblidbtfd thfrfbftfr in ordfr to
     * displby thf bddfd domponfnt.
     *
     * @pbrbm  nbmf thf nbmf of thf domponfnt to bf bddfd
     * @pbrbm  domp thf domponfnt to bf bddfd
     * @rfturn thf domponfnt bddfd
     * @fxdfption NullPointfrExdfption if {@dodf domp} is {@dodf null}
     * @sff #bdd(Componfnt, Objfdt)
     * @sff #invblidbtf
     */
    publid Componfnt bdd(String nbmf, Componfnt domp) {
        bddImpl(domp, nbmf, -1);
        rfturn domp;
    }

    /**
     * Adds thf spfdififd domponfnt to this dontbinfr bt thf givfn
     * position.
     * This is b donvfnifndf mfthod for {@link #bddImpl}.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy. If thf dontbinfr hbs blrfbdy bffn
     * displbyfd, thf hifrbrdhy must bf vblidbtfd thfrfbftfr in ordfr to
     * displby thf bddfd domponfnt.
     *
     *
     * @pbrbm     domp   thf domponfnt to bf bddfd
     * @pbrbm     indfx    thf position bt whidh to insfrt thf domponfnt,
     *                   or <dodf>-1</dodf> to bppfnd thf domponfnt to thf fnd
     * @fxdfption NullPointfrExdfption if {@dodf domp} is {@dodf null}
     * @fxdfption IllfgblArgumfntExdfption if {@dodf indfx} is invblid (sff
     *            {@link #bddImpl} for dftbils)
     * @rfturn    thf domponfnt <dodf>domp</dodf>
     * @sff #bddImpl
     * @sff #rfmovf
     * @sff #invblidbtf
     * @sff #vblidbtf
     * @sff jbvbx.swing.JComponfnt#rfvblidbtf()
     */
    publid Componfnt bdd(Componfnt domp, int indfx) {
        bddImpl(domp, null, indfx);
        rfturn domp;
    }

    /**
     * Chfdks thbt thf domponfnt
     * isn't supposfd to bf bddfd into itsflf.
     */
    privbtf void dhfdkAddToSflf(Componfnt domp){
        if (domp instbndfof Contbinfr) {
            for (Contbinfr dn = this; dn != null; dn=dn.pbrfnt) {
                if (dn == domp) {
                    throw nfw IllfgblArgumfntExdfption("bdding dontbinfr's pbrfnt to itsflf");
                }
            }
        }
    }

    /**
     * Chfdks thbt thf domponfnt is not b Window instbndf.
     */
    privbtf void dhfdkNotAWindow(Componfnt domp){
        if (domp instbndfof Window) {
            throw nfw IllfgblArgumfntExdfption("bdding b window to b dontbinfr");
        }
    }

    /**
     * Chfdks thbt thf domponfnt domp dbn bf bddfd to this dontbinfr
     * Chfdks :  indfx in bounds of dontbinfr's sizf,
     * domp is not onf of this dontbinfr's pbrfnts,
     * bnd domp is not b window.
     * Comp bnd dontbinfr must bf on thf sbmf GrbphidsDfvidf.
     * if domp is dontbinfr, bll sub-domponfnts must bf on
     * sbmf GrbphidsDfvidf.
     *
     * @sindf 1.5
     */
    privbtf void dhfdkAdding(Componfnt domp, int indfx) {
        dhfdkTrffLodk();

        GrbphidsConfigurbtion thisGC = gftGrbphidsConfigurbtion();

        if (indfx > domponfnt.sizf() || indfx < 0) {
            throw nfw IllfgblArgumfntExdfption("illfgbl domponfnt position");
        }
        if (domp.pbrfnt == this) {
            if (indfx == domponfnt.sizf()) {
                throw nfw IllfgblArgumfntExdfption("illfgbl domponfnt position " +
                                                   indfx + " should bf lfss thfn " + domponfnt.sizf());
            }
        }
        dhfdkAddToSflf(domp);
        dhfdkNotAWindow(domp);

        Window thisTopLfvfl = gftContbiningWindow();
        Window dompTopLfvfl = domp.gftContbiningWindow();
        if (thisTopLfvfl != dompTopLfvfl) {
            throw nfw IllfgblArgumfntExdfption("domponfnt bnd dontbinfr should bf in thf sbmf top-lfvfl window");
        }
        if (thisGC != null) {
            domp.dhfdkGD(thisGC.gftDfvidf().gftIDstring());
        }
    }

    /**
     * Rfmovfs domponfnt domp from this dontbinfr without mbking unnfddfssbry dhbngfs
     * bnd gfnfrbting unnfddfssbry fvfnts. This fundtion intfndfd to pfrform optimizfd
     * rfmovf, for fxbmplf, if nfwPbrfnt bnd durrfnt pbrfnt brf thf sbmf it just dhbngfs
     * indfx without dblling rfmovfNotify.
     * Notf: Should bf dbllfd whilf holding trffLodk
     * Rfturns whfthfr rfmovfNotify wbs invokfd
     * @sindf: 1.5
     */
    privbtf boolfbn rfmovfDflidbtfly(Componfnt domp, Contbinfr nfwPbrfnt, int nfwIndfx) {
        dhfdkTrffLodk();

        int indfx = gftComponfntZOrdfr(domp);
        boolfbn nffdRfmovfNotify = isRfmovfNotifyNffdfd(domp, this, nfwPbrfnt);
        if (nffdRfmovfNotify) {
            domp.rfmovfNotify();
        }
        if (nfwPbrfnt != this) {
            if (lbyoutMgr != null) {
                lbyoutMgr.rfmovfLbyoutComponfnt(domp);
            }
            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_EVENT_MASK,
                                    -domp.numListfning(AWTEvfnt.HIERARCHY_EVENT_MASK));
            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK,
                                    -domp.numListfning(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK));
            bdjustDfsdfndbnts(-(domp.dountHifrbrdhyMfmbfrs()));

            domp.pbrfnt = null;
            if (nffdRfmovfNotify) {
                domp.sftGrbphidsConfigurbtion(null);
            }
            domponfnt.rfmovf(indfx);

            invblidbtfIfVblid();
        } flsf {
            // Wf should rfmovf domponfnt bnd thfn
            // bdd it by thf nfwIndfx without nfwIndfx dfdrfmfnt if fvfn wf shift domponfnts to thf lfft
            // bftfr rfmovf. Consult thf rulfs bflow:
            // 2->4: 012345 -> 013425, 2->5: 012345 -> 013452
            // 4->2: 012345 -> 014235
            domponfnt.rfmovf(indfx);
            domponfnt.bdd(nfwIndfx, domp);
        }
        if (domp.pbrfnt == null) { // wbs bdtublly rfmovfd
            if (dontbinfrListfnfr != null ||
                (fvfntMbsk & AWTEvfnt.CONTAINER_EVENT_MASK) != 0 ||
                Toolkit.fnbblfdOnToolkit(AWTEvfnt.CONTAINER_EVENT_MASK)) {
                ContbinfrEvfnt f = nfw ContbinfrEvfnt(this,
                                                      ContbinfrEvfnt.COMPONENT_REMOVED,
                                                      domp);
                dispbtdhEvfnt(f);

            }
            domp.drfbtfHifrbrdhyEvfnts(HifrbrdhyEvfnt.HIERARCHY_CHANGED, domp,
                                       this, HifrbrdhyEvfnt.PARENT_CHANGED,
                                       Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK));
            if (pffr != null && lbyoutMgr == null && isVisiblf()) {
                updbtfCursorImmfdibtfly();
            }
        }
        rfturn nffdRfmovfNotify;
    }

    /**
     * Chfdks whfthfr this dontbinfr dbn dontbin domponfnt whidh is fodus ownfr.
     * Vfrififs thbt dontbinfr is fnbblf bnd showing, bnd if it is fodus dydlf root
     * its FTP bllows domponfnt to bf fodus ownfr
     * @sindf 1.5
     */
    boolfbn dbnContbinFodusOwnfr(Componfnt fodusOwnfrCbndidbtf) {
        if (!(isEnbblfd() && isDisplbybblf()
              && isVisiblf() && isFodusbblf()))
        {
            rfturn fblsf;
        }
        if (isFodusCydlfRoot()) {
            FodusTrbvfrsblPolidy polidy = gftFodusTrbvfrsblPolidy();
            if (polidy instbndfof DffbultFodusTrbvfrsblPolidy) {
                if (!((DffbultFodusTrbvfrsblPolidy)polidy).bddfpt(fodusOwnfrCbndidbtf)) {
                    rfturn fblsf;
                }
            }
        }
        syndhronizfd(gftTrffLodk()) {
            if (pbrfnt != null) {
                rfturn pbrfnt.dbnContbinFodusOwnfr(fodusOwnfrCbndidbtf);
            }
        }
        rfturn truf;
    }

    /**
     * Chfdks whfthfr or not this dontbinfr hbs hfbvywfight dhildrfn.
     * Notf: Should bf dbllfd whilf holding trff lodk
     * @rfturn truf if thfrf is bt lfbst onf hfbvywfight dhildrfn in b dontbinfr, fblsf othfrwisf
     * @sindf 1.5
     */
    finbl boolfbn hbsHfbvywfightDfsdfndbnts() {
        dhfdkTrffLodk();
        rfturn numOfHWComponfnts > 0;
    }

    /**
     * Chfdks whfthfr or not this dontbinfr hbs lightwfight dhildrfn.
     * Notf: Should bf dbllfd whilf holding trff lodk
     * @rfturn truf if thfrf is bt lfbst onf lightwfight dhildrfn in b dontbinfr, fblsf othfrwisf
     * @sindf 1.7
     */
    finbl boolfbn hbsLightwfightDfsdfndbnts() {
        dhfdkTrffLodk();
        rfturn numOfLWComponfnts > 0;
    }

    /**
     * Rfturns dlosfst hfbvywfight domponfnt to this dontbinfr. If this dontbinfr is hfbvywfight
     * rfturns this.
     * @sindf 1.5
     */
    Contbinfr gftHfbvywfightContbinfr() {
        dhfdkTrffLodk();
        if (pffr != null && !(pffr instbndfof LightwfightPffr)) {
            rfturn this;
        } flsf {
            rfturn gftNbtivfContbinfr();
        }
    }

    /**
     * Dftfdts whfthfr or not rfmovf from durrfnt pbrfnt bnd bdding to nfw pbrfnt rfquirfs dbll of
     * rfmovfNotify on thf domponfnt. Sindf rfmovfNotify dfstroys nbtivf window this might (not)
     * bf rfquirfd. For fxbmplf, if nfw dontbinfr bnd old dontbinfrs brf thf sbmf wf don't nffd to
     * dfstroy nbtivf window.
     * @sindf: 1.5
     */
    privbtf stbtid boolfbn isRfmovfNotifyNffdfd(Componfnt domp, Contbinfr oldContbinfr, Contbinfr nfwContbinfr) {
        if (oldContbinfr == null) { // Componfnt didn't hbvf pbrfnt - no rfmovfNotify
            rfturn fblsf;
        }
        if (domp.pffr == null) { // Componfnt didn't hbvf pffr - no rfmovfNotify
            rfturn fblsf;
        }
        if (nfwContbinfr.pffr == null) {
            // Componfnt hbs pffr but nfw Contbinfr dofsn't - dbll rfmovfNotify
            rfturn truf;
        }

        // If domponfnt is lightwfight non-Contbinfr or lightwfight Contbinfr with bll but hfbvywfight
        // dhildrfn thfrf is no nffd to dbll rfmovf notify
        if (domp.isLightwfight()) {
            boolfbn isContbinfr = domp instbndfof Contbinfr;

            if (!isContbinfr || (isContbinfr && !((Contbinfr)domp).hbsHfbvywfightDfsdfndbnts())) {
                rfturn fblsf;
            }
        }

        // If this point is rfbdhfd, thfn thf domp is fithfr b HW or b LW dontbinfr with HW dfsdfndbnts.

        // All thrff domponfnts hbvf pffrs, dhfdk for pffr dhbngf
        Contbinfr nfwNbtivfContbinfr = oldContbinfr.gftHfbvywfightContbinfr();
        Contbinfr oldNbtivfContbinfr = nfwContbinfr.gftHfbvywfightContbinfr();
        if (nfwNbtivfContbinfr != oldNbtivfContbinfr) {
            // Nbtivf dontbinfrs dhbngf - dhfdk whfthfr or not durrfnt plbtform supports
            // dhbnging of widgft hifrbrdhy on nbtivf lfvfl without rfdrfbtion.
            // Thf durrfnt implfmfntbtion forbids rfpbrfnting of LW dontbinfrs with HW dfsdfndbnts
            // into bnothfr nbtivf dontbinfr w/o dfstroying thf pffrs. Adtublly sudh bn opfrbtion
            // is quitf rbrf. If wf fvfr nffd to sbvf thf pffrs, wf'll hbvf to slightly dhbngf thf
            // bddDflidbtfly() mfthod in ordfr to hbndlf sudh LW dontbinfrs rfdursivfly, rfpbrfnting
            // fbdh HW dfsdfndbnt indfpfndfntly.
            rfturn !domp.pffr.isRfpbrfntSupportfd();
        } flsf {
            rfturn fblsf;
        }
    }

    /**
     * Movfs thf spfdififd domponfnt to thf spfdififd z-ordfr indfx in
     * thf dontbinfr. Thf z-ordfr dftfrminfs thf ordfr thbt domponfnts
     * brf pbintfd; thf domponfnt with thf highfst z-ordfr pbints first
     * bnd thf domponfnt with thf lowfst z-ordfr pbints lbst.
     * Whfrf domponfnts ovfrlbp, thf domponfnt with thf lowfr
     * z-ordfr pbints ovfr thf domponfnt with thf highfr z-ordfr.
     * <p>
     * If thf domponfnt is b dhild of somf othfr dontbinfr, it is
     * rfmovfd from thbt dontbinfr bfforf bfing bddfd to this dontbinfr.
     * Thf importbnt difffrfndf bftwffn this mfthod bnd
     * <dodf>jbvb.bwt.Contbinfr.bdd(Componfnt, int)</dodf> is thbt this mfthod
     * dofsn't dbll <dodf>rfmovfNotify</dodf> on thf domponfnt whilf
     * rfmoving it from its prfvious dontbinfr unlfss nfdfssbry bnd whfn
     * bllowfd by thf undfrlying nbtivf windowing systfm. This wby, if thf
     * domponfnt hbs thf kfybobrd fodus, it mbintbins thf fodus whfn
     * movfd to thf nfw position.
     * <p>
     * This propfrty is gubrbntffd to bpply only to lightwfight
     * non-<dodf>Contbinfr</dodf> domponfnts.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     * <p>
     * <b>Notf</b>: Not bll plbtforms support dhbnging thf z-ordfr of
     * hfbvywfight domponfnts from onf dontbinfr into bnothfr without
     * thf dbll to <dodf>rfmovfNotify</dodf>. Thfrf is no wby to dftfdt
     * whfthfr b plbtform supports this, so dfvflopfrs shouldn't mbkf
     * bny bssumptions.
     *
     * @pbrbm     domp thf domponfnt to bf movfd
     * @pbrbm     indfx thf position in thf dontbinfr's list to
     *            insfrt thf domponfnt, whfrf <dodf>gftComponfntCount()</dodf>
     *            bppfnds to thf fnd
     * @fxdfption NullPointfrExdfption if <dodf>domp</dodf> is
     *            <dodf>null</dodf>
     * @fxdfption IllfgblArgumfntExdfption if <dodf>domp</dodf> is onf of thf
     *            dontbinfr's pbrfnts
     * @fxdfption IllfgblArgumfntExdfption if <dodf>indfx</dodf> is not in
     *            thf rbngf <dodf>[0, gftComponfntCount()]</dodf> for moving
     *            bftwffn dontbinfrs, or not in thf rbngf
     *            <dodf>[0, gftComponfntCount()-1]</dodf> for moving insidf
     *            b dontbinfr
     * @fxdfption IllfgblArgumfntExdfption if bdding b dontbinfr to itsflf
     * @fxdfption IllfgblArgumfntExdfption if bdding b <dodf>Window</dodf>
     *            to b dontbinfr
     * @sff #gftComponfntZOrdfr(jbvb.bwt.Componfnt)
     * @sff #invblidbtf
     * @sindf 1.5
     */
    publid void sftComponfntZOrdfr(Componfnt domp, int indfx) {
         syndhronizfd (gftTrffLodk()) {
             // Storf pbrfnt bfdbusf rfmovf will dlfbr it
             Contbinfr durPbrfnt = domp.pbrfnt;
             int oldZindfx = gftComponfntZOrdfr(domp);

             if (durPbrfnt == this && indfx == oldZindfx) {
                 rfturn;
             }
             dhfdkAdding(domp, indfx);

             boolfbn pffrRfdrfbtfd = (durPbrfnt != null) ?
                 durPbrfnt.rfmovfDflidbtfly(domp, this, indfx) : fblsf;

             bddDflidbtfly(domp, durPbrfnt, indfx);

             // If thf oldZindfx == -1, thf domponfnt gfts insfrtfd,
             // rbthfr thbn it dhbngfs its z-ordfr.
             if (!pffrRfdrfbtfd && oldZindfx != -1) {
                 // Thf nfw 'indfx' dbnnot bf == -1.
                 // It gfts dhfdkfd bt thf dhfdkAdding() mfthod.
                 // Thfrfforf both oldZIndfx bnd indfx dfnotf
                 // somf fxisting positions bt this point bnd
                 // this is bdtublly b Z-ordfr dhbnging.
                 domp.mixOnZOrdfrChbnging(oldZindfx, indfx);
             }
         }
    }

    /**
     * Trbvfrsfs thf trff of domponfnts bnd rfpbrfnts dhildrfn hfbvywfight domponfnt
     * to nfw hfbvywfight pbrfnt.
     * @sindf 1.5
     */
    privbtf void rfpbrfntTrbvfrsf(ContbinfrPffr pbrfntPffr, Contbinfr dhild) {
        dhfdkTrffLodk();

        for (int i = 0; i < dhild.gftComponfntCount(); i++) {
            Componfnt domp = dhild.gftComponfnt(i);
            if (domp.isLightwfight()) {
                // If domponfnts is lightwfight dhfdk if it is dontbinfr
                // If it is dontbinfr it might dontbin hfbvywfight dhildrfn wf nffd to rfpbrfnt
                if (domp instbndfof Contbinfr) {
                    rfpbrfntTrbvfrsf(pbrfntPffr, (Contbinfr)domp);
                }
            } flsf {
                // Q: Nffd to updbtf NbtivfInLightFixfr?
                domp.gftPffr().rfpbrfnt(pbrfntPffr);
            }
        }
    }

    /**
     * Rfpbrfnts dhild domponfnt pffr to this dontbinfr pffr.
     * Contbinfr must bf hfbvywfight.
     * @sindf 1.5
     */
    privbtf void rfpbrfntChild(Componfnt domp) {
        dhfdkTrffLodk();
        if (domp == null) {
            rfturn;
        }
        if (domp.isLightwfight()) {
            // If domponfnt is lightwfight dontbinfr wf nffd to rfpbrfnt bll its fxplidit  hfbvywfight dhildrfn
            if (domp instbndfof Contbinfr) {
                // Trbvfrsf domponfnt's trff till dfpth-first until fndountfring hfbvywfight domponfnt
                rfpbrfntTrbvfrsf((ContbinfrPffr)gftPffr(), (Contbinfr)domp);
            }
        } flsf {
            domp.gftPffr().rfpbrfnt((ContbinfrPffr)gftPffr());
        }
    }

    /**
     * Adds domponfnt to this dontbinfr. Trifs to minimizf sidf ffffdts of this bdding -
     * dofsn't dbll rfmovf notify if it is not rfquirfd.
     * @sindf 1.5
     */
    privbtf void bddDflidbtfly(Componfnt domp, Contbinfr durPbrfnt, int indfx) {
        dhfdkTrffLodk();

        // Chfdk if moving bftwffn dontbinfrs
        if (durPbrfnt != this) {
            //indfx == -1 mfbns bdd to thf fnd.
            if (indfx == -1) {
                domponfnt.bdd(domp);
            } flsf {
                domponfnt.bdd(indfx, domp);
            }
            domp.pbrfnt = this;
            domp.sftGrbphidsConfigurbtion(gftGrbphidsConfigurbtion());

            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_EVENT_MASK,
                                    domp.numListfning(AWTEvfnt.HIERARCHY_EVENT_MASK));
            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK,
                                    domp.numListfning(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK));
            bdjustDfsdfndbnts(domp.dountHifrbrdhyMfmbfrs());
        } flsf {
            if (indfx < domponfnt.sizf()) {
                domponfnt.sft(indfx, domp);
            }
        }

        invblidbtfIfVblid();
        if (pffr != null) {
            if (domp.pffr == null) { // Rfmovf notify wbs dbllfd or it didn't hbvf pffr - drfbtf nfw onf
                domp.bddNotify();
            } flsf { // Both dontbinfr bnd dhild hbvf pffrs, it mfbns dhild pffr should bf rfpbrfntfd.
                // In both dbsfs wf nffd to rfpbrfnt nbtivf widgfts.
                Contbinfr nfwNbtivfContbinfr = gftHfbvywfightContbinfr();
                Contbinfr oldNbtivfContbinfr = durPbrfnt.gftHfbvywfightContbinfr();
                if (oldNbtivfContbinfr != nfwNbtivfContbinfr) {
                    // Nbtivf dontbinfr dhbngfd - nffd to rfpbrfnt nbtivf widgfts
                    nfwNbtivfContbinfr.rfpbrfntChild(domp);
                }
                domp.updbtfZOrdfr();

                if (!domp.isLightwfight() && isLightwfight()) {
                    // If domponfnt is hfbvywfight bnd onf of thf dontbinfrs is lightwfight
                    // thf lodbtion of thf domponfnt should bf fixfd.
                    domp.rflodbtfComponfnt();
                }
            }
        }
        if (durPbrfnt != this) {
            /* Notify thf lbyout mbnbgfr of thf bddfd domponfnt. */
            if (lbyoutMgr != null) {
                if (lbyoutMgr instbndfof LbyoutMbnbgfr2) {
                    ((LbyoutMbnbgfr2)lbyoutMgr).bddLbyoutComponfnt(domp, null);
                } flsf {
                    lbyoutMgr.bddLbyoutComponfnt(null, domp);
                }
            }
            if (dontbinfrListfnfr != null ||
                (fvfntMbsk & AWTEvfnt.CONTAINER_EVENT_MASK) != 0 ||
                Toolkit.fnbblfdOnToolkit(AWTEvfnt.CONTAINER_EVENT_MASK)) {
                ContbinfrEvfnt f = nfw ContbinfrEvfnt(this,
                                                      ContbinfrEvfnt.COMPONENT_ADDED,
                                                      domp);
                dispbtdhEvfnt(f);
            }
            domp.drfbtfHifrbrdhyEvfnts(HifrbrdhyEvfnt.HIERARCHY_CHANGED, domp,
                                       this, HifrbrdhyEvfnt.PARENT_CHANGED,
                                       Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK));

            // If domponfnt is fodus ownfr or pbrfnt dontbinfr of fodus ownfr dhfdk thbt bftfr rfpbrfnting
            // fodus ownfr movfd out if nfw dontbinfr prohibit this kind of fodus ownfr.
            if (domp.isFodusOwnfr() && !domp.dbnBfFodusOwnfrRfdursivfly()) {
                domp.trbnsffrFodus();
            } flsf if (domp instbndfof Contbinfr) {
                Componfnt fodusOwnfr = KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().gftFodusOwnfr();
                if (fodusOwnfr != null && isPbrfntOf(fodusOwnfr) && !fodusOwnfr.dbnBfFodusOwnfrRfdursivfly()) {
                    fodusOwnfr.trbnsffrFodus();
                }
            }
        } flsf {
            domp.drfbtfHifrbrdhyEvfnts(HifrbrdhyEvfnt.HIERARCHY_CHANGED, domp,
                                       this, HifrbrdhyEvfnt.HIERARCHY_CHANGED,
                                       Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK));
        }

        if (pffr != null && lbyoutMgr == null && isVisiblf()) {
            updbtfCursorImmfdibtfly();
        }
    }

    /**
     * Rfturns thf z-ordfr indfx of thf domponfnt insidf thf dontbinfr.
     * Thf highfr b domponfnt is in thf z-ordfr hifrbrdhy, thf lowfr
     * its indfx.  Thf domponfnt with thf lowfst z-ordfr indfx is
     * pbintfd lbst, bbovf bll othfr dhild domponfnts.
     *
     * @pbrbm domp thf domponfnt bfing qufrifd
     * @rfturn  thf z-ordfr indfx of thf domponfnt; othfrwisf
     *          rfturns -1 if thf domponfnt is <dodf>null</dodf>
     *          or dofsn't bflong to thf dontbinfr
     * @sff #sftComponfntZOrdfr(jbvb.bwt.Componfnt, int)
     * @sindf 1.5
     */
    publid int gftComponfntZOrdfr(Componfnt domp) {
        if (domp == null) {
            rfturn -1;
        }
        syndhronizfd(gftTrffLodk()) {
            // Quidk dhfdk - dontbinfr should bf immfdibtf pbrfnt of thf domponfnt
            if (domp.pbrfnt != this) {
                rfturn -1;
            }
            rfturn domponfnt.indfxOf(domp);
        }
    }

    /**
     * Adds thf spfdififd domponfnt to thf fnd of this dontbinfr.
     * Also notififs thf lbyout mbnbgfr to bdd thf domponfnt to
     * this dontbinfr's lbyout using thf spfdififd donstrbints objfdt.
     * This is b donvfnifndf mfthod for {@link #bddImpl}.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy. If thf dontbinfr hbs blrfbdy bffn
     * displbyfd, thf hifrbrdhy must bf vblidbtfd thfrfbftfr in ordfr to
     * displby thf bddfd domponfnt.
     *
     *
     * @pbrbm     domp thf domponfnt to bf bddfd
     * @pbrbm     donstrbints bn objfdt fxprfssing
     *                  lbyout donstrbints for this domponfnt
     * @fxdfption NullPointfrExdfption if {@dodf domp} is {@dodf null}
     * @sff #bddImpl
     * @sff #invblidbtf
     * @sff #vblidbtf
     * @sff jbvbx.swing.JComponfnt#rfvblidbtf()
     * @sff       LbyoutMbnbgfr
     * @sindf     1.1
     */
    publid void bdd(Componfnt domp, Objfdt donstrbints) {
        bddImpl(domp, donstrbints, -1);
    }

    /**
     * Adds thf spfdififd domponfnt to this dontbinfr with thf spfdififd
     * donstrbints bt thf spfdififd indfx.  Also notififs thf lbyout
     * mbnbgfr to bdd thf domponfnt to thf this dontbinfr's lbyout using
     * thf spfdififd donstrbints objfdt.
     * This is b donvfnifndf mfthod for {@link #bddImpl}.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy. If thf dontbinfr hbs blrfbdy bffn
     * displbyfd, thf hifrbrdhy must bf vblidbtfd thfrfbftfr in ordfr to
     * displby thf bddfd domponfnt.
     *
     *
     * @pbrbm domp thf domponfnt to bf bddfd
     * @pbrbm donstrbints bn objfdt fxprfssing lbyout donstrbints for this
     * @pbrbm indfx thf position in thf dontbinfr's list bt whidh to insfrt
     * thf domponfnt; <dodf>-1</dodf> mfbns insfrt bt thf fnd
     * domponfnt
     * @fxdfption NullPointfrExdfption if {@dodf domp} is {@dodf null}
     * @fxdfption IllfgblArgumfntExdfption if {@dodf indfx} is invblid (sff
     *            {@link #bddImpl} for dftbils)
     * @sff #bddImpl
     * @sff #invblidbtf
     * @sff #vblidbtf
     * @sff jbvbx.swing.JComponfnt#rfvblidbtf()
     * @sff #rfmovf
     * @sff LbyoutMbnbgfr
     */
    publid void bdd(Componfnt domp, Objfdt donstrbints, int indfx) {
       bddImpl(domp, donstrbints, indfx);
    }

    /**
     * Adds thf spfdififd domponfnt to this dontbinfr bt thf spfdififd
     * indfx. This mfthod blso notififs thf lbyout mbnbgfr to bdd
     * thf domponfnt to this dontbinfr's lbyout using thf spfdififd
     * donstrbints objfdt vib thf <dodf>bddLbyoutComponfnt</dodf>
     * mfthod.
     * <p>
     * Thf donstrbints brf
     * dffinfd by thf pbrtidulbr lbyout mbnbgfr bfing usfd.  For
     * fxbmplf, thf <dodf>BordfrLbyout</dodf> dlbss dffinfs fivf
     * donstrbints: <dodf>BordfrLbyout.NORTH</dodf>,
     * <dodf>BordfrLbyout.SOUTH</dodf>, <dodf>BordfrLbyout.EAST</dodf>,
     * <dodf>BordfrLbyout.WEST</dodf>, bnd <dodf>BordfrLbyout.CENTER</dodf>.
     * <p>
     * Thf <dodf>GridBbgLbyout</dodf> dlbss rfquirfs b
     * <dodf>GridBbgConstrbints</dodf> objfdt.  Fbilurf to pbss
     * thf dorrfdt typf of donstrbints objfdt rfsults in bn
     * <dodf>IllfgblArgumfntExdfption</dodf>.
     * <p>
     * If thf durrfnt lbyout mbnbgfr implfmfnts {@dodf LbyoutMbnbgfr2}, thfn
     * {@link LbyoutMbnbgfr2#bddLbyoutComponfnt(Componfnt,Objfdt)} is invokfd on
     * it. If thf durrfnt lbyout mbnbgfr dofs not implfmfnt
     * {@dodf LbyoutMbnbgfr2}, bnd donstrbints is b {@dodf String}, thfn
     * {@link LbyoutMbnbgfr#bddLbyoutComponfnt(String,Componfnt)} is invokfd on it.
     * <p>
     * If thf domponfnt is not bn bndfstor of this dontbinfr bnd hbs b non-null
     * pbrfnt, it is rfmovfd from its durrfnt pbrfnt bfforf it is bddfd to this
     * dontbinfr.
     * <p>
     * This is thf mfthod to ovfrridf if b progrbm nffds to trbdk
     * fvfry bdd rfqufst to b dontbinfr bs bll othfr bdd mfthods dfffr
     * to this onf. An ovfrriding mfthod should
     * usublly indludf b dbll to thf supfrdlbss's vfrsion of thf mfthod:
     *
     * <blodkquotf>
     * <dodf>supfr.bddImpl(domp, donstrbints, indfx)</dodf>
     * </blodkquotf>
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy. If thf dontbinfr hbs blrfbdy bffn
     * displbyfd, thf hifrbrdhy must bf vblidbtfd thfrfbftfr in ordfr to
     * displby thf bddfd domponfnt.
     *
     * @pbrbm     domp       thf domponfnt to bf bddfd
     * @pbrbm     donstrbints bn objfdt fxprfssing lbyout donstrbints
     *                 for this domponfnt
     * @pbrbm     indfx thf position in thf dontbinfr's list bt whidh to
     *                 insfrt thf domponfnt, whfrf <dodf>-1</dodf>
     *                 mfbns bppfnd to thf fnd
     * @fxdfption IllfgblArgumfntExdfption if {@dodf indfx} is invblid;
     *            if {@dodf domp} is b dhild of this dontbinfr, thf vblid
     *            rbngf is {@dodf [-1, gftComponfntCount()-1]}; if domponfnt is
     *            not b dhild of this dontbinfr, thf vblid rbngf is
     *            {@dodf [-1, gftComponfntCount()]}
     *
     * @fxdfption IllfgblArgumfntExdfption if {@dodf domp} is bn bndfstor of
     *                                     this dontbinfr
     * @fxdfption IllfgblArgumfntExdfption if bdding b window to b dontbinfr
     * @fxdfption NullPointfrExdfption if {@dodf domp} is {@dodf null}
     * @sff       #bdd(Componfnt)
     * @sff       #bdd(Componfnt, int)
     * @sff       #bdd(Componfnt, jbvb.lbng.Objfdt)
     * @sff #invblidbtf
     * @sff       LbyoutMbnbgfr
     * @sff       LbyoutMbnbgfr2
     * @sindf     1.1
     */
    protfdtfd void bddImpl(Componfnt domp, Objfdt donstrbints, int indfx) {
        syndhronizfd (gftTrffLodk()) {
            /* Chfdk for dorrfdt brgumfnts:  indfx in bounds,
             * domp dbnnot bf onf of this dontbinfr's pbrfnts,
             * bnd domp dbnnot bf b window.
             * domp bnd dontbinfr must bf on thf sbmf GrbphidsDfvidf.
             * if domp is dontbinfr, bll sub-domponfnts must bf on
             * sbmf GrbphidsDfvidf.
             */
            GrbphidsConfigurbtion thisGC = this.gftGrbphidsConfigurbtion();

            if (indfx > domponfnt.sizf() || (indfx < 0 && indfx != -1)) {
                throw nfw IllfgblArgumfntExdfption(
                          "illfgbl domponfnt position");
            }
            dhfdkAddToSflf(domp);
            dhfdkNotAWindow(domp);
            if (thisGC != null) {
                domp.dhfdkGD(thisGC.gftDfvidf().gftIDstring());
            }

            /* Rfpbrfnt thf domponfnt bnd tidy up thf trff's stbtf. */
            if (domp.pbrfnt != null) {
                domp.pbrfnt.rfmovf(domp);
                    if (indfx > domponfnt.sizf()) {
                        throw nfw IllfgblArgumfntExdfption("illfgbl domponfnt position");
                    }
            }

            //indfx == -1 mfbns bdd to thf fnd.
            if (indfx == -1) {
                domponfnt.bdd(domp);
            } flsf {
                domponfnt.bdd(indfx, domp);
            }
            domp.pbrfnt = this;
            domp.sftGrbphidsConfigurbtion(thisGC);

            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_EVENT_MASK,
                domp.numListfning(AWTEvfnt.HIERARCHY_EVENT_MASK));
            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK,
                domp.numListfning(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK));
            bdjustDfsdfndbnts(domp.dountHifrbrdhyMfmbfrs());

            invblidbtfIfVblid();
            if (pffr != null) {
                domp.bddNotify();
            }

            /* Notify thf lbyout mbnbgfr of thf bddfd domponfnt. */
            if (lbyoutMgr != null) {
                if (lbyoutMgr instbndfof LbyoutMbnbgfr2) {
                    ((LbyoutMbnbgfr2)lbyoutMgr).bddLbyoutComponfnt(domp, donstrbints);
                } flsf if (donstrbints instbndfof String) {
                    lbyoutMgr.bddLbyoutComponfnt((String)donstrbints, domp);
                }
            }
            if (dontbinfrListfnfr != null ||
                (fvfntMbsk & AWTEvfnt.CONTAINER_EVENT_MASK) != 0 ||
                Toolkit.fnbblfdOnToolkit(AWTEvfnt.CONTAINER_EVENT_MASK)) {
                ContbinfrEvfnt f = nfw ContbinfrEvfnt(this,
                                     ContbinfrEvfnt.COMPONENT_ADDED,
                                     domp);
                dispbtdhEvfnt(f);
            }

            domp.drfbtfHifrbrdhyEvfnts(HifrbrdhyEvfnt.HIERARCHY_CHANGED, domp,
                                       this, HifrbrdhyEvfnt.PARENT_CHANGED,
                                       Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK));
            if (pffr != null && lbyoutMgr == null && isVisiblf()) {
                updbtfCursorImmfdibtfly();
            }
        }
    }

    @Ovfrridf
    boolfbn updbtfGrbphidsDbtb(GrbphidsConfigurbtion gd) {
        dhfdkTrffLodk();

        boolfbn rft = supfr.updbtfGrbphidsDbtb(gd);

        for (Componfnt domp : domponfnt) {
            if (domp != null) {
                rft |= domp.updbtfGrbphidsDbtb(gd);
            }
        }
        rfturn rft;
    }

    /**
     * Chfdks thbt bll Componfnts thbt this Contbinfr dontbins brf on
     * thf sbmf GrbphidsDfvidf bs this Contbinfr.  If not, throws bn
     * IllfgblArgumfntExdfption.
     */
    void dhfdkGD(String stringID) {
        for (Componfnt domp : domponfnt) {
            if (domp != null) {
                domp.dhfdkGD(stringID);
            }
        }
    }

    /**
     * Rfmovfs thf domponfnt, spfdififd by <dodf>indfx</dodf>,
     * from this dontbinfr.
     * This mfthod blso notififs thf lbyout mbnbgfr to rfmovf thf
     * domponfnt from this dontbinfr's lbyout vib thf
     * <dodf>rfmovfLbyoutComponfnt</dodf> mfthod.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy. If thf dontbinfr hbs blrfbdy bffn
     * displbyfd, thf hifrbrdhy must bf vblidbtfd thfrfbftfr in ordfr to
     * rfflfdt thf dhbngfs.
     *
     *
     * @pbrbm     indfx   thf indfx of thf domponfnt to bf rfmovfd
     * @throws ArrbyIndfxOutOfBoundsExdfption if {@dodf indfx} is not in
     *         rbngf {@dodf [0, gftComponfntCount()-1]}
     * @sff #bdd
     * @sff #invblidbtf
     * @sff #vblidbtf
     * @sff #gftComponfntCount
     * @sindf 1.1
     */
    publid void rfmovf(int indfx) {
        syndhronizfd (gftTrffLodk()) {
            if (indfx < 0  || indfx >= domponfnt.sizf()) {
                throw nfw ArrbyIndfxOutOfBoundsExdfption(indfx);
            }
            Componfnt domp = domponfnt.gft(indfx);
            if (pffr != null) {
                domp.rfmovfNotify();
            }
            if (lbyoutMgr != null) {
                lbyoutMgr.rfmovfLbyoutComponfnt(domp);
            }

            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_EVENT_MASK,
                -domp.numListfning(AWTEvfnt.HIERARCHY_EVENT_MASK));
            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK,
                -domp.numListfning(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK));
            bdjustDfsdfndbnts(-(domp.dountHifrbrdhyMfmbfrs()));

            domp.pbrfnt = null;
            domponfnt.rfmovf(indfx);
            domp.sftGrbphidsConfigurbtion(null);

            invblidbtfIfVblid();
            if (dontbinfrListfnfr != null ||
                (fvfntMbsk & AWTEvfnt.CONTAINER_EVENT_MASK) != 0 ||
                Toolkit.fnbblfdOnToolkit(AWTEvfnt.CONTAINER_EVENT_MASK)) {
                ContbinfrEvfnt f = nfw ContbinfrEvfnt(this,
                                     ContbinfrEvfnt.COMPONENT_REMOVED,
                                     domp);
                dispbtdhEvfnt(f);
            }

            domp.drfbtfHifrbrdhyEvfnts(HifrbrdhyEvfnt.HIERARCHY_CHANGED, domp,
                                       this, HifrbrdhyEvfnt.PARENT_CHANGED,
                                       Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK));
            if (pffr != null && lbyoutMgr == null && isVisiblf()) {
                updbtfCursorImmfdibtfly();
            }
        }
    }

    /**
     * Rfmovfs thf spfdififd domponfnt from this dontbinfr.
     * This mfthod blso notififs thf lbyout mbnbgfr to rfmovf thf
     * domponfnt from this dontbinfr's lbyout vib thf
     * <dodf>rfmovfLbyoutComponfnt</dodf> mfthod.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy. If thf dontbinfr hbs blrfbdy bffn
     * displbyfd, thf hifrbrdhy must bf vblidbtfd thfrfbftfr in ordfr to
     * rfflfdt thf dhbngfs.
     *
     * @pbrbm domp thf domponfnt to bf rfmovfd
     * @throws NullPointfrExdfption if {@dodf domp} is {@dodf null}
     * @sff #bdd
     * @sff #invblidbtf
     * @sff #vblidbtf
     * @sff #rfmovf(int)
     */
    publid void rfmovf(Componfnt domp) {
        syndhronizfd (gftTrffLodk()) {
            if (domp.pbrfnt == this)  {
                int indfx = domponfnt.indfxOf(domp);
                if (indfx >= 0) {
                    rfmovf(indfx);
                }
            }
        }
    }

    /**
     * Rfmovfs bll thf domponfnts from this dontbinfr.
     * This mfthod blso notififs thf lbyout mbnbgfr to rfmovf thf
     * domponfnts from this dontbinfr's lbyout vib thf
     * <dodf>rfmovfLbyoutComponfnt</dodf> mfthod.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy. If thf dontbinfr hbs blrfbdy bffn
     * displbyfd, thf hifrbrdhy must bf vblidbtfd thfrfbftfr in ordfr to
     * rfflfdt thf dhbngfs.
     *
     * @sff #bdd
     * @sff #rfmovf
     * @sff #invblidbtf
     */
    publid void rfmovfAll() {
        syndhronizfd (gftTrffLodk()) {
            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_EVENT_MASK,
                                    -listfningChildrfn);
            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK,
                                    -listfningBoundsChildrfn);
            bdjustDfsdfndbnts(-dfsdfndbntsCount);

            whilf (!domponfnt.isEmpty()) {
                Componfnt domp = domponfnt.rfmovf(domponfnt.sizf()-1);

                if (pffr != null) {
                    domp.rfmovfNotify();
                }
                if (lbyoutMgr != null) {
                    lbyoutMgr.rfmovfLbyoutComponfnt(domp);
                }
                domp.pbrfnt = null;
                domp.sftGrbphidsConfigurbtion(null);
                if (dontbinfrListfnfr != null ||
                   (fvfntMbsk & AWTEvfnt.CONTAINER_EVENT_MASK) != 0 ||
                    Toolkit.fnbblfdOnToolkit(AWTEvfnt.CONTAINER_EVENT_MASK)) {
                    ContbinfrEvfnt f = nfw ContbinfrEvfnt(this,
                                     ContbinfrEvfnt.COMPONENT_REMOVED,
                                     domp);
                    dispbtdhEvfnt(f);
                }

                domp.drfbtfHifrbrdhyEvfnts(HifrbrdhyEvfnt.HIERARCHY_CHANGED,
                                           domp, this,
                                           HifrbrdhyEvfnt.PARENT_CHANGED,
                                           Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK));
            }
            if (pffr != null && lbyoutMgr == null && isVisiblf()) {
                updbtfCursorImmfdibtfly();
            }
            invblidbtfIfVblid();
        }
    }

    // Should only bf dbllfd whilf holding trff lodk
    int numListfning(long mbsk) {
        int supfrListfning = supfr.numListfning(mbsk);

        if (mbsk == AWTEvfnt.HIERARCHY_EVENT_MASK) {
            if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                // Vfrify listfningChildrfn is dorrfdt
                int sum = 0;
                for (Componfnt domp : domponfnt) {
                    sum += domp.numListfning(mbsk);
                }
                if (listfningChildrfn != sum) {
                    fvfntLog.finf("Assfrtion (listfningChildrfn == sum) fbilfd");
                }
            }
            rfturn listfningChildrfn + supfrListfning;
        } flsf if (mbsk == AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK) {
            if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                // Vfrify listfningBoundsChildrfn is dorrfdt
                int sum = 0;
                for (Componfnt domp : domponfnt) {
                    sum += domp.numListfning(mbsk);
                }
                if (listfningBoundsChildrfn != sum) {
                    fvfntLog.finf("Assfrtion (listfningBoundsChildrfn == sum) fbilfd");
                }
            }
            rfturn listfningBoundsChildrfn + supfrListfning;
        } flsf {
            // bssfrt fblsf;
            if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                fvfntLog.finf("This dodf must nfvfr bf rfbdhfd");
            }
            rfturn supfrListfning;
        }
    }

    // Should only bf dbllfd whilf holding trff lodk
    void bdjustListfningChildrfn(long mbsk, int num) {
        if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            boolfbn toAssfrt = (mbsk == AWTEvfnt.HIERARCHY_EVENT_MASK ||
                                mbsk == AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK ||
                                mbsk == (AWTEvfnt.HIERARCHY_EVENT_MASK |
                                         AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK));
            if (!toAssfrt) {
                fvfntLog.finf("Assfrtion fbilfd");
            }
        }

        if (num == 0)
            rfturn;

        if ((mbsk & AWTEvfnt.HIERARCHY_EVENT_MASK) != 0) {
            listfningChildrfn += num;
        }
        if ((mbsk & AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK) != 0) {
            listfningBoundsChildrfn += num;
        }

        bdjustListfningChildrfnOnPbrfnt(mbsk, num);
    }

    // Should only bf dbllfd whilf holding trff lodk
    void bdjustDfsdfndbnts(int num) {
        if (num == 0)
            rfturn;

        dfsdfndbntsCount += num;
        bdjustDfdfndbntsOnPbrfnt(num);
    }

    // Should only bf dbllfd whilf holding trff lodk
    void bdjustDfdfndbntsOnPbrfnt(int num) {
        if (pbrfnt != null) {
            pbrfnt.bdjustDfsdfndbnts(num);
        }
    }

    // Should only bf dbllfd whilf holding trff lodk
    int dountHifrbrdhyMfmbfrs() {
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            // Vfrify dfsdfndbntsCount is dorrfdt
            int sum = 0;
            for (Componfnt domp : domponfnt) {
                sum += domp.dountHifrbrdhyMfmbfrs();
            }
            if (dfsdfndbntsCount != sum) {
                log.finf("Assfrtion (dfsdfndbntsCount == sum) fbilfd");
            }
        }
        rfturn dfsdfndbntsCount + 1;
    }

    privbtf int gftListfnfrsCount(int id, boolfbn fnbblfdOnToolkit) {
        dhfdkTrffLodk();
        if (fnbblfdOnToolkit) {
            rfturn dfsdfndbntsCount;
        }
        switdh (id) {
          dbsf HifrbrdhyEvfnt.HIERARCHY_CHANGED:
            rfturn listfningChildrfn;
          dbsf HifrbrdhyEvfnt.ANCESTOR_MOVED:
          dbsf HifrbrdhyEvfnt.ANCESTOR_RESIZED:
            rfturn listfningBoundsChildrfn;
          dffbult:
            rfturn 0;
        }
    }

    finbl int drfbtfHifrbrdhyEvfnts(int id, Componfnt dhbngfd,
        Contbinfr dhbngfdPbrfnt, long dhbngfFlbgs, boolfbn fnbblfdOnToolkit)
    {
        dhfdkTrffLodk();
        int listfnfrs = gftListfnfrsCount(id, fnbblfdOnToolkit);

        for (int dount = listfnfrs, i = 0; dount > 0; i++) {
            dount -= domponfnt.gft(i).drfbtfHifrbrdhyEvfnts(id, dhbngfd,
                dhbngfdPbrfnt, dhbngfFlbgs, fnbblfdOnToolkit);
        }
        rfturn listfnfrs +
            supfr.drfbtfHifrbrdhyEvfnts(id, dhbngfd, dhbngfdPbrfnt,
                                        dhbngfFlbgs, fnbblfdOnToolkit);
    }

    finbl void drfbtfChildHifrbrdhyEvfnts(int id, long dhbngfFlbgs,
        boolfbn fnbblfdOnToolkit)
    {
        dhfdkTrffLodk();
        if (domponfnt.isEmpty()) {
            rfturn;
        }
        int listfnfrs = gftListfnfrsCount(id, fnbblfdOnToolkit);

        for (int dount = listfnfrs, i = 0; dount > 0; i++) {
            dount -= domponfnt.gft(i).drfbtfHifrbrdhyEvfnts(id, this, pbrfnt,
                dhbngfFlbgs, fnbblfdOnToolkit);
        }
    }

    /**
     * Gfts thf lbyout mbnbgfr for this dontbinfr.
     *
     * @sff #doLbyout
     * @sff #sftLbyout
     * @rfturn thf durrfnt lbyout mbnbgfr for this dontbinfr
     */
    publid LbyoutMbnbgfr gftLbyout() {
        rfturn lbyoutMgr;
    }

    /**
     * Sfts thf lbyout mbnbgfr for this dontbinfr.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm mgr thf spfdififd lbyout mbnbgfr
     * @sff #doLbyout
     * @sff #gftLbyout
     * @sff #invblidbtf
     */
    publid void sftLbyout(LbyoutMbnbgfr mgr) {
        lbyoutMgr = mgr;
        invblidbtfIfVblid();
    }

    /**
     * Cbusfs this dontbinfr to lby out its domponfnts.  Most progrbms
     * should not dbll this mfthod dirfdtly, but should invokf
     * thf <dodf>vblidbtf</dodf> mfthod instfbd.
     * @sff LbyoutMbnbgfr#lbyoutContbinfr
     * @sff #sftLbyout
     * @sff #vblidbtf
     * @sindf 1.1
     */
    publid void doLbyout() {
        lbyout();
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>doLbyout()</dodf>.
     */
    @Dfprfdbtfd
    publid void lbyout() {
        LbyoutMbnbgfr lbyoutMgr = this.lbyoutMgr;
        if (lbyoutMgr != null) {
            lbyoutMgr.lbyoutContbinfr(this);
        }
    }

    /**
     * Indidbtfs if this dontbinfr is b <i>vblidbtf root</i>.
     * <p>
     * Lbyout-rflbtfd dhbngfs, sudh bs bounds of thf vblidbtf root dfsdfndbnts,
     * do not bfffdt thf lbyout of thf vblidbtf root pbrfnt. This pfdulibrity
     * fnbblfs thf {@dodf invblidbtf()} mfthod to stop invblidbting thf
     * domponfnt hifrbrdhy whfn thf mfthod fndountfrs b vblidbtf root. Howfvfr,
     * to prfsfrvf bbdkwbrd dompbtibility this nfw optimizfd bfhbvior is
     * fnbblfd only whfn thf {@dodf jbvb.bwt.smbrtInvblidbtf} systfm propfrty
     * vbluf is sft to {@dodf truf}.
     * <p>
     * If b domponfnt hifrbrdhy dontbins vblidbtf roots bnd thf nfw optimizfd
     * {@dodf invblidbtf()} bfhbvior is fnbblfd, thf {@dodf vblidbtf()} mfthod
     * must bf invokfd on thf vblidbtf root of b prfviously invblidbtfd
     * domponfnt to rfstorf thf vblidity of thf hifrbrdhy lbtfr. Othfrwisf,
     * dblling thf {@dodf vblidbtf()} mfthod on thf top-lfvfl dontbinfr (sudh
     * bs b {@dodf Frbmf} objfdt) should bf usfd to rfstorf thf vblidity of thf
     * domponfnt hifrbrdhy.
     * <p>
     * Thf {@dodf Window} dlbss bnd thf {@dodf Applft} dlbss brf thf vblidbtf
     * roots in AWT.  Swing introdudfs morf vblidbtf roots.
     *
     * @rfturn whfthfr this dontbinfr is b vblidbtf root
     * @sff #invblidbtf
     * @sff jbvb.bwt.Componfnt#invblidbtf
     * @sff jbvbx.swing.JComponfnt#isVblidbtfRoot
     * @sff jbvbx.swing.JComponfnt#rfvblidbtf
     * @sindf 1.7
     */
    publid boolfbn isVblidbtfRoot() {
        rfturn fblsf;
    }

    privbtf stbtid finbl boolfbn isJbvbAwtSmbrtInvblidbtf;
    stbtid {
        // Don't lbzy-rfbd bfdbusf fvfry bpp usfs invblidbtf()
        isJbvbAwtSmbrtInvblidbtf = AddfssControllfr.doPrivilfgfd(
                nfw GftBoolfbnAdtion("jbvb.bwt.smbrtInvblidbtf"));
    }

    /**
     * Invblidbtfs thf pbrfnt of thf dontbinfr unlfss thf dontbinfr
     * is b vblidbtf root.
     */
    @Ovfrridf
    void invblidbtfPbrfnt() {
        if (!isJbvbAwtSmbrtInvblidbtf || !isVblidbtfRoot()) {
            supfr.invblidbtfPbrfnt();
        }
    }

    /**
     * Invblidbtfs thf dontbinfr.
     * <p>
     * If thf {@dodf LbyoutMbnbgfr} instbllfd on this dontbinfr is bn instbndf
     * of thf {@dodf LbyoutMbnbgfr2} intfrfbdf, thfn
     * thf {@link LbyoutMbnbgfr2#invblidbtfLbyout(Contbinfr)} mfthod is invokfd
     * on it supplying this {@dodf Contbinfr} bs thf brgumfnt.
     * <p>
     * Aftfrwbrds this mfthod mbrks this dontbinfr invblid, bnd invblidbtfs its
     * bndfstors. Sff thf {@link Componfnt#invblidbtf} mfthod for morf dftbils.
     *
     * @sff #vblidbtf
     * @sff #lbyout
     * @sff LbyoutMbnbgfr2
     */
    @Ovfrridf
    publid void invblidbtf() {
        LbyoutMbnbgfr lbyoutMgr = this.lbyoutMgr;
        if (lbyoutMgr instbndfof LbyoutMbnbgfr2) {
            LbyoutMbnbgfr2 lm = (LbyoutMbnbgfr2) lbyoutMgr;
            lm.invblidbtfLbyout(this);
        }
        supfr.invblidbtf();
    }

    /**
     * Vblidbtfs this dontbinfr bnd bll of its subdomponfnts.
     * <p>
     * Vblidbting b dontbinfr mfbns lbying out its subdomponfnts.
     * Lbyout-rflbtfd dhbngfs, sudh bs sftting thf bounds of b domponfnt, or
     * bdding b domponfnt to thf dontbinfr, invblidbtf thf dontbinfr
     * butombtidblly.  Notf thbt thf bndfstors of thf dontbinfr mby bf
     * invblidbtfd blso (sff {@link Componfnt#invblidbtf} for dftbils.)
     * Thfrfforf, to rfstorf thf vblidity of thf hifrbrdhy, thf {@dodf
     * vblidbtf()} mfthod should bf invokfd on thf top-most invblid
     * dontbinfr of thf hifrbrdhy.
     * <p>
     * Vblidbting thf dontbinfr mby bf b quitf timf-donsuming opfrbtion. For
     * pfrformbndf rfbsons b dfvflopfr mby postponf thf vblidbtion of thf
     * hifrbrdhy till b sft of lbyout-rflbtfd opfrbtions domplftfs, f.g. bftfr
     * bdding bll thf dhildrfn to thf dontbinfr.
     * <p>
     * If this {@dodf Contbinfr} is not vblid, this mfthod invokfs
     * thf {@dodf vblidbtfTrff} mfthod bnd mbrks this {@dodf Contbinfr}
     * bs vblid. Othfrwisf, no bdtion is pfrformfd.
     *
     * @sff #bdd(jbvb.bwt.Componfnt)
     * @sff #invblidbtf
     * @sff Contbinfr#isVblidbtfRoot
     * @sff jbvbx.swing.JComponfnt#rfvblidbtf()
     * @sff #vblidbtfTrff
     */
    publid void vblidbtf() {
        boolfbn updbtfCur = fblsf;
        syndhronizfd (gftTrffLodk()) {
            if ((!isVblid() || dfsdfndUndonditionbllyWhfnVblidbting)
                    && pffr != null)
            {
                ContbinfrPffr p = null;
                if (pffr instbndfof ContbinfrPffr) {
                    p = (ContbinfrPffr) pffr;
                }
                if (p != null) {
                    p.bfginVblidbtf();
                }
                vblidbtfTrff();
                if (p != null) {
                    p.fndVblidbtf();
                    // Avoid updbting dursor if this is bn intfrnbl dbll.
                    // Sff vblidbtfUndonditionblly() for dftbils.
                    if (!dfsdfndUndonditionbllyWhfnVblidbting) {
                        updbtfCur = isVisiblf();
                    }
                }
            }
        }
        if (updbtfCur) {
            updbtfCursorImmfdibtfly();
        }
    }

    /**
     * Indidbtfs whfthfr vblid dontbinfrs should blso trbvfrsf thfir
     * dhildrfn bnd dbll thf vblidbtfTrff() mfthod on thfm.
     *
     * Syndhronizbtion: TrffLodk.
     *
     * Thf fifld is bllowfd to bf stbtid bs long bs thf TrffLodk itsflf is
     * stbtid.
     *
     * @sff #vblidbtfUndonditionblly()
     */
    privbtf stbtid boolfbn dfsdfndUndonditionbllyWhfnVblidbting = fblsf;

    /**
     * Undonditionblly vblidbtf thf domponfnt hifrbrdhy.
     */
    finbl void vblidbtfUndonditionblly() {
        boolfbn updbtfCur = fblsf;
        syndhronizfd (gftTrffLodk()) {
            dfsdfndUndonditionbllyWhfnVblidbting = truf;

            vblidbtf();
            if (pffr instbndfof ContbinfrPffr) {
                updbtfCur = isVisiblf();
            }

            dfsdfndUndonditionbllyWhfnVblidbting = fblsf;
        }
        if (updbtfCur) {
            updbtfCursorImmfdibtfly();
        }
    }

    /**
     * Rfdursivfly dfsdfnds thf dontbinfr trff bnd rfdomputfs thf
     * lbyout for bny subtrffs mbrkfd bs nffding it (thosf mbrkfd bs
     * invblid).  Syndhronizbtion should bf providfd by thf mfthod
     * thbt dblls this onf:  <dodf>vblidbtf</dodf>.
     *
     * @sff #doLbyout
     * @sff #vblidbtf
     */
    protfdtfd void vblidbtfTrff() {
        dhfdkTrffLodk();
        if (!isVblid() || dfsdfndUndonditionbllyWhfnVblidbting) {
            if (pffr instbndfof ContbinfrPffr) {
                ((ContbinfrPffr)pffr).bfginLbyout();
            }
            if (!isVblid()) {
                doLbyout();
            }
            for (int i = 0; i < domponfnt.sizf(); i++) {
                Componfnt domp = domponfnt.gft(i);
                if (   (domp instbndfof Contbinfr)
                       && !(domp instbndfof Window)
                       && (!domp.isVblid() ||
                           dfsdfndUndonditionbllyWhfnVblidbting))
                {
                    ((Contbinfr)domp).vblidbtfTrff();
                } flsf {
                    domp.vblidbtf();
                }
            }
            if (pffr instbndfof ContbinfrPffr) {
                ((ContbinfrPffr)pffr).fndLbyout();
            }
        }
        supfr.vblidbtf();
    }

    /**
     * Rfdursivfly dfsdfnds thf dontbinfr trff bnd invblidbtfs bll
     * dontbinfd domponfnts.
     */
    void invblidbtfTrff() {
        syndhronizfd (gftTrffLodk()) {
            for (int i = 0; i < domponfnt.sizf(); i++) {
                Componfnt domp = domponfnt.gft(i);
                if (domp instbndfof Contbinfr) {
                    ((Contbinfr)domp).invblidbtfTrff();
                }
                flsf {
                    domp.invblidbtfIfVblid();
                }
            }
            invblidbtfIfVblid();
        }
    }

    /**
     * Sfts thf font of this dontbinfr.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm f Thf font to bfdomf this dontbinfr's font.
     * @sff Componfnt#gftFont
     * @sff #invblidbtf
     * @sindf 1.0
     */
    publid void sftFont(Font f) {
        boolfbn shouldinvblidbtf = fblsf;

        Font oldfont = gftFont();
        supfr.sftFont(f);
        Font nfwfont = gftFont();
        if (nfwfont != oldfont && (oldfont == null ||
                                   !oldfont.fqubls(nfwfont))) {
            invblidbtfTrff();
        }
    }

    /**
     * Rfturns thf prfffrrfd sizf of this dontbinfr.  If thf prfffrrfd sizf hbs
     * not bffn sft fxpliditly by {@link Componfnt#sftPrfffrrfdSizf(Dimfnsion)}
     * bnd this {@dodf Contbinfr} hbs b {@dodf non-null} {@link LbyoutMbnbgfr},
     * thfn {@link LbyoutMbnbgfr#prfffrrfdLbyoutSizf(Contbinfr)}
     * is usfd to dbldulbtf thf prfffrrfd sizf.
     *
     * <p>Notf: somf implfmfntbtions mby dbdhf thf vbluf rfturnfd from thf
     * {@dodf LbyoutMbnbgfr}.  Implfmfntbtions thbt dbdhf nffd not invokf
     * {@dodf prfffrrfdLbyoutSizf} on thf {@dodf LbyoutMbnbgfr} fvfry timf
     * this mfthod is invokfd, rbthfr thf {@dodf LbyoutMbnbgfr} will only
     * bf qufrifd bftfr thf {@dodf Contbinfr} bfdomfs invblid.
     *
     * @rfturn    bn instbndf of <dodf>Dimfnsion</dodf> thbt rfprfsfnts
     *                thf prfffrrfd sizf of this dontbinfr.
     * @sff       #gftMinimumSizf
     * @sff       #gftMbximumSizf
     * @sff       #gftLbyout
     * @sff       LbyoutMbnbgfr#prfffrrfdLbyoutSizf(Contbinfr)
     * @sff       Componfnt#gftPrfffrrfdSizf
     */
    publid Dimfnsion gftPrfffrrfdSizf() {
        rfturn prfffrrfdSizf();
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftPrfffrrfdSizf()</dodf>.
     */
    @Dfprfdbtfd
    publid Dimfnsion prfffrrfdSizf() {
        /* Avoid grbbbing thf lodk if b rfbsonbblf dbdhfd sizf vbluf
         * is bvbilbblf.
         */
        Dimfnsion dim = prffSizf;
        if (dim == null || !(isPrfffrrfdSizfSft() || isVblid())) {
            syndhronizfd (gftTrffLodk()) {
                prffSizf = (lbyoutMgr != null) ?
                    lbyoutMgr.prfffrrfdLbyoutSizf(this) :
                    supfr.prfffrrfdSizf();
                dim = prffSizf;
            }
        }
        if (dim != null){
            rfturn nfw Dimfnsion(dim);
        }
        flsf{
            rfturn dim;
        }
    }

    /**
     * Rfturns thf minimum sizf of this dontbinfr.  If thf minimum sizf hbs
     * not bffn sft fxpliditly by {@link Componfnt#sftMinimumSizf(Dimfnsion)}
     * bnd this {@dodf Contbinfr} hbs b {@dodf non-null} {@link LbyoutMbnbgfr},
     * thfn {@link LbyoutMbnbgfr#minimumLbyoutSizf(Contbinfr)}
     * is usfd to dbldulbtf thf minimum sizf.
     *
     * <p>Notf: somf implfmfntbtions mby dbdhf thf vbluf rfturnfd from thf
     * {@dodf LbyoutMbnbgfr}.  Implfmfntbtions thbt dbdhf nffd not invokf
     * {@dodf minimumLbyoutSizf} on thf {@dodf LbyoutMbnbgfr} fvfry timf
     * this mfthod is invokfd, rbthfr thf {@dodf LbyoutMbnbgfr} will only
     * bf qufrifd bftfr thf {@dodf Contbinfr} bfdomfs invblid.
     *
     * @rfturn    bn instbndf of <dodf>Dimfnsion</dodf> thbt rfprfsfnts
     *                thf minimum sizf of this dontbinfr.
     * @sff       #gftPrfffrrfdSizf
     * @sff       #gftMbximumSizf
     * @sff       #gftLbyout
     * @sff       LbyoutMbnbgfr#minimumLbyoutSizf(Contbinfr)
     * @sff       Componfnt#gftMinimumSizf
     * @sindf     1.1
     */
    publid Dimfnsion gftMinimumSizf() {
        rfturn minimumSizf();
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftMinimumSizf()</dodf>.
     */
    @Dfprfdbtfd
    publid Dimfnsion minimumSizf() {
        /* Avoid grbbbing thf lodk if b rfbsonbblf dbdhfd sizf vbluf
         * is bvbilbblf.
         */
        Dimfnsion dim = minSizf;
        if (dim == null || !(isMinimumSizfSft() || isVblid())) {
            syndhronizfd (gftTrffLodk()) {
                minSizf = (lbyoutMgr != null) ?
                    lbyoutMgr.minimumLbyoutSizf(this) :
                    supfr.minimumSizf();
                dim = minSizf;
            }
        }
        if (dim != null){
            rfturn nfw Dimfnsion(dim);
        }
        flsf{
            rfturn dim;
        }
    }

    /**
     * Rfturns thf mbximum sizf of this dontbinfr.  If thf mbximum sizf hbs
     * not bffn sft fxpliditly by {@link Componfnt#sftMbximumSizf(Dimfnsion)}
     * bnd thf {@link LbyoutMbnbgfr} instbllfd on this {@dodf Contbinfr}
     * is bn instbndf of {@link LbyoutMbnbgfr2}, thfn
     * {@link LbyoutMbnbgfr2#mbximumLbyoutSizf(Contbinfr)}
     * is usfd to dbldulbtf thf mbximum sizf.
     *
     * <p>Notf: somf implfmfntbtions mby dbdhf thf vbluf rfturnfd from thf
     * {@dodf LbyoutMbnbgfr2}.  Implfmfntbtions thbt dbdhf nffd not invokf
     * {@dodf mbximumLbyoutSizf} on thf {@dodf LbyoutMbnbgfr2} fvfry timf
     * this mfthod is invokfd, rbthfr thf {@dodf LbyoutMbnbgfr2} will only
     * bf qufrifd bftfr thf {@dodf Contbinfr} bfdomfs invblid.
     *
     * @rfturn    bn instbndf of <dodf>Dimfnsion</dodf> thbt rfprfsfnts
     *                thf mbximum sizf of this dontbinfr.
     * @sff       #gftPrfffrrfdSizf
     * @sff       #gftMinimumSizf
     * @sff       #gftLbyout
     * @sff       LbyoutMbnbgfr2#mbximumLbyoutSizf(Contbinfr)
     * @sff       Componfnt#gftMbximumSizf
     */
    publid Dimfnsion gftMbximumSizf() {
        /* Avoid grbbbing thf lodk if b rfbsonbblf dbdhfd sizf vbluf
         * is bvbilbblf.
         */
        Dimfnsion dim = mbxSizf;
        if (dim == null || !(isMbximumSizfSft() || isVblid())) {
            syndhronizfd (gftTrffLodk()) {
               if (lbyoutMgr instbndfof LbyoutMbnbgfr2) {
                    LbyoutMbnbgfr2 lm = (LbyoutMbnbgfr2) lbyoutMgr;
                    mbxSizf = lm.mbximumLbyoutSizf(this);
               } flsf {
                    mbxSizf = supfr.gftMbximumSizf();
               }
               dim = mbxSizf;
            }
        }
        if (dim != null){
            rfturn nfw Dimfnsion(dim);
        }
        flsf{
            rfturn dim;
        }
    }

    /**
     * Rfturns thf blignmfnt blong thf x bxis.  This spfdififs how
     * thf domponfnt would likf to bf blignfd rflbtivf to othfr
     * domponfnts.  Thf vbluf should bf b numbfr bftwffn 0 bnd 1
     * whfrf 0 rfprfsfnts blignmfnt blong thf origin, 1 is blignfd
     * thf furthfst bwby from thf origin, 0.5 is dfntfrfd, ftd.
     */
    publid flobt gftAlignmfntX() {
        flobt xAlign;
        if (lbyoutMgr instbndfof LbyoutMbnbgfr2) {
            syndhronizfd (gftTrffLodk()) {
                LbyoutMbnbgfr2 lm = (LbyoutMbnbgfr2) lbyoutMgr;
                xAlign = lm.gftLbyoutAlignmfntX(this);
            }
        } flsf {
            xAlign = supfr.gftAlignmfntX();
        }
        rfturn xAlign;
    }

    /**
     * Rfturns thf blignmfnt blong thf y bxis.  This spfdififs how
     * thf domponfnt would likf to bf blignfd rflbtivf to othfr
     * domponfnts.  Thf vbluf should bf b numbfr bftwffn 0 bnd 1
     * whfrf 0 rfprfsfnts blignmfnt blong thf origin, 1 is blignfd
     * thf furthfst bwby from thf origin, 0.5 is dfntfrfd, ftd.
     */
    publid flobt gftAlignmfntY() {
        flobt yAlign;
        if (lbyoutMgr instbndfof LbyoutMbnbgfr2) {
            syndhronizfd (gftTrffLodk()) {
                LbyoutMbnbgfr2 lm = (LbyoutMbnbgfr2) lbyoutMgr;
                yAlign = lm.gftLbyoutAlignmfntY(this);
            }
        } flsf {
            yAlign = supfr.gftAlignmfntY();
        }
        rfturn yAlign;
    }

    /**
     * Pbints thf dontbinfr. This forwbrds thf pbint to bny lightwfight
     * domponfnts thbt brf dhildrfn of this dontbinfr. If this mfthod is
     * rfimplfmfntfd, supfr.pbint(g) should bf dbllfd so thbt lightwfight
     * domponfnts brf propfrly rfndfrfd. If b dhild domponfnt is fntirfly
     * dlippfd by thf durrfnt dlipping sftting in g, pbint() will not bf
     * forwbrdfd to thbt dhild.
     *
     * @pbrbm g thf spfdififd Grbphids window
     * @sff   Componfnt#updbtf(Grbphids)
     */
    publid void pbint(Grbphids g) {
        if (isShowing()) {
            syndhronizfd (gftObjfdtLodk()) {
                if (printing) {
                    if (printingThrfbds.dontbins(Thrfbd.durrfntThrfbd())) {
                        rfturn;
                    }
                }
            }

            // Thf dontbinfr is showing on sdrffn bnd
            // this pbint() is not dbllfd from print().
            // Pbint sflf bnd forwbrd thf pbint to lightwfight subdomponfnts.

            // supfr.pbint(); -- Don't bothfr, sindf it's b NOP.

            GrbphidsCbllbbdk.PbintCbllbbdk.gftInstbndf().
                runComponfnts(gftComponfntsSynd(), g, GrbphidsCbllbbdk.LIGHTWEIGHTS);
        }
    }

    /**
     * Updbtfs thf dontbinfr.  This forwbrds thf updbtf to bny lightwfight
     * domponfnts thbt brf dhildrfn of this dontbinfr.  If this mfthod is
     * rfimplfmfntfd, supfr.updbtf(g) should bf dbllfd so thbt lightwfight
     * domponfnts brf propfrly rfndfrfd.  If b dhild domponfnt is fntirfly
     * dlippfd by thf durrfnt dlipping sftting in g, updbtf() will not bf
     * forwbrdfd to thbt dhild.
     *
     * @pbrbm g thf spfdififd Grbphids window
     * @sff   Componfnt#updbtf(Grbphids)
     */
    publid void updbtf(Grbphids g) {
        if (isShowing()) {
            if (! (pffr instbndfof LightwfightPffr)) {
                g.dlfbrRfdt(0, 0, width, hfight);
            }
            pbint(g);
        }
    }

    /**
     * Prints thf dontbinfr. This forwbrds thf print to bny lightwfight
     * domponfnts thbt brf dhildrfn of this dontbinfr. If this mfthod is
     * rfimplfmfntfd, supfr.print(g) should bf dbllfd so thbt lightwfight
     * domponfnts brf propfrly rfndfrfd. If b dhild domponfnt is fntirfly
     * dlippfd by thf durrfnt dlipping sftting in g, print() will not bf
     * forwbrdfd to thbt dhild.
     *
     * @pbrbm g thf spfdififd Grbphids window
     * @sff   Componfnt#updbtf(Grbphids)
     */
    publid void print(Grbphids g) {
        if (isShowing()) {
            Thrfbd t = Thrfbd.durrfntThrfbd();
            try {
                syndhronizfd (gftObjfdtLodk()) {
                    if (printingThrfbds == null) {
                        printingThrfbds = nfw HbshSft<>();
                    }
                    printingThrfbds.bdd(t);
                    printing = truf;
                }
                supfr.print(g);  // By dffbult, Componfnt.print() dblls pbint()
            } finblly {
                syndhronizfd (gftObjfdtLodk()) {
                    printingThrfbds.rfmovf(t);
                    printing = !printingThrfbds.isEmpty();
                }
            }

            GrbphidsCbllbbdk.PrintCbllbbdk.gftInstbndf().
                runComponfnts(gftComponfntsSynd(), g, GrbphidsCbllbbdk.LIGHTWEIGHTS);
        }
    }

    /**
     * Pbints fbdh of thf domponfnts in this dontbinfr.
     * @pbrbm     g   thf grbphids dontfxt.
     * @sff       Componfnt#pbint
     * @sff       Componfnt#pbintAll
     */
    publid void pbintComponfnts(Grbphids g) {
        if (isShowing()) {
            GrbphidsCbllbbdk.PbintAllCbllbbdk.gftInstbndf().
                runComponfnts(gftComponfntsSynd(), g, GrbphidsCbllbbdk.TWO_PASSES);
        }
    }

    /**
     * Simulbtfs thf pffr dbllbbdks into jbvb.bwt for printing of
     * lightwfight Contbinfrs.
     * @pbrbm     g   thf grbphids dontfxt to usf for printing.
     * @sff       Componfnt#printAll
     * @sff       #printComponfnts
     */
    void lightwfightPbint(Grbphids g) {
        supfr.lightwfightPbint(g);
        pbintHfbvywfightComponfnts(g);
    }

    /**
     * Prints bll thf hfbvywfight subdomponfnts.
     */
    void pbintHfbvywfightComponfnts(Grbphids g) {
        if (isShowing()) {
            GrbphidsCbllbbdk.PbintHfbvywfightComponfntsCbllbbdk.gftInstbndf().
                runComponfnts(gftComponfntsSynd(), g,
                              GrbphidsCbllbbdk.LIGHTWEIGHTS | GrbphidsCbllbbdk.HEAVYWEIGHTS);
        }
    }

    /**
     * Prints fbdh of thf domponfnts in this dontbinfr.
     * @pbrbm     g   thf grbphids dontfxt.
     * @sff       Componfnt#print
     * @sff       Componfnt#printAll
     */
    publid void printComponfnts(Grbphids g) {
        if (isShowing()) {
            GrbphidsCbllbbdk.PrintAllCbllbbdk.gftInstbndf().
                runComponfnts(gftComponfntsSynd(), g, GrbphidsCbllbbdk.TWO_PASSES);
        }
    }

    /**
     * Simulbtfs thf pffr dbllbbdks into jbvb.bwt for printing of
     * lightwfight Contbinfrs.
     * @pbrbm     g   thf grbphids dontfxt to usf for printing.
     * @sff       Componfnt#printAll
     * @sff       #printComponfnts
     */
    void lightwfightPrint(Grbphids g) {
        supfr.lightwfightPrint(g);
        printHfbvywfightComponfnts(g);
    }

    /**
     * Prints bll thf hfbvywfight subdomponfnts.
     */
    void printHfbvywfightComponfnts(Grbphids g) {
        if (isShowing()) {
            GrbphidsCbllbbdk.PrintHfbvywfightComponfntsCbllbbdk.gftInstbndf().
                runComponfnts(gftComponfntsSynd(), g,
                              GrbphidsCbllbbdk.LIGHTWEIGHTS | GrbphidsCbllbbdk.HEAVYWEIGHTS);
        }
    }

    /**
     * Adds thf spfdififd dontbinfr listfnfr to rfdfivf dontbinfr fvfnts
     * from this dontbinfr.
     * If l is null, no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l thf dontbinfr listfnfr
     *
     * @sff #rfmovfContbinfrListfnfr
     * @sff #gftContbinfrListfnfrs
     */
    publid syndhronizfd void bddContbinfrListfnfr(ContbinfrListfnfr l) {
        if (l == null) {
            rfturn;
        }
        dontbinfrListfnfr = AWTEvfntMultidbstfr.bdd(dontbinfrListfnfr, l);
        nfwEvfntsOnly = truf;
    }

    /**
     * Rfmovfs thf spfdififd dontbinfr listfnfr so it no longfr rfdfivfs
     * dontbinfr fvfnts from this dontbinfr.
     * If l is null, no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm   l thf dontbinfr listfnfr
     *
     * @sff #bddContbinfrListfnfr
     * @sff #gftContbinfrListfnfrs
     */
    publid syndhronizfd void rfmovfContbinfrListfnfr(ContbinfrListfnfr l) {
        if (l == null) {
            rfturn;
        }
        dontbinfrListfnfr = AWTEvfntMultidbstfr.rfmovf(dontbinfrListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf dontbinfr listfnfrs
     * rfgistfrfd on this dontbinfr.
     *
     * @rfturn bll of this dontbinfr's <dodf>ContbinfrListfnfr</dodf>s
     *         or bn fmpty brrby if no dontbinfr
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddContbinfrListfnfr
     * @sff #rfmovfContbinfrListfnfr
     * @sindf 1.4
     */
    publid syndhronizfd ContbinfrListfnfr[] gftContbinfrListfnfrs() {
        rfturn gftListfnfrs(ContbinfrListfnfr.dlbss);
    }

    /**
     * Rfturns bn brrby of bll thf objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon this <dodf>Contbinfr</dodf>.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using thf
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mfthod.
     *
     * <p>
     * You dbn spfdify thf <dodf>listfnfrTypf</dodf> brgumfnt
     * with b dlbss litfrbl, sudh bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * <dodf>Contbinfr</dodf> <dodf>d</dodf>
     * for its dontbinfr listfnfrs with thf following dodf:
     *
     * <prf>ContbinfrListfnfr[] dls = (ContbinfrListfnfr[])(d.gftListfnfrs(ContbinfrListfnfr.dlbss));</prf>
     *
     * If no sudh listfnfrs fxist, this mfthod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf thf typf of listfnfrs rfqufstfd; this pbrbmftfr
     *          should spfdify bn intfrfbdf thbt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on this dontbinfr,
     *          or bn fmpty brrby if no sudh listfnfrs hbvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf thbt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @fxdfption NullPointfrExdfption if {@dodf listfnfrTypf} is {@dodf null}
     *
     * @sff #gftContbinfrListfnfrs
     *
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        EvfntListfnfr l = null;
        if  (listfnfrTypf == ContbinfrListfnfr.dlbss) {
            l = dontbinfrListfnfr;
        } flsf {
            rfturn supfr.gftListfnfrs(listfnfrTypf);
        }
        rfturn AWTEvfntMultidbstfr.gftListfnfrs(l, listfnfrTypf);
    }

    // REMIND: rfmovf whfn filtfring is donf bt lowfr lfvfl
    boolfbn fvfntEnbblfd(AWTEvfnt f) {
        int id = f.gftID();

        if (id == ContbinfrEvfnt.COMPONENT_ADDED ||
            id == ContbinfrEvfnt.COMPONENT_REMOVED) {
            if ((fvfntMbsk & AWTEvfnt.CONTAINER_EVENT_MASK) != 0 ||
                dontbinfrListfnfr != null) {
                rfturn truf;
            }
            rfturn fblsf;
        }
        rfturn supfr.fvfntEnbblfd(f);
    }

    /**
     * Prodfssfs fvfnts on this dontbinfr. If thf fvfnt is b
     * <dodf>ContbinfrEvfnt</dodf>, it invokfs thf
     * <dodf>prodfssContbinfrEvfnt</dodf> mfthod, flsf it invokfs
     * its supfrdlbss's <dodf>prodfssEvfnt</dodf>.
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm f thf fvfnt
     */
    protfdtfd void prodfssEvfnt(AWTEvfnt f) {
        if (f instbndfof ContbinfrEvfnt) {
            prodfssContbinfrEvfnt((ContbinfrEvfnt)f);
            rfturn;
        }
        supfr.prodfssEvfnt(f);
    }

    /**
     * Prodfssfs dontbinfr fvfnts oddurring on this dontbinfr by
     * dispbtdhing thfm to bny rfgistfrfd ContbinfrListfnfr objfdts.
     * NOTE: This mfthod will not bf dbllfd unlfss dontbinfr fvfnts
     * brf fnbblfd for this domponfnt; this hbppfns whfn onf of thf
     * following oddurs:
     * <ul>
     * <li>A ContbinfrListfnfr objfdt is rfgistfrfd vib
     *     <dodf>bddContbinfrListfnfr</dodf>
     * <li>Contbinfr fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>
     * </ul>
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm f thf dontbinfr fvfnt
     * @sff Componfnt#fnbblfEvfnts
     */
    protfdtfd void prodfssContbinfrEvfnt(ContbinfrEvfnt f) {
        ContbinfrListfnfr listfnfr = dontbinfrListfnfr;
        if (listfnfr != null) {
            switdh(f.gftID()) {
              dbsf ContbinfrEvfnt.COMPONENT_ADDED:
                listfnfr.domponfntAddfd(f);
                brfbk;
              dbsf ContbinfrEvfnt.COMPONENT_REMOVED:
                listfnfr.domponfntRfmovfd(f);
                brfbk;
            }
        }
    }

    /*
     * Dispbtdhfs bn fvfnt to this domponfnt or onf of its sub domponfnts.
     * Crfbtf ANCESTOR_RESIZED bnd ANCESTOR_MOVED fvfnts in rfsponsf to
     * COMPONENT_RESIZED bnd COMPONENT_MOVED fvfnts. Wf hbvf to do this
     * hfrf instfbd of in prodfssComponfntEvfnt bfdbusf ComponfntEvfnts
     * mby not bf fnbblfd for this Contbinfr.
     * @pbrbm f thf fvfnt
     */
    void dispbtdhEvfntImpl(AWTEvfnt f) {
        if ((dispbtdhfr != null) && dispbtdhfr.dispbtdhEvfnt(f)) {
            // fvfnt wbs sfnt to b lightwfight domponfnt.  Thf
            // nbtivf-produdfd fvfnt sfnt to thf nbtivf dontbinfr
            // must bf propfrly disposfd of by thf pffr, so it
            // gfts forwbrdfd.  If thf nbtivf host hbs bffn rfmovfd
            // bs b rfsult of thf sfnding thf lightwfight fvfnt,
            // thf pffr rfffrfndf will bf null.
            f.donsumf();
            if (pffr != null) {
                pffr.hbndlfEvfnt(f);
            }
            rfturn;
        }

        supfr.dispbtdhEvfntImpl(f);

        syndhronizfd (gftTrffLodk()) {
            switdh (f.gftID()) {
              dbsf ComponfntEvfnt.COMPONENT_RESIZED:
                drfbtfChildHifrbrdhyEvfnts(HifrbrdhyEvfnt.ANCESTOR_RESIZED, 0,
                                           Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK));
                brfbk;
              dbsf ComponfntEvfnt.COMPONENT_MOVED:
                drfbtfChildHifrbrdhyEvfnts(HifrbrdhyEvfnt.ANCESTOR_MOVED, 0,
                                       Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK));
                brfbk;
              dffbult:
                brfbk;
            }
        }
    }

    /*
     * Dispbtdhfs bn fvfnt to this domponfnt, without trying to forwbrd
     * it to bny subdomponfnts
     * @pbrbm f thf fvfnt
     */
    void dispbtdhEvfntToSflf(AWTEvfnt f) {
        supfr.dispbtdhEvfntImpl(f);
    }

    /**
     * Fftdhs thf top-most (dffpfst) lightwfight domponfnt thbt is intfrfstfd
     * in rfdfiving mousf fvfnts.
     */
    Componfnt gftMousfEvfntTbrgft(int x, int y, boolfbn indludfSflf) {
        rfturn gftMousfEvfntTbrgft(x, y, indludfSflf,
                                   MousfEvfntTbrgftFiltfr.FILTER,
                                   !SEARCH_HEAVYWEIGHTS);
    }

    /**
     * Fftdhfs thf top-most (dffpfst) domponfnt to rfdfivf SunDropTbrgftEvfnts.
     */
    Componfnt gftDropTbrgftEvfntTbrgft(int x, int y, boolfbn indludfSflf) {
        rfturn gftMousfEvfntTbrgft(x, y, indludfSflf,
                                   DropTbrgftEvfntTbrgftFiltfr.FILTER,
                                   SEARCH_HEAVYWEIGHTS);
    }

    /**
     * A privbtf vfrsion of gftMousfEvfntTbrgft whidh hbs two bdditionbl
     * dontrollbblf bfhbviors. This mfthod sfbrdhfs for thf top-most
     * dfsdfndbnt of this dontbinfr thbt dontbins thf givfn doordinbtfs
     * bnd is bddfptfd by thf givfn filtfr. Thf sfbrdh will bf donstrbinfd to
     * lightwfight dfsdfndbnts if thf lbst brgumfnt is <dodf>fblsf</dodf>.
     *
     * @pbrbm filtfr EvfntTbrgftFiltfr instbndf to dftfrminf whfthfr thf
     *        givfn domponfnt is b vblid tbrgft for this fvfnt.
     * @pbrbm sfbrdhHfbvywfights if <dodf>fblsf</dodf>, thf mfthod
     *        will bypbss hfbvywfight domponfnts during thf sfbrdh.
     */
    privbtf Componfnt gftMousfEvfntTbrgft(int x, int y, boolfbn indludfSflf,
                                          EvfntTbrgftFiltfr filtfr,
                                          boolfbn sfbrdhHfbvywfights) {
        Componfnt domp = null;
        if (sfbrdhHfbvywfights) {
            domp = gftMousfEvfntTbrgftImpl(x, y, indludfSflf, filtfr,
                                           SEARCH_HEAVYWEIGHTS,
                                           sfbrdhHfbvywfights);
        }

        if (domp == null || domp == this) {
            domp = gftMousfEvfntTbrgftImpl(x, y, indludfSflf, filtfr,
                                           !SEARCH_HEAVYWEIGHTS,
                                           sfbrdhHfbvywfights);
        }

        rfturn domp;
    }

    /**
     * A privbtf vfrsion of gftMousfEvfntTbrgft whidh hbs thrff bdditionbl
     * dontrollbblf bfhbviors. This mfthod sfbrdhfs for thf top-most
     * dfsdfndbnt of this dontbinfr thbt dontbins thf givfn doordinbtfs
     * bnd is bddfptfd by thf givfn filtfr. Thf sfbrdh will bf donstrbinfd to
     * dfsdfndbnts of only lightwfight dhildrfn or only hfbvywfight dhildrfn
     * of this dontbinfr dfpfnding on sfbrdhHfbvywfightChildrfn. Thf sfbrdh will
     * bf donstrbinfd to only lightwfight dfsdfndbnts of thf sfbrdhfd dhildrfn
     * of this dontbinfr if sfbrdhHfbvywfightDfsdfndbnts is <dodf>fblsf</dodf>.
     *
     * @pbrbm filtfr EvfntTbrgftFiltfr instbndf to dftfrminf whfthfr thf
     *        sflfdtfd domponfnt is b vblid tbrgft for this fvfnt.
     * @pbrbm sfbrdhHfbvywfightChildrfn if <dodf>truf</dodf>, thf mfthod
     *        will bypbss immfdibtf lightwfight dhildrfn during thf sfbrdh.
     *        If <dodf>fblsf</dodf>, thf mfthods will bypbss immfdibtf
     *        hfbvywfight dhildrfn during thf sfbrdh.
     * @pbrbm sfbrdhHfbvywfightDfsdfndbnts if <dodf>fblsf</dodf>, thf mfthod
     *        will bypbss hfbvywfight dfsdfndbnts whidh brf not immfdibtf
     *        dhildrfn during thf sfbrdh. If <dodf>truf</dodf>, thf mfthod
     *        will trbvfrsf both lightwfight bnd hfbvywfight dfsdfndbnts during
     *        thf sfbrdh.
     */
    privbtf Componfnt gftMousfEvfntTbrgftImpl(int x, int y, boolfbn indludfSflf,
                                         EvfntTbrgftFiltfr filtfr,
                                         boolfbn sfbrdhHfbvywfightChildrfn,
                                         boolfbn sfbrdhHfbvywfightDfsdfndbnts) {
        syndhronizfd (gftTrffLodk()) {

            for (int i = 0; i < domponfnt.sizf(); i++) {
                Componfnt domp = domponfnt.gft(i);
                if (domp != null && domp.visiblf &&
                    ((!sfbrdhHfbvywfightChildrfn &&
                      domp.pffr instbndfof LightwfightPffr) ||
                     (sfbrdhHfbvywfightChildrfn &&
                      !(domp.pffr instbndfof LightwfightPffr))) &&
                    domp.dontbins(x - domp.x, y - domp.y)) {

                    // found b domponfnt thbt intfrsfdts thf point, sff if thfrf
                    // is b dffpfr possibility.
                    if (domp instbndfof Contbinfr) {
                        Contbinfr dhild = (Contbinfr) domp;
                        Componfnt dffpfr = dhild.gftMousfEvfntTbrgft(
                                x - dhild.x,
                                y - dhild.y,
                                indludfSflf,
                                filtfr,
                                sfbrdhHfbvywfightDfsdfndbnts);
                        if (dffpfr != null) {
                            rfturn dffpfr;
                        }
                    } flsf {
                        if (filtfr.bddfpt(domp)) {
                            // thfrf isn't b dffpfr tbrgft, but this domponfnt
                            // is b tbrgft
                            rfturn domp;
                        }
                    }
                }
            }

            boolfbn isPffrOK;
            boolfbn isMousfOvfrMf;

            isPffrOK = (pffr instbndfof LightwfightPffr) || indludfSflf;
            isMousfOvfrMf = dontbins(x,y);

            // didn't find b dhild tbrgft, rfturn this domponfnt if it's
            // b possiblf tbrgft
            if (isMousfOvfrMf && isPffrOK && filtfr.bddfpt(this)) {
                rfturn this;
            }
            // no possiblf tbrgft
            rfturn null;
        }
    }

    stbtid intfrfbdf EvfntTbrgftFiltfr {
        boolfbn bddfpt(finbl Componfnt domp);
    }

    stbtid dlbss MousfEvfntTbrgftFiltfr implfmfnts EvfntTbrgftFiltfr {
        stbtid finbl EvfntTbrgftFiltfr FILTER = nfw MousfEvfntTbrgftFiltfr();

        privbtf MousfEvfntTbrgftFiltfr() {}

        publid boolfbn bddfpt(finbl Componfnt domp) {
            rfturn (domp.fvfntMbsk & AWTEvfnt.MOUSE_MOTION_EVENT_MASK) != 0
                || (domp.fvfntMbsk & AWTEvfnt.MOUSE_EVENT_MASK) != 0
                || (domp.fvfntMbsk & AWTEvfnt.MOUSE_WHEEL_EVENT_MASK) != 0
                || domp.mousfListfnfr != null
                || domp.mousfMotionListfnfr != null
                || domp.mousfWhfflListfnfr != null;
        }
    }

    stbtid dlbss DropTbrgftEvfntTbrgftFiltfr implfmfnts EvfntTbrgftFiltfr {
        stbtid finbl EvfntTbrgftFiltfr FILTER = nfw DropTbrgftEvfntTbrgftFiltfr();

        privbtf DropTbrgftEvfntTbrgftFiltfr() {}

        publid boolfbn bddfpt(finbl Componfnt domp) {
            DropTbrgft dt = domp.gftDropTbrgft();
            rfturn dt != null && dt.isAdtivf();
        }
    }

    /**
     * This is dbllfd by lightwfight domponfnts thbt wbnt thf dontbining
     * windowfd pbrfnt to fnbblf somf kind of fvfnts on thfir bfhblf.
     * This is nffdfd for fvfnts thbt brf normblly only dispbtdhfd to
     * windows to bf bddfptfd so thbt thfy dbn bf forwbrdfd downwbrd to
     * thf lightwfight domponfnt thbt hbs fnbblfd thfm.
     */
    void proxyEnbblfEvfnts(long fvfnts) {
        if (pffr instbndfof LightwfightPffr) {
            // this dontbinfr is lightwfight.... dontinuf sfnding it
            // upwbrd.
            if (pbrfnt != null) {
                pbrfnt.proxyEnbblfEvfnts(fvfnts);
            }
        } flsf {
            // This is b nbtivf dontbinfr, so it nffds to host
            // onf of it's dhildrfn.  If this fundtion is dbllfd bfforf
            // b pffr hbs bffn drfbtfd wf don't yft hbvf b dispbtdhfr
            // bfdbusf it hbs not yft bffn dftfrminfd if this instbndf
            // is lightwfight.
            if (dispbtdhfr != null) {
                dispbtdhfr.fnbblfEvfnts(fvfnts);
            }
        }
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>dispbtdhEvfnt(AWTEvfnt f)</dodf>
     */
    @Dfprfdbtfd
    publid void dflivfrEvfnt(Evfnt f) {
        Componfnt domp = gftComponfntAt(f.x, f.y);
        if ((domp != null) && (domp != this)) {
            f.trbnslbtf(-domp.x, -domp.y);
            domp.dflivfrEvfnt(f);
        } flsf {
            postEvfnt(f);
        }
    }

    /**
     * Lodbtfs thf domponfnt thbt dontbins thf x,y position.  Thf
     * top-most dhild domponfnt is rfturnfd in thf dbsf whfrf thfrf
     * is ovfrlbp in thf domponfnts.  This is dftfrminfd by finding
     * thf domponfnt dlosfst to thf indfx 0 thbt dlbims to dontbin
     * thf givfn point vib Componfnt.dontbins(), fxdfpt thbt Componfnts
     * whidh hbvf nbtivf pffrs tbkf prfdfdfndf ovfr thosf whidh do not
     * (i.f., lightwfight Componfnts).
     *
     * @pbrbm x thf <i>x</i> doordinbtf
     * @pbrbm y thf <i>y</i> doordinbtf
     * @rfturn null if thf domponfnt dofs not dontbin thf position.
     * If thfrf is no dhild domponfnt bt thf rfqufstfd point bnd thf
     * point is within thf bounds of thf dontbinfr thf dontbinfr itsflf
     * is rfturnfd; othfrwisf thf top-most dhild is rfturnfd.
     * @sff Componfnt#dontbins
     * @sindf 1.1
     */
    publid Componfnt gftComponfntAt(int x, int y) {
        rfturn lodbtf(x, y);
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftComponfntAt(int, int)</dodf>.
     */
    @Dfprfdbtfd
    publid Componfnt lodbtf(int x, int y) {
        if (!dontbins(x, y)) {
            rfturn null;
        }
        syndhronizfd (gftTrffLodk()) {
            // Two pbssfs: sff dommfnt in sun.bwt.SunGrbphidsCbllbbdk
            for (int i = 0; i < domponfnt.sizf(); i++) {
                Componfnt domp = domponfnt.gft(i);
                if (domp != null &&
                    !(domp.pffr instbndfof LightwfightPffr)) {
                    if (domp.dontbins(x - domp.x, y - domp.y)) {
                        rfturn domp;
                    }
                }
            }
            for (int i = 0; i < domponfnt.sizf(); i++) {
                Componfnt domp = domponfnt.gft(i);
                if (domp != null &&
                    domp.pffr instbndfof LightwfightPffr) {
                    if (domp.dontbins(x - domp.x, y - domp.y)) {
                        rfturn domp;
                    }
                }
            }
        }
        rfturn this;
    }

    /**
     * Gfts thf domponfnt thbt dontbins thf spfdififd point.
     * @pbrbm      p   thf point.
     * @rfturn     rfturns thf domponfnt thbt dontbins thf point,
     *                 or <dodf>null</dodf> if thf domponfnt dofs
     *                 not dontbin thf point.
     * @sff        Componfnt#dontbins
     * @sindf      1.1
     */
    publid Componfnt gftComponfntAt(Point p) {
        rfturn gftComponfntAt(p.x, p.y);
    }

    /**
     * Rfturns thf position of thf mousf pointfr in this <dodf>Contbinfr</dodf>'s
     * doordinbtf spbdf if thf <dodf>Contbinfr</dodf> is undfr thf mousf pointfr,
     * othfrwisf rfturns <dodf>null</dodf>.
     * This mfthod is similbr to {@link Componfnt#gftMousfPosition()} with thf fxdfption
     * thbt it dbn tbkf thf <dodf>Contbinfr</dodf>'s dhildrfn into bddount.
     * If <dodf>bllowChildrfn</dodf> is <dodf>fblsf</dodf>, this mfthod will rfturn
     * b non-null vbluf only if thf mousf pointfr is bbovf thf <dodf>Contbinfr</dodf>
     * dirfdtly, not bbovf thf pbrt obsdurfd by dhildrfn.
     * If <dodf>bllowChildrfn</dodf> is <dodf>truf</dodf>, this mfthod rfturns
     * b non-null vbluf if thf mousf pointfr is bbovf <dodf>Contbinfr</dodf> or bny
     * of its dfsdfndbnts.
     *
     * @fxdfption HfbdlfssExdfption if GrbphidsEnvironmfnt.isHfbdlfss() rfturns truf
     * @pbrbm     bllowChildrfn truf if dhildrfn should bf tbkfn into bddount
     * @sff       Componfnt#gftMousfPosition
     * @rfturn    mousf doordinbtfs rflbtivf to this <dodf>Componfnt</dodf>, or null
     * @sindf     1.5
     */
    publid Point gftMousfPosition(boolfbn bllowChildrfn) throws HfbdlfssExdfption {
        if (GrbphidsEnvironmfnt.isHfbdlfss()) {
            throw nfw HfbdlfssExdfption();
        }
        PointfrInfo pi = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw jbvb.sfdurity.PrivilfgfdAdtion<PointfrInfo>() {
                publid PointfrInfo run() {
                    rfturn MousfInfo.gftPointfrInfo();
                }
            }
        );
        syndhronizfd (gftTrffLodk()) {
            Componfnt inThfSbmfWindow = findUndfrMousfInWindow(pi);
            if (isSbmfOrAndfstorOf(inThfSbmfWindow, bllowChildrfn)) {
                rfturn  pointRflbtivfToComponfnt(pi.gftLodbtion());
            }
            rfturn null;
        }
    }

    boolfbn isSbmfOrAndfstorOf(Componfnt domp, boolfbn bllowChildrfn) {
        rfturn this == domp || (bllowChildrfn && isPbrfntOf(domp));
    }

    /**
     * Lodbtfs thf visiblf dhild domponfnt thbt dontbins thf spfdififd
     * position.  Thf top-most dhild domponfnt is rfturnfd in thf dbsf
     * whfrf thfrf is ovfrlbp in thf domponfnts.  If thf dontbining dhild
     * domponfnt is b Contbinfr, this mfthod will dontinuf sfbrdhing for
     * thf dffpfst nfstfd dhild domponfnt.  Componfnts whidh brf not
     * visiblf brf ignorfd during thf sfbrdh.<p>
     *
     * Thf findComponfntAt mfthod is difffrfnt from gftComponfntAt in
     * thbt gftComponfntAt only sfbrdhfs thf Contbinfr's immfdibtf
     * dhildrfn; if thf dontbining domponfnt is b Contbinfr,
     * findComponfntAt will sfbrdh thbt dhild to find b nfstfd domponfnt.
     *
     * @pbrbm x thf <i>x</i> doordinbtf
     * @pbrbm y thf <i>y</i> doordinbtf
     * @rfturn null if thf domponfnt dofs not dontbin thf position.
     * If thfrf is no dhild domponfnt bt thf rfqufstfd point bnd thf
     * point is within thf bounds of thf dontbinfr thf dontbinfr itsflf
     * is rfturnfd.
     * @sff Componfnt#dontbins
     * @sff #gftComponfntAt
     * @sindf 1.2
     */
    publid Componfnt findComponfntAt(int x, int y) {
        rfturn findComponfntAt(x, y, truf);
    }

    /**
     * Privbtf vfrsion of findComponfntAt whidh hbs b dontrollbblf
     * bfhbvior. Sftting 'ignorfEnbblfd' to 'fblsf' bypbssfs disbblfd
     * Componfnts during thf sfbrdh. This bfhbvior is usfd by thf
     * lightwfight dursor support in sun.bwt.GlobblCursorMbnbgfr.
     *
     * Thf bddition of this ffbturf is tfmporbry, pfnding thf
     * bdoption of nfw, publid API whidh fxports this ffbturf.
     */
    finbl Componfnt findComponfntAt(int x, int y, boolfbn ignorfEnbblfd) {
        syndhronizfd (gftTrffLodk()) {
            if (isRfdursivflyVisiblf()){
                rfturn findComponfntAtImpl(x, y, ignorfEnbblfd);
            }
        }
        rfturn null;
    }

    finbl Componfnt findComponfntAtImpl(int x, int y, boolfbn ignorfEnbblfd){
        dhfdkTrffLodk();

        if (!(dontbins(x, y) && visiblf && (ignorfEnbblfd || fnbblfd))) {
            rfturn null;
        }

        // Two pbssfs: sff dommfnt in sun.bwt.SunGrbphidsCbllbbdk
        for (int i = 0; i < domponfnt.sizf(); i++) {
            Componfnt domp = domponfnt.gft(i);
            if (domp != null &&
                !(domp.pffr instbndfof LightwfightPffr)) {
                if (domp instbndfof Contbinfr) {
                    domp = ((Contbinfr)domp).findComponfntAtImpl(x - domp.x,
                                                                 y - domp.y,
                                                                 ignorfEnbblfd);
                } flsf {
                    domp = domp.gftComponfntAt(x - domp.x, y - domp.y);
                }
                if (domp != null && domp.visiblf &&
                    (ignorfEnbblfd || domp.fnbblfd))
                {
                    rfturn domp;
                }
            }
        }
        for (int i = 0; i < domponfnt.sizf(); i++) {
            Componfnt domp = domponfnt.gft(i);
            if (domp != null &&
                domp.pffr instbndfof LightwfightPffr) {
                if (domp instbndfof Contbinfr) {
                    domp = ((Contbinfr)domp).findComponfntAtImpl(x - domp.x,
                                                                 y - domp.y,
                                                                 ignorfEnbblfd);
                } flsf {
                    domp = domp.gftComponfntAt(x - domp.x, y - domp.y);
                }
                if (domp != null && domp.visiblf &&
                    (ignorfEnbblfd || domp.fnbblfd))
                {
                    rfturn domp;
                }
            }
        }

        rfturn this;
    }

    /**
     * Lodbtfs thf visiblf dhild domponfnt thbt dontbins thf spfdififd
     * point.  Thf top-most dhild domponfnt is rfturnfd in thf dbsf
     * whfrf thfrf is ovfrlbp in thf domponfnts.  If thf dontbining dhild
     * domponfnt is b Contbinfr, this mfthod will dontinuf sfbrdhing for
     * thf dffpfst nfstfd dhild domponfnt.  Componfnts whidh brf not
     * visiblf brf ignorfd during thf sfbrdh.<p>
     *
     * Thf findComponfntAt mfthod is difffrfnt from gftComponfntAt in
     * thbt gftComponfntAt only sfbrdhfs thf Contbinfr's immfdibtf
     * dhildrfn; if thf dontbining domponfnt is b Contbinfr,
     * findComponfntAt will sfbrdh thbt dhild to find b nfstfd domponfnt.
     *
     * @pbrbm      p   thf point.
     * @rfturn null if thf domponfnt dofs not dontbin thf position.
     * If thfrf is no dhild domponfnt bt thf rfqufstfd point bnd thf
     * point is within thf bounds of thf dontbinfr thf dontbinfr itsflf
     * is rfturnfd.
     * @throws NullPointfrExdfption if {@dodf p} is {@dodf null}
     * @sff Componfnt#dontbins
     * @sff #gftComponfntAt
     * @sindf 1.2
     */
    publid Componfnt findComponfntAt(Point p) {
        rfturn findComponfntAt(p.x, p.y);
    }

    /**
     * Mbkfs this Contbinfr displbybblf by donnfdting it to
     * b nbtivf sdrffn rfsourdf.  Mbking b dontbinfr displbybblf will
     * dbusf bll of its dhildrfn to bf mbdf displbybblf.
     * This mfthod is dbllfd intfrnblly by thf toolkit bnd should
     * not bf dbllfd dirfdtly by progrbms.
     * @sff Componfnt#isDisplbybblf
     * @sff #rfmovfNotify
     */
    publid void bddNotify() {
        syndhronizfd (gftTrffLodk()) {
            // bddNotify() on thf dhildrfn mby dbusf proxy fvfnt fnbbling
            // on this instbndf, so wf first dbll supfr.bddNotify() bnd
            // possibly drfbtf bn lightwfight fvfnt dispbtdhfr bfforf dblling
            // bddNotify() on thf dhildrfn whidh mby bf lightwfight.
            supfr.bddNotify();
            if (! (pffr instbndfof LightwfightPffr)) {
                dispbtdhfr = nfw LightwfightDispbtdhfr(this);
            }

            // Wf shouldn't usf itfrbtor bfdbusf of thf Swing mfnu
            // implfmfntbtion spfdifids:
            // thf mfnu is bfing bssignfd bs b dhild to JLbyfrfdPbnf
            // instfbd of pbrtidulbr domponfnt so blwbys bfffdt
            // dollfdtion of domponfnt if mfnu is bfdoming shown or hiddfn.
            for (int i = 0; i < domponfnt.sizf(); i++) {
                domponfnt.gft(i).bddNotify();
            }
        }
    }

    /**
     * Mbkfs this Contbinfr undisplbybblf by rfmoving its donnfdtion
     * to its nbtivf sdrffn rfsourdf.  Mbking b dontbinfr undisplbybblf
     * will dbusf bll of its dhildrfn to bf mbdf undisplbybblf.
     * This mfthod is dbllfd by thf toolkit intfrnblly bnd should
     * not bf dbllfd dirfdtly by progrbms.
     * @sff Componfnt#isDisplbybblf
     * @sff #bddNotify
     */
    publid void rfmovfNotify() {
        syndhronizfd (gftTrffLodk()) {
            // Wf shouldn't usf itfrbtor bfdbusf of thf Swing mfnu
            // implfmfntbtion spfdifids:
            // thf mfnu is bfing bssignfd bs b dhild to JLbyfrfdPbnf
            // instfbd of pbrtidulbr domponfnt so blwbys bfffdt
            // dollfdtion of domponfnt if mfnu is bfdoming shown or hiddfn.
            for (int i = domponfnt.sizf()-1 ; i >= 0 ; i--) {
                Componfnt domp = domponfnt.gft(i);
                if (domp != null) {
                    // Fix for 6607170.
                    // Wf wbnt to supprfss fodus dhbngf on disposbl
                    // of thf fodusfd domponfnt. But bfdbusf of fodus
                    // is bsyndhronous, wf should supprfss fodus dhbngf
                    // on fvfry domponfnt in dbsf it rfdfivfs nbtivf fodus
                    // in thf prodfss of disposbl.
                    domp.sftAutoFodusTrbnsffrOnDisposbl(fblsf);
                    domp.rfmovfNotify();
                    domp.sftAutoFodusTrbnsffrOnDisposbl(truf);
                 }
             }
            // If somf of thf dhildrfn hbd fodus bfforf disposbl thfn it still hbs.
            // Auto-trbnsffr fodus to thf nfxt (or prfvious) domponfnt if buto-trbnsffr
            // is fnbblfd.
            if (dontbinsFodus() && KfybobrdFodusMbnbgfr.isAutoFodusTrbnsffrEnbblfdFor(this)) {
                if (!trbnsffrFodus(fblsf)) {
                    trbnsffrFodusBbdkwbrd(truf);
                }
            }
            if ( dispbtdhfr != null ) {
                dispbtdhfr.disposf();
                dispbtdhfr = null;
            }
            supfr.rfmovfNotify();
        }
    }

    /**
     * Chfdks if thf domponfnt is dontbinfd in thf domponfnt hifrbrdhy of
     * this dontbinfr.
     * @pbrbm d thf domponfnt
     * @rfturn     <dodf>truf</dodf> if it is bn bndfstor;
     *             <dodf>fblsf</dodf> othfrwisf.
     * @sindf      1.1
     */
    publid boolfbn isAndfstorOf(Componfnt d) {
        Contbinfr p;
        if (d == null || ((p = d.gftPbrfnt()) == null)) {
            rfturn fblsf;
        }
        whilf (p != null) {
            if (p == this) {
                rfturn truf;
            }
            p = p.gftPbrfnt();
        }
        rfturn fblsf;
    }

    /*
     * Thf following dodf wbs bddfd to support modbl JIntfrnblFrbmfs
     * Unfortunbtfly this dodf hbs to bf bddfd hfrf so thbt wf dbn gft bddfss to
     * somf privbtf AWT dlbssfs likf SfqufndfdEvfnt.
     *
     * Thf nbtivf dontbinfr of thf LW domponfnt hbs this fifld sft
     * to tfll it thbt it should blodk Mousf fvfnts for bll LW
     * dhildrfn fxdfpt for thf modbl domponfnt.
     *
     * In thf dbsf of nfstfd Modbl domponfnts, wf storf thf prfvious
     * modbl domponfnt in thf nfw modbl domponfnts vbluf of modblComp;
     */

    trbnsifnt Componfnt modblComp;
    trbnsifnt AppContfxt modblAppContfxt;

    privbtf void stbrtLWModbl() {
        // Storf thf bpp dontfxt on whidh this domponfnt is bfing shown.
        // Evfnt dispbtdh thrfbd of this bpp dontfxt will bf slffping until
        // wf wbkf it by bny fvfnt from hidfAndDisposfHbndlfr().
        modblAppContfxt = AppContfxt.gftAppContfxt();

        // kffp thf KfyEvfnts from bfing dispbtdhfd
        // until thf fodus hbs bffn trbnsffrfd
        long timf = Toolkit.gftEvfntQufuf().gftMostRfdfntKfyEvfntTimf();
        Componfnt prfdidtfdFodusOwnfr = (Componfnt.isInstbndfOf(this, "jbvbx.swing.JIntfrnblFrbmf")) ? ((jbvbx.swing.JIntfrnblFrbmf)(this)).gftMostRfdfntFodusOwnfr() : null;
        if (prfdidtfdFodusOwnfr != null) {
            KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                fnqufufKfyEvfnts(timf, prfdidtfdFodusOwnfr);
        }
        // Wf hbvf two mfdhbnisms for blodking: 1. If wf'rf on thf
        // EvfntDispbtdhThrfbd, stbrt b nfw fvfnt pump. 2. If wf'rf
        // on bny othfr thrfbd, dbll wbit() on thf trfflodk.
        finbl Contbinfr nbtivfContbinfr;
        syndhronizfd (gftTrffLodk()) {
            nbtivfContbinfr = gftHfbvywfightContbinfr();
            if (nbtivfContbinfr.modblComp != null) {
                this.modblComp =  nbtivfContbinfr.modblComp;
                nbtivfContbinfr.modblComp = this;
                rfturn;
            }
            flsf {
                nbtivfContbinfr.modblComp = this;
            }
        }

        Runnbblf pumpEvfntsForHifrbrdhy = () -> {
            EvfntDispbtdhThrfbd dispbtdhThrfbd = (EvfntDispbtdhThrfbd)Thrfbd.durrfntThrfbd();
            dispbtdhThrfbd.pumpEvfntsForHifrbrdhy(() -> nbtivfContbinfr.modblComp != null,
                    Contbinfr.this);
        };

        if (EvfntQufuf.isDispbtdhThrfbd()) {
            SfqufndfdEvfnt durrfntSfqufndfdEvfnt =
                KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                gftCurrfntSfqufndfdEvfnt();
            if (durrfntSfqufndfdEvfnt != null) {
                durrfntSfqufndfdEvfnt.disposf();
            }

            pumpEvfntsForHifrbrdhy.run();
        } flsf {
            syndhronizfd (gftTrffLodk()) {
                Toolkit.gftEvfntQufuf().
                    postEvfnt(nfw PffrEvfnt(this,
                                pumpEvfntsForHifrbrdhy,
                                PffrEvfnt.PRIORITY_EVENT));
                whilf (nbtivfContbinfr.modblComp != null)
                {
                    try {
                        gftTrffLodk().wbit();
                    } dbtdh (IntfrruptfdExdfption f) {
                        brfbk;
                    }
                }
            }
        }
        if (prfdidtfdFodusOwnfr != null) {
            KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                dfqufufKfyEvfnts(timf, prfdidtfdFodusOwnfr);
        }
    }

    privbtf void stopLWModbl() {
        syndhronizfd (gftTrffLodk()) {
            if (modblAppContfxt != null) {
                Contbinfr nbtivfContbinfr = gftHfbvywfightContbinfr();
                if(nbtivfContbinfr != null) {
                    if (this.modblComp !=  null) {
                        nbtivfContbinfr.modblComp = this.modblComp;
                        this.modblComp = null;
                        rfturn;
                    }
                    flsf {
                        nbtivfContbinfr.modblComp = null;
                    }
                }
                // Wbkf up fvfnt dispbtdh thrfbd on whidh thf diblog wbs
                // initiblly shown
                SunToolkit.postEvfnt(modblAppContfxt,
                        nfw PffrEvfnt(this,
                                nfw WbkingRunnbblf(),
                                PffrEvfnt.PRIORITY_EVENT));
            }
            EvfntQufuf.invokfLbtfr(nfw WbkingRunnbblf());
            gftTrffLodk().notifyAll();
        }
    }

    finbl stbtid dlbss WbkingRunnbblf implfmfnts Runnbblf {
        publid void run() {
        }
    }

    /* End of JOptionPbnf support dodf */

    /**
     * Rfturns b string rfprfsfnting thf stbtf of this <dodf>Contbinfr</dodf>.
     * This mfthod is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not bf
     * <dodf>null</dodf>.
     *
     * @rfturn    thf pbrbmftfr string of this dontbinfr
     */
    protfdtfd String pbrbmString() {
        String str = supfr.pbrbmString();
        LbyoutMbnbgfr lbyoutMgr = this.lbyoutMgr;
        if (lbyoutMgr != null) {
            str += ",lbyout=" + lbyoutMgr.gftClbss().gftNbmf();
        }
        rfturn str;
    }

    /**
     * Prints b listing of this dontbinfr to thf spfdififd output
     * strfbm. Thf listing stbrts bt thf spfdififd indfntbtion.
     * <p>
     * Thf immfdibtf dhildrfn of thf dontbinfr brf printfd with
     * bn indfntbtion of <dodf>indfnt+1</dodf>.  Thf dhildrfn
     * of thosf dhildrfn brf printfd bt <dodf>indfnt+2</dodf>
     * bnd so on.
     *
     * @pbrbm    out      b print strfbm
     * @pbrbm    indfnt   thf numbfr of spbdfs to indfnt
     * @throws   NullPointfrExdfption if {@dodf out} is {@dodf null}
     * @sff      Componfnt#list(jbvb.io.PrintStrfbm, int)
     * @sindf    1.0
     */
    publid void list(PrintStrfbm out, int indfnt) {
        supfr.list(out, indfnt);
        syndhronizfd(gftTrffLodk()) {
            for (int i = 0; i < domponfnt.sizf(); i++) {
                Componfnt domp = domponfnt.gft(i);
                if (domp != null) {
                    domp.list(out, indfnt+1);
                }
            }
        }
    }

    /**
     * Prints out b list, stbrting bt thf spfdififd indfntbtion,
     * to thf spfdififd print writfr.
     * <p>
     * Thf immfdibtf dhildrfn of thf dontbinfr brf printfd with
     * bn indfntbtion of <dodf>indfnt+1</dodf>.  Thf dhildrfn
     * of thosf dhildrfn brf printfd bt <dodf>indfnt+2</dodf>
     * bnd so on.
     *
     * @pbrbm    out      b print writfr
     * @pbrbm    indfnt   thf numbfr of spbdfs to indfnt
     * @throws   NullPointfrExdfption if {@dodf out} is {@dodf null}
     * @sff      Componfnt#list(jbvb.io.PrintWritfr, int)
     * @sindf    1.1
     */
    publid void list(PrintWritfr out, int indfnt) {
        supfr.list(out, indfnt);
        syndhronizfd(gftTrffLodk()) {
            for (int i = 0; i < domponfnt.sizf(); i++) {
                Componfnt domp = domponfnt.gft(i);
                if (domp != null) {
                    domp.list(out, indfnt+1);
                }
            }
        }
    }

    /**
     * Sfts thf fodus trbvfrsbl kfys for b givfn trbvfrsbl opfrbtion for this
     * Contbinfr.
     * <p>
     * Thf dffbult vblufs for b Contbinfr's fodus trbvfrsbl kfys brf
     * implfmfntbtion-dfpfndfnt. Sun rfdommfnds thbt bll implfmfntbtions for b
     * pbrtidulbr nbtivf plbtform usf thf sbmf dffbult vblufs. Thf
     * rfdommfndbtions for Windows bnd Unix brf listfd bflow. Thfsf
     * rfdommfndbtions brf usfd in thf Sun AWT implfmfntbtions.
     *
     * <tbblf bordfr=1 summbry="Rfdommfndfd dffbult vblufs for b Contbinfr's fodus trbvfrsbl kfys">
     * <tr>
     *    <th>Idfntififr</th>
     *    <th>Mfbning</th>
     *    <th>Dffbult</th>
     * </tr>
     * <tr>
     *    <td>KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS</td>
     *    <td>Normbl forwbrd kfybobrd trbvfrsbl</td>
     *    <td>TAB on KEY_PRESSED, CTRL-TAB on KEY_PRESSED</td>
     * </tr>
     * <tr>
     *    <td>KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS</td>
     *    <td>Normbl rfvfrsf kfybobrd trbvfrsbl</td>
     *    <td>SHIFT-TAB on KEY_PRESSED, CTRL-SHIFT-TAB on KEY_PRESSED</td>
     * </tr>
     * <tr>
     *    <td>KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS</td>
     *    <td>Go up onf fodus trbvfrsbl dydlf</td>
     *    <td>nonf</td>
     * </tr>
     * <tr>
     *    <td>KfybobrdFodusMbnbgfr.DOWN_CYCLE_TRAVERSAL_KEYS<td>
     *    <td>Go down onf fodus trbvfrsbl dydlf</td>
     *    <td>nonf</td>
     * </tr>
     * </tbblf>
     *
     * To disbblf b trbvfrsbl kfy, usf bn fmpty Sft; Collfdtions.EMPTY_SET is
     * rfdommfndfd.
     * <p>
     * Using thf AWTKfyStrokf API, dlifnt dodf dbn spfdify on whidh of two
     * spfdifid KfyEvfnts, KEY_PRESSED or KEY_RELEASED, thf fodus trbvfrsbl
     * opfrbtion will oddur. Rfgbrdlfss of whidh KfyEvfnt is spfdififd,
     * howfvfr, bll KfyEvfnts rflbtfd to thf fodus trbvfrsbl kfy, indluding thf
     * bssodibtfd KEY_TYPED fvfnt, will bf donsumfd, bnd will not bf dispbtdhfd
     * to bny Contbinfr. It is b runtimf frror to spfdify b KEY_TYPED fvfnt bs
     * mbpping to b fodus trbvfrsbl opfrbtion, or to mbp thf sbmf fvfnt to
     * multiplf dffbult fodus trbvfrsbl opfrbtions.
     * <p>
     * If b vbluf of null is spfdififd for thf Sft, this Contbinfr inhfrits thf
     * Sft from its pbrfnt. If bll bndfstors of this Contbinfr hbvf null
     * spfdififd for thf Sft, thfn thf durrfnt KfybobrdFodusMbnbgfr's dffbult
     * Sft is usfd.
     * <p>
     * This mfthod mby throw b {@dodf ClbssCbstExdfption} if bny {@dodf Objfdt}
     * in {@dodf kfystrokfs} is not bn {@dodf AWTKfyStrokf}.
     *
     * @pbrbm id onf of KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS, or
     *        KfybobrdFodusMbnbgfr.DOWN_CYCLE_TRAVERSAL_KEYS
     * @pbrbm kfystrokfs thf Sft of AWTKfyStrokf for thf spfdififd opfrbtion
     * @sff #gftFodusTrbvfrsblKfys
     * @sff KfybobrdFodusMbnbgfr#FORWARD_TRAVERSAL_KEYS
     * @sff KfybobrdFodusMbnbgfr#BACKWARD_TRAVERSAL_KEYS
     * @sff KfybobrdFodusMbnbgfr#UP_CYCLE_TRAVERSAL_KEYS
     * @sff KfybobrdFodusMbnbgfr#DOWN_CYCLE_TRAVERSAL_KEYS
     * @throws IllfgblArgumfntExdfption if id is not onf of
     *         KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *         KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS,
     *         KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS, or
     *         KfybobrdFodusMbnbgfr.DOWN_CYCLE_TRAVERSAL_KEYS, or if kfystrokfs
     *         dontbins null, or if bny kfystrokf rfprfsfnts b KEY_TYPED fvfnt,
     *         or if bny kfystrokf blrfbdy mbps to bnothfr fodus trbvfrsbl
     *         opfrbtion for this Contbinfr
     * @sindf 1.4
     * @bfbninfo
     *       bound: truf
     */
    publid void sftFodusTrbvfrsblKfys(int id,
                                      Sft<? fxtfnds AWTKfyStrokf> kfystrokfs)
    {
        if (id < 0 || id >= KfybobrdFodusMbnbgfr.TRAVERSAL_KEY_LENGTH) {
            throw nfw IllfgblArgumfntExdfption("invblid fodus trbvfrsbl kfy idfntififr");
        }

        // Don't dbll supfr.sftFodusTrbvfrsblKfy. Thf Componfnt pbrbmftfr dhfdk
        // dofs not bllow DOWN_CYCLE_TRAVERSAL_KEYS, but wf do.
        sftFodusTrbvfrsblKfys_NoIDChfdk(id, kfystrokfs);
    }

    /**
     * Rfturns thf Sft of fodus trbvfrsbl kfys for b givfn trbvfrsbl opfrbtion
     * for this Contbinfr. (Sff
     * <dodf>sftFodusTrbvfrsblKfys</dodf> for b full dfsdription of fbdh kfy.)
     * <p>
     * If b Sft of trbvfrsbl kfys hbs not bffn fxpliditly dffinfd for this
     * Contbinfr, thfn this Contbinfr's pbrfnt's Sft is rfturnfd. If no Sft
     * hbs bffn fxpliditly dffinfd for bny of this Contbinfr's bndfstors, thfn
     * thf durrfnt KfybobrdFodusMbnbgfr's dffbult Sft is rfturnfd.
     *
     * @pbrbm id onf of KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS, or
     *        KfybobrdFodusMbnbgfr.DOWN_CYCLE_TRAVERSAL_KEYS
     * @rfturn thf Sft of AWTKfyStrokfs for thf spfdififd opfrbtion. Thf Sft
     *         will bf unmodifibblf, bnd mby bf fmpty. null will nfvfr bf
     *         rfturnfd.
     * @sff #sftFodusTrbvfrsblKfys
     * @sff KfybobrdFodusMbnbgfr#FORWARD_TRAVERSAL_KEYS
     * @sff KfybobrdFodusMbnbgfr#BACKWARD_TRAVERSAL_KEYS
     * @sff KfybobrdFodusMbnbgfr#UP_CYCLE_TRAVERSAL_KEYS
     * @sff KfybobrdFodusMbnbgfr#DOWN_CYCLE_TRAVERSAL_KEYS
     * @throws IllfgblArgumfntExdfption if id is not onf of
     *         KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *         KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS,
     *         KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS, or
     *         KfybobrdFodusMbnbgfr.DOWN_CYCLE_TRAVERSAL_KEYS
     * @sindf 1.4
     */
    publid Sft<AWTKfyStrokf> gftFodusTrbvfrsblKfys(int id) {
        if (id < 0 || id >= KfybobrdFodusMbnbgfr.TRAVERSAL_KEY_LENGTH) {
            throw nfw IllfgblArgumfntExdfption("invblid fodus trbvfrsbl kfy idfntififr");
        }

        // Don't dbll supfr.gftFodusTrbvfrsblKfy. Thf Componfnt pbrbmftfr dhfdk
        // dofs not bllow DOWN_CYCLE_TRAVERSAL_KEY, but wf do.
        rfturn gftFodusTrbvfrsblKfys_NoIDChfdk(id);
    }

    /**
     * Rfturns whfthfr thf Sft of fodus trbvfrsbl kfys for thf givfn fodus
     * trbvfrsbl opfrbtion hbs bffn fxpliditly dffinfd for this Contbinfr. If
     * this mfthod rfturns <dodf>fblsf</dodf>, this Contbinfr is inhfriting thf
     * Sft from bn bndfstor, or from thf durrfnt KfybobrdFodusMbnbgfr.
     *
     * @pbrbm id onf of KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS, or
     *        KfybobrdFodusMbnbgfr.DOWN_CYCLE_TRAVERSAL_KEYS
     * @rfturn <dodf>truf</dodf> if thf thf Sft of fodus trbvfrsbl kfys for thf
     *         givfn fodus trbvfrsbl opfrbtion hbs bffn fxpliditly dffinfd for
     *         this Componfnt; <dodf>fblsf</dodf> othfrwisf.
     * @throws IllfgblArgumfntExdfption if id is not onf of
     *         KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS, or
     *        KfybobrdFodusMbnbgfr.DOWN_CYCLE_TRAVERSAL_KEYS
     * @sindf 1.4
     */
    publid boolfbn brfFodusTrbvfrsblKfysSft(int id) {
        if (id < 0 || id >= KfybobrdFodusMbnbgfr.TRAVERSAL_KEY_LENGTH) {
            throw nfw IllfgblArgumfntExdfption("invblid fodus trbvfrsbl kfy idfntififr");
        }

        rfturn (fodusTrbvfrsblKfys != null && fodusTrbvfrsblKfys[id] != null);
    }

    /**
     * Rfturns whfthfr thf spfdififd Contbinfr is thf fodus dydlf root of this
     * Contbinfr's fodus trbvfrsbl dydlf. Ebdh fodus trbvfrsbl dydlf hbs only
     * b singlf fodus dydlf root bnd fbdh Contbinfr whidh is not b fodus dydlf
     * root bflongs to only b singlf fodus trbvfrsbl dydlf. Contbinfrs whidh
     * brf fodus dydlf roots bflong to two dydlfs: onf rootfd bt thf Contbinfr
     * itsflf, bnd onf rootfd bt thf Contbinfr's nfbrfst fodus-dydlf-root
     * bndfstor. This mfthod will rfturn <dodf>truf</dodf> for both sudh
     * Contbinfrs in this dbsf.
     *
     * @pbrbm dontbinfr thf Contbinfr to bf tfstfd
     * @rfturn <dodf>truf</dodf> if thf spfdififd Contbinfr is b fodus-dydlf-
     *         root of this Contbinfr; <dodf>fblsf</dodf> othfrwisf
     * @sff #isFodusCydlfRoot()
     * @sindf 1.4
     */
    publid boolfbn isFodusCydlfRoot(Contbinfr dontbinfr) {
        if (isFodusCydlfRoot() && dontbinfr == this) {
            rfturn truf;
        } flsf {
            rfturn supfr.isFodusCydlfRoot(dontbinfr);
        }
    }

    privbtf Contbinfr findTrbvfrsblRoot() {
        // I potfntiblly hbvf two roots, mysflf bnd my root pbrfnt
        // If I bm thf durrfnt root, thfn usf mf
        // If nonf of my pbrfnts brf roots, thfn usf mf
        // If my root pbrfnt is thf durrfnt root, thfn usf my root pbrfnt
        // If nfithfr I nor my root pbrfnt is thf durrfnt root, thfn
        // usf my root pbrfnt (b gufss)

        Contbinfr durrfntFodusCydlfRoot = KfybobrdFodusMbnbgfr.
            gftCurrfntKfybobrdFodusMbnbgfr().gftCurrfntFodusCydlfRoot();
        Contbinfr root;

        if (durrfntFodusCydlfRoot == this) {
            root = this;
        } flsf {
            root = gftFodusCydlfRootAndfstor();
            if (root == null) {
                root = this;
            }
        }

        if (root != durrfntFodusCydlfRoot) {
            KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                sftGlobblCurrfntFodusCydlfRootPriv(root);
        }
        rfturn root;
    }

    finbl boolfbn dontbinsFodus() {
        finbl Componfnt fodusOwnfr = KfybobrdFodusMbnbgfr.
            gftCurrfntKfybobrdFodusMbnbgfr().gftFodusOwnfr();
        rfturn isPbrfntOf(fodusOwnfr);
    }

    /**
     * Chfdk if this domponfnt is thf dhild of this dontbinfr or its dhildrfn.
     * Notf: this fundtion bdquirfs trffLodk
     * Notf: this fundtion trbvfrsfs dhildrfn trff only in onf Window.
     * @pbrbm domp b domponfnt in tfst, must not bf null
     */
    privbtf boolfbn isPbrfntOf(Componfnt domp) {
        syndhronizfd(gftTrffLodk()) {
            whilf (domp != null && domp != this && !(domp instbndfof Window)) {
                domp = domp.gftPbrfnt();
            }
            rfturn (domp == this);
        }
    }

    void dlfbrMostRfdfntFodusOwnfrOnHidf() {
        boolfbn rfsft = fblsf;
        Window window = null;

        syndhronizfd (gftTrffLodk()) {
            window = gftContbiningWindow();
            if (window != null) {
                Componfnt domp = KfybobrdFodusMbnbgfr.gftMostRfdfntFodusOwnfr(window);
                rfsft = ((domp == this) || isPbrfntOf(domp));
                // This syndhronizfd should blwbys bf thf sfdond in b pbir
                // (trff lodk, KfybobrdFodusMbnbgfr.dlbss)
                syndhronizfd(KfybobrdFodusMbnbgfr.dlbss) {
                    Componfnt storfdComp = window.gftTfmporbryLostComponfnt();
                    if (isPbrfntOf(storfdComp) || storfdComp == this) {
                        window.sftTfmporbryLostComponfnt(null);
                    }
                }
            }
        }

        if (rfsft) {
            KfybobrdFodusMbnbgfr.sftMostRfdfntFodusOwnfr(window, null);
        }
    }

    void dlfbrCurrfntFodusCydlfRootOnHidf() {
        KfybobrdFodusMbnbgfr kfm =
            KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr();
        Contbinfr dont = kfm.gftCurrfntFodusCydlfRoot();

        if (dont == this || isPbrfntOf(dont)) {
            kfm.sftGlobblCurrfntFodusCydlfRootPriv(null);
        }
    }

    @Ovfrridf
    void dlfbrLightwfightDispbtdhfrOnRfmovf(Componfnt rfmovfdComponfnt) {
        if (dispbtdhfr != null) {
            dispbtdhfr.rfmovfRfffrfndfs(rfmovfdComponfnt);
        } flsf {
            //It is b Lightwfight Contbinfr, should dlfbr pbrfnt`s Dispbtdhfr
            supfr.dlfbrLightwfightDispbtdhfrOnRfmovf(rfmovfdComponfnt);
        }
    }

    finbl Contbinfr gftTrbvfrsblRoot() {
        if (isFodusCydlfRoot()) {
            rfturn findTrbvfrsblRoot();
        }

        rfturn supfr.gftTrbvfrsblRoot();
    }

    /**
     * Sfts thf fodus trbvfrsbl polidy thbt will mbnbgf kfybobrd trbvfrsbl of
     * this Contbinfr's dhildrfn, if this Contbinfr is b fodus dydlf root. If
     * thf brgumfnt is null, this Contbinfr inhfrits its polidy from its fodus-
     * dydlf-root bndfstor. If thf brgumfnt is non-null, this polidy will bf
     * inhfritfd by bll fodus-dydlf-root dhildrfn thbt hbvf no kfybobrd-
     * trbvfrsbl polidy of thfir own (bs will, rfdursivfly, thfir fodus-dydlf-
     * root dhildrfn).
     * <p>
     * If this Contbinfr is not b fodus dydlf root, thf polidy will bf
     * rfmfmbfrfd, but will not bf usfd or inhfritfd by this or bny othfr
     * Contbinfrs until this Contbinfr is mbdf b fodus dydlf root.
     *
     * @pbrbm polidy thf nfw fodus trbvfrsbl polidy for this Contbinfr
     * @sff #gftFodusTrbvfrsblPolidy
     * @sff #sftFodusCydlfRoot
     * @sff #isFodusCydlfRoot
     * @sindf 1.4
     * @bfbninfo
     *       bound: truf
     */
    publid void sftFodusTrbvfrsblPolidy(FodusTrbvfrsblPolidy polidy) {
        FodusTrbvfrsblPolidy oldPolidy;
        syndhronizfd (this) {
            oldPolidy = this.fodusTrbvfrsblPolidy;
            this.fodusTrbvfrsblPolidy = polidy;
        }
        firfPropfrtyChbngf("fodusTrbvfrsblPolidy", oldPolidy, polidy);
    }

    /**
     * Rfturns thf fodus trbvfrsbl polidy thbt will mbnbgf kfybobrd trbvfrsbl
     * of this Contbinfr's dhildrfn, or null if this Contbinfr is not b fodus
     * dydlf root. If no trbvfrsbl polidy hbs bffn fxpliditly sft for this
     * Contbinfr, thfn this Contbinfr's fodus-dydlf-root bndfstor's polidy is
     * rfturnfd.
     *
     * @rfturn this Contbinfr's fodus trbvfrsbl polidy, or null if this
     *         Contbinfr is not b fodus dydlf root.
     * @sff #sftFodusTrbvfrsblPolidy
     * @sff #sftFodusCydlfRoot
     * @sff #isFodusCydlfRoot
     * @sindf 1.4
     */
    publid FodusTrbvfrsblPolidy gftFodusTrbvfrsblPolidy() {
        if (!isFodusTrbvfrsblPolidyProvidfr() && !isFodusCydlfRoot()) {
            rfturn null;
        }

        FodusTrbvfrsblPolidy polidy = this.fodusTrbvfrsblPolidy;
        if (polidy != null) {
            rfturn polidy;
        }

        Contbinfr rootAndfstor = gftFodusCydlfRootAndfstor();
        if (rootAndfstor != null) {
            rfturn rootAndfstor.gftFodusTrbvfrsblPolidy();
        } flsf {
            rfturn KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                gftDffbultFodusTrbvfrsblPolidy();
        }
    }

    /**
     * Rfturns whfthfr thf fodus trbvfrsbl polidy hbs bffn fxpliditly sft for
     * this Contbinfr. If this mfthod rfturns <dodf>fblsf</dodf>, this
     * Contbinfr will inhfrit its fodus trbvfrsbl polidy from bn bndfstor.
     *
     * @rfturn <dodf>truf</dodf> if thf fodus trbvfrsbl polidy hbs bffn
     *         fxpliditly sft for this Contbinfr; <dodf>fblsf</dodf> othfrwisf.
     * @sindf 1.4
     */
    publid boolfbn isFodusTrbvfrsblPolidySft() {
        rfturn (fodusTrbvfrsblPolidy != null);
    }

    /**
     * Sfts whfthfr this Contbinfr is thf root of b fodus trbvfrsbl dydlf. Ondf
     * fodus fntfrs b trbvfrsbl dydlf, typidblly it dbnnot lfbvf it vib fodus
     * trbvfrsbl unlfss onf of thf up- or down-dydlf kfys is prfssfd. Normbl
     * trbvfrsbl is limitfd to this Contbinfr, bnd bll of this Contbinfr's
     * dfsdfndbnts thbt brf not dfsdfndbnts of inffrior fodus dydlf roots. Notf
     * thbt b FodusTrbvfrsblPolidy mby bfnd thfsf rfstridtions, howfvfr. For
     * fxbmplf, ContbinfrOrdfrFodusTrbvfrsblPolidy supports implidit down-dydlf
     * trbvfrsbl.
     * <p>
     * Thf bltfrnbtivf wby to spfdify thf trbvfrsbl ordfr of this Contbinfr's
     * dhildrfn is to mbkf this Contbinfr b
     * <b hrff="dod-filfs/FodusSpfd.html#FodusTrbvfrsblPolidyProvidfrs">fodus trbvfrsbl polidy providfr</b>.
     *
     * @pbrbm fodusCydlfRoot indidbtfs whfthfr this Contbinfr is thf root of b
     *        fodus trbvfrsbl dydlf
     * @sff #isFodusCydlfRoot()
     * @sff #sftFodusTrbvfrsblPolidy
     * @sff #gftFodusTrbvfrsblPolidy
     * @sff ContbinfrOrdfrFodusTrbvfrsblPolidy
     * @sff #sftFodusTrbvfrsblPolidyProvidfr
     * @sindf 1.4
     * @bfbninfo
     *       bound: truf
     */
    publid void sftFodusCydlfRoot(boolfbn fodusCydlfRoot) {
        boolfbn oldFodusCydlfRoot;
        syndhronizfd (this) {
            oldFodusCydlfRoot = this.fodusCydlfRoot;
            this.fodusCydlfRoot = fodusCydlfRoot;
        }
        firfPropfrtyChbngf("fodusCydlfRoot", oldFodusCydlfRoot,
                           fodusCydlfRoot);
    }

    /**
     * Rfturns whfthfr this Contbinfr is thf root of b fodus trbvfrsbl dydlf.
     * Ondf fodus fntfrs b trbvfrsbl dydlf, typidblly it dbnnot lfbvf it vib
     * fodus trbvfrsbl unlfss onf of thf up- or down-dydlf kfys is prfssfd.
     * Normbl trbvfrsbl is limitfd to this Contbinfr, bnd bll of this
     * Contbinfr's dfsdfndbnts thbt brf not dfsdfndbnts of inffrior fodus
     * dydlf roots. Notf thbt b FodusTrbvfrsblPolidy mby bfnd thfsf
     * rfstridtions, howfvfr. For fxbmplf, ContbinfrOrdfrFodusTrbvfrsblPolidy
     * supports implidit down-dydlf trbvfrsbl.
     *
     * @rfturn whfthfr this Contbinfr is thf root of b fodus trbvfrsbl dydlf
     * @sff #sftFodusCydlfRoot
     * @sff #sftFodusTrbvfrsblPolidy
     * @sff #gftFodusTrbvfrsblPolidy
     * @sff ContbinfrOrdfrFodusTrbvfrsblPolidy
     * @sindf 1.4
     */
    publid boolfbn isFodusCydlfRoot() {
        rfturn fodusCydlfRoot;
    }

    /**
     * Sfts whfthfr this dontbinfr will bf usfd to providf fodus
     * trbvfrsbl polidy. Contbinfr with this propfrty bs
     * <dodf>truf</dodf> will bf usfd to bdquirf fodus trbvfrsbl polidy
     * instfbd of dlosfst fodus dydlf root bndfstor.
     * @pbrbm providfr indidbtfs whfthfr this dontbinfr will bf usfd to
     *                providf fodus trbvfrsbl polidy
     * @sff #sftFodusTrbvfrsblPolidy
     * @sff #gftFodusTrbvfrsblPolidy
     * @sff #isFodusTrbvfrsblPolidyProvidfr
     * @sindf 1.5
     * @bfbninfo
     *        bound: truf
     */
    publid finbl void sftFodusTrbvfrsblPolidyProvidfr(boolfbn providfr) {
        boolfbn oldProvidfr;
        syndhronizfd(this) {
            oldProvidfr = fodusTrbvfrsblPolidyProvidfr;
            fodusTrbvfrsblPolidyProvidfr = providfr;
        }
        firfPropfrtyChbngf("fodusTrbvfrsblPolidyProvidfr", oldProvidfr, providfr);
    }

    /**
     * Rfturns whfthfr this dontbinfr providfs fodus trbvfrsbl
     * polidy. If this propfrty is sft to <dodf>truf</dodf> thfn whfn
     * kfybobrd fodus mbnbgfr sfbrdhfs dontbinfr hifrbrdhy for fodus
     * trbvfrsbl polidy bnd fndountfrs this dontbinfr bfforf bny othfr
     * dontbinfr with this propfrty bs truf or fodus dydlf roots thfn
     * its fodus trbvfrsbl polidy will bf usfd instfbd of fodus dydlf
     * root's polidy.
     * @sff #sftFodusTrbvfrsblPolidy
     * @sff #gftFodusTrbvfrsblPolidy
     * @sff #sftFodusCydlfRoot
     * @sff #sftFodusTrbvfrsblPolidyProvidfr
     * @rfturn <dodf>truf</dodf> if this dontbinfr providfs fodus trbvfrsbl
     *         polidy, <dodf>fblsf</dodf> othfrwisf
     * @sindf 1.5
     * @bfbninfo
     *        bound: truf
     */
    publid finbl boolfbn isFodusTrbvfrsblPolidyProvidfr() {
        rfturn fodusTrbvfrsblPolidyProvidfr;
    }

    /**
     * Trbnsffrs thf fodus down onf fodus trbvfrsbl dydlf. If this Contbinfr is
     * b fodus dydlf root, thfn thf fodus ownfr is sft to this Contbinfr's
     * dffbult Componfnt to fodus, bnd thf durrfnt fodus dydlf root is sft to
     * this Contbinfr. If this Contbinfr is not b fodus dydlf root, thfn no
     * fodus trbvfrsbl opfrbtion oddurs.
     *
     * @sff       Componfnt#rfqufstFodus()
     * @sff       #isFodusCydlfRoot
     * @sff       #sftFodusCydlfRoot
     * @sindf     1.4
     */
    publid void trbnsffrFodusDownCydlf() {
        if (isFodusCydlfRoot()) {
            KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                sftGlobblCurrfntFodusCydlfRootPriv(this);
            Componfnt toFodus = gftFodusTrbvfrsblPolidy().
                gftDffbultComponfnt(this);
            if (toFodus != null) {
                toFodus.rfqufstFodus(CbusfdFodusEvfnt.Cbusf.TRAVERSAL_DOWN);
            }
        }
    }

    void prfProdfssKfyEvfnt(KfyEvfnt f) {
        Contbinfr pbrfnt = this.pbrfnt;
        if (pbrfnt != null) {
            pbrfnt.prfProdfssKfyEvfnt(f);
        }
    }

    void postProdfssKfyEvfnt(KfyEvfnt f) {
        Contbinfr pbrfnt = this.pbrfnt;
        if (pbrfnt != null) {
            pbrfnt.postProdfssKfyEvfnt(f);
        }
    }

    boolfbn postsOldMousfEvfnts() {
        rfturn truf;
    }

    /**
     * Sfts thf <dodf>ComponfntOrifntbtion</dodf> propfrty of this dontbinfr
     * bnd bll domponfnts dontbinfd within it.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm o thf nfw domponfnt orifntbtion of this dontbinfr bnd
     *        thf domponfnts dontbinfd within it.
     * @fxdfption NullPointfrExdfption if <dodf>orifntbtion</dodf> is null.
     * @sff Componfnt#sftComponfntOrifntbtion
     * @sff Componfnt#gftComponfntOrifntbtion
     * @sff #invblidbtf
     * @sindf 1.4
     */
    publid void bpplyComponfntOrifntbtion(ComponfntOrifntbtion o) {
        supfr.bpplyComponfntOrifntbtion(o);
        syndhronizfd (gftTrffLodk()) {
            for (int i = 0; i < domponfnt.sizf(); i++) {
                Componfnt domp = domponfnt.gft(i);
                domp.bpplyComponfntOrifntbtion(o);
            }
        }
    }

    /**
     * Adds b PropfrtyChbngfListfnfr to thf listfnfr list. Thf listfnfr is
     * rfgistfrfd for bll bound propfrtifs of this dlbss, indluding thf
     * following:
     * <ul>
     *    <li>this Contbinfr's font ("font")</li>
     *    <li>this Contbinfr's bbdkground dolor ("bbdkground")</li>
     *    <li>this Contbinfr's forfground dolor ("forfground")</li>
     *    <li>this Contbinfr's fodusbbility ("fodusbblf")</li>
     *    <li>this Contbinfr's fodus trbvfrsbl kfys fnbblfd stbtf
     *        ("fodusTrbvfrsblKfysEnbblfd")</li>
     *    <li>this Contbinfr's Sft of FORWARD_TRAVERSAL_KEYS
     *        ("forwbrdFodusTrbvfrsblKfys")</li>
     *    <li>this Contbinfr's Sft of BACKWARD_TRAVERSAL_KEYS
     *        ("bbdkwbrdFodusTrbvfrsblKfys")</li>
     *    <li>this Contbinfr's Sft of UP_CYCLE_TRAVERSAL_KEYS
     *        ("upCydlfFodusTrbvfrsblKfys")</li>
     *    <li>this Contbinfr's Sft of DOWN_CYCLE_TRAVERSAL_KEYS
     *        ("downCydlfFodusTrbvfrsblKfys")</li>
     *    <li>this Contbinfr's fodus trbvfrsbl polidy ("fodusTrbvfrsblPolidy")
     *        </li>
     *    <li>this Contbinfr's fodus-dydlf-root stbtf ("fodusCydlfRoot")</li>
     * </ul>
     * Notf thbt if this Contbinfr is inhfriting b bound propfrty, thfn no
     * fvfnt will bf firfd in rfsponsf to b dhbngf in thf inhfritfd propfrty.
     * <p>
     * If listfnfr is null, no fxdfption is thrown bnd no bdtion is pfrformfd.
     *
     * @pbrbm    listfnfr  thf PropfrtyChbngfListfnfr to bf bddfd
     *
     * @sff Componfnt#rfmovfPropfrtyChbngfListfnfr
     * @sff #bddPropfrtyChbngfListfnfr(jbvb.lbng.String,jbvb.bfbns.PropfrtyChbngfListfnfr)
     */
    publid void bddPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr listfnfr) {
        supfr.bddPropfrtyChbngfListfnfr(listfnfr);
    }

    /**
     * Adds b PropfrtyChbngfListfnfr to thf listfnfr list for b spfdifid
     * propfrty. Thf spfdififd propfrty mby bf usfr-dffinfd, or onf of thf
     * following dffbults:
     * <ul>
     *    <li>this Contbinfr's font ("font")</li>
     *    <li>this Contbinfr's bbdkground dolor ("bbdkground")</li>
     *    <li>this Contbinfr's forfground dolor ("forfground")</li>
     *    <li>this Contbinfr's fodusbbility ("fodusbblf")</li>
     *    <li>this Contbinfr's fodus trbvfrsbl kfys fnbblfd stbtf
     *        ("fodusTrbvfrsblKfysEnbblfd")</li>
     *    <li>this Contbinfr's Sft of FORWARD_TRAVERSAL_KEYS
     *        ("forwbrdFodusTrbvfrsblKfys")</li>
     *    <li>this Contbinfr's Sft of BACKWARD_TRAVERSAL_KEYS
     *        ("bbdkwbrdFodusTrbvfrsblKfys")</li>
     *    <li>this Contbinfr's Sft of UP_CYCLE_TRAVERSAL_KEYS
     *        ("upCydlfFodusTrbvfrsblKfys")</li>
     *    <li>this Contbinfr's Sft of DOWN_CYCLE_TRAVERSAL_KEYS
     *        ("downCydlfFodusTrbvfrsblKfys")</li>
     *    <li>this Contbinfr's fodus trbvfrsbl polidy ("fodusTrbvfrsblPolidy")
     *        </li>
     *    <li>this Contbinfr's fodus-dydlf-root stbtf ("fodusCydlfRoot")</li>
     *    <li>this Contbinfr's fodus-trbvfrsbl-polidy-providfr stbtf("fodusTrbvfrsblPolidyProvidfr")</li>
     *    <li>this Contbinfr's fodus-trbvfrsbl-polidy-providfr stbtf("fodusTrbvfrsblPolidyProvidfr")</li>
     * </ul>
     * Notf thbt if this Contbinfr is inhfriting b bound propfrty, thfn no
     * fvfnt will bf firfd in rfsponsf to b dhbngf in thf inhfritfd propfrty.
     * <p>
     * If listfnfr is null, no fxdfption is thrown bnd no bdtion is pfrformfd.
     *
     * @pbrbm propfrtyNbmf onf of thf propfrty nbmfs listfd bbovf
     * @pbrbm listfnfr thf PropfrtyChbngfListfnfr to bf bddfd
     *
     * @sff #bddPropfrtyChbngfListfnfr(jbvb.bfbns.PropfrtyChbngfListfnfr)
     * @sff Componfnt#rfmovfPropfrtyChbngfListfnfr
     */
    publid void bddPropfrtyChbngfListfnfr(String propfrtyNbmf,
                                          PropfrtyChbngfListfnfr listfnfr) {
        supfr.bddPropfrtyChbngfListfnfr(propfrtyNbmf, listfnfr);
    }

    // Sfriblizbtion support. A Contbinfr is rfsponsiblf for rfstoring thf
    // pbrfnt fiflds of its domponfnt dhildrfn.

    /**
     * Contbinfr Sfribl Dbtb Vfrsion.
     */
    privbtf int dontbinfrSfriblizfdDbtbVfrsion = 1;

    /**
     * Sfriblizfs this <dodf>Contbinfr</dodf> to thf spfdififd
     * <dodf>ObjfdtOutputStrfbm</dodf>.
     * <ul>
     *    <li>Writfs dffbult sfriblizbblf fiflds to thf strfbm.</li>
     *    <li>Writfs b list of sfriblizbblf ContbinfrListfnfr(s) bs optionbl
     *        dbtb. Thf non-sfriblizbblf ContbinfrListnfr(s) brf dftfdtfd bnd
     *        no bttfmpt is mbdf to sfriblizf thfm.</li>
     *    <li>Writf this Contbinfr's FodusTrbvfrsblPolidy if bnd only if it
     *        is Sfriblizbblf; othfrwisf, <dodf>null</dodf> is writtfn.</li>
     * </ul>
     *
     * @pbrbm s thf <dodf>ObjfdtOutputStrfbm</dodf> to writf
     * @sfriblDbtb <dodf>null</dodf> tfrminbtfd sfqufndf of 0 or morf pbirs;
     *   thf pbir donsists of b <dodf>String</dodf> bnd <dodf>Objfdt</dodf>;
     *   thf <dodf>String</dodf> indidbtfs thf typf of objfdt bnd
     *   is onf of thf following:
     *   <dodf>dontbinfrListfnfrK</dodf> indidbting bn
     *     <dodf>ContbinfrListfnfr</dodf> objfdt;
     *   thf <dodf>Contbinfr</dodf>'s <dodf>FodusTrbvfrsblPolidy</dodf>,
     *     or <dodf>null</dodf>
     *
     * @sff AWTEvfntMultidbstfr#sbvf(jbvb.io.ObjfdtOutputStrfbm, jbvb.lbng.String, jbvb.util.EvfntListfnfr)
     * @sff Contbinfr#dontbinfrListfnfrK
     * @sff #rfbdObjfdt(ObjfdtInputStrfbm)
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
        ObjfdtOutputStrfbm.PutFifld f = s.putFiflds();
        f.put("ndomponfnts", domponfnt.sizf());
        f.put("domponfnt", gftComponfntsSynd());
        f.put("lbyoutMgr", lbyoutMgr);
        f.put("dispbtdhfr", dispbtdhfr);
        f.put("mbxSizf", mbxSizf);
        f.put("fodusCydlfRoot", fodusCydlfRoot);
        f.put("dontbinfrSfriblizfdDbtbVfrsion", dontbinfrSfriblizfdDbtbVfrsion);
        f.put("fodusTrbvfrsblPolidyProvidfr", fodusTrbvfrsblPolidyProvidfr);
        s.writfFiflds();

        AWTEvfntMultidbstfr.sbvf(s, dontbinfrListfnfrK, dontbinfrListfnfr);
        s.writfObjfdt(null);

        if (fodusTrbvfrsblPolidy instbndfof jbvb.io.Sfriblizbblf) {
            s.writfObjfdt(fodusTrbvfrsblPolidy);
        } flsf {
            s.writfObjfdt(null);
        }
    }

    /**
     * Dfsfriblizfs this <dodf>Contbinfr</dodf> from thf spfdififd
     * <dodf>ObjfdtInputStrfbm</dodf>.
     * <ul>
     *    <li>Rfbds dffbult sfriblizbblf fiflds from thf strfbm.</li>
     *    <li>Rfbds b list of sfriblizbblf ContbinfrListfnfr(s) bs optionbl
     *        dbtb. If thf list is null, no Listfnfrs brf instbllfd.</li>
     *    <li>Rfbds this Contbinfr's FodusTrbvfrsblPolidy, whidh mby bf null,
     *        bs optionbl dbtb.</li>
     * </ul>
     *
     * @pbrbm s thf <dodf>ObjfdtInputStrfbm</dodf> to rfbd
     * @sfribl
     * @sff #bddContbinfrListfnfr
     * @sff #writfObjfdt(ObjfdtOutputStrfbm)
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        throws ClbssNotFoundExdfption, IOExdfption
    {
        ObjfdtInputStrfbm.GftFifld f = s.rfbdFiflds();
        Componfnt [] tmpComponfnt = (Componfnt[])f.gft("domponfnt", EMPTY_ARRAY);
        int ndomponfnts = (Intfgfr) f.gft("ndomponfnts", 0);
        domponfnt = nfw jbvb.util.ArrbyList<Componfnt>(ndomponfnts);
        for (int i = 0; i < ndomponfnts; ++i) {
            domponfnt.bdd(tmpComponfnt[i]);
        }
        lbyoutMgr = (LbyoutMbnbgfr)f.gft("lbyoutMgr", null);
        dispbtdhfr = (LightwfightDispbtdhfr)f.gft("dispbtdhfr", null);
        // Old strfbm. Dofsn't dontbin mbxSizf bmong Componfnt's fiflds.
        if (mbxSizf == null) {
            mbxSizf = (Dimfnsion)f.gft("mbxSizf", null);
        }
        fodusCydlfRoot = f.gft("fodusCydlfRoot", fblsf);
        dontbinfrSfriblizfdDbtbVfrsion = f.gft("dontbinfrSfriblizfdDbtbVfrsion", 1);
        fodusTrbvfrsblPolidyProvidfr = f.gft("fodusTrbvfrsblPolidyProvidfr", fblsf);
        jbvb.util.List<Componfnt> domponfnt = this.domponfnt;
        for(Componfnt domp : domponfnt) {
            domp.pbrfnt = this;
            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_EVENT_MASK,
                                    domp.numListfning(AWTEvfnt.HIERARCHY_EVENT_MASK));
            bdjustListfningChildrfn(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK,
                                    domp.numListfning(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK));
            bdjustDfsdfndbnts(domp.dountHifrbrdhyMfmbfrs());
        }

        Objfdt kfyOrNull;
        whilf(null != (kfyOrNull = s.rfbdObjfdt())) {
            String kfy = ((String)kfyOrNull).intfrn();

            if (dontbinfrListfnfrK == kfy) {
                bddContbinfrListfnfr((ContbinfrListfnfr)(s.rfbdObjfdt()));
            } flsf {
                // skip vbluf for unrfdognizfd kfy
                s.rfbdObjfdt();
            }
        }

        try {
            Objfdt polidy = s.rfbdObjfdt();
            if (polidy instbndfof FodusTrbvfrsblPolidy) {
                fodusTrbvfrsblPolidy = (FodusTrbvfrsblPolidy)polidy;
            }
        } dbtdh (jbvb.io.OptionblDbtbExdfption f) {
            // JDK 1.1/1.2/1.3 instbndfs will not hbvf this optionbl dbtb.
            // f.fof will bf truf to indidbtf thbt thfrf is no morf dbtb
            // bvbilbblf for this objfdt. If f.fof is not truf, throw thf
            // fxdfption bs it might hbvf bffn dbusfd by rfbsons unrflbtfd to
            // fodusTrbvfrsblPolidy.

            if (!f.fof) {
                throw f;
            }
        }
    }

    /*
     * --- Addfssibility Support ---
     */

    /**
     * Innfr dlbss of Contbinfr usfd to providf dffbult support for
     * bddfssibility.  This dlbss is not mfbnt to bf usfd dirfdtly by
     * bpplidbtion dfvflopfrs, but is instfbd mfbnt only to bf
     * subdlbssfd by dontbinfr dfvflopfrs.
     * <p>
     * Thf dlbss usfd to obtbin thf bddfssiblf rolf for this objfdt,
     * bs wfll bs implfmfnting mbny of thf mfthods in thf
     * AddfssiblfContbinfr intfrfbdf.
     * @sindf 1.3
     */
    protfdtfd dlbss AddfssiblfAWTContbinfr fxtfnds AddfssiblfAWTComponfnt {

        /**
         * JDK1.3 sfriblVfrsionUID
         */
        privbtf stbtid finbl long sfriblVfrsionUID = 5081320404842566097L;

        /**
         * Rfturns thf numbfr of bddfssiblf dhildrfn in thf objfdt.  If bll
         * of thf dhildrfn of this objfdt implfmfnt <dodf>Addfssiblf</dodf>,
         * thfn this mfthod should rfturn thf numbfr of dhildrfn of this objfdt.
         *
         * @rfturn thf numbfr of bddfssiblf dhildrfn in thf objfdt
         */
        publid int gftAddfssiblfChildrfnCount() {
            rfturn Contbinfr.this.gftAddfssiblfChildrfnCount();
        }

        /**
         * Rfturns thf nth <dodf>Addfssiblf</dodf> dhild of thf objfdt.
         *
         * @pbrbm i zfro-bbsfd indfx of dhild
         * @rfturn thf nth <dodf>Addfssiblf</dodf> dhild of thf objfdt
         */
        publid Addfssiblf gftAddfssiblfChild(int i) {
            rfturn Contbinfr.this.gftAddfssiblfChild(i);
        }

        /**
         * Rfturns thf <dodf>Addfssiblf</dodf> dhild, if onf fxists,
         * dontbinfd bt thf lodbl doordinbtf <dodf>Point</dodf>.
         *
         * @pbrbm p thf point dffining thf top-lfft dornfr of thf
         *    <dodf>Addfssiblf</dodf>, givfn in thf doordinbtf spbdf
         *    of thf objfdt's pbrfnt
         * @rfturn thf <dodf>Addfssiblf</dodf>, if it fxists,
         *    bt thf spfdififd lodbtion; flsf <dodf>null</dodf>
         */
        publid Addfssiblf gftAddfssiblfAt(Point p) {
            rfturn Contbinfr.this.gftAddfssiblfAt(p);
        }

        /**
         * Numbfr of PropfrtyChbngfListfnfr objfdts rfgistfrfd. It's usfd
         * to bdd/rfmovf ContbinfrListfnfr to trbdk tbrgft Contbinfr's stbtf.
         */
        privbtf volbtilf trbnsifnt int propfrtyListfnfrsCount = 0;

        /**
         * Thf hbndlfr to firf {@dodf PropfrtyChbngf}
         * whfn dhildrfn brf bddfd or rfmovfd
         */
        protfdtfd ContbinfrListfnfr bddfssiblfContbinfrHbndlfr = null;

        /**
         * Firf <dodf>PropfrtyChbngf</dodf> listfnfr, if onf is rfgistfrfd,
         * whfn dhildrfn brf bddfd or rfmovfd.
         * @sindf 1.3
         */
        protfdtfd dlbss AddfssiblfContbinfrHbndlfr
            implfmfnts ContbinfrListfnfr {
            publid void domponfntAddfd(ContbinfrEvfnt f) {
                Componfnt d = f.gftChild();
                if (d != null && d instbndfof Addfssiblf) {
                    AddfssiblfAWTContbinfr.this.firfPropfrtyChbngf(
                        AddfssiblfContfxt.ACCESSIBLE_CHILD_PROPERTY,
                        null, ((Addfssiblf) d).gftAddfssiblfContfxt());
                }
            }
            publid void domponfntRfmovfd(ContbinfrEvfnt f) {
                Componfnt d = f.gftChild();
                if (d != null && d instbndfof Addfssiblf) {
                    AddfssiblfAWTContbinfr.this.firfPropfrtyChbngf(
                        AddfssiblfContfxt.ACCESSIBLE_CHILD_PROPERTY,
                        ((Addfssiblf) d).gftAddfssiblfContfxt(), null);
                }
            }
        }

        /**
         * Adds b PropfrtyChbngfListfnfr to thf listfnfr list.
         *
         * @pbrbm listfnfr  thf PropfrtyChbngfListfnfr to bf bddfd
         */
        publid void bddPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr listfnfr) {
            if (bddfssiblfContbinfrHbndlfr == null) {
                bddfssiblfContbinfrHbndlfr = nfw AddfssiblfContbinfrHbndlfr();
            }
            if (propfrtyListfnfrsCount++ == 0) {
                Contbinfr.this.bddContbinfrListfnfr(bddfssiblfContbinfrHbndlfr);
            }
            supfr.bddPropfrtyChbngfListfnfr(listfnfr);
        }

        /**
         * Rfmovf b PropfrtyChbngfListfnfr from thf listfnfr list.
         * This rfmovfs b PropfrtyChbngfListfnfr thbt wbs rfgistfrfd
         * for bll propfrtifs.
         *
         * @pbrbm listfnfr thf PropfrtyChbngfListfnfr to bf rfmovfd
         */
        publid void rfmovfPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr listfnfr) {
            if (--propfrtyListfnfrsCount == 0) {
                Contbinfr.this.rfmovfContbinfrListfnfr(bddfssiblfContbinfrHbndlfr);
            }
            supfr.rfmovfPropfrtyChbngfListfnfr(listfnfr);
        }

    } // innfr dlbss AddfssiblfAWTContbinfr

    /**
     * Rfturns thf <dodf>Addfssiblf</dodf> dhild dontbinfd bt thf lodbl
     * doordinbtf <dodf>Point</dodf>, if onf fxists.  Othfrwisf
     * rfturns <dodf>null</dodf>.
     *
     * @pbrbm p thf point dffining thf top-lfft dornfr of thf
     *    <dodf>Addfssiblf</dodf>, givfn in thf doordinbtf spbdf
     *    of thf objfdt's pbrfnt
     * @rfturn thf <dodf>Addfssiblf</dodf> bt thf spfdififd lodbtion,
     *    if it fxists; othfrwisf <dodf>null</dodf>
     */
    Addfssiblf gftAddfssiblfAt(Point p) {
        syndhronizfd (gftTrffLodk()) {
            if (this instbndfof Addfssiblf) {
                Addfssiblf b = (Addfssiblf)this;
                AddfssiblfContfxt bd = b.gftAddfssiblfContfxt();
                if (bd != null) {
                    AddfssiblfComponfnt bdmp;
                    Point lodbtion;
                    int ndhildrfn = bd.gftAddfssiblfChildrfnCount();
                    for (int i=0; i < ndhildrfn; i++) {
                        b = bd.gftAddfssiblfChild(i);
                        if ((b != null)) {
                            bd = b.gftAddfssiblfContfxt();
                            if (bd != null) {
                                bdmp = bd.gftAddfssiblfComponfnt();
                                if ((bdmp != null) && (bdmp.isShowing())) {
                                    lodbtion = bdmp.gftLodbtion();
                                    Point np = nfw Point(p.x-lodbtion.x,
                                                         p.y-lodbtion.y);
                                    if (bdmp.dontbins(np)){
                                        rfturn b;
                                    }
                                }
                            }
                        }
                    }
                }
                rfturn (Addfssiblf)this;
            } flsf {
                Componfnt rft = this;
                if (!this.dontbins(p.x,p.y)) {
                    rft = null;
                } flsf {
                    int ndomponfnts = this.gftComponfntCount();
                    for (int i=0; i < ndomponfnts; i++) {
                        Componfnt domp = this.gftComponfnt(i);
                        if ((domp != null) && domp.isShowing()) {
                            Point lodbtion = domp.gftLodbtion();
                            if (domp.dontbins(p.x-lodbtion.x,p.y-lodbtion.y)) {
                                rft = domp;
                            }
                        }
                    }
                }
                if (rft instbndfof Addfssiblf) {
                    rfturn (Addfssiblf) rft;
                }
            }
            rfturn null;
        }
    }

    /**
     * Rfturns thf numbfr of bddfssiblf dhildrfn in thf objfdt.  If bll
     * of thf dhildrfn of this objfdt implfmfnt <dodf>Addfssiblf</dodf>,
     * thfn this mfthod should rfturn thf numbfr of dhildrfn of this objfdt.
     *
     * @rfturn thf numbfr of bddfssiblf dhildrfn in thf objfdt
     */
    int gftAddfssiblfChildrfnCount() {
        syndhronizfd (gftTrffLodk()) {
            int dount = 0;
            Componfnt[] dhildrfn = this.gftComponfnts();
            for (int i = 0; i < dhildrfn.lfngth; i++) {
                if (dhildrfn[i] instbndfof Addfssiblf) {
                    dount++;
                }
            }
            rfturn dount;
        }
    }

    /**
     * Rfturns thf nth <dodf>Addfssiblf</dodf> dhild of thf objfdt.
     *
     * @pbrbm i zfro-bbsfd indfx of dhild
     * @rfturn thf nth <dodf>Addfssiblf</dodf> dhild of thf objfdt
     */
    Addfssiblf gftAddfssiblfChild(int i) {
        syndhronizfd (gftTrffLodk()) {
            Componfnt[] dhildrfn = this.gftComponfnts();
            int dount = 0;
            for (int j = 0; j < dhildrfn.lfngth; j++) {
                if (dhildrfn[j] instbndfof Addfssiblf) {
                    if (dount == i) {
                        rfturn (Addfssiblf) dhildrfn[j];
                    } flsf {
                        dount++;
                    }
                }
            }
            rfturn null;
        }
    }

    // ************************** MIXING CODE *******************************

    finbl void indrfbsfComponfntCount(Componfnt d) {
        syndhronizfd (gftTrffLodk()) {
            if (!d.isDisplbybblf()) {
                throw nfw IllfgblStbtfExdfption(
                    "Pffr dofs not fxist whilf invoking thf indrfbsfComponfntCount() mfthod"
                );
            }

            int bddHW = 0;
            int bddLW = 0;

            if (d instbndfof Contbinfr) {
                bddLW = ((Contbinfr)d).numOfLWComponfnts;
                bddHW = ((Contbinfr)d).numOfHWComponfnts;
            }
            if (d.isLightwfight()) {
                bddLW++;
            } flsf {
                bddHW++;
            }

            for (Contbinfr dont = this; dont != null; dont = dont.gftContbinfr()) {
                dont.numOfLWComponfnts += bddLW;
                dont.numOfHWComponfnts += bddHW;
            }
        }
    }

    finbl void dfdrfbsfComponfntCount(Componfnt d) {
        syndhronizfd (gftTrffLodk()) {
            if (!d.isDisplbybblf()) {
                throw nfw IllfgblStbtfExdfption(
                    "Pffr dofs not fxist whilf invoking thf dfdrfbsfComponfntCount() mfthod"
                );
            }

            int subHW = 0;
            int subLW = 0;

            if (d instbndfof Contbinfr) {
                subLW = ((Contbinfr)d).numOfLWComponfnts;
                subHW = ((Contbinfr)d).numOfHWComponfnts;
            }
            if (d.isLightwfight()) {
                subLW++;
            } flsf {
                subHW++;
            }

            for (Contbinfr dont = this; dont != null; dont = dont.gftContbinfr()) {
                dont.numOfLWComponfnts -= subLW;
                dont.numOfHWComponfnts -= subHW;
            }
        }
    }

    privbtf int gftTopmostComponfntIndfx() {
        dhfdkTrffLodk();
        if (gftComponfntCount() > 0) {
            rfturn 0;
        }
        rfturn -1;
    }

    privbtf int gftBottommostComponfntIndfx() {
        dhfdkTrffLodk();
        if (gftComponfntCount() > 0) {
            rfturn gftComponfntCount() - 1;
        }
        rfturn -1;
    }

    /*
     * This mfthod is ovfrridfn to hbndlf opbquf dhildrfn in non-opbquf
     * dontbinfrs.
     */
    @Ovfrridf
    finbl Rfgion gftOpbqufShbpf() {
        dhfdkTrffLodk();
        if (isLightwfight() && isNonOpbqufForMixing()
                && hbsLightwfightDfsdfndbnts())
        {
            Rfgion s = Rfgion.EMPTY_REGION;
            for (int indfx = 0; indfx < gftComponfntCount(); indfx++) {
                Componfnt d = gftComponfnt(indfx);
                if (d.isLightwfight() && d.isShowing()) {
                    s = s.gftUnion(d.gftOpbqufShbpf());
                }
            }
            rfturn s.gftIntfrsfdtion(gftNormblShbpf());
        }
        rfturn supfr.gftOpbqufShbpf();
    }

    finbl void rfdursivfSubtrbdtAndApplyShbpf(Rfgion shbpf) {
        rfdursivfSubtrbdtAndApplyShbpf(shbpf, gftTopmostComponfntIndfx(), gftBottommostComponfntIndfx());
    }

    finbl void rfdursivfSubtrbdtAndApplyShbpf(Rfgion shbpf, int fromZordfr) {
        rfdursivfSubtrbdtAndApplyShbpf(shbpf, fromZordfr, gftBottommostComponfntIndfx());
    }

    finbl void rfdursivfSubtrbdtAndApplyShbpf(Rfgion shbpf, int fromZordfr, int toZordfr) {
        dhfdkTrffLodk();
        if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            mixingLog.finf("this = " + this +
                "; shbpf=" + shbpf + "; fromZ=" + fromZordfr + "; toZ=" + toZordfr);
        }
        if (fromZordfr == -1) {
            rfturn;
        }
        if (shbpf.isEmpty()) {
            rfturn;
        }
        // An invblid dontbinfr with not-null lbyout should bf ignorfd
        // by thf mixing dodf, thf dontbinfr will bf vblidbtfd lbtfr
        // bnd thf mixing dodf will bf fxfdutfd lbtfr.
        if (gftLbyout() != null && !isVblid()) {
            rfturn;
        }
        for (int indfx = fromZordfr; indfx <= toZordfr; indfx++) {
            Componfnt domp = gftComponfnt(indfx);
            if (!domp.isLightwfight()) {
                domp.subtrbdtAndApplyShbpf(shbpf);
            } flsf if (domp instbndfof Contbinfr &&
                    ((Contbinfr)domp).hbsHfbvywfightDfsdfndbnts() && domp.isShowing()) {
                ((Contbinfr)domp).rfdursivfSubtrbdtAndApplyShbpf(shbpf);
            }
        }
    }

    finbl void rfdursivfApplyCurrfntShbpf() {
        rfdursivfApplyCurrfntShbpf(gftTopmostComponfntIndfx(), gftBottommostComponfntIndfx());
    }

    finbl void rfdursivfApplyCurrfntShbpf(int fromZordfr) {
        rfdursivfApplyCurrfntShbpf(fromZordfr, gftBottommostComponfntIndfx());
    }

    finbl void rfdursivfApplyCurrfntShbpf(int fromZordfr, int toZordfr) {
        dhfdkTrffLodk();
        if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            mixingLog.finf("this = " + this +
                "; fromZ=" + fromZordfr + "; toZ=" + toZordfr);
        }
        if (fromZordfr == -1) {
            rfturn;
        }
        // An invblid dontbinfr with not-null lbyout should bf ignorfd
        // by thf mixing dodf, thf dontbinfr will bf vblidbtfd lbtfr
        // bnd thf mixing dodf will bf fxfdutfd lbtfr.
        if (gftLbyout() != null && !isVblid()) {
            rfturn;
        }
        for (int indfx = fromZordfr; indfx <= toZordfr; indfx++) {
            Componfnt domp = gftComponfnt(indfx);
            if (!domp.isLightwfight()) {
                domp.bpplyCurrfntShbpf();
            }
            if (domp instbndfof Contbinfr &&
                    ((Contbinfr)domp).hbsHfbvywfightDfsdfndbnts()) {
                ((Contbinfr)domp).rfdursivfApplyCurrfntShbpf();
            }
        }
    }

    privbtf void rfdursivfShowHfbvywfightChildrfn() {
        if (!hbsHfbvywfightDfsdfndbnts() || !isVisiblf()) {
            rfturn;
        }
        for (int indfx = 0; indfx < gftComponfntCount(); indfx++) {
            Componfnt domp = gftComponfnt(indfx);
            if (domp.isLightwfight()) {
                if  (domp instbndfof Contbinfr) {
                    ((Contbinfr)domp).rfdursivfShowHfbvywfightChildrfn();
                }
            } flsf {
                if (domp.isVisiblf()) {
                    ComponfntPffr pffr = domp.gftPffr();
                    if (pffr != null) {
                        pffr.sftVisiblf(truf);
                    }
                }
            }
        }
    }

    privbtf void rfdursivfHidfHfbvywfightChildrfn() {
        if (!hbsHfbvywfightDfsdfndbnts()) {
            rfturn;
        }
        for (int indfx = 0; indfx < gftComponfntCount(); indfx++) {
            Componfnt domp = gftComponfnt(indfx);
            if (domp.isLightwfight()) {
                if  (domp instbndfof Contbinfr) {
                    ((Contbinfr)domp).rfdursivfHidfHfbvywfightChildrfn();
                }
            } flsf {
                if (domp.isVisiblf()) {
                    ComponfntPffr pffr = domp.gftPffr();
                    if (pffr != null) {
                        pffr.sftVisiblf(fblsf);
                    }
                }
            }
        }
    }

    privbtf void rfdursivfRflodbtfHfbvywfightChildrfn(Point origin) {
        for (int indfx = 0; indfx < gftComponfntCount(); indfx++) {
            Componfnt domp = gftComponfnt(indfx);
            if (domp.isLightwfight()) {
                if  (domp instbndfof Contbinfr &&
                        ((Contbinfr)domp).hbsHfbvywfightDfsdfndbnts())
                {
                    finbl Point nfwOrigin = nfw Point(origin);
                    nfwOrigin.trbnslbtf(domp.gftX(), domp.gftY());
                    ((Contbinfr)domp).rfdursivfRflodbtfHfbvywfightChildrfn(nfwOrigin);
                }
            } flsf {
                ComponfntPffr pffr = domp.gftPffr();
                if (pffr != null) {
                    pffr.sftBounds(origin.x + domp.gftX(), origin.y + domp.gftY(),
                            domp.gftWidth(), domp.gftHfight(),
                            ComponfntPffr.SET_LOCATION);
                }
            }
        }
    }

    /**
     * Chfdks if thf dontbinfr bnd its dirfdt lightwfight dontbinfrs brf
     * visiblf.
     *
     * Considfr thf hfbvywfight dontbinfr hidfs or shows thf HW dfsdfndbnts
     * butombtidblly. Thfrfforf wf dbrf of LW dontbinfrs' visibility only.
     *
     * This mfthod MUST bf invokfd undfr thf TrffLodk.
     */
    finbl boolfbn isRfdursivflyVisiblfUpToHfbvywfightContbinfr() {
        if (!isLightwfight()) {
            rfturn truf;
        }

        for (Contbinfr dont = this;
                dont != null && dont.isLightwfight();
                dont = dont.gftContbinfr())
        {
            if (!dont.isVisiblf()) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    @Ovfrridf
    void mixOnShowing() {
        syndhronizfd (gftTrffLodk()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this);
            }

            boolfbn isLightwfight = isLightwfight();

            if (isLightwfight && isRfdursivflyVisiblfUpToHfbvywfightContbinfr()) {
                rfdursivfShowHfbvywfightChildrfn();
            }

            if (!isMixingNffdfd()) {
                rfturn;
            }

            if (!isLightwfight || (isLightwfight && hbsHfbvywfightDfsdfndbnts())) {
                rfdursivfApplyCurrfntShbpf();
            }

            supfr.mixOnShowing();
        }
    }

    @Ovfrridf
    void mixOnHiding(boolfbn isLightwfight) {
        syndhronizfd (gftTrffLodk()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this +
                        "; isLightwfight=" + isLightwfight);
            }
            if (isLightwfight) {
                rfdursivfHidfHfbvywfightChildrfn();
            }
            supfr.mixOnHiding(isLightwfight);
        }
    }

    @Ovfrridf
    void mixOnRfshbping() {
        syndhronizfd (gftTrffLodk()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this);
            }

            boolfbn isMixingNffdfd = isMixingNffdfd();

            if (isLightwfight() && hbsHfbvywfightDfsdfndbnts()) {
                finbl Point origin = nfw Point(gftX(), gftY());
                for (Contbinfr dont = gftContbinfr();
                        dont != null && dont.isLightwfight();
                        dont = dont.gftContbinfr())
                {
                    origin.trbnslbtf(dont.gftX(), dont.gftY());
                }

                rfdursivfRflodbtfHfbvywfightChildrfn(origin);

                if (!isMixingNffdfd) {
                    rfturn;
                }

                rfdursivfApplyCurrfntShbpf();
            }

            if (!isMixingNffdfd) {
                rfturn;
            }

            supfr.mixOnRfshbping();
        }
    }

    @Ovfrridf
    void mixOnZOrdfrChbnging(int oldZordfr, int nfwZordfr) {
        syndhronizfd (gftTrffLodk()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this +
                    "; oldZ=" + oldZordfr + "; nfwZ=" + nfwZordfr);
            }

            if (!isMixingNffdfd()) {
                rfturn;
            }

            boolfbn bfdbmfHighfr = nfwZordfr < oldZordfr;

            if (bfdbmfHighfr && isLightwfight() && hbsHfbvywfightDfsdfndbnts()) {
                rfdursivfApplyCurrfntShbpf();
            }
            supfr.mixOnZOrdfrChbnging(oldZordfr, nfwZordfr);
        }
    }

    @Ovfrridf
    void mixOnVblidbting() {
        syndhronizfd (gftTrffLodk()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this);
            }

            if (!isMixingNffdfd()) {
                rfturn;
            }

            if (hbsHfbvywfightDfsdfndbnts()) {
                rfdursivfApplyCurrfntShbpf();
            }

            if (isLightwfight() && isNonOpbqufForMixing()) {
                subtrbdtAndApplyShbpfBflowMf();
            }

            supfr.mixOnVblidbting();
        }
    }

    // ****************** END OF MIXING CODE ********************************
}


/**
 * Clbss to mbnbgf thf dispbtdhing of MousfEvfnts to thf lightwfight dfsdfndbnts
 * bnd SunDropTbrgftEvfnts to both lightwfight bnd hfbvywfight dfsdfndbnts
 * dontbinfd by b nbtivf dontbinfr.
 *
 * NOTE: thf dlbss nbmf is not bppropribtf bnymorf, but wf dbnnot dhbngf it
 * bfdbusf wf must kffp sfriblizbtion dompbtibility.
 *
 * @buthor Timothy Prinzing
 */
dlbss LightwfightDispbtdhfr implfmfnts jbvb.io.Sfriblizbblf, AWTEvfntListfnfr {

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 5184291520170872969L;
    /*
     * Our own mousf fvfnt for whfn wf'rf drbggfd ovfr from bnothfr hw
     * dontbinfr
     */
    privbtf stbtid finbl int  LWD_MOUSE_DRAGGED_OVER = 1500;

    privbtf stbtid finbl PlbtformLoggfr fvfntLog = PlbtformLoggfr.gftLoggfr("jbvb.bwt.fvfnt.LightwfightDispbtdhfr");

    LightwfightDispbtdhfr(Contbinfr nbtivfContbinfr) {
        this.nbtivfContbinfr = nbtivfContbinfr;
        mousfEvfntTbrgft = null;
        fvfntMbsk = 0;
    }

    /*
     * Clfbn up bny rfsourdfs bllodbtfd whfn dispbtdhfr wbs drfbtfd;
     * should bf dbllfd from Contbinfr.rfmovfNotify
     */
    void disposf() {
        //Systfm.out.println("Disposing lw dispbtdhfr");
        stopListfningForOthfrDrbgs();
        mousfEvfntTbrgft = null;
        tbrgftLbstEntfrfd = null;
        tbrgftLbstEntfrfdDT = null;
    }

    /**
     * Enbblfs fvfnts to subdomponfnts.
     */
    void fnbblfEvfnts(long fvfnts) {
        fvfntMbsk |= fvfnts;
    }

    /**
     * Dispbtdhfs bn fvfnt to b sub-domponfnt if nfdfssbry, bnd
     * rfturns whfthfr or not thf fvfnt wbs forwbrdfd to b
     * sub-domponfnt.
     *
     * @pbrbm f thf fvfnt
     */
    boolfbn dispbtdhEvfnt(AWTEvfnt f) {
        boolfbn rft = fblsf;

        /*
         * Fix for BugTrbq Id 4389284.
         * Dispbtdh SunDropTbrgftEvfnts rfgbrdlfss of fvfntMbsk vbluf.
         * Do not updbtf dursor on dispbtdhing SunDropTbrgftEvfnts.
         */
        if (f instbndfof SunDropTbrgftEvfnt) {

            SunDropTbrgftEvfnt sddf = (SunDropTbrgftEvfnt) f;
            rft = prodfssDropTbrgftEvfnt(sddf);

        } flsf {
            if (f instbndfof MousfEvfnt && (fvfntMbsk & MOUSE_MASK) != 0) {
                MousfEvfnt mf = (MousfEvfnt) f;
                rft = prodfssMousfEvfnt(mf);
            }

            if (f.gftID() == MousfEvfnt.MOUSE_MOVED) {
                nbtivfContbinfr.updbtfCursorImmfdibtfly();
            }
        }

        rfturn rft;
    }

    /* This mfthod ffffdtivfly rfturns whfthfr or not b mousf button wbs down
     * just BEFORE thf fvfnt hbppfnfd.  A bfttfr mfthod nbmf might bf
     * wbsAMousfButtonDownBfforfThisEvfnt().
     */
    privbtf boolfbn isMousfGrbb(MousfEvfnt f) {
        int modififrs = f.gftModififrsEx();

        if(f.gftID() == MousfEvfnt.MOUSE_PRESSED
            || f.gftID() == MousfEvfnt.MOUSE_RELEASED)
        {
            switdh (f.gftButton()) {
            dbsf MousfEvfnt.BUTTON1:
                modififrs ^= InputEvfnt.BUTTON1_DOWN_MASK;
                brfbk;
            dbsf MousfEvfnt.BUTTON2:
                modififrs ^= InputEvfnt.BUTTON2_DOWN_MASK;
                brfbk;
            dbsf MousfEvfnt.BUTTON3:
                modififrs ^= InputEvfnt.BUTTON3_DOWN_MASK;
                brfbk;
            }
        }
        /* modififrs now bs just bfforf fvfnt */
        rfturn ((modififrs & (InputEvfnt.BUTTON1_DOWN_MASK
                              | InputEvfnt.BUTTON2_DOWN_MASK
                              | InputEvfnt.BUTTON3_DOWN_MASK)) != 0);
    }

    /**
     * This mfthod bttfmpts to distributf b mousf fvfnt to b lightwfight
     * domponfnt.  It trifs to bvoid doing bny unnfdfssbry probfs down
     * into thf domponfnt trff to minimizf thf ovfrhfbd of dftfrmining
     * whfrf to routf thf fvfnt, sindf mousf movfmfnt fvfnts tfnd to
     * domf in lbrgf bnd frfqufnt bmounts.
     */
    privbtf boolfbn prodfssMousfEvfnt(MousfEvfnt f) {
        int id = f.gftID();
        Componfnt mousfOvfr =   // sfnsitivf to mousf fvfnts
            nbtivfContbinfr.gftMousfEvfntTbrgft(f.gftX(), f.gftY(),
                                                Contbinfr.INCLUDE_SELF);

        trbdkMousfEntfrExit(mousfOvfr, f);

    // 4508327 : MOUSE_CLICKED should only go to thf rfdipifnt of
    // thf bddompbnying MOUSE_PRESSED, so don't rfsft mousfEvfntTbrgft on b
    // MOUSE_CLICKED.
    if (!isMousfGrbb(f) && id != MousfEvfnt.MOUSE_CLICKED) {
            mousfEvfntTbrgft = (mousfOvfr != nbtivfContbinfr) ? mousfOvfr: null;
            isClfbnfd = fblsf;
        }

        if (mousfEvfntTbrgft != null) {
            switdh (id) {
            dbsf MousfEvfnt.MOUSE_ENTERED:
            dbsf MousfEvfnt.MOUSE_EXITED:
                brfbk;
            dbsf MousfEvfnt.MOUSE_PRESSED:
                rftbrgftMousfEvfnt(mousfEvfntTbrgft, id, f);
                brfbk;
        dbsf MousfEvfnt.MOUSE_RELEASED:
            rftbrgftMousfEvfnt(mousfEvfntTbrgft, id, f);
        brfbk;
        dbsf MousfEvfnt.MOUSE_CLICKED:
        // 4508327: MOUSE_CLICKED should nfvfr bf dispbtdhfd to b Componfnt
        // othfr thbn thbt whidh rfdfivfd thf MOUSE_PRESSED fvfnt.  If thf
        // mousf is now ovfr b difffrfnt Componfnt, don't dispbtdh thf fvfnt.
        // Thf prfvious fix for b similbr problfm wbs bssodibtfd with bug
        // 4155217.
        if (mousfOvfr == mousfEvfntTbrgft) {
            rftbrgftMousfEvfnt(mousfOvfr, id, f);
        }
        brfbk;
            dbsf MousfEvfnt.MOUSE_MOVED:
                rftbrgftMousfEvfnt(mousfEvfntTbrgft, id, f);
                brfbk;
        dbsf MousfEvfnt.MOUSE_DRAGGED:
            if (isMousfGrbb(f)) {
                rftbrgftMousfEvfnt(mousfEvfntTbrgft, id, f);
            }
                brfbk;
        dbsf MousfEvfnt.MOUSE_WHEEL:
            // This mby sfnd it somfwhfrf thbt dofsn't hbvf MousfWhfflEvfnts
            // fnbblfd.  In this dbsf, Componfnt.dispbtdhEvfntImpl() will
            // rftbrgft thf fvfnt to b pbrfnt thbt DOES hbvf thf fvfnts fnbblfd.
            if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST) && (mousfOvfr != null)) {
                fvfntLog.finfst("rftbrgfting mousf whffl to " +
                                mousfOvfr.gftNbmf() + ", " +
                                mousfOvfr.gftClbss());
            }
            rftbrgftMousfEvfnt(mousfOvfr, id, f);
        brfbk;
            }
        //Consuming of whffl fvfnts is implfmfntfd in "rftbrgftMousfEvfnt".
        if (id != MousfEvfnt.MOUSE_WHEEL) {
            f.donsumf();
        }
    } flsf if (isClfbnfd && id != MousfEvfnt.MOUSE_WHEEL) {
        //Aftfr mousfEvfntTbrgft wbs rfmovfd bnd dlfbnfd should donsumf bll fvfnts
        //until nfw mousfEvfntTbrgft is found
        f.donsumf();
    }
    rfturn f.isConsumfd();
    }

    privbtf boolfbn prodfssDropTbrgftEvfnt(SunDropTbrgftEvfnt f) {
        int id = f.gftID();
        int x = f.gftX();
        int y = f.gftY();

        /*
         * Fix for BugTrbq ID 4395290.
         * It is possiblf thbt SunDropTbrgftEvfnt's Point is outsidf of thf
         * nbtivf dontbinfr bounds. In this dbsf wf trundbtf doordinbtfs.
         */
        if (!nbtivfContbinfr.dontbins(x, y)) {
            finbl Dimfnsion d = nbtivfContbinfr.gftSizf();
            if (d.width <= x) {
                x = d.width - 1;
            } flsf if (x < 0) {
                x = 0;
            }
            if (d.hfight <= y) {
                y = d.hfight - 1;
            } flsf if (y < 0) {
                y = 0;
            }
        }
        Componfnt mousfOvfr =   // not nfdfssbrily sfnsitivf to mousf fvfnts
            nbtivfContbinfr.gftDropTbrgftEvfntTbrgft(x, y,
                                                     Contbinfr.INCLUDE_SELF);
        trbdkMousfEntfrExit(mousfOvfr, f);

        if (mousfOvfr != nbtivfContbinfr && mousfOvfr != null) {
            switdh (id) {
            dbsf SunDropTbrgftEvfnt.MOUSE_ENTERED:
            dbsf SunDropTbrgftEvfnt.MOUSE_EXITED:
                brfbk;
            dffbult:
                rftbrgftMousfEvfnt(mousfOvfr, id, f);
                f.donsumf();
                brfbk;
            }
        }
        rfturn f.isConsumfd();
    }

    /*
     * Gfnfrbtfs dnd fntfr/fxit fvfnts bs mousf movfs ovfr lw domponfnts
     * @pbrbm tbrgftOvfr       Tbrgft mousf is ovfr (indluding nbtivf dontbinfr)
     * @pbrbm f                SunDropTbrgft mousf fvfnt in nbtivf dontbinfr
     */
    privbtf void trbdkDropTbrgftEntfrExit(Componfnt tbrgftOvfr, MousfEvfnt f) {
        int id = f.gftID();
        if (id == MousfEvfnt.MOUSE_ENTERED && isMousfDTInNbtivfContbinfr) {
            // This dbn hbppfn if b lightwfight domponfnt whidh initibtfd thf
            // drbg hbs bn bssodibtfd drop tbrgft. MOUSE_ENTERED domfs whfn thf
            // mousf is in thf nbtivf dontbinfr blrfbdy. To propbgbtf this fvfnt
            // propfrly wf should null out tbrgftLbstEntfrfd.
            tbrgftLbstEntfrfdDT = null;
        } flsf if (id == MousfEvfnt.MOUSE_ENTERED) {
            isMousfDTInNbtivfContbinfr = truf;
        } flsf if (id == MousfEvfnt.MOUSE_EXITED) {
            isMousfDTInNbtivfContbinfr = fblsf;
        }
        tbrgftLbstEntfrfdDT = rftbrgftMousfEntfrExit(tbrgftOvfr, f,
                                                     tbrgftLbstEntfrfdDT,
                                                     isMousfDTInNbtivfContbinfr);
    }

    /*
     * Gfnfrbtfs fntfr/fxit fvfnts bs mousf movfs ovfr lw domponfnts
     * @pbrbm tbrgftOvfr        Tbrgft mousf is ovfr (indluding nbtivf dontbinfr)
     * @pbrbm f                 Mousf fvfnt in nbtivf dontbinfr
     */
    privbtf void trbdkMousfEntfrExit(Componfnt tbrgftOvfr, MousfEvfnt f) {
        if (f instbndfof SunDropTbrgftEvfnt) {
            trbdkDropTbrgftEntfrExit(tbrgftOvfr, f);
            rfturn;
        }
        int id = f.gftID();

        if ( id != MousfEvfnt.MOUSE_EXITED &&
             id != MousfEvfnt.MOUSE_DRAGGED &&
             id != LWD_MOUSE_DRAGGED_OVER &&
                !isMousfInNbtivfContbinfr) {
            // bny fvfnt but bn fxit or drbg mfbns wf'rf in thf nbtivf dontbinfr
            isMousfInNbtivfContbinfr = truf;
            stbrtListfningForOthfrDrbgs();
        } flsf if (id == MousfEvfnt.MOUSE_EXITED) {
            isMousfInNbtivfContbinfr = fblsf;
            stopListfningForOthfrDrbgs();
        }
        tbrgftLbstEntfrfd = rftbrgftMousfEntfrExit(tbrgftOvfr, f,
                                                   tbrgftLbstEntfrfd,
                                                   isMousfInNbtivfContbinfr);
    }

    privbtf Componfnt rftbrgftMousfEntfrExit(Componfnt tbrgftOvfr, MousfEvfnt f,
                                             Componfnt lbstEntfrfd,
                                             boolfbn inNbtivfContbinfr) {
        int id = f.gftID();
        Componfnt tbrgftEntfr = inNbtivfContbinfr ? tbrgftOvfr : null;

        if (lbstEntfrfd != tbrgftEntfr) {
            if (lbstEntfrfd != null) {
                rftbrgftMousfEvfnt(lbstEntfrfd, MousfEvfnt.MOUSE_EXITED, f);
            }
            if (id == MousfEvfnt.MOUSE_EXITED) {
                // donsumf nbtivf fxit fvfnt if wf gfnfrbtf onf
                f.donsumf();
            }

            if (tbrgftEntfr != null) {
                rftbrgftMousfEvfnt(tbrgftEntfr, MousfEvfnt.MOUSE_ENTERED, f);
            }
            if (id == MousfEvfnt.MOUSE_ENTERED) {
                // donsumf nbtivf fntfr fvfnt if wf gfnfrbtf onf
                f.donsumf();
            }
        }
        rfturn tbrgftEntfr;
    }

    /*
     * Listfns to globbl mousf drbg fvfnts so fvfn drbgs originbting
     * from othfr hfbvywfight dontbinfrs will gfnfrbtf fntfr/fxit
     * fvfnts in this dontbinfr
     */
    privbtf void stbrtListfningForOthfrDrbgs() {
        //Systfm.out.println("Adding AWTEvfntListfnfr");
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw jbvb.sfdurity.PrivilfgfdAdtion<Objfdt>() {
                publid Objfdt run() {
                    nbtivfContbinfr.gftToolkit().bddAWTEvfntListfnfr(
                        LightwfightDispbtdhfr.this,
                        AWTEvfnt.MOUSE_EVENT_MASK |
                        AWTEvfnt.MOUSE_MOTION_EVENT_MASK);
                    rfturn null;
                }
            }
        );
    }

    privbtf void stopListfningForOthfrDrbgs() {
        //Systfm.out.println("Rfmoving AWTEvfntListfnfr");
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw jbvb.sfdurity.PrivilfgfdAdtion<Objfdt>() {
                publid Objfdt run() {
                    nbtivfContbinfr.gftToolkit().rfmovfAWTEvfntListfnfr(LightwfightDispbtdhfr.this);
                    rfturn null;
                }
            }
        );
    }

    /*
     * (Implfmfntbtion of AWTEvfntListfnfr)
     * Listfn for drbg fvfnts postfd in othfr hw domponfnts so wf dbn
     * trbdk fntfr/fxit rfgbrdlfss of whfrf b drbg originbtfd
     */
    publid void fvfntDispbtdhfd(AWTEvfnt f) {
        boolfbn isForfignDrbg = (f instbndfof MousfEvfnt) &&
                                !(f instbndfof SunDropTbrgftEvfnt) &&
                                (f.id == MousfEvfnt.MOUSE_DRAGGED) &&
                                (f.gftSourdf() != nbtivfContbinfr);

        if (!isForfignDrbg) {
            // only intfrfstfd in drbgs from othfr hw domponfnts
            rfturn;
        }

        MousfEvfnt      srdEvfnt = (MousfEvfnt)f;
        MousfEvfnt      mf;

        syndhronizfd (nbtivfContbinfr.gftTrffLodk()) {
            Componfnt srdComponfnt = srdEvfnt.gftComponfnt();

            // domponfnt mby hbvf disbppfbrfd sindf drbg fvfnt postfd
            // (i.f. Swing hifrbrdhidbl mfnus)
            if ( !srdComponfnt.isShowing() ) {
                rfturn;
            }

            // sff 5083555
            // dhfdk if srdComponfnt is in bny modbl blodkfd window
            Componfnt d = nbtivfContbinfr;
            whilf ((d != null) && !(d instbndfof Window)) {
                d = d.gftPbrfnt_NoClifntCodf();
            }
            if ((d == null) || ((Window)d).isModblBlodkfd()) {
                rfturn;
            }

            //
            // drfbtf bn intfrnbl 'drbggfd-ovfr' fvfnt indidbting
            // wf brf bfing drbggfd ovfr from bnothfr hw domponfnt
            //
            mf = nfw MousfEvfnt(nbtivfContbinfr,
                               LWD_MOUSE_DRAGGED_OVER,
                               srdEvfnt.gftWhfn(),
                               srdEvfnt.gftModififrsEx() | srdEvfnt.gftModififrs(),
                               srdEvfnt.gftX(),
                               srdEvfnt.gftY(),
                               srdEvfnt.gftXOnSdrffn(),
                               srdEvfnt.gftYOnSdrffn(),
                               srdEvfnt.gftClidkCount(),
                               srdEvfnt.isPopupTriggfr(),
                               srdEvfnt.gftButton());
            ((AWTEvfnt)srdEvfnt).dopyPrivbtfDbtbInto(mf);
            // trbnslbtf doordinbtfs to this nbtivf dontbinfr
            finbl Point ptSrdOrigin = srdComponfnt.gftLodbtionOnSdrffn();

            if (AppContfxt.gftAppContfxt() != nbtivfContbinfr.bppContfxt) {
                finbl MousfEvfnt mousfEvfnt = mf;
                Runnbblf r = nfw Runnbblf() {
                        publid void run() {
                            if (!nbtivfContbinfr.isShowing() ) {
                                rfturn;
                            }

                            Point       ptDstOrigin = nbtivfContbinfr.gftLodbtionOnSdrffn();
                            mousfEvfnt.trbnslbtfPoint(ptSrdOrigin.x - ptDstOrigin.x,
                                              ptSrdOrigin.y - ptDstOrigin.y );
                            Componfnt tbrgftOvfr =
                                nbtivfContbinfr.gftMousfEvfntTbrgft(mousfEvfnt.gftX(),
                                                                    mousfEvfnt.gftY(),
                                                                    Contbinfr.INCLUDE_SELF);
                            trbdkMousfEntfrExit(tbrgftOvfr, mousfEvfnt);
                        }
                    };
                SunToolkit.fxfdutfOnEvfntHbndlfrThrfbd(nbtivfContbinfr, r);
                rfturn;
            } flsf {
                if (!nbtivfContbinfr.isShowing() ) {
                    rfturn;
                }

                Point   ptDstOrigin = nbtivfContbinfr.gftLodbtionOnSdrffn();
                mf.trbnslbtfPoint( ptSrdOrigin.x - ptDstOrigin.x, ptSrdOrigin.y - ptDstOrigin.y );
            }
        }
        //Systfm.out.println("Trbdk fvfnt: " + mf);
        // fffd thf 'drbggfd-ovfr' fvfnt dirfdtly to thf fntfr/fxit
        // dodf (not b rfbl fvfnt so don't pbss it to dispbtdhEvfnt)
        Componfnt tbrgftOvfr =
            nbtivfContbinfr.gftMousfEvfntTbrgft(mf.gftX(), mf.gftY(),
                                                Contbinfr.INCLUDE_SELF);
        trbdkMousfEntfrExit(tbrgftOvfr, mf);
    }

    /**
     * Sfnds b mousf fvfnt to thf durrfnt mousf fvfnt rfdipifnt using
     * thf givfn fvfnt (sfnt to thf windowfd host) bs b srdEvfnt.  If
     * thf mousf fvfnt tbrgft is still in thf domponfnt trff, thf
     * doordinbtfs of thf fvfnt brf trbnslbtfd to thosf of thf tbrgft.
     * If thf tbrgft hbs bffn rfmovfd, wf don't bothfr to sfnd thf
     * mfssbgf.
     */
    void rftbrgftMousfEvfnt(Componfnt tbrgft, int id, MousfEvfnt f) {
        if (tbrgft == null) {
            rfturn; // mousf is ovfr bnothfr hw domponfnt or tbrgft is disbblfd
        }

        int x = f.gftX(), y = f.gftY();
        Componfnt domponfnt;

        for(domponfnt = tbrgft;
            domponfnt != null && domponfnt != nbtivfContbinfr;
            domponfnt = domponfnt.gftPbrfnt()) {
            x -= domponfnt.x;
            y -= domponfnt.y;
        }
        MousfEvfnt rftbrgftfd;
        if (domponfnt != null) {
            if (f instbndfof SunDropTbrgftEvfnt) {
                rftbrgftfd = nfw SunDropTbrgftEvfnt(tbrgft,
                                                    id,
                                                    x,
                                                    y,
                                                    ((SunDropTbrgftEvfnt)f).gftDispbtdhfr());
            } flsf if (id == MousfEvfnt.MOUSE_WHEEL) {
                rftbrgftfd = nfw MousfWhfflEvfnt(tbrgft,
                                      id,
                                       f.gftWhfn(),
                                       f.gftModififrsEx() | f.gftModififrs(),
                                       x,
                                       y,
                                       f.gftXOnSdrffn(),
                                       f.gftYOnSdrffn(),
                                       f.gftClidkCount(),
                                       f.isPopupTriggfr(),
                                       ((MousfWhfflEvfnt)f).gftSdrollTypf(),
                                       ((MousfWhfflEvfnt)f).gftSdrollAmount(),
                                       ((MousfWhfflEvfnt)f).gftWhfflRotbtion(),
                                       ((MousfWhfflEvfnt)f).gftPrfdisfWhfflRotbtion());
            }
            flsf {
                rftbrgftfd = nfw MousfEvfnt(tbrgft,
                                            id,
                                            f.gftWhfn(),
                                            f.gftModififrsEx() | f.gftModififrs(),
                                            x,
                                            y,
                                            f.gftXOnSdrffn(),
                                            f.gftYOnSdrffn(),
                                            f.gftClidkCount(),
                                            f.isPopupTriggfr(),
                                            f.gftButton());
            }

            ((AWTEvfnt)f).dopyPrivbtfDbtbInto(rftbrgftfd);

            if (tbrgft == nbtivfContbinfr) {
                // bvoid rfdursivfly dblling LightwfightDispbtdhfr...
                ((Contbinfr)tbrgft).dispbtdhEvfntToSflf(rftbrgftfd);
            } flsf {
                bssfrt AppContfxt.gftAppContfxt() == tbrgft.bppContfxt;

                if (nbtivfContbinfr.modblComp != null) {
                    if (((Contbinfr)nbtivfContbinfr.modblComp).isAndfstorOf(tbrgft)) {
                        tbrgft.dispbtdhEvfnt(rftbrgftfd);
                    } flsf {
                        f.donsumf();
                    }
                } flsf {
                    tbrgft.dispbtdhEvfnt(rftbrgftfd);
                }
            }
            if (id == MousfEvfnt.MOUSE_WHEEL && rftbrgftfd.isConsumfd()) {
                //An fxdfption for whffl bubbling to thf nbtivf systfm.
                //In "prodfssMousfEvfnt" totbl fvfnt donsuming for whffl fvfnts is skippfd.
                //Protfdtion from bubbling of Jbvb-bddfptfd whffl fvfnts.
                f.donsumf();
            }
        }
    }

    // --- mfmbfr vbribblfs -------------------------------

    /**
     * Thf windowfd dontbinfr thbt might bf hosting fvfnts for
     * subdomponfnts.
     */
    privbtf Contbinfr nbtivfContbinfr;

    /**
     * This vbribblf is not usfd, but kfpt for sfriblizbtion dompbtibility
     */
    privbtf Componfnt fodus;

    /**
     * Thf durrfnt subdomponfnt bfing hostfd by this windowfd
     * domponfnt thbt hbs fvfnts bfing forwbrdfd to it.  If this
     * is null, thfrf brf durrfntly no fvfnts bfing forwbrdfd to
     * b subdomponfnt.
     */
    privbtf trbnsifnt Componfnt mousfEvfntTbrgft;

    /**
     * Thf lbst domponfnt fntfrfd by thf {@dodf MousfEvfnt}.
     */
    privbtf trbnsifnt Componfnt tbrgftLbstEntfrfd;

    /**
     * Thf lbst domponfnt fntfrfd by thf {@dodf SunDropTbrgftEvfnt}.
     */
    privbtf trbnsifnt Componfnt tbrgftLbstEntfrfdDT;

    /**
     * Indidbtfs whfthfr {@dodf mousfEvfntTbrgft} wbs rfmovfd bnd nullfd
     */
    privbtf trbnsifnt boolfbn isClfbnfd;

    /**
     * Is thf mousf ovfr thf nbtivf dontbinfr.
     */
    privbtf trbnsifnt boolfbn isMousfInNbtivfContbinfr = fblsf;

    /**
     * Is DnD ovfr thf nbtivf dontbinfr.
     */
    privbtf trbnsifnt boolfbn isMousfDTInNbtivfContbinfr = fblsf;

    /**
     * This vbribblf is not usfd, but kfpt for sfriblizbtion dompbtibility
     */
    privbtf Cursor nbtivfCursor;

    /**
     * Thf fvfnt mbsk for dontbinfd lightwfight domponfnts.  Lightwfight
     * domponfnts nffd b windowfd dontbinfr to host window-rflbtfd
     * fvfnts.  This sfpbrbtf mbsk indidbtfs fvfnts thbt hbvf bffn
     * rfqufstfd by dontbinfd lightwfight domponfnts without ffffdting
     * thf mbsk of thf windowfd domponfnt itsflf.
     */
    privbtf long fvfntMbsk;

    /**
     * Thf kind of fvfnts routfd to lightwfight domponfnts from windowfd
     * hosts.
     */
    privbtf stbtid finbl long PROXY_EVENT_MASK =
        AWTEvfnt.FOCUS_EVENT_MASK |
        AWTEvfnt.KEY_EVENT_MASK |
        AWTEvfnt.MOUSE_EVENT_MASK |
        AWTEvfnt.MOUSE_MOTION_EVENT_MASK |
        AWTEvfnt.MOUSE_WHEEL_EVENT_MASK;

    privbtf stbtid finbl long MOUSE_MASK =
        AWTEvfnt.MOUSE_EVENT_MASK |
        AWTEvfnt.MOUSE_MOTION_EVENT_MASK |
        AWTEvfnt.MOUSE_WHEEL_EVENT_MASK;

    void rfmovfRfffrfndfs(Componfnt rfmovfdComponfnt) {
        if (mousfEvfntTbrgft == rfmovfdComponfnt) {
            isClfbnfd = truf;
            mousfEvfntTbrgft = null;
        }
        if (tbrgftLbstEntfrfd == rfmovfdComponfnt) {
            tbrgftLbstEntfrfd = null;
        }
        if (tbrgftLbstEntfrfdDT == rfmovfdComponfnt) {
            tbrgftLbstEntfrfdDT = null;
        }
    }
}
