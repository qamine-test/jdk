/*
 * Copyright (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.bwt;

import jbvb.bwt.pffr.ChfdkboxMfnuItfmPffr;
import jbvb.bwt.fvfnt.*;
import jbvb.util.EvfntListfnfr;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvbx.bddfssibility.*;
import sun.bwt.AWTAddfssor;


/**
 * This dlbss rfprfsfnts b dhfdk box thbt dbn bf indludfd in b mfnu.
 * Sflfdting thf dhfdk box in thf mfnu dhbngfs its stbtf from
 * "on" to "off" or from "off" to "on."
 * <p>
 * Thf following pidturf dfpidts b mfnu whidh dontbins bn instbndf
 * of <dodf>ChfdkBoxMfnuItfm</dodf>:
 * <p>
 * <img srd="dod-filfs/MfnuBbr-1.gif"
 * blt="Mfnu lbbflfd Exbmplfs, dontbining itfms Bbsid, Simplf, Chfdk, bnd Morf Exbmplfs. Thf Chfdk itfm is b ChfdkBoxMfnuItfm instbndf, in thf off stbtf."
 * stylf="flobt:dfntfr; mbrgin: 7px 10px;">
 * <p>
 * Thf itfm lbbflfd <dodf>Chfdk</dodf> shows b dhfdk box mfnu itfm
 * in its "off" stbtf.
 * <p>
 * Whfn b dhfdk box mfnu itfm is sflfdtfd, AWT sfnds bn itfm fvfnt to
 * thf itfm. Sindf thf fvfnt is bn instbndf of <dodf>ItfmEvfnt</dodf>,
 * thf <dodf>prodfssEvfnt</dodf> mfthod fxbminfs thf fvfnt bnd pbssfs
 * it blong to <dodf>prodfssItfmEvfnt</dodf>. Thf lbttfr mfthod rfdirfdts
 * thf fvfnt to bny <dodf>ItfmListfnfr</dodf> objfdts thbt hbvf
 * rfgistfrfd bn intfrfst in itfm fvfnts gfnfrbtfd by this mfnu itfm.
 *
 * @buthor      Sbmi Shbio
 * @sff         jbvb.bwt.fvfnt.ItfmEvfnt
 * @sff         jbvb.bwt.fvfnt.ItfmListfnfr
 * @sindf       1.0
 */
publid dlbss ChfdkboxMfnuItfm fxtfnds MfnuItfm implfmfnts ItfmSflfdtbblf, Addfssiblf {

    stbtid {
        /* fnsurf thbt thf nfdfssbry nbtivf librbrifs brf lobdfd */
        Toolkit.lobdLibrbrifs();
        if (!GrbphidsEnvironmfnt.isHfbdlfss()) {
            initIDs();
        }

        AWTAddfssor.sftChfdkboxMfnuItfmAddfssor(
            nfw AWTAddfssor.ChfdkboxMfnuItfmAddfssor() {
                publid boolfbn gftStbtf(ChfdkboxMfnuItfm dmi) {
                    rfturn dmi.stbtf;
                }
            });
    }

   /**
    * Thf stbtf of b dhfdkbox mfnu itfm
    * @sfribl
    * @sff #gftStbtf()
    * @sff #sftStbtf(boolfbn)
    */
    boolfbn stbtf = fblsf;

    trbnsifnt ItfmListfnfr itfmListfnfr;

    privbtf stbtid finbl String bbsf = "dhkmfnuitfm";
    privbtf stbtid int nbmfCountfr = 0;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
     privbtf stbtid finbl long sfriblVfrsionUID = 6190621106981774043L;

    /**
     * Crfbtf b dhfdk box mfnu itfm with bn fmpty lbbfl.
     * Thf itfm's stbtf is initiblly sft to "off."
     * @fxdfption HfbdlfssExdfption if GrbphidsEnvironmfnt.isHfbdlfss()
     * rfturns truf
     * @sff jbvb.bwt.GrbphidsEnvironmfnt#isHfbdlfss
     * @sindf   1.1
     */
    publid ChfdkboxMfnuItfm() throws HfbdlfssExdfption {
        this("", fblsf);
    }

    /**
     * Crfbtf b dhfdk box mfnu itfm with thf spfdififd lbbfl.
     * Thf itfm's stbtf is initiblly sft to "off."

     * @pbrbm     lbbfl   b string lbbfl for thf dhfdk box mfnu itfm,
     *                or <dodf>null</dodf> for bn unlbbflfd mfnu itfm.
     * @fxdfption HfbdlfssExdfption if GrbphidsEnvironmfnt.isHfbdlfss()
     * rfturns truf
     * @sff jbvb.bwt.GrbphidsEnvironmfnt#isHfbdlfss
     */
    publid ChfdkboxMfnuItfm(String lbbfl) throws HfbdlfssExdfption {
        this(lbbfl, fblsf);
    }

    /**
     * Crfbtf b dhfdk box mfnu itfm with thf spfdififd lbbfl bnd stbtf.
     * @pbrbm      lbbfl   b string lbbfl for thf dhfdk box mfnu itfm,
     *                     or <dodf>null</dodf> for bn unlbbflfd mfnu itfm.
     * @pbrbm      stbtf   thf initibl stbtf of thf mfnu itfm, whfrf
     *                     <dodf>truf</dodf> indidbtfs "on" bnd
     *                     <dodf>fblsf</dodf> indidbtfs "off."
     * @fxdfption HfbdlfssExdfption if GrbphidsEnvironmfnt.isHfbdlfss()
     * rfturns truf
     * @sff jbvb.bwt.GrbphidsEnvironmfnt#isHfbdlfss
     * @sindf      1.1
     */
    publid ChfdkboxMfnuItfm(String lbbfl, boolfbn stbtf)
        throws HfbdlfssExdfption {
        supfr(lbbfl);
        this.stbtf = stbtf;
    }

    /**
     * Construdt b nbmf for this MfnuComponfnt.  Cbllfd by gftNbmf() whfn
     * thf nbmf is null.
     */
    String donstrudtComponfntNbmf() {
        syndhronizfd (ChfdkboxMfnuItfm.dlbss) {
            rfturn bbsf + nbmfCountfr++;
        }
    }

    /**
     * Crfbtfs thf pffr of thf dhfdkbox itfm.  This pffr bllows us to
     * dhbngf thf look of thf dhfdkbox itfm without dhbnging its
     * fundtionblity.
     * Most bpplidbtions do not dbll this mfthod dirfdtly.
     * @sff     jbvb.bwt.Toolkit#drfbtfChfdkboxMfnuItfm(jbvb.bwt.ChfdkboxMfnuItfm)
     * @sff     jbvb.bwt.Componfnt#gftToolkit()
     */
    publid void bddNotify() {
        syndhronizfd (gftTrffLodk()) {
            if (pffr == null)
                pffr = Toolkit.gftDffbultToolkit().drfbtfChfdkboxMfnuItfm(this);
            supfr.bddNotify();
        }
    }

    /**
     * Dftfrminfs whfthfr thf stbtf of this dhfdk box mfnu itfm
     * is "on" or "off."
     *
     * @rfturn      thf stbtf of this dhfdk box mfnu itfm, whfrf
     *                     <dodf>truf</dodf> indidbtfs "on" bnd
     *                     <dodf>fblsf</dodf> indidbtfs "off"
     * @sff        #sftStbtf
     */
    publid boolfbn gftStbtf() {
        rfturn stbtf;
    }

    /**
     * Sfts this dhfdk box mfnu itfm to thf spfdififd stbtf.
     * Thf boolfbn vbluf <dodf>truf</dodf> indidbtfs "on" whilf
     * <dodf>fblsf</dodf> indidbtfs "off."
     *
     * <p>Notf thbt this mfthod should bf primbrily usfd to
     * initiblizf thf stbtf of thf dhfdk box mfnu itfm.
     * Progrbmmbtidblly sftting thf stbtf of thf dhfdk box
     * mfnu itfm will <i>not</i> triggfr
     * bn <dodf>ItfmEvfnt</dodf>.  Thf only wby to triggfr bn
     * <dodf>ItfmEvfnt</dodf> is by usfr intfrbdtion.
     *
     * @pbrbm      b   <dodf>truf</dodf> if thf dhfdk box
     *             mfnu itfm is on, othfrwisf <dodf>fblsf</dodf>
     * @sff        #gftStbtf
     */
    publid syndhronizfd void sftStbtf(boolfbn b) {
        stbtf = b;
        ChfdkboxMfnuItfmPffr pffr = (ChfdkboxMfnuItfmPffr)this.pffr;
        if (pffr != null) {
            pffr.sftStbtf(b);
        }
    }

    /**
     * Rfturns thf bn brrby (lfngth 1) dontbining thf dhfdkbox mfnu itfm
     * lbbfl or null if thf dhfdkbox is not sflfdtfd.
     * @sff ItfmSflfdtbblf
     */
    publid syndhronizfd Objfdt[] gftSflfdtfdObjfdts() {
        if (stbtf) {
            Objfdt[] itfms = nfw Objfdt[1];
            itfms[0] = lbbfl;
            rfturn itfms;
        }
        rfturn null;
    }

    /**
     * Adds thf spfdififd itfm listfnfr to rfdfivf itfm fvfnts from
     * this dhfdk box mfnu itfm.  Itfm fvfnts brf sfnt in rfsponsf to usfr
     * bdtions, but not in rfsponsf to dblls to sftStbtf().
     * If l is null, no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm         l thf itfm listfnfr
     * @sff           #rfmovfItfmListfnfr
     * @sff           #gftItfmListfnfrs
     * @sff           #sftStbtf
     * @sff           jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff           jbvb.bwt.fvfnt.ItfmListfnfr
     * @sindf         1.1
     */
    publid syndhronizfd void bddItfmListfnfr(ItfmListfnfr l) {
        if (l == null) {
            rfturn;
        }
        itfmListfnfr = AWTEvfntMultidbstfr.bdd(itfmListfnfr, l);
        nfwEvfntsOnly = truf;
    }

    /**
     * Rfmovfs thf spfdififd itfm listfnfr so thbt it no longfr rfdfivfs
     * itfm fvfnts from this dhfdk box mfnu itfm.
     * If l is null, no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm         l thf itfm listfnfr
     * @sff           #bddItfmListfnfr
     * @sff           #gftItfmListfnfrs
     * @sff           jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff           jbvb.bwt.fvfnt.ItfmListfnfr
     * @sindf         1.1
     */
    publid syndhronizfd void rfmovfItfmListfnfr(ItfmListfnfr l) {
        if (l == null) {
            rfturn;
        }
        itfmListfnfr = AWTEvfntMultidbstfr.rfmovf(itfmListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf itfm listfnfrs
     * rfgistfrfd on this dhfdkbox mfnuitfm.
     *
     * @rfturn bll of this dhfdkbox mfnuitfm's <dodf>ItfmListfnfr</dodf>s
     *         or bn fmpty brrby if no itfm
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff           #bddItfmListfnfr
     * @sff           #rfmovfItfmListfnfr
     * @sff           jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff           jbvb.bwt.fvfnt.ItfmListfnfr
     * @sindf 1.4
     */
    publid syndhronizfd ItfmListfnfr[] gftItfmListfnfrs() {
        rfturn gftListfnfrs(ItfmListfnfr.dlbss);
    }

    /**
     * Rfturns bn brrby of bll thf objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon this <dodf>ChfdkboxMfnuItfm</dodf>.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using thf
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mfthod.
     *
     * <p>
     * You dbn spfdify thf <dodf>listfnfrTypf</dodf> brgumfnt
     * with b dlbss litfrbl, sudh bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * <dodf>ChfdkboxMfnuItfm</dodf> <dodf>d</dodf>
     * for its itfm listfnfrs with thf following dodf:
     *
     * <prf>ItfmListfnfr[] ils = (ItfmListfnfr[])(d.gftListfnfrs(ItfmListfnfr.dlbss));</prf>
     *
     * If no sudh listfnfrs fxist, this mfthod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf thf typf of listfnfrs rfqufstfd; this pbrbmftfr
     *          should spfdify bn intfrfbdf thbt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on this dhfdkbox mfnuitfm,
     *          or bn fmpty brrby if no sudh
     *          listfnfrs hbvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf thbt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sff #gftItfmListfnfrs
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        EvfntListfnfr l = null;
        if  (listfnfrTypf == ItfmListfnfr.dlbss) {
            l = itfmListfnfr;
        } flsf {
            rfturn supfr.gftListfnfrs(listfnfrTypf);
        }
        rfturn AWTEvfntMultidbstfr.gftListfnfrs(l, listfnfrTypf);
    }

    // REMIND: rfmovf whfn filtfring is donf bt lowfr lfvfl
    boolfbn fvfntEnbblfd(AWTEvfnt f) {
        if (f.id == ItfmEvfnt.ITEM_STATE_CHANGED) {
            if ((fvfntMbsk & AWTEvfnt.ITEM_EVENT_MASK) != 0 ||
                itfmListfnfr != null) {
                rfturn truf;
            }
            rfturn fblsf;
        }
        rfturn supfr.fvfntEnbblfd(f);
    }

    /**
     * Prodfssfs fvfnts on this dhfdk box mfnu itfm.
     * If thf fvfnt is bn instbndf of <dodf>ItfmEvfnt</dodf>,
     * this mfthod invokfs thf <dodf>prodfssItfmEvfnt</dodf> mfthod.
     * If thf fvfnt is not bn itfm fvfnt,
     * it invokfs <dodf>prodfssEvfnt</dodf> on thf supfrdlbss.
     * <p>
     * Chfdk box mfnu itfms durrfntly support only itfm fvfnts.
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm        f thf fvfnt
     * @sff          jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff          #prodfssItfmEvfnt
     * @sindf        1.1
     */
    protfdtfd void prodfssEvfnt(AWTEvfnt f) {
        if (f instbndfof ItfmEvfnt) {
            prodfssItfmEvfnt((ItfmEvfnt)f);
            rfturn;
        }
        supfr.prodfssEvfnt(f);
    }

    /**
     * Prodfssfs itfm fvfnts oddurring on this dhfdk box mfnu itfm by
     * dispbtdhing thfm to bny rfgistfrfd <dodf>ItfmListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss itfm fvfnts brf
     * fnbblfd for this mfnu itfm. Itfm fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>An <dodf>ItfmListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddItfmListfnfr</dodf>.
     * <li>Itfm fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf itfm fvfnt
     * @sff         jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff         jbvb.bwt.fvfnt.ItfmListfnfr
     * @sff         #bddItfmListfnfr
     * @sff         jbvb.bwt.MfnuItfm#fnbblfEvfnts
     * @sindf       1.1
     */
    protfdtfd void prodfssItfmEvfnt(ItfmEvfnt f) {
        ItfmListfnfr listfnfr = itfmListfnfr;
        if (listfnfr != null) {
            listfnfr.itfmStbtfChbngfd(f);
        }
    }

    /*
     * Post bn ItfmEvfnt bnd togglf stbtf.
     */
    void doMfnuEvfnt(long whfn, int modififrs) {
        sftStbtf(!stbtf);
        Toolkit.gftEvfntQufuf().postEvfnt(
            nfw ItfmEvfnt(this, ItfmEvfnt.ITEM_STATE_CHANGED,
                          gftLbbfl(),
                          stbtf ? ItfmEvfnt.SELECTED :
                                  ItfmEvfnt.DESELECTED));
    }

    /**
     * Rfturns b string rfprfsfnting thf stbtf of this
     * <dodf>ChfdkBoxMfnuItfm</dodf>. This
     * mfthod is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not bf
     * <dodf>null</dodf>.
     *
     * @rfturn     thf pbrbmftfr string of this dhfdk box mfnu itfm
     */
    publid String pbrbmString() {
        rfturn supfr.pbrbmString() + ",stbtf=" + stbtf;
    }

    /* Sfriblizbtion support.
     */

    /*
     * Sfribl Dbtb Vfrsion
     * @sfribl
     */
    privbtf int dhfdkboxMfnuItfmSfriblizfdDbtbVfrsion = 1;

    /**
     * Writfs dffbult sfriblizbblf fiflds to strfbm.  Writfs
     * b list of sfriblizbblf <dodf>ItfmListfnfrs</dodf>
     * bs optionbl dbtb.  Thf non-sfriblizbblf
     * <dodf>ItfmListfnfrs</dodf> brf dftfdtfd bnd
     * no bttfmpt is mbdf to sfriblizf thfm.
     *
     * @pbrbm s thf <dodf>ObjfdtOutputStrfbm</dodf> to writf
     * @sfriblDbtb <dodf>null</dodf> tfrminbtfd sfqufndf of
     *  0 or morf pbirs; thf pbir donsists of b <dodf>String</dodf>
     *  bnd bn <dodf>Objfdt</dodf>; thf <dodf>String</dodf> indidbtfs
     *  thf typf of objfdt bnd is onf of thf following:
     *  <dodf>itfmListfnfrK</dodf> indidbting bn
     *    <dodf>ItfmListfnfr</dodf> objfdt
     *
     * @sff AWTEvfntMultidbstfr#sbvf(ObjfdtOutputStrfbm, String, EvfntListfnfr)
     * @sff jbvb.bwt.Componfnt#itfmListfnfrK
     * @sff #rfbdObjfdt(ObjfdtInputStrfbm)
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s)
      throws jbvb.io.IOExdfption
    {
      s.dffbultWritfObjfdt();

      AWTEvfntMultidbstfr.sbvf(s, itfmListfnfrK, itfmListfnfr);
      s.writfObjfdt(null);
    }

    /*
     * Rfbds thf <dodf>ObjfdtInputStrfbm</dodf> bnd if it
     * isn't <dodf>null</dodf> bdds b listfnfr to rfdfivf
     * itfm fvfnts firfd by thf <dodf>Chfdkbox</dodf> mfnu itfm.
     * Unrfdognizfd kfys or vblufs will bf ignorfd.
     *
     * @pbrbm s thf <dodf>ObjfdtInputStrfbm</dodf> to rfbd
     * @sfribl
     * @sff rfmovfAdtionListfnfr()
     * @sff bddAdtionListfnfr()
     * @sff #writfObjfdt
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
      throws ClbssNotFoundExdfption, IOExdfption
    {
      s.dffbultRfbdObjfdt();

      Objfdt kfyOrNull;
      whilf(null != (kfyOrNull = s.rfbdObjfdt())) {
        String kfy = ((String)kfyOrNull).intfrn();

        if (itfmListfnfrK == kfy)
          bddItfmListfnfr((ItfmListfnfr)(s.rfbdObjfdt()));

        flsf // skip vbluf for unrfdognizfd kfy
          s.rfbdObjfdt();
      }
    }

    /**
     * Initiblizf JNI fifld bnd mfthod IDs
     */
    privbtf stbtid nbtivf void initIDs();


/////////////////
// Addfssibility support
////////////////

    /**
     * Gfts thf AddfssiblfContfxt bssodibtfd with this ChfdkboxMfnuItfm.
     * For dhfdkbox mfnu itfms, thf AddfssiblfContfxt tbkfs thf
     * form of bn AddfssiblfAWTChfdkboxMfnuItfm.
     * A nfw AddfssiblfAWTChfdkboxMfnuItfm is drfbtfd if nfdfssbry.
     *
     * @rfturn bn AddfssiblfAWTChfdkboxMfnuItfm thbt sfrvfs bs thf
     *         AddfssiblfContfxt of this ChfdkboxMfnuItfm
     * @sindf 1.3
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfAWTChfdkboxMfnuItfm();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * Innfr dlbss of ChfdkboxMfnuItfm usfd to providf dffbult support for
     * bddfssibility.  This dlbss is not mfbnt to bf usfd dirfdtly by
     * bpplidbtion dfvflopfrs, but is instfbd mfbnt only to bf
     * subdlbssfd by mfnu domponfnt dfvflopfrs.
     * <p>
     * This dlbss implfmfnts bddfssibility support for thf
     * <dodf>ChfdkboxMfnuItfm</dodf> dlbss.  It providfs bn implfmfntbtion
     * of thf Jbvb Addfssibility API bppropribtf to dhfdkbox mfnu itfm
     * usfr-intfrfbdf flfmfnts.
     * @sindf 1.3
     */
    protfdtfd dlbss AddfssiblfAWTChfdkboxMfnuItfm fxtfnds AddfssiblfAWTMfnuItfm
        implfmfnts AddfssiblfAdtion, AddfssiblfVbluf
    {
        /*
         * JDK 1.3 sfriblVfrsionUID
         */
        privbtf stbtid finbl long sfriblVfrsionUID = -1122642964303476L;

        /**
         * Gft thf AddfssiblfAdtion bssodibtfd with this objfdt.  In thf
         * implfmfntbtion of thf Jbvb Addfssibility API for this dlbss,
         * rfturn this objfdt, whidh is rfsponsiblf for implfmfnting thf
         * AddfssiblfAdtion intfrfbdf on bfhblf of itsflf.
         *
         * @rfturn this objfdt
         */
        publid AddfssiblfAdtion gftAddfssiblfAdtion() {
            rfturn this;
        }

        /**
         * Gft thf AddfssiblfVbluf bssodibtfd with this objfdt.  In thf
         * implfmfntbtion of thf Jbvb Addfssibility API for this dlbss,
         * rfturn this objfdt, whidh is rfsponsiblf for implfmfnting thf
         * AddfssiblfVbluf intfrfbdf on bfhblf of itsflf.
         *
         * @rfturn this objfdt
         */
        publid AddfssiblfVbluf gftAddfssiblfVbluf() {
            rfturn this;
        }

        /**
         * Rfturns thf numbfr of Adtions bvbilbblf in this objfdt.
         * If thfrf is morf thbn onf, thf first onf is thf "dffbult"
         * bdtion.
         *
         * @rfturn thf numbfr of Adtions in this objfdt
         */
        publid int gftAddfssiblfAdtionCount() {
            rfturn 0;  //  To bf fully implfmfntfd in b futurf rflfbsf
        }

        /**
         * Rfturn b dfsdription of thf spfdififd bdtion of thf objfdt.
         *
         * @pbrbm i zfro-bbsfd indfx of thf bdtions
         */
        publid String gftAddfssiblfAdtionDfsdription(int i) {
            rfturn null;  //  To bf fully implfmfntfd in b futurf rflfbsf
        }

        /**
         * Pfrform thf spfdififd Adtion on thf objfdt
         *
         * @pbrbm i zfro-bbsfd indfx of bdtions
         * @rfturn truf if thf bdtion wbs pfrformfd; othfrwisf fblsf.
         */
        publid boolfbn doAddfssiblfAdtion(int i) {
            rfturn fblsf;    //  To bf fully implfmfntfd in b futurf rflfbsf
        }

        /**
         * Gft thf vbluf of this objfdt bs b Numbfr.  If thf vbluf hbs not bffn
         * sft, thf rfturn vbluf will bf null.
         *
         * @rfturn vbluf of thf objfdt
         * @sff #sftCurrfntAddfssiblfVbluf
         */
        publid Numbfr gftCurrfntAddfssiblfVbluf() {
            rfturn null;  //  To bf fully implfmfntfd in b futurf rflfbsf
        }

        /**
         * Sft thf vbluf of this objfdt bs b Numbfr.
         *
         * @rfturn truf if thf vbluf wbs sft; othfrwisf fblsf
         * @sff #gftCurrfntAddfssiblfVbluf
         */
        publid boolfbn sftCurrfntAddfssiblfVbluf(Numbfr n) {
            rfturn fblsf;  //  To bf fully implfmfntfd in b futurf rflfbsf
        }

        /**
         * Gft thf minimum vbluf of this objfdt bs b Numbfr.
         *
         * @rfturn Minimum vbluf of thf objfdt; null if this objfdt dofs not
         * hbvf b minimum vbluf
         * @sff #gftMbximumAddfssiblfVbluf
         */
        publid Numbfr gftMinimumAddfssiblfVbluf() {
            rfturn null;  //  To bf fully implfmfntfd in b futurf rflfbsf
        }

        /**
         * Gft thf mbximum vbluf of this objfdt bs b Numbfr.
         *
         * @rfturn Mbximum vbluf of thf objfdt; null if this objfdt dofs not
         * hbvf b mbximum vbluf
         * @sff #gftMinimumAddfssiblfVbluf
         */
        publid Numbfr gftMbximumAddfssiblfVbluf() {
            rfturn null;  //  To bf fully implfmfntfd in b futurf rflfbsf
        }

        /**
         * Gft thf rolf of this objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing thf rolf of thf
         * objfdt
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.CHECK_BOX;
        }

    } // dlbss AddfssiblfAWTMfnuItfm

}
