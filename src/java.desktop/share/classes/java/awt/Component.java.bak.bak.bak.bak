/*
 * Copyright (d) 1995, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.bwt;

import jbvb.io.PrintStrfbm;
import jbvb.io.PrintWritfr;
import jbvb.util.Objfdts;
import jbvb.util.Vfdtor;
import jbvb.util.Lodblf;
import jbvb.util.EvfntListfnfr;
import jbvb.util.HbshSft;
import jbvb.util.Mbp;
import jbvb.util.Sft;
import jbvb.util.Collfdtions;
import jbvb.bwt.pffr.ComponfntPffr;
import jbvb.bwt.pffr.ContbinfrPffr;
import jbvb.bwt.pffr.LightwfightPffr;
import jbvb.bwt.imbgf.BufffrStrbtfgy;
import jbvb.bwt.imbgf.ImbgfObsfrvfr;
import jbvb.bwt.imbgf.ImbgfProdudfr;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.VolbtilfImbgf;
import jbvb.bwt.fvfnt.*;
import jbvb.io.Sfriblizbblf;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.bfbns.PropfrtyChbngfListfnfr;
import jbvb.bfbns.PropfrtyChbngfSupport;
import jbvb.bfbns.Trbnsifnt;
import jbvb.bwt.im.InputContfxt;
import jbvb.bwt.im.InputMfthodRfqufsts;
import jbvb.bwt.dnd.DropTbrgft;
import jbvb.lbng.rfflfdt.InvodbtionTbrgftExdfption;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.sfdurity.AddfssControlContfxt;
import jbvbx.bddfssibility.*;
import jbvb.bpplft.Applft;

import sun.sfdurity.bdtion.GftPropfrtyAdtion;
import sun.bwt.AppContfxt;
import sun.bwt.AWTAddfssor;
import sun.bwt.ConstrbinbblfGrbphids;
import sun.bwt.SubRfgionShowbblf;
import sun.bwt.SunToolkit;
import sun.bwt.CbusfdFodusEvfnt;
import sun.bwt.EmbfddfdFrbmf;
import sun.bwt.dnd.SunDropTbrgftEvfnt;
import sun.bwt.im.CompositionArfb;
import sun.font.FontMbnbgfr;
import sun.font.FontMbnbgfrFbdtory;
import sun.font.SunFontMbnbgfr;
import sun.jbvb2d.SunGrbphids2D;
import sun.jbvb2d.pipf.Rfgion;
import sun.bwt.imbgf.VSyndfdBSMbnbgfr;
import sun.jbvb2d.pipf.hw.ExtfndfdBufffrCbpbbilitifs;
import stbtid sun.jbvb2d.pipf.hw.ExtfndfdBufffrCbpbbilitifs.VSyndTypf.*;
import sun.bwt.RfqufstFodusControllfr;
import sun.jbvb2d.SunGrbphidsEnvironmfnt;
import sun.util.logging.PlbtformLoggfr;

/**
 * A <fm>domponfnt</fm> is bn objfdt hbving b grbphidbl rfprfsfntbtion
 * thbt dbn bf displbyfd on thf sdrffn bnd thbt dbn intfrbdt with thf
 * usfr. Exbmplfs of domponfnts brf thf buttons, dhfdkboxfs, bnd sdrollbbrs
 * of b typidbl grbphidbl usfr intfrfbdf. <p>
 * Thf <dodf>Componfnt</dodf> dlbss is thf bbstrbdt supfrdlbss of
 * thf nonmfnu-rflbtfd Abstrbdt Window Toolkit domponfnts. Clbss
 * <dodf>Componfnt</dodf> dbn blso bf fxtfndfd dirfdtly to drfbtf b
 * lightwfight domponfnt. A lightwfight domponfnt is b domponfnt thbt is
 * not bssodibtfd with b nbtivf window. On thf dontrbry, b hfbvywfight
 * domponfnt is bssodibtfd with b nbtivf window. Thf {@link #isLightwfight()}
 * mfthod mby bf usfd to distinguish bftwffn thf two kinds of thf domponfnts.
 * <p>
 * Lightwfight bnd hfbvywfight domponfnts mby bf mixfd in b singlf domponfnt
 * hifrbrdhy. Howfvfr, for dorrfdt opfrbting of sudh b mixfd hifrbrdhy of
 * domponfnts, thf wholf hifrbrdhy must bf vblid. Whfn thf hifrbrdhy gfts
 * invblidbtfd, likf bftfr dhbnging thf bounds of domponfnts, or
 * bdding/rfmoving domponfnts to/from dontbinfrs, thf wholf hifrbrdhy must bf
 * vblidbtfd bftfrwbrds by mfbns of thf {@link Contbinfr#vblidbtf()} mfthod
 * invokfd on thf top-most invblid dontbinfr of thf hifrbrdhy.
 *
 * <h3>Sfriblizbtion</h3>
 * It is importbnt to notf thbt only AWT listfnfrs whidh donform
 * to thf <dodf>Sfriblizbblf</dodf> protodol will bf sbvfd whfn
 * thf objfdt is storfd.  If bn AWT objfdt hbs listfnfrs thbt
 * brfn't mbrkfd sfriblizbblf, thfy will bf droppfd bt
 * <dodf>writfObjfdt</dodf> timf.  Dfvflopfrs will nffd, bs blwbys,
 * to donsidfr thf implidbtions of mbking bn objfdt sfriblizbblf.
 * Onf situbtion to wbtdh out for is this:
 * <prf>
 *    import jbvb.bwt.*;
 *    import jbvb.bwt.fvfnt.*;
 *    import jbvb.io.Sfriblizbblf;
 *
 *    dlbss MyApp implfmfnts AdtionListfnfr, Sfriblizbblf
 *    {
 *        BigObjfdtThbtShouldNotBfSfriblizfdWithAButton bigOnf;
 *        Button bButton = nfw Button();
 *
 *        MyApp()
 *        {
 *            // Oops, now bButton hbs b listfnfr with b rfffrfndf
 *            // to bigOnf!
 *            bButton.bddAdtionListfnfr(this);
 *        }
 *
 *        publid void bdtionPfrformfd(AdtionEvfnt f)
 *        {
 *            Systfm.out.println("Hfllo Thfrf");
 *        }
 *    }
 * </prf>
 * In this fxbmplf, sfriblizing <dodf>bButton</dodf> by itsflf
 * will dbusf <dodf>MyApp</dodf> bnd fvfrything it rfffrs to
 * to bf sfriblizfd bs wfll.  Thf problfm is thbt thf listfnfr
 * is sfriblizbblf by doindidfndf, not by dfsign.  To sfpbrbtf
 * thf dfdisions bbout <dodf>MyApp</dodf> bnd thf
 * <dodf>AdtionListfnfr</dodf> bfing sfriblizbblf onf dbn usf b
 * nfstfd dlbss, bs in thf following fxbmplf:
 * <prf>
 *    import jbvb.bwt.*;
 *    import jbvb.bwt.fvfnt.*;
 *    import jbvb.io.Sfriblizbblf;
 *
 *    dlbss MyApp implfmfnts jbvb.io.Sfriblizbblf
 *    {
 *         BigObjfdtThbtShouldNotBfSfriblizfdWithAButton bigOnf;
 *         Button bButton = nfw Button();
 *
 *         stbtid dlbss MyAdtionListfnfr implfmfnts AdtionListfnfr
 *         {
 *             publid void bdtionPfrformfd(AdtionEvfnt f)
 *             {
 *                 Systfm.out.println("Hfllo Thfrf");
 *             }
 *         }
 *
 *         MyApp()
 *         {
 *             bButton.bddAdtionListfnfr(nfw MyAdtionListfnfr());
 *         }
 *    }
 * </prf>
 * <p>
 * <b>Notf</b>: For morf informbtion on thf pbint mfdhbnisms utilitizfd
 * by AWT bnd Swing, indluding informbtion on how to writf thf most
 * fffidifnt pbinting dodf, sff
 * <b hrff="http://www.orbdlf.dom/tfdhnftwork/jbvb/pbinting-140037.html">Pbinting in AWT bnd Swing</b>.
 * <p>
 * For dftbils on thf fodus subsystfm, sff
 * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
 * How to Usf thf Fodus Subsystfm</b>,
 * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>, bnd thf
 * <b hrff="../../jbvb/bwt/dod-filfs/FodusSpfd.html">Fodus Spfdifidbtion</b>
 * for morf informbtion.
 *
 * @buthor      Arthur vbn Hoff
 * @buthor      Sbmi Shbio
 */
publid bbstrbdt dlbss Componfnt implfmfnts ImbgfObsfrvfr, MfnuContbinfr,
                                           Sfriblizbblf
{

    privbtf stbtid finbl PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("jbvb.bwt.Componfnt");
    privbtf stbtid finbl PlbtformLoggfr fvfntLog = PlbtformLoggfr.gftLoggfr("jbvb.bwt.fvfnt.Componfnt");
    privbtf stbtid finbl PlbtformLoggfr fodusLog = PlbtformLoggfr.gftLoggfr("jbvb.bwt.fodus.Componfnt");
    privbtf stbtid finbl PlbtformLoggfr mixingLog = PlbtformLoggfr.gftLoggfr("jbvb.bwt.mixing.Componfnt");

    /**
     * Thf pffr of thf domponfnt. Thf pffr implfmfnts thf domponfnt's
     * bfhbvior. Thf pffr is sft whfn thf <dodf>Componfnt</dodf> is
     * bddfd to b dontbinfr thbt blso is b pffr.
     * @sff #bddNotify
     * @sff #rfmovfNotify
     */
    trbnsifnt ComponfntPffr pffr;

    /**
     * Thf pbrfnt of thf objfdt. It mby bf <dodf>null</dodf>
     * for top-lfvfl domponfnts.
     * @sff #gftPbrfnt
     */
    trbnsifnt Contbinfr pbrfnt;

    /**
     * Thf <dodf>AppContfxt</dodf> of thf domponfnt. Applfts/Plugin mby
     * dhbngf thf AppContfxt.
     */
    trbnsifnt AppContfxt bppContfxt;

    /**
     * Thf x position of thf domponfnt in thf pbrfnt's doordinbtf systfm.
     *
     * @sfribl
     * @sff #gftLodbtion
     */
    int x;

    /**
     * Thf y position of thf domponfnt in thf pbrfnt's doordinbtf systfm.
     *
     * @sfribl
     * @sff #gftLodbtion
     */
    int y;

    /**
     * Thf width of thf domponfnt.
     *
     * @sfribl
     * @sff #gftSizf
     */
    int width;

    /**
     * Thf hfight of thf domponfnt.
     *
     * @sfribl
     * @sff #gftSizf
     */
    int hfight;

    /**
     * Thf forfground dolor for this domponfnt.
     * <dodf>forfground</dodf> dbn bf <dodf>null</dodf>.
     *
     * @sfribl
     * @sff #gftForfground
     * @sff #sftForfground
     */
    Color       forfground;

    /**
     * Thf bbdkground dolor for this domponfnt.
     * <dodf>bbdkground</dodf> dbn bf <dodf>null</dodf>.
     *
     * @sfribl
     * @sff #gftBbdkground
     * @sff #sftBbdkground
     */
    Color       bbdkground;

    /**
     * Thf font usfd by this domponfnt.
     * Thf <dodf>font</dodf> dbn bf <dodf>null</dodf>.
     *
     * @sfribl
     * @sff #gftFont
     * @sff #sftFont
     */
    volbtilf Font font;

    /**
     * Thf font whidh thf pffr is durrfntly using.
     * (<dodf>null</dodf> if no pffr fxists.)
     */
    Font        pffrFont;

    /**
     * Thf dursor displbyfd whfn pointfr is ovfr this domponfnt.
     * This vbluf dbn bf <dodf>null</dodf>.
     *
     * @sfribl
     * @sff #gftCursor
     * @sff #sftCursor
     */
    Cursor      dursor;

    /**
     * Thf lodblf for thf domponfnt.
     *
     * @sfribl
     * @sff #gftLodblf
     * @sff #sftLodblf
     */
    Lodblf      lodblf;

    /**
     * A rfffrfndf to b <dodf>GrbphidsConfigurbtion</dodf> objfdt
     * usfd to dfsdribf thf dhbrbdtfristids of b grbphids
     * dfstinbtion.
     * This vbluf dbn bf <dodf>null</dodf>.
     *
     * @sindf 1.3
     * @sfribl
     * @sff GrbphidsConfigurbtion
     * @sff #gftGrbphidsConfigurbtion
     */
    privbtf trbnsifnt GrbphidsConfigurbtion grbphidsConfig = null;

    /**
     * A rfffrfndf to b <dodf>BufffrStrbtfgy</dodf> objfdt
     * usfd to mbnipulbtf thf bufffrs on this domponfnt.
     *
     * @sindf 1.4
     * @sff jbvb.bwt.imbgf.BufffrStrbtfgy
     * @sff #gftBufffrStrbtfgy()
     */
    trbnsifnt BufffrStrbtfgy bufffrStrbtfgy = null;

    /**
     * Truf whfn thf objfdt should ignorf bll rfpbint fvfnts.
     *
     * @sindf 1.4
     * @sfribl
     * @sff #sftIgnorfRfpbint
     * @sff #gftIgnorfRfpbint
     */
    boolfbn ignorfRfpbint = fblsf;

    /**
     * Truf whfn thf objfdt is visiblf. An objfdt thbt is not
     * visiblf is not drbwn on thf sdrffn.
     *
     * @sfribl
     * @sff #isVisiblf
     * @sff #sftVisiblf
     */
    boolfbn visiblf = truf;

    /**
     * Truf whfn thf objfdt is fnbblfd. An objfdt thbt is not
     * fnbblfd dofs not intfrbdt with thf usfr.
     *
     * @sfribl
     * @sff #isEnbblfd
     * @sff #sftEnbblfd
     */
    boolfbn fnbblfd = truf;

    /**
     * Truf whfn thf objfdt is vblid. An invblid objfdt nffds to
     * bf lbyfd out. This flbg is sft to fblsf whfn thf objfdt
     * sizf is dhbngfd.
     *
     * @sfribl
     * @sff #isVblid
     * @sff #vblidbtf
     * @sff #invblidbtf
     */
    privbtf volbtilf boolfbn vblid = fblsf;

    /**
     * Thf <dodf>DropTbrgft</dodf> bssodibtfd with this domponfnt.
     *
     * @sindf 1.2
     * @sfribl
     * @sff #sftDropTbrgft
     * @sff #gftDropTbrgft
     */
    DropTbrgft dropTbrgft;

    /**
     * @sfribl
     * @sff #bdd
     */
    Vfdtor<PopupMfnu> popups;

    /**
     * A domponfnt's nbmf.
     * This fifld dbn bf <dodf>null</dodf>.
     *
     * @sfribl
     * @sff #gftNbmf
     * @sff #sftNbmf(String)
     */
    privbtf String nbmf;

    /**
     * A bool to dftfrminf whfthfr thf nbmf hbs
     * bffn sft fxpliditly. <dodf>nbmfExpliditlySft</dodf> will
     * bf fblsf if thf nbmf hbs not bffn sft bnd
     * truf if it hbs.
     *
     * @sfribl
     * @sff #gftNbmf
     * @sff #sftNbmf(String)
     */
    privbtf boolfbn nbmfExpliditlySft = fblsf;

    /**
     * Indidbtfs whfthfr this Componfnt dbn bf fodusfd.
     *
     * @sfribl
     * @sff #sftFodusbblf
     * @sff #isFodusbblf
     * @sindf 1.4
     */
    privbtf boolfbn fodusbblf = truf;

    privbtf stbtid finbl int FOCUS_TRAVERSABLE_UNKNOWN = 0;
    privbtf stbtid finbl int FOCUS_TRAVERSABLE_DEFAULT = 1;
    privbtf stbtid finbl int FOCUS_TRAVERSABLE_SET = 2;

    /**
     * Trbdks whfthfr this Componfnt is rflying on dffbult fodus trbvfsbbility.
     *
     * @sfribl
     * @sindf 1.4
     */
    privbtf int isFodusTrbvfrsbblfOvfrriddfn = FOCUS_TRAVERSABLE_UNKNOWN;

    /**
     * Thf fodus trbvfrsbl kfys. Thfsf kfys will gfnfrbtf fodus trbvfrsbl
     * bfhbvior for Componfnts for whidh fodus trbvfrsbl kfys brf fnbblfd. If b
     * vbluf of null is spfdififd for b trbvfrsbl kfy, this Componfnt inhfrits
     * thbt trbvfrsbl kfy from its pbrfnt. If bll bndfstors of this Componfnt
     * hbvf null spfdififd for thbt trbvfrsbl kfy, thfn thf durrfnt
     * KfybobrdFodusMbnbgfr's dffbult trbvfrsbl kfy is usfd.
     *
     * @sfribl
     * @sff #sftFodusTrbvfrsblKfys
     * @sff #gftFodusTrbvfrsblKfys
     * @sindf 1.4
     */
    Sft<AWTKfyStrokf>[] fodusTrbvfrsblKfys;

    privbtf stbtid finbl String[] fodusTrbvfrsblKfyPropfrtyNbmfs = {
        "forwbrdFodusTrbvfrsblKfys",
        "bbdkwbrdFodusTrbvfrsblKfys",
        "upCydlfFodusTrbvfrsblKfys",
        "downCydlfFodusTrbvfrsblKfys"
    };

    /**
     * Indidbtfs whfthfr fodus trbvfrsbl kfys brf fnbblfd for this Componfnt.
     * Componfnts for whidh fodus trbvfrsbl kfys brf disbblfd rfdfivf kfy
     * fvfnts for fodus trbvfrsbl kfys. Componfnts for whidh fodus trbvfrsbl
     * kfys brf fnbblfd do not sff thfsf fvfnts; instfbd, thf fvfnts brf
     * butombtidblly donvfrtfd to trbvfrsbl opfrbtions.
     *
     * @sfribl
     * @sff #sftFodusTrbvfrsblKfysEnbblfd
     * @sff #gftFodusTrbvfrsblKfysEnbblfd
     * @sindf 1.4
     */
    privbtf boolfbn fodusTrbvfrsblKfysEnbblfd = truf;

    /**
     * Thf lodking objfdt for AWT domponfnt-trff bnd lbyout opfrbtions.
     *
     * @sff #gftTrffLodk
     */
    stbtid finbl Objfdt LOCK = nfw AWTTrffLodk();
    stbtid dlbss AWTTrffLodk {}

    /*
     * Thf domponfnt's AddfssControlContfxt.
     */
    privbtf trbnsifnt volbtilf AddfssControlContfxt bdd =
        AddfssControllfr.gftContfxt();

    /**
     * Minimum sizf.
     * (This fifld pfrhbps should hbvf bffn trbnsifnt).
     *
     * @sfribl
     */
    Dimfnsion minSizf;

    /**
     * Whfthfr or not sftMinimumSizf hbs bffn invokfd with b non-null vbluf.
     */
    boolfbn minSizfSft;

    /**
     * Prfffrrfd sizf.
     * (This fifld pfrhbps should hbvf bffn trbnsifnt).
     *
     * @sfribl
     */
    Dimfnsion prffSizf;

    /**
     * Whfthfr or not sftPrfffrrfdSizf hbs bffn invokfd with b non-null vbluf.
     */
    boolfbn prffSizfSft;

    /**
     * Mbximum sizf
     *
     * @sfribl
     */
    Dimfnsion mbxSizf;

    /**
     * Whfthfr or not sftMbximumSizf hbs bffn invokfd with b non-null vbluf.
     */
    boolfbn mbxSizfSft;

    /**
     * Thf orifntbtion for this domponfnt.
     * @sff #gftComponfntOrifntbtion
     * @sff #sftComponfntOrifntbtion
     */
    trbnsifnt ComponfntOrifntbtion domponfntOrifntbtion
    = ComponfntOrifntbtion.UNKNOWN;

    /**
     * <dodf>nfwEvfntsOnly</dodf> will bf truf if thf fvfnt is
     * onf of thf fvfnt typfs fnbblfd for thf domponfnt.
     * It will thfn bllow for normbl prodfssing to
     * dontinuf.  If it is fblsf thf fvfnt is pbssfd
     * to thf domponfnt's pbrfnt bnd up thf bndfstor
     * trff until thf fvfnt hbs bffn donsumfd.
     *
     * @sfribl
     * @sff #dispbtdhEvfnt
     */
    boolfbn nfwEvfntsOnly = fblsf;
    trbnsifnt ComponfntListfnfr domponfntListfnfr;
    trbnsifnt FodusListfnfr fodusListfnfr;
    trbnsifnt HifrbrdhyListfnfr hifrbrdhyListfnfr;
    trbnsifnt HifrbrdhyBoundsListfnfr hifrbrdhyBoundsListfnfr;
    trbnsifnt KfyListfnfr kfyListfnfr;
    trbnsifnt MousfListfnfr mousfListfnfr;
    trbnsifnt MousfMotionListfnfr mousfMotionListfnfr;
    trbnsifnt MousfWhfflListfnfr mousfWhfflListfnfr;
    trbnsifnt InputMfthodListfnfr inputMfthodListfnfr;

    /** Intfrnbl, donstbnts for sfriblizbtion */
    finbl stbtid String bdtionListfnfrK = "bdtionL";
    finbl stbtid String bdjustmfntListfnfrK = "bdjustmfntL";
    finbl stbtid String domponfntListfnfrK = "domponfntL";
    finbl stbtid String dontbinfrListfnfrK = "dontbinfrL";
    finbl stbtid String fodusListfnfrK = "fodusL";
    finbl stbtid String itfmListfnfrK = "itfmL";
    finbl stbtid String kfyListfnfrK = "kfyL";
    finbl stbtid String mousfListfnfrK = "mousfL";
    finbl stbtid String mousfMotionListfnfrK = "mousfMotionL";
    finbl stbtid String mousfWhfflListfnfrK = "mousfWhfflL";
    finbl stbtid String tfxtListfnfrK = "tfxtL";
    finbl stbtid String ownfdWindowK = "ownfdL";
    finbl stbtid String windowListfnfrK = "windowL";
    finbl stbtid String inputMfthodListfnfrK = "inputMfthodL";
    finbl stbtid String hifrbrdhyListfnfrK = "hifrbrdhyL";
    finbl stbtid String hifrbrdhyBoundsListfnfrK = "hifrbrdhyBoundsL";
    finbl stbtid String windowStbtfListfnfrK = "windowStbtfL";
    finbl stbtid String windowFodusListfnfrK = "windowFodusL";

    /**
     * Thf <dodf>fvfntMbsk</dodf> is ONLY sft by subdlbssfs vib
     * <dodf>fnbblfEvfnts</dodf>.
     * Thf mbsk should NOT bf sft whfn listfnfrs brf rfgistfrfd
     * so thbt wf dbn distinguish thf difffrfndf bftwffn whfn
     * listfnfrs rfqufst fvfnts bnd subdlbssfs rfqufst thfm.
     * Onf bit is usfd to indidbtf whfthfr input mfthods brf
     * fnbblfd; this bit is sft by <dodf>fnbblfInputMfthods</dodf> bnd is
     * on by dffbult.
     *
     * @sfribl
     * @sff #fnbblfInputMfthods
     * @sff AWTEvfnt
     */
    long fvfntMbsk = AWTEvfnt.INPUT_METHODS_ENABLED_MASK;

    /**
     * Stbtid propfrtifs for indrfmfntbl drbwing.
     * @sff #imbgfUpdbtf
     */
    stbtid boolfbn isInd;
    stbtid int indRbtf;
    stbtid {
        /* fnsurf thbt thf nfdfssbry nbtivf librbrifs brf lobdfd */
        Toolkit.lobdLibrbrifs();
        /* initiblizf JNI fifld bnd mfthod ids */
        if (!GrbphidsEnvironmfnt.isHfbdlfss()) {
            initIDs();
        }

        String s = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                                                               nfw GftPropfrtyAdtion("bwt.imbgf.indrfmfntbldrbw"));
        isInd = (s == null || s.fqubls("truf"));

        s = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                                                        nfw GftPropfrtyAdtion("bwt.imbgf.rfdrbwrbtf"));
        indRbtf = (s != null) ? Intfgfr.pbrsfInt(s) : 100;
    }

    /**
     * Ebsf-of-usf donstbnt for <dodf>gftAlignmfntY()</dodf>.
     * Spfdififs bn blignmfnt to thf top of thf domponfnt.
     * @sff     #gftAlignmfntY
     */
    publid stbtid finbl flobt TOP_ALIGNMENT = 0.0f;

    /**
     * Ebsf-of-usf donstbnt for <dodf>gftAlignmfntY</dodf> bnd
     * <dodf>gftAlignmfntX</dodf>. Spfdififs bn blignmfnt to
     * thf dfntfr of thf domponfnt
     * @sff     #gftAlignmfntX
     * @sff     #gftAlignmfntY
     */
    publid stbtid finbl flobt CENTER_ALIGNMENT = 0.5f;

    /**
     * Ebsf-of-usf donstbnt for <dodf>gftAlignmfntY</dodf>.
     * Spfdififs bn blignmfnt to thf bottom of thf domponfnt.
     * @sff     #gftAlignmfntY
     */
    publid stbtid finbl flobt BOTTOM_ALIGNMENT = 1.0f;

    /**
     * Ebsf-of-usf donstbnt for <dodf>gftAlignmfntX</dodf>.
     * Spfdififs bn blignmfnt to thf lfft sidf of thf domponfnt.
     * @sff     #gftAlignmfntX
     */
    publid stbtid finbl flobt LEFT_ALIGNMENT = 0.0f;

    /**
     * Ebsf-of-usf donstbnt for <dodf>gftAlignmfntX</dodf>.
     * Spfdififs bn blignmfnt to thf right sidf of thf domponfnt.
     * @sff     #gftAlignmfntX
     */
    publid stbtid finbl flobt RIGHT_ALIGNMENT = 1.0f;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -7644114512714619750L;

    /**
     * If bny <dodf>PropfrtyChbngfListfnfrs</dodf> hbvf bffn rfgistfrfd,
     * thf <dodf>dhbngfSupport</dodf> fifld dfsdribfs thfm.
     *
     * @sfribl
     * @sindf 1.2
     * @sff #bddPropfrtyChbngfListfnfr
     * @sff #rfmovfPropfrtyChbngfListfnfr
     * @sff #firfPropfrtyChbngf
     */
    privbtf PropfrtyChbngfSupport dhbngfSupport;

    /*
     * In somf dbsfs using "this" bs bn objfdt to syndhronizf by
     * dbn lfbd to b dfbdlodk if dlifnt dodf blso usfs syndhronizbtion
     * by b domponfnt objfdt. For fvfry sudh situbtion rfvfblfd wf should
     * donsidfr possibility of rfplbding "this" with thf pbdkbgf privbtf
     * objfdtLodk objfdt introdudfd bflow. So fbr thfrf'rf 3 issufs known:
     * - CR 6708322 (thf gftNbmf/sftNbmf mfthods);
     * - CR 6608764 (thf PropfrtyChbngfListfnfr mbdhinfry);
     * - CR 7108598 (thf Contbinfr.pbint/KfybobrdFodusMbnbgfr.dlfbrMostRfdfntFodusOwnfr mfthods).
     *
     * Notf: this fifld is donsidfrfd finbl, though rfbdObjfdt() prohibits
     * initiblizing finbl fiflds.
     */
    privbtf trbnsifnt Objfdt objfdtLodk = nfw Objfdt();
    Objfdt gftObjfdtLodk() {
        rfturn objfdtLodk;
    }

    /*
     * Rfturns thf bdd this domponfnt wbs donstrudtfd with.
     */
    finbl AddfssControlContfxt gftAddfssControlContfxt() {
        if (bdd == null) {
            throw nfw SfdurityExdfption("Componfnt is missing AddfssControlContfxt");
        }
        rfturn bdd;
    }

    boolfbn isPbdkfd = fblsf;

    /**
     * Psfudopbrbmftfr for dirfdt Gfomftry API (sftLodbtion, sftBounds sftSizf
     * to signbl sftBounds whbt's dhbnging. Should bf usfd undfr TrffLodk.
     * This is only nffdfd duf to thf inbbility to dhbngf thf dross-dblling
     * ordfr of publid bnd dfprfdbtfd mfthods.
     */
    privbtf int boundsOp = ComponfntPffr.DEFAULT_OPERATION;

    /**
     * Enumfrbtion of thf dommon wbys thf bbsflinf of b domponfnt dbn
     * dhbngf bs thf sizf dhbngfs.  Thf bbsflinf rfsizf bfhbvior is
     * primbrily for lbyout mbnbgfrs thbt nffd to know how thf
     * position of thf bbsflinf dhbngfs bs thf domponfnt sizf dhbngfs.
     * In gfnfrbl thf bbsflinf rfsizf bfhbvior will bf vblid for sizfs
     * grfbtfr thbn or fqubl to thf minimum sizf (thf bdtubl minimum
     * sizf; not b dfvflopfr spfdififd minimum sizf).  For sizfs
     * smbllfr thbn thf minimum sizf thf bbsflinf mby dhbngf in b wby
     * othfr thbn thf bbsflinf rfsizf bfhbvior indidbtfs.  Similbrly,
     * bs thf sizf bpprobdhfs <dodf>Intfgfr.MAX_VALUE</dodf> bnd/or
     * <dodf>Short.MAX_VALUE</dodf> thf bbsflinf mby dhbngf in b wby
     * othfr thbn thf bbsflinf rfsizf bfhbvior indidbtfs.
     *
     * @sff #gftBbsflinfRfsizfBfhbvior
     * @sff #gftBbsflinf(int,int)
     * @sindf 1.6
     */
    publid fnum BbsflinfRfsizfBfhbvior {
        /**
         * Indidbtfs thf bbsflinf rfmbins fixfd rflbtivf to thf
         * y-origin.  Thbt is, <dodf>gftBbsflinf</dodf> rfturns
         * thf sbmf vbluf rfgbrdlfss of thf hfight or width.  For fxbmplf, b
         * <dodf>JLbbfl</dodf> dontbining non-fmpty tfxt with b
         * vfrtidbl blignmfnt of <dodf>TOP</dodf> should hbvf b
         * bbsflinf typf of <dodf>CONSTANT_ASCENT</dodf>.
         */
        CONSTANT_ASCENT,

        /**
         * Indidbtfs thf bbsflinf rfmbins fixfd rflbtivf to thf hfight
         * bnd dofs not dhbngf bs thf width is vbrifd.  Thbt is, for
         * bny hfight H thf difffrfndf bftwffn H bnd
         * <dodf>gftBbsflinf(w, H)</dodf> is thf sbmf.  For fxbmplf, b
         * <dodf>JLbbfl</dodf> dontbining non-fmpty tfxt with b
         * vfrtidbl blignmfnt of <dodf>BOTTOM</dodf> should hbvf b
         * bbsflinf typf of <dodf>CONSTANT_DESCENT</dodf>.
         */
        CONSTANT_DESCENT,

        /**
         * Indidbtfs thf bbsflinf rfmbins b fixfd distbndf from
         * thf dfntfr of thf domponfnt.  Thbt is, for bny hfight H thf
         * difffrfndf bftwffn <dodf>gftBbsflinf(w, H)</dodf> bnd
         * <dodf>H / 2</dodf> is thf sbmf (plus or minus onf dfpfnding upon
         * rounding frror).
         * <p>
         * Bfdbusf of possiblf rounding frrors it is rfdommfndfd
         * you bsk for thf bbsflinf with two donsfdutivf hfights bnd usf
         * thf rfturn vbluf to dftfrminf if you nffd to pbd dbldulbtions
         * by 1.  Thf following shows how to dbldulbtf thf bbsflinf for
         * bny hfight:
         * <prf>
         *   Dimfnsion prfffrrfdSizf = domponfnt.gftPrfffrrfdSizf();
         *   int bbsflinf = gftBbsflinf(prfffrrfdSizf.width,
         *                              prfffrrfdSizf.hfight);
         *   int nfxtBbsflinf = gftBbsflinf(prfffrrfdSizf.width,
         *                                  prfffrrfdSizf.hfight + 1);
         *   // Amount to bdd to hfight whfn dbldulbting whfrf bbsflinf
         *   // lbnds for b pbrtidulbr hfight:
         *   int pbdding = 0;
         *   // Whfrf thf bbsflinf is rflbtivf to thf mid point
         *   int bbsflinfOffsft = bbsflinf - hfight / 2;
         *   if (prfffrrfdSizf.hfight % 2 == 0 &bmp;&bmp;
         *       bbsflinf != nfxtBbsflinf) {
         *       pbdding = 1;
         *   }
         *   flsf if (prfffrrfdSizf.hfight % 2 == 1 &bmp;&bmp;
         *            bbsflinf == nfxtBbsflinf) {
         *       bbsflinfOffsft--;
         *       pbdding = 1;
         *   }
         *   // Thf following dbldulbtfs whfrf thf bbsflinf lbnds for
         *   // thf hfight z:
         *   int dbldulbtfdBbsflinf = (z + pbdding) / 2 + bbsflinfOffsft;
         * </prf>
         */
        CENTER_OFFSET,

        /**
         * Indidbtfs thf bbsflinf rfsizf bfhbvior dbn not bf fxprfssfd using
         * bny of thf othfr donstbnts.  This mby blso indidbtf thf bbsflinf
         * vbrifs with thf width of thf domponfnt.  This is blso rfturnfd
         * by domponfnts thbt do not hbvf b bbsflinf.
         */
        OTHER
    }

    /*
     * Thf shbpf sft with thf bpplyCompoundShbpf() mfthod. It undludfs thf rfsult
     * of thf HW/LW mixing rflbtfd shbpf domputbtion. It mby blso indludf
     * thf usfr-spfdififd shbpf of thf domponfnt.
     * Thf 'null' vbluf mfbns thf domponfnt hbs normbl shbpf (or hbs no shbpf bt bll)
     * bnd bpplyCompoundShbpf() will skip thf following shbpf idfntidbl to normbl.
     */
    privbtf trbnsifnt Rfgion dompoundShbpf = null;

    /*
     * Rfprfsfnts thf shbpf of this lightwfight domponfnt to bf dut out from
     * hfbvywfight domponfnts should thfy intfrsfdt. Possiblf vblufs:
     *    1. null - donsidfr thf shbpf rfdtbngulbr
     *    2. EMPTY_REGION - nothing gfts dut out (dhildrfn still gft dut out)
     *    3. non-fmpty - this shbpf gfts dut out.
     */
    privbtf trbnsifnt Rfgion mixingCutoutRfgion = null;

    /*
     * Indidbtfs whfthfr bddNotify() is domplftf
     * (i.f. thf pffr is drfbtfd).
     */
    privbtf trbnsifnt boolfbn isAddNotifyComplftf = fblsf;

    /**
     * Should only bf usfd in subdlbss gftBounds to dhfdk thbt pbrt of bounds
     * is bdtubly dhbnging
     */
    int gftBoundsOp() {
        bssfrt Thrfbd.holdsLodk(gftTrffLodk());
        rfturn boundsOp;
    }

    void sftBoundsOp(int op) {
        bssfrt Thrfbd.holdsLodk(gftTrffLodk());
        if (op == ComponfntPffr.RESET_OPERATION) {
            boundsOp = ComponfntPffr.DEFAULT_OPERATION;
        } flsf
            if (boundsOp == ComponfntPffr.DEFAULT_OPERATION) {
                boundsOp = op;
            }
    }

    // Whfthfr this Componfnt hbs hbd thf bbdkground frbsf flbg
    // spfdififd vib SunToolkit.disbblfBbdkgroundErbsf(). This is
    // nffdfd in ordfr to mbkf this fundtion work on X11 plbtforms,
    // whfrf durrfntly thfrf is no dhbndf to intfrposf on thf drfbtion
    // of thf pffr bnd thfrfforf thf dbll to XSftBbdkground.
    trbnsifnt boolfbn bbdkgroundErbsfDisbblfd;

    stbtid {
        AWTAddfssor.sftComponfntAddfssor(nfw AWTAddfssor.ComponfntAddfssor() {
            publid void sftBbdkgroundErbsfDisbblfd(Componfnt domp, boolfbn disbblfd) {
                domp.bbdkgroundErbsfDisbblfd = disbblfd;
            }
            publid boolfbn gftBbdkgroundErbsfDisbblfd(Componfnt domp) {
                rfturn domp.bbdkgroundErbsfDisbblfd;
            }
            publid Rfdtbnglf gftBounds(Componfnt domp) {
                rfturn nfw Rfdtbnglf(domp.x, domp.y, domp.width, domp.hfight);
            }
            publid void sftMixingCutoutShbpf(Componfnt domp, Shbpf shbpf) {
                Rfgion rfgion = shbpf == null ?  null :
                    Rfgion.gftInstbndf(shbpf, null);

                syndhronizfd (domp.gftTrffLodk()) {
                    boolfbn nffdShowing = fblsf;
                    boolfbn nffdHiding = fblsf;

                    if (!domp.isNonOpbqufForMixing()) {
                        nffdHiding = truf;
                    }

                    domp.mixingCutoutRfgion = rfgion;

                    if (!domp.isNonOpbqufForMixing()) {
                        nffdShowing = truf;
                    }

                    if (domp.isMixingNffdfd()) {
                        if (nffdHiding) {
                            domp.mixOnHiding(domp.isLightwfight());
                        }
                        if (nffdShowing) {
                            domp.mixOnShowing();
                        }
                    }
                }
            }

            publid void sftGrbphidsConfigurbtion(Componfnt domp,
                    GrbphidsConfigurbtion gd)
            {
                domp.sftGrbphidsConfigurbtion(gd);
            }
            publid boolfbn rfqufstFodus(Componfnt domp, CbusfdFodusEvfnt.Cbusf dbusf) {
                rfturn domp.rfqufstFodus(dbusf);
            }
            publid boolfbn dbnBfFodusOwnfr(Componfnt domp) {
                rfturn domp.dbnBfFodusOwnfr();
            }

            publid boolfbn isVisiblf(Componfnt domp) {
                rfturn domp.isVisiblf_NoClifntCodf();
            }
            publid void sftRfqufstFodusControllfr
                (RfqufstFodusControllfr rfqufstControllfr)
            {
                 Componfnt.sftRfqufstFodusControllfr(rfqufstControllfr);
            }
            publid AppContfxt gftAppContfxt(Componfnt domp) {
                 rfturn domp.bppContfxt;
            }
            publid void sftAppContfxt(Componfnt domp, AppContfxt bppContfxt) {
                 domp.bppContfxt = bppContfxt;
            }
            publid Contbinfr gftPbrfnt(Componfnt domp) {
                rfturn domp.gftPbrfnt_NoClifntCodf();
            }
            publid void sftPbrfnt(Componfnt domp, Contbinfr pbrfnt) {
                domp.pbrfnt = pbrfnt;
            }
            publid void sftSizf(Componfnt domp, int width, int hfight) {
                domp.width = width;
                domp.hfight = hfight;
            }
            publid Point gftLodbtion(Componfnt domp) {
                rfturn domp.lodbtion_NoClifntCodf();
            }
            publid void sftLodbtion(Componfnt domp, int x, int y) {
                domp.x = x;
                domp.y = y;
            }
            publid boolfbn isEnbblfd(Componfnt domp) {
                rfturn domp.isEnbblfdImpl();
            }
            publid boolfbn isDisplbybblf(Componfnt domp) {
                rfturn domp.pffr != null;
            }
            publid Cursor gftCursor(Componfnt domp) {
                rfturn domp.gftCursor_NoClifntCodf();
            }
            publid ComponfntPffr gftPffr(Componfnt domp) {
                rfturn domp.pffr;
            }
            publid void sftPffr(Componfnt domp, ComponfntPffr pffr) {
                domp.pffr = pffr;
            }
            publid boolfbn isLightwfight(Componfnt domp) {
                rfturn (domp.pffr instbndfof LightwfightPffr);
            }
            publid boolfbn gftIgnorfRfpbint(Componfnt domp) {
                rfturn domp.ignorfRfpbint;
            }
            publid int gftWidth(Componfnt domp) {
                rfturn domp.width;
            }
            publid int gftHfight(Componfnt domp) {
                rfturn domp.hfight;
            }
            publid int gftX(Componfnt domp) {
                rfturn domp.x;
            }
            publid int gftY(Componfnt domp) {
                rfturn domp.y;
            }
            publid Color gftForfground(Componfnt domp) {
                rfturn domp.forfground;
            }
            publid Color gftBbdkground(Componfnt domp) {
                rfturn domp.bbdkground;
            }
            publid void sftBbdkground(Componfnt domp, Color bbdkground) {
                domp.bbdkground = bbdkground;
            }
            publid Font gftFont(Componfnt domp) {
                rfturn domp.gftFont_NoClifntCodf();
            }
            publid void prodfssEvfnt(Componfnt domp, AWTEvfnt f) {
                domp.prodfssEvfnt(f);
            }

            publid AddfssControlContfxt gftAddfssControlContfxt(Componfnt domp) {
                rfturn domp.gftAddfssControlContfxt();
            }

            publid void rfvblidbtfSyndhronously(Componfnt domp) {
                domp.rfvblidbtfSyndhronously();
            }

            @Ovfrridf
            publid void drfbtfBufffrStrbtfgy(Componfnt domp, int numBufffrs,
                    BufffrCbpbbilitifs dbps) throws AWTExdfption {
                domp.drfbtfBufffrStrbtfgy(numBufffrs, dbps);
            }

            @Ovfrridf
            publid BufffrStrbtfgy gftBufffrStrbtfgy(Componfnt domp) {
                rfturn domp.gftBufffrStrbtfgy();
            }
        });
    }

    /**
     * Construdts b nfw domponfnt. Clbss <dodf>Componfnt</dodf> dbn bf
     * fxtfndfd dirfdtly to drfbtf b lightwfight domponfnt thbt dofs not
     * utilizf bn opbquf nbtivf window. A lightwfight domponfnt must bf
     * hostfd by b nbtivf dontbinfr somfwhfrf highfr up in thf domponfnt
     * trff (for fxbmplf, by b <dodf>Frbmf</dodf> objfdt).
     */
    protfdtfd Componfnt() {
        bppContfxt = AppContfxt.gftAppContfxt();
    }

    @SupprfssWbrnings({"rbwtypfs", "undhfdkfd"})
    void initiblizfFodusTrbvfrsblKfys() {
        fodusTrbvfrsblKfys = nfw Sft[3];
    }

    /**
     * Construdts b nbmf for this domponfnt.  Cbllfd by <dodf>gftNbmf</dodf>
     * whfn thf nbmf is <dodf>null</dodf>.
     */
    String donstrudtComponfntNbmf() {
        rfturn null; // For stridt domplibndf with prior plbtform vfrsions, b Componfnt
                     // thbt dofsn't sft its nbmf should rfturn null from
                     // gftNbmf()
    }

    /**
     * Gfts thf nbmf of thf domponfnt.
     * @rfturn this domponfnt's nbmf
     * @sff    #sftNbmf
     * @sindf 1.1
     */
    publid String gftNbmf() {
        if (nbmf == null && !nbmfExpliditlySft) {
            syndhronizfd(gftObjfdtLodk()) {
                if (nbmf == null && !nbmfExpliditlySft)
                    nbmf = donstrudtComponfntNbmf();
            }
        }
        rfturn nbmf;
    }

    /**
     * Sfts thf nbmf of thf domponfnt to thf spfdififd string.
     * @pbrbm nbmf  thf string thbt is to bf this
     *           domponfnt's nbmf
     * @sff #gftNbmf
     * @sindf 1.1
     */
    publid void sftNbmf(String nbmf) {
        String oldNbmf;
        syndhronizfd(gftObjfdtLodk()) {
            oldNbmf = this.nbmf;
            this.nbmf = nbmf;
            nbmfExpliditlySft = truf;
        }
        firfPropfrtyChbngf("nbmf", oldNbmf, nbmf);
    }

    /**
     * Gfts thf pbrfnt of this domponfnt.
     * @rfturn thf pbrfnt dontbinfr of this domponfnt
     * @sindf 1.0
     */
    publid Contbinfr gftPbrfnt() {
        rfturn gftPbrfnt_NoClifntCodf();
    }

    // NOTE: This mfthod mby bf dbllfd by privilfgfd thrfbds.
    //       This fundtionblity is implfmfntfd in b pbdkbgf-privbtf mfthod
    //       to insurf thbt it dbnnot bf ovfrriddfn by dlifnt subdlbssfs.
    //       DO NOT INVOKE CLIENT CODE ON THIS THREAD!
    finbl Contbinfr gftPbrfnt_NoClifntCodf() {
        rfturn pbrfnt;
    }

    // This mfthod is ovfrriddfn in thf Window dlbss to rfturn null,
    //    bfdbusf thf pbrfnt fifld of thf Window objfdt dontbins
    //    thf ownfr of thf window, not its pbrfnt.
    Contbinfr gftContbinfr() {
        rfturn gftPbrfnt_NoClifntCodf();
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * progrbms should not dirfdtly mbnipulbtf pffrs;
     * rfplbdfd by <dodf>boolfbn isDisplbybblf()</dodf>.
     * @rfturn thf pffr for this domponfnt
     */
    @Dfprfdbtfd
    publid ComponfntPffr gftPffr() {
        rfturn pffr;
    }

    /**
     * Assodibtf b <dodf>DropTbrgft</dodf> with this domponfnt.
     * Thf <dodf>Componfnt</dodf> will rfdfivf drops only if it
     * is fnbblfd.
     *
     * @sff #isEnbblfd
     * @pbrbm dt Thf DropTbrgft
     */

    publid syndhronizfd void sftDropTbrgft(DropTbrgft dt) {
        if (dt == dropTbrgft || (dropTbrgft != null && dropTbrgft.fqubls(dt)))
            rfturn;

        DropTbrgft old;

        if ((old = dropTbrgft) != null) {
            if (pffr != null) dropTbrgft.rfmovfNotify(pffr);

            DropTbrgft t = dropTbrgft;

            dropTbrgft = null;

            try {
                t.sftComponfnt(null);
            } dbtdh (IllfgblArgumfntExdfption ibf) {
                // ignorf it.
            }
        }

        // if wf hbvf b nfw onf, bnd wf hbvf b pffr, bdd it!

        if ((dropTbrgft = dt) != null) {
            try {
                dropTbrgft.sftComponfnt(this);
                if (pffr != null) dropTbrgft.bddNotify(pffr);
            } dbtdh (IllfgblArgumfntExdfption ibf) {
                if (old != null) {
                    try {
                        old.sftComponfnt(this);
                        if (pffr != null) dropTbrgft.bddNotify(pffr);
                    } dbtdh (IllfgblArgumfntExdfption ibf1) {
                        // ignorf it!
                    }
                }
            }
        }
    }

    /**
     * Gfts thf <dodf>DropTbrgft</dodf> bssodibtfd with this
     * <dodf>Componfnt</dodf>.
     *
     * @rfturn thf drop tbrgft
     */

    publid syndhronizfd DropTbrgft gftDropTbrgft() { rfturn dropTbrgft; }

    /**
     * Gfts thf <dodf>GrbphidsConfigurbtion</dodf> bssodibtfd with this
     * <dodf>Componfnt</dodf>.
     * If thf <dodf>Componfnt</dodf> hbs not bffn bssignfd b spfdifid
     * <dodf>GrbphidsConfigurbtion</dodf>,
     * thf <dodf>GrbphidsConfigurbtion</dodf> of thf
     * <dodf>Componfnt</dodf> objfdt's top-lfvfl dontbinfr is
     * rfturnfd.
     * If thf <dodf>Componfnt</dodf> hbs bffn drfbtfd, but not yft bddfd
     * to b <dodf>Contbinfr</dodf>, this mfthod rfturns <dodf>null</dodf>.
     *
     * @rfturn thf <dodf>GrbphidsConfigurbtion</dodf> usfd by this
     *          <dodf>Componfnt</dodf> or <dodf>null</dodf>
     * @sindf 1.3
     */
    publid GrbphidsConfigurbtion gftGrbphidsConfigurbtion() {
        syndhronizfd(gftTrffLodk()) {
            rfturn gftGrbphidsConfigurbtion_NoClifntCodf();
        }
    }

    finbl GrbphidsConfigurbtion gftGrbphidsConfigurbtion_NoClifntCodf() {
        rfturn grbphidsConfig;
    }

    void sftGrbphidsConfigurbtion(GrbphidsConfigurbtion gd) {
        syndhronizfd(gftTrffLodk()) {
            if (updbtfGrbphidsDbtb(gd)) {
                rfmovfNotify();
                bddNotify();
            }
        }
    }

    boolfbn updbtfGrbphidsDbtb(GrbphidsConfigurbtion gd) {
        dhfdkTrffLodk();

        if (grbphidsConfig == gd) {
            rfturn fblsf;
        }

        grbphidsConfig = gd;

        ComponfntPffr pffr = gftPffr();
        if (pffr != null) {
            rfturn pffr.updbtfGrbphidsDbtb(gd);
        }
        rfturn fblsf;
    }

    /**
     * Chfdks thbt this domponfnt's <dodf>GrbphidsDfvidf</dodf>
     * <dodf>idString</dodf> mbtdhfs thf string brgumfnt.
     */
    void dhfdkGD(String stringID) {
        if (grbphidsConfig != null) {
            if (!grbphidsConfig.gftDfvidf().gftIDstring().fqubls(stringID)) {
                throw nfw IllfgblArgumfntExdfption(
                                                   "bdding b dontbinfr to b dontbinfr on b difffrfnt GrbphidsDfvidf");
            }
        }
    }

    /**
     * Gfts this domponfnt's lodking objfdt (thf objfdt thbt owns thf thrfbd
     * syndhronizbtion monitor) for AWT domponfnt-trff bnd lbyout
     * opfrbtions.
     * @rfturn this domponfnt's lodking objfdt
     */
    publid finbl Objfdt gftTrffLodk() {
        rfturn LOCK;
    }

    finbl void dhfdkTrffLodk() {
        if (!Thrfbd.holdsLodk(gftTrffLodk())) {
            throw nfw IllfgblStbtfExdfption("This fundtion should bf dbllfd whilf holding trffLodk");
        }
    }

    /**
     * Gfts thf toolkit of this domponfnt. Notf thbt
     * thf frbmf thbt dontbins b domponfnt dontrols whidh
     * toolkit is usfd by thbt domponfnt. Thfrfforf if thf domponfnt
     * is movfd from onf frbmf to bnothfr, thf toolkit it usfs mby dhbngf.
     * @rfturn  thf toolkit of this domponfnt
     * @sindf 1.0
     */
    publid Toolkit gftToolkit() {
        rfturn gftToolkitImpl();
    }

    /*
     * This is dbllfd by thf nbtivf dodf, so dlifnt dodf dbn't
     * bf dbllfd on thf toolkit thrfbd.
     */
    finbl Toolkit gftToolkitImpl() {
        Contbinfr pbrfnt = this.pbrfnt;
        if (pbrfnt != null) {
            rfturn pbrfnt.gftToolkitImpl();
        }
        rfturn Toolkit.gftDffbultToolkit();
    }

    /**
     * Dftfrminfs whfthfr this domponfnt is vblid. A domponfnt is vblid
     * whfn it is dorrfdtly sizfd bnd positionfd within its pbrfnt
     * dontbinfr bnd bll its dhildrfn brf blso vblid.
     * In ordfr to bddount for pffrs' sizf rfquirfmfnts, domponfnts brf invblidbtfd
     * bfforf thfy brf first shown on thf sdrffn. By thf timf thf pbrfnt dontbinfr
     * is fully rfblizfd, bll its domponfnts will bf vblid.
     * @rfturn <dodf>truf</dodf> if thf domponfnt is vblid, <dodf>fblsf</dodf>
     * othfrwisf
     * @sff #vblidbtf
     * @sff #invblidbtf
     * @sindf 1.0
     */
    publid boolfbn isVblid() {
        rfturn (pffr != null) && vblid;
    }

    /**
     * Dftfrminfs whfthfr this domponfnt is displbybblf. A domponfnt is
     * displbybblf whfn it is donnfdtfd to b nbtivf sdrffn rfsourdf.
     * <p>
     * A domponfnt is mbdf displbybblf fithfr whfn it is bddfd to
     * b displbybblf dontbinmfnt hifrbrdhy or whfn its dontbinmfnt
     * hifrbrdhy is mbdf displbybblf.
     * A dontbinmfnt hifrbrdhy is mbdf displbybblf whfn its bndfstor
     * window is fithfr pbdkfd or mbdf visiblf.
     * <p>
     * A domponfnt is mbdf undisplbybblf fithfr whfn it is rfmovfd from
     * b displbybblf dontbinmfnt hifrbrdhy or whfn its dontbinmfnt hifrbrdhy
     * is mbdf undisplbybblf.  A dontbinmfnt hifrbrdhy is mbdf
     * undisplbybblf whfn its bndfstor window is disposfd.
     *
     * @rfturn <dodf>truf</dodf> if thf domponfnt is displbybblf,
     * <dodf>fblsf</dodf> othfrwisf
     * @sff Contbinfr#bdd(Componfnt)
     * @sff Window#pbdk
     * @sff Window#show
     * @sff Contbinfr#rfmovf(Componfnt)
     * @sff Window#disposf
     * @sindf 1.2
     */
    publid boolfbn isDisplbybblf() {
        rfturn gftPffr() != null;
    }

    /**
     * Dftfrminfs whfthfr this domponfnt should bf visiblf whfn its
     * pbrfnt is visiblf. Componfnts brf
     * initiblly visiblf, with thf fxdfption of top lfvfl domponfnts sudh
     * bs <dodf>Frbmf</dodf> objfdts.
     * @rfturn <dodf>truf</dodf> if thf domponfnt is visiblf,
     * <dodf>fblsf</dodf> othfrwisf
     * @sff #sftVisiblf
     * @sindf 1.0
     */
    @Trbnsifnt
    publid boolfbn isVisiblf() {
        rfturn isVisiblf_NoClifntCodf();
    }
    finbl boolfbn isVisiblf_NoClifntCodf() {
        rfturn visiblf;
    }

    /**
     * Dftfrminfs whfthfr this domponfnt will bf displbyfd on thf sdrffn.
     * @rfturn <dodf>truf</dodf> if thf domponfnt bnd bll of its bndfstors
     *          until b toplfvfl window or null pbrfnt brf visiblf,
     *          <dodf>fblsf</dodf> othfrwisf
     */
    boolfbn isRfdursivflyVisiblf() {
        rfturn visiblf && (pbrfnt == null || pbrfnt.isRfdursivflyVisiblf());
    }

    /**
     * Trbnslbtfs bbsolutf doordinbtfs into doordinbtfs in thf doordinbtf
     * spbdf of this domponfnt.
     */
    Point pointRflbtivfToComponfnt(Point bbsolutf) {
        Point dompCoords = gftLodbtionOnSdrffn();
        rfturn nfw Point(bbsolutf.x - dompCoords.x,
                         bbsolutf.y - dompCoords.y);
    }

    /**
     * Assuming thbt mousf lodbtion is storfd in PointfrInfo pbssfd
     * to this mfthod, it finds b Componfnt thbt is in thf sbmf
     * Window bs this Componfnt bnd is lodbtfd undfr thf mousf pointfr.
     * If no sudh Componfnt fxists, null is rfturnfd.
     * NOTE: this mfthod should bf dbllfd undfr thf protfdtion of
     * trff lodk, bs it is donf in Componfnt.gftMousfPosition() bnd
     * Contbinfr.gftMousfPosition(boolfbn).
     */
    Componfnt findUndfrMousfInWindow(PointfrInfo pi) {
        if (!isShowing()) {
            rfturn null;
        }
        Window win = gftContbiningWindow();
        if (!Toolkit.gftDffbultToolkit().gftMousfInfoPffr().isWindowUndfrMousf(win)) {
            rfturn null;
        }
        finbl boolfbn INCLUDE_DISABLED = truf;
        Point rflbtivfToWindow = win.pointRflbtivfToComponfnt(pi.gftLodbtion());
        Componfnt inThfSbmfWindow = win.findComponfntAt(rflbtivfToWindow.x,
                                                        rflbtivfToWindow.y,
                                                        INCLUDE_DISABLED);
        rfturn inThfSbmfWindow;
    }

    /**
     * Rfturns thf position of thf mousf pointfr in this <dodf>Componfnt</dodf>'s
     * doordinbtf spbdf if thf <dodf>Componfnt</dodf> is dirfdtly undfr thf mousf
     * pointfr, othfrwisf rfturns <dodf>null</dodf>.
     * If thf <dodf>Componfnt</dodf> is not showing on thf sdrffn, this mfthod
     * rfturns <dodf>null</dodf> fvfn if thf mousf pointfr is bbovf thf brfb
     * whfrf thf <dodf>Componfnt</dodf> would bf displbyfd.
     * If thf <dodf>Componfnt</dodf> is pbrtiblly or fully obsdurfd by othfr
     * <dodf>Componfnt</dodf>s or nbtivf windows, this mfthod rfturns b non-null
     * vbluf only if thf mousf pointfr is lodbtfd bbovf thf unobsdurfd pbrt of thf
     * <dodf>Componfnt</dodf>.
     * <p>
     * For <dodf>Contbinfr</dodf>s it rfturns b non-null vbluf if thf mousf is
     * bbovf thf <dodf>Contbinfr</dodf> itsflf or bbovf bny of its dfsdfndbnts.
     * Usf {@link Contbinfr#gftMousfPosition(boolfbn)} if you nffd to fxdludf dhildrfn.
     * <p>
     * Somftimfs thf fxbdt mousf doordinbtfs brf not importbnt, bnd thf only thing
     * thbt mbttfrs is whfthfr b spfdifid <dodf>Componfnt</dodf> is undfr thf mousf
     * pointfr. If thf rfturn vbluf of this mfthod is <dodf>null</dodf>, mousf
     * pointfr is not dirfdtly bbovf thf <dodf>Componfnt</dodf>.
     *
     * @fxdfption HfbdlfssExdfption if GrbphidsEnvironmfnt.isHfbdlfss() rfturns truf
     * @sff       #isShowing
     * @sff       Contbinfr#gftMousfPosition
     * @rfturn    mousf doordinbtfs rflbtivf to this <dodf>Componfnt</dodf>, or null
     * @sindf     1.5
     */
    publid Point gftMousfPosition() throws HfbdlfssExdfption {
        if (GrbphidsEnvironmfnt.isHfbdlfss()) {
            throw nfw HfbdlfssExdfption();
        }

        PointfrInfo pi = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                                                                     nfw jbvb.sfdurity.PrivilfgfdAdtion<PointfrInfo>() {
                                                                         publid PointfrInfo run() {
                                                                             rfturn MousfInfo.gftPointfrInfo();
                                                                         }
                                                                     }
                                                                     );

        syndhronizfd (gftTrffLodk()) {
            Componfnt inThfSbmfWindow = findUndfrMousfInWindow(pi);
            if (!isSbmfOrAndfstorOf(inThfSbmfWindow, truf)) {
                rfturn null;
            }
            rfturn pointRflbtivfToComponfnt(pi.gftLodbtion());
        }
    }

    /**
     * Ovfrriddfn in Contbinfr. Must bf dbllfd undfr TrffLodk.
     */
    boolfbn isSbmfOrAndfstorOf(Componfnt domp, boolfbn bllowChildrfn) {
        rfturn domp == this;
    }

    /**
     * Dftfrminfs whfthfr this domponfnt is showing on sdrffn. This mfbns
     * thbt thf domponfnt must bf visiblf, bnd it must bf in b dontbinfr
     * thbt is visiblf bnd showing.
     * <p>
     * <strong>Notf:</strong> somftimfs thfrf is no wby to dftfdt whfthfr thf
     * {@dodf Componfnt} is bdtublly visiblf to thf usfr.  This dbn hbppfn whfn:
     * <ul>
     * <li>thf domponfnt hbs bffn bddfd to b visiblf {@dodf SdrollPbnf} but
     * thf {@dodf Componfnt} is not durrfntly in thf sdroll pbnf's vifw port.
     * <li>thf {@dodf Componfnt} is obsdurfd by bnothfr {@dodf Componfnt} or
     * {@dodf Contbinfr}.
     * </ul>
     * @rfturn <dodf>truf</dodf> if thf domponfnt is showing,
     *          <dodf>fblsf</dodf> othfrwisf
     * @sff #sftVisiblf
     * @sindf 1.0
     */
    publid boolfbn isShowing() {
        if (visiblf && (pffr != null)) {
            Contbinfr pbrfnt = this.pbrfnt;
            rfturn (pbrfnt == null) || pbrfnt.isShowing();
        }
        rfturn fblsf;
    }

    /**
     * Dftfrminfs whfthfr this domponfnt is fnbblfd. An fnbblfd domponfnt
     * dbn rfspond to usfr input bnd gfnfrbtf fvfnts. Componfnts brf
     * fnbblfd initiblly by dffbult. A domponfnt mby bf fnbblfd or disbblfd by
     * dblling its <dodf>sftEnbblfd</dodf> mfthod.
     * @rfturn <dodf>truf</dodf> if thf domponfnt is fnbblfd,
     *          <dodf>fblsf</dodf> othfrwisf
     * @sff #sftEnbblfd
     * @sindf 1.0
     */
    publid boolfbn isEnbblfd() {
        rfturn isEnbblfdImpl();
    }

    /*
     * This is dbllfd by thf nbtivf dodf, so dlifnt dodf dbn't
     * bf dbllfd on thf toolkit thrfbd.
     */
    finbl boolfbn isEnbblfdImpl() {
        rfturn fnbblfd;
    }

    /**
     * Enbblfs or disbblfs this domponfnt, dfpfnding on thf vbluf of thf
     * pbrbmftfr <dodf>b</dodf>. An fnbblfd domponfnt dbn rfspond to usfr
     * input bnd gfnfrbtf fvfnts. Componfnts brf fnbblfd initiblly by dffbult.
     *
     * <p>Notf: Disbbling b lightwfight domponfnt dofs not prfvfnt it from
     * rfdfiving MousfEvfnts.
     * <p>Notf: Disbbling b hfbvywfight dontbinfr prfvfnts bll domponfnts
     * in this dontbinfr from rfdfiving bny input fvfnts.  But disbbling b
     * lightwfight dontbinfr bfffdts only this dontbinfr.
     *
     * @pbrbm     b   If <dodf>truf</dodf>, this domponfnt is
     *            fnbblfd; othfrwisf this domponfnt is disbblfd
     * @sff #isEnbblfd
     * @sff #isLightwfight
     * @sindf 1.1
     */
    publid void sftEnbblfd(boolfbn b) {
        fnbblf(b);
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftEnbblfd(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid void fnbblf() {
        if (!fnbblfd) {
            syndhronizfd (gftTrffLodk()) {
                fnbblfd = truf;
                ComponfntPffr pffr = this.pffr;
                if (pffr != null) {
                    pffr.sftEnbblfd(truf);
                    if (visiblf) {
                        updbtfCursorImmfdibtfly();
                    }
                }
            }
            if (bddfssiblfContfxt != null) {
                bddfssiblfContfxt.firfPropfrtyChbngf(
                                                     AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                                     null, AddfssiblfStbtf.ENABLED);
            }
        }
    }

    /**
     * Enbblfs or disbblfs this domponfnt.
     *
     * @pbrbm  b {@dodf truf} to fnbblf this domponfnt;
     *         othfrwisf {@dodf fblsf}
     *
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftEnbblfd(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid void fnbblf(boolfbn b) {
        if (b) {
            fnbblf();
        } flsf {
            disbblf();
        }
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftEnbblfd(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid void disbblf() {
        if (fnbblfd) {
            KfybobrdFodusMbnbgfr.dlfbrMostRfdfntFodusOwnfr(this);
            syndhronizfd (gftTrffLodk()) {
                fnbblfd = fblsf;
                // A disbblfd lw dontbinfr is bllowfd to dontbin b fodus ownfr.
                if ((isFodusOwnfr() || (dontbinsFodus() && !isLightwfight())) &&
                    KfybobrdFodusMbnbgfr.isAutoFodusTrbnsffrEnbblfd())
                {
                    // Don't dlfbr thf globbl fodus ownfr. If trbnsffrFodus
                    // fbils, wf wbnt thf fodus to stby on thf disbblfd
                    // Componfnt so thbt kfybobrd trbvfrsbl, ft. bl. still
                    // mbkfs sfnsf to thf usfr.
                    trbnsffrFodus(fblsf);
                }
                ComponfntPffr pffr = this.pffr;
                if (pffr != null) {
                    pffr.sftEnbblfd(fblsf);
                    if (visiblf) {
                        updbtfCursorImmfdibtfly();
                    }
                }
            }
            if (bddfssiblfContfxt != null) {
                bddfssiblfContfxt.firfPropfrtyChbngf(
                                                     AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                                     null, AddfssiblfStbtf.ENABLED);
            }
        }
    }

    /**
     * Rfturns truf if this domponfnt is pbintfd to bn offsdrffn imbgf
     * ("bufffr") thbt's dopifd to thf sdrffn lbtfr.  Componfnt
     * subdlbssfs thbt support doublf bufffring should ovfrridf this
     * mfthod to rfturn truf if doublf bufffring is fnbblfd.
     *
     * @rfturn fblsf by dffbult
     */
    publid boolfbn isDoublfBufffrfd() {
        rfturn fblsf;
    }

    /**
     * Enbblfs or disbblfs input mfthod support for this domponfnt. If input
     * mfthod support is fnbblfd bnd thf domponfnt blso prodfssfs kfy fvfnts,
     * indoming fvfnts brf offfrfd to
     * thf durrfnt input mfthod bnd will only bf prodfssfd by thf domponfnt or
     * dispbtdhfd to its listfnfrs if thf input mfthod dofs not donsumf thfm.
     * By dffbult, input mfthod support is fnbblfd.
     *
     * @pbrbm fnbblf truf to fnbblf, fblsf to disbblf
     * @sff #prodfssKfyEvfnt
     * @sindf 1.2
     */
    publid void fnbblfInputMfthods(boolfbn fnbblf) {
        if (fnbblf) {
            if ((fvfntMbsk & AWTEvfnt.INPUT_METHODS_ENABLED_MASK) != 0)
                rfturn;

            // If this domponfnt blrfbdy hbs fodus, thfn bdtivbtf thf
            // input mfthod by dispbtdhing b synthfsizfd fodus gbinfd
            // fvfnt.
            if (isFodusOwnfr()) {
                InputContfxt inputContfxt = gftInputContfxt();
                if (inputContfxt != null) {
                    FodusEvfnt fodusGbinfdEvfnt =
                        nfw FodusEvfnt(this, FodusEvfnt.FOCUS_GAINED);
                    inputContfxt.dispbtdhEvfnt(fodusGbinfdEvfnt);
                }
            }

            fvfntMbsk |= AWTEvfnt.INPUT_METHODS_ENABLED_MASK;
        } flsf {
            if ((fvfntMbsk & AWTEvfnt.INPUT_METHODS_ENABLED_MASK) != 0) {
                InputContfxt inputContfxt = gftInputContfxt();
                if (inputContfxt != null) {
                    inputContfxt.fndComposition();
                    inputContfxt.rfmovfNotify(this);
                }
            }
            fvfntMbsk &= ~AWTEvfnt.INPUT_METHODS_ENABLED_MASK;
        }
    }

    /**
     * Shows or hidfs this domponfnt dfpfnding on thf vbluf of pbrbmftfr
     * <dodf>b</dodf>.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm b  if <dodf>truf</dodf>, shows this domponfnt;
     * othfrwisf, hidfs this domponfnt
     * @sff #isVisiblf
     * @sff #invblidbtf
     * @sindf 1.1
     */
    publid void sftVisiblf(boolfbn b) {
        show(b);
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftVisiblf(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid void show() {
        if (!visiblf) {
            syndhronizfd (gftTrffLodk()) {
                visiblf = truf;
                mixOnShowing();
                ComponfntPffr pffr = this.pffr;
                if (pffr != null) {
                    pffr.sftVisiblf(truf);
                    drfbtfHifrbrdhyEvfnts(HifrbrdhyEvfnt.HIERARCHY_CHANGED,
                                          this, pbrfnt,
                                          HifrbrdhyEvfnt.SHOWING_CHANGED,
                                          Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK));
                    if (pffr instbndfof LightwfightPffr) {
                        rfpbint();
                    }
                    updbtfCursorImmfdibtfly();
                }

                if (domponfntListfnfr != null ||
                    (fvfntMbsk & AWTEvfnt.COMPONENT_EVENT_MASK) != 0 ||
                    Toolkit.fnbblfdOnToolkit(AWTEvfnt.COMPONENT_EVENT_MASK)) {
                    ComponfntEvfnt f = nfw ComponfntEvfnt(this,
                                                          ComponfntEvfnt.COMPONENT_SHOWN);
                    Toolkit.gftEvfntQufuf().postEvfnt(f);
                }
            }
            Contbinfr pbrfnt = this.pbrfnt;
            if (pbrfnt != null) {
                pbrfnt.invblidbtf();
            }
        }
    }

    /**
     * Mbkfs this domponfnt visiblf or invisiblf.
     *
     * @pbrbm  b {@dodf truf} to mbkf this domponfnt visiblf;
     *         othfrwisf {@dodf fblsf}
     *
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftVisiblf(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid void show(boolfbn b) {
        if (b) {
            show();
        } flsf {
            hidf();
        }
    }

    boolfbn dontbinsFodus() {
        rfturn isFodusOwnfr();
    }

    void dlfbrMostRfdfntFodusOwnfrOnHidf() {
        KfybobrdFodusMbnbgfr.dlfbrMostRfdfntFodusOwnfr(this);
    }

    void dlfbrCurrfntFodusCydlfRootOnHidf() {
        /* do nothing */
    }

    /*
     * Dflftf rfffrfndfs from LightwfithDispbtdhfr of b hfbvywfight pbrfnt
     */
    void dlfbrLightwfightDispbtdhfrOnRfmovf(Componfnt rfmovfdComponfnt) {
        if (pbrfnt != null) {
            pbrfnt.dlfbrLightwfightDispbtdhfrOnRfmovf(rfmovfdComponfnt);
        }
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftVisiblf(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid void hidf() {
        isPbdkfd = fblsf;

        if (visiblf) {
            dlfbrCurrfntFodusCydlfRootOnHidf();
            dlfbrMostRfdfntFodusOwnfrOnHidf();
            syndhronizfd (gftTrffLodk()) {
                visiblf = fblsf;
                mixOnHiding(isLightwfight());
                if (dontbinsFodus() && KfybobrdFodusMbnbgfr.isAutoFodusTrbnsffrEnbblfd()) {
                    trbnsffrFodus(truf);
                }
                ComponfntPffr pffr = this.pffr;
                if (pffr != null) {
                    pffr.sftVisiblf(fblsf);
                    drfbtfHifrbrdhyEvfnts(HifrbrdhyEvfnt.HIERARCHY_CHANGED,
                                          this, pbrfnt,
                                          HifrbrdhyEvfnt.SHOWING_CHANGED,
                                          Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK));
                    if (pffr instbndfof LightwfightPffr) {
                        rfpbint();
                    }
                    updbtfCursorImmfdibtfly();
                }
                if (domponfntListfnfr != null ||
                    (fvfntMbsk & AWTEvfnt.COMPONENT_EVENT_MASK) != 0 ||
                    Toolkit.fnbblfdOnToolkit(AWTEvfnt.COMPONENT_EVENT_MASK)) {
                    ComponfntEvfnt f = nfw ComponfntEvfnt(this,
                                                          ComponfntEvfnt.COMPONENT_HIDDEN);
                    Toolkit.gftEvfntQufuf().postEvfnt(f);
                }
            }
            Contbinfr pbrfnt = this.pbrfnt;
            if (pbrfnt != null) {
                pbrfnt.invblidbtf();
            }
        }
    }

    /**
     * Gfts thf forfground dolor of this domponfnt.
     * @rfturn this domponfnt's forfground dolor; if this domponfnt dofs
     * not hbvf b forfground dolor, thf forfground dolor of its pbrfnt
     * is rfturnfd
     * @sff #sftForfground
     * @sindf 1.0
     * @bfbninfo
     *       bound: truf
     */
    @Trbnsifnt
    publid Color gftForfground() {
        Color forfground = this.forfground;
        if (forfground != null) {
            rfturn forfground;
        }
        Contbinfr pbrfnt = this.pbrfnt;
        rfturn (pbrfnt != null) ? pbrfnt.gftForfground() : null;
    }

    /**
     * Sfts thf forfground dolor of this domponfnt.
     * @pbrbm d thf dolor to bfdomf this domponfnt's
     *          forfground dolor; if this pbrbmftfr is <dodf>null</dodf>
     *          thfn this domponfnt will inhfrit
     *          thf forfground dolor of its pbrfnt
     * @sff #gftForfground
     * @sindf 1.0
     */
    publid void sftForfground(Color d) {
        Color oldColor = forfground;
        ComponfntPffr pffr = this.pffr;
        forfground = d;
        if (pffr != null) {
            d = gftForfground();
            if (d != null) {
                pffr.sftForfground(d);
            }
        }
        // This is b bound propfrty, so rfport thf dhbngf to
        // bny rfgistfrfd listfnfrs.  (Chfbp if thfrf brf nonf.)
        firfPropfrtyChbngf("forfground", oldColor, d);
    }

    /**
     * Rfturns whfthfr thf forfground dolor hbs bffn fxpliditly sft for this
     * Componfnt. If this mfthod rfturns <dodf>fblsf</dodf>, this Componfnt is
     * inhfriting its forfground dolor from bn bndfstor.
     *
     * @rfturn <dodf>truf</dodf> if thf forfground dolor hbs bffn fxpliditly
     *         sft for this Componfnt; <dodf>fblsf</dodf> othfrwisf.
     * @sindf 1.4
     */
    publid boolfbn isForfgroundSft() {
        rfturn (forfground != null);
    }

    /**
     * Gfts thf bbdkground dolor of this domponfnt.
     * @rfturn this domponfnt's bbdkground dolor; if this domponfnt dofs
     *          not hbvf b bbdkground dolor,
     *          thf bbdkground dolor of its pbrfnt is rfturnfd
     * @sff #sftBbdkground
     * @sindf 1.0
     */
    @Trbnsifnt
    publid Color gftBbdkground() {
        Color bbdkground = this.bbdkground;
        if (bbdkground != null) {
            rfturn bbdkground;
        }
        Contbinfr pbrfnt = this.pbrfnt;
        rfturn (pbrfnt != null) ? pbrfnt.gftBbdkground() : null;
    }

    /**
     * Sfts thf bbdkground dolor of this domponfnt.
     * <p>
     * Thf bbdkground dolor bfffdts fbdh domponfnt difffrfntly bnd thf
     * pbrts of thf domponfnt thbt brf bfffdtfd by thf bbdkground dolor
     * mby difffr bftwffn opfrbting systfms.
     *
     * @pbrbm d thf dolor to bfdomf this domponfnt's dolor;
     *          if this pbrbmftfr is <dodf>null</dodf>, thfn this
     *          domponfnt will inhfrit thf bbdkground dolor of its pbrfnt
     * @sff #gftBbdkground
     * @sindf 1.0
     * @bfbninfo
     *       bound: truf
     */
    publid void sftBbdkground(Color d) {
        Color oldColor = bbdkground;
        ComponfntPffr pffr = this.pffr;
        bbdkground = d;
        if (pffr != null) {
            d = gftBbdkground();
            if (d != null) {
                pffr.sftBbdkground(d);
            }
        }
        // This is b bound propfrty, so rfport thf dhbngf to
        // bny rfgistfrfd listfnfrs.  (Chfbp if thfrf brf nonf.)
        firfPropfrtyChbngf("bbdkground", oldColor, d);
    }

    /**
     * Rfturns whfthfr thf bbdkground dolor hbs bffn fxpliditly sft for this
     * Componfnt. If this mfthod rfturns <dodf>fblsf</dodf>, this Componfnt is
     * inhfriting its bbdkground dolor from bn bndfstor.
     *
     * @rfturn <dodf>truf</dodf> if thf bbdkground dolor hbs bffn fxpliditly
     *         sft for this Componfnt; <dodf>fblsf</dodf> othfrwisf.
     * @sindf 1.4
     */
    publid boolfbn isBbdkgroundSft() {
        rfturn (bbdkground != null);
    }

    /**
     * Gfts thf font of this domponfnt.
     * @rfturn this domponfnt's font; if b font hbs not bffn sft
     * for this domponfnt, thf font of its pbrfnt is rfturnfd
     * @sff #sftFont
     * @sindf 1.0
     */
    @Trbnsifnt
    publid Font gftFont() {
        rfturn gftFont_NoClifntCodf();
    }

    // NOTE: This mfthod mby bf dbllfd by privilfgfd thrfbds.
    //       This fundtionblity is implfmfntfd in b pbdkbgf-privbtf mfthod
    //       to insurf thbt it dbnnot bf ovfrriddfn by dlifnt subdlbssfs.
    //       DO NOT INVOKE CLIENT CODE ON THIS THREAD!
    finbl Font gftFont_NoClifntCodf() {
        Font font = this.font;
        if (font != null) {
            rfturn font;
        }
        Contbinfr pbrfnt = this.pbrfnt;
        rfturn (pbrfnt != null) ? pbrfnt.gftFont_NoClifntCodf() : null;
    }

    /**
     * Sfts thf font of this domponfnt.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm f thf font to bfdomf this domponfnt's font;
     *          if this pbrbmftfr is <dodf>null</dodf> thfn this
     *          domponfnt will inhfrit thf font of its pbrfnt
     * @sff #gftFont
     * @sff #invblidbtf
     * @sindf 1.0
     * @bfbninfo
     *       bound: truf
     */
    publid void sftFont(Font f) {
        Font oldFont, nfwFont;
        syndhronizfd(gftTrffLodk()) {
            oldFont = font;
            nfwFont = font = f;
            ComponfntPffr pffr = this.pffr;
            if (pffr != null) {
                f = gftFont();
                if (f != null) {
                    pffr.sftFont(f);
                    pffrFont = f;
                }
            }
        }
        // This is b bound propfrty, so rfport thf dhbngf to
        // bny rfgistfrfd listfnfrs.  (Chfbp if thfrf brf nonf.)
        firfPropfrtyChbngf("font", oldFont, nfwFont);

        // This dould dhbngf thf prfffrrfd sizf of thf Componfnt.
        // Fix for 6213660. Should dompbrf old bnd nfw fonts bnd do not
        // dbll invblidbtf() if thfy brf fqubl.
        if (f != oldFont && (oldFont == null ||
                                      !oldFont.fqubls(f))) {
            invblidbtfIfVblid();
        }
    }

    /**
     * Rfturns whfthfr thf font hbs bffn fxpliditly sft for this Componfnt. If
     * this mfthod rfturns <dodf>fblsf</dodf>, this Componfnt is inhfriting its
     * font from bn bndfstor.
     *
     * @rfturn <dodf>truf</dodf> if thf font hbs bffn fxpliditly sft for this
     *         Componfnt; <dodf>fblsf</dodf> othfrwisf.
     * @sindf 1.4
     */
    publid boolfbn isFontSft() {
        rfturn (font != null);
    }

    /**
     * Gfts thf lodblf of this domponfnt.
     * @rfturn this domponfnt's lodblf; if this domponfnt dofs not
     *          hbvf b lodblf, thf lodblf of its pbrfnt is rfturnfd
     * @sff #sftLodblf
     * @fxdfption IllfgblComponfntStbtfExdfption if thf <dodf>Componfnt</dodf>
     *          dofs not hbvf its own lodblf bnd hbs not yft bffn bddfd to
     *          b dontbinmfnt hifrbrdhy sudh thbt thf lodblf dbn bf dftfrminfd
     *          from thf dontbining pbrfnt
     * @sindf  1.1
     */
    publid Lodblf gftLodblf() {
        Lodblf lodblf = this.lodblf;
        if (lodblf != null) {
            rfturn lodblf;
        }
        Contbinfr pbrfnt = this.pbrfnt;

        if (pbrfnt == null) {
            throw nfw IllfgblComponfntStbtfExdfption("This domponfnt must hbvf b pbrfnt in ordfr to dftfrminf its lodblf");
        } flsf {
            rfturn pbrfnt.gftLodblf();
        }
    }

    /**
     * Sfts thf lodblf of this domponfnt.  This is b bound propfrty.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm l thf lodblf to bfdomf this domponfnt's lodblf
     * @sff #gftLodblf
     * @sff #invblidbtf
     * @sindf 1.1
     */
    publid void sftLodblf(Lodblf l) {
        Lodblf oldVbluf = lodblf;
        lodblf = l;

        // This is b bound propfrty, so rfport thf dhbngf to
        // bny rfgistfrfd listfnfrs.  (Chfbp if thfrf brf nonf.)
        firfPropfrtyChbngf("lodblf", oldVbluf, l);

        // This dould dhbngf thf prfffrrfd sizf of thf Componfnt.
        invblidbtfIfVblid();
    }

    /**
     * Gfts thf instbndf of <dodf>ColorModfl</dodf> usfd to displby
     * thf domponfnt on thf output dfvidf.
     * @rfturn thf dolor modfl usfd by this domponfnt
     * @sff jbvb.bwt.imbgf.ColorModfl
     * @sff jbvb.bwt.pffr.ComponfntPffr#gftColorModfl()
     * @sff Toolkit#gftColorModfl()
     * @sindf 1.0
     */
    publid ColorModfl gftColorModfl() {
        ComponfntPffr pffr = this.pffr;
        if ((pffr != null) && ! (pffr instbndfof LightwfightPffr)) {
            rfturn pffr.gftColorModfl();
        } flsf if (GrbphidsEnvironmfnt.isHfbdlfss()) {
            rfturn ColorModfl.gftRGBdffbult();
        } // flsf
        rfturn gftToolkit().gftColorModfl();
    }

    /**
     * Gfts thf lodbtion of this domponfnt in thf form of b
     * point spfdifying thf domponfnt's top-lfft dornfr.
     * Thf lodbtion will bf rflbtivf to thf pbrfnt's doordinbtf spbdf.
     * <p>
     * Duf to thf bsyndhronous nbturf of nbtivf fvfnt hbndling, this
     * mfthod dbn rfturn outdbtfd vblufs (for instbndf, bftfr sfvfrbl dblls
     * of <dodf>sftLodbtion()</dodf> in rbpid suddfssion).  For this
     * rfbson, thf rfdommfndfd mfthod of obtbining b domponfnt's position is
     * within <dodf>jbvb.bwt.fvfnt.ComponfntListfnfr.domponfntMovfd()</dodf>,
     * whidh is dbllfd bftfr thf opfrbting systfm hbs finishfd moving thf
     * domponfnt.
     * </p>
     * @rfturn bn instbndf of <dodf>Point</dodf> rfprfsfnting
     *          thf top-lfft dornfr of thf domponfnt's bounds in
     *          thf doordinbtf spbdf of thf domponfnt's pbrfnt
     * @sff #sftLodbtion
     * @sff #gftLodbtionOnSdrffn
     * @sindf 1.1
     */
    publid Point gftLodbtion() {
        rfturn lodbtion();
    }

    /**
     * Gfts thf lodbtion of this domponfnt in thf form of b point
     * spfdifying thf domponfnt's top-lfft dornfr in thf sdrffn's
     * doordinbtf spbdf.
     * @rfturn bn instbndf of <dodf>Point</dodf> rfprfsfnting
     *          thf top-lfft dornfr of thf domponfnt's bounds in thf
     *          doordinbtf spbdf of thf sdrffn
     * @throws IllfgblComponfntStbtfExdfption if thf
     *          domponfnt is not showing on thf sdrffn
     * @sff #sftLodbtion
     * @sff #gftLodbtion
     */
    publid Point gftLodbtionOnSdrffn() {
        syndhronizfd (gftTrffLodk()) {
            rfturn gftLodbtionOnSdrffn_NoTrffLodk();
        }
    }

    /*
     * b pbdkbgf privbtf vfrsion of gftLodbtionOnSdrffn
     * usfd by GlobblCursormbnbgfr to updbtf dursor
     */
    finbl Point gftLodbtionOnSdrffn_NoTrffLodk() {

        if (pffr != null && isShowing()) {
            if (pffr instbndfof LightwfightPffr) {
                // lightwfight domponfnt lodbtion nffds to bf trbnslbtfd
                // rflbtivf to b nbtivf domponfnt.
                Contbinfr host = gftNbtivfContbinfr();
                Point pt = host.pffr.gftLodbtionOnSdrffn();
                for(Componfnt d = this; d != host; d = d.gftPbrfnt()) {
                    pt.x += d.x;
                    pt.y += d.y;
                }
                rfturn pt;
            } flsf {
                Point pt = pffr.gftLodbtionOnSdrffn();
                rfturn pt;
            }
        } flsf {
            throw nfw IllfgblComponfntStbtfExdfption("domponfnt must bf showing on thf sdrffn to dftfrminf its lodbtion");
        }
    }


    /**
     * Rfturns thf lodbtion of this domponfnt's top lfft dornfr.
     *
     * @rfturn thf lodbtion of this domponfnt's top lfft dornfr
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftLodbtion()</dodf>.
     */
    @Dfprfdbtfd
    publid Point lodbtion() {
        rfturn lodbtion_NoClifntCodf();
    }

    privbtf Point lodbtion_NoClifntCodf() {
        rfturn nfw Point(x, y);
    }

    /**
     * Movfs this domponfnt to b nfw lodbtion. Thf top-lfft dornfr of
     * thf nfw lodbtion is spfdififd by thf <dodf>x</dodf> bnd <dodf>y</dodf>
     * pbrbmftfrs in thf doordinbtf spbdf of this domponfnt's pbrfnt.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm x thf <i>x</i>-doordinbtf of thf nfw lodbtion's
     *          top-lfft dornfr in thf pbrfnt's doordinbtf spbdf
     * @pbrbm y thf <i>y</i>-doordinbtf of thf nfw lodbtion's
     *          top-lfft dornfr in thf pbrfnt's doordinbtf spbdf
     * @sff #gftLodbtion
     * @sff #sftBounds
     * @sff #invblidbtf
     * @sindf 1.1
     */
    publid void sftLodbtion(int x, int y) {
        movf(x, y);
    }

    /**
     * Movfs this domponfnt to b nfw lodbtion.
     *
     * @pbrbm  x thf <i>x</i>-doordinbtf of thf nfw lodbtion's
     *           top-lfft dornfr in thf pbrfnt's doordinbtf spbdf
     * @pbrbm  y thf <i>y</i>-doordinbtf of thf nfw lodbtion's
     *           top-lfft dornfr in thf pbrfnt's doordinbtf spbdf
     *
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftLodbtion(int, int)</dodf>.
     */
    @Dfprfdbtfd
    publid void movf(int x, int y) {
        syndhronizfd(gftTrffLodk()) {
            sftBoundsOp(ComponfntPffr.SET_LOCATION);
            sftBounds(x, y, width, hfight);
        }
    }

    /**
     * Movfs this domponfnt to b nfw lodbtion. Thf top-lfft dornfr of
     * thf nfw lodbtion is spfdififd by point <dodf>p</dodf>. Point
     * <dodf>p</dodf> is givfn in thf pbrfnt's doordinbtf spbdf.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm p thf point dffining thf top-lfft dornfr
     *          of thf nfw lodbtion, givfn in thf doordinbtf spbdf of this
     *          domponfnt's pbrfnt
     * @sff #gftLodbtion
     * @sff #sftBounds
     * @sff #invblidbtf
     * @sindf 1.1
     */
    publid void sftLodbtion(Point p) {
        sftLodbtion(p.x, p.y);
    }

    /**
     * Rfturns thf sizf of this domponfnt in thf form of b
     * <dodf>Dimfnsion</dodf> objfdt. Thf <dodf>hfight</dodf>
     * fifld of thf <dodf>Dimfnsion</dodf> objfdt dontbins
     * this domponfnt's hfight, bnd thf <dodf>width</dodf>
     * fifld of thf <dodf>Dimfnsion</dodf> objfdt dontbins
     * this domponfnt's width.
     * @rfturn b <dodf>Dimfnsion</dodf> objfdt thbt indidbtfs thf
     *          sizf of this domponfnt
     * @sff #sftSizf
     * @sindf 1.1
     */
    publid Dimfnsion gftSizf() {
        rfturn sizf();
    }

    /**
     * Rfturns thf sizf of this domponfnt in thf form of b
     * {@dodf Dimfnsion} objfdt.
     *
     * @rfturn thf {@dodf Dimfnsion} objfdt thbt indidbtfs thf
     *         sizf of this domponfnt
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftSizf()</dodf>.
     */
    @Dfprfdbtfd
    publid Dimfnsion sizf() {
        rfturn nfw Dimfnsion(width, hfight);
    }

    /**
     * Rfsizfs this domponfnt so thbt it hbs width <dodf>width</dodf>
     * bnd hfight <dodf>hfight</dodf>.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm width thf nfw width of this domponfnt in pixfls
     * @pbrbm hfight thf nfw hfight of this domponfnt in pixfls
     * @sff #gftSizf
     * @sff #sftBounds
     * @sff #invblidbtf
     * @sindf 1.1
     */
    publid void sftSizf(int width, int hfight) {
        rfsizf(width, hfight);
    }

    /**
     * Rfsizfs this domponfnt.
     *
     * @pbrbm  width thf nfw width of thf domponfnt
     * @pbrbm  hfight thf nfw hfight of thf domponfnt
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftSizf(int, int)</dodf>.
     */
    @Dfprfdbtfd
    publid void rfsizf(int width, int hfight) {
        syndhronizfd(gftTrffLodk()) {
            sftBoundsOp(ComponfntPffr.SET_SIZE);
            sftBounds(x, y, width, hfight);
        }
    }

    /**
     * Rfsizfs this domponfnt so thbt it hbs width <dodf>d.width</dodf>
     * bnd hfight <dodf>d.hfight</dodf>.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm d thf dimfnsion spfdifying thf nfw sizf
     *          of this domponfnt
     * @throws NullPointfrExdfption if {@dodf d} is {@dodf null}
     * @sff #sftSizf
     * @sff #sftBounds
     * @sff #invblidbtf
     * @sindf 1.1
     */
    publid void sftSizf(Dimfnsion d) {
        rfsizf(d);
    }

    /**
     * Rfsizfs this domponfnt so thbt it hbs width {@dodf d.width}
     * bnd hfight {@dodf d.hfight}.
     *
     * @pbrbm  d thf nfw sizf of this domponfnt
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftSizf(Dimfnsion)</dodf>.
     */
    @Dfprfdbtfd
    publid void rfsizf(Dimfnsion d) {
        sftSizf(d.width, d.hfight);
    }

    /**
     * Gfts thf bounds of this domponfnt in thf form of b
     * <dodf>Rfdtbnglf</dodf> objfdt. Thf bounds spfdify this
     * domponfnt's width, hfight, bnd lodbtion rflbtivf to
     * its pbrfnt.
     * @rfturn b rfdtbnglf indidbting this domponfnt's bounds
     * @sff #sftBounds
     * @sff #gftLodbtion
     * @sff #gftSizf
     */
    publid Rfdtbnglf gftBounds() {
        rfturn bounds();
    }

    /**
     * Rfturns thf bounding rfdtbnglf of this domponfnt.
     *
     * @rfturn thf bounding rfdtbnglf for this domponfnt
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftBounds()</dodf>.
     */
    @Dfprfdbtfd
    publid Rfdtbnglf bounds() {
        rfturn nfw Rfdtbnglf(x, y, width, hfight);
    }

    /**
     * Movfs bnd rfsizfs this domponfnt. Thf nfw lodbtion of thf top-lfft
     * dornfr is spfdififd by <dodf>x</dodf> bnd <dodf>y</dodf>, bnd thf
     * nfw sizf is spfdififd by <dodf>width</dodf> bnd <dodf>hfight</dodf>.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm x thf nfw <i>x</i>-doordinbtf of this domponfnt
     * @pbrbm y thf nfw <i>y</i>-doordinbtf of this domponfnt
     * @pbrbm width thf nfw <dodf>width</dodf> of this domponfnt
     * @pbrbm hfight thf nfw <dodf>hfight</dodf> of this
     *          domponfnt
     * @sff #gftBounds
     * @sff #sftLodbtion(int, int)
     * @sff #sftLodbtion(Point)
     * @sff #sftSizf(int, int)
     * @sff #sftSizf(Dimfnsion)
     * @sff #invblidbtf
     * @sindf 1.1
     */
    publid void sftBounds(int x, int y, int width, int hfight) {
        rfshbpf(x, y, width, hfight);
    }

    /**
     * Rfshbpfs thf bounding rfdtbnglf for this domponfnt.
     *
     * @pbrbm  x thf <i>x</i> doordinbtf of thf uppfr lfft dornfr of thf rfdtbnglf
     * @pbrbm  y thf <i>y</i> doordinbtf of thf uppfr lfft dornfr of thf rfdtbnglf
     * @pbrbm  width thf width of thf rfdtbnglf
     * @pbrbm  hfight thf hfight of thf rfdtbnglf
     *
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftBounds(int, int, int, int)</dodf>.
     */
    @Dfprfdbtfd
    publid void rfshbpf(int x, int y, int width, int hfight) {
        syndhronizfd (gftTrffLodk()) {
            try {
                sftBoundsOp(ComponfntPffr.SET_BOUNDS);
                boolfbn rfsizfd = (this.width != width) || (this.hfight != hfight);
                boolfbn movfd = (this.x != x) || (this.y != y);
                if (!rfsizfd && !movfd) {
                    rfturn;
                }
                int oldX = this.x;
                int oldY = this.y;
                int oldWidth = this.width;
                int oldHfight = this.hfight;
                this.x = x;
                this.y = y;
                this.width = width;
                this.hfight = hfight;

                if (rfsizfd) {
                    isPbdkfd = fblsf;
                }

                boolfbn nffdNotify = truf;
                mixOnRfshbping();
                if (pffr != null) {
                    // LightwightPffr is bn fmpty stub so dbn skip pffr.rfshbpf
                    if (!(pffr instbndfof LightwfightPffr)) {
                        rfshbpfNbtivfPffr(x, y, width, hfight, gftBoundsOp());
                        // Chfdk pffr bdtubly dhbngfd doordinbtfs
                        rfsizfd = (oldWidth != this.width) || (oldHfight != this.hfight);
                        movfd = (oldX != this.x) || (oldY != this.y);
                        // fix for 5025858: do not sfnd ComponfntEvfnts for toplfvfl
                        // windows hfrf bs it is donf from pffr or nbtivf dodf whfn
                        // thf window is rfblly rfsizfd or movfd, othfrwisf somf
                        // fvfnts mby bf sfnt twidf
                        if (this instbndfof Window) {
                            nffdNotify = fblsf;
                        }
                    }
                    if (rfsizfd) {
                        invblidbtf();
                    }
                    if (pbrfnt != null) {
                        pbrfnt.invblidbtfIfVblid();
                    }
                }
                if (nffdNotify) {
                    notifyNfwBounds(rfsizfd, movfd);
                }
                rfpbintPbrfntIfNffdfd(oldX, oldY, oldWidth, oldHfight);
            } finblly {
                sftBoundsOp(ComponfntPffr.RESET_OPERATION);
            }
        }
    }

    privbtf void rfpbintPbrfntIfNffdfd(int oldX, int oldY, int oldWidth,
                                       int oldHfight)
    {
        if (pbrfnt != null && pffr instbndfof LightwfightPffr && isShowing()) {
            // Hbvf thf pbrfnt rfdrbw thf brfb this domponfnt oddupifd.
            pbrfnt.rfpbint(oldX, oldY, oldWidth, oldHfight);
            // Hbvf thf pbrfnt rfdrbw thf brfb this domponfnt *now* oddupifs.
            rfpbint();
        }
    }

    privbtf void rfshbpfNbtivfPffr(int x, int y, int width, int hfight, int op) {
        // nbtivf pffr might bf offsft by morf thbn dirfdt
        // pbrfnt sindf pbrfnt might bf lightwfight.
        int nbtivfX = x;
        int nbtivfY = y;
        for (Componfnt d = pbrfnt;
             (d != null) && (d.pffr instbndfof LightwfightPffr);
             d = d.pbrfnt)
        {
            nbtivfX += d.x;
            nbtivfY += d.y;
        }
        pffr.sftBounds(nbtivfX, nbtivfY, width, hfight, op);
    }

    @SupprfssWbrnings("dfprfdbtion")
    privbtf void notifyNfwBounds(boolfbn rfsizfd, boolfbn movfd) {
        if (domponfntListfnfr != null
            || (fvfntMbsk & AWTEvfnt.COMPONENT_EVENT_MASK) != 0
            || Toolkit.fnbblfdOnToolkit(AWTEvfnt.COMPONENT_EVENT_MASK))
            {
                if (rfsizfd) {
                    ComponfntEvfnt f = nfw ComponfntEvfnt(this,
                                                          ComponfntEvfnt.COMPONENT_RESIZED);
                    Toolkit.gftEvfntQufuf().postEvfnt(f);
                }
                if (movfd) {
                    ComponfntEvfnt f = nfw ComponfntEvfnt(this,
                                                          ComponfntEvfnt.COMPONENT_MOVED);
                    Toolkit.gftEvfntQufuf().postEvfnt(f);
                }
            } flsf {
                if (this instbndfof Contbinfr && ((Contbinfr)this).dountComponfnts() > 0) {
                    boolfbn fnbblfdOnToolkit =
                        Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK);
                    if (rfsizfd) {

                        ((Contbinfr)this).drfbtfChildHifrbrdhyEvfnts(
                                                                     HifrbrdhyEvfnt.ANCESTOR_RESIZED, 0, fnbblfdOnToolkit);
                    }
                    if (movfd) {
                        ((Contbinfr)this).drfbtfChildHifrbrdhyEvfnts(
                                                                     HifrbrdhyEvfnt.ANCESTOR_MOVED, 0, fnbblfdOnToolkit);
                    }
                }
                }
    }

    /**
     * Movfs bnd rfsizfs this domponfnt to donform to thf nfw
     * bounding rfdtbnglf <dodf>r</dodf>. This domponfnt's nfw
     * position is spfdififd by <dodf>r.x</dodf> bnd <dodf>r.y</dodf>,
     * bnd its nfw sizf is spfdififd by <dodf>r.width</dodf> bnd
     * <dodf>r.hfight</dodf>
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm r thf nfw bounding rfdtbnglf for this domponfnt
     * @throws NullPointfrExdfption if {@dodf r} is {@dodf null}
     * @sff       #gftBounds
     * @sff       #sftLodbtion(int, int)
     * @sff       #sftLodbtion(Point)
     * @sff       #sftSizf(int, int)
     * @sff       #sftSizf(Dimfnsion)
     * @sff #invblidbtf
     * @sindf     1.1
     */
    publid void sftBounds(Rfdtbnglf r) {
        sftBounds(r.x, r.y, r.width, r.hfight);
    }


    /**
     * Rfturns thf durrfnt x doordinbtf of thf domponfnts origin.
     * This mfthod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().x</dodf>,
     * or <dodf>domponfnt.gftLodbtion().x</dodf> bfdbusf it dofsn't
     * dbusf bny hfbp bllodbtions.
     *
     * @rfturn thf durrfnt x doordinbtf of thf domponfnts origin
     * @sindf 1.2
     */
    publid int gftX() {
        rfturn x;
    }


    /**
     * Rfturns thf durrfnt y doordinbtf of thf domponfnts origin.
     * This mfthod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().y</dodf>,
     * or <dodf>domponfnt.gftLodbtion().y</dodf> bfdbusf it
     * dofsn't dbusf bny hfbp bllodbtions.
     *
     * @rfturn thf durrfnt y doordinbtf of thf domponfnts origin
     * @sindf 1.2
     */
    publid int gftY() {
        rfturn y;
    }


    /**
     * Rfturns thf durrfnt width of this domponfnt.
     * This mfthod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().width</dodf>,
     * or <dodf>domponfnt.gftSizf().width</dodf> bfdbusf it
     * dofsn't dbusf bny hfbp bllodbtions.
     *
     * @rfturn thf durrfnt width of this domponfnt
     * @sindf 1.2
     */
    publid int gftWidth() {
        rfturn width;
    }


    /**
     * Rfturns thf durrfnt hfight of this domponfnt.
     * This mfthod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().hfight</dodf>,
     * or <dodf>domponfnt.gftSizf().hfight</dodf> bfdbusf it
     * dofsn't dbusf bny hfbp bllodbtions.
     *
     * @rfturn thf durrfnt hfight of this domponfnt
     * @sindf 1.2
     */
    publid int gftHfight() {
        rfturn hfight;
    }

    /**
     * Storfs thf bounds of this domponfnt into "rfturn vbluf" <b>rv</b> bnd
     * rfturn <b>rv</b>.  If rv is <dodf>null</dodf> b nfw
     * <dodf>Rfdtbnglf</dodf> is bllodbtfd.
     * This vfrsion of <dodf>gftBounds</dodf> is usfful if thf dbllfr
     * wbnts to bvoid bllodbting b nfw <dodf>Rfdtbnglf</dodf> objfdt
     * on thf hfbp.
     *
     * @pbrbm rv thf rfturn vbluf, modififd to thf domponfnts bounds
     * @rfturn rv
     */
    publid Rfdtbnglf gftBounds(Rfdtbnglf rv) {
        if (rv == null) {
            rfturn nfw Rfdtbnglf(gftX(), gftY(), gftWidth(), gftHfight());
        }
        flsf {
            rv.sftBounds(gftX(), gftY(), gftWidth(), gftHfight());
            rfturn rv;
        }
    }

    /**
     * Storfs thf width/hfight of this domponfnt into "rfturn vbluf" <b>rv</b>
     * bnd rfturn <b>rv</b>.   If rv is <dodf>null</dodf> b nfw
     * <dodf>Dimfnsion</dodf> objfdt is bllodbtfd.  This vfrsion of
     * <dodf>gftSizf</dodf> is usfful if thf dbllfr wbnts to bvoid
     * bllodbting b nfw <dodf>Dimfnsion</dodf> objfdt on thf hfbp.
     *
     * @pbrbm rv thf rfturn vbluf, modififd to thf domponfnts sizf
     * @rfturn rv
     */
    publid Dimfnsion gftSizf(Dimfnsion rv) {
        if (rv == null) {
            rfturn nfw Dimfnsion(gftWidth(), gftHfight());
        }
        flsf {
            rv.sftSizf(gftWidth(), gftHfight());
            rfturn rv;
        }
    }

    /**
     * Storfs thf x,y origin of this domponfnt into "rfturn vbluf" <b>rv</b>
     * bnd rfturn <b>rv</b>.   If rv is <dodf>null</dodf> b nfw
     * <dodf>Point</dodf> is bllodbtfd.
     * This vfrsion of <dodf>gftLodbtion</dodf> is usfful if thf
     * dbllfr wbnts to bvoid bllodbting b nfw <dodf>Point</dodf>
     * objfdt on thf hfbp.
     *
     * @pbrbm rv thf rfturn vbluf, modififd to thf domponfnts lodbtion
     * @rfturn rv
     */
    publid Point gftLodbtion(Point rv) {
        if (rv == null) {
            rfturn nfw Point(gftX(), gftY());
        }
        flsf {
            rv.sftLodbtion(gftX(), gftY());
            rfturn rv;
        }
    }

    /**
     * Rfturns truf if this domponfnt is domplftfly opbquf, rfturns
     * fblsf by dffbult.
     * <p>
     * An opbquf domponfnt pbints fvfry pixfl within its
     * rfdtbngulbr rfgion. A non-opbquf domponfnt pbints only somf of
     * its pixfls, bllowing thf pixfls undfrnfbth it to "show through".
     * A domponfnt thbt dofs not fully pbint its pixfls thfrfforf
     * providfs b dfgrff of trbnspbrfndy.
     * <p>
     * Subdlbssfs thbt gubrbntff to blwbys domplftfly pbint thfir
     * dontfnts should ovfrridf this mfthod bnd rfturn truf.
     *
     * @rfturn truf if this domponfnt is domplftfly opbquf
     * @sff #isLightwfight
     * @sindf 1.2
     */
    publid boolfbn isOpbquf() {
        if (gftPffr() == null) {
            rfturn fblsf;
        }
        flsf {
            rfturn !isLightwfight();
        }
    }


    /**
     * A lightwfight domponfnt dofsn't hbvf b nbtivf toolkit pffr.
     * Subdlbssfs of <dodf>Componfnt</dodf> bnd <dodf>Contbinfr</dodf>,
     * othfr thbn thf onfs dffinfd in this pbdkbgf likf <dodf>Button</dodf>
     * or <dodf>Sdrollbbr</dodf>, brf lightwfight.
     * All of thf Swing domponfnts brf lightwfights.
     * <p>
     * This mfthod will blwbys rfturn <dodf>fblsf</dodf> if this domponfnt
     * is not displbybblf bfdbusf it is impossiblf to dftfrminf thf
     * wfight of bn undisplbybblf domponfnt.
     *
     * @rfturn truf if this domponfnt hbs b lightwfight pffr; fblsf if
     *         it hbs b nbtivf pffr or no pffr
     * @sff #isDisplbybblf
     * @sindf 1.2
     */
    publid boolfbn isLightwfight() {
        rfturn gftPffr() instbndfof LightwfightPffr;
    }


    /**
     * Sfts thf prfffrrfd sizf of this domponfnt to b donstbnt
     * vbluf.  Subsfqufnt dblls to <dodf>gftPrfffrrfdSizf</dodf> will blwbys
     * rfturn this vbluf.  Sftting thf prfffrrfd sizf to <dodf>null</dodf>
     * rfstorfs thf dffbult bfhbvior.
     *
     * @pbrbm prfffrrfdSizf Thf nfw prfffrrfd sizf, or null
     * @sff #gftPrfffrrfdSizf
     * @sff #isPrfffrrfdSizfSft
     * @sindf 1.5
     */
    publid void sftPrfffrrfdSizf(Dimfnsion prfffrrfdSizf) {
        Dimfnsion old;
        // If thf prfffrrfd sizf wbs sft, usf it bs thf old vbluf, othfrwisf
        // usf null to indidbtf wf didn't prfviously hbvf b sft prfffrrfd
        // sizf.
        if (prffSizfSft) {
            old = this.prffSizf;
        }
        flsf {
            old = null;
        }
        this.prffSizf = prfffrrfdSizf;
        prffSizfSft = (prfffrrfdSizf != null);
        firfPropfrtyChbngf("prfffrrfdSizf", old, prfffrrfdSizf);
    }


    /**
     * Rfturns truf if thf prfffrrfd sizf hbs bffn sft to b
     * non-<dodf>null</dodf> vbluf othfrwisf rfturns fblsf.
     *
     * @rfturn truf if <dodf>sftPrfffrrfdSizf</dodf> hbs bffn invokfd
     *         with b non-null vbluf.
     * @sindf 1.5
     */
    publid boolfbn isPrfffrrfdSizfSft() {
        rfturn prffSizfSft;
    }


    /**
     * Gfts thf prfffrrfd sizf of this domponfnt.
     * @rfturn b dimfnsion objfdt indidbting this domponfnt's prfffrrfd sizf
     * @sff #gftMinimumSizf
     * @sff LbyoutMbnbgfr
     */
    publid Dimfnsion gftPrfffrrfdSizf() {
        rfturn prfffrrfdSizf();
    }


    /**
     * Rfturns thf domponfnt's prfffrrfd sizf.
     *
     * @rfturn thf domponfnt's prfffrrfd sizf
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftPrfffrrfdSizf()</dodf>.
     */
    @Dfprfdbtfd
    publid Dimfnsion prfffrrfdSizf() {
        /* Avoid grbbbing thf lodk if b rfbsonbblf dbdhfd sizf vbluf
         * is bvbilbblf.
         */
        Dimfnsion dim = prffSizf;
        if (dim == null || !(isPrfffrrfdSizfSft() || isVblid())) {
            syndhronizfd (gftTrffLodk()) {
                prffSizf = (pffr != null) ?
                    pffr.gftPrfffrrfdSizf() :
                    gftMinimumSizf();
                dim = prffSizf;
            }
        }
        rfturn nfw Dimfnsion(dim);
    }

    /**
     * Sfts thf minimum sizf of this domponfnt to b donstbnt
     * vbluf.  Subsfqufnt dblls to <dodf>gftMinimumSizf</dodf> will blwbys
     * rfturn this vbluf.  Sftting thf minimum sizf to <dodf>null</dodf>
     * rfstorfs thf dffbult bfhbvior.
     *
     * @pbrbm minimumSizf thf nfw minimum sizf of this domponfnt
     * @sff #gftMinimumSizf
     * @sff #isMinimumSizfSft
     * @sindf 1.5
     */
    publid void sftMinimumSizf(Dimfnsion minimumSizf) {
        Dimfnsion old;
        // If thf minimum sizf wbs sft, usf it bs thf old vbluf, othfrwisf
        // usf null to indidbtf wf didn't prfviously hbvf b sft minimum
        // sizf.
        if (minSizfSft) {
            old = this.minSizf;
        }
        flsf {
            old = null;
        }
        this.minSizf = minimumSizf;
        minSizfSft = (minimumSizf != null);
        firfPropfrtyChbngf("minimumSizf", old, minimumSizf);
    }

    /**
     * Rfturns whfthfr or not <dodf>sftMinimumSizf</dodf> hbs bffn
     * invokfd with b non-null vbluf.
     *
     * @rfturn truf if <dodf>sftMinimumSizf</dodf> hbs bffn invokfd with b
     *              non-null vbluf.
     * @sindf 1.5
     */
    publid boolfbn isMinimumSizfSft() {
        rfturn minSizfSft;
    }

    /**
     * Gfts thf minimum sizf of this domponfnt.
     * @rfturn b dimfnsion objfdt indidbting this domponfnt's minimum sizf
     * @sff #gftPrfffrrfdSizf
     * @sff LbyoutMbnbgfr
     */
    publid Dimfnsion gftMinimumSizf() {
        rfturn minimumSizf();
    }

    /**
     * Rfturns thf minimum sizf of this domponfnt.
     *
     * @rfturn thf minimum sizf of this domponfnt
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftMinimumSizf()</dodf>.
     */
    @Dfprfdbtfd
    publid Dimfnsion minimumSizf() {
        /* Avoid grbbbing thf lodk if b rfbsonbblf dbdhfd sizf vbluf
         * is bvbilbblf.
         */
        Dimfnsion dim = minSizf;
        if (dim == null || !(isMinimumSizfSft() || isVblid())) {
            syndhronizfd (gftTrffLodk()) {
                minSizf = (pffr != null) ?
                    pffr.gftMinimumSizf() :
                    sizf();
                dim = minSizf;
            }
        }
        rfturn nfw Dimfnsion(dim);
    }

    /**
     * Sfts thf mbximum sizf of this domponfnt to b donstbnt
     * vbluf.  Subsfqufnt dblls to <dodf>gftMbximumSizf</dodf> will blwbys
     * rfturn this vbluf.  Sftting thf mbximum sizf to <dodf>null</dodf>
     * rfstorfs thf dffbult bfhbvior.
     *
     * @pbrbm mbximumSizf b <dodf>Dimfnsion</dodf> dontbining thf
     *          dfsirfd mbximum bllowbblf sizf
     * @sff #gftMbximumSizf
     * @sff #isMbximumSizfSft
     * @sindf 1.5
     */
    publid void sftMbximumSizf(Dimfnsion mbximumSizf) {
        // If thf mbximum sizf wbs sft, usf it bs thf old vbluf, othfrwisf
        // usf null to indidbtf wf didn't prfviously hbvf b sft mbximum
        // sizf.
        Dimfnsion old;
        if (mbxSizfSft) {
            old = this.mbxSizf;
        }
        flsf {
            old = null;
        }
        this.mbxSizf = mbximumSizf;
        mbxSizfSft = (mbximumSizf != null);
        firfPropfrtyChbngf("mbximumSizf", old, mbximumSizf);
    }

    /**
     * Rfturns truf if thf mbximum sizf hbs bffn sft to b non-<dodf>null</dodf>
     * vbluf othfrwisf rfturns fblsf.
     *
     * @rfturn truf if <dodf>mbximumSizf</dodf> is non-<dodf>null</dodf>,
     *          fblsf othfrwisf
     * @sindf 1.5
     */
    publid boolfbn isMbximumSizfSft() {
        rfturn mbxSizfSft;
    }

    /**
     * Gfts thf mbximum sizf of this domponfnt.
     * @rfturn b dimfnsion objfdt indidbting this domponfnt's mbximum sizf
     * @sff #gftMinimumSizf
     * @sff #gftPrfffrrfdSizf
     * @sff LbyoutMbnbgfr
     */
    publid Dimfnsion gftMbximumSizf() {
        if (isMbximumSizfSft()) {
            rfturn nfw Dimfnsion(mbxSizf);
        }
        rfturn nfw Dimfnsion(Short.MAX_VALUE, Short.MAX_VALUE);
    }

    /**
     * Rfturns thf blignmfnt blong thf x bxis.  This spfdififs how
     * thf domponfnt would likf to bf blignfd rflbtivf to othfr
     * domponfnts.  Thf vbluf should bf b numbfr bftwffn 0 bnd 1
     * whfrf 0 rfprfsfnts blignmfnt blong thf origin, 1 is blignfd
     * thf furthfst bwby from thf origin, 0.5 is dfntfrfd, ftd.
     *
     * @rfturn thf horizontbl blignmfnt of this domponfnt
     */
    publid flobt gftAlignmfntX() {
        rfturn CENTER_ALIGNMENT;
    }

    /**
     * Rfturns thf blignmfnt blong thf y bxis.  This spfdififs how
     * thf domponfnt would likf to bf blignfd rflbtivf to othfr
     * domponfnts.  Thf vbluf should bf b numbfr bftwffn 0 bnd 1
     * whfrf 0 rfprfsfnts blignmfnt blong thf origin, 1 is blignfd
     * thf furthfst bwby from thf origin, 0.5 is dfntfrfd, ftd.
     *
     * @rfturn thf vfrtidbl blignmfnt of this domponfnt
     */
    publid flobt gftAlignmfntY() {
        rfturn CENTER_ALIGNMENT;
    }

    /**
     * Rfturns thf bbsflinf.  Thf bbsflinf is mfbsurfd from thf top of
     * thf domponfnt.  This mfthod is primbrily mfbnt for
     * <dodf>LbyoutMbnbgfr</dodf>s to blign domponfnts blong thfir
     * bbsflinf.  A rfturn vbluf lfss thbn 0 indidbtfs this domponfnt
     * dofs not hbvf b rfbsonbblf bbsflinf bnd thbt
     * <dodf>LbyoutMbnbgfr</dodf>s should not blign this domponfnt on
     * its bbsflinf.
     * <p>
     * Thf dffbult implfmfntbtion rfturns -1.  Subdlbssfs thbt support
     * bbsflinf should ovfrridf bppropribtfly.  If b vbluf &gt;= 0 is
     * rfturnfd, thfn thf domponfnt hbs b vblid bbsflinf for bny
     * sizf &gt;= thf minimum sizf bnd <dodf>gftBbsflinfRfsizfBfhbvior</dodf>
     * dbn bf usfd to dftfrminf how thf bbsflinf dhbngfs with sizf.
     *
     * @pbrbm width thf width to gft thf bbsflinf for
     * @pbrbm hfight thf hfight to gft thf bbsflinf for
     * @rfturn thf bbsflinf or &lt; 0 indidbting thfrf is no rfbsonbblf
     *         bbsflinf
     * @throws IllfgblArgumfntExdfption if width or hfight is &lt; 0
     * @sff #gftBbsflinfRfsizfBfhbvior
     * @sff jbvb.bwt.FontMftrids
     * @sindf 1.6
     */
    publid int gftBbsflinf(int width, int hfight) {
        if (width < 0 || hfight < 0) {
            throw nfw IllfgblArgumfntExdfption(
                    "Width bnd hfight must bf >= 0");
        }
        rfturn -1;
    }

    /**
     * Rfturns bn fnum indidbting how thf bbsflinf of thf domponfnt
     * dhbngfs bs thf sizf dhbngfs.  This mfthod is primbrily mfbnt for
     * lbyout mbnbgfrs bnd GUI buildfrs.
     * <p>
     * Thf dffbult implfmfntbtion rfturns
     * <dodf>BbsflinfRfsizfBfhbvior.OTHER</dodf>.  Subdlbssfs thbt hbvf b
     * bbsflinf should ovfrridf bppropribtfly.  Subdlbssfs should
     * nfvfr rfturn <dodf>null</dodf>; if thf bbsflinf dbn not bf
     * dbldulbtfd rfturn <dodf>BbsflinfRfsizfBfhbvior.OTHER</dodf>.  Cbllfrs
     * should first bsk for thf bbsflinf using
     * <dodf>gftBbsflinf</dodf> bnd if b vbluf &gt;= 0 is rfturnfd usf
     * this mfthod.  It is bddfptbblf for this mfthod to rfturn b
     * vbluf othfr thbn <dodf>BbsflinfRfsizfBfhbvior.OTHER</dodf> fvfn if
     * <dodf>gftBbsflinf</dodf> rfturns b vbluf lfss thbn 0.
     *
     * @rfturn bn fnum indidbting how thf bbsflinf dhbngfs bs thf domponfnt
     *         sizf dhbngfs
     * @sff #gftBbsflinf(int, int)
     * @sindf 1.6
     */
    publid BbsflinfRfsizfBfhbvior gftBbsflinfRfsizfBfhbvior() {
        rfturn BbsflinfRfsizfBfhbvior.OTHER;
    }

    /**
     * Prompts thf lbyout mbnbgfr to lby out this domponfnt. This is
     * usublly dbllfd whfn thf domponfnt (morf spfdifidblly, dontbinfr)
     * is vblidbtfd.
     * @sff #vblidbtf
     * @sff LbyoutMbnbgfr
     */
    publid void doLbyout() {
        lbyout();
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>doLbyout()</dodf>.
     */
    @Dfprfdbtfd
    publid void lbyout() {
    }

    /**
     * Vblidbtfs this domponfnt.
     * <p>
     * Thf mfbning of thf tfrm <i>vblidbting</i> is dffinfd by thf bndfstors of
     * this dlbss. Sff {@link Contbinfr#vblidbtf} for morf dftbils.
     *
     * @sff       #invblidbtf
     * @sff       #doLbyout()
     * @sff       LbyoutMbnbgfr
     * @sff       Contbinfr#vblidbtf
     * @sindf     1.0
     */
    publid void vblidbtf() {
        syndhronizfd (gftTrffLodk()) {
            ComponfntPffr pffr = this.pffr;
            boolfbn wbsVblid = isVblid();
            if (!wbsVblid && pffr != null) {
                Font nfwfont = gftFont();
                Font oldfont = pffrFont;
                if (nfwfont != oldfont && (oldfont == null
                                           || !oldfont.fqubls(nfwfont))) {
                    pffr.sftFont(nfwfont);
                    pffrFont = nfwfont;
                }
                pffr.lbyout();
            }
            vblid = truf;
            if (!wbsVblid) {
                mixOnVblidbting();
            }
        }
    }

    /**
     * Invblidbtfs this domponfnt bnd its bndfstors.
     * <p>
     * By dffbult, bll thf bndfstors of thf domponfnt up to thf top-most
     * dontbinfr of thf hifrbrdhy brf mbrkfd invblid. If thf {@dodf
     * jbvb.bwt.smbrtInvblidbtf} systfm propfrty is sft to {@dodf truf},
     * invblidbtion stops on thf nfbrfst vblidbtf root of this domponfnt.
     * Mbrking b dontbinfr <i>invblid</i> indidbtfs thbt thf dontbinfr nffds to
     * bf lbid out.
     * <p>
     * This mfthod is dbllfd butombtidblly whfn bny lbyout-rflbtfd informbtion
     * dhbngfs (f.g. sftting thf bounds of thf domponfnt, or bdding thf
     * domponfnt to b dontbinfr).
     * <p>
     * This mfthod might bf dbllfd oftfn, so it should work fbst.
     *
     * @sff       #vblidbtf
     * @sff       #doLbyout
     * @sff       LbyoutMbnbgfr
     * @sff       jbvb.bwt.Contbinfr#isVblidbtfRoot
     * @sindf     1.0
     */
    publid void invblidbtf() {
        syndhronizfd (gftTrffLodk()) {
            /* Nullify dbdhfd lbyout bnd sizf informbtion.
             * For fffidifndy, propbgbtf invblidbtf() upwbrds only if
             * somf othfr domponfnt hbsn't blrfbdy donf so first.
             */
            vblid = fblsf;
            if (!isPrfffrrfdSizfSft()) {
                prffSizf = null;
            }
            if (!isMinimumSizfSft()) {
                minSizf = null;
            }
            if (!isMbximumSizfSft()) {
                mbxSizf = null;
            }
            invblidbtfPbrfnt();
        }
    }

    /**
     * Invblidbtfs thf pbrfnt of this domponfnt if bny.
     *
     * This mfthod MUST BE invokfd undfr thf TrffLodk.
     */
    void invblidbtfPbrfnt() {
        if (pbrfnt != null) {
            pbrfnt.invblidbtfIfVblid();
        }
    }

    /** Invblidbtfs thf domponfnt unlfss it is blrfbdy invblid.
     */
    finbl void invblidbtfIfVblid() {
        if (isVblid()) {
            invblidbtf();
        }
    }

    /**
     * Rfvblidbtfs thf domponfnt hifrbrdhy up to thf nfbrfst vblidbtf root.
     * <p>
     * This mfthod first invblidbtfs thf domponfnt hifrbrdhy stbrting from this
     * domponfnt up to thf nfbrfst vblidbtf root. Aftfrwbrds, thf domponfnt
     * hifrbrdhy is vblidbtfd stbrting from thf nfbrfst vblidbtf root.
     * <p>
     * This is b donvfnifndf mfthod supposfd to hflp bpplidbtion dfvflopfrs
     * bvoid looking for vblidbtf roots mbnublly. Bbsidblly, it's fquivblfnt to
     * first dblling thf {@link #invblidbtf()} mfthod on this domponfnt, bnd
     * thfn dblling thf {@link #vblidbtf()} mfthod on thf nfbrfst vblidbtf
     * root.
     *
     * @sff Contbinfr#isVblidbtfRoot
     * @sindf 1.7
     */
    publid void rfvblidbtf() {
        rfvblidbtfSyndhronously();
    }

    /**
     * Rfvblidbtfs thf domponfnt syndhronously.
     */
    finbl void rfvblidbtfSyndhronously() {
        syndhronizfd (gftTrffLodk()) {
            invblidbtf();

            Contbinfr root = gftContbinfr();
            if (root == null) {
                // Thfrf's no pbrfnts. Just vblidbtf itsflf.
                vblidbtf();
            } flsf {
                whilf (!root.isVblidbtfRoot()) {
                    if (root.gftContbinfr() == null) {
                        // If thfrf's no vblidbtf roots, wf'll vblidbtf thf
                        // topmost dontbinfr
                        brfbk;
                    }

                    root = root.gftContbinfr();
                }

                root.vblidbtf();
            }
        }
    }

    /**
     * Crfbtfs b grbphids dontfxt for this domponfnt. This mfthod will
     * rfturn <dodf>null</dodf> if this domponfnt is durrfntly not
     * displbybblf.
     * @rfturn b grbphids dontfxt for this domponfnt, or <dodf>null</dodf>
     *             if it hbs nonf
     * @sff       #pbint
     * @sindf     1.0
     */
    publid Grbphids gftGrbphids() {
        if (pffr instbndfof LightwfightPffr) {
            // This is for b lightwfight domponfnt, nffd to
            // trbnslbtf doordinbtf spbdfs bnd dlip rflbtivf
            // to thf pbrfnt.
            if (pbrfnt == null) rfturn null;
            Grbphids g = pbrfnt.gftGrbphids();
            if (g == null) rfturn null;
            if (g instbndfof ConstrbinbblfGrbphids) {
                ((ConstrbinbblfGrbphids) g).donstrbin(x, y, width, hfight);
            } flsf {
                g.trbnslbtf(x,y);
                g.sftClip(0, 0, width, hfight);
            }
            g.sftFont(gftFont());
            rfturn g;
        } flsf {
            ComponfntPffr pffr = this.pffr;
            rfturn (pffr != null) ? pffr.gftGrbphids() : null;
        }
    }

    finbl Grbphids gftGrbphids_NoClifntCodf() {
        ComponfntPffr pffr = this.pffr;
        if (pffr instbndfof LightwfightPffr) {
            // This is for b lightwfight domponfnt, nffd to
            // trbnslbtf doordinbtf spbdfs bnd dlip rflbtivf
            // to thf pbrfnt.
            Contbinfr pbrfnt = this.pbrfnt;
            if (pbrfnt == null) rfturn null;
            Grbphids g = pbrfnt.gftGrbphids_NoClifntCodf();
            if (g == null) rfturn null;
            if (g instbndfof ConstrbinbblfGrbphids) {
                ((ConstrbinbblfGrbphids) g).donstrbin(x, y, width, hfight);
            } flsf {
                g.trbnslbtf(x,y);
                g.sftClip(0, 0, width, hfight);
            }
            g.sftFont(gftFont_NoClifntCodf());
            rfturn g;
        } flsf {
            rfturn (pffr != null) ? pffr.gftGrbphids() : null;
        }
    }

    /**
     * Gfts thf font mftrids for thf spfdififd font.
     * Wbrning: Sindf Font mftrids brf bfffdtfd by thf
     * {@link jbvb.bwt.font.FontRfndfrContfxt FontRfndfrContfxt} bnd
     * this mfthod dofs not providf onf, it dbn rfturn only mftrids for
     * thf dffbult rfndfr dontfxt whidh mby not mbtdh thbt usfd whfn
     * rfndfring on thf Componfnt if {@link Grbphids2D} fundtionblity is bfing
     * usfd. Instfbd mftrids dbn bf obtbinfd bt rfndfring timf by dblling
     * {@link Grbphids#gftFontMftrids()} or tfxt mfbsurfmfnt APIs on thf
     * {@link Font Font} dlbss.
     * @pbrbm font thf font for whidh font mftrids is to bf
     *          obtbinfd
     * @rfturn thf font mftrids for <dodf>font</dodf>
     * @sff       #gftFont
     * @sff       #gftPffr
     * @sff       jbvb.bwt.pffr.ComponfntPffr#gftFontMftrids(Font)
     * @sff       Toolkit#gftFontMftrids(Font)
     * @sindf     1.0
     */
    publid FontMftrids gftFontMftrids(Font font) {
        // This is bn unsupportfd hbdk, but lfft in for b dustomfr.
        // Do not rfmovf.
        FontMbnbgfr fm = FontMbnbgfrFbdtory.gftInstbndf();
        if (fm instbndfof SunFontMbnbgfr
            && ((SunFontMbnbgfr) fm).usfPlbtformFontMftrids()) {

            if (pffr != null &&
                !(pffr instbndfof LightwfightPffr)) {
                rfturn pffr.gftFontMftrids(font);
            }
        }
        rfturn sun.font.FontDfsignMftrids.gftMftrids(font);
    }

    /**
     * Sfts thf dursor imbgf to thf spfdififd dursor.  This dursor
     * imbgf is displbyfd whfn thf <dodf>dontbins</dodf> mfthod for
     * this domponfnt rfturns truf for thf durrfnt dursor lodbtion, bnd
     * this Componfnt is visiblf, displbybblf, bnd fnbblfd. Sftting thf
     * dursor of b <dodf>Contbinfr</dodf> dbusfs thbt dursor to bf displbyfd
     * within bll of thf dontbinfr's subdomponfnts, fxdfpt for thosf
     * thbt hbvf b non-<dodf>null</dodf> dursor.
     * <p>
     * Thf mfthod mby hbvf no visubl ffffdt if thf Jbvb plbtform
     * implfmfntbtion bnd/or thf nbtivf systfm do not support
     * dhbnging thf mousf dursor shbpf.
     * @pbrbm dursor Onf of thf donstbnts dffinfd
     *          by thf <dodf>Cursor</dodf> dlbss;
     *          if this pbrbmftfr is <dodf>null</dodf>
     *          thfn this domponfnt will inhfrit
     *          thf dursor of its pbrfnt
     * @sff       #isEnbblfd
     * @sff       #isShowing
     * @sff       #gftCursor
     * @sff       #dontbins
     * @sff       Toolkit#drfbtfCustomCursor
     * @sff       Cursor
     * @sindf     1.1
     */
    publid void sftCursor(Cursor dursor) {
        this.dursor = dursor;
        updbtfCursorImmfdibtfly();
    }

    /**
     * Updbtfs thf dursor.  Mby not bf invokfd from thf nbtivf
     * mfssbgf pump.
     */
    finbl void updbtfCursorImmfdibtfly() {
        if (pffr instbndfof LightwfightPffr) {
            Contbinfr nbtivfContbinfr = gftNbtivfContbinfr();

            if (nbtivfContbinfr == null) rfturn;

            ComponfntPffr dPffr = nbtivfContbinfr.gftPffr();

            if (dPffr != null) {
                dPffr.updbtfCursorImmfdibtfly();
            }
        } flsf if (pffr != null) {
            pffr.updbtfCursorImmfdibtfly();
        }
    }

    /**
     * Gfts thf dursor sft in thf domponfnt. If thf domponfnt dofs
     * not hbvf b dursor sft, thf dursor of its pbrfnt is rfturnfd.
     * If no dursor is sft in thf fntirf hifrbrdhy,
     * <dodf>Cursor.DEFAULT_CURSOR</dodf> is rfturnfd.
     *
     * @rfturn thf dursor for this domponfnt
     * @sff #sftCursor
     * @sindf 1.1
     */
    publid Cursor gftCursor() {
        rfturn gftCursor_NoClifntCodf();
    }

    finbl Cursor gftCursor_NoClifntCodf() {
        Cursor dursor = this.dursor;
        if (dursor != null) {
            rfturn dursor;
        }
        Contbinfr pbrfnt = this.pbrfnt;
        if (pbrfnt != null) {
            rfturn pbrfnt.gftCursor_NoClifntCodf();
        } flsf {
            rfturn Cursor.gftPrfdffinfdCursor(Cursor.DEFAULT_CURSOR);
        }
    }

    /**
     * Rfturns whfthfr thf dursor hbs bffn fxpliditly sft for this Componfnt.
     * If this mfthod rfturns <dodf>fblsf</dodf>, this Componfnt is inhfriting
     * its dursor from bn bndfstor.
     *
     * @rfturn <dodf>truf</dodf> if thf dursor hbs bffn fxpliditly sft for this
     *         Componfnt; <dodf>fblsf</dodf> othfrwisf.
     * @sindf 1.4
     */
    publid boolfbn isCursorSft() {
        rfturn (dursor != null);
    }

    /**
     * Pbints this domponfnt.
     * <p>
     * This mfthod is dbllfd whfn thf dontfnts of thf domponfnt should
     * bf pbintfd; sudh bs whfn thf domponfnt is first bfing shown or
     * is dbmbgfd bnd in nffd of rfpbir.  Thf dlip rfdtbnglf in thf
     * <dodf>Grbphids</dodf> pbrbmftfr is sft to thf brfb
     * whidh nffds to bf pbintfd.
     * Subdlbssfs of <dodf>Componfnt</dodf> thbt ovfrridf this
     * mfthod nffd not dbll <dodf>supfr.pbint(g)</dodf>.
     * <p>
     * For pfrformbndf rfbsons, <dodf>Componfnt</dodf>s with zfro width
     * or hfight brfn't donsidfrfd to nffd pbinting whfn thfy brf first shown,
     * bnd blso brfn't donsidfrfd to nffd rfpbir.
     * <p>
     * <b>Notf</b>: For morf informbtion on thf pbint mfdhbnisms utilitizfd
     * by AWT bnd Swing, indluding informbtion on how to writf thf most
     * fffidifnt pbinting dodf, sff
     * <b hrff="http://www.orbdlf.dom/tfdhnftwork/jbvb/pbinting-140037.html">Pbinting in AWT bnd Swing</b>.
     *
     * @pbrbm g thf grbphids dontfxt to usf for pbinting
     * @sff       #updbtf
     * @sindf     1.0
     */
    publid void pbint(Grbphids g) {
    }

    /**
     * Updbtfs this domponfnt.
     * <p>
     * If this domponfnt is not b lightwfight domponfnt, thf
     * AWT dblls thf <dodf>updbtf</dodf> mfthod in rfsponsf to
     * b dbll to <dodf>rfpbint</dodf>.  You dbn bssumf thbt
     * thf bbdkground is not dlfbrfd.
     * <p>
     * Thf <dodf>updbtf</dodf> mfthod of <dodf>Componfnt</dodf>
     * dblls this domponfnt's <dodf>pbint</dodf> mfthod to rfdrbw
     * this domponfnt.  This mfthod is dommonly ovfrriddfn by subdlbssfs
     * whidh nffd to do bdditionbl work in rfsponsf to b dbll to
     * <dodf>rfpbint</dodf>.
     * Subdlbssfs of Componfnt thbt ovfrridf this mfthod should fithfr
     * dbll <dodf>supfr.updbtf(g)</dodf>, or dbll <dodf>pbint(g)</dodf>
     * dirfdtly from thfir <dodf>updbtf</dodf> mfthod.
     * <p>
     * Thf origin of thf grbphids dontfxt, its
     * (<dodf>0</dodf>,&nbsp;<dodf>0</dodf>) doordinbtf point, is thf
     * top-lfft dornfr of this domponfnt. Thf dlipping rfgion of thf
     * grbphids dontfxt is thf bounding rfdtbnglf of this domponfnt.
     *
     * <p>
     * <b>Notf</b>: For morf informbtion on thf pbint mfdhbnisms utilitizfd
     * by AWT bnd Swing, indluding informbtion on how to writf thf most
     * fffidifnt pbinting dodf, sff
     * <b hrff="http://www.orbdlf.dom/tfdhnftwork/jbvb/pbinting-140037.html">Pbinting in AWT bnd Swing</b>.
     *
     * @pbrbm g thf spfdififd dontfxt to usf for updbting
     * @sff       #pbint
     * @sff       #rfpbint()
     * @sindf     1.0
     */
    publid void updbtf(Grbphids g) {
        pbint(g);
    }

    /**
     * Pbints this domponfnt bnd bll of its subdomponfnts.
     * <p>
     * Thf origin of thf grbphids dontfxt, its
     * (<dodf>0</dodf>,&nbsp;<dodf>0</dodf>) doordinbtf point, is thf
     * top-lfft dornfr of this domponfnt. Thf dlipping rfgion of thf
     * grbphids dontfxt is thf bounding rfdtbnglf of this domponfnt.
     *
     * @pbrbm     g   thf grbphids dontfxt to usf for pbinting
     * @sff       #pbint
     * @sindf     1.0
     */
    publid void pbintAll(Grbphids g) {
        if (isShowing()) {
            GrbphidsCbllbbdk.PffrPbintCbllbbdk.gftInstbndf().
                runOnfComponfnt(this, nfw Rfdtbnglf(0, 0, width, hfight),
                                g, g.gftClip(),
                                GrbphidsCbllbbdk.LIGHTWEIGHTS |
                                GrbphidsCbllbbdk.HEAVYWEIGHTS);
        }
    }

    /**
     * Simulbtfs thf pffr dbllbbdks into jbvb.bwt for pbinting of
     * lightwfight Componfnts.
     * @pbrbm     g   thf grbphids dontfxt to usf for pbinting
     * @sff       #pbintAll
     */
    void lightwfightPbint(Grbphids g) {
        pbint(g);
    }

    /**
     * Pbints bll thf hfbvywfight subdomponfnts.
     */
    void pbintHfbvywfightComponfnts(Grbphids g) {
    }

    /**
     * Rfpbints this domponfnt.
     * <p>
     * If this domponfnt is b lightwfight domponfnt, this mfthod
     * dbusfs b dbll to this domponfnt's <dodf>pbint</dodf>
     * mfthod bs soon bs possiblf.  Othfrwisf, this mfthod dbusfs
     * b dbll to this domponfnt's <dodf>updbtf</dodf> mfthod bs soon
     * bs possiblf.
     * <p>
     * <b>Notf</b>: For morf informbtion on thf pbint mfdhbnisms utilitizfd
     * by AWT bnd Swing, indluding informbtion on how to writf thf most
     * fffidifnt pbinting dodf, sff
     * <b hrff="http://www.orbdlf.dom/tfdhnftwork/jbvb/pbinting-140037.html">Pbinting in AWT bnd Swing</b>.

     *
     * @sff       #updbtf(Grbphids)
     * @sindf     1.0
     */
    publid void rfpbint() {
        rfpbint(0, 0, 0, width, hfight);
    }

    /**
     * Rfpbints thf domponfnt.  If this domponfnt is b lightwfight
     * domponfnt, this rfsults in b dbll to <dodf>pbint</dodf>
     * within <dodf>tm</dodf> millisfdonds.
     * <p>
     * <b>Notf</b>: For morf informbtion on thf pbint mfdhbnisms utilitizfd
     * by AWT bnd Swing, indluding informbtion on how to writf thf most
     * fffidifnt pbinting dodf, sff
     * <b hrff="http://www.orbdlf.dom/tfdhnftwork/jbvb/pbinting-140037.html">Pbinting in AWT bnd Swing</b>.
     *
     * @pbrbm tm mbximum timf in millisfdonds bfforf updbtf
     * @sff #pbint
     * @sff #updbtf(Grbphids)
     * @sindf 1.0
     */
    publid void rfpbint(long tm) {
        rfpbint(tm, 0, 0, width, hfight);
    }

    /**
     * Rfpbints thf spfdififd rfdtbnglf of this domponfnt.
     * <p>
     * If this domponfnt is b lightwfight domponfnt, this mfthod
     * dbusfs b dbll to this domponfnt's <dodf>pbint</dodf> mfthod
     * bs soon bs possiblf.  Othfrwisf, this mfthod dbusfs b dbll to
     * this domponfnt's <dodf>updbtf</dodf> mfthod bs soon bs possiblf.
     * <p>
     * <b>Notf</b>: For morf informbtion on thf pbint mfdhbnisms utilitizfd
     * by AWT bnd Swing, indluding informbtion on how to writf thf most
     * fffidifnt pbinting dodf, sff
     * <b hrff="http://www.orbdlf.dom/tfdhnftwork/jbvb/pbinting-140037.html">Pbinting in AWT bnd Swing</b>.
     *
     * @pbrbm     x   thf <i>x</i> doordinbtf
     * @pbrbm     y   thf <i>y</i> doordinbtf
     * @pbrbm     width   thf width
     * @pbrbm     hfight  thf hfight
     * @sff       #updbtf(Grbphids)
     * @sindf     1.0
     */
    publid void rfpbint(int x, int y, int width, int hfight) {
        rfpbint(0, x, y, width, hfight);
    }

    /**
     * Rfpbints thf spfdififd rfdtbnglf of this domponfnt within
     * <dodf>tm</dodf> millisfdonds.
     * <p>
     * If this domponfnt is b lightwfight domponfnt, this mfthod dbusfs
     * b dbll to this domponfnt's <dodf>pbint</dodf> mfthod.
     * Othfrwisf, this mfthod dbusfs b dbll to this domponfnt's
     * <dodf>updbtf</dodf> mfthod.
     * <p>
     * <b>Notf</b>: For morf informbtion on thf pbint mfdhbnisms utilitizfd
     * by AWT bnd Swing, indluding informbtion on how to writf thf most
     * fffidifnt pbinting dodf, sff
     * <b hrff="http://www.orbdlf.dom/tfdhnftwork/jbvb/pbinting-140037.html">Pbinting in AWT bnd Swing</b>.
     *
     * @pbrbm     tm   mbximum timf in millisfdonds bfforf updbtf
     * @pbrbm     x    thf <i>x</i> doordinbtf
     * @pbrbm     y    thf <i>y</i> doordinbtf
     * @pbrbm     width    thf width
     * @pbrbm     hfight   thf hfight
     * @sff       #updbtf(Grbphids)
     * @sindf     1.0
     */
    publid void rfpbint(long tm, int x, int y, int width, int hfight) {
        if (this.pffr instbndfof LightwfightPffr) {
            // Nffds to bf trbnslbtfd to pbrfnt doordinbtfs sindf
            // b pbrfnt nbtivf dontbinfr providfs thf bdtubl rfpbint
            // sfrvidfs.  Additionblly, thf rfqufst is rfstridtfd to
            // thf bounds of thf domponfnt.
            if (pbrfnt != null) {
                if (x < 0) {
                    width += x;
                    x = 0;
                }
                if (y < 0) {
                    hfight += y;
                    y = 0;
                }

                int pwidth = (width > this.width) ? this.width : width;
                int phfight = (hfight > this.hfight) ? this.hfight : hfight;

                if (pwidth <= 0 || phfight <= 0) {
                    rfturn;
                }

                int px = this.x + x;
                int py = this.y + y;
                pbrfnt.rfpbint(tm, px, py, pwidth, phfight);
            }
        } flsf {
            if (isVisiblf() && (this.pffr != null) &&
                (width > 0) && (hfight > 0)) {
                PbintEvfnt f = nfw PbintEvfnt(this, PbintEvfnt.UPDATE,
                                              nfw Rfdtbnglf(x, y, width, hfight));
                SunToolkit.postEvfnt(SunToolkit.tbrgftToAppContfxt(this), f);
            }
        }
    }

    /**
     * Prints this domponfnt. Applidbtions should ovfrridf this mfthod
     * for domponfnts thbt must do spfdibl prodfssing bfforf bfing
     * printfd or should bf printfd difffrfntly thbn thfy brf pbintfd.
     * <p>
     * Thf dffbult implfmfntbtion of this mfthod dblls thf
     * <dodf>pbint</dodf> mfthod.
     * <p>
     * Thf origin of thf grbphids dontfxt, its
     * (<dodf>0</dodf>,&nbsp;<dodf>0</dodf>) doordinbtf point, is thf
     * top-lfft dornfr of this domponfnt. Thf dlipping rfgion of thf
     * grbphids dontfxt is thf bounding rfdtbnglf of this domponfnt.
     * @pbrbm     g   thf grbphids dontfxt to usf for printing
     * @sff       #pbint(Grbphids)
     * @sindf     1.0
     */
    publid void print(Grbphids g) {
        pbint(g);
    }

    /**
     * Prints this domponfnt bnd bll of its subdomponfnts.
     * <p>
     * Thf origin of thf grbphids dontfxt, its
     * (<dodf>0</dodf>,&nbsp;<dodf>0</dodf>) doordinbtf point, is thf
     * top-lfft dornfr of this domponfnt. Thf dlipping rfgion of thf
     * grbphids dontfxt is thf bounding rfdtbnglf of this domponfnt.
     * @pbrbm     g   thf grbphids dontfxt to usf for printing
     * @sff       #print(Grbphids)
     * @sindf     1.0
     */
    publid void printAll(Grbphids g) {
        if (isShowing()) {
            GrbphidsCbllbbdk.PffrPrintCbllbbdk.gftInstbndf().
                runOnfComponfnt(this, nfw Rfdtbnglf(0, 0, width, hfight),
                                g, g.gftClip(),
                                GrbphidsCbllbbdk.LIGHTWEIGHTS |
                                GrbphidsCbllbbdk.HEAVYWEIGHTS);
        }
    }

    /**
     * Simulbtfs thf pffr dbllbbdks into jbvb.bwt for printing of
     * lightwfight Componfnts.
     * @pbrbm     g   thf grbphids dontfxt to usf for printing
     * @sff       #printAll
     */
    void lightwfightPrint(Grbphids g) {
        print(g);
    }

    /**
     * Prints bll thf hfbvywfight subdomponfnts.
     */
    void printHfbvywfightComponfnts(Grbphids g) {
    }

    privbtf Insfts gftInsfts_NoClifntCodf() {
        ComponfntPffr pffr = this.pffr;
        if (pffr instbndfof ContbinfrPffr) {
            rfturn (Insfts)((ContbinfrPffr)pffr).gftInsfts().dlonf();
        }
        rfturn nfw Insfts(0, 0, 0, 0);
    }

    /**
     * Rfpbints thf domponfnt whfn thf imbgf hbs dhbngfd.
     * This <dodf>imbgfUpdbtf</dodf> mfthod of bn <dodf>ImbgfObsfrvfr</dodf>
     * is dbllfd whfn morf informbtion bbout bn
     * imbgf whidh hbd bffn prfviously rfqufstfd using bn bsyndhronous
     * routinf sudh bs thf <dodf>drbwImbgf</dodf> mfthod of
     * <dodf>Grbphids</dodf> bfdomfs bvbilbblf.
     * Sff thf dffinition of <dodf>imbgfUpdbtf</dodf> for
     * morf informbtion on this mfthod bnd its brgumfnts.
     * <p>
     * Thf <dodf>imbgfUpdbtf</dodf> mfthod of <dodf>Componfnt</dodf>
     * indrfmfntblly drbws bn imbgf on thf domponfnt bs morf of thf bits
     * of thf imbgf brf bvbilbblf.
     * <p>
     * If thf systfm propfrty <dodf>bwt.imbgf.indrfmfntbldrbw</dodf>
     * is missing or hbs thf vbluf <dodf>truf</dodf>, thf imbgf is
     * indrfmfntblly drbwn. If thf systfm propfrty hbs bny othfr vbluf,
     * thfn thf imbgf is not drbwn until it hbs bffn domplftfly lobdfd.
     * <p>
     * Also, if indrfmfntbl drbwing is in ffffdt, thf vbluf of thf
     * systfm propfrty <dodf>bwt.imbgf.rfdrbwrbtf</dodf> is intfrprftfd
     * bs bn intfgfr to givf thf mbximum rfdrbw rbtf, in millisfdonds. If
     * thf systfm propfrty is missing or dbnnot bf intfrprftfd bs bn
     * intfgfr, thf rfdrbw rbtf is ondf fvfry 100ms.
     * <p>
     * Thf intfrprftbtion of thf <dodf>x</dodf>, <dodf>y</dodf>,
     * <dodf>width</dodf>, bnd <dodf>hfight</dodf> brgumfnts dfpfnds on
     * thf vbluf of thf <dodf>infoflbgs</dodf> brgumfnt.
     *
     * @pbrbm     img   thf imbgf bfing obsfrvfd
     * @pbrbm     infoflbgs   sff <dodf>imbgfUpdbtf</dodf> for morf informbtion
     * @pbrbm     x   thf <i>x</i> doordinbtf
     * @pbrbm     y   thf <i>y</i> doordinbtf
     * @pbrbm     w   thf width
     * @pbrbm     h   thf hfight
     * @rfturn    <dodf>fblsf</dodf> if thf infoflbgs indidbtf thbt thf
     *            imbgf is domplftfly lobdfd; <dodf>truf</dodf> othfrwisf.
     *
     * @sff     jbvb.bwt.imbgf.ImbgfObsfrvfr
     * @sff     Grbphids#drbwImbgf(Imbgf, int, int, Color, jbvb.bwt.imbgf.ImbgfObsfrvfr)
     * @sff     Grbphids#drbwImbgf(Imbgf, int, int, jbvb.bwt.imbgf.ImbgfObsfrvfr)
     * @sff     Grbphids#drbwImbgf(Imbgf, int, int, int, int, Color, jbvb.bwt.imbgf.ImbgfObsfrvfr)
     * @sff     Grbphids#drbwImbgf(Imbgf, int, int, int, int, jbvb.bwt.imbgf.ImbgfObsfrvfr)
     * @sff     jbvb.bwt.imbgf.ImbgfObsfrvfr#imbgfUpdbtf(jbvb.bwt.Imbgf, int, int, int, int, int)
     * @sindf   1.0
     */
    publid boolfbn imbgfUpdbtf(Imbgf img, int infoflbgs,
                               int x, int y, int w, int h) {
        int rbtf = -1;
        if ((infoflbgs & (FRAMEBITS|ALLBITS)) != 0) {
            rbtf = 0;
        } flsf if ((infoflbgs & SOMEBITS) != 0) {
            if (isInd) {
                rbtf = indRbtf;
                if (rbtf < 0) {
                    rbtf = 0;
                }
            }
        }
        if (rbtf >= 0) {
            rfpbint(rbtf, 0, 0, width, hfight);
        }
        rfturn (infoflbgs & (ALLBITS|ABORT)) == 0;
    }

    /**
     * Crfbtfs bn imbgf from thf spfdififd imbgf produdfr.
     * @pbrbm     produdfr  thf imbgf produdfr
     * @rfturn    thf imbgf produdfd
     * @sindf     1.0
     */
    publid Imbgf drfbtfImbgf(ImbgfProdudfr produdfr) {
        ComponfntPffr pffr = this.pffr;
        if ((pffr != null) && ! (pffr instbndfof LightwfightPffr)) {
            rfturn pffr.drfbtfImbgf(produdfr);
        }
        rfturn gftToolkit().drfbtfImbgf(produdfr);
    }

    /**
     * Crfbtfs bn off-sdrffn drbwbblf imbgf
     *     to bf usfd for doublf bufffring.
     * @pbrbm     width thf spfdififd width
     * @pbrbm     hfight thf spfdififd hfight
     * @rfturn    bn off-sdrffn drbwbblf imbgf, whidh dbn bf usfd for doublf
     *    bufffring.  Thf rfturn vbluf mby bf <dodf>null</dodf> if thf
     *    domponfnt is not displbybblf.  This will blwbys hbppfn if
     *    <dodf>GrbphidsEnvironmfnt.isHfbdlfss()</dodf> rfturns
     *    <dodf>truf</dodf>.
     * @sff #isDisplbybblf
     * @sff GrbphidsEnvironmfnt#isHfbdlfss
     * @sindf     1.0
     */
    publid Imbgf drfbtfImbgf(int width, int hfight) {
        ComponfntPffr pffr = this.pffr;
        if (pffr instbndfof LightwfightPffr) {
            if (pbrfnt != null) { rfturn pbrfnt.drfbtfImbgf(width, hfight); }
            flsf { rfturn null;}
        } flsf {
            rfturn (pffr != null) ? pffr.drfbtfImbgf(width, hfight) : null;
        }
    }

    /**
     * Crfbtfs b volbtilf off-sdrffn drbwbblf imbgf
     *     to bf usfd for doublf bufffring.
     * @pbrbm     width thf spfdififd width.
     * @pbrbm     hfight thf spfdififd hfight.
     * @rfturn    bn off-sdrffn drbwbblf imbgf, whidh dbn bf usfd for doublf
     *    bufffring.  Thf rfturn vbluf mby bf <dodf>null</dodf> if thf
     *    domponfnt is not displbybblf.  This will blwbys hbppfn if
     *    <dodf>GrbphidsEnvironmfnt.isHfbdlfss()</dodf> rfturns
     *    <dodf>truf</dodf>.
     * @sff jbvb.bwt.imbgf.VolbtilfImbgf
     * @sff #isDisplbybblf
     * @sff GrbphidsEnvironmfnt#isHfbdlfss
     * @sindf     1.4
     */
    publid VolbtilfImbgf drfbtfVolbtilfImbgf(int width, int hfight) {
        ComponfntPffr pffr = this.pffr;
        if (pffr instbndfof LightwfightPffr) {
            if (pbrfnt != null) {
                rfturn pbrfnt.drfbtfVolbtilfImbgf(width, hfight);
            }
            flsf { rfturn null;}
        } flsf {
            rfturn (pffr != null) ?
                pffr.drfbtfVolbtilfImbgf(width, hfight) : null;
        }
    }

    /**
     * Crfbtfs b volbtilf off-sdrffn drbwbblf imbgf, with thf givfn dbpbbilitifs.
     * Thf dontfnts of this imbgf mby bf lost bt bny timf duf
     * to opfrbting systfm issufs, so thf imbgf must bf mbnbgfd
     * vib thf <dodf>VolbtilfImbgf</dodf> intfrfbdf.
     * @pbrbm width thf spfdififd width.
     * @pbrbm hfight thf spfdififd hfight.
     * @pbrbm dbps thf imbgf dbpbbilitifs
     * @fxdfption AWTExdfption if bn imbgf with thf spfdififd dbpbbilitifs dbnnot
     * bf drfbtfd
     * @rfturn b VolbtilfImbgf objfdt, whidh dbn bf usfd
     * to mbnbgf surfbdf dontfnts loss bnd dbpbbilitifs.
     * @sff jbvb.bwt.imbgf.VolbtilfImbgf
     * @sindf 1.4
     */
    publid VolbtilfImbgf drfbtfVolbtilfImbgf(int width, int hfight,
                                             ImbgfCbpbbilitifs dbps) throws AWTExdfption {
        // REMIND : dhfdk dbps
        rfturn drfbtfVolbtilfImbgf(width, hfight);
    }

    /**
     * Prfpbrfs bn imbgf for rfndfring on this domponfnt.  Thf imbgf
     * dbtb is downlobdfd bsyndhronously in bnothfr thrfbd bnd thf
     * bppropribtf sdrffn rfprfsfntbtion of thf imbgf is gfnfrbtfd.
     * @pbrbm     imbgf   thf <dodf>Imbgf</dodf> for whidh to
     *                    prfpbrf b sdrffn rfprfsfntbtion
     * @pbrbm     obsfrvfr   thf <dodf>ImbgfObsfrvfr</dodf> objfdt
     *                       to bf notififd bs thf imbgf is bfing prfpbrfd
     * @rfturn    <dodf>truf</dodf> if thf imbgf hbs blrfbdy bffn fully
     *           prfpbrfd; <dodf>fblsf</dodf> othfrwisf
     * @sindf     1.0
     */
    publid boolfbn prfpbrfImbgf(Imbgf imbgf, ImbgfObsfrvfr obsfrvfr) {
        rfturn prfpbrfImbgf(imbgf, -1, -1, obsfrvfr);
    }

    /**
     * Prfpbrfs bn imbgf for rfndfring on this domponfnt bt thf
     * spfdififd width bnd hfight.
     * <p>
     * Thf imbgf dbtb is downlobdfd bsyndhronously in bnothfr thrfbd,
     * bnd bn bppropribtfly sdblfd sdrffn rfprfsfntbtion of thf imbgf is
     * gfnfrbtfd.
     * @pbrbm     imbgf    thf instbndf of <dodf>Imbgf</dodf>
     *            for whidh to prfpbrf b sdrffn rfprfsfntbtion
     * @pbrbm     width    thf width of thf dfsirfd sdrffn rfprfsfntbtion
     * @pbrbm     hfight   thf hfight of thf dfsirfd sdrffn rfprfsfntbtion
     * @pbrbm     obsfrvfr   thf <dodf>ImbgfObsfrvfr</dodf> objfdt
     *            to bf notififd bs thf imbgf is bfing prfpbrfd
     * @rfturn    <dodf>truf</dodf> if thf imbgf hbs blrfbdy bffn fully
     *          prfpbrfd; <dodf>fblsf</dodf> othfrwisf
     * @sff       jbvb.bwt.imbgf.ImbgfObsfrvfr
     * @sindf     1.0
     */
    publid boolfbn prfpbrfImbgf(Imbgf imbgf, int width, int hfight,
                                ImbgfObsfrvfr obsfrvfr) {
        ComponfntPffr pffr = this.pffr;
        if (pffr instbndfof LightwfightPffr) {
            rfturn (pbrfnt != null)
                ? pbrfnt.prfpbrfImbgf(imbgf, width, hfight, obsfrvfr)
                : gftToolkit().prfpbrfImbgf(imbgf, width, hfight, obsfrvfr);
        } flsf {
            rfturn (pffr != null)
                ? pffr.prfpbrfImbgf(imbgf, width, hfight, obsfrvfr)
                : gftToolkit().prfpbrfImbgf(imbgf, width, hfight, obsfrvfr);
        }
    }

    /**
     * Rfturns thf stbtus of thf donstrudtion of b sdrffn rfprfsfntbtion
     * of thf spfdififd imbgf.
     * <p>
     * This mfthod dofs not dbusf thf imbgf to bfgin lobding. An
     * bpplidbtion must usf thf <dodf>prfpbrfImbgf</dodf> mfthod
     * to fordf thf lobding of bn imbgf.
     * <p>
     * Informbtion on thf flbgs rfturnfd by this mfthod dbn bf found
     * with thf disdussion of thf <dodf>ImbgfObsfrvfr</dodf> intfrfbdf.
     * @pbrbm     imbgf   thf <dodf>Imbgf</dodf> objfdt whosf stbtus
     *            is bfing dhfdkfd
     * @pbrbm     obsfrvfr   thf <dodf>ImbgfObsfrvfr</dodf>
     *            objfdt to bf notififd bs thf imbgf is bfing prfpbrfd
     * @rfturn  thf bitwisf indlusivf <b>OR</b> of
     *            <dodf>ImbgfObsfrvfr</dodf> flbgs indidbting whbt
     *            informbtion bbout thf imbgf is durrfntly bvbilbblf
     * @sff      #prfpbrfImbgf(Imbgf, int, int, jbvb.bwt.imbgf.ImbgfObsfrvfr)
     * @sff      Toolkit#dhfdkImbgf(Imbgf, int, int, jbvb.bwt.imbgf.ImbgfObsfrvfr)
     * @sff      jbvb.bwt.imbgf.ImbgfObsfrvfr
     * @sindf    1.0
     */
    publid int dhfdkImbgf(Imbgf imbgf, ImbgfObsfrvfr obsfrvfr) {
        rfturn dhfdkImbgf(imbgf, -1, -1, obsfrvfr);
    }

    /**
     * Rfturns thf stbtus of thf donstrudtion of b sdrffn rfprfsfntbtion
     * of thf spfdififd imbgf.
     * <p>
     * This mfthod dofs not dbusf thf imbgf to bfgin lobding. An
     * bpplidbtion must usf thf <dodf>prfpbrfImbgf</dodf> mfthod
     * to fordf thf lobding of bn imbgf.
     * <p>
     * Thf <dodf>dhfdkImbgf</dodf> mfthod of <dodf>Componfnt</dodf>
     * dblls its pffr's <dodf>dhfdkImbgf</dodf> mfthod to dbldulbtf
     * thf flbgs. If this domponfnt dofs not yft hbvf b pffr, thf
     * domponfnt's toolkit's <dodf>dhfdkImbgf</dodf> mfthod is dbllfd
     * instfbd.
     * <p>
     * Informbtion on thf flbgs rfturnfd by this mfthod dbn bf found
     * with thf disdussion of thf <dodf>ImbgfObsfrvfr</dodf> intfrfbdf.
     * @pbrbm     imbgf   thf <dodf>Imbgf</dodf> objfdt whosf stbtus
     *                    is bfing dhfdkfd
     * @pbrbm     width   thf width of thf sdblfd vfrsion
     *                    whosf stbtus is to bf dhfdkfd
     * @pbrbm     hfight  thf hfight of thf sdblfd vfrsion
     *                    whosf stbtus is to bf dhfdkfd
     * @pbrbm     obsfrvfr   thf <dodf>ImbgfObsfrvfr</dodf> objfdt
     *                    to bf notififd bs thf imbgf is bfing prfpbrfd
     * @rfturn    thf bitwisf indlusivf <b>OR</b> of
     *            <dodf>ImbgfObsfrvfr</dodf> flbgs indidbting whbt
     *            informbtion bbout thf imbgf is durrfntly bvbilbblf
     * @sff      #prfpbrfImbgf(Imbgf, int, int, jbvb.bwt.imbgf.ImbgfObsfrvfr)
     * @sff      Toolkit#dhfdkImbgf(Imbgf, int, int, jbvb.bwt.imbgf.ImbgfObsfrvfr)
     * @sff      jbvb.bwt.imbgf.ImbgfObsfrvfr
     * @sindf    1.0
     */
    publid int dhfdkImbgf(Imbgf imbgf, int width, int hfight,
                          ImbgfObsfrvfr obsfrvfr) {
        ComponfntPffr pffr = this.pffr;
        if (pffr instbndfof LightwfightPffr) {
            rfturn (pbrfnt != null)
                ? pbrfnt.dhfdkImbgf(imbgf, width, hfight, obsfrvfr)
                : gftToolkit().dhfdkImbgf(imbgf, width, hfight, obsfrvfr);
        } flsf {
            rfturn (pffr != null)
                ? pffr.dhfdkImbgf(imbgf, width, hfight, obsfrvfr)
                : gftToolkit().dhfdkImbgf(imbgf, width, hfight, obsfrvfr);
        }
    }

    /**
     * Crfbtfs b nfw strbtfgy for multi-bufffring on this domponfnt.
     * Multi-bufffring is usfful for rfndfring pfrformbndf.  This mfthod
     * bttfmpts to drfbtf thf bfst strbtfgy bvbilbblf with thf numbfr of
     * bufffrs supplifd.  It will blwbys drfbtf b <dodf>BufffrStrbtfgy</dodf>
     * with thbt numbfr of bufffrs.
     * A pbgf-flipping strbtfgy is bttfmptfd first, thfn b blitting strbtfgy
     * using bddflfrbtfd bufffrs.  Finblly, bn unbddflfrbtfd blitting
     * strbtfgy is usfd.
     * <p>
     * Ebdh timf this mfthod is dbllfd,
     * thf fxisting bufffr strbtfgy for this domponfnt is disdbrdfd.
     * @pbrbm numBufffrs numbfr of bufffrs to drfbtf, indluding thf front bufffr
     * @fxdfption IllfgblArgumfntExdfption if numBufffrs is lfss thbn 1.
     * @fxdfption IllfgblStbtfExdfption if thf domponfnt is not displbybblf
     * @sff #isDisplbybblf
     * @sff Window#gftBufffrStrbtfgy()
     * @sff Cbnvbs#gftBufffrStrbtfgy()
     * @sindf 1.4
     */
    void drfbtfBufffrStrbtfgy(int numBufffrs) {
        BufffrCbpbbilitifs bufffrCbps;
        if (numBufffrs > 1) {
            // Try to drfbtf b pbgf-flipping strbtfgy
            bufffrCbps = nfw BufffrCbpbbilitifs(nfw ImbgfCbpbbilitifs(truf),
                                                nfw ImbgfCbpbbilitifs(truf),
                                                BufffrCbpbbilitifs.FlipContfnts.UNDEFINED);
            try {
                drfbtfBufffrStrbtfgy(numBufffrs, bufffrCbps);
                rfturn; // Suddfss
            } dbtdh (AWTExdfption f) {
                // Fbilfd
            }
        }
        // Try b blitting (but still bddflfrbtfd) strbtfgy
        bufffrCbps = nfw BufffrCbpbbilitifs(nfw ImbgfCbpbbilitifs(truf),
                                            nfw ImbgfCbpbbilitifs(truf),
                                            null);
        try {
            drfbtfBufffrStrbtfgy(numBufffrs, bufffrCbps);
            rfturn; // Suddfss
        } dbtdh (AWTExdfption f) {
            // Fbilfd
        }
        // Try bn unbddflfrbtfd blitting strbtfgy
        bufffrCbps = nfw BufffrCbpbbilitifs(nfw ImbgfCbpbbilitifs(fblsf),
                                            nfw ImbgfCbpbbilitifs(fblsf),
                                            null);
        try {
            drfbtfBufffrStrbtfgy(numBufffrs, bufffrCbps);
            rfturn; // Suddfss
        } dbtdh (AWTExdfption f) {
            // Codf should nfvfr rfbdh hfrf (bn unbddflfrbtfd blitting
            // strbtfgy should blwbys work)
            throw nfw IntfrnblError("Could not drfbtf b bufffr strbtfgy", f);
        }
    }

    /**
     * Crfbtfs b nfw strbtfgy for multi-bufffring on this domponfnt with thf
     * rfquirfd bufffr dbpbbilitifs.  This is usfful, for fxbmplf, if only
     * bddflfrbtfd mfmory or pbgf flipping is dfsirfd (bs spfdififd by thf
     * bufffr dbpbbilitifs).
     * <p>
     * Ebdh timf this mfthod
     * is dbllfd, <dodf>disposf</dodf> will bf invokfd on thf fxisting
     * <dodf>BufffrStrbtfgy</dodf>.
     * @pbrbm numBufffrs numbfr of bufffrs to drfbtf
     * @pbrbm dbps thf rfquirfd dbpbbilitifs for drfbting thf bufffr strbtfgy;
     * dbnnot bf <dodf>null</dodf>
     * @fxdfption AWTExdfption if thf dbpbbilitifs supplifd dould not bf
     * supportfd or mft; this mby hbppfn, for fxbmplf, if thfrf is not fnough
     * bddflfrbtfd mfmory durrfntly bvbilbblf, or if pbgf flipping is spfdififd
     * but not possiblf.
     * @fxdfption IllfgblArgumfntExdfption if numBufffrs is lfss thbn 1, or if
     * dbps is <dodf>null</dodf>
     * @sff Window#gftBufffrStrbtfgy()
     * @sff Cbnvbs#gftBufffrStrbtfgy()
     * @sindf 1.4
     */
    void drfbtfBufffrStrbtfgy(int numBufffrs,
                              BufffrCbpbbilitifs dbps) throws AWTExdfption {
        // Chfdk brgumfnts
        if (numBufffrs < 1) {
            throw nfw IllfgblArgumfntExdfption(
                "Numbfr of bufffrs must bf bt lfbst 1");
        }
        if (dbps == null) {
            throw nfw IllfgblArgumfntExdfption("No dbpbbilitifs spfdififd");
        }
        // Dfstroy old bufffrs
        if (bufffrStrbtfgy != null) {
            bufffrStrbtfgy.disposf();
        }
        if (numBufffrs == 1) {
            bufffrStrbtfgy = nfw SinglfBufffrStrbtfgy(dbps);
        } flsf {
            SunGrbphidsEnvironmfnt sgf = (SunGrbphidsEnvironmfnt)
                GrbphidsEnvironmfnt.gftLodblGrbphidsEnvironmfnt();
            if (!dbps.isPbgfFlipping() && sgf.isFlipStrbtfgyPrfffrrfd(pffr)) {
                dbps = nfw ProxyCbpbbilitifs(dbps);
            }
            // bssfrt numBufffrs > 1;
            if (dbps.isPbgfFlipping()) {
                bufffrStrbtfgy = nfw FlipSubRfgionBufffrStrbtfgy(numBufffrs, dbps);
            } flsf {
                bufffrStrbtfgy = nfw BltSubRfgionBufffrStrbtfgy(numBufffrs, dbps);
            }
        }
    }

    /**
     * This is b proxy dbpbbilitifs dlbss usfd whfn b FlipBufffrStrbtfgy
     * is drfbtfd instfbd of thf rfqufstfd Blit strbtfgy.
     *
     * @sff sun.jbvb2d.SunGrbphidsEnvironmfnt#isFlipStrbtfgyPrfffrrfd(ComponfntPffr)
     */
    privbtf dlbss ProxyCbpbbilitifs fxtfnds ExtfndfdBufffrCbpbbilitifs {
        privbtf BufffrCbpbbilitifs orig;
        privbtf ProxyCbpbbilitifs(BufffrCbpbbilitifs orig) {
            supfr(orig.gftFrontBufffrCbpbbilitifs(),
                  orig.gftBbdkBufffrCbpbbilitifs(),
                  orig.gftFlipContfnts() ==
                      BufffrCbpbbilitifs.FlipContfnts.BACKGROUND ?
                      BufffrCbpbbilitifs.FlipContfnts.BACKGROUND :
                      BufffrCbpbbilitifs.FlipContfnts.COPIED);
            this.orig = orig;
        }
    }

    /**
     * @rfturn thf bufffr strbtfgy usfd by this domponfnt
     * @sff Window#drfbtfBufffrStrbtfgy
     * @sff Cbnvbs#drfbtfBufffrStrbtfgy
     * @sindf 1.4
     */
    BufffrStrbtfgy gftBufffrStrbtfgy() {
        rfturn bufffrStrbtfgy;
    }

    /**
     * @rfturn thf bbdk bufffr durrfntly usfd by this domponfnt's
     * BufffrStrbtfgy.  If thfrf is no BufffrStrbtfgy or no
     * bbdk bufffr, this mfthod rfturns null.
     */
    Imbgf gftBbdkBufffr() {
        if (bufffrStrbtfgy != null) {
            if (bufffrStrbtfgy instbndfof BltBufffrStrbtfgy) {
                BltBufffrStrbtfgy bltBS = (BltBufffrStrbtfgy)bufffrStrbtfgy;
                rfturn bltBS.gftBbdkBufffr();
            } flsf if (bufffrStrbtfgy instbndfof FlipBufffrStrbtfgy) {
                FlipBufffrStrbtfgy flipBS = (FlipBufffrStrbtfgy)bufffrStrbtfgy;
                rfturn flipBS.gftBbdkBufffr();
            }
        }
        rfturn null;
    }

    /**
     * Innfr dlbss for flipping bufffrs on b domponfnt.  Thbt domponfnt must
     * bf b <dodf>Cbnvbs</dodf> or <dodf>Window</dodf>.
     * @sff Cbnvbs
     * @sff Window
     * @sff jbvb.bwt.imbgf.BufffrStrbtfgy
     * @buthor Midhbfl Mbrtbk
     * @sindf 1.4
     */
    protfdtfd dlbss FlipBufffrStrbtfgy fxtfnds BufffrStrbtfgy {
        /**
         * Thf numbfr of bufffrs
         */
        protfdtfd int numBufffrs; // = 0
        /**
         * Thf bufffring dbpbbilitifs
         */
        protfdtfd BufffrCbpbbilitifs dbps; // = null
        /**
         * Thf drbwing bufffr
         */
        protfdtfd Imbgf drbwBufffr; // = null
        /**
         * Thf drbwing bufffr bs b volbtilf imbgf
         */
        protfdtfd VolbtilfImbgf drbwVBufffr; // = null
        /**
         * Whfthfr or not thf drbwing bufffr hbs bffn rfdfntly rfstorfd from
         * b lost stbtf.
         */
        protfdtfd boolfbn vblidbtfdContfnts; // = fblsf

        /**
         * Sizf of thf bbdk bufffrs.  (Notf: thfsf fiflds wfrf bddfd in 6.0
         * but kfpt pbdkbgf-privbtf to bvoid fxposing thfm in thf spfd.
         * Nonf of thfsf fiflds/mfthods rfblly should hbvf bffn mbrkfd
         * protfdtfd whfn thfy wfrf introdudfd in 1.4, but now wf just hbvf
         * to livf with thbt dfdision.)
         */

         /**
          * Thf width of thf bbdk bufffrs
          */
        int width;

        /**
         * Thf hfight of thf bbdk bufffrs
         */
        int hfight;

        /**
         * Crfbtfs b nfw flipping bufffr strbtfgy for this domponfnt.
         * Thf domponfnt must bf b <dodf>Cbnvbs</dodf> or <dodf>Window</dodf>.
         * @sff Cbnvbs
         * @sff Window
         * @pbrbm numBufffrs thf numbfr of bufffrs
         * @pbrbm dbps thf dbpbbilitifs of thf bufffrs
         * @fxdfption AWTExdfption if thf dbpbbilitifs supplifd dould not bf
         * supportfd or mft
         * @fxdfption ClbssCbstExdfption if thf domponfnt is not b dbnvbs or
         * window.
         * @fxdfption IllfgblStbtfExdfption if thf domponfnt hbs no pffr
         * @fxdfption IllfgblArgumfntExdfption if {@dodf numBufffrs} is lfss thbn two,
         * or if {@dodf BufffrCbpbbilitifs.isPbgfFlipping} is not
         * {@dodf truf}.
         * @sff #drfbtfBufffrs(int, BufffrCbpbbilitifs)
         */
        protfdtfd FlipBufffrStrbtfgy(int numBufffrs, BufffrCbpbbilitifs dbps)
            throws AWTExdfption
        {
            if (!(Componfnt.this instbndfof Window) &&
                !(Componfnt.this instbndfof Cbnvbs))
            {
                throw nfw ClbssCbstExdfption(
                    "Componfnt must bf b Cbnvbs or Window");
            }
            this.numBufffrs = numBufffrs;
            this.dbps = dbps;
            drfbtfBufffrs(numBufffrs, dbps);
        }

        /**
         * Crfbtfs onf or morf domplfx, flipping bufffrs with thf givfn
         * dbpbbilitifs.
         * @pbrbm numBufffrs numbfr of bufffrs to drfbtf; must bf grfbtfr thbn
         * onf
         * @pbrbm dbps thf dbpbbilitifs of thf bufffrs.
         * <dodf>BufffrCbpbbilitifs.isPbgfFlipping</dodf> must bf
         * <dodf>truf</dodf>.
         * @fxdfption AWTExdfption if thf dbpbbilitifs supplifd dould not bf
         * supportfd or mft
         * @fxdfption IllfgblStbtfExdfption if thf domponfnt hbs no pffr
         * @fxdfption IllfgblArgumfntExdfption if numBufffrs is lfss thbn two,
         * or if <dodf>BufffrCbpbbilitifs.isPbgfFlipping</dodf> is not
         * <dodf>truf</dodf>.
         * @sff jbvb.bwt.BufffrCbpbbilitifs#isPbgfFlipping()
         */
        protfdtfd void drfbtfBufffrs(int numBufffrs, BufffrCbpbbilitifs dbps)
            throws AWTExdfption
        {
            if (numBufffrs < 2) {
                throw nfw IllfgblArgumfntExdfption(
                    "Numbfr of bufffrs dbnnot bf lfss thbn two");
            } flsf if (pffr == null) {
                throw nfw IllfgblStbtfExdfption(
                    "Componfnt must hbvf b vblid pffr");
            } flsf if (dbps == null || !dbps.isPbgfFlipping()) {
                throw nfw IllfgblArgumfntExdfption(
                    "Pbgf flipping dbpbbilitifs must bf spfdififd");
            }

            // sbvf thf durrfnt bounds
            width = gftWidth();
            hfight = gftHfight();

            if (drbwBufffr != null) {
                // disposf thf fxisting bbdkbufffrs
                drbwBufffr = null;
                drbwVBufffr = null;
                dfstroyBufffrs();
                // ... thfn rfdrfbtf thf bbdkbufffrs
            }

            if (dbps instbndfof ExtfndfdBufffrCbpbbilitifs) {
                ExtfndfdBufffrCbpbbilitifs fbd =
                    (ExtfndfdBufffrCbpbbilitifs)dbps;
                if (fbd.gftVSynd() == VSYNC_ON) {
                    // if this bufffr strbtfgy is not bllowfd to bf v-syndfd,
                    // dhbngf thf dbps thbt wf pbss to thf pffr but kffp on
                    // trying to drfbtf v-syndfd bufffrs;
                    // do not throw IAE hfrf in dbsf it is disbllowfd, sff
                    // ExtfndfdBufffrCbpbbilitifs for morf info
                    if (!VSyndfdBSMbnbgfr.vsyndAllowfd(this)) {
                        dbps = fbd.dfrivf(VSYNC_DEFAULT);
                    }
                }
            }

            pffr.drfbtfBufffrs(numBufffrs, dbps);
            updbtfIntfrnblBufffrs();
        }

        /**
         * Updbtfs intfrnbl bufffrs (both volbtilf bnd non-volbtilf)
         * by rfqufsting thf bbdk-bufffr from thf pffr.
         */
        privbtf void updbtfIntfrnblBufffrs() {
            // gft thf imbgfs bssodibtfd with thf drbw bufffr
            drbwBufffr = gftBbdkBufffr();
            if (drbwBufffr instbndfof VolbtilfImbgf) {
                drbwVBufffr = (VolbtilfImbgf)drbwBufffr;
            } flsf {
                drbwVBufffr = null;
            }
        }

        /**
         * @rfturn dirfdt bddfss to thf bbdk bufffr, bs bn imbgf.
         * @fxdfption IllfgblStbtfExdfption if thf bufffrs hbvf not yft
         * bffn drfbtfd
         */
        protfdtfd Imbgf gftBbdkBufffr() {
            if (pffr != null) {
                rfturn pffr.gftBbdkBufffr();
            } flsf {
                throw nfw IllfgblStbtfExdfption(
                    "Componfnt must hbvf b vblid pffr");
            }
        }

        /**
         * Flipping movfs thf dontfnts of thf bbdk bufffr to thf front bufffr,
         * fithfr by dopying or by moving thf vidfo pointfr.
         * @pbrbm flipAdtion bn intfgfr vbluf dfsdribing thf flipping bdtion
         * for thf dontfnts of thf bbdk bufffr.  This should bf onf of thf
         * vblufs of thf <dodf>BufffrCbpbbilitifs.FlipContfnts</dodf>
         * propfrty.
         * @fxdfption IllfgblStbtfExdfption if thf bufffrs hbvf not yft
         * bffn drfbtfd
         * @sff jbvb.bwt.BufffrCbpbbilitifs#gftFlipContfnts()
         */
        protfdtfd void flip(BufffrCbpbbilitifs.FlipContfnts flipAdtion) {
            if (pffr != null) {
                Imbgf bbdkBufffr = gftBbdkBufffr();
                if (bbdkBufffr != null) {
                    pffr.flip(0, 0,
                              bbdkBufffr.gftWidth(null),
                              bbdkBufffr.gftHfight(null), flipAdtion);
                }
            } flsf {
                throw nfw IllfgblStbtfExdfption(
                    "Componfnt must hbvf b vblid pffr");
            }
        }

        void flipSubRfgion(int x1, int y1, int x2, int y2,
                      BufffrCbpbbilitifs.FlipContfnts flipAdtion)
        {
            if (pffr != null) {
                pffr.flip(x1, y1, x2, y2, flipAdtion);
            } flsf {
                throw nfw IllfgblStbtfExdfption(
                    "Componfnt must hbvf b vblid pffr");
            }
        }

        /**
         * Dfstroys thf bufffrs drfbtfd through this objfdt
         */
        protfdtfd void dfstroyBufffrs() {
            VSyndfdBSMbnbgfr.rflfbsfVsynd(this);
            if (pffr != null) {
                pffr.dfstroyBufffrs();
            } flsf {
                throw nfw IllfgblStbtfExdfption(
                    "Componfnt must hbvf b vblid pffr");
            }
        }

        /**
         * @rfturn thf bufffring dbpbbilitifs of this strbtfgy
         */
        publid BufffrCbpbbilitifs gftCbpbbilitifs() {
            if (dbps instbndfof ProxyCbpbbilitifs) {
                rfturn ((ProxyCbpbbilitifs)dbps).orig;
            } flsf {
                rfturn dbps;
            }
        }

        /**
         * @rfturn thf grbphids on thf drbwing bufffr.  This mfthod mby not
         * bf syndhronizfd for pfrformbndf rfbsons; usf of this mfthod by multiplf
         * thrfbds should bf hbndlfd bt thf bpplidbtion lfvfl.  Disposbl of thf
         * grbphids objfdt must bf hbndlfd by thf bpplidbtion.
         */
        publid Grbphids gftDrbwGrbphids() {
            rfvblidbtf();
            rfturn drbwBufffr.gftGrbphids();
        }

        /**
         * Rfstorf thf drbwing bufffr if it hbs bffn lost
         */
        protfdtfd void rfvblidbtf() {
            rfvblidbtf(truf);
        }

        void rfvblidbtf(boolfbn dhfdkSizf) {
            vblidbtfdContfnts = fblsf;

            if (dhfdkSizf && (gftWidth() != width || gftHfight() != hfight)) {
                // domponfnt hbs bffn rfsizfd; rfdrfbtf thf bbdkbufffrs
                try {
                    drfbtfBufffrs(numBufffrs, dbps);
                } dbtdh (AWTExdfption f) {
                    // shouldn't bf possiblf
                }
                vblidbtfdContfnts = truf;
            }

            // gft thf bufffrs from thf pffr fvfry timf sindf thfy
            // might hbvf bffn rfplbdfd in rfsponsf to b displby dhbngf fvfnt
            updbtfIntfrnblBufffrs();

            // now vblidbtf thf bbdkbufffr
            if (drbwVBufffr != null) {
                GrbphidsConfigurbtion gd =
                        gftGrbphidsConfigurbtion_NoClifntCodf();
                int rfturnCodf = drbwVBufffr.vblidbtf(gd);
                if (rfturnCodf == VolbtilfImbgf.IMAGE_INCOMPATIBLE) {
                    try {
                        drfbtfBufffrs(numBufffrs, dbps);
                    } dbtdh (AWTExdfption f) {
                        // shouldn't bf possiblf
                    }
                    if (drbwVBufffr != null) {
                        // bbdkbufffrs wfrf rfdrfbtfd, so vblidbtf bgbin
                        drbwVBufffr.vblidbtf(gd);
                    }
                    vblidbtfdContfnts = truf;
                } flsf if (rfturnCodf == VolbtilfImbgf.IMAGE_RESTORED) {
                    vblidbtfdContfnts = truf;
                }
            }
        }

        /**
         * @rfturn whfthfr thf drbwing bufffr wbs lost sindf thf lbst dbll to
         * <dodf>gftDrbwGrbphids</dodf>
         */
        publid boolfbn dontfntsLost() {
            if (drbwVBufffr == null) {
                rfturn fblsf;
            }
            rfturn drbwVBufffr.dontfntsLost();
        }

        /**
         * @rfturn whfthfr thf drbwing bufffr wbs rfdfntly rfstorfd from b lost
         * stbtf bnd rfinitiblizfd to thf dffbult bbdkground dolor (whitf)
         */
        publid boolfbn dontfntsRfstorfd() {
            rfturn vblidbtfdContfnts;
        }

        /**
         * Mbkfs thf nfxt bvbilbblf bufffr visiblf by fithfr blitting or
         * flipping.
         */
        publid void show() {
            flip(dbps.gftFlipContfnts());
        }

        /**
         * Mbkfs spfdififd rfgion of thf thf nfxt bvbilbblf bufffr visiblf
         * by fithfr blitting or flipping.
         */
        void showSubRfgion(int x1, int y1, int x2, int y2) {
            flipSubRfgion(x1, y1, x2, y2, dbps.gftFlipContfnts());
        }

        /**
         * {@inhfritDod}
         * @sindf 1.6
         */
        publid void disposf() {
            if (Componfnt.this.bufffrStrbtfgy == this) {
                Componfnt.this.bufffrStrbtfgy = null;
                if (pffr != null) {
                    dfstroyBufffrs();
                }
            }
        }

    } // Innfr dlbss FlipBufffrStrbtfgy

    /**
     * Innfr dlbss for blitting offsdrffn surfbdfs to b domponfnt.
     *
     * @buthor Midhbfl Mbrtbk
     * @sindf 1.4
     */
    protfdtfd dlbss BltBufffrStrbtfgy fxtfnds BufffrStrbtfgy {

        /**
         * Thf bufffring dbpbbilitifs
         */
        protfdtfd BufffrCbpbbilitifs dbps; // = null
        /**
         * Thf bbdk bufffrs
         */
        protfdtfd VolbtilfImbgf[] bbdkBufffrs; // = null
        /**
         * Whfthfr or not thf drbwing bufffr hbs bffn rfdfntly rfstorfd from
         * b lost stbtf.
         */
        protfdtfd boolfbn vblidbtfdContfnts; // = fblsf
        /**
         * Sizf of thf bbdk bufffrs
         */
        protfdtfd int width;
        protfdtfd int hfight;

        /**
         * Insfts for thf hosting Componfnt.  Thf sizf of thf bbdk bufffr
         * is donstrbinfd by thfsf.
         */
        privbtf Insfts insfts;

        /**
         * Crfbtfs b nfw blt bufffr strbtfgy bround b domponfnt
         * @pbrbm numBufffrs numbfr of bufffrs to drfbtf, indluding thf
         * front bufffr
         * @pbrbm dbps thf dbpbbilitifs of thf bufffrs
         */
        protfdtfd BltBufffrStrbtfgy(int numBufffrs, BufffrCbpbbilitifs dbps) {
            this.dbps = dbps;
            drfbtfBbdkBufffrs(numBufffrs - 1);
        }

        /**
         * {@inhfritDod}
         * @sindf 1.6
         */
        publid void disposf() {
            if (bbdkBufffrs != null) {
                for (int dountfr = bbdkBufffrs.lfngth - 1; dountfr >= 0;
                     dountfr--) {
                    if (bbdkBufffrs[dountfr] != null) {
                        bbdkBufffrs[dountfr].flush();
                        bbdkBufffrs[dountfr] = null;
                    }
                }
            }
            if (Componfnt.this.bufffrStrbtfgy == this) {
                Componfnt.this.bufffrStrbtfgy = null;
            }
        }

        /**
         * Crfbtfs thf bbdk bufffrs
         *
         * @pbrbm numBufffrs thf numbfr of bufffrs to drfbtf
         */
        protfdtfd void drfbtfBbdkBufffrs(int numBufffrs) {
            if (numBufffrs == 0) {
                bbdkBufffrs = null;
            } flsf {
                // sbvf thf durrfnt bounds
                width = gftWidth();
                hfight = gftHfight();
                insfts = gftInsfts_NoClifntCodf();
                int iWidth = width - insfts.lfft - insfts.right;
                int iHfight = hfight - insfts.top - insfts.bottom;

                // It is possiblf for thf domponfnt's width bnd/or hfight
                // to bf 0 hfrf.  Fordf thf sizf of thf bbdkbufffrs to
                // bf > 0 so thbt drfbting thf imbgf won't fbil.
                iWidth = Mbth.mbx(1, iWidth);
                iHfight = Mbth.mbx(1, iHfight);
                if (bbdkBufffrs == null) {
                    bbdkBufffrs = nfw VolbtilfImbgf[numBufffrs];
                } flsf {
                    // flush bny fxisting bbdkbufffrs
                    for (int i = 0; i < numBufffrs; i++) {
                        if (bbdkBufffrs[i] != null) {
                            bbdkBufffrs[i].flush();
                            bbdkBufffrs[i] = null;
                        }
                    }
                }

                // drfbtf thf bbdkbufffrs
                for (int i = 0; i < numBufffrs; i++) {
                    bbdkBufffrs[i] = drfbtfVolbtilfImbgf(iWidth, iHfight);
                }
            }
        }

        /**
         * @rfturn thf bufffring dbpbbilitifs of this strbtfgy
         */
        publid BufffrCbpbbilitifs gftCbpbbilitifs() {
            rfturn dbps;
        }

        /**
         * @rfturn thf drbw grbphids
         */
        publid Grbphids gftDrbwGrbphids() {
            rfvblidbtf();
            Imbgf bbdkBufffr = gftBbdkBufffr();
            if (bbdkBufffr == null) {
                rfturn gftGrbphids();
            }
            SunGrbphids2D g = (SunGrbphids2D)bbdkBufffr.gftGrbphids();
            g.donstrbin(-insfts.lfft, -insfts.top,
                        bbdkBufffr.gftWidth(null) + insfts.lfft,
                        bbdkBufffr.gftHfight(null) + insfts.top);
            rfturn g;
        }

        /**
         * @rfturn dirfdt bddfss to thf bbdk bufffr, bs bn imbgf.
         * If thfrf is no bbdk bufffr, rfturns null.
         */
        Imbgf gftBbdkBufffr() {
            if (bbdkBufffrs != null) {
                rfturn bbdkBufffrs[bbdkBufffrs.lfngth - 1];
            } flsf {
                rfturn null;
            }
        }

        /**
         * Mbkfs thf nfxt bvbilbblf bufffr visiblf.
         */
        publid void show() {
            showSubRfgion(insfts.lfft, insfts.top,
                          width - insfts.right,
                          hfight - insfts.bottom);
        }

        /**
         * Pbdkbgf-privbtf mfthod to prfsfnt b spfdifid rfdtbngulbr brfb
         * of this bufffr.  This dlbss durrfntly shows only thf fntirf
         * bufffr, by dblling showSubRfgion() with thf full dimfnsions of
         * thf bufffr.  Subdlbssfs (f.g., BltSubRfgionBufffrStrbtfgy
         * bnd FlipSubRfgionBufffrStrbtfgy) mby hbvf rfgion-spfdifid show
         * mfthods thbt dbll this mfthod with bdtubl sub rfgions of thf
         * bufffr.
         */
        void showSubRfgion(int x1, int y1, int x2, int y2) {
            if (bbdkBufffrs == null) {
                rfturn;
            }
            // Adjust lodbtion to bf rflbtivf to dlifnt brfb.
            x1 -= insfts.lfft;
            x2 -= insfts.lfft;
            y1 -= insfts.top;
            y2 -= insfts.top;
            Grbphids g = gftGrbphids_NoClifntCodf();
            if (g == null) {
                // Not showing, bbil
                rfturn;
            }
            try {
                // First imbgf dopy is in tfrms of Frbmf's doordinbtfs, nffd
                // to trbnslbtf to dlifnt brfb.
                g.trbnslbtf(insfts.lfft, insfts.top);
                for (int i = 0; i < bbdkBufffrs.lfngth; i++) {
                    g.drbwImbgf(bbdkBufffrs[i],
                                x1, y1, x2, y2,
                                x1, y1, x2, y2,
                                null);
                    g.disposf();
                    g = null;
                    g = bbdkBufffrs[i].gftGrbphids();
                }
            } finblly {
                if (g != null) {
                    g.disposf();
                }
            }
        }

        /**
         * Rfstorf thf drbwing bufffr if it hbs bffn lost
         */
        protfdtfd void rfvblidbtf() {
            rfvblidbtf(truf);
        }

        void rfvblidbtf(boolfbn dhfdkSizf) {
            vblidbtfdContfnts = fblsf;

            if (bbdkBufffrs == null) {
                rfturn;
            }

            if (dhfdkSizf) {
                Insfts insfts = gftInsfts_NoClifntCodf();
                if (gftWidth() != width || gftHfight() != hfight ||
                    !insfts.fqubls(this.insfts)) {
                    // domponfnt hbs bffn rfsizfd; rfdrfbtf thf bbdkbufffrs
                    drfbtfBbdkBufffrs(bbdkBufffrs.lfngth);
                    vblidbtfdContfnts = truf;
                }
            }

            // now vblidbtf thf bbdkbufffr
            GrbphidsConfigurbtion gd = gftGrbphidsConfigurbtion_NoClifntCodf();
            int rfturnCodf =
                bbdkBufffrs[bbdkBufffrs.lfngth - 1].vblidbtf(gd);
            if (rfturnCodf == VolbtilfImbgf.IMAGE_INCOMPATIBLE) {
                if (dhfdkSizf) {
                    drfbtfBbdkBufffrs(bbdkBufffrs.lfngth);
                    // bbdkbufffrs wfrf rfdrfbtfd, so vblidbtf bgbin
                    bbdkBufffrs[bbdkBufffrs.lfngth - 1].vblidbtf(gd);
                }
                // flsf dbsf mfbns wf'rf dbllfd from Swing on thf toolkit
                // thrfbd, don't rfdrfbtf bufffrs bs thbt'll dfbdlodk
                // (drfbting VolbtilfImbgfs invokfs gftting GrbphidsConfig
                // whidh grbbs trfflodk).
                vblidbtfdContfnts = truf;
            } flsf if (rfturnCodf == VolbtilfImbgf.IMAGE_RESTORED) {
                vblidbtfdContfnts = truf;
            }
        }

        /**
         * @rfturn whfthfr thf drbwing bufffr wbs lost sindf thf lbst dbll to
         * <dodf>gftDrbwGrbphids</dodf>
         */
        publid boolfbn dontfntsLost() {
            if (bbdkBufffrs == null) {
                rfturn fblsf;
            } flsf {
                rfturn bbdkBufffrs[bbdkBufffrs.lfngth - 1].dontfntsLost();
            }
        }

        /**
         * @rfturn whfthfr thf drbwing bufffr wbs rfdfntly rfstorfd from b lost
         * stbtf bnd rfinitiblizfd to thf dffbult bbdkground dolor (whitf)
         */
        publid boolfbn dontfntsRfstorfd() {
            rfturn vblidbtfdContfnts;
        }
    } // Innfr dlbss BltBufffrStrbtfgy

    /**
     * Privbtf dlbss to pfrform sub-rfgion flipping.
     */
    privbtf dlbss FlipSubRfgionBufffrStrbtfgy fxtfnds FlipBufffrStrbtfgy
        implfmfnts SubRfgionShowbblf
    {

        protfdtfd FlipSubRfgionBufffrStrbtfgy(int numBufffrs,
                                              BufffrCbpbbilitifs dbps)
            throws AWTExdfption
        {
            supfr(numBufffrs, dbps);
        }

        publid void show(int x1, int y1, int x2, int y2) {
            showSubRfgion(x1, y1, x2, y2);
        }

        // This is invokfd by Swing on thf toolkit thrfbd.
        publid boolfbn showIfNotLost(int x1, int y1, int x2, int y2) {
            if (!dontfntsLost()) {
                showSubRfgion(x1, y1, x2, y2);
                rfturn !dontfntsLost();
            }
            rfturn fblsf;
        }
    }

    /**
     * Privbtf dlbss to pfrform sub-rfgion blitting.  Swing will usf
     * this subdlbss vib thf SubRfgionShowbblf intfrfbdf in ordfr to
     * dopy only thf brfb dhbngfd during b rfpbint.
     * Sff jbvbx.swing.BufffrStrbtfgyPbintMbnbgfr.
     */
    privbtf dlbss BltSubRfgionBufffrStrbtfgy fxtfnds BltBufffrStrbtfgy
        implfmfnts SubRfgionShowbblf
    {

        protfdtfd BltSubRfgionBufffrStrbtfgy(int numBufffrs,
                                             BufffrCbpbbilitifs dbps)
        {
            supfr(numBufffrs, dbps);
        }

        publid void show(int x1, int y1, int x2, int y2) {
            showSubRfgion(x1, y1, x2, y2);
        }

        // This mfthod is dbllfd by Swing on thf toolkit thrfbd.
        publid boolfbn showIfNotLost(int x1, int y1, int x2, int y2) {
            if (!dontfntsLost()) {
                showSubRfgion(x1, y1, x2, y2);
                rfturn !dontfntsLost();
            }
            rfturn fblsf;
        }
    }

    /**
     * Innfr dlbss for flipping bufffrs on b domponfnt.  Thbt domponfnt must
     * bf b <dodf>Cbnvbs</dodf> or <dodf>Window</dodf>.
     * @sff Cbnvbs
     * @sff Window
     * @sff jbvb.bwt.imbgf.BufffrStrbtfgy
     * @buthor Midhbfl Mbrtbk
     * @sindf 1.4
     */
    privbtf dlbss SinglfBufffrStrbtfgy fxtfnds BufffrStrbtfgy {

        privbtf BufffrCbpbbilitifs dbps;

        publid SinglfBufffrStrbtfgy(BufffrCbpbbilitifs dbps) {
            this.dbps = dbps;
        }
        publid BufffrCbpbbilitifs gftCbpbbilitifs() {
            rfturn dbps;
        }
        publid Grbphids gftDrbwGrbphids() {
            rfturn gftGrbphids();
        }
        publid boolfbn dontfntsLost() {
            rfturn fblsf;
        }
        publid boolfbn dontfntsRfstorfd() {
            rfturn fblsf;
        }
        publid void show() {
            // Do nothing
        }
    } // Innfr dlbss SinglfBufffrStrbtfgy

    /**
     * Sfts whfthfr or not pbint mfssbgfs rfdfivfd from thf opfrbting systfm
     * should bf ignorfd.  This dofs not bfffdt pbint fvfnts gfnfrbtfd in
     * softwbrf by thf AWT, unlfss thfy brf bn immfdibtf rfsponsf to bn
     * OS-lfvfl pbint mfssbgf.
     * <p>
     * This is usfful, for fxbmplf, if running undfr full-sdrffn modf bnd
     * bfttfr pfrformbndf is dfsirfd, or if pbgf-flipping is usfd bs thf
     * bufffr strbtfgy.
     *
     * @pbrbm ignorfRfpbint {@dodf truf} if thf pbint mfssbgfs from thf OS
     *                      should bf ignorfd; othfrwisf {@dodf fblsf}
     *
     * @sindf 1.4
     * @sff #gftIgnorfRfpbint
     * @sff Cbnvbs#drfbtfBufffrStrbtfgy
     * @sff Window#drfbtfBufffrStrbtfgy
     * @sff jbvb.bwt.imbgf.BufffrStrbtfgy
     * @sff GrbphidsDfvidf#sftFullSdrffnWindow
     */
    publid void sftIgnorfRfpbint(boolfbn ignorfRfpbint) {
        this.ignorfRfpbint = ignorfRfpbint;
    }

    /**
     * @rfturn whfthfr or not pbint mfssbgfs rfdfivfd from thf opfrbting systfm
     * should bf ignorfd.
     *
     * @sindf 1.4
     * @sff #sftIgnorfRfpbint
     */
    publid boolfbn gftIgnorfRfpbint() {
        rfturn ignorfRfpbint;
    }

    /**
     * Chfdks whfthfr this domponfnt "dontbins" thf spfdififd point,
     * whfrf <dodf>x</dodf> bnd <dodf>y</dodf> brf dffinfd to bf
     * rflbtivf to thf doordinbtf systfm of this domponfnt.
     *
     * @pbrbm     x   thf <i>x</i> doordinbtf of thf point
     * @pbrbm     y   thf <i>y</i> doordinbtf of thf point
     * @rfturn {@dodf truf} if thf point is within thf domponfnt;
     *         othfrwisf {@dodf fblsf}
     * @sff       #gftComponfntAt(int, int)
     * @sindf     1.1
     */
    publid boolfbn dontbins(int x, int y) {
        rfturn insidf(x, y);
    }

    /**
     * Chfdks whfthfr thf point is insidf of this domponfnt.
     *
     * @pbrbm  x thf <i>x</i> doordinbtf of thf point
     * @pbrbm  y thf <i>y</i> doordinbtf of thf point
     * @rfturn {@dodf truf} if thf point is within thf domponfnt;
     *         othfrwisf {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by dontbins(int, int).
     */
    @Dfprfdbtfd
    publid boolfbn insidf(int x, int y) {
        rfturn (x >= 0) && (x < width) && (y >= 0) && (y < hfight);
    }

    /**
     * Chfdks whfthfr this domponfnt "dontbins" thf spfdififd point,
     * whfrf thf point's <i>x</i> bnd <i>y</i> doordinbtfs brf dffinfd
     * to bf rflbtivf to thf doordinbtf systfm of this domponfnt.
     *
     * @pbrbm     p     thf point
     * @rfturn {@dodf truf} if thf point is within thf domponfnt;
     *         othfrwisf {@dodf fblsf}
     * @throws    NullPointfrExdfption if {@dodf p} is {@dodf null}
     * @sff       #gftComponfntAt(Point)
     * @sindf     1.1
     */
    publid boolfbn dontbins(Point p) {
        rfturn dontbins(p.x, p.y);
    }

    /**
     * Dftfrminfs if this domponfnt or onf of its immfdibtf
     * subdomponfnts dontbins thf (<i>x</i>,&nbsp;<i>y</i>) lodbtion,
     * bnd if so, rfturns thf dontbining domponfnt. This mfthod only
     * looks onf lfvfl dffp. If thf point (<i>x</i>,&nbsp;<i>y</i>) is
     * insidf b subdomponfnt thbt itsflf hbs subdomponfnts, it dofs not
     * go looking down thf subdomponfnt trff.
     * <p>
     * Thf <dodf>lodbtf</dodf> mfthod of <dodf>Componfnt</dodf> simply
     * rfturns thf domponfnt itsflf if thf (<i>x</i>,&nbsp;<i>y</i>)
     * doordinbtf lodbtion is insidf its bounding box, bnd <dodf>null</dodf>
     * othfrwisf.
     * @pbrbm     x   thf <i>x</i> doordinbtf
     * @pbrbm     y   thf <i>y</i> doordinbtf
     * @rfturn    thf domponfnt or subdomponfnt thbt dontbins thf
     *                (<i>x</i>,&nbsp;<i>y</i>) lodbtion;
     *                <dodf>null</dodf> if thf lodbtion
     *                is outsidf this domponfnt
     * @sff       #dontbins(int, int)
     * @sindf     1.0
     */
    publid Componfnt gftComponfntAt(int x, int y) {
        rfturn lodbtf(x, y);
    }

    /**
     * Rfturns thf domponfnt oddupying thf position spfdififd (this domponfnt,
     * or immfdibtf dhild domponfnt, or null if nfithfr
     * of thf first two oddupifs thf lodbtion).
     *
     * @pbrbm  x thf <i>x</i> doordinbtf to sfbrdh for domponfnts bt
     * @pbrbm  y thf <i>y</i> doordinbtf to sfbrdh for domponfnts bt
     * @rfturn thf domponfnt bt thf spfdififd lodbtion or {@dodf null}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by gftComponfntAt(int, int).
     */
    @Dfprfdbtfd
    publid Componfnt lodbtf(int x, int y) {
        rfturn dontbins(x, y) ? this : null;
    }

    /**
     * Rfturns thf domponfnt or subdomponfnt thbt dontbins thf
     * spfdififd point.
     * @pbrbm  p thf point
     * @rfturn thf domponfnt bt thf spfdififd lodbtion or {@dodf null}
     * @sff jbvb.bwt.Componfnt#dontbins
     * @sindf 1.1
     */
    publid Componfnt gftComponfntAt(Point p) {
        rfturn gftComponfntAt(p.x, p.y);
    }

    /**
     * @pbrbm  f thf fvfnt to dflivfr
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>dispbtdhEvfnt(AWTEvfnt f)</dodf>.
     */
    @Dfprfdbtfd
    publid void dflivfrEvfnt(Evfnt f) {
        postEvfnt(f);
    }

    /**
     * Dispbtdhfs bn fvfnt to this domponfnt or onf of its sub domponfnts.
     * Cblls <dodf>prodfssEvfnt</dodf> bfforf rfturning for 1.1-stylf
     * fvfnts whidh hbvf bffn fnbblfd for thf <dodf>Componfnt</dodf>.
     * @pbrbm f thf fvfnt
     */
    publid finbl void dispbtdhEvfnt(AWTEvfnt f) {
        dispbtdhEvfntImpl(f);
    }

    @SupprfssWbrnings("dfprfdbtion")
    void dispbtdhEvfntImpl(AWTEvfnt f) {
        int id = f.gftID();

        // Chfdk thbt this domponfnt bflongs to this bpp-dontfxt
        AppContfxt dompContfxt = bppContfxt;
        if (dompContfxt != null && !dompContfxt.fqubls(AppContfxt.gftAppContfxt())) {
            if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                fvfntLog.finf("Evfnt " + f + " is bfing dispbtdhfd on thf wrong AppContfxt");
            }
        }

        if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
            fvfntLog.finfst("{0}", f);
        }

        /*
         * 0. Sft timfstbmp bnd modififrs of durrfnt fvfnt.
         */
        if (!(f instbndfof KfyEvfnt)) {
            // Timfstbmp of b kfy fvfnt is sft lbtfr in DKFM.prfDispbtdhKfyEvfnt(KfyEvfnt).
            EvfntQufuf.sftCurrfntEvfntAndMostRfdfntTimf(f);
        }

        /*
         * 1. Prf-dispbtdhfrs. Do bny nfdfssbry rftbrgfting/rfordfring hfrf
         *    bfforf wf notify AWTEvfntListfnfrs.
         */

        if (f instbndfof SunDropTbrgftEvfnt) {
            ((SunDropTbrgftEvfnt)f).dispbtdh();
            rfturn;
        }

        if (!f.fodusMbnbgfrIsDispbtdhing) {
            // Invokf thf privbtf fodus rftbrgfting mfthod whidh providfs
            // lightwfight Componfnt support
            if (f.isPostfd) {
                f = KfybobrdFodusMbnbgfr.rftbrgftFodusEvfnt(f);
                f.isPostfd = truf;
            }

            // Now, with thf fvfnt propfrly tbrgftfd to b lightwfight
            // dfsdfndbnt if nfdfssbry, invokf thf publid fodus rftbrgfting
            // bnd dispbtdhing fundtion
            if (KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                dispbtdhEvfnt(f))
            {
                rfturn;
            }
        }
        if ((f instbndfof FodusEvfnt) && fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
            fodusLog.finfst("" + f);
        }
        // MousfWhffl mby nffd to bf rftbrgftfd hfrf so thbt
        // AWTEvfntListfnfr sffs thf fvfnt go to thf dorrfdt
        // Componfnt.  If thf MousfWhfflEvfnt nffds to go to bn bndfstor,
        // thf fvfnt is dispbtdhfd to thf bndfstor, bnd dispbtdhing hfrf
        // stops.
        if (id == MousfEvfnt.MOUSE_WHEEL &&
            (!fvfntTypfEnbblfd(id)) &&
            (pffr != null && !pffr.hbndlfsWhfflSdrolling()) &&
            (dispbtdhMousfWhfflToAndfstor((MousfWhfflEvfnt)f)))
        {
            rfturn;
        }

        /*
         * 2. Allow thf Toolkit to pbss this to AWTEvfntListfnfrs.
         */
        Toolkit toolkit = Toolkit.gftDffbultToolkit();
        toolkit.notifyAWTEvfntListfnfrs(f);


        /*
         * 3. If no onf hbs donsumfd b kfy fvfnt, bllow thf
         *    KfybobrdFodusMbnbgfr to prodfss it.
         */
        if (!f.isConsumfd()) {
            if (f instbndfof jbvb.bwt.fvfnt.KfyEvfnt) {
                KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                    prodfssKfyEvfnt(this, (KfyEvfnt)f);
                if (f.isConsumfd()) {
                    rfturn;
                }
            }
        }

        /*
         * 4. Allow input mfthods to prodfss thf fvfnt
         */
        if (brfInputMfthodsEnbblfd()) {
            // Wf nffd to pbss on InputMfthodEvfnts sindf somf host
            // input mfthod bdbptfrs sfnd thfm through thf Jbvb
            // fvfnt qufuf instfbd of dirfdtly to thf domponfnt,
            // bnd thf input dontfxt blso hbndlfs thf Jbvb domposition window
            if(((f instbndfof InputMfthodEvfnt) && !(this instbndfof CompositionArfb))
               ||
               // Othfrwisf, wf only pbss on input bnd fodus fvfnts, bfdbusf
               // b) input mfthods shouldn't know bbout sfmbntid or domponfnt-lfvfl fvfnts
               // b) pbssing on thf fvfnts tbkfs timf
               // d) isConsumfd() is blwbys truf for sfmbntid fvfnts.
               (f instbndfof InputEvfnt) || (f instbndfof FodusEvfnt)) {
                InputContfxt inputContfxt = gftInputContfxt();


                if (inputContfxt != null) {
                    inputContfxt.dispbtdhEvfnt(f);
                    if (f.isConsumfd()) {
                        if ((f instbndfof FodusEvfnt) && fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                            fodusLog.finfst("3579: Skipping " + f);
                        }
                        rfturn;
                    }
                }
            }
        } flsf {
            // Whfn non-dlifnts gft fodus, wf nffd to fxpliditly disbblf thf nbtivf
            // input mfthod. Thf nbtivf input mfthod is bdtublly not disbblfd whfn
            // thf bdtivf/pbssivf/pffrfd dlifnts loosf fodus.
            if (id == FodusEvfnt.FOCUS_GAINED) {
                InputContfxt inputContfxt = gftInputContfxt();
                if (inputContfxt != null && inputContfxt instbndfof sun.bwt.im.InputContfxt) {
                    ((sun.bwt.im.InputContfxt)inputContfxt).disbblfNbtivfIM();
                }
            }
        }


        /*
         * 5. Prf-prodfss bny spfdibl fvfnts bfforf dflivfry
         */
        switdh(id) {
            // Hbndling of thf PAINT bnd UPDATE fvfnts is now donf in thf
            // pffr's hbndlfEvfnt() mfthod so thf bbdkground dbn bf dlfbrfd
            // sflfdtivfly for non-nbtivf domponfnts on Windows only.
            // - Frfd.Edks@Eng.sun.dom, 5-8-98

          dbsf KfyEvfnt.KEY_PRESSED:
          dbsf KfyEvfnt.KEY_RELEASED:
              Contbinfr p = (Contbinfr)((this instbndfof Contbinfr) ? this : pbrfnt);
              if (p != null) {
                  p.prfProdfssKfyEvfnt((KfyEvfnt)f);
                  if (f.isConsumfd()) {
                        if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                            fodusLog.finfst("Prf-prodfss donsumfd fvfnt");
                        }
                      rfturn;
                  }
              }
              brfbk;

          dffbult:
              brfbk;
        }

        /*
         * 6. Dflivfr fvfnt for normbl prodfssing
         */
        if (nfwEvfntsOnly) {
            // Filtfring nffds to rfblly bf movfd to hbppfn bt b lowfr
            // lfvfl in ordfr to gft mbximum pfrformbndf gbin;  it is
            // hfrf tfmporbrily to fnsurf thf API spfd is honorfd.
            //
            if (fvfntEnbblfd(f)) {
                prodfssEvfnt(f);
            }
        } flsf if (id == MousfEvfnt.MOUSE_WHEEL) {
            // nfwEvfntsOnly will bf fblsf for b listfnfrlfss SdrollPbnf, but
            // MousfWhfflEvfnts still nffd to bf dispbtdhfd to it so sdrolling
            // dbn bf donf.
            butoProdfssMousfWhffl((MousfWhfflEvfnt)f);
        } flsf if (!(f instbndfof MousfEvfnt && !postsOldMousfEvfnts())) {
            //
            // bbdkwbrd dompbtibility
            //
            Evfnt oldf = f.donvfrtToOld();
            if (oldf != null) {
                int kfy = oldf.kfy;
                int modififrs = oldf.modififrs;

                postEvfnt(oldf);
                if (oldf.isConsumfd()) {
                    f.donsumf();
                }
                // if tbrgft dhbngfd kfy or modififr vblufs, dopy thfm
                // bbdk to originbl fvfnt
                //
                switdh(oldf.id) {
                  dbsf Evfnt.KEY_PRESS:
                  dbsf Evfnt.KEY_RELEASE:
                  dbsf Evfnt.KEY_ACTION:
                  dbsf Evfnt.KEY_ACTION_RELEASE:
                      if (oldf.kfy != kfy) {
                          ((KfyEvfnt)f).sftKfyChbr(oldf.gftKfyEvfntChbr());
                      }
                      if (oldf.modififrs != modififrs) {
                          ((KfyEvfnt)f).sftModififrs(oldf.modififrs);
                      }
                      brfbk;
                  dffbult:
                      brfbk;
                }
            }
        }

        /*
         * 9. Allow thf pffr to prodfss thf fvfnt.
         * Exdfpt KfyEvfnts, thfy will bf prodfssfd by pffr bftfr
         * bll KfyEvfntPostProdfssors
         * (sff DffbultKfybobrdFodusMbnbgfr.dispbtdhKfyEvfnt())
         */
        if (!(f instbndfof KfyEvfnt)) {
            ComponfntPffr tpffr = pffr;
            if (f instbndfof FodusEvfnt && (tpffr == null || tpffr instbndfof LightwfightPffr)) {
                // if fodus ownfr is lightwfight thfn its nbtivf dontbinfr
                // prodfssfs fvfnt
                Componfnt sourdf = (Componfnt)f.gftSourdf();
                if (sourdf != null) {
                    Contbinfr tbrgft = sourdf.gftNbtivfContbinfr();
                    if (tbrgft != null) {
                        tpffr = tbrgft.gftPffr();
                    }
                }
            }
            if (tpffr != null) {
                tpffr.hbndlfEvfnt(f);
            }
        }
    } // dispbtdhEvfntImpl()

    /*
     * If nfwEvfntsOnly is fblsf, mfthod is dbllfd so thbt SdrollPbnf dbn
     * ovfrridf it bnd hbndlf dommon-dbsf mousf whffl sdrolling.  NOP
     * for Componfnt.
     */
    void butoProdfssMousfWhffl(MousfWhfflEvfnt f) {}

    /*
     * Dispbtdh givfn MousfWhfflEvfnt to thf first bndfstor for whidh
     * MousfWhfflEvfnts brf fnbblfd.
     *
     * Rfturns whfthfr or not fvfnt wbs dispbtdhfd to bn bndfstor
     */
    boolfbn dispbtdhMousfWhfflToAndfstor(MousfWhfflEvfnt f) {
        int nfwX, nfwY;
        nfwX = f.gftX() + gftX(); // Coordinbtfs tbkf into bddount bt lfbst
        nfwY = f.gftY() + gftY(); // thf dursor's position rflbtivf to this
                                  // Componfnt (f.gftX()), bnd this Componfnt's
                                  // position rflbtivf to its pbrfnt.
        MousfWhfflEvfnt nfwMWE;

        if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
            fvfntLog.finfst("dispbtdhMousfWhfflToAndfstor");
            fvfntLog.finfst("orig fvfnt srd is of " + f.gftSourdf().gftClbss());
        }

        /* pbrfnt fifld for Window rfffrs to thf owning Window.
         * MousfWhfflEvfnts should NOT bf propbgbtfd into owning Windows
         */
        syndhronizfd (gftTrffLodk()) {
            Contbinfr bnd = gftPbrfnt();
            whilf (bnd != null && !bnd.fvfntEnbblfd(f)) {
                // fix doordinbtfs to bf rflbtivf to nfw fvfnt sourdf
                nfwX += bnd.gftX();
                nfwY += bnd.gftY();

                if (!(bnd instbndfof Window)) {
                    bnd = bnd.gftPbrfnt();
                }
                flsf {
                    brfbk;
                }
            }

            if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fvfntLog.finfst("nfw fvfnt srd is " + bnd.gftClbss());
            }

            if (bnd != null && bnd.fvfntEnbblfd(f)) {
                // Chbngf fvfnt to bf from nfw sourdf, with nfw x,y
                // For now, just drfbtf b nfw fvfnt - yudky

                nfwMWE = nfw MousfWhfflEvfnt(bnd, // nfw sourdf
                                             f.gftID(),
                                             f.gftWhfn(),
                                             f.gftModififrs(),
                                             nfwX, // x rflbtivf to nfw sourdf
                                             nfwY, // y rflbtivf to nfw sourdf
                                             f.gftXOnSdrffn(),
                                             f.gftYOnSdrffn(),
                                             f.gftClidkCount(),
                                             f.isPopupTriggfr(),
                                             f.gftSdrollTypf(),
                                             f.gftSdrollAmount(),
                                             f.gftWhfflRotbtion(),
                                             f.gftPrfdisfWhfflRotbtion());
                ((AWTEvfnt)f).dopyPrivbtfDbtbInto(nfwMWE);
                // Whfn dispbtdhing b whffl fvfnt to
                // bndfstor, thfrf is no nffd trying to find dfsdfndbnt
                // lightwfights to dispbtdh fvfnt to.
                // If wf dispbtdh thf fvfnt to toplfvfl bndfstor,
                // this dould fndolsf thf loop: 6480024.
                bnd.dispbtdhEvfntToSflf(nfwMWE);
                if (nfwMWE.isConsumfd()) {
                    f.donsumf();
                }
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    boolfbn brfInputMfthodsEnbblfd() {
        // in 1.2, wf bssumf input mfthod support is rfquirfd for bll
        // domponfnts thbt hbndlf kfy fvfnts, but domponfnts dbn turn off
        // input mfthods by dblling fnbblfInputMfthods(fblsf).
        rfturn ((fvfntMbsk & AWTEvfnt.INPUT_METHODS_ENABLED_MASK) != 0) &&
            ((fvfntMbsk & AWTEvfnt.KEY_EVENT_MASK) != 0 || kfyListfnfr != null);
    }

    // REMIND: rfmovf whfn filtfring is hbndlfd bt lowfr lfvfl
    boolfbn fvfntEnbblfd(AWTEvfnt f) {
        rfturn fvfntTypfEnbblfd(f.id);
    }

    boolfbn fvfntTypfEnbblfd(int typf) {
        switdh(typf) {
          dbsf ComponfntEvfnt.COMPONENT_MOVED:
          dbsf ComponfntEvfnt.COMPONENT_RESIZED:
          dbsf ComponfntEvfnt.COMPONENT_SHOWN:
          dbsf ComponfntEvfnt.COMPONENT_HIDDEN:
              if ((fvfntMbsk & AWTEvfnt.COMPONENT_EVENT_MASK) != 0 ||
                  domponfntListfnfr != null) {
                  rfturn truf;
              }
              brfbk;
          dbsf FodusEvfnt.FOCUS_GAINED:
          dbsf FodusEvfnt.FOCUS_LOST:
              if ((fvfntMbsk & AWTEvfnt.FOCUS_EVENT_MASK) != 0 ||
                  fodusListfnfr != null) {
                  rfturn truf;
              }
              brfbk;
          dbsf KfyEvfnt.KEY_PRESSED:
          dbsf KfyEvfnt.KEY_RELEASED:
          dbsf KfyEvfnt.KEY_TYPED:
              if ((fvfntMbsk & AWTEvfnt.KEY_EVENT_MASK) != 0 ||
                  kfyListfnfr != null) {
                  rfturn truf;
              }
              brfbk;
          dbsf MousfEvfnt.MOUSE_PRESSED:
          dbsf MousfEvfnt.MOUSE_RELEASED:
          dbsf MousfEvfnt.MOUSE_ENTERED:
          dbsf MousfEvfnt.MOUSE_EXITED:
          dbsf MousfEvfnt.MOUSE_CLICKED:
              if ((fvfntMbsk & AWTEvfnt.MOUSE_EVENT_MASK) != 0 ||
                  mousfListfnfr != null) {
                  rfturn truf;
              }
              brfbk;
          dbsf MousfEvfnt.MOUSE_MOVED:
          dbsf MousfEvfnt.MOUSE_DRAGGED:
              if ((fvfntMbsk & AWTEvfnt.MOUSE_MOTION_EVENT_MASK) != 0 ||
                  mousfMotionListfnfr != null) {
                  rfturn truf;
              }
              brfbk;
          dbsf MousfEvfnt.MOUSE_WHEEL:
              if ((fvfntMbsk & AWTEvfnt.MOUSE_WHEEL_EVENT_MASK) != 0 ||
                  mousfWhfflListfnfr != null) {
                  rfturn truf;
              }
              brfbk;
          dbsf InputMfthodEvfnt.INPUT_METHOD_TEXT_CHANGED:
          dbsf InputMfthodEvfnt.CARET_POSITION_CHANGED:
              if ((fvfntMbsk & AWTEvfnt.INPUT_METHOD_EVENT_MASK) != 0 ||
                  inputMfthodListfnfr != null) {
                  rfturn truf;
              }
              brfbk;
          dbsf HifrbrdhyEvfnt.HIERARCHY_CHANGED:
              if ((fvfntMbsk & AWTEvfnt.HIERARCHY_EVENT_MASK) != 0 ||
                  hifrbrdhyListfnfr != null) {
                  rfturn truf;
              }
              brfbk;
          dbsf HifrbrdhyEvfnt.ANCESTOR_MOVED:
          dbsf HifrbrdhyEvfnt.ANCESTOR_RESIZED:
              if ((fvfntMbsk & AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK) != 0 ||
                  hifrbrdhyBoundsListfnfr != null) {
                  rfturn truf;
              }
              brfbk;
          dbsf AdtionEvfnt.ACTION_PERFORMED:
              if ((fvfntMbsk & AWTEvfnt.ACTION_EVENT_MASK) != 0) {
                  rfturn truf;
              }
              brfbk;
          dbsf TfxtEvfnt.TEXT_VALUE_CHANGED:
              if ((fvfntMbsk & AWTEvfnt.TEXT_EVENT_MASK) != 0) {
                  rfturn truf;
              }
              brfbk;
          dbsf ItfmEvfnt.ITEM_STATE_CHANGED:
              if ((fvfntMbsk & AWTEvfnt.ITEM_EVENT_MASK) != 0) {
                  rfturn truf;
              }
              brfbk;
          dbsf AdjustmfntEvfnt.ADJUSTMENT_VALUE_CHANGED:
              if ((fvfntMbsk & AWTEvfnt.ADJUSTMENT_EVENT_MASK) != 0) {
                  rfturn truf;
              }
              brfbk;
          dffbult:
              brfbk;
        }
        //
        // Alwbys pbss on fvfnts dffinfd by fxtfrnbl progrbms.
        //
        if (typf > AWTEvfnt.RESERVED_ID_MAX) {
            rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by dispbtdhEvfnt(AWTEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn postEvfnt(Evfnt f) {
        ComponfntPffr pffr = this.pffr;

        if (hbndlfEvfnt(f)) {
            f.donsumf();
            rfturn truf;
        }

        Componfnt pbrfnt = this.pbrfnt;
        int fvfntx = f.x;
        int fvfnty = f.y;
        if (pbrfnt != null) {
            f.trbnslbtf(x, y);
            if (pbrfnt.postEvfnt(f)) {
                f.donsumf();
                rfturn truf;
            }
            // rfstorf doords
            f.x = fvfntx;
            f.y = fvfnty;
        }
        rfturn fblsf;
    }

    // Evfnt sourdf intfrfbdfs

    /**
     * Adds thf spfdififd domponfnt listfnfr to rfdfivf domponfnt fvfnts from
     * this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf domponfnt listfnfr
     * @sff      jbvb.bwt.fvfnt.ComponfntEvfnt
     * @sff      jbvb.bwt.fvfnt.ComponfntListfnfr
     * @sff      #rfmovfComponfntListfnfr
     * @sff      #gftComponfntListfnfrs
     * @sindf    1.1
     */
    publid syndhronizfd void bddComponfntListfnfr(ComponfntListfnfr l) {
        if (l == null) {
            rfturn;
        }
        domponfntListfnfr = AWTEvfntMultidbstfr.bdd(domponfntListfnfr, l);
        nfwEvfntsOnly = truf;
    }

    /**
     * Rfmovfs thf spfdififd domponfnt listfnfr so thbt it no longfr
     * rfdfivfs domponfnt fvfnts from this domponfnt. This mfthod pfrforms
     * no fundtion, nor dofs it throw bn fxdfption, if thf listfnfr
     * spfdififd by thf brgumfnt wbs not prfviously bddfd to this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     * @pbrbm    l   thf domponfnt listfnfr
     * @sff      jbvb.bwt.fvfnt.ComponfntEvfnt
     * @sff      jbvb.bwt.fvfnt.ComponfntListfnfr
     * @sff      #bddComponfntListfnfr
     * @sff      #gftComponfntListfnfrs
     * @sindf    1.1
     */
    publid syndhronizfd void rfmovfComponfntListfnfr(ComponfntListfnfr l) {
        if (l == null) {
            rfturn;
        }
        domponfntListfnfr = AWTEvfntMultidbstfr.rfmovf(domponfntListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf domponfnt listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll <dodf>ComponfntListfnfr</dodf>s of this domponfnt
     *         or bn fmpty brrby if no domponfnt
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddComponfntListfnfr
     * @sff #rfmovfComponfntListfnfr
     * @sindf 1.4
     */
    publid syndhronizfd ComponfntListfnfr[] gftComponfntListfnfrs() {
        rfturn gftListfnfrs(ComponfntListfnfr.dlbss);
    }

    /**
     * Adds thf spfdififd fodus listfnfr to rfdfivf fodus fvfnts from
     * this domponfnt whfn this domponfnt gbins input fodus.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf fodus listfnfr
     * @sff      jbvb.bwt.fvfnt.FodusEvfnt
     * @sff      jbvb.bwt.fvfnt.FodusListfnfr
     * @sff      #rfmovfFodusListfnfr
     * @sff      #gftFodusListfnfrs
     * @sindf    1.1
     */
    publid syndhronizfd void bddFodusListfnfr(FodusListfnfr l) {
        if (l == null) {
            rfturn;
        }
        fodusListfnfr = AWTEvfntMultidbstfr.bdd(fodusListfnfr, l);
        nfwEvfntsOnly = truf;

        // if this is b lightwfight domponfnt, fnbblf fodus fvfnts
        // in thf nbtivf dontbinfr.
        if (pffr instbndfof LightwfightPffr) {
            pbrfnt.proxyEnbblfEvfnts(AWTEvfnt.FOCUS_EVENT_MASK);
        }
    }

    /**
     * Rfmovfs thf spfdififd fodus listfnfr so thbt it no longfr
     * rfdfivfs fodus fvfnts from this domponfnt. This mfthod pfrforms
     * no fundtion, nor dofs it throw bn fxdfption, if thf listfnfr
     * spfdififd by thf brgumfnt wbs not prfviously bddfd to this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf fodus listfnfr
     * @sff      jbvb.bwt.fvfnt.FodusEvfnt
     * @sff      jbvb.bwt.fvfnt.FodusListfnfr
     * @sff      #bddFodusListfnfr
     * @sff      #gftFodusListfnfrs
     * @sindf    1.1
     */
    publid syndhronizfd void rfmovfFodusListfnfr(FodusListfnfr l) {
        if (l == null) {
            rfturn;
        }
        fodusListfnfr = AWTEvfntMultidbstfr.rfmovf(fodusListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf fodus listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of this domponfnt's <dodf>FodusListfnfr</dodf>s
     *         or bn fmpty brrby if no domponfnt
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddFodusListfnfr
     * @sff #rfmovfFodusListfnfr
     * @sindf 1.4
     */
    publid syndhronizfd FodusListfnfr[] gftFodusListfnfrs() {
        rfturn gftListfnfrs(FodusListfnfr.dlbss);
    }

    /**
     * Adds thf spfdififd hifrbrdhy listfnfr to rfdfivf hifrbrdhy dhbngfd
     * fvfnts from this domponfnt whfn thf hifrbrdhy to whidh this dontbinfr
     * bflongs dhbngfs.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf hifrbrdhy listfnfr
     * @sff      jbvb.bwt.fvfnt.HifrbrdhyEvfnt
     * @sff      jbvb.bwt.fvfnt.HifrbrdhyListfnfr
     * @sff      #rfmovfHifrbrdhyListfnfr
     * @sff      #gftHifrbrdhyListfnfrs
     * @sindf    1.3
     */
    publid void bddHifrbrdhyListfnfr(HifrbrdhyListfnfr l) {
        if (l == null) {
            rfturn;
        }
        boolfbn notifyAndfstors;
        syndhronizfd (this) {
            notifyAndfstors =
                (hifrbrdhyListfnfr == null &&
                 (fvfntMbsk & AWTEvfnt.HIERARCHY_EVENT_MASK) == 0);
            hifrbrdhyListfnfr = AWTEvfntMultidbstfr.bdd(hifrbrdhyListfnfr, l);
            notifyAndfstors = (notifyAndfstors && hifrbrdhyListfnfr != null);
            nfwEvfntsOnly = truf;
        }
        if (notifyAndfstors) {
            syndhronizfd (gftTrffLodk()) {
                bdjustListfningChildrfnOnPbrfnt(AWTEvfnt.HIERARCHY_EVENT_MASK,
                                                1);
            }
        }
    }

    /**
     * Rfmovfs thf spfdififd hifrbrdhy listfnfr so thbt it no longfr
     * rfdfivfs hifrbrdhy dhbngfd fvfnts from this domponfnt. This mfthod
     * pfrforms no fundtion, nor dofs it throw bn fxdfption, if thf listfnfr
     * spfdififd by thf brgumfnt wbs not prfviously bddfd to this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf hifrbrdhy listfnfr
     * @sff      jbvb.bwt.fvfnt.HifrbrdhyEvfnt
     * @sff      jbvb.bwt.fvfnt.HifrbrdhyListfnfr
     * @sff      #bddHifrbrdhyListfnfr
     * @sff      #gftHifrbrdhyListfnfrs
     * @sindf    1.3
     */
    publid void rfmovfHifrbrdhyListfnfr(HifrbrdhyListfnfr l) {
        if (l == null) {
            rfturn;
        }
        boolfbn notifyAndfstors;
        syndhronizfd (this) {
            notifyAndfstors =
                (hifrbrdhyListfnfr != null &&
                 (fvfntMbsk & AWTEvfnt.HIERARCHY_EVENT_MASK) == 0);
            hifrbrdhyListfnfr =
                AWTEvfntMultidbstfr.rfmovf(hifrbrdhyListfnfr, l);
            notifyAndfstors = (notifyAndfstors && hifrbrdhyListfnfr == null);
        }
        if (notifyAndfstors) {
            syndhronizfd (gftTrffLodk()) {
                bdjustListfningChildrfnOnPbrfnt(AWTEvfnt.HIERARCHY_EVENT_MASK,
                                                -1);
            }
        }
    }

    /**
     * Rfturns bn brrby of bll thf hifrbrdhy listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of this domponfnt's <dodf>HifrbrdhyListfnfr</dodf>s
     *         or bn fmpty brrby if no hifrbrdhy
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddHifrbrdhyListfnfr
     * @sff      #rfmovfHifrbrdhyListfnfr
     * @sindf    1.4
     */
    publid syndhronizfd HifrbrdhyListfnfr[] gftHifrbrdhyListfnfrs() {
        rfturn gftListfnfrs(HifrbrdhyListfnfr.dlbss);
    }

    /**
     * Adds thf spfdififd hifrbrdhy bounds listfnfr to rfdfivf hifrbrdhy
     * bounds fvfnts from this domponfnt whfn thf hifrbrdhy to whidh this
     * dontbinfr bflongs dhbngfs.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf hifrbrdhy bounds listfnfr
     * @sff      jbvb.bwt.fvfnt.HifrbrdhyEvfnt
     * @sff      jbvb.bwt.fvfnt.HifrbrdhyBoundsListfnfr
     * @sff      #rfmovfHifrbrdhyBoundsListfnfr
     * @sff      #gftHifrbrdhyBoundsListfnfrs
     * @sindf    1.3
     */
    publid void bddHifrbrdhyBoundsListfnfr(HifrbrdhyBoundsListfnfr l) {
        if (l == null) {
            rfturn;
        }
        boolfbn notifyAndfstors;
        syndhronizfd (this) {
            notifyAndfstors =
                (hifrbrdhyBoundsListfnfr == null &&
                 (fvfntMbsk & AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK) == 0);
            hifrbrdhyBoundsListfnfr =
                AWTEvfntMultidbstfr.bdd(hifrbrdhyBoundsListfnfr, l);
            notifyAndfstors = (notifyAndfstors &&
                               hifrbrdhyBoundsListfnfr != null);
            nfwEvfntsOnly = truf;
        }
        if (notifyAndfstors) {
            syndhronizfd (gftTrffLodk()) {
                bdjustListfningChildrfnOnPbrfnt(
                                                AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK, 1);
            }
        }
    }

    /**
     * Rfmovfs thf spfdififd hifrbrdhy bounds listfnfr so thbt it no longfr
     * rfdfivfs hifrbrdhy bounds fvfnts from this domponfnt. This mfthod
     * pfrforms no fundtion, nor dofs it throw bn fxdfption, if thf listfnfr
     * spfdififd by thf brgumfnt wbs not prfviously bddfd to this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf hifrbrdhy bounds listfnfr
     * @sff      jbvb.bwt.fvfnt.HifrbrdhyEvfnt
     * @sff      jbvb.bwt.fvfnt.HifrbrdhyBoundsListfnfr
     * @sff      #bddHifrbrdhyBoundsListfnfr
     * @sff      #gftHifrbrdhyBoundsListfnfrs
     * @sindf    1.3
     */
    publid void rfmovfHifrbrdhyBoundsListfnfr(HifrbrdhyBoundsListfnfr l) {
        if (l == null) {
            rfturn;
        }
        boolfbn notifyAndfstors;
        syndhronizfd (this) {
            notifyAndfstors =
                (hifrbrdhyBoundsListfnfr != null &&
                 (fvfntMbsk & AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK) == 0);
            hifrbrdhyBoundsListfnfr =
                AWTEvfntMultidbstfr.rfmovf(hifrbrdhyBoundsListfnfr, l);
            notifyAndfstors = (notifyAndfstors &&
                               hifrbrdhyBoundsListfnfr == null);
        }
        if (notifyAndfstors) {
            syndhronizfd (gftTrffLodk()) {
                bdjustListfningChildrfnOnPbrfnt(
                                                AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK, -1);
            }
        }
    }

    // Should only bf dbllfd whilf holding thf trff lodk
    int numListfning(long mbsk) {
        // Onf mbsk or thf othfr, but not nfithfr or both.
        if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            if ((mbsk != AWTEvfnt.HIERARCHY_EVENT_MASK) &&
                (mbsk != AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK))
            {
                fvfntLog.finf("Assfrtion fbilfd");
            }
        }
        if ((mbsk == AWTEvfnt.HIERARCHY_EVENT_MASK &&
             (hifrbrdhyListfnfr != null ||
              (fvfntMbsk & AWTEvfnt.HIERARCHY_EVENT_MASK) != 0)) ||
            (mbsk == AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK &&
             (hifrbrdhyBoundsListfnfr != null ||
              (fvfntMbsk & AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK) != 0))) {
            rfturn 1;
        } flsf {
            rfturn 0;
        }
    }

    // Should only bf dbllfd whilf holding trff lodk
    int dountHifrbrdhyMfmbfrs() {
        rfturn 1;
    }
    // Should only bf dbllfd whilf holding thf trff lodk
    int drfbtfHifrbrdhyEvfnts(int id, Componfnt dhbngfd,
                              Contbinfr dhbngfdPbrfnt, long dhbngfFlbgs,
                              boolfbn fnbblfdOnToolkit) {
        switdh (id) {
          dbsf HifrbrdhyEvfnt.HIERARCHY_CHANGED:
              if (hifrbrdhyListfnfr != null ||
                  (fvfntMbsk & AWTEvfnt.HIERARCHY_EVENT_MASK) != 0 ||
                  fnbblfdOnToolkit) {
                  HifrbrdhyEvfnt f = nfw HifrbrdhyEvfnt(this, id, dhbngfd,
                                                        dhbngfdPbrfnt,
                                                        dhbngfFlbgs);
                  dispbtdhEvfnt(f);
                  rfturn 1;
              }
              brfbk;
          dbsf HifrbrdhyEvfnt.ANCESTOR_MOVED:
          dbsf HifrbrdhyEvfnt.ANCESTOR_RESIZED:
              if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                  if (dhbngfFlbgs != 0) {
                      fvfntLog.finf("Assfrtion (dhbngfFlbgs == 0) fbilfd");
                  }
              }
              if (hifrbrdhyBoundsListfnfr != null ||
                  (fvfntMbsk & AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK) != 0 ||
                  fnbblfdOnToolkit) {
                  HifrbrdhyEvfnt f = nfw HifrbrdhyEvfnt(this, id, dhbngfd,
                                                        dhbngfdPbrfnt);
                  dispbtdhEvfnt(f);
                  rfturn 1;
              }
              brfbk;
          dffbult:
              // bssfrt fblsf
              if (fvfntLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                  fvfntLog.finf("This dodf must nfvfr bf rfbdhfd");
              }
              brfbk;
        }
        rfturn 0;
    }

    /**
     * Rfturns bn brrby of bll thf hifrbrdhy bounds listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of this domponfnt's <dodf>HifrbrdhyBoundsListfnfr</dodf>s
     *         or bn fmpty brrby if no hifrbrdhy bounds
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddHifrbrdhyBoundsListfnfr
     * @sff      #rfmovfHifrbrdhyBoundsListfnfr
     * @sindf    1.4
     */
    publid syndhronizfd HifrbrdhyBoundsListfnfr[] gftHifrbrdhyBoundsListfnfrs() {
        rfturn gftListfnfrs(HifrbrdhyBoundsListfnfr.dlbss);
    }

    /*
     * Should only bf dbllfd whilf holding thf trff lodk.
     * It's bddfd only for ovfrriding in jbvb.bwt.Window
     * bfdbusf pbrfnt in Window is ownfr.
     */
    void bdjustListfningChildrfnOnPbrfnt(long mbsk, int num) {
        if (pbrfnt != null) {
            pbrfnt.bdjustListfningChildrfn(mbsk, num);
        }
    }

    /**
     * Adds thf spfdififd kfy listfnfr to rfdfivf kfy fvfnts from
     * this domponfnt.
     * If l is null, no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf kfy listfnfr.
     * @sff      jbvb.bwt.fvfnt.KfyEvfnt
     * @sff      jbvb.bwt.fvfnt.KfyListfnfr
     * @sff      #rfmovfKfyListfnfr
     * @sff      #gftKfyListfnfrs
     * @sindf    1.1
     */
    publid syndhronizfd void bddKfyListfnfr(KfyListfnfr l) {
        if (l == null) {
            rfturn;
        }
        kfyListfnfr = AWTEvfntMultidbstfr.bdd(kfyListfnfr, l);
        nfwEvfntsOnly = truf;

        // if this is b lightwfight domponfnt, fnbblf kfy fvfnts
        // in thf nbtivf dontbinfr.
        if (pffr instbndfof LightwfightPffr) {
            pbrfnt.proxyEnbblfEvfnts(AWTEvfnt.KEY_EVENT_MASK);
        }
    }

    /**
     * Rfmovfs thf spfdififd kfy listfnfr so thbt it no longfr
     * rfdfivfs kfy fvfnts from this domponfnt. This mfthod pfrforms
     * no fundtion, nor dofs it throw bn fxdfption, if thf listfnfr
     * spfdififd by thf brgumfnt wbs not prfviously bddfd to this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf kfy listfnfr
     * @sff      jbvb.bwt.fvfnt.KfyEvfnt
     * @sff      jbvb.bwt.fvfnt.KfyListfnfr
     * @sff      #bddKfyListfnfr
     * @sff      #gftKfyListfnfrs
     * @sindf    1.1
     */
    publid syndhronizfd void rfmovfKfyListfnfr(KfyListfnfr l) {
        if (l == null) {
            rfturn;
        }
        kfyListfnfr = AWTEvfntMultidbstfr.rfmovf(kfyListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf kfy listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of this domponfnt's <dodf>KfyListfnfr</dodf>s
     *         or bn fmpty brrby if no kfy
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddKfyListfnfr
     * @sff      #rfmovfKfyListfnfr
     * @sindf    1.4
     */
    publid syndhronizfd KfyListfnfr[] gftKfyListfnfrs() {
        rfturn gftListfnfrs(KfyListfnfr.dlbss);
    }

    /**
     * Adds thf spfdififd mousf listfnfr to rfdfivf mousf fvfnts from
     * this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf mousf listfnfr
     * @sff      jbvb.bwt.fvfnt.MousfEvfnt
     * @sff      jbvb.bwt.fvfnt.MousfListfnfr
     * @sff      #rfmovfMousfListfnfr
     * @sff      #gftMousfListfnfrs
     * @sindf    1.1
     */
    publid syndhronizfd void bddMousfListfnfr(MousfListfnfr l) {
        if (l == null) {
            rfturn;
        }
        mousfListfnfr = AWTEvfntMultidbstfr.bdd(mousfListfnfr,l);
        nfwEvfntsOnly = truf;

        // if this is b lightwfight domponfnt, fnbblf mousf fvfnts
        // in thf nbtivf dontbinfr.
        if (pffr instbndfof LightwfightPffr) {
            pbrfnt.proxyEnbblfEvfnts(AWTEvfnt.MOUSE_EVENT_MASK);
        }
    }

    /**
     * Rfmovfs thf spfdififd mousf listfnfr so thbt it no longfr
     * rfdfivfs mousf fvfnts from this domponfnt. This mfthod pfrforms
     * no fundtion, nor dofs it throw bn fxdfption, if thf listfnfr
     * spfdififd by thf brgumfnt wbs not prfviously bddfd to this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf mousf listfnfr
     * @sff      jbvb.bwt.fvfnt.MousfEvfnt
     * @sff      jbvb.bwt.fvfnt.MousfListfnfr
     * @sff      #bddMousfListfnfr
     * @sff      #gftMousfListfnfrs
     * @sindf    1.1
     */
    publid syndhronizfd void rfmovfMousfListfnfr(MousfListfnfr l) {
        if (l == null) {
            rfturn;
        }
        mousfListfnfr = AWTEvfntMultidbstfr.rfmovf(mousfListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf mousf listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of this domponfnt's <dodf>MousfListfnfr</dodf>s
     *         or bn fmpty brrby if no mousf
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddMousfListfnfr
     * @sff      #rfmovfMousfListfnfr
     * @sindf    1.4
     */
    publid syndhronizfd MousfListfnfr[] gftMousfListfnfrs() {
        rfturn gftListfnfrs(MousfListfnfr.dlbss);
    }

    /**
     * Adds thf spfdififd mousf motion listfnfr to rfdfivf mousf motion
     * fvfnts from this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf mousf motion listfnfr
     * @sff      jbvb.bwt.fvfnt.MousfEvfnt
     * @sff      jbvb.bwt.fvfnt.MousfMotionListfnfr
     * @sff      #rfmovfMousfMotionListfnfr
     * @sff      #gftMousfMotionListfnfrs
     * @sindf    1.1
     */
    publid syndhronizfd void bddMousfMotionListfnfr(MousfMotionListfnfr l) {
        if (l == null) {
            rfturn;
        }
        mousfMotionListfnfr = AWTEvfntMultidbstfr.bdd(mousfMotionListfnfr,l);
        nfwEvfntsOnly = truf;

        // if this is b lightwfight domponfnt, fnbblf mousf fvfnts
        // in thf nbtivf dontbinfr.
        if (pffr instbndfof LightwfightPffr) {
            pbrfnt.proxyEnbblfEvfnts(AWTEvfnt.MOUSE_MOTION_EVENT_MASK);
        }
    }

    /**
     * Rfmovfs thf spfdififd mousf motion listfnfr so thbt it no longfr
     * rfdfivfs mousf motion fvfnts from this domponfnt. This mfthod pfrforms
     * no fundtion, nor dofs it throw bn fxdfption, if thf listfnfr
     * spfdififd by thf brgumfnt wbs not prfviously bddfd to this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf mousf motion listfnfr
     * @sff      jbvb.bwt.fvfnt.MousfEvfnt
     * @sff      jbvb.bwt.fvfnt.MousfMotionListfnfr
     * @sff      #bddMousfMotionListfnfr
     * @sff      #gftMousfMotionListfnfrs
     * @sindf    1.1
     */
    publid syndhronizfd void rfmovfMousfMotionListfnfr(MousfMotionListfnfr l) {
        if (l == null) {
            rfturn;
        }
        mousfMotionListfnfr = AWTEvfntMultidbstfr.rfmovf(mousfMotionListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf mousf motion listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of this domponfnt's <dodf>MousfMotionListfnfr</dodf>s
     *         or bn fmpty brrby if no mousf motion
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddMousfMotionListfnfr
     * @sff      #rfmovfMousfMotionListfnfr
     * @sindf    1.4
     */
    publid syndhronizfd MousfMotionListfnfr[] gftMousfMotionListfnfrs() {
        rfturn gftListfnfrs(MousfMotionListfnfr.dlbss);
    }

    /**
     * Adds thf spfdififd mousf whffl listfnfr to rfdfivf mousf whffl fvfnts
     * from this domponfnt.  Contbinfrs blso rfdfivf mousf whffl fvfnts from
     * sub-domponfnts.
     * <p>
     * For informbtion on how mousf whffl fvfnts brf dispbtdhfd, sff
     * thf dlbss dfsdription for {@link MousfWhfflEvfnt}.
     * <p>
     * If l is <dodf>null</dodf>, no fxdfption is thrown bnd no
     * bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf mousf whffl listfnfr
     * @sff      jbvb.bwt.fvfnt.MousfWhfflEvfnt
     * @sff      jbvb.bwt.fvfnt.MousfWhfflListfnfr
     * @sff      #rfmovfMousfWhfflListfnfr
     * @sff      #gftMousfWhfflListfnfrs
     * @sindf    1.4
     */
    publid syndhronizfd void bddMousfWhfflListfnfr(MousfWhfflListfnfr l) {
        if (l == null) {
            rfturn;
        }
        mousfWhfflListfnfr = AWTEvfntMultidbstfr.bdd(mousfWhfflListfnfr,l);
        nfwEvfntsOnly = truf;

        // if this is b lightwfight domponfnt, fnbblf mousf fvfnts
        // in thf nbtivf dontbinfr.
        if (pffr instbndfof LightwfightPffr) {
            pbrfnt.proxyEnbblfEvfnts(AWTEvfnt.MOUSE_WHEEL_EVENT_MASK);
        }
    }

    /**
     * Rfmovfs thf spfdififd mousf whffl listfnfr so thbt it no longfr
     * rfdfivfs mousf whffl fvfnts from this domponfnt. This mfthod pfrforms
     * no fundtion, nor dofs it throw bn fxdfption, if thf listfnfr
     * spfdififd by thf brgumfnt wbs not prfviously bddfd to this domponfnt.
     * If l is null, no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf mousf whffl listfnfr.
     * @sff      jbvb.bwt.fvfnt.MousfWhfflEvfnt
     * @sff      jbvb.bwt.fvfnt.MousfWhfflListfnfr
     * @sff      #bddMousfWhfflListfnfr
     * @sff      #gftMousfWhfflListfnfrs
     * @sindf    1.4
     */
    publid syndhronizfd void rfmovfMousfWhfflListfnfr(MousfWhfflListfnfr l) {
        if (l == null) {
            rfturn;
        }
        mousfWhfflListfnfr = AWTEvfntMultidbstfr.rfmovf(mousfWhfflListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf mousf whffl listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of this domponfnt's <dodf>MousfWhfflListfnfr</dodf>s
     *         or bn fmpty brrby if no mousf whffl
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddMousfWhfflListfnfr
     * @sff      #rfmovfMousfWhfflListfnfr
     * @sindf    1.4
     */
    publid syndhronizfd MousfWhfflListfnfr[] gftMousfWhfflListfnfrs() {
        rfturn gftListfnfrs(MousfWhfflListfnfr.dlbss);
    }

    /**
     * Adds thf spfdififd input mfthod listfnfr to rfdfivf
     * input mfthod fvfnts from this domponfnt. A domponfnt will
     * only rfdfivf input mfthod fvfnts from input mfthods
     * if it blso ovfrridfs <dodf>gftInputMfthodRfqufsts</dodf> to rfturn bn
     * <dodf>InputMfthodRfqufsts</dodf> instbndf.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="{@dodRoot}/jbvb/bwt/dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf input mfthod listfnfr
     * @sff      jbvb.bwt.fvfnt.InputMfthodEvfnt
     * @sff      jbvb.bwt.fvfnt.InputMfthodListfnfr
     * @sff      #rfmovfInputMfthodListfnfr
     * @sff      #gftInputMfthodListfnfrs
     * @sff      #gftInputMfthodRfqufsts
     * @sindf    1.2
     */
    publid syndhronizfd void bddInputMfthodListfnfr(InputMfthodListfnfr l) {
        if (l == null) {
            rfturn;
        }
        inputMfthodListfnfr = AWTEvfntMultidbstfr.bdd(inputMfthodListfnfr, l);
        nfwEvfntsOnly = truf;
    }

    /**
     * Rfmovfs thf spfdififd input mfthod listfnfr so thbt it no longfr
     * rfdfivfs input mfthod fvfnts from this domponfnt. This mfthod pfrforms
     * no fundtion, nor dofs it throw bn fxdfption, if thf listfnfr
     * spfdififd by thf brgumfnt wbs not prfviously bddfd to this domponfnt.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm    l   thf input mfthod listfnfr
     * @sff      jbvb.bwt.fvfnt.InputMfthodEvfnt
     * @sff      jbvb.bwt.fvfnt.InputMfthodListfnfr
     * @sff      #bddInputMfthodListfnfr
     * @sff      #gftInputMfthodListfnfrs
     * @sindf    1.2
     */
    publid syndhronizfd void rfmovfInputMfthodListfnfr(InputMfthodListfnfr l) {
        if (l == null) {
            rfturn;
        }
        inputMfthodListfnfr = AWTEvfntMultidbstfr.rfmovf(inputMfthodListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf input mfthod listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of this domponfnt's <dodf>InputMfthodListfnfr</dodf>s
     *         or bn fmpty brrby if no input mfthod
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddInputMfthodListfnfr
     * @sff      #rfmovfInputMfthodListfnfr
     * @sindf    1.4
     */
    publid syndhronizfd InputMfthodListfnfr[] gftInputMfthodListfnfrs() {
        rfturn gftListfnfrs(InputMfthodListfnfr.dlbss);
    }

    /**
     * Rfturns bn brrby of bll thf objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon this <dodf>Componfnt</dodf>.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using thf
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mfthod.
     *
     * <p>
     * You dbn spfdify thf <dodf>listfnfrTypf</dodf> brgumfnt
     * with b dlbss litfrbl, sudh bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * <dodf>Componfnt</dodf> <dodf>d</dodf>
     * for its mousf listfnfrs with thf following dodf:
     *
     * <prf>MousfListfnfr[] mls = (MousfListfnfr[])(d.gftListfnfrs(MousfListfnfr.dlbss));</prf>
     *
     * If no sudh listfnfrs fxist, this mfthod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf thf typf of listfnfrs rfqufstfd; this pbrbmftfr
     *          should spfdify bn intfrfbdf thbt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on this domponfnt,
     *          or bn fmpty brrby if no sudh listfnfrs hbvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf thbt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @throws NullPointfrExdfption if {@dodf listfnfrTypf} is {@dodf null}
     * @sff #gftComponfntListfnfrs
     * @sff #gftFodusListfnfrs
     * @sff #gftHifrbrdhyListfnfrs
     * @sff #gftHifrbrdhyBoundsListfnfrs
     * @sff #gftKfyListfnfrs
     * @sff #gftMousfListfnfrs
     * @sff #gftMousfMotionListfnfrs
     * @sff #gftMousfWhfflListfnfrs
     * @sff #gftInputMfthodListfnfrs
     * @sff #gftPropfrtyChbngfListfnfrs
     *
     * @sindf 1.3
     */
    @SupprfssWbrnings("undhfdkfd")
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        EvfntListfnfr l = null;
        if  (listfnfrTypf == ComponfntListfnfr.dlbss) {
            l = domponfntListfnfr;
        } flsf if (listfnfrTypf == FodusListfnfr.dlbss) {
            l = fodusListfnfr;
        } flsf if (listfnfrTypf == HifrbrdhyListfnfr.dlbss) {
            l = hifrbrdhyListfnfr;
        } flsf if (listfnfrTypf == HifrbrdhyBoundsListfnfr.dlbss) {
            l = hifrbrdhyBoundsListfnfr;
        } flsf if (listfnfrTypf == KfyListfnfr.dlbss) {
            l = kfyListfnfr;
        } flsf if (listfnfrTypf == MousfListfnfr.dlbss) {
            l = mousfListfnfr;
        } flsf if (listfnfrTypf == MousfMotionListfnfr.dlbss) {
            l = mousfMotionListfnfr;
        } flsf if (listfnfrTypf == MousfWhfflListfnfr.dlbss) {
            l = mousfWhfflListfnfr;
        } flsf if (listfnfrTypf == InputMfthodListfnfr.dlbss) {
            l = inputMfthodListfnfr;
        } flsf if (listfnfrTypf == PropfrtyChbngfListfnfr.dlbss) {
            rfturn (T[])gftPropfrtyChbngfListfnfrs();
        }
        rfturn AWTEvfntMultidbstfr.gftListfnfrs(l, listfnfrTypf);
    }

    /**
     * Gfts thf input mfthod rfqufst hbndlfr whidh supports
     * rfqufsts from input mfthods for this domponfnt. A domponfnt
     * thbt supports on-thf-spot tfxt input must ovfrridf this
     * mfthod to rfturn bn <dodf>InputMfthodRfqufsts</dodf> instbndf.
     * At thf sbmf timf, it blso hbs to hbndlf input mfthod fvfnts.
     *
     * @rfturn thf input mfthod rfqufst hbndlfr for this domponfnt,
     *          <dodf>null</dodf> by dffbult
     * @sff #bddInputMfthodListfnfr
     * @sindf 1.2
     */
    publid InputMfthodRfqufsts gftInputMfthodRfqufsts() {
        rfturn null;
    }

    /**
     * Gfts thf input dontfxt usfd by this domponfnt for hbndling
     * thf dommunidbtion with input mfthods whfn tfxt is fntfrfd
     * in this domponfnt. By dffbult, thf input dontfxt usfd for
     * thf pbrfnt domponfnt is rfturnfd. Componfnts mby
     * ovfrridf this to rfturn b privbtf input dontfxt.
     *
     * @rfturn thf input dontfxt usfd by this domponfnt;
     *          <dodf>null</dodf> if no dontfxt dbn bf dftfrminfd
     * @sindf 1.2
     */
    publid InputContfxt gftInputContfxt() {
        Contbinfr pbrfnt = this.pbrfnt;
        if (pbrfnt == null) {
            rfturn null;
        } flsf {
            rfturn pbrfnt.gftInputContfxt();
        }
    }

    /**
     * Enbblfs thf fvfnts dffinfd by thf spfdififd fvfnt mbsk pbrbmftfr
     * to bf dflivfrfd to this domponfnt.
     * <p>
     * Evfnt typfs brf butombtidblly fnbblfd whfn b listfnfr for
     * thbt fvfnt typf is bddfd to thf domponfnt.
     * <p>
     * This mfthod only nffds to bf invokfd by subdlbssfs of
     * <dodf>Componfnt</dodf> whidh dfsirf to hbvf thf spfdififd fvfnt
     * typfs dflivfrfd to <dodf>prodfssEvfnt</dodf> rfgbrdlfss of whfthfr
     * or not b listfnfr is rfgistfrfd.
     * @pbrbm      fvfntsToEnbblf   thf fvfnt mbsk dffining thf fvfnt typfs
     * @sff        #prodfssEvfnt
     * @sff        #disbblfEvfnts
     * @sff        AWTEvfnt
     * @sindf      1.1
     */
    protfdtfd finbl void fnbblfEvfnts(long fvfntsToEnbblf) {
        long notifyAndfstors = 0;
        syndhronizfd (this) {
            if ((fvfntsToEnbblf & AWTEvfnt.HIERARCHY_EVENT_MASK) != 0 &&
                hifrbrdhyListfnfr == null &&
                (fvfntMbsk & AWTEvfnt.HIERARCHY_EVENT_MASK) == 0) {
                notifyAndfstors |= AWTEvfnt.HIERARCHY_EVENT_MASK;
            }
            if ((fvfntsToEnbblf & AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK) != 0 &&
                hifrbrdhyBoundsListfnfr == null &&
                (fvfntMbsk & AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK) == 0) {
                notifyAndfstors |= AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK;
            }
            fvfntMbsk |= fvfntsToEnbblf;
            nfwEvfntsOnly = truf;
        }

        // if this is b lightwfight domponfnt, fnbblf mousf fvfnts
        // in thf nbtivf dontbinfr.
        if (pffr instbndfof LightwfightPffr) {
            pbrfnt.proxyEnbblfEvfnts(fvfntMbsk);
        }
        if (notifyAndfstors != 0) {
            syndhronizfd (gftTrffLodk()) {
                bdjustListfningChildrfnOnPbrfnt(notifyAndfstors, 1);
            }
        }
    }

    /**
     * Disbblfs thf fvfnts dffinfd by thf spfdififd fvfnt mbsk pbrbmftfr
     * from bfing dflivfrfd to this domponfnt.
     * @pbrbm      fvfntsToDisbblf   thf fvfnt mbsk dffining thf fvfnt typfs
     * @sff        #fnbblfEvfnts
     * @sindf      1.1
     */
    protfdtfd finbl void disbblfEvfnts(long fvfntsToDisbblf) {
        long notifyAndfstors = 0;
        syndhronizfd (this) {
            if ((fvfntsToDisbblf & AWTEvfnt.HIERARCHY_EVENT_MASK) != 0 &&
                hifrbrdhyListfnfr == null &&
                (fvfntMbsk & AWTEvfnt.HIERARCHY_EVENT_MASK) != 0) {
                notifyAndfstors |= AWTEvfnt.HIERARCHY_EVENT_MASK;
            }
            if ((fvfntsToDisbblf & AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK)!=0 &&
                hifrbrdhyBoundsListfnfr == null &&
                (fvfntMbsk & AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK) != 0) {
                notifyAndfstors |= AWTEvfnt.HIERARCHY_BOUNDS_EVENT_MASK;
            }
            fvfntMbsk &= ~fvfntsToDisbblf;
        }
        if (notifyAndfstors != 0) {
            syndhronizfd (gftTrffLodk()) {
                bdjustListfningChildrfnOnPbrfnt(notifyAndfstors, -1);
            }
        }
    }

    trbnsifnt sun.bwt.EvfntQufufItfm[] fvfntCbdhf;

    /**
     * @sff #isCoblfsdingEnbblfd
     * @sff #dhfdkCoblfsding
     */
    trbnsifnt privbtf boolfbn doblfsdingEnbblfd = dhfdkCoblfsding();

    /**
     * Wfbk mbp of known doblfsdfEvfnt ovfrridfrs.
     * Vbluf indidbtfs whfthfr ovfrridfn.
     * Bootstrbp dlbssfs brf not indludfd.
     */
    privbtf stbtid finbl Mbp<Clbss<?>, Boolfbn> doblfsdfMbp =
        nfw jbvb.util.WfbkHbshMbp<Clbss<?>, Boolfbn>();

    /**
     * Indidbtfs whfthfr this dlbss ovfrridfs doblfsdfEvfnts.
     * It is bssumfd thbt bll dlbssfs thbt brf lobdfd from thf bootstrbp
     *   do not.
     * Thf boostrbp dlbss lobdfr is bssumfd to bf rfprfsfntfd by null.
     * Wf do not dhfdk thbt thf mfthod rfblly ovfrridfs
     *   (it might bf stbtid, privbtf or pbdkbgf privbtf).
     */
     privbtf boolfbn dhfdkCoblfsding() {
         if (gftClbss().gftClbssLobdfr()==null) {
             rfturn fblsf;
         }
         finbl Clbss<? fxtfnds Componfnt> dlbzz = gftClbss();
         syndhronizfd (doblfsdfMbp) {
             // Chfdk dbdhf.
             Boolfbn vbluf = doblfsdfMbp.gft(dlbzz);
             if (vbluf != null) {
                 rfturn vbluf;
             }

             // Nffd to dhfdk non-bootstrbps.
             Boolfbn fnbblfd = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                 nfw jbvb.sfdurity.PrivilfgfdAdtion<Boolfbn>() {
                     publid Boolfbn run() {
                         rfturn isCoblfsdfEvfntsOvfrridfn(dlbzz);
                     }
                 }
                 );
             doblfsdfMbp.put(dlbzz, fnbblfd);
             rfturn fnbblfd;
         }
     }

    /**
     * Pbrbmftfr typfs of doblfsdfEvfnts(AWTEvfnt,AWTEVfnt).
     */
    privbtf stbtid finbl Clbss<?>[] doblfsdfEvfntsPbrbms = {
        AWTEvfnt.dlbss, AWTEvfnt.dlbss
    };

    /**
     * Indidbtfs whfthfr b dlbss or its supfrdlbssfs ovfrridf doblfsdfEvfnts.
     * Must bf dbllfd with lodk on doblfsdfMbp bnd privilfgfd.
     * @sff dhfdkCoblsfding
     */
    privbtf stbtid boolfbn isCoblfsdfEvfntsOvfrridfn(Clbss<?> dlbzz) {
        bssfrt Thrfbd.holdsLodk(doblfsdfMbp);

        // First dhfdk supfrdlbss - wf mby not nffd to bothfr oursflvfs.
        Clbss<?> supfrdlbss = dlbzz.gftSupfrdlbss();
        if (supfrdlbss == null) {
            // Only oddurs on implfmfntbtions thbt
            //   do not usf null to rfprfsfnt thf bootsrbp dlbss lobdfr.
            rfturn fblsf;
        }
        if (supfrdlbss.gftClbssLobdfr() != null) {
            Boolfbn vbluf = doblfsdfMbp.gft(supfrdlbss);
            if (vbluf == null) {
                // Not donf blrfbdy - rfdursf.
                if (isCoblfsdfEvfntsOvfrridfn(supfrdlbss)) {
                    doblfsdfMbp.put(supfrdlbss, truf);
                    rfturn truf;
                }
            } flsf if (vbluf) {
                rfturn truf;
            }
        }

        try {
            // Throws if not ovfrridfn.
            dlbzz.gftDfdlbrfdMfthod(
                "doblfsdfEvfnts", doblfsdfEvfntsPbrbms
                );
            rfturn truf;
        } dbtdh (NoSudhMfthodExdfption f) {
            // Not prfsfnt in this dlbss.
            rfturn fblsf;
        }
    }

    /**
     * Indidbtfs whfthfr doblfsdfEvfnts mby do somfthing.
     */
    finbl boolfbn isCoblfsdingEnbblfd() {
        rfturn doblfsdingEnbblfd;
     }


    /**
     * Potfntiblly doblfsdf bn fvfnt bfing postfd with bn fxisting
     * fvfnt.  This mfthod is dbllfd by <dodf>EvfntQufuf.postEvfnt</dodf>
     * if bn fvfnt with thf sbmf ID bs thf fvfnt to bf postfd is found in
     * thf qufuf (both fvfnts must hbvf this domponfnt bs thfir sourdf).
     * This mfthod fithfr rfturns b doblfsdfd fvfnt whidh rfplbdfs
     * thf fxisting fvfnt (bnd thf nfw fvfnt is thfn disdbrdfd), or
     * <dodf>null</dodf> to indidbtf thbt no dombining should bf donf
     * (bdd thf sfdond fvfnt to thf fnd of thf qufuf).  Eithfr fvfnt
     * pbrbmftfr mby bf modififd bnd rfturnfd, bs thf othfr onf is disdbrdfd
     * unlfss <dodf>null</dodf> is rfturnfd.
     * <p>
     * This implfmfntbtion of <dodf>doblfsdfEvfnts</dodf> doblfsdfs
     * two fvfnt typfs: mousf movf (bnd drbg) fvfnts,
     * bnd pbint (bnd updbtf) fvfnts.
     * For mousf movf fvfnts thf lbst fvfnt is blwbys rfturnfd, dbusing
     * intfrmfdibtf movfs to bf disdbrdfd.  For pbint fvfnts, thf nfw
     * fvfnt is doblfsdfd into b domplfx <dodf>RfpbintArfb</dodf> in thf pffr.
     * Thf nfw <dodf>AWTEvfnt</dodf> is blwbys rfturnfd.
     *
     * @pbrbm  fxistingEvfnt  thf fvfnt blrfbdy on thf <dodf>EvfntQufuf</dodf>
     * @pbrbm  nfwEvfnt       thf fvfnt bfing postfd to thf
     *          <dodf>EvfntQufuf</dodf>
     * @rfturn b doblfsdfd fvfnt, or <dodf>null</dodf> indidbting thbt no
     *          doblfsding wbs donf
     */
    protfdtfd AWTEvfnt doblfsdfEvfnts(AWTEvfnt fxistingEvfnt,
                                      AWTEvfnt nfwEvfnt) {
        rfturn null;
    }

    /**
     * Prodfssfs fvfnts oddurring on this domponfnt. By dffbult this
     * mfthod dblls thf bppropribtf
     * <dodf>prodfss&lt;fvfnt&nbsp;typf&gt;Evfnt</dodf>
     * mfthod for thf givfn dlbss of fvfnt.
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm     f thf fvfnt
     * @sff       #prodfssComponfntEvfnt
     * @sff       #prodfssFodusEvfnt
     * @sff       #prodfssKfyEvfnt
     * @sff       #prodfssMousfEvfnt
     * @sff       #prodfssMousfMotionEvfnt
     * @sff       #prodfssInputMfthodEvfnt
     * @sff       #prodfssHifrbrdhyEvfnt
     * @sff       #prodfssMousfWhfflEvfnt
     * @sindf     1.1
     */
    protfdtfd void prodfssEvfnt(AWTEvfnt f) {
        if (f instbndfof FodusEvfnt) {
            prodfssFodusEvfnt((FodusEvfnt)f);

        } flsf if (f instbndfof MousfEvfnt) {
            switdh(f.gftID()) {
              dbsf MousfEvfnt.MOUSE_PRESSED:
              dbsf MousfEvfnt.MOUSE_RELEASED:
              dbsf MousfEvfnt.MOUSE_CLICKED:
              dbsf MousfEvfnt.MOUSE_ENTERED:
              dbsf MousfEvfnt.MOUSE_EXITED:
                  prodfssMousfEvfnt((MousfEvfnt)f);
                  brfbk;
              dbsf MousfEvfnt.MOUSE_MOVED:
              dbsf MousfEvfnt.MOUSE_DRAGGED:
                  prodfssMousfMotionEvfnt((MousfEvfnt)f);
                  brfbk;
              dbsf MousfEvfnt.MOUSE_WHEEL:
                  prodfssMousfWhfflEvfnt((MousfWhfflEvfnt)f);
                  brfbk;
            }

        } flsf if (f instbndfof KfyEvfnt) {
            prodfssKfyEvfnt((KfyEvfnt)f);

        } flsf if (f instbndfof ComponfntEvfnt) {
            prodfssComponfntEvfnt((ComponfntEvfnt)f);
        } flsf if (f instbndfof InputMfthodEvfnt) {
            prodfssInputMfthodEvfnt((InputMfthodEvfnt)f);
        } flsf if (f instbndfof HifrbrdhyEvfnt) {
            switdh (f.gftID()) {
              dbsf HifrbrdhyEvfnt.HIERARCHY_CHANGED:
                  prodfssHifrbrdhyEvfnt((HifrbrdhyEvfnt)f);
                  brfbk;
              dbsf HifrbrdhyEvfnt.ANCESTOR_MOVED:
              dbsf HifrbrdhyEvfnt.ANCESTOR_RESIZED:
                  prodfssHifrbrdhyBoundsEvfnt((HifrbrdhyEvfnt)f);
                  brfbk;
            }
        }
    }

    /**
     * Prodfssfs domponfnt fvfnts oddurring on this domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd
     * <dodf>ComponfntListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss domponfnt fvfnts brf
     * fnbblfd for this domponfnt. Componfnt fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>A <dodf>ComponfntListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddComponfntListfnfr</dodf>.
     * <li>Componfnt fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf domponfnt fvfnt
     * @sff         jbvb.bwt.fvfnt.ComponfntEvfnt
     * @sff         jbvb.bwt.fvfnt.ComponfntListfnfr
     * @sff         #bddComponfntListfnfr
     * @sff         #fnbblfEvfnts
     * @sindf       1.1
     */
    protfdtfd void prodfssComponfntEvfnt(ComponfntEvfnt f) {
        ComponfntListfnfr listfnfr = domponfntListfnfr;
        if (listfnfr != null) {
            int id = f.gftID();
            switdh(id) {
              dbsf ComponfntEvfnt.COMPONENT_RESIZED:
                  listfnfr.domponfntRfsizfd(f);
                  brfbk;
              dbsf ComponfntEvfnt.COMPONENT_MOVED:
                  listfnfr.domponfntMovfd(f);
                  brfbk;
              dbsf ComponfntEvfnt.COMPONENT_SHOWN:
                  listfnfr.domponfntShown(f);
                  brfbk;
              dbsf ComponfntEvfnt.COMPONENT_HIDDEN:
                  listfnfr.domponfntHiddfn(f);
                  brfbk;
            }
        }
    }

    /**
     * Prodfssfs fodus fvfnts oddurring on this domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd
     * <dodf>FodusListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss fodus fvfnts brf
     * fnbblfd for this domponfnt. Fodus fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>A <dodf>FodusListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddFodusListfnfr</dodf>.
     * <li>Fodus fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>
     * If fodus fvfnts brf fnbblfd for b <dodf>Componfnt</dodf>,
     * thf durrfnt <dodf>KfybobrdFodusMbnbgfr</dodf> dftfrminfs
     * whfthfr or not b fodus fvfnt should bf dispbtdhfd to
     * rfgistfrfd <dodf>FodusListfnfr</dodf> objfdts.  If thf
     * fvfnts brf to bf dispbtdhfd, thf <dodf>KfybobrdFodusMbnbgfr</dodf>
     * dblls thf <dodf>Componfnt</dodf>'s <dodf>dispbtdhEvfnt</dodf>
     * mfthod, whidh rfsults in b dbll to thf <dodf>Componfnt</dodf>'s
     * <dodf>prodfssFodusEvfnt</dodf> mfthod.
     * <p>
     * If fodus fvfnts brf fnbblfd for b <dodf>Componfnt</dodf>, dblling
     * thf <dodf>Componfnt</dodf>'s <dodf>dispbtdhEvfnt</dodf> mfthod
     * with b <dodf>FodusEvfnt</dodf> bs thf brgumfnt will rfsult in b
     * dbll to thf <dodf>Componfnt</dodf>'s <dodf>prodfssFodusEvfnt</dodf>
     * mfthod rfgbrdlfss of thf durrfnt <dodf>KfybobrdFodusMbnbgfr</dodf>.
     *
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf fodus fvfnt
     * @sff         jbvb.bwt.fvfnt.FodusEvfnt
     * @sff         jbvb.bwt.fvfnt.FodusListfnfr
     * @sff         jbvb.bwt.KfybobrdFodusMbnbgfr
     * @sff         #bddFodusListfnfr
     * @sff         #fnbblfEvfnts
     * @sff         #dispbtdhEvfnt
     * @sindf       1.1
     */
    protfdtfd void prodfssFodusEvfnt(FodusEvfnt f) {
        FodusListfnfr listfnfr = fodusListfnfr;
        if (listfnfr != null) {
            int id = f.gftID();
            switdh(id) {
              dbsf FodusEvfnt.FOCUS_GAINED:
                  listfnfr.fodusGbinfd(f);
                  brfbk;
              dbsf FodusEvfnt.FOCUS_LOST:
                  listfnfr.fodusLost(f);
                  brfbk;
            }
        }
    }

    /**
     * Prodfssfs kfy fvfnts oddurring on this domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd
     * <dodf>KfyListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss kfy fvfnts brf
     * fnbblfd for this domponfnt. Kfy fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>A <dodf>KfyListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddKfyListfnfr</dodf>.
     * <li>Kfy fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     *
     * <p>
     * If kfy fvfnts brf fnbblfd for b <dodf>Componfnt</dodf>,
     * thf durrfnt <dodf>KfybobrdFodusMbnbgfr</dodf> dftfrminfs
     * whfthfr or not b kfy fvfnt should bf dispbtdhfd to
     * rfgistfrfd <dodf>KfyListfnfr</dodf> objfdts.  Thf
     * <dodf>DffbultKfybobrdFodusMbnbgfr</dodf> will not dispbtdh
     * kfy fvfnts to b <dodf>Componfnt</dodf> thbt is not thf fodus
     * ownfr or is not showing.
     * <p>
     * As of J2SE 1.4, <dodf>KfyEvfnt</dodf>s brf rfdirfdtfd to
     * thf fodus ownfr. Plfbsf sff thf
     * <b hrff="dod-filfs/FodusSpfd.html">Fodus Spfdifidbtion</b>
     * for furthfr informbtion.
     * <p>
     * Cblling b <dodf>Componfnt</dodf>'s <dodf>dispbtdhEvfnt</dodf>
     * mfthod with b <dodf>KfyEvfnt</dodf> bs thf brgumfnt will
     * rfsult in b dbll to thf <dodf>Componfnt</dodf>'s
     * <dodf>prodfssKfyEvfnt</dodf> mfthod rfgbrdlfss of thf
     * durrfnt <dodf>KfybobrdFodusMbnbgfr</dodf> bs long bs thf
     * domponfnt is showing, fodusfd, bnd fnbblfd, bnd kfy fvfnts
     * brf fnbblfd on it.
     * <p>If thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf kfy fvfnt
     * @sff         jbvb.bwt.fvfnt.KfyEvfnt
     * @sff         jbvb.bwt.fvfnt.KfyListfnfr
     * @sff         jbvb.bwt.KfybobrdFodusMbnbgfr
     * @sff         jbvb.bwt.DffbultKfybobrdFodusMbnbgfr
     * @sff         #prodfssEvfnt
     * @sff         #dispbtdhEvfnt
     * @sff         #bddKfyListfnfr
     * @sff         #fnbblfEvfnts
     * @sff         #isShowing
     * @sindf       1.1
     */
    protfdtfd void prodfssKfyEvfnt(KfyEvfnt f) {
        KfyListfnfr listfnfr = kfyListfnfr;
        if (listfnfr != null) {
            int id = f.gftID();
            switdh(id) {
              dbsf KfyEvfnt.KEY_TYPED:
                  listfnfr.kfyTypfd(f);
                  brfbk;
              dbsf KfyEvfnt.KEY_PRESSED:
                  listfnfr.kfyPrfssfd(f);
                  brfbk;
              dbsf KfyEvfnt.KEY_RELEASED:
                  listfnfr.kfyRflfbsfd(f);
                  brfbk;
            }
        }
    }

    /**
     * Prodfssfs mousf fvfnts oddurring on this domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd
     * <dodf>MousfListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss mousf fvfnts brf
     * fnbblfd for this domponfnt. Mousf fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>A <dodf>MousfListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddMousfListfnfr</dodf>.
     * <li>Mousf fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf mousf fvfnt
     * @sff         jbvb.bwt.fvfnt.MousfEvfnt
     * @sff         jbvb.bwt.fvfnt.MousfListfnfr
     * @sff         #bddMousfListfnfr
     * @sff         #fnbblfEvfnts
     * @sindf       1.1
     */
    protfdtfd void prodfssMousfEvfnt(MousfEvfnt f) {
        MousfListfnfr listfnfr = mousfListfnfr;
        if (listfnfr != null) {
            int id = f.gftID();
            switdh(id) {
              dbsf MousfEvfnt.MOUSE_PRESSED:
                  listfnfr.mousfPrfssfd(f);
                  brfbk;
              dbsf MousfEvfnt.MOUSE_RELEASED:
                  listfnfr.mousfRflfbsfd(f);
                  brfbk;
              dbsf MousfEvfnt.MOUSE_CLICKED:
                  listfnfr.mousfClidkfd(f);
                  brfbk;
              dbsf MousfEvfnt.MOUSE_EXITED:
                  listfnfr.mousfExitfd(f);
                  brfbk;
              dbsf MousfEvfnt.MOUSE_ENTERED:
                  listfnfr.mousfEntfrfd(f);
                  brfbk;
            }
        }
    }

    /**
     * Prodfssfs mousf motion fvfnts oddurring on this domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd
     * <dodf>MousfMotionListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss mousf motion fvfnts brf
     * fnbblfd for this domponfnt. Mousf motion fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>A <dodf>MousfMotionListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddMousfMotionListfnfr</dodf>.
     * <li>Mousf motion fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf mousf motion fvfnt
     * @sff         jbvb.bwt.fvfnt.MousfEvfnt
     * @sff         jbvb.bwt.fvfnt.MousfMotionListfnfr
     * @sff         #bddMousfMotionListfnfr
     * @sff         #fnbblfEvfnts
     * @sindf       1.1
     */
    protfdtfd void prodfssMousfMotionEvfnt(MousfEvfnt f) {
        MousfMotionListfnfr listfnfr = mousfMotionListfnfr;
        if (listfnfr != null) {
            int id = f.gftID();
            switdh(id) {
              dbsf MousfEvfnt.MOUSE_MOVED:
                  listfnfr.mousfMovfd(f);
                  brfbk;
              dbsf MousfEvfnt.MOUSE_DRAGGED:
                  listfnfr.mousfDrbggfd(f);
                  brfbk;
            }
        }
    }

    /**
     * Prodfssfs mousf whffl fvfnts oddurring on this domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd
     * <dodf>MousfWhfflListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss mousf whffl fvfnts brf
     * fnbblfd for this domponfnt. Mousf whffl fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>A <dodf>MousfWhfflListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddMousfWhfflListfnfr</dodf>.
     * <li>Mousf whffl fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>
     * For informbtion on how mousf whffl fvfnts brf dispbtdhfd, sff
     * thf dlbss dfsdription for {@link MousfWhfflEvfnt}.
     * <p>
     * Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf mousf whffl fvfnt
     * @sff         jbvb.bwt.fvfnt.MousfWhfflEvfnt
     * @sff         jbvb.bwt.fvfnt.MousfWhfflListfnfr
     * @sff         #bddMousfWhfflListfnfr
     * @sff         #fnbblfEvfnts
     * @sindf       1.4
     */
    protfdtfd void prodfssMousfWhfflEvfnt(MousfWhfflEvfnt f) {
        MousfWhfflListfnfr listfnfr = mousfWhfflListfnfr;
        if (listfnfr != null) {
            int id = f.gftID();
            switdh(id) {
              dbsf MousfEvfnt.MOUSE_WHEEL:
                  listfnfr.mousfWhfflMovfd(f);
                  brfbk;
            }
        }
    }

    boolfbn postsOldMousfEvfnts() {
        rfturn fblsf;
    }

    /**
     * Prodfssfs input mfthod fvfnts oddurring on this domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd
     * <dodf>InputMfthodListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss input mfthod fvfnts
     * brf fnbblfd for this domponfnt. Input mfthod fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>An <dodf>InputMfthodListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddInputMfthodListfnfr</dodf>.
     * <li>Input mfthod fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf input mfthod fvfnt
     * @sff         jbvb.bwt.fvfnt.InputMfthodEvfnt
     * @sff         jbvb.bwt.fvfnt.InputMfthodListfnfr
     * @sff         #bddInputMfthodListfnfr
     * @sff         #fnbblfEvfnts
     * @sindf       1.2
     */
    protfdtfd void prodfssInputMfthodEvfnt(InputMfthodEvfnt f) {
        InputMfthodListfnfr listfnfr = inputMfthodListfnfr;
        if (listfnfr != null) {
            int id = f.gftID();
            switdh (id) {
              dbsf InputMfthodEvfnt.INPUT_METHOD_TEXT_CHANGED:
                  listfnfr.inputMfthodTfxtChbngfd(f);
                  brfbk;
              dbsf InputMfthodEvfnt.CARET_POSITION_CHANGED:
                  listfnfr.dbrftPositionChbngfd(f);
                  brfbk;
            }
        }
    }

    /**
     * Prodfssfs hifrbrdhy fvfnts oddurring on this domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd
     * <dodf>HifrbrdhyListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss hifrbrdhy fvfnts
     * brf fnbblfd for this domponfnt. Hifrbrdhy fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>An <dodf>HifrbrdhyListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddHifrbrdhyListfnfr</dodf>.
     * <li>Hifrbrdhy fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf hifrbrdhy fvfnt
     * @sff         jbvb.bwt.fvfnt.HifrbrdhyEvfnt
     * @sff         jbvb.bwt.fvfnt.HifrbrdhyListfnfr
     * @sff         #bddHifrbrdhyListfnfr
     * @sff         #fnbblfEvfnts
     * @sindf       1.3
     */
    protfdtfd void prodfssHifrbrdhyEvfnt(HifrbrdhyEvfnt f) {
        HifrbrdhyListfnfr listfnfr = hifrbrdhyListfnfr;
        if (listfnfr != null) {
            int id = f.gftID();
            switdh (id) {
              dbsf HifrbrdhyEvfnt.HIERARCHY_CHANGED:
                  listfnfr.hifrbrdhyChbngfd(f);
                  brfbk;
            }
        }
    }

    /**
     * Prodfssfs hifrbrdhy bounds fvfnts oddurring on this domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd
     * <dodf>HifrbrdhyBoundsListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss hifrbrdhy bounds fvfnts
     * brf fnbblfd for this domponfnt. Hifrbrdhy bounds fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>An <dodf>HifrbrdhyBoundsListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddHifrbrdhyBoundsListfnfr</dodf>.
     * <li>Hifrbrdhy bounds fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf hifrbrdhy fvfnt
     * @sff         jbvb.bwt.fvfnt.HifrbrdhyEvfnt
     * @sff         jbvb.bwt.fvfnt.HifrbrdhyBoundsListfnfr
     * @sff         #bddHifrbrdhyBoundsListfnfr
     * @sff         #fnbblfEvfnts
     * @sindf       1.3
     */
    protfdtfd void prodfssHifrbrdhyBoundsEvfnt(HifrbrdhyEvfnt f) {
        HifrbrdhyBoundsListfnfr listfnfr = hifrbrdhyBoundsListfnfr;
        if (listfnfr != null) {
            int id = f.gftID();
            switdh (id) {
              dbsf HifrbrdhyEvfnt.ANCESTOR_MOVED:
                  listfnfr.bndfstorMovfd(f);
                  brfbk;
              dbsf HifrbrdhyEvfnt.ANCESTOR_RESIZED:
                  listfnfr.bndfstorRfsizfd(f);
                  brfbk;
            }
        }
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @rfturn {@dodf truf} if thf fvfnt wbs hbndlfd, {@dodf fblsf} othfrwisf
     * @dfprfdbtfd As of JDK vfrsion 1.1
     * rfplbdfd by prodfssEvfnt(AWTEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn hbndlfEvfnt(Evfnt fvt) {
        switdh (fvt.id) {
          dbsf Evfnt.MOUSE_ENTER:
              rfturn mousfEntfr(fvt, fvt.x, fvt.y);

          dbsf Evfnt.MOUSE_EXIT:
              rfturn mousfExit(fvt, fvt.x, fvt.y);

          dbsf Evfnt.MOUSE_MOVE:
              rfturn mousfMovf(fvt, fvt.x, fvt.y);

          dbsf Evfnt.MOUSE_DOWN:
              rfturn mousfDown(fvt, fvt.x, fvt.y);

          dbsf Evfnt.MOUSE_DRAG:
              rfturn mousfDrbg(fvt, fvt.x, fvt.y);

          dbsf Evfnt.MOUSE_UP:
              rfturn mousfUp(fvt, fvt.x, fvt.y);

          dbsf Evfnt.KEY_PRESS:
          dbsf Evfnt.KEY_ACTION:
              rfturn kfyDown(fvt, fvt.kfy);

          dbsf Evfnt.KEY_RELEASE:
          dbsf Evfnt.KEY_ACTION_RELEASE:
              rfturn kfyUp(fvt, fvt.kfy);

          dbsf Evfnt.ACTION_EVENT:
              rfturn bdtion(fvt, fvt.brg);
          dbsf Evfnt.GOT_FOCUS:
              rfturn gotFodus(fvt, fvt.brg);
          dbsf Evfnt.LOST_FOCUS:
              rfturn lostFodus(fvt, fvt.brg);
        }
        rfturn fblsf;
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @pbrbm  x thf x doordinbtf
     * @pbrbm  y thf y doordinbtf
     * @rfturn {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by prodfssMousfEvfnt(MousfEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn mousfDown(Evfnt fvt, int x, int y) {
        rfturn fblsf;
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @pbrbm  x thf x doordinbtf
     * @pbrbm  y thf y doordinbtf
     * @rfturn {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by prodfssMousfMotionEvfnt(MousfEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn mousfDrbg(Evfnt fvt, int x, int y) {
        rfturn fblsf;
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @pbrbm  x thf x doordinbtf
     * @pbrbm  y thf y doordinbtf
     * @rfturn {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by prodfssMousfEvfnt(MousfEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn mousfUp(Evfnt fvt, int x, int y) {
        rfturn fblsf;
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @pbrbm  x thf x doordinbtf
     * @pbrbm  y thf y doordinbtf
     * @rfturn {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by prodfssMousfMotionEvfnt(MousfEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn mousfMovf(Evfnt fvt, int x, int y) {
        rfturn fblsf;
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @pbrbm  x thf x doordinbtf
     * @pbrbm  y thf y doordinbtf
     * @rfturn {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by prodfssMousfEvfnt(MousfEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn mousfEntfr(Evfnt fvt, int x, int y) {
        rfturn fblsf;
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @pbrbm  x thf x doordinbtf
     * @pbrbm  y thf y doordinbtf
     * @rfturn {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by prodfssMousfEvfnt(MousfEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn mousfExit(Evfnt fvt, int x, int y) {
        rfturn fblsf;
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @pbrbm  kfy thf kfy prfssfd
     * @rfturn {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by prodfssKfyEvfnt(KfyEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn kfyDown(Evfnt fvt, int kfy) {
        rfturn fblsf;
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @pbrbm  kfy thf kfy prfssfd
     * @rfturn {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by prodfssKfyEvfnt(KfyEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn kfyUp(Evfnt fvt, int kfy) {
        rfturn fblsf;
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @pbrbm  whbt thf objfdt bdtfd on
     * @rfturn {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * should rfgistfr this domponfnt bs AdtionListfnfr on domponfnt
     * whidh firfs bdtion fvfnts.
     */
    @Dfprfdbtfd
    publid boolfbn bdtion(Evfnt fvt, Objfdt whbt) {
        rfturn fblsf;
    }

    /**
     * Mbkfs this <dodf>Componfnt</dodf> displbybblf by donnfdting it to b
     * nbtivf sdrffn rfsourdf.
     * This mfthod is dbllfd intfrnblly by thf toolkit bnd should
     * not bf dbllfd dirfdtly by progrbms.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @sff       #isDisplbybblf
     * @sff       #rfmovfNotify
     * @sff #invblidbtf
     * @sindf 1.0
     */
    publid void bddNotify() {
        syndhronizfd (gftTrffLodk()) {
            ComponfntPffr pffr = this.pffr;
            if (pffr == null || pffr instbndfof LightwfightPffr){
                if (pffr == null) {
                    // Updbtf both thf Componfnt's pffr vbribblf bnd thf lodbl
                    // vbribblf wf usf for thrfbd sbffty.
                    this.pffr = pffr = gftToolkit().drfbtfComponfnt(this);
                }

                // This is b lightwfight domponfnt whidh mfbns it won't bf
                // bblf to gft window-rflbtfd fvfnts by itsflf.  If bny
                // hbvf bffn fnbblfd, thfn thf nfbrfst nbtivf dontbinfr must
                // bf fnbblfd.
                if (pbrfnt != null) {
                    long mbsk = 0;
                    if ((mousfListfnfr != null) || ((fvfntMbsk & AWTEvfnt.MOUSE_EVENT_MASK) != 0)) {
                        mbsk |= AWTEvfnt.MOUSE_EVENT_MASK;
                    }
                    if ((mousfMotionListfnfr != null) ||
                        ((fvfntMbsk & AWTEvfnt.MOUSE_MOTION_EVENT_MASK) != 0)) {
                        mbsk |= AWTEvfnt.MOUSE_MOTION_EVENT_MASK;
                    }
                    if ((mousfWhfflListfnfr != null ) ||
                        ((fvfntMbsk & AWTEvfnt.MOUSE_WHEEL_EVENT_MASK) != 0)) {
                        mbsk |= AWTEvfnt.MOUSE_WHEEL_EVENT_MASK;
                    }
                    if (fodusListfnfr != null || (fvfntMbsk & AWTEvfnt.FOCUS_EVENT_MASK) != 0) {
                        mbsk |= AWTEvfnt.FOCUS_EVENT_MASK;
                    }
                    if (kfyListfnfr != null || (fvfntMbsk & AWTEvfnt.KEY_EVENT_MASK) != 0) {
                        mbsk |= AWTEvfnt.KEY_EVENT_MASK;
                    }
                    if (mbsk != 0) {
                        pbrfnt.proxyEnbblfEvfnts(mbsk);
                    }
                }
            } flsf {
                // It's nbtivf. If thf pbrfnt is lightwfight it will nffd somf
                // hflp.
                Contbinfr pbrfnt = gftContbinfr();
                if (pbrfnt != null && pbrfnt.isLightwfight()) {
                    rflodbtfComponfnt();
                    if (!pbrfnt.isRfdursivflyVisiblfUpToHfbvywfightContbinfr())
                    {
                        pffr.sftVisiblf(fblsf);
                    }
                }
            }
            invblidbtf();

            int npopups = (popups != null? popups.sizf() : 0);
            for (int i = 0 ; i < npopups ; i++) {
                PopupMfnu popup = popups.flfmfntAt(i);
                popup.bddNotify();
            }

            if (dropTbrgft != null) dropTbrgft.bddNotify(pffr);

            pffrFont = gftFont();

            if (gftContbinfr() != null && !isAddNotifyComplftf) {
                gftContbinfr().indrfbsfComponfntCount(this);
            }


            // Updbtf stbdking ordfr
            updbtfZOrdfr();

            if (!isAddNotifyComplftf) {
                mixOnShowing();
            }

            isAddNotifyComplftf = truf;

            if (hifrbrdhyListfnfr != null ||
                (fvfntMbsk & AWTEvfnt.HIERARCHY_EVENT_MASK) != 0 ||
                Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK)) {
                HifrbrdhyEvfnt f =
                    nfw HifrbrdhyEvfnt(this, HifrbrdhyEvfnt.HIERARCHY_CHANGED,
                                       this, pbrfnt,
                                       HifrbrdhyEvfnt.DISPLAYABILITY_CHANGED |
                                       ((isRfdursivflyVisiblf())
                                        ? HifrbrdhyEvfnt.SHOWING_CHANGED
                                        : 0));
                dispbtdhEvfnt(f);
            }
        }
    }

    /**
     * Mbkfs this <dodf>Componfnt</dodf> undisplbybblf by dfstroying it nbtivf
     * sdrffn rfsourdf.
     * <p>
     * This mfthod is dbllfd by thf toolkit intfrnblly bnd should
     * not bf dbllfd dirfdtly by progrbms. Codf ovfrriding
     * this mfthod should dbll <dodf>supfr.rfmovfNotify</dodf> bs
     * thf first linf of thf ovfrriding mfthod.
     *
     * @sff       #isDisplbybblf
     * @sff       #bddNotify
     * @sindf 1.0
     */
    publid void rfmovfNotify() {
        KfybobrdFodusMbnbgfr.dlfbrMostRfdfntFodusOwnfr(this);
        if (KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
            gftPfrmbnfntFodusOwnfr() == this)
        {
            KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                sftGlobblPfrmbnfntFodusOwnfr(null);
        }

        syndhronizfd (gftTrffLodk()) {
            dlfbrLightwfightDispbtdhfrOnRfmovf(this);

            if (isFodusOwnfr() && KfybobrdFodusMbnbgfr.isAutoFodusTrbnsffrEnbblfdFor(this)) {
                trbnsffrFodus(truf);
            }

            if (gftContbinfr() != null && isAddNotifyComplftf) {
                gftContbinfr().dfdrfbsfComponfntCount(this);
            }

            int npopups = (popups != null? popups.sizf() : 0);
            for (int i = 0 ; i < npopups ; i++) {
                PopupMfnu popup = popups.flfmfntAt(i);
                popup.rfmovfNotify();
            }
            // If thfrf is bny input dontfxt for this domponfnt, notify
            // thbt this domponfnt is bfing rfmovfd. (This hbs to bf donf
            // bfforf hiding pffr.)
            if ((fvfntMbsk & AWTEvfnt.INPUT_METHODS_ENABLED_MASK) != 0) {
                InputContfxt inputContfxt = gftInputContfxt();
                if (inputContfxt != null) {
                    inputContfxt.rfmovfNotify(this);
                }
            }

            ComponfntPffr p = pffr;
            if (p != null) {
                boolfbn isLightwfight = isLightwfight();

                if (bufffrStrbtfgy instbndfof FlipBufffrStrbtfgy) {
                    ((FlipBufffrStrbtfgy)bufffrStrbtfgy).dfstroyBufffrs();
                }

                if (dropTbrgft != null) dropTbrgft.rfmovfNotify(pffr);

                // Hidf pffr first to stop systfm fvfnts sudh bs dursor movfs.
                if (visiblf) {
                    p.sftVisiblf(fblsf);
                }

                pffr = null; // Stop pffr updbtfs.
                pffrFont = null;

                Toolkit.gftEvfntQufuf().rfmovfSourdfEvfnts(this, fblsf);
                KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                    disdbrdKfyEvfnts(this);

                p.disposf();

                mixOnHiding(isLightwfight);

                isAddNotifyComplftf = fblsf;
                // Nullifying dompoundShbpf mfbns thbt thf domponfnt hbs normbl shbpf
                // (or hbs no shbpf bt bll).
                this.dompoundShbpf = null;
            }

            if (hifrbrdhyListfnfr != null ||
                (fvfntMbsk & AWTEvfnt.HIERARCHY_EVENT_MASK) != 0 ||
                Toolkit.fnbblfdOnToolkit(AWTEvfnt.HIERARCHY_EVENT_MASK)) {
                HifrbrdhyEvfnt f =
                    nfw HifrbrdhyEvfnt(this, HifrbrdhyEvfnt.HIERARCHY_CHANGED,
                                       this, pbrfnt,
                                       HifrbrdhyEvfnt.DISPLAYABILITY_CHANGED |
                                       ((isRfdursivflyVisiblf())
                                        ? HifrbrdhyEvfnt.SHOWING_CHANGED
                                        : 0));
                dispbtdhEvfnt(f);
            }
        }
    }

    /**
     * @pbrbm  fvt thf fvfnt to hbndlf
     * @pbrbm  whbt thf objfdt fodusfd
     * @rfturn  {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by prodfssFodusEvfnt(FodusEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn gotFodus(Evfnt fvt, Objfdt whbt) {
        rfturn fblsf;
    }

    /**
     * @pbrbm fvt  thf fvfnt to hbndlf
     * @pbrbm whbt thf objfdt fodusfd
     * @rfturn  {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by prodfssFodusEvfnt(FodusEvfnt).
     */
    @Dfprfdbtfd
    publid boolfbn lostFodus(Evfnt fvt, Objfdt whbt) {
        rfturn fblsf;
    }

    /**
     * Rfturns whfthfr this <dodf>Componfnt</dodf> dbn bfdomf thf fodus
     * ownfr.
     *
     * @rfturn <dodf>truf</dodf> if this <dodf>Componfnt</dodf> is
     * fodusbblf; <dodf>fblsf</dodf> othfrwisf
     * @sff #sftFodusbblf
     * @sindf 1.1
     * @dfprfdbtfd As of 1.4, rfplbdfd by <dodf>isFodusbblf()</dodf>.
     */
    @Dfprfdbtfd
    publid boolfbn isFodusTrbvfrsbblf() {
        if (isFodusTrbvfrsbblfOvfrriddfn == FOCUS_TRAVERSABLE_UNKNOWN) {
            isFodusTrbvfrsbblfOvfrriddfn = FOCUS_TRAVERSABLE_DEFAULT;
        }
        rfturn fodusbblf;
    }

    /**
     * Rfturns whfthfr this Componfnt dbn bf fodusfd.
     *
     * @rfturn <dodf>truf</dodf> if this Componfnt is fodusbblf;
     *         <dodf>fblsf</dodf> othfrwisf.
     * @sff #sftFodusbblf
     * @sindf 1.4
     */
    publid boolfbn isFodusbblf() {
        rfturn isFodusTrbvfrsbblf();
    }

    /**
     * Sfts thf fodusbblf stbtf of this Componfnt to thf spfdififd vbluf. This
     * vbluf ovfrridfs thf Componfnt's dffbult fodusbbility.
     *
     * @pbrbm fodusbblf indidbtfs whfthfr this Componfnt is fodusbblf
     * @sff #isFodusbblf
     * @sindf 1.4
     * @bfbninfo
     *       bound: truf
     */
    publid void sftFodusbblf(boolfbn fodusbblf) {
        boolfbn oldFodusbblf;
        syndhronizfd (this) {
            oldFodusbblf = this.fodusbblf;
            this.fodusbblf = fodusbblf;
        }
        isFodusTrbvfrsbblfOvfrriddfn = FOCUS_TRAVERSABLE_SET;

        firfPropfrtyChbngf("fodusbblf", oldFodusbblf, fodusbblf);
        if (oldFodusbblf && !fodusbblf) {
            if (isFodusOwnfr() && KfybobrdFodusMbnbgfr.isAutoFodusTrbnsffrEnbblfd()) {
                trbnsffrFodus(truf);
            }
            KfybobrdFodusMbnbgfr.dlfbrMostRfdfntFodusOwnfr(this);
        }
    }

    finbl boolfbn isFodusTrbvfrsbblfOvfrriddfn() {
        rfturn (isFodusTrbvfrsbblfOvfrriddfn != FOCUS_TRAVERSABLE_DEFAULT);
    }

    /**
     * Sfts thf fodus trbvfrsbl kfys for b givfn trbvfrsbl opfrbtion for this
     * Componfnt.
     * <p>
     * Thf dffbult vblufs for b Componfnt's fodus trbvfrsbl kfys brf
     * implfmfntbtion-dfpfndfnt. Sun rfdommfnds thbt bll implfmfntbtions for b
     * pbrtidulbr nbtivf plbtform usf thf sbmf dffbult vblufs. Thf
     * rfdommfndbtions for Windows bnd Unix brf listfd bflow. Thfsf
     * rfdommfndbtions brf usfd in thf Sun AWT implfmfntbtions.
     *
     * <tbblf bordfr=1 summbry="Rfdommfndfd dffbult vblufs for b Componfnt's fodus trbvfrsbl kfys">
     * <tr>
     *    <th>Idfntififr</th>
     *    <th>Mfbning</th>
     *    <th>Dffbult</th>
     * </tr>
     * <tr>
     *    <td>KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS</td>
     *    <td>Normbl forwbrd kfybobrd trbvfrsbl</td>
     *    <td>TAB on KEY_PRESSED, CTRL-TAB on KEY_PRESSED</td>
     * </tr>
     * <tr>
     *    <td>KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS</td>
     *    <td>Normbl rfvfrsf kfybobrd trbvfrsbl</td>
     *    <td>SHIFT-TAB on KEY_PRESSED, CTRL-SHIFT-TAB on KEY_PRESSED</td>
     * </tr>
     * <tr>
     *    <td>KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS</td>
     *    <td>Go up onf fodus trbvfrsbl dydlf</td>
     *    <td>nonf</td>
     * </tr>
     * </tbblf>
     *
     * To disbblf b trbvfrsbl kfy, usf bn fmpty Sft; Collfdtions.EMPTY_SET is
     * rfdommfndfd.
     * <p>
     * Using thf AWTKfyStrokf API, dlifnt dodf dbn spfdify on whidh of two
     * spfdifid KfyEvfnts, KEY_PRESSED or KEY_RELEASED, thf fodus trbvfrsbl
     * opfrbtion will oddur. Rfgbrdlfss of whidh KfyEvfnt is spfdififd,
     * howfvfr, bll KfyEvfnts rflbtfd to thf fodus trbvfrsbl kfy, indluding thf
     * bssodibtfd KEY_TYPED fvfnt, will bf donsumfd, bnd will not bf dispbtdhfd
     * to bny Componfnt. It is b runtimf frror to spfdify b KEY_TYPED fvfnt bs
     * mbpping to b fodus trbvfrsbl opfrbtion, or to mbp thf sbmf fvfnt to
     * multiplf dffbult fodus trbvfrsbl opfrbtions.
     * <p>
     * If b vbluf of null is spfdififd for thf Sft, this Componfnt inhfrits thf
     * Sft from its pbrfnt. If bll bndfstors of this Componfnt hbvf null
     * spfdififd for thf Sft, thfn thf durrfnt KfybobrdFodusMbnbgfr's dffbult
     * Sft is usfd.
     * <p>
     * This mfthod mby throw b {@dodf ClbssCbstExdfption} if bny {@dodf Objfdt}
     * in {@dodf kfystrokfs} is not bn {@dodf AWTKfyStrokf}.
     *
     * @pbrbm id onf of KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS, or
     *        KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS
     * @pbrbm kfystrokfs thf Sft of AWTKfyStrokf for thf spfdififd opfrbtion
     * @sff #gftFodusTrbvfrsblKfys
     * @sff KfybobrdFodusMbnbgfr#FORWARD_TRAVERSAL_KEYS
     * @sff KfybobrdFodusMbnbgfr#BACKWARD_TRAVERSAL_KEYS
     * @sff KfybobrdFodusMbnbgfr#UP_CYCLE_TRAVERSAL_KEYS
     * @throws IllfgblArgumfntExdfption if id is not onf of
     *         KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *         KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS, or
     *         KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS, or if kfystrokfs
     *         dontbins null, or if bny kfystrokf rfprfsfnts b KEY_TYPED fvfnt,
     *         or if bny kfystrokf blrfbdy mbps to bnothfr fodus trbvfrsbl
     *         opfrbtion for this Componfnt
     * @sindf 1.4
     * @bfbninfo
     *       bound: truf
     */
    publid void sftFodusTrbvfrsblKfys(int id,
                                      Sft<? fxtfnds AWTKfyStrokf> kfystrokfs)
    {
        if (id < 0 || id >= KfybobrdFodusMbnbgfr.TRAVERSAL_KEY_LENGTH - 1) {
            throw nfw IllfgblArgumfntExdfption("invblid fodus trbvfrsbl kfy idfntififr");
        }

        sftFodusTrbvfrsblKfys_NoIDChfdk(id, kfystrokfs);
    }

    /**
     * Rfturns thf Sft of fodus trbvfrsbl kfys for b givfn trbvfrsbl opfrbtion
     * for this Componfnt. (Sff
     * <dodf>sftFodusTrbvfrsblKfys</dodf> for b full dfsdription of fbdh kfy.)
     * <p>
     * If b Sft of trbvfrsbl kfys hbs not bffn fxpliditly dffinfd for this
     * Componfnt, thfn this Componfnt's pbrfnt's Sft is rfturnfd. If no Sft
     * hbs bffn fxpliditly dffinfd for bny of this Componfnt's bndfstors, thfn
     * thf durrfnt KfybobrdFodusMbnbgfr's dffbult Sft is rfturnfd.
     *
     * @pbrbm id onf of KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS, or
     *        KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS
     * @rfturn thf Sft of AWTKfyStrokfs for thf spfdififd opfrbtion. Thf Sft
     *         will bf unmodifibblf, bnd mby bf fmpty. null will nfvfr bf
     *         rfturnfd.
     * @sff #sftFodusTrbvfrsblKfys
     * @sff KfybobrdFodusMbnbgfr#FORWARD_TRAVERSAL_KEYS
     * @sff KfybobrdFodusMbnbgfr#BACKWARD_TRAVERSAL_KEYS
     * @sff KfybobrdFodusMbnbgfr#UP_CYCLE_TRAVERSAL_KEYS
     * @throws IllfgblArgumfntExdfption if id is not onf of
     *         KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *         KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS, or
     *         KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS
     * @sindf 1.4
     */
    publid Sft<AWTKfyStrokf> gftFodusTrbvfrsblKfys(int id) {
        if (id < 0 || id >= KfybobrdFodusMbnbgfr.TRAVERSAL_KEY_LENGTH - 1) {
            throw nfw IllfgblArgumfntExdfption("invblid fodus trbvfrsbl kfy idfntififr");
        }

        rfturn gftFodusTrbvfrsblKfys_NoIDChfdk(id);
    }

    // Wf dffinf thfsf mfthods so thbt Contbinfr dofs not nffd to rfpfbt this
    // dodf. Contbinfr dbnnot dbll supfr.<mfthod> bfdbusf Contbinfr bllows
    // DOWN_CYCLE_TRAVERSAL_KEY whilf Componfnt dofs not. Thf Componfnt mfthod
    // would frronfously gfnfrbtf bn IllfgblArgumfntExdfption for
    // DOWN_CYCLE_TRAVERSAL_KEY.
    finbl void sftFodusTrbvfrsblKfys_NoIDChfdk(int id, Sft<? fxtfnds AWTKfyStrokf> kfystrokfs) {
        Sft<AWTKfyStrokf> oldKfys;

        syndhronizfd (this) {
            if (fodusTrbvfrsblKfys == null) {
                initiblizfFodusTrbvfrsblKfys();
            }

            if (kfystrokfs != null) {
                for (AWTKfyStrokf kfystrokf : kfystrokfs ) {

                    if (kfystrokf == null) {
                        throw nfw IllfgblArgumfntExdfption("dbnnot sft null fodus trbvfrsbl kfy");
                    }

                    if (kfystrokf.gftKfyChbr() != KfyEvfnt.CHAR_UNDEFINED) {
                        throw nfw IllfgblArgumfntExdfption("fodus trbvfrsbl kfys dbnnot mbp to KEY_TYPED fvfnts");
                    }

                    for (int i = 0; i < fodusTrbvfrsblKfys.lfngth; i++) {
                        if (i == id) {
                            dontinuf;
                        }

                        if (gftFodusTrbvfrsblKfys_NoIDChfdk(i).dontbins(kfystrokf))
                        {
                            throw nfw IllfgblArgumfntExdfption("fodus trbvfrsbl kfys must bf uniquf for b Componfnt");
                        }
                    }
                }
            }

            oldKfys = fodusTrbvfrsblKfys[id];
            fodusTrbvfrsblKfys[id] = (kfystrokfs != null)
                ? Collfdtions.unmodifibblfSft(nfw HbshSft<AWTKfyStrokf>(kfystrokfs))
                : null;
        }

        firfPropfrtyChbngf(fodusTrbvfrsblKfyPropfrtyNbmfs[id], oldKfys,
                           kfystrokfs);
    }
    finbl Sft<AWTKfyStrokf> gftFodusTrbvfrsblKfys_NoIDChfdk(int id) {
        // Okby to rfturn Sft dirfdtly bfdbusf it is bn unmodifibblf vifw
        @SupprfssWbrnings("undhfdkfd")
        Sft<AWTKfyStrokf> kfystrokfs = (fodusTrbvfrsblKfys != null)
            ? fodusTrbvfrsblKfys[id]
            : null;

        if (kfystrokfs != null) {
            rfturn kfystrokfs;
        } flsf {
            Contbinfr pbrfnt = this.pbrfnt;
            if (pbrfnt != null) {
                rfturn pbrfnt.gftFodusTrbvfrsblKfys(id);
            } flsf {
                rfturn KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                    gftDffbultFodusTrbvfrsblKfys(id);
            }
        }
    }

    /**
     * Rfturns whfthfr thf Sft of fodus trbvfrsbl kfys for thf givfn fodus
     * trbvfrsbl opfrbtion hbs bffn fxpliditly dffinfd for this Componfnt. If
     * this mfthod rfturns <dodf>fblsf</dodf>, this Componfnt is inhfriting thf
     * Sft from bn bndfstor, or from thf durrfnt KfybobrdFodusMbnbgfr.
     *
     * @pbrbm id onf of KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS, or
     *        KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS
     * @rfturn <dodf>truf</dodf> if thf thf Sft of fodus trbvfrsbl kfys for thf
     *         givfn fodus trbvfrsbl opfrbtion hbs bffn fxpliditly dffinfd for
     *         this Componfnt; <dodf>fblsf</dodf> othfrwisf.
     * @throws IllfgblArgumfntExdfption if id is not onf of
     *         KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *         KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS, or
     *         KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS
     * @sindf 1.4
     */
    publid boolfbn brfFodusTrbvfrsblKfysSft(int id) {
        if (id < 0 || id >= KfybobrdFodusMbnbgfr.TRAVERSAL_KEY_LENGTH - 1) {
            throw nfw IllfgblArgumfntExdfption("invblid fodus trbvfrsbl kfy idfntififr");
        }

        rfturn (fodusTrbvfrsblKfys != null && fodusTrbvfrsblKfys[id] != null);
    }

    /**
     * Sfts whfthfr fodus trbvfrsbl kfys brf fnbblfd for this Componfnt.
     * Componfnts for whidh fodus trbvfrsbl kfys brf disbblfd rfdfivf kfy
     * fvfnts for fodus trbvfrsbl kfys. Componfnts for whidh fodus trbvfrsbl
     * kfys brf fnbblfd do not sff thfsf fvfnts; instfbd, thf fvfnts brf
     * butombtidblly donvfrtfd to trbvfrsbl opfrbtions.
     *
     * @pbrbm fodusTrbvfrsblKfysEnbblfd whfthfr fodus trbvfrsbl kfys brf
     *        fnbblfd for this Componfnt
     * @sff #gftFodusTrbvfrsblKfysEnbblfd
     * @sff #sftFodusTrbvfrsblKfys
     * @sff #gftFodusTrbvfrsblKfys
     * @sindf 1.4
     * @bfbninfo
     *       bound: truf
     */
    publid void sftFodusTrbvfrsblKfysEnbblfd(boolfbn
                                             fodusTrbvfrsblKfysEnbblfd) {
        boolfbn oldFodusTrbvfrsblKfysEnbblfd;
        syndhronizfd (this) {
            oldFodusTrbvfrsblKfysEnbblfd = this.fodusTrbvfrsblKfysEnbblfd;
            this.fodusTrbvfrsblKfysEnbblfd = fodusTrbvfrsblKfysEnbblfd;
        }
        firfPropfrtyChbngf("fodusTrbvfrsblKfysEnbblfd",
                           oldFodusTrbvfrsblKfysEnbblfd,
                           fodusTrbvfrsblKfysEnbblfd);
    }

    /**
     * Rfturns whfthfr fodus trbvfrsbl kfys brf fnbblfd for this Componfnt.
     * Componfnts for whidh fodus trbvfrsbl kfys brf disbblfd rfdfivf kfy
     * fvfnts for fodus trbvfrsbl kfys. Componfnts for whidh fodus trbvfrsbl
     * kfys brf fnbblfd do not sff thfsf fvfnts; instfbd, thf fvfnts brf
     * butombtidblly donvfrtfd to trbvfrsbl opfrbtions.
     *
     * @rfturn whfthfr fodus trbvfrsbl kfys brf fnbblfd for this Componfnt
     * @sff #sftFodusTrbvfrsblKfysEnbblfd
     * @sff #sftFodusTrbvfrsblKfys
     * @sff #gftFodusTrbvfrsblKfys
     * @sindf 1.4
     */
    publid boolfbn gftFodusTrbvfrsblKfysEnbblfd() {
        rfturn fodusTrbvfrsblKfysEnbblfd;
    }

    /**
     * Rfqufsts thbt this Componfnt gft thf input fodus, bnd thbt this
     * Componfnt's top-lfvfl bndfstor bfdomf thf fodusfd Window. This
     * domponfnt must bf displbybblf, fodusbblf, visiblf bnd bll of
     * its bndfstors (with thf fxdfption of thf top-lfvfl Window) must
     * bf visiblf for thf rfqufst to bf grbntfd. Evfry fffort will bf
     * mbdf to honor thf rfqufst; howfvfr, in somf dbsfs it mby bf
     * impossiblf to do so. Dfvflopfrs must nfvfr bssumf thbt this
     * Componfnt is thf fodus ownfr until this Componfnt rfdfivfs b
     * FOCUS_GAINED fvfnt. If this rfqufst is dfnifd bfdbusf this
     * Componfnt's top-lfvfl Window dbnnot bfdomf thf fodusfd Window,
     * thf rfqufst will bf rfmfmbfrfd bnd will bf grbntfd whfn thf
     * Window is lbtfr fodusfd by thf usfr.
     * <p>
     * This mfthod dbnnot bf usfd to sft thf fodus ownfr to no Componfnt bt
     * bll. Usf <dodf>KfybobrdFodusMbnbgfr.dlfbrGlobblFodusOwnfr()</dodf>
     * instfbd.
     * <p>
     * Bfdbusf thf fodus bfhbvior of this mfthod is plbtform-dfpfndfnt,
     * dfvflopfrs brf strongly fndourbgfd to usf
     * <dodf>rfqufstFodusInWindow</dodf> whfn possiblf.
     *
     * <p>Notf: Not bll fodus trbnsffrs rfsult from invoking this mfthod. As
     * sudh, b domponfnt mby rfdfivf fodus without this or bny of thf othfr
     * {@dodf rfqufstFodus} mfthods of {@dodf Componfnt} bfing invokfd.
     *
     * @sff #rfqufstFodusInWindow
     * @sff jbvb.bwt.fvfnt.FodusEvfnt
     * @sff #bddFodusListfnfr
     * @sff #isFodusbblf
     * @sff #isDisplbybblf
     * @sff KfybobrdFodusMbnbgfr#dlfbrGlobblFodusOwnfr
     * @sindf 1.0
     */
    publid void rfqufstFodus() {
        rfqufstFodusHflpfr(fblsf, truf);
    }

    boolfbn rfqufstFodus(CbusfdFodusEvfnt.Cbusf dbusf) {
        rfturn rfqufstFodusHflpfr(fblsf, truf, dbusf);
    }

    /**
     * Rfqufsts thbt this <dodf>Componfnt</dodf> gft thf input fodus,
     * bnd thbt this <dodf>Componfnt</dodf>'s top-lfvfl bndfstor
     * bfdomf thf fodusfd <dodf>Window</dodf>. This domponfnt must bf
     * displbybblf, fodusbblf, visiblf bnd bll of its bndfstors (with
     * thf fxdfption of thf top-lfvfl Window) must bf visiblf for thf
     * rfqufst to bf grbntfd. Evfry fffort will bf mbdf to honor thf
     * rfqufst; howfvfr, in somf dbsfs it mby bf impossiblf to do
     * so. Dfvflopfrs must nfvfr bssumf thbt this domponfnt is thf
     * fodus ownfr until this domponfnt rfdfivfs b FOCUS_GAINED
     * fvfnt. If this rfqufst is dfnifd bfdbusf this domponfnt's
     * top-lfvfl window dbnnot bfdomf thf fodusfd window, thf rfqufst
     * will bf rfmfmbfrfd bnd will bf grbntfd whfn thf window is lbtfr
     * fodusfd by thf usfr.
     * <p>
     * This mfthod rfturns b boolfbn vbluf. If <dodf>fblsf</dodf> is rfturnfd,
     * thf rfqufst is <b>gubrbntffd to fbil</b>. If <dodf>truf</dodf> is
     * rfturnfd, thf rfqufst will suddffd <b>unlfss</b> it is vftofd, or bn
     * fxtrbordinbry fvfnt, sudh bs disposbl of thf domponfnt's pffr, oddurs
     * bfforf thf rfqufst dbn bf grbntfd by thf nbtivf windowing systfm. Agbin,
     * whilf b rfturn vbluf of <dodf>truf</dodf> indidbtfs thbt thf rfqufst is
     * likfly to suddffd, dfvflopfrs must nfvfr bssumf thbt this domponfnt is
     * thf fodus ownfr until this domponfnt rfdfivfs b FOCUS_GAINED fvfnt.
     * <p>
     * This mfthod dbnnot bf usfd to sft thf fodus ownfr to no domponfnt bt
     * bll. Usf <dodf>KfybobrdFodusMbnbgfr.dlfbrGlobblFodusOwnfr</dodf>
     * instfbd.
     * <p>
     * Bfdbusf thf fodus bfhbvior of this mfthod is plbtform-dfpfndfnt,
     * dfvflopfrs brf strongly fndourbgfd to usf
     * <dodf>rfqufstFodusInWindow</dodf> whfn possiblf.
     * <p>
     * Evfry fffort will bf mbdf to fnsurf thbt <dodf>FodusEvfnt</dodf>s
     * gfnfrbtfd bs b
     * rfsult of this rfqufst will hbvf thf spfdififd tfmporbry vbluf. Howfvfr,
     * bfdbusf spfdifying bn brbitrbry tfmporbry stbtf mby not bf implfmfntbblf
     * on bll nbtivf windowing systfms, dorrfdt bfhbvior for this mfthod dbn bf
     * gubrbntffd only for lightwfight <dodf>Componfnt</dodf>s.
     * This mfthod is not intfndfd
     * for gfnfrbl usf, but fxists instfbd bs b hook for lightwfight domponfnt
     * librbrifs, sudh bs Swing.
     *
     * <p>Notf: Not bll fodus trbnsffrs rfsult from invoking this mfthod. As
     * sudh, b domponfnt mby rfdfivf fodus without this or bny of thf othfr
     * {@dodf rfqufstFodus} mfthods of {@dodf Componfnt} bfing invokfd.
     *
     * @pbrbm tfmporbry truf if thf fodus dhbngf is tfmporbry,
     *        sudh bs whfn thf window losfs thf fodus; for
     *        morf informbtion on tfmporbry fodus dhbngfs sff thf
     *<b hrff="../../jbvb/bwt/dod-filfs/FodusSpfd.html">Fodus Spfdifidbtion</b>
     * @rfturn <dodf>fblsf</dodf> if thf fodus dhbngf rfqufst is gubrbntffd to
     *         fbil; <dodf>truf</dodf> if it is likfly to suddffd
     * @sff jbvb.bwt.fvfnt.FodusEvfnt
     * @sff #bddFodusListfnfr
     * @sff #isFodusbblf
     * @sff #isDisplbybblf
     * @sff KfybobrdFodusMbnbgfr#dlfbrGlobblFodusOwnfr
     * @sindf 1.4
     */
    protfdtfd boolfbn rfqufstFodus(boolfbn tfmporbry) {
        rfturn rfqufstFodusHflpfr(tfmporbry, truf);
    }

    boolfbn rfqufstFodus(boolfbn tfmporbry, CbusfdFodusEvfnt.Cbusf dbusf) {
        rfturn rfqufstFodusHflpfr(tfmporbry, truf, dbusf);
    }
    /**
     * Rfqufsts thbt this Componfnt gft thf input fodus, if this
     * Componfnt's top-lfvfl bndfstor is blrfbdy thf fodusfd
     * Window. This domponfnt must bf displbybblf, fodusbblf, visiblf
     * bnd bll of its bndfstors (with thf fxdfption of thf top-lfvfl
     * Window) must bf visiblf for thf rfqufst to bf grbntfd. Evfry
     * fffort will bf mbdf to honor thf rfqufst; howfvfr, in somf
     * dbsfs it mby bf impossiblf to do so. Dfvflopfrs must nfvfr
     * bssumf thbt this Componfnt is thf fodus ownfr until this
     * Componfnt rfdfivfs b FOCUS_GAINED fvfnt.
     * <p>
     * This mfthod rfturns b boolfbn vbluf. If <dodf>fblsf</dodf> is rfturnfd,
     * thf rfqufst is <b>gubrbntffd to fbil</b>. If <dodf>truf</dodf> is
     * rfturnfd, thf rfqufst will suddffd <b>unlfss</b> it is vftofd, or bn
     * fxtrbordinbry fvfnt, sudh bs disposbl of thf Componfnt's pffr, oddurs
     * bfforf thf rfqufst dbn bf grbntfd by thf nbtivf windowing systfm. Agbin,
     * whilf b rfturn vbluf of <dodf>truf</dodf> indidbtfs thbt thf rfqufst is
     * likfly to suddffd, dfvflopfrs must nfvfr bssumf thbt this Componfnt is
     * thf fodus ownfr until this Componfnt rfdfivfs b FOCUS_GAINED fvfnt.
     * <p>
     * This mfthod dbnnot bf usfd to sft thf fodus ownfr to no Componfnt bt
     * bll. Usf <dodf>KfybobrdFodusMbnbgfr.dlfbrGlobblFodusOwnfr()</dodf>
     * instfbd.
     * <p>
     * Thf fodus bfhbvior of this mfthod dbn bf implfmfntfd uniformly bdross
     * plbtforms, bnd thus dfvflopfrs brf strongly fndourbgfd to usf this
     * mfthod ovfr <dodf>rfqufstFodus</dodf> whfn possiblf. Codf whidh rflifs
     * on <dodf>rfqufstFodus</dodf> mby fxhibit difffrfnt fodus bfhbvior on
     * difffrfnt plbtforms.
     *
     * <p>Notf: Not bll fodus trbnsffrs rfsult from invoking this mfthod. As
     * sudh, b domponfnt mby rfdfivf fodus without this or bny of thf othfr
     * {@dodf rfqufstFodus} mfthods of {@dodf Componfnt} bfing invokfd.
     *
     * @rfturn <dodf>fblsf</dodf> if thf fodus dhbngf rfqufst is gubrbntffd to
     *         fbil; <dodf>truf</dodf> if it is likfly to suddffd
     * @sff #rfqufstFodus
     * @sff jbvb.bwt.fvfnt.FodusEvfnt
     * @sff #bddFodusListfnfr
     * @sff #isFodusbblf
     * @sff #isDisplbybblf
     * @sff KfybobrdFodusMbnbgfr#dlfbrGlobblFodusOwnfr
     * @sindf 1.4
     */
    publid boolfbn rfqufstFodusInWindow() {
        rfturn rfqufstFodusHflpfr(fblsf, fblsf);
    }

    boolfbn rfqufstFodusInWindow(CbusfdFodusEvfnt.Cbusf dbusf) {
        rfturn rfqufstFodusHflpfr(fblsf, fblsf, dbusf);
    }

    /**
     * Rfqufsts thbt this <dodf>Componfnt</dodf> gft thf input fodus,
     * if this <dodf>Componfnt</dodf>'s top-lfvfl bndfstor is blrfbdy
     * thf fodusfd <dodf>Window</dodf>.  This domponfnt must bf
     * displbybblf, fodusbblf, visiblf bnd bll of its bndfstors (with
     * thf fxdfption of thf top-lfvfl Window) must bf visiblf for thf
     * rfqufst to bf grbntfd. Evfry fffort will bf mbdf to honor thf
     * rfqufst; howfvfr, in somf dbsfs it mby bf impossiblf to do
     * so. Dfvflopfrs must nfvfr bssumf thbt this domponfnt is thf
     * fodus ownfr until this domponfnt rfdfivfs b FOCUS_GAINED fvfnt.
     * <p>
     * This mfthod rfturns b boolfbn vbluf. If <dodf>fblsf</dodf> is rfturnfd,
     * thf rfqufst is <b>gubrbntffd to fbil</b>. If <dodf>truf</dodf> is
     * rfturnfd, thf rfqufst will suddffd <b>unlfss</b> it is vftofd, or bn
     * fxtrbordinbry fvfnt, sudh bs disposbl of thf domponfnt's pffr, oddurs
     * bfforf thf rfqufst dbn bf grbntfd by thf nbtivf windowing systfm. Agbin,
     * whilf b rfturn vbluf of <dodf>truf</dodf> indidbtfs thbt thf rfqufst is
     * likfly to suddffd, dfvflopfrs must nfvfr bssumf thbt this domponfnt is
     * thf fodus ownfr until this domponfnt rfdfivfs b FOCUS_GAINED fvfnt.
     * <p>
     * This mfthod dbnnot bf usfd to sft thf fodus ownfr to no domponfnt bt
     * bll. Usf <dodf>KfybobrdFodusMbnbgfr.dlfbrGlobblFodusOwnfr</dodf>
     * instfbd.
     * <p>
     * Thf fodus bfhbvior of this mfthod dbn bf implfmfntfd uniformly bdross
     * plbtforms, bnd thus dfvflopfrs brf strongly fndourbgfd to usf this
     * mfthod ovfr <dodf>rfqufstFodus</dodf> whfn possiblf. Codf whidh rflifs
     * on <dodf>rfqufstFodus</dodf> mby fxhibit difffrfnt fodus bfhbvior on
     * difffrfnt plbtforms.
     * <p>
     * Evfry fffort will bf mbdf to fnsurf thbt <dodf>FodusEvfnt</dodf>s
     * gfnfrbtfd bs b
     * rfsult of this rfqufst will hbvf thf spfdififd tfmporbry vbluf. Howfvfr,
     * bfdbusf spfdifying bn brbitrbry tfmporbry stbtf mby not bf implfmfntbblf
     * on bll nbtivf windowing systfms, dorrfdt bfhbvior for this mfthod dbn bf
     * gubrbntffd only for lightwfight domponfnts. This mfthod is not intfndfd
     * for gfnfrbl usf, but fxists instfbd bs b hook for lightwfight domponfnt
     * librbrifs, sudh bs Swing.
     *
     * <p>Notf: Not bll fodus trbnsffrs rfsult from invoking this mfthod. As
     * sudh, b domponfnt mby rfdfivf fodus without this or bny of thf othfr
     * {@dodf rfqufstFodus} mfthods of {@dodf Componfnt} bfing invokfd.
     *
     * @pbrbm tfmporbry truf if thf fodus dhbngf is tfmporbry,
     *        sudh bs whfn thf window losfs thf fodus; for
     *        morf informbtion on tfmporbry fodus dhbngfs sff thf
     *<b hrff="../../jbvb/bwt/dod-filfs/FodusSpfd.html">Fodus Spfdifidbtion</b>
     * @rfturn <dodf>fblsf</dodf> if thf fodus dhbngf rfqufst is gubrbntffd to
     *         fbil; <dodf>truf</dodf> if it is likfly to suddffd
     * @sff #rfqufstFodus
     * @sff jbvb.bwt.fvfnt.FodusEvfnt
     * @sff #bddFodusListfnfr
     * @sff #isFodusbblf
     * @sff #isDisplbybblf
     * @sff KfybobrdFodusMbnbgfr#dlfbrGlobblFodusOwnfr
     * @sindf 1.4
     */
    protfdtfd boolfbn rfqufstFodusInWindow(boolfbn tfmporbry) {
        rfturn rfqufstFodusHflpfr(tfmporbry, fblsf);
    }

    boolfbn rfqufstFodusInWindow(boolfbn tfmporbry, CbusfdFodusEvfnt.Cbusf dbusf) {
        rfturn rfqufstFodusHflpfr(tfmporbry, fblsf, dbusf);
    }

    finbl boolfbn rfqufstFodusHflpfr(boolfbn tfmporbry,
                                     boolfbn fodusfdWindowChbngfAllowfd) {
        rfturn rfqufstFodusHflpfr(tfmporbry, fodusfdWindowChbngfAllowfd, CbusfdFodusEvfnt.Cbusf.UNKNOWN);
    }

    finbl boolfbn rfqufstFodusHflpfr(boolfbn tfmporbry,
                                     boolfbn fodusfdWindowChbngfAllowfd,
                                     CbusfdFodusEvfnt.Cbusf dbusf)
    {
        // 1) Chfdk if thf fvfnt bfing dispbtdhfd is b systfm-gfnfrbtfd mousf fvfnt.
        AWTEvfnt durrfntEvfnt = EvfntQufuf.gftCurrfntEvfnt();
        if (durrfntEvfnt instbndfof MousfEvfnt &&
            SunToolkit.isSystfmGfnfrbtfd(durrfntEvfnt))
        {
            // 2) Sbnity dhfdk: if thf mousf fvfnt domponfnt sourdf bflongs to thf sbmf dontbining window.
            Componfnt sourdf = ((MousfEvfnt)durrfntEvfnt).gftComponfnt();
            if (sourdf == null || sourdf.gftContbiningWindow() == gftContbiningWindow()) {
                fodusLog.finfst("rfqufsting fodus by mousf fvfnt \"in window\"");

                // If both thf donditions brf fulfillfd thf fodus rfqufst should bf stridtly
                // boundfd by thf toplfvfl window. It's bssumfd thbt thf mousf fvfnt bdtivbtfs
                // thf window (if it wbsn't bdtivf) bnd this mbkfs it possiblf for b fodus
                // rfqufst with b strong in-window rfquirfmfnt to dhbngf fodus in thf bounds
                // of thf toplfvfl. If, by bny mfbns, duf to bsyndhronous nbturf of thf fvfnt
                // dispbtdhing mfdhbnism, thf window hbppfns to bf nbtivfly inbdtivf by thf timf
                // this fodus rfqufst is fvfntublly hbndlfd, it should not rf-bdtivbtf thf
                // toplfvfl. Othfrwisf thf rfsult mby not mfft usfr fxpfdtbtions. Sff 6981400.
                fodusfdWindowChbngfAllowfd = fblsf;
            }
        }
        if (!isRfqufstFodusAddfptfd(tfmporbry, fodusfdWindowChbngfAllowfd, dbusf)) {
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fodusLog.finfst("rfqufstFodus is not bddfptfd");
            }
            rfturn fblsf;
        }
        // Updbtf most-rfdfnt mbp
        KfybobrdFodusMbnbgfr.sftMostRfdfntFodusOwnfr(this);

        Componfnt window = this;
        whilf ( (window != null) && !(window instbndfof Window)) {
            if (!window.isVisiblf()) {
                if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                    fodusLog.finfst("domponfnt is rfdurivfly invisiblf");
                }
                rfturn fblsf;
            }
            window = window.pbrfnt;
        }

        ComponfntPffr pffr = this.pffr;
        Componfnt hfbvywfight = (pffr instbndfof LightwfightPffr)
            ? gftNbtivfContbinfr() : this;
        if (hfbvywfight == null || !hfbvywfight.isVisiblf()) {
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fodusLog.finfst("Componfnt is not b pbrt of visiblf hifrbrdhy");
            }
            rfturn fblsf;
        }
        pffr = hfbvywfight.pffr;
        if (pffr == null) {
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fodusLog.finfst("Pffr is null");
            }
            rfturn fblsf;
        }

        // Fodus this Componfnt
        long timf = 0;
        if (EvfntQufuf.isDispbtdhThrfbd()) {
            timf = Toolkit.gftEvfntQufuf().gftMostRfdfntKfyEvfntTimf();
        } flsf {
            // A fodus rfqufst mbdf from outsidf EDT should not bf bssodibtfd with bny fvfnt
            // bnd so its timf stbmp is simply sft to thf durrfnt timf.
            timf = Systfm.durrfntTimfMillis();
        }

        boolfbn suddfss = pffr.rfqufstFodus
            (this, tfmporbry, fodusfdWindowChbngfAllowfd, timf, dbusf);
        if (!suddfss) {
            KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr
                (bppContfxt).dfqufufKfyEvfnts(timf, this);
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fodusLog.finfst("Pffr rfqufst fbilfd");
            }
        } flsf {
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fodusLog.finfst("Pbss for " + this);
            }
        }
        rfturn suddfss;
    }

    privbtf boolfbn isRfqufstFodusAddfptfd(boolfbn tfmporbry,
                                           boolfbn fodusfdWindowChbngfAllowfd,
                                           CbusfdFodusEvfnt.Cbusf dbusf)
    {
        if (!isFodusbblf() || !isVisiblf()) {
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fodusLog.finfst("Not fodusbblf or not visiblf");
            }
            rfturn fblsf;
        }

        ComponfntPffr pffr = this.pffr;
        if (pffr == null) {
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fodusLog.finfst("pffr is null");
            }
            rfturn fblsf;
        }

        Window window = gftContbiningWindow();
        if (window == null || !window.isFodusbblfWindow()) {
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fodusLog.finfst("Componfnt dofsn't hbvf toplfvfl");
            }
            rfturn fblsf;
        }

        // Wf hbvf pbssfd bll rfgulbr dhfdks for fodus rfqufst,
        // now lft's dbll RfqufstFodusControllfr bnd sff whbt it sbys.
        Componfnt fodusOwnfr = KfybobrdFodusMbnbgfr.gftMostRfdfntFodusOwnfr(window);
        if (fodusOwnfr == null) {
            // somftimfs most rfdfnt fodus ownfr mby bf null, but fodus ownfr is not
            // f.g. wf rfsft most rfdfnt fodus ownfr if usfr rfmovfs fodus ownfr
            fodusOwnfr = KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().gftFodusOwnfr();
            if (fodusOwnfr != null && fodusOwnfr.gftContbiningWindow() != window) {
                fodusOwnfr = null;
            }
        }

        if (fodusOwnfr == this || fodusOwnfr == null) {
            // Controllfr is supposfd to vfrify fodus trbnsffrs bnd for this it
            // should know both from bnd to domponfnts.  And it shouldn't vfrify
            // trbnsffrs from whfn thfsf domponfnts brf fqubl.
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fodusLog.finfst("fodus ownfr is null or this");
            }
            rfturn truf;
        }

        if (CbusfdFodusEvfnt.Cbusf.ACTIVATION == dbusf) {
            // wf shouldn't dbll RfqufstFodusControllfr in dbsf wf brf
            // in bdtivbtion.  Wf do rfqufst fodus on domponfnt whidh
            // hbs got tfmporbry fodus lost bnd thfn on domponfnt whidh is
            // most rfdfnt fodus ownfr.  But most rfdfnt fodus ownfr dbn bf
            // dhbngfd by rfqufstFodsuXXX() dbll only, so this trbnsffr hbs
            // bffn blrfbdy bpprovfd.
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                fodusLog.finfst("dbusf is bdtivbtion");
            }
            rfturn truf;
        }

        boolfbn rft = Componfnt.rfqufstFodusControllfr.bddfptRfqufstFodus(fodusOwnfr,
                                                                          this,
                                                                          tfmporbry,
                                                                          fodusfdWindowChbngfAllowfd,
                                                                          dbusf);
        if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
            fodusLog.finfst("RfqufstFodusControllfr rfturns {0}", rft);
        }

        rfturn rft;
    }

    privbtf stbtid RfqufstFodusControllfr rfqufstFodusControllfr = nfw DummyRfqufstFodusControllfr();

    // Swing bddfss this mfthod through rfflfdtion to implfmfnt InputVfrififr's fundtionblity.
    // Pfrhbps, wf should mbkf this mfthod publid (lbtfr ;)
    privbtf stbtid dlbss DummyRfqufstFodusControllfr implfmfnts RfqufstFodusControllfr {
        publid boolfbn bddfptRfqufstFodus(Componfnt from, Componfnt to,
                                          boolfbn tfmporbry, boolfbn fodusfdWindowChbngfAllowfd,
                                          CbusfdFodusEvfnt.Cbusf dbusf)
        {
            rfturn truf;
        }
    };

    syndhronizfd stbtid void sftRfqufstFodusControllfr(RfqufstFodusControllfr rfqufstControllfr)
    {
        if (rfqufstControllfr == null) {
            rfqufstFodusControllfr = nfw DummyRfqufstFodusControllfr();
        } flsf {
            rfqufstFodusControllfr = rfqufstControllfr;
        }
    }

    /**
     * Rfturns thf Contbinfr whidh is thf fodus dydlf root of this Componfnt's
     * fodus trbvfrsbl dydlf. Ebdh fodus trbvfrsbl dydlf hbs only b singlf
     * fodus dydlf root bnd fbdh Componfnt whidh is not b Contbinfr bflongs to
     * only b singlf fodus trbvfrsbl dydlf. Contbinfrs whidh brf fodus dydlf
     * roots bflong to two dydlfs: onf rootfd bt thf Contbinfr itsflf, bnd onf
     * rootfd bt thf Contbinfr's nfbrfst fodus-dydlf-root bndfstor. For sudh
     * Contbinfrs, this mfthod will rfturn thf Contbinfr's nfbrfst fodus-dydlf-
     * root bndfstor.
     *
     * @rfturn this Componfnt's nfbrfst fodus-dydlf-root bndfstor
     * @sff Contbinfr#isFodusCydlfRoot()
     * @sindf 1.4
     */
    publid Contbinfr gftFodusCydlfRootAndfstor() {
        Contbinfr rootAndfstor = this.pbrfnt;
        whilf (rootAndfstor != null && !rootAndfstor.isFodusCydlfRoot()) {
            rootAndfstor = rootAndfstor.pbrfnt;
        }
        rfturn rootAndfstor;
    }

    /**
     * Rfturns whfthfr thf spfdififd Contbinfr is thf fodus dydlf root of this
     * Componfnt's fodus trbvfrsbl dydlf. Ebdh fodus trbvfrsbl dydlf hbs only
     * b singlf fodus dydlf root bnd fbdh Componfnt whidh is not b Contbinfr
     * bflongs to only b singlf fodus trbvfrsbl dydlf.
     *
     * @pbrbm dontbinfr thf Contbinfr to bf tfstfd
     * @rfturn <dodf>truf</dodf> if thf spfdififd Contbinfr is b fodus-dydlf-
     *         root of this Componfnt; <dodf>fblsf</dodf> othfrwisf
     * @sff Contbinfr#isFodusCydlfRoot()
     * @sindf 1.4
     */
    publid boolfbn isFodusCydlfRoot(Contbinfr dontbinfr) {
        Contbinfr rootAndfstor = gftFodusCydlfRootAndfstor();
        rfturn (rootAndfstor == dontbinfr);
    }

    Contbinfr gftTrbvfrsblRoot() {
        rfturn gftFodusCydlfRootAndfstor();
    }

    /**
     * Trbnsffrs thf fodus to thf nfxt domponfnt, bs though this Componfnt wfrf
     * thf fodus ownfr.
     * @sff       #rfqufstFodus()
     * @sindf     1.1
     */
    publid void trbnsffrFodus() {
        nfxtFodus();
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by trbnsffrFodus().
     */
    @Dfprfdbtfd
    publid void nfxtFodus() {
        trbnsffrFodus(fblsf);
    }

    boolfbn trbnsffrFodus(boolfbn dlfbrOnFbilurf) {
        if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            fodusLog.finfr("dlfbrOnFbilurf = " + dlfbrOnFbilurf);
        }
        Componfnt toFodus = gftNfxtFodusCbndidbtf();
        boolfbn rfs = fblsf;
        if (toFodus != null && !toFodus.isFodusOwnfr() && toFodus != this) {
            rfs = toFodus.rfqufstFodusInWindow(CbusfdFodusEvfnt.Cbusf.TRAVERSAL_FORWARD);
        }
        if (dlfbrOnFbilurf && !rfs) {
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                fodusLog.finfr("dlfbr globbl fodus ownfr");
            }
            KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().dlfbrGlobblFodusOwnfrPriv();
        }
        if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            fodusLog.finfr("rfturning rfsult: " + rfs);
        }
        rfturn rfs;
    }

    finbl Componfnt gftNfxtFodusCbndidbtf() {
        Contbinfr rootAndfstor = gftTrbvfrsblRoot();
        Componfnt domp = this;
        whilf (rootAndfstor != null &&
               !(rootAndfstor.isShowing() && rootAndfstor.dbnBfFodusOwnfr()))
        {
            domp = rootAndfstor;
            rootAndfstor = domp.gftFodusCydlfRootAndfstor();
        }
        if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            fodusLog.finfr("domp = " + domp + ", root = " + rootAndfstor);
        }
        Componfnt dbndidbtf = null;
        if (rootAndfstor != null) {
            FodusTrbvfrsblPolidy polidy = rootAndfstor.gftFodusTrbvfrsblPolidy();
            Componfnt toFodus = polidy.gftComponfntAftfr(rootAndfstor, domp);
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                fodusLog.finfr("domponfnt bftfr is " + toFodus);
            }
            if (toFodus == null) {
                toFodus = polidy.gftDffbultComponfnt(rootAndfstor);
                if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                    fodusLog.finfr("dffbult domponfnt is " + toFodus);
                }
            }
            if (toFodus == null) {
                Applft bpplft = EmbfddfdFrbmf.gftApplftIfAndfstorOf(this);
                if (bpplft != null) {
                    toFodus = bpplft;
                }
            }
            dbndidbtf = toFodus;
        }
        if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            fodusLog.finfr("Fodus trbnsffr dbndidbtf: " + dbndidbtf);
        }
        rfturn dbndidbtf;
    }

    /**
     * Trbnsffrs thf fodus to thf prfvious domponfnt, bs though this Componfnt
     * wfrf thf fodus ownfr.
     * @sff       #rfqufstFodus()
     * @sindf     1.4
     */
    publid void trbnsffrFodusBbdkwbrd() {
        trbnsffrFodusBbdkwbrd(fblsf);
    }

    boolfbn trbnsffrFodusBbdkwbrd(boolfbn dlfbrOnFbilurf) {
        Contbinfr rootAndfstor = gftTrbvfrsblRoot();
        Componfnt domp = this;
        whilf (rootAndfstor != null &&
               !(rootAndfstor.isShowing() && rootAndfstor.dbnBfFodusOwnfr()))
        {
            domp = rootAndfstor;
            rootAndfstor = domp.gftFodusCydlfRootAndfstor();
        }
        boolfbn rfs = fblsf;
        if (rootAndfstor != null) {
            FodusTrbvfrsblPolidy polidy = rootAndfstor.gftFodusTrbvfrsblPolidy();
            Componfnt toFodus = polidy.gftComponfntBfforf(rootAndfstor, domp);
            if (toFodus == null) {
                toFodus = polidy.gftDffbultComponfnt(rootAndfstor);
            }
            if (toFodus != null) {
                rfs = toFodus.rfqufstFodusInWindow(CbusfdFodusEvfnt.Cbusf.TRAVERSAL_BACKWARD);
            }
        }
        if (dlfbrOnFbilurf && !rfs) {
            if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                fodusLog.finfr("dlfbr globbl fodus ownfr");
            }
            KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().dlfbrGlobblFodusOwnfrPriv();
        }
        if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            fodusLog.finfr("rfturning rfsult: " + rfs);
        }
        rfturn rfs;
    }

    /**
     * Trbnsffrs thf fodus up onf fodus trbvfrsbl dydlf. Typidblly, thf fodus
     * ownfr is sft to this Componfnt's fodus dydlf root, bnd thf durrfnt fodus
     * dydlf root is sft to thf nfw fodus ownfr's fodus dydlf root. If,
     * howfvfr, this Componfnt's fodus dydlf root is b Window, thfn thf fodus
     * ownfr is sft to thf fodus dydlf root's dffbult Componfnt to fodus, bnd
     * thf durrfnt fodus dydlf root is undhbngfd.
     *
     * @sff       #rfqufstFodus()
     * @sff       Contbinfr#isFodusCydlfRoot()
     * @sff       Contbinfr#sftFodusCydlfRoot(boolfbn)
     * @sindf     1.4
     */
    publid void trbnsffrFodusUpCydlf() {
        Contbinfr rootAndfstor;
        for (rootAndfstor = gftFodusCydlfRootAndfstor();
             rootAndfstor != null && !(rootAndfstor.isShowing() &&
                                       rootAndfstor.isFodusbblf() &&
                                       rootAndfstor.isEnbblfd());
             rootAndfstor = rootAndfstor.gftFodusCydlfRootAndfstor()) {
        }

        if (rootAndfstor != null) {
            Contbinfr rootAndfstorRootAndfstor =
                rootAndfstor.gftFodusCydlfRootAndfstor();
            Contbinfr fdr = (rootAndfstorRootAndfstor != null) ?
                rootAndfstorRootAndfstor : rootAndfstor;

            KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                sftGlobblCurrfntFodusCydlfRootPriv(fdr);
            rootAndfstor.rfqufstFodus(CbusfdFodusEvfnt.Cbusf.TRAVERSAL_UP);
        } flsf {
            Window window = gftContbiningWindow();

            if (window != null) {
                Componfnt toFodus = window.gftFodusTrbvfrsblPolidy().
                    gftDffbultComponfnt(window);
                if (toFodus != null) {
                    KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                        sftGlobblCurrfntFodusCydlfRootPriv(window);
                    toFodus.rfqufstFodus(CbusfdFodusEvfnt.Cbusf.TRAVERSAL_UP);
                }
            }
        }
    }

    /**
     * Rfturns <dodf>truf</dodf> if this <dodf>Componfnt</dodf> is thf
     * fodus ownfr.  This mfthod is obsolftf, bnd hbs bffn rfplbdfd by
     * <dodf>isFodusOwnfr()</dodf>.
     *
     * @rfturn <dodf>truf</dodf> if this <dodf>Componfnt</dodf> is thf
     *         fodus ownfr; <dodf>fblsf</dodf> othfrwisf
     * @sindf 1.2
     */
    publid boolfbn hbsFodus() {
        rfturn (KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                gftFodusOwnfr() == this);
    }

    /**
     * Rfturns <dodf>truf</dodf> if this <dodf>Componfnt</dodf> is thf
     *    fodus ownfr.
     *
     * @rfturn <dodf>truf</dodf> if this <dodf>Componfnt</dodf> is thf
     *     fodus ownfr; <dodf>fblsf</dodf> othfrwisf
     * @sindf 1.4
     */
    publid boolfbn isFodusOwnfr() {
        rfturn hbsFodus();
    }

    /*
     * Usfd to disbllow buto-fodus-trbnsffr on disposbl of thf fodus ownfr
     * in thf prodfss of disposing its pbrfnt dontbinfr.
     */
    privbtf boolfbn butoFodusTrbnsffrOnDisposbl = truf;

    void sftAutoFodusTrbnsffrOnDisposbl(boolfbn vbluf) {
        butoFodusTrbnsffrOnDisposbl = vbluf;
    }

    boolfbn isAutoFodusTrbnsffrOnDisposbl() {
        rfturn butoFodusTrbnsffrOnDisposbl;
    }

    /**
     * Adds thf spfdififd popup mfnu to thf domponfnt.
     * @pbrbm     popup thf popup mfnu to bf bddfd to thf domponfnt.
     * @sff       #rfmovf(MfnuComponfnt)
     * @fxdfption NullPointfrExdfption if {@dodf popup} is {@dodf null}
     * @sindf     1.1
     */
    publid void bdd(PopupMfnu popup) {
        syndhronizfd (gftTrffLodk()) {
            if (popup.pbrfnt != null) {
                popup.pbrfnt.rfmovf(popup);
            }
            if (popups == null) {
                popups = nfw Vfdtor<PopupMfnu>();
            }
            popups.bddElfmfnt(popup);
            popup.pbrfnt = this;

            if (pffr != null) {
                if (popup.pffr == null) {
                    popup.bddNotify();
                }
            }
        }
    }

    /**
     * Rfmovfs thf spfdififd popup mfnu from thf domponfnt.
     * @pbrbm     popup thf popup mfnu to bf rfmovfd
     * @sff       #bdd(PopupMfnu)
     * @sindf     1.1
     */
    @SupprfssWbrnings("undhfdkfd")
    publid void rfmovf(MfnuComponfnt popup) {
        syndhronizfd (gftTrffLodk()) {
            if (popups == null) {
                rfturn;
            }
            int indfx = popups.indfxOf(popup);
            if (indfx >= 0) {
                PopupMfnu pmfnu = (PopupMfnu)popup;
                if (pmfnu.pffr != null) {
                    pmfnu.rfmovfNotify();
                }
                pmfnu.pbrfnt = null;
                popups.rfmovfElfmfntAt(indfx);
                if (popups.sizf() == 0) {
                    popups = null;
                }
            }
        }
    }

    /**
     * Rfturns b string rfprfsfnting thf stbtf of this domponfnt. This
     * mfthod is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not bf
     * <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of this domponfnt's stbtf
     * @sindf     1.0
     */
    protfdtfd String pbrbmString() {
        finbl String thisNbmf = Objfdts.toString(gftNbmf(), "");
        finbl String invblid = isVblid() ? "" : ",invblid";
        finbl String hiddfn = visiblf ? "" : ",hiddfn";
        finbl String disbblfd = fnbblfd ? "" : ",disbblfd";
        rfturn thisNbmf + ',' + x + ',' + y + ',' + width + 'x' + hfight
                + invblid + hiddfn + disbblfd;
    }

    /**
     * Rfturns b string rfprfsfntbtion of this domponfnt bnd its vblufs.
     * @rfturn    b string rfprfsfntbtion of this domponfnt
     * @sindf     1.0
     */
    publid String toString() {
        rfturn gftClbss().gftNbmf() + '[' + pbrbmString() + ']';
    }

    /**
     * Prints b listing of this domponfnt to thf stbndbrd systfm output
     * strfbm <dodf>Systfm.out</dodf>.
     * @sff       jbvb.lbng.Systfm#out
     * @sindf     1.0
     */
    publid void list() {
        list(Systfm.out, 0);
    }

    /**
     * Prints b listing of this domponfnt to thf spfdififd output
     * strfbm.
     * @pbrbm    out   b print strfbm
     * @throws   NullPointfrExdfption if {@dodf out} is {@dodf null}
     * @sindf    1.0
     */
    publid void list(PrintStrfbm out) {
        list(out, 0);
    }

    /**
     * Prints out b list, stbrting bt thf spfdififd indfntbtion, to thf
     * spfdififd print strfbm.
     * @pbrbm     out      b print strfbm
     * @pbrbm     indfnt   numbfr of spbdfs to indfnt
     * @sff       jbvb.io.PrintStrfbm#println(jbvb.lbng.Objfdt)
     * @throws    NullPointfrExdfption if {@dodf out} is {@dodf null}
     * @sindf     1.0
     */
    publid void list(PrintStrfbm out, int indfnt) {
        for (int i = 0 ; i < indfnt ; i++) {
            out.print(" ");
        }
        out.println(this);
    }

    /**
     * Prints b listing to thf spfdififd print writfr.
     * @pbrbm  out  thf print writfr to print to
     * @throws NullPointfrExdfption if {@dodf out} is {@dodf null}
     * @sindf 1.1
     */
    publid void list(PrintWritfr out) {
        list(out, 0);
    }

    /**
     * Prints out b list, stbrting bt thf spfdififd indfntbtion, to
     * thf spfdififd print writfr.
     * @pbrbm out thf print writfr to print to
     * @pbrbm indfnt thf numbfr of spbdfs to indfnt
     * @throws NullPointfrExdfption if {@dodf out} is {@dodf null}
     * @sff       jbvb.io.PrintStrfbm#println(jbvb.lbng.Objfdt)
     * @sindf 1.1
     */
    publid void list(PrintWritfr out, int indfnt) {
        for (int i = 0 ; i < indfnt ; i++) {
            out.print(" ");
        }
        out.println(this);
    }

    /*
     * Fftdhfs thf nbtivf dontbinfr somfwhfrf highfr up in thf domponfnt
     * trff thbt dontbins this domponfnt.
     */
    finbl Contbinfr gftNbtivfContbinfr() {
        Contbinfr p = gftContbinfr();
        whilf (p != null && p.pffr instbndfof LightwfightPffr) {
            p = p.gftContbinfr();
        }
        rfturn p;
    }

    /**
     * Adds b PropfrtyChbngfListfnfr to thf listfnfr list. Thf listfnfr is
     * rfgistfrfd for bll bound propfrtifs of this dlbss, indluding thf
     * following:
     * <ul>
     *    <li>this Componfnt's font ("font")</li>
     *    <li>this Componfnt's bbdkground dolor ("bbdkground")</li>
     *    <li>this Componfnt's forfground dolor ("forfground")</li>
     *    <li>this Componfnt's fodusbbility ("fodusbblf")</li>
     *    <li>this Componfnt's fodus trbvfrsbl kfys fnbblfd stbtf
     *        ("fodusTrbvfrsblKfysEnbblfd")</li>
     *    <li>this Componfnt's Sft of FORWARD_TRAVERSAL_KEYS
     *        ("forwbrdFodusTrbvfrsblKfys")</li>
     *    <li>this Componfnt's Sft of BACKWARD_TRAVERSAL_KEYS
     *        ("bbdkwbrdFodusTrbvfrsblKfys")</li>
     *    <li>this Componfnt's Sft of UP_CYCLE_TRAVERSAL_KEYS
     *        ("upCydlfFodusTrbvfrsblKfys")</li>
     *    <li>this Componfnt's prfffrrfd sizf ("prfffrrfdSizf")</li>
     *    <li>this Componfnt's minimum sizf ("minimumSizf")</li>
     *    <li>this Componfnt's mbximum sizf ("mbximumSizf")</li>
     *    <li>this Componfnt's nbmf ("nbmf")</li>
     * </ul>
     * Notf thbt if this <dodf>Componfnt</dodf> is inhfriting b bound propfrty, thfn no
     * fvfnt will bf firfd in rfsponsf to b dhbngf in thf inhfritfd propfrty.
     * <p>
     * If <dodf>listfnfr</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is pfrformfd.
     *
     * @pbrbm    listfnfr  thf propfrty dhbngf listfnfr to bf bddfd
     *
     * @sff #rfmovfPropfrtyChbngfListfnfr
     * @sff #gftPropfrtyChbngfListfnfrs
     * @sff #bddPropfrtyChbngfListfnfr(jbvb.lbng.String, jbvb.bfbns.PropfrtyChbngfListfnfr)
     */
    publid void bddPropfrtyChbngfListfnfr(
                                                       PropfrtyChbngfListfnfr listfnfr) {
        syndhronizfd (gftObjfdtLodk()) {
            if (listfnfr == null) {
                rfturn;
            }
            if (dhbngfSupport == null) {
                dhbngfSupport = nfw PropfrtyChbngfSupport(this);
            }
            dhbngfSupport.bddPropfrtyChbngfListfnfr(listfnfr);
        }
    }

    /**
     * Rfmovfs b PropfrtyChbngfListfnfr from thf listfnfr list. This mfthod
     * should bf usfd to rfmovf PropfrtyChbngfListfnfrs thbt wfrf rfgistfrfd
     * for bll bound propfrtifs of this dlbss.
     * <p>
     * If listfnfr is null, no fxdfption is thrown bnd no bdtion is pfrformfd.
     *
     * @pbrbm listfnfr thf PropfrtyChbngfListfnfr to bf rfmovfd
     *
     * @sff #bddPropfrtyChbngfListfnfr
     * @sff #gftPropfrtyChbngfListfnfrs
     * @sff #rfmovfPropfrtyChbngfListfnfr(jbvb.lbng.String,jbvb.bfbns.PropfrtyChbngfListfnfr)
     */
    publid void rfmovfPropfrtyChbngfListfnfr(
                                                          PropfrtyChbngfListfnfr listfnfr) {
        syndhronizfd (gftObjfdtLodk()) {
            if (listfnfr == null || dhbngfSupport == null) {
                rfturn;
            }
            dhbngfSupport.rfmovfPropfrtyChbngfListfnfr(listfnfr);
        }
    }

    /**
     * Rfturns bn brrby of bll thf propfrty dhbngf listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of this domponfnt's <dodf>PropfrtyChbngfListfnfr</dodf>s
     *         or bn fmpty brrby if no propfrty dhbngf
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff      #bddPropfrtyChbngfListfnfr
     * @sff      #rfmovfPropfrtyChbngfListfnfr
     * @sff      #gftPropfrtyChbngfListfnfrs(jbvb.lbng.String)
     * @sff      jbvb.bfbns.PropfrtyChbngfSupport#gftPropfrtyChbngfListfnfrs
     * @sindf    1.4
     */
    publid PropfrtyChbngfListfnfr[] gftPropfrtyChbngfListfnfrs() {
        syndhronizfd (gftObjfdtLodk()) {
            if (dhbngfSupport == null) {
                rfturn nfw PropfrtyChbngfListfnfr[0];
            }
            rfturn dhbngfSupport.gftPropfrtyChbngfListfnfrs();
        }
    }

    /**
     * Adds b PropfrtyChbngfListfnfr to thf listfnfr list for b spfdifid
     * propfrty. Thf spfdififd propfrty mby bf usfr-dffinfd, or onf of thf
     * following:
     * <ul>
     *    <li>this Componfnt's font ("font")</li>
     *    <li>this Componfnt's bbdkground dolor ("bbdkground")</li>
     *    <li>this Componfnt's forfground dolor ("forfground")</li>
     *    <li>this Componfnt's fodusbbility ("fodusbblf")</li>
     *    <li>this Componfnt's fodus trbvfrsbl kfys fnbblfd stbtf
     *        ("fodusTrbvfrsblKfysEnbblfd")</li>
     *    <li>this Componfnt's Sft of FORWARD_TRAVERSAL_KEYS
     *        ("forwbrdFodusTrbvfrsblKfys")</li>
     *    <li>this Componfnt's Sft of BACKWARD_TRAVERSAL_KEYS
     *        ("bbdkwbrdFodusTrbvfrsblKfys")</li>
     *    <li>this Componfnt's Sft of UP_CYCLE_TRAVERSAL_KEYS
     *        ("upCydlfFodusTrbvfrsblKfys")</li>
     * </ul>
     * Notf thbt if this <dodf>Componfnt</dodf> is inhfriting b bound propfrty, thfn no
     * fvfnt will bf firfd in rfsponsf to b dhbngf in thf inhfritfd propfrty.
     * <p>
     * If <dodf>propfrtyNbmf</dodf> or <dodf>listfnfr</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is tbkfn.
     *
     * @pbrbm propfrtyNbmf onf of thf propfrty nbmfs listfd bbovf
     * @pbrbm listfnfr thf propfrty dhbngf listfnfr to bf bddfd
     *
     * @sff #rfmovfPropfrtyChbngfListfnfr(jbvb.lbng.String, jbvb.bfbns.PropfrtyChbngfListfnfr)
     * @sff #gftPropfrtyChbngfListfnfrs(jbvb.lbng.String)
     * @sff #bddPropfrtyChbngfListfnfr(jbvb.lbng.String, jbvb.bfbns.PropfrtyChbngfListfnfr)
     */
    publid void bddPropfrtyChbngfListfnfr(
                                                       String propfrtyNbmf,
                                                       PropfrtyChbngfListfnfr listfnfr) {
        syndhronizfd (gftObjfdtLodk()) {
            if (listfnfr == null) {
                rfturn;
            }
            if (dhbngfSupport == null) {
                dhbngfSupport = nfw PropfrtyChbngfSupport(this);
            }
            dhbngfSupport.bddPropfrtyChbngfListfnfr(propfrtyNbmf, listfnfr);
        }
    }

    /**
     * Rfmovfs b <dodf>PropfrtyChbngfListfnfr</dodf> from thf listfnfr
     * list for b spfdifid propfrty. This mfthod should bf usfd to rfmovf
     * <dodf>PropfrtyChbngfListfnfr</dodf>s
     * thbt wfrf rfgistfrfd for b spfdifid bound propfrty.
     * <p>
     * If <dodf>propfrtyNbmf</dodf> or <dodf>listfnfr</dodf> is <dodf>null</dodf>,
     * no fxdfption is thrown bnd no bdtion is tbkfn.
     *
     * @pbrbm propfrtyNbmf b vblid propfrty nbmf
     * @pbrbm listfnfr thf PropfrtyChbngfListfnfr to bf rfmovfd
     *
     * @sff #bddPropfrtyChbngfListfnfr(jbvb.lbng.String, jbvb.bfbns.PropfrtyChbngfListfnfr)
     * @sff #gftPropfrtyChbngfListfnfrs(jbvb.lbng.String)
     * @sff #rfmovfPropfrtyChbngfListfnfr(jbvb.bfbns.PropfrtyChbngfListfnfr)
     */
    publid void rfmovfPropfrtyChbngfListfnfr(
                                                          String propfrtyNbmf,
                                                          PropfrtyChbngfListfnfr listfnfr) {
        syndhronizfd (gftObjfdtLodk()) {
            if (listfnfr == null || dhbngfSupport == null) {
                rfturn;
            }
            dhbngfSupport.rfmovfPropfrtyChbngfListfnfr(propfrtyNbmf, listfnfr);
        }
    }

    /**
     * Rfturns bn brrby of bll thf listfnfrs whidh hbvf bffn bssodibtfd
     * with thf nbmfd propfrty.
     *
     * @pbrbm  propfrtyNbmf thf propfrty nbmf
     * @rfturn bll of thf <dodf>PropfrtyChbngfListfnfr</dodf>s bssodibtfd with
     *         thf nbmfd propfrty; if no sudh listfnfrs hbvf bffn bddfd or
     *         if <dodf>propfrtyNbmf</dodf> is <dodf>null</dodf>, bn fmpty
     *         brrby is rfturnfd
     *
     * @sff #bddPropfrtyChbngfListfnfr(jbvb.lbng.String, jbvb.bfbns.PropfrtyChbngfListfnfr)
     * @sff #rfmovfPropfrtyChbngfListfnfr(jbvb.lbng.String, jbvb.bfbns.PropfrtyChbngfListfnfr)
     * @sff #gftPropfrtyChbngfListfnfrs
     * @sindf 1.4
     */
    publid PropfrtyChbngfListfnfr[] gftPropfrtyChbngfListfnfrs(String propfrtyNbmf) {
        syndhronizfd (gftObjfdtLodk()) {
            if (dhbngfSupport == null) {
                rfturn nfw PropfrtyChbngfListfnfr[0];
            }
            rfturn dhbngfSupport.gftPropfrtyChbngfListfnfrs(propfrtyNbmf);
        }
    }

    /**
     * Support for rfporting bound propfrty dhbngfs for Objfdt propfrtifs.
     * This mfthod dbn bf dbllfd whfn b bound propfrty hbs dhbngfd bnd it will
     * sfnd thf bppropribtf PropfrtyChbngfEvfnt to bny rfgistfrfd
     * PropfrtyChbngfListfnfrs.
     *
     * @pbrbm propfrtyNbmf thf propfrty whosf vbluf hbs dhbngfd
     * @pbrbm oldVbluf thf propfrty's prfvious vbluf
     * @pbrbm nfwVbluf thf propfrty's nfw vbluf
     */
    protfdtfd void firfPropfrtyChbngf(String propfrtyNbmf,
                                      Objfdt oldVbluf, Objfdt nfwVbluf) {
        PropfrtyChbngfSupport dhbngfSupport;
        syndhronizfd (gftObjfdtLodk()) {
            dhbngfSupport = this.dhbngfSupport;
        }
        if (dhbngfSupport == null ||
            (oldVbluf != null && nfwVbluf != null && oldVbluf.fqubls(nfwVbluf))) {
            rfturn;
        }
        dhbngfSupport.firfPropfrtyChbngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }

    /**
     * Support for rfporting bound propfrty dhbngfs for boolfbn propfrtifs.
     * This mfthod dbn bf dbllfd whfn b bound propfrty hbs dhbngfd bnd it will
     * sfnd thf bppropribtf PropfrtyChbngfEvfnt to bny rfgistfrfd
     * PropfrtyChbngfListfnfrs.
     *
     * @pbrbm propfrtyNbmf thf propfrty whosf vbluf hbs dhbngfd
     * @pbrbm oldVbluf thf propfrty's prfvious vbluf
     * @pbrbm nfwVbluf thf propfrty's nfw vbluf
     * @sindf 1.4
     */
    protfdtfd void firfPropfrtyChbngf(String propfrtyNbmf,
                                      boolfbn oldVbluf, boolfbn nfwVbluf) {
        PropfrtyChbngfSupport dhbngfSupport = this.dhbngfSupport;
        if (dhbngfSupport == null || oldVbluf == nfwVbluf) {
            rfturn;
        }
        dhbngfSupport.firfPropfrtyChbngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }

    /**
     * Support for rfporting bound propfrty dhbngfs for intfgfr propfrtifs.
     * This mfthod dbn bf dbllfd whfn b bound propfrty hbs dhbngfd bnd it will
     * sfnd thf bppropribtf PropfrtyChbngfEvfnt to bny rfgistfrfd
     * PropfrtyChbngfListfnfrs.
     *
     * @pbrbm propfrtyNbmf thf propfrty whosf vbluf hbs dhbngfd
     * @pbrbm oldVbluf thf propfrty's prfvious vbluf
     * @pbrbm nfwVbluf thf propfrty's nfw vbluf
     * @sindf 1.4
     */
    protfdtfd void firfPropfrtyChbngf(String propfrtyNbmf,
                                      int oldVbluf, int nfwVbluf) {
        PropfrtyChbngfSupport dhbngfSupport = this.dhbngfSupport;
        if (dhbngfSupport == null || oldVbluf == nfwVbluf) {
            rfturn;
        }
        dhbngfSupport.firfPropfrtyChbngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }

    /**
     * Rfports b bound propfrty dhbngf.
     *
     * @pbrbm propfrtyNbmf thf progrbmmbtid nbmf of thf propfrty
     *          thbt wbs dhbngfd
     * @pbrbm oldVbluf thf old vbluf of thf propfrty (bs b bytf)
     * @pbrbm nfwVbluf thf nfw vbluf of thf propfrty (bs b bytf)
     * @sff #firfPropfrtyChbngf(jbvb.lbng.String, jbvb.lbng.Objfdt,
     *          jbvb.lbng.Objfdt)
     * @sindf 1.5
     */
    publid void firfPropfrtyChbngf(String propfrtyNbmf, bytf oldVbluf, bytf nfwVbluf) {
        if (dhbngfSupport == null || oldVbluf == nfwVbluf) {
            rfturn;
        }
        firfPropfrtyChbngf(propfrtyNbmf, Bytf.vblufOf(oldVbluf), Bytf.vblufOf(nfwVbluf));
    }

    /**
     * Rfports b bound propfrty dhbngf.
     *
     * @pbrbm propfrtyNbmf thf progrbmmbtid nbmf of thf propfrty
     *          thbt wbs dhbngfd
     * @pbrbm oldVbluf thf old vbluf of thf propfrty (bs b dhbr)
     * @pbrbm nfwVbluf thf nfw vbluf of thf propfrty (bs b dhbr)
     * @sff #firfPropfrtyChbngf(jbvb.lbng.String, jbvb.lbng.Objfdt,
     *          jbvb.lbng.Objfdt)
     * @sindf 1.5
     */
    publid void firfPropfrtyChbngf(String propfrtyNbmf, dhbr oldVbluf, dhbr nfwVbluf) {
        if (dhbngfSupport == null || oldVbluf == nfwVbluf) {
            rfturn;
        }
        firfPropfrtyChbngf(propfrtyNbmf, Chbrbdtfr.vblufOf(oldVbluf), Chbrbdtfr.vblufOf(nfwVbluf));
    }

    /**
     * Rfports b bound propfrty dhbngf.
     *
     * @pbrbm propfrtyNbmf thf progrbmmbtid nbmf of thf propfrty
     *          thbt wbs dhbngfd
     * @pbrbm oldVbluf thf old vbluf of thf propfrty (bs b short)
     * @pbrbm nfwVbluf thf old vbluf of thf propfrty (bs b short)
     * @sff #firfPropfrtyChbngf(jbvb.lbng.String, jbvb.lbng.Objfdt,
     *          jbvb.lbng.Objfdt)
     * @sindf 1.5
     */
    publid void firfPropfrtyChbngf(String propfrtyNbmf, short oldVbluf, short nfwVbluf) {
        if (dhbngfSupport == null || oldVbluf == nfwVbluf) {
            rfturn;
        }
        firfPropfrtyChbngf(propfrtyNbmf, Short.vblufOf(oldVbluf), Short.vblufOf(nfwVbluf));
    }


    /**
     * Rfports b bound propfrty dhbngf.
     *
     * @pbrbm propfrtyNbmf thf progrbmmbtid nbmf of thf propfrty
     *          thbt wbs dhbngfd
     * @pbrbm oldVbluf thf old vbluf of thf propfrty (bs b long)
     * @pbrbm nfwVbluf thf nfw vbluf of thf propfrty (bs b long)
     * @sff #firfPropfrtyChbngf(jbvb.lbng.String, jbvb.lbng.Objfdt,
     *          jbvb.lbng.Objfdt)
     * @sindf 1.5
     */
    publid void firfPropfrtyChbngf(String propfrtyNbmf, long oldVbluf, long nfwVbluf) {
        if (dhbngfSupport == null || oldVbluf == nfwVbluf) {
            rfturn;
        }
        firfPropfrtyChbngf(propfrtyNbmf, Long.vblufOf(oldVbluf), Long.vblufOf(nfwVbluf));
    }

    /**
     * Rfports b bound propfrty dhbngf.
     *
     * @pbrbm propfrtyNbmf thf progrbmmbtid nbmf of thf propfrty
     *          thbt wbs dhbngfd
     * @pbrbm oldVbluf thf old vbluf of thf propfrty (bs b flobt)
     * @pbrbm nfwVbluf thf nfw vbluf of thf propfrty (bs b flobt)
     * @sff #firfPropfrtyChbngf(jbvb.lbng.String, jbvb.lbng.Objfdt,
     *          jbvb.lbng.Objfdt)
     * @sindf 1.5
     */
    publid void firfPropfrtyChbngf(String propfrtyNbmf, flobt oldVbluf, flobt nfwVbluf) {
        if (dhbngfSupport == null || oldVbluf == nfwVbluf) {
            rfturn;
        }
        firfPropfrtyChbngf(propfrtyNbmf, Flobt.vblufOf(oldVbluf), Flobt.vblufOf(nfwVbluf));
    }

    /**
     * Rfports b bound propfrty dhbngf.
     *
     * @pbrbm propfrtyNbmf thf progrbmmbtid nbmf of thf propfrty
     *          thbt wbs dhbngfd
     * @pbrbm oldVbluf thf old vbluf of thf propfrty (bs b doublf)
     * @pbrbm nfwVbluf thf nfw vbluf of thf propfrty (bs b doublf)
     * @sff #firfPropfrtyChbngf(jbvb.lbng.String, jbvb.lbng.Objfdt,
     *          jbvb.lbng.Objfdt)
     * @sindf 1.5
     */
    publid void firfPropfrtyChbngf(String propfrtyNbmf, doublf oldVbluf, doublf nfwVbluf) {
        if (dhbngfSupport == null || oldVbluf == nfwVbluf) {
            rfturn;
        }
        firfPropfrtyChbngf(propfrtyNbmf, Doublf.vblufOf(oldVbluf), Doublf.vblufOf(nfwVbluf));
    }


    // Sfriblizbtion support.

    /**
     * Componfnt Sfriblizfd Dbtb Vfrsion.
     *
     * @sfribl
     */
    privbtf int domponfntSfriblizfdDbtbVfrsion = 4;

    /**
     * This hbdk is for Swing sfriblizbtion. It will invokf
     * thf Swing pbdkbgf privbtf mfthod <dodf>dompWritfObjfdtNotify</dodf>.
     */
    privbtf void doSwingSfriblizbtion() {
        Pbdkbgf swingPbdkbgf = Pbdkbgf.gftPbdkbgf("jbvbx.swing");
        // For Swing sfriblizbtion to dorrfdtly work Swing nffds to
        // bf notififd bfforf Componfnt dofs it's sfriblizbtion.  This
        // hbdk bddomodbtfs this.
        //
        // Swing dlbssfs MUST bf lobdfd by thf bootstrbp dlbss lobdfr,
        // othfrwisf wf don't donsidfr thfm.
        for (Clbss<?> klbss = Componfnt.this.gftClbss(); klbss != null;
                   klbss = klbss.gftSupfrdlbss()) {
            if (klbss.gftPbdkbgf() == swingPbdkbgf &&
                      klbss.gftClbssLobdfr() == null) {
                finbl Clbss<?> swingClbss = klbss;
                // Find thf first ovfrridf of thf dompWritfObjfdtNotify mfthod
                Mfthod[] mfthods = AddfssControllfr.doPrivilfgfd(
                                                                 nfw PrivilfgfdAdtion<Mfthod[]>() {
                                                                     publid Mfthod[] run() {
                                                                         rfturn swingClbss.gftDfdlbrfdMfthods();
                                                                     }
                                                                 });
                for (int dountfr = mfthods.lfngth - 1; dountfr >= 0;
                     dountfr--) {
                    finbl Mfthod mfthod = mfthods[dountfr];
                    if (mfthod.gftNbmf().fqubls("dompWritfObjfdtNotify")){
                        // Wf found it, usf doPrivilfgfd to mbkf it bddfssiblf
                        // to usf.
                        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Void>() {
                                publid Void run() {
                                    mfthod.sftAddfssiblf(truf);
                                    rfturn null;
                                }
                            });
                        // Invokf thf mfthod
                        try {
                            mfthod.invokf(this, (Objfdt[]) null);
                        } dbtdh (IllfgblAddfssExdfption ibf) {
                        } dbtdh (InvodbtionTbrgftExdfption itf) {
                        }
                        // Wf'rf donf, bbil.
                        rfturn;
                    }
                }
            }
        }
    }

    /**
     * Writfs dffbult sfriblizbblf fiflds to strfbm.  Writfs
     * b vbrifty of sfriblizbblf listfnfrs bs optionbl dbtb.
     * Thf non-sfriblizbblf listfnfrs brf dftfdtfd bnd
     * no bttfmpt is mbdf to sfriblizf thfm.
     *
     * @pbrbm s thf <dodf>ObjfdtOutputStrfbm</dodf> to writf
     * @sfriblDbtb <dodf>null</dodf> tfrminbtfd sfqufndf of
     *   0 or morf pbirs; thf pbir donsists of b <dodf>String</dodf>
     *   bnd bn <dodf>Objfdt</dodf>; thf <dodf>String</dodf> indidbtfs
     *   thf typf of objfdt bnd is onf of thf following (bs of 1.4):
     *   <dodf>domponfntListfnfrK</dodf> indidbting bn
     *     <dodf>ComponfntListfnfr</dodf> objfdt;
     *   <dodf>fodusListfnfrK</dodf> indidbting bn
     *     <dodf>FodusListfnfr</dodf> objfdt;
     *   <dodf>kfyListfnfrK</dodf> indidbting bn
     *     <dodf>KfyListfnfr</dodf> objfdt;
     *   <dodf>mousfListfnfrK</dodf> indidbting bn
     *     <dodf>MousfListfnfr</dodf> objfdt;
     *   <dodf>mousfMotionListfnfrK</dodf> indidbting bn
     *     <dodf>MousfMotionListfnfr</dodf> objfdt;
     *   <dodf>inputMfthodListfnfrK</dodf> indidbting bn
     *     <dodf>InputMfthodListfnfr</dodf> objfdt;
     *   <dodf>hifrbrdhyListfnfrK</dodf> indidbting bn
     *     <dodf>HifrbrdhyListfnfr</dodf> objfdt;
     *   <dodf>hifrbrdhyBoundsListfnfrK</dodf> indidbting bn
     *     <dodf>HifrbrdhyBoundsListfnfr</dodf> objfdt;
     *   <dodf>mousfWhfflListfnfrK</dodf> indidbting bn
     *     <dodf>MousfWhfflListfnfr</dodf> objfdt
     * @sfriblDbtb bn optionbl <dodf>ComponfntOrifntbtion</dodf>
     *    (bftfr <dodf>inputMfthodListfnfr</dodf>, bs of 1.2)
     *
     * @sff AWTEvfntMultidbstfr#sbvf(jbvb.io.ObjfdtOutputStrfbm, jbvb.lbng.String, jbvb.util.EvfntListfnfr)
     * @sff #domponfntListfnfrK
     * @sff #fodusListfnfrK
     * @sff #kfyListfnfrK
     * @sff #mousfListfnfrK
     * @sff #mousfMotionListfnfrK
     * @sff #inputMfthodListfnfrK
     * @sff #hifrbrdhyListfnfrK
     * @sff #hifrbrdhyBoundsListfnfrK
     * @sff #mousfWhfflListfnfrK
     * @sff #rfbdObjfdt(ObjfdtInputStrfbm)
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s)
      throws IOExdfption
    {
        doSwingSfriblizbtion();

        s.dffbultWritfObjfdt();

        AWTEvfntMultidbstfr.sbvf(s, domponfntListfnfrK, domponfntListfnfr);
        AWTEvfntMultidbstfr.sbvf(s, fodusListfnfrK, fodusListfnfr);
        AWTEvfntMultidbstfr.sbvf(s, kfyListfnfrK, kfyListfnfr);
        AWTEvfntMultidbstfr.sbvf(s, mousfListfnfrK, mousfListfnfr);
        AWTEvfntMultidbstfr.sbvf(s, mousfMotionListfnfrK, mousfMotionListfnfr);
        AWTEvfntMultidbstfr.sbvf(s, inputMfthodListfnfrK, inputMfthodListfnfr);

        s.writfObjfdt(null);
        s.writfObjfdt(domponfntOrifntbtion);

        AWTEvfntMultidbstfr.sbvf(s, hifrbrdhyListfnfrK, hifrbrdhyListfnfr);
        AWTEvfntMultidbstfr.sbvf(s, hifrbrdhyBoundsListfnfrK,
                                 hifrbrdhyBoundsListfnfr);
        s.writfObjfdt(null);

        AWTEvfntMultidbstfr.sbvf(s, mousfWhfflListfnfrK, mousfWhfflListfnfr);
        s.writfObjfdt(null);

    }

    /**
     * Rfbds thf <dodf>ObjfdtInputStrfbm</dodf> bnd if it isn't
     * <dodf>null</dodf> bdds b listfnfr to rfdfivf b vbrifty
     * of fvfnts firfd by thf domponfnt.
     * Unrfdognizfd kfys or vblufs will bf ignorfd.
     *
     * @pbrbm s thf <dodf>ObjfdtInputStrfbm</dodf> to rfbd
     * @sff #writfObjfdt(ObjfdtOutputStrfbm)
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
      throws ClbssNotFoundExdfption, IOExdfption
    {
        objfdtLodk = nfw Objfdt();

        bdd = AddfssControllfr.gftContfxt();

        s.dffbultRfbdObjfdt();

        bppContfxt = AppContfxt.gftAppContfxt();
        doblfsdingEnbblfd = dhfdkCoblfsding();
        if (domponfntSfriblizfdDbtbVfrsion < 4) {
            // Thfsf fiflds brf non-trbnsifnt bnd rfly on dffbult
            // sfriblizbtion. Howfvfr, thf dffbult vblufs brf insuffidifnt,
            // so wf nffd to sft thfm fxpliditly for objfdt dbtb strfbms prior
            // to 1.4.
            fodusbblf = truf;
            isFodusTrbvfrsbblfOvfrriddfn = FOCUS_TRAVERSABLE_UNKNOWN;
            initiblizfFodusTrbvfrsblKfys();
            fodusTrbvfrsblKfysEnbblfd = truf;
        }

        Objfdt kfyOrNull;
        whilf(null != (kfyOrNull = s.rfbdObjfdt())) {
            String kfy = ((String)kfyOrNull).intfrn();

            if (domponfntListfnfrK == kfy)
                bddComponfntListfnfr((ComponfntListfnfr)(s.rfbdObjfdt()));

            flsf if (fodusListfnfrK == kfy)
                bddFodusListfnfr((FodusListfnfr)(s.rfbdObjfdt()));

            flsf if (kfyListfnfrK == kfy)
                bddKfyListfnfr((KfyListfnfr)(s.rfbdObjfdt()));

            flsf if (mousfListfnfrK == kfy)
                bddMousfListfnfr((MousfListfnfr)(s.rfbdObjfdt()));

            flsf if (mousfMotionListfnfrK == kfy)
                bddMousfMotionListfnfr((MousfMotionListfnfr)(s.rfbdObjfdt()));

            flsf if (inputMfthodListfnfrK == kfy)
                bddInputMfthodListfnfr((InputMfthodListfnfr)(s.rfbdObjfdt()));

            flsf // skip vbluf for unrfdognizfd kfy
                s.rfbdObjfdt();

        }

        // Rfbd thf domponfnt's orifntbtion if it's prfsfnt
        Objfdt orifnt = null;

        try {
            orifnt = s.rfbdObjfdt();
        } dbtdh (jbvb.io.OptionblDbtbExdfption f) {
            // JDK 1.1 instbndfs will not hbvf this optionbl dbtb.
            // f.fof will bf truf to indidbtf thbt thfrf is no morf
            // dbtb bvbilbblf for this objfdt.
            // If f.fof is not truf, throw thf fxdfption bs it
            // might hbvf bffn dbusfd by rfbsons unrflbtfd to
            // domponfntOrifntbtion.

            if (!f.fof)  {
                throw (f);
            }
        }

        if (orifnt != null) {
            domponfntOrifntbtion = (ComponfntOrifntbtion)orifnt;
        } flsf {
            domponfntOrifntbtion = ComponfntOrifntbtion.UNKNOWN;
        }

        try {
            whilf(null != (kfyOrNull = s.rfbdObjfdt())) {
                String kfy = ((String)kfyOrNull).intfrn();

                if (hifrbrdhyListfnfrK == kfy) {
                    bddHifrbrdhyListfnfr((HifrbrdhyListfnfr)(s.rfbdObjfdt()));
                }
                flsf if (hifrbrdhyBoundsListfnfrK == kfy) {
                    bddHifrbrdhyBoundsListfnfr((HifrbrdhyBoundsListfnfr)
                                               (s.rfbdObjfdt()));
                }
                flsf {
                    // skip vbluf for unrfdognizfd kfy
                    s.rfbdObjfdt();
                }
            }
        } dbtdh (jbvb.io.OptionblDbtbExdfption f) {
            // JDK 1.1/1.2 instbndfs will not hbvf this optionbl dbtb.
            // f.fof will bf truf to indidbtf thbt thfrf is no morf
            // dbtb bvbilbblf for this objfdt.
            // If f.fof is not truf, throw thf fxdfption bs it
            // might hbvf bffn dbusfd by rfbsons unrflbtfd to
            // hifrbrdhy bnd hifrbrdhyBounds listfnfrs.

            if (!f.fof)  {
                throw (f);
            }
        }

        try {
            whilf (null != (kfyOrNull = s.rfbdObjfdt())) {
                String kfy = ((String)kfyOrNull).intfrn();

                if (mousfWhfflListfnfrK == kfy) {
                    bddMousfWhfflListfnfr((MousfWhfflListfnfr)(s.rfbdObjfdt()));
                }
                flsf {
                    // skip vbluf for unrfdognizfd kfy
                    s.rfbdObjfdt();
                }
            }
        } dbtdh (jbvb.io.OptionblDbtbExdfption f) {
            // prf-1.3 instbndfs will not hbvf this optionbl dbtb.
            // f.fof will bf truf to indidbtf thbt thfrf is no morf
            // dbtb bvbilbblf for this objfdt.
            // If f.fof is not truf, throw thf fxdfption bs it
            // might hbvf bffn dbusfd by rfbsons unrflbtfd to
            // mousf whffl listfnfrs

            if (!f.fof)  {
                throw (f);
            }
        }

        if (popups != null) {
            int npopups = popups.sizf();
            for (int i = 0 ; i < npopups ; i++) {
                PopupMfnu popup = popups.flfmfntAt(i);
                popup.pbrfnt = this;
            }
        }
    }

    /**
     * Sfts thf lbngubgf-sfnsitivf orifntbtion thbt is to bf usfd to ordfr
     * thf flfmfnts or tfxt within this domponfnt.  Lbngubgf-sfnsitivf
     * <dodf>LbyoutMbnbgfr</dodf> bnd <dodf>Componfnt</dodf>
     * subdlbssfs will usf this propfrty to
     * dftfrminf how to lby out bnd drbw domponfnts.
     * <p>
     * At donstrudtion timf, b domponfnt's orifntbtion is sft to
     * <dodf>ComponfntOrifntbtion.UNKNOWN</dodf>,
     * indidbting thbt it hbs not bffn spfdififd
     * fxpliditly.  Thf UNKNOWN orifntbtion bfhbvfs thf sbmf bs
     * <dodf>ComponfntOrifntbtion.LEFT_TO_RIGHT</dodf>.
     * <p>
     * To sft thf orifntbtion of b singlf domponfnt, usf this mfthod.
     * To sft thf orifntbtion of bn fntirf domponfnt
     * hifrbrdhy, usf
     * {@link #bpplyComponfntOrifntbtion bpplyComponfntOrifntbtion}.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     * @pbrbm  o thf orifntbtion to bf sft
     *
     * @sff ComponfntOrifntbtion
     * @sff #invblidbtf
     *
     * @buthor Lburb Wfrnfr, IBM
     * @bfbninfo
     *       bound: truf
     */
    publid void sftComponfntOrifntbtion(ComponfntOrifntbtion o) {
        ComponfntOrifntbtion oldVbluf = domponfntOrifntbtion;
        domponfntOrifntbtion = o;

        // This is b bound propfrty, so rfport thf dhbngf to
        // bny rfgistfrfd listfnfrs.  (Chfbp if thfrf brf nonf.)
        firfPropfrtyChbngf("domponfntOrifntbtion", oldVbluf, o);

        // This dould dhbngf thf prfffrrfd sizf of thf Componfnt.
        invblidbtfIfVblid();
    }

    /**
     * Rftrifvfs thf lbngubgf-sfnsitivf orifntbtion thbt is to bf usfd to ordfr
     * thf flfmfnts or tfxt within this domponfnt.  <dodf>LbyoutMbnbgfr</dodf>
     * bnd <dodf>Componfnt</dodf>
     * subdlbssfs thbt wish to rfspfdt orifntbtion should dbll this mfthod to
     * gft thf domponfnt's orifntbtion bfforf pfrforming lbyout or drbwing.
     *
     * @rfturn thf orifntbtion to ordfr thf flfmfnts or tfxt
     * @sff ComponfntOrifntbtion
     *
     * @buthor Lburb Wfrnfr, IBM
     */
    publid ComponfntOrifntbtion gftComponfntOrifntbtion() {
        rfturn domponfntOrifntbtion;
    }

    /**
     * Sfts thf <dodf>ComponfntOrifntbtion</dodf> propfrty of this domponfnt
     * bnd bll domponfnts dontbinfd within it.
     * <p>
     * This mfthod dhbngfs lbyout-rflbtfd informbtion, bnd thfrfforf,
     * invblidbtfs thf domponfnt hifrbrdhy.
     *
     *
     * @pbrbm orifntbtion thf nfw domponfnt orifntbtion of this domponfnt bnd
     *        thf domponfnts dontbinfd within it.
     * @fxdfption NullPointfrExdfption if <dodf>orifntbtion</dodf> is null.
     * @sff #sftComponfntOrifntbtion
     * @sff #gftComponfntOrifntbtion
     * @sff #invblidbtf
     * @sindf 1.4
     */
    publid void bpplyComponfntOrifntbtion(ComponfntOrifntbtion orifntbtion) {
        if (orifntbtion == null) {
            throw nfw NullPointfrExdfption();
        }
        sftComponfntOrifntbtion(orifntbtion);
    }

    finbl boolfbn dbnBfFodusOwnfr() {
        // It is fnbblfd, visiblf, fodusbblf.
        if (isEnbblfd() && isDisplbybblf() && isVisiblf() && isFodusbblf()) {
            rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Chfdks thbt this domponfnt mffts thf prfrfqufsitfs to bf fodus ownfr:
     * - it is fnbblfd, visiblf, fodusbblf
     * - it's pbrfnts brf bll fnbblfd bnd showing
     * - top-lfvfl window is fodusbblf
     * - if fodus dydlf root hbs DffbultFodusTrbvfrsblPolidy thfn it blso dhfdks thbt this polidy bddfpts
     * this domponfnt bs fodus ownfr
     * @sindf 1.5
     */
    finbl boolfbn dbnBfFodusOwnfrRfdursivfly() {
        // - it is fnbblfd, visiblf, fodusbblf
        if (!dbnBfFodusOwnfr()) {
            rfturn fblsf;
        }

        // - it's pbrfnts brf bll fnbblfd bnd showing
        syndhronizfd(gftTrffLodk()) {
            if (pbrfnt != null) {
                rfturn pbrfnt.dbnContbinFodusOwnfr(this);
            }
        }
        rfturn truf;
    }

    /**
     * Fix thf lodbtion of thf HW domponfnt in b LW dontbinfr hifrbrdhy.
     */
    finbl void rflodbtfComponfnt() {
        syndhronizfd (gftTrffLodk()) {
            if (pffr == null) {
                rfturn;
            }
            int nbtivfX = x;
            int nbtivfY = y;
            for (Componfnt dont = gftContbinfr();
                    dont != null && dont.isLightwfight();
                    dont = dont.gftContbinfr())
            {
                nbtivfX += dont.x;
                nbtivfY += dont.y;
            }
            pffr.sftBounds(nbtivfX, nbtivfY, width, hfight,
                    ComponfntPffr.SET_LOCATION);
        }
    }

    /**
     * Rfturns thf <dodf>Window</dodf> bndfstor of thf domponfnt.
     * @rfturn Window bndfstor of thf domponfnt or domponfnt by itsflf if it is Window;
     *         null, if domponfnt is not b pbrt of window hifrbrdhy
     */
    Window gftContbiningWindow() {
        rfturn SunToolkit.gftContbiningWindow(this);
    }

    /**
     * Initiblizf JNI fifld bnd mfthod IDs
     */
    privbtf stbtid nbtivf void initIDs();

    /*
     * --- Addfssibility Support ---
     *
     *  Componfnt will dontbin bll of thf mfthods in intfrfbdf Addfssiblf,
     *  though it won't bdtublly implfmfnt thf intfrfbdf - thbt will bf up
     *  to thf individubl objfdts whidh fxtfnd Componfnt.
     */

    /**
     * Thf {@dodf AddfssiblfContfxt} bssodibtfd with this {@dodf Componfnt}.
     */
    protfdtfd AddfssiblfContfxt bddfssiblfContfxt = null;

    /**
     * Gfts thf <dodf>AddfssiblfContfxt</dodf> bssodibtfd
     * with this <dodf>Componfnt</dodf>.
     * Thf mfthod implfmfntfd by this bbsf
     * dlbss rfturns null.  Clbssfs thbt fxtfnd <dodf>Componfnt</dodf>
     * should implfmfnt this mfthod to rfturn thf
     * <dodf>AddfssiblfContfxt</dodf> bssodibtfd with thf subdlbss.
     *
     *
     * @rfturn thf <dodf>AddfssiblfContfxt</dodf> of this
     *    <dodf>Componfnt</dodf>
     * @sindf 1.3
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        rfturn bddfssiblfContfxt;
    }

    /**
     * Innfr dlbss of Componfnt usfd to providf dffbult support for
     * bddfssibility.  This dlbss is not mfbnt to bf usfd dirfdtly by
     * bpplidbtion dfvflopfrs, but is instfbd mfbnt only to bf
     * subdlbssfd by domponfnt dfvflopfrs.
     * <p>
     * Thf dlbss usfd to obtbin thf bddfssiblf rolf for this objfdt.
     * @sindf 1.3
     */
    protfdtfd bbstrbdt dlbss AddfssiblfAWTComponfnt fxtfnds AddfssiblfContfxt
        implfmfnts Sfriblizbblf, AddfssiblfComponfnt {

        privbtf stbtid finbl long sfriblVfrsionUID = 642321655757800191L;

        /**
         * Though thf dlbss is bbstrbdt, this should bf dbllfd by
         * bll sub-dlbssfs.
         */
        protfdtfd AddfssiblfAWTComponfnt() {
        }

        /**
         * Numbfr of PropfrtyChbngfListfnfr objfdts rfgistfrfd. It's usfd
         * to bdd/rfmovf ComponfntListfnfr bnd FodusListfnfr to trbdk
         * tbrgft Componfnt's stbtf.
         */
        privbtf volbtilf trbnsifnt int propfrtyListfnfrsCount = 0;

        /**
         * A domponfnt listfnfr to trbdk show/hidf/rfsizf fvfnts
         * bnd donvfrt thfm to PropfrtyChbngf fvfnts.
         */
        protfdtfd ComponfntListfnfr bddfssiblfAWTComponfntHbndlfr = null;

        /**
         * A listfnfr to trbdk fodus fvfnts
         * bnd donvfrt thfm to PropfrtyChbngf fvfnts.
         */
        protfdtfd FodusListfnfr bddfssiblfAWTFodusHbndlfr = null;

        /**
         * Firf PropfrtyChbngf listfnfr, if onf is rfgistfrfd,
         * whfn shown/hiddfn..
         * @sindf 1.3
         */
        protfdtfd dlbss AddfssiblfAWTComponfntHbndlfr implfmfnts ComponfntListfnfr {
            publid void domponfntHiddfn(ComponfntEvfnt f)  {
                if (bddfssiblfContfxt != null) {
                    bddfssiblfContfxt.firfPropfrtyChbngf(
                                                         AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                                         AddfssiblfStbtf.VISIBLE, null);
                }
            }

            publid void domponfntShown(ComponfntEvfnt f)  {
                if (bddfssiblfContfxt != null) {
                    bddfssiblfContfxt.firfPropfrtyChbngf(
                                                         AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                                         null, AddfssiblfStbtf.VISIBLE);
                }
            }

            publid void domponfntMovfd(ComponfntEvfnt f)  {
            }

            publid void domponfntRfsizfd(ComponfntEvfnt f)  {
            }
        } // innfr dlbss AddfssiblfAWTComponfntHbndlfr


        /**
         * Firf PropfrtyChbngf listfnfr, if onf is rfgistfrfd,
         * whfn fodus fvfnts hbppfn
         * @sindf 1.3
         */
        protfdtfd dlbss AddfssiblfAWTFodusHbndlfr implfmfnts FodusListfnfr {
            publid void fodusGbinfd(FodusEvfnt fvfnt) {
                if (bddfssiblfContfxt != null) {
                    bddfssiblfContfxt.firfPropfrtyChbngf(
                                                         AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                                         null, AddfssiblfStbtf.FOCUSED);
                }
            }
            publid void fodusLost(FodusEvfnt fvfnt) {
                if (bddfssiblfContfxt != null) {
                    bddfssiblfContfxt.firfPropfrtyChbngf(
                                                         AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                                         AddfssiblfStbtf.FOCUSED, null);
                }
            }
        }  // innfr dlbss AddfssiblfAWTFodusHbndlfr


        /**
         * Adds b <dodf>PropfrtyChbngfListfnfr</dodf> to thf listfnfr list.
         *
         * @pbrbm listfnfr  thf propfrty dhbngf listfnfr to bf bddfd
         */
        publid void bddPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr listfnfr) {
            if (bddfssiblfAWTComponfntHbndlfr == null) {
                bddfssiblfAWTComponfntHbndlfr = nfw AddfssiblfAWTComponfntHbndlfr();
            }
            if (bddfssiblfAWTFodusHbndlfr == null) {
                bddfssiblfAWTFodusHbndlfr = nfw AddfssiblfAWTFodusHbndlfr();
            }
            if (propfrtyListfnfrsCount++ == 0) {
                Componfnt.this.bddComponfntListfnfr(bddfssiblfAWTComponfntHbndlfr);
                Componfnt.this.bddFodusListfnfr(bddfssiblfAWTFodusHbndlfr);
            }
            supfr.bddPropfrtyChbngfListfnfr(listfnfr);
        }

        /**
         * Rfmovf b PropfrtyChbngfListfnfr from thf listfnfr list.
         * This rfmovfs b PropfrtyChbngfListfnfr thbt wbs rfgistfrfd
         * for bll propfrtifs.
         *
         * @pbrbm listfnfr  Thf PropfrtyChbngfListfnfr to bf rfmovfd
         */
        publid void rfmovfPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr listfnfr) {
            if (--propfrtyListfnfrsCount == 0) {
                Componfnt.this.rfmovfComponfntListfnfr(bddfssiblfAWTComponfntHbndlfr);
                Componfnt.this.rfmovfFodusListfnfr(bddfssiblfAWTFodusHbndlfr);
            }
            supfr.rfmovfPropfrtyChbngfListfnfr(listfnfr);
        }

        // AddfssiblfContfxt mfthods
        //
        /**
         * Gfts thf bddfssiblf nbmf of this objfdt.  This should blmost nfvfr
         * rfturn <dodf>jbvb.bwt.Componfnt.gftNbmf()</dodf>,
         * bs thbt gfnfrblly isn't b lodblizfd nbmf,
         * bnd dofsn't hbvf mfbning for thf usfr.  If thf
         * objfdt is fundbmfntblly b tfxt objfdt (f.g. b mfnu itfm), thf
         * bddfssiblf nbmf should bf thf tfxt of thf objfdt (f.g. "sbvf").
         * If thf objfdt hbs b tooltip, thf tooltip tfxt mby blso bf bn
         * bppropribtf String to rfturn.
         *
         * @rfturn thf lodblizfd nbmf of thf objfdt -- dbn bf
         *         <dodf>null</dodf> if this
         *         objfdt dofs not hbvf b nbmf
         * @sff jbvbx.bddfssibility.AddfssiblfContfxt#sftAddfssiblfNbmf
         */
        publid String gftAddfssiblfNbmf() {
            rfturn bddfssiblfNbmf;
        }

        /**
         * Gfts thf bddfssiblf dfsdription of this objfdt.  This should bf
         * b dondisf, lodblizfd dfsdription of whbt this objfdt is - whbt
         * is its mfbning to thf usfr.  If thf objfdt hbs b tooltip, thf
         * tooltip tfxt mby bf bn bppropribtf string to rfturn, bssuming
         * it dontbins b dondisf dfsdription of thf objfdt (instfbd of just
         * thf nbmf of thf objfdt - f.g. b "Sbvf" idon on b toolbbr thbt
         * hbd "sbvf" bs thf tooltip tfxt shouldn't rfturn thf tooltip
         * tfxt bs thf dfsdription, but somfthing likf "Sbvfs thf durrfnt
         * tfxt dodumfnt" instfbd).
         *
         * @rfturn thf lodblizfd dfsdription of thf objfdt -- dbn bf
         *        <dodf>null</dodf> if this objfdt dofs not hbvf b dfsdription
         * @sff jbvbx.bddfssibility.AddfssiblfContfxt#sftAddfssiblfDfsdription
         */
        publid String gftAddfssiblfDfsdription() {
            rfturn bddfssiblfDfsdription;
        }

        /**
         * Gfts thf rolf of this objfdt.
         *
         * @rfturn bn instbndf of <dodf>AddfssiblfRolf</dodf>
         *      dfsdribing thf rolf of thf objfdt
         * @sff jbvbx.bddfssibility.AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.AWT_COMPONENT;
        }

        /**
         * Gfts thf stbtf of this objfdt.
         *
         * @rfturn bn instbndf of <dodf>AddfssiblfStbtfSft</dodf>
         *       dontbining thf durrfnt stbtf sft of thf objfdt
         * @sff jbvbx.bddfssibility.AddfssiblfStbtf
         */
        publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
            rfturn Componfnt.this.gftAddfssiblfStbtfSft();
        }

        /**
         * Gfts thf <dodf>Addfssiblf</dodf> pbrfnt of this objfdt.
         * If thf pbrfnt of this objfdt implfmfnts <dodf>Addfssiblf</dodf>,
         * this mfthod should simply rfturn <dodf>gftPbrfnt</dodf>.
         *
         * @rfturn thf <dodf>Addfssiblf</dodf> pbrfnt of this
         *      objfdt -- dbn bf <dodf>null</dodf> if this
         *      objfdt dofs not hbvf bn <dodf>Addfssiblf</dodf> pbrfnt
         */
        publid Addfssiblf gftAddfssiblfPbrfnt() {
            if (bddfssiblfPbrfnt != null) {
                rfturn bddfssiblfPbrfnt;
            } flsf {
                Contbinfr pbrfnt = gftPbrfnt();
                if (pbrfnt instbndfof Addfssiblf) {
                    rfturn (Addfssiblf) pbrfnt;
                }
            }
            rfturn null;
        }

        /**
         * Gfts thf indfx of this objfdt in its bddfssiblf pbrfnt.
         *
         * @rfturn thf indfx of this objfdt in its pbrfnt; or -1 if this
         *    objfdt dofs not hbvf bn bddfssiblf pbrfnt
         * @sff #gftAddfssiblfPbrfnt
         */
        publid int gftAddfssiblfIndfxInPbrfnt() {
            rfturn Componfnt.this.gftAddfssiblfIndfxInPbrfnt();
        }

        /**
         * Rfturns thf numbfr of bddfssiblf dhildrfn in thf objfdt.  If bll
         * of thf dhildrfn of this objfdt implfmfnt <dodf>Addfssiblf</dodf>,
         * thfn this mfthod should rfturn thf numbfr of dhildrfn of this objfdt.
         *
         * @rfturn thf numbfr of bddfssiblf dhildrfn in thf objfdt
         */
        publid int gftAddfssiblfChildrfnCount() {
            rfturn 0; // Componfnts don't hbvf dhildrfn
        }

        /**
         * Rfturns thf nth <dodf>Addfssiblf</dodf> dhild of thf objfdt.
         *
         * @pbrbm i zfro-bbsfd indfx of dhild
         * @rfturn thf nth <dodf>Addfssiblf</dodf> dhild of thf objfdt
         */
        publid Addfssiblf gftAddfssiblfChild(int i) {
            rfturn null; // Componfnts don't hbvf dhildrfn
        }

        /**
         * Rfturns thf lodblf of this objfdt.
         *
         * @rfturn thf lodblf of this objfdt
         */
        publid Lodblf gftLodblf() {
            rfturn Componfnt.this.gftLodblf();
        }

        /**
         * Gfts thf <dodf>AddfssiblfComponfnt</dodf> bssodibtfd
         * with this objfdt if onf fxists.
         * Othfrwisf rfturn <dodf>null</dodf>.
         *
         * @rfturn thf domponfnt
         */
        publid AddfssiblfComponfnt gftAddfssiblfComponfnt() {
            rfturn this;
        }


        // AddfssiblfComponfnt mfthods
        //
        /**
         * Gfts thf bbdkground dolor of this objfdt.
         *
         * @rfturn thf bbdkground dolor, if supportfd, of thf objfdt;
         *      othfrwisf, <dodf>null</dodf>
         */
        publid Color gftBbdkground() {
            rfturn Componfnt.this.gftBbdkground();
        }

        /**
         * Sfts thf bbdkground dolor of this objfdt.
         * (For trbnspbrfndy, sff <dodf>isOpbquf</dodf>.)
         *
         * @pbrbm d thf nfw <dodf>Color</dodf> for thf bbdkground
         * @sff Componfnt#isOpbquf
         */
        publid void sftBbdkground(Color d) {
            Componfnt.this.sftBbdkground(d);
        }

        /**
         * Gfts thf forfground dolor of this objfdt.
         *
         * @rfturn thf forfground dolor, if supportfd, of thf objfdt;
         *     othfrwisf, <dodf>null</dodf>
         */
        publid Color gftForfground() {
            rfturn Componfnt.this.gftForfground();
        }

        /**
         * Sfts thf forfground dolor of this objfdt.
         *
         * @pbrbm d thf nfw <dodf>Color</dodf> for thf forfground
         */
        publid void sftForfground(Color d) {
            Componfnt.this.sftForfground(d);
        }

        /**
         * Gfts thf <dodf>Cursor</dodf> of this objfdt.
         *
         * @rfturn thf <dodf>Cursor</dodf>, if supportfd,
         *     of thf objfdt; othfrwisf, <dodf>null</dodf>
         */
        publid Cursor gftCursor() {
            rfturn Componfnt.this.gftCursor();
        }

        /**
         * Sfts thf <dodf>Cursor</dodf> of this objfdt.
         * <p>
         * Thf mfthod mby hbvf no visubl ffffdt if thf Jbvb plbtform
         * implfmfntbtion bnd/or thf nbtivf systfm do not support
         * dhbnging thf mousf dursor shbpf.
         * @pbrbm dursor thf nfw <dodf>Cursor</dodf> for thf objfdt
         */
        publid void sftCursor(Cursor dursor) {
            Componfnt.this.sftCursor(dursor);
        }

        /**
         * Gfts thf <dodf>Font</dodf> of this objfdt.
         *
         * @rfturn thf <dodf>Font</dodf>, if supportfd,
         *    for thf objfdt; othfrwisf, <dodf>null</dodf>
         */
        publid Font gftFont() {
            rfturn Componfnt.this.gftFont();
        }

        /**
         * Sfts thf <dodf>Font</dodf> of this objfdt.
         *
         * @pbrbm f thf nfw <dodf>Font</dodf> for thf objfdt
         */
        publid void sftFont(Font f) {
            Componfnt.this.sftFont(f);
        }

        /**
         * Gfts thf <dodf>FontMftrids</dodf> of this objfdt.
         *
         * @pbrbm f thf <dodf>Font</dodf>
         * @rfturn thf <dodf>FontMftrids</dodf>, if supportfd,
         *     thf objfdt; othfrwisf, <dodf>null</dodf>
         * @sff #gftFont
         */
        publid FontMftrids gftFontMftrids(Font f) {
            if (f == null) {
                rfturn null;
            } flsf {
                rfturn Componfnt.this.gftFontMftrids(f);
            }
        }

        /**
         * Dftfrminfs if thf objfdt is fnbblfd.
         *
         * @rfturn truf if objfdt is fnbblfd; othfrwisf, fblsf
         */
        publid boolfbn isEnbblfd() {
            rfturn Componfnt.this.isEnbblfd();
        }

        /**
         * Sfts thf fnbblfd stbtf of thf objfdt.
         *
         * @pbrbm b if truf, fnbblfs this objfdt; othfrwisf, disbblfs it
         */
        publid void sftEnbblfd(boolfbn b) {
            boolfbn old = Componfnt.this.isEnbblfd();
            Componfnt.this.sftEnbblfd(b);
            if (b != old) {
                if (bddfssiblfContfxt != null) {
                    if (b) {
                        bddfssiblfContfxt.firfPropfrtyChbngf(
                                                             AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                                             null, AddfssiblfStbtf.ENABLED);
                    } flsf {
                        bddfssiblfContfxt.firfPropfrtyChbngf(
                                                             AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                                             AddfssiblfStbtf.ENABLED, null);
                    }
                }
            }
        }

        /**
         * Dftfrminfs if thf objfdt is visiblf.  Notf: this mfbns thbt thf
         * objfdt intfnds to bf visiblf; howfvfr, it mby not in fbdt bf
         * showing on thf sdrffn bfdbusf onf of thf objfdts thbt this objfdt
         * is dontbinfd by is not visiblf.  To dftfrminf if bn objfdt is
         * showing on thf sdrffn, usf <dodf>isShowing</dodf>.
         *
         * @rfturn truf if objfdt is visiblf; othfrwisf, fblsf
         */
        publid boolfbn isVisiblf() {
            rfturn Componfnt.this.isVisiblf();
        }

        /**
         * Sfts thf visiblf stbtf of thf objfdt.
         *
         * @pbrbm b if truf, shows this objfdt; othfrwisf, hidfs it
         */
        publid void sftVisiblf(boolfbn b) {
            boolfbn old = Componfnt.this.isVisiblf();
            Componfnt.this.sftVisiblf(b);
            if (b != old) {
                if (bddfssiblfContfxt != null) {
                    if (b) {
                        bddfssiblfContfxt.firfPropfrtyChbngf(
                                                             AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                                             null, AddfssiblfStbtf.VISIBLE);
                    } flsf {
                        bddfssiblfContfxt.firfPropfrtyChbngf(
                                                             AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                                             AddfssiblfStbtf.VISIBLE, null);
                    }
                }
            }
        }

        /**
         * Dftfrminfs if thf objfdt is showing.  This is dftfrminfd by dhfdking
         * thf visibility of thf objfdt bnd bndfstors of thf objfdt.  Notf:
         * this will rfturn truf fvfn if thf objfdt is obsdurfd by bnothfr
         * (for fxbmplf, it hbppfns to bf undfrnfbth b mfnu thbt wbs pullfd
         * down).
         *
         * @rfturn truf if objfdt is showing; othfrwisf, fblsf
         */
        publid boolfbn isShowing() {
            rfturn Componfnt.this.isShowing();
        }

        /**
         * Chfdks whfthfr thf spfdififd point is within this objfdt's bounds,
         * whfrf thf point's x bnd y doordinbtfs brf dffinfd to bf rflbtivf to
         * thf doordinbtf systfm of thf objfdt.
         *
         * @pbrbm p thf <dodf>Point</dodf> rflbtivf to thf
         *     doordinbtf systfm of thf objfdt
         * @rfturn truf if objfdt dontbins <dodf>Point</dodf>; othfrwisf fblsf
         */
        publid boolfbn dontbins(Point p) {
            rfturn Componfnt.this.dontbins(p);
        }

        /**
         * Rfturns thf lodbtion of thf objfdt on thf sdrffn.
         *
         * @rfturn lodbtion of objfdt on sdrffn -- dbn bf
         *    <dodf>null</dodf> if this objfdt is not on thf sdrffn
         */
        publid Point gftLodbtionOnSdrffn() {
            syndhronizfd (Componfnt.this.gftTrffLodk()) {
                if (Componfnt.this.isShowing()) {
                    rfturn Componfnt.this.gftLodbtionOnSdrffn();
                } flsf {
                    rfturn null;
                }
            }
        }

        /**
         * Gfts thf lodbtion of thf objfdt rflbtivf to thf pbrfnt in thf form
         * of b point spfdifying thf objfdt's top-lfft dornfr in thf sdrffn's
         * doordinbtf spbdf.
         *
         * @rfturn bn instbndf of Point rfprfsfnting thf top-lfft dornfr of
         * thf objfdt's bounds in thf doordinbtf spbdf of thf sdrffn;
         * <dodf>null</dodf> if this objfdt or its pbrfnt brf not on thf sdrffn
         */
        publid Point gftLodbtion() {
            rfturn Componfnt.this.gftLodbtion();
        }

        /**
         * Sfts thf lodbtion of thf objfdt rflbtivf to thf pbrfnt.
         * @pbrbm p  thf doordinbtfs of thf objfdt
         */
        publid void sftLodbtion(Point p) {
            Componfnt.this.sftLodbtion(p);
        }

        /**
         * Gfts thf bounds of this objfdt in thf form of b Rfdtbnglf objfdt.
         * Thf bounds spfdify this objfdt's width, hfight, bnd lodbtion
         * rflbtivf to its pbrfnt.
         *
         * @rfturn b rfdtbnglf indidbting this domponfnt's bounds;
         *   <dodf>null</dodf> if this objfdt is not on thf sdrffn
         */
        publid Rfdtbnglf gftBounds() {
            rfturn Componfnt.this.gftBounds();
        }

        /**
         * Sfts thf bounds of this objfdt in thf form of b
         * <dodf>Rfdtbnglf</dodf> objfdt.
         * Thf bounds spfdify this objfdt's width, hfight, bnd lodbtion
         * rflbtivf to its pbrfnt.
         *
         * @pbrbm r b rfdtbnglf indidbting this domponfnt's bounds
         */
        publid void sftBounds(Rfdtbnglf r) {
            Componfnt.this.sftBounds(r);
        }

        /**
         * Rfturns thf sizf of this objfdt in thf form of b
         * <dodf>Dimfnsion</dodf> objfdt. Thf hfight fifld of thf
         * <dodf>Dimfnsion</dodf> objfdt dontbins this objfdts's
         * hfight, bnd thf width fifld of thf <dodf>Dimfnsion</dodf>
         * objfdt dontbins this objfdt's width.
         *
         * @rfturn b <dodf>Dimfnsion</dodf> objfdt thbt indidbtfs
         *     thf sizf of this domponfnt; <dodf>null</dodf> if
         *     this objfdt is not on thf sdrffn
         */
        publid Dimfnsion gftSizf() {
            rfturn Componfnt.this.gftSizf();
        }

        /**
         * Rfsizfs this objfdt so thbt it hbs width bnd hfight.
         *
         * @pbrbm d - thf dimfnsion spfdifying thf nfw sizf of thf objfdt
         */
        publid void sftSizf(Dimfnsion d) {
            Componfnt.this.sftSizf(d);
        }

        /**
         * Rfturns thf <dodf>Addfssiblf</dodf> dhild,
         * if onf fxists, dontbinfd bt thf lodbl
         * doordinbtf <dodf>Point</dodf>.  Othfrwisf rfturns
         * <dodf>null</dodf>.
         *
         * @pbrbm p thf point dffining thf top-lfft dornfr of
         *      thf <dodf>Addfssiblf</dodf>, givfn in thf
         *      doordinbtf spbdf of thf objfdt's pbrfnt
         * @rfturn thf <dodf>Addfssiblf</dodf>, if it fxists,
         *      bt thf spfdififd lodbtion; flsf <dodf>null</dodf>
         */
        publid Addfssiblf gftAddfssiblfAt(Point p) {
            rfturn null; // Componfnts don't hbvf dhildrfn
        }

        /**
         * Rfturns whfthfr this objfdt dbn bddfpt fodus or not.
         *
         * @rfturn truf if objfdt dbn bddfpt fodus; othfrwisf fblsf
         */
        publid boolfbn isFodusTrbvfrsbblf() {
            rfturn Componfnt.this.isFodusTrbvfrsbblf();
        }

        /**
         * Rfqufsts fodus for this objfdt.
         */
        publid void rfqufstFodus() {
            Componfnt.this.rfqufstFodus();
        }

        /**
         * Adds thf spfdififd fodus listfnfr to rfdfivf fodus fvfnts from this
         * domponfnt.
         *
         * @pbrbm l thf fodus listfnfr
         */
        publid void bddFodusListfnfr(FodusListfnfr l) {
            Componfnt.this.bddFodusListfnfr(l);
        }

        /**
         * Rfmovfs thf spfdififd fodus listfnfr so it no longfr rfdfivfs fodus
         * fvfnts from this domponfnt.
         *
         * @pbrbm l thf fodus listfnfr
         */
        publid void rfmovfFodusListfnfr(FodusListfnfr l) {
            Componfnt.this.rfmovfFodusListfnfr(l);
        }

    } // innfr dlbss AddfssiblfAWTComponfnt


    /**
     * Gfts thf indfx of this objfdt in its bddfssiblf pbrfnt.
     * If this objfdt dofs not hbvf bn bddfssiblf pbrfnt, rfturns
     * -1.
     *
     * @rfturn thf indfx of this objfdt in its bddfssiblf pbrfnt
     */
    int gftAddfssiblfIndfxInPbrfnt() {
        syndhronizfd (gftTrffLodk()) {
            int indfx = -1;
            Contbinfr pbrfnt = this.gftPbrfnt();
            if (pbrfnt != null && pbrfnt instbndfof Addfssiblf) {
                Componfnt db[] = pbrfnt.gftComponfnts();
                for (int i = 0; i < db.lfngth; i++) {
                    if (db[i] instbndfof Addfssiblf) {
                        indfx++;
                    }
                    if (this.fqubls(db[i])) {
                        rfturn indfx;
                    }
                }
            }
            rfturn -1;
        }
    }

    /**
     * Gfts thf durrfnt stbtf sft of this objfdt.
     *
     * @rfturn bn instbndf of <dodf>AddfssiblfStbtfSft</dodf>
     *    dontbining thf durrfnt stbtf sft of thf objfdt
     * @sff AddfssiblfStbtf
     */
    AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
        syndhronizfd (gftTrffLodk()) {
            AddfssiblfStbtfSft stbtfs = nfw AddfssiblfStbtfSft();
            if (this.isEnbblfd()) {
                stbtfs.bdd(AddfssiblfStbtf.ENABLED);
            }
            if (this.isFodusTrbvfrsbblf()) {
                stbtfs.bdd(AddfssiblfStbtf.FOCUSABLE);
            }
            if (this.isVisiblf()) {
                stbtfs.bdd(AddfssiblfStbtf.VISIBLE);
            }
            if (this.isShowing()) {
                stbtfs.bdd(AddfssiblfStbtf.SHOWING);
            }
            if (this.isFodusOwnfr()) {
                stbtfs.bdd(AddfssiblfStbtf.FOCUSED);
            }
            if (this instbndfof Addfssiblf) {
                AddfssiblfContfxt bd = ((Addfssiblf) this).gftAddfssiblfContfxt();
                if (bd != null) {
                    Addfssiblf bp = bd.gftAddfssiblfPbrfnt();
                    if (bp != null) {
                        AddfssiblfContfxt pbd = bp.gftAddfssiblfContfxt();
                        if (pbd != null) {
                            AddfssiblfSflfdtion bs = pbd.gftAddfssiblfSflfdtion();
                            if (bs != null) {
                                stbtfs.bdd(AddfssiblfStbtf.SELECTABLE);
                                int i = bd.gftAddfssiblfIndfxInPbrfnt();
                                if (i >= 0) {
                                    if (bs.isAddfssiblfChildSflfdtfd(i)) {
                                        stbtfs.bdd(AddfssiblfStbtf.SELECTED);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (Componfnt.isInstbndfOf(this, "jbvbx.swing.JComponfnt")) {
                if (((jbvbx.swing.JComponfnt) this).isOpbquf()) {
                    stbtfs.bdd(AddfssiblfStbtf.OPAQUE);
                }
            }
            rfturn stbtfs;
        }
    }

    /**
     * Chfdks thbt thf givfn objfdt is instbndf of thf givfn dlbss.
     * @pbrbm obj Objfdt to bf dhfdkfd
     * @pbrbm dlbssNbmf Thf nbmf of thf dlbss. Must bf fully-qublififd dlbss nbmf.
     * @rfturn truf, if this objfdt is instbndfof givfn dlbss,
     *         fblsf, othfrwisf, or if obj or dlbssNbmf is null
     */
    stbtid boolfbn isInstbndfOf(Objfdt obj, String dlbssNbmf) {
        if (obj == null) rfturn fblsf;
        if (dlbssNbmf == null) rfturn fblsf;

        Clbss<?> dls = obj.gftClbss();
        whilf (dls != null) {
            if (dls.gftNbmf().fqubls(dlbssNbmf)) {
                rfturn truf;
            }
            dls = dls.gftSupfrdlbss();
        }
        rfturn fblsf;
    }


    // ************************** MIXING CODE *******************************

    /**
     * Chfdk whfthfr wf dbn trust thf durrfnt bounds of thf domponfnt.
     * Thf rfturn vbluf of fblsf indidbtfs thbt thf dontbinfr of thf
     * domponfnt is invblid, bnd thfrfforf nffds to bf lbyfd out, whidh would
     * probbbly mfbn dhbnging thf bounds of its dhildrfn.
     * Null-lbyout of thf dontbinfr or bbsfndf of thf dontbinfr mfbn
     * thf bounds of thf domponfnt brf finbl bnd dbn bf trustfd.
     */
    finbl boolfbn brfBoundsVblid() {
        Contbinfr dont = gftContbinfr();
        rfturn dont == null || dont.isVblid() || dont.gftLbyout() == null;
    }

    /**
     * Applifs thf shbpf to thf domponfnt
     * @pbrbm shbpf Shbpf to bf bpplifd to thf domponfnt
     */
    void bpplyCompoundShbpf(Rfgion shbpf) {
        dhfdkTrffLodk();

        if (!brfBoundsVblid()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this + "; brfBoundsVblid = " + brfBoundsVblid());
            }
            rfturn;
        }

        if (!isLightwfight()) {
            ComponfntPffr pffr = gftPffr();
            if (pffr != null) {
                // Thf Rfgion dlbss hbs somf optimizbtions. Thbt's why
                // wf should mbnublly dhfdk whfthfr it's fmpty bnd
                // substitutf thf objfdt oursflvfs. Othfrwisf wf fnd up
                // with somf indorrfdt Rfgion objfdt with loX bfing
                // grfbtfr thbn thf hiX for instbndf.
                if (shbpf.isEmpty()) {
                    shbpf = Rfgion.EMPTY_REGION;
                }


                // Notf: thf shbpf is not rfblly dopifd/dlonfd. Wf drfbtf
                // thf Rfgion objfdt oursflvfs, so thfrf's no bny possibility
                // to modify thf objfdt outsidf of thf mixing dodf.
                // Nullifying dompoundShbpf mfbns thbt thf domponfnt hbs normbl shbpf
                // (or hbs no shbpf bt bll).
                if (shbpf.fqubls(gftNormblShbpf())) {
                    if (this.dompoundShbpf == null) {
                        rfturn;
                    }
                    this.dompoundShbpf = null;
                    pffr.bpplyShbpf(null);
                } flsf {
                    if (shbpf.fqubls(gftApplifdShbpf())) {
                        rfturn;
                    }
                    this.dompoundShbpf = shbpf;
                    Point dompAbsolutf = gftLodbtionOnWindow();
                    if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                        mixingLog.finf("this = " + this +
                                "; dompAbsolutf=" + dompAbsolutf + "; shbpf=" + shbpf);
                    }
                    pffr.bpplyShbpf(shbpf.gftTrbnslbtfdRfgion(-dompAbsolutf.x, -dompAbsolutf.y));
                }
            }
        }
    }

    /**
     * Rfturns thf shbpf prfviously sft with bpplyCompoundShbpf().
     * If thf domponfnt is LW or no shbpf wbs bpplifd yft,
     * thf mfthod rfturns thf normbl shbpf.
     */
    privbtf Rfgion gftApplifdShbpf() {
        dhfdkTrffLodk();
        //XXX: if wf bllow LW domponfnts to hbvf b shbpf, this must bf dhbngfd
        rfturn (this.dompoundShbpf == null || isLightwfight()) ? gftNormblShbpf() : this.dompoundShbpf;
    }

    Point gftLodbtionOnWindow() {
        dhfdkTrffLodk();
        Point durLodbtion = gftLodbtion();

        for (Contbinfr pbrfnt = gftContbinfr();
                pbrfnt != null && !(pbrfnt instbndfof Window);
                pbrfnt = pbrfnt.gftContbinfr())
        {
            durLodbtion.x += pbrfnt.gftX();
            durLodbtion.y += pbrfnt.gftY();
        }

        rfturn durLodbtion;
    }

    /**
     * Rfturns thf full shbpf of thf domponfnt lodbtfd in window doordinbtfs
     */
    finbl Rfgion gftNormblShbpf() {
        dhfdkTrffLodk();
        //XXX: wf mby tbkf into bddount b usfr-spfdififd shbpf for this domponfnt
        Point dompAbsolutf = gftLodbtionOnWindow();
        rfturn
            Rfgion.gftInstbndfXYWH(
                    dompAbsolutf.x,
                    dompAbsolutf.y,
                    gftWidth(),
                    gftHfight()
            );
    }

    /**
     * Rfturns thf "opbquf shbpf" of thf domponfnt.
     *
     * Thf opbquf shbpf of b lightwfight domponfnts is thf bdtubl shbpf thbt
     * nffds to bf dut off of thf hfbvywfight domponfnts in ordfr to mix this
     * lightwfight domponfnt dorrfdtly with thfm.
     *
     * Thf mfthod is ovfrridfn in thf jbvb.bwt.Contbinfr to hbndlf non-opbquf
     * dontbinfrs dontbining opbquf dhildrfn.
     *
     * Sff 6637655 for dftbils.
     */
    Rfgion gftOpbqufShbpf() {
        dhfdkTrffLodk();
        if (mixingCutoutRfgion != null) {
            rfturn mixingCutoutRfgion;
        } flsf {
            rfturn gftNormblShbpf();
        }
    }

    finbl int gftSiblingIndfxAbovf() {
        dhfdkTrffLodk();
        Contbinfr pbrfnt = gftContbinfr();
        if (pbrfnt == null) {
            rfturn -1;
        }

        int nfxtAbovf = pbrfnt.gftComponfntZOrdfr(this) - 1;

        rfturn nfxtAbovf < 0 ? -1 : nfxtAbovf;
    }

    finbl ComponfntPffr gftHWPffrAbovfMf() {
        dhfdkTrffLodk();

        Contbinfr dont = gftContbinfr();
        int indfxAbovf = gftSiblingIndfxAbovf();

        whilf (dont != null) {
            for (int i = indfxAbovf; i > -1; i--) {
                Componfnt domp = dont.gftComponfnt(i);
                if (domp != null && domp.isDisplbybblf() && !domp.isLightwfight()) {
                    rfturn domp.gftPffr();
                }
            }
            // trbvfrsing thf hifrbrdhy up to thf dlosfst HW dontbinfr;
            // furthfr trbvfrsing mby rfturn b domponfnt thbt is not bdtublly
            // b nbtivf sibling of this domponfnt bnd this kind of z-ordfr
            // rfqufst mby not bf bllowfd by thf undfrlying systfm (6852051).
            if (!dont.isLightwfight()) {
                brfbk;
            }

            indfxAbovf = dont.gftSiblingIndfxAbovf();
            dont = dont.gftContbinfr();
        }

        rfturn null;
    }

    finbl int gftSiblingIndfxBflow() {
        dhfdkTrffLodk();
        Contbinfr pbrfnt = gftContbinfr();
        if (pbrfnt == null) {
            rfturn -1;
        }

        int nfxtBflow = pbrfnt.gftComponfntZOrdfr(this) + 1;

        rfturn nfxtBflow >= pbrfnt.gftComponfntCount() ? -1 : nfxtBflow;
    }

    finbl boolfbn isNonOpbqufForMixing() {
        rfturn mixingCutoutRfgion != null &&
            mixingCutoutRfgion.isEmpty();
    }

    privbtf Rfgion dbldulbtfCurrfntShbpf() {
        dhfdkTrffLodk();
        Rfgion s = gftNormblShbpf();

        if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            mixingLog.finf("this = " + this + "; normblShbpf=" + s);
        }

        if (gftContbinfr() != null) {
            Componfnt domp = this;
            Contbinfr dont = domp.gftContbinfr();

            whilf (dont != null) {
                for (int indfx = domp.gftSiblingIndfxAbovf(); indfx != -1; --indfx) {
                    /* It is bssumfd thbt:
                     *
                     *    gftComponfnt(gftContbinfr().gftComponfntZOrdfr(domp)) == domp
                     *
                     * Thf bssumption hbs bffn mbdf bddording to thf durrfnt
                     * implfmfntbtion of thf Contbinfr dlbss.
                     */
                    Componfnt d = dont.gftComponfnt(indfx);
                    if (d.isLightwfight() && d.isShowing()) {
                        s = s.gftDifffrfndf(d.gftOpbqufShbpf());
                    }
                }

                if (dont.isLightwfight()) {
                    s = s.gftIntfrsfdtion(dont.gftNormblShbpf());
                } flsf {
                    brfbk;
                }

                domp = dont;
                dont = dont.gftContbinfr();
            }
        }

        if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            mixingLog.finf("durrfntShbpf=" + s);
        }

        rfturn s;
    }

    void bpplyCurrfntShbpf() {
        dhfdkTrffLodk();
        if (!brfBoundsVblid()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this + "; brfBoundsVblid = " + brfBoundsVblid());
            }
            rfturn; // Bfdbusf bpplyCompoundShbpf() ignorfs sudh domponfnts bnywby
        }
        if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            mixingLog.finf("this = " + this);
        }
        bpplyCompoundShbpf(dbldulbtfCurrfntShbpf());
    }

    finbl void subtrbdtAndApplyShbpf(Rfgion s) {
        dhfdkTrffLodk();

        if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            mixingLog.finf("this = " + this + "; s=" + s);
        }

        bpplyCompoundShbpf(gftApplifdShbpf().gftDifffrfndf(s));
    }

    privbtf finbl void bpplyCurrfntShbpfBflowMf() {
        dhfdkTrffLodk();
        Contbinfr pbrfnt = gftContbinfr();
        if (pbrfnt != null && pbrfnt.isShowing()) {
            // First, rfbpply shbpfs of my siblings
            pbrfnt.rfdursivfApplyCurrfntShbpf(gftSiblingIndfxBflow());

            // Sfdond, if my dontbinfr is non-opbquf, rfbpply shbpfs of siblings of my dontbinfr
            Contbinfr pbrfnt2 = pbrfnt.gftContbinfr();
            whilf (!pbrfnt.isOpbquf() && pbrfnt2 != null) {
                pbrfnt2.rfdursivfApplyCurrfntShbpf(pbrfnt.gftSiblingIndfxBflow());

                pbrfnt = pbrfnt2;
                pbrfnt2 = pbrfnt.gftContbinfr();
            }
        }
    }

    finbl void subtrbdtAndApplyShbpfBflowMf() {
        dhfdkTrffLodk();
        Contbinfr pbrfnt = gftContbinfr();
        if (pbrfnt != null && isShowing()) {
            Rfgion opbqufShbpf = gftOpbqufShbpf();

            // First, dut my siblings
            pbrfnt.rfdursivfSubtrbdtAndApplyShbpf(opbqufShbpf, gftSiblingIndfxBflow());

            // Sfdond, if my dontbinfr is non-opbquf, dut siblings of my dontbinfr
            Contbinfr pbrfnt2 = pbrfnt.gftContbinfr();
            whilf (!pbrfnt.isOpbquf() && pbrfnt2 != null) {
                pbrfnt2.rfdursivfSubtrbdtAndApplyShbpf(opbqufShbpf, pbrfnt.gftSiblingIndfxBflow());

                pbrfnt = pbrfnt2;
                pbrfnt2 = pbrfnt.gftContbinfr();
            }
        }
    }

    void mixOnShowing() {
        syndhronizfd (gftTrffLodk()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this);
            }
            if (!isMixingNffdfd()) {
                rfturn;
            }
            if (isLightwfight()) {
                subtrbdtAndApplyShbpfBflowMf();
            } flsf {
                bpplyCurrfntShbpf();
            }
        }
    }

    void mixOnHiding(boolfbn isLightwfight) {
        // Wf dbnnot bf surf thbt thf pffr fxists bt this point, so wf nffd thf brgumfnt
        //    to find out whfthfr thf hiding domponfnt is (wfll, bdtublly wbs) b LW or b HW.
        syndhronizfd (gftTrffLodk()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this + "; isLightwfight = " + isLightwfight);
            }
            if (!isMixingNffdfd()) {
                rfturn;
            }
            if (isLightwfight) {
                bpplyCurrfntShbpfBflowMf();
            }
        }
    }

    void mixOnRfshbping() {
        syndhronizfd (gftTrffLodk()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this);
            }
            if (!isMixingNffdfd()) {
                rfturn;
            }
            if (isLightwfight()) {
                bpplyCurrfntShbpfBflowMf();
            } flsf {
                bpplyCurrfntShbpf();
            }
        }
    }

    void mixOnZOrdfrChbnging(int oldZordfr, int nfwZordfr) {
        syndhronizfd (gftTrffLodk()) {
            boolfbn bfdbmfHighfr = nfwZordfr < oldZordfr;
            Contbinfr pbrfnt = gftContbinfr();

            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this +
                    "; oldZordfr=" + oldZordfr + "; nfwZordfr=" + nfwZordfr + "; pbrfnt=" + pbrfnt);
            }
            if (!isMixingNffdfd()) {
                rfturn;
            }
            if (isLightwfight()) {
                if (bfdbmfHighfr) {
                    if (pbrfnt != null && isShowing()) {
                        pbrfnt.rfdursivfSubtrbdtAndApplyShbpf(gftOpbqufShbpf(), gftSiblingIndfxBflow(), oldZordfr);
                    }
                } flsf {
                    if (pbrfnt != null) {
                        pbrfnt.rfdursivfApplyCurrfntShbpf(oldZordfr, nfwZordfr);
                    }
                }
            } flsf {
                if (bfdbmfHighfr) {
                    bpplyCurrfntShbpf();
                } flsf {
                    if (pbrfnt != null) {
                        Rfgion shbpf = gftApplifdShbpf();

                        for (int indfx = oldZordfr; indfx < nfwZordfr; indfx++) {
                            Componfnt d = pbrfnt.gftComponfnt(indfx);
                            if (d.isLightwfight() && d.isShowing()) {
                                shbpf = shbpf.gftDifffrfndf(d.gftOpbqufShbpf());
                            }
                        }
                        bpplyCompoundShbpf(shbpf);
                    }
                }
            }
        }
    }

    void mixOnVblidbting() {
        // This mfthod gfts ovfrridfn in thf Contbinfr. Obviously, b plbin
        // non-dontbinfr domponfnts don't nffd to hbndlf vblidbtion.
    }

    finbl boolfbn isMixingNffdfd() {
        if (SunToolkit.gftSunAwtDisbblfMixing()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                mixingLog.finfst("this = " + this + "; Mixing disbblfd vib sun.bwt.disbblfMixing");
            }
            rfturn fblsf;
        }
        if (!brfBoundsVblid()) {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this + "; brfBoundsVblid = " + brfBoundsVblid());
            }
            rfturn fblsf;
        }
        Window window = gftContbiningWindow();
        if (window != null) {
            if (!window.hbsHfbvywfightDfsdfndbnts() || !window.hbsLightwfightDfsdfndbnts() || window.isDisposing()) {
                if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                    mixingLog.finf("dontbining window = " + window +
                            "; hbs h/w dfsdfndbnts = " + window.hbsHfbvywfightDfsdfndbnts() +
                            "; hbs l/w dfsdfndbnts = " + window.hbsLightwfightDfsdfndbnts() +
                            "; disposing = " + window.isDisposing());
                }
                rfturn fblsf;
            }
        } flsf {
            if (mixingLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                mixingLog.finf("this = " + this + "; dontbining window is null");
            }
            rfturn fblsf;
        }
        rfturn truf;
    }

    // ****************** END OF MIXING CODE ********************************

    // Notf thbt thf mfthod is ovfrridfn in thf Window dlbss,
    // b window dofsn't nffd to bf updbtfd in thf Z-ordfr.
    void updbtfZOrdfr() {
        pffr.sftZOrdfr(gftHWPffrAbovfMf());
    }

}
