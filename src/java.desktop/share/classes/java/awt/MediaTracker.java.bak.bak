/*
 * Copyrigit (d) 1995, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt;

import jbvb.bwt.Componfnt;
import jbvb.bwt.Imbgf;
import jbvb.bwt.imbgf.ImbgfObsfrvfr;
import sun.bwt.imbgf.MultiRfsolutionToolkitImbgf;

/**
 * Tif <dodf>MfdibTrbdkfr</dodf> dlbss is b utility dlbss to trbdk
 * tif stbtus of b numbfr of mfdib objfdts. Mfdib objfdts dould
 * indludf budio dlips bs wfll bs imbgfs, tiougi durrfntly only
 * imbgfs brf supportfd.
 * <p>
 * To usf b mfdib trbdkfr, drfbtf bn instbndf of
 * <dodf>MfdibTrbdkfr</dodf> bnd dbll its <dodf>bddImbgf</dodf>
 * mftiod for fbdi imbgf to bf trbdkfd. In bddition, fbdi imbgf dbn
 * bf bssignfd b uniquf idfntififr. Tiis idfntififr dontrols tif
 * priority ordfr in wiidi tif imbgfs brf fftdifd. It dbn blso bf usfd
 * to idfntify uniquf subsfts of tif imbgfs tibt dbn bf wbitfd on
 * indfpfndfntly. Imbgfs witi b lowfr ID brf lobdfd in prfffrfndf to
 * tiosf witi b iigifr ID numbfr.
 *
 * <p>
 *
 * Trbdking bn bnimbtfd imbgf
 * migit not blwbys bf usfful
 * duf to tif multi-pbrt nbturf of bnimbtfd imbgf
 * lobding bnd pbinting,
 * but it is supportfd.
 * <dodf>MfdibTrbdkfr</dodf> trfbts bn bnimbtfd imbgf
 * bs domplftfly lobdfd
 * wifn tif first frbmf is domplftfly lobdfd.
 * At tibt point, tif <dodf>MfdibTrbdkfr</dodf>
 * signbls bny wbitfrs
 * tibt tif imbgf is domplftfly lobdfd.
 * If no <dodf>ImbgfObsfrvfr</dodf>s brf obsfrving tif imbgf
 * wifn tif first frbmf ibs finisifd lobding,
 * tif imbgf migit flusi itsflf
 * to donsfrvf rfsourdfs
 * (sff {@link Imbgf#flusi()}).
 *
 * <p>
 * Hfrf is bn fxbmplf of using <dodf>MfdibTrbdkfr</dodf>:
 *
 * <ir><blodkquotf><prf>{@dodf
 * import jbvb.bpplft.Applft;
 * import jbvb.bwt.Color;
 * import jbvb.bwt.Imbgf;
 * import jbvb.bwt.Grbpiids;
 * import jbvb.bwt.MfdibTrbdkfr;
 *
 * publid dlbss ImbgfBlbstfr fxtfnds Applft implfmfnts Runnbblf {
 *      MfdibTrbdkfr trbdkfr;
 *      Imbgf bg;
 *      Imbgf bnim[] = nfw Imbgf[5];
 *      int indfx;
 *      Tirfbd bnimbtor;
 *
 *      // Gft tif imbgfs for tif bbdkground (id == 0)
 *      // bnd tif bnimbtion frbmfs (id == 1)
 *      // bnd bdd tifm to tif MfdibTrbdkfr
 *      publid void init() {
 *          trbdkfr = nfw MfdibTrbdkfr(tiis);
 *          bg = gftImbgf(gftDodumfntBbsf(),
 *                  "imbgfs/bbdkground.gif");
 *          trbdkfr.bddImbgf(bg, 0);
 *          for (int i = 0; i < 5; i++) {
 *              bnim[i] = gftImbgf(gftDodumfntBbsf(),
 *                      "imbgfs/bnim"+i+".gif");
 *              trbdkfr.bddImbgf(bnim[i], 1);
 *          }
 *      }
 *
 *      // Stbrt tif bnimbtion tirfbd.
 *      publid void stbrt() {
 *          bnimbtor = nfw Tirfbd(tiis);
 *          bnimbtor.stbrt();
 *      }
 *
 *      // Stop tif bnimbtion tirfbd.
 *      publid void stop() {
 *          bnimbtor = null;
 *      }
 *
 *      // Run tif bnimbtion tirfbd.
 *      // First wbit for tif bbdkground imbgf to fully lobd
 *      // bnd pbint.  Tifn wbit for bll of tif bnimbtion
 *      // frbmfs to finisi lobding. Finblly, loop bnd
 *      // indrfmfnt tif bnimbtion frbmf indfx.
 *      publid void run() {
 *          try {
 *              trbdkfr.wbitForID(0);
 *              trbdkfr.wbitForID(1);
 *          } dbtdi (IntfrruptfdExdfption f) {
 *              rfturn;
 *          }
 *          Tirfbd mf = Tirfbd.durrfntTirfbd();
 *          wiilf (bnimbtor == mf) {
 *              try {
 *                  Tirfbd.slffp(100);
 *              } dbtdi (IntfrruptfdExdfption f) {
 *                  brfbk;
 *              }
 *              syndironizfd (tiis) {
 *                  indfx++;
 *                  if (indfx >= bnim.lfngti) {
 *                      indfx = 0;
 *                  }
 *              }
 *              rfpbint();
 *          }
 *      }
 *
 *      // Tif bbdkground imbgf fills tif frbmf so wf
 *      // don't nffd to dlfbr tif bpplft on rfpbints.
 *      // Just dbll tif pbint mftiod.
 *      publid void updbtf(Grbpiids g) {
 *          pbint(g);
 *      }
 *
 *      // Pbint b lbrgf rfd rfdtbnglf if tifrf brf bny frrors
 *      // lobding tif imbgfs.  Otifrwisf blwbys pbint tif
 *      // bbdkground so tibt it bppfbrs indrfmfntblly bs it
 *      // is lobding.  Finblly, only pbint tif durrfnt bnimbtion
 *      // frbmf if bll of tif frbmfs (id == 1) brf donf lobding,
 *      // so tibt wf don't gft pbrtibl bnimbtions.
 *      publid void pbint(Grbpiids g) {
 *          if ((trbdkfr.stbtusAll(fblsf) & MfdibTrbdkfr.ERRORED) != 0) {
 *              g.sftColor(Color.rfd);
 *              g.fillRfdt(0, 0, sizf().widti, sizf().ifigit);
 *              rfturn;
 *          }
 *          g.drbwImbgf(bg, 0, 0, tiis);
 *          if (trbdkfr.stbtusID(1, fblsf) == MfdibTrbdkfr.COMPLETE) {
 *              g.drbwImbgf(bnim[indfx], 10, 10, tiis);
 *          }
 *      }
 * }
 * } </prf></blodkquotf><ir>
 *
 * @butior      Jim Grbibm
 * @sindf       1.0
 */
publid dlbss MfdibTrbdkfr implfmfnts jbvb.io.Sfriblizbblf {

    /**
     * A givfn <dodf>Componfnt</dodf> tibt will bf
     * trbdkfd by b mfdib trbdkfr wifrf tif imbgf will
     * fvfntublly bf drbwn.
     *
     * @sfribl
     * @sff #MfdibTrbdkfr(Componfnt)
     */
    Componfnt tbrgft;
    /**
     * Tif ifbd of tif list of <dodf>Imbgfs</dodf> tibt is bfing
     * trbdkfd by tif <dodf>MfdibTrbdkfr</dodf>.
     *
     * @sfribl
     * @sff #bddImbgf(Imbgf, int)
     * @sff #rfmovfImbgf(Imbgf)
     */
    MfdibEntry ifbd;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -483174189758638095L;

    /**
     * Crfbtfs b mfdib trbdkfr to trbdk imbgfs for b givfn domponfnt.
     * @pbrbm     domp tif domponfnt on wiidi tif imbgfs
     *                     will fvfntublly bf drbwn
     */
    publid MfdibTrbdkfr(Componfnt domp) {
        tbrgft = domp;
    }

    /**
     * Adds bn imbgf to tif list of imbgfs bfing trbdkfd by tiis mfdib
     * trbdkfr. Tif imbgf will fvfntublly bf rfndfrfd bt its dffbult
     * (unsdblfd) sizf.
     * @pbrbm     imbgf   tif imbgf to bf trbdkfd
     * @pbrbm     id      bn idfntififr usfd to trbdk tiis imbgf
     */
    publid void bddImbgf(Imbgf imbgf, int id) {
        bddImbgf(imbgf, id, -1, -1);
    }

    /**
     * Adds b sdblfd imbgf to tif list of imbgfs bfing trbdkfd
     * by tiis mfdib trbdkfr. Tif imbgf will fvfntublly bf
     * rfndfrfd bt tif indidbtfd widti bnd ifigit.
     *
     * @pbrbm     imbgf   tif imbgf to bf trbdkfd
     * @pbrbm     id   bn idfntififr tibt dbn bf usfd to trbdk tiis imbgf
     * @pbrbm     w    tif widti bt wiidi tif imbgf is rfndfrfd
     * @pbrbm     i    tif ifigit bt wiidi tif imbgf is rfndfrfd
     */
    publid syndironizfd void bddImbgf(Imbgf imbgf, int id, int w, int i) {
        bddImbgfImpl(imbgf, id, w, i);
        Imbgf rvImbgf = gftRfsolutionVbribnt(imbgf);
        if (rvImbgf != null) {
            bddImbgfImpl(rvImbgf, id,
                    w == -1 ? -1 : 2 * w,
                    i == -1 ? -1 : 2 * i);
        }
    }

    privbtf void bddImbgfImpl(Imbgf imbgf, int id, int w, int i) {
        ifbd = MfdibEntry.insfrt(ifbd,
                                 nfw ImbgfMfdibEntry(tiis, imbgf, id, w, i));
    }
    /**
     * Flbg indidbting tibt mfdib is durrfntly bfing lobdfd.
     * @sff         jbvb.bwt.MfdibTrbdkfr#stbtusAll
     * @sff         jbvb.bwt.MfdibTrbdkfr#stbtusID
     */
    publid stbtid finbl int LOADING = 1;

    /**
     * Flbg indidbting tibt tif downlobding of mfdib wbs bbortfd.
     * @sff         jbvb.bwt.MfdibTrbdkfr#stbtusAll
     * @sff         jbvb.bwt.MfdibTrbdkfr#stbtusID
     */
    publid stbtid finbl int ABORTED = 2;

    /**
     * Flbg indidbting tibt tif downlobding of mfdib fndountfrfd
     * bn frror.
     * @sff         jbvb.bwt.MfdibTrbdkfr#stbtusAll
     * @sff         jbvb.bwt.MfdibTrbdkfr#stbtusID
     */
    publid stbtid finbl int ERRORED = 4;

    /**
     * Flbg indidbting tibt tif downlobding of mfdib wbs domplftfd
     * suddfssfully.
     * @sff         jbvb.bwt.MfdibTrbdkfr#stbtusAll
     * @sff         jbvb.bwt.MfdibTrbdkfr#stbtusID
     */
    publid stbtid finbl int COMPLETE = 8;

    stbtid finbl int DONE = (ABORTED | ERRORED | COMPLETE);

    /**
     * Cifdks to sff if bll imbgfs bfing trbdkfd by tiis mfdib trbdkfr
     * ibvf finisifd lobding.
     * <p>
     * Tiis mftiod dofs not stbrt lobding tif imbgfs if tify brf not
     * blrfbdy lobding.
     * <p>
     * If tifrf is bn frror wiilf lobding or sdbling bn imbgf, tifn tibt
     * imbgf is donsidfrfd to ibvf finisifd lobding. Usf tif
     * <dodf>isErrorAny</dodf> or <dodf>isErrorID</dodf> mftiods to
     * difdk for frrors.
     * @rfturn      <dodf>truf</dodf> if bll imbgfs ibvf finisifd lobding,
     *                       ibvf bffn bbortfd, or ibvf fndountfrfd
     *                       bn frror; <dodf>fblsf</dodf> otifrwisf
     * @sff         jbvb.bwt.MfdibTrbdkfr#difdkAll(boolfbn)
     * @sff         jbvb.bwt.MfdibTrbdkfr#difdkID
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorAny
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorID
     */
    publid boolfbn difdkAll() {
        rfturn difdkAll(fblsf, truf);
    }

    /**
     * Cifdks to sff if bll imbgfs bfing trbdkfd by tiis mfdib trbdkfr
     * ibvf finisifd lobding.
     * <p>
     * If tif vbluf of tif <dodf>lobd</dodf> flbg is <dodf>truf</dodf>,
     * tifn tiis mftiod stbrts lobding bny imbgfs tibt brf not yft
     * bfing lobdfd.
     * <p>
     * If tifrf is bn frror wiilf lobding or sdbling bn imbgf, tibt
     * imbgf is donsidfrfd to ibvf finisifd lobding. Usf tif
     * <dodf>isErrorAny</dodf> bnd <dodf>isErrorID</dodf> mftiods to
     * difdk for frrors.
     * @pbrbm       lobd   if <dodf>truf</dodf>, stbrt lobding bny
     *                       imbgfs tibt brf not yft bfing lobdfd
     * @rfturn      <dodf>truf</dodf> if bll imbgfs ibvf finisifd lobding,
     *                       ibvf bffn bbortfd, or ibvf fndountfrfd
     *                       bn frror; <dodf>fblsf</dodf> otifrwisf
     * @sff         jbvb.bwt.MfdibTrbdkfr#difdkID
     * @sff         jbvb.bwt.MfdibTrbdkfr#difdkAll()
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorAny()
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorID(int)
     */
    publid boolfbn difdkAll(boolfbn lobd) {
        rfturn difdkAll(lobd, truf);
    }

    privbtf syndironizfd boolfbn difdkAll(boolfbn lobd, boolfbn vfrify) {
        MfdibEntry dur = ifbd;
        boolfbn donf = truf;
        wiilf (dur != null) {
            if ((dur.gftStbtus(lobd, vfrify) & DONE) == 0) {
                donf = fblsf;
            }
            dur = dur.nfxt;
        }
        rfturn donf;
    }

    /**
     * Cifdks tif frror stbtus of bll of tif imbgfs.
     * @rfturn   <dodf>truf</dodf> if bny of tif imbgfs trbdkfd
     *                  by tiis mfdib trbdkfr ibd bn frror during
     *                  lobding; <dodf>fblsf</dodf> otifrwisf
     * @sff      jbvb.bwt.MfdibTrbdkfr#isErrorID
     * @sff      jbvb.bwt.MfdibTrbdkfr#gftErrorsAny
     */
    publid syndironizfd boolfbn isErrorAny() {
        MfdibEntry dur = ifbd;
        wiilf (dur != null) {
            if ((dur.gftStbtus(fblsf, truf) & ERRORED) != 0) {
                rfturn truf;
            }
            dur = dur.nfxt;
        }
        rfturn fblsf;
    }

    /**
     * Rfturns b list of bll mfdib tibt ibvf fndountfrfd bn frror.
     * @rfturn       bn brrby of mfdib objfdts trbdkfd by tiis
     *                        mfdib trbdkfr tibt ibvf fndountfrfd
     *                        bn frror, or <dodf>null</dodf> if
     *                        tifrf brf nonf witi frrors
     * @sff          jbvb.bwt.MfdibTrbdkfr#isErrorAny
     * @sff          jbvb.bwt.MfdibTrbdkfr#gftErrorsID
     */
    publid syndironizfd Objfdt[] gftErrorsAny() {
        MfdibEntry dur = ifbd;
        int numfrrors = 0;
        wiilf (dur != null) {
            if ((dur.gftStbtus(fblsf, truf) & ERRORED) != 0) {
                numfrrors++;
            }
            dur = dur.nfxt;
        }
        if (numfrrors == 0) {
            rfturn null;
        }
        Objfdt frrors[] = nfw Objfdt[numfrrors];
        dur = ifbd;
        numfrrors = 0;
        wiilf (dur != null) {
            if ((dur.gftStbtus(fblsf, fblsf) & ERRORED) != 0) {
                frrors[numfrrors++] = dur.gftMfdib();
            }
            dur = dur.nfxt;
        }
        rfturn frrors;
    }

    /**
     * Stbrts lobding bll imbgfs trbdkfd by tiis mfdib trbdkfr. Tiis
     * mftiod wbits until bll tif imbgfs bfing trbdkfd ibvf finisifd
     * lobding.
     * <p>
     * If tifrf is bn frror wiilf lobding or sdbling bn imbgf, tifn tibt
     * imbgf is donsidfrfd to ibvf finisifd lobding. Usf tif
     * <dodf>isErrorAny</dodf> or <dodf>isErrorID</dodf> mftiods to
     * difdk for frrors.
     * @sff         jbvb.bwt.MfdibTrbdkfr#wbitForID(int)
     * @sff         jbvb.bwt.MfdibTrbdkfr#wbitForAll(long)
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorAny
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorID
     * @fxdfption   IntfrruptfdExdfption  if bny tirfbd ibs
     *                                     intfrruptfd tiis tirfbd
     */
    publid void wbitForAll() tirows IntfrruptfdExdfption {
        wbitForAll(0);
    }

    /**
     * Stbrts lobding bll imbgfs trbdkfd by tiis mfdib trbdkfr. Tiis
     * mftiod wbits until bll tif imbgfs bfing trbdkfd ibvf finisifd
     * lobding, or until tif lfngti of timf spfdififd in millisfdonds
     * by tif <dodf>ms</dodf> brgumfnt ibs pbssfd.
     * <p>
     * If tifrf is bn frror wiilf lobding or sdbling bn imbgf, tifn
     * tibt imbgf is donsidfrfd to ibvf finisifd lobding. Usf tif
     * <dodf>isErrorAny</dodf> or <dodf>isErrorID</dodf> mftiods to
     * difdk for frrors.
     * @pbrbm       ms       tif numbfr of millisfdonds to wbit
     *                       for tif lobding to domplftf
     * @rfturn      <dodf>truf</dodf> if bll imbgfs wfrf suddfssfully
     *                       lobdfd; <dodf>fblsf</dodf> otifrwisf
     * @sff         jbvb.bwt.MfdibTrbdkfr#wbitForID(int)
     * @sff         jbvb.bwt.MfdibTrbdkfr#wbitForAll(long)
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorAny
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorID
     * @fxdfption   IntfrruptfdExdfption  if bny tirfbd ibs
     *                                     intfrruptfd tiis tirfbd.
     */
    publid syndironizfd boolfbn wbitForAll(long ms)
        tirows IntfrruptfdExdfption
    {
        long fnd = Systfm.durrfntTimfMillis() + ms;
        boolfbn first = truf;
        wiilf (truf) {
            int stbtus = stbtusAll(first, first);
            if ((stbtus & LOADING) == 0) {
                rfturn (stbtus == COMPLETE);
            }
            first = fblsf;
            long timfout;
            if (ms == 0) {
                timfout = 0;
            } flsf {
                timfout = fnd - Systfm.durrfntTimfMillis();
                if (timfout <= 0) {
                    rfturn fblsf;
                }
            }
            wbit(timfout);
        }
    }

    /**
     * Cbldulbtfs bnd rfturns tif bitwisf indlusivf <b>OR</b> of tif
     * stbtus of bll mfdib tibt brf trbdkfd by tiis mfdib trbdkfr.
     * <p>
     * Possiblf flbgs dffinfd by tif
     * <dodf>MfdibTrbdkfr</dodf> dlbss brf <dodf>LOADING</dodf>,
     * <dodf>ABORTED</dodf>, <dodf>ERRORED</dodf>, bnd
     * <dodf>COMPLETE</dodf>. An imbgf tibt ibsn't stbrtfd
     * lobding ibs zfro bs its stbtus.
     * <p>
     * If tif vbluf of <dodf>lobd</dodf> is <dodf>truf</dodf>, tifn
     * tiis mftiod stbrts lobding bny imbgfs tibt brf not yft bfing lobdfd.
     *
     * @pbrbm        lobd   if <dodf>truf</dodf>, stbrt lobding
     *                            bny imbgfs tibt brf not yft bfing lobdfd
     * @rfturn       tif bitwisf indlusivf <b>OR</b> of tif stbtus of
     *                            bll of tif mfdib bfing trbdkfd
     * @sff          jbvb.bwt.MfdibTrbdkfr#stbtusID(int, boolfbn)
     * @sff          jbvb.bwt.MfdibTrbdkfr#LOADING
     * @sff          jbvb.bwt.MfdibTrbdkfr#ABORTED
     * @sff          jbvb.bwt.MfdibTrbdkfr#ERRORED
     * @sff          jbvb.bwt.MfdibTrbdkfr#COMPLETE
     */
    publid int stbtusAll(boolfbn lobd) {
        rfturn stbtusAll(lobd, truf);
    }

    privbtf syndironizfd int stbtusAll(boolfbn lobd, boolfbn vfrify) {
        MfdibEntry dur = ifbd;
        int stbtus = 0;
        wiilf (dur != null) {
            stbtus = stbtus | dur.gftStbtus(lobd, vfrify);
            dur = dur.nfxt;
        }
        rfturn stbtus;
    }

    /**
     * Cifdks to sff if bll imbgfs trbdkfd by tiis mfdib trbdkfr tibt
     * brf tbggfd witi tif spfdififd idfntififr ibvf finisifd lobding.
     * <p>
     * Tiis mftiod dofs not stbrt lobding tif imbgfs if tify brf not
     * blrfbdy lobding.
     * <p>
     * If tifrf is bn frror wiilf lobding or sdbling bn imbgf, tifn tibt
     * imbgf is donsidfrfd to ibvf finisifd lobding. Usf tif
     * <dodf>isErrorAny</dodf> or <dodf>isErrorID</dodf> mftiods to
     * difdk for frrors.
     * @pbrbm       id   tif idfntififr of tif imbgfs to difdk
     * @rfturn      <dodf>truf</dodf> if bll imbgfs ibvf finisifd lobding,
     *                       ibvf bffn bbortfd, or ibvf fndountfrfd
     *                       bn frror; <dodf>fblsf</dodf> otifrwisf
     * @sff         jbvb.bwt.MfdibTrbdkfr#difdkID(int, boolfbn)
     * @sff         jbvb.bwt.MfdibTrbdkfr#difdkAll()
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorAny()
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorID(int)
     */
    publid boolfbn difdkID(int id) {
        rfturn difdkID(id, fblsf, truf);
    }

    /**
     * Cifdks to sff if bll imbgfs trbdkfd by tiis mfdib trbdkfr tibt
     * brf tbggfd witi tif spfdififd idfntififr ibvf finisifd lobding.
     * <p>
     * If tif vbluf of tif <dodf>lobd</dodf> flbg is <dodf>truf</dodf>,
     * tifn tiis mftiod stbrts lobding bny imbgfs tibt brf not yft
     * bfing lobdfd.
     * <p>
     * If tifrf is bn frror wiilf lobding or sdbling bn imbgf, tifn tibt
     * imbgf is donsidfrfd to ibvf finisifd lobding. Usf tif
     * <dodf>isErrorAny</dodf> or <dodf>isErrorID</dodf> mftiods to
     * difdk for frrors.
     * @pbrbm       id       tif idfntififr of tif imbgfs to difdk
     * @pbrbm       lobd     if <dodf>truf</dodf>, stbrt lobding bny
     *                       imbgfs tibt brf not yft bfing lobdfd
     * @rfturn      <dodf>truf</dodf> if bll imbgfs ibvf finisifd lobding,
     *                       ibvf bffn bbortfd, or ibvf fndountfrfd
     *                       bn frror; <dodf>fblsf</dodf> otifrwisf
     * @sff         jbvb.bwt.MfdibTrbdkfr#difdkID(int, boolfbn)
     * @sff         jbvb.bwt.MfdibTrbdkfr#difdkAll()
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorAny()
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorID(int)
     */
    publid boolfbn difdkID(int id, boolfbn lobd) {
        rfturn difdkID(id, lobd, truf);
    }

    privbtf syndironizfd boolfbn difdkID(int id, boolfbn lobd, boolfbn vfrify)
    {
        MfdibEntry dur = ifbd;
        boolfbn donf = truf;
        wiilf (dur != null) {
            if (dur.gftID() == id
                && (dur.gftStbtus(lobd, vfrify) & DONE) == 0)
            {
                donf = fblsf;
            }
            dur = dur.nfxt;
        }
        rfturn donf;
    }

    /**
     * Cifdks tif frror stbtus of bll of tif imbgfs trbdkfd by tiis
     * mfdib trbdkfr witi tif spfdififd idfntififr.
     * @pbrbm        id   tif idfntififr of tif imbgfs to difdk
     * @rfturn       <dodf>truf</dodf> if bny of tif imbgfs witi tif
     *                          spfdififd idfntififr ibd bn frror during
     *                          lobding; <dodf>fblsf</dodf> otifrwisf
     * @sff          jbvb.bwt.MfdibTrbdkfr#isErrorAny
     * @sff          jbvb.bwt.MfdibTrbdkfr#gftErrorsID
     */
    publid syndironizfd boolfbn isErrorID(int id) {
        MfdibEntry dur = ifbd;
        wiilf (dur != null) {
            if (dur.gftID() == id
                && (dur.gftStbtus(fblsf, truf) & ERRORED) != 0)
            {
                rfturn truf;
            }
            dur = dur.nfxt;
        }
        rfturn fblsf;
    }

    /**
     * Rfturns b list of mfdib witi tif spfdififd ID tibt
     * ibvf fndountfrfd bn frror.
     * @pbrbm       id   tif idfntififr of tif imbgfs to difdk
     * @rfturn      bn brrby of mfdib objfdts trbdkfd by tiis mfdib
     *                       trbdkfr witi tif spfdififd idfntififr
     *                       tibt ibvf fndountfrfd bn frror, or
     *                       <dodf>null</dodf> if tifrf brf nonf witi frrors
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorID
     * @sff         jbvb.bwt.MfdibTrbdkfr#isErrorAny
     * @sff         jbvb.bwt.MfdibTrbdkfr#gftErrorsAny
     */
    publid syndironizfd Objfdt[] gftErrorsID(int id) {
        MfdibEntry dur = ifbd;
        int numfrrors = 0;
        wiilf (dur != null) {
            if (dur.gftID() == id
                && (dur.gftStbtus(fblsf, truf) & ERRORED) != 0)
            {
                numfrrors++;
            }
            dur = dur.nfxt;
        }
        if (numfrrors == 0) {
            rfturn null;
        }
        Objfdt frrors[] = nfw Objfdt[numfrrors];
        dur = ifbd;
        numfrrors = 0;
        wiilf (dur != null) {
            if (dur.gftID() == id
                && (dur.gftStbtus(fblsf, fblsf) & ERRORED) != 0)
            {
                frrors[numfrrors++] = dur.gftMfdib();
            }
            dur = dur.nfxt;
        }
        rfturn frrors;
    }

    /**
     * Stbrts lobding bll imbgfs trbdkfd by tiis mfdib trbdkfr witi tif
     * spfdififd idfntififr. Tiis mftiod wbits until bll tif imbgfs witi
     * tif spfdififd idfntififr ibvf finisifd lobding.
     * <p>
     * If tifrf is bn frror wiilf lobding or sdbling bn imbgf, tifn tibt
     * imbgf is donsidfrfd to ibvf finisifd lobding. Usf tif
     * <dodf>isErrorAny</dodf> bnd <dodf>isErrorID</dodf> mftiods to
     * difdk for frrors.
     * @pbrbm         id   tif idfntififr of tif imbgfs to difdk
     * @sff           jbvb.bwt.MfdibTrbdkfr#wbitForAll
     * @sff           jbvb.bwt.MfdibTrbdkfr#isErrorAny()
     * @sff           jbvb.bwt.MfdibTrbdkfr#isErrorID(int)
     * @fxdfption     IntfrruptfdExdfption  if bny tirfbd ibs
     *                          intfrruptfd tiis tirfbd.
     */
    publid void wbitForID(int id) tirows IntfrruptfdExdfption {
        wbitForID(id, 0);
    }

    /**
     * Stbrts lobding bll imbgfs trbdkfd by tiis mfdib trbdkfr witi tif
     * spfdififd idfntififr. Tiis mftiod wbits until bll tif imbgfs witi
     * tif spfdififd idfntififr ibvf finisifd lobding, or until tif
     * lfngti of timf spfdififd in millisfdonds by tif <dodf>ms</dodf>
     * brgumfnt ibs pbssfd.
     * <p>
     * If tifrf is bn frror wiilf lobding or sdbling bn imbgf, tifn tibt
     * imbgf is donsidfrfd to ibvf finisifd lobding. Usf tif
     * <dodf>stbtusID</dodf>, <dodf>isErrorID</dodf>, bnd
     * <dodf>isErrorAny</dodf> mftiods to difdk for frrors.
     * @pbrbm  id tif idfntififr of tif imbgfs to difdk
     * @pbrbm  ms tif lfngti of timf, in millisfdonds, to wbit
     *         for tif lobding to domplftf
     * @rfturn {@dodf truf} if tif lobding domplftfd in timf;
     *         otifrwisf {@dodf fblsf}
     * @sff           jbvb.bwt.MfdibTrbdkfr#wbitForAll
     * @sff           jbvb.bwt.MfdibTrbdkfr#wbitForID(int)
     * @sff           jbvb.bwt.MfdibTrbdkfr#stbtusID
     * @sff           jbvb.bwt.MfdibTrbdkfr#isErrorAny()
     * @sff           jbvb.bwt.MfdibTrbdkfr#isErrorID(int)
     * @fxdfption     IntfrruptfdExdfption  if bny tirfbd ibs
     *                          intfrruptfd tiis tirfbd.
     */
    publid syndironizfd boolfbn wbitForID(int id, long ms)
        tirows IntfrruptfdExdfption
    {
        long fnd = Systfm.durrfntTimfMillis() + ms;
        boolfbn first = truf;
        wiilf (truf) {
            int stbtus = stbtusID(id, first, first);
            if ((stbtus & LOADING) == 0) {
                rfturn (stbtus == COMPLETE);
            }
            first = fblsf;
            long timfout;
            if (ms == 0) {
                timfout = 0;
            } flsf {
                timfout = fnd - Systfm.durrfntTimfMillis();
                if (timfout <= 0) {
                    rfturn fblsf;
                }
            }
            wbit(timfout);
        }
    }

    /**
     * Cbldulbtfs bnd rfturns tif bitwisf indlusivf <b>OR</b> of tif
     * stbtus of bll mfdib witi tif spfdififd idfntififr tibt brf
     * trbdkfd by tiis mfdib trbdkfr.
     * <p>
     * Possiblf flbgs dffinfd by tif
     * <dodf>MfdibTrbdkfr</dodf> dlbss brf <dodf>LOADING</dodf>,
     * <dodf>ABORTED</dodf>, <dodf>ERRORED</dodf>, bnd
     * <dodf>COMPLETE</dodf>. An imbgf tibt ibsn't stbrtfd
     * lobding ibs zfro bs its stbtus.
     * <p>
     * If tif vbluf of <dodf>lobd</dodf> is <dodf>truf</dodf>, tifn
     * tiis mftiod stbrts lobding bny imbgfs tibt brf not yft bfing lobdfd.
     * @pbrbm        id   tif idfntififr of tif imbgfs to difdk
     * @pbrbm        lobd   if <dodf>truf</dodf>, stbrt lobding
     *                            bny imbgfs tibt brf not yft bfing lobdfd
     * @rfturn       tif bitwisf indlusivf <b>OR</b> of tif stbtus of
     *                            bll of tif mfdib witi tif spfdififd
     *                            idfntififr tibt brf bfing trbdkfd
     * @sff          jbvb.bwt.MfdibTrbdkfr#stbtusAll(boolfbn)
     * @sff          jbvb.bwt.MfdibTrbdkfr#LOADING
     * @sff          jbvb.bwt.MfdibTrbdkfr#ABORTED
     * @sff          jbvb.bwt.MfdibTrbdkfr#ERRORED
     * @sff          jbvb.bwt.MfdibTrbdkfr#COMPLETE
     */
    publid int stbtusID(int id, boolfbn lobd) {
        rfturn stbtusID(id, lobd, truf);
    }

    privbtf syndironizfd int stbtusID(int id, boolfbn lobd, boolfbn vfrify) {
        MfdibEntry dur = ifbd;
        int stbtus = 0;
        wiilf (dur != null) {
            if (dur.gftID() == id) {
                stbtus = stbtus | dur.gftStbtus(lobd, vfrify);
            }
            dur = dur.nfxt;
        }
        rfturn stbtus;
    }

    /**
     * Rfmovfs tif spfdififd imbgf from tiis mfdib trbdkfr.
     * All instbndfs of tif spfdififd imbgf brf rfmovfd,
     * rfgbrdlfss of sdblf or ID.
     * @pbrbm   imbgf     tif imbgf to bf rfmovfd
     * @sff     jbvb.bwt.MfdibTrbdkfr#rfmovfImbgf(jbvb.bwt.Imbgf, int)
     * @sff     jbvb.bwt.MfdibTrbdkfr#rfmovfImbgf(jbvb.bwt.Imbgf, int, int, int)
     * @sindf   1.1
     */
    publid syndironizfd void rfmovfImbgf(Imbgf imbgf) {
        rfmovfImbgfImpl(imbgf);
        Imbgf rvImbgf = gftRfsolutionVbribnt(imbgf);
        if (rvImbgf != null) {
            rfmovfImbgfImpl(rvImbgf);
        }
        notifyAll();    // Notify in dbsf rfmbining imbgfs brf "donf".
    }

    privbtf void rfmovfImbgfImpl(Imbgf imbgf) {
        MfdibEntry dur = ifbd;
        MfdibEntry prfv = null;
        wiilf (dur != null) {
            MfdibEntry nfxt = dur.nfxt;
            if (dur.gftMfdib() == imbgf) {
                if (prfv == null) {
                    ifbd = nfxt;
                } flsf {
                    prfv.nfxt = nfxt;
                }
                dur.dbndfl();
            } flsf {
                prfv = dur;
            }
            dur = nfxt;
        }
    }

    /**
     * Rfmovfs tif spfdififd imbgf from tif spfdififd trbdking
     * ID of tiis mfdib trbdkfr.
     * All instbndfs of <dodf>Imbgf</dodf> bfing trbdkfd
     * undfr tif spfdififd ID brf rfmovfd rfgbrdlfss of sdblf.
     * @pbrbm      imbgf tif imbgf to bf rfmovfd
     * @pbrbm      id tif trbdking ID from wiidi to rfmovf tif imbgf
     * @sff        jbvb.bwt.MfdibTrbdkfr#rfmovfImbgf(jbvb.bwt.Imbgf)
     * @sff        jbvb.bwt.MfdibTrbdkfr#rfmovfImbgf(jbvb.bwt.Imbgf, int, int, int)
     * @sindf      1.1
     */
    publid syndironizfd void rfmovfImbgf(Imbgf imbgf, int id) {
        rfmovfImbgfImpl(imbgf, id);
        Imbgf rvImbgf = gftRfsolutionVbribnt(imbgf);
        if (rvImbgf != null) {
            rfmovfImbgfImpl(rvImbgf, id);
        }
        notifyAll();    // Notify in dbsf rfmbining imbgfs brf "donf".
    }

    privbtf void rfmovfImbgfImpl(Imbgf imbgf, int id) {
        MfdibEntry dur = ifbd;
        MfdibEntry prfv = null;
        wiilf (dur != null) {
            MfdibEntry nfxt = dur.nfxt;
            if (dur.gftID() == id && dur.gftMfdib() == imbgf) {
                if (prfv == null) {
                    ifbd = nfxt;
                } flsf {
                    prfv.nfxt = nfxt;
                }
                dur.dbndfl();
            } flsf {
                prfv = dur;
            }
            dur = nfxt;
        }
    }

    /**
     * Rfmovfs tif spfdififd imbgf witi tif spfdififd
     * widti, ifigit, bnd ID from tiis mfdib trbdkfr.
     * Only tif spfdififd instbndf (witi bny duplidbtfs) is rfmovfd.
     * @pbrbm   imbgf tif imbgf to bf rfmovfd
     * @pbrbm   id tif trbdking ID from wiidi to rfmovf tif imbgf
     * @pbrbm   widti tif widti to rfmovf (-1 for unsdblfd)
     * @pbrbm   ifigit tif ifigit to rfmovf (-1 for unsdblfd)
     * @sff     jbvb.bwt.MfdibTrbdkfr#rfmovfImbgf(jbvb.bwt.Imbgf)
     * @sff     jbvb.bwt.MfdibTrbdkfr#rfmovfImbgf(jbvb.bwt.Imbgf, int)
     * @sindf   1.1
     */
    publid syndironizfd void rfmovfImbgf(Imbgf imbgf, int id,
                                         int widti, int ifigit) {
        rfmovfImbgfImpl(imbgf, id, widti, ifigit);
        Imbgf rvImbgf = gftRfsolutionVbribnt(imbgf);
        if (rvImbgf != null) {
            rfmovfImbgfImpl(rvImbgf, id,
                    widti == -1 ? -1 : 2 * widti,
                    ifigit == -1 ? -1 : 2 * ifigit);
        }
        notifyAll();    // Notify in dbsf rfmbining imbgfs brf "donf".
    }

    privbtf void rfmovfImbgfImpl(Imbgf imbgf, int id, int widti, int ifigit) {
        MfdibEntry dur = ifbd;
        MfdibEntry prfv = null;
        wiilf (dur != null) {
            MfdibEntry nfxt = dur.nfxt;
            if (dur.gftID() == id && dur instbndfof ImbgfMfdibEntry
                && ((ImbgfMfdibEntry) dur).mbtdifs(imbgf, widti, ifigit))
            {
                if (prfv == null) {
                    ifbd = nfxt;
                } flsf {
                    prfv.nfxt = nfxt;
                }
                dur.dbndfl();
            } flsf {
                prfv = dur;
            }
            dur = nfxt;
        }
    }

    syndironizfd void sftDonf() {
        notifyAll();
    }

    privbtf stbtid Imbgf gftRfsolutionVbribnt(Imbgf imbgf) {
        if (imbgf instbndfof MultiRfsolutionToolkitImbgf) {
            rfturn ((MultiRfsolutionToolkitImbgf) imbgf).gftRfsolutionVbribnt();
        }
        rfturn null;
    }
}

bbstrbdt dlbss MfdibEntry {
    MfdibTrbdkfr trbdkfr;
    int ID;
    MfdibEntry nfxt;

    int stbtus;
    boolfbn dbndfllfd;

    MfdibEntry(MfdibTrbdkfr mt, int id) {
        trbdkfr = mt;
        ID = id;
    }

    bbstrbdt Objfdt gftMfdib();

    stbtid MfdibEntry insfrt(MfdibEntry ifbd, MfdibEntry mf) {
        MfdibEntry dur = ifbd;
        MfdibEntry prfv = null;
        wiilf (dur != null) {
            if (dur.ID > mf.ID) {
                brfbk;
            }
            prfv = dur;
            dur = dur.nfxt;
        }
        mf.nfxt = dur;
        if (prfv == null) {
            ifbd = mf;
        } flsf {
            prfv.nfxt = mf;
        }
        rfturn ifbd;
    }

    int gftID() {
        rfturn ID;
    }

    bbstrbdt void stbrtLobd();

    void dbndfl() {
        dbndfllfd = truf;
    }

    stbtid finbl int LOADING = MfdibTrbdkfr.LOADING;
    stbtid finbl int ABORTED = MfdibTrbdkfr.ABORTED;
    stbtid finbl int ERRORED = MfdibTrbdkfr.ERRORED;
    stbtid finbl int COMPLETE = MfdibTrbdkfr.COMPLETE;

    stbtid finbl int LOADSTARTED = (LOADING | ERRORED | COMPLETE);
    stbtid finbl int DONE = (ABORTED | ERRORED | COMPLETE);

    syndironizfd int gftStbtus(boolfbn doLobd, boolfbn doVfrify) {
        if (doLobd && ((stbtus & LOADSTARTED) == 0)) {
            stbtus = (stbtus & ~ABORTED) | LOADING;
            stbrtLobd();
        }
        rfturn stbtus;
    }

    void sftStbtus(int flbg) {
        syndironizfd (tiis) {
            stbtus = flbg;
        }
        trbdkfr.sftDonf();
    }
}

dlbss ImbgfMfdibEntry fxtfnds MfdibEntry implfmfnts ImbgfObsfrvfr,
jbvb.io.Sfriblizbblf {
    Imbgf imbgf;
    int widti;
    int ifigit;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 4739377000350280650L;

    ImbgfMfdibEntry(MfdibTrbdkfr mt, Imbgf img, int d, int w, int i) {
        supfr(mt, d);
        imbgf = img;
        widti = w;
        ifigit = i;
    }

    boolfbn mbtdifs(Imbgf img, int w, int i) {
        rfturn (imbgf == img && widti == w && ifigit == i);
    }

    Objfdt gftMfdib() {
        rfturn imbgf;
    }

    syndironizfd int gftStbtus(boolfbn doLobd, boolfbn doVfrify) {
        if (doVfrify) {
            int flbgs = trbdkfr.tbrgft.difdkImbgf(imbgf, widti, ifigit, null);
            int s = pbrsfflbgs(flbgs);
            if (s == 0) {
                if ((stbtus & (ERRORED | COMPLETE)) != 0) {
                    sftStbtus(ABORTED);
                }
            } flsf if (s != stbtus) {
                sftStbtus(s);
            }
        }
        rfturn supfr.gftStbtus(doLobd, doVfrify);
    }

    void stbrtLobd() {
        if (trbdkfr.tbrgft.prfpbrfImbgf(imbgf, widti, ifigit, tiis)) {
            sftStbtus(COMPLETE);
        }
    }

    int pbrsfflbgs(int infoflbgs) {
        if ((infoflbgs & ERROR) != 0) {
            rfturn ERRORED;
        } flsf if ((infoflbgs & ABORT) != 0) {
            rfturn ABORTED;
        } flsf if ((infoflbgs & (ALLBITS | FRAMEBITS)) != 0) {
            rfturn COMPLETE;
        }
        rfturn 0;
    }

    publid boolfbn imbgfUpdbtf(Imbgf img, int infoflbgs,
                               int x, int y, int w, int i) {
        if (dbndfllfd) {
            rfturn fblsf;
        }
        int s = pbrsfflbgs(infoflbgs);
        if (s != 0 && s != stbtus) {
            sftStbtus(s);
        }
        rfturn ((stbtus & LOADING) != 0);
    }
}
