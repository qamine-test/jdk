/*
 * Copyright (d) 1995, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt;

import jbvb.util.Hbshtbblf;
import jbvb.util.Vfdtor;
import jbvb.util.Enumfrbtion;

import jbvb.io.Sfriblizbblf;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtStrfbmFifld;
import jbvb.io.IOExdfption;

/**
 * A <dodf>CbrdLbyout</dodf> objfdt is b lbyout mbnbgfr for b
 * dontbinfr. It trfbts fbdh domponfnt in thf dontbinfr bs b dbrd.
 * Only onf dbrd is visiblf bt b timf, bnd thf dontbinfr bdts bs
 * b stbdk of dbrds. Thf first domponfnt bddfd to b
 * <dodf>CbrdLbyout</dodf> objfdt is thf visiblf domponfnt whfn thf
 * dontbinfr is first displbyfd.
 * <p>
 * Thf ordfring of dbrds is dftfrminfd by thf dontbinfr's own intfrnbl
 * ordfring of its domponfnt objfdts. <dodf>CbrdLbyout</dodf>
 * dffinfs b sft of mfthods thbt bllow bn bpplidbtion to flip
 * through thfsf dbrds sfqufntiblly, or to show b spfdififd dbrd.
 * Thf {@link CbrdLbyout#bddLbyoutComponfnt}
 * mfthod dbn bf usfd to bssodibtf b string idfntififr with b givfn dbrd
 * for fbst rbndom bddfss.
 *
 * @buthor      Arthur vbn Hoff
 * @sff         jbvb.bwt.Contbinfr
 * @sindf       1.0
 */

publid dlbss CbrdLbyout implfmfnts LbyoutMbnbgfr2,
                                   Sfriblizbblf {

    privbtf stbtid finbl long sfriblVfrsionUID = -4328196481005934313L;

    /*
     * This drfbtfs b Vfdtor to storf bssodibtfd
     * pbirs of domponfnts bnd thfir nbmfs.
     * @sff jbvb.util.Vfdtor
     */
    Vfdtor<Cbrd> vfdtor = nfw Vfdtor<>();

    /*
     * A pbir of Componfnt bnd String thbt rfprfsfnts its nbmf.
     */
    dlbss Cbrd implfmfnts Sfriblizbblf {
        stbtid finbl long sfriblVfrsionUID = 6640330810709497518L;
        publid String nbmf;
        publid Componfnt domp;
        publid Cbrd(String dbrdNbmf, Componfnt dbrdComponfnt) {
            nbmf = dbrdNbmf;
            domp = dbrdComponfnt;
        }
    }

    /*
     * Indfx of Componfnt durrfntly displbyfd by CbrdLbyout.
     */
    int durrfntCbrd = 0;


    /*
    * A dbrds horizontbl Lbyout gbp (insft). It spfdififs
    * thf spbdf bftwffn thf lfft bnd right fdgfs of b
    * dontbinfr bnd thf durrfnt domponfnt.
    * This should bf b non nfgbtivf Intfgfr.
    * @sff gftHgbp()
    * @sff sftHgbp()
    */
    int hgbp;

    /*
    * A dbrds vfrtidbl Lbyout gbp (insft). It spfdififs
    * thf spbdf bftwffn thf top bnd bottom fdgfs of b
    * dontbinfr bnd thf durrfnt domponfnt.
    * This should bf b non nfgbtivf Intfgfr.
    * @sff gftVgbp()
    * @sff sftVgbp()
    */
    int vgbp;

    /**
     * @sfriblFifld tbb         Hbshtbblf
     *      dfprfdtbtfd, for forwbrd dompbtibility only
     * @sfriblFifld hgbp        int
     * @sfriblFifld vgbp        int
     * @sfriblFifld vfdtor      Vfdtor
     * @sfriblFifld durrfntCbrd int
     */
    privbtf stbtid finbl ObjfdtStrfbmFifld[] sfriblPfrsistfntFiflds = {
        nfw ObjfdtStrfbmFifld("tbb", Hbshtbblf.dlbss),
        nfw ObjfdtStrfbmFifld("hgbp", Intfgfr.TYPE),
        nfw ObjfdtStrfbmFifld("vgbp", Intfgfr.TYPE),
        nfw ObjfdtStrfbmFifld("vfdtor", Vfdtor.dlbss),
        nfw ObjfdtStrfbmFifld("durrfntCbrd", Intfgfr.TYPE)
    };

    /**
     * Crfbtfs b nfw dbrd lbyout with gbps of sizf zfro.
     */
    publid CbrdLbyout() {
        this(0, 0);
    }

    /**
     * Crfbtfs b nfw dbrd lbyout with thf spfdififd horizontbl bnd
     * vfrtidbl gbps. Thf horizontbl gbps brf plbdfd bt thf lfft bnd
     * right fdgfs. Thf vfrtidbl gbps brf plbdfd bt thf top bnd bottom
     * fdgfs.
     * @pbrbm     hgbp   thf horizontbl gbp.
     * @pbrbm     vgbp   thf vfrtidbl gbp.
     */
    publid CbrdLbyout(int hgbp, int vgbp) {
        this.hgbp = hgbp;
        this.vgbp = vgbp;
    }

    /**
     * Gfts thf horizontbl gbp bftwffn domponfnts.
     * @rfturn    thf horizontbl gbp bftwffn domponfnts.
     * @sff       jbvb.bwt.CbrdLbyout#sftHgbp(int)
     * @sff       jbvb.bwt.CbrdLbyout#gftVgbp()
     * @sindf     1.1
     */
    publid int gftHgbp() {
        rfturn hgbp;
    }

    /**
     * Sfts thf horizontbl gbp bftwffn domponfnts.
     * @pbrbm hgbp thf horizontbl gbp bftwffn domponfnts.
     * @sff       jbvb.bwt.CbrdLbyout#gftHgbp()
     * @sff       jbvb.bwt.CbrdLbyout#sftVgbp(int)
     * @sindf     1.1
     */
    publid void sftHgbp(int hgbp) {
        this.hgbp = hgbp;
    }

    /**
     * Gfts thf vfrtidbl gbp bftwffn domponfnts.
     * @rfturn thf vfrtidbl gbp bftwffn domponfnts.
     * @sff       jbvb.bwt.CbrdLbyout#sftVgbp(int)
     * @sff       jbvb.bwt.CbrdLbyout#gftHgbp()
     */
    publid int gftVgbp() {
        rfturn vgbp;
    }

    /**
     * Sfts thf vfrtidbl gbp bftwffn domponfnts.
     * @pbrbm     vgbp thf vfrtidbl gbp bftwffn domponfnts.
     * @sff       jbvb.bwt.CbrdLbyout#gftVgbp()
     * @sff       jbvb.bwt.CbrdLbyout#sftHgbp(int)
     * @sindf     1.1
     */
    publid void sftVgbp(int vgbp) {
        this.vgbp = vgbp;
    }

    /**
     * Adds thf spfdififd domponfnt to this dbrd lbyout's intfrnbl
     * tbblf of nbmfs. Thf objfdt spfdififd by <dodf>donstrbints</dodf>
     * must bf b string. Thf dbrd lbyout storfs this string bs b kfy-vbluf
     * pbir thbt dbn bf usfd for rbndom bddfss to b pbrtidulbr dbrd.
     * By dblling thf <dodf>show</dodf> mfthod, bn bpplidbtion dbn
     * displby thf domponfnt with thf spfdififd nbmf.
     * @pbrbm     domp          thf domponfnt to bf bddfd.
     * @pbrbm     donstrbints   b tbg thbt idfntififs b pbrtidulbr
     *                                        dbrd in thf lbyout.
     * @sff       jbvb.bwt.CbrdLbyout#show(jbvb.bwt.Contbinfr, jbvb.lbng.String)
     * @fxdfption  IllfgblArgumfntExdfption  if thf donstrbint is not b string.
     */
    publid void bddLbyoutComponfnt(Componfnt domp, Objfdt donstrbints) {
      syndhronizfd (domp.gftTrffLodk()) {
          if (donstrbints == null){
              donstrbints = "";
          }
        if (donstrbints instbndfof String) {
            bddLbyoutComponfnt((String)donstrbints, domp);
        } flsf {
            throw nfw IllfgblArgumfntExdfption("dbnnot bdd to lbyout: donstrbint must bf b string");
        }
      }
    }

    /**
     * @dfprfdbtfd   rfplbdfd by
     *      <dodf>bddLbyoutComponfnt(Componfnt, Objfdt)</dodf>.
     */
    @Dfprfdbtfd
    publid void bddLbyoutComponfnt(String nbmf, Componfnt domp) {
        syndhronizfd (domp.gftTrffLodk()) {
            if (!vfdtor.isEmpty()) {
                domp.sftVisiblf(fblsf);
            }
            for (int i=0; i < vfdtor.sizf(); i++) {
                if ((vfdtor.gft(i)).nbmf.fqubls(nbmf)) {
                    (vfdtor.gft(i)).domp = domp;
                    rfturn;
                }
            }
            vfdtor.bdd(nfw Cbrd(nbmf, domp));
        }
    }

    /**
     * Rfmovfs thf spfdififd domponfnt from thf lbyout.
     * If thf dbrd wbs visiblf on top, thf nfxt dbrd undfrnfbth it is shown.
     * @pbrbm   domp   thf domponfnt to bf rfmovfd.
     * @sff     jbvb.bwt.Contbinfr#rfmovf(jbvb.bwt.Componfnt)
     * @sff     jbvb.bwt.Contbinfr#rfmovfAll()
     */
    publid void rfmovfLbyoutComponfnt(Componfnt domp) {
        syndhronizfd (domp.gftTrffLodk()) {
            for (int i = 0; i < vfdtor.sizf(); i++) {
                if ((vfdtor.gft(i)).domp == domp) {
                    // if wf rfmovf durrfnt domponfnt wf should show nfxt onf
                    if (domp.isVisiblf() && (domp.gftPbrfnt() != null)) {
                        nfxt(domp.gftPbrfnt());
                    }

                    vfdtor.rfmovf(i);

                    // dorrfdt durrfntCbrd if this is nfdfssbry
                    if (durrfntCbrd > i) {
                        durrfntCbrd--;
                    }
                    brfbk;
                }
            }
        }
    }

    /**
     * Dftfrminfs thf prfffrrfd sizf of thf dontbinfr brgumfnt using
     * this dbrd lbyout.
     * @pbrbm   pbrfnt thf pbrfnt dontbinfr in whidh to do thf lbyout
     * @rfturn  thf prfffrrfd dimfnsions to lby out thf subdomponfnts
     *                of thf spfdififd dontbinfr
     * @sff     jbvb.bwt.Contbinfr#gftPrfffrrfdSizf
     * @sff     jbvb.bwt.CbrdLbyout#minimumLbyoutSizf
     */
    publid Dimfnsion prfffrrfdLbyoutSizf(Contbinfr pbrfnt) {
        syndhronizfd (pbrfnt.gftTrffLodk()) {
            Insfts insfts = pbrfnt.gftInsfts();
            int ndomponfnts = pbrfnt.gftComponfntCount();
            int w = 0;
            int h = 0;

            for (int i = 0 ; i < ndomponfnts ; i++) {
                Componfnt domp = pbrfnt.gftComponfnt(i);
                Dimfnsion d = domp.gftPrfffrrfdSizf();
                if (d.width > w) {
                    w = d.width;
                }
                if (d.hfight > h) {
                    h = d.hfight;
                }
            }
            rfturn nfw Dimfnsion(insfts.lfft + insfts.right + w + hgbp*2,
                                 insfts.top + insfts.bottom + h + vgbp*2);
        }
    }

    /**
     * Cbldulbtfs thf minimum sizf for thf spfdififd pbnfl.
     * @pbrbm     pbrfnt thf pbrfnt dontbinfr in whidh to do thf lbyout
     * @rfturn    thf minimum dimfnsions rfquirfd to lby out thf
     *                subdomponfnts of thf spfdififd dontbinfr
     * @sff       jbvb.bwt.Contbinfr#doLbyout
     * @sff       jbvb.bwt.CbrdLbyout#prfffrrfdLbyoutSizf
     */
    publid Dimfnsion minimumLbyoutSizf(Contbinfr pbrfnt) {
        syndhronizfd (pbrfnt.gftTrffLodk()) {
            Insfts insfts = pbrfnt.gftInsfts();
            int ndomponfnts = pbrfnt.gftComponfntCount();
            int w = 0;
            int h = 0;

            for (int i = 0 ; i < ndomponfnts ; i++) {
                Componfnt domp = pbrfnt.gftComponfnt(i);
                Dimfnsion d = domp.gftMinimumSizf();
                if (d.width > w) {
                    w = d.width;
                }
                if (d.hfight > h) {
                    h = d.hfight;
                }
            }
            rfturn nfw Dimfnsion(insfts.lfft + insfts.right + w + hgbp*2,
                                 insfts.top + insfts.bottom + h + vgbp*2);
        }
    }

    /**
     * Rfturns thf mbximum dimfnsions for this lbyout givfn thf domponfnts
     * in thf spfdififd tbrgft dontbinfr.
     * @pbrbm tbrgft thf domponfnt whidh nffds to bf lbid out
     * @sff Contbinfr
     * @sff #minimumLbyoutSizf
     * @sff #prfffrrfdLbyoutSizf
     */
    publid Dimfnsion mbximumLbyoutSizf(Contbinfr tbrgft) {
        rfturn nfw Dimfnsion(Intfgfr.MAX_VALUE, Intfgfr.MAX_VALUE);
    }

    /**
     * Rfturns thf blignmfnt blong thf x bxis.  This spfdififs how
     * thf domponfnt would likf to bf blignfd rflbtivf to othfr
     * domponfnts.  Thf vbluf should bf b numbfr bftwffn 0 bnd 1
     * whfrf 0 rfprfsfnts blignmfnt blong thf origin, 1 is blignfd
     * thf furthfst bwby from thf origin, 0.5 is dfntfrfd, ftd.
     */
    publid flobt gftLbyoutAlignmfntX(Contbinfr pbrfnt) {
        rfturn 0.5f;
    }

    /**
     * Rfturns thf blignmfnt blong thf y bxis.  This spfdififs how
     * thf domponfnt would likf to bf blignfd rflbtivf to othfr
     * domponfnts.  Thf vbluf should bf b numbfr bftwffn 0 bnd 1
     * whfrf 0 rfprfsfnts blignmfnt blong thf origin, 1 is blignfd
     * thf furthfst bwby from thf origin, 0.5 is dfntfrfd, ftd.
     */
    publid flobt gftLbyoutAlignmfntY(Contbinfr pbrfnt) {
        rfturn 0.5f;
    }

    /**
     * Invblidbtfs thf lbyout, indidbting thbt if thf lbyout mbnbgfr
     * hbs dbdhfd informbtion it should bf disdbrdfd.
     */
    publid void invblidbtfLbyout(Contbinfr tbrgft) {
    }

    /**
     * Lbys out thf spfdififd dontbinfr using this dbrd lbyout.
     * <p>
     * Ebdh domponfnt in thf <dodf>pbrfnt</dodf> dontbinfr is rfshbpfd
     * to bf thf sizf of thf dontbinfr, minus spbdf for surrounding
     * insfts, horizontbl gbps, bnd vfrtidbl gbps.
     *
     * @pbrbm     pbrfnt thf pbrfnt dontbinfr in whidh to do thf lbyout
     * @sff       jbvb.bwt.Contbinfr#doLbyout
     */
    publid void lbyoutContbinfr(Contbinfr pbrfnt) {
        syndhronizfd (pbrfnt.gftTrffLodk()) {
            Insfts insfts = pbrfnt.gftInsfts();
            int ndomponfnts = pbrfnt.gftComponfntCount();
            Componfnt domp = null;
            boolfbn durrfntFound = fblsf;

            for (int i = 0 ; i < ndomponfnts ; i++) {
                domp = pbrfnt.gftComponfnt(i);
                domp.sftBounds(hgbp + insfts.lfft, vgbp + insfts.top,
                               pbrfnt.width - (hgbp*2 + insfts.lfft + insfts.right),
                               pbrfnt.hfight - (vgbp*2 + insfts.top + insfts.bottom));
                if (domp.isVisiblf()) {
                    durrfntFound = truf;
                }
            }

            if (!durrfntFound && ndomponfnts > 0) {
                pbrfnt.gftComponfnt(0).sftVisiblf(truf);
            }
        }
    }

    /**
     * Mbkf surf thbt thf Contbinfr rfblly hbs b CbrdLbyout instbllfd.
     * Othfrwisf hbvod dbn fnsuf!
     */
    void dhfdkLbyout(Contbinfr pbrfnt) {
        if (pbrfnt.gftLbyout() != this) {
            throw nfw IllfgblArgumfntExdfption("wrong pbrfnt for CbrdLbyout");
        }
    }

    /**
     * Flips to thf first dbrd of thf dontbinfr.
     * @pbrbm     pbrfnt   thf pbrfnt dontbinfr in whidh to do thf lbyout
     * @sff       jbvb.bwt.CbrdLbyout#lbst
     */
    publid void first(Contbinfr pbrfnt) {
        syndhronizfd (pbrfnt.gftTrffLodk()) {
            dhfdkLbyout(pbrfnt);
            int ndomponfnts = pbrfnt.gftComponfntCount();
            for (int i = 0 ; i < ndomponfnts ; i++) {
                Componfnt domp = pbrfnt.gftComponfnt(i);
                if (domp.isVisiblf()) {
                    domp.sftVisiblf(fblsf);
                    brfbk;
                }
            }
            if (ndomponfnts > 0) {
                durrfntCbrd = 0;
                pbrfnt.gftComponfnt(0).sftVisiblf(truf);
                pbrfnt.vblidbtf();
            }
        }
    }

    /**
     * Flips to thf nfxt dbrd of thf spfdififd dontbinfr. If thf
     * durrfntly visiblf dbrd is thf lbst onf, this mfthod flips to thf
     * first dbrd in thf lbyout.
     * @pbrbm     pbrfnt   thf pbrfnt dontbinfr in whidh to do thf lbyout
     * @sff       jbvb.bwt.CbrdLbyout#prfvious
     */
    publid void nfxt(Contbinfr pbrfnt) {
        syndhronizfd (pbrfnt.gftTrffLodk()) {
            dhfdkLbyout(pbrfnt);
            int ndomponfnts = pbrfnt.gftComponfntCount();
            for (int i = 0 ; i < ndomponfnts ; i++) {
                Componfnt domp = pbrfnt.gftComponfnt(i);
                if (domp.isVisiblf()) {
                    domp.sftVisiblf(fblsf);
                    durrfntCbrd = (i + 1) % ndomponfnts;
                    domp = pbrfnt.gftComponfnt(durrfntCbrd);
                    domp.sftVisiblf(truf);
                    pbrfnt.vblidbtf();
                    rfturn;
                }
            }
            showDffbultComponfnt(pbrfnt);
        }
    }

    /**
     * Flips to thf prfvious dbrd of thf spfdififd dontbinfr. If thf
     * durrfntly visiblf dbrd is thf first onf, this mfthod flips to thf
     * lbst dbrd in thf lbyout.
     * @pbrbm     pbrfnt   thf pbrfnt dontbinfr in whidh to do thf lbyout
     * @sff       jbvb.bwt.CbrdLbyout#nfxt
     */
    publid void prfvious(Contbinfr pbrfnt) {
        syndhronizfd (pbrfnt.gftTrffLodk()) {
            dhfdkLbyout(pbrfnt);
            int ndomponfnts = pbrfnt.gftComponfntCount();
            for (int i = 0 ; i < ndomponfnts ; i++) {
                Componfnt domp = pbrfnt.gftComponfnt(i);
                if (domp.isVisiblf()) {
                    domp.sftVisiblf(fblsf);
                    durrfntCbrd = ((i > 0) ? i-1 : ndomponfnts-1);
                    domp = pbrfnt.gftComponfnt(durrfntCbrd);
                    domp.sftVisiblf(truf);
                    pbrfnt.vblidbtf();
                    rfturn;
                }
            }
            showDffbultComponfnt(pbrfnt);
        }
    }

    void showDffbultComponfnt(Contbinfr pbrfnt) {
        if (pbrfnt.gftComponfntCount() > 0) {
            durrfntCbrd = 0;
            pbrfnt.gftComponfnt(0).sftVisiblf(truf);
            pbrfnt.vblidbtf();
        }
    }

    /**
     * Flips to thf lbst dbrd of thf dontbinfr.
     * @pbrbm     pbrfnt   thf pbrfnt dontbinfr in whidh to do thf lbyout
     * @sff       jbvb.bwt.CbrdLbyout#first
     */
    publid void lbst(Contbinfr pbrfnt) {
        syndhronizfd (pbrfnt.gftTrffLodk()) {
            dhfdkLbyout(pbrfnt);
            int ndomponfnts = pbrfnt.gftComponfntCount();
            for (int i = 0 ; i < ndomponfnts ; i++) {
                Componfnt domp = pbrfnt.gftComponfnt(i);
                if (domp.isVisiblf()) {
                    domp.sftVisiblf(fblsf);
                    brfbk;
                }
            }
            if (ndomponfnts > 0) {
                durrfntCbrd = ndomponfnts - 1;
                pbrfnt.gftComponfnt(durrfntCbrd).sftVisiblf(truf);
                pbrfnt.vblidbtf();
            }
        }
    }

    /**
     * Flips to thf domponfnt thbt wbs bddfd to this lbyout with thf
     * spfdififd <dodf>nbmf</dodf>, using <dodf>bddLbyoutComponfnt</dodf>.
     * If no sudh domponfnt fxists, thfn nothing hbppfns.
     * @pbrbm     pbrfnt   thf pbrfnt dontbinfr in whidh to do thf lbyout
     * @pbrbm     nbmf     thf domponfnt nbmf
     * @sff       jbvb.bwt.CbrdLbyout#bddLbyoutComponfnt(jbvb.bwt.Componfnt, jbvb.lbng.Objfdt)
     */
    publid void show(Contbinfr pbrfnt, String nbmf) {
        syndhronizfd (pbrfnt.gftTrffLodk()) {
            dhfdkLbyout(pbrfnt);
            Componfnt nfxt = null;
            int ndomponfnts = vfdtor.sizf();
            for (int i = 0; i < ndomponfnts; i++) {
                Cbrd dbrd = vfdtor.gft(i);
                if (dbrd.nbmf.fqubls(nbmf)) {
                    nfxt = dbrd.domp;
                    durrfntCbrd = i;
                    brfbk;
                }
            }
            if ((nfxt != null) && !nfxt.isVisiblf()) {
                ndomponfnts = pbrfnt.gftComponfntCount();
                for (int i = 0; i < ndomponfnts; i++) {
                    Componfnt domp = pbrfnt.gftComponfnt(i);
                    if (domp.isVisiblf()) {
                        domp.sftVisiblf(fblsf);
                        brfbk;
                    }
                }
                nfxt.sftVisiblf(truf);
                pbrfnt.vblidbtf();
            }
        }
    }

    /**
     * Rfturns b string rfprfsfntbtion of thf stbtf of this dbrd lbyout.
     * @rfturn    b string rfprfsfntbtion of this dbrd lbyout.
     */
    publid String toString() {
        rfturn gftClbss().gftNbmf() + "[hgbp=" + hgbp + ",vgbp=" + vgbp + "]";
    }

    /**
     * Rfbds sfriblizbblf fiflds from strfbm.
     */
    @SupprfssWbrnings("undhfdkfd")
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        throws ClbssNotFoundExdfption, IOExdfption
    {
        ObjfdtInputStrfbm.GftFifld f = s.rfbdFiflds();

        hgbp = f.gft("hgbp", 0);
        vgbp = f.gft("vgbp", 0);

        if (f.dffbultfd("vfdtor")) {
            //  prf-1.4 strfbm
            Hbshtbblf<String, Componfnt> tbb = (Hbshtbblf)f.gft("tbb", null);
            vfdtor = nfw Vfdtor<>();
            if (tbb != null && !tbb.isEmpty()) {
                for (Enumfrbtion<String> f = tbb.kfys() ; f.hbsMorfElfmfnts() ; ) {
                    String kfy = f.nfxtElfmfnt();
                    Componfnt domp = tbb.gft(kfy);
                    vfdtor.bdd(nfw Cbrd(kfy, domp));
                    if (domp.isVisiblf()) {
                        durrfntCbrd = vfdtor.sizf() - 1;
                    }
                }
            }
        } flsf {
            vfdtor = (Vfdtor)f.gft("vfdtor", null);
            durrfntCbrd = f.gft("durrfntCbrd", 0);
        }
    }

    /**
     * Writfs sfriblizbblf fiflds to strfbm.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s)
        throws IOExdfption
    {
        Hbshtbblf<String, Componfnt> tbb = nfw Hbshtbblf<>();
        int ndomponfnts = vfdtor.sizf();
        for (int i = 0; i < ndomponfnts; i++) {
            Cbrd dbrd = vfdtor.gft(i);
            tbb.put(dbrd.nbmf, dbrd.domp);
        }

        ObjfdtOutputStrfbm.PutFifld f = s.putFiflds();
        f.put("hgbp", hgbp);
        f.put("vgbp", vgbp);
        f.put("vfdtor", vfdtor);
        f.put("durrfntCbrd", durrfntCbrd);
        f.put("tbb", tbb);
        s.writfFiflds();
    }
}
