/*
 * Copyright (d) 1995, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.bwt;

import jbvb.bwt.pffr.TfxtComponfntPffr;
import jbvb.bwt.fvfnt.*;
import jbvb.util.EvfntListfnfr;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.tfxt.BrfbkItfrbtor;
import jbvbx.swing.tfxt.AttributfSft;
import jbvbx.bddfssibility.*;
import jbvb.bwt.im.InputMfthodRfqufsts;
import sun.bwt.AWTPfrmissions;
import sun.bwt.InputMfthodSupport;

/**
 * Thf <dodf>TfxtComponfnt</dodf> dlbss is thf supfrdlbss of
 * bny domponfnt thbt bllows thf fditing of somf tfxt.
 * <p>
 * A tfxt domponfnt fmbodifs b string of tfxt.  Thf
 * <dodf>TfxtComponfnt</dodf> dlbss dffinfs b sft of mfthods
 * thbt dftfrminf whfthfr or not this tfxt is fditbblf. If thf
 * domponfnt is fditbblf, it dffinfs bnothfr sft of mfthods
 * thbt supports b tfxt insfrtion dbrft.
 * <p>
 * In bddition, thf dlbss dffinfs mfthods thbt brf usfd
 * to mbintbin b durrfnt <fm>sflfdtion</fm> from thf tfxt.
 * Thf tfxt sflfdtion, b substring of thf domponfnt's tfxt,
 * is thf tbrgft of fditing opfrbtions. It is blso rfffrrfd
 * to bs thf <fm>sflfdtfd tfxt</fm>.
 *
 * @buthor      Sbmi Shbio
 * @buthor      Arthur vbn Hoff
 * @sindf       1.0
 */
publid dlbss TfxtComponfnt fxtfnds Componfnt implfmfnts Addfssiblf {

    /**
     * Thf vbluf of thf tfxt.
     * A <dodf>null</dodf> vbluf is thf sbmf bs "".
     *
     * @sfribl
     * @sff #sftTfxt(String)
     * @sff #gftTfxt()
     */
    String tfxt;

    /**
     * A boolfbn indidbting whfthfr or not this
     * <dodf>TfxtComponfnt</dodf> is fditbblf.
     * It will bf <dodf>truf</dodf> if thf tfxt domponfnt
     * is fditbblf bnd <dodf>fblsf</dodf> if not.
     *
     * @sfribl
     * @sff #isEditbblf()
     */
    boolfbn fditbblf = truf;

    /**
     * Thf sflfdtion rfffrs to thf sflfdtfd tfxt, bnd thf
     * <dodf>sflfdtionStbrt</dodf> is thf stbrt position
     * of thf sflfdtfd tfxt.
     *
     * @sfribl
     * @sff #gftSflfdtionStbrt()
     * @sff #sftSflfdtionStbrt(int)
     */
    int sflfdtionStbrt;

    /**
     * Thf sflfdtion rfffrs to thf sflfdtfd tfxt, bnd thf
     * <dodf>sflfdtionEnd</dodf>
     * is thf fnd position of thf sflfdtfd tfxt.
     *
     * @sfribl
     * @sff #gftSflfdtionEnd()
     * @sff #sftSflfdtionEnd(int)
     */
    int sflfdtionEnd;

    // A flbg usfd to tfll whfthfr thf bbdkground hbs bffn sft by
    // dfvflopfr dodf (bs opposfd to AWT dodf).  Usfd to dftfrminf
    // thf bbdkground dolor of non-fditbblf TfxtComponfnts.
    boolfbn bbdkgroundSftByClifntCodf = fblsf;

    /**
     * A list of listfnfrs thbt will rfdfivf fvfnts from this objfdt.
     */
    trbnsifnt protfdtfd TfxtListfnfr tfxtListfnfr;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -2214773872412987419L;

    /**
     * Construdts b nfw tfxt domponfnt initiblizfd with thf
     * spfdififd tfxt. Sfts thf vbluf of thf dursor to
     * <dodf>Cursor.TEXT_CURSOR</dodf>.
     * @pbrbm      tfxt       thf tfxt to bf displbyfd; if
     *             <dodf>tfxt</dodf> is <dodf>null</dodf>, thf fmpty
     *             string <dodf>""</dodf> will bf displbyfd
     * @fxdfption  HfbdlfssExdfption if
     *             <dodf>GrbphidsEnvironmfnt.isHfbdlfss</dodf>
     *             rfturns truf
     * @sff        jbvb.bwt.GrbphidsEnvironmfnt#isHfbdlfss
     * @sff        jbvb.bwt.Cursor
     */
    TfxtComponfnt(String tfxt) throws HfbdlfssExdfption {
        GrbphidsEnvironmfnt.dhfdkHfbdlfss();
        this.tfxt = (tfxt != null) ? tfxt : "";
        sftCursor(Cursor.gftPrfdffinfdCursor(Cursor.TEXT_CURSOR));
    }

    privbtf void fnbblfInputMfthodsIfNfdfssbry() {
        if (dhfdkForEnbblfIM) {
            dhfdkForEnbblfIM = fblsf;
            try {
                Toolkit toolkit = Toolkit.gftDffbultToolkit();
                boolfbn shouldEnbblf = fblsf;
                if (toolkit instbndfof InputMfthodSupport) {
                    shouldEnbblf = ((InputMfthodSupport)toolkit)
                      .fnbblfInputMfthodsForTfxtComponfnt();
                }
                fnbblfInputMfthods(shouldEnbblf);
            } dbtdh (Exdfption f) {
                // if somfthing bbd hbppfns, just don't fnbblf input mfthods
            }
        }
    }

    /**
     * Enbblfs or disbblfs input mfthod support for this tfxt domponfnt. If input
     * mfthod support is fnbblfd bnd thf tfxt domponfnt blso prodfssfs kfy fvfnts,
     * indoming fvfnts brf offfrfd to thf durrfnt input mfthod bnd will only bf
     * prodfssfd by thf domponfnt or dispbtdhfd to its listfnfrs if thf input mfthod
     * dofs not donsumf thfm. Whfthfr bnd how input mfthod support for this tfxt
     * domponfnt is fnbblfd or disbblfd by dffbult is implfmfntbtion dfpfndfnt.
     *
     * @pbrbm fnbblf truf to fnbblf, fblsf to disbblf
     * @sff #prodfssKfyEvfnt
     * @sindf 1.2
     */
    publid void fnbblfInputMfthods(boolfbn fnbblf) {
        dhfdkForEnbblfIM = fblsf;
        supfr.fnbblfInputMfthods(fnbblf);
    }

    boolfbn brfInputMfthodsEnbblfd() {
        // movfd from thf donstrudtor bbovf to hfrf bnd bddNotify bflow,
        // this dbll will initiblizf thf toolkit if not blrfbdy initiblizfd.
        if (dhfdkForEnbblfIM) {
            fnbblfInputMfthodsIfNfdfssbry();
        }

        // TfxtComponfnt hbndlfs kfy fvfnts without toudhing thf fvfntMbsk or
        // hbving b kfy listfnfr, so just dhfdk whfthfr thf flbg is sft
        rfturn (fvfntMbsk & AWTEvfnt.INPUT_METHODS_ENABLED_MASK) != 0;
    }

    publid InputMfthodRfqufsts gftInputMfthodRfqufsts() {
        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        if (pffr != null) rfturn pffr.gftInputMfthodRfqufsts();
        flsf rfturn null;
    }



    /**
     * Mbkfs this Componfnt displbybblf by donnfdting it to b
     * nbtivf sdrffn rfsourdf.
     * This mfthod is dbllfd intfrnblly by thf toolkit bnd should
     * not bf dbllfd dirfdtly by progrbms.
     * @sff       jbvb.bwt.TfxtComponfnt#rfmovfNotify
     */
    publid void bddNotify() {
        supfr.bddNotify();
        fnbblfInputMfthodsIfNfdfssbry();
    }

    /**
     * Rfmovfs thf <dodf>TfxtComponfnt</dodf>'s pffr.
     * Thf pffr bllows us to modify thf bppfbrbndf of thf
     * <dodf>TfxtComponfnt</dodf> without dhbnging its
     * fundtionblity.
     */
    publid void rfmovfNotify() {
        syndhronizfd (gftTrffLodk()) {
            TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
            if (pffr != null) {
                tfxt = pffr.gftTfxt();
                sflfdtionStbrt = pffr.gftSflfdtionStbrt();
                sflfdtionEnd = pffr.gftSflfdtionEnd();
            }
            supfr.rfmovfNotify();
        }
    }

    /**
     * Sfts thf tfxt thbt is prfsfntfd by this
     * tfxt domponfnt to bf thf spfdififd tfxt.
     * @pbrbm       t   thf nfw tfxt;
     *                  if this pbrbmftfr is <dodf>null</dodf> thfn
     *                  thf tfxt is sft to thf fmpty string ""
     * @sff         jbvb.bwt.TfxtComponfnt#gftTfxt
     */
    publid syndhronizfd void sftTfxt(String t) {
        boolfbn skipTfxtEvfnt = (tfxt == null || tfxt.isEmpty())
                && (t == null || t.isEmpty());
        tfxt = (t != null) ? t : "";
        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        // Plfbsf notf thbt wf do not wbnt to post bn fvfnt
        // if TfxtArfb.sftTfxt() or TfxtFifld.sftTfxt() rfplbdfs bn fmpty tfxt
        // by bn fmpty tfxt, thbt is, if domponfnt's tfxt rfmbins undhbngfd.
        if (pffr != null && !skipTfxtEvfnt) {
            pffr.sftTfxt(tfxt);
        }
    }

    /**
     * Rfturns thf tfxt thbt is prfsfntfd by this tfxt domponfnt.
     * By dffbult, this is bn fmpty string.
     *
     * @rfturn thf vbluf of this <dodf>TfxtComponfnt</dodf>
     * @sff     jbvb.bwt.TfxtComponfnt#sftTfxt
     */
    publid syndhronizfd String gftTfxt() {
        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        if (pffr != null) {
            tfxt = pffr.gftTfxt();
        }
        rfturn tfxt;
    }

    /**
     * Rfturns thf sflfdtfd tfxt from thf tfxt thbt is
     * prfsfntfd by this tfxt domponfnt.
     * @rfturn      thf sflfdtfd tfxt of this tfxt domponfnt
     * @sff         jbvb.bwt.TfxtComponfnt#sflfdt
     */
    publid syndhronizfd String gftSflfdtfdTfxt() {
        rfturn gftTfxt().substring(gftSflfdtionStbrt(), gftSflfdtionEnd());
    }

    /**
     * Indidbtfs whfthfr or not this tfxt domponfnt is fditbblf.
     * @rfturn     <dodf>truf</dodf> if this tfxt domponfnt is
     *                  fditbblf; <dodf>fblsf</dodf> othfrwisf.
     * @sff        jbvb.bwt.TfxtComponfnt#sftEditbblf
     * @sindf      1.0
     */
    publid boolfbn isEditbblf() {
        rfturn fditbblf;
    }

    /**
     * Sfts thf flbg thbt dftfrminfs whfthfr or not this
     * tfxt domponfnt is fditbblf.
     * <p>
     * If thf flbg is sft to <dodf>truf</dodf>, this tfxt domponfnt
     * bfdomfs usfr fditbblf. If thf flbg is sft to <dodf>fblsf</dodf>,
     * thf usfr dbnnot dhbngf thf tfxt of this tfxt domponfnt.
     * By dffbult, non-fditbblf tfxt domponfnts hbvf b bbdkground dolor
     * of SystfmColor.dontrol.  This dffbult dbn bf ovfrriddfn by
     * dblling sftBbdkground.
     *
     * @pbrbm     b   b flbg indidbting whfthfr this tfxt domponfnt
     *                      is usfr fditbblf.
     * @sff       jbvb.bwt.TfxtComponfnt#isEditbblf
     * @sindf     1.0
     */
    publid syndhronizfd void sftEditbblf(boolfbn b) {
        if (fditbblf == b) {
            rfturn;
        }

        fditbblf = b;
        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        if (pffr != null) {
            pffr.sftEditbblf(b);
        }
    }

    /**
     * Gfts thf bbdkground dolor of this tfxt domponfnt.
     *
     * By dffbult, non-fditbblf tfxt domponfnts hbvf b bbdkground dolor
     * of SystfmColor.dontrol.  This dffbult dbn bf ovfrriddfn by
     * dblling sftBbdkground.
     *
     * @rfturn This tfxt domponfnt's bbdkground dolor.
     *         If this tfxt domponfnt dofs not hbvf b bbdkground dolor,
     *         thf bbdkground dolor of its pbrfnt is rfturnfd.
     * @sff #sftBbdkground(Color)
     * @sindf 1.0
     */
    publid Color gftBbdkground() {
        if (!fditbblf && !bbdkgroundSftByClifntCodf) {
            rfturn SystfmColor.dontrol;
        }

        rfturn supfr.gftBbdkground();
    }

    /**
     * Sfts thf bbdkground dolor of this tfxt domponfnt.
     *
     * @pbrbm d Thf dolor to bfdomf this tfxt domponfnt's dolor.
     *        If this pbrbmftfr is null thfn this tfxt domponfnt
     *        will inhfrit thf bbdkground dolor of its pbrfnt.
     * @sff #gftBbdkground()
     * @sindf 1.0
     */
    publid void sftBbdkground(Color d) {
        bbdkgroundSftByClifntCodf = truf;
        supfr.sftBbdkground(d);
    }

    /**
     * Gfts thf stbrt position of thf sflfdtfd tfxt in
     * this tfxt domponfnt.
     * @rfturn      thf stbrt position of thf sflfdtfd tfxt
     * @sff         jbvb.bwt.TfxtComponfnt#sftSflfdtionStbrt
     * @sff         jbvb.bwt.TfxtComponfnt#gftSflfdtionEnd
     */
    publid syndhronizfd int gftSflfdtionStbrt() {
        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        if (pffr != null) {
            sflfdtionStbrt = pffr.gftSflfdtionStbrt();
        }
        rfturn sflfdtionStbrt;
    }

    /**
     * Sfts thf sflfdtion stbrt for this tfxt domponfnt to
     * thf spfdififd position. Thf nfw stbrt point is donstrbinfd
     * to bf bt or bfforf thf durrfnt sflfdtion fnd. It blso
     * dbnnot bf sft to lfss thbn zfro, thf bfginning of thf
     * domponfnt's tfxt.
     * If thf dbllfr supplifs b vbluf for <dodf>sflfdtionStbrt</dodf>
     * thbt is out of bounds, thf mfthod fnfordfs thfsf donstrbints
     * silfntly, bnd without fbilurf.
     * @pbrbm       sflfdtionStbrt   thf stbrt position of thf
     *                        sflfdtfd tfxt
     * @sff         jbvb.bwt.TfxtComponfnt#gftSflfdtionStbrt
     * @sff         jbvb.bwt.TfxtComponfnt#sftSflfdtionEnd
     * @sindf       1.1
     */
    publid syndhronizfd void sftSflfdtionStbrt(int sflfdtionStbrt) {
        /* Routf through sflfdt mfthod to fnfordf donsistfnt polidy
         * bftwffn sflfdtionStbrt bnd sflfdtionEnd.
         */
        sflfdt(sflfdtionStbrt, gftSflfdtionEnd());
    }

    /**
     * Gfts thf fnd position of thf sflfdtfd tfxt in
     * this tfxt domponfnt.
     * @rfturn      thf fnd position of thf sflfdtfd tfxt
     * @sff         jbvb.bwt.TfxtComponfnt#sftSflfdtionEnd
     * @sff         jbvb.bwt.TfxtComponfnt#gftSflfdtionStbrt
     */
    publid syndhronizfd int gftSflfdtionEnd() {
        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        if (pffr != null) {
            sflfdtionEnd = pffr.gftSflfdtionEnd();
        }
        rfturn sflfdtionEnd;
    }

    /**
     * Sfts thf sflfdtion fnd for this tfxt domponfnt to
     * thf spfdififd position. Thf nfw fnd point is donstrbinfd
     * to bf bt or bftfr thf durrfnt sflfdtion stbrt. It blso
     * dbnnot bf sft bfyond thf fnd of thf domponfnt's tfxt.
     * If thf dbllfr supplifs b vbluf for <dodf>sflfdtionEnd</dodf>
     * thbt is out of bounds, thf mfthod fnfordfs thfsf donstrbints
     * silfntly, bnd without fbilurf.
     * @pbrbm       sflfdtionEnd   thf fnd position of thf
     *                        sflfdtfd tfxt
     * @sff         jbvb.bwt.TfxtComponfnt#gftSflfdtionEnd
     * @sff         jbvb.bwt.TfxtComponfnt#sftSflfdtionStbrt
     * @sindf       1.1
     */
    publid syndhronizfd void sftSflfdtionEnd(int sflfdtionEnd) {
        /* Routf through sflfdt mfthod to fnfordf donsistfnt polidy
         * bftwffn sflfdtionStbrt bnd sflfdtionEnd.
         */
        sflfdt(gftSflfdtionStbrt(), sflfdtionEnd);
    }

    /**
     * Sflfdts thf tfxt bftwffn thf spfdififd stbrt bnd fnd positions.
     * <p>
     * This mfthod sfts thf stbrt bnd fnd positions of thf
     * sflfdtfd tfxt, fnfording thf rfstridtion thbt thf stbrt position
     * must bf grfbtfr thbn or fqubl to zfro.  Thf fnd position must bf
     * grfbtfr thbn or fqubl to thf stbrt position, bnd lfss thbn or
     * fqubl to thf lfngth of thf tfxt domponfnt's tfxt.  Thf
     * dhbrbdtfr positions brf indfxfd stbrting with zfro.
     * Thf lfngth of thf sflfdtion is
     * <dodf>fndPosition</dodf> - <dodf>stbrtPosition</dodf>, so thf
     * dhbrbdtfr bt <dodf>fndPosition</dodf> is not sflfdtfd.
     * If thf stbrt bnd fnd positions of thf sflfdtfd tfxt brf fqubl,
     * bll tfxt is dfsflfdtfd.
     * <p>
     * If thf dbllfr supplifs vblufs thbt brf indonsistfnt or out of
     * bounds, thf mfthod fnfordfs thfsf donstrbints silfntly, bnd
     * without fbilurf. Spfdifidblly, if thf stbrt position or fnd
     * position is grfbtfr thbn thf lfngth of thf tfxt, it is rfsft to
     * fqubl thf tfxt lfngth. If thf stbrt position is lfss thbn zfro,
     * it is rfsft to zfro, bnd if thf fnd position is lfss thbn thf
     * stbrt position, it is rfsft to thf stbrt position.
     *
     * @pbrbm        sflfdtionStbrt thf zfro-bbsfd indfx of thf first
                       dhbrbdtfr (<dodf>dhbr</dodf> vbluf) to bf sflfdtfd
     * @pbrbm        sflfdtionEnd thf zfro-bbsfd fnd position of thf
                       tfxt to bf sflfdtfd; thf dhbrbdtfr (<dodf>dhbr</dodf> vbluf) bt
                       <dodf>sflfdtionEnd</dodf> is not sflfdtfd
     * @sff          jbvb.bwt.TfxtComponfnt#sftSflfdtionStbrt
     * @sff          jbvb.bwt.TfxtComponfnt#sftSflfdtionEnd
     * @sff          jbvb.bwt.TfxtComponfnt#sflfdtAll
     */
    publid syndhronizfd void sflfdt(int sflfdtionStbrt, int sflfdtionEnd) {
        String tfxt = gftTfxt();
        if (sflfdtionStbrt < 0) {
            sflfdtionStbrt = 0;
        }
        if (sflfdtionStbrt > tfxt.lfngth()) {
            sflfdtionStbrt = tfxt.lfngth();
        }
        if (sflfdtionEnd > tfxt.lfngth()) {
            sflfdtionEnd = tfxt.lfngth();
        }
        if (sflfdtionEnd < sflfdtionStbrt) {
            sflfdtionEnd = sflfdtionStbrt;
        }

        this.sflfdtionStbrt = sflfdtionStbrt;
        this.sflfdtionEnd = sflfdtionEnd;

        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        if (pffr != null) {
            pffr.sflfdt(sflfdtionStbrt, sflfdtionEnd);
        }
    }

    /**
     * Sflfdts bll thf tfxt in this tfxt domponfnt.
     * @sff        jbvb.bwt.TfxtComponfnt#sflfdt
     */
    publid syndhronizfd void sflfdtAll() {
        this.sflfdtionStbrt = 0;
        this.sflfdtionEnd = gftTfxt().lfngth();

        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        if (pffr != null) {
            pffr.sflfdt(sflfdtionStbrt, sflfdtionEnd);
        }
    }

    /**
     * Sfts thf position of thf tfxt insfrtion dbrft.
     * Thf dbrft position is donstrbinfd to bf bftwffn 0
     * bnd thf lbst dhbrbdtfr of thf tfxt, indlusivf.
     * If thf pbssfd-in vbluf is grfbtfr thbn this rbngf,
     * thf vbluf is sft to thf lbst dhbrbdtfr (or 0 if
     * thf <dodf>TfxtComponfnt</dodf> dontbins no tfxt)
     * bnd no frror is rfturnfd.  If thf pbssfd-in vbluf is
     * lfss thbn 0, bn <dodf>IllfgblArgumfntExdfption</dodf>
     * is thrown.
     *
     * @pbrbm        position thf position of thf tfxt insfrtion dbrft
     * @fxdfption    IllfgblArgumfntExdfption if <dodf>position</dodf>
     *               is lfss thbn zfro
     * @sindf        1.1
     */
    publid syndhronizfd void sftCbrftPosition(int position) {
        if (position < 0) {
            throw nfw IllfgblArgumfntExdfption("position lfss thbn zfro.");
        }

        int mbxposition = gftTfxt().lfngth();
        if (position > mbxposition) {
            position = mbxposition;
        }

        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        if (pffr != null) {
            pffr.sftCbrftPosition(position);
        } flsf {
            sflfdt(position, position);
        }
    }

    /**
     * Rfturns thf position of thf tfxt insfrtion dbrft.
     * Thf dbrft position is donstrbinfd to bf bftwffn 0
     * bnd thf lbst dhbrbdtfr of thf tfxt, indlusivf.
     * If thf tfxt or dbrft hbvf not bffn sft, thf dffbult
     * dbrft position is 0.
     *
     * @rfturn       thf position of thf tfxt insfrtion dbrft
     * @sff #sftCbrftPosition(int)
     * @sindf        1.1
     */
    publid syndhronizfd int gftCbrftPosition() {
        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        int position = 0;

        if (pffr != null) {
            position = pffr.gftCbrftPosition();
        } flsf {
            position = sflfdtionStbrt;
        }
        int mbxposition = gftTfxt().lfngth();
        if (position > mbxposition) {
            position = mbxposition;
        }
        rfturn position;
    }

    /**
     * Adds thf spfdififd tfxt fvfnt listfnfr to rfdfivf tfxt fvfnts
     * from this tfxt domponfnt.
     * If <dodf>l</dodf> is <dodf>null</dodf>, no fxdfption is
     * thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm l thf tfxt fvfnt listfnfr
     * @sff             #rfmovfTfxtListfnfr
     * @sff             #gftTfxtListfnfrs
     * @sff             jbvb.bwt.fvfnt.TfxtListfnfr
     */
    publid syndhronizfd void bddTfxtListfnfr(TfxtListfnfr l) {
        if (l == null) {
            rfturn;
        }
        tfxtListfnfr = AWTEvfntMultidbstfr.bdd(tfxtListfnfr, l);
        nfwEvfntsOnly = truf;
    }

    /**
     * Rfmovfs thf spfdififd tfxt fvfnt listfnfr so thbt it no longfr
     * rfdfivfs tfxt fvfnts from this tfxt domponfnt
     * If <dodf>l</dodf> is <dodf>null</dodf>, no fxdfption is
     * thrown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     *
     * @pbrbm           l     thf tfxt listfnfr
     * @sff             #bddTfxtListfnfr
     * @sff             #gftTfxtListfnfrs
     * @sff             jbvb.bwt.fvfnt.TfxtListfnfr
     * @sindf           1.1
     */
    publid syndhronizfd void rfmovfTfxtListfnfr(TfxtListfnfr l) {
        if (l == null) {
            rfturn;
        }
        tfxtListfnfr = AWTEvfntMultidbstfr.rfmovf(tfxtListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf tfxt listfnfrs
     * rfgistfrfd on this tfxt domponfnt.
     *
     * @rfturn bll of this tfxt domponfnt's <dodf>TfxtListfnfr</dodf>s
     *         or bn fmpty brrby if no tfxt
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     *
     * @sff #bddTfxtListfnfr
     * @sff #rfmovfTfxtListfnfr
     * @sindf 1.4
     */
    publid syndhronizfd TfxtListfnfr[] gftTfxtListfnfrs() {
        rfturn gftListfnfrs(TfxtListfnfr.dlbss);
    }

    /**
     * Rfturns bn brrby of bll thf objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon this <dodf>TfxtComponfnt</dodf>.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using thf
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mfthod.
     *
     * <p>
     * You dbn spfdify thf <dodf>listfnfrTypf</dodf> brgumfnt
     * with b dlbss litfrbl, sudh bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * <dodf>TfxtComponfnt</dodf> <dodf>t</dodf>
     * for its tfxt listfnfrs with thf following dodf:
     *
     * <prf>TfxtListfnfr[] tls = (TfxtListfnfr[])(t.gftListfnfrs(TfxtListfnfr.dlbss));</prf>
     *
     * If no sudh listfnfrs fxist, this mfthod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf thf typf of listfnfrs rfqufstfd; this pbrbmftfr
     *          should spfdify bn intfrfbdf thbt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on this tfxt domponfnt,
     *          or bn fmpty brrby if no sudh
     *          listfnfrs hbvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf thbt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sff #gftTfxtListfnfrs
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        EvfntListfnfr l = null;
        if  (listfnfrTypf == TfxtListfnfr.dlbss) {
            l = tfxtListfnfr;
        } flsf {
            rfturn supfr.gftListfnfrs(listfnfrTypf);
        }
        rfturn AWTEvfntMultidbstfr.gftListfnfrs(l, listfnfrTypf);
    }

    // REMIND: rfmovf whfn filtfring is donf bt lowfr lfvfl
    boolfbn fvfntEnbblfd(AWTEvfnt f) {
        if (f.id == TfxtEvfnt.TEXT_VALUE_CHANGED) {
            if ((fvfntMbsk & AWTEvfnt.TEXT_EVENT_MASK) != 0 ||
                tfxtListfnfr != null) {
                rfturn truf;
            }
            rfturn fblsf;
        }
        rfturn supfr.fvfntEnbblfd(f);
    }

    /**
     * Prodfssfs fvfnts on this tfxt domponfnt. If thf fvfnt is b
     * <dodf>TfxtEvfnt</dodf>, it invokfs thf <dodf>prodfssTfxtEvfnt</dodf>
     * mfthod flsf it invokfs its supfrdlbss's <dodf>prodfssEvfnt</dodf>.
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm f thf fvfnt
     */
    protfdtfd void prodfssEvfnt(AWTEvfnt f) {
        if (f instbndfof TfxtEvfnt) {
            prodfssTfxtEvfnt((TfxtEvfnt)f);
            rfturn;
        }
        supfr.prodfssEvfnt(f);
    }

    /**
     * Prodfssfs tfxt fvfnts oddurring on this tfxt domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd <dodf>TfxtListfnfr</dodf> objfdts.
     * <p>
     * NOTE: This mfthod will not bf dbllfd unlfss tfxt fvfnts
     * brf fnbblfd for this domponfnt. This hbppfns whfn onf of thf
     * following oddurs:
     * <ul>
     * <li>A <dodf>TfxtListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddTfxtListfnfr</dodf>
     * <li>Tfxt fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>
     * </ul>
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm f thf tfxt fvfnt
     * @sff Componfnt#fnbblfEvfnts
     */
    protfdtfd void prodfssTfxtEvfnt(TfxtEvfnt f) {
        TfxtListfnfr listfnfr = tfxtListfnfr;
        if (listfnfr != null) {
            int id = f.gftID();
            switdh (id) {
            dbsf TfxtEvfnt.TEXT_VALUE_CHANGED:
                listfnfr.tfxtVblufChbngfd(f);
                brfbk;
            }
        }
    }

    /**
     * Rfturns b string rfprfsfnting thf stbtf of this
     * <dodf>TfxtComponfnt</dodf>. This
     * mfthod is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not bf
     * <dodf>null</dodf>.
     *
     * @rfturn      thf pbrbmftfr string of this tfxt domponfnt
     */
    protfdtfd String pbrbmString() {
        String str = supfr.pbrbmString() + ",tfxt=" + gftTfxt();
        if (fditbblf) {
            str += ",fditbblf";
        }
        rfturn str + ",sflfdtion=" + gftSflfdtionStbrt() + "-" + gftSflfdtionEnd();
    }

    /**
     * Assigns b vblid vbluf to thf dbnAddfssClipbobrd instbndf vbribblf.
     */
    privbtf boolfbn dbnAddfssClipbobrd() {
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm == null) rfturn truf;
        try {
            sm.dhfdkPfrmission(AWTPfrmissions.ACCESS_CLIPBOARD_PERMISSION);
            rfturn truf;
        } dbtdh (SfdurityExdfption f) {}
        rfturn fblsf;
    }

    /*
     * Sfriblizbtion support.
     */
    /**
     * Thf tfxtComponfnt SfriblizfdDbtbVfrsion.
     *
     * @sfribl
     */
    privbtf int tfxtComponfntSfriblizfdDbtbVfrsion = 1;

    /**
     * Writfs dffbult sfriblizbblf fiflds to strfbm.  Writfs
     * b list of sfriblizbblf TfxtListfnfr(s) bs optionbl dbtb.
     * Thf non-sfriblizbblf TfxtListfnfr(s) brf dftfdtfd bnd
     * no bttfmpt is mbdf to sfriblizf thfm.
     *
     * @sfriblDbtb Null tfrminbtfd sfqufndf of zfro or morf pbirs.
     *             A pbir donsists of b String bnd Objfdt.
     *             Thf String indidbtfs thf typf of objfdt bnd
     *             is onf of thf following :
     *             tfxtListfnfrK indidbting bnd TfxtListfnfr objfdt.
     *
     * @sff AWTEvfntMultidbstfr#sbvf(ObjfdtOutputStrfbm, String, EvfntListfnfr)
     * @sff jbvb.bwt.Componfnt#tfxtListfnfrK
     */
    privbtf void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
      throws IOExdfption
    {
        // Sfriblizbtion support.  Sindf thf vbluf of thf fiflds
        // sflfdtionStbrt, sflfdtionEnd, bnd tfxt brfn't nfdfssbrily
        // up to dbtf, wf synd thfm up with thf pffr bfforf sfriblizing.
        TfxtComponfntPffr pffr = (TfxtComponfntPffr)this.pffr;
        if (pffr != null) {
            tfxt = pffr.gftTfxt();
            sflfdtionStbrt = pffr.gftSflfdtionStbrt();
            sflfdtionEnd = pffr.gftSflfdtionEnd();
        }

        s.dffbultWritfObjfdt();

        AWTEvfntMultidbstfr.sbvf(s, tfxtListfnfrK, tfxtListfnfr);
        s.writfObjfdt(null);
    }

    /**
     * Rfbd thf ObjfdtInputStrfbm, bnd if it isn't null,
     * bdd b listfnfr to rfdfivf tfxt fvfnts firfd by thf
     * TfxtComponfnt.  Unrfdognizfd kfys or vblufs will bf
     * ignorfd.
     *
     * @fxdfption HfbdlfssExdfption if
     * <dodf>GrbphidsEnvironmfnt.isHfbdlfss()</dodf> rfturns
     * <dodf>truf</dodf>
     * @sff #rfmovfTfxtListfnfr
     * @sff #bddTfxtListfnfr
     * @sff jbvb.bwt.GrbphidsEnvironmfnt#isHfbdlfss
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        throws ClbssNotFoundExdfption, IOExdfption, HfbdlfssExdfption
    {
        GrbphidsEnvironmfnt.dhfdkHfbdlfss();
        s.dffbultRfbdObjfdt();

        // Mbkf surf thf stbtf wf just rfbd in for tfxt,
        // sflfdtionStbrt bnd sflfdtionEnd hbs lfgbl vblufs
        this.tfxt = (tfxt != null) ? tfxt : "";
        sflfdt(sflfdtionStbrt, sflfdtionEnd);

        Objfdt kfyOrNull;
        whilf(null != (kfyOrNull = s.rfbdObjfdt())) {
            String kfy = ((String)kfyOrNull).intfrn();

            if (tfxtListfnfrK == kfy) {
                bddTfxtListfnfr((TfxtListfnfr)(s.rfbdObjfdt()));
            } flsf {
                // skip vbluf for unrfdognizfd kfy
                s.rfbdObjfdt();
            }
        }
        fnbblfInputMfthodsIfNfdfssbry();
    }


/////////////////
// Addfssibility support
////////////////

    /**
     * Gfts thf AddfssiblfContfxt bssodibtfd with this TfxtComponfnt.
     * For tfxt domponfnts, thf AddfssiblfContfxt tbkfs thf form of bn
     * AddfssiblfAWTTfxtComponfnt.
     * A nfw AddfssiblfAWTTfxtComponfnt instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn AddfssiblfAWTTfxtComponfnt thbt sfrvfs bs thf
     *         AddfssiblfContfxt of this TfxtComponfnt
     * @sindf 1.3
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfAWTTfxtComponfnt();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * This dlbss implfmfnts bddfssibility support for thf
     * <dodf>TfxtComponfnt</dodf> dlbss.  It providfs bn implfmfntbtion of thf
     * Jbvb Addfssibility API bppropribtf to tfxt domponfnt usfr-intfrfbdf
     * flfmfnts.
     * @sindf 1.3
     */
    protfdtfd dlbss AddfssiblfAWTTfxtComponfnt fxtfnds AddfssiblfAWTComponfnt
        implfmfnts AddfssiblfTfxt, TfxtListfnfr
    {
        /*
         * JDK 1.3 sfriblVfrsionUID
         */
        privbtf stbtid finbl long sfriblVfrsionUID = 3631432373506317811L;

        /**
         * Construdts bn AddfssiblfAWTTfxtComponfnt.  Adds b listfnfr to trbdk
         * dbrft dhbngf.
         */
        publid AddfssiblfAWTTfxtComponfnt() {
            TfxtComponfnt.this.bddTfxtListfnfr(this);
        }

        /**
         * TfxtListfnfr notifidbtion of b tfxt vbluf dhbngf.
         */
        publid void tfxtVblufChbngfd(TfxtEvfnt tfxtEvfnt)  {
            Intfgfr dpos = Intfgfr.vblufOf(TfxtComponfnt.this.gftCbrftPosition());
            firfPropfrtyChbngf(ACCESSIBLE_TEXT_PROPERTY, null, dpos);
        }

        /**
         * Gfts thf stbtf sft of thf TfxtComponfnt.
         * Thf AddfssiblfStbtfSft of bn objfdt is domposfd of b sft of
         * uniquf AddfssiblfStbtfs.  A dhbngf in thf AddfssiblfStbtfSft
         * of bn objfdt will dbusf b PropfrtyChbngfEvfnt to bf firfd
         * for thf AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY propfrty.
         *
         * @rfturn bn instbndf of AddfssiblfStbtfSft dontbining thf
         * durrfnt stbtf sft of thf objfdt
         * @sff AddfssiblfStbtfSft
         * @sff AddfssiblfStbtf
         * @sff #bddPropfrtyChbngfListfnfr
         */
        publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
            AddfssiblfStbtfSft stbtfs = supfr.gftAddfssiblfStbtfSft();
            if (TfxtComponfnt.this.isEditbblf()) {
                stbtfs.bdd(AddfssiblfStbtf.EDITABLE);
            }
            rfturn stbtfs;
        }


        /**
         * Gfts thf rolf of this objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing thf rolf of thf
         * objfdt (AddfssiblfRolf.TEXT)
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.TEXT;
        }

        /**
         * Gft thf AddfssiblfTfxt bssodibtfd with this objfdt.  In thf
         * implfmfntbtion of thf Jbvb Addfssibility API for this dlbss,
         * rfturn this objfdt, whidh is rfsponsiblf for implfmfnting thf
         * AddfssiblfTfxt intfrfbdf on bfhblf of itsflf.
         *
         * @rfturn this objfdt
         */
        publid AddfssiblfTfxt gftAddfssiblfTfxt() {
            rfturn this;
        }


        // --- intfrfbdf AddfssiblfTfxt mfthods ------------------------

        /**
         * Mbny of thfsf mfthods brf just donvfnifndf mfthods; thfy
         * just dbll thf fquivblfnt on thf pbrfnt
         */

        /**
         * Givfn b point in lodbl doordinbtfs, rfturn thf zfro-bbsfd indfx
         * of thf dhbrbdtfr undfr thbt Point.  If thf point is invblid,
         * this mfthod rfturns -1.
         *
         * @pbrbm p thf Point in lodbl doordinbtfs
         * @rfturn thf zfro-bbsfd indfx of thf dhbrbdtfr undfr Point p.
         */
        publid int gftIndfxAtPoint(Point p) {
            rfturn -1;
        }

        /**
         * Dftfrminfs thf bounding box of thf dhbrbdtfr bt thf givfn
         * indfx into thf string.  Thf bounds brf rfturnfd in lodbl
         * doordinbtfs.  If thf indfx is invblid b null rfdtbnglf
         * is rfturnfd.
         *
         * @pbrbm i thf indfx into thf String &gt;= 0
         * @rfturn thf sdrffn doordinbtfs of thf dhbrbdtfr's bounding box
         */
        publid Rfdtbnglf gftChbrbdtfrBounds(int i) {
            rfturn null;
        }

        /**
         * Rfturns thf numbfr of dhbrbdtfrs (vblid indidifs)
         *
         * @rfturn thf numbfr of dhbrbdtfrs &gt;= 0
         */
        publid int gftChbrCount() {
            rfturn TfxtComponfnt.this.gftTfxt().lfngth();
        }

        /**
         * Rfturns thf zfro-bbsfd offsft of thf dbrft.
         *
         * Notf: Thf dhbrbdtfr to thf right of thf dbrft will hbvf thf
         * sbmf indfx vbluf bs thf offsft (thf dbrft is bftwffn
         * two dhbrbdtfrs).
         *
         * @rfturn thf zfro-bbsfd offsft of thf dbrft.
         */
        publid int gftCbrftPosition() {
            rfturn TfxtComponfnt.this.gftCbrftPosition();
        }

        /**
         * Rfturns thf AttributfSft for b givfn dhbrbdtfr (bt b givfn indfx).
         *
         * @pbrbm i thf zfro-bbsfd indfx into thf tfxt
         * @rfturn thf AttributfSft of thf dhbrbdtfr
         */
        publid AttributfSft gftChbrbdtfrAttributf(int i) {
            rfturn null; // No bttributfs in TfxtComponfnt
        }

        /**
         * Rfturns thf stbrt offsft within thf sflfdtfd tfxt.
         * If thfrf is no sflfdtion, but thfrf is
         * b dbrft, thf stbrt bnd fnd offsfts will bf thf sbmf.
         * Rfturn 0 if thf tfxt is fmpty, or thf dbrft position
         * if no sflfdtion.
         *
         * @rfturn thf indfx into thf tfxt of thf stbrt of thf sflfdtion &gt;= 0
         */
        publid int gftSflfdtionStbrt() {
            rfturn TfxtComponfnt.this.gftSflfdtionStbrt();
        }

        /**
         * Rfturns thf fnd offsft within thf sflfdtfd tfxt.
         * If thfrf is no sflfdtion, but thfrf is
         * b dbrft, thf stbrt bnd fnd offsfts will bf thf sbmf.
         * Rfturn 0 if thf tfxt is fmpty, or thf dbrft position
         * if no sflfdtion.
         *
         * @rfturn thf indfx into thf tfxt of thf fnd of thf sflfdtion &gt;= 0
         */
        publid int gftSflfdtionEnd() {
            rfturn TfxtComponfnt.this.gftSflfdtionEnd();
        }

        /**
         * Rfturns thf portion of thf tfxt thbt is sflfdtfd.
         *
         * @rfturn thf tfxt, null if no sflfdtion
         */
        publid String gftSflfdtfdTfxt() {
            String sflTfxt = TfxtComponfnt.this.gftSflfdtfdTfxt();
            // Fix for 4256662
            if (sflTfxt == null || sflTfxt.fqubls("")) {
                rfturn null;
            }
            rfturn sflTfxt;
        }

        /**
         * Rfturns thf String bt b givfn indfx.
         *
         * @pbrbm pbrt thf AddfssiblfTfxt.CHARACTER, AddfssiblfTfxt.WORD,
         * or AddfssiblfTfxt.SENTENCE to rftrifvf
         * @pbrbm indfx bn indfx within thf tfxt &gt;= 0
         * @rfturn thf lfttfr, word, or sfntfndf,
         *   null for bn invblid indfx or pbrt
         */
        publid String gftAtIndfx(int pbrt, int indfx) {
            if (indfx < 0 || indfx >= TfxtComponfnt.this.gftTfxt().lfngth()) {
                rfturn null;
            }
            switdh (pbrt) {
            dbsf AddfssiblfTfxt.CHARACTER:
                rfturn TfxtComponfnt.this.gftTfxt().substring(indfx, indfx+1);
            dbsf AddfssiblfTfxt.WORD:  {
                    String s = TfxtComponfnt.this.gftTfxt();
                    BrfbkItfrbtor words = BrfbkItfrbtor.gftWordInstbndf();
                    words.sftTfxt(s);
                    int fnd = words.following(indfx);
                    rfturn s.substring(words.prfvious(), fnd);
                }
            dbsf AddfssiblfTfxt.SENTENCE:  {
                    String s = TfxtComponfnt.this.gftTfxt();
                    BrfbkItfrbtor sfntfndf = BrfbkItfrbtor.gftSfntfndfInstbndf();
                    sfntfndf.sftTfxt(s);
                    int fnd = sfntfndf.following(indfx);
                    rfturn s.substring(sfntfndf.prfvious(), fnd);
                }
            dffbult:
                rfturn null;
            }
        }

        privbtf stbtid finbl boolfbn NEXT = truf;
        privbtf stbtid finbl boolfbn PREVIOUS = fblsf;

        /**
         * Nffdfd to unify forwbrd bnd bbdkwbrd sfbrdhing.
         * Thf mfthod bssumfs thbt s is thf tfxt bssignfd to words.
         */
        privbtf int findWordLimit(int indfx, BrfbkItfrbtor words, boolfbn dirfdtion,
                                         String s) {
            // Fix for 4256660 bnd 4256661.
            // Words itfrbtor is difffrfnt from dhbrbdtfr bnd sfntfndf itfrbtors
            // in thbt fnd of onf word is not nfdfssbrily stbrt of bnothfr word.
            // Plfbsf sff jbvb.tfxt.BrfbkItfrbtor JbvbDod. Thf dodf bflow is
            // bbsfd on nfxtWordStbrtAftfr fxbmplf from BrfbkItfrbtor.jbvb.
            int lbst = (dirfdtion == NEXT) ? words.following(indfx)
                                           : words.prfdfding(indfx);
            int durrfnt = (dirfdtion == NEXT) ? words.nfxt()
                                              : words.prfvious();
            whilf (durrfnt != BrfbkItfrbtor.DONE) {
                for (int p = Mbth.min(lbst, durrfnt); p < Mbth.mbx(lbst, durrfnt); p++) {
                    if (Chbrbdtfr.isLfttfr(s.dhbrAt(p))) {
                        rfturn lbst;
                    }
                }
                lbst = durrfnt;
                durrfnt = (dirfdtion == NEXT) ? words.nfxt()
                                              : words.prfvious();
            }
            rfturn BrfbkItfrbtor.DONE;
        }

        /**
         * Rfturns thf String bftfr b givfn indfx.
         *
         * @pbrbm pbrt thf AddfssiblfTfxt.CHARACTER, AddfssiblfTfxt.WORD,
         * or AddfssiblfTfxt.SENTENCE to rftrifvf
         * @pbrbm indfx bn indfx within thf tfxt &gt;= 0
         * @rfturn thf lfttfr, word, or sfntfndf, null for bn invblid
         *  indfx or pbrt
         */
        publid String gftAftfrIndfx(int pbrt, int indfx) {
            if (indfx < 0 || indfx >= TfxtComponfnt.this.gftTfxt().lfngth()) {
                rfturn null;
            }
            switdh (pbrt) {
            dbsf AddfssiblfTfxt.CHARACTER:
                if (indfx+1 >= TfxtComponfnt.this.gftTfxt().lfngth()) {
                   rfturn null;
                }
                rfturn TfxtComponfnt.this.gftTfxt().substring(indfx+1, indfx+2);
            dbsf AddfssiblfTfxt.WORD:  {
                    String s = TfxtComponfnt.this.gftTfxt();
                    BrfbkItfrbtor words = BrfbkItfrbtor.gftWordInstbndf();
                    words.sftTfxt(s);
                    int stbrt = findWordLimit(indfx, words, NEXT, s);
                    if (stbrt == BrfbkItfrbtor.DONE || stbrt >= s.lfngth()) {
                        rfturn null;
                    }
                    int fnd = words.following(stbrt);
                    if (fnd == BrfbkItfrbtor.DONE || fnd >= s.lfngth()) {
                        rfturn null;
                    }
                    rfturn s.substring(stbrt, fnd);
                }
            dbsf AddfssiblfTfxt.SENTENCE:  {
                    String s = TfxtComponfnt.this.gftTfxt();
                    BrfbkItfrbtor sfntfndf = BrfbkItfrbtor.gftSfntfndfInstbndf();
                    sfntfndf.sftTfxt(s);
                    int stbrt = sfntfndf.following(indfx);
                    if (stbrt == BrfbkItfrbtor.DONE || stbrt >= s.lfngth()) {
                        rfturn null;
                    }
                    int fnd = sfntfndf.following(stbrt);
                    if (fnd == BrfbkItfrbtor.DONE || fnd >= s.lfngth()) {
                        rfturn null;
                    }
                    rfturn s.substring(stbrt, fnd);
                }
            dffbult:
                rfturn null;
            }
        }


        /**
         * Rfturns thf String bfforf b givfn indfx.
         *
         * @pbrbm pbrt thf AddfssiblfTfxt.CHARACTER, AddfssiblfTfxt.WORD,
         *   or AddfssiblfTfxt.SENTENCE to rftrifvf
         * @pbrbm indfx bn indfx within thf tfxt &gt;= 0
         * @rfturn thf lfttfr, word, or sfntfndf, null for bn invblid indfx
         *  or pbrt
         */
        publid String gftBfforfIndfx(int pbrt, int indfx) {
            if (indfx < 0 || indfx > TfxtComponfnt.this.gftTfxt().lfngth()-1) {
                rfturn null;
            }
            switdh (pbrt) {
            dbsf AddfssiblfTfxt.CHARACTER:
                if (indfx == 0) {
                    rfturn null;
                }
                rfturn TfxtComponfnt.this.gftTfxt().substring(indfx-1, indfx);
            dbsf AddfssiblfTfxt.WORD:  {
                    String s = TfxtComponfnt.this.gftTfxt();
                    BrfbkItfrbtor words = BrfbkItfrbtor.gftWordInstbndf();
                    words.sftTfxt(s);
                    int fnd = findWordLimit(indfx, words, PREVIOUS, s);
                    if (fnd == BrfbkItfrbtor.DONE) {
                        rfturn null;
                    }
                    int stbrt = words.prfdfding(fnd);
                    if (stbrt == BrfbkItfrbtor.DONE) {
                        rfturn null;
                    }
                    rfturn s.substring(stbrt, fnd);
                }
            dbsf AddfssiblfTfxt.SENTENCE:  {
                    String s = TfxtComponfnt.this.gftTfxt();
                    BrfbkItfrbtor sfntfndf = BrfbkItfrbtor.gftSfntfndfInstbndf();
                    sfntfndf.sftTfxt(s);
                    int fnd = sfntfndf.following(indfx);
                    fnd = sfntfndf.prfvious();
                    int stbrt = sfntfndf.prfvious();
                    if (stbrt == BrfbkItfrbtor.DONE) {
                        rfturn null;
                    }
                    rfturn s.substring(stbrt, fnd);
                }
            dffbult:
                rfturn null;
            }
        }
    }  // fnd of AddfssiblfAWTTfxtComponfnt

    privbtf boolfbn dhfdkForEnbblfIM = truf;
}
