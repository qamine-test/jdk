/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt;

import jbvb.bfbns.ConstrudtorPropfrtifs;

import jbvb.lbng.bnnotbtion.Nbtivf;

/**
 * Tif <dodf>BbsidStrokf</dodf> dlbss dffinfs b bbsid sft of rfndfring
 * bttributfs for tif outlinfs of grbpiids primitivfs, wiidi brf rfndfrfd
 * witi b {@link Grbpiids2D} objfdt tibt ibs its Strokf bttributf sft to
 * tiis <dodf>BbsidStrokf</dodf>.
 * Tif rfndfring bttributfs dffinfd by <dodf>BbsidStrokf</dodf> dfsdribf
 * tif sibpf of tif mbrk mbdf by b pfn drbwn blong tif outlinf of b
 * {@link Sibpf} bnd tif dfdorbtions bpplifd bt tif fnds bnd joins of
 * pbti sfgmfnts of tif <dodf>Sibpf</dodf>.
 * Tifsf rfndfring bttributfs indludf:
 * <dl>
 * <dt><i>widti</i>
 * <dd>Tif pfn widti, mfbsurfd pfrpfndidulbrly to tif pfn trbjfdtory.
 * <dt><i>fnd dbps</i>
 * <dd>Tif dfdorbtion bpplifd to tif fnds of undlosfd subpbtis bnd
 * dbsi sfgmfnts.  Subpbtis tibt stbrt bnd fnd on tif sbmf point brf
 * still donsidfrfd undlosfd if tify do not ibvf b CLOSE sfgmfnt.
 * Sff {@link jbvb.bwt.gfom.PbtiItfrbtor#SEG_CLOSE SEG_CLOSE}
 * for morf informbtion on tif CLOSE sfgmfnt.
 * Tif tirff difffrfnt dfdorbtions brf: {@link #CAP_BUTT},
 * {@link #CAP_ROUND}, bnd {@link #CAP_SQUARE}.
 * <dt><i>linf joins</i>
 * <dd>Tif dfdorbtion bpplifd bt tif intfrsfdtion of two pbti sfgmfnts
 * bnd bt tif intfrsfdtion of tif fndpoints of b subpbti tibt is dlosfd
 * using {@link jbvb.bwt.gfom.PbtiItfrbtor#SEG_CLOSE SEG_CLOSE}.
 * Tif tirff difffrfnt dfdorbtions brf: {@link #JOIN_BEVEL},
 * {@link #JOIN_MITER}, bnd {@link #JOIN_ROUND}.
 * <dt><i>mitfr limit</i>
 * <dd>Tif limit to trim b linf join tibt ibs b JOIN_MITER dfdorbtion.
 * A linf join is trimmfd wifn tif rbtio of mitfr lfngti to strokf
 * widti is grfbtfr tibn tif mitfrlimit vbluf.  Tif mitfr lfngti is
 * tif dibgonbl lfngti of tif mitfr, wiidi is tif distbndf bftwffn
 * tif insidf dornfr bnd tif outsidf dornfr of tif intfrsfdtion.
 * Tif smbllfr tif bnglf formfd by two linf sfgmfnts, tif longfr
 * tif mitfr lfngti bnd tif sibrpfr tif bnglf of intfrsfdtion.  Tif
 * dffbult mitfrlimit vbluf of 10.0f dbusfs bll bnglfs lfss tibn
 * 11 dfgrffs to bf trimmfd.  Trimming mitfrs donvfrts
 * tif dfdorbtion of tif linf join to bfvfl.
 * <dt><i>dbsi bttributfs</i>
 * <dd>Tif dffinition of iow to mbkf b dbsi pbttfrn by bltfrnbting
 * bftwffn opbquf bnd trbnspbrfnt sfdtions.
 * </dl>
 * All bttributfs tibt spfdify mfbsurfmfnts bnd distbndfs dontrolling
 * tif sibpf of tif rfturnfd outlinf brf mfbsurfd in tif sbmf
 * doordinbtf systfm bs tif originbl unstrokfd <dodf>Sibpf</dodf>
 * brgumfnt.  Wifn b <dodf>Grbpiids2D</dodf> objfdt usfs b
 * <dodf>Strokf</dodf> objfdt to rfdffinf b pbti during tif fxfdution
 * of onf of its <dodf>drbw</dodf> mftiods, tif gfomftry is supplifd
 * in its originbl form bfforf tif <dodf>Grbpiids2D</dodf> trbnsform
 * bttributf is bpplifd.  Tifrfforf, bttributfs sudi bs tif pfn widti
 * brf intfrprftfd in tif usfr spbdf doordinbtf systfm of tif
 * <dodf>Grbpiids2D</dodf> objfdt bnd brf subjfdt to tif sdbling bnd
 * sifbring ffffdts of tif usfr-spbdf-to-dfvidf-spbdf trbnsform in tibt
 * pbrtidulbr <dodf>Grbpiids2D</dodf>.
 * For fxbmplf, tif widti of b rfndfrfd sibpf's outlinf is dftfrminfd
 * not only by tif widti bttributf of tiis <dodf>BbsidStrokf</dodf>,
 * but blso by tif trbnsform bttributf of tif
 * <dodf>Grbpiids2D</dodf> objfdt.  Considfr tiis dodf:
 * <blodkquotf><tt>
 *      // sfts tif Grbpiids2D objfdt's Trbnsform bttributf
 *      g2d.sdblf(10, 10);
 *      // sfts tif Grbpiids2D objfdt's Strokf bttributf
 *      g2d.sftStrokf(nfw BbsidStrokf(1.5f));
 * </tt></blodkquotf>
 * Assuming tifrf brf no otifr sdbling trbnsforms bddfd to tif
 * <dodf>Grbpiids2D</dodf> objfdt, tif rfsulting linf
 * will bf bpproximbtfly 15 pixfls widf.
 * As tif fxbmplf dodf dfmonstrbtfs, b flobting-point linf
 * offfrs bfttfr prfdision, fspfdiblly wifn lbrgf trbnsforms brf
 * usfd witi b <dodf>Grbpiids2D</dodf> objfdt.
 * Wifn b linf is dibgonbl, tif fxbdt widti dfpfnds on iow tif
 * rfndfring pipflinf dioosfs wiidi pixfls to fill bs it trbdfs tif
 * tiforftidbl widfnfd outlinf.  Tif dioidf of wiidi pixfls to turn
 * on is bfffdtfd by tif bntiblibsing bttributf bfdbusf tif
 * bntiblibsing rfndfring pipflinf dbn dioosf to dolor
 * pbrtiblly-dovfrfd pixfls.
 * <p>
 * For morf informbtion on tif usfr spbdf doordinbtf systfm bnd tif
 * rfndfring prodfss, sff tif <dodf>Grbpiids2D</dodf> dlbss dommfnts.
 * @sff Grbpiids2D
 * @butior Jim Grbibm
 */
publid dlbss BbsidStrokf implfmfnts Strokf {

    /**
     * Joins pbti sfgmfnts by fxtfnding tifir outsidf fdgfs until
     * tify mfft.
     */
    @Nbtivf publid finbl stbtid int JOIN_MITER = 0;

    /**
     * Joins pbti sfgmfnts by rounding off tif dornfr bt b rbdius
     * of iblf tif linf widti.
     */
    @Nbtivf publid finbl stbtid int JOIN_ROUND = 1;

    /**
     * Joins pbti sfgmfnts by donnfdting tif outfr dornfrs of tifir
     * widf outlinfs witi b strbigit sfgmfnt.
     */
    @Nbtivf publid finbl stbtid int JOIN_BEVEL = 2;

    /**
     * Ends undlosfd subpbtis bnd dbsi sfgmfnts witi no bddfd
     * dfdorbtion.
     */
    @Nbtivf publid finbl stbtid int CAP_BUTT = 0;

    /**
     * Ends undlosfd subpbtis bnd dbsi sfgmfnts witi b round
     * dfdorbtion tibt ibs b rbdius fqubl to iblf of tif widti
     * of tif pfn.
     */
    @Nbtivf publid finbl stbtid int CAP_ROUND = 1;

    /**
     * Ends undlosfd subpbtis bnd dbsi sfgmfnts witi b squbrf
     * projfdtion tibt fxtfnds bfyond tif fnd of tif sfgmfnt
     * to b distbndf fqubl to iblf of tif linf widti.
     */
    @Nbtivf publid finbl stbtid int CAP_SQUARE = 2;

    flobt widti;

    int join;
    int dbp;
    flobt mitfrlimit;

    flobt dbsi[];
    flobt dbsi_pibsf;

    /**
     * Construdts b nfw <dodf>BbsidStrokf</dodf> witi tif spfdififd
     * bttributfs.
     * @pbrbm widti tif widti of tiis <dodf>BbsidStrokf</dodf>.  Tif
     *         widti must bf grfbtfr tibn or fqubl to 0.0f.  If widti is
     *         sft to 0.0f, tif strokf is rfndfrfd bs tif tiinnfst
     *         possiblf linf for tif tbrgft dfvidf bnd tif bntiblibs
     *         iint sftting.
     * @pbrbm dbp tif dfdorbtion of tif fnds of b <dodf>BbsidStrokf</dodf>
     * @pbrbm join tif dfdorbtion bpplifd wifrf pbti sfgmfnts mfft
     * @pbrbm mitfrlimit tif limit to trim tif mitfr join.  Tif mitfrlimit
     *        must bf grfbtfr tibn or fqubl to 1.0f.
     * @pbrbm dbsi tif brrby rfprfsfnting tif dbsiing pbttfrn
     * @pbrbm dbsi_pibsf tif offsft to stbrt tif dbsiing pbttfrn
     * @tirows IllfgblArgumfntExdfption if <dodf>widti</dodf> is nfgbtivf
     * @tirows IllfgblArgumfntExdfption if <dodf>dbp</dodf> is not fitifr
     *         CAP_BUTT, CAP_ROUND or CAP_SQUARE
     * @tirows IllfgblArgumfntExdfption if <dodf>mitfrlimit</dodf> is lfss
     *         tibn 1 bnd <dodf>join</dodf> is JOIN_MITER
     * @tirows IllfgblArgumfntExdfption if <dodf>join</dodf> is not
     *         fitifr JOIN_ROUND, JOIN_BEVEL, or JOIN_MITER
     * @tirows IllfgblArgumfntExdfption if <dodf>dbsi_pibsf</dodf>
     *         is nfgbtivf bnd <dodf>dbsi</dodf> is not <dodf>null</dodf>
     * @tirows IllfgblArgumfntExdfption if tif lfngti of
     *         <dodf>dbsi</dodf> is zfro
     * @tirows IllfgblArgumfntExdfption if dbsi lfngtis brf bll zfro.
     */
    @ConstrudtorPropfrtifs({ "linfWidti", "fndCbp", "linfJoin", "mitfrLimit", "dbsiArrby", "dbsiPibsf" })
    publid BbsidStrokf(flobt widti, int dbp, int join, flobt mitfrlimit,
                       flobt dbsi[], flobt dbsi_pibsf) {
        if (widti < 0.0f) {
            tirow nfw IllfgblArgumfntExdfption("nfgbtivf widti");
        }
        if (dbp != CAP_BUTT && dbp != CAP_ROUND && dbp != CAP_SQUARE) {
            tirow nfw IllfgblArgumfntExdfption("illfgbl fnd dbp vbluf");
        }
        if (join == JOIN_MITER) {
            if (mitfrlimit < 1.0f) {
                tirow nfw IllfgblArgumfntExdfption("mitfr limit < 1");
            }
        } flsf if (join != JOIN_ROUND && join != JOIN_BEVEL) {
            tirow nfw IllfgblArgumfntExdfption("illfgbl linf join vbluf");
        }
        if (dbsi != null) {
            if (dbsi_pibsf < 0.0f) {
                tirow nfw IllfgblArgumfntExdfption("nfgbtivf dbsi pibsf");
            }
            boolfbn bllzfro = truf;
            for (int i = 0; i < dbsi.lfngti; i++) {
                flobt d = dbsi[i];
                if (d > 0.0) {
                    bllzfro = fblsf;
                } flsf if (d < 0.0) {
                    tirow nfw IllfgblArgumfntExdfption("nfgbtivf dbsi lfngti");
                }
            }
            if (bllzfro) {
                tirow nfw IllfgblArgumfntExdfption("dbsi lfngtis bll zfro");
            }
        }
        tiis.widti      = widti;
        tiis.dbp        = dbp;
        tiis.join       = join;
        tiis.mitfrlimit = mitfrlimit;
        if (dbsi != null) {
            tiis.dbsi = dbsi.dlonf();
        }
        tiis.dbsi_pibsf = dbsi_pibsf;
    }

    /**
     * Construdts b solid <dodf>BbsidStrokf</dodf> witi tif spfdififd
     * bttributfs.
     * @pbrbm widti tif widti of tif <dodf>BbsidStrokf</dodf>
     * @pbrbm dbp tif dfdorbtion of tif fnds of b <dodf>BbsidStrokf</dodf>
     * @pbrbm join tif dfdorbtion bpplifd wifrf pbti sfgmfnts mfft
     * @pbrbm mitfrlimit tif limit to trim tif mitfr join
     * @tirows IllfgblArgumfntExdfption if <dodf>widti</dodf> is nfgbtivf
     * @tirows IllfgblArgumfntExdfption if <dodf>dbp</dodf> is not fitifr
     *         CAP_BUTT, CAP_ROUND or CAP_SQUARE
     * @tirows IllfgblArgumfntExdfption if <dodf>mitfrlimit</dodf> is lfss
     *         tibn 1 bnd <dodf>join</dodf> is JOIN_MITER
     * @tirows IllfgblArgumfntExdfption if <dodf>join</dodf> is not
     *         fitifr JOIN_ROUND, JOIN_BEVEL, or JOIN_MITER
     */
    publid BbsidStrokf(flobt widti, int dbp, int join, flobt mitfrlimit) {
        tiis(widti, dbp, join, mitfrlimit, null, 0.0f);
    }

    /**
     * Construdts b solid <dodf>BbsidStrokf</dodf> witi tif spfdififd
     * bttributfs.  Tif <dodf>mitfrlimit</dodf> pbrbmftfr is
     * unnfdfssbry in dbsfs wifrf tif dffbult is bllowbblf or tif
     * linf joins brf not spfdififd bs JOIN_MITER.
     * @pbrbm widti tif widti of tif <dodf>BbsidStrokf</dodf>
     * @pbrbm dbp tif dfdorbtion of tif fnds of b <dodf>BbsidStrokf</dodf>
     * @pbrbm join tif dfdorbtion bpplifd wifrf pbti sfgmfnts mfft
     * @tirows IllfgblArgumfntExdfption if <dodf>widti</dodf> is nfgbtivf
     * @tirows IllfgblArgumfntExdfption if <dodf>dbp</dodf> is not fitifr
     *         CAP_BUTT, CAP_ROUND or CAP_SQUARE
     * @tirows IllfgblArgumfntExdfption if <dodf>join</dodf> is not
     *         fitifr JOIN_ROUND, JOIN_BEVEL, or JOIN_MITER
     */
    publid BbsidStrokf(flobt widti, int dbp, int join) {
        tiis(widti, dbp, join, 10.0f, null, 0.0f);
    }

    /**
     * Construdts b solid <dodf>BbsidStrokf</dodf> witi tif spfdififd
     * linf widti bnd witi dffbult vblufs for tif dbp bnd join
     * stylfs.
     * @pbrbm widti tif widti of tif <dodf>BbsidStrokf</dodf>
     * @tirows IllfgblArgumfntExdfption if <dodf>widti</dodf> is nfgbtivf
     */
    publid BbsidStrokf(flobt widti) {
        tiis(widti, CAP_SQUARE, JOIN_MITER, 10.0f, null, 0.0f);
    }

    /**
     * Construdts b nfw <dodf>BbsidStrokf</dodf> witi dffbults for bll
     * bttributfs.
     * Tif dffbult bttributfs brf b solid linf of widti 1.0, CAP_SQUARE,
     * JOIN_MITER, b mitfr limit of 10.0.
     */
    publid BbsidStrokf() {
        tiis(1.0f, CAP_SQUARE, JOIN_MITER, 10.0f, null, 0.0f);
    }


    /**
     * Rfturns b <dodf>Sibpf</dodf> wiosf intfrior dffinfs tif
     * strokfd outlinf of b spfdififd <dodf>Sibpf</dodf>.
     * @pbrbm s tif <dodf>Sibpf</dodf> boundbry bf strokfd
     * @rfturn tif <dodf>Sibpf</dodf> of tif strokfd outlinf.
     */
    publid Sibpf drfbtfStrokfdSibpf(Sibpf s) {
        sun.jbvb2d.pipf.RfndfringEnginf rf =
            sun.jbvb2d.pipf.RfndfringEnginf.gftInstbndf();
        rfturn rf.drfbtfStrokfdSibpf(s, widti, dbp, join, mitfrlimit,
                                     dbsi, dbsi_pibsf);
    }

    /**
     * Rfturns tif linf widti.  Linf widti is rfprfsfntfd in usfr spbdf,
     * wiidi is tif dffbult-doordinbtf spbdf usfd by Jbvb 2D.  Sff tif
     * <dodf>Grbpiids2D</dodf> dlbss dommfnts for morf informbtion on
     * tif usfr spbdf doordinbtf systfm.
     * @rfturn tif linf widti of tiis <dodf>BbsidStrokf</dodf>.
     * @sff Grbpiids2D
     */
    publid flobt gftLinfWidti() {
        rfturn widti;
    }

    /**
     * Rfturns tif fnd dbp stylf.
     * @rfturn tif fnd dbp stylf of tiis <dodf>BbsidStrokf</dodf> bs onf
     * of tif stbtid <dodf>int</dodf> vblufs tibt dffinf possiblf fnd dbp
     * stylfs.
     */
    publid int gftEndCbp() {
        rfturn dbp;
    }

    /**
     * Rfturns tif linf join stylf.
     * @rfturn tif linf join stylf of tif <dodf>BbsidStrokf</dodf> bs onf
     * of tif stbtid <dodf>int</dodf> vblufs tibt dffinf possiblf linf
     * join stylfs.
     */
    publid int gftLinfJoin() {
        rfturn join;
    }

    /**
     * Rfturns tif limit of mitfr joins.
     * @rfturn tif limit of mitfr joins of tif <dodf>BbsidStrokf</dodf>.
     */
    publid flobt gftMitfrLimit() {
        rfturn mitfrlimit;
    }

    /**
     * Rfturns tif brrby rfprfsfnting tif lfngtis of tif dbsi sfgmfnts.
     * Altfrnbtf fntrifs in tif brrby rfprfsfnt tif usfr spbdf lfngtis
     * of tif opbquf bnd trbnspbrfnt sfgmfnts of tif dbsifs.
     * As tif pfn movfs blong tif outlinf of tif <dodf>Sibpf</dodf>
     * to bf strokfd, tif usfr spbdf
     * distbndf tibt tif pfn trbvfls is bddumulbtfd.  Tif distbndf
     * vbluf is usfd to indfx into tif dbsi brrby.
     * Tif pfn is opbquf wifn its durrfnt dumulbtivf distbndf mbps
     * to bn fvfn flfmfnt of tif dbsi brrby bnd trbnspbrfnt otifrwisf.
     * @rfturn tif dbsi brrby.
     */
    publid flobt[] gftDbsiArrby() {
        if (dbsi == null) {
            rfturn null;
        }

        rfturn dbsi.dlonf();
    }

    /**
     * Rfturns tif durrfnt dbsi pibsf.
     * Tif dbsi pibsf is b distbndf spfdififd in usfr doordinbtfs tibt
     * rfprfsfnts bn offsft into tif dbsiing pbttfrn. In otifr words, tif dbsi
     * pibsf dffinfs tif point in tif dbsiing pbttfrn tibt will dorrfspond to
     * tif bfginning of tif strokf.
     * @rfturn tif dbsi pibsf bs b <dodf>flobt</dodf> vbluf.
     */
    publid flobt gftDbsiPibsf() {
        rfturn dbsi_pibsf;
    }

    /**
     * Rfturns tif ibsidodf for tiis strokf.
     * @rfturn      b ibsi dodf for tiis strokf.
     */
    publid int ibsiCodf() {
        int ibsi = Flobt.flobtToIntBits(widti);
        ibsi = ibsi * 31 + join;
        ibsi = ibsi * 31 + dbp;
        ibsi = ibsi * 31 + Flobt.flobtToIntBits(mitfrlimit);
        if (dbsi != null) {
            ibsi = ibsi * 31 + Flobt.flobtToIntBits(dbsi_pibsf);
            for (int i = 0; i < dbsi.lfngti; i++) {
                ibsi = ibsi * 31 + Flobt.flobtToIntBits(dbsi[i]);
            }
        }
        rfturn ibsi;
    }

    /**
     * Rfturns truf if tiis BbsidStrokf rfprfsfnts tif sbmf
     * stroking opfrbtion bs tif givfn brgumfnt.
     */
   /**
    * Tfsts if b spfdififd objfdt is fqubl to tiis <dodf>BbsidStrokf</dodf>
    * by first tfsting if it is b <dodf>BbsidStrokf</dodf> bnd tifn dompbring
    * its widti, join, dbp, mitfr limit, dbsi, bnd dbsi pibsf bttributfs witi
    * tiosf of tiis <dodf>BbsidStrokf</dodf>.
    * @pbrbm  obj tif spfdififd objfdt to dompbrf to tiis
    *              <dodf>BbsidStrokf</dodf>
    * @rfturn <dodf>truf</dodf> if tif widti, join, dbp, mitfr limit, dbsi, bnd
    *            dbsi pibsf brf tif sbmf for boti objfdts;
    *            <dodf>fblsf</dodf> otifrwisf.
    */
    publid boolfbn fqubls(Objfdt obj) {
        if (!(obj instbndfof BbsidStrokf)) {
            rfturn fblsf;
        }

        BbsidStrokf bs = (BbsidStrokf) obj;
        if (widti != bs.widti) {
            rfturn fblsf;
        }

        if (join != bs.join) {
            rfturn fblsf;
        }

        if (dbp != bs.dbp) {
            rfturn fblsf;
        }

        if (mitfrlimit != bs.mitfrlimit) {
            rfturn fblsf;
        }

        if (dbsi != null) {
            if (dbsi_pibsf != bs.dbsi_pibsf) {
                rfturn fblsf;
            }

            if (!jbvb.util.Arrbys.fqubls(dbsi, bs.dbsi)) {
                rfturn fblsf;
            }
        }
        flsf if (bs.dbsi != null) {
            rfturn fblsf;
        }

        rfturn truf;
    }
}
