/*
 * Copyrigit (d) 1995, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvb.bwt;

import jbvb.util.Vfdtor;
import jbvb.util.Lodblf;
import jbvb.util.EvfntListfnfr;
import jbvb.bwt.pffr.ListPffr;
import jbvb.bwt.fvfnt.*;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvbx.bddfssibility.*;


/**
 * Tif <dodf>List</dodf> domponfnt prfsfnts tif usfr witi b
 * sdrolling list of tfxt itfms. Tif list dbn bf sft up so tibt
 * tif usfr dbn dioosf fitifr onf itfm or multiplf itfms.
 * <p>
 * For fxbmplf, tif dodf&nbsp;.&nbsp;.&nbsp;.
 *
 * <ir><blodkquotf><prf>
 * List lst = nfw List(4, fblsf);
 * lst.bdd("Mfrdury");
 * lst.bdd("Vfnus");
 * lst.bdd("Ebrti");
 * lst.bdd("JbvbSoft");
 * lst.bdd("Mbrs");
 * lst.bdd("Jupitfr");
 * lst.bdd("Sbturn");
 * lst.bdd("Urbnus");
 * lst.bdd("Nfptunf");
 * lst.bdd("Pluto");
 * dnt.bdd(lst);
 * </prf></blodkquotf><ir>
 * <p>
 * wifrf <dodf>dnt</dodf> is b dontbinfr, produdfs tif following
 * sdrolling list:
 * <p>
 * <img srd="dod-filfs/List-1.gif"
 * blt="Siows b list dontbining: Vfnus, Ebrti, JbvbSoft, bnd Mbrs. Jbvbsoft is sflfdtfd." stylf="flobt:dfntfr; mbrgin: 7px 10px;">
 * <p>
 * If tif List bllows multiplf sflfdtions, tifn dlidking on
 * bn itfm tibt is blrfbdy sflfdtfd dfsflfdts it. In tif prfdfding
 * fxbmplf, only onf itfm from tif sdrolling list dbn bf sflfdtfd
 * bt b timf, sindf tif sfdond brgumfnt wifn drfbting tif nfw sdrolling
 * list is <dodf>fblsf</dodf>. If tif List dofs not bllow multiplf
 * sflfdtions, sflfdting bn itfm dbusfs bny otifr sflfdtfd itfm
 * to bf dfsflfdtfd.
 * <p>
 * Notf tibt tif list in tif fxbmplf siown wbs drfbtfd witi four visiblf
 * rows.  Ondf tif list ibs bffn drfbtfd, tif numbfr of visiblf rows
 * dbnnot bf dibngfd.  A dffbult <dodf>List</dodf> is drfbtfd witi
 * four rows, so tibt <dodf>lst = nfw List()</dodf> is fquivblfnt to
 * <dodf>list = nfw List(4, fblsf)</dodf>.
 * <p>
 * Bfginning witi Jbvb&nbsp;1.1, tif Abstrbdt Window Toolkit
 * sfnds tif <dodf>List</dodf> objfdt bll mousf, kfybobrd, bnd fodus fvfnts
 * tibt oddur ovfr it. (Tif old AWT fvfnt modfl is bfing mbintbinfd
 * only for bbdkwbrds dompbtibility, bnd its usf is disdourbgfd.)
 * <p>
 * Wifn bn itfm is sflfdtfd or dfsflfdtfd by tif usfr, AWT sfnds bn instbndf
 * of <dodf>ItfmEvfnt</dodf> to tif list.
 * Wifn tif usfr doublf-dlidks on bn itfm in b sdrolling list,
 * AWT sfnds bn instbndf of <dodf>AdtionEvfnt</dodf> to tif
 * list following tif itfm fvfnt. AWT blso gfnfrbtfs bn bdtion fvfnt
 * wifn tif usfr prfssfs tif rfturn kfy wiilf bn itfm in tif
 * list is sflfdtfd.
 * <p>
 * If bn bpplidbtion wbnts to pfrform somf bdtion bbsfd on bn itfm
 * in tiis list bfing sflfdtfd or bdtivbtfd by tif usfr, it siould implfmfnt
 * <dodf>ItfmListfnfr</dodf> or <dodf>AdtionListfnfr</dodf>
 * bs bppropribtf bnd rfgistfr tif nfw listfnfr to rfdfivf
 * fvfnts from tiis list.
 * <p>
 * For multiplf-sflfdtion sdrolling lists, it is donsidfrfd b bfttfr
 * usfr intfrfbdf to usf bn fxtfrnbl gfsturf (sudi bs dlidking on b
 * button) to triggfr tif bdtion.
 * @butior      Sbmi Sibio
 * @sff         jbvb.bwt.fvfnt.ItfmEvfnt
 * @sff         jbvb.bwt.fvfnt.ItfmListfnfr
 * @sff         jbvb.bwt.fvfnt.AdtionEvfnt
 * @sff         jbvb.bwt.fvfnt.AdtionListfnfr
 * @sindf       1.0
 */
publid dlbss List fxtfnds Componfnt implfmfnts ItfmSflfdtbblf, Addfssiblf {
    /**
     * A vfdtor drfbtfd to dontbin itfms wiidi will bfdomf
     * pbrt of tif List Componfnt.
     *
     * @sfribl
     * @sff #bddItfm(String)
     * @sff #gftItfm(int)
     */
    Vfdtor<String>      itfms = nfw Vfdtor<>();

    /**
     * Tiis fifld will rfprfsfnt tif numbfr of visiblf rows in tif
     * <dodf>List</dodf> Componfnt.  It is spfdififd only ondf, bnd
     * tibt is wifn tif list domponfnt is bdtublly
     * drfbtfd.  It will nfvfr dibngf.
     *
     * @sfribl
     * @sff #gftRows()
     */
    int         rows = 0;

    /**
     * <dodf>multiplfModf</dodf> is b vbribblf tibt will
     * bf sft to <dodf>truf</dodf> if b list domponfnt is to bf sft to
     * multiplf sflfdtion modf, tibt is wifrf tif usfr dbn
     * sflfdt morf tibn onf itfm in b list bt onf timf.
     * <dodf>multiplfModf</dodf> will bf sft to fblsf if tif
     * list domponfnt is sft to singlf sflfdtion, tibt is wifrf
     * tif usfr dbn only sflfdt onf itfm on tif list bt bny
     * onf timf.
     *
     * @sfribl
     * @sff #isMultiplfModf()
     * @sff #sftMultiplfModf(boolfbn)
     */
    boolfbn     multiplfModf = fblsf;

    /**
     * <dodf>sflfdtfd</dodf> is bn brrby tibt will dontbin
     * tif indidfs of itfms tibt ibvf bffn sflfdtfd.
     *
     * @sfribl
     * @sff #gftSflfdtfdIndfxfs()
     * @sff #gftSflfdtfdIndfx()
     */
    int         sflfdtfd[] = nfw int[0];

    /**
     * Tiis vbribblf dontbins tif vbluf tibt will bf usfd
     * wifn trying to mbkf b pbrtidulbr list itfm visiblf.
     *
     * @sfribl
     * @sff #mbkfVisiblf(int)
     */
    int         visiblfIndfx = -1;

    trbnsifnt AdtionListfnfr bdtionListfnfr;
    trbnsifnt ItfmListfnfr itfmListfnfr;

    privbtf stbtid finbl String bbsf = "list";
    privbtf stbtid int nbmfCountfr = 0;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
     privbtf stbtid finbl long sfriblVfrsionUID = -3304312411574666869L;

    /**
     * Crfbtfs b nfw sdrolling list.
     * By dffbult, tifrf brf four visiblf linfs bnd multiplf sflfdtions brf
     * not bllowfd.  Notf tibt tiis is b donvfnifndf mftiod for
     * <dodf>List(0, fblsf)</dodf>.  Also notf tibt tif numbfr of visiblf
     * linfs in tif list dbnnot bf dibngfd bftfr it ibs bffn drfbtfd.
     * @fxdfption HfbdlfssExdfption if GrbpiidsEnvironmfnt.isHfbdlfss()
     * rfturns truf.
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     */
    publid List() tirows HfbdlfssExdfption {
        tiis(0, fblsf);
    }

    /**
     * Crfbtfs b nfw sdrolling list initiblizfd witi tif spfdififd
     * numbfr of visiblf linfs. By dffbult, multiplf sflfdtions brf
     * not bllowfd.  Notf tibt tiis is b donvfnifndf mftiod for
     * <dodf>List(rows, fblsf)</dodf>.  Also notf tibt tif numbfr
     * of visiblf rows in tif list dbnnot bf dibngfd bftfr it ibs
     * bffn drfbtfd.
     * @pbrbm       rows tif numbfr of itfms to siow.
     * @fxdfption HfbdlfssExdfption if GrbpiidsEnvironmfnt.isHfbdlfss()
     * rfturns truf.
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sindf       1.1
     */
    publid List(int rows) tirows HfbdlfssExdfption {
        tiis(rows, fblsf);
    }

    /**
     * Tif dffbult numbfr of visiblf rows is 4.  A list witi
     * zfro rows is unusbblf bnd unsigitly.
     */
    finbl stbtid int    DEFAULT_VISIBLE_ROWS = 4;

    /**
     * Crfbtfs b nfw sdrolling list initiblizfd to displby tif spfdififd
     * numbfr of rows. Notf tibt if zfro rows brf spfdififd, tifn
     * tif list will bf drfbtfd witi b dffbult of four rows.
     * Also notf tibt tif numbfr of visiblf rows in tif list dbnnot
     * bf dibngfd bftfr it ibs bffn drfbtfd.
     * If tif vbluf of <dodf>multiplfModf</dodf> is
     * <dodf>truf</dodf>, tifn tif usfr dbn sflfdt multiplf itfms from
     * tif list. If it is <dodf>fblsf</dodf>, only onf itfm bt b timf
     * dbn bf sflfdtfd.
     * @pbrbm       rows   tif numbfr of itfms to siow.
     * @pbrbm       multiplfModf   if <dodf>truf</dodf>,
     *                     tifn multiplf sflfdtions brf bllowfd;
     *                     otifrwisf, only onf itfm dbn bf sflfdtfd bt b timf.
     * @fxdfption HfbdlfssExdfption if GrbpiidsEnvironmfnt.isHfbdlfss()
     * rfturns truf.
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     */
    publid List(int rows, boolfbn multiplfModf) tirows HfbdlfssExdfption {
        GrbpiidsEnvironmfnt.difdkHfbdlfss();
        tiis.rows = (rows != 0) ? rows : DEFAULT_VISIBLE_ROWS;
        tiis.multiplfModf = multiplfModf;
    }

    /**
     * Construdt b nbmf for tiis domponfnt.  Cbllfd by
     * <dodf>gftNbmf</dodf> wifn tif nbmf is <dodf>null</dodf>.
     */
    String donstrudtComponfntNbmf() {
        syndironizfd (List.dlbss) {
            rfturn bbsf + nbmfCountfr++;
        }
    }

    /**
     * Crfbtfs tif pffr for tif list.  Tif pffr bllows us to modify tif
     * list's bppfbrbndf witiout dibnging its fundtionblity.
     */
    publid void bddNotify() {
        syndironizfd (gftTrffLodk()) {
            if (pffr == null)
                pffr = gftToolkit().drfbtfList(tiis);
            supfr.bddNotify();
        }
    }

    /**
     * Rfmovfs tif pffr for tiis list.  Tif pffr bllows us to modify tif
     * list's bppfbrbndf witiout dibnging its fundtionblity.
     */
    publid void rfmovfNotify() {
        syndironizfd (gftTrffLodk()) {
            ListPffr pffr = (ListPffr)tiis.pffr;
            if (pffr != null) {
                sflfdtfd = pffr.gftSflfdtfdIndfxfs();
            }
            supfr.rfmovfNotify();
        }
    }

    /**
     * Gfts tif numbfr of itfms in tif list.
     * @rfturn     tif numbfr of itfms in tif list
     * @sff        #gftItfm
     * @sindf      1.1
     */
    publid int gftItfmCount() {
        rfturn dountItfms();
    }

    /**
     * Rfturns tif numbfr of itfms in tif list.
     *
     * @rfturn tif numbfr of itfms in tif list
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftItfmCount()</dodf>.
     */
    @Dfprfdbtfd
    publid int dountItfms() {
        rfturn itfms.sizf();
    }

    /**
     * Gfts tif itfm bssodibtfd witi tif spfdififd indfx.
     * @rfturn       bn itfm tibt is bssodibtfd witi
     *                    tif spfdififd indfx
     * @pbrbm        indfx tif position of tif itfm
     * @sff          #gftItfmCount
     */
    publid String gftItfm(int indfx) {
        rfturn gftItfmImpl(indfx);
    }

    // NOTE: Tiis mftiod mby bf dbllfd by privilfgfd tirfbds.
    //       Wf implfmfnt tiis fundtionblity in b pbdkbgf-privbtf mftiod
    //       to insurf tibt it dbnnot bf ovfrriddfn by dlifnt subdlbssfs.
    //       DO NOT INVOKE CLIENT CODE ON THIS THREAD!
    finbl String gftItfmImpl(int indfx) {
        rfturn itfms.flfmfntAt(indfx);
    }

    /**
     * Gfts tif itfms in tif list.
     * @rfturn       b string brrby dontbining itfms of tif list
     * @sff          #sflfdt
     * @sff          #dfsflfdt
     * @sff          #isIndfxSflfdtfd
     * @sindf        1.1
     */
    publid syndironizfd String[] gftItfms() {
        String itfmCopifs[] = nfw String[itfms.sizf()];
        itfms.dopyInto(itfmCopifs);
        rfturn itfmCopifs;
    }

    /**
     * Adds tif spfdififd itfm to tif fnd of sdrolling list.
     * @pbrbm itfm tif itfm to bf bddfd
     * @sindf 1.1
     */
    publid void bdd(String itfm) {
        bddItfm(itfm);
    }

    /**
     * Adds tif spfdififd itfm to tif fnd of tif list.
     *
     * @pbrbm  itfm tif itfm to bf bddfd
     * @dfprfdbtfd rfplbdfd by <dodf>bdd(String)</dodf>.
     */
    @Dfprfdbtfd
    publid void bddItfm(String itfm) {
        bddItfm(itfm, -1);
    }

    /**
     * Adds tif spfdififd itfm to tif tif sdrolling list
     * bt tif position indidbtfd by tif indfx.  Tif indfx is
     * zfro-bbsfd.  If tif vbluf of tif indfx is lfss tibn zfro,
     * or if tif vbluf of tif indfx is grfbtfr tibn or fqubl to
     * tif numbfr of itfms in tif list, tifn tif itfm is bddfd
     * to tif fnd of tif list.
     * @pbrbm       itfm   tif itfm to bf bddfd;
     *              if tiis pbrbmftfr is <dodf>null</dodf> tifn tif itfm is
     *              trfbtfd bs bn fmpty string, <dodf>""</dodf>
     * @pbrbm       indfx  tif position bt wiidi to bdd tif itfm
     * @sindf       1.1
     */
    publid void bdd(String itfm, int indfx) {
        bddItfm(itfm, indfx);
    }

    /**
     * Adds tif spfdififd itfm to tif tif list
     * bt tif position indidbtfd by tif indfx.
     *
     * @pbrbm  itfm tif itfm to bf bddfd
     * @pbrbm  indfx tif position bt wiidi to bdd tif itfm
     * @dfprfdbtfd rfplbdfd by <dodf>bdd(String, int)</dodf>.
     */
    @Dfprfdbtfd
    publid syndironizfd void bddItfm(String itfm, int indfx) {
        if (indfx < -1 || indfx >= itfms.sizf()) {
            indfx = -1;
        }

        if (itfm == null) {
            itfm = "";
        }

        if (indfx == -1) {
            itfms.bddElfmfnt(itfm);
        } flsf {
            itfms.insfrtElfmfntAt(itfm, indfx);
        }

        ListPffr pffr = (ListPffr)tiis.pffr;
        if (pffr != null) {
            pffr.bdd(itfm, indfx);
        }
    }

    /**
     * Rfplbdfs tif itfm bt tif spfdififd indfx in tif sdrolling list
     * witi tif nfw string.
     * @pbrbm       nfwVbluf   b nfw string to rfplbdf bn fxisting itfm
     * @pbrbm       indfx      tif position of tif itfm to rfplbdf
     * @fxdfption ArrbyIndfxOutOfBoundsExdfption if <dodf>indfx</dodf>
     *          is out of rbngf
     */
    publid syndironizfd void rfplbdfItfm(String nfwVbluf, int indfx) {
        rfmovf(indfx);
        bdd(nfwVbluf, indfx);
    }

    /**
     * Rfmovfs bll itfms from tiis list.
     * @sff #rfmovf
     * @sff #dflItfms
     * @sindf 1.1
     */
    publid void rfmovfAll() {
        dlfbr();
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>rfmovfAll()</dodf>.
     */
    @Dfprfdbtfd
    publid syndironizfd void dlfbr() {
        ListPffr pffr = (ListPffr)tiis.pffr;
        if (pffr != null) {
            pffr.rfmovfAll();
        }
        itfms = nfw Vfdtor<>();
        sflfdtfd = nfw int[0];
    }

    /**
     * Rfmovfs tif first oddurrfndf of bn itfm from tif list.
     * If tif spfdififd itfm is sflfdtfd, bnd is tif only sflfdtfd
     * itfm in tif list, tif list is sft to ibvf no sflfdtion.
     * @pbrbm        itfm  tif itfm to rfmovf from tif list
     * @fxdfption    IllfgblArgumfntExdfption
     *                     if tif itfm dofsn't fxist in tif list
     * @sindf        1.1
     */
    publid syndironizfd void rfmovf(String itfm) {
        int indfx = itfms.indfxOf(itfm);
        if (indfx < 0) {
            tirow nfw IllfgblArgumfntExdfption("itfm " + itfm +
                                               " not found in list");
        } flsf {
            rfmovf(indfx);
        }
    }

    /**
     * Rfmovfs tif itfm bt tif spfdififd position
     * from tiis sdrolling list.
     * If tif itfm witi tif spfdififd position is sflfdtfd, bnd is tif
     * only sflfdtfd itfm in tif list, tif list is sft to ibvf no sflfdtion.
     * @pbrbm      position   tif indfx of tif itfm to dflftf
     * @sff        #bdd(String, int)
     * @sindf      1.1
     * @fxdfption    ArrbyIndfxOutOfBoundsExdfption
     *               if tif <dodf>position</dodf> is lfss tibn 0 or
     *               grfbtfr tibn <dodf>gftItfmCount()-1</dodf>
     */
    publid void rfmovf(int position) {
        dflItfm(position);
    }

    /**
     * Rfmovfs tif itfm bt tif spfdififd position.
     *
     * @pbrbm  position tif indfx of tif itfm to dflftf
     * @dfprfdbtfd rfplbdfd by <dodf>rfmovf(String)</dodf>
     *             bnd <dodf>rfmovf(int)</dodf>.
     */
    @Dfprfdbtfd
    publid void dflItfm(int position) {
        dflItfms(position, position);
    }

    /**
     * Gfts tif indfx of tif sflfdtfd itfm on tif list,
     *
     * @rfturn        tif indfx of tif sflfdtfd itfm;
     *                if no itfm is sflfdtfd, or if multiplf itfms brf
     *                sflfdtfd, <dodf>-1</dodf> is rfturnfd.
     * @sff           #sflfdt
     * @sff           #dfsflfdt
     * @sff           #isIndfxSflfdtfd
     */
    publid syndironizfd int gftSflfdtfdIndfx() {
        int sfl[] = gftSflfdtfdIndfxfs();
        rfturn (sfl.lfngti == 1) ? sfl[0] : -1;
    }

    /**
     * Gfts tif sflfdtfd indfxfs on tif list.
     *
     * @rfturn        bn brrby of tif sflfdtfd indfxfs on tiis sdrolling list;
     *                if no itfm is sflfdtfd, b zfro-lfngti brrby is rfturnfd.
     * @sff           #sflfdt
     * @sff           #dfsflfdt
     * @sff           #isIndfxSflfdtfd
     */
    publid syndironizfd int[] gftSflfdtfdIndfxfs() {
        ListPffr pffr = (ListPffr)tiis.pffr;
        if (pffr != null) {
            sflfdtfd = pffr.gftSflfdtfdIndfxfs();
        }
        rfturn sflfdtfd.dlonf();
    }

    /**
     * Gfts tif sflfdtfd itfm on tiis sdrolling list.
     *
     * @rfturn        tif sflfdtfd itfm on tif list;
     *                if no itfm is sflfdtfd, or if multiplf itfms brf
     *                sflfdtfd, <dodf>null</dodf> is rfturnfd.
     * @sff           #sflfdt
     * @sff           #dfsflfdt
     * @sff           #isIndfxSflfdtfd
     */
    publid syndironizfd String gftSflfdtfdItfm() {
        int indfx = gftSflfdtfdIndfx();
        rfturn (indfx < 0) ? null : gftItfm(indfx);
    }

    /**
     * Gfts tif sflfdtfd itfms on tiis sdrolling list.
     *
     * @rfturn        bn brrby of tif sflfdtfd itfms on tiis sdrolling list;
     *                if no itfm is sflfdtfd, b zfro-lfngti brrby is rfturnfd.
     * @sff           #sflfdt
     * @sff           #dfsflfdt
     * @sff           #isIndfxSflfdtfd
     */
    publid syndironizfd String[] gftSflfdtfdItfms() {
        int sfl[] = gftSflfdtfdIndfxfs();
        String str[] = nfw String[sfl.lfngti];
        for (int i = 0 ; i < sfl.lfngti ; i++) {
            str[i] = gftItfm(sfl[i]);
        }
        rfturn str;
    }

    /**
     * Gfts tif sflfdtfd itfms on tiis sdrolling list in bn brrby of Objfdts.
     * @rfturn        bn brrby of <dodf>Objfdt</dodf>s rfprfsfnting tif
     *                sflfdtfd itfms on tiis sdrolling list;
     *                if no itfm is sflfdtfd, b zfro-lfngti brrby is rfturnfd.
     * @sff #gftSflfdtfdItfms
     * @sff ItfmSflfdtbblf
     */
    publid Objfdt[] gftSflfdtfdObjfdts() {
        rfturn gftSflfdtfdItfms();
    }

    /**
     * Sflfdts tif itfm bt tif spfdififd indfx in tif sdrolling list.
     *<p>
     * Notf tibt pbssing out of rbngf pbrbmftfrs is invblid,
     * bnd will rfsult in unspfdififd bfibvior.
     *
     * <p>Notf tibt tiis mftiod siould bf primbrily usfd to
     * initiblly sflfdt bn itfm in tiis domponfnt.
     * Progrbmmbtidblly dblling tiis mftiod will <i>not</i> triggfr
     * bn <dodf>ItfmEvfnt</dodf>.  Tif only wby to triggfr bn
     * <dodf>ItfmEvfnt</dodf> is by usfr intfrbdtion.
     *
     * @pbrbm        indfx tif position of tif itfm to sflfdt
     * @sff          #gftSflfdtfdItfm
     * @sff          #dfsflfdt
     * @sff          #isIndfxSflfdtfd
     */
    publid void sflfdt(int indfx) {
        // Bug #4059614: sflfdt dbn't bf syndironizfd wiilf dblling tif pffr,
        // bfdbusf it is dbllfd from tif Window Tirfbd.  It is suffidifnt to
        // syndironizf tif dodf tibt mbnipulbtfs 'sflfdtfd' fxdfpt for tif
        // dbsf wifrf tif pffr dibngfs.  To ibndlf tiis dbsf, wf simply
        // rfpfbt tif sflfdtion prodfss.

        ListPffr pffr;
        do {
            pffr = (ListPffr)tiis.pffr;
            if (pffr != null) {
                pffr.sflfdt(indfx);
                rfturn;
            }

            syndironizfd(tiis)
            {
                boolfbn blrfbdySflfdtfd = fblsf;

                for (int i = 0 ; i < sflfdtfd.lfngti ; i++) {
                    if (sflfdtfd[i] == indfx) {
                        blrfbdySflfdtfd = truf;
                        brfbk;
                    }
                }

                if (!blrfbdySflfdtfd) {
                    if (!multiplfModf) {
                        sflfdtfd = nfw int[1];
                        sflfdtfd[0] = indfx;
                    } flsf {
                        int nfwsfl[] = nfw int[sflfdtfd.lfngti + 1];
                        Systfm.brrbydopy(sflfdtfd, 0, nfwsfl, 0,
                                         sflfdtfd.lfngti);
                        nfwsfl[sflfdtfd.lfngti] = indfx;
                        sflfdtfd = nfwsfl;
                    }
                }
            }
        } wiilf (pffr != tiis.pffr);
    }

    /**
     * Dfsflfdts tif itfm bt tif spfdififd indfx.
     * <p>
     * Notf tibt pbssing out of rbngf pbrbmftfrs is invblid,
     * bnd will rfsult in unspfdififd bfibvior.
     * <p>
     * If tif itfm bt tif spfdififd indfx is not sflfdtfd,
     * tifn tif opfrbtion is ignorfd.
     * @pbrbm        indfx tif position of tif itfm to dfsflfdt
     * @sff          #sflfdt
     * @sff          #gftSflfdtfdItfm
     * @sff          #isIndfxSflfdtfd
     */
    publid syndironizfd void dfsflfdt(int indfx) {
        ListPffr pffr = (ListPffr)tiis.pffr;
        if (pffr != null) {
            if (isMultiplfModf() || (gftSflfdtfdIndfx() == indfx)) {
                pffr.dfsflfdt(indfx);
            }
        }

        for (int i = 0 ; i < sflfdtfd.lfngti ; i++) {
            if (sflfdtfd[i] == indfx) {
                int nfwsfl[] = nfw int[sflfdtfd.lfngti - 1];
                Systfm.brrbydopy(sflfdtfd, 0, nfwsfl, 0, i);
                Systfm.brrbydopy(sflfdtfd, i+1, nfwsfl, i, sflfdtfd.lfngti - (i+1));
                sflfdtfd = nfwsfl;
                rfturn;
            }
        }
    }

    /**
     * Dftfrminfs if tif spfdififd itfm in tiis sdrolling list is
     * sflfdtfd.
     * @pbrbm      indfx   tif itfm to bf difdkfd
     * @rfturn     <dodf>truf</dodf> if tif spfdififd itfm ibs bffn
     *                       sflfdtfd; <dodf>fblsf</dodf> otifrwisf
     * @sff        #sflfdt
     * @sff        #dfsflfdt
     * @sindf      1.1
     */
    publid boolfbn isIndfxSflfdtfd(int indfx) {
        rfturn isSflfdtfd(indfx);
    }

    /**
     * Dftfrminfs if tif spfdififd itfm in tif list is sflfdtfd.
     *
     * @pbrbm  indfx spfdififs tif itfm to bf difdkfd
     * @rfturn {@dodf truf} if tif itfm is sflfdtfd; otifrwisf {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>isIndfxSflfdtfd(int)</dodf>.
     */
    @Dfprfdbtfd
    publid boolfbn isSflfdtfd(int indfx) {
        int sfl[] = gftSflfdtfdIndfxfs();
        for (int i = 0 ; i < sfl.lfngti ; i++) {
            if (sfl[i] == indfx) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Gfts tif numbfr of visiblf linfs in tiis list.  Notf tibt
     * ondf tif <dodf>List</dodf> ibs bffn drfbtfd, tiis numbfr
     * will nfvfr dibngf.
     * @rfturn     tif numbfr of visiblf linfs in tiis sdrolling list
     */
    publid int gftRows() {
        rfturn rows;
    }

    /**
     * Dftfrminfs wiftifr tiis list bllows multiplf sflfdtions.
     *
     * @rfturn     <dodf>truf</dodf> if tiis list bllows multiplf
     *                 sflfdtions; otifrwisf, <dodf>fblsf</dodf>
     * @sff        #sftMultiplfModf
     * @sindf      1.1
     */
    publid boolfbn isMultiplfModf() {
        rfturn bllowsMultiplfSflfdtions();
    }

    /**
     * Dftfrminfs wiftifr tiis list bllows multiplf sflfdtions.
     *
     * @rfturn {@dodf truf} if tiis list bllows multiplf
     *         sflfdtions; otifrwisf {@dodf fblsf}
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>isMultiplfModf()</dodf>.
     */
    @Dfprfdbtfd
    publid boolfbn bllowsMultiplfSflfdtions() {
        rfturn multiplfModf;
    }

    /**
     * Sfts tif flbg tibt dftfrminfs wiftifr tiis list
     * bllows multiplf sflfdtions.
     * Wifn tif sflfdtion modf is dibngfd from multiplf-sflfdtion to
     * singlf-sflfdtion, tif sflfdtfd itfms dibngf bs follows:
     * If b sflfdtfd itfm ibs tif lodbtion dursor, only tibt
     * itfm will rfmbin sflfdtfd.  If no sflfdtfd itfm ibs tif
     * lodbtion dursor, bll itfms will bf dfsflfdtfd.
     * @pbrbm       b   if <dodf>truf</dodf> tifn multiplf sflfdtions
     *                      brf bllowfd; otifrwisf, only onf itfm from
     *                      tif list dbn bf sflfdtfd bt ondf
     * @sff         #isMultiplfModf
     * @sindf       1.1
     */
    publid void sftMultiplfModf(boolfbn b) {
        sftMultiplfSflfdtions(b);
    }

    /**
     * Enbblfs or disbblfs multiplf sflfdtion modf for tiis list.
     *
     * @pbrbm  b {@dodf truf} to fnbblf multiplf modf, {@dodf fblsf} otifrwisf
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>sftMultiplfModf(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid syndironizfd void sftMultiplfSflfdtions(boolfbn b) {
        if (b != multiplfModf) {
            multiplfModf = b;
            ListPffr pffr = (ListPffr)tiis.pffr;
            if (pffr != null) {
                pffr.sftMultiplfModf(b);
            }
        }
    }

    /**
     * Gfts tif indfx of tif itfm tibt wbs lbst mbdf visiblf by
     * tif mftiod <dodf>mbkfVisiblf</dodf>.
     * @rfturn      tif indfx of tif itfm tibt wbs lbst mbdf visiblf
     * @sff         #mbkfVisiblf
     */
    publid int gftVisiblfIndfx() {
        rfturn visiblfIndfx;
    }

    /**
     * Mbkfs tif itfm bt tif spfdififd indfx visiblf.
     * @pbrbm       indfx    tif position of tif itfm
     * @sff         #gftVisiblfIndfx
     */
    publid syndironizfd void mbkfVisiblf(int indfx) {
        visiblfIndfx = indfx;
        ListPffr pffr = (ListPffr)tiis.pffr;
        if (pffr != null) {
            pffr.mbkfVisiblf(indfx);
        }
    }

    /**
     * Gfts tif prfffrrfd dimfnsions for b list witi tif spfdififd
     * numbfr of rows.
     * @pbrbm      rows    numbfr of rows in tif list
     * @rfturn     tif prfffrrfd dimfnsions for displbying tiis sdrolling list
     *             givfn tibt tif spfdififd numbfr of rows must bf visiblf
     * @sff        jbvb.bwt.Componfnt#gftPrfffrrfdSizf
     * @sindf      1.1
     */
    publid Dimfnsion gftPrfffrrfdSizf(int rows) {
        rfturn prfffrrfdSizf(rows);
    }

    /**
     * Rfturns tif prfffrrfd sizf of tiis domponfnt
     * bssuming it ibs tif spfdififd numbfr of rows.
     *
     * @pbrbm  rows tif numbfr of rows
     * @rfturn tif prfffrrfd dimfnsions for displbying tiis list
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftPrfffrrfdSizf(int)</dodf>.
     */
    @Dfprfdbtfd
    publid Dimfnsion prfffrrfdSizf(int rows) {
        syndironizfd (gftTrffLodk()) {
            ListPffr pffr = (ListPffr)tiis.pffr;
            rfturn (pffr != null) ?
                       pffr.gftPrfffrrfdSizf(rows) :
                       supfr.prfffrrfdSizf();
        }
    }

    /**
     * Gfts tif prfffrrfd sizf of tiis sdrolling list.
     * @rfturn     tif prfffrrfd dimfnsions for displbying tiis sdrolling list
     * @sff        jbvb.bwt.Componfnt#gftPrfffrrfdSizf
     * @sindf      1.1
     */
    publid Dimfnsion gftPrfffrrfdSizf() {
        rfturn prfffrrfdSizf();
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftPrfffrrfdSizf()</dodf>.
     */
    @Dfprfdbtfd
    publid Dimfnsion prfffrrfdSizf() {
        syndironizfd (gftTrffLodk()) {
            rfturn (rows > 0) ?
                       prfffrrfdSizf(rows) :
                       supfr.prfffrrfdSizf();
        }
    }

    /**
     * Gfts tif minimum dimfnsions for b list witi tif spfdififd
     * numbfr of rows.
     * @pbrbm      rows    numbfr of rows in tif list
     * @rfturn     tif minimum dimfnsions for displbying tiis sdrolling list
     *             givfn tibt tif spfdififd numbfr of rows must bf visiblf
     * @sff        jbvb.bwt.Componfnt#gftMinimumSizf
     * @sindf      1.1
     */
    publid Dimfnsion gftMinimumSizf(int rows) {
        rfturn minimumSizf(rows);
    }

    /**
     * Rfturns tif minimum dimfnsions for tif list
     * witi tif spfdififd numbfr of rows.
     *
     * @pbrbm  rows tif numbfr of rows in tif list
     * @rfturn tif minimum dimfnsions for displbying tiis list
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftMinimumSizf(int)</dodf>.
     */
    @Dfprfdbtfd
    publid Dimfnsion minimumSizf(int rows) {
        syndironizfd (gftTrffLodk()) {
            ListPffr pffr = (ListPffr)tiis.pffr;
            rfturn (pffr != null) ?
                       pffr.gftMinimumSizf(rows) :
                       supfr.minimumSizf();
        }
    }

    /**
     * Dftfrminfs tif minimum sizf of tiis sdrolling list.
     * @rfturn       tif minimum dimfnsions nffdfd
     *                        to displby tiis sdrolling list
     * @sff          jbvb.bwt.Componfnt#gftMinimumSizf()
     * @sindf        1.1
     */
    publid Dimfnsion gftMinimumSizf() {
        rfturn minimumSizf();
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftMinimumSizf()</dodf>.
     */
    @Dfprfdbtfd
    publid Dimfnsion minimumSizf() {
        syndironizfd (gftTrffLodk()) {
            rfturn (rows > 0) ? minimumSizf(rows) : supfr.minimumSizf();
        }
    }

    /**
     * Adds tif spfdififd itfm listfnfr to rfdfivf itfm fvfnts from
     * tiis list.  Itfm fvfnts brf sfnt in rfsponsf to usfr input, but not
     * in rfsponsf to dblls to <dodf>sflfdt</dodf> or <dodf>dfsflfdt</dodf>.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is tirown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b irff="dod-filfs/AWTTirfbdIssufs.itml#ListfnfrsTirfbds"
     * >AWT Tirfbding Issufs</b> for dftbils on AWT's tirfbding modfl.
     *
     * @pbrbm         l tif itfm listfnfr
     * @sff           #rfmovfItfmListfnfr
     * @sff           #gftItfmListfnfrs
     * @sff           #sflfdt
     * @sff           #dfsflfdt
     * @sff           jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff           jbvb.bwt.fvfnt.ItfmListfnfr
     * @sindf         1.1
     */
    publid syndironizfd void bddItfmListfnfr(ItfmListfnfr l) {
        if (l == null) {
            rfturn;
        }
        itfmListfnfr = AWTEvfntMultidbstfr.bdd(itfmListfnfr, l);
        nfwEvfntsOnly = truf;
    }

    /**
     * Rfmovfs tif spfdififd itfm listfnfr so tibt it no longfr
     * rfdfivfs itfm fvfnts from tiis list.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is tirown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b irff="dod-filfs/AWTTirfbdIssufs.itml#ListfnfrsTirfbds"
     * >AWT Tirfbding Issufs</b> for dftbils on AWT's tirfbding modfl.
     *
     * @pbrbm           l tif itfm listfnfr
     * @sff             #bddItfmListfnfr
     * @sff             #gftItfmListfnfrs
     * @sff             jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff             jbvb.bwt.fvfnt.ItfmListfnfr
     * @sindf           1.1
     */
    publid syndironizfd void rfmovfItfmListfnfr(ItfmListfnfr l) {
        if (l == null) {
            rfturn;
        }
        itfmListfnfr = AWTEvfntMultidbstfr.rfmovf(itfmListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll tif itfm listfnfrs
     * rfgistfrfd on tiis list.
     *
     * @rfturn bll of tiis list's <dodf>ItfmListfnfr</dodf>s
     *         or bn fmpty brrby if no itfm
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff             #bddItfmListfnfr
     * @sff             #rfmovfItfmListfnfr
     * @sff             jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff             jbvb.bwt.fvfnt.ItfmListfnfr
     * @sindf 1.4
     */
    publid syndironizfd ItfmListfnfr[] gftItfmListfnfrs() {
        rfturn gftListfnfrs(ItfmListfnfr.dlbss);
    }

    /**
     * Adds tif spfdififd bdtion listfnfr to rfdfivf bdtion fvfnts from
     * tiis list. Adtion fvfnts oddur wifn b usfr doublf-dlidks
     * on b list itfm or typfs Entfr wifn tif list ibs tif kfybobrd
     * fodus.
     * <p>
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is tirown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b irff="dod-filfs/AWTTirfbdIssufs.itml#ListfnfrsTirfbds"
     * >AWT Tirfbding Issufs</b> for dftbils on AWT's tirfbding modfl.
     *
     * @pbrbm         l tif bdtion listfnfr
     * @sff           #rfmovfAdtionListfnfr
     * @sff           #gftAdtionListfnfrs
     * @sff           jbvb.bwt.fvfnt.AdtionEvfnt
     * @sff           jbvb.bwt.fvfnt.AdtionListfnfr
     * @sindf         1.1
     */
    publid syndironizfd void bddAdtionListfnfr(AdtionListfnfr l) {
        if (l == null) {
            rfturn;
        }
        bdtionListfnfr = AWTEvfntMultidbstfr.bdd(bdtionListfnfr, l);
        nfwEvfntsOnly = truf;
    }

    /**
     * Rfmovfs tif spfdififd bdtion listfnfr so tibt it no longfr
     * rfdfivfs bdtion fvfnts from tiis list. Adtion fvfnts
     * oddur wifn b usfr doublf-dlidks on b list itfm.
     * If listfnfr <dodf>l</dodf> is <dodf>null</dodf>,
     * no fxdfption is tirown bnd no bdtion is pfrformfd.
     * <p>Rfffr to <b irff="dod-filfs/AWTTirfbdIssufs.itml#ListfnfrsTirfbds"
     * >AWT Tirfbding Issufs</b> for dftbils on AWT's tirfbding modfl.
     *
     * @pbrbm           l     tif bdtion listfnfr
     * @sff             #bddAdtionListfnfr
     * @sff             #gftAdtionListfnfrs
     * @sff             jbvb.bwt.fvfnt.AdtionEvfnt
     * @sff             jbvb.bwt.fvfnt.AdtionListfnfr
     * @sindf           1.1
     */
    publid syndironizfd void rfmovfAdtionListfnfr(AdtionListfnfr l) {
        if (l == null) {
            rfturn;
        }
        bdtionListfnfr = AWTEvfntMultidbstfr.rfmovf(bdtionListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll tif bdtion listfnfrs
     * rfgistfrfd on tiis list.
     *
     * @rfturn bll of tiis list's <dodf>AdtionListfnfr</dodf>s
     *         or bn fmpty brrby if no bdtion
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff             #bddAdtionListfnfr
     * @sff             #rfmovfAdtionListfnfr
     * @sff             jbvb.bwt.fvfnt.AdtionEvfnt
     * @sff             jbvb.bwt.fvfnt.AdtionListfnfr
     * @sindf 1.4
     */
    publid syndironizfd AdtionListfnfr[] gftAdtionListfnfrs() {
        rfturn gftListfnfrs(AdtionListfnfr.dlbss);
    }

    /**
     * Rfturns bn brrby of bll tif objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon tiis <dodf>List</dodf>.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using tif
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mftiod.
     *
     * <p>
     * You dbn spfdify tif <dodf>listfnfrTypf</dodf> brgumfnt
     * witi b dlbss litfrbl, sudi bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * <dodf>List</dodf> <dodf>l</dodf>
     * for its itfm listfnfrs witi tif following dodf:
     *
     * <prf>ItfmListfnfr[] ils = (ItfmListfnfr[])(l.gftListfnfrs(ItfmListfnfr.dlbss));</prf>
     *
     * If no sudi listfnfrs fxist, tiis mftiod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf tif typf of listfnfrs rfqufstfd; tiis pbrbmftfr
     *          siould spfdify bn intfrfbdf tibt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on tiis list,
     *          or bn fmpty brrby if no sudi
     *          listfnfrs ibvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf tibt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sff #gftItfmListfnfrs
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        EvfntListfnfr l = null;
        if  (listfnfrTypf == AdtionListfnfr.dlbss) {
            l = bdtionListfnfr;
        } flsf if  (listfnfrTypf == ItfmListfnfr.dlbss) {
            l = itfmListfnfr;
        } flsf {
            rfturn supfr.gftListfnfrs(listfnfrTypf);
        }
        rfturn AWTEvfntMultidbstfr.gftListfnfrs(l, listfnfrTypf);
    }

    // REMIND: rfmovf wifn filtfring is donf bt lowfr lfvfl
    boolfbn fvfntEnbblfd(AWTEvfnt f) {
        switdi(f.id) {
          dbsf AdtionEvfnt.ACTION_PERFORMED:
            if ((fvfntMbsk & AWTEvfnt.ACTION_EVENT_MASK) != 0 ||
                bdtionListfnfr != null) {
                rfturn truf;
            }
            rfturn fblsf;
          dbsf ItfmEvfnt.ITEM_STATE_CHANGED:
            if ((fvfntMbsk & AWTEvfnt.ITEM_EVENT_MASK) != 0 ||
                itfmListfnfr != null) {
                rfturn truf;
            }
            rfturn fblsf;
          dffbult:
            brfbk;
        }
        rfturn supfr.fvfntEnbblfd(f);
    }

    /**
     * Prodfssfs fvfnts on tiis sdrolling list. If bn fvfnt is
     * bn instbndf of <dodf>ItfmEvfnt</dodf>, it invokfs tif
     * <dodf>prodfssItfmEvfnt</dodf> mftiod. Elsf, if tif
     * fvfnt is bn instbndf of <dodf>AdtionEvfnt</dodf>,
     * it invokfs <dodf>prodfssAdtionEvfnt</dodf>.
     * If tif fvfnt is not bn itfm fvfnt or bn bdtion fvfnt,
     * it invokfs <dodf>prodfssEvfnt</dodf> on tif supfrdlbss.
     * <p>Notf tibt if tif fvfnt pbrbmftfr is <dodf>null</dodf>
     * tif bfibvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm        f tif fvfnt
     * @sff          jbvb.bwt.fvfnt.AdtionEvfnt
     * @sff          jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff          #prodfssAdtionEvfnt
     * @sff          #prodfssItfmEvfnt
     * @sindf        1.1
     */
    protfdtfd void prodfssEvfnt(AWTEvfnt f) {
        if (f instbndfof ItfmEvfnt) {
            prodfssItfmEvfnt((ItfmEvfnt)f);
            rfturn;
        } flsf if (f instbndfof AdtionEvfnt) {
            prodfssAdtionEvfnt((AdtionEvfnt)f);
            rfturn;
        }
        supfr.prodfssEvfnt(f);
    }

    /**
     * Prodfssfs itfm fvfnts oddurring on tiis list by
     * dispbtdiing tifm to bny rfgistfrfd
     * <dodf>ItfmListfnfr</dodf> objfdts.
     * <p>
     * Tiis mftiod is not dbllfd unlfss itfm fvfnts brf
     * fnbblfd for tiis domponfnt. Itfm fvfnts brf fnbblfd
     * wifn onf of tif following oddurs:
     * <ul>
     * <li>An <dodf>ItfmListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddItfmListfnfr</dodf>.
     * <li>Itfm fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>Notf tibt if tif fvfnt pbrbmftfr is <dodf>null</dodf>
     * tif bfibvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f tif itfm fvfnt
     * @sff         jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff         jbvb.bwt.fvfnt.ItfmListfnfr
     * @sff         #bddItfmListfnfr
     * @sff         jbvb.bwt.Componfnt#fnbblfEvfnts
     * @sindf       1.1
     */
    protfdtfd void prodfssItfmEvfnt(ItfmEvfnt f) {
        ItfmListfnfr listfnfr = itfmListfnfr;
        if (listfnfr != null) {
            listfnfr.itfmStbtfCibngfd(f);
        }
    }

    /**
     * Prodfssfs bdtion fvfnts oddurring on tiis domponfnt
     * by dispbtdiing tifm to bny rfgistfrfd
     * <dodf>AdtionListfnfr</dodf> objfdts.
     * <p>
     * Tiis mftiod is not dbllfd unlfss bdtion fvfnts brf
     * fnbblfd for tiis domponfnt. Adtion fvfnts brf fnbblfd
     * wifn onf of tif following oddurs:
     * <ul>
     * <li>An <dodf>AdtionListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddAdtionListfnfr</dodf>.
     * <li>Adtion fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>Notf tibt if tif fvfnt pbrbmftfr is <dodf>null</dodf>
     * tif bfibvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f tif bdtion fvfnt
     * @sff         jbvb.bwt.fvfnt.AdtionEvfnt
     * @sff         jbvb.bwt.fvfnt.AdtionListfnfr
     * @sff         #bddAdtionListfnfr
     * @sff         jbvb.bwt.Componfnt#fnbblfEvfnts
     * @sindf       1.1
     */
    protfdtfd void prodfssAdtionEvfnt(AdtionEvfnt f) {
        AdtionListfnfr listfnfr = bdtionListfnfr;
        if (listfnfr != null) {
            listfnfr.bdtionPfrformfd(f);
        }
    }

    /**
     * Rfturns tif pbrbmftfr string rfprfsfnting tif stbtf of tiis
     * sdrolling list. Tiis string is usfful for dfbugging.
     * @rfturn    tif pbrbmftfr string of tiis sdrolling list
     */
    protfdtfd String pbrbmString() {
        rfturn supfr.pbrbmString() + ",sflfdtfd=" + gftSflfdtfdItfm();
    }

    /**
     * Dflftfs tif list itfms in tif spfdififd indfx rbngf.
     *
     * @pbrbm  stbrt tif bfginning indfx of tif rbngf to dflftf
     * @pbrbm  fnd tif fnding indfx of tif rbngf to dflftf
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * Not for publid usf in tif futurf.
     * Tiis mftiod is fxpfdtfd to bf rftbinfd only bs b pbdkbgf
     * privbtf mftiod.
     */
    @Dfprfdbtfd
    publid syndironizfd void dflItfms(int stbrt, int fnd) {
        for (int i = fnd; i >= stbrt; i--) {
            itfms.rfmovfElfmfntAt(i);
        }
        ListPffr pffr = (ListPffr)tiis.pffr;
        if (pffr != null) {
            pffr.dflItfms(stbrt, fnd);
        }
    }

    /*
     * Sfriblizbtion support.  Sindf tif vbluf of tif sflfdtfd
     * fifld isn't nfdfssbrily up to dbtf, wf synd it up witi tif
     * pffr bfforf sfriblizing.
     */

    /**
     * Tif <dodf>List</dodf> domponfnt's
     * Sfriblizfd Dbtb Vfrsion.
     *
     * @sfribl
     */
    privbtf int listSfriblizfdDbtbVfrsion = 1;

    /**
     * Writfs dffbult sfriblizbblf fiflds to strfbm.  Writfs
     * b list of sfriblizbblf <dodf>ItfmListfnfrs</dodf>
     * bnd <dodf>AdtionListfnfrs</dodf> bs optionbl dbtb.
     * Tif non-sfriblizbblf listfnfrs brf dftfdtfd bnd
     * no bttfmpt is mbdf to sfriblizf tifm.
     *
     * @sfriblDbtb <dodf>null</dodf> tfrminbtfd sfqufndf of 0
     *  or morf pbirs; tif pbir donsists of b <dodf>String</dodf>
     *  bnd bn <dodf>Objfdt</dodf>; tif <dodf>String</dodf>
     *  indidbtfs tif typf of objfdt bnd is onf of tif
     *  following:
     *  <dodf>itfmListfnfrK</dodf> indidbting bn
     *    <dodf>ItfmListfnfr</dodf> objfdt;
     *  <dodf>bdtionListfnfrK</dodf> indidbting bn
     *    <dodf>AdtionListfnfr</dodf> objfdt
     *
     * @pbrbm s tif <dodf>ObjfdtOutputStrfbm</dodf> to writf
     * @sff AWTEvfntMultidbstfr#sbvf(ObjfdtOutputStrfbm, String, EvfntListfnfr)
     * @sff jbvb.bwt.Componfnt#itfmListfnfrK
     * @sff jbvb.bwt.Componfnt#bdtionListfnfrK
     * @sff #rfbdObjfdt(ObjfdtInputStrfbm)
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s)
      tirows IOExdfption
    {
      syndironizfd (tiis) {
        ListPffr pffr = (ListPffr)tiis.pffr;
        if (pffr != null) {
          sflfdtfd = pffr.gftSflfdtfdIndfxfs();
        }
      }
      s.dffbultWritfObjfdt();

      AWTEvfntMultidbstfr.sbvf(s, itfmListfnfrK, itfmListfnfr);
      AWTEvfntMultidbstfr.sbvf(s, bdtionListfnfrK, bdtionListfnfr);
      s.writfObjfdt(null);
    }

    /**
     * Rfbds tif <dodf>ObjfdtInputStrfbm</dodf> bnd if it
     * isn't <dodf>null</dodf> bdds b listfnfr to rfdfivf
     * boti itfm fvfnts bnd bdtion fvfnts (bs spfdififd
     * by tif kfy storfd in tif strfbm) firfd by tif
     * <dodf>List</dodf>.
     * Unrfdognizfd kfys or vblufs will bf ignorfd.
     *
     * @pbrbm s tif <dodf>ObjfdtInputStrfbm</dodf> to writf
     * @fxdfption HfbdlfssExdfption if
     *   <dodf>GrbpiidsEnvironmfnt.isHfbdlfss</dodf> rfturns
     *   <dodf>truf</dodf>
     * @sff #rfmovfItfmListfnfr(ItfmListfnfr)
     * @sff #bddItfmListfnfr(ItfmListfnfr)
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sff #writfObjfdt(ObjfdtOutputStrfbm)
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
      tirows ClbssNotFoundExdfption, IOExdfption, HfbdlfssExdfption
    {
      GrbpiidsEnvironmfnt.difdkHfbdlfss();
      s.dffbultRfbdObjfdt();

      Objfdt kfyOrNull;
      wiilf(null != (kfyOrNull = s.rfbdObjfdt())) {
        String kfy = ((String)kfyOrNull).intfrn();

        if (itfmListfnfrK == kfy)
          bddItfmListfnfr((ItfmListfnfr)(s.rfbdObjfdt()));

        flsf if (bdtionListfnfrK == kfy)
          bddAdtionListfnfr((AdtionListfnfr)(s.rfbdObjfdt()));

        flsf // skip vbluf for unrfdognizfd kfy
          s.rfbdObjfdt();
      }
    }


/////////////////
// Addfssibility support
////////////////


    /**
     * Gfts tif <dodf>AddfssiblfContfxt</dodf> bssodibtfd witi tiis
     * <dodf>List</dodf>. For lists, tif <dodf>AddfssiblfContfxt</dodf>
     * tbkfs tif form of bn <dodf>AddfssiblfAWTList</dodf>.
     * A nfw <dodf>AddfssiblfAWTList</dodf> instbndf is drfbtfd, if nfdfssbry.
     *
     * @rfturn bn <dodf>AddfssiblfAWTList</dodf> tibt sfrvfs bs tif
     *         <dodf>AddfssiblfContfxt</dodf> of tiis <dodf>List</dodf>
     * @sindf 1.3
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfAWTList();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * Tiis dlbss implfmfnts bddfssibility support for tif
     * <dodf>List</dodf> dlbss.  It providfs bn implfmfntbtion of tif
     * Jbvb Addfssibility API bppropribtf to list usfr-intfrfbdf flfmfnts.
     * @sindf 1.3
     */
    protfdtfd dlbss AddfssiblfAWTList fxtfnds AddfssiblfAWTComponfnt
        implfmfnts AddfssiblfSflfdtion, ItfmListfnfr, AdtionListfnfr
    {
        /*
         * JDK 1.3 sfriblVfrsionUID
         */
        privbtf stbtid finbl long sfriblVfrsionUID = 7924617370136012829L;

        /**
         * Construdts nfw {@dodf AddfssiblfAWTList}
         */
        publid AddfssiblfAWTList() {
            supfr();
            List.tiis.bddAdtionListfnfr(tiis);
            List.tiis.bddItfmListfnfr(tiis);
        }

        publid void bdtionPfrformfd(AdtionEvfnt fvfnt)  {
        }

        publid void itfmStbtfCibngfd(ItfmEvfnt fvfnt)  {
        }

        /**
         * Gft tif stbtf sft of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfStbtf dontbining tif durrfnt stbtf
         * of tif objfdt
         * @sff AddfssiblfStbtf
         */
        publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
            AddfssiblfStbtfSft stbtfs = supfr.gftAddfssiblfStbtfSft();
            if (List.tiis.isMultiplfModf())  {
                stbtfs.bdd(AddfssiblfStbtf.MULTISELECTABLE);
            }
            rfturn stbtfs;
        }

        /**
         * Gft tif rolf of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing tif rolf of tif
         * objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.LIST;
        }

        /**
         * Rfturns tif Addfssiblf diild dontbinfd bt tif lodbl doordinbtf
         * Point, if onf fxists.
         *
         * @rfturn tif Addfssiblf bt tif spfdififd lodbtion, if it fxists
         */
        publid Addfssiblf gftAddfssiblfAt(Point p) {
            rfturn null; // frfdxFIXME Not implfmfntfd yft
        }

        /**
         * Rfturns tif numbfr of bddfssiblf diildrfn in tif objfdt.  If bll
         * of tif diildrfn of tiis objfdt implfmfnt Addfssiblf, tibn tiis
         * mftiod siould rfturn tif numbfr of diildrfn of tiis objfdt.
         *
         * @rfturn tif numbfr of bddfssiblf diildrfn in tif objfdt.
         */
        publid int gftAddfssiblfCiildrfnCount() {
            rfturn List.tiis.gftItfmCount();
        }

        /**
         * Rfturn tif nti Addfssiblf diild of tif objfdt.
         *
         * @pbrbm i zfro-bbsfd indfx of diild
         * @rfturn tif nti Addfssiblf diild of tif objfdt
         */
        publid Addfssiblf gftAddfssiblfCiild(int i) {
            syndironizfd(List.tiis)  {
                if (i >= List.tiis.gftItfmCount()) {
                    rfturn null;
                } flsf {
                    rfturn nfw AddfssiblfAWTListCiild(List.tiis, i);
                }
            }
        }

        /**
         * Gft tif AddfssiblfSflfdtion bssodibtfd witi tiis objfdt.  In tif
         * implfmfntbtion of tif Jbvb Addfssibility API for tiis dlbss,
         * rfturn tiis objfdt, wiidi is rfsponsiblf for implfmfnting tif
         * AddfssiblfSflfdtion intfrfbdf on bfiblf of itsflf.
         *
         * @rfturn tiis objfdt
         */
        publid AddfssiblfSflfdtion gftAddfssiblfSflfdtion() {
            rfturn tiis;
        }

    // AddfssiblfSflfdtion mftiods

        /**
         * Rfturns tif numbfr of itfms durrfntly sflfdtfd.
         * If no itfms brf sflfdtfd, tif rfturn vbluf will bf 0.
         *
         * @rfturn tif numbfr of itfms durrfntly sflfdtfd.
         */
         publid int gftAddfssiblfSflfdtionCount() {
             rfturn List.tiis.gftSflfdtfdIndfxfs().lfngti;
         }

        /**
         * Rfturns bn Addfssiblf rfprfsfnting tif spfdififd sflfdtfd itfm
         * in tif objfdt.  If tifrf isn't b sflfdtion, or tifrf brf
         * ffwfr itfms sflfdtfd tibn tif intfgfr pbssfd in, tif rfturn
         * vbluf will bf null.
         *
         * @pbrbm i tif zfro-bbsfd indfx of sflfdtfd itfms
         * @rfturn bn Addfssiblf dontbining tif sflfdtfd itfm
         */
         publid Addfssiblf gftAddfssiblfSflfdtion(int i) {
             syndironizfd(List.tiis)  {
                 int lfn = gftAddfssiblfSflfdtionCount();
                 if (i < 0 || i >= lfn) {
                     rfturn null;
                 } flsf {
                     rfturn gftAddfssiblfCiild(List.tiis.gftSflfdtfdIndfxfs()[i]);
                 }
             }
         }

        /**
         * Rfturns truf if tif durrfnt diild of tiis objfdt is sflfdtfd.
         *
         * @pbrbm i tif zfro-bbsfd indfx of tif diild in tiis Addfssiblf
         * objfdt.
         * @sff AddfssiblfContfxt#gftAddfssiblfCiild
         */
        publid boolfbn isAddfssiblfCiildSflfdtfd(int i) {
            rfturn List.tiis.isIndfxSflfdtfd(i);
        }

        /**
         * Adds tif spfdififd sflfdtfd itfm in tif objfdt to tif objfdt's
         * sflfdtion.  If tif objfdt supports multiplf sflfdtions,
         * tif spfdififd itfm is bddfd to bny fxisting sflfdtion, otifrwisf
         * it rfplbdfs bny fxisting sflfdtion in tif objfdt.  If tif
         * spfdififd itfm is blrfbdy sflfdtfd, tiis mftiod ibs no ffffdt.
         *
         * @pbrbm i tif zfro-bbsfd indfx of sflfdtbblf itfms
         */
         publid void bddAddfssiblfSflfdtion(int i) {
             List.tiis.sflfdt(i);
         }

        /**
         * Rfmovfs tif spfdififd sflfdtfd itfm in tif objfdt from tif objfdt's
         * sflfdtion.  If tif spfdififd itfm isn't durrfntly sflfdtfd, tiis
         * mftiod ibs no ffffdt.
         *
         * @pbrbm i tif zfro-bbsfd indfx of sflfdtbblf itfms
         */
         publid void rfmovfAddfssiblfSflfdtion(int i) {
             List.tiis.dfsflfdt(i);
         }

        /**
         * Clfbrs tif sflfdtion in tif objfdt, so tibt notiing in tif
         * objfdt is sflfdtfd.
         */
         publid void dlfbrAddfssiblfSflfdtion() {
             syndironizfd(List.tiis)  {
                 int sflfdtfdIndfxfs[] = List.tiis.gftSflfdtfdIndfxfs();
                 if (sflfdtfdIndfxfs == null)
                     rfturn;
                 for (int i = sflfdtfdIndfxfs.lfngti - 1; i >= 0; i--) {
                     List.tiis.dfsflfdt(sflfdtfdIndfxfs[i]);
                 }
             }
         }

        /**
         * Cbusfs fvfry sflfdtfd itfm in tif objfdt to bf sflfdtfd
         * if tif objfdt supports multiplf sflfdtions.
         */
         publid void sflfdtAllAddfssiblfSflfdtion() {
             syndironizfd(List.tiis)  {
                 for (int i = List.tiis.gftItfmCount() - 1; i >= 0; i--) {
                     List.tiis.sflfdt(i);
                 }
             }
         }

       /**
        * Tiis dlbss implfmfnts bddfssibility support for
        * List diildrfn.  It providfs bn implfmfntbtion of tif
        * Jbvb Addfssibility API bppropribtf to list diildrfn
        * usfr-intfrfbdf flfmfnts.
        * @sindf 1.3
        */
        protfdtfd dlbss AddfssiblfAWTListCiild fxtfnds AddfssiblfAWTComponfnt
            implfmfnts Addfssiblf
        {
            /*
             * JDK 1.3 sfriblVfrsionUID
             */
            privbtf stbtid finbl long sfriblVfrsionUID = 4412022926028300317L;

        // [[[FIXME]]] nffd to finisi implfmfnting tiis!!!

            privbtf List pbrfnt;
            privbtf int  indfxInPbrfnt;

            /**
             * Construdts nfw {@dodf AddfssiblfAWTListCiild} witi tif givfn
             * pbrfnt {@dodf List} bnd 0-bbsfd indfx of tiis objfdt in tif pbrfnt.
             *
             * @pbrbm  pbrfnt tif pbrfnt {@dodf List}
             * @pbrbm  indfxInPbrfnt tif indfx in tif pbrfnt
             */
            publid AddfssiblfAWTListCiild(List pbrfnt, int indfxInPbrfnt)  {
                tiis.pbrfnt = pbrfnt;
                tiis.sftAddfssiblfPbrfnt(pbrfnt);
                tiis.indfxInPbrfnt = indfxInPbrfnt;
            }

            //
            // rfquirfd Addfssiblf mftiods
            //
          /**
           * Gfts tif AddfssiblfContfxt for tiis objfdt.  In tif
           * implfmfntbtion of tif Jbvb Addfssibility API for tiis dlbss,
           * rfturn tiis objfdt, wiidi bdts bs its own AddfssiblfContfxt.
           *
           * @rfturn tiis objfdt
           */
            publid AddfssiblfContfxt gftAddfssiblfContfxt() {
                rfturn tiis;
            }

            //
            // rfquirfd AddfssiblfContfxt mftiods
            //

            /**
             * Gft tif rolf of tiis objfdt.
             *
             * @rfturn bn instbndf of AddfssiblfRolf dfsdribing tif rolf of
             * tif objfdt
             * @sff AddfssiblfRolf
             */
            publid AddfssiblfRolf gftAddfssiblfRolf() {
                rfturn AddfssiblfRolf.LIST_ITEM;
            }

            /**
             * Gft tif stbtf sft of tiis objfdt.  Tif AddfssiblfStbtfSft of bn
             * objfdt is domposfd of b sft of uniquf AddfssiblfStbtf's.  A
             * dibngf in tif AddfssiblfStbtfSft of bn objfdt will dbusf b
             * PropfrtyCibngfEvfnt to bf firfd for tif
             * ACCESSIBLE_STATE_PROPERTY propfrty.
             *
             * @rfturn bn instbndf of AddfssiblfStbtfSft dontbining tif
             * durrfnt stbtf sft of tif objfdt
             * @sff AddfssiblfStbtfSft
             * @sff AddfssiblfStbtf
             * @sff #bddPropfrtyCibngfListfnfr
             */
            publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
                AddfssiblfStbtfSft stbtfs = supfr.gftAddfssiblfStbtfSft();
                if (pbrfnt.isIndfxSflfdtfd(indfxInPbrfnt)) {
                    stbtfs.bdd(AddfssiblfStbtf.SELECTED);
                }
                rfturn stbtfs;
            }

            /**
             * Gfts tif lodblf of tif domponfnt. If tif domponfnt dofs not
             * ibvf b lodblf, tifn tif lodblf of its pbrfnt is rfturnfd.
             *
             * @rfturn Tiis domponfnt's lodblf.  If tiis domponfnt dofs not ibvf
             * b lodblf, tif lodblf of its pbrfnt is rfturnfd.
             *
             * @fxdfption IllfgblComponfntStbtfExdfption
             * If tif Componfnt dofs not ibvf its own lodblf bnd ibs not yft
             * bffn bddfd to b dontbinmfnt iifrbrdiy sudi tibt tif lodblf dbn
             * bf dftfrminfd from tif dontbining pbrfnt.
             */
            publid Lodblf gftLodblf() {
                rfturn pbrfnt.gftLodblf();
            }

            /**
             * Gft tif 0-bbsfd indfx of tiis objfdt in its bddfssiblf pbrfnt.
             *
             * @rfturn tif 0-bbsfd indfx of tiis objfdt in its pbrfnt; -1 if
             * tiis objfdt dofs not ibvf bn bddfssiblf pbrfnt.
             *
             * @sff #gftAddfssiblfPbrfnt
             * @sff #gftAddfssiblfCiildrfnCount
             * @sff #gftAddfssiblfCiild
             */
            publid int gftAddfssiblfIndfxInPbrfnt() {
                rfturn indfxInPbrfnt;
            }

            /**
             * Rfturns tif numbfr of bddfssiblf diildrfn of tif objfdt.
             *
             * @rfturn tif numbfr of bddfssiblf diildrfn of tif objfdt.
             */
            publid int gftAddfssiblfCiildrfnCount() {
                rfturn 0;       // list flfmfnts dbn't ibvf diildrfn
            }

            /**
             * Rfturn tif spfdififd Addfssiblf diild of tif objfdt.  Tif
             * Addfssiblf diildrfn of bn Addfssiblf objfdt brf zfro-bbsfd,
             * so tif first diild of bn Addfssiblf diild is bt indfx 0, tif
             * sfdond diild is bt indfx 1, bnd so on.
             *
             * @pbrbm i zfro-bbsfd indfx of diild
             * @rfturn tif Addfssiblf diild of tif objfdt
             * @sff #gftAddfssiblfCiildrfnCount
             */
            publid Addfssiblf gftAddfssiblfCiild(int i) {
                rfturn null;    // list flfmfnts dbn't ibvf diildrfn
            }


            //
            // AddfssiblfComponfnt dflfgbtbtion to pbrfnt List
            //

            /**
             * Gft tif bbdkground dolor of tiis objfdt.
             *
             * @rfturn tif bbdkground dolor, if supportfd, of tif objfdt;
             * otifrwisf, null
             * @sff #sftBbdkground
             */
            publid Color gftBbdkground() {
                rfturn pbrfnt.gftBbdkground();
            }

            /**
             * Sft tif bbdkground dolor of tiis objfdt.
             *
             * @pbrbm d tif nfw Color for tif bbdkground
             * @sff #sftBbdkground
             */
            publid void sftBbdkground(Color d) {
                pbrfnt.sftBbdkground(d);
            }

            /**
             * Gft tif forfground dolor of tiis objfdt.
             *
             * @rfturn tif forfground dolor, if supportfd, of tif objfdt;
             * otifrwisf, null
             * @sff #sftForfground
             */
            publid Color gftForfground() {
                rfturn pbrfnt.gftForfground();
            }

            /**
             * Sft tif forfground dolor of tiis objfdt.
             *
             * @pbrbm d tif nfw Color for tif forfground
             * @sff #gftForfground
             */
            publid void sftForfground(Color d) {
                pbrfnt.sftForfground(d);
            }

            /**
             * Gft tif Cursor of tiis objfdt.
             *
             * @rfturn tif Cursor, if supportfd, of tif objfdt; otifrwisf, null
             * @sff #sftCursor
             */
            publid Cursor gftCursor() {
                rfturn pbrfnt.gftCursor();
            }

            /**
             * Sft tif Cursor of tiis objfdt.
             * <p>
             * Tif mftiod mby ibvf no visubl ffffdt if tif Jbvb plbtform
             * implfmfntbtion bnd/or tif nbtivf systfm do not support
             * dibnging tif mousf dursor sibpf.
             * @pbrbm dursor tif nfw Cursor for tif objfdt
             * @sff #gftCursor
             */
            publid void sftCursor(Cursor dursor) {
                pbrfnt.sftCursor(dursor);
            }

            /**
             * Gft tif Font of tiis objfdt.
             *
             * @rfturn tif Font,if supportfd, for tif objfdt; otifrwisf, null
             * @sff #sftFont
             */
            publid Font gftFont() {
                rfturn pbrfnt.gftFont();
            }

            /**
             * Sft tif Font of tiis objfdt.
             *
             * @pbrbm f tif nfw Font for tif objfdt
             * @sff #gftFont
             */
            publid void sftFont(Font f) {
                pbrfnt.sftFont(f);
            }

            /**
             * Gft tif FontMftrids of tiis objfdt.
             *
             * @pbrbm f tif Font
             * @rfturn tif FontMftrids, if supportfd, tif objfdt; otifrwisf, null
             * @sff #gftFont
             */
            publid FontMftrids gftFontMftrids(Font f) {
                rfturn pbrfnt.gftFontMftrids(f);
            }

            /**
             * Dftfrminf if tif objfdt is fnbblfd.  Objfdts tibt brf fnbblfd
             * will blso ibvf tif AddfssiblfStbtf.ENABLED stbtf sft in tifir
             * AddfssiblfStbtfSft.
             *
             * @rfturn truf if objfdt is fnbblfd; otifrwisf, fblsf
             * @sff #sftEnbblfd
             * @sff AddfssiblfContfxt#gftAddfssiblfStbtfSft
             * @sff AddfssiblfStbtf#ENABLED
             * @sff AddfssiblfStbtfSft
             */
            publid boolfbn isEnbblfd() {
                rfturn pbrfnt.isEnbblfd();
            }

            /**
             * Sft tif fnbblfd stbtf of tif objfdt.
             *
             * @pbrbm b if truf, fnbblfs tiis objfdt; otifrwisf, disbblfs it
             * @sff #isEnbblfd
             */
            publid void sftEnbblfd(boolfbn b) {
                pbrfnt.sftEnbblfd(b);
            }

            /**
             * Dftfrminf if tif objfdt is visiblf.  Notf: tiis mfbns tibt tif
             * objfdt intfnds to bf visiblf; iowfvfr, it mby not bf
             * siowing on tif sdrffn bfdbusf onf of tif objfdts tibt tiis objfdt
             * is dontbinfd by is durrfntly not visiblf.  To dftfrminf if bn
             * objfdt is siowing on tif sdrffn, usf isSiowing().
             * <p>Objfdts tibt brf visiblf will blso ibvf tif
             * AddfssiblfStbtf.VISIBLE stbtf sft in tifir AddfssiblfStbtfSft.
             *
             * @rfturn truf if objfdt is visiblf; otifrwisf, fblsf
             * @sff #sftVisiblf
             * @sff AddfssiblfContfxt#gftAddfssiblfStbtfSft
             * @sff AddfssiblfStbtf#VISIBLE
             * @sff AddfssiblfStbtfSft
             */
            publid boolfbn isVisiblf() {
                // [[[FIXME]]] nffds to work likf isSiowing() bflow
                rfturn fblsf;
                // rfturn pbrfnt.isVisiblf();
            }

            /**
             * Sft tif visiblf stbtf of tif objfdt.
             *
             * @pbrbm b if truf, siows tiis objfdt; otifrwisf, iidfs it
             * @sff #isVisiblf
             */
            publid void sftVisiblf(boolfbn b) {
                // [[[FIXME]]] siould sdroll to itfm to mbkf it siow!
                pbrfnt.sftVisiblf(b);
            }

            /**
             * Dftfrminf if tif objfdt is siowing.  Tiis is dftfrminfd by
             * difdking tif visibility of tif objfdt bnd visibility of tif
             * objfdt bndfstors.
             * Notf: tiis will rfturn truf fvfn if tif objfdt is obsdurfd
             * by bnotifr (for fxbmplf, it to objfdt is undfrnfbti b mfnu
             * tibt wbs pullfd down).
             *
             * @rfturn truf if objfdt is siowing; otifrwisf, fblsf
             */
            publid boolfbn isSiowing() {
                // [[[FIXME]]] only if it's siowing!!!
                rfturn fblsf;
                // rfturn pbrfnt.isSiowing();
            }

            /**
             * Cifdks wiftifr tif spfdififd point is witiin tiis objfdt's
             * bounds, wifrf tif point's x bnd y doordinbtfs brf dffinfd to
             * bf rflbtivf to tif doordinbtf systfm of tif objfdt.
             *
             * @pbrbm p tif Point rflbtivf to tif doordinbtf systfm of tif
             * objfdt
             * @rfturn truf if objfdt dontbins Point; otifrwisf fblsf
             * @sff #gftBounds
             */
            publid boolfbn dontbins(Point p) {
                // [[[FIXME]]] - only if p is witiin tif list flfmfnt!!!
                rfturn fblsf;
                // rfturn pbrfnt.dontbins(p);
            }

            /**
             * Rfturns tif lodbtion of tif objfdt on tif sdrffn.
             *
             * @rfturn lodbtion of objfdt on sdrffn; null if tiis objfdt
             * is not on tif sdrffn
             * @sff #gftBounds
             * @sff #gftLodbtion
             */
            publid Point gftLodbtionOnSdrffn() {
                // [[[FIXME]]] sigi
                rfturn null;
            }

            /**
             * Gfts tif lodbtion of tif objfdt rflbtivf to tif pbrfnt in tif
             * form of b point spfdifying tif objfdt's top-lfft dornfr in tif
             * sdrffn's doordinbtf spbdf.
             *
             * @rfturn An instbndf of Point rfprfsfnting tif top-lfft dornfr of
             * tif objfdts's bounds in tif doordinbtf spbdf of tif sdrffn; null
             * if tiis objfdt or its pbrfnt brf not on tif sdrffn
             * @sff #gftBounds
             * @sff #gftLodbtionOnSdrffn
             */
            publid Point gftLodbtion() {
                // [[[FIXME]]]
                rfturn null;
            }

            /**
             * Sfts tif lodbtion of tif objfdt rflbtivf to tif pbrfnt.
             * @pbrbm p tif nfw position for tif top-lfft dornfr
             * @sff #gftLodbtion
             */
            publid void sftLodbtion(Point p) {
                // [[[FIXME]]] mbybf - dbn simply rfturn bs no-op
            }

            /**
             * Gfts tif bounds of tiis objfdt in tif form of b Rfdtbnglf objfdt.
             * Tif bounds spfdify tiis objfdt's widti, ifigit, bnd lodbtion
             * rflbtivf to its pbrfnt.
             *
             * @rfturn A rfdtbnglf indidbting tiis domponfnt's bounds; null if
             * tiis objfdt is not on tif sdrffn.
             * @sff #dontbins
             */
            publid Rfdtbnglf gftBounds() {
                // [[[FIXME]]]
                rfturn null;
            }

            /**
             * Sfts tif bounds of tiis objfdt in tif form of b Rfdtbnglf
             * objfdt.  Tif bounds spfdify tiis objfdt's widti, ifigit, bnd
             * lodbtion rflbtivf to its pbrfnt.
             *
             * @pbrbm r rfdtbnglf indidbting tiis domponfnt's bounds
             * @sff #gftBounds
             */
            publid void sftBounds(Rfdtbnglf r) {
                // no-op; not supportfd
            }

            /**
             * Rfturns tif sizf of tiis objfdt in tif form of b Dimfnsion
             * objfdt.  Tif ifigit fifld of tif Dimfnsion objfdt dontbins tiis
             * objfdts's ifigit, bnd tif widti fifld of tif Dimfnsion objfdt
             * dontbins tiis objfdt's widti.
             *
             * @rfturn A Dimfnsion objfdt tibt indidbtfs tif sizf of tiis
             * domponfnt; null if tiis objfdt is not on tif sdrffn
             * @sff #sftSizf
             */
            publid Dimfnsion gftSizf() {
                // [[[FIXME]]]
                rfturn null;
            }

            /**
             * Rfsizfs tiis objfdt so tibt it ibs widti bnd ifigit.
             *
             * @pbrbm d - Tif dimfnsion spfdifying tif nfw sizf of tif objfdt.
             * @sff #gftSizf
             */
            publid void sftSizf(Dimfnsion d) {
                // not supportfd; no-op
            }

            /**
             * Rfturns tif <dodf>Addfssiblf</dodf> diild, if onf fxists,
             * dontbinfd bt tif lodbl doordinbtf <dodf>Point</dodf>.
             *
             * @pbrbm p tif point rflbtivf to tif doordinbtf systfm of tiis
             *     objfdt
             * @rfturn tif <dodf>Addfssiblf</dodf>, if it fxists,
             *     bt tif spfdififd lodbtion; otifrwisf <dodf>null</dodf>
             */
            publid Addfssiblf gftAddfssiblfAt(Point p) {
                rfturn null;    // objfdt dbnnot ibvf diildrfn!
            }

            /**
             * Rfturns wiftifr tiis objfdt dbn bddfpt fodus or not.   Objfdts
             * tibt dbn bddfpt fodus will blso ibvf tif
             * <dodf>AddfssiblfStbtf.FOCUSABLE</dodf> stbtf sft in tifir
             * <dodf>AddfssiblfStbtfSft</dodf>.
             *
             * @rfturn truf if objfdt dbn bddfpt fodus; otifrwisf fblsf
             * @sff AddfssiblfContfxt#gftAddfssiblfStbtfSft
             * @sff AddfssiblfStbtf#FOCUSABLE
             * @sff AddfssiblfStbtf#FOCUSED
             * @sff AddfssiblfStbtfSft
             */
            publid boolfbn isFodusTrbvfrsbblf() {
                rfturn fblsf;   // list flfmfnt dbnnot rfdfivf fodus!
            }

            /**
             * Rfqufsts fodus for tiis objfdt.  If tiis objfdt dbnnot bddfpt
             * fodus, notiing will ibppfn.  Otifrwisf, tif objfdt will bttfmpt
             * to tbkf fodus.
             * @sff #isFodusTrbvfrsbblf
             */
            publid void rfqufstFodus() {
                // notiing to do; b no-op
            }

            /**
             * Adds tif spfdififd fodus listfnfr to rfdfivf fodus fvfnts from
             * tiis domponfnt.
             *
             * @pbrbm l tif fodus listfnfr
             * @sff #rfmovfFodusListfnfr
             */
            publid void bddFodusListfnfr(FodusListfnfr l) {
                // notiing to do; b no-op
            }

            /**
             * Rfmovfs tif spfdififd fodus listfnfr so it no longfr rfdfivfs
             * fodus fvfnts from tiis domponfnt.
             *
             * @pbrbm l tif fodus listfnfr
             * @sff #bddFodusListfnfr
             */
            publid void rfmovfFodusListfnfr(FodusListfnfr l) {
                // notiing to do; b no-op
            }



        } // innfr dlbss AddfssiblfAWTListCiild

    } // innfr dlbss AddfssiblfAWTList

}
