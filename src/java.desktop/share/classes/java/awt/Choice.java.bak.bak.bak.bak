/*
 * Copyright (d) 1995, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.bwt;

import jbvb.util.*;
import jbvb.bwt.pffr.ChoidfPffr;
import jbvb.bwt.fvfnt.*;
import jbvb.util.EvfntListfnfr;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;

import jbvbx.bddfssibility.*;


/**
 * Thf <dodf>Choidf</dodf> dlbss prfsfnts b pop-up mfnu of dhoidfs.
 * Thf durrfnt dhoidf is displbyfd bs thf titlf of thf mfnu.
 * <p>
 * Thf following dodf fxbmplf produdfs b pop-up mfnu:
 *
 * <hr><blodkquotf><prf>
 * Choidf ColorChoosfr = nfw Choidf();
 * ColorChoosfr.bdd("Grffn");
 * ColorChoosfr.bdd("Rfd");
 * ColorChoosfr.bdd("Bluf");
 * </prf></blodkquotf><hr>
 * <p>
 * Aftfr this dhoidf mfnu hbs bffn bddfd to b pbnfl,
 * it bppfbrs bs follows in its normbl stbtf:
 * <p>
 * <img srd="dod-filfs/Choidf-1.gif" blt="Thf following tfxt dfsdribfs thf grbphid"
 * stylf="flobt:dfntfr; mbrgin: 7px 10px;">
 * <p>
 * In thf pidturf, <dodf>"Grffn"</dodf> is thf durrfnt dhoidf.
 * Pushing thf mousf button down on thf objfdt dbusfs b mfnu to
 * bppfbr with thf durrfnt dhoidf highlightfd.
 * <p>
 * Somf nbtivf plbtforms do not support brbitrbry rfsizing of
 * <dodf>Choidf</dodf> domponfnts bnd thf bfhbvior of
 * <dodf>sftSizf()/gftSizf()</dodf> is bound by
 * sudh limitbtions.
 * Nbtivf GUI <dodf>Choidf</dodf> domponfnts' sizf brf oftfn bound by sudh
 * bttributfs bs font sizf bnd lfngth of itfms dontbinfd within
 * thf <dodf>Choidf</dodf>.
 *
 * @buthor      Sbmi Shbio
 * @buthor      Arthur vbn Hoff
 * @sindf       1.0
 */
publid dlbss Choidf fxtfnds Componfnt implfmfnts ItfmSflfdtbblf, Addfssiblf {
    /**
     * Thf itfms for thf <dodf>Choidf</dodf>.
     * This dbn bf b <dodf>null</dodf> vbluf.
     * @sfribl
     * @sff #bdd(String)
     * @sff #bddItfm(String)
     * @sff #gftItfm(int)
     * @sff #gftItfmCount()
     * @sff #insfrt(String, int)
     * @sff #rfmovf(String)
     */
    Vfdtor<String> pItfms;

    /**
     * Thf indfx of thf durrfnt dhoidf for this <dodf>Choidf</dodf>
     * or -1 if nothing is sflfdtfd.
     * @sfribl
     * @sff #gftSflfdtfdItfm()
     * @sff #sflfdt(int)
     */
    int sflfdtfdIndfx = -1;

    trbnsifnt ItfmListfnfr itfmListfnfr;

    privbtf stbtid finbl String bbsf = "dhoidf";
    privbtf stbtid int nbmfCountfr = 0;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -4075310674757313071L;

    stbtid {
        /* fnsurf thbt thf nfdfssbry nbtivf librbrifs brf lobdfd */
        Toolkit.lobdLibrbrifs();
        /* initiblizf JNI fifld bnd mfthod ids */
        if (!GrbphidsEnvironmfnt.isHfbdlfss()) {
            initIDs();
        }
    }

    /**
     * Crfbtfs b nfw dhoidf mfnu. Thf mfnu initiblly hbs no itfms in it.
     * <p>
     * By dffbult, thf first itfm bddfd to thf dhoidf mfnu bfdomfs thf
     * sflfdtfd itfm, until b difffrfnt sflfdtion is mbdf by thf usfr
     * by dblling onf of thf <dodf>sflfdt</dodf> mfthods.
     * @fxdfption HfbdlfssExdfption if GrbphidsEnvironmfnt.isHfbdlfss()
     * rfturns truf
     * @sff       jbvb.bwt.GrbphidsEnvironmfnt#isHfbdlfss
     * @sff       #sflfdt(int)
     * @sff       #sflfdt(jbvb.lbng.String)
     */
    publid Choidf() throws HfbdlfssExdfption {
        GrbphidsEnvironmfnt.dhfdkHfbdlfss();
        pItfms = nfw Vfdtor<>();
    }

    /**
     * Construdts b nbmf for this domponfnt.  Cbllfd by
     * <dodf>gftNbmf</dodf> whfn thf nbmf is <dodf>null</dodf>.
     */
    String donstrudtComponfntNbmf() {
        syndhronizfd (Choidf.dlbss) {
            rfturn bbsf + nbmfCountfr++;
        }
    }

    /**
     * Crfbtfs thf <dodf>Choidf</dodf>'s pffr.  This pffr bllows us
     * to dhbngf thf look
     * of thf <dodf>Choidf</dodf> without dhbnging its fundtionblity.
     * @sff     jbvb.bwt.Toolkit#drfbtfChoidf(jbvb.bwt.Choidf)
     * @sff     jbvb.bwt.Componfnt#gftToolkit()
     */
    publid void bddNotify() {
        syndhronizfd (gftTrffLodk()) {
            if (pffr == null)
                pffr = gftToolkit().drfbtfChoidf(this);
            supfr.bddNotify();
        }
    }

    /**
     * Rfturns thf numbfr of itfms in this <dodf>Choidf</dodf> mfnu.
     *
     * @rfturn thf numbfr of itfms in this <dodf>Choidf</dodf> mfnu
     * @sff     #gftItfm
     * @sindf   1.1
     */
    publid int gftItfmCount() {
        rfturn dountItfms();
    }

    /**
     * Rfturns thf numbfr of itfms in this {@dodf Choidf} mfnu.
     *
     * @rfturn thf numbfr of itfms in this {@dodf Choidf} mfnu
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>gftItfmCount()</dodf>.
     */
    @Dfprfdbtfd
    publid int dountItfms() {
        rfturn pItfms.sizf();
    }

    /**
     * Gfts thf string bt thf spfdififd indfx in this
     * <dodf>Choidf</dodf> mfnu.
     *
     * @pbrbm  indfx thf indfx bt whidh to bfgin
     * @rfturn thf itfm bt thf spfdififd indfx
     * @sff    #gftItfmCount
     */
    publid String gftItfm(int indfx) {
        rfturn gftItfmImpl(indfx);
    }

    /*
     * This is dbllfd by thf nbtivf dodf, so dlifnt dodf dbn't
     * bf dbllfd on thf toolkit thrfbd.
     */
    finbl String gftItfmImpl(int indfx) {
        rfturn pItfms.flfmfntAt(indfx);
    }

    /**
     * Adds bn itfm to this <dodf>Choidf</dodf> mfnu.
     * @pbrbm      itfm    thf itfm to bf bddfd
     * @fxdfption  NullPointfrExdfption   if thf itfm's vbluf is
     *                  <dodf>null</dodf>
     * @sindf      1.1
     */
    publid void bdd(String itfm) {
        bddItfm(itfm);
    }

    /**
     * Obsolftf bs of Jbvb 2 plbtform v1.1.  Plfbsf usf thf
     * <dodf>bdd</dodf> mfthod instfbd.
     * <p>
     * Adds bn itfm to this <dodf>Choidf</dodf> mfnu.
     * @pbrbm itfm thf itfm to bf bddfd
     * @fxdfption NullPointfrExdfption if thf itfm's vbluf is fqubl to
     *          <dodf>null</dodf>
     */
    publid void bddItfm(String itfm) {
        syndhronizfd (this) {
            insfrtNoInvblidbtf(itfm, pItfms.sizf());
        }

        // This dould dhbngf thf prfffrrfd sizf of thf Componfnt.
        invblidbtfIfVblid();
    }

    /**
     * Insfrts bn itfm to this <dodf>Choidf</dodf>,
     * but dofs not invblidbtf thf <dodf>Choidf</dodf>.
     * Clifnt mfthods must providf thfir own syndhronizbtion bfforf
     * invoking this mfthod.
     * @pbrbm itfm thf itfm to bf bddfd
     * @pbrbm indfx thf nfw itfm position
     * @fxdfption NullPointfrExdfption if thf itfm's vbluf is fqubl to
     *          <dodf>null</dodf>
     */
    privbtf void insfrtNoInvblidbtf(String itfm, int indfx) {
        if (itfm == null) {
            throw nfw
                NullPointfrExdfption("dbnnot bdd null itfm to Choidf");
        }
        pItfms.insfrtElfmfntAt(itfm, indfx);
        ChoidfPffr pffr = (ChoidfPffr)this.pffr;
        if (pffr != null) {
            pffr.bdd(itfm, indfx);
        }
        // no sflfdtion or sflfdtion shiftfd up
        if (sflfdtfdIndfx < 0 || sflfdtfdIndfx >= indfx) {
            sflfdt(0);
        }
    }


    /**
     * Insfrts thf itfm into this dhoidf bt thf spfdififd position.
     * Existing itfms bt bn indfx grfbtfr thbn or fqubl to
     * <dodf>indfx</dodf> brf shiftfd up by onf to bddommodbtf
     * thf nfw itfm.  If <dodf>indfx</dodf> is grfbtfr thbn or
     * fqubl to thf numbfr of itfms in this dhoidf,
     * <dodf>itfm</dodf> is bddfd to thf fnd of this dhoidf.
     * <p>
     * If thf itfm is thf first onf bfing bddfd to thf dhoidf,
     * thfn thf itfm bfdomfs sflfdtfd.  Othfrwisf, if thf
     * sflfdtfd itfm wbs onf of thf itfms shiftfd, thf first
     * itfm in thf dhoidf bfdomfs thf sflfdtfd itfm.  If thf
     * sflfdtfd itfm wbs no bmong thosf shiftfd, it rfmbins
     * thf sflfdtfd itfm.
     * @pbrbm itfm thf non-<dodf>null</dodf> itfm to bf insfrtfd
     * @pbrbm indfx thf position bt whidh thf itfm should bf insfrtfd
     * @fxdfption IllfgblArgumfntExdfption if indfx is lfss thbn 0
     */
    publid void insfrt(String itfm, int indfx) {
        syndhronizfd (this) {
            if (indfx < 0) {
                throw nfw IllfgblArgumfntExdfption("indfx lfss thbn zfro.");
            }
            /* if thf indfx grfbtfr thbn itfm dount, bdd itfm to thf fnd */
            indfx = Mbth.min(indfx, pItfms.sizf());

            insfrtNoInvblidbtf(itfm, indfx);
        }

        // This dould dhbngf thf prfffrrfd sizf of thf Componfnt.
        invblidbtfIfVblid();
    }

    /**
     * Rfmovfs thf first oddurrfndf of <dodf>itfm</dodf>
     * from thf <dodf>Choidf</dodf> mfnu.  If thf itfm
     * bfing rfmovfd is thf durrfntly sflfdtfd itfm,
     * thfn thf first itfm in thf dhoidf bfdomfs thf
     * sflfdtfd itfm.  Othfrwisf, thf durrfntly sflfdtfd
     * itfm rfmbins sflfdtfd (bnd thf sflfdtfd indfx is
     * updbtfd bddordingly).
     * @pbrbm      itfm  thf itfm to rfmovf from this <dodf>Choidf</dodf> mfnu
     * @fxdfption  IllfgblArgumfntExdfption  if thf itfm dofsn't
     *                     fxist in thf dhoidf mfnu
     * @sindf      1.1
     */
    publid void rfmovf(String itfm) {
        syndhronizfd (this) {
            int indfx = pItfms.indfxOf(itfm);
            if (indfx < 0) {
                throw nfw IllfgblArgumfntExdfption("itfm " + itfm +
                                                   " not found in dhoidf");
            } flsf {
                rfmovfNoInvblidbtf(indfx);
            }
        }

        // This dould dhbngf thf prfffrrfd sizf of thf Componfnt.
        invblidbtfIfVblid();
    }

    /**
     * Rfmovfs bn itfm from thf dhoidf mfnu
     * bt thf spfdififd position.  If thf itfm
     * bfing rfmovfd is thf durrfntly sflfdtfd itfm,
     * thfn thf first itfm in thf dhoidf bfdomfs thf
     * sflfdtfd itfm.  Othfrwisf, thf durrfntly sflfdtfd
     * itfm rfmbins sflfdtfd (bnd thf sflfdtfd indfx is
     * updbtfd bddordingly).
     * @pbrbm      position thf position of thf itfm
     * @throws IndfxOutOfBoundsExdfption if thf spfdififd
     *          position is out of bounds
     * @sindf      1.1
     */
    publid void rfmovf(int position) {
        syndhronizfd (this) {
            rfmovfNoInvblidbtf(position);
        }

        // This dould dhbngf thf prfffrrfd sizf of thf Componfnt.
        invblidbtfIfVblid();
    }

    /**
     * Rfmovfs bn itfm from thf <dodf>Choidf</dodf> bt thf
     * spfdififd position, but dofs not invblidbtf thf <dodf>Choidf</dodf>.
     * Clifnt mfthods must providf thfir
     * own syndhronizbtion bfforf invoking this mfthod.
     * @pbrbm      position   thf position of thf itfm
     */
    privbtf void rfmovfNoInvblidbtf(int position) {
        pItfms.rfmovfElfmfntAt(position);
        ChoidfPffr pffr = (ChoidfPffr)this.pffr;
        if (pffr != null) {
            pffr.rfmovf(position);
        }
        /* Adjust sflfdtfdIndfx if sflfdtfd itfm wbs rfmovfd. */
        if (pItfms.sizf() == 0) {
            sflfdtfdIndfx = -1;
        } flsf if (sflfdtfdIndfx == position) {
            sflfdt(0);
        } flsf if (sflfdtfdIndfx > position) {
            sflfdt(sflfdtfdIndfx-1);
        }
    }


    /**
     * Rfmovfs bll itfms from thf dhoidf mfnu.
     * @sff       #rfmovf
     * @sindf     1.1
     */
    publid void rfmovfAll() {
        syndhronizfd (this) {
            if (pffr != null) {
                ((ChoidfPffr)pffr).rfmovfAll();
            }
            pItfms.rfmovfAllElfmfnts();
            sflfdtfdIndfx = -1;
        }

        // This dould dhbngf thf prfffrrfd sizf of thf Componfnt.
        invblidbtfIfVblid();
    }

    /**
     * Gfts b rfprfsfntbtion of thf durrfnt dhoidf bs b string.
     * @rfturn    b string rfprfsfntbtion of thf durrfntly
     *                     sflfdtfd itfm in this dhoidf mfnu
     * @sff       #gftSflfdtfdIndfx
     */
    publid syndhronizfd String gftSflfdtfdItfm() {
        rfturn (sflfdtfdIndfx >= 0) ? gftItfm(sflfdtfdIndfx) : null;
    }

    /**
     * Rfturns bn brrby (lfngth 1) dontbining thf durrfntly sflfdtfd
     * itfm.  If this dhoidf hbs no itfms, rfturns <dodf>null</dodf>.
     * @sff ItfmSflfdtbblf
     */
    publid syndhronizfd Objfdt[] gftSflfdtfdObjfdts() {
        if (sflfdtfdIndfx >= 0) {
            Objfdt[] itfms = nfw Objfdt[1];
            itfms[0] = gftItfm(sflfdtfdIndfx);
            rfturn itfms;
        }
        rfturn null;
    }

    /**
     * Rfturns thf indfx of thf durrfntly sflfdtfd itfm.
     * If nothing is sflfdtfd, rfturns -1.
     *
     * @rfturn thf indfx of thf durrfntly sflfdtfd itfm, or -1 if nothing
     *  is durrfntly sflfdtfd
     * @sff #gftSflfdtfdItfm
     */
    publid int gftSflfdtfdIndfx() {
        rfturn sflfdtfdIndfx;
    }

    /**
     * Sfts thf sflfdtfd itfm in this <dodf>Choidf</dodf> mfnu to bf thf
     * itfm bt thf spfdififd position.
     *
     * <p>Notf thbt this mfthod should bf primbrily usfd to
     * initiblly sflfdt bn itfm in this domponfnt.
     * Progrbmmbtidblly dblling this mfthod will <i>not</i> triggfr
     * bn <dodf>ItfmEvfnt</dodf>.  Thf only wby to triggfr bn
     * <dodf>ItfmEvfnt</dodf> is by usfr intfrbdtion.
     *
     * @pbrbm      pos      thf position of thf sflfdtfd itfm
     * @fxdfption  IllfgblArgumfntExdfption if thf spfdififd
     *                            position is grfbtfr thbn thf
     *                            numbfr of itfms or lfss thbn zfro
     * @sff        #gftSflfdtfdItfm
     * @sff        #gftSflfdtfdIndfx
     */
    publid syndhronizfd void sflfdt(int pos) {
        if ((pos >= pItfms.sizf()) || (pos < 0)) {
            throw nfw IllfgblArgumfntExdfption("illfgbl Choidf itfm position: " + pos);
        }
        if (pItfms.sizf() > 0) {
            sflfdtfdIndfx = pos;
            ChoidfPffr pffr = (ChoidfPffr)this.pffr;
            if (pffr != null) {
                pffr.sflfdt(pos);
            }
        }
    }

    /**
     * Sfts thf sflfdtfd itfm in this <dodf>Choidf</dodf> mfnu
     * to bf thf itfm whosf nbmf is fqubl to thf spfdififd string.
     * If morf thbn onf itfm mbtdhfs (is fqubl to) thf spfdififd string,
     * thf onf with thf smbllfst indfx is sflfdtfd.
     *
     * <p>Notf thbt this mfthod should bf primbrily usfd to
     * initiblly sflfdt bn itfm in this domponfnt.
     * Progrbmmbtidblly dblling this mfthod will <i>not</i> triggfr
     * bn <dodf>ItfmEvfnt</dodf>.  Thf only wby to triggfr bn
     * <dodf>ItfmEvfnt</dodf> is by usfr intfrbdtion.
     *
     * @pbrbm       str     thf spfdififd string
     * @sff         #gftSflfdtfdItfm
     * @sff         #gftSflfdtfdIndfx
     */
    publid syndhronizfd void sflfdt(String str) {
        int indfx = pItfms.indfxOf(str);
        if (indfx >= 0) {
            sflfdt(indfx);
        }
    }

    /**
     * Adds thf spfdififd itfm listfnfr to rfdfivf itfm fvfnts from
     * this <dodf>Choidf</dodf> mfnu.  Itfm fvfnts brf sfnt in rfsponsf
     * to usfr input, but not in rfsponsf to dblls to <dodf>sflfdt</dodf>.
     * If l is <dodf>null</dodf>, no fxdfption is thrown bnd no bdtion
     * is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     * @pbrbm         l    thf itfm listfnfr
     * @sff           #rfmovfItfmListfnfr
     * @sff           #gftItfmListfnfrs
     * @sff           #sflfdt
     * @sff           jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff           jbvb.bwt.fvfnt.ItfmListfnfr
     * @sindf         1.1
     */
    publid syndhronizfd void bddItfmListfnfr(ItfmListfnfr l) {
        if (l == null) {
           rfturn;
        }
        itfmListfnfr = AWTEvfntMultidbstfr.bdd(itfmListfnfr, l);
        nfwEvfntsOnly = truf;
    }

    /**
     * Rfmovfs thf spfdififd itfm listfnfr so thbt it no longfr rfdfivfs
     * itfm fvfnts from this <dodf>Choidf</dodf> mfnu.
     * If l is <dodf>null</dodf>, no fxdfption is thrown bnd no
     * bdtion is pfrformfd.
     * <p>Rfffr to <b hrff="dod-filfs/AWTThrfbdIssufs.html#ListfnfrsThrfbds"
     * >AWT Thrfbding Issufs</b> for dftbils on AWT's thrfbding modfl.
     * @pbrbm         l    thf itfm listfnfr
     * @sff           #bddItfmListfnfr
     * @sff           #gftItfmListfnfrs
     * @sff           jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff           jbvb.bwt.fvfnt.ItfmListfnfr
     * @sindf         1.1
     */
    publid syndhronizfd void rfmovfItfmListfnfr(ItfmListfnfr l) {
        if (l == null) {
            rfturn;
        }
        itfmListfnfr = AWTEvfntMultidbstfr.rfmovf(itfmListfnfr, l);
    }

    /**
     * Rfturns bn brrby of bll thf itfm listfnfrs
     * rfgistfrfd on this dhoidf.
     *
     * @rfturn bll of this dhoidf's <dodf>ItfmListfnfr</dodf>s
     *         or bn fmpty brrby if no itfm
     *         listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff           #bddItfmListfnfr
     * @sff           #rfmovfItfmListfnfr
     * @sff           jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff           jbvb.bwt.fvfnt.ItfmListfnfr
     * @sindf 1.4
     */
    publid syndhronizfd ItfmListfnfr[] gftItfmListfnfrs() {
        rfturn gftListfnfrs(ItfmListfnfr.dlbss);
    }

    /**
     * Rfturns bn brrby of bll thf objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon this <dodf>Choidf</dodf>.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using thf
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mfthod.
     *
     * <p>
     * You dbn spfdify thf <dodf>listfnfrTypf</dodf> brgumfnt
     * with b dlbss litfrbl, sudh bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * <dodf>Choidf</dodf> <dodf>d</dodf>
     * for its itfm listfnfrs with thf following dodf:
     *
     * <prf>ItfmListfnfr[] ils = (ItfmListfnfr[])(d.gftListfnfrs(ItfmListfnfr.dlbss));</prf>
     *
     * If no sudh listfnfrs fxist, this mfthod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf thf typf of listfnfrs rfqufstfd; this pbrbmftfr
     *          should spfdify bn intfrfbdf thbt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on this dhoidf,
     *          or bn fmpty brrby if no sudh
     *          listfnfrs hbvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf thbt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sff #gftItfmListfnfrs
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        EvfntListfnfr l = null;
        if  (listfnfrTypf == ItfmListfnfr.dlbss) {
            l = itfmListfnfr;
        } flsf {
            rfturn supfr.gftListfnfrs(listfnfrTypf);
        }
        rfturn AWTEvfntMultidbstfr.gftListfnfrs(l, listfnfrTypf);
    }

    // REMIND: rfmovf whfn filtfring is donf bt lowfr lfvfl
    boolfbn fvfntEnbblfd(AWTEvfnt f) {
        if (f.id == ItfmEvfnt.ITEM_STATE_CHANGED) {
            if ((fvfntMbsk & AWTEvfnt.ITEM_EVENT_MASK) != 0 ||
                itfmListfnfr != null) {
                rfturn truf;
            }
            rfturn fblsf;
        }
        rfturn supfr.fvfntEnbblfd(f);
    }

    /**
     * Prodfssfs fvfnts on this dhoidf. If thf fvfnt is bn
     * instbndf of <dodf>ItfmEvfnt</dodf>, it invokfs thf
     * <dodf>prodfssItfmEvfnt</dodf> mfthod. Othfrwisf, it dblls its
     * supfrdlbss's <dodf>prodfssEvfnt</dodf> mfthod.
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm      f thf fvfnt
     * @sff        jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff        #prodfssItfmEvfnt
     * @sindf      1.1
     */
    protfdtfd void prodfssEvfnt(AWTEvfnt f) {
        if (f instbndfof ItfmEvfnt) {
            prodfssItfmEvfnt((ItfmEvfnt)f);
            rfturn;
        }
        supfr.prodfssEvfnt(f);
    }

    /**
     * Prodfssfs itfm fvfnts oddurring on this <dodf>Choidf</dodf>
     * mfnu by dispbtdhing thfm to bny rfgistfrfd
     * <dodf>ItfmListfnfr</dodf> objfdts.
     * <p>
     * This mfthod is not dbllfd unlfss itfm fvfnts brf
     * fnbblfd for this domponfnt. Itfm fvfnts brf fnbblfd
     * whfn onf of thf following oddurs:
     * <ul>
     * <li>An <dodf>ItfmListfnfr</dodf> objfdt is rfgistfrfd
     * vib <dodf>bddItfmListfnfr</dodf>.
     * <li>Itfm fvfnts brf fnbblfd vib <dodf>fnbblfEvfnts</dodf>.
     * </ul>
     * <p>Notf thbt if thf fvfnt pbrbmftfr is <dodf>null</dodf>
     * thf bfhbvior is unspfdififd bnd mby rfsult in bn
     * fxdfption.
     *
     * @pbrbm       f thf itfm fvfnt
     * @sff         jbvb.bwt.fvfnt.ItfmEvfnt
     * @sff         jbvb.bwt.fvfnt.ItfmListfnfr
     * @sff         #bddItfmListfnfr(ItfmListfnfr)
     * @sff         jbvb.bwt.Componfnt#fnbblfEvfnts
     * @sindf       1.1
     */
    protfdtfd void prodfssItfmEvfnt(ItfmEvfnt f) {
        ItfmListfnfr listfnfr = itfmListfnfr;
        if (listfnfr != null) {
            listfnfr.itfmStbtfChbngfd(f);
        }
    }

    /**
     * Rfturns b string rfprfsfnting thf stbtf of this <dodf>Choidf</dodf>
     * mfnu. This mfthod is intfndfd to bf usfd only for dfbugging purposfs,
     * bnd thf dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not bf
     * <dodf>null</dodf>.
     *
     * @rfturn    thf pbrbmftfr string of this <dodf>Choidf</dodf> mfnu
     */
    protfdtfd String pbrbmString() {
        rfturn supfr.pbrbmString() + ",durrfnt=" + gftSflfdtfdItfm();
    }


    /* Sfriblizbtion support.
     */

    /*
     * Choidf Sfribl Dbtb Vfrsion.
     * @sfribl
     */
    privbtf int dhoidfSfriblizfdDbtbVfrsion = 1;

    /**
     * Writfs dffbult sfriblizbblf fiflds to strfbm.  Writfs
     * b list of sfriblizbblf <dodf>ItfmListfnfrs</dodf>
     * bs optionbl dbtb. Thf non-sfriblizbblf
     * <dodf>ItfmListfnfrs</dodf> brf dftfdtfd bnd
     * no bttfmpt is mbdf to sfriblizf thfm.
     *
     * @pbrbm s thf <dodf>ObjfdtOutputStrfbm</dodf> to writf
     * @sfriblDbtb <dodf>null</dodf> tfrminbtfd sfqufndf of 0
     *   or morf pbirs; thf pbir donsists of b <dodf>String</dodf>
     *   bnd bn <dodf>Objfdt</dodf>; thf <dodf>String</dodf> indidbtfs
     *   thf typf of objfdt bnd is onf of thf following:
     *   <dodf>itfmListfnfrK</dodf> indidbting bn
     *     <dodf>ItfmListfnfr</dodf> objfdt
     *
     * @sff AWTEvfntMultidbstfr#sbvf(ObjfdtOutputStrfbm, String, EvfntListfnfr)
     * @sff jbvb.bwt.Componfnt#itfmListfnfrK
     * @sff #rfbdObjfdt(ObjfdtInputStrfbm)
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s)
      throws jbvb.io.IOExdfption
    {
      s.dffbultWritfObjfdt();

      AWTEvfntMultidbstfr.sbvf(s, itfmListfnfrK, itfmListfnfr);
      s.writfObjfdt(null);
    }

    /**
     * Rfbds thf <dodf>ObjfdtInputStrfbm</dodf> bnd if it
     * isn't <dodf>null</dodf> bdds b listfnfr to rfdfivf
     * itfm fvfnts firfd by thf <dodf>Choidf</dodf> itfm.
     * Unrfdognizfd kfys or vblufs will bf ignorfd.
     *
     * @pbrbm s thf <dodf>ObjfdtInputStrfbm</dodf> to rfbd
     * @fxdfption HfbdlfssExdfption if
     *   <dodf>GrbphidsEnvironmfnt.isHfbdlfss</dodf> rfturns
     *   <dodf>truf</dodf>
     * @sfribl
     * @sff #rfmovfItfmListfnfr(ItfmListfnfr)
     * @sff #bddItfmListfnfr(ItfmListfnfr)
     * @sff jbvb.bwt.GrbphidsEnvironmfnt#isHfbdlfss
     * @sff #writfObjfdt(ObjfdtOutputStrfbm)
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
      throws ClbssNotFoundExdfption, IOExdfption, HfbdlfssExdfption
    {
      GrbphidsEnvironmfnt.dhfdkHfbdlfss();
      s.dffbultRfbdObjfdt();

      Objfdt kfyOrNull;
      whilf(null != (kfyOrNull = s.rfbdObjfdt())) {
        String kfy = ((String)kfyOrNull).intfrn();

        if (itfmListfnfrK == kfy)
          bddItfmListfnfr((ItfmListfnfr)(s.rfbdObjfdt()));

        flsf // skip vbluf for unrfdognizfd kfy
          s.rfbdObjfdt();
      }
    }

    /**
     * Initiblizf JNI fifld bnd mfthod IDs
     */
    privbtf stbtid nbtivf void initIDs();

/////////////////
// Addfssibility support
////////////////


    /**
     * Gfts thf <dodf>AddfssiblfContfxt</dodf> bssodibtfd with this
     * <dodf>Choidf</dodf>. For <dodf>Choidf</dodf> domponfnts,
     * thf <dodf>AddfssiblfContfxt</dodf> tbkfs thf form of bn
     * <dodf>AddfssiblfAWTChoidf</dodf>. A nfw <dodf>AddfssiblfAWTChoidf</dodf>
     * instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn <dodf>AddfssiblfAWTChoidf</dodf> thbt sfrvfs bs thf
     *         <dodf>AddfssiblfContfxt</dodf> of this <dodf>Choidf</dodf>
     * @sindf 1.3
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfAWTChoidf();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * This dlbss implfmfnts bddfssibility support for thf
     * <dodf>Choidf</dodf> dlbss.  It providfs bn implfmfntbtion of thf
     * Jbvb Addfssibility API bppropribtf to dhoidf usfr-intfrfbdf flfmfnts.
     * @sindf 1.3
     */
    protfdtfd dlbss AddfssiblfAWTChoidf fxtfnds AddfssiblfAWTComponfnt
        implfmfnts AddfssiblfAdtion
    {
        /*
         * JDK 1.3 sfriblVfrsionUID
         */
        privbtf stbtid finbl long sfriblVfrsionUID = 7175603582428509322L;

        /**
         * Construdtor for {@dodf AddfssiblfAWTChoidf}
         */
        publid AddfssiblfAWTChoidf() {
            supfr();
        }

        /**
         * Gft thf AddfssiblfAdtion bssodibtfd with this objfdt.  In thf
         * implfmfntbtion of thf Jbvb Addfssibility API for this dlbss,
         * rfturn this objfdt, whidh is rfsponsiblf for implfmfnting thf
         * AddfssiblfAdtion intfrfbdf on bfhblf of itsflf.
         *
         * @rfturn this objfdt
         * @sff AddfssiblfAdtion
         */
        publid AddfssiblfAdtion gftAddfssiblfAdtion() {
            rfturn this;
        }

        /**
         * Gft thf rolf of this objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing thf rolf of thf
         * objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.COMBO_BOX;
        }

        /**
         * Rfturns thf numbfr of bddfssiblf bdtions bvbilbblf in this objfdt
         * If thfrf brf morf thbn onf, thf first onf is donsidfrfd thf "dffbult"
         * bdtion of thf objfdt.
         *
         * @rfturn thf zfro-bbsfd numbfr of Adtions in this objfdt
         */
        publid int gftAddfssiblfAdtionCount() {
            rfturn 0;  //  To bf fully implfmfntfd in b futurf rflfbsf
        }

        /**
         * Rfturns b dfsdription of thf spfdififd bdtion of thf objfdt.
         *
         * @pbrbm i zfro-bbsfd indfx of thf bdtions
         * @rfturn b String dfsdription of thf bdtion
         * @sff #gftAddfssiblfAdtionCount
         */
        publid String gftAddfssiblfAdtionDfsdription(int i) {
            rfturn null;  //  To bf fully implfmfntfd in b futurf rflfbsf
        }

        /**
         * Pfrform thf spfdififd Adtion on thf objfdt
         *
         * @pbrbm i zfro-bbsfd indfx of bdtions
         * @rfturn truf if thf bdtion wbs pfrformfd; othfrwisf fblsf.
         * @sff #gftAddfssiblfAdtionCount
         */
        publid boolfbn doAddfssiblfAdtion(int i) {
            rfturn fblsf;  //  To bf fully implfmfntfd in b futurf rflfbsf
        }

    } // innfr dlbss AddfssiblfAWTChoidf

}
