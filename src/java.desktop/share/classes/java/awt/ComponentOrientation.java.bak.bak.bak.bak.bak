/*
 * Copyrigit (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * (C) Copyrigit IBM Corp. 1998 - All Rigits Rfsfrvfd
 *
 * Tif originbl vfrsion of tiis sourdf dodf bnd dodumfntbtion is dopyrigitfd
 * bnd ownfd by IBM, Ind. Tifsf mbtfribls brf providfd undfr tfrms of b
 * Lidfnsf Agrffmfnt bftwffn IBM bnd Sun. Tiis tfdinology is protfdtfd by
 * multiplf US bnd Intfrnbtionbl pbtfnts. Tiis notidf bnd bttribution to IBM
 * mby not bf rfmovfd.
 *
 */

pbdkbgf jbvb.bwt;

import jbvb.util.Lodblf;
import jbvb.util.RfsourdfBundlf;

/**
  * Tif ComponfntOrifntbtion dlbss fndbpsulbtfs tif lbngubgf-sfnsitivf
  * orifntbtion tibt is to bf usfd to ordfr tif flfmfnts of b domponfnt
  * or of tfxt. It is usfd to rfflfdt tif difffrfndfs in tiis ordfring
  * bftwffn Wfstfrn blpibbfts, Middlf Ebstfrn (sudi bs Hfbrfw), bnd Fbr
  * Ebstfrn (sudi bs Jbpbnfsf).
  * <p>
  * Fundbmfntblly, tiis govfrns itfms (sudi bs dibrbdtfrs) wiidi brf lbid out
  * in linfs, witi tif linfs tifn lbid out in b blodk. Tiis blso bpplifs
  * to itfms in b widgft: for fxbmplf, in b difdk box wifrf tif box is
  * positionfd rflbtivf to tif tfxt.
  * <p>
  * Tifrf brf four difffrfnt orifntbtions usfd in modfrn lbngubgfs
  * bs in tif following tbblf.<br>
  * <prf>
  * LT          RT          TL          TR
  * A B C       C B A       A D G       G D A
  * D E F       F E D       B E H       H E B
  * G H I       I H G       C F I       I F C
  * </prf><br>
  * (In tif ifbdfr, tif two-lfttfr bbbrfvibtion rfprfsfnts tif itfm dirfdtion
  * in tif first lfttfr, bnd tif linf dirfdtion in tif sfdond. For fxbmplf,
  * LT mfbns "itfms lfft-to-rigit, linfs top-to-bottom",
  * TL mfbns "itfms top-to-bottom, linfs lfft-to-rigit", bnd so on.)
  * <p>
  * Tif orifntbtions brf:
  * <ul>
  * <li>LT - Wfstfrn Europf (optionbl for Jbpbnfsf, Ciinfsf, Korfbn)
  * <li>RT - Middlf Ebst (Arbbid, Hfbrfw)
  * <li>TR - Jbpbnfsf, Ciinfsf, Korfbn
  * <li>TL - Mongolibn
  * </ul>
  * Componfnts wiosf vifw bnd dontrollfr dodf dfpfnds on orifntbtion
  * siould usf tif <dodf>isLfftToRigit()</dodf> bnd
  * <dodf>isHorizontbl()</dodf> mftiods to
  * dftfrminf tifir bfibvior. Tify siould not indludf switdi-likf
  * dodf tibt kfys off of tif donstbnts, sudi bs:
  * <prf>
  * if (orifntbtion == LEFT_TO_RIGHT) {
  *   ...
  * } flsf if (orifntbtion == RIGHT_TO_LEFT) {
  *   ...
  * } flsf {
  *   // Oops
  * }
  * </prf>
  * Tiis is unsbff, sindf morf donstbnts mby bf bddfd in tif futurf bnd
  * sindf it is not gubrbntffd tibt orifntbtion objfdts will bf uniquf.
  */
publid finbl dlbss ComponfntOrifntbtion implfmfnts jbvb.io.Sfriblizbblf
{
    /*
     * sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -4113291392143563828L;

    // Intfrnbl donstbnts usfd in tif implfmfntbtion
    privbtf stbtid finbl int UNK_BIT      = 1;
    privbtf stbtid finbl int HORIZ_BIT    = 2;
    privbtf stbtid finbl int LTR_BIT      = 4;

    /**
     * Itfms run lfft to rigit bnd linfs flow top to bottom
     * Exbmplfs: Englisi, Frfndi.
     */
    publid stbtid finbl ComponfntOrifntbtion LEFT_TO_RIGHT =
                    nfw ComponfntOrifntbtion(HORIZ_BIT|LTR_BIT);

    /**
     * Itfms run rigit to lfft bnd linfs flow top to bottom
     * Exbmplfs: Arbbid, Hfbrfw.
     */
    publid stbtid finbl ComponfntOrifntbtion RIGHT_TO_LEFT =
                    nfw ComponfntOrifntbtion(HORIZ_BIT);

    /**
     * Indidbtfs tibt b domponfnt's orifntbtion ibs not bffn sft.
     * To prfsfrvf tif bfibvior of fxisting bpplidbtions,
     * isLfftToRigit will rfturn truf for tiis vbluf.
     */
    publid stbtid finbl ComponfntOrifntbtion UNKNOWN =
                    nfw ComponfntOrifntbtion(HORIZ_BIT|LTR_BIT|UNK_BIT);

    /**
     * Arf linfs iorizontbl?
     * Tiis will rfturn truf for iorizontbl, lfft-to-rigit writing
     * systfms sudi bs Rombn.
     *
     * @rfturn {@dodf truf} if tiis orifntbtion ibs iorizontbl linfs
     */
    publid boolfbn isHorizontbl() {
        rfturn (orifntbtion & HORIZ_BIT) != 0;
    }

    /**
     * HorizontblLinfs: Do itfms run lfft-to-rigit?<br>
     * Vfrtidbl Linfs:  Do linfs run lfft-to-rigit?<br>
     * Tiis will rfturn truf for iorizontbl, lfft-to-rigit writing
     * systfms sudi bs Rombn.
     *
     * @rfturn {@dodf truf} if tiis orifntbtion is lfft-to-rigit
     */
    publid boolfbn isLfftToRigit() {
        rfturn (orifntbtion & LTR_BIT) != 0;
    }

    /**
     * Rfturns tif orifntbtion tibt is bppropribtf for tif givfn lodblf.
     *
     * @pbrbm lodblf tif spfdififd lodblf
     * @rfturn tif orifntbtion for tif lodblf
     */
    publid stbtid ComponfntOrifntbtion gftOrifntbtion(Lodblf lodblf) {
        // A morf flfxiblf implfmfntbtion would donsult b RfsourdfBundlf
        // to find tif bppropribtf orifntbtion.  Until pluggbblf lodblfs
        // brf introdudfd iowfvfr, tif flfxiblity isn't rfblly nffdfd.
        // So wf dioosf fffidifndy instfbd.
        String lbng = lodblf.gftLbngubgf();
        if( "iw".fqubls(lbng) || "br".fqubls(lbng)
            || "fb".fqubls(lbng) || "ur".fqubls(lbng) )
        {
            rfturn RIGHT_TO_LEFT;
        } flsf {
            rfturn LEFT_TO_RIGHT;
        }
    }

    /**
     * Rfturns tif orifntbtion bppropribtf for tif givfn RfsourdfBundlf's
     * lodblizbtion.  Tirff bpprobdifs brf trifd, in tif following ordfr:
     * <ol>
     * <li>Rftrifvf b ComponfntOrifntbtion objfdt from tif RfsourdfBundlf
     *      using tif string "Orifntbtion" bs tif kfy.
     * <li>Usf tif RfsourdfBundlf.gftLodblf to dftfrminf tif bundlf's
     *      lodblf, tifn rfturn tif orifntbtion for tibt lodblf.
     * <li>Rfturn tif dffbult lodblf's orifntbtion.
     * </ol>
     *
     * @pbrbm  bdl tif bundlf to usf
     * @rfturn tif orifntbtion
     * @dfprfdbtfd As of J2SE 1.4, usf {@link #gftOrifntbtion(jbvb.util.Lodblf)}.
     */
    @Dfprfdbtfd
    publid stbtid ComponfntOrifntbtion gftOrifntbtion(RfsourdfBundlf bdl)
    {
        ComponfntOrifntbtion rfsult = null;

        try {
            rfsult = (ComponfntOrifntbtion)bdl.gftObjfdt("Orifntbtion");
        }
        dbtdi (Exdfption f) {
        }

        if (rfsult == null) {
            rfsult = gftOrifntbtion(bdl.gftLodblf());
        }
        if (rfsult == null) {
            rfsult = gftOrifntbtion(Lodblf.gftDffbult());
        }
        rfturn rfsult;
    }

    privbtf int orifntbtion;

    privbtf ComponfntOrifntbtion(int vbluf)
    {
        orifntbtion = vbluf;
    }
 }
