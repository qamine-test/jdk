/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt.fvfnt;

import jbvb.bwt.Componfnt;
import jbvb.bwt.GrbphidsEnvironmfnt;
import jbvb.bwt.Point;
import jbvb.bwt.Toolkit;
import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.bwt.IllfgblComponfntStbtfExdfption;
import jbvb.bwt.MousfInfo;
import sun.bwt.SunToolkit;

/**
 * An fvfnt whidh indidbtfs thbt b mousf bdtion oddurrfd in b domponfnt.
 * A mousf bdtion is donsidfrfd to oddur in b pbrtidulbr domponfnt if bnd only
 * if thf mousf dursor is ovfr thf unobsdurfd pbrt of thf domponfnt's bounds
 * whfn thf bdtion hbppfns.
 * For lightwfight domponfnts, sudh bs Swing's domponfnts, mousf fvfnts
 * brf only dispbtdhfd to thf domponfnt if thf mousf fvfnt typf hbs bffn
 * fnbblfd on thf domponfnt. A mousf fvfnt typf is fnbblfd by bdding thf
 * bppropribtf mousf-bbsfd {@dodf EvfntListfnfr} to thf domponfnt
 * ({@link MousfListfnfr} or {@link MousfMotionListfnfr}), or by invoking
 * {@link Componfnt#fnbblfEvfnts(long)} with thf bppropribtf mbsk pbrbmftfr
 * ({@dodf AWTEvfnt.MOUSE_EVENT_MASK} or {@dodf AWTEvfnt.MOUSE_MOTION_EVENT_MASK}).
 * If thf mousf fvfnt typf hbs not bffn fnbblfd on thf domponfnt, thf
 * dorrfsponding mousf fvfnts brf dispbtdhfd to thf first bndfstor thbt
 * hbs fnbblfd thf mousf fvfnt typf.
 *<p>
 * For fxbmplf, if b {@dodf MousfListfnfr} hbs bffn bddfd to b domponfnt, or
 * {@dodf fnbblfEvfnts(AWTEvfnt.MOUSE_EVENT_MASK)} hbs bffn invokfd, thfn bll
 * thf fvfnts dffinfd by {@dodf MousfListfnfr} brf dispbtdhfd to thf domponfnt.
 * On thf othfr hbnd, if b {@dodf MousfMotionListfnfr} hbs not bffn bddfd bnd
 * {@dodf fnbblfEvfnts} hbs not bffn invokfd with
 * {@dodf AWTEvfnt.MOUSE_MOTION_EVENT_MASK}, thfn mousf motion fvfnts brf not
 * dispbtdhfd to thf domponfnt. Instfbd thf mousf motion fvfnts brf
 * dispbtdhfd to thf first bndfstors thbt hbs fnbblfd mousf motion
 * fvfnts.
 * <P>
 * This low-lfvfl fvfnt is gfnfrbtfd by b domponfnt objfdt for:
 * <ul>
 * <li>Mousf Evfnts
 *     <ul>
 *     <li>b mousf button is prfssfd
 *     <li>b mousf button is rflfbsfd
 *     <li>b mousf button is dlidkfd (prfssfd bnd rflfbsfd)
 *     <li>thf mousf dursor fntfrs thf unobsdurfd pbrt of domponfnt's gfomftry
 *     <li>thf mousf dursor fxits thf unobsdurfd pbrt of domponfnt's gfomftry
 *     </ul>
 * <li> Mousf Motion Evfnts
 *     <ul>
 *     <li>thf mousf is movfd
 *     <li>thf mousf is drbggfd
 *     </ul>
 * </ul>
 * <P>
 * A <dodf>MousfEvfnt</dodf> objfdt is pbssfd to fvfry
 * <dodf>MousfListfnfr</dodf>
 * or <dodf>MousfAdbptfr</dodf> objfdt whidh is rfgistfrfd to rfdfivf
 * thf "intfrfsting" mousf fvfnts using thf domponfnt's
 * <dodf>bddMousfListfnfr</dodf> mfthod.
 * (<dodf>MousfAdbptfr</dodf> objfdts implfmfnt thf
 * <dodf>MousfListfnfr</dodf> intfrfbdf.) Ebdh sudh listfnfr objfdt
 * gfts b <dodf>MousfEvfnt</dodf> dontbining thf mousf fvfnt.
 * <P>
 * A <dodf>MousfEvfnt</dodf> objfdt is blso pbssfd to fvfry
 * <dodf>MousfMotionListfnfr</dodf> or
 * <dodf>MousfMotionAdbptfr</dodf> objfdt whidh is rfgistfrfd to rfdfivf
 * mousf motion fvfnts using thf domponfnt's
 * <dodf>bddMousfMotionListfnfr</dodf>
 * mfthod. (<dodf>MousfMotionAdbptfr</dodf> objfdts implfmfnt thf
 * <dodf>MousfMotionListfnfr</dodf> intfrfbdf.) Ebdh sudh listfnfr objfdt
 * gfts b <dodf>MousfEvfnt</dodf> dontbining thf mousf motion fvfnt.
 * <P>
 * Whfn b mousf button is dlidkfd, fvfnts brf gfnfrbtfd bnd sfnt to thf
 * rfgistfrfd <dodf>MousfListfnfr</dodf>s.
 * Thf stbtf of modbl kfys dbn bf rftrifvfd using {@link InputEvfnt#gftModififrs}
 * bnd {@link InputEvfnt#gftModififrsEx}.
 * Thf button mbsk rfturnfd by {@link InputEvfnt#gftModififrs} rfflfdts
 * only thf button thbt dhbngfd stbtf, not thf durrfnt stbtf of bll buttons.
 * (Notf: Duf to ovfrlbp in thf vblufs of ALT_MASK/BUTTON2_MASK bnd
 * META_MASK/BUTTON3_MASK, this is not blwbys truf for mousf fvfnts involving
 * modififr kfys).
 * To gft thf stbtf of bll buttons bnd modififr kfys, usf
 * {@link InputEvfnt#gftModififrsEx}.
 * Thf button whidh hbs dhbngfd stbtf is rfturnfd by {@link MousfEvfnt#gftButton}
 * <P>
 * For fxbmplf, if thf first mousf button is prfssfd, fvfnts brf sfnt in thf
 * following ordfr:
 * <PRE>
 *    <b   >id           </b   >   <b   >modififrs   </b   > <b   >button </b   >
 *    <dodf>MOUSE_PRESSED</dodf>:  <dodf>BUTTON1_MASK</dodf> <dodf>BUTTON1</dodf>
 *    <dodf>MOUSE_RELEASED</dodf>: <dodf>BUTTON1_MASK</dodf> <dodf>BUTTON1</dodf>
 *    <dodf>MOUSE_CLICKED</dodf>:  <dodf>BUTTON1_MASK</dodf> <dodf>BUTTON1</dodf>
 * </PRE>
 * Whfn multiplf mousf buttons brf prfssfd, fbdh prfss, rflfbsf, bnd dlidk
 * rfsults in b sfpbrbtf fvfnt.
 * <P>
 * For fxbmplf, if thf usfr prfssfs <b>button 1</b> followfd by
 * <b>button 2</b>, bnd thfn rflfbsfs thfm in thf sbmf ordfr,
 * thf following sfqufndf of fvfnts is gfnfrbtfd:
 * <PRE>
 *    <b   >id           </b   >   <b   >modififrs   </b   > <b   >button </b   >
 *    <dodf>MOUSE_PRESSED</dodf>:  <dodf>BUTTON1_MASK</dodf> <dodf>BUTTON1</dodf>
 *    <dodf>MOUSE_PRESSED</dodf>:  <dodf>BUTTON2_MASK</dodf> <dodf>BUTTON2</dodf>
 *    <dodf>MOUSE_RELEASED</dodf>: <dodf>BUTTON1_MASK</dodf> <dodf>BUTTON1</dodf>
 *    <dodf>MOUSE_CLICKED</dodf>:  <dodf>BUTTON1_MASK</dodf> <dodf>BUTTON1</dodf>
 *    <dodf>MOUSE_RELEASED</dodf>: <dodf>BUTTON2_MASK</dodf> <dodf>BUTTON2</dodf>
 *    <dodf>MOUSE_CLICKED</dodf>:  <dodf>BUTTON2_MASK</dodf> <dodf>BUTTON2</dodf>
 * </PRE>
 * If <b>button 2</b> is rflfbsfd first, thf
 * <dodf>MOUSE_RELEASED</dodf>/<dodf>MOUSE_CLICKED</dodf> pbir
 * for <dodf>BUTTON2_MASK</dodf> brrivfs first,
 * followfd by thf pbir for <dodf>BUTTON1_MASK</dodf>.
 * <p>
 * Somf fxtrb mousf buttons brf bddfd to fxtfnd thf stbndbrd sft of buttons
 * rfprfsfntfd by thf following donstbnts:{@dodf BUTTON1}, {@dodf BUTTON2}, bnd {@dodf BUTTON3}.
 * Extrb buttons hbvf no bssignfd {@dodf BUTTONx}
 * donstbnts bs wfll bs thfir button mbsks hbvf no bssignfd {@dodf BUTTONx_DOWN_MASK}
 * donstbnts. Nfvfrthflfss, ordinbl numbfrs stbrting from 4 mby bf
 * usfd bs button numbfrs (button ids). Vblufs obtbinfd by thf
 * {@link InputEvfnt#gftMbskForButton(int) gftMbskForButton(button)} mfthod mby bf usfd
 * bs button mbsks.
 * <p>
 * {@dodf MOUSE_DRAGGED} fvfnts brf dflivfrfd to thf {@dodf Componfnt}
 * in whidh thf mousf button wbs prfssfd until thf mousf button is rflfbsfd
 * (rfgbrdlfss of whfthfr thf mousf position is within thf bounds of thf
 * {@dodf Componfnt}).  Duf to plbtform-dfpfndfnt Drbg&bmp;Drop implfmfntbtions,
 * {@dodf MOUSE_DRAGGED} fvfnts mby not bf dflivfrfd during b nbtivf
 * Drbg&bmp;Drop opfrbtion.
 *
 * In b multi-sdrffn fnvironmfnt mousf drbg fvfnts brf dflivfrfd to thf
 * <dodf>Componfnt</dodf> fvfn if thf mousf position is outsidf thf bounds of thf
 * <dodf>GrbphidsConfigurbtion</dodf> bssodibtfd with thbt
 * <dodf>Componfnt</dodf>. Howfvfr, thf rfportfd position for mousf drbg fvfnts
 * in this dbsf mby difffr from thf bdtubl mousf position:
 * <ul>
 * <li>In b multi-sdrffn fnvironmfnt without b virtubl dfvidf:
 * <br>
 * Thf rfportfd doordinbtfs for mousf drbg fvfnts brf dlippfd to fit within thf
 * bounds of thf <dodf>GrbphidsConfigurbtion</dodf> bssodibtfd with
 * thf <dodf>Componfnt</dodf>.
 * <li>In b multi-sdrffn fnvironmfnt with b virtubl dfvidf:
 * <br>
 * Thf rfportfd doordinbtfs for mousf drbg fvfnts brf dlippfd to fit within thf
 * bounds of thf virtubl dfvidf bssodibtfd with thf <dodf>Componfnt</dodf>.
 * </ul>
 * <p>
 * An unspfdififd bfhbvior will bf dbusfd if thf {@dodf id} pbrbmftfr
 * of bny pbrtidulbr {@dodf MousfEvfnt} instbndf is not
 * in thf rbngf from {@dodf MOUSE_FIRST} to {@dodf MOUSE_LAST}-1
 * ({@dodf MOUSE_WHEEL} is not bddfptbblf).
 *
 * @buthor Cbrl Quinn
 *
 * @sff MousfAdbptfr
 * @sff MousfListfnfr
 * @sff MousfMotionAdbptfr
 * @sff MousfMotionListfnfr
 * @sff MousfWhfflListfnfr
 * @sff <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/fvfnts/mousflistfnfr.html">Tutoribl: Writing b Mousf Listfnfr</b>
 * @sff <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/fvfnts/mousfmotionlistfnfr.html">Tutoribl: Writing b Mousf Motion Listfnfr</b>
 *
 * @sindf 1.1
 */
publid dlbss MousfEvfnt fxtfnds InputEvfnt {

    /**
     * Thf first numbfr in thf rbngf of ids usfd for mousf fvfnts.
     */
    publid stbtid finbl int MOUSE_FIRST         = 500;

    /**
     * Thf lbst numbfr in thf rbngf of ids usfd for mousf fvfnts.
     */
    publid stbtid finbl int MOUSE_LAST          = 507;

    /**
     * Thf "mousf dlidkfd" fvfnt. This <dodf>MousfEvfnt</dodf>
     * oddurs whfn b mousf button is prfssfd bnd rflfbsfd.
     */
    publid stbtid finbl int MOUSE_CLICKED = MOUSE_FIRST;

    /**
     * Thf "mousf prfssfd" fvfnt. This <dodf>MousfEvfnt</dodf>
     * oddurs whfn b mousf button is pushfd down.
     */
    publid stbtid finbl int MOUSE_PRESSED = 1 + MOUSE_FIRST; //Evfnt.MOUSE_DOWN

    /**
     * Thf "mousf rflfbsfd" fvfnt. This <dodf>MousfEvfnt</dodf>
     * oddurs whfn b mousf button is lft up.
     */
    publid stbtid finbl int MOUSE_RELEASED = 2 + MOUSE_FIRST; //Evfnt.MOUSE_UP

    /**
     * Thf "mousf movfd" fvfnt. This <dodf>MousfEvfnt</dodf>
     * oddurs whfn thf mousf position dhbngfs.
     */
    publid stbtid finbl int MOUSE_MOVED = 3 + MOUSE_FIRST; //Evfnt.MOUSE_MOVE

    /**
     * Thf "mousf fntfrfd" fvfnt. This <dodf>MousfEvfnt</dodf>
     * oddurs whfn thf mousf dursor fntfrs thf unobsdurfd pbrt of domponfnt's
     * gfomftry.
     */
    publid stbtid finbl int MOUSE_ENTERED = 4 + MOUSE_FIRST; //Evfnt.MOUSE_ENTER

    /**
     * Thf "mousf fxitfd" fvfnt. This <dodf>MousfEvfnt</dodf>
     * oddurs whfn thf mousf dursor fxits thf unobsdurfd pbrt of domponfnt's
     * gfomftry.
     */
    publid stbtid finbl int MOUSE_EXITED = 5 + MOUSE_FIRST; //Evfnt.MOUSE_EXIT

    /**
     * Thf "mousf drbggfd" fvfnt. This <dodf>MousfEvfnt</dodf>
     * oddurs whfn thf mousf position dhbngfs whilf b mousf button is prfssfd.
     */
    publid stbtid finbl int MOUSE_DRAGGED = 6 + MOUSE_FIRST; //Evfnt.MOUSE_DRAG

    /**
     * Thf "mousf whffl" fvfnt.  This is thf only <dodf>MousfWhfflEvfnt</dodf>.
     * It oddurs whfn b mousf fquippfd with b whffl hbs its whffl rotbtfd.
     * @sindf 1.4
     */
    publid stbtid finbl int MOUSE_WHEEL = 7 + MOUSE_FIRST;

    /**
     * Indidbtfs no mousf buttons; usfd by {@link #gftButton}.
     * @sindf 1.4
     */
    publid stbtid finbl int NOBUTTON = 0;

    /**
     * Indidbtfs mousf button #1; usfd by {@link #gftButton}.
     * @sindf 1.4
     */
    publid stbtid finbl int BUTTON1 = 1;

    /**
     * Indidbtfs mousf button #2; usfd by {@link #gftButton}.
     * @sindf 1.4
     */
    publid stbtid finbl int BUTTON2 = 2;

    /**
     * Indidbtfs mousf button #3; usfd by {@link #gftButton}.
     * @sindf 1.4
     */
    publid stbtid finbl int BUTTON3 = 3;

    /**
     * Thf mousf fvfnt's x doordinbtf.
     * Thf x vbluf is rflbtivf to thf domponfnt thbt firfd thf fvfnt.
     *
     * @sfribl
     * @sff #gftX()
     */
    int x;

    /**
     * Thf mousf fvfnt's y doordinbtf.
     * Thf y vbluf is rflbtivf to thf domponfnt thbt firfd thf fvfnt.
     *
     * @sfribl
     * @sff #gftY()
     */
    int y;

    /**
     * Thf mousf fvfnt's x bbsolutf doordinbtf.
     * In b virtubl dfvidf multi-sdrffn fnvironmfnt in whidh thf
     * dfsktop brfb dould spbn multiplf physidbl sdrffn dfvidfs,
     * this doordinbtf is rflbtivf to thf virtubl doordinbtf systfm.
     * Othfrwisf, this doordinbtf is rflbtivf to thf doordinbtf systfm
     * bssodibtfd with thf Componfnt's GrbphidsConfigurbtion.
     *
     * @sfribl
   */
    privbtf int xAbs;

    /**
     * Thf mousf fvfnt's y bbsolutf doordinbtf.
     * In b virtubl dfvidf multi-sdrffn fnvironmfnt in whidh thf
     * dfsktop brfb dould spbn multiplf physidbl sdrffn dfvidfs,
     * this doordinbtf is rflbtivf to thf virtubl doordinbtf systfm.
     * Othfrwisf, this doordinbtf is rflbtivf to thf doordinbtf systfm
     * bssodibtfd with thf Componfnt's GrbphidsConfigurbtion.
     *
     * @sfribl
     */
    privbtf int yAbs;

    /**
     * Indidbtfs thf numbfr of quidk donsfdutivf dlidks of
     * b mousf button.
     * dlidkCount will bf vblid for only thrff mousf fvfnts :<BR>
     * <dodf>MOUSE_CLICKED</dodf>,
     * <dodf>MOUSE_PRESSED</dodf> bnd
     * <dodf>MOUSE_RELEASED</dodf>.
     * For thf bbovf, thf <dodf>dlidkCount</dodf> will bf bt lfbst 1.
     * For bll othfr fvfnts thf dount will bf 0.
     *
     * @sfribl
     * @sff #gftClidkCount()
     */
    int dlidkCount;

    /**
     * Indidbtfs whidh, if bny, of thf mousf buttons hbs dhbngfd stbtf.
     *
     * Thf vblid vblufs brf rbngfd from 0 to thf vbluf rfturnfd by thf
     * {@link jbvb.bwt.MousfInfo#gftNumbfrOfButtons() MousfInfo.gftNumbfrOfButtons()} mfthod.
     * This rbngf blrfbdy indludfs donstbnts {@dodf NOBUTTON}, {@dodf BUTTON1},
     * {@dodf BUTTON2}, bnd {@dodf BUTTON3}
     * if thfsf buttons brf prfsfnt. So it is bllowfd to usf thfsf donstbnts too.
     * For fxbmplf, for b mousf with two buttons this fifld mby dontbin thf following vblufs:
     * <ul>
     * <li> 0 ({@dodf NOBUTTON})
     * <li> 1 ({@dodf BUTTON1})
     * <li> 2 ({@dodf BUTTON2})
     * </ul>
     * If b mousf hbs 5 buttons, this fifld mby dontbin thf following vblufs:
     * <ul>
     * <li> 0 ({@dodf NOBUTTON})
     * <li> 1 ({@dodf BUTTON1})
     * <li> 2 ({@dodf BUTTON2})
     * <li> 3 ({@dodf BUTTON3})
     * <li> 4
     * <li> 5
     * </ul>
     * If support for fxtfndfd mousf buttons is {@link Toolkit#brfExtrbMousfButtonsEnbblfd()} disbblfd by Jbvb
     * thfn thf fifld mby not dontbin thf vbluf lbrgfr thbn {@dodf BUTTON3}.
     * @sfribl
     * @sff #gftButton()
     * @sff jbvb.bwt.Toolkit#brfExtrbMousfButtonsEnbblfd()
     */
    int button;

    /**
     * A propfrty usfd to indidbtf whfthfr b Popup Mfnu
     * should bppfbr  with b dfrtbin gfsturfs.
     * If <dodf>popupTriggfr</dodf> = <dodf>fblsf</dodf>,
     * no popup mfnu should bppfbr.  If it is <dodf>truf</dodf>
     * thfn b popup mfnu should bppfbr.
     *
     * @sfribl
     * @sff jbvb.bwt.PopupMfnu
     * @sff #isPopupTriggfr()
     */
    boolfbn popupTriggfr = fblsf;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -991214153494842848L;

    /**
     * A numbfr of buttons bvbilbblf on thf mousf bt thf {@dodf Toolkit} mbdhinfry stbrtup.
     */
    privbtf stbtid int dbdhfdNumbfrOfButtons;

    stbtid {
        /* fnsurf thbt thf nfdfssbry nbtivf librbrifs brf lobdfd */
        NbtivfLibLobdfr.lobdLibrbrifs();
        if (!GrbphidsEnvironmfnt.isHfbdlfss()) {
            initIDs();
        }
        finbl Toolkit tk = Toolkit.gftDffbultToolkit();
        if (tk instbndfof SunToolkit) {
            dbdhfdNumbfrOfButtons = ((SunToolkit)tk).gftNumbfrOfButtons();
        } flsf {
            //It's fxpfdtfd thbt somf toolkits (Hfbdlfss,
            //whbtfvfr bfsidfs SunToolkit) dould blso opfrbtf.
            dbdhfdNumbfrOfButtons = 3;
        }
    }

    /**
     * Initiblizf JNI fifld bnd mfthod IDs for fiflds thbt mby bf
     *  bddfssfd from C.
     */
    privbtf stbtid nbtivf void initIDs();

    /**
     * Rfturns thf bbsolutf x, y position of thf fvfnt.
     * In b virtubl dfvidf multi-sdrffn fnvironmfnt in whidh thf
     * dfsktop brfb dould spbn multiplf physidbl sdrffn dfvidfs,
     * thfsf doordinbtfs brf rflbtivf to thf virtubl doordinbtf systfm.
     * Othfrwisf, thfsf doordinbtfs brf rflbtivf to thf doordinbtf systfm
     * bssodibtfd with thf Componfnt's GrbphidsConfigurbtion.
     *
     * @rfturn b <dodf>Point</dodf> objfdt dontbining thf bbsolutf  x
     *  bnd y doordinbtfs.
     *
     * @sff jbvb.bwt.GrbphidsConfigurbtion
     * @sindf 1.6
     */
    publid Point gftLodbtionOnSdrffn(){
      rfturn nfw Point(xAbs, yAbs);
    }

    /**
     * Rfturns thf bbsolutf horizontbl x position of thf fvfnt.
     * In b virtubl dfvidf multi-sdrffn fnvironmfnt in whidh thf
     * dfsktop brfb dould spbn multiplf physidbl sdrffn dfvidfs,
     * this doordinbtf is rflbtivf to thf virtubl doordinbtf systfm.
     * Othfrwisf, this doordinbtf is rflbtivf to thf doordinbtf systfm
     * bssodibtfd with thf Componfnt's GrbphidsConfigurbtion.
     *
     * @rfturn x  bn intfgfr indidbting bbsolutf horizontbl position.
     *
     * @sff jbvb.bwt.GrbphidsConfigurbtion
     * @sindf 1.6
     */
    publid int gftXOnSdrffn() {
        rfturn xAbs;
    }

    /**
     * Rfturns thf bbsolutf vfrtidbl y position of thf fvfnt.
     * In b virtubl dfvidf multi-sdrffn fnvironmfnt in whidh thf
     * dfsktop brfb dould spbn multiplf physidbl sdrffn dfvidfs,
     * this doordinbtf is rflbtivf to thf virtubl doordinbtf systfm.
     * Othfrwisf, this doordinbtf is rflbtivf to thf doordinbtf systfm
     * bssodibtfd with thf Componfnt's GrbphidsConfigurbtion.
     *
     * @rfturn y  bn intfgfr indidbting bbsolutf vfrtidbl position.
     *
     * @sff jbvb.bwt.GrbphidsConfigurbtion
     * @sindf 1.6
     */
    publid int gftYOnSdrffn() {
        rfturn yAbs;
    }

    /**
     * Construdts b <dodf>MousfEvfnt</dodf> objfdt with thf
     * spfdififd sourdf domponfnt,
     * typf, timf, modififrs, doordinbtfs, dlidk dount, popupTriggfr flbg,
     * bnd button numbfr.
     * <p>
     * Crfbting bn invblid fvfnt (sudh
     * bs by using morf thbn onf of thf old _MASKs, or modififr/button
     * vblufs whidh don't mbtdh) rfsults in unspfdififd bfhbvior.
     * An invodbtion of thf form
     * <tt>MousfEvfnt(sourdf, id, whfn, modififrs, x, y, dlidkCount, popupTriggfr, button)</tt>
     * bfhbvfs in fxbdtly thf sbmf wby bs thf invodbtion
     * <tt> {@link #MousfEvfnt(Componfnt, int, long, int, int, int,
     * int, int, int, boolfbn, int) MousfEvfnt}(sourdf, id, whfn, modififrs,
     * x, y, xAbs, yAbs, dlidkCount, popupTriggfr, button)</tt>
     * whfrf xAbs bnd yAbs dffinfs bs sourdf's lodbtion on sdrffn plus
     * rflbtivf doordinbtfs x bnd y.
     * xAbs bnd yAbs brf sft to zfro if thf sourdf is not showing.
     * This mfthod throws bn
     * <dodf>IllfgblArgumfntExdfption</dodf> if <dodf>sourdf</dodf>
     * is <dodf>null</dodf>.
     *
     * @pbrbm sourdf       Thf <dodf>Componfnt</dodf> thbt originbtfd thf fvfnt
     * @pbrbm id              An intfgfr indidbting thf typf of fvfnt.
     *                     For informbtion on bllowbblf vblufs, sff
     *                     thf dlbss dfsdription for {@link MousfEvfnt}
     * @pbrbm whfn         A long intfgfr thbt givfs thf timf thf fvfnt oddurrfd.
     *                     Pbssing nfgbtivf or zfro vbluf
     *                     is not rfdommfndfd
     * @pbrbm modififrs    b modififr mbsk dfsdribing thf modififr kfys bnd mousf
     *                     buttons (for fxbmplf, shift, dtrl, blt, bnd mftb) thbt
     *                     brf down during thf fvfnt.
     *                     Only fxtfndfd modififrs brf bllowfd to bf usfd bs b
     *                     vbluf for this pbrbmftfr (sff thf {@link InputEvfnt#gftModififrsEx}
     *                     dlbss for thf dfsdription of fxtfndfd modififrs).
     *                     Pbssing nfgbtivf pbrbmftfr
     *                     is not rfdommfndfd.
     *                     Zfro vbluf mfbns thbt no modififrs wfrf pbssfd
     * @pbrbm x            Thf horizontbl x doordinbtf for thf mousf lodbtion.
     *                       It is bllowfd to pbss nfgbtivf vblufs
     * @pbrbm y            Thf vfrtidbl y doordinbtf for thf mousf lodbtion.
     *                       It is bllowfd to pbss nfgbtivf vblufs
     * @pbrbm dlidkCount   Thf numbfr of mousf dlidks bssodibtfd with fvfnt.
     *                       Pbssing nfgbtivf vbluf
     *                       is not rfdommfndfd
     * @pbrbm popupTriggfr A boolfbn thbt fqubls {@dodf truf} if this fvfnt
     *                     is b triggfr for b popup mfnu
     * @pbrbm button       An intfgfr thbt indidbtfs, whidh of thf mousf buttons hbs
     *                     dhbngfd its stbtf.
     * Thf following rulfs brf bpplifd to this pbrbmftfr:
     * <ul>
     * <li>If support for thf fxtfndfd mousf buttons is
     * {@link Toolkit#brfExtrbMousfButtonsEnbblfd() disbblfd} by Jbvb
     * thfn it is bllowfd to drfbtf {@dodf MousfEvfnt} objfdts only with thf stbndbrd buttons:
     * {@dodf NOBUTTON}, {@dodf BUTTON1}, {@dodf BUTTON2}, bnd
     * {@dodf BUTTON3}.
     * <li> If support for thf fxtfndfd mousf buttons is
     * {@link Toolkit#brfExtrbMousfButtonsEnbblfd() fnbblfd} by Jbvb
     * thfn it is bllowfd to drfbtf {@dodf MousfEvfnt} objfdts with
     * thf stbndbrd buttons.
     * In dbsf thf support for fxtfndfd mousf buttons is
     * {@link Toolkit#brfExtrbMousfButtonsEnbblfd() fnbblfd} by Jbvb, thfn
     * in bddition to thf stbndbrd buttons, {@dodf MousfEvfnt} objfdts dbn bf drfbtfd
     * using buttons from thf rbngf stbrting from 4 to
     * {@link jbvb.bwt.MousfInfo#gftNumbfrOfButtons() MousfInfo.gftNumbfrOfButtons()}
     * if thf mousf hbs morf thbn thrff buttons.
     * </ul>
     * @throws IllfgblArgumfntExdfption if {@dodf button} is lfss thfn zfro
     * @throws IllfgblArgumfntExdfption if <dodf>sourdf</dodf> is null
     * @throws IllfgblArgumfntExdfption if {@dodf button} is grfbtfr thfn BUTTON3 bnd thf support for fxtfndfd mousf buttons is
     *                                  {@link Toolkit#brfExtrbMousfButtonsEnbblfd() disbblfd} by Jbvb
     * @throws IllfgblArgumfntExdfption if {@dodf button} is grfbtfr thfn thf
     *                                  {@link jbvb.bwt.MousfInfo#gftNumbfrOfButtons() durrfnt numbfr of buttons} bnd thf support
     *                                  for fxtfndfd mousf buttons is {@link Toolkit#brfExtrbMousfButtonsEnbblfd() fnbblfd}
     *                                  by Jbvb
     * @throws IllfgblArgumfntExdfption if bn invblid <dodf>button</dodf>
     *            vbluf is pbssfd in
     * @throws IllfgblArgumfntExdfption if <dodf>sourdf</dodf> is null
     * @sff #gftSourdf()
     * @sff #gftID()
     * @sff #gftWhfn()
     * @sff #gftModififrs()
     * @sff #gftX()
     * @sff #gftY()
     * @sff #gftClidkCount()
     * @sff #isPopupTriggfr()
     * @sff #gftButton()
     * @sindf 1.4
     */
    publid MousfEvfnt(Componfnt sourdf, int id, long whfn, int modififrs,
                      int x, int y, int dlidkCount, boolfbn popupTriggfr,
                      int button)
    {
        this(sourdf, id, whfn, modififrs, x, y, 0, 0, dlidkCount, popupTriggfr, button);
        Point fvfntLodbtionOnSdrffn = nfw Point(0, 0);
        try {
          fvfntLodbtionOnSdrffn = sourdf.gftLodbtionOnSdrffn();
          this.xAbs = fvfntLodbtionOnSdrffn.x + x;
          this.yAbs = fvfntLodbtionOnSdrffn.y + y;
        } dbtdh (IllfgblComponfntStbtfExdfption f){
          this.xAbs = 0;
          this.yAbs = 0;
        }
    }

    /**
     * Construdts b <dodf>MousfEvfnt</dodf> objfdt with thf
     * spfdififd sourdf domponfnt,
     * typf, modififrs, doordinbtfs, dlidk dount, bnd popupTriggfr flbg.
     * An invodbtion of thf form
     * <tt>MousfEvfnt(sourdf, id, whfn, modififrs, x, y, dlidkCount, popupTriggfr)</tt>
     * bfhbvfs in fxbdtly thf sbmf wby bs thf invodbtion
     * <tt> {@link #MousfEvfnt(Componfnt, int, long, int, int, int,
     * int, int, int, boolfbn, int) MousfEvfnt}(sourdf, id, whfn, modififrs,
     * x, y, xAbs, yAbs, dlidkCount, popupTriggfr, MousfEvfnt.NOBUTTON)</tt>
     * whfrf xAbs bnd yAbs dffinfs bs sourdf's lodbtion on sdrffn plus
     * rflbtivf doordinbtfs x bnd y.
     * xAbs bnd yAbs brf sft to zfro if thf sourdf is not showing.
     * This mfthod throws bn <dodf>IllfgblArgumfntExdfption</dodf>
     * if <dodf>sourdf</dodf> is <dodf>null</dodf>.
     *
     * @pbrbm sourdf       Thf <dodf>Componfnt</dodf> thbt originbtfd thf fvfnt
     * @pbrbm id              An intfgfr indidbting thf typf of fvfnt.
     *                     For informbtion on bllowbblf vblufs, sff
     *                     thf dlbss dfsdription for {@link MousfEvfnt}
     * @pbrbm whfn         A long intfgfr thbt givfs thf timf thf fvfnt oddurrfd.
     *                     Pbssing nfgbtivf or zfro vbluf
     *                     is not rfdommfndfd
     * @pbrbm modififrs    b modififr mbsk dfsdribing thf modififr kfys bnd mousf
     *                     buttons (for fxbmplf, shift, dtrl, blt, bnd mftb) thbt
     *                     brf down during thf fvfnt.
     *                     Only fxtfndfd modififrs brf bllowfd to bf usfd bs b
     *                     vbluf for this pbrbmftfr (sff thf {@link InputEvfnt#gftModififrsEx}
     *                     dlbss for thf dfsdription of fxtfndfd modififrs).
     *                     Pbssing nfgbtivf pbrbmftfr
     *                     is not rfdommfndfd.
     *                     Zfro vbluf mfbns thbt no modififrs wfrf pbssfd
     * @pbrbm x            Thf horizontbl x doordinbtf for thf mousf lodbtion.
     *                       It is bllowfd to pbss nfgbtivf vblufs
     * @pbrbm y            Thf vfrtidbl y doordinbtf for thf mousf lodbtion.
     *                       It is bllowfd to pbss nfgbtivf vblufs
     * @pbrbm dlidkCount   Thf numbfr of mousf dlidks bssodibtfd with fvfnt.
     *                       Pbssing nfgbtivf vbluf
     *                       is not rfdommfndfd
     * @pbrbm popupTriggfr A boolfbn thbt fqubls {@dodf truf} if this fvfnt
     *                     is b triggfr for b popup mfnu
     * @throws IllfgblArgumfntExdfption if <dodf>sourdf</dodf> is null
     * @sff #gftSourdf()
     * @sff #gftID()
     * @sff #gftWhfn()
     * @sff #gftModififrs()
     * @sff #gftX()
     * @sff #gftY()
     * @sff #gftClidkCount()
     * @sff #isPopupTriggfr()
     */
     publid MousfEvfnt(Componfnt sourdf, int id, long whfn, int modififrs,
                      int x, int y, int dlidkCount, boolfbn popupTriggfr) {
        this(sourdf, id, whfn, modififrs, x, y, dlidkCount, popupTriggfr, NOBUTTON);
     }


    /* if thf button is bn fxtrb button bnd it is rflfbsfd or dlidkfd thfn in Xsystfm its stbtf
       is not modififd. Exdludf this button numbfr from ExtModififrs mbsk.*/
    trbnsifnt privbtf boolfbn shouldExdludfButtonFromExtModififrs = fblsf;

    /**
     * {@inhfritDod}
     */
    publid int gftModififrsEx() {
        int tmpModififrs = modififrs;
        if (shouldExdludfButtonFromExtModififrs) {
            tmpModififrs &= ~(InputEvfnt.gftMbskForButton(gftButton()));
        }
        rfturn tmpModififrs & ~JDK_1_3_MODIFIERS;
    }

    /**
     * Construdts b <dodf>MousfEvfnt</dodf> objfdt with thf
     * spfdififd sourdf domponfnt,
     * typf, timf, modififrs, doordinbtfs, bbsolutf doordinbtfs, dlidk dount, popupTriggfr flbg,
     * bnd button numbfr.
     * <p>
     * Crfbting bn invblid fvfnt (sudh
     * bs by using morf thbn onf of thf old _MASKs, or modififr/button
     * vblufs whidh don't mbtdh) rfsults in unspfdififd bfhbvior.
     * Evfn if indonsistfnt vblufs for rflbtivf bnd bbsolutf doordinbtfs brf
     * pbssfd to thf donstrudtor, thf mousf fvfnt instbndf is still
     * drfbtfd bnd no fxdfption is thrown.
     * This mfthod throws bn
     * <dodf>IllfgblArgumfntExdfption</dodf> if <dodf>sourdf</dodf>
     * is <dodf>null</dodf>.
     *
     * @pbrbm sourdf       Thf <dodf>Componfnt</dodf> thbt originbtfd thf fvfnt
     * @pbrbm id              An intfgfr indidbting thf typf of fvfnt.
     *                     For informbtion on bllowbblf vblufs, sff
     *                     thf dlbss dfsdription for {@link MousfEvfnt}
     * @pbrbm whfn         A long intfgfr thbt givfs thf timf thf fvfnt oddurrfd.
     *                     Pbssing nfgbtivf or zfro vbluf
     *                     is not rfdommfndfd
     * @pbrbm modififrs    b modififr mbsk dfsdribing thf modififr kfys bnd mousf
     *                     buttons (for fxbmplf, shift, dtrl, blt, bnd mftb) thbt
     *                     brf down during thf fvfnt.
     *                     Only fxtfndfd modififrs brf bllowfd to bf usfd bs b
     *                     vbluf for this pbrbmftfr (sff thf {@link InputEvfnt#gftModififrsEx}
     *                     dlbss for thf dfsdription of fxtfndfd modififrs).
     *                     Pbssing nfgbtivf pbrbmftfr
     *                     is not rfdommfndfd.
     *                     Zfro vbluf mfbns thbt no modififrs wfrf pbssfd
     * @pbrbm x            Thf horizontbl x doordinbtf for thf mousf lodbtion.
     *                       It is bllowfd to pbss nfgbtivf vblufs
     * @pbrbm y            Thf vfrtidbl y doordinbtf for thf mousf lodbtion.
     *                       It is bllowfd to pbss nfgbtivf vblufs
     * @pbrbm xAbs           Thf bbsolutf horizontbl x doordinbtf for thf mousf lodbtion
     *                       It is bllowfd to pbss nfgbtivf vblufs
     * @pbrbm yAbs           Thf bbsolutf vfrtidbl y doordinbtf for thf mousf lodbtion
     *                       It is bllowfd to pbss nfgbtivf vblufs
     * @pbrbm dlidkCount   Thf numbfr of mousf dlidks bssodibtfd with fvfnt.
     *                       Pbssing nfgbtivf vbluf
     *                       is not rfdommfndfd
     * @pbrbm popupTriggfr A boolfbn thbt fqubls {@dodf truf} if this fvfnt
     *                     is b triggfr for b popup mfnu
     * @pbrbm button       An intfgfr thbt indidbtfs, whidh of thf mousf buttons hbs
     *                     dhbngfd its stbtf.
     * Thf following rulfs brf bpplifd to this pbrbmftfr:
     * <ul>
     * <li>If support for thf fxtfndfd mousf buttons is
     * {@link Toolkit#brfExtrbMousfButtonsEnbblfd() disbblfd} by Jbvb
     * thfn it is bllowfd to drfbtf {@dodf MousfEvfnt} objfdts only with thf stbndbrd buttons:
     * {@dodf NOBUTTON}, {@dodf BUTTON1}, {@dodf BUTTON2}, bnd
     * {@dodf BUTTON3}.
     * <li> If support for thf fxtfndfd mousf buttons is
     * {@link Toolkit#brfExtrbMousfButtonsEnbblfd() fnbblfd} by Jbvb
     * thfn it is bllowfd to drfbtf {@dodf MousfEvfnt} objfdts with
     * thf stbndbrd buttons.
     * In dbsf thf support for fxtfndfd mousf buttons is
     * {@link Toolkit#brfExtrbMousfButtonsEnbblfd() fnbblfd} by Jbvb, thfn
     * in bddition to thf stbndbrd buttons, {@dodf MousfEvfnt} objfdts dbn bf drfbtfd
     * using buttons from thf rbngf stbrting from 4 to
     * {@link jbvb.bwt.MousfInfo#gftNumbfrOfButtons() MousfInfo.gftNumbfrOfButtons()}
     * if thf mousf hbs morf thbn thrff buttons.
     * </ul>
     * @throws IllfgblArgumfntExdfption if {@dodf button} is lfss thfn zfro
     * @throws IllfgblArgumfntExdfption if <dodf>sourdf</dodf> is null
     * @throws IllfgblArgumfntExdfption if {@dodf button} is grfbtfr thfn BUTTON3 bnd thf support for fxtfndfd mousf buttons is
     *                                  {@link Toolkit#brfExtrbMousfButtonsEnbblfd() disbblfd} by Jbvb
     * @throws IllfgblArgumfntExdfption if {@dodf button} is grfbtfr thfn thf
     *                                  {@link jbvb.bwt.MousfInfo#gftNumbfrOfButtons() durrfnt numbfr of buttons} bnd thf support
     *                                  for fxtfndfd mousf buttons is {@link Toolkit#brfExtrbMousfButtonsEnbblfd() fnbblfd}
     *                                  by Jbvb
     * @throws IllfgblArgumfntExdfption if bn invblid <dodf>button</dodf>
     *            vbluf is pbssfd in
     * @throws IllfgblArgumfntExdfption if <dodf>sourdf</dodf> is null
     * @sff #gftSourdf()
     * @sff #gftID()
     * @sff #gftWhfn()
     * @sff #gftModififrs()
     * @sff #gftX()
     * @sff #gftY()
     * @sff #gftXOnSdrffn()
     * @sff #gftYOnSdrffn()
     * @sff #gftClidkCount()
     * @sff #isPopupTriggfr()
     * @sff #gftButton()
     * @sff #button
     * @sff Toolkit#brfExtrbMousfButtonsEnbblfd()
     * @sff jbvb.bwt.MousfInfo#gftNumbfrOfButtons()
     * @sff InputEvfnt#gftMbskForButton(int)
     * @sindf 1.6
     */
    publid MousfEvfnt(Componfnt sourdf, int id, long whfn, int modififrs,
                      int x, int y, int xAbs, int yAbs,
                      int dlidkCount, boolfbn popupTriggfr, int button)
    {
        supfr(sourdf, id, whfn, modififrs);
        this.x = x;
        this.y = y;
        this.xAbs = xAbs;
        this.yAbs = yAbs;
        this.dlidkCount = dlidkCount;
        this.popupTriggfr = popupTriggfr;
        if (button < NOBUTTON){
            throw nfw IllfgblArgumfntExdfption("Invblid button vbluf :" + button);
        }
        if (button > BUTTON3) {
            if (!Toolkit.gftDffbultToolkit().brfExtrbMousfButtonsEnbblfd()){
                throw nfw IllfgblArgumfntExdfption("Extrb mousf fvfnts brf disbblfd " + button);
            } flsf {
                if (button > dbdhfdNumbfrOfButtons) {
                    throw nfw IllfgblArgumfntExdfption("Nonfxistfnt button " + button);
                }
            }
            // XToolkit: fxtrb buttons brf not rfporting bbout thfir stbtf dorrfdtly.
            // Bfing prfssfd thfy rfport thf stbtf=0 both on thf prfss bnd on thf rflfbsf.
            // For 1-3 buttons thf stbtf vbluf fqubls zfro on prfss bnd non-zfro on rflfbsf.
            // Othfr modififrs likf Shift, ALT ftd sffm rfport wfll with fxtrb buttons.
            // Thf problfm rfvfbls bs follows: onf button is prfssfd bnd thfn bnothfr button is prfssfd bnd rflfbsfd.
            // So, thf gftModififrsEx() would not bf zfro duf to b first button bnd wf will skip this modififr.
            // This mby hbvf to bf movfd into thf pffr dodf instfbd if possiblf.

            if (gftModififrsEx() != 0) { //Thfrf is bt lfbst onf morf button in b prfssfd stbtf.
                if (id == MousfEvfnt.MOUSE_RELEASED || id == MousfEvfnt.MOUSE_CLICKED){
                    shouldExdludfButtonFromExtModififrs = truf;
                }
            }
        }

        this.button = button;

        if ((gftModififrs() != 0) && (gftModififrsEx() == 0)) {
            sftNfwModififrs();
        } flsf if ((gftModififrs() == 0) &&
                   (gftModififrsEx() != 0 || button != NOBUTTON) &&
                   (button <= BUTTON3))
        {
            sftOldModififrs();
        }
    }

    /**
     * Rfturns thf horizontbl x position of thf fvfnt rflbtivf to thf
     * sourdf domponfnt.
     *
     * @rfturn x  bn intfgfr indidbting horizontbl position rflbtivf to
     *            thf domponfnt
     */
    publid int gftX() {
        rfturn x;
    }

    /**
     * Rfturns thf vfrtidbl y position of thf fvfnt rflbtivf to thf
     * sourdf domponfnt.
     *
     * @rfturn y  bn intfgfr indidbting vfrtidbl position rflbtivf to
     *            thf domponfnt
     */
    publid int gftY() {
        rfturn y;
    }

    /**
     * Rfturns thf x,y position of thf fvfnt rflbtivf to thf sourdf domponfnt.
     *
     * @rfturn b <dodf>Point</dodf> objfdt dontbining thf x bnd y doordinbtfs
     *         rflbtivf to thf sourdf domponfnt
     *
     */
    publid Point gftPoint() {
        int x;
        int y;
        syndhronizfd (this) {
            x = this.x;
            y = this.y;
        }
        rfturn nfw Point(x, y);
    }

    /**
     * Trbnslbtfs thf fvfnt's doordinbtfs to b nfw position
     * by bdding spfdififd <dodf>x</dodf> (horizontbl) bnd <dodf>y</dodf>
     * (vfrtidbl) offsfts.
     *
     * @pbrbm x thf horizontbl x vbluf to bdd to thf durrfnt x
     *          doordinbtf position
     * @pbrbm y thf vfrtidbl y vbluf to bdd to thf durrfnt y
                doordinbtf position
     */
    publid syndhronizfd void trbnslbtfPoint(int x, int y) {
        this.x += x;
        this.y += y;
    }

    /**
     * Rfturns thf numbfr of mousf dlidks bssodibtfd with this fvfnt.
     *
     * @rfturn intfgfr vbluf for thf numbfr of dlidks
     */
    publid int gftClidkCount() {
        rfturn dlidkCount;
    }

    /**
     * Rfturns whidh, if bny, of thf mousf buttons hbs dhbngfd stbtf.
     * Thf rfturnfd vbluf is rbngfd
     * from 0 to thf {@link jbvb.bwt.MousfInfo#gftNumbfrOfButtons() MousfInfo.gftNumbfrOfButtons()}
     * vbluf.
     * Thf rfturnfd vbluf indludfs bt lfbst thf following donstbnts:
     * <ul>
     * <li> {@dodf NOBUTTON}
     * <li> {@dodf BUTTON1}
     * <li> {@dodf BUTTON2}
     * <li> {@dodf BUTTON3}
     * </ul>
     * It is bllowfd to usf thosf donstbnts to dompbrf with thf rfturnfd button numbfr in thf bpplidbtion.
     * For fxbmplf,
     * <prf>
     * if (bnEvfnt.gftButton() == MousfEvfnt.BUTTON1) {
     * </prf>
     * In pbrtidulbr, for b mousf with onf, two, or thrff buttons this mfthod mby rfturn thf following vblufs:
     * <ul>
     * <li> 0 ({@dodf NOBUTTON})
     * <li> 1 ({@dodf BUTTON1})
     * <li> 2 ({@dodf BUTTON2})
     * <li> 3 ({@dodf BUTTON3})
     * </ul>
     * Button numbfrs grfbtfr thfn {@dodf BUTTON3} hbvf no donstbnt idfntififr. So if b mousf with fivf buttons is
     * instbllfd, this mfthod mby rfturn thf following vblufs:
     * <ul>
     * <li> 0 ({@dodf NOBUTTON})
     * <li> 1 ({@dodf BUTTON1})
     * <li> 2 ({@dodf BUTTON2})
     * <li> 3 ({@dodf BUTTON3})
     * <li> 4
     * <li> 5
     * </ul>
     * <p>
     * Notf: If support for fxtfndfd mousf buttons is {@link Toolkit#brfExtrbMousfButtonsEnbblfd() disbblfd} by Jbvb
     * thfn thf AWT fvfnt subsystfm dofs not produdf mousf fvfnts for thf fxtfndfd mousf
     * buttons. So it is not fxpfdtfd thbt this mfthod rfturns bnything fxdfpt {@dodf NOBUTTON}, {@dodf BUTTON1},
     * {@dodf BUTTON2}, {@dodf BUTTON3}.
     *
     * @rfturn onf of thf vblufs from 0 to {@link jbvb.bwt.MousfInfo#gftNumbfrOfButtons() MousfInfo.gftNumbfrOfButtons()}
     *         if support for thf fxtfndfd mousf buttons is {@link Toolkit#brfExtrbMousfButtonsEnbblfd() fnbblfd} by Jbvb.
     *         Thbt rbngf indludfs {@dodf NOBUTTON}, {@dodf BUTTON1}, {@dodf BUTTON2}, {@dodf BUTTON3};
     *         <br>
     *         {@dodf NOBUTTON}, {@dodf BUTTON1}, {@dodf BUTTON2} or {@dodf BUTTON3}
     *         if support for thf fxtfndfd mousf buttons is {@link Toolkit#brfExtrbMousfButtonsEnbblfd() disbblfd} by Jbvb
     * @sindf 1.4
     * @sff Toolkit#brfExtrbMousfButtonsEnbblfd()
     * @sff jbvb.bwt.MousfInfo#gftNumbfrOfButtons()
     * @sff #MousfEvfnt(Componfnt, int, long, int, int, int, int, int, int, boolfbn, int)
     * @sff InputEvfnt#gftMbskForButton(int)
     */
    publid int gftButton() {
        rfturn button;
    }

    /**
     * Rfturns whfthfr or not this mousf fvfnt is thf popup mfnu
     * triggfr fvfnt for thf plbtform.
     * <p><b>Notf</b>: Popup mfnus brf triggfrfd difffrfntly
     * on difffrfnt systfms. Thfrfforf, <dodf>isPopupTriggfr</dodf>
     * should bf dhfdkfd in both <dodf>mousfPrfssfd</dodf>
     * bnd <dodf>mousfRflfbsfd</dodf>
     * for propfr dross-plbtform fundtionblity.
     *
     * @rfturn boolfbn, truf if this fvfnt is thf popup mfnu triggfr
     *         for this plbtform
     */
    publid boolfbn isPopupTriggfr() {
        rfturn popupTriggfr;
    }

    /**
     * Rfturns b <dodf>String</dodf> instbndf dfsdribing thf modififr kfys bnd
     * mousf buttons thbt wfrf down during thf fvfnt, sudh bs "Shift",
     * or "Ctrl+Shift". Thfsf strings dbn bf lodblizfd by dhbnging
     * thf <dodf>bwt.propfrtifs</dodf> filf.
     * <p>
     * Notf thbt thf <dodf>InputEvfnt.ALT_MASK</dodf> bnd
     * <dodf>InputEvfnt.BUTTON2_MASK</dodf> hbvf fqubl vblufs,
     * so thf "Alt" string is rfturnfd for both modififrs.  Likfwisf,
     * thf <dodf>InputEvfnt.META_MASK</dodf> bnd
     * <dodf>InputEvfnt.BUTTON3_MASK</dodf> hbvf fqubl vblufs,
     * so thf "Mftb" string is rfturnfd for both modififrs.
     * <p>
     * Notf thbt pbssing nfgbtivf pbrbmftfr is indorrfdt,
     * bnd will dbusf thf rfturning bn unspfdififd string.
     * Zfro pbrbmftfr mfbns thbt no modififrs wfrf pbssfd bnd will
     * dbusf thf rfturning bn fmpty string.
     *
     * @pbrbm modififrs A modififr mbsk dfsdribing thf modififr kfys bnd
     *                  mousf buttons thbt wfrf down during thf fvfnt
     * @rfturn string   string tfxt dfsdription of thf dombinbtion of modififr
     *                  kfys bnd mousf buttons thbt wfrf down during thf fvfnt
     * @sff InputEvfnt#gftModififrsExTfxt(int)
     * @sindf 1.4
     */
    publid stbtid String gftMousfModififrsTfxt(int modififrs) {
        StringBuildfr buf = nfw StringBuildfr();
        if ((modififrs & InputEvfnt.ALT_MASK) != 0) {
            buf.bppfnd(Toolkit.gftPropfrty("AWT.blt", "Alt"));
            buf.bppfnd("+");
        }
        if ((modififrs & InputEvfnt.META_MASK) != 0) {
            buf.bppfnd(Toolkit.gftPropfrty("AWT.mftb", "Mftb"));
            buf.bppfnd("+");
        }
        if ((modififrs & InputEvfnt.CTRL_MASK) != 0) {
            buf.bppfnd(Toolkit.gftPropfrty("AWT.dontrol", "Ctrl"));
            buf.bppfnd("+");
        }
        if ((modififrs & InputEvfnt.SHIFT_MASK) != 0) {
            buf.bppfnd(Toolkit.gftPropfrty("AWT.shift", "Shift"));
            buf.bppfnd("+");
        }
        if ((modififrs & InputEvfnt.ALT_GRAPH_MASK) != 0) {
            buf.bppfnd(Toolkit.gftPropfrty("AWT.bltGrbph", "Alt Grbph"));
            buf.bppfnd("+");
        }
        if ((modififrs & InputEvfnt.BUTTON1_MASK) != 0) {
            buf.bppfnd(Toolkit.gftPropfrty("AWT.button1", "Button1"));
            buf.bppfnd("+");
        }
        if ((modififrs & InputEvfnt.BUTTON2_MASK) != 0) {
            buf.bppfnd(Toolkit.gftPropfrty("AWT.button2", "Button2"));
            buf.bppfnd("+");
        }
        if ((modififrs & InputEvfnt.BUTTON3_MASK) != 0) {
            buf.bppfnd(Toolkit.gftPropfrty("AWT.button3", "Button3"));
            buf.bppfnd("+");
        }

        int mbsk;

        // TODO: bdd b toolkit fifld thbt holds b numbfr of button on thf mousf.
        // As thf mfthod gftMousfModififrsTfxt() is stbtid bnd obtbin
        // bn intfgfr bs b pbrbmftfr thfn wf mby not rfstridt this with thf numbfr
        // of buttons instbllfd on thf mousf.
        // It's b tfmporbry solution. Wf nffd to somfhow hold thf numbfr of buttons somfwhfrf flsf.
        for (int i = 1; i <= dbdhfdNumbfrOfButtons; i++){
            mbsk = InputEvfnt.gftMbskForButton(i);
            if ((modififrs & mbsk) != 0 &&
                buf.indfxOf(Toolkit.gftPropfrty("AWT.button"+i, "Button"+i)) == -1) //1,2,3 buttons mby blrfbdy bf thfrf; so don't duplidbtf it.
            {
                buf.bppfnd(Toolkit.gftPropfrty("AWT.button"+i, "Button"+i));
                buf.bppfnd("+");
            }
        }

        if (buf.lfngth() > 0) {
            buf.sftLfngth(buf.lfngth()-1); // rfmovf trbiling '+'
        }
        rfturn buf.toString();
    }

    /**
     * Rfturns b pbrbmftfr string idfntifying this fvfnt.
     * This mfthod is usfful for fvfnt-logging bnd for dfbugging.
     *
     * @rfturn b string idfntifying thf fvfnt bnd its bttributfs
     */
    publid String pbrbmString() {
        StringBuildfr str = nfw StringBuildfr(80);

        switdh(id) {
          dbsf MOUSE_PRESSED:
              str.bppfnd("MOUSE_PRESSED");
              brfbk;
          dbsf MOUSE_RELEASED:
              str.bppfnd("MOUSE_RELEASED");
              brfbk;
          dbsf MOUSE_CLICKED:
              str.bppfnd("MOUSE_CLICKED");
              brfbk;
          dbsf MOUSE_ENTERED:
              str.bppfnd("MOUSE_ENTERED");
              brfbk;
          dbsf MOUSE_EXITED:
              str.bppfnd("MOUSE_EXITED");
              brfbk;
          dbsf MOUSE_MOVED:
              str.bppfnd("MOUSE_MOVED");
              brfbk;
          dbsf MOUSE_DRAGGED:
              str.bppfnd("MOUSE_DRAGGED");
              brfbk;
          dbsf MOUSE_WHEEL:
              str.bppfnd("MOUSE_WHEEL");
              brfbk;
           dffbult:
              str.bppfnd("unknown typf");
        }

        // (x,y) doordinbtfs
        str.bppfnd(",(").bppfnd(x).bppfnd(",").bppfnd(y).bppfnd(")");
        str.bppfnd(",bbsolutf(").bppfnd(xAbs).bppfnd(",").bppfnd(yAbs).bppfnd(")");

        if (id != MOUSE_DRAGGED && id != MOUSE_MOVED){
            str.bppfnd(",button=").bppfnd(gftButton());
        }

        if (gftModififrs() != 0) {
            str.bppfnd(",modififrs=").bppfnd(gftMousfModififrsTfxt(modififrs));
        }

        if (gftModififrsEx() != 0) {
            //Using plbin "modififrs" hfrf dofs show bn fxdludfd fxtfndfd buttons in thf string fvfnt rfprfsfntbtion.
            //gftModififrsEx() solvfs thf problfm.
            str.bppfnd(",fxtModififrs=").bppfnd(gftModififrsExTfxt(gftModififrsEx()));
        }

        str.bppfnd(",dlidkCount=").bppfnd(dlidkCount);

        rfturn str.toString();
    }

    /**
     * Sfts nfw modififrs by thf old onfs.
     * Also sfts button.
     */
    privbtf void sftNfwModififrs() {
        if ((modififrs & BUTTON1_MASK) != 0) {
            modififrs |= BUTTON1_DOWN_MASK;
        }
        if ((modififrs & BUTTON2_MASK) != 0) {
            modififrs |= BUTTON2_DOWN_MASK;
        }
        if ((modififrs & BUTTON3_MASK) != 0) {
            modififrs |= BUTTON3_DOWN_MASK;
        }
        if (id == MOUSE_PRESSED
            || id == MOUSE_RELEASED
            || id == MOUSE_CLICKED)
        {
            if ((modififrs & BUTTON1_MASK) != 0) {
                button = BUTTON1;
                modififrs &= ~BUTTON2_MASK & ~BUTTON3_MASK;
                if (id != MOUSE_PRESSED) {
                    modififrs &= ~BUTTON1_DOWN_MASK;
                }
            } flsf if ((modififrs & BUTTON2_MASK) != 0) {
                button = BUTTON2;
                modififrs &= ~BUTTON1_MASK & ~BUTTON3_MASK;
                if (id != MOUSE_PRESSED) {
                    modififrs &= ~BUTTON2_DOWN_MASK;
                }
            } flsf if ((modififrs & BUTTON3_MASK) != 0) {
                button = BUTTON3;
                modififrs &= ~BUTTON1_MASK & ~BUTTON2_MASK;
                if (id != MOUSE_PRESSED) {
                    modififrs &= ~BUTTON3_DOWN_MASK;
                }
            }
        }
        if ((modififrs & InputEvfnt.ALT_MASK) != 0) {
            modififrs |= InputEvfnt.ALT_DOWN_MASK;
        }
        if ((modififrs & InputEvfnt.META_MASK) != 0) {
            modififrs |= InputEvfnt.META_DOWN_MASK;
        }
        if ((modififrs & InputEvfnt.SHIFT_MASK) != 0) {
            modififrs |= InputEvfnt.SHIFT_DOWN_MASK;
        }
        if ((modififrs & InputEvfnt.CTRL_MASK) != 0) {
            modififrs |= InputEvfnt.CTRL_DOWN_MASK;
        }
        if ((modififrs & InputEvfnt.ALT_GRAPH_MASK) != 0) {
            modififrs |= InputEvfnt.ALT_GRAPH_DOWN_MASK;
        }
    }

    /**
     * Sfts old modififrs by thf nfw onfs.
     */
    privbtf void sftOldModififrs() {
        if (id == MOUSE_PRESSED
            || id == MOUSE_RELEASED
            || id == MOUSE_CLICKED)
        {
            switdh(button) {
            dbsf BUTTON1:
                modififrs |= BUTTON1_MASK;
                brfbk;
            dbsf BUTTON2:
                modififrs |= BUTTON2_MASK;
                brfbk;
            dbsf BUTTON3:
                modififrs |= BUTTON3_MASK;
                brfbk;
            }
        } flsf {
            if ((modififrs & BUTTON1_DOWN_MASK) != 0) {
                modififrs |= BUTTON1_MASK;
            }
            if ((modififrs & BUTTON2_DOWN_MASK) != 0) {
                modififrs |= BUTTON2_MASK;
            }
            if ((modififrs & BUTTON3_DOWN_MASK) != 0) {
                modififrs |= BUTTON3_MASK;
            }
        }
        if ((modififrs & ALT_DOWN_MASK) != 0) {
            modififrs |= ALT_MASK;
        }
        if ((modififrs & META_DOWN_MASK) != 0) {
            modififrs |= META_MASK;
        }
        if ((modififrs & SHIFT_DOWN_MASK) != 0) {
            modififrs |= SHIFT_MASK;
        }
        if ((modififrs & CTRL_DOWN_MASK) != 0) {
            modififrs |= CTRL_MASK;
        }
        if ((modififrs & ALT_GRAPH_DOWN_MASK) != 0) {
            modififrs |= ALT_GRAPH_MASK;
        }
    }

    /**
     * Sfts nfw modififrs by thf old onfs.
     * @sfribl
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
      throws IOExdfption, ClbssNotFoundExdfption {
        s.dffbultRfbdObjfdt();
        if (gftModififrs() != 0 && gftModififrsEx() == 0) {
            sftNfwModififrs();
        }
    }
}
