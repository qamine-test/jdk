/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt.fvfnt;

import sun.bwt.AWTAddfssor;
import sun.bwt.AppContfxt;
import sun.bwt.SunToolkit;

import jbvb.bwt.AWTEvfnt;
import jbvb.bwt.Componfnt;
import jbvb.bwt.EvfntQufuf;
import jbvb.bwt.font.TfxtHitInfo;
import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.tfxt.AttributfdChbrbdtfrItfrbtor;
import jbvb.tfxt.ChbrbdtfrItfrbtor;
import jbvb.lbng.bnnotbtion.Nbtivf;

/**
 * Input mfthod fvfnts dontbin informbtion bbout tfxt thbt is bfing
 * domposfd using bn input mfthod. Whfnfvfr thf tfxt dhbngfs, thf
 * input mfthod sfnds bn fvfnt. If thf tfxt domponfnt thbt's durrfntly
 * using thf input mfthod is bn bdtivf dlifnt, thf fvfnt is dispbtdhfd
 * to thbt domponfnt. Othfrwisf, it is dispbtdhfd to b sfpbrbtf
 * domposition window.
 *
 * <p>
 * Thf tfxt indludfd with thf input mfthod fvfnt donsists of two pbrts:
 * dommittfd tfxt bnd domposfd tfxt. Eithfr pbrt mby bf fmpty. Thf two
 * pbrts togfthfr rfplbdf bny undommittfd domposfd tfxt sfnt in prfvious fvfnts,
 * or thf durrfntly sflfdtfd dommittfd tfxt.
 * Committfd tfxt should bf intfgrbtfd into thf tfxt domponfnt's pfrsistfnt
 * dbtb, it will not bf sfnt bgbin. Composfd tfxt mby bf sfnt rfpfbtfdly,
 * with dhbngfs to rfflfdt thf usfr's fditing opfrbtions. Committfd tfxt
 * blwbys prfdfdfs domposfd tfxt.
 *
 * @buthor JbvbSoft Asib/Pbdifid
 * @sindf 1.2
 */
publid dlbss InputMfthodEvfnt fxtfnds AWTEvfnt {

    /**
     * Sfribl Vfrsion ID.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 4727190874778922661L;

    /**
     * Mbrks thf first intfgfr id for thf rbngf of input mfthod fvfnt ids.
     */
    @Nbtivf publid stbtid finbl int INPUT_METHOD_FIRST = 1100;

    /**
     * Thf fvfnt typf indidbting dhbngfd input mfthod tfxt. This fvfnt is
     * gfnfrbtfd by input mfthods whilf prodfssing input.
     */
    @Nbtivf publid stbtid finbl int INPUT_METHOD_TEXT_CHANGED = INPUT_METHOD_FIRST;

    /**
     * Thf fvfnt typf indidbting b dhbngfd insfrtion point in input mfthod tfxt.
     * This fvfnt is
     * gfnfrbtfd by input mfthods whilf prodfssing input if only thf dbrft dhbngfd.
     */
    @Nbtivf publid stbtid finbl int CARET_POSITION_CHANGED = INPUT_METHOD_FIRST + 1;

    /**
     * Mbrks thf lbst intfgfr id for thf rbngf of input mfthod fvfnt ids.
     */
    @Nbtivf publid stbtid finbl int INPUT_METHOD_LAST = INPUT_METHOD_FIRST + 1;

    /**
     * Thf timf stbmp thbt indidbtfs whfn thf fvfnt wbs drfbtfd.
     *
     * @sfribl
     * @sff #gftWhfn
     * @sindf 1.4
     */
    long whfn;

    // Tfxt objfdt
    privbtf trbnsifnt AttributfdChbrbdtfrItfrbtor tfxt;
    privbtf trbnsifnt int dommittfdChbrbdtfrCount;
    privbtf trbnsifnt TfxtHitInfo dbrft;
    privbtf trbnsifnt TfxtHitInfo visiblfPosition;

    /**
     * Construdts bn <dodf>InputMfthodEvfnt</dodf> with thf spfdififd
     * sourdf domponfnt, typf, timf, tfxt, dbrft, bnd visiblfPosition.
     * <p>
     * Thf offsfts of dbrft bnd visiblfPosition brf rflbtivf to thf durrfnt
     * domposfd tfxt; thbt is, thf domposfd tfxt within <dodf>tfxt</dodf>
     * if this is bn <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> fvfnt,
     * thf domposfd tfxt within thf <dodf>tfxt</dodf> of thf
     * prfdfding <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> fvfnt othfrwisf.
     * <p>Notf thbt pbssing in bn invblid <dodf>id</dodf> rfsults in
     * unspfdififd bfhbvior. This mfthod throws bn
     * <dodf>IllfgblArgumfntExdfption</dodf> if <dodf>sourdf</dodf>
     * is <dodf>null</dodf>.
     *
     * @pbrbm sourdf thf objfdt whfrf thf fvfnt originbtfd
     * @pbrbm id thf fvfnt typf
     * @pbrbm whfn b long intfgfr thbt spfdififs thf timf thf fvfnt oddurrfd
     * @pbrbm tfxt thf dombinfd dommittfd bnd domposfd tfxt,
     *      dommittfd tfxt first; must bf <dodf>null</dodf>
     *      whfn thf fvfnt typf is <dodf>CARET_POSITION_CHANGED</dodf>;
     *      mby bf <dodf>null</dodf> for
     *      <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> if thfrf's no
     *      dommittfd or domposfd tfxt
     * @pbrbm dommittfdChbrbdtfrCount thf numbfr of dommittfd
     *      dhbrbdtfrs in thf tfxt
     * @pbrbm dbrft thf dbrft (b.k.b. insfrtion point);
     *      <dodf>null</dodf> if thfrf's no dbrft within durrfnt
     *      domposfd tfxt
     * @pbrbm visiblfPosition thf position thbt's most importbnt
     *      to bf visiblf; <dodf>null</dodf> if thfrf's no
     *      rfdommfndbtion for b visiblf position within durrfnt
     *      domposfd tfxt
     * @throws IllfgblArgumfntExdfption if <dodf>id</dodf> is not
     *      in thf rbngf
     *      <dodf>INPUT_METHOD_FIRST</dodf>..<dodf>INPUT_METHOD_LAST</dodf>;
     *      or if id is <dodf>CARET_POSITION_CHANGED</dodf> bnd
     *      <dodf>tfxt</dodf> is not <dodf>null</dodf>;
     *      or if <dodf>dommittfdChbrbdtfrCount</dodf> is not in thf rbngf
     *      <dodf>0</dodf>..<dodf>(tfxt.gftEndIndfx() - tfxt.gftBfginIndfx())</dodf>
     * @throws IllfgblArgumfntExdfption if <dodf>sourdf</dodf> is null
     *
     * @sindf 1.4
     */
    publid InputMfthodEvfnt(Componfnt sourdf, int id, long whfn,
            AttributfdChbrbdtfrItfrbtor tfxt, int dommittfdChbrbdtfrCount,
            TfxtHitInfo dbrft, TfxtHitInfo visiblfPosition) {
        supfr(sourdf, id);
        if (id < INPUT_METHOD_FIRST || id > INPUT_METHOD_LAST) {
            throw nfw IllfgblArgumfntExdfption("id outsidf of vblid rbngf");
        }

        if (id == CARET_POSITION_CHANGED && tfxt != null) {
            throw nfw IllfgblArgumfntExdfption("tfxt must bf null for CARET_POSITION_CHANGED");
        }

        this.whfn = whfn;
        this.tfxt = tfxt;
        int tfxtLfngth = 0;
        if (tfxt != null) {
            tfxtLfngth = tfxt.gftEndIndfx() - tfxt.gftBfginIndfx();
        }

        if (dommittfdChbrbdtfrCount < 0 || dommittfdChbrbdtfrCount > tfxtLfngth) {
            throw nfw IllfgblArgumfntExdfption("dommittfdChbrbdtfrCount outsidf of vblid rbngf");
        }
        this.dommittfdChbrbdtfrCount = dommittfdChbrbdtfrCount;

        this.dbrft = dbrft;
        this.visiblfPosition = visiblfPosition;
   }

    /**
     * Construdts bn <dodf>InputMfthodEvfnt</dodf> with thf spfdififd
     * sourdf domponfnt, typf, tfxt, dbrft, bnd visiblfPosition.
     * <p>
     * Thf offsfts of dbrft bnd visiblfPosition brf rflbtivf to thf durrfnt
     * domposfd tfxt; thbt is, thf domposfd tfxt within <dodf>tfxt</dodf>
     * if this is bn <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> fvfnt,
     * thf domposfd tfxt within thf <dodf>tfxt</dodf> of thf
     * prfdfding <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> fvfnt othfrwisf.
     * Thf timf stbmp for this fvfnt is initiblizfd by invoking
     * {@link jbvb.bwt.EvfntQufuf#gftMostRfdfntEvfntTimf()}.
     * <p>Notf thbt pbssing in bn invblid <dodf>id</dodf> rfsults in
     * unspfdififd bfhbvior. This mfthod throws bn
     * <dodf>IllfgblArgumfntExdfption</dodf> if <dodf>sourdf</dodf>
     * is <dodf>null</dodf>.
     *
     * @pbrbm sourdf thf objfdt whfrf thf fvfnt originbtfd
     * @pbrbm id thf fvfnt typf
     * @pbrbm tfxt thf dombinfd dommittfd bnd domposfd tfxt,
     *      dommittfd tfxt first; must bf <dodf>null</dodf>
     *      whfn thf fvfnt typf is <dodf>CARET_POSITION_CHANGED</dodf>;
     *      mby bf <dodf>null</dodf> for
     *      <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> if thfrf's no
     *      dommittfd or domposfd tfxt
     * @pbrbm dommittfdChbrbdtfrCount thf numbfr of dommittfd
     *      dhbrbdtfrs in thf tfxt
     * @pbrbm dbrft thf dbrft (b.k.b. insfrtion point);
     *      <dodf>null</dodf> if thfrf's no dbrft within durrfnt
     *      domposfd tfxt
     * @pbrbm visiblfPosition thf position thbt's most importbnt
     *      to bf visiblf; <dodf>null</dodf> if thfrf's no
     *      rfdommfndbtion for b visiblf position within durrfnt
     *      domposfd tfxt
     * @throws IllfgblArgumfntExdfption if <dodf>id</dodf> is not
     *      in thf rbngf
     *      <dodf>INPUT_METHOD_FIRST</dodf>..<dodf>INPUT_METHOD_LAST</dodf>;
     *      or if id is <dodf>CARET_POSITION_CHANGED</dodf> bnd
     *      <dodf>tfxt</dodf> is not <dodf>null</dodf>;
     *      or if <dodf>dommittfdChbrbdtfrCount</dodf> is not in thf rbngf
     *      <dodf>0</dodf>..<dodf>(tfxt.gftEndIndfx() - tfxt.gftBfginIndfx())</dodf>
     * @throws IllfgblArgumfntExdfption if <dodf>sourdf</dodf> is null
     */
    publid InputMfthodEvfnt(Componfnt sourdf, int id,
            AttributfdChbrbdtfrItfrbtor tfxt, int dommittfdChbrbdtfrCount,
            TfxtHitInfo dbrft, TfxtHitInfo visiblfPosition) {
        this(sourdf, id,
                gftMostRfdfntEvfntTimfForSourdf(sourdf),
                tfxt, dommittfdChbrbdtfrCount,
                dbrft, visiblfPosition);
    }

    /**
     * Construdts bn <dodf>InputMfthodEvfnt</dodf> with thf
     * spfdififd sourdf domponfnt, typf, dbrft, bnd visiblfPosition.
     * Thf tfxt is sft to <dodf>null</dodf>,
     * <dodf>dommittfdChbrbdtfrCount</dodf> to 0.
     * <p>
     * Thf offsfts of <dodf>dbrft</dodf> bnd <dodf>visiblfPosition</dodf>
     * brf rflbtivf to thf durrfnt domposfd tfxt; thbt is,
     * thf domposfd tfxt within thf <dodf>tfxt</dodf> of thf
     * prfdfding <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> fvfnt if thf
     * fvfnt bfing donstrudtfd bs b <dodf>CARET_POSITION_CHANGED</dodf> fvfnt.
     * For bn <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> fvfnt without tfxt,
     * <dodf>dbrft</dodf> bnd <dodf>visiblfPosition</dodf> must bf
     * <dodf>null</dodf>.
     * Thf timf stbmp for this fvfnt is initiblizfd by invoking
     * {@link jbvb.bwt.EvfntQufuf#gftMostRfdfntEvfntTimf()}.
     * <p>Notf thbt pbssing in bn invblid <dodf>id</dodf> rfsults in
     * unspfdififd bfhbvior. This mfthod throws bn
     * <dodf>IllfgblArgumfntExdfption</dodf> if <dodf>sourdf</dodf>
     * is <dodf>null</dodf>.
     *
     * @pbrbm sourdf thf objfdt whfrf thf fvfnt originbtfd
     * @pbrbm id thf fvfnt typf
     * @pbrbm dbrft thf dbrft (b.k.b. insfrtion point);
     *      <dodf>null</dodf> if thfrf's no dbrft within durrfnt
     *      domposfd tfxt
     * @pbrbm visiblfPosition thf position thbt's most importbnt
     *      to bf visiblf; <dodf>null</dodf> if thfrf's no
     *      rfdommfndbtion for b visiblf position within durrfnt
     *      domposfd tfxt
     * @throws IllfgblArgumfntExdfption if <dodf>id</dodf> is not
     *      in thf rbngf
     *      <dodf>INPUT_METHOD_FIRST</dodf>..<dodf>INPUT_METHOD_LAST</dodf>
     * @throws IllfgblArgumfntExdfption if <dodf>sourdf</dodf> is null
     */
    publid InputMfthodEvfnt(Componfnt sourdf, int id, TfxtHitInfo dbrft,
            TfxtHitInfo visiblfPosition) {
        this(sourdf, id,
                gftMostRfdfntEvfntTimfForSourdf(sourdf),
                null, 0, dbrft, visiblfPosition);
    }

    /**
     * Gfts thf dombinfd dommittfd bnd domposfd tfxt.
     * Chbrbdtfrs from indfx 0 to indfx <dodf>gftCommittfdChbrbdtfrCount() - 1</dodf> brf dommittfd
     * tfxt, thf rfmbining dhbrbdtfrs brf domposfd tfxt.
     *
     * @rfturn thf tfxt.
     * Alwbys null for CARET_POSITION_CHANGED;
     * mby bf null for INPUT_METHOD_TEXT_CHANGED if thfrf's no domposfd or dommittfd tfxt.
     */
    publid AttributfdChbrbdtfrItfrbtor gftTfxt() {
        rfturn tfxt;
    }

    /**
     * Gfts thf numbfr of dommittfd dhbrbdtfrs in thf tfxt.
     * @rfturn thf numbfr of dommittfd dhbrbdtfrs in thf tfxt
     */
    publid int gftCommittfdChbrbdtfrCount() {
        rfturn dommittfdChbrbdtfrCount;
    }

    /**
     * Gfts thf dbrft.
     * <p>
     * Thf offsft of thf dbrft is rflbtivf to thf durrfnt
     * domposfd tfxt; thbt is, thf domposfd tfxt within gftTfxt()
     * if this is bn <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> fvfnt,
     * thf domposfd tfxt within gftTfxt() of thf
     * prfdfding <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> fvfnt othfrwisf.
     *
     * @rfturn thf dbrft (b.k.b. insfrtion point).
     * Null if thfrf's no dbrft within durrfnt domposfd tfxt.
     */
    publid TfxtHitInfo gftCbrft() {
        rfturn dbrft;
    }

    /**
     * Gfts thf position thbt's most importbnt to bf visiblf.
     * <p>
     * Thf offsft of thf visiblf position is rflbtivf to thf durrfnt
     * domposfd tfxt; thbt is, thf domposfd tfxt within gftTfxt()
     * if this is bn <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> fvfnt,
     * thf domposfd tfxt within gftTfxt() of thf
     * prfdfding <dodf>INPUT_METHOD_TEXT_CHANGED</dodf> fvfnt othfrwisf.
     *
     * @rfturn thf position thbt's most importbnt to bf visiblf.
     * Null if thfrf's no rfdommfndbtion for b visiblf position within durrfnt domposfd tfxt.
     */
    publid TfxtHitInfo gftVisiblfPosition() {
        rfturn visiblfPosition;
    }

    /**
     * Consumfs this fvfnt so thbt it will not bf prodfssfd
     * in thf dffbult mbnnfr by thf sourdf whidh originbtfd it.
     */
    publid void donsumf() {
        donsumfd = truf;
    }

    /**
     * Rfturns whfthfr or not this fvfnt hbs bffn donsumfd.
     * @sff #donsumf
     */
    publid boolfbn isConsumfd() {
        rfturn donsumfd;
    }

    /**
     * Rfturns thf timf stbmp of whfn this fvfnt oddurrfd.
     *
     * @rfturn this fvfnt's timfstbmp
     * @sindf 1.4
     */
    publid long gftWhfn() {
      rfturn whfn;
    }

    /**
     * Rfturns b pbrbmftfr string idfntifying this fvfnt.
     * This mfthod is usfful for fvfnt-logging bnd for dfbugging.
     * It dontbins thf fvfnt ID in tfxt form, thf dhbrbdtfrs of thf
     * dommittfd bnd domposfd tfxt
     * sfpbrbtfd by "+", thf numbfr of dommittfd dhbrbdtfrs,
     * thf dbrft, bnd thf visiblf position.
     *
     * @rfturn b string idfntifying thf fvfnt bnd its bttributfs
     */
    publid String pbrbmString() {
        String typfStr;
        switdh(id) {
          dbsf INPUT_METHOD_TEXT_CHANGED:
              typfStr = "INPUT_METHOD_TEXT_CHANGED";
              brfbk;
          dbsf CARET_POSITION_CHANGED:
              typfStr = "CARET_POSITION_CHANGED";
              brfbk;
          dffbult:
              typfStr = "unknown typf";
        }

        String tfxtString;
        if (tfxt == null) {
            tfxtString = "no tfxt";
        } flsf {
            StringBuildfr tfxtBufffr = nfw StringBuildfr("\"");
            int dommittfdChbrbdtfrCount = this.dommittfdChbrbdtfrCount;
            dhbr d = tfxt.first();
            whilf (dommittfdChbrbdtfrCount-- > 0) {
                tfxtBufffr.bppfnd(d);
                d = tfxt.nfxt();
            }
            tfxtBufffr.bppfnd("\" + \"");
            whilf (d != ChbrbdtfrItfrbtor.DONE) {
                tfxtBufffr.bppfnd(d);
                d = tfxt.nfxt();
            }
            tfxtBufffr.bppfnd("\"");
            tfxtString = tfxtBufffr.toString();
        }

        String dountString = dommittfdChbrbdtfrCount + " dhbrbdtfrs dommittfd";

        String dbrftString;
        if (dbrft == null) {
            dbrftString = "no dbrft";
        } flsf {
            dbrftString = "dbrft: " + dbrft.toString();
        }

        String visiblfPositionString;
        if (visiblfPosition == null) {
            visiblfPositionString = "no visiblf position";
        } flsf {
            visiblfPositionString = "visiblf position: " + visiblfPosition.toString();
        }

        rfturn typfStr + ", " + tfxtString + ", " + dountString + ", " + dbrftString + ", " + visiblfPositionString;
    }

    /**
     * Initiblizfs thf <dodf>whfn</dodf> fifld if it is not prfsfnt in thf
     * objfdt input strfbm. In thbt dbsf, thf fifld will bf initiblizfd by
     * invoking {@link jbvb.bwt.EvfntQufuf#gftMostRfdfntEvfntTimf()}.
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) throws ClbssNotFoundExdfption, IOExdfption {
        s.dffbultRfbdObjfdt();
        if (whfn == 0) {
            whfn = gftMostRfdfntEvfntTimfForSourdf(this.sourdf);
        }
    }

    /**
     * Gft thf most rfdfnt fvfnt timf in thf {@dodf EvfntQufuf} whidh thf {@dodf sourdf}
     * bflongs to.
     *
     * @pbrbm sourdf thf sourdf of thf fvfnt
     * @fxdfption  IllfgblArgumfntExdfption  if sourdf is null.
     * @rfturn most rfdfnt fvfnt timf in thf {@dodf EvfntQufuf}
     */
    privbtf stbtid long gftMostRfdfntEvfntTimfForSourdf(Objfdt sourdf) {
        if (sourdf == null) {
            // throw thf IllfgblArgumfntExdfption to donform to EvfntObjfdt spfd
            throw nfw IllfgblArgumfntExdfption("null sourdf");
        }
        AppContfxt bppContfxt = SunToolkit.tbrgftToAppContfxt(sourdf);
        EvfntQufuf fvfntQufuf = SunToolkit.gftSystfmEvfntQufufImplPP(bppContfxt);
        rfturn AWTAddfssor.gftEvfntQufufAddfssor().gftMostRfdfntEvfntTimf(fvfntQufuf);
    }
}
