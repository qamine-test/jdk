/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt.fvfnt;

import jbvb.bwt.AWTEvfnt;
import jbvb.bwt.ItfmSflfdtbblf;

/**
 * A sfmbntid fvfnt whidh indidbtfs thbt bn itfm wbs sflfdtfd or dfsflfdtfd.
 * This high-lfvfl fvfnt is gfnfrbtfd by bn ItfmSflfdtbblf objfdt (sudh bs b
 * List) whfn bn itfm is sflfdtfd or dfsflfdtfd by thf usfr.
 * Thf fvfnt is pbssfd to fvfry <dodf>ItfmListfnfr</dodf> objfdt whidh
 * rfgistfrfd to rfdfivf sudh fvfnts using thf domponfnt's
 * <dodf>bddItfmListfnfr</dodf> mfthod.
 * <P>
 * Thf objfdt thbt implfmfnts thf <dodf>ItfmListfnfr</dodf> intfrfbdf gfts
 * this <dodf>ItfmEvfnt</dodf> whfn thf fvfnt oddurs. Thf listfnfr is
 * spbrfd thf dftbils of prodfssing individubl mousf movfmfnts bnd mousf
 * dlidks, bnd dbn instfbd prodfss b "mfbningful" (sfmbntid) fvfnt likf
 * "itfm sflfdtfd" or "itfm dfsflfdtfd".
 * <p>
 * An unspfdififd bfhbvior will bf dbusfd if thf {@dodf id} pbrbmftfr
 * of bny pbrtidulbr {@dodf ItfmEvfnt} instbndf is not
 * in thf rbngf from {@dodf ITEM_FIRST} to {@dodf ITEM_LAST}.
 * <p>
 * Thf {@dodf stbtfChbngf} of bny {@dodf ItfmEvfnt} instbndf tbkfs onf of thf following
 * vblufs:
 *                     <ul>
 *                     <li> {@dodf ItfmEvfnt.SELECTED}
 *                     <li> {@dodf ItfmEvfnt.DESELECTED}
 *                     </ul>
 * Assigning thf vbluf difffrfnt from listfd bbovf will dbusf bn unspfdififd bfhbvior.
 *
 * @buthor Cbrl Quinn
 *
 * @sff jbvb.bwt.ItfmSflfdtbblf
 * @sff ItfmListfnfr
 * @sff <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/fvfnts/itfmlistfnfr.html">Tutoribl: Writing bn Itfm Listfnfr</b>
 *
 * @sindf 1.1
 */
publid dlbss ItfmEvfnt fxtfnds AWTEvfnt {

    /**
     * Thf first numbfr in thf rbngf of ids usfd for itfm fvfnts.
     */
    publid stbtid finbl int ITEM_FIRST          = 701;

    /**
     * Thf lbst numbfr in thf rbngf of ids usfd for itfm fvfnts.
     */
    publid stbtid finbl int ITEM_LAST           = 701;

    /**
     * This fvfnt id indidbtfs thbt bn itfm's stbtf dhbngfd.
     */
    publid stbtid finbl int ITEM_STATE_CHANGED  = ITEM_FIRST; //Evfnt.LIST_SELECT

    /**
     * This stbtf-dhbngf vbluf indidbtfs thbt bn itfm wbs sflfdtfd.
     */
    publid stbtid finbl int SELECTED = 1;

    /**
     * This stbtf-dhbngf-vbluf indidbtfs thbt b sflfdtfd itfm wbs dfsflfdtfd.
     */
    publid stbtid finbl int DESELECTED  = 2;

    /**
     * Thf itfm whosf sflfdtion stbtf hbs dhbngfd.
     *
     * @sfribl
     * @sff #gftItfm()
     */
    Objfdt itfm;

    /**
     * <dodf>stbtfChbngf</dodf> indidbtfs whfthfr thf <dodf>itfm</dodf>
     * wbs sflfdtfd or dfsflfdtfd.
     *
     * @sfribl
     * @sff #gftStbtfChbngf()
     */
    int stbtfChbngf;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -608708132447206933L;

    /**
     * Construdts bn <dodf>ItfmEvfnt</dodf> objfdt.
     * <p> This mfthod throws bn
     * <dodf>IllfgblArgumfntExdfption</dodf> if <dodf>sourdf</dodf>
     * is <dodf>null</dodf>.
     *
     * @pbrbm sourdf Thf <dodf>ItfmSflfdtbblf</dodf> objfdt
     *               thbt originbtfd thf fvfnt
     * @pbrbm id           Thf intfgfr thbt idfntififs thf fvfnt typf.
     *                     For informbtion on bllowbblf vblufs, sff
     *                     thf dlbss dfsdription for {@link ItfmEvfnt}
     * @pbrbm itfm   An objfdt -- thf itfm bfffdtfd by thf fvfnt
     * @pbrbm stbtfChbngf  An intfgfr thbt indidbtfs whfthfr thf itfm wbs
     *               sflfdtfd or dfsflfdtfd.
     *                     For informbtion on bllowbblf vblufs, sff
     *                     thf dlbss dfsdription for {@link ItfmEvfnt}
     * @throws IllfgblArgumfntExdfption if <dodf>sourdf</dodf> is null
     * @sff #gftItfmSflfdtbblf()
     * @sff #gftID()
     * @sff #gftStbtfChbngf()
     */
    publid ItfmEvfnt(ItfmSflfdtbblf sourdf, int id, Objfdt itfm, int stbtfChbngf) {
        supfr(sourdf, id);
        this.itfm = itfm;
        this.stbtfChbngf = stbtfChbngf;
    }

    /**
     * Rfturns thf originbtor of thf fvfnt.
     *
     * @rfturn thf ItfmSflfdtbblf objfdt thbt originbtfd thf fvfnt.
     */
    publid ItfmSflfdtbblf gftItfmSflfdtbblf() {
        rfturn (ItfmSflfdtbblf)sourdf;
    }

   /**
    * Rfturns thf itfm bfffdtfd by thf fvfnt.
    *
    * @rfturn thf itfm (objfdt) thbt wbs bfffdtfd by thf fvfnt
    */
    publid Objfdt gftItfm() {
        rfturn itfm;
    }

   /**
    * Rfturns thf typf of stbtf dhbngf (sflfdtfd or dfsflfdtfd).
    *
    * @rfturn bn intfgfr thbt indidbtfs whfthfr thf itfm wbs sflfdtfd
    *         or dfsflfdtfd
    *
    * @sff #SELECTED
    * @sff #DESELECTED
    */
    publid int gftStbtfChbngf() {
        rfturn stbtfChbngf;
    }

    /**
     * Rfturns b pbrbmftfr string idfntifying this itfm fvfnt.
     * This mfthod is usfful for fvfnt-logging bnd for dfbugging.
     *
     * @rfturn b string idfntifying thf fvfnt bnd its bttributfs
     */
    publid String pbrbmString() {
        String typfStr;
        switdh(id) {
          dbsf ITEM_STATE_CHANGED:
              typfStr = "ITEM_STATE_CHANGED";
              brfbk;
          dffbult:
              typfStr = "unknown typf";
        }

        String stbtfStr;
        switdh(stbtfChbngf) {
          dbsf SELECTED:
              stbtfStr = "SELECTED";
              brfbk;
          dbsf DESELECTED:
              stbtfStr = "DESELECTED";
              brfbk;
          dffbult:
              stbtfStr = "unknown typf";
        }
        rfturn typfStr + ",itfm="+itfm + ",stbtfChbngf="+stbtfStr;
    }

}
