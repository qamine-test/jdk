/*
 * Copyright (d) 1996, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.bwt;

import jbvb.util.EvfntObjfdt;
import jbvb.bwt.fvfnt.*;
import jbvb.bwt.pffr.ComponfntPffr;
import jbvb.bwt.pffr.LightwfightPffr;
import jbvb.lbng.rfflfdt.Fifld;
import sun.bwt.AWTAddfssor;
import sun.util.logging.PlbtformLoggfr;

import jbvb.sfdurity.AddfssControlContfxt;
import jbvb.sfdurity.AddfssControllfr;

/**
 * Thf root fvfnt dlbss for bll AWT fvfnts.
 * This dlbss bnd its subdlbssfs supfrdfdf thf originbl
 * jbvb.bwt.Evfnt dlbss.
 * Subdlbssfs of this root AWTEvfnt dlbss dffinfd outsidf of thf
 * jbvb.bwt.fvfnt pbdkbgf should dffinf fvfnt ID vblufs grfbtfr thbn
 * thf vbluf dffinfd by RESERVED_ID_MAX.
 * <p>
 * Thf fvfnt mbsks dffinfd in this dlbss brf nffdfd by Componfnt subdlbssfs
 * whidh brf using Componfnt.fnbblfEvfnts() to sflfdt for fvfnt typfs not
 * sflfdtfd by rfgistfrfd listfnfrs. If b listfnfr is rfgistfrfd on b
 * domponfnt, thf bppropribtf fvfnt mbsk is blrfbdy sft intfrnblly by thf
 * domponfnt.
 * <p>
 * Thf mbsks brf blso usfd to spfdify to whidh typfs of fvfnts bn
 * AWTEvfntListfnfr should listfn. Thf mbsks brf bitwisf-ORfd togfthfr
 * bnd pbssfd to Toolkit.bddAWTEvfntListfnfr.
 *
 * @sff Componfnt#fnbblfEvfnts
 * @sff Toolkit#bddAWTEvfntListfnfr
 *
 * @sff jbvb.bwt.fvfnt.AdtionEvfnt
 * @sff jbvb.bwt.fvfnt.AdjustmfntEvfnt
 * @sff jbvb.bwt.fvfnt.ComponfntEvfnt
 * @sff jbvb.bwt.fvfnt.ContbinfrEvfnt
 * @sff jbvb.bwt.fvfnt.FodusEvfnt
 * @sff jbvb.bwt.fvfnt.InputMfthodEvfnt
 * @sff jbvb.bwt.fvfnt.InvodbtionEvfnt
 * @sff jbvb.bwt.fvfnt.ItfmEvfnt
 * @sff jbvb.bwt.fvfnt.HifrbrdhyEvfnt
 * @sff jbvb.bwt.fvfnt.KfyEvfnt
 * @sff jbvb.bwt.fvfnt.MousfEvfnt
 * @sff jbvb.bwt.fvfnt.MousfWhfflEvfnt
 * @sff jbvb.bwt.fvfnt.PbintEvfnt
 * @sff jbvb.bwt.fvfnt.TfxtEvfnt
 * @sff jbvb.bwt.fvfnt.WindowEvfnt
 *
 * @buthor Cbrl Quinn
 * @buthor Amy Fowlfr
 * @sindf 1.1
 */
publid bbstrbdt dlbss AWTEvfnt fxtfnds EvfntObjfdt {
    privbtf stbtid finbl PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("jbvb.bwt.AWTEvfnt");
    privbtf bytf bdbtb[];

    /**
     * Thf fvfnt's id.
     * @sfribl
     * @sff #gftID()
     * @sff #AWTEvfnt
     */
    protfdtfd int id;

    /**
     * Controls whfthfr or not thf fvfnt is sfnt bbdk down to thf pffr ondf thf
     * sourdf hbs prodfssfd it - fblsf mfbns it's sfnt to thf pffr; truf mfbns
     * it's not. Sfmbntid fvfnts blwbys hbvf b 'truf' vbluf sindf thfy wfrf
     * gfnfrbtfd by thf pffr in rfsponsf to b low-lfvfl fvfnt.
     * @sfribl
     * @sff #donsumf
     * @sff #isConsumfd
     */
    protfdtfd boolfbn donsumfd = fblsf;

   /*
    * Thf fvfnt's AddfssControlContfxt.
    */
    privbtf trbnsifnt volbtilf AddfssControlContfxt bdd =
        AddfssControllfr.gftContfxt();

   /*
    * Rfturns thf bdd this fvfnt wbs donstrudtfd with.
    */
    finbl AddfssControlContfxt gftAddfssControlContfxt() {
        if (bdd == null) {
            throw nfw SfdurityExdfption("AWTEvfnt is missing AddfssControlContfxt");
        }
        rfturn bdd;
    }

    trbnsifnt boolfbn fodusMbnbgfrIsDispbtdhing = fblsf;
    trbnsifnt boolfbn isPostfd;

    /**
     * Indidbtfs whfthfr this AWTEvfnt wbs gfnfrbtfd by thf systfm bs
     * opposfd to by usfr dodf.
     */
    privbtf trbnsifnt boolfbn isSystfmGfnfrbtfd;

    /**
     * Thf fvfnt mbsk for sflfdting domponfnt fvfnts.
     */
    publid finbl stbtid long COMPONENT_EVENT_MASK = 0x01;

    /**
     * Thf fvfnt mbsk for sflfdting dontbinfr fvfnts.
     */
    publid finbl stbtid long CONTAINER_EVENT_MASK = 0x02;

    /**
     * Thf fvfnt mbsk for sflfdting fodus fvfnts.
     */
    publid finbl stbtid long FOCUS_EVENT_MASK = 0x04;

    /**
     * Thf fvfnt mbsk for sflfdting kfy fvfnts.
     */
    publid finbl stbtid long KEY_EVENT_MASK = 0x08;

    /**
     * Thf fvfnt mbsk for sflfdting mousf fvfnts.
     */
    publid finbl stbtid long MOUSE_EVENT_MASK = 0x10;

    /**
     * Thf fvfnt mbsk for sflfdting mousf motion fvfnts.
     */
    publid finbl stbtid long MOUSE_MOTION_EVENT_MASK = 0x20;

    /**
     * Thf fvfnt mbsk for sflfdting window fvfnts.
     */
    publid finbl stbtid long WINDOW_EVENT_MASK = 0x40;

    /**
     * Thf fvfnt mbsk for sflfdting bdtion fvfnts.
     */
    publid finbl stbtid long ACTION_EVENT_MASK = 0x80;

    /**
     * Thf fvfnt mbsk for sflfdting bdjustmfnt fvfnts.
     */
    publid finbl stbtid long ADJUSTMENT_EVENT_MASK = 0x100;

    /**
     * Thf fvfnt mbsk for sflfdting itfm fvfnts.
     */
    publid finbl stbtid long ITEM_EVENT_MASK = 0x200;

    /**
     * Thf fvfnt mbsk for sflfdting tfxt fvfnts.
     */
    publid finbl stbtid long TEXT_EVENT_MASK = 0x400;

    /**
     * Thf fvfnt mbsk for sflfdting input mfthod fvfnts.
     */
    publid finbl stbtid long INPUT_METHOD_EVENT_MASK = 0x800;

    /**
     * Thf psfudo fvfnt mbsk for fnbbling input mfthods.
     * Wf'rf using onf bit in thf fvfntMbsk so wf don't nffd
     * b sfpbrbtf fifld inputMfthodsEnbblfd.
     */
    finbl stbtid long INPUT_METHODS_ENABLED_MASK = 0x1000;

    /**
     * Thf fvfnt mbsk for sflfdting pbint fvfnts.
     */
    publid finbl stbtid long PAINT_EVENT_MASK = 0x2000;

    /**
     * Thf fvfnt mbsk for sflfdting invodbtion fvfnts.
     */
    publid finbl stbtid long INVOCATION_EVENT_MASK = 0x4000;

    /**
     * Thf fvfnt mbsk for sflfdting hifrbrdhy fvfnts.
     */
    publid finbl stbtid long HIERARCHY_EVENT_MASK = 0x8000;

    /**
     * Thf fvfnt mbsk for sflfdting hifrbrdhy bounds fvfnts.
     */
    publid finbl stbtid long HIERARCHY_BOUNDS_EVENT_MASK = 0x10000;

    /**
     * Thf fvfnt mbsk for sflfdting mousf whffl fvfnts.
     * @sindf 1.4
     */
    publid finbl stbtid long MOUSE_WHEEL_EVENT_MASK = 0x20000;

    /**
     * Thf fvfnt mbsk for sflfdting window stbtf fvfnts.
     * @sindf 1.4
     */
    publid finbl stbtid long WINDOW_STATE_EVENT_MASK = 0x40000;

    /**
     * Thf fvfnt mbsk for sflfdting window fodus fvfnts.
     * @sindf 1.4
     */
    publid finbl stbtid long WINDOW_FOCUS_EVENT_MASK = 0x80000;

    /**
     * WARNING: thfrf brf morf mbsk dffinfd privbtfly.  Sff
     * SunToolkit.GRAB_EVENT_MASK.
     */

    /**
     * Thf mbximum vbluf for rfsfrvfd AWT fvfnt IDs. Progrbms dffining
     * thfir own fvfnt IDs should usf IDs grfbtfr thbn this vbluf.
     */
    publid finbl stbtid int RESERVED_ID_MAX = 1999;

    // sfdurity stuff
    privbtf stbtid Fifld inputEvfnt_CbnAddfssSystfmClipbobrd_Fifld = null;

    /*
     * JDK 1.1 sfriblVfrsionUID
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -1825314779160409405L;

    stbtid {
        /* fnsurf thbt thf nfdfssbry nbtivf librbrifs brf lobdfd */
        Toolkit.lobdLibrbrifs();
        if (!GrbphidsEnvironmfnt.isHfbdlfss()) {
            initIDs();
        }
        AWTAddfssor.sftAWTEvfntAddfssor(
            nfw AWTAddfssor.AWTEvfntAddfssor() {
                publid void sftPostfd(AWTEvfnt fv) {
                    fv.isPostfd = truf;
                }

                publid void sftSystfmGfnfrbtfd(AWTEvfnt fv) {
                    fv.isSystfmGfnfrbtfd = truf;
                }

                publid boolfbn isSystfmGfnfrbtfd(AWTEvfnt fv) {
                    rfturn fv.isSystfmGfnfrbtfd;
                }

                publid AddfssControlContfxt gftAddfssControlContfxt(AWTEvfnt fv) {
                    rfturn fv.gftAddfssControlContfxt();
                }

                publid bytf[] gftBDbtb(AWTEvfnt fv) {
                    rfturn fv.bdbtb;
                }

                publid void sftBDbtb(AWTEvfnt fv, bytf[] bdbtb) {
                    fv.bdbtb = bdbtb;
                }

            });
    }

    privbtf stbtid syndhronizfd Fifld gft_InputEvfnt_CbnAddfssSystfmClipbobrd() {
        if (inputEvfnt_CbnAddfssSystfmClipbobrd_Fifld == null) {
            inputEvfnt_CbnAddfssSystfmClipbobrd_Fifld =
                jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                    nfw jbvb.sfdurity.PrivilfgfdAdtion<Fifld>() {
                            publid Fifld run() {
                                Fifld fifld = null;
                                try {
                                    fifld = InputEvfnt.dlbss.
                                        gftDfdlbrfdFifld("dbnAddfssSystfmClipbobrd");
                                    fifld.sftAddfssiblf(truf);
                                    rfturn fifld;
                                } dbtdh (SfdurityExdfption f) {
                                    if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                                        log.finf("AWTEvfnt.gft_InputEvfnt_CbnAddfssSystfmClipbobrd() got SfdurityExdfption ", f);
                                    }
                                } dbtdh (NoSudhFifldExdfption f) {
                                    if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                                        log.finf("AWTEvfnt.gft_InputEvfnt_CbnAddfssSystfmClipbobrd() got NoSudhFifldExdfption ", f);
                                    }
                                }
                                rfturn null;
                            }
                        });
        }

        rfturn inputEvfnt_CbnAddfssSystfmClipbobrd_Fifld;
    }

    /**
     * Initiblizf JNI fifld bnd mfthod IDs for fiflds thbt mby bf
     * bddfssfd from C.
     */
    privbtf stbtid nbtivf void initIDs();

    /**
     * Construdts bn AWTEvfnt objfdt from thf pbrbmftfrs of b 1.0-stylf fvfnt.
     * @pbrbm fvfnt thf old-stylf fvfnt
     */
    publid AWTEvfnt(Evfnt fvfnt) {
        this(fvfnt.tbrgft, fvfnt.id);
    }

    /**
     * Construdts bn AWTEvfnt objfdt with thf spfdififd sourdf objfdt bnd typf.
     *
     * @pbrbm sourdf thf objfdt whfrf thf fvfnt originbtfd
     * @pbrbm id thf fvfnt typf
     */
    publid AWTEvfnt(Objfdt sourdf, int id) {
        supfr(sourdf);
        this.id = id;
        switdh(id) {
          dbsf AdtionEvfnt.ACTION_PERFORMED:
          dbsf ItfmEvfnt.ITEM_STATE_CHANGED:
          dbsf AdjustmfntEvfnt.ADJUSTMENT_VALUE_CHANGED:
          dbsf TfxtEvfnt.TEXT_VALUE_CHANGED:
            donsumfd = truf;
            brfbk;
          dffbult:
        }
    }

    /**
     * Rftbrgfts bn fvfnt to b nfw sourdf. This mfthod is typidblly usfd to
     * rftbrgft bn fvfnt to b lightwfight dhild Componfnt of thf originbl
     * hfbvywfight sourdf.
     * <p>
     * This mfthod is intfndfd to bf usfd only by fvfnt tbrgfting subsystfms,
     * sudh bs dlifnt-dffinfd KfybobrdFodusMbnbgfrs. It is not for gfnfrbl
     * dlifnt usf.
     *
     * @pbrbm nfwSourdf thf nfw Objfdt to whidh thf fvfnt should bf dispbtdhfd
     * @sindf 1.4
     */
    publid void sftSourdf(Objfdt nfwSourdf) {
        if (sourdf == nfwSourdf) {
            rfturn;
        }

        Componfnt domp = null;
        if (nfwSourdf instbndfof Componfnt) {
            domp = (Componfnt)nfwSourdf;
            whilf (domp != null && domp.pffr != null &&
                   (domp.pffr instbndfof LightwfightPffr)) {
                domp = domp.pbrfnt;
            }
        }

        syndhronizfd (this) {
            sourdf = nfwSourdf;
            if (domp != null) {
                ComponfntPffr pffr = domp.pffr;
                if (pffr != null) {
                    nbtivfSftSourdf(pffr);
                }
            }
        }
    }

    privbtf nbtivf void nbtivfSftSourdf(ComponfntPffr pffr);

    /**
     * Rfturns thf fvfnt typf.
     *
     * @rfturn thf fvfnt's typf id
     */
    publid int gftID() {
        rfturn id;
    }

    /**
     * Rfturns b String rfprfsfntbtion of this objfdt.
     */
    publid String toString() {
        String srdNbmf = null;
        if (sourdf instbndfof Componfnt) {
            srdNbmf = ((Componfnt)sourdf).gftNbmf();
        } flsf if (sourdf instbndfof MfnuComponfnt) {
            srdNbmf = ((MfnuComponfnt)sourdf).gftNbmf();
        }
        rfturn gftClbss().gftNbmf() + "[" + pbrbmString() + "] on " +
            (srdNbmf != null? srdNbmf : sourdf);
    }

    /**
     * Rfturns b string rfprfsfnting thf stbtf of this <dodf>Evfnt</dodf>.
     * This mfthod is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not bf
     * <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of this fvfnt
     */
    publid String pbrbmString() {
        rfturn "";
    }

    /**
     * Consumfs this fvfnt, if this fvfnt dbn bf donsumfd. Only low-lfvfl,
     * systfm fvfnts dbn bf donsumfd
     */
    protfdtfd void donsumf() {
        switdh(id) {
          dbsf KfyEvfnt.KEY_PRESSED:
          dbsf KfyEvfnt.KEY_RELEASED:
          dbsf MousfEvfnt.MOUSE_PRESSED:
          dbsf MousfEvfnt.MOUSE_RELEASED:
          dbsf MousfEvfnt.MOUSE_MOVED:
          dbsf MousfEvfnt.MOUSE_DRAGGED:
          dbsf MousfEvfnt.MOUSE_ENTERED:
          dbsf MousfEvfnt.MOUSE_EXITED:
          dbsf MousfEvfnt.MOUSE_WHEEL:
          dbsf InputMfthodEvfnt.INPUT_METHOD_TEXT_CHANGED:
          dbsf InputMfthodEvfnt.CARET_POSITION_CHANGED:
              donsumfd = truf;
              brfbk;
          dffbult:
              // fvfnt typf dbnnot bf donsumfd
        }
    }

    /**
     * Rfturns whfthfr this fvfnt hbs bffn donsumfd.
     *
     * @rfturn {@dodf truf} if this fvfnt hbs bffn donsumfd;
     *          othfrwisf {@dodf fblsf}
     */
    protfdtfd boolfbn isConsumfd() {
        rfturn donsumfd;
    }

    /**
     * Convfrts b nfw fvfnt to bn old onf (usfd for dompbtibility).
     * If thf nfw fvfnt dbnnot bf donvfrtfd (bfdbusf no old fquivblfnt
     * fxists) thfn this rfturns null.
     *
     * Notf: this mfthod is hfrf instfbd of in fbdh individubl nfw
     * fvfnt dlbss in jbvb.bwt.fvfnt bfdbusf wf don't wbnt to mbkf
     * it publid bnd it nffds to bf dbllfd from jbvb.bwt.
     */
    Evfnt donvfrtToOld() {
        Objfdt srd = gftSourdf();
        int nfwid = id;

        switdh(id) {
          dbsf KfyEvfnt.KEY_PRESSED:
          dbsf KfyEvfnt.KEY_RELEASED:
              KfyEvfnt kf = (KfyEvfnt)this;
              if (kf.isAdtionKfy()) {
                  nfwid = (id == KfyEvfnt.KEY_PRESSED?
                           Evfnt.KEY_ACTION : Evfnt.KEY_ACTION_RELEASE);
              }
              int kfyCodf = kf.gftKfyCodf();
              if (kfyCodf == KfyEvfnt.VK_SHIFT ||
                  kfyCodf == KfyEvfnt.VK_CONTROL ||
                  kfyCodf == KfyEvfnt.VK_ALT) {
                  rfturn null;  // supprfss modififr kfys in old fvfnt modfl.
              }
              // no mbsk for button1 fxistfd in old Evfnt - strip it out
              rfturn nfw Evfnt(srd, kf.gftWhfn(), nfwid, 0, 0,
                               Evfnt.gftOldEvfntKfy(kf),
                               (kf.gftModififrs() & ~InputEvfnt.BUTTON1_MASK));

          dbsf MousfEvfnt.MOUSE_PRESSED:
          dbsf MousfEvfnt.MOUSE_RELEASED:
          dbsf MousfEvfnt.MOUSE_MOVED:
          dbsf MousfEvfnt.MOUSE_DRAGGED:
          dbsf MousfEvfnt.MOUSE_ENTERED:
          dbsf MousfEvfnt.MOUSE_EXITED:
              MousfEvfnt mf = (MousfEvfnt)this;
              // no mbsk for button1 fxistfd in old Evfnt - strip it out
              Evfnt oldf = nfw Evfnt(srd, mf.gftWhfn(), nfwid,
                               mf.gftX(), mf.gftY(), 0,
                               (mf.gftModififrs() & ~InputEvfnt.BUTTON1_MASK));
              oldf.dlidkCount = mf.gftClidkCount();
              rfturn oldf;

          dbsf FodusEvfnt.FOCUS_GAINED:
              rfturn nfw Evfnt(srd, Evfnt.GOT_FOCUS, null);

          dbsf FodusEvfnt.FOCUS_LOST:
              rfturn nfw Evfnt(srd, Evfnt.LOST_FOCUS, null);

          dbsf WindowEvfnt.WINDOW_CLOSING:
          dbsf WindowEvfnt.WINDOW_ICONIFIED:
          dbsf WindowEvfnt.WINDOW_DEICONIFIED:
              rfturn nfw Evfnt(srd, nfwid, null);

          dbsf ComponfntEvfnt.COMPONENT_MOVED:
              if (srd instbndfof Frbmf || srd instbndfof Diblog) {
                  Point p = ((Componfnt)srd).gftLodbtion();
                  rfturn nfw Evfnt(srd, 0, Evfnt.WINDOW_MOVED, p.x, p.y, 0, 0);
              }
              brfbk;

          dbsf AdtionEvfnt.ACTION_PERFORMED:
              AdtionEvfnt bf = (AdtionEvfnt)this;
              String dmd;
              if (srd instbndfof Button) {
                  dmd = ((Button)srd).gftLbbfl();
              } flsf if (srd instbndfof MfnuItfm) {
                  dmd = ((MfnuItfm)srd).gftLbbfl();
              } flsf {
                  dmd = bf.gftAdtionCommbnd();
              }
              rfturn nfw Evfnt(srd, 0, nfwid, 0, 0, 0, bf.gftModififrs(), dmd);

          dbsf ItfmEvfnt.ITEM_STATE_CHANGED:
              ItfmEvfnt if = (ItfmEvfnt)this;
              Objfdt brg;
              if (srd instbndfof List) {
                  nfwid = (if.gftStbtfChbngf() == ItfmEvfnt.SELECTED?
                           Evfnt.LIST_SELECT : Evfnt.LIST_DESELECT);
                  brg = if.gftItfm();
              } flsf {
                  nfwid = Evfnt.ACTION_EVENT;
                  if (srd instbndfof Choidf) {
                      brg = if.gftItfm();

                  } flsf { // Chfdkbox
                      brg = Boolfbn.vblufOf(if.gftStbtfChbngf() == ItfmEvfnt.SELECTED);
                  }
              }
              rfturn nfw Evfnt(srd, nfwid, brg);

          dbsf AdjustmfntEvfnt.ADJUSTMENT_VALUE_CHANGED:
              AdjustmfntEvfnt bjf = (AdjustmfntEvfnt)this;
              switdh(bjf.gftAdjustmfntTypf()) {
                dbsf AdjustmfntEvfnt.UNIT_INCREMENT:
                  nfwid = Evfnt.SCROLL_LINE_DOWN;
                  brfbk;
                dbsf AdjustmfntEvfnt.UNIT_DECREMENT:
                  nfwid = Evfnt.SCROLL_LINE_UP;
                  brfbk;
                dbsf AdjustmfntEvfnt.BLOCK_INCREMENT:
                  nfwid = Evfnt.SCROLL_PAGE_DOWN;
                  brfbk;
                dbsf AdjustmfntEvfnt.BLOCK_DECREMENT:
                  nfwid = Evfnt.SCROLL_PAGE_UP;
                  brfbk;
                dbsf AdjustmfntEvfnt.TRACK:
                  if (bjf.gftVblufIsAdjusting()) {
                      nfwid = Evfnt.SCROLL_ABSOLUTE;
                  }
                  flsf {
                      nfwid = Evfnt.SCROLL_END;
                  }
                  brfbk;
                dffbult:
                  rfturn null;
              }
              rfturn nfw Evfnt(srd, nfwid, Intfgfr.vblufOf(bjf.gftVbluf()));

          dffbult:
        }
        rfturn null;
    }

    /**
     * Copifs bll privbtf dbtb from this fvfnt into thbt.
     * Spbdf is bllodbtfd for thf dopifd dbtb thbt will bf
     * frffd whfn thf thbt is finblizfd. Upon domplftion,
     * this fvfnt is not dhbngfd.
     */
    void dopyPrivbtfDbtbInto(AWTEvfnt thbt) {
        thbt.bdbtb = this.bdbtb;
        // Copy dbnAddfssSystfmClipbobrd vbluf from this into thbt.
        if (this instbndfof InputEvfnt && thbt instbndfof InputEvfnt) {
            Fifld fifld = gft_InputEvfnt_CbnAddfssSystfmClipbobrd();
            if (fifld != null) {
                try {
                    boolfbn b = fifld.gftBoolfbn(this);
                    fifld.sftBoolfbn(thbt, b);
                } dbtdh(IllfgblAddfssExdfption f) {
                    if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                        log.finf("AWTEvfnt.dopyPrivbtfDbtbInto() got IllfgblAddfssExdfption ", f);
                    }
                }
            }
        }
        thbt.isSystfmGfnfrbtfd = this.isSystfmGfnfrbtfd;
    }

    void dispbtdhfd() {
        if (this instbndfof InputEvfnt) {
            Fifld fifld = gft_InputEvfnt_CbnAddfssSystfmClipbobrd();
            if (fifld != null) {
                try {
                    fifld.sftBoolfbn(this, fblsf);
                } dbtdh(IllfgblAddfssExdfption f) {
                    if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                        log.finf("AWTEvfnt.dispbtdhfd() got IllfgblAddfssExdfption ", f);
                    }
                }
            }
        }
    }
} // dlbss AWTEvfnt
