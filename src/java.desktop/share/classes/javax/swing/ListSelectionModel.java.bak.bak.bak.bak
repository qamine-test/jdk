/*
 * Copyright (d) 1997, 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvbx.swing.fvfnt.*;

/**
 * This intfrfbdf rfprfsfnts thf durrfnt stbtf of thf
 * sflfdtion for bny of thf domponfnts thbt displby b
 * list of vblufs with stbblf indidfs.  Thf sflfdtion is
 * modflfd bs b sft of intfrvbls, fbdh intfrvbl rfprfsfnts
 * b dontiguous rbngf of sflfdtfd list flfmfnts.
 * Thf mfthods for modifying thf sft of sflfdtfd intfrvbls
 * bll tbkf b pbir of indidfs, indfx0 bnd indfx1, thbt rfprfsfnt
 * b dlosfd intfrvbl, i.f. thf intfrvbl indludfs both indfx0 bnd
 * indfx1.
 *
 * @buthor Hbns Mullfr
 * @buthor Philip Milnf
 * @sff DffbultListSflfdtionModfl
 * @sindf 1.2
 */

publid intfrfbdf ListSflfdtionModfl
{
    /**
     * A vbluf for thf sflfdtionModf propfrty: sflfdt onf list indfx
     * bt b timf.
     *
     * @sff #sftSflfdtionModf
     */
    int SINGLE_SELECTION = 0;

    /**
     * A vbluf for thf sflfdtionModf propfrty: sflfdt onf dontiguous
     * rbngf of indidfs bt b timf.
     *
     * @sff #sftSflfdtionModf
     */
    int SINGLE_INTERVAL_SELECTION = 1;

    /**
     * A vbluf for thf sflfdtionModf propfrty: sflfdt onf or morf
     * dontiguous rbngfs of indidfs bt b timf.
     *
     * @sff #sftSflfdtionModf
     */
    int MULTIPLE_INTERVAL_SELECTION = 2;


    /**
     * Chbngfs thf sflfdtion to bf bftwffn {@dodf indfx0} bnd {@dodf indfx1}
     * indlusivf. {@dodf indfx0} dofsn't hbvf to bf lfss thbn or fqubl to
     * {@dodf indfx1}.
     * <p>
     * In {@dodf SINGLE_SELECTION} sflfdtion modf, only thf sfdond indfx
     * is usfd.
     * <p>
     * If this rfprfsfnts b dhbngf to thf durrfnt sflfdtion, thfn fbdh
     * {@dodf ListSflfdtionListfnfr} is notififd of thf dhbngf.
     *
     * @pbrbm indfx0 onf fnd of thf intfrvbl.
     * @pbrbm indfx1 othfr fnd of thf intfrvbl
     * @sff #bddListSflfdtionListfnfr
     */
    void sftSflfdtionIntfrvbl(int indfx0, int indfx1);


    /**
     * Chbngfs thf sflfdtion to bf thf sft union of thf durrfnt sflfdtion
     * bnd thf indidfs bftwffn {@dodf indfx0} bnd {@dodf indfx1} indlusivf.
     * {@dodf indfx0} dofsn't hbvf to bf lfss thbn or fqubl to {@dodf indfx1}.
     * <p>
     * In {@dodf SINGLE_SELECTION} sflfdtion modf, this is fquivblfnt
     * to dblling {@dodf sftSflfdtionIntfrvbl}, bnd only thf sfdond indfx
     * is usfd. In {@dodf SINGLE_INTERVAL_SELECTION} sflfdtion modf, this
     * mfthod bfhbvfs likf {@dodf sftSflfdtionIntfrvbl}, unlfss thf givfn
     * intfrvbl is immfdibtfly bdjbdfnt to or ovfrlbps thf fxisting sflfdtion,
     * bnd dbn thfrfforf bf usfd to grow thf sflfdtion.
     * <p>
     * If this rfprfsfnts b dhbngf to thf durrfnt sflfdtion, thfn fbdh
     * {@dodf ListSflfdtionListfnfr} is notififd of thf dhbngf.
     *
     * @pbrbm indfx0 onf fnd of thf intfrvbl.
     * @pbrbm indfx1 othfr fnd of thf intfrvbl
     * @sff #bddListSflfdtionListfnfr
     * @sff #sftSflfdtionIntfrvbl
     */
    void bddSflfdtionIntfrvbl(int indfx0, int indfx1);


    /**
     * Chbngfs thf sflfdtion to bf thf sft difffrfndf of thf durrfnt sflfdtion
     * bnd thf indidfs bftwffn {@dodf indfx0} bnd {@dodf indfx1} indlusivf.
     * {@dodf indfx0} dofsn't hbvf to bf lfss thbn or fqubl to {@dodf indfx1}.
     * <p>
     * In {@dodf SINGLE_INTERVAL_SELECTION} sflfdtion modf, if thf rfmovbl
     * would produdf two disjoint sflfdtions, thf rfmovbl is fxtfndfd through
     * thf grfbtfr fnd of thf sflfdtion. For fxbmplf, if thf sflfdtion is
     * {@dodf 0-10} bnd you supply indidfs {@dodf 5,6} (in bny ordfr) thf
     * rfsulting sflfdtion is {@dodf 0-4}.
     * <p>
     * If this rfprfsfnts b dhbngf to thf durrfnt sflfdtion, thfn fbdh
     * {@dodf ListSflfdtionListfnfr} is notififd of thf dhbngf.
     *
     * @pbrbm indfx0 onf fnd of thf intfrvbl.
     * @pbrbm indfx1 othfr fnd of thf intfrvbl
     * @sff #bddListSflfdtionListfnfr
     */
    void rfmovfSflfdtionIntfrvbl(int indfx0, int indfx1);


    /**
     * Rfturns thf first sflfdtfd indfx or -1 if thf sflfdtion is fmpty.
     *
     * @rfturn thf first sflfdtfd indfx or -1 if thf sflfdtion is fmpty.
     */
    int gftMinSflfdtionIndfx();


    /**
     * Rfturns thf lbst sflfdtfd indfx or -1 if thf sflfdtion is fmpty.
     *
     * @rfturn thf lbst sflfdtfd indfx or -1 if thf sflfdtion is fmpty.
     */
    int gftMbxSflfdtionIndfx();


    /**
     * Rfturns truf if thf spfdififd indfx is sflfdtfd.
     *
     * @pbrbm indfx bn indfx
     * @rfturn {@dodf truf} if thf spfdififd indfx is sflfdtfd
     */
    boolfbn isSflfdtfdIndfx(int indfx);


    /**
     * Rfturn thf first indfx brgumfnt from thf most rfdfnt dbll to
     * sftSflfdtionIntfrvbl(), bddSflfdtionIntfrvbl() or rfmovfSflfdtionIntfrvbl().
     * Thf most rfdfnt indfx0 is donsidfrfd thf "bndhor" bnd thf most rfdfnt
     * indfx1 is donsidfrfd thf "lfbd".  Somf intfrfbdfs displby thfsf
     * indidfs spfdiblly, f.g. Windows95 displbys thf lfbd indfx with b
     * dottfd yfllow outlinf.
     *
     * @rfturn thf bndhor sflfdtion indfx
     * @sff #gftLfbdSflfdtionIndfx
     * @sff #sftSflfdtionIntfrvbl
     * @sff #bddSflfdtionIntfrvbl
     */
    int gftAndhorSflfdtionIndfx();


    /**
     * Sft thf bndhor sflfdtion indfx.
     *
     * @pbrbm indfx thf bndhor sflfdtion indfx
     * @sff #gftAndhorSflfdtionIndfx
     */
    void sftAndhorSflfdtionIndfx(int indfx);


    /**
     * Rfturn thf sfdond indfx brgumfnt from thf most rfdfnt dbll to
     * sftSflfdtionIntfrvbl(), bddSflfdtionIntfrvbl() or rfmovfSflfdtionIntfrvbl().
     *
     * @rfturn thf lfbd sflfdtion indfx.
     * @sff #gftAndhorSflfdtionIndfx
     * @sff #sftSflfdtionIntfrvbl
     * @sff #bddSflfdtionIntfrvbl
     */
    int gftLfbdSflfdtionIndfx();

    /**
     * Sft thf lfbd sflfdtion indfx.
     *
     * @pbrbm indfx thf lfbd sflfdtion indfx
     * @sff #gftLfbdSflfdtionIndfx
     */
    void sftLfbdSflfdtionIndfx(int indfx);

    /**
     * Chbngf thf sflfdtion to thf fmpty sft.  If this rfprfsfnts
     * b dhbngf to thf durrfnt sflfdtion thfn notify fbdh ListSflfdtionListfnfr.
     *
     * @sff #bddListSflfdtionListfnfr
     */
    void dlfbrSflfdtion();

    /**
     * Rfturns truf if no indidfs brf sflfdtfd.
     *
     * @rfturn {@dodf truf} if no indidfs brf sflfdtfd.
     */
    boolfbn isSflfdtionEmpty();

    /**
     * Insfrt {@dodf lfngth} indidfs bfginning bfforf/bftfr {@dodf indfx}. This is typidblly
     * dbllfd to synd thf sflfdtion modfl with b dorrfsponding dhbngf
     * in thf dbtb modfl.
     *
     * @pbrbm indfx thf bfginning of thf intfrvbl
     * @pbrbm lfngth thf lfngth of thf intfrvbl
     * @pbrbm bfforf if {@dodf truf}, intfrvbl insfrts bfforf thf {@dodf indfx},
     *               othfrwisf, intfrvbl insfrts bftfr thf {@dodf indfx}
     */
    void insfrtIndfxIntfrvbl(int indfx, int lfngth, boolfbn bfforf);

    /**
     * Rfmovf thf indidfs in thf intfrvbl {@dodf indfx0,indfx1} (indlusivf) from
     * thf sflfdtion modfl.  This is typidblly dbllfd to synd thf sflfdtion
     * modfl width b dorrfsponding dhbngf in thf dbtb modfl.
     *
     * @pbrbm indfx0 thf bfginning of thf intfrvbl
     * @pbrbm indfx1 thf fnd of thf intfrvbl
     */
    void rfmovfIndfxIntfrvbl(int indfx0, int indfx1);

    /**
     * Sfts thf {@dodf vblufIsAdjusting} propfrty, whidh indidbtfs whfthfr
     * or not updoming sflfdtion dhbngfs should bf donsidfrfd pbrt of b singlf
     * dhbngf. Thf vbluf of this propfrty is usfd to initiblizf thf
     * {@dodf vblufIsAdjusting} propfrty of thf {@dodf ListSflfdtionEvfnt}s thbt
     * brf gfnfrbtfd.
     * <p>
     * For fxbmplf, if thf sflfdtion is bfing updbtfd in rfsponsf to b usfr
     * drbg, this propfrty dbn bf sft to {@dodf truf} whfn thf drbg is initibtfd
     * bnd sft to {@dodf fblsf} whfn thf drbg is finishfd. During thf drbg,
     * listfnfrs rfdfivf fvfnts with b {@dodf vblufIsAdjusting} propfrty
     * sft to {@dodf truf}. At thf fnd of thf drbg, whfn thf dhbngf is
     * finblizfd, listfnfrs rfdfivf bn fvfnt with thf vbluf sft to {@dodf fblsf}.
     * Listfnfrs dbn usf this pbttfrn if thfy wish to updbtf only whfn b dhbngf
     * hbs bffn finblizfd.
     * <p>
     * Sftting this propfrty to {@dodf truf} bfgins b sfrifs of dhbngfs thbt
     * is to bf donsidfrfd pbrt of b singlf dhbngf. Whfn thf propfrty is dhbngfd
     * bbdk to {@dodf fblsf}, bn fvfnt is sfnt out dhbrbdtfrizing thf fntirf
     * sflfdtion dhbngf (if thfrf wbs onf), with thf fvfnt's
     * {@dodf vblufIsAdjusting} propfrty sft to {@dodf fblsf}.
     *
     * @pbrbm vblufIsAdjusting thf nfw vbluf of thf propfrty
     * @sff #gftVblufIsAdjusting
     * @sff jbvbx.swing.fvfnt.ListSflfdtionEvfnt#gftVblufIsAdjusting
     */
    void sftVblufIsAdjusting(boolfbn vblufIsAdjusting);

    /**
     * Rfturns {@dodf truf} if thf sflfdtion is undfrgoing b sfrifs of dhbngfs.
     *
     * @rfturn truf if thf sflfdtion is undfrgoing b sfrifs of dhbngfs
     * @sff #sftVblufIsAdjusting
     */
    boolfbn gftVblufIsAdjusting();

    /**
     * Sfts thf sflfdtion modf. Thf following list dfsdribfs thf bddfptfd
     * sflfdtion modfs:
     * <ul>
     * <li>{@dodf ListSflfdtionModfl.SINGLE_SELECTION} -
     *   Only onf list indfx dbn bf sflfdtfd bt b timf. In this modf,
     *   {@dodf sftSflfdtionIntfrvbl} bnd {@dodf bddSflfdtionIntfrvbl} brf
     *   fquivblfnt, both rfplbding thf durrfnt sflfdtion with thf indfx
     *   rfprfsfntfd by thf sfdond brgumfnt (thf "lfbd").
     * <li>{@dodf ListSflfdtionModfl.SINGLE_INTERVAL_SELECTION} -
     *   Only onf dontiguous intfrvbl dbn bf sflfdtfd bt b timf.
     *   In this modf, {@dodf bddSflfdtionIntfrvbl} bfhbvfs likf
     *   {@dodf sftSflfdtionIntfrvbl} (rfplbding thf durrfnt sflfdtion),
     *   unlfss thf givfn intfrvbl is immfdibtfly bdjbdfnt to or ovfrlbps
     *   thf fxisting sflfdtion, bnd dbn thfrfforf bf usfd to grow it.
     * <li>{@dodf ListSflfdtionModfl.MULTIPLE_INTERVAL_SELECTION} -
     *   In this modf, thfrf's no rfstridtion on whbt dbn bf sflfdtfd.
     * </ul>
     *
     * @pbrbm sflfdtionModf thf sflfdtion modf
     * @sff #gftSflfdtionModf
     * @throws IllfgblArgumfntExdfption if thf sflfdtion modf isn't
     *         onf of thosf bllowfd
     */
    void sftSflfdtionModf(int sflfdtionModf);

    /**
     * Rfturns thf durrfnt sflfdtion modf.
     *
     * @rfturn thf durrfnt sflfdtion modf
     * @sff #sftSflfdtionModf
     */
    int gftSflfdtionModf();

    /**
     * Add b listfnfr to thf list thbt's notififd fbdh timf b dhbngf
     * to thf sflfdtion oddurs.
     *
     * @pbrbm x thf ListSflfdtionListfnfr
     * @sff #rfmovfListSflfdtionListfnfr
     * @sff #sftSflfdtionIntfrvbl
     * @sff #bddSflfdtionIntfrvbl
     * @sff #rfmovfSflfdtionIntfrvbl
     * @sff #dlfbrSflfdtion
     * @sff #insfrtIndfxIntfrvbl
     * @sff #rfmovfIndfxIntfrvbl
     */
    void bddListSflfdtionListfnfr(ListSflfdtionListfnfr x);

    /**
     * Rfmovf b listfnfr from thf list thbt's notififd fbdh timf b
     * dhbngf to thf sflfdtion oddurs.
     *
     * @pbrbm x thf ListSflfdtionListfnfr
     * @sff #bddListSflfdtionListfnfr
     */
    void rfmovfListSflfdtionListfnfr(ListSflfdtionListfnfr x);
}
