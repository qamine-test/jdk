/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;


import jbvb.util.HbshSft;
import jbvb.util.Hbshtbblf;
import jbvb.util.Didtionbry;
import jbvb.util.Enumfrbtion;
import jbvb.util.Lodblf;
import jbvb.util.Vfdtor;
import jbvb.util.EvfntListfnfr;
import jbvb.util.Sft;
import jbvb.util.Mbp;
import jbvb.util.HbshMbp;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bwt.imbgf.VolbtilfImbgf;
import jbvb.bwt.Grbphids2D;
import jbvb.bwt.pffr.LightwfightPffr;
import jbvb.bwt.dnd.DropTbrgft;
import jbvb.bwt.font.FontRfndfrContfxt;
import jbvb.bfbns.PropfrtyChbngfListfnfr;
import jbvb.bfbns.VftobblfChbngfListfnfr;
import jbvb.bfbns.VftobblfChbngfSupport;
import jbvb.bfbns.Trbnsifnt;

import jbvb.bpplft.Applft;

import jbvb.io.Sfriblizbblf;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputVblidbtion;
import jbvb.io.InvblidObjfdtExdfption;

import jbvbx.swing.bordfr.*;
import jbvbx.swing.fvfnt.*;
import jbvbx.swing.plbf.*;
import stbtid jbvbx.swing.ClifntPropfrtyKfy.*;
import jbvbx.bddfssibility.*;

import sun.bwt.SunToolkit;
import sun.swing.SwingUtilitifs2;
import sun.swing.UIClifntPropfrtyKfy;

/**
 * Thf bbsf dlbss for bll Swing domponfnts fxdfpt top-lfvfl dontbinfrs.
 * To usf b domponfnt thbt inhfrits from <dodf>JComponfnt</dodf>,
 * you must plbdf thf domponfnt in b dontbinmfnt hifrbrdhy
 * whosf root is b top-lfvfl Swing dontbinfr.
 * Top-lfvfl Swing dontbinfrs --
 * sudh bs <dodf>JFrbmf</dodf>, <dodf>JDiblog</dodf>,
 * bnd <dodf>JApplft</dodf> --
 * brf spfdiblizfd domponfnts
 * thbt providf b plbdf for othfr Swing domponfnts to pbint thfmsflvfs.
 * For bn fxplbnbtion of dontbinmfnt hifrbrdhifs, sff
 * <b
 hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/toplfvfl.html">Swing Componfnts bnd thf Contbinmfnt Hifrbrdhy</b>,
 * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
 *
 * <p>
 * Thf <dodf>JComponfnt</dodf> dlbss providfs:
 * <ul>
 * <li>Thf bbsf dlbss for both stbndbrd bnd dustom domponfnts
 *     thbt usf thf Swing brdhitfdturf.
 * <li>A "pluggbblf look bnd fffl" (L&bmp;F) thbt dbn bf spfdififd by thf
 *     progrbmmfr or (optionblly) sflfdtfd by thf usfr bt runtimf.
 *     Thf look bnd fffl for fbdh domponfnt is providfd by b
 *     <fm>UI dflfgbtf</fm> -- bn objfdt thbt dfsdfnds from
 *     {@link jbvbx.swing.plbf.ComponfntUI}.
 *     Sff <b
 * hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/lookbndfffl/plbf.html">How
 *     to Sft thf Look bnd Fffl</b>
 *     in <fm>Thf Jbvb Tutoribl</fm>
 *     for morf informbtion.
 * <li>Comprfhfnsivf kfystrokf hbndling.
 *     Sff thf dodumfnt <b
 * hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/kfybinding.html">How to Usf Kfy Bindings</b>,
 *     bn brtidlf in <fm>Thf Jbvb Tutoribl</fm>,
 *     for morf informbtion.
 * <li>Support for tool tips --
 *     short dfsdriptions thbt pop up whfn thf dursor lingfrs
 *     ovfr b domponfnt.
 *     Sff <b
 * hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/tooltip.html">How
 *     to Usf Tool Tips</b>
 *     in <fm>Thf Jbvb Tutoribl</fm>
 *     for morf informbtion.
 * <li>Support for bddfssibility.
 *     <dodf>JComponfnt</dodf> dontbins bll of thf mfthods in thf
 *     <dodf>Addfssiblf</dodf> intfrfbdf,
 *     but it dofsn't bdtublly implfmfnt thf intfrfbdf.  Thbt is thf
 *     rfsponsibility of thf individubl dlbssfs
 *     thbt fxtfnd <dodf>JComponfnt</dodf>.
 * <li>Support for domponfnt-spfdifid propfrtifs.
 *     With thf {@link #putClifntPropfrty}
 *     bnd {@link #gftClifntPropfrty} mfthods,
 *     you dbn bssodibtf nbmf-objfdt pbirs
 *     with bny objfdt thbt dfsdfnds from <dodf>JComponfnt</dodf>.
 * <li>An infrbstrudturf for pbinting
 *     thbt indludfs doublf bufffring bnd support for bordfrs.
 *     For morf informbtion sff <b
 * hrff="http://www.orbdlf.dom/tfdhnftwork/jbvb/pbinting-140037.html#swing">Pbinting</b> bnd
 * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/bordfr.htmll">How
 *     to Usf Bordfrs</b>,
 *     both of whidh brf sfdtions in <fm>Thf Jbvb Tutoribl</fm>.
 * </ul>
 * For morf informbtion on thfsf subjfdts, sff thf
 * <b hrff="pbdkbgf-summbry.html#pbdkbgf_dfsdription">Swing pbdkbgf dfsdription</b>
 * bnd <fm>Thf Jbvb Tutoribl</fm> sfdtion
 * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/jdomponfnt.html">Thf JComponfnt Clbss</b>.
 * <p>
 * <dodf>JComponfnt</dodf> bnd its subdlbssfs dodumfnt dffbult vblufs
 * for dfrtbin propfrtifs.  For fxbmplf, <dodf>JTbblf</dodf> dodumfnts thf
 * dffbult row hfight bs 16.  Ebdh <dodf>JComponfnt</dodf> subdlbss
 * thbt hbs b <dodf>ComponfntUI</dodf> will drfbtf thf
 * <dodf>ComponfntUI</dodf> bs pbrt of its donstrudtor.  In ordfr
 * to providf b pbrtidulbr look bnd fffl fbdh
 * <dodf>ComponfntUI</dodf> mby sft propfrtifs bbdk on thf
 * <dodf>JComponfnt</dodf> thbt drfbtfd it.  For fxbmplf, b dustom
 * look bnd fffl mby rfquirf <dodf>JTbblf</dodf>s to hbvf b row
 * hfight of 24. Thf dodumfntfd dffbults brf thf vbluf of b propfrty
 * BEFORE thf <dodf>ComponfntUI</dodf> hbs bffn instbllfd.  If you
 * nffd b spfdifid vbluf for b pbrtidulbr propfrty you should
 * fxpliditly sft it.
 * <p>
 * In rflfbsf 1.4, thf fodus subsystfm wbs rfbrdhitfdtfd.
 * For morf informbtion, sff
 * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
 * How to Usf thf Fodus Subsystfm</b>,
 * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
 * <p>
 * <strong>Wbrning:</strong> Swing is not thrfbd sbff. For morf
 * informbtion sff <b
 * hrff="pbdkbgf-summbry.html#thrfbding">Swing's Thrfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @sff KfyStrokf
 * @sff Adtion
 * @sff #sftBordfr
 * @sff #rfgistfrKfybobrdAdtion
 * @sff JOptionPbnf
 * @sff #sftDfbugGrbphidsOptions
 * @sff #sftToolTipTfxt
 * @sff #sftAutosdrolls
 *
 * @buthor Hbns Mullfr
 * @buthor Arnbud Wfbfr
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid bbstrbdt dlbss JComponfnt fxtfnds Contbinfr implfmfnts Sfriblizbblf,
                                              TrbnsffrHbndlfr.HbsGftTrbnsffrHbndlfr
{
    /**
     * @sff #gftUIClbssID
     * @sff #writfObjfdt
     */
    privbtf stbtid finbl String uiClbssID = "ComponfntUI";

    /**
     * @sff #rfbdObjfdt
     */
    privbtf stbtid finbl Hbshtbblf<ObjfdtInputStrfbm, RfbdObjfdtCbllbbdk> rfbdObjfdtCbllbbdks =
            nfw Hbshtbblf<ObjfdtInputStrfbm, RfbdObjfdtCbllbbdk>(1);

    /**
     * Kfys to usf for forwbrd fodus trbvfrsbl whfn thf JComponfnt is
     * mbnbging fodus.
     */
    privbtf stbtid Sft<KfyStrokf> mbnbgingFodusForwbrdTrbvfrsblKfys;

    /**
     * Kfys to usf for bbdkwbrd fodus trbvfrsbl whfn thf JComponfnt is
     * mbnbging fodus.
     */
    privbtf stbtid Sft<KfyStrokf> mbnbgingFodusBbdkwbrdTrbvfrsblKfys;

    // Following brf thf possiblf rfturn vblufs from gftObsdurfdStbtf.
    privbtf stbtid finbl int NOT_OBSCURED = 0;
    privbtf stbtid finbl int PARTIALLY_OBSCURED = 1;
    privbtf stbtid finbl int COMPLETELY_OBSCURED = 2;

    /**
     * Sft to truf whfn DfbugGrbphids hbs bffn lobdfd.
     */
    stbtid boolfbn DEBUG_GRAPHICS_LOADED;

    /**
     * Kfy usfd to look up b vbluf from thf AppContfxt to dftfrminf thf
     * JComponfnt thf InputVfrififr is running for. Thbt is, if
     * AppContfxt.gft(INPUT_VERIFIER_SOURCE_KEY) rfturns non-null, it
     * indidbtfs thf EDT is dblling into thf InputVfrififr from thf
     * rfturnfd domponfnt.
     */
    privbtf stbtid finbl Objfdt INPUT_VERIFIER_SOURCE_KEY =
            nfw StringBuildfr("InputVfrififrSourdfKfy");

    /* Thf following fiflds support sft mfthods for thf dorrfsponding
     * jbvb.bwt.Componfnt propfrtifs.
     */
    privbtf boolfbn isAlignmfntXSft;
    privbtf flobt blignmfntX;
    privbtf boolfbn isAlignmfntYSft;
    privbtf flobt blignmfntY;

    /**
     * Bbdking storf for JComponfnt propfrtifs bnd listfnfrs
     */

    /** Thf look bnd fffl dflfgbtf for this domponfnt. */
    protfdtfd trbnsifnt ComponfntUI ui;
    /** A list of fvfnt listfnfrs for this domponfnt. */
    protfdtfd EvfntListfnfrList listfnfrList = nfw EvfntListfnfrList();

    privbtf trbnsifnt ArrbyTbblf dlifntPropfrtifs;
    privbtf VftobblfChbngfSupport vftobblfChbngfSupport;
    /**
     * Whfthfr or not butosdroll hbs bffn fnbblfd.
     */
    privbtf boolfbn butosdrolls;
    privbtf Bordfr bordfr;
    privbtf int flbgs;

    /* Input vfrififr for this domponfnt */
    privbtf InputVfrififr inputVfrififr = null;

    privbtf boolfbn vfrifyInputWhfnFodusTbrgft = truf;

    /**
     * Sft in <dodf>_pbintImmfdibtfly</dodf>.
     * Will indidbtf thf dhild thbt initibtfd thf pbinting opfrbtion.
     * If <dodf>pbintingChild</dodf> is opbquf, no nffd to pbint
     * bny dhild domponfnts bftfr <dodf>pbintingChild</dodf>.
     * Tfst usfd in <dodf>pbintChildrfn</dodf>.
     */
    trbnsifnt Componfnt         pbintingChild;

    /**
     * Constbnt usfd for <dodf>rfgistfrKfybobrdAdtion</dodf> thbt
     * mfbns thbt thf dommbnd should bf invokfd whfn
     * thf domponfnt hbs thf fodus.
     */
    publid stbtid finbl int WHEN_FOCUSED = 0;

    /**
     * Constbnt usfd for <dodf>rfgistfrKfybobrdAdtion</dodf> thbt
     * mfbns thbt thf dommbnd should bf invokfd whfn thf rfdfiving
     * domponfnt is bn bndfstor of thf fodusfd domponfnt or is
     * itsflf thf fodusfd domponfnt.
     */
    publid stbtid finbl int WHEN_ANCESTOR_OF_FOCUSED_COMPONENT = 1;

    /**
     * Constbnt usfd for <dodf>rfgistfrKfybobrdAdtion</dodf> thbt
     * mfbns thbt thf dommbnd should bf invokfd whfn
     * thf rfdfiving domponfnt is in thf window thbt hbs thf fodus
     * or is itsflf thf fodusfd domponfnt.
     */
    publid stbtid finbl int WHEN_IN_FOCUSED_WINDOW = 2;

    /**
     * Constbnt usfd by somf of thf APIs to mfbn thbt no dondition is dffinfd.
     */
    publid stbtid finbl int UNDEFINED_CONDITION = -1;

    /**
     * Thf kfy usfd by <dodf>JComponfnt</dodf> to bddfss kfybobrd bindings.
     */
    privbtf stbtid finbl String KEYBOARD_BINDINGS_KEY = "_KfybobrdBindings";

    /**
     * An brrby of <dodf>KfyStrokf</dodf>s usfd for
     * <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> brf stbshfd
     * in thf dlifnt propfrtifs undfr this string.
     */
    privbtf stbtid finbl String WHEN_IN_FOCUSED_WINDOW_BINDINGS = "_WhfnInFodusfdWindow";

    /**
     * Thf dommfnt to displby whfn thf dursor is ovfr thf domponfnt,
     * blso known bs b "vbluf tip", "flyovfr hflp", or "flyovfr lbbfl".
     */
    publid stbtid finbl String TOOL_TIP_TEXT_KEY = "ToolTipTfxt";

    privbtf stbtid finbl String NEXT_FOCUS = "nfxtFodus";

    /**
     * <dodf>JPopupMfnu</dodf> bssignfd to this domponfnt
     * bnd bll of its dhildrfn
     */
    privbtf JPopupMfnu popupMfnu;

    /** Privbtf flbgs **/
    privbtf stbtid finbl int IS_DOUBLE_BUFFERED                       =  0;
    privbtf stbtid finbl int ANCESTOR_USING_BUFFER                    =  1;
    privbtf stbtid finbl int IS_PAINTING_TILE                         =  2;
    privbtf stbtid finbl int IS_OPAQUE                                =  3;
    privbtf stbtid finbl int KEY_EVENTS_ENABLED                       =  4;
    privbtf stbtid finbl int FOCUS_INPUTMAP_CREATED                   =  5;
    privbtf stbtid finbl int ANCESTOR_INPUTMAP_CREATED                =  6;
    privbtf stbtid finbl int WIF_INPUTMAP_CREATED                     =  7;
    privbtf stbtid finbl int ACTIONMAP_CREATED                        =  8;
    privbtf stbtid finbl int CREATED_DOUBLE_BUFFER                    =  9;
    // bit 10 is frff
    privbtf stbtid finbl int IS_PRINTING                              = 11;
    privbtf stbtid finbl int IS_PRINTING_ALL                          = 12;
    privbtf stbtid finbl int IS_REPAINTING                            = 13;
    /** Bits 14-21 brf usfd to hbndlf nfstfd writfObjfdt dblls. **/
    privbtf stbtid finbl int WRITE_OBJ_COUNTER_FIRST                  = 14;
    privbtf stbtid finbl int RESERVED_1                               = 15;
    privbtf stbtid finbl int RESERVED_2                               = 16;
    privbtf stbtid finbl int RESERVED_3                               = 17;
    privbtf stbtid finbl int RESERVED_4                               = 18;
    privbtf stbtid finbl int RESERVED_5                               = 19;
    privbtf stbtid finbl int RESERVED_6                               = 20;
    privbtf stbtid finbl int WRITE_OBJ_COUNTER_LAST                   = 21;

    privbtf stbtid finbl int REQUEST_FOCUS_DISABLED                   = 22;
    privbtf stbtid finbl int INHERITS_POPUP_MENU                      = 23;
    privbtf stbtid finbl int OPAQUE_SET                               = 24;
    privbtf stbtid finbl int AUTOSCROLLS_SET                          = 25;
    privbtf stbtid finbl int FOCUS_TRAVERSAL_KEYS_FORWARD_SET         = 26;
    privbtf stbtid finbl int FOCUS_TRAVERSAL_KEYS_BACKWARD_SET        = 27;
    privbtf stbtid finbl int REVALIDATE_RUNNABLE_SCHEDULED            = 28;

    /**
     * Tfmporbry rfdtbnglfs.
     */
    privbtf stbtid jbvb.util.List<Rfdtbnglf> tfmpRfdtbnglfs = nfw jbvb.util.ArrbyList<Rfdtbnglf>(11);

    /** Usfd for <dodf>WHEN_FOCUSED</dodf> bindings. */
    privbtf InputMbp fodusInputMbp;
    /** Usfd for <dodf>WHEN_ANCESTOR_OF_FOCUSED_COMPONENT</dodf> bindings. */
    privbtf InputMbp bndfstorInputMbp;
    /** Usfd for <dodf>WHEN_IN_FOCUSED_KEY</dodf> bindings. */
    privbtf ComponfntInputMbp windowInputMbp;

    /** AdtionMbp. */
    privbtf AdtionMbp bdtionMbp;

    /** Kfy usfd to storf thf dffbult lodblf in bn AppContfxt **/
    privbtf stbtid finbl String dffbultLodblf = "JComponfnt.dffbultLodblf";

    privbtf stbtid Componfnt domponfntObtbiningGrbphidsFrom;
    privbtf stbtid Objfdt domponfntObtbiningGrbphidsFromLodk = nfw
            StringBuildfr("domponfntObtbiningGrbphidsFrom");

    /**
     * AA tfxt hints.
     */
    trbnsifnt privbtf Objfdt bbTfxtInfo;

    stbtid Grbphids sbfflyGftGrbphids(Componfnt d) {
        rfturn sbfflyGftGrbphids(d, SwingUtilitifs.gftRoot(d));
    }

    stbtid Grbphids sbfflyGftGrbphids(Componfnt d, Componfnt root) {
        syndhronizfd(domponfntObtbiningGrbphidsFromLodk) {
            domponfntObtbiningGrbphidsFrom = root;
            Grbphids g = d.gftGrbphids();
            domponfntObtbiningGrbphidsFrom = null;
            rfturn g;
        }
    }

    stbtid void gftGrbphidsInvokfd(Componfnt root) {
        if (!JComponfnt.isComponfntObtbiningGrbphidsFrom(root)) {
            JRootPbnf rootPbnf = ((RootPbnfContbinfr)root).gftRootPbnf();
            if (rootPbnf != null) {
                rootPbnf.disbblfTrufDoublfBufffring();
            }
        }
    }


    /**
     * Rfturns truf if {@dodf d} is thf domponfnt thf grbphids is bfing
     * rfqufstfd of. This is intfndfd for usf whfn gftGrbphids is invokfd.
     */
    privbtf stbtid boolfbn isComponfntObtbiningGrbphidsFrom(Componfnt d) {
        syndhronizfd(domponfntObtbiningGrbphidsFromLodk) {
            rfturn (domponfntObtbiningGrbphidsFrom == d);
        }
    }

    /**
     * Rfturns thf Sft of <dodf>KfyStrokf</dodf>s to usf if thf domponfnt
     * is mbnbging fodus for forwbrd fodus trbvfrsbl.
     */
    stbtid Sft<KfyStrokf> gftMbnbgingFodusForwbrdTrbvfrsblKfys() {
        syndhronizfd(JComponfnt.dlbss) {
            if (mbnbgingFodusForwbrdTrbvfrsblKfys == null) {
                mbnbgingFodusForwbrdTrbvfrsblKfys = nfw HbshSft<KfyStrokf>(1);
                mbnbgingFodusForwbrdTrbvfrsblKfys.bdd(
                    KfyStrokf.gftKfyStrokf(KfyEvfnt.VK_TAB,
                                           InputEvfnt.CTRL_MASK));
            }
        }
        rfturn mbnbgingFodusForwbrdTrbvfrsblKfys;
    }

    /**
     * Rfturns thf Sft of <dodf>KfyStrokf</dodf>s to usf if thf domponfnt
     * is mbnbging fodus for bbdkwbrd fodus trbvfrsbl.
     */
    stbtid Sft<KfyStrokf> gftMbnbgingFodusBbdkwbrdTrbvfrsblKfys() {
        syndhronizfd(JComponfnt.dlbss) {
            if (mbnbgingFodusBbdkwbrdTrbvfrsblKfys == null) {
                mbnbgingFodusBbdkwbrdTrbvfrsblKfys = nfw HbshSft<KfyStrokf>(1);
                mbnbgingFodusBbdkwbrdTrbvfrsblKfys.bdd(
                    KfyStrokf.gftKfyStrokf(KfyEvfnt.VK_TAB,
                                           InputEvfnt.SHIFT_MASK |
                                           InputEvfnt.CTRL_MASK));
            }
        }
        rfturn mbnbgingFodusBbdkwbrdTrbvfrsblKfys;
    }

    privbtf stbtid Rfdtbnglf fftdhRfdtbnglf() {
        syndhronizfd(tfmpRfdtbnglfs) {
            Rfdtbnglf rfdt;
            int sizf = tfmpRfdtbnglfs.sizf();
            if (sizf > 0) {
                rfdt = tfmpRfdtbnglfs.rfmovf(sizf - 1);
            }
            flsf {
                rfdt = nfw Rfdtbnglf(0, 0, 0, 0);
            }
            rfturn rfdt;
        }
    }

    privbtf stbtid void rfdydlfRfdtbnglf(Rfdtbnglf rfdt) {
        syndhronizfd(tfmpRfdtbnglfs) {
            tfmpRfdtbnglfs.bdd(rfdt);
        }
    }

    /**
     * Sfts whfthfr or not <dodf>gftComponfntPopupMfnu</dodf> should dflfgbtf
     * to thf pbrfnt if this domponfnt dofs not hbvf b <dodf>JPopupMfnu</dodf>
     * bssignfd to it.
     * <p>
     * Thf dffbult vbluf for this is fblsf, but somf <dodf>JComponfnt</dodf>
     * subdlbssfs thbt brf implfmfntfd bs b numbfr of <dodf>JComponfnt</dodf>s
     * mby sft this to truf.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm vbluf whfthfr or not thf JPopupMfnu is inhfritfd
     * @sff #sftComponfntPopupMfnu
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Whfthfr or not thf JPopupMfnu is inhfritfd
     * @sindf 1.5
     */
    publid void sftInhfritsPopupMfnu(boolfbn vbluf) {
        boolfbn oldVbluf = gftFlbg(INHERITS_POPUP_MENU);
        sftFlbg(INHERITS_POPUP_MENU, vbluf);
        firfPropfrtyChbngf("inhfritsPopupMfnu", oldVbluf, vbluf);
    }

    /**
     * Rfturns truf if thf JPopupMfnu should bf inhfritfd from thf pbrfnt.
     *
     * @rfturn truf if thf JPopupMfnu should bf inhfritfd from thf pbrfnt
     * @sff #sftComponfntPopupMfnu
     * @sindf 1.5
     */
    publid boolfbn gftInhfritsPopupMfnu() {
        rfturn gftFlbg(INHERITS_POPUP_MENU);
    }

    /**
     * Sfts thf <dodf>JPopupMfnu</dodf> for this <dodf>JComponfnt</dodf>.
     * Thf UI is rfsponsiblf for rfgistfring bindings bnd bdding thf nfdfssbry
     * listfnfrs sudh thbt thf <dodf>JPopupMfnu</dodf> will bf shown bt
     * thf bppropribtf timf. Whfn thf <dodf>JPopupMfnu</dodf> is shown
     * dfpfnds upon thf look bnd fffl: somf mby show it on b mousf fvfnt,
     * somf mby fnbblf b kfy binding.
     * <p>
     * If <dodf>popup</dodf> is null, bnd <dodf>gftInhfritsPopupMfnu</dodf>
     * rfturns truf, thfn <dodf>gftComponfntPopupMfnu</dodf> will bf dflfgbtfd
     * to thf pbrfnt. This providfs for b wby to mbkf bll dhild domponfnts
     * inhfrit thf popupmfnu of thf pbrfnt.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm popup - thf popup thbt will bf bssignfd to this domponfnt
     *                mby bf null
     * @sff #gftComponfntPopupMfnu
     * @bfbninfo
     *        bound: truf
     *    prfffrrfd: truf
     *  dfsdription: Popup to show
     * @sindf 1.5
     */
    publid void sftComponfntPopupMfnu(JPopupMfnu popup) {
        if(popup != null) {
            fnbblfEvfnts(AWTEvfnt.MOUSE_EVENT_MASK);
        }
        JPopupMfnu oldPopup = this.popupMfnu;
        this.popupMfnu = popup;
        firfPropfrtyChbngf("domponfntPopupMfnu", oldPopup, popup);
    }

    /**
     * Rfturns <dodf>JPopupMfnu</dodf> thbt bssignfd for this domponfnt.
     * If this domponfnt dofs not hbvf b <dodf>JPopupMfnu</dodf> bssignfd
     * to it bnd <dodf>gftInhfritsPopupMfnu</dodf> is truf, this
     * will rfturn <dodf>gftPbrfnt().gftComponfntPopupMfnu()</dodf> (bssuming
     * thf pbrfnt is vblid.)
     *
     * @rfturn <dodf>JPopupMfnu</dodf> bssignfd for this domponfnt
     *         or <dodf>null</dodf> if no popup bssignfd
     * @sff #sftComponfntPopupMfnu
     * @sindf 1.5
     */
    publid JPopupMfnu gftComponfntPopupMfnu() {

        if(!gftInhfritsPopupMfnu()) {
            rfturn popupMfnu;
        }

        if(popupMfnu == null) {
            // Sfbrdh pbrfnts for its popup
            Contbinfr pbrfnt = gftPbrfnt();
            whilf (pbrfnt != null) {
                if(pbrfnt instbndfof JComponfnt) {
                    rfturn ((JComponfnt)pbrfnt).gftComponfntPopupMfnu();
                }
                if(pbrfnt instbndfof Window ||
                   pbrfnt instbndfof Applft) {
                    // Rfbdhfd toplfvfl, brfbk bnd rfturn null
                    brfbk;
                }
                pbrfnt = pbrfnt.gftPbrfnt();
            }
            rfturn null;
        }

        rfturn popupMfnu;
    }

    /**
     * Dffbult <dodf>JComponfnt</dodf> donstrudtor.  This donstrudtor dofs
     * vfry littlf initiblizbtion bfyond dblling thf <dodf>Contbinfr</dodf>
     * donstrudtor.  For fxbmplf, thf initibl lbyout mbnbgfr is
     * <dodf>null</dodf>. It dofs, howfvfr, sft thf domponfnt's lodblf
     * propfrty to thf vbluf rfturnfd by
     * <dodf>JComponfnt.gftDffbultLodblf</dodf>.
     *
     * @sff #gftDffbultLodblf
     */
    publid JComponfnt() {
        supfr();
        // Wf fnbblf kfy fvfnts on bll JComponfnts so thbt bddfssibility
        // bindings will work fvfrywhfrf. This is b pbrtibl fix to BugID
        // 4282211.
        fnbblfEvfnts(AWTEvfnt.KEY_EVENT_MASK);
        if (isMbnbgingFodus()) {
            LookAndFffl.instbllPropfrty(this,
                                        "fodusTrbvfrsblKfysForwbrd",
                                  gftMbnbgingFodusForwbrdTrbvfrsblKfys());
            LookAndFffl.instbllPropfrty(this,
                                        "fodusTrbvfrsblKfysBbdkwbrd",
                                  gftMbnbgingFodusBbdkwbrdTrbvfrsblKfys());
        }

        supfr.sftLodblf( JComponfnt.gftDffbultLodblf() );
    }


    /**
     * Rfsfts thf UI propfrty to b vbluf from thf durrfnt look bnd fffl.
     * <dodf>JComponfnt</dodf> subdlbssfs must ovfrridf this mfthod
     * likf this:
     * <prf>
     *   publid void updbtfUI() {
     *      sftUI((SlidfrUI)UIMbnbgfr.gftUI(this);
     *   }
     *  </prf>
     *
     * @sff #sftUI
     * @sff UIMbnbgfr#gftLookAndFffl
     * @sff UIMbnbgfr#gftUI
     */
    publid void updbtfUI() {}


    /**
     * Sfts thf look bnd fffl dflfgbtf for this domponfnt.
     * <dodf>JComponfnt</dodf> subdlbssfs gfnfrblly ovfrridf this mfthod
     * to nbrrow thf brgumfnt typf. For fxbmplf, in <dodf>JSlidfr</dodf>:
     * <prf>
     * publid void sftUI(SlidfrUI nfwUI) {
     *     supfr.sftUI(nfwUI);
     * }
     *  </prf>
     * <p>
     * Additionblly <dodf>JComponfnt</dodf> subdlbssfs must providf b
     * <dodf>gftUI</dodf> mfthod thbt rfturns thf dorrfdt typf.  For fxbmplf:
     * <prf>
     * publid SlidfrUI gftUI() {
     *     rfturn (SlidfrUI)ui;
     * }
     * </prf>
     *
     * @pbrbm nfwUI thf nfw UI dflfgbtf
     * @sff #updbtfUI
     * @sff UIMbnbgfr#gftLookAndFffl
     * @sff UIMbnbgfr#gftUI
     * @bfbninfo
     *        bound: truf
     *       hiddfn: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Thf domponfnt's look bnd fffl dflfgbtf.
     */
    protfdtfd void sftUI(ComponfntUI nfwUI) {
        /* Wf do not dhfdk thbt thf UI instbndf is difffrfnt
         * bfforf bllowing thf switdh in ordfr to fnbblf thf
         * sbmf UI instbndf *with difffrfnt dffbult sfttings*
         * to bf instbllfd.
         */

        uninstbllUIAndPropfrtifs();

        // bbTfxt shouldn't pfrsist bftwffn look bnd fffls, rfsft it.
        bbTfxtInfo =
            UIMbnbgfr.gftDffbults().gft(SwingUtilitifs2.AA_TEXT_PROPERTY_KEY);
        ComponfntUI oldUI = ui;
        ui = nfwUI;
        if (ui != null) {
            ui.instbllUI(this);
        }

        firfPropfrtyChbngf("UI", oldUI, nfwUI);
        rfvblidbtf();
        rfpbint();
    }

    /**
     * Uninstblls thf UI, if bny, bnd bny dlifnt propfrtifs dfsignbtfd
     * bs bfing spfdifid to thf instbllfd UI - instbndfs of
     * {@dodf UIClifntPropfrtyKfy}.
     */
    privbtf void uninstbllUIAndPropfrtifs() {
        if (ui != null) {
            ui.uninstbllUI(this);
            //dlfbn UIClifntPropfrtyKfys from dlifnt propfrtifs
            if (dlifntPropfrtifs != null) {
                syndhronizfd(dlifntPropfrtifs) {
                    Objfdt[] dlifntPropfrtyKfys =
                        dlifntPropfrtifs.gftKfys(null);
                    if (dlifntPropfrtyKfys != null) {
                        for (Objfdt kfy : dlifntPropfrtyKfys) {
                            if (kfy instbndfof UIClifntPropfrtyKfy) {
                                putClifntPropfrty(kfy, null);
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Rfturns thf <dodf>UIDffbults</dodf> kfy usfd to
     * look up thf nbmf of thf <dodf>swing.plbf.ComponfntUI</dodf>
     * dlbss thbt dffinfs thf look bnd fffl
     * for this domponfnt.  Most bpplidbtions will nfvfr nffd to
     * dbll this mfthod.  Subdlbssfs of <dodf>JComponfnt</dodf> thbt support
     * pluggbblf look bnd fffl should ovfrridf this mfthod to
     * rfturn b <dodf>UIDffbults</dodf> kfy thbt mbps to thf
     * <dodf>ComponfntUI</dodf> subdlbss thbt dffinfs thfir look bnd fffl.
     *
     * @rfturn thf <dodf>UIDffbults</dodf> kfy for b
     *          <dodf>ComponfntUI</dodf> subdlbss
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *      fxpfrt: truf
     * dfsdription: UIClbssID
     */
    publid String gftUIClbssID() {
        rfturn uiClbssID;
    }


    /**
     * Rfturns thf grbphids objfdt usfd to pbint this domponfnt.
     * If <dodf>DfbugGrbphids</dodf> is turnfd on wf drfbtf b nfw
     * <dodf>DfbugGrbphids</dodf> objfdt if nfdfssbry.
     * Othfrwisf wf just donfigurf thf
     * spfdififd grbphids objfdt's forfground bnd font.
     *
     * @pbrbm g thf originbl <dodf>Grbphids</dodf> objfdt
     * @rfturn b <dodf>Grbphids</dodf> objfdt donfigurfd for this domponfnt
     */
    protfdtfd Grbphids gftComponfntGrbphids(Grbphids g) {
        Grbphids domponfntGrbphids = g;
        if (ui != null && DEBUG_GRAPHICS_LOADED) {
            if ((DfbugGrbphids.dfbugComponfntCount() != 0) &&
                    (shouldDfbugGrbphids() != 0) &&
                    !(g instbndfof DfbugGrbphids)) {
                domponfntGrbphids = nfw DfbugGrbphids(g,this);
            }
        }
        domponfntGrbphids.sftColor(gftForfground());
        domponfntGrbphids.sftFont(gftFont());

        rfturn domponfntGrbphids;
    }


    /**
     * Cblls thf UI dflfgbtf's pbint mfthod, if thf UI dflfgbtf
     * is non-<dodf>null</dodf>.  Wf pbss thf dflfgbtf b dopy of thf
     * <dodf>Grbphids</dodf> objfdt to protfdt thf rfst of thf
     * pbint dodf from irrfvodbblf dhbngfs
     * (for fxbmplf, <dodf>Grbphids.trbnslbtf</dodf>).
     * <p>
     * If you ovfrridf this in b subdlbss you should not mbkf pfrmbnfnt
     * dhbngfs to thf pbssfd in <dodf>Grbphids</dodf>. For fxbmplf, you
     * should not bltfr thf dlip <dodf>Rfdtbnglf</dodf> or modify thf
     * trbnsform. If you nffd to do thfsf opfrbtions you mby find it
     * fbsifr to drfbtf b nfw <dodf>Grbphids</dodf> from thf pbssfd in
     * <dodf>Grbphids</dodf> bnd mbnipulbtf it. Furthfr, if you do not
     * invokfr supfr's implfmfntbtion you must honor thf opbquf propfrty,
     * thbt is
     * if this domponfnt is opbquf, you must domplftfly fill in thf bbdkground
     * in b non-opbquf dolor. If you do not honor thf opbquf propfrty you
     * will likfly sff visubl brtifbdts.
     * <p>
     * Thf pbssfd in <dodf>Grbphids</dodf> objfdt might
     * hbvf b trbnsform othfr thbn thf idfntify trbnsform
     * instbllfd on it.  In this dbsf, you might gft
     * unfxpfdtfd rfsults if you dumulbtivfly bpply
     * bnothfr trbnsform.
     *
     * @pbrbm g thf <dodf>Grbphids</dodf> objfdt to protfdt
     * @sff #pbint
     * @sff ComponfntUI
     */
    protfdtfd void pbintComponfnt(Grbphids g) {
        if (ui != null) {
            Grbphids sdrbtdhGrbphids = (g == null) ? null : g.drfbtf();
            try {
                ui.updbtf(sdrbtdhGrbphids, this);
            }
            finblly {
                sdrbtdhGrbphids.disposf();
            }
        }
    }

    /**
     * Pbints this domponfnt's dhildrfn.
     * If <dodf>shouldUsfBufffr</dodf> is truf,
     * no domponfnt bndfstor hbs b bufffr bnd
     * thf domponfnt dhildrfn dbn usf b bufffr if thfy hbvf onf.
     * Othfrwisf, onf bndfstor hbs b bufffr durrfntly in usf bnd dhildrfn
     * should not usf b bufffr to pbint.
     * @pbrbm g  thf <dodf>Grbphids</dodf> dontfxt in whidh to pbint
     * @sff #pbint
     * @sff jbvb.bwt.Contbinfr#pbint
     */
    protfdtfd void pbintChildrfn(Grbphids g) {
        Grbphids sg = g;

        syndhronizfd(gftTrffLodk()) {
            int i = gftComponfntCount() - 1;
            if (i < 0) {
                rfturn;
            }
            // If wf brf only to pbint to b spfdifid dhild, dftfrminf
            // its indfx.
            if (pbintingChild != null &&
                (pbintingChild instbndfof JComponfnt) &&
                pbintingChild.isOpbquf()) {
                for (; i >= 0; i--) {
                    if (gftComponfnt(i) == pbintingChild){
                        brfbk;
                    }
                }
            }
            Rfdtbnglf tmpRfdt = fftdhRfdtbnglf();
            boolfbn dhfdkSiblings = (!isOptimizfdDrbwingEnbblfd() &&
                                     dhfdkIfChildObsdurfdBySibling());
            Rfdtbnglf dlipBounds = null;
            if (dhfdkSiblings) {
                dlipBounds = sg.gftClipBounds();
                if (dlipBounds == null) {
                    dlipBounds = nfw Rfdtbnglf(0, 0, gftWidth(),
                                               gftHfight());
                }
            }
            boolfbn printing = gftFlbg(IS_PRINTING);
            finbl Window window = SwingUtilitifs.gftWindowAndfstor(this);
            finbl boolfbn isWindowOpbquf = window == null || window.isOpbquf();
            for (; i >= 0 ; i--) {
                Componfnt domp = gftComponfnt(i);
                if (domp == null) {
                    dontinuf;
                }

                finbl boolfbn isJComponfnt = domp instbndfof JComponfnt;

                // Enbblf pbinting of hfbvywfights in non-opbquf windows.
                // Sff 6884960
                if ((!isWindowOpbquf || isJComponfnt ||
                            isLightwfightComponfnt(domp)) && domp.isVisiblf())
                {
                    Rfdtbnglf dr;

                    dr = domp.gftBounds(tmpRfdt);

                    boolfbn hitClip = g.hitClip(dr.x, dr.y, dr.width,
                                                dr.hfight);

                    if (hitClip) {
                        if (dhfdkSiblings && i > 0) {
                            int x = dr.x;
                            int y = dr.y;
                            int width = dr.width;
                            int hfight = dr.hfight;
                            SwingUtilitifs.domputfIntfrsfdtion
                                (dlipBounds.x, dlipBounds.y,
                                 dlipBounds.width, dlipBounds.hfight, dr);

                            if(gftObsdurfdStbtf(i, dr.x, dr.y, dr.width,
                                          dr.hfight) == COMPLETELY_OBSCURED) {
                                dontinuf;
                            }
                            dr.x = x;
                            dr.y = y;
                            dr.width = width;
                            dr.hfight = hfight;
                        }
                        Grbphids dg = sg.drfbtf(dr.x, dr.y, dr.width,
                                                dr.hfight);
                        dg.sftColor(domp.gftForfground());
                        dg.sftFont(domp.gftFont());
                        boolfbn shouldSftFlbgBbdk = fblsf;
                        try {
                            if(isJComponfnt) {
                                if(gftFlbg(ANCESTOR_USING_BUFFER)) {
                                    ((JComponfnt)domp).sftFlbg(
                                                 ANCESTOR_USING_BUFFER,truf);
                                    shouldSftFlbgBbdk = truf;
                                }
                                if(gftFlbg(IS_PAINTING_TILE)) {
                                    ((JComponfnt)domp).sftFlbg(
                                                 IS_PAINTING_TILE,truf);
                                    shouldSftFlbgBbdk = truf;
                                }
                                if(!printing) {
                                    domp.pbint(dg);
                                }
                                flsf {
                                    if (!gftFlbg(IS_PRINTING_ALL)) {
                                        domp.print(dg);
                                    }
                                    flsf {
                                        domp.printAll(dg);
                                    }
                                }
                            } flsf {
                                // Thf domponfnt is fithfr lightwfight, or
                                // hfbvywfight in b non-opbquf window
                                if (!printing) {
                                    domp.pbint(dg);
                                }
                                flsf {
                                    if (!gftFlbg(IS_PRINTING_ALL)) {
                                        domp.print(dg);
                                    }
                                    flsf {
                                        domp.printAll(dg);
                                    }
                                }
                            }
                        } finblly {
                            dg.disposf();
                            if(shouldSftFlbgBbdk) {
                                ((JComponfnt)domp).sftFlbg(
                                             ANCESTOR_USING_BUFFER,fblsf);
                                ((JComponfnt)domp).sftFlbg(
                                             IS_PAINTING_TILE,fblsf);
                            }
                        }
                    }
                }

            }
            rfdydlfRfdtbnglf(tmpRfdt);
        }
    }

    /**
     * Pbints thf domponfnt's bordfr.
     * <p>
     * If you ovfrridf this in b subdlbss you should not mbkf pfrmbnfnt
     * dhbngfs to thf pbssfd in <dodf>Grbphids</dodf>. For fxbmplf, you
     * should not bltfr thf dlip <dodf>Rfdtbnglf</dodf> or modify thf
     * trbnsform. If you nffd to do thfsf opfrbtions you mby find it
     * fbsifr to drfbtf b nfw <dodf>Grbphids</dodf> from thf pbssfd in
     * <dodf>Grbphids</dodf> bnd mbnipulbtf it.
     *
     * @pbrbm g  thf <dodf>Grbphids</dodf> dontfxt in whidh to pbint
     *
     * @sff #pbint
     * @sff #sftBordfr
     */
    protfdtfd void pbintBordfr(Grbphids g) {
        Bordfr bordfr = gftBordfr();
        if (bordfr != null) {
            bordfr.pbintBordfr(this, g, 0, 0, gftWidth(), gftHfight());
        }
    }


    /**
     * Cblls <dodf>pbint</dodf>.  Dofsn't dlfbr thf bbdkground but sff
     * <dodf>ComponfntUI.updbtf</dodf>, whidh is dbllfd by
     * <dodf>pbintComponfnt</dodf>.
     *
     * @pbrbm g thf <dodf>Grbphids</dodf> dontfxt in whidh to pbint
     * @sff #pbint
     * @sff #pbintComponfnt
     * @sff jbvbx.swing.plbf.ComponfntUI
     */
    publid void updbtf(Grbphids g) {
        pbint(g);
    }


    /**
     * Invokfd by Swing to drbw domponfnts.
     * Applidbtions should not invokf <dodf>pbint</dodf> dirfdtly,
     * but should instfbd usf thf <dodf>rfpbint</dodf> mfthod to
     * sdhfdulf thf domponfnt for rfdrbwing.
     * <p>
     * This mfthod bdtublly dflfgbtfs thf work of pbinting to thrff
     * protfdtfd mfthods: <dodf>pbintComponfnt</dodf>,
     * <dodf>pbintBordfr</dodf>,
     * bnd <dodf>pbintChildrfn</dodf>.  Thfy'rf dbllfd in thf ordfr
     * listfd to fnsurf thbt dhildrfn bppfbr on top of domponfnt itsflf.
     * Gfnfrblly spfbking, thf domponfnt bnd its dhildrfn should not
     * pbint in thf insfts brfb bllodbtfd to thf bordfr. Subdlbssfs dbn
     * just ovfrridf this mfthod, bs blwbys.  A subdlbss thbt just
     * wbnts to spfdiblizf thf UI (look bnd fffl) dflfgbtf's
     * <dodf>pbint</dodf> mfthod should just ovfrridf
     * <dodf>pbintComponfnt</dodf>.
     *
     * @pbrbm g  thf <dodf>Grbphids</dodf> dontfxt in whidh to pbint
     * @sff #pbintComponfnt
     * @sff #pbintBordfr
     * @sff #pbintChildrfn
     * @sff #gftComponfntGrbphids
     * @sff #rfpbint
     */
    publid void pbint(Grbphids g) {
        boolfbn shouldClfbrPbintFlbgs = fblsf;

        if ((gftWidth() <= 0) || (gftHfight() <= 0)) {
            rfturn;
        }

        Grbphids domponfntGrbphids = gftComponfntGrbphids(g);
        Grbphids do = domponfntGrbphids.drfbtf();
        try {
            RfpbintMbnbgfr rfpbintMbnbgfr = RfpbintMbnbgfr.durrfntMbnbgfr(this);
            Rfdtbnglf dlipRfdt = do.gftClipBounds();
            int dlipX;
            int dlipY;
            int dlipW;
            int dlipH;
            if (dlipRfdt == null) {
                dlipX = dlipY = 0;
                dlipW = gftWidth();
                dlipH = gftHfight();
            }
            flsf {
                dlipX = dlipRfdt.x;
                dlipY = dlipRfdt.y;
                dlipW = dlipRfdt.width;
                dlipH = dlipRfdt.hfight;
            }

            if(dlipW > gftWidth()) {
                dlipW = gftWidth();
            }
            if(dlipH > gftHfight()) {
                dlipH = gftHfight();
            }

            if(gftPbrfnt() != null && !(gftPbrfnt() instbndfof JComponfnt)) {
                bdjustPbintFlbgs();
                shouldClfbrPbintFlbgs = truf;
            }

            int bw,bh;
            boolfbn printing = gftFlbg(IS_PRINTING);
            if (!printing && rfpbintMbnbgfr.isDoublfBufffringEnbblfd() &&
                !gftFlbg(ANCESTOR_USING_BUFFER) && isDoublfBufffrfd() &&
                (gftFlbg(IS_REPAINTING) || rfpbintMbnbgfr.isPbinting()))
            {
                rfpbintMbnbgfr.bfginPbint();
                try {
                    rfpbintMbnbgfr.pbint(this, this, do, dlipX, dlipY, dlipW,
                                         dlipH);
                } finblly {
                    rfpbintMbnbgfr.fndPbint();
                }
            }
            flsf {
                // Will odbssionbly hbppfn in 1.2, fspfdiblly whfn printing.
                if (dlipRfdt == null) {
                    do.sftClip(dlipX, dlipY, dlipW, dlipH);
                }

                if (!rfdtbnglfIsObsdurfd(dlipX,dlipY,dlipW,dlipH)) {
                    if (!printing) {
                        pbintComponfnt(do);
                        pbintBordfr(do);
                    }
                    flsf {
                        printComponfnt(do);
                        printBordfr(do);
                    }
                }
                if (!printing) {
                    pbintChildrfn(do);
                }
                flsf {
                    printChildrfn(do);
                }
            }
        } finblly {
            do.disposf();
            if(shouldClfbrPbintFlbgs) {
                sftFlbg(ANCESTOR_USING_BUFFER,fblsf);
                sftFlbg(IS_PAINTING_TILE,fblsf);
                sftFlbg(IS_PRINTING,fblsf);
                sftFlbg(IS_PRINTING_ALL,fblsf);
            }
        }
    }

    // pbint fording usf of thf doublf bufffr.  This is usfd for historidbl
    // rfbsons: JVifwport, whfn sdrolling, prfviously dirfdtly invokfd pbint
    // whilf turning off doublf bufffring bt thf RfpbintMbnbgfr lfvfl, this
    // dodfs simulbtfs thbt.
    void pbintFordfDoublfBufffrfd(Grbphids g) {
        RfpbintMbnbgfr rm = RfpbintMbnbgfr.durrfntMbnbgfr(this);
        Rfdtbnglf dlip = g.gftClipBounds();
        rm.bfginPbint();
        sftFlbg(IS_REPAINTING, truf);
        try {
            rm.pbint(this, this, g, dlip.x, dlip.y, dlip.width, dlip.hfight);
        } finblly {
            rm.fndPbint();
            sftFlbg(IS_REPAINTING, fblsf);
        }
    }

    /**
     * Rfturns truf if this domponfnt, or bny of its bndfstors, brf in
     * thf prodfssing of pbinting.
     */
    boolfbn isPbinting() {
        Contbinfr domponfnt = this;
        whilf (domponfnt != null) {
            if (domponfnt instbndfof JComponfnt &&
                   ((JComponfnt)domponfnt).gftFlbg(ANCESTOR_USING_BUFFER)) {
                rfturn truf;
            }
            domponfnt = domponfnt.gftPbrfnt();
        }
        rfturn fblsf;
    }

    privbtf void bdjustPbintFlbgs() {
        JComponfnt jpbrfnt;
        Contbinfr pbrfnt;
        for(pbrfnt = gftPbrfnt() ; pbrfnt != null ; pbrfnt =
            pbrfnt.gftPbrfnt()) {
            if(pbrfnt instbndfof JComponfnt) {
                jpbrfnt = (JComponfnt) pbrfnt;
                if(jpbrfnt.gftFlbg(ANCESTOR_USING_BUFFER))
                  sftFlbg(ANCESTOR_USING_BUFFER, truf);
                if(jpbrfnt.gftFlbg(IS_PAINTING_TILE))
                  sftFlbg(IS_PAINTING_TILE, truf);
                if(jpbrfnt.gftFlbg(IS_PRINTING))
                  sftFlbg(IS_PRINTING, truf);
                if(jpbrfnt.gftFlbg(IS_PRINTING_ALL))
                  sftFlbg(IS_PRINTING_ALL, truf);
                brfbk;
            }
        }
    }

    /**
     * Invokf this mfthod to print thf domponfnt. This mfthod invokfs
     * <dodf>print</dodf> on thf domponfnt.
     *
     * @pbrbm g thf <dodf>Grbphids</dodf> dontfxt in whidh to pbint
     * @sff #print
     * @sff #printComponfnt
     * @sff #printBordfr
     * @sff #printChildrfn
     */
    publid void printAll(Grbphids g) {
        sftFlbg(IS_PRINTING_ALL, truf);
        try {
            print(g);
        }
        finblly {
            sftFlbg(IS_PRINTING_ALL, fblsf);
        }
    }

    /**
     * Invokf this mfthod to print thf domponfnt to thf spfdififd
     * <dodf>Grbphids</dodf>. This mfthod will rfsult in invodbtions
     * of <dodf>printComponfnt</dodf>, <dodf>printBordfr</dodf> bnd
     * <dodf>printChildrfn</dodf>. It is rfdommfndfd thbt you ovfrridf
     * onf of thf prfviously mfntionfd mfthods rbthfr thbn this onf if
     * your intfntion is to dustomizf thf wby printing looks. Howfvfr,
     * it dbn bf usfful to ovfrridf this mfthod should you wbnt to prfpbrf
     * stbtf bfforf invoking thf supfrdlbss bfhbvior. As bn fxbmplf,
     * if you wbntfd to dhbngf thf domponfnt's bbdkground dolor bfforf
     * printing, you dould do thf following:
     * <prf>
     *     publid void print(Grbphids g) {
     *         Color orig = gftBbdkground();
     *         sftBbdkground(Color.WHITE);
     *
     *         // wrbp in try/finblly so thbt wf blwbys rfstorf thf stbtf
     *         try {
     *             supfr.print(g);
     *         } finblly {
     *             sftBbdkground(orig);
     *         }
     *     }
     * </prf>
     * <p>
     * Altfrnbtivfly, or for domponfnts thbt dflfgbtf pbinting to othfr objfdts,
     * you dbn qufry during pbinting whfthfr or not thf domponfnt is in thf
     * midst of b print opfrbtion. Thf <dodf>isPbintingForPrint</dodf> mfthod providfs
     * this bbility bnd its rfturn vbluf will bf dhbngfd by this mfthod: to
     * <dodf>truf</dodf> immfdibtfly bfforf rfndfring bnd to <dodf>fblsf</dodf>
     * immfdibtfly bftfr. With fbdh dhbngf b propfrty dhbngf fvfnt is firfd on
     * this domponfnt with thf nbmf <dodf>"pbintingForPrint"</dodf>.
     * <p>
     * This mfthod sfts thf domponfnt's stbtf sudh thbt thf doublf bufffr
     * will not bf usfd: pbinting will bf donf dirfdtly on thf pbssfd in
     * <dodf>Grbphids</dodf>.
     *
     * @pbrbm g thf <dodf>Grbphids</dodf> dontfxt in whidh to pbint
     * @sff #printComponfnt
     * @sff #printBordfr
     * @sff #printChildrfn
     * @sff #isPbintingForPrint
     */
    publid void print(Grbphids g) {
        sftFlbg(IS_PRINTING, truf);
        firfPropfrtyChbngf("pbintingForPrint", fblsf, truf);
        try {
            pbint(g);
        }
        finblly {
            sftFlbg(IS_PRINTING, fblsf);
            firfPropfrtyChbngf("pbintingForPrint", truf, fblsf);
        }
    }

    /**
     * This is invokfd during b printing opfrbtion. This is implfmfntfd to
     * invokf <dodf>pbintComponfnt</dodf> on thf domponfnt. Ovfrridf this
     * if you wish to bdd spfdibl pbinting bfhbvior whfn printing.
     *
     * @pbrbm g thf <dodf>Grbphids</dodf> dontfxt in whidh to pbint
     * @sff #print
     * @sindf 1.3
     */
    protfdtfd void printComponfnt(Grbphids g) {
        pbintComponfnt(g);
    }

    /**
     * Prints this domponfnt's dhildrfn. This is implfmfntfd to invokf
     * <dodf>pbintChildrfn</dodf> on thf domponfnt. Ovfrridf this if you
     * wish to print thf dhildrfn difffrfntly thbn pbinting.
     *
     * @pbrbm g thf <dodf>Grbphids</dodf> dontfxt in whidh to pbint
     * @sff #print
     * @sindf 1.3
     */
    protfdtfd void printChildrfn(Grbphids g) {
        pbintChildrfn(g);
    }

    /**
     * Prints thf domponfnt's bordfr. This is implfmfntfd to invokf
     * <dodf>pbintBordfr</dodf> on thf domponfnt. Ovfrridf this if you
     * wish to print thf bordfr difffrfntly thbt it is pbintfd.
     *
     * @pbrbm g thf <dodf>Grbphids</dodf> dontfxt in whidh to pbint
     * @sff #print
     * @sindf 1.3
     */
    protfdtfd void printBordfr(Grbphids g) {
        pbintBordfr(g);
    }

    /**
     *  Rfturns truf if thf domponfnt is durrfntly pbinting b tilf.
     *  If this mfthod rfturns truf, pbint will bf dbllfd bgbin for bnothfr
     *  tilf. This mfthod rfturns fblsf if you brf not pbinting b tilf or
     *  if thf lbst tilf is pbintfd.
     *  Usf this mfthod to kffp somf stbtf you might nffd bftwffn tilfs.
     *
     *  @rfturn  truf if thf domponfnt is durrfntly pbinting b tilf,
     *          fblsf othfrwisf
     */
    publid boolfbn isPbintingTilf() {
        rfturn gftFlbg(IS_PAINTING_TILE);
    }

    /**
     * Rfturns <dodf>truf</dodf> if thf durrfnt pbinting opfrbtion on this
     * domponfnt is pbrt of b <dodf>print</dodf> opfrbtion. This mfthod is
     * usfful whfn you wbnt to dustomizf whbt you print vfrsus whbt you show
     * on thf sdrffn.
     * <p>
     * You dbn dftfdt dhbngfs in thf vbluf of this propfrty by listfning for
     * propfrty dhbngf fvfnts on this domponfnt with nbmf
     * <dodf>"pbintingForPrint"</dodf>.
     * <p>
     * Notf: This mfthod providfs domplimfntbry fundtionblity to thbt providfd
     * by othfr high lfvfl Swing printing APIs. Howfvfr, it dfbls stridtly with
     * pbinting bnd should not bf donfusfd bs providing informbtion on highfr
     * lfvfl print prodfssfs. For fxbmplf, b {@link jbvbx.swing.JTbblf#print()}
     * opfrbtion dofsn't nfdfssbrily rfsult in b dontinuous rfndfring of thf
     * full domponfnt, bnd thf rfturn vbluf of this mfthod dbn dhbngf multiplf
     * timfs during thbt opfrbtion. It is fvfn possiblf for thf domponfnt to bf
     * pbintfd to thf sdrffn whilf thf printing prodfss is ongoing. In sudh b
     * dbsf, thf rfturn vbluf of this mfthod is <dodf>truf</dodf> whfn, bnd only
     * whfn, thf tbblf is bfing pbintfd bs pbrt of thf printing prodfss.
     *
     * @rfturn truf if thf durrfnt pbinting opfrbtion on this domponfnt
     *         is pbrt of b print opfrbtion
     * @sff #print
     * @sindf 1.6
     */
    publid finbl boolfbn isPbintingForPrint() {
        rfturn gftFlbg(IS_PRINTING);
    }

    /**
     * In rflfbsf 1.4, thf fodus subsystfm wbs rfbrdhitfdtfd.
     * For morf informbtion, sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
     * How to Usf thf Fodus Subsystfm</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
     * <p>
     * Chbngfs this <dodf>JComponfnt</dodf>'s fodus trbvfrsbl kfys to
     * CTRL+TAB bnd CTRL+SHIFT+TAB. Also prfvfnts
     * <dodf>SortingFodusTrbvfrsblPolidy</dodf> from donsidfring dfsdfndbnts
     * of this JComponfnt whfn domputing b fodus trbvfrsbl dydlf.
     *
     * @rfturn fblsf
     * @sff jbvb.bwt.Componfnt#sftFodusTrbvfrsblKfys
     * @sff SortingFodusTrbvfrsblPolidy
     * @dfprfdbtfd As of 1.4, rfplbdfd by
     *   <dodf>Componfnt.sftFodusTrbvfrsblKfys(int, Sft)</dodf> bnd
     *   <dodf>Contbinfr.sftFodusCydlfRoot(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid boolfbn isMbnbgingFodus() {
        rfturn fblsf;
    }

    privbtf void rfgistfrNfxtFodusbblfComponfnt() {
        rfgistfrNfxtFodusbblfComponfnt(gftNfxtFodusbblfComponfnt());
    }

    privbtf void rfgistfrNfxtFodusbblfComponfnt(Componfnt
                                                nfxtFodusbblfComponfnt) {
        if (nfxtFodusbblfComponfnt == null) {
            rfturn;
        }

        Contbinfr nfbrfstRoot =
            (isFodusCydlfRoot()) ? this : gftFodusCydlfRootAndfstor();
        FodusTrbvfrsblPolidy polidy = nfbrfstRoot.gftFodusTrbvfrsblPolidy();
        if (!(polidy instbndfof LfgbdyGlufFodusTrbvfrsblPolidy)) {
            polidy = nfw LfgbdyGlufFodusTrbvfrsblPolidy(polidy);
            nfbrfstRoot.sftFodusTrbvfrsblPolidy(polidy);
        }
        ((LfgbdyGlufFodusTrbvfrsblPolidy)polidy).
            sftNfxtFodusbblfComponfnt(this, nfxtFodusbblfComponfnt);
    }

    privbtf void dfrfgistfrNfxtFodusbblfComponfnt() {
        Componfnt nfxtFodusbblfComponfnt = gftNfxtFodusbblfComponfnt();
        if (nfxtFodusbblfComponfnt == null) {
            rfturn;
        }

        Contbinfr nfbrfstRoot =
            (isFodusCydlfRoot()) ? this : gftFodusCydlfRootAndfstor();
        if (nfbrfstRoot == null) {
            rfturn;
        }
        FodusTrbvfrsblPolidy polidy = nfbrfstRoot.gftFodusTrbvfrsblPolidy();
        if (polidy instbndfof LfgbdyGlufFodusTrbvfrsblPolidy) {
            ((LfgbdyGlufFodusTrbvfrsblPolidy)polidy).
                unsftNfxtFodusbblfComponfnt(this, nfxtFodusbblfComponfnt);
        }
    }

    /**
     * In rflfbsf 1.4, thf fodus subsystfm wbs rfbrdhitfdtfd.
     * For morf informbtion, sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
     * How to Usf thf Fodus Subsystfm</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
     * <p>
     * Ovfrridfs thf dffbult <dodf>FodusTrbvfrsblPolidy</dodf> for this
     * <dodf>JComponfnt</dodf>'s fodus trbvfrsbl dydlf by undonditionblly
     * sftting thf spfdififd <dodf>Componfnt</dodf> bs thf nfxt
     * <dodf>Componfnt</dodf> in thf dydlf, bnd this <dodf>JComponfnt</dodf>
     * bs thf spfdififd <dodf>Componfnt</dodf>'s prfvious
     * <dodf>Componfnt</dodf> in thf dydlf.
     *
     * @pbrbm bComponfnt thf <dodf>Componfnt</dodf> thbt should follow this
     *        <dodf>JComponfnt</dodf> in thf fodus trbvfrsbl dydlf
     *
     * @sff #gftNfxtFodusbblfComponfnt
     * @sff jbvb.bwt.FodusTrbvfrsblPolidy
     * @dfprfdbtfd As of 1.4, rfplbdfd by <dodf>FodusTrbvfrsblPolidy</dodf>
     */
    @Dfprfdbtfd
    publid void sftNfxtFodusbblfComponfnt(Componfnt bComponfnt) {
        boolfbn displbybblf = isDisplbybblf();
        if (displbybblf) {
            dfrfgistfrNfxtFodusbblfComponfnt();
        }
        putClifntPropfrty(NEXT_FOCUS, bComponfnt);
        if (displbybblf) {
            rfgistfrNfxtFodusbblfComponfnt(bComponfnt);
        }
    }

    /**
     * In rflfbsf 1.4, thf fodus subsystfm wbs rfbrdhitfdtfd.
     * For morf informbtion, sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
     * How to Usf thf Fodus Subsystfm</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
     * <p>
     * Rfturns thf <dodf>Componfnt</dodf> sft by b prior dbll to
     * <dodf>sftNfxtFodusbblfComponfnt(Componfnt)</dodf> on this
     * <dodf>JComponfnt</dodf>.
     *
     * @rfturn thf <dodf>Componfnt</dodf> thbt will follow this
     *        <dodf>JComponfnt</dodf> in thf fodus trbvfrsbl dydlf, or
     *        <dodf>null</dodf> if nonf hbs bffn fxpliditly spfdififd
     *
     * @sff #sftNfxtFodusbblfComponfnt
     * @dfprfdbtfd As of 1.4, rfplbdfd by <dodf>FodusTrbvfrsblPolidy</dodf>.
     */
    @Dfprfdbtfd
    publid Componfnt gftNfxtFodusbblfComponfnt() {
        rfturn (Componfnt)gftClifntPropfrty(NEXT_FOCUS);
    }

    /**
     * Providfs b hint bs to whfthfr or not this <dodf>JComponfnt</dodf>
     * should gft fodus. This is only b hint, bnd it is up to donsumfrs thbt
     * brf rfqufsting fodus to honor this propfrty. This is typidblly honorfd
     * for mousf opfrbtions, but not kfybobrd opfrbtions. For fxbmplf, look
     * bnd fffls dould vfrify this propfrty is truf bfforf rfqufsting fodus
     * during b mousf opfrbtion. This would oftfn timfs bf usfd if you did
     * not wbnt b mousf prfss on b <dodf>JComponfnt</dodf> to stfbl fodus,
     * but did wbnt thf <dodf>JComponfnt</dodf> to bf trbvfrsbblf vib thf
     * kfybobrd. If you do not wbnt this <dodf>JComponfnt</dodf> fodusbblf bt
     * bll, usf thf <dodf>sftFodusbblf</dodf> mfthod instfbd.
     * <p>
     * Plfbsf sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
     * How to Usf thf Fodus Subsystfm</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>,
     * for morf informbtion.
     *
     * @pbrbm rfqufstFodusEnbblfd indidbtfs whfthfr you wbnt this
     *        <dodf>JComponfnt</dodf> to bf fodusbblf or not
     * @sff <b hrff="../../jbvb/bwt/dod-filfs/FodusSpfd.html">Fodus Spfdifidbtion</b>
     * @sff jbvb.bwt.Componfnt#sftFodusbblf
     */
    publid void sftRfqufstFodusEnbblfd(boolfbn rfqufstFodusEnbblfd) {
        sftFlbg(REQUEST_FOCUS_DISABLED, !rfqufstFodusEnbblfd);
    }

    /**
     * Rfturns <dodf>truf</dodf> if this <dodf>JComponfnt</dodf> should
     * gft fodus; othfrwisf rfturns <dodf>fblsf</dodf>.
     * <p>
     * Plfbsf sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
     * How to Usf thf Fodus Subsystfm</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>,
     * for morf informbtion.
     *
     * @rfturn <dodf>truf</dodf> if this domponfnt should gft fodus,
     *     othfrwisf rfturns <dodf>fblsf</dodf>
     * @sff #sftRfqufstFodusEnbblfd
     * @sff <b hrff="../../jbvb/bwt/dod-filfs/FodusSpfd.html">Fodus
     *      Spfdifidbtion</b>
     * @sff jbvb.bwt.Componfnt#isFodusbblf
     */
    publid boolfbn isRfqufstFodusEnbblfd() {
        rfturn !gftFlbg(REQUEST_FOCUS_DISABLED);
    }

    /**
     * Rfqufsts thbt this <dodf>Componfnt</dodf> gfts thf input fodus.
     * Rfffr to {@link jbvb.bwt.Componfnt#rfqufstFodus()
     * Componfnt.rfqufstFodus()} for b domplftf dfsdription of
     * this mfthod.
     * <p>
     * Notf thbt thf usf of this mfthod is disdourbgfd bfdbusf
     * its bfhbvior is plbtform dfpfndfnt. Instfbd wf rfdommfnd thf
     * usf of {@link #rfqufstFodusInWindow() rfqufstFodusInWindow()}.
     * If you would likf morf informbtion on fodus, sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
     * How to Usf thf Fodus Subsystfm</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
     *
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow()
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow(boolfbn)
     * @sindf 1.4
     */
    publid void rfqufstFodus() {
        supfr.rfqufstFodus();
    }

    /**
     * Rfqufsts thbt this <dodf>Componfnt</dodf> gfts thf input fodus.
     * Rfffr to {@link jbvb.bwt.Componfnt#rfqufstFodus(boolfbn)
     * Componfnt.rfqufstFodus(boolfbn)} for b domplftf dfsdription of
     * this mfthod.
     * <p>
     * Notf thbt thf usf of this mfthod is disdourbgfd bfdbusf
     * its bfhbvior is plbtform dfpfndfnt. Instfbd wf rfdommfnd thf
     * usf of {@link #rfqufstFodusInWindow(boolfbn)
     * rfqufstFodusInWindow(boolfbn)}.
     * If you would likf morf informbtion on fodus, sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
     * How to Usf thf Fodus Subsystfm</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
     *
     * @pbrbm tfmporbry boolfbn indidbting if thf fodus dhbngf is tfmporbry
     * @rfturn <dodf>fblsf</dodf> if thf fodus dhbngf rfqufst is gubrbntffd to
     *         fbil; <dodf>truf</dodf> if it is likfly to suddffd
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow()
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow(boolfbn)
     * @sindf 1.4
     */
    publid boolfbn rfqufstFodus(boolfbn tfmporbry) {
        rfturn supfr.rfqufstFodus(tfmporbry);
    }

    /**
     * Rfqufsts thbt this <dodf>Componfnt</dodf> gfts thf input fodus.
     * Rfffr to {@link jbvb.bwt.Componfnt#rfqufstFodusInWindow()
     * Componfnt.rfqufstFodusInWindow()} for b domplftf dfsdription of
     * this mfthod.
     * <p>
     * If you would likf morf informbtion on fodus, sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
     * How to Usf thf Fodus Subsystfm</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
     *
     * @rfturn <dodf>fblsf</dodf> if thf fodus dhbngf rfqufst is gubrbntffd to
     *         fbil; <dodf>truf</dodf> if it is likfly to suddffd
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow()
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow(boolfbn)
     * @sindf 1.4
     */
    publid boolfbn rfqufstFodusInWindow() {
        rfturn supfr.rfqufstFodusInWindow();
    }

    /**
     * Rfqufsts thbt this <dodf>Componfnt</dodf> gfts thf input fodus.
     * Rfffr to {@link jbvb.bwt.Componfnt#rfqufstFodusInWindow(boolfbn)
     * Componfnt.rfqufstFodusInWindow(boolfbn)} for b domplftf dfsdription of
     * this mfthod.
     * <p>
     * If you would likf morf informbtion on fodus, sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
     * How to Usf thf Fodus Subsystfm</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
     *
     * @pbrbm tfmporbry boolfbn indidbting if thf fodus dhbngf is tfmporbry
     * @rfturn <dodf>fblsf</dodf> if thf fodus dhbngf rfqufst is gubrbntffd to
     *         fbil; <dodf>truf</dodf> if it is likfly to suddffd
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow()
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow(boolfbn)
     * @sindf 1.4
     */
    protfdtfd boolfbn rfqufstFodusInWindow(boolfbn tfmporbry) {
        rfturn supfr.rfqufstFodusInWindow(tfmporbry);
    }

    /**
     * Rfqufsts thbt this Componfnt gft thf input fodus, bnd thbt this
     * Componfnt's top-lfvfl bndfstor bfdomf thf fodusfd Window. This domponfnt
     * must bf displbybblf, visiblf, bnd fodusbblf for thf rfqufst to bf
     * grbntfd.
     * <p>
     * This mfthod is intfndfd for usf by fodus implfmfntbtions. Clifnt dodf
     * should not usf this mfthod; instfbd, it should usf
     * <dodf>rfqufstFodusInWindow()</dodf>.
     *
     * @sff #rfqufstFodusInWindow()
     */
    publid void grbbFodus() {
        rfqufstFodus();
    }

    /**
     * Sfts thf vbluf to indidbtf whfthfr input vfrififr for thf
     * durrfnt fodus ownfr will bf dbllfd bfforf this domponfnt rfqufsts
     * fodus. Thf dffbult is truf. Sft to fblsf on domponfnts sudh bs b
     * Cbndfl button or b sdrollbbr, whidh should bdtivbtf fvfn if thf
     * input in thf durrfnt fodus ownfr is not "pbssfd" by thf input
     * vfrififr for thbt domponfnt.
     *
     * @pbrbm vfrifyInputWhfnFodusTbrgft vbluf for thf
     *        <dodf>vfrifyInputWhfnFodusTbrgft</dodf> propfrty
     * @sff InputVfrififr
     * @sff #sftInputVfrififr
     * @sff #gftInputVfrififr
     * @sff #gftVfrifyInputWhfnFodusTbrgft
     *
     * @sindf 1.3
     * @bfbninfo
     *       bound: truf
     * dfsdription: Whfthfr thf Componfnt vfrififs input bfforf bddfpting
     *              fodus.
     */
    publid void sftVfrifyInputWhfnFodusTbrgft(boolfbn
                                              vfrifyInputWhfnFodusTbrgft) {
        boolfbn oldVfrifyInputWhfnFodusTbrgft =
            this.vfrifyInputWhfnFodusTbrgft;
        this.vfrifyInputWhfnFodusTbrgft = vfrifyInputWhfnFodusTbrgft;
        firfPropfrtyChbngf("vfrifyInputWhfnFodusTbrgft",
                           oldVfrifyInputWhfnFodusTbrgft,
                           vfrifyInputWhfnFodusTbrgft);
    }

    /**
     * Rfturns thf vbluf thbt indidbtfs whfthfr thf input vfrififr for thf
     * durrfnt fodus ownfr will bf dbllfd bfforf this domponfnt rfqufsts
     * fodus.
     *
     * @rfturn vbluf of thf <dodf>vfrifyInputWhfnFodusTbrgft</dodf> propfrty
     *
     * @sff InputVfrififr
     * @sff #sftInputVfrififr
     * @sff #gftInputVfrififr
     * @sff #sftVfrifyInputWhfnFodusTbrgft
     *
     * @sindf 1.3
     */
    publid boolfbn gftVfrifyInputWhfnFodusTbrgft() {
        rfturn vfrifyInputWhfnFodusTbrgft;
    }


    /**
     * Gfts thf <dodf>FontMftrids</dodf> for thf spfdififd <dodf>Font</dodf>.
     *
     * @pbrbm font thf font for whidh font mftrids is to bf
     *          obtbinfd
     * @rfturn thf font mftrids for <dodf>font</dodf>
     * @throws NullPointfrExdfption if <dodf>font</dodf> is null
     * @sindf 1.5
     */
    publid FontMftrids gftFontMftrids(Font font) {
        rfturn SwingUtilitifs2.gftFontMftrids(this, font);
    }


    /**
     * Sfts thf prfffrrfd sizf of this domponfnt.
     * If <dodf>prfffrrfdSizf</dodf> is <dodf>null</dodf>, thf UI will
     * bf bskfd for thf prfffrrfd sizf.
     * @bfbninfo
     *   prfffrrfd: truf
     *       bound: truf
     * dfsdription: Thf prfffrrfd sizf of thf domponfnt.
     */
    publid void sftPrfffrrfdSizf(Dimfnsion prfffrrfdSizf) {
        supfr.sftPrfffrrfdSizf(prfffrrfdSizf);
    }


    /**
     * If thf <dodf>prfffrrfdSizf</dodf> hbs bffn sft to b
     * non-<dodf>null</dodf> vbluf just rfturns it.
     * If thf UI dflfgbtf's <dodf>gftPrfffrrfdSizf</dodf>
     * mfthod rfturns b non <dodf>null</dodf> vbluf thfn rfturn thbt;
     * othfrwisf dfffr to thf domponfnt's lbyout mbnbgfr.
     *
     * @rfturn thf vbluf of thf <dodf>prfffrrfdSizf</dodf> propfrty
     * @sff #sftPrfffrrfdSizf
     * @sff ComponfntUI
     */
    @Trbnsifnt
    publid Dimfnsion gftPrfffrrfdSizf() {
        if (isPrfffrrfdSizfSft()) {
            rfturn supfr.gftPrfffrrfdSizf();
        }
        Dimfnsion sizf = null;
        if (ui != null) {
            sizf = ui.gftPrfffrrfdSizf(this);
        }
        rfturn (sizf != null) ? sizf : supfr.gftPrfffrrfdSizf();
    }


    /**
     * Sfts thf mbximum sizf of this domponfnt to b donstbnt
     * vbluf.  Subsfqufnt dblls to <dodf>gftMbximumSizf</dodf> will blwbys
     * rfturn this vbluf; thf domponfnt's UI will not bf bskfd
     * to domputf it.  Sftting thf mbximum sizf to <dodf>null</dodf>
     * rfstorfs thf dffbult bfhbvior.
     *
     * @pbrbm mbximumSizf b <dodf>Dimfnsion</dodf> dontbining thf
     *          dfsirfd mbximum bllowbblf sizf
     * @sff #gftMbximumSizf
     * @bfbninfo
     *       bound: truf
     * dfsdription: Thf mbximum sizf of thf domponfnt.
     */
    publid void sftMbximumSizf(Dimfnsion mbximumSizf) {
        supfr.sftMbximumSizf(mbximumSizf);
    }


    /**
     * If thf mbximum sizf hbs bffn sft to b non-<dodf>null</dodf> vbluf
     * just rfturns it.  If thf UI dflfgbtf's <dodf>gftMbximumSizf</dodf>
     * mfthod rfturns b non-<dodf>null</dodf> vbluf thfn rfturn thbt;
     * othfrwisf dfffr to thf domponfnt's lbyout mbnbgfr.
     *
     * @rfturn thf vbluf of thf <dodf>mbximumSizf</dodf> propfrty
     * @sff #sftMbximumSizf
     * @sff ComponfntUI
     */
    @Trbnsifnt
    publid Dimfnsion gftMbximumSizf() {
        if (isMbximumSizfSft()) {
            rfturn supfr.gftMbximumSizf();
        }
        Dimfnsion sizf = null;
        if (ui != null) {
            sizf = ui.gftMbximumSizf(this);
        }
        rfturn (sizf != null) ? sizf : supfr.gftMbximumSizf();
    }


    /**
     * Sfts thf minimum sizf of this domponfnt to b donstbnt
     * vbluf.  Subsfqufnt dblls to <dodf>gftMinimumSizf</dodf> will blwbys
     * rfturn this vbluf; thf domponfnt's UI will not bf bskfd
     * to domputf it.  Sftting thf minimum sizf to <dodf>null</dodf>
     * rfstorfs thf dffbult bfhbvior.
     *
     * @pbrbm minimumSizf thf nfw minimum sizf of this domponfnt
     * @sff #gftMinimumSizf
     * @bfbninfo
     *       bound: truf
     * dfsdription: Thf minimum sizf of thf domponfnt.
     */
    publid void sftMinimumSizf(Dimfnsion minimumSizf) {
        supfr.sftMinimumSizf(minimumSizf);
    }

    /**
     * If thf minimum sizf hbs bffn sft to b non-<dodf>null</dodf> vbluf
     * just rfturns it.  If thf UI dflfgbtf's <dodf>gftMinimumSizf</dodf>
     * mfthod rfturns b non-<dodf>null</dodf> vbluf thfn rfturn thbt; othfrwisf
     * dfffr to thf domponfnt's lbyout mbnbgfr.
     *
     * @rfturn thf vbluf of thf <dodf>minimumSizf</dodf> propfrty
     * @sff #sftMinimumSizf
     * @sff ComponfntUI
     */
    @Trbnsifnt
    publid Dimfnsion gftMinimumSizf() {
        if (isMinimumSizfSft()) {
            rfturn supfr.gftMinimumSizf();
        }
        Dimfnsion sizf = null;
        if (ui != null) {
            sizf = ui.gftMinimumSizf(this);
        }
        rfturn (sizf != null) ? sizf : supfr.gftMinimumSizf();
    }

    /**
     * Givfs thf UI dflfgbtf bn opportunity to dffinf thf prfdisf
     * shbpf of this domponfnt for thf sbkf of mousf prodfssing.
     *
     * @rfturn truf if this domponfnt logidblly dontbins x,y
     * @sff jbvb.bwt.Componfnt#dontbins(int, int)
     * @sff ComponfntUI
     */
    publid boolfbn dontbins(int x, int y) {
        rfturn (ui != null) ? ui.dontbins(this, x, y) : supfr.dontbins(x, y);
    }

    /**
     * Sfts thf bordfr of this domponfnt.  Thf <dodf>Bordfr</dodf> objfdt is
     * rfsponsiblf for dffining thf insfts for thf domponfnt
     * (ovfrriding bny insfts sft dirfdtly on thf domponfnt) bnd
     * for optionblly rfndfring bny bordfr dfdorbtions within thf
     * bounds of thosf insfts.  Bordfrs should bf usfd (rbthfr
     * thbn insfts) for drfbting both dfdorbtivf bnd non-dfdorbtivf
     * (sudh bs mbrgins bnd pbdding) rfgions for b swing domponfnt.
     * Compound bordfrs dbn bf usfd to nfst multiplf bordfrs within b
     * singlf domponfnt.
     * <p>
     * Although tfdhnidblly you dbn sft thf bordfr on bny objfdt
     * thbt inhfrits from <dodf>JComponfnt</dodf>, thf look bnd
     * fffl implfmfntbtion of mbny stbndbrd Swing domponfnts
     * dofsn't work wfll with usfr-sft bordfrs.  In gfnfrbl,
     * whfn you wbnt to sft b bordfr on b stbndbrd Swing
     * domponfnt othfr thbn <dodf>JPbnfl</dodf> or <dodf>JLbbfl</dodf>,
     * wf rfdommfnd thbt you put thf domponfnt in b <dodf>JPbnfl</dodf>
     * bnd sft thf bordfr on thf <dodf>JPbnfl</dodf>.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm bordfr thf bordfr to bf rfndfrfd for this domponfnt
     * @sff Bordfr
     * @sff CompoundBordfr
     * @bfbninfo
     *        bound: truf
     *    prfffrrfd: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Thf domponfnt's bordfr.
     */
    publid void sftBordfr(Bordfr bordfr) {
        Bordfr         oldBordfr = this.bordfr;

        this.bordfr = bordfr;
        firfPropfrtyChbngf("bordfr", oldBordfr, bordfr);
        if (bordfr != oldBordfr) {
            if (bordfr == null || oldBordfr == null ||
                !(bordfr.gftBordfrInsfts(this).fqubls(oldBordfr.gftBordfrInsfts(this)))) {
                rfvblidbtf();
            }
            rfpbint();
        }
    }

    /**
     * Rfturns thf bordfr of this domponfnt or <dodf>null</dodf> if no
     * bordfr is durrfntly sft.
     *
     * @rfturn thf bordfr objfdt for this domponfnt
     * @sff #sftBordfr
     */
    publid Bordfr gftBordfr() {
        rfturn bordfr;
    }

    /**
     * If b bordfr hbs bffn sft on this domponfnt, rfturns thf
     * bordfr's insfts; othfrwisf dblls <dodf>supfr.gftInsfts</dodf>.
     *
     * @rfturn thf vbluf of thf insfts propfrty
     * @sff #sftBordfr
     */
    publid Insfts gftInsfts() {
        if (bordfr != null) {
            rfturn bordfr.gftBordfrInsfts(this);
        }
        rfturn supfr.gftInsfts();
    }

    /**
     * Rfturns bn <dodf>Insfts</dodf> objfdt dontbining this domponfnt's insft
     * vblufs.  Thf pbssfd-in <dodf>Insfts</dodf> objfdt will bf rfusfd
     * if possiblf.
     * Cblling mfthods dbnnot bssumf thbt thf sbmf objfdt will bf rfturnfd,
     * howfvfr.  All fxisting vblufs within this objfdt brf ovfrwrittfn.
     * If <dodf>insfts</dodf> is null, this will bllodbtf b nfw onf.
     *
     * @pbrbm insfts thf <dodf>Insfts</dodf> objfdt, whidh dbn bf rfusfd
     * @rfturn thf <dodf>Insfts</dodf> objfdt
     * @sff #gftInsfts
     * @bfbninfo
     *   fxpfrt: truf
     */
    publid Insfts gftInsfts(Insfts insfts) {
        if (insfts == null) {
            insfts = nfw Insfts(0, 0, 0, 0);
        }
        if (bordfr != null) {
            if (bordfr instbndfof AbstrbdtBordfr) {
                rfturn ((AbstrbdtBordfr)bordfr).gftBordfrInsfts(this, insfts);
            } flsf {
                // Cbn't rfusf bordfr insfts bfdbusf thf Bordfr intfrfbdf
                // dbn't bf fnhbndfd.
                rfturn bordfr.gftBordfrInsfts(this);
            }
        } flsf {
            // supfr.gftInsfts() blwbys rfturns bn Insfts objfdt with
            // bll of its vbluf zfrofd.  No nffd for b nfw objfdt hfrf.
            insfts.lfft = insfts.top = insfts.right = insfts.bottom = 0;
            rfturn insfts;
        }
    }

    /**
     * Ovfrridfs <dodf>Contbinfr.gftAlignmfntY</dodf> to rfturn
     * thf horizontbl blignmfnt.
     *
     * @rfturn thf vbluf of thf <dodf>blignmfntY</dodf> propfrty
     * @sff #sftAlignmfntY
     * @sff jbvb.bwt.Componfnt#gftAlignmfntY
     */
    publid flobt gftAlignmfntY() {
        if (isAlignmfntYSft) {
            rfturn blignmfntY;
        }
        rfturn supfr.gftAlignmfntY();
    }

    /**
     * Sfts thf thf horizontbl blignmfnt.
     *
     * @pbrbm blignmfntY  thf nfw horizontbl blignmfnt
     * @sff #gftAlignmfntY
     * @bfbninfo
     *   dfsdription: Thf prfffrrfd vfrtidbl blignmfnt of thf domponfnt.
     */
    publid void sftAlignmfntY(flobt blignmfntY) {
        this.blignmfntY = blignmfntY > 1.0f ? 1.0f : blignmfntY < 0.0f ? 0.0f : blignmfntY;
        isAlignmfntYSft = truf;
    }


    /**
     * Ovfrridfs <dodf>Contbinfr.gftAlignmfntX</dodf> to rfturn
     * thf vfrtidbl blignmfnt.
     *
     * @rfturn thf vbluf of thf <dodf>blignmfntX</dodf> propfrty
     * @sff #sftAlignmfntX
     * @sff jbvb.bwt.Componfnt#gftAlignmfntX
     */
    publid flobt gftAlignmfntX() {
        if (isAlignmfntXSft) {
            rfturn blignmfntX;
        }
        rfturn supfr.gftAlignmfntX();
    }

    /**
     * Sfts thf thf vfrtidbl blignmfnt.
     *
     * @pbrbm blignmfntX  thf nfw vfrtidbl blignmfnt
     * @sff #gftAlignmfntX
     * @bfbninfo
     *   dfsdription: Thf prfffrrfd horizontbl blignmfnt of thf domponfnt.
     */
    publid void sftAlignmfntX(flobt blignmfntX) {
        this.blignmfntX = blignmfntX > 1.0f ? 1.0f : blignmfntX < 0.0f ? 0.0f : blignmfntX;
        isAlignmfntXSft = truf;
    }

    /**
     * Sfts thf input vfrififr for this domponfnt.
     *
     * @pbrbm inputVfrififr thf nfw input vfrififr
     * @sindf 1.3
     * @sff InputVfrififr
     * @bfbninfo
     *       bound: truf
     * dfsdription: Thf domponfnt's input vfrififr.
     */
    publid void sftInputVfrififr(InputVfrififr inputVfrififr) {
        InputVfrififr oldInputVfrififr = (InputVfrififr)gftClifntPropfrty(
                                         JComponfnt_INPUT_VERIFIER);
        putClifntPropfrty(JComponfnt_INPUT_VERIFIER, inputVfrififr);
        firfPropfrtyChbngf("inputVfrififr", oldInputVfrififr, inputVfrififr);
    }

    /**
     * Rfturns thf input vfrififr for this domponfnt.
     *
     * @rfturn thf <dodf>inputVfrififr</dodf> propfrty
     * @sindf 1.3
     * @sff InputVfrififr
     */
    publid InputVfrififr gftInputVfrififr() {
        rfturn (InputVfrififr)gftClifntPropfrty(JComponfnt_INPUT_VERIFIER);
    }

    /**
     * Rfturns this domponfnt's grbphids dontfxt, whidh lfts you drbw
     * on b domponfnt. Usf this mfthod to gft b <dodf>Grbphids</dodf> objfdt bnd
     * thfn invokf opfrbtions on thbt objfdt to drbw on thf domponfnt.
     * @rfturn this domponfnts grbphids dontfxt
     */
    publid Grbphids gftGrbphids() {
        if (DEBUG_GRAPHICS_LOADED && shouldDfbugGrbphids() != 0) {
            DfbugGrbphids grbphids = nfw DfbugGrbphids(supfr.gftGrbphids(),
                                                       this);
            rfturn grbphids;
        }
        rfturn supfr.gftGrbphids();
    }


    /** Enbblfs or disbblfs dibgnostid informbtion bbout fvfry grbphids
      * opfrbtion pfrformfd within thf domponfnt or onf of its dhildrfn.
      *
      * @pbrbm dfbugOptions  dftfrminfs how thf domponfnt should displby
      *         thf informbtion;  onf of thf following options:
      * <ul>
      * <li>DfbugGrbphids.LOG_OPTION - dbusfs b tfxt mfssbgf to bf printfd.
      * <li>DfbugGrbphids.FLASH_OPTION - dbusfs thf drbwing to flbsh sfvfrbl
      * timfs.
      * <li>DfbugGrbphids.BUFFERED_OPTION - drfbtfs bn
      *         <dodf>ExtfrnblWindow</dodf> thbt displbys thf opfrbtions
      *         pfrformfd on thf Vifw's offsdrffn bufffr.
      * <li>DfbugGrbphids.NONE_OPTION disbblfs dfbugging.
      * <li>A vbluf of 0 dbusfs no dhbngfs to thf dfbugging options.
      * </ul>
      * <dodf>dfbugOptions</dodf> is bitwisf OR'd into thf durrfnt vbluf
      *
      * @bfbninfo
      *   prfffrrfd: truf
      *        fnum: NONE_OPTION DfbugGrbphids.NONE_OPTION
      *              LOG_OPTION DfbugGrbphids.LOG_OPTION
      *              FLASH_OPTION DfbugGrbphids.FLASH_OPTION
      *              BUFFERED_OPTION DfbugGrbphids.BUFFERED_OPTION
      * dfsdription: Dibgnostid options for grbphids opfrbtions.
      */
    publid void sftDfbugGrbphidsOptions(int dfbugOptions) {
        DfbugGrbphids.sftDfbugOptions(this, dfbugOptions);
    }

    /** Rfturns thf stbtf of grbphids dfbugging.
      *
      * @rfturn b bitwisf OR'd flbg of zfro or morf of thf following options:
      * <ul>
      * <li>DfbugGrbphids.LOG_OPTION - dbusfs b tfxt mfssbgf to bf printfd.
      * <li>DfbugGrbphids.FLASH_OPTION - dbusfs thf drbwing to flbsh sfvfrbl
      * timfs.
      * <li>DfbugGrbphids.BUFFERED_OPTION - drfbtfs bn
      *         <dodf>ExtfrnblWindow</dodf> thbt displbys thf opfrbtions
      *         pfrformfd on thf Vifw's offsdrffn bufffr.
      * <li>DfbugGrbphids.NONE_OPTION disbblfs dfbugging.
      * <li>A vbluf of 0 dbusfs no dhbngfs to thf dfbugging options.
      * </ul>
      * @sff #sftDfbugGrbphidsOptions
      */
    publid int gftDfbugGrbphidsOptions() {
        rfturn DfbugGrbphids.gftDfbugOptions(this);
    }


    /**
     * Rfturns truf if dfbug informbtion is fnbblfd for this
     * <dodf>JComponfnt</dodf> or onf of its pbrfnts.
     */
    int shouldDfbugGrbphids() {
        rfturn DfbugGrbphids.shouldComponfntDfbug(this);
    }

    /**
     * This mfthod is now obsolftf, plfbsf usf b dombinbtion of
     * <dodf>gftAdtionMbp()</dodf> bnd <dodf>gftInputMbp()</dodf> for
     * similbr bfhbvior. For fxbmplf, to bind thf <dodf>KfyStrokf</dodf>
     * <dodf>bKfyStrokf</dodf> to thf <dodf>Adtion</dodf> <dodf>bnAdtion</dodf>
     * now usf:
     * <prf>
     *   domponfnt.gftInputMbp().put(bKfyStrokf, bCommbnd);
     *   domponfnt.gftAdtionMbp().put(bCommmbnd, bnAdtion);
     * </prf>
     * Thf bbovf bssumfs you wbnt thf binding to bf bpplidbblf for
     * <dodf>WHEN_FOCUSED</dodf>. To rfgistfr bindings for othfr fodus
     * stbtfs usf thf <dodf>gftInputMbp</dodf> mfthod thbt tbkfs bn intfgfr.
     * <p>
     * Rfgistfr b nfw kfybobrd bdtion.
     * <dodf>bnAdtion</dodf> will bf invokfd if b kfy fvfnt mbtdhing
     * <dodf>bKfyStrokf</dodf> oddurs bnd <dodf>bCondition</dodf> is vfrififd.
     * Thf <dodf>KfyStrokf</dodf> objfdt dffinfs b
     * pbrtidulbr dombinbtion of b kfybobrd kfy bnd onf or morf modififrs
     * (blt, shift, dtrl, mftb).
     * <p>
     * Thf <dodf>bCommbnd</dodf> will bf sft in thf dflivfrfd fvfnt if
     * spfdififd.
     * <p>
     * Thf <dodf>bCondition</dodf> dbn bf onf of:
     * <blodkquotf>
     * <DL>
     * <DT>WHEN_FOCUSED
     * <DD>Thf bdtion will bf invokfd only whfn thf kfystrokf oddurs
     *     whilf thf domponfnt hbs thf fodus.
     * <DT>WHEN_IN_FOCUSED_WINDOW
     * <DD>Thf bdtion will bf invokfd whfn thf kfystrokf oddurs whilf
     *     thf domponfnt hbs thf fodus or if thf domponfnt is in thf
     *     window thbt hbs thf fodus. Notf thbt thf domponfnt nffd not
     *     bf bn immfdibtf dfsdfndfnt of thf window -- it dbn bf
     *     bnywhfrf in thf window's dontbinmfnt hifrbrdhy. In othfr
     *     words, whfnfvfr <fm>bny</fm> domponfnt in thf window hbs thf fodus,
     *     thf bdtion rfgistfrfd with this domponfnt is invokfd.
     * <DT>WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
     * <DD>Thf bdtion will bf invokfd whfn thf kfystrokf oddurs whilf thf
     *     domponfnt hbs thf fodus or if thf domponfnt is bn bndfstor of
     *     thf domponfnt thbt hbs thf fodus.
     * </DL>
     * </blodkquotf>
     * <p>
     * Thf dombinbtion of kfystrokfs bnd donditions lfts you dffinf high
     * lfvfl (sfmbntid) bdtion fvfnts for b spfdififd kfystrokf+modififr
     * dombinbtion (using thf KfyStrokf dlbss) bnd dirfdt to b pbrfnt or
     * dhild of b domponfnt thbt hbs thf fodus, or to thf domponfnt itsflf.
     * In othfr words, in bny hifrbrdhidbl strudturf of domponfnts, bn
     * brbitrbry kfy-dombinbtion dbn bf immfdibtfly dirfdtfd to thf
     * bppropribtf domponfnt in thf hifrbrdhy, bnd dbusf b spfdifid mfthod
     * to bf invokfd (usublly by wby of bdbptfr objfdts).
     * <p>
     * If bn bdtion hbs blrfbdy bffn rfgistfrfd for thf rfdfiving
     * dontbinfr, with thf sbmf dhbrCodf bnd thf sbmf modififrs,
     * <dodf>bnAdtion</dodf> will rfplbdf thf bdtion.
     *
     * @pbrbm bnAdtion  thf <dodf>Adtion</dodf> to bf rfgistfrfd
     * @pbrbm bCommbnd  thf dommbnd to bf sft in thf dflivfrfd fvfnt
     * @pbrbm bKfyStrokf thf <dodf>KfyStrokf</dodf> to bind to thf bdtion
     * @pbrbm bCondition thf dondition thbt nffds to bf mft, sff bbovf
     * @sff KfyStrokf
     */
    publid void rfgistfrKfybobrdAdtion(AdtionListfnfr bnAdtion,String bCommbnd,KfyStrokf bKfyStrokf,int bCondition) {

        InputMbp inputMbp = gftInputMbp(bCondition, truf);

        if (inputMbp != null) {
            AdtionMbp bdtionMbp = gftAdtionMbp(truf);
            AdtionStbndin bdtion = nfw AdtionStbndin(bnAdtion, bCommbnd);
            inputMbp.put(bKfyStrokf, bdtion);
            if (bdtionMbp != null) {
                bdtionMbp.put(bdtion, bdtion);
            }
        }
    }

    /**
     * Rfgistfrs bny bound <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> bdtions with
     * thf <dodf>KfybobrdMbnbgfr</dodf>. If <dodf>onlyIfNfw</dodf>
     * is truf only bdtions thbt hbvfn't bffn rfgistfrfd brf pushfd
     * to thf <dodf>KfybobrdMbnbgfr</dodf>;
     * othfrwisf bll bdtions brf pushfd to thf <dodf>KfybobrdMbnbgfr</dodf>.
     *
     * @pbrbm onlyIfNfw  if truf, only bdtions thbt hbvfn't bffn rfgistfrfd
     *          brf pushfd to thf <dodf>KfybobrdMbnbgfr</dodf>
     */
    privbtf void rfgistfrWithKfybobrdMbnbgfr(boolfbn onlyIfNfw) {
        InputMbp inputMbp = gftInputMbp(WHEN_IN_FOCUSED_WINDOW, fblsf);
        KfyStrokf[] strokfs;
        @SupprfssWbrnings("undhfdkfd")
        Hbshtbblf<KfyStrokf, KfyStrokf> rfgistfrfd =
                (Hbshtbblf<KfyStrokf, KfyStrokf>)gftClifntPropfrty
                                (WHEN_IN_FOCUSED_WINDOW_BINDINGS);

        if (inputMbp != null) {
            // Push bny nfw KfyStrokfs to thf KfybobrdMbnbgfr.
            strokfs = inputMbp.bllKfys();
            if (strokfs != null) {
                for (int dountfr = strokfs.lfngth - 1; dountfr >= 0;
                     dountfr--) {
                    if (!onlyIfNfw || rfgistfrfd == null ||
                        rfgistfrfd.gft(strokfs[dountfr]) == null) {
                        rfgistfrWithKfybobrdMbnbgfr(strokfs[dountfr]);
                    }
                    if (rfgistfrfd != null) {
                        rfgistfrfd.rfmovf(strokfs[dountfr]);
                    }
                }
            }
        }
        flsf {
            strokfs = null;
        }
        // Rfmovf bny old onfs.
        if (rfgistfrfd != null && rfgistfrfd.sizf() > 0) {
            Enumfrbtion<KfyStrokf> kfys = rfgistfrfd.kfys();

            whilf (kfys.hbsMorfElfmfnts()) {
                KfyStrokf ks = kfys.nfxtElfmfnt();
                unrfgistfrWithKfybobrdMbnbgfr(ks);
            }
            rfgistfrfd.dlfbr();
        }
        // Updbtfd thf rfgistfrfd Hbshtbblf.
        if (strokfs != null && strokfs.lfngth > 0) {
            if (rfgistfrfd == null) {
                rfgistfrfd = nfw Hbshtbblf<KfyStrokf, KfyStrokf>(strokfs.lfngth);
                putClifntPropfrty(WHEN_IN_FOCUSED_WINDOW_BINDINGS, rfgistfrfd);
            }
            for (int dountfr = strokfs.lfngth - 1; dountfr >= 0; dountfr--) {
                rfgistfrfd.put(strokfs[dountfr], strokfs[dountfr]);
            }
        }
        flsf {
            putClifntPropfrty(WHEN_IN_FOCUSED_WINDOW_BINDINGS, null);
        }
    }

    /**
     * Unrfgistfrs bll thf prfviously rfgistfrfd
     * <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> <dodf>KfyStrokf</dodf> bindings.
     */
    privbtf void unrfgistfrWithKfybobrdMbnbgfr() {
        @SupprfssWbrnings("undhfdkfd")
        Hbshtbblf<KfyStrokf, KfyStrokf> rfgistfrfd =
                (Hbshtbblf<KfyStrokf, KfyStrokf>)gftClifntPropfrty
                                (WHEN_IN_FOCUSED_WINDOW_BINDINGS);

        if (rfgistfrfd != null && rfgistfrfd.sizf() > 0) {
            Enumfrbtion<KfyStrokf> kfys = rfgistfrfd.kfys();

            whilf (kfys.hbsMorfElfmfnts()) {
                KfyStrokf ks = kfys.nfxtElfmfnt();
                unrfgistfrWithKfybobrdMbnbgfr(ks);
            }
        }
        putClifntPropfrty(WHEN_IN_FOCUSED_WINDOW_BINDINGS, null);
    }

    /**
     * Invokfd from <dodf>ComponfntInputMbp</dodf> whfn its bindings dhbngf.
     * If <dodf>inputMbp</dodf> is thf durrfnt <dodf>windowInputMbp</dodf>
     * (or b pbrfnt of thf window <dodf>InputMbp</dodf>)
     * thf <dodf>KfybobrdMbnbgfr</dodf> is notififd of thf nfw bindings.
     *
     * @pbrbm inputMbp thf mbp dontbining thf nfw bindings
     */
    void domponfntInputMbpChbngfd(ComponfntInputMbp inputMbp) {
        InputMbp km = gftInputMbp(WHEN_IN_FOCUSED_WINDOW, fblsf);

        whilf (km != inputMbp && km != null) {
            km = km.gftPbrfnt();
        }
        if (km != null) {
            rfgistfrWithKfybobrdMbnbgfr(fblsf);
        }
    }

    privbtf void rfgistfrWithKfybobrdMbnbgfr(KfyStrokf bKfyStrokf) {
        KfybobrdMbnbgfr.gftCurrfntMbnbgfr().rfgistfrKfyStrokf(bKfyStrokf,this);
    }

    privbtf void unrfgistfrWithKfybobrdMbnbgfr(KfyStrokf bKfyStrokf) {
        KfybobrdMbnbgfr.gftCurrfntMbnbgfr().unrfgistfrKfyStrokf(bKfyStrokf,
                                                                this);
    }

    /**
     * This mfthod is now obsolftf, plfbsf usf b dombinbtion of
     * <dodf>gftAdtionMbp()</dodf> bnd <dodf>gftInputMbp()</dodf> for
     * similbr bfhbvior.
     *
     * @pbrbm bnAdtion  bdtion to bf rfgistfrfd to givfn kfystrokf bnd dondition
     * @pbrbm bKfyStrokf  b {@dodf KfyStrokf}
     * @pbrbm bCondition  thf dondition to bf bssodibtfd with givfn kfystrokf
     *                    bnd bdtion
     * @sff #gftAdtionMbp
     * @sff #gftInputMbp(int)
     */
    publid void rfgistfrKfybobrdAdtion(AdtionListfnfr bnAdtion,KfyStrokf bKfyStrokf,int bCondition) {
        rfgistfrKfybobrdAdtion(bnAdtion,null,bKfyStrokf,bCondition);
    }

    /**
     * This mfthod is now obsolftf. To unrfgistfr bn fxisting binding
     * you dbn fithfr rfmovf thf binding from thf
     * <dodf>AdtionMbp/InputMbp</dodf>, or plbdf b dummy binding thf
     * <dodf>InputMbp</dodf>. Rfmoving thf binding from thf
     * <dodf>InputMbp</dodf> bllows bindings in pbrfnt <dodf>InputMbp</dodf>s
     * to bf bdtivf, whfrfbs putting b dummy binding in thf
     * <dodf>InputMbp</dodf> ffffdtivfly disbblfs
     * thf binding from fvfr hbppfning.
     * <p>
     * Unrfgistfrs b kfybobrd bdtion.
     * This will rfmovf thf binding from thf <dodf>AdtionMbp</dodf>
     * (if it fxists) bs wfll bs thf <dodf>InputMbp</dodf>s.
     *
     * @pbrbm bKfyStrokf  thf kfystrokf for whidh to unrfgistfr its
     *                    kfybobrd bdtion
     */
    publid void unrfgistfrKfybobrdAdtion(KfyStrokf bKfyStrokf) {
        AdtionMbp bm = gftAdtionMbp(fblsf);
        for (int dountfr = 0; dountfr < 3; dountfr++) {
            InputMbp km = gftInputMbp(dountfr, fblsf);
            if (km != null) {
                Objfdt bdtionID = km.gft(bKfyStrokf);

                if (bm != null && bdtionID != null) {
                    bm.rfmovf(bdtionID);
                }
                km.rfmovf(bKfyStrokf);
            }
        }
    }

    /**
     * Rfturns thf <dodf>KfyStrokfs</dodf> thbt will initibtf
     * rfgistfrfd bdtions.
     *
     * @rfturn bn brrby of <dodf>KfyStrokf</dodf> objfdts
     * @sff #rfgistfrKfybobrdAdtion
     */
    publid KfyStrokf[] gftRfgistfrfdKfyStrokfs() {
        int[] dounts = nfw int[3];
        KfyStrokf[][] strokfs = nfw KfyStrokf[3][];

        for (int dountfr = 0; dountfr < 3; dountfr++) {
            InputMbp km = gftInputMbp(dountfr, fblsf);
            strokfs[dountfr] = (km != null) ? km.bllKfys() : null;
            dounts[dountfr] = (strokfs[dountfr] != null) ?
                               strokfs[dountfr].lfngth : 0;
        }
        KfyStrokf[] rftVbluf = nfw KfyStrokf[dounts[0] + dounts[1] +
                                            dounts[2]];
        for (int dountfr = 0, lbst = 0; dountfr < 3; dountfr++) {
            if (dounts[dountfr] > 0) {
                Systfm.brrbydopy(strokfs[dountfr], 0, rftVbluf, lbst,
                                 dounts[dountfr]);
                lbst += dounts[dountfr];
            }
        }
        rfturn rftVbluf;
    }

    /**
     * Rfturns thf dondition thbt dftfrminfs whfthfr b rfgistfrfd bdtion
     * oddurs in rfsponsf to thf spfdififd kfystrokf.
     * <p>
     * For Jbvb 2 plbtform v1.3, b <dodf>KfyStrokf</dodf> dbn bf bssodibtfd
     * with morf thbn onf dondition.
     * For fxbmplf, 'b' dould bf bound for thf two
     * donditions <dodf>WHEN_FOCUSED</dodf> bnd
     * <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> dondition.
     *
     * @pbrbm bKfyStrokf  thf kfystrokf for whidh to rfqufst bn
     *                    bdtion-kfystrokf dondition
     * @rfturn thf bdtion-kfystrokf dondition
     */
    publid int gftConditionForKfyStrokf(KfyStrokf bKfyStrokf) {
        for (int dountfr = 0; dountfr < 3; dountfr++) {
            InputMbp inputMbp = gftInputMbp(dountfr, fblsf);
            if (inputMbp != null && inputMbp.gft(bKfyStrokf) != null) {
                rfturn dountfr;
            }
        }
        rfturn UNDEFINED_CONDITION;
    }

    /**
     * Rfturns thf objfdt thbt will pfrform thf bdtion rfgistfrfd for b
     * givfn kfystrokf.
     *
     * @pbrbm bKfyStrokf  thf kfystrokf for whidh to rfturn b listfnfr
     * @rfturn thf <dodf>AdtionListfnfr</dodf>
     *          objfdt invokfd whfn thf kfystrokf oddurs
     */
    publid AdtionListfnfr gftAdtionForKfyStrokf(KfyStrokf bKfyStrokf) {
        AdtionMbp bm = gftAdtionMbp(fblsf);

        if (bm == null) {
            rfturn null;
        }
        for (int dountfr = 0; dountfr < 3; dountfr++) {
            InputMbp inputMbp = gftInputMbp(dountfr, fblsf);
            if (inputMbp != null) {
                Objfdt bdtionBinding = inputMbp.gft(bKfyStrokf);

                if (bdtionBinding != null) {
                    Adtion bdtion = bm.gft(bdtionBinding);
                    if (bdtion instbndfof AdtionStbndin) {
                        rfturn ((AdtionStbndin)bdtion).bdtionListfnfr;
                    }
                    rfturn bdtion;
                }
            }
        }
        rfturn null;
    }

    /**
     * Unrfgistfrs bll thf bindings in thf first tifr <dodf>InputMbps</dodf>
     * bnd <dodf>AdtionMbp</dodf>. This hbs thf ffffdt of rfmoving bny
     * lodbl bindings, bnd bllowing thf bindings dffinfd in pbrfnt
     * <dodf>InputMbp/AdtionMbps</dodf>
     * (thf UI is usublly dffinfd in thf sfdond tifr) to pfrsist.
     */
    publid void rfsftKfybobrdAdtions() {
        // Kfys
        for (int dountfr = 0; dountfr < 3; dountfr++) {
            InputMbp inputMbp = gftInputMbp(dountfr, fblsf);

            if (inputMbp != null) {
                inputMbp.dlfbr();
            }
        }

        // Adtions
        AdtionMbp bm = gftAdtionMbp(fblsf);

        if (bm != null) {
            bm.dlfbr();
        }
    }

    /**
     * Sfts thf <dodf>InputMbp</dodf> to usf undfr thf dondition
     * <dodf>dondition</dodf> to
     * <dodf>mbp</dodf>. A <dodf>null</dodf> vbluf implifs you
     * do not wbnt bny bindings to bf usfd, fvfn from thf UI. This will
     * not rfinstbll thf UI <dodf>InputMbp</dodf> (if thfrf wbs onf).
     * <dodf>dondition</dodf> hbs onf of thf following vblufs:
     * <ul>
     * <li><dodf>WHEN_IN_FOCUSED_WINDOW</dodf>
     * <li><dodf>WHEN_FOCUSED</dodf>
     * <li><dodf>WHEN_ANCESTOR_OF_FOCUSED_COMPONENT</dodf>
     * </ul>
     * If <dodf>dondition</dodf> is <dodf>WHEN_IN_FOCUSED_WINDOW</dodf>
     * bnd <dodf>mbp</dodf> is not b <dodf>ComponfntInputMbp</dodf>, bn
     * <dodf>IllfgblArgumfntExdfption</dodf> will bf thrown.
     * Similbrly, if <dodf>dondition</dodf> is not onf of thf vblufs
     * listfd, bn <dodf>IllfgblArgumfntExdfption</dodf> will bf thrown.
     *
     * @pbrbm dondition onf of thf vblufs listfd bbovf
     * @pbrbm mbp  thf <dodf>InputMbp</dodf> to usf for thf givfn dondition
     * @fxdfption IllfgblArgumfntExdfption if <dodf>dondition</dodf> is
     *          <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> bnd <dodf>mbp</dodf>
     *          is not bn instbndf of <dodf>ComponfntInputMbp</dodf>; or
     *          if <dodf>dondition</dodf> is not onf of thf lfgbl vblufs
     *          spfdififd bbovf
     * @sindf 1.3
     */
    publid finbl void sftInputMbp(int dondition, InputMbp mbp) {
        switdh (dondition) {
        dbsf WHEN_IN_FOCUSED_WINDOW:
            if (mbp != null && !(mbp instbndfof ComponfntInputMbp)) {
                throw nfw IllfgblArgumfntExdfption("WHEN_IN_FOCUSED_WINDOW InputMbps must bf of typf ComponfntInputMbp");
            }
            windowInputMbp = (ComponfntInputMbp)mbp;
            sftFlbg(WIF_INPUTMAP_CREATED, truf);
            rfgistfrWithKfybobrdMbnbgfr(fblsf);
            brfbk;
        dbsf WHEN_ANCESTOR_OF_FOCUSED_COMPONENT:
            bndfstorInputMbp = mbp;
            sftFlbg(ANCESTOR_INPUTMAP_CREATED, truf);
            brfbk;
        dbsf WHEN_FOCUSED:
            fodusInputMbp = mbp;
            sftFlbg(FOCUS_INPUTMAP_CREATED, truf);
            brfbk;
        dffbult:
            throw nfw IllfgblArgumfntExdfption("dondition must bf onf of JComponfnt.WHEN_IN_FOCUSED_WINDOW, JComponfnt.WHEN_FOCUSED or JComponfnt.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT");
        }
    }

    /**
     * Rfturns thf <dodf>InputMbp</dodf> thbt is usfd during
     * <dodf>dondition</dodf>.
     *
     * @pbrbm dondition onf of WHEN_IN_FOCUSED_WINDOW, WHEN_FOCUSED,
     *        WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
     * @rfturn thf <dodf>InputMbp</dodf> for thf spfdififd
     *          <dodf>dondition</dodf>
     * @sindf 1.3
     */
    publid finbl InputMbp gftInputMbp(int dondition) {
        rfturn gftInputMbp(dondition, truf);
    }

    /**
     * Rfturns thf <dodf>InputMbp</dodf> thbt is usfd whfn thf
     * domponfnt hbs fodus.
     * This is donvfnifndf mfthod for <dodf>gftInputMbp(WHEN_FOCUSED)</dodf>.
     *
     * @rfturn thf <dodf>InputMbp</dodf> usfd whfn thf domponfnt hbs fodus
     * @sindf 1.3
     */
    publid finbl InputMbp gftInputMbp() {
        rfturn gftInputMbp(WHEN_FOCUSED, truf);
    }

    /**
     * Sfts thf <dodf>AdtionMbp</dodf> to <dodf>bm</dodf>. This dofs not sft
     * thf pbrfnt of thf <dodf>bm</dodf> to bf thf <dodf>AdtionMbp</dodf>
     * from thf UI (if thfrf wbs onf), it is up to thf dbllfr to hbvf donf this.
     *
     * @pbrbm bm  thf nfw <dodf>AdtionMbp</dodf>
     * @sindf 1.3
     */
    publid finbl void sftAdtionMbp(AdtionMbp bm) {
        bdtionMbp = bm;
        sftFlbg(ACTIONMAP_CREATED, truf);
    }

    /**
     * Rfturns thf <dodf>AdtionMbp</dodf> usfd to dftfrminf whbt
     * <dodf>Adtion</dodf> to firf for pbrtidulbr <dodf>KfyStrokf</dodf>
     * binding. Thf rfturnfd <dodf>AdtionMbp</dodf>, unlfss othfrwisf
     * sft, will hbvf thf <dodf>AdtionMbp</dodf> from thf UI sft bs thf pbrfnt.
     *
     * @rfturn thf <dodf>AdtionMbp</dodf> dontbining thf kfy/bdtion bindings
     * @sindf 1.3
     */
    publid finbl AdtionMbp gftAdtionMbp() {
        rfturn gftAdtionMbp(truf);
    }

    /**
     * Rfturns thf <dodf>InputMbp</dodf> to usf for dondition
     * <dodf>dondition</dodf>.  If thf <dodf>InputMbp</dodf> hbsn't
     * bffn drfbtfd, bnd <dodf>drfbtf</dodf> is
     * truf, it will bf drfbtfd.
     *
     * @pbrbm dondition onf of thf following vblufs:
     * <ul>
     * <li>JComponfnt.FOCUS_INPUTMAP_CREATED
     * <li>JComponfnt.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
     * <li>JComponfnt.WHEN_IN_FOCUSED_WINDOW
     * </ul>
     * @pbrbm drfbtf if truf, drfbtf thf <dodf>InputMbp</dodf> if it
     *          is not blrfbdy drfbtfd
     * @rfturn thf <dodf>InputMbp</dodf> for thf givfn <dodf>dondition</dodf>;
     *          if <dodf>drfbtf</dodf> is fblsf bnd thf <dodf>InputMbp</dodf>
     *          hbsn't bffn drfbtfd, rfturns <dodf>null</dodf>
     * @fxdfption IllfgblArgumfntExdfption if <dodf>dondition</dodf>
     *          is not onf of thf lfgbl vblufs listfd bbovf
     */
    finbl InputMbp gftInputMbp(int dondition, boolfbn drfbtf) {
        switdh (dondition) {
        dbsf WHEN_FOCUSED:
            if (gftFlbg(FOCUS_INPUTMAP_CREATED)) {
                rfturn fodusInputMbp;
            }
            // Hbsn't bffn drfbtfd yft.
            if (drfbtf) {
                InputMbp km = nfw InputMbp();
                sftInputMbp(dondition, km);
                rfturn km;
            }
            brfbk;
        dbsf WHEN_ANCESTOR_OF_FOCUSED_COMPONENT:
            if (gftFlbg(ANCESTOR_INPUTMAP_CREATED)) {
                rfturn bndfstorInputMbp;
            }
            // Hbsn't bffn drfbtfd yft.
            if (drfbtf) {
                InputMbp km = nfw InputMbp();
                sftInputMbp(dondition, km);
                rfturn km;
            }
            brfbk;
        dbsf WHEN_IN_FOCUSED_WINDOW:
            if (gftFlbg(WIF_INPUTMAP_CREATED)) {
                rfturn windowInputMbp;
            }
            // Hbsn't bffn drfbtfd yft.
            if (drfbtf) {
                ComponfntInputMbp km = nfw ComponfntInputMbp(this);
                sftInputMbp(dondition, km);
                rfturn km;
            }
            brfbk;
        dffbult:
            throw nfw IllfgblArgumfntExdfption("dondition must bf onf of JComponfnt.WHEN_IN_FOCUSED_WINDOW, JComponfnt.WHEN_FOCUSED or JComponfnt.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT");
        }
        rfturn null;
    }

    /**
     * Finds bnd rfturns thf bppropribtf <dodf>AdtionMbp</dodf>.
     *
     * @pbrbm drfbtf if truf, drfbtf thf <dodf>AdtionMbp</dodf> if it
     *          is not blrfbdy drfbtfd
     * @rfturn thf <dodf>AdtionMbp</dodf> for this domponfnt; if thf
     *          <dodf>drfbtf</dodf> flbg is fblsf bnd thfrf is no
     *          durrfnt <dodf>AdtionMbp</dodf>, rfturns <dodf>null</dodf>
     */
    finbl AdtionMbp gftAdtionMbp(boolfbn drfbtf) {
        if (gftFlbg(ACTIONMAP_CREATED)) {
            rfturn bdtionMbp;
        }
        // Hbsn't bffn drfbtfd.
        if (drfbtf) {
            AdtionMbp bm = nfw AdtionMbp();
            sftAdtionMbp(bm);
            rfturn bm;
        }
        rfturn null;
    }

    /**
     * Rfturns thf bbsflinf.  Thf bbsflinf is mfbsurfd from thf top of
     * thf domponfnt.  This mfthod is primbrily mfbnt for
     * <dodf>LbyoutMbnbgfr</dodf>s to blign domponfnts blong thfir
     * bbsflinf.  A rfturn vbluf lfss thbn 0 indidbtfs this domponfnt
     * dofs not hbvf b rfbsonbblf bbsflinf bnd thbt
     * <dodf>LbyoutMbnbgfr</dodf>s should not blign this domponfnt on
     * its bbsflinf.
     * <p>
     * This mfthod dblls into thf <dodf>ComponfntUI</dodf> mfthod of thf
     * sbmf nbmf.  If this domponfnt dofs not hbvf b <dodf>ComponfntUI</dodf>
     * -1 will bf rfturnfd.  If b vbluf &gt;= 0 is
     * rfturnfd, thfn thf domponfnt hbs b vblid bbsflinf for bny
     * sizf &gt;= thf minimum sizf bnd <dodf>gftBbsflinfRfsizfBfhbvior</dodf>
     * dbn bf usfd to dftfrminf how thf bbsflinf dhbngfs with sizf.
     *
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     * @sff #gftBbsflinfRfsizfBfhbvior
     * @sff jbvb.bwt.FontMftrids
     * @sindf 1.6
     */
    publid int gftBbsflinf(int width, int hfight) {
        // dhfdk sizf.
        supfr.gftBbsflinf(width, hfight);
        if (ui != null) {
            rfturn ui.gftBbsflinf(this, width, hfight);
        }
        rfturn -1;
    }

    /**
     * Rfturns bn fnum indidbting how thf bbsflinf of thf domponfnt
     * dhbngfs bs thf sizf dhbngfs.  This mfthod is primbrily mfbnt for
     * lbyout mbnbgfrs bnd GUI buildfrs.
     * <p>
     * This mfthod dblls into thf <dodf>ComponfntUI</dodf> mfthod of
     * thf sbmf nbmf.  If this domponfnt dofs not hbvf b
     * <dodf>ComponfntUI</dodf>
     * <dodf>BbsflinfRfsizfBfhbvior.OTHER</dodf> will bf
     * rfturnfd.  Subdlbssfs should
     * nfvfr rfturn <dodf>null</dodf>; if thf bbsflinf dbn not bf
     * dbldulbtfd rfturn <dodf>BbsflinfRfsizfBfhbvior.OTHER</dodf>.  Cbllfrs
     * should first bsk for thf bbsflinf using
     * <dodf>gftBbsflinf</dodf> bnd if b vbluf &gt;= 0 is rfturnfd usf
     * this mfthod.  It is bddfptbblf for this mfthod to rfturn b
     * vbluf othfr thbn <dodf>BbsflinfRfsizfBfhbvior.OTHER</dodf> fvfn if
     * <dodf>gftBbsflinf</dodf> rfturns b vbluf lfss thbn 0.
     *
     * @sff #gftBbsflinf(int, int)
     * @sindf 1.6
     */
    publid BbsflinfRfsizfBfhbvior gftBbsflinfRfsizfBfhbvior() {
        if (ui != null) {
            rfturn ui.gftBbsflinfRfsizfBfhbvior(this);
        }
        rfturn BbsflinfRfsizfBfhbvior.OTHER;
    }

    /**
     * In rflfbsf 1.4, thf fodus subsystfm wbs rfbrdhitfdtfd.
     * For morf informbtion, sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.html">
     * How to Usf thf Fodus Subsystfm</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
     * <p>
     * Rfqufsts fodus on this <dodf>JComponfnt</dodf>'s
     * <dodf>FodusTrbvfrsblPolidy</dodf>'s dffbult <dodf>Componfnt</dodf>.
     * If this <dodf>JComponfnt</dodf> is b fodus dydlf root, thfn its
     * <dodf>FodusTrbvfrsblPolidy</dodf> is usfd. Othfrwisf, thf
     * <dodf>FodusTrbvfrsblPolidy</dodf> of this <dodf>JComponfnt</dodf>'s
     * fodus-dydlf-root bndfstor is usfd.
     *
     * @rfturn truf if this domponfnt dbn rfqufst to gft thf input fodus,
     *              fblsf if it dbn not
     * @sff jbvb.bwt.FodusTrbvfrsblPolidy#gftDffbultComponfnt
     * @dfprfdbtfd As of 1.4, rfplbdfd by
     * <dodf>FodusTrbvfrsblPolidy.gftDffbultComponfnt(Contbinfr).rfqufstFodus()</dodf>
     */
    @Dfprfdbtfd
    publid boolfbn rfqufstDffbultFodus() {
        Contbinfr nfbrfstRoot =
            (isFodusCydlfRoot()) ? this : gftFodusCydlfRootAndfstor();
        if (nfbrfstRoot == null) {
            rfturn fblsf;
        }
        Componfnt domp = nfbrfstRoot.gftFodusTrbvfrsblPolidy().
            gftDffbultComponfnt(nfbrfstRoot);
        if (domp != null) {
            domp.rfqufstFodus();
            rfturn truf;
        } flsf {
            rfturn fblsf;
        }
    }

    /**
     * Mbkfs thf domponfnt visiblf or invisiblf.
     * Ovfrridfs <dodf>Componfnt.sftVisiblf</dodf>.
     *
     * @pbrbm bFlbg  truf to mbkf thf domponfnt visiblf; fblsf to
     *          mbkf it invisiblf
     *
     * @bfbninfo
     *    bttributf: visublUpdbtf truf
     */
    publid void sftVisiblf(boolfbn bFlbg) {
        if (bFlbg != isVisiblf()) {
            supfr.sftVisiblf(bFlbg);
            if (bFlbg) {
                Contbinfr pbrfnt = gftPbrfnt();
                if (pbrfnt != null) {
                    Rfdtbnglf r = gftBounds();
                    pbrfnt.rfpbint(r.x, r.y, r.width, r.hfight);
                }
                rfvblidbtf();
            }
        }
    }

    /**
     * Sfts whfthfr or not this domponfnt is fnbblfd.
     * A domponfnt thbt is fnbblfd mby rfspond to usfr input,
     * whilf b domponfnt thbt is not fnbblfd dbnnot rfspond to
     * usfr input.  Somf domponfnts mby bltfr thfir visubl
     * rfprfsfntbtion whfn thfy brf disbblfd in ordfr to
     * providf fffdbbdk to thf usfr thbt thfy dbnnot tbkf input.
     * <p>Notf: Disbbling b domponfnt dofs not disbblf its dhildrfn.
     *
     * <p>Notf: Disbbling b lightwfight domponfnt dofs not prfvfnt it from
     * rfdfiving MousfEvfnts.
     *
     * @pbrbm fnbblfd truf if this domponfnt should bf fnbblfd, fblsf othfrwisf
     * @sff jbvb.bwt.Componfnt#isEnbblfd
     * @sff jbvb.bwt.Componfnt#isLightwfight
     *
     * @bfbninfo
     *    prfffrrfd: truf
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Thf fnbblfd stbtf of thf domponfnt.
     */
    publid void sftEnbblfd(boolfbn fnbblfd) {
        boolfbn oldEnbblfd = isEnbblfd();
        supfr.sftEnbblfd(fnbblfd);
        firfPropfrtyChbngf("fnbblfd", oldEnbblfd, fnbblfd);
        if (fnbblfd != oldEnbblfd) {
            rfpbint();
        }
    }

    /**
     * Sfts thf forfground dolor of this domponfnt.  It is up to thf
     * look bnd fffl to honor this propfrty, somf mby dhoosf to ignorf
     * it.
     *
     * @pbrbm fg  thf dfsirfd forfground <dodf>Color</dodf>
     * @sff jbvb.bwt.Componfnt#gftForfground
     *
     * @bfbninfo
     *    prfffrrfd: truf
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Thf forfground dolor of thf domponfnt.
     */
    publid void sftForfground(Color fg) {
        Color oldFg = gftForfground();
        supfr.sftForfground(fg);
        if ((oldFg != null) ? !oldFg.fqubls(fg) : ((fg != null) && !fg.fqubls(oldFg))) {
            // forfground blrfbdy bound in AWT1.2
            rfpbint();
        }
    }

    /**
     * Sfts thf bbdkground dolor of this domponfnt.  Thf bbdkground
     * dolor is usfd only if thf domponfnt is opbquf, bnd only
     * by subdlbssfs of <dodf>JComponfnt</dodf> or
     * <dodf>ComponfntUI</dodf> implfmfntbtions.  Dirfdt subdlbssfs of
     * <dodf>JComponfnt</dodf> must ovfrridf
     * <dodf>pbintComponfnt</dodf> to honor this propfrty.
     * <p>
     * It is up to thf look bnd fffl to honor this propfrty, somf mby
     * dhoosf to ignorf it.
     *
     * @pbrbm bg thf dfsirfd bbdkground <dodf>Color</dodf>
     * @sff jbvb.bwt.Componfnt#gftBbdkground
     * @sff #sftOpbquf
     *
     * @bfbninfo
     *    prfffrrfd: truf
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Thf bbdkground dolor of thf domponfnt.
     */
    publid void sftBbdkground(Color bg) {
        Color oldBg = gftBbdkground();
        supfr.sftBbdkground(bg);
        if ((oldBg != null) ? !oldBg.fqubls(bg) : ((bg != null) && !bg.fqubls(oldBg))) {
            // bbdkground blrfbdy bound in AWT1.2
            rfpbint();
        }
    }

    /**
     * Sfts thf font for this domponfnt.
     *
     * @pbrbm font thf dfsirfd <dodf>Font</dodf> for this domponfnt
     * @sff jbvb.bwt.Componfnt#gftFont
     *
     * @bfbninfo
     *    prfffrrfd: truf
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Thf font for thf domponfnt.
     */
    publid void sftFont(Font font) {
        Font oldFont = gftFont();
        supfr.sftFont(font);
        // font blrfbdy bound in AWT1.2
        if (font != oldFont) {
            rfvblidbtf();
            rfpbint();
        }
    }

    /**
     * Rfturns thf dffbult lodblf usfd to initiblizf fbdh JComponfnt's
     * lodblf propfrty upon drfbtion.
     *
     * Thf dffbult lodblf hbs "AppContfxt" sdopf so thbt bpplfts (bnd
     * potfntiblly multiplf lightwfight bpplidbtions running in b singlf VM)
     * dbn hbvf thfir own sftting. An bpplft dbn sbffly bltfr its dffbult
     * lodblf bfdbusf it will hbvf no bfffdt on othfr bpplfts (or thf browsfr).
     *
     * @rfturn thf dffbult <dodf>Lodblf</dodf>.
     * @sff #sftDffbultLodblf
     * @sff jbvb.bwt.Componfnt#gftLodblf
     * @sff #sftLodblf
     * @sindf 1.4
     */
    stbtid publid Lodblf gftDffbultLodblf() {
        Lodblf l = (Lodblf) SwingUtilitifs.bppContfxtGft(dffbultLodblf);
        if( l == null ) {
            //REMIND(bdb) dhoosing thf dffbult vbluf is morf domplidbtfd
            //thbn this.
            l = Lodblf.gftDffbult();
            JComponfnt.sftDffbultLodblf( l );
        }
        rfturn l;
    }


    /**
     * Sfts thf dffbult lodblf usfd to initiblizf fbdh JComponfnt's lodblf
     * propfrty upon drfbtion.  Thf initibl vbluf is thf VM's dffbult lodblf.
     *
     * Thf dffbult lodblf hbs "AppContfxt" sdopf so thbt bpplfts (bnd
     * potfntiblly multiplf lightwfight bpplidbtions running in b singlf VM)
     * dbn hbvf thfir own sftting. An bpplft dbn sbffly bltfr its dffbult
     * lodblf bfdbusf it will hbvf no bfffdt on othfr bpplfts (or thf browsfr).
     *
     * @pbrbm l thf dfsirfd dffbult <dodf>Lodblf</dodf> for nfw domponfnts.
     * @sff #gftDffbultLodblf
     * @sff jbvb.bwt.Componfnt#gftLodblf
     * @sff #sftLodblf
     * @sindf 1.4
     */
    stbtid publid void sftDffbultLodblf( Lodblf l ) {
        SwingUtilitifs.bppContfxtPut(dffbultLodblf, l);
    }


    /**
     * Prodfssfs bny kfy fvfnts thbt thf domponfnt itsflf
     * rfdognizfs.  This is dbllfd bftfr thf fodus
     * mbnbgfr bnd bny intfrfstfd listfnfrs hbvf bffn
     * givfn b dhbndf to stfbl bwby thf fvfnt.  This
     * mfthod is dbllfd only if thf fvfnt hbs not
     * yft bffn donsumfd.  This mfthod is dbllfd prior
     * to thf kfybobrd UI logid.
     * <p>
     * This mfthod is implfmfntfd to do nothing.  Subdlbssfs would
     * normblly ovfrridf this mfthod if thfy prodfss somf
     * kfy fvfnts thfmsflvfs.  If thf fvfnt is prodfssfd,
     * it should bf donsumfd.
     *
     * @pbrbm f thf fvfnt to bf prodfssfd
     */
    protfdtfd void prodfssComponfntKfyEvfnt(KfyEvfnt f) {
    }

    /** Ovfrridfs <dodf>prodfssKfyEvfnt</dodf> to prodfss fvfnts. **/
    protfdtfd void prodfssKfyEvfnt(KfyEvfnt f) {
      boolfbn rfsult;
      boolfbn shouldProdfssKfy;

      // This givfs thf kfy fvfnt listfnfrs b drbdk bt thf fvfnt
      supfr.prodfssKfyEvfnt(f);

      // givf thf domponfnt itsflf b drbdk bt thf fvfnt
      if (! f.isConsumfd()) {
          prodfssComponfntKfyEvfnt(f);
      }

      shouldProdfssKfy = KfybobrdStbtf.shouldProdfss(f);

      if(f.isConsumfd()) {
        rfturn;
      }

      if (shouldProdfssKfy && prodfssKfyBindings(f, f.gftID() ==
                                                 KfyEvfnt.KEY_PRESSED)) {
          f.donsumf();
      }
    }

    /**
     * Invokfd to prodfss thf kfy bindings for <dodf>ks</dodf> bs thf rfsult
     * of thf <dodf>KfyEvfnt</dodf> <dodf>f</dodf>. This obtbins
     * thf bppropribtf <dodf>InputMbp</dodf>,
     * gfts thf binding, gfts thf bdtion from thf <dodf>AdtionMbp</dodf>,
     * bnd thfn (if thf bdtion is found bnd thf domponfnt
     * is fnbblfd) invokfs <dodf>notifyAdtion</dodf> to notify thf bdtion.
     *
     * @pbrbm ks  thf <dodf>KfyStrokf</dodf> qufrifd
     * @pbrbm f thf <dodf>KfyEvfnt</dodf>
     * @pbrbm dondition onf of thf following vblufs:
     * <ul>
     * <li>JComponfnt.WHEN_FOCUSED
     * <li>JComponfnt.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
     * <li>JComponfnt.WHEN_IN_FOCUSED_WINDOW
     * </ul>
     * @pbrbm prfssfd truf if thf kfy is prfssfd
     * @rfturn truf if thfrf wbs b binding to bn bdtion, bnd thf bdtion
     *         wbs fnbblfd
     *
     * @sindf 1.3
     */
    protfdtfd boolfbn prodfssKfyBinding(KfyStrokf ks, KfyEvfnt f,
                                        int dondition, boolfbn prfssfd) {
        InputMbp mbp = gftInputMbp(dondition, fblsf);
        AdtionMbp bm = gftAdtionMbp(fblsf);

        if(mbp != null && bm != null && isEnbblfd()) {
            Objfdt binding = mbp.gft(ks);
            Adtion bdtion = (binding == null) ? null : bm.gft(binding);
            if (bdtion != null) {
                rfturn SwingUtilitifs.notifyAdtion(bdtion, ks, f, this,
                                                   f.gftModififrs());
            }
        }
        rfturn fblsf;
    }

    /**
     * This is invokfd bs thf rfsult of b <dodf>KfyEvfnt</dodf>
     * thbt wbs not donsumfd by thf <dodf>FodusMbnbgfr</dodf>,
     * <dodf>KfyListfnfrs</dodf>, or thf domponfnt. It will first try
     * <dodf>WHEN_FOCUSED</dodf> bindings,
     * thfn <dodf>WHEN_ANCESTOR_OF_FOCUSED_COMPONENT</dodf> bindings,
     * bnd finblly <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> bindings.
     *
     * @pbrbm f thf undonsumfd <dodf>KfyEvfnt</dodf>
     * @pbrbm prfssfd truf if thf kfy is prfssfd
     * @rfturn truf if thfrf is b kfy binding for <dodf>f</dodf>
     */
    boolfbn prodfssKfyBindings(KfyEvfnt f, boolfbn prfssfd) {
      if (!SwingUtilitifs.isVblidKfyEvfntForKfyBindings(f)) {
          rfturn fblsf;
      }
      // Gft thf KfyStrokf
      // Thfrf mby bf two kfystrokfs bssodibtfd with b low-lfvfl kfy fvfnt;
      // in this dbsf b kfystrokf mbdf of bn fxtfndfd kfy dodf hbs b priority.
      KfyStrokf ks;
      KfyStrokf ksE = null;

      if (f.gftID() == KfyEvfnt.KEY_TYPED) {
          ks = KfyStrokf.gftKfyStrokf(f.gftKfyChbr());
      }
      flsf {
          ks = KfyStrokf.gftKfyStrokf(f.gftKfyCodf(),f.gftModififrs(),
                                    (prfssfd ? fblsf:truf));
          if (f.gftKfyCodf() != f.gftExtfndfdKfyCodf()) {
              ksE = KfyStrokf.gftKfyStrokf(f.gftExtfndfdKfyCodf(),f.gftModififrs(),
                                    (prfssfd ? fblsf:truf));
          }
      }

      // Do wf hbvf b kfy binding for f?
      // If wf hbvf b binding by bn fxtfndfd dodf, usf it.
      // If not, dhfdk for rfgulbr dodf binding.
      if(ksE != null && prodfssKfyBinding(ksE, f, WHEN_FOCUSED, prfssfd)) {
          rfturn truf;
      }
      if(prodfssKfyBinding(ks, f, WHEN_FOCUSED, prfssfd))
          rfturn truf;

      /* Wf hbvf no kfy binding. Lft's try thf pbth from our pbrfnt to thf
       * window fxdludfd. Wf storf thf pbth domponfnts so wf dbn bvoid
       * bsking thf sbmf domponfnt twidf.
       */
      Contbinfr pbrfnt = this;
      whilf (pbrfnt != null && !(pbrfnt instbndfof Window) &&
             !(pbrfnt instbndfof Applft)) {
          if(pbrfnt instbndfof JComponfnt) {
              if(ksE != null && ((JComponfnt)pbrfnt).prodfssKfyBinding(ksE, f,
                               WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, prfssfd))
                  rfturn truf;
              if(((JComponfnt)pbrfnt).prodfssKfyBinding(ks, f,
                               WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, prfssfd))
                  rfturn truf;
          }
          // This is donf so thbt thf dhildrfn of b JIntfrnblFrbmf brf
          // givfn prfdfdfndf for WHEN_IN_FOCUSED_WINDOW bindings bfforf
          // othfr domponfnts WHEN_IN_FOCUSED_WINDOW bindings. This blso givfs
          // morf prfdfdfndf to thf WHEN_IN_FOCUSED_WINDOW bindings of thf
          // JIntfrnblFrbmf's dhildrfn vs thf
          // WHEN_ANCESTOR_OF_FOCUSED_COMPONENT bindings of thf pbrfnts.
          // mbybf gfnfrblizf from JIntfrnblFrbmf (likf isFodusCydlfRoot).
          if ((pbrfnt instbndfof JIntfrnblFrbmf) &&
              JComponfnt.prodfssKfyBindingsForAllComponfnts(f,pbrfnt,prfssfd)){
              rfturn truf;
          }
          pbrfnt = pbrfnt.gftPbrfnt();
      }

      /* No domponfnts bftwffn thf fodusfd domponfnt bnd thf window is
       * bdtublly intfrfstfd by thf kfy fvfnt. Lft's try thf othfr
       * JComponfnt in this window.
       */
      if(pbrfnt != null) {
        rfturn JComponfnt.prodfssKfyBindingsForAllComponfnts(f,pbrfnt,prfssfd);
      }
      rfturn fblsf;
    }

    stbtid boolfbn prodfssKfyBindingsForAllComponfnts(KfyEvfnt f,
                                      Contbinfr dontbinfr, boolfbn prfssfd) {
        whilf (truf) {
            if (KfybobrdMbnbgfr.gftCurrfntMbnbgfr().firfKfybobrdAdtion(
                                f, prfssfd, dontbinfr)) {
                rfturn truf;
            }
            if (dontbinfr instbndfof Popup.HfbvyWfightWindow) {
                dontbinfr = ((Window)dontbinfr).gftOwnfr();
            }
            flsf {
                rfturn fblsf;
            }
        }
    }

    /**
     * Rfgistfrs thf tfxt to displby in b tool tip.
     * Thf tfxt displbys whfn thf dursor lingfrs ovfr thf domponfnt.
     * <p>
     * Sff <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/tooltip.html">How to Usf Tool Tips</b>
     * in <fm>Thf Jbvb Tutoribl</fm>
     * for furthfr dodumfntbtion.
     *
     * @pbrbm tfxt  thf string to displby; if thf tfxt is <dodf>null</dodf>,
     *              thf tool tip is turnfd off for this domponfnt
     * @sff #TOOL_TIP_TEXT_KEY
     * @bfbninfo
     *   prfffrrfd: truf
     * dfsdription: Thf tfxt to displby in b tool tip.
     */
    publid void sftToolTipTfxt(String tfxt) {
        String oldTfxt = gftToolTipTfxt();
        putClifntPropfrty(TOOL_TIP_TEXT_KEY, tfxt);
        ToolTipMbnbgfr toolTipMbnbgfr = ToolTipMbnbgfr.shbrfdInstbndf();
        if (tfxt != null) {
            if (oldTfxt == null) {
                toolTipMbnbgfr.rfgistfrComponfnt(this);
            }
        } flsf {
            toolTipMbnbgfr.unrfgistfrComponfnt(this);
        }
    }

    /**
     * Rfturns thf tooltip string thbt hbs bffn sft with
     * <dodf>sftToolTipTfxt</dodf>.
     *
     * @rfturn thf tfxt of thf tool tip
     * @sff #TOOL_TIP_TEXT_KEY
     */
    publid String gftToolTipTfxt() {
        rfturn (String)gftClifntPropfrty(TOOL_TIP_TEXT_KEY);
    }


    /**
     * Rfturns thf string to bf usfd bs thf tooltip for <i>fvfnt</i>.
     * By dffbult this rfturns bny string sft using
     * <dodf>sftToolTipTfxt</dodf>.  If b domponfnt providfs
     * morf fxtfnsivf API to support difffring tooltips bt difffrfnt lodbtions,
     * this mfthod should bf ovfrriddfn.
     *
     * @pbrbm fvfnt thf {@dodf MousfEvfnt} thbt initibtfd thf
     *              {@dodf ToolTip} displby
     * @rfturn b string dontbining thf  tooltip
     */
    publid String gftToolTipTfxt(MousfEvfnt fvfnt) {
        rfturn gftToolTipTfxt();
    }

    /**
     * Rfturns thf tooltip lodbtion in this domponfnt's doordinbtf systfm.
     * If <dodf>null</dodf> is rfturnfd, Swing will dhoosf b lodbtion.
     * Thf dffbult implfmfntbtion rfturns <dodf>null</dodf>.
     *
     * @pbrbm fvfnt  thf <dodf>MousfEvfnt</dodf> thbt dbusfd thf
     *          <dodf>ToolTipMbnbgfr</dodf> to show thf tooltip
     * @rfturn blwbys rfturns <dodf>null</dodf>
     */
    publid Point gftToolTipLodbtion(MousfEvfnt fvfnt) {
        rfturn null;
    }

    /**
     * Rfturns thf prfffrrfd lodbtion to displby thf popup mfnu in this
     * domponfnt's doordinbtf systfm. It is up to thf look bnd fffl to
     * honor this propfrty, somf mby dhoosf to ignorf it.
     * If {@dodf null}, thf look bnd fffl will dhoosf b suitbblf lodbtion.
     *
     * @pbrbm fvfnt thf {@dodf MousfEvfnt} thbt triggfrfd thf popup to bf
     *        shown, or {@dodf null} if thf popup is not bfing shown bs thf
     *        rfsult of b mousf fvfnt
     * @rfturn lodbtion to displby thf {@dodf JPopupMfnu}, or {@dodf null}
     * @sindf 1.5
     */
    publid Point gftPopupLodbtion(MousfEvfnt fvfnt) {
        rfturn null;
    }


    /**
     * Rfturns thf instbndf of <dodf>JToolTip</dodf> thbt should bf usfd
     * to displby thf tooltip.
     * Componfnts typidblly would not ovfrridf this mfthod,
     * but it dbn bf usfd to
     * dbusf difffrfnt tooltips to bf displbyfd difffrfntly.
     *
     * @rfturn thf <dodf>JToolTip</dodf> usfd to displby this toolTip
     */
    publid JToolTip drfbtfToolTip() {
        JToolTip tip = nfw JToolTip();
        tip.sftComponfnt(this);
        rfturn tip;
    }

    /**
     * Forwbrds thf <dodf>sdrollRfdtToVisiblf()</dodf> mfssbgf to thf
     * <dodf>JComponfnt</dodf>'s pbrfnt. Componfnts thbt dbn sfrvidf
     * thf rfqufst, sudh bs <dodf>JVifwport</dodf>,
     * ovfrridf this mfthod bnd pfrform thf sdrolling.
     *
     * @pbrbm bRfdt thf visiblf <dodf>Rfdtbnglf</dodf>
     * @sff JVifwport
     */
    publid void sdrollRfdtToVisiblf(Rfdtbnglf bRfdt) {
        Contbinfr pbrfnt;
        int dx = gftX(), dy = gftY();

        for (pbrfnt = gftPbrfnt();
                 !(pbrfnt == null) &&
                 !(pbrfnt instbndfof JComponfnt) &&
                 !(pbrfnt instbndfof CfllRfndfrfrPbnf);
             pbrfnt = pbrfnt.gftPbrfnt()) {
             Rfdtbnglf bounds = pbrfnt.gftBounds();

             dx += bounds.x;
             dy += bounds.y;
        }

        if (!(pbrfnt == null) && !(pbrfnt instbndfof CfllRfndfrfrPbnf)) {
            bRfdt.x += dx;
            bRfdt.y += dy;

            ((JComponfnt)pbrfnt).sdrollRfdtToVisiblf(bRfdt);
            bRfdt.x -= dx;
            bRfdt.y -= dy;
        }
    }

    /**
     * Sfts thf <dodf>butosdrolls</dodf> propfrty.
     * If <dodf>truf</dodf> mousf drbggfd fvfnts will bf
     * synthftidblly gfnfrbtfd whfn thf mousf is drbggfd
     * outsidf of thf domponfnt's bounds bnd mousf motion
     * hbs pbusfd (whilf thf button dontinufs to bf hfld
     * down). Thf synthftid fvfnts mbkf it bppfbr thbt thf
     * drbg gfsturf hbs rfsumfd in thf dirfdtion fstbblishfd whfn
     * thf domponfnt's boundbry wbs drossfd.  Componfnts thbt
     * support butosdrolling must hbndlf <dodf>mousfDrbggfd</dodf>
     * fvfnts by dblling <dodf>sdrollRfdtToVisiblf</dodf> with b
     * rfdtbnglf thbt dontbins thf mousf fvfnt's lodbtion.  All of
     * thf Swing domponfnts thbt support itfm sflfdtion bnd brf
     * typidblly displbyfd in b <dodf>JSdrollPbnf</dodf>
     * (<dodf>JTbblf</dodf>, <dodf>JList</dodf>, <dodf>JTrff</dodf>,
     * <dodf>JTfxtArfb</dodf>, bnd <dodf>JEditorPbnf</dodf>)
     * blrfbdy hbndlf mousf drbggfd fvfnts in this wby.  To fnbblf
     * butosdrolling in bny othfr domponfnt, bdd b mousf motion
     * listfnfr thbt dblls <dodf>sdrollRfdtToVisiblf</dodf>.
     * For fxbmplf, givfn b <dodf>JPbnfl</dodf>, <dodf>myPbnfl</dodf>:
     * <prf>
     * MousfMotionListfnfr doSdrollRfdtToVisiblf = nfw MousfMotionAdbptfr() {
     *     publid void mousfDrbggfd(MousfEvfnt f) {
     *        Rfdtbnglf r = nfw Rfdtbnglf(f.gftX(), f.gftY(), 1, 1);
     *        ((JPbnfl)f.gftSourdf()).sdrollRfdtToVisiblf(r);
     *    }
     * };
     * myPbnfl.bddMousfMotionListfnfr(doSdrollRfdtToVisiblf);
     * </prf>
     * Thf dffbult vbluf of thf <dodf>butoSdrolls</dodf>
     * propfrty is <dodf>fblsf</dodf>.
     *
     * @pbrbm butosdrolls if truf, synthftid mousf drbggfd fvfnts
     *   brf gfnfrbtfd whfn thf mousf is drbggfd outsidf of b domponfnt's
     *   bounds bnd thf mousf button dontinufs to bf hfld down; othfrwisf
     *   fblsf
     * @sff #gftAutosdrolls
     * @sff JVifwport
     * @sff JSdrollPbnf
     *
     * @bfbninfo
     *      fxpfrt: truf
     * dfsdription: Dftfrminfs if this domponfnt butombtidblly sdrolls its dontfnts whfn drbggfd.
     */
    publid void sftAutosdrolls(boolfbn butosdrolls) {
        sftFlbg(AUTOSCROLLS_SET, truf);
        if (this.butosdrolls != butosdrolls) {
            this.butosdrolls = butosdrolls;
            if (butosdrolls) {
                fnbblfEvfnts(AWTEvfnt.MOUSE_EVENT_MASK);
                fnbblfEvfnts(AWTEvfnt.MOUSE_MOTION_EVENT_MASK);
            }
            flsf {
                Autosdrollfr.stop(this);
            }
        }
    }

    /**
     * Gfts thf <dodf>butosdrolls</dodf> propfrty.
     *
     * @rfturn thf vbluf of thf <dodf>butosdrolls</dodf> propfrty
     * @sff JVifwport
     * @sff #sftAutosdrolls
     */
    publid boolfbn gftAutosdrolls() {
        rfturn butosdrolls;
    }

    /**
     * Sfts thf {@dodf TrbnsffrHbndlfr}, whidh providfs support for trbnsffr
     * of dbtb into bnd out of this domponfnt vib dut/dopy/pbstf bnd drbg
     * bnd drop. This mby bf {@dodf null} if thf domponfnt dofs not support
     * dbtb trbnsffr opfrbtions.
     * <p>
     * If thf nfw {@dodf TrbnsffrHbndlfr} is not {@dodf null}, this mfthod
     * blso instblls b <b>nfw</b> {@dodf DropTbrgft} on thf domponfnt to
     * bdtivbtf drop hbndling through thf {@dodf TrbnsffrHbndlfr} bnd bdtivbtf
     * bny built-in support (sudh bs dbldulbting bnd displbying potfntibl drop
     * lodbtions). If you do not wish for this domponfnt to rfspond in bny wby
     * to drops, you dbn disbblf drop support fntirfly fithfr by rfmoving thf
     * drop tbrgft ({@dodf sftDropTbrgft(null)}) or by df-bdtivbting it
     * ({@dodf gftDropTbgft().sftAdtivf(fblsf)}).
     * <p>
     * If thf nfw {@dodf TrbnsffrHbndlfr} is {@dodf null}, this mfthod rfmovfs
     * thf drop tbrgft.
     * <p>
     * Undfr two dirdumstbndfs, this mfthod dofs not modify thf drop tbrgft:
     * First, if thf fxisting drop tbrgft on this domponfnt wbs fxpliditly
     * sft by thf dfvflopfr to b {@dodf non-null} vbluf. Sfdond, if thf
     * systfm propfrty {@dodf supprfssSwingDropSupport} is {@dodf truf}. Thf
     * dffbult vbluf for thf systfm propfrty is {@dodf fblsf}.
     * <p>
     * Plfbsf sff
     * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/dnd/indfx.html">
     * How to Usf Drbg bnd Drop bnd Dbtb Trbnsffr</b>,
     * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>, for morf informbtion.
     *
     * @pbrbm nfwHbndlfr thf nfw {@dodf TrbnsffrHbndlfr}
     *
     * @sff TrbnsffrHbndlfr
     * @sff #gftTrbnsffrHbndlfr
     * @sindf 1.4
     * @bfbninfo
     *        bound: truf
     *       hiddfn: truf
     *  dfsdription: Mfdhbnism for trbnsffr of dbtb to bnd from thf domponfnt
     */
    publid void sftTrbnsffrHbndlfr(TrbnsffrHbndlfr nfwHbndlfr) {
        TrbnsffrHbndlfr oldHbndlfr = (TrbnsffrHbndlfr)gftClifntPropfrty(
                                      JComponfnt_TRANSFER_HANDLER);
        putClifntPropfrty(JComponfnt_TRANSFER_HANDLER, nfwHbndlfr);

        SwingUtilitifs.instbllSwingDropTbrgftAsNfdfssbry(this, nfwHbndlfr);
        firfPropfrtyChbngf("trbnsffrHbndlfr", oldHbndlfr, nfwHbndlfr);
    }

    /**
     * Gfts thf <dodf>trbnsffrHbndlfr</dodf> propfrty.
     *
     * @rfturn  thf vbluf of thf <dodf>trbnsffrHbndlfr</dodf> propfrty
     *
     * @sff TrbnsffrHbndlfr
     * @sff #sftTrbnsffrHbndlfr
     * @sindf 1.4
     */
    publid TrbnsffrHbndlfr gftTrbnsffrHbndlfr() {
        rfturn (TrbnsffrHbndlfr)gftClifntPropfrty(JComponfnt_TRANSFER_HANDLER);
    }

    /**
     * Cbldulbtfs b dustom drop lodbtion for this typf of domponfnt,
     * rfprfsfnting whfrf b drop bt thf givfn point should insfrt dbtb.
     * <dodf>null</dodf> is rfturnfd if this domponfnt dofsn't dbldulbtf
     * dustom drop lodbtions. In this dbsf, <dodf>TrbnsffrHbndlfr</dodf>
     * will providf b dffbult <dodf>DropLodbtion</dodf> dontbining just
     * thf point.
     *
     * @pbrbm p thf point to dbldulbtf b drop lodbtion for
     * @rfturn thf drop lodbtion, or <dodf>null</dodf>
     */
    TrbnsffrHbndlfr.DropLodbtion dropLodbtionForPoint(Point p) {
        rfturn null;
    }

    /**
     * Cbllfd to sft or dlfbr thf drop lodbtion during b DnD opfrbtion.
     * In somf dbsfs, thf domponfnt mby nffd to usf its intfrnbl sflfdtion
     * tfmporbrily to indidbtf thf drop lodbtion. To hflp fbdilitbtf this,
     * this mfthod rfturns bnd bddfpts bs b pbrbmftfr b stbtf objfdt.
     * This stbtf objfdt dbn bf usfd to storf, bnd lbtfr rfstorf, thf sflfdtion
     * stbtf. Whbtfvfr this mfthod rfturns will bf pbssfd bbdk to it in
     * futurf dblls, bs thf stbtf pbrbmftfr. If it wbnts thf DnD systfm to
     * dontinuf storing thf sbmf stbtf, it must pbss it bbdk fvfry timf.
     * Hfrf's how this is usfd:
     * <p>
     * Lft's sby thbt on thf first dbll to this mfthod thf domponfnt dfdidfs
     * to sbvf somf stbtf (bfdbusf it is bbout to usf thf sflfdtion to show
     * b drop indfx). It dbn rfturn b stbtf objfdt to thf dbllfr fndbpsulbting
     * bny sbvfd sflfdtion stbtf. On b sfdond dbll, lft's sby thf drop lodbtion
     * is bfing dhbngfd to somfthing flsf. Thf domponfnt dofsn't nffd to
     * rfstorf bnything yft, so it simply pbssfs bbdk thf sbmf stbtf objfdt
     * to hbvf thf DnD systfm dontinuf storing it. Finblly, lft's sby this
     * mfthod is mfssbgfd with <dodf>null</dodf>. This mfbns DnD
     * is finishfd with this domponfnt for now, mfbning it should rfstorf
     * stbtf. At this point, it dbn usf thf stbtf pbrbmftfr to rfstorf
     * sbid stbtf, bnd of doursf rfturn <dodf>null</dodf> sindf thfrf's
     * no longfr bnything to storf.
     *
     * @pbrbm lodbtion thf drop lodbtion (bs dbldulbtfd by
     *        <dodf>dropLodbtionForPoint</dodf>) or <dodf>null</dodf>
     *        if thfrf's no longfr b vblid drop lodbtion
     * @pbrbm stbtf thf stbtf objfdt sbvfd fbrlifr for this domponfnt,
     *        or <dodf>null</dodf>
     * @pbrbm forDrop whfthfr or not thf mfthod is bfing dbllfd bfdbusf bn
     *        bdtubl drop oddurrfd
     * @rfturn bny sbvfd stbtf for this domponfnt, or <dodf>null</dodf> if nonf
     */
    Objfdt sftDropLodbtion(TrbnsffrHbndlfr.DropLodbtion lodbtion,
                           Objfdt stbtf,
                           boolfbn forDrop) {

        rfturn null;
    }

    /**
     * Cbllfd to indidbtf to this domponfnt thbt DnD is donf.
     * Nffdfd by <dodf>JTrff</dodf>.
     */
    void dndDonf() {
    }

    /**
     * Prodfssfs mousf fvfnts oddurring on this domponfnt by
     * dispbtdhing thfm to bny rfgistfrfd
     * <dodf>MousfListfnfr</dodf> objfdts, rfffr to
     * {@link jbvb.bwt.Componfnt#prodfssMousfEvfnt(MousfEvfnt)}
     * for b domplftf dfsdription of this mfthod.
     *
     * @pbrbm       f thf mousf fvfnt
     * @sff         jbvb.bwt.Componfnt#prodfssMousfEvfnt
     * @sindf       1.5
     */
    protfdtfd void prodfssMousfEvfnt(MousfEvfnt f) {
        if (butosdrolls && f.gftID() == MousfEvfnt.MOUSE_RELEASED) {
            Autosdrollfr.stop(this);
        }
        supfr.prodfssMousfEvfnt(f);
    }

    /**
     * Prodfssfs mousf motion fvfnts, sudh bs MousfEvfnt.MOUSE_DRAGGED.
     *
     * @pbrbm f thf <dodf>MousfEvfnt</dodf>
     * @sff MousfEvfnt
     */
    protfdtfd void prodfssMousfMotionEvfnt(MousfEvfnt f) {
        boolfbn dispbtdh = truf;
        if (butosdrolls && f.gftID() == MousfEvfnt.MOUSE_DRAGGED) {
            // Wf don't wbnt to do thf drbgs whfn thf mousf movfs if wf'rf
            // butosdrolling.  It mbkfs it fffl spbstid.
            dispbtdh = !Autosdrollfr.isRunning(this);
            Autosdrollfr.prodfssMousfDrbggfd(f);
        }
        if (dispbtdh) {
            supfr.prodfssMousfMotionEvfnt(f);
        }
    }

    // Innfr dlbssfs dbn't gft bt this mfthod from b supfr dlbss
    void supfrProdfssMousfMotionEvfnt(MousfEvfnt f) {
        supfr.prodfssMousfMotionEvfnt(f);
    }

    /**
     * This is invokfd by thf <dodf>RfpbintMbnbgfr</dodf> if
     * <dodf>drfbtfImbgf</dodf> is dbllfd on thf domponfnt.
     *
     * @pbrbm nfwVbluf truf if thf doublf bufffr imbgf wbs drfbtfd from this domponfnt
     */
    void sftCrfbtfdDoublfBufffr(boolfbn nfwVbluf) {
        sftFlbg(CREATED_DOUBLE_BUFFER, nfwVbluf);
    }

    /**
     * Rfturns truf if thf <dodf>RfpbintMbnbgfr</dodf>
     * drfbtfd thf doublf bufffr imbgf from thf domponfnt.
     *
     * @rfturn truf if this domponfnt hbd b doublf bufffr imbgf, fblsf othfrwisf
     */
    boolfbn gftCrfbtfdDoublfBufffr() {
        rfturn gftFlbg(CREATED_DOUBLE_BUFFER);
    }

    /**
     * <dodf>AdtionStbndin</dodf> is usfd bs b stbndin for
     * <dodf>AdtionListfnfrs</dodf> thbt brf
     * bddfd vib <dodf>rfgistfrKfybobrdAdtion</dodf>.
     */
    finbl dlbss AdtionStbndin implfmfnts Adtion {
        privbtf finbl AdtionListfnfr bdtionListfnfr;
        privbtf finbl String dommbnd;
        // This will bf non-null if bdtionListfnfr is bn Adtion.
        privbtf finbl Adtion bdtion;

        AdtionStbndin(AdtionListfnfr bdtionListfnfr, String dommbnd) {
            this.bdtionListfnfr = bdtionListfnfr;
            if (bdtionListfnfr instbndfof Adtion) {
                this.bdtion = (Adtion)bdtionListfnfr;
            }
            flsf {
                this.bdtion = null;
            }
            this.dommbnd = dommbnd;
        }

        publid Objfdt gftVbluf(String kfy) {
            if (kfy != null) {
                if (kfy.fqubls(Adtion.ACTION_COMMAND_KEY)) {
                    rfturn dommbnd;
                }
                if (bdtion != null) {
                    rfturn bdtion.gftVbluf(kfy);
                }
                if (kfy.fqubls(NAME)) {
                    rfturn "AdtionStbndin";
                }
            }
            rfturn null;
        }

        publid boolfbn isEnbblfd() {
            if (bdtionListfnfr == null) {
                // This kffps thf old sfmbntids whfrf
                // rfgistfrKfybobrdAdtion(null) would fssfntibly rfmovf
                // thf binding. Wf don't rfmovf thf binding from thf
                // InputMbp bs thbt would still bllow pbrfnt InputMbps
                // bindings to bf bddfssfd.
                rfturn fblsf;
            }
            if (bdtion == null) {
                rfturn truf;
            }
            rfturn bdtion.isEnbblfd();
        }

        publid void bdtionPfrformfd(AdtionEvfnt bf) {
            if (bdtionListfnfr != null) {
                bdtionListfnfr.bdtionPfrformfd(bf);
            }
        }

        // Wf don't bllow bny vblufs to bf bddfd.
        publid void putVbluf(String kfy, Objfdt vbluf) {}

        // Dofs nothing, our fnbblfdnfss is dftfrmifnd from our bsodibtfd
        // bdtion.
        publid void sftEnbblfd(boolfbn b) { }

        publid void bddPropfrtyChbngfListfnfr
                    (PropfrtyChbngfListfnfr listfnfr) {}
        publid void rfmovfPropfrtyChbngfListfnfr
                          (PropfrtyChbngfListfnfr listfnfr) {}
    }


    // This dlbss is usfd by thf KfybobrdStbtf dlbss to providf b singlf
    // instbndf thbt dbn bf storfd in thf AppContfxt.
    stbtid finbl dlbss IntVfdtor {
        int brrby[] = null;
        int dount = 0;
        int dbpbdity = 0;

        int sizf() {
            rfturn dount;
        }

        int flfmfntAt(int indfx) {
            rfturn brrby[indfx];
        }

        void bddElfmfnt(int vbluf) {
            if (dount == dbpbdity) {
                dbpbdity = (dbpbdity + 2) * 2;
                int[] nfwbrrby = nfw int[dbpbdity];
                if (dount > 0) {
                    Systfm.brrbydopy(brrby, 0, nfwbrrby, 0, dount);
                }
                brrby = nfwbrrby;
            }
            brrby[dount++] = vbluf;
        }

        void sftElfmfntAt(int vbluf, int indfx) {
            brrby[indfx] = vbluf;
        }
    }

    @SupprfssWbrnings("sfribl")
    stbtid dlbss KfybobrdStbtf implfmfnts Sfriblizbblf {
        privbtf stbtid finbl Objfdt kfyCodfsKfy =
            JComponfnt.KfybobrdStbtf.dlbss;

        // Gft thf brrby of kfy dodfs from thf AppContfxt.
        stbtid IntVfdtor gftKfyCodfArrby() {
            IntVfdtor iv =
                (IntVfdtor)SwingUtilitifs.bppContfxtGft(kfyCodfsKfy);
            if (iv == null) {
                iv = nfw IntVfdtor();
                SwingUtilitifs.bppContfxtPut(kfyCodfsKfy, iv);
            }
            rfturn iv;
        }

        stbtid void rfgistfrKfyPrfssfd(int kfyCodf) {
            IntVfdtor kdb = gftKfyCodfArrby();
            int dount = kdb.sizf();
            int i;
            for(i=0;i<dount;i++) {
                if(kdb.flfmfntAt(i) == -1){
                    kdb.sftElfmfntAt(kfyCodf, i);
                    rfturn;
                }
            }
            kdb.bddElfmfnt(kfyCodf);
        }

        stbtid void rfgistfrKfyRflfbsfd(int kfyCodf) {
            IntVfdtor kdb = gftKfyCodfArrby();
            int dount = kdb.sizf();
            int i;
            for(i=0;i<dount;i++) {
                if(kdb.flfmfntAt(i) == kfyCodf) {
                    kdb.sftElfmfntAt(-1, i);
                    rfturn;
                }
            }
        }

        stbtid boolfbn kfyIsPrfssfd(int kfyCodf) {
            IntVfdtor kdb = gftKfyCodfArrby();
            int dount = kdb.sizf();
            int i;
            for(i=0;i<dount;i++) {
                if(kdb.flfmfntAt(i) == kfyCodf) {
                    rfturn truf;
                }
            }
            rfturn fblsf;
        }

        /**
         * Updbtfs intfrnbl stbtf of thf KfybobrdStbtf bnd rfturns truf
         * if thf fvfnt should bf prodfssfd furthfr.
         */
        stbtid boolfbn shouldProdfss(KfyEvfnt f) {
            switdh (f.gftID()) {
            dbsf KfyEvfnt.KEY_PRESSED:
                if (!kfyIsPrfssfd(f.gftKfyCodf())) {
                    rfgistfrKfyPrfssfd(f.gftKfyCodf());
                }
                rfturn truf;
            dbsf KfyEvfnt.KEY_RELEASED:
                // Wf brf fordfd to prodfss VK_PRINTSCREEN sfpbrbtfly bfdbusf
                // thf Windows dofsn't gfnfrbtf thf kfy prfssfd fvfnt for
                // printsdrffn bnd it blodk thf prodfssing of kfy rflfbsf
                // fvfnt for printsdrffn.
                if (kfyIsPrfssfd(f.gftKfyCodf()) || f.gftKfyCodf()==KfyEvfnt.VK_PRINTSCREEN) {
                    rfgistfrKfyRflfbsfd(f.gftKfyCodf());
                    rfturn truf;
                }
                rfturn fblsf;
            dbsf KfyEvfnt.KEY_TYPED:
                rfturn truf;
            dffbult:
                // Not b known KfyEvfnt typf, bbil.
                rfturn fblsf;
            }
      }
    }

    stbtid finbl sun.bwt.RfqufstFodusControllfr fodusControllfr =
        nfw sun.bwt.RfqufstFodusControllfr() {
            publid boolfbn bddfptRfqufstFodus(Componfnt from, Componfnt to,
                                              boolfbn tfmporbry, boolfbn fodusfdWindowChbngfAllowfd,
                                              sun.bwt.CbusfdFodusEvfnt.Cbusf dbusf)
            {
                if ((to == null) || !(to instbndfof JComponfnt)) {
                    rfturn truf;
                }

                if ((from == null) || !(from instbndfof JComponfnt)) {
                    rfturn truf;
                }

                JComponfnt tbrgft = (JComponfnt) to;
                if (!tbrgft.gftVfrifyInputWhfnFodusTbrgft()) {
                    rfturn truf;
                }

                JComponfnt jFodusOwnfr = (JComponfnt)from;
                InputVfrififr iv = jFodusOwnfr.gftInputVfrififr();

                if (iv == null) {
                    rfturn truf;
                } flsf {
                    Objfdt durrfntSourdf = SwingUtilitifs.bppContfxtGft(
                            INPUT_VERIFIER_SOURCE_KEY);
                    if (durrfntSourdf == jFodusOwnfr) {
                        // Wf'rf durrfntly dblling into thf InputVfrififr
                        // for this domponfnt, so bllow thf fodus dhbngf.
                        rfturn truf;
                    }
                    SwingUtilitifs.bppContfxtPut(INPUT_VERIFIER_SOURCE_KEY,
                                                 jFodusOwnfr);
                    try {
                        rfturn iv.shouldYifldFodus(jFodusOwnfr);
                    } finblly {
                        if (durrfntSourdf != null) {
                            // Wf'rf blrfbdy in thf InputVfrififr for
                            // durrfntSourdf. By rfsftting thf durrfntSourdf
                            // wf fnsurf thbt if thf InputVfrififr for
                            // durrfntSourdf dofs b rfqufstFodus, wf don't
                            // try bnd run thf InputVfrififr bgbin.
                            SwingUtilitifs.bppContfxtPut(
                                INPUT_VERIFIER_SOURCE_KEY, durrfntSourdf);
                        } flsf {
                            SwingUtilitifs.bppContfxtRfmovf(
                                INPUT_VERIFIER_SOURCE_KEY);
                        }
                    }
                }
            }
        };

    /*
     * --- Addfssibility Support ---
     */

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>jbvb.bwt.Componfnt.sftEnbblfd(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid void fnbblf() {
        if (isEnbblfd() != truf) {
            supfr.fnbblf();
            if (bddfssiblfContfxt != null) {
                bddfssiblfContfxt.firfPropfrtyChbngf(
                    AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                    null, AddfssiblfStbtf.ENABLED);
            }
        }
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>jbvb.bwt.Componfnt.sftEnbblfd(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid void disbblf() {
        if (isEnbblfd() != fblsf) {
            supfr.disbblf();
            if (bddfssiblfContfxt != null) {
                bddfssiblfContfxt.firfPropfrtyChbngf(
                    AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                    AddfssiblfStbtf.ENABLED, null);
            }
        }
    }

    /**
     * Innfr dlbss of JComponfnt usfd to providf dffbult support for
     * bddfssibility.  This dlbss is not mfbnt to bf usfd dirfdtly by
     * bpplidbtion dfvflopfrs, but is instfbd mfbnt only to bf
     * subdlbssfd by domponfnt dfvflopfrs.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
     * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
     * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
     * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    publid bbstrbdt dlbss AddfssiblfJComponfnt fxtfnds AddfssiblfAWTContbinfr
       implfmfnts AddfssiblfExtfndfdComponfnt
    {
        /**
         * Though thf dlbss is bbstrbdt, this should bf dbllfd by
         * bll sub-dlbssfs.
         */
        protfdtfd AddfssiblfJComponfnt() {
            supfr();
        }

        /**
         * Numbfr of PropfrtyChbngfListfnfr objfdts rfgistfrfd. It's usfd
         * to bdd/rfmovf ContbinfrListfnfr bnd FodusListfnfr to trbdk
         * tbrgft JComponfnt's stbtf
         */
        privbtf volbtilf trbnsifnt int propfrtyListfnfrsCount = 0;

        /**
         * This fifld duplidbtfs thf fundtion of thf bddfssiblfAWTFodusHbndlfr fifld
         * in jbvb.bwt.Componfnt.AddfssiblfAWTComponfnt, so it hbs bffn dfprfdbtfd.
         */
        @Dfprfdbtfd
        protfdtfd FodusListfnfr bddfssiblfFodusHbndlfr = null;

        /**
         * Firf PropfrtyChbngf listfnfr, if onf is rfgistfrfd,
         * whfn dhildrfn bddfd/rfmovfd.
         */
        protfdtfd dlbss AddfssiblfContbinfrHbndlfr
            implfmfnts ContbinfrListfnfr {
            publid void domponfntAddfd(ContbinfrEvfnt f) {
                Componfnt d = f.gftChild();
                if (d != null && d instbndfof Addfssiblf) {
                    AddfssiblfJComponfnt.this.firfPropfrtyChbngf(
                        AddfssiblfContfxt.ACCESSIBLE_CHILD_PROPERTY,
                        null, d.gftAddfssiblfContfxt());
                }
            }
            publid void domponfntRfmovfd(ContbinfrEvfnt f) {
                Componfnt d = f.gftChild();
                if (d != null && d instbndfof Addfssiblf) {
                    AddfssiblfJComponfnt.this.firfPropfrtyChbngf(
                        AddfssiblfContfxt.ACCESSIBLE_CHILD_PROPERTY,
                        d.gftAddfssiblfContfxt(), null);
                }
            }
        }

        /**
         * Firf PropfrtyChbngf listfnfr, if onf is rfgistfrfd,
         * whfn fodus fvfnts hbppfn
         * @sindf 1.3
         */
        protfdtfd dlbss AddfssiblfFodusHbndlfr implfmfnts FodusListfnfr {
           publid void fodusGbinfd(FodusEvfnt fvfnt) {
               if (bddfssiblfContfxt != null) {
                    bddfssiblfContfxt.firfPropfrtyChbngf(
                        AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                        null, AddfssiblfStbtf.FOCUSED);
                }
            }
            publid void fodusLost(FodusEvfnt fvfnt) {
                if (bddfssiblfContfxt != null) {
                    bddfssiblfContfxt.firfPropfrtyChbngf(
                        AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                        AddfssiblfStbtf.FOCUSED, null);
                }
            }
        } // innfr dlbss AddfssiblfFodusHbndlfr


        /**
         * Adds b PropfrtyChbngfListfnfr to thf listfnfr list.
         *
         * @pbrbm listfnfr  thf PropfrtyChbngfListfnfr to bf bddfd
         */
        publid void bddPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr listfnfr) {
            if (bddfssiblfContbinfrHbndlfr == null) {
                bddfssiblfContbinfrHbndlfr = nfw AddfssiblfContbinfrHbndlfr();
            }
            if (propfrtyListfnfrsCount++ == 0) {
                JComponfnt.this.bddContbinfrListfnfr(bddfssiblfContbinfrHbndlfr);
            }
            supfr.bddPropfrtyChbngfListfnfr(listfnfr);
        }

        /**
         * Rfmovfs b PropfrtyChbngfListfnfr from thf listfnfr list.
         * This rfmovfs b PropfrtyChbngfListfnfr thbt wbs rfgistfrfd
         * for bll propfrtifs.
         *
         * @pbrbm listfnfr  thf PropfrtyChbngfListfnfr to bf rfmovfd
         */
        publid void rfmovfPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr listfnfr) {
            if (--propfrtyListfnfrsCount == 0) {
                JComponfnt.this.rfmovfContbinfrListfnfr(bddfssiblfContbinfrHbndlfr);
            }
            supfr.rfmovfPropfrtyChbngfListfnfr(listfnfr);
        }



        /**
         * Rfdursivfly sfbrdh through thf bordfr hifrbrdhy (if it fxists)
         * for b TitlfdBordfr with b non-null titlf.  This dofs b dfpth
         * first sfbrdh on first thf insidf bordfrs thfn thf outsidf bordfrs.
         * Thf bssumption is thbt titlfs mbkf rfblly prftty insidf bordfrs
         * but not vfry prftty outsidf bordfrs in dompound bordfr situbtions.
         * It's rbthfr brbitrbry, but hopffully dfdfnt UI progrbmmfrs will
         * not drfbtf multiplf titlfd bordfrs for thf sbmf domponfnt.
         *
         * @pbrbm b  thf {@dodf Bordfr} for whidh to rftrifvf its titlf
         * @rfturn thf bordfr's titlf bs b {@dodf String}, null if it hbs
         *         no titlf
         */
        protfdtfd String gftBordfrTitlf(Bordfr b) {
            String s;
            if (b instbndfof TitlfdBordfr) {
                rfturn ((TitlfdBordfr) b).gftTitlf();
            } flsf if (b instbndfof CompoundBordfr) {
                s = gftBordfrTitlf(((CompoundBordfr) b).gftInsidfBordfr());
                if (s == null) {
                    s = gftBordfrTitlf(((CompoundBordfr) b).gftOutsidfBordfr());
                }
                rfturn s;
            } flsf {
                rfturn null;
            }
        }

        // AddfssiblfContfxt mfthods
        //
        /**
         * Gfts thf bddfssiblf nbmf of this objfdt.  This should blmost nfvfr
         * rfturn jbvb.bwt.Componfnt.gftNbmf(), bs thbt gfnfrblly isn't
         * b lodblizfd nbmf, bnd dofsn't hbvf mfbning for thf usfr.  If thf
         * objfdt is fundbmfntblly b tfxt objfdt (sudh bs b mfnu itfm), thf
         * bddfssiblf nbmf should bf thf tfxt of thf objfdt (for fxbmplf,
         * "sbvf").
         * If thf objfdt hbs b tooltip, thf tooltip tfxt mby blso bf bn
         * bppropribtf String to rfturn.
         *
         * @rfturn thf lodblizfd nbmf of thf objfdt -- dbn bf null if this
         *         objfdt dofs not hbvf b nbmf
         * @sff AddfssiblfContfxt#sftAddfssiblfNbmf
         */
        publid String gftAddfssiblfNbmf() {
            String nbmf = bddfssiblfNbmf;

            // fbllbbdk to thf dlifnt nbmf propfrty
            //
            if (nbmf == null) {
                nbmf = (String)gftClifntPropfrty(AddfssiblfContfxt.ACCESSIBLE_NAME_PROPERTY);
            }

            // fbllbbdk to thf titlfd bordfr if it fxists
            //
            if (nbmf == null) {
                nbmf = gftBordfrTitlf(gftBordfr());
            }

            // fbllbbdk to thf lbbfl lbbfling us if it fxists
            //
            if (nbmf == null) {
                Objfdt o = gftClifntPropfrty(JLbbfl.LABELED_BY_PROPERTY);
                if (o instbndfof Addfssiblf) {
                    AddfssiblfContfxt bd = ((Addfssiblf) o).gftAddfssiblfContfxt();
                    if (bd != null) {
                        nbmf = bd.gftAddfssiblfNbmf();
                    }
                }
            }
            rfturn nbmf;
        }

        /**
         * Gfts thf bddfssiblf dfsdription of this objfdt.  This should bf
         * b dondisf, lodblizfd dfsdription of whbt this objfdt is - whbt
         * is its mfbning to thf usfr.  If thf objfdt hbs b tooltip, thf
         * tooltip tfxt mby bf bn bppropribtf string to rfturn, bssuming
         * it dontbins b dondisf dfsdription of thf objfdt (instfbd of just
         * thf nbmf of thf objfdt - for fxbmplf b "Sbvf" idon on b toolbbr thbt
         * hbd "sbvf" bs thf tooltip tfxt shouldn't rfturn thf tooltip
         * tfxt bs thf dfsdription, but somfthing likf "Sbvfs thf durrfnt
         * tfxt dodumfnt" instfbd).
         *
         * @rfturn thf lodblizfd dfsdription of thf objfdt -- dbn bf null if
         * this objfdt dofs not hbvf b dfsdription
         * @sff AddfssiblfContfxt#sftAddfssiblfDfsdription
         */
        publid String gftAddfssiblfDfsdription() {
            String dfsdription = bddfssiblfDfsdription;

            // fbllbbdk to thf dlifnt dfsdription propfrty
            //
            if (dfsdription == null) {
                dfsdription = (String)gftClifntPropfrty(AddfssiblfContfxt.ACCESSIBLE_DESCRIPTION_PROPERTY);
            }

            // fbllbbdk to thf tool tip tfxt if it fxists
            //
            if (dfsdription == null) {
                try {
                    dfsdription = gftToolTipTfxt();
                } dbtdh (Exdfption f) {
                    // Just in dbsf thf subdlbss ovfrrodf thf
                    // gftToolTipTfxt mfthod bnd bdtublly
                    // rfquirfs b MousfEvfnt.
                    // [[[FIXME:  WDW - wf probbbly should rfquirf this
                    // mfthod to tbkf b MousfEvfnt bnd just pbss it on
                    // to gftToolTipTfxt.  Thf swing-fffdbbdk trbffid
                    // lfbds mf to bflifvf gftToolTipTfxt might dhbngf,
                    // though, so I wbs hfsitbnt to mbkf this dhbngf bt
                    // this timf.]]]
                }
            }

            // fbllbbdk to thf lbbfl lbbfling us if it fxists
            //
            if (dfsdription == null) {
                Objfdt o = gftClifntPropfrty(JLbbfl.LABELED_BY_PROPERTY);
                if (o instbndfof Addfssiblf) {
                    AddfssiblfContfxt bd = ((Addfssiblf) o).gftAddfssiblfContfxt();
                    if (bd != null) {
                        dfsdription = bd.gftAddfssiblfDfsdription();
                    }
                }
            }

            rfturn dfsdription;
        }

        /**
         * Gfts thf rolf of this objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing thf rolf of thf
         * objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.SWING_COMPONENT;
        }

        /**
         * Gfts thf stbtf of this objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfStbtfSft dontbining thf durrfnt
         * stbtf sft of thf objfdt
         * @sff AddfssiblfStbtf
         */
        publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
            AddfssiblfStbtfSft stbtfs = supfr.gftAddfssiblfStbtfSft();
            if (JComponfnt.this.isOpbquf()) {
                stbtfs.bdd(AddfssiblfStbtf.OPAQUE);
            }
            rfturn stbtfs;
        }

        /**
         * Rfturns thf numbfr of bddfssiblf dhildrfn in thf objfdt.  If bll
         * of thf dhildrfn of this objfdt implfmfnt Addfssiblf, thbn this
         * mfthod should rfturn thf numbfr of dhildrfn of this objfdt.
         *
         * @rfturn thf numbfr of bddfssiblf dhildrfn in thf objfdt.
         */
        publid int gftAddfssiblfChildrfnCount() {
            rfturn supfr.gftAddfssiblfChildrfnCount();
        }

        /**
         * Rfturns thf nth Addfssiblf dhild of thf objfdt.
         *
         * @pbrbm i zfro-bbsfd indfx of dhild
         * @rfturn thf nth Addfssiblf dhild of thf objfdt
         */
        publid Addfssiblf gftAddfssiblfChild(int i) {
            rfturn supfr.gftAddfssiblfChild(i);
        }

        // ----- AddfssiblfExtfndfdComponfnt

        /**
         * Rfturns thf AddfssiblfExtfndfdComponfnt
         *
         * @rfturn thf AddfssiblfExtfndfdComponfnt
         */
        AddfssiblfExtfndfdComponfnt gftAddfssiblfExtfndfdComponfnt() {
            rfturn this;
        }

        /**
         * Rfturns thf tool tip tfxt
         *
         * @rfturn thf tool tip tfxt, if supportfd, of thf objfdt;
         * othfrwisf, null
         * @sindf 1.4
         */
        publid String gftToolTipTfxt() {
            rfturn JComponfnt.this.gftToolTipTfxt();
        }

        /**
         * Rfturns thf titlfd bordfr tfxt
         *
         * @rfturn thf titlfd bordfr tfxt, if supportfd, of thf objfdt;
         * othfrwisf, null
         * @sindf 1.4
         */
        publid String gftTitlfdBordfrTfxt() {
            Bordfr bordfr = JComponfnt.this.gftBordfr();
            if (bordfr instbndfof TitlfdBordfr) {
                rfturn ((TitlfdBordfr)bordfr).gftTitlf();
            } flsf {
                rfturn null;
            }
        }

        /**
         * Rfturns kfy bindings bssodibtfd with this objfdt
         *
         * @rfturn thf kfy bindings, if supportfd, of thf objfdt;
         * othfrwisf, null
         * @sff AddfssiblfKfyBinding
         * @sindf 1.4
         */
        publid AddfssiblfKfyBinding gftAddfssiblfKfyBinding(){
            // Try to gft thf linkfd lbbfl's mnfmonid if it fxists
            Objfdt o = gftClifntPropfrty(JLbbfl.LABELED_BY_PROPERTY);
            if (o instbndfof Addfssiblf){
                AddfssiblfContfxt bd = ((Addfssiblf) o).gftAddfssiblfContfxt();
                if (bd != null){
                    AddfssiblfComponfnt domp = bd.gftAddfssiblfComponfnt();
                    if (! (domp instbndfof AddfssiblfExtfndfdComponfnt))
                        rfturn null;
                    rfturn ((AddfssiblfExtfndfdComponfnt)domp).gftAddfssiblfKfyBinding();
                }
            }
            rfturn null;
        }
    } // innfr dlbss AddfssiblfJComponfnt


    /**
     * Rfturns bn <dodf>ArrbyTbblf</dodf> usfd for
     * kfy/vbluf "dlifnt propfrtifs" for this domponfnt. If thf
     * <dodf>dlifntPropfrtifs</dodf> tbblf dofsn't fxist, bn fmpty onf
     * will bf drfbtfd.
     *
     * @rfturn bn ArrbyTbblf
     * @sff #putClifntPropfrty
     * @sff #gftClifntPropfrty
     */
    privbtf ArrbyTbblf gftClifntPropfrtifs() {
        if (dlifntPropfrtifs == null) {
            dlifntPropfrtifs = nfw ArrbyTbblf();
        }
        rfturn dlifntPropfrtifs;
    }


    /**
     * Rfturns thf vbluf of thf propfrty with thf spfdififd kfy.  Only
     * propfrtifs bddfd with <dodf>putClifntPropfrty</dodf> will rfturn
     * b non-<dodf>null</dodf> vbluf.
     *
     * @pbrbm kfy thf bfing qufrifd
     * @rfturn thf vbluf of this propfrty or <dodf>null</dodf>
     * @sff #putClifntPropfrty
     */
    publid finbl Objfdt gftClifntPropfrty(Objfdt kfy) {
        if (kfy == SwingUtilitifs2.AA_TEXT_PROPERTY_KEY) {
            rfturn bbTfxtInfo;
        } flsf if (kfy == SwingUtilitifs2.COMPONENT_UI_PROPERTY_KEY) {
            rfturn ui;
        }
         if(dlifntPropfrtifs == null) {
            rfturn null;
        } flsf {
            syndhronizfd(dlifntPropfrtifs) {
                rfturn dlifntPropfrtifs.gft(kfy);
            }
        }
    }

    /**
     * Adds bn brbitrbry kfy/vbluf "dlifnt propfrty" to this domponfnt.
     * <p>
     * Thf <dodf>gft/putClifntPropfrty</dodf> mfthods providf bddfss to
     * b smbll pfr-instbndf hbshtbblf. Cbllfrs dbn usf gft/putClifntPropfrty
     * to bnnotbtf domponfnts thbt wfrf drfbtfd by bnothfr modulf.
     * For fxbmplf, b
     * lbyout mbnbgfr might storf pfr dhild donstrbints this wby. For fxbmplf:
     * <prf>
     * domponfntA.putClifntPropfrty("to thf lfft of", domponfntB);
     * </prf>
     * If vbluf is <dodf>null</dodf> this mfthod will rfmovf thf propfrty.
     * Chbngfs to dlifnt propfrtifs brf rfportfd with
     * <dodf>PropfrtyChbngf</dodf> fvfnts.
     * Thf nbmf of thf propfrty (for thf sbkf of PropfrtyChbngf
     * fvfnts) is <dodf>kfy.toString()</dodf>.
     * <p>
     * Thf <dodf>dlifntPropfrty</dodf> didtionbry is not intfndfd to
     * support lbrgf
     * sdblf fxtfnsions to JComponfnt nor should bf it donsidfrfd bn
     * bltfrnbtivf to subdlbssing whfn dfsigning b nfw domponfnt.
     *
     * @pbrbm kfy thf nfw dlifnt propfrty kfy
     * @pbrbm vbluf thf nfw dlifnt propfrty vbluf; if <dodf>null</dodf>
     *          this mfthod will rfmovf thf propfrty
     * @sff #gftClifntPropfrty
     * @sff #bddPropfrtyChbngfListfnfr
     */
    publid finbl void putClifntPropfrty(Objfdt kfy, Objfdt vbluf) {
        if (kfy == SwingUtilitifs2.AA_TEXT_PROPERTY_KEY) {
            bbTfxtInfo = vbluf;
            rfturn;
        }
        if (vbluf == null && dlifntPropfrtifs == null) {
            // Both thf vbluf bnd ArrbyTbblf brf null, implying wf don't
            // hbvf to do bnything.
            rfturn;
        }
        ArrbyTbblf dlifntPropfrtifs = gftClifntPropfrtifs();
        Objfdt oldVbluf;
        syndhronizfd(dlifntPropfrtifs) {
            oldVbluf = dlifntPropfrtifs.gft(kfy);
            if (vbluf != null) {
                dlifntPropfrtifs.put(kfy, vbluf);
            } flsf if (oldVbluf != null) {
                dlifntPropfrtifs.rfmovf(kfy);
            } flsf {
                // old == nfw == null
                rfturn;
            }
        }
        dlifntPropfrtyChbngfd(kfy, oldVbluf, vbluf);
        firfPropfrtyChbngf(kfy.toString(), oldVbluf, vbluf);
    }

    // Invokfd from putClifntPropfrty.  This is providfd for subdlbssfs
    // in Swing.
    void dlifntPropfrtyChbngfd(Objfdt kfy, Objfdt oldVbluf,
                               Objfdt nfwVbluf) {
    }


    /*
     * Sfts thf propfrty with thf spfdififd nbmf to thf spfdififd vbluf if
     * thf propfrty hbs not blrfbdy bffn sft by thf dlifnt progrbm.
     * This mfthod is usfd primbrily to sft UI dffbults for propfrtifs
     * with primitivf typfs, whfrf thf vblufs dbnnot bf mbrkfd with
     * UIRfsourdf.
     * @sff LookAndFffl#instbllPropfrty
     * @pbrbm propfrtyNbmf String dontbining thf nbmf of thf propfrty
     * @pbrbm vbluf Objfdt dontbining thf propfrty vbluf
     */
    void sftUIPropfrty(String propfrtyNbmf, Objfdt vbluf) {
        if (propfrtyNbmf == "opbquf") {
            if (!gftFlbg(OPAQUE_SET)) {
                sftOpbquf(((Boolfbn)vbluf).boolfbnVbluf());
                sftFlbg(OPAQUE_SET, fblsf);
            }
        } flsf if (propfrtyNbmf == "butosdrolls") {
            if (!gftFlbg(AUTOSCROLLS_SET)) {
                sftAutosdrolls(((Boolfbn)vbluf).boolfbnVbluf());
                sftFlbg(AUTOSCROLLS_SET, fblsf);
            }
        } flsf if (propfrtyNbmf == "fodusTrbvfrsblKfysForwbrd") {
            @SupprfssWbrnings("undhfdkfd")
            Sft<AWTKfyStrokf> strokfSft = (Sft<AWTKfyStrokf>) vbluf;
            if (!gftFlbg(FOCUS_TRAVERSAL_KEYS_FORWARD_SET)) {
                supfr.sftFodusTrbvfrsblKfys(KfybobrdFodusMbnbgfr.
                                            FORWARD_TRAVERSAL_KEYS,
                                            strokfSft);
            }
        } flsf if (propfrtyNbmf == "fodusTrbvfrsblKfysBbdkwbrd") {
            @SupprfssWbrnings("undhfdkfd")
            Sft<AWTKfyStrokf> strokfSft = (Sft<AWTKfyStrokf>) vbluf;
            if (!gftFlbg(FOCUS_TRAVERSAL_KEYS_BACKWARD_SET)) {
                supfr.sftFodusTrbvfrsblKfys(KfybobrdFodusMbnbgfr.
                                            BACKWARD_TRAVERSAL_KEYS,
                                            strokfSft);
            }
        } flsf {
            throw nfw IllfgblArgumfntExdfption("propfrty \""+
                                               propfrtyNbmf+ "\" dbnnot bf sft using this mfthod");
        }
    }


    /**
     * Sfts thf fodus trbvfrsbl kfys for b givfn trbvfrsbl opfrbtion for this
     * Componfnt.
     * Rfffr to
     * {@link jbvb.bwt.Componfnt#sftFodusTrbvfrsblKfys}
     * for b domplftf dfsdription of this mfthod.
     * <p>
     * This mfthod mby throw b {@dodf ClbssCbstExdfption} if bny {@dodf Objfdt}
     * in {@dodf kfystrokfs} is not bn {@dodf AWTKfyStrokf}.
     *
     * @pbrbm id onf of KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS, or
     *        KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS
     * @pbrbm kfystrokfs thf Sft of AWTKfyStrokf for thf spfdififd opfrbtion
     * @sff jbvb.bwt.KfybobrdFodusMbnbgfr#FORWARD_TRAVERSAL_KEYS
     * @sff jbvb.bwt.KfybobrdFodusMbnbgfr#BACKWARD_TRAVERSAL_KEYS
     * @sff jbvb.bwt.KfybobrdFodusMbnbgfr#UP_CYCLE_TRAVERSAL_KEYS
     * @throws IllfgblArgumfntExdfption if id is not onf of
     *         KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *         KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS, or
     *         KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS, or if kfystrokfs
     *         dontbins null, or if bny kfystrokf rfprfsfnts b KEY_TYPED fvfnt,
     *         or if bny kfystrokf blrfbdy mbps to bnothfr fodus trbvfrsbl
     *         opfrbtion for this Componfnt
     * @sindf 1.5
     * @bfbninfo
     *       bound: truf
     */
    publid void
        sftFodusTrbvfrsblKfys(int id, Sft<? fxtfnds AWTKfyStrokf> kfystrokfs)
    {
        if (id == KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS) {
            sftFlbg(FOCUS_TRAVERSAL_KEYS_FORWARD_SET,truf);
        } flsf if (id == KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS) {
            sftFlbg(FOCUS_TRAVERSAL_KEYS_BACKWARD_SET,truf);
        }
        supfr.sftFodusTrbvfrsblKfys(id,kfystrokfs);
    }

    /* --- Trbnsitionbl jbvb.bwt.Componfnt Support ---
     * Thf mfthods bnd fiflds in this sfdtion will migrbtf to
     * jbvb.bwt.Componfnt in thf nfxt JDK rflfbsf.
     */

    /**
     * Rfturns truf if this domponfnt is lightwfight, thbt is, if it dofsn't
     * hbvf b nbtivf window systfm pffr.
     *
     * @pbrbm d  thf {@dodf Componfnt} to bf dhfdkfd
     * @rfturn truf if this domponfnt is lightwfight
     */
    @SupprfssWbrnings("dfprfdbtion")
    publid stbtid boolfbn isLightwfightComponfnt(Componfnt d) {
        rfturn d.gftPffr() instbndfof LightwfightPffr;
    }


    /**
     * @dfprfdbtfd As of JDK 5,
     * rfplbdfd by <dodf>Componfnt.sftBounds(int, int, int, int)</dodf>.
     * <p>
     * Movfs bnd rfsizfs this domponfnt.
     *
     * @pbrbm x  thf nfw horizontbl lodbtion
     * @pbrbm y  thf nfw vfrtidbl lodbtion
     * @pbrbm w  thf nfw width
     * @pbrbm h  thf nfw hfight
     * @sff jbvb.bwt.Componfnt#sftBounds
     */
    @Dfprfdbtfd
    publid void rfshbpf(int x, int y, int w, int h) {
        supfr.rfshbpf(x, y, w, h);
    }


    /**
     * Storfs thf bounds of this domponfnt into "rfturn vbluf"
     * <dodf>rv</dodf> bnd rfturns <dodf>rv</dodf>.
     * If <dodf>rv</dodf> is <dodf>null</dodf> b nfw <dodf>Rfdtbnglf</dodf>
     * is bllodbtfd.  This vfrsion of <dodf>gftBounds</dodf> is usfful
     * if thf dbllfr wbnts to bvoid bllodbting b nfw <dodf>Rfdtbnglf</dodf>
     * objfdt on thf hfbp.
     *
     * @pbrbm rv thf rfturn vbluf, modififd to thf domponfnt's bounds
     * @rfturn <dodf>rv</dodf>; if <dodf>rv</dodf> is <dodf>null</dodf>
     *          rfturn b nfwly drfbtfd <dodf>Rfdtbnglf</dodf> with this
     *          domponfnt's bounds
     */
    publid Rfdtbnglf gftBounds(Rfdtbnglf rv) {
        if (rv == null) {
            rfturn nfw Rfdtbnglf(gftX(), gftY(), gftWidth(), gftHfight());
        }
        flsf {
            rv.sftBounds(gftX(), gftY(), gftWidth(), gftHfight());
            rfturn rv;
        }
    }


    /**
     * Storfs thf width/hfight of this domponfnt into "rfturn vbluf"
     * <dodf>rv</dodf> bnd rfturns <dodf>rv</dodf>.
     * If <dodf>rv</dodf> is <dodf>null</dodf> b nfw <dodf>Dimfnsion</dodf>
     * objfdt is bllodbtfd.  This vfrsion of <dodf>gftSizf</dodf>
     * is usfful if thf dbllfr wbnts to bvoid bllodbting b nfw
     * <dodf>Dimfnsion</dodf> objfdt on thf hfbp.
     *
     * @pbrbm rv thf rfturn vbluf, modififd to thf domponfnt's sizf
     * @rfturn <dodf>rv</dodf>
     */
    publid Dimfnsion gftSizf(Dimfnsion rv) {
        if (rv == null) {
            rfturn nfw Dimfnsion(gftWidth(), gftHfight());
        }
        flsf {
            rv.sftSizf(gftWidth(), gftHfight());
            rfturn rv;
        }
    }


    /**
     * Storfs thf x,y origin of this domponfnt into "rfturn vbluf"
     * <dodf>rv</dodf> bnd rfturns <dodf>rv</dodf>.
     * If <dodf>rv</dodf> is <dodf>null</dodf> b nfw <dodf>Point</dodf>
     * is bllodbtfd.  This vfrsion of <dodf>gftLodbtion</dodf> is usfful
     * if thf dbllfr wbnts to bvoid bllodbting b nfw <dodf>Point</dodf>
     * objfdt on thf hfbp.
     *
     * @pbrbm rv thf rfturn vbluf, modififd to thf domponfnt's lodbtion
     * @rfturn <dodf>rv</dodf>
     */
    publid Point gftLodbtion(Point rv) {
        if (rv == null) {
            rfturn nfw Point(gftX(), gftY());
        }
        flsf {
            rv.sftLodbtion(gftX(), gftY());
            rfturn rv;
        }
    }


    /**
     * Rfturns thf durrfnt x doordinbtf of thf domponfnt's origin.
     * This mfthod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().x</dodf>, or
     * <dodf>domponfnt.gftLodbtion().x</dodf> bfdbusf it dofsn't dbusf bny
     * hfbp bllodbtions.
     *
     * @rfturn thf durrfnt x doordinbtf of thf domponfnt's origin
     */
    publid int gftX() { rfturn supfr.gftX(); }


    /**
     * Rfturns thf durrfnt y doordinbtf of thf domponfnt's origin.
     * This mfthod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().y</dodf>, or
     * <dodf>domponfnt.gftLodbtion().y</dodf> bfdbusf it dofsn't dbusf bny
     * hfbp bllodbtions.
     *
     * @rfturn thf durrfnt y doordinbtf of thf domponfnt's origin
     */
    publid int gftY() { rfturn supfr.gftY(); }


    /**
     * Rfturns thf durrfnt width of this domponfnt.
     * This mfthod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().width</dodf>, or
     * <dodf>domponfnt.gftSizf().width</dodf> bfdbusf it dofsn't dbusf bny
     * hfbp bllodbtions.
     *
     * @rfturn thf durrfnt width of this domponfnt
     */
    publid int gftWidth() { rfturn supfr.gftWidth(); }


    /**
     * Rfturns thf durrfnt hfight of this domponfnt.
     * This mfthod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().hfight</dodf>, or
     * <dodf>domponfnt.gftSizf().hfight</dodf> bfdbusf it dofsn't dbusf bny
     * hfbp bllodbtions.
     *
     * @rfturn thf durrfnt hfight of this domponfnt
     */
    publid int gftHfight() { rfturn supfr.gftHfight(); }

    /**
     * Rfturns truf if this domponfnt is domplftfly opbquf.
     * <p>
     * An opbquf domponfnt pbints fvfry pixfl within its
     * rfdtbngulbr bounds. A non-opbquf domponfnt pbints only b subsft of
     * its pixfls or nonf bt bll, bllowing thf pixfls undfrnfbth it to
     * "show through".  Thfrfforf, b domponfnt thbt dofs not fully pbint
     * its pixfls providfs b dfgrff of trbnspbrfndy.
     * <p>
     * Subdlbssfs thbt gubrbntff to blwbys domplftfly pbint thfir dontfnts
     * should ovfrridf this mfthod bnd rfturn truf.
     *
     * @rfturn truf if this domponfnt is domplftfly opbquf
     * @sff #sftOpbquf
     */
    publid boolfbn isOpbquf() {
        rfturn gftFlbg(IS_OPAQUE);
    }

    /**
     * If truf thf domponfnt pbints fvfry pixfl within its bounds.
     * Othfrwisf, thf domponfnt mby not pbint somf or bll of its
     * pixfls, bllowing thf undfrlying pixfls to show through.
     * <p>
     * Thf dffbult vbluf of this propfrty is fblsf for <dodf>JComponfnt</dodf>.
     * Howfvfr, thf dffbult vbluf for this propfrty on most stbndbrd
     * <dodf>JComponfnt</dodf> subdlbssfs (sudh bs <dodf>JButton</dodf> bnd
     * <dodf>JTrff</dodf>) is look-bnd-fffl dfpfndfnt.
     *
     * @pbrbm isOpbquf  truf if this domponfnt should bf opbquf
     * @sff #isOpbquf
     * @bfbninfo
     *        bound: truf
     *       fxpfrt: truf
     *  dfsdription: Thf domponfnt's opbdity
     */
    publid void sftOpbquf(boolfbn isOpbquf) {
        boolfbn oldVbluf = gftFlbg(IS_OPAQUE);
        sftFlbg(IS_OPAQUE, isOpbquf);
        sftFlbg(OPAQUE_SET, truf);
        firfPropfrtyChbngf("opbquf", oldVbluf, isOpbquf);
    }


    /**
     * If thf spfdififd rfdtbnglf is domplftfly obsdurfd by bny of this
     * domponfnt's opbquf dhildrfn thfn rfturns truf.  Only dirfdt dhildrfn
     * brf donsidfrfd, morf distbnt dfsdfndbnts brf ignorfd.  A
     * <dodf>JComponfnt</dodf> is opbquf if
     * <dodf>JComponfnt.isOpbquf()</dodf> rfturns truf, othfr lightwfight
     * domponfnts brf blwbys donsidfrfd trbnspbrfnt, bnd hfbvywfight domponfnts
     * brf blwbys donsidfrfd opbquf.
     *
     * @pbrbm x  x vbluf of spfdififd rfdtbnglf
     * @pbrbm y  y vbluf of spfdififd rfdtbnglf
     * @pbrbm width  width of spfdififd rfdtbnglf
     * @pbrbm hfight hfight of spfdififd rfdtbnglf
     * @rfturn truf if thf spfdififd rfdtbnglf is obsdurfd by bn opbquf dhild
     */
    boolfbn rfdtbnglfIsObsdurfd(int x,int y,int width,int hfight)
    {
        int numChildrfn = gftComponfntCount();

        for(int i = 0; i < numChildrfn; i++) {
            Componfnt dhild = gftComponfnt(i);
            int dx, dy, dw, dh;

            dx = dhild.gftX();
            dy = dhild.gftY();
            dw = dhild.gftWidth();
            dh = dhild.gftHfight();

            if (x >= dx && (x + width) <= (dx + dw) &&
                y >= dy && (y + hfight) <= (dy + dh) && dhild.isVisiblf()) {

                if(dhild instbndfof JComponfnt) {
//                  Systfm.out.println("A) dhfdking opbquf: " + ((JComponfnt)dhild).isOpbquf() + "  " + dhild);
//                  Systfm.out.print("B) ");
//                  Thrfbd.dumpStbdk();
                    rfturn dhild.isOpbquf();
                } flsf {
                    /** Somftimfs b hfbvy wfight dbn hbvf b bound lbrgfr thbn its pffr sizf
                     *  so wf should blwbys drbw undfr hfbvy wfights
                     */
                    rfturn fblsf;
                }
            }
        }

        rfturn fblsf;
    }


    /**
     * Rfturns thf <dodf>Componfnt</dodf>'s "visiblf rfdt rfdtbnglf" -  thf
     * intfrsfdtion of thf visiblf rfdtbnglfs for thf domponfnt <dodf>d</dodf>
     * bnd bll of its bndfstors.  Thf rfturn vbluf is storfd in
     * <dodf>visiblfRfdt</dodf>.
     *
     * @pbrbm d  thf domponfnt
     * @pbrbm visiblfRfdt  b <dodf>Rfdtbnglf</dodf> domputfd bs thf
     *          intfrsfdtion of bll visiblf rfdtbnglfs for thf domponfnt
     *          <dodf>d</dodf> bnd bll of its bndfstors -- this is thf
     *          rfturn vbluf for this mfthod
     * @sff #gftVisiblfRfdt
     */
    stbtid finbl void domputfVisiblfRfdt(Componfnt d, Rfdtbnglf visiblfRfdt) {
        Contbinfr p = d.gftPbrfnt();
        Rfdtbnglf bounds = d.gftBounds();

        if (p == null || p instbndfof Window || p instbndfof Applft) {
            visiblfRfdt.sftBounds(0, 0, bounds.width, bounds.hfight);
        } flsf {
            domputfVisiblfRfdt(p, visiblfRfdt);
            visiblfRfdt.x -= bounds.x;
            visiblfRfdt.y -= bounds.y;
            SwingUtilitifs.domputfIntfrsfdtion(0,0,bounds.width,bounds.hfight,visiblfRfdt);
        }
    }


    /**
     * Rfturns thf <dodf>Componfnt</dodf>'s "visiblf rfdt rfdtbnglf" -  thf
     * intfrsfdtion of thf visiblf rfdtbnglfs for this domponfnt
     * bnd bll of its bndfstors.  Thf rfturn vbluf is storfd in
     * <dodf>visiblfRfdt</dodf>.
     *
     * @pbrbm visiblfRfdt b <dodf>Rfdtbnglf</dodf> domputfd bs thf
     *          intfrsfdtion of bll visiblf rfdtbnglfs for this
     *          domponfnt bnd bll of its bndfstors -- this is thf rfturn
     *          vbluf for this mfthod
     * @sff #gftVisiblfRfdt
     */
    publid void domputfVisiblfRfdt(Rfdtbnglf visiblfRfdt) {
        domputfVisiblfRfdt(this, visiblfRfdt);
    }


    /**
     * Rfturns thf <dodf>Componfnt</dodf>'s "visiblf rfdtbnglf" -  thf
     * intfrsfdtion of this domponfnt's visiblf rfdtbnglf,
     * <dodf>nfw Rfdtbnglf(0, 0, gftWidth(), gftHfight())</dodf>,
     * bnd bll of its bndfstors' visiblf rfdtbnglfs.
     *
     * @rfturn thf visiblf rfdtbnglf
     */
    publid Rfdtbnglf gftVisiblfRfdt() {
        Rfdtbnglf visiblfRfdt = nfw Rfdtbnglf();

        domputfVisiblfRfdt(visiblfRfdt);
        rfturn visiblfRfdt;
    }

    /**
     * Support for rfporting bound propfrty dhbngfs for boolfbn propfrtifs.
     * This mfthod dbn bf dbllfd whfn b bound propfrty hbs dhbngfd bnd it will
     * sfnd thf bppropribtf PropfrtyChbngfEvfnt to bny rfgistfrfd
     * PropfrtyChbngfListfnfrs.
     *
     * @pbrbm propfrtyNbmf thf propfrty whosf vbluf hbs dhbngfd
     * @pbrbm oldVbluf thf propfrty's prfvious vbluf
     * @pbrbm nfwVbluf thf propfrty's nfw vbluf
     */
    publid void firfPropfrtyChbngf(String propfrtyNbmf,
                                   boolfbn oldVbluf, boolfbn nfwVbluf) {
        supfr.firfPropfrtyChbngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }


    /**
     * Support for rfporting bound propfrty dhbngfs for intfgfr propfrtifs.
     * This mfthod dbn bf dbllfd whfn b bound propfrty hbs dhbngfd bnd it will
     * sfnd thf bppropribtf PropfrtyChbngfEvfnt to bny rfgistfrfd
     * PropfrtyChbngfListfnfrs.
     *
     * @pbrbm propfrtyNbmf thf propfrty whosf vbluf hbs dhbngfd
     * @pbrbm oldVbluf thf propfrty's prfvious vbluf
     * @pbrbm nfwVbluf thf propfrty's nfw vbluf
     */
    publid void firfPropfrtyChbngf(String propfrtyNbmf,
                                      int oldVbluf, int nfwVbluf) {
        supfr.firfPropfrtyChbngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }

    // XXX This mfthod is implfmfntfd bs b workbround to b JLS issuf with bmbiguous
    // mfthods. This should bf rfmovfd ondf 4758654 is rfsolvfd.
    publid void firfPropfrtyChbngf(String propfrtyNbmf, dhbr oldVbluf, dhbr nfwVbluf) {
        supfr.firfPropfrtyChbngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }

    /**
     * Supports rfporting donstrbinfd propfrty dhbngfs.
     * This mfthod dbn bf dbllfd whfn b donstrbinfd propfrty hbs dhbngfd
     * bnd it will sfnd thf bppropribtf <dodf>PropfrtyChbngfEvfnt</dodf>
     * to bny rfgistfrfd <dodf>VftobblfChbngfListfnfrs</dodf>.
     *
     * @pbrbm propfrtyNbmf  thf nbmf of thf propfrty thbt wbs listfnfd on
     * @pbrbm oldVbluf  thf old vbluf of thf propfrty
     * @pbrbm nfwVbluf  thf nfw vbluf of thf propfrty
     * @fxdfption jbvb.bfbns.PropfrtyVftoExdfption whfn thf bttfmpt to sft thf
     *          propfrty is vftofd by thf domponfnt
     */
    protfdtfd void firfVftobblfChbngf(String propfrtyNbmf, Objfdt oldVbluf, Objfdt nfwVbluf)
        throws jbvb.bfbns.PropfrtyVftoExdfption
    {
        if (vftobblfChbngfSupport == null) {
            rfturn;
        }
        vftobblfChbngfSupport.firfVftobblfChbngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }


    /**
     * Adds b <dodf>VftobblfChbngfListfnfr</dodf> to thf listfnfr list.
     * Thf listfnfr is rfgistfrfd for bll propfrtifs.
     *
     * @pbrbm listfnfr  thf <dodf>VftobblfChbngfListfnfr</dodf> to bf bddfd
     */
    publid syndhronizfd void bddVftobblfChbngfListfnfr(VftobblfChbngfListfnfr listfnfr) {
        if (vftobblfChbngfSupport == null) {
            vftobblfChbngfSupport = nfw jbvb.bfbns.VftobblfChbngfSupport(this);
        }
        vftobblfChbngfSupport.bddVftobblfChbngfListfnfr(listfnfr);
    }


    /**
     * Rfmovfs b <dodf>VftobblfChbngfListfnfr</dodf> from thf listfnfr list.
     * This rfmovfs b <dodf>VftobblfChbngfListfnfr</dodf> thbt wbs rfgistfrfd
     * for bll propfrtifs.
     *
     * @pbrbm listfnfr  thf <dodf>VftobblfChbngfListfnfr</dodf> to bf rfmovfd
     */
    publid syndhronizfd void rfmovfVftobblfChbngfListfnfr(VftobblfChbngfListfnfr listfnfr) {
        if (vftobblfChbngfSupport == null) {
            rfturn;
        }
        vftobblfChbngfSupport.rfmovfVftobblfChbngfListfnfr(listfnfr);
    }


    /**
     * Rfturns bn brrby of bll thf vftobblf dhbngf listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of thf domponfnt's <dodf>VftobblfChbngfListfnfr</dodf>s
     *         or bn fmpty
     *         brrby if no vftobblf dhbngf listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddVftobblfChbngfListfnfr
     * @sff #rfmovfVftobblfChbngfListfnfr
     *
     * @sindf 1.4
     */
    publid syndhronizfd VftobblfChbngfListfnfr[] gftVftobblfChbngfListfnfrs() {
        if (vftobblfChbngfSupport == null) {
            rfturn nfw VftobblfChbngfListfnfr[0];
        }
        rfturn vftobblfChbngfSupport.gftVftobblfChbngfListfnfrs();
    }


    /**
     * Rfturns thf top-lfvfl bndfstor of this domponfnt (fithfr thf
     * dontbining <dodf>Window</dodf> or <dodf>Applft</dodf>),
     * or <dodf>null</dodf> if this domponfnt hbs not
     * bffn bddfd to bny dontbinfr.
     *
     * @rfturn thf top-lfvfl <dodf>Contbinfr</dodf> thbt this domponfnt is in,
     *          or <dodf>null</dodf> if not in bny dontbinfr
     */
    publid Contbinfr gftTopLfvflAndfstor() {
        for(Contbinfr p = this; p != null; p = p.gftPbrfnt()) {
            if(p instbndfof Window || p instbndfof Applft) {
                rfturn p;
            }
        }
        rfturn null;
    }

    privbtf AndfstorNotififr gftAndfstorNotififr() {
        rfturn (AndfstorNotififr)
            gftClifntPropfrty(JComponfnt_ANCESTOR_NOTIFIER);
    }

    /**
     * Rfgistfrs <dodf>listfnfr</dodf> so thbt it will rfdfivf
     * <dodf>AndfstorEvfnts</dodf> whfn it or bny of its bndfstors
     * movf or brf mbdf visiblf or invisiblf.
     * Evfnts brf blso sfnt whfn thf domponfnt or its bndfstors brf bddfd
     * or rfmovfd from thf dontbinmfnt hifrbrdhy.
     *
     * @pbrbm listfnfr  thf <dodf>AndfstorListfnfr</dodf> to rfgistfr
     * @sff AndfstorEvfnt
     */
    publid void bddAndfstorListfnfr(AndfstorListfnfr listfnfr) {
        AndfstorNotififr bndfstorNotififr = gftAndfstorNotififr();
        if (bndfstorNotififr == null) {
            bndfstorNotififr = nfw AndfstorNotififr(this);
            putClifntPropfrty(JComponfnt_ANCESTOR_NOTIFIER,
                              bndfstorNotififr);
        }
        bndfstorNotififr.bddAndfstorListfnfr(listfnfr);
    }

    /**
     * Unrfgistfrs <dodf>listfnfr</dodf> so thbt it will no longfr rfdfivf
     * <dodf>AndfstorEvfnts</dodf>.
     *
     * @pbrbm listfnfr  thf <dodf>AndfstorListfnfr</dodf> to bf rfmovfd
     * @sff #bddAndfstorListfnfr
     */
    publid void rfmovfAndfstorListfnfr(AndfstorListfnfr listfnfr) {
        AndfstorNotififr bndfstorNotififr = gftAndfstorNotififr();
        if (bndfstorNotififr == null) {
            rfturn;
        }
        bndfstorNotififr.rfmovfAndfstorListfnfr(listfnfr);
        if (bndfstorNotififr.listfnfrList.gftListfnfrList().lfngth == 0) {
            bndfstorNotififr.rfmovfAllListfnfrs();
            putClifntPropfrty(JComponfnt_ANCESTOR_NOTIFIER, null);
        }
    }

    /**
     * Rfturns bn brrby of bll thf bndfstor listfnfrs
     * rfgistfrfd on this domponfnt.
     *
     * @rfturn bll of thf domponfnt's <dodf>AndfstorListfnfr</dodf>s
     *         or bn fmpty
     *         brrby if no bndfstor listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddAndfstorListfnfr
     * @sff #rfmovfAndfstorListfnfr
     *
     * @sindf 1.4
     */
    publid AndfstorListfnfr[] gftAndfstorListfnfrs() {
        AndfstorNotififr bndfstorNotififr = gftAndfstorNotififr();
        if (bndfstorNotififr == null) {
            rfturn nfw AndfstorListfnfr[0];
        }
        rfturn bndfstorNotififr.gftAndfstorListfnfrs();
    }

    /**
     * Rfturns bn brrby of bll thf objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon this <dodf>JComponfnt</dodf>.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using thf
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mfthod.
     *
     * <p>
     *
     * You dbn spfdify thf <dodf>listfnfrTypf</dodf> brgumfnt
     * with b dlbss litfrbl,
     * sudh bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * <dodf>JComponfnt</dodf> <dodf>d</dodf>
     * for its mousf listfnfrs with thf following dodf:
     * <prf>MousfListfnfr[] mls = (MousfListfnfr[])(d.gftListfnfrs(MousfListfnfr.dlbss));</prf>
     * If no sudh listfnfrs fxist, this mfthod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf thf typf of listfnfrs rfqufstfd; this pbrbmftfr
     *          should spfdify bn intfrfbdf thbt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on this domponfnt,
     *          or bn fmpty brrby if no sudh
     *          listfnfrs hbvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf thbt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sindf 1.3
     *
     * @sff #gftVftobblfChbngfListfnfrs
     * @sff #gftAndfstorListfnfrs
     */
    @SupprfssWbrnings("undhfdkfd") // Cbsts to (T[])
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        T[] rfsult;
        if (listfnfrTypf == AndfstorListfnfr.dlbss) {
            // AndfstorListfnfrs brf hbndlfd by thf AndfstorNotififr
            rfsult = (T[])gftAndfstorListfnfrs();
        }
        flsf if (listfnfrTypf == VftobblfChbngfListfnfr.dlbss) {
            // VftobblfChbngfListfnfrs brf hbndlfd by VftobblfChbngfSupport
            rfsult = (T[])gftVftobblfChbngfListfnfrs();
        }
        flsf if (listfnfrTypf == PropfrtyChbngfListfnfr.dlbss) {
            // PropfrtyChbngfListfnfrs brf hbndlfd by PropfrtyChbngfSupport
            rfsult = (T[])gftPropfrtyChbngfListfnfrs();
        }
        flsf {
            rfsult = listfnfrList.gftListfnfrs(listfnfrTypf);
        }

        if (rfsult.lfngth == 0) {
            rfturn supfr.gftListfnfrs(listfnfrTypf);
        }
        rfturn rfsult;
    }

    /**
     * Notififs this domponfnt thbt it now hbs b pbrfnt domponfnt.
     * Whfn this mfthod is invokfd, thf dhbin of pbrfnt domponfnts is
     * sft up with <dodf>KfybobrdAdtion</dodf> fvfnt listfnfrs.
     * This mfthod is dbllfd by thf toolkit intfrnblly bnd should
     * not bf dbllfd dirfdtly by progrbms.
     *
     * @sff #rfgistfrKfybobrdAdtion
     */
    publid void bddNotify() {
        supfr.bddNotify();
        firfPropfrtyChbngf("bndfstor", null, gftPbrfnt());

        rfgistfrWithKfybobrdMbnbgfr(fblsf);
        rfgistfrNfxtFodusbblfComponfnt();
    }


    /**
     * Notififs this domponfnt thbt it no longfr hbs b pbrfnt domponfnt.
     * Whfn this mfthod is invokfd, bny <dodf>KfybobrdAdtion</dodf>s
     * sft up in thf thf dhbin of pbrfnt domponfnts brf rfmovfd.
     * This mfthod is dbllfd by thf toolkit intfrnblly bnd should
     * not bf dbllfd dirfdtly by progrbms.
     *
     * @sff #rfgistfrKfybobrdAdtion
     */
    publid void rfmovfNotify() {
        supfr.rfmovfNotify();
        // This isn't stridtly dorrfdt.  Thf fvfnt shouldn't bf
        // firfd until *bftfr* thf pbrfnt is sft to null.  But
        // wf only gft notififd bfforf thbt hbppfns
        firfPropfrtyChbngf("bndfstor", gftPbrfnt(), null);

        unrfgistfrWithKfybobrdMbnbgfr();
        dfrfgistfrNfxtFodusbblfComponfnt();

        if (gftCrfbtfdDoublfBufffr()) {
            RfpbintMbnbgfr.durrfntMbnbgfr(this).rfsftDoublfBufffr();
            sftCrfbtfdDoublfBufffr(fblsf);
        }
        if (butosdrolls) {
            Autosdrollfr.stop(this);
        }
    }


    /**
     * Adds thf spfdififd rfgion to thf dirty rfgion list if thf domponfnt
     * is showing.  Thf domponfnt will bf rfpbintfd bftfr bll of thf
     * durrfntly pfnding fvfnts hbvf bffn dispbtdhfd.
     *
     * @pbrbm tm  this pbrbmftfr is not usfd
     * @pbrbm x  thf x vbluf of thf dirty rfgion
     * @pbrbm y  thf y vbluf of thf dirty rfgion
     * @pbrbm width  thf width of thf dirty rfgion
     * @pbrbm hfight  thf hfight of thf dirty rfgion
     * @sff #isPbintingOrigin()
     * @sff jbvb.bwt.Componfnt#isShowing
     * @sff RfpbintMbnbgfr#bddDirtyRfgion
     */
    publid void rfpbint(long tm, int x, int y, int width, int hfight) {
        RfpbintMbnbgfr.durrfntMbnbgfr(SunToolkit.tbrgftToAppContfxt(this))
                      .bddDirtyRfgion(this, x, y, width, hfight);
    }


    /**
     * Adds thf spfdififd rfgion to thf dirty rfgion list if thf domponfnt
     * is showing.  Thf domponfnt will bf rfpbintfd bftfr bll of thf
     * durrfntly pfnding fvfnts hbvf bffn dispbtdhfd.
     *
     * @pbrbm  r b <dodf>Rfdtbnglf</dodf> dontbining thf dirty rfgion
     * @sff #isPbintingOrigin()
     * @sff jbvb.bwt.Componfnt#isShowing
     * @sff RfpbintMbnbgfr#bddDirtyRfgion
     */
    publid void rfpbint(Rfdtbnglf r) {
        rfpbint(0,r.x,r.y,r.width,r.hfight);
    }


    /**
     * Supports dfffrrfd butombtid lbyout.
     * <p>
     * Cblls <dodf>invblidbtf</dodf> bnd thfn bdds this domponfnt's
     * <dodf>vblidbtfRoot</dodf> to b list of domponfnts thbt nffd to bf
     * vblidbtfd.  Vblidbtion will oddur bftfr bll durrfntly pfnding
     * fvfnts hbvf bffn dispbtdhfd.  In othfr words bftfr this mfthod
     * is dbllfd,  thf first vblidbtfRoot (if bny) found whfn wblking
     * up thf dontbinmfnt hifrbrdhy of this domponfnt will bf vblidbtfd.
     * By dffbult, <dodf>JRootPbnf</dodf>, <dodf>JSdrollPbnf</dodf>,
     * bnd <dodf>JTfxtFifld</dodf> rfturn truf
     * from <dodf>isVblidbtfRoot</dodf>.
     * <p>
     * This mfthod will butombtidblly bf dbllfd on this domponfnt
     * whfn b propfrty vbluf dhbngfs sudh thbt sizf, lodbtion, or
     * intfrnbl lbyout of this domponfnt hbs bffn bfffdtfd.  This butombtid
     * updbting difffrs from thf AWT bfdbusf progrbms gfnfrblly no
     * longfr nffd to invokf <dodf>vblidbtf</dodf> to gft thf dontfnts of thf
     * GUI to updbtf.
     *
     * @sff jbvb.bwt.Componfnt#invblidbtf
     * @sff jbvb.bwt.Contbinfr#vblidbtf
     * @sff #isVblidbtfRoot
     * @sff RfpbintMbnbgfr#bddInvblidComponfnt
     */
    publid void rfvblidbtf() {
        if (gftPbrfnt() == null) {
            // Notf: Wf don't bothfr invblidbting hfrf bs ondf bddfd
            // to b vblid pbrfnt invblidbtf will bf invokfd (bddImpl
            // invokfs bddNotify whidh will invokf invblidbtf on thf
            // nfw Componfnt). Also, if wf do bdd b dhfdk to isVblid
            // hfrf it dbn potfntiblly bf dbllfd bfforf thf donstrudtor
            // whidh wbs dbusing somf pfoplf griff.
            rfturn;
        }
        if (SunToolkit.isDispbtdhThrfbdForAppContfxt(this)) {
            invblidbtf();
            RfpbintMbnbgfr.durrfntMbnbgfr(this).bddInvblidComponfnt(this);
        }
        flsf {
            // To bvoid b flood of Runnbblfs whfn donstrudting GUIs off
            // thf EDT, b flbg is mbintbinfd bs to whfthfr or not
            // b Runnbblf hbs bffn sdhfdulfd.
            syndhronizfd(this) {
                if (gftFlbg(REVALIDATE_RUNNABLE_SCHEDULED)) {
                    rfturn;
                }
                sftFlbg(REVALIDATE_RUNNABLE_SCHEDULED, truf);
            }
            SunToolkit.fxfdutfOnEvfntHbndlfrThrfbd(this, () -> {
                syndhronizfd(JComponfnt.this) {
                    sftFlbg(REVALIDATE_RUNNABLE_SCHEDULED, fblsf);
                }
                rfvblidbtf();
            });
        }
    }

    /**
     * If this mfthod rfturns truf, <dodf>rfvblidbtf</dodf> dblls by
     * dfsdfndbnts of this domponfnt will dbusf thf fntirf trff
     * bfginning with this root to bf vblidbtfd.
     * Rfturns fblsf by dffbult.  <dodf>JSdrollPbnf</dodf> ovfrridfs
     * this mfthod bnd rfturns truf.
     *
     * @rfturn blwbys rfturns fblsf
     * @sff #rfvblidbtf
     * @sff jbvb.bwt.Componfnt#invblidbtf
     * @sff jbvb.bwt.Contbinfr#vblidbtf
     * @sff jbvb.bwt.Contbinfr#isVblidbtfRoot
     */
    @Ovfrridf
    publid boolfbn isVblidbtfRoot() {
        rfturn fblsf;
    }


    /**
     * Rfturns truf if this domponfnt tilfs its dhildrfn -- thbt is, if
     * it dbn gubrbntff thbt thf dhildrfn will not ovfrlbp.  Thf
     * rfpbinting systfm is substbntiblly morf fffidifnt in this
     * dommon dbsf.  <dodf>JComponfnt</dodf> subdlbssfs thbt dbn't mbkf this
     * gubrbntff, sudh bs <dodf>JLbyfrfdPbnf</dodf>,
     * should ovfrridf this mfthod to rfturn fblsf.
     *
     * @rfturn blwbys rfturns truf
     */
    publid boolfbn isOptimizfdDrbwingEnbblfd() {
        rfturn truf;
    }

    /**
     * Rfturns {@dodf truf} if b pbint triggfrfd on b dhild domponfnt should dbusf
     * pbinting to originbtf from this Componfnt, or onf of its bndfstors.
     * <p>
     * Cblling {@link #rfpbint} or {@link #pbintImmfdibtfly(int, int, int, int)}
     * on b Swing domponfnt will rfsult in dblling
     * thf {@link JComponfnt#pbintImmfdibtfly(int, int, int, int)} mfthod of
     * thf first bndfstor whidh {@dodf isPbintingOrigin()} rfturns {@dodf truf}, if thfrf brf bny.
     * <p>
     * {@dodf JComponfnt} subdlbssfs thbt nffd to bf pbintfd whfn bny of thfir
     * dhildrfn brf rfpbintfd should ovfrridf this mfthod to rfturn {@dodf truf}.
     *
     * @rfturn blwbys rfturns {@dodf fblsf}
     *
     * @sff #pbintImmfdibtfly(int, int, int, int)
     */
    protfdtfd boolfbn isPbintingOrigin() {
        rfturn fblsf;
    }

    /**
     * Pbints thf spfdififd rfgion in this domponfnt bnd bll of its
     * dfsdfndbnts thbt ovfrlbp thf rfgion, immfdibtfly.
     * <p>
     * It's rbrfly nfdfssbry to dbll this mfthod.  In most dbsfs it's
     * morf fffidifnt to dbll rfpbint, whidh dfffrs thf bdtubl pbinting
     * bnd dbn dollbpsf rfdundbnt rfqufsts into b singlf pbint dbll.
     * This mfthod is usfful if onf nffds to updbtf thf displby whilf
     * thf durrfnt fvfnt is bfing dispbtdhfd.
     * <p>
     * This mfthod is to bf ovfrriddfn whfn thf dirty rfgion nffds to bf dhbngfd
     * for domponfnts thbt brf pbinting origins.
     *
     * @pbrbm x  thf x vbluf of thf rfgion to bf pbintfd
     * @pbrbm y  thf y vbluf of thf rfgion to bf pbintfd
     * @pbrbm w  thf width of thf rfgion to bf pbintfd
     * @pbrbm h  thf hfight of thf rfgion to bf pbintfd
     * @sff #rfpbint
     * @sff #isPbintingOrigin()
     */
    publid void pbintImmfdibtfly(int x,int y,int w, int h) {
        Componfnt d = this;
        Componfnt pbrfnt;

        if(!isShowing()) {
            rfturn;
        }

        JComponfnt pbintingOigin = SwingUtilitifs.gftPbintingOrigin(this);
        if (pbintingOigin != null) {
            Rfdtbnglf rfdtbnglf = SwingUtilitifs.donvfrtRfdtbnglf(
                    d, nfw Rfdtbnglf(x, y, w, h), pbintingOigin);
            pbintingOigin.pbintImmfdibtfly(rfdtbnglf.x, rfdtbnglf.y, rfdtbnglf.width, rfdtbnglf.hfight);
            rfturn;
        }

        whilf(!d.isOpbquf()) {
            pbrfnt = d.gftPbrfnt();
            if(pbrfnt != null) {
                x += d.gftX();
                y += d.gftY();
                d = pbrfnt;
            } flsf {
                brfbk;
            }

            if(!(d instbndfof JComponfnt)) {
                brfbk;
            }
        }
        if(d instbndfof JComponfnt) {
            ((JComponfnt)d)._pbintImmfdibtfly(x,y,w,h);
        } flsf {
            d.rfpbint(x,y,w,h);
        }
    }

    /**
     * Pbints thf spfdififd rfgion now.
     *
     * @pbrbm r b <dodf>Rfdtbnglf</dodf> dontbining thf rfgion to bf pbintfd
     */
    publid void pbintImmfdibtfly(Rfdtbnglf r) {
        pbintImmfdibtfly(r.x,r.y,r.width,r.hfight);
    }

    /**
     * Rfturns whfthfr this domponfnt should bf gubrbntffd to bf on top.
     * For fxbmplf, it would mbkf no sfnsf for <dodf>Mfnu</dodf>s to pop up
     * undfr bnothfr domponfnt, so thfy would blwbys rfturn truf.
     * Most domponfnts will wbnt to rfturn fblsf, hfndf thbt is thf dffbult.
     *
     * @rfturn blwbys rfturns fblsf
     */
    // pbdkbgf privbtf
    boolfbn blwbysOnTop() {
        rfturn fblsf;
    }

    void sftPbintingChild(Componfnt pbintingChild) {
        this.pbintingChild = pbintingChild;
    }

    void _pbintImmfdibtfly(int x, int y, int w, int h) {
        Grbphids g;
        Contbinfr d;
        Rfdtbnglf b;

        int tmpX, tmpY, tmpWidth, tmpHfight;
        int offsftX=0,offsftY=0;

        boolfbn hbsBufffr = fblsf;

        JComponfnt bufffrfdComponfnt = null;
        JComponfnt pbintingComponfnt = this;

        RfpbintMbnbgfr rfpbintMbnbgfr = RfpbintMbnbgfr.durrfntMbnbgfr(this);
        // pbrfnt Contbinfr's up to Window or Applft. First dontbinfr is
        // thf dirfdt pbrfnt. Notf thbt in tfsting it wbs fbstfr to
        // bllod b nfw Vfdtor vs kffping b stbdk of thfm bround, bnd gd
        // sffmfd to hbvf b minimbl ffffdt on this.
        jbvb.util.List<Componfnt> pbth = nfw jbvb.util.ArrbyList<Componfnt>(7);
        int pIndfx = -1;
        int pCount = 0;

        tmpX = tmpY = tmpWidth = tmpHfight = 0;

        Rfdtbnglf pbintImmfdibtflyClip = fftdhRfdtbnglf();
        pbintImmfdibtflyClip.x = x;
        pbintImmfdibtflyClip.y = y;
        pbintImmfdibtflyClip.width = w;
        pbintImmfdibtflyClip.hfight = h;


        // Systfm.out.println("1) ************* in _pbintImmfdibtfly for " + this);

        boolfbn ontop = blwbysOnTop() && isOpbquf();
        if (ontop) {
            SwingUtilitifs.domputfIntfrsfdtion(0, 0, gftWidth(), gftHfight(),
                                               pbintImmfdibtflyClip);
            if (pbintImmfdibtflyClip.width == 0) {
                rfdydlfRfdtbnglf(pbintImmfdibtflyClip);
                rfturn;
            }
        }
        Componfnt dhild;
        for (d = this, dhild = null;
             d != null && !(d instbndfof Window) && !(d instbndfof Applft);
             dhild = d, d = d.gftPbrfnt()) {
                JComponfnt jd = (d instbndfof JComponfnt) ? (JComponfnt)d :
                                null;
                pbth.bdd(d);
                if(!ontop && jd != null && !jd.isOptimizfdDrbwingEnbblfd()) {
                    boolfbn rfsftPC;

                    // Childrfn of d mby ovfrlbp, thrff possiblf dbsfs for thf
                    // pbinting rfgion:
                    // . Complftfly obsdurfd by bn opbquf sibling, in whidh
                    //   dbsf thfrf is no nffd to pbint.
                    // . Pbrtiblly obsdurfd by b sibling: nffd to stbrt
                    //   pbinting from d.
                    // . Othfrwisf wf brfn't obsdurfd bnd thus don't nffd to
                    //   stbrt pbinting from pbrfnt.
                    if (d != this) {
                        if (jd.isPbintingOrigin()) {
                            rfsftPC = truf;
                        }
                        flsf {
                            Componfnt[] dhildrfn = d.gftComponfnts();
                            int i = 0;
                            for (; i<dhildrfn.lfngth; i++) {
                                if (dhildrfn[i] == dhild) brfbk;
                            }
                            switdh (jd.gftObsdurfdStbtf(i,
                                            pbintImmfdibtflyClip.x,
                                            pbintImmfdibtflyClip.y,
                                            pbintImmfdibtflyClip.width,
                                            pbintImmfdibtflyClip.hfight)) {
                            dbsf NOT_OBSCURED:
                                rfsftPC = fblsf;
                                brfbk;
                            dbsf COMPLETELY_OBSCURED:
                                rfdydlfRfdtbnglf(pbintImmfdibtflyClip);
                                rfturn;
                            dffbult:
                                rfsftPC = truf;
                                brfbk;
                            }
                        }
                    }
                    flsf {
                        rfsftPC = fblsf;
                    }

                    if (rfsftPC) {
                        // Gft rid of bny bufffr sindf wf drbw from hfrf bnd
                        // wf might drbw somfthing lbrgfr
                        pbintingComponfnt = jd;
                        pIndfx = pCount;
                        offsftX = offsftY = 0;
                        hbsBufffr = fblsf;
                    }
                }
                pCount++;

                // look to sff if thf pbrfnt (bnd thfrffor this domponfnt)
                // is doublf bufffrfd
                if(rfpbintMbnbgfr.isDoublfBufffringEnbblfd() && jd != null &&
                                  jd.isDoublfBufffrfd()) {
                    hbsBufffr = truf;
                    bufffrfdComponfnt = jd;
                }

                // if wf brfn't on top, indludf thf pbrfnt's dlip
                if (!ontop) {
                    int bx = d.gftX();
                    int by = d.gftY();
                    tmpWidth = d.gftWidth();
                    tmpHfight = d.gftHfight();
                    SwingUtilitifs.domputfIntfrsfdtion(tmpX,tmpY,tmpWidth,tmpHfight,pbintImmfdibtflyClip);
                    pbintImmfdibtflyClip.x += bx;
                    pbintImmfdibtflyClip.y += by;
                    offsftX += bx;
                    offsftY += by;
                }
        }

        // If thf dlip width or hfight is nfgbtivf, don't bothfr pbinting
        if(d == null || d.gftPffr() == null ||
                        pbintImmfdibtflyClip.width <= 0 ||
                        pbintImmfdibtflyClip.hfight <= 0) {
            rfdydlfRfdtbnglf(pbintImmfdibtflyClip);
            rfturn;
        }

        pbintingComponfnt.sftFlbg(IS_REPAINTING, truf);

        pbintImmfdibtflyClip.x -= offsftX;
        pbintImmfdibtflyClip.y -= offsftY;

        // Notify thf Componfnts thbt brf going to bf pbintfd of thf
        // dhild domponfnt to pbint to.
        if(pbintingComponfnt != this) {
            Componfnt domp;
            int i = pIndfx;
            for(; i > 0 ; i--) {
                domp = pbth.gft(i);
                if(domp instbndfof JComponfnt) {
                    ((JComponfnt)domp).sftPbintingChild(pbth.gft(i-1));
                }
            }
        }
        try {
            if ((g = sbfflyGftGrbphids(pbintingComponfnt, d)) != null) {
                try {
                    if (hbsBufffr) {
                        RfpbintMbnbgfr rm = RfpbintMbnbgfr.durrfntMbnbgfr(
                                bufffrfdComponfnt);
                        rm.bfginPbint();
                        try {
                            rm.pbint(pbintingComponfnt, bufffrfdComponfnt, g,
                                    pbintImmfdibtflyClip.x,
                                    pbintImmfdibtflyClip.y,
                                    pbintImmfdibtflyClip.width,
                                    pbintImmfdibtflyClip.hfight);
                        } finblly {
                            rm.fndPbint();
                        }
                    } flsf {
                        g.sftClip(pbintImmfdibtflyClip.x, pbintImmfdibtflyClip.y,
                                pbintImmfdibtflyClip.width, pbintImmfdibtflyClip.hfight);
                        pbintingComponfnt.pbint(g);
                    }
                } finblly {
                    g.disposf();
                }
            }
        }
        finblly {
            // Rfsft thf pbinting dhild for thf pbrfnt domponfnts.
            if(pbintingComponfnt != this) {
                Componfnt domp;
                int i = pIndfx;
                for(; i > 0 ; i--) {
                    domp = pbth.gft(i);
                    if(domp instbndfof JComponfnt) {
                        ((JComponfnt)domp).sftPbintingChild(null);
                    }
                }
            }
            pbintingComponfnt.sftFlbg(IS_REPAINTING, fblsf);
        }
        rfdydlfRfdtbnglf(pbintImmfdibtflyClip);
    }

    /**
     * Pbints to thf spfdififd grbphids.  This dofs not sft thf dlip bnd it
     * dofs not bdjust thf Grbphids in bnywby, dbllfrs must do thbt first.
     * This mfthod is pbdkbgf-privbtf for RfpbintMbnbgfr.PbintMbnbgfr bnd
     * its subdlbssfs to dbll, it is NOT intfndfd for gfnfrbl usf outsidf
     * of thbt.
     */
    void pbintToOffsdrffn(Grbphids g, int x, int y, int w, int h, int mbxX,
                          int mbxY) {
        try {
            sftFlbg(ANCESTOR_USING_BUFFER, truf);
            if ((y + h) < mbxY || (x + w) < mbxX) {
                sftFlbg(IS_PAINTING_TILE, truf);
            }
            if (gftFlbg(IS_REPAINTING)) {
                // Cbllfd from pbintImmfdibtfly (RfpbintMbnbgfr) to fill
                // rfpbint rfqufst
                pbint(g);
            } flsf {
                // Cbllfd from pbint() (AWT) to rfpbir dbmbgf
                if(!rfdtbnglfIsObsdurfd(x, y, w, h)) {
                    pbintComponfnt(g);
                    pbintBordfr(g);
                }
                pbintChildrfn(g);
            }
        } finblly {
            sftFlbg(ANCESTOR_USING_BUFFER, fblsf);
            sftFlbg(IS_PAINTING_TILE, fblsf);
        }
    }

    /**
     * Rfturns whfthfr or not thf rfgion of thf spfdififd domponfnt is
     * obsdurfd by b sibling.
     *
     * @rfturn NOT_OBSCURED if non of thf siblings bbovf thf Componfnt obsdurf
     *         it, COMPLETELY_OBSCURED if onf of thf siblings domplftfly
     *         obsdurfs thf Componfnt or PARTIALLY_OBSCURED if thf Componfnt is
     *         only pbrtiblly obsdurfd.
     */
    privbtf int gftObsdurfdStbtf(int dompIndfx, int x, int y, int width,
                                 int hfight) {
        int rftVbluf = NOT_OBSCURED;
        Rfdtbnglf tmpRfdt = fftdhRfdtbnglf();

        for (int i = dompIndfx - 1 ; i >= 0 ; i--) {
            Componfnt sibling = gftComponfnt(i);
            if (!sibling.isVisiblf()) {
                dontinuf;
            }
            Rfdtbnglf siblingRfdt;
            boolfbn opbquf;
            if (sibling instbndfof JComponfnt) {
                opbquf = sibling.isOpbquf();
                if (!opbquf) {
                    if (rftVbluf == PARTIALLY_OBSCURED) {
                        dontinuf;
                    }
                }
            }
            flsf {
                opbquf = truf;
            }
            siblingRfdt = sibling.gftBounds(tmpRfdt);
            if (opbquf && x >= siblingRfdt.x && (x + width) <=
                     (siblingRfdt.x + siblingRfdt.width) &&
                     y >= siblingRfdt.y && (y + hfight) <=
                     (siblingRfdt.y + siblingRfdt.hfight)) {
                rfdydlfRfdtbnglf(tmpRfdt);
                rfturn COMPLETELY_OBSCURED;
            }
            flsf if (rftVbluf == NOT_OBSCURED &&
                     !((x + width <= siblingRfdt.x) ||
                       (y + hfight <= siblingRfdt.y) ||
                       (x >= siblingRfdt.x + siblingRfdt.width) ||
                       (y >= siblingRfdt.y + siblingRfdt.hfight))) {
                rftVbluf = PARTIALLY_OBSCURED;
            }
        }
        rfdydlfRfdtbnglf(tmpRfdt);
        rfturn rftVbluf;
    }

    /**
     * Rfturns truf, whidh implifs thbt bfforf dhfdking if b dhild should
     * bf pbintfd it is first dhfdk thbt thf dhild is not obsdurfd by bnothfr
     * sibling. This is only dhfdkfd if <dodf>isOptimizfdDrbwingEnbblfd</dodf>
     * rfturns fblsf.
     *
     * @rfturn blwbys rfturns truf
     */
    boolfbn dhfdkIfChildObsdurfdBySibling() {
        rfturn truf;
    }


    privbtf void sftFlbg(int bFlbg, boolfbn bVbluf) {
        if(bVbluf) {
            flbgs |= (1 << bFlbg);
        } flsf {
            flbgs &= ~(1 << bFlbg);
        }
    }
    privbtf boolfbn gftFlbg(int bFlbg) {
        int mbsk = (1 << bFlbg);
        rfturn ((flbgs & mbsk) == mbsk);
    }
    // Thfsf fundtions must bf stbtid so thbt thfy dbn bf dbllfd from
    // subdlbssfs insidf thf pbdkbgf, but whosf inhfritbndf hifrbrhdy indludfs
    // dlbssfs outsidf of thf pbdkbgf bflow JComponfnt (f.g., JTfxtArfb).
    stbtid void sftWritfObjCountfr(JComponfnt domp, bytf dount) {
        domp.flbgs = (domp.flbgs & ~(0xFF << WRITE_OBJ_COUNTER_FIRST)) |
                     (dount << WRITE_OBJ_COUNTER_FIRST);
    }
    stbtid bytf gftWritfObjCountfr(JComponfnt domp) {
        rfturn (bytf)((domp.flbgs >> WRITE_OBJ_COUNTER_FIRST) & 0xFF);
    }

    /** Bufffring **/

    /**
     *  Sfts whfthfr this domponfnt should usf b bufffr to pbint.
     *  If sft to truf, bll thf drbwing from this domponfnt will bf donf
     *  in bn offsdrffn pbinting bufffr. Thf offsdrffn pbinting bufffr will
     *  thf bf dopifd onto thf sdrffn.
     *  If b <dodf>Componfnt</dodf> is bufffrfd bnd onf of its bndfstor
     *  is blso bufffrfd, thf bndfstor bufffr will bf usfd.
     *
     *  @pbrbm bFlbg if truf, sft this domponfnt to bf doublf bufffrfd
     */
    publid void sftDoublfBufffrfd(boolfbn bFlbg) {
        sftFlbg(IS_DOUBLE_BUFFERED,bFlbg);
    }

    /**
     * Rfturns whfthfr this domponfnt should usf b bufffr to pbint.
     *
     * @rfturn truf if this domponfnt is doublf bufffrfd, othfrwisf fblsf
     */
    publid boolfbn isDoublfBufffrfd() {
        rfturn gftFlbg(IS_DOUBLE_BUFFERED);
    }

    /**
     * Rfturns thf <dodf>JRootPbnf</dodf> bndfstor for this domponfnt.
     *
     * @rfturn thf <dodf>JRootPbnf</dodf> thbt dontbins this domponfnt,
     *          or <dodf>null</dodf> if no <dodf>JRootPbnf</dodf> is found
     */
    publid JRootPbnf gftRootPbnf() {
        rfturn SwingUtilitifs.gftRootPbnf(this);
    }


    /** Sfriblizbtion **/

    /**
     * This is dbllfd from Componfnt by wby of rfflfdtion. Do NOT dhbngf
     * thf nbmf unlfss you dhbngf thf dodf in Componfnt bs wfll.
     */
    void dompWritfObjfdtNotify() {
        bytf dount = JComponfnt.gftWritfObjCountfr(this);
        JComponfnt.sftWritfObjCountfr(this, (bytf)(dount + 1));
        if (dount != 0) {
            rfturn;
        }

        uninstbllUIAndPropfrtifs();

        /* JTbblfHfbdfr is in b sfpbrbtf pbdkbgf, whidh prfvfnts it from
         * bfing bblf to ovfrridf this pbdkbgf-privbtf mfthod thf wby thf
         * othfr domponfnts dbn.  Wf don't wbnt to mbkf this mfthod protfdtfd
         * bfdbusf it would introdudf publid-bpi for b lfss-thbn-dfsirbblf
         * sfriblizbtion sdhfmf, so wf dompromisf with this 'instbndfof' hbdk
         * for now.
         */
        if (gftToolTipTfxt() != null ||
            this instbndfof jbvbx.swing.tbblf.JTbblfHfbdfr) {
            ToolTipMbnbgfr.shbrfdInstbndf().unrfgistfrComponfnt(JComponfnt.this);
        }
    }

    /**
     * This objfdt is thf <dodf>ObjfdtInputStrfbm</dodf> dbllbbdk
     * thbt's dbllfd bftfr b domplftf grbph of objfdts (indluding bt lfbst
     * onf <dodf>JComponfnt</dodf>) hbs bffn rfbd.
     *  It sfts thf UI propfrty of fbdh Swing domponfnt
     * thbt wbs rfbd to thf durrfnt dffbult with <dodf>updbtfUI</dodf>.
     * <p>
     * As fbdh  domponfnt is rfbd in wf kffp trbdk of thf durrfnt sft of
     * root domponfnts hfrf, in thf roots vfdtor.  Notf thbt thfrf's only onf
     * <dodf>RfbdObjfdtCbllbbdk</dodf> pfr <dodf>ObjfdtInputStrfbm</dodf>,
     * thfy'rf storfd in thf stbtid <dodf>rfbdObjfdtCbllbbdks</dodf>
     * hbshtbblf.
     *
     * @sff jbvb.io.ObjfdtInputStrfbm#rfgistfrVblidbtion
     * @sff SwingUtilitifs#updbtfComponfntTrffUI
     */
    privbtf dlbss RfbdObjfdtCbllbbdk implfmfnts ObjfdtInputVblidbtion
    {
        privbtf finbl Vfdtor<JComponfnt> roots = nfw Vfdtor<JComponfnt>(1);
        privbtf finbl ObjfdtInputStrfbm inputStrfbm;

        RfbdObjfdtCbllbbdk(ObjfdtInputStrfbm s) throws Exdfption {
            inputStrfbm = s;
            s.rfgistfrVblidbtion(this, 0);
        }

        /**
         * This is thf mfthod thbt's dbllfd bftfr thf fntirf grbph
         * of objfdts hbs bffn rfbd in.  It initiblizfs
         * thf UI propfrty of bll of thf dopmonfnts with
         * <dodf>SwingUtilitifs.updbtfComponfntTrffUI</dodf>.
         */
        publid void vblidbtfObjfdt() throws InvblidObjfdtExdfption {
            try {
                for (JComponfnt root : roots) {
                    SwingUtilitifs.updbtfComponfntTrffUI(root);
                }
            }
            finblly {
                rfbdObjfdtCbllbbdks.rfmovf(inputStrfbm);
            }
        }

        /**
         * If <dodf>d</dodf> isn't b dfsdfndbnt of b domponfnt wf'vf blrfbdy
         * sffn, thfn bdd it to thf roots <dodf>Vfdtor</dodf>.
         *
         * @pbrbm d thf <dodf>JComponfnt</dodf> to bdd
         */
        privbtf void rfgistfrComponfnt(JComponfnt d)
        {
            /* If thf Componfnt d is b dfsdfndbnt of onf of thf
             * fxisting roots (or it IS bn fxisting root), wf'rf donf.
             */
            for (JComponfnt root : roots) {
                for(Componfnt p = d; p != null; p = p.gftPbrfnt()) {
                    if (p == root) {
                        rfturn;
                    }
                }
            }

            /* Othfrwisf: if Componfnt d is bn bndfstor of bny of thf
             * fxisting roots thfn rfmovf thfm bnd bdd d (thf "nfw root")
             * to thf roots vfdtor.
             */
            for(int i = 0; i < roots.sizf(); i++) {
                JComponfnt root = roots.flfmfntAt(i);
                for(Componfnt p = root.gftPbrfnt(); p != null; p = p.gftPbrfnt()) {
                    if (p == d) {
                        roots.rfmovfElfmfntAt(i--); // !!
                        brfbk;
                    }
                }
            }

            roots.bddElfmfnt(d);
        }
    }


    /**
     * Wf usf thf <dodf>ObjfdtInputStrfbm</dodf> "rfgistfrVblidbtion"
     * dbllbbdk to updbtf thf UI for thf fntirf trff of domponfnts
     * bftfr thfy'vf bll bffn rfbd in.
     *
     * @pbrbm s  thf <dodf>ObjfdtInputStrfbm</dodf> from whidh to rfbd
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        throws IOExdfption, ClbssNotFoundExdfption
    {
        s.dffbultRfbdObjfdt();

        /* If thfrf's no RfbdObjfdtCbllbbdk for this strfbm yft, thbt is, if
         * this is thf first dbll to JComponfnt.rfbdObjfdt() for this
         * grbph of objfdts, thfn drfbtf b dbllbbdk bnd stbsh it
         * in thf rfbdObjfdtCbllbbdks tbblf.  Notf thbt thf RfbdObjfdtCbllbbdk
         * donstrudtor tbkfs dbrf of dblling s.rfgistfrVblidbtion().
         */
        RfbdObjfdtCbllbbdk db = rfbdObjfdtCbllbbdks.gft(s);
        if (db == null) {
            try {
                rfbdObjfdtCbllbbdks.put(s, db = nfw RfbdObjfdtCbllbbdk(s));
            }
            dbtdh (Exdfption f) {
                throw nfw IOExdfption(f.toString());
            }
        }
        db.rfgistfrComponfnt(this);

        // Rfbd bbdk thf dlifnt propfrtifs.
        int dpCount = s.rfbdInt();
        if (dpCount > 0) {
            dlifntPropfrtifs = nfw ArrbyTbblf();
            for (int dountfr = 0; dountfr < dpCount; dountfr++) {
                dlifntPropfrtifs.put(s.rfbdObjfdt(),
                                     s.rfbdObjfdt());
            }
        }
        if (gftToolTipTfxt() != null) {
            ToolTipMbnbgfr.shbrfdInstbndf().rfgistfrComponfnt(this);
        }
        sftWritfObjCountfr(this, (bytf)0);
    }


    /**
     * Bfforf writing b <dodf>JComponfnt</dodf> to bn
     * <dodf>ObjfdtOutputStrfbm</dodf> wf tfmporbrily uninstbll its UI.
     * This is tridky to do bfdbusf wf wbnt to uninstbll
     * thf UI bfforf bny of thf <dodf>JComponfnt</dodf>'s dhildrfn
     * (or its <dodf>LbyoutMbnbgfr</dodf> ftd.) brf writtfn,
     * bnd wf don't wbnt to rfstorf thf UI until thf most dfrivfd
     * <dodf>JComponfnt</dodf> subdlbss hbs bffn bffn storfd.
     *
     * @pbrbm s thf <dodf>ObjfdtOutputStrfbm</dodf> in whidh to writf
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
        s.dffbultWritfObjfdt();
        if (gftUIClbssID().fqubls(uiClbssID)) {
            bytf dount = JComponfnt.gftWritfObjCountfr(this);
            JComponfnt.sftWritfObjCountfr(this, --dount);
            if (dount == 0 && ui != null) {
                ui.instbllUI(this);
            }
        }
        ArrbyTbblf.writfArrbyTbblf(s, dlifntPropfrtifs);
    }


    /**
     * Rfturns b string rfprfsfntbtion of this <dodf>JComponfnt</dodf>.
     * This mfthod
     * is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of this <dodf>JComponfnt</dodf>
     */
    protfdtfd String pbrbmString() {
        String prfffrrfdSizfString = (isPrfffrrfdSizfSft() ?
                                      gftPrfffrrfdSizf().toString() : "");
        String minimumSizfString = (isMinimumSizfSft() ?
                                    gftMinimumSizf().toString() : "");
        String mbximumSizfString = (isMbximumSizfSft() ?
                                    gftMbximumSizf().toString() : "");
        String bordfrString = (bordfr == null ? ""
                               : (bordfr == this ? "this" : bordfr.toString()));

        rfturn supfr.pbrbmString() +
        ",blignmfntX=" + blignmfntX +
        ",blignmfntY=" + blignmfntY +
        ",bordfr=" + bordfrString +
        ",flbgs=" + flbgs +             // should bfff this up b bit
        ",mbximumSizf=" + mbximumSizfString +
        ",minimumSizf=" + minimumSizfString +
        ",prfffrrfdSizf=" + prfffrrfdSizfString;
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    @Dfprfdbtfd
    publid void hidf() {
        boolfbn showing = isShowing();
        supfr.hidf();
        if (showing) {
            Contbinfr pbrfnt = gftPbrfnt();
            if (pbrfnt != null) {
                Rfdtbnglf r = gftBounds();
                pbrfnt.rfpbint(r.x, r.y, r.width, r.hfight);
            }
            rfvblidbtf();
        }
    }

}
