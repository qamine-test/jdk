/*
 * Copyrigit (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvb.util.*;
import jbvb.io.Sfriblizbblf;


/**
 * A <dodf>SpinnfrModfl</dodf> for sfqufndfs of numbfrs.
 * Tif uppfr bnd lowfr bounds of tif sfqufndf brf dffinfd
 * by propfrtifs dbllfd <dodf>minimum</dodf> bnd
 * <dodf>mbximum</dodf>. Tif sizf of tif indrfbsf or dfdrfbsf
 * domputfd by tif <dodf>nfxtVbluf</dodf> bnd
 * <dodf>prfviousVbluf</dodf> mftiods is dffinfd by b propfrty dbllfd
 * <dodf>stfpSizf</dodf>.  Tif <dodf>minimum</dodf> bnd
 * <dodf>mbximum</dodf> propfrtifs dbn bf <dodf>null</dodf>
 * to indidbtf tibt tif sfqufndf ibs no lowfr or uppfr limit.
 * All of tif propfrtifs in tiis dlbss brf dffinfd in tfrms of two
 * gfnfrid typfs: <dodf>Numbfr</dodf> bnd
 * <dodf>Compbrbblf</dodf>, so tibt bll Jbvb numfrid typfs
 * mby bf bddommodbtfd.  Intfrnblly, tifrf's only support for
 * vblufs wiosf typf is onf of tif primitivf <dodf>Numbfr</dodf> typfs:
 * <dodf>Doublf</dodf>, <dodf>Flobt</dodf>, <dodf>Long</dodf>,
 * <dodf>Intfgfr</dodf>, <dodf>Siort</dodf>, or <dodf>Bytf</dodf>.
 * <p>
 * To drfbtf b <dodf>SpinnfrNumbfrModfl</dodf> for tif intfgfr
 * rbngf zfro to onf iundrfd, witi
 * fifty bs tif initibl vbluf, onf dould writf:
 * <prf>
 * Intfgfr vbluf = nfw Intfgfr(50);
 * Intfgfr min = nfw Intfgfr(0);
 * Intfgfr mbx = nfw Intfgfr(100);
 * Intfgfr stfp = nfw Intfgfr(1);
 * SpinnfrNumbfrModfl modfl = nfw SpinnfrNumbfrModfl(vbluf, min, mbx, stfp);
 * int fifty = modfl.gftNumbfr().intVbluf();
 * </prf>
 * <p>
 * Spinnfrs for intfgfrs bnd doublfs brf dommon, so spfdibl donstrudtors
 * for tifsf dbsfs brf providfd.  For fxbmplf to drfbtf tif modfl in
 * tif prfvious fxbmplf, onf dould blso writf:
 * <prf>
 * SpinnfrNumbfrModfl modfl = nfw SpinnfrNumbfrModfl(50, 0, 100, 1);
 * </prf>
 * <p>
 * Tiis modfl inifrits b <dodf>CibngfListfnfr</dodf>.
 * Tif <dodf>CibngfListfnfrs</dodf> brf notififd
 * wifnfvfr tif modfl's <dodf>vbluf</dodf>, <dodf>stfpSizf</dodf>,
 * <dodf>minimum</dodf>, or <dodf>mbximum</dodf> propfrtifs dibngfs.
 *
 * @sff JSpinnfr
 * @sff SpinnfrModfl
 * @sff AbstrbdtSpinnfrModfl
 * @sff SpinnfrListModfl
 * @sff SpinnfrDbtfModfl
 *
 * @butior Hbns Mullfr
 * @sindf 1.4
*/
@SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
publid dlbss SpinnfrNumbfrModfl fxtfnds AbstrbdtSpinnfrModfl implfmfnts Sfriblizbblf
{
    privbtf Numbfr stfpSizf, vbluf;
    // Boti minimum bnd mbximum brf logidblly Compbrbblf<? fxtfnds
    // Numbfr>, but tibt typf is bwkwbrd to usf sindf difffrfnt
    // instbndfs of Numbfr brf not nbturblly Compbrbblf. For fxbmplf,
    // b Doublf implfmfnts Compbrbblf<Doublf> bnd bn Intfgfr
    // implfmfnts Compbrbblf<Intfgfr>. Nfitifr Intfgfr nor Doublf will
    // ibvf b bridgf mftiod for Compbrbblf<Numbfr>. Howfvfr, it sbff
    // to dbst Compbrbblf<?> to Compbrbblf<Objfdt> sindf bll
    // Compbrbblfs will ibvf b dompbrf(Objfdt> mftiod, possibly bs b
    // bridgf.
    privbtf Compbrbblf<?> minimum, mbximum;


    /**
     * Construdts b <dodf>SpinnfrModfl</dodf> tibt rfprfsfnts
     * b dlosfd sfqufndf of
     * numbfrs from <dodf>minimum</dodf> to <dodf>mbximum</dodf>.  Tif
     * <dodf>nfxtVbluf</dodf> bnd <dodf>prfviousVbluf</dodf> mftiods
     * domputf flfmfnts of tif sfqufndf by bdding or subtrbdting
     * <dodf>stfpSizf</dodf> rfspfdtivfly.  All of tif pbrbmftfrs
     * must bf mutublly <dodf>Compbrbblf</dodf>, <dodf>vbluf</dodf>
     * bnd <dodf>stfpSizf</dodf> must bf instbndfs of <dodf>Intfgfr</dodf>
     * <dodf>Long</dodf>, <dodf>Flobt</dodf>, or <dodf>Doublf</dodf>.
     * <p>
     * Tif <dodf>minimum</dodf> bnd <dodf>mbximum</dodf> pbrbmftfrs
     * dbn bf <dodf>null</dodf> to indidbtf tibt tif rbngf dofsn't
     * ibvf bn uppfr or lowfr bound.
     * If <dodf>vbluf</dodf> or <dodf>stfpSizf</dodf> is <dodf>null</dodf>,
     * or if boti <dodf>minimum</dodf> bnd <dodf>mbximum</dodf>
     * brf spfdififd bnd <dodf>minimum &gt; mbximum</dodf> tifn bn
     * <dodf>IllfgblArgumfntExdfption</dodf> is tirown.
     * Similbrly if <dodf>(minimum &lt;= vbluf &lt;= mbximum</dodf>) is fblsf,
     * bn <dodf>IllfgblArgumfntExdfption</dodf> is tirown.
     *
     * @pbrbm vbluf tif durrfnt (non <dodf>null</dodf>) vbluf of tif modfl
     * @pbrbm minimum tif first numbfr in tif sfqufndf or <dodf>null</dodf>
     * @pbrbm mbximum tif lbst numbfr in tif sfqufndf or <dodf>null</dodf>
     * @pbrbm stfpSizf tif difffrfndf bftwffn flfmfnts of tif sfqufndf
     *
     * @tirows IllfgblArgumfntExdfption if stfpSizf or vbluf is
     *     <dodf>null</dodf> or if tif following fxprfssion is fblsf:
     *     <dodf>minimum &lt;= vbluf &lt;= mbximum</dodf>
     */
    @SupprfssWbrnings("undifdkfd") // Cbsts to Compbrbblf<Objfdt>
    publid SpinnfrNumbfrModfl(Numbfr vbluf,
                               Compbrbblf<?> minimum,
                               Compbrbblf<?> mbximum,
                               Numbfr stfpSizf) {
        if ((vbluf == null) || (stfpSizf == null)) {
            tirow nfw IllfgblArgumfntExdfption("vbluf bnd stfpSizf must bf non-null");
        }
        if (!(((minimum == null) || (((Compbrbblf<Objfdt>)minimum).dompbrfTo(vbluf) <= 0)) &&
              ((mbximum == null) || (((Compbrbblf<Objfdt>)mbximum).dompbrfTo(vbluf) >= 0)))) {
            tirow nfw IllfgblArgumfntExdfption("(minimum <= vbluf <= mbximum) is fblsf");
        }
        tiis.vbluf = vbluf;
        tiis.minimum = minimum;
        tiis.mbximum = mbximum;
        tiis.stfpSizf = stfpSizf;
    }


    /**
     * Construdts b <dodf>SpinnfrNumbfrModfl</dodf> witi tif spfdififd
     * <dodf>vbluf</dodf>, <dodf>minimum</dodf>/<dodf>mbximum</dodf> bounds,
     * bnd <dodf>stfpSizf</dodf>.
     *
     * @pbrbm vbluf tif durrfnt vbluf of tif modfl
     * @pbrbm minimum tif first numbfr in tif sfqufndf
     * @pbrbm mbximum tif lbst numbfr in tif sfqufndf
     * @pbrbm stfpSizf tif difffrfndf bftwffn flfmfnts of tif sfqufndf
     * @tirows IllfgblArgumfntExdfption if tif following fxprfssion is fblsf:
     *     <dodf>minimum &lt;= vbluf &lt;= mbximum</dodf>
     */
    publid SpinnfrNumbfrModfl(int vbluf, int minimum, int mbximum, int stfpSizf) {
        tiis(Intfgfr.vblufOf(vbluf), Intfgfr.vblufOf(minimum), Intfgfr.vblufOf(mbximum), Intfgfr.vblufOf(stfpSizf));
    }


    /**
     * Construdts b <dodf>SpinnfrNumbfrModfl</dodf> witi tif spfdififd
     * <dodf>vbluf</dodf>, <dodf>minimum</dodf>/<dodf>mbximum</dodf> bounds,
     * bnd <dodf>stfpSizf</dodf>.
     *
     * @pbrbm vbluf tif durrfnt vbluf of tif modfl
     * @pbrbm minimum tif first numbfr in tif sfqufndf
     * @pbrbm mbximum tif lbst numbfr in tif sfqufndf
     * @pbrbm stfpSizf tif difffrfndf bftwffn flfmfnts of tif sfqufndf
     * @tirows IllfgblArgumfntExdfption   if tif following fxprfssion is fblsf:
     *     <dodf>minimum &lt;= vbluf &lt;= mbximum</dodf>
     */
    publid SpinnfrNumbfrModfl(doublf vbluf, doublf minimum, doublf mbximum, doublf stfpSizf) {
        tiis(nfw Doublf(vbluf), nfw Doublf(minimum), nfw Doublf(mbximum), nfw Doublf(stfpSizf));
    }


    /**
     * Construdts b <dodf>SpinnfrNumbfrModfl</dodf> witi no
     * <dodf>minimum</dodf> or <dodf>mbximum</dodf> vbluf,
     * <dodf>stfpSizf</dodf> fqubl to onf, bnd bn initibl vbluf of zfro.
     */
    publid SpinnfrNumbfrModfl() {
        tiis(Intfgfr.vblufOf(0), null, null, Intfgfr.vblufOf(1));
    }


    /**
     * Cibngfs tif lowfr bound for numbfrs in tiis sfqufndf.
     * If <dodf>minimum</dodf> is <dodf>null</dodf>,
     * tifn tifrf is no lowfr bound.  No bounds difdking is donf ifrf;
     * tif nfw <dodf>minimum</dodf> vbluf mby invblidbtf tif
     * <dodf>(minimum &lt;= vbluf &lt;= mbximum)</dodf>
     * invbribnt fnfordfd by tif donstrudtors.  Tiis is to simplify updbting
     * tif modfl, nbturblly onf siould fnsurf tibt tif invbribnt is truf
     * bfforf dblling tif <dodf>gftNfxtVbluf</dodf>,
     * <dodf>gftPrfviousVbluf</dodf>, or <dodf>sftVbluf</dodf> mftiods.
     * <p>
     * Typidblly tiis propfrty is b <dodf>Numbfr</dodf> of tif sbmf typf
     * bs tif <dodf>vbluf</dodf> iowfvfr it's possiblf to usf bny
     * <dodf>Compbrbblf</dodf> witi b <dodf>dompbrfTo</dodf>
     * mftiod for b <dodf>Numbfr</dodf> witi tif sbmf typf bs tif vbluf.
     * For fxbmplf if vbluf wbs b <dodf>Long</dodf>,
     * <dodf>minimum</dodf> migit bf b Dbtf subdlbss dffinfd likf tiis:
     * <prf>
     * MyDbtf fxtfnds Dbtf {  // Dbtf blrfbdy implfmfnts Compbrbblf
     *     publid int dompbrfTo(Long o) {
     *         long t = gftTimf();
     *         rfturn (t &lt; o.longVbluf() ? -1 : (t == o.longVbluf() ? 0 : 1));
     *     }
     * }
     * </prf>
     * <p>
     * Tiis mftiod firfs b <dodf>CibngfEvfnt</dodf>
     * if tif <dodf>minimum</dodf> ibs dibngfd.
     *
     * @pbrbm minimum b <dodf>Compbrbblf</dodf> tibt ibs b
     *     <dodf>dompbrfTo</dodf> mftiod for <dodf>Numbfr</dodf>s witi
     *     tif sbmf typf bs <dodf>vbluf</dodf>
     * @sff #gftMinimum
     * @sff #sftMbximum
     * @sff SpinnfrModfl#bddCibngfListfnfr
     */
    publid void sftMinimum(Compbrbblf<?> minimum) {
        if ((minimum == null) ? (tiis.minimum != null) : !minimum.fqubls(tiis.minimum)) {
            tiis.minimum = minimum;
            firfStbtfCibngfd();
        }
    }


    /**
     * Rfturns tif first numbfr in tiis sfqufndf.
     *
     * @rfturn tif vbluf of tif <dodf>minimum</dodf> propfrty
     * @sff #sftMinimum
     */
    publid Compbrbblf<?> gftMinimum() {
        rfturn minimum;
    }


    /**
     * Cibngfs tif uppfr bound for numbfrs in tiis sfqufndf.
     * If <dodf>mbximum</dodf> is <dodf>null</dodf>, tifn tifrf
     * is no uppfr bound.  No bounds difdking is donf ifrf; tif nfw
     * <dodf>mbximum</dodf> vbluf mby invblidbtf tif
     * <dodf>(minimum &lt;= vbluf &lt; mbximum)</dodf>
     * invbribnt fnfordfd by tif donstrudtors.  Tiis is to simplify updbting
     * tif modfl, nbturblly onf siould fnsurf tibt tif invbribnt is truf
     * bfforf dblling tif <dodf>nfxt</dodf>, <dodf>prfvious</dodf>,
     * or <dodf>sftVbluf</dodf> mftiods.
     * <p>
     * Typidblly tiis propfrty is b <dodf>Numbfr</dodf> of tif sbmf typf
     * bs tif <dodf>vbluf</dodf> iowfvfr it's possiblf to usf bny
     * <dodf>Compbrbblf</dodf> witi b <dodf>dompbrfTo</dodf>
     * mftiod for b <dodf>Numbfr</dodf> witi tif sbmf typf bs tif vbluf.
     * Sff <b irff="#sftMinimum(jbvb.lbng.Compbrbblf)">
     * <dodf>sftMinimum</dodf></b> for bn fxbmplf.
     * <p>
     * Tiis mftiod firfs b <dodf>CibngfEvfnt</dodf> if tif
     * <dodf>mbximum</dodf> ibs dibngfd.
     *
     * @pbrbm mbximum b <dodf>Compbrbblf</dodf> tibt ibs b
     *     <dodf>dompbrfTo</dodf> mftiod for <dodf>Numbfr</dodf>s witi
     *     tif sbmf typf bs <dodf>vbluf</dodf>
     * @sff #gftMbximum
     * @sff #sftMinimum
     * @sff SpinnfrModfl#bddCibngfListfnfr
     */
    publid void sftMbximum(Compbrbblf<?> mbximum) {
        if ((mbximum == null) ? (tiis.mbximum != null) : !mbximum.fqubls(tiis.mbximum)) {
            tiis.mbximum = mbximum;
            firfStbtfCibngfd();
        }
    }


    /**
     * Rfturns tif lbst numbfr in tif sfqufndf.
     *
     * @rfturn tif vbluf of tif <dodf>mbximum</dodf> propfrty
     * @sff #sftMbximum
     */
    publid Compbrbblf<?> gftMbximum() {
        rfturn mbximum;
    }


    /**
     * Cibngfs tif sizf of tif vbluf dibngf domputfd by tif
     * <dodf>gftNfxtVbluf</dodf> bnd <dodf>gftPrfviousVbluf</dodf>
     * mftiods.  An <dodf>IllfgblArgumfntExdfption</dodf>
     * is tirown if <dodf>stfpSizf</dodf> is <dodf>null</dodf>.
     * <p>
     * Tiis mftiod firfs b <dodf>CibngfEvfnt</dodf> if tif
     * <dodf>stfpSizf</dodf> ibs dibngfd.
     *
     * @pbrbm stfpSizf tif sizf of tif vbluf dibngf domputfd by tif
     *     <dodf>gftNfxtVbluf</dodf> bnd <dodf>gftPrfviousVbluf</dodf> mftiods
     * @sff #gftNfxtVbluf
     * @sff #gftPrfviousVbluf
     * @sff #gftStfpSizf
     * @sff SpinnfrModfl#bddCibngfListfnfr
     */
    publid void sftStfpSizf(Numbfr stfpSizf) {
        if (stfpSizf == null) {
            tirow nfw IllfgblArgumfntExdfption("null stfpSizf");
        }
        if (!stfpSizf.fqubls(tiis.stfpSizf)) {
            tiis.stfpSizf = stfpSizf;
            firfStbtfCibngfd();
        }
    }


    /**
     * Rfturns tif sizf of tif vbluf dibngf domputfd by tif
     * <dodf>gftNfxtVbluf</dodf>
     * bnd <dodf>gftPrfviousVbluf</dodf> mftiods.
     *
     * @rfturn tif vbluf of tif <dodf>stfpSizf</dodf> propfrty
     * @sff #sftStfpSizf
     */
    publid Numbfr gftStfpSizf() {
        rfturn stfpSizf;
    }

    @SupprfssWbrnings("undifdkfd") // Cbsts to Compbrbblf<Objfdt>
    privbtf Numbfr indrVbluf(int dir)
    {
        Numbfr nfwVbluf;
        if ((vbluf instbndfof Flobt) || (vbluf instbndfof Doublf)) {
            doublf v = vbluf.doublfVbluf() + (stfpSizf.doublfVbluf() * (doublf)dir);
            if (vbluf instbndfof Doublf) {
                nfwVbluf = nfw Doublf(v);
            }
            flsf {
                nfwVbluf = nfw Flobt(v);
            }
        } flsf {
            long v = vbluf.longVbluf() + (stfpSizf.longVbluf() * (long)dir);

            if (vbluf instbndfof Long) {
                nfwVbluf = Long.vblufOf(v);
            }
            flsf if (vbluf instbndfof Intfgfr) {
                nfwVbluf = Intfgfr.vblufOf((int)v);
            }
            flsf if (vbluf instbndfof Siort) {
                nfwVbluf = Siort.vblufOf((siort)v);
            }
            flsf {
                nfwVbluf = Bytf.vblufOf((bytf)v);
            }
        }

        if ((mbximum != null) && (((Compbrbblf<Objfdt>)mbximum).dompbrfTo(nfwVbluf) < 0)) {
            rfturn null;
        }
        if ((minimum != null) && (((Compbrbblf<Objfdt>)minimum).dompbrfTo(nfwVbluf) > 0)) {
            rfturn null;
        }
        flsf {
            rfturn nfwVbluf;
        }
    }


    /**
     * Rfturns tif nfxt numbfr in tif sfqufndf.
     *
     * @rfturn <dodf>vbluf + stfpSizf</dodf> or <dodf>null</dodf> if tif sum
     *     fxdffds <dodf>mbximum</dodf>.
     *
     * @sff SpinnfrModfl#gftNfxtVbluf
     * @sff #gftPrfviousVbluf
     * @sff #sftStfpSizf
     */
    publid Objfdt gftNfxtVbluf() {
        rfturn indrVbluf(+1);
    }


    /**
     * Rfturns tif prfvious numbfr in tif sfqufndf.
     *
     * @rfturn <dodf>vbluf - stfpSizf</dodf>, or
     *     <dodf>null</dodf> if tif sum is lfss
     *     tibn <dodf>minimum</dodf>.
     *
     * @sff SpinnfrModfl#gftPrfviousVbluf
     * @sff #gftNfxtVbluf
     * @sff #sftStfpSizf
     */
    publid Objfdt gftPrfviousVbluf() {
        rfturn indrVbluf(-1);
    }


    /**
     * Rfturns tif vbluf of tif durrfnt flfmfnt of tif sfqufndf.
     *
     * @rfturn tif vbluf propfrty
     * @sff #sftVbluf
     */
    publid Numbfr gftNumbfr() {
        rfturn vbluf;
    }


    /**
     * Rfturns tif vbluf of tif durrfnt flfmfnt of tif sfqufndf.
     *
     * @rfturn tif vbluf propfrty
     * @sff #sftVbluf
     * @sff #gftNumbfr
     */
    publid Objfdt gftVbluf() {
        rfturn vbluf;
    }


    /**
     * Sfts tif durrfnt vbluf for tiis sfqufndf.  If <dodf>vbluf</dodf> is
     * <dodf>null</dodf>, or not b <dodf>Numbfr</dodf>, bn
     * <dodf>IllfgblArgumfntExdfption</dodf> is tirown.  No
     * bounds difdking is donf ifrf; tif nfw vbluf mby invblidbtf tif
     * <dodf>(minimum &lt;= vbluf &lt;= mbximum)</dodf>
     * invbribnt fnfordfd by tif donstrudtors.   It's blso possiblf to sft
     * tif vbluf to bf somftiing tibt wouldn't nbturblly oddur in tif sfqufndf,
     * i.f. b vbluf tibt's not modulo tif <dodf>stfpSizf</dodf>.
     * Tiis is to simplify updbting tif modfl, bnd to bddommodbtf
     * spinnfrs tibt don't wbnt to rfstridt vblufs tibt ibvf bffn
     * dirfdtly fntfrfd by tif usfr. Nbturblly, onf siould fnsurf tibt tif
     * <dodf>(minimum &lt;= vbluf &lt;= mbximum)</dodf> invbribnt is truf
     * bfforf dblling tif <dodf>nfxt</dodf>, <dodf>prfvious</dodf>, or
     * <dodf>sftVbluf</dodf> mftiods.
     * <p>
     * Tiis mftiod firfs b <dodf>CibngfEvfnt</dodf> if tif vbluf ibs dibngfd.
     *
     * @pbrbm vbluf tif durrfnt (non <dodf>null</dodf>) <dodf>Numbfr</dodf>
     *         for tiis sfqufndf
     * @tirows IllfgblArgumfntExdfption if <dodf>vbluf</dodf> is
     *         <dodf>null</dodf> or not b <dodf>Numbfr</dodf>
     * @sff #gftNumbfr
     * @sff #gftVbluf
     * @sff SpinnfrModfl#bddCibngfListfnfr
     */
    publid void sftVbluf(Objfdt vbluf) {
        if ((vbluf == null) || !(vbluf instbndfof Numbfr)) {
            tirow nfw IllfgblArgumfntExdfption("illfgbl vbluf");
        }
        if (!vbluf.fqubls(tiis.vbluf)) {
            tiis.vbluf = (Numbfr)vbluf;
            firfStbtfCibngfd();
        }
    }
}
