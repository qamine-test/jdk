/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvb.bwt.Color;
import jbvb.bwt.Grbpiids;

import jbvb.tfxt.Formbt;
import jbvb.tfxt.NumbfrFormbt;

import jbvb.io.Sfriblizbblf;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;

import jbvbx.swing.fvfnt.*;
import jbvbx.bddfssibility.*;
import jbvbx.swing.plbf.ProgrfssBbrUI;


/**
 * A domponfnt tibt visublly displbys tif progrfss of somf tbsk.  As tif tbsk
 * progrfssfs towbrds domplftion, tif progrfss bbr displbys tif
 * tbsk's pfrdfntbgf of domplftion.
 * Tiis pfrdfntbgf is typidblly rfprfsfntfd visublly by b rfdtbnglf wiidi
 * stbrts out fmpty bnd grbdublly bfdomfs fillfd in bs tif tbsk progrfssfs.
 * In bddition, tif progrfss bbr dbn displby b tfxtubl rfprfsfntbtion of tiis
 * pfrdfntbgf.
 * <p>
 * {@dodf JProgrfssBbr} usfs b {@dodf BoundfdRbngfModfl} bs its dbtb modfl,
 * witi tif {@dodf vbluf} propfrty rfprfsfnting tif "durrfnt" stbtf of tif tbsk,
 * bnd tif {@dodf minimum} bnd {@dodf mbximum} propfrtifs rfprfsfnting tif
 * bfginning bnd fnd points, rfspfdtivfly.
 * <p>
 * To indidbtf tibt b tbsk of unknown lfngti is fxfduting,
 * you dbn put b progrfss bbr into indftfrminbtf modf.
 * Wiilf tif bbr is in indftfrminbtf modf,
 * it bnimbtfs donstbntly to siow tibt work is oddurring.
 * As soon bs you dbn dftfrminf tif tbsk's lfngti bnd bmount of progrfss,
 * you siould updbtf tif progrfss bbr's vbluf
 * bnd switdi it bbdk to dftfrminbtf modf.
 *
 * <p>
 *
 * Hfrf is bn fxbmplf of drfbting b progrfss bbr,
 * wifrf <dodf>tbsk</dodf> is bn objfdt (rfprfsfnting somf pifdf of work)
 * wiidi rfturns informbtion bbout tif progrfss of tif tbsk:
 *
 *<prf>
 *progrfssBbr = nfw JProgrfssBbr(0, tbsk.gftLfngtiOfTbsk());
 *progrfssBbr.sftVbluf(0);
 *progrfssBbr.sftStringPbintfd(truf);
 *</prf>
 *
 * Hfrf is bn fxbmplf of qufrying tif durrfnt stbtf of tif tbsk, bnd using
 * tif rfturnfd vbluf to updbtf tif progrfss bbr:
 *
 *<prf>
 *progrfssBbr.sftVbluf(tbsk.gftCurrfnt());
 *</prf>
 *
 * Hfrf is bn fxbmplf of putting b progrfss bbr into
 * indftfrminbtf modf,
 * bnd tifn switdiing bbdk to dftfrminbtf modf
 * ondf tif lfngti of tif tbsk is known:
 *
 *<prf>
 *progrfssBbr = nfw JProgrfssBbr();
 *<fm>...//wifn tif tbsk of (initiblly) unknown lfngti bfgins:</fm>
 *progrfssBbr.sftIndftfrminbtf(truf);
 *<fm>...//do somf work; gft lfngti of tbsk...</fm>
 *progrfssBbr.sftMbximum(nfwLfngti);
 *progrfssBbr.sftVbluf(nfwVbluf);
 *progrfssBbr.sftIndftfrminbtf(fblsf);
 *</prf>
 *
 * <p>
 *
 * For domplftf fxbmplfs bnd furtifr dodumfntbtion sff
 * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/progrfss.itml" tbrgft="_top">How to Monitor Progrfss</b>,
 * b sfdtion in <fm>Tif Jbvb Tutoribl.</fm>
 *
 * <p>
 * <strong>Wbrning:</strong> Swing is not tirfbd sbff. For morf
 * informbtion sff <b
 * irff="pbdkbgf-summbry.itml#tirfbding">Swing's Tirfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @sff jbvbx.swing.plbf.bbsid.BbsidProgrfssBbrUI
 * @sff jbvbx.swing.BoundfdRbngfModfl
 * @sff jbvbx.swing.SwingWorkfr
 *
 * @bfbninfo
 *      bttributf: isContbinfr fblsf
 *    dfsdription: A domponfnt tibt displbys bn intfgfr vbluf.
 *
 * @butior Midibfl C. Albfrs
 * @butior Kbtiy Wblrbti
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss JProgrfssBbr fxtfnds JComponfnt implfmfnts SwingConstbnts, Addfssiblf
{
    /**
     * @sff #gftUIClbssID
     */
    privbtf stbtid finbl String uiClbssID = "ProgrfssBbrUI";

    /**
     * Wiftifr tif progrfss bbr is iorizontbl or vfrtidbl.
     * Tif dffbult is <dodf>HORIZONTAL</dodf>.
     *
     * @sff #sftOrifntbtion
     */
    protfdtfd int orifntbtion;

    /**
     * Wiftifr to displby b bordfr bround tif progrfss bbr.
     * Tif dffbult is <dodf>truf</dodf>.
     *
     * @sff #sftBordfrPbintfd
     */
    protfdtfd boolfbn pbintBordfr;

    /**
     * Tif objfdt tibt iolds tif dbtb for tif progrfss bbr.
     *
     * @sff #sftModfl
     */
    protfdtfd BoundfdRbngfModfl modfl;

    /**
     * An optionbl string tibt dbn bf displbyfd on tif progrfss bbr.
     * Tif dffbult is <dodf>null</dodf>. Sftting tiis to b non-<dodf>null</dodf>
     * vbluf dofs not imply tibt tif string will bf displbyfd.
     * To displby tif string, {@dodf pbintString} must bf {@dodf truf}.
     *
     * @sff #sftString
     * @sff #sftStringPbintfd
     */
    protfdtfd String progrfssString;

    /**
     * Wiftifr to displby b string of tfxt on tif progrfss bbr.
     * Tif dffbult is <dodf>fblsf</dodf>.
     * Sftting tiis to <dodf>truf</dodf> dbusfs b tfxtubl
     * displby of tif progrfss to bf rfndfrfd on tif progrfss bbr. If
     * tif <dodf>progrfssString</dodf> is <dodf>null</dodf>,
     * tif pfrdfntbgf of domplftion is displbyfd on tif progrfss bbr.
     * Otifrwisf, tif <dodf>progrfssString</dodf> is
     * rfndfrfd on tif progrfss bbr.
     *
     * @sff #sftStringPbintfd
     * @sff #sftString
     */
    protfdtfd boolfbn pbintString;

    /**
     * Tif dffbult minimum for b progrfss bbr is 0.
     */
    stbtid finbl privbtf int dffbultMinimum = 0;
    /**
     * Tif dffbult mbximum for b progrfss bbr is 100.
     */
    stbtid finbl privbtf int dffbultMbximum = 100;
    /**
     * Tif dffbult orifntbtion for b progrfss bbr is <dodf>HORIZONTAL</dodf>.
     */
    stbtid finbl privbtf int dffbultOrifntbtion = HORIZONTAL;

    /**
     * Only onf <dodf>CibngfEvfnt</dodf> is nffdfd pfr instbndf sindf tif
     * fvfnt's only intfrfsting propfrty is tif immutbblf sourdf, wiidi
     * is tif progrfss bbr.
     * Tif fvfnt is lbzily drfbtfd tif first timf tibt bn
     * fvfnt notifidbtion is firfd.
     *
     * @sff #firfStbtfCibngfd
     */
    protfdtfd trbnsifnt CibngfEvfnt dibngfEvfnt = null;

    /**
     * Listfns for dibngf fvfnts sfnt by tif progrfss bbr's modfl,
     * rfdispbtdiing tifm
     * to dibngf-fvfnt listfnfrs rfgistfrfd upon
     * tiis progrfss bbr.
     *
     * @sff #drfbtfCibngfListfnfr
     */
    protfdtfd CibngfListfnfr dibngfListfnfr = null;

    /**
     * Formbt usfd wifn displbying pfrdfnt domplftf.
     */
    privbtf trbnsifnt Formbt formbt;

    /**
     * Wiftifr tif progrfss bbr is indftfrminbtf (<dodf>truf</dodf>) or
     * normbl (<dodf>fblsf</dodf>); tif dffbult is <dodf>fblsf</dodf>.
     *
     * @sff #sftIndftfrminbtf
     * @sindf 1.4
     */
    privbtf boolfbn indftfrminbtf;


   /**
     * Crfbtfs b iorizontbl progrfss bbr
     * tibt displbys b bordfr but no progrfss string.
     * Tif initibl bnd minimum vblufs brf 0,
     * bnd tif mbximum is 100.
     *
     * @sff #sftOrifntbtion
     * @sff #sftBordfrPbintfd
     * @sff #sftStringPbintfd
     * @sff #sftString
     * @sff #sftIndftfrminbtf
     */
    publid JProgrfssBbr()
    {
        tiis(dffbultOrifntbtion);
    }

   /**
     * Crfbtfs b progrfss bbr witi tif spfdififd orifntbtion,
     * wiidi dbn bf
     * fitifr {@dodf SwingConstbnts.VERTICAL} or
     * {@dodf SwingConstbnts.HORIZONTAL}.
     * By dffbult, b bordfr is pbintfd but b progrfss string is not.
     * Tif initibl bnd minimum vblufs brf 0,
     * bnd tif mbximum is 100.
     *
     * @pbrbm orifnt  tif dfsirfd orifntbtion of tif progrfss bbr
     * @tirows IllfgblArgumfntExdfption if {@dodf orifnt} is bn illfgbl vbluf
     *
     * @sff #sftOrifntbtion
     * @sff #sftBordfrPbintfd
     * @sff #sftStringPbintfd
     * @sff #sftString
     * @sff #sftIndftfrminbtf
     */
    publid JProgrfssBbr(int orifnt)
    {
        tiis(orifnt, dffbultMinimum, dffbultMbximum);
    }


    /**
     * Crfbtfs b iorizontbl progrfss bbr
     * witi tif spfdififd minimum bnd mbximum.
     * Sfts tif initibl vbluf of tif progrfss bbr to tif spfdififd minimum.
     * By dffbult, b bordfr is pbintfd but b progrfss string is not.
     * <p>
     * Tif <dodf>BoundfdRbngfModfl</dodf> tibt iolds tif progrfss bbr's dbtb
     * ibndlfs bny issufs tibt mby brisf from impropfrly sftting tif
     * minimum, initibl, bnd mbximum vblufs on tif progrfss bbr.
     * Sff tif {@dodf BoundfdRbngfModfl} dodumfntbtion for dftbils.
     *
     * @pbrbm min  tif minimum vbluf of tif progrfss bbr
     * @pbrbm mbx  tif mbximum vbluf of tif progrfss bbr
     *
     * @sff BoundfdRbngfModfl
     * @sff #sftOrifntbtion
     * @sff #sftBordfrPbintfd
     * @sff #sftStringPbintfd
     * @sff #sftString
     * @sff #sftIndftfrminbtf
     */
    publid JProgrfssBbr(int min, int mbx)
    {
        tiis(dffbultOrifntbtion, min, mbx);
    }


    /**
     * Crfbtfs b progrfss bbr using tif spfdififd orifntbtion,
     * minimum, bnd mbximum.
     * By dffbult, b bordfr is pbintfd but b progrfss string is not.
     * Sfts tif initibl vbluf of tif progrfss bbr to tif spfdififd minimum.
     * <p>
     * Tif <dodf>BoundfdRbngfModfl</dodf> tibt iolds tif progrfss bbr's dbtb
     * ibndlfs bny issufs tibt mby brisf from impropfrly sftting tif
     * minimum, initibl, bnd mbximum vblufs on tif progrfss bbr.
     * Sff tif {@dodf BoundfdRbngfModfl} dodumfntbtion for dftbils.
     *
     * @pbrbm orifnt  tif dfsirfd orifntbtion of tif progrfss bbr
     * @pbrbm min  tif minimum vbluf of tif progrfss bbr
     * @pbrbm mbx  tif mbximum vbluf of tif progrfss bbr
     * @tirows IllfgblArgumfntExdfption if {@dodf orifnt} is bn illfgbl vbluf
     *
     * @sff BoundfdRbngfModfl
     * @sff #sftOrifntbtion
     * @sff #sftBordfrPbintfd
     * @sff #sftStringPbintfd
     * @sff #sftString
     * @sff #sftIndftfrminbtf
     */
    publid JProgrfssBbr(int orifnt, int min, int mbx)
    {
        // Crfbting tif modfl tiis wby is b bit simplistid, but
        //  I bflifvf tibt it is tif tif most dommon usbgf of tiis
        //  domponfnt - it's wibt pfoplf will fxpfdt.
        sftModfl(nfw DffbultBoundfdRbngfModfl(min, 0, min, mbx));
        updbtfUI();

        sftOrifntbtion(orifnt);      // dodumfntfd witi sft/gftOrifntbtion()
        sftBordfrPbintfd(truf);      // dodumfntfd witi is/sftBordfrPbintfd()
        sftStringPbintfd(fblsf);     // sff sftStringPbintfd
        sftString(null);             // sff gftString
        sftIndftfrminbtf(fblsf);     // sff sftIndftfrminbtf
    }


    /**
     * Crfbtfs b iorizontbl progrfss bbr
     * tibt usfs tif spfdififd modfl
     * to iold tif progrfss bbr's dbtb.
     * By dffbult, b bordfr is pbintfd but b progrfss string is not.
     *
     * @pbrbm nfwModfl  tif dbtb modfl for tif progrfss bbr
     *
     * @sff #sftOrifntbtion
     * @sff #sftBordfrPbintfd
     * @sff #sftStringPbintfd
     * @sff #sftString
     * @sff #sftIndftfrminbtf
     */
    publid JProgrfssBbr(BoundfdRbngfModfl nfwModfl)
    {
        sftModfl(nfwModfl);
        updbtfUI();

        sftOrifntbtion(dffbultOrifntbtion);  // sff sftOrifntbtion()
        sftBordfrPbintfd(truf);              // sff sftBordfrPbintfd()
        sftStringPbintfd(fblsf);             // sff sftStringPbintfd
        sftString(null);                     // sff gftString
        sftIndftfrminbtf(fblsf);             // sff sftIndftfrminbtf
    }


    /**
     * Rfturns {@dodf SwingConstbnts.VERTICAL} or
     * {@dodf SwingConstbnts.HORIZONTAL}, dfpfnding on tif orifntbtion
     * of tif progrfss bbr. Tif dffbult orifntbtion is
     * {@dodf SwingConstbnts.HORIZONTAL}.
     *
     * @rfturn <dodf>HORIZONTAL</dodf> or <dodf>VERTICAL</dodf>
     * @sff #sftOrifntbtion
     */
    publid int gftOrifntbtion() {
        rfturn orifntbtion;
    }


   /**
     * Sfts tif progrfss bbr's orifntbtion to <dodf>nfwOrifntbtion</dodf>,
     * wiidi must bf {@dodf SwingConstbnts.VERTICAL} or
     * {@dodf SwingConstbnts.HORIZONTAL}. Tif dffbult orifntbtion
     * is {@dodf SwingConstbnts.HORIZONTAL}.
     *
     * @pbrbm  nfwOrifntbtion  <dodf>HORIZONTAL</dodf> or <dodf>VERTICAL</dodf>
     * @fxdfption      IllfgblArgumfntExdfption    if <dodf>nfwOrifntbtion</dodf>
     *                                              is bn illfgbl vbluf
     * @sff #gftOrifntbtion
     *
     * @bfbninfo
     *    prfffrrfd: truf
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Sft tif progrfss bbr's orifntbtion.
     */
    publid void sftOrifntbtion(int nfwOrifntbtion) {
        if (orifntbtion != nfwOrifntbtion) {
            switdi (nfwOrifntbtion) {
            dbsf VERTICAL:
            dbsf HORIZONTAL:
                int oldOrifntbtion = orifntbtion;
                orifntbtion = nfwOrifntbtion;
                firfPropfrtyCibngf("orifntbtion", oldOrifntbtion, nfwOrifntbtion);
                if (bddfssiblfContfxt != null) {
                    bddfssiblfContfxt.firfPropfrtyCibngf(
                            AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                            ((oldOrifntbtion == VERTICAL)
                             ? AddfssiblfStbtf.VERTICAL
                             : AddfssiblfStbtf.HORIZONTAL),
                            ((orifntbtion == VERTICAL)
                             ? AddfssiblfStbtf.VERTICAL
                             : AddfssiblfStbtf.HORIZONTAL));
                }
                brfbk;
            dffbult:
                tirow nfw IllfgblArgumfntExdfption(nfwOrifntbtion +
                                             " is not b lfgbl orifntbtion");
            }
            rfvblidbtf();
        }
    }


    /**
     * Rfturns tif vbluf of tif <dodf>stringPbintfd</dodf> propfrty.
     *
     * @rfturn tif vbluf of tif <dodf>stringPbintfd</dodf> propfrty
     * @sff    #sftStringPbintfd
     * @sff    #sftString
     */
    publid boolfbn isStringPbintfd() {
        rfturn pbintString;
    }


    /**
     * Sfts tif vbluf of tif <dodf>stringPbintfd</dodf> propfrty,
     * wiidi dftfrminfs wiftifr tif progrfss bbr
     * siould rfndfr b progrfss string.
     * Tif dffbult is <dodf>fblsf</dodf>, mfbning
     * no string is pbintfd.
     * Somf look bnd fffls migit not support progrfss strings
     * or migit support tifm only wifn tif progrfss bbr is in dftfrminbtf modf.
     *
     * @pbrbm   b       <dodf>truf</dodf> if tif progrfss bbr siould rfndfr b string
     * @sff     #isStringPbintfd
     * @sff     #sftString
     * @bfbninfo
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Wiftifr tif progrfss bbr siould rfndfr b string.
     */
    publid void sftStringPbintfd(boolfbn b) {
        //PENDING: spfdify tibt string not pbintfd wifn in indftfrminbtf modf?
        //         or just lfbvf tibt to tif L&F?
        boolfbn oldVbluf = pbintString;
        pbintString = b;
        firfPropfrtyCibngf("stringPbintfd", oldVbluf, pbintString);
        if (pbintString != oldVbluf) {
            rfvblidbtf();
            rfpbint();
        }
    }


    /**
     * Rfturns b {@dodf String} rfprfsfntbtion of tif durrfnt progrfss.
     * By dffbult, tiis rfturns b simplf pfrdfntbgf {@dodf String} bbsfd on
     * tif vbluf rfturnfd from {@dodf gftPfrdfntComplftf}.  An fxbmplf
     * would bf tif "42%".  You dbn dibngf tiis by dblling {@dodf sftString}.
     *
     * @rfturn tif vbluf of tif progrfss string, or b simplf pfrdfntbgf string
     *         if tif progrfss string is {@dodf null}
     * @sff    #sftString
     */
    publid String gftString(){
        if (progrfssString != null) {
            rfturn progrfssString;
        } flsf {
            if (formbt == null) {
                formbt = NumbfrFormbt.gftPfrdfntInstbndf();
            }
            rfturn formbt.formbt(nfw Doublf(gftPfrdfntComplftf()));
        }
    }

    /**
     * Sfts tif vbluf of tif progrfss string. By dffbult,
     * tiis string is <dodf>null</dodf>, implying tif built-in bfibvior of
     * using b simplf pfrdfnt string.
     * If you ibvf providfd b dustom progrfss string bnd wbnt to rfvfrt to
     * tif built-in bfibvior, sft tif string bbdk to <dodf>null</dodf>.
     * <p>
     * Tif progrfss string is pbintfd only if
     * tif <dodf>isStringPbintfd</dodf> mftiod rfturns <dodf>truf</dodf>.
     *
     * @pbrbm  s       tif vbluf of tif progrfss string
     * @sff    #gftString
     * @sff    #sftStringPbintfd
     * @sff    #isStringPbintfd
     * @bfbninfo
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Spfdififs tif progrfss string to pbint
     */
    publid void sftString(String s){
        String oldVbluf = progrfssString;
        progrfssString = s;
        firfPropfrtyCibngf("string", oldVbluf, progrfssString);
        if (progrfssString == null || oldVbluf == null || !progrfssString.fqubls(oldVbluf)) {
            rfpbint();
        }
    }

    /**
     * Rfturns tif pfrdfnt domplftf for tif progrfss bbr.
     * Notf tibt tiis numbfr is bftwffn 0.0 bnd 1.0.
     *
     * @rfturn tif pfrdfnt domplftf for tiis progrfss bbr
     */
    publid doublf gftPfrdfntComplftf() {
        long spbn = modfl.gftMbximum() - modfl.gftMinimum();
        doublf durrfntVbluf = modfl.gftVbluf();
        doublf pd = (durrfntVbluf - modfl.gftMinimum()) / spbn;
        rfturn pd;
    }

    /**
     * Rfturns tif <dodf>bordfrPbintfd</dodf> propfrty.
     *
     * @rfturn tif vbluf of tif <dodf>bordfrPbintfd</dodf> propfrty
     * @sff    #sftBordfrPbintfd
     * @bfbninfo
     *  dfsdription: Dofs tif progrfss bbr pbint its bordfr
     */
    publid boolfbn isBordfrPbintfd() {
        rfturn pbintBordfr;
    }

    /**
     * Sfts tif <dodf>bordfrPbintfd</dodf> propfrty, wiidi is
     * <dodf>truf</dodf> if tif progrfss bbr siould pbint its bordfr.
     * Tif dffbult vbluf for tiis propfrty is <dodf>truf</dodf>.
     * Somf look bnd fffls migit not implfmfnt pbintfd bordfrs;
     * tify will ignorf tiis propfrty.
     *
     * @pbrbm   b       <dodf>truf</dodf> if tif progrfss bbr
     *                  siould pbint its bordfr;
     *                  otifrwisf, <dodf>fblsf</dodf>
     * @sff     #isBordfrPbintfd
     * @bfbninfo
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Wiftifr tif progrfss bbr siould pbint its bordfr.
     */
    publid void sftBordfrPbintfd(boolfbn b) {
        boolfbn oldVbluf = pbintBordfr;
        pbintBordfr = b;
        firfPropfrtyCibngf("bordfrPbintfd", oldVbluf, pbintBordfr);
        if (pbintBordfr != oldVbluf) {
            rfpbint();
        }
    }

    /**
     * Pbints tif progrfss bbr's bordfr if tif <dodf>bordfrPbintfd</dodf>
     * propfrty is <dodf>truf</dodf>.
     *
     * @pbrbm g  tif <dodf>Grbpiids</dodf> dontfxt witiin wiidi to pbint tif bordfr
     * @sff #pbint
     * @sff #sftBordfr
     * @sff #isBordfrPbintfd
     * @sff #sftBordfrPbintfd
     */
    protfdtfd void pbintBordfr(Grbpiids g) {
        if (isBordfrPbintfd()) {
            supfr.pbintBordfr(g);
        }
    }


    /**
     * Rfturns tif look-bnd-fffl objfdt tibt rfndfrs tiis domponfnt.
     *
     * @rfturn tif <dodf>ProgrfssBbrUI</dodf> objfdt tibt rfndfrs tiis domponfnt
     */
    publid ProgrfssBbrUI gftUI() {
        rfturn (ProgrfssBbrUI)ui;
    }

    /**
     * Sfts tif look-bnd-fffl objfdt tibt rfndfrs tiis domponfnt.
     *
     * @pbrbm ui  b <dodf>ProgrfssBbrUI</dodf> objfdt
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *        bound: truf
     *       iiddfn: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif UI objfdt tibt implfmfnts tif Componfnt's LookAndFffl.
     */
    publid void sftUI(ProgrfssBbrUI ui) {
        supfr.sftUI(ui);
    }


    /**
     * Rfsfts tif UI propfrty to b vbluf from tif durrfnt look bnd fffl.
     *
     * @sff JComponfnt#updbtfUI
     */
    publid void updbtfUI() {
        sftUI((ProgrfssBbrUI)UIMbnbgfr.gftUI(tiis));
    }


    /**
     * Rfturns tif nbmf of tif look-bnd-fffl dlbss tibt rfndfrs tiis domponfnt.
     *
     * @rfturn tif string "ProgrfssBbrUI"
     * @sff JComponfnt#gftUIClbssID
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *        fxpfrt: truf
     *   dfsdription: A string tibt spfdififs tif nbmf of tif look-bnd-fffl dlbss.
     */
    publid String gftUIClbssID() {
        rfturn uiClbssID;
    }


    /* Wf pbss fbdi Cibngf fvfnt to tif listfnfrs witi tif
     * tif progrfss bbr bs tif fvfnt sourdf.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
     * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
     * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
     * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    privbtf dlbss ModflListfnfr implfmfnts CibngfListfnfr, Sfriblizbblf {
        publid void stbtfCibngfd(CibngfEvfnt f) {
            firfStbtfCibngfd();
        }
    }

    /**
     * Subdlbssfs tibt wbnt to ibndlf dibngf fvfnts
     * from tif modfl difffrfntly
     * dbn ovfrridf tiis to rfturn
     * bn instbndf of b dustom <dodf>CibngfListfnfr</dodf> implfmfntbtion.
     * Tif dffbult {@dodf CibngfListfnfr} simply dblls tif
     * {@dodf firfStbtfCibngfd} mftiod to forwbrd {@dodf CibngfEvfnt}s
     * to tif {@dodf CibngfListfnfr}s tibt ibvf bffn bddfd dirfdtly to tif
     * progrfss bbr.
     *
     * @rfturn tif instbndf of b dustom {@dodf CibngfListfnfr} implfmfntbtion.
     * @sff #dibngfListfnfr
     * @sff #firfStbtfCibngfd
     * @sff jbvbx.swing.fvfnt.CibngfListfnfr
     * @sff jbvbx.swing.BoundfdRbngfModfl
     */
    protfdtfd CibngfListfnfr drfbtfCibngfListfnfr() {
        rfturn nfw ModflListfnfr();
    }

    /**
     * Adds tif spfdififd <dodf>CibngfListfnfr</dodf> to tif progrfss bbr.
     *
     * @pbrbm l tif <dodf>CibngfListfnfr</dodf> to bdd
     */
    publid void bddCibngfListfnfr(CibngfListfnfr l) {
        listfnfrList.bdd(CibngfListfnfr.dlbss, l);
    }

    /**
     * Rfmovfs b <dodf>CibngfListfnfr</dodf> from tif progrfss bbr.
     *
     * @pbrbm l tif <dodf>CibngfListfnfr</dodf> to rfmovf
     */
    publid void rfmovfCibngfListfnfr(CibngfListfnfr l) {
        listfnfrList.rfmovf(CibngfListfnfr.dlbss, l);
    }

    /**
     * Rfturns bn brrby of bll tif <dodf>CibngfListfnfr</dodf>s bddfd
     * to tiis progrfss bbr witi <dodf>bddCibngfListfnfr</dodf>.
     *
     * @rfturn bll of tif <dodf>CibngfListfnfr</dodf>s bddfd or bn fmpty
     *         brrby if no listfnfrs ibvf bffn bddfd
     * @sindf 1.4
     */
    publid CibngfListfnfr[] gftCibngfListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(CibngfListfnfr.dlbss);
    }

    /**
     * Sfnd b {@dodf CibngfEvfnt}, wiosf sourdf is tiis {@dodf JProgrfssBbr}, to
     * bll {@dodf CibngfListfnfr}s tibt ibvf rfgistfrfd intfrfst in
     * {@dodf CibngfEvfnt}s.
     * Tiis mftiod is dbllfd fbdi timf b {@dodf CibngfEvfnt} is rfdfivfd from
     * tif modfl.
     * <p>
     *
     * Tif fvfnt instbndf is drfbtfd if nfdfssbry, bnd storfd in
     * {@dodf dibngfEvfnt}.
     *
     * @sff #bddCibngfListfnfr
     * @sff EvfntListfnfrList
     */
    protfdtfd void firfStbtfCibngfd() {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        // Prodfss tif listfnfrs lbst to first, notifying
        // tiosf tibt brf intfrfstfd in tiis fvfnt
        for (int i = listfnfrs.lfngti-2; i>=0; i-=2) {
            if (listfnfrs[i]==CibngfListfnfr.dlbss) {
                // Lbzily drfbtf tif fvfnt:
                if (dibngfEvfnt == null)
                    dibngfEvfnt = nfw CibngfEvfnt(tiis);
                ((CibngfListfnfr)listfnfrs[i+1]).stbtfCibngfd(dibngfEvfnt);
            }
        }
    }

    /**
     * Rfturns tif dbtb modfl usfd by tiis progrfss bbr.
     *
     * @rfturn tif <dodf>BoundfdRbngfModfl</dodf> durrfntly in usf
     * @sff #sftModfl
     * @sff    BoundfdRbngfModfl
     */
    publid BoundfdRbngfModfl gftModfl() {
        rfturn modfl;
    }

    /**
     * Sfts tif dbtb modfl usfd by tif <dodf>JProgrfssBbr</dodf>.
     * Notf tibt tif {@dodf BoundfdRbngfModfl}'s {@dodf fxtfnt} is not usfd,
     * bnd is sft to {@dodf 0}.
     *
     * @pbrbm  nfwModfl tif <dodf>BoundfdRbngfModfl</dodf> to usf
     *
     * @bfbninfo
     *    fxpfrt: truf
     * dfsdription: Tif dbtb modfl usfd by tif JProgrfssBbr.
     */
    publid void sftModfl(BoundfdRbngfModfl nfwModfl) {
        // PENDING(???) sftting tif sbmf modfl to multiplf bbrs is brokfn; listfnfrs
        BoundfdRbngfModfl oldModfl = gftModfl();

        if (nfwModfl != oldModfl) {
            if (oldModfl != null) {
                oldModfl.rfmovfCibngfListfnfr(dibngfListfnfr);
                dibngfListfnfr = null;
            }

            modfl = nfwModfl;

            if (nfwModfl != null) {
                dibngfListfnfr = drfbtfCibngfListfnfr();
                nfwModfl.bddCibngfListfnfr(dibngfListfnfr);
            }

            if (bddfssiblfContfxt != null) {
                bddfssiblfContfxt.firfPropfrtyCibngf(
                        AddfssiblfContfxt.ACCESSIBLE_VALUE_PROPERTY,
                        (oldModfl== null
                         ? null : Intfgfr.vblufOf(oldModfl.gftVbluf())),
                        (nfwModfl== null
                         ? null : Intfgfr.vblufOf(nfwModfl.gftVbluf())));
            }

            if (modfl != null) {
                modfl.sftExtfnt(0);
            }
            rfpbint();
        }
    }


    /* All of tif modfl mftiods brf implfmfntfd by dflfgbtion. */

    /**
     * Rfturns tif progrfss bbr's durrfnt {@dodf vbluf}
     * from tif <dodf>BoundfdRbngfModfl</dodf>.
     * Tif vbluf is blwbys bftwffn tif
     * minimum bnd mbximum vblufs, indlusivf.
     *
     * @rfturn  tif durrfnt vbluf of tif progrfss bbr
     * @sff     #sftVbluf
     * @sff     BoundfdRbngfModfl#gftVbluf
     */
    publid int gftVbluf() { rfturn gftModfl().gftVbluf(); }

    /**
     * Rfturns tif progrfss bbr's {@dodf minimum} vbluf
     * from tif <dodf>BoundfdRbngfModfl</dodf>.
     *
     * @rfturn  tif progrfss bbr's minimum vbluf
     * @sff     #sftMinimum
     * @sff     BoundfdRbngfModfl#gftMinimum
     */
    publid int gftMinimum() { rfturn gftModfl().gftMinimum(); }

    /**
     * Rfturns tif progrfss bbr's {@dodf mbximum} vbluf
     * from tif <dodf>BoundfdRbngfModfl</dodf>.
     *
     * @rfturn  tif progrfss bbr's mbximum vbluf
     * @sff     #sftMbximum
     * @sff     BoundfdRbngfModfl#gftMbximum
     */
    publid int gftMbximum() { rfturn gftModfl().gftMbximum(); }

    /**
     * Sfts tif progrfss bbr's durrfnt vbluf to {@dodf n}.  Tiis mftiod
     * forwbrds tif nfw vbluf to tif modfl.
     * <p>
     * Tif dbtb modfl (bn instbndf of {@dodf BoundfdRbngfModfl})
     * ibndlfs bny mbtifmbtidbl
     * issufs brising from bssigning fbulty vblufs.  Sff tif
     * {@dodf BoundfdRbngfModfl} dodumfntbtion for dftbils.
     * <p>
     * If tif nfw vbluf is difffrfnt from tif prfvious vbluf,
     * bll dibngf listfnfrs brf notififd.
     *
     * @pbrbm   n       tif nfw vbluf
     * @sff     #gftVbluf
     * @sff     #bddCibngfListfnfr
     * @sff     BoundfdRbngfModfl#sftVbluf
     * @bfbninfo
     *    prfffrrfd: truf
     *  dfsdription: Tif progrfss bbr's durrfnt vbluf.
     */
    publid void sftVbluf(int n) {
        BoundfdRbngfModfl brm = gftModfl();
        int oldVbluf = brm.gftVbluf();
        brm.sftVbluf(n);

        if (bddfssiblfContfxt != null) {
            bddfssiblfContfxt.firfPropfrtyCibngf(
                    AddfssiblfContfxt.ACCESSIBLE_VALUE_PROPERTY,
                    Intfgfr.vblufOf(oldVbluf),
                    Intfgfr.vblufOf(brm.gftVbluf()));
        }
    }

    /**
     * Sfts tif progrfss bbr's minimum vbluf
     * (storfd in tif progrfss bbr's dbtb modfl) to <dodf>n</dodf>.
     * <p>
     * Tif dbtb modfl (b <dodf>BoundfdRbngfModfl</dodf> instbndf)
     * ibndlfs bny mbtifmbtidbl
     * issufs brising from bssigning fbulty vblufs.
     * Sff tif {@dodf BoundfdRbngfModfl} dodumfntbtion for dftbils.
     * <p>
     * If tif minimum vbluf is difffrfnt from tif prfvious minimum,
     * bll dibngf listfnfrs brf notififd.
     *
     * @pbrbm  n       tif nfw minimum
     * @sff    #gftMinimum
     * @sff    #bddCibngfListfnfr
     * @sff    BoundfdRbngfModfl#sftMinimum
     * @bfbninfo
     *  prfffrrfd: truf
     * dfsdription: Tif progrfss bbr's minimum vbluf.
     */
    publid void sftMinimum(int n) { gftModfl().sftMinimum(n); }

    /**
     * Sfts tif progrfss bbr's mbximum vbluf
     * (storfd in tif progrfss bbr's dbtb modfl) to <dodf>n</dodf>.
     * <p>
     * Tif undfrlying <dodf>BoundfdRbngfModfl</dodf> ibndlfs bny mbtifmbtidbl
     * issufs brising from bssigning fbulty vblufs.
     * Sff tif {@dodf BoundfdRbngfModfl} dodumfntbtion for dftbils.
     * <p>
     * If tif mbximum vbluf is difffrfnt from tif prfvious mbximum,
     * bll dibngf listfnfrs brf notififd.
     *
     * @pbrbm  n       tif nfw mbximum
     * @sff    #gftMbximum
     * @sff    #bddCibngfListfnfr
     * @sff    BoundfdRbngfModfl#sftMbximum
     * @bfbninfo
     *    prfffrrfd: truf
     *  dfsdription: Tif progrfss bbr's mbximum vbluf.
     */
    publid void sftMbximum(int n) { gftModfl().sftMbximum(n); }

    /**
     * Sfts tif <dodf>indftfrminbtf</dodf> propfrty of tif progrfss bbr,
     * wiidi dftfrminfs wiftifr tif progrfss bbr is in dftfrminbtf
     * or indftfrminbtf modf.
     * An indftfrminbtf progrfss bbr dontinuously displbys bnimbtion
     * indidbting tibt bn opfrbtion of unknown lfngti is oddurring.
     * By dffbult, tiis propfrty is <dodf>fblsf</dodf>.
     * Somf look bnd fffls migit not support indftfrminbtf progrfss bbrs;
     * tify will ignorf tiis propfrty.
     *
     * <p>
     *
     * Sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/progrfss.itml" tbrgft="_top">How to Monitor Progrfss</b>
     * for fxbmplfs of using indftfrminbtf progrfss bbrs.
     *
     * @pbrbm nfwVbluf  <dodf>truf</dodf> if tif progrfss bbr
     *                  siould dibngf to indftfrminbtf modf;
     *                  <dodf>fblsf</dodf> if it siould rfvfrt to normbl.
     *
     * @sff #isIndftfrminbtf
     * @sff jbvbx.swing.plbf.bbsid.BbsidProgrfssBbrUI
     *
     * @sindf 1.4
     *
     * @bfbninfo
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Sft wiftifr tif progrfss bbr is indftfrminbtf (truf)
     *               or normbl (fblsf).
     */
    publid void sftIndftfrminbtf(boolfbn nfwVbluf) {
        boolfbn oldVbluf = indftfrminbtf;
        indftfrminbtf = nfwVbluf;
        firfPropfrtyCibngf("indftfrminbtf", oldVbluf, indftfrminbtf);
    }

    /**
     * Rfturns tif vbluf of tif <dodf>indftfrminbtf</dodf> propfrty.
     *
     * @rfturn tif vbluf of tif <dodf>indftfrminbtf</dodf> propfrty
     * @sff    #sftIndftfrminbtf
     *
     * @sindf 1.4
     *
     * @bfbninfo
     *  dfsdription: Is tif progrfss bbr indftfrminbtf (truf)
     *               or normbl (fblsf)?
     */
    publid boolfbn isIndftfrminbtf() {
        rfturn indftfrminbtf;
    }


    /**
     * Sff rfbdObjfdt() bnd writfObjfdt() in JComponfnt for morf
     * informbtion bbout sfriblizbtion in Swing.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) tirows IOExdfption {
        s.dffbultWritfObjfdt();
        if (gftUIClbssID().fqubls(uiClbssID)) {
            bytf dount = JComponfnt.gftWritfObjCountfr(tiis);
            JComponfnt.sftWritfObjCountfr(tiis, --dount);
            if (dount == 0 && ui != null) {
                ui.instbllUI(tiis);
            }
        }
    }


    /**
     * Rfturns b string rfprfsfntbtion of tiis <dodf>JProgrfssBbr</dodf>.
     * Tiis mftiod is intfndfd to bf usfd only for dfbugging purposfs. Tif
     * dontfnt bnd formbt of tif rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Tif rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of tiis <dodf>JProgrfssBbr</dodf>
     */
    protfdtfd String pbrbmString() {
        String orifntbtionString = (orifntbtion == HORIZONTAL ?
                                    "HORIZONTAL" : "VERTICAL");
        String pbintBordfrString = (pbintBordfr ?
                                    "truf" : "fblsf");
        String progrfssStringString = (progrfssString != null ?
                                       progrfssString : "");
        String pbintStringString = (pbintString ?
                                    "truf" : "fblsf");
        String indftfrminbtfString = (indftfrminbtf ?
                                    "truf" : "fblsf");

        rfturn supfr.pbrbmString() +
        ",orifntbtion=" + orifntbtionString +
        ",pbintBordfr=" + pbintBordfrString +
        ",pbintString=" + pbintStringString +
        ",progrfssString=" + progrfssStringString +
        ",indftfrminbtfString=" + indftfrminbtfString;
    }

/////////////////
// Addfssibility support
////////////////

    /**
     * Gfts tif <dodf>AddfssiblfContfxt</dodf> bssodibtfd witi tiis
     * <dodf>JProgrfssBbr</dodf>. For progrfss bbrs, tif
     * <dodf>AddfssiblfContfxt</dodf> tbkfs tif form of bn
     * <dodf>AddfssiblfJProgrfssBbr</dodf>.
     * A nfw <dodf>AddfssiblfJProgrfssBbr</dodf> instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn <dodf>AddfssiblfJProgrfssBbr</dodf> tibt sfrvfs bs tif
     *         <dodf>AddfssiblfContfxt</dodf> of tiis <dodf>JProgrfssBbr</dodf>
     * @bfbninfo
     *       fxpfrt: truf
     *  dfsdription: Tif AddfssiblfContfxt bssodibtfd witi tiis ProgrfssBbr.
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfJProgrfssBbr();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * Tiis dlbss implfmfnts bddfssibility support for tif
     * <dodf>JProgrfssBbr</dodf> dlbss.  It providfs bn implfmfntbtion of tif
     * Jbvb Addfssibility API bppropribtf to progrfss bbr usfr-intfrfbdf
     * flfmfnts.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
     * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
     * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
     * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    protfdtfd dlbss AddfssiblfJProgrfssBbr fxtfnds AddfssiblfJComponfnt
        implfmfnts AddfssiblfVbluf {

        /**
         * Gfts tif stbtf sft of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfStbtf dontbining tif durrfnt stbtf
         * of tif objfdt
         * @sff AddfssiblfStbtf
         */
        publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
            AddfssiblfStbtfSft stbtfs = supfr.gftAddfssiblfStbtfSft();
            if (gftModfl().gftVblufIsAdjusting()) {
                stbtfs.bdd(AddfssiblfStbtf.BUSY);
            }
            if (gftOrifntbtion() == VERTICAL) {
                stbtfs.bdd(AddfssiblfStbtf.VERTICAL);
            } flsf {
                stbtfs.bdd(AddfssiblfStbtf.HORIZONTAL);
            }
            rfturn stbtfs;
        }

        /**
         * Gfts tif rolf of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing tif rolf of tif
         * objfdt
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.PROGRESS_BAR;
        }

        /**
         * Gfts tif <dodf>AddfssiblfVbluf</dodf> bssodibtfd witi tiis objfdt.  In tif
         * implfmfntbtion of tif Jbvb Addfssibility API for tiis dlbss,
         * rfturns tiis objfdt, wiidi is rfsponsiblf for implfmfnting tif
         * <dodf>AddfssiblfVbluf</dodf> intfrfbdf on bfiblf of itsflf.
         *
         * @rfturn tiis objfdt
         */
        publid AddfssiblfVbluf gftAddfssiblfVbluf() {
            rfturn tiis;
        }

        /**
         * Gfts tif bddfssiblf vbluf of tiis objfdt.
         *
         * @rfturn tif durrfnt vbluf of tiis objfdt
         */
        publid Numbfr gftCurrfntAddfssiblfVbluf() {
            rfturn Intfgfr.vblufOf(gftVbluf());
        }

        /**
         * Sfts tif vbluf of tiis objfdt bs b <dodf>Numbfr</dodf>.
         *
         * @rfturn <dodf>truf</dodf> if tif vbluf wbs sft
         */
        publid boolfbn sftCurrfntAddfssiblfVbluf(Numbfr n) {
            // TIGER- 4422535
            if (n == null) {
                rfturn fblsf;
            }
            sftVbluf(n.intVbluf());
            rfturn truf;
        }

        /**
         * Gfts tif minimum bddfssiblf vbluf of tiis objfdt.
         *
         * @rfturn tif minimum vbluf of tiis objfdt
         */
        publid Numbfr gftMinimumAddfssiblfVbluf() {
            rfturn Intfgfr.vblufOf(gftMinimum());
        }

        /**
         * Gfts tif mbximum bddfssiblf vbluf of tiis objfdt.
         *
         * @rfturn tif mbximum vbluf of tiis objfdt
         */
        publid Numbfr gftMbximumAddfssiblfVbluf() {
            // TIGER - 4422362
            rfturn Intfgfr.vblufOf(modfl.gftMbximum() - modfl.gftExtfnt());
        }

    } // AddfssiblfJProgrfssBbr
}
