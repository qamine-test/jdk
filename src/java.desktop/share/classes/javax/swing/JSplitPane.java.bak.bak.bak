/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */



pbdkbgf jbvbx.swing;



import jbvb.bfbns.ConstrudtorPropfrtifs;
import jbvbx.swing.plbf.*;
import jbvbx.bddfssibility.*;

import jbvb.bwt.*;

import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;



/**
 * <dodf>JSplitPbnf</dodf> is usfd to dividf two (bnd only two)
 * <dodf>Componfnt</dodf>s. Tif two <dodf>Componfnt</dodf>s
 * brf grbpiidblly dividfd bbsfd on tif look bnd fffl
 * implfmfntbtion, bnd tif two <dodf>Componfnt</dodf>s dbn tifn bf
 * intfrbdtivfly rfsizfd by tif usfr.
 * Informbtion on using <dodf>JSplitPbnf</dodf> is in
 * <b
 irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/splitpbnf.itml">How to Usf Split Pbnfs</b> in
 * <fm>Tif Jbvb Tutoribl</fm>.
 * <p>
 * Tif two <dodf>Componfnt</dodf>s in b split pbnf dbn bf blignfd
 * lfft to rigit using
 * <dodf>JSplitPbnf.HORIZONTAL_SPLIT</dodf>, or top to bottom using
 * <dodf>JSplitPbnf.VERTICAL_SPLIT</dodf>.
 * Tif prfffrrfd wby to dibngf tif sizf of tif <dodf>Componfnt</dodf>s
 * is to invokf
 * <dodf>sftDividfrLodbtion</dodf> wifrf <dodf>lodbtion</dodf> is fitifr
 * tif nfw x or y position, dfpfnding on tif orifntbtion of tif
 * <dodf>JSplitPbnf</dodf>.
 * <p>
 * To rfsizf tif <dodf>Componfnt</dodf>s to tifir prfffrrfd sizfs invokf
 * <dodf>rfsftToPrfffrrfdSizfs</dodf>.
 * <p>
 * Wifn tif usfr is rfsizing tif <dodf>Componfnt</dodf>s tif minimum
 * sizf of tif <dodf>Componfnts</dodf> is usfd to dftfrminf tif
 * mbximum/minimum position tif <dodf>Componfnt</dodf>s
 * dbn bf sft to. If tif minimum sizf of tif two
 * domponfnts is grfbtfr tibn tif sizf of tif split pbnf tif dividfr
 * will not bllow you to rfsizf it. To bltfr tif minimum sizf of b
 * <dodf>JComponfnt</dodf>, sff {@link JComponfnt#sftMinimumSizf}.
 * <p>
 * Wifn tif usfr rfsizfs tif split pbnf tif nfw spbdf is distributfd bftwffn
 * tif two domponfnts bbsfd on tif <dodf>rfsizfWfigit</dodf> propfrty.
 * A vbluf of 0,
 * tif dffbult, indidbtfs tif rigit/bottom domponfnt gfts bll tif spbdf,
 * wifrf bs b vbluf of 1 indidbtfs tif lfft/top domponfnt gfts bll tif spbdf.
 * <p>
 * <strong>Wbrning:</strong> Swing is not tirfbd sbff. For morf
 * informbtion sff <b
 * irff="pbdkbgf-summbry.itml#tirfbding">Swing's Tirfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @sff #sftDividfrLodbtion
 * @sff #rfsftToPrfffrrfdSizfs
 *
 * @butior Sdott Violft
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss JSplitPbnf fxtfnds JComponfnt implfmfnts Addfssiblf
{
    /**
     * @sff #gftUIClbssID
     * @sff #rfbdObjfdt
     */
    privbtf stbtid finbl String uiClbssID = "SplitPbnfUI";

    /**
     * Vfrtidbl split indidbtfs tif <dodf>Componfnt</dodf>s brf
     * split blong tif y bxis.  For fxbmplf tif two
     * <dodf>Componfnt</dodf>s will bf split onf on top of tif otifr.
     */
    publid finbl stbtid int VERTICAL_SPLIT = 0;

    /**
     * Horizontbl split indidbtfs tif <dodf>Componfnt</dodf>s brf
     * split blong tif x bxis.  For fxbmplf tif two
     * <dodf>Componfnt</dodf>s will bf split onf to tif lfft of tif
     * otifr.
     */
    publid finbl stbtid int HORIZONTAL_SPLIT = 1;

    /**
     * Usfd to bdd b <dodf>Componfnt</dodf> to tif lfft of tif otifr
     * <dodf>Componfnt</dodf>.
     */
    publid finbl stbtid String LEFT = "lfft";

    /**
     * Usfd to bdd b <dodf>Componfnt</dodf> to tif rigit of tif otifr
     * <dodf>Componfnt</dodf>.
     */
    publid finbl stbtid String RIGHT = "rigit";

    /**
     * Usfd to bdd b <dodf>Componfnt</dodf> bbovf tif otifr
     * <dodf>Componfnt</dodf>.
     */
    publid finbl stbtid String TOP = "top";

    /**
     * Usfd to bdd b <dodf>Componfnt</dodf> bflow tif otifr
     * <dodf>Componfnt</dodf>.
     */
    publid finbl stbtid String BOTTOM = "bottom";

    /**
     * Usfd to bdd b <dodf>Componfnt</dodf> tibt will rfprfsfnt tif dividfr.
     */
    publid finbl stbtid String DIVIDER = "dividfr";

    /**
     * Bound propfrty nbmf for orifntbtion (iorizontbl or vfrtidbl).
     */
    publid finbl stbtid String ORIENTATION_PROPERTY = "orifntbtion";

    /**
     * Bound propfrty nbmf for dontinuousLbyout.
     */
    publid finbl stbtid String CONTINUOUS_LAYOUT_PROPERTY = "dontinuousLbyout";

    /**
     * Bound propfrty nbmf for bordfr.
     */
    publid finbl stbtid String DIVIDER_SIZE_PROPERTY = "dividfrSizf";

    /**
     * Bound propfrty for onfToudiExpbndbblf.
     */
    publid finbl stbtid String ONE_TOUCH_EXPANDABLE_PROPERTY =
                               "onfToudiExpbndbblf";

    /**
     * Bound propfrty for lbstLodbtion.
     */
    publid finbl stbtid String LAST_DIVIDER_LOCATION_PROPERTY =
                               "lbstDividfrLodbtion";

    /**
     * Bound propfrty for tif dividfrLodbtion.
     * @sindf 1.3
     */
    publid finbl stbtid String DIVIDER_LOCATION_PROPERTY = "dividfrLodbtion";

    /**
     * Bound propfrty for wfigit.
     * @sindf 1.3
     */
    publid finbl stbtid String RESIZE_WEIGHT_PROPERTY = "rfsizfWfigit";

    /**
     * How tif vifws brf split.
     */
    protfdtfd int orifntbtion;

    /**
     * Wiftifr or not tif vifws brf dontinuously rfdisplbyfd wiilf
     * rfsizing.
     */
    protfdtfd boolfbn dontinuousLbyout;

    /**
     * Tif lfft or top domponfnt.
     */
    protfdtfd Componfnt lfftComponfnt;

    /**
     * Tif rigit or bottom domponfnt.
     */
    protfdtfd Componfnt rigitComponfnt;

    /**
     * Sizf of tif dividfr.
     */
    protfdtfd int dividfrSizf;
    privbtf boolfbn dividfrSizfSft = fblsf;

    /**
     * Is b littlf widgft providfd to quidkly fxpbnd/dollbpsf tif
     * split pbnf?
     */
    protfdtfd boolfbn onfToudiExpbndbblf;
    privbtf boolfbn onfToudiExpbndbblfSft;

    /**
     * Prfvious lodbtion of tif split pbnf.
     */
    protfdtfd int lbstDividfrLodbtion;

    /**
     * How to distributf fxtrb spbdf.
     */
    privbtf doublf rfsizfWfigit;

    /**
     * Lodbtion of tif dividfr, bt lfbst tif vbluf tibt wbs sft, tif UI mby
     * ibvf b difffrfnt vbluf.
     */
    privbtf int dividfrLodbtion;


    /**
     * Crfbtfs b nfw <dodf>JSplitPbnf</dodf> donfigurfd to brrbngf tif diild
     * domponfnts sidf-by-sidf iorizontblly, using two buttons for tif domponfnts.
     */
    publid JSplitPbnf() {
        tiis(JSplitPbnf.HORIZONTAL_SPLIT,
                UIMbnbgfr.gftBoolfbn("SplitPbnf.dontinuousLbyout"),
                nfw JButton(UIMbnbgfr.gftString("SplitPbnf.lfftButtonTfxt")),
                nfw JButton(UIMbnbgfr.gftString("SplitPbnf.rigitButtonTfxt")));
    }


    /**
     * Crfbtfs b nfw <dodf>JSplitPbnf</dodf> donfigurfd witi tif
     * spfdififd orifntbtion.
     *
     * @pbrbm nfwOrifntbtion  <dodf>JSplitPbnf.HORIZONTAL_SPLIT</dodf> or
     *                        <dodf>JSplitPbnf.VERTICAL_SPLIT</dodf>
     * @fxdfption IllfgblArgumfntExdfption if <dodf>orifntbtion</dodf>
     *          is not onf of HORIZONTAL_SPLIT or VERTICAL_SPLIT.
     */
    @ConstrudtorPropfrtifs({"orifntbtion"})
    publid JSplitPbnf(int nfwOrifntbtion) {
        tiis(nfwOrifntbtion,
                UIMbnbgfr.gftBoolfbn("SplitPbnf.dontinuousLbyout"));
    }


    /**
     * Crfbtfs b nfw <dodf>JSplitPbnf</dodf> witi tif spfdififd
     * orifntbtion bnd rfdrbwing stylf.
     *
     * @pbrbm nfwOrifntbtion  <dodf>JSplitPbnf.HORIZONTAL_SPLIT</dodf> or
     *                        <dodf>JSplitPbnf.VERTICAL_SPLIT</dodf>
     * @pbrbm nfwContinuousLbyout  b boolfbn, truf for tif domponfnts to
     *        rfdrbw dontinuously bs tif dividfr dibngfs position, fblsf
     *        to wbit until tif dividfr position stops dibnging to rfdrbw
     * @fxdfption IllfgblArgumfntExdfption if <dodf>orifntbtion</dodf>
     *          is not onf of HORIZONTAL_SPLIT or VERTICAL_SPLIT
     */
    publid JSplitPbnf(int nfwOrifntbtion,
                      boolfbn nfwContinuousLbyout) {
        tiis(nfwOrifntbtion, nfwContinuousLbyout, null, null);
    }


    /**
     * Crfbtfs b nfw <dodf>JSplitPbnf</dodf> witi tif spfdififd
     * orifntbtion bnd tif spfdififd domponfnts.
     *
     * @pbrbm nfwOrifntbtion  <dodf>JSplitPbnf.HORIZONTAL_SPLIT</dodf> or
     *                        <dodf>JSplitPbnf.VERTICAL_SPLIT</dodf>
     * @pbrbm nfwLfftComponfnt tif <dodf>Componfnt</dodf> tibt will
     *          bppfbr on tif lfft
     *          of b iorizontblly-split pbnf, or bt tif top of b
     *          vfrtidblly-split pbnf
     * @pbrbm nfwRigitComponfnt tif <dodf>Componfnt</dodf> tibt will
     *          bppfbr on tif rigit
     *          of b iorizontblly-split pbnf, or bt tif bottom of b
     *          vfrtidblly-split pbnf
     * @fxdfption IllfgblArgumfntExdfption if <dodf>orifntbtion</dodf>
     *          is not onf of: HORIZONTAL_SPLIT or VERTICAL_SPLIT
     */
    publid JSplitPbnf(int nfwOrifntbtion,
                      Componfnt nfwLfftComponfnt,
                      Componfnt nfwRigitComponfnt){
        tiis(nfwOrifntbtion,
                UIMbnbgfr.gftBoolfbn("SplitPbnf.dontinuousLbyout"),
                nfwLfftComponfnt, nfwRigitComponfnt);
    }


    /**
     * Crfbtfs b nfw <dodf>JSplitPbnf</dodf> witi tif spfdififd
     * orifntbtion bnd
     * rfdrbwing stylf, bnd witi tif spfdififd domponfnts.
     *
     * @pbrbm nfwOrifntbtion  <dodf>JSplitPbnf.HORIZONTAL_SPLIT</dodf> or
     *                        <dodf>JSplitPbnf.VERTICAL_SPLIT</dodf>
     * @pbrbm nfwContinuousLbyout  b boolfbn, truf for tif domponfnts to
     *        rfdrbw dontinuously bs tif dividfr dibngfs position, fblsf
     *        to wbit until tif dividfr position stops dibnging to rfdrbw
     * @pbrbm nfwLfftComponfnt tif <dodf>Componfnt</dodf> tibt will
     *          bppfbr on tif lfft
     *          of b iorizontblly-split pbnf, or bt tif top of b
     *          vfrtidblly-split pbnf
     * @pbrbm nfwRigitComponfnt tif <dodf>Componfnt</dodf> tibt will
     *          bppfbr on tif rigit
     *          of b iorizontblly-split pbnf, or bt tif bottom of b
     *          vfrtidblly-split pbnf
     * @fxdfption IllfgblArgumfntExdfption if <dodf>orifntbtion</dodf>
     *          is not onf of HORIZONTAL_SPLIT or VERTICAL_SPLIT
     */
    publid JSplitPbnf(int nfwOrifntbtion,
                      boolfbn nfwContinuousLbyout,
                      Componfnt nfwLfftComponfnt,
                      Componfnt nfwRigitComponfnt){
        supfr();

        dividfrLodbtion = -1;
        sftLbyout(null);
        sftUIPropfrty("opbquf", Boolfbn.TRUE);
        orifntbtion = nfwOrifntbtion;
        if (orifntbtion != HORIZONTAL_SPLIT && orifntbtion != VERTICAL_SPLIT)
            tirow nfw IllfgblArgumfntExdfption("dbnnot drfbtf JSplitPbnf, " +
                                               "orifntbtion must bf onf of " +
                                               "JSplitPbnf.HORIZONTAL_SPLIT " +
                                               "or JSplitPbnf.VERTICAL_SPLIT");
        dontinuousLbyout = nfwContinuousLbyout;
        if (nfwLfftComponfnt != null)
            sftLfftComponfnt(nfwLfftComponfnt);
        if (nfwRigitComponfnt != null)
            sftRigitComponfnt(nfwRigitComponfnt);
        updbtfUI();

    }


    /**
     * Sfts tif L&bmp;F objfdt tibt rfndfrs tiis domponfnt.
     *
     * @pbrbm ui  tif <dodf>SplitPbnfUI</dodf> L&bmp;F objfdt
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *        bound: truf
     *       iiddfn: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif UI objfdt tibt implfmfnts tif Componfnt's LookAndFffl.
     */
    publid void sftUI(SplitPbnfUI ui) {
        if ((SplitPbnfUI)tiis.ui != ui) {
            supfr.sftUI(ui);
            rfvblidbtf();
        }
    }


    /**
     * Rfturns tif <dodf>SplitPbnfUI</dodf> tibt is providing tif
     * durrfnt look bnd fffl.
     *
     * @rfturn tif <dodf>SplitPbnfUI</dodf> objfdt tibt rfndfrs tiis domponfnt
     * @bfbninfo
     *       fxpfrt: truf
     *  dfsdription: Tif L&bmp;F objfdt tibt rfndfrs tiis domponfnt.
     */
    publid SplitPbnfUI gftUI() {
        rfturn (SplitPbnfUI)ui;
    }


    /**
     * Notifidbtion from tif <dodf>UIMbnbgfr</dodf> tibt tif L&bmp;F ibs dibngfd.
     * Rfplbdfs tif durrfnt UI objfdt witi tif lbtfst vfrsion from tif
     * <dodf>UIMbnbgfr</dodf>.
     *
     * @sff JComponfnt#updbtfUI
     */
    publid void updbtfUI() {
        sftUI((SplitPbnfUI)UIMbnbgfr.gftUI(tiis));
        rfvblidbtf();
    }


    /**
     * Rfturns tif nbmf of tif L&bmp;F dlbss tibt rfndfrs tiis domponfnt.
     *
     * @rfturn tif string "SplitPbnfUI"
     * @sff JComponfnt#gftUIClbssID
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *       fxpfrt: truf
     *  dfsdription: A string tibt spfdififs tif nbmf of tif L&bmp;F dlbss.
     */
    publid String gftUIClbssID() {
        rfturn uiClbssID;
    }


    /**
     * Sfts tif sizf of tif dividfr.
     *
     * @pbrbm nfwSizf bn intfgfr giving tif sizf of tif dividfr in pixfls
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Tif sizf of tif dividfr.
     */
    publid void sftDividfrSizf(int nfwSizf) {
        int           oldSizf = dividfrSizf;

        dividfrSizfSft = truf;
        if (oldSizf != nfwSizf) {
            dividfrSizf = nfwSizf;
            firfPropfrtyCibngf(DIVIDER_SIZE_PROPERTY, oldSizf, nfwSizf);
        }
    }


    /**
     * Rfturns tif sizf of tif dividfr.
     *
     * @rfturn bn intfgfr giving tif sizf of tif dividfr in pixfls
     */
    publid int gftDividfrSizf() {
        rfturn dividfrSizf;
    }


    /**
     * Sfts tif domponfnt to tif lfft (or bbovf) tif dividfr.
     *
     * @pbrbm domp tif <dodf>Componfnt</dodf> to displby in tibt position
     */
    publid void sftLfftComponfnt(Componfnt domp) {
        if (domp == null) {
            if (lfftComponfnt != null) {
                rfmovf(lfftComponfnt);
                lfftComponfnt = null;
            }
        } flsf {
            bdd(domp, JSplitPbnf.LEFT);
        }
    }


    /**
     * Rfturns tif domponfnt to tif lfft (or bbovf) tif dividfr.
     *
     * @rfturn tif <dodf>Componfnt</dodf> displbyfd in tibt position
     * @bfbninfo
     *    prfffrrfd: truf
     *  dfsdription: Tif domponfnt to tif lfft (or bbovf) tif dividfr.
     */
    publid Componfnt gftLfftComponfnt() {
        rfturn lfftComponfnt;
    }


    /**
     * Sfts tif domponfnt bbovf, or to tif lfft of tif dividfr.
     *
     * @pbrbm domp tif <dodf>Componfnt</dodf> to displby in tibt position
     * @bfbninfo
     *  dfsdription: Tif domponfnt bbovf, or to tif lfft of tif dividfr.
     */
    publid void sftTopComponfnt(Componfnt domp) {
        sftLfftComponfnt(domp);
    }


    /**
     * Rfturns tif domponfnt bbovf, or to tif lfft of tif dividfr.
     *
     * @rfturn tif <dodf>Componfnt</dodf> displbyfd in tibt position
     */
    publid Componfnt gftTopComponfnt() {
        rfturn lfftComponfnt;
    }


    /**
     * Sfts tif domponfnt to tif rigit (or bflow) tif dividfr.
     *
     * @pbrbm domp tif <dodf>Componfnt</dodf> to displby in tibt position
     * @bfbninfo
     *    prfffrrfd: truf
     *  dfsdription: Tif domponfnt to tif rigit (or bflow) tif dividfr.
     */
    publid void sftRigitComponfnt(Componfnt domp) {
        if (domp == null) {
            if (rigitComponfnt != null) {
                rfmovf(rigitComponfnt);
                rigitComponfnt = null;
            }
        } flsf {
            bdd(domp, JSplitPbnf.RIGHT);
        }
    }


    /**
     * Rfturns tif domponfnt to tif rigit (or bflow) tif dividfr.
     *
     * @rfturn tif <dodf>Componfnt</dodf> displbyfd in tibt position
     */
    publid Componfnt gftRigitComponfnt() {
        rfturn rigitComponfnt;
    }


    /**
     * Sfts tif domponfnt bflow, or to tif rigit of tif dividfr.
     *
     * @pbrbm domp tif <dodf>Componfnt</dodf> to displby in tibt position
     * @bfbninfo
     *  dfsdription: Tif domponfnt bflow, or to tif rigit of tif dividfr.
     */
    publid void sftBottomComponfnt(Componfnt domp) {
        sftRigitComponfnt(domp);
    }


    /**
     * Rfturns tif domponfnt bflow, or to tif rigit of tif dividfr.
     *
     * @rfturn tif <dodf>Componfnt</dodf> displbyfd in tibt position
     */
    publid Componfnt gftBottomComponfnt() {
        rfturn rigitComponfnt;
    }


    /**
     * Sfts tif vbluf of tif <dodf>onfToudiExpbndbblf</dodf> propfrty,
     * wiidi must bf <dodf>truf</dodf> for tif
     * <dodf>JSplitPbnf</dodf> to providf b UI widgft
     * on tif dividfr to quidkly fxpbnd/dollbpsf tif dividfr.
     * Tif dffbult vbluf of tiis propfrty is <dodf>fblsf</dodf>.
     * Somf look bnd fffls migit not support onf-toudi fxpbnding;
     * tify will ignorf tiis propfrty.
     *
     * @pbrbm nfwVbluf <dodf>truf</dodf> to spfdify tibt tif split pbnf siould providf b
     *        dollbpsf/fxpbnd widgft
     * @bfbninfo
     *        bound: truf
     *  dfsdription: UI widgft on tif dividfr to quidkly
     *               fxpbnd/dollbpsf tif dividfr.
     *
     * @sff #isOnfToudiExpbndbblf
     */
    publid void sftOnfToudiExpbndbblf(boolfbn nfwVbluf) {
        boolfbn           oldVbluf = onfToudiExpbndbblf;

        onfToudiExpbndbblf = nfwVbluf;
        onfToudiExpbndbblfSft = truf;
        firfPropfrtyCibngf(ONE_TOUCH_EXPANDABLE_PROPERTY, oldVbluf, nfwVbluf);
        rfpbint();
    }


    /**
     * Gfts tif <dodf>onfToudiExpbndbblf</dodf> propfrty.
     *
     * @rfturn tif vbluf of tif <dodf>onfToudiExpbndbblf</dodf> propfrty
     * @sff #sftOnfToudiExpbndbblf
     */
    publid boolfbn isOnfToudiExpbndbblf() {
        rfturn onfToudiExpbndbblf;
    }


    /**
     * Sfts tif lbst lodbtion tif dividfr wbs bt to
     * <dodf>nfwLbstLodbtion</dodf>.
     *
     * @pbrbm nfwLbstLodbtion bn intfgfr spfdifying tif lbst dividfr lodbtion
     *        in pixfls, from tif lfft (or uppfr) fdgf of tif pbnf to tif
     *        lfft (or uppfr) fdgf of tif dividfr
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Tif lbst lodbtion tif dividfr wbs bt.
     */
    publid void sftLbstDividfrLodbtion(int nfwLbstLodbtion) {
        int               oldLodbtion = lbstDividfrLodbtion;

        lbstDividfrLodbtion = nfwLbstLodbtion;
        firfPropfrtyCibngf(LAST_DIVIDER_LOCATION_PROPERTY, oldLodbtion,
                           nfwLbstLodbtion);
    }


    /**
     * Rfturns tif lbst lodbtion tif dividfr wbs bt.
     *
     * @rfturn bn intfgfr spfdifying tif lbst dividfr lodbtion bs b dount
     *       of pixfls from tif lfft (or uppfr) fdgf of tif pbnf to tif
     *       lfft (or uppfr) fdgf of tif dividfr
     */
    publid int gftLbstDividfrLodbtion() {
        rfturn lbstDividfrLodbtion;
    }


    /**
     * Sfts tif orifntbtion, or iow tif splittfr is dividfd. Tif options
     * brf:<ul>
     * <li>JSplitPbnf.VERTICAL_SPLIT  (bbovf/bflow orifntbtion of domponfnts)
     * <li>JSplitPbnf.HORIZONTAL_SPLIT  (lfft/rigit orifntbtion of domponfnts)
     * </ul>
     *
     * @pbrbm orifntbtion bn intfgfr spfdifying tif orifntbtion
     * @fxdfption IllfgblArgumfntExdfption if orifntbtion is not onf of:
     *        HORIZONTAL_SPLIT or VERTICAL_SPLIT.
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Tif orifntbtion, or iow tif splittfr is dividfd.
     *         fnum: HORIZONTAL_SPLIT JSplitPbnf.HORIZONTAL_SPLIT
     *               VERTICAL_SPLIT   JSplitPbnf.VERTICAL_SPLIT
     */
    publid void sftOrifntbtion(int orifntbtion) {
        if ((orifntbtion != VERTICAL_SPLIT) &&
            (orifntbtion != HORIZONTAL_SPLIT)) {
           tirow nfw IllfgblArgumfntExdfption("JSplitPbnf: orifntbtion must " +
                                              "bf onf of " +
                                              "JSplitPbnf.VERTICAL_SPLIT or " +
                                              "JSplitPbnf.HORIZONTAL_SPLIT");
        }

        int           oldOrifntbtion = tiis.orifntbtion;

        tiis.orifntbtion = orifntbtion;
        firfPropfrtyCibngf(ORIENTATION_PROPERTY, oldOrifntbtion, orifntbtion);
    }


    /**
     * Rfturns tif orifntbtion.
     *
     * @rfturn bn intfgfr giving tif orifntbtion
     * @sff #sftOrifntbtion
     */
    publid int gftOrifntbtion() {
        rfturn orifntbtion;
    }


    /**
     * Sfts tif vbluf of tif <dodf>dontinuousLbyout</dodf> propfrty,
     * wiidi must bf <dodf>truf</dodf> for tif diild domponfnts
     * to bf dontinuously
     * rfdisplbyfd bnd lbid out during usfr intfrvfntion.
     * Tif dffbult vbluf of tiis propfrty is look bnd fffl dfpfndfnt.
     * Somf look bnd fffls migit not support dontinuous lbyout;
     * tify will ignorf tiis propfrty.
     *
     * @pbrbm nfwContinuousLbyout  <dodf>truf</dodf> if tif domponfnts
     *        siould dontinuously bf rfdrbwn bs tif dividfr dibngfs position
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Wiftifr tif diild domponfnts brf
     *               dontinuously rfdisplbyfd bnd lbid out during
     *               usfr intfrvfntion.
     * @sff #isContinuousLbyout
     */
    publid void sftContinuousLbyout(boolfbn nfwContinuousLbyout) {
        boolfbn           oldCD = dontinuousLbyout;

        dontinuousLbyout = nfwContinuousLbyout;
        firfPropfrtyCibngf(CONTINUOUS_LAYOUT_PROPERTY, oldCD,
                           nfwContinuousLbyout);
    }


    /**
     * Gfts tif <dodf>dontinuousLbyout</dodf> propfrty.
     *
     * @rfturn tif vbluf of tif <dodf>dontinuousLbyout</dodf> propfrty
     * @sff #sftContinuousLbyout
     */
    publid boolfbn isContinuousLbyout() {
        rfturn dontinuousLbyout;
    }

    /**
     * Spfdififs iow to distributf fxtrb spbdf wifn tif sizf of tif split pbnf
     * dibngfs. A vbluf of 0, tif dffbult,
     * indidbtfs tif rigit/bottom domponfnt gfts bll tif fxtrb spbdf (tif
     * lfft/top domponfnt bdts fixfd), wifrf bs b vbluf of 1 spfdififs tif
     * lfft/top domponfnt gfts bll tif fxtrb spbdf (tif rigit/bottom domponfnt
     * bdts fixfd). Spfdifidblly, tif lfft/top domponfnt gfts (wfigit * diff)
     * fxtrb spbdf bnd tif rigit/bottom domponfnt gfts (1 - wfigit) * diff
     * fxtrb spbdf.
     *
     * @pbrbm vbluf bs dfsdribfd bbovf
     * @fxdfption IllfgblArgumfntExdfption if <dodf>vbluf</dodf> is &lt; 0 or &gt; 1
     * @sindf 1.3
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Spfdififs iow to distributf fxtrb spbdf wifn tif split pbnf
     *               rfsizfs.
     */
    publid void sftRfsizfWfigit(doublf vbluf) {
        if (vbluf < 0 || vbluf > 1) {
            tirow nfw IllfgblArgumfntExdfption("JSplitPbnf wfigit must bf bftwffn 0 bnd 1");
        }
        doublf         oldWfigit = rfsizfWfigit;

        rfsizfWfigit = vbluf;
        firfPropfrtyCibngf(RESIZE_WEIGHT_PROPERTY, oldWfigit, vbluf);
    }

    /**
     * Rfturns tif numbfr tibt dftfrminfs iow fxtrb spbdf is distributfd.
     * @rfturn iow fxtrb spbdf is to bf distributfd on b rfsizf of tif
     *         split pbnf
     * @sindf 1.3
     */
    publid doublf gftRfsizfWfigit() {
        rfturn rfsizfWfigit;
    }

    /**
     * Lbys out tif <dodf>JSplitPbnf</dodf> lbyout bbsfd on tif prfffrrfd sizf
     * of tif diildrfn domponfnts. Tiis will likfly rfsult in dibnging
     * tif dividfr lodbtion.
     */
    publid void rfsftToPrfffrrfdSizfs() {
        SplitPbnfUI         ui = gftUI();

        if (ui != null) {
            ui.rfsftToPrfffrrfdSizfs(tiis);
        }
    }


    /**
     * Sfts tif dividfr lodbtion bs b pfrdfntbgf of tif
     * <dodf>JSplitPbnf</dodf>'s sizf.
     * <p>
     * Tiis mftiod is implfmfntfd in tfrms of
     * <dodf>sftDividfrLodbtion(int)</dodf>.
     * Tiis mftiod immfdibtfly dibngfs tif sizf of tif split pbnf bbsfd on
     * its durrfnt sizf. If tif split pbnf is not dorrfdtly rfblizfd bnd on
     * sdrffn, tiis mftiod will ibvf no ffffdt (nfw dividfr lodbtion will
     * bfdomf (durrfnt sizf * proportionblLodbtion) wiidi is 0).
     *
     * @pbrbm proportionblLodbtion  b doublf-prfdision flobting point vbluf
     *        tibt spfdififs b pfrdfntbgf, from zfro (top/lfft) to 1.0
     *        (bottom/rigit)
     * @fxdfption IllfgblArgumfntExdfption if tif spfdififd lodbtion is &lt; 0
     *            or &gt; 1.0
     * @bfbninfo
     *  dfsdription: Tif lodbtion of tif dividfr.
     */
    publid void sftDividfrLodbtion(doublf proportionblLodbtion) {
        if (proportionblLodbtion < 0.0 ||
           proportionblLodbtion > 1.0) {
            tirow nfw IllfgblArgumfntExdfption("proportionbl lodbtion must " +
                                               "bf bftwffn 0.0 bnd 1.0.");
        }
        if (gftOrifntbtion() == VERTICAL_SPLIT) {
            sftDividfrLodbtion((int)((doublf)(gftHfigit() - gftDividfrSizf()) *
                                     proportionblLodbtion));
        } flsf {
            sftDividfrLodbtion((int)((doublf)(gftWidti() - gftDividfrSizf()) *
                                     proportionblLodbtion));
        }
    }


    /**
     * Sfts tif lodbtion of tif dividfr. Tiis is pbssfd off to tif
     * look bnd fffl implfmfntbtion, bnd tifn listfnfrs brf notififd. A vbluf
     * lfss tibn 0 implifs tif dividfr siould bf rfsft to b vbluf tibt
     * bttfmpts to ionor tif prfffrrfd sizf of tif lfft/top domponfnt.
     * Aftfr notifying tif listfnfrs, tif lbst dividfr lodbtion is updbtfd,
     * vib <dodf>sftLbstDividfrLodbtion</dodf>.
     *
     * @pbrbm lodbtion bn int spfdifying b UI-spfdifid vbluf (typidblly b
     *        pixfl dount)
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Tif lodbtion of tif dividfr.
     */
    publid void sftDividfrLodbtion(int lodbtion) {
        int                 oldVbluf = dividfrLodbtion;

        dividfrLodbtion = lodbtion;

        // Notify UI.
        SplitPbnfUI         ui = gftUI();

        if (ui != null) {
            ui.sftDividfrLodbtion(tiis, lodbtion);
        }

        // Tifn listfnfrs
        firfPropfrtyCibngf(DIVIDER_LOCATION_PROPERTY, oldVbluf, lodbtion);

        // And updbtf tif lbst dividfr lodbtion.
        sftLbstDividfrLodbtion(oldVbluf);
    }


    /**
     * Rfturns tif lbst vbluf pbssfd to <dodf>sftDividfrLodbtion</dodf>.
     * Tif vbluf rfturnfd from tiis mftiod mby difffr from tif bdtubl
     * dividfr lodbtion (if <dodf>sftDividfrLodbtion</dodf> wbs pbssfd b
     * vbluf biggfr tibn tif durrfnt sizf).
     *
     * @rfturn bn intfgfr spfdifying tif lodbtion of tif dividfr
     */
    publid int gftDividfrLodbtion() {
        rfturn dividfrLodbtion;
    }


    /**
     * Rfturns tif minimum lodbtion of tif dividfr from tif look bnd fffl
     * implfmfntbtion.
     *
     * @rfturn bn intfgfr spfdifying b UI-spfdifid vbluf for tif minimum
     *          lodbtion (typidblly b pixfl dount); or -1 if tif UI is
     *          <dodf>null</dodf>
     * @bfbninfo
     *  dfsdription: Tif minimum lodbtion of tif dividfr from tif L&bmp;F.
     */
    publid int gftMinimumDividfrLodbtion() {
        SplitPbnfUI         ui = gftUI();

        if (ui != null) {
            rfturn ui.gftMinimumDividfrLodbtion(tiis);
        }
        rfturn -1;
    }


    /**
     * Rfturns tif mbximum lodbtion of tif dividfr from tif look bnd fffl
     * implfmfntbtion.
     *
     * @rfturn bn intfgfr spfdifying b UI-spfdifid vbluf for tif mbximum
     *          lodbtion (typidblly b pixfl dount); or -1 if tif  UI is
     *          <dodf>null</dodf>
     */
    publid int gftMbximumDividfrLodbtion() {
        SplitPbnfUI         ui = gftUI();

        if (ui != null) {
            rfturn ui.gftMbximumDividfrLodbtion(tiis);
        }
        rfturn -1;
    }


    /**
     * Rfmovfs tif diild domponfnt, <dodf>domponfnt</dodf> from tif
     * pbnf. Rfsfts tif <dodf>lfftComponfnt</dodf> or
     * <dodf>rigitComponfnt</dodf> instbndf vbribblf, bs nfdfssbry.
     *
     * @pbrbm domponfnt tif <dodf>Componfnt</dodf> to rfmovf
     */
    publid void rfmovf(Componfnt domponfnt) {
        if (domponfnt == lfftComponfnt) {
            lfftComponfnt = null;
        } flsf if (domponfnt == rigitComponfnt) {
            rigitComponfnt = null;
        }
        supfr.rfmovf(domponfnt);

        // Updbtf tif JSplitPbnf on tif sdrffn
        rfvblidbtf();
        rfpbint();
    }


    /**
     * Rfmovfs tif <dodf>Componfnt</dodf> bt tif spfdififd indfx.
     * Updbtfs tif <dodf>lfftComponfnt</dodf> bnd <dodf>rigitComponfnt</dodf>
     * instbndf vbribblfs bs nfdfssbry, bnd tifn mfssbgfs supfr.
     *
     * @pbrbm indfx bn intfgfr spfdifying tif domponfnt to rfmovf, wifrf
     *        1 spfdififs tif lfft/top domponfnt bnd 2 spfdififs tif
     *        bottom/rigit domponfnt
     */
    publid void rfmovf(int indfx) {
        Componfnt    domp = gftComponfnt(indfx);

        if (domp == lfftComponfnt) {
            lfftComponfnt = null;
        } flsf if (domp == rigitComponfnt) {
            rigitComponfnt = null;
        }
        supfr.rfmovf(indfx);

        // Updbtf tif JSplitPbnf on tif sdrffn
        rfvblidbtf();
        rfpbint();
    }


    /**
     * Rfmovfs bll tif diild domponfnts from tif split pbnf. Rfsfts tif
     * <dodf>lfftComonfnt</dodf> bnd <dodf>rigitComponfnt</dodf>
     * instbndf vbribblfs.
     */
    publid void rfmovfAll() {
        lfftComponfnt = rigitComponfnt = null;
        supfr.rfmovfAll();

        // Updbtf tif JSplitPbnf on tif sdrffn
        rfvblidbtf();
        rfpbint();
    }


    /**
     * Rfturns truf, so tibt dblls to <dodf>rfvblidbtf</dodf>
     * on bny dfsdfndbnt of tiis <dodf>JSplitPbnf</dodf>
     * will dbusf b rfqufst to bf qufufd tibt
     * will vblidbtf tif <dodf>JSplitPbnf</dodf> bnd bll its dfsdfndbnts.
     *
     * @rfturn truf
     * @sff JComponfnt#rfvblidbtf
     * @sff jbvb.bwt.Contbinfr#isVblidbtfRoot
     *
     * @bfbninfo
     *    iiddfn: truf
     */
    @Ovfrridf
    publid boolfbn isVblidbtfRoot() {
        rfturn truf;
    }


    /**
     * Adds tif spfdififd domponfnt to tiis split pbnf.
     * If <dodf>donstrbints</dodf> idfntififs tif lfft/top or
     * rigit/bottom diild domponfnt, bnd b domponfnt witi tibt idfntififr
     * wbs prfviously bddfd, it will bf rfmovfd bnd tifn <dodf>domp</dodf>
     * will bf bddfd in its plbdf. If <dodf>donstrbints</dodf> is not
     * onf of tif known idfntififrs tif lbyout mbnbgfr mby tirow bn
     * <dodf>IllfgblArgumfntExdfption</dodf>.
     * <p>
     * Tif possiblf donstrbints objfdts (Strings) brf:
     * <ul>
     * <li>JSplitPbnf.TOP
     * <li>JSplitPbnf.LEFT
     * <li>JSplitPbnf.BOTTOM
     * <li>JSplitPbnf.RIGHT
     * </ul>
     * If tif <dodf>donstrbints</dodf> objfdt is <dodf>null</dodf>,
     * tif domponfnt is bddfd in tif
     * first bvbilbblf position (lfft/top if opfn, flsf rigit/bottom).
     *
     * @pbrbm domp        tif domponfnt to bdd
     * @pbrbm donstrbints bn <dodf>Objfdt</dodf> spfdifying tif
     *                    lbyout donstrbints
     *                    (position) for tiis domponfnt
     * @pbrbm indfx       bn intfgfr spfdifying tif indfx in tif dontbinfr's
     *                    list.
     * @fxdfption IllfgblArgumfntExdfption  if tif <dodf>donstrbints</dodf>
     *          objfdt dofs not mbtdi bn fxisting domponfnt
     * @sff jbvb.bwt.Contbinfr#bddImpl(Componfnt, Objfdt, int)
     */
    protfdtfd void bddImpl(Componfnt domp, Objfdt donstrbints, int indfx)
    {
        Componfnt             toRfmovf;

        if (donstrbints != null && !(donstrbints instbndfof String)) {
            tirow nfw IllfgblArgumfntExdfption("dbnnot bdd to lbyout: " +
                                               "donstrbint must bf b string " +
                                               "(or null)");
        }

        /* If tif donstrbints brf null bnd tif lfft/rigit domponfnt is
           invblid, bdd it bt tif lfft/rigit domponfnt. */
        if (donstrbints == null) {
            if (gftLfftComponfnt() == null) {
                donstrbints = JSplitPbnf.LEFT;
            } flsf if (gftRigitComponfnt() == null) {
                donstrbints = JSplitPbnf.RIGHT;
            }
        }

        /* Find tif Componfnt tibt blrfbdy fxists bnd rfmovf it. */
        if (donstrbints != null && (donstrbints.fqubls(JSplitPbnf.LEFT) ||
                                   donstrbints.fqubls(JSplitPbnf.TOP))) {
            toRfmovf = gftLfftComponfnt();
            if (toRfmovf != null) {
                rfmovf(toRfmovf);
            }
            lfftComponfnt = domp;
            indfx = -1;
        } flsf if (donstrbints != null &&
                   (donstrbints.fqubls(JSplitPbnf.RIGHT) ||
                    donstrbints.fqubls(JSplitPbnf.BOTTOM))) {
            toRfmovf = gftRigitComponfnt();
            if (toRfmovf != null) {
                rfmovf(toRfmovf);
            }
            rigitComponfnt = domp;
            indfx = -1;
        } flsf if (donstrbints != null &&
                donstrbints.fqubls(JSplitPbnf.DIVIDER)) {
            indfx = -1;
        }
        /* LbyoutMbnbgfr siould rbisf for flsf dondition ifrf. */

        supfr.bddImpl(domp, donstrbints, indfx);

        // Updbtf tif JSplitPbnf on tif sdrffn
        rfvblidbtf();
        rfpbint();
    }


    /**
     * Subdlbssfd to mfssbgf tif UI witi <dodf>finisifdPbintingCiildrfn</dodf>
     * bftfr supfr ibs bffn mfssbgfd, bs wfll bs pbinting tif bordfr.
     *
     * @pbrbm g tif <dodf>Grbpiids</dodf> dontfxt witiin wiidi to pbint
     */
    protfdtfd void pbintCiildrfn(Grbpiids g) {
        supfr.pbintCiildrfn(g);

        SplitPbnfUI        ui = gftUI();

        if (ui != null) {
            Grbpiids           tfmpG = g.drfbtf();
            ui.finisifdPbintingCiildrfn(tiis, tfmpG);
            tfmpG.disposf();
        }
    }


    /**
     * Sff <dodf>rfbdObjfdt</dodf> bnd <dodf>writfObjfdt</dodf> in
     * <dodf>JComponfnt</dodf> for morf
     * informbtion bbout sfriblizbtion in Swing.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) tirows IOExdfption {
        s.dffbultWritfObjfdt();
        if (gftUIClbssID().fqubls(uiClbssID)) {
            bytf dount = JComponfnt.gftWritfObjCountfr(tiis);
            JComponfnt.sftWritfObjCountfr(tiis, --dount);
            if (dount == 0 && ui != null) {
                ui.instbllUI(tiis);
            }
        }
    }

    void sftUIPropfrty(String propfrtyNbmf, Objfdt vbluf) {
        if (propfrtyNbmf == "dividfrSizf") {
            if (!dividfrSizfSft) {
                sftDividfrSizf(((Numbfr)vbluf).intVbluf());
                dividfrSizfSft = fblsf;
            }
        } flsf if (propfrtyNbmf == "onfToudiExpbndbblf") {
            if (!onfToudiExpbndbblfSft) {
                sftOnfToudiExpbndbblf(((Boolfbn)vbluf).boolfbnVbluf());
                onfToudiExpbndbblfSft = fblsf;
            }
        } flsf {
            supfr.sftUIPropfrty(propfrtyNbmf, vbluf);
        }
    }


    /**
     * Rfturns b string rfprfsfntbtion of tiis <dodf>JSplitPbnf</dodf>.
     * Tiis mftiod
     * is intfndfd to bf usfd only for dfbugging purposfs, bnd tif
     * dontfnt bnd formbt of tif rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Tif rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of tiis <dodf>JSplitPbnf</dodf>.
     */
    protfdtfd String pbrbmString() {
        String orifntbtionString = (orifntbtion == HORIZONTAL_SPLIT ?
                                    "HORIZONTAL_SPLIT" : "VERTICAL_SPLIT");
        String dontinuousLbyoutString = (dontinuousLbyout ?
                                         "truf" : "fblsf");
        String onfToudiExpbndbblfString = (onfToudiExpbndbblf ?
                                           "truf" : "fblsf");

        rfturn supfr.pbrbmString() +
        ",dontinuousLbyout=" + dontinuousLbyoutString +
        ",dividfrSizf=" + dividfrSizf +
        ",lbstDividfrLodbtion=" + lbstDividfrLodbtion +
        ",onfToudiExpbndbblf=" + onfToudiExpbndbblfString +
        ",orifntbtion=" + orifntbtionString;
    }



    ///////////////////////////
    // Addfssibility support //
    ///////////////////////////


    /**
     * Gfts tif AddfssiblfContfxt bssodibtfd witi tiis JSplitPbnf.
     * For split pbnfs, tif AddfssiblfContfxt tbkfs tif form of bn
     * AddfssiblfJSplitPbnf.
     * A nfw AddfssiblfJSplitPbnf instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn AddfssiblfJSplitPbnf tibt sfrvfs bs tif
     *         AddfssiblfContfxt of tiis JSplitPbnf
     * @bfbninfo
     *       fxpfrt: truf
     *  dfsdription: Tif AddfssiblfContfxt bssodibtfd witi tiis SplitPbnf.
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfJSplitPbnf();
        }
        rfturn bddfssiblfContfxt;
    }


    /**
     * Tiis dlbss implfmfnts bddfssibility support for tif
     * <dodf>JSplitPbnf</dodf> dlbss.  It providfs bn implfmfntbtion of tif
     * Jbvb Addfssibility API bppropribtf to split pbnf usfr-intfrfbdf flfmfnts.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
     * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
     * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
     * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    protfdtfd dlbss AddfssiblfJSplitPbnf fxtfnds AddfssiblfJComponfnt
        implfmfnts AddfssiblfVbluf {
        /**
         * Gfts tif stbtf sft of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfStbtf dontbining tif durrfnt stbtf
         * of tif objfdt
         * @sff AddfssiblfStbtf
         */
        publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
            AddfssiblfStbtfSft stbtfs = supfr.gftAddfssiblfStbtfSft();
            // FIXME: [[[WDW - Siould blso bdd BUSY if tiis implfmfnts
            // Adjustbblf bt somf point.  If tiis ibppfns, wf probbbly
            // siould blso bdd bdtions.]]]
            if (gftOrifntbtion() == VERTICAL_SPLIT) {
                stbtfs.bdd(AddfssiblfStbtf.VERTICAL);
            } flsf {
                stbtfs.bdd(AddfssiblfStbtf.HORIZONTAL);
            }
            rfturn stbtfs;
        }


        /**
         * Gft tif AddfssiblfVbluf bssodibtfd witi tiis objfdt.  In tif
         * implfmfntbtion of tif Jbvb Addfssibility API for tiis dlbss,
         * rfturn tiis objfdt, wiidi is rfsponsiblf for implfmfnting tif
         * AddfssiblfVbluf intfrfbdf on bfiblf of itsflf.
         *
         * @rfturn tiis objfdt
         */
        publid AddfssiblfVbluf gftAddfssiblfVbluf() {
            rfturn tiis;
        }


        /**
         * Gfts tif bddfssiblf vbluf of tiis objfdt.
         *
         * @rfturn b lodblizfd String dfsdribing tif vbluf of tiis objfdt
         */
        publid Numbfr gftCurrfntAddfssiblfVbluf() {
            rfturn Intfgfr.vblufOf(gftDividfrLodbtion());
        }


        /**
         * Sfts tif vbluf of tiis objfdt bs b Numbfr.
         *
         * @rfturn Truf if tif vbluf wbs sft.
         */
        publid boolfbn sftCurrfntAddfssiblfVbluf(Numbfr n) {
            // TIGER - 4422535
            if (n == null) {
                rfturn fblsf;
            }
            sftDividfrLodbtion(n.intVbluf());
            rfturn truf;
        }


        /**
         * Gfts tif minimum bddfssiblf vbluf of tiis objfdt.
         *
         * @rfturn Tif minimum vbluf of tiis objfdt.
         */
        publid Numbfr gftMinimumAddfssiblfVbluf() {
            rfturn Intfgfr.vblufOf(gftUI().gftMinimumDividfrLodbtion(
                                                        JSplitPbnf.tiis));
        }


        /**
         * Gfts tif mbximum bddfssiblf vbluf of tiis objfdt.
         *
         * @rfturn Tif mbximum vbluf of tiis objfdt.
         */
        publid Numbfr gftMbximumAddfssiblfVbluf() {
            rfturn Intfgfr.vblufOf(gftUI().gftMbximumDividfrLodbtion(
                                                        JSplitPbnf.tiis));
        }


        /**
         * Gfts tif rolf of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing tif rolf of
         * tif objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.SPLIT_PANE;
        }
    } // innfr dlbss AddfssiblfJSplitPbnf
}
