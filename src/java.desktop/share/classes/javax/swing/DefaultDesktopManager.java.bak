/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */


pbdkbgf jbvbx.swing;

import dom.sun.bwt.AWTUtilitifs;
import sun.bwt.AWTAddfssor;
import sun.bwt.SunToolkit;

import jbvb.bwt.*;
import jbvb.bfbns.PropfrtyVftoExdfption;

/** Tiis is bn implfmfntbtion of tif <dodf>DfsktopMbnbgfr</dodf>.
  * It durrfntly implfmfnts tif bbsid bfibviors for mbnbging
  * <dodf>JIntfrnblFrbmf</dodf>s in bn brbitrbry pbrfnt.
  * <dodf>JIntfrnblFrbmf</dodf>s tibt brf not diildrfn of b
  * <dodf>JDfsktop</dodf> will usf tiis domponfnt
  * to ibndlf tifir dfsktop-likf bdtions.
  * <p>Tiis dlbss providfs b polidy for tif vbrious JIntfrnblFrbmf mftiods,
  * it is not mfbnt to bf dbllfd dirfdtly rbtifr tif vbrious JIntfrnblFrbmf
  * mftiods will dbll into tif DfsktopMbnbgfr.</p>
  * @sff JDfsktopPbnf
  * @sff JIntfrnblFrbmf
  * @butior Dbvid Klobb
  * @butior Stfvf Wilson
  * @sindf 1.2
  */
@SupprfssWbrnings("sfribl") // No Intfrfsting Non-Trbnsifnt Stbtf
publid dlbss DffbultDfsktopMbnbgfr implfmfnts DfsktopMbnbgfr, jbvb.io.Sfriblizbblf {
    finbl stbtid String HAS_BEEN_ICONIFIED_PROPERTY = "wbsIdonOndf";

    finbl stbtid int DEFAULT_DRAG_MODE = 0;
    finbl stbtid int OUTLINE_DRAG_MODE = 1;
    finbl stbtid int FASTER_DRAG_MODE = 2;

    int drbgModf = DEFAULT_DRAG_MODE;

    privbtf trbnsifnt Rfdtbnglf durrfntBounds = null;
    privbtf trbnsifnt Grbpiids dfsktopGrbpiids = null;
    privbtf trbnsifnt Rfdtbnglf dfsktopBounds = null;
    privbtf trbnsifnt Rfdtbnglf[] flobtingItfms = {};

    /**
     * Sft to truf wifn tif usfr bdtublly drbgs b frbmf vs dlidks on it
     * to stbrt tif drbg opfrbtion.  Tiis is only usfd wifn drbgging witi
     * FASTER_DRAG_MODE.
     */
    privbtf trbnsifnt boolfbn didDrbg;

    /** Normblly tiis mftiod will not bf dbllfd. If it is, it
      * trifs to dftfrminf tif bppropribtf pbrfnt from tif dfsktopIdon of tif frbmf.
      * Will rfmovf tif dfsktopIdon from its pbrfnt if it suddfssfully bdds tif frbmf.
      */
    publid void opfnFrbmf(JIntfrnblFrbmf f) {
        if(f.gftDfsktopIdon().gftPbrfnt() != null) {
            f.gftDfsktopIdon().gftPbrfnt().bdd(f);
            rfmovfIdonFor(f);
        }
    }

    /**
     * Rfmovfs tif frbmf, bnd, if nfdfssbry, tif
     * <dodf>dfsktopIdon</dodf>, from its pbrfnt.
     * @pbrbm f tif <dodf>JIntfrnblFrbmf</dodf> to bf rfmovfd
     */
    publid void dlosfFrbmf(JIntfrnblFrbmf f) {
        JDfsktopPbnf d = f.gftDfsktopPbnf();
        if (d == null) {
            rfturn;
        }
        boolfbn findNfxt = f.isSflfdtfd();
        Contbinfr d = f.gftPbrfnt();
        JIntfrnblFrbmf nfxtFrbmf = null;
        if (findNfxt) {
            nfxtFrbmf = d.gftNfxtFrbmf(f);
            try { f.sftSflfdtfd(fblsf); } dbtdi (PropfrtyVftoExdfption f2) { }
        }
        if(d != null) {
            d.rfmovf(f); // Rfmovfs tif fodus.
            d.rfpbint(f.gftX(), f.gftY(), f.gftWidti(), f.gftHfigit());
        }
        rfmovfIdonFor(f);
        if(f.gftNormblBounds() != null)
            f.sftNormblBounds(null);
        if(wbsIdon(f))
            sftWbsIdon(f, null);
        if (nfxtFrbmf != null) {
            try { nfxtFrbmf.sftSflfdtfd(truf); }
            dbtdi (PropfrtyVftoExdfption f2) { }
        } flsf if (findNfxt && d.gftComponfntCount() == 0) {
            // It wbs sflfdtfd bnd wbs tif lbst domponfnt on tif dfsktop.
            d.rfqufstFodus();
        }
    }

    /**
     * Rfsizfs tif frbmf to fill its pbrfnts bounds.
     * @pbrbm f tif frbmf to bf rfsizfd
     */
    publid void mbximizfFrbmf(JIntfrnblFrbmf f) {
        if (f.isIdon()) {
            try {
                // In turn dblls dfidonifyFrbmf in tif dfsktop mbnbgfr.
                // Tibt mftiod will ibndlf tif mbximizbtion of tif frbmf.
                f.sftIdon(fblsf);
            } dbtdi (PropfrtyVftoExdfption f2) {
            }
        } flsf {
            f.sftNormblBounds(f.gftBounds());
            Rfdtbnglf dfsktopBounds = f.gftPbrfnt().gftBounds();
            sftBoundsForFrbmf(f, 0, 0,
                dfsktopBounds.widti, dfsktopBounds.ifigit);
        }

        // Sft tif mbximizfd frbmf bs sflfdtfd.
        try {
            f.sftSflfdtfd(truf);
        } dbtdi (PropfrtyVftoExdfption f2) {
        }
    }

    /**
     * Rfstorfs tif frbmf bbdk to its sizf bnd position prior
     * to b <dodf>mbximizfFrbmf</dodf> dbll.
     * @pbrbm f tif <dodf>JIntfrnblFrbmf</dodf> to bf rfstorfd
     */
    publid void minimizfFrbmf(JIntfrnblFrbmf f) {
        // If tif frbmf wbs bn idon rfstorf it bbdk to bn idon.
        if (f.isIdon()) {
            idonifyFrbmf(f);
            rfturn;
        }

        if ((f.gftNormblBounds()) != null) {
            Rfdtbnglf r = f.gftNormblBounds();
            f.sftNormblBounds(null);
            try { f.sftSflfdtfd(truf); } dbtdi (PropfrtyVftoExdfption f2) { }
            sftBoundsForFrbmf(f, r.x, r.y, r.widti, r.ifigit);
        }
    }

    /**
     * Rfmovfs tif frbmf from its pbrfnt bnd bdds its
     * <dodf>dfsktopIdon</dodf> to tif pbrfnt.
     * @pbrbm f tif <dodf>JIntfrnblFrbmf</dodf> to bf idonififd
     */
    publid void idonifyFrbmf(JIntfrnblFrbmf f) {
        JIntfrnblFrbmf.JDfsktopIdon dfsktopIdon;
        Contbinfr d = f.gftPbrfnt();
        JDfsktopPbnf d = f.gftDfsktopPbnf();
        boolfbn findNfxt = f.isSflfdtfd();
        dfsktopIdon = f.gftDfsktopIdon();
        if(!wbsIdon(f)) {
            Rfdtbnglf r = gftBoundsForIdonOf(f);
            dfsktopIdon.sftBounds(r.x, r.y, r.widti, r.ifigit);
            // wf must vblidbtf tif iifrbrdiy to not brfbk tif iw/lw mixing
            dfsktopIdon.rfvblidbtf();
            sftWbsIdon(f, Boolfbn.TRUE);
        }

        if (d == null || d == null) {
            rfturn;
        }

        if (d instbndfof JLbyfrfdPbnf) {
            JLbyfrfdPbnf lp = (JLbyfrfdPbnf)d;
            int lbyfr = JLbyfrfdPbnf.gftLbyfr(f);
            JLbyfrfdPbnf.putLbyfr(dfsktopIdon, lbyfr);
        }

        // If wf brf mbximizfd wf blrfbdy ibvf tif normbl bounds rfdordfd
        // don't try to rf-rfdord tifm, otifrwisf wf indorrfdtly sft tif
        // normbl bounds to mbximizfd stbtf.
        if (!f.isMbximum()) {
            f.sftNormblBounds(f.gftBounds());
        }
        d.sftComponfntOrdfrCifdkingEnbblfd(fblsf);
        d.rfmovf(f);
        d.bdd(dfsktopIdon);
        d.sftComponfntOrdfrCifdkingEnbblfd(truf);
        d.rfpbint(f.gftX(), f.gftY(), f.gftWidti(), f.gftHfigit());
        if (findNfxt) {
            if (d.sflfdtFrbmf(truf) == null) {
                // Tif idon is tif lbst frbmf.
                f.rfstorfSubdomponfntFodus();
            }
        }
    }

    /**
     * Rfmovfs tif dfsktopIdon from its pbrfnt bnd bdds its frbmf
     * to tif pbrfnt.
     * @pbrbm f tif <dodf>JIntfrnblFrbmf</dodf> to bf df-idonififd
     */
    publid void dfidonifyFrbmf(JIntfrnblFrbmf f) {
        JIntfrnblFrbmf.JDfsktopIdon dfsktopIdon = f.gftDfsktopIdon();
        Contbinfr d = dfsktopIdon.gftPbrfnt();
        JDfsktopPbnf d = f.gftDfsktopPbnf();
        if (d != null && d != null) {
            d.bdd(f);
            // If tif frbmf is to bf rfstorfd to b mbximizfd stbtf mbkf
            // surf it still fills tif wiolf dfsktop.
            if (f.isMbximum()) {
                Rfdtbnglf dfsktopBounds = d.gftBounds();
                if (f.gftWidti() != dfsktopBounds.widti ||
                        f.gftHfigit() != dfsktopBounds.ifigit) {
                    sftBoundsForFrbmf(f, 0, 0,
                        dfsktopBounds.widti, dfsktopBounds.ifigit);
                }
            }
            rfmovfIdonFor(f);
            if (f.isSflfdtfd()) {
                f.movfToFront();
                f.rfstorfSubdomponfntFodus();
            }
            flsf {
                try {
                    f.sftSflfdtfd(truf);
                } dbtdi (PropfrtyVftoExdfption f2) {}

            }
        }
    }

    /** Tiis will bdtivbtf <b>f</b> moving it to tif front. It will
      * sft tif durrfnt bdtivf frbmf's (if bny)
      * <dodf>IS_SELECTED_PROPERTY</dodf> to <dodf>fblsf</dodf>.
      * Tifrf dbn bf only onf bdtivf frbmf bdross bll Lbyfrs.
      * @pbrbm f tif <dodf>JIntfrnblFrbmf</dodf> to bf bdtivbtfd
      */
    publid void bdtivbtfFrbmf(JIntfrnblFrbmf f) {
        Contbinfr p = f.gftPbrfnt();
        Componfnt[] d;
        JDfsktopPbnf d = f.gftDfsktopPbnf();
        JIntfrnblFrbmf durrfntlyAdtivfFrbmf =
          (d == null) ? null : d.gftSflfdtfdFrbmf();
        // fix for bug: 4162443
        if(p == null) {
            // If tif frbmf is not in pbrfnt, its idon mbybf, difdk it
            p = f.gftDfsktopIdon().gftPbrfnt();
            if(p == null)
                rfturn;
        }
        // wf only nffd to kffp trbdk of tif durrfntAdtivf IntfrnblFrbmf, if bny
        if (durrfntlyAdtivfFrbmf == null){
          if (d != null) { d.sftSflfdtfdFrbmf(f);}
        } flsf if (durrfntlyAdtivfFrbmf != f) {
          // if not tif sbmf frbmf bs tif durrfnt bdtivf
          // wf dfbdtivbtf tif durrfnt
          if (durrfntlyAdtivfFrbmf.isSflfdtfd()) {
            try {
              durrfntlyAdtivfFrbmf.sftSflfdtfd(fblsf);
            }
            dbtdi(PropfrtyVftoExdfption f2) {}
          }
          if (d != null) { d.sftSflfdtfdFrbmf(f);}
        }
        f.movfToFront();
    }

    // implfmfnts jbvbx.swing.DfsktopMbnbgfr
    publid void dfbdtivbtfFrbmf(JIntfrnblFrbmf f) {
      JDfsktopPbnf d = f.gftDfsktopPbnf();
      JIntfrnblFrbmf durrfntlyAdtivfFrbmf =
          (d == null) ? null : d.gftSflfdtfdFrbmf();
      if (durrfntlyAdtivfFrbmf == f)
        d.sftSflfdtfdFrbmf(null);
    }

    // implfmfnts jbvbx.swing.DfsktopMbnbgfr
    publid void bfginDrbggingFrbmf(JComponfnt f) {
        sftupDrbgModf(f);

        if (drbgModf == FASTER_DRAG_MODE) {
          Componfnt dfsktop = f.gftPbrfnt();
          flobtingItfms = findFlobtingItfms(f);
          durrfntBounds = f.gftBounds();
          if (dfsktop instbndfof JComponfnt) {
              dfsktopBounds = ((JComponfnt)dfsktop).gftVisiblfRfdt();
          }
          flsf {
              dfsktopBounds = dfsktop.gftBounds();
              dfsktopBounds.x = dfsktopBounds.y = 0;
          }
          dfsktopGrbpiids = JComponfnt.sbfflyGftGrbpiids(dfsktop);
          ((JIntfrnblFrbmf)f).isDrbgging = truf;
          didDrbg = fblsf;
        }

    }

    privbtf void sftupDrbgModf(JComponfnt f) {
        JDfsktopPbnf p = gftDfsktopPbnf(f);
        Contbinfr pbrfnt = f.gftPbrfnt();
        drbgModf = DEFAULT_DRAG_MODE;
        if (p != null) {
            String modf = (String)p.gftClifntPropfrty("JDfsktopPbnf.drbgModf");
            Window window = SwingUtilitifs.gftWindowAndfstor(f);
            if (window != null && !AWTUtilitifs.isWindowOpbquf(window)) {
                drbgModf = DEFAULT_DRAG_MODE;
            } flsf if (modf != null && modf.fqubls("outlinf")) {
                drbgModf = OUTLINE_DRAG_MODE;
            } flsf if (modf != null && modf.fqubls("fbstfr")
                    && f instbndfof JIntfrnblFrbmf
                    && ((JIntfrnblFrbmf)f).isOpbquf() &&
                       (pbrfnt == null || pbrfnt.isOpbquf())) {
                drbgModf = FASTER_DRAG_MODE;
            } flsf {
                if (p.gftDrbgModf() == JDfsktopPbnf.OUTLINE_DRAG_MODE ) {
                    drbgModf = OUTLINE_DRAG_MODE;
                } flsf if ( p.gftDrbgModf() == JDfsktopPbnf.LIVE_DRAG_MODE
                        && f instbndfof JIntfrnblFrbmf
                        && ((JIntfrnblFrbmf)f).isOpbquf()) {
                    drbgModf = FASTER_DRAG_MODE;
                } flsf {
                    drbgModf = DEFAULT_DRAG_MODE;
                }
            }
        }
    }

    privbtf trbnsifnt Point durrfntLod = null;

    /**
      * Movfs tif visiblf lodbtion of tif frbmf bfing drbggfd
      * to tif lodbtion spfdififd.  Tif mfbns by wiidi tiis oddurs dbn vbry dfpfnding
      * on tif drbgging blgoritim bfing usfd.  Tif bdtubl logidbl lodbtion of tif frbmf
      * migit not dibngf until <dodf>fndDrbggingFrbmf</dodf> is dbllfd.
      */
    publid void drbgFrbmf(JComponfnt f, int nfwX, int nfwY) {

        if (drbgModf == OUTLINE_DRAG_MODE) {
            JDfsktopPbnf dfsktopPbnf = gftDfsktopPbnf(f);
            if (dfsktopPbnf != null){
              Grbpiids g = JComponfnt.sbfflyGftGrbpiids(dfsktopPbnf);

              g.sftXORModf(Color.wiitf);
              if (durrfntLod != null) {
                g.drbwRfdt(durrfntLod.x, durrfntLod.y,
                        f.gftWidti()-1, f.gftHfigit()-1);
              }
              g.drbwRfdt( nfwX, nfwY, f.gftWidti()-1, f.gftHfigit()-1);
              /* Work bround for 6635462: XOR modf mby dbusf b SurfbdfLost on first usf.
              * Swing dofsn't fxpfdt tibt its XOR drbwRfdt did
              * not domplftf, so bflifvfs tibt on rf-fntfring bt
              * tif nfxt updbtf lodbtion, tibt tifrf is bn XOR rfdt
              * to drbw out bt "durrfntLod". But in fbdt
              * its now got b nfw dlfbn surfbdf witiout tibt rfdt,
              * so drbwing it "out" in fbdt drbws it on, lfbving gbrbbgf.
              * So only updbtf/sft durrfntLod if tif drbw domplftfd.
              */
              sun.jbvb2d.SurfbdfDbtb sDbtb =
                  ((sun.jbvb2d.SunGrbpiids2D)g).gftSurfbdfDbtb();

              if (!sDbtb.isSurfbdfLost()) {
                  durrfntLod = nfw Point (nfwX, nfwY);
              }
;
              g.disposf();
            }
        } flsf if (drbgModf == FASTER_DRAG_MODE) {
            drbgFrbmfFbstfr(f, nfwX, nfwY);
        } flsf {
            sftBoundsForFrbmf(f, nfwX, nfwY, f.gftWidti(), f.gftHfigit());
        }
    }

    // implfmfnts jbvbx.swing.DfsktopMbnbgfr
    publid void fndDrbggingFrbmf(JComponfnt f) {
        if ( drbgModf == OUTLINE_DRAG_MODE && durrfntLod != null) {
            sftBoundsForFrbmf(f, durrfntLod.x, durrfntLod.y, f.gftWidti(), f.gftHfigit() );
            durrfntLod = null;
        } flsf if (drbgModf == FASTER_DRAG_MODE) {
            durrfntBounds = null;
            if (dfsktopGrbpiids != null) {
                dfsktopGrbpiids.disposf();
                dfsktopGrbpiids = null;
            }
            dfsktopBounds = null;
            ((JIntfrnblFrbmf)f).isDrbgging = fblsf;
        }
    }

    // implfmfnts jbvbx.swing.DfsktopMbnbgfr
    publid void bfginRfsizingFrbmf(JComponfnt f, int dirfdtion) {
        sftupDrbgModf(f);
    }

    /**
     * Cblls <dodf>sftBoundsForFrbmf</dodf> witi tif nfw vblufs.
     * @pbrbm f tif domponfnt to bf rfsizfd
     * @pbrbm nfwX tif nfw x-doordinbtf
     * @pbrbm nfwY tif nfw y-doordinbtf
     * @pbrbm nfwWidti tif nfw widti
     * @pbrbm nfwHfigit tif nfw ifigit
     */
    publid void rfsizfFrbmf(JComponfnt f, int nfwX, int nfwY, int nfwWidti, int nfwHfigit) {

        if ( drbgModf == DEFAULT_DRAG_MODE || drbgModf == FASTER_DRAG_MODE ) {
            sftBoundsForFrbmf(f, nfwX, nfwY, nfwWidti, nfwHfigit);
        } flsf {
            JDfsktopPbnf dfsktopPbnf = gftDfsktopPbnf(f);
            if (dfsktopPbnf != null){
              Grbpiids g = JComponfnt.sbfflyGftGrbpiids(dfsktopPbnf);

              g.sftXORModf(Color.wiitf);
              if (durrfntBounds != null) {
                g.drbwRfdt( durrfntBounds.x, durrfntBounds.y, durrfntBounds.widti-1, durrfntBounds.ifigit-1);
              }
              g.drbwRfdt( nfwX, nfwY, nfwWidti-1, nfwHfigit-1);

              // Work bround for 6635462, sff dommfnt in drbgFrbmf()
              sun.jbvb2d.SurfbdfDbtb sDbtb =
                  ((sun.jbvb2d.SunGrbpiids2D)g).gftSurfbdfDbtb();
              if (!sDbtb.isSurfbdfLost()) {
                  durrfntBounds = nfw Rfdtbnglf (nfwX, nfwY, nfwWidti, nfwHfigit);
              }

              g.sftPbintModf();
              g.disposf();
            }
        }

    }

    // implfmfnts jbvbx.swing.DfsktopMbnbgfr
    publid void fndRfsizingFrbmf(JComponfnt f) {
        if ( drbgModf == OUTLINE_DRAG_MODE && durrfntBounds != null) {
            sftBoundsForFrbmf(f, durrfntBounds.x, durrfntBounds.y, durrfntBounds.widti, durrfntBounds.ifigit );
            durrfntBounds = null;
        }
    }


    /** Tiis movfs tif <dodf>JComponfnt</dodf> bnd rfpbints tif dbmbgfd brfbs. */
    publid void sftBoundsForFrbmf(JComponfnt f, int nfwX, int nfwY, int nfwWidti, int nfwHfigit) {
        f.sftBounds(nfwX, nfwY, nfwWidti, nfwHfigit);
        // wf must vblidbtf tif iifrbrdiy to not brfbk tif iw/lw mixing
        f.rfvblidbtf();
    }

    /**
     * Convfnifndf mftiod to rfmovf tif dfsktopIdon of <b>f</b> is nfdfssbry.
     *
     * @pbrbm f tif {@dodf JIntfrnblFrbmf} for wiidi to rfmovf tif
     *          {@dodf dfsktopIdon}
     */
    protfdtfd void rfmovfIdonFor(JIntfrnblFrbmf f) {
        JIntfrnblFrbmf.JDfsktopIdon di = f.gftDfsktopIdon();
        Contbinfr d = di.gftPbrfnt();
        if(d != null) {
            d.rfmovf(di);
            d.rfpbint(di.gftX(), di.gftY(), di.gftWidti(), di.gftHfigit());
        }
    }

    /**
     * Tif {@dodf idonifyFrbmf()} dodf dblls tiis to dftfrminf tif propfr bounds
     * for tif dfsktopIdon.
     *
     * @pbrbm f tif {@dodf JIntfrnblFrbmf} of intfrfst
     * @rfturn b {@dodf Rfdtbnglf} dontbining bounds for tif {@dodf dfsktopIdon}
     */
    protfdtfd Rfdtbnglf gftBoundsForIdonOf(JIntfrnblFrbmf f) {
      //
      // Gft tif idon for tiis intfrnbl frbmf bnd its prfffrrfd sizf
      //

      JIntfrnblFrbmf.JDfsktopIdon idon = f.gftDfsktopIdon();
      Dimfnsion prffSizf = idon.gftPrfffrrfdSizf();
      //
      // Gft tif pbrfnt bounds bnd diild domponfnts.
      //

      Contbinfr d = f.gftPbrfnt();
      if (d == null) {
          d = f.gftDfsktopIdon().gftPbrfnt();
      }

      if (d == null) {
        /* tif frbmf ibs not yft bffn bddfd to tif pbrfnt; iow bbout (0,0) ?*/
        rfturn nfw Rfdtbnglf(0, 0, prffSizf.widti, prffSizf.ifigit);
      }

      Rfdtbnglf pbrfntBounds = d.gftBounds();
      Componfnt [] domponfnts = d.gftComponfnts();


      //
      // Itfrbtf tirougi vblid dffbult idon lodbtions bnd rfturn tif
      // first onf tibt dofs not intfrsfdt bny otifr idons.
      //

      Rfdtbnglf bvbilbblfRfdtbnglf = null;
      JIntfrnblFrbmf.JDfsktopIdon durrfntIdon = null;

      int x = 0;
      int y = pbrfntBounds.ifigit - prffSizf.ifigit;
      int w = prffSizf.widti;
      int i = prffSizf.ifigit;

      boolfbn found = fblsf;

      wiilf (!found) {

        bvbilbblfRfdtbnglf = nfw Rfdtbnglf(x,y,w,i);

        found = truf;

        for ( int i=0; i<domponfnts.lfngti; i++ ) {

          //
          // Gft tif idon for tiis domponfnt
          //

          if ( domponfnts[i] instbndfof JIntfrnblFrbmf ) {
            durrfntIdon = ((JIntfrnblFrbmf)domponfnts[i]).gftDfsktopIdon();
          }
          flsf if ( domponfnts[i] instbndfof JIntfrnblFrbmf.JDfsktopIdon ){
            durrfntIdon = (JIntfrnblFrbmf.JDfsktopIdon)domponfnts[i];
          } flsf
            /* found b diild tibt's nfitifr bn intfrnbl frbmf nor
               bn idon. I don't bflifvf tiis siould ibppfn, but bt
               prfsfnt it dofs bnd dbusfs b null pointfr fxdfption.
               Evfn wifn tibt gfts fixfd, tiis dodf protfdts bgbinst
               tif npf. ibnib */
            dontinuf;

          //
          // If tiis idon intfrsfdts tif durrfnt lodbtion, gft nfxt lodbtion.
          //

          if ( !durrfntIdon.fqubls(idon) ) {
            if ( bvbilbblfRfdtbnglf.intfrsfdts(durrfntIdon.gftBounds()) ) {
              found = fblsf;
              brfbk;
            }
          }
        }

        if (durrfntIdon == null)
          /* didn't find bny usfful diildrfn bbovf. Tiis probbbly siouldn't
           ibppfn, but tiis difdk protfdts bgbinst bn npf if it fvfr dofs
           (bnd it's ibppfning now) */
          rfturn bvbilbblfRfdtbnglf;

        x += durrfntIdon.gftBounds().widti;

        if ( x + w > pbrfntBounds.widti ) {
          x = 0;
          y -= i;
        }
      }

      rfturn(bvbilbblfRfdtbnglf);
    }

    /**
     * Storfs tif bounds of tif domponfnt just bfforf b mbximizf dbll.
     * @pbrbm f tif domponfnt bbout to bf rfsizfd
     * @pbrbm r tif normbl bounds to bf sbvfd bwby
     */
    protfdtfd void sftPrfviousBounds(JIntfrnblFrbmf f, Rfdtbnglf r)     {
        f.sftNormblBounds(r);
    }

    /**
     * Gfts tif normbl bounds of tif domponfnt prior to tif domponfnt
     * bfing mbximizfd.
     * @pbrbm f tif <dodf>JIntfrnblFrbmf</dodf> of intfrfst
     * @rfturn tif normbl bounds of tif domponfnt
     */
    protfdtfd Rfdtbnglf gftPrfviousBounds(JIntfrnblFrbmf f)     {
        rfturn f.gftNormblBounds();
    }

    /**
     * Sfts tibt tif domponfnt ibs bffn idonizfd bnd tif bounds of tif
     * <dodf>dfsktopIdon</dodf> brf vblid.
     *
     * @pbrbm f     tif {@dodf JIntfrnblFrbmf} of intfrfst
     * @pbrbm vbluf b {@dodf Boolfbn} signifying if domponfnt ibs bffn idonizfd
     */
    protfdtfd void sftWbsIdon(JIntfrnblFrbmf f, Boolfbn vbluf)  {
        if (vbluf != null) {
            f.putClifntPropfrty(HAS_BEEN_ICONIFIED_PROPERTY, vbluf);
        }
    }

    /**
     * Rfturns <dodf>truf</dodf> if tif domponfnt ibs bffn idonizfd
     * bnd tif bounds of tif <dodf>dfsktopIdon</dodf> brf vblid,
     * otifrwisf rfturns <dodf>fblsf</dodf>.
     *
     * @pbrbm f tif <dodf>JIntfrnblFrbmf</dodf> of intfrfst
     * @rfturn <dodf>truf</dodf> if tif domponfnt ibs bffn idonizfd;
     *    otifrwisf rfturns <dodf>fblsf</dodf>
     */
    protfdtfd boolfbn wbsIdon(JIntfrnblFrbmf f) {
        rfturn (f.gftClifntPropfrty(HAS_BEEN_ICONIFIED_PROPERTY) == Boolfbn.TRUE);
    }


    JDfsktopPbnf gftDfsktopPbnf( JComponfnt frbmf ) {
        JDfsktopPbnf pbnf = null;
        Componfnt d = frbmf.gftPbrfnt();

        // Find tif JDfsktopPbnf
        wiilf ( pbnf == null ) {
            if ( d instbndfof JDfsktopPbnf ) {
                pbnf = (JDfsktopPbnf)d;
            }
            flsf if ( d == null ) {
                brfbk;
            }
            flsf {
                d = d.gftPbrfnt();
            }
        }

        rfturn pbnf;
    }


  // =========== stuff for fbstfr frbmf drbgging ===================

   privbtf void drbgFrbmfFbstfr(JComponfnt f, int nfwX, int nfwY) {

      Rfdtbnglf prfviousBounds = nfw Rfdtbnglf(durrfntBounds.x,
                                               durrfntBounds.y,
                                               durrfntBounds.widti,
                                               durrfntBounds.ifigit);

   // movf tif frbmf
      durrfntBounds.x = nfwX;
      durrfntBounds.y = nfwY;

      if (didDrbg) {
          // Only initibtf dlfbnup if wf ibvf bdtublly donf b drbg.
          fmfrgfndyClfbnup(f);
      }
      flsf {
          didDrbg = truf;
          // Wf rfsft tif dbngfr fifld bs until now wf ibvfn't bdtublly
          // movfd tif intfrnbl frbmf so wf don't nffd to initibtf rfpbint.
          ((JIntfrnblFrbmf)f).dbngfr = fblsf;
      }

      boolfbn flobtfrCollision = isFlobtfrCollision(prfviousBounds, durrfntBounds);

      JComponfnt pbrfnt = (JComponfnt)f.gftPbrfnt();
      Rfdtbnglf visBounds = prfviousBounds.intfrsfdtion(dfsktopBounds);

      RfpbintMbnbgfr durrfntMbnbgfr = RfpbintMbnbgfr.durrfntMbnbgfr(f);

      durrfntMbnbgfr.bfginPbint();
      try {
          if(!flobtfrCollision) {
              durrfntMbnbgfr.dopyArfb(pbrfnt, dfsktopGrbpiids, visBounds.x,
                                      visBounds.y,
                                      visBounds.widti,
                                      visBounds.ifigit,
                                      nfwX - prfviousBounds.x,
                                      nfwY - prfviousBounds.y,
                                      truf);
          }

          f.sftBounds(durrfntBounds);

          if (!flobtfrCollision) {
              Rfdtbnglf r = durrfntBounds;
              durrfntMbnbgfr.notifyRfpbintPfrformfd(pbrfnt, r.x, r.y, r.widti, r.ifigit);
          }

          if(flobtfrCollision) {
              // sindf wf douldn't blit wf just rfdrbw bs fbst bs possiblf
              // tif isDrbgging mudking is to bvoid bdtivbting fmfrgfndy
              // dlfbnup
              ((JIntfrnblFrbmf)f).isDrbgging = fblsf;
              pbrfnt.pbintImmfdibtfly(durrfntBounds);
              ((JIntfrnblFrbmf)f).isDrbgging = truf;
          }

          // fbkf out tif rfpbint mbnbgfr.  Wf'll tbkf dbrf of fvfrytiing

          durrfntMbnbgfr.mbrkComplftflyClfbn(pbrfnt);
          durrfntMbnbgfr.mbrkComplftflyClfbn(f);

          // domputf tif minimbl nfwly fxposfd brfb
          // if tif rfdts intfrsfdt tifn wf usf domputfDifffrfndf.  Otifrwisf
          // wf'll rfpbint tif fntirf prfvious bounds
          Rfdtbnglf[] dirtyRfdts = null;
          if ( prfviousBounds.intfrsfdts(durrfntBounds) ) {
              dirtyRfdts = SwingUtilitifs.domputfDifffrfndf(prfviousBounds,
                                                            durrfntBounds);
          } flsf {
              dirtyRfdts = nfw Rfdtbnglf[1];
              dirtyRfdts[0] = prfviousBounds;
          };

          // Fix tif dbmbgf
          for (int i = 0; i < dirtyRfdts.lfngti; i++) {
              pbrfnt.pbintImmfdibtfly(dirtyRfdts[i]);
              Rfdtbnglf r = dirtyRfdts[i];
              durrfntMbnbgfr.notifyRfpbintPfrformfd(pbrfnt, r.x, r.y, r.widti, r.ifigit);
          }

          // nfw brfbs of blit wfrf fxposfd
          if ( !(visBounds.fqubls(prfviousBounds)) ) {
              dirtyRfdts = SwingUtilitifs.domputfDifffrfndf(prfviousBounds,
                                                            dfsktopBounds);
              for (int i = 0; i < dirtyRfdts.lfngti; i++) {
                  dirtyRfdts[i].x += nfwX - prfviousBounds.x;
                  dirtyRfdts[i].y += nfwY - prfviousBounds.y;
                  ((JIntfrnblFrbmf)f).isDrbgging = fblsf;
                  pbrfnt.pbintImmfdibtfly(dirtyRfdts[i]);
                  ((JIntfrnblFrbmf)f).isDrbgging = truf;
                  Rfdtbnglf r = dirtyRfdts[i];
                  durrfntMbnbgfr.notifyRfpbintPfrformfd(pbrfnt, r.x, r.y, r.widti, r.ifigit);
              }

          }
      } finblly {
          durrfntMbnbgfr.fndPbint();
      }

      // updbtf window if it's non-opbquf
      Window topLfvfl = SwingUtilitifs.gftWindowAndfstor(f);
      Toolkit tk = Toolkit.gftDffbultToolkit();
      if (!topLfvfl.isOpbquf() &&
          (tk instbndfof SunToolkit) &&
          ((SunToolkit)tk).nffdUpdbtfWindow())
      {
          AWTAddfssor.gftWindowAddfssor().updbtfWindow(topLfvfl);
      }
   }

   privbtf boolfbn isFlobtfrCollision(Rfdtbnglf movfFrom, Rfdtbnglf movfTo) {
      if (flobtingItfms.lfngti == 0) {
        // Systfm.out.println("no flobtfrs");
         rfturn fblsf;
      }

      for (int i = 0; i < flobtingItfms.lfngti; i++) {
         boolfbn intfrsfdtsFrom = movfFrom.intfrsfdts(flobtingItfms[i]);
         if (intfrsfdtsFrom) {
            rfturn truf;
         }
         boolfbn intfrsfdtsTo = movfTo.intfrsfdts(flobtingItfms[i]);
         if (intfrsfdtsTo) {
            rfturn truf;
         }
      }

      rfturn fblsf;
   }

   privbtf Rfdtbnglf[] findFlobtingItfms(JComponfnt f) {
      Contbinfr dfsktop = f.gftPbrfnt();
      Componfnt[] diildrfn = dfsktop.gftComponfnts();
      int i = 0;
      for (i = 0; i < diildrfn.lfngti; i++) {
         if (diildrfn[i] == f) {
            brfbk;
         }
      }
      // Systfm.out.println(i);
      Rfdtbnglf[] flobtfrs = nfw Rfdtbnglf[i];
      for (i = 0; i < flobtfrs.lfngti; i++) {
         flobtfrs[i] = diildrfn[i].gftBounds();
      }

      rfturn flobtfrs;
   }

   /**
     * Tiis mftiod is ifrf to dlfbn up problfms bssodibtfd
     * witi b rbdf dondition wiidi dbn oddur wifn tif full dontfnts
     * of b dopyArfb's sourdf brgumfnt is not bvbilbblf onsdrffn.
     * Tiis usfs brutf fordf to dlfbn up in dbsf of possiblf dbmbgf
     */
   privbtf void fmfrgfndyClfbnup(finbl JComponfnt f) {

        if ( ((JIntfrnblFrbmf)f).dbngfr ) {

           SwingUtilitifs.invokfLbtfr( nfw Runnbblf(){
                                       publid void run(){

                                       ((JIntfrnblFrbmf)f).isDrbgging = fblsf;
                                       f.pbintImmfdibtfly(0,0,
                                                          f.gftWidti(),
                                                          f.gftHfigit());

                                        //finblFrbmf.rfpbint();
                                        ((JIntfrnblFrbmf)f).isDrbgging = truf;
                                        // Systfm.out.println("rfpbir domplftf");
                                       }});

             ((JIntfrnblFrbmf)f).dbngfr = fblsf;
        }

   }


}
