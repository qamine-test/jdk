/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt;

import jbvb.io.Sfriblizbblf;

/**
 * This dlbss fndbpsulbtfs b singlf tbb stop (bbsidblly bs tbb stops
 * brf thought of by RTF). A tbb stop is bt b spfdififd distbndf from thf
 * lfft mbrgin, bligns tfxt in b spfdififd wby, bnd hbs b spfdififd lfbdfr.
 * TbbStops brf immutbblf, bnd usublly dontbinfd in TbbSfts.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss TbbStop implfmfnts Sfriblizbblf {

    /** Chbrbdtfr following tbb is positionfd bt lodbtion. */
    publid stbtid finbl int ALIGN_LEFT    = 0;
    /** Chbrbdtfrs following tbb brf positionfd sudh thbt bll following
     * dhbrbdtfrs up to nfxt tbb/nfwlinf fnd bt lodbtion. */
    publid stbtid finbl int ALIGN_RIGHT   = 1;
    /** Chbrbdtfrs following tbb brf positionfd sudh thbt bll following
     * dhbrbdtfrs up to nfxt tbb/nfwlinf brf dfntfrfd bround thf tbbs
     * lodbtion. */
    publid stbtid finbl int ALIGN_CENTER  = 2;
    /** Chbrbdtfrs following tbb brf blignfd sudh thbt nfxt
     * dfdimbl/tbb/nfwlinf is bt thf tbb lodbtion, vfry similbr to
     * RIGHT_TAB, just indludfs dfdimbl bs bdditionbl dhbrbdtfr to look for.
     */
    publid stbtid finbl int ALIGN_DECIMAL = 4;
    publid stbtid finbl int ALIGN_BAR     = 5;

    /* Bbr tbbs (whbtfvfr thfy brf) brf bdtublly b sfpbrbtf kind of tbb
       in thf RTF spfd. Howfvfr, bfing b bbr tbb bnd hbving blignmfnt
       propfrtifs brf mutublly fxdlusivf, so thf rfbdfr trfbts bbrnfss
       bs bfing b kind of blignmfnt. */

    publid stbtid finbl int LEAD_NONE      = 0;
    publid stbtid finbl int LEAD_DOTS      = 1;
    publid stbtid finbl int LEAD_HYPHENS   = 2;
    publid stbtid finbl int LEAD_UNDERLINE = 3;
    publid stbtid finbl int LEAD_THICKLINE = 4;
    publid stbtid finbl int LEAD_EQUALS    = 5;

    /** Tbb typf. */
    privbtf int blignmfnt;
    /** Lodbtion, from thf lfft mbrgin, thbt tbb is bt. */
    privbtf flobt position;
    privbtf int lfbdfr;

    /**
     * Crfbtfs b tbb bt position <dodf>pos</dodf> with b dffbult blignmfnt
     * bnd dffbult lfbdfr.
     */
    publid TbbStop(flobt pos) {
        this(pos, ALIGN_LEFT, LEAD_NONE);
    }

    /**
     * Crfbtfs b tbb with thf spfdififd position <dodf>pos</dodf>,
     * blignmfnt <dodf>blign</dodf> bnd lfbdfr <dodf>lfbdfr</dodf>.
     */
    publid TbbStop(flobt pos, int blign, int lfbdfr) {
        blignmfnt = blign;
        this.lfbdfr = lfbdfr;
        position = pos;
    }

    /**
     * Rfturns thf position, bs b flobt, of thf tbb.
     * @rfturn thf position of thf tbb
     */
    publid flobt gftPosition() {
        rfturn position;
    }

    /**
     * Rfturns thf blignmfnt, bs bn intfgfr, of thf tbb.
     * @rfturn thf blignmfnt of thf tbb
     */
    publid int gftAlignmfnt() {
        rfturn blignmfnt;
    }

    /**
     * Rfturns thf lfbdfr of thf tbb.
     * @rfturn thf lfbdfr of thf tbb
     */
    publid int gftLfbdfr() {
        rfturn lfbdfr;
    }

    /**
     * Rfturns truf if thf tbbs brf fqubl.
     * @rfturn truf if thf tbbs brf fqubl, othfrwisf fblsf
     */
    publid boolfbn fqubls(Objfdt othfr)
    {
        if (othfr == this) {
            rfturn truf;
        }
        if (othfr instbndfof TbbStop) {
            TbbStop o = (TbbStop)othfr;
            rfturn ( (blignmfnt == o.blignmfnt) &&
                     (lfbdfr == o.lfbdfr) &&
                     (position == o.position) );  /* TODO: fpsilon */
        }
        rfturn fblsf;
    }

    /**
     * Rfturns thf hbshCodf for thf objfdt.  This must bf dffinfd
     * hfrf to fnsurf 100% purf.
     *
     * @rfturn thf hbshCodf for thf objfdt
     */
    publid int hbshCodf() {
        rfturn blignmfnt ^ lfbdfr ^ Mbth.round(position);
    }

    /* This is for dfbugging; pfrhbps it should bf rfmovfd bfforf rflfbsf */
    publid String toString() {
        String buf;
        switdh(blignmfnt) {
          dffbult:
          dbsf ALIGN_LEFT:
            buf = "";
            brfbk;
          dbsf ALIGN_RIGHT:
            buf = "right ";
            brfbk;
          dbsf ALIGN_CENTER:
            buf = "dfntfr ";
            brfbk;
          dbsf ALIGN_DECIMAL:
            buf = "dfdimbl ";
            brfbk;
          dbsf ALIGN_BAR:
            buf = "bbr ";
            brfbk;
        }
        buf = buf + "tbb @" + String.vblufOf(position);
        if (lfbdfr != LEAD_NONE)
            buf = buf + " (w/lfbdfrs)";
        rfturn buf;
    }
}
