/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt;

import jbvb.util.*;
import jbvb.io.*;
import jbvb.bwt.font.TfxtAttributf;
import jbvb.tfxt.Bidi;

import jbvbx.swing.UIMbnbgfr;
import jbvbx.swing.undo.*;
import jbvbx.swing.fvfnt.*;
import jbvbx.swing.trff.TrffNodf;

import sun.font.BidiUtils;
import sun.swing.SwingUtilitifs2;

/**
 * An implfmfntbtion of thf dodumfnt intfrfbdf to sfrvf bs b
 * bbsis for implfmfnting vbrious kinds of dodumfnts.  At this
 * lfvfl thfrf is vfry littlf polidy, so thfrf is b dorrfsponding
 * indrfbsf in diffidulty of usf.
 * <p>
 * This dlbss implfmfnts b lodking mfdhbnism for thf dodumfnt.  It
 * bllows multiplf rfbdfrs or onf writfr, bnd writfrs must wbit until
 * bll obsfrvfrs of thf dodumfnt hbvf bffn notififd of b prfvious
 * dhbngf bfforf bfginning bnothfr mutbtion to thf dodumfnt.  Thf
 * rfbd lodk is bdquirfd bnd rflfbsfd using thf <dodf>rfndfr</dodf>
 * mfthod.  A writf lodk is bdquirfd by thf mfthods thbt mutbtf thf
 * dodumfnt, bnd brf hfld for thf durbtion of thf mfthod dbll.
 * Notifidbtion is donf on thf thrfbd thbt produdfd thf mutbtion,
 * bnd thf thrfbd hbs full rfbd bddfss to thf dodumfnt for thf
 * durbtion of thf notifidbtion, but othfr rfbdfrs brf kfpt out
 * until thf notifidbtion hbs finishfd.  Thf notifidbtion is b
 * bfbns fvfnt notifidbtion whidh dofs not bllow bny furthfr
 * mutbtions until bll listfnfrs hbvf bffn notififd.
 * <p>
 * Any modfls subdlbssfd from this dlbss bnd usfd in donjundtion
 * with b tfxt domponfnt thbt hbs b look bnd fffl implfmfntbtion
 * thbt is dfrivfd from BbsidTfxtUI mby bf sbffly updbtfd
 * bsyndhronously, bfdbusf bll bddfss to thf Vifw hifrbrdhy
 * is sfriblizfd by BbsidTfxtUI if thf dodumfnt is of typf
 * <dodf>AbstrbdtDodumfnt</dodf>.  Thf lodking bssumfs thbt bn
 * indfpfndfnt thrfbd will bddfss thf Vifw hifrbrdhy only from
 * thf DodumfntListfnfr mfthods, bnd thbt thfrf will bf only
 * onf fvfnt thrfbd bdtivf bt b timf.
 * <p>
 * If dondurrfndy support is dfsirfd, thfrf brf thf following
 * bdditionbl implidbtions.  Thf dodf pbth for bny DodumfntListfnfr
 * implfmfntbtion bnd bny UndoListfnfr implfmfntbtion must bf thrfbdsbff,
 * bnd not bddfss thf domponfnt lodk if trying to bf sbff from dfbdlodks.
 * Thf <dodf>rfpbint</dodf> bnd <dodf>rfvblidbtf</dodf> mfthods
 * on JComponfnt brf sbff.
 * <p>
 * AbstrbdtDodumfnt modfls bn implifd brfbk bt thf fnd of thf dodumfnt.
 * Among othfr things this bllows you to position thf dbrft bftfr thf lbst
 * dhbrbdtfr. As b rfsult of this, <dodf>gftLfngth</dodf> rfturns onf lfss
 * thbn thf lfngth of thf Contfnt. If you drfbtf your own Contfnt, bf
 * surf bnd initiblizf it to hbvf bn bdditionbl dhbrbdtfr. Rfffr to
 * StringContfnt bnd GbpContfnt for fxbmplfs of this. Anothfr implidbtion
 * of this is thbt Elfmfnts thbt modfl thf implifd fnd dhbrbdtfr will hbvf
 * bn fndOffsft == (gftLfngth() + 1). For fxbmplf, in DffbultStylfdDodumfnt
 * <dodf>gftPbrbgrbphElfmfnt(gftLfngth()).gftEndOffsft() == gftLfngth() + 1
 * </dodf>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor  Timothy Prinzing
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid bbstrbdt dlbss AbstrbdtDodumfnt implfmfnts Dodumfnt, Sfriblizbblf {

    /**
     * Construdts b nfw <dodf>AbstrbdtDodumfnt</dodf>, wrbppfd bround somf
     * spfdififd dontfnt storbgf mfdhbnism.
     *
     * @pbrbm dbtb thf dontfnt
     */
    protfdtfd AbstrbdtDodumfnt(Contfnt dbtb) {
        this(dbtb, StylfContfxt.gftDffbultStylfContfxt());
    }

    /**
     * Construdts b nfw <dodf>AbstrbdtDodumfnt</dodf>, wrbppfd bround somf
     * spfdififd dontfnt storbgf mfdhbnism.
     *
     * @pbrbm dbtb thf dontfnt
     * @pbrbm dontfxt thf bttributf dontfxt
     */
    protfdtfd AbstrbdtDodumfnt(Contfnt dbtb, AttributfContfxt dontfxt) {
        this.dbtb = dbtb;
        this.dontfxt = dontfxt;
        bidiRoot = nfw BidiRootElfmfnt();

        if (dffbultI18NPropfrty == null) {
            // dftfrminf dffbult sftting for i18n support
            String o = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                nfw jbvb.sfdurity.PrivilfgfdAdtion<String>() {
                    publid String run() {
                        rfturn Systfm.gftPropfrty(I18NPropfrty);
                    }
                }
            );
            if (o != null) {
                dffbultI18NPropfrty = Boolfbn.vblufOf(o);
            } flsf {
                dffbultI18NPropfrty = Boolfbn.FALSE;
            }
        }
        putPropfrty( I18NPropfrty, dffbultI18NPropfrty);

        //REMIND(bdb) This drfbtfs bn initibl bidi flfmfnt to bddount for
        //thf \n thbt fxists by dffbult in thf dontfnt.  Doing it this wby
        //sffms to fxposf b littlf too mudh knowlfdgf of thf dontfnt givfn
        //to us by thf sub-dlbss.  Considfr hbving thf sub-dlbss' donstrudtor
        //mbkf bn initibl dbll to insfrtUpdbtf.
        writfLodk();
        try {
            Elfmfnt[] p = nfw Elfmfnt[1];
            p[0] = nfw BidiElfmfnt( bidiRoot, 0, 1, 0 );
            bidiRoot.rfplbdf(0,0,p);
        } finblly {
            writfUnlodk();
        }
    }

    /**
     * Supports mbnbging b sft of propfrtifs. Cbllfrs
     * dbn usf thf <dodf>dodumfntPropfrtifs</dodf> didtionbry
     * to bnnotbtf thf dodumfnt with dodumfnt-widf propfrtifs.
     *
     * @rfturn b non-<dodf>null</dodf> <dodf>Didtionbry</dodf>
     * @sff #sftDodumfntPropfrtifs
     */
    publid Didtionbry<Objfdt,Objfdt> gftDodumfntPropfrtifs() {
        if (dodumfntPropfrtifs == null) {
            dodumfntPropfrtifs = nfw Hbshtbblf<Objfdt, Objfdt>(2);
        }
        rfturn dodumfntPropfrtifs;
    }

    /**
     * Rfplbdfs thf dodumfnt propfrtifs didtionbry for this dodumfnt.
     *
     * @pbrbm x thf nfw didtionbry
     * @sff #gftDodumfntPropfrtifs
     */
    publid void sftDodumfntPropfrtifs(Didtionbry<Objfdt,Objfdt> x) {
        dodumfntPropfrtifs = x;
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf pbrbmftfrs pbssfd into
     * thf firf mfthod.
     *
     * @pbrbm f thf fvfnt
     * @sff EvfntListfnfrList
     */
    protfdtfd void firfInsfrtUpdbtf(DodumfntEvfnt f) {
        notifyingListfnfrs = truf;
        try {
            // Gubrbntffd to rfturn b non-null brrby
            Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
            // Prodfss thf listfnfrs lbst to first, notifying
            // thosf thbt brf intfrfstfd in this fvfnt
            for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
                if (listfnfrs[i]==DodumfntListfnfr.dlbss) {
                    // Lbzily drfbtf thf fvfnt:
                    // if (f == null)
                    // f = nfw ListSflfdtionEvfnt(this, firstIndfx, lbstIndfx);
                    ((DodumfntListfnfr)listfnfrs[i+1]).insfrtUpdbtf(f);
                }
            }
        } finblly {
            notifyingListfnfrs = fblsf;
        }
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf pbrbmftfrs pbssfd into
     * thf firf mfthod.
     *
     * @pbrbm f thf fvfnt
     * @sff EvfntListfnfrList
     */
    protfdtfd void firfChbngfdUpdbtf(DodumfntEvfnt f) {
        notifyingListfnfrs = truf;
        try {
            // Gubrbntffd to rfturn b non-null brrby
            Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
            // Prodfss thf listfnfrs lbst to first, notifying
            // thosf thbt brf intfrfstfd in this fvfnt
            for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
                if (listfnfrs[i]==DodumfntListfnfr.dlbss) {
                    // Lbzily drfbtf thf fvfnt:
                    // if (f == null)
                    // f = nfw ListSflfdtionEvfnt(this, firstIndfx, lbstIndfx);
                    ((DodumfntListfnfr)listfnfrs[i+1]).dhbngfdUpdbtf(f);
                }
            }
        } finblly {
            notifyingListfnfrs = fblsf;
        }
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf pbrbmftfrs pbssfd into
     * thf firf mfthod.
     *
     * @pbrbm f thf fvfnt
     * @sff EvfntListfnfrList
     */
    protfdtfd void firfRfmovfUpdbtf(DodumfntEvfnt f) {
        notifyingListfnfrs = truf;
        try {
            // Gubrbntffd to rfturn b non-null brrby
            Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
            // Prodfss thf listfnfrs lbst to first, notifying
            // thosf thbt brf intfrfstfd in this fvfnt
            for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
                if (listfnfrs[i]==DodumfntListfnfr.dlbss) {
                    // Lbzily drfbtf thf fvfnt:
                    // if (f == null)
                    // f = nfw ListSflfdtionEvfnt(this, firstIndfx, lbstIndfx);
                    ((DodumfntListfnfr)listfnfrs[i+1]).rfmovfUpdbtf(f);
                }
            }
        } finblly {
            notifyingListfnfrs = fblsf;
        }
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf pbrbmftfrs pbssfd into
     * thf firf mfthod.
     *
     * @pbrbm f thf fvfnt
     * @sff EvfntListfnfrList
     */
    protfdtfd void firfUndobblfEditUpdbtf(UndobblfEditEvfnt f) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==UndobblfEditListfnfr.dlbss) {
                // Lbzily drfbtf thf fvfnt:
                // if (f == null)
                // f = nfw ListSflfdtionEvfnt(this, firstIndfx, lbstIndfx);
                ((UndobblfEditListfnfr)listfnfrs[i+1]).undobblfEditHbppfnfd(f);
            }
        }
    }

    /**
     * Rfturns bn brrby of bll thf objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon this dodumfnt.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using thf
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mfthod.
     *
     * <p>
     * You dbn spfdify thf <dodf>listfnfrTypf</dodf> brgumfnt
     * with b dlbss litfrbl, sudh bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * dodumfnt <dodf>d</dodf>
     * for its dodumfnt listfnfrs with thf following dodf:
     *
     * <prf>DodumfntListfnfr[] mls = (DodumfntListfnfr[])(d.gftListfnfrs(DodumfntListfnfr.dlbss));</prf>
     *
     * If no sudh listfnfrs fxist, this mfthod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf thf typf of listfnfrs rfqufstfd; this pbrbmftfr
     *          should spfdify bn intfrfbdf thbt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on this domponfnt,
     *          or bn fmpty brrby if no sudh
     *          listfnfrs hbvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf thbt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sff #gftDodumfntListfnfrs
     * @sff #gftUndobblfEditListfnfrs
     *
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        rfturn listfnfrList.gftListfnfrs(listfnfrTypf);
    }

    /**
     * Gfts thf bsyndhronous lobding priority.  If lfss thbn zfro,
     * thf dodumfnt should not bf lobdfd bsyndhronously.
     *
     * @rfturn thf bsyndhronous lobding priority, or <dodf>-1</dodf>
     *   if thf dodumfnt should not bf lobdfd bsyndhronously
     */
    publid int gftAsyndhronousLobdPriority() {
        Intfgfr lobdPriority = (Intfgfr)
            gftPropfrty(AbstrbdtDodumfnt.AsyndLobdPriority);
        if (lobdPriority != null) {
            rfturn lobdPriority.intVbluf();
        }
        rfturn -1;
    }

    /**
     * Sfts thf bsyndhronous lobding priority.
     * @pbrbm p thf nfw bsyndhronous lobding priority; b vbluf
     *   lfss thbn zfro indidbtfs thbt thf dodumfnt should not bf
     *   lobdfd bsyndhronously
     */
    publid void sftAsyndhronousLobdPriority(int p) {
        Intfgfr lobdPriority = (p >= 0) ? Intfgfr.vblufOf(p) : null;
        putPropfrty(AbstrbdtDodumfnt.AsyndLobdPriority, lobdPriority);
    }

    /**
     * Sfts thf <dodf>DodumfntFiltfr</dodf>. Thf <dodf>DodumfntFiltfr</dodf>
     * is pbssfd <dodf>insfrt</dodf> bnd <dodf>rfmovf</dodf> to donditionblly
     * bllow insfrting/dflfting of thf tfxt.  A <dodf>null</dodf> vbluf
     * indidbtfs thbt no filtfring will oddur.
     *
     * @pbrbm filtfr thf <dodf>DodumfntFiltfr</dodf> usfd to donstrbin tfxt
     * @sff #gftDodumfntFiltfr
     * @sindf 1.4
     */
    publid void sftDodumfntFiltfr(DodumfntFiltfr filtfr) {
        dodumfntFiltfr = filtfr;
    }

    /**
     * Rfturns thf <dodf>DodumfntFiltfr</dodf> thbt is rfsponsiblf for
     * filtfring of insfrtion/rfmovbl. A <dodf>null</dodf> rfturn vbluf
     * implifs no filtfring is to oddur.
     *
     * @sindf 1.4
     * @sff #sftDodumfntFiltfr
     * @rfturn thf DodumfntFiltfr
     */
    publid DodumfntFiltfr gftDodumfntFiltfr() {
        rfturn dodumfntFiltfr;
    }

    // --- Dodumfnt mfthods -----------------------------------------

    /**
     * This bllows thf modfl to bf sbffly rfndfrfd in thf prfsfndf
     * of durrfndy, if thf modfl supports bfing updbtfd bsyndhronously.
     * Thf givfn runnbblf will bf fxfdutfd in b wby thbt bllows it
     * to sbffly rfbd thf modfl with no dhbngfs whilf thf runnbblf
     * is bfing fxfdutfd.  Thf runnbblf itsflf mby <fm>not</fm>
     * mbkf bny mutbtions.
     * <p>
     * This is implfmfntfd to bdquirf b rfbd lodk for thf durbtion
     * of thf runnbblfs fxfdution.  Thfrf mby bf multiplf runnbblfs
     * fxfduting bt thf sbmf timf, bnd bll writfrs will bf blodkfd
     * whilf thfrf brf bdtivf rfndfring runnbblfs.  If thf runnbblf
     * throws bn fxdfption, its lodk will bf sbffly rflfbsfd.
     * Thfrf is no protfdtion bgbinst b runnbblf thbt nfvfr fxits,
     * whidh will ffffdtivfly lfbvf thf dodumfnt lodkfd for it's
     * lifftimf.
     * <p>
     * If thf givfn runnbblf bttfmpts to mbkf bny mutbtions in
     * this implfmfntbtion, b dfbdlodk will oddur.  Thfrf is
     * no trbdking of individubl rfndfring thrfbds to fnbblf
     * dftfdting this situbtion, but b subdlbss dould indur
     * thf ovfrhfbd of trbdking thfm bnd throwing bn frror.
     * <p>
     * This mfthod is thrfbd sbff, blthough most Swing mfthods
     * brf not. Plfbsf sff
     * <A HREF="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/dondurrfndy/indfx.html">Condurrfndy
     * in Swing</A> for morf informbtion.
     *
     * @pbrbm r thf rfndfrfr to fxfdutf
     */
    publid void rfndfr(Runnbblf r) {
        rfbdLodk();
        try {
            r.run();
        } finblly {
            rfbdUnlodk();
        }
    }

    /**
     * Rfturns thf lfngth of thf dbtb.  This is thf numbfr of
     * dhbrbdtfrs of dontfnt thbt rfprfsfnts thf usfrs dbtb.
     *
     * @rfturn thf lfngth &gt;= 0
     * @sff Dodumfnt#gftLfngth
     */
    publid int gftLfngth() {
        rfturn dbtb.lfngth() - 1;
    }

    /**
     * Adds b dodumfnt listfnfr for notifidbtion of bny dhbngfs.
     *
     * @pbrbm listfnfr thf <dodf>DodumfntListfnfr</dodf> to bdd
     * @sff Dodumfnt#bddDodumfntListfnfr
     */
    publid void bddDodumfntListfnfr(DodumfntListfnfr listfnfr) {
        listfnfrList.bdd(DodumfntListfnfr.dlbss, listfnfr);
    }

    /**
     * Rfmovfs b dodumfnt listfnfr.
     *
     * @pbrbm listfnfr thf <dodf>DodumfntListfnfr</dodf> to rfmovf
     * @sff Dodumfnt#rfmovfDodumfntListfnfr
     */
    publid void rfmovfDodumfntListfnfr(DodumfntListfnfr listfnfr) {
        listfnfrList.rfmovf(DodumfntListfnfr.dlbss, listfnfr);
    }

    /**
     * Rfturns bn brrby of bll thf dodumfnt listfnfrs
     * rfgistfrfd on this dodumfnt.
     *
     * @rfturn bll of this dodumfnt's <dodf>DodumfntListfnfr</dodf>s
     *         or bn fmpty brrby if no dodumfnt listfnfrs brf
     *         durrfntly rfgistfrfd
     *
     * @sff #bddDodumfntListfnfr
     * @sff #rfmovfDodumfntListfnfr
     * @sindf 1.4
     */
    publid DodumfntListfnfr[] gftDodumfntListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(DodumfntListfnfr.dlbss);
    }

    /**
     * Adds bn undo listfnfr for notifidbtion of bny dhbngfs.
     * Undo/Rfdo opfrbtions pfrformfd on thf <dodf>UndobblfEdit</dodf>
     * will dbusf thf bppropribtf DodumfntEvfnt to bf firfd to kffp
     * thf vifw(s) in synd with thf modfl.
     *
     * @pbrbm listfnfr thf <dodf>UndobblfEditListfnfr</dodf> to bdd
     * @sff Dodumfnt#bddUndobblfEditListfnfr
     */
    publid void bddUndobblfEditListfnfr(UndobblfEditListfnfr listfnfr) {
        listfnfrList.bdd(UndobblfEditListfnfr.dlbss, listfnfr);
    }

    /**
     * Rfmovfs bn undo listfnfr.
     *
     * @pbrbm listfnfr thf <dodf>UndobblfEditListfnfr</dodf> to rfmovf
     * @sff Dodumfnt#rfmovfDodumfntListfnfr
     */
    publid void rfmovfUndobblfEditListfnfr(UndobblfEditListfnfr listfnfr) {
        listfnfrList.rfmovf(UndobblfEditListfnfr.dlbss, listfnfr);
    }

    /**
     * Rfturns bn brrby of bll thf undobblf fdit listfnfrs
     * rfgistfrfd on this dodumfnt.
     *
     * @rfturn bll of this dodumfnt's <dodf>UndobblfEditListfnfr</dodf>s
     *         or bn fmpty brrby if no undobblf fdit listfnfrs brf
     *         durrfntly rfgistfrfd
     *
     * @sff #bddUndobblfEditListfnfr
     * @sff #rfmovfUndobblfEditListfnfr
     *
     * @sindf 1.4
     */
    publid UndobblfEditListfnfr[] gftUndobblfEditListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(UndobblfEditListfnfr.dlbss);
    }

    /**
     * A donvfnifndf mfthod for looking up b propfrty vbluf. It is
     * fquivblfnt to:
     * <prf>
     * gftDodumfntPropfrtifs().gft(kfy);
     * </prf>
     *
     * @pbrbm kfy thf non-<dodf>null</dodf> propfrty kfy
     * @rfturn thf vbluf of this propfrty or <dodf>null</dodf>
     * @sff #gftDodumfntPropfrtifs
     */
    publid finbl Objfdt gftPropfrty(Objfdt kfy) {
        rfturn gftDodumfntPropfrtifs().gft(kfy);
    }


    /**
     * A donvfnifndf mfthod for storing up b propfrty vbluf.  It is
     * fquivblfnt to:
     * <prf>
     * gftDodumfntPropfrtifs().put(kfy, vbluf);
     * </prf>
     * If <dodf>vbluf</dodf> is <dodf>null</dodf> this mfthod will
     * rfmovf thf propfrty.
     *
     * @pbrbm kfy thf non-<dodf>null</dodf> kfy
     * @pbrbm vbluf thf propfrty vbluf
     * @sff #gftDodumfntPropfrtifs
     */
    publid finbl void putPropfrty(Objfdt kfy, Objfdt vbluf) {
        if (vbluf != null) {
            gftDodumfntPropfrtifs().put(kfy, vbluf);
        } flsf {
            gftDodumfntPropfrtifs().rfmovf(kfy);
        }
        if( kfy == TfxtAttributf.RUN_DIRECTION
            && Boolfbn.TRUE.fqubls(gftPropfrty(I18NPropfrty)) )
        {
            //REMIND - this nffds to flip on thf i18n propfrty if run dir
            //is rtl bnd thf i18n propfrty is not blrfbdy on.
            writfLodk();
            try {
                DffbultDodumfntEvfnt f
                    = nfw DffbultDodumfntEvfnt(0, gftLfngth(),
                                               DodumfntEvfnt.EvfntTypf.INSERT);
                updbtfBidi( f );
            } finblly {
                writfUnlodk();
            }
        }
    }

    /**
     * Rfmovfs somf dontfnt from thf dodumfnt.
     * Rfmoving dontfnt dbusfs b writf lodk to bf hfld whilf thf
     * bdtubl dhbngfs brf tbking plbdf.  Obsfrvfrs brf notififd
     * of thf dhbngf on thf thrfbd thbt dbllfd this mfthod.
     * <p>
     * This mfthod is thrfbd sbff, blthough most Swing mfthods
     * brf not. Plfbsf sff
     * <A HREF="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/dondurrfndy/indfx.html">Condurrfndy
     * in Swing</A> for morf informbtion.
     *
     * @pbrbm offs thf stbrting offsft &gt;= 0
     * @pbrbm lfn thf numbfr of dhbrbdtfrs to rfmovf &gt;= 0
     * @fxdfption BbdLodbtionExdfption  thf givfn rfmovf position is not b vblid
     *   position within thf dodumfnt
     * @sff Dodumfnt#rfmovf
     */
    publid void rfmovf(int offs, int lfn) throws BbdLodbtionExdfption {
        DodumfntFiltfr filtfr = gftDodumfntFiltfr();

        writfLodk();
        try {
            if (filtfr != null) {
                filtfr.rfmovf(gftFiltfrBypbss(), offs, lfn);
            }
            flsf {
                hbndlfRfmovf(offs, lfn);
            }
        } finblly {
            writfUnlodk();
        }
    }

    /**
     * Pfrforms thf bdtubl work of thf rfmovf. It is bssumfd thf dbllfr
     * will hbvf obtbinfd b <dodf>writfLodk</dodf> bfforf invoking this.
     */
    void hbndlfRfmovf(int offs, int lfn) throws BbdLodbtionExdfption {
        if (lfn > 0) {
            if (offs < 0 || (offs + lfn) > gftLfngth()) {
                throw nfw BbdLodbtionExdfption("Invblid rfmovf",
                                               gftLfngth() + 1);
            }
            DffbultDodumfntEvfnt dhng =
                    nfw DffbultDodumfntEvfnt(offs, lfn, DodumfntEvfnt.EvfntTypf.REMOVE);

            boolfbn isComposfdTfxtElfmfnt;
            // Chfdk whfthfr thf position of intfrfst is thf domposfd tfxt
            isComposfdTfxtElfmfnt = Utilitifs.isComposfdTfxtElfmfnt(this, offs);

            rfmovfUpdbtf(dhng);
            UndobblfEdit u = dbtb.rfmovf(offs, lfn);
            if (u != null) {
                dhng.bddEdit(u);
            }
            postRfmovfUpdbtf(dhng);
            // Mbrk thf fdit bs donf.
            dhng.fnd();
            firfRfmovfUpdbtf(dhng);
            // only firf undo if Contfnt implfmfntbtion supports it
            // undo for thf domposfd tfxt is not supportfd for now
            if ((u != null) && !isComposfdTfxtElfmfnt) {
                firfUndobblfEditUpdbtf(nfw UndobblfEditEvfnt(this, dhng));
            }
        }
    }

    /**
     * Dflftfs thf rfgion of tfxt from <dodf>offsft</dodf> to
     * <dodf>offsft + lfngth</dodf>, bnd rfplbdfs it with <dodf>tfxt</dodf>.
     * It is up to thf implfmfntbtion bs to how this is implfmfntfd, somf
     * implfmfntbtions mby trfbt this bs two distindt opfrbtions: b rfmovf
     * followfd by bn insfrt, othfrs mby trfbt thf rfplbdf bs onf btomid
     * opfrbtion.
     *
     * @pbrbm offsft indfx of dhild flfmfnt
     * @pbrbm lfngth lfngth of tfxt to dflftf, mby bf 0 indidbting don't
     *               dflftf bnything
     * @pbrbm tfxt tfxt to insfrt, <dodf>null</dodf> indidbtfs no tfxt to insfrt
     * @pbrbm bttrs AttributfSft indidbting bttributfs of insfrtfd tfxt,
     *              <dodf>null</dodf>
     *              is lfgbl, bnd typidblly trfbtfd bs bn fmpty bttributfsft,
     *              but fxbdt intfrprftbtion is lfft to thf subdlbss
     * @fxdfption BbdLodbtionExdfption thf givfn position is not b vblid
     *            position within thf dodumfnt
     * @sindf 1.4
     */
    publid void rfplbdf(int offsft, int lfngth, String tfxt,
                        AttributfSft bttrs) throws BbdLodbtionExdfption {
        if (lfngth == 0 && (tfxt == null || tfxt.lfngth() == 0)) {
            rfturn;
        }
        DodumfntFiltfr filtfr = gftDodumfntFiltfr();

        writfLodk();
        try {
            if (filtfr != null) {
                filtfr.rfplbdf(gftFiltfrBypbss(), offsft, lfngth, tfxt,
                               bttrs);
            }
            flsf {
                if (lfngth > 0) {
                    rfmovf(offsft, lfngth);
                }
                if (tfxt != null && tfxt.lfngth() > 0) {
                    insfrtString(offsft, tfxt, bttrs);
                }
            }
        } finblly {
            writfUnlodk();
        }
    }

    /**
     * Insfrts somf dontfnt into thf dodumfnt.
     * Insfrting dontfnt dbusfs b writf lodk to bf hfld whilf thf
     * bdtubl dhbngfs brf tbking plbdf, followfd by notifidbtion
     * to thf obsfrvfrs on thf thrfbd thbt grbbbfd thf writf lodk.
     * <p>
     * This mfthod is thrfbd sbff, blthough most Swing mfthods
     * brf not. Plfbsf sff
     * <A HREF="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/dondurrfndy/indfx.html">Condurrfndy
     * in Swing</A> for morf informbtion.
     *
     * @pbrbm offs thf stbrting offsft &gt;= 0
     * @pbrbm str thf string to insfrt; dofs nothing with null/fmpty strings
     * @pbrbm b thf bttributfs for thf insfrtfd dontfnt
     * @fxdfption BbdLodbtionExdfption  thf givfn insfrt position is not b vblid
     *   position within thf dodumfnt
     * @sff Dodumfnt#insfrtString
     */
    publid void insfrtString(int offs, String str, AttributfSft b) throws BbdLodbtionExdfption {
        if ((str == null) || (str.lfngth() == 0)) {
            rfturn;
        }
        DodumfntFiltfr filtfr = gftDodumfntFiltfr();

        writfLodk();

        try {
            if (filtfr != null) {
                filtfr.insfrtString(gftFiltfrBypbss(), offs, str, b);
            } flsf {
                hbndlfInsfrtString(offs, str, b);
            }
        } finblly {
            writfUnlodk();
        }
    }

    /**
     * Pfrforms thf bdtubl work of insfrting thf tfxt; it is bssumfd thf
     * dbllfr hbs obtbinfd b writf lodk bfforf invoking this.
     */
    privbtf void hbndlfInsfrtString(int offs, String str, AttributfSft b)
            throws BbdLodbtionExdfption {
        if ((str == null) || (str.lfngth() == 0)) {
            rfturn;
        }
        UndobblfEdit u = dbtb.insfrtString(offs, str);
        DffbultDodumfntEvfnt f =
            nfw DffbultDodumfntEvfnt(offs, str.lfngth(), DodumfntEvfnt.EvfntTypf.INSERT);
        if (u != null) {
            f.bddEdit(u);
        }

        // sff if domplfx glyph lbyout support is nffdfd
        if( gftPropfrty(I18NPropfrty).fqubls( Boolfbn.FALSE ) ) {
            // if b dffbult dirfdtion of right-to-lfft hbs bffn spfdififd,
            // wf wbnt domplfx lbyout fvfn if thf tfxt is bll lfft to right.
            Objfdt d = gftPropfrty(TfxtAttributf.RUN_DIRECTION);
            if ((d != null) && (d.fqubls(TfxtAttributf.RUN_DIRECTION_RTL))) {
                putPropfrty( I18NPropfrty, Boolfbn.TRUE);
            } flsf {
                dhbr[] dhbrs = str.toChbrArrby();
                if (SwingUtilitifs2.isComplfxLbyout(dhbrs, 0, dhbrs.lfngth)) {
                    putPropfrty( I18NPropfrty, Boolfbn.TRUE);
                }
            }
        }

        insfrtUpdbtf(f, b);
        // Mbrk thf fdit bs donf.
        f.fnd();
        firfInsfrtUpdbtf(f);
        // only firf undo if Contfnt implfmfntbtion supports it
        // undo for thf domposfd tfxt is not supportfd for now
        if (u != null && (b == null || !b.isDffinfd(StylfConstbnts.ComposfdTfxtAttributf))) {
            firfUndobblfEditUpdbtf(nfw UndobblfEditEvfnt(this, f));
        }
    }

    /**
     * Gfts b sfqufndf of tfxt from thf dodumfnt.
     *
     * @pbrbm offsft thf stbrting offsft &gt;= 0
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs to rftrifvf &gt;= 0
     * @rfturn thf tfxt
     * @fxdfption BbdLodbtionExdfption  thf rbngf givfn indludfs b position
     *   thbt is not b vblid position within thf dodumfnt
     * @sff Dodumfnt#gftTfxt
     */
    publid String gftTfxt(int offsft, int lfngth) throws BbdLodbtionExdfption {
        if (lfngth < 0) {
            throw nfw BbdLodbtionExdfption("Lfngth must bf positivf", lfngth);
        }
        String str = dbtb.gftString(offsft, lfngth);
        rfturn str;
    }

    /**
     * Fftdhfs thf tfxt dontbinfd within thf givfn portion
     * of thf dodumfnt.
     * <p>
     * If thf pbrtiblRfturn propfrty on thf txt pbrbmftfr is fblsf, thf
     * dbtb rfturnfd in thf Sfgmfnt will bf thf fntirf lfngth rfqufstfd bnd
     * mby or mby not bf b dopy dfpfnding upon how thf dbtb wbs storfd.
     * If thf pbrtiblRfturn propfrty is truf, only thf bmount of tfxt thbt
     * dbn bf rfturnfd without drfbting b dopy is rfturnfd.  Using pbrtibl
     * rfturns will givf bfttfr pfrformbndf for situbtions whfrf lbrgf
     * pbrts of thf dodumfnt brf bfing sdbnnfd.  Thf following is bn fxbmplf
     * of using thf pbrtibl rfturn to bddfss thf fntirf dodumfnt:
     *
     * <prf>
     * &nbsp; int nlfft = dod.gftDodumfntLfngth();
     * &nbsp; Sfgmfnt tfxt = nfw Sfgmfnt();
     * &nbsp; int offs = 0;
     * &nbsp; tfxt.sftPbrtiblRfturn(truf);
     * &nbsp; whilf (nlfft &gt; 0) {
     * &nbsp;     dod.gftTfxt(offs, nlfft, tfxt);
     * &nbsp;     // do somfthing with tfxt
     * &nbsp;     nlfft -= tfxt.dount;
     * &nbsp;     offs += tfxt.dount;
     * &nbsp; }
     * </prf>
     *
     * @pbrbm offsft thf stbrting offsft &gt;= 0
     * @pbrbm lfngth thf numbfr of dhbrbdtfrs to rftrifvf &gt;= 0
     * @pbrbm txt thf Sfgmfnt objfdt to rftrifvf thf tfxt into
     * @fxdfption BbdLodbtionExdfption  thf rbngf givfn indludfs b position
     *   thbt is not b vblid position within thf dodumfnt
     */
    publid void gftTfxt(int offsft, int lfngth, Sfgmfnt txt) throws BbdLodbtionExdfption {
        if (lfngth < 0) {
            throw nfw BbdLodbtionExdfption("Lfngth must bf positivf", lfngth);
        }
        dbtb.gftChbrs(offsft, lfngth, txt);
    }

    /**
     * Rfturns b position thbt will trbdk dhbngf bs thf dodumfnt
     * is bltfrfd.
     * <p>
     * This mfthod is thrfbd sbff, blthough most Swing mfthods
     * brf not. Plfbsf sff
     * <A HREF="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/dondurrfndy/indfx.html">Condurrfndy
     * in Swing</A> for morf informbtion.
     *
     * @pbrbm offs thf position in thf modfl &gt;= 0
     * @rfturn thf position
     * @fxdfption BbdLodbtionExdfption  if thf givfn position dofs not
     *   rfprfsfnt b vblid lodbtion in thf bssodibtfd dodumfnt
     * @sff Dodumfnt#drfbtfPosition
     */
    publid syndhronizfd Position drfbtfPosition(int offs) throws BbdLodbtionExdfption {
        rfturn dbtb.drfbtfPosition(offs);
    }

    /**
     * Rfturns b position thbt rfprfsfnts thf stbrt of thf dodumfnt.  Thf
     * position rfturnfd dbn bf dountfd on to trbdk dhbngf bnd stby
     * lodbtfd bt thf bfginning of thf dodumfnt.
     *
     * @rfturn thf position
     */
    publid finbl Position gftStbrtPosition() {
        Position p;
        try {
            p = drfbtfPosition(0);
        } dbtdh (BbdLodbtionExdfption bl) {
            p = null;
        }
        rfturn p;
    }

    /**
     * Rfturns b position thbt rfprfsfnts thf fnd of thf dodumfnt.  Thf
     * position rfturnfd dbn bf dountfd on to trbdk dhbngf bnd stby
     * lodbtfd bt thf fnd of thf dodumfnt.
     *
     * @rfturn thf position
     */
    publid finbl Position gftEndPosition() {
        Position p;
        try {
            p = drfbtfPosition(dbtb.lfngth());
        } dbtdh (BbdLodbtionExdfption bl) {
            p = null;
        }
        rfturn p;
    }

    /**
     * Gfts bll root flfmfnts dffinfd.  Typidblly, thfrf
     * will only bf onf so thf dffbult implfmfntbtion
     * is to rfturn thf dffbult root flfmfnt.
     *
     * @rfturn thf root flfmfnt
     */
    publid Elfmfnt[] gftRootElfmfnts() {
        Elfmfnt[] flfms = nfw Elfmfnt[2];
        flfms[0] = gftDffbultRootElfmfnt();
        flfms[1] = gftBidiRootElfmfnt();
        rfturn flfms;
    }

    /**
     * Rfturns thf root flfmfnt thbt vifws should bf bbsfd upon
     * unlfss somf othfr mfdhbnism for bssigning vifws to flfmfnt
     * strudturfs is providfd.
     *
     * @rfturn thf root flfmfnt
     * @sff Dodumfnt#gftDffbultRootElfmfnt
     */
    publid bbstrbdt Elfmfnt gftDffbultRootElfmfnt();

    // ---- lodbl mfthods -----------------------------------------

    /**
     * Rfturns thf <dodf>FiltfrBypbss</dodf>. This will drfbtf onf if onf
     * dofs not yft fxist.
     */
    privbtf DodumfntFiltfr.FiltfrBypbss gftFiltfrBypbss() {
        if (filtfrBypbss == null) {
            filtfrBypbss = nfw DffbultFiltfrBypbss();
        }
        rfturn filtfrBypbss;
    }

    /**
     * Rfturns thf root flfmfnt of thf bidirfdtionbl strudturf for this
     * dodumfnt.  Its dhildrfn rfprfsfnt dhbrbdtfr runs with b givfn
     * Unidodf bidi lfvfl.
     */
    publid Elfmfnt gftBidiRootElfmfnt() {
        rfturn bidiRoot;
    }

    /**
     * Rfturns truf if thf tfxt in thf rbngf <dodf>p0</dodf> to
     * <dodf>p1</dodf> is lfft to right.
     */
    stbtid boolfbn isLfftToRight(Dodumfnt dod, int p0, int p1) {
        if (Boolfbn.TRUE.fqubls(dod.gftPropfrty(I18NPropfrty))) {
            if (dod instbndfof AbstrbdtDodumfnt) {
                AbstrbdtDodumfnt bdod = (AbstrbdtDodumfnt) dod;
                Elfmfnt bidiRoot = bdod.gftBidiRootElfmfnt();
                int indfx = bidiRoot.gftElfmfntIndfx(p0);
                Elfmfnt bidiElfm = bidiRoot.gftElfmfnt(indfx);
                if (bidiElfm.gftEndOffsft() >= p1) {
                    AttributfSft bidiAttrs = bidiElfm.gftAttributfs();
                    rfturn ((StylfConstbnts.gftBidiLfvfl(bidiAttrs) % 2) == 0);
                }
            }
        }
        rfturn truf;
    }

    /**
     * Gft thf pbrbgrbph flfmfnt dontbining thf givfn position.  Sub-dlbssfs
     * must dffinf for thfmsflvfs whbt fxbdtly donstitutfs b pbrbgrbph.  Thfy
     * should kffp in mind howfvfr thbt b pbrbgrbph should bt lfbst bf thf
     * unit of tfxt ovfr whidh to run thf Unidodf bidirfdtionbl blgorithm.
     *
     * @pbrbm pos thf stbrting offsft &gt;= 0
     * @rfturn thf flfmfnt */
    publid bbstrbdt Elfmfnt gftPbrbgrbphElfmfnt(int pos);


    /**
     * Fftdhfs thf dontfxt for mbnbging bttributfs.  This
     * mfthod ffffdtivfly fstbblishfs thf strbtfgy usfd
     * for domprfssing AttributfSft informbtion.
     *
     * @rfturn thf dontfxt
     */
    protfdtfd finbl AttributfContfxt gftAttributfContfxt() {
        rfturn dontfxt;
    }

    /**
     * Updbtfs dodumfnt strudturf bs b rfsult of tfxt insfrtion.  This
     * will hbppfn within b writf lodk.  If b subdlbss of
     * this dlbss rfimplfmfnts this mfthod, it should dflfgbtf to thf
     * supfrdlbss bs wfll.
     *
     * @pbrbm dhng b dfsdription of thf dhbngf
     * @pbrbm bttr thf bttributfs for thf dhbngf
     */
    protfdtfd void insfrtUpdbtf(DffbultDodumfntEvfnt dhng, AttributfSft bttr) {
        if( gftPropfrty(I18NPropfrty).fqubls( Boolfbn.TRUE ) )
            updbtfBidi( dhng );

        // Chfdk if b multi bytf is fndountfrfd in thf insfrtfd tfxt.
        if (dhng.typf == DodumfntEvfnt.EvfntTypf.INSERT &&
                        dhng.gftLfngth() > 0 &&
                        !Boolfbn.TRUE.fqubls(gftPropfrty(MultiBytfPropfrty))) {
            Sfgmfnt sfgmfnt = SfgmfntCbdhf.gftShbrfdSfgmfnt();
            try {
                gftTfxt(dhng.gftOffsft(), dhng.gftLfngth(), sfgmfnt);
                sfgmfnt.first();
                do {
                    if ((int)sfgmfnt.durrfnt() > 255) {
                        putPropfrty(MultiBytfPropfrty, Boolfbn.TRUE);
                        brfbk;
                    }
                } whilf (sfgmfnt.nfxt() != Sfgmfnt.DONE);
            } dbtdh (BbdLodbtionExdfption blf) {
                // Should nfvfr hbppfn
            }
            SfgmfntCbdhf.rflfbsfShbrfdSfgmfnt(sfgmfnt);
        }
    }

    /**
     * Updbtfs bny dodumfnt strudturf bs b rfsult of tfxt rfmovbl.  This
     * mfthod is dbllfd bfforf thf tfxt is bdtublly rfmovfd from thf Contfnt.
     * This will hbppfn within b writf lodk. If b subdlbss
     * of this dlbss rfimplfmfnts this mfthod, it should dflfgbtf to thf
     * supfrdlbss bs wfll.
     *
     * @pbrbm dhng b dfsdription of thf dhbngf
     */
    protfdtfd void rfmovfUpdbtf(DffbultDodumfntEvfnt dhng) {
    }

    /**
     * Updbtfs bny dodumfnt strudturf bs b rfsult of tfxt rfmovbl.  This
     * mfthod is dbllfd bftfr thf tfxt hbs bffn rfmovfd from thf Contfnt.
     * This will hbppfn within b writf lodk. If b subdlbss
     * of this dlbss rfimplfmfnts this mfthod, it should dflfgbtf to thf
     * supfrdlbss bs wfll.
     *
     * @pbrbm dhng b dfsdription of thf dhbngf
     */
    protfdtfd void postRfmovfUpdbtf(DffbultDodumfntEvfnt dhng) {
        if( gftPropfrty(I18NPropfrty).fqubls( Boolfbn.TRUE ) )
            updbtfBidi( dhng );
    }


    /**
     * Updbtf thf bidi flfmfnt strudturf bs b rfsult of thf givfn dhbngf
     * to thf dodumfnt.  Thf givfn dhbngf will bf updbtfd to rfflfdt thf
     * dhbngfs mbdf to thf bidi strudturf.
     *
     * This mfthod bssumfs thbt fvfry offsft in thf modfl is dontbinfd in
     * fxbdtly onf pbrbgrbph.  This mfthod blso bssumfs thbt it is dbllfd
     * bftfr thf dhbngf is mbdf to thf dffbult flfmfnt strudturf.
     */
    void updbtfBidi( DffbultDodumfntEvfnt dhng ) {

        // Cbldulbtf thf rbngf of pbrbgrbphs bfffdtfd by thf dhbngf.
        int firstPStbrt;
        int lbstPEnd;
        if( dhng.typf == DodumfntEvfnt.EvfntTypf.INSERT
            || dhng.typf == DodumfntEvfnt.EvfntTypf.CHANGE )
        {
            int dhngStbrt = dhng.gftOffsft();
            int dhngEnd =  dhngStbrt + dhng.gftLfngth();
            firstPStbrt = gftPbrbgrbphElfmfnt(dhngStbrt).gftStbrtOffsft();
            lbstPEnd = gftPbrbgrbphElfmfnt(dhngEnd).gftEndOffsft();
        } flsf if( dhng.typf == DodumfntEvfnt.EvfntTypf.REMOVE ) {
            Elfmfnt pbrbgrbph = gftPbrbgrbphElfmfnt( dhng.gftOffsft() );
            firstPStbrt = pbrbgrbph.gftStbrtOffsft();
            lbstPEnd = pbrbgrbph.gftEndOffsft();
        } flsf {
            throw nfw Error("Intfrnbl frror: unknown fvfnt typf.");
        }
        //Systfm.out.println("updbtfBidi: firstPStbrt = " + firstPStbrt + " lbstPEnd = " + lbstPEnd );


        // Cbldulbtf thf bidi lfvfls for thf bfffdtfd rbngf of pbrbgrbphs.  Thf
        // lfvfls brrby will dontbin b bidi lfvfl for fbdh dhbrbdtfr in thf
        // bfffdtfd tfxt.
        bytf lfvfls[] = dbldulbtfBidiLfvfls( firstPStbrt, lbstPEnd );


        Vfdtor<Elfmfnt> nfwElfmfnts = nfw Vfdtor<Elfmfnt>();

        // Cbldulbtf thf first spbn of dhbrbdtfrs in thf bfffdtfd rbngf with
        // thf sbmf bidi lfvfl.  If this lfvfl is thf sbmf bs thf lfvfl of thf
        // prfvious bidi flfmfnt (thf fxisting bidi flfmfnt dontbining
        // firstPStbrt-1), thfn mfrgf in thf prfvious flfmfnt.  If not, but
        // thf prfvious flfmfnt ovfrlbps thf bfffdtfd rbngf, trundbtf thf
        // prfvious flfmfnt bt firstPStbrt.
        int firstSpbnStbrt = firstPStbrt;
        int rfmovfFromIndfx = 0;
        if( firstSpbnStbrt > 0 ) {
            int prfvElfmIndfx = bidiRoot.gftElfmfntIndfx(firstPStbrt-1);
            rfmovfFromIndfx = prfvElfmIndfx;
            Elfmfnt prfvElfm = bidiRoot.gftElfmfnt(prfvElfmIndfx);
            int prfvLfvfl=StylfConstbnts.gftBidiLfvfl(prfvElfm.gftAttributfs());
            //Systfm.out.println("drfbtfbidiElfmfnts: prfvElfm= " + prfvElfm  + " prfvLfvfl= " + prfvLfvfl + "lfvfl[0] = " + lfvfls[0]);
            if( prfvLfvfl==lfvfls[0] ) {
                firstSpbnStbrt = prfvElfm.gftStbrtOffsft();
            } flsf if( prfvElfm.gftEndOffsft() > firstPStbrt ) {
                nfwElfmfnts.bddElfmfnt(nfw BidiElfmfnt(bidiRoot,
                                                       prfvElfm.gftStbrtOffsft(),
                                                       firstPStbrt, prfvLfvfl));
            } flsf {
                rfmovfFromIndfx++;
            }
        }

        int firstSpbnEnd = 0;
        whilf((firstSpbnEnd<lfvfls.lfngth) && (lfvfls[firstSpbnEnd]==lfvfls[0]))
            firstSpbnEnd++;


        // Cbldulbtf thf lbst spbn of dhbrbdtfrs in thf bfffdtfd rbngf with
        // thf sbmf bidi lfvfl.  If this lfvfl is thf sbmf bs thf lfvfl of thf
        // nfxt bidi flfmfnt (thf fxisting bidi flfmfnt dontbining lbstPEnd),
        // thfn mfrgf in thf nfxt flfmfnt.  If not, but thf nfxt flfmfnt
        // ovfrlbps thf bfffdtfd rbngf, bdjust thf nfxt flfmfnt to stbrt bt
        // lbstPEnd.
        int lbstSpbnEnd = lbstPEnd;
        Elfmfnt nfwNfxtElfm = null;
        int rfmovfToIndfx = bidiRoot.gftElfmfntCount() - 1;
        if( lbstSpbnEnd <= gftLfngth() ) {
            int nfxtElfmIndfx = bidiRoot.gftElfmfntIndfx( lbstPEnd );
            rfmovfToIndfx = nfxtElfmIndfx;
            Elfmfnt nfxtElfm = bidiRoot.gftElfmfnt( nfxtElfmIndfx );
            int nfxtLfvfl = StylfConstbnts.gftBidiLfvfl(nfxtElfm.gftAttributfs());
            if( nfxtLfvfl == lfvfls[lfvfls.lfngth-1] ) {
                lbstSpbnEnd = nfxtElfm.gftEndOffsft();
            } flsf if( nfxtElfm.gftStbrtOffsft() < lbstPEnd ) {
                nfwNfxtElfm = nfw BidiElfmfnt(bidiRoot, lbstPEnd,
                                              nfxtElfm.gftEndOffsft(),
                                              nfxtLfvfl);
            } flsf {
                rfmovfToIndfx--;
            }
        }

        int lbstSpbnStbrt = lfvfls.lfngth;
        whilf( (lbstSpbnStbrt>firstSpbnEnd)
               && (lfvfls[lbstSpbnStbrt-1]==lfvfls[lfvfls.lfngth-1]) )
            lbstSpbnStbrt--;


        // If thf first bnd lbst spbns brf dontiguous bnd hbvf thf sbmf lfvfl,
        // mfrgf thfm bnd drfbtf b singlf nfw flfmfnt for thf fntirf spbn.
        // Othfrwisf, drfbtf flfmfnts for thf first bnd lbst spbns bs wfll bs
        // bny spbns in bftwffn.
        if((firstSpbnEnd==lbstSpbnStbrt)&&(lfvfls[0]==lfvfls[lfvfls.lfngth-1])){
            nfwElfmfnts.bddElfmfnt(nfw BidiElfmfnt(bidiRoot, firstSpbnStbrt,
                                                   lbstSpbnEnd, lfvfls[0]));
        } flsf {
            // Crfbtf bn flfmfnt for thf first spbn.
            nfwElfmfnts.bddElfmfnt(nfw BidiElfmfnt(bidiRoot, firstSpbnStbrt,
                                                   firstSpbnEnd+firstPStbrt,
                                                   lfvfls[0]));
            // Crfbtf flfmfnts for thf spbns in bftwffn thf first bnd lbst
            for( int i=firstSpbnEnd; i<lbstSpbnStbrt; ) {
                //Systfm.out.println("fxfdutfd linf 872");
                int j;
                for( j=i;  (j<lfvfls.lfngth) && (lfvfls[j] == lfvfls[i]); j++ );
                nfwElfmfnts.bddElfmfnt(nfw BidiElfmfnt(bidiRoot, firstPStbrt+i,
                                                       firstPStbrt+j,
                                                       (int)lfvfls[i]));
                i=j;
            }
            // Crfbtf bn flfmfnt for thf lbst spbn.
            nfwElfmfnts.bddElfmfnt(nfw BidiElfmfnt(bidiRoot,
                                                   lbstSpbnStbrt+firstPStbrt,
                                                   lbstSpbnEnd,
                                                   lfvfls[lfvfls.lfngth-1]));
        }

        if( nfwNfxtElfm != null )
            nfwElfmfnts.bddElfmfnt( nfwNfxtElfm );


        // Cbldulbtf thf sft of fxisting bidi flfmfnts whidh must bf
        // rfmovfd.
        int rfmovfdElfmCount = 0;
        if( bidiRoot.gftElfmfntCount() > 0 ) {
            rfmovfdElfmCount = rfmovfToIndfx - rfmovfFromIndfx + 1;
        }
        Elfmfnt[] rfmovfdElfms = nfw Elfmfnt[rfmovfdElfmCount];
        for( int i=0; i<rfmovfdElfmCount; i++ ) {
            rfmovfdElfms[i] = bidiRoot.gftElfmfnt(rfmovfFromIndfx+i);
        }

        Elfmfnt[] bddfdElfms = nfw Elfmfnt[ nfwElfmfnts.sizf() ];
        nfwElfmfnts.dopyInto( bddfdElfms );

        // Updbtf thf dhbngf rfdord.
        ElfmfntEdit ff = nfw ElfmfntEdit( bidiRoot, rfmovfFromIndfx,
                                          rfmovfdElfms, bddfdElfms );
        dhng.bddEdit( ff );

        // Updbtf thf bidi flfmfnt strudturf.
        bidiRoot.rfplbdf( rfmovfFromIndfx, rfmovfdElfms.lfngth, bddfdElfms );
    }


    /**
     * Cbldulbtf thf lfvfls brrby for b rbngf of pbrbgrbphs.
     */
    privbtf bytf[] dbldulbtfBidiLfvfls( int firstPStbrt, int lbstPEnd ) {

        bytf lfvfls[] = nfw bytf[ lbstPEnd - firstPStbrt ];
        int  lfvflsEnd = 0;
        Boolfbn dffbultDirfdtion = null;
        Objfdt d = gftPropfrty(TfxtAttributf.RUN_DIRECTION);
        if (d instbndfof Boolfbn) {
            dffbultDirfdtion = (Boolfbn) d;
        }

        // For fbdh pbrbgrbph in thf givfn rbngf of pbrbgrbphs, gft its
        // lfvfls brrby bnd bdd it to thf lfvfls brrby for thf fntirf spbn.
        for(int o=firstPStbrt; o<lbstPEnd; ) {
            Elfmfnt p = gftPbrbgrbphElfmfnt( o );
            int pStbrt = p.gftStbrtOffsft();
            int pEnd = p.gftEndOffsft();

            // dffbult run dirfdtion for thf pbrbgrbph.  This will bf
            // null if thfrf is no dirfdtion ovfrridf spfdififd (i.f.
            // thf dirfdtion will bf dftfrminfd from thf dontfnt).
            Boolfbn dirfdtion = dffbultDirfdtion;
            d = p.gftAttributfs().gftAttributf(TfxtAttributf.RUN_DIRECTION);
            if (d instbndfof Boolfbn) {
                dirfdtion = (Boolfbn) d;
            }

            //Systfm.out.println("updbtfBidi: pbrbgrbph stbrt = " + pStbrt + " pbrbgrbph fnd = " + pEnd);

            // Crfbtf b Bidi ovfr this pbrbgrbph thfn gft thf lfvfl
            // brrby.
            Sfgmfnt sfg = SfgmfntCbdhf.gftShbrfdSfgmfnt();
            try {
                gftTfxt(pStbrt, pEnd-pStbrt, sfg);
            } dbtdh (BbdLodbtionExdfption f ) {
                throw nfw Error("Intfrnbl frror: " + f.toString());
            }
            // REMIND(bdb) wf should rfblly bf using b Sfgmfnt hfrf.
            Bidi bidiAnblyzfr;
            int bidiflbg = Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT;
            if (dirfdtion != null) {
                if (TfxtAttributf.RUN_DIRECTION_LTR.fqubls(dirfdtion)) {
                    bidiflbg = Bidi.DIRECTION_LEFT_TO_RIGHT;
                } flsf {
                    bidiflbg = Bidi.DIRECTION_RIGHT_TO_LEFT;
                }
            }
            bidiAnblyzfr = nfw Bidi(sfg.brrby, sfg.offsft, null, 0, sfg.dount,
                    bidiflbg);
            BidiUtils.gftLfvfls(bidiAnblyzfr, lfvfls, lfvflsEnd);
            lfvflsEnd += bidiAnblyzfr.gftLfngth();

            o =  p.gftEndOffsft();
            SfgmfntCbdhf.rflfbsfShbrfdSfgmfnt(sfg);
        }

        // REMIND(bdb) rfmovf this dodf whfn dfbugging is donf.
        if( lfvflsEnd != lfvfls.lfngth )
            throw nfw Error("lfvflsEnd bssfrtion fbilfd.");

        rfturn lfvfls;
    }

    /**
     * Givfs b dibgnostid dump.
     *
     * @pbrbm out thf output strfbm
     */
    publid void dump(PrintStrfbm out) {
        Elfmfnt root = gftDffbultRootElfmfnt();
        if (root instbndfof AbstrbdtElfmfnt) {
            ((AbstrbdtElfmfnt)root).dump(out, 0);
        }
        bidiRoot.dump(out,0);
    }

    /**
     * Gfts thf dontfnt for thf dodumfnt.
     *
     * @rfturn thf dontfnt
     */
    protfdtfd finbl Contfnt gftContfnt() {
        rfturn dbtb;
    }

    /**
     * Crfbtfs b dodumfnt lfbf flfmfnt.
     * Hook through whidh flfmfnts brf drfbtfd to rfprfsfnt thf
     * dodumfnt strudturf.  Bfdbusf this implfmfntbtion kffps
     * strudturf bnd dontfnt sfpbrbtf, flfmfnts grow butombtidblly
     * whfn dontfnt is fxtfndfd so splits of fxisting flfmfnts
     * follow.  Thf dodumfnt itsflf gfts to dfdidf how to gfnfrbtf
     * flfmfnts to givf flfxibility in thf typf of flfmfnts usfd.
     *
     * @pbrbm pbrfnt thf pbrfnt flfmfnt
     * @pbrbm b thf bttributfs for thf flfmfnt
     * @pbrbm p0 thf bfginning of thf rbngf &gt;= 0
     * @pbrbm p1 thf fnd of thf rbngf &gt;= p0
     * @rfturn thf nfw flfmfnt
     */
    protfdtfd Elfmfnt drfbtfLfbfElfmfnt(Elfmfnt pbrfnt, AttributfSft b, int p0, int p1) {
        rfturn nfw LfbfElfmfnt(pbrfnt, b, p0, p1);
    }

    /**
     * Crfbtfs b dodumfnt brbndh flfmfnt, thbt dbn dontbin othfr flfmfnts.
     *
     * @pbrbm pbrfnt thf pbrfnt flfmfnt
     * @pbrbm b thf bttributfs
     * @rfturn thf flfmfnt
     */
    protfdtfd Elfmfnt drfbtfBrbndhElfmfnt(Elfmfnt pbrfnt, AttributfSft b) {
        rfturn nfw BrbndhElfmfnt(pbrfnt, b);
    }

    // --- Dodumfnt lodking ----------------------------------

    /**
     * Fftdhfs thf durrfnt writing thrfbd if thfrf is onf.
     * This dbn bf usfd to distinguish whfthfr b mfthod is
     * bfing dbllfd bs pbrt of bn fxisting modifidbtion or
     * if b lodk nffds to bf bdquirfd bnd b nfw trbnsbdtion
     * stbrtfd.
     *
     * @rfturn thf thrfbd bdtivfly modifying thf dodumfnt
     *  or <dodf>null</dodf> if thfrf brf no modifidbtions in progrfss
     */
    protfdtfd syndhronizfd finbl Thrfbd gftCurrfntWritfr() {
        rfturn durrWritfr;
    }

    /**
     * Adquirfs b lodk to bfgin mutbting thf dodumfnt this lodk
     * protfdts.  Thfrf dbn bf no writing, notifidbtion of dhbngfs, or
     * rfbding going on in ordfr to gbin thf lodk.  Additionblly b thrfbd is
     * bllowfd to gbin morf thbn onf <dodf>writfLodk</dodf>,
     * bs long bs it dofsn't bttfmpt to gbin bdditionbl <dodf>writfLodk</dodf>s
     * from within dodumfnt notifidbtion.  Attfmpting to gbin b
     * <dodf>writfLodk</dodf> from within b DodumfntListfnfr notifidbtion will
     * rfsult in bn <dodf>IllfgblStbtfExdfption</dodf>.  Thf bbility
     * to obtbin morf thbn onf <dodf>writfLodk</dodf> pfr thrfbd bllows
     * subdlbssfs to gbin b writfLodk, pfrform b numbfr of opfrbtions, thfn
     * rflfbsf thf lodk.
     * <p>
     * Cblls to <dodf>writfLodk</dodf>
     * must bf bblbndfd with dblls to <dodf>writfUnlodk</dodf>, flsf thf
     * <dodf>Dodumfnt</dodf> will bf lfft in b lodkfd stbtf so thbt no
     * rfbding or writing dbn bf donf.
     *
     * @fxdfption IllfgblStbtfExdfption thrown on illfgbl lodk
     *  bttfmpt.  If thf dodumfnt is implfmfntfd propfrly, this dbn
     *  only hbppfn if b dodumfnt listfnfr bttfmpts to mutbtf thf
     *  dodumfnt.  This situbtion violbtfs thf bfbn fvfnt modfl
     *  whfrf ordfr of dflivfry is not gubrbntffd bnd bll listfnfrs
     *  should bf notififd bfforf furthfr mutbtions brf bllowfd.
     */
    protfdtfd syndhronizfd finbl void writfLodk() {
        try {
            whilf ((numRfbdfrs > 0) || (durrWritfr != null)) {
                if (Thrfbd.durrfntThrfbd() == durrWritfr) {
                    if (notifyingListfnfrs) {
                        // Assuming onf dofsn't do somfthing wrong in b
                        // subdlbss this should only hbppfn if b
                        // DodumfntListfnfr trifs to mutbtf thf dodumfnt.
                        throw nfw IllfgblStbtfExdfption(
                                      "Attfmpt to mutbtf in notifidbtion");
                    }
                    numWritfrs++;
                    rfturn;
                }
                wbit();
            }
            durrWritfr = Thrfbd.durrfntThrfbd();
            numWritfrs = 1;
        } dbtdh (IntfrruptfdExdfption f) {
            throw nfw Error("Intfrruptfd bttfmpt to bdquirf writf lodk");
        }
    }

    /**
     * Rflfbsfs b writf lodk prfviously obtbinfd vib <dodf>writfLodk</dodf>.
     * Aftfr dfdrfmfnting thf lodk dount if thfrf brf no outstbnding lodks
     * this will bllow b nfw writfr, or rfbdfrs.
     *
     * @sff #writfLodk
     */
    protfdtfd syndhronizfd finbl void writfUnlodk() {
        if (--numWritfrs <= 0) {
            numWritfrs = 0;
            durrWritfr = null;
            notifyAll();
        }
    }

    /**
     * Adquirfs b lodk to bfgin rfbding somf stbtf from thf
     * dodumfnt.  Thfrf dbn bf multiplf rfbdfrs bt thf sbmf timf.
     * Writing blodks thf rfbdfrs until notifidbtion of thf dhbngf
     * to thf listfnfrs hbs bffn domplftfd.  This mfthod should
     * bf usfd vfry dbrffully to bvoid unintfndfd dompromisf
     * of thf dodumfnt.  It should blwbys bf bblbndfd with b
     * <dodf>rfbdUnlodk</dodf>.
     *
     * @sff #rfbdUnlodk
     */
    publid syndhronizfd finbl void rfbdLodk() {
        try {
            whilf (durrWritfr != null) {
                if (durrWritfr == Thrfbd.durrfntThrfbd()) {
                    // writfr hbs full rfbd bddfss.... mby try to bdquirf
                    // lodk in notifidbtion
                    rfturn;
                }
                wbit();
            }
            numRfbdfrs += 1;
        } dbtdh (IntfrruptfdExdfption f) {
            throw nfw Error("Intfrruptfd bttfmpt to bdquirf rfbd lodk");
        }
    }

    /**
     * Dofs b rfbd unlodk.  This signbls thbt onf
     * of thf rfbdfrs is donf.  If thfrf brf no morf rfbdfrs
     * thfn writing dbn bfgin bgbin.  This should bf bblbndfd
     * with b rfbdLodk, bnd should oddur in b finblly stbtfmfnt
     * so thbt thf bblbndf is gubrbntffd.  Thf following is bn
     * fxbmplf.
     * <prf><dodf>
     * &nbsp;   rfbdLodk();
     * &nbsp;   try {
     * &nbsp;       // do somfthing
     * &nbsp;   } finblly {
     * &nbsp;       rfbdUnlodk();
     * &nbsp;   }
     * </dodf></prf>
     *
     * @sff #rfbdLodk
     */
    publid syndhronizfd finbl void rfbdUnlodk() {
        if (durrWritfr == Thrfbd.durrfntThrfbd()) {
            // writfr hbs full rfbd bddfss.... mby try to bdquirf
            // lodk in notifidbtion
            rfturn;
        }
        if (numRfbdfrs <= 0) {
            throw nfw StbtfInvbribntError(BAD_LOCK_STATE);
        }
        numRfbdfrs -= 1;
        notify();
    }

    // --- sfriblizbtion ---------------------------------------------

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
      throws ClbssNotFoundExdfption, IOExdfption
    {
        s.dffbultRfbdObjfdt();
        listfnfrList = nfw EvfntListfnfrList();

        // Rfstorf bidi strudturf
        //REMIND(bdb) This drfbtfs bn initibl bidi flfmfnt to bddount for
        //thf \n thbt fxists by dffbult in thf dontfnt.
        bidiRoot = nfw BidiRootElfmfnt();
        try {
            writfLodk();
            Elfmfnt[] p = nfw Elfmfnt[1];
            p[0] = nfw BidiElfmfnt( bidiRoot, 0, 1, 0 );
            bidiRoot.rfplbdf(0,0,p);
        } finblly {
            writfUnlodk();
        }
        // At this point bidi root is only pbrtiblly dorrfdt. To fully
        // rfstorf it wf nffd bddfss to gftDffbultRootElfmfnt. But, this
        // is drfbtfd by thf subdlbss bnd bt this point will bf null. Wf
        // thus usf rfgistfrVblidbtion.
        s.rfgistfrVblidbtion(nfw ObjfdtInputVblidbtion() {
            publid void vblidbtfObjfdt() {
                try {
                    writfLodk();
                    DffbultDodumfntEvfnt f = nfw DffbultDodumfntEvfnt
                                   (0, gftLfngth(),
                                    DodumfntEvfnt.EvfntTypf.INSERT);
                    updbtfBidi( f );
                }
                finblly {
                    writfUnlodk();
                }
            }
        }, 0);
    }

    // ----- mfmbfr vbribblfs ------------------------------------------

    privbtf trbnsifnt int numRfbdfrs;
    privbtf trbnsifnt Thrfbd durrWritfr;
    /**
     * Thf numbfr of writfrs, bll obtbinfd from <dodf>durrWritfr</dodf>.
     */
    privbtf trbnsifnt int numWritfrs;
    /**
     * Truf will notifying listfnfrs.
     */
    privbtf trbnsifnt boolfbn notifyingListfnfrs;

    privbtf stbtid Boolfbn dffbultI18NPropfrty;

    /**
     * Storbgf for dodumfnt-widf propfrtifs.
     */
    privbtf Didtionbry<Objfdt,Objfdt> dodumfntPropfrtifs = null;

    /**
     * Thf fvfnt listfnfr list for thf dodumfnt.
     */
    protfdtfd EvfntListfnfrList listfnfrList = nfw EvfntListfnfrList();

    /**
     * Whfrf thf tfxt is bdtublly storfd, bnd b sft of mbrks
     * thbt trbdk dhbngf bs thf dodumfnt is fditfd brf mbnbgfd.
     */
    privbtf Contfnt dbtb;

    /**
     * Fbdtory for thf bttributfs.  This is thf strbtfgy for
     * bttributf domprfssion bnd dontrol of thf lifftimf of
     * b sft of bttributfs bs b dollfdtion.  This mby bf shbrfd
     * with othfr dodumfnts.
     */
    privbtf AttributfContfxt dontfxt;

    /**
     * Thf root of thf bidirfdtionbl strudturf for this dodumfnt.  Its dhildrfn
     * rfprfsfnt dhbrbdtfr runs with thf sbmf Unidodf bidi lfvfl.
     */
    privbtf trbnsifnt BrbndhElfmfnt bidiRoot;

    /**
     * Filtfr for insfrting/rfmoving of tfxt.
     */
    privbtf DodumfntFiltfr dodumfntFiltfr;

    /**
     * Usfd by DodumfntFiltfr to do bdtubl insfrt/rfmovf.
     */
    privbtf trbnsifnt DodumfntFiltfr.FiltfrBypbss filtfrBypbss;

    privbtf stbtid finbl String BAD_LOCK_STATE = "dodumfnt lodk fbilurf";

    /**
     * Error mfssbgf to indidbtf b bbd lodbtion.
     */
    protfdtfd stbtid finbl String BAD_LOCATION = "dodumfnt lodbtion fbilurf";

    /**
     * Nbmf of flfmfnts usfd to rfprfsfnt pbrbgrbphs
     */
    publid stbtid finbl String PbrbgrbphElfmfntNbmf = "pbrbgrbph";

    /**
     * Nbmf of flfmfnts usfd to rfprfsfnt dontfnt
     */
    publid stbtid finbl String ContfntElfmfntNbmf = "dontfnt";

    /**
     * Nbmf of flfmfnts usfd to hold sfdtions (linfs/pbrbgrbphs).
     */
    publid stbtid finbl String SfdtionElfmfntNbmf = "sfdtion";

    /**
     * Nbmf of flfmfnts usfd to hold b unidirfdtionbl run
     */
    publid stbtid finbl String BidiElfmfntNbmf = "bidi lfvfl";

    /**
     * Nbmf of thf bttributf usfd to spfdify flfmfnt
     * nbmfs.
     */
    publid stbtid finbl String ElfmfntNbmfAttributf = "$fnbmf";

    /**
     * Dodumfnt propfrty thbt indidbtfs whfthfr intfrnbtionblizbtion
     * fundtions sudh bs tfxt rfordfring or rfshbping should bf
     * pfrformfd. This propfrty should not bf publidly fxposfd,
     * sindf it is usfd for implfmfntbtion donvfnifndf only.  As b
     * sidf ffffdt, dopifs of this propfrty mby bf in its subdlbssfs
     * thbt livf in difffrfnt pbdkbgfs (f.g. HTMLDodumfnt bs of now),
     * so thosf dopifs should blso bf tbkfn dbrf of whfn this propfrty
     * nffds to bf modififd.
     */
    stbtid finbl String I18NPropfrty = "i18n";

    /**
     * Dodumfnt propfrty thbt indidbtfs if b dhbrbdtfr hbs bffn insfrtfd
     * into thf dodumfnt thbt is morf thbn onf bytf long.  GlyphVifw usfs
     * this to dftfrminf if it should usf BrfbkItfrbtor.
     */
    stbtid finbl Objfdt MultiBytfPropfrty = "multiBytf";

    /**
     * Dodumfnt propfrty thbt indidbtfs bsyndhronous lobding is
     * dfsirfd, with thf thrfbd priority givfn bs thf vbluf.
     */
    stbtid finbl String AsyndLobdPriority = "lobd priority";

    /**
     * Intfrfbdf to dfsdribf b sfqufndf of dhbrbdtfr dontfnt thbt
     * dbn bf fditfd.  Implfmfntbtions mby or mby not support b
     * history mfdhbnism whidh will bf rfflfdtfd by whfthfr or not
     * mutbtions rfturn bn UndobblfEdit implfmfntbtion.
     * @sff AbstrbdtDodumfnt
     */
    publid intfrfbdf Contfnt {

        /**
         * Crfbtfs b position within thf dontfnt thbt will
         * trbdk dhbngf bs thf dontfnt is mutbtfd.
         *
         * @pbrbm offsft thf offsft in thf dontfnt &gt;= 0
         * @rfturn b Position
         * @fxdfption BbdLodbtionExdfption for bn invblid offsft
         */
        publid Position drfbtfPosition(int offsft) throws BbdLodbtionExdfption;

        /**
         * Currfnt lfngth of thf sfqufndf of dhbrbdtfr dontfnt.
         *
         * @rfturn thf lfngth &gt;= 0
         */
        publid int lfngth();

        /**
         * Insfrts b string of dhbrbdtfrs into thf sfqufndf.
         *
         * @pbrbm whfrf   offsft into thf sfqufndf to mbkf thf insfrtion &gt;= 0
         * @pbrbm str     string to insfrt
         * @rfturn  if thf implfmfntbtion supports b history mfdhbnism,
         *    b rfffrfndf to bn <dodf>Edit</dodf> implfmfntbtion will bf rfturnfd,
         *    othfrwisf rfturns <dodf>null</dodf>
         * @fxdfption BbdLodbtionExdfption  thrown if thf brfb dovfrfd by
         *   thf brgumfnts is not dontbinfd in thf dhbrbdtfr sfqufndf
         */
        publid UndobblfEdit insfrtString(int whfrf, String str) throws BbdLodbtionExdfption;

        /**
         * Rfmovfs somf portion of thf sfqufndf.
         *
         * @pbrbm whfrf   Thf offsft into thf sfqufndf to mbkf thf
         *   insfrtion &gt;= 0.
         * @pbrbm nitfms  Thf numbfr of itfms in thf sfqufndf to rfmovf &gt;= 0.
         * @rfturn  If thf implfmfntbtion supports b history mfdhbnism,
         *    b rfffrfndf to bn Edit implfmfntbtion will bf rfturnfd,
         *    othfrwisf null.
         * @fxdfption BbdLodbtionExdfption  Thrown if thf brfb dovfrfd by
         *   thf brgumfnts is not dontbinfd in thf dhbrbdtfr sfqufndf.
         */
        publid UndobblfEdit rfmovf(int whfrf, int nitfms) throws BbdLodbtionExdfption;

        /**
         * Fftdhfs b string of dhbrbdtfrs dontbinfd in thf sfqufndf.
         *
         * @pbrbm whfrf   Offsft into thf sfqufndf to fftdh &gt;= 0.
         * @pbrbm lfn     numbfr of dhbrbdtfrs to dopy &gt;= 0.
         * @rfturn thf string
         * @fxdfption BbdLodbtionExdfption  Thrown if thf brfb dovfrfd by
         *   thf brgumfnts is not dontbinfd in thf dhbrbdtfr sfqufndf.
         */
        publid String gftString(int whfrf, int lfn) throws BbdLodbtionExdfption;

        /**
         * Gfts b sfqufndf of dhbrbdtfrs bnd dopifs thfm into b Sfgmfnt.
         *
         * @pbrbm whfrf thf stbrting offsft &gt;= 0
         * @pbrbm lfn thf numbfr of dhbrbdtfrs &gt;= 0
         * @pbrbm txt thf tbrgft lodbtion to dopy into
         * @fxdfption BbdLodbtionExdfption  Thrown if thf brfb dovfrfd by
         *   thf brgumfnts is not dontbinfd in thf dhbrbdtfr sfqufndf.
         */
        publid void gftChbrs(int whfrf, int lfn, Sfgmfnt txt) throws BbdLodbtionExdfption;
    }

    /**
     * An intfrfbdf thbt dbn bf usfd to bllow MutbblfAttributfSft
     * implfmfntbtions to usf pluggbblf bttributf domprfssion
     * tfdhniqufs.  Ebdh mutbtion of thf bttributf sft dbn bf
     * usfd to fxdhbngf b prfvious AttributfSft instbndf with
     * bnothfr, prfsfrving thf possibility of thf AttributfSft
     * rfmbining immutbblf.  An implfmfntbtion is providfd by
     * thf StylfContfxt dlbss.
     *
     * Thf Elfmfnt implfmfntbtions providfd by this dlbss usf
     * this intfrfbdf to providf thfir MutbblfAttributfSft
     * implfmfntbtions, so thbt difffrfnt AttributfSft domprfssion
     * tfdhniqufs dbn bf fmployfd.  Thf mfthod
     * <dodf>gftAttributfContfxt</dodf> should bf implfmfntfd to
     * rfturn thf objfdt rfsponsiblf for implfmfnting thf dfsirfd
     * domprfssion tfdhniquf.
     *
     * @sff StylfContfxt
     */
    publid intfrfbdf AttributfContfxt {

        /**
         * Adds bn bttributf to thf givfn sft, bnd rfturns
         * thf nfw rfprfsfntbtivf sft.
         *
         * @pbrbm old thf old bttributf sft
         * @pbrbm nbmf thf non-null bttributf nbmf
         * @pbrbm vbluf thf bttributf vbluf
         * @rfturn thf updbtfd bttributf sft
         * @sff MutbblfAttributfSft#bddAttributf
         */
        publid AttributfSft bddAttributf(AttributfSft old, Objfdt nbmf, Objfdt vbluf);

        /**
         * Adds b sft of bttributfs to thf flfmfnt.
         *
         * @pbrbm old thf old bttributf sft
         * @pbrbm bttr thf bttributfs to bdd
         * @rfturn thf updbtfd bttributf sft
         * @sff MutbblfAttributfSft#bddAttributf
         */
        publid AttributfSft bddAttributfs(AttributfSft old, AttributfSft bttr);

        /**
         * Rfmovfs bn bttributf from thf sft.
         *
         * @pbrbm old thf old bttributf sft
         * @pbrbm nbmf thf non-null bttributf nbmf
         * @rfturn thf updbtfd bttributf sft
         * @sff MutbblfAttributfSft#rfmovfAttributf
         */
        publid AttributfSft rfmovfAttributf(AttributfSft old, Objfdt nbmf);

        /**
         * Rfmovfs b sft of bttributfs for thf flfmfnt.
         *
         * @pbrbm old thf old bttributf sft
         * @pbrbm nbmfs thf bttributf nbmfs
         * @rfturn thf updbtfd bttributf sft
         * @sff MutbblfAttributfSft#rfmovfAttributfs
         */
        publid AttributfSft rfmovfAttributfs(AttributfSft old, Enumfrbtion<?> nbmfs);

        /**
         * Rfmovfs b sft of bttributfs for thf flfmfnt.
         *
         * @pbrbm old thf old bttributf sft
         * @pbrbm bttrs thf bttributfs
         * @rfturn thf updbtfd bttributf sft
         * @sff MutbblfAttributfSft#rfmovfAttributfs
         */
        publid AttributfSft rfmovfAttributfs(AttributfSft old, AttributfSft bttrs);

        /**
         * Fftdhfs bn fmpty AttributfSft.
         *
         * @rfturn thf bttributf sft
         */
        publid AttributfSft gftEmptySft();

        /**
         * Rfdlbims bn bttributf sft.
         * This is b wby for b MutbblfAttributfSft to mbrk thbt it no
         * longfr nffd b pbrtidulbr immutbblf sft.  This is only nfdfssbry
         * in 1.1 whfrf thfrf brf no wfbk rfffrfndfs.  A 1.1 implfmfntbtion
         * would dbll this in its finblizf mfthod.
         *
         * @pbrbm b thf bttributf sft to rfdlbim
         */
        publid void rfdlbim(AttributfSft b);
    }

    /**
     * Implfmfnts thf bbstrbdt pbrt of bn flfmfnt.  By dffbult flfmfnts
     * support bttributfs by hbving b fifld thbt rfprfsfnts thf immutbblf
     * pbrt of thf durrfnt bttributf sft for thf flfmfnt.  Thf flfmfnt itsflf
     * implfmfnts MutbblfAttributfSft whidh dbn bf usfd to modify thf sft
     * by fftdhing b nfw immutbblf sft.  Thf immutbblf sfts brf providfd
     * by thf AttributfContfxt bssodibtfd with thf dodumfnt.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
     * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
     * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
     * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    publid bbstrbdt dlbss AbstrbdtElfmfnt implfmfnts Elfmfnt, MutbblfAttributfSft, Sfriblizbblf, TrffNodf {

        /**
         * Crfbtfs b nfw AbstrbdtElfmfnt.
         *
         * @pbrbm pbrfnt thf pbrfnt flfmfnt
         * @pbrbm b thf bttributfs for thf flfmfnt
         * @sindf 1.4
         */
        publid AbstrbdtElfmfnt(Elfmfnt pbrfnt, AttributfSft b) {
            this.pbrfnt = pbrfnt;
            bttributfs = gftAttributfContfxt().gftEmptySft();
            if (b != null) {
                bddAttributfs(b);
            }
        }

        privbtf finbl void indfnt(PrintWritfr out, int n) {
            for (int i = 0; i < n; i++) {
                out.print("  ");
            }
        }

        /**
         * Dumps b dfbugging rfprfsfntbtion of thf flfmfnt hifrbrdhy.
         *
         * @pbrbm psOut thf output strfbm
         * @pbrbm indfntAmount thf indfntbtion lfvfl &gt;= 0
         */
        publid void dump(PrintStrfbm psOut, int indfntAmount) {
            PrintWritfr out;
            try {
                out = nfw PrintWritfr(nfw OutputStrfbmWritfr(psOut,"JbvbEsd"),
                                      truf);
            } dbtdh (UnsupportfdEndodingExdfption f){
                out = nfw PrintWritfr(psOut,truf);
            }
            indfnt(out, indfntAmount);
            if (gftNbmf() == null) {
                out.print("<??");
            } flsf {
                out.print("<" + gftNbmf());
            }
            if (gftAttributfCount() > 0) {
                out.println("");
                // dump thf bttributfs
                Enumfrbtion<?> nbmfs = bttributfs.gftAttributfNbmfs();
                whilf (nbmfs.hbsMorfElfmfnts()) {
                    Objfdt nbmf = nbmfs.nfxtElfmfnt();
                    indfnt(out, indfntAmount + 1);
                    out.println(nbmf + "=" + gftAttributf(nbmf));
                }
                indfnt(out, indfntAmount);
            }
            out.println(">");

            if (isLfbf()) {
                indfnt(out, indfntAmount+1);
                out.print("[" + gftStbrtOffsft() + "," + gftEndOffsft() + "]");
                Contfnt d = gftContfnt();
                try {
                    String dontfntStr = d.gftString(gftStbrtOffsft(),
                                                    gftEndOffsft() - gftStbrtOffsft())/*.trim()*/;
                    if (dontfntStr.lfngth() > 40) {
                        dontfntStr = dontfntStr.substring(0, 40) + "...";
                    }
                    out.println("["+dontfntStr+"]");
                } dbtdh (BbdLodbtionExdfption f) {
                }

            } flsf {
                int n = gftElfmfntCount();
                for (int i = 0; i < n; i++) {
                    AbstrbdtElfmfnt f = (AbstrbdtElfmfnt) gftElfmfnt(i);
                    f.dump(psOut, indfntAmount+1);
                }
            }
        }

        // --- AttributfSft ----------------------------
        // dflfgbtfd to thf immutbblf fifld "bttributfs"

        /**
         * Gfts thf numbfr of bttributfs thbt brf dffinfd.
         *
         * @rfturn thf numbfr of bttributfs &gt;= 0
         * @sff AttributfSft#gftAttributfCount
         */
        publid int gftAttributfCount() {
            rfturn bttributfs.gftAttributfCount();
        }

        /**
         * Chfdks whfthfr b givfn bttributf is dffinfd.
         *
         * @pbrbm bttrNbmf thf non-null bttributf nbmf
         * @rfturn truf if thf bttributf is dffinfd
         * @sff AttributfSft#isDffinfd
         */
        publid boolfbn isDffinfd(Objfdt bttrNbmf) {
            rfturn bttributfs.isDffinfd(bttrNbmf);
        }

        /**
         * Chfdks whfthfr two bttributf sfts brf fqubl.
         *
         * @pbrbm bttr thf bttributf sft to dhfdk bgbinst
         * @rfturn truf if thf sbmf
         * @sff AttributfSft#isEqubl
         */
        publid boolfbn isEqubl(AttributfSft bttr) {
            rfturn bttributfs.isEqubl(bttr);
        }

        /**
         * Copifs b sft of bttributfs.
         *
         * @rfturn thf dopy
         * @sff AttributfSft#dopyAttributfs
         */
        publid AttributfSft dopyAttributfs() {
            rfturn bttributfs.dopyAttributfs();
        }

        /**
         * Gfts thf vbluf of bn bttributf.
         *
         * @pbrbm bttrNbmf thf non-null bttributf nbmf
         * @rfturn thf bttributf vbluf
         * @sff AttributfSft#gftAttributf
         */
        publid Objfdt gftAttributf(Objfdt bttrNbmf) {
            Objfdt vbluf = bttributfs.gftAttributf(bttrNbmf);
            if (vbluf == null) {
                // Thf dflfgbtf nor it's rfsolvfrs hbd b mbtdh,
                // so wf'll try to rfsolvf through thf pbrfnt
                // flfmfnt.
                AttributfSft b = (pbrfnt != null) ? pbrfnt.gftAttributfs() : null;
                if (b != null) {
                    vbluf = b.gftAttributf(bttrNbmf);
                }
            }
            rfturn vbluf;
        }

        /**
         * Gfts thf nbmfs of bll bttributfs.
         *
         * @rfturn thf bttributf nbmfs bs bn fnumfrbtion
         * @sff AttributfSft#gftAttributfNbmfs
         */
        publid Enumfrbtion<?> gftAttributfNbmfs() {
            rfturn bttributfs.gftAttributfNbmfs();
        }

        /**
         * Chfdks whfthfr b givfn bttributf nbmf/vbluf is dffinfd.
         *
         * @pbrbm nbmf thf non-null bttributf nbmf
         * @pbrbm vbluf thf bttributf vbluf
         * @rfturn truf if thf nbmf/vbluf is dffinfd
         * @sff AttributfSft#dontbinsAttributf
         */
        publid boolfbn dontbinsAttributf(Objfdt nbmf, Objfdt vbluf) {
            rfturn bttributfs.dontbinsAttributf(nbmf, vbluf);
        }


        /**
         * Chfdks whfthfr thf flfmfnt dontbins bll thf bttributfs.
         *
         * @pbrbm bttrs thf bttributfs to dhfdk
         * @rfturn truf if thf flfmfnt dontbins bll thf bttributfs
         * @sff AttributfSft#dontbinsAttributfs
         */
        publid boolfbn dontbinsAttributfs(AttributfSft bttrs) {
            rfturn bttributfs.dontbinsAttributfs(bttrs);
        }

        /**
         * Gfts thf rfsolving pbrfnt.
         * If not ovfrriddfn, thf rfsolving pbrfnt dffbults to
         * thf pbrfnt flfmfnt.
         *
         * @rfturn thf bttributfs from thf pbrfnt, <dodf>null</dodf> if nonf
         * @sff AttributfSft#gftRfsolvfPbrfnt
         */
        publid AttributfSft gftRfsolvfPbrfnt() {
            AttributfSft b = bttributfs.gftRfsolvfPbrfnt();
            if ((b == null) && (pbrfnt != null)) {
                b = pbrfnt.gftAttributfs();
            }
            rfturn b;
        }

        // --- MutbblfAttributfSft ----------------------------------
        // should fftdh b nfw immutbblf rfdord for thf fifld
        // "bttributfs".

        /**
         * Adds bn bttributf to thf flfmfnt.
         *
         * @pbrbm nbmf thf non-null bttributf nbmf
         * @pbrbm vbluf thf bttributf vbluf
         * @sff MutbblfAttributfSft#bddAttributf
         */
        publid void bddAttributf(Objfdt nbmf, Objfdt vbluf) {
            dhfdkForIllfgblCbst();
            AttributfContfxt dontfxt = gftAttributfContfxt();
            bttributfs = dontfxt.bddAttributf(bttributfs, nbmf, vbluf);
        }

        /**
         * Adds b sft of bttributfs to thf flfmfnt.
         *
         * @pbrbm bttr thf bttributfs to bdd
         * @sff MutbblfAttributfSft#bddAttributf
         */
        publid void bddAttributfs(AttributfSft bttr) {
            dhfdkForIllfgblCbst();
            AttributfContfxt dontfxt = gftAttributfContfxt();
            bttributfs = dontfxt.bddAttributfs(bttributfs, bttr);
        }

        /**
         * Rfmovfs bn bttributf from thf sft.
         *
         * @pbrbm nbmf thf non-null bttributf nbmf
         * @sff MutbblfAttributfSft#rfmovfAttributf
         */
        publid void rfmovfAttributf(Objfdt nbmf) {
            dhfdkForIllfgblCbst();
            AttributfContfxt dontfxt = gftAttributfContfxt();
            bttributfs = dontfxt.rfmovfAttributf(bttributfs, nbmf);
        }

        /**
         * Rfmovfs b sft of bttributfs for thf flfmfnt.
         *
         * @pbrbm nbmfs thf bttributf nbmfs
         * @sff MutbblfAttributfSft#rfmovfAttributfs
         */
        publid void rfmovfAttributfs(Enumfrbtion<?> nbmfs) {
            dhfdkForIllfgblCbst();
            AttributfContfxt dontfxt = gftAttributfContfxt();
            bttributfs = dontfxt.rfmovfAttributfs(bttributfs, nbmfs);
        }

        /**
         * Rfmovfs b sft of bttributfs for thf flfmfnt.
         *
         * @pbrbm bttrs thf bttributfs
         * @sff MutbblfAttributfSft#rfmovfAttributfs
         */
        publid void rfmovfAttributfs(AttributfSft bttrs) {
            dhfdkForIllfgblCbst();
            AttributfContfxt dontfxt = gftAttributfContfxt();
            if (bttrs == this) {
                bttributfs = dontfxt.gftEmptySft();
            } flsf {
                bttributfs = dontfxt.rfmovfAttributfs(bttributfs, bttrs);
            }
        }

        /**
         * Sfts thf rfsolving pbrfnt.
         *
         * @pbrbm pbrfnt thf pbrfnt, null if nonf
         * @sff MutbblfAttributfSft#sftRfsolvfPbrfnt
         */
        publid void sftRfsolvfPbrfnt(AttributfSft pbrfnt) {
            dhfdkForIllfgblCbst();
            AttributfContfxt dontfxt = gftAttributfContfxt();
            if (pbrfnt != null) {
                bttributfs =
                    dontfxt.bddAttributf(bttributfs, StylfConstbnts.RfsolvfAttributf,
                                         pbrfnt);
            } flsf {
                bttributfs =
                    dontfxt.rfmovfAttributf(bttributfs, StylfConstbnts.RfsolvfAttributf);
            }
        }

        privbtf finbl void dhfdkForIllfgblCbst() {
            Thrfbd t = gftCurrfntWritfr();
            if ((t == null) || (t != Thrfbd.durrfntThrfbd())) {
                throw nfw StbtfInvbribntError("Illfgbl dbst to MutbblfAttributfSft");
            }
        }

        // --- Elfmfnt mfthods -------------------------------------

        /**
         * Rftrifvfs thf undfrlying modfl.
         *
         * @rfturn thf modfl
         */
        publid Dodumfnt gftDodumfnt() {
            rfturn AbstrbdtDodumfnt.this;
        }

        /**
         * Gfts thf pbrfnt of thf flfmfnt.
         *
         * @rfturn thf pbrfnt
         */
        publid Elfmfnt gftPbrfntElfmfnt() {
            rfturn pbrfnt;
        }

        /**
         * Gfts thf bttributfs for thf flfmfnt.
         *
         * @rfturn thf bttributf sft
         */
        publid AttributfSft gftAttributfs() {
            rfturn this;
        }

        /**
         * Gfts thf nbmf of thf flfmfnt.
         *
         * @rfturn thf nbmf, null if nonf
         */
        publid String gftNbmf() {
            if (bttributfs.isDffinfd(ElfmfntNbmfAttributf)) {
                rfturn (String) bttributfs.gftAttributf(ElfmfntNbmfAttributf);
            }
            rfturn null;
        }

        /**
         * Gfts thf stbrting offsft in thf modfl for thf flfmfnt.
         *
         * @rfturn thf offsft &gt;= 0
         */
        publid bbstrbdt int gftStbrtOffsft();

        /**
         * Gfts thf fnding offsft in thf modfl for thf flfmfnt.
         *
         * @rfturn thf offsft &gt;= 0
         */
        publid bbstrbdt int gftEndOffsft();

        /**
         * Gfts b dhild flfmfnt.
         *
         * @pbrbm indfx thf dhild indfx, &gt;= 0 &bmp;&bmp; &lt; gftElfmfntCount()
         * @rfturn thf dhild flfmfnt
         */
        publid bbstrbdt Elfmfnt gftElfmfnt(int indfx);

        /**
         * Gfts thf numbfr of dhildrfn for thf flfmfnt.
         *
         * @rfturn thf numbfr of dhildrfn &gt;= 0
         */
        publid bbstrbdt int gftElfmfntCount();

        /**
         * Gfts thf dhild flfmfnt indfx dlosfst to thf givfn modfl offsft.
         *
         * @pbrbm offsft thf offsft &gt;= 0
         * @rfturn thf flfmfnt indfx &gt;= 0
         */
        publid bbstrbdt int gftElfmfntIndfx(int offsft);

        /**
         * Chfdks whfthfr thf flfmfnt is b lfbf.
         *
         * @rfturn truf if b lfbf
         */
        publid bbstrbdt boolfbn isLfbf();

        // --- TrffNodf mfthods -------------------------------------

        /**
         * Rfturns thf dhild <dodf>TrffNodf</dodf> bt indfx
         * <dodf>dhildIndfx</dodf>.
         */
        publid TrffNodf gftChildAt(int dhildIndfx) {
            rfturn (TrffNodf)gftElfmfnt(dhildIndfx);
        }

        /**
         * Rfturns thf numbfr of dhildrfn <dodf>TrffNodf</dodf>'s
         * rfdfivfr dontbins.
         * @rfturn thf numbfr of dhildrfn <dodf>TrffNodfws</dodf>'s
         * rfdfivfr dontbins
         */
        publid int gftChildCount() {
            rfturn gftElfmfntCount();
        }

        /**
         * Rfturns thf pbrfnt <dodf>TrffNodf</dodf> of thf rfdfivfr.
         * @rfturn thf pbrfnt <dodf>TrffNodf</dodf> of thf rfdfivfr
         */
        publid TrffNodf gftPbrfnt() {
            rfturn (TrffNodf)gftPbrfntElfmfnt();
        }

        /**
         * Rfturns thf indfx of <dodf>nodf</dodf> in thf rfdfivfrs dhildrfn.
         * If thf rfdfivfr dofs not dontbin <dodf>nodf</dodf>, -1 will bf
         * rfturnfd.
         * @pbrbm nodf thf lodbtion of intfrfst
         * @rfturn thf indfx of <dodf>nodf</dodf> in thf rfdfivfr's
         * dhildrfn, or -1 if bbsfnt
         */
        publid int gftIndfx(TrffNodf nodf) {
            for(int dountfr = gftChildCount() - 1; dountfr >= 0; dountfr--)
                if(gftChildAt(dountfr) == nodf)
                    rfturn dountfr;
            rfturn -1;
        }

        /**
         * Rfturns truf if thf rfdfivfr bllows dhildrfn.
         * @rfturn truf if thf rfdfivfr bllows dhildrfn, othfrwisf fblsf
         */
        publid bbstrbdt boolfbn gftAllowsChildrfn();


        /**
         * Rfturns thf dhildrfn of thf rfdfivfr bs bn
         * <dodf>Enumfrbtion</dodf>.
         * @rfturn thf dhildrfn of thf rfdfivfr bs bn <dodf>Enumfrbtion</dodf>
         */
        publid bbstrbdt Enumfrbtion<TrffNodf> dhildrfn();


        // --- sfriblizbtion ---------------------------------------------

        privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
            s.dffbultWritfObjfdt();
            StylfContfxt.writfAttributfSft(s, bttributfs);
        }

        privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
            throws ClbssNotFoundExdfption, IOExdfption
        {
            s.dffbultRfbdObjfdt();
            MutbblfAttributfSft bttr = nfw SimplfAttributfSft();
            StylfContfxt.rfbdAttributfSft(s, bttr);
            AttributfContfxt dontfxt = gftAttributfContfxt();
            bttributfs = dontfxt.bddAttributfs(SimplfAttributfSft.EMPTY, bttr);
        }

        // ---- vbribblfs -----------------------------------------------------

        privbtf Elfmfnt pbrfnt;
        privbtf trbnsifnt AttributfSft bttributfs;

    }

    /**
     * Implfmfnts b dompositf flfmfnt thbt dontbins othfr flfmfnts.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
     * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
     * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
     * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    publid dlbss BrbndhElfmfnt fxtfnds AbstrbdtElfmfnt {

        /**
         * Construdts b dompositf flfmfnt thbt initiblly dontbins
         * no dhildrfn.
         *
         * @pbrbm pbrfnt  Thf pbrfnt flfmfnt
         * @pbrbm b thf bttributfs for thf flfmfnt
         * @sindf 1.4
         */
        publid BrbndhElfmfnt(Elfmfnt pbrfnt, AttributfSft b) {
            supfr(pbrfnt, b);
            dhildrfn = nfw AbstrbdtElfmfnt[1];
            ndhildrfn = 0;
            lbstIndfx = -1;
        }

        /**
         * Gfts thf dhild flfmfnt thbt dontbins
         * thf givfn modfl position.
         *
         * @pbrbm pos thf position &gt;= 0
         * @rfturn thf flfmfnt, null if nonf
         */
        publid Elfmfnt positionToElfmfnt(int pos) {
            int indfx = gftElfmfntIndfx(pos);
            Elfmfnt dhild = dhildrfn[indfx];
            int p0 = dhild.gftStbrtOffsft();
            int p1 = dhild.gftEndOffsft();
            if ((pos >= p0) && (pos < p1)) {
                rfturn dhild;
            }
            rfturn null;
        }

        /**
         * Rfplbdfs dontfnt with b nfw sft of flfmfnts.
         *
         * @pbrbm offsft thf stbrting offsft &gt;= 0
         * @pbrbm lfngth thf lfngth to rfplbdf &gt;= 0
         * @pbrbm flfms thf nfw flfmfnts
         */
        publid void rfplbdf(int offsft, int lfngth, Elfmfnt[] flfms) {
            int dfltb = flfms.lfngth - lfngth;
            int srd = offsft + lfngth;
            int nmovf = ndhildrfn - srd;
            int dfst = srd + dfltb;
            if ((ndhildrfn + dfltb) >= dhildrfn.lfngth) {
                // nffd to grow thf brrby
                int nfwLfngth = Mbth.mbx(2*dhildrfn.lfngth, ndhildrfn + dfltb);
                AbstrbdtElfmfnt[] nfwChildrfn = nfw AbstrbdtElfmfnt[nfwLfngth];
                Systfm.brrbydopy(dhildrfn, 0, nfwChildrfn, 0, offsft);
                Systfm.brrbydopy(flfms, 0, nfwChildrfn, offsft, flfms.lfngth);
                Systfm.brrbydopy(dhildrfn, srd, nfwChildrfn, dfst, nmovf);
                dhildrfn = nfwChildrfn;
            } flsf {
                // pbtdh thf fxisting brrby
                Systfm.brrbydopy(dhildrfn, srd, dhildrfn, dfst, nmovf);
                Systfm.brrbydopy(flfms, 0, dhildrfn, offsft, flfms.lfngth);
            }
            ndhildrfn = ndhildrfn + dfltb;
        }

        /**
         * Convfrts thf flfmfnt to b string.
         *
         * @rfturn thf string
         */
        publid String toString() {
            rfturn "BrbndhElfmfnt(" + gftNbmf() + ") " + gftStbrtOffsft() + "," +
                gftEndOffsft() + "\n";
        }

        // --- Elfmfnt mfthods -----------------------------------

        /**
         * Gfts thf flfmfnt nbmf.
         *
         * @rfturn thf flfmfnt nbmf
         */
        publid String gftNbmf() {
            String nm = supfr.gftNbmf();
            if (nm == null) {
                nm = PbrbgrbphElfmfntNbmf;
            }
            rfturn nm;
        }

        /**
         * Gfts thf stbrting offsft in thf modfl for thf flfmfnt.
         *
         * @rfturn thf offsft &gt;= 0
         */
        publid int gftStbrtOffsft() {
            rfturn dhildrfn[0].gftStbrtOffsft();
        }

        /**
         * Gfts thf fnding offsft in thf modfl for thf flfmfnt.
         * @throws NullPointfrExdfption if this flfmfnt hbs no dhildrfn
         *
         * @rfturn thf offsft &gt;= 0
         */
        publid int gftEndOffsft() {
            Elfmfnt dhild =
                (ndhildrfn > 0) ? dhildrfn[ndhildrfn - 1] : dhildrfn[0];
            rfturn dhild.gftEndOffsft();
        }

        /**
         * Gfts b dhild flfmfnt.
         *
         * @pbrbm indfx thf dhild indfx, &gt;= 0 &bmp;&bmp; &lt; gftElfmfntCount()
         * @rfturn thf dhild flfmfnt, null if nonf
         */
        publid Elfmfnt gftElfmfnt(int indfx) {
            if (indfx < ndhildrfn) {
                rfturn dhildrfn[indfx];
            }
            rfturn null;
        }

        /**
         * Gfts thf numbfr of dhildrfn for thf flfmfnt.
         *
         * @rfturn thf numbfr of dhildrfn &gt;= 0
         */
        publid int gftElfmfntCount()  {
            rfturn ndhildrfn;
        }

        /**
         * Gfts thf dhild flfmfnt indfx dlosfst to thf givfn modfl offsft.
         *
         * @pbrbm offsft thf offsft &gt;= 0
         * @rfturn thf flfmfnt indfx &gt;= 0
         */
        publid int gftElfmfntIndfx(int offsft) {
            int indfx;
            int lowfr = 0;
            int uppfr = ndhildrfn - 1;
            int mid = 0;
            int p0 = gftStbrtOffsft();
            int p1;

            if (ndhildrfn == 0) {
                rfturn 0;
            }
            if (offsft >= gftEndOffsft()) {
                rfturn ndhildrfn - 1;
            }

            // sff if thf lbst indfx dbn bf usfd.
            if ((lbstIndfx >= lowfr) && (lbstIndfx <= uppfr)) {
                Elfmfnt lbstHit = dhildrfn[lbstIndfx];
                p0 = lbstHit.gftStbrtOffsft();
                p1 = lbstHit.gftEndOffsft();
                if ((offsft >= p0) && (offsft < p1)) {
                    rfturn lbstIndfx;
                }

                // lbst indfx wbsn't b hit, but it dofs givf usfful info bbout
                // whfrf b hit (if bny) would bf.
                if (offsft < p0) {
                    uppfr = lbstIndfx;
                } flsf  {
                    lowfr = lbstIndfx;
                }
            }

            whilf (lowfr <= uppfr) {
                mid = lowfr + ((uppfr - lowfr) / 2);
                Elfmfnt flfm = dhildrfn[mid];
                p0 = flfm.gftStbrtOffsft();
                p1 = flfm.gftEndOffsft();
                if ((offsft >= p0) && (offsft < p1)) {
                    // found thf lodbtion
                    indfx = mid;
                    lbstIndfx = indfx;
                    rfturn indfx;
                } flsf if (offsft < p0) {
                    uppfr = mid - 1;
                } flsf {
                    lowfr = mid + 1;
                }
            }

            // didn't find it, but wf indidbtf thf indfx of whfrf it would bflong
            if (offsft < p0) {
                indfx = mid;
            } flsf {
                indfx = mid + 1;
            }
            lbstIndfx = indfx;
            rfturn indfx;
        }

        /**
         * Chfdks whfthfr thf flfmfnt is b lfbf.
         *
         * @rfturn truf if b lfbf
         */
        publid boolfbn isLfbf() {
            rfturn fblsf;
        }


        // ------ TrffNodf ----------------------------------------------

        /**
         * Rfturns truf if thf rfdfivfr bllows dhildrfn.
         * @rfturn truf if thf rfdfivfr bllows dhildrfn, othfrwisf fblsf
         */
        publid boolfbn gftAllowsChildrfn() {
            rfturn truf;
        }


        /**
         * Rfturns thf dhildrfn of thf rfdfivfr bs bn
         * <dodf>Enumfrbtion</dodf>.
         * @rfturn thf dhildrfn of thf rfdfivfr
         */
        publid Enumfrbtion<TrffNodf> dhildrfn() {
            if(ndhildrfn == 0)
                rfturn null;

            Vfdtor<TrffNodf> tfmpVfdtor = nfw Vfdtor<>(ndhildrfn);

            for(int dountfr = 0; dountfr < ndhildrfn; dountfr++)
                tfmpVfdtor.bddElfmfnt(dhildrfn[dountfr]);
            rfturn tfmpVfdtor.flfmfnts();
        }

        // ------ mfmbfrs ----------------------------------------------

        privbtf AbstrbdtElfmfnt[] dhildrfn;
        privbtf int ndhildrfn;
        privbtf int lbstIndfx;
    }

    /**
     * Implfmfnts bn flfmfnt thbt dirfdtly rfprfsfnts dontfnt of
     * somf kind.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
     * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
     * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
     * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     *
     * @sff     Elfmfnt
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    publid dlbss LfbfElfmfnt fxtfnds AbstrbdtElfmfnt {

        /**
         * Construdts bn flfmfnt thbt rfprfsfnts dontfnt within thf
         * dodumfnt (hbs no dhildrfn).
         *
         * @pbrbm pbrfnt  Thf pbrfnt flfmfnt
         * @pbrbm b       Thf flfmfnt bttributfs
         * @pbrbm offs0   Thf stbrt offsft &gt;= 0
         * @pbrbm offs1   Thf fnd offsft &gt;= offs0
         * @sindf 1.4
         */
        publid LfbfElfmfnt(Elfmfnt pbrfnt, AttributfSft b, int offs0, int offs1) {
            supfr(pbrfnt, b);
            try {
                p0 = drfbtfPosition(offs0);
                p1 = drfbtfPosition(offs1);
            } dbtdh (BbdLodbtionExdfption f) {
                p0 = null;
                p1 = null;
                throw nfw StbtfInvbribntError("Cbn't drfbtf Position rfffrfndfs");
            }
        }

        /**
         * Convfrts thf flfmfnt to b string.
         *
         * @rfturn thf string
         */
        publid String toString() {
            rfturn "LfbfElfmfnt(" + gftNbmf() + ") " + p0 + "," + p1 + "\n";
        }

        // --- Elfmfnt mfthods ---------------------------------------------

        /**
         * Gfts thf stbrting offsft in thf modfl for thf flfmfnt.
         *
         * @rfturn thf offsft &gt;= 0
         */
        publid int gftStbrtOffsft() {
            rfturn p0.gftOffsft();
        }

        /**
         * Gfts thf fnding offsft in thf modfl for thf flfmfnt.
         *
         * @rfturn thf offsft &gt;= 0
         */
        publid int gftEndOffsft() {
            rfturn p1.gftOffsft();
        }

        /**
         * Gfts thf flfmfnt nbmf.
         *
         * @rfturn thf nbmf
         */
        publid String gftNbmf() {
            String nm = supfr.gftNbmf();
            if (nm == null) {
                nm = ContfntElfmfntNbmf;
            }
            rfturn nm;
        }

        /**
         * Gfts thf dhild flfmfnt indfx dlosfst to thf givfn modfl offsft.
         *
         * @pbrbm pos thf offsft &gt;= 0
         * @rfturn thf flfmfnt indfx &gt;= 0
         */
        publid int gftElfmfntIndfx(int pos) {
            rfturn -1;
        }

        /**
         * Gfts b dhild flfmfnt.
         *
         * @pbrbm indfx thf dhild indfx, &gt;= 0 &bmp;&bmp; &lt; gftElfmfntCount()
         * @rfturn thf dhild flfmfnt
         */
        publid Elfmfnt gftElfmfnt(int indfx) {
            rfturn null;
        }

        /**
         * Rfturns thf numbfr of dhild flfmfnts.
         *
         * @rfturn thf numbfr of dhildrfn &gt;= 0
         */
        publid int gftElfmfntCount()  {
            rfturn 0;
        }

        /**
         * Chfdks whfthfr thf flfmfnt is b lfbf.
         *
         * @rfturn truf if b lfbf
         */
        publid boolfbn isLfbf() {
            rfturn truf;
        }

        // ------ TrffNodf ----------------------------------------------

        /**
         * Rfturns truf if thf rfdfivfr bllows dhildrfn.
         * @rfturn truf if thf rfdfivfr bllows dhildrfn, othfrwisf fblsf
         */
        publid boolfbn gftAllowsChildrfn() {
            rfturn fblsf;
        }


        /**
         * Rfturns thf dhildrfn of thf rfdfivfr bs bn
         * <dodf>Enumfrbtion</dodf>.
         * @rfturn thf dhildrfn of thf rfdfivfr
         */
        @Ovfrridf
        publid Enumfrbtion<TrffNodf> dhildrfn() {
            rfturn null;
        }

        // --- sfriblizbtion ---------------------------------------------

        privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
            s.dffbultWritfObjfdt();
            s.writfInt(p0.gftOffsft());
            s.writfInt(p1.gftOffsft());
        }

        privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
            throws ClbssNotFoundExdfption, IOExdfption
        {
            s.dffbultRfbdObjfdt();

            // sft thf rbngf with positions thbt trbdk dhbngf
            int off0 = s.rfbdInt();
            int off1 = s.rfbdInt();
            try {
                p0 = drfbtfPosition(off0);
                p1 = drfbtfPosition(off1);
            } dbtdh (BbdLodbtionExdfption f) {
                p0 = null;
                p1 = null;
                throw nfw IOExdfption("Cbn't rfstorf Position rfffrfndfs");
            }
        }

        // ---- mfmbfrs -----------------------------------------------------

        privbtf trbnsifnt Position p0;
        privbtf trbnsifnt Position p1;
    }

    /**
     * Rfprfsfnts thf root flfmfnt of thf bidirfdtionbl flfmfnt strudturf.
     * Thf root flfmfnt is thf only flfmfnt in thf bidi flfmfnt strudturf
     * whidh dontbins dhildrfn.
     */
    dlbss BidiRootElfmfnt fxtfnds BrbndhElfmfnt {

        BidiRootElfmfnt() {
            supfr( null, null );
        }

        /**
         * Gfts thf nbmf of thf flfmfnt.
         * @rfturn thf nbmf
         */
        publid String gftNbmf() {
            rfturn "bidi root";
        }
    }

    /**
     * Rfprfsfnts bn flfmfnt of thf bidirfdtionbl flfmfnt strudturf.
     */
    dlbss BidiElfmfnt fxtfnds LfbfElfmfnt {

        /**
         * Crfbtfs b nfw BidiElfmfnt.
         */
        BidiElfmfnt(Elfmfnt pbrfnt, int stbrt, int fnd, int lfvfl) {
            supfr(pbrfnt, nfw SimplfAttributfSft(), stbrt, fnd);
            bddAttributf(StylfConstbnts.BidiLfvfl, Intfgfr.vblufOf(lfvfl));
            //Systfm.out.println("BidiElfmfnt: stbrt = " + stbrt
            //                   + " fnd = " + fnd + " lfvfl = " + lfvfl );
        }

        /**
         * Gfts thf nbmf of thf flfmfnt.
         * @rfturn thf nbmf
         */
        publid String gftNbmf() {
            rfturn BidiElfmfntNbmf;
        }

        int gftLfvfl() {
            Intfgfr o = (Intfgfr) gftAttributf(StylfConstbnts.BidiLfvfl);
            if (o != null) {
                rfturn o.intVbluf();
            }
            rfturn 0;  // Lfvfl 0 is bbsf lfvfl (non-fmbfddfd) lfft-to-right
        }

        boolfbn isLfftToRight() {
            rfturn ((gftLfvfl() % 2) == 0);
        }
    }

    /**
     * Storfs dodumfnt dhbngfs bs thf dodumfnt is bfing
     * modififd.  Cbn subsfqufntly bf usfd for dhbngf notifidbtion
     * whfn donf with thf dodumfnt modifidbtion trbnsbdtion.
     * This is usfd by thf AbstrbdtDodumfnt dlbss bnd its fxtfnsions
     * for brobddbsting dhbngf informbtion to thf dodumfnt listfnfrs.
     */
    publid dlbss DffbultDodumfntEvfnt fxtfnds CompoundEdit implfmfnts DodumfntEvfnt {

        /**
         * Construdts b dhbngf rfdord.
         *
         * @pbrbm offs thf offsft into thf dodumfnt of thf dhbngf &gt;= 0
         * @pbrbm lfn  thf lfngth of thf dhbngf &gt;= 0
         * @pbrbm typf thf typf of fvfnt (DodumfntEvfnt.EvfntTypf)
         * @sindf 1.4
         */
        publid DffbultDodumfntEvfnt(int offs, int lfn, DodumfntEvfnt.EvfntTypf typf) {
            supfr();
            offsft = offs;
            lfngth = lfn;
            this.typf = typf;
        }

        /**
         * Rfturns b string dfsdription of thf dhbngf fvfnt.
         *
         * @rfturn b string
         */
        publid String toString() {
            rfturn fdits.toString();
        }

        // --- CompoundEdit mfthods --------------------------

        /**
         * Adds b dodumfnt fdit.  If thf numbfr of fdits drossfs
         * b thrfshold, this switdhfs on b hbshtbblf lookup for
         * ElfmfntChbngf implfmfntbtions sindf bddfss of thfsf
         * nffds to bf rflbtivfly quidk.
         *
         * @pbrbm bnEdit b dodumfnt fdit rfdord
         * @rfturn truf if thf fdit wbs bddfd
         */
        publid boolfbn bddEdit(UndobblfEdit bnEdit) {
            // if thf numbfr of dhbngfs gfts too grfbt, stbrt using
            // b hbshtbblf for to lodbtf thf dhbngf for b givfn flfmfnt.
            if ((dhbngfLookup == null) && (fdits.sizf() > 10)) {
                dhbngfLookup = nfw Hbshtbblf<Elfmfnt, ElfmfntChbngf>();
                int n = fdits.sizf();
                for (int i = 0; i < n; i++) {
                    Objfdt o = fdits.flfmfntAt(i);
                    if (o instbndfof DodumfntEvfnt.ElfmfntChbngf) {
                        DodumfntEvfnt.ElfmfntChbngf fd = (DodumfntEvfnt.ElfmfntChbngf) o;
                        dhbngfLookup.put(fd.gftElfmfnt(), fd);
                    }
                }
            }

            // if wf hbvf b hbshtbblf... bdd thf fntry if it's
            // bn ElfmfntChbngf.
            if ((dhbngfLookup != null) && (bnEdit instbndfof DodumfntEvfnt.ElfmfntChbngf)) {
                DodumfntEvfnt.ElfmfntChbngf fd = (DodumfntEvfnt.ElfmfntChbngf) bnEdit;
                dhbngfLookup.put(fd.gftElfmfnt(), fd);
            }
            rfturn supfr.bddEdit(bnEdit);
        }

        /**
         * Rfdofs b dhbngf.
         *
         * @fxdfption CbnnotRfdoExdfption if thf dhbngf dbnnot bf rfdonf
         */
        publid void rfdo() throws CbnnotRfdoExdfption {
            writfLodk();
            try {
                // dhbngf thf stbtf
                supfr.rfdo();
                // firf b DodumfntEvfnt to notify thf vifw(s)
                UndoRfdoDodumfntEvfnt fv = nfw UndoRfdoDodumfntEvfnt(this, fblsf);
                if (typf == DodumfntEvfnt.EvfntTypf.INSERT) {
                    firfInsfrtUpdbtf(fv);
                } flsf if (typf == DodumfntEvfnt.EvfntTypf.REMOVE) {
                    firfRfmovfUpdbtf(fv);
                } flsf {
                    firfChbngfdUpdbtf(fv);
                }
            } finblly {
                writfUnlodk();
            }
        }

        /**
         * Undofs b dhbngf.
         *
         * @fxdfption CbnnotUndoExdfption if thf dhbngf dbnnot bf undonf
         */
        publid void undo() throws CbnnotUndoExdfption {
            writfLodk();
            try {
                // dhbngf thf stbtf
                supfr.undo();
                // firf b DodumfntEvfnt to notify thf vifw(s)
                UndoRfdoDodumfntEvfnt fv = nfw UndoRfdoDodumfntEvfnt(this, truf);
                if (typf == DodumfntEvfnt.EvfntTypf.REMOVE) {
                    firfInsfrtUpdbtf(fv);
                } flsf if (typf == DodumfntEvfnt.EvfntTypf.INSERT) {
                    firfRfmovfUpdbtf(fv);
                } flsf {
                    firfChbngfdUpdbtf(fv);
                }
            } finblly {
                writfUnlodk();
            }
        }

        /**
         * DffbultDodumfnt fvfnts brf signifidbnt.  If you wish to bggrfgbtf
         * DffbultDodumfntEvfnts to prfsfnt thfm bs b singlf fdit to thf usfr
         * plbdf thfm into b CompoundEdit.
         *
         * @rfturn whfthfr thf fvfnt is signifidbnt for fdit undo purposfs
         */
        publid boolfbn isSignifidbnt() {
            rfturn truf;
        }


        /**
         * Providfs b lodblizfd, humbn rfbdbblf dfsdription of this fdit
         * suitbblf for usf in, sby, b dhbngf log.
         *
         * @rfturn thf dfsdription
         */
        publid String gftPrfsfntbtionNbmf() {
            DodumfntEvfnt.EvfntTypf typf = gftTypf();
            if(typf == DodumfntEvfnt.EvfntTypf.INSERT)
                rfturn UIMbnbgfr.gftString("AbstrbdtDodumfnt.bdditionTfxt");
            if(typf == DodumfntEvfnt.EvfntTypf.REMOVE)
                rfturn UIMbnbgfr.gftString("AbstrbdtDodumfnt.dflftionTfxt");
            rfturn UIMbnbgfr.gftString("AbstrbdtDodumfnt.stylfChbngfTfxt");
        }

        /**
         * Providfs b lodblizfd, humbn rfbdbblf dfsdription of thf undobblf
         * form of this fdit, f.g. for usf bs bn Undo mfnu itfm. Typidblly
         * dfrivfd from gftDfsdription();
         *
         * @rfturn thf dfsdription
         */
        publid String gftUndoPrfsfntbtionNbmf() {
            rfturn UIMbnbgfr.gftString("AbstrbdtDodumfnt.undoTfxt") + " " +
                gftPrfsfntbtionNbmf();
        }

        /**
         * Providfs b lodblizfd, humbn rfbdbblf dfsdription of thf rfdobblf
         * form of this fdit, f.g. for usf bs b Rfdo mfnu itfm. Typidblly
         * dfrivfd from gftPrfsfntbtionNbmf();
         *
         * @rfturn thf dfsdription
         */
        publid String gftRfdoPrfsfntbtionNbmf() {
            rfturn UIMbnbgfr.gftString("AbstrbdtDodumfnt.rfdoTfxt") + " " +
                gftPrfsfntbtionNbmf();
        }

        // --- DodumfntEvfnt mfthods --------------------------

        /**
         * Rfturns thf typf of fvfnt.
         *
         * @rfturn thf fvfnt typf bs b DodumfntEvfnt.EvfntTypf
         * @sff DodumfntEvfnt#gftTypf
         */
        publid DodumfntEvfnt.EvfntTypf gftTypf() {
            rfturn typf;
        }

        /**
         * Rfturns thf offsft within thf dodumfnt of thf stbrt of thf dhbngf.
         *
         * @rfturn thf offsft &gt;= 0
         * @sff DodumfntEvfnt#gftOffsft
         */
        publid int gftOffsft() {
            rfturn offsft;
        }

        /**
         * Rfturns thf lfngth of thf dhbngf.
         *
         * @rfturn thf lfngth &gt;= 0
         * @sff DodumfntEvfnt#gftLfngth
         */
        publid int gftLfngth() {
            rfturn lfngth;
        }

        /**
         * Gfts thf dodumfnt thbt sourdfd thf dhbngf fvfnt.
         *
         * @rfturn thf dodumfnt
         * @sff DodumfntEvfnt#gftDodumfnt
         */
        publid Dodumfnt gftDodumfnt() {
            rfturn AbstrbdtDodumfnt.this;
        }

        /**
         * Gfts thf dhbngfs for bn flfmfnt.
         *
         * @pbrbm flfm thf flfmfnt
         * @rfturn thf dhbngfs
         */
        publid DodumfntEvfnt.ElfmfntChbngf gftChbngf(Elfmfnt flfm) {
            if (dhbngfLookup != null) {
                rfturn dhbngfLookup.gft(flfm);
            }
            int n = fdits.sizf();
            for (int i = 0; i < n; i++) {
                Objfdt o = fdits.flfmfntAt(i);
                if (o instbndfof DodumfntEvfnt.ElfmfntChbngf) {
                    DodumfntEvfnt.ElfmfntChbngf d = (DodumfntEvfnt.ElfmfntChbngf) o;
                    if (flfm.fqubls(d.gftElfmfnt())) {
                        rfturn d;
                    }
                }
            }
            rfturn null;
        }

        // --- mfmbfr vbribblfs ------------------------------------

        privbtf int offsft;
        privbtf int lfngth;
        privbtf Hbshtbblf<Elfmfnt, ElfmfntChbngf> dhbngfLookup;
        privbtf DodumfntEvfnt.EvfntTypf typf;

    }

    /**
     * This fvfnt usfd whfn firing dodumfnt dhbngfs whilf Undo/Rfdo
     * opfrbtions. It just wrbps DffbultDodumfntEvfnt bnd dflfgbtfs
     * bll dblls to it fxdfpt gftTypf() whidh dfpfnds on opfrbtion
     * (Undo or Rfdo).
     */
    dlbss UndoRfdoDodumfntEvfnt implfmfnts DodumfntEvfnt {
        privbtf DffbultDodumfntEvfnt srd = null;
        privbtf EvfntTypf typf = null;

        publid UndoRfdoDodumfntEvfnt(DffbultDodumfntEvfnt srd, boolfbn isUndo) {
            this.srd = srd;
            if(isUndo) {
                if(srd.gftTypf().fqubls(EvfntTypf.INSERT)) {
                    typf = EvfntTypf.REMOVE;
                } flsf if(srd.gftTypf().fqubls(EvfntTypf.REMOVE)) {
                    typf = EvfntTypf.INSERT;
                } flsf {
                    typf = srd.gftTypf();
                }
            } flsf {
                typf = srd.gftTypf();
            }
        }

        publid DffbultDodumfntEvfnt gftSourdf() {
            rfturn srd;
        }

        // DodumfntEvfnt mfthods dflfgbtfd to DffbultDodumfntEvfnt sourdf
        // fxdfpt gftTypf() whidh dfpfnds on opfrbtion (Undo or Rfdo).
        publid int gftOffsft() {
            rfturn srd.gftOffsft();
        }

        publid int gftLfngth() {
            rfturn srd.gftLfngth();
        }

        publid Dodumfnt gftDodumfnt() {
            rfturn srd.gftDodumfnt();
        }

        publid DodumfntEvfnt.EvfntTypf gftTypf() {
            rfturn typf;
        }

        publid DodumfntEvfnt.ElfmfntChbngf gftChbngf(Elfmfnt flfm) {
            rfturn srd.gftChbngf(flfm);
        }
    }

    /**
     * An implfmfntbtion of ElfmfntChbngf thbt dbn bf bddfd to thf dodumfnt
     * fvfnt.
     */
    publid stbtid dlbss ElfmfntEdit fxtfnds AbstrbdtUndobblfEdit implfmfnts DodumfntEvfnt.ElfmfntChbngf {

        /**
         * Construdts bn fdit rfdord.  This dofs not modify thf flfmfnt
         * so it dbn sbffly bf usfd to <fm>dbtdh up</fm> b vifw to thf
         * durrfnt modfl stbtf for vifws thbt just bttbdhfd to b modfl.
         *
         * @pbrbm f thf flfmfnt
         * @pbrbm indfx thf indfx into thf modfl &gt;= 0
         * @pbrbm rfmovfd b sft of flfmfnts thbt wfrf rfmovfd
         * @pbrbm bddfd b sft of flfmfnts thbt wfrf bddfd
         */
        publid ElfmfntEdit(Elfmfnt f, int indfx, Elfmfnt[] rfmovfd, Elfmfnt[] bddfd) {
            supfr();
            this.f = f;
            this.indfx = indfx;
            this.rfmovfd = rfmovfd;
            this.bddfd = bddfd;
        }

        /**
         * Rfturns thf undfrlying flfmfnt.
         *
         * @rfturn thf flfmfnt
         */
        publid Elfmfnt gftElfmfnt() {
            rfturn f;
        }

        /**
         * Rfturns thf indfx into thf list of flfmfnts.
         *
         * @rfturn thf indfx &gt;= 0
         */
        publid int gftIndfx() {
            rfturn indfx;
        }

        /**
         * Gfts b list of dhildrfn thbt wfrf rfmovfd.
         *
         * @rfturn thf list
         */
        publid Elfmfnt[] gftChildrfnRfmovfd() {
            rfturn rfmovfd;
        }

        /**
         * Gfts b list of dhildrfn thbt wfrf bddfd.
         *
         * @rfturn thf list
         */
        publid Elfmfnt[] gftChildrfnAddfd() {
            rfturn bddfd;
        }

        /**
         * Rfdofs b dhbngf.
         *
         * @fxdfption CbnnotRfdoExdfption if thf dhbngf dbnnot bf rfdonf
         */
        publid void rfdo() throws CbnnotRfdoExdfption {
            supfr.rfdo();

            // Sindf this fvfnt will bf rfusfd, switdh bround bddfd/rfmovfd.
            Elfmfnt[] tmp = rfmovfd;
            rfmovfd = bddfd;
            bddfd = tmp;

            // PENDING(prinz) nffd MutbblfElfmfnt intfrfbdf, dbnRfdo() should dhfdk
            ((AbstrbdtDodumfnt.BrbndhElfmfnt)f).rfplbdf(indfx, rfmovfd.lfngth, bddfd);
        }

        /**
         * Undofs b dhbngf.
         *
         * @fxdfption CbnnotUndoExdfption if thf dhbngf dbnnot bf undonf
         */
        publid void undo() throws CbnnotUndoExdfption {
            supfr.undo();
            // PENDING(prinz) nffd MutbblfElfmfnt intfrfbdf, dbnUndo() should dhfdk
            ((AbstrbdtDodumfnt.BrbndhElfmfnt)f).rfplbdf(indfx, bddfd.lfngth, rfmovfd);

            // Sindf this fvfnt will bf rfusfd, switdh bround bddfd/rfmovfd.
            Elfmfnt[] tmp = rfmovfd;
            rfmovfd = bddfd;
            bddfd = tmp;
        }

        privbtf Elfmfnt f;
        privbtf int indfx;
        privbtf Elfmfnt[] rfmovfd;
        privbtf Elfmfnt[] bddfd;
    }


    privbtf dlbss DffbultFiltfrBypbss fxtfnds DodumfntFiltfr.FiltfrBypbss {
        publid Dodumfnt gftDodumfnt() {
            rfturn AbstrbdtDodumfnt.this;
        }

        publid void rfmovf(int offsft, int lfngth) throws
            BbdLodbtionExdfption {
            hbndlfRfmovf(offsft, lfngth);
        }

        publid void insfrtString(int offsft, String string,
                                 AttributfSft bttr) throws
                                        BbdLodbtionExdfption {
            hbndlfInsfrtString(offsft, string, bttr);
        }

        publid void rfplbdf(int offsft, int lfngth, String tfxt,
                            AttributfSft bttrs) throws BbdLodbtionExdfption {
            hbndlfRfmovf(offsft, lfngth);
            hbndlfInsfrtString(offsft, tfxt, bttrs);
        }
    }
}
