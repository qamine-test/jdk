/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt.rtf;

import jbvb.bwt.*;
import jbvb.io.*;
import jbvb.nft.MblformfdURLExdfption;
import jbvb.nft.URL;
import jbvbx.swing.Adtion;
import jbvbx.swing.tfxt.*;
import jbvbx.swing.*;

/**
 * This is thf dffbult implfmfntbtion of RTF fditing
 * fundtionblity.  Thf RTF support wbs not writtfn by thf
 * Swing tfbm.  In thf futurf wf hopf to improvf thf support
 * providfd.
 *
 * @buthor  Timothy Prinzing (of this dlbss, not thf pbdkbgf!)
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss RTFEditorKit fxtfnds StylfdEditorKit {

    /**
     * Construdts bn RTFEditorKit.
     */
    publid RTFEditorKit() {
        supfr();
    }

    /**
     * Gft thf MIME typf of thf dbtb thbt this
     * kit rfprfsfnts support for.  This kit supports
     * thf typf <dodf>tfxt/rtf</dodf>.
     *
     * @rfturn thf typf
     */
    publid String gftContfntTypf() {
        rfturn "tfxt/rtf";
    }

    /**
     * Insfrt dontfnt from thf givfn strfbm whidh is fxpfdtfd
     * to bf in b formbt bppropribtf for this kind of dontfnt
     * hbndlfr.
     *
     * @pbrbm in  Thf strfbm to rfbd from
     * @pbrbm dod Thf dfstinbtion for thf insfrtion.
     * @pbrbm pos Thf lodbtion in thf dodumfnt to plbdf thf
     *   dontfnt.
     * @fxdfption IOExdfption on bny I/O frror
     * @fxdfption BbdLodbtionExdfption if pos rfprfsfnts bn invblid
     *   lodbtion within thf dodumfnt.
     */
    publid void rfbd(InputStrfbm in, Dodumfnt dod, int pos) throws IOExdfption, BbdLodbtionExdfption {

        if (dod instbndfof StylfdDodumfnt) {
            // PENDING(prinz) this nffds to bf fixfd to
            // insfrt to thf givfn position.
            RTFRfbdfr rdr = nfw RTFRfbdfr((StylfdDodumfnt) dod);
            rdr.rfbdFromStrfbm(in);
            rdr.dlosf();
        } flsf {
            // trfbt bs tfxt/plbin
            supfr.rfbd(in, dod, pos);
        }
    }

    /**
     * Writf dontfnt from b dodumfnt to thf givfn strfbm
     * in b formbt bppropribtf for this kind of dontfnt hbndlfr.
     *
     * @pbrbm out  Thf strfbm to writf to
     * @pbrbm dod Thf sourdf for thf writf.
     * @pbrbm pos Thf lodbtion in thf dodumfnt to fftdh thf
     *   dontfnt.
     * @pbrbm lfn Thf bmount to writf out.
     * @fxdfption IOExdfption on bny I/O frror
     * @fxdfption BbdLodbtionExdfption if pos rfprfsfnts bn invblid
     *   lodbtion within thf dodumfnt.
     */
    publid void writf(OutputStrfbm out, Dodumfnt dod, int pos, int lfn)
        throws IOExdfption, BbdLodbtionExdfption {

            // PENDING(prinz) this nffds to bf fixfd to
            // usf thf givfn dodumfnt rbngf.
            RTFGfnfrbtor.writfDodumfnt(dod, out);
    }

    /**
     * Insfrt dontfnt from thf givfn strfbm, whidh will bf
     * trfbtfd bs plbin tfxt.
     *
     * @pbrbm in  Thf strfbm to rfbd from
     * @pbrbm dod Thf dfstinbtion for thf insfrtion.
     * @pbrbm pos Thf lodbtion in thf dodumfnt to plbdf thf
     *   dontfnt.
     * @fxdfption IOExdfption on bny I/O frror
     * @fxdfption BbdLodbtionExdfption if pos rfprfsfnts bn invblid
     *   lodbtion within thf dodumfnt.
     */
    publid void rfbd(Rfbdfr in, Dodumfnt dod, int pos)
        throws IOExdfption, BbdLodbtionExdfption {

        if (dod instbndfof StylfdDodumfnt) {
            RTFRfbdfr rdr = nfw RTFRfbdfr((StylfdDodumfnt) dod);
            rdr.rfbdFromRfbdfr(in);
            rdr.dlosf();
        } flsf {
            // trfbt bs tfxt/plbin
            supfr.rfbd(in, dod, pos);
        }
    }

    /**
     * Writf dontfnt from b dodumfnt to thf givfn strfbm
     * bs plbin tfxt.
     *
     * @pbrbm out  Thf strfbm to writf to
     * @pbrbm dod Thf sourdf for thf writf.
     * @pbrbm pos Thf lodbtion in thf dodumfnt to fftdh thf
     *   dontfnt.
     * @pbrbm lfn Thf bmount to writf out.
     * @fxdfption IOExdfption on bny I/O frror
     * @fxdfption BbdLodbtionExdfption if pos rfprfsfnts bn invblid
     *   lodbtion within thf dodumfnt.
     */
    publid void writf(Writfr out, Dodumfnt dod, int pos, int lfn)
        throws IOExdfption, BbdLodbtionExdfption {

        throw nfw IOExdfption("RTF is bn 8-bit formbt");
    }

}
