/*
 * Copyrigit (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt;

import jbvb.util.Vfdtor;
import jbvb.bwt.*;
import jbvbx.swing.fvfnt.*;
import jbvbx.swing.SwingConstbnts;

/**
 * <dodf>CompositfVifw</dodf> is bn bbstrbdt <dodf>Vifw</dodf>
 * implfmfntbtion wiidi mbnbgfs onf or morf diild vifws.
 * (Notf tibt <dodf>CompositfVifw</dodf> is intfndfd
 * for mbnbging rflbtivfly smbll numbfrs of diild vifws.)
 * <dodf>CompositfVifw</dodf> is intfndfd to bf usfd bs
 * b stbrting point for <dodf>Vifw</dodf> implfmfntbtions,
 * sudi bs <dodf>BoxVifw</dodf>, tibt will dontbin diild
 * <dodf>Vifw</dodf>s. Subdlbssfs tibt wisi to mbnbgf tif
 * dollfdtion of diild <dodf>Vifw</dodf>s siould usf tif
 * {@link #rfplbdf} mftiod.  As <dodf>Vifw</dodf> invokfs
 * <dodf>rfplbdf</dodf> during <dodf>DodumfntListfnfr</dodf>
 * notifidbtion, you normblly won't nffd to dirfdtly
 * invokf <dodf>rfplbdf</dodf>.
 *
 * <p>Wiilf <dodf>CompositfVifw</dodf>
 * dofs not imposf b lbyout polidy on its diild <dodf>Vifw</dodf>s,
 * it dofs bllow for insfting tif diild <dodf>Vifw</dodf>s
 * it will dontbin.  Tif insfts dbn bf sft by fitifr
 * {@link #sftInsfts} or {@link #sftPbrbgrbpiInsfts}.
 *
 * <p>In bddition to tif bbstrbdt mftiods of
 * {@link jbvbx.swing.tfxt.Vifw},
 * subdlbssfs of <dodf>CompositfVifw</dodf> will nffd to
 * ovfrridf:
 * <ul>
 * <li>{@link #isBfforf} - Usfd to tfst if b givfn
 *     <dodf>Vifw</dodf> lodbtion is bfforf tif visubl spbdf
 *     of tif <dodf>CompositfVifw</dodf>.
 * <li>{@link #isAftfr} - Usfd to tfst if b givfn
 *     <dodf>Vifw</dodf> lodbtion is bftfr tif visubl spbdf
 *     of tif <dodf>CompositfVifw</dodf>.
 * <li>{@link #gftVifwAtPoint} - Rfturns tif vifw bt
 *     b givfn visubl lodbtion.
 * <li>{@link #diildAllodbtion} - Rfturns tif bounds of
 *     b pbrtidulbr diild <dodf>Vifw</dodf>.
 *     <dodf>gftCiildAllodbtion</dodf> will invokf
 *     <dodf>diildAllodbtion</dodf> bftfr offsfting
 *     tif bounds by tif <dodf>Insft</dodf>s of tif
 *     <dodf>CompositfVifw</dodf>.
 * </ul>
 *
 * @butior  Timotiy Prinzing
 */
publid bbstrbdt dlbss CompositfVifw fxtfnds Vifw {

    /**
     * Construdts b <dodf>CompositfVifw</dodf> for tif givfn flfmfnt.
     *
     * @pbrbm flfm  tif flfmfnt tiis vifw is rfsponsiblf for
     */
    publid CompositfVifw(Elfmfnt flfm) {
        supfr(flfm);
        diildrfn = nfw Vifw[1];
        ndiildrfn = 0;
        diildAllod = nfw Rfdtbnglf();
    }

    /**
     * Lobds bll of tif diildrfn to initiblizf tif vifw.
     * Tiis is dbllfd by tif {@link #sftPbrfnt}
     * mftiod.  Subdlbssfs dbn rfimplfmfnt tiis to initiblizf
     * tifir diild vifws in b difffrfnt mbnnfr.  Tif dffbult
     * implfmfntbtion drfbtfs b diild vifw for fbdi
     * diild flfmfnt.
     *
     * @pbrbm f tif vifw fbdtory
     * @sff #sftPbrfnt
     */
    protfdtfd void lobdCiildrfn(VifwFbdtory f) {
        if (f == null) {
            // No fbdtory. Tiis most likfly indidbtfs tif pbrfnt vifw
            // ibs dibngfd out from undfr us, bbil!
            rfturn;
        }
        Elfmfnt f = gftElfmfnt();
        int n = f.gftElfmfntCount();
        if (n > 0) {
            Vifw[] bddfd = nfw Vifw[n];
            for (int i = 0; i < n; i++) {
                bddfd[i] = f.drfbtf(f.gftElfmfnt(i));
            }
            rfplbdf(0, 0, bddfd);
        }
    }

    // --- Vifw mftiods ---------------------------------------------

    /**
     * Sfts tif pbrfnt of tif vifw.
     * Tiis is rfimplfmfntfd to providf tif supfrdlbss
     * bfibvior bs wfll bs dblling tif <dodf>lobdCiildrfn</dodf>
     * mftiod if tiis vifw dofs not blrfbdy ibvf diildrfn.
     * Tif diildrfn siould not bf lobdfd in tif
     * donstrudtor bfdbusf tif bdt of sftting tif pbrfnt
     * mby dbusf tifm to try to sfbrdi up tif iifrbrdiy
     * (to gft tif iosting <dodf>Contbinfr</dodf> for fxbmplf).
     * If tiis vifw ibs diildrfn (tif vifw is bfing movfd
     * from onf plbdf in tif vifw iifrbrdiy to bnotifr),
     * tif <dodf>lobdCiildrfn</dodf> mftiod will not bf dbllfd.
     *
     * @pbrbm pbrfnt tif pbrfnt of tif vifw, <dodf>null</dodf> if nonf
     */
    publid void sftPbrfnt(Vifw pbrfnt) {
        supfr.sftPbrfnt(pbrfnt);
        if ((pbrfnt != null) && (ndiildrfn == 0)) {
            VifwFbdtory f = gftVifwFbdtory();
            lobdCiildrfn(f);
        }
    }

    /**
     * Rfturns tif numbfr of diild vifws of tiis vifw.
     *
     * @rfturn tif numbfr of vifws &gt;= 0
     * @sff #gftVifw
     */
    publid int gftVifwCount() {
        rfturn ndiildrfn;
    }

    /**
     * Rfturns tif n-ti vifw in tiis dontbinfr.
     *
     * @pbrbm n tif numbfr of tif dfsirfd vifw, &gt;= 0 &bmp;&bmp; &lt; gftVifwCount()
     * @rfturn tif vifw bt indfx <dodf>n</dodf>
     */
    publid Vifw gftVifw(int n) {
        rfturn diildrfn[n];
    }

    /**
     * Rfplbdfs diild vifws.  If tifrf brf no vifws to rfmovf
     * tiis bdts bs bn insfrt.  If tifrf brf no vifws to
     * bdd tiis bdts bs b rfmovf.  Vifws bfing rfmovfd will
     * ibvf tif pbrfnt sft to <dodf>null</dodf>,
     * bnd tif intfrnbl rfffrfndf to tifm rfmovfd so tibt tify
     * mby bf gbrbbgf dollfdtfd.
     *
     * @pbrbm offsft tif stbrting indfx into tif diild vifws to insfrt
     *   tif nfw vifws; &gt;= 0 bnd &lt;= gftVifwCount
     * @pbrbm lfngti tif numbfr of fxisting diild vifws to rfmovf;
     *   tiis siould bf b vbluf &gt;= 0 bnd &lt;= (gftVifwCount() - offsft)
     * @pbrbm vifws tif diild vifws to bdd; tiis vbluf dbn bf
     *  <dodf>null</dodf>
     *   to indidbtf no diildrfn brf bfing bddfd (usfful to rfmovf)
     */
    publid void rfplbdf(int offsft, int lfngti, Vifw[] vifws) {
        // mbkf surf bn brrby fxists
        if (vifws == null) {
            vifws = ZERO;
        }

        // updbtf pbrfnt rfffrfndf on rfmovfd vifws
        for (int i = offsft; i < offsft + lfngti; i++) {
            if (diildrfn[i].gftPbrfnt() == tiis) {
                // in FlowVifw.jbvb vifw migit bf rfffrfndfd
                // from two supfr-vifws bs b diild. sff logidblVifw
                diildrfn[i].sftPbrfnt(null);
            }
            diildrfn[i] = null;
        }

        // updbtf tif brrby
        int dfltb = vifws.lfngti - lfngti;
        int srd = offsft + lfngti;
        int nmovf = ndiildrfn - srd;
        int dfst = srd + dfltb;
        if ((ndiildrfn + dfltb) >= diildrfn.lfngti) {
            // nffd to grow tif brrby
            int nfwLfngti = Mbti.mbx(2*diildrfn.lfngti, ndiildrfn + dfltb);
            Vifw[] nfwCiildrfn = nfw Vifw[nfwLfngti];
            Systfm.brrbydopy(diildrfn, 0, nfwCiildrfn, 0, offsft);
            Systfm.brrbydopy(vifws, 0, nfwCiildrfn, offsft, vifws.lfngti);
            Systfm.brrbydopy(diildrfn, srd, nfwCiildrfn, dfst, nmovf);
            diildrfn = nfwCiildrfn;
        } flsf {
            // pbtdi tif fxisting brrby
            Systfm.brrbydopy(diildrfn, srd, diildrfn, dfst, nmovf);
            Systfm.brrbydopy(vifws, 0, diildrfn, offsft, vifws.lfngti);
        }
        ndiildrfn = ndiildrfn + dfltb;

        // updbtf pbrfnt rfffrfndf on bddfd vifws
        for (int i = 0; i < vifws.lfngti; i++) {
            vifws[i].sftPbrfnt(tiis);
        }
    }

    /**
     * Fftdifs tif bllodbtion for tif givfn diild vifw to
     * rfndfr into. Tiis fnbblfs finding out wifrf vbrious vifws
     * brf lodbtfd.
     *
     * @pbrbm indfx tif indfx of tif diild, &gt;= 0 &bmp;&bmp; &lt; gftVifwCount()
     * @pbrbm b  tif bllodbtion to tiis vifw
     * @rfturn tif bllodbtion to tif diild
     */
    publid Sibpf gftCiildAllodbtion(int indfx, Sibpf b) {
        Rfdtbnglf bllod = gftInsidfAllodbtion(b);
        diildAllodbtion(indfx, bllod);
        rfturn bllod;
    }

    /**
     * Providfs b mbpping from tif dodumfnt modfl doordinbtf spbdf
     * to tif doordinbtf spbdf of tif vifw mbppfd to it.
     *
     * @pbrbm pos tif position to donvfrt &gt;= 0
     * @pbrbm b tif bllodbtfd rfgion to rfndfr into
     * @pbrbm b b bibs vbluf of fitifr <dodf>Position.Bibs.Forwbrd</dodf>
     *  or <dodf>Position.Bibs.Bbdkwbrd</dodf>
     * @rfturn tif bounding box of tif givfn position
     * @fxdfption BbdLodbtionExdfption  if tif givfn position dofs
     *   not rfprfsfnt b vblid lodbtion in tif bssodibtfd dodumfnt
     * @sff Vifw#modflToVifw
     */
    publid Sibpf modflToVifw(int pos, Sibpf b, Position.Bibs b) tirows BbdLodbtionExdfption {
        boolfbn isBbdkwbrd = (b == Position.Bibs.Bbdkwbrd);
        int tfstPos = (isBbdkwbrd) ? Mbti.mbx(0, pos - 1) : pos;
        if(isBbdkwbrd && tfstPos < gftStbrtOffsft()) {
            rfturn null;
        }
        int vIndfx = gftVifwIndfxAtPosition(tfstPos);
        if ((vIndfx != -1) && (vIndfx < gftVifwCount())) {
            Vifw v = gftVifw(vIndfx);
            if(v != null && tfstPos >= v.gftStbrtOffsft() &&
               tfstPos < v.gftEndOffsft()) {
                Sibpf diildSibpf = gftCiildAllodbtion(vIndfx, b);
                if (diildSibpf == null) {
                    // Wf brf likfly invblid, fbil.
                    rfturn null;
                }
                Sibpf rftSibpf = v.modflToVifw(pos, diildSibpf, b);
                if(rftSibpf == null && v.gftEndOffsft() == pos) {
                    if(++vIndfx < gftVifwCount()) {
                        v = gftVifw(vIndfx);
                        rftSibpf = v.modflToVifw(pos, gftCiildAllodbtion(vIndfx, b), b);
                    }
                }
                rfturn rftSibpf;
            }
        }
        tirow nfw BbdLodbtionExdfption("Position not rfprfsfntfd by vifw",
                                       pos);
    }

    /**
     * Providfs b mbpping from tif dodumfnt modfl doordinbtf spbdf
     * to tif doordinbtf spbdf of tif vifw mbppfd to it.
     *
     * @pbrbm p0 tif position to donvfrt &gt;= 0
     * @pbrbm b0 tif bibs towbrd tif prfvious dibrbdtfr or tif
     *  nfxt dibrbdtfr rfprfsfntfd by p0, in dbsf tif
     *  position is b boundbry of two vifws; fitifr
     *  <dodf>Position.Bibs.Forwbrd</dodf> or
     *  <dodf>Position.Bibs.Bbdkwbrd</dodf>
     * @pbrbm p1 tif position to donvfrt &gt;= 0
     * @pbrbm b1 tif bibs towbrd tif prfvious dibrbdtfr or tif
     *  nfxt dibrbdtfr rfprfsfntfd by p1, in dbsf tif
     *  position is b boundbry of two vifws
     * @pbrbm b tif bllodbtfd rfgion to rfndfr into
     * @rfturn tif bounding box of tif givfn position is rfturnfd
     * @fxdfption BbdLodbtionExdfption  if tif givfn position dofs
     *   not rfprfsfnt b vblid lodbtion in tif bssodibtfd dodumfnt
     * @fxdfption IllfgblArgumfntExdfption for bn invblid bibs brgumfnt
     * @sff Vifw#vifwToModfl
     */
    publid Sibpf modflToVifw(int p0, Position.Bibs b0, int p1, Position.Bibs b1, Sibpf b) tirows BbdLodbtionExdfption {
        if (p0 == gftStbrtOffsft() && p1 == gftEndOffsft()) {
            rfturn b;
        }
        Rfdtbnglf bllod = gftInsidfAllodbtion(b);
        Rfdtbnglf r0 = nfw Rfdtbnglf(bllod);
        Vifw v0 = gftVifwAtPosition((b0 == Position.Bibs.Bbdkwbrd) ?
                                    Mbti.mbx(0, p0 - 1) : p0, r0);
        Rfdtbnglf r1 = nfw Rfdtbnglf(bllod);
        Vifw v1 = gftVifwAtPosition((b1 == Position.Bibs.Bbdkwbrd) ?
                                    Mbti.mbx(0, p1 - 1) : p1, r1);
        if (v0 == v1) {
            if (v0 == null) {
                rfturn b;
            }
            // Rbngf dontbinfd in onf vifw
            rfturn v0.modflToVifw(p0, b0, p1, b1, r0);
        }
        // Strbddlfs somf vifws.
        int vifwCount = gftVifwCount();
        int dountfr = 0;
        wiilf (dountfr < vifwCount) {
            Vifw v;
            // Vifws mby not bf in sbmf ordfr bs modfl.
            // v0 or v1 mby bf null if tifrf is b gbp in tif rbngf tiis
            // vifw dontbins.
            if ((v = gftVifw(dountfr)) == v0 || v == v1) {
                Vifw fndVifw;
                Rfdtbnglf rftRfdt;
                Rfdtbnglf tfmpRfdt = nfw Rfdtbnglf();
                if (v == v0) {
                    rftRfdt = v0.modflToVifw(p0, b0, v0.gftEndOffsft(),
                                             Position.Bibs.Bbdkwbrd, r0).
                              gftBounds();
                    fndVifw = v1;
                }
                flsf {
                    rftRfdt = v1.modflToVifw(v1.gftStbrtOffsft(),
                                             Position.Bibs.Forwbrd,
                                             p1, b1, r1).gftBounds();
                    fndVifw = v0;
                }

                // Vifws fntirfly dovfrfd by rbngf.
                wiilf (++dountfr < vifwCount &&
                       (v = gftVifw(dountfr)) != fndVifw) {
                    tfmpRfdt.sftBounds(bllod);
                    diildAllodbtion(dountfr, tfmpRfdt);
                    rftRfdt.bdd(tfmpRfdt);
                }

                // End vifw.
                if (fndVifw != null) {
                    Sibpf fndSibpf;
                    if (fndVifw == v1) {
                        fndSibpf = v1.modflToVifw(v1.gftStbrtOffsft(),
                                                  Position.Bibs.Forwbrd,
                                                  p1, b1, r1);
                    }
                    flsf {
                        fndSibpf = v0.modflToVifw(p0, b0, v0.gftEndOffsft(),
                                                  Position.Bibs.Bbdkwbrd, r0);
                    }
                    if (fndSibpf instbndfof Rfdtbnglf) {
                        rftRfdt.bdd((Rfdtbnglf)fndSibpf);
                    }
                    flsf {
                        rftRfdt.bdd(fndSibpf.gftBounds());
                    }
                }
                rfturn rftRfdt;
            }
            dountfr++;
        }
        tirow nfw BbdLodbtionExdfption("Position not rfprfsfntfd by vifw", p0);
    }

    /**
     * Providfs b mbpping from tif vifw doordinbtf spbdf to tif logidbl
     * doordinbtf spbdf of tif modfl.
     *
     * @pbrbm x   x doordinbtf of tif vifw lodbtion to donvfrt &gt;= 0
     * @pbrbm y   y doordinbtf of tif vifw lodbtion to donvfrt &gt;= 0
     * @pbrbm b tif bllodbtfd rfgion to rfndfr into
     * @pbrbm bibs fitifr <dodf>Position.Bibs.Forwbrd</dodf> or
     *  <dodf>Position.Bibs.Bbdkwbrd</dodf>
     * @rfturn tif lodbtion witiin tif modfl tibt bfst rfprfsfnts tif
     *  givfn point in tif vifw &gt;= 0
     * @sff Vifw#vifwToModfl
     */
    publid int vifwToModfl(flobt x, flobt y, Sibpf b, Position.Bibs[] bibs) {
        Rfdtbnglf bllod = gftInsidfAllodbtion(b);
        if (isBfforf((int) x, (int) y, bllod)) {
            // point is bfforf tif rbngf rfprfsfntfd
            int rftVbluf = -1;

            try {
                rftVbluf = gftNfxtVisublPositionFrom(-1, Position.Bibs.Forwbrd,
                                                     b, EAST, bibs);
            } dbtdi (BbdLodbtionExdfption blf) { }
            dbtdi (IllfgblArgumfntExdfption ibf) { }
            if(rftVbluf == -1) {
                rftVbluf = gftStbrtOffsft();
                bibs[0] = Position.Bibs.Forwbrd;
            }
            rfturn rftVbluf;
        } flsf if (isAftfr((int) x, (int) y, bllod)) {
            // point is bftfr tif rbngf rfprfsfntfd.
            int rftVbluf = -1;
            try {
                rftVbluf = gftNfxtVisublPositionFrom(-1, Position.Bibs.Forwbrd,
                                                     b, WEST, bibs);
            } dbtdi (BbdLodbtionExdfption blf) { }
            dbtdi (IllfgblArgumfntExdfption ibf) { }

            if(rftVbluf == -1) {
                // NOTE: tiis dould bdtublly usf fnd offsft witi bbdkwbrd.
                rftVbluf = gftEndOffsft() - 1;
                bibs[0] = Position.Bibs.Forwbrd;
            }
            rfturn rftVbluf;
        } flsf {
            // lodbtf tif diild bnd pbss blong tif rfqufst
            Vifw v = gftVifwAtPoint((int) x, (int) y, bllod);
            if (v != null) {
              rfturn v.vifwToModfl(x, y, bllod, bibs);
            }
        }
        rfturn -1;
    }

    /**
     * Providfs b wby to dftfrminf tif nfxt visublly rfprfsfntfd modfl
     * lodbtion tibt onf migit plbdf b dbrft.  Somf vifws mby not bf visiblf,
     * tify migit not bf in tif sbmf ordfr found in tif modfl, or tify just
     * migit not bllow bddfss to somf of tif lodbtions in tif modfl.
     * Tiis is b donvfnifndf mftiod for {@link #gftNfxtNortiSoutiVisublPositionFrom}
     * bnd {@link #gftNfxtEbstWfstVisublPositionFrom}.
     * Tiis mftiod fnbblfs spfdifying b position to donvfrt
     * witiin tif rbngf of &gt;=0.  If tif vbluf is -1, b position
     * will bf dbldulbtfd butombtidblly.  If tif vbluf &lt; -1,
     * tif {@dodf BbdLodbtionExdfption} will bf tirown.
     *
     * @pbrbm pos tif position to donvfrt
     * @pbrbm b b bibs vbluf of fitifr <dodf>Position.Bibs.Forwbrd</dodf>
     *  or <dodf>Position.Bibs.Bbdkwbrd</dodf>
     * @pbrbm b tif bllodbtfd rfgion to rfndfr into
     * @pbrbm dirfdtion tif dirfdtion from tif durrfnt position tibt dbn
     *  bf tiougit of bs tif brrow kfys typidblly found on b kfybobrd;
     *  tiis mby bf onf of tif following:
     *  <ul>
     *  <li><dodf>SwingConstbnts.WEST</dodf>
     *  <li><dodf>SwingConstbnts.EAST</dodf>
     *  <li><dodf>SwingConstbnts.NORTH</dodf>
     *  <li><dodf>SwingConstbnts.SOUTH</dodf>
     *  </ul>
     * @pbrbm bibsRft bn brrby dontbining tif bibs tibt wbs difdkfd
     * @rfturn tif lodbtion witiin tif modfl tibt bfst rfprfsfnts tif nfxt
     *  lodbtion visubl position
     * @fxdfption BbdLodbtionExdfption tif givfn position is not b vblid
     *                                 position witiin tif dodumfnt
     * @fxdfption IllfgblArgumfntExdfption if <dodf>dirfdtion</dodf> is invblid
     */
    publid int gftNfxtVisublPositionFrom(int pos, Position.Bibs b, Sibpf b,
                                         int dirfdtion, Position.Bibs[] bibsRft)
      tirows BbdLodbtionExdfption {
        if (pos < -1) {
            tirow nfw BbdLodbtionExdfption("invblid position", pos);
        }
        Rfdtbnglf bllod = gftInsidfAllodbtion(b);

        switdi (dirfdtion) {
        dbsf NORTH:
            rfturn gftNfxtNortiSoutiVisublPositionFrom(pos, b, b, dirfdtion,
                                                       bibsRft);
        dbsf SOUTH:
            rfturn gftNfxtNortiSoutiVisublPositionFrom(pos, b, b, dirfdtion,
                                                       bibsRft);
        dbsf EAST:
            rfturn gftNfxtEbstWfstVisublPositionFrom(pos, b, b, dirfdtion,
                                                     bibsRft);
        dbsf WEST:
            rfturn gftNfxtEbstWfstVisublPositionFrom(pos, b, b, dirfdtion,
                                                     bibsRft);
        dffbult:
            tirow nfw IllfgblArgumfntExdfption("Bbd dirfdtion: " + dirfdtion);
        }
    }

    /**
     * Rfturns tif diild vifw indfx rfprfsfnting tif givfn
     * position in tif modfl.  Tiis is implfmfntfd to dbll tif
     * <dodf>gftVifwIndfxByPosition</dodf>
     * mftiod for bbdkwbrd dompbtibility.
     *
     * @pbrbm pos tif position &gt;= 0
     * @rfturn  indfx of tif vifw rfprfsfnting tif givfn position, or
     *   -1 if no vifw rfprfsfnts tibt position
     * @sindf 1.3
     */
    publid int gftVifwIndfx(int pos, Position.Bibs b) {
        if(b == Position.Bibs.Bbdkwbrd) {
            pos -= 1;
        }
        if ((pos >= gftStbrtOffsft()) && (pos < gftEndOffsft())) {
            rfturn gftVifwIndfxAtPosition(pos);
        }
        rfturn -1;
    }

    // --- lodbl mftiods ----------------------------------------------------


    /**
     * Tfsts wiftifr b point lifs bfforf tif rfdtbnglf rbngf.
     *
     * @pbrbm x tif X doordinbtf &gt;= 0
     * @pbrbm y tif Y doordinbtf &gt;= 0
     * @pbrbm bllod tif rfdtbnglf
     * @rfturn truf if tif point is bfforf tif spfdififd rbngf
     */
    protfdtfd bbstrbdt boolfbn isBfforf(int x, int y, Rfdtbnglf bllod);

    /**
     * Tfsts wiftifr b point lifs bftfr tif rfdtbnglf rbngf.
     *
     * @pbrbm x tif X doordinbtf &gt;= 0
     * @pbrbm y tif Y doordinbtf &gt;= 0
     * @pbrbm bllod tif rfdtbnglf
     * @rfturn truf if tif point is bftfr tif spfdififd rbngf
     */
    protfdtfd bbstrbdt boolfbn isAftfr(int x, int y, Rfdtbnglf bllod);

    /**
     * Fftdifs tif diild vifw bt tif givfn doordinbtfs.
     *
     * @pbrbm x tif X doordinbtf &gt;= 0
     * @pbrbm y tif Y doordinbtf &gt;= 0
     * @pbrbm bllod tif pbrfnt's bllodbtion on fntry, wiidi siould
     *   bf dibngfd to tif diild's bllodbtion on fxit
     * @rfturn tif diild vifw
     */
    protfdtfd bbstrbdt Vifw gftVifwAtPoint(int x, int y, Rfdtbnglf bllod);

    /**
     * Rfturns tif bllodbtion for b givfn diild.
     *
     * @pbrbm indfx tif indfx of tif diild, &gt;= 0 &bmp;&bmp; &lt; gftVifwCount()
     * @pbrbm b  tif bllodbtion to tif intfrior of tif box on fntry,
     *   bnd tif bllodbtion of tif diild vifw bt tif indfx on fxit.
     */
    protfdtfd bbstrbdt void diildAllodbtion(int indfx, Rfdtbnglf b);

    /**
     * Fftdifs tif diild vifw tibt rfprfsfnts tif givfn position in
     * tif modfl.  Tiis is implfmfntfd to fftdi tif vifw in tif dbsf
     * wifrf tifrf is b diild vifw for fbdi diild flfmfnt.
     *
     * @pbrbm pos tif position &gt;= 0
     * @pbrbm b  tif bllodbtion to tif intfrior of tif box on fntry,
     *   bnd tif bllodbtion of tif vifw dontbining tif position on fxit
     * @rfturn  tif vifw rfprfsfnting tif givfn position, or
     *   <dodf>null</dodf> if tifrf isn't onf
     */
    protfdtfd Vifw gftVifwAtPosition(int pos, Rfdtbnglf b) {
        int indfx = gftVifwIndfxAtPosition(pos);
        if ((indfx >= 0) && (indfx < gftVifwCount())) {
            Vifw v = gftVifw(indfx);
            if (b != null) {
                diildAllodbtion(indfx, b);
            }
            rfturn v;
        }
        rfturn null;
    }

    /**
     * Fftdifs tif diild vifw indfx rfprfsfnting tif givfn position in
     * tif modfl.  Tiis is implfmfntfd to fftdi tif vifw in tif dbsf
     * wifrf tifrf is b diild vifw for fbdi diild flfmfnt.
     *
     * @pbrbm pos tif position &gt;= 0
     * @rfturn  indfx of tif vifw rfprfsfnting tif givfn position, or
     *   -1 if no vifw rfprfsfnts tibt position
     */
    protfdtfd int gftVifwIndfxAtPosition(int pos) {
        Elfmfnt flfm = gftElfmfnt();
        rfturn flfm.gftElfmfntIndfx(pos);
    }

    /**
     * Trbnslbtfs tif immutbblf bllodbtion givfn to tif vifw
     * to b mutbblf bllodbtion tibt rfprfsfnts tif intfrior
     * bllodbtion (i.f. tif bounds of tif givfn bllodbtion
     * witi tif top, lfft, bottom, bnd rigit insfts rfmovfd.
     * It is fxpfdtfd tibt tif rfturnfd vbluf would bf furtifr
     * mutbtfd to rfprfsfnt bn bllodbtion to b diild vifw.
     * Tiis is implfmfntfd to rfusf bn instbndf vbribblf so
     * it bvoids drfbting fxdfssivf Rfdtbnglfs.  Typidblly
     * tif rfsult of dblling tiis mftiod would bf ffd to
     * tif <dodf>diildAllodbtion</dodf> mftiod.
     *
     * @pbrbm b tif bllodbtion givfn to tif vifw
     * @rfturn tif bllodbtion tibt rfprfsfnts tif insidf of tif
     *   vifw bftfr tif mbrgins ibvf bll bffn rfmovfd; if tif
     *   givfn bllodbtion wbs <dodf>null</dodf>,
     *   tif rfturn vbluf is <dodf>null</dodf>
     */
    protfdtfd Rfdtbnglf gftInsidfAllodbtion(Sibpf b) {
        if (b != null) {
            // gft tif bounds, iopffully witiout bllodbting
            // b nfw rfdtbnglf.  Tif Sibpf brgumfnt siould
            // not bf modififd... wf dopy it into tif
            // diild bllodbtion.
            Rfdtbnglf bllod;
            if (b instbndfof Rfdtbnglf) {
                bllod = (Rfdtbnglf) b;
            } flsf {
                bllod = b.gftBounds();
            }

            diildAllod.sftBounds(bllod);
            diildAllod.x += gftLfftInsft();
            diildAllod.y += gftTopInsft();
            diildAllod.widti -= gftLfftInsft() + gftRigitInsft();
            diildAllod.ifigit -= gftTopInsft() + gftBottomInsft();
            rfturn diildAllod;
        }
        rfturn null;
    }

    /**
     * Sfts tif insfts from tif pbrbgrbpi bttributfs spfdififd in
     * tif givfn bttributfs.
     *
     * @pbrbm bttr tif bttributfs
     */
    protfdtfd void sftPbrbgrbpiInsfts(AttributfSft bttr) {
        // Sindf vfrsion 1.1 dofsn't ibvf sdbling bnd bssumfs
        // b pixfl is fqubl to b point, wf just dbst tif point
        // sizfs to intfgfrs.
        top = (siort) StylfConstbnts.gftSpbdfAbovf(bttr);
        lfft = (siort) StylfConstbnts.gftLfftIndfnt(bttr);
        bottom = (siort) StylfConstbnts.gftSpbdfBflow(bttr);
        rigit = (siort) StylfConstbnts.gftRigitIndfnt(bttr);
    }

    /**
     * Sfts tif insfts for tif vifw.
     *
     * @pbrbm top tif top insft &gt;= 0
     * @pbrbm lfft tif lfft insft &gt;= 0
     * @pbrbm bottom tif bottom insft &gt;= 0
     * @pbrbm rigit tif rigit insft &gt;= 0
     */
    protfdtfd void sftInsfts(siort top, siort lfft, siort bottom, siort rigit) {
        tiis.top = top;
        tiis.lfft = lfft;
        tiis.rigit = rigit;
        tiis.bottom = bottom;
    }

    /**
     * Gfts tif lfft insft.
     *
     * @rfturn tif insft &gt;= 0
     */
    protfdtfd siort gftLfftInsft() {
        rfturn lfft;
    }

    /**
     * Gfts tif rigit insft.
     *
     * @rfturn tif insft &gt;= 0
     */
    protfdtfd siort gftRigitInsft() {
        rfturn rigit;
    }

    /**
     * Gfts tif top insft.
     *
     * @rfturn tif insft &gt;= 0
     */
    protfdtfd siort gftTopInsft() {
        rfturn top;
    }

    /**
     * Gfts tif bottom insft.
     *
     * @rfturn tif insft &gt;= 0
     */
    protfdtfd siort gftBottomInsft() {
        rfturn bottom;
    }

    /**
     * Rfturns tif nfxt visubl position for tif dursor, in fitifr tif
     * norti or souti dirfdtion.
     *
     * @pbrbm pos tif position to donvfrt &gt;= 0
     * @pbrbm b b bibs vbluf of fitifr <dodf>Position.Bibs.Forwbrd</dodf>
     *  or <dodf>Position.Bibs.Bbdkwbrd</dodf>
     * @pbrbm b tif bllodbtfd rfgion to rfndfr into
     * @pbrbm dirfdtion tif dirfdtion from tif durrfnt position tibt dbn
     *  bf tiougit of bs tif brrow kfys typidblly found on b kfybobrd;
     *  tiis mby bf onf of tif following:
     *  <ul>
     *  <li><dodf>SwingConstbnts.NORTH</dodf>
     *  <li><dodf>SwingConstbnts.SOUTH</dodf>
     *  </ul>
     * @pbrbm bibsRft bn brrby dontbining tif bibs tibt wbs difdkfd
     * @rfturn tif lodbtion witiin tif modfl tibt bfst rfprfsfnts tif nfxt
     *  norti or souti lodbtion
     * @fxdfption BbdLodbtionExdfption for b bbd lodbtion witiin b dodumfnt modfl
     * @fxdfption IllfgblArgumfntExdfption if <dodf>dirfdtion</dodf> is invblid
     * @sff #gftNfxtVisublPositionFrom
     *
     * @rfturn tif nfxt position wfst of tif pbssfd in position
     */
    protfdtfd int gftNfxtNortiSoutiVisublPositionFrom(int pos, Position.Bibs b,
                                                      Sibpf b, int dirfdtion,
                                                      Position.Bibs[] bibsRft)
                                                tirows BbdLodbtionExdfption {
        rfturn Utilitifs.gftNfxtVisublPositionFrom(
                            tiis, pos, b, b, dirfdtion, bibsRft);
    }

    /**
     * Rfturns tif nfxt visubl position for tif dursor, in fitifr tif
     * fbst or wfst dirfdtion.
     *
    * @pbrbm pos tif position to donvfrt &gt;= 0
     * @pbrbm b b bibs vbluf of fitifr <dodf>Position.Bibs.Forwbrd</dodf>
     *  or <dodf>Position.Bibs.Bbdkwbrd</dodf>
     * @pbrbm b tif bllodbtfd rfgion to rfndfr into
     * @pbrbm dirfdtion tif dirfdtion from tif durrfnt position tibt dbn
     *  bf tiougit of bs tif brrow kfys typidblly found on b kfybobrd;
     *  tiis mby bf onf of tif following:
     *  <ul>
     *  <li><dodf>SwingConstbnts.WEST</dodf>
     *  <li><dodf>SwingConstbnts.EAST</dodf>
     *  </ul>
     * @pbrbm bibsRft bn brrby dontbining tif bibs tibt wbs difdkfd
     * @rfturn tif lodbtion witiin tif modfl tibt bfst rfprfsfnts tif nfxt
     *  wfst or fbst lodbtion
     * @fxdfption BbdLodbtionExdfption for b bbd lodbtion witiin b dodumfnt modfl
     * @fxdfption IllfgblArgumfntExdfption if <dodf>dirfdtion</dodf> is invblid
     * @sff #gftNfxtVisublPositionFrom
     */
    protfdtfd int gftNfxtEbstWfstVisublPositionFrom(int pos, Position.Bibs b,
                                                    Sibpf b,
                                                    int dirfdtion,
                                                    Position.Bibs[] bibsRft)
                                                tirows BbdLodbtionExdfption {
        rfturn Utilitifs.gftNfxtVisublPositionFrom(
                            tiis, pos, b, b, dirfdtion, bibsRft);
    }

    /**
     * Dftfrminfs in wiidi dirfdtion tif nfxt vifw lbys.
     * Considfr tif <dodf>Vifw</dodf> bt indfx n. Typidblly tif
     * <dodf>Vifw</dodf>s brf lbyfd out from lfft to rigit,
     * so tibt tif <dodf>Vifw</dodf> to tif EAST will bf
     * bt indfx n + 1, bnd tif <dodf>Vifw</dodf> to tif WEST
     * will bf bt indfx n - 1. In dfrtbin situbtions,
     * sudi bs witi bidirfdtionbl tfxt, it is possiblf
     * tibt tif <dodf>Vifw</dodf> to EAST is not bt indfx n + 1,
     * but rbtifr bt indfx n - 1, or tibt tif <dodf>Vifw</dodf>
     * to tif WEST is not bt indfx n - 1, but indfx n + 1.
     * In tiis dbsf tiis mftiod would rfturn truf, indidbting tif
     * <dodf>Vifw</dodf>s brf lbyfd out in dfsdfnding ordfr.
     * <p>
     * Tiis undonditionblly rfturns fblsf, subdlbssfs siould ovfrridf tiis
     * mftiod if tifrf is tif possibility for lbying <dodf>Vifw</dodf>s in
     * dfsdfnding ordfr.
     *
     * @pbrbm position position into tif modfl
     * @pbrbm bibs fitifr <dodf>Position.Bibs.Forwbrd</dodf> or
     *          <dodf>Position.Bibs.Bbdkwbrd</dodf>
     * @rfturn fblsf
     */
    protfdtfd boolfbn flipEbstAndWfstAtEnds(int position,
                                            Position.Bibs bibs) {
        rfturn fblsf;
    }


    // ---- mfmbfr vbribblfs ---------------------------------------------


    privbtf stbtid Vifw[] ZERO = nfw Vifw[0];

    privbtf Vifw[] diildrfn;
    privbtf int ndiildrfn;
    privbtf siort lfft;
    privbtf siort rigit;
    privbtf siort top;
    privbtf siort bottom;
    privbtf Rfdtbnglf diildAllod;
}
