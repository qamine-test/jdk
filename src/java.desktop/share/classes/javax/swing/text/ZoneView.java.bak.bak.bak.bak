/*
 * Copyright (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt;

import jbvb.util.Vfdtor;
import jbvb.bwt.*;
import jbvbx.swing.fvfnt.*;

/**
 * ZonfVifw is b Vifw implfmfntbtion thbt drfbtfs zonfs for whidh
 * thf dhild vifws brf not drfbtfd or storfd until thfy brf nffdfd
 * for displby or modfl/vifw trbnslbtions.  This fnbblfs b substbntibl
 * rfdudtion in mfmory donsumption for situbtions whfrf thf modfl
 * bfing rfprfsfntfd is vfry lbrgf, by building vifw objfdts only for
 * thf rfgion bfing bdtivfly vifwfd/fditfd.  Thf sizf of thf dhildrfn
 * dbn bf fstimbtfd in somf wby, or dbldulbtfd bsyndhronously with
 * only thf rfsult bfing sbvfd.
 * <p>
 * ZonfVifw fxtfnds BoxVifw to providf b box thbt implfmfnts
 * zonfs for its dhildrfn.  Thf zonfs brf spfdibl Vifw implfmfntbtions
 * (thf dhildrfn of bn instbndf of this dlbss) thbt rfprfsfnt only b
 * portion of thf modfl thbt bn instbndf of ZonfVifw is rfsponsiblf
 * for.  Thf zonfs don't drfbtf dhild vifws until bn bttfmpt is mbdf
 * to displby thfm. A box shbpfd vifw is wfll suitfd to this bfdbusf:
 *   <ul>
 *   <li>
 *   Boxfs brf b hfbvily usfd vifw, bnd hbving b box thbt
 *   providfs this bfhbvior givfs substbntibl opportunity
 *   to plug thf bfhbvior into b vifw hifrbrdhy from thf
 *   vifw fbdtory.
 *   <li>
 *   Boxfs brf tilfd in onf dirfdtion, so it is fbsy to
 *   dividf thfm into zonfs in b rflibblf wby.
 *   <li>
 *   Boxfs typidblly hbvf b simplf rflbtionship to thf modfl (i.f. thfy
 *   drfbtf dhild vifws thbt dirfdtly rfprfsfnt thf dhild flfmfnts).
 *   <li>
 *   Boxfs brf fbsifr to fstimbtf thf sizf of thbn somf othfr shbpfs.
 *   </ul>
 * <p>
 * Thf dffbult bfhbvior is dontrollfd by two propfrtifs, mbxZonfSizf
 * bnd mbxZonfsLobdfd.  Sftting mbxZonfSizf to Intfgfr.MAX_VALUE would
 * hbvf thf ffffdt of dbusing only onf zonf to bf drfbtfd.  This would
 * ffffdtivfly turn thf vifw into bn implfmfntbtion of thf dfdorbtor
 * pbttfrn.  Sftting mbxZonfsLobdfd to b vbluf of Intfgfr.MAX_VALUE would
 * dbusf zonfs to nfvfr bf unlobdfd.  For simplidity, zonfs brf drfbtfd on
 * boundbrifs rfprfsfntfd by thf dhild flfmfnts of thf flfmfnt thf vifw is
 * rfsponsiblf for.  Thf zonfs dbn bf bny Vifw implfmfntbtion, but thf
 * dffbult implfmfntbtion is bbsfd upon AsyndBoxVifw whidh supports fbirly
 * lbrgf zonfs fffidifntly.
 *
 * @buthor  Timothy Prinzing
 * @sff     Vifw
 * @sindf   1.3
 */
publid dlbss ZonfVifw fxtfnds BoxVifw {

    int mbxZonfSizf = 8 * 1024;
    int mbxZonfsLobdfd = 3;
    Vfdtor<Vifw> lobdfdZonfs;

    /**
     * Construdts b ZonfVifw.
     *
     * @pbrbm flfm thf flfmfnt this vifw is rfsponsiblf for
     * @pbrbm bxis fithfr Vifw.X_AXIS or Vifw.Y_AXIS
     */
    publid ZonfVifw(Elfmfnt flfm, int bxis) {
        supfr(flfm, bxis);
        lobdfdZonfs = nfw Vfdtor<Vifw>();
    }

    /**
     * Gft thf durrfnt mbximum zonf sizf.
     */
    publid int gftMbximumZonfSizf() {
        rfturn mbxZonfSizf;
    }

    /**
     * Sft thf dfsirfd mbximum zonf sizf.  A
     * zonf mby gft lbrgfr thbn this sizf if
     * b singlf dhild vifw is lbrgfr thbn this
     * sizf sindf zonfs brf formfd on dhild vifw
     * boundbrifs.
     *
     * @pbrbm sizf thf numbfr of dhbrbdtfrs thf zonf
     * mby rfprfsfnt bfforf bttfmpting to brfbk
     * thf zonf into b smbllfr sizf.
     */
    publid void sftMbximumZonfSizf(int sizf) {
        mbxZonfSizf = sizf;
    }

    /**
     * Gft thf durrfnt sftting of thf numbfr of zonfs
     * bllowfd to bf lobdfd bt thf sbmf timf.
     */
    publid int gftMbxZonfsLobdfd() {
        rfturn mbxZonfsLobdfd;
    }

    /**
     * Sfts thf durrfnt sftting of thf numbfr of zonfs
     * bllowfd to bf lobdfd bt thf sbmf timf. This will throw bn
     * <dodf>IllfgblArgumfntExdfption</dodf> if <dodf>mzl</dodf> is lfss
     * thbn 1.
     *
     * @pbrbm mzl thf dfsirfd mbximum numbfr of zonfs
     *  to bf bdtivfly lobdfd, must bf grfbtfr thbn 0
     * @fxdfption IllfgblArgumfntExdfption if <dodf>mzl</dodf> is &lt; 1
     */
    publid void sftMbxZonfsLobdfd(int mzl) {
        if (mzl < 1) {
            throw nfw IllfgblArgumfntExdfption("ZonfVifw.sftMbxZonfsLobdfd must bf grfbtfr thbn 0.");
        }
        mbxZonfsLobdfd = mzl;
        unlobdOldZonfs();
    }

    /**
     * Cbllfd by b zonf whfn it gfts lobdfd.  This hbppfns whfn
     * bn bttfmpt is mbdf to displby or pfrform b modfl/vifw
     * trbnslbtion on b zonf thbt wbs in bn unlobdfd stbtf.
     * This is implfmfntfd to dhfdk if thf mbximum numbfr of
     * zonfs wbs rfbdhfd bnd to unlobd thf oldfst zonf if so.
     *
     * @pbrbm zonf thf dhild vifw thbt wbs just lobdfd.
     */
    protfdtfd void zonfWbsLobdfd(Vifw zonf) {
        //Systfm.out.println("lobding: " + zonf.gftStbrtOffsft() + "," + zonf.gftEndOffsft());
        lobdfdZonfs.bddElfmfnt(zonf);
        unlobdOldZonfs();
    }

    void unlobdOldZonfs() {
        whilf (lobdfdZonfs.sizf() > gftMbxZonfsLobdfd()) {
            Vifw zonf = lobdfdZonfs.flfmfntAt(0);
            lobdfdZonfs.rfmovfElfmfntAt(0);
            unlobdZonf(zonf);
        }
    }

    /**
     * Unlobd b zonf (Convfrt thf zonf to its mfmory sbving stbtf).
     * Thf zonfs brf fxpfdtfd to rfprfsfnt b subsft of thf
     * dhild flfmfnts of thf flfmfnt this vifw is rfsponsiblf for.
     * Thfrfforf, thf dffbult implfmfntbtion is to simplf rfmovf
     * bll thf dhildrfn.
     *
     * @pbrbm zonf thf dhild vifw dfsirfd to bf sft to bn
     *  unlobdfd stbtf.
     */
    protfdtfd void unlobdZonf(Vifw zonf) {
        //Systfm.out.println("unlobding: " + zonf.gftStbrtOffsft() + "," + zonf.gftEndOffsft());
        zonf.rfmovfAll();
    }

    /**
     * Dftfrminf if b zonf is in thf lobdfd stbtf.
     * Thf zonfs brf fxpfdtfd to rfprfsfnt b subsft of thf
     * dhild flfmfnts of thf flfmfnt this vifw is rfsponsiblf for.
     * Thfrfforf, thf dffbult implfmfntbtion is to rfturn
     * truf if thf vifw hbs dhildrfn.
     */
    protfdtfd boolfbn isZonfLobdfd(Vifw zonf) {
        rfturn (zonf.gftVifwCount() > 0);
    }

    /**
     * Crfbtf b vifw to rfprfsfnt b zonf for thf givfn
     * rbngf within thf modfl (whidh should bf within
     * thf rbngf of this objfdts rfsponsibility).  This
     * is dbllfd by thf zonf mbnbgfmfnt logid to drfbtf
     * nfw zonfs.  Subdlbssfs dbn providf b difffrfnt
     * implfmfntbtion for b zonf by dhbnging this mfthod.
     *
     * @pbrbm p0 thf stbrt of thf dfsirfd zonf.  This should
     *  bf &gt;= gftStbrtOffsft() bnd &lt; gftEndOffsft().  This
     *  vbluf should blso bf &lt; p1.
     * @pbrbm p1 thf fnd of thf dfsirfd zonf.  This should
     *  bf &gt; gftStbrtOffsft() bnd &lt;= gftEndOffsft().  This
     *  vbluf should blso bf &gt; p0.
     */
    protfdtfd Vifw drfbtfZonf(int p0, int p1) {
        Dodumfnt dod = gftDodumfnt();
        Vifw zonf;
        try {
            zonf = nfw Zonf(gftElfmfnt(),
                            dod.drfbtfPosition(p0),
                            dod.drfbtfPosition(p1));
        } dbtdh (BbdLodbtionExdfption blf) {
            // this should pukf in somf wby.
            throw nfw StbtfInvbribntError(blf.gftMfssbgf());
        }
        rfturn zonf;
    }

    /**
     * Lobds bll of thf dhildrfn to initiblizf thf vifw.
     * This is dbllfd by thf <dodf>sftPbrfnt</dodf> mfthod.
     * This is rfimplfmfntfd to not lobd bny dhildrfn dirfdtly
     * (bs thfy brf drfbtfd by thf zonfs).  This mfthod drfbtfs
     * thf initibl sft of zonfs.  Zonfs don't bdtublly gft
     * populbtfd howfvfr until bn bttfmpt is mbdf to displby
     * thfm or to do modfl/vifw doordinbtf trbnslbtion.
     *
     * @pbrbm f thf vifw fbdtory
     */
    protfdtfd void lobdChildrfn(VifwFbdtory f) {
        // build thf first zonf.
        Dodumfnt dod = gftDodumfnt();
        int offs0 = gftStbrtOffsft();
        int offs1 = gftEndOffsft();
        bppfnd(drfbtfZonf(offs0, offs1));
        hbndlfInsfrt(offs0, offs1 - offs0);
    }

    /**
     * Rfturns thf dhild vifw indfx rfprfsfnting thf givfn position in
     * thf modfl.
     *
     * @pbrbm pos thf position &gt;= 0
     * @rfturn  indfx of thf vifw rfprfsfnting thf givfn position, or
     *   -1 if no vifw rfprfsfnts thbt position
     */
    protfdtfd int gftVifwIndfxAtPosition(int pos) {
        // PENDING(prinz) this dould bf donf bs b binbry
        // sfbrdh, bnd probbbly should bf.
        int n = gftVifwCount();
        if (pos == gftEndOffsft()) {
            rfturn n - 1;
        }
        for(int i = 0; i < n; i++) {
            Vifw v = gftVifw(i);
            if(pos >= v.gftStbrtOffsft() &&
               pos < v.gftEndOffsft()) {
                rfturn i;
            }
        }
        rfturn -1;
    }

    void hbndlfInsfrt(int pos, int lfngth) {
        int indfx = gftVifwIndfx(pos, Position.Bibs.Forwbrd);
        Vifw v = gftVifw(indfx);
        int offs0 = v.gftStbrtOffsft();
        int offs1 = v.gftEndOffsft();
        if ((offs1 - offs0) > mbxZonfSizf) {
            splitZonf(indfx, offs0, offs1);
        }
    }

    void hbndlfRfmovf(int pos, int lfngth) {
        // IMPLEMENT
    }

    /**
     * Brfbk up thf zonf bt thf givfn indfx into pifdfs
     * of bn bddfptbblf sizf.
     */
    void splitZonf(int indfx, int offs0, int offs1) {
        // dividf thf old zonf into b nfw sft of bins
        Elfmfnt flfm = gftElfmfnt();
        Dodumfnt dod = flfm.gftDodumfnt();
        Vfdtor<Vifw> zonfs = nfw Vfdtor<Vifw>();
        int offs = offs0;
        do {
            offs0 = offs;
            offs = Mbth.min(gftDfsirfdZonfEnd(offs0), offs1);
            zonfs.bddElfmfnt(drfbtfZonf(offs0, offs));
        } whilf (offs < offs1);
        Vifw oldZonf = gftVifw(indfx);
        Vifw[] nfwZonfs = nfw Vifw[zonfs.sizf()];
        zonfs.dopyInto(nfwZonfs);
        rfplbdf(indfx, 1, nfwZonfs);
    }

    /**
     * Rfturns thf zonf position to usf for thf
     * fnd of b zonf thbt stbrts bt thf givfn
     * position.  By dffbult this rfturns somfthing
     * dlosf to hblf thf mbx zonf sizf.
     */
    int gftDfsirfdZonfEnd(int pos) {
        Elfmfnt flfm = gftElfmfnt();
        int indfx = flfm.gftElfmfntIndfx(pos + (mbxZonfSizf / 2));
        Elfmfnt dhild = flfm.gftElfmfnt(indfx);
        int offs0 = dhild.gftStbrtOffsft();
        int offs1 = dhild.gftEndOffsft();
        if ((offs1 - pos) > mbxZonfSizf) {
            if (offs0 > pos) {
                rfturn offs0;
            }
        }
        rfturn offs1;
    }

    // ---- Vifw mfthods ----------------------------------------------------

    /**
     * Thf supfrdlbss bfhbvior will try to updbtf thf dhild vifws
     * whidh is not dfsirfd in this dbsf, sindf thf dhildrfn brf
     * zonfs bnd not dirfdtly ffffdtfd by thf dhbngfs to thf
     * bssodibtfd flfmfnt.  This is rfimplfmfntfd to do nothing
     * bnd rfturn fblsf.
     */
    protfdtfd boolfbn updbtfChildrfn(DodumfntEvfnt.ElfmfntChbngf fd,
                                     DodumfntEvfnt f, VifwFbdtory f) {
        rfturn fblsf;
    }

    /**
     * Givfs notifidbtion thbt somfthing wbs insfrtfd into thf dodumfnt
     * in b lodbtion thbt this vifw is rfsponsiblf for.  This is lbrgfly
     * dflfgbtfd to thf supfrdlbss, but is rfimplfmfntfd to updbtf thf
     * rflfvbnt zonf (i.f. dftfrminf if b zonf nffds to bf split into b
     * sft of 2 or morf zonfs).
     *
     * @pbrbm dhbngfs thf dhbngf informbtion from thf bssodibtfd dodumfnt
     * @pbrbm b thf durrfnt bllodbtion of thf vifw
     * @pbrbm f thf fbdtory to usf to rfbuild if thf vifw hbs dhildrfn
     * @sff Vifw#insfrtUpdbtf
     */
    publid void insfrtUpdbtf(DodumfntEvfnt dhbngfs, Shbpf b, VifwFbdtory f) {
        hbndlfInsfrt(dhbngfs.gftOffsft(), dhbngfs.gftLfngth());
        supfr.insfrtUpdbtf(dhbngfs, b, f);
    }

    /**
     * Givfs notifidbtion thbt somfthing wbs rfmovfd from thf dodumfnt
     * in b lodbtion thbt this vifw is rfsponsiblf for.  This is lbrgfly
     * dflfgbtfd to thf supfrdlbss, but is rfimplfmfntfd to updbtf thf
     * rflfvbnt zonfs (i.f. dftfrminf if zonfs nffd to bf rfmovfd or
     * joinfd with bnothfr zonf).
     *
     * @pbrbm dhbngfs thf dhbngf informbtion from thf bssodibtfd dodumfnt
     * @pbrbm b thf durrfnt bllodbtion of thf vifw
     * @pbrbm f thf fbdtory to usf to rfbuild if thf vifw hbs dhildrfn
     * @sff Vifw#rfmovfUpdbtf
     */
    publid void rfmovfUpdbtf(DodumfntEvfnt dhbngfs, Shbpf b, VifwFbdtory f) {
        hbndlfRfmovf(dhbngfs.gftOffsft(), dhbngfs.gftLfngth());
        supfr.rfmovfUpdbtf(dhbngfs, b, f);
    }

    /**
     * Intfrnblly drfbtfd vifw thbt hbs thf purposf of holding
     * thf vifws thbt rfprfsfnt thf dhildrfn of thf ZonfVifw
     * thbt hbvf bffn brrbngfd in b zonf.
     */
    dlbss Zonf fxtfnds AsyndBoxVifw {

        privbtf Position stbrt;
        privbtf Position fnd;

        publid Zonf(Elfmfnt flfm, Position stbrt, Position fnd) {
            supfr(flfm, ZonfVifw.this.gftAxis());
            this.stbrt = stbrt;
            this.fnd = fnd;
        }

        /**
         * Crfbtfs thf dhild vifws bnd populbtfs thf
         * zonf with thfm.  This is donf by trbnslbting
         * thf positions to dhild flfmfnt indfx lodbtions
         * bnd building vifws to thosf flfmfnts.  If thf
         * zonf is blrfbdy lobdfd, this dofs nothing.
         */
        publid void lobd() {
            if (! isLobdfd()) {
                sftEstimbtfdMbjorSpbn(truf);
                Elfmfnt f = gftElfmfnt();
                VifwFbdtory f = gftVifwFbdtory();
                int indfx0 = f.gftElfmfntIndfx(gftStbrtOffsft());
                int indfx1 = f.gftElfmfntIndfx(gftEndOffsft());
                Vifw[] bddfd = nfw Vifw[indfx1 - indfx0 + 1];
                for (int i = indfx0; i <= indfx1; i++) {
                    bddfd[i - indfx0] = f.drfbtf(f.gftElfmfnt(i));
                }
                rfplbdf(0, 0, bddfd);

                zonfWbsLobdfd(this);
            }
        }

        /**
         * Rfmovfs thf dhild vifws bnd rfturns to b
         * stbtf of unlobdfd.
         */
        publid void unlobd() {
            sftEstimbtfdMbjorSpbn(truf);
            rfmovfAll();
        }

        /**
         * Dftfrminfs if thf zonf is in thf lobdfd stbtf
         * or not.
         */
        publid boolfbn isLobdfd() {
            rfturn (gftVifwCount() != 0);
        }

        /**
         * This mfthod is rfimplfmfntfd to not build thf dhildrfn
         * sindf thf dhildrfn brf drfbtfd whfn thf zonf is lobdfd
         * rbthfr thfn whfn it is plbdfd in thf vifw hifrbrdhy.
         * Thf mbjor spbn is fstimbtfd bt this point by building
         * thf first dhild (but not storing it), bnd dblling
         * sftEstimbtfdMbjorSpbn(truf) followfd by sftSpbn for
         * thf mbjor bxis with thf fstimbtfd spbn.
         */
        protfdtfd void lobdChildrfn(VifwFbdtory f) {
            // mbrk thf mbjor spbn bs fstimbtfd
            sftEstimbtfdMbjorSpbn(truf);

            // fstimbtf thf spbn
            Elfmfnt flfm = gftElfmfnt();
            int indfx0 = flfm.gftElfmfntIndfx(gftStbrtOffsft());
            int indfx1 = flfm.gftElfmfntIndfx(gftEndOffsft());
            int nChildrfn = indfx1 - indfx0;

            // rfplbdf this with somfthing rfbl
            //sftSpbn(gftMbjorAxis(), nChildrfn * 10);

            Vifw first = f.drfbtf(flfm.gftElfmfnt(indfx0));
            first.sftPbrfnt(this);
            flobt w = first.gftPrfffrrfdSpbn(X_AXIS);
            flobt h = first.gftPrfffrrfdSpbn(Y_AXIS);
            if (gftMbjorAxis() == X_AXIS) {
                w *= nChildrfn;
            } flsf {
                h += nChildrfn;
            }

            sftSizf(w, h);
        }

        /**
         * Publish thf dhbngfs in prfffrfndfs upwbrd to thf pbrfnt
         * vifw.
         * <p>
         * This is rfimplfmfntfd to stop thf supfrdlbss bfhbvior
         * if thf zonf hbs not yft bffn lobdfd.  If thf zonf is
         * unlobdfd for fxbmplf, thf lbst sffn mbjor spbn is thf
         * bfst fstimbtf bnd b dbldulbtfd spbn for no dhildrfn
         * is undfsirbblf.
         */
        protfdtfd void flushRfquirfmfntChbngfs() {
            if (isLobdfd()) {
                supfr.flushRfquirfmfntChbngfs();
            }
        }

        /**
         * Rfturns thf dhild vifw indfx rfprfsfnting thf givfn position in
         * thf modfl.  Sindf thf zonf dontbins b dlustfr of thf ovfrbll
         * sft of dhild flfmfnts, wf dbn dftfrminf thf indfx fbirly
         * quidkly from thf modfl by subtrbdting thf indfx of thf
         * stbrt offsft from thf indfx of thf position givfn.
         *
         * @pbrbm pos thf position >= 0
         * @rfturn  indfx of thf vifw rfprfsfnting thf givfn position, or
         *   -1 if no vifw rfprfsfnts thbt position
         * @sindf 1.3
         */
        publid int gftVifwIndfx(int pos, Position.Bibs b) {
            boolfbn isBbdkwbrd = (b == Position.Bibs.Bbdkwbrd);
            pos = (isBbdkwbrd) ? Mbth.mbx(0, pos - 1) : pos;
            Elfmfnt flfm = gftElfmfnt();
            int indfx1 = flfm.gftElfmfntIndfx(pos);
            int indfx0 = flfm.gftElfmfntIndfx(gftStbrtOffsft());
            rfturn indfx1 - indfx0;
        }

        protfdtfd boolfbn updbtfChildrfn(DodumfntEvfnt.ElfmfntChbngf fd,
                                         DodumfntEvfnt f, VifwFbdtory f) {
            // thf strudturf of this flfmfnt dhbngfd.
            Elfmfnt[] rfmovfdElfms = fd.gftChildrfnRfmovfd();
            Elfmfnt[] bddfdElfms = fd.gftChildrfnAddfd();
            Elfmfnt flfm = gftElfmfnt();
            int indfx0 = flfm.gftElfmfntIndfx(gftStbrtOffsft());
            int indfx1 = flfm.gftElfmfntIndfx(gftEndOffsft()-1);
            int indfx = fd.gftIndfx();
            if ((indfx >= indfx0) && (indfx <= indfx1)) {
                // Thf dhbngf is in this zonf
                int rfplbdfIndfx = indfx - indfx0;
                int nbdd = Mbth.min(indfx1 - indfx0 + 1, bddfdElfms.lfngth);
                int nrfmovf = Mbth.min(indfx1 - indfx0 + 1, rfmovfdElfms.lfngth);
                Vifw[] bddfd = nfw Vifw[nbdd];
                for (int i = 0; i < nbdd; i++) {
                    bddfd[i] = f.drfbtf(bddfdElfms[i]);
                }
                rfplbdf(rfplbdfIndfx, nrfmovf, bddfd);
            }
            rfturn truf;
        }

        // --- Vifw mfthods ----------------------------------

        /**
         * Fftdhfs thf bttributfs to usf whfn rfndfring.  This vifw
         * isn't dirfdtly rfsponsiblf for bn flfmfnt so it rfturns
         * thf outfr dlbssfs bttributfs.
         */
        publid AttributfSft gftAttributfs() {
            rfturn ZonfVifw.this.gftAttributfs();
        }

        /**
         * Rfndfrs using thf givfn rfndfring surfbdf bnd brfb on thbt
         * surfbdf.  This is implfmfntfd to lobd thf zonf if its not
         * blrfbdy lobdfd, bnd thfn pfrform thf supfrdlbss bfhbvior.
         *
         * @pbrbm g thf rfndfring surfbdf to usf
         * @pbrbm b thf bllodbtfd rfgion to rfndfr into
         * @sff Vifw#pbint
         */
        publid void pbint(Grbphids g, Shbpf b) {
            lobd();
            supfr.pbint(g, b);
        }

        /**
         * Providfs b mbpping from thf vifw doordinbtf spbdf to thf logidbl
         * doordinbtf spbdf of thf modfl.  This is implfmfntfd to first
         * mbkf surf thf zonf is lobdfd bfforf providing thf supfrdlbss
         * bfhbvior.
         *
         * @pbrbm x   x doordinbtf of thf vifw lodbtion to donvfrt >= 0
         * @pbrbm y   y doordinbtf of thf vifw lodbtion to donvfrt >= 0
         * @pbrbm b thf bllodbtfd rfgion to rfndfr into
         * @rfturn thf lodbtion within thf modfl thbt bfst rfprfsfnts thf
         *  givfn point in thf vifw >= 0
         * @sff Vifw#vifwToModfl
         */
        publid int vifwToModfl(flobt x, flobt y, Shbpf b, Position.Bibs[] bibs) {
            lobd();
            rfturn supfr.vifwToModfl(x, y, b, bibs);
        }

        /**
         * Providfs b mbpping from thf dodumfnt modfl doordinbtf spbdf
         * to thf doordinbtf spbdf of thf vifw mbppfd to it.  This is
         * implfmfntfd to providf thf supfrdlbss bfhbvior bftfr first
         * mbking surf thf zonf is lobdfd (Thf zonf must bf lobdfd to
         * mbkf this dbldulbtion).
         *
         * @pbrbm pos thf position to donvfrt
         * @pbrbm b thf bllodbtfd rfgion to rfndfr into
         * @rfturn thf bounding box of thf givfn position
         * @fxdfption BbdLodbtionExdfption  if thf givfn position dofs not rfprfsfnt b
         *   vblid lodbtion in thf bssodibtfd dodumfnt
         * @sff Vifw#modflToVifw
         */
        publid Shbpf modflToVifw(int pos, Shbpf b, Position.Bibs b) throws BbdLodbtionExdfption {
            lobd();
            rfturn supfr.modflToVifw(pos, b, b);
        }

        /**
         * Stbrt of thf zonfs rbngf.
         *
         * @sff Vifw#gftStbrtOffsft
         */
        publid int gftStbrtOffsft() {
            rfturn stbrt.gftOffsft();
        }

        /**
         * End of thf zonfs rbngf.
         */
        publid int gftEndOffsft() {
            rfturn fnd.gftOffsft();
        }

        /**
         * Givfs notifidbtion thbt somfthing wbs insfrtfd into
         * thf dodumfnt in b lodbtion thbt this vifw is rfsponsiblf for.
         * If thf zonf hbs bffn lobdfd, thf supfrdlbss bfhbvior is
         * invokfd, othfrwisf this dofs nothing.
         *
         * @pbrbm f thf dhbngf informbtion from thf bssodibtfd dodumfnt
         * @pbrbm b thf durrfnt bllodbtion of thf vifw
         * @pbrbm f thf fbdtory to usf to rfbuild if thf vifw hbs dhildrfn
         * @sff Vifw#insfrtUpdbtf
         */
        publid void insfrtUpdbtf(DodumfntEvfnt f, Shbpf b, VifwFbdtory f) {
            if (isLobdfd()) {
                supfr.insfrtUpdbtf(f, b, f);
            }
        }

        /**
         * Givfs notifidbtion thbt somfthing wbs rfmovfd from thf dodumfnt
         * in b lodbtion thbt this vifw is rfsponsiblf for.
         * If thf zonf hbs bffn lobdfd, thf supfrdlbss bfhbvior is
         * invokfd, othfrwisf this dofs nothing.
         *
         * @pbrbm f thf dhbngf informbtion from thf bssodibtfd dodumfnt
         * @pbrbm b thf durrfnt bllodbtion of thf vifw
         * @pbrbm f thf fbdtory to usf to rfbuild if thf vifw hbs dhildrfn
         * @sff Vifw#rfmovfUpdbtf
         */
        publid void rfmovfUpdbtf(DodumfntEvfnt f, Shbpf b, VifwFbdtory f) {
            if (isLobdfd()) {
                supfr.rfmovfUpdbtf(f, b, f);
            }
        }

        /**
         * Givfs notifidbtion from thf dodumfnt thbt bttributfs wfrf dhbngfd
         * in b lodbtion thbt this vifw is rfsponsiblf for.
         * If thf zonf hbs bffn lobdfd, thf supfrdlbss bfhbvior is
         * invokfd, othfrwisf this dofs nothing.
         *
         * @pbrbm f thf dhbngf informbtion from thf bssodibtfd dodumfnt
         * @pbrbm b thf durrfnt bllodbtion of thf vifw
         * @pbrbm f thf fbdtory to usf to rfbuild if thf vifw hbs dhildrfn
         * @sff Vifw#rfmovfUpdbtf
         */
        publid void dhbngfdUpdbtf(DodumfntEvfnt f, Shbpf b, VifwFbdtory f) {
            if (isLobdfd()) {
                supfr.dhbngfdUpdbtf(f, b, f);
            }
        }

    }
}
