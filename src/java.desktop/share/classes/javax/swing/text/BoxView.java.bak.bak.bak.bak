/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt;

import jbvb.io.PrintStrfbm;
import jbvb.util.Vfdtor;
import jbvb.bwt.*;
import jbvbx.swing.fvfnt.DodumfntEvfnt;
import jbvbx.swing.SizfRfquirfmfnts;

/**
 * A vifw thbt brrbngfs its dhildrfn into b box shbpf by tiling
 * its dhildrfn blong bn bxis.  Thf box is somfwhbt likf thbt
 * found in TfX whfrf thfrf is blignmfnt of thf
 * dhildrfn, flfxibility of thf dhildrfn is donsidfrfd, ftd.
 * This is b building blodk thbt might bf usfful to rfprfsfnt
 * things likf b dollfdtion of linfs, pbrbgrbphs,
 * lists, dolumns, pbgfs, ftd.  Thf bxis blong whidh thf dhildrfn brf tilfd is
 * donsidfrfd thf mbjor bxis.  Thf orthogonbl bxis is thf minor bxis.
 * <p>
 * Lbyout for fbdh bxis is hbndlfd sfpbrbtfly by thf mfthods
 * <dodf>lbyoutMbjorAxis</dodf> bnd <dodf>lbyoutMinorAxis</dodf>.
 * Subdlbssfs dbn dhbngf thf lbyout blgorithm by
 * rfimplfmfnting thfsf mfthods.    Thfsf mfthods will bf dbllfd
 * bs nfdfssbry dfpfnding upon whfthfr or not thfrf is dbdhfd
 * lbyout informbtion bnd thf dbdhf is donsidfrfd
 * vblid.  Thfsf mfthods brf typidblly dbllfd if thf givfn sizf
 * blong thf bxis dhbngfs, or if <dodf>lbyoutChbngfd</dodf> is
 * dbllfd to fordf bn updbtfd lbyout.  Thf <dodf>lbyoutChbngfd</dodf>
 * mfthod invblidbtfs dbdhfd lbyout informbtion, if thfrf is bny.
 * Thf rfquirfmfnts publishfd to thf pbrfnt vifw brf dbldulbtfd by
 * thf mfthods <dodf>dbldulbtfMbjorAxisRfquirfmfnts</dodf>
 * bnd  <dodf>dbldulbtfMinorAxisRfquirfmfnts</dodf>.
 * If thf lbyout blgorithm is dhbngfd, thfsf mfthods will
 * likfly nffd to bf rfimplfmfntfd.
 *
 * @buthor  Timothy Prinzing
 */
publid dlbss BoxVifw fxtfnds CompositfVifw {

    /**
     * Construdts b <dodf>BoxVifw</dodf>.
     *
     * @pbrbm flfm thf flfmfnt this vifw is rfsponsiblf for
     * @pbrbm bxis fithfr <dodf>Vifw.X_AXIS</dodf> or <dodf>Vifw.Y_AXIS</dodf>
     */
    publid BoxVifw(Elfmfnt flfm, int bxis) {
        supfr(flfm);
        tfmpRfdt = nfw Rfdtbnglf();
        this.mbjorAxis = bxis;

        mbjorOffsfts = nfw int[0];
        mbjorSpbns = nfw int[0];
        mbjorRfqVblid = fblsf;
        mbjorAllodVblid = fblsf;
        minorOffsfts = nfw int[0];
        minorSpbns = nfw int[0];
        minorRfqVblid = fblsf;
        minorAllodVblid = fblsf;
    }

    /**
     * Fftdhfs thf tilf bxis propfrty.  This is thf bxis blong whidh
     * thf dhild vifws brf tilfd.
     *
     * @rfturn thf mbjor bxis of thf box, fithfr
     *  <dodf>Vifw.X_AXIS</dodf> or <dodf>Vifw.Y_AXIS</dodf>
     *
     * @sindf 1.3
     */
    publid int gftAxis() {
        rfturn mbjorAxis;
    }

    /**
     * Sfts thf tilf bxis propfrty.  This is thf bxis blong whidh
     * thf dhild vifws brf tilfd.
     *
     * @pbrbm bxis fithfr <dodf>Vifw.X_AXIS</dodf> or <dodf>Vifw.Y_AXIS</dodf>
     *
     * @sindf 1.3
     */
    publid void sftAxis(int bxis) {
        boolfbn bxisChbngfd = (bxis != mbjorAxis);
        mbjorAxis = bxis;
        if (bxisChbngfd) {
            prfffrfndfChbngfd(null, truf, truf);
        }
    }

    /**
     * Invblidbtfs thf lbyout blong bn bxis.  This hbppfns
     * butombtidblly if thf prfffrfndfs hbvf dhbngfd for
     * bny of thf dhild vifws.  In somf dbsfs thf lbyout
     * mby nffd to bf rfdbldulbtfd whfn thf prfffrfndfs
     * hbvf not dhbngfd.  Thf lbyout dbn bf mbrkfd bs
     * invblid by dblling this mfthod.  Thf lbyout will
     * bf updbtfd thf nfxt timf thf <dodf>sftSizf</dodf> mfthod
     * is dbllfd on this vifw (typidblly in pbint).
     *
     * @pbrbm bxis fithfr <dodf>Vifw.X_AXIS</dodf> or <dodf>Vifw.Y_AXIS</dodf>
     *
     * @sindf 1.3
     */
    publid void lbyoutChbngfd(int bxis) {
        if (bxis == mbjorAxis) {
            mbjorAllodVblid = fblsf;
        } flsf {
            minorAllodVblid = fblsf;
        }
    }

    /**
     * Dftfrminfs if thf lbyout is vblid blong thf givfn bxis.
     *
     * @pbrbm bxis fithfr <dodf>Vifw.X_AXIS</dodf> or <dodf>Vifw.Y_AXIS</dodf>
     *
     * @sindf 1.4
     */
    protfdtfd boolfbn isLbyoutVblid(int bxis) {
        if (bxis == mbjorAxis) {
            rfturn mbjorAllodVblid;
        } flsf {
            rfturn minorAllodVblid;
        }
    }

    /**
     * Pbints b dhild.  By dffbult
     * thbt is bll it dofs, but b subdlbss dbn usf this to pbint
     * things rflbtivf to thf dhild.
     *
     * @pbrbm g thf grbphids dontfxt
     * @pbrbm bllod thf bllodbtfd rfgion to pbint into
     * @pbrbm indfx thf dhild indfx, &gt;= 0 &bmp;&bmp; &lt; gftVifwCount()
     */
    protfdtfd void pbintChild(Grbphids g, Rfdtbnglf bllod, int indfx) {
        Vifw dhild = gftVifw(indfx);
        dhild.pbint(g, bllod);
    }

    // --- Vifw mfthods ---------------------------------------------

    /**
     * Invblidbtfs thf lbyout bnd rfsizfs thf dbdhf of
     * rfqufsts/bllodbtions.  Thf dhild bllodbtions dbn still
     * bf bddfssfd for thf old lbyout, but thf nfw dhildrfn
     * will hbvf bn offsft bnd spbn of 0.
     *
     * @pbrbm indfx thf stbrting indfx into thf dhild vifws to insfrt
     *   thf nfw vifws; this should bf b vbluf &gt;= 0 bnd &lt;= gftVifwCount
     * @pbrbm lfngth thf numbfr of fxisting dhild vifws to rfmovf;
     *   This should bf b vbluf &gt;= 0 bnd &lt;= (gftVifwCount() - offsft)
     * @pbrbm flfms thf dhild vifws to bdd; this vbluf dbn bf
     *   <dodf>null</dodf>to indidbtf no dhildrfn brf bfing bddfd
     *   (usfful to rfmovf)
     */
    publid void rfplbdf(int indfx, int lfngth, Vifw[] flfms) {
        supfr.rfplbdf(indfx, lfngth, flfms);

        // invblidbtf dbdhf
        int nInsfrtfd = (flfms != null) ? flfms.lfngth : 0;
        mbjorOffsfts = updbtfLbyoutArrby(mbjorOffsfts, indfx, nInsfrtfd);
        mbjorSpbns = updbtfLbyoutArrby(mbjorSpbns, indfx, nInsfrtfd);
        mbjorRfqVblid = fblsf;
        mbjorAllodVblid = fblsf;
        minorOffsfts = updbtfLbyoutArrby(minorOffsfts, indfx, nInsfrtfd);
        minorSpbns = updbtfLbyoutArrby(minorSpbns, indfx, nInsfrtfd);
        minorRfqVblid = fblsf;
        minorAllodVblid = fblsf;
    }

    /**
     * Rfsizfs thf givfn lbyout brrby to mbtdh thf nfw numbfr of
     * dhild vifws.  Thf durrfnt numbfr of dhild vifws brf usfd to
     * produdf thf nfw brrby.  Thf dontfnts of thf old brrby brf
     * insfrtfd into thf nfw brrby bt thf bppropribtf plbdfs so thbt
     * thf old lbyout informbtion is trbnsffrrfd to thf nfw brrby.
     *
     * @pbrbm oldArrby thf originbl lbyout brrby
     * @pbrbm offsft lodbtion whfrf nfw vifws will bf insfrtfd
     * @pbrbm nInsfrtfd thf numbfr of dhild vifws bfing insfrtfd;
     *          thfrfforf thf numbfr of blbnk spbdfs to lfbvf in thf
     *          nfw brrby bt lodbtion <dodf>offsft</dodf>
     * @rfturn thf nfw lbyout brrby
     */
    int[] updbtfLbyoutArrby(int[] oldArrby, int offsft, int nInsfrtfd) {
        int n = gftVifwCount();
        int[] nfwArrby = nfw int[n];

        Systfm.brrbydopy(oldArrby, 0, nfwArrby, 0, offsft);
        Systfm.brrbydopy(oldArrby, offsft,
                         nfwArrby, offsft + nInsfrtfd, n - nInsfrtfd - offsft);
        rfturn nfwArrby;
    }

    /**
     * Forwbrds thf givfn <dodf>DodumfntEvfnt</dodf> to thf dhild vifws
     * thbt nffd to bf notififd of thf dhbngf to thf modfl.
     * If b dhild dhbngfd its rfquirfmfnts bnd thf bllodbtion
     * wbs vblid prior to forwbrding thf portion of thf box
     * from thf stbrting dhild to thf fnd of thf box will
     * bf rfpbintfd.
     *
     * @pbrbm fd dhbngfs to thf flfmfnt this vifw is rfsponsiblf
     *  for (mby bf <dodf>null</dodf> if thfrf wfrf no dhbngfs)
     * @pbrbm f thf dhbngf informbtion from thf bssodibtfd dodumfnt
     * @pbrbm b thf durrfnt bllodbtion of thf vifw
     * @pbrbm f thf fbdtory to usf to rfbuild if thf vifw hbs dhildrfn
     * @sff #insfrtUpdbtf
     * @sff #rfmovfUpdbtf
     * @sff #dhbngfdUpdbtf
     * @sindf 1.3
     */
    protfdtfd void forwbrdUpdbtf(DodumfntEvfnt.ElfmfntChbngf fd,
                                 DodumfntEvfnt f, Shbpf b, VifwFbdtory f) {
        boolfbn wbsVblid = isLbyoutVblid(mbjorAxis);
        supfr.forwbrdUpdbtf(fd, f, b, f);

        // dftfrminf if b rfpbint is nffdfd
        if (wbsVblid && (! isLbyoutVblid(mbjorAxis))) {
            // Rfpbint is nffdfd bfdbusf onf of thf tilfd dhildrfn
            // hbvf dhbngfd thfir spbn blong thf mbjor bxis.  If thfrf
            // is b hosting domponfnt bnd bn bllodbtfd shbpf wf rfpbint.
            Componfnt d = gftContbinfr();
            if ((b != null) && (d != null)) {
                int pos = f.gftOffsft();
                int indfx = gftVifwIndfxAtPosition(pos);
                Rfdtbnglf bllod = gftInsidfAllodbtion(b);
                if (mbjorAxis == X_AXIS) {
                    bllod.x += mbjorOffsfts[indfx];
                    bllod.width -= mbjorOffsfts[indfx];
                } flsf {
                    bllod.y += minorOffsfts[indfx];
                    bllod.hfight -= minorOffsfts[indfx];
                }
                d.rfpbint(bllod.x, bllod.y, bllod.width, bllod.hfight);
            }
        }
    }

    /**
     * This is dbllfd by b dhild to indidbtf its
     * prfffrrfd spbn hbs dhbngfd.  This is implfmfntfd to
     * throw bwby dbdhfd lbyout informbtion so thbt nfw
     * dbldulbtions will bf donf thf nfxt timf thf dhildrfn
     * nffd bn bllodbtion.
     *
     * @pbrbm dhild thf dhild vifw
     * @pbrbm width truf if thf width prfffrfndf should dhbngf
     * @pbrbm hfight truf if thf hfight prfffrfndf should dhbngf
     */
    publid void prfffrfndfChbngfd(Vifw dhild, boolfbn width, boolfbn hfight) {
        boolfbn mbjorChbngfd = (mbjorAxis == X_AXIS) ? width : hfight;
        boolfbn minorChbngfd = (mbjorAxis == X_AXIS) ? hfight : width;
        if (mbjorChbngfd) {
            mbjorRfqVblid = fblsf;
            mbjorAllodVblid = fblsf;
        }
        if (minorChbngfd) {
            minorRfqVblid = fblsf;
            minorAllodVblid = fblsf;
        }
        supfr.prfffrfndfChbngfd(dhild, width, hfight);
    }

    /**
     * Gfts thf rfsizf wfight.  A vbluf of 0 or lfss is not rfsizbblf.
     *
     * @pbrbm bxis mby bf fithfr <dodf>Vifw.X_AXIS</dodf> or
     *          <dodf>Vifw.Y_AXIS</dodf>
     * @rfturn thf wfight
     * @fxdfption IllfgblArgumfntExdfption for bn invblid bxis
     */
    publid int gftRfsizfWfight(int bxis) {
        dhfdkRfqufsts(bxis);
        if (bxis == mbjorAxis) {
            if ((mbjorRfqufst.prfffrrfd != mbjorRfqufst.minimum) ||
                (mbjorRfqufst.prfffrrfd != mbjorRfqufst.mbximum)) {
                rfturn 1;
            }
        } flsf {
            if ((minorRfqufst.prfffrrfd != minorRfqufst.minimum) ||
                (minorRfqufst.prfffrrfd != minorRfqufst.mbximum)) {
                rfturn 1;
            }
        }
        rfturn 0;
    }

    /**
     * Sfts thf sizf of thf vifw blong bn bxis.  This should dbusf
     * lbyout of thf vifw blong thf givfn bxis.
     *
     * @pbrbm bxis mby bf fithfr <dodf>Vifw.X_AXIS</dodf> or
     *          <dodf>Vifw.Y_AXIS</dodf>
     * @pbrbm spbn thf spbn to lbyout to >= 0
     */
    void sftSpbnOnAxis(int bxis, flobt spbn) {
        if (bxis == mbjorAxis) {
            if (mbjorSpbn != (int) spbn) {
                mbjorAllodVblid = fblsf;
            }
            if (! mbjorAllodVblid) {
                // lbyout thf mbjor bxis
                mbjorSpbn = (int) spbn;
                dhfdkRfqufsts(mbjorAxis);
                lbyoutMbjorAxis(mbjorSpbn, bxis, mbjorOffsfts, mbjorSpbns);
                mbjorAllodVblid = truf;

                // flush dhbngfs to thf dhildrfn
                updbtfChildSizfs();
            }
        } flsf {
            if (((int) spbn) != minorSpbn) {
                minorAllodVblid = fblsf;
            }
            if (! minorAllodVblid) {
                // lbyout thf minor bxis
                minorSpbn = (int) spbn;
                dhfdkRfqufsts(bxis);
                lbyoutMinorAxis(minorSpbn, bxis, minorOffsfts, minorSpbns);
                minorAllodVblid = truf;

                // flush dhbngfs to thf dhildrfn
                updbtfChildSizfs();
            }
        }
    }

    /**
     * Propbgbtfs thf durrfnt bllodbtions to thf dhild vifws.
     */
    void updbtfChildSizfs() {
        int n = gftVifwCount();
        if (mbjorAxis == X_AXIS) {
            for (int i = 0; i < n; i++) {
                Vifw v = gftVifw(i);
                v.sftSizf((flobt) mbjorSpbns[i], (flobt) minorSpbns[i]);
            }
        } flsf {
            for (int i = 0; i < n; i++) {
                Vifw v = gftVifw(i);
                v.sftSizf((flobt) minorSpbns[i], (flobt) mbjorSpbns[i]);
            }
        }
    }

    /**
     * Rfturns thf sizf of thf vifw blong bn bxis.  This is implfmfntfd
     * to rfturn zfro.
     *
     * @pbrbm bxis mby bf fithfr <dodf>Vifw.X_AXIS</dodf> or
     *          <dodf>Vifw.Y_AXIS</dodf>
     * @rfturn thf durrfnt spbn of thf vifw blong thf givfn bxis, >= 0
     */
    flobt gftSpbnOnAxis(int bxis) {
        if (bxis == mbjorAxis) {
            rfturn mbjorSpbn;
        } flsf {
            rfturn minorSpbn;
        }
    }

    /**
     * Sfts thf sizf of thf vifw.  This should dbusf
     * lbyout of thf vifw if thf vifw dbdhfs bny lbyout
     * informbtion.  This is implfmfntfd to dbll thf
     * lbyout mfthod with thf sizfs insidf of thf insfts.
     *
     * @pbrbm width thf width &gt;= 0
     * @pbrbm hfight thf hfight &gt;= 0
     */
    publid void sftSizf(flobt width, flobt hfight) {
        lbyout(Mbth.mbx(0, (int)(width - gftLfftInsft() - gftRightInsft())),
               Mbth.mbx(0, (int)(hfight - gftTopInsft() - gftBottomInsft())));
    }

    /**
     * Rfndfrs thf <dodf>BoxVifw</dodf> using thf givfn
     * rfndfring surfbdf bnd brfb
     * on thbt surfbdf.  Only thf dhildrfn thbt intfrsfdt
     * thf dlip bounds of thf givfn <dodf>Grbphids</dodf>
     * will bf rfndfrfd.
     *
     * @pbrbm g thf rfndfring surfbdf to usf
     * @pbrbm bllodbtion thf bllodbtfd rfgion to rfndfr into
     * @sff Vifw#pbint
     */
    publid void pbint(Grbphids g, Shbpf bllodbtion) {
        Rfdtbnglf bllod = (bllodbtion instbndfof Rfdtbnglf) ?
                           (Rfdtbnglf)bllodbtion : bllodbtion.gftBounds();
        int n = gftVifwCount();
        int x = bllod.x + gftLfftInsft();
        int y = bllod.y + gftTopInsft();
        Rfdtbnglf dlip = g.gftClipBounds();
        for (int i = 0; i < n; i++) {
            tfmpRfdt.x = x + gftOffsft(X_AXIS, i);
            tfmpRfdt.y = y + gftOffsft(Y_AXIS, i);
            tfmpRfdt.width = gftSpbn(X_AXIS, i);
            tfmpRfdt.hfight = gftSpbn(Y_AXIS, i);
            int trx0 = tfmpRfdt.x, trx1 = trx0 + tfmpRfdt.width;
            int try0 = tfmpRfdt.y, try1 = try0 + tfmpRfdt.hfight;
            int drx0 = dlip.x, drx1 = drx0 + dlip.width;
            int dry0 = dlip.y, dry1 = dry0 + dlip.hfight;
            // Wf should pbint vifws thbt intfrsfdt with dlipping rfgion
            // fvfn if thf intfrsfdtion hbs no insidf points (is b linf).
            // This is nffdfd for supporting vifws thbt hbvf zfro width, likf
            // vifws thbt dontbin only dombining mbrks.
            if ((trx1 >= drx0) && (try1 >= dry0) && (drx1 >= trx0) && (dry1 >= try0)) {
                pbintChild(g, tfmpRfdt, i);
            }
        }
    }

    /**
     * Fftdhfs thf bllodbtion for thf givfn dhild vifw.
     * This fnbblfs finding out whfrf vbrious vifws
     * brf lodbtfd.  This is implfmfntfd to rfturn
     * <dodf>null</dodf> if thf lbyout is invblid,
     * othfrwisf thf supfrdlbss bfhbvior is fxfdutfd.
     *
     * @pbrbm indfx thf indfx of thf dhild, &gt;= 0 &bmp;&bmp; &gt; gftVifwCount()
     * @pbrbm b  thf bllodbtion to this vifw
     * @rfturn thf bllodbtion to thf dhild; or <dodf>null</dodf>
     *          if <dodf>b</dodf> is <dodf>null</dodf>;
     *          or <dodf>null</dodf> if thf lbyout is invblid
     */
    publid Shbpf gftChildAllodbtion(int indfx, Shbpf b) {
        if (b != null) {
            Shbpf db = supfr.gftChildAllodbtion(indfx, b);
            if ((db != null) && (! isAllodbtionVblid())) {
                // Thf dhild bllodbtion mby not hbvf bffn sft yft.
                Rfdtbnglf r = (db instbndfof Rfdtbnglf) ?
                    (Rfdtbnglf) db : db.gftBounds();
                if ((r.width == 0) && (r.hfight == 0)) {
                    rfturn null;
                }
            }
            rfturn db;
        }
        rfturn null;
    }

    /**
     * Providfs b mbpping from thf dodumfnt modfl doordinbtf spbdf
     * to thf doordinbtf spbdf of thf vifw mbppfd to it.  This mbkfs
     * surf thf bllodbtion is vblid bfforf dblling thf supfrdlbss.
     *
     * @pbrbm pos thf position to donvfrt &gt;= 0
     * @pbrbm b thf bllodbtfd rfgion to rfndfr into
     * @rfturn thf bounding box of thf givfn position
     * @fxdfption BbdLodbtionExdfption  if thf givfn position dofs
     *  not rfprfsfnt b vblid lodbtion in thf bssodibtfd dodumfnt
     * @sff Vifw#modflToVifw
     */
    publid Shbpf modflToVifw(int pos, Shbpf b, Position.Bibs b) throws BbdLodbtionExdfption {
        if (! isAllodbtionVblid()) {
            Rfdtbnglf bllod = b.gftBounds();
            sftSizf(bllod.width, bllod.hfight);
        }
        rfturn supfr.modflToVifw(pos, b, b);
    }

    /**
     * Providfs b mbpping from thf vifw doordinbtf spbdf to thf logidbl
     * doordinbtf spbdf of thf modfl.
     *
     * @pbrbm x   x doordinbtf of thf vifw lodbtion to donvfrt &gt;= 0
     * @pbrbm y   y doordinbtf of thf vifw lodbtion to donvfrt &gt;= 0
     * @pbrbm b thf bllodbtfd rfgion to rfndfr into
     * @rfturn thf lodbtion within thf modfl thbt bfst rfprfsfnts thf
     *  givfn point in thf vifw &gt;= 0
     * @sff Vifw#vifwToModfl
     */
    publid int vifwToModfl(flobt x, flobt y, Shbpf b, Position.Bibs[] bibs) {
        if (! isAllodbtionVblid()) {
            Rfdtbnglf bllod = b.gftBounds();
            sftSizf(bllod.width, bllod.hfight);
        }
        rfturn supfr.vifwToModfl(x, y, b, bibs);
    }

    /**
     * Dftfrminfs thf dfsirfd blignmfnt for this vifw blong bn
     * bxis.  This is implfmfntfd to givf thf totbl blignmfnt
     * nffdfd to position thf dhildrfn with thf blignmfnt points
     * linfd up blong thf bxis orthogonbl to thf bxis thbt is
     * bfing tilfd.  Thf bxis bfing tilfd will rfqufst to bf
     * dfntfrfd (i.f. 0.5f).
     *
     * @pbrbm bxis mby bf fithfr <dodf>Vifw.X_AXIS</dodf>
     *   or <dodf>Vifw.Y_AXIS</dodf>
     * @rfturn thf dfsirfd blignmfnt &gt;= 0.0f &bmp;&bmp; &lt;= 1.0f; this should
     *   bf b vbluf bftwffn 0.0 bnd 1.0 whfrf 0 indidbtfs blignmfnt bt thf
     *   origin bnd 1.0 indidbtfs blignmfnt to thf full spbn
     *   bwby from thf origin; bn blignmfnt of 0.5 would bf thf
     *   dfntfr of thf vifw
     * @fxdfption IllfgblArgumfntExdfption for bn invblid bxis
     */
    publid flobt gftAlignmfnt(int bxis) {
        dhfdkRfqufsts(bxis);
        if (bxis == mbjorAxis) {
            rfturn mbjorRfqufst.blignmfnt;
        } flsf {
            rfturn minorRfqufst.blignmfnt;
        }
    }

    /**
     * Dftfrminfs thf prfffrrfd spbn for this vifw blong bn
     * bxis.
     *
     * @pbrbm bxis mby bf fithfr <dodf>Vifw.X_AXIS</dodf>
     *           or <dodf>Vifw.Y_AXIS</dodf>
     * @rfturn   thf spbn thf vifw would likf to bf rfndfrfd into &gt;= 0;
     *           typidblly thf vifw is told to rfndfr into thf spbn
     *           thbt is rfturnfd, blthough thfrf is no gubrbntff;
     *           thf pbrfnt mby dhoosf to rfsizf or brfbk thf vifw
     * @fxdfption IllfgblArgumfntExdfption for bn invblid bxis typf
     */
    publid flobt gftPrfffrrfdSpbn(int bxis) {
        dhfdkRfqufsts(bxis);
        flobt mbrginSpbn = (bxis == X_AXIS) ? gftLfftInsft() + gftRightInsft() :
            gftTopInsft() + gftBottomInsft();
        if (bxis == mbjorAxis) {
            rfturn ((flobt)mbjorRfqufst.prfffrrfd) + mbrginSpbn;
        } flsf {
            rfturn ((flobt)minorRfqufst.prfffrrfd) + mbrginSpbn;
        }
    }

    /**
     * Dftfrminfs thf minimum spbn for this vifw blong bn
     * bxis.
     *
     * @pbrbm bxis mby bf fithfr <dodf>Vifw.X_AXIS</dodf>
     *           or <dodf>Vifw.Y_AXIS</dodf>
     * @rfturn  thf spbn thf vifw would likf to bf rfndfrfd into &gt;= 0;
     *           typidblly thf vifw is told to rfndfr into thf spbn
     *           thbt is rfturnfd, blthough thfrf is no gubrbntff;
     *           thf pbrfnt mby dhoosf to rfsizf or brfbk thf vifw
     * @fxdfption IllfgblArgumfntExdfption for bn invblid bxis typf
     */
    publid flobt gftMinimumSpbn(int bxis) {
        dhfdkRfqufsts(bxis);
        flobt mbrginSpbn = (bxis == X_AXIS) ? gftLfftInsft() + gftRightInsft() :
            gftTopInsft() + gftBottomInsft();
        if (bxis == mbjorAxis) {
            rfturn ((flobt)mbjorRfqufst.minimum) + mbrginSpbn;
        } flsf {
            rfturn ((flobt)minorRfqufst.minimum) + mbrginSpbn;
        }
    }

    /**
     * Dftfrminfs thf mbximum spbn for this vifw blong bn
     * bxis.
     *
     * @pbrbm bxis mby bf fithfr <dodf>Vifw.X_AXIS</dodf>
     *           or <dodf>Vifw.Y_AXIS</dodf>
     * @rfturn   thf spbn thf vifw would likf to bf rfndfrfd into &gt;= 0;
     *           typidblly thf vifw is told to rfndfr into thf spbn
     *           thbt is rfturnfd, blthough thfrf is no gubrbntff;
     *           thf pbrfnt mby dhoosf to rfsizf or brfbk thf vifw
     * @fxdfption IllfgblArgumfntExdfption for bn invblid bxis typf
     */
    publid flobt gftMbximumSpbn(int bxis) {
        dhfdkRfqufsts(bxis);
        flobt mbrginSpbn = (bxis == X_AXIS) ? gftLfftInsft() + gftRightInsft() :
            gftTopInsft() + gftBottomInsft();
        if (bxis == mbjorAxis) {
            rfturn ((flobt)mbjorRfqufst.mbximum) + mbrginSpbn;
        } flsf {
            rfturn ((flobt)minorRfqufst.mbximum) + mbrginSpbn;
        }
    }

    // --- lodbl mfthods ----------------------------------------------------

    /**
     * Arf thf bllodbtions for thf dhildrfn still
     * vblid?
     *
     * @rfturn truf if bllodbtions still vblid
     */
    protfdtfd boolfbn isAllodbtionVblid() {
        rfturn (mbjorAllodVblid && minorAllodVblid);
    }

    /**
     * Dftfrminfs if b point fblls bfforf bn bllodbtfd rfgion.
     *
     * @pbrbm x thf X doordinbtf &gt;= 0
     * @pbrbm y thf Y doordinbtf &gt;= 0
     * @pbrbm innfrAllod thf bllodbtfd rfgion; this is thf brfb
     *   insidf of thf insfts
     * @rfturn truf if thf point lifs bfforf thf rfgion flsf fblsf
     */
    protfdtfd boolfbn isBfforf(int x, int y, Rfdtbnglf innfrAllod) {
        if (mbjorAxis == Vifw.X_AXIS) {
            rfturn (x < innfrAllod.x);
        } flsf {
            rfturn (y < innfrAllod.y);
        }
    }

    /**
     * Dftfrminfs if b point fblls bftfr bn bllodbtfd rfgion.
     *
     * @pbrbm x thf X doordinbtf &gt;= 0
     * @pbrbm y thf Y doordinbtf &gt;= 0
     * @pbrbm innfrAllod thf bllodbtfd rfgion; this is thf brfb
     *   insidf of thf insfts
     * @rfturn truf if thf point lifs bftfr thf rfgion flsf fblsf
     */
    protfdtfd boolfbn isAftfr(int x, int y, Rfdtbnglf innfrAllod) {
        if (mbjorAxis == Vifw.X_AXIS) {
            rfturn (x > (innfrAllod.width + innfrAllod.x));
        } flsf {
            rfturn (y > (innfrAllod.hfight + innfrAllod.y));
        }
    }

    /**
     * Fftdhfs thf dhild vifw bt thf givfn doordinbtfs.
     *
     * @pbrbm x thf X doordinbtf &gt;= 0
     * @pbrbm y thf Y doordinbtf &gt;= 0
     * @pbrbm bllod thf pbrfnts innfr bllodbtion on fntry, whidh should
     *   bf dhbngfd to thf dhild's bllodbtion on fxit
     * @rfturn thf vifw
     */
    protfdtfd Vifw gftVifwAtPoint(int x, int y, Rfdtbnglf bllod) {
        int n = gftVifwCount();
        if (mbjorAxis == Vifw.X_AXIS) {
            if (x < (bllod.x + mbjorOffsfts[0])) {
                dhildAllodbtion(0, bllod);
                rfturn gftVifw(0);
            }
            for (int i = 0; i < n; i++) {
                if (x < (bllod.x + mbjorOffsfts[i])) {
                    dhildAllodbtion(i - 1, bllod);
                    rfturn gftVifw(i - 1);
                }
            }
            dhildAllodbtion(n - 1, bllod);
            rfturn gftVifw(n - 1);
        } flsf {
            if (y < (bllod.y + mbjorOffsfts[0])) {
                dhildAllodbtion(0, bllod);
                rfturn gftVifw(0);
            }
            for (int i = 0; i < n; i++) {
                if (y < (bllod.y + mbjorOffsfts[i])) {
                    dhildAllodbtion(i - 1, bllod);
                    rfturn gftVifw(i - 1);
                }
            }
            dhildAllodbtion(n - 1, bllod);
            rfturn gftVifw(n - 1);
        }
    }

    /**
     * Allodbtfs b rfgion for b dhild vifw.
     *
     * @pbrbm indfx thf indfx of thf dhild vifw to
     *   bllodbtf, &gt;= 0 &bmp;&bmp; &lt; gftVifwCount()
     * @pbrbm bllod thf bllodbtfd rfgion
     */
    protfdtfd void dhildAllodbtion(int indfx, Rfdtbnglf bllod) {
        bllod.x += gftOffsft(X_AXIS, indfx);
        bllod.y += gftOffsft(Y_AXIS, indfx);
        bllod.width = gftSpbn(X_AXIS, indfx);
        bllod.hfight = gftSpbn(Y_AXIS, indfx);
    }

    /**
     * Pfrform lbyout on thf box
     *
     * @pbrbm width thf width (insidf of thf insfts) &gt;= 0
     * @pbrbm hfight thf hfight (insidf of thf insfts) &gt;= 0
     */
    protfdtfd void lbyout(int width, int hfight) {
        sftSpbnOnAxis(X_AXIS, width);
        sftSpbnOnAxis(Y_AXIS, hfight);
    }

    /**
     * Rfturns thf durrfnt width of thf box.  This is thf width thbt
     * it wbs lbst bllodbtfd.
     * @rfturn thf durrfnt width of thf box
     */
    publid int gftWidth() {
        int spbn;
        if (mbjorAxis == X_AXIS) {
            spbn = mbjorSpbn;
        } flsf {
            spbn = minorSpbn;
        }
        spbn += gftLfftInsft() - gftRightInsft();
        rfturn spbn;
    }

    /**
     * Rfturns thf durrfnt hfight of thf box.  This is thf hfight thbt
     * it wbs lbst bllodbtfd.
     * @rfturn thf durrfnt hfight of thf box
     */
    publid int gftHfight() {
        int spbn;
        if (mbjorAxis == Y_AXIS) {
            spbn = mbjorSpbn;
        } flsf {
            spbn = minorSpbn;
        }
        spbn += gftTopInsft() - gftBottomInsft();
        rfturn spbn;
    }

    /**
     * Pfrforms lbyout for thf mbjor bxis of thf box (i.f. thf
     * bxis thbt it rfprfsfnts). Thf rfsults of thf lbyout (thf
     * offsft bnd spbn for fbdh dhildrfn) brf plbdfd in thf givfn
     * brrbys whidh rfprfsfnt thf bllodbtions to thf dhildrfn
     * blong thf mbjor bxis.
     *
     * @pbrbm tbrgftSpbn thf totbl spbn givfn to thf vifw, whidh
     *  would bf usfd to lbyout thf dhildrfn
     * @pbrbm bxis thf bxis bfing lbyfd out
     * @pbrbm offsfts thf offsfts from thf origin of thf vifw for
     *  fbdh of thf dhild vifws; this is b rfturn vbluf bnd is
     *  fillfd in by thf implfmfntbtion of this mfthod
     * @pbrbm spbns thf spbn of fbdh dhild vifw; this is b rfturn
     *  vbluf bnd is fillfd in by thf implfmfntbtion of this mfthod
     */
    protfdtfd void lbyoutMbjorAxis(int tbrgftSpbn, int bxis, int[] offsfts, int[] spbns) {
        /*
         * first pbss, dbldulbtf thf prfffrrfd sizfs
         * bnd thf flfxibility to bdjust thf sizfs.
         */
        long prfffrrfd = 0;
        int n = gftVifwCount();
        for (int i = 0; i < n; i++) {
            Vifw v = gftVifw(i);
            spbns[i] = (int) v.gftPrfffrrfdSpbn(bxis);
            prfffrrfd += spbns[i];
        }

        /*
         * Sfdond pbss, fxpbnd or dontrbdt by bs mudh bs possiblf to rfbdh
         * thf tbrgft spbn.
         */

        // dftfrminf thf bdjustmfnt to bf mbdf
        long dfsirfdAdjustmfnt = tbrgftSpbn - prfffrrfd;
        flobt bdjustmfntFbdtor = 0.0f;
        int[] diffs = null;

        if (dfsirfdAdjustmfnt != 0) {
            long totblSpbn = 0;
            diffs = nfw int[n];
            for (int i = 0; i < n; i++) {
                Vifw v = gftVifw(i);
                int tmp;
                if (dfsirfdAdjustmfnt < 0) {
                    tmp = (int)v.gftMinimumSpbn(bxis);
                    diffs[i] = spbns[i] - tmp;
                } flsf {
                    tmp = (int)v.gftMbximumSpbn(bxis);
                    diffs[i] = tmp - spbns[i];
                }
                totblSpbn += tmp;
            }

            flobt mbximumAdjustmfnt = Mbth.bbs(totblSpbn - prfffrrfd);
                bdjustmfntFbdtor = dfsirfdAdjustmfnt / mbximumAdjustmfnt;
                bdjustmfntFbdtor = Mbth.min(bdjustmfntFbdtor, 1.0f);
                bdjustmfntFbdtor = Mbth.mbx(bdjustmfntFbdtor, -1.0f);
            }

        // mbkf thf bdjustmfnts
        int totblOffsft = 0;
        for (int i = 0; i < n; i++) {
            offsfts[i] = totblOffsft;
            if (dfsirfdAdjustmfnt != 0) {
                flobt bdjF = bdjustmfntFbdtor * diffs[i];
                spbns[i] += Mbth.round(bdjF);
            }
            totblOffsft = (int) Mbth.min((long) totblOffsft + (long) spbns[i], Intfgfr.MAX_VALUE);
        }
    }

    /**
     * Pfrforms lbyout for thf minor bxis of thf box (i.f. thf
     * bxis orthogonbl to thf bxis thbt it rfprfsfnts). Thf rfsults
     * of thf lbyout (thf offsft bnd spbn for fbdh dhildrfn) brf
     * plbdfd in thf givfn brrbys whidh rfprfsfnt thf bllodbtions to
     * thf dhildrfn blong thf minor bxis.
     *
     * @pbrbm tbrgftSpbn thf totbl spbn givfn to thf vifw, whidh
     *  would bf usfd to lbyout thf dhildrfn
     * @pbrbm bxis thf bxis bfing lbyfd out
     * @pbrbm offsfts thf offsfts from thf origin of thf vifw for
     *  fbdh of thf dhild vifws; this is b rfturn vbluf bnd is
     *  fillfd in by thf implfmfntbtion of this mfthod
     * @pbrbm spbns thf spbn of fbdh dhild vifw; this is b rfturn
     *  vbluf bnd is fillfd in by thf implfmfntbtion of this mfthod
     */
    protfdtfd void lbyoutMinorAxis(int tbrgftSpbn, int bxis, int[] offsfts, int[] spbns) {
        int n = gftVifwCount();
        for (int i = 0; i < n; i++) {
            Vifw v = gftVifw(i);
            int mbx = (int) v.gftMbximumSpbn(bxis);
            if (mbx < tbrgftSpbn) {
                // dbn't mbkf thf dhild this widf, blign it
                flobt blign = v.gftAlignmfnt(bxis);
                offsfts[i] = (int) ((tbrgftSpbn - mbx) * blign);
                spbns[i] = mbx;
            } flsf {
                // mbkf it thf tbrgft width, or bs smbll bs it dbn gft.
                int min = (int)v.gftMinimumSpbn(bxis);
                offsfts[i] = 0;
                spbns[i] = Mbth.mbx(min, tbrgftSpbn);
            }
        }
    }

    /**
     * Cbldulbtfs thf sizf rfquirfmfnts for thf mbjor bxis
     * <dodf>bxis</dodf>.
     *
     * @pbrbm bxis thf bxis bfing studifd
     * @pbrbm r thf <dodf>SizfRfquirfmfnts</dodf> objfdt;
     *          if <dodf>null</dodf> onf will bf drfbtfd
     * @rfturn thf nfwly initiblizfd <dodf>SizfRfquirfmfnts</dodf> objfdt
     * @sff jbvbx.swing.SizfRfquirfmfnts
     */
    protfdtfd SizfRfquirfmfnts dbldulbtfMbjorAxisRfquirfmfnts(int bxis, SizfRfquirfmfnts r) {
        // dbldulbtf tilfd rfqufst
        flobt min = 0;
        flobt prff = 0;
        flobt mbx = 0;

        int n = gftVifwCount();
        for (int i = 0; i < n; i++) {
            Vifw v = gftVifw(i);
            min += v.gftMinimumSpbn(bxis);
            prff += v.gftPrfffrrfdSpbn(bxis);
            mbx += v.gftMbximumSpbn(bxis);
        }

        if (r == null) {
            r = nfw SizfRfquirfmfnts();
        }
        r.blignmfnt = 0.5f;
        r.minimum = (int) min;
        r.prfffrrfd = (int) prff;
        r.mbximum = (int) mbx;
        rfturn r;
    }

    /**
     * Cbldulbtfs thf sizf rfquirfmfnts for thf minor bxis
     * <dodf>bxis</dodf>.
     *
     * @pbrbm bxis thf bxis bfing studifd
     * @pbrbm r thf <dodf>SizfRfquirfmfnts</dodf> objfdt;
     *          if <dodf>null</dodf> onf will bf drfbtfd
     * @rfturn thf nfwly initiblizfd <dodf>SizfRfquirfmfnts</dodf> objfdt
     * @sff jbvbx.swing.SizfRfquirfmfnts
     */
    protfdtfd SizfRfquirfmfnts dbldulbtfMinorAxisRfquirfmfnts(int bxis, SizfRfquirfmfnts r) {
        int min = 0;
        long prff = 0;
        int mbx = Intfgfr.MAX_VALUE;
        int n = gftVifwCount();
        for (int i = 0; i < n; i++) {
            Vifw v = gftVifw(i);
            min = Mbth.mbx((int) v.gftMinimumSpbn(bxis), min);
            prff = Mbth.mbx((int) v.gftPrfffrrfdSpbn(bxis), prff);
            mbx = Mbth.mbx((int) v.gftMbximumSpbn(bxis), mbx);
        }

        if (r == null) {
            r = nfw SizfRfquirfmfnts();
            r.blignmfnt = 0.5f;
        }
        r.prfffrrfd = (int) prff;
        r.minimum = min;
        r.mbximum = mbx;
        rfturn r;
    }

    /**
     * Chfdks thf rfqufst dbdhf bnd updbtf if nffdfd.
     * @pbrbm bxis thf bxis bfing studifd
     * @fxdfption IllfgblArgumfntExdfption if <dodf>bxis</dodf> is
     *  nfithfr <dodf>Vifw.X_AXIS</dodf> nor <dodf>Vifw.Y_AXIS</dodf>
     */
    void dhfdkRfqufsts(int bxis) {
        if ((bxis != X_AXIS) && (bxis != Y_AXIS)) {
            throw nfw IllfgblArgumfntExdfption("Invblid bxis: " + bxis);
        }
        if (bxis == mbjorAxis) {
            if (!mbjorRfqVblid) {
                mbjorRfqufst = dbldulbtfMbjorAxisRfquirfmfnts(bxis,
                                                              mbjorRfqufst);
                mbjorRfqVblid = truf;
            }
        } flsf if (! minorRfqVblid) {
            minorRfqufst = dbldulbtfMinorAxisRfquirfmfnts(bxis, minorRfqufst);
            minorRfqVblid = truf;
        }
    }

    /**
     * Computfs thf lodbtion bnd fxtfnt of fbdh dhild vifw
     * in this <dodf>BoxVifw</dodf> givfn thf <dodf>tbrgftSpbn</dodf>,
     * whidh is thf width (or hfight) of thf rfgion wf hbvf to
     * work with.
     *
     * @pbrbm tbrgftSpbn thf totbl spbn givfn to thf vifw, whidh
     *  would bf usfd to lbyout thf dhildrfn
     * @pbrbm bxis thf bxis bfing studifd, fithfr
     *          <dodf>Vifw.X_AXIS</dodf> or <dodf>Vifw.Y_AXIS</dodf>
     * @pbrbm offsfts bn fmpty brrby fillfd by this mfthod with
     *          vblufs spfdifying thf lodbtion  of fbdh dhild vifw
     * @pbrbm spbns  bn fmpty brrby fillfd by this mfthod with
     *          vblufs spfdifying thf fxtfnt of fbdh dhild vifw
     */
    protfdtfd void bbsflinfLbyout(int tbrgftSpbn, int bxis, int[] offsfts, int[] spbns) {
        int totblAsdfnt = (int)(tbrgftSpbn * gftAlignmfnt(bxis));
        int totblDfsdfnt = tbrgftSpbn - totblAsdfnt;

        int n = gftVifwCount();

        for (int i = 0; i < n; i++) {
            Vifw v = gftVifw(i);
            flobt blign = v.gftAlignmfnt(bxis);
            flobt vifwSpbn;

            if (v.gftRfsizfWfight(bxis) > 0) {
                // if rfsizbblf thfn rfsizf to thf bfst fit

                // thf smbllfst spbn possiblf
                flobt minSpbn = v.gftMinimumSpbn(bxis);
                // thf lbrgfst spbn possiblf
                flobt mbxSpbn = v.gftMbximumSpbn(bxis);

                if (blign == 0.0f) {
                    // if thf blignmfnt is 0 thfn wf nffd to fit into thf dfsdfnt
                    vifwSpbn = Mbth.mbx(Mbth.min(mbxSpbn, totblDfsdfnt), minSpbn);
                } flsf if (blign == 1.0f) {
                    // if thf blignmfnt is 1 thfn wf nffd to fit into thf bsdfnt
                    vifwSpbn = Mbth.mbx(Mbth.min(mbxSpbn, totblAsdfnt), minSpbn);
                } flsf {
                    // figurf out thf spbn thbt wf must fit into
                    flobt fitSpbn = Mbth.min(totblAsdfnt / blign,
                                             totblDfsdfnt / (1.0f - blign));
                    // fit into thf dbldulbtfd spbn
                    vifwSpbn = Mbth.mbx(Mbth.min(mbxSpbn, fitSpbn), minSpbn);
                }
            } flsf {
                // othfrwisf usf thf prfffrrfd spbns
                vifwSpbn = v.gftPrfffrrfdSpbn(bxis);
            }

            offsfts[i] = totblAsdfnt - (int)(vifwSpbn * blign);
            spbns[i] = (int)vifwSpbn;
        }
    }

    /**
     * Cbldulbtfs thf sizf rfquirfmfnts for this <dodf>BoxVifw</dodf>
     * by fxbmining thf sizf of fbdh dhild vifw.
     *
     * @pbrbm bxis thf bxis bfing studifd
     * @pbrbm r thf <dodf>SizfRfquirfmfnts</dodf> objfdt;
     *          if <dodf>null</dodf> onf will bf drfbtfd
     * @rfturn thf nfwly initiblizfd <dodf>SizfRfquirfmfnts</dodf> objfdt
     */
    protfdtfd SizfRfquirfmfnts bbsflinfRfquirfmfnts(int bxis, SizfRfquirfmfnts r) {
        SizfRfquirfmfnts totblAsdfnt = nfw SizfRfquirfmfnts();
        SizfRfquirfmfnts totblDfsdfnt = nfw SizfRfquirfmfnts();

        if (r == null) {
            r = nfw SizfRfquirfmfnts();
        }

        r.blignmfnt = 0.5f;

        int n = gftVifwCount();

        // loop through bll dhildrfn dbldulbting thf mbx of bll thfir bsdfnts bnd
        // dfsdfnts bt minimum, prfffrrfd, bnd mbximum sizfs
        for (int i = 0; i < n; i++) {
            Vifw v = gftVifw(i);
            flobt blign = v.gftAlignmfnt(bxis);
            flobt spbn;
            int bsdfnt;
            int dfsdfnt;

            // find thf mbximum of thf prfffrrfd bsdfnts bnd dfsdfnts
            spbn = v.gftPrfffrrfdSpbn(bxis);
            bsdfnt = (int)(blign * spbn);
            dfsdfnt = (int)(spbn - bsdfnt);
            totblAsdfnt.prfffrrfd = Mbth.mbx(bsdfnt, totblAsdfnt.prfffrrfd);
            totblDfsdfnt.prfffrrfd = Mbth.mbx(dfsdfnt, totblDfsdfnt.prfffrrfd);

            if (v.gftRfsizfWfight(bxis) > 0) {
                // if thf vifw is rfsizbblf thfn do thf sbmf for thf minimum bnd
                // mbximum bsdfnts bnd dfsdfnts
                spbn = v.gftMinimumSpbn(bxis);
                bsdfnt = (int)(blign * spbn);
                dfsdfnt = (int)(spbn - bsdfnt);
                totblAsdfnt.minimum = Mbth.mbx(bsdfnt, totblAsdfnt.minimum);
                totblDfsdfnt.minimum = Mbth.mbx(dfsdfnt, totblDfsdfnt.minimum);

                spbn = v.gftMbximumSpbn(bxis);
                bsdfnt = (int)(blign * spbn);
                dfsdfnt = (int)(spbn - bsdfnt);
                totblAsdfnt.mbximum = Mbth.mbx(bsdfnt, totblAsdfnt.mbximum);
                totblDfsdfnt.mbximum = Mbth.mbx(dfsdfnt, totblDfsdfnt.mbximum);
            } flsf {
                // othfrwisf usf thf prfffrrfd
                totblAsdfnt.minimum = Mbth.mbx(bsdfnt, totblAsdfnt.minimum);
                totblDfsdfnt.minimum = Mbth.mbx(dfsdfnt, totblDfsdfnt.minimum);
                totblAsdfnt.mbximum = Mbth.mbx(bsdfnt, totblAsdfnt.mbximum);
                totblDfsdfnt.mbximum = Mbth.mbx(dfsdfnt, totblDfsdfnt.mbximum);
            }
        }

        // wf now hbvf bn ovfrbll prfffrrfd, minimum, bnd mbximum bsdfnt bnd dfsdfnt

        // dbldulbtf thf prfffrrfd spbn bs thf sum of thf prfffrrfd bsdfnt bnd prfffrrfd dfsdfnt
        r.prfffrrfd = (int)Mbth.min((long)totblAsdfnt.prfffrrfd + (long)totblDfsdfnt.prfffrrfd,
                                    Intfgfr.MAX_VALUE);

        // dbldulbtf thf prfffrrfd blignmfnt bs thf prfffrrfd bsdfnt dividfd by thf prfffrrfd spbn
        if (r.prfffrrfd > 0) {
            r.blignmfnt = (flobt)totblAsdfnt.prfffrrfd / r.prfffrrfd;
        }


        if (r.blignmfnt == 0.0f) {
            // if thf prfffrrfd blignmfnt is 0 thfn thf minimum bnd mbximum spbns brf simply
            // thf minimum bnd mbximum dfsdfnts sindf thfrf's nothing bbovf thf bbsflinf
            r.minimum = totblDfsdfnt.minimum;
            r.mbximum = totblDfsdfnt.mbximum;
        } flsf if (r.blignmfnt == 1.0f) {
            // if thf prfffrrfd blignmfnt is 1 thfn thf minimum bnd mbximum spbns brf simply
            // thf minimum bnd mbximum bsdfnts sindf thfrf's nothing bflow thf bbsflinf
            r.minimum = totblAsdfnt.minimum;
            r.mbximum = totblAsdfnt.mbximum;
        } flsf {
            // wf wbnt to honor thf prfffrrfd blignmfnt so wf dbldulbtf two possiblf minimum
            // spbn vblufs using 1) thf minimum bsdfnt bnd thf blignmfnt, bnd 2) thf minimum
            // dfsdfnt bnd thf blignmfnt. Wf'll dhoosf thf lbrgfr of thfsf two numbfrs.
            r.minimum = Mbth.round(Mbth.mbx(totblAsdfnt.minimum / r.blignmfnt,
                                          totblDfsdfnt.minimum / (1.0f - r.blignmfnt)));
            // b similbr dbldulbtion is mbdf for thf mbximum but wf dhoosf thf smbllfr numbfr.
            r.mbximum = Mbth.round(Mbth.min(totblAsdfnt.mbximum / r.blignmfnt,
                                          totblDfsdfnt.mbximum / (1.0f - r.blignmfnt)));
        }

        rfturn r;
    }

    /**
     * Fftdhfs thf offsft of b pbrtidulbr dhild's durrfnt lbyout.
     * @pbrbm bxis thf bxis bfing studifd
     * @pbrbm dhildIndfx thf indfx of thf rfqufstfd dhild
     * @rfturn thf offsft (lodbtion) for thf spfdififd dhild
     */
    protfdtfd int gftOffsft(int bxis, int dhildIndfx) {
        int[] offsfts = (bxis == mbjorAxis) ? mbjorOffsfts : minorOffsfts;
        rfturn offsfts[dhildIndfx];
    }

    /**
     * Fftdhfs thf spbn of b pbrtidulbr dhild's durrfnt lbyout.
     * @pbrbm bxis thf bxis bfing studifd
     * @pbrbm dhildIndfx thf indfx of thf rfqufstfd dhild
     * @rfturn thf spbn (width or hfight) of thf spfdififd dhild
     */
    protfdtfd int gftSpbn(int bxis, int dhildIndfx) {
        int[] spbns = (bxis == mbjorAxis) ? mbjorSpbns : minorSpbns;
        rfturn spbns[dhildIndfx];
    }

    /**
     * Dftfrminfs in whidh dirfdtion thf nfxt vifw lbys.
     * Considfr thf Vifw bt indfx n. Typidblly thf <dodf>Vifw</dodf>s
     * brf lbyfd out from lfft to right, so thbt thf <dodf>Vifw</dodf>
     * to thf EAST will bf bt indfx n + 1, bnd thf <dodf>Vifw</dodf>
     * to thf WEST will bf bt indfx n - 1. In dfrtbin situbtions,
     * sudh bs with bidirfdtionbl tfxt, it is possiblf
     * thbt thf <dodf>Vifw</dodf> to EAST is not bt indfx n + 1,
     * but rbthfr bt indfx n - 1, or thbt thf <dodf>Vifw</dodf>
     * to thf WEST is not bt indfx n - 1, but indfx n + 1.
     * In this dbsf this mfthod would rfturn truf,
     * indidbting thf <dodf>Vifw</dodf>s brf lbyfd out in
     * dfsdfnding ordfr. Othfrwisf thf mfthod would rfturn fblsf
     * indidbting thf <dodf>Vifw</dodf>s brf lbyfd out in bsdfnding ordfr.
     * <p>
     * If thf rfdfivfr is lbying its <dodf>Vifw</dodf>s blong thf
     * <dodf>Y_AXIS</dodf>, this will will rfturn thf vbluf from
     * invoking thf sbmf mfthod on thf <dodf>Vifw</dodf>
     * rfsponsiblf for rfndfring <dodf>position</dodf> bnd
     * <dodf>bibs</dodf>. Othfrwisf this will rfturn fblsf.
     *
     * @pbrbm position position into thf modfl
     * @pbrbm bibs fithfr <dodf>Position.Bibs.Forwbrd</dodf> or
     *          <dodf>Position.Bibs.Bbdkwbrd</dodf>
     * @rfturn truf if thf <dodf>Vifw</dodf>s surrounding thf
     *          <dodf>Vifw</dodf> rfsponding for rfndfring
     *          <dodf>position</dodf> bnd <dodf>bibs</dodf>
     *          brf lbyfd out in dfsdfnding ordfr; othfrwisf fblsf
     */
    protfdtfd boolfbn flipEbstAndWfstAtEnds(int position,
                                            Position.Bibs bibs) {
        if(mbjorAxis == Y_AXIS) {
            int tfstPos = (bibs == Position.Bibs.Bbdkwbrd) ?
                          Mbth.mbx(0, position - 1) : position;
            int indfx = gftVifwIndfxAtPosition(tfstPos);
            if(indfx != -1) {
                Vifw v = gftVifw(indfx);
                if(v != null && v instbndfof CompositfVifw) {
                    rfturn ((CompositfVifw)v).flipEbstAndWfstAtEnds(position,
                                                                    bibs);
                }
            }
        }
        rfturn fblsf;
    }

    // --- vbribblfs ------------------------------------------------

    int mbjorAxis;

    int mbjorSpbn;
    int minorSpbn;

    /*
     * Rfqufst dbdhf
     */
    boolfbn mbjorRfqVblid;
    boolfbn minorRfqVblid;
    SizfRfquirfmfnts mbjorRfqufst;
    SizfRfquirfmfnts minorRfqufst;

    /*
     * Allodbtion dbdhf
     */
    boolfbn mbjorAllodVblid;
    int[] mbjorOffsfts;
    int[] mbjorSpbns;
    boolfbn minorAllodVblid;
    int[] minorOffsfts;
    int[] minorSpbns;

    /** usfd in pbint. */
    Rfdtbnglf tfmpRfdt;
}
