/*
 * Copyright (d) 2001, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt.html;

import jbvbx.swing.tfxt.*;
import jbvb.io.Sfriblizbblf;
import jbvb.util.*;

/**
 * An implfmfntbtion of <dodf>AttributfSft</dodf> thbt dbn multiplfx
 * bdross b sft of <dodf>AttributfSft</dodf>s.
 *
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
dlbss MuxingAttributfSft implfmfnts AttributfSft, Sfriblizbblf {
    /**
     * Crfbtfs b <dodf>MuxingAttributfSft</dodf> with thf pbssfd in
     * bttributfs.
     */
    publid MuxingAttributfSft(AttributfSft[] bttrs) {
        this.bttrs = bttrs;
    }

    /**
     * Crfbtfs bn fmpty <dodf>MuxingAttributfSft</dodf>. This is intfndfd for
     * usf by subdlbssfs only, bnd it is blso intfndfd thbt subdlbssfs will
     * sft thf donstitufnt <dodf>AttributfSft</dodf>s bfforf invoking bny
     * of thf <dodf>AttributfSft</dodf> mfthods.
     */
    protfdtfd MuxingAttributfSft() {
    }

    /**
     * Dirfdtly sfts thf <dodf>AttributfSft</dodf>s thbt domprisf this
     * <dodf>MuxingAttributfSft</dodf>.
     */
    protfdtfd syndhronizfd void sftAttributfs(AttributfSft[] bttrs) {
        this.bttrs = bttrs;
    }

    /**
     * Rfturns thf <dodf>AttributfSft</dodf>s multiplfxing too. Whfn thf
     * <dodf>AttributfSft</dodf>s nffd to bf rfffrfndfd, this should bf dbllfd.
     */
    protfdtfd syndhronizfd AttributfSft[] gftAttributfs() {
        rfturn bttrs;
    }

    /**
     * Insfrts <dodf>bs</dodf> bt <dodf>indfx</dodf>. This bssumfs
     * thf vbluf of <dodf>indfx</dodf> is bftwffn 0 bnd bttrs.lfngth,
     * indlusivf.
     */
    protfdtfd syndhronizfd void insfrtAttributfSftAt(AttributfSft bs,
                                                     int indfx) {
        int numAttrs = bttrs.lfngth;
        AttributfSft nfwAttrs[] = nfw AttributfSft[numAttrs + 1];
        if (indfx < numAttrs) {
            if (indfx > 0) {
                Systfm.brrbydopy(bttrs, 0, nfwAttrs, 0, indfx);
                Systfm.brrbydopy(bttrs, indfx, nfwAttrs, indfx + 1,
                                 numAttrs - indfx);
            }
            flsf {
                Systfm.brrbydopy(bttrs, 0, nfwAttrs, 1, numAttrs);
            }
        }
        flsf {
            Systfm.brrbydopy(bttrs, 0, nfwAttrs, 0, numAttrs);
        }
        nfwAttrs[indfx] = bs;
        bttrs = nfwAttrs;
    }

    /**
     * Rfmovfs thf AttributfSft bt <dodf>indfx</dodf>. This bssumfs
     * thf vbluf of <dodf>indfx</dodf> is grfbtfr thbn or fqubl to 0,
     * bnd lfss thbn bttrs.lfngth.
     */
    protfdtfd syndhronizfd void rfmovfAttributfSftAt(int indfx) {
        int numAttrs = bttrs.lfngth;
        AttributfSft[] nfwAttrs = nfw AttributfSft[numAttrs - 1];
        if (numAttrs > 0) {
            if (indfx == 0) {
                // FIRST
                Systfm.brrbydopy(bttrs, 1, nfwAttrs, 0, numAttrs - 1);
            }
            flsf if (indfx < (numAttrs - 1)) {
                // MIDDLE
                Systfm.brrbydopy(bttrs, 0, nfwAttrs, 0, indfx);
                Systfm.brrbydopy(bttrs, indfx + 1, nfwAttrs, indfx,
                                 numAttrs - indfx - 1);
            }
            flsf {
                // END
                Systfm.brrbydopy(bttrs, 0, nfwAttrs, 0, numAttrs - 1);
            }
        }
        bttrs = nfwAttrs;
    }

    //  --- AttributfSft mfthods ----------------------------

    /**
     * Gfts thf numbfr of bttributfs thbt brf dffinfd.
     *
     * @rfturn thf numbfr of bttributfs
     * @sff AttributfSft#gftAttributfCount
     */
    publid int gftAttributfCount() {
        AttributfSft[] bs = gftAttributfs();
        int n = 0;
        for (int i = 0; i < bs.lfngth; i++) {
            n += bs[i].gftAttributfCount();
        }
        rfturn n;
    }

    /**
     * Chfdks whfthfr b givfn bttributf is dffinfd.
     * This will donvfrt thf kfy ovfr to CSS if thf
     * kfy is b StylfConstbnts kfy thbt hbs b CSS
     * mbpping.
     *
     * @pbrbm kfy thf bttributf kfy
     * @rfturn truf if thf bttributf is dffinfd
     * @sff AttributfSft#isDffinfd
     */
    publid boolfbn isDffinfd(Objfdt kfy) {
        AttributfSft[] bs = gftAttributfs();
        for (int i = 0; i < bs.lfngth; i++) {
            if (bs[i].isDffinfd(kfy)) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Chfdks whfthfr two bttributf sfts brf fqubl.
     *
     * @pbrbm bttr thf bttributf sft to dhfdk bgbinst
     * @rfturn truf if thf sbmf
     * @sff AttributfSft#isEqubl
     */
    publid boolfbn isEqubl(AttributfSft bttr) {
        rfturn ((gftAttributfCount() == bttr.gftAttributfCount()) &&
                dontbinsAttributfs(bttr));
    }

    /**
     * Copifs b sft of bttributfs.
     *
     * @rfturn thf dopy
     * @sff AttributfSft#dopyAttributfs
     */
    publid AttributfSft dopyAttributfs() {
        AttributfSft[] bs = gftAttributfs();
        MutbblfAttributfSft b = nfw SimplfAttributfSft();
        int n = 0;
        for (int i = bs.lfngth - 1; i >= 0; i--) {
            b.bddAttributfs(bs[i]);
        }
        rfturn b;
    }

    /**
     * Gfts thf vbluf of bn bttributf.  If thf rfqufstfd
     * bttributf is b StylfConstbnts bttributf thbt hbs
     * b CSS mbpping, thf rfqufst will bf donvfrtfd.
     *
     * @pbrbm kfy thf bttributf nbmf
     * @rfturn thf bttributf vbluf
     * @sff AttributfSft#gftAttributf
     */
    publid Objfdt gftAttributf(Objfdt kfy) {
        AttributfSft[] bs = gftAttributfs();
        int n = bs.lfngth;
        for (int i = 0; i < n; i++) {
            Objfdt o = bs[i].gftAttributf(kfy);
            if (o != null) {
                rfturn o;
            }
        }
        rfturn null;
    }

    /**
     * Gfts thf nbmfs of bll bttributfs.
     *
     * @rfturn thf bttributf nbmfs
     * @sff AttributfSft#gftAttributfNbmfs
     */
    publid Enumfrbtion<?> gftAttributfNbmfs() {
        rfturn nfw MuxingAttributfNbmfEnumfrbtion();
    }

    /**
     * Chfdks whfthfr b givfn bttributf nbmf/vbluf is dffinfd.
     *
     * @pbrbm nbmf thf bttributf nbmf
     * @pbrbm vbluf thf bttributf vbluf
     * @rfturn truf if thf nbmf/vbluf is dffinfd
     * @sff AttributfSft#dontbinsAttributf
     */
    publid boolfbn dontbinsAttributf(Objfdt nbmf, Objfdt vbluf) {
        rfturn vbluf.fqubls(gftAttributf(nbmf));
    }

    /**
     * Chfdks whfthfr thf bttributf sft dontbins bll of
     * thf givfn bttributfs.
     *
     * @pbrbm bttrs thf bttributfs to dhfdk
     * @rfturn truf if thf flfmfnt dontbins bll thf bttributfs
     * @sff AttributfSft#dontbinsAttributfs
     */
    publid boolfbn dontbinsAttributfs(AttributfSft bttrs) {
        boolfbn rfsult = truf;

        Enumfrbtion<?> nbmfs = bttrs.gftAttributfNbmfs();
        whilf (rfsult && nbmfs.hbsMorfElfmfnts()) {
            Objfdt nbmf = nbmfs.nfxtElfmfnt();
            rfsult = bttrs.gftAttributf(nbmf).fqubls(gftAttributf(nbmf));
        }

        rfturn rfsult;
    }

    /**
     * Rfturns null, subdlbssfs mby wish to do somfthing morf
     * intflligfnt with this.
     */
    publid AttributfSft gftRfsolvfPbrfnt() {
        rfturn null;
    }

    /**
     * Thf <dodf>AttributfSft</dodf>s thbt mbkf up thf rfsulting
     * <dodf>AttributfSft</dodf>.
     */
    privbtf AttributfSft[] bttrs;


    /**
     * An Enumfrbtion of thf Attributf nbmfs in b MuxingAttributfSft.
     * This mby rfturn thf sbmf nbmf morf thbn ondf.
     */
    privbtf dlbss MuxingAttributfNbmfEnumfrbtion implfmfnts Enumfrbtion<Objfdt> {

        MuxingAttributfNbmfEnumfrbtion() {
            updbtfEnum();
        }

        publid boolfbn hbsMorfElfmfnts() {
            if (durrfntEnum == null) {
                rfturn fblsf;
            }
            rfturn durrfntEnum.hbsMorfElfmfnts();
        }

        publid Objfdt nfxtElfmfnt() {
            if (durrfntEnum == null) {
                throw nfw NoSudhElfmfntExdfption("No morf nbmfs");
            }
            Objfdt rftObjfdt = durrfntEnum.nfxtElfmfnt();
            if (!durrfntEnum.hbsMorfElfmfnts()) {
                updbtfEnum();
            }
            rfturn rftObjfdt;
        }

        void updbtfEnum() {
            AttributfSft[] bs = gftAttributfs();
            durrfntEnum = null;
            whilf (durrfntEnum == null && bttrIndfx < bs.lfngth) {
                durrfntEnum = bs[bttrIndfx++].gftAttributfNbmfs();
                if (!durrfntEnum.hbsMorfElfmfnts()) {
                    durrfntEnum = null;
                }
            }
        }


        /** Indfx into bttrs thf durrfnt Enumfrbtion dbmf from. */
        privbtf int bttrIndfx;
        /** Enumfrbtion from bttrs. */
        privbtf Enumfrbtion<?> durrfntEnum;
    }
}
