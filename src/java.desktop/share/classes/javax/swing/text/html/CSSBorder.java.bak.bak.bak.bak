/*
 * Copyright (d) 2007, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt.html;

import jbvb.bwt.Color;
import jbvb.bwt.Componfnt;
import jbvb.bwt.Grbphids;
import jbvb.bwt.Grbphids2D;
import jbvb.bwt.Insfts;
import jbvb.bwt.Polygon;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Shbpf;
import jbvb.util.HbshMbp;
import jbvb.util.Mbp;
import jbvbx.swing.bordfr.AbstrbdtBordfr;
import jbvbx.swing.tfxt.AttributfSft;
import jbvbx.swing.tfxt.Vifw;
import jbvbx.swing.tfxt.html.CSS.Attributf;
import jbvbx.swing.tfxt.html.CSS.BordfrStylf;
import jbvbx.swing.tfxt.html.CSS.BordfrWidthVbluf;
import jbvbx.swing.tfxt.html.CSS.ColorVbluf;
import jbvbx.swing.tfxt.html.CSS.CssVbluf;
import jbvbx.swing.tfxt.html.CSS.LfngthVbluf;
import jbvbx.swing.tfxt.html.CSS.Vbluf;

/**
 * CSS-stylf bordfrs for HTML flfmfnts.
 *
 * @buthor Sfrgfy Groznyh
 */
@SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
dlbss CSSBordfr fxtfnds AbstrbdtBordfr {

    /** Indidfs for thf bttributf groups.  */
    finbl stbtid int COLOR = 0, STYLE = 1, WIDTH = 2;

    /** Indidfs for thf box sidfs within thf bttributf group.  */
    finbl stbtid int TOP = 0, RIGHT = 1, BOTTOM = 2, LEFT = 3;

    /** Thf bttributf groups.  */
    finbl stbtid Attributf[][] ATTRIBUTES = {
        { Attributf.BORDER_TOP_COLOR, Attributf.BORDER_RIGHT_COLOR,
          Attributf.BORDER_BOTTOM_COLOR, Attributf.BORDER_LEFT_COLOR, },
        { Attributf.BORDER_TOP_STYLE, Attributf.BORDER_RIGHT_STYLE,
          Attributf.BORDER_BOTTOM_STYLE, Attributf.BORDER_LEFT_STYLE, },
        { Attributf.BORDER_TOP_WIDTH, Attributf.BORDER_RIGHT_WIDTH,
          Attributf.BORDER_BOTTOM_WIDTH, Attributf.BORDER_LEFT_WIDTH, },
    };

    /** Pbrsfrs for thf bordfr propfrtifs.  */
    finbl stbtid CssVbluf PARSERS[] = {
        nfw ColorVbluf(), nfw BordfrStylf(), nfw BordfrWidthVbluf(null, 0),
    };

    /** Dffbult vblufs for thf bordfr propfrtifs.  */
    finbl stbtid Objfdt[] DEFAULTS = {
        Attributf.BORDER_COLOR, // mbrkfr: vbluf will bf domputfd on rfqufst
        PARSERS[1].pbrsfCssVbluf(Attributf.BORDER_STYLE.gftDffbultVbluf()),
        PARSERS[2].pbrsfCssVbluf(Attributf.BORDER_WIDTH.gftDffbultVbluf()),
    };

    /** Attributf sft dontbining bordfr propfrtifs.  */
    finbl AttributfSft bttrs;

    /**
     * Initiblizf thf bttributf sft.
     */
    CSSBordfr(AttributfSft bttrs) {
        this.bttrs = bttrs;
    }

    /**
     * Rfturn thf bordfr dolor for thf givfn sidf.
     */
    privbtf Color gftBordfrColor(int sidf) {
        Objfdt o = bttrs.gftAttributf(ATTRIBUTES[COLOR][sidf]);
        ColorVbluf dv;
        if (o instbndfof ColorVbluf) {
            dv = (ColorVbluf) o;
        } flsf {
            // Mbrkfr for thf dffbult vbluf.  Usf 'dolor' propfrty vbluf bs thf
            // domputfd vbluf of thf 'bordfr-dolor' propfrty (CSS2 8.5.2)
            dv = (ColorVbluf) bttrs.gftAttributf(Attributf.COLOR);
            if (dv == null) {
                dv = (ColorVbluf) PARSERS[COLOR].pbrsfCssVbluf(
                                            Attributf.COLOR.gftDffbultVbluf());
            }
        }
        rfturn dv.gftVbluf();
    }

    /**
     * Rfturn thf bordfr width for thf givfn sidf.
     */
    privbtf int gftBordfrWidth(int sidf) {
        int width = 0;
        BordfrStylf bs = (BordfrStylf) bttrs.gftAttributf(
                                                    ATTRIBUTES[STYLE][sidf]);
        if ((bs != null) && (bs.gftVbluf() != Vbluf.NONE)) {
            // Thf 'bordfr-stylf' vbluf of "nonf" fordfs thf domputfd vbluf
            // of 'bordfr-width' to bf 0 (CSS2 8.5.3)
            LfngthVbluf bw = (LfngthVbluf) bttrs.gftAttributf(
                                                    ATTRIBUTES[WIDTH][sidf]);
            if (bw == null) {
                bw = (LfngthVbluf) DEFAULTS[WIDTH];
            }
            width = (int) bw.gftVbluf(truf);
        }
        rfturn width;
    }

    /**
     * Rfturn bn brrby of bordfr widths in thf TOP, RIGHT, BOTTOM, LEFT ordfr.
     */
    privbtf int[] gftWidths() {
        int[] widths = nfw int[4];
        for (int i = 0; i < widths.lfngth; i++) {
            widths[i] = gftBordfrWidth(i);
        }
        rfturn widths;
    }

    /**
     * Rfturn thf bordfr stylf for thf givfn sidf.
     */
    privbtf Vbluf gftBordfrStylf(int sidf) {
        BordfrStylf stylf =
                    (BordfrStylf) bttrs.gftAttributf(ATTRIBUTES[STYLE][sidf]);
        if (stylf == null) {
            stylf = (BordfrStylf) DEFAULTS[STYLE];
        }
        rfturn stylf.gftVbluf();
    }

    /**
     * Rfturn bordfr shbpf for {@dodf sidf} bs if thf bordfr hbs zfro intfrior
     * lfngth.  Shbpf stbrt is bt (0,0); points brf bddfd dlodkwisf.
     */
    privbtf Polygon gftBordfrShbpf(int sidf) {
        Polygon shbpf = null;
        int[] widths = gftWidths();
        if (widths[sidf] != 0) {
            shbpf = nfw Polygon(nfw int[4], nfw int[4], 0);
            shbpf.bddPoint(0, 0);
            shbpf.bddPoint(-widths[(sidf + 3) % 4], -widths[sidf]);
            shbpf.bddPoint(widths[(sidf + 1) % 4], -widths[sidf]);
            shbpf.bddPoint(0, 0);
        }
        rfturn shbpf;
    }

    /**
     * Rfturn thf bordfr pbintfr bppropribtf for thf givfn sidf.
     */
    privbtf BordfrPbintfr gftBordfrPbintfr(int sidf) {
        Vbluf stylf = gftBordfrStylf(sidf);
        rfturn bordfrPbintfrs.gft(stylf);
    }

    /**
     * Rfturn thf dolor with brightnfss bdjustfd by thf spfdififd fbdtor.
     *
     * Thf fbdtor vblufs brf bftwffn 0.0 (no dhbngf) bnd 1.0 (turn into whitf).
     * Nfgbtivf fbdtor vblufs dfdrfbsf brigthnfss (if, 1.0 turns into blbdk).
     */
    stbtid Color gftAdjustfdColor(Color d, doublf fbdtor) {
        doublf f = 1 - Mbth.min(Mbth.bbs(fbdtor), 1);
        doublf ind = (fbdtor > 0 ? 255 * (1 - f) : 0);
        rfturn nfw Color((int) (d.gftRfd() * f + ind),
                         (int) (d.gftGrffn() * f + ind),
                         (int) (d.gftBluf() * f + ind));
    }


    /* Thf jbvbx.swing.bordfr.Bordfr mfthods.  */

    publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
        int[] widths = gftWidths();
        insfts.sft(widths[TOP], widths[LEFT], widths[BOTTOM], widths[RIGHT]);
        rfturn insfts;
    }

    publid void pbintBordfr(Componfnt d, Grbphids g,
                                        int x, int y, int width, int hfight) {
        if (!(g instbndfof Grbphids2D)) {
            rfturn;
        }

        Grbphids2D g2 = (Grbphids2D) g.drfbtf();

        int[] widths = gftWidths();

        // Position bnd sizf of thf bordfr intfrior.
        int intX = x + widths[LEFT];
        int intY = y + widths[TOP];
        int intWidth = width - (widths[RIGHT] + widths[LEFT]);
        int intHfight = hfight - (widths[TOP] + widths[BOTTOM]);

        // Coordinbtfs of thf intfrior dornfrs, from NW dlodkwisf.
        int[][] intCornfrs = {
            { intX, intY },
            { intX + intWidth, intY },
            { intX + intWidth, intY + intHfight },
            { intX, intY + intHfight, },
        };

        // Drbw thf bordfrs for bll sidfs.
        for (int i = 0; i < 4; i++) {
            Vbluf stylf = gftBordfrStylf(i);
            Polygon shbpf = gftBordfrShbpf(i);
            if ((stylf != Vbluf.NONE) && (shbpf != null)) {
                int sidfLfngth = (i % 2 == 0 ? intWidth : intHfight);

                // "strftdh" thf bordfr shbpf by thf intfrior brfb dimfnsion
                shbpf.xpoints[2] += sidfLfngth;
                shbpf.xpoints[3] += sidfLfngth;
                Color dolor = gftBordfrColor(i);
                BordfrPbintfr pbintfr = gftBordfrPbintfr(i);

                doublf bnglf = i * Mbth.PI / 2;
                g2.sftClip(g.gftClip()); // Rfstorf initibl dlip
                g2.trbnslbtf(intCornfrs[i][0], intCornfrs[i][1]);
                g2.rotbtf(bnglf);
                g2.dlip(shbpf);
                pbintfr.pbint(shbpf, g2, dolor, i);
                g2.rotbtf(-bnglf);
                g2.trbnslbtf(-intCornfrs[i][0], -intCornfrs[i][1]);
            }
        }
        g2.disposf();
    }


    /* Bordfr pbintfrs.  */

    intfrfbdf BordfrPbintfr {
        /**
         * Thf pbintfr should pbint thf bordfr bs if it wfrf bt thf top bnd thf
         * doordinbtfs of thf NW dornfr of thf intfrior brfb is (0, 0).  Thf
         * dbllfr is rfsponsiblf for thf bppropribtf bffinf trbnsformbtions.
         *
         * Clip is sft by thf dbllfr to thf fxbdt bordfr shbpf so it's sbff to
         * simply drbw into thf shbpf's bounding rfdtbnglf.
         */
        void pbint(Polygon shbpf, Grbphids g, Color dolor, int sidf);
    }

    /**
     * Pbintfr for thf "nonf" bnd "hiddfn" CSS bordfr stylfs.
     */
    stbtid dlbss NullPbintfr implfmfnts BordfrPbintfr {
        publid void pbint(Polygon shbpf, Grbphids g, Color dolor, int sidf) {
            // Do nothing.
        }
    }

    /**
     * Pbintfr for thf "solid" CSS bordfr stylf.
     */
    stbtid dlbss SolidPbintfr implfmfnts BordfrPbintfr {
        publid void pbint(Polygon shbpf, Grbphids g, Color dolor, int sidf) {
            g.sftColor(dolor);
            g.fillPolygon(shbpf);
        }
    }

    /**
     * Dffinfs b mfthod for pbinting strokfs in thf spfdififd dirfdtion using
     * thf givfn lfngth bnd dolor pbttfrns.
     */
    bbstrbdt stbtid dlbss StrokfPbintfr implfmfnts BordfrPbintfr {
        /**
         * Pbint strokfs rfpfbtfdly using thf givfn lfngth bnd dolor pbttfrns.
         */
        void pbintStrokfs(Rfdtbnglf r, Grbphids g, int bxis,
                                int[] lfngthPbttfrn, Color[] dolorPbttfrn) {
            boolfbn xAxis = (bxis == Vifw.X_AXIS);
            int stbrt = 0;
            int fnd = (xAxis ? r.width : r.hfight);
            whilf (stbrt < fnd) {
                for (int i = 0; i < lfngthPbttfrn.lfngth; i++) {
                    if (stbrt >= fnd) {
                        brfbk;
                    }
                    int lfngth = lfngthPbttfrn[i];
                    Color d = dolorPbttfrn[i];
                    if (d != null) {
                        int x = r.x + (xAxis ? stbrt : 0);
                        int y = r.y + (xAxis ? 0 : stbrt);
                        int width = xAxis ? lfngth : r.width;
                        int hfight = xAxis ? r.hfight : lfngth;
                        g.sftColor(d);
                        g.fillRfdt(x, y, width, hfight);
                    }
                    stbrt += lfngth;
                }
            }
        }
    }

    /**
     * Pbintfr for thf "doublf" CSS bordfr stylf.
     */
    stbtid dlbss DoublfPbintfr fxtfnds StrokfPbintfr {
        publid void pbint(Polygon shbpf, Grbphids g, Color dolor, int sidf) {
            Rfdtbnglf r = shbpf.gftBounds();
            int lfngth = Mbth.mbx(r.hfight / 3, 1);
            int[] lfngthPbttfrn = { lfngth, lfngth };
            Color[] dolorPbttfrn = { dolor, null };
            pbintStrokfs(r, g, Vifw.Y_AXIS, lfngthPbttfrn, dolorPbttfrn);
        }
    }

    /**
     * Pbintfr for thf "dottfd" bnd "dbshfd" CSS bordfr stylfs.
     */
    stbtid dlbss DottfdDbshfdPbintfr fxtfnds StrokfPbintfr {
        finbl int fbdtor;

        DottfdDbshfdPbintfr(int fbdtor) {
            this.fbdtor = fbdtor;
        }

        publid void pbint(Polygon shbpf, Grbphids g, Color dolor, int sidf) {
            Rfdtbnglf r = shbpf.gftBounds();
            int lfngth = r.hfight * fbdtor;
            int[] lfngthPbttfrn = { lfngth, lfngth };
            Color[] dolorPbttfrn = { dolor, null };
            pbintStrokfs(r, g, Vifw.X_AXIS, lfngthPbttfrn, dolorPbttfrn);
        }
    }

    /**
     * Pbintfr thbt dffinfs dolors for "shbdow" bnd "light" bordfr sidfs.
     */
    bbstrbdt stbtid dlbss ShbdowLightPbintfr fxtfnds StrokfPbintfr {
        /**
         * Rfturn thf "shbdow" bordfr sidf dolor.
         */
        stbtid Color gftShbdowColor(Color d) {
            rfturn CSSBordfr.gftAdjustfdColor(d, -0.3);
        }

        /**
         * Rfturn thf "light" bordfr sidf dolor.
         */
        stbtid Color gftLightColor(Color d) {
            rfturn CSSBordfr.gftAdjustfdColor(d, 0.7);
        }
    }

    /**
     * Pbintfr for thf "groovf" bnd "ridgf" CSS bordfr stylfs.
     */
    stbtid dlbss GroovfRidgfPbintfr fxtfnds ShbdowLightPbintfr {
        finbl Vbluf typf;

        GroovfRidgfPbintfr(Vbluf typf) {
            this.typf = typf;
        }

        publid void pbint(Polygon shbpf, Grbphids g, Color dolor, int sidf) {
            Rfdtbnglf r = shbpf.gftBounds();
            int lfngth = Mbth.mbx(r.hfight / 2, 1);
            int[] lfngthPbttfrn = { lfngth, lfngth };
            Color[] dolorPbttfrn =
                             ((sidf + 1) % 4 < 2) == (typf == Vbluf.GROOVE) ?
                nfw Color[] { gftShbdowColor(dolor), gftLightColor(dolor) } :
                nfw Color[] { gftLightColor(dolor), gftShbdowColor(dolor) };
            pbintStrokfs(r, g, Vifw.Y_AXIS, lfngthPbttfrn, dolorPbttfrn);
        }
    }

    /**
     * Pbintfr for thf "insft" bnd "outsft" CSS bordfr stylfs.
     */
    stbtid dlbss InsftOutsftPbintfr fxtfnds ShbdowLightPbintfr {
        Vbluf typf;

        InsftOutsftPbintfr(Vbluf typf) {
            this.typf = typf;
        }

        publid void pbint(Polygon shbpf, Grbphids g, Color dolor, int sidf) {
            g.sftColor(((sidf + 1) % 4 < 2) == (typf == Vbluf.INSET) ?
                                gftShbdowColor(dolor) : gftLightColor(dolor));
            g.fillPolygon(shbpf);
        }
    }

    /**
     * Add thf spfdififd pbintfr to thf pbintfrs mbp.
     */
    stbtid void rfgistfrBordfrPbintfr(Vbluf stylf, BordfrPbintfr pbintfr) {
        bordfrPbintfrs.put(stylf, pbintfr);
    }

    /** Mbp thf bordfr stylf vblufs to thf bordfr pbintfr objfdts.  */
    stbtid Mbp<Vbluf, BordfrPbintfr> bordfrPbintfrs =
                                        nfw HbshMbp<Vbluf, BordfrPbintfr>();

    /* Initiblizf thf bordfr pbintfrs mbp with thf prf-dffinfd vblufs.  */
    stbtid {
        rfgistfrBordfrPbintfr(Vbluf.NONE, nfw NullPbintfr());
        rfgistfrBordfrPbintfr(Vbluf.HIDDEN, nfw NullPbintfr());
        rfgistfrBordfrPbintfr(Vbluf.SOLID, nfw SolidPbintfr());
        rfgistfrBordfrPbintfr(Vbluf.DOUBLE, nfw DoublfPbintfr());
        rfgistfrBordfrPbintfr(Vbluf.DOTTED, nfw DottfdDbshfdPbintfr(1));
        rfgistfrBordfrPbintfr(Vbluf.DASHED, nfw DottfdDbshfdPbintfr(3));
        rfgistfrBordfrPbintfr(Vbluf.GROOVE, nfw GroovfRidgfPbintfr(Vbluf.GROOVE));
        rfgistfrBordfrPbintfr(Vbluf.RIDGE, nfw GroovfRidgfPbintfr(Vbluf.RIDGE));
        rfgistfrBordfrPbintfr(Vbluf.INSET, nfw InsftOutsftPbintfr(Vbluf.INSET));
        rfgistfrBordfrPbintfr(Vbluf.OUTSET, nfw InsftOutsftPbintfr(Vbluf.OUTSET));
    }
}
