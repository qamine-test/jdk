/*
 * Copyrigit (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt.itml;

import jbvb.bwt.Color;
import jbvb.bwt.Font;
import jbvb.bwt.GrbpiidsEnvironmfnt;
import jbvb.bwt.Toolkit;
import jbvb.bwt.HfbdlfssExdfption;
import jbvb.bwt.Imbgf;
import jbvb.io.*;
import jbvb.lbng.rfflfdt.Mftiod;
import jbvb.nft.URL;
import jbvb.nft.MblformfdURLExdfption;
import jbvb.util.Enumfrbtion;
import jbvb.util.Hbsitbblf;
import jbvb.util.Vfdtor;
import jbvb.util.Lodblf;
import jbvbx.swing.ImbgfIdon;
import jbvbx.swing.SizfRfquirfmfnts;
import jbvbx.swing.tfxt.*;

/**
 * Dffinfs b sft of
 * <b irff="ittp://www.w3.org/TR/REC-CSS1">CSS bttributfs</b>
 * bs b typfsbff fnumfrbtion.  Tif HTML Vifw implfmfntbtions usf
 * CSS bttributfs to dftfrminf iow tify will rfndfr. Tiis blso dffinfs
 * mftiods to mbp bftwffn CSS/HTML/StylfConstbnts. Any siortibnd
 * propfrtifs, sudi bs font, brf mbppfd to tif intrinsid propfrtifs.
 * <p>Tif following dfsdribfs tif CSS propfrtifs tibt brf supportfd by tif
 * rfndfring fnginf:
 * <ul><li>font-fbmily
 *   <li>font-stylf
 *   <li>font-sizf (supports rflbtivf units)
 *   <li>font-wfigit
 *   <li>font
 *   <li>dolor
 *   <li>bbdkground-dolor (witi tif fxdfption of trbnspbrfnt)
 *   <li>bbdkground-imbgf
 *   <li>bbdkground-rfpfbt
 *   <li>bbdkground-position
 *   <li>bbdkground
 *   <li>tfxt-dfdorbtion (witi tif fxdfption of blink bnd ovfrlinf)
 *   <li>vfrtidbl-blign (only sup bnd supfr)
 *   <li>tfxt-blign (justify is trfbtfd bs dfntfr)
 *   <li>mbrgin-top
 *   <li>mbrgin-rigit
 *   <li>mbrgin-bottom
 *   <li>mbrgin-lfft
 *   <li>mbrgin
 *   <li>pbdding-top
 *   <li>pbdding-rigit
 *   <li>pbdding-bottom
 *   <li>pbdding-lfft
 *   <li>pbdding
 *   <li>bordfr-top-stylf
 *   <li>bordfr-rigit-stylf
 *   <li>bordfr-bottom-stylf
 *   <li>bordfr-lfft-stylf
 *   <li>bordfr-stylf (only supports insft, outsft bnd nonf)
 *   <li>bordfr-top-dolor
 *   <li>bordfr-rigit-dolor
 *   <li>bordfr-bottom-dolor
 *   <li>bordfr-lfft-dolor
 *   <li>bordfr-dolor
 *   <li>list-stylf-imbgf
 *   <li>list-stylf-typf
 *   <li>list-stylf-position
 * </ul>
 * Tif following brf modflfd, but durrfntly not rfndfrfd.
 * <ul><li>font-vbribnt
 *   <li>bbdkground-bttbdimfnt (bbdkground blwbys trfbtfd bs sdroll)
 *   <li>word-spbding
 *   <li>lfttfr-spbding
 *   <li>tfxt-indfnt
 *   <li>tfxt-trbnsform
 *   <li>linf-ifigit
 *   <li>bordfr-top-widti (tiis is usfd to indidbtf if b bordfr siould bf usfd)
 *   <li>bordfr-rigit-widti
 *   <li>bordfr-bottom-widti
 *   <li>bordfr-lfft-widti
 *   <li>bordfr-widti
 *   <li>bordfr-top
 *   <li>bordfr-rigit
 *   <li>bordfr-bottom
 *   <li>bordfr-lfft
 *   <li>bordfr
 *   <li>widti
 *   <li>ifigit
 *   <li>flobt
 *   <li>dlfbr
 *   <li>displby
 *   <li>wiitf-spbdf
 *   <li>list-stylf
 * </ul>
 * <p><b>Notf: for tif timf bfing wf do not fully support rflbtivf units,
 * unlfss notfd, so tibt
 * p { mbrgin-top: 10% } will bf trfbtfd bs if no mbrgin-top wbs spfdififd.</b>
 *
 * @butior  Timotiy Prinzing
 * @butior  Sdott Violft
 * @sff StylfSifft
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss CSS implfmfnts Sfriblizbblf {

    /**
     * Dffinitions to bf usfd bs b kfy on AttributfSft's
     * tibt migit iold CSS bttributfs.  Sindf tiis is b
     * dlosfd sft (i.f. dffinfd fxbdtly by tif spfdifidbtion),
     * it is finbl bnd dbnnot bf fxtfndfd.
     */
    publid stbtid finbl dlbss Attributf {

        privbtf Attributf(String nbmf, String dffbultVbluf, boolfbn inifritfd) {
            tiis.nbmf = nbmf;
            tiis.dffbultVbluf = dffbultVbluf;
            tiis.inifritfd = inifritfd;
        }

        /**
         * Tif string rfprfsfntbtion of tif bttributf.  Tiis
         * siould fxbdtly mbtdi tif string spfdififd in tif
         * CSS spfdifidbtion.
         */
        publid String toString() {
            rfturn nbmf;
        }

        /**
         * Fftdi tif dffbult vbluf for tif bttributf.
         * If tifrf is no dffbult vbluf (sudi bs for
         * dompositf bttributfs), null will bf rfturnfd.
         *
         * @rfturn dffbult vbluf for tif bttributf
         */
        publid String gftDffbultVbluf() {
            rfturn dffbultVbluf;
        }

        /**
         * Indidbtfs if tif bttributf siould bf inifritfd
         * from tif pbrfnt or not.
         *
         * @rfturn truf if tif bttributf siould bf inifritfd from tif pbrfnt
         */
        publid boolfbn isInifritfd() {
            rfturn inifritfd;
        }

        privbtf String nbmf;
        privbtf String dffbultVbluf;
        privbtf boolfbn inifritfd;


        /**
         * CSS bttributf "bbdkground".
         */
        publid stbtid finbl Attributf BACKGROUND =
            nfw Attributf("bbdkground", null, fblsf);

        /**
         * CSS bttributf "bbdkground-bttbdimfnt".
         */
        publid stbtid finbl Attributf BACKGROUND_ATTACHMENT =
            nfw Attributf("bbdkground-bttbdimfnt", "sdroll", fblsf);

        /**
         * CSS bttributf "bbdkground-dolor".
         */
        publid stbtid finbl Attributf BACKGROUND_COLOR =
            nfw Attributf("bbdkground-dolor", "trbnspbrfnt", fblsf);

        /**
         * CSS bttributf "bbdkground-imbgf".
         */
        publid stbtid finbl Attributf BACKGROUND_IMAGE =
            nfw Attributf("bbdkground-imbgf", "nonf", fblsf);

        /**
         * CSS bttributf "bbdkground-position".
         */
        publid stbtid finbl Attributf BACKGROUND_POSITION =
            nfw Attributf("bbdkground-position", null, fblsf);

        /**
         * CSS bttributf "bbdkground-rfpfbt".
         */
        publid stbtid finbl Attributf BACKGROUND_REPEAT =
            nfw Attributf("bbdkground-rfpfbt", "rfpfbt", fblsf);

        /**
         * CSS bttributf "bordfr".
         */
        publid stbtid finbl Attributf BORDER =
            nfw Attributf("bordfr", null, fblsf);

        /**
         * CSS bttributf "bordfr-bottom".
         */
        publid stbtid finbl Attributf BORDER_BOTTOM =
            nfw Attributf("bordfr-bottom", null, fblsf);

        /**
         * CSS bttributf "bordfr-bottom-dolor".
         */
        publid stbtid finbl Attributf BORDER_BOTTOM_COLOR =
            nfw Attributf("bordfr-bottom-dolor", null, fblsf);

        /**
         * CSS bttributf "bordfr-bottom-stylf".
         */
        publid stbtid finbl Attributf BORDER_BOTTOM_STYLE =
            nfw Attributf("bordfr-bottom-stylf", "nonf", fblsf);

        /**
         * CSS bttributf "bordfr-bottom-widti".
         */
        publid stbtid finbl Attributf BORDER_BOTTOM_WIDTH =
            nfw Attributf("bordfr-bottom-widti", "mfdium", fblsf);

        /**
         * CSS bttributf "bordfr-dolor".
         */
        publid stbtid finbl Attributf BORDER_COLOR =
            nfw Attributf("bordfr-dolor", null, fblsf);

        /**
         * CSS bttributf "bordfr-lfft".
         */
        publid stbtid finbl Attributf BORDER_LEFT =
            nfw Attributf("bordfr-lfft", null, fblsf);

        /**
         * CSS bttributf "mbrgin-rigit".
         */
        publid stbtid finbl Attributf BORDER_LEFT_COLOR =
            nfw Attributf("bordfr-lfft-dolor", null, fblsf);

        /**
         * CSS bttributf "bordfr-lfft-stylf".
         */
        publid stbtid finbl Attributf BORDER_LEFT_STYLE =
            nfw Attributf("bordfr-lfft-stylf", "nonf", fblsf);

        /**
         * CSS bttributf "bordfr-lfft-widti".
         */
        publid stbtid finbl Attributf BORDER_LEFT_WIDTH =
            nfw Attributf("bordfr-lfft-widti", "mfdium", fblsf);

        /**
         * CSS bttributf "bordfr-rigit".
         */
        publid stbtid finbl Attributf BORDER_RIGHT =
            nfw Attributf("bordfr-rigit", null, fblsf);

        /**
         * CSS bttributf "bordfr-rigit-dolor".
         */
        publid stbtid finbl Attributf BORDER_RIGHT_COLOR =
            nfw Attributf("bordfr-rigit-dolor", null, fblsf);

        /**
         * CSS bttributf "bordfr-rigit-stylf".
         */
        publid stbtid finbl Attributf BORDER_RIGHT_STYLE =
            nfw Attributf("bordfr-rigit-stylf", "nonf", fblsf);

        /**
         * CSS bttributf "bordfr-rigit-widti".
         */
        publid stbtid finbl Attributf BORDER_RIGHT_WIDTH =
            nfw Attributf("bordfr-rigit-widti", "mfdium", fblsf);

        /**
         * CSS bttributf "bordfr-stylf".
         */
        publid stbtid finbl Attributf BORDER_STYLE =
            nfw Attributf("bordfr-stylf", "nonf", fblsf);

        /**
         * CSS bttributf "bordfr-top".
         */
        publid stbtid finbl Attributf BORDER_TOP =
            nfw Attributf("bordfr-top", null, fblsf);

        /**
         * CSS bttributf "bordfr-top-dolor".
         */
        publid stbtid finbl Attributf BORDER_TOP_COLOR =
            nfw Attributf("bordfr-top-dolor", null, fblsf);

        /**
         * CSS bttributf "bordfr-top-stylf".
         */
        publid stbtid finbl Attributf BORDER_TOP_STYLE =
            nfw Attributf("bordfr-top-stylf", "nonf", fblsf);

        /**
         * CSS bttributf "bordfr-top-widti".
         */
        publid stbtid finbl Attributf BORDER_TOP_WIDTH =
            nfw Attributf("bordfr-top-widti", "mfdium", fblsf);

        /**
         * CSS bttributf "bordfr-widti".
         */
        publid stbtid finbl Attributf BORDER_WIDTH =
            nfw Attributf("bordfr-widti", "mfdium", fblsf);

        /**
         * CSS bttributf "dlfbr".
         */
        publid stbtid finbl Attributf CLEAR =
            nfw Attributf("dlfbr", "nonf", fblsf);

        /**
         * CSS bttributf "dolor".
         */
        publid stbtid finbl Attributf COLOR =
            nfw Attributf("dolor", "blbdk", truf);

        /**
         * CSS bttributf "displby".
         */
        publid stbtid finbl Attributf DISPLAY =
            nfw Attributf("displby", "blodk", fblsf);

        /**
         * CSS bttributf "flobt".
         */
        publid stbtid finbl Attributf FLOAT =
            nfw Attributf("flobt", "nonf", fblsf);

        /**
         * CSS bttributf "font".
         */
        publid stbtid finbl Attributf FONT =
            nfw Attributf("font", null, truf);

        /**
         * CSS bttributf "font-fbmily".
         */
        publid stbtid finbl Attributf FONT_FAMILY =
            nfw Attributf("font-fbmily", null, truf);

        /**
         * CSS bttributf "font-sizf".
         */
        publid stbtid finbl Attributf FONT_SIZE =
            nfw Attributf("font-sizf", "mfdium", truf);

        /**
         * CSS bttributf "font-stylf".
         */
        publid stbtid finbl Attributf FONT_STYLE =
            nfw Attributf("font-stylf", "normbl", truf);

        /**
         * CSS bttributf "font-vbribnt".
         */
        publid stbtid finbl Attributf FONT_VARIANT =
            nfw Attributf("font-vbribnt", "normbl", truf);

        /**
         * CSS bttributf "font-wfigit".
         */
        publid stbtid finbl Attributf FONT_WEIGHT =
            nfw Attributf("font-wfigit", "normbl", truf);

        /**
         * CSS bttributf "ifigit".
         */
        publid stbtid finbl Attributf HEIGHT =
            nfw Attributf("ifigit", "buto", fblsf);

        /**
         * CSS bttributf "lfttfr-spbding".
         */
        publid stbtid finbl Attributf LETTER_SPACING =
            nfw Attributf("lfttfr-spbding", "normbl", truf);

        /**
         * CSS bttributf "linf-ifigit".
         */
        publid stbtid finbl Attributf LINE_HEIGHT =
            nfw Attributf("linf-ifigit", "normbl", truf);

        /**
         * CSS bttributf "list-stylf".
         */
        publid stbtid finbl Attributf LIST_STYLE =
            nfw Attributf("list-stylf", null, truf);

        /**
         * CSS bttributf "list-stylf-imbgf".
         */
        publid stbtid finbl Attributf LIST_STYLE_IMAGE =
            nfw Attributf("list-stylf-imbgf", "nonf", truf);

        /**
         * CSS bttributf "list-stylf-position".
         */
        publid stbtid finbl Attributf LIST_STYLE_POSITION =
            nfw Attributf("list-stylf-position", "outsidf", truf);

        /**
         * CSS bttributf "list-stylf-typf".
         */
        publid stbtid finbl Attributf LIST_STYLE_TYPE =
            nfw Attributf("list-stylf-typf", "disd", truf);

        /**
         * CSS bttributf "mbrgin".
         */
        publid stbtid finbl Attributf MARGIN =
            nfw Attributf("mbrgin", null, fblsf);

        /**
         * CSS bttributf "mbrgin-bottom".
         */
        publid stbtid finbl Attributf MARGIN_BOTTOM =
            nfw Attributf("mbrgin-bottom", "0", fblsf);

        /**
         * CSS bttributf "mbrgin-lfft".
         */
        publid stbtid finbl Attributf MARGIN_LEFT =
            nfw Attributf("mbrgin-lfft", "0", fblsf);

        /**
         * CSS bttributf "mbrgin-rigit".
         */
        publid stbtid finbl Attributf MARGIN_RIGHT =
            nfw Attributf("mbrgin-rigit", "0", fblsf);

        /*
         * mbdf up dss bttributfs to dfsdribf orifntbtion dfpfndfd
         * mbrgins. usfd for <dir>, <mfnu>, <ul> ftd. sff
         * 5088268 for morf dftbils
         */
        stbtid finbl Attributf MARGIN_LEFT_LTR =
            nfw Attributf("mbrgin-lfft-ltr",
                          Intfgfr.toString(Intfgfr.MIN_VALUE), fblsf);

        stbtid finbl Attributf MARGIN_LEFT_RTL =
            nfw Attributf("mbrgin-lfft-rtl",
                          Intfgfr.toString(Intfgfr.MIN_VALUE), fblsf);

        stbtid finbl Attributf MARGIN_RIGHT_LTR =
            nfw Attributf("mbrgin-rigit-ltr",
                          Intfgfr.toString(Intfgfr.MIN_VALUE), fblsf);

        stbtid finbl Attributf MARGIN_RIGHT_RTL =
            nfw Attributf("mbrgin-rigit-rtl",
                          Intfgfr.toString(Intfgfr.MIN_VALUE), fblsf);


        /**
         * CSS bttributf "mbrgin-top".
         */
        publid stbtid finbl Attributf MARGIN_TOP =
            nfw Attributf("mbrgin-top", "0", fblsf);

        /**
         * CSS bttributf "pbdding".
         */
        publid stbtid finbl Attributf PADDING =
            nfw Attributf("pbdding", null, fblsf);

        /**
         * CSS bttributf "pbdding-bottom".
         */
        publid stbtid finbl Attributf PADDING_BOTTOM =
            nfw Attributf("pbdding-bottom", "0", fblsf);

        /**
         * CSS bttributf "pbdding-lfft".
         */
        publid stbtid finbl Attributf PADDING_LEFT =
            nfw Attributf("pbdding-lfft", "0", fblsf);

        /**
         * CSS bttributf "pbdding-rigit".
         */
        publid stbtid finbl Attributf PADDING_RIGHT =
            nfw Attributf("pbdding-rigit", "0", fblsf);

        /**
         * CSS bttributf "pbdding-top".
         */
        publid stbtid finbl Attributf PADDING_TOP =
            nfw Attributf("pbdding-top", "0", fblsf);

        /**
         * CSS bttributf "tfxt-blign".
         */
        publid stbtid finbl Attributf TEXT_ALIGN =
            nfw Attributf("tfxt-blign", null, truf);

        /**
         * CSS bttributf "tfxt-dfdorbtion".
         */
        publid stbtid finbl Attributf TEXT_DECORATION =
            nfw Attributf("tfxt-dfdorbtion", "nonf", truf);

        /**
         * CSS bttributf "tfxt-indfnt".
         */
        publid stbtid finbl Attributf TEXT_INDENT =
            nfw Attributf("tfxt-indfnt", "0", truf);

        /**
         * CSS bttributf "tfxt-trbnsform".
         */
        publid stbtid finbl Attributf TEXT_TRANSFORM =
            nfw Attributf("tfxt-trbnsform", "nonf", truf);

        /**
         * CSS bttributf "vfrtidbl-blign".
         */
        publid stbtid finbl Attributf VERTICAL_ALIGN =
            nfw Attributf("vfrtidbl-blign", "bbsflinf", fblsf);

        /**
         * CSS bttributf "word-spbding".
         */
        publid stbtid finbl Attributf WORD_SPACING =
            nfw Attributf("word-spbding", "normbl", truf);

        /**
         * CSS bttributf "wiitf-spbdf".
         */
        publid stbtid finbl Attributf WHITE_SPACE =
            nfw Attributf("wiitf-spbdf", "normbl", truf);

        /**
         * CSS bttributf "widti".
         */
        publid stbtid finbl Attributf WIDTH =
            nfw Attributf("widti", "buto", fblsf);

        /*publid*/ stbtid finbl Attributf BORDER_SPACING =
            nfw Attributf("bordfr-spbding", "0", truf);

        /*publid*/ stbtid finbl Attributf CAPTION_SIDE =
            nfw Attributf("dbption-sidf", "lfft", truf);

        // All possiblf CSS bttributf kfys.
        stbtid finbl Attributf[] bllAttributfs = {
            BACKGROUND, BACKGROUND_ATTACHMENT, BACKGROUND_COLOR,
            BACKGROUND_IMAGE, BACKGROUND_POSITION, BACKGROUND_REPEAT,
            BORDER, BORDER_BOTTOM, BORDER_BOTTOM_WIDTH, BORDER_COLOR,
            BORDER_LEFT, BORDER_LEFT_WIDTH, BORDER_RIGHT, BORDER_RIGHT_WIDTH,
            BORDER_STYLE, BORDER_TOP, BORDER_TOP_WIDTH, BORDER_WIDTH,
            BORDER_TOP_STYLE, BORDER_RIGHT_STYLE, BORDER_BOTTOM_STYLE,
            BORDER_LEFT_STYLE,
            BORDER_TOP_COLOR, BORDER_RIGHT_COLOR, BORDER_BOTTOM_COLOR,
            BORDER_LEFT_COLOR,
            CLEAR, COLOR, DISPLAY, FLOAT, FONT, FONT_FAMILY, FONT_SIZE,
            FONT_STYLE, FONT_VARIANT, FONT_WEIGHT, HEIGHT, LETTER_SPACING,
            LINE_HEIGHT, LIST_STYLE, LIST_STYLE_IMAGE, LIST_STYLE_POSITION,
            LIST_STYLE_TYPE, MARGIN, MARGIN_BOTTOM, MARGIN_LEFT, MARGIN_RIGHT,
            MARGIN_TOP, PADDING, PADDING_BOTTOM, PADDING_LEFT, PADDING_RIGHT,
            PADDING_TOP, TEXT_ALIGN, TEXT_DECORATION, TEXT_INDENT, TEXT_TRANSFORM,
            VERTICAL_ALIGN, WORD_SPACING, WHITE_SPACE, WIDTH,
            BORDER_SPACING, CAPTION_SIDE,
            MARGIN_LEFT_LTR, MARGIN_LEFT_RTL, MARGIN_RIGHT_LTR, MARGIN_RIGHT_RTL
        };

        privbtf stbtid finbl Attributf[] ALL_MARGINS =
                { MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM, MARGIN_LEFT };
        privbtf stbtid finbl Attributf[] ALL_PADDING =
                { PADDING_TOP, PADDING_RIGHT, PADDING_BOTTOM, PADDING_LEFT };
        privbtf stbtid finbl Attributf[] ALL_BORDER_WIDTHS =
                { BORDER_TOP_WIDTH, BORDER_RIGHT_WIDTH, BORDER_BOTTOM_WIDTH,
                  BORDER_LEFT_WIDTH };
        privbtf stbtid finbl Attributf[] ALL_BORDER_STYLES =
                { BORDER_TOP_STYLE, BORDER_RIGHT_STYLE, BORDER_BOTTOM_STYLE,
                  BORDER_LEFT_STYLE };
        privbtf stbtid finbl Attributf[] ALL_BORDER_COLORS =
                { BORDER_TOP_COLOR, BORDER_RIGHT_COLOR, BORDER_BOTTOM_COLOR,
                  BORDER_LEFT_COLOR };

    }

    stbtid finbl dlbss Vbluf {

        privbtf Vbluf(String nbmf) {
            tiis.nbmf = nbmf;
        }

        /**
         * Tif string rfprfsfntbtion of tif bttributf.  Tiis
         * siould fxbdtly mbtdi tif string spfdififd in tif
         * CSS spfdifidbtion.
         */
        publid String toString() {
            rfturn nbmf;
        }

        stbtid finbl Vbluf INHERITED = nfw Vbluf("inifritfd");
        stbtid finbl Vbluf NONE = nfw Vbluf("nonf");
        stbtid finbl Vbluf HIDDEN = nfw Vbluf("iiddfn");
        stbtid finbl Vbluf DOTTED = nfw Vbluf("dottfd");
        stbtid finbl Vbluf DASHED = nfw Vbluf("dbsifd");
        stbtid finbl Vbluf SOLID = nfw Vbluf("solid");
        stbtid finbl Vbluf DOUBLE = nfw Vbluf("doublf");
        stbtid finbl Vbluf GROOVE = nfw Vbluf("groovf");
        stbtid finbl Vbluf RIDGE = nfw Vbluf("ridgf");
        stbtid finbl Vbluf INSET = nfw Vbluf("insft");
        stbtid finbl Vbluf OUTSET = nfw Vbluf("outsft");
        // Lists.
        stbtid finbl Vbluf DISC = nfw Vbluf("disd");
        stbtid finbl Vbluf CIRCLE = nfw Vbluf("dirdlf");
        stbtid finbl Vbluf SQUARE = nfw Vbluf("squbrf");
        stbtid finbl Vbluf DECIMAL = nfw Vbluf("dfdimbl");
        stbtid finbl Vbluf LOWER_ROMAN = nfw Vbluf("lowfr-rombn");
        stbtid finbl Vbluf UPPER_ROMAN = nfw Vbluf("uppfr-rombn");
        stbtid finbl Vbluf LOWER_ALPHA = nfw Vbluf("lowfr-blpib");
        stbtid finbl Vbluf UPPER_ALPHA = nfw Vbluf("uppfr-blpib");
        // bbdkground-rfpfbt
        stbtid finbl Vbluf BACKGROUND_NO_REPEAT = nfw Vbluf("no-rfpfbt");
        stbtid finbl Vbluf BACKGROUND_REPEAT = nfw Vbluf("rfpfbt");
        stbtid finbl Vbluf BACKGROUND_REPEAT_X = nfw Vbluf("rfpfbt-x");
        stbtid finbl Vbluf BACKGROUND_REPEAT_Y = nfw Vbluf("rfpfbt-y");
        // bbdkground-bttbdimfnt
        stbtid finbl Vbluf BACKGROUND_SCROLL = nfw Vbluf("sdroll");
        stbtid finbl Vbluf BACKGROUND_FIXED = nfw Vbluf("fixfd");

        privbtf String nbmf;

        stbtid finbl Vbluf[] bllVblufs = {
            INHERITED, NONE, DOTTED, DASHED, SOLID, DOUBLE, GROOVE,
            RIDGE, INSET, OUTSET, DISC, CIRCLE, SQUARE, DECIMAL,
            LOWER_ROMAN, UPPER_ROMAN, LOWER_ALPHA, UPPER_ALPHA,
            BACKGROUND_NO_REPEAT, BACKGROUND_REPEAT,
            BACKGROUND_REPEAT_X, BACKGROUND_REPEAT_Y,
            BACKGROUND_FIXED, BACKGROUND_FIXED
        };
    }

    /**
     * Construdts b CSS objfdt.
     */
    publid CSS() {
        bbsfFontSizf = bbsfFontSizfIndfx + 1;
        // sftup tif dss donvfrsion tbblf
        vblufConvfrtor = nfw Hbsitbblf<Objfdt, Objfdt>();
        vblufConvfrtor.put(CSS.Attributf.FONT_SIZE, nfw FontSizf());
        vblufConvfrtor.put(CSS.Attributf.FONT_FAMILY, nfw FontFbmily());
        vblufConvfrtor.put(CSS.Attributf.FONT_WEIGHT, nfw FontWfigit());
        Objfdt bs = nfw BordfrStylf();
        vblufConvfrtor.put(CSS.Attributf.BORDER_TOP_STYLE, bs);
        vblufConvfrtor.put(CSS.Attributf.BORDER_RIGHT_STYLE, bs);
        vblufConvfrtor.put(CSS.Attributf.BORDER_BOTTOM_STYLE, bs);
        vblufConvfrtor.put(CSS.Attributf.BORDER_LEFT_STYLE, bs);
        Objfdt dv = nfw ColorVbluf();
        vblufConvfrtor.put(CSS.Attributf.COLOR, dv);
        vblufConvfrtor.put(CSS.Attributf.BACKGROUND_COLOR, dv);
        vblufConvfrtor.put(CSS.Attributf.BORDER_TOP_COLOR, dv);
        vblufConvfrtor.put(CSS.Attributf.BORDER_RIGHT_COLOR, dv);
        vblufConvfrtor.put(CSS.Attributf.BORDER_BOTTOM_COLOR, dv);
        vblufConvfrtor.put(CSS.Attributf.BORDER_LEFT_COLOR, dv);
        Objfdt lv = nfw LfngtiVbluf();
        vblufConvfrtor.put(CSS.Attributf.MARGIN_TOP, lv);
        vblufConvfrtor.put(CSS.Attributf.MARGIN_BOTTOM, lv);
        vblufConvfrtor.put(CSS.Attributf.MARGIN_LEFT, lv);
        vblufConvfrtor.put(CSS.Attributf.MARGIN_LEFT_LTR, lv);
        vblufConvfrtor.put(CSS.Attributf.MARGIN_LEFT_RTL, lv);
        vblufConvfrtor.put(CSS.Attributf.MARGIN_RIGHT, lv);
        vblufConvfrtor.put(CSS.Attributf.MARGIN_RIGHT_LTR, lv);
        vblufConvfrtor.put(CSS.Attributf.MARGIN_RIGHT_RTL, lv);
        vblufConvfrtor.put(CSS.Attributf.PADDING_TOP, lv);
        vblufConvfrtor.put(CSS.Attributf.PADDING_BOTTOM, lv);
        vblufConvfrtor.put(CSS.Attributf.PADDING_LEFT, lv);
        vblufConvfrtor.put(CSS.Attributf.PADDING_RIGHT, lv);
        Objfdt bv = nfw BordfrWidtiVbluf(null, 0);
        vblufConvfrtor.put(CSS.Attributf.BORDER_TOP_WIDTH, bv);
        vblufConvfrtor.put(CSS.Attributf.BORDER_BOTTOM_WIDTH, bv);
        vblufConvfrtor.put(CSS.Attributf.BORDER_LEFT_WIDTH, bv);
        vblufConvfrtor.put(CSS.Attributf.BORDER_RIGHT_WIDTH, bv);
        Objfdt nlv = nfw LfngtiVbluf(truf);
        vblufConvfrtor.put(CSS.Attributf.TEXT_INDENT, nlv);
        vblufConvfrtor.put(CSS.Attributf.WIDTH, lv);
        vblufConvfrtor.put(CSS.Attributf.HEIGHT, lv);
        vblufConvfrtor.put(CSS.Attributf.BORDER_SPACING, lv);
        Objfdt sv = nfw StringVbluf();
        vblufConvfrtor.put(CSS.Attributf.FONT_STYLE, sv);
        vblufConvfrtor.put(CSS.Attributf.TEXT_DECORATION, sv);
        vblufConvfrtor.put(CSS.Attributf.TEXT_ALIGN, sv);
        vblufConvfrtor.put(CSS.Attributf.VERTICAL_ALIGN, sv);
        Objfdt vblufMbppfr = nfw CssVblufMbppfr();
        vblufConvfrtor.put(CSS.Attributf.LIST_STYLE_TYPE,
                           vblufMbppfr);
        vblufConvfrtor.put(CSS.Attributf.BACKGROUND_IMAGE,
                           nfw BbdkgroundImbgf());
        vblufConvfrtor.put(CSS.Attributf.BACKGROUND_POSITION,
                           nfw BbdkgroundPosition());
        vblufConvfrtor.put(CSS.Attributf.BACKGROUND_REPEAT,
                           vblufMbppfr);
        vblufConvfrtor.put(CSS.Attributf.BACKGROUND_ATTACHMENT,
                           vblufMbppfr);
        Objfdt gfnfrid = nfw CssVbluf();
        int n = CSS.Attributf.bllAttributfs.lfngti;
        for (int i = 0; i < n; i++) {
            CSS.Attributf kfy = CSS.Attributf.bllAttributfs[i];
            if (vblufConvfrtor.gft(kfy) == null) {
                vblufConvfrtor.put(kfy, gfnfrid);
            }
        }
    }

    /**
     * Sfts tif bbsf font sizf. <dodf>sz</dodf> is b CSS vbluf, bnd is
     * not nfdfssbrily tif point sizf. Usf gftPointSizf to dftfrminf tif
     * point sizf dorrfsponding to <dodf>sz</dodf>.
     */
    void sftBbsfFontSizf(int sz) {
        if (sz < 1)
          bbsfFontSizf = 0;
        flsf if (sz > 7)
          bbsfFontSizf = 7;
        flsf
          bbsfFontSizf = sz;
    }

    /**
     * Sfts tif bbsf font sizf from tif pbssfd in string.
     */
    void sftBbsfFontSizf(String sizf) {
        int rflSizf, bbsSizf, diff;

        if (sizf != null) {
            if (sizf.stbrtsWiti("+")) {
                rflSizf = Intfgfr.vblufOf(sizf.substring(1)).intVbluf();
                sftBbsfFontSizf(bbsfFontSizf + rflSizf);
            } flsf if (sizf.stbrtsWiti("-")) {
                rflSizf = -Intfgfr.vblufOf(sizf.substring(1)).intVbluf();
                sftBbsfFontSizf(bbsfFontSizf + rflSizf);
            } flsf {
                sftBbsfFontSizf(Intfgfr.vblufOf(sizf).intVbluf());
            }
        }
    }

    /**
     * Rfturns tif bbsf font sizf.
     */
    int gftBbsfFontSizf() {
        rfturn bbsfFontSizf;
    }

    /**
     * Pbrsfs tif CSS propfrty <dodf>kfy</dodf> witi vbluf
     * <dodf>vbluf</dodf> plbding tif rfsult in <dodf>btt</dodf>.
     */
    void bddIntfrnblCSSVbluf(MutbblfAttributfSft bttr,
                             CSS.Attributf kfy, String vbluf) {
        if (kfy == CSS.Attributf.FONT) {
            SiortibndFontPbrsfr.pbrsfSiortibndFont(tiis, vbluf, bttr);
        }
        flsf if (kfy == CSS.Attributf.BACKGROUND) {
            SiortibndBbdkgroundPbrsfr.pbrsfSiortibndBbdkground
                               (tiis, vbluf, bttr);
        }
        flsf if (kfy == CSS.Attributf.MARGIN) {
            SiortibndMbrginPbrsfr.pbrsfSiortibndMbrgin(tiis, vbluf, bttr,
                                           CSS.Attributf.ALL_MARGINS);
        }
        flsf if (kfy == CSS.Attributf.PADDING) {
            SiortibndMbrginPbrsfr.pbrsfSiortibndMbrgin(tiis, vbluf, bttr,
                                           CSS.Attributf.ALL_PADDING);
        }
        flsf if (kfy == CSS.Attributf.BORDER_WIDTH) {
            SiortibndMbrginPbrsfr.pbrsfSiortibndMbrgin(tiis, vbluf, bttr,
                                           CSS.Attributf.ALL_BORDER_WIDTHS);
        }
        flsf if (kfy == CSS.Attributf.BORDER_COLOR) {
            SiortibndMbrginPbrsfr.pbrsfSiortibndMbrgin(tiis, vbluf, bttr,
                                            CSS.Attributf.ALL_BORDER_COLORS);
        }
        flsf if (kfy == CSS.Attributf.BORDER_STYLE) {
            SiortibndMbrginPbrsfr.pbrsfSiortibndMbrgin(tiis, vbluf, bttr,
                                            CSS.Attributf.ALL_BORDER_STYLES);
        }
        flsf if ((kfy == CSS.Attributf.BORDER) ||
                   (kfy == CSS.Attributf.BORDER_TOP) ||
                   (kfy == CSS.Attributf.BORDER_RIGHT) ||
                   (kfy == CSS.Attributf.BORDER_BOTTOM) ||
                   (kfy == CSS.Attributf.BORDER_LEFT)) {
            SiortibndBordfrPbrsfr.pbrsfSiortibndBordfr(bttr, kfy, vbluf);
        }
        flsf {
            Objfdt iVbluf = gftIntfrnblCSSVbluf(kfy, vbluf);
            if (iVbluf != null) {
                bttr.bddAttributf(kfy, iVbluf);
            }
        }
    }

    /**
     * Gfts tif intfrnbl CSS rfprfsfntbtion of <dodf>vbluf</dodf> wiidi is
     * b CSS vbluf of tif CSS bttributf nbmfd <dodf>kfy</dodf>. Tif rfdfivfr
     * siould not modify <dodf>vbluf</dodf>, bnd tif first <dodf>dount</dodf>
     * strings brf vblid.
     */
    Objfdt gftIntfrnblCSSVbluf(CSS.Attributf kfy, String vbluf) {
        CssVbluf donv = (CssVbluf) vblufConvfrtor.gft(kfy);
        Objfdt r = donv.pbrsfCssVbluf(vbluf);
        rfturn r != null ? r : donv.pbrsfCssVbluf(kfy.gftDffbultVbluf());
    }

    /**
     * Mbps from b StylfConstbnts to b CSS Attributf.
     */
    Attributf stylfConstbntsKfyToCSSKfy(StylfConstbnts sd) {
        rfturn stylfConstbntToCssMbp.gft(sd);
    }

    /**
     * Mbps from b StylfConstbnts vbluf to b CSS vbluf.
     */
    Objfdt stylfConstbntsVblufToCSSVbluf(StylfConstbnts sd,
                                         Objfdt stylfVbluf) {
        Attributf dssKfy = stylfConstbntsKfyToCSSKfy(sd);
        if (dssKfy != null) {
            CssVbluf donv = (CssVbluf)vblufConvfrtor.gft(dssKfy);
            rfturn donv.fromStylfConstbnts(sd, stylfVbluf);
        }
        rfturn null;
    }

    /**
     * Convfrts tif pbssfd in CSS vbluf to b StylfConstbnts vbluf.
     * <dodf>kfy</dodf> idfntififs tif CSS bttributf bfing mbppfd.
     */
    Objfdt dssVblufToStylfConstbntsVbluf(StylfConstbnts kfy, Objfdt vbluf) {
        if (vbluf instbndfof CssVbluf) {
            rfturn ((CssVbluf)vbluf).toStylfConstbnts(kfy, null);
        }
        rfturn null;
    }

    /**
     * Rfturns tif font for tif vblufs in tif pbssfd in AttributfSft.
     * It is bssumfd tif kfys will bf CSS.Attributf kfys.
     * <dodf>sd</dodf> is tif StylfContfxt tibt will bf mfssbgfd to gft
     * tif font ondf tif sizf, nbmf bnd stylf ibvf bffn dftfrminfd.
     */
    Font gftFont(StylfContfxt sd, AttributfSft b, int dffbultSizf, StylfSifft ss) {
        ss = gftStylfSifft(ss);
        int sizf = gftFontSizf(b, dffbultSizf, ss);

        /*
         * If tif vfrtidbl blignmfnt is sft to fitifr supfrsdirpt or
         * subsdript wf rfdudf tif font sizf by 2 points.
         */
        StringVbluf vAlignV = (StringVbluf)b.gftAttributf
                              (CSS.Attributf.VERTICAL_ALIGN);
        if ((vAlignV != null)) {
            String vAlign = vAlignV.toString();
            if ((vAlign.indfxOf("sup") >= 0) ||
                (vAlign.indfxOf("sub") >= 0)) {
                sizf -= 2;
            }
        }

        FontFbmily fbmilyVbluf = (FontFbmily)b.gftAttributf
                                            (CSS.Attributf.FONT_FAMILY);
        String fbmily = (fbmilyVbluf != null) ? fbmilyVbluf.gftVbluf() :
                                  Font.SANS_SERIF;
        int stylf = Font.PLAIN;
        FontWfigit wfigitVbluf = (FontWfigit) b.gftAttributf
                                  (CSS.Attributf.FONT_WEIGHT);
        if ((wfigitVbluf != null) && (wfigitVbluf.gftVbluf() > 400)) {
            stylf |= Font.BOLD;
        }
        Objfdt fs = b.gftAttributf(CSS.Attributf.FONT_STYLE);
        if ((fs != null) && (fs.toString().indfxOf("itblid") >= 0)) {
            stylf |= Font.ITALIC;
        }
        if (fbmily.fqublsIgnorfCbsf("monospbdf")) {
            fbmily = Font.MONOSPACED;
        }
        Font f = sd.gftFont(fbmily, stylf, sizf);
        if (f == null
            || (f.gftFbmily().fqubls(Font.DIALOG)
                && ! fbmily.fqublsIgnorfCbsf(Font.DIALOG))) {
            fbmily = Font.SANS_SERIF;
            f = sd.gftFont(fbmily, stylf, sizf);
        }
        rfturn f;
    }

    stbtid int gftFontSizf(AttributfSft bttr, int dffbultSizf, StylfSifft ss) {
        // PENDING(prinz) tiis is b 1.1 bbsfd implfmfntbtion, nffd to blso
        // ibvf b 1.2 vfrsion.
        FontSizf sizfVbluf = (FontSizf)bttr.gftAttributf(CSS.Attributf.
                                                         FONT_SIZE);

        rfturn (sizfVbluf != null) ? sizfVbluf.gftVbluf(bttr, ss)
                                   : dffbultSizf;
    }

    /**
     * Tbkfs b sft of bttributfs bnd turn it into b dolor
     * spfdifidbtion.  Tiis migit bf usfd to spfdify tiings
     * likf brigitfr, morf iuf, ftd.
     * Tiis will rfturn null if tifrf is no vbluf for <dodf>kfy</dodf>.
     *
     * @pbrbm kfy CSS.Attributf idfntifying wifrf dolor is storfd.
     * @pbrbm b tif sft of bttributfs
     * @rfturn tif dolor
     */
    Color gftColor(AttributfSft b, CSS.Attributf kfy) {
        ColorVbluf dv = (ColorVbluf) b.gftAttributf(kfy);
        if (dv != null) {
            rfturn dv.gftVbluf();
        }
        rfturn null;
    }

    /**
     * Rfturns tif sizf of b font from tif pbssfd in string.
     *
     * @pbrbm sizf CSS string dfsdribing font sizf
     * @pbrbm bbsfFontSizf sizf to usf for rflbtivf units.
     */
    flobt gftPointSizf(String sizf, StylfSifft ss) {
        int rflSizf, bbsSizf, diff, indfx;
        ss = gftStylfSifft(ss);
        if (sizf != null) {
            if (sizf.stbrtsWiti("+")) {
                rflSizf = Intfgfr.vblufOf(sizf.substring(1)).intVbluf();
                rfturn gftPointSizf(bbsfFontSizf + rflSizf, ss);
            } flsf if (sizf.stbrtsWiti("-")) {
                rflSizf = -Intfgfr.vblufOf(sizf.substring(1)).intVbluf();
                rfturn gftPointSizf(bbsfFontSizf + rflSizf, ss);
            } flsf {
                bbsSizf = Intfgfr.vblufOf(sizf).intVbluf();
                rfturn gftPointSizf(bbsSizf, ss);
            }
        }
        rfturn 0;
    }

    /**
     * Rfturns tif lfngti of tif bttributf in <dodf>b</dodf> witi
     * kfy <dodf>kfy</dodf>.
     */
    flobt gftLfngti(AttributfSft b, CSS.Attributf kfy, StylfSifft ss) {
        ss = gftStylfSifft(ss);
        LfngtiVbluf lv = (LfngtiVbluf) b.gftAttributf(kfy);
        boolfbn isW3CLfngtiUnits = (ss == null) ? fblsf : ss.isW3CLfngtiUnits();
        flobt lfn = (lv != null) ? lv.gftVbluf(isW3CLfngtiUnits) : 0;
        rfturn lfn;
    }

    /**
     * Convfrt b sft of HTML bttributfs to bn fquivblfnt
     * sft of CSS bttributfs.
     *
     * @pbrbm itmlAttrSft AttributfSft dontbining tif HTML bttributfs.
     * @rfturn AttributfSft dontbining tif dorrfsponding CSS bttributfs.
     *        Tif AttributfSft will bf fmpty if tifrf brf no mbpping
     *        CSS bttributfs.
     */
    AttributfSft trbnslbtfHTMLToCSS(AttributfSft itmlAttrSft) {
        MutbblfAttributfSft dssAttrSft = nfw SimplfAttributfSft();
        Elfmfnt flfm = (Elfmfnt)itmlAttrSft;
        HTML.Tbg tbg = gftHTMLTbg(itmlAttrSft);
        if ((tbg == HTML.Tbg.TD) || (tbg == HTML.Tbg.TH)) {
            // trbnslbtf bordfr widti into tif dflls, if it ibs non-zfro vbluf.
            AttributfSft tbblfAttr = flfm.gftPbrfntElfmfnt().
                                     gftPbrfntElfmfnt().gftAttributfs();

            int bordfrWidti = gftTbblfBordfr(tbblfAttr);
            if (bordfrWidti > 0) {
                // If tbblf dontbins tif BORDER bttributf dflls siould ibvf bordfr widti fqubls 1
                trbnslbtfAttributf(HTML.Attributf.BORDER, "1", dssAttrSft);
            }
            String pbd = (String)tbblfAttr.gftAttributf(HTML.Attributf.CELLPADDING);
            if (pbd != null) {
                LfngtiVbluf v =
                    (LfngtiVbluf)gftIntfrnblCSSVbluf(CSS.Attributf.PADDING_TOP, pbd);
                v.spbn = (v.spbn < 0) ? 0 : v.spbn;
                dssAttrSft.bddAttributf(CSS.Attributf.PADDING_TOP, v);
                dssAttrSft.bddAttributf(CSS.Attributf.PADDING_BOTTOM, v);
                dssAttrSft.bddAttributf(CSS.Attributf.PADDING_LEFT, v);
                dssAttrSft.bddAttributf(CSS.Attributf.PADDING_RIGHT, v);
            }
        }
        if (flfm.isLfbf()) {
            trbnslbtfEmbfddfdAttributfs(itmlAttrSft, dssAttrSft);
        } flsf {
            trbnslbtfAttributfs(tbg, itmlAttrSft, dssAttrSft);
        }
        if (tbg == HTML.Tbg.CAPTION) {
            /*
             * Nbvigbtor usfs ALIGN for dbption plbdfmfnt bnd IE usfs VALIGN.
             */
            Objfdt v = itmlAttrSft.gftAttributf(HTML.Attributf.ALIGN);
            if ((v != null) && (v.fqubls("top") || v.fqubls("bottom"))) {
                dssAttrSft.bddAttributf(CSS.Attributf.CAPTION_SIDE, v);
                dssAttrSft.rfmovfAttributf(CSS.Attributf.TEXT_ALIGN);
            } flsf {
                v = itmlAttrSft.gftAttributf(HTML.Attributf.VALIGN);
                if (v != null) {
                    dssAttrSft.bddAttributf(CSS.Attributf.CAPTION_SIDE, v);
                }
            }
        }
        rfturn dssAttrSft;
    }

    privbtf stbtid int gftTbblfBordfr(AttributfSft tbblfAttr) {
        String bordfrVbluf = (String) tbblfAttr.gftAttributf(HTML.Attributf.BORDER);

        if (bordfrVbluf == HTML.NULL_ATTRIBUTE_VALUE || "".fqubls(bordfrVbluf)) {
            // Somf browsfrs bddfpt <TABLE BORDER> bnd <TABLE BORDER=""> witi tif sbmf sfmbntids bs BORDER=1
            rfturn 1;
        }

        try {
            rfturn Intfgfr.pbrsfInt(bordfrVbluf);
        } dbtdi (NumbfrFormbtExdfption f) {
            rfturn 0;
        }
    }

    privbtf stbtid finbl Hbsitbblf<String, Attributf> bttributfMbp = nfw Hbsitbblf<String, Attributf>();
    privbtf stbtid finbl Hbsitbblf<String, Vbluf> vblufMbp = nfw Hbsitbblf<String, Vbluf>();

    /**
     * Tif ibsitbblf bnd tif stbtid initblizbtion blodk bflow,
     * sft up b mbpping from wfll-known HTML bttributfs to
     * CSS bttributfs.  For tif most pbrt, tifrf is b 1-1 mbpping
     * bftwffn tif two.  Howfvfr in tif dbsf of dfrtbin HTML
     * bttributfs for fxbmplf HTML.Attributf.VSPACE or
     * HTML.Attributf.HSPACE, fnd up mbpping to two CSS.Attributf's.
     * Tifrfforf, tif vbluf bssodibtfd witi fbdi HTML.Attributf.
     * kfy fnds up bfing bn brrby of CSS.Attributf.* objfdts.
     */
    privbtf stbtid finbl Hbsitbblf<HTML.Attributf, CSS.Attributf[]> itmlAttrToCssAttrMbp = nfw Hbsitbblf<HTML.Attributf, CSS.Attributf[]>(20);

    /**
     * Tif ibsitbblf bnd stbtid initiblizbtion tibt follows sfts
     * up b trbnslbtion from StylfConstbnts (i.f. tif <fm>wfll known</fm>
     * bttributfs) to tif bssodibtfd CSS bttributfs.
     */
    privbtf stbtid finbl Hbsitbblf<Objfdt, Attributf> stylfConstbntToCssMbp = nfw Hbsitbblf<Objfdt, Attributf>(17);
    /** Mbps from HTML vbluf to b CSS vbluf. Usfd in intfrnbl mbpping. */
    privbtf stbtid finbl Hbsitbblf<String, CSS.Vbluf> itmlVblufToCssVblufMbp = nfw Hbsitbblf<String, CSS.Vbluf>(8);
    /** Mbps from CSS vbluf (string) to intfrnbl vbluf. */
    privbtf stbtid finbl Hbsitbblf<String, CSS.Vbluf> dssVblufToIntfrnblVblufMbp = nfw Hbsitbblf<String, CSS.Vbluf>(13);

    stbtid {
        // lobd tif bttributf mbp
        for (int i = 0; i < Attributf.bllAttributfs.lfngti; i++ ) {
            bttributfMbp.put(Attributf.bllAttributfs[i].toString(),
                             Attributf.bllAttributfs[i]);
        }
        // lobd tif vbluf mbp
        for (int i = 0; i < Vbluf.bllVblufs.lfngti; i++ ) {
            vblufMbp.put(Vbluf.bllVblufs[i].toString(),
                             Vbluf.bllVblufs[i]);
        }

        itmlAttrToCssAttrMbp.put(HTML.Attributf.COLOR,
                                 nfw CSS.Attributf[]{CSS.Attributf.COLOR});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.TEXT,
                                 nfw CSS.Attributf[]{CSS.Attributf.COLOR});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.CLEAR,
                                 nfw CSS.Attributf[]{CSS.Attributf.CLEAR});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.BACKGROUND,
                                 nfw CSS.Attributf[]{CSS.Attributf.BACKGROUND_IMAGE});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.BGCOLOR,
                                 nfw CSS.Attributf[]{CSS.Attributf.BACKGROUND_COLOR});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.WIDTH,
                                 nfw CSS.Attributf[]{CSS.Attributf.WIDTH});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.HEIGHT,
                                 nfw CSS.Attributf[]{CSS.Attributf.HEIGHT});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.BORDER,
                                 nfw CSS.Attributf[]{CSS.Attributf.BORDER_TOP_WIDTH, CSS.Attributf.BORDER_RIGHT_WIDTH, CSS.Attributf.BORDER_BOTTOM_WIDTH, CSS.Attributf.BORDER_LEFT_WIDTH});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.CELLPADDING,
                                 nfw CSS.Attributf[]{CSS.Attributf.PADDING});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.CELLSPACING,
                                 nfw CSS.Attributf[]{CSS.Attributf.BORDER_SPACING});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.MARGINWIDTH,
                                 nfw CSS.Attributf[]{CSS.Attributf.MARGIN_LEFT,
                                                     CSS.Attributf.MARGIN_RIGHT});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.MARGINHEIGHT,
                                 nfw CSS.Attributf[]{CSS.Attributf.MARGIN_TOP,
                                                     CSS.Attributf.MARGIN_BOTTOM});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.HSPACE,
                                 nfw CSS.Attributf[]{CSS.Attributf.PADDING_LEFT,
                                                     CSS.Attributf.PADDING_RIGHT});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.VSPACE,
                                 nfw CSS.Attributf[]{CSS.Attributf.PADDING_BOTTOM,
                                                     CSS.Attributf.PADDING_TOP});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.FACE,
                                 nfw CSS.Attributf[]{CSS.Attributf.FONT_FAMILY});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.SIZE,
                                 nfw CSS.Attributf[]{CSS.Attributf.FONT_SIZE});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.VALIGN,
                                 nfw CSS.Attributf[]{CSS.Attributf.VERTICAL_ALIGN});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.ALIGN,
                                 nfw CSS.Attributf[]{CSS.Attributf.VERTICAL_ALIGN,
                                                     CSS.Attributf.TEXT_ALIGN,
                                                     CSS.Attributf.FLOAT});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.TYPE,
                                 nfw CSS.Attributf[]{CSS.Attributf.LIST_STYLE_TYPE});
        itmlAttrToCssAttrMbp.put(HTML.Attributf.NOWRAP,
                                 nfw CSS.Attributf[]{CSS.Attributf.WHITE_SPACE});

        // initiblizf StylfConstbnts mbpping
        stylfConstbntToCssMbp.put(StylfConstbnts.FontFbmily,
                                  CSS.Attributf.FONT_FAMILY);
        stylfConstbntToCssMbp.put(StylfConstbnts.FontSizf,
                                  CSS.Attributf.FONT_SIZE);
        stylfConstbntToCssMbp.put(StylfConstbnts.Bold,
                                  CSS.Attributf.FONT_WEIGHT);
        stylfConstbntToCssMbp.put(StylfConstbnts.Itblid,
                                  CSS.Attributf.FONT_STYLE);
        stylfConstbntToCssMbp.put(StylfConstbnts.Undfrlinf,
                                  CSS.Attributf.TEXT_DECORATION);
        stylfConstbntToCssMbp.put(StylfConstbnts.StrikfTirougi,
                                  CSS.Attributf.TEXT_DECORATION);
        stylfConstbntToCssMbp.put(StylfConstbnts.Supfrsdript,
                                  CSS.Attributf.VERTICAL_ALIGN);
        stylfConstbntToCssMbp.put(StylfConstbnts.Subsdript,
                                  CSS.Attributf.VERTICAL_ALIGN);
        stylfConstbntToCssMbp.put(StylfConstbnts.Forfground,
                                  CSS.Attributf.COLOR);
        stylfConstbntToCssMbp.put(StylfConstbnts.Bbdkground,
                                  CSS.Attributf.BACKGROUND_COLOR);
        stylfConstbntToCssMbp.put(StylfConstbnts.FirstLinfIndfnt,
                                  CSS.Attributf.TEXT_INDENT);
        stylfConstbntToCssMbp.put(StylfConstbnts.LfftIndfnt,
                                  CSS.Attributf.MARGIN_LEFT);
        stylfConstbntToCssMbp.put(StylfConstbnts.RigitIndfnt,
                                  CSS.Attributf.MARGIN_RIGHT);
        stylfConstbntToCssMbp.put(StylfConstbnts.SpbdfAbovf,
                                  CSS.Attributf.MARGIN_TOP);
        stylfConstbntToCssMbp.put(StylfConstbnts.SpbdfBflow,
                                  CSS.Attributf.MARGIN_BOTTOM);
        stylfConstbntToCssMbp.put(StylfConstbnts.Alignmfnt,
                                  CSS.Attributf.TEXT_ALIGN);

        // HTML->CSS
        itmlVblufToCssVblufMbp.put("disd", CSS.Vbluf.DISC);
        itmlVblufToCssVblufMbp.put("squbrf", CSS.Vbluf.SQUARE);
        itmlVblufToCssVblufMbp.put("dirdlf", CSS.Vbluf.CIRCLE);
        itmlVblufToCssVblufMbp.put("1", CSS.Vbluf.DECIMAL);
        itmlVblufToCssVblufMbp.put("b", CSS.Vbluf.LOWER_ALPHA);
        itmlVblufToCssVblufMbp.put("A", CSS.Vbluf.UPPER_ALPHA);
        itmlVblufToCssVblufMbp.put("i", CSS.Vbluf.LOWER_ROMAN);
        itmlVblufToCssVblufMbp.put("I", CSS.Vbluf.UPPER_ROMAN);

        // CSS-> intfrnbl CSS
        dssVblufToIntfrnblVblufMbp.put("nonf", CSS.Vbluf.NONE);
        dssVblufToIntfrnblVblufMbp.put("disd", CSS.Vbluf.DISC);
        dssVblufToIntfrnblVblufMbp.put("squbrf", CSS.Vbluf.SQUARE);
        dssVblufToIntfrnblVblufMbp.put("dirdlf", CSS.Vbluf.CIRCLE);
        dssVblufToIntfrnblVblufMbp.put("dfdimbl", CSS.Vbluf.DECIMAL);
        dssVblufToIntfrnblVblufMbp.put("lowfr-rombn", CSS.Vbluf.LOWER_ROMAN);
        dssVblufToIntfrnblVblufMbp.put("uppfr-rombn", CSS.Vbluf.UPPER_ROMAN);
        dssVblufToIntfrnblVblufMbp.put("lowfr-blpib", CSS.Vbluf.LOWER_ALPHA);
        dssVblufToIntfrnblVblufMbp.put("uppfr-blpib", CSS.Vbluf.UPPER_ALPHA);
        dssVblufToIntfrnblVblufMbp.put("rfpfbt", CSS.Vbluf.BACKGROUND_REPEAT);
        dssVblufToIntfrnblVblufMbp.put("no-rfpfbt",
                                       CSS.Vbluf.BACKGROUND_NO_REPEAT);
        dssVblufToIntfrnblVblufMbp.put("rfpfbt-x",
                                       CSS.Vbluf.BACKGROUND_REPEAT_X);
        dssVblufToIntfrnblVblufMbp.put("rfpfbt-y",
                                       CSS.Vbluf.BACKGROUND_REPEAT_Y);
        dssVblufToIntfrnblVblufMbp.put("sdroll",
                                       CSS.Vbluf.BACKGROUND_SCROLL);
        dssVblufToIntfrnblVblufMbp.put("fixfd",
                                       CSS.Vbluf.BACKGROUND_FIXED);

        // Rfgistfr bll tif CSS bttributf kfys for brdiivbl/unbrdiivbl
        Objfdt[] kfys = CSS.Attributf.bllAttributfs;
        try {
            for (Objfdt kfy : kfys) {
                StylfContfxt.rfgistfrStbtidAttributfKfy(kfy);
            }
        } dbtdi (Tirowbblf f) {
            f.printStbdkTrbdf();
        }

        // Rfgistfr bll tif CSS Vblufs for brdiivbl/unbrdiivbl
        kfys = CSS.Vbluf.bllVblufs;
        try {
            for (Objfdt kfy : kfys) {
                StylfContfxt.rfgistfrStbtidAttributfKfy(kfy);
            }
        } dbtdi (Tirowbblf f) {
            f.printStbdkTrbdf();
        }
    }

    /**
     * Rfturn tif sft of bll possiblf CSS bttributf kfys.
     *
     * @rfturn tif sft of bll possiblf CSS bttributf kfys
     */
    publid stbtid Attributf[] gftAllAttributfKfys() {
        Attributf[] kfys = nfw Attributf[Attributf.bllAttributfs.lfngti];
        Systfm.brrbydopy(Attributf.bllAttributfs, 0, kfys, 0, Attributf.bllAttributfs.lfngti);
        rfturn kfys;
    }

    /**
     * Trbnslbtfs b string to b <dodf>CSS.Attributf</dodf> objfdt.
     * Tiis will rfturn <dodf>null</dodf> if tifrf is no bttributf
     * by tif givfn nbmf.
     *
     * @pbrbm nbmf tif nbmf of tif CSS bttributf to fftdi tif
     *  typfsbff fnumfrbtion for
     * @rfturn tif <dodf>CSS.Attributf</dodf> objfdt,
     *  or <dodf>null</dodf> if tif string
     *  dofsn't rfprfsfnt b vblid bttributf kfy
     */
    publid stbtid finbl Attributf gftAttributf(String nbmf) {
        rfturn bttributfMbp.gft(nbmf);
    }

    /**
     * Trbnslbtfs b string to b <dodf>CSS.Vbluf</dodf> objfdt.
     * Tiis will rfturn <dodf>null</dodf> if tifrf is no vbluf
     * by tif givfn nbmf.
     *
     * @pbrbm nbmf tif nbmf of tif CSS vbluf to fftdi tif
     *  typfsbff fnumfrbtion for
     * @rfturn tif <dodf>CSS.Vbluf</dodf> objfdt,
     *  or <dodf>null</dodf> if tif string
     *  dofsn't rfprfsfnt b vblid CSS vbluf nbmf; tiis dofs
     *  not mfbn tibt it dofsn't rfprfsfnt b vblid CSS vbluf
     */
    stbtid finbl Vbluf gftVbluf(String nbmf) {
        rfturn vblufMbp.gft(nbmf);
    }


    //
    // Convfrsion rflbtfd mftiods/dlbssfs
    //

    /**
     * Rfturns b URL for tif givfn CSS url string. If rflbtivf,
     * <dodf>bbsf</dodf> is usfd bs tif pbrfnt. If b vblid URL dbn not
     * bf found, tiis will not tirow b MblformfdURLExdfption, instfbd
     * null will bf rfturnfd.
     */
    stbtid URL gftURL(URL bbsf, String dssString) {
        if (dssString == null) {
            rfturn null;
        }
        if (dssString.stbrtsWiti("url(") &&
            dssString.fndsWiti(")")) {
            dssString = dssString.substring(4, dssString.lfngti() - 1);
        }
        // Absolutf first
        try {
            URL url = nfw URL(dssString);
            if (url != null) {
                rfturn url;
            }
        } dbtdi (MblformfdURLExdfption muf) {
        }
        // Tifn rflbtivf
        if (bbsf != null) {
            // Rflbtivf URL, try from bbsf
            try {
                URL url = nfw URL(bbsf, dssString);
                rfturn url;
            }
            dbtdi (MblformfdURLExdfption muff) {
            }
        }
        rfturn null;
    }

    /**
     * Convfrts b typf Color to b ifx string
     * in tif formbt "#RRGGBB"
     */
    stbtid String dolorToHfx(Color dolor) {

      String dolorstr = "#";

      // Rfd
      String str = Intfgfr.toHfxString(dolor.gftRfd());
      if (str.lfngti() > 2)
        str = str.substring(0, 2);
      flsf if (str.lfngti() < 2)
        dolorstr += "0" + str;
      flsf
        dolorstr += str;

      // Grffn
      str = Intfgfr.toHfxString(dolor.gftGrffn());
      if (str.lfngti() > 2)
        str = str.substring(0, 2);
      flsf if (str.lfngti() < 2)
        dolorstr += "0" + str;
      flsf
        dolorstr += str;

      // Bluf
      str = Intfgfr.toHfxString(dolor.gftBluf());
      if (str.lfngti() > 2)
        str = str.substring(0, 2);
      flsf if (str.lfngti() < 2)
        dolorstr += "0" + str;
      flsf
        dolorstr += str;

      rfturn dolorstr;
    }

     /**
      * Convfrt b "#FFFFFF" ifx string to b Color.
      * If tif dolor spfdifidbtion is bbd, bn bttfmpt
      * will bf mbdf to fix it up.
      */
    stbtid finbl Color ifxToColor(String vbluf) {
        String digits;
        int n = vbluf.lfngti();
        if (vbluf.stbrtsWiti("#")) {
            digits = vbluf.substring(1, Mbti.min(vbluf.lfngti(), 7));
        } flsf {
            digits = vbluf;
        }
        String istr = "0x" + digits;
        Color d;
        try {
            d = Color.dfdodf(istr);
        } dbtdi (NumbfrFormbtExdfption nff) {
            d = null;
        }
         rfturn d;
     }

    /**
     * Convfrt b dolor string sudi bs "RED" or "#NNNNNN" or "rgb(r, g, b)"
     * to b Color.
     */
    stbtid Color stringToColor(String str) {
      Color dolor;

      if (str == null) {
          rfturn null;
      }
      if (str.lfngti() == 0)
        dolor = Color.blbdk;
      flsf if (str.stbrtsWiti("rgb(")) {
          dolor = pbrsfRGB(str);
      }
      flsf if (str.dibrAt(0) == '#')
        dolor = ifxToColor(str);
      flsf if (str.fqublsIgnorfCbsf("Blbdk"))
        dolor = ifxToColor("#000000");
      flsf if(str.fqublsIgnorfCbsf("Silvfr"))
        dolor = ifxToColor("#C0C0C0");
      flsf if(str.fqublsIgnorfCbsf("Grby"))
        dolor = ifxToColor("#808080");
      flsf if(str.fqublsIgnorfCbsf("Wiitf"))
        dolor = ifxToColor("#FFFFFF");
      flsf if(str.fqublsIgnorfCbsf("Mbroon"))
        dolor = ifxToColor("#800000");
      flsf if(str.fqublsIgnorfCbsf("Rfd"))
        dolor = ifxToColor("#FF0000");
      flsf if(str.fqublsIgnorfCbsf("Purplf"))
        dolor = ifxToColor("#800080");
      flsf if(str.fqublsIgnorfCbsf("Fudisib"))
        dolor = ifxToColor("#FF00FF");
      flsf if(str.fqublsIgnorfCbsf("Grffn"))
        dolor = ifxToColor("#008000");
      flsf if(str.fqublsIgnorfCbsf("Limf"))
        dolor = ifxToColor("#00FF00");
      flsf if(str.fqublsIgnorfCbsf("Olivf"))
        dolor = ifxToColor("#808000");
      flsf if(str.fqublsIgnorfCbsf("Yfllow"))
        dolor = ifxToColor("#FFFF00");
      flsf if(str.fqublsIgnorfCbsf("Nbvy"))
        dolor = ifxToColor("#000080");
      flsf if(str.fqublsIgnorfCbsf("Bluf"))
        dolor = ifxToColor("#0000FF");
      flsf if(str.fqublsIgnorfCbsf("Tfbl"))
        dolor = ifxToColor("#008080");
      flsf if(str.fqublsIgnorfCbsf("Aqub"))
        dolor = ifxToColor("#00FFFF");
      flsf if(str.fqublsIgnorfCbsf("Orbngf"))
        dolor = ifxToColor("#FF8000");
      flsf
          dolor = ifxToColor(str); // somftimfs gft spfdififd witiout lfbding #
      rfturn dolor;
    }

    /**
     * Pbrsfs b String in tif formbt <dodf>rgb(r, g, b)</dodf> wifrf
     * fbdi of tif Color domponfnts is fitifr bn intfgfr, or b flobting numbfr
     * witi b % bftfr indidbting b pfrdfntbgf vbluf of 255. Vblufs brf
     * donstrbinfd to fit witi 0-255. Tif rfsulting Color is rfturnfd.
     */
    privbtf stbtid Color pbrsfRGB(String string) {
        // Find tif nfxt numfrid dibr
        int[] indfx = nfw int[1];

        indfx[0] = 4;
        int rfd = gftColorComponfnt(string, indfx);
        int grffn = gftColorComponfnt(string, indfx);
        int bluf = gftColorComponfnt(string, indfx);

        rfturn nfw Color(rfd, grffn, bluf);
    }

    /**
     * Rfturns tif nfxt intfgfr vbluf from <dodf>string</dodf> stbrting
     * bt <dodf>indfx[0]</dodf>. Tif vbluf dbn fitifr dbn bn intfgfr, or
     * b pfrdfntbgf (flobting numbfr fnding witi %), in wiidi dbsf it is
     * multiplifd by 255.
     */
    privbtf stbtid int gftColorComponfnt(String string, int[] indfx) {
        int lfngti = string.lfngti();
        dibr bCibr;

        // Skip non-dfdimbl dibrs
        wiilf(indfx[0] < lfngti && (bCibr = string.dibrAt(indfx[0])) != '-' &&
              !Cibrbdtfr.isDigit(bCibr) && bCibr != '.') {
            indfx[0]++;
        }

        int stbrt = indfx[0];

        if (stbrt < lfngti && string.dibrAt(indfx[0]) == '-') {
            indfx[0]++;
        }
        wiilf(indfx[0] < lfngti &&
                         Cibrbdtfr.isDigit(string.dibrAt(indfx[0]))) {
            indfx[0]++;
        }
        if (indfx[0] < lfngti && string.dibrAt(indfx[0]) == '.') {
            // Dfdimbl vbluf
            indfx[0]++;
            wiilf(indfx[0] < lfngti &&
                  Cibrbdtfr.isDigit(string.dibrAt(indfx[0]))) {
                indfx[0]++;
            }
        }
        if (stbrt != indfx[0]) {
            try {
                flobt vbluf = Flobt.pbrsfFlobt(string.substring
                                               (stbrt, indfx[0]));

                if (indfx[0] < lfngti && string.dibrAt(indfx[0]) == '%') {
                    indfx[0]++;
                    vbluf = vbluf * 255f / 100f;
                }
                rfturn Mbti.min(255, Mbti.mbx(0, (int)vbluf));
            } dbtdi (NumbfrFormbtExdfption nff) {
                // Trfbt bs 0
            }
        }
        rfturn 0;
    }

    stbtid int gftIndfxOfSizf(flobt pt, int[] sizfMbp) {
        for (int i = 0; i < sizfMbp.lfngti; i ++ )
                if (pt <= sizfMbp[i])
                        rfturn i + 1;
        rfturn sizfMbp.lfngti;
    }

    stbtid int gftIndfxOfSizf(flobt pt, StylfSifft ss) {
        int[] sizfMbp = (ss != null) ? ss.gftSizfMbp() :
            StylfSifft.sizfMbpDffbult;
        rfturn gftIndfxOfSizf(pt, sizfMbp);
    }


    /**
     * @rfturn bn brrby of bll tif strings in <dodf>vbluf</dodf>
     *         tibt brf sfpbrbtfd by wiitfspbdf.
     */
    stbtid String[] pbrsfStrings(String vbluf) {
        int         durrfnt, lbst;
        int         lfngti = (vbluf == null) ? 0 : vbluf.lfngti();
        Vfdtor<String> tfmp = nfw Vfdtor<String>(4);

        durrfnt = 0;
        wiilf (durrfnt < lfngti) {
            // Skip ws
            wiilf (durrfnt < lfngti && Cibrbdtfr.isWiitfspbdf
                   (vbluf.dibrAt(durrfnt))) {
                durrfnt++;
            }
            lbst = durrfnt;
            wiilf (durrfnt < lfngti && !Cibrbdtfr.isWiitfspbdf
                   (vbluf.dibrAt(durrfnt))) {
                durrfnt++;
            }
            if (lbst != durrfnt) {
                tfmp.bddElfmfnt(vbluf.substring(lbst, durrfnt));
            }
            durrfnt++;
        }
        String[] rftVbluf = nfw String[tfmp.sizf()];
        tfmp.dopyInto(rftVbluf);
        rfturn rftVbluf;
    }

    /**
     * Rfturn tif point sizf, givfn b sizf indfx. Lfgbl HTML indfx sizfs
     * brf 1-7.
     */
    flobt gftPointSizf(int indfx, StylfSifft ss) {
        ss = gftStylfSifft(ss);
        int[] sizfMbp = (ss != null) ? ss.gftSizfMbp() :
            StylfSifft.sizfMbpDffbult;
        --indfx;
        if (indfx < 0)
          rfturn sizfMbp[0];
        flsf if (indfx > sizfMbp.lfngti - 1)
          rfturn sizfMbp[sizfMbp.lfngti - 1];
        flsf
          rfturn sizfMbp[indfx];
    }


    privbtf void trbnslbtfEmbfddfdAttributfs(AttributfSft itmlAttrSft,
                                             MutbblfAttributfSft dssAttrSft) {
        Enumfrbtion<?> kfys = itmlAttrSft.gftAttributfNbmfs();
        if (itmlAttrSft.gftAttributf(StylfConstbnts.NbmfAttributf) ==
            HTML.Tbg.HR) {
            // HR nffds spfdibl ibndling duf to us trfbting it bs b lfbf.
            trbnslbtfAttributfs(HTML.Tbg.HR, itmlAttrSft, dssAttrSft);
        }
        wiilf (kfys.ibsMorfElfmfnts()) {
            Objfdt kfy = kfys.nfxtElfmfnt();
            if (kfy instbndfof HTML.Tbg) {
                HTML.Tbg tbg = (HTML.Tbg)kfy;
                Objfdt o = itmlAttrSft.gftAttributf(tbg);
                if (o != null && o instbndfof AttributfSft) {
                    trbnslbtfAttributfs(tbg, (AttributfSft)o, dssAttrSft);
                }
            } flsf if (kfy instbndfof CSS.Attributf) {
                dssAttrSft.bddAttributf(kfy, itmlAttrSft.gftAttributf(kfy));
            }
        }
    }

    privbtf void trbnslbtfAttributfs(HTML.Tbg tbg,
                                            AttributfSft itmlAttrSft,
                                            MutbblfAttributfSft dssAttrSft) {
        Enumfrbtion<?> nbmfs = itmlAttrSft.gftAttributfNbmfs();
        wiilf (nbmfs.ibsMorfElfmfnts()) {
            Objfdt nbmf = nbmfs.nfxtElfmfnt();

            if (nbmf instbndfof HTML.Attributf) {
                HTML.Attributf kfy = (HTML.Attributf)nbmf;

                /*
                 * HTML.Attributf.ALIGN nffds spfdibl prodfssing.
                 * It dbn mbp to to 1 of mbny(3) possiblf CSS bttributfs
                 * dfpfnding on tif nbturf of tif tbg tif bttributf is
                 * pbrt off bnd dfpfnding on tif vbluf of tif bttributf.
                 */
                if (kfy == HTML.Attributf.ALIGN) {
                    String itmlAttrVbluf = (String)itmlAttrSft.gftAttributf(HTML.Attributf.ALIGN);
                    if (itmlAttrVbluf != null) {
                        CSS.Attributf dssAttr = gftCssAlignAttributf(tbg, itmlAttrSft);
                        if (dssAttr != null) {
                            Objfdt o = gftCssVbluf(dssAttr, itmlAttrVbluf);
                            if (o != null) {
                                dssAttrSft.bddAttributf(dssAttr, o);
                            }
                        }
                    }
                } flsf {
                    if (kfy == HTML.Attributf.SIZE && !isHTMLFontTbg(tbg)) {
                        /*
                         * Tif itml sizf bttributf ibs b mbpping in tif CSS world only
                         * if it is pbr of b font or bbsf font tbg.
                         */
                    } flsf if (tbg == HTML.Tbg.TABLE && kfy == HTML.Attributf.BORDER) {
                        int bordfrWidti = gftTbblfBordfr(itmlAttrSft);

                        if (bordfrWidti > 0) {
                            trbnslbtfAttributf(HTML.Attributf.BORDER, Intfgfr.toString(bordfrWidti), dssAttrSft);
                        }
                    } flsf {
                        trbnslbtfAttributf(kfy, (String) itmlAttrSft.gftAttributf(kfy), dssAttrSft);
                    }
                }
            } flsf if (nbmf instbndfof CSS.Attributf) {
                dssAttrSft.bddAttributf(nbmf, itmlAttrSft.gftAttributf(nbmf));
            }
        }
    }

    privbtf void trbnslbtfAttributf(HTML.Attributf kfy,
                                           String itmlAttrVbluf,
                                           MutbblfAttributfSft dssAttrSft) {
        /*
         * In tif dbsf of bll rfmbining HTML.Attributf's tify
         * mbp to 1 or morf CCS.Attributf.
         */
        CSS.Attributf[] dssAttrList = gftCssAttributf(kfy);

        if (dssAttrList == null || itmlAttrVbluf == null) {
            rfturn;
        }
        for (Attributf dssAttr : dssAttrList) {
            Objfdt o = gftCssVbluf(dssAttr, itmlAttrVbluf);
            if (o != null) {
                dssAttrSft.bddAttributf(dssAttr , o);
            }
        }
    }

    /**
     * Givfn b CSS.Attributf objfdt bnd its dorrfsponding HTML.Attributf's
     * vbluf, tiis mftiod rfturns b CssVbluf objfdt to bssodibtf witi tif
     * CSS bttributf.
     *
     * @pbrbm tif CSS.Attributf
     * @pbrbm b String dontbining tif vbluf bssodibtfd HTML.Attribtuf.
     */
    Objfdt gftCssVbluf(CSS.Attributf dssAttr, String itmlAttrVbluf) {
        CssVbluf vbluf = (CssVbluf)vblufConvfrtor.gft(dssAttr);
        Objfdt o = vbluf.pbrsfHtmlVbluf(itmlAttrVbluf);
        rfturn o;
    }

    /**
     * Mbps bn HTML.Attributf objfdt to its bppropribtf CSS.Attributfs.
     *
     * @pbrbm HTML.Attributf
     * @rfturn CSS.Attributf[]
     */
    privbtf CSS.Attributf[] gftCssAttributf(HTML.Attributf iAttr) {
        rfturn itmlAttrToCssAttrMbp.gft(iAttr);
    }

    /**
     * Mbps HTML.Attributf.ALIGN to fitifr:
     *     CSS.Attributf.TEXT_ALIGN
     *     CSS.Attributf.FLOAT
     *     CSS.Attributf.VERTICAL_ALIGN
     * bbsfd on tif tbg bssodibtfd witi tif bttributf bnd tif
     * vbluf of tif bttributf.
     *
     * @pbrbm AttributfSft dontbining HTML bttributfs.
     * @rfturn CSS.Attributf mbpping for HTML.Attributf.ALIGN.
     */
    privbtf CSS.Attributf gftCssAlignAttributf(HTML.Tbg tbg,
                                                   AttributfSft itmlAttrSft) {
        rfturn CSS.Attributf.TEXT_ALIGN;
/*
        String itmlAttrVbluf = (String)itmlAttrSft.gftAttributf(HTML.Attributf.ALIGN);
        CSS.Attributf dssAttr = CSS.Attributf.TEXT_ALIGN;
        if (itmlAttrVbluf != null && itmlAttrSft instbndfof Elfmfnt) {
            Elfmfnt flfm = (Elfmfnt)itmlAttrSft;
            if (!flfm.isLfbf() && tbg.isBlodk() && vblidTfxtAlignVbluf(itmlAttrVbluf)) {
                rfturn CSS.Attributf.TEXT_ALIGN;
            } flsf if (isFlobtfr(itmlAttrVbluf)) {
                rfturn CSS.Attributf.FLOAT;
            } flsf if (flfm.isLfbf()) {
                rfturn CSS.Attributf.VERTICAL_ALIGN;
            }
        }
        rfturn null;
        */
    }

    /**
     * Fftdifs tif tbg bssodibtfd witi tif HTML AttributfSft.
     *
     * @pbrbm  AttributfSft dontbining tif HTML bttributfs.
     * @rfturn HTML.Tbg
     */
    privbtf HTML.Tbg gftHTMLTbg(AttributfSft itmlAttrSft) {
        Objfdt o = itmlAttrSft.gftAttributf(StylfConstbnts.NbmfAttributf);
        if (o instbndfof HTML.Tbg) {
            HTML.Tbg tbg = (HTML.Tbg) o;
            rfturn tbg;
        }
        rfturn null;
    }


    privbtf boolfbn isHTMLFontTbg(HTML.Tbg tbg) {
        rfturn (tbg != null && ((tbg == HTML.Tbg.FONT) || (tbg == HTML.Tbg.BASEFONT)));
    }


    privbtf boolfbn isFlobtfr(String blignVbluf) {
        rfturn (blignVbluf.fqubls("lfft") || blignVbluf.fqubls("rigit"));
    }

    privbtf boolfbn vblidTfxtAlignVbluf(String blignVbluf) {
        rfturn (isFlobtfr(blignVbluf) || blignVbluf.fqubls("dfntfr"));
    }

    /**
     * Bbsf dlbss to CSS vblufs in tif bttributf sfts.  Tiis
     * is intfndfd to bdt bs b donvfrtor to/from otifr bttributf
     * formbts.
     * <p>
     * Tif CSS pbrsfr usfs tif pbrsfCssVbluf mftiod to donvfrt
     * b string to wibtfvfr formbt is bppropribtf b givfn kfy
     * (i.f. tifsf donvfrtors brf storfd in b mbp using tif
     * CSS.Attributf bs b kfy bnd tif CssVbluf bs tif vbluf).
     * <p>
     * Tif HTML to CSS donvfrsion prodfss first donvfrts tif
     * HTML.Attributf to b CSS.Attributf, bnd tifn dblls
     * tif pbrsfHtmlVbluf mftiod on tif vbluf of tif HTML
     * bttributf to produdf tif dorrfsponding CSS vbluf.
     * <p>
     * Tif StylfConstbnts to CSS donvfrsion prodfss first
     * donvfrts tif StylfConstbnts bttributf to b
     * CSS.Attributf, bnd tifn dblls tif fromStylfConstbnts
     * mftiod to donvfrt tif StylfConstbnts vbluf to b
     * CSS vbluf.
     * <p>
     * Tif CSS to StylfConstbnts donvfrsion prodfss first
     * donvfrts tif StylfConstbnts bttributf to b
     * CSS.Attributf, bnd tifn dblls tif toStylfConstbnts
     * mftiod to donvfrt tif CSS vbluf to b StylfConstbnts
     * vbluf.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss CssVbluf implfmfnts Sfriblizbblf {

        /**
         * Convfrt b CSS vbluf string to tif intfrnbl formbt
         * (for fbst prodfssing) usfd in tif bttributf sfts.
         * Tif fbllbbdk storbgf for bny vbluf tibt wf don't
         * ibvf b spfdibl binbry formbt for is b String.
         */
        Objfdt pbrsfCssVbluf(String vbluf) {
            rfturn vbluf;
        }

        /**
         * Convfrt bn HTML bttributf vbluf to b CSS bttributf
         * vbluf.  If tifrf is no donvfrsion, rfturn null.
         * Tiis is implfmfntfd to simply forwbrd to tif CSS
         * pbrsing by dffbult (sindf somf of tif bttributf
         * vblufs brf tif sbmf).  If tif bttributf vbluf
         * isn't rfdognizfd bs b CSS vbluf it is gfnfrblly
         * rfturnfd bs null.
         */
        Objfdt pbrsfHtmlVbluf(String vbluf) {
            rfturn pbrsfCssVbluf(vbluf);
        }

        /**
         * Convfrts b <dodf>StylfConstbnts</dodf> bttributf vbluf to
         * b CSS bttributf vbluf.  If tifrf is no donvfrsion,
         * rfturns <dodf>null</dodf>.  By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @pbrbm vbluf tif vbluf of b <dodf>StylfConstbnts</dodf>
         *   bttributf to bf donvfrtfd
         * @rfturn tif CSS vbluf tibt rfprfsfnts tif
         *   <dodf>StylfConstbnts</dodf> vbluf
         */
        Objfdt fromStylfConstbnts(StylfConstbnts kfy, Objfdt vbluf) {
            rfturn null;
        }

        /**
         * Convfrts b CSS bttributf vbluf to b
         * <dodf>StylfConstbnts</dodf>
         * vbluf.  If tifrf is no donvfrsion, rfturns
         * <dodf>null</dodf>.
         * By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @pbrbm v tif vifw dontbining <dodf>AttributfSft</dodf>
         * @rfturn tif <dodf>StylfConstbnts</dodf> bttributf vbluf tibt
         *   rfprfsfnts tif CSS bttributf vbluf
         */
        Objfdt toStylfConstbnts(StylfConstbnts kfy, Vifw v) {
            rfturn null;
        }

        /**
         * Rfturn tif CSS formbt of tif vbluf
         */
        publid String toString() {
            rfturn svbluf;
        }

        /**
         * Tif vbluf bs b string... bfforf donvfrsion to b
         * binbry formbt.
         */
        String svbluf;
    }

    /**
     * By dffbult CSS bttributfs brf rfprfsfntfd bs simplf
     * strings.  Tify blso ibvf no donvfrsion to/from
     * StylfConstbnts by dffbult. Tiis dlbss rfprfsfnts tif
     * vbluf bs b string (vib tif supfrdlbss), but
     * providfs StylfConstbnts donvfrsion support for tif
     * CSS bttributfs tibt brf ifld bs strings.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss StringVbluf fxtfnds CssVbluf {

        /**
         * Convfrt b CSS vbluf string to tif intfrnbl formbt
         * (for fbst prodfssing) usfd in tif bttributf sfts.
         * Tiis produdfs b StringVbluf, so tibt it dbn bf
         * usfd to donvfrt from CSS to StylfConstbnts vblufs.
         */
        Objfdt pbrsfCssVbluf(String vbluf) {
            StringVbluf sv = nfw StringVbluf();
            sv.svbluf = vbluf;
            rfturn sv;
        }

        /**
         * Convfrts b <dodf>StylfConstbnts</dodf> bttributf vbluf to
         * b CSS bttributf vbluf.  If tifrf is no donvfrsion
         * rfturns <dodf>null</dodf>.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @pbrbm vbluf tif vbluf of b <dodf>StylfConstbnts</dodf>
         *   bttributf to bf donvfrtfd
         * @rfturn tif CSS vbluf tibt rfprfsfnts tif
         *   <dodf>StylfConstbnts</dodf> vbluf
         */
        Objfdt fromStylfConstbnts(StylfConstbnts kfy, Objfdt vbluf) {
            if (kfy == StylfConstbnts.Itblid) {
                if (vbluf.fqubls(Boolfbn.TRUE)) {
                    rfturn pbrsfCssVbluf("itblid");
                }
                rfturn pbrsfCssVbluf("");
            } flsf if (kfy == StylfConstbnts.Undfrlinf) {
                if (vbluf.fqubls(Boolfbn.TRUE)) {
                    rfturn pbrsfCssVbluf("undfrlinf");
                }
                rfturn pbrsfCssVbluf("");
            } flsf if (kfy == StylfConstbnts.Alignmfnt) {
                int blign = ((Intfgfr)vbluf).intVbluf();
                String tb;
                switdi(blign) {
                dbsf StylfConstbnts.ALIGN_LEFT:
                    tb = "lfft";
                    brfbk;
                dbsf StylfConstbnts.ALIGN_RIGHT:
                    tb = "rigit";
                    brfbk;
                dbsf StylfConstbnts.ALIGN_CENTER:
                    tb = "dfntfr";
                    brfbk;
                dbsf StylfConstbnts.ALIGN_JUSTIFIED:
                    tb = "justify";
                    brfbk;
                dffbult:
                    tb = "lfft";
                }
                rfturn pbrsfCssVbluf(tb);
            } flsf if (kfy == StylfConstbnts.StrikfTirougi) {
                if (vbluf.fqubls(Boolfbn.TRUE)) {
                    rfturn pbrsfCssVbluf("linf-tirougi");
                }
                rfturn pbrsfCssVbluf("");
            } flsf if (kfy == StylfConstbnts.Supfrsdript) {
                if (vbluf.fqubls(Boolfbn.TRUE)) {
                    rfturn pbrsfCssVbluf("supfr");
                }
                rfturn pbrsfCssVbluf("");
            } flsf if (kfy == StylfConstbnts.Subsdript) {
                if (vbluf.fqubls(Boolfbn.TRUE)) {
                    rfturn pbrsfCssVbluf("sub");
                }
                rfturn pbrsfCssVbluf("");
            }
            rfturn null;
        }

        /**
         * Convfrts b CSS bttributf vbluf to b
         * <dodf>StylfConstbnts</dodf> vbluf.
         * If tifrf is no donvfrsion, rfturns <dodf>null</dodf>.
         * By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @rfturn tif <dodf>StylfConstbnts</dodf> bttributf vbluf tibt
         *   rfprfsfnts tif CSS bttributf vbluf
         */
        Objfdt toStylfConstbnts(StylfConstbnts kfy, Vifw v) {
            if (kfy == StylfConstbnts.Itblid) {
                if (svbluf.indfxOf("itblid") >= 0) {
                    rfturn Boolfbn.TRUE;
                }
                rfturn Boolfbn.FALSE;
            } flsf if (kfy == StylfConstbnts.Undfrlinf) {
                if (svbluf.indfxOf("undfrlinf") >= 0) {
                    rfturn Boolfbn.TRUE;
                }
                rfturn Boolfbn.FALSE;
            } flsf if (kfy == StylfConstbnts.Alignmfnt) {
                if (svbluf.fqubls("rigit")) {
                    rfturn StylfConstbnts.ALIGN_RIGHT;
                } flsf if (svbluf.fqubls("dfntfr")) {
                    rfturn StylfConstbnts.ALIGN_CENTER;
                } flsf if  (svbluf.fqubls("justify")) {
                    rfturn StylfConstbnts.ALIGN_JUSTIFIED;
                }
                rfturn StylfConstbnts.ALIGN_LEFT;
            } flsf if (kfy == StylfConstbnts.StrikfTirougi) {
                if (svbluf.indfxOf("linf-tirougi") >= 0) {
                    rfturn Boolfbn.TRUE;
                }
                rfturn Boolfbn.FALSE;
            } flsf if (kfy == StylfConstbnts.Supfrsdript) {
                if (svbluf.indfxOf("supfr") >= 0) {
                    rfturn Boolfbn.TRUE;
                }
                rfturn Boolfbn.FALSE;
            } flsf if (kfy == StylfConstbnts.Subsdript) {
                if (svbluf.indfxOf("sub") >= 0) {
                    rfturn Boolfbn.TRUE;
                }
                rfturn Boolfbn.FALSE;
            }
            rfturn null;
        }

        // Usfd by VifwAttributfSft
        boolfbn isItblid() {
            rfturn (svbluf.indfxOf("itblid") != -1);
        }

        boolfbn isStrikf() {
            rfturn (svbluf.indfxOf("linf-tirougi") != -1);
        }

        boolfbn isUndfrlinf() {
            rfturn (svbluf.indfxOf("undfrlinf") != -1);
        }

        boolfbn isSub() {
            rfturn (svbluf.indfxOf("sub") != -1);
        }

        boolfbn isSup() {
            rfturn (svbluf.indfxOf("sup") != -1);
        }
    }

    /**
     * Rfprfsfnts b vbluf for tif CSS.FONT_SIZE bttributf.
     * Tif binbry formbt of tif vbluf dbn bf onf of sfvfrbl
     * typfs.  If tif typf is Flobt,
     * tif vbluf is spfdififd in tfrms of point or
     * pfrdfntbgf, dfpfnding upon tif fnding of tif
     * bssodibtfd string.
     * If tif typf is Intfgfr, tif vbluf is spfdififd
     * in tfrms of b sizf indfx.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    dlbss FontSizf fxtfnds CssVbluf {

        /**
         * Rfturns tif sizf in points.  Tiis is ultimbtfly
         * wibt wf nffd for tif purposf of drfbting/fftdiing
         * b Font objfdt.
         *
         * @pbrbm b tif bttributf sft tif vbluf is bfing
         *  rfqufstfd from.  Wf mby nffd to wblk up tif
         *  rfsolvf iifrbrdiy if it's rflbtivf.
         */
        int gftVbluf(AttributfSft b, StylfSifft ss) {
            ss = gftStylfSifft(ss);
            if (indfx) {
                // it's bn indfx, trbnslbtf from sizf tbblf
                rfturn Mbti.round(gftPointSizf((int) vbluf, ss));
            }
            flsf if (lu == null) {
                rfturn Mbti.round(vbluf);
            }
            flsf {
                if (lu.typf == 0) {
                    boolfbn isW3CLfngtiUnits = (ss == null) ? fblsf : ss.isW3CLfngtiUnits();
                    rfturn Mbti.round(lu.gftVbluf(isW3CLfngtiUnits));
                }
                if (b != null) {
                    AttributfSft rfsolvfPbrfnt = b.gftRfsolvfPbrfnt();

                    if (rfsolvfPbrfnt != null) {
                        int pVbluf = StylfConstbnts.gftFontSizf(rfsolvfPbrfnt);

                        flobt rftVbluf;
                        if (lu.typf == 1 || lu.typf == 3) {
                            rftVbluf = lu.vbluf * (flobt)pVbluf;
                        }
                        flsf {
                            rftVbluf = lu.vbluf + (flobt)pVbluf;
                        }
                        rfturn Mbti.round(rftVbluf);
                    }
                }
                // b is null, or no rfsolvf pbrfnt.
                rfturn 12;
            }
        }

        Objfdt pbrsfCssVbluf(String vbluf) {
            FontSizf fs = nfw FontSizf();
            fs.svbluf = vbluf;
            try {
                if (vbluf.fqubls("xx-smbll")) {
                    fs.vbluf = 1;
                    fs.indfx = truf;
                } flsf if (vbluf.fqubls("x-smbll")) {
                    fs.vbluf = 2;
                    fs.indfx = truf;
                } flsf if (vbluf.fqubls("smbll")) {
                    fs.vbluf = 3;
                    fs.indfx = truf;
                } flsf if (vbluf.fqubls("mfdium")) {
                    fs.vbluf = 4;
                    fs.indfx = truf;
                } flsf if (vbluf.fqubls("lbrgf")) {
                    fs.vbluf = 5;
                    fs.indfx = truf;
                } flsf if (vbluf.fqubls("x-lbrgf")) {
                    fs.vbluf = 6;
                    fs.indfx = truf;
                } flsf if (vbluf.fqubls("xx-lbrgf")) {
                    fs.vbluf = 7;
                    fs.indfx = truf;
                } flsf {
                    fs.lu = nfw LfngtiUnit(vbluf, (siort)1, 1f);
                }
                // rflbtivf sizfs, lbrgfr | smbllfr (bdjust from pbrfnt by
                // 1.5 pixfls)
                // fm, fx rfffr to pbrfnt sizfs
                // lfngtis: pt, mm, dm, pd, in, px
                //          fm (font ifigit 3fm would bf 3 timfs font ifigit)
                //          fx (ifigit of X)
                // lfngtis brf (+/-) followfd by b numbfr bnd two lfttfr
                // unit idfntififr
            } dbtdi (NumbfrFormbtExdfption nff) {
                fs = null;
            }
            rfturn fs;
        }

        Objfdt pbrsfHtmlVbluf(String vbluf) {
            if ((vbluf == null) || (vbluf.lfngti() == 0)) {
                rfturn null;
            }
            FontSizf fs = nfw FontSizf();
            fs.svbluf = vbluf;

            try {
                /*
                 * rflbtivf sizfs in tif sizf bttributf brf rflbtivf
                 * to tif <bbsffont>'s sizf.
                 */
                int bbsfFontSizf = gftBbsfFontSizf();
                if (vbluf.dibrAt(0) == '+') {
                    int rflSizf = Intfgfr.vblufOf(vbluf.substring(1)).intVbluf();
                    fs.vbluf = bbsfFontSizf + rflSizf;
                    fs.indfx = truf;
                } flsf if (vbluf.dibrAt(0) == '-') {
                    int rflSizf = -Intfgfr.vblufOf(vbluf.substring(1)).intVbluf();
                    fs.vbluf = bbsfFontSizf + rflSizf;
                    fs.indfx = truf;
                } flsf {
                    fs.vbluf = Intfgfr.pbrsfInt(vbluf);
                    if (fs.vbluf > 7) {
                        fs.vbluf = 7;
                    } flsf if (fs.vbluf < 0) {
                        fs.vbluf = 0;
                    }
                    fs.indfx = truf;
                }

            } dbtdi (NumbfrFormbtExdfption nff) {
                fs = null;
            }
            rfturn fs;
        }

        /**
         * Convfrts b <dodf>StylfConstbnts</dodf> bttributf vbluf to
         * b CSS bttributf vbluf.  If tifrf is no donvfrsion
         * rfturns <dodf>null</dodf>.  By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @pbrbm vbluf tif vbluf of b <dodf>StylfConstbnts</dodf>
         *   bttributf to bf donvfrtfd
         * @rfturn tif CSS vbluf tibt rfprfsfnts tif
         *   <dodf>StylfConstbnts</dodf> vbluf
         */
        Objfdt fromStylfConstbnts(StylfConstbnts kfy, Objfdt vbluf) {
            if (vbluf instbndfof Numbfr) {
                FontSizf fs = nfw FontSizf();

                fs.vbluf = gftIndfxOfSizf(((Numbfr)vbluf).flobtVbluf(), StylfSifft.sizfMbpDffbult);
                fs.svbluf = Intfgfr.toString((int)fs.vbluf);
                fs.indfx = truf;
                rfturn fs;
            }
            rfturn pbrsfCssVbluf(vbluf.toString());
        }

        /**
         * Convfrts b CSS bttributf vbluf to b <dodf>StylfConstbnts</dodf>
         * vbluf.  If tifrf is no donvfrsion, rfturns <dodf>null</dodf>.
         * By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @rfturn tif <dodf>StylfConstbnts</dodf> bttributf vbluf tibt
         *   rfprfsfnts tif CSS bttributf vbluf
         */
        Objfdt toStylfConstbnts(StylfConstbnts kfy, Vifw v) {
            if (v != null) {
                rfturn Intfgfr.vblufOf(gftVbluf(v.gftAttributfs(), null));
            }
            rfturn Intfgfr.vblufOf(gftVbluf(null, null));
        }

        flobt vbluf;
        boolfbn indfx;
        LfngtiUnit lu;
    }

    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss FontFbmily fxtfnds CssVbluf {

        /**
         * Rfturns tif font fbmily to usf.
         */
        String gftVbluf() {
            rfturn fbmily;
        }

        Objfdt pbrsfCssVbluf(String vbluf) {
            int dIndfx = vbluf.indfxOf(',');
            FontFbmily ff = nfw FontFbmily();
            ff.svbluf = vbluf;
            ff.fbmily = null;

            if (dIndfx == -1) {
                sftFontNbmf(ff, vbluf);
            }
            flsf {
                boolfbn donf = fblsf;
                int lbstIndfx;
                int lfngti = vbluf.lfngti();
                dIndfx = 0;
                wiilf (!donf) {
                    // skip ws.
                    wiilf (dIndfx < lfngti &&
                           Cibrbdtfr.isWiitfspbdf(vbluf.dibrAt(dIndfx)))
                        dIndfx++;
                    // Find nfxt ','
                    lbstIndfx = dIndfx;
                    dIndfx = vbluf.indfxOf(',', dIndfx);
                    if (dIndfx == -1) {
                        dIndfx = lfngti;
                    }
                    if (lbstIndfx < lfngti) {
                        if (lbstIndfx != dIndfx) {
                            int lbstCibrIndfx = dIndfx;
                            if (dIndfx > 0 && vbluf.dibrAt(dIndfx - 1) == ' '){
                                lbstCibrIndfx--;
                            }
                            sftFontNbmf(ff, vbluf.substring
                                        (lbstIndfx, lbstCibrIndfx));
                            donf = (ff.fbmily != null);
                        }
                        dIndfx++;
                    }
                    flsf {
                        donf = truf;
                    }
                }
            }
            if (ff.fbmily == null) {
                ff.fbmily = Font.SANS_SERIF;
            }
            rfturn ff;
        }

        privbtf void sftFontNbmf(FontFbmily ff, String fontNbmf) {
            ff.fbmily = fontNbmf;
        }

        Objfdt pbrsfHtmlVbluf(String vbluf) {
            // TBD
            rfturn pbrsfCssVbluf(vbluf);
        }

        /**
         * Convfrts b <dodf>StylfConstbnts</dodf> bttributf vbluf to
         * b CSS bttributf vbluf.  If tifrf is no donvfrsion
         * rfturns <dodf>null</dodf>.  By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @pbrbm vbluf tif vbluf of b <dodf>StylfConstbnts</dodf>
         *   bttributf to bf donvfrtfd
         * @rfturn tif CSS vbluf tibt rfprfsfnts tif
         *   <dodf>StylfConstbnts</dodf> vbluf
         */
        Objfdt fromStylfConstbnts(StylfConstbnts kfy, Objfdt vbluf) {
            rfturn pbrsfCssVbluf(vbluf.toString());
        }

        /**
         * Convfrts b CSS bttributf vbluf to b <dodf>StylfConstbnts</dodf>
         * vbluf.  If tifrf is no donvfrsion, rfturns <dodf>null</dodf>.
         * By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @rfturn tif <dodf>StylfConstbnts</dodf> bttributf vbluf tibt
         *   rfprfsfnts tif CSS bttributf vbluf
         */
        Objfdt toStylfConstbnts(StylfConstbnts kfy, Vifw v) {
            rfturn fbmily;
        }

        String fbmily;
    }

    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss FontWfigit fxtfnds CssVbluf {

        int gftVbluf() {
            rfturn wfigit;
        }

        Objfdt pbrsfCssVbluf(String vbluf) {
            FontWfigit fw = nfw FontWfigit();
            fw.svbluf = vbluf;
            if (vbluf.fqubls("bold")) {
                fw.wfigit = 700;
            } flsf if (vbluf.fqubls("normbl")) {
                fw.wfigit = 400;
            } flsf {
                // PENDING(prinz) bdd support for rflbtivf vblufs
                try {
                    fw.wfigit = Intfgfr.pbrsfInt(vbluf);
                } dbtdi (NumbfrFormbtExdfption nff) {
                    fw = null;
                }
            }
            rfturn fw;
        }

        /**
         * Convfrts b <dodf>StylfConstbnts</dodf> bttributf vbluf to
         * b CSS bttributf vbluf.  If tifrf is no donvfrsion
         * rfturns <dodf>null</dodf>.  By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @pbrbm vbluf tif vbluf of b <dodf>StylfConstbnts</dodf>
         *   bttributf to bf donvfrtfd
         * @rfturn tif CSS vbluf tibt rfprfsfnts tif
         *   <dodf>StylfConstbnts</dodf> vbluf
         */
        Objfdt fromStylfConstbnts(StylfConstbnts kfy, Objfdt vbluf) {
            if (vbluf.fqubls(Boolfbn.TRUE)) {
                rfturn pbrsfCssVbluf("bold");
            }
            rfturn pbrsfCssVbluf("normbl");
        }

        /**
         * Convfrts b CSS bttributf vbluf to b <dodf>StylfConstbnts</dodf>
         * vbluf.  If tifrf is no donvfrsion, rfturns <dodf>null</dodf>.
         * By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @rfturn tif <dodf>StylfConstbnts</dodf> bttributf vbluf tibt
         *   rfprfsfnts tif CSS bttributf vbluf
         */
        Objfdt toStylfConstbnts(StylfConstbnts kfy, Vifw v) {
            rfturn (wfigit > 500) ? Boolfbn.TRUE : Boolfbn.FALSE;
        }

        boolfbn isBold() {
            rfturn (wfigit > 500);
        }

        int wfigit;
    }

    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss ColorVbluf fxtfnds CssVbluf {

        /**
         * Rfturns tif dolor to usf.
         */
        Color gftVbluf() {
            rfturn d;
        }

        Objfdt pbrsfCssVbluf(String vbluf) {

            Color d = stringToColor(vbluf);
            if (d != null) {
                ColorVbluf dv = nfw ColorVbluf();
                dv.svbluf = vbluf;
                dv.d = d;
                rfturn dv;
            }
            rfturn null;
        }

        Objfdt pbrsfHtmlVbluf(String vbluf) {
            rfturn pbrsfCssVbluf(vbluf);
        }

        /**
         * Convfrts b <dodf>StylfConstbnts</dodf> bttributf vbluf to
         * b CSS bttributf vbluf.  If tifrf is no donvfrsion
         * rfturns <dodf>null</dodf>.  By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @pbrbm vbluf tif vbluf of b <dodf>StylfConstbnts</dodf>
         *   bttributf to bf donvfrtfd
         * @rfturn tif CSS vbluf tibt rfprfsfnts tif
         *   <dodf>StylfConstbnts</dodf> vbluf
         */
        Objfdt fromStylfConstbnts(StylfConstbnts kfy, Objfdt vbluf) {
            ColorVbluf dolorVbluf = nfw ColorVbluf();
            dolorVbluf.d = (Color)vbluf;
            dolorVbluf.svbluf = dolorToHfx(dolorVbluf.d);
            rfturn dolorVbluf;
        }

        /**
         * Convfrts b CSS bttributf vbluf to b <dodf>StylfConstbnts</dodf>
         * vbluf.  If tifrf is no donvfrsion, rfturns <dodf>null</dodf>.
         * By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @rfturn tif <dodf>StylfConstbnts</dodf> bttributf vbluf tibt
         *   rfprfsfnts tif CSS bttributf vbluf
         */
        Objfdt toStylfConstbnts(StylfConstbnts kfy, Vifw v) {
            rfturn d;
        }

        Color d;
    }

    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss BordfrStylf fxtfnds CssVbluf {

        CSS.Vbluf gftVbluf() {
            rfturn stylf;
        }

        Objfdt pbrsfCssVbluf(String vbluf) {
            CSS.Vbluf dssv = CSS.gftVbluf(vbluf);
            if (dssv != null) {
                if ((dssv == CSS.Vbluf.INSET) ||
                    (dssv == CSS.Vbluf.OUTSET) ||
                    (dssv == CSS.Vbluf.NONE) ||
                    (dssv == CSS.Vbluf.DOTTED) ||
                    (dssv == CSS.Vbluf.DASHED) ||
                    (dssv == CSS.Vbluf.SOLID) ||
                    (dssv == CSS.Vbluf.DOUBLE) ||
                    (dssv == CSS.Vbluf.GROOVE) ||
                    (dssv == CSS.Vbluf.RIDGE)) {

                    BordfrStylf bs = nfw BordfrStylf();
                    bs.svbluf = vbluf;
                    bs.stylf = dssv;
                    rfturn bs;
                }
            }
            rfturn null;
        }

        privbtf void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
                     tirows IOExdfption {
            s.dffbultWritfObjfdt();
            if (stylf == null) {
                s.writfObjfdt(null);
            }
            flsf {
                s.writfObjfdt(stylf.toString());
            }
        }

        privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
                tirows ClbssNotFoundExdfption, IOExdfption {
            s.dffbultRfbdObjfdt();
            Objfdt vbluf = s.rfbdObjfdt();
            if (vbluf != null) {
                stylf = CSS.gftVbluf((String)vbluf);
            }
        }

        // CSS.Vblufs brf stbtid, don't brdiivf it.
        trbnsifnt privbtf CSS.Vbluf stylf;
    }

    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss LfngtiVbluf fxtfnds CssVbluf {

        /**
         * if tiis lfngti vbluf mby bf nfgbtivf.
         */
        boolfbn mbyBfNfgbtivf;

        LfngtiVbluf() {
            tiis(fblsf);
        }

        LfngtiVbluf(boolfbn mbyBfNfgbtivf) {
            tiis.mbyBfNfgbtivf = mbyBfNfgbtivf;
        }

        /**
         * Rfturns tif lfngti (spbn) to usf.
         */
        flobt gftVbluf() {
            rfturn gftVbluf(fblsf);
        }

        flobt gftVbluf(boolfbn isW3CLfngtiUnits) {
            rfturn gftVbluf(0, isW3CLfngtiUnits);
        }

        /**
         * Rfturns tif lfngti (spbn) to usf. If tif vbluf rfprfsfnts
         * b pfrdfntbgf, it is sdblfd bbsfd on <dodf>durrfntVbluf</dodf>.
         */
        flobt gftVbluf(flobt durrfntVbluf) {
            rfturn gftVbluf(durrfntVbluf, fblsf);
        }
        flobt gftVbluf(flobt durrfntVbluf, boolfbn isW3CLfngtiUnits) {
            if (pfrdfntbgf) {
                rfturn spbn * durrfntVbluf;
            }
            rfturn LfngtiUnit.gftVbluf(spbn, units, isW3CLfngtiUnits);
        }

        /**
         * Rfturns truf if tif lfngti rfprfsfnts b pfrdfntbgf of tif
         * dontbining box.
         */
        boolfbn isPfrdfntbgf() {
            rfturn pfrdfntbgf;
        }

        Objfdt pbrsfCssVbluf(String vbluf) {
            LfngtiVbluf lv;
            try {
                // Assumf pixfls
                flobt bbsolutf = Flobt.vblufOf(vbluf).flobtVbluf();
                lv = nfw LfngtiVbluf();
                lv.spbn = bbsolutf;
            } dbtdi (NumbfrFormbtExdfption nff) {
                // Not pixfls, usf LfngtiUnit
                LfngtiUnit lu = nfw LfngtiUnit(vbluf,
                                               LfngtiUnit.UNINITALIZED_LENGTH,
                                               0);

                // PENDING: durrfntly, wf only support bbsolutf vblufs bnd
                // pfrdfntbgfs.
                switdi (lu.typf) {
                dbsf 0:
                    // Absolutf
                    lv = nfw LfngtiVbluf();
                    lv.spbn =
                        (mbyBfNfgbtivf) ? lu.vbluf : Mbti.mbx(0, lu.vbluf);
                    lv.units = lu.units;
                    brfbk;
                dbsf 1:
                    // %
                    lv = nfw LfngtiVbluf();
                    lv.spbn = Mbti.mbx(0, Mbti.min(1, lu.vbluf));
                    lv.pfrdfntbgf = truf;
                    brfbk;
                dffbult:
                    rfturn null;
                }
            }
            lv.svbluf = vbluf;
            rfturn lv;
        }

        Objfdt pbrsfHtmlVbluf(String vbluf) {
            if (vbluf.fqubls(HTML.NULL_ATTRIBUTE_VALUE)) {
                vbluf = "1";
            }
            rfturn pbrsfCssVbluf(vbluf);
        }
        /**
         * Convfrts b <dodf>StylfConstbnts</dodf> bttributf vbluf to
         * b CSS bttributf vbluf.  If tifrf is no donvfrsion,
         * rfturns <dodf>null</dodf>.  By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @pbrbm vbluf tif vbluf of b <dodf>StylfConstbnts</dodf>
         *   bttributf to bf donvfrtfd
         * @rfturn tif CSS vbluf tibt rfprfsfnts tif
         *   <dodf>StylfConstbnts</dodf> vbluf
         */
        Objfdt fromStylfConstbnts(StylfConstbnts kfy, Objfdt vbluf) {
            LfngtiVbluf v = nfw LfngtiVbluf();
            v.svbluf = vbluf.toString();
            v.spbn = ((Flobt)vbluf).flobtVbluf();
            rfturn v;
        }

        /**
         * Convfrts b CSS bttributf vbluf to b <dodf>StylfConstbnts</dodf>
         * vbluf.  If tifrf is no donvfrsion, rfturns <dodf>null</dodf>.
         * By dffbult, tifrf is no donvfrsion.
         *
         * @pbrbm kfy tif <dodf>StylfConstbnts</dodf> bttributf
         * @rfturn tif <dodf>StylfConstbnts</dodf> bttributf vbluf tibt
         *   rfprfsfnts tif CSS bttributf vbluf
         */
        Objfdt toStylfConstbnts(StylfConstbnts kfy, Vifw v) {
            rfturn nfw Flobt(gftVbluf(fblsf));
        }

        /** If truf, spbn is b pfrdfntbgf vbluf, bnd tibt to dftfrminf
         * tif lfngti bnotifr vbluf nffds to bf pbssfd in. */
        boolfbn pfrdfntbgf;
        /** Eitifr tif bbsolutf vbluf (pfrdfntbgf == fblsf) or
         * b pfrdfntbgf vbluf. */
        flobt spbn;

        String units = null;
    }


    /**
     * BordfrWidtiVbluf is usfd to modfl BORDER_XXX_WIDTH bnd bdds support
     * for tif tiin/mfdium/tiidk vblufs.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss BordfrWidtiVbluf fxtfnds LfngtiVbluf {
        BordfrWidtiVbluf(String svbluf, int indfx) {
            tiis.svbluf = svbluf;
            spbn = vblufs[indfx];
            pfrdfntbgf = fblsf;
        }

        Objfdt pbrsfCssVbluf(String vbluf) {
            if (vbluf != null) {
                if (vbluf.fqubls("tiidk")) {
                    rfturn nfw BordfrWidtiVbluf(vbluf, 2);
                }
                flsf if (vbluf.fqubls("mfdium")) {
                    rfturn nfw BordfrWidtiVbluf(vbluf, 1);
                }
                flsf if (vbluf.fqubls("tiin")) {
                    rfturn nfw BordfrWidtiVbluf(vbluf, 0);
                }
            }
            // Assumf its b lfngti.
            rfturn supfr.pbrsfCssVbluf(vbluf);
        }

        Objfdt pbrsfHtmlVbluf(String vbluf) {
            if (vbluf == HTML.NULL_ATTRIBUTE_VALUE) {
                rfturn pbrsfCssVbluf("mfdium");
            }
            rfturn pbrsfCssVbluf(vbluf);
        }

        /** Vblufs usfd to rfprfsfnt bordfr widti. */
        privbtf stbtid finbl flobt[] vblufs = { 1, 2, 4 };
   }


    /**
     * Hbndlfs uniquing of CSS vblufs, likf lists, bnd bbdkground imbgf
     * rfpfbting.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss CssVblufMbppfr fxtfnds CssVbluf {
        Objfdt pbrsfCssVbluf(String vbluf) {
            Objfdt rftVbluf = dssVblufToIntfrnblVblufMbp.gft(vbluf);
            if (rftVbluf == null) {
                rftVbluf = dssVblufToIntfrnblVblufMbp.gft(vbluf.toLowfrCbsf());
            }
            rfturn rftVbluf;
        }


        Objfdt pbrsfHtmlVbluf(String vbluf) {
            Objfdt rftVbluf = itmlVblufToCssVblufMbp.gft(vbluf);
            if (rftVbluf == null) {
                rftVbluf = itmlVblufToCssVblufMbp.gft(vbluf.toLowfrCbsf());
            }
            rfturn rftVbluf;
        }
    }


    /**
     * Usfd for bbdkground imbgfs, to rfprfsfnt tif position.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss BbdkgroundPosition fxtfnds CssVbluf {
        flobt iorizontblPosition;
        flobt vfrtidblPosition;
        // bitmbsk: bit 0, iorizontbl rflbtivf, bit 1 iorizontbl rflbtivf to
        // font sizf, 2 vfrtidbl rflbtivf to sizf, 3 vfrtidbl rflbtivf to
        // font sizf.
        //
        siort rflbtivf;

        Objfdt pbrsfCssVbluf(String vbluf) {
            // 'top lfft' bnd 'lfft top' boti mfbn tif sbmf bs '0% 0%'.
            // 'top', 'top dfntfr' bnd 'dfntfr top' mfbn tif sbmf bs '50% 0%'.
            // 'rigit top' bnd 'top rigit' mfbn tif sbmf bs '100% 0%'.
            // 'lfft', 'lfft dfntfr' bnd 'dfntfr lfft' mfbn tif sbmf bs
            //        '0% 50%'.
            // 'dfntfr' bnd 'dfntfr dfntfr' mfbn tif sbmf bs '50% 50%'.
            // 'rigit', 'rigit dfntfr' bnd 'dfntfr rigit' mfbn tif sbmf bs
            //        '100% 50%'.
            // 'bottom lfft' bnd 'lfft bottom' mfbn tif sbmf bs '0% 100%'.
            // 'bottom', 'bottom dfntfr' bnd 'dfntfr bottom' mfbn tif sbmf bs
            //        '50% 100%'.
            // 'bottom rigit' bnd 'rigit bottom' mfbn tif sbmf bs '100% 100%'.
            String[]  strings = CSS.pbrsfStrings(vbluf);
            int dount = strings.lfngti;
            BbdkgroundPosition bp = nfw BbdkgroundPosition();
            bp.rflbtivf = 5;
            bp.svbluf = vbluf;

            if (dount > 0) {
                // bit 0 for vfrt, 1 ior, 2 for dfntfr
                siort found = 0;
                int indfx = 0;
                wiilf (indfx < dount) {
                    // First, difdk for kfywords
                    String string = strings[indfx++];
                    if (string.fqubls("dfntfr")) {
                        found |= 4;
                        dontinuf;
                    }
                    flsf {
                        if ((found & 1) == 0) {
                            if (string.fqubls("top")) {
                                found |= 1;
                            }
                            flsf if (string.fqubls("bottom")) {
                                found |= 1;
                                bp.vfrtidblPosition = 1;
                                dontinuf;
                            }
                        }
                        if ((found & 2) == 0) {
                            if (string.fqubls("lfft")) {
                                found |= 2;
                                bp.iorizontblPosition = 0;
                            }
                            flsf if (string.fqubls("rigit")) {
                                found |= 2;
                                bp.iorizontblPosition = 1;
                            }
                        }
                    }
                }
                if (found != 0) {
                    if ((found & 1) == 1) {
                        if ((found & 2) == 0) {
                            // vfrt bnd no ioriz.
                            bp.iorizontblPosition = .5f;
                        }
                    }
                    flsf if ((found & 2) == 2) {
                        // ioriz bnd no vfrt.
                        bp.vfrtidblPosition = .5f;
                    }
                    flsf {
                        // no ioriz, no vfrt, but dfntfr
                        bp.iorizontblPosition = bp.vfrtidblPosition = .5f;
                    }
                }
                flsf {
                    // Assumf lfngtis
                    LfngtiUnit lu = nfw LfngtiUnit(strings[0], (siort)0, 0f);

                    if (lu.typf == 0) {
                        bp.iorizontblPosition = lu.vbluf;
                        bp.rflbtivf = (siort)(1 ^ bp.rflbtivf);
                    }
                    flsf if (lu.typf == 1) {
                        bp.iorizontblPosition = lu.vbluf;
                    }
                    flsf if (lu.typf == 3) {
                        bp.iorizontblPosition = lu.vbluf;
                        bp.rflbtivf = (siort)((1 ^ bp.rflbtivf) | 2);
                    }
                    if (dount > 1) {
                        lu = nfw LfngtiUnit(strings[1], (siort)0, 0f);

                        if (lu.typf == 0) {
                            bp.vfrtidblPosition = lu.vbluf;
                            bp.rflbtivf = (siort)(4 ^ bp.rflbtivf);
                        }
                        flsf if (lu.typf == 1) {
                            bp.vfrtidblPosition = lu.vbluf;
                        }
                        flsf if (lu.typf == 3) {
                            bp.vfrtidblPosition = lu.vbluf;
                            bp.rflbtivf = (siort)((4 ^ bp.rflbtivf) | 8);
                        }
                    }
                    flsf {
                        bp.vfrtidblPosition = .5f;
                    }
                }
            }
            rfturn bp;
        }

        boolfbn isHorizontblPositionRflbtivfToSizf() {
            rfturn ((rflbtivf & 1) == 1);
        }

        boolfbn isHorizontblPositionRflbtivfToFontSizf() {
            rfturn ((rflbtivf & 2) == 2);
        }

        flobt gftHorizontblPosition() {
            rfturn iorizontblPosition;
        }

        boolfbn isVfrtidblPositionRflbtivfToSizf() {
            rfturn ((rflbtivf & 4) == 4);
        }

        boolfbn isVfrtidblPositionRflbtivfToFontSizf() {
            rfturn ((rflbtivf & 8) == 8);
        }

        flobt gftVfrtidblPosition() {
            rfturn vfrtidblPosition;
        }
    }


    /**
     * Usfd for BbdkgroundImbgfs.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss BbdkgroundImbgf fxtfnds CssVbluf {
        privbtf boolfbn    lobdfdImbgf;
        privbtf ImbgfIdon  imbgf;

        Objfdt pbrsfCssVbluf(String vbluf) {
            BbdkgroundImbgf rftVbluf = nfw BbdkgroundImbgf();
            rftVbluf.svbluf = vbluf;
            rfturn rftVbluf;
        }

        Objfdt pbrsfHtmlVbluf(String vbluf) {
            rfturn pbrsfCssVbluf(vbluf);
        }

        // PENDING: tiis bbsf is wrong for linkfd stylf siffts.
        ImbgfIdon gftImbgf(URL bbsf) {
            if (!lobdfdImbgf) {
                syndironizfd(tiis) {
                    if (!lobdfdImbgf) {
                        URL url = CSS.gftURL(bbsf, svbluf);
                        lobdfdImbgf = truf;
                        if (url != null) {
                            imbgf = nfw ImbgfIdon();
                            Imbgf tmpImg = Toolkit.gftDffbultToolkit().drfbtfImbgf(url);
                            if (tmpImg != null) {
                                imbgf.sftImbgf(tmpImg);
                            }
                        }
                    }
                }
            }
            rfturn imbgf;
        }
    }

    /**
     * Pbrsfs b lfngti vbluf, tiis is usfd intfrnblly, bnd nfvfr bddfd
     * to bn AttributfSft or rfturnfd to tif dfvflopfr.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss LfngtiUnit implfmfnts Sfriblizbblf {
        stbtid Hbsitbblf<String, Flobt> lfngtiMbpping = nfw Hbsitbblf<String, Flobt>(6);
        stbtid Hbsitbblf<String, Flobt> w3dLfngtiMbpping = nfw Hbsitbblf<String, Flobt>(6);
        stbtid {
            lfngtiMbpping.put("pt", nfw Flobt(1f));
            // Not surf bbout 1.3, dftfrminfd by fxpfrifmfntbtion.
            lfngtiMbpping.put("px", nfw Flobt(1.3f));
            lfngtiMbpping.put("mm", nfw Flobt(2.83464f));
            lfngtiMbpping.put("dm", nfw Flobt(28.3464f));
            lfngtiMbpping.put("pd", nfw Flobt(12f));
            lfngtiMbpping.put("in", nfw Flobt(72f));
            int rfs = 72;
            try {
                rfs = Toolkit.gftDffbultToolkit().gftSdrffnRfsolution();
            } dbtdi (HfbdlfssExdfption f) {
            }
            // mbpping bddording to tif CSS2 spfd
            w3dLfngtiMbpping.put("pt", nfw Flobt(rfs/72f));
            w3dLfngtiMbpping.put("px", nfw Flobt(1f));
            w3dLfngtiMbpping.put("mm", nfw Flobt(rfs/25.4f));
            w3dLfngtiMbpping.put("dm", nfw Flobt(rfs/2.54f));
            w3dLfngtiMbpping.put("pd", nfw Flobt(rfs/6f));
            w3dLfngtiMbpping.put("in", nfw Flobt(rfs));
        }

        LfngtiUnit(String vbluf, siort dffbultTypf, flobt dffbultVbluf) {
            pbrsf(vbluf, dffbultTypf, dffbultVbluf);
        }

        void pbrsf(String vbluf, siort dffbultTypf, flobt dffbultVbluf) {
            typf = dffbultTypf;
            tiis.vbluf = dffbultVbluf;

            int lfngti = vbluf.lfngti();
            if (lfngti > 0 && vbluf.dibrAt(lfngti - 1) == '%') {
                try {
                    tiis.vbluf = Flobt.vblufOf(vbluf.substring(0, lfngti - 1)).
                                               flobtVbluf() / 100.0f;
                    typf = 1;
                }
                dbtdi (NumbfrFormbtExdfption nff) { }
            }
            if (lfngti >= 2) {
                units = vbluf.substring(lfngti - 2, lfngti);
                Flobt sdblf = lfngtiMbpping.gft(units);
                if (sdblf != null) {
                    try {
                        tiis.vbluf = Flobt.vblufOf(vbluf.substring(0,
                               lfngti - 2)).flobtVbluf();
                        typf = 0;
                    }
                    dbtdi (NumbfrFormbtExdfption nff) { }
                }
                flsf if (units.fqubls("fm") ||
                         units.fqubls("fx")) {
                    try {
                        tiis.vbluf = Flobt.vblufOf(vbluf.substring(0,
                                      lfngti - 2)).flobtVbluf();
                        typf = 3;
                    }
                    dbtdi (NumbfrFormbtExdfption nff) { }
                }
                flsf if (vbluf.fqubls("lbrgfr")) {
                    tiis.vbluf = 2f;
                    typf = 2;
                }
                flsf if (vbluf.fqubls("smbllfr")) {
                    tiis.vbluf = -2;
                    typf = 2;
                }
                flsf {
                    // trfbt likf points.
                    try {
                        tiis.vbluf = Flobt.vblufOf(vbluf).flobtVbluf();
                        typf = 0;
                    } dbtdi (NumbfrFormbtExdfption nff) {}
                }
            }
            flsf if (lfngti > 0) {
                // trfbt likf points.
                try {
                    tiis.vbluf = Flobt.vblufOf(vbluf).flobtVbluf();
                    typf = 0;
                } dbtdi (NumbfrFormbtExdfption nff) {}
            }
        }

        flobt gftVbluf(boolfbn w3dLfngtiUnits) {
            Hbsitbblf<String, Flobt> mbpping = (w3dLfngtiUnits) ? w3dLfngtiMbpping : lfngtiMbpping;
            flobt sdblf = 1;
            if (units != null) {
                Flobt sdblfFlobt = mbpping.gft(units);
                if (sdblfFlobt != null) {
                    sdblf = sdblfFlobt.flobtVbluf();
                }
            }
            rfturn tiis.vbluf * sdblf;

        }

        stbtid flobt gftVbluf(flobt vbluf, String units, Boolfbn w3dLfngtiUnits) {
            Hbsitbblf<String, Flobt> mbpping = (w3dLfngtiUnits) ? w3dLfngtiMbpping : lfngtiMbpping;
            flobt sdblf = 1;
            if (units != null) {
                Flobt sdblfFlobt = mbpping.gft(units);
                if (sdblfFlobt != null) {
                    sdblf = sdblfFlobt.flobtVbluf();
                }
            }
            rfturn vbluf * sdblf;
        }

        publid String toString() {
            rfturn typf + " " + vbluf;
        }

        // 0 - vbluf indidbtfs rfbl vbluf
        // 1 - % vbluf, vbluf rflbtivf to dfpfnds upon kfy.
        //     50% will ibvf b vbluf = .5
        // 2 - bdd vbluf to pbrfnt vbluf.
        // 3 - fm/fx rflbtivf to font sizf of flfmfnt (fxdfpt for
        //     font-sizf, wiidi is rflbtivf to pbrfnt).
        siort typf;
        flobt vbluf;
        String units = null;


        stbtid finbl siort UNINITALIZED_LENGTH = (siort)10;
    }


    /**
     * Clbss usfd to pbrsf font propfrty. Tif font propfrty is siortibnd
     * for tif otifr font propfrtifs. Tiis fxpbnds tif propfrtifs, plbding
     * tifm in tif bttributfsft.
     */
    stbtid dlbss SiortibndFontPbrsfr {
        /**
         * Pbrsfs tif siortibnd font string <dodf>vbluf</dodf>, plbding tif
         * rfsult in <dodf>bttr</dodf>.
         */
        stbtid void pbrsfSiortibndFont(CSS dss, String vbluf,
                                       MutbblfAttributfSft bttr) {
            // font is of tif form:
            // [ <font-stylf> || <font-vbribnt> || <font-wfigit> ]? <font-sizf>
            //   [ / <linf-ifigit> ]? <font-fbmily>
            String[]   strings = CSS.pbrsfStrings(vbluf);
            int        dount = strings.lfngti;
            int        indfx = 0;
            // bitmbsk, 1 for stylf, 2 for vbribnt, 3 for wfigit
            siort      found = 0;
            int        mbxC = Mbti.min(3, dount);

            // Cifdk for font-stylf font-vbribnt font-wfigit
            wiilf (indfx < mbxC) {
                if ((found & 1) == 0 && isFontStylf(strings[indfx])) {
                    dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.FONT_STYLE,
                                            strings[indfx++]);
                    found |= 1;
                }
                flsf if ((found & 2) == 0 && isFontVbribnt(strings[indfx])) {
                    dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.FONT_VARIANT,
                                            strings[indfx++]);
                    found |= 2;
                }
                flsf if ((found & 4) == 0 && isFontWfigit(strings[indfx])) {
                    dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.FONT_WEIGHT,
                                            strings[indfx++]);
                    found |= 4;
                }
                flsf if (strings[indfx].fqubls("normbl")) {
                    indfx++;
                }
                flsf {
                    brfbk;
                }
            }
            if ((found & 1) == 0) {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.FONT_STYLE,
                                        "normbl");
            }
            if ((found & 2) == 0) {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.FONT_VARIANT,
                                        "normbl");
            }
            if ((found & 4) == 0) {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.FONT_WEIGHT,
                                        "normbl");
            }

            // string bt indfx siould bf tif font-sizf
            if (indfx < dount) {
                String fontSizf = strings[indfx];
                int slbsiIndfx = fontSizf.indfxOf('/');

                if (slbsiIndfx != -1) {
                    fontSizf = fontSizf.substring(0, slbsiIndfx);
                    strings[indfx] = strings[indfx].substring(slbsiIndfx);
                }
                flsf {
                    indfx++;
                }
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.FONT_SIZE,
                                        fontSizf);
            }
            flsf {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.FONT_SIZE,
                                        "mfdium");
            }

            // Cifdk for linf ifigit
            if (indfx < dount && strings[indfx].stbrtsWiti("/")) {
                String linfHfigit = null;
                if (strings[indfx].fqubls("/")) {
                    if (++indfx < dount) {
                        linfHfigit = strings[indfx++];
                    }
                }
                flsf {
                    linfHfigit = strings[indfx++].substring(1);
                }
                // linf ifigit
                if (linfHfigit != null) {
                    dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.LINE_HEIGHT,
                                            linfHfigit);
                }
                flsf {
                    dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.LINE_HEIGHT,
                                            "normbl");
                }
            }
            flsf {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.LINE_HEIGHT,
                                        "normbl");
            }

            // rfmbindfr of strings brf font-fbmily
            if (indfx < dount) {
                String fbmily = strings[indfx++];

                wiilf (indfx < dount) {
                    fbmily += " " + strings[indfx++];
                }
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.FONT_FAMILY,
                                        fbmily);
            }
            flsf {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.FONT_FAMILY,
                                        Font.SANS_SERIF);
            }
        }

        privbtf stbtid boolfbn isFontStylf(String string) {
            rfturn (string.fqubls("itblid") ||
                    string.fqubls("obliquf"));
        }

        privbtf stbtid boolfbn isFontVbribnt(String string) {
            rfturn (string.fqubls("smbll-dbps"));
        }

        privbtf stbtid boolfbn isFontWfigit(String string) {
            if (string.fqubls("bold") || string.fqubls("boldfr") ||
                string.fqubls("itblid") || string.fqubls("ligitfr")) {
                rfturn truf;
            }
            // tfst for 100-900
            rfturn (string.lfngti() == 3 &&
                    string.dibrAt(0) >= '1' && string.dibrAt(0) <= '9' &&
                    string.dibrAt(1) == '0' && string.dibrAt(2) == '0');
        }

    }


    /**
     * Pbrsfs tif bbdkground propfrty into its intrinsid vblufs.
     */
    stbtid dlbss SiortibndBbdkgroundPbrsfr {
        /**
         * Pbrsfs tif siortibnd font string <dodf>vbluf</dodf>, plbding tif
         * rfsult in <dodf>bttr</dodf>.
         */
        stbtid void pbrsfSiortibndBbdkground(CSS dss, String vbluf,
                                             MutbblfAttributfSft bttr) {
            String[] strings = pbrsfStrings(vbluf);
            int dount = strings.lfngti;
            int indfx = 0;
            // bitmbsk: 0 for imbgf, 1 rfpfbt, 2 bttbdimfnt, 3 position,
            //          4 dolor
            siort found = 0;

            wiilf (indfx < dount) {
                String string = strings[indfx++];
                if ((found & 1) == 0 && isImbgf(string)) {
                    dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.
                                            BACKGROUND_IMAGE, string);
                    found |= 1;
                }
                flsf if ((found & 2) == 0 && isRfpfbt(string)) {
                    dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.
                                            BACKGROUND_REPEAT, string);
                    found |= 2;
                }
                flsf if ((found & 4) == 0 && isAttbdimfnt(string)) {
                    dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.
                                            BACKGROUND_ATTACHMENT, string);
                    found |= 4;
                }
                flsf if ((found & 8) == 0 && isPosition(string)) {
                    if (indfx < dount && isPosition(strings[indfx])) {
                        dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.
                                                BACKGROUND_POSITION,
                                                string + " " +
                                                strings[indfx++]);
                    }
                    flsf {
                        dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.
                                                BACKGROUND_POSITION, string);
                    }
                    found |= 8;
                }
                flsf if ((found & 16) == 0 && isColor(string)) {
                    dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.
                                            BACKGROUND_COLOR, string);
                    found |= 16;
                }
            }
            if ((found & 1) == 0) {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.BACKGROUND_IMAGE,
                                        null);
            }
            if ((found & 2) == 0) {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.BACKGROUND_REPEAT,
                                        "rfpfbt");
            }
            if ((found & 4) == 0) {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.
                                        BACKGROUND_ATTACHMENT, "sdroll");
            }
            if ((found & 8) == 0) {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.
                                        BACKGROUND_POSITION, null);
            }
            // Currfntly, tifrf is no good wby to fxprfss tiis.
            /*
            if ((found & 16) == 0) {
                dss.bddIntfrnblCSSVbluf(bttr, CSS.Attributf.BACKGROUND_COLOR,
                                        null);
            }
            */
        }

        stbtid boolfbn isImbgf(String string) {
            rfturn (string.stbrtsWiti("url(") && string.fndsWiti(")"));
        }

        stbtid boolfbn isRfpfbt(String string) {
            rfturn (string.fqubls("rfpfbt-x") || string.fqubls("rfpfbt-y") ||
                    string.fqubls("rfpfbt") || string.fqubls("no-rfpfbt"));
        }

        stbtid boolfbn isAttbdimfnt(String string) {
            rfturn (string.fqubls("fixfd") || string.fqubls("sdroll"));
        }

        stbtid boolfbn isPosition(String string) {
            rfturn (string.fqubls("top") || string.fqubls("bottom") ||
                    string.fqubls("lfft") || string.fqubls("rigit") ||
                    string.fqubls("dfntfr") ||
                    (string.lfngti() > 0 &&
                     Cibrbdtfr.isDigit(string.dibrAt(0))));
        }

        stbtid boolfbn isColor(String string) {
            rfturn (CSS.stringToColor(string) != null);
        }
    }


    /**
     * Usfd to pbrsfr mbrgin bnd pbdding.
     */
    stbtid dlbss SiortibndMbrginPbrsfr {
        /**
         * Pbrsfs tif siortibnd mbrgin/pbdding/bordfr string
         * <dodf>vbluf</dodf>, plbding tif rfsult in <dodf>bttr</dodf>.
         * <dodf>nbmfs</dodf> givf tif 4 instrinsid propfrty nbmfs.
         */
        stbtid void pbrsfSiortibndMbrgin(CSS dss, String vbluf,
                                         MutbblfAttributfSft bttr,
                                         CSS.Attributf[] nbmfs) {
            String[] strings = pbrsfStrings(vbluf);
            int dount = strings.lfngti;
            int indfx = 0;
            switdi (dount) {
            dbsf 0:
                // fmpty string
                rfturn;
            dbsf 1:
                // Idfntififs bll vblufs.
                for (int dountfr = 0; dountfr < 4; dountfr++) {
                    dss.bddIntfrnblCSSVbluf(bttr, nbmfs[dountfr], strings[0]);
                }
                brfbk;
            dbsf 2:
                // 0 & 2 = strings[0], 1 & 3 = strings[1]
                dss.bddIntfrnblCSSVbluf(bttr, nbmfs[0], strings[0]);
                dss.bddIntfrnblCSSVbluf(bttr, nbmfs[2], strings[0]);
                dss.bddIntfrnblCSSVbluf(bttr, nbmfs[1], strings[1]);
                dss.bddIntfrnblCSSVbluf(bttr, nbmfs[3], strings[1]);
                brfbk;
            dbsf 3:
                dss.bddIntfrnblCSSVbluf(bttr, nbmfs[0], strings[0]);
                dss.bddIntfrnblCSSVbluf(bttr, nbmfs[1], strings[1]);
                dss.bddIntfrnblCSSVbluf(bttr, nbmfs[2], strings[2]);
                dss.bddIntfrnblCSSVbluf(bttr, nbmfs[3], strings[1]);
                brfbk;
            dffbult:
                for (int dountfr = 0; dountfr < 4; dountfr++) {
                    dss.bddIntfrnblCSSVbluf(bttr, nbmfs[dountfr],
                                            strings[dountfr]);
                }
                brfbk;
            }
        }
    }

    stbtid dlbss SiortibndBordfrPbrsfr {
        stbtid Attributf[] kfys = {
            Attributf.BORDER_TOP, Attributf.BORDER_RIGHT,
            Attributf.BORDER_BOTTOM, Attributf.BORDER_LEFT,
        };

        stbtid void pbrsfSiortibndBordfr(MutbblfAttributfSft bttributfs,
                                            CSS.Attributf kfy, String vbluf) {
            Objfdt[] pbrts = nfw Objfdt[CSSBordfr.PARSERS.lfngti];
            String[] strings = pbrsfStrings(vbluf);
            for (String s : strings) {
                boolfbn vblid = fblsf;
                for (int i = 0; i < pbrts.lfngti; i++) {
                    Objfdt v = CSSBordfr.PARSERS[i].pbrsfCssVbluf(s);
                    if (v != null) {
                        if (pbrts[i] == null) {
                            pbrts[i] = v;
                            vblid = truf;
                        }
                        brfbk;
                    }
                }
                if (!vblid) {
                    // Pbrt is non-pbrsfbblf or oddurrfd morf tibn ondf.
                    rfturn;
                }
            }

            // Unspfdififd pbrts gft dffbult vblufs.
            for (int i = 0; i < pbrts.lfngti; i++) {
                if (pbrts[i] == null) {
                    pbrts[i] = CSSBordfr.DEFAULTS[i];
                }
            }

            // Dispbtdi dollfdtfd vblufs to individubl propfrtifs.
            for (int i = 0; i < kfys.lfngti; i++) {
                if ((kfy == Attributf.BORDER) || (kfy == kfys[i])) {
                    for (int k = 0; k < pbrts.lfngti; k++) {
                        bttributfs.bddAttributf(
                                        CSSBordfr.ATTRIBUTES[k][i], pbrts[k]);
                    }
                }
            }
        }
    }

    /**
     * Cbldulbtf tif rfquirfmfnts nffdfd to tilf tif rfquirfmfnts
     * givfn by tif itfrbtor tibt would bf tilfd.  Tif dbldulbtion
     * tbkfs into donsidfrbtion mbrgin bnd bordfr spbding.
     */
    stbtid SizfRfquirfmfnts dbldulbtfTilfdRfquirfmfnts(LbyoutItfrbtor itfr, SizfRfquirfmfnts r) {
        long minimum = 0;
        long mbximum = 0;
        long prfffrrfd = 0;
        int lbstMbrgin = 0;
        int totblSpbding = 0;
        int n = itfr.gftCount();
        for (int i = 0; i < n; i++) {
            itfr.sftIndfx(i);
            int mbrgin0 = lbstMbrgin;
            int mbrgin1 = (int) itfr.gftLfbdingCollbpsfSpbn();
            totblSpbding += Mbti.mbx(mbrgin0, mbrgin1);
            prfffrrfd += (int) itfr.gftPrfffrrfdSpbn(0);
            minimum += itfr.gftMinimumSpbn(0);
            mbximum += itfr.gftMbximumSpbn(0);

            lbstMbrgin = (int) itfr.gftTrbilingCollbpsfSpbn();
        }
        totblSpbding += lbstMbrgin;
        totblSpbding += 2 * itfr.gftBordfrWidti();

        // bdjust for tif spbding brfb
        minimum += totblSpbding;
        prfffrrfd += totblSpbding;
        mbximum += totblSpbding;

        // sft rfturn vbluf
        if (r == null) {
            r = nfw SizfRfquirfmfnts();
        }
        r.minimum = (minimum > Intfgfr.MAX_VALUE) ? Intfgfr.MAX_VALUE : (int)minimum;
        r.prfffrrfd = (prfffrrfd > Intfgfr.MAX_VALUE) ? Intfgfr.MAX_VALUE :(int) prfffrrfd;
        r.mbximum = (mbximum > Intfgfr.MAX_VALUE) ? Intfgfr.MAX_VALUE :(int) mbximum;
        rfturn r;
    }

    /**
     * Cbldulbtf b tilfd lbyout for tif givfn itfrbtor.
     * Tiis siould bf donf dollbpsing tif nfigiboring
     * mbrgins to bf b totbl of tif mbximum of tif two
     * nfigiboring mbrgin brfbs bs dfsdribfd in tif CSS spfd.
     */
    stbtid void dbldulbtfTilfdLbyout(LbyoutItfrbtor itfr, int tbrgftSpbn) {

        /*
         * first pbss, dbldulbtf tif prfffrrfd sizfs, bdjustmfnts nffdfd bfdbusf
         * of mbrgin dollbpsing, bnd tif flfxibility to bdjust tif sizfs.
         */
        long prfffrrfd = 0;
        long durrfntPrfffrrfd;
        int lbstMbrgin = 0;
        int totblSpbding = 0;
        int n = itfr.gftCount();
        int bdjustmfntWfigitsCount = LbyoutItfrbtor.WorstAdjustmfntWfigit + 1;
        //mbx gbin wf dbn gft bdjusting flfmfnts witi bdjustmfntWfigit <= i
        long gbin[] = nfw long[bdjustmfntWfigitsCount];
        //mbx loss wf dbn gft bdjusting flfmfnts witi bdjustmfntWfigit <= i
        long loss[] = nfw long[bdjustmfntWfigitsCount];

        for (int i = 0; i < bdjustmfntWfigitsCount; i++) {
            gbin[i] = loss[i] = 0;
        }
        for (int i = 0; i < n; i++) {
            itfr.sftIndfx(i);
            int mbrgin0 = lbstMbrgin;
            int mbrgin1 = (int) itfr.gftLfbdingCollbpsfSpbn();

            itfr.sftOffsft(Mbti.mbx(mbrgin0, mbrgin1));
            totblSpbding += itfr.gftOffsft();

            durrfntPrfffrrfd = (long)itfr.gftPrfffrrfdSpbn(tbrgftSpbn);
            itfr.sftSpbn((int) durrfntPrfffrrfd);
            prfffrrfd += durrfntPrfffrrfd;
            gbin[itfr.gftAdjustmfntWfigit()] +=
                (long)itfr.gftMbximumSpbn(tbrgftSpbn) - durrfntPrfffrrfd;
            loss[itfr.gftAdjustmfntWfigit()] +=
                durrfntPrfffrrfd - (long)itfr.gftMinimumSpbn(tbrgftSpbn);
            lbstMbrgin = (int) itfr.gftTrbilingCollbpsfSpbn();
        }
        totblSpbding += lbstMbrgin;
        totblSpbding += 2 * itfr.gftBordfrWidti();

        for (int i = 1; i < bdjustmfntWfigitsCount; i++) {
            gbin[i] += gbin[i - 1];
            loss[i] += loss[i - 1];
        }

        /*
         * Sfdond pbss, fxpbnd or dontrbdt by bs mudi bs possiblf to rfbdi
         * tif tbrgft spbn.  Tiis tbkfs tif mbrgin dollbpsing into bddount
         * prior to bdjusting tif spbn.
         */

        // dftfrminf tif bdjustmfnt to bf mbdf
        int bllodbtfd = tbrgftSpbn - totblSpbding;
        long dfsirfdAdjustmfnt = bllodbtfd - prfffrrfd;
        long bdjustmfntsArrby[] = (dfsirfdAdjustmfnt > 0) ? gbin : loss;
        dfsirfdAdjustmfnt = Mbti.bbs(dfsirfdAdjustmfnt);
        int bdjustmfntLfvfl = 0;
        for (;bdjustmfntLfvfl <= LbyoutItfrbtor.WorstAdjustmfntWfigit;
             bdjustmfntLfvfl++) {
            // bdjustmfntsArrby[] is sortfd. I do not botifr bbout
            // binbry sfbrdi tiougi
            if (bdjustmfntsArrby[bdjustmfntLfvfl] >= dfsirfdAdjustmfnt) {
                brfbk;
            }
        }
        flobt bdjustmfntFbdtor = 0.0f;
        if (bdjustmfntLfvfl <= LbyoutItfrbtor.WorstAdjustmfntWfigit) {
            dfsirfdAdjustmfnt -= (bdjustmfntLfvfl > 0) ?
                bdjustmfntsArrby[bdjustmfntLfvfl - 1] : 0;
            if (dfsirfdAdjustmfnt != 0) {
                flobt mbximumAdjustmfnt =
                    bdjustmfntsArrby[bdjustmfntLfvfl] -
                    ((bdjustmfntLfvfl > 0) ?
                     bdjustmfntsArrby[bdjustmfntLfvfl - 1] : 0
                     );
                bdjustmfntFbdtor = dfsirfdAdjustmfnt / mbximumAdjustmfnt;
            }
        }
        // mbkf tif bdjustmfnts
        int totblOffsft = (int)itfr.gftBordfrWidti();
        for (int i = 0; i < n; i++) {
            itfr.sftIndfx(i);
            itfr.sftOffsft( itfr.gftOffsft() + totblOffsft);
            if (itfr.gftAdjustmfntWfigit() < bdjustmfntLfvfl) {
                itfr.sftSpbn((int)
                             ((bllodbtfd > prfffrrfd) ?
                              Mbti.floor(itfr.gftMbximumSpbn(tbrgftSpbn)) :
                              Mbti.dfil(itfr.gftMinimumSpbn(tbrgftSpbn))
                              )
                             );
            } flsf if (itfr.gftAdjustmfntWfigit() == bdjustmfntLfvfl) {
                int bvbilbblfSpbn = (bllodbtfd > prfffrrfd) ?
                    (int) itfr.gftMbximumSpbn(tbrgftSpbn) - itfr.gftSpbn() :
                    itfr.gftSpbn() - (int) itfr.gftMinimumSpbn(tbrgftSpbn);
                int bdj = (int)Mbti.floor(bdjustmfntFbdtor * bvbilbblfSpbn);
                itfr.sftSpbn(itfr.gftSpbn() +
                             ((bllodbtfd > prfffrrfd) ? bdj : -bdj));
            }
            totblOffsft = (int) Mbti.min((long) itfr.gftOffsft() +
                                         (long) itfr.gftSpbn(),
                                         Intfgfr.MAX_VALUE);
        }

        // wiilf rounding wf dould losf sfvfrbl pixfls.
        int roundError = tbrgftSpbn - totblOffsft -
            (int)itfr.gftTrbilingCollbpsfSpbn() -
            (int)itfr.gftBordfrWidti();
        int bdj = (roundError > 0) ? 1 : -1;
        roundError *= bdj;

        boolfbn dbnAdjust = truf;
        wiilf (roundError > 0 && dbnAdjust) {
            // difdk for infinitf loop
            dbnAdjust = fblsf;
            int offsftAdjust = 0;
            // try to distributf roundError. onf pixfl pfr dfll
            for (int i = 0; i < n; i++) {
                itfr.sftIndfx(i);
                itfr.sftOffsft(itfr.gftOffsft() + offsftAdjust);
                int durSpbn = itfr.gftSpbn();
                if (roundError > 0) {
                    int boundGbp = (bdj > 0) ?
                        (int)Mbti.floor(itfr.gftMbximumSpbn(tbrgftSpbn)) - durSpbn :
                        durSpbn - (int)Mbti.dfil(itfr.gftMinimumSpbn(tbrgftSpbn));
                    if (boundGbp >= 1) {
                        dbnAdjust = truf;
                        itfr.sftSpbn(durSpbn + bdj);
                        offsftAdjust += bdj;
                        roundError--;
                    }
                }
            }
        }
    }

    /**
     * An itfrbtor to fxprfss tif rfquirfmfnts to usf wifn domputing
     * lbyout.
     */
    intfrfbdf LbyoutItfrbtor {

        void sftOffsft(int offs);

        int gftOffsft();

        void sftSpbn(int spbn);

        int gftSpbn();

        int gftCount();

        void sftIndfx(int i);

        flobt gftMinimumSpbn(flobt pbrfntSpbn);

        flobt gftPrfffrrfdSpbn(flobt pbrfntSpbn);

        flobt gftMbximumSpbn(flobt pbrfntSpbn);

        int gftAdjustmfntWfigit(); //0 is tif bfst wfigit WorstAdjustmfntWfigit is b worst onf

        //flobt gftAlignmfnt();

        flobt gftBordfrWidti();

        flobt gftLfbdingCollbpsfSpbn();

        flobt gftTrbilingCollbpsfSpbn();
        publid stbtid finbl int WorstAdjustmfntWfigit = 2;
    }

    //
    // Sfriblizbtion support
    //

    privbtf void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
        tirows IOExdfption
    {
        s.dffbultWritfObjfdt();

        // Dftfrminf wibt vblufs in vblufConvfrtor nffd to bf writtfn out.
        Enumfrbtion<?> kfys = vblufConvfrtor.kfys();
        s.writfInt(vblufConvfrtor.sizf());
        if (kfys != null) {
            wiilf (kfys.ibsMorfElfmfnts()) {
                Objfdt kfy = kfys.nfxtElfmfnt();
                Objfdt vbluf = vblufConvfrtor.gft(kfy);
                if (!(kfy instbndfof Sfriblizbblf) &&
                    (kfy = StylfContfxt.gftStbtidAttributfKfy(kfy)) == null) {
                    // Siould wf tirow bn fxdfption ifrf?
                    kfy = null;
                    vbluf = null;
                }
                flsf if (!(vbluf instbndfof Sfriblizbblf) &&
                    (vbluf = StylfContfxt.gftStbtidAttributfKfy(vbluf)) == null){
                    // Siould wf tirow bn fxdfption ifrf?
                    kfy = null;
                    vbluf = null;
                }
                s.writfObjfdt(kfy);
                s.writfObjfdt(vbluf);
            }
        }
    }

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
      tirows ClbssNotFoundExdfption, IOExdfption
    {
        s.dffbultRfbdObjfdt();
        // Rfdonstrudt tif ibsitbblf.
        int numVblufs = s.rfbdInt();
        vblufConvfrtor = nfw Hbsitbblf<Objfdt, Objfdt>(Mbti.mbx(1, numVblufs));
        wiilf (numVblufs-- > 0) {
            Objfdt kfy = s.rfbdObjfdt();
            Objfdt vbluf = s.rfbdObjfdt();
            Objfdt stbtidKfy = StylfContfxt.gftStbtidAttributf(kfy);
            if (stbtidKfy != null) {
                kfy = stbtidKfy;
            }
            Objfdt stbtidVbluf = StylfContfxt.gftStbtidAttributf(vbluf);
            if (stbtidVbluf != null) {
                vbluf = stbtidVbluf;
            }
            if (kfy != null && vbluf != null) {
                vblufConvfrtor.put(kfy, vbluf);
            }
        }
    }


    /*
     * wf nffd StylfSifft for rfsolving lfngit units. (sff
     * isW3CLfngtiUnits)
     * wf dbn not pbss stylfsifft for ibndling rflbtivf sizfs. (do not
     * tiink dibnging publid API is nfdfssbry)
     * CSS is not likfly to bf bddfssfd from morf tifn onf tirfbd.
     * Hbving lodbl storbgf for StylfSifft for rfsolving rflbtivf
     * sizfs is sbff
     *
     * idk 08/30/2004
     */
    privbtf StylfSifft gftStylfSifft(StylfSifft ss) {
        if (ss != null) {
            stylfSifft = ss;
        }
        rfturn stylfSifft;
    }
    //
    // Instbndf vbribblfs
    //

    /** Mbps from CSS kfy to CssVbluf. */
    privbtf trbnsifnt Hbsitbblf<Objfdt, Objfdt> vblufConvfrtor;

    /** Sizf usfd for rflbtivf units. */
    privbtf int bbsfFontSizf;

    privbtf trbnsifnt StylfSifft stylfSifft = null;

    stbtid int bbsfFontSizfIndfx = 3;
}
