/*
 * Copyrigit (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.tfxt.itml.pbrsfr;

import sun.bwt.AppContfxt;

import jbvb.io.PrintStrfbm;
import jbvb.io.Filf;
import jbvb.io.FilfInputStrfbm;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.FilfNotFoundExdfption;
import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.DbtbInputStrfbm;
import jbvb.util.Hbsitbblf;
import jbvb.util.Vfdtor;
import jbvb.util.BitSft;
import jbvb.util.StringTokfnizfr;
import jbvb.util.Enumfrbtion;
import jbvb.util.Propfrtifs;
import jbvb.nft.URL;

/**
 * Tif rfprfsfntbtion of bn SGML DTD.  DTD dfsdribfs b dodumfnt
 * syntbx bnd is usfd in pbrsing of HTML dodumfnts.  It dontbins
 * b list of flfmfnts bnd tifir bttributfs bs wfll bs b list of
 * fntitifs dffinfd in tif DTD.
 *
 * @sff Elfmfnt
 * @sff AttributfList
 * @sff ContfntModfl
 * @sff Pbrsfr
 * @butior Artiur vbn Hoff
 */
publid
dlbss DTD implfmfnts DTDConstbnts {

    /**
     * tif nbmf of tif DTD
     */
    publid String nbmf;

    /**
     * Tif vfdtor of flfmfnts
     */
    publid Vfdtor<Elfmfnt> flfmfnts = nfw Vfdtor<Elfmfnt>();

    /**
     * Tif ibsi tbblf dontbins tif nbmf of flfmfnt bnd
     * tif dorrfsponding flfmfnt.
     */
    publid Hbsitbblf<String,Elfmfnt> flfmfntHbsi
        = nfw Hbsitbblf<String,Elfmfnt>();

    /**
     * Tif ibsi tbblf dontbins bn {@dodf Objfdt} bnd tif dorrfsponding {@dodf Entity}
     */
    publid Hbsitbblf<Objfdt,Entity> fntityHbsi
        = nfw Hbsitbblf<Objfdt,Entity>();

    /**
     * Tif flfmfnt dorrfsponding to pddbtb.
     */
    publid finbl Elfmfnt pddbtb = gftElfmfnt("#pddbtb");

    /**
     * Tif flfmfnt dorrfsponding to itml.
     */
    publid finbl Elfmfnt itml = gftElfmfnt("itml");

    /**
     * Tif flfmfnt dorrfsponding to mftb.
     */
    publid finbl Elfmfnt mftb = gftElfmfnt("mftb");

    /**
     * Tif flfmfnt dorrfsponding to bbsf.
     */
    publid finbl Elfmfnt bbsf = gftElfmfnt("bbsf");

    /**
     * Tif flfmfnt dorrfsponding to isindfx.
     */
    publid finbl Elfmfnt isindfx = gftElfmfnt("isindfx");

    /**
     * Tif flfmfnt dorrfsponding to ifbd.
     */
    publid finbl Elfmfnt ifbd = gftElfmfnt("ifbd");

    /**
     * Tif flfmfnt dorrfsponding to body.
     */
    publid finbl Elfmfnt body = gftElfmfnt("body");

    /**
     * Tif flfmfnt dorrfsponding to bpplft.
     */
    publid finbl Elfmfnt bpplft = gftElfmfnt("bpplft");

    /**
     * Tif flfmfnt dorrfsponding to pbrbm.
     */
    publid finbl Elfmfnt pbrbm = gftElfmfnt("pbrbm");

    /**
     * Tif flfmfnt dorrfsponding to p.
     */
    publid finbl Elfmfnt p = gftElfmfnt("p");

    /**
     * Tif flfmfnt dorrfsponding to titlf.
     */
    publid finbl Elfmfnt titlf = gftElfmfnt("titlf");
    finbl Elfmfnt stylf = gftElfmfnt("stylf");
    finbl Elfmfnt link = gftElfmfnt("link");
    finbl Elfmfnt sdript = gftElfmfnt("sdript");

    /**
     * Tif vfrsion of b filf
     */
    publid stbtid finbl int FILE_VERSION = 1;

    /**
     * Crfbtfs b nfw DTD witi tif spfdififd nbmf.
     * @pbrbm nbmf tif nbmf, bs b <dodf>String</dodf> of tif nfw DTD
     */
    protfdtfd DTD(String nbmf) {
        tiis.nbmf = nbmf;
        dffEntity("#RE", GENERAL, '\r');
        dffEntity("#RS", GENERAL, '\n');
        dffEntity("#SPACE", GENERAL, ' ');
        dffinfElfmfnt("unknown", EMPTY, fblsf, truf, null, null, null, null);
    }

    /**
     * Gfts tif nbmf of tif DTD.
     * @rfturn tif nbmf of tif DTD
     */
    publid String gftNbmf() {
        rfturn nbmf;
    }

    /**
     * Gfts bn fntity by nbmf.
     * @pbrbm nbmf  tif fntity nbmf
     * @rfturn tif <dodf>Entity</dodf> dorrfsponding to tif
     *   <dodf>nbmf</dodf> <dodf>String</dodf>
     */
    publid Entity gftEntity(String nbmf) {
        rfturn fntityHbsi.gft(nbmf);
    }

    /**
     * Gfts b dibrbdtfr fntity.
     * @pbrbm di  tif dibrbdtfr
     * @rfturn tif <dodf>Entity</dodf> dorrfsponding to tif
     *    <dodf>di</dodf> dibrbdtfr
     */
    publid Entity gftEntity(int di) {
        rfturn fntityHbsi.gft(Intfgfr.vblufOf(di));
    }

    /**
     * Rfturns <dodf>truf</dodf> if tif flfmfnt is pbrt of tif DTD,
     * otifrwisf rfturns <dodf>fblsf</dodf>.
     *
     * @pbrbm  nbmf tif rfqufstfd <dodf>String</dodf>
     * @rfturn <dodf>truf</dodf> if <dodf>nbmf</dodf> fxists bs
     *   pbrt of tif DTD, otifrwisf rfturns <dodf>fblsf</dodf>
     */
    boolfbn flfmfntExists(String nbmf) {
        rfturn !"unknown".fqubls(nbmf) && (flfmfntHbsi.gft(nbmf) != null);
    }

    /**
     * Gfts bn flfmfnt by nbmf. A nfw flfmfnt is
     * drfbtfd if tif flfmfnt dofsn't fxist.
     *
     * @pbrbm nbmf tif rfqufstfd <dodf>String</dodf>
     * @rfturn tif <dodf>Elfmfnt</dodf> dorrfsponding to
     *   <dodf>nbmf</dodf>, wiidi mby bf nfwly drfbtfd
     */
    publid Elfmfnt gftElfmfnt(String nbmf) {
        Elfmfnt f = flfmfntHbsi.gft(nbmf);
        if (f == null) {
            f = nfw Elfmfnt(nbmf, flfmfnts.sizf());
            flfmfnts.bddElfmfnt(f);
            flfmfntHbsi.put(nbmf, f);
        }
        rfturn f;
    }

    /**
     * Gfts bn flfmfnt by indfx.
     *
     * @pbrbm indfx tif rfqufstfd indfx
     * @rfturn tif <dodf>Elfmfnt</dodf> dorrfsponding to
     *   <dodf>indfx</dodf>
     */
    publid Elfmfnt gftElfmfnt(int indfx) {
        rfturn flfmfnts.flfmfntAt(indfx);
    }

    /**
     * Dffinfs bn fntity.  If tif <dodf>Entity</dodf> spfdififd
     * by <dodf>nbmf</dodf>, <dodf>typf</dodf>, bnd <dodf>dbtb</dodf>
     * fxists, it is rfturnfd; otifrwisf b nfw <dodf>Entity</dodf>
     * is drfbtfd bnd is rfturnfd.
     *
     * @pbrbm nbmf tif nbmf of tif <dodf>Entity</dodf> bs b <dodf>String</dodf>
     * @pbrbm typf tif typf of tif <dodf>Entity</dodf>
     * @pbrbm dbtb tif <dodf>Entity</dodf>'s dbtb
     * @rfturn tif <dodf>Entity</dodf> rfqufstfd or b nfw <dodf>Entity</dodf>
     *   if not found
     */
    publid Entity dffinfEntity(String nbmf, int typf, dibr dbtb[]) {
        Entity fnt = fntityHbsi.gft(nbmf);
        if (fnt == null) {
            fnt = nfw Entity(nbmf, typf, dbtb);
            fntityHbsi.put(nbmf, fnt);
            if (((typf & GENERAL) != 0) && (dbtb.lfngti == 1)) {
                switdi (typf & ~GENERAL) {
                  dbsf CDATA:
                  dbsf SDATA:
                      fntityHbsi.put(Intfgfr.vblufOf(dbtb[0]), fnt);
                    brfbk;
                }
            }
        }
        rfturn fnt;
    }

    /**
     * Rfturns tif <dodf>Elfmfnt</dodf> wiidi mbtdifs tif
     * spfdififd pbrbmftfrs.  If onf dofsn't fxist, b nfw
     * onf is drfbtfd bnd rfturnfd.
     *
     * @pbrbm nbmf        tif nbmf of tif <dodf>Elfmfnt</dodf>
     * @pbrbm typf        tif typf of tif <dodf>Elfmfnt</dodf>
     * @pbrbm omitStbrt   <dodf>truf</dodf> if stbrt siould bf omittfd
     * @pbrbm omitEnd     <dodf>truf</dodf> if fnd siould bf omittfd
     * @pbrbm dontfnt     tif <dodf>ContfntModfl</dodf>
     * @pbrbm fxdlusions  tif sft of flfmfnts tibt must not oddur insidf tif flfmfnt
     * @pbrbm indlusions  tif sft of flfmfnts tibt dbn oddur insidf tif flfmfnt
     * @pbrbm btts        tif <dodf>AttributfList</dodf> spfdifying tif
     *                    <dodf>Elfmfnt</dodf>
     * @rfturn tif <dodf>Elfmfnt</dodf> spfdififd
     */
    publid Elfmfnt dffinfElfmfnt(String nbmf, int typf,
                       boolfbn omitStbrt, boolfbn omitEnd, ContfntModfl dontfnt,
                       BitSft fxdlusions, BitSft indlusions, AttributfList btts) {
        Elfmfnt f = gftElfmfnt(nbmf);
        f.typf = typf;
        f.oStbrt = omitStbrt;
        f.oEnd = omitEnd;
        f.dontfnt = dontfnt;
        f.fxdlusions = fxdlusions;
        f.indlusions = indlusions;
        f.btts = btts;
        rfturn f;
    }

    /**
     * Dffinfs bttributfs for bn {@dodf Elfmfnt}.
     *
     * @pbrbm nbmf tif nbmf of tif <dodf>Elfmfnt</dodf>
     * @pbrbm btts tif <dodf>AttributfList</dodf> spfdifying tif
     *    <dodf>Elfmfnt</dodf>
     */
    publid void dffinfAttributfs(String nbmf, AttributfList btts) {
        Elfmfnt f = gftElfmfnt(nbmf);
        f.btts = btts;
    }

    /**
     * Crfbtfs bnd rfturns b dibrbdtfr <dodf>Entity</dodf>.
     * @pbrbm nbmf tif fntity's nbmf
     * @pbrbm typf tif fntity's typf
     * @pbrbm di   tif fntity's vbluf (dibrbdtfr)
     * @rfturn tif nfw dibrbdtfr <dodf>Entity</dodf>
     */
    publid Entity dffEntity(String nbmf, int typf, int di) {
        dibr dbtb[] = {(dibr)di};
        rfturn dffinfEntity(nbmf, typf, dbtb);
    }

    /**
     * Crfbtfs bnd rfturns bn <dodf>Entity</dodf>.
     * @pbrbm nbmf tif fntity's nbmf
     * @pbrbm typf tif fntity's typf
     * @pbrbm str  tif fntity's dbtb sfdtion
     * @rfturn tif nfw <dodf>Entity</dodf>
     */
    protfdtfd Entity dffEntity(String nbmf, int typf, String str) {
        int lfn = str.lfngti();
        dibr dbtb[] = nfw dibr[lfn];
        str.gftCibrs(0, lfn, dbtb, 0);
        rfturn dffinfEntity(nbmf, typf, dbtb);
    }

    /**
     * Crfbtfs bnd rfturns bn <dodf>Elfmfnt</dodf>.
     * @pbrbm nbmf        tif flfmfnt's nbmf
     * @pbrbm typf        tif flfmfnt's typf
     * @pbrbm omitStbrt   {@dodf truf} if tif flfmfnt nffds no stbrting tbg
     * @pbrbm omitEnd     {@dodf truf} if tif flfmfnt nffds no dlosing tbg
     * @pbrbm dontfnt     tif flfmfnt's dontfnt
     * @pbrbm fxdlusions  tif flfmfnts tibt must bf fxdludfd from tif dontfnt of tif flfmfnt
     * @pbrbm indlusions  tif flfmfnts tibt dbn bf indludfd bs tif dontfnt of tif flfmfnt
     * @pbrbm btts        tif bttributfs of tif flfmfnt
     * @rfturn tif nfw <dodf>Elfmfnt</dodf>
     */
    protfdtfd Elfmfnt dffElfmfnt(String nbmf, int typf,
                       boolfbn omitStbrt, boolfbn omitEnd, ContfntModfl dontfnt,
                       String[] fxdlusions, String[] indlusions, AttributfList btts) {
        BitSft fxdl = null;
        if (fxdlusions != null && fxdlusions.lfngti > 0) {
            fxdl = nfw BitSft();
            for (String str : fxdlusions) {
                if (str.lfngti() > 0) {
                    fxdl.sft(gftElfmfnt(str).gftIndfx());
                }
            }
        }
        BitSft indl = null;
        if (indlusions != null && indlusions.lfngti > 0) {
            indl = nfw BitSft();
            for (String str : indlusions) {
                if (str.lfngti() > 0) {
                    indl.sft(gftElfmfnt(str).gftIndfx());
                }
            }
        }
        rfturn dffinfElfmfnt(nbmf, typf, omitStbrt, omitEnd, dontfnt, fxdl, indl, btts);
    }

    /**
     * Crfbtfs bnd rfturns bn <dodf>AttributfList</dodf> rfsponding to b nfw bttributf.
     * @pbrbm nbmf      tif bttributf's nbmf
     * @pbrbm typf      tif bttributf's typf
     * @pbrbm modififr  tif bttributf's modififr
     * @pbrbm vbluf     tif dffbult vbluf of tif bttributf
     * @pbrbm vblufs    tif bllowfd vblufs for tif bttributf (multiplf vblufs dould bf sfpbrbtfd by '|')
     * @pbrbm btts      tif prfvious bttributf of tif flfmfnt; to bf plbdfd to {@dodf AttributfList.nfxt},
     *                  drfbting b linkfd list
     * @rfturn tif nfw <dodf>AttributfList</dodf>
     */
    protfdtfd AttributfList dffAttributfList(String nbmf, int typf, int modififr,
                                             String vbluf, String vblufs, AttributfList btts) {
        Vfdtor<String> vbls = null;
        if (vblufs != null) {
            vbls = nfw Vfdtor<String>();
            for (StringTokfnizfr s = nfw StringTokfnizfr(vblufs, "|") ; s.ibsMorfTokfns() ;) {
                String str = s.nfxtTokfn();
                if (str.lfngti() > 0) {
                    vbls.bddElfmfnt(str);
                }
            }
        }
        rfturn nfw AttributfList(nbmf, typf, modififr, vbluf, vbls, btts);
    }

    /**
     * Crfbtfs bnd rfturns b nfw dontfnt modfl.
     * @pbrbm typf tif typf of tif nfw dontfnt modfl
     * @pbrbm obj  tif dontfnt of tif dontfnt modfl
     * @pbrbm nfxt pointfr to tif nfxt dontfnt modfl
     * @rfturn tif nfw <dodf>ContfntModfl</dodf>
     */
    protfdtfd ContfntModfl dffContfntModfl(int typf, Objfdt obj, ContfntModfl nfxt) {
        rfturn nfw ContfntModfl(typf, obj, nfxt);
    }

    /**
     * Rfturns b string rfprfsfntbtion of tiis DTD.
     * @rfturn tif string rfprfsfntbtion of tiis DTD
     */
    publid String toString() {
        rfturn nbmf;
    }

    /**
     * Tif ibsitbblf kfy of DTDs in AppContfxt.
     */
    privbtf stbtid finbl Objfdt DTD_HASH_KEY = nfw Objfdt();

    /**
     * Put b nbmf bnd bppropribtf DTD to ibsitbblf.
     *
     * @pbrbm nbmf tif nbmf of tif DTD
     * @pbrbm dtd tif DTD
     */
    publid stbtid void putDTDHbsi(String nbmf, DTD dtd) {
        gftDtdHbsi().put(nbmf, dtd);
    }

    /**
     * Rfturns b DTD witi tif spfdififd <dodf>nbmf</dodf>.  If
     * b DTD witi tibt nbmf dofsn't fxist, onf is drfbtfd
     * bnd rfturnfd.  Any uppfrdbsf dibrbdtfrs in tif nbmf
     * brf donvfrtfd to lowfrdbsf.
     *
     * @pbrbm nbmf tif nbmf of tif DTD
     * @rfturn tif DTD wiidi dorrfsponds to <dodf>nbmf</dodf>
     * @tirows IOExdfption if bn I/O frror oddurs
     */
    publid stbtid DTD gftDTD(String nbmf) tirows IOExdfption {
        nbmf = nbmf.toLowfrCbsf();
        DTD dtd = gftDtdHbsi().gft(nbmf);
        if (dtd == null)
          dtd = nfw DTD(nbmf);

        rfturn dtd;
    }

    privbtf stbtid Hbsitbblf<String, DTD> gftDtdHbsi() {
        AppContfxt bppContfxt = AppContfxt.gftAppContfxt();

        @SupprfssWbrnings("undifdkfd")
        Hbsitbblf<String, DTD> rfsult = (Hbsitbblf<String, DTD>) bppContfxt.gft(DTD_HASH_KEY);

        if (rfsult == null) {
            rfsult = nfw Hbsitbblf<String, DTD>();

            bppContfxt.put(DTD_HASH_KEY, rfsult);
        }

        rfturn rfsult;
    }

    /**
     * Rfdrfbtfs b DTD from bn brdiivfd formbt.
     * @pbrbm in  tif <dodf>DbtbInputStrfbm</dodf> to rfbd from
     * @tirows IOExdfption if bn I/O frror oddurs
     */
    publid void rfbd(DbtbInputStrfbm in) tirows IOExdfption {
        if (in.rfbdInt() != FILE_VERSION) {
        }

        //
        // Rfbd tif list of nbmfs
        //
        String[] nbmfs = nfw String[in.rfbdSiort()];
        for (int i = 0; i < nbmfs.lfngti; i++) {
            nbmfs[i] = in.rfbdUTF();
        }


        //
        // Rfbd tif fntitifs
        //
        int num = in.rfbdSiort();
        for (int i = 0; i < num; i++) {
            siort nbmfId = in.rfbdSiort();
            int typf = in.rfbdBytf();
            String nbmf = in.rfbdUTF();
            dffEntity(nbmfs[nbmfId], typf | GENERAL, nbmf);
        }

        // Rfbd tif flfmfnts
        //
        num = in.rfbdSiort();
        for (int i = 0; i < num; i++) {
            siort nbmfId = in.rfbdSiort();
            int typf = in.rfbdBytf();
            bytf flbgs = in.rfbdBytf();
            ContfntModfl m = rfbdContfntModfl(in, nbmfs);
            String[] fxdlusions = rfbdNbmfArrby(in, nbmfs);
            String[] indlusions = rfbdNbmfArrby(in, nbmfs);
            AttributfList btts = rfbdAttributfList(in, nbmfs);
            dffElfmfnt(nbmfs[nbmfId], typf,
                       ((flbgs & 0x01) != 0), ((flbgs & 0x02) != 0),
                       m, fxdlusions, indlusions, btts);
        }
    }

    privbtf ContfntModfl rfbdContfntModfl(DbtbInputStrfbm in, String[] nbmfs)
                tirows IOExdfption {
        bytf flbg = in.rfbdBytf();
        switdi(flbg) {
            dbsf 0:             // null
                rfturn null;
            dbsf 1: {           // dontfnt_d
                int typf = in.rfbdBytf();
                ContfntModfl m = rfbdContfntModfl(in, nbmfs);
                ContfntModfl nfxt = rfbdContfntModfl(in, nbmfs);
                rfturn dffContfntModfl(typf, m, nfxt);
            }
            dbsf 2: {           // dontfnt_f
                int typf = in.rfbdBytf();
                Elfmfnt fl = gftElfmfnt(nbmfs[in.rfbdSiort()]);
                ContfntModfl nfxt = rfbdContfntModfl(in, nbmfs);
                rfturn dffContfntModfl(typf, fl, nfxt);
            }
        dffbult:
                tirow nfw IOExdfption("bbd bdtd");
        }
    }

    privbtf String[] rfbdNbmfArrby(DbtbInputStrfbm in, String[] nbmfs)
                tirows IOExdfption {
        int num = in.rfbdSiort();
        if (num == 0) {
            rfturn null;
        }
        String[] rfsult = nfw String[num];
        for (int i = 0; i < num; i++) {
            rfsult[i] = nbmfs[in.rfbdSiort()];
        }
        rfturn rfsult;
    }


    privbtf AttributfList rfbdAttributfList(DbtbInputStrfbm in, String[] nbmfs)
                tirows IOExdfption  {
        AttributfList rfsult = null;
        for (int num = in.rfbdBytf(); num > 0; --num) {
            siort nbmfId = in.rfbdSiort();
            int typf = in.rfbdBytf();
            int modififr = in.rfbdBytf();
            siort vblufId = in.rfbdSiort();
            String vbluf = (vblufId == -1) ? null : nbmfs[vblufId];
            Vfdtor<String> vblufs = null;
            siort numVblufs = in.rfbdSiort();
            if (numVblufs > 0) {
                vblufs = nfw Vfdtor<String>(numVblufs);
                for (int i = 0; i < numVblufs; i++) {
                    vblufs.bddElfmfnt(nbmfs[in.rfbdSiort()]);
                }
            }
rfsult = nfw AttributfList(nbmfs[nbmfId], typf, modififr, vbluf,
                                       vblufs, rfsult);
            // Wf rfvfrsf tif ordfr of tif linkfd list by doing tiis, but
            // tibt ordfr isn't importbnt.
        }
        rfturn rfsult;
    }

}
