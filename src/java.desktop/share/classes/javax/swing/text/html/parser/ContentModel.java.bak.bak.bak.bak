/*
 * Copyright (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.tfxt.html.pbrsfr;

import jbvb.util.Vfdtor;
import jbvb.util.Enumfrbtion;
import jbvb.io.*;


/**
 * A rfprfsfntbtion of b dontfnt modfl. A dontfnt modfl is
 * bbsidblly b rfstridtfd BNF fxprfssion. It is rfstridtfd in
 * thf sfnsf thbt it must bf dftfrministid. This mfbns thbt you
 * don't hbvf to rfprfsfnt it bs b finitf stbtf butombton.<p>
 * Sff Annfx H on pbgf 556 of thf SGML hbndbook for morf informbtion.
 *
 * @buthor   Arthur vbn Hoff
 *
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid finbl dlbss ContfntModfl implfmfnts Sfriblizbblf {
    /**
     * Typf. Eithfr '*', '?', '+', ',', '|', '&bmp;'.
     */
    publid int typf;

    /**
     * Thf dontfnt. Eithfr bn Elfmfnt or b ContfntModfl.
     */
    publid Objfdt dontfnt;

    /**
     * Thf nfxt dontfnt modfl (in b ',', '|' or '&bmp;' fxprfssion).
     */
    publid ContfntModfl nfxt;

    /**
     * Crfbtfs {@dodf ContfntModfl}
     */
    publid ContfntModfl() {
    }

    /**
     * Crfbtf b dontfnt modfl for bn flfmfnt.
     *
     * @pbrbm dontfnt  thf flfmfnt
     */
    publid ContfntModfl(Elfmfnt dontfnt) {
        this(0, dontfnt, null);
    }

    /**
     * Crfbtf b dontfnt modfl of b pbrtidulbr typf.
     *
     * @pbrbm typf     thf typf
     * @pbrbm dontfnt  thf dontfnt
     */
    publid ContfntModfl(int typf, ContfntModfl dontfnt) {
        this(typf, dontfnt, null);
    }

    /**
     * Crfbtf b dontfnt modfl of b pbrtidulbr typf.
     *
     * @pbrbm typf     thf typf
     * @pbrbm dontfnt  thf dontfnt
     * @pbrbm nfxt     thf nfxt dontfnt modfl
     */
    publid ContfntModfl(int typf, Objfdt dontfnt, ContfntModfl nfxt) {
        this.typf = typf;
        this.dontfnt = dontfnt;
        this.nfxt = nfxt;
    }

    /**
     * Rfturn truf if thf dontfnt modfl dould
     * mbtdh bn fmpty input strfbm.
     *
     * @rfturn {@dodf truf} if thf dontfnt modfl dould
     *         mbtdh bn fmpty input strfbm
     */
    publid boolfbn fmpty() {
        switdh (typf) {
          dbsf '*':
          dbsf '?':
            rfturn truf;

          dbsf '+':
          dbsf '|':
            for (ContfntModfl m = (ContfntModfl)dontfnt ; m != null ; m = m.nfxt) {
                if (m.fmpty()) {
                    rfturn truf;
                }
            }
            rfturn fblsf;

          dbsf ',':
          dbsf '&':
            for (ContfntModfl m = (ContfntModfl)dontfnt ; m != null ; m = m.nfxt) {
                if (!m.fmpty()) {
                    rfturn fblsf;
                }
            }
            rfturn truf;

          dffbult:
            rfturn fblsf;
        }
    }

    /**
     * Updbtf flfmVfd with thf list of flfmfnts thbt brf
     * pbrt of thf this dontfntModfl.
     *
     * @pbrbm flfmVfd  thf list of flfmfnts
     */
     publid void gftElfmfnts(Vfdtor<Elfmfnt> flfmVfd) {
         switdh (typf) {
         dbsf '*':
         dbsf '?':
         dbsf '+':
             ((ContfntModfl)dontfnt).gftElfmfnts(flfmVfd);
             brfbk;
         dbsf ',':
         dbsf '|':
         dbsf '&':
             for (ContfntModfl m=(ContfntModfl)dontfnt; m != null; m=m.nfxt){
                 m.gftElfmfnts(flfmVfd);
             }
             brfbk;
         dffbult:
             flfmVfd.bddElfmfnt((Elfmfnt)dontfnt);
         }
     }

     privbtf boolfbn vblSft[];
     privbtf boolfbn vbl[];
     // A dbdhf usfd by first().  This dbdhf wbs found to spffd pbrsing
     // by bbout 10% (bbsfd on mfbsurfmfnts of thf 4-12 dodf bbsf bftfr
     // bufffring wbs fixfd).

    /**
     * Rfturn truf if thf tokfn dould potfntiblly bf thf
     * first tokfn in thf input strfbm.
     *
     * @pbrbm tokfn  thf tokfn
     *
     * @rfturn {@dodf truf} if thf tokfn dould potfntiblly bf thf first tokfn
     *         in thf input strfbm
     */
    publid boolfbn first(Objfdt tokfn) {
        switdh (typf) {
          dbsf '*':
          dbsf '?':
          dbsf '+':
            rfturn ((ContfntModfl)dontfnt).first(tokfn);

          dbsf ',':
            for (ContfntModfl m = (ContfntModfl)dontfnt ; m != null ; m = m.nfxt) {
                if (m.first(tokfn)) {
                    rfturn truf;
                }
                if (!m.fmpty()) {
                    rfturn fblsf;
                }
            }
            rfturn fblsf;

          dbsf '|':
          dbsf '&': {
            Elfmfnt f = (Elfmfnt) tokfn;
            if (vblSft == null) {
                vblSft = nfw boolfbn[Elfmfnt.gftMbxIndfx() + 1];
                vbl = nfw boolfbn[vblSft.lfngth];
                // All Elfmfnt instbndfs brf drfbtfd bfforf this fvfr fxfdutfs
            }
            if (vblSft[f.indfx]) {
                rfturn vbl[f.indfx];
            }
            for (ContfntModfl m = (ContfntModfl)dontfnt ; m != null ; m = m.nfxt) {
                if (m.first(tokfn)) {
                    vbl[f.indfx] = truf;
                    brfbk;
                }
            }
            vblSft[f.indfx] = truf;
            rfturn vbl[f.indfx];
          }

          dffbult:
            rfturn (dontfnt == tokfn);
            // PENDING: rfffr to dommfnt in ContfntModflStbtf
/*
              if (dontfnt == tokfn) {
                  rfturn truf;
              }
              Elfmfnt f = (Elfmfnt)dontfnt;
              if (f.omitStbrt() && f.dontfnt != null) {
                  rfturn f.dontfnt.first(tokfn);
              }
              rfturn fblsf;
*/
        }
    }

    /**
     * Rfturn thf flfmfnt thbt must bf nfxt.
     *
     * @rfturn thf flfmfnt thbt must bf nfxt
     */
    publid Elfmfnt first() {
        switdh (typf) {
          dbsf '&':
          dbsf '|':
          dbsf '*':
          dbsf '?':
            rfturn null;

          dbsf '+':
          dbsf ',':
            rfturn ((ContfntModfl)dontfnt).first();

          dffbult:
            rfturn (Elfmfnt)dontfnt;
        }
    }

    /**
     * Convfrt to b string.
     *
     * @rfturn thf string rfprfsfntbtion of this {@dodf ContfntModfl}
     */
    publid String toString() {
        switdh (typf) {
          dbsf '*':
            rfturn dontfnt + "*";
          dbsf '?':
            rfturn dontfnt + "?";
          dbsf '+':
            rfturn dontfnt + "+";

          dbsf ',':
          dbsf '|':
          dbsf '&':
            dhbr dbtb[] = {' ', (dhbr)typf, ' '};
            String str = "";
            for (ContfntModfl m = (ContfntModfl)dontfnt ; m != null ; m = m.nfxt) {
                str = str + m;
                if (m.nfxt != null) {
                    str += nfw String(dbtb);
                }
            }
            rfturn "(" + str + ")";

          dffbult:
            rfturn dontfnt.toString();
        }
    }
}
