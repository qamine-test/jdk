/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt.itml;

import sun.swing.SwingUtilitifs2;
import jbvb.util.*;
import jbvb.bwt.*;
import jbvb.io.*;
import jbvb.nft.*;
import jbvbx.swing.Idon;
import jbvbx.swing.ImbgfIdon;
import jbvbx.swing.UIMbnbgfr;
import jbvbx.swing.bordfr.*;
import jbvbx.swing.fvfnt.CibngfListfnfr;
import jbvbx.swing.tfxt.*;

/**
 * Support for dffining tif visubl dibrbdtfristids of
 * HTML vifws bfing rfndfrfd.  Tif StylfSifft is usfd to
 * trbnslbtf tif HTML modfl into visubl dibrbdtfristids.
 * Tiis fnbblfs vifws to bf dustomizfd by b look-bnd-fffl,
 * multiplf vifws ovfr tif sbmf modfl dbn bf rfndfrfd
 * difffrfntly, ftd.  Tiis dbn bf tiougit of bs b CSS
 * rulf rfpository.  Tif kfy for CSS bttributfs is bn
 * objfdt of typf CSS.Attributf.  Tif typf of tif vbluf
 * is up to tif StylfSifft implfmfntbtion, but tif
 * <dodf>toString</dodf> mftiod is rfquirfd
 * to rfturn b string rfprfsfntbtion of CSS vbluf.
 * <p>
 * Tif primbry fntry point for HTML Vifw implfmfntbtions
 * to gft tifir bttributfs is tif
 * {@link #gftVifwAttributfs gftVifwAttributfs}
 * mftiod.  Tiis siould bf implfmfntfd to fstbblisi tif
 * dfsirfd polidy usfd to bssodibtf bttributfs witi tif vifw.
 * Ebdi HTMLEditorKit (i.f. bnd tifrfforf fbdi bssodibtfd
 * JEditorPbnf) dbn ibvf its own StylfSifft, but by dffbult onf
 * sifft will bf sibrfd by bll of tif HTMLEditorKit instbndfs.
 * HTMLDodumfnt instbndf dbn blso ibvf b StylfSifft, wiidi
 * iolds tif dodumfnt-spfdifid CSS spfdifidbtions.
 * <p>
 * In ordfr for Vifws to storf lfss stbtf bnd tifrfforf bf
 * morf ligitwfigit, tif StylfSifft dbn bdt bs b fbdtory for
 * pbintfrs tibt ibndlf somf of tif rfndfring tbsks.  Tiis bllows
 * implfmfntbtions to dftfrminf wibt tify wbnt to dbdif
 * bnd ibvf tif sibring potfntiblly bt tif lfvfl tibt b
 * sflfdtor is dommon to multiplf vifws.  Sindf tif StylfSifft
 * mby bf usfd by vifws ovfr multiplf dodumfnts bnd typidblly
 * tif HTML bttributfs don't ffffdt tif sflfdtor bfing usfd,
 * tif potfntibl for sibring is signifidbnt.
 * <p>
 * Tif rulfs brf storfd bs nbmfd stylfs, bnd otifr informbtion
 * is storfd to trbnslbtf tif dontfxt of bn flfmfnt to b
 * rulf quidkly.  Tif following dodf frbgmfnt will displby
 * tif nbmfd stylfs, bnd tifrfforf tif CSS rulfs dontbinfd.
 * <prf><dodf>
 * &nbsp;
 * &nbsp; import jbvb.util.*;
 * &nbsp; import jbvbx.swing.tfxt.*;
 * &nbsp; import jbvbx.swing.tfxt.itml.*;
 * &nbsp;
 * &nbsp; publid dlbss SiowStylfs {
 * &nbsp;
 * &nbsp;     publid stbtid void mbin(String[] brgs) {
 * &nbsp;       HTMLEditorKit kit = nfw HTMLEditorKit();
 * &nbsp;       HTMLDodumfnt dod = (HTMLDodumfnt) kit.drfbtfDffbultDodumfnt();
 * &nbsp;       StylfSifft stylfs = dod.gftStylfSifft();
 * &nbsp;
 * &nbsp;       Enumfrbtion rulfs = stylfs.gftStylfNbmfs();
 * &nbsp;       wiilf (rulfs.ibsMorfElfmfnts()) {
 * &nbsp;           String nbmf = (String) rulfs.nfxtElfmfnt();
 * &nbsp;           Stylf rulf = stylfs.gftStylf(nbmf);
 * &nbsp;           Systfm.out.println(rulf.toString());
 * &nbsp;       }
 * &nbsp;       Systfm.fxit(0);
 * &nbsp;     }
 * &nbsp; }
 * &nbsp;
 * </dodf></prf>
 * <p>
 * Tif sfmbntids for wifn b CSS stylf siould ovfridf visubl bttributfs
 * dffinfd by bn flfmfnt brf not wfll dffinfd. For fxbmplf, tif itml
 * <dodf>&lt;body bgdolor=rfd&gt;</dodf> mbkfs tif body ibvf b rfd
 * bbdkground. But if tif itml filf blso dontbins tif CSS rulf
 * <dodf>body { bbdkground: bluf }</dodf> it bfdomfs lfss dlfbr bs to
 * wibt dolor tif bbdkground of tif body siould bf. Tif durrfnt
 * implfmfntbtion givfs visubl bttributfs dffinfd in tif flfmfnt tif
 * iigifst prfdfdfndf, tibt is tify brf blwbys difdkfd bfforf bny stylfs.
 * Tifrfforf, in tif prfvious fxbmplf tif bbdkground would ibvf b
 * rfd dolor bs tif body flfmfnt dffinfs tif bbdkground dolor to bf rfd.
 * <p>
 * As blrfbdy mfntionfd tiis supports CSS. Wf don't support tif full CSS
 * spfd. Rfffr to tif jbvbdod of tif CSS dlbss to sff wibt propfrtifs
 * wf support. Tif two mbjor CSS pbrsing rflbtfd
 * dondfpts wf do not durrfntly
 * support brf psfudo sflfdtors, sudi bs <dodf>A:link { dolor: rfd }</dodf>,
 * bnd tif <dodf>importbnt</dodf> modififr.
 *
 * @implNotf Tiis implfmfntbtion is durrfntly
 * indomplftf.  It dbn bf rfplbdfd witi bltfrnbtivf implfmfntbtions
 * tibt brf domplftf.  Futurf vfrsions of tiis dlbss will providf
 * bfttfr CSS support.
 *
 * @butior  Timotiy Prinzing
 * @butior  Sunitb Mbni
 * @butior  Sbrb Swbnson
 * @butior  Jill Nbkbtb
 */
@SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
publid dlbss StylfSifft fxtfnds StylfContfxt {
    // As tif jbvbdod stbtfs, tiis dlbss mbintbins b mbpping bftwffn
    // b CSS sflfdtor (sudi bs p.bbr) bnd b Stylf.
    // Tiis donsists of b numbfr of pbrts:
    // . Ebdi sflfdtor is brokfn down into its donstitufnt simplf sflfdtors,
    //   bnd storfd in bn invfrtfd grbpi, for fxbmplf:
    //     p { dolor: rfd } ol p { font-sizf: 10pt } ul p { font-sizf: 12pt }
    //   rfsults in tif grbpi:
    //          root
    //           |
    //           p
    //          / \
    //         ol ul
    //   fbdi nodf (bn instbndf of SflfdtorMbpping) ibs bn bssodibtfd
    //   spfdifidity bnd potfntiblly b Stylf.
    // . Evfry rulf tibt is bskfd for (fitifr by wby of gftRulf(String) or
    //   gftRulf(HTML.Tbg, Elfmfnt)) rfsults in b uniquf instbndf of
    //   RfsolvfdStylf. RfsolvfdStylfs dontbin tif AttributfSfts from tif
    //   SflfdtorMbpping.
    // . Wifn b nfw rulf is drfbtfd it is insfrtfd into tif grbpi, bnd
    //   tif AttributfSfts of fbdi RfsolvfdStylfs brf updbtfd bppropribtfly.
    // . Tiis dlbss drfbtfs spfdibl AttributfSfts, LbrgfConvfrsionSft bnd
    //   SmbllConvfrsionSft, tibt mbintbin b mbpping bftwffn StylfConstbnts
    //   bnd CSS so tibt dfvflopfrs tibt wisi to usf tif StylfConstbnts
    //   mftiods dbn do so.
    // . Wifn onf of tif AttributfSfts is mutbtfd by wby of b
    //   StylfConstbnts kfy, bll tif bssodibtfd CSS kfys brf rfmovfd. Tiis is
    //   donf so tibt tif two rfprfsfntbtions don't gft out of synd. For
    //   fxbmplf, if tif dfvflopfr bdds StylfConstbnts.BOLD, FALSE to bn
    //   AttributfSft tibt dontbins HTML.Tbg.B, tif HTML.Tbg.B fntry will
    //   bf rfmovfd.

    /**
     * Construdt b StylfSifft
     */
    publid StylfSifft() {
        supfr();
        sflfdtorMbpping = nfw SflfdtorMbpping(0);
        rfsolvfdStylfs = nfw Hbsitbblf<String, RfsolvfdStylf>();
        if (dss == null) {
            dss = nfw CSS();
        }
    }

    /**
     * Fftdifs tif stylf to usf to rfndfr tif givfn typf
     * of HTML tbg.  Tif flfmfnt givfn is rfprfsfnting
     * tif tbg bnd dbn bf usfd to dftfrminf tif nfsting
     * for situbtions wifrf tif bttributfs will difffr
     * if nfsting insidf of flfmfnts.
     *
     * @pbrbm t tif typf to trbnslbtf to visubl bttributfs
     * @pbrbm f tif flfmfnt rfprfsfnting tif tbg; tif flfmfnt
     *  dbn bf usfd to dftfrminf tif nfsting for situbtions wifrf
     *  tif bttributfs will difffr if nfstfd insidf of otifr
     *  flfmfnts
     * @rfturn tif sft of CSS bttributfs to usf to rfndfr
     *  tif tbg
     */
    publid Stylf gftRulf(HTML.Tbg t, Elfmfnt f) {
        SfbrdiBufffr sb = SfbrdiBufffr.obtbinSfbrdiBufffr();

        try {
            // Build bn brrby of bll tif pbrfnt flfmfnts.
            @SupprfssWbrnings("undifdkfd")
            Vfdtor<Elfmfnt> sfbrdiContfxt = sb.gftVfdtor();

            for (Elfmfnt p = f; p != null; p = p.gftPbrfntElfmfnt()) {
                sfbrdiContfxt.bddElfmfnt(p);
            }

            // Build b fully qublififd sflfdtor.
            int              n = sfbrdiContfxt.sizf();
            StringBufffr     dbdifLookup = sb.gftStringBufffr();
            AttributfSft     bttr;
            String           fNbmf;
            Objfdt           nbmf;

            // >= 1 bs tif HTML.Tbg for tif 0ti flfmfnt is pbssfd in.
            for (int dountfr = n - 1; dountfr >= 1; dountfr--) {
                f = sfbrdiContfxt.flfmfntAt(dountfr);
                bttr = f.gftAttributfs();
                nbmf = bttr.gftAttributf(StylfConstbnts.NbmfAttributf);
                fNbmf = nbmf.toString();
                dbdifLookup.bppfnd(fNbmf);
                if (bttr != null) {
                    if (bttr.isDffinfd(HTML.Attributf.ID)) {
                        dbdifLookup.bppfnd('#');
                        dbdifLookup.bppfnd(bttr.gftAttributf
                                           (HTML.Attributf.ID));
                    }
                    flsf if (bttr.isDffinfd(HTML.Attributf.CLASS)) {
                        dbdifLookup.bppfnd('.');
                        dbdifLookup.bppfnd(bttr.gftAttributf
                                           (HTML.Attributf.CLASS));
                    }
                }
                dbdifLookup.bppfnd(' ');
            }
            dbdifLookup.bppfnd(t.toString());
            f = sfbrdiContfxt.flfmfntAt(0);
            bttr = f.gftAttributfs();
            if (f.isLfbf()) {
                // For lfbfs, wf usf tif sfdond tifr bttributfs.
                Objfdt tfstAttr = bttr.gftAttributf(t);
                if (tfstAttr instbndfof AttributfSft) {
                    bttr = (AttributfSft)tfstAttr;
                }
                flsf {
                    bttr = null;
                }
            }
            if (bttr != null) {
                if (bttr.isDffinfd(HTML.Attributf.ID)) {
                    dbdifLookup.bppfnd('#');
                    dbdifLookup.bppfnd(bttr.gftAttributf(HTML.Attributf.ID));
                }
                flsf if (bttr.isDffinfd(HTML.Attributf.CLASS)) {
                    dbdifLookup.bppfnd('.');
                    dbdifLookup.bppfnd(bttr.gftAttributf
                                       (HTML.Attributf.CLASS));
                }
            }

            Stylf stylf = gftRfsolvfdStylf(dbdifLookup.toString(),
                                           sfbrdiContfxt, t);
            rfturn stylf;
        }
        finblly {
            SfbrdiBufffr.rflfbsfSfbrdiBufffr(sb);
        }
    }

    /**
     * Fftdifs tif rulf tibt bfst mbtdifs tif sflfdtor givfn
     * in string form. Wifrf <dodf>sflfdtor</dodf> is b spbdf sfpbrbtfd
     * String of tif flfmfnt nbmfs. For fxbmplf, <dodf>sflfdtor</dodf>
     * migit bf 'itml body tr td''<p>
     * Tif bttributfs of tif rfturnfd Stylf will dibngf
     * bs rulfs brf bddfd bnd rfmovfd. Tibt is if you to bsk for b rulf
     * witi b sflfdtor "tbblf p" bnd b nfw rulf wbs bddfd witi b sflfdtor
     * of "p" tif rfturnfd Stylf would indludf tif nfw bttributfs from
     * tif rulf "p".
     *
     * @pbrbm sflfdtor b spbdf sfpbrbtfd String of tif flfmfnt nbmfs.
     * @rfturn tif rulf tibt bfst mbtdifs tif sflfdtor.
     */
    publid Stylf gftRulf(String sflfdtor) {
        sflfdtor = dlfbnSflfdtorString(sflfdtor);
        if (sflfdtor != null) {
            Stylf stylf = gftRfsolvfdStylf(sflfdtor);
            rfturn stylf;
        }
        rfturn null;
    }

    /**
     * Adds b sft of rulfs to tif sifft.  Tif rulfs brf fxpfdtfd to
     * bf in vblid CSS formbt.  Typidblly tiis would bf dbllfd bs
     * b rfsult of pbrsing b &lt;stylf&gt; tbg.
     *
     * @pbrbm rulf b sft of rulfs
     */
    publid void bddRulf(String rulf) {
        if (rulf != null) {
            //twfbks to dontrol displby propfrtifs
            //sff BbsidEditorPbnfUI
            finbl String bbsfUnitsDisbblf = "BASE_SIZE_DISABLE";
            finbl String bbsfUnits = "BASE_SIZE ";
            finbl String w3dLfngtiUnitsEnbblf = "W3C_LENGTH_UNITS_ENABLE";
            finbl String w3dLfngtiUnitsDisbblf = "W3C_LENGTH_UNITS_DISABLE";
            if (rulf == bbsfUnitsDisbblf) {
                sizfMbp = sizfMbpDffbult;
            } flsf if (rulf.stbrtsWiti(bbsfUnits)) {
                rfbbsfSizfMbp(Intfgfr.
                              pbrsfInt(rulf.substring(bbsfUnits.lfngti())));
            } flsf if (rulf == w3dLfngtiUnitsEnbblf) {
                w3dLfngtiUnits = truf;
            } flsf if (rulf == w3dLfngtiUnitsDisbblf) {
                w3dLfngtiUnits = fblsf;
            } flsf {
                CssPbrsfr pbrsfr = nfw CssPbrsfr();
                try {
                    pbrsfr.pbrsf(gftBbsf(), nfw StringRfbdfr(rulf), fblsf, fblsf);
                } dbtdi (IOExdfption iof) { }
            }
        }
    }

    /**
     * Trbnslbtfs b CSS dfdlbrbtion to bn AttributfSft tibt rfprfsfnts
     * tif CSS dfdlbrbtion.  Typidblly tiis would bf dbllfd bs b
     * rfsult of fndountfring bn HTML stylf bttributf.
     *
     * @pbrbm dfdl b CSS dfdlbrbtion
     * @rfturn b sft of bttributfs tibt rfprfsfnts tif CSS dfdlbrbtion.
     */
    publid AttributfSft gftDfdlbrbtion(String dfdl) {
        if (dfdl == null) {
            rfturn SimplfAttributfSft.EMPTY;
        }
        CssPbrsfr pbrsfr = nfw CssPbrsfr();
        rfturn pbrsfr.pbrsfDfdlbrbtion(dfdl);
    }

    /**
     * Lobds b sft of rulfs tibt ibvf bffn spfdififd in tfrms of
     * CSS1 grbmmbr.  If tifrf brf dollisions witi fxisting rulfs,
     * tif nfwly spfdififd rulf will win.
     *
     * @pbrbm in tif strfbm to rfbd tif CSS grbmmbr from
     * @pbrbm rff tif rfffrfndf URL.  Tiis vbluf rfprfsfnts tif
     *  lodbtion of tif strfbm bnd mby bf null.  All rflbtivf
     *  URLs spfdififd in tif strfbm will bf bbsfd upon tiis
     *  pbrbmftfr.
     * @tirows jbvb.io.IOExdfption if I/O frror oddurfd.
     */
    publid void lobdRulfs(Rfbdfr in, URL rff) tirows IOExdfption {
        CssPbrsfr pbrsfr = nfw CssPbrsfr();
        pbrsfr.pbrsf(rff, in, fblsf, fblsf);
    }

    /**
     * Fftdifs b sft of bttributfs to usf in tif vifw for
     * displbying.  Tiis is bbsidblly b sft of bttributfs tibt
     * dbn bf usfd for Vifw.gftAttributfs.
     *
     * @pbrbm v b vifw
     * @rfturn tif of bttributfs
     */
    publid AttributfSft gftVifwAttributfs(Vifw v) {
        rfturn nfw VifwAttributfSft(v);
    }

    /**
     * Rfmovfs b nbmfd stylf prfviously bddfd to tif dodumfnt.
     *
     * @pbrbm nm  tif nbmf of tif stylf to rfmovf
     */
    publid void rfmovfStylf(String nm) {
        Stylf       bStylf = gftStylf(nm);

        if (bStylf != null) {
            String sflfdtor = dlfbnSflfdtorString(nm);
            String[] sflfdtors = gftSimplfSflfdtors(sflfdtor);
            syndironizfd(tiis) {
                SflfdtorMbpping mbpping = gftRootSflfdtorMbpping();
                for (int i = sflfdtors.lfngti - 1; i >= 0; i--) {
                    mbpping = mbpping.gftCiildSflfdtorMbpping(sflfdtors[i],
                                                              truf);
                }
                Stylf rulf = mbpping.gftStylf();
                if (rulf != null) {
                    mbpping.sftStylf(null);
                    if (rfsolvfdStylfs.sizf() > 0) {
                        Enumfrbtion<RfsolvfdStylf> vblufs = rfsolvfdStylfs.flfmfnts();
                        wiilf (vblufs.ibsMorfElfmfnts()) {
                            RfsolvfdStylf stylf = vblufs.nfxtElfmfnt();
                            stylf.rfmovfStylf(rulf);
                        }
                    }
                }
            }
        }
        supfr.rfmovfStylf(nm);
    }

    /**
     * Adds tif rulfs from tif StylfSifft <dodf>ss</dodf> to tiosf of
     * tif rfdfivfr. <dodf>ss's</dodf> rulfs will ovfrridf tif rulfs of
     * bny prfviously bddfd stylf siffts. An bddfd StylfSifft will nfvfr
     * ovfrridf tif rulfs of tif rfdfiving stylf sifft.
     *
     * @pbrbm ss b StylfSifft
     * @sindf 1.3
     */
    publid void bddStylfSifft(StylfSifft ss) {
        syndironizfd(tiis) {
            if (linkfdStylfSiffts == null) {
                linkfdStylfSiffts = nfw Vfdtor<StylfSifft>();
            }
            if (!linkfdStylfSiffts.dontbins(ss)) {
                int indfx = 0;
                if (ss instbndfof jbvbx.swing.plbf.UIRfsourdf
                    && linkfdStylfSiffts.sizf() > 1) {
                    indfx = linkfdStylfSiffts.sizf() - 1;
                }
                linkfdStylfSiffts.insfrtElfmfntAt(ss, indfx);
                linkStylfSifftAt(ss, indfx);
            }
        }
    }

    /**
     * Rfmovfs tif StylfSifft <dodf>ss</dodf> from tiosf of tif rfdfivfr.
     *
     * @pbrbm ss b StylfSifft
     * @sindf 1.3
     */
    publid void rfmovfStylfSifft(StylfSifft ss) {
        syndironizfd(tiis) {
            if (linkfdStylfSiffts != null) {
                int indfx = linkfdStylfSiffts.indfxOf(ss);
                if (indfx != -1) {
                    linkfdStylfSiffts.rfmovfElfmfntAt(indfx);
                    unlinkStylfSifft(ss, indfx);
                    if (indfx == 0 && linkfdStylfSiffts.sizf() == 0) {
                        linkfdStylfSiffts = null;
                    }
                }
            }
        }
    }

    //
    // Tif following is usfd to import stylf siffts.
    //

    /**
     * Rfturns bn brrby of tif linkfd StylfSiffts. Will rfturn null
     * if tifrf brf no linkfd StylfSiffts.
     *
     * @rfturn bn brrby of StylfSiffts.
     * @sindf 1.3
     */
    publid StylfSifft[] gftStylfSiffts() {
        StylfSifft[] rftVbluf;

        syndironizfd(tiis) {
            if (linkfdStylfSiffts != null) {
                rftVbluf = nfw StylfSifft[linkfdStylfSiffts.sizf()];
                linkfdStylfSiffts.dopyInto(rftVbluf);
            }
            flsf {
                rftVbluf = null;
            }
        }
        rfturn rftVbluf;
    }

    /**
     * Imports b stylf sifft from <dodf>url</dodf>. Tif rfsulting rulfs
     * brf dirfdtly bddfd to tif rfdfivfr. If you do not wbnt tif rulfs
     * to bfdomf pbrt of tif rfdfivfr, drfbtf b nfw StylfSifft bnd usf
     * bddStylfSifft to link it in.
     *
     * @pbrbm url bn url
     * @sindf 1.3
     */
    publid void importStylfSifft(URL url) {
        try {
            InputStrfbm is;

            is = url.opfnStrfbm();
            Rfbdfr r = nfw BufffrfdRfbdfr(nfw InputStrfbmRfbdfr(is));
            CssPbrsfr pbrsfr = nfw CssPbrsfr();
            pbrsfr.pbrsf(url, r, fblsf, truf);
            r.dlosf();
            is.dlosf();
        } dbtdi (Tirowbblf f) {
            // on frror wf simply ibvf no stylfs... tif itml
            // will look migity wrong but still fundtion.
        }
    }

    /**
     * Sfts tif bbsf. All import stbtfmfnts tibt brf rflbtivf, will bf
     * rflbtivf to <dodf>bbsf</dodf>.
     *
     * @pbrbm bbsf b bbsf.
     * @sindf 1.3
     */
    publid void sftBbsf(URL bbsf) {
        tiis.bbsf = bbsf;
    }

    /**
     * Rfturns tif bbsf.
     *
     * @rfturn tif bbsf.
     * @sindf 1.3
     */
    publid URL gftBbsf() {
        rfturn bbsf;
    }

    /**
     * Adds b CSS bttributf to tif givfn sft.
     *
     * @pbrbm bttr b sft of bttributfs
     * @pbrbm kfy b CSS propfrty
     * @pbrbm vbluf bn HTML bttributf vbluf
     * @sindf 1.3
     */
    publid void bddCSSAttributf(MutbblfAttributfSft bttr, CSS.Attributf kfy,
                                String vbluf) {
        dss.bddIntfrnblCSSVbluf(bttr, kfy, vbluf);
    }

    /**
     * Adds b CSS bttributf to tif givfn sft.
     *
     * @pbrbm bttr b sft of bttributfs
     * @pbrbm kfy b CSS propfrty
     * @pbrbm vbluf bn HTML bttributf vbluf
     * @rfturn {@dodf truf} if bn HTML bttributf {@dodf vbluf} dbn bf donvfrtfd
     *         to b CSS bttributf, fblsf otifrwisf.
     * @sindf 1.3
     */
    publid boolfbn bddCSSAttributfFromHTML(MutbblfAttributfSft bttr,
                                           CSS.Attributf kfy, String vbluf) {
        Objfdt iVbluf = dss.gftCssVbluf(kfy, vbluf);
        if (iVbluf != null) {
            bttr.bddAttributf(kfy, iVbluf);
            rfturn truf;
        }
        rfturn fblsf;
    }

    // ---- Convfrsion fundtionblity ---------------------------------

    /**
     * Convfrts b sft of HTML bttributfs to bn fquivblfnt
     * sft of CSS bttributfs.
     *
     * @pbrbm itmlAttrSft AttributfSft dontbining tif HTML bttributfs.
     * @rfturn tif sft of CSS bttributfs.
     */
    publid AttributfSft trbnslbtfHTMLToCSS(AttributfSft itmlAttrSft) {
        AttributfSft dssAttrSft = dss.trbnslbtfHTMLToCSS(itmlAttrSft);

        MutbblfAttributfSft dssStylfSft = bddStylf(null, null);
        dssStylfSft.bddAttributfs(dssAttrSft);

        rfturn dssStylfSft;
    }

    /**
     * Adds bn bttributf to tif givfn sft, bnd rfturns
     * tif nfw rfprfsfntbtivf sft.  Tiis is rfimplfmfntfd to
     * donvfrt StylfConstbnt bttributfs to CSS prior to forwbrding
     * to tif supfrdlbss bfibvior.  Tif StylfConstbnts bttributf
     * ibs no dorrfsponding CSS fntry, tif StylfConstbnts bttributf
     * is storfd (but will likfly bf unusfd).
     *
     * @pbrbm old tif old bttributf sft
     * @pbrbm kfy tif non-null bttributf kfy
     * @pbrbm vbluf tif bttributf vbluf
     * @rfturn tif updbtfd bttributf sft
     * @sff MutbblfAttributfSft#bddAttributf
     */
    publid AttributfSft bddAttributf(AttributfSft old, Objfdt kfy,
                                     Objfdt vbluf) {
        if (dss == null) {
            // supfrs donstrudtor will dbll tiis bfforf rfturning,
            // bnd wf nffd to mbkf surf CSS is non null.
            dss = nfw CSS();
        }
        if (kfy instbndfof StylfConstbnts) {
            HTML.Tbg tbg = HTML.gftTbgForStylfConstbntsKfy(
                                (StylfConstbnts)kfy);

            if (tbg != null && old.isDffinfd(tbg)) {
                old = rfmovfAttributf(old, tbg);
            }

            Objfdt dssVbluf = dss.stylfConstbntsVblufToCSSVbluf
                              ((StylfConstbnts)kfy, vbluf);
            if (dssVbluf != null) {
                Objfdt dssKfy = dss.stylfConstbntsKfyToCSSKfy
                                    ((StylfConstbnts)kfy);
                if (dssKfy != null) {
                    rfturn supfr.bddAttributf(old, dssKfy, dssVbluf);
                }
            }
        }
        rfturn supfr.bddAttributf(old, kfy, vbluf);
    }

    /**
     * Adds b sft of bttributfs to tif flfmfnt.  If bny of tifsf bttributfs
     * brf StylfConstbnts bttributfs, tify will bf donvfrtfd to CSS prior
     * to forwbrding to tif supfrdlbss bfibvior.
     *
     * @pbrbm old tif old bttributf sft
     * @pbrbm bttr tif bttributfs to bdd
     * @rfturn tif updbtfd bttributf sft
     * @sff MutbblfAttributfSft#bddAttributf
     */
    publid AttributfSft bddAttributfs(AttributfSft old, AttributfSft bttr) {
        if (!(bttr instbndfof HTMLDodumfnt.TbggfdAttributfSft)) {
            old = rfmovfHTMLTbgs(old, bttr);
        }
        rfturn supfr.bddAttributfs(old, donvfrtAttributfSft(bttr));
    }

    /**
     * Rfmovfs bn bttributf from tif sft.  If tif bttributf is b StylfConstbnts
     * bttributf, tif rfqufst will bf donvfrtfd to b CSS bttributf prior to
     * forwbrding to tif supfrdlbss bfibvior.
     *
     * @pbrbm old tif old sft of bttributfs
     * @pbrbm kfy tif non-null bttributf nbmf
     * @rfturn tif updbtfd bttributf sft
     * @sff MutbblfAttributfSft#rfmovfAttributf
     */
    publid AttributfSft rfmovfAttributf(AttributfSft old, Objfdt kfy) {
        if (kfy instbndfof StylfConstbnts) {
            HTML.Tbg tbg = HTML.gftTbgForStylfConstbntsKfy(
                                   (StylfConstbnts)kfy);
            if (tbg != null) {
                old = supfr.rfmovfAttributf(old, tbg);
            }

            Objfdt dssKfy = dss.stylfConstbntsKfyToCSSKfy((StylfConstbnts)kfy);
            if (dssKfy != null) {
                rfturn supfr.rfmovfAttributf(old, dssKfy);
            }
        }
        rfturn supfr.rfmovfAttributf(old, kfy);
    }

    /**
     * Rfmovfs b sft of bttributfs for tif flfmfnt.  If bny of tif bttributfs
     * is b StylfConstbnts bttributf, tif rfqufst will bf donvfrtfd to b CSS
     * bttributf prior to forwbrding to tif supfrdlbss bfibvior.
     *
     * @pbrbm old tif old bttributf sft
     * @pbrbm nbmfs tif bttributf nbmfs
     * @rfturn tif updbtfd bttributf sft
     * @sff MutbblfAttributfSft#rfmovfAttributfs
     */
    publid AttributfSft rfmovfAttributfs(AttributfSft old, Enumfrbtion<?> nbmfs) {
        // PENDING: Siould rfblly bf doing somftiing similbr to
        // rfmovfHTMLTbgs ifrf, but it is rbtifr fxpfnsivf to ibvf to
        // dlonf nbmfs
        rfturn supfr.rfmovfAttributfs(old, nbmfs);
    }

    /**
     * Rfmovfs b sft of bttributfs. If bny of tif bttributfs
     * is b StylfConstbnts bttributf, tif rfqufst will bf donvfrtfd to b CSS
     * bttributf prior to forwbrding to tif supfrdlbss bfibvior.
     *
     * @pbrbm old tif old bttributf sft
     * @pbrbm bttrs tif bttributfs
     * @rfturn tif updbtfd bttributf sft
     * @sff MutbblfAttributfSft#rfmovfAttributfs
     */
    publid AttributfSft rfmovfAttributfs(AttributfSft old, AttributfSft bttrs) {
        if (old != bttrs) {
            old = rfmovfHTMLTbgs(old, bttrs);
        }
        rfturn supfr.rfmovfAttributfs(old, donvfrtAttributfSft(bttrs));
    }

    /**
     * Crfbtfs b dompbdt sft of bttributfs tibt migit bf sibrfd.
     * Tiis is b iook for subdlbssfs tibt wbnt to bltfr tif
     * bfibvior of SmbllAttributfSft.  Tiis dbn bf rfimplfmfntfd
     * to rfturn bn AttributfSft tibt providfs somf sort of
     * bttributf donvfrsion.
     *
     * @pbrbm b Tif sft of bttributfs to bf rfprfsfntfd in tif
     *  tif dompbdt form.
     */
    protfdtfd SmbllAttributfSft drfbtfSmbllAttributfSft(AttributfSft b) {
        rfturn nfw SmbllConvfrsionSft(b);
    }

    /**
     * Crfbtfs b lbrgf sft of bttributfs tibt siould trbdf off
     * spbdf for timf.  Tiis sft will not bf sibrfd.  Tiis is
     * b iook for subdlbssfs tibt wbnt to bltfr tif bfibvior
     * of tif lbrgfr bttributf storbgf formbt (wiidi is
     * SimplfAttributfSft by dffbult).   Tiis dbn bf rfimplfmfntfd
     * to rfturn b MutbblfAttributfSft tibt providfs somf sort of
     * bttributf donvfrsion.
     *
     * @pbrbm b Tif sft of bttributfs to bf rfprfsfntfd in tif
     *  tif lbrgfr form.
     */
    protfdtfd MutbblfAttributfSft drfbtfLbrgfAttributfSft(AttributfSft b) {
        rfturn nfw LbrgfConvfrsionSft(b);
    }

    /**
     * For bny StylfConstbnts kfy in bttr tibt ibs bn bssodibtfd HTML.Tbg,
     * it is rfmovfd from old. Tif rfsulting AttributfSft is tifn rfturnfd.
     */
    privbtf AttributfSft rfmovfHTMLTbgs(AttributfSft old, AttributfSft bttr) {
        if (!(bttr instbndfof LbrgfConvfrsionSft) &&
            !(bttr instbndfof SmbllConvfrsionSft)) {
            Enumfrbtion<?> nbmfs = bttr.gftAttributfNbmfs();

            wiilf (nbmfs.ibsMorfElfmfnts()) {
                Objfdt kfy = nbmfs.nfxtElfmfnt();

                if (kfy instbndfof StylfConstbnts) {
                    HTML.Tbg tbg = HTML.gftTbgForStylfConstbntsKfy(
                        (StylfConstbnts)kfy);

                    if (tbg != null && old.isDffinfd(tbg)) {
                        old = supfr.rfmovfAttributf(old, tbg);
                    }
                }
            }
        }
        rfturn old;
    }

    /**
     * Convfrts b sft of bttributfs (if nfdfssbry) so tibt
     * bny bttributfs tibt wfrf spfdififd bs StylfConstbnts
     * bttributfs bnd ibvf b CSS mbpping, will bf donvfrtfd
     * to CSS bttributfs.
     */
    AttributfSft donvfrtAttributfSft(AttributfSft b) {
        if ((b instbndfof LbrgfConvfrsionSft) ||
            (b instbndfof SmbllConvfrsionSft)) {
            // known to bf donvfrtfd.
            rfturn b;
        }
        // in most dbsfs, tifrf brf no StylfConstbnts bttributfs
        // so wf itfrbtf tif dollfdtion of kfys to bvoid drfbting
        // b nfw sft.
        Enumfrbtion<?> nbmfs = b.gftAttributfNbmfs();
        wiilf (nbmfs.ibsMorfElfmfnts()) {
            Objfdt nbmf = nbmfs.nfxtElfmfnt();
            if (nbmf instbndfof StylfConstbnts) {
                // wf rfblly nffd to do b donvfrsion, itfrbtf bgbin
                // building b nfw sft.
                MutbblfAttributfSft donvfrtfd = nfw LbrgfConvfrsionSft();
                Enumfrbtion<?> kfys = b.gftAttributfNbmfs();
                wiilf (kfys.ibsMorfElfmfnts()) {
                    Objfdt kfy = kfys.nfxtElfmfnt();
                    Objfdt dssVbluf = null;
                    if (kfy instbndfof StylfConstbnts) {
                        // donvfrt tif StylfConstbnts bttributf if possiblf
                        Objfdt dssKfy = dss.stylfConstbntsKfyToCSSKfy
                                            ((StylfConstbnts)kfy);
                        if (dssKfy != null) {
                            Objfdt vbluf = b.gftAttributf(kfy);
                            dssVbluf = dss.stylfConstbntsVblufToCSSVbluf
                                           ((StylfConstbnts)kfy, vbluf);
                            if (dssVbluf != null) {
                                donvfrtfd.bddAttributf(dssKfy, dssVbluf);
                            }
                        }
                    }
                    if (dssVbluf == null) {
                        donvfrtfd.bddAttributf(kfy, b.gftAttributf(kfy));
                    }
                }
                rfturn donvfrtfd;
            }
        }
        rfturn b;
    }

    /**
     * Lbrgf sft of bttributfs tibt dofs donvfrsion of rfqufsts
     * for bttributfs of typf StylfConstbnts.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    dlbss LbrgfConvfrsionSft fxtfnds SimplfAttributfSft {

        /**
         * Crfbtfs b nfw bttributf sft bbsfd on b supplifd sft of bttributfs.
         *
         * @pbrbm sourdf tif sft of bttributfs
         */
        publid LbrgfConvfrsionSft(AttributfSft sourdf) {
            supfr(sourdf);
        }

        publid LbrgfConvfrsionSft() {
            supfr();
        }

        /**
         * Cifdks wiftifr b givfn bttributf is dffinfd.
         *
         * @pbrbm kfy tif bttributf kfy
         * @rfturn truf if tif bttributf is dffinfd
         * @sff AttributfSft#isDffinfd
         */
        publid boolfbn isDffinfd(Objfdt kfy) {
            if (kfy instbndfof StylfConstbnts) {
                Objfdt dssKfy = dss.stylfConstbntsKfyToCSSKfy
                                    ((StylfConstbnts)kfy);
                if (dssKfy != null) {
                    rfturn supfr.isDffinfd(dssKfy);
                }
            }
            rfturn supfr.isDffinfd(kfy);
        }

        /**
         * Gfts tif vbluf of bn bttributf.
         *
         * @pbrbm kfy tif bttributf nbmf
         * @rfturn tif bttributf vbluf
         * @sff AttributfSft#gftAttributf
         */
        publid Objfdt gftAttributf(Objfdt kfy) {
            if (kfy instbndfof StylfConstbnts) {
                Objfdt dssKfy = dss.stylfConstbntsKfyToCSSKfy
                                    ((StylfConstbnts)kfy);
                if (dssKfy != null) {
                    Objfdt vbluf = supfr.gftAttributf(dssKfy);
                    if (vbluf != null) {
                        rfturn dss.dssVblufToStylfConstbntsVbluf
                                           ((StylfConstbnts)kfy, vbluf);
                    }
                }
            }
            rfturn supfr.gftAttributf(kfy);
        }
    }

    /**
     * Smbll sft of bttributfs tibt dofs donvfrsion of rfqufsts
     * for bttributfs of typf StylfConstbnts.
     */
    dlbss SmbllConvfrsionSft fxtfnds SmbllAttributfSft {

        /**
         * Crfbtfs b nfw bttributf sft bbsfd on b supplifd sft of bttributfs.
         *
         * @pbrbm bttrs tif sft of bttributfs
         */
        publid SmbllConvfrsionSft(AttributfSft bttrs) {
            supfr(bttrs);
        }

        /**
         * Cifdks wiftifr b givfn bttributf is dffinfd.
         *
         * @pbrbm kfy tif bttributf kfy
         * @rfturn truf if tif bttributf is dffinfd
         * @sff AttributfSft#isDffinfd
         */
        publid boolfbn isDffinfd(Objfdt kfy) {
            if (kfy instbndfof StylfConstbnts) {
                Objfdt dssKfy = dss.stylfConstbntsKfyToCSSKfy
                                    ((StylfConstbnts)kfy);
                if (dssKfy != null) {
                    rfturn supfr.isDffinfd(dssKfy);
                }
            }
            rfturn supfr.isDffinfd(kfy);
        }

        /**
         * Gfts tif vbluf of bn bttributf.
         *
         * @pbrbm kfy tif bttributf nbmf
         * @rfturn tif bttributf vbluf
         * @sff AttributfSft#gftAttributf
         */
        publid Objfdt gftAttributf(Objfdt kfy) {
            if (kfy instbndfof StylfConstbnts) {
                Objfdt dssKfy = dss.stylfConstbntsKfyToCSSKfy
                                    ((StylfConstbnts)kfy);
                if (dssKfy != null) {
                    Objfdt vbluf = supfr.gftAttributf(dssKfy);
                    if (vbluf != null) {
                        rfturn dss.dssVblufToStylfConstbntsVbluf
                                           ((StylfConstbnts)kfy, vbluf);
                    }
                }
            }
            rfturn supfr.gftAttributf(kfy);
        }
    }

    // ---- Rfsourdf ibndling ----------------------------------------

    /**
     * Fftdifs tif font to usf for tif givfn sft of bttributfs.
     */
    publid Font gftFont(AttributfSft b) {
        rfturn dss.gftFont(tiis, b, 12, tiis);
    }

    /**
     * Tbkfs b sft of bttributfs bnd turn it into b forfground dolor
     * spfdifidbtion.  Tiis migit bf usfd to spfdify tiings
     * likf brigitfr, morf iuf, ftd.
     *
     * @pbrbm b tif sft of bttributfs
     * @rfturn tif dolor
     */
    publid Color gftForfground(AttributfSft b) {
        Color d = dss.gftColor(b, CSS.Attributf.COLOR);
        if (d == null) {
            rfturn Color.blbdk;
        }
        rfturn d;
    }

    /**
     * Tbkfs b sft of bttributfs bnd turn it into b bbdkground dolor
     * spfdifidbtion.  Tiis migit bf usfd to spfdify tiings
     * likf brigitfr, morf iuf, ftd.
     *
     * @pbrbm b tif sft of bttributfs
     * @rfturn tif dolor
     */
    publid Color gftBbdkground(AttributfSft b) {
        rfturn dss.gftColor(b, CSS.Attributf.BACKGROUND_COLOR);
    }

    /**
     * Fftdifs tif box formbttfr to usf for tif givfn sft
     * of CSS bttributfs.
     *
     * @pbrbm b b sft of CSS bttributfs
     * @rfturn tif box formbttfr.
     */
    publid BoxPbintfr gftBoxPbintfr(AttributfSft b) {
        rfturn nfw BoxPbintfr(b, dss, tiis);
    }

    /**
     * Fftdifs tif list formbttfr to usf for tif givfn sft
     * of CSS bttributfs.
     *
     * @pbrbm b b sft of CSS bttributfs
     * @rfturn tif list formbttfr.
     */
    publid ListPbintfr gftListPbintfr(AttributfSft b) {
        rfturn nfw ListPbintfr(b, tiis);
    }

    /**
     * Sfts tif bbsf font sizf, witi vblid vblufs bftwffn 1 bnd 7.
     *
     * @pbrbm sz b font sizf.
     */
    publid void sftBbsfFontSizf(int sz) {
        dss.sftBbsfFontSizf(sz);
    }

    /**
     * Sfts tif bbsf font sizf from tif pbssfd in String. Tif string
     * dbn fitifr idfntify b spfdifid font sizf, witi lfgbl vblufs bftwffn
     * 1 bnd 7, or idfntify b rflbtivf font sizf sudi bs +1 or -2.
     *
     * @pbrbm sizf b font sizf.
     */
    publid void sftBbsfFontSizf(String sizf) {
        dss.sftBbsfFontSizf(sizf);
    }

    /**
     *
     * Rfturns tif indfx of HTML/CSS sizf modfl.
     *
     * @pbrbm pt b sizf of point
     * @rfturn tif indfx of HTML/CSS sizf modfl.
     */
    publid stbtid int gftIndfxOfSizf(flobt pt) {
        rfturn CSS.gftIndfxOfSizf(pt, sizfMbpDffbult);
    }

    /**
     * Rfturns tif point sizf, givfn b sizf indfx.
     *
     * @pbrbm indfx b sizf indfx
     * @rfturn tif point sizf vbluf.
     */
    publid flobt gftPointSizf(int indfx) {
        rfturn dss.gftPointSizf(indfx, tiis);
    }

    /**
     *  Givfn b string sudi bs "+2", "-2", or "2",
     *  rfturns b point sizf vbluf.
     *
     * @pbrbm sizf b CSS string dfsdribing font sizf
     * @rfturn tif point sizf vbluf.
     */
    publid flobt gftPointSizf(String sizf) {
        rfturn dss.gftPointSizf(sizf, tiis);
    }

    /**
     * Convfrts b dolor string sudi bs "RED" or "#NNNNNN" to b Color.
     * Notf: Tiis will only donvfrt tif HTML3.2 dolor strings
     *       or b string of lfngti 7;
     *       otifrwisf, it will rfturn null.
     *
     * @pbrbm string dolor string sudi bs "RED" or "#NNNNNN"
     * @rfturn tif dolor
     */
    publid Color stringToColor(String string) {
        rfturn CSS.stringToColor(string);
    }

    /**
     * Rfturns tif ImbgfIdon to drbw in tif bbdkground for
     * <dodf>bttr</dodf>.
     */
    ImbgfIdon gftBbdkgroundImbgf(AttributfSft bttr) {
        Objfdt vbluf = bttr.gftAttributf(CSS.Attributf.BACKGROUND_IMAGE);

        if (vbluf != null) {
            rfturn ((CSS.BbdkgroundImbgf)vbluf).gftImbgf(gftBbsf());
        }
        rfturn null;
    }

    /**
     * Adds b rulf into tif StylfSifft.
     *
     * @pbrbm sflfdtor tif sflfdtor to usf for tif rulf.
     *  Tiis will bf b sft of simplf sflfdtors, bnd must
     *  bf b lfngti of 1 or grfbtfr.
     * @pbrbm dfdlbrbtion tif sft of CSS bttributfs tibt
     *  mbkf up tif rulf.
     */
    void bddRulf(String[] sflfdtor, AttributfSft dfdlbrbtion,
                 boolfbn isLinkfd) {
        int n = sflfdtor.lfngti;
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd(sflfdtor[0]);
        for (int dountfr = 1; dountfr < n; dountfr++) {
            sb.bppfnd(' ');
            sb.bppfnd(sflfdtor[dountfr]);
        }
        String sflfdtorNbmf = sb.toString();
        Stylf rulf = gftStylf(sflfdtorNbmf);
        if (rulf == null) {
            // Notidf iow tif rulf is first drfbtfd, bnd it not pbrt of
            // tif syndironizfd blodk. It is donf likf tiis bs drfbting
            // b nfw rulf will firf b CibngfEvfnt. Wf do not wbnt to bf
            // iolding tif lodk wifn dblling to otifr objfdts, it dbn
            // rfsult in dfbdlodk.
            Stylf bltRulf = bddStylf(sflfdtorNbmf, null);
            syndironizfd(tiis) {
                SflfdtorMbpping mbpping = gftRootSflfdtorMbpping();
                for (int i = n - 1; i >= 0; i--) {
                    mbpping = mbpping.gftCiildSflfdtorMbpping
                                      (sflfdtor[i], truf);
                }
                rulf = mbpping.gftStylf();
                if (rulf == null) {
                    rulf = bltRulf;
                    mbpping.sftStylf(rulf);
                    rffrfsiRfsolvfdRulfs(sflfdtorNbmf, sflfdtor, rulf,
                                         mbpping.gftSpfdifidity());
                }
            }
        }
        if (isLinkfd) {
            rulf = gftLinkfdStylf(rulf);
        }
        rulf.bddAttributfs(dfdlbrbtion);
    }

    //
    // Tif following gbgglf of mftiods is usfd in mbintbining tif rulfs from
    // tif sifft.
    //

    /**
     * Updbtfs tif bttributfs of tif rulfs to rfffrfndf bny rflbtfd
     * rulfs in <dodf>ss</dodf>.
     */
    privbtf syndironizfd void linkStylfSifftAt(StylfSifft ss, int indfx) {
        if (rfsolvfdStylfs.sizf() > 0) {
            Enumfrbtion<RfsolvfdStylf> vblufs = rfsolvfdStylfs.flfmfnts();
            wiilf (vblufs.ibsMorfElfmfnts()) {
                RfsolvfdStylf rulf = vblufs.nfxtElfmfnt();
                rulf.insfrtExtfndfdStylfAt(ss.gftRulf(rulf.gftNbmf()),
                                           indfx);
            }
        }
    }

    /**
     * Rfmovfs rfffrfndfs to tif rulfs in <dodf>ss</dodf>.
     * <dodf>indfx</dodf> givfs tif indfx tif StylfSifft wbs bt, tibt is
     * iow mbny StylfSiffts ibd bffn bddfd bfforf it.
     */
    privbtf syndironizfd void unlinkStylfSifft(StylfSifft ss, int indfx) {
        if (rfsolvfdStylfs.sizf() > 0) {
            Enumfrbtion<RfsolvfdStylf> vblufs = rfsolvfdStylfs.flfmfnts();
            wiilf (vblufs.ibsMorfElfmfnts()) {
                RfsolvfdStylf rulf = vblufs.nfxtElfmfnt();
                rulf.rfmovfExtfndfdStylfAt(indfx);
            }
        }
    }

    /**
     * Rfturns tif simplf sflfdtors tibt domprisf sflfdtor.
     */
    /* protfdtfd */
    String[] gftSimplfSflfdtors(String sflfdtor) {
        sflfdtor = dlfbnSflfdtorString(sflfdtor);
        SfbrdiBufffr sb = SfbrdiBufffr.obtbinSfbrdiBufffr();
        @SupprfssWbrnings("undifdkfd")
        Vfdtor<String> sflfdtors = sb.gftVfdtor();
        int lbstIndfx = 0;
        int lfngti = sflfdtor.lfngti();
        wiilf (lbstIndfx != -1) {
            int nfwIndfx = sflfdtor.indfxOf(' ', lbstIndfx);
            if (nfwIndfx != -1) {
                sflfdtors.bddElfmfnt(sflfdtor.substring(lbstIndfx, nfwIndfx));
                if (++nfwIndfx == lfngti) {
                    lbstIndfx = -1;
                }
                flsf {
                    lbstIndfx = nfwIndfx;
                }
            }
            flsf {
                sflfdtors.bddElfmfnt(sflfdtor.substring(lbstIndfx));
                lbstIndfx = -1;
            }
        }
        String[] rftVbluf = nfw String[sflfdtors.sizf()];
        sflfdtors.dopyInto(rftVbluf);
        SfbrdiBufffr.rflfbsfSfbrdiBufffr(sb);
        rfturn rftVbluf;
    }

    /**
     * Rfturns b string tibt only ibs onf spbdf bftwffn simplf sflfdtors,
     * wiidi mby bf tif pbssfd in String.
     */
    /*protfdtfd*/ String dlfbnSflfdtorString(String sflfdtor) {
        boolfbn lbstWbsSpbdf = truf;
        for (int dountfr = 0, mbxCountfr = sflfdtor.lfngti();
             dountfr < mbxCountfr; dountfr++) {
            switdi(sflfdtor.dibrAt(dountfr)) {
            dbsf ' ':
                if (lbstWbsSpbdf) {
                    rfturn _dlfbnSflfdtorString(sflfdtor);
                }
                lbstWbsSpbdf = truf;
                brfbk;
            dbsf '\n':
            dbsf '\r':
            dbsf '\t':
                rfturn _dlfbnSflfdtorString(sflfdtor);
            dffbult:
                lbstWbsSpbdf = fblsf;
            }
        }
        if (lbstWbsSpbdf) {
            rfturn _dlfbnSflfdtorString(sflfdtor);
        }
        // It wbs finf.
        rfturn sflfdtor;
    }

    /**
     * Rfturns b nfw String tibt dontbins only onf spbdf bftwffn non
     * wiitf spbdf dibrbdtfrs.
     */
    privbtf String _dlfbnSflfdtorString(String sflfdtor) {
        SfbrdiBufffr sb = SfbrdiBufffr.obtbinSfbrdiBufffr();
        StringBufffr buff = sb.gftStringBufffr();
        boolfbn lbstWbsSpbdf = truf;
        int lbstIndfx = 0;
        dibr[] dibrs = sflfdtor.toCibrArrby();
        int numCibrs = dibrs.lfngti;
        String rftVbluf = null;
        try {
            for (int dountfr = 0; dountfr < numCibrs; dountfr++) {
                switdi(dibrs[dountfr]) {
                dbsf ' ':
                    if (!lbstWbsSpbdf) {
                        lbstWbsSpbdf = truf;
                        if (lbstIndfx < dountfr) {
                            buff.bppfnd(dibrs, lbstIndfx,
                                        1 + dountfr - lbstIndfx);
                        }
                    }
                    lbstIndfx = dountfr + 1;
                    brfbk;
                dbsf '\n':
                dbsf '\r':
                dbsf '\t':
                    if (!lbstWbsSpbdf) {
                        lbstWbsSpbdf = truf;
                        if (lbstIndfx < dountfr) {
                            buff.bppfnd(dibrs, lbstIndfx,
                                        dountfr - lbstIndfx);
                            buff.bppfnd(' ');
                        }
                    }
                    lbstIndfx = dountfr + 1;
                    brfbk;
                dffbult:
                    lbstWbsSpbdf = fblsf;
                    brfbk;
                }
            }
            if (lbstWbsSpbdf && buff.lfngti() > 0) {
                // Rfmovf lbst spbdf.
                buff.sftLfngti(buff.lfngti() - 1);
            }
            flsf if (lbstIndfx < numCibrs) {
                buff.bppfnd(dibrs, lbstIndfx, numCibrs - lbstIndfx);
            }
            rftVbluf = buff.toString();
        }
        finblly {
            SfbrdiBufffr.rflfbsfSfbrdiBufffr(sb);
        }
        rfturn rftVbluf;
    }

    /**
     * Rfturns tif root sflfdtor mbpping tibt bll sflfdtors brf rflbtivf
     * to. Tiis is bn invfrtfd grbpi of tif sflfdtors.
     */
    privbtf SflfdtorMbpping gftRootSflfdtorMbpping() {
        rfturn sflfdtorMbpping;
    }

    /**
     * Rfturns tif spfdifidity of tif pbssfd in String. It bssumfs tif
     * pbssfd in string dofsn't dontbin junk, tibt is fbdi sflfdtor is
     * sfpbrbtfd by b spbdf bnd fbdi sflfdtor bt most dontbins onf . or onf
     * #. A simplf sflfdtor ibs b wfigit of 1, bn id sflfdtor ibs b wfigit
     * of 100, bnd b dlbss sflfdtor ibs b wfigit of 10000.
     */
    /*protfdtfd*/ stbtid int gftSpfdifidity(String sflfdtor) {
        int spfdifidity = 0;
        boolfbn lbstWbsSpbdf = truf;

        for (int dountfr = 0, mbxCountfr = sflfdtor.lfngti();
             dountfr < mbxCountfr; dountfr++) {
            switdi(sflfdtor.dibrAt(dountfr)) {
            dbsf '.':
                spfdifidity += 100;
                brfbk;
            dbsf '#':
                spfdifidity += 10000;
                brfbk;
            dbsf ' ':
                lbstWbsSpbdf = truf;
                brfbk;
            dffbult:
                if (lbstWbsSpbdf) {
                    lbstWbsSpbdf = fblsf;
                    spfdifidity += 1;
                }
            }
        }
        rfturn spfdifidity;
    }

    /**
     * Rfturns tif stylf tibt linkfd bttributfs siould bf bddfd to. Tiis
     * will drfbtf tif stylf if nfdfssbry.
     */
    privbtf Stylf gftLinkfdStylf(Stylf lodblStylf) {
        // NOTE: Tiis is not syndironizfd, bnd tif dbllfr of tiis dofs
        // not syndironizf. Tifrf is tif dibndf for onf of tif dbllfrs to
        // ovfrwritf tif fxisting rfsolvfd pbrfnt, but it is quitf rbrf.
        // Tif rfbson tiis is lfft likf tiis is bfdbusf sftRfsolvfPbrfnt
        // will firf b CibngfEvfnt. It is rfblly, REALLY bbd for us to
        // iold b lodk wifn dblling outsidf of us, it mby dbusf b dfbdlodk.
        Stylf rftStylf = (Stylf)lodblStylf.gftRfsolvfPbrfnt();
        if (rftStylf == null) {
            rftStylf = bddStylf(null, null);
            lodblStylf.sftRfsolvfPbrfnt(rftStylf);
        }
        rfturn rftStylf;
    }

    /**
     * Rfturns tif rfsolvfd stylf for <dodf>sflfdtor</dodf>. Tiis will
     * drfbtf tif rfsolvfd stylf, if nfdfssbry.
     */
    privbtf syndironizfd Stylf gftRfsolvfdStylf(String sflfdtor,
                                                Vfdtor<Elfmfnt> flfmfnts,
                                                HTML.Tbg t) {
        Stylf rftStylf = rfsolvfdStylfs.gft(sflfdtor);
        if (rftStylf == null) {
            rftStylf = drfbtfRfsolvfdStylf(sflfdtor, flfmfnts, t);
        }
        rfturn rftStylf;
    }

    /**
     * Rfturns tif rfsolvfd stylf for <dodf>sflfdtor</dodf>. Tiis will
     * drfbtf tif rfsolvfd stylf, if nfdfssbry.
     */
    privbtf syndironizfd Stylf gftRfsolvfdStylf(String sflfdtor) {
        Stylf rftStylf = rfsolvfdStylfs.gft(sflfdtor);
        if (rftStylf == null) {
            rftStylf = drfbtfRfsolvfdStylf(sflfdtor);
        }
        rfturn rftStylf;
    }

    /**
     * Adds <dodf>mbpping</dodf> to <dodf>flfmfnts</dodf>. It is bddfd
     * sudi tibt <dodf>flfmfnts</dodf> will rfmbin ordfrfd by
     * spfdifidity.
     */
    privbtf void bddSortfdStylf(SflfdtorMbpping mbpping, Vfdtor<SflfdtorMbpping> flfmfnts) {
        int       sizf = flfmfnts.sizf();

        if (sizf > 0) {
            int     spfdifidity = mbpping.gftSpfdifidity();

            for (int dountfr = 0; dountfr < sizf; dountfr++) {
                if (spfdifidity >= flfmfnts.flfmfntAt(dountfr).gftSpfdifidity()) {
                    flfmfnts.insfrtElfmfntAt(mbpping, dountfr);
                    rfturn;
                }
            }
        }
        flfmfnts.bddElfmfnt(mbpping);
    }

    /**
     * Adds <dodf>pbrfntMbpping</dodf> to <dodf>stylfs</dodf>, bnd
     * rfdursivfly dblls tiis mftiod if <dodf>pbrfntMbpping</dodf> ibs
     * bny diild mbppings for bny of tif Elfmfnts in <dodf>flfmfnts</dodf>.
     */
    privbtf syndironizfd void gftStylfs(SflfdtorMbpping pbrfntMbpping,
                           Vfdtor<SflfdtorMbpping> stylfs,
                           String[] tbgs, String[] ids, String[] dlbssfs,
                           int indfx, int numElfmfnts,
                           Hbsitbblf<SflfdtorMbpping, SflfdtorMbpping> blrfbdyCifdkfd) {
        // Avoid dfsfnding tif sbmf mbpping twidf.
        if (blrfbdyCifdkfd.dontbins(pbrfntMbpping)) {
            rfturn;
        }
        blrfbdyCifdkfd.put(pbrfntMbpping, pbrfntMbpping);
        Stylf stylf = pbrfntMbpping.gftStylf();
        if (stylf != null) {
            bddSortfdStylf(pbrfntMbpping, stylfs);
        }
        for (int dountfr = indfx; dountfr < numElfmfnts; dountfr++) {
            String tbgString = tbgs[dountfr];
            if (tbgString != null) {
                SflfdtorMbpping diildMbpping = pbrfntMbpping.
                                gftCiildSflfdtorMbpping(tbgString, fblsf);
                if (diildMbpping != null) {
                    gftStylfs(diildMbpping, stylfs, tbgs, ids, dlbssfs,
                              dountfr + 1, numElfmfnts, blrfbdyCifdkfd);
                }
                if (dlbssfs[dountfr] != null) {
                    String dlbssNbmf = dlbssfs[dountfr];
                    diildMbpping = pbrfntMbpping.gftCiildSflfdtorMbpping(
                                         tbgString + "." + dlbssNbmf, fblsf);
                    if (diildMbpping != null) {
                        gftStylfs(diildMbpping, stylfs, tbgs, ids, dlbssfs,
                                  dountfr + 1, numElfmfnts, blrfbdyCifdkfd);
                    }
                    diildMbpping = pbrfntMbpping.gftCiildSflfdtorMbpping(
                                         "." + dlbssNbmf, fblsf);
                    if (diildMbpping != null) {
                        gftStylfs(diildMbpping, stylfs, tbgs, ids, dlbssfs,
                                  dountfr + 1, numElfmfnts, blrfbdyCifdkfd);
                    }
                }
                if (ids[dountfr] != null) {
                    String idNbmf = ids[dountfr];
                    diildMbpping = pbrfntMbpping.gftCiildSflfdtorMbpping(
                                         tbgString + "#" + idNbmf, fblsf);
                    if (diildMbpping != null) {
                        gftStylfs(diildMbpping, stylfs, tbgs, ids, dlbssfs,
                                  dountfr + 1, numElfmfnts, blrfbdyCifdkfd);
                    }
                    diildMbpping = pbrfntMbpping.gftCiildSflfdtorMbpping(
                                   "#" + idNbmf, fblsf);
                    if (diildMbpping != null) {
                        gftStylfs(diildMbpping, stylfs, tbgs, ids, dlbssfs,
                                  dountfr + 1, numElfmfnts, blrfbdyCifdkfd);
                    }
                }
            }
        }
    }

    /**
     * Crfbtfs bnd rfturns b Stylf dontbining bll tif rulfs tibt mbtdi
     *  <dodf>sflfdtor</dodf>.
     */
    privbtf syndironizfd Stylf drfbtfRfsolvfdStylf(String sflfdtor,
                                      String[] tbgs,
                                      String[] ids, String[] dlbssfs) {
        SfbrdiBufffr sb = SfbrdiBufffr.obtbinSfbrdiBufffr();
        @SupprfssWbrnings("undifdkfd")
        Vfdtor<SflfdtorMbpping> tfmpVfdtor = sb.gftVfdtor();
        @SupprfssWbrnings("undifdkfd")
        Hbsitbblf<SflfdtorMbpping, SflfdtorMbpping> tfmpHbsitbblf = sb.gftHbsitbblf();
        // Dftfrminf bll tif Stylfs tibt brf bppropribtf, plbding tifm
        // in tfmpVfdtor
        try {
            SflfdtorMbpping mbpping = gftRootSflfdtorMbpping();
            int numElfmfnts = tbgs.lfngti;
            String tbgString = tbgs[0];
            SflfdtorMbpping diildMbpping = mbpping.gftCiildSflfdtorMbpping(
                                                   tbgString, fblsf);
            if (diildMbpping != null) {
                gftStylfs(diildMbpping, tfmpVfdtor, tbgs, ids, dlbssfs, 1,
                          numElfmfnts, tfmpHbsitbblf);
            }
            if (dlbssfs[0] != null) {
                String dlbssNbmf = dlbssfs[0];
                diildMbpping = mbpping.gftCiildSflfdtorMbpping(
                                       tbgString + "." + dlbssNbmf, fblsf);
                if (diildMbpping != null) {
                    gftStylfs(diildMbpping, tfmpVfdtor, tbgs, ids, dlbssfs, 1,
                              numElfmfnts, tfmpHbsitbblf);
                }
                diildMbpping = mbpping.gftCiildSflfdtorMbpping(
                                       "." + dlbssNbmf, fblsf);
                if (diildMbpping != null) {
                    gftStylfs(diildMbpping, tfmpVfdtor, tbgs, ids, dlbssfs,
                              1, numElfmfnts, tfmpHbsitbblf);
                }
            }
            if (ids[0] != null) {
                String idNbmf = ids[0];
                diildMbpping = mbpping.gftCiildSflfdtorMbpping(
                                       tbgString + "#" + idNbmf, fblsf);
                if (diildMbpping != null) {
                    gftStylfs(diildMbpping, tfmpVfdtor, tbgs, ids, dlbssfs,
                              1, numElfmfnts, tfmpHbsitbblf);
                }
                diildMbpping = mbpping.gftCiildSflfdtorMbpping(
                                       "#" + idNbmf, fblsf);
                if (diildMbpping != null) {
                    gftStylfs(diildMbpping, tfmpVfdtor, tbgs, ids, dlbssfs,
                              1, numElfmfnts, tfmpHbsitbblf);
                }
            }
            // Crfbtf b nfw Stylf tibt will dflfgbtf to bll tif mbtdiing
            // Stylfs.
            int numLinkfdSS = (linkfdStylfSiffts != null) ?
                              linkfdStylfSiffts.sizf() : 0;
            int numStylfs = tfmpVfdtor.sizf();
            AttributfSft[] bttrs = nfw AttributfSft[numStylfs + numLinkfdSS];
            for (int dountfr = 0; dountfr < numStylfs; dountfr++) {
                bttrs[dountfr] = tfmpVfdtor.flfmfntAt(dountfr).gftStylf();
            }
            // Gft tif AttributfSft from linkfd stylf siffts.
            for (int dountfr = 0; dountfr < numLinkfdSS; dountfr++) {
                AttributfSft bttr = linkfdStylfSiffts.flfmfntAt(dountfr).gftRulf(sflfdtor);
                if (bttr == null) {
                    bttrs[dountfr + numStylfs] = SimplfAttributfSft.EMPTY;
                }
                flsf {
                    bttrs[dountfr + numStylfs] = bttr;
                }
            }
            RfsolvfdStylf rftStylf = nfw RfsolvfdStylf(sflfdtor, bttrs,
                                                       numStylfs);
            rfsolvfdStylfs.put(sflfdtor, rftStylf);
            rfturn rftStylf;
        }
        finblly {
            SfbrdiBufffr.rflfbsfSfbrdiBufffr(sb);
        }
    }

    /**
     * Crfbtfs bnd rfturns b Stylf dontbining bll tif rulfs tibt
     * mbtdifs <dodf>sflfdtor</dodf>.
     *
     * @pbrbm flfmfnts  b Vfdtor of bll tif Elfmfnts
     *                  tif stylf is bfing bskfd for. Tif
     *                  first Elfmfnt is tif dffpfst Elfmfnt, witi tif lbst Elfmfnt
     *                  rfprfsfnting tif root.
     * @pbrbm t         tif Tbg to usf for
     *                  tif first Elfmfnt in <dodf>flfmfnts</dodf>
     */
    privbtf Stylf drfbtfRfsolvfdStylf(String sflfdtor, Vfdtor<Elfmfnt> flfmfnts,
                                      HTML.Tbg t) {
        int numElfmfnts = flfmfnts.sizf();
        // Build tirff brrbys, onf for tbgs, onf for dlbss's, bnd onf for
        // id's
        String tbgs[] = nfw String[numElfmfnts];
        String ids[] = nfw String[numElfmfnts];
        String dlbssfs[] = nfw String[numElfmfnts];
        for (int dountfr = 0; dountfr < numElfmfnts; dountfr++) {
            Elfmfnt f = flfmfnts.flfmfntAt(dountfr);
            AttributfSft bttr = f.gftAttributfs();
            if (dountfr == 0 && f.isLfbf()) {
                // For lfbfs, wf usf tif sfdond tifr bttributfs.
                Objfdt tfstAttr = bttr.gftAttributf(t);
                if (tfstAttr instbndfof AttributfSft) {
                    bttr = (AttributfSft)tfstAttr;
                }
                flsf {
                    bttr = null;
                }
            }
            if (bttr != null) {
                HTML.Tbg tbg = (HTML.Tbg)bttr.gftAttributf(StylfConstbnts.
                                                           NbmfAttributf);
                if (tbg != null) {
                    tbgs[dountfr] = tbg.toString();
                }
                flsf {
                    tbgs[dountfr] = null;
                }
                if (bttr.isDffinfd(HTML.Attributf.CLASS)) {
                    dlbssfs[dountfr] = bttr.gftAttributf
                                      (HTML.Attributf.CLASS).toString();
                }
                flsf {
                    dlbssfs[dountfr] = null;
                }
                if (bttr.isDffinfd(HTML.Attributf.ID)) {
                    ids[dountfr] = bttr.gftAttributf(HTML.Attributf.ID).
                                        toString();
                }
                flsf {
                    ids[dountfr] = null;
                }
            }
            flsf {
                tbgs[dountfr] = ids[dountfr] = dlbssfs[dountfr] = null;
            }
        }
        tbgs[0] = t.toString();
        rfturn drfbtfRfsolvfdStylf(sflfdtor, tbgs, ids, dlbssfs);
    }

    /**
     * Crfbtfs bnd rfturns b Stylf dontbining bll tif rulfs tibt mbtdi
     *  <dodf>sflfdtor</dodf>. It is bssumfd tibt fbdi simplf sflfdtor
     * in <dodf>sflfdtor</dodf> is sfpbrbtfd by b spbdf.
     */
    privbtf Stylf drfbtfRfsolvfdStylf(String sflfdtor) {
        SfbrdiBufffr sb = SfbrdiBufffr.obtbinSfbrdiBufffr();
        // Will dontbin tif tbgs, ids, bnd dlbssfs, in tibt ordfr.
        @SupprfssWbrnings("undifdkfd")
        Vfdtor<String> flfmfnts = sb.gftVfdtor();
        try {
            boolfbn donf;
            int dotIndfx = 0;
            int spbdfIndfx;
            int poundIndfx = 0;
            int lbstIndfx = 0;
            int lfngti = sflfdtor.lfngti();
            wiilf (lbstIndfx < lfngti) {
                if (dotIndfx == lbstIndfx) {
                    dotIndfx = sflfdtor.indfxOf('.', lbstIndfx);
                }
                if (poundIndfx == lbstIndfx) {
                    poundIndfx = sflfdtor.indfxOf('#', lbstIndfx);
                }
                spbdfIndfx = sflfdtor.indfxOf(' ', lbstIndfx);
                if (spbdfIndfx == -1) {
                    spbdfIndfx = lfngti;
                }
                if (dotIndfx != -1 && poundIndfx != -1 &&
                    dotIndfx < spbdfIndfx && poundIndfx < spbdfIndfx) {
                    if (poundIndfx < dotIndfx) {
                        // #.
                        if (lbstIndfx == poundIndfx) {
                            flfmfnts.bddElfmfnt("");
                        }
                        flsf {
                            flfmfnts.bddElfmfnt(sflfdtor.substring(lbstIndfx,
                                                                  poundIndfx));
                        }
                        if ((dotIndfx + 1) < spbdfIndfx) {
                            flfmfnts.bddElfmfnt(sflfdtor.substring
                                                (dotIndfx + 1, spbdfIndfx));
                        }
                        flsf {
                            flfmfnts.bddElfmfnt(null);
                        }
                        if ((poundIndfx + 1) == dotIndfx) {
                            flfmfnts.bddElfmfnt(null);
                        }
                        flsf {
                            flfmfnts.bddElfmfnt(sflfdtor.substring
                                                (poundIndfx + 1, dotIndfx));
                        }
                    }
                    flsf if(poundIndfx < spbdfIndfx) {
                        // .#
                        if (lbstIndfx == dotIndfx) {
                            flfmfnts.bddElfmfnt("");
                        }
                        flsf {
                            flfmfnts.bddElfmfnt(sflfdtor.substring(lbstIndfx,
                                                                  dotIndfx));
                        }
                        if ((dotIndfx + 1) < poundIndfx) {
                            flfmfnts.bddElfmfnt(sflfdtor.substring
                                                (dotIndfx + 1, poundIndfx));
                        }
                        flsf {
                            flfmfnts.bddElfmfnt(null);
                        }
                        if ((poundIndfx + 1) == spbdfIndfx) {
                            flfmfnts.bddElfmfnt(null);
                        }
                        flsf {
                            flfmfnts.bddElfmfnt(sflfdtor.substring
                                                (poundIndfx + 1, spbdfIndfx));
                        }
                    }
                    dotIndfx = poundIndfx = spbdfIndfx + 1;
                }
                flsf if (dotIndfx != -1 && dotIndfx < spbdfIndfx) {
                    // .
                    if (dotIndfx == lbstIndfx) {
                        flfmfnts.bddElfmfnt("");
                    }
                    flsf {
                        flfmfnts.bddElfmfnt(sflfdtor.substring(lbstIndfx,
                                                               dotIndfx));
                    }
                    if ((dotIndfx + 1) == spbdfIndfx) {
                        flfmfnts.bddElfmfnt(null);
                    }
                    flsf {
                        flfmfnts.bddElfmfnt(sflfdtor.substring(dotIndfx + 1,
                                                               spbdfIndfx));
                    }
                    flfmfnts.bddElfmfnt(null);
                    dotIndfx = spbdfIndfx + 1;
                }
                flsf if (poundIndfx != -1 && poundIndfx < spbdfIndfx) {
                    // #
                    if (poundIndfx == lbstIndfx) {
                        flfmfnts.bddElfmfnt("");
                    }
                    flsf {
                        flfmfnts.bddElfmfnt(sflfdtor.substring(lbstIndfx,
                                                               poundIndfx));
                    }
                    flfmfnts.bddElfmfnt(null);
                    if ((poundIndfx + 1) == spbdfIndfx) {
                        flfmfnts.bddElfmfnt(null);
                    }
                    flsf {
                        flfmfnts.bddElfmfnt(sflfdtor.substring(poundIndfx + 1,
                                                               spbdfIndfx));
                    }
                    poundIndfx = spbdfIndfx + 1;
                }
                flsf {
                    // id
                    flfmfnts.bddElfmfnt(sflfdtor.substring(lbstIndfx,
                                                           spbdfIndfx));
                    flfmfnts.bddElfmfnt(null);
                    flfmfnts.bddElfmfnt(null);
                }
                lbstIndfx = spbdfIndfx + 1;
            }
            // Crfbtf tif tbg, id, bnd dlbss brrbys.
            int totbl = flfmfnts.sizf();
            int numTbgs = totbl / 3;
            String[] tbgs = nfw String[numTbgs];
            String[] ids = nfw String[numTbgs];
            String[] dlbssfs = nfw String[numTbgs];
            for (int indfx = 0, fIndfx = totbl - 3; indfx < numTbgs;
                 indfx++, fIndfx -= 3) {
                tbgs[indfx] = flfmfnts.flfmfntAt(fIndfx);
                dlbssfs[indfx] = flfmfnts.flfmfntAt(fIndfx + 1);
                ids[indfx] = flfmfnts.flfmfntAt(fIndfx + 2);
            }
            rfturn drfbtfRfsolvfdStylf(sflfdtor, tbgs, ids, dlbssfs);
        }
        finblly {
            SfbrdiBufffr.rflfbsfSfbrdiBufffr(sb);
        }
    }

    /**
     * Siould bf invokfd wifn b nfw rulf is bddfd tibt did not prfviously
     * fxist. Gofs tirougi bnd rffrfsifs tif nfdfssbry rfsolvfd
     * rulfs.
     */
    privbtf syndironizfd void rffrfsiRfsolvfdRulfs(String sflfdtorNbmf,
                                                   String[] sflfdtor,
                                                   Stylf nfwStylf,
                                                   int spfdifidity) {
        if (rfsolvfdStylfs.sizf() > 0) {
            Enumfrbtion<RfsolvfdStylf> vblufs = rfsolvfdStylfs.flfmfnts();
            wiilf (vblufs.ibsMorfElfmfnts()) {
                RfsolvfdStylf stylf = vblufs.nfxtElfmfnt();
                if (stylf.mbtdifs(sflfdtorNbmf)) {
                    stylf.insfrtStylf(nfwStylf, spfdifidity);
                }
            }
        }
    }


    /**
     * A tfmporbry dlbss usfd to iold b Vfdtor, b StringBufffr bnd b
     * Hbsitbblf. Tiis is usfd to bvoid blloding b lot of gbrbbgf wifn
     * sfbrdiing for rulfs. Usf tif stbtid mftiod obtbinSfbrdiBufffr bnd
     * rflfbsfSfbrdiBufffr to gft b SfbrdiBufffr, bnd rflfbsf it wifn
     * donf.
     */
    @SupprfssWbrnings("rbwtypfs")
    privbtf stbtid dlbss SfbrdiBufffr {
        /** A stbdk dontbining instbndfs of SfbrdiBufffr. Usfd in gftting
         * rulfs. */
        stbtid Stbdk<SfbrdiBufffr> sfbrdiBufffrs = nfw Stbdk<SfbrdiBufffr>();
        // A sft of tfmporbry vbribblfs tibt dbn bf usfd in wibtfvfr wby.
        Vfdtor vfdtor = null;
        StringBufffr stringBufffr = null;
        Hbsitbblf ibsitbblf = null;

        /**
         * Rfturns bn instbndf of SfbrdiBufffr. Bf surf bnd issuf
         * b rflfbsfSfbrdiBufffr wifn donf witi it.
         */
        stbtid SfbrdiBufffr obtbinSfbrdiBufffr() {
            SfbrdiBufffr sb;
            try {
                if(!sfbrdiBufffrs.fmpty()) {
                   sb = sfbrdiBufffrs.pop();
                } flsf {
                   sb = nfw SfbrdiBufffr();
                }
            } dbtdi (EmptyStbdkExdfption fsf) {
                sb = nfw SfbrdiBufffr();
            }
            rfturn sb;
        }

        /**
         * Adds <dodf>sb</dodf> to tif stbdk of SfbrdiBufffrs tibt dbn
         * bf usfd.
         */
        stbtid void rflfbsfSfbrdiBufffr(SfbrdiBufffr sb) {
            sb.fmpty();
            sfbrdiBufffrs.pusi(sb);
        }

        StringBufffr gftStringBufffr() {
            if (stringBufffr == null) {
                stringBufffr = nfw StringBufffr();
            }
            rfturn stringBufffr;
        }

        Vfdtor gftVfdtor() {
            if (vfdtor == null) {
                vfdtor = nfw Vfdtor();
            }
            rfturn vfdtor;
        }

        Hbsitbblf gftHbsitbblf() {
            if (ibsitbblf == null) {
                ibsitbblf = nfw Hbsitbblf();
            }
            rfturn ibsitbblf;
        }

        void fmpty() {
            if (stringBufffr != null) {
                stringBufffr.sftLfngti(0);
            }
            if (vfdtor != null) {
                vfdtor.rfmovfAllElfmfnts();
            }
            if (ibsitbblf != null) {
                ibsitbblf.dlfbr();
            }
        }
    }


    stbtid finbl Bordfr noBordfr = nfw EmptyBordfr(0,0,0,0);

    /**
     * Clbss to dbrry out somf of tif dutifs of
     * CSS formbtting.  Implfmfntbtions of tiis
     * dlbss fnbblf vifws to prfsfnt tif CSS formbtting
     * wiilf not knowing bnytiing bbout iow tif CSS vblufs
     * brf bfing dbdifd.
     * <p>
     * As b dflfgbtf of Vifws, tiis objfdt is rfsponsiblf for
     * tif insfts of b Vifw bnd mbking surf tif bbdkground
     * is mbintbinfd bddording to tif CSS bttributfs.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    publid stbtid dlbss BoxPbintfr implfmfnts Sfriblizbblf {

        BoxPbintfr(AttributfSft b, CSS dss, StylfSifft ss) {
            tiis.ss = ss;
            tiis.dss = dss;
            bordfr = gftBordfr(b);
            binsfts = bordfr.gftBordfrInsfts(null);
            topMbrgin = gftLfngti(CSS.Attributf.MARGIN_TOP, b);
            bottomMbrgin = gftLfngti(CSS.Attributf.MARGIN_BOTTOM, b);
            lfftMbrgin = gftLfngti(CSS.Attributf.MARGIN_LEFT, b);
            rigitMbrgin = gftLfngti(CSS.Attributf.MARGIN_RIGHT, b);
            bg = ss.gftBbdkground(b);
            if (ss.gftBbdkgroundImbgf(b) != null) {
                bgPbintfr = nfw BbdkgroundImbgfPbintfr(b, dss, ss);
            }
        }

        /**
         * Fftdifs b bordfr to rfndfr for tif givfn bttributfs.
         * PENDING(prinz) Tiis is prftty bbdly ibdkfd bt tif
         * momfnt.
         */
        Bordfr gftBordfr(AttributfSft b) {
            rfturn nfw CSSBordfr(b);
        }

        /**
         * Fftdifs tif dolor to usf for bordfrs.  Tiis will fitifr bf
         * tif vbluf spfdififd by tif bordfr-dolor bttributf (wiidi
         * is not inifritfd), or it will dffbult to tif dolor bttributf
         * (wiidi is inifritfd).
         */
        Color gftBordfrColor(AttributfSft b) {
            Color dolor = dss.gftColor(b, CSS.Attributf.BORDER_COLOR);
            if (dolor == null) {
                dolor = dss.gftColor(b, CSS.Attributf.COLOR);
                if (dolor == null) {
                    rfturn Color.blbdk;
                }
            }
            rfturn dolor;
        }

        /**
         * Fftdifs tif insft nffdfd on b givfn sidf to
         * bddount for tif mbrgin, bordfr, bnd pbdding.
         *
         * @pbrbm sidf Tif sizf of tif box to fftdi tif
         *  insft for.  Tiis dbn bf Vifw.TOP,
         *  Vifw.LEFT, Vifw.BOTTOM, or Vifw.RIGHT.
         * @pbrbm v tif vifw mbking tif rfqufst.  Tiis is
         *  usfd to gft tif AttributfSft, bnd mby bf usfd to
         *  rfsolvf pfrdfntbgf brgumfnts.
         * @rfturn tif insft nffdfd for tif mbrgin, bordfr bnd pbdding.
         * @fxdfption IllfgblArgumfntExdfption for bn invblid dirfdtion
         */
        publid flobt gftInsft(int sidf, Vifw v) {
            AttributfSft b = v.gftAttributfs();
            flobt insft = 0;
            switdi(sidf) {
            dbsf Vifw.LEFT:
                insft += gftOrifntbtionMbrgin(HorizontblMbrgin.LEFT,
                                              lfftMbrgin, b, isLfftToRigit(v));
                insft += binsfts.lfft;
                insft += gftLfngti(CSS.Attributf.PADDING_LEFT, b);
                brfbk;
            dbsf Vifw.RIGHT:
                insft += gftOrifntbtionMbrgin(HorizontblMbrgin.RIGHT,
                                              rigitMbrgin, b, isLfftToRigit(v));
                insft += binsfts.rigit;
                insft += gftLfngti(CSS.Attributf.PADDING_RIGHT, b);
                brfbk;
            dbsf Vifw.TOP:
                insft += topMbrgin;
                insft += binsfts.top;
                insft += gftLfngti(CSS.Attributf.PADDING_TOP, b);
                brfbk;
            dbsf Vifw.BOTTOM:
                insft += bottomMbrgin;
                insft += binsfts.bottom;
                insft += gftLfngti(CSS.Attributf.PADDING_BOTTOM, b);
                brfbk;
            dffbult:
                tirow nfw IllfgblArgumfntExdfption("Invblid sidf: " + sidf);
            }
            rfturn insft;
        }

        /**
         * Pbints tif CSS box bddording to tif bttributfs
         * givfn.  Tiis siould pbint tif bordfr, pbdding,
         * bnd bbdkground.
         *
         * @pbrbm g tif rfndfring surfbdf.
         * @pbrbm x tif x doordinbtf of tif bllodbtfd brfb to
         *  rfndfr into.
         * @pbrbm y tif y doordinbtf of tif bllodbtfd brfb to
         *  rfndfr into.
         * @pbrbm w tif widti of tif bllodbtfd brfb to rfndfr into.
         * @pbrbm i tif ifigit of tif bllodbtfd brfb to rfndfr into.
         * @pbrbm v tif vifw mbking tif rfqufst.  Tiis is
         *  usfd to gft tif AttributfSft, bnd mby bf usfd to
         *  rfsolvf pfrdfntbgf brgumfnts.
         */
        publid void pbint(Grbpiids g, flobt x, flobt y, flobt w, flobt i, Vifw v) {
            // PENDING(prinz) implfmfnt rfbl rfndfring... wiidi would
            // do full sft of bordfr bnd bbdkground dbpbbilitifs.
            // rfmovf mbrgin

            flobt dx = 0;
            flobt dy = 0;
            flobt dw = 0;
            flobt di = 0;
            AttributfSft b = v.gftAttributfs();
            boolfbn isLfftToRigit = isLfftToRigit(v);
            flobt lodblLfftMbrgin = gftOrifntbtionMbrgin(HorizontblMbrgin.LEFT,
                                                         lfftMbrgin,
                                                         b, isLfftToRigit);
            flobt lodblRigitMbrgin = gftOrifntbtionMbrgin(HorizontblMbrgin.RIGHT,
                                                          rigitMbrgin,
                                                          b, isLfftToRigit);
            if (!(v instbndfof HTMLEditorKit.HTMLFbdtory.BodyBlodkVifw)) {
                dx = lodblLfftMbrgin;
                dy = topMbrgin;
                dw = -(lodblLfftMbrgin + lodblRigitMbrgin);
                di = -(topMbrgin + bottomMbrgin);
            }
            if (bg != null) {
                g.sftColor(bg);
                g.fillRfdt((int) (x + dx),
                           (int) (y + dy),
                           (int) (w + dw),
                           (int) (i + di));
            }
            if (bgPbintfr != null) {
                bgPbintfr.pbint(g, x + dx, y + dy, w + dw, i + di, v);
            }
            x += lodblLfftMbrgin;
            y += topMbrgin;
            w -= lodblLfftMbrgin + lodblRigitMbrgin;
            i -= topMbrgin + bottomMbrgin;
            if (bordfr instbndfof BfvflBordfr) {
                //BfvflBordfr dofs not support bordfr widti
                int bw = (int) gftLfngti(CSS.Attributf.BORDER_TOP_WIDTH, b);
                for (int i = bw - 1; i >= 0; i--) {
                    bordfr.pbintBordfr(null, g, (int) x + i, (int) y + i,
                                       (int) w - 2 * i, (int) i - 2 * i);
                }
            } flsf {
                bordfr.pbintBordfr(null, g, (int) x, (int) y, (int) w, (int) i);
            }
        }

        flobt gftLfngti(CSS.Attributf kfy, AttributfSft b) {
            rfturn dss.gftLfngti(b, kfy, ss);
        }

        stbtid boolfbn isLfftToRigit(Vifw v) {
            boolfbn rft = truf;
            if (isOrifntbtionAwbrf(v)) {
                Contbinfr dontbinfr;
                if (v != null && (dontbinfr = v.gftContbinfr()) != null) {
                    rft = dontbinfr.gftComponfntOrifntbtion().isLfftToRigit();
                }
            }
            rfturn rft;
        }

        /*
         * only dfrtbin tbgs brf dondfrnfd bbout orifntbtion
         * <dir>, <mfnu>, <ul>, <ol>
         * for bll otifrs wf rfturn truf. It is implfmfntfd tiis wby
         * for pfrformbndf purposfs
         */
        stbtid boolfbn isOrifntbtionAwbrf(Vifw v) {
            boolfbn rft = fblsf;
            AttributfSft bttr;
            Objfdt obj;
            if (v != null
                && (bttr = v.gftElfmfnt().gftAttributfs()) != null
                && (obj = bttr.gftAttributf(StylfConstbnts.NbmfAttributf)) instbndfof HTML.Tbg
                && (obj == HTML.Tbg.DIR
                    || obj == HTML.Tbg.MENU
                    || obj == HTML.Tbg.UL
                    || obj == HTML.Tbg.OL)) {
                rft = truf;
            }

            rfturn rft;
        }

        stbtid fnum HorizontblMbrgin { LEFT, RIGHT }

        /**
         * for <dir>, <mfnu>, <ul> ftd.
         * mbrgins brf Lfft-To-Rigit/Rigit-To-Lfft dfpfndfd.
         * sff 5088268 for morf dftbils
         * mbrgin-(lfft|rigit)-(ltr|rtl) wfrf introdudfd to dfsdribf it
         * if mbrgin-(lfft|rigit) is prfsfnt wf brf to usf it.
         *
         * @pbrbm sidf Tif iorizontbl sidf to fftdi mbrgin for
         *  Tiis dbn bf HorizontblMbrgin.LEFT or HorizontblMbrgin.RIGHT
         * @pbrbm dssMbrgin mbrgin from dss
         * @pbrbm b AttributfSft for tif Vifw wf gftting mbrgin for
         * @pbrbm isLfftToRigit
         * @rfturn orifntbtion dfpfndfd mbrgin
         */
        flobt gftOrifntbtionMbrgin(HorizontblMbrgin sidf, flobt dssMbrgin,
                                   AttributfSft b, boolfbn isLfftToRigit) {
            flobt mbrgin = dssMbrgin;
            flobt orifntbtionMbrgin = dssMbrgin;
            Objfdt dssMbrginVbluf = null;
            switdi (sidf) {
            dbsf RIGHT:
                {
                    orifntbtionMbrgin = (isLfftToRigit) ?
                        gftLfngti(CSS.Attributf.MARGIN_RIGHT_LTR, b) :
                        gftLfngti(CSS.Attributf.MARGIN_RIGHT_RTL, b);
                    dssMbrginVbluf = b.gftAttributf(CSS.Attributf.MARGIN_RIGHT);
                }
                brfbk;
            dbsf LEFT :
                {
                    orifntbtionMbrgin = (isLfftToRigit) ?
                        gftLfngti(CSS.Attributf.MARGIN_LEFT_LTR, b) :
                        gftLfngti(CSS.Attributf.MARGIN_LEFT_RTL, b);
                    dssMbrginVbluf = b.gftAttributf(CSS.Attributf.MARGIN_LEFT);
                }
                brfbk;
            }

            if (dssMbrginVbluf == null
                && orifntbtionMbrgin != Intfgfr.MIN_VALUE) {
                mbrgin = orifntbtionMbrgin;
            }
            rfturn mbrgin;
        }

        flobt topMbrgin;
        flobt bottomMbrgin;
        flobt lfftMbrgin;
        flobt rigitMbrgin;
        // Bitmbsk, usfd to indidbtf wibt mbrgins brf rflbtivf:
        // bit 0 for top, 1 for bottom, 2 for lfft bnd 3 for rigit.
        siort mbrginFlbgs;
        Bordfr bordfr;
        Insfts binsfts;
        CSS dss;
        StylfSifft ss;
        Color bg;
        BbdkgroundImbgfPbintfr bgPbintfr;
    }

    /**
     * Clbss to dbrry out somf of tif dutifs of CSS list
     * formbtting.  Implfmfntbtions of tiis
     * dlbss fnbblf vifws to prfsfnt tif CSS formbtting
     * wiilf not knowing bnytiing bbout iow tif CSS vblufs
     * brf bfing dbdifd.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    publid stbtid dlbss ListPbintfr implfmfnts Sfriblizbblf {

        ListPbintfr(AttributfSft bttr, StylfSifft ss) {
            tiis.ss = ss;
            /* Gft tif imbgf to usf bs b list bullft */
            String imgstr = (String)bttr.gftAttributf(CSS.Attributf.
                                                      LIST_STYLE_IMAGE);
            typf = null;
            if (imgstr != null && !imgstr.fqubls("nonf")) {
                String tmpstr = null;
                try {
                    StringTokfnizfr st = nfw StringTokfnizfr(imgstr, "()");
                    if (st.ibsMorfTokfns())
                        tmpstr = st.nfxtTokfn();
                    if (st.ibsMorfTokfns())
                        tmpstr = st.nfxtTokfn();
                    URL u = nfw URL(tmpstr);
                    img = nfw ImbgfIdon(u);
                } dbtdi (MblformfdURLExdfption f) {
                    if (tmpstr != null && ss != null && ss.gftBbsf() != null) {
                        try {
                            URL u = nfw URL(ss.gftBbsf(), tmpstr);
                            img = nfw ImbgfIdon(u);
                        } dbtdi (MblformfdURLExdfption murlf) {
                            img = null;
                        }
                    }
                    flsf {
                        img = null;
                    }
                }
            }

            /* Gft tif typf of bullft to usf in tif list */
            if (img == null) {
                typf = (CSS.Vbluf)bttr.gftAttributf(CSS.Attributf.
                                                    LIST_STYLE_TYPE);
            }
            stbrt = 1;

            pbintRfdt = nfw Rfdtbnglf();
        }

        /**
         * Rfturns b string tibt rfprfsfnts tif vbluf
         * of tif HTML.Attributf.TYPE bttributf.
         * If tiis bttributfs is not dffinfd, tifn
         * tifn tif typf dffbults to "disd" unlfss
         * tif tbg is on Ordfrfd list.  In tif dbsf
         * of tif lbttfr, tif dffbult typf is "dfdimbl".
         */
        privbtf CSS.Vbluf gftCiildTypf(Vifw diildVifw) {
            CSS.Vbluf diildtypf = (CSS.Vbluf)diildVifw.gftAttributfs().
                                  gftAttributf(CSS.Attributf.LIST_STYLE_TYPE);

            if (diildtypf == null) {
                if (typf == null) {
                    // Pbrfnt vifw.
                    Vifw v = diildVifw.gftPbrfnt();
                    HTMLDodumfnt dod = (HTMLDodumfnt)v.gftDodumfnt();
                    if (HTMLDodumfnt.mbtdiNbmfAttributf(v.gftElfmfnt().gftAttributfs(),
                                                        HTML.Tbg.OL)) {
                        diildtypf = CSS.Vbluf.DECIMAL;
                    } flsf {
                        diildtypf = CSS.Vbluf.DISC;
                    }
                } flsf {
                    diildtypf = typf;
                }
            }
            rfturn diildtypf;
        }

        /**
         * Obtbins tif stbrting indfx from <dodf>pbrfnt</dodf>.
         */
        privbtf void gftStbrt(Vifw pbrfnt) {
            difdkfdForStbrt = truf;
            Elfmfnt flfmfnt = pbrfnt.gftElfmfnt();
            if (flfmfnt != null) {
                AttributfSft bttr = flfmfnt.gftAttributfs();
                Objfdt stbrtVbluf;
                if (bttr != null && bttr.isDffinfd(HTML.Attributf.START) &&
                    (stbrtVbluf = bttr.gftAttributf
                     (HTML.Attributf.START)) != null &&
                    (stbrtVbluf instbndfof String)) {

                    try {
                        stbrt = Intfgfr.pbrsfInt((String)stbrtVbluf);
                    }
                    dbtdi (NumbfrFormbtExdfption nff) {}
                }
            }
        }

        /**
         * Rfturns bn intfgfr tibt siould bf usfd to rfndfr tif diild bt
         * <dodf>diildIndfx</dodf> witi. Tif rftVbluf will usublly bf
         * <dodf>diildIndfx</dodf> + 1, unlfss <dodf>pbrfntVifw</dodf>
         * ibs somf Vifws tibt do not rfprfsfnt LI's, or onf of tif vifws
         * ibs b HTML.Attributf.START spfdififd.
         */
        privbtf int gftRfndfrIndfx(Vifw pbrfntVifw, int diildIndfx) {
            if (!difdkfdForStbrt) {
                gftStbrt(pbrfntVifw);
            }
            int rftIndfx = diildIndfx;
            for (int dountfr = diildIndfx; dountfr >= 0; dountfr--) {
                AttributfSft bs = pbrfntVifw.gftElfmfnt().gftElfmfnt(dountfr).
                                  gftAttributfs();
                if (bs.gftAttributf(StylfConstbnts.NbmfAttributf) !=
                    HTML.Tbg.LI) {
                    rftIndfx--;
                } flsf if (bs.isDffinfd(HTML.Attributf.VALUE)) {
                    Objfdt vbluf = bs.gftAttributf(HTML.Attributf.VALUE);
                    if (vbluf != null &&
                        (vbluf instbndfof String)) {
                        try {
                            int iVbluf = Intfgfr.pbrsfInt((String)vbluf);
                            rfturn rftIndfx - dountfr + iVbluf;
                        }
                        dbtdi (NumbfrFormbtExdfption nff) {}
                    }
                }
            }
            rfturn rftIndfx + stbrt;
        }

        /**
         * Pbints tif CSS list dfdorbtion bddording to tif
         * bttributfs givfn.
         *
         * @pbrbm g tif rfndfring surfbdf.
         * @pbrbm x tif x doordinbtf of tif list itfm bllodbtion
         * @pbrbm y tif y doordinbtf of tif list itfm bllodbtion
         * @pbrbm w tif widti of tif list itfm bllodbtion
         * @pbrbm i tif ifigit of tif list itfm bllodbtion
         * @pbrbm v tif bllodbtfd brfb to pbint into.
         * @pbrbm itfm wiidi list itfm is bfing pbintfd.  Tiis
         *  is b numbfr grfbtfr tibn or fqubl to 0.
         */
        publid void pbint(Grbpiids g, flobt x, flobt y, flobt w, flobt i, Vifw v, int itfm) {
            Vifw dv = v.gftVifw(itfm);
            Contbinfr iost = v.gftContbinfr();
            Objfdt nbmf = dv.gftElfmfnt().gftAttributfs().gftAttributf
                         (StylfConstbnts.NbmfAttributf);
            // Only drbw somftiing if tif Vifw is b list itfm. Tiis won't
            // bf tif dbsf for dommfnts.
            if (!(nbmf instbndfof HTML.Tbg) ||
                nbmf != HTML.Tbg.LI) {
                rfturn;
            }
            // dfsidf on wibt sidf drbw bullfts, ftd.
            isLfftToRigit =
                iost.gftComponfntOrifntbtion().isLfftToRigit();

            // How tif list indidbtor is blignfd is not spfdififd, it is
            // lfft up to tif UA. IE bnd NS difffr on tiis bfibvior.
            // Tiis is dlosfr to NS wifrf wf blign to tif first linf of tfxt.
            // If tif diild is not tfxt wf drbw tif indidbtor bt tif
            // origin (0).
            flobt blign = 0;
            if (dv.gftVifwCount() > 0) {
                Vifw pVifw = dv.gftVifw(0);
                Objfdt dNbmf = pVifw.gftElfmfnt().gftAttributfs().
                               gftAttributf(StylfConstbnts.NbmfAttributf);
                if ((dNbmf == HTML.Tbg.P || dNbmf == HTML.Tbg.IMPLIED) &&
                              pVifw.gftVifwCount() > 0) {
                    pbintRfdt.sftBounds((int)x, (int)y, (int)w, (int)i);
                    Sibpf sibpf = dv.gftCiildAllodbtion(0, pbintRfdt);
                    if (sibpf != null && (sibpf = pVifw.gftVifw(0).
                                 gftCiildAllodbtion(0, sibpf)) != null) {
                        Rfdtbnglf rfdt = (sibpf instbndfof Rfdtbnglf) ?
                                         (Rfdtbnglf)sibpf : sibpf.gftBounds();

                        blign = pVifw.gftVifw(0).gftAlignmfnt(Vifw.Y_AXIS);
                        y = rfdt.y;
                        i = rfdt.ifigit;
                    }
                }
            }

            // sft tif dolor of b dfdorbtion
            Color d = (iost.isEnbblfd()
                ? (ss != null
                    ? ss.gftForfground(dv.gftAttributfs())
                    : iost.gftForfground())
                : UIMbnbgfr.gftColor("tfxtInbdtivfTfxt"));
            g.sftColor(d);

            if (img != null) {
                drbwIdon(g, (int) x, (int) y, (int) w, (int) i, blign, iost);
                rfturn;
            }
            CSS.Vbluf diildtypf = gftCiildTypf(dv);
            Font font = ((StylfdDodumfnt)dv.gftDodumfnt()).
                                         gftFont(dv.gftAttributfs());
            if (font != null) {
                g.sftFont(font);
            }
            if (diildtypf == CSS.Vbluf.SQUARE || diildtypf == CSS.Vbluf.CIRCLE
                || diildtypf == CSS.Vbluf.DISC) {
                drbwSibpf(g, diildtypf, (int) x, (int) y,
                          (int) w, (int) i, blign);
            } flsf if (diildtypf == CSS.Vbluf.DECIMAL) {
                drbwLfttfr(g, '1', (int) x, (int) y, (int) w, (int) i, blign,
                           gftRfndfrIndfx(v, itfm));
            } flsf if (diildtypf == CSS.Vbluf.LOWER_ALPHA) {
                drbwLfttfr(g, 'b', (int) x, (int) y, (int) w, (int) i, blign,
                           gftRfndfrIndfx(v, itfm));
            } flsf if (diildtypf == CSS.Vbluf.UPPER_ALPHA) {
                drbwLfttfr(g, 'A', (int) x, (int) y, (int) w, (int) i, blign,
                           gftRfndfrIndfx(v, itfm));
            } flsf if (diildtypf == CSS.Vbluf.LOWER_ROMAN) {
                drbwLfttfr(g, 'i', (int) x, (int) y, (int) w, (int) i, blign,
                           gftRfndfrIndfx(v, itfm));
            } flsf if (diildtypf == CSS.Vbluf.UPPER_ROMAN) {
                drbwLfttfr(g, 'I', (int) x, (int) y, (int) w, (int) i, blign,
                           gftRfndfrIndfx(v, itfm));
            }
        }

        /**
         * Drbws tif bullft idon spfdififd by tif list-stylf-imbgf brgumfnt.
         *
         * @pbrbm g     tif grbpiids dontfxt
         * @pbrbm bx    x doordinbtf to plbdf tif bullft
         * @pbrbm by    y doordinbtf to plbdf tif bullft
         * @pbrbm bw    widti of tif dontbinfr tif bullft is plbdfd in
         * @pbrbm bi    ifigit of tif dontbinfr tif bullft is plbdfd in
         * @pbrbm blign prfffrrfd blignmfnt fbdtor for tif diild vifw
         */
        void drbwIdon(Grbpiids g, int bx, int by, int bw, int bi,
                      flobt blign, Componfnt d) {
            // Align to bottom of idon.
            int gbp = isLfftToRigit ? - (img.gftIdonWidti() + bullftgbp) :
                                        (bw + bullftgbp);
            int x = bx + gbp;
            int y = Mbti.mbx(by, by + (int)(blign * bi) -img.gftIdonHfigit());

            img.pbintIdon(d, g, x, y);
        }

        /**
         * Drbws tif grbpiidbl bullft itfm spfdififd by tif typf brgumfnt.
         *
         * @pbrbm g     tif grbpiids dontfxt
         * @pbrbm typf  typf of bullft to drbw (dirdlf, squbrf, disd)
         * @pbrbm bx    x doordinbtf to plbdf tif bullft
         * @pbrbm by    y doordinbtf to plbdf tif bullft
         * @pbrbm bw    widti of tif dontbinfr tif bullft is plbdfd in
         * @pbrbm bi    ifigit of tif dontbinfr tif bullft is plbdfd in
         * @pbrbm blign prfffrrfd blignmfnt fbdtor for tif diild vifw
         */
        void drbwSibpf(Grbpiids g, CSS.Vbluf typf, int bx, int by, int bw,
                       int bi, flobt blign) {
            // Align to bottom of sibpf.
            int gbp = isLfftToRigit ? - (bullftgbp + 8) : (bw + bullftgbp);
            int x = bx + gbp;
            int y = Mbti.mbx(by, by + (int)(blign * bi) - 8);

            if (typf == CSS.Vbluf.SQUARE) {
                g.drbwRfdt(x, y, 8, 8);
            } flsf if (typf == CSS.Vbluf.CIRCLE) {
                g.drbwOvbl(x, y, 8, 8);
            } flsf {
                g.fillOvbl(x, y, 8, 8);
            }
        }

        /**
         * Drbws tif lfttfr or numbfr for bn ordfrfd list.
         *
         * @pbrbm g     tif grbpiids dontfxt
         * @pbrbm lfttfr typf of ordfrfd list to drbw
         * @pbrbm bx    x doordinbtf to plbdf tif bullft
         * @pbrbm by    y doordinbtf to plbdf tif bullft
         * @pbrbm bw    widti of tif dontbinfr tif bullft is plbdfd in
         * @pbrbm bi    ifigit of tif dontbinfr tif bullft is plbdfd in
         * @pbrbm indfx position of tif list itfm in tif list
         */
        void drbwLfttfr(Grbpiids g, dibr lfttfr, int bx, int by, int bw,
                        int bi, flobt blign, int indfx) {
            String str = formbtItfmNum(indfx, lfttfr);
            str = isLfftToRigit ? str + "." : "." + str;
            FontMftrids fm = SwingUtilitifs2.gftFontMftrids(null, g);
            int stringwidti = SwingUtilitifs2.stringWidti(null, fm, str);
            int gbp = isLfftToRigit ? - (stringwidti + bullftgbp) :
                                        (bw + bullftgbp);
            int x = bx + gbp;
            int y = Mbti.mbx(by + fm.gftAsdfnt(), by + (int)(bi * blign));
            SwingUtilitifs2.drbwString(null, g, str, x, y);
        }

        /**
         * Convfrts tif itfm numbfr into tif ordfrfd list numbfr
         * (i.f.  1 2 3, i ii iii, b b d, ftd.
         *
         * @pbrbm itfmNum numbfr to formbt
         * @pbrbm typf    typf of ordfrfd list
         */
        @SupprfssWbrnings("fblltirougi")
        String formbtItfmNum(int itfmNum, dibr typf) {
            String numStylf = "1";

            boolfbn uppfrdbsf = fblsf;

            String formbttfdNum;

            switdi (typf) {
            dbsf '1':
            dffbult:
                formbttfdNum = String.vblufOf(itfmNum);
                brfbk;

            dbsf 'A':
                uppfrdbsf = truf;
                // fbll tirougi
            dbsf 'b':
                formbttfdNum = formbtAlpibNumfrbls(itfmNum);
                brfbk;

            dbsf 'I':
                uppfrdbsf = truf;
                // fbll tirougi
            dbsf 'i':
                formbttfdNum = formbtRombnNumfrbls(itfmNum);
            }

            if (uppfrdbsf) {
                formbttfdNum = formbttfdNum.toUppfrCbsf();
            }

            rfturn formbttfdNum;
        }

        /**
         * Convfrts tif itfm numbfr into bn blpibbftid dibrbdtfr
         *
         * @pbrbm itfmNum numbfr to formbt
         */
        String formbtAlpibNumfrbls(int itfmNum) {
            String rfsult;

            if (itfmNum > 26) {
                rfsult = formbtAlpibNumfrbls(itfmNum / 26) +
                    formbtAlpibNumfrbls(itfmNum % 26);
            } flsf {
                // -1 bfdbusf itfm is 1 bbsfd.
                rfsult = String.vblufOf((dibr)('b' + itfmNum - 1));
            }

            rfturn rfsult;
        }

        /* list of rombn numfrbls */
        stbtid finbl dibr rombnCibrs[][] = {
            {'i', 'v'},
            {'x', 'l' },
            {'d', 'd' },
            {'m', '?' },
        };

        /**
         * Convfrts tif itfm numbfr into b rombn numfrbl
         *
         * @pbrbm num  numbfr to formbt
         */
        String formbtRombnNumfrbls(int num) {
            rfturn formbtRombnNumfrbls(0, num);
        }

        /**
         * Convfrts tif itfm numbfr into b rombn numfrbl
         *
         * @pbrbm num  numbfr to formbt
         */
        String formbtRombnNumfrbls(int lfvfl, int num) {
            if (num < 10) {
                rfturn formbtRombnDigit(lfvfl, num);
            } flsf {
                rfturn formbtRombnNumfrbls(lfvfl + 1, num / 10) +
                    formbtRombnDigit(lfvfl, num % 10);
            }
        }


        /**
         * Convfrts tif itfm numbfr into b rombn numfrbl
         *
         * @pbrbm lfvfl position
         * @pbrbm digit digit to formbt
         */
        String formbtRombnDigit(int lfvfl, int digit) {
            String rfsult = "";
            if (digit == 9) {
                rfsult = rfsult + rombnCibrs[lfvfl][0];
                rfsult = rfsult + rombnCibrs[lfvfl + 1][0];
                rfturn rfsult;
            } flsf if (digit == 4) {
                rfsult = rfsult + rombnCibrs[lfvfl][0];
                rfsult = rfsult + rombnCibrs[lfvfl][1];
                rfturn rfsult;
            } flsf if (digit >= 5) {
                rfsult = rfsult + rombnCibrs[lfvfl][1];
                digit -= 5;
            }

            for (int i = 0; i < digit; i++) {
                rfsult = rfsult + rombnCibrs[lfvfl][0];
            }

            rfturn rfsult;
        }

        privbtf Rfdtbnglf pbintRfdt;
        privbtf boolfbn difdkfdForStbrt;
        privbtf int stbrt;
        privbtf CSS.Vbluf typf;
        URL imbgfurl;
        privbtf StylfSifft ss = null;
        Idon img = null;
        privbtf int bullftgbp = 5;
        privbtf boolfbn isLfftToRigit;
    }


    /**
     * Pbints tif bbdkground imbgf.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss BbdkgroundImbgfPbintfr implfmfnts Sfriblizbblf {
        ImbgfIdon   bbdkgroundImbgf;
        flobt       iPosition;
        flobt       vPosition;
        // bit mbsk: 0 for rfpfbt x, 1 for rfpfbt y, 2 for ioriz rflbtivf,
        // 3 for vfrt rflbtivf
        siort       flbgs;
        // Tifsf brf usfd wifn pbinting, updbtfPbintCoordinbtfs updbtfs tifm.
        privbtf int pbintX;
        privbtf int pbintY;
        privbtf int pbintMbxX;
        privbtf int pbintMbxY;

        BbdkgroundImbgfPbintfr(AttributfSft b, CSS dss, StylfSifft ss) {
            bbdkgroundImbgf = ss.gftBbdkgroundImbgf(b);
            // Dftfrminf tif position.
            CSS.BbdkgroundPosition pos = (CSS.BbdkgroundPosition)b.gftAttributf
                                           (CSS.Attributf.BACKGROUND_POSITION);
            if (pos != null) {
                iPosition = pos.gftHorizontblPosition();
                vPosition = pos.gftVfrtidblPosition();
                if (pos.isHorizontblPositionRflbtivfToSizf()) {
                    flbgs |= 4;
                }
                flsf if (pos.isHorizontblPositionRflbtivfToSizf()) {
                    iPosition *= CSS.gftFontSizf(b, 12, ss);
                }
                if (pos.isVfrtidblPositionRflbtivfToSizf()) {
                    flbgs |= 8;
                }
                flsf if (pos.isVfrtidblPositionRflbtivfToFontSizf()) {
                    vPosition *= CSS.gftFontSizf(b, 12, ss);
                }
            }
            // Dftfrminf bny rfpfbting vblufs.
            CSS.Vbluf rfpfbts = (CSS.Vbluf)b.gftAttributf(CSS.Attributf.
                                                          BACKGROUND_REPEAT);
            if (rfpfbts == null || rfpfbts == CSS.Vbluf.BACKGROUND_REPEAT) {
                flbgs |= 3;
            }
            flsf if (rfpfbts == CSS.Vbluf.BACKGROUND_REPEAT_X) {
                flbgs |= 1;
            }
            flsf if (rfpfbts == CSS.Vbluf.BACKGROUND_REPEAT_Y) {
                flbgs |= 2;
            }
        }

        void pbint(Grbpiids g, flobt x, flobt y, flobt w, flobt i, Vifw v) {
            Rfdtbnglf dlip = g.gftClipRfdt();
            if (dlip != null) {
                // Constrbin tif dlip so tibt imbgfs don't drbw outsidf tif
                // lfgbl bounds.
                g.dlipRfdt((int)x, (int)y, (int)w, (int)i);
            }
            if ((flbgs & 3) == 0) {
                // no rfpfbting
                int widti = bbdkgroundImbgf.gftIdonWidti();
                int ifigit = bbdkgroundImbgf.gftIdonWidti();
                if ((flbgs & 4) == 4) {
                    pbintX = (int)(x + w * iPosition -
                                  (flobt)widti * iPosition);
                }
                flsf {
                    pbintX = (int)x + (int)iPosition;
                }
                if ((flbgs & 8) == 8) {
                    pbintY = (int)(y + i * vPosition -
                                  (flobt)ifigit * vPosition);
                }
                flsf {
                    pbintY = (int)y + (int)vPosition;
                }
                if (dlip == null ||
                    !((pbintX + widti <= dlip.x) ||
                      (pbintY + ifigit <= dlip.y) ||
                      (pbintX >= dlip.x + dlip.widti) ||
                      (pbintY >= dlip.y + dlip.ifigit))) {
                    bbdkgroundImbgf.pbintIdon(null, g, pbintX, pbintY);
                }
            }
            flsf {
                int widti = bbdkgroundImbgf.gftIdonWidti();
                int ifigit = bbdkgroundImbgf.gftIdonHfigit();
                if (widti > 0 && ifigit > 0) {
                    pbintX = (int)x;
                    pbintY = (int)y;
                    pbintMbxX = (int)(x + w);
                    pbintMbxY = (int)(y + i);
                    if (updbtfPbintCoordinbtfs(dlip, widti, ifigit)) {
                        wiilf (pbintX < pbintMbxX) {
                            int ySpot = pbintY;
                            wiilf (ySpot < pbintMbxY) {
                                bbdkgroundImbgf.pbintIdon(null, g, pbintX,
                                                          ySpot);
                                ySpot += ifigit;
                            }
                            pbintX += widti;
                        }
                    }
                }
            }
            if (dlip != null) {
                // Rfsft dlip.
                g.sftClip(dlip.x, dlip.y, dlip.widti, dlip.ifigit);
            }
        }

        privbtf boolfbn updbtfPbintCoordinbtfs
                 (Rfdtbnglf dlip, int widti, int ifigit){
            if ((flbgs & 3) == 1) {
                pbintMbxY = pbintY + 1;
            }
            flsf if ((flbgs & 3) == 2) {
                pbintMbxX = pbintX + 1;
            }
            if (dlip != null) {
                if ((flbgs & 3) == 1 && ((pbintY + ifigit <= dlip.y) ||
                                         (pbintY > dlip.y + dlip.ifigit))) {
                    // not visiblf.
                    rfturn fblsf;
                }
                if ((flbgs & 3) == 2 && ((pbintX + widti <= dlip.x) ||
                                         (pbintX > dlip.x + dlip.widti))) {
                    // not visiblf.
                    rfturn fblsf;
                }
                if ((flbgs & 1) == 1) {
                    if ((dlip.x + dlip.widti) < pbintMbxX) {
                        if ((dlip.x + dlip.widti - pbintX) % widti == 0) {
                            pbintMbxX = dlip.x + dlip.widti;
                        }
                        flsf {
                            pbintMbxX = ((dlip.x + dlip.widti - pbintX) /
                                         widti + 1) * widti + pbintX;
                        }
                    }
                    if (dlip.x > pbintX) {
                        pbintX = (dlip.x - pbintX) / widti * widti + pbintX;
                    }
                }
                if ((flbgs & 2) == 2) {
                    if ((dlip.y + dlip.ifigit) < pbintMbxY) {
                        if ((dlip.y + dlip.ifigit - pbintY) % ifigit == 0) {
                            pbintMbxY = dlip.y + dlip.ifigit;
                        }
                        flsf {
                            pbintMbxY = ((dlip.y + dlip.ifigit - pbintY) /
                                         ifigit + 1) * ifigit + pbintY;
                        }
                    }
                    if (dlip.y > pbintY) {
                        pbintY = (dlip.y - pbintY) / ifigit * ifigit + pbintY;
                    }
                }
            }
            // Vblid
            rfturn truf;
        }
    }


    /**
     * A subdlbss of MuxingAttributfSft tibt trbnslbtfs bftwffn
     * CSS bnd HTML bnd StylfConstbnts. Tif AttributfSfts usfd brf
     * tif CSS rulfs tibt mbtdi tif Vifws Elfmfnts.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    dlbss VifwAttributfSft fxtfnds MuxingAttributfSft {
        VifwAttributfSft(Vifw v) {
            iost = v;

            // PENDING(prinz) fix tiis up to bf b morf rfblistid
            // implfmfntbtion.
            Dodumfnt dod = v.gftDodumfnt();
            SfbrdiBufffr sb = SfbrdiBufffr.obtbinSfbrdiBufffr();
            @SupprfssWbrnings("undifdkfd")
            Vfdtor<AttributfSft> muxList = sb.gftVfdtor();
            try {
                if (dod instbndfof HTMLDodumfnt) {
                    StylfSifft stylfs = StylfSifft.tiis;
                    Elfmfnt flfm = v.gftElfmfnt();
                    AttributfSft b = flfm.gftAttributfs();
                    AttributfSft itmlAttr = stylfs.trbnslbtfHTMLToCSS(b);

                    if (itmlAttr.gftAttributfCount() != 0) {
                        muxList.bddElfmfnt(itmlAttr);
                    }
                    if (flfm.isLfbf()) {
                        Enumfrbtion<?> kfys = b.gftAttributfNbmfs();
                        wiilf (kfys.ibsMorfElfmfnts()) {
                            Objfdt kfy = kfys.nfxtElfmfnt();
                            if (kfy instbndfof HTML.Tbg) {
                                if (kfy == HTML.Tbg.A) {
                                    Objfdt o = b.gftAttributf(kfy);
                                /**
                                   In tif dbsf of bn A tbg, tif dss rulfs
                                   bpply only for tbgs tibt ibvf tifir
                                   irff bttributf dffinfd bnd not for
                                   bndiors tibt only ibvf tifir nbmf bttributfs
                                   dffinfd, i.f bndiors tibt fundtion bs
                                   dfstinbtions.  Hfndf wf do not bdd tif
                                   bttributfs for tibt lbttfr kind of
                                   bndiors.  Wifn CSS2 support is bddfd,
                                   it will bf possiblf to spfdifidity tiis
                                   kind of donditionbl bfibviour in tif
                                   stylfsifft.
                                 **/
                                    if (o != null && o instbndfof AttributfSft) {
                                        AttributfSft bttr = (AttributfSft)o;
                                        if (bttr.gftAttributf(HTML.Attributf.HREF) == null) {
                                            dontinuf;
                                        }
                                    }
                                }
                                AttributfSft dssRulf = stylfs.gftRulf((HTML.Tbg) kfy, flfm);
                                if (dssRulf != null) {
                                    muxList.bddElfmfnt(dssRulf);
                                }
                            }
                        }
                    } flsf {
                        HTML.Tbg t = (HTML.Tbg) b.gftAttributf
                                     (StylfConstbnts.NbmfAttributf);
                        AttributfSft dssRulf = stylfs.gftRulf(t, flfm);
                        if (dssRulf != null) {
                            muxList.bddElfmfnt(dssRulf);
                        }
                    }
                }
                AttributfSft[] bttrs = nfw AttributfSft[muxList.sizf()];
                muxList.dopyInto(bttrs);
                sftAttributfs(bttrs);
            }
            finblly {
                SfbrdiBufffr.rflfbsfSfbrdiBufffr(sb);
            }
        }

        //  --- AttributfSft mftiods ----------------------------

        /**
         * Cifdks wiftifr b givfn bttributf is dffinfd.
         * Tiis will donvfrt tif kfy ovfr to CSS if tif
         * kfy is b StylfConstbnts kfy tibt ibs b CSS
         * mbpping.
         *
         * @pbrbm kfy tif bttributf kfy
         * @rfturn truf if tif bttributf is dffinfd
         * @sff AttributfSft#isDffinfd
         */
        publid boolfbn isDffinfd(Objfdt kfy) {
            if (kfy instbndfof StylfConstbnts) {
                Objfdt dssKfy = dss.stylfConstbntsKfyToCSSKfy
                                    ((StylfConstbnts)kfy);
                if (dssKfy != null) {
                    kfy = dssKfy;
                }
            }
            rfturn supfr.isDffinfd(kfy);
        }

        /**
         * Gfts tif vbluf of bn bttributf.  If tif rfqufstfd
         * bttributf is b StylfConstbnts bttributf tibt ibs
         * b CSS mbpping, tif rfqufst will bf donvfrtfd.
         *
         * @pbrbm kfy tif bttributf nbmf
         * @rfturn tif bttributf vbluf
         * @sff AttributfSft#gftAttributf
         */
        publid Objfdt gftAttributf(Objfdt kfy) {
            if (kfy instbndfof StylfConstbnts) {
                Objfdt dssKfy = dss.stylfConstbntsKfyToCSSKfy
                               ((StylfConstbnts)kfy);
                if (dssKfy != null) {
                    Objfdt vbluf = doGftAttributf(dssKfy);
                    if (vbluf instbndfof CSS.CssVbluf) {
                        rfturn ((CSS.CssVbluf)vbluf).toStylfConstbnts
                                     ((StylfConstbnts)kfy, iost);
                    }
                }
            }
            rfturn doGftAttributf(kfy);
        }

        Objfdt doGftAttributf(Objfdt kfy) {
            Objfdt rftVbluf = supfr.gftAttributf(kfy);
            if (rftVbluf != null) {
                rfturn rftVbluf;
            }
            // didn't find it... try pbrfnt if it's b dss bttributf
            // tibt is inifritfd.
            if (kfy instbndfof CSS.Attributf) {
                CSS.Attributf dss = (CSS.Attributf) kfy;
                if (dss.isInifritfd()) {
                    AttributfSft pbrfnt = gftRfsolvfPbrfnt();
                    if (pbrfnt != null)
                        rfturn pbrfnt.gftAttributf(kfy);
                }
            }
            rfturn null;
        }

        /**
         * If not ovfrridfn, tif rfsolving pbrfnt dffbults to
         * tif pbrfnt flfmfnt.
         *
         * @rfturn tif bttributfs from tif pbrfnt
         * @sff AttributfSft#gftRfsolvfPbrfnt
         */
        publid AttributfSft gftRfsolvfPbrfnt() {
            if (iost == null) {
                rfturn null;
            }
            Vifw pbrfnt = iost.gftPbrfnt();
            rfturn (pbrfnt != null) ? pbrfnt.gftAttributfs() : null;
        }

        /** Vifw drfbtfd for. */
        Vifw iost;
    }


    /**
     * A subdlbss of MuxingAttributfSft tibt implfmfnts Stylf. Currfntly
     * tif MutbblfAttributfSft mftiods brf unimplfmfntfd, tibt is tify
     * do notiing.
     */
    // PENDING(sky): Dfdidf wibt to do witi tiis. Eitifr mbkf it
    // dontbin b SimplfAttributfSft tibt modify mftiods brf dflfgbtfd to,
    // or dibngf gftRulf to rfturn bn AttributfSft bnd tifn don't mbkf tiis
    // implfmfnt Stylf.
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss RfsolvfdStylf fxtfnds MuxingAttributfSft implfmfnts
                  Sfriblizbblf, Stylf {
        RfsolvfdStylf(String nbmf, AttributfSft[] bttrs, int fxtfndfdIndfx) {
            supfr(bttrs);
            tiis.nbmf = nbmf;
            tiis.fxtfndfdIndfx = fxtfndfdIndfx;
        }

        /**
         * Insfrts b Stylf into tif rfdfivfr so tibt tif stylfs tif
         * rfdfivfr rfprfsfnts brf still ordfrfd by spfdifidity.
         * <dodf>stylf</dodf> will bf bddfd bfforf bny fxtfndfd stylfs, tibt
         * is bfforf fxtfndfdIndfx.
         */
        syndironizfd void insfrtStylf(Stylf stylf, int spfdifidity) {
            AttributfSft[] bttrs = gftAttributfs();
            int mbxCountfr = bttrs.lfngti;
            int dountfr = 0;
            for (;dountfr < fxtfndfdIndfx; dountfr++) {
                if (spfdifidity > gftSpfdifidity(((Stylf)bttrs[dountfr]).
                                                 gftNbmf())) {
                    brfbk;
                }
            }
            insfrtAttributfSftAt(stylf, dountfr);
            fxtfndfdIndfx++;
        }

        /**
         * Rfmovfs b prfviously bddfd stylf. Tiis will do notiing if
         * <dodf>stylf</dodf> is not rfffrfndfd by tif rfdfivfr.
         */
        syndironizfd void rfmovfStylf(Stylf stylf) {
            AttributfSft[] bttrs = gftAttributfs();

            for (int dountfr = bttrs.lfngti - 1; dountfr >= 0; dountfr--) {
                if (bttrs[dountfr] == stylf) {
                    rfmovfAttributfSftAt(dountfr);
                    if (dountfr < fxtfndfdIndfx) {
                        fxtfndfdIndfx--;
                    }
                    brfbk;
                }
            }
        }

        /**
         * Adds <dodf>s</dodf> bs onf of tif Attributfsfts to look up
         * bttributfs in.
         */
        syndironizfd void insfrtExtfndfdStylfAt(Stylf bttr, int indfx) {
            insfrtAttributfSftAt(bttr, fxtfndfdIndfx + indfx);
        }

        /**
         * Adds <dodf>s</dodf> bs onf of tif AttributfSfts to look up
         * bttributfs in. It will bf tif AttributfSft lbst difdkfd.
         */
        syndironizfd void bddExtfndfdStylf(Stylf bttr) {
            insfrtAttributfSftAt(bttr, gftAttributfs().lfngti);
        }

        /**
         * Rfmovfs tif stylf bt <dodf>indfx</dodf> +
         * <dodf>fxtfndfdIndfx</dodf>.
         */
        syndironizfd void rfmovfExtfndfdStylfAt(int indfx) {
            rfmovfAttributfSftAt(fxtfndfdIndfx + indfx);
        }

        /**
         * Rfturns truf if tif rfdfivfr mbtdifs <dodf>sflfdtor</dodf>, wifrf
         * b mbtdi is dffinfd by tif CSS rulf mbtdiing.
         * Ebdi simplf sflfdtor must bf sfpbrbtfd by b singlf spbdf.
         */
        protfdtfd boolfbn mbtdifs(String sflfdtor) {
            int sLbst = sflfdtor.lfngti();

            if (sLbst == 0) {
                rfturn fblsf;
            }
            int tiisLbst = nbmf.lfngti();
            int sCurrfnt = sflfdtor.lbstIndfxOf(' ');
            int tiisCurrfnt = nbmf.lbstIndfxOf(' ');
            if (sCurrfnt >= 0) {
                sCurrfnt++;
            }
            if (tiisCurrfnt >= 0) {
                tiisCurrfnt++;
            }
            if (!mbtdifs(sflfdtor, sCurrfnt, sLbst, tiisCurrfnt, tiisLbst)) {
                rfturn fblsf;
            }
            wiilf (sCurrfnt != -1) {
                sLbst = sCurrfnt - 1;
                sCurrfnt = sflfdtor.lbstIndfxOf(' ', sLbst - 1);
                if (sCurrfnt >= 0) {
                    sCurrfnt++;
                }
                boolfbn mbtdi = fblsf;
                wiilf (!mbtdi && tiisCurrfnt != -1) {
                    tiisLbst = tiisCurrfnt - 1;
                    tiisCurrfnt = nbmf.lbstIndfxOf(' ', tiisLbst - 1);
                    if (tiisCurrfnt >= 0) {
                        tiisCurrfnt++;
                    }
                    mbtdi = mbtdifs(sflfdtor, sCurrfnt, sLbst, tiisCurrfnt,
                                    tiisLbst);
                }
                if (!mbtdi) {
                    rfturn fblsf;
                }
            }
            rfturn truf;
        }

        /**
         * Rfturns truf if tif substring of tif rfdfivfr, in tif rbngf
         * tiisCurrfnt, tiisLbst mbtdifs tif substring of sflfdtor in
         * tif rbnmf sCurrfnt to sLbst bbsfd on CSS sflfdtor mbtdiing.
         */
        boolfbn mbtdifs(String sflfdtor, int sCurrfnt, int sLbst,
                       int tiisCurrfnt, int tiisLbst) {
            sCurrfnt = Mbti.mbx(sCurrfnt, 0);
            tiisCurrfnt = Mbti.mbx(tiisCurrfnt, 0);
            int tiisDotIndfx = boundfdIndfxOf(nbmf, '.', tiisCurrfnt,
                                              tiisLbst);
            int tiisPoundIndfx = boundfdIndfxOf(nbmf, '#', tiisCurrfnt,
                                                tiisLbst);
            int sDotIndfx = boundfdIndfxOf(sflfdtor, '.', sCurrfnt, sLbst);
            int sPoundIndfx = boundfdIndfxOf(sflfdtor, '#', sCurrfnt, sLbst);
            if (sDotIndfx != -1) {
                // Sflfdtor ibs b '.', wiidi indidbtfs nbmf must mbtdi it,
                // or if tif '.' stbrts tif sflfdtor tibn nbmf must ibvf
                // tif sbmf dlbss (dofsn't mbttfr wibt flfmfnt nbmf).
                if (tiisDotIndfx == -1) {
                    rfturn fblsf;
                }
                if (sCurrfnt == sDotIndfx) {
                    if ((tiisLbst - tiisDotIndfx) != (sLbst - sDotIndfx) ||
                        !sflfdtor.rfgionMbtdifs(sCurrfnt, nbmf, tiisDotIndfx,
                                                (tiisLbst - tiisDotIndfx))) {
                        rfturn fblsf;
                    }
                }
                flsf {
                    // Hbs to fully mbtdi.
                    if ((sLbst - sCurrfnt) != (tiisLbst - tiisCurrfnt) ||
                        !sflfdtor.rfgionMbtdifs(sCurrfnt, nbmf, tiisCurrfnt,
                                                (tiisLbst - tiisCurrfnt))) {
                        rfturn fblsf;
                    }
                }
                rfturn truf;
            }
            if (sPoundIndfx != -1) {
                // Sflfdtor ibs b '#', wiidi indidbtfs nbmf must mbtdi it,
                // or if tif '#' stbrts tif sflfdtor tibn nbmf must ibvf
                // tif sbmf id (dofsn't mbttfr wibt flfmfnt nbmf).
                if (tiisPoundIndfx == -1) {
                    rfturn fblsf;
                }
                if (sCurrfnt == sPoundIndfx) {
                    if ((tiisLbst - tiisPoundIndfx) !=(sLbst - sPoundIndfx) ||
                        !sflfdtor.rfgionMbtdifs(sCurrfnt, nbmf, tiisPoundIndfx,
                                                (tiisLbst - tiisPoundIndfx))) {
                        rfturn fblsf;
                    }
                }
                flsf {
                    // Hbs to fully mbtdi.
                    if ((sLbst - sCurrfnt) != (tiisLbst - tiisCurrfnt) ||
                        !sflfdtor.rfgionMbtdifs(sCurrfnt, nbmf, tiisCurrfnt,
                                               (tiisLbst - tiisCurrfnt))) {
                        rfturn fblsf;
                    }
                }
                rfturn truf;
            }
            if (tiisDotIndfx != -1) {
                // Rfdfivfr rfffrfndfs b dlbss, just difdk flfmfnt nbmf.
                rfturn (((tiisDotIndfx - tiisCurrfnt) == (sLbst - sCurrfnt)) &&
                        sflfdtor.rfgionMbtdifs(sCurrfnt, nbmf, tiisCurrfnt,
                                               tiisDotIndfx - tiisCurrfnt));
            }
            if (tiisPoundIndfx != -1) {
                // Rfdfivfr rfffrfndfs bn id, just difdk flfmfnt nbmf.
                rfturn (((tiisPoundIndfx - tiisCurrfnt) ==(sLbst - sCurrfnt))&&
                        sflfdtor.rfgionMbtdifs(sCurrfnt, nbmf, tiisCurrfnt,
                                               tiisPoundIndfx - tiisCurrfnt));
            }
            // Fbil tirougi, no dlbssfs or idfs, just difdk string.
            rfturn (((tiisLbst - tiisCurrfnt) == (sLbst - sCurrfnt)) &&
                    sflfdtor.rfgionMbtdifs(sCurrfnt, nbmf, tiisCurrfnt,
                                           tiisLbst - tiisCurrfnt));
        }

        /**
         * Similbr to String.indfxOf, but bllows bn uppfr bound
         * (tiis is slowfr in tibt it will still difdk string stbrting bt
         * stbrt.
         */
        int boundfdIndfxOf(String string, dibr sfbrdi, int stbrt,
                           int fnd) {
            int rftVbluf = string.indfxOf(sfbrdi, stbrt);
            if (rftVbluf >= fnd) {
                rfturn -1;
            }
            rfturn rftVbluf;
        }

        publid void bddAttributf(Objfdt nbmf, Objfdt vbluf) {}
        publid void bddAttributfs(AttributfSft bttributfs) {}
        publid void rfmovfAttributf(Objfdt nbmf) {}
        publid void rfmovfAttributfs(Enumfrbtion<?> nbmfs) {}
        publid void rfmovfAttributfs(AttributfSft bttributfs) {}
        publid void sftRfsolvfPbrfnt(AttributfSft pbrfnt) {}
        publid String gftNbmf() {rfturn nbmf;}
        publid void bddCibngfListfnfr(CibngfListfnfr l) {}
        publid void rfmovfCibngfListfnfr(CibngfListfnfr l) {}
        publid CibngfListfnfr[] gftCibngfListfnfrs() {
            rfturn nfw CibngfListfnfr[0];
        }

        /** Tif nbmf of tif Stylf, wiidi is tif sflfdtor.
         * Tiis will NEVER dibngf!
         */
        String nbmf;
        /** Stbrt indfx of stylfs doming from otifr StylfSiffts. */
        privbtf int fxtfndfdIndfx;
    }


    /**
     * SflfdtorMbpping dontbins b spfdifitiy, bs bn intfgfr, bnd bn bssodibtfd
     * Stylf. It dbn blso rfffrfndf diildrfn <dodf>SflfdtorMbpping</dodf>s,
     * so tibt it bfibvfs likf b trff.
     * <p>
     * Tiis is not tirfbd sbff, it is bssumfd tif dbllfr will tbkf tif
     * nfdfssbry prfdbtions if tiis is to bf usfd in b tirfbdfd fnvironmfnt.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss SflfdtorMbpping implfmfnts Sfriblizbblf {
        publid SflfdtorMbpping(int spfdifidity) {
            tiis.spfdifidity = spfdifidity;
        }

        /**
         * Rfturns tif spfdifidity tiis mbpping rfprfsfnts.
         */
        publid int gftSpfdifidity() {
            rfturn spfdifidity;
        }

        /**
         * Sfts tif Stylf bssodibtfd witi tiis mbpping.
         */
        publid void sftStylf(Stylf stylf) {
            tiis.stylf = stylf;
        }

        /**
         * Rfturns tif Stylf bssodibtfd witi tiis mbpping.
         */
        publid Stylf gftStylf() {
            rfturn stylf;
        }

        /**
         * Rfturns tif diild mbpping idfntififd by tif simplf sflfdtor
         * <dodf>sflfdtor</dodf>. If b diild mbpping dofs not fxist for
         *<dodf>sflfdtor</dodf>, bnd <dodf>drfbtf</dodf> is truf, b nfw
         * onf will bf drfbtfd.
         */
        publid SflfdtorMbpping gftCiildSflfdtorMbpping(String sflfdtor,
                                                       boolfbn drfbtf) {
            SflfdtorMbpping rftVbluf = null;

            if (diildrfn != null) {
                rftVbluf = diildrfn.gft(sflfdtor);
            }
            flsf if (drfbtf) {
                diildrfn = nfw HbsiMbp<String, SflfdtorMbpping>(7);
            }
            if (rftVbluf == null && drfbtf) {
                int spfdifidity = gftCiildSpfdifidity(sflfdtor);

                rftVbluf = drfbtfCiildSflfdtorMbpping(spfdifidity);
                diildrfn.put(sflfdtor, rftVbluf);
            }
            rfturn rftVbluf;
        }

        /**
         * Crfbtfs b diild <dodf>SflfdtorMbpping</dodf> witi tif spfdififd
         * <dodf>spfdifidity</dodf>.
         */
        protfdtfd SflfdtorMbpping drfbtfCiildSflfdtorMbpping(int spfdifidity) {
            rfturn nfw SflfdtorMbpping(spfdifidity);
        }

        /**
         * Rfturns tif spfdifidity for tif diild sflfdtor
         * <dodf>sflfdtor</dodf>.
         */
        protfdtfd int gftCiildSpfdifidity(String sflfdtor) {
            // dlbss (.) 100
            // id (#)    10000
            dibr    firstCibr = sflfdtor.dibrAt(0);
            int     spfdifidity = gftSpfdifidity();

            if (firstCibr == '.') {
                spfdifidity += 100;
            }
            flsf if (firstCibr == '#') {
                spfdifidity += 10000;
            }
            flsf {
                spfdifidity += 1;
                if (sflfdtor.indfxOf('.') != -1) {
                    spfdifidity += 100;
                }
                if (sflfdtor.indfxOf('#') != -1) {
                    spfdifidity += 10000;
                }
            }
            rfturn spfdifidity;
        }

        /**
         * Tif spfdifidity for tiis sflfdtor.
         */
        privbtf int spfdifidity;
        /**
         * Stylf for tiis sflfdtor.
         */
        privbtf Stylf stylf;
        /**
         * Any sub sflfdtors. Kfy will bf String, bnd vbluf will bf
         * bnotifr SflfdtorMbpping.
         */
        privbtf HbsiMbp<String, SflfdtorMbpping> diildrfn;
    }


    // ---- Vbribblfs ---------------------------------------------

    finbl stbtid int DEFAULT_FONT_SIZE = 3;

    privbtf CSS dss;

    /**
     * An invfrtfd grbpi of tif sflfdtors.
     */
    privbtf SflfdtorMbpping sflfdtorMbpping;

    /** Mbps from sflfdtor (bs b string) to Stylf tibt indludfs bll
     * rflfvbnt stylfs. */
    privbtf Hbsitbblf<String, RfsolvfdStylf> rfsolvfdStylfs;

    /** Vfdtor of StylfSiffts tibt tif rulfs brf to rfffrfndf.
     */
    privbtf Vfdtor<StylfSifft> linkfdStylfSiffts;

    /** Wifrf tif stylf sifft wbs found. Usfd for rflbtivf imports. */
    privbtf URL bbsf;


    /**
     * Dffbult pbrsfr for CSS spfdifidbtions tibt gft lobdfd into
     * tif StylfSifft.<p>
     * Tiis dlbss is NOT tirfbd sbff, do not bsk it to pbrsf wiilf it is
     * in tif middlf of pbrsing.
     */
    dlbss CssPbrsfr implfmfnts CSSPbrsfr.CSSPbrsfrCbllbbdk {

        /**
         * Pbrsfs tif pbssfd in CSS dfdlbrbtion into bn AttributfSft.
         */
        publid AttributfSft pbrsfDfdlbrbtion(String string) {
            try {
                rfturn pbrsfDfdlbrbtion(nfw StringRfbdfr(string));
            } dbtdi (IOExdfption iof) {}
            rfturn null;
        }

        /**
         * Pbrsfs tif pbssfd in CSS dfdlbrbtion into bn AttributfSft.
         */
        publid AttributfSft pbrsfDfdlbrbtion(Rfbdfr r) tirows IOExdfption {
            pbrsf(bbsf, r, truf, fblsf);
            rfturn dfdlbrbtion.dopyAttributfs();
        }

        /**
         * Pbrsf tif givfn CSS strfbm
         */
        publid void pbrsf(URL bbsf, Rfbdfr r, boolfbn pbrsfDfdlbrbtion,
                          boolfbn isLink) tirows IOExdfption {
            tiis.bbsf = bbsf;
            tiis.isLink = isLink;
            tiis.pbrsingDfdlbrbtion = pbrsfDfdlbrbtion;
            dfdlbrbtion.rfmovfAttributfs(dfdlbrbtion);
            sflfdtorTokfns.rfmovfAllElfmfnts();
            sflfdtors.rfmovfAllElfmfnts();
            propfrtyNbmf = null;
            pbrsfr.pbrsf(r, tiis, pbrsfDfdlbrbtion);
        }

        //
        // CSSPbrsfrCbllbbdk mftiods, publid to implfmfnt tif intfrfbdf.
        //

        /**
         * Invokfd wifn b vblid @import is fndountfrfd, will dbll
         * <dodf>importStylfSifft</dodf> if b
         * <dodf>MblformfdURLExdfption</dodf> is not tirown in drfbting
         * tif URL.
         */
        publid void ibndlfImport(String importString) {
            URL url = CSS.gftURL(bbsf, importString);
            if (url != null) {
                importStylfSifft(url);
            }
        }

        /**
         * A sflfdtor ibs bffn fndountfrfd.
         */
        publid void ibndlfSflfdtor(String sflfdtor) {
            //dlbss bnd indfx sflfdtors brf dbsf sfnsitivf
            if (!(sflfdtor.stbrtsWiti(".")
                  || sflfdtor.stbrtsWiti("#"))) {
                sflfdtor = sflfdtor.toLowfrCbsf();
            }
            int lfngti = sflfdtor.lfngti();

            if (sflfdtor.fndsWiti(",")) {
                if (lfngti > 1) {
                    sflfdtor = sflfdtor.substring(0, lfngti - 1);
                    sflfdtorTokfns.bddElfmfnt(sflfdtor);
                }
                bddSflfdtor();
            }
            flsf if (lfngti > 0) {
                sflfdtorTokfns.bddElfmfnt(sflfdtor);
            }
        }

        /**
         * Invokfd wifn tif stbrt of b rulf is fndountfrfd.
         */
        publid void stbrtRulf() {
            if (sflfdtorTokfns.sizf() > 0) {
                bddSflfdtor();
            }
            propfrtyNbmf = null;
        }

        /**
         * Invokfd wifn b propfrty nbmf is fndountfrfd.
         */
        publid void ibndlfPropfrty(String propfrty) {
            propfrtyNbmf = propfrty;
        }

        /**
         * Invokfd wifn b propfrty vbluf is fndountfrfd.
         */
        publid void ibndlfVbluf(String vbluf) {
            if (propfrtyNbmf != null && vbluf != null && vbluf.lfngti() > 0) {
                CSS.Attributf dssKfy = CSS.gftAttributf(propfrtyNbmf);
                if (dssKfy != null) {
                    // Tifrf is durrfntly no mfdibnism to dftfrminf rfbl
                    // bbsf tibt stylf sifft wbs lobdfd from. For tif timf
                    // bfing, tiis mbps for LIST_STYLE_IMAGE, wiidi bppfbr
                    // to bf tif only onf tibt durrfntly mbttfrs. A morf
                    // gfnfrbl mfdibnism is dffinbtfly nffdfd.
                    if (dssKfy == CSS.Attributf.LIST_STYLE_IMAGE) {
                        if (vbluf != null && !vbluf.fqubls("nonf")) {
                            URL url = CSS.gftURL(bbsf, vbluf);

                            if (url != null) {
                                vbluf = url.toString();
                            }
                        }
                    }
                    bddCSSAttributf(dfdlbrbtion, dssKfy, vbluf);
                }
                propfrtyNbmf = null;
            }
        }

        /**
         * Invokfd wifn tif fnd of b rulf is fndountfrfd.
         */
        publid void fndRulf() {
            int n = sflfdtors.sizf();
            for (int i = 0; i < n; i++) {
                String[] sflfdtor = sflfdtors.flfmfntAt(i);
                if (sflfdtor.lfngti > 0) {
                    StylfSifft.tiis.bddRulf(sflfdtor, dfdlbrbtion, isLink);
                }
            }
            dfdlbrbtion.rfmovfAttributfs(dfdlbrbtion);
            sflfdtors.rfmovfAllElfmfnts();
        }

        privbtf void bddSflfdtor() {
            String[] sflfdtor = nfw String[sflfdtorTokfns.sizf()];
            sflfdtorTokfns.dopyInto(sflfdtor);
            sflfdtors.bddElfmfnt(sflfdtor);
            sflfdtorTokfns.rfmovfAllElfmfnts();
        }


        Vfdtor<String[]> sflfdtors = nfw Vfdtor<String[]>();
        Vfdtor<String> sflfdtorTokfns = nfw Vfdtor<String>();
        /** Nbmf of tif durrfnt propfrty. */
        String propfrtyNbmf;
        MutbblfAttributfSft dfdlbrbtion = nfw SimplfAttributfSft();
        /** Truf if pbrsing b dfdlbrbtion, tibt is tif Rfbdfr will not
         * dontbin b sflfdtor. */
        boolfbn pbrsingDfdlbrbtion;
        /** Truf if tif bttributfs brf doming from b linkfd/importfd stylf. */
        boolfbn isLink;
        /** Wifrf tif CSS stylfsifft livfs. */
        URL bbsf;
        CSSPbrsfr pbrsfr = nfw CSSPbrsfr();
    }

    void rfbbsfSizfMbp(int bbsf) {
        finbl int minimblFontSizf = 4;
        sizfMbp = nfw int[sizfMbpDffbult.lfngti];
        for (int i = 0; i < sizfMbpDffbult.lfngti; i++) {
            sizfMbp[i] = Mbti.mbx(bbsf * sizfMbpDffbult[i] /
                                  sizfMbpDffbult[CSS.bbsfFontSizfIndfx],
                                  minimblFontSizf);
        }

    }

    int[] gftSizfMbp() {
        rfturn sizfMbp;
    }
    boolfbn isW3CLfngtiUnits() {
        rfturn w3dLfngtiUnits;
    }

    /**
     * Tif HTML/CSS sizf modfl ibs sfvfn slots
     * tibt onf dbn bssign sizfs to.
     */
    stbtid finbl int sizfMbpDffbult[] = { 8, 10, 12, 14, 18, 24, 36 };

    privbtf int sizfMbp[] = sizfMbpDffbult;
    privbtf boolfbn w3dLfngtiUnits = fblsf;
}
