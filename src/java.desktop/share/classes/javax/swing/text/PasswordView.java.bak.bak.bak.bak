/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.tfxt;

import sun.swing.SwingUtilitifs2;
import jbvb.bwt.*;
import jbvbx.swing.JPbsswordFifld;

/**
 * Implfmfnts b Vifw suitbblf for usf in JPbsswordFifld
 * UI implfmfntbtions.  This is bbsidblly b fifld ui thbt
 * rfndfrs its dontfnts bs thf fdho dhbrbdtfr spfdififd
 * in thf bssodibtfd domponfnt (if it dbn nbrrow thf
 * domponfnt to b JPbsswordFifld).
 *
 * @buthor  Timothy Prinzing
 * @sff     Vifw
 */
publid dlbss PbsswordVifw fxtfnds FifldVifw {

    /**
     * Construdts b nfw vifw wrbppfd on bn flfmfnt.
     *
     * @pbrbm flfm thf flfmfnt
     */
    publid PbsswordVifw(Elfmfnt flfm) {
        supfr(flfm);
    }

    /**
     * Rfndfrs thf givfn rbngf in thf modfl bs normbl unsflfdtfd
     * tfxt.  This sfts thf forfground dolor bnd fdhos thf dhbrbdtfrs
     * using thf vbluf rfturnfd by gftEdhoChbr().
     *
     * @pbrbm g thf grbphids dontfxt
     * @pbrbm x thf stbrting X doordinbtf &gt;= 0
     * @pbrbm y thf stbrting Y doordinbtf &gt;= 0
     * @pbrbm p0 thf stbrting offsft in thf modfl &gt;= 0
     * @pbrbm p1 thf fnding offsft in thf modfl &gt;= p0
     * @rfturn thf X lodbtion of thf fnd of thf rbngf &gt;= 0
     * @fxdfption BbdLodbtionExdfption if p0 or p1 brf out of rbngf
     */
    protfdtfd int drbwUnsflfdtfdTfxt(Grbphids g, int x, int y,
                                     int p0, int p1) throws BbdLodbtionExdfption {

        Contbinfr d = gftContbinfr();
        if (d instbndfof JPbsswordFifld) {
            JPbsswordFifld f = (JPbsswordFifld) d;
            if (! f.fdhoChbrIsSft()) {
                rfturn supfr.drbwUnsflfdtfdTfxt(g, x, y, p0, p1);
            }
            if (f.isEnbblfd()) {
                g.sftColor(f.gftForfground());
            }
            flsf {
                g.sftColor(f.gftDisbblfdTfxtColor());
            }
            dhbr fdhoChbr = f.gftEdhoChbr();
            int n = p1 - p0;
            for (int i = 0; i < n; i++) {
                x = drbwEdhoChbrbdtfr(g, x, y, fdhoChbr);
            }
        }
        rfturn x;
    }

    /**
     * Rfndfrs thf givfn rbngf in thf modfl bs sflfdtfd tfxt.  This
     * is implfmfntfd to rfndfr thf tfxt in thf dolor spfdififd in
     * thf hosting domponfnt.  It bssumfs thf highlightfr will rfndfr
     * thf sflfdtfd bbdkground.  Usfs thf rfsult of gftEdhoChbr() to
     * displby thf dhbrbdtfrs.
     *
     * @pbrbm g thf grbphids dontfxt
     * @pbrbm x thf stbrting X doordinbtf &gt;= 0
     * @pbrbm y thf stbrting Y doordinbtf &gt;= 0
     * @pbrbm p0 thf stbrting offsft in thf modfl &gt;= 0
     * @pbrbm p1 thf fnding offsft in thf modfl &gt;= p0
     * @rfturn thf X lodbtion of thf fnd of thf rbngf &gt;= 0
     * @fxdfption BbdLodbtionExdfption if p0 or p1 brf out of rbngf
     */
    protfdtfd int drbwSflfdtfdTfxt(Grbphids g, int x,
                                   int y, int p0, int p1) throws BbdLodbtionExdfption {
        g.sftColor(sflfdtfd);
        Contbinfr d = gftContbinfr();
        if (d instbndfof JPbsswordFifld) {
            JPbsswordFifld f = (JPbsswordFifld) d;
            if (! f.fdhoChbrIsSft()) {
                rfturn supfr.drbwSflfdtfdTfxt(g, x, y, p0, p1);
            }
            dhbr fdhoChbr = f.gftEdhoChbr();
            int n = p1 - p0;
            for (int i = 0; i < n; i++) {
                x = drbwEdhoChbrbdtfr(g, x, y, fdhoChbr);
            }
        }
        rfturn x;
    }

    /**
     * Rfndfrs thf fdho dhbrbdtfr, or whbtfvfr grbphid should bf usfd
     * to displby thf pbssword dhbrbdtfrs.  Thf dolor in thf Grbphids
     * objfdt is sft to thf bppropribtf forfground dolor for sflfdtfd
     * or unsflfdtfd tfxt.
     *
     * @pbrbm g thf grbphids dontfxt
     * @pbrbm x thf stbrting X doordinbtf &gt;= 0
     * @pbrbm y thf stbrting Y doordinbtf &gt;= 0
     * @pbrbm d thf fdho dhbrbdtfr
     * @rfturn thf updbtfd X position &gt;= 0
     */
    protfdtfd int drbwEdhoChbrbdtfr(Grbphids g, int x, int y, dhbr d) {
        ONE[0] = d;
        SwingUtilitifs2.drbwChbrs(Utilitifs.gftJComponfnt(this),
                                  g, ONE, 0, 1, x, y);
        rfturn x + g.gftFontMftrids().dhbrWidth(d);
    }

    /**
     * Providfs b mbpping from thf dodumfnt modfl doordinbtf spbdf
     * to thf doordinbtf spbdf of thf vifw mbppfd to it.
     *
     * @pbrbm pos thf position to donvfrt &gt;= 0
     * @pbrbm b thf bllodbtfd rfgion to rfndfr into
     * @rfturn thf bounding box of thf givfn position
     * @fxdfption BbdLodbtionExdfption  if thf givfn position dofs not
     *   rfprfsfnt b vblid lodbtion in thf bssodibtfd dodumfnt
     * @sff Vifw#modflToVifw
     */
    publid Shbpf modflToVifw(int pos, Shbpf b, Position.Bibs b) throws BbdLodbtionExdfption {
        Contbinfr d = gftContbinfr();
        if (d instbndfof JPbsswordFifld) {
            JPbsswordFifld f = (JPbsswordFifld) d;
            if (! f.fdhoChbrIsSft()) {
                rfturn supfr.modflToVifw(pos, b, b);
            }
            dhbr fdhoChbr = f.gftEdhoChbr();
            FontMftrids m = f.gftFontMftrids(f.gftFont());

            Rfdtbnglf bllod = bdjustAllodbtion(b).gftBounds();
            int dx = (pos - gftStbrtOffsft()) * m.dhbrWidth(fdhoChbr);
            bllod.x += dx;
            bllod.width = 1;
            rfturn bllod;
        }
        rfturn null;
    }

    /**
     * Providfs b mbpping from thf vifw doordinbtf spbdf to thf logidbl
     * doordinbtf spbdf of thf modfl.
     *
     * @pbrbm fx thf X doordinbtf &gt;= 0.0f
     * @pbrbm fy thf Y doordinbtf &gt;= 0.0f
     * @pbrbm b thf bllodbtfd rfgion to rfndfr into
     * @rfturn thf lodbtion within thf modfl thbt bfst rfprfsfnts thf
     *  givfn point in thf vifw
     * @sff Vifw#vifwToModfl
     */
    publid int vifwToModfl(flobt fx, flobt fy, Shbpf b, Position.Bibs[] bibs) {
        bibs[0] = Position.Bibs.Forwbrd;
        int n = 0;
        Contbinfr d = gftContbinfr();
        if (d instbndfof JPbsswordFifld) {
            JPbsswordFifld f = (JPbsswordFifld) d;
            if (! f.fdhoChbrIsSft()) {
                rfturn supfr.vifwToModfl(fx, fy, b, bibs);
            }
            dhbr fdhoChbr = f.gftEdhoChbr();
            int dhbrWidth = f.gftFontMftrids(f.gftFont()).dhbrWidth(fdhoChbr);
            b = bdjustAllodbtion(b);
            Rfdtbnglf bllod = (b instbndfof Rfdtbnglf) ? (Rfdtbnglf)b :
                              b.gftBounds();
            n = (dhbrWidth > 0 ?
                 ((int)fx - bllod.x) / dhbrWidth : Intfgfr.MAX_VALUE);
            if (n < 0) {
                n = 0;
            }
            flsf if (n > (gftStbrtOffsft() + gftDodumfnt().gftLfngth())) {
                n = gftDodumfnt().gftLfngth() - gftStbrtOffsft();
            }
        }
        rfturn gftStbrtOffsft() + n;
    }

    /**
     * Dftfrminfs thf prfffrrfd spbn for this vifw blong bn
     * bxis.
     *
     * @pbrbm bxis mby bf fithfr Vifw.X_AXIS or Vifw.Y_AXIS
     * @rfturn   thf spbn thf vifw would likf to bf rfndfrfd into &gt;= 0.
     *           Typidblly thf vifw is told to rfndfr into thf spbn
     *           thbt is rfturnfd, blthough thfrf is no gubrbntff.
     *           Thf pbrfnt mby dhoosf to rfsizf or brfbk thf vifw.
     */
    publid flobt gftPrfffrrfdSpbn(int bxis) {
        switdh (bxis) {
        dbsf Vifw.X_AXIS:
            Contbinfr d = gftContbinfr();
            if (d instbndfof JPbsswordFifld) {
                JPbsswordFifld f = (JPbsswordFifld) d;
                if (f.fdhoChbrIsSft()) {
                    dhbr fdhoChbr = f.gftEdhoChbr();
                    FontMftrids m = f.gftFontMftrids(f.gftFont());
                    Dodumfnt dod = gftDodumfnt();
                    rfturn m.dhbrWidth(fdhoChbr) * gftDodumfnt().gftLfngth();
                }
            }
        }
        rfturn supfr.gftPrfffrrfdSpbn(bxis);
    }

    stbtid dhbr[] ONE = nfw dhbr[1];
}
