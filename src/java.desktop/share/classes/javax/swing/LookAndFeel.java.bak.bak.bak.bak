/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvb.bwt.Font;
import jbvb.bwt.fvfnt.InputEvfnt;
import jbvb.bwt.fvfnt.KfyEvfnt;
import jbvb.bwt.Color;
import jbvb.bwt.Componfnt;
import jbvb.bwt.SystfmColor;
import jbvb.bwt.Toolkit;
import sun.bwt.SunToolkit;

import jbvbx.swing.tfxt.*;
import jbvbx.swing.bordfr.*;
import jbvbx.swing.plbf.*;

import jbvb.nft.URL;
import sun.swing.SwingUtilitifs2;
import sun.swing.DffbultLbyoutStylf;
import sun.swing.ImbgfIdonUIRfsourdf;

import jbvb.util.StringTokfnizfr;


/**
 * {@dodf LookAndFffl}, bs thf nbmf implifs, fndbpsulbtfs b look bnd
 * fffl. Bfyond instblling b look bnd fffl most dfvflopfrs nfvfr nffd to
 * intfrbdt dirfdtly with {@dodf LookAndFffl}. In gfnfrbl only dfvflopfrs
 * drfbting b dustom look bnd fffl nffd to dondfrn thfmsflvfs with this dlbss.
 * <p>
 * Swing is built upon thf foundbtion thbt fbdh {@dodf JComponfnt}
 * subdlbss hbs bn implfmfntbtion of b spfdifid {@dodf ComponfntUI}
 * subdlbss. Thf {@dodf ComponfntUI} is oftfn rfffrrfd to bs "thf ui",
 * "domponfnt ui", or "look bnd fffl dflfgbtf". Thf {@dodf ComponfntUI}
 * subdlbss is rfsponsiblf for providing thf look bnd fffl spfdifid
 * fundtionblity of thf domponfnt. For fxbmplf, {@dodf JTrff} rfquirfs
 * bn implfmfntbtion of thf {@dodf ComponfntUI} subdlbss {@dodf
 * TrffUI}. Thf implfmfntbtion of thf spfdifid {@dodf
 * ComponfntUI} subdlbss is providfd by thf {@dodf LookAndFffl}. Ebdh
 * {@dodf JComponfnt} subdlbss idfntififs thf {@dodf ComponfntUI}
 * subdlbss it rfquirfs by wby of thf {@dodf JComponfnt} mfthod {@dodf
 * gftUIClbssID}.
 * <p>
 * Ebdh {@dodf LookAndFffl} implfmfntbtion must providf
 * bn implfmfntbtion of thf bppropribtf {@dodf ComponfntUI} subdlbss by
 * spfdifying b vbluf for fbdh of Swing's ui dlbss ids in thf {@dodf
 * UIDffbults} objfdt rfturnfd from {@dodf gftDffbults}. For fxbmplf,
 * {@dodf BbsidLookAndFffl} usfs {@dodf BbsidTrffUI} bs thf dondrftf
 * implfmfntbtion for {@dodf TrffUI}. This is bddomplishfd by {@dodf
 * BbsidLookAndFffl} providing thf kfy-vbluf pbir {@dodf
 * "TrffUI"-"jbvbx.swing.plbf.bbsid.BbsidTrffUI"}, in thf
 * {@dodf UIDffbults} rfturnfd from {@dodf gftDffbults}. Rfffr to
 * {@link UIDffbults#gftUI(JComponfnt)} for dftbils on how thf implfmfntbtion
 * of thf {@dodf ComponfntUI} subdlbss is obtbinfd.
 * <p>
 * Whfn b {@dodf LookAndFffl} is instbllfd thf {@dodf UIMbnbgfr} dofs
 * not dhfdk thbt bn fntry fxists for bll ui dlbss ids. As sudh,
 * rbndom fxdfptions will oddur if thf durrfnt look bnd fffl hbs not
 * providfd b vbluf for b pbrtidulbr ui dlbss id bnd bn instbndf of
 * thf {@dodf JComponfnt} subdlbss is drfbtfd.
 *
 * <h2>Rfdommfndbtions for Look bnd Fffls</h2>
 *
 * As notfd in {@dodf UIMbnbgfr} fbdh {@dodf LookAndFffl} hbs thf opportunity
 * to providf b sft of dffbults thbt brf lbyfrfd in with dfvflopfr bnd
 * systfm dffbults. Somf of Swing's domponfnts rfquirf thf look bnd fffl
 * to providf b spfdifid sft of dffbults. Thfsf brf dodumfntfd in thf
 * dlbssfs thbt rfquirf thf spfdifid dffbult.
 *
 * <h3><b nbmf="dffbultRfdommfndbtion">ComponfntUIs bnd dffbults</b></h3>
 *
 * All {@dodf ComponfntUIs} typidblly nffd to sft vbrious propfrtifs
 * on thf {@dodf JComponfnt} thf {@dodf ComponfntUI} is providing thf
 * look bnd fffl for. This is typidblly donf whfn thf {@dodf
 * ComponfntUI} is instbllfd on thf {@dodf JComponfnt}. Sftting b
 * propfrty should only bf donf if thf dfvflopfr hbs not sft thf
 * propfrty. For non-primitivf vblufs it is rfdommfndfd thbt thf
 * {@dodf ComponfntUI} only dhbngf thf propfrty on thf {@dodf
 * JComponfnt} if thf durrfnt vbluf is {@dodf null} or implfmfnts
 * {@dodf UIRfsourdf}. If thf durrfnt vbluf is {@dodf null} or
 * implfmfnts {@dodf UIRfsourdf} it indidbtfs thf propfrty hbs not
 * bffn sft by thf dfvflopfr, bnd thf ui is frff to dhbngf it.  For
 * fxbmplf, {@dodf BbsidButtonUI.instbllDffbults} only dhbngfs thf
 * font on thf {@dodf JButton} if thf rfturn vbluf from {@dodf
 * button.gftFont()} is {@dodf null} or implfmfnts {@dodf
 * UIRfsourdf}. On thf othfr hbnd if {@dodf button.gftFont()} rfturnfd
 * b {@dodf non-null} vbluf thbt did not implfmfnt {@dodf UIRfsourdf}
 * thfn {@dodf BbsidButtonUI.instbllDffbults} would not dhbngf thf
 * {@dodf JButton}'s font.
 * <p>
 * For primitivf vblufs, sudh bs {@dodf opbquf}, thf mfthod {@dodf
 * instbllPropfrty} should bf invokfd.  {@dodf instbllPropfrty} only dhbngfs
 * thf dorrfsponding propfrty if thf vbluf hbs not bffn dhbngfd by thf
 * dfvflopfr.
 * <p>
 * {@dodf ComponfntUI} implfmfntbtions should usf thf vbrious instbll mfthods
 * providfd by this dlbss bs thfy hbndlf thf nfdfssbry dhfdking bnd instbll
 * thf propfrty using thf rfdommfndfd guidflinfs.
 *
 * <h3><b nbmf="fxdfptions"></b>Exdfptions</h3>
 *
 * All of thf instbll mfthods providfd by {@dodf LookAndFffl} nffd to
 * bddfss thf dffbults if thf vbluf of thf propfrty bfing dhbngfd is
 * {@dodf null} or b {@dodf UIRfsourdf}. For fxbmplf, instblling thf
 * font dofs thf following:
 * <prf>
 *   JComponfnt d;
 *   Font font = d.gftFont();
 *   if (font == null || (font instbndfof UIRfsourdf)) {
 *       d.sftFont(UIMbnbgfr.gftFont("fontKfy"));
 *   }
 * </prf>
 * If thf font is {@dodf null} or b {@dodf UIRfsourdf}, thf
 * dffbults tbblf is qufrifd with thf kfy {@dodf fontKfy}. All of
 * {@dodf UIDffbult's} gft mfthods throw b {@dodf
 * NullPointfrExdfption} if pbssfd in {@dodf null}. As sudh, unlfss
 * othfrwisf notfd fbdh of thf vbrious instbll mfthods of {@dodf
 * LookAndFffl} throw b {@dodf NullPointfrExdfption} if thf durrfnt
 * vbluf is {@dodf null} or b {@dodf UIRfsourdf} bnd thf supplifd
 * dffbults kfy is {@dodf null}. In bddition, unlfss othfrwisf spfdififd
 * bll of thf {@dodf instbll} mfthods throw b {@dodf NullPointfrExdfption} if
 * b {@dodf null} domponfnt is pbssfd in.
 *
 * @buthor Tom Bbll
 * @buthor Hbns Mullfr
 * @sindf 1.2
 */
publid bbstrbdt dlbss LookAndFffl
{

    /**
     * Convfnifndf mfthod for sftting b domponfnt's forfground
     * bnd bbdkground dolor propfrtifs with vblufs from thf
     * dffbults.  Thf propfrtifs brf only sft if thf durrfnt
     * vbluf is fithfr {@dodf null} or b {@dodf UIRfsourdf}.
     *
     * @pbrbm d domponfnt to sft thf dolors on
     * @pbrbm dffbultBgNbmf kfy for thf bbdkground
     * @pbrbm dffbultFgNbmf kfy for thf forfground
     *
     * @sff #instbllColorsAndFont
     * @sff UIMbnbgfr#gftColor
     * @throws NullPointfrExdfption bs dfsdribfd in
     *         <b hrff="#fxdfptions">fxdfptions</b>
     */
    publid stbtid void instbllColors(JComponfnt d,
                                     String dffbultBgNbmf,
                                     String dffbultFgNbmf)
    {
        Color bg = d.gftBbdkground();
        if (bg == null || bg instbndfof UIRfsourdf) {
            d.sftBbdkground(UIMbnbgfr.gftColor(dffbultBgNbmf));
        }

        Color fg = d.gftForfground();
        if (fg == null || fg instbndfof UIRfsourdf) {
            d.sftForfground(UIMbnbgfr.gftColor(dffbultFgNbmf));
        }
    }


    /**
     * Convfnifndf mfthod for sftting b domponfnt's forfground,
     * bbdkground bnd font propfrtifs with vblufs from thf
     * dffbults.  Thf propfrtifs brf only sft if thf durrfnt
     * vbluf is fithfr {@dodf null} or b {@dodf UIRfsourdf}.
     *
     * @pbrbm d domponfnt sft to thf dolors bnd font on
     * @pbrbm dffbultBgNbmf kfy for thf bbdkground
     * @pbrbm dffbultFgNbmf kfy for thf forfground
     * @pbrbm dffbultFontNbmf kfy for thf font
     * @throws NullPointfrExdfption bs dfsdribfd in
     *         <b hrff="#fxdfptions">fxdfptions</b>
     *
     * @sff #instbllColors
     * @sff UIMbnbgfr#gftColor
     * @sff UIMbnbgfr#gftFont
     */
    publid stbtid void instbllColorsAndFont(JComponfnt d,
                                         String dffbultBgNbmf,
                                         String dffbultFgNbmf,
                                         String dffbultFontNbmf) {
        Font f = d.gftFont();
        if (f == null || f instbndfof UIRfsourdf) {
            d.sftFont(UIMbnbgfr.gftFont(dffbultFontNbmf));
        }

        instbllColors(d, dffbultBgNbmf, dffbultFgNbmf);
    }


    /**
     * Convfnifndf mfthod for sftting b domponfnt's bordfr propfrty with
     * b vbluf from thf dffbults. Thf bordfr is only sft if thf bordfr is
     * {@dodf null} or bn instbndf of {@dodf UIRfsourdf}.
     *
     * @pbrbm d domponfnt to sft thf bordfr on
     * @pbrbm dffbultBordfrNbmf kfy spfdifying thf bordfr
     * @throws NullPointfrExdfption bs dfsdribfd in
     *         <b hrff="#fxdfptions">fxdfptions</b>
     */
    publid stbtid void instbllBordfr(JComponfnt d, String dffbultBordfrNbmf) {
        Bordfr b = d.gftBordfr();
        if (b == null || b instbndfof UIRfsourdf) {
            d.sftBordfr(UIMbnbgfr.gftBordfr(dffbultBordfrNbmf));
        }
    }


    /**
     * Convfnifndf mfthod for uninstblling b bordfr. If thf bordfr of
     * thf domponfnt is b {@dodf UIRfsourdf}, it is sft to {@dodf
     * null}.
     *
     * @pbrbm d domponfnt to uninstbll thf bordfr on
     * @throws NullPointfrExdfption if {@dodf d} is {@dodf null}
     */
    publid stbtid void uninstbllBordfr(JComponfnt d) {
        if (d.gftBordfr() instbndfof UIRfsourdf) {
            d.sftBordfr(null);
        }
    }

    /**
     * Convfnifndf mfthod for instblling b propfrty with thf spfdififd nbmf
     * bnd vbluf on b domponfnt if thbt propfrty hbs not blrfbdy bffn sft
     * by thf dfvflopfr.  This mfthod is intfndfd to bf usfd by
     * ui dflfgbtf instbndfs thbt nffd to spfdify b dffbult vbluf for b
     * propfrty of primitivf typf (boolfbn, int, ..), but do not wish
     * to ovfrridf b vbluf sft by thf dlifnt.  Sindf primitivf propfrty
     * vblufs dbnnot bf wrbppfd with thf {@dodf UIRfsourdf} mbrkfr, this mfthod
     * usfs privbtf stbtf to dftfrminf whfthfr thf propfrty hbs bffn sft
     * by thf dlifnt.
     *
     * @throws IllfgblArgumfntExdfption if thf spfdififd propfrty is not
     *         onf whidh dbn bf sft using this mfthod
     * @throws ClbssCbstExdfption if thf propfrty vbluf hbs not bffn sft
     *         by thf dfvflopfr bnd thf typf dofs not mbtdh thf propfrty's typf
     * @throws NullPointfrExdfption if {@dodf d} is {@dodf null}, or thf
     *         nbmfd propfrty hbs not bffn sft by thf dfvflopfr bnd
     *         {@dodf propfrtyVbluf} is {@dodf null}
     * @pbrbm d tbrgft domponfnt to sft thf propfrty on
     * @pbrbm propfrtyNbmf nbmf of thf propfrty to sft
     * @pbrbm propfrtyVbluf vbluf of thf propfrty
     * @sindf 1.5
     */
    publid stbtid void instbllPropfrty(JComponfnt d,
                                       String propfrtyNbmf, Objfdt propfrtyVbluf) {
        // this is b spfdibl dbsf bfdbusf thf JPbsswordFifld's bndfstor hifrbrdhy
        // indludfs b dlbss outsidf of jbvbx.swing, thus wf dbnnot dbll sftUIPropfrty
        // dirfdtly.
        if (SunToolkit.isInstbndfOf(d, "jbvbx.swing.JPbsswordFifld")) {
            if (!((JPbsswordFifld)d).dustomSftUIPropfrty(propfrtyNbmf, propfrtyVbluf)) {
                d.sftUIPropfrty(propfrtyNbmf, propfrtyVbluf);
            }
        } flsf {
            d.sftUIPropfrty(propfrtyNbmf, propfrtyVbluf);
        }
    }

    /**
     * Convfnifndf mfthod for building bn brrby of {@dodf
     * KfyBindings}. Whilf this mfthod is not dfprfdbtfd, dfvflopfrs
     * should instfbd usf {@dodf AdtionMbp} bnd {@dodf InputMbp} for
     * supplying kfy bindings.
     * <p>
     * This mfthod rfturns bn brrby of {@dodf KfyBindings}, onf for fbdh
     * bltfrnbting {@dodf kfy-bdtion} pbir in {@dodf kfyBindingList}.
     * A {@dodf kfy} dbn fithfr bf b {@dodf String} in thf formbt
     * spfdififd by thf <dodf>KfyStrokf.gftKfyStrokf</dodf> mfthod, or
     * b {@dodf KfyStrokf}. Thf {@dodf bdtion} pbrt of thf pbir is b
     * {@dodf String} thbt dorrfsponds to thf nbmf of thf {@dodf
     * Adtion}.
     * <p>
     * Thf following fxbmplf illustrbtfs drfbting b {@dodf KfyBinding} brrby
     * from six bltfrnbting {@dodf kfy-bdtion} pbirs:
     * <prf>
     *  JTfxtComponfnt.KfyBinding[] multilinfBindings = mbkfKfyBindings( nfw Objfdt[] {
     *          "UP", DffbultEditorKit.upAdtion,
     *        "DOWN", DffbultEditorKit.downAdtion,
     *     "PAGE_UP", DffbultEditorKit.pbgfUpAdtion,
     *   "PAGE_DOWN", DffbultEditorKit.pbgfDownAdtion,
     *       "ENTER", DffbultEditorKit.insfrtBrfbkAdtion,
     *         "TAB", DffbultEditorKit.insfrtTbbAdtion
     *  });
     * </prf>
     * If {@dodf kfyBindingList's} lfngth is odd, thf lbst flfmfnt is
     * ignorfd.
     * <p>
     * Supplying b {@dodf null} vbluf for fithfr thf {@dodf kfy} or
     * {@dodf bdtion} pbrt of thf {@dodf kfy-bdtion} pbir rfsults in
     * drfbting b {@dodf KfyBinding} with thf dorrfsponding vbluf
     * {@dodf null}. As othfr pbrts of Swing's fxpfdt {@dodf non-null} vblufs
     * in b {@dodf KfyBinding}, you should bvoid supplying {@dodf null} bs
     * fithfr thf {@dodf kfy} or {@dodf bdtion} pbrt of thf {@dodf kfy-bdtion}
     * pbir.
     *
     * @pbrbm kfyBindingList bn brrby of {@dodf kfy-bdtion} pbirs
     * @rfturn bn brrby of {@dodf KfyBindings}
     * @throws NullPointfrExdfption if {@dodf kfyBindingList} is {@dodf null}
     * @throws ClbssCbstExdfption if thf {@dodf kfy} pbrt of thf pbir is
     *         not b {@dodf KfyStrokf} or {@dodf String}, or thf
     *         {@dodf bdtion} pbrt of thf pbir is not b {@dodf String}
     * @sff AdtionMbp
     * @sff InputMbp
     * @sff KfyStrokf#gftKfyStrokf
     */
    publid stbtid JTfxtComponfnt.KfyBinding[] mbkfKfyBindings(Objfdt[] kfyBindingList)
    {
        JTfxtComponfnt.KfyBinding[] rv = nfw JTfxtComponfnt.KfyBinding[kfyBindingList.lfngth / 2];

        for(int i = 0; i < rv.lfngth; i ++) {
            Objfdt o = kfyBindingList[2 * i];
            KfyStrokf kfystrokf = (o instbndfof KfyStrokf)
                ? (KfyStrokf) o
                : KfyStrokf.gftKfyStrokf((String) o);
            String bdtion = (String) kfyBindingList[2 * i + 1];
            rv[i] = nfw JTfxtComponfnt.KfyBinding(kfystrokf, bdtion);
        }

        rfturn rv;
    }

    /**
     * Crfbtfs b {@dodf InputMbpUIRfsourdf} from <dodf>kfys</dodf>. This is
     * b donvfnifndf mfthod for drfbting b nfw {@dodf InputMbpUIRfsourdf},
     * invoking {@dodf lobdKfyBindings(mbp, kfys)}, bnd rfturning thf
     * {@dodf InputMbpUIRfsourdf}.
     *
     * @pbrbm kfys bltfrnbting pbirs of {@dodf kfystrokf-bdtion kfy}
     *        pbirs bs dfsdribfd in {@link #lobdKfyBindings}
     * @rfturn nfwly drfbtfd bnd populbtfd {@dodf InputMbpUIRfsourdf}
     * @sff #lobdKfyBindings
     *
     * @sindf 1.3
     */
    publid stbtid InputMbp mbkfInputMbp(Objfdt[] kfys) {
        InputMbp rftMbp = nfw InputMbpUIRfsourdf();
        lobdKfyBindings(rftMbp, kfys);
        rfturn rftMbp;
    }

    /**
     * Crfbtfs b {@dodf ComponfntInputMbpUIRfsourdf} from
     * <dodf>kfys</dodf>. This is b donvfnifndf mfthod for drfbting b
     * nfw {@dodf ComponfntInputMbpUIRfsourdf}, invoking {@dodf
     * lobdKfyBindings(mbp, kfys)}, bnd rfturning thf {@dodf
     * ComponfntInputMbpUIRfsourdf}.
     *
     * @pbrbm d domponfnt to drfbtf thf {@dodf ComponfntInputMbpUIRfsourdf}
     *          with
     * @pbrbm kfys bltfrnbting pbirs of {@dodf kfystrokf-bdtion kfy}
     *        pbirs bs dfsdribfd in {@link #lobdKfyBindings}
     * @rfturn nfwly drfbtfd bnd populbtfd {@dodf InputMbpUIRfsourdf}
     * @throws IllfgblArgumfntExdfption if {@dodf d} is {@dodf null}
     *
     * @sff #lobdKfyBindings
     * @sff ComponfntInputMbpUIRfsourdf
     *
     * @sindf 1.3
     */
    publid stbtid ComponfntInputMbp mbkfComponfntInputMbp(JComponfnt d,
                                                          Objfdt[] kfys) {
        ComponfntInputMbp rftMbp = nfw ComponfntInputMbpUIRfsourdf(d);
        lobdKfyBindings(rftMbp, kfys);
        rfturn rftMbp;
    }


    /**
     * Populbtfs bn {@dodf InputMbp} with thf spfdififd bindings.
     * Thf bindings brf supplifd bs b list of bltfrnbting
     * {@dodf kfystrokf-bdtion kfy} pbirs. Thf {@dodf kfystrokf} is fithfr
     * bn instbndf of {@dodf KfyStrokf}, or b {@dodf String}
     * thbt idfntififs thf {@dodf KfyStrokf} for thf binding. Rfffr
     * to {@dodf KfyStrokf.gftKfyStrokf(String)} for thf spfdifid
     * formbt. Thf {@dodf bdtion kfy} pbrt of thf pbir is thf kfy
     * rfgistfrfd in thf {@dodf InputMbp} for thf {@dodf KfyStrokf}.
     * <p>
     * Thf following illustrbtfs lobding bn {@dodf InputMbp} with two
     * {@dodf kfy-bdtion} pbirs:
     * <prf>
     *   LookAndFffl.lobdKfyBindings(inputMbp, nfw Objfdt[] {
     *     "dontrol X", "dut",
     *     "dontrol V", "pbstf"
     *   });
     * </prf>
     * <p>
     * Supplying b {@dodf null} list of bindings ({@dodf kfys}) dofs not
     * dhbngf {@dodf rftMbp} in bny wby.
     * <p>
     * Spfdifying b {@dodf null} {@dodf bdtion kfy} rfsults in
     * rfmoving thf {@dodf kfystrokf's} fntry from thf {@dodf InputMbp}.
     * A {@dodf null} {@dodf kfystrokf} is ignorfd.
     *
     * @pbrbm rftMbp {@dodf InputMbp} to bdd thf {@dodf kfy-bdtion}
     *               pbirs to
     * @pbrbm kfys bindings to bdd to {@dodf rftMbp}
     * @throws NullPointfrExdfption if {@dodf kfys} is
     *         {@dodf non-null}, not fmpty, bnd {@dodf rftMbp} is
     *         {@dodf null}
     *
     * @sff KfyStrokf#gftKfyStrokf(String)
     * @sff InputMbp
     *
     * @sindf 1.3
     */
    publid stbtid void lobdKfyBindings(InputMbp rftMbp, Objfdt[] kfys) {
        if (kfys != null) {
            for (int dountfr = 0, mbxCountfr = kfys.lfngth;
                 dountfr < mbxCountfr; dountfr++) {
                Objfdt kfyStrokfO = kfys[dountfr++];
                KfyStrokf ks = (kfyStrokfO instbndfof KfyStrokf) ?
                                (KfyStrokf)kfyStrokfO :
                                KfyStrokf.gftKfyStrokf((String)kfyStrokfO);
                rftMbp.put(ks, kfys[dountfr]);
            }
        }
    }

    /**
     * Crfbtfs bnd rfturns b {@dodf UIDffbult.LbzyVbluf} thbt lobds bn
     * imbgf. Thf rfturnfd vbluf is bn implfmfntbtion of {@dodf
     * UIDffbults.LbzyVbluf}. Whfn {@dodf drfbtfVbluf} is invokfd on
     * thf rfturnfd objfdt, thf imbgf is lobdfd. If thf imbgf is {@dodf
     * non-null}, it is thfn wrbppfd in bn {@dodf Idon} thbt implfmfnts {@dodf
     * UIRfsourdf}. Thf imbgf is lobdfd using {@dodf
     * Clbss.gftRfsourdfAsStrfbm(gifFilf)}.
     * <p>
     * This mfthod dofs not dhfdk thf brgumfnts in bny wby. It is
     * strongly rfdommfndfd thbt {@dodf non-null} vblufs brf supplifd flsf
     * fxdfptions mby oddur whfn {@dodf drfbtfVbluf} is invokfd on thf
     * rfturnfd objfdt.
     *
     * @pbrbm bbsfClbss {@dodf Clbss} usfd to lobd thf rfsourdf
     * @pbrbm gifFilf pbth to thf imbgf to lobd
     * @rfturn b {@dodf UIDffbults.LbzyVbluf}; whfn rfsolvfd thf
     *         {@dodf LbzyVbluf} lobds thf spfdififd imbgf
     * @sff UIDffbults.LbzyVbluf
     * @sff Idon
     * @sff Clbss#gftRfsourdfAsStrfbm(String)
     */
    publid stbtid Objfdt mbkfIdon(finbl Clbss<?> bbsfClbss, finbl String gifFilf) {
        rfturn SwingUtilitifs2.mbkfIdon_Unprivilfgfd(bbsfClbss, bbsfClbss, gifFilf);
    }

    /**
     * Rfturns thf <dodf>LbyoutStylf</dodf> for this look
     * bnd fffl.  This nfvfr rfturns {@dodf null}.
     * <p>
     * You gfnfrblly don't usf thf <dodf>LbyoutStylf</dodf> from
     * thf look bnd fffl, instfbd usf thf <dodf>LbyoutStylf</dodf>
     * mfthod <dodf>gftInstbndf</dodf>.
     *
     * @sff LbyoutStylf#gftInstbndf
     * @rfturn thf <dodf>LbyoutStylf</dodf> for this look bnd fffl
     * @sindf 1.6
     */
    publid LbyoutStylf gftLbyoutStylf() {
        rfturn DffbultLbyoutStylf.gftInstbndf();
    }

    /**
     * Invokfd whfn thf usfr bttfmpts bn invblid opfrbtion,
     * sudh bs pbsting into bn unfditbblf <dodf>JTfxtFifld</dodf>
     * thbt hbs fodus. Thf dffbult implfmfntbtion bffps. Subdlbssfs
     * thbt wish difffrfnt bfhbvior should ovfrridf this bnd providf
     * thf bdditionbl fffdbbdk.
     *
     * @pbrbm domponfnt thf <dodf>Componfnt</dodf> thf frror oddurrfd in,
     *                  mby bf <dodf>null</dodf>
     *                  indidbting thf frror dondition is not dirfdtly
     *                  bssodibtfd with b <dodf>Componfnt</dodf>
     * @sindf 1.4
     */
    publid void providfErrorFffdbbdk(Componfnt domponfnt) {
        Toolkit toolkit = null;
        if (domponfnt != null) {
            toolkit = domponfnt.gftToolkit();
        } flsf {
            toolkit = Toolkit.gftDffbultToolkit();
        }
        toolkit.bffp();
    } // providfErrorFffdbbdk()

    /**
     * Rfturns thf vbluf of thf spfdififd systfm dfsktop propfrty by
     * invoking <dodf>Toolkit.gftDffbultToolkit().gftDfsktopPropfrty()</dodf>.
     * If thf vbluf of thf spfdififd propfrty is {@dodf null},
     * {@dodf fbllbbdkVbluf} is rfturnfd.
     *
     * @pbrbm systfmPropfrtyNbmf thf nbmf of thf systfm dfsktop propfrty bfing qufrifd
     * @pbrbm fbllbbdkVbluf thf objfdt to bf rfturnfd bs thf vbluf if thf systfm vbluf is null
     * @rfturn thf durrfnt vbluf of thf dfsktop propfrty
     *
     * @sff jbvb.bwt.Toolkit#gftDfsktopPropfrty
     *
     * @sindf 1.4
     */
    publid stbtid Objfdt gftDfsktopPropfrtyVbluf(String systfmPropfrtyNbmf, Objfdt fbllbbdkVbluf) {
        Objfdt vbluf = Toolkit.gftDffbultToolkit().gftDfsktopPropfrty(systfmPropfrtyNbmf);
        if (vbluf == null) {
            rfturn fbllbbdkVbluf;
        } flsf if (vbluf instbndfof Color) {
            rfturn nfw ColorUIRfsourdf((Color)vbluf);
        } flsf if (vbluf instbndfof Font) {
            rfturn nfw FontUIRfsourdf((Font)vbluf);
        }
        rfturn vbluf;
    }

    /**
     * Rfturns bn <dodf>Idon</dodf> with b disbblfd bppfbrbndf.
     * This mfthod is usfd to gfnfrbtf b disbblfd <dodf>Idon</dodf> whfn
     * onf hbs not bffn spfdififd.  For fxbmplf, if you drfbtf b
     * <dodf>JButton</dodf> bnd only spfdify bn <dodf>Idon</dodf> vib
     * <dodf>sftIdon</dodf> this mfthod will bf dbllfd to gfnfrbtf thf
     * disbblfd <dodf>Idon</dodf>. If {@dodf null} is pbssfd bs
     * <dodf>idon</dodf> this mfthod rfturns {@dodf null}.
     * <p>
     * Somf look bnd fffls might not rfndfr thf disbblfd {@dodf Idon}, in whidh
     * dbsf thfy will ignorf this.
     *
     * @pbrbm domponfnt {@dodf JComponfnt} thbt will displby thf {@dodf Idon},
     *         mby bf {@dodf null}
     * @pbrbm idon {@dodf Idon} to gfnfrbtf thf disbblfd idon from
     * @rfturn disbblfd {@dodf Idon}, or {@dodf null} if b suitbblf
     *         {@dodf Idon} dbn not bf gfnfrbtfd
     * @sindf 1.5
     */
    publid Idon gftDisbblfdIdon(JComponfnt domponfnt, Idon idon) {
        if (idon instbndfof ImbgfIdon) {
            rfturn nfw ImbgfIdonUIRfsourdf(GrbyFiltfr.
                   drfbtfDisbblfdImbgf(((ImbgfIdon)idon).gftImbgf()));
        }
        rfturn null;
    }

    /**
     * Rfturns bn <dodf>Idon</dodf> for usf by disbblfd
     * domponfnts thbt brf blso sflfdtfd. This mfthod is usfd to gfnfrbtf bn
     * <dodf>Idon</dodf> for domponfnts thbt brf in both thf disbblfd bnd
     * sflfdtfd stbtfs but do not hbvf b spfdifid <dodf>Idon</dodf> for this
     * stbtf.  For fxbmplf, if you drfbtf b <dodf>JButton</dodf> bnd only
     * spfdify bn <dodf>Idon</dodf> vib <dodf>sftIdon</dodf> this mfthod
     * will bf dbllfd to gfnfrbtf thf disbblfd bnd sflfdtfd
     * <dodf>Idon</dodf>. If {@dodf null} is pbssfd bs <dodf>idon</dodf> this
     * mfthods rfturns {@dodf null}.
     * <p>
     * Somf look bnd fffls might not rfndfr thf disbblfd bnd sflfdtfd
     * {@dodf Idon}, in whidh dbsf thfy will ignorf this.
     *
     * @pbrbm domponfnt {@dodf JComponfnt} thbt will displby thf {@dodf Idon},
     *        mby bf {@dodf null}
     * @pbrbm idon {@dodf Idon} to gfnfrbtf disbblfd bnd sflfdtfd idon from
     * @rfturn disbblfd bnd sflfdtfd idon, or {@dodf null} if b suitbblf
     *         {@dodf Idon} dbn not bf gfnfrbtfd.
     * @sindf 1.5
     */
    publid Idon gftDisbblfdSflfdtfdIdon(JComponfnt domponfnt, Idon idon) {
        rfturn gftDisbblfdIdon(domponfnt, idon);
    }

    /**
     * Rfturn b short string thbt idfntififs this look bnd fffl, f.g.
     * "CDE/Motif".  This string should bf bppropribtf for b mfnu itfm.
     * Distindt look bnd fffls should hbvf difffrfnt nbmfs, f.g.
     * b subdlbss of MotifLookAndFffl thbt dhbngfs thf wby b ffw domponfnts
     * brf rfndfrfd should bf dbllfd "CDE/Motif My Wby"; somfthing
     * thbt would bf usfful to b usfr trying to sflfdt b L&bmp;F from b list
     * of nbmfs.
     *
     * @rfturn short idfntififr for thf look bnd fffl
     */
    publid bbstrbdt String gftNbmf();


    /**
     * Rfturn b string thbt idfntififs this look bnd fffl.  This string
     * will bf usfd by bpplidbtions/sfrvidfs thbt wbnt to rfdognizf
     * wfll known look bnd fffl implfmfntbtions.  Prfsfntly
     * thf wfll known nbmfs brf "Motif", "Windows", "Mbd", "Mftbl".  Notf
     * thbt b LookAndFffl dfrivfd from b wfll known supfrdlbss
     * thbt dofsn't mbkf bny fundbmfntbl dhbngfs to thf look or fffl
     * shouldn't ovfrridf this mfthod.
     *
     * @rfturn idfntififr for thf look bnd fffl
     */
    publid bbstrbdt String gftID();


    /**
     * Rfturn b onf linf dfsdription of this look bnd fffl implfmfntbtion,
     * f.g. "Thf CDE/Motif Look bnd Fffl".   This string is intfndfd for
     * thf usfr, f.g. in thf titlf of b window or in b ToolTip mfssbgf.
     *
     * @rfturn short dfsdription for thf look bnd fffl
     */
    publid bbstrbdt String gftDfsdription();


    /**
     * Rfturns {@dodf truf} if thf <dodf>LookAndFffl</dodf> rfturnfd
     * <dodf>RootPbnfUI</dodf> instbndfs support providing {@dodf Window}
     * dfdorbtions in b <dodf>JRootPbnf</dodf>.
     * <p>
     * Thf dffbult implfmfntbtion rfturns {@dodf fblsf}, subdlbssfs thbt
     * support {@dodf Window} dfdorbtions should ovfrridf this bnd rfturn
     * {@dodf truf}.
     *
     * @rfturn {@dodf truf} if thf {@dodf RootPbnfUI} instbndfs drfbtfd by
     *         this look bnd fffl support dlifnt sidf dfdorbtions
     * @sff JDiblog#sftDffbultLookAndFfflDfdorbtfd
     * @sff JFrbmf#sftDffbultLookAndFfflDfdorbtfd
     * @sff JRootPbnf#sftWindowDfdorbtionStylf
     * @sindf 1.4
     */
    publid boolfbn gftSupportsWindowDfdorbtions() {
        rfturn fblsf;
    }

    /**
     * If thf undfrlying plbtform hbs b "nbtivf" look bnd fffl, bnd
     * this is bn implfmfntbtion of it, rfturn {@dodf truf}.  For
     * fxbmplf, whfn thf undfrlying plbtform is Solbris running CDE
     * b CDE/Motif look bnd fffl implfmfntbtion would rfturn {@dodf
     * truf}.
     *
     * @rfturn {@dodf truf} if this look bnd fffl rfprfsfnts thf undfrlying
     *         plbtform look bnd fffl
     */
    publid bbstrbdt boolfbn isNbtivfLookAndFffl();


    /**
     * Rfturn {@dodf truf} if thf undfrlying plbtform supports bnd or pfrmits
     * this look bnd fffl.  This mfthod rfturns {@dodf fblsf} if thf look
     * bnd fffl dfpfnds on spfdibl rfsourdfs or lfgbl bgrffmfnts thbt
     * brfn't dffinfd for thf durrfnt plbtform.
     *
     *
     * @rfturn {@dodf truf} if this is b supportfd look bnd fffl
     * @sff UIMbnbgfr#sftLookAndFffl
     */
    publid bbstrbdt boolfbn isSupportfdLookAndFffl();


    /**
     * Initiblizfs thf look bnd fffl. Whilf this mfthod is publid,
     * it should only bf invokfd by thf {@dodf UIMbnbgfr} whfn b
     * look bnd fffl is instbllfd bs thf durrfnt look bnd fffl. This
     * mfthod is invokfd bfforf thf {@dodf UIMbnbgfr} invokfs
     * {@dodf gftDffbults}. This mfthod is intfndfd to pfrform bny
     * initiblizbtion for thf look bnd fffl. Subdlbssfs
     * should do bny onf-timf sftup thfy nffd hfrf, rbthfr thbn
     * in b stbtid initiblizfr, bfdbusf look bnd fffl dlbss objfdts
     * mby bf lobdfd just to disdovfr thbt {@dodf isSupportfdLookAndFffl()}
     * rfturns {@dodf fblsf}.
     *
     * @sff #uninitiblizf
     * @sff UIMbnbgfr#sftLookAndFffl
     */
    publid void initiblizf() {
    }


    /**
     * Uninitiblizfs thf look bnd fffl. Whilf this mfthod is publid,
     * it should only bf invokfd by thf {@dodf UIMbnbgfr} whfn
     * thf look bnd fffl is uninstbllfd. For fxbmplf,
     * {@dodf UIMbnbgfr.sftLookAndFffl} invokfs this whfn thf look bnd
     * fffl is dhbngfd.
     * <p>
     * Subdlbssfs mby dhoosf to frff up somf rfsourdfs hfrf.
     *
     * @sff #initiblizf
     * @sff UIMbnbgfr#sftLookAndFffl
     */
    publid void uninitiblizf() {
    }

    /**
     * Rfturns thf look bnd fffl dffbults. Whilf this mfthod is publid,
     * it should only bf invokfd by thf {@dodf UIMbnbgfr} whfn thf
     * look bnd fffl is sft bs thf durrfnt look bnd fffl bnd bftfr
     * {@dodf initiblizf} hbs bffn invokfd.
     *
     * @rfturn thf look bnd fffl dffbults
     * @sff #initiblizf
     * @sff #uninitiblizf
     * @sff UIMbnbgfr#sftLookAndFffl
     */
    publid UIDffbults gftDffbults() {
        rfturn null;
    }

    /**
     * Rfturns b string thbt displbys bnd idfntififs this
     * objfdt's propfrtifs.
     *
     * @rfturn b String rfprfsfntbtion of this objfdt
     */
    publid String toString() {
        rfturn "[" + gftDfsdription() + " - " + gftClbss().gftNbmf() + "]";
    }
}
