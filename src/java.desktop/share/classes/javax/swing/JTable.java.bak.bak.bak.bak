/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvb.util.*;

import jbvb.bpplft.Applft;
import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bwt.print.*;

import jbvb.bfbns.*;

import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;

import jbvbx.bddfssibility.*;

import jbvbx.swing.fvfnt.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.tbblf.*;
import jbvbx.swing.bordfr.*;

import jbvb.tfxt.NumbfrFormbt;
import jbvb.tfxt.DbtfFormbt;
import jbvb.tfxt.MfssbgfFormbt;

import jbvbx.print.bttributf.*;
import jbvbx.print.PrintSfrvidf;
import sun.rfflfdt.misd.RfflfdtUtil;

import sun.swing.SwingUtilitifs2;
import sun.swing.SwingUtilitifs2.Sfdtion;
import stbtid sun.swing.SwingUtilitifs2.Sfdtion.*;
import sun.swing.PrintingStbtus;

/**
 * Thf <dodf>JTbblf</dodf> is usfd to displby bnd fdit rfgulbr two-dimfnsionbl tbblfs
 * of dflls.
 * Sff <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/tbblf.html">How to Usf Tbblfs</b>
 * in <fm>Thf Jbvb Tutoribl</fm>
 * for tbsk-orifntfd dodumfntbtion bnd fxbmplfs of using <dodf>JTbblf</dodf>.
 *
 * <p>
 * Thf <dodf>JTbblf</dodf> hbs mbny
 * fbdilitifs thbt mbkf it possiblf to dustomizf its rfndfring bnd fditing
 * but providfs dffbults for thfsf ffbturfs so thbt simplf tbblfs dbn bf
 * sft up fbsily.  For fxbmplf, to sft up b tbblf with 10 rows bnd 10
 * dolumns of numbfrs:
 *
 * <prf>
 *      TbblfModfl dbtbModfl = nfw AbstrbdtTbblfModfl() {
 *          publid int gftColumnCount() { rfturn 10; }
 *          publid int gftRowCount() { rfturn 10;}
 *          publid Objfdt gftVblufAt(int row, int dol) { rfturn nfw Intfgfr(row*dol); }
 *      };
 *      JTbblf tbblf = nfw JTbblf(dbtbModfl);
 *      JSdrollPbnf sdrollpbnf = nfw JSdrollPbnf(tbblf);
 * </prf>
 * <p>
 * {@dodf JTbblf}s brf typidblly plbdfd insidf of b {@dodf JSdrollPbnf}.  By
 * dffbult, b {@dodf JTbblf} will bdjust its width sudh thbt
 * b horizontbl sdrollbbr is unnfdfssbry.  To bllow for b horizontbl sdrollbbr,
 * invokf {@link #sftAutoRfsizfModf} with {@dodf AUTO_RESIZE_OFF}.
 * Notf thbt if you wish to usf b <dodf>JTbblf</dodf> in b stbndblonf
 * vifw (outsidf of b <dodf>JSdrollPbnf</dodf>) bnd wbnt thf hfbdfr
 * displbyfd, you dbn gft it using {@link #gftTbblfHfbdfr} bnd
 * displby it sfpbrbtfly.
 * <p>
 * To fnbblf sorting bnd filtfring of rows, usf b
 * {@dodf RowSortfr}.
 * You dbn sft up b row sortfr in fithfr of two wbys:
 * <ul>
 *   <li>Dirfdtly sft thf {@dodf RowSortfr}. For fxbmplf:
 *        {@dodf tbblf.sftRowSortfr(nfw TbblfRowSortfr(modfl))}.
 *   <li>Sft thf {@dodf butoCrfbtfRowSortfr}
 *       propfrty to {@dodf truf}, so thbt thf {@dodf JTbblf}
 *       drfbtfs b {@dodf RowSortfr} for
 *       you. For fxbmplf: {@dodf sftAutoCrfbtfRowSortfr(truf)}.
 * </ul>
 * <p>
 * Whfn dfsigning bpplidbtions thbt usf thf <dodf>JTbblf</dodf> it is worth pbying
 * dlosf bttfntion to thf dbtb strudturfs thbt will rfprfsfnt thf tbblf's dbtb.
 * Thf <dodf>DffbultTbblfModfl</dodf> is b modfl implfmfntbtion thbt
 * usfs b <dodf>Vfdtor</dodf> of <dodf>Vfdtor</dodf>s of <dodf>Objfdt</dodf>s to
 * storf thf dfll vblufs. As wfll bs dopying thf dbtb from bn
 * bpplidbtion into thf <dodf>DffbultTbblfModfl</dodf>,
 * it is blso possiblf to wrbp thf dbtb in thf mfthods of thf
 * <dodf>TbblfModfl</dodf> intfrfbdf so thbt thf dbtb dbn bf pbssfd to thf
 * <dodf>JTbblf</dodf> dirfdtly, bs in thf fxbmplf bbovf. This oftfn rfsults
 * in morf fffidifnt bpplidbtions bfdbusf thf modfl is frff to dhoosf thf
 * intfrnbl rfprfsfntbtion thbt bfst suits thf dbtb.
 * A good rulf of thumb for dfdiding whfthfr to usf thf <dodf>AbstrbdtTbblfModfl</dodf>
 * or thf <dodf>DffbultTbblfModfl</dodf> is to usf thf <dodf>AbstrbdtTbblfModfl</dodf>
 * bs thf bbsf dlbss for drfbting subdlbssfs bnd thf <dodf>DffbultTbblfModfl</dodf>
 * whfn subdlbssing is not rfquirfd.
 * <p>
 * Thf "TbblfExbmplf" dirfdtory in thf dfmo brfb of thf sourdf distribution
 * givfs b numbfr of domplftf fxbmplfs of <dodf>JTbblf</dodf> usbgf,
 * dovfring how thf <dodf>JTbblf</dodf> dbn bf usfd to providf bn
 * fditbblf vifw of dbtb tbkfn from b dbtbbbsf bnd how to modify
 * thf dolumns in thf displby to usf spfdiblizfd rfndfrfrs bnd fditors.
 * <p>
 * Thf <dodf>JTbblf</dodf> usfs intfgfrs fxdlusivfly to rfffr to both thf rows bnd thf dolumns
 * of thf modfl thbt it displbys. Thf <dodf>JTbblf</dodf> simply tbkfs b tbbulbr rbngf of dflls
 * bnd usfs <dodf>gftVblufAt(int, int)</dodf> to rftrifvf thf
 * vblufs from thf modfl during pbinting.  It is importbnt to rfmfmbfr thbt
 * thf dolumn bnd row indfxfs rfturnfd by vbrious <dodf>JTbblf</dodf> mfthods
 * brf in tfrms of thf <dodf>JTbblf</dodf> (thf vifw) bnd brf not
 * nfdfssbrily thf sbmf indfxfs usfd by thf modfl.
 * <p>
 * By dffbult, dolumns mby bf rfbrrbngfd in thf <dodf>JTbblf</dodf> so thbt thf
 * vifw's dolumns bppfbr in b difffrfnt ordfr to thf dolumns in thf modfl.
 * This dofs not bfffdt thf implfmfntbtion of thf modfl bt bll: whfn thf
 * dolumns brf rfordfrfd, thf <dodf>JTbblf</dodf> mbintbins thf nfw ordfr of thf dolumns
 * intfrnblly bnd donvfrts its dolumn indidfs bfforf qufrying thf modfl.
 * <p>
 * So, whfn writing b <dodf>TbblfModfl</dodf>, it is not nfdfssbry to listfn for dolumn
 * rfordfring fvfnts bs thf modfl will bf qufrifd in its own doordinbtf
 * systfm rfgbrdlfss of whbt is hbppfning in thf vifw.
 * In thf fxbmplfs brfb thfrf is b dfmonstrbtion of b sorting blgorithm mbking
 * usf of fxbdtly this tfdhniquf to intfrposf yft bnothfr doordinbtf systfm
 * whfrf thf ordfr of thf rows is dhbngfd, rbthfr thbn thf ordfr of thf dolumns.
 * <p>
 * Similbrly whfn using thf sorting bnd filtfring fundtionblity
 * providfd by <dodf>RowSortfr</dodf> thf undfrlying
 * <dodf>TbblfModfl</dodf> dofs not nffd to know how to do sorting,
 * rbthfr <dodf>RowSortfr</dodf> will hbndlf it.  Coordinbtf
 * donvfrsions will bf nfdfssbry whfn using thf row bbsfd mfthods of
 * <dodf>JTbblf</dodf> with thf undfrlying <dodf>TbblfModfl</dodf>.
 * All of <dodf>JTbblf</dodf>s row bbsfd mfthods brf in tfrms of thf
 * <dodf>RowSortfr</dodf>, whidh is not nfdfssbrily thf sbmf bs thbt
 * of thf undfrlying <dodf>TbblfModfl</dodf>.  For fxbmplf, thf
 * sflfdtion is blwbys in tfrms of <dodf>JTbblf</dodf> so thbt whfn
 * using <dodf>RowSortfr</dodf> you will nffd to donvfrt using
 * <dodf>donvfrtRowIndfxToVifw</dodf> or
 * <dodf>donvfrtRowIndfxToModfl</dodf>.  Thf following shows how to
 * donvfrt doordinbtfs from <dodf>JTbblf</dodf> to thbt of thf
 * undfrlying modfl:
 * <prf>
 *   int[] sflfdtion = tbblf.gftSflfdtfdRows();
 *   for (int i = 0; i &lt; sflfdtion.lfngth; i++) {
 *     sflfdtion[i] = tbblf.donvfrtRowIndfxToModfl(sflfdtion[i]);
 *   }
 *   // sflfdtion is now in tfrms of thf undfrlying TbblfModfl
 * </prf>
 * <p>
 * By dffbult if sorting is fnbblfd <dodf>JTbblf</dodf> will pfrsist thf
 * sflfdtion bnd vbribblf row hfights in tfrms of thf modfl on
 * sorting.  For fxbmplf if row 0, in tfrms of thf undfrlying modfl,
 * is durrfntly sflfdtfd, bftfr thf sort row 0, in tfrms of thf
 * undfrlying modfl will bf sflfdtfd.  Visublly thf sflfdtion mby
 * dhbngf, but in tfrms of thf undfrlying modfl it will rfmbin thf
 * sbmf.  Thf onf fxdfption to thbt is if thf modfl indfx is no longfr
 * visiblf or wbs rfmovfd.  For fxbmplf, if row 0 in tfrms of modfl
 * wbs filtfrfd out thf sflfdtion will bf fmpty bftfr thf sort.
 * <p>
 * J2SE 5 bdds mfthods to <dodf>JTbblf</dodf> to providf donvfnifnt bddfss to somf
 * dommon printing nffds. Simplf nfw {@link #print()} mfthods bllow for quidk
 * bnd fbsy bddition of printing support to your bpplidbtion. In bddition, b nfw
 * {@link #gftPrintbblf} mfthod is bvbilbblf for morf bdvbndfd printing nffds.
 * <p>
 * As for bll <dodf>JComponfnt</dodf> dlbssfs, you dbn usf
 * {@link InputMbp} bnd {@link AdtionMbp} to bssodibtf bn
 * {@link Adtion} objfdt with b {@link KfyStrokf} bnd fxfdutf thf
 * bdtion undfr spfdififd donditions.
 * <p>
 * <strong>Wbrning:</strong> Swing is not thrfbd sbff. For morf
 * informbtion sff <b
 * hrff="pbdkbgf-summbry.html#thrfbding">Swing's Thrfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 *
 * @bfbninfo
 *   bttributf: isContbinfr fblsf
 * dfsdription: A domponfnt whidh displbys dbtb in b two dimfnsionbl grid.
 *
 * @buthor Philip Milnf
 * @buthor Shbnnon Hidkfy (printing support)
 * @sff jbvbx.swing.tbblf.DffbultTbblfModfl
 * @sff jbvbx.swing.tbblf.TbblfRowSortfr
 * @sindf 1.2
 */
/* Thf first vfrsions of thf JTbblf, dontbinfd in Swing-0.1 through
 * Swing-0.4, wfrf writtfn by Albn Chung.
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss JTbblf fxtfnds JComponfnt implfmfnts TbblfModflListfnfr, Sdrollbblf,
    TbblfColumnModflListfnfr, ListSflfdtionListfnfr, CfllEditorListfnfr,
    Addfssiblf, RowSortfrListfnfr
{
//
// Stbtid Constbnts
//

    /**
     * @sff #gftUIClbssID
     * @sff #rfbdObjfdt
     */
    privbtf stbtid finbl String uiClbssID = "TbblfUI";

    /** Do not bdjust dolumn widths butombtidblly; usf b horizontbl sdrollbbr instfbd. */
    publid stbtid finbl int     AUTO_RESIZE_OFF = 0;

    /** Whfn b dolumn is bdjustfd in thf UI, bdjust thf nfxt dolumn thf oppositf wby. */
    publid stbtid finbl int     AUTO_RESIZE_NEXT_COLUMN = 1;

    /** During UI bdjustmfnt, dhbngf subsfqufnt dolumns to prfsfrvf thf totbl width;
      * this is thf dffbult bfhbvior. */
    publid stbtid finbl int     AUTO_RESIZE_SUBSEQUENT_COLUMNS = 2;

    /** During bll rfsizf opfrbtions, bpply bdjustmfnts to thf lbst dolumn only. */
    publid stbtid finbl int     AUTO_RESIZE_LAST_COLUMN = 3;

    /** During bll rfsizf opfrbtions, proportionbtfly rfsizf bll dolumns. */
    publid stbtid finbl int     AUTO_RESIZE_ALL_COLUMNS = 4;


    /**
     * Printing modfs, usfd in printing <dodf>JTbblf</dodf>s.
     *
     * @sff #print(JTbblf.PrintModf, MfssbgfFormbt, MfssbgfFormbt,
     *             boolfbn, PrintRfqufstAttributfSft, boolfbn)
     * @sff #gftPrintbblf
     * @sindf 1.5
     */
    publid fnum PrintModf {

        /**
         * Printing modf thbt prints thf tbblf bt its durrfnt sizf,
         * sprfbding both dolumns bnd rows bdross multiplf pbgfs if nfdfssbry.
         */
        NORMAL,

        /**
         * Printing modf thbt sdblfs thf output smbllfr, if nfdfssbry,
         * to fit thf tbblf's fntirf width (bnd thfrfby bll dolumns) on fbdh pbgf;
         * Rows brf sprfbd bdross multiplf pbgfs bs nfdfssbry.
         */
        FIT_WIDTH
    }


//
// Instbndf Vbribblfs
//

    /** Thf <dodf>TbblfModfl</dodf> of thf tbblf. */
    protfdtfd TbblfModfl        dbtbModfl;

    /** Thf <dodf>TbblfColumnModfl</dodf> of thf tbblf. */
    protfdtfd TbblfColumnModfl  dolumnModfl;

    /** Thf <dodf>ListSflfdtionModfl</dodf> of thf tbblf, usfd to kffp trbdk of row sflfdtions. */
    protfdtfd ListSflfdtionModfl sflfdtionModfl;

    /** Thf <dodf>TbblfHfbdfr</dodf> working with thf tbblf. */
    protfdtfd JTbblfHfbdfr      tbblfHfbdfr;

    /** Thf hfight in pixfls of fbdh row in thf tbblf. */
    protfdtfd int               rowHfight;

    /** Thf hfight in pixfls of thf mbrgin bftwffn thf dflls in fbdh row. */
    protfdtfd int               rowMbrgin;

    /** Thf dolor of thf grid. */
    protfdtfd Color             gridColor;

    /** Thf tbblf drbws horizontbl linfs bftwffn dflls if <dodf>showHorizontblLinfs</dodf> is truf. */
    protfdtfd boolfbn           showHorizontblLinfs;

    /** Thf tbblf drbws vfrtidbl linfs bftwffn dflls if <dodf>showVfrtidblLinfs</dodf> is truf. */
    protfdtfd boolfbn           showVfrtidblLinfs;

    /**
     *  Dftfrminfs if thf tbblf butombtidblly rfsizfs thf
     *  width of thf tbblf's dolumns to tbkf up thf fntirf width of thf
     *  tbblf, bnd how it dofs thf rfsizing.
     */
    protfdtfd int               butoRfsizfModf;

    /**
     *  Thf tbblf will qufry thf <dodf>TbblfModfl</dodf> to build thf dffbult
     *  sft of dolumns if this is truf.
     */
    protfdtfd boolfbn           butoCrfbtfColumnsFromModfl;

    /** Usfd by thf <dodf>Sdrollbblf</dodf> intfrfbdf to dftfrminf thf initibl visiblf brfb. */
    protfdtfd Dimfnsion         prfffrrfdVifwportSizf;

    /** Truf if row sflfdtion is bllowfd in this tbblf. */
    protfdtfd boolfbn           rowSflfdtionAllowfd;

    /**
     * Obsolftf bs of Jbvb 2 plbtform v1.3.  Plfbsf usf thf
     * <dodf>rowSflfdtionAllowfd</dodf> propfrty bnd thf
     * <dodf>dolumnSflfdtionAllowfd</dodf> propfrty of thf
     * <dodf>dolumnModfl</dodf> instfbd. Or usf thf
     * mfthod <dodf>gftCfllSflfdtionEnbblfd</dodf>.
     */
    /*
     * If truf, both b row sflfdtion bnd b dolumn sflfdtion
     * dbn bf non-fmpty bt thf sbmf timf, thf sflfdtfd dflls brf thf
     * thf dflls whosf row bnd dolumn brf both sflfdtfd.
     */
    protfdtfd boolfbn           dfllSflfdtionEnbblfd;

    /** If fditing, thf <dodf>Componfnt</dodf> thbt is hbndling thf fditing. */
    trbnsifnt protfdtfd Componfnt       fditorComp;

    /**
     * Thf bdtivf dfll fditor objfdt, thbt ovfrwritfs thf sdrffn rfbl fstbtf
     * oddupifd by thf durrfnt dfll bnd bllows thf usfr to dhbngf its dontfnts.
     * {@dodf null} if thf tbblf isn't durrfntly fditing.
     */
    trbnsifnt protfdtfd TbblfCfllEditor dfllEditor;

    /** Idfntififs thf dolumn of thf dfll bfing fditfd. */
    trbnsifnt protfdtfd int             fditingColumn;

    /** Idfntififs thf row of thf dfll bfing fditfd. */
    trbnsifnt protfdtfd int             fditingRow;

   /**
     * A tbblf of objfdts thbt displby thf dontfnts of b dfll,
     * indfxfd by dlbss bs dfdlbrfd in <dodf>gftColumnClbss</dodf>
     * in thf <dodf>TbblfModfl</dodf> intfrfbdf.
     */
    trbnsifnt protfdtfd Hbshtbblf<Objfdt, Objfdt> dffbultRfndfrfrsByColumnClbss;
    // Logidbly, thf bbovf is b Hbshtbblf<Clbss<?>, TbblfCfllRfndfrfr>.
    // It is dfdlbrfd othfrwisf to bddomodbtf using UIDffbults.

    /**
     * A tbblf of objfdts thbt displby bnd fdit thf dontfnts of b dfll,
     * indfxfd by dlbss bs dfdlbrfd in <dodf>gftColumnClbss</dodf>
     * in thf <dodf>TbblfModfl</dodf> intfrfbdf.
     */
    trbnsifnt protfdtfd Hbshtbblf<Objfdt, Objfdt> dffbultEditorsByColumnClbss;
    // Logidbly, thf bbovf is b Hbshtbblf<Clbss<?>, TbblfCfllEditor>.
    // It is dfdlbrfd othfrwisf to bddomodbtf using UIDffbults.

    /** Thf forfground dolor of sflfdtfd dflls. */
    protfdtfd Color sflfdtionForfground;

    /** Thf bbdkground dolor of sflfdtfd dflls. */
    protfdtfd Color sflfdtionBbdkground;

//
// Privbtf stbtf
//

    // WARNING: If you dirfdtly bddfss this fifld you should blso dhbngf thf
    // SortMbnbgfr.modflRowSizfs fifld bs wfll.
    privbtf SizfSfqufndf rowModfl;
    privbtf boolfbn drbgEnbblfd;
    privbtf boolfbn surrfndfrsFodusOnKfystrokf;
    privbtf PropfrtyChbngfListfnfr fditorRfmovfr = null;
    /**
     * Thf lbst vbluf of gftVblufIsAdjusting from thf dolumn sflfdtion modfls
     * dolumnSflfdtionChbngfd notifidbtion. Usfd to tfst if b rfpbint is
     * nffdfd.
     */
    privbtf boolfbn dolumnSflfdtionAdjusting;
    /**
     * Thf lbst vbluf of gftVblufIsAdjusting from thf row sflfdtion modfls
     * vblufChbngfd notifidbtion. Usfd to tfst if b rfpbint is nffdfd.
     */
    privbtf boolfbn rowSflfdtionAdjusting;

    /**
     * To dommunidbtf frrors bftwffn thrfbds during printing.
     */
    privbtf Throwbblf printError;

    /**
     * Truf whfn sftRowHfight(int) hbs bffn invokfd.
     */
    privbtf boolfbn isRowHfightSft;

    /**
     * If truf, on b sort thf sflfdtion is rfsft.
     */
    privbtf boolfbn updbtfSflfdtionOnSort;

    /**
     * Informbtion usfd in sorting.
     */
    privbtf trbnsifnt SortMbnbgfr sortMbnbgfr;

    /**
     * If truf, whfn sortfrChbngfd is invokfd it's vbluf is ignorfd.
     */
    privbtf boolfbn ignorfSortChbngf;

    /**
     * Whfthfr or not sortfrChbngfd hbs bffn invokfd.
     */
    privbtf boolfbn sortfrChbngfd;

    /**
     * If truf, bny timf thf modfl dhbngfs b nfw RowSortfr is sft.
     */
    privbtf boolfbn butoCrfbtfRowSortfr;

    /**
     * Whfthfr or not thf tbblf blwbys fills thf vifwport hfight.
     * @sff #sftFillsVifwportHfight
     * @sff #gftSdrollbblfTrbdksVifwportHfight
     */
    privbtf boolfbn fillsVifwportHfight;

    /**
     * Thf drop modf for this domponfnt.
     */
    privbtf DropModf dropModf = DropModf.USE_SELECTION;

    /**
     * Thf drop lodbtion.
     */
    privbtf trbnsifnt DropLodbtion dropLodbtion;

    /**
     * A subdlbss of <dodf>TrbnsffrHbndlfr.DropLodbtion</dodf> rfprfsfnting
     * b drop lodbtion for b <dodf>JTbblf</dodf>.
     *
     * @sff #gftDropLodbtion
     * @sindf 1.6
     */
    publid stbtid finbl dlbss DropLodbtion fxtfnds TrbnsffrHbndlfr.DropLodbtion {
        privbtf finbl int row;
        privbtf finbl int dol;
        privbtf finbl boolfbn isInsfrtRow;
        privbtf finbl boolfbn isInsfrtCol;

        privbtf DropLodbtion(Point p, int row, int dol,
                             boolfbn isInsfrtRow, boolfbn isInsfrtCol) {

            supfr(p);
            this.row = row;
            this.dol = dol;
            this.isInsfrtRow = isInsfrtRow;
            this.isInsfrtCol = isInsfrtCol;
        }

        /**
         * Rfturns thf row indfx whfrf b droppfd itfm should bf plbdfd in thf
         * tbblf. Intfrprftbtion of thf vbluf dfpfnds on thf rfturn of
         * <dodf>isInsfrtRow()</dodf>. If thbt mfthod rfturns
         * <dodf>truf</dodf> this vbluf indidbtfs thf indfx whfrf b nfw
         * row should bf insfrtfd. Othfrwisf, it rfprfsfnts thf vbluf
         * of bn fxisting row on whidh thf dbtb wbs droppfd. This indfx is
         * in tfrms of thf vifw.
         * <p>
         * <dodf>-1</dodf> indidbtfs thbt thf drop oddurrfd ovfr fmpty spbdf,
         * bnd no row dould bf dbldulbtfd.
         *
         * @rfturn thf drop row
         */
        publid int gftRow() {
            rfturn row;
        }

        /**
         * Rfturns thf dolumn indfx whfrf b droppfd itfm should bf plbdfd in thf
         * tbblf. Intfrprftbtion of thf vbluf dfpfnds on thf rfturn of
         * <dodf>isInsfrtColumn()</dodf>. If thbt mfthod rfturns
         * <dodf>truf</dodf> this vbluf indidbtfs thf indfx whfrf b nfw
         * dolumn should bf insfrtfd. Othfrwisf, it rfprfsfnts thf vbluf
         * of bn fxisting dolumn on whidh thf dbtb wbs droppfd. This indfx is
         * in tfrms of thf vifw.
         * <p>
         * <dodf>-1</dodf> indidbtfs thbt thf drop oddurrfd ovfr fmpty spbdf,
         * bnd no dolumn dould bf dbldulbtfd.
         *
         * @rfturn thf drop row
         */
        publid int gftColumn() {
            rfturn dol;
        }

        /**
         * Rfturns whfthfr or not this lodbtion rfprfsfnts bn insfrt
         * of b row.
         *
         * @rfturn whfthfr or not this is bn insfrt row
         */
        publid boolfbn isInsfrtRow() {
            rfturn isInsfrtRow;
        }

        /**
         * Rfturns whfthfr or not this lodbtion rfprfsfnts bn insfrt
         * of b dolumn.
         *
         * @rfturn whfthfr or not this is bn insfrt dolumn
         */
        publid boolfbn isInsfrtColumn() {
            rfturn isInsfrtCol;
        }

        /**
         * Rfturns b string rfprfsfntbtion of this drop lodbtion.
         * This mfthod is intfndfd to bf usfd for dfbugging purposfs,
         * bnd thf dontfnt bnd formbt of thf rfturnfd string mby vbry
         * bftwffn implfmfntbtions.
         *
         * @rfturn b string rfprfsfntbtion of this drop lodbtion
         */
        publid String toString() {
            rfturn gftClbss().gftNbmf()
                   + "[dropPoint=" + gftDropPoint() + ","
                   + "row=" + row + ","
                   + "dolumn=" + dol + ","
                   + "insfrtRow=" + isInsfrtRow + ","
                   + "insfrtColumn=" + isInsfrtCol + "]";
        }
    }

//
// Construdtors
//

    /**
     * Construdts b dffbult <dodf>JTbblf</dodf> thbt is initiblizfd with b dffbult
     * dbtb modfl, b dffbult dolumn modfl, bnd b dffbult sflfdtion
     * modfl.
     *
     * @sff #drfbtfDffbultDbtbModfl
     * @sff #drfbtfDffbultColumnModfl
     * @sff #drfbtfDffbultSflfdtionModfl
     */
    publid JTbblf() {
        this(null, null, null);
    }

    /**
     * Construdts b <dodf>JTbblf</dodf> thbt is initiblizfd with
     * <dodf>dm</dodf> bs thf dbtb modfl, b dffbult dolumn modfl,
     * bnd b dffbult sflfdtion modfl.
     *
     * @pbrbm dm        thf dbtb modfl for thf tbblf
     * @sff #drfbtfDffbultColumnModfl
     * @sff #drfbtfDffbultSflfdtionModfl
     */
    publid JTbblf(TbblfModfl dm) {
        this(dm, null, null);
    }

    /**
     * Construdts b <dodf>JTbblf</dodf> thbt is initiblizfd with
     * <dodf>dm</dodf> bs thf dbtb modfl, <dodf>dm</dodf>
     * bs thf dolumn modfl, bnd b dffbult sflfdtion modfl.
     *
     * @pbrbm dm        thf dbtb modfl for thf tbblf
     * @pbrbm dm        thf dolumn modfl for thf tbblf
     * @sff #drfbtfDffbultSflfdtionModfl
     */
    publid JTbblf(TbblfModfl dm, TbblfColumnModfl dm) {
        this(dm, dm, null);
    }

    /**
     * Construdts b <dodf>JTbblf</dodf> thbt is initiblizfd with
     * <dodf>dm</dodf> bs thf dbtb modfl, <dodf>dm</dodf> bs thf
     * dolumn modfl, bnd <dodf>sm</dodf> bs thf sflfdtion modfl.
     * If bny of thf pbrbmftfrs brf <dodf>null</dodf> this mfthod
     * will initiblizf thf tbblf with thf dorrfsponding dffbult modfl.
     * Thf <dodf>butoCrfbtfColumnsFromModfl</dodf> flbg is sft to fblsf
     * if <dodf>dm</dodf> is non-null, othfrwisf it is sft to truf
     * bnd thf dolumn modfl is populbtfd with suitbblf
     * <dodf>TbblfColumns</dodf> for thf dolumns in <dodf>dm</dodf>.
     *
     * @pbrbm dm        thf dbtb modfl for thf tbblf
     * @pbrbm dm        thf dolumn modfl for thf tbblf
     * @pbrbm sm        thf row sflfdtion modfl for thf tbblf
     * @sff #drfbtfDffbultDbtbModfl
     * @sff #drfbtfDffbultColumnModfl
     * @sff #drfbtfDffbultSflfdtionModfl
     */
    publid JTbblf(TbblfModfl dm, TbblfColumnModfl dm, ListSflfdtionModfl sm) {
        supfr();
        sftLbyout(null);

        sftFodusTrbvfrsblKfys(KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
                           JComponfnt.gftMbnbgingFodusForwbrdTrbvfrsblKfys());
        sftFodusTrbvfrsblKfys(KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS,
                           JComponfnt.gftMbnbgingFodusBbdkwbrdTrbvfrsblKfys());
        if (dm == null) {
            dm = drfbtfDffbultColumnModfl();
            butoCrfbtfColumnsFromModfl = truf;
        }
        sftColumnModfl(dm);

        if (sm == null) {
            sm = drfbtfDffbultSflfdtionModfl();
        }
        sftSflfdtionModfl(sm);

    // Sft thf modfl lbst, thbt wby if thf butoCrfbtColumnsFromModfl hbs
    // bffn sft bbovf, wf will butombtidblly populbtf bn fmpty dolumnModfl
    // with suitbblf dolumns for thf nfw modfl.
        if (dm == null) {
            dm = drfbtfDffbultDbtbModfl();
        }
        sftModfl(dm);

        initiblizfLodblVbrs();
        updbtfUI();
    }

    /**
     * Construdts b <dodf>JTbblf</dodf> with <dodf>numRows</dodf>
     * bnd <dodf>numColumns</dodf> of fmpty dflls using
     * <dodf>DffbultTbblfModfl</dodf>.  Thf dolumns will hbvf
     * nbmfs of thf form "A", "B", "C", ftd.
     *
     * @pbrbm numRows           thf numbfr of rows thf tbblf holds
     * @pbrbm numColumns        thf numbfr of dolumns thf tbblf holds
     * @sff jbvbx.swing.tbblf.DffbultTbblfModfl
     */
    publid JTbblf(int numRows, int numColumns) {
        this(nfw DffbultTbblfModfl(numRows, numColumns));
    }

    /**
     * Construdts b <dodf>JTbblf</dodf> to displby thf vblufs in thf
     * <dodf>Vfdtor</dodf> of <dodf>Vfdtors</dodf>, <dodf>rowDbtb</dodf>,
     * with dolumn nbmfs, <dodf>dolumnNbmfs</dodf>.  Thf
     * <dodf>Vfdtors</dodf> dontbinfd in <dodf>rowDbtb</dodf>
     * should dontbin thf vblufs for thbt row. In othfr words,
     * thf vbluf of thf dfll bt row 1, dolumn 5 dbn bf obtbinfd
     * with thf following dodf:
     *
     * <prf>((Vfdtor)rowDbtb.flfmfntAt(1)).flfmfntAt(5);</prf>
     *
     * @pbrbm rowDbtb           thf dbtb for thf nfw tbblf
     * @pbrbm dolumnNbmfs       nbmfs of fbdh dolumn
     */
    publid JTbblf(Vfdtor<Vfdtor<Objfdt>> rowDbtb, Vfdtor<Objfdt> dolumnNbmfs) {
        this(nfw DffbultTbblfModfl(rowDbtb, dolumnNbmfs));
    }

    /**
     * Construdts b <dodf>JTbblf</dodf> to displby thf vblufs in thf two dimfnsionbl brrby,
     * <dodf>rowDbtb</dodf>, with dolumn nbmfs, <dodf>dolumnNbmfs</dodf>.
     * <dodf>rowDbtb</dodf> is bn brrby of rows, so thf vbluf of thf dfll bt row 1,
     * dolumn 5 dbn bf obtbinfd with thf following dodf:
     *
     * <prf> rowDbtb[1][5]; </prf>
     * <p>
     * All rows must bf of thf sbmf lfngth bs <dodf>dolumnNbmfs</dodf>.
     *
     * @pbrbm rowDbtb           thf dbtb for thf nfw tbblf
     * @pbrbm dolumnNbmfs       nbmfs of fbdh dolumn
     */
    publid JTbblf(finbl Objfdt[][] rowDbtb, finbl Objfdt[] dolumnNbmfs) {
        this(nfw AbstrbdtTbblfModfl() {
            publid String gftColumnNbmf(int dolumn) { rfturn dolumnNbmfs[dolumn].toString(); }
            publid int gftRowCount() { rfturn rowDbtb.lfngth; }
            publid int gftColumnCount() { rfturn dolumnNbmfs.lfngth; }
            publid Objfdt gftVblufAt(int row, int dol) { rfturn rowDbtb[row][dol]; }
            publid boolfbn isCfllEditbblf(int row, int dolumn) { rfturn truf; }
            publid void sftVblufAt(Objfdt vbluf, int row, int dol) {
                rowDbtb[row][dol] = vbluf;
                firfTbblfCfllUpdbtfd(row, dol);
            }
        });
    }

    /**
     * Cblls thf <dodf>donfigurfEndlosingSdrollPbnf</dodf> mfthod.
     *
     * @sff #donfigurfEndlosingSdrollPbnf
     */
    publid void bddNotify() {
        supfr.bddNotify();
        donfigurfEndlosingSdrollPbnf();
    }

    /**
     * If this <dodf>JTbblf</dodf> is thf <dodf>vifwportVifw</dodf> of bn fndlosing <dodf>JSdrollPbnf</dodf>
     * (thf usubl situbtion), donfigurf this <dodf>SdrollPbnf</dodf> by, bmongst othfr things,
     * instblling thf tbblf's <dodf>tbblfHfbdfr</dodf> bs thf <dodf>dolumnHfbdfrVifw</dodf> of thf sdroll pbnf.
     * Whfn b <dodf>JTbblf</dodf> is bddfd to b <dodf>JSdrollPbnf</dodf> in thf usubl wby,
     * using <dodf>nfw JSdrollPbnf(myTbblf)</dodf>, <dodf>bddNotify</dodf> is
     * dbllfd in thf <dodf>JTbblf</dodf> (whfn thf tbblf is bddfd to thf vifwport).
     * <dodf>JTbblf</dodf>'s <dodf>bddNotify</dodf> mfthod in turn dblls this mfthod,
     * whidh is protfdtfd so thbt this dffbult instbllbtion prodfdurf dbn
     * bf ovfrriddfn by b subdlbss.
     *
     * @sff #bddNotify
     */
    protfdtfd void donfigurfEndlosingSdrollPbnf() {
        Contbinfr pbrfnt = SwingUtilitifs.gftUnwrbppfdPbrfnt(this);
        if (pbrfnt instbndfof JVifwport) {
            JVifwport port = (JVifwport) pbrfnt;
            Contbinfr gp = port.gftPbrfnt();
            if (gp instbndfof JSdrollPbnf) {
                JSdrollPbnf sdrollPbnf = (JSdrollPbnf)gp;
                // Mbkf dfrtbin wf brf thf vifwPort's vifw bnd not, for
                // fxbmplf, thf rowHfbdfrVifw of thf sdrollPbnf -
                // bn implfmfntor of fixfd dolumns might do this.
                JVifwport vifwport = sdrollPbnf.gftVifwport();
                if (vifwport == null ||
                        SwingUtilitifs.gftUnwrbppfdVifw(vifwport) != this) {
                    rfturn;
                }
                sdrollPbnf.sftColumnHfbdfrVifw(gftTbblfHfbdfr());
                // donfigurf thf sdrollpbnf for bny LAF dfpfndfnt sfttings
                donfigurfEndlosingSdrollPbnfUI();
            }
        }
    }

    /**
     * This is b sub-pbrt of donfigurfEndlosingSdrollPbnf() thbt donfigurfs
     * bnything on thf sdrollpbnf thbt mby dhbngf whfn thf look bnd fffl
     * dhbngfs. It nffdfd to bf split out from donfigurfEndlosingSdrollPbnf() so
     * thbt it dbn bf dbllfd from updbtfUI() whfn thf LAF dhbngfs without
     * dbusing thf rfgrfssion found in bug 6687962. This wbs bfdbusf updbtfUI()
     * is dbllfd from thf donstrudtor whidh thfn dbusfd
     * donfigurfEndlosingSdrollPbnf() to bf dbllfd by thf donstrudtor whidh
     * dhbngfs its dontrbdt for bny subdlbss thbt ovfrridfs it. So by splitting
     * it out in this wby donfigurfEndlosingSdrollPbnfUI() dbn bf dbllfd both
     * from donfigurfEndlosingSdrollPbnf() bnd updbtfUI() in b sbff mbnor.
     */
    privbtf void donfigurfEndlosingSdrollPbnfUI() {
        Contbinfr pbrfnt = SwingUtilitifs.gftUnwrbppfdPbrfnt(this);
        if (pbrfnt instbndfof JVifwport) {
            JVifwport port = (JVifwport) pbrfnt;
            Contbinfr gp = port.gftPbrfnt();
            if (gp instbndfof JSdrollPbnf) {
                JSdrollPbnf sdrollPbnf = (JSdrollPbnf)gp;
                // Mbkf dfrtbin wf brf thf vifwPort's vifw bnd not, for
                // fxbmplf, thf rowHfbdfrVifw of thf sdrollPbnf -
                // bn implfmfntor of fixfd dolumns might do this.
                JVifwport vifwport = sdrollPbnf.gftVifwport();
                if (vifwport == null ||
                        SwingUtilitifs.gftUnwrbppfdVifw(vifwport) != this) {
                    rfturn;
                }
                //  sdrollPbnf.gftVifwport().sftBbdkingStorfEnbblfd(truf);
                Bordfr bordfr = sdrollPbnf.gftBordfr();
                if (bordfr == null || bordfr instbndfof UIRfsourdf) {
                    Bordfr sdrollPbnfBordfr =
                        UIMbnbgfr.gftBordfr("Tbblf.sdrollPbnfBordfr");
                    if (sdrollPbnfBordfr != null) {
                        sdrollPbnf.sftBordfr(sdrollPbnfBordfr);
                    }
                }
                // bdd JSdrollBbr dornfr domponfnt if bvbilbblf from LAF bnd not blrfbdy sft by thf usfr
                Componfnt dornfr =
                        sdrollPbnf.gftCornfr(JSdrollPbnf.UPPER_TRAILING_CORNER);
                if (dornfr == null || dornfr instbndfof UIRfsourdf){
                    dornfr = null;
                    try {
                        dornfr = (Componfnt) UIMbnbgfr.gft(
                                "Tbblf.sdrollPbnfCornfrComponfnt");
                    } dbtdh (Exdfption f) {
                        // just ignorf bnd don't sft dornfr
                    }
                    sdrollPbnf.sftCornfr(JSdrollPbnf.UPPER_TRAILING_CORNER,
                            dornfr);
                }
            }
        }
    }

    /**
     * Cblls thf <dodf>undonfigurfEndlosingSdrollPbnf</dodf> mfthod.
     *
     * @sff #undonfigurfEndlosingSdrollPbnf
     */
    publid void rfmovfNotify() {
        KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
            rfmovfPropfrtyChbngfListfnfr("pfrmbnfntFodusOwnfr", fditorRfmovfr);
        fditorRfmovfr = null;
        undonfigurfEndlosingSdrollPbnf();
        supfr.rfmovfNotify();
    }

    /**
     * Rfvfrsfs thf ffffdt of <dodf>donfigurfEndlosingSdrollPbnf</dodf>
     * by rfplbding thf <dodf>dolumnHfbdfrVifw</dodf> of thf fndlosing
     * sdroll pbnf with <dodf>null</dodf>. <dodf>JTbblf</dodf>'s
     * <dodf>rfmovfNotify</dodf> mfthod dblls
     * this mfthod, whidh is protfdtfd so thbt this dffbult uninstbllbtion
     * prodfdurf dbn bf ovfrriddfn by b subdlbss.
     *
     * @sff #rfmovfNotify
     * @sff #donfigurfEndlosingSdrollPbnf
     * @sindf 1.3
     */
    protfdtfd void undonfigurfEndlosingSdrollPbnf() {
        Contbinfr pbrfnt = SwingUtilitifs.gftUnwrbppfdPbrfnt(this);
        if (pbrfnt instbndfof JVifwport) {
            JVifwport port = (JVifwport) pbrfnt;
            Contbinfr gp = port.gftPbrfnt();
            if (gp instbndfof JSdrollPbnf) {
                JSdrollPbnf sdrollPbnf = (JSdrollPbnf)gp;
                // Mbkf dfrtbin wf brf thf vifwPort's vifw bnd not, for
                // fxbmplf, thf rowHfbdfrVifw of thf sdrollPbnf -
                // bn implfmfntor of fixfd dolumns might do this.
                JVifwport vifwport = sdrollPbnf.gftVifwport();
                if (vifwport == null ||
                        SwingUtilitifs.gftUnwrbppfdVifw(vifwport) != this) {
                    rfturn;
                }
                sdrollPbnf.sftColumnHfbdfrVifw(null);
                // rfmovf SdrollPbnf dornfr if onf wbs bddfd by thf LAF
                Componfnt dornfr =
                        sdrollPbnf.gftCornfr(JSdrollPbnf.UPPER_TRAILING_CORNER);
                if (dornfr instbndfof UIRfsourdf){
                    sdrollPbnf.sftCornfr(JSdrollPbnf.UPPER_TRAILING_CORNER,
                            null);
                }
            }
        }
    }

    void sftUIPropfrty(String propfrtyNbmf, Objfdt vbluf) {
        if (propfrtyNbmf == "rowHfight") {
            if (!isRowHfightSft) {
                sftRowHfight(((Numbfr)vbluf).intVbluf());
                isRowHfightSft = fblsf;
            }
            rfturn;
        }
        supfr.sftUIPropfrty(propfrtyNbmf, vbluf);
    }

//
// Stbtid Mfthods
//

    /**
     * Equivblfnt to <dodf>nfw JSdrollPbnf(bTbblf)</dodf>.
     *
     * @pbrbm bTbblf b {@dodf JTbblf} to bf usfd for thf sdroll pbnf
     * @rfturn b {@dodf JSdrollPbnf} drfbtfd using {@dodf bTbblf}
     * @dfprfdbtfd As of Swing vfrsion 1.0.2,
     * rfplbdfd by <dodf>nfw JSdrollPbnf(bTbblf)</dodf>.
     */
    @Dfprfdbtfd
    stbtid publid JSdrollPbnf drfbtfSdrollPbnfForTbblf(JTbblf bTbblf) {
        rfturn nfw JSdrollPbnf(bTbblf);
    }

//
// Tbblf Attributfs
//

    /**
     * Sfts thf <dodf>tbblfHfbdfr</dodf> working with this <dodf>JTbblf</dodf> to <dodf>nfwHfbdfr</dodf>.
     * It is lfgbl to hbvf b <dodf>null</dodf> <dodf>tbblfHfbdfr</dodf>.
     *
     * @pbrbm   tbblfHfbdfr                       nfw tbblfHfbdfr
     * @sff     #gftTbblfHfbdfr
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Thf JTbblfHfbdfr instbndf whidh rfndfrs thf dolumn hfbdfrs.
     */
    publid void sftTbblfHfbdfr(JTbblfHfbdfr tbblfHfbdfr) {
        if (this.tbblfHfbdfr != tbblfHfbdfr) {
            JTbblfHfbdfr old = this.tbblfHfbdfr;
            // Rflfbsf thf old hfbdfr
            if (old != null) {
                old.sftTbblf(null);
            }
            this.tbblfHfbdfr = tbblfHfbdfr;
            if (tbblfHfbdfr != null) {
                tbblfHfbdfr.sftTbblf(this);
            }
            firfPropfrtyChbngf("tbblfHfbdfr", old, tbblfHfbdfr);
        }
    }

    /**
     * Rfturns thf <dodf>tbblfHfbdfr</dodf> usfd by this <dodf>JTbblf</dodf>.
     *
     * @rfturn  thf <dodf>tbblfHfbdfr</dodf> usfd by this tbblf
     * @sff     #sftTbblfHfbdfr
     */
    publid JTbblfHfbdfr gftTbblfHfbdfr() {
        rfturn tbblfHfbdfr;
    }

    /**
     * Sfts thf hfight, in pixfls, of bll dflls to <dodf>rowHfight</dodf>,
     * rfvblidbtfs, bnd rfpbints.
     * Thf hfight of thf dflls will bf fqubl to thf row hfight minus
     * thf row mbrgin.
     *
     * @pbrbm   rowHfight                       nfw row hfight
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>rowHfight</dodf> is
     *                                          lfss thbn 1
     * @sff     #gftRowHfight
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Thf hfight of thf spfdififd row.
     */
    publid void sftRowHfight(int rowHfight) {
        if (rowHfight <= 0) {
            throw nfw IllfgblArgumfntExdfption("Nfw row hfight lfss thbn 1");
        }
        int old = this.rowHfight;
        this.rowHfight = rowHfight;
        rowModfl = null;
        if (sortMbnbgfr != null) {
            sortMbnbgfr.modflRowSizfs = null;
        }
        isRowHfightSft = truf;
        rfsizfAndRfpbint();
        firfPropfrtyChbngf("rowHfight", old, rowHfight);
    }

    /**
     * Rfturns thf hfight of b tbblf row, in pixfls.
     *
     * @rfturn  thf hfight in pixfls of b tbblf row
     * @sff     #sftRowHfight
     */
    publid int gftRowHfight() {
        rfturn rowHfight;
    }

    privbtf SizfSfqufndf gftRowModfl() {
        if (rowModfl == null) {
            rowModfl = nfw SizfSfqufndf(gftRowCount(), gftRowHfight());
        }
        rfturn rowModfl;
    }

    /**
     * Sfts thf hfight for <dodf>row</dodf> to <dodf>rowHfight</dodf>,
     * rfvblidbtfs, bnd rfpbints. Thf hfight of thf dflls in this row
     * will bf fqubl to thf row hfight minus thf row mbrgin.
     *
     * @pbrbm   row                             thf row whosf hfight is bfing
                                                dhbngfd
     * @pbrbm   rowHfight                       nfw row hfight, in pixfls
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>rowHfight</dodf> is
     *                                          lfss thbn 1
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Thf hfight in pixfls of thf dflls in <dodf>row</dodf>
     * @sindf 1.3
     */
    publid void sftRowHfight(int row, int rowHfight) {
        if (rowHfight <= 0) {
            throw nfw IllfgblArgumfntExdfption("Nfw row hfight lfss thbn 1");
        }
        gftRowModfl().sftSizf(row, rowHfight);
        if (sortMbnbgfr != null) {
            sortMbnbgfr.sftVifwRowHfight(row, rowHfight);
        }
        rfsizfAndRfpbint();
    }

    /**
     * Rfturns thf hfight, in pixfls, of thf dflls in <dodf>row</dodf>.
     * @pbrbm   row              thf row whosf hfight is to bf rfturnfd
     * @rfturn thf hfight, in pixfls, of thf dflls in thf row
     * @sindf 1.3
     */
    publid int gftRowHfight(int row) {
        rfturn (rowModfl == null) ? gftRowHfight() : rowModfl.gftSizf(row);
    }

    /**
     * Sfts thf bmount of fmpty spbdf bftwffn dflls in bdjbdfnt rows.
     *
     * @pbrbm  rowMbrgin  thf numbfr of pixfls bftwffn dflls in b row
     * @sff     #gftRowMbrgin
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Thf bmount of spbdf bftwffn dflls.
     */
    publid void sftRowMbrgin(int rowMbrgin) {
        int old = this.rowMbrgin;
        this.rowMbrgin = rowMbrgin;
        rfsizfAndRfpbint();
        firfPropfrtyChbngf("rowMbrgin", old, rowMbrgin);
    }

    /**
     * Gfts thf bmount of fmpty spbdf, in pixfls, bftwffn dflls. Equivblfnt to:
     * <dodf>gftIntfrdfllSpbding().hfight</dodf>.
     * @rfturn thf numbfr of pixfls bftwffn dflls in b row
     *
     * @sff     #sftRowMbrgin
     */
    publid int gftRowMbrgin() {
        rfturn rowMbrgin;
    }

    /**
     * Sfts thf <dodf>rowMbrgin</dodf> bnd thf <dodf>dolumnMbrgin</dodf> --
     * thf hfight bnd width of thf spbdf bftwffn dflls -- to
     * <dodf>intfrdfllSpbding</dodf>.
     *
     * @pbrbm   intfrdfllSpbding        b <dodf>Dimfnsion</dodf>
     *                                  spfdifying thf nfw width
     *                                  bnd hfight bftwffn dflls
     * @sff     #gftIntfrdfllSpbding
     * @bfbninfo
     *  dfsdription: Thf spbding bftwffn thf dflls,
     *               drbwn in thf bbdkground dolor of thf JTbblf.
     */
    publid void sftIntfrdfllSpbding(Dimfnsion intfrdfllSpbding) {
        // Sft thf rowMbrgin hfrf bnd dolumnMbrgin in thf TbblfColumnModfl
        sftRowMbrgin(intfrdfllSpbding.hfight);
        gftColumnModfl().sftColumnMbrgin(intfrdfllSpbding.width);

        rfsizfAndRfpbint();
    }

    /**
     * Rfturns thf horizontbl bnd vfrtidbl spbdf bftwffn dflls.
     * Thf dffbult spbding is look bnd fffl dfpfndfnt.
     *
     * @rfturn  thf horizontbl bnd vfrtidbl spbding bftwffn dflls
     * @sff     #sftIntfrdfllSpbding
     */
    publid Dimfnsion gftIntfrdfllSpbding() {
        rfturn nfw Dimfnsion(gftColumnModfl().gftColumnMbrgin(), rowMbrgin);
    }

    /**
     * Sfts thf dolor usfd to drbw grid linfs to <dodf>gridColor</dodf> bnd rfdisplbys.
     * Thf dffbult dolor is look bnd fffl dfpfndfnt.
     *
     * @pbrbm   gridColor                       thf nfw dolor of thf grid linfs
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>gridColor</dodf> is <dodf>null</dodf>
     * @sff     #gftGridColor
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Thf grid dolor.
     */
    publid void sftGridColor(Color gridColor) {
        if (gridColor == null) {
            throw nfw IllfgblArgumfntExdfption("Nfw dolor is null");
        }
        Color old = this.gridColor;
        this.gridColor = gridColor;
        firfPropfrtyChbngf("gridColor", old, gridColor);
        // Rfdrbw
        rfpbint();
    }

    /**
     * Rfturns thf dolor usfd to drbw grid linfs.
     * Thf dffbult dolor is look bnd fffl dfpfndfnt.
     *
     * @rfturn  thf dolor usfd to drbw grid linfs
     * @sff     #sftGridColor
     */
    publid Color gftGridColor() {
        rfturn gridColor;
    }

    /**
     *  Sfts whfthfr thf tbblf drbws grid linfs bround dflls.
     *  If <dodf>showGrid</dodf> is truf it dofs; if it is fblsf it dofsn't.
     *  Thfrf is no <dodf>gftShowGrid</dodf> mfthod bs this stbtf is hfld
     *  in two vbribblfs -- <dodf>showHorizontblLinfs</dodf> bnd <dodf>showVfrtidblLinfs</dodf> --
     *  fbdh of whidh dbn bf qufrifd indfpfndfntly.
     *
     * @pbrbm   showGrid                 truf if tbblf vifw should drbw grid linfs
     *
     * @sff     #sftShowVfrtidblLinfs
     * @sff     #sftShowHorizontblLinfs
     * @bfbninfo
     *  dfsdription: Thf dolor usfd to drbw thf grid linfs.
     */
    publid void sftShowGrid(boolfbn showGrid) {
        sftShowHorizontblLinfs(showGrid);
        sftShowVfrtidblLinfs(showGrid);

        // Rfdrbw
        rfpbint();
    }

    /**
     *  Sfts whfthfr thf tbblf drbws horizontbl linfs bftwffn dflls.
     *  If <dodf>showHorizontblLinfs</dodf> is truf it dofs; if it is fblsf it dofsn't.
     *
     * @pbrbm   showHorizontblLinfs      truf if tbblf vifw should drbw horizontbl linfs
     * @sff     #gftShowHorizontblLinfs
     * @sff     #sftShowGrid
     * @sff     #sftShowVfrtidblLinfs
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Whfthfr horizontbl linfs should bf drbwn in bftwffn thf dflls.
     */
    publid void sftShowHorizontblLinfs(boolfbn showHorizontblLinfs) {
        boolfbn old = this.showHorizontblLinfs;
        this.showHorizontblLinfs = showHorizontblLinfs;
        firfPropfrtyChbngf("showHorizontblLinfs", old, showHorizontblLinfs);

        // Rfdrbw
        rfpbint();
    }

    /**
     *  Sfts whfthfr thf tbblf drbws vfrtidbl linfs bftwffn dflls.
     *  If <dodf>showVfrtidblLinfs</dodf> is truf it dofs; if it is fblsf it dofsn't.
     *
     * @pbrbm   showVfrtidblLinfs              truf if tbblf vifw should drbw vfrtidbl linfs
     * @sff     #gftShowVfrtidblLinfs
     * @sff     #sftShowGrid
     * @sff     #sftShowHorizontblLinfs
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Whfthfr vfrtidbl linfs should bf drbwn in bftwffn thf dflls.
     */
    publid void sftShowVfrtidblLinfs(boolfbn showVfrtidblLinfs) {
        boolfbn old = this.showVfrtidblLinfs;
        this.showVfrtidblLinfs = showVfrtidblLinfs;
        firfPropfrtyChbngf("showVfrtidblLinfs", old, showVfrtidblLinfs);
        // Rfdrbw
        rfpbint();
    }

    /**
     * Rfturns truf if thf tbblf drbws horizontbl linfs bftwffn dflls, fblsf if it
     * dofsn't. Thf dffbult vbluf is look bnd fffl dfpfndfnt.
     *
     * @rfturn  truf if thf tbblf drbws horizontbl linfs bftwffn dflls, fblsf if it
     *          dofsn't
     * @sff     #sftShowHorizontblLinfs
     */
    publid boolfbn gftShowHorizontblLinfs() {
        rfturn showHorizontblLinfs;
    }

    /**
     * Rfturns truf if thf tbblf drbws vfrtidbl linfs bftwffn dflls, fblsf if it
     * dofsn't. Thf dffbult vbluf is look bnd fffl dfpfndfnt.
     *
     * @rfturn  truf if thf tbblf drbws vfrtidbl linfs bftwffn dflls, fblsf if it
     *          dofsn't
     * @sff     #sftShowVfrtidblLinfs
     */
    publid boolfbn gftShowVfrtidblLinfs() {
        rfturn showVfrtidblLinfs;
    }

    /**
     * Sfts thf tbblf's buto rfsizf modf whfn thf tbblf is rfsizfd.  For furthfr
     * informbtion on how thf difffrfnt rfsizf modfs work, sff
     * {@link #doLbyout}.
     *
     * @pbrbm   modf Onf of 5 lfgbl vblufs:
     *                   AUTO_RESIZE_OFF,
     *                   AUTO_RESIZE_NEXT_COLUMN,
     *                   AUTO_RESIZE_SUBSEQUENT_COLUMNS,
     *                   AUTO_RESIZE_LAST_COLUMN,
     *                   AUTO_RESIZE_ALL_COLUMNS
     *
     * @sff     #gftAutoRfsizfModf
     * @sff     #doLbyout
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Whfthfr thf dolumns should bdjust thfmsflvfs butombtidblly.
     *        fnum: AUTO_RESIZE_OFF                JTbblf.AUTO_RESIZE_OFF
     *              AUTO_RESIZE_NEXT_COLUMN        JTbblf.AUTO_RESIZE_NEXT_COLUMN
     *              AUTO_RESIZE_SUBSEQUENT_COLUMNS JTbblf.AUTO_RESIZE_SUBSEQUENT_COLUMNS
     *              AUTO_RESIZE_LAST_COLUMN        JTbblf.AUTO_RESIZE_LAST_COLUMN
     *              AUTO_RESIZE_ALL_COLUMNS        JTbblf.AUTO_RESIZE_ALL_COLUMNS
     */
    publid void sftAutoRfsizfModf(int modf) {
        if ((modf == AUTO_RESIZE_OFF) ||
            (modf == AUTO_RESIZE_NEXT_COLUMN) ||
            (modf == AUTO_RESIZE_SUBSEQUENT_COLUMNS) ||
            (modf == AUTO_RESIZE_LAST_COLUMN) ||
            (modf == AUTO_RESIZE_ALL_COLUMNS)) {
            int old = butoRfsizfModf;
            butoRfsizfModf = modf;
            rfsizfAndRfpbint();
            if (tbblfHfbdfr != null) {
                tbblfHfbdfr.rfsizfAndRfpbint();
            }
            firfPropfrtyChbngf("butoRfsizfModf", old, butoRfsizfModf);
        }
    }

    /**
     * Rfturns thf buto rfsizf modf of thf tbblf.  Thf dffbult modf
     * is AUTO_RESIZE_SUBSEQUENT_COLUMNS.
     *
     * @rfturn  thf butoRfsizfModf of thf tbblf
     *
     * @sff     #sftAutoRfsizfModf
     * @sff     #doLbyout
     */
    publid int gftAutoRfsizfModf() {
        rfturn butoRfsizfModf;
    }

    /**
     * Sfts this tbblf's <dodf>butoCrfbtfColumnsFromModfl</dodf> flbg.
     * This mfthod dblls <dodf>drfbtfDffbultColumnsFromModfl</dodf> if
     * <dodf>butoCrfbtfColumnsFromModfl</dodf> dhbngfs from fblsf to truf.
     *
     * @pbrbm   butoCrfbtfColumnsFromModfl   truf if <dodf>JTbblf</dodf> should butombtidblly drfbtf dolumns
     * @sff     #gftAutoCrfbtfColumnsFromModfl
     * @sff     #drfbtfDffbultColumnsFromModfl
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Autombtidblly populbtfs thf dolumnModfl whfn b nfw TbblfModfl is submittfd.
     */
    publid void sftAutoCrfbtfColumnsFromModfl(boolfbn butoCrfbtfColumnsFromModfl) {
        if (this.butoCrfbtfColumnsFromModfl != butoCrfbtfColumnsFromModfl) {
            boolfbn old = this.butoCrfbtfColumnsFromModfl;
            this.butoCrfbtfColumnsFromModfl = butoCrfbtfColumnsFromModfl;
            if (butoCrfbtfColumnsFromModfl) {
                drfbtfDffbultColumnsFromModfl();
            }
            firfPropfrtyChbngf("butoCrfbtfColumnsFromModfl", old, butoCrfbtfColumnsFromModfl);
        }
    }

    /**
     * Dftfrminfs whfthfr thf tbblf will drfbtf dffbult dolumns from thf modfl.
     * If truf, <dodf>sftModfl</dodf> will dlfbr bny fxisting dolumns bnd
     * drfbtf nfw dolumns from thf nfw modfl.  Also, if thf fvfnt in
     * thf <dodf>tbblfChbngfd</dodf> notifidbtion spfdififs thbt thf
     * fntirf tbblf dhbngfd, thfn thf dolumns will bf rfbuilt.
     * Thf dffbult is truf.
     *
     * @rfturn  thf butoCrfbtfColumnsFromModfl of thf tbblf
     * @sff     #sftAutoCrfbtfColumnsFromModfl
     * @sff     #drfbtfDffbultColumnsFromModfl
     */
    publid boolfbn gftAutoCrfbtfColumnsFromModfl() {
        rfturn butoCrfbtfColumnsFromModfl;
    }

    /**
     * Crfbtfs dffbult dolumns for thf tbblf from
     * thf dbtb modfl using thf <dodf>gftColumnCount</dodf> mfthod
     * dffinfd in thf <dodf>TbblfModfl</dodf> intfrfbdf.
     * <p>
     * Clfbrs bny fxisting dolumns bfforf drfbting thf
     * nfw dolumns bbsfd on informbtion from thf modfl.
     *
     * @sff     #gftAutoCrfbtfColumnsFromModfl
     */
    publid void drfbtfDffbultColumnsFromModfl() {
        TbblfModfl m = gftModfl();
        if (m != null) {
            // Rfmovf bny durrfnt dolumns
            TbblfColumnModfl dm = gftColumnModfl();
            whilf (dm.gftColumnCount() > 0) {
                dm.rfmovfColumn(dm.gftColumn(0));
            }

            // Crfbtf nfw dolumns from thf dbtb modfl info
            for (int i = 0; i < m.gftColumnCount(); i++) {
                TbblfColumn nfwColumn = nfw TbblfColumn(i);
                bddColumn(nfwColumn);
            }
        }
    }

    /**
     * Sfts b dffbult dfll rfndfrfr to bf usfd if no rfndfrfr hbs bffn sft in
     * b <dodf>TbblfColumn</dodf>. If rfndfrfr is <dodf>null</dodf>,
     * rfmovfs thf dffbult rfndfrfr for this dolumn dlbss.
     *
     * @pbrbm  dolumnClbss     sft thf dffbult dfll rfndfrfr for this dolumnClbss
     * @pbrbm  rfndfrfr        dffbult dfll rfndfrfr to bf usfd for this
     *                         dolumnClbss
     * @sff     #gftDffbultRfndfrfr
     * @sff     #sftDffbultEditor
     */
    publid void sftDffbultRfndfrfr(Clbss<?> dolumnClbss, TbblfCfllRfndfrfr rfndfrfr) {
        if (rfndfrfr != null) {
            dffbultRfndfrfrsByColumnClbss.put(dolumnClbss, rfndfrfr);
        }
        flsf {
            dffbultRfndfrfrsByColumnClbss.rfmovf(dolumnClbss);
        }
    }

    /**
     * Rfturns thf dfll rfndfrfr to bf usfd whfn no rfndfrfr hbs bffn sft in
     * b <dodf>TbblfColumn</dodf>. During thf rfndfring of dflls thf rfndfrfr is fftdhfd from
     * b <dodf>Hbshtbblf</dodf> of fntrifs bddording to thf dlbss of thf dflls in thf dolumn. If
     * thfrf is no fntry for this <dodf>dolumnClbss</dodf> thf mfthod rfturns
     * thf fntry for thf most spfdifid supfrdlbss. Thf <dodf>JTbblf</dodf> instblls fntrifs
     * for <dodf>Objfdt</dodf>, <dodf>Numbfr</dodf>, bnd <dodf>Boolfbn</dodf>, bll of whidh dbn bf modififd
     * or rfplbdfd.
     *
     * @pbrbm   dolumnClbss   rfturn thf dffbult dfll rfndfrfr
     *                        for this dolumnClbss
     * @rfturn  thf rfndfrfr for this dolumnClbss
     * @sff     #sftDffbultRfndfrfr
     * @sff     #gftColumnClbss
     */
    publid TbblfCfllRfndfrfr gftDffbultRfndfrfr(Clbss<?> dolumnClbss) {
        if (dolumnClbss == null) {
            rfturn null;
        }
        flsf {
            Objfdt rfndfrfr = dffbultRfndfrfrsByColumnClbss.gft(dolumnClbss);
            if (rfndfrfr != null) {
                rfturn (TbblfCfllRfndfrfr)rfndfrfr;
            }
            flsf {
                Clbss<?> d = dolumnClbss.gftSupfrdlbss();
                if (d == null && dolumnClbss != Objfdt.dlbss) {
                    d = Objfdt.dlbss;
                }
                rfturn gftDffbultRfndfrfr(d);
            }
        }
    }

    /**
     * Sfts b dffbult dfll fditor to bf usfd if no fditor hbs bffn sft in
     * b <dodf>TbblfColumn</dodf>. If no fditing is rfquirfd in b tbblf, or b
     * pbrtidulbr dolumn in b tbblf, usfs thf <dodf>isCfllEditbblf</dodf>
     * mfthod in thf <dodf>TbblfModfl</dodf> intfrfbdf to fnsurf thbt this
     * <dodf>JTbblf</dodf> will not stbrt bn fditor in thfsf dolumns.
     * If fditor is <dodf>null</dodf>, rfmovfs thf dffbult fditor for this
     * dolumn dlbss.
     *
     * @pbrbm  dolumnClbss  sft thf dffbult dfll fditor for this dolumnClbss
     * @pbrbm  fditor   dffbult dfll fditor to bf usfd for this dolumnClbss
     * @sff     TbblfModfl#isCfllEditbblf
     * @sff     #gftDffbultEditor
     * @sff     #sftDffbultRfndfrfr
     */
    publid void sftDffbultEditor(Clbss<?> dolumnClbss, TbblfCfllEditor fditor) {
        if (fditor != null) {
            dffbultEditorsByColumnClbss.put(dolumnClbss, fditor);
        }
        flsf {
            dffbultEditorsByColumnClbss.rfmovf(dolumnClbss);
        }
    }

    /**
     * Rfturns thf fditor to bf usfd whfn no fditor hbs bffn sft in
     * b <dodf>TbblfColumn</dodf>. During thf fditing of dflls thf fditor is fftdhfd from
     * b <dodf>Hbshtbblf</dodf> of fntrifs bddording to thf dlbss of thf dflls in thf dolumn. If
     * thfrf is no fntry for this <dodf>dolumnClbss</dodf> thf mfthod rfturns
     * thf fntry for thf most spfdifid supfrdlbss. Thf <dodf>JTbblf</dodf> instblls fntrifs
     * for <dodf>Objfdt</dodf>, <dodf>Numbfr</dodf>, bnd <dodf>Boolfbn</dodf>, bll of whidh dbn bf modififd
     * or rfplbdfd.
     *
     * @pbrbm   dolumnClbss  rfturn thf dffbult dfll fditor for this dolumnClbss
     * @rfturn thf dffbult dfll fditor to bf usfd for this dolumnClbss
     * @sff     #sftDffbultEditor
     * @sff     #gftColumnClbss
     */
    publid TbblfCfllEditor gftDffbultEditor(Clbss<?> dolumnClbss) {
        if (dolumnClbss == null) {
            rfturn null;
        }
        flsf {
            Objfdt fditor = dffbultEditorsByColumnClbss.gft(dolumnClbss);
            if (fditor != null) {
                rfturn (TbblfCfllEditor)fditor;
            }
            flsf {
                rfturn gftDffbultEditor(dolumnClbss.gftSupfrdlbss());
            }
        }
    }

    /**
     * Turns on or off butombtid drbg hbndling. In ordfr to fnbblf butombtid
     * drbg hbndling, this propfrty should bf sft to {@dodf truf}, bnd thf
     * tbblf's {@dodf TrbnsffrHbndlfr} nffds to bf {@dodf non-null}.
     * Thf dffbult vbluf of thf {@dodf drbgEnbblfd} propfrty is {@dodf fblsf}.
     * <p>
     * Thf job of honoring this propfrty, bnd rfdognizing b usfr drbg gfsturf,
     * lifs with thf look bnd fffl implfmfntbtion, bnd in pbrtidulbr, thf tbblf's
     * {@dodf TbblfUI}. Whfn butombtid drbg hbndling is fnbblfd, most look bnd
     * fffls (indluding thosf thbt subdlbss {@dodf BbsidLookAndFffl}) bfgin b
     * drbg bnd drop opfrbtion whfnfvfr thf usfr prfssfs thf mousf button ovfr
     * bn itfm (in singlf sflfdtion modf) or b sflfdtion (in othfr sflfdtion
     * modfs) bnd thfn movfs thf mousf b ffw pixfls. Sftting this propfrty to
     * {@dodf truf} dbn thfrfforf hbvf b subtlf ffffdt on how sflfdtions bfhbvf.
     * <p>
     * If b look bnd fffl is usfd thbt ignorfs this propfrty, you dbn still
     * bfgin b drbg bnd drop opfrbtion by dblling {@dodf fxportAsDrbg} on thf
     * tbblf's {@dodf TrbnsffrHbndlfr}.
     *
     * @pbrbm b whfthfr or not to fnbblf butombtid drbg hbndling
     * @fxdfption HfbdlfssExdfption if
     *            <dodf>b</dodf> is <dodf>truf</dodf> bnd
     *            <dodf>GrbphidsEnvironmfnt.isHfbdlfss()</dodf>
     *            rfturns <dodf>truf</dodf>
     * @sff jbvb.bwt.GrbphidsEnvironmfnt#isHfbdlfss
     * @sff #gftDrbgEnbblfd
     * @sff #sftTrbnsffrHbndlfr
     * @sff TrbnsffrHbndlfr
     * @sindf 1.4
     *
     * @bfbninfo
     *  dfsdription: dftfrminfs whfthfr butombtid drbg hbndling is fnbblfd
     *        bound: fblsf
     */
    publid void sftDrbgEnbblfd(boolfbn b) {
        if (b && GrbphidsEnvironmfnt.isHfbdlfss()) {
            throw nfw HfbdlfssExdfption();
        }
        drbgEnbblfd = b;
    }

    /**
     * Rfturns whfthfr or not butombtid drbg hbndling is fnbblfd.
     *
     * @rfturn thf vbluf of thf {@dodf drbgEnbblfd} propfrty
     * @sff #sftDrbgEnbblfd
     * @sindf 1.4
     */
    publid boolfbn gftDrbgEnbblfd() {
        rfturn drbgEnbblfd;
    }

    /**
     * Sfts thf drop modf for this domponfnt. For bbdkwbrd dompbtibility,
     * thf dffbult for this propfrty is <dodf>DropModf.USE_SELECTION</dodf>.
     * Usbgf of onf of thf othfr modfs is rfdommfndfd, howfvfr, for bn
     * improvfd usfr fxpfrifndf. <dodf>DropModf.ON</dodf>, for instbndf,
     * offfrs similbr bfhbvior of showing itfms bs sflfdtfd, but dofs so without
     * bfffdting thf bdtubl sflfdtion in thf tbblf.
     * <p>
     * <dodf>JTbblf</dodf> supports thf following drop modfs:
     * <ul>
     *    <li><dodf>DropModf.USE_SELECTION</dodf></li>
     *    <li><dodf>DropModf.ON</dodf></li>
     *    <li><dodf>DropModf.INSERT</dodf></li>
     *    <li><dodf>DropModf.INSERT_ROWS</dodf></li>
     *    <li><dodf>DropModf.INSERT_COLS</dodf></li>
     *    <li><dodf>DropModf.ON_OR_INSERT</dodf></li>
     *    <li><dodf>DropModf.ON_OR_INSERT_ROWS</dodf></li>
     *    <li><dodf>DropModf.ON_OR_INSERT_COLS</dodf></li>
     * </ul>
     * <p>
     * Thf drop modf is only mfbningful if this domponfnt hbs b
     * <dodf>TrbnsffrHbndlfr</dodf> thbt bddfpts drops.
     *
     * @pbrbm dropModf thf drop modf to usf
     * @throws IllfgblArgumfntExdfption if thf drop modf is unsupportfd
     *         or <dodf>null</dodf>
     * @sff #gftDropModf
     * @sff #gftDropLodbtion
     * @sff #sftTrbnsffrHbndlfr
     * @sff TrbnsffrHbndlfr
     * @sindf 1.6
     */
    publid finbl void sftDropModf(DropModf dropModf) {
        if (dropModf != null) {
            switdh (dropModf) {
                dbsf USE_SELECTION:
                dbsf ON:
                dbsf INSERT:
                dbsf INSERT_ROWS:
                dbsf INSERT_COLS:
                dbsf ON_OR_INSERT:
                dbsf ON_OR_INSERT_ROWS:
                dbsf ON_OR_INSERT_COLS:
                    this.dropModf = dropModf;
                    rfturn;
            }
        }

        throw nfw IllfgblArgumfntExdfption(dropModf + ": Unsupportfd drop modf for tbblf");
    }

    /**
     * Rfturns thf drop modf for this domponfnt.
     *
     * @rfturn thf drop modf for this domponfnt
     * @sff #sftDropModf
     * @sindf 1.6
     */
    publid finbl DropModf gftDropModf() {
        rfturn dropModf;
    }

    /**
     * Cbldulbtfs b drop lodbtion in this domponfnt, rfprfsfnting whfrf b
     * drop bt thf givfn point should insfrt dbtb.
     *
     * @pbrbm p thf point to dbldulbtf b drop lodbtion for
     * @rfturn thf drop lodbtion, or <dodf>null</dodf>
     */
    DropLodbtion dropLodbtionForPoint(Point p) {
        DropLodbtion lodbtion = null;

        int row = rowAtPoint(p);
        int dol = dolumnAtPoint(p);
        boolfbn outsidf = Boolfbn.TRUE == gftClifntPropfrty("Tbblf.isFilfList")
                          && SwingUtilitifs2.pointOutsidfPrffSizf(this, row, dol, p);

        Rfdtbnglf rfdt = gftCfllRfdt(row, dol, truf);
        Sfdtion xSfdtion, ySfdtion;
        boolfbn bftwffn = fblsf;
        boolfbn ltr = gftComponfntOrifntbtion().isLfftToRight();

        switdh(dropModf) {
            dbsf USE_SELECTION:
            dbsf ON:
                if (row == -1 || dol == -1 || outsidf) {
                    lodbtion = nfw DropLodbtion(p, -1, -1, fblsf, fblsf);
                } flsf {
                    lodbtion = nfw DropLodbtion(p, row, dol, fblsf, fblsf);
                }
                brfbk;
            dbsf INSERT:
                if (row == -1 && dol == -1) {
                    lodbtion = nfw DropLodbtion(p, 0, 0, truf, truf);
                    brfbk;
                }

                xSfdtion = SwingUtilitifs2.lifsInHorizontbl(rfdt, p, ltr, truf);

                if (row == -1) {
                    if (xSfdtion == LEADING) {
                        lodbtion = nfw DropLodbtion(p, gftRowCount(), dol, truf, truf);
                    } flsf if (xSfdtion == TRAILING) {
                        lodbtion = nfw DropLodbtion(p, gftRowCount(), dol + 1, truf, truf);
                    } flsf {
                        lodbtion = nfw DropLodbtion(p, gftRowCount(), dol, truf, fblsf);
                    }
                } flsf if (xSfdtion == LEADING || xSfdtion == TRAILING) {
                    ySfdtion = SwingUtilitifs2.lifsInVfrtidbl(rfdt, p, truf);
                    if (ySfdtion == LEADING) {
                        bftwffn = truf;
                    } flsf if (ySfdtion == TRAILING) {
                        row++;
                        bftwffn = truf;
                    }

                    lodbtion = nfw DropLodbtion(p, row,
                                                xSfdtion == TRAILING ? dol + 1 : dol,
                                                bftwffn, truf);
                } flsf {
                    if (SwingUtilitifs2.lifsInVfrtidbl(rfdt, p, fblsf) == TRAILING) {
                        row++;
                    }

                    lodbtion = nfw DropLodbtion(p, row, dol, truf, fblsf);
                }

                brfbk;
            dbsf INSERT_ROWS:
                if (row == -1 && dol == -1) {
                    lodbtion = nfw DropLodbtion(p, -1, -1, fblsf, fblsf);
                    brfbk;
                }

                if (row == -1) {
                    lodbtion = nfw DropLodbtion(p, gftRowCount(), dol, truf, fblsf);
                    brfbk;
                }

                if (SwingUtilitifs2.lifsInVfrtidbl(rfdt, p, fblsf) == TRAILING) {
                    row++;
                }

                lodbtion = nfw DropLodbtion(p, row, dol, truf, fblsf);
                brfbk;
            dbsf ON_OR_INSERT_ROWS:
                if (row == -1 && dol == -1) {
                    lodbtion = nfw DropLodbtion(p, -1, -1, fblsf, fblsf);
                    brfbk;
                }

                if (row == -1) {
                    lodbtion = nfw DropLodbtion(p, gftRowCount(), dol, truf, fblsf);
                    brfbk;
                }

                ySfdtion = SwingUtilitifs2.lifsInVfrtidbl(rfdt, p, truf);
                if (ySfdtion == LEADING) {
                    bftwffn = truf;
                } flsf if (ySfdtion == TRAILING) {
                    row++;
                    bftwffn = truf;
                }

                lodbtion = nfw DropLodbtion(p, row, dol, bftwffn, fblsf);
                brfbk;
            dbsf INSERT_COLS:
                if (row == -1) {
                    lodbtion = nfw DropLodbtion(p, -1, -1, fblsf, fblsf);
                    brfbk;
                }

                if (dol == -1) {
                    lodbtion = nfw DropLodbtion(p, gftColumnCount(), dol, fblsf, truf);
                    brfbk;
                }

                if (SwingUtilitifs2.lifsInHorizontbl(rfdt, p, ltr, fblsf) == TRAILING) {
                    dol++;
                }

                lodbtion = nfw DropLodbtion(p, row, dol, fblsf, truf);
                brfbk;
            dbsf ON_OR_INSERT_COLS:
                if (row == -1) {
                    lodbtion = nfw DropLodbtion(p, -1, -1, fblsf, fblsf);
                    brfbk;
                }

                if (dol == -1) {
                    lodbtion = nfw DropLodbtion(p, row, gftColumnCount(), fblsf, truf);
                    brfbk;
                }

                xSfdtion = SwingUtilitifs2.lifsInHorizontbl(rfdt, p, ltr, truf);
                if (xSfdtion == LEADING) {
                    bftwffn = truf;
                } flsf if (xSfdtion == TRAILING) {
                    dol++;
                    bftwffn = truf;
                }

                lodbtion = nfw DropLodbtion(p, row, dol, fblsf, bftwffn);
                brfbk;
            dbsf ON_OR_INSERT:
                if (row == -1 && dol == -1) {
                    lodbtion = nfw DropLodbtion(p, 0, 0, truf, truf);
                    brfbk;
                }

                xSfdtion = SwingUtilitifs2.lifsInHorizontbl(rfdt, p, ltr, truf);

                if (row == -1) {
                    if (xSfdtion == LEADING) {
                        lodbtion = nfw DropLodbtion(p, gftRowCount(), dol, truf, truf);
                    } flsf if (xSfdtion == TRAILING) {
                        lodbtion = nfw DropLodbtion(p, gftRowCount(), dol + 1, truf, truf);
                    } flsf {
                        lodbtion = nfw DropLodbtion(p, gftRowCount(), dol, truf, fblsf);
                    }

                    brfbk;
                }

                ySfdtion = SwingUtilitifs2.lifsInVfrtidbl(rfdt, p, truf);
                if (ySfdtion == LEADING) {
                    bftwffn = truf;
                } flsf if (ySfdtion == TRAILING) {
                    row++;
                    bftwffn = truf;
                }

                lodbtion = nfw DropLodbtion(p, row,
                                            xSfdtion == TRAILING ? dol + 1 : dol,
                                            bftwffn,
                                            xSfdtion != MIDDLE);

                brfbk;
            dffbult:
                bssfrt fblsf : "Unfxpfdtfd drop modf";
        }

        rfturn lodbtion;
    }

    /**
     * Cbllfd to sft or dlfbr thf drop lodbtion during b DnD opfrbtion.
     * In somf dbsfs, thf domponfnt mby nffd to usf it's intfrnbl sflfdtion
     * tfmporbrily to indidbtf thf drop lodbtion. To hflp fbdilitbtf this,
     * this mfthod rfturns bnd bddfpts bs b pbrbmftfr b stbtf objfdt.
     * This stbtf objfdt dbn bf usfd to storf, bnd lbtfr rfstorf, thf sflfdtion
     * stbtf. Whbtfvfr this mfthod rfturns will bf pbssfd bbdk to it in
     * futurf dblls, bs thf stbtf pbrbmftfr. If it wbnts thf DnD systfm to
     * dontinuf storing thf sbmf stbtf, it must pbss it bbdk fvfry timf.
     * Hfrf's how this is usfd:
     * <p>
     * Lft's sby thbt on thf first dbll to this mfthod thf domponfnt dfdidfs
     * to sbvf somf stbtf (bfdbusf it is bbout to usf thf sflfdtion to show
     * b drop indfx). It dbn rfturn b stbtf objfdt to thf dbllfr fndbpsulbting
     * bny sbvfd sflfdtion stbtf. On b sfdond dbll, lft's sby thf drop lodbtion
     * is bfing dhbngfd to somfthing flsf. Thf domponfnt dofsn't nffd to
     * rfstorf bnything yft, so it simply pbssfs bbdk thf sbmf stbtf objfdt
     * to hbvf thf DnD systfm dontinuf storing it. Finblly, lft's sby this
     * mfthod is mfssbgfd with <dodf>null</dodf>. This mfbns DnD
     * is finishfd with this domponfnt for now, mfbning it should rfstorf
     * stbtf. At this point, it dbn usf thf stbtf pbrbmftfr to rfstorf
     * sbid stbtf, bnd of doursf rfturn <dodf>null</dodf> sindf thfrf's
     * no longfr bnything to storf.
     *
     * @pbrbm lodbtion thf drop lodbtion (bs dbldulbtfd by
     *        <dodf>dropLodbtionForPoint</dodf>) or <dodf>null</dodf>
     *        if thfrf's no longfr b vblid drop lodbtion
     * @pbrbm stbtf thf stbtf objfdt sbvfd fbrlifr for this domponfnt,
     *        or <dodf>null</dodf>
     * @pbrbm forDrop whfthfr or not thf mfthod is bfing dbllfd bfdbusf bn
     *        bdtubl drop oddurrfd
     * @rfturn bny sbvfd stbtf for this domponfnt, or <dodf>null</dodf> if nonf
     */
    Objfdt sftDropLodbtion(TrbnsffrHbndlfr.DropLodbtion lodbtion,
                           Objfdt stbtf,
                           boolfbn forDrop) {

        Objfdt rftVbl = null;
        DropLodbtion tbblfLodbtion = (DropLodbtion)lodbtion;

        if (dropModf == DropModf.USE_SELECTION) {
            if (tbblfLodbtion == null) {
                if (!forDrop && stbtf != null) {
                    dlfbrSflfdtion();

                    int[] rows = ((int[][])stbtf)[0];
                    int[] dols = ((int[][])stbtf)[1];
                    int[] bndhlfbds = ((int[][])stbtf)[2];

                    for (int row : rows) {
                        bddRowSflfdtionIntfrvbl(row, row);
                    }

                    for (int dol : dols) {
                        bddColumnSflfdtionIntfrvbl(dol, dol);
                    }

                    SwingUtilitifs2.sftLfbdAndhorWithoutSflfdtion(
                            gftSflfdtionModfl(), bndhlfbds[1], bndhlfbds[0]);

                    SwingUtilitifs2.sftLfbdAndhorWithoutSflfdtion(
                            gftColumnModfl().gftSflfdtionModfl(),
                            bndhlfbds[3], bndhlfbds[2]);
                }
            } flsf {
                if (dropLodbtion == null) {
                    rftVbl = nfw int[][]{
                        gftSflfdtfdRows(),
                        gftSflfdtfdColumns(),
                        {gftAdjustfdIndfx(gftSflfdtionModfl()
                             .gftAndhorSflfdtionIndfx(), truf),
                         gftAdjustfdIndfx(gftSflfdtionModfl()
                             .gftLfbdSflfdtionIndfx(), truf),
                         gftAdjustfdIndfx(gftColumnModfl().gftSflfdtionModfl()
                             .gftAndhorSflfdtionIndfx(), fblsf),
                         gftAdjustfdIndfx(gftColumnModfl().gftSflfdtionModfl()
                             .gftLfbdSflfdtionIndfx(), fblsf)}};
                } flsf {
                    rftVbl = stbtf;
                }

                if (tbblfLodbtion.gftRow() == -1) {
                    dlfbrSflfdtionAndLfbdAndhor();
                } flsf {
                    sftRowSflfdtionIntfrvbl(tbblfLodbtion.gftRow(),
                                            tbblfLodbtion.gftRow());
                    sftColumnSflfdtionIntfrvbl(tbblfLodbtion.gftColumn(),
                                               tbblfLodbtion.gftColumn());
                }
            }
        }

        DropLodbtion old = dropLodbtion;
        dropLodbtion = tbblfLodbtion;
        firfPropfrtyChbngf("dropLodbtion", old, dropLodbtion);

        rfturn rftVbl;
    }

    /**
     * Rfturns thf lodbtion thbt this domponfnt should visublly indidbtf
     * bs thf drop lodbtion during b DnD opfrbtion ovfr thf domponfnt,
     * or {@dodf null} if no lodbtion is to durrfntly bf shown.
     * <p>
     * This mfthod is not mfbnt for qufrying thf drop lodbtion
     * from b {@dodf TrbnsffrHbndlfr}, bs thf drop lodbtion is only
     * sft bftfr thf {@dodf TrbnsffrHbndlfr}'s <dodf>dbnImport</dodf>
     * hbs rfturnfd bnd hbs bllowfd for thf lodbtion to bf shown.
     * <p>
     * Whfn this propfrty dhbngfs, b propfrty dhbngf fvfnt with
     * nbmf "dropLodbtion" is firfd by thf domponfnt.
     *
     * @rfturn thf drop lodbtion
     * @sff #sftDropModf
     * @sff TrbnsffrHbndlfr#dbnImport(TrbnsffrHbndlfr.TrbnsffrSupport)
     * @sindf 1.6
     */
    publid finbl DropLodbtion gftDropLodbtion() {
        rfturn dropLodbtion;
    }

    /**
     * Spfdififs whfthfr b {@dodf RowSortfr} should bf drfbtfd for thf
     * tbblf whfnfvfr its modfl dhbngfs.
     * <p>
     * Whfn {@dodf sftAutoCrfbtfRowSortfr(truf)} is invokfd, b {@dodf
     * TbblfRowSortfr} is immfdibtfly drfbtfd bnd instbllfd on thf
     * tbblf.  Whilf thf {@dodf butoCrfbtfRowSortfr} propfrty rfmbins
     * {@dodf truf}, fvfry timf thf modfl is dhbngfd, b nfw {@dodf
     * TbblfRowSortfr} is drfbtfd bnd sft bs thf tbblf's row sortfr.
     * Thf dffbult vbluf for thf {@dodf butoCrfbtfRowSortfr}
     * propfrty is {@dodf fblsf}.
     *
     * @pbrbm butoCrfbtfRowSortfr whfthfr or not b {@dodf RowSortfr}
     *        should bf butombtidblly drfbtfd
     * @sff jbvbx.swing.tbblf.TbblfRowSortfr
     * @bfbninfo
     *        bound: truf
     *    prfffrrfd: truf
     *  dfsdription: Whfthfr or not to turn on sorting by dffbult.
     * @sindf 1.6
     */
    publid void sftAutoCrfbtfRowSortfr(boolfbn butoCrfbtfRowSortfr) {
        boolfbn oldVbluf = this.butoCrfbtfRowSortfr;
        this.butoCrfbtfRowSortfr = butoCrfbtfRowSortfr;
        if (butoCrfbtfRowSortfr) {
            sftRowSortfr(nfw TbblfRowSortfr<TbblfModfl>(gftModfl()));
        }
        firfPropfrtyChbngf("butoCrfbtfRowSortfr", oldVbluf,
                           butoCrfbtfRowSortfr);
    }

    /**
     * Rfturns {@dodf truf} if whfnfvfr thf modfl dhbngfs, b nfw
     * {@dodf RowSortfr} should bf drfbtfd bnd instbllfd
     * bs thf tbblf's sortfr; othfrwisf, rfturns {@dodf fblsf}.
     *
     * @rfturn truf if b {@dodf RowSortfr} should bf drfbtfd whfn
     *         thf modfl dhbngfs
     * @sindf 1.6
     */
    publid boolfbn gftAutoCrfbtfRowSortfr() {
        rfturn butoCrfbtfRowSortfr;
    }

    /**
     * Spfdififs whfthfr thf sflfdtion should bf updbtfd bftfr sorting.
     * If truf, on sorting thf sflfdtion is rfsft sudh thbt
     * thf sbmf rows, in tfrms of thf modfl, rfmbin sflfdtfd.  Thf dffbult
     * is truf.
     *
     * @pbrbm updbtf whfthfr or not to updbtf thf sflfdtion on sorting
     * @bfbninfo
     *        bound: truf
     *       fxpfrt: truf
     *  dfsdription: Whfthfr or not to updbtf thf sflfdtion on sorting
     * @sindf 1.6
     */
    publid void sftUpdbtfSflfdtionOnSort(boolfbn updbtf) {
        if (updbtfSflfdtionOnSort != updbtf) {
            updbtfSflfdtionOnSort = updbtf;
            firfPropfrtyChbngf("updbtfSflfdtionOnSort", !updbtf, updbtf);
        }
    }

    /**
     * Rfturns truf if thf sflfdtion should bf updbtfd bftfr sorting.
     *
     * @rfturn whfthfr to updbtf thf sflfdtion on b sort
     * @sindf 1.6
     */
    publid boolfbn gftUpdbtfSflfdtionOnSort() {
        rfturn updbtfSflfdtionOnSort;
    }

    /**
     * Sfts thf <dodf>RowSortfr</dodf>.  <dodf>RowSortfr</dodf> is usfd
     * to providf sorting bnd filtfring to b <dodf>JTbblf</dodf>.
     * <p>
     * This mfthod dlfbrs thf sflfdtion bnd rfsfts bny vbribblf row hfights.
     * <p>
     * This mfthod firfs b <dodf>PropfrtyChbngfEvfnt</dodf> whfn bppropribtf,
     * with thf propfrty nbmf <dodf>"rowSortfr"</dodf>.  For
     * bbdkwbrd-dompbtibility, this mfthod firfs bn bdditionbl fvfnt with thf
     * propfrty nbmf <dodf>"sortfr"</dodf>.
     * <p>
     * If thf undfrlying modfl of thf <dodf>RowSortfr</dodf> difffrs from
     * thbt of this <dodf>JTbblf</dodf> undffinfd bfhbvior will rfsult.
     *
     * @pbrbm sortfr thf <dodf>RowSortfr</dodf>; <dodf>null</dodf> turns
     *        sorting off
     * @sff jbvbx.swing.tbblf.TbblfRowSortfr
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Thf tbblf's RowSortfr
     * @sindf 1.6
     */
    publid void sftRowSortfr(RowSortfr<? fxtfnds TbblfModfl> sortfr) {
        RowSortfr<? fxtfnds TbblfModfl> oldRowSortfr = null;
        if (sortMbnbgfr != null) {
            oldRowSortfr = sortMbnbgfr.sortfr;
            sortMbnbgfr.disposf();
            sortMbnbgfr = null;
        }
        rowModfl = null;
        dlfbrSflfdtionAndLfbdAndhor();
        if (sortfr != null) {
            sortMbnbgfr = nfw SortMbnbgfr(sortfr);
        }
        rfsizfAndRfpbint();
        firfPropfrtyChbngf("rowSortfr", oldRowSortfr, sortfr);
        firfPropfrtyChbngf("sortfr", oldRowSortfr, sortfr);
    }

    /**
     * Rfturns thf objfdt rfsponsiblf for sorting.
     *
     * @rfturn thf objfdt rfsponsiblf for sorting
     * @sindf 1.6
     */
    publid RowSortfr<? fxtfnds TbblfModfl> gftRowSortfr() {
        rfturn (sortMbnbgfr != null) ? sortMbnbgfr.sortfr : null;
    }

//
// Sflfdtion mfthods
//
    /**
     * Sfts thf tbblf's sflfdtion modf to bllow only singlf sflfdtions, b singlf
     * dontiguous intfrvbl, or multiplf intfrvbls.
     * <P>
     * <b>Notf:</b>
     * <dodf>JTbblf</dodf> providfs bll thf mfthods for hbndling
     * dolumn bnd row sflfdtion.  Whfn sftting stbtfs,
     * sudh bs <dodf>sftSflfdtionModf</dodf>, it not only
     * updbtfs thf modf for thf row sflfdtion modfl but blso sfts similbr
     * vblufs in thf sflfdtion modfl of thf <dodf>dolumnModfl</dodf>.
     * If you wbnt to hbvf thf row bnd dolumn sflfdtion modfls opfrbting
     * in difffrfnt modfs, sft thfm both dirfdtly.
     * <p>
     * Both thf row bnd dolumn sflfdtion modfls for <dodf>JTbblf</dodf>
     * dffbult to using b <dodf>DffbultListSflfdtionModfl</dodf>
     * so thbt <dodf>JTbblf</dodf> works thf sbmf wby bs thf
     * <dodf>JList</dodf>. Sff thf <dodf>sftSflfdtionModf</dodf> mfthod
     * in <dodf>JList</dodf> for dftbils bbout thf modfs.
     *
     * @pbrbm sflfdtionModf thf modf usfd by thf row bnd dolumn sflfdtion modfls
     * @sff JList#sftSflfdtionModf
     * @bfbninfo
     * dfsdription: Thf sflfdtion modf usfd by thf row bnd dolumn sflfdtion modfls.
     *        fnum: SINGLE_SELECTION            ListSflfdtionModfl.SINGLE_SELECTION
     *              SINGLE_INTERVAL_SELECTION   ListSflfdtionModfl.SINGLE_INTERVAL_SELECTION
     *              MULTIPLE_INTERVAL_SELECTION ListSflfdtionModfl.MULTIPLE_INTERVAL_SELECTION
     */
    publid void sftSflfdtionModf(int sflfdtionModf) {
        dlfbrSflfdtion();
        gftSflfdtionModfl().sftSflfdtionModf(sflfdtionModf);
        gftColumnModfl().gftSflfdtionModfl().sftSflfdtionModf(sflfdtionModf);
    }

    /**
     * Sfts whfthfr thf rows in this modfl dbn bf sflfdtfd.
     *
     * @pbrbm rowSflfdtionAllowfd   truf if this modfl will bllow row sflfdtion
     * @sff #gftRowSflfdtionAllowfd
     * @bfbninfo
     *  bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: If truf, bn fntirf row is sflfdtfd for fbdh sflfdtfd dfll.
     */
    publid void sftRowSflfdtionAllowfd(boolfbn rowSflfdtionAllowfd) {
        boolfbn old = this.rowSflfdtionAllowfd;
        this.rowSflfdtionAllowfd = rowSflfdtionAllowfd;
        if (old != rowSflfdtionAllowfd) {
            rfpbint();
        }
        firfPropfrtyChbngf("rowSflfdtionAllowfd", old, rowSflfdtionAllowfd);
    }

    /**
     * Rfturns truf if rows dbn bf sflfdtfd.
     *
     * @rfturn truf if rows dbn bf sflfdtfd, othfrwisf fblsf
     * @sff #sftRowSflfdtionAllowfd
     */
    publid boolfbn gftRowSflfdtionAllowfd() {
        rfturn rowSflfdtionAllowfd;
    }

    /**
     * Sfts whfthfr thf dolumns in this modfl dbn bf sflfdtfd.
     *
     * @pbrbm dolumnSflfdtionAllowfd   truf if this modfl will bllow dolumn sflfdtion
     * @sff #gftColumnSflfdtionAllowfd
     * @bfbninfo
     *  bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: If truf, bn fntirf dolumn is sflfdtfd for fbdh sflfdtfd dfll.
     */
    publid void sftColumnSflfdtionAllowfd(boolfbn dolumnSflfdtionAllowfd) {
        boolfbn old = dolumnModfl.gftColumnSflfdtionAllowfd();
        dolumnModfl.sftColumnSflfdtionAllowfd(dolumnSflfdtionAllowfd);
        if (old != dolumnSflfdtionAllowfd) {
            rfpbint();
        }
        firfPropfrtyChbngf("dolumnSflfdtionAllowfd", old, dolumnSflfdtionAllowfd);
    }

    /**
     * Rfturns truf if dolumns dbn bf sflfdtfd.
     *
     * @rfturn truf if dolumns dbn bf sflfdtfd, othfrwisf fblsf
     * @sff #sftColumnSflfdtionAllowfd
     */
    publid boolfbn gftColumnSflfdtionAllowfd() {
        rfturn dolumnModfl.gftColumnSflfdtionAllowfd();
    }

    /**
     * Sfts whfthfr this tbblf bllows both b dolumn sflfdtion bnd b
     * row sflfdtion to fxist simultbnfously. Whfn sft,
     * thf tbblf trfbts thf intfrsfdtion of thf row bnd dolumn sflfdtion
     * modfls bs thf sflfdtfd dflls. Ovfrridf <dodf>isCfllSflfdtfd</dodf> to
     * dhbngf this dffbult bfhbvior. This mfthod is fquivblfnt to sftting
     * both thf <dodf>rowSflfdtionAllowfd</dodf> propfrty bnd
     * <dodf>dolumnSflfdtionAllowfd</dodf> propfrty of thf
     * <dodf>dolumnModfl</dodf> to thf supplifd vbluf.
     *
     * @pbrbm  dfllSflfdtionEnbblfd     truf if simultbnfous row bnd dolumn
     *                                  sflfdtion is bllowfd
     * @sff #gftCfllSflfdtionEnbblfd
     * @sff #isCfllSflfdtfd
     * @bfbninfo
     *  bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Sflfdt b rfdtbngulbr rfgion of dflls rbthfr thbn
     *               rows or dolumns.
     */
    publid void sftCfllSflfdtionEnbblfd(boolfbn dfllSflfdtionEnbblfd) {
        sftRowSflfdtionAllowfd(dfllSflfdtionEnbblfd);
        sftColumnSflfdtionAllowfd(dfllSflfdtionEnbblfd);
        boolfbn old = this.dfllSflfdtionEnbblfd;
        this.dfllSflfdtionEnbblfd = dfllSflfdtionEnbblfd;
        firfPropfrtyChbngf("dfllSflfdtionEnbblfd", old, dfllSflfdtionEnbblfd);
    }

    /**
     * Rfturns truf if both row bnd dolumn sflfdtion modfls brf fnbblfd.
     * Equivblfnt to <dodf>gftRowSflfdtionAllowfd() &bmp;&bmp;
     * gftColumnSflfdtionAllowfd()</dodf>.
     *
     * @rfturn truf if both row bnd dolumn sflfdtion modfls brf fnbblfd
     *
     * @sff #sftCfllSflfdtionEnbblfd
     */
    publid boolfbn gftCfllSflfdtionEnbblfd() {
        rfturn gftRowSflfdtionAllowfd() && gftColumnSflfdtionAllowfd();
    }

    /**
     *  Sflfdts bll rows, dolumns, bnd dflls in thf tbblf.
     */
    publid void sflfdtAll() {
        // If I'm durrfntly fditing, thfn I should stop fditing
        if (isEditing()) {
            rfmovfEditor();
        }
        if (gftRowCount() > 0 && gftColumnCount() > 0) {
            int oldLfbd;
            int oldAndhor;
            ListSflfdtionModfl sflModfl;

            sflModfl = sflfdtionModfl;
            sflModfl.sftVblufIsAdjusting(truf);
            oldLfbd = gftAdjustfdIndfx(sflModfl.gftLfbdSflfdtionIndfx(), truf);
            oldAndhor = gftAdjustfdIndfx(sflModfl.gftAndhorSflfdtionIndfx(), truf);

            sftRowSflfdtionIntfrvbl(0, gftRowCount()-1);

            // this is donf to rfstorf thf bndhor bnd lfbd
            SwingUtilitifs2.sftLfbdAndhorWithoutSflfdtion(sflModfl, oldLfbd, oldAndhor);

            sflModfl.sftVblufIsAdjusting(fblsf);

            sflModfl = dolumnModfl.gftSflfdtionModfl();
            sflModfl.sftVblufIsAdjusting(truf);
            oldLfbd = gftAdjustfdIndfx(sflModfl.gftLfbdSflfdtionIndfx(), fblsf);
            oldAndhor = gftAdjustfdIndfx(sflModfl.gftAndhorSflfdtionIndfx(), fblsf);

            sftColumnSflfdtionIntfrvbl(0, gftColumnCount()-1);

            // this is donf to rfstorf thf bndhor bnd lfbd
            SwingUtilitifs2.sftLfbdAndhorWithoutSflfdtion(sflModfl, oldLfbd, oldAndhor);

            sflModfl.sftVblufIsAdjusting(fblsf);
        }
    }

    /**
     * Dfsflfdts bll sflfdtfd dolumns bnd rows.
     */
    publid void dlfbrSflfdtion() {
        sflfdtionModfl.dlfbrSflfdtion();
        dolumnModfl.gftSflfdtionModfl().dlfbrSflfdtion();
    }

    privbtf void dlfbrSflfdtionAndLfbdAndhor() {
        sflfdtionModfl.sftVblufIsAdjusting(truf);
        dolumnModfl.gftSflfdtionModfl().sftVblufIsAdjusting(truf);

        dlfbrSflfdtion();

        sflfdtionModfl.sftAndhorSflfdtionIndfx(-1);
        sflfdtionModfl.sftLfbdSflfdtionIndfx(-1);
        dolumnModfl.gftSflfdtionModfl().sftAndhorSflfdtionIndfx(-1);
        dolumnModfl.gftSflfdtionModfl().sftLfbdSflfdtionIndfx(-1);

        sflfdtionModfl.sftVblufIsAdjusting(fblsf);
        dolumnModfl.gftSflfdtionModfl().sftVblufIsAdjusting(fblsf);
    }

    privbtf int gftAdjustfdIndfx(int indfx, boolfbn row) {
        int dompbrf = row ? gftRowCount() : gftColumnCount();
        rfturn indfx < dompbrf ? indfx : -1;
    }

    privbtf int boundRow(int row) throws IllfgblArgumfntExdfption {
        if (row < 0 || row >= gftRowCount()) {
            throw nfw IllfgblArgumfntExdfption("Row indfx out of rbngf");
        }
        rfturn row;
    }

    privbtf int boundColumn(int dol) {
        if (dol< 0 || dol >= gftColumnCount()) {
            throw nfw IllfgblArgumfntExdfption("Column indfx out of rbngf");
        }
        rfturn dol;
    }

    /**
     * Sflfdts thf rows from <dodf>indfx0</dodf> to <dodf>indfx1</dodf>,
     * indlusivf.
     *
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>indfx0</dodf> or
     *                                          <dodf>indfx1</dodf> lif outsidf
     *                                          [0, <dodf>gftRowCount()</dodf>-1]
     * @pbrbm   indfx0 onf fnd of thf intfrvbl
     * @pbrbm   indfx1 thf othfr fnd of thf intfrvbl
     */
    publid void sftRowSflfdtionIntfrvbl(int indfx0, int indfx1) {
        sflfdtionModfl.sftSflfdtionIntfrvbl(boundRow(indfx0), boundRow(indfx1));
    }

    /**
     * Sflfdts thf dolumns from <dodf>indfx0</dodf> to <dodf>indfx1</dodf>,
     * indlusivf.
     *
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>indfx0</dodf> or
     *                                          <dodf>indfx1</dodf> lif outsidf
     *                                          [0, <dodf>gftColumnCount()</dodf>-1]
     * @pbrbm   indfx0 onf fnd of thf intfrvbl
     * @pbrbm   indfx1 thf othfr fnd of thf intfrvbl
     */
    publid void sftColumnSflfdtionIntfrvbl(int indfx0, int indfx1) {
        dolumnModfl.gftSflfdtionModfl().sftSflfdtionIntfrvbl(boundColumn(indfx0), boundColumn(indfx1));
    }

    /**
     * Adds thf rows from <dodf>indfx0</dodf> to <dodf>indfx1</dodf>, indlusivf, to
     * thf durrfnt sflfdtion.
     *
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>indfx0</dodf> or <dodf>indfx1</dodf>
     *                                          lif outsidf [0, <dodf>gftRowCount()</dodf>-1]
     * @pbrbm   indfx0 onf fnd of thf intfrvbl
     * @pbrbm   indfx1 thf othfr fnd of thf intfrvbl
     */
    publid void bddRowSflfdtionIntfrvbl(int indfx0, int indfx1) {
        sflfdtionModfl.bddSflfdtionIntfrvbl(boundRow(indfx0), boundRow(indfx1));
    }

    /**
     * Adds thf dolumns from <dodf>indfx0</dodf> to <dodf>indfx1</dodf>,
     * indlusivf, to thf durrfnt sflfdtion.
     *
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>indfx0</dodf> or
     *                                          <dodf>indfx1</dodf> lif outsidf
     *                                          [0, <dodf>gftColumnCount()</dodf>-1]
     * @pbrbm   indfx0 onf fnd of thf intfrvbl
     * @pbrbm   indfx1 thf othfr fnd of thf intfrvbl
     */
    publid void bddColumnSflfdtionIntfrvbl(int indfx0, int indfx1) {
        dolumnModfl.gftSflfdtionModfl().bddSflfdtionIntfrvbl(boundColumn(indfx0), boundColumn(indfx1));
    }

    /**
     * Dfsflfdts thf rows from <dodf>indfx0</dodf> to <dodf>indfx1</dodf>, indlusivf.
     *
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>indfx0</dodf> or
     *                                          <dodf>indfx1</dodf> lif outsidf
     *                                          [0, <dodf>gftRowCount()</dodf>-1]
     * @pbrbm   indfx0 onf fnd of thf intfrvbl
     * @pbrbm   indfx1 thf othfr fnd of thf intfrvbl
     */
    publid void rfmovfRowSflfdtionIntfrvbl(int indfx0, int indfx1) {
        sflfdtionModfl.rfmovfSflfdtionIntfrvbl(boundRow(indfx0), boundRow(indfx1));
    }

    /**
     * Dfsflfdts thf dolumns from <dodf>indfx0</dodf> to <dodf>indfx1</dodf>, indlusivf.
     *
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>indfx0</dodf> or
     *                                          <dodf>indfx1</dodf> lif outsidf
     *                                          [0, <dodf>gftColumnCount()</dodf>-1]
     * @pbrbm   indfx0 onf fnd of thf intfrvbl
     * @pbrbm   indfx1 thf othfr fnd of thf intfrvbl
     */
    publid void rfmovfColumnSflfdtionIntfrvbl(int indfx0, int indfx1) {
        dolumnModfl.gftSflfdtionModfl().rfmovfSflfdtionIntfrvbl(boundColumn(indfx0), boundColumn(indfx1));
    }

    /**
     * Rfturns thf indfx of thf first sflfdtfd row, -1 if no row is sflfdtfd.
     * @rfturn thf indfx of thf first sflfdtfd row
     */
    publid int gftSflfdtfdRow() {
        rfturn sflfdtionModfl.gftMinSflfdtionIndfx();
    }

    /**
     * Rfturns thf indfx of thf first sflfdtfd dolumn,
     * -1 if no dolumn is sflfdtfd.
     * @rfturn thf indfx of thf first sflfdtfd dolumn
     */
    publid int gftSflfdtfdColumn() {
        rfturn dolumnModfl.gftSflfdtionModfl().gftMinSflfdtionIndfx();
    }

    /**
     * Rfturns thf indidfs of bll sflfdtfd rows.
     *
     * @rfturn bn brrby of intfgfrs dontbining thf indidfs of bll sflfdtfd rows,
     *         or bn fmpty brrby if no row is sflfdtfd
     * @sff #gftSflfdtfdRow
     */
    publid int[] gftSflfdtfdRows() {
        int iMin = sflfdtionModfl.gftMinSflfdtionIndfx();
        int iMbx = sflfdtionModfl.gftMbxSflfdtionIndfx();

        if ((iMin == -1) || (iMbx == -1)) {
            rfturn nfw int[0];
        }

        int[] rvTmp = nfw int[1+ (iMbx - iMin)];
        int n = 0;
        for(int i = iMin; i <= iMbx; i++) {
            if (sflfdtionModfl.isSflfdtfdIndfx(i)) {
                rvTmp[n++] = i;
            }
        }
        int[] rv = nfw int[n];
        Systfm.brrbydopy(rvTmp, 0, rv, 0, n);
        rfturn rv;
    }

    /**
     * Rfturns thf indidfs of bll sflfdtfd dolumns.
     *
     * @rfturn bn brrby of intfgfrs dontbining thf indidfs of bll sflfdtfd dolumns,
     *         or bn fmpty brrby if no dolumn is sflfdtfd
     * @sff #gftSflfdtfdColumn
     */
    publid int[] gftSflfdtfdColumns() {
        rfturn dolumnModfl.gftSflfdtfdColumns();
    }

    /**
     * Rfturns thf numbfr of sflfdtfd rows.
     *
     * @rfturn thf numbfr of sflfdtfd rows, 0 if no rows brf sflfdtfd
     */
    publid int gftSflfdtfdRowCount() {
        int iMin = sflfdtionModfl.gftMinSflfdtionIndfx();
        int iMbx = sflfdtionModfl.gftMbxSflfdtionIndfx();
        int dount = 0;

        for(int i = iMin; i <= iMbx; i++) {
            if (sflfdtionModfl.isSflfdtfdIndfx(i)) {
                dount++;
            }
        }
        rfturn dount;
    }

    /**
     * Rfturns thf numbfr of sflfdtfd dolumns.
     *
     * @rfturn thf numbfr of sflfdtfd dolumns, 0 if no dolumns brf sflfdtfd
     */
    publid int gftSflfdtfdColumnCount() {
        rfturn dolumnModfl.gftSflfdtfdColumnCount();
    }

    /**
     * Rfturns truf if thf spfdififd indfx is in thf vblid rbngf of rows,
     * bnd thf row bt thbt indfx is sflfdtfd.
     *
     * @pbrbm row b row in thf row modfl
     * @rfturn truf if <dodf>row</dodf> is b vblid indfx bnd thf row bt
     *              thbt indfx is sflfdtfd (whfrf 0 is thf first row)
     */
    publid boolfbn isRowSflfdtfd(int row) {
        rfturn sflfdtionModfl.isSflfdtfdIndfx(row);
    }

    /**
     * Rfturns truf if thf spfdififd indfx is in thf vblid rbngf of dolumns,
     * bnd thf dolumn bt thbt indfx is sflfdtfd.
     *
     * @pbrbm   dolumn   thf dolumn in thf dolumn modfl
     * @rfturn truf if <dodf>dolumn</dodf> is b vblid indfx bnd thf dolumn bt
     *              thbt indfx is sflfdtfd (whfrf 0 is thf first dolumn)
     */
    publid boolfbn isColumnSflfdtfd(int dolumn) {
        rfturn dolumnModfl.gftSflfdtionModfl().isSflfdtfdIndfx(dolumn);
    }

    /**
     * Rfturns truf if thf spfdififd indidfs brf in thf vblid rbngf of rows
     * bnd dolumns bnd thf dfll bt thf spfdififd position is sflfdtfd.
     * @pbrbm row   thf row bfing qufrifd
     * @pbrbm dolumn  thf dolumn bfing qufrifd
     *
     * @rfturn truf if <dodf>row</dodf> bnd <dodf>dolumn</dodf> brf vblid indidfs
     *              bnd thf dfll bt indfx <dodf>(row, dolumn)</dodf> is sflfdtfd,
     *              whfrf thf first row bnd first dolumn brf bt indfx 0
     */
    publid boolfbn isCfllSflfdtfd(int row, int dolumn) {
        if (!gftRowSflfdtionAllowfd() && !gftColumnSflfdtionAllowfd()) {
            rfturn fblsf;
        }
        rfturn (!gftRowSflfdtionAllowfd() || isRowSflfdtfd(row)) &&
               (!gftColumnSflfdtionAllowfd() || isColumnSflfdtfd(dolumn));
    }

    privbtf void dhbngfSflfdtionModfl(ListSflfdtionModfl sm, int indfx,
                                      boolfbn togglf, boolfbn fxtfnd, boolfbn sflfdtfd,
                                      int bndhor, boolfbn bndhorSflfdtfd) {
        if (fxtfnd) {
            if (togglf) {
                if (bndhorSflfdtfd) {
                    sm.bddSflfdtionIntfrvbl(bndhor, indfx);
                } flsf {
                    sm.rfmovfSflfdtionIntfrvbl(bndhor, indfx);
                    // this is b Windows-only bfhbvior thbt wf wbnt for filf lists
                    if (Boolfbn.TRUE == gftClifntPropfrty("Tbblf.isFilfList")) {
                        sm.bddSflfdtionIntfrvbl(indfx, indfx);
                        sm.sftAndhorSflfdtionIndfx(bndhor);
                    }
                }
            }
            flsf {
                sm.sftSflfdtionIntfrvbl(bndhor, indfx);
            }
        }
        flsf {
            if (togglf) {
                if (sflfdtfd) {
                    sm.rfmovfSflfdtionIntfrvbl(indfx, indfx);
                }
                flsf {
                    sm.bddSflfdtionIntfrvbl(indfx, indfx);
                }
            }
            flsf {
                sm.sftSflfdtionIntfrvbl(indfx, indfx);
            }
        }
    }

    /**
     * Updbtfs thf sflfdtion modfls of thf tbblf, dfpfnding on thf stbtf of thf
     * two flbgs: <dodf>togglf</dodf> bnd <dodf>fxtfnd</dodf>. Most dhbngfs
     * to thf sflfdtion thbt brf thf rfsult of kfybobrd or mousf fvfnts rfdfivfd
     * by thf UI brf dhbnnflfd through this mfthod so thbt thf bfhbvior mby bf
     * ovfrriddfn by b subdlbss. Somf UIs mby nffd morf fundtionblity thbn
     * this mfthod providfs, sudh bs whfn mbnipulbting thf lfbd for disdontiguous
     * sflfdtion, bnd mby not dbll into this mfthod for somf sflfdtion dhbngfs.
     * <p>
     * This implfmfntbtion usfs thf following donvfntions:
     * <ul>
     * <li> <dodf>togglf</dodf>: <fm>fblsf</fm>, <dodf>fxtfnd</dodf>: <fm>fblsf</fm>.
     *      Clfbr thf prfvious sflfdtion bnd fnsurf thf nfw dfll is sflfdtfd.
     * <li> <dodf>togglf</dodf>: <fm>fblsf</fm>, <dodf>fxtfnd</dodf>: <fm>truf</fm>.
     *      Extfnd thf prfvious sflfdtion from thf bndhor to thf spfdififd dfll,
     *      dlfbring bll othfr sflfdtions.
     * <li> <dodf>togglf</dodf>: <fm>truf</fm>, <dodf>fxtfnd</dodf>: <fm>fblsf</fm>.
     *      If thf spfdififd dfll is sflfdtfd, dfsflfdt it. If it is not sflfdtfd, sflfdt it.
     * <li> <dodf>togglf</dodf>: <fm>truf</fm>, <dodf>fxtfnd</dodf>: <fm>truf</fm>.
     *      Apply thf sflfdtion stbtf of thf bndhor to bll dflls bftwffn it bnd thf
     *      spfdififd dfll.
     * </ul>
     * @pbrbm  rowIndfx   bfffdts thf sflfdtion bt <dodf>row</dodf>
     * @pbrbm  dolumnIndfx  bfffdts thf sflfdtion bt <dodf>dolumn</dodf>
     * @pbrbm  togglf  sff dfsdription bbovf
     * @pbrbm  fxtfnd  if truf, fxtfnd thf durrfnt sflfdtion
     *
     * @sindf 1.3
     */
    publid void dhbngfSflfdtion(int rowIndfx, int dolumnIndfx, boolfbn togglf, boolfbn fxtfnd) {
        ListSflfdtionModfl rsm = gftSflfdtionModfl();
        ListSflfdtionModfl dsm = gftColumnModfl().gftSflfdtionModfl();

        int bndhorRow = gftAdjustfdIndfx(rsm.gftAndhorSflfdtionIndfx(), truf);
        int bndhorCol = gftAdjustfdIndfx(dsm.gftAndhorSflfdtionIndfx(), fblsf);

        boolfbn bndhorSflfdtfd = truf;

        if (bndhorRow == -1) {
            if (gftRowCount() > 0) {
                bndhorRow = 0;
            }
            bndhorSflfdtfd = fblsf;
        }

        if (bndhorCol == -1) {
            if (gftColumnCount() > 0) {
                bndhorCol = 0;
            }
            bndhorSflfdtfd = fblsf;
        }

        // Chfdk thf sflfdtion hfrf rbthfr thbn in fbdh sflfdtion modfl.
        // This is signifidbnt in dfll sflfdtion modf if wf brf supposfd
        // to bf toggling thf sflfdtion. In this dbsf it is bfttfr to
        // fnsurf thbt thf dfll's sflfdtion stbtf will indffd bf dhbngfd.
        // If this wfrf donf in thf dodf for thf sflfdtion modfl it
        // might lfbvf b dfll in sflfdtion stbtf if thf row wbs
        // sflfdtfd but thf dolumn wbs not - bs it would togglf thfm both.
        boolfbn sflfdtfd = isCfllSflfdtfd(rowIndfx, dolumnIndfx);
        bndhorSflfdtfd = bndhorSflfdtfd && isCfllSflfdtfd(bndhorRow, bndhorCol);

        dhbngfSflfdtionModfl(dsm, dolumnIndfx, togglf, fxtfnd, sflfdtfd,
                             bndhorCol, bndhorSflfdtfd);
        dhbngfSflfdtionModfl(rsm, rowIndfx, togglf, fxtfnd, sflfdtfd,
                             bndhorRow, bndhorSflfdtfd);

        // Sdroll bftfr dhbnging thf sflfdtion bs blit sdrolling is immfdibtf,
        // so thbt if wf dbusf thf rfpbint bftfr thf sdroll wf fnd up pbinting
        // fvfrything!
        if (gftAutosdrolls()) {
            Rfdtbnglf dfllRfdt = gftCfllRfdt(rowIndfx, dolumnIndfx, fblsf);
            if (dfllRfdt != null) {
                sdrollRfdtToVisiblf(dfllRfdt);
            }
        }
    }

    /**
     * Rfturns thf forfground dolor for sflfdtfd dflls.
     *
     * @rfturn thf <dodf>Color</dodf> objfdt for thf forfground propfrty
     * @sff #sftSflfdtionForfground
     * @sff #sftSflfdtionBbdkground
     */
    publid Color gftSflfdtionForfground() {
        rfturn sflfdtionForfground;
    }

    /**
     * Sfts thf forfground dolor for sflfdtfd dflls.  Cfll rfndfrfrs
     * dbn usf this dolor to rfndfr tfxt bnd grbphids for sflfdtfd
     * dflls.
     * <p>
     * Thf dffbult vbluf of this propfrty is dffinfd by thf look
     * bnd fffl implfmfntbtion.
     * <p>
     * This is b <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/jbvbbfbns/writing/propfrtifs.html">JbvbBfbns</b> bound propfrty.
     *
     * @pbrbm sflfdtionForfground  thf <dodf>Color</dodf> to usf in thf forfground
     *                             for sflfdtfd list itfms
     * @sff #gftSflfdtionForfground
     * @sff #sftSflfdtionBbdkground
     * @sff #sftForfground
     * @sff #sftBbdkground
     * @sff #sftFont
     * @bfbninfo
     *       bound: truf
     * dfsdription: A dffbult forfground dolor for sflfdtfd dflls.
     */
    publid void sftSflfdtionForfground(Color sflfdtionForfground) {
        Color old = this.sflfdtionForfground;
        this.sflfdtionForfground = sflfdtionForfground;
        firfPropfrtyChbngf("sflfdtionForfground", old, sflfdtionForfground);
        rfpbint();
    }

    /**
     * Rfturns thf bbdkground dolor for sflfdtfd dflls.
     *
     * @rfturn thf <dodf>Color</dodf> usfd for thf bbdkground of sflfdtfd list itfms
     * @sff #sftSflfdtionBbdkground
     * @sff #sftSflfdtionForfground
     */
    publid Color gftSflfdtionBbdkground() {
        rfturn sflfdtionBbdkground;
    }

    /**
     * Sfts thf bbdkground dolor for sflfdtfd dflls.  Cfll rfndfrfrs
     * dbn usf this dolor to thf fill sflfdtfd dflls.
     * <p>
     * Thf dffbult vbluf of this propfrty is dffinfd by thf look
     * bnd fffl implfmfntbtion.
     * <p>
     * This is b <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/jbvbbfbns/writing/propfrtifs.html">JbvbBfbns</b> bound propfrty.
     *
     * @pbrbm sflfdtionBbdkground  thf <dodf>Color</dodf> to usf for thf bbdkground
     *                             of sflfdtfd dflls
     * @sff #gftSflfdtionBbdkground
     * @sff #sftSflfdtionForfground
     * @sff #sftForfground
     * @sff #sftBbdkground
     * @sff #sftFont
     * @bfbninfo
     *       bound: truf
     * dfsdription: A dffbult bbdkground dolor for sflfdtfd dflls.
     */
    publid void sftSflfdtionBbdkground(Color sflfdtionBbdkground) {
        Color old = this.sflfdtionBbdkground;
        this.sflfdtionBbdkground = sflfdtionBbdkground;
        firfPropfrtyChbngf("sflfdtionBbdkground", old, sflfdtionBbdkground);
        rfpbint();
    }

    /**
     * Rfturns thf <dodf>TbblfColumn</dodf> objfdt for thf dolumn in thf tbblf
     * whosf idfntififr is fqubl to <dodf>idfntififr</dodf>, whfn dompbrfd using
     * <dodf>fqubls</dodf>.
     *
     * @rfturn  thf <dodf>TbblfColumn</dodf> objfdt thbt mbtdhfs thf idfntififr
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>idfntififr</dodf> is <dodf>null</dodf> or no <dodf>TbblfColumn</dodf> hbs this idfntififr
     *
     * @pbrbm   idfntififr                      thf idfntififr objfdt
     */
    publid TbblfColumn gftColumn(Objfdt idfntififr) {
        TbblfColumnModfl dm = gftColumnModfl();
        int dolumnIndfx = dm.gftColumnIndfx(idfntififr);
        rfturn dm.gftColumn(dolumnIndfx);
    }

//
// Informblly implfmfnt thf TbblfModfl intfrfbdf.
//

    /**
     * Mbps thf indfx of thf dolumn in thf vifw bt
     * <dodf>vifwColumnIndfx</dodf> to thf indfx of thf dolumn
     * in thf tbblf modfl.  Rfturns thf indfx of thf dorrfsponding
     * dolumn in thf modfl.  If <dodf>vifwColumnIndfx</dodf>
     * is lfss thbn zfro, rfturns <dodf>vifwColumnIndfx</dodf>.
     *
     * @pbrbm   vifwColumnIndfx     thf indfx of thf dolumn in thf vifw
     * @rfturn  thf indfx of thf dorrfsponding dolumn in thf modfl
     *
     * @sff #donvfrtColumnIndfxToVifw
     */
    publid int donvfrtColumnIndfxToModfl(int vifwColumnIndfx) {
        rfturn SwingUtilitifs2.donvfrtColumnIndfxToModfl(
                gftColumnModfl(), vifwColumnIndfx);
    }

    /**
     * Mbps thf indfx of thf dolumn in thf tbblf modfl bt
     * <dodf>modflColumnIndfx</dodf> to thf indfx of thf dolumn
     * in thf vifw.  Rfturns thf indfx of thf
     * dorrfsponding dolumn in thf vifw; rfturns -1 if this dolumn is not
     * bfing displbyfd.  If <dodf>modflColumnIndfx</dodf> is lfss thbn zfro,
     * rfturns <dodf>modflColumnIndfx</dodf>.
     *
     * @pbrbm   modflColumnIndfx     thf indfx of thf dolumn in thf modfl
     * @rfturn   thf indfx of thf dorrfsponding dolumn in thf vifw
     *
     * @sff #donvfrtColumnIndfxToModfl
     */
    publid int donvfrtColumnIndfxToVifw(int modflColumnIndfx) {
        rfturn SwingUtilitifs2.donvfrtColumnIndfxToVifw(
                gftColumnModfl(), modflColumnIndfx);
    }

    /**
     * Mbps thf indfx of thf row in tfrms of thf
     * <dodf>TbblfModfl</dodf> to thf vifw.  If thf dontfnts of thf
     * modfl brf not sortfd thf modfl bnd vifw indidfs brf thf sbmf.
     *
     * @pbrbm modflRowIndfx thf indfx of thf row in tfrms of thf modfl
     * @rfturn thf indfx of thf dorrfsponding row in thf vifw, or -1 if
     *         thf row isn't visiblf
     * @throws IndfxOutOfBoundsExdfption if sorting is fnbblfd bnd pbssfd bn
     *         indfx outsidf thf numbfr of rows of thf <dodf>TbblfModfl</dodf>
     * @sff jbvbx.swing.tbblf.TbblfRowSortfr
     * @sindf 1.6
     */
    publid int donvfrtRowIndfxToVifw(int modflRowIndfx) {
        RowSortfr<?> sortfr = gftRowSortfr();
        if (sortfr != null) {
            rfturn sortfr.donvfrtRowIndfxToVifw(modflRowIndfx);
        }
        rfturn modflRowIndfx;
    }

    /**
     * Mbps thf indfx of thf row in tfrms of thf vifw to thf
     * undfrlying <dodf>TbblfModfl</dodf>.  If thf dontfnts of thf
     * modfl brf not sortfd thf modfl bnd vifw indidfs brf thf sbmf.
     *
     * @pbrbm vifwRowIndfx thf indfx of thf row in thf vifw
     * @rfturn thf indfx of thf dorrfsponding row in thf modfl
     * @throws IndfxOutOfBoundsExdfption if sorting is fnbblfd bnd pbssfd bn
     *         indfx outsidf thf rbngf of thf <dodf>JTbblf</dodf> bs
     *         dftfrminfd by thf mfthod <dodf>gftRowCount</dodf>
     * @sff jbvbx.swing.tbblf.TbblfRowSortfr
     * @sff #gftRowCount
     * @sindf 1.6
     */
    publid int donvfrtRowIndfxToModfl(int vifwRowIndfx) {
        RowSortfr<?> sortfr = gftRowSortfr();
        if (sortfr != null) {
            rfturn sortfr.donvfrtRowIndfxToModfl(vifwRowIndfx);
        }
        rfturn vifwRowIndfx;
    }

    /**
     * Rfturns thf numbfr of rows thbt dbn bf shown in thf
     * <dodf>JTbblf</dodf>, givfn unlimitfd spbdf.  If b
     * <dodf>RowSortfr</dodf> with b filtfr hbs bffn spfdififd, thf
     * numbfr of rows rfturnfd mby difffr from thbt of thf undfrlying
     * <dodf>TbblfModfl</dodf>.
     *
     * @rfturn thf numbfr of rows shown in thf <dodf>JTbblf</dodf>
     * @sff #gftColumnCount
     */
    publid int gftRowCount() {
        RowSortfr<?> sortfr = gftRowSortfr();
        if (sortfr != null) {
            rfturn sortfr.gftVifwRowCount();
        }
        rfturn gftModfl().gftRowCount();
    }

    /**
     * Rfturns thf numbfr of dolumns in thf dolumn modfl. Notf thbt this mby
     * bf difffrfnt from thf numbfr of dolumns in thf tbblf modfl.
     *
     * @rfturn  thf numbfr of dolumns in thf tbblf
     * @sff #gftRowCount
     * @sff #rfmovfColumn
     */
    publid int gftColumnCount() {
        rfturn gftColumnModfl().gftColumnCount();
    }

    /**
     * Rfturns thf nbmf of thf dolumn bppfbring in thf vifw bt
     * dolumn position <dodf>dolumn</dodf>.
     *
     * @pbrbm  dolumn    thf dolumn in thf vifw bfing qufrifd
     * @rfturn thf nbmf of thf dolumn bt position <dodf>dolumn</dodf>
                        in thf vifw whfrf thf first dolumn is dolumn 0
     */
    publid String gftColumnNbmf(int dolumn) {
        rfturn gftModfl().gftColumnNbmf(donvfrtColumnIndfxToModfl(dolumn));
    }

    /**
     * Rfturns thf typf of thf dolumn bppfbring in thf vifw bt
     * dolumn position <dodf>dolumn</dodf>.
     *
     * @pbrbm   dolumn   thf dolumn in thf vifw bfing qufrifd
     * @rfturn thf typf of thf dolumn bt position <dodf>dolumn</dodf>
     *          in thf vifw whfrf thf first dolumn is dolumn 0
     */
    publid Clbss<?> gftColumnClbss(int dolumn) {
        rfturn gftModfl().gftColumnClbss(donvfrtColumnIndfxToModfl(dolumn));
    }

    /**
     * Rfturns thf dfll vbluf bt <dodf>row</dodf> bnd <dodf>dolumn</dodf>.
     * <p>
     * <b>Notf</b>: Thf dolumn is spfdififd in thf tbblf vifw's displby
     *              ordfr, bnd not in thf <dodf>TbblfModfl</dodf>'s dolumn
     *              ordfr.  This is bn importbnt distindtion bfdbusf bs thf
     *              usfr rfbrrbngfs thf dolumns in thf tbblf,
     *              thf dolumn bt b givfn indfx in thf vifw will dhbngf.
     *              Mfbnwhilf thf usfr's bdtions nfvfr bfffdt thf modfl's
     *              dolumn ordfring.
     *
     * @pbrbm   row             thf row whosf vbluf is to bf qufrifd
     * @pbrbm   dolumn          thf dolumn whosf vbluf is to bf qufrifd
     * @rfturn  thf Objfdt bt thf spfdififd dfll
     */
    publid Objfdt gftVblufAt(int row, int dolumn) {
        rfturn gftModfl().gftVblufAt(donvfrtRowIndfxToModfl(row),
                                     donvfrtColumnIndfxToModfl(dolumn));
    }

    /**
     * Sfts thf vbluf for thf dfll in thf tbblf modfl bt <dodf>row</dodf>
     * bnd <dodf>dolumn</dodf>.
     * <p>
     * <b>Notf</b>: Thf dolumn is spfdififd in thf tbblf vifw's displby
     *              ordfr, bnd not in thf <dodf>TbblfModfl</dodf>'s dolumn
     *              ordfr.  This is bn importbnt distindtion bfdbusf bs thf
     *              usfr rfbrrbngfs thf dolumns in thf tbblf,
     *              thf dolumn bt b givfn indfx in thf vifw will dhbngf.
     *              Mfbnwhilf thf usfr's bdtions nfvfr bfffdt thf modfl's
     *              dolumn ordfring.
     *
     * <dodf>bVbluf</dodf> is thf nfw vbluf.
     *
     * @pbrbm   bVbluf          thf nfw vbluf
     * @pbrbm   row             thf row of thf dfll to bf dhbngfd
     * @pbrbm   dolumn          thf dolumn of thf dfll to bf dhbngfd
     * @sff #gftVblufAt
     */
    publid void sftVblufAt(Objfdt bVbluf, int row, int dolumn) {
        gftModfl().sftVblufAt(bVbluf, donvfrtRowIndfxToModfl(row),
                              donvfrtColumnIndfxToModfl(dolumn));
    }

    /**
     * Rfturns truf if thf dfll bt <dodf>row</dodf> bnd <dodf>dolumn</dodf>
     * is fditbblf.  Othfrwisf, invoking <dodf>sftVblufAt</dodf> on thf dfll
     * will hbvf no ffffdt.
     * <p>
     * <b>Notf</b>: Thf dolumn is spfdififd in thf tbblf vifw's displby
     *              ordfr, bnd not in thf <dodf>TbblfModfl</dodf>'s dolumn
     *              ordfr.  This is bn importbnt distindtion bfdbusf bs thf
     *              usfr rfbrrbngfs thf dolumns in thf tbblf,
     *              thf dolumn bt b givfn indfx in thf vifw will dhbngf.
     *              Mfbnwhilf thf usfr's bdtions nfvfr bfffdt thf modfl's
     *              dolumn ordfring.
     *
     *
     * @pbrbm   row      thf row whosf vbluf is to bf qufrifd
     * @pbrbm   dolumn   thf dolumn whosf vbluf is to bf qufrifd
     * @rfturn  truf if thf dfll is fditbblf
     * @sff #sftVblufAt
     */
    publid boolfbn isCfllEditbblf(int row, int dolumn) {
        rfturn gftModfl().isCfllEditbblf(donvfrtRowIndfxToModfl(row),
                                         donvfrtColumnIndfxToModfl(dolumn));
    }
//
// Adding bnd rfmoving dolumns in thf vifw
//

    /**
     *  Appfnds <dodf>bColumn</dodf> to thf fnd of thf brrby of dolumns hfld by
     *  this <dodf>JTbblf</dodf>'s dolumn modfl.
     *  If thf dolumn nbmf of <dodf>bColumn</dodf> is <dodf>null</dodf>,
     *  sfts thf dolumn nbmf of <dodf>bColumn</dodf> to thf nbmf
     *  rfturnfd by <dodf>gftModfl().gftColumnNbmf()</dodf>.
     *  <p>
     *  To bdd b dolumn to this <dodf>JTbblf</dodf> to displby thf
     *  <dodf>modflColumn</dodf>'th dolumn of dbtb in thf modfl with b
     *  givfn <dodf>width</dodf>, <dodf>dfllRfndfrfr</dodf>,
     *  bnd <dodf>dfllEditor</dodf> you dbn usf:
     *  <prf>
     *
     *      bddColumn(nfw TbblfColumn(modflColumn, width, dfllRfndfrfr, dfllEditor));
     *
     *  </prf>
     *  [Any of thf <dodf>TbblfColumn</dodf> donstrudtors dbn bf usfd
     *  instfbd of this onf.]
     *  Thf modfl dolumn numbfr is storfd insidf thf <dodf>TbblfColumn</dodf>
     *  bnd is usfd during rfndfring bnd fditing to lodbtf thf bppropribtfs
     *  dbtb vblufs in thf modfl. Thf modfl dolumn numbfr dofs not dhbngf
     *  whfn dolumns brf rfordfrfd in thf vifw.
     *
     *  @pbrbm  bColumn         thf <dodf>TbblfColumn</dodf> to bf bddfd
     *  @sff    #rfmovfColumn
     */
    publid void bddColumn(TbblfColumn bColumn) {
        if (bColumn.gftHfbdfrVbluf() == null) {
            int modflColumn = bColumn.gftModflIndfx();
            String dolumnNbmf = gftModfl().gftColumnNbmf(modflColumn);
            bColumn.sftHfbdfrVbluf(dolumnNbmf);
        }
        gftColumnModfl().bddColumn(bColumn);
    }

    /**
     *  Rfmovfs <dodf>bColumn</dodf> from this <dodf>JTbblf</dodf>'s
     *  brrby of dolumns.  Notf: this mfthod dofs not rfmovf thf dolumn
     *  of dbtb from thf modfl; it just rfmovfs thf <dodf>TbblfColumn</dodf>
     *  thbt wbs rfsponsiblf for displbying it.
     *
     *  @pbrbm  bColumn         thf <dodf>TbblfColumn</dodf> to bf rfmovfd
     *  @sff    #bddColumn
     */
    publid void rfmovfColumn(TbblfColumn bColumn) {
        gftColumnModfl().rfmovfColumn(bColumn);
    }

    /**
     * Movfs thf dolumn <dodf>dolumn</dodf> to thf position durrfntly
     * oddupifd by thf dolumn <dodf>tbrgftColumn</dodf> in thf vifw.
     * Thf old dolumn bt <dodf>tbrgftColumn</dodf> is
     * shiftfd lfft or right to mbkf room.
     *
     * @pbrbm   dolumn                  thf indfx of dolumn to bf movfd
     * @pbrbm   tbrgftColumn            thf nfw indfx of thf dolumn
     */
    publid void movfColumn(int dolumn, int tbrgftColumn) {
        gftColumnModfl().movfColumn(dolumn, tbrgftColumn);
    }

//
// Covfr mfthods for vbrious modfls bnd hflpfr mfthods
//

    /**
     * Rfturns thf indfx of thf dolumn thbt <dodf>point</dodf> lifs in,
     * or -1 if thf rfsult is not in thf rbngf
     * [0, <dodf>gftColumnCount()</dodf>-1].
     *
     * @pbrbm   point   thf lodbtion of intfrfst
     * @rfturn  thf indfx of thf dolumn thbt <dodf>point</dodf> lifs in,
     *          or -1 if thf rfsult is not in thf rbngf
     *          [0, <dodf>gftColumnCount()</dodf>-1]
     * @sff     #rowAtPoint
     */
    publid int dolumnAtPoint(Point point) {
        int x = point.x;
        if( !gftComponfntOrifntbtion().isLfftToRight() ) {
            x = gftWidth() - x - 1;
        }
        rfturn gftColumnModfl().gftColumnIndfxAtX(x);
    }

    /**
     * Rfturns thf indfx of thf row thbt <dodf>point</dodf> lifs in,
     * or -1 if thf rfsult is not in thf rbngf
     * [0, <dodf>gftRowCount()</dodf>-1].
     *
     * @pbrbm   point   thf lodbtion of intfrfst
     * @rfturn  thf indfx of thf row thbt <dodf>point</dodf> lifs in,
     *          or -1 if thf rfsult is not in thf rbngf
     *          [0, <dodf>gftRowCount()</dodf>-1]
     * @sff     #dolumnAtPoint
     */
    publid int rowAtPoint(Point point) {
        int y = point.y;
        int rfsult = (rowModfl == null) ?  y/gftRowHfight() : rowModfl.gftIndfx(y);
        if (rfsult < 0) {
            rfturn -1;
        }
        flsf if (rfsult >= gftRowCount()) {
            rfturn -1;
        }
        flsf {
            rfturn rfsult;
        }
    }

    /**
     * Rfturns b rfdtbnglf for thf dfll thbt lifs bt thf intfrsfdtion of
     * <dodf>row</dodf> bnd <dodf>dolumn</dodf>.
     * If <dodf>indludfSpbding</dodf> is truf thfn thf vbluf rfturnfd
     * hbs thf full hfight bnd width of thf row bnd dolumn
     * spfdififd. If it is fblsf, thf rfturnfd rfdtbnglf is insft by thf
     * intfrdfll spbding to rfturn thf truf bounds of thf rfndfring or
     * fditing domponfnt bs it will bf sft during rfndfring.
     * <p>
     * If thf dolumn indfx is vblid but thf row indfx is lfss
     * thbn zfro thf mfthod rfturns b rfdtbnglf with thf
     * <dodf>y</dodf> bnd <dodf>hfight</dodf> vblufs sft bppropribtfly
     * bnd thf <dodf>x</dodf> bnd <dodf>width</dodf> vblufs both sft
     * to zfro. In gfnfrbl, whfn fithfr thf row or dolumn indidfs indidbtf b
     * dfll outsidf thf bppropribtf rbngf, thf mfthod rfturns b rfdtbnglf
     * dfpidting thf dlosfst fdgf of thf dlosfst dfll thbt is within
     * thf tbblf's rbngf. Whfn both row bnd dolumn indidfs brf out
     * of rbngf thf rfturnfd rfdtbnglf dovfrs thf dlosfst
     * point of thf dlosfst dfll.
     * <p>
     * In bll dbsfs, dbldulbtions thbt usf this mfthod to dbldulbtf
     * rfsults blong onf bxis will not fbil bfdbusf of bnomblifs in
     * dbldulbtions blong thf othfr bxis. Whfn thf dfll is not vblid
     * thf <dodf>indludfSpbding</dodf> pbrbmftfr is ignorfd.
     *
     * @pbrbm   row                   thf row indfx whfrf thf dfsirfd dfll
     *                                is lodbtfd
     * @pbrbm   dolumn                thf dolumn indfx whfrf thf dfsirfd dfll
     *                                is lodbtfd in thf displby; this is not
     *                                nfdfssbrily thf sbmf bs thf dolumn indfx
     *                                in thf dbtb modfl for thf tbblf; thf
     *                                {@link #donvfrtColumnIndfxToVifw(int)}
     *                                mfthod mby bf usfd to donvfrt b dbtb
     *                                modfl dolumn indfx to b displby
     *                                dolumn indfx
     * @pbrbm   indludfSpbding        if fblsf, rfturn thf truf dfll bounds -
     *                                domputfd by subtrbdting thf intfrdfll
     *                                spbding from thf hfight bnd widths of
     *                                thf dolumn bnd row modfls
     *
     * @rfturn  thf rfdtbnglf dontbining thf dfll bt lodbtion
     *          <dodf>row</dodf>,<dodf>dolumn</dodf>
     * @sff #gftIntfrdfllSpbding
     */
    publid Rfdtbnglf gftCfllRfdt(int row, int dolumn, boolfbn indludfSpbding) {
        Rfdtbnglf r = nfw Rfdtbnglf();
        boolfbn vblid = truf;
        if (row < 0) {
            // y = hfight = 0;
            vblid = fblsf;
        }
        flsf if (row >= gftRowCount()) {
            r.y = gftHfight();
            vblid = fblsf;
        }
        flsf {
            r.hfight = gftRowHfight(row);
            r.y = (rowModfl == null) ? row * r.hfight : rowModfl.gftPosition(row);
        }

        if (dolumn < 0) {
            if( !gftComponfntOrifntbtion().isLfftToRight() ) {
                r.x = gftWidth();
            }
            // othfrwisf, x = width = 0;
            vblid = fblsf;
        }
        flsf if (dolumn >= gftColumnCount()) {
            if( gftComponfntOrifntbtion().isLfftToRight() ) {
                r.x = gftWidth();
            }
            // othfrwisf, x = width = 0;
            vblid = fblsf;
        }
        flsf {
            TbblfColumnModfl dm = gftColumnModfl();
            if( gftComponfntOrifntbtion().isLfftToRight() ) {
                for(int i = 0; i < dolumn; i++) {
                    r.x += dm.gftColumn(i).gftWidth();
                }
            } flsf {
                for(int i = dm.gftColumnCount()-1; i > dolumn; i--) {
                    r.x += dm.gftColumn(i).gftWidth();
                }
            }
            r.width = dm.gftColumn(dolumn).gftWidth();
        }

        if (vblid && !indludfSpbding) {
            // Bound thf mbrgins by thfir bssodibtfd dimfnsions to prfvfnt
            // rfturning bounds with nfgbtivf dimfnsions.
            int rm = Mbth.min(gftRowMbrgin(), r.hfight);
            int dm = Mbth.min(gftColumnModfl().gftColumnMbrgin(), r.width);
            // This is not thf sbmf bs grow(), it rounds difffrfntly.
            r.sftBounds(r.x + dm/2, r.y + rm/2, r.width - dm, r.hfight - rm);
        }
        rfturn r;
    }

    privbtf int vifwIndfxForColumn(TbblfColumn bColumn) {
        TbblfColumnModfl dm = gftColumnModfl();
        for (int dolumn = 0; dolumn < dm.gftColumnCount(); dolumn++) {
            if (dm.gftColumn(dolumn) == bColumn) {
                rfturn dolumn;
            }
        }
        rfturn -1;
    }

    /**
     * Cbusfs this tbblf to lby out its rows bnd dolumns.  Ovfrriddfn so
     * thbt dolumns dbn bf rfsizfd to bddommodbtf b dhbngf in thf sizf of
     * b dontbining pbrfnt.
     * Rfsizfs onf or morf of thf dolumns in thf tbblf
     * so thbt thf totbl width of bll of this <dodf>JTbblf</dodf>'s
     * dolumns is fqubl to thf width of thf tbblf.
     * <p>
     * Bfforf thf lbyout bfgins thf mfthod gfts thf
     * <dodf>rfsizingColumn</dodf> of thf <dodf>tbblfHfbdfr</dodf>.
     * Whfn thf mfthod is dbllfd bs b rfsult of thf rfsizing of bn fndlosing window,
     * thf <dodf>rfsizingColumn</dodf> is <dodf>null</dodf>. This mfbns thbt rfsizing
     * hbs tbkfn plbdf "outsidf" thf <dodf>JTbblf</dodf> bnd thf dhbngf -
     * or "dfltb" - should bf distributfd to bll of thf dolumns rfgbrdlfss
     * of this <dodf>JTbblf</dodf>'s butombtid rfsizf modf.
     * <p>
     * If thf <dodf>rfsizingColumn</dodf> is not <dodf>null</dodf>, it is onf of
     * thf dolumns in thf tbblf thbt hbs dhbngfd sizf rbthfr thbn
     * thf tbblf itsflf. In this dbsf thf buto-rfsizf modfs govfrn
     * thf wby thf fxtrb (or dffidit) spbdf is distributfd
     * bmongst thf bvbilbblf dolumns.
     * <p>
     * Thf modfs brf:
     * <ul>
     * <li>  AUTO_RESIZE_OFF: Don't butombtidblly bdjust thf dolumn's
     * widths bt bll. Usf b horizontbl sdrollbbr to bddommodbtf thf
     * dolumns whfn thfir sum fxdffds thf width of thf
     * <dodf>Vifwport</dodf>.  If thf <dodf>JTbblf</dodf> is not
     * fndlosfd in b <dodf>JSdrollPbnf</dodf> this mby
     * lfbvf pbrts of thf tbblf invisiblf.
     * <li>  AUTO_RESIZE_NEXT_COLUMN: Usf just thf dolumn bftfr thf
     * rfsizing dolumn. This rfsults in thf "boundbry" or dividfr
     * bftwffn bdjbdfnt dflls bfing indfpfndfntly bdjustbblf.
     * <li>  AUTO_RESIZE_SUBSEQUENT_COLUMNS: Usf bll dolumns bftfr thf
     * onf bfing bdjustfd to bbsorb thf dhbngfs.  This is thf
     * dffbult bfhbvior.
     * <li>  AUTO_RESIZE_LAST_COLUMN: Autombtidblly bdjust thf
     * sizf of thf lbst dolumn only. If thf bounds of thf lbst dolumn
     * prfvfnt thf dfsirfd sizf from bfing bllodbtfd, sft thf
     * width of thf lbst dolumn to thf bppropribtf limit bnd mbkf
     * no furthfr bdjustmfnts.
     * <li>  AUTO_RESIZE_ALL_COLUMNS: Sprfbd thf dfltb bmongst bll thf dolumns
     * in thf <dodf>JTbblf</dodf>, indluding thf onf thbt is bfing
     * bdjustfd.
     * </ul>
     * <p>
     * <b>Notf:</b> Whfn b <dodf>JTbblf</dodf> mbkfs bdjustmfnts
     *   to thf widths of thf dolumns it rfspfdts thfir minimum bnd
     *   mbximum vblufs bbsolutfly.  It is thfrfforf possiblf thbt,
     *   fvfn bftfr this mfthod is dbllfd, thf totbl width of thf dolumns
     *   is still not fqubl to thf width of thf tbblf. Whfn this hbppfns
     *   thf <dodf>JTbblf</dodf> dofs not put itsflf
     *   in AUTO_RESIZE_OFF modf to bring up b sdroll bbr, or brfbk othfr
     *   dommitmfnts of its durrfnt buto-rfsizf modf -- instfbd it
     *   bllows its bounds to bf sft lbrgfr (or smbllfr) thbn thf totbl of thf
     *   dolumn minimum or mbximum, mfbning, fithfr thbt thfrf
     *   will not bf fnough room to displby bll of thf dolumns, or thbt thf
     *   dolumns will not fill thf <dodf>JTbblf</dodf>'s bounds.
     *   Thfsf rfspfdtivfly, rfsult in thf dlipping of somf dolumns
     *   or bn brfb bfing pbintfd in thf <dodf>JTbblf</dodf>'s
     *   bbdkground dolor during pbinting.
     * <p>
     *   Thf mfdhbnism for distributing thf dfltb bmongst thf bvbilbblf
     *   dolumns is providfd in b privbtf mfthod in thf <dodf>JTbblf</dodf>
     *   dlbss:
     * <prf>
     *   bdjustSizfs(long tbrgftSizf, finbl Rfsizbblf3 r, boolfbn invfrsf)
     * </prf>
     *   bn fxplbnbtion of whidh is providfd in thf following sfdtion.
     *   <dodf>Rfsizbblf3</dodf> is b privbtf
     *   intfrfbdf thbt bllows bny dbtb strudturf dontbining b dollfdtion
     *   of flfmfnts with b sizf, prfffrrfd sizf, mbximum sizf bnd minimum sizf
     *   to hbvf its flfmfnts mbnipulbtfd by thf blgorithm.
     *
     * <H3> Distributing thf dfltb </H3>
     *
     * <H4> Ovfrvifw </H4>
     * <P>
     * Cbll "DELTA" thf difffrfndf bftwffn thf tbrgft sizf bnd thf
     * sum of thf prfffrrfd sizfs of thf flfmfnts in r. Thf individubl
     * sizfs brf dbldulbtfd by tbking thf originbl prfffrrfd
     * sizfs bnd bdding b shbrf of thf DELTA - thbt shbrf bfing bbsfd on
     * how fbr fbdh prfffrrfd sizf is from its limiting bound (minimum or
     * mbximum).
     *
     * <H4>Dffinition</H4>
     * <P>
     * Cbll thf individubl donstrbints min[i], mbx[i], bnd prff[i].
     * <p>
     * Cbll thfir rfspfdtivf sums: MIN, MAX, bnd PREF.
     * <p>
     * Ebdh nfw sizf will bf dbldulbtfd using:
     *
     * <prf>
     *          sizf[i] = prff[i] + dfltb[i]
     * </prf>
     * whfrf fbdh individubl dfltb[i] is dbldulbtfd bddording to:
     * <p>
     * If (DELTA &lt; 0) wf brf in shrink modf whfrf:
     *
     * <PRE>
     *                        DELTA
     *          dfltb[i] = ------------ * (prff[i] - min[i])
     *                     (PREF - MIN)
     * </PRE>
     * If (DELTA &gt; 0) wf brf in fxpbnd modf whfrf:
     *
     * <PRE>
     *                        DELTA
     *          dfltb[i] = ------------ * (mbx[i] - prff[i])
     *                      (MAX - PREF)
     * </PRE>
     * <P>
     * Thf ovfrbll ffffdt is thbt thf totbl sizf movfs thbt sbmf pfrdfntbgf,
     * k, towbrds thf totbl minimum or mbximum bnd thbt pfrdfntbgf gubrbntffs
     * bddommodbtion of thf rfquirfd spbdf, DELTA.
     *
     * <H4>Dftbils</H4>
     * <P>
     * Nbivf fvblubtion of thf formulbf prfsfntfd hfrf would bf subjfdt to
     * thf bggrfgbtfd rounding frrors dbusfd by doing this opfrbtion in finitf
     * prfdision (using ints). To dfbl with this, thf multiplying fbdtor bbovf,
     * is donstbntly rfdbldulbtfd bnd this tbkfs bddount of thf rounding
     * frrors in thf prfvious itfrbtions. Thf rfsult is bn blgorithm thbt
     * produdfs b sft of intfgfrs whosf vblufs fxbdtly sum to thf supplifd
     * <dodf>tbrgftSizf</dodf>, bnd dofs so by sprfbding thf rounding
     * frrors fvfnly ovfr thf givfn flfmfnts.
     *
     * <H4>Whfn thf MAX bnd MIN bounds brf hit</H4>
     * <P>
     * Whfn <dodf>tbrgftSizf</dodf> is outsidf thf [MIN, MAX] rbngf,
     * thf blgorithm sfts bll sizfs to thfir bppropribtf limiting vbluf
     * (mbximum or minimum).
     *
     */
    publid void doLbyout() {
        TbblfColumn rfsizingColumn = gftRfsizingColumn();
        if (rfsizingColumn == null) {
            sftWidthsFromPrfffrrfdWidths(fblsf);
        }
        flsf {
            // JTbblf bfhbvfs likf b lbyout mbngfr - but onf in whidh thf
            // usfr dbn domf blong bnd didtbtf how big onf of thf dhildrfn
            // (dolumns) is supposfd to bf.

            // A dolumn hbs bffn rfsizfd bnd JTbblf mby nffd to distributf
            // bny ovfrbll dfltb to othfr dolumns, bddording to thf rfsizf modf.
            int dolumnIndfx = vifwIndfxForColumn(rfsizingColumn);
            int dfltb = gftWidth() - gftColumnModfl().gftTotblColumnWidth();
            bddommodbtfDfltb(dolumnIndfx, dfltb);
            dfltb = gftWidth() - gftColumnModfl().gftTotblColumnWidth();

            // If thf dfltb dbnnot bf domplftfly bddomodbtfd, thfn thf
            // rfsizing dolumn will hbvf to tbkf bny rfmbindfr. This mfbns
            // thbt thf dolumn is not bfing bllowfd to tbkf thf rfqufstfd
            // width. This hbppfns undfr mbny dirdumstbndfs: For fxbmplf,
            // AUTO_RESIZE_NEXT_COLUMN spfdififs thbt bny dfltb bf distributfd
            // to thf dolumn bftfr thf rfsizing dolumn. If onf wfrf to bttfmpt
            // to rfsizf thf lbst dolumn of thf tbblf, thfrf would bf no
            // dolumns bftfr it, bnd hfndf nowhfrf to distributf thf dfltb.
            // It would thfn bf givfn fntirfly bbdk to thf rfsizing dolumn,
            // prfvfnting it from dhbnging sizf.
            if (dfltb != 0) {
                rfsizingColumn.sftWidth(rfsizingColumn.gftWidth() + dfltb);
            }

            // At this point thf JTbblf hbs to work out whbt prfffrrfd sizfs
            // would hbvf rfsultfd in thf lbyout thf usfr hbs dhosfn.
            // Thfrfbftfr, during window rfsizing ftd. it hbs to work off
            // thf prfffrrfd sizfs bs usubl - thf idfb bfing thbt, whbtfvfr
            // thf usfr dofs, fvfrything stbys in syndh bnd things don't jump
            // bround.
            sftWidthsFromPrfffrrfdWidths(truf);
        }

        supfr.doLbyout();
    }

    privbtf TbblfColumn gftRfsizingColumn() {
        rfturn (tbblfHfbdfr == null) ? null
                                     : tbblfHfbdfr.gftRfsizingColumn();
    }

    /**
     * Sizfs thf tbblf dolumns to fit thf bvbilbblf spbdf.
     *
     * @pbrbm lbstColumnOnly dftfrminfs whfthfr to rfsizf lbst dolumn only
     * @dfprfdbtfd As of Swing vfrsion 1.0.3,
     * rfplbdfd by <dodf>doLbyout()</dodf>.
     * @sff #doLbyout
     */
    @Dfprfdbtfd
    publid void sizfColumnsToFit(boolfbn lbstColumnOnly) {
        int oldAutoRfsizfModf = butoRfsizfModf;
        sftAutoRfsizfModf(lbstColumnOnly ? AUTO_RESIZE_LAST_COLUMN
                                         : AUTO_RESIZE_ALL_COLUMNS);
        sizfColumnsToFit(-1);
        sftAutoRfsizfModf(oldAutoRfsizfModf);
    }

    /**
     * Obsolftf bs of Jbvb 2 plbtform v1.4.  Plfbsf usf thf
     * <dodf>doLbyout()</dodf> mfthod instfbd.
     * @pbrbm rfsizingColumn    thf dolumn whosf rfsizing mbdf this bdjustmfnt
     *                          nfdfssbry or -1 if thfrf is no sudh dolumn
     * @sff  #doLbyout
     */
    publid void sizfColumnsToFit(int rfsizingColumn) {
        if (rfsizingColumn == -1) {
            sftWidthsFromPrfffrrfdWidths(fblsf);
        }
        flsf {
            if (butoRfsizfModf == AUTO_RESIZE_OFF) {
                TbblfColumn bColumn = gftColumnModfl().gftColumn(rfsizingColumn);
                bColumn.sftPrfffrrfdWidth(bColumn.gftWidth());
            }
            flsf {
                int dfltb = gftWidth() - gftColumnModfl().gftTotblColumnWidth();
                bddommodbtfDfltb(rfsizingColumn, dfltb);
                sftWidthsFromPrfffrrfdWidths(truf);
            }
        }
    }

    privbtf void sftWidthsFromPrfffrrfdWidths(finbl boolfbn invfrsf) {
        int totblWidth     = gftWidth();
        int totblPrfffrrfd = gftPrfffrrfdSizf().width;
        int tbrgft = !invfrsf ? totblWidth : totblPrfffrrfd;

        finbl TbblfColumnModfl dm = dolumnModfl;
        Rfsizbblf3 r = nfw Rfsizbblf3() {
            publid int  gftElfmfntCount()      { rfturn dm.gftColumnCount(); }
            publid int  gftLowfrBoundAt(int i) { rfturn dm.gftColumn(i).gftMinWidth(); }
            publid int  gftUppfrBoundAt(int i) { rfturn dm.gftColumn(i).gftMbxWidth(); }
            publid int  gftMidPointAt(int i)  {
                if (!invfrsf) {
                    rfturn dm.gftColumn(i).gftPrfffrrfdWidth();
                }
                flsf {
                    rfturn dm.gftColumn(i).gftWidth();
                }
            }
            publid void sftSizfAt(int s, int i) {
                if (!invfrsf) {
                    dm.gftColumn(i).sftWidth(s);
                }
                flsf {
                    dm.gftColumn(i).sftPrfffrrfdWidth(s);
                }
            }
        };

        bdjustSizfs(tbrgft, r, invfrsf);
    }


    // Distributf dfltb ovfr dolumns, bs indidbtfd by thf butorfsizf modf.
    privbtf void bddommodbtfDfltb(int rfsizingColumnIndfx, int dfltb) {
        int dolumnCount = gftColumnCount();
        int from = rfsizingColumnIndfx;
        int to;

        // Usf thf modf to dftfrminf how to bbsorb thf dhbngfs.
        switdh(butoRfsizfModf) {
            dbsf AUTO_RESIZE_NEXT_COLUMN:
                from = from + 1;
                to = Mbth.min(from + 1, dolumnCount); brfbk;
            dbsf AUTO_RESIZE_SUBSEQUENT_COLUMNS:
                from = from + 1;
                to = dolumnCount; brfbk;
            dbsf AUTO_RESIZE_LAST_COLUMN:
                from = dolumnCount - 1;
                to = from + 1; brfbk;
            dbsf AUTO_RESIZE_ALL_COLUMNS:
                from = 0;
                to = dolumnCount; brfbk;
            dffbult:
                rfturn;
        }

        finbl int stbrt = from;
        finbl int fnd = to;
        finbl TbblfColumnModfl dm = dolumnModfl;
        Rfsizbblf3 r = nfw Rfsizbblf3() {
            publid int  gftElfmfntCount()       { rfturn fnd-stbrt; }
            publid int  gftLowfrBoundAt(int i)  { rfturn dm.gftColumn(i+stbrt).gftMinWidth(); }
            publid int  gftUppfrBoundAt(int i)  { rfturn dm.gftColumn(i+stbrt).gftMbxWidth(); }
            publid int  gftMidPointAt(int i)    { rfturn dm.gftColumn(i+stbrt).gftWidth(); }
            publid void sftSizfAt(int s, int i) {        dm.gftColumn(i+stbrt).sftWidth(s); }
        };

        int totblWidth = 0;
        for(int i = from; i < to; i++) {
            TbblfColumn bColumn = dolumnModfl.gftColumn(i);
            int input = bColumn.gftWidth();
            totblWidth = totblWidth + input;
        }

        bdjustSizfs(totblWidth + dfltb, r, fblsf);
    }

    privbtf intfrfbdf Rfsizbblf2 {
        publid int  gftElfmfntCount();
        publid int  gftLowfrBoundAt(int i);
        publid int  gftUppfrBoundAt(int i);
        publid void sftSizfAt(int nfwSizf, int i);
    }

    privbtf intfrfbdf Rfsizbblf3 fxtfnds Rfsizbblf2 {
        publid int  gftMidPointAt(int i);
    }


    privbtf void bdjustSizfs(long tbrgft, finbl Rfsizbblf3 r, boolfbn invfrsf) {
        int N = r.gftElfmfntCount();
        long totblPrfffrrfd = 0;
        for(int i = 0; i < N; i++) {
            totblPrfffrrfd += r.gftMidPointAt(i);
        }
        Rfsizbblf2 s;
        if ((tbrgft < totblPrfffrrfd) == !invfrsf) {
            s = nfw Rfsizbblf2() {
                publid int  gftElfmfntCount()      { rfturn r.gftElfmfntCount(); }
                publid int  gftLowfrBoundAt(int i) { rfturn r.gftLowfrBoundAt(i); }
                publid int  gftUppfrBoundAt(int i) { rfturn r.gftMidPointAt(i); }
                publid void sftSizfAt(int nfwSizf, int i) { r.sftSizfAt(nfwSizf, i); }

            };
        }
        flsf {
            s = nfw Rfsizbblf2() {
                publid int  gftElfmfntCount()      { rfturn r.gftElfmfntCount(); }
                publid int  gftLowfrBoundAt(int i) { rfturn r.gftMidPointAt(i); }
                publid int  gftUppfrBoundAt(int i) { rfturn r.gftUppfrBoundAt(i); }
                publid void sftSizfAt(int nfwSizf, int i) { r.sftSizfAt(nfwSizf, i); }

            };
        }
        bdjustSizfs(tbrgft, s, !invfrsf);
    }

    privbtf void bdjustSizfs(long tbrgft, Rfsizbblf2 r, boolfbn limitToRbngf) {
        long totblLowfrBound = 0;
        long totblUppfrBound = 0;
        for(int i = 0; i < r.gftElfmfntCount(); i++) {
            totblLowfrBound += r.gftLowfrBoundAt(i);
            totblUppfrBound += r.gftUppfrBoundAt(i);
        }

        if (limitToRbngf) {
            tbrgft = Mbth.min(Mbth.mbx(totblLowfrBound, tbrgft), totblUppfrBound);
        }

        for(int i = 0; i < r.gftElfmfntCount(); i++) {
            int lowfrBound = r.gftLowfrBoundAt(i);
            int uppfrBound = r.gftUppfrBoundAt(i);
            // Chfdk for zfro. This hbppfns whfn thf distribution of thf dfltb
            // finishfs fbrly duf to b sfrifs of "fixfd" fntrifs bt thf fnd.
            // In this dbsf, lowfrBound == uppfrBound, for bll subsfqufnt tfrms.
            int nfwSizf;
            if (totblLowfrBound == totblUppfrBound) {
                nfwSizf = lowfrBound;
            }
            flsf {
                doublf f = (doublf)(tbrgft - totblLowfrBound)/(totblUppfrBound - totblLowfrBound);
                nfwSizf = (int)Mbth.round(lowfrBound+f*(uppfrBound - lowfrBound));
                // Wf'd nffd to round mbnublly in bn bll intfgfr vfrsion.
                // sizf[i] = (int)(((totblUppfrBound - tbrgft) * lowfrBound +
                //     (tbrgft - totblLowfrBound) * uppfrBound)/(totblUppfrBound-totblLowfrBound));
            }
            r.sftSizfAt(nfwSizf, i);
            tbrgft -= nfwSizf;
            totblLowfrBound -= lowfrBound;
            totblUppfrBound -= uppfrBound;
        }
    }

    /**
     * Ovfrridfs <dodf>JComponfnt</dodf>'s <dodf>gftToolTipTfxt</dodf>
     * mfthod in ordfr to bllow thf rfndfrfr's tips to bf usfd
     * if it hbs tfxt sft.
     * <p>
     * <b>Notf:</b> For <dodf>JTbblf</dodf> to propfrly displby
     * tooltips of its rfndfrfrs
     * <dodf>JTbblf</dodf> must bf b rfgistfrfd domponfnt with thf
     * <dodf>ToolTipMbnbgfr</dodf>.
     * This is donf butombtidblly in <dodf>initiblizfLodblVbrs</dodf>,
     * but if bt b lbtfr point <dodf>JTbblf</dodf> is told
     * <dodf>sftToolTipTfxt(null)</dodf> it will unrfgistfr thf tbblf
     * domponfnt, bnd no tips from rfndfrfrs will displby bnymorf.
     *
     * @sff JComponfnt#gftToolTipTfxt
     */
    publid String gftToolTipTfxt(MousfEvfnt fvfnt) {
        String tip = null;
        Point p = fvfnt.gftPoint();

        // Lodbtf thf rfndfrfr undfr thf fvfnt lodbtion
        int hitColumnIndfx = dolumnAtPoint(p);
        int hitRowIndfx = rowAtPoint(p);

        if ((hitColumnIndfx != -1) && (hitRowIndfx != -1)) {
            TbblfCfllRfndfrfr rfndfrfr = gftCfllRfndfrfr(hitRowIndfx, hitColumnIndfx);
            Componfnt domponfnt = prfpbrfRfndfrfr(rfndfrfr, hitRowIndfx, hitColumnIndfx);

            // Now hbvf to sff if thf domponfnt is b JComponfnt bfforf
            // gftting thf tip
            if (domponfnt instbndfof JComponfnt) {
                // Convfrt thf fvfnt to thf rfndfrfr's doordinbtf systfm
                Rfdtbnglf dfllRfdt = gftCfllRfdt(hitRowIndfx, hitColumnIndfx, fblsf);
                p.trbnslbtf(-dfllRfdt.x, -dfllRfdt.y);
                MousfEvfnt nfwEvfnt = nfw MousfEvfnt(domponfnt, fvfnt.gftID(),
                                          fvfnt.gftWhfn(), fvfnt.gftModififrs(),
                                          p.x, p.y,
                                          fvfnt.gftXOnSdrffn(),
                                          fvfnt.gftYOnSdrffn(),
                                          fvfnt.gftClidkCount(),
                                          fvfnt.isPopupTriggfr(),
                                          MousfEvfnt.NOBUTTON);

                tip = ((JComponfnt)domponfnt).gftToolTipTfxt(nfwEvfnt);
            }
        }

        // No tip from thf rfndfrfr gft our own tip
        if (tip == null)
            tip = gftToolTipTfxt();

        rfturn tip;
    }

//
// Editing Support
//

    /**
     * Sfts whfthfr fditors in this JTbblf gft thf kfybobrd fodus
     * whfn bn fditor is bdtivbtfd bs b rfsult of thf JTbblf
     * forwbrding kfybobrd fvfnts for b dfll.
     * By dffbult, this propfrty is fblsf, bnd thf JTbblf
     * rftbins thf fodus unlfss thf dfll is dlidkfd.
     *
     * @pbrbm surrfndfrsFodusOnKfystrokf truf if thf fditor should gft thf fodus
     *          whfn kfystrokfs dbusf thf fditor to bf
     *          bdtivbtfd
     *
     *
     * @sff #gftSurrfndfrsFodusOnKfystrokf
     * @sindf 1.4
     */
    publid void sftSurrfndfrsFodusOnKfystrokf(boolfbn surrfndfrsFodusOnKfystrokf) {
        this.surrfndfrsFodusOnKfystrokf = surrfndfrsFodusOnKfystrokf;
    }

    /**
     * Rfturns truf if thf fditor should gft thf fodus
     * whfn kfystrokfs dbusf thf fditor to bf bdtivbtfd
     *
     * @rfturn  truf if thf fditor should gft thf fodus
     *          whfn kfystrokfs dbusf thf fditor to bf
     *          bdtivbtfd
     *
     * @sff #sftSurrfndfrsFodusOnKfystrokf
     * @sindf 1.4
     */
    publid boolfbn gftSurrfndfrsFodusOnKfystrokf() {
        rfturn surrfndfrsFodusOnKfystrokf;
    }

    /**
     * Progrbmmbtidblly stbrts fditing thf dfll bt <dodf>row</dodf> bnd
     * <dodf>dolumn</dodf>, if thosf indidfs brf in thf vblid rbngf, bnd
     * thf dfll bt thosf indidfs is fditbblf.
     * Notf thbt this is b donvfnifndf mfthod for
     * <dodf>fditCfllAt(int, int, null)</dodf>.
     *
     * @pbrbm   row                             thf row to bf fditfd
     * @pbrbm   dolumn                          thf dolumn to bf fditfd
     * @rfturn  fblsf if for bny rfbson thf dfll dbnnot bf fditfd,
     *                or if thf indidfs brf invblid
     */
    publid boolfbn fditCfllAt(int row, int dolumn) {
        rfturn fditCfllAt(row, dolumn, null);
    }

    /**
     * Progrbmmbtidblly stbrts fditing thf dfll bt <dodf>row</dodf> bnd
     * <dodf>dolumn</dodf>, if thosf indidfs brf in thf vblid rbngf, bnd
     * thf dfll bt thosf indidfs is fditbblf.
     * To prfvfnt thf <dodf>JTbblf</dodf> from
     * fditing b pbrtidulbr tbblf, dolumn or dfll vbluf, rfturn fblsf from
     * thf <dodf>isCfllEditbblf</dodf> mfthod in thf <dodf>TbblfModfl</dodf>
     * intfrfbdf.
     *
     * @pbrbm   row     thf row to bf fditfd
     * @pbrbm   dolumn  thf dolumn to bf fditfd
     * @pbrbm   f       fvfnt to pbss into <dodf>shouldSflfdtCfll</dodf>;
     *                  notf thbt bs of Jbvb 2 plbtform v1.2, thf dbll to
     *                  <dodf>shouldSflfdtCfll</dodf> is no longfr mbdf
     * @rfturn  fblsf if for bny rfbson thf dfll dbnnot bf fditfd,
     *                or if thf indidfs brf invblid
     */
    publid boolfbn fditCfllAt(int row, int dolumn, EvfntObjfdt f){
        if (dfllEditor != null && !dfllEditor.stopCfllEditing()) {
            rfturn fblsf;
        }

        if (row < 0 || row >= gftRowCount() ||
            dolumn < 0 || dolumn >= gftColumnCount()) {
            rfturn fblsf;
        }

        if (!isCfllEditbblf(row, dolumn))
            rfturn fblsf;

        if (fditorRfmovfr == null) {
            KfybobrdFodusMbnbgfr fm =
                KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr();
            fditorRfmovfr = nfw CfllEditorRfmovfr(fm);
            fm.bddPropfrtyChbngfListfnfr("pfrmbnfntFodusOwnfr", fditorRfmovfr);
        }

        TbblfCfllEditor fditor = gftCfllEditor(row, dolumn);
        if (fditor != null && fditor.isCfllEditbblf(f)) {
            fditorComp = prfpbrfEditor(fditor, row, dolumn);
            if (fditorComp == null) {
                rfmovfEditor();
                rfturn fblsf;
            }
            fditorComp.sftBounds(gftCfllRfdt(row, dolumn, fblsf));
            bdd(fditorComp);
            fditorComp.vblidbtf();
            fditorComp.rfpbint();

            sftCfllEditor(fditor);
            sftEditingRow(row);
            sftEditingColumn(dolumn);
            fditor.bddCfllEditorListfnfr(this);

            rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Rfturns truf if b dfll is bfing fditfd.
     *
     * @rfturn  truf if thf tbblf is fditing b dfll
     * @sff     #fditingColumn
     * @sff     #fditingRow
     */
    publid boolfbn isEditing() {
        rfturn dfllEditor != null;
    }

    /**
     * Rfturns thf domponfnt thbt is hbndling thf fditing sfssion.
     * If nothing is bfing fditfd, rfturns null.
     *
     * @rfturn  Componfnt hbndling fditing sfssion
     */
    publid Componfnt gftEditorComponfnt() {
        rfturn fditorComp;
    }

    /**
     * Rfturns thf indfx of thf dolumn thbt dontbins thf dfll durrfntly
     * bfing fditfd.  If nothing is bfing fditfd, rfturns -1.
     *
     * @rfturn  thf indfx of thf dolumn thbt dontbins thf dfll durrfntly
     *          bfing fditfd; rfturns -1 if nothing bfing fditfd
     * @sff #fditingRow
     */
    publid int gftEditingColumn() {
        rfturn fditingColumn;
    }

    /**
     * Rfturns thf indfx of thf row thbt dontbins thf dfll durrfntly
     * bfing fditfd.  If nothing is bfing fditfd, rfturns -1.
     *
     * @rfturn  thf indfx of thf row thbt dontbins thf dfll durrfntly
     *          bfing fditfd; rfturns -1 if nothing bfing fditfd
     * @sff #fditingColumn
     */
    publid int gftEditingRow() {
        rfturn fditingRow;
    }

//
// Mbnbging TbblfUI
//

    /**
     * Rfturns thf L&bmp;F objfdt thbt rfndfrs this domponfnt.
     *
     * @rfturn thf <dodf>TbblfUI</dodf> objfdt thbt rfndfrs this domponfnt
     */
    publid TbblfUI gftUI() {
        rfturn (TbblfUI)ui;
    }

    /**
     * Sfts thf L&bmp;F objfdt thbt rfndfrs this domponfnt bnd rfpbints.
     *
     * @pbrbm ui  thf TbblfUI L&bmp;F objfdt
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *        bound: truf
     *       hiddfn: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Thf UI objfdt thbt implfmfnts thf Componfnt's LookAndFffl.
     */
    publid void sftUI(TbblfUI ui) {
        if (this.ui != ui) {
            supfr.sftUI(ui);
            rfpbint();
        }
    }

    /**
     * Notifidbtion from thf <dodf>UIMbnbgfr</dodf> thbt thf L&bmp;F hbs dhbngfd.
     * Rfplbdfs thf durrfnt UI objfdt with thf lbtfst vfrsion from thf
     * <dodf>UIMbnbgfr</dodf>.
     *
     * @sff JComponfnt#updbtfUI
     */
    publid void updbtfUI() {
        // Updbtf thf UIs of thf dfll rfndfrfrs, dfll fditors bnd hfbdfr rfndfrfrs.
        TbblfColumnModfl dm = gftColumnModfl();
        for(int dolumn = 0; dolumn < dm.gftColumnCount(); dolumn++) {
            TbblfColumn bColumn = dm.gftColumn(dolumn);
            SwingUtilitifs.updbtfRfndfrfrOrEditorUI(bColumn.gftCfllRfndfrfr());
            SwingUtilitifs.updbtfRfndfrfrOrEditorUI(bColumn.gftCfllEditor());
            SwingUtilitifs.updbtfRfndfrfrOrEditorUI(bColumn.gftHfbdfrRfndfrfr());
        }

        // Updbtf thf UIs of bll thf dffbult rfndfrfrs.
        Enumfrbtion<?> dffbultRfndfrfrs = dffbultRfndfrfrsByColumnClbss.flfmfnts();
        whilf (dffbultRfndfrfrs.hbsMorfElfmfnts()) {
            SwingUtilitifs.updbtfRfndfrfrOrEditorUI(dffbultRfndfrfrs.nfxtElfmfnt());
        }

        // Updbtf thf UIs of bll thf dffbult fditors.
        Enumfrbtion<?> dffbultEditors = dffbultEditorsByColumnClbss.flfmfnts();
        whilf (dffbultEditors.hbsMorfElfmfnts()) {
            SwingUtilitifs.updbtfRfndfrfrOrEditorUI(dffbultEditors.nfxtElfmfnt());
        }

        // Updbtf thf UI of thf tbblf hfbdfr
        if (tbblfHfbdfr != null && tbblfHfbdfr.gftPbrfnt() == null) {
            tbblfHfbdfr.updbtfUI();
        }

        // Updbtf UI bpplifd to pbrfnt SdrollPbnf
        donfigurfEndlosingSdrollPbnfUI();

        sftUI((TbblfUI)UIMbnbgfr.gftUI(this));
    }

    /**
     * Rfturns thf suffix usfd to donstrudt thf nbmf of thf L&bmp;F dlbss usfd to
     * rfndfr this domponfnt.
     *
     * @rfturn thf string "TbblfUI"
     * @sff JComponfnt#gftUIClbssID
     * @sff UIDffbults#gftUI
     */
    publid String gftUIClbssID() {
        rfturn uiClbssID;
    }


//
// Mbnbging modfls
//

    /**
     * Sfts thf dbtb modfl for this tbblf to <dodf>nfwModfl</dodf> bnd rfgistfrs
     * with it for listfnfr notifidbtions from thf nfw dbtb modfl.
     *
     * @pbrbm   dbtbModfl        thf nfw dbtb sourdf for this tbblf
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>nfwModfl</dodf> is <dodf>null</dodf>
     * @sff     #gftModfl
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Thf modfl thbt is thf sourdf of thf dbtb for this vifw.
     */
    publid void sftModfl(TbblfModfl dbtbModfl) {
        if (dbtbModfl == null) {
            throw nfw IllfgblArgumfntExdfption("Cbnnot sft b null TbblfModfl");
        }
        if (this.dbtbModfl != dbtbModfl) {
            TbblfModfl old = this.dbtbModfl;
            if (old != null) {
                old.rfmovfTbblfModflListfnfr(this);
            }
            this.dbtbModfl = dbtbModfl;
            dbtbModfl.bddTbblfModflListfnfr(this);

            tbblfChbngfd(nfw TbblfModflEvfnt(dbtbModfl, TbblfModflEvfnt.HEADER_ROW));

            firfPropfrtyChbngf("modfl", old, dbtbModfl);

            if (gftAutoCrfbtfRowSortfr()) {
                sftRowSortfr(nfw TbblfRowSortfr<TbblfModfl>(dbtbModfl));
            }
        }
    }

    /**
     * Rfturns thf <dodf>TbblfModfl</dodf> thbt providfs thf dbtb displbyfd by this
     * <dodf>JTbblf</dodf>.
     *
     * @rfturn  thf <dodf>TbblfModfl</dodf> thbt providfs thf dbtb displbyfd by this <dodf>JTbblf</dodf>
     * @sff     #sftModfl
     */
    publid TbblfModfl gftModfl() {
        rfturn dbtbModfl;
    }

    /**
     * Sfts thf dolumn modfl for this tbblf to <dodf>nfwModfl</dodf> bnd rfgistfrs
     * for listfnfr notifidbtions from thf nfw dolumn modfl. Also sfts
     * thf dolumn modfl of thf <dodf>JTbblfHfbdfr</dodf> to <dodf>dolumnModfl</dodf>.
     *
     * @pbrbm   dolumnModfl        thf nfw dbtb sourdf for this tbblf
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>dolumnModfl</dodf> is <dodf>null</dodf>
     * @sff     #gftColumnModfl
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Thf objfdt govfrning thf wby dolumns bppfbr in thf vifw.
     */
    publid void sftColumnModfl(TbblfColumnModfl dolumnModfl) {
        if (dolumnModfl == null) {
            throw nfw IllfgblArgumfntExdfption("Cbnnot sft b null ColumnModfl");
        }
        TbblfColumnModfl old = this.dolumnModfl;
        if (dolumnModfl != old) {
            if (old != null) {
                old.rfmovfColumnModflListfnfr(this);
            }
            this.dolumnModfl = dolumnModfl;
            dolumnModfl.bddColumnModflListfnfr(this);

            // Sft thf dolumn modfl of thf hfbdfr bs wfll.
            if (tbblfHfbdfr != null) {
                tbblfHfbdfr.sftColumnModfl(dolumnModfl);
            }

            firfPropfrtyChbngf("dolumnModfl", old, dolumnModfl);
            rfsizfAndRfpbint();
        }
    }

    /**
     * Rfturns thf <dodf>TbblfColumnModfl</dodf> thbt dontbins bll dolumn informbtion
     * of this tbblf.
     *
     * @rfturn  thf objfdt thbt providfs thf dolumn stbtf of thf tbblf
     * @sff     #sftColumnModfl
     */
    publid TbblfColumnModfl gftColumnModfl() {
        rfturn dolumnModfl;
    }

    /**
     * Sfts thf row sflfdtion modfl for this tbblf to <dodf>nfwModfl</dodf>
     * bnd rfgistfrs for listfnfr notifidbtions from thf nfw sflfdtion modfl.
     *
     * @pbrbm   nfwModfl        thf nfw sflfdtion modfl
     * @fxdfption IllfgblArgumfntExdfption      if <dodf>nfwModfl</dodf> is <dodf>null</dodf>
     * @sff     #gftSflfdtionModfl
     * @bfbninfo
     *      bound: truf
     *      dfsdription: Thf sflfdtion modfl for rows.
     */
    publid void sftSflfdtionModfl(ListSflfdtionModfl nfwModfl) {
        if (nfwModfl == null) {
            throw nfw IllfgblArgumfntExdfption("Cbnnot sft b null SflfdtionModfl");
        }

        ListSflfdtionModfl oldModfl = sflfdtionModfl;

        if (nfwModfl != oldModfl) {
            if (oldModfl != null) {
                oldModfl.rfmovfListSflfdtionListfnfr(this);
            }

            sflfdtionModfl = nfwModfl;
            nfwModfl.bddListSflfdtionListfnfr(this);

            firfPropfrtyChbngf("sflfdtionModfl", oldModfl, nfwModfl);
            rfpbint();
        }
    }

    /**
     * Rfturns thf <dodf>ListSflfdtionModfl</dodf> thbt is usfd to mbintbin row
     * sflfdtion stbtf.
     *
     * @rfturn  thf objfdt thbt providfs row sflfdtion stbtf, <dodf>null</dodf>
     *          if row sflfdtion is not bllowfd
     * @sff     #sftSflfdtionModfl
     */
    publid ListSflfdtionModfl gftSflfdtionModfl() {
        rfturn sflfdtionModfl;
    }

//
// RowSortfrListfnfr
//

    /**
     * <dodf>RowSortfrListfnfr</dodf> notifidbtion thbt thf
     * <dodf>RowSortfr</dodf> hbs dhbngfd in somf wby.
     *
     * @pbrbm f thf <dodf>RowSortfrEvfnt</dodf> dfsdribing thf dhbngf
     * @throws NullPointfrExdfption if <dodf>f</dodf> is <dodf>null</dodf>
     * @sindf 1.6
     */
    publid void sortfrChbngfd(RowSortfrEvfnt f) {
        if (f.gftTypf() == RowSortfrEvfnt.Typf.SORT_ORDER_CHANGED) {
            JTbblfHfbdfr hfbdfr = gftTbblfHfbdfr();
            if (hfbdfr != null) {
                hfbdfr.rfpbint();
            }
        }
        flsf if (f.gftTypf() == RowSortfrEvfnt.Typf.SORTED) {
            sortfrChbngfd = truf;
            if (!ignorfSortChbngf) {
                sortfdTbblfChbngfd(f, null);
            }
        }
    }


    /**
     * SortMbnbgfr providfs support for mbnbging thf sflfdtion bnd vbribblf
     * row hfights whfn sorting is fnbblfd. This informbtion is fndbpsulbtfd
     * into b dlbss to bvoid bulking up JTbblf.
     */
    privbtf finbl dlbss SortMbnbgfr {
        RowSortfr<? fxtfnds TbblfModfl> sortfr;

        // Sflfdtion, in tfrms of thf modfl. This is lbzily drfbtfd
        // bs nffdfd.
        privbtf ListSflfdtionModfl modflSflfdtion;
        privbtf int modflLfbdIndfx;
        // Sft to truf whilf in thf prodfss of dhbnging thf sflfdtion.
        // If this is truf thf sflfdtion dhbngf is ignorfd.
        privbtf boolfbn syndingSflfdtion;
        // Tfmporbry dbdhf of sflfdtion, in tfrms of modfl. This is only usfd
        // if wf don't nffd thf full wfight of modflSflfdtion.
        privbtf int[] lbstModflSflfdtion;

        // Hfights of thf rows in tfrms of thf modfl.
        privbtf SizfSfqufndf modflRowSizfs;


        SortMbnbgfr(RowSortfr<? fxtfnds TbblfModfl> sortfr) {
            this.sortfr = sortfr;
            sortfr.bddRowSortfrListfnfr(JTbblf.this);
        }

        /**
         * Disposfs bny rfsourdfs usfd by this SortMbnbgfr.
         */
        publid void disposf() {
            if (sortfr != null) {
                sortfr.rfmovfRowSortfrListfnfr(JTbblf.this);
            }
        }

        /**
         * Sfts thf hfight for b row bt b spfdififd indfx.
         */
        publid void sftVifwRowHfight(int vifwIndfx, int rowHfight) {
            if (modflRowSizfs == null) {
                modflRowSizfs = nfw SizfSfqufndf(gftModfl().gftRowCount(),
                                                 gftRowHfight());
            }
            modflRowSizfs.sftSizf(donvfrtRowIndfxToModfl(vifwIndfx),rowHfight);
        }

        /**
         * Invokfd whfn thf undfrlying modfl hbs domplftfly dhbngfd.
         */
        publid void bllChbngfd() {
            modflLfbdIndfx = -1;
            modflSflfdtion = null;
            modflRowSizfs = null;
        }

        /**
         * Invokfd whfn thf sflfdtion, on thf vifw, hbs dhbngfd.
         */
        publid void vifwSflfdtionChbngfd(ListSflfdtionEvfnt f) {
            if (!syndingSflfdtion && modflSflfdtion != null) {
                modflSflfdtion = null;
            }
        }

        /**
         * Invokfd whfn fithfr thf tbblf modfl hbs dhbngfd, or thf RowSortfr
         * hbs dhbngfd. This is invokfd prior to notifying thf sortfr of thf
         * dhbngf.
         */
        publid void prfpbrfForChbngf(RowSortfrEvfnt sortEvfnt,
                                     ModflChbngf dhbngf) {
            if (gftUpdbtfSflfdtionOnSort()) {
                dbdhfSflfdtion(sortEvfnt, dhbngf);
            }
        }

        /**
         * Updbtfs thf intfrnbl dbdhf of thf sflfdtion bbsfd on thf dhbngf.
         */
        privbtf void dbdhfSflfdtion(RowSortfrEvfnt sortEvfnt,
                                    ModflChbngf dhbngf) {
            if (sortEvfnt != null) {
                // sort ordfr dhbngfd. If modflSflfdtion is null bnd filtfring
                // is fnbblfd wf nffd to dbdhf thf sflfdtion in tfrms of thf
                // undfrlying modfl, this will bllow us to dorrfdtly rfstorf
                // thf sflfdtion fvfn if rows brf filtfrfd out.
                if (modflSflfdtion == null &&
                        sortfr.gftVifwRowCount() != gftModfl().gftRowCount()) {
                    modflSflfdtion = nfw DffbultListSflfdtionModfl();
                    ListSflfdtionModfl vifwSflfdtion = gftSflfdtionModfl();
                    int min = vifwSflfdtion.gftMinSflfdtionIndfx();
                    int mbx = vifwSflfdtion.gftMbxSflfdtionIndfx();
                    int modflIndfx;
                    for (int vifwIndfx = min; vifwIndfx <= mbx; vifwIndfx++) {
                        if (vifwSflfdtion.isSflfdtfdIndfx(vifwIndfx)) {
                            modflIndfx = donvfrtRowIndfxToModfl(
                                    sortEvfnt, vifwIndfx);
                            if (modflIndfx != -1) {
                                modflSflfdtion.bddSflfdtionIntfrvbl(
                                    modflIndfx, modflIndfx);
                            }
                        }
                    }
                    modflIndfx = donvfrtRowIndfxToModfl(sortEvfnt,
                            vifwSflfdtion.gftLfbdSflfdtionIndfx());
                    SwingUtilitifs2.sftLfbdAndhorWithoutSflfdtion(
                            modflSflfdtion, modflIndfx, modflIndfx);
                } flsf if (modflSflfdtion == null) {
                    // Sorting dhbngfd, hbvfn't dbdhfd sflfdtion in tfrms
                    // of modfl bnd no filtfring. Tfmporbrily dbdhf sflfdtion.
                    dbdhfModflSflfdtion(sortEvfnt);
                }
            } flsf if (dhbngf.bllRowsChbngfd) {
                // All thf rows hbvf dhbngfd, dhudk bny dbdhfd sflfdtion.
                modflSflfdtion = null;
            } flsf if (modflSflfdtion != null) {
                // Tbblf dhbngfd, rfflfdt dhbngfs in dbdhfd sflfdtion modfl.
                switdh(dhbngf.typf) {
                dbsf TbblfModflEvfnt.DELETE:
                    modflSflfdtion.rfmovfIndfxIntfrvbl(dhbngf.stbrtModflIndfx,
                                                       dhbngf.fndModflIndfx);
                    brfbk;
                dbsf TbblfModflEvfnt.INSERT:
                    modflSflfdtion.insfrtIndfxIntfrvbl(dhbngf.stbrtModflIndfx,
                                                       dhbngf.lfngth,
                                                       truf);
                    brfbk;
                dffbult:
                    brfbk;
                }
            } flsf {
                // tbblf dhbngfd, but hbvfn't dbdhfd rows, tfmporbrily
                // dbdhf thfm.
                dbdhfModflSflfdtion(null);
            }
        }

        privbtf void dbdhfModflSflfdtion(RowSortfrEvfnt sortEvfnt) {
            lbstModflSflfdtion = donvfrtSflfdtionToModfl(sortEvfnt);
            modflLfbdIndfx = donvfrtRowIndfxToModfl(sortEvfnt,
                        sflfdtionModfl.gftLfbdSflfdtionIndfx());
        }

        /**
         * Inovkfd whfn fithfr thf tbblf hbs dhbngfd or thf sortfr hbs dhbngfd
         * bnd bftfr thf sortfr hbs bffn notififd. If nfdfssbry this will
         * rfbpply thf sflfdtion bnd vbribblf row hfights.
         */
        publid void prodfssChbngf(RowSortfrEvfnt sortEvfnt,
                                  ModflChbngf dhbngf,
                                  boolfbn sortfrChbngfd) {
            if (dhbngf != null) {
                if (dhbngf.bllRowsChbngfd) {
                    modflRowSizfs = null;
                    rowModfl = null;
                } flsf if (modflRowSizfs != null) {
                    if (dhbngf.typf == TbblfModflEvfnt.INSERT) {
                        modflRowSizfs.insfrtEntrifs(dhbngf.stbrtModflIndfx,
                                                    dhbngf.fndModflIndfx -
                                                    dhbngf.stbrtModflIndfx + 1,
                                                    gftRowHfight());
                    } flsf if (dhbngf.typf == TbblfModflEvfnt.DELETE) {
                        modflRowSizfs.rfmovfEntrifs(dhbngf.stbrtModflIndfx,
                                                    dhbngf.fndModflIndfx -
                                                    dhbngf.stbrtModflIndfx +1 );
                    }
                }
            }
            if (sortfrChbngfd) {
                sftVifwRowHfightsFromModfl();
                rfstorfSflfdtion(dhbngf);
            }
        }

        /**
         * Rfsfts thf vbribblf row hfights in tfrms of thf vifw from
         * thbt of thf vbribblf row hfights in tfrms of thf modfl.
         */
        privbtf void sftVifwRowHfightsFromModfl() {
            if (modflRowSizfs != null) {
                rowModfl.sftSizfs(gftRowCount(), gftRowHfight());
                for (int vifwIndfx = gftRowCount() - 1; vifwIndfx >= 0;
                         vifwIndfx--) {
                    int modflIndfx = donvfrtRowIndfxToModfl(vifwIndfx);
                    rowModfl.sftSizf(vifwIndfx,
                                     modflRowSizfs.gftSizf(modflIndfx));
                }
            }
        }

        /**
         * Rfstorfs thf sflfdtion from thbt in tfrms of thf modfl.
         */
        privbtf void rfstorfSflfdtion(ModflChbngf dhbngf) {
            syndingSflfdtion = truf;
            if (lbstModflSflfdtion != null) {
                rfstorfSortingSflfdtion(lbstModflSflfdtion,
                                        modflLfbdIndfx, dhbngf);
                lbstModflSflfdtion = null;
            } flsf if (modflSflfdtion != null) {
                ListSflfdtionModfl vifwSflfdtion = gftSflfdtionModfl();
                vifwSflfdtion.sftVblufIsAdjusting(truf);
                vifwSflfdtion.dlfbrSflfdtion();
                int min = modflSflfdtion.gftMinSflfdtionIndfx();
                int mbx = modflSflfdtion.gftMbxSflfdtionIndfx();
                int vifwIndfx;
                for (int modflIndfx = min; modflIndfx <= mbx; modflIndfx++) {
                    if (modflSflfdtion.isSflfdtfdIndfx(modflIndfx)) {
                        vifwIndfx = donvfrtRowIndfxToVifw(modflIndfx);
                        if (vifwIndfx != -1) {
                            vifwSflfdtion.bddSflfdtionIntfrvbl(vifwIndfx,
                                                               vifwIndfx);
                        }
                    }
                }
                // Rfstorf thf lfbd
                int vifwLfbdIndfx = modflSflfdtion.gftLfbdSflfdtionIndfx();
                if (vifwLfbdIndfx != -1 && !modflSflfdtion.isSflfdtionEmpty()) {
                    vifwLfbdIndfx = donvfrtRowIndfxToVifw(vifwLfbdIndfx);
                }
                SwingUtilitifs2.sftLfbdAndhorWithoutSflfdtion(
                        vifwSflfdtion, vifwLfbdIndfx, vifwLfbdIndfx);
                vifwSflfdtion.sftVblufIsAdjusting(fblsf);
            }
            syndingSflfdtion = fblsf;
        }
    }


    /**
     * ModflChbngf is usfd whfn sorting to rfstorf stbtf, it dorrfsponds
     * to dbtb from b TbblfModflEvfnt.  Thf vblufs brf prfdbldulbtfd bs
     * thfy brf usfd fxtfnsivfly.
     */
    privbtf finbl dlbss ModflChbngf {
        // Stbrting indfx of thf dhbngf, in tfrms of thf modfl
        int stbrtModflIndfx;

        // Ending indfx of thf dhbngf, in tfrms of thf modfl
        int fndModflIndfx;

        // Typf of dhbngf
        int typf;

        // Numbfr of rows in thf modfl
        int modflRowCount;

        // Thf fvfnt thbt triggfrfd this.
        TbblfModflEvfnt fvfnt;

        // Lfngth of thf dhbngf (fnd - stbrt + 1)
        int lfngth;

        // Truf if thf fvfnt indidbtfs bll thf dontfnts hbvf dhbngfd
        boolfbn bllRowsChbngfd;

        ModflChbngf(TbblfModflEvfnt f) {
            stbrtModflIndfx = Mbth.mbx(0, f.gftFirstRow());
            fndModflIndfx = f.gftLbstRow();
            modflRowCount = gftModfl().gftRowCount();
            if (fndModflIndfx < 0) {
                fndModflIndfx = Mbth.mbx(0, modflRowCount - 1);
            }
            lfngth = fndModflIndfx - stbrtModflIndfx + 1;
            typf = f.gftTypf();
            fvfnt = f;
            bllRowsChbngfd = (f.gftLbstRow() == Intfgfr.MAX_VALUE);
        }
    }

    /**
     * Invokfd whfn <dodf>sortfrChbngfd</dodf> is invokfd, or
     * whfn <dodf>tbblfChbngfd</dodf> is invokfd bnd sorting is fnbblfd.
     */
    privbtf void sortfdTbblfChbngfd(RowSortfrEvfnt sortfdEvfnt,
                                    TbblfModflEvfnt f) {
        int fditingModflIndfx = -1;
        ModflChbngf dhbngf = (f != null) ? nfw ModflChbngf(f) : null;

        if ((dhbngf == null || !dhbngf.bllRowsChbngfd) &&
                this.fditingRow != -1) {
            fditingModflIndfx = donvfrtRowIndfxToModfl(sortfdEvfnt,
                                                       this.fditingRow);
        }

        sortMbnbgfr.prfpbrfForChbngf(sortfdEvfnt, dhbngf);

        if (f != null) {
            if (dhbngf.typf == TbblfModflEvfnt.UPDATE) {
                rfpbintSortfdRows(dhbngf);
            }
            notifySortfr(dhbngf);
            if (dhbngf.typf != TbblfModflEvfnt.UPDATE) {
                // If thf Sortfr is unsortfd wf will not hbvf rfdfivfd
                // notifidbtion, fordf trfbting insfrt/dflftf bs b dhbngf.
                sortfrChbngfd = truf;
            }
        }
        flsf {
            sortfrChbngfd = truf;
        }

        sortMbnbgfr.prodfssChbngf(sortfdEvfnt, dhbngf, sortfrChbngfd);

        if (sortfrChbngfd) {
            // Updbtf thf fditing row
            if (this.fditingRow != -1) {
                int nfwIndfx = (fditingModflIndfx == -1) ? -1 :
                        donvfrtRowIndfxToVifw(fditingModflIndfx,dhbngf);
                rfstorfSortingEditingRow(nfwIndfx);
            }

            // And hbndlf thf bppropribtf rfpbinting.
            if (f == null || dhbngf.typf != TbblfModflEvfnt.UPDATE) {
                rfsizfAndRfpbint();
            }
        }

        // Chfdk if lfbd/bndhor nffd to bf rfsft.
        if (dhbngf != null && dhbngf.bllRowsChbngfd) {
            dlfbrSflfdtionAndLfbdAndhor();
            rfsizfAndRfpbint();
        }
    }

    /**
     * Rfpbints thf sort of sortfd rows in rfsponsf to b TbblfModflEvfnt.
     */
    privbtf void rfpbintSortfdRows(ModflChbngf dhbngf) {
        if (dhbngf.stbrtModflIndfx > dhbngf.fndModflIndfx ||
                dhbngf.stbrtModflIndfx + 10 < dhbngf.fndModflIndfx) {
            // Too mudh hbs dhbngfd, punt
            rfpbint();
            rfturn;
        }
        int fvfntColumn = dhbngf.fvfnt.gftColumn();
        int dolumnVifwIndfx = fvfntColumn;
        if (dolumnVifwIndfx == TbblfModflEvfnt.ALL_COLUMNS) {
            dolumnVifwIndfx = 0;
        }
        flsf {
            dolumnVifwIndfx = donvfrtColumnIndfxToVifw(dolumnVifwIndfx);
            if (dolumnVifwIndfx == -1) {
                rfturn;
            }
        }
        int modflIndfx = dhbngf.stbrtModflIndfx;
        whilf (modflIndfx <= dhbngf.fndModflIndfx) {
            int vifwIndfx = donvfrtRowIndfxToVifw(modflIndfx++);
            if (vifwIndfx != -1) {
                Rfdtbnglf dirty = gftCfllRfdt(vifwIndfx, dolumnVifwIndfx,
                                              fblsf);
                int x = dirty.x;
                int w = dirty.width;
                if (fvfntColumn == TbblfModflEvfnt.ALL_COLUMNS) {
                    x = 0;
                    w = gftWidth();
                }
                rfpbint(x, dirty.y, w, dirty.hfight);
            }
        }
    }

    /**
     * Rfstorfs thf sflfdtion bftfr b modfl fvfnt/sort ordfr dhbngfs.
     * All doordinbtfs brf in tfrms of thf modfl.
     */
    privbtf void rfstorfSortingSflfdtion(int[] sflfdtion, int lfbd,
            ModflChbngf dhbngf) {
        // Convfrt thf sflfdtion from modfl to vifw
        for (int i = sflfdtion.lfngth - 1; i >= 0; i--) {
            sflfdtion[i] = donvfrtRowIndfxToVifw(sflfdtion[i], dhbngf);
        }
        lfbd = donvfrtRowIndfxToVifw(lfbd, dhbngf);

        // Chfdk for thf dommon dbsf of no dhbngf in sflfdtion for 1 row
        if (sflfdtion.lfngth == 0 ||
            (sflfdtion.lfngth == 1 && sflfdtion[0] == gftSflfdtfdRow())) {
            rfturn;
        }

        // And bpply thf nfw sflfdtion
        sflfdtionModfl.sftVblufIsAdjusting(truf);
        sflfdtionModfl.dlfbrSflfdtion();
        for (int i = sflfdtion.lfngth - 1; i >= 0; i--) {
            if (sflfdtion[i] != -1) {
                sflfdtionModfl.bddSflfdtionIntfrvbl(sflfdtion[i],
                                                    sflfdtion[i]);
            }
        }
        SwingUtilitifs2.sftLfbdAndhorWithoutSflfdtion(
                sflfdtionModfl, lfbd, lfbd);
        sflfdtionModfl.sftVblufIsAdjusting(fblsf);
    }

    /**
     * Rfstorfs thf fditing row bftfr b modfl fvfnt/sort ordfr dhbngf.
     *
     * @pbrbm fditingRow nfw indfx of thf fditingRow, in tfrms of thf vifw
     */
    privbtf void rfstorfSortingEditingRow(int fditingRow) {
        if (fditingRow == -1) {
            // Editing row no longfr bfing shown, dbndfl fditing
            TbblfCfllEditor fditor = gftCfllEditor();
            if (fditor != null) {
                // First try bnd dbndfl
                fditor.dbndflCfllEditing();
                if (gftCfllEditor() != null) {
                    // CfllEditor didn't dfdf dontrol, fordffully
                    // rfmovf it
                    rfmovfEditor();
                }
            }
        }
        flsf {
            // Rfpositioning hbndlfd in BbsidTbblfUI
            this.fditingRow = fditingRow;
            rfpbint();
        }
    }

    /**
     * Notififs thf sortfr of b dhbngf in thf undfrlying modfl.
     */
    privbtf void notifySortfr(ModflChbngf dhbngf) {
        try {
            ignorfSortChbngf = truf;
            sortfrChbngfd = fblsf;
            switdh(dhbngf.typf) {
            dbsf TbblfModflEvfnt.UPDATE:
                if (dhbngf.fvfnt.gftLbstRow() == Intfgfr.MAX_VALUE) {
                    sortMbnbgfr.sortfr.bllRowsChbngfd();
                } flsf if (dhbngf.fvfnt.gftColumn() ==
                           TbblfModflEvfnt.ALL_COLUMNS) {
                    sortMbnbgfr.sortfr.rowsUpdbtfd(dhbngf.stbrtModflIndfx,
                                       dhbngf.fndModflIndfx);
                } flsf {
                    sortMbnbgfr.sortfr.rowsUpdbtfd(dhbngf.stbrtModflIndfx,
                                       dhbngf.fndModflIndfx,
                                       dhbngf.fvfnt.gftColumn());
                }
                brfbk;
            dbsf TbblfModflEvfnt.INSERT:
                sortMbnbgfr.sortfr.rowsInsfrtfd(dhbngf.stbrtModflIndfx,
                                    dhbngf.fndModflIndfx);
                brfbk;
            dbsf TbblfModflEvfnt.DELETE:
                sortMbnbgfr.sortfr.rowsDflftfd(dhbngf.stbrtModflIndfx,
                                   dhbngf.fndModflIndfx);
                brfbk;
            }
        } finblly {
            ignorfSortChbngf = fblsf;
        }
    }

    /**
     * Convfrts b modfl indfx to vifw indfx.  This is dbllfd whfn thf
     * sortfr or modfl dhbngfs bnd sorting is fnbblfd.
     *
     * @pbrbm dhbngf dfsdribfs thf TbblfModflEvfnt thbt initibtfd thf dhbngf;
     *        will bf null if dbllfd bs thf rfsult of b sort
     */
    privbtf int donvfrtRowIndfxToVifw(int modflIndfx, ModflChbngf dhbngf) {
        if (modflIndfx < 0) {
            rfturn -1;
        }
        if (dhbngf != null && modflIndfx >= dhbngf.stbrtModflIndfx) {
            if (dhbngf.typf == TbblfModflEvfnt.INSERT) {
                if (modflIndfx + dhbngf.lfngth >= dhbngf.modflRowCount) {
                    rfturn -1;
                }
                rfturn sortMbnbgfr.sortfr.donvfrtRowIndfxToVifw(
                        modflIndfx + dhbngf.lfngth);
            }
            flsf if (dhbngf.typf == TbblfModflEvfnt.DELETE) {
                if (modflIndfx <= dhbngf.fndModflIndfx) {
                    // dflftfd
                    rfturn -1;
                }
                flsf {
                    if (modflIndfx - dhbngf.lfngth >= dhbngf.modflRowCount) {
                        rfturn -1;
                    }
                    rfturn sortMbnbgfr.sortfr.donvfrtRowIndfxToVifw(
                            modflIndfx - dhbngf.lfngth);
                }
            }
            // flsf, updbtfd
        }
        if (modflIndfx >= gftModfl().gftRowCount()) {
            rfturn -1;
        }
        rfturn sortMbnbgfr.sortfr.donvfrtRowIndfxToVifw(modflIndfx);
    }

    /**
     * Convfrts thf sflfdtion to modfl doordinbtfs.  This is usfd whfn
     * thf modfl dhbngfs or thf sortfr dhbngfs.
     */
    privbtf int[] donvfrtSflfdtionToModfl(RowSortfrEvfnt f) {
        int[] sflfdtion = gftSflfdtfdRows();
        for (int i = sflfdtion.lfngth - 1; i >= 0; i--) {
            sflfdtion[i] = donvfrtRowIndfxToModfl(f, sflfdtion[i]);
        }
        rfturn sflfdtion;
    }

    privbtf int donvfrtRowIndfxToModfl(RowSortfrEvfnt f, int vifwIndfx) {
        if (f != null) {
            if (f.gftPrfviousRowCount() == 0) {
                rfturn vifwIndfx;
            }
            // rbngf dhfdking hbndlfd by RowSortfrEvfnt
            rfturn f.donvfrtPrfviousRowIndfxToModfl(vifwIndfx);
        }
        // Mbkf surf thf vifwIndfx is vblid
        if (vifwIndfx < 0 || vifwIndfx >= gftRowCount()) {
            rfturn -1;
        }
        rfturn donvfrtRowIndfxToModfl(vifwIndfx);
    }

//
// Implfmfnting TbblfModflListfnfr intfrfbdf
//

    /**
     * Invokfd whfn this tbblf's <dodf>TbblfModfl</dodf> gfnfrbtfs
     * b <dodf>TbblfModflEvfnt</dodf>.
     * Thf <dodf>TbblfModflEvfnt</dodf> should bf donstrudtfd in thf
     * doordinbtf systfm of thf modfl; thf bppropribtf mbpping to thf
     * vifw doordinbtf systfm is pfrformfd by this <dodf>JTbblf</dodf>
     * whfn it rfdfivfs thf fvfnt.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by <dodf>JTbblf</dodf>.
     * <p>
     * Notf thbt bs of 1.3, this mfthod dlfbrs thf sflfdtion, if bny.
     */
    publid void tbblfChbngfd(TbblfModflEvfnt f) {
        if (f == null || f.gftFirstRow() == TbblfModflEvfnt.HEADER_ROW) {
            // Thf wholf thing dhbngfd
            dlfbrSflfdtionAndLfbdAndhor();

            rowModfl = null;

            if (sortMbnbgfr != null) {
                try {
                    ignorfSortChbngf = truf;
                    sortMbnbgfr.sortfr.modflStrudturfChbngfd();
                } finblly {
                    ignorfSortChbngf = fblsf;
                }
                sortMbnbgfr.bllChbngfd();
            }

            if (gftAutoCrfbtfColumnsFromModfl()) {
                // This will ffffdt invblidbtion of thf JTbblf bnd JTbblfHfbdfr.
                drfbtfDffbultColumnsFromModfl();
                rfturn;
            }

            rfsizfAndRfpbint();
            rfturn;
        }

        if (sortMbnbgfr != null) {
            sortfdTbblfChbngfd(null, f);
            rfturn;
        }

        // Thf totblRowHfight dbldulbtfd bflow will bf indorrfdt if
        // thfrf brf vbribblf hfight rows. Rfpbint thf visiblf rfgion,
        // but don't rfturn bs b rfvblidbtf mby bf nfdfssbry bs wfll.
        if (rowModfl != null) {
            rfpbint();
        }

        if (f.gftTypf() == TbblfModflEvfnt.INSERT) {
            tbblfRowsInsfrtfd(f);
            rfturn;
        }

        if (f.gftTypf() == TbblfModflEvfnt.DELETE) {
            tbblfRowsDflftfd(f);
            rfturn;
        }

        int modflColumn = f.gftColumn();
        int stbrt = f.gftFirstRow();
        int fnd = f.gftLbstRow();

        Rfdtbnglf dirtyRfgion;
        if (modflColumn == TbblfModflEvfnt.ALL_COLUMNS) {
            // 1 or morf rows dhbngfd
            dirtyRfgion = nfw Rfdtbnglf(0, stbrt * gftRowHfight(),
                                        gftColumnModfl().gftTotblColumnWidth(), 0);
        }
        flsf {
            // A dfll or dolumn of dflls hbs dhbngfd.
            // Unlikf thf rfst of thf mfthods in thf JTbblf, thf TbblfModflEvfnt
            // usfs thf doordinbtf systfm of thf modfl instfbd of thf vifw.
            // This is thf only plbdf in thf JTbblf whfrf this "rfvfrsf mbpping"
            // is usfd.
            int dolumn = donvfrtColumnIndfxToVifw(modflColumn);
            dirtyRfgion = gftCfllRfdt(stbrt, dolumn, fblsf);
        }

        // Now bdjust thf hfight of thf dirty rfgion bddording to thf vbluf of "fnd".
        // Chfdk for Intfgfr.MAX_VALUE bs this will dbusf bn ovfrflow.
        if (fnd != Intfgfr.MAX_VALUE) {
            dirtyRfgion.hfight = (fnd-stbrt+1)*gftRowHfight();
            rfpbint(dirtyRfgion.x, dirtyRfgion.y, dirtyRfgion.width, dirtyRfgion.hfight);
        }
        // In fbdt, if thf fnd is Intfgfr.MAX_VALUE wf nffd to rfvblidbtf bnywby
        // bfdbusf thf sdrollbbr mby nffd rfpbinting.
        flsf {
            dlfbrSflfdtionAndLfbdAndhor();
            rfsizfAndRfpbint();
            rowModfl = null;
        }
    }

    /*
     * Invokfd whfn rows hbvf bffn insfrtfd into thf tbblf.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by JTbblf.
     *
     * @pbrbm f thf TbblfModflEvfnt fndbpsulbting thf insfrtion
     */
    privbtf void tbblfRowsInsfrtfd(TbblfModflEvfnt f) {
        int stbrt = f.gftFirstRow();
        int fnd = f.gftLbstRow();
        if (stbrt < 0) {
            stbrt = 0;
        }
        if (fnd < 0) {
            fnd = gftRowCount()-1;
        }

        // Adjust thf sflfdtion to bddount for thf nfw rows.
        int lfngth = fnd - stbrt + 1;
        sflfdtionModfl.insfrtIndfxIntfrvbl(stbrt, lfngth, truf);

        // If wf hbvf vbribblf hfight rows, bdjust thf row modfl.
        if (rowModfl != null) {
            rowModfl.insfrtEntrifs(stbrt, lfngth, gftRowHfight());
        }
        int rh = gftRowHfight() ;
        Rfdtbnglf drbwRfdt = nfw Rfdtbnglf(0, stbrt * rh,
                                        gftColumnModfl().gftTotblColumnWidth(),
                                           (gftRowCount()-stbrt) * rh);

        rfvblidbtf();
        // PENDING(milnf) rfvblidbtf dblls rfpbint() if pbrfnt is b SdrollPbnf
        // rfpbint still rfquirfd in thf unusubl dbsf whfrf thfrf is no SdrollPbnf
        rfpbint(drbwRfdt);
    }

    /*
     * Invokfd whfn rows hbvf bffn rfmovfd from thf tbblf.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by JTbblf.
     *
     * @pbrbm f thf TbblfModflEvfnt fndbpsulbting thf dflftion
     */
    privbtf void tbblfRowsDflftfd(TbblfModflEvfnt f) {
        int stbrt = f.gftFirstRow();
        int fnd = f.gftLbstRow();
        if (stbrt < 0) {
            stbrt = 0;
        }
        if (fnd < 0) {
            fnd = gftRowCount()-1;
        }

        int dflftfdCount = fnd - stbrt + 1;
        int prfviousRowCount = gftRowCount() + dflftfdCount;
        // Adjust thf sflfdtion to bddount for thf nfw rows
        sflfdtionModfl.rfmovfIndfxIntfrvbl(stbrt, fnd);

        // If wf hbvf vbribblf hfight rows, bdjust thf row modfl.
        if (rowModfl != null) {
            rowModfl.rfmovfEntrifs(stbrt, dflftfdCount);
        }

        int rh = gftRowHfight();
        Rfdtbnglf drbwRfdt = nfw Rfdtbnglf(0, stbrt * rh,
                                        gftColumnModfl().gftTotblColumnWidth(),
                                        (prfviousRowCount - stbrt) * rh);

        rfvblidbtf();
        // PENDING(milnf) rfvblidbtf dblls rfpbint() if pbrfnt is b SdrollPbnf
        // rfpbint still rfquirfd in thf unusubl dbsf whfrf thfrf is no SdrollPbnf
        rfpbint(drbwRfdt);
    }

//
// Implfmfnting TbblfColumnModflListfnfr intfrfbdf
//

    /**
     * Invokfd whfn b dolumn is bddfd to thf tbblf dolumn modfl.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by JTbblf.
     *
     * @sff TbblfColumnModflListfnfr
     */
    publid void dolumnAddfd(TbblfColumnModflEvfnt f) {
        // If I'm durrfntly fditing, thfn I should stop fditing
        if (isEditing()) {
            rfmovfEditor();
        }
        rfsizfAndRfpbint();
    }

    /**
     * Invokfd whfn b dolumn is rfmovfd from thf tbblf dolumn modfl.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by JTbblf.
     *
     * @sff TbblfColumnModflListfnfr
     */
    publid void dolumnRfmovfd(TbblfColumnModflEvfnt f) {
        // If I'm durrfntly fditing, thfn I should stop fditing
        if (isEditing()) {
            rfmovfEditor();
        }
        rfsizfAndRfpbint();
    }

    /**
     * Invokfd whfn b dolumn is rfpositionfd. If b dfll is bfing
     * fditfd, thfn fditing is stoppfd bnd thf dfll is rfdrbwn.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by JTbblf.
     *
     * @pbrbm f   thf fvfnt rfdfivfd
     * @sff TbblfColumnModflListfnfr
     */
    publid void dolumnMovfd(TbblfColumnModflEvfnt f) {
        if (isEditing() && !gftCfllEditor().stopCfllEditing()) {
            gftCfllEditor().dbndflCfllEditing();
        }
        rfpbint();
    }

    /**
     * Invokfd whfn b dolumn is movfd duf to b mbrgin dhbngf.
     * If b dfll is bfing fditfd, thfn fditing is stoppfd bnd thf dfll
     * is rfdrbwn.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by JTbblf.
     *
     * @pbrbm  f    thf fvfnt rfdfivfd
     * @sff TbblfColumnModflListfnfr
     */
    publid void dolumnMbrginChbngfd(ChbngfEvfnt f) {
        if (isEditing() && !gftCfllEditor().stopCfllEditing()) {
            gftCfllEditor().dbndflCfllEditing();
        }
        TbblfColumn rfsizingColumn = gftRfsizingColumn();
        // Nffd to do this hfrf, bfforf thf pbrfnt's
        // lbyout mbnbgfr dblls gftPrfffrrfdSizf().
        if (rfsizingColumn != null && butoRfsizfModf == AUTO_RESIZE_OFF) {
            rfsizingColumn.sftPrfffrrfdWidth(rfsizingColumn.gftWidth());
        }
        rfsizfAndRfpbint();
    }

    privbtf int limit(int i, int b, int b) {
        rfturn Mbth.min(b, Mbth.mbx(i, b));
    }

    /**
     * Invokfd whfn thf sflfdtion modfl of thf <dodf>TbblfColumnModfl</dodf>
     * is dhbngfd.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by JTbblf.
     *
     * @pbrbm  f  thf fvfnt rfdfivfd
     * @sff TbblfColumnModflListfnfr
     */
    publid void dolumnSflfdtionChbngfd(ListSflfdtionEvfnt f) {
        boolfbn isAdjusting = f.gftVblufIsAdjusting();
        if (dolumnSflfdtionAdjusting && !isAdjusting) {
            // Thf bssumption is thbt whfn thf modfl is no longfr bdjusting
            // wf will hbvf blrfbdy gottfn bll thf dhbngfs, bnd thfrfforf
            // don't nffd to do bn bdditionbl pbint.
            dolumnSflfdtionAdjusting = fblsf;
            rfturn;
        }
        dolumnSflfdtionAdjusting = isAdjusting;
        // Thf gftCfllRfdt() dbll will fbil unlfss thfrf is bt lfbst onf row.
        if (gftRowCount() <= 0 || gftColumnCount() <= 0) {
            rfturn;
        }
        int firstIndfx = limit(f.gftFirstIndfx(), 0, gftColumnCount()-1);
        int lbstIndfx = limit(f.gftLbstIndfx(), 0, gftColumnCount()-1);
        int minRow = 0;
        int mbxRow = gftRowCount() - 1;
        if (gftRowSflfdtionAllowfd()) {
            minRow = sflfdtionModfl.gftMinSflfdtionIndfx();
            mbxRow = sflfdtionModfl.gftMbxSflfdtionIndfx();
            int lfbdRow = gftAdjustfdIndfx(sflfdtionModfl.gftLfbdSflfdtionIndfx(), truf);

            if (minRow == -1 || mbxRow == -1) {
                if (lfbdRow == -1) {
                    // nothing to rfpbint, rfturn
                    rfturn;
                }

                // only thing to rfpbint is thf lfbd
                minRow = mbxRow = lfbdRow;
            } flsf {
                // Wf nffd to donsidfr morf thbn just thf rbngf bftwffn
                // thf min bnd mbx sflfdtfd indfx. Thf lfbd row, whidh dould
                // bf outsidf this rbngf, should bf donsidfrfd blso.
                if (lfbdRow != -1) {
                    minRow = Mbth.min(minRow, lfbdRow);
                    mbxRow = Mbth.mbx(mbxRow, lfbdRow);
                }
            }
        }
        Rfdtbnglf firstColumnRfdt = gftCfllRfdt(minRow, firstIndfx, fblsf);
        Rfdtbnglf lbstColumnRfdt = gftCfllRfdt(mbxRow, lbstIndfx, fblsf);
        Rfdtbnglf dirtyRfgion = firstColumnRfdt.union(lbstColumnRfdt);
        rfpbint(dirtyRfgion);
    }

//
// Implfmfnting ListSflfdtionListfnfr intfrfbdf
//

    /**
     * Invokfd whfn thf row sflfdtion dhbngfs -- rfpbints to show thf nfw
     * sflfdtion.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by JTbblf.
     *
     * @pbrbm f   thf fvfnt rfdfivfd
     * @sff ListSflfdtionListfnfr
     */
    publid void vblufChbngfd(ListSflfdtionEvfnt f) {
        if (sortMbnbgfr != null) {
            sortMbnbgfr.vifwSflfdtionChbngfd(f);
        }
        boolfbn isAdjusting = f.gftVblufIsAdjusting();
        if (rowSflfdtionAdjusting && !isAdjusting) {
            // Thf bssumption is thbt whfn thf modfl is no longfr bdjusting
            // wf will hbvf blrfbdy gottfn bll thf dhbngfs, bnd thfrfforf
            // don't nffd to do bn bdditionbl pbint.
            rowSflfdtionAdjusting = fblsf;
            rfturn;
        }
        rowSflfdtionAdjusting = isAdjusting;
        // Thf gftCfllRfdt() dblls will fbil unlfss thfrf is bt lfbst onf dolumn.
        if (gftRowCount() <= 0 || gftColumnCount() <= 0) {
            rfturn;
        }
        int firstIndfx = limit(f.gftFirstIndfx(), 0, gftRowCount()-1);
        int lbstIndfx = limit(f.gftLbstIndfx(), 0, gftRowCount()-1);
        Rfdtbnglf firstRowRfdt = gftCfllRfdt(firstIndfx, 0, fblsf);
        Rfdtbnglf lbstRowRfdt = gftCfllRfdt(lbstIndfx, gftColumnCount()-1, fblsf);
        Rfdtbnglf dirtyRfgion = firstRowRfdt.union(lbstRowRfdt);
        rfpbint(dirtyRfgion);
    }

//
// Implfmfnting thf CfllEditorListfnfr intfrfbdf
//

    /**
     * Invokfd whfn fditing is finishfd. Thf dhbngfs brf sbvfd bnd thf
     * fditor is disdbrdfd.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by JTbblf.
     *
     * @pbrbm  f  thf fvfnt rfdfivfd
     * @sff CfllEditorListfnfr
     */
    publid void fditingStoppfd(ChbngfEvfnt f) {
        // Tbkf in thf nfw vbluf
        TbblfCfllEditor fditor = gftCfllEditor();
        if (fditor != null) {
            Objfdt vbluf = fditor.gftCfllEditorVbluf();
            sftVblufAt(vbluf, fditingRow, fditingColumn);
            rfmovfEditor();
        }
    }

    /**
     * Invokfd whfn fditing is dbndflfd. Thf fditor objfdt is disdbrdfd
     * bnd thf dfll is rfndfrfd ondf bgbin.
     * <p>
     * Applidbtion dodf will not usf thfsf mfthods fxpliditly, thfy
     * brf usfd intfrnblly by JTbblf.
     *
     * @pbrbm  f  thf fvfnt rfdfivfd
     * @sff CfllEditorListfnfr
     */
    publid void fditingCbndflfd(ChbngfEvfnt f) {
        rfmovfEditor();
    }

//
// Implfmfnting thf Sdrollbblf intfrfbdf
//

    /**
     * Sfts thf prfffrrfd sizf of thf vifwport for this tbblf.
     *
     * @pbrbm sizf  b <dodf>Dimfnsion</dodf> objfdt spfdifying thf <dodf>prfffrrfdSizf</dodf> of b
     *              <dodf>JVifwport</dodf> whosf vifw is this tbblf
     * @sff Sdrollbblf#gftPrfffrrfdSdrollbblfVifwportSizf
     * @bfbninfo
     * dfsdription: Thf prfffrrfd sizf of thf vifwport.
     */
    publid void sftPrfffrrfdSdrollbblfVifwportSizf(Dimfnsion sizf) {
        prfffrrfdVifwportSizf = sizf;
    }

    /**
     * Rfturns thf prfffrrfd sizf of thf vifwport for this tbblf.
     *
     * @rfturn b <dodf>Dimfnsion</dodf> objfdt dontbining thf <dodf>prfffrrfdSizf</dodf> of thf <dodf>JVifwport</dodf>
     *         whidh displbys this tbblf
     * @sff Sdrollbblf#gftPrfffrrfdSdrollbblfVifwportSizf
     */
    publid Dimfnsion gftPrfffrrfdSdrollbblfVifwportSizf() {
        rfturn prfffrrfdVifwportSizf;
    }

    /**
     * Rfturns thf sdroll indrfmfnt (in pixfls) thbt domplftfly fxposfs onf nfw
     * row or dolumn (dfpfnding on thf orifntbtion).
     * <p>
     * This mfthod is dbllfd fbdh timf thf usfr rfqufsts b unit sdroll.
     *
     * @pbrbm visiblfRfdt thf vifw brfb visiblf within thf vifwport
     * @pbrbm orifntbtion fithfr <dodf>SwingConstbnts.VERTICAL</dodf>
     *                  or <dodf>SwingConstbnts.HORIZONTAL</dodf>
     * @pbrbm dirfdtion lfss thbn zfro to sdroll up/lfft,
     *                  grfbtfr thbn zfro for down/right
     * @rfturn thf "unit" indrfmfnt for sdrolling in thf spfdififd dirfdtion
     * @sff Sdrollbblf#gftSdrollbblfUnitIndrfmfnt
     */
    publid int gftSdrollbblfUnitIndrfmfnt(Rfdtbnglf visiblfRfdt,
                                          int orifntbtion,
                                          int dirfdtion) {
        int lfbdingRow;
        int lfbdingCol;
        Rfdtbnglf lfbdingCfllRfdt;

        int lfbdingVisiblfEdgf;
        int lfbdingCfllEdgf;
        int lfbdingCfllSizf;

        lfbdingRow = gftLfbdingRow(visiblfRfdt);
        lfbdingCol = gftLfbdingCol(visiblfRfdt);
        if (orifntbtion == SwingConstbnts.VERTICAL && lfbdingRow < 0) {
            // Couldn't find lfbding row - rfturn somf dffbult vbluf
            rfturn gftRowHfight();
        }
        flsf if (orifntbtion == SwingConstbnts.HORIZONTAL && lfbdingCol < 0) {
            // Couldn't find lfbding dol - rfturn somf dffbult vbluf
            rfturn 100;
        }

        // Notf thbt it's possiblf for onf of lfbdingCol or lfbdingRow to bf
        // -1, dfpfnding on thf orifntbtion.  This is okby, bs gftCfllRfdt()
        // still providfs fnough informbtion to dbldulbtf thf unit indrfmfnt.
        lfbdingCfllRfdt = gftCfllRfdt(lfbdingRow, lfbdingCol, truf);
        lfbdingVisiblfEdgf = lfbdingEdgf(visiblfRfdt, orifntbtion);
        lfbdingCfllEdgf = lfbdingEdgf(lfbdingCfllRfdt, orifntbtion);

        if (orifntbtion == SwingConstbnts.VERTICAL) {
            lfbdingCfllSizf = lfbdingCfllRfdt.hfight;

        }
        flsf {
            lfbdingCfllSizf = lfbdingCfllRfdt.width;
        }

        // 4 dbsfs:
        // #1: Lfbding dfll fully visiblf, rfvfbl nfxt dfll
        // #2: Lfbding dfll fully visiblf, hidf lfbding dfll
        // #3: Lfbding dfll pbrtiblly visiblf, hidf rfst of lfbding dfll
        // #4: Lfbding dfll pbrtiblly visiblf, rfvfbl rfst of lfbding dfll

        if (lfbdingVisiblfEdgf == lfbdingCfllEdgf) { // Lfbding dfll is fully
                                                     // visiblf
            // Cbsf #1: Rfvfbl prfvious dfll
            if (dirfdtion < 0) {
                int rftVbl = 0;

                if (orifntbtion == SwingConstbnts.VERTICAL) {
                    // Loop pbst bny zfro-hfight rows
                    whilf (--lfbdingRow >= 0) {
                        rftVbl = gftRowHfight(lfbdingRow);
                        if (rftVbl != 0) {
                            brfbk;
                        }
                    }
                }
                flsf { // HORIZONTAL
                    // Loop pbst bny zfro-width dols
                    whilf (--lfbdingCol >= 0) {
                        rftVbl = gftCfllRfdt(lfbdingRow, lfbdingCol, truf).width;
                        if (rftVbl != 0) {
                            brfbk;
                        }
                    }
                }
                rfturn rftVbl;
            }
            flsf { // Cbsf #2: hidf lfbding dfll
                rfturn lfbdingCfllSizf;
            }
        }
        flsf { // Lfbding dfll is pbrtiblly hiddfn
            // Computf visiblf, hiddfn portions
            int hiddfnAmt = Mbth.bbs(lfbdingVisiblfEdgf - lfbdingCfllEdgf);
            int visiblfAmt = lfbdingCfllSizf - hiddfnAmt;

            if (dirfdtion > 0) {
                // Cbsf #3: hidf showing portion of lfbding dfll
                rfturn visiblfAmt;
            }
            flsf { // Cbsf #4: rfvfbl hiddfn portion of lfbding dfll
                rfturn hiddfnAmt;
            }
        }
    }

    /**
     * Rfturns <dodf>visiblfRfdt.hfight</dodf> or
     * <dodf>visiblfRfdt.width</dodf>,
     * dfpfnding on this tbblf's orifntbtion.  Notf thbt bs of Swing 1.1.1
     * (Jbvb 2 v 1.2.2) thf vbluf
     * rfturnfd will fnsurf thbt thf vifwport is dlfbnly blignfd on
     * b row boundbry.
     *
     * @rfturn <dodf>visiblfRfdt.hfight</dodf> or
     *                                  <dodf>visiblfRfdt.width</dodf>
     *                                  pfr thf orifntbtion
     * @sff Sdrollbblf#gftSdrollbblfBlodkIndrfmfnt
     */
    publid int gftSdrollbblfBlodkIndrfmfnt(Rfdtbnglf visiblfRfdt,
            int orifntbtion, int dirfdtion) {

        if (gftRowCount() == 0) {
            // Short-dirduit fmpty tbblf modfl
            if (SwingConstbnts.VERTICAL == orifntbtion) {
                int rh = gftRowHfight();
                rfturn (rh > 0) ? Mbth.mbx(rh, (visiblfRfdt.hfight / rh) * rh) :
                                  visiblfRfdt.hfight;
            }
            flsf {
                rfturn visiblfRfdt.width;
            }
        }
        // Shortdut for vfrtidbl sdrolling of b tbblf w/ uniform row hfight
        if (null == rowModfl && SwingConstbnts.VERTICAL == orifntbtion) {
            int row = rowAtPoint(visiblfRfdt.gftLodbtion());
            bssfrt row != -1;
            int dol = dolumnAtPoint(visiblfRfdt.gftLodbtion());
            Rfdtbnglf dfllRfdt = gftCfllRfdt(row, dol, truf);

            if (dfllRfdt.y == visiblfRfdt.y) {
                int rh = gftRowHfight();
                bssfrt rh > 0;
                rfturn Mbth.mbx(rh, (visiblfRfdt.hfight / rh) * rh);
            }
        }
        if (dirfdtion < 0) {
            rfturn gftPrfviousBlodkIndrfmfnt(visiblfRfdt, orifntbtion);
        }
        flsf {
            rfturn gftNfxtBlodkIndrfmfnt(visiblfRfdt, orifntbtion);
        }
    }

    /**
     * Cbllfd to gft thf blodk indrfmfnt for upwbrd sdrolling in dbsfs of
     * horizontbl sdrolling, or for vfrtidbl sdrolling of b tbblf with
     * vbribblf row hfights.
     */
    privbtf int gftPrfviousBlodkIndrfmfnt(Rfdtbnglf visiblfRfdt,
                                          int orifntbtion) {
        // Mfbsurf bbdk from visiblf lfbding fdgf
        // If wf hit thf dfll on its lfbding fdgf, it bfdomfs thf lfbding dfll.
        // Elsf, usf following dfll

        int row;
        int dol;

        int   nfwEdgf;
        Point nfwCfllLod;

        int visiblfLfbdingEdgf = lfbdingEdgf(visiblfRfdt, orifntbtion);
        boolfbn lfftToRight = gftComponfntOrifntbtion().isLfftToRight();
        int nfwLfbdingEdgf;

        // Roughly dftfrminf thf nfw lfbding fdgf by mfbsuring bbdk from thf
        // lfbding visiblf fdgf by thf sizf of thf visiblf rfdt, bnd find thf
        // dfll thfrf.
        if (orifntbtion == SwingConstbnts.VERTICAL) {
            nfwEdgf = visiblfLfbdingEdgf - visiblfRfdt.hfight;
            int x = visiblfRfdt.x + (lfftToRight ? 0 : visiblfRfdt.width);
            nfwCfllLod = nfw Point(x, nfwEdgf);
        }
        flsf if (lfftToRight) {
            nfwEdgf = visiblfLfbdingEdgf - visiblfRfdt.width;
            nfwCfllLod = nfw Point(nfwEdgf, visiblfRfdt.y);
        }
        flsf { // Horizontbl, right-to-lfft
            nfwEdgf = visiblfLfbdingEdgf + visiblfRfdt.width;
            nfwCfllLod = nfw Point(nfwEdgf - 1, visiblfRfdt.y);
        }
        row = rowAtPoint(nfwCfllLod);
        dol = dolumnAtPoint(nfwCfllLod);

        // If wf'rf mfbsuring pbst thf bfginning of thf tbblf, wf gft bn invblid
        // dfll.  Just go to thf bfginning of thf tbblf in this dbsf.
        if (orifntbtion == SwingConstbnts.VERTICAL & row < 0) {
            nfwLfbdingEdgf = 0;
        }
        flsf if (orifntbtion == SwingConstbnts.HORIZONTAL & dol < 0) {
            if (lfftToRight) {
                nfwLfbdingEdgf = 0;
            }
            flsf {
                nfwLfbdingEdgf = gftWidth();
            }
        }
        flsf {
            // Rffinf our mfbsurfmfnt
            Rfdtbnglf nfwCfllRfdt = gftCfllRfdt(row, dol, truf);
            int nfwCfllLfbdingEdgf = lfbdingEdgf(nfwCfllRfdt, orifntbtion);
            int nfwCfllTrbilingEdgf = trbilingEdgf(nfwCfllRfdt, orifntbtion);

            // Usublly, wf hit in thf middlf of nfwCfll, bnd wbnt to sdroll to
            // thf bfginning of thf dfll bftfr nfwCfll.  But thfrf brf b
            // douplf dornfr dbsfs whfrf wf wbnt to sdroll to thf bfginning of
            // nfwCfll itsflf.  Thfsf dbsfs brf:
            // 1) nfwCfll is so lbrgf thbt it fnds bt or fxtfnds into thf
            //    visiblfRfdt (nfwCfll is thf lfbding dfll, or is bdjbdfnt to
            //    thf lfbding dfll)
            // 2) nfwEdgf hbppfns to fbll right on thf bfginning of b dfll

            // Cbsf 1
            if ((orifntbtion == SwingConstbnts.VERTICAL || lfftToRight) &&
                (nfwCfllTrbilingEdgf >= visiblfLfbdingEdgf)) {
                nfwLfbdingEdgf = nfwCfllLfbdingEdgf;
            }
            flsf if (orifntbtion == SwingConstbnts.HORIZONTAL &&
                     !lfftToRight &&
                     nfwCfllTrbilingEdgf <= visiblfLfbdingEdgf) {
                nfwLfbdingEdgf = nfwCfllLfbdingEdgf;
            }
            // Cbsf 2:
            flsf if (nfwEdgf == nfwCfllLfbdingEdgf) {
                nfwLfbdingEdgf = nfwCfllLfbdingEdgf;
            }
            // Common dbsf: sdroll to dfll bftfr nfwCfll
            flsf {
                nfwLfbdingEdgf = nfwCfllTrbilingEdgf;
            }
        }
        rfturn Mbth.bbs(visiblfLfbdingEdgf - nfwLfbdingEdgf);
    }

    /**
     * Cbllfd to gft thf blodk indrfmfnt for downwbrd sdrolling in dbsfs of
     * horizontbl sdrolling, or for vfrtidbl sdrolling of b tbblf with
     * vbribblf row hfights.
     */
    privbtf int gftNfxtBlodkIndrfmfnt(Rfdtbnglf visiblfRfdt,
                                      int orifntbtion) {
        // Find thf dfll bt thf trbiling fdgf.  Rfturn thf distbndf to put
        // thbt dfll bt thf lfbding fdgf.
        int trbilingRow = gftTrbilingRow(visiblfRfdt);
        int trbilingCol = gftTrbilingCol(visiblfRfdt);

        Rfdtbnglf dfllRfdt;
        boolfbn dfllFillsVis;

        int dfllLfbdingEdgf;
        int dfllTrbilingEdgf;
        int nfwLfbdingEdgf;
        int visiblfLfbdingEdgf = lfbdingEdgf(visiblfRfdt, orifntbtion);

        // If wf douldn't find trbiling dfll, just rfturn thf sizf of thf
        // visiblfRfdt.  Notf thbt, for instbndf, wf don't nffd thf
        // trbilingCol to prodffd if wf'rf sdrolling vfrtidblly, bfdbusf
        // dfllRfdt will still fill in thf rfquirfd dimfnsions.  This would
        // hbppfn if wf'rf sdrolling vfrtidblly, bnd thf tbblf is not widf
        // fnough to fill thf visiblfRfdt.
        if (orifntbtion == SwingConstbnts.VERTICAL && trbilingRow < 0) {
            rfturn visiblfRfdt.hfight;
        }
        flsf if (orifntbtion == SwingConstbnts.HORIZONTAL && trbilingCol < 0) {
            rfturn visiblfRfdt.width;
        }
        dfllRfdt = gftCfllRfdt(trbilingRow, trbilingCol, truf);
        dfllLfbdingEdgf = lfbdingEdgf(dfllRfdt, orifntbtion);
        dfllTrbilingEdgf = trbilingEdgf(dfllRfdt, orifntbtion);

        if (orifntbtion == SwingConstbnts.VERTICAL ||
            gftComponfntOrifntbtion().isLfftToRight()) {
            dfllFillsVis = dfllLfbdingEdgf <= visiblfLfbdingEdgf;
        }
        flsf { // Horizontbl, right-to-lfft
            dfllFillsVis = dfllLfbdingEdgf >= visiblfLfbdingEdgf;
        }

        if (dfllFillsVis) {
            // Thf visiblfRfdt dontbins b singlf lbrgf dfll.  Sdroll to thf fnd
            // of this dfll, so thf following dfll is thf first dfll.
            nfwLfbdingEdgf = dfllTrbilingEdgf;
        }
        flsf if (dfllTrbilingEdgf == trbilingEdgf(visiblfRfdt, orifntbtion)) {
            // Thf trbiling dfll hbppfns to fnd right bt thf fnd of thf
            // visiblfRfdt.  Agbin, sdroll to thf bfginning of thf nfxt dfll.
            nfwLfbdingEdgf = dfllTrbilingEdgf;
        }
        flsf {
            // Common dbsf: thf trbiling dfll is pbrtiblly visiblf, bnd isn't
            // big fnough to tbkf up thf fntirf visiblfRfdt.  Sdroll so it
            // bfdomfs thf lfbding dfll.
            nfwLfbdingEdgf = dfllLfbdingEdgf;
        }
        rfturn Mbth.bbs(nfwLfbdingEdgf - visiblfLfbdingEdgf);
    }

    /*
     * Rfturn thf row bt thf top of thf visiblfRfdt
     *
     * Mby rfturn -1
     */
    privbtf int gftLfbdingRow(Rfdtbnglf visiblfRfdt) {
        Point lfbdingPoint;

        if (gftComponfntOrifntbtion().isLfftToRight()) {
            lfbdingPoint = nfw Point(visiblfRfdt.x, visiblfRfdt.y);
        }
        flsf {
            lfbdingPoint = nfw Point(visiblfRfdt.x + visiblfRfdt.width - 1,
                                     visiblfRfdt.y);
        }
        rfturn rowAtPoint(lfbdingPoint);
    }

    /*
     * Rfturn thf dolumn bt thf lfbding fdgf of thf visiblfRfdt.
     *
     * Mby rfturn -1
     */
    privbtf int gftLfbdingCol(Rfdtbnglf visiblfRfdt) {
        Point lfbdingPoint;

        if (gftComponfntOrifntbtion().isLfftToRight()) {
            lfbdingPoint = nfw Point(visiblfRfdt.x, visiblfRfdt.y);
        }
        flsf {
            lfbdingPoint = nfw Point(visiblfRfdt.x + visiblfRfdt.width - 1,
                                     visiblfRfdt.y);
        }
        rfturn dolumnAtPoint(lfbdingPoint);
    }

    /*
     * Rfturn thf row bt thf bottom of thf visiblfRfdt.
     *
     * Mby rfturn -1
     */
    privbtf int gftTrbilingRow(Rfdtbnglf visiblfRfdt) {
        Point trbilingPoint;

        if (gftComponfntOrifntbtion().isLfftToRight()) {
            trbilingPoint = nfw Point(visiblfRfdt.x,
                                      visiblfRfdt.y + visiblfRfdt.hfight - 1);
        }
        flsf {
            trbilingPoint = nfw Point(visiblfRfdt.x + visiblfRfdt.width - 1,
                                      visiblfRfdt.y + visiblfRfdt.hfight - 1);
        }
        rfturn rowAtPoint(trbilingPoint);
    }

    /*
     * Rfturn thf dolumn bt thf trbiling fdgf of thf visiblfRfdt.
     *
     * Mby rfturn -1
     */
    privbtf int gftTrbilingCol(Rfdtbnglf visiblfRfdt) {
        Point trbilingPoint;

        if (gftComponfntOrifntbtion().isLfftToRight()) {
            trbilingPoint = nfw Point(visiblfRfdt.x + visiblfRfdt.width - 1,
                                      visiblfRfdt.y);
        }
        flsf {
            trbilingPoint = nfw Point(visiblfRfdt.x, visiblfRfdt.y);
        }
        rfturn dolumnAtPoint(trbilingPoint);
    }

    /*
     * Rfturns thf lfbding fdgf ("bfginning") of thf givfn Rfdtbnglf.
     * For VERTICAL, this is thf top, for lfft-to-right, thf lfft sidf, bnd for
     * right-to-lfft, thf right sidf.
     */
    privbtf int lfbdingEdgf(Rfdtbnglf rfdt, int orifntbtion) {
        if (orifntbtion == SwingConstbnts.VERTICAL) {
            rfturn rfdt.y;
        }
        flsf if (gftComponfntOrifntbtion().isLfftToRight()) {
            rfturn rfdt.x;
        }
        flsf { // Horizontbl, right-to-lfft
            rfturn rfdt.x + rfdt.width;
        }
    }

    /*
     * Rfturns thf trbiling fdgf ("fnd") of thf givfn Rfdtbnglf.
     * For VERTICAL, this is thf bottom, for lfft-to-right, thf right sidf, bnd
     * for right-to-lfft, thf lfft sidf.
     */
    privbtf int trbilingEdgf(Rfdtbnglf rfdt, int orifntbtion) {
        if (orifntbtion == SwingConstbnts.VERTICAL) {
            rfturn rfdt.y + rfdt.hfight;
        }
        flsf if (gftComponfntOrifntbtion().isLfftToRight()) {
            rfturn rfdt.x + rfdt.width;
        }
        flsf { // Horizontbl, right-to-lfft
            rfturn rfdt.x;
        }
    }

    /**
     * Rfturns fblsf if <dodf>butoRfsizfModf</dodf> is sft to
     * <dodf>AUTO_RESIZE_OFF</dodf>, whidh indidbtfs thbt thf
     * width of thf vifwport dofs not dftfrminf thf width
     * of thf tbblf.  Othfrwisf rfturns truf.
     *
     * @rfturn fblsf if <dodf>butoRfsizfModf</dodf> is sft
     *   to <dodf>AUTO_RESIZE_OFF</dodf>, othfrwisf rfturns truf
     * @sff Sdrollbblf#gftSdrollbblfTrbdksVifwportWidth
     */
    publid boolfbn gftSdrollbblfTrbdksVifwportWidth() {
        rfturn !(butoRfsizfModf == AUTO_RESIZE_OFF);
    }

    /**
     * Rfturns {@dodf fblsf} to indidbtf thbt thf hfight of thf vifwport dofs
     * not dftfrminf thf hfight of thf tbblf, unlfss
     * {@dodf gftFillsVifwportHfight} is {@dodf truf} bnd thf prfffrrfd hfight
     * of thf tbblf is smbllfr thbn thf vifwport's hfight.
     *
     * @rfturn {@dodf fblsf} unlfss {@dodf gftFillsVifwportHfight} is
     *         {@dodf truf} bnd thf tbblf nffds to bf strftdhfd to fill
     *         thf vifwport
     * @sff Sdrollbblf#gftSdrollbblfTrbdksVifwportHfight
     * @sff #sftFillsVifwportHfight
     * @sff #gftFillsVifwportHfight
     */
    publid boolfbn gftSdrollbblfTrbdksVifwportHfight() {
        Contbinfr pbrfnt = SwingUtilitifs.gftUnwrbppfdPbrfnt(this);
        rfturn gftFillsVifwportHfight()
               && pbrfnt instbndfof JVifwport
               && pbrfnt.gftHfight() > gftPrfffrrfdSizf().hfight;
    }

    /**
     * Sfts whfthfr or not this tbblf is blwbys mbdf lbrgf fnough
     * to fill thf hfight of bn fndlosing vifwport. If thf prfffrrfd
     * hfight of thf tbblf is smbllfr thbn thf vifwport, thfn thf tbblf
     * will bf strftdhfd to fill thf vifwport. In othfr words, this
     * fnsurfs thf tbblf is nfvfr smbllfr thbn thf vifwport.
     * Thf dffbult for this propfrty is {@dodf fblsf}.
     *
     * @pbrbm fillsVifwportHfight whfthfr or not this tbblf is blwbys
     *        mbdf lbrgf fnough to fill thf hfight of bn fndlosing
     *        vifwport
     * @sff #gftFillsVifwportHfight
     * @sff #gftSdrollbblfTrbdksVifwportHfight
     * @sindf 1.6
     * @bfbninfo
     *      bound: truf
     *      dfsdription: Whfthfr or not this tbblf is blwbys mbdf lbrgf fnough
     *                   to fill thf hfight of bn fndlosing vifwport
     */
    publid void sftFillsVifwportHfight(boolfbn fillsVifwportHfight) {
        boolfbn old = this.fillsVifwportHfight;
        this.fillsVifwportHfight = fillsVifwportHfight;
        rfsizfAndRfpbint();
        firfPropfrtyChbngf("fillsVifwportHfight", old, fillsVifwportHfight);
    }

    /**
     * Rfturns whfthfr or not this tbblf is blwbys mbdf lbrgf fnough
     * to fill thf hfight of bn fndlosing vifwport.
     *
     * @rfturn whfthfr or not this tbblf is blwbys mbdf lbrgf fnough
     *         to fill thf hfight of bn fndlosing vifwport
     * @sff #sftFillsVifwportHfight
     * @sindf 1.6
     */
    publid boolfbn gftFillsVifwportHfight() {
        rfturn fillsVifwportHfight;
    }

//
// Protfdtfd Mfthods
//

    protfdtfd boolfbn prodfssKfyBinding(KfyStrokf ks, KfyEvfnt f,
                                        int dondition, boolfbn prfssfd) {
        boolfbn rftVbluf = supfr.prodfssKfyBinding(ks, f, dondition, prfssfd);

        // Stbrt fditing whfn b kfy is typfd. UI dlbssfs dbn disbblf this bfhbvior
        // by sftting thf dlifnt propfrty JTbblf.butoStbrtsEdit to Boolfbn.FALSE.
        if (!rftVbluf && dondition == WHEN_ANCESTOR_OF_FOCUSED_COMPONENT &&
            isFodusOwnfr() &&
            !Boolfbn.FALSE.fqubls(gftClifntPropfrty("JTbblf.butoStbrtsEdit"))) {
            // Wf do not hbvf b binding for thf fvfnt.
            Componfnt fditorComponfnt = gftEditorComponfnt();
            if (fditorComponfnt == null) {
                // Only bttfmpt to instbll thf fditor on b KEY_PRESSED,
                if (f == null || f.gftID() != KfyEvfnt.KEY_PRESSED) {
                    rfturn fblsf;
                }
                // Don't stbrt whfn just b modififr is prfssfd
                int dodf = f.gftKfyCodf();
                if (dodf == KfyEvfnt.VK_SHIFT || dodf == KfyEvfnt.VK_CONTROL ||
                    dodf == KfyEvfnt.VK_ALT) {
                    rfturn fblsf;
                }
                // Try to instbll thf fditor
                int lfbdRow = gftSflfdtionModfl().gftLfbdSflfdtionIndfx();
                int lfbdColumn = gftColumnModfl().gftSflfdtionModfl().
                                   gftLfbdSflfdtionIndfx();
                if (lfbdRow != -1 && lfbdColumn != -1 && !isEditing()) {
                    if (!fditCfllAt(lfbdRow, lfbdColumn, f)) {
                        rfturn fblsf;
                    }
                }
                fditorComponfnt = gftEditorComponfnt();
                if (fditorComponfnt == null) {
                    rfturn fblsf;
                }
            }
            // If thf fditorComponfnt is b JComponfnt, pbss thf fvfnt to it.
            if (fditorComponfnt instbndfof JComponfnt) {
                rftVbluf = ((JComponfnt)fditorComponfnt).prodfssKfyBinding
                                        (ks, f, WHEN_FOCUSED, prfssfd);
                // If wf hbvf stbrtfd bn fditor bs b rfsult of thf usfr
                // prfssing b kfy bnd thf surrfndfrsFodusOnKfystrokf propfrty
                // is truf, givf thf fodus to thf nfw fditor.
                if (gftSurrfndfrsFodusOnKfystrokf()) {
                    fditorComponfnt.rfqufstFodus();
                }
            }
        }
        rfturn rftVbluf;
    }

    /**
     * Crfbtfs dffbult dfll rfndfrfrs for objfdts, numbfrs, doublfs, dbtfs,
     * boolfbns, bnd idons.
     * @sff jbvbx.swing.tbblf.DffbultTbblfCfllRfndfrfr
     *
     */
    protfdtfd void drfbtfDffbultRfndfrfrs() {
        dffbultRfndfrfrsByColumnClbss = nfw UIDffbults(8, 0.75f);

        // Objfdts
        dffbultRfndfrfrsByColumnClbss.put(Objfdt.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw DffbultTbblfCfllRfndfrfr.UIRfsourdf());

        // Numbfrs
        dffbultRfndfrfrsByColumnClbss.put(Numbfr.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw NumbfrRfndfrfr());

        // Doublfs bnd Flobts
        dffbultRfndfrfrsByColumnClbss.put(Flobt.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw DoublfRfndfrfr());
        dffbultRfndfrfrsByColumnClbss.put(Doublf.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw DoublfRfndfrfr());

        // Dbtfs
        dffbultRfndfrfrsByColumnClbss.put(Dbtf.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw DbtfRfndfrfr());

        // Idons bnd ImbgfIdons
        dffbultRfndfrfrsByColumnClbss.put(Idon.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw IdonRfndfrfr());
        dffbultRfndfrfrsByColumnClbss.put(ImbgfIdon.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw IdonRfndfrfr());

        // Boolfbns
        dffbultRfndfrfrsByColumnClbss.put(Boolfbn.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw BoolfbnRfndfrfr());
    }

    /**
     * Dffbult Rfndfrfrs
     **/
    stbtid dlbss NumbfrRfndfrfr fxtfnds DffbultTbblfCfllRfndfrfr.UIRfsourdf {
        publid NumbfrRfndfrfr() {
            supfr();
            sftHorizontblAlignmfnt(JLbbfl.RIGHT);
        }
    }

    stbtid dlbss DoublfRfndfrfr fxtfnds NumbfrRfndfrfr {
        NumbfrFormbt formbttfr;
        publid DoublfRfndfrfr() { supfr(); }

        publid void sftVbluf(Objfdt vbluf) {
            if (formbttfr == null) {
                formbttfr = NumbfrFormbt.gftInstbndf();
            }
            sftTfxt((vbluf == null) ? "" : formbttfr.formbt(vbluf));
        }
    }

    stbtid dlbss DbtfRfndfrfr fxtfnds DffbultTbblfCfllRfndfrfr.UIRfsourdf {
        DbtfFormbt formbttfr;
        publid DbtfRfndfrfr() { supfr(); }

        publid void sftVbluf(Objfdt vbluf) {
            if (formbttfr==null) {
                formbttfr = DbtfFormbt.gftDbtfInstbndf();
            }
            sftTfxt((vbluf == null) ? "" : formbttfr.formbt(vbluf));
        }
    }

    stbtid dlbss IdonRfndfrfr fxtfnds DffbultTbblfCfllRfndfrfr.UIRfsourdf {
        publid IdonRfndfrfr() {
            supfr();
            sftHorizontblAlignmfnt(JLbbfl.CENTER);
        }
        publid void sftVbluf(Objfdt vbluf) { sftIdon((vbluf instbndfof Idon) ? (Idon)vbluf : null); }
    }


    stbtid dlbss BoolfbnRfndfrfr fxtfnds JChfdkBox implfmfnts TbblfCfllRfndfrfr, UIRfsourdf
    {
        privbtf stbtid finbl Bordfr noFodusBordfr = nfw EmptyBordfr(1, 1, 1, 1);

        publid BoolfbnRfndfrfr() {
            supfr();
            sftHorizontblAlignmfnt(JLbbfl.CENTER);
            sftBordfrPbintfd(truf);
        }

        publid Componfnt gftTbblfCfllRfndfrfrComponfnt(JTbblf tbblf, Objfdt vbluf,
                                                       boolfbn isSflfdtfd, boolfbn hbsFodus, int row, int dolumn) {
            if (isSflfdtfd) {
                sftForfground(tbblf.gftSflfdtionForfground());
                supfr.sftBbdkground(tbblf.gftSflfdtionBbdkground());
            }
            flsf {
                sftForfground(tbblf.gftForfground());
                sftBbdkground(tbblf.gftBbdkground());
            }
            sftSflfdtfd((vbluf != null && ((Boolfbn)vbluf).boolfbnVbluf()));

            if (hbsFodus) {
                sftBordfr(UIMbnbgfr.gftBordfr("Tbblf.fodusCfllHighlightBordfr"));
            } flsf {
                sftBordfr(noFodusBordfr);
            }

            rfturn this;
        }
    }

    /**
     * Crfbtfs dffbult dfll fditors for objfdts, numbfrs, bnd boolfbn vblufs.
     * @sff DffbultCfllEditor
     */
    protfdtfd void drfbtfDffbultEditors() {
        dffbultEditorsByColumnClbss = nfw UIDffbults(3, 0.75f);

        // Objfdts
        dffbultEditorsByColumnClbss.put(Objfdt.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw GfnfridEditor());

        // Numbfrs
        dffbultEditorsByColumnClbss.put(Numbfr.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw NumbfrEditor());

        // Boolfbns
        dffbultEditorsByColumnClbss.put(Boolfbn.dlbss, (UIDffbults.LbzyVbluf)
                t -> nfw BoolfbnEditor());
    }

    /**
     * Dffbult Editors
     */
    stbtid dlbss GfnfridEditor fxtfnds DffbultCfllEditor {

        Clbss<?>[] brgTypfs = nfw Clbss<?>[]{String.dlbss};
        jbvb.lbng.rfflfdt.Construdtor<?> donstrudtor;
        Objfdt vbluf;

        publid GfnfridEditor() {
            supfr(nfw JTfxtFifld());
            gftComponfnt().sftNbmf("Tbblf.fditor");
        }

        publid boolfbn stopCfllEditing() {
            String s = (String)supfr.gftCfllEditorVbluf();
            // Hfrf wf brf dfbling with thf dbsf whfrf b usfr
            // hbs dflftfd thf string vbluf in b dfll, possibly
            // bftfr b fbilfd vblidbtion. Rfturn null, so thbt
            // thfy hbvf thf option to rfplbdf thf vbluf with
            // null or usf fsdbpf to rfstorf thf originbl.
            // For Strings, rfturn "" for bbdkwbrd dompbtibility.
            try {
                if ("".fqubls(s)) {
                    if (donstrudtor.gftDfdlbringClbss() == String.dlbss) {
                        vbluf = s;
                    }
                    rfturn supfr.stopCfllEditing();
                }

                SwingUtilitifs2.dhfdkAddfss(donstrudtor.gftModififrs());
                vbluf = donstrudtor.nfwInstbndf(nfw Objfdt[]{s});
            }
            dbtdh (Exdfption f) {
                ((JComponfnt)gftComponfnt()).sftBordfr(nfw LinfBordfr(Color.rfd));
                rfturn fblsf;
            }
            rfturn supfr.stopCfllEditing();
        }

        publid Componfnt gftTbblfCfllEditorComponfnt(JTbblf tbblf, Objfdt vbluf,
                                                 boolfbn isSflfdtfd,
                                                 int row, int dolumn) {
            this.vbluf = null;
            ((JComponfnt)gftComponfnt()).sftBordfr(nfw LinfBordfr(Color.blbdk));
            try {
                Clbss<?> typf = tbblf.gftColumnClbss(dolumn);
                // Sindf our obligbtion is to produdf b vbluf whidh is
                // bssignbblf for thf rfquirfd typf it is OK to usf thf
                // String donstrudtor for dolumns whidh brf dfdlbrfd
                // to dontbin Objfdts. A String is bn Objfdt.
                if (typf == Objfdt.dlbss) {
                    typf = String.dlbss;
                }
                RfflfdtUtil.dhfdkPbdkbgfAddfss(typf);
                SwingUtilitifs2.dhfdkAddfss(typf.gftModififrs());
                donstrudtor = typf.gftConstrudtor(brgTypfs);
            }
            dbtdh (Exdfption f) {
                rfturn null;
            }
            rfturn supfr.gftTbblfCfllEditorComponfnt(tbblf, vbluf, isSflfdtfd, row, dolumn);
        }

        publid Objfdt gftCfllEditorVbluf() {
            rfturn vbluf;
        }
    }

    stbtid dlbss NumbfrEditor fxtfnds GfnfridEditor {

        publid NumbfrEditor() {
            ((JTfxtFifld)gftComponfnt()).sftHorizontblAlignmfnt(JTfxtFifld.RIGHT);
        }
    }

    stbtid dlbss BoolfbnEditor fxtfnds DffbultCfllEditor {
        publid BoolfbnEditor() {
            supfr(nfw JChfdkBox());
            JChfdkBox dhfdkBox = (JChfdkBox)gftComponfnt();
            dhfdkBox.sftHorizontblAlignmfnt(JChfdkBox.CENTER);
        }
    }

    /**
     * Initiblizfs tbblf propfrtifs to thfir dffbult vblufs.
     */
    protfdtfd void initiblizfLodblVbrs() {
        updbtfSflfdtionOnSort = truf;
        sftOpbquf(truf);
        drfbtfDffbultRfndfrfrs();
        drfbtfDffbultEditors();

        sftTbblfHfbdfr(drfbtfDffbultTbblfHfbdfr());

        sftShowGrid(truf);
        sftAutoRfsizfModf(AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        sftRowHfight(16);
        isRowHfightSft = fblsf;
        sftRowMbrgin(1);
        sftRowSflfdtionAllowfd(truf);
        sftCfllEditor(null);
        sftEditingColumn(-1);
        sftEditingRow(-1);
        sftSurrfndfrsFodusOnKfystrokf(fblsf);
        sftPrfffrrfdSdrollbblfVifwportSizf(nfw Dimfnsion(450, 400));

        // I'm rfgistfrfd to do tool tips so wf dbn drbw tips for thf rfndfrfrs
        ToolTipMbnbgfr toolTipMbnbgfr = ToolTipMbnbgfr.shbrfdInstbndf();
        toolTipMbnbgfr.rfgistfrComponfnt(this);

        sftAutosdrolls(truf);
    }

    /**
     * Rfturns thf dffbult tbblf modfl objfdt, whidh is
     * b <dodf>DffbultTbblfModfl</dodf>.  A subdlbss dbn ovfrridf this
     * mfthod to rfturn b difffrfnt tbblf modfl objfdt.
     *
     * @rfturn thf dffbult tbblf modfl objfdt
     * @sff jbvbx.swing.tbblf.DffbultTbblfModfl
     */
    protfdtfd TbblfModfl drfbtfDffbultDbtbModfl() {
        rfturn nfw DffbultTbblfModfl();
    }

    /**
     * Rfturns thf dffbult dolumn modfl objfdt, whidh is
     * b <dodf>DffbultTbblfColumnModfl</dodf>.  A subdlbss dbn ovfrridf this
     * mfthod to rfturn b difffrfnt dolumn modfl objfdt.
     *
     * @rfturn thf dffbult dolumn modfl objfdt
     * @sff jbvbx.swing.tbblf.DffbultTbblfColumnModfl
     */
    protfdtfd TbblfColumnModfl drfbtfDffbultColumnModfl() {
        rfturn nfw DffbultTbblfColumnModfl();
    }

    /**
     * Rfturns thf dffbult sflfdtion modfl objfdt, whidh is
     * b <dodf>DffbultListSflfdtionModfl</dodf>.  A subdlbss dbn ovfrridf this
     * mfthod to rfturn b difffrfnt sflfdtion modfl objfdt.
     *
     * @rfturn thf dffbult sflfdtion modfl objfdt
     * @sff jbvbx.swing.DffbultListSflfdtionModfl
     */
    protfdtfd ListSflfdtionModfl drfbtfDffbultSflfdtionModfl() {
        rfturn nfw DffbultListSflfdtionModfl();
    }

    /**
     * Rfturns thf dffbult tbblf hfbdfr objfdt, whidh is
     * b <dodf>JTbblfHfbdfr</dodf>.  A subdlbss dbn ovfrridf this
     * mfthod to rfturn b difffrfnt tbblf hfbdfr objfdt.
     *
     * @rfturn thf dffbult tbblf hfbdfr objfdt
     * @sff jbvbx.swing.tbblf.JTbblfHfbdfr
     */
    protfdtfd JTbblfHfbdfr drfbtfDffbultTbblfHfbdfr() {
        rfturn nfw JTbblfHfbdfr(dolumnModfl);
    }

    /**
     * Equivblfnt to <dodf>rfvblidbtf</dodf> followfd by <dodf>rfpbint</dodf>.
     */
    protfdtfd void rfsizfAndRfpbint() {
        rfvblidbtf();
        rfpbint();
    }

    /**
     * Rfturns thf bdtivf dfll fditor, whidh is {@dodf null} if thf tbblf
     * is not durrfntly fditing.
     *
     * @rfturn thf {@dodf TbblfCfllEditor} thbt dofs thf fditing,
     *         or {@dodf null} if thf tbblf is not durrfntly fditing.
     * @sff #dfllEditor
     * @sff #gftCfllEditor(int, int)
     */
    publid TbblfCfllEditor gftCfllEditor() {
        rfturn dfllEditor;
    }

    /**
     * Sfts thf bdtivf dfll fditor.
     *
     * @pbrbm bnEditor thf bdtivf dfll fditor
     * @sff #dfllEditor
     * @bfbninfo
     *  bound: truf
     *  dfsdription: Thf tbblf's bdtivf dfll fditor.
     */
    publid void sftCfllEditor(TbblfCfllEditor bnEditor) {
        TbblfCfllEditor oldEditor = dfllEditor;
        dfllEditor = bnEditor;
        firfPropfrtyChbngf("tbblfCfllEditor", oldEditor, bnEditor);
    }

    /**
     * Sfts thf <dodf>fditingColumn</dodf> vbribblf.
     * @pbrbm bColumn  thf dolumn of thf dfll to bf fditfd
     *
     * @sff #fditingColumn
     */
    publid void sftEditingColumn(int bColumn) {
        fditingColumn = bColumn;
    }

    /**
     * Sfts thf <dodf>fditingRow</dodf> vbribblf.
     * @pbrbm bRow  thf row of thf dfll to bf fditfd
     *
     * @sff #fditingRow
     */
    publid void sftEditingRow(int bRow) {
        fditingRow = bRow;
    }

    /**
     * Rfturns bn bppropribtf rfndfrfr for thf dfll spfdififd by this row bnd
     * dolumn. If thf <dodf>TbblfColumn</dodf> for this dolumn hbs b non-null
     * rfndfrfr, rfturns thbt.  If not, finds thf dlbss of thf dbtb in
     * this dolumn (using <dodf>gftColumnClbss</dodf>)
     * bnd rfturns thf dffbult rfndfrfr for this typf of dbtb.
     * <p>
     * <b>Notf:</b>
     * Throughout thf tbblf pbdkbgf, thf intfrnbl implfmfntbtions blwbys
     * usf this mfthod to providf rfndfrfrs so thbt this dffbult bfhbvior
     * dbn bf sbffly ovfrriddfn by b subdlbss.
     *
     * @pbrbm row       thf row of thf dfll to rfndfr, whfrf 0 is thf first row
     * @pbrbm dolumn    thf dolumn of thf dfll to rfndfr,
     *                  whfrf 0 is thf first dolumn
     * @rfturn thf bssignfd rfndfrfr; if <dodf>null</dodf>
     *                  rfturns thf dffbult rfndfrfr
     *                  for this typf of objfdt
     * @sff jbvbx.swing.tbblf.DffbultTbblfCfllRfndfrfr
     * @sff jbvbx.swing.tbblf.TbblfColumn#sftCfllRfndfrfr
     * @sff #sftDffbultRfndfrfr
     */
    publid TbblfCfllRfndfrfr gftCfllRfndfrfr(int row, int dolumn) {
        TbblfColumn tbblfColumn = gftColumnModfl().gftColumn(dolumn);
        TbblfCfllRfndfrfr rfndfrfr = tbblfColumn.gftCfllRfndfrfr();
        if (rfndfrfr == null) {
            rfndfrfr = gftDffbultRfndfrfr(gftColumnClbss(dolumn));
        }
        rfturn rfndfrfr;
    }

    /**
     * Prfpbrfs thf rfndfrfr by qufrying thf dbtb modfl for thf
     * vbluf bnd sflfdtion stbtf
     * of thf dfll bt <dodf>row</dodf>, <dodf>dolumn</dodf>.
     * Rfturns thf domponfnt (mby bf b <dodf>Componfnt</dodf>
     * or b <dodf>JComponfnt</dodf>) undfr thf fvfnt lodbtion.
     * <p>
     * During b printing opfrbtion, this mfthod will donfigurf thf
     * rfndfrfr without indidbting sflfdtion or fodus, to prfvfnt
     * thfm from bppfbring in thf printfd output. To do othfr
     * dustomizbtions bbsfd on whfthfr or not thf tbblf is bfing
     * printfd, you dbn dhfdk thf vbluf of
     * {@link jbvbx.swing.JComponfnt#isPbintingForPrint()}, fithfr hfrf
     * or within dustom rfndfrfrs.
     * <p>
     * <b>Notf:</b>
     * Throughout thf tbblf pbdkbgf, thf intfrnbl implfmfntbtions blwbys
     * usf this mfthod to prfpbrf rfndfrfrs so thbt this dffbult bfhbvior
     * dbn bf sbffly ovfrriddfn by b subdlbss.
     *
     * @pbrbm rfndfrfr  thf <dodf>TbblfCfllRfndfrfr</dodf> to prfpbrf
     * @pbrbm row       thf row of thf dfll to rfndfr, whfrf 0 is thf first row
     * @pbrbm dolumn    thf dolumn of thf dfll to rfndfr,
     *                  whfrf 0 is thf first dolumn
     * @rfturn          thf <dodf>Componfnt</dodf> undfr thf fvfnt lodbtion
     */
    publid Componfnt prfpbrfRfndfrfr(TbblfCfllRfndfrfr rfndfrfr, int row, int dolumn) {
        Objfdt vbluf = gftVblufAt(row, dolumn);

        boolfbn isSflfdtfd = fblsf;
        boolfbn hbsFodus = fblsf;

        // Only indidbtf thf sflfdtion bnd fodusfd dfll if not printing
        if (!isPbintingForPrint()) {
            isSflfdtfd = isCfllSflfdtfd(row, dolumn);

            boolfbn rowIsLfbd =
                (sflfdtionModfl.gftLfbdSflfdtionIndfx() == row);
            boolfbn dolIsLfbd =
                (dolumnModfl.gftSflfdtionModfl().gftLfbdSflfdtionIndfx() == dolumn);

            hbsFodus = (rowIsLfbd && dolIsLfbd) && isFodusOwnfr();
        }

        rfturn rfndfrfr.gftTbblfCfllRfndfrfrComponfnt(this, vbluf,
                                                      isSflfdtfd, hbsFodus,
                                                      row, dolumn);
    }

    /**
     * Rfturns bn bppropribtf fditor for thf dfll spfdififd by
     * <dodf>row</dodf> bnd <dodf>dolumn</dodf>. If thf
     * <dodf>TbblfColumn</dodf> for this dolumn hbs b non-null fditor,
     * rfturns thbt.  If not, finds thf dlbss of thf dbtb in this
     * dolumn (using <dodf>gftColumnClbss</dodf>)
     * bnd rfturns thf dffbult fditor for this typf of dbtb.
     * <p>
     * <b>Notf:</b>
     * Throughout thf tbblf pbdkbgf, thf intfrnbl implfmfntbtions blwbys
     * usf this mfthod to providf fditors so thbt this dffbult bfhbvior
     * dbn bf sbffly ovfrriddfn by b subdlbss.
     *
     * @pbrbm row       thf row of thf dfll to fdit, whfrf 0 is thf first row
     * @pbrbm dolumn    thf dolumn of thf dfll to fdit,
     *                  whfrf 0 is thf first dolumn
     * @rfturn          thf fditor for this dfll;
     *                  if <dodf>null</dodf> rfturn thf dffbult fditor for
     *                  this typf of dfll
     * @sff DffbultCfllEditor
     */
    publid TbblfCfllEditor gftCfllEditor(int row, int dolumn) {
        TbblfColumn tbblfColumn = gftColumnModfl().gftColumn(dolumn);
        TbblfCfllEditor fditor = tbblfColumn.gftCfllEditor();
        if (fditor == null) {
            fditor = gftDffbultEditor(gftColumnClbss(dolumn));
        }
        rfturn fditor;
    }


    /**
     * Prfpbrfs thf fditor by qufrying thf dbtb modfl for thf vbluf bnd
     * sflfdtion stbtf of thf dfll bt <dodf>row</dodf>, <dodf>dolumn</dodf>.
     * <p>
     * <b>Notf:</b>
     * Throughout thf tbblf pbdkbgf, thf intfrnbl implfmfntbtions blwbys
     * usf this mfthod to prfpbrf fditors so thbt this dffbult bfhbvior
     * dbn bf sbffly ovfrriddfn by b subdlbss.
     *
     * @pbrbm fditor  thf <dodf>TbblfCfllEditor</dodf> to sft up
     * @pbrbm row     thf row of thf dfll to fdit,
     *                whfrf 0 is thf first row
     * @pbrbm dolumn  thf dolumn of thf dfll to fdit,
     *                whfrf 0 is thf first dolumn
     * @rfturn thf <dodf>Componfnt</dodf> bfing fditfd
     */
    publid Componfnt prfpbrfEditor(TbblfCfllEditor fditor, int row, int dolumn) {
        Objfdt vbluf = gftVblufAt(row, dolumn);
        boolfbn isSflfdtfd = isCfllSflfdtfd(row, dolumn);
        Componfnt domp = fditor.gftTbblfCfllEditorComponfnt(this, vbluf, isSflfdtfd,
                                                  row, dolumn);
        if (domp instbndfof JComponfnt) {
            JComponfnt jComp = (JComponfnt)domp;
            if (jComp.gftNfxtFodusbblfComponfnt() == null) {
                jComp.sftNfxtFodusbblfComponfnt(this);
            }
        }
        rfturn domp;
    }

    /**
     * Disdbrds thf fditor objfdt bnd frffs thf rfbl fstbtf it usfd for
     * dfll rfndfring.
     */
    publid void rfmovfEditor() {
        KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
            rfmovfPropfrtyChbngfListfnfr("pfrmbnfntFodusOwnfr", fditorRfmovfr);
        fditorRfmovfr = null;

        TbblfCfllEditor fditor = gftCfllEditor();
        if(fditor != null) {
            fditor.rfmovfCfllEditorListfnfr(this);
            if (fditorComp != null) {
                Componfnt fodusOwnfr =
                        KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().gftFodusOwnfr();
                boolfbn isFodusOwnfrInThfTbblf = fodusOwnfr != null?
                        SwingUtilitifs.isDfsdfndingFrom(fodusOwnfr, this):fblsf;
                rfmovf(fditorComp);
                if(isFodusOwnfrInThfTbblf) {
                    rfqufstFodusInWindow();
                }
            }

            Rfdtbnglf dfllRfdt = gftCfllRfdt(fditingRow, fditingColumn, fblsf);

            sftCfllEditor(null);
            sftEditingColumn(-1);
            sftEditingRow(-1);
            fditorComp = null;

            rfpbint(dfllRfdt);
        }
    }

//
// Sfriblizbtion
//

    /**
     * Sff rfbdObjfdt() bnd writfObjfdt() in JComponfnt for morf
     * informbtion bbout sfriblizbtion in Swing.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
        s.dffbultWritfObjfdt();
        if (gftUIClbssID().fqubls(uiClbssID)) {
            bytf dount = JComponfnt.gftWritfObjCountfr(this);
            JComponfnt.sftWritfObjCountfr(this, --dount);
            if (dount == 0 && ui != null) {
                ui.instbllUI(this);
            }
        }
    }

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        throws IOExdfption, ClbssNotFoundExdfption
    {
        s.dffbultRfbdObjfdt();
        if ((ui != null) && (gftUIClbssID().fqubls(uiClbssID))) {
            ui.instbllUI(this);
        }
        drfbtfDffbultRfndfrfrs();
        drfbtfDffbultEditors();

        // If ToolTipTfxt != null, thfn thf tooltip hbs blrfbdy bffn
        // rfgistfrfd by JComponfnt.rfbdObjfdt() bnd wf don't wbnt
        // to rf-rfgistfr hfrf
        if (gftToolTipTfxt() == null) {
            ToolTipMbnbgfr.shbrfdInstbndf().rfgistfrComponfnt(this);
         }
    }

    /* Cbllfd from thf JComponfnt's EnbblfSfriblizbtionFodusListfnfr to
     * do bny Swing-spfdifid prf-sfriblizbtion donfigurbtion.
     */
    void dompWritfObjfdtNotify() {
        supfr.dompWritfObjfdtNotify();
        // If ToolTipTfxt != null, thfn thf tooltip hbs blrfbdy bffn
        // unrfgistfrfd by JComponfnt.dompWritfObjfdtNotify()
        if (gftToolTipTfxt() == null) {
            ToolTipMbnbgfr.shbrfdInstbndf().unrfgistfrComponfnt(this);
        }
    }

    /**
     * Rfturns b string rfprfsfntbtion of this tbblf. This mfthod
     * is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of this tbblf
     */
    protfdtfd String pbrbmString() {
        String gridColorString = (gridColor != null ?
                                  gridColor.toString() : "");
        String showHorizontblLinfsString = (showHorizontblLinfs ?
                                            "truf" : "fblsf");
        String showVfrtidblLinfsString = (showVfrtidblLinfs ?
                                          "truf" : "fblsf");
        String butoRfsizfModfString;
        if (butoRfsizfModf == AUTO_RESIZE_OFF) {
            butoRfsizfModfString = "AUTO_RESIZE_OFF";
        } flsf if (butoRfsizfModf == AUTO_RESIZE_NEXT_COLUMN) {
            butoRfsizfModfString = "AUTO_RESIZE_NEXT_COLUMN";
        } flsf if (butoRfsizfModf == AUTO_RESIZE_SUBSEQUENT_COLUMNS) {
            butoRfsizfModfString = "AUTO_RESIZE_SUBSEQUENT_COLUMNS";
        } flsf if (butoRfsizfModf == AUTO_RESIZE_LAST_COLUMN) {
            butoRfsizfModfString = "AUTO_RESIZE_LAST_COLUMN";
        } flsf if (butoRfsizfModf == AUTO_RESIZE_ALL_COLUMNS)  {
            butoRfsizfModfString = "AUTO_RESIZE_ALL_COLUMNS";
        } flsf butoRfsizfModfString = "";
        String butoCrfbtfColumnsFromModflString = (butoCrfbtfColumnsFromModfl ?
                                                   "truf" : "fblsf");
        String prfffrrfdVifwportSizfString = (prfffrrfdVifwportSizf != null ?
                                              prfffrrfdVifwportSizf.toString()
                                              : "");
        String rowSflfdtionAllowfdString = (rowSflfdtionAllowfd ?
                                            "truf" : "fblsf");
        String dfllSflfdtionEnbblfdString = (dfllSflfdtionEnbblfd ?
                                            "truf" : "fblsf");
        String sflfdtionForfgroundString = (sflfdtionForfground != null ?
                                            sflfdtionForfground.toString() :
                                            "");
        String sflfdtionBbdkgroundString = (sflfdtionBbdkground != null ?
                                            sflfdtionBbdkground.toString() :
                                            "");

        rfturn supfr.pbrbmString() +
        ",butoCrfbtfColumnsFromModfl=" + butoCrfbtfColumnsFromModflString +
        ",butoRfsizfModf=" + butoRfsizfModfString +
        ",dfllSflfdtionEnbblfd=" + dfllSflfdtionEnbblfdString +
        ",fditingColumn=" + fditingColumn +
        ",fditingRow=" + fditingRow +
        ",gridColor=" + gridColorString +
        ",prfffrrfdVifwportSizf=" + prfffrrfdVifwportSizfString +
        ",rowHfight=" + rowHfight +
        ",rowMbrgin=" + rowMbrgin +
        ",rowSflfdtionAllowfd=" + rowSflfdtionAllowfdString +
        ",sflfdtionBbdkground=" + sflfdtionBbdkgroundString +
        ",sflfdtionForfground=" + sflfdtionForfgroundString +
        ",showHorizontblLinfs=" + showHorizontblLinfsString +
        ",showVfrtidblLinfs=" + showVfrtidblLinfsString;
    }

    // This dlbss trbdks dhbngfs in thf kfybobrd fodus stbtf. It is usfd
    // whfn thf JTbblf is fditing to dftfrminf whfn to dbndfl thf fdit.
    // If fodus switdhfs to b domponfnt outsidf of thf jtbblf, but in thf
    // sbmf window, this will dbndfl fditing.
    dlbss CfllEditorRfmovfr implfmfnts PropfrtyChbngfListfnfr {
        KfybobrdFodusMbnbgfr fodusMbnbgfr;

        publid CfllEditorRfmovfr(KfybobrdFodusMbnbgfr fm) {
            this.fodusMbnbgfr = fm;
        }

        publid void propfrtyChbngf(PropfrtyChbngfEvfnt fv) {
            if (!isEditing() || gftClifntPropfrty("tfrminbtfEditOnFodusLost") != Boolfbn.TRUE) {
                rfturn;
            }

            Componfnt d = fodusMbnbgfr.gftPfrmbnfntFodusOwnfr();
            whilf (d != null) {
                if (d == JTbblf.this) {
                    // fodus rfmbins insidf thf tbblf
                    rfturn;
                } flsf if ((d instbndfof Window) ||
                           (d instbndfof Applft && d.gftPbrfnt() == null)) {
                    if (d == SwingUtilitifs.gftRoot(JTbblf.this)) {
                        if (!gftCfllEditor().stopCfllEditing()) {
                            gftCfllEditor().dbndflCfllEditing();
                        }
                    }
                    brfbk;
                }
                d = d.gftPbrfnt();
            }
        }
    }

/////////////////
// Printing Support
/////////////////

    /**
     * A donvfnifndf mfthod thbt displbys b printing diblog, bnd thfn prints
     * this <dodf>JTbblf</dodf> in modf <dodf>PrintModf.FIT_WIDTH</dodf>,
     * with no hfbdfr or footfr tfxt. A modbl progrfss diblog, with bn bbort
     * option, will bf shown for thf durbtion of printing.
     * <p>
     * Notf: In hfbdlfss modf, no diblogs brf shown bnd printing
     * oddurs on thf dffbult printfr.
     *
     * @rfturn truf, unlfss printing is dbndfllfd by thf usfr
     * @throws SfdurityExdfption if this thrfbd is not bllowfd to
     *                           initibtf b print job rfqufst
     * @throws PrintfrExdfption if bn frror in thf print systfm dbusfs thf job
     *                          to bf bbortfd
     * @sff #print(JTbblf.PrintModf, MfssbgfFormbt, MfssbgfFormbt,
     *             boolfbn, PrintRfqufstAttributfSft, boolfbn, PrintSfrvidf)
     * @sff #gftPrintbblf
     *
     * @sindf 1.5
     */
    publid boolfbn print() throws PrintfrExdfption {

        rfturn print(PrintModf.FIT_WIDTH);
    }

    /**
     * A donvfnifndf mfthod thbt displbys b printing diblog, bnd thfn prints
     * this <dodf>JTbblf</dodf> in thf givfn printing modf,
     * with no hfbdfr or footfr tfxt. A modbl progrfss diblog, with bn bbort
     * option, will bf shown for thf durbtion of printing.
     * <p>
     * Notf: In hfbdlfss modf, no diblogs brf shown bnd printing
     * oddurs on thf dffbult printfr.
     *
     * @pbrbm  printModf        thf printing modf thbt thf printbblf should usf
     * @rfturn truf, unlfss printing is dbndfllfd by thf usfr
     * @throws SfdurityExdfption if this thrfbd is not bllowfd to
     *                           initibtf b print job rfqufst
     * @throws PrintfrExdfption if bn frror in thf print systfm dbusfs thf job
     *                          to bf bbortfd
     * @sff #print(JTbblf.PrintModf, MfssbgfFormbt, MfssbgfFormbt,
     *             boolfbn, PrintRfqufstAttributfSft, boolfbn, PrintSfrvidf)
     * @sff #gftPrintbblf
     *
     * @sindf 1.5
     */
    publid boolfbn print(PrintModf printModf) throws PrintfrExdfption {

        rfturn print(printModf, null, null);
    }

    /**
     * A donvfnifndf mfthod thbt displbys b printing diblog, bnd thfn prints
     * this <dodf>JTbblf</dodf> in thf givfn printing modf,
     * with thf spfdififd hfbdfr bnd footfr tfxt. A modbl progrfss diblog,
     * with bn bbort option, will bf shown for thf durbtion of printing.
     * <p>
     * Notf: In hfbdlfss modf, no diblogs brf shown bnd printing
     * oddurs on thf dffbult printfr.
     *
     * @pbrbm  printModf        thf printing modf thbt thf printbblf should usf
     * @pbrbm  hfbdfrFormbt     b <dodf>MfssbgfFormbt</dodf> spfdifying thf tfxt
     *                          to bf usfd in printing b hfbdfr,
     *                          or null for nonf
     * @pbrbm  footfrFormbt     b <dodf>MfssbgfFormbt</dodf> spfdifying thf tfxt
     *                          to bf usfd in printing b footfr,
     *                          or null for nonf
     * @rfturn truf, unlfss printing is dbndfllfd by thf usfr
     * @throws SfdurityExdfption if this thrfbd is not bllowfd to
     *                           initibtf b print job rfqufst
     * @throws PrintfrExdfption if bn frror in thf print systfm dbusfs thf job
     *                          to bf bbortfd
     * @sff #print(JTbblf.PrintModf, MfssbgfFormbt, MfssbgfFormbt,
     *             boolfbn, PrintRfqufstAttributfSft, boolfbn, PrintSfrvidf)
     * @sff #gftPrintbblf
     *
     * @sindf 1.5
     */
    publid boolfbn print(PrintModf printModf,
                         MfssbgfFormbt hfbdfrFormbt,
                         MfssbgfFormbt footfrFormbt) throws PrintfrExdfption {

        boolfbn showDiblogs = !GrbphidsEnvironmfnt.isHfbdlfss();
        rfturn print(printModf, hfbdfrFormbt, footfrFormbt,
                     showDiblogs, null, showDiblogs);
    }

    /**
     * Prints this tbblf, bs spfdififd by thf fully ffbturfd
     * {@link #print(JTbblf.PrintModf, MfssbgfFormbt, MfssbgfFormbt,
     * boolfbn, PrintRfqufstAttributfSft, boolfbn, PrintSfrvidf) print}
     * mfthod, with thf dffbult printfr spfdififd bs thf print sfrvidf.
     *
     * @pbrbm  printModf        thf printing modf thbt thf printbblf should usf
     * @pbrbm  hfbdfrFormbt     b <dodf>MfssbgfFormbt</dodf> spfdifying thf tfxt
     *                          to bf usfd in printing b hfbdfr,
     *                          or <dodf>null</dodf> for nonf
     * @pbrbm  footfrFormbt     b <dodf>MfssbgfFormbt</dodf> spfdifying thf tfxt
     *                          to bf usfd in printing b footfr,
     *                          or <dodf>null</dodf> for nonf
     * @pbrbm  showPrintDiblog  whfthfr or not to displby b print diblog
     * @pbrbm  bttr             b <dodf>PrintRfqufstAttributfSft</dodf>
     *                          spfdifying bny printing bttributfs,
     *                          or <dodf>null</dodf> for nonf
     * @pbrbm  intfrbdtivf      whfthfr or not to print in bn intfrbdtivf modf
     * @rfturn truf, unlfss printing is dbndfllfd by thf usfr
     * @throws HfbdlfssExdfption if thf mfthod is bskfd to show b printing
     *                           diblog or run intfrbdtivfly, bnd
     *                           <dodf>GrbphidsEnvironmfnt.isHfbdlfss</dodf>
     *                           rfturns <dodf>truf</dodf>
     * @throws SfdurityExdfption if this thrfbd is not bllowfd to
     *                           initibtf b print job rfqufst
     * @throws PrintfrExdfption if bn frror in thf print systfm dbusfs thf job
     *                          to bf bbortfd
     * @sff #print(JTbblf.PrintModf, MfssbgfFormbt, MfssbgfFormbt,
     *             boolfbn, PrintRfqufstAttributfSft, boolfbn, PrintSfrvidf)
     * @sff #gftPrintbblf
     *
     * @sindf 1.5
     */
    publid boolfbn print(PrintModf printModf,
                         MfssbgfFormbt hfbdfrFormbt,
                         MfssbgfFormbt footfrFormbt,
                         boolfbn showPrintDiblog,
                         PrintRfqufstAttributfSft bttr,
                         boolfbn intfrbdtivf) throws PrintfrExdfption,
                                                     HfbdlfssExdfption {

        rfturn print(printModf,
                     hfbdfrFormbt,
                     footfrFormbt,
                     showPrintDiblog,
                     bttr,
                     intfrbdtivf,
                     null);
    }

    /**
     * Prints this <dodf>JTbblf</dodf>. Tbkfs stfps thbt thf mbjority of
     * dfvflopfrs would tbkf in ordfr to print b <dodf>JTbblf</dodf>.
     * In short, it prfpbrfs thf tbblf, dblls <dodf>gftPrintbblf</dodf> to
     * fftdh bn bppropribtf <dodf>Printbblf</dodf>, bnd thfn sfnds it to thf
     * printfr.
     * <p>
     * A <dodf>boolfbn</dodf> pbrbmftfr bllows you to spfdify whfthfr or not
     * b printing diblog is displbyfd to thf usfr. Whfn it is, thf usfr mby
     * usf thf diblog to dhbngf thf dfstinbtion printfr or printing bttributfs,
     * or fvfn to dbndfl thf print. Anothfr two pbrbmftfrs bllow for b
     * <dodf>PrintSfrvidf</dodf> bnd printing bttributfs to bf spfdififd.
     * Thfsf pbrbmftfrs dbn bf usfd fithfr to providf initibl vblufs for thf
     * print diblog, or to spfdify vblufs whfn thf diblog is not shown.
     * <p>
     * A sfdond <dodf>boolfbn</dodf> pbrbmftfr bllows you to spfdify whfthfr
     * or not to pfrform printing in bn intfrbdtivf modf. If <dodf>truf</dodf>,
     * b modbl progrfss diblog, with bn bbort option, is displbyfd for thf
     * durbtion of printing . This diblog blso prfvfnts bny usfr bdtion whidh
     * mby bfffdt thf tbblf. Howfvfr, it dbn not prfvfnt thf tbblf from bfing
     * modififd by dodf (for fxbmplf, bnothfr thrfbd thbt posts updbtfs using
     * <dodf>SwingUtilitifs.invokfLbtfr</dodf>). It is thfrfforf thf
     * rfsponsibility of thf dfvflopfr to fnsurf thbt no othfr dodf modififs
     * thf tbblf in bny wby during printing (invblid modifidbtions indludf
     * dhbngfs in: sizf, rfndfrfrs, or undfrlying dbtb). Printing bfhbvior is
     * undffinfd whfn thf tbblf is dhbngfd during printing.
     * <p>
     * If <dodf>fblsf</dodf> is spfdififd for this pbrbmftfr, no diblog will
     * bf displbyfd bnd printing will bfgin immfdibtfly on thf fvfnt-dispbtdh
     * thrfbd. This blodks bny othfr fvfnts, indluding rfpbints, from bfing
     * prodfssfd until printing is domplftf. Although this ffffdtivfly prfvfnts
     * thf tbblf from bfing dhbngfd, it dofsn't providf b good usfr fxpfrifndf.
     * For this rfbson, spfdifying <dodf>fblsf</dodf> is only rfdommfndfd whfn
     * printing from bn bpplidbtion with no visiblf GUI.
     * <p>
     * Notf: Attfmpting to show thf printing diblog or run intfrbdtivfly, whilf
     * in hfbdlfss modf, will rfsult in b <dodf>HfbdlfssExdfption</dodf>.
     * <p>
     * Bfforf fftdhing thf printbblf, this mfthod will grbdffully tfrminbtf
     * fditing, if nfdfssbry, to prfvfnt bn fditor from showing in thf printfd
     * rfsult. Additionblly, <dodf>JTbblf</dodf> will prfpbrf its rfndfrfrs
     * during printing sudh thbt sflfdtion bnd fodus brf not indidbtfd.
     * As fbr bs dustomizing furthfr how thf tbblf looks in thf printout,
     * dfvflopfrs dbn providf dustom rfndfrfrs or pbint dodf thbt donditionblizf
     * on thf vbluf of {@link jbvbx.swing.JComponfnt#isPbintingForPrint()}.
     * <p>
     * Sff {@link #gftPrintbblf} for morf dfsdription on how thf tbblf is
     * printfd.
     *
     * @pbrbm  printModf        thf printing modf thbt thf printbblf should usf
     * @pbrbm  hfbdfrFormbt     b <dodf>MfssbgfFormbt</dodf> spfdifying thf tfxt
     *                          to bf usfd in printing b hfbdfr,
     *                          or <dodf>null</dodf> for nonf
     * @pbrbm  footfrFormbt     b <dodf>MfssbgfFormbt</dodf> spfdifying thf tfxt
     *                          to bf usfd in printing b footfr,
     *                          or <dodf>null</dodf> for nonf
     * @pbrbm  showPrintDiblog  whfthfr or not to displby b print diblog
     * @pbrbm  bttr             b <dodf>PrintRfqufstAttributfSft</dodf>
     *                          spfdifying bny printing bttributfs,
     *                          or <dodf>null</dodf> for nonf
     * @pbrbm  intfrbdtivf      whfthfr or not to print in bn intfrbdtivf modf
     * @pbrbm  sfrvidf          thf dfstinbtion <dodf>PrintSfrvidf</dodf>,
     *                          or <dodf>null</dodf> to usf thf dffbult printfr
     * @rfturn truf, unlfss printing is dbndfllfd by thf usfr
     * @throws HfbdlfssExdfption if thf mfthod is bskfd to show b printing
     *                           diblog or run intfrbdtivfly, bnd
     *                           <dodf>GrbphidsEnvironmfnt.isHfbdlfss</dodf>
     *                           rfturns <dodf>truf</dodf>
     * @throws  SfdurityExdfption if b sfdurity mbnbgfr fxists bnd its
     *          {@link jbvb.lbng.SfdurityMbnbgfr#dhfdkPrintJobAddfss}
     *          mfthod disbllows this thrfbd from drfbting b print job rfqufst
     * @throws PrintfrExdfption if bn frror in thf print systfm dbusfs thf job
     *                          to bf bbortfd
     * @sff #gftPrintbblf
     * @sff jbvb.bwt.GrbphidsEnvironmfnt#isHfbdlfss
     *
     * @sindf 1.6
     */
    publid boolfbn print(PrintModf printModf,
                         MfssbgfFormbt hfbdfrFormbt,
                         MfssbgfFormbt footfrFormbt,
                         boolfbn showPrintDiblog,
                         PrintRfqufstAttributfSft bttr,
                         boolfbn intfrbdtivf,
                         PrintSfrvidf sfrvidf) throws PrintfrExdfption,
                                                      HfbdlfssExdfption {

        // domplbin fbrly if bn invblid pbrbmftfr is spfdififd for hfbdlfss modf
        boolfbn isHfbdlfss = GrbphidsEnvironmfnt.isHfbdlfss();
        if (isHfbdlfss) {
            if (showPrintDiblog) {
                throw nfw HfbdlfssExdfption("Cbn't show print diblog.");
            }

            if (intfrbdtivf) {
                throw nfw HfbdlfssExdfption("Cbn't run intfrbdtivfly.");
            }
        }

        // Gft b PrintfrJob.
        // Do this bfforf bnything with sidf-ffffdts sindf it mby throw b
        // sfdurity fxdfption - in whidh dbsf wf don't wbnt to do bnything flsf.
        finbl PrintfrJob job = PrintfrJob.gftPrintfrJob();

        if (isEditing()) {
            // try to stop dfll fditing, bnd fbiling thbt, dbndfl it
            if (!gftCfllEditor().stopCfllEditing()) {
                gftCfllEditor().dbndflCfllEditing();
            }
        }

        if (bttr == null) {
            bttr = nfw HbshPrintRfqufstAttributfSft();
        }

        finbl PrintingStbtus printingStbtus;

         // fftdh thf Printbblf
        Printbblf printbblf =
             gftPrintbblf(printModf, hfbdfrFormbt, footfrFormbt);

        if (intfrbdtivf) {
            // wrbp thf Printbblf so thbt wf dbn print on bnothfr thrfbd
            printbblf = nfw ThrfbdSbffPrintbblf(printbblf);
            printingStbtus = PrintingStbtus.drfbtfPrintingStbtus(this, job);
            printbblf = printingStbtus.drfbtfNotifidbtionPrintbblf(printbblf);
        } flsf {
            // to plfbsf dompilfr
            printingStbtus = null;
        }

        // sft thf printbblf on thf PrintfrJob
        job.sftPrintbblf(printbblf);

        // if spfdififd, sft thf PrintSfrvidf on thf PrintfrJob
        if (sfrvidf != null) {
            job.sftPrintSfrvidf(sfrvidf);
        }

        // if rfqufstfd, show thf print diblog
        if (showPrintDiblog && !job.printDiblog(bttr)) {
            // thf usfr dbndfllfd thf print diblog
            rfturn fblsf;
        }

        // if not intfrbdtivf, just print on this thrfbd (no diblog)
        if (!intfrbdtivf) {
            // do thf printing
            job.print(bttr);

            // wf'rf donf
            rfturn truf;
        }

        // mbkf surf this is dlfbr sindf wf'll dhfdk it bftfr
        printError = null;

        // to syndhronizf on
        finbl Objfdt lodk = nfw Objfdt();

        // dopifd so wf dbn bddfss from thf innfr dlbss
        finbl PrintRfqufstAttributfSft dopyAttr = bttr;

        // this runnbblf will bf usfd to do thf printing
        // (bnd sbvf bny throwbblfs) on bnothfr thrfbd
        Runnbblf runnbblf = nfw Runnbblf() {
            publid void run() {
                try {
                    // do thf printing
                    job.print(dopyAttr);
                } dbtdh (Throwbblf t) {
                    // sbvf bny Throwbblf to bf rfthrown
                    syndhronizfd(lodk) {
                        printError = t;
                    }
                } finblly {
                    // wf'rf finishfd - hidf thf diblog
                    printingStbtus.disposf();
                }
            }
        };

        // stbrt printing on bnothfr thrfbd
        Thrfbd th = nfw Thrfbd(runnbblf);
        th.stbrt();

        printingStbtus.showModbl(truf);

        // look for bny frror thbt thf printing mby hbvf gfnfrbtfd
        Throwbblf pf;
        syndhronizfd(lodk) {
            pf = printError;
            printError = null;
        }

        // dhfdk thf typf of frror bnd hbndlf it
        if (pf != null) {
            // b subdlbss of PrintfrExdfption mfbning thf job wbs bbortfd,
            // in this dbsf, by thf usfr
            if (pf instbndfof PrintfrAbortExdfption) {
                rfturn fblsf;
            } flsf if (pf instbndfof PrintfrExdfption) {
                throw (PrintfrExdfption)pf;
            } flsf if (pf instbndfof RuntimfExdfption) {
                throw (RuntimfExdfption)pf;
            } flsf if (pf instbndfof Error) {
                throw (Error)pf;
            }

            // dbn not hbppfn
            throw nfw AssfrtionError(pf);
        }

        rfturn truf;
    }

    /**
     * Rfturn b <dodf>Printbblf</dodf> for usf in printing this JTbblf.
     * <p>
     * This mfthod is mfbnt for thosf wishing to dustomizf thf dffbult
     * <dodf>Printbblf</dodf> implfmfntbtion usfd by <dodf>JTbblf</dodf>'s
     * <dodf>print</dodf> mfthods. Dfvflopfrs wbnting simply to print thf tbblf
     * should usf onf of thosf mfthods dirfdtly.
     * <p>
     * Thf <dodf>Printbblf</dodf> dbn bf rfqufstfd in onf of two printing modfs.
     * In both modfs, it sprfbds tbblf rows nbturblly in sfqufndf bdross
     * multiplf pbgfs, fitting bs mbny rows bs possiblf pfr pbgf.
     * <dodf>PrintModf.NORMAL</dodf> spfdififs thbt thf tbblf bf
     * printfd bt its durrfnt sizf. In this modf, thfrf mby bf b nffd to sprfbd
     * dolumns bdross pbgfs in b similbr mbnnfr to thbt of thf rows. Whfn thf
     * nffd brisfs, dolumns brf distributfd in bn ordfr donsistfnt with thf
     * tbblf's <dodf>ComponfntOrifntbtion</dodf>.
     * <dodf>PrintModf.FIT_WIDTH</dodf> spfdififs thbt thf output bf
     * sdblfd smbllfr, if nfdfssbry, to fit thf tbblf's fntirf width
     * (bnd thfrfby bll dolumns) on fbdh pbgf. Width bnd hfight brf sdblfd
     * fqublly, mbintbining thf bspfdt rbtio of thf output.
     * <p>
     * Thf <dodf>Printbblf</dodf> hfbds thf portion of tbblf on fbdh pbgf
     * with thf bppropribtf sfdtion from thf tbblf's <dodf>JTbblfHfbdfr</dodf>,
     * if it hbs onf.
     * <p>
     * Hfbdfr bnd footfr tfxt dbn bf bddfd to thf output by providing
     * <dodf>MfssbgfFormbt</dodf> brgumfnts. Thf printing dodf rfqufsts
     * Strings from thf formbts, providing b singlf itfm whidh mby bf indludfd
     * in thf formbttfd string: bn <dodf>Intfgfr</dodf> rfprfsfnting thf durrfnt
     * pbgf numbfr.
     * <p>
     * You brf fndourbgfd to rfbd thf dodumfntbtion for
     * <dodf>MfssbgfFormbt</dodf> bs somf dhbrbdtfrs, sudh bs singlf-quotf,
     * brf spfdibl bnd nffd to bf fsdbpfd.
     * <p>
     * Hfrf's bn fxbmplf of drfbting b <dodf>MfssbgfFormbt</dodf> thbt dbn bf
     * usfd to print "Dukf's Tbblf: Pbgf - " bnd thf durrfnt pbgf numbfr:
     *
     * <prf>
     *     // notidf thf fsdbping of thf singlf quotf
     *     // notidf how thf pbgf numbfr is indludfd with "{0}"
     *     MfssbgfFormbt formbt = nfw MfssbgfFormbt("Dukf''s Tbblf: Pbgf - {0}");
     * </prf>
     * <p>
     * Thf <dodf>Printbblf</dodf> donstrbins whbt it drbws to thf printbblf
     * brfb of fbdh pbgf thbt it prints. Undfr dfrtbin dirdumstbndfs, it mby
     * find it impossiblf to fit bll of b pbgf's dontfnt into thbt brfb. In
     * thfsf dbsfs thf output mby bf dlippfd, but thf implfmfntbtion
     * mbkfs bn fffort to do somfthing rfbsonbblf. Hfrf brf b ffw situbtions
     * whfrf this is known to oddur, bnd how thfy mby bf hbndlfd by this
     * pbrtidulbr implfmfntbtion:
     * <ul>
     *   <li>In bny modf, whfn thf hfbdfr or footfr tfxt is too widf to fit
     *       domplftfly in thf printbblf brfb -- print bs mudh of thf tfxt bs
     *       possiblf stbrting from thf bfginning, bs dftfrminfd by thf tbblf's
     *       <dodf>ComponfntOrifntbtion</dodf>.
     *   <li>In bny modf, whfn b row is too tbll to fit in thf
     *       printbblf brfb -- print thf uppfr-most portion of thf row
     *       bnd pbint no lowfr bordfr on thf tbblf.
     *   <li>In <dodf>PrintModf.NORMAL</dodf> whfn b dolumn
     *       is too widf to fit in thf printbblf brfb -- print thf dfntfr
     *       portion of thf dolumn bnd lfbvf thf lfft bnd right bordfrs
     *       off thf tbblf.
     * </ul>
     * <p>
     * It is fntirfly vblid for this <dodf>Printbblf</dodf> to bf wrbppfd
     * insidf bnothfr in ordfr to drfbtf domplfx rfports bnd dodumfnts. You mby
     * fvfn rfqufst thbt difffrfnt pbgfs bf rfndfrfd into difffrfnt sizfd
     * printbblf brfbs. Thf implfmfntbtion must bf prfpbrfd to hbndlf this
     * (possibly by doing its lbyout dbldulbtions on thf fly). Howfvfr,
     * providing difffrfnt hfights to fbdh pbgf will likfly not work wfll
     * with <dodf>PrintModf.NORMAL</dodf> whfn it hbs to sprfbd dolumns
     * bdross pbgfs.
     * <p>
     * As fbr bs dustomizing how thf tbblf looks in thf printfd rfsult,
     * <dodf>JTbblf</dodf> itsflf will tbkf dbrf of hiding thf sflfdtion
     * bnd fodus during printing. For bdditionbl dustomizbtions, your
     * rfndfrfrs or pbinting dodf dbn dustomizf thf look bbsfd on thf vbluf
     * of {@link jbvbx.swing.JComponfnt#isPbintingForPrint()}
     * <p>
     * Also, <i>bfforf</i> dblling this mfthod you mby wish to <i>first</i>
     * modify thf stbtf of thf tbblf, sudh bs to dbndfl dfll fditing or
     * hbvf thf usfr sizf thf tbblf bppropribtfly. Howfvfr, you must not
     * modify thf stbtf of thf tbblf <i>bftfr</i> this <dodf>Printbblf</dodf>
     * hbs bffn fftdhfd (invblid modifidbtions indludf dhbngfs in sizf or
     * undfrlying dbtb). Thf bfhbvior of thf rfturnfd <dodf>Printbblf</dodf>
     * is undffinfd ondf thf tbblf hbs bffn dhbngfd.
     *
     * @pbrbm  printModf     thf printing modf thbt thf printbblf should usf
     * @pbrbm  hfbdfrFormbt  b <dodf>MfssbgfFormbt</dodf> spfdifying thf tfxt to
     *                       bf usfd in printing b hfbdfr, or null for nonf
     * @pbrbm  footfrFormbt  b <dodf>MfssbgfFormbt</dodf> spfdifying thf tfxt to
     *                       bf usfd in printing b footfr, or null for nonf
     * @rfturn b <dodf>Printbblf</dodf> for printing this JTbblf
     * @sff #print(JTbblf.PrintModf, MfssbgfFormbt, MfssbgfFormbt,
     *             boolfbn, PrintRfqufstAttributfSft, boolfbn)
     * @sff Printbblf
     * @sff PrintfrJob
     *
     * @sindf 1.5
     */
    publid Printbblf gftPrintbblf(PrintModf printModf,
                                  MfssbgfFormbt hfbdfrFormbt,
                                  MfssbgfFormbt footfrFormbt) {

        rfturn nfw TbblfPrintbblf(this, printModf, hfbdfrFormbt, footfrFormbt);
    }


    /**
     * A <dodf>Printbblf</dodf> implfmfntbtion thbt wrbps bnothfr
     * <dodf>Printbblf</dodf>, mbking it sbff for printing on bnothfr thrfbd.
     */
    privbtf dlbss ThrfbdSbffPrintbblf implfmfnts Printbblf {

        /** Thf dflfgbtf <dodf>Printbblf</dodf>. */
        privbtf Printbblf printDflfgbtf;

        /**
         * To dommunidbtf bny rfturn vbluf whfn dflfgbting.
         */
        privbtf int rftVbl;

        /**
         * To dommunidbtf bny <dodf>Throwbblf</dodf> whfn dflfgbting.
         */
        privbtf Throwbblf rftThrowbblf;

        /**
         * Construdt b <dodf>ThrfbdSbffPrintbblf</dodf> bround thf givfn
         * dflfgbtf.
         *
         * @pbrbm printDflfgbtf thf <dodf>Printbblf</dodf> to dflfgbtf to
         */
        publid ThrfbdSbffPrintbblf(Printbblf printDflfgbtf) {
            this.printDflfgbtf = printDflfgbtf;
        }

        /**
         * Prints thf spfdififd pbgf into thf givfn {@link Grbphids}
         * dontfxt, in thf spfdififd formbt.
         * <p>
         * Rfgbrdlfss of whbt thrfbd this mfthod is dbllfd on, bll dblls into
         * thf dflfgbtf will bf donf on thf fvfnt-dispbtdh thrfbd.
         *
         * @pbrbm   grbphids    thf dontfxt into whidh thf pbgf is drbwn
         * @pbrbm   pbgfFormbt  thf sizf bnd orifntbtion of thf pbgf bfing drbwn
         * @pbrbm   pbgfIndfx   thf zfro bbsfd indfx of thf pbgf to bf drbwn
         * @rfturn  PAGE_EXISTS if thf pbgf is rfndfrfd suddfssfully, or
         *          NO_SUCH_PAGE if b non-fxistfnt pbgf indfx is spfdififd
         * @throws  PrintfrExdfption if bn frror dbusfs printing to bf bbortfd
         */
        publid int print(finbl Grbphids grbphids,
                         finbl PbgfFormbt pbgfFormbt,
                         finbl int pbgfIndfx) throws PrintfrExdfption {

            // Wf'll usf this Runnbblf
            Runnbblf runnbblf = nfw Runnbblf() {
                publid syndhronizfd void run() {
                    try {
                        // dbll into thf dflfgbtf bnd sbvf thf rfturn vbluf
                        rftVbl = printDflfgbtf.print(grbphids, pbgfFormbt, pbgfIndfx);
                    } dbtdh (Throwbblf throwbblf) {
                        // sbvf bny Throwbblf to bf rfthrown
                        rftThrowbblf = throwbblf;
                    } finblly {
                        // notify thf dbllfr thbt wf'rf donf
                        notifyAll();
                    }
                }
            };

            syndhronizfd(runnbblf) {
                // mbkf surf thfsf brf initiblizfd
                rftVbl = -1;
                rftThrowbblf = null;

                // dbll into thf EDT
                SwingUtilitifs.invokfLbtfr(runnbblf);

                // wbit for thf runnbblf to finish
                whilf (rftVbl == -1 && rftThrowbblf == null) {
                    try {
                        runnbblf.wbit();
                    } dbtdh (IntfrruptfdExdfption if) {
                        // short prodfss, sbff to ignorf intfrrupts
                    }
                }

                // if thf dflfgbtf thrfw b throwbblf, rfthrow it hfrf
                if (rftThrowbblf != null) {
                    if (rftThrowbblf instbndfof PrintfrExdfption) {
                        throw (PrintfrExdfption)rftThrowbblf;
                    } flsf if (rftThrowbblf instbndfof RuntimfExdfption) {
                        throw (RuntimfExdfption)rftThrowbblf;
                    } flsf if (rftThrowbblf instbndfof Error) {
                        throw (Error)rftThrowbblf;
                    }

                    // dbn not hbppfn
                    throw nfw AssfrtionError(rftThrowbblf);
                }

                rfturn rftVbl;
            }
        }
    }

/////////////////
// Addfssibility support
////////////////

    /**
     * Gfts thf AddfssiblfContfxt bssodibtfd with this JTbblf.
     * For tbblfs, thf AddfssiblfContfxt tbkfs thf form of bn
     * AddfssiblfJTbblf.
     * A nfw AddfssiblfJTbblf instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn AddfssiblfJTbblf thbt sfrvfs bs thf
     *         AddfssiblfContfxt of this JTbblf
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfJTbblf();
        }
        rfturn bddfssiblfContfxt;
    }

    //
    // *** should blso implfmfnt AddfssiblfSflfdtion?
    // *** bnd whbt's up with kfybobrd nbvigbtion/mbnipulbtion?
    //
    /**
     * This dlbss implfmfnts bddfssibility support for thf
     * <dodf>JTbblf</dodf> dlbss.  It providfs bn implfmfntbtion of thf
     * Jbvb Addfssibility API bppropribtf to tbblf usfr-intfrfbdf flfmfnts.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
     * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
     * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
     * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    protfdtfd dlbss AddfssiblfJTbblf fxtfnds AddfssiblfJComponfnt
    implfmfnts AddfssiblfSflfdtion, ListSflfdtionListfnfr, TbblfModflListfnfr,
    TbblfColumnModflListfnfr, CfllEditorListfnfr, PropfrtyChbngfListfnfr,
    AddfssiblfExtfndfdTbblf {

        int prfviousFodusfdRow;
        int prfviousFodusfdCol;

        /**
         * AddfssiblfJTbblf donstrudtor
         *
         * @sindf 1.5
         */
        protfdtfd AddfssiblfJTbblf() {
            supfr();
            JTbblf.this.bddPropfrtyChbngfListfnfr(this);
            JTbblf.this.gftSflfdtionModfl().bddListSflfdtionListfnfr(this);
            TbblfColumnModfl tdm = JTbblf.this.gftColumnModfl();
            tdm.bddColumnModflListfnfr(this);
            tdm.gftSflfdtionModfl().bddListSflfdtionListfnfr(this);
            JTbblf.this.gftModfl().bddTbblfModflListfnfr(this);
            prfviousFodusfdRow = JTbblf.this.gftSflfdtionModfl().
                                        gftLfbdSflfdtionIndfx();
            prfviousFodusfdCol = JTbblf.this.gftColumnModfl().
                                        gftSflfdtionModfl().gftLfbdSflfdtionIndfx();
        }

    // Listfnfrs to trbdk modfl, ftd. dhbngfs to bs to rf-plbdf thf othfr
    // listfnfrs

        /**
         * Trbdk dhbngfs to sflfdtion modfl, dolumn modfl, ftd. so bs to
         * bf bblf to rf-plbdf listfnfrs on thosf in ordfr to pbss on
         * informbtion to thf Addfssibility PropfrtyChbngf mfdhbnism
         */
        publid void propfrtyChbngf(PropfrtyChbngfEvfnt f) {
            String nbmf = f.gftPropfrtyNbmf();
            Objfdt oldVbluf = f.gftOldVbluf();
            Objfdt nfwVbluf = f.gftNfwVbluf();

                // rf-sft tbblfModfl listfnfrs
            if (nbmf.dompbrfTo("modfl") == 0) {

                if (oldVbluf != null && oldVbluf instbndfof TbblfModfl) {
                    ((TbblfModfl) oldVbluf).rfmovfTbblfModflListfnfr(this);
                }
                if (nfwVbluf != null && nfwVbluf instbndfof TbblfModfl) {
                    ((TbblfModfl) nfwVbluf).bddTbblfModflListfnfr(this);
                }

                // rf-sft sflfdtionModfl listfnfrs
            } flsf if (nbmf.dompbrfTo("sflfdtionModfl") == 0) {

                Objfdt sourdf = f.gftSourdf();
                if (sourdf == JTbblf.this) {    // row sflfdtion modfl

                    if (oldVbluf != null &&
                        oldVbluf instbndfof ListSflfdtionModfl) {
                        ((ListSflfdtionModfl) oldVbluf).rfmovfListSflfdtionListfnfr(this);
                    }
                    if (nfwVbluf != null &&
                        nfwVbluf instbndfof ListSflfdtionModfl) {
                        ((ListSflfdtionModfl) nfwVbluf).bddListSflfdtionListfnfr(this);
                    }

                } flsf if (sourdf == JTbblf.this.gftColumnModfl()) {

                    if (oldVbluf != null &&
                        oldVbluf instbndfof ListSflfdtionModfl) {
                        ((ListSflfdtionModfl) oldVbluf).rfmovfListSflfdtionListfnfr(this);
                    }
                    if (nfwVbluf != null &&
                        nfwVbluf instbndfof ListSflfdtionModfl) {
                        ((ListSflfdtionModfl) nfwVbluf).bddListSflfdtionListfnfr(this);
                    }

                } flsf {
                  //        Systfm.out.println("!!! Bug in sourdf of sflfdtionModfl propfrtyChbngfEvfnt");
                }

                // rf-sft dolumnModfl listfnfrs
                // bnd dolumn's sflfdtion propfrty listfnfr bs wfll
            } flsf if (nbmf.dompbrfTo("dolumnModfl") == 0) {

                if (oldVbluf != null && oldVbluf instbndfof TbblfColumnModfl) {
                    TbblfColumnModfl tdm = (TbblfColumnModfl) oldVbluf;
                    tdm.rfmovfColumnModflListfnfr(this);
                    tdm.gftSflfdtionModfl().rfmovfListSflfdtionListfnfr(this);
                }
                if (nfwVbluf != null && nfwVbluf instbndfof TbblfColumnModfl) {
                    TbblfColumnModfl tdm = (TbblfColumnModfl) nfwVbluf;
                    tdm.bddColumnModflListfnfr(this);
                    tdm.gftSflfdtionModfl().bddListSflfdtionListfnfr(this);
                }

                // rf-sf dfllEditor listfnfrs
            } flsf if (nbmf.dompbrfTo("tbblfCfllEditor") == 0) {

                if (oldVbluf != null && oldVbluf instbndfof TbblfCfllEditor) {
                    ((TbblfCfllEditor) oldVbluf).rfmovfCfllEditorListfnfr(this);
                }
                if (nfwVbluf != null && nfwVbluf instbndfof TbblfCfllEditor) {
                    ((TbblfCfllEditor) nfwVbluf).bddCfllEditorListfnfr(this);
                }
            }
        }


    // Listfnfrs to fdho dhbngfs to thf AddfssiblfPropfrtyChbngf mfdhbnism

        /**
         * Dfsdribfs b dhbngf in thf bddfssiblf tbblf modfl.
         */
        protfdtfd dlbss AddfssiblfJTbblfModflChbngf
            implfmfnts AddfssiblfTbblfModflChbngf {

            protfdtfd int typf;
            protfdtfd int firstRow;
            protfdtfd int lbstRow;
            protfdtfd int firstColumn;
            protfdtfd int lbstColumn;

            protfdtfd AddfssiblfJTbblfModflChbngf(int typf, int firstRow,
                                                  int lbstRow, int firstColumn,
                                                  int lbstColumn) {
                this.typf = typf;
                this.firstRow = firstRow;
                this.lbstRow = lbstRow;
                this.firstColumn = firstColumn;
                this.lbstColumn = lbstColumn;
            }

            publid int gftTypf() {
                rfturn typf;
            }

            publid int gftFirstRow() {
                rfturn firstRow;
            }

            publid int gftLbstRow() {
                rfturn lbstRow;
            }

            publid int gftFirstColumn() {
                rfturn firstColumn;
            }

            publid int gftLbstColumn() {
                rfturn lbstColumn;
            }
        }

        /**
         * Trbdk dhbngfs to thf tbblf dontfnts
         *
         * @pbrbm f b {@dodf TbblfModflEvfnt} dfsdribing thf fvfnt
         */
        publid void tbblfChbngfd(TbblfModflEvfnt f) {
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                              null, null);
           if (f != null) {
               int firstColumn = f.gftColumn();
               int lbstColumn = f.gftColumn();
               if (firstColumn == TbblfModflEvfnt.ALL_COLUMNS) {
                   firstColumn = 0;
                   lbstColumn = gftColumnCount() - 1;
               }

               // Firf b propfrty dhbngf fvfnt indidbting thf tbblf modfl
               // hbs dhbngfd.
               AddfssiblfJTbblfModflChbngf dhbngf =
                   nfw AddfssiblfJTbblfModflChbngf(f.gftTypf(),
                                                   f.gftFirstRow(),
                                                   f.gftLbstRow(),
                                                   firstColumn,
                                                   lbstColumn);
               firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_TABLE_MODEL_CHANGED,
                                  null, dhbngf);
            }
        }

        /**
         * Trbdk dhbngfs to thf tbblf dontfnts (row insfrtions)
         *
         * @pbrbm f b {@dodf TbblfModflEvfnt} dfsdribing thf fvfnt
         */
        publid void tbblfRowsInsfrtfd(TbblfModflEvfnt f) {
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                              null, null);

           // Firf b propfrty dhbngf fvfnt indidbting thf tbblf modfl
           // hbs dhbngfd.
           int firstColumn = f.gftColumn();
           int lbstColumn = f.gftColumn();
           if (firstColumn == TbblfModflEvfnt.ALL_COLUMNS) {
               firstColumn = 0;
               lbstColumn = gftColumnCount() - 1;
           }
           AddfssiblfJTbblfModflChbngf dhbngf =
               nfw AddfssiblfJTbblfModflChbngf(f.gftTypf(),
                                               f.gftFirstRow(),
                                               f.gftLbstRow(),
                                               firstColumn,
                                               lbstColumn);
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_TABLE_MODEL_CHANGED,
                              null, dhbngf);
        }

        /**
         * Trbdk dhbngfs to thf tbblf dontfnts (row dflftions)
         *
         * @pbrbm f b {@dodf TbblfModflEvfnt} dfsdribing thf fvfnt
         */
        publid void tbblfRowsDflftfd(TbblfModflEvfnt f) {
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                              null, null);

           // Firf b propfrty dhbngf fvfnt indidbting thf tbblf modfl
           // hbs dhbngfd.
           int firstColumn = f.gftColumn();
           int lbstColumn = f.gftColumn();
           if (firstColumn == TbblfModflEvfnt.ALL_COLUMNS) {
               firstColumn = 0;
               lbstColumn = gftColumnCount() - 1;
           }
           AddfssiblfJTbblfModflChbngf dhbngf =
               nfw AddfssiblfJTbblfModflChbngf(f.gftTypf(),
                                               f.gftFirstRow(),
                                               f.gftLbstRow(),
                                               firstColumn,
                                               lbstColumn);
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_TABLE_MODEL_CHANGED,
                              null, dhbngf);
        }

        /**
         * Trbdk dhbngfs to thf tbblf dontfnts (dolumn insfrtions)
         */
        publid void dolumnAddfd(TbblfColumnModflEvfnt f) {
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                              null, null);

           // Firf b propfrty dhbngf fvfnt indidbting thf tbblf modfl
           // hbs dhbngfd.
           int typf = AddfssiblfTbblfModflChbngf.INSERT;
           AddfssiblfJTbblfModflChbngf dhbngf =
               nfw AddfssiblfJTbblfModflChbngf(typf,
                                               0,
                                               0,
                                               f.gftFromIndfx(),
                                               f.gftToIndfx());
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_TABLE_MODEL_CHANGED,
                              null, dhbngf);
        }

        /**
         * Trbdk dhbngfs to thf tbblf dontfnts (dolumn dflftions)
         */
        publid void dolumnRfmovfd(TbblfColumnModflEvfnt f) {
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                              null, null);
           // Firf b propfrty dhbngf fvfnt indidbting thf tbblf modfl
           // hbs dhbngfd.
           int typf = AddfssiblfTbblfModflChbngf.DELETE;
           AddfssiblfJTbblfModflChbngf dhbngf =
               nfw AddfssiblfJTbblfModflChbngf(typf,
                                               0,
                                               0,
                                               f.gftFromIndfx(),
                                               f.gftToIndfx());
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_TABLE_MODEL_CHANGED,
                              null, dhbngf);
        }

        /**
         * Trbdk dhbngfs of b dolumn rfpositioning.
         *
         * @sff TbblfColumnModflListfnfr
         */
        publid void dolumnMovfd(TbblfColumnModflEvfnt f) {
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                              null, null);

           // Firf propfrty dhbngf fvfnts indidbting thf tbblf modfl
           // hbs dhbngfd.
           int typf = AddfssiblfTbblfModflChbngf.DELETE;
           AddfssiblfJTbblfModflChbngf dhbngf =
               nfw AddfssiblfJTbblfModflChbngf(typf,
                                               0,
                                               0,
                                               f.gftFromIndfx(),
                                               f.gftFromIndfx());
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_TABLE_MODEL_CHANGED,
                              null, dhbngf);

           int typf2 = AddfssiblfTbblfModflChbngf.INSERT;
           AddfssiblfJTbblfModflChbngf dhbngf2 =
               nfw AddfssiblfJTbblfModflChbngf(typf2,
                                               0,
                                               0,
                                               f.gftToIndfx(),
                                               f.gftToIndfx());
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_TABLE_MODEL_CHANGED,
                              null, dhbngf2);
        }

        /**
         * Trbdk dhbngfs of b dolumn moving duf to mbrgin dhbngfs.
         *
         * @sff TbblfColumnModflListfnfr
         */
        publid void dolumnMbrginChbngfd(ChbngfEvfnt f) {
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                              null, null);
        }

        /**
         * Trbdk thbt thf sflfdtion modfl of thf TbblfColumnModfl dhbngfd.
         *
         * @sff TbblfColumnModflListfnfr
         */
        publid void dolumnSflfdtionChbngfd(ListSflfdtionEvfnt f) {
            // wf should now rf-plbdf our TbblfColumn listfnfr
        }

        /**
         * Trbdk dhbngfs to b dfll's dontfnts.
         *
         * Invokfd whfn fditing is finishfd. Thf dhbngfs brf sbvfd, thf
         * fditor objfdt is disdbrdfd, bnd thf dfll is rfndfrfd ondf bgbin.
         *
         * @sff CfllEditorListfnfr
         */
        publid void fditingStoppfd(ChbngfEvfnt f) {
           // it'd bf grfbt if wf dould figurf out whidh dfll, bnd pbss thbt
           // somfhow bs b pbrbmftfr
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                              null, null);
        }

        /**
         * Invokfd whfn fditing is dbndflfd. Thf fditor objfdt is disdbrdfd
         * bnd thf dfll is rfndfrfd ondf bgbin.
         *
         * @sff CfllEditorListfnfr
         */
        publid void fditingCbndflfd(ChbngfEvfnt f) {
            // nothing to rfport, 'dbusf nothing dhbngfd
        }

        /**
         * Trbdk dhbngfs to tbblf dfll sflfdtions
         */
        publid void vblufChbngfd(ListSflfdtionEvfnt f) {
            firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_SELECTION_PROPERTY,
                            Boolfbn.vblufOf(fblsf), Boolfbn.vblufOf(truf));

            // Using lfbd sflfdtion indfx to dovfr both dbsfs: nodf sflfdtfd bnd nodf
            // is fodusfd but not sflfdtfd (Ctrl+up/down)
            int fodusfdRow = JTbblf.this.gftSflfdtionModfl().gftLfbdSflfdtionIndfx();
            int fodusfdCol = JTbblf.this.gftColumnModfl().gftSflfdtionModfl().
                                                    gftLfbdSflfdtionIndfx();

            if (fodusfdRow != prfviousFodusfdRow ||
                fodusfdCol != prfviousFodusfdCol) {
                Addfssiblf oldA = gftAddfssiblfAt(prfviousFodusfdRow, prfviousFodusfdCol);
                Addfssiblf nfwA = gftAddfssiblfAt(fodusfdRow, fodusfdCol);
                firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY,
                                    oldA, nfwA);
                prfviousFodusfdRow = fodusfdRow;
                prfviousFodusfdCol = fodusfdCol;
            }
        }




    // AddfssiblfContfxt support

        /**
         * Gft thf AddfssiblfSflfdtion bssodibtfd with this objfdt.  In thf
         * implfmfntbtion of thf Jbvb Addfssibility API for this dlbss,
         * rfturn this objfdt, whidh is rfsponsiblf for implfmfnting thf
         * AddfssiblfSflfdtion intfrfbdf on bfhblf of itsflf.
         *
         * @rfturn this objfdt
         */
        publid AddfssiblfSflfdtion gftAddfssiblfSflfdtion() {
            rfturn this;
        }

        /**
         * Gfts thf rolf of this objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing thf rolf of thf
         * objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.TABLE;
        }

        /**
         * Rfturns thf <dodf>Addfssiblf</dodf> dhild, if onf fxists,
         * dontbinfd bt thf lodbl doordinbtf <dodf>Point</dodf>.
         *
         * @pbrbm p thf point dffining thf top-lfft dornfr of thf
         *    <dodf>Addfssiblf</dodf>, givfn in thf doordinbtf spbdf
         *    of thf objfdt's pbrfnt
         * @rfturn thf <dodf>Addfssiblf</dodf>, if it fxists,
         *    bt thf spfdififd lodbtion; flsf <dodf>null</dodf>
         */
        publid Addfssiblf gftAddfssiblfAt(Point p) {
            int dolumn = dolumnAtPoint(p);
            int row = rowAtPoint(p);

            if ((dolumn != -1) && (row != -1)) {
                TbblfColumn bColumn = gftColumnModfl().gftColumn(dolumn);
                TbblfCfllRfndfrfr rfndfrfr = bColumn.gftCfllRfndfrfr();
                if (rfndfrfr == null) {
                    Clbss<?> dolumnClbss = gftColumnClbss(dolumn);
                    rfndfrfr = gftDffbultRfndfrfr(dolumnClbss);
                }
                Componfnt domponfnt = rfndfrfr.gftTbblfCfllRfndfrfrComponfnt(
                                  JTbblf.this, null, fblsf, fblsf,
                                  row, dolumn);
                rfturn nfw AddfssiblfJTbblfCfll(JTbblf.this, row, dolumn,
                      gftAddfssiblfIndfxAt(row, dolumn));
            }
            rfturn null;
        }

        /**
         * Rfturns thf numbfr of bddfssiblf dhildrfn in thf objfdt.  If bll
         * of thf dhildrfn of this objfdt implfmfnt <dodf>Addfssiblf</dodf>,
         * thfn this mfthod should rfturn thf numbfr of dhildrfn of this objfdt.
         *
         * @rfturn thf numbfr of bddfssiblf dhildrfn in thf objfdt
         */
        publid int gftAddfssiblfChildrfnCount() {
            rfturn (JTbblf.this.gftColumnCount() * JTbblf.this.gftRowCount());
        }

        /**
         * Rfturns thf nth <dodf>Addfssiblf</dodf> dhild of thf objfdt.
         *
         * @pbrbm i zfro-bbsfd indfx of dhild
         * @rfturn thf nth Addfssiblf dhild of thf objfdt
         */
        publid Addfssiblf gftAddfssiblfChild(int i) {
            if (i < 0 || i >= gftAddfssiblfChildrfnCount()) {
                rfturn null;
            } flsf {
                // dhildrfn indrfbsf bdross, bnd thfn down, for tbblfs
                // (brbitrbry dfdision)
                int dolumn = gftAddfssiblfColumnAtIndfx(i);
                int row = gftAddfssiblfRowAtIndfx(i);

                TbblfColumn bColumn = gftColumnModfl().gftColumn(dolumn);
                TbblfCfllRfndfrfr rfndfrfr = bColumn.gftCfllRfndfrfr();
                if (rfndfrfr == null) {
                    Clbss<?> dolumnClbss = gftColumnClbss(dolumn);
                    rfndfrfr = gftDffbultRfndfrfr(dolumnClbss);
                }
                Componfnt domponfnt = rfndfrfr.gftTbblfCfllRfndfrfrComponfnt(
                                  JTbblf.this, null, fblsf, fblsf,
                                  row, dolumn);
                rfturn nfw AddfssiblfJTbblfCfll(JTbblf.this, row, dolumn,
                      gftAddfssiblfIndfxAt(row, dolumn));
            }
        }

    // AddfssiblfSflfdtion support

        /**
         * Rfturns thf numbfr of <dodf>Addfssiblf</dodf> dhildrfn
         * durrfntly sflfdtfd.
         * If no dhildrfn brf sflfdtfd, thf rfturn vbluf will bf 0.
         *
         * @rfturn thf numbfr of itfms durrfntly sflfdtfd
         */
        publid int gftAddfssiblfSflfdtionCount() {
            int rowsSfl = JTbblf.this.gftSflfdtfdRowCount();
            int dolsSfl = JTbblf.this.gftSflfdtfdColumnCount();

            if (JTbblf.this.dfllSflfdtionEnbblfd) { // b dontiguous blodk
                rfturn rowsSfl * dolsSfl;

            } flsf {
                // b dolumn swbth bnd b row swbth, with b shbrfd blodk
                if (JTbblf.this.gftRowSflfdtionAllowfd() &&
                    JTbblf.this.gftColumnSflfdtionAllowfd()) {
                    rfturn rowsSfl * JTbblf.this.gftColumnCount() +
                           dolsSfl * JTbblf.this.gftRowCount() -
                           rowsSfl * dolsSfl;

                // just onf or morf rows in sflfdtion
                } flsf if (JTbblf.this.gftRowSflfdtionAllowfd()) {
                    rfturn rowsSfl * JTbblf.this.gftColumnCount();

                // just onf or morf rows in sflfdtion
                } flsf if (JTbblf.this.gftColumnSflfdtionAllowfd()) {
                    rfturn dolsSfl * JTbblf.this.gftRowCount();

                } flsf {
                    rfturn 0;    // JTbblf dofsn't bllow sflfdtions
                }
            }
        }

        /**
         * Rfturns bn <dodf>Addfssiblf</dodf> rfprfsfnting thf
         * spfdififd sflfdtfd dhild in thf objfdt.  If thfrf
         * isn't b sflfdtion, or thfrf brf ffwfr dhildrfn sflfdtfd
         * thbn thf intfgfr pbssfd in, thf rfturn
         * vbluf will bf <dodf>null</dodf>.
         * <p>Notf thbt thf indfx rfprfsfnts thf i-th sflfdtfd dhild, whidh
         * is difffrfnt from thf i-th dhild.
         *
         * @pbrbm i thf zfro-bbsfd indfx of sflfdtfd dhildrfn
         * @rfturn thf i-th sflfdtfd dhild
         * @sff #gftAddfssiblfSflfdtionCount
         */
        publid Addfssiblf gftAddfssiblfSflfdtion(int i) {
            if (i < 0 || i > gftAddfssiblfSflfdtionCount()) {
                rfturn null;
            }

            int rowsSfl = JTbblf.this.gftSflfdtfdRowCount();
            int dolsSfl = JTbblf.this.gftSflfdtfdColumnCount();
            int rowIndidifs[] = gftSflfdtfdRows();
            int dolIndidifs[] = gftSflfdtfdColumns();
            int ttlCols = JTbblf.this.gftColumnCount();
            int ttlRows = JTbblf.this.gftRowCount();
            int r;
            int d;

            if (JTbblf.this.dfllSflfdtionEnbblfd) { // b dontiguous blodk
                r = rowIndidifs[i / dolsSfl];
                d = dolIndidifs[i % dolsSfl];
                rfturn gftAddfssiblfChild((r * ttlCols) + d);
            } flsf {

                // b dolumn swbth bnd b row swbth, with b shbrfd blodk
                if (JTbblf.this.gftRowSflfdtionAllowfd() &&
                    JTbblf.this.gftColumnSflfdtionAllowfd()) {

                    // Situbtion:
                    //   Wf hbvf b tbblf, likf thf 6x3 tbblf bflow,
                    //   whfrfin thrff dolums bnd onf row sflfdtfd
                    //   (sflfdtfd dflls mbrkfd with "*", unsflfdtfd "0"):
                    //
                    //            0 * 0 * * 0
                    //            * * * * * *
                    //            0 * 0 * * 0
                    //

                    // Stbtf mbdhinf bflow wblks through thf brrby of
                    // sflfdtfd rows in two stbtfs: in b sflfdtfd row,
                    // bnd not in onf; dontinuing until wf brf in b row
                    // in whidh thf ith sflfdtion fxists.  Thfn wf rfturn
                    // thf bppropribtf dfll.  In thf stbtf mbdhinf, wf
                    // blwbys do rows bbovf thf "durrfnt" sflfdtfd row first,
                    // thfn thf dflls in thf sflfdtfd row.  If wf'rf donf
                    // with thf stbtf mbdhinf bfforf finding thf rfqufstfd
                    // sflfdtfd dhild, wf hbndlf thf rows bflow thf lbst
                    // sflfdtfd row bt thf fnd.
                    //
                    int durIndfx = i;
                    finbl int IN_ROW = 0;
                    finbl int NOT_IN_ROW = 1;
                    int stbtf = (rowIndidifs[0] == 0 ? IN_ROW : NOT_IN_ROW);
                    int j = 0;
                    int prfvRow = -1;
                    whilf (j < rowIndidifs.lfngth) {
                        switdh (stbtf) {

                        dbsf IN_ROW:   // on individubl row full of sflfdtions
                            if (durIndfx < ttlCols) { // it's hfrf!
                                d = durIndfx % ttlCols;
                                r = rowIndidifs[j];
                                rfturn gftAddfssiblfChild((r * ttlCols) + d);
                            } flsf {                               // not hfrf
                                durIndfx -= ttlCols;
                            }
                            // is thf nfxt row in tbblf sflfdtfd or not?
                            if (j + 1 == rowIndidifs.lfngth ||
                                rowIndidifs[j] != rowIndidifs[j+1] - 1) {
                                stbtf = NOT_IN_ROW;
                                prfvRow = rowIndidifs[j];
                            }
                            j++;  // wf didn't rfturn fbrlifr, so go to nfxt row
                            brfbk;

                        dbsf NOT_IN_ROW:  // spbrsf bundh of rows of sflfdtions
                            if (durIndfx <
                                (dolsSfl * (rowIndidifs[j] -
                                (prfvRow == -1 ? 0 : (prfvRow + 1))))) {

                                // it's hfrf!
                                d = dolIndidifs[durIndfx % dolsSfl];
                                r = (j > 0 ? rowIndidifs[j-1] + 1 : 0)
                                    + durIndfx / dolsSfl;
                                rfturn gftAddfssiblfChild((r * ttlCols) + d);
                            } flsf {                               // not hfrf
                                durIndfx -= dolsSfl * (rowIndidifs[j] -
                                (prfvRow == -1 ? 0 : (prfvRow + 1)));
                            }
                            stbtf = IN_ROW;
                            brfbk;
                        }
                    }
                    // wf got hfrf, so wf didn't find it yft; find it in
                    // thf lbst spbrsf bundh of rows
                    if (durIndfx <
                        (dolsSfl * (ttlRows -
                        (prfvRow == -1 ? 0 : (prfvRow + 1))))) { // it's hfrf!
                        d = dolIndidifs[durIndfx % dolsSfl];
                        r = rowIndidifs[j-1] + durIndfx / dolsSfl + 1;
                        rfturn gftAddfssiblfChild((r * ttlCols) + d);
                    } flsf {                               // not hfrf
                        // wf shouldn't gft to this spot in thf dodf!
//                      Systfm.out.println("Bug in AddfssiblfJTbblf.gftAddfssiblfSflfdtion()");
                    }

                // onf or morf rows sflfdtfd
                } flsf if (JTbblf.this.gftRowSflfdtionAllowfd()) {
                    d = i % ttlCols;
                    r = rowIndidifs[i / ttlCols];
                    rfturn gftAddfssiblfChild((r * ttlCols) + d);

                // onf or morf dolumns sflfdtfd
                } flsf if (JTbblf.this.gftColumnSflfdtionAllowfd()) {
                    d = dolIndidifs[i % dolsSfl];
                    r = i / dolsSfl;
                    rfturn gftAddfssiblfChild((r * ttlCols) + d);
                }
            }
            rfturn null;
        }

        /**
         * Dftfrminfs if thf durrfnt dhild of this objfdt is sflfdtfd.
         *
         * @pbrbm i thf zfro-bbsfd indfx of thf dhild in this
         *    <dodf>Addfssiblf</dodf> objfdt
         * @rfturn truf if thf durrfnt dhild of this objfdt is sflfdtfd
         * @sff AddfssiblfContfxt#gftAddfssiblfChild
         */
        publid boolfbn isAddfssiblfChildSflfdtfd(int i) {
            int dolumn = gftAddfssiblfColumnAtIndfx(i);
            int row = gftAddfssiblfRowAtIndfx(i);
            rfturn JTbblf.this.isCfllSflfdtfd(row, dolumn);
        }

        /**
         * Adds thf spfdififd <dodf>Addfssiblf</dodf> dhild of thf
         * objfdt to thf objfdt's sflfdtion.  If thf objfdt supports
         * multiplf sflfdtions, thf spfdififd dhild is bddfd to
         * bny fxisting sflfdtion, othfrwisf
         * it rfplbdfs bny fxisting sflfdtion in thf objfdt.  If thf
         * spfdififd dhild is blrfbdy sflfdtfd, this mfthod hbs no ffffdt.
         * <p>
         * This mfthod only works on <dodf>JTbblf</dodf>s whidh hbvf
         * individubl dfll sflfdtion fnbblfd.
         *
         * @pbrbm i thf zfro-bbsfd indfx of thf dhild
         * @sff AddfssiblfContfxt#gftAddfssiblfChild
         */
        publid void bddAddfssiblfSflfdtion(int i) {
            // TIGER - 4495286
            int dolumn = gftAddfssiblfColumnAtIndfx(i);
            int row = gftAddfssiblfRowAtIndfx(i);
            JTbblf.this.dhbngfSflfdtion(row, dolumn, truf, fblsf);
        }

        /**
         * Rfmovfs thf spfdififd dhild of thf objfdt from thf objfdt's
         * sflfdtion.  If thf spfdififd itfm isn't durrfntly sflfdtfd, this
         * mfthod hbs no ffffdt.
         * <p>
         * This mfthod only works on <dodf>JTbblfs</dodf> whidh hbvf
         * individubl dfll sflfdtion fnbblfd.
         *
         * @pbrbm i thf zfro-bbsfd indfx of thf dhild
         * @sff AddfssiblfContfxt#gftAddfssiblfChild
         */
        publid void rfmovfAddfssiblfSflfdtion(int i) {
            if (JTbblf.this.dfllSflfdtionEnbblfd) {
                int dolumn = gftAddfssiblfColumnAtIndfx(i);
                int row = gftAddfssiblfRowAtIndfx(i);
                JTbblf.this.rfmovfRowSflfdtionIntfrvbl(row, row);
                JTbblf.this.rfmovfColumnSflfdtionIntfrvbl(dolumn, dolumn);
            }
        }

        /**
         * Clfbrs thf sflfdtion in thf objfdt, so thbt no dhildrfn in thf
         * objfdt brf sflfdtfd.
         */
        publid void dlfbrAddfssiblfSflfdtion() {
            JTbblf.this.dlfbrSflfdtion();
        }

        /**
         * Cbusfs fvfry dhild of thf objfdt to bf sflfdtfd, but only
         * if thf <dodf>JTbblf</dodf> supports multiplf sflfdtions,
         * bnd if individubl dfll sflfdtion is fnbblfd.
         */
        publid void sflfdtAllAddfssiblfSflfdtion() {
            if (JTbblf.this.dfllSflfdtionEnbblfd) {
                JTbblf.this.sflfdtAll();
            }
        }

        // bfgin AddfssiblfExtfndfdTbblf implfmfntbtion -------------

        /**
         * Rfturns thf row numbfr of bn indfx in thf tbblf.
         *
         * @pbrbm indfx thf zfro-bbsfd indfx in thf tbblf
         * @rfturn thf zfro-bbsfd row of thf tbblf if onf fxists;
         * othfrwisf -1.
         * @sindf 1.4
         */
        publid int gftAddfssiblfRow(int indfx) {
            rfturn gftAddfssiblfRowAtIndfx(indfx);
        }

        /**
         * Rfturns thf dolumn numbfr of bn indfx in thf tbblf.
         *
         * @pbrbm indfx thf zfro-bbsfd indfx in thf tbblf
         * @rfturn thf zfro-bbsfd dolumn of thf tbblf if onf fxists;
         * othfrwisf -1.
         * @sindf 1.4
         */
        publid int gftAddfssiblfColumn(int indfx) {
            rfturn gftAddfssiblfColumnAtIndfx(indfx);
        }

        /**
         * Rfturns thf indfx bt b row bnd dolumn in thf tbblf.
         *
         * @pbrbm r zfro-bbsfd row of thf tbblf
         * @pbrbm d zfro-bbsfd dolumn of thf tbblf
         * @rfturn thf zfro-bbsfd indfx in thf tbblf if onf fxists;
         * othfrwisf -1.
         * @sindf 1.4
         */
        publid int gftAddfssiblfIndfx(int r, int d) {
            rfturn gftAddfssiblfIndfxAt(r, d);
        }

        // fnd of AddfssiblfExtfndfdTbblf implfmfntbtion ------------

        // stbrt of AddfssiblfTbblf implfmfntbtion ------------------

        privbtf Addfssiblf dbption;
        privbtf Addfssiblf summbry;
        privbtf Addfssiblf [] rowDfsdription;
        privbtf Addfssiblf [] dolumnDfsdription;

        /**
         * Gfts thf <dodf>AddfssiblfTbblf</dodf> bssodibtfd with this
         * objfdt.  In thf implfmfntbtion of thf Jbvb Addfssibility
         * API for this dlbss, rfturn this objfdt, whidh is rfsponsiblf
         * for implfmfnting thf <dodf>AddfssiblfTbblfs</dodf> intfrfbdf
         * on bfhblf of itsflf.
         *
         * @rfturn this objfdt
         * @sindf 1.3
         */
        publid AddfssiblfTbblf gftAddfssiblfTbblf() {
            rfturn this;
        }

        /**
         * Rfturns thf dbption for thf tbblf.
         *
         * @rfturn thf dbption for thf tbblf
         * @sindf 1.3
         */
        publid Addfssiblf gftAddfssiblfCbption() {
            rfturn this.dbption;
        }

        /**
         * Sfts thf dbption for thf tbblf.
         *
         * @pbrbm b thf dbption for thf tbblf
         * @sindf 1.3
         */
        publid void sftAddfssiblfCbption(Addfssiblf b) {
            Addfssiblf oldCbption = dbption;
            this.dbption = b;
            firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_TABLE_CAPTION_CHANGED,
                               oldCbption, this.dbption);
        }

        /**
         * Rfturns thf summbry dfsdription of thf tbblf.
         *
         * @rfturn thf summbry dfsdription of thf tbblf
         * @sindf 1.3
         */
        publid Addfssiblf gftAddfssiblfSummbry() {
            rfturn this.summbry;
        }

        /**
         * Sfts thf summbry dfsdription of thf tbblf.
         *
         * @pbrbm b thf summbry dfsdription of thf tbblf
         * @sindf 1.3
         */
        publid void sftAddfssiblfSummbry(Addfssiblf b) {
            Addfssiblf oldSummbry = summbry;
            this.summbry = b;
            firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_TABLE_SUMMARY_CHANGED,
                               oldSummbry, this.summbry);
        }

        /*
         * Rfturns thf totbl numbfr of rows in this tbblf.
         *
         * @rfturn thf totbl numbfr of rows in this tbblf
         */
        publid int gftAddfssiblfRowCount() {
            rfturn JTbblf.this.gftRowCount();
        }

        /*
         * Rfturns thf totbl numbfr of dolumns in thf tbblf.
         *
         * @rfturn thf totbl numbfr of dolumns in thf tbblf
         */
        publid int gftAddfssiblfColumnCount() {
            rfturn JTbblf.this.gftColumnCount();
        }

        /*
         * Rfturns thf <dodf>Addfssiblf</dodf> bt b spfdififd row
         * bnd dolumn in thf tbblf.
         *
         * @pbrbm r zfro-bbsfd row of thf tbblf
         * @pbrbm d zfro-bbsfd dolumn of thf tbblf
         * @rfturn thf <dodf>Addfssiblf</dodf> bt thf spfdififd row bnd dolumn
         * in thf tbblf
         */
        publid Addfssiblf gftAddfssiblfAt(int r, int d) {
            rfturn gftAddfssiblfChild((r * gftAddfssiblfColumnCount()) + d);
        }

        /**
         * Rfturns thf numbfr of rows oddupifd by thf <dodf>Addfssiblf</dodf>
         * bt b spfdififd row bnd dolumn in thf tbblf.
         *
         * @rfturn thf numbfr of rows oddupifd by thf <dodf>Addfssiblf</dodf>
         *     bt b spfdififd row bnd dolumn in thf tbblf
         * @sindf 1.3
         */
        publid int gftAddfssiblfRowExtfntAt(int r, int d) {
            rfturn 1;
        }

        /**
         * Rfturns thf numbfr of dolumns oddupifd by thf
         * <dodf>Addfssiblf</dodf> bt b givfn (row, dolumn).
         *
         * @rfturn thf numbfr of dolumns oddupifd by thf <dodf>Addfssiblf</dodf>
         *     bt b spfdififd row bnd dolumn in thf tbblf
         * @sindf 1.3
         */
        publid int gftAddfssiblfColumnExtfntAt(int r, int d) {
            rfturn 1;
        }

        /**
         * Rfturns thf row hfbdfrs bs bn <dodf>AddfssiblfTbblf</dodf>.
         *
         * @rfturn bn <dodf>AddfssiblfTbblf</dodf> rfprfsfnting thf row
         * hfbdfrs
         * @sindf 1.3
         */
        publid AddfssiblfTbblf gftAddfssiblfRowHfbdfr() {
            // row hfbdfrs brf not supportfd
            rfturn null;
        }

        /**
         * Sfts thf row hfbdfrs bs bn <dodf>AddfssiblfTbblf</dodf>.
         *
         * @pbrbm b bn <dodf>AddfssiblfTbblf</dodf> rfprfsfnting thf row
         *  hfbdfrs
         * @sindf 1.3
         */
        publid void sftAddfssiblfRowHfbdfr(AddfssiblfTbblf b) {
            // row hfbdfrs brf not supportfd
        }

        /**
         * Rfturns thf dolumn hfbdfrs bs bn <dodf>AddfssiblfTbblf</dodf>.
         *
         *  @rfturn bn <dodf>AddfssiblfTbblf</dodf> rfprfsfnting thf dolumn
         *          hfbdfrs, or <dodf>null</dodf> if thf tbblf hfbdfr is
         *          <dodf>null</dodf>
         * @sindf 1.3
         */
        publid AddfssiblfTbblf gftAddfssiblfColumnHfbdfr() {
            JTbblfHfbdfr hfbdfr = JTbblf.this.gftTbblfHfbdfr();
            rfturn hfbdfr == null ? null : nfw AddfssiblfTbblfHfbdfr(hfbdfr);
        }

        /*
         * Privbtf dlbss rfprfsfnting b tbblf dolumn hfbdfr
         */
        privbtf dlbss AddfssiblfTbblfHfbdfr implfmfnts AddfssiblfTbblf {
            privbtf JTbblfHfbdfr hfbdfr;
            privbtf TbblfColumnModfl hfbdfrModfl;

            AddfssiblfTbblfHfbdfr(JTbblfHfbdfr hfbdfr) {
                this.hfbdfr = hfbdfr;
                this.hfbdfrModfl = hfbdfr.gftColumnModfl();
            }

            /**
             * Rfturns thf dbption for thf tbblf.
             *
             * @rfturn thf dbption for thf tbblf
             */
            publid Addfssiblf gftAddfssiblfCbption() { rfturn null; }


            /**
             * Sfts thf dbption for thf tbblf.
             *
             * @pbrbm b thf dbption for thf tbblf
             */
            publid void sftAddfssiblfCbption(Addfssiblf b) {}

            /**
             * Rfturns thf summbry dfsdription of thf tbblf.
             *
             * @rfturn thf summbry dfsdription of thf tbblf
             */
            publid Addfssiblf gftAddfssiblfSummbry() { rfturn null; }

            /**
             * Sfts thf summbry dfsdription of thf tbblf
             *
             * @pbrbm b thf summbry dfsdription of thf tbblf
             */
            publid void sftAddfssiblfSummbry(Addfssiblf b) {}

            /**
             * Rfturns thf numbfr of rows in thf tbblf.
             *
             * @rfturn thf numbfr of rows in thf tbblf
             */
            publid int gftAddfssiblfRowCount() { rfturn 1; }

            /**
             * Rfturns thf numbfr of dolumns in thf tbblf.
             *
             * @rfturn thf numbfr of dolumns in thf tbblf
             */
            publid int gftAddfssiblfColumnCount() {
                rfturn hfbdfrModfl.gftColumnCount();
            }

            /**
             * Rfturns thf Addfssiblf bt b spfdififd row bnd dolumn
             * in thf tbblf.
             *
             * @pbrbm row zfro-bbsfd row of thf tbblf
             * @pbrbm dolumn zfro-bbsfd dolumn of thf tbblf
             * @rfturn thf Addfssiblf bt thf spfdififd row bnd dolumn
             */
            publid Addfssiblf gftAddfssiblfAt(int row, int dolumn) {


                // TIGER - 4715503
                TbblfColumn bColumn = hfbdfrModfl.gftColumn(dolumn);
                TbblfCfllRfndfrfr rfndfrfr = bColumn.gftHfbdfrRfndfrfr();
                if (rfndfrfr == null) {
                    rfndfrfr = hfbdfr.gftDffbultRfndfrfr();
                }
                Componfnt domponfnt = rfndfrfr.gftTbblfCfllRfndfrfrComponfnt(
                                  hfbdfr.gftTbblf(),
                                  bColumn.gftHfbdfrVbluf(), fblsf, fblsf,
                                  -1, dolumn);

                rfturn nfw AddfssiblfJTbblfHfbdfrCfll(row, dolumn,
                                                      JTbblf.this.gftTbblfHfbdfr(),
                                                      domponfnt);
            }

            /**
             * Rfturns thf numbfr of rows oddupifd by thf Addfssiblf bt
             * b spfdififd row bnd dolumn in thf tbblf.
             *
             * @rfturn thf numbfr of rows oddupifd by thf Addfssiblf bt b
             * givfn spfdififd (row, dolumn)
             */
            publid int gftAddfssiblfRowExtfntAt(int r, int d) { rfturn 1; }

            /**
             * Rfturns thf numbfr of dolumns oddupifd by thf Addfssiblf bt
             * b spfdififd row bnd dolumn in thf tbblf.
             *
             * @rfturn thf numbfr of dolumns oddupifd by thf Addfssiblf bt b
             * givfn spfdififd row bnd dolumn
             */
            publid int gftAddfssiblfColumnExtfntAt(int r, int d) { rfturn 1; }

            /**
             * Rfturns thf row hfbdfrs bs bn AddfssiblfTbblf.
             *
             * @rfturn bn AddfssiblfTbblf rfprfsfnting thf row
             * hfbdfrs
             */
            publid AddfssiblfTbblf gftAddfssiblfRowHfbdfr() { rfturn null; }

            /**
             * Sfts thf row hfbdfrs.
             *
             * @pbrbm tbblf bn AddfssiblfTbblf rfprfsfnting thf
             * row hfbdfrs
             */
            publid void sftAddfssiblfRowHfbdfr(AddfssiblfTbblf tbblf) {}

            /**
             * Rfturns thf dolumn hfbdfrs bs bn AddfssiblfTbblf.
             *
             * @rfturn bn AddfssiblfTbblf rfprfsfnting thf dolumn
             * hfbdfrs
             */
            publid AddfssiblfTbblf gftAddfssiblfColumnHfbdfr() { rfturn null; }

            /**
             * Sfts thf dolumn hfbdfrs.
             *
             * @pbrbm tbblf bn AddfssiblfTbblf rfprfsfnting thf
             * dolumn hfbdfrs
             * @sindf 1.3
             */
            publid void sftAddfssiblfColumnHfbdfr(AddfssiblfTbblf tbblf) {}

            /**
             * Rfturns thf dfsdription of thf spfdififd row in thf tbblf.
             *
             * @pbrbm r zfro-bbsfd row of thf tbblf
             * @rfturn thf dfsdription of thf row
             * @sindf 1.3
             */
            publid Addfssiblf gftAddfssiblfRowDfsdription(int r) { rfturn null; }

            /**
             * Sfts thf dfsdription tfxt of thf spfdififd row of thf tbblf.
             *
             * @pbrbm r zfro-bbsfd row of thf tbblf
             * @pbrbm b thf dfsdription of thf row
             * @sindf 1.3
             */
            publid void sftAddfssiblfRowDfsdription(int r, Addfssiblf b) {}

            /**
             * Rfturns thf dfsdription tfxt of thf spfdififd dolumn in thf tbblf.
             *
             * @pbrbm d zfro-bbsfd dolumn of thf tbblf
             * @rfturn thf tfxt dfsdription of thf dolumn
             * @sindf 1.3
             */
            publid Addfssiblf gftAddfssiblfColumnDfsdription(int d) { rfturn null; }

            /**
             * Sfts thf dfsdription tfxt of thf spfdififd dolumn in thf tbblf.
             *
             * @pbrbm d zfro-bbsfd dolumn of thf tbblf
             * @pbrbm b thf tfxt dfsdription of thf dolumn
             * @sindf 1.3
             */
            publid void sftAddfssiblfColumnDfsdription(int d, Addfssiblf b) {}

            /**
             * Rfturns b boolfbn vbluf indidbting whfthfr thf bddfssiblf bt
             * b spfdififd row bnd dolumn is sflfdtfd.
             *
             * @pbrbm r zfro-bbsfd row of thf tbblf
             * @pbrbm d zfro-bbsfd dolumn of thf tbblf
             * @rfturn thf boolfbn vbluf truf if thf bddfssiblf bt thf
             * row bnd dolumn is sflfdtfd. Othfrwisf, thf boolfbn vbluf
             * fblsf
             * @sindf 1.3
             */
            publid boolfbn isAddfssiblfSflfdtfd(int r, int d) { rfturn fblsf; }

            /**
             * Rfturns b boolfbn vbluf indidbting whfthfr thf spfdififd row
             * is sflfdtfd.
             *
             * @pbrbm r zfro-bbsfd row of thf tbblf
             * @rfturn thf boolfbn vbluf truf if thf spfdififd row is sflfdtfd.
             * Othfrwisf, fblsf.
             * @sindf 1.3
             */
            publid boolfbn isAddfssiblfRowSflfdtfd(int r) { rfturn fblsf; }

            /**
             * Rfturns b boolfbn vbluf indidbting whfthfr thf spfdififd dolumn
             * is sflfdtfd.
             *
             * @pbrbm d zfro-bbsfd dolumn of thf tbblf
             * @rfturn thf boolfbn vbluf truf if thf spfdififd dolumn is sflfdtfd.
             * Othfrwisf, fblsf.
             * @sindf 1.3
             */
            publid boolfbn isAddfssiblfColumnSflfdtfd(int d) { rfturn fblsf; }

            /**
             * Rfturns thf sflfdtfd rows in b tbblf.
             *
             * @rfturn bn brrby of sflfdtfd rows whfrf fbdh flfmfnt is b
             * zfro-bbsfd row of thf tbblf
             * @sindf 1.3
             */
            publid int [] gftSflfdtfdAddfssiblfRows() { rfturn nfw int[0]; }

            /**
             * Rfturns thf sflfdtfd dolumns in b tbblf.
             *
             * @rfturn bn brrby of sflfdtfd dolumns whfrf fbdh flfmfnt is b
             * zfro-bbsfd dolumn of thf tbblf
             * @sindf 1.3
             */
            publid int [] gftSflfdtfdAddfssiblfColumns() { rfturn nfw int[0]; }
        }


        /**
         * Sfts thf dolumn hfbdfrs bs bn <dodf>AddfssiblfTbblf</dodf>.
         *
         * @pbrbm b bn <dodf>AddfssiblfTbblf</dodf> rfprfsfnting thf
         * dolumn hfbdfrs
         * @sindf 1.3
         */
        publid void sftAddfssiblfColumnHfbdfr(AddfssiblfTbblf b) {
            // XXX not implfmfntfd
        }

        /**
         * Rfturns thf dfsdription of thf spfdififd row in thf tbblf.
         *
         * @pbrbm r zfro-bbsfd row of thf tbblf
         * @rfturn thf dfsdription of thf row
         * @sindf 1.3
         */
        publid Addfssiblf gftAddfssiblfRowDfsdription(int r) {
            if (r < 0 || r >= gftAddfssiblfRowCount()) {
                throw nfw IllfgblArgumfntExdfption(Intfgfr.toString(r));
            }
            if (rowDfsdription == null) {
                rfturn null;
            } flsf {
                rfturn rowDfsdription[r];
            }
        }

        /**
         * Sfts thf dfsdription tfxt of thf spfdififd row of thf tbblf.
         *
         * @pbrbm r zfro-bbsfd row of thf tbblf
         * @pbrbm b thf dfsdription of thf row
         * @sindf 1.3
         */
        publid void sftAddfssiblfRowDfsdription(int r, Addfssiblf b) {
            if (r < 0 || r >= gftAddfssiblfRowCount()) {
                throw nfw IllfgblArgumfntExdfption(Intfgfr.toString(r));
            }
            if (rowDfsdription == null) {
                int numRows = gftAddfssiblfRowCount();
                rowDfsdription = nfw Addfssiblf[numRows];
            }
            rowDfsdription[r] = b;
        }

        /**
         * Rfturns thf dfsdription of thf spfdififd dolumn in thf tbblf.
         *
         * @pbrbm d zfro-bbsfd dolumn of thf tbblf
         * @rfturn thf dfsdription of thf dolumn
         * @sindf 1.3
         */
        publid Addfssiblf gftAddfssiblfColumnDfsdription(int d) {
            if (d < 0 || d >= gftAddfssiblfColumnCount()) {
                throw nfw IllfgblArgumfntExdfption(Intfgfr.toString(d));
            }
            if (dolumnDfsdription == null) {
                rfturn null;
            } flsf {
                rfturn dolumnDfsdription[d];
            }
        }

        /**
         * Sfts thf dfsdription tfxt of thf spfdififd dolumn of thf tbblf.
         *
         * @pbrbm d zfro-bbsfd dolumn of thf tbblf
         * @pbrbm b thf dfsdription of thf dolumn
         * @sindf 1.3
         */
        publid void sftAddfssiblfColumnDfsdription(int d, Addfssiblf b) {
            if (d < 0 || d >= gftAddfssiblfColumnCount()) {
                throw nfw IllfgblArgumfntExdfption(Intfgfr.toString(d));
            }
            if (dolumnDfsdription == null) {
                int numColumns = gftAddfssiblfColumnCount();
                dolumnDfsdription = nfw Addfssiblf[numColumns];
            }
            dolumnDfsdription[d] = b;
        }

        /**
         * Rfturns b boolfbn vbluf indidbting whfthfr thf bddfssiblf bt b
         * givfn (row, dolumn) is sflfdtfd.
         *
         * @pbrbm r zfro-bbsfd row of thf tbblf
         * @pbrbm d zfro-bbsfd dolumn of thf tbblf
         * @rfturn thf boolfbn vbluf truf if thf bddfssiblf bt (row, dolumn)
         *     is sflfdtfd; othfrwisf, thf boolfbn vbluf fblsf
         * @sindf 1.3
         */
        publid boolfbn isAddfssiblfSflfdtfd(int r, int d) {
            rfturn JTbblf.this.isCfllSflfdtfd(r, d);
        }

        /**
         * Rfturns b boolfbn vbluf indidbting whfthfr thf spfdififd row
         * is sflfdtfd.
         *
         * @pbrbm r zfro-bbsfd row of thf tbblf
         * @rfturn thf boolfbn vbluf truf if thf spfdififd row is sflfdtfd;
         *     othfrwisf, fblsf
         * @sindf 1.3
         */
        publid boolfbn isAddfssiblfRowSflfdtfd(int r) {
            rfturn JTbblf.this.isRowSflfdtfd(r);
        }

        /**
         * Rfturns b boolfbn vbluf indidbting whfthfr thf spfdififd dolumn
         * is sflfdtfd.
         *
         * @pbrbm d zfro-bbsfd dolumn of thf tbblf
         * @rfturn thf boolfbn vbluf truf if thf spfdififd dolumn is sflfdtfd;
         *     othfrwisf, fblsf
         * @sindf 1.3
         */
        publid boolfbn isAddfssiblfColumnSflfdtfd(int d) {
            rfturn JTbblf.this.isColumnSflfdtfd(d);
        }

        /**
         * Rfturns thf sflfdtfd rows in b tbblf.
         *
         * @rfturn bn brrby of sflfdtfd rows whfrf fbdh flfmfnt is b
         *     zfro-bbsfd row of thf tbblf
         * @sindf 1.3
         */
        publid int [] gftSflfdtfdAddfssiblfRows() {
            rfturn JTbblf.this.gftSflfdtfdRows();
        }

        /**
         * Rfturns thf sflfdtfd dolumns in b tbblf.
         *
         * @rfturn bn brrby of sflfdtfd dolumns whfrf fbdh flfmfnt is b
         *     zfro-bbsfd dolumn of thf tbblf
         * @sindf 1.3
         */
        publid int [] gftSflfdtfdAddfssiblfColumns() {
            rfturn JTbblf.this.gftSflfdtfdColumns();
        }

        /**
         * Rfturns thf row bt b givfn indfx into thf tbblf.
         *
         * @pbrbm i zfro-bbsfd indfx into thf tbblf
         * @rfturn thf row bt b givfn indfx
         * @sindf 1.3
         */
        publid int gftAddfssiblfRowAtIndfx(int i) {
            int dolumnCount = gftAddfssiblfColumnCount();
            if (dolumnCount == 0) {
                rfturn -1;
            } flsf {
                rfturn (i / dolumnCount);
            }
        }

        /**
         * Rfturns thf dolumn bt b givfn indfx into thf tbblf.
         *
         * @pbrbm i zfro-bbsfd indfx into thf tbblf
         * @rfturn thf dolumn bt b givfn indfx
         * @sindf 1.3
         */
        publid int gftAddfssiblfColumnAtIndfx(int i) {
            int dolumnCount = gftAddfssiblfColumnCount();
            if (dolumnCount == 0) {
                rfturn -1;
            } flsf {
                rfturn (i % dolumnCount);
            }
        }

        /**
         * Rfturns thf indfx bt b givfn (row, dolumn) in thf tbblf.
         *
         * @pbrbm r zfro-bbsfd row of thf tbblf
         * @pbrbm d zfro-bbsfd dolumn of thf tbblf
         * @rfturn thf indfx into thf tbblf
         * @sindf 1.3
         */
        publid int gftAddfssiblfIndfxAt(int r, int d) {
            rfturn ((r * gftAddfssiblfColumnCount()) + d);
        }

        // fnd of AddfssiblfTbblf implfmfntbtion --------------------

        /**
         * Thf dlbss providfs bn implfmfntbtion of thf Jbvb Addfssibility
         * API bppropribtf to tbblf dflls.
         */
        protfdtfd dlbss AddfssiblfJTbblfCfll fxtfnds AddfssiblfContfxt
            implfmfnts Addfssiblf, AddfssiblfComponfnt {

            privbtf JTbblf pbrfnt;
            privbtf int row;
            privbtf int dolumn;
            privbtf int indfx;

            /**
             *  Construdts bn <dodf>AddfssiblfJTbblfHfbdfrEntry</dodf>.
             *
             * @pbrbm t b {@dodf JTbblf}
             * @pbrbm r bn {@dodf int} spfdifying b row
             * @pbrbm d bn {@dodf int} spfdifying b dolumn
             * @pbrbm i bn {@dodf int} spfdifying thf indfx to this dfll
             * @sindf 1.4
             */
            publid AddfssiblfJTbblfCfll(JTbblf t, int r, int d, int i) {
                pbrfnt = t;
                row = r;
                dolumn = d;
                indfx = i;
                this.sftAddfssiblfPbrfnt(pbrfnt);
            }

            /**
             * Gfts thf <dodf>AddfssiblfContfxt</dodf> bssodibtfd with this
             * domponfnt. In thf implfmfntbtion of thf Jbvb Addfssibility
             * API for this dlbss, rfturn this objfdt, whidh is its own
             * <dodf>AddfssiblfContfxt</dodf>.
             *
             * @rfturn this objfdt
             */
            publid AddfssiblfContfxt gftAddfssiblfContfxt() {
                rfturn this;
            }

            /**
             * Gfts thf AddfssiblfContfxt for thf tbblf dfll rfndfrfr.
             *
             * @rfturn thf <dodf>AddfssiblfContfxt</dodf> for thf tbblf
             * dfll rfndfrfr if onf fxists;
             * othfrwisf, rfturns <dodf>null</dodf>.
             * @sindf 1.6
             */
            protfdtfd AddfssiblfContfxt gftCurrfntAddfssiblfContfxt() {
                TbblfColumn bColumn = gftColumnModfl().gftColumn(dolumn);
                TbblfCfllRfndfrfr rfndfrfr = bColumn.gftCfllRfndfrfr();
                if (rfndfrfr == null) {
                    Clbss<?> dolumnClbss = gftColumnClbss(dolumn);
                    rfndfrfr = gftDffbultRfndfrfr(dolumnClbss);
                }
                Componfnt domponfnt = rfndfrfr.gftTbblfCfllRfndfrfrComponfnt(
                                  JTbblf.this, gftVblufAt(row, dolumn),
                                  fblsf, fblsf, row, dolumn);
                if (domponfnt instbndfof Addfssiblf) {
                    rfturn domponfnt.gftAddfssiblfContfxt();
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Gfts thf tbblf dfll rfndfrfr domponfnt.
             *
             * @rfturn thf tbblf dfll rfndfrfr domponfnt if onf fxists;
             * othfrwisf, rfturns <dodf>null</dodf>.
             * @sindf 1.6
             */
            protfdtfd Componfnt gftCurrfntComponfnt() {
                TbblfColumn bColumn = gftColumnModfl().gftColumn(dolumn);
                TbblfCfllRfndfrfr rfndfrfr = bColumn.gftCfllRfndfrfr();
                if (rfndfrfr == null) {
                    Clbss<?> dolumnClbss = gftColumnClbss(dolumn);
                    rfndfrfr = gftDffbultRfndfrfr(dolumnClbss);
                }
                rfturn rfndfrfr.gftTbblfCfllRfndfrfrComponfnt(
                                  JTbblf.this, null, fblsf, fblsf,
                                  row, dolumn);
            }

        // AddfssiblfContfxt mfthods

            /**
             * Gfts thf bddfssiblf nbmf of this objfdt.
             *
             * @rfturn thf lodblizfd nbmf of thf objfdt; <dodf>null</dodf>
             *     if this objfdt dofs not hbvf b nbmf
             */
            publid String gftAddfssiblfNbmf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    String nbmf = bd.gftAddfssiblfNbmf();
                    if ((nbmf != null) && (nbmf != "")) {
                        // rfturn thf dfll rfndfrfr's AddfssiblfNbmf
                        rfturn nbmf;
                    }
                }
                if ((bddfssiblfNbmf != null) && (bddfssiblfNbmf != "")) {
                    rfturn bddfssiblfNbmf;
                } flsf {
                    // fbll bbdk to thf dlifnt propfrty
                    rfturn (String)gftClifntPropfrty(AddfssiblfContfxt.ACCESSIBLE_NAME_PROPERTY);
                }
            }

            /**
             * Sfts thf lodblizfd bddfssiblf nbmf of this objfdt.
             *
             * @pbrbm s thf nfw lodblizfd nbmf of thf objfdt
             */
            publid void sftAddfssiblfNbmf(String s) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.sftAddfssiblfNbmf(s);
                } flsf {
                    supfr.sftAddfssiblfNbmf(s);
                }
            }

            //
            // *** should dhfdk toolTip tfxt for dfsd. (nffds MousfEvfnt)
            //
            /**
             * Gfts thf bddfssiblf dfsdription of this objfdt.
             *
             * @rfturn thf lodblizfd dfsdription of thf objfdt;
             *     <dodf>null</dodf> if this objfdt dofs not hbvf
             *     b dfsdription
             */
            publid String gftAddfssiblfDfsdription() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftAddfssiblfDfsdription();
                } flsf {
                    rfturn supfr.gftAddfssiblfDfsdription();
                }
            }

            /**
             * Sfts thf bddfssiblf dfsdription of this objfdt.
             *
             * @pbrbm s thf nfw lodblizfd dfsdription of thf objfdt
             */
            publid void sftAddfssiblfDfsdription(String s) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.sftAddfssiblfDfsdription(s);
                } flsf {
                    supfr.sftAddfssiblfDfsdription(s);
                }
            }

            /**
             * Gfts thf rolf of this objfdt.
             *
             * @rfturn bn instbndf of <dodf>AddfssiblfRolf</dodf>
             *      dfsdribing thf rolf of thf objfdt
             * @sff AddfssiblfRolf
             */
            publid AddfssiblfRolf gftAddfssiblfRolf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftAddfssiblfRolf();
                } flsf {
                    rfturn AddfssiblfRolf.UNKNOWN;
                }
            }

            /**
             * Gfts thf stbtf sft of this objfdt.
             *
             * @rfturn bn instbndf of <dodf>AddfssiblfStbtfSft</dodf>
             *     dontbining thf durrfnt stbtf sft of thf objfdt
             * @sff AddfssiblfStbtf
             */
            publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                AddfssiblfStbtfSft bs = null;

                if (bd != null) {
                    bs = bd.gftAddfssiblfStbtfSft();
                }
                if (bs == null) {
                    bs = nfw AddfssiblfStbtfSft();
                }
                Rfdtbnglf rjt = JTbblf.this.gftVisiblfRfdt();
                Rfdtbnglf rdfll = JTbblf.this.gftCfllRfdt(row, dolumn, fblsf);
                if (rjt.intfrsfdts(rdfll)) {
                    bs.bdd(AddfssiblfStbtf.SHOWING);
                } flsf {
                    if (bs.dontbins(AddfssiblfStbtf.SHOWING)) {
                         bs.rfmovf(AddfssiblfStbtf.SHOWING);
                    }
                }
                if (pbrfnt.isCfllSflfdtfd(row, dolumn)) {
                    bs.bdd(AddfssiblfStbtf.SELECTED);
                } flsf if (bs.dontbins(AddfssiblfStbtf.SELECTED)) {
                    bs.rfmovf(AddfssiblfStbtf.SELECTED);
                }
                if ((row == gftSflfdtfdRow()) && (dolumn == gftSflfdtfdColumn())) {
                    bs.bdd(AddfssiblfStbtf.ACTIVE);
                }
                bs.bdd(AddfssiblfStbtf.TRANSIENT);
                rfturn bs;
            }

            /**
             * Gfts thf <dodf>Addfssiblf</dodf> pbrfnt of this objfdt.
             *
             * @rfturn thf Addfssiblf pbrfnt of this objfdt;
             *     <dodf>null</dodf> if this objfdt dofs not
             *     hbvf bn <dodf>Addfssiblf</dodf> pbrfnt
             */
            publid Addfssiblf gftAddfssiblfPbrfnt() {
                rfturn pbrfnt;
            }

            /**
             * Gfts thf indfx of this objfdt in its bddfssiblf pbrfnt.
             *
             * @rfturn thf indfx of this objfdt in its pbrfnt; -1 if this
             *     objfdt dofs not hbvf bn bddfssiblf pbrfnt
             * @sff #gftAddfssiblfPbrfnt
             */
            publid int gftAddfssiblfIndfxInPbrfnt() {
                rfturn indfx;
            }

            /**
             * Rfturns thf numbfr of bddfssiblf dhildrfn in thf objfdt.
             *
             * @rfturn thf numbfr of bddfssiblf dhildrfn in thf objfdt
             */
            publid int gftAddfssiblfChildrfnCount() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftAddfssiblfChildrfnCount();
                } flsf {
                    rfturn 0;
                }
            }

            /**
             * Rfturns thf spfdififd <dodf>Addfssiblf</dodf> dhild of thf
             * objfdt.
             *
             * @pbrbm i zfro-bbsfd indfx of dhild
             * @rfturn thf <dodf>Addfssiblf</dodf> dhild of thf objfdt
             */
            publid Addfssiblf gftAddfssiblfChild(int i) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    Addfssiblf bddfssiblfChild = bd.gftAddfssiblfChild(i);
                    bd.sftAddfssiblfPbrfnt(this);
                    rfturn bddfssiblfChild;
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Gfts thf lodblf of thf domponfnt. If thf domponfnt
             * dofs not hbvf b lodblf, thfn thf lodblf of its pbrfnt
             * is rfturnfd.
             *
             * @rfturn this domponfnt's lodblf; if this domponfnt dofs
             *    not hbvf b lodblf, thf lodblf of its pbrfnt is rfturnfd
             * @fxdfption IllfgblComponfntStbtfExdfption if thf
             *    <dodf>Componfnt</dodf> dofs not hbvf its own lodblf
             *    bnd hbs not yft bffn bddfd to b dontbinmfnt hifrbrdhy
             *    sudh thbt thf lodblf dbn bf dftfrminfd from thf
             *    dontbining pbrfnt
             * @sff #sftLodblf
             */
            publid Lodblf gftLodblf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftLodblf();
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Adds b <dodf>PropfrtyChbngfListfnfr</dodf> to thf listfnfr list.
             * Thf listfnfr is rfgistfrfd for bll propfrtifs.
             *
             * @pbrbm l  thf <dodf>PropfrtyChbngfListfnfr</dodf>
             *     to bf bddfd
             */
            publid void bddPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.bddPropfrtyChbngfListfnfr(l);
                } flsf {
                    supfr.bddPropfrtyChbngfListfnfr(l);
                }
            }

            /**
             * Rfmovfs b <dodf>PropfrtyChbngfListfnfr</dodf> from thf
             * listfnfr list. This rfmovfs b <dodf>PropfrtyChbngfListfnfr</dodf>
             * thbt wbs rfgistfrfd for bll propfrtifs.
             *
             * @pbrbm l  thf <dodf>PropfrtyChbngfListfnfr</dodf>
             *    to bf rfmovfd
             */
            publid void rfmovfPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.rfmovfPropfrtyChbngfListfnfr(l);
                } flsf {
                    supfr.rfmovfPropfrtyChbngfListfnfr(l);
                }
            }

            /**
             * Gfts thf <dodf>AddfssiblfAdtion</dodf> bssodibtfd with this
             * objfdt if onf fxists.  Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @rfturn thf <dodf>AddfssiblfAdtion</dodf>, or <dodf>null</dodf>
             */
            publid AddfssiblfAdtion gftAddfssiblfAdtion() {
                rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfAdtion();
            }

            /**
             * Gfts thf <dodf>AddfssiblfComponfnt</dodf> bssodibtfd with
             * this objfdt if onf fxists.  Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @rfturn thf <dodf>AddfssiblfComponfnt</dodf>, or
             *    <dodf>null</dodf>
             */
            publid AddfssiblfComponfnt gftAddfssiblfComponfnt() {
                rfturn this; // to ovfrridf gftBounds()
            }

            /**
             * Gfts thf <dodf>AddfssiblfSflfdtion</dodf> bssodibtfd with
             * this objfdt if onf fxists.  Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @rfturn thf <dodf>AddfssiblfSflfdtion</dodf>, or
             *    <dodf>null</dodf>
             */
            publid AddfssiblfSflfdtion gftAddfssiblfSflfdtion() {
                rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfSflfdtion();
            }

            /**
             * Gfts thf <dodf>AddfssiblfTfxt</dodf> bssodibtfd with this
             * objfdt if onf fxists.  Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @rfturn thf <dodf>AddfssiblfTfxt</dodf>, or <dodf>null</dodf>
             */
            publid AddfssiblfTfxt gftAddfssiblfTfxt() {
                rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfTfxt();
            }

            /**
             * Gfts thf <dodf>AddfssiblfVbluf</dodf> bssodibtfd with
             * this objfdt if onf fxists.  Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @rfturn thf <dodf>AddfssiblfVbluf</dodf>, or <dodf>null</dodf>
             */
            publid AddfssiblfVbluf gftAddfssiblfVbluf() {
                rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfVbluf();
            }


        // AddfssiblfComponfnt mfthods

            /**
             * Gfts thf bbdkground dolor of this objfdt.
             *
             * @rfturn thf bbdkground dolor, if supportfd, of thf objfdt;
             *     othfrwisf, <dodf>null</dodf>
             */
            publid Color gftBbdkground() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftBbdkground();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftBbdkground();
                    } flsf {
                        rfturn null;
                    }
                }
            }

            /**
             * Sfts thf bbdkground dolor of this objfdt.
             *
             * @pbrbm d thf nfw <dodf>Color</dodf> for thf bbdkground
             */
            publid void sftBbdkground(Color d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftBbdkground(d);
                } flsf {
                    Componfnt dp = gftCurrfntComponfnt();
                    if (dp != null) {
                        dp.sftBbdkground(d);
                    }
                }
            }

            /**
             * Gfts thf forfground dolor of this objfdt.
             *
             * @rfturn thf forfground dolor, if supportfd, of thf objfdt;
             *     othfrwisf, <dodf>null</dodf>
             */
            publid Color gftForfground() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftForfground();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftForfground();
                    } flsf {
                        rfturn null;
                    }
                }
            }

            /**
             * Sfts thf forfground dolor of this objfdt.
             *
             * @pbrbm d thf nfw <dodf>Color</dodf> for thf forfground
             */
            publid void sftForfground(Color d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftForfground(d);
                } flsf {
                    Componfnt dp = gftCurrfntComponfnt();
                    if (dp != null) {
                        dp.sftForfground(d);
                    }
                }
            }

            /**
             * Gfts thf <dodf>Cursor</dodf> of this objfdt.
             *
             * @rfturn thf <dodf>Cursor</dodf>, if supportfd,
             *    of thf objfdt; othfrwisf, <dodf>null</dodf>
             */
            publid Cursor gftCursor() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftCursor();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftCursor();
                    } flsf {
                        Addfssiblf bp = gftAddfssiblfPbrfnt();
                        if (bp instbndfof AddfssiblfComponfnt) {
                            rfturn ((AddfssiblfComponfnt) bp).gftCursor();
                        } flsf {
                            rfturn null;
                        }
                    }
                }
            }

            /**
             * Sfts thf <dodf>Cursor</dodf> of this objfdt.
             *
             * @pbrbm d thf nfw <dodf>Cursor</dodf> for thf objfdt
             */
            publid void sftCursor(Cursor d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftCursor(d);
                } flsf {
                    Componfnt dp = gftCurrfntComponfnt();
                    if (dp != null) {
                        dp.sftCursor(d);
                    }
                }
            }

            /**
             * Gfts thf <dodf>Font</dodf> of this objfdt.
             *
             * @rfturn thf <dodf>Font</dodf>,if supportfd,
             *   for thf objfdt; othfrwisf, <dodf>null</dodf>
             */
            publid Font gftFont() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftFont();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftFont();
                    } flsf {
                        rfturn null;
                    }
                }
            }

            /**
             * Sfts thf <dodf>Font</dodf> of this objfdt.
             *
             * @pbrbm f thf nfw <dodf>Font</dodf> for thf objfdt
             */
            publid void sftFont(Font f) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftFont(f);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftFont(f);
                    }
                }
            }

            /**
             * Gfts thf <dodf>FontMftrids</dodf> of this objfdt.
             *
             * @pbrbm f thf <dodf>Font</dodf>
             * @rfturn thf <dodf>FontMftrids</dodf> objfdt, if supportfd;
             *    othfrwisf <dodf>null</dodf>
             * @sff #gftFont
             */
            publid FontMftrids gftFontMftrids(Font f) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftFontMftrids(f);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftFontMftrids(f);
                    } flsf {
                        rfturn null;
                    }
                }
            }

            /**
             * Dftfrminfs if thf objfdt is fnbblfd.
             *
             * @rfturn truf if objfdt is fnbblfd; othfrwisf, fblsf
             */
            publid boolfbn isEnbblfd() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).isEnbblfd();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.isEnbblfd();
                    } flsf {
                        rfturn fblsf;
                    }
                }
            }

            /**
             * Sfts thf fnbblfd stbtf of thf objfdt.
             *
             * @pbrbm b if truf, fnbblfs this objfdt; othfrwisf, disbblfs it
             */
            publid void sftEnbblfd(boolfbn b) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftEnbblfd(b);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftEnbblfd(b);
                    }
                }
            }

            /**
             * Dftfrminfs if this objfdt is visiblf.  Notf: this mfbns thbt thf
             * objfdt intfnds to bf visiblf; howfvfr, it mby not in fbdt bf
             * showing on thf sdrffn bfdbusf onf of thf objfdts thbt this objfdt
             * is dontbinfd by is not visiblf.  To dftfrminf if bn objfdt is
             * showing on thf sdrffn, usf <dodf>isShowing</dodf>.
             *
             * @rfturn truf if objfdt is visiblf; othfrwisf, fblsf
             */
            publid boolfbn isVisiblf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).isVisiblf();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.isVisiblf();
                    } flsf {
                        rfturn fblsf;
                    }
                }
            }

            /**
             * Sfts thf visiblf stbtf of thf objfdt.
             *
             * @pbrbm b if truf, shows this objfdt; othfrwisf, hidfs it
             */
            publid void sftVisiblf(boolfbn b) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftVisiblf(b);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftVisiblf(b);
                    }
                }
            }

            /**
             * Dftfrminfs if thf objfdt is showing.  This is dftfrminfd
             * by dhfdking thf visibility of thf objfdt bnd bndfstors
             * of thf objfdt.  Notf: this will rfturn truf fvfn if thf
             * objfdt is obsdurfd by bnothfr (for fxbmplf,
             * it hbppfns to bf undfrnfbth b mfnu thbt wbs pullfd down).
             *
             * @rfturn truf if thf objfdt is showing; othfrwisf, fblsf
             */
            publid boolfbn isShowing() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    if (bd.gftAddfssiblfPbrfnt() != null) {
                        rfturn ((AddfssiblfComponfnt) bd).isShowing();
                    } flsf {
                        // Fixfs 4529616 - AddfssiblfJTbblfCfll.isShowing()
                        // rfturns fblsf whfn thf dfll on thf sdrffn
                        // if no pbrfnt
                        rfturn isVisiblf();
                    }
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.isShowing();
                    } flsf {
                        rfturn fblsf;
                    }
                }
            }

            /**
             * Chfdks whfthfr thf spfdififd point is within this
             * objfdt's bounds, whfrf thf point's x bnd y doordinbtfs
             * brf dffinfd to bf rflbtivf to thf doordinbtf systfm of
             * thf objfdt.
             *
             * @pbrbm p thf <dodf>Point</dodf> rflbtivf to thf
             *    doordinbtf systfm of thf objfdt
             * @rfturn truf if objfdt dontbins <dodf>Point</dodf>;
             *    othfrwisf fblsf
             */
            publid boolfbn dontbins(Point p) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    Rfdtbnglf r = ((AddfssiblfComponfnt) bd).gftBounds();
                    rfturn r.dontbins(p);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        Rfdtbnglf r = d.gftBounds();
                        rfturn r.dontbins(p);
                    } flsf {
                        rfturn gftBounds().dontbins(p);
                    }
                }
            }

            /**
             * Rfturns thf lodbtion of thf objfdt on thf sdrffn.
             *
             * @rfturn lodbtion of objfdt on sdrffn -- dbn bf
             *    <dodf>null</dodf> if this objfdt is not on thf sdrffn
             */
            publid Point gftLodbtionOnSdrffn() {
                if (pbrfnt != null && pbrfnt.isShowing()) {
                    Point pbrfntLodbtion = pbrfnt.gftLodbtionOnSdrffn();
                    Point domponfntLodbtion = gftLodbtion();
                    domponfntLodbtion.trbnslbtf(pbrfntLodbtion.x, pbrfntLodbtion.y);
                    rfturn domponfntLodbtion;
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Gfts thf lodbtion of thf objfdt rflbtivf to thf pbrfnt
             * in thf form of b point spfdifying thf objfdt's
             * top-lfft dornfr in thf sdrffn's doordinbtf spbdf.
             *
             * @rfturn bn instbndf of <dodf>Point</dodf> rfprfsfnting
             *    thf top-lfft dornfr of thf objfdt's bounds in thf
             *    doordinbtf spbdf of thf sdrffn; <dodf>null</dodf> if
             *    this objfdt or its pbrfnt brf not on thf sdrffn
             */
            publid Point gftLodbtion() {
                if (pbrfnt != null) {
                    Rfdtbnglf r = pbrfnt.gftCfllRfdt(row, dolumn, fblsf);
                    if (r != null) {
                        rfturn r.gftLodbtion();
                    }
                }
                rfturn null;
            }

            /**
             * Sfts thf lodbtion of thf objfdt rflbtivf to thf pbrfnt.
             */
            publid void sftLodbtion(Point p) {
//              if ((pbrfnt != null)  && (pbrfnt.dontbins(p))) {
//                  fnsurfIndfxIsVisiblf(indfxInPbrfnt);
//              }
            }

            publid Rfdtbnglf gftBounds() {
                if (pbrfnt != null) {
                    rfturn pbrfnt.gftCfllRfdt(row, dolumn, fblsf);
                } flsf {
                    rfturn null;
                }
            }

            publid void sftBounds(Rfdtbnglf r) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftBounds(r);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftBounds(r);
                    }
                }
            }

            publid Dimfnsion gftSizf() {
                if (pbrfnt != null) {
                    Rfdtbnglf r = pbrfnt.gftCfllRfdt(row, dolumn, fblsf);
                    if (r != null) {
                        rfturn r.gftSizf();
                    }
                }
                rfturn null;
            }

            publid void sftSizf (Dimfnsion d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftSizf(d);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftSizf(d);
                    }
                }
            }

            publid Addfssiblf gftAddfssiblfAt(Point p) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftAddfssiblfAt(p);
                } flsf {
                    rfturn null;
                }
            }

            publid boolfbn isFodusTrbvfrsbblf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).isFodusTrbvfrsbblf();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.isFodusTrbvfrsbblf();
                    } flsf {
                        rfturn fblsf;
                    }
                }
            }

            publid void rfqufstFodus() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).rfqufstFodus();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.rfqufstFodus();
                    }
                }
            }

            publid void bddFodusListfnfr(FodusListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).bddFodusListfnfr(l);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.bddFodusListfnfr(l);
                    }
                }
            }

            publid void rfmovfFodusListfnfr(FodusListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).rfmovfFodusListfnfr(l);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.rfmovfFodusListfnfr(l);
                    }
                }
            }

        } // innfr dlbss AddfssiblfJTbblfCfll

        // Bfgin AddfssiblfJTbblfHfbdfr ========== // TIGER - 4715503

        /**
         * This dlbss implfmfnts bddfssibility for JTbblf hfbdfr dflls.
         */
        privbtf dlbss AddfssiblfJTbblfHfbdfrCfll fxtfnds AddfssiblfContfxt
            implfmfnts Addfssiblf, AddfssiblfComponfnt {

            privbtf int row;
            privbtf int dolumn;
            privbtf JTbblfHfbdfr pbrfnt;
            privbtf Componfnt rfndfrfrComponfnt;

            /**
             * Construdts bn <dodf>AddfssiblfJTbblfHfbdfrEntry</dodf> instbndf.
             *
             * @pbrbm row hfbdfr dfll row indfx
             * @pbrbm dolumn hfbdfr dfll dolumn indfx
             * @pbrbm pbrfnt hfbdfr dfll pbrfnt
             * @pbrbm rfndfrfrComponfnt domponfnt thbt rfndfrs thf hfbdfr dfll
             */
            publid AddfssiblfJTbblfHfbdfrCfll(int row, int dolumn,
                                              JTbblfHfbdfr pbrfnt,
                                              Componfnt rfndfrfrComponfnt) {
                this.row = row;
                this.dolumn = dolumn;
                this.pbrfnt = pbrfnt;
                this.rfndfrfrComponfnt = rfndfrfrComponfnt;
                this.sftAddfssiblfPbrfnt(pbrfnt);
            }

            /**
             * Gfts thf <dodf>AddfssiblfContfxt</dodf> bssodibtfd with this
             * domponfnt. In thf implfmfntbtion of thf Jbvb Addfssibility
             * API for this dlbss, rfturn this objfdt, whidh is its own
             * <dodf>AddfssiblfContfxt</dodf>.
             *
             * @rfturn this objfdt
             */
            publid AddfssiblfContfxt gftAddfssiblfContfxt() {
                rfturn this;
            }

            /*
             * Rfturns thf AddfssiblfContfxt for thf hfbdfr dfll
             * rfndfrfr.
             */
            privbtf AddfssiblfContfxt gftCurrfntAddfssiblfContfxt() {
                rfturn rfndfrfrComponfnt.gftAddfssiblfContfxt();
            }

            /*
             * Rfturns thf domponfnt thbt rfndfrs thf hfbdfr dfll.
             */
            privbtf Componfnt gftCurrfntComponfnt() {
                rfturn rfndfrfrComponfnt;
            }

            // AddfssiblfContfxt mfthods ==========

            /**
             * Gfts thf bddfssiblf nbmf of this objfdt.
             *
             * @rfturn thf lodblizfd nbmf of thf objfdt; <dodf>null</dodf>
             *     if this objfdt dofs not hbvf b nbmf
             */
            publid String gftAddfssiblfNbmf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    String nbmf = bd.gftAddfssiblfNbmf();
                    if ((nbmf != null) && (nbmf != "")) {
                        rfturn bd.gftAddfssiblfNbmf();
                    }
                }
                if ((bddfssiblfNbmf != null) && (bddfssiblfNbmf != "")) {
                    rfturn bddfssiblfNbmf;
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Sfts thf lodblizfd bddfssiblf nbmf of this objfdt.
             *
             * @pbrbm s thf nfw lodblizfd nbmf of thf objfdt
             */
            publid void sftAddfssiblfNbmf(String s) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.sftAddfssiblfNbmf(s);
                } flsf {
                    supfr.sftAddfssiblfNbmf(s);
                }
            }

            /**
             * Gfts thf bddfssiblf dfsdription of this objfdt.
             *
             * @rfturn thf lodblizfd dfsdription of thf objfdt;
             *     <dodf>null</dodf> if this objfdt dofs not hbvf
             *     b dfsdription
             */
            publid String gftAddfssiblfDfsdription() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftAddfssiblfDfsdription();
                } flsf {
                    rfturn supfr.gftAddfssiblfDfsdription();
                }
            }

            /**
             * Sfts thf bddfssiblf dfsdription of this objfdt.
             *
             * @pbrbm s thf nfw lodblizfd dfsdription of thf objfdt
             */
            publid void sftAddfssiblfDfsdription(String s) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.sftAddfssiblfDfsdription(s);
                } flsf {
                    supfr.sftAddfssiblfDfsdription(s);
                }
            }

            /**
             * Gfts thf rolf of this objfdt.
             *
             * @rfturn bn instbndf of <dodf>AddfssiblfRolf</dodf>
             *      dfsdribing thf rolf of thf objfdt
             * @sff AddfssiblfRolf
             */
            publid AddfssiblfRolf gftAddfssiblfRolf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftAddfssiblfRolf();
                } flsf {
                    rfturn AddfssiblfRolf.UNKNOWN;
                }
            }

            /**
             * Gfts thf stbtf sft of this objfdt.
             *
             * @rfturn bn instbndf of <dodf>AddfssiblfStbtfSft</dodf>
             *     dontbining thf durrfnt stbtf sft of thf objfdt
             * @sff AddfssiblfStbtf
             */
            publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                AddfssiblfStbtfSft bs = null;

                if (bd != null) {
                    bs = bd.gftAddfssiblfStbtfSft();
                }
                if (bs == null) {
                    bs = nfw AddfssiblfStbtfSft();
                }
                Rfdtbnglf rjt = JTbblf.this.gftVisiblfRfdt();
                Rfdtbnglf rdfll = JTbblf.this.gftCfllRfdt(row, dolumn, fblsf);
                if (rjt.intfrsfdts(rdfll)) {
                    bs.bdd(AddfssiblfStbtf.SHOWING);
                } flsf {
                    if (bs.dontbins(AddfssiblfStbtf.SHOWING)) {
                         bs.rfmovf(AddfssiblfStbtf.SHOWING);
                    }
                }
                if (JTbblf.this.isCfllSflfdtfd(row, dolumn)) {
                    bs.bdd(AddfssiblfStbtf.SELECTED);
                } flsf if (bs.dontbins(AddfssiblfStbtf.SELECTED)) {
                    bs.rfmovf(AddfssiblfStbtf.SELECTED);
                }
                if ((row == gftSflfdtfdRow()) && (dolumn == gftSflfdtfdColumn())) {
                    bs.bdd(AddfssiblfStbtf.ACTIVE);
                }
                bs.bdd(AddfssiblfStbtf.TRANSIENT);
                rfturn bs;
            }

            /**
             * Gfts thf <dodf>Addfssiblf</dodf> pbrfnt of this objfdt.
             *
             * @rfturn thf Addfssiblf pbrfnt of this objfdt;
             *     <dodf>null</dodf> if this objfdt dofs not
             *     hbvf bn <dodf>Addfssiblf</dodf> pbrfnt
             */
            publid Addfssiblf gftAddfssiblfPbrfnt() {
                rfturn pbrfnt;
            }

            /**
             * Gfts thf indfx of this objfdt in its bddfssiblf pbrfnt.
             *
             * @rfturn thf indfx of this objfdt in its pbrfnt; -1 if this
             *     objfdt dofs not hbvf bn bddfssiblf pbrfnt
             * @sff #gftAddfssiblfPbrfnt
             */
            publid int gftAddfssiblfIndfxInPbrfnt() {
                rfturn dolumn;
            }

            /**
             * Rfturns thf numbfr of bddfssiblf dhildrfn in thf objfdt.
             *
             * @rfturn thf numbfr of bddfssiblf dhildrfn in thf objfdt
             */
            publid int gftAddfssiblfChildrfnCount() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftAddfssiblfChildrfnCount();
                } flsf {
                    rfturn 0;
                }
            }

            /**
             * Rfturns thf spfdififd <dodf>Addfssiblf</dodf> dhild of thf
             * objfdt.
             *
             * @pbrbm i zfro-bbsfd indfx of dhild
             * @rfturn thf <dodf>Addfssiblf</dodf> dhild of thf objfdt
             */
            publid Addfssiblf gftAddfssiblfChild(int i) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    Addfssiblf bddfssiblfChild = bd.gftAddfssiblfChild(i);
                    bd.sftAddfssiblfPbrfnt(this);
                    rfturn bddfssiblfChild;
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Gfts thf lodblf of thf domponfnt. If thf domponfnt
             * dofs not hbvf b lodblf, thfn thf lodblf of its pbrfnt
             * is rfturnfd.
             *
             * @rfturn this domponfnt's lodblf; if this domponfnt dofs
             *    not hbvf b lodblf, thf lodblf of its pbrfnt is rfturnfd
             * @fxdfption IllfgblComponfntStbtfExdfption if thf
             *    <dodf>Componfnt</dodf> dofs not hbvf its own lodblf
             *    bnd hbs not yft bffn bddfd to b dontbinmfnt hifrbrdhy
             *    sudh thbt thf lodblf dbn bf dftfrminfd from thf
             *    dontbining pbrfnt
             * @sff #sftLodblf
             */
            publid Lodblf gftLodblf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftLodblf();
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Adds b <dodf>PropfrtyChbngfListfnfr</dodf> to thf listfnfr list.
             * Thf listfnfr is rfgistfrfd for bll propfrtifs.
             *
             * @pbrbm l  thf <dodf>PropfrtyChbngfListfnfr</dodf>
             *     to bf bddfd
             */
            publid void bddPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.bddPropfrtyChbngfListfnfr(l);
                } flsf {
                    supfr.bddPropfrtyChbngfListfnfr(l);
                }
            }

            /**
             * Rfmovfs b <dodf>PropfrtyChbngfListfnfr</dodf> from thf
             * listfnfr list. This rfmovfs b <dodf>PropfrtyChbngfListfnfr</dodf>
             * thbt wbs rfgistfrfd for bll propfrtifs.
             *
             * @pbrbm l  thf <dodf>PropfrtyChbngfListfnfr</dodf>
             *    to bf rfmovfd
             */
            publid void rfmovfPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.rfmovfPropfrtyChbngfListfnfr(l);
                } flsf {
                    supfr.rfmovfPropfrtyChbngfListfnfr(l);
                }
            }

            /**
             * Gfts thf <dodf>AddfssiblfAdtion</dodf> bssodibtfd with this
             * objfdt if onf fxists.  Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @rfturn thf <dodf>AddfssiblfAdtion</dodf>, or <dodf>null</dodf>
             */
            publid AddfssiblfAdtion gftAddfssiblfAdtion() {
                rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfAdtion();
            }

            /**
             * Gfts thf <dodf>AddfssiblfComponfnt</dodf> bssodibtfd with
             * this objfdt if onf fxists.  Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @rfturn thf <dodf>AddfssiblfComponfnt</dodf>, or
             *    <dodf>null</dodf>
             */
            publid AddfssiblfComponfnt gftAddfssiblfComponfnt() {
                rfturn this; // to ovfrridf gftBounds()
            }

            /**
             * Gfts thf <dodf>AddfssiblfSflfdtion</dodf> bssodibtfd with
             * this objfdt if onf fxists.  Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @rfturn thf <dodf>AddfssiblfSflfdtion</dodf>, or
             *    <dodf>null</dodf>
             */
            publid AddfssiblfSflfdtion gftAddfssiblfSflfdtion() {
                rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfSflfdtion();
            }

            /**
             * Gfts thf <dodf>AddfssiblfTfxt</dodf> bssodibtfd with this
             * objfdt if onf fxists.  Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @rfturn thf <dodf>AddfssiblfTfxt</dodf>, or <dodf>null</dodf>
             */
            publid AddfssiblfTfxt gftAddfssiblfTfxt() {
                rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfTfxt();
            }

            /**
             * Gfts thf <dodf>AddfssiblfVbluf</dodf> bssodibtfd with
             * this objfdt if onf fxists.  Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @rfturn thf <dodf>AddfssiblfVbluf</dodf>, or <dodf>null</dodf>
             */
            publid AddfssiblfVbluf gftAddfssiblfVbluf() {
                rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfVbluf();
            }


            // AddfssiblfComponfnt mfthods ==========

            /**
             * Gfts thf bbdkground dolor of this objfdt.
             *
             * @rfturn thf bbdkground dolor, if supportfd, of thf objfdt;
             *     othfrwisf, <dodf>null</dodf>
             */
            publid Color gftBbdkground() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftBbdkground();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftBbdkground();
                    } flsf {
                        rfturn null;
                    }
                }
            }

            /**
             * Sfts thf bbdkground dolor of this objfdt.
             *
             * @pbrbm d thf nfw <dodf>Color</dodf> for thf bbdkground
             */
            publid void sftBbdkground(Color d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftBbdkground(d);
                } flsf {
                    Componfnt dp = gftCurrfntComponfnt();
                    if (dp != null) {
                        dp.sftBbdkground(d);
                    }
                }
            }

            /**
             * Gfts thf forfground dolor of this objfdt.
             *
             * @rfturn thf forfground dolor, if supportfd, of thf objfdt;
             *     othfrwisf, <dodf>null</dodf>
             */
            publid Color gftForfground() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftForfground();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftForfground();
                    } flsf {
                        rfturn null;
                    }
                }
            }

            /**
             * Sfts thf forfground dolor of this objfdt.
             *
             * @pbrbm d thf nfw <dodf>Color</dodf> for thf forfground
             */
            publid void sftForfground(Color d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftForfground(d);
                } flsf {
                    Componfnt dp = gftCurrfntComponfnt();
                    if (dp != null) {
                        dp.sftForfground(d);
                    }
                }
            }

            /**
             * Gfts thf <dodf>Cursor</dodf> of this objfdt.
             *
             * @rfturn thf <dodf>Cursor</dodf>, if supportfd,
             *    of thf objfdt; othfrwisf, <dodf>null</dodf>
             */
            publid Cursor gftCursor() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftCursor();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftCursor();
                    } flsf {
                        Addfssiblf bp = gftAddfssiblfPbrfnt();
                        if (bp instbndfof AddfssiblfComponfnt) {
                            rfturn ((AddfssiblfComponfnt) bp).gftCursor();
                        } flsf {
                            rfturn null;
                        }
                    }
                }
            }

            /**
             * Sfts thf <dodf>Cursor</dodf> of this objfdt.
             *
             * @pbrbm d thf nfw <dodf>Cursor</dodf> for thf objfdt
             */
            publid void sftCursor(Cursor d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftCursor(d);
                } flsf {
                    Componfnt dp = gftCurrfntComponfnt();
                    if (dp != null) {
                        dp.sftCursor(d);
                    }
                }
            }

            /**
             * Gfts thf <dodf>Font</dodf> of this objfdt.
             *
             * @rfturn thf <dodf>Font</dodf>,if supportfd,
             *   for thf objfdt; othfrwisf, <dodf>null</dodf>
             */
            publid Font gftFont() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftFont();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftFont();
                    } flsf {
                        rfturn null;
                    }
                }
            }

            /**
             * Sfts thf <dodf>Font</dodf> of this objfdt.
             *
             * @pbrbm f thf nfw <dodf>Font</dodf> for thf objfdt
             */
            publid void sftFont(Font f) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftFont(f);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftFont(f);
                    }
                }
            }

            /**
             * Gfts thf <dodf>FontMftrids</dodf> of this objfdt.
             *
             * @pbrbm f thf <dodf>Font</dodf>
             * @rfturn thf <dodf>FontMftrids</dodf> objfdt, if supportfd;
             *    othfrwisf <dodf>null</dodf>
             * @sff #gftFont
             */
            publid FontMftrids gftFontMftrids(Font f) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftFontMftrids(f);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftFontMftrids(f);
                    } flsf {
                        rfturn null;
                    }
                }
            }

            /**
             * Dftfrminfs if thf objfdt is fnbblfd.
             *
             * @rfturn truf if objfdt is fnbblfd; othfrwisf, fblsf
             */
            publid boolfbn isEnbblfd() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).isEnbblfd();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.isEnbblfd();
                    } flsf {
                        rfturn fblsf;
                    }
                }
            }

            /**
             * Sfts thf fnbblfd stbtf of thf objfdt.
             *
             * @pbrbm b if truf, fnbblfs this objfdt; othfrwisf, disbblfs it
             */
            publid void sftEnbblfd(boolfbn b) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftEnbblfd(b);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftEnbblfd(b);
                    }
                }
            }

            /**
             * Dftfrminfs if this objfdt is visiblf.  Notf: this mfbns thbt thf
             * objfdt intfnds to bf visiblf; howfvfr, it mby not in fbdt bf
             * showing on thf sdrffn bfdbusf onf of thf objfdts thbt this objfdt
             * is dontbinfd by is not visiblf.  To dftfrminf if bn objfdt is
             * showing on thf sdrffn, usf <dodf>isShowing</dodf>.
             *
             * @rfturn truf if objfdt is visiblf; othfrwisf, fblsf
             */
            publid boolfbn isVisiblf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).isVisiblf();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.isVisiblf();
                    } flsf {
                        rfturn fblsf;
                    }
                }
            }

            /**
             * Sfts thf visiblf stbtf of thf objfdt.
             *
             * @pbrbm b if truf, shows this objfdt; othfrwisf, hidfs it
             */
            publid void sftVisiblf(boolfbn b) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftVisiblf(b);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftVisiblf(b);
                    }
                }
            }

            /**
             * Dftfrminfs if thf objfdt is showing.  This is dftfrminfd
             * by dhfdking thf visibility of thf objfdt bnd bndfstors
             * of thf objfdt.  Notf: this will rfturn truf fvfn if thf
             * objfdt is obsdurfd by bnothfr (for fxbmplf,
             * it hbppfns to bf undfrnfbth b mfnu thbt wbs pullfd down).
             *
             * @rfturn truf if thf objfdt is showing; othfrwisf, fblsf
             */
            publid boolfbn isShowing() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    if (bd.gftAddfssiblfPbrfnt() != null) {
                        rfturn ((AddfssiblfComponfnt) bd).isShowing();
                    } flsf {
                        // Fixfs 4529616 - AddfssiblfJTbblfCfll.isShowing()
                        // rfturns fblsf whfn thf dfll on thf sdrffn
                        // if no pbrfnt
                        rfturn isVisiblf();
                    }
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.isShowing();
                    } flsf {
                        rfturn fblsf;
                    }
                }
            }

            /**
             * Chfdks whfthfr thf spfdififd point is within this
             * objfdt's bounds, whfrf thf point's x bnd y doordinbtfs
             * brf dffinfd to bf rflbtivf to thf doordinbtf systfm of
             * thf objfdt.
             *
             * @pbrbm p thf <dodf>Point</dodf> rflbtivf to thf
             *    doordinbtf systfm of thf objfdt
             * @rfturn truf if objfdt dontbins <dodf>Point</dodf>;
             *    othfrwisf fblsf
             */
            publid boolfbn dontbins(Point p) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    Rfdtbnglf r = ((AddfssiblfComponfnt) bd).gftBounds();
                    rfturn r.dontbins(p);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        Rfdtbnglf r = d.gftBounds();
                        rfturn r.dontbins(p);
                    } flsf {
                        rfturn gftBounds().dontbins(p);
                    }
                }
            }

            /**
             * Rfturns thf lodbtion of thf objfdt on thf sdrffn.
             *
             * @rfturn lodbtion of objfdt on sdrffn -- dbn bf
             *    <dodf>null</dodf> if this objfdt is not on thf sdrffn
             */
            publid Point gftLodbtionOnSdrffn() {
                if (pbrfnt != null && pbrfnt.isShowing()) {
                    Point pbrfntLodbtion = pbrfnt.gftLodbtionOnSdrffn();
                    Point domponfntLodbtion = gftLodbtion();
                    domponfntLodbtion.trbnslbtf(pbrfntLodbtion.x, pbrfntLodbtion.y);
                    rfturn domponfntLodbtion;
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Gfts thf lodbtion of thf objfdt rflbtivf to thf pbrfnt
             * in thf form of b point spfdifying thf objfdt's
             * top-lfft dornfr in thf sdrffn's doordinbtf spbdf.
             *
             * @rfturn bn instbndf of <dodf>Point</dodf> rfprfsfnting
             *    thf top-lfft dornfr of thf objfdt's bounds in thf
             *    doordinbtf spbdf of thf sdrffn; <dodf>null</dodf> if
             *    this objfdt or its pbrfnt brf not on thf sdrffn
             */
            publid Point gftLodbtion() {
                if (pbrfnt != null) {
                    Rfdtbnglf r = pbrfnt.gftHfbdfrRfdt(dolumn);
                    if (r != null) {
                        rfturn r.gftLodbtion();
                    }
                }
                rfturn null;
            }

            /**
             * Sfts thf lodbtion of thf objfdt rflbtivf to thf pbrfnt.
             * @pbrbm p thf nfw position for thf top-lfft dornfr
             * @sff #gftLodbtion
             */
            publid void sftLodbtion(Point p) {
            }

            /**
             * Gfts thf bounds of this objfdt in thf form of b Rfdtbnglf objfdt.
             * Thf bounds spfdify this objfdt's width, hfight, bnd lodbtion
             * rflbtivf to its pbrfnt.
             *
             * @rfturn A rfdtbnglf indidbting this domponfnt's bounds; null if
             * this objfdt is not on thf sdrffn.
             * @sff #dontbins
             */
            publid Rfdtbnglf gftBounds() {
                if (pbrfnt != null) {
                    rfturn pbrfnt.gftHfbdfrRfdt(dolumn);
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Sfts thf bounds of this objfdt in thf form of b Rfdtbnglf objfdt.
             * Thf bounds spfdify this objfdt's width, hfight, bnd lodbtion
             * rflbtivf to its pbrfnt.
             *
             * @pbrbm r rfdtbnglf indidbting this domponfnt's bounds
             * @sff #gftBounds
             */
            publid void sftBounds(Rfdtbnglf r) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftBounds(r);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftBounds(r);
                    }
                }
            }

            /**
             * Rfturns thf sizf of this objfdt in thf form of b Dimfnsion objfdt.
             * Thf hfight fifld of thf Dimfnsion objfdt dontbins this objfdt's
             * hfight, bnd thf width fifld of thf Dimfnsion objfdt dontbins this
             * objfdt's width.
             *
             * @rfturn A Dimfnsion objfdt thbt indidbtfs thf sizf of this domponfnt;
             * null if this objfdt is not on thf sdrffn
             * @sff #sftSizf
             */
            publid Dimfnsion gftSizf() {
                if (pbrfnt != null) {
                    Rfdtbnglf r = pbrfnt.gftHfbdfrRfdt(dolumn);
                    if (r != null) {
                        rfturn r.gftSizf();
                    }
                }
                rfturn null;
            }

            /**
             * Rfsizfs this objfdt so thbt it hbs width bnd hfight.
             *
             * @pbrbm d Thf dimfnsion spfdifying thf nfw sizf of thf objfdt.
             * @sff #gftSizf
             */
            publid void sftSizf (Dimfnsion d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftSizf(d);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftSizf(d);
                    }
                }
            }

            /**
             * Rfturns thf Addfssiblf dhild, if onf fxists, dontbinfd bt thf lodbl
             * doordinbtf Point.
             *
             * @pbrbm p Thf point rflbtivf to thf doordinbtf systfm of this objfdt.
             * @rfturn thf Addfssiblf, if it fxists, bt thf spfdififd lodbtion;
             * othfrwisf null
             */
            publid Addfssiblf gftAddfssiblfAt(Point p) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftAddfssiblfAt(p);
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Rfturns whfthfr this objfdt dbn bddfpt fodus or not.   Objfdts thbt
             * dbn bddfpt fodus will blso hbvf thf AddfssiblfStbtf.FOCUSABLE stbtf
             * sft in thfir AddfssiblfStbtfSfts.
             *
             * @rfturn truf if objfdt dbn bddfpt fodus; othfrwisf fblsf
             * @sff AddfssiblfContfxt#gftAddfssiblfStbtfSft
             * @sff AddfssiblfStbtf#FOCUSABLE
             * @sff AddfssiblfStbtf#FOCUSED
             * @sff AddfssiblfStbtfSft
             */
            publid boolfbn isFodusTrbvfrsbblf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).isFodusTrbvfrsbblf();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.isFodusTrbvfrsbblf();
                    } flsf {
                        rfturn fblsf;
                    }
                }
            }

            /**
             * Rfqufsts fodus for this objfdt.  If this objfdt dbnnot bddfpt fodus,
             * nothing will hbppfn.  Othfrwisf, thf objfdt will bttfmpt to tbkf
             * fodus.
             * @sff #isFodusTrbvfrsbblf
             */
            publid void rfqufstFodus() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).rfqufstFodus();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.rfqufstFodus();
                    }
                }
            }

            /**
             * Adds thf spfdififd fodus listfnfr to rfdfivf fodus fvfnts from this
             * domponfnt.
             *
             * @pbrbm l thf fodus listfnfr
             * @sff #rfmovfFodusListfnfr
             */
            publid void bddFodusListfnfr(FodusListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).bddFodusListfnfr(l);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.bddFodusListfnfr(l);
                    }
                }
            }

            /**
             * Rfmovfs thf spfdififd fodus listfnfr so it no longfr rfdfivfs fodus
             * fvfnts from this domponfnt.
             *
             * @pbrbm l thf fodus listfnfr
             * @sff #bddFodusListfnfr
             */
            publid void rfmovfFodusListfnfr(FodusListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).rfmovfFodusListfnfr(l);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.rfmovfFodusListfnfr(l);
                    }
                }
            }

        } // innfr dlbss AddfssiblfJTbblfHfbdfrCfll

    }  // innfr dlbss AddfssiblfJTbblf

}  // End of Clbss JTbblf
