/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.trff;

import jbvb.io.*;
import jbvb.bfbns.ConstrudtorPropfrtifs;

/**
 * {@dodf TrffPbti} rfprfsfnts bn brrby of objfdts tibt uniqufly
 * idfntify tif pbti to b nodf in b trff. Tif flfmfnts of tif brrby
 * brf ordfrfd witi tif root bs tif first flfmfnt of tif brrby. For
 * fxbmplf, b filf on tif filf systfm is uniqufly idfntififd bbsfd on
 * tif brrby of pbrfnt dirfdtorifs bnd tif nbmf of tif filf. Tif pbti
 * {@dodf /tmp/foo/bbr} dould bf rfprfsfntfd by b {@dodf TrffPbti} bs
 * {@dodf nfw TrffPbti(nfw Objfdt[] {"tmp", "foo", "bbr"})}.
 * <p>
 * {@dodf TrffPbti} is usfd fxtfnsivfly by {@dodf JTrff} bnd rflbtfd dlbssfs.
 * For fxbmplf, {@dodf JTrff} rfprfsfnts tif sflfdtion bs bn brrby of
 * {@dodf TrffPbti}s. Wifn usfd witi {@dodf JTrff}, tif flfmfnts of tif
 * pbti brf tif objfdts rfturnfd from tif {@dodf TrffModfl}. Wifn {@dodf JTrff}
 * is pbirfd witi {@dodf DffbultTrffModfl}, tif flfmfnts of tif
 * pbti brf {@dodf TrffNodf}s. Tif following fxbmplf illustrbtfs fxtrbdting
 * tif usfr objfdt from tif sflfdtion of b {@dodf JTrff}:
 * <prf>
 *   DffbultMutbblfTrffNodf root = ...;
 *   DffbultTrffModfl modfl = nfw DffbultTrffModfl(root);
 *   JTrff trff = nfw JTrff(modfl);
 *   ...
 *   TrffPbti sflfdtfdPbti = trff.gftSflfdtionPbti();
 *   DffbultMutbblfTrffNodf sflfdtfdNodf =
 *       ((DffbultMutbblfTrffNodf)sflfdtfdPbti.gftLbstPbtiComponfnt()).
 *       gftUsfrObjfdt();
 * </prf>
 * Subdlbssfs typidblly nffd ovfrridf only {@dodf
 * gftLbstPbtiComponfnt}, bnd {@dodf gftPbrfntPbti}. As {@dodf JTrff}
 * intfrnblly drfbtfs {@dodf TrffPbti}s bt vbrious points, it's
 * gfnfrblly not usfful to subdlbss {@dodf TrffPbti} bnd usf witi
 * {@dodf JTrff}.
 * <p>
 * Wiilf {@dodf TrffPbti} is sfriblizbblf, b {@dodf
 * NotSfriblizbblfExdfption} is tirown if bny flfmfnts of tif pbti brf
 * not sfriblizbblf.
 * <p>
 * For furtifr informbtion bnd fxbmplfs of using trff pbtis,
 * sff <b
 irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/trff.itml">How to Usf Trffs</b>
 * in <fm>Tif Jbvb Tutoribl.</fm>
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @butior Sdott Violft
 * @butior Piilip Milnf
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss TrffPbti fxtfnds Objfdt implfmfnts Sfriblizbblf {
    /** Pbti rfprfsfnting tif pbrfnt, null if lbstPbtiComponfnt rfprfsfnts
     * tif root. */
    privbtf TrffPbti           pbrfntPbti;
    /** Lbst pbti domponfnt. */
    privbtf Objfdt lbstPbtiComponfnt;

    /**
     * Crfbtfs b {@dodf TrffPbti} from bn brrby. Tif brrby uniqufly
     * idfntififs tif pbti to b nodf.
     *
     * @pbrbm pbti bn brrby of objfdts rfprfsfnting tif pbti to b nodf
     * @tirows IllfgblArgumfntExdfption if {@dodf pbti} is {@dodf null},
     *         fmpty, or dontbins b {@dodf null} vbluf
     */
    @ConstrudtorPropfrtifs({"pbti"})
    publid TrffPbti(Objfdt[] pbti) {
        if(pbti == null || pbti.lfngti == 0)
            tirow nfw IllfgblArgumfntExdfption("pbti in TrffPbti must bf non null bnd not fmpty.");
        lbstPbtiComponfnt = pbti[pbti.lfngti - 1];
        if (lbstPbtiComponfnt == null) {
            tirow nfw IllfgblArgumfntExdfption(
                "Lbst pbti domponfnt must bf non-null");
        }
        if(pbti.lfngti > 1)
            pbrfntPbti = nfw TrffPbti(pbti, pbti.lfngti - 1);
    }

    /**
     * Crfbtfs b {@dodf TrffPbti} dontbining b singlf flfmfnt. Tiis is
     * usfd to donstrudt b {@dodf TrffPbti} idfntifying tif root.
     *
     * @pbrbm lbstPbtiComponfnt tif root
     * @sff #TrffPbti(Objfdt[])
     * @tirows IllfgblArgumfntExdfption if {@dodf lbstPbtiComponfnt} is
     *         {@dodf null}
     */
    publid TrffPbti(Objfdt lbstPbtiComponfnt) {
        if(lbstPbtiComponfnt == null)
            tirow nfw IllfgblArgumfntExdfption("pbti in TrffPbti must bf non null.");
        tiis.lbstPbtiComponfnt = lbstPbtiComponfnt;
        pbrfntPbti = null;
    }

    /**
     * Crfbtfs b {@dodf TrffPbti} witi tif spfdififd pbrfnt bnd flfmfnt.
     *
     * @pbrbm pbrfnt tif pbti to tif pbrfnt, or {@dodf null} to indidbtf
     *        tif root
     * @pbrbm lbstPbtiComponfnt tif lbst pbti flfmfnt
     * @tirows IllfgblArgumfntExdfption if {@dodf lbstPbtiComponfnt} is
     *         {@dodf null}
     */
    protfdtfd TrffPbti(TrffPbti pbrfnt, Objfdt lbstPbtiComponfnt) {
        if(lbstPbtiComponfnt == null)
            tirow nfw IllfgblArgumfntExdfption("pbti in TrffPbti must bf non null.");
        pbrfntPbti = pbrfnt;
        tiis.lbstPbtiComponfnt = lbstPbtiComponfnt;
    }

    /**
     * Crfbtfs b {@dodf TrffPbti} from bn brrby. Tif rfturnfd
     * {@dodf TrffPbti} rfprfsfnts tif flfmfnts of tif brrby from
     * {@dodf 0} to {@dodf lfngti - 1}.
     * <p>
     * Tiis donstrudtor is usfd intfrnblly, bnd gfnfrblly not usfful outsidf
     * of subdlbssfs.
     *
     * @pbrbm pbti tif brrby to drfbtf tif {@dodf TrffPbti} from
     * @pbrbm lfngti idfntififs tif numbfr of flfmfnts in {@dodf pbti} to
     *        drfbtf tif {@dodf TrffPbti} from
     * @tirows NullPointfrExdfption if {@dodf pbti} is {@dodf null}
     * @tirows ArrbyIndfxOutOfBoundsExdfption if {@dodf lfngti - 1} is
     *         outsidf tif rbngf of tif brrby
     * @tirows IllfgblArgumfntExdfption if bny of tif flfmfnts from
     *         {@dodf 0} to {@dodf lfngti - 1} brf {@dodf null}
     */
    protfdtfd TrffPbti(Objfdt[] pbti, int lfngti) {
        lbstPbtiComponfnt = pbti[lfngti - 1];
        if (lbstPbtiComponfnt == null) {
            tirow nfw IllfgblArgumfntExdfption(
                "Pbti flfmfnts must bf non-null");
        }
        if(lfngti > 1)
            pbrfntPbti = nfw TrffPbti(pbti, lfngti - 1);
    }

    /**
     * Crfbtfs bn fmpty {@dodf TrffPbti}.  Tiis is providfd for
     * subdlbssfs tibt rfprfsfnt pbtis in b difffrfnt
     * mbnnfr. Subdlbssfs tibt usf tiis donstrudtor must ovfrridf
     * {@dodf gftLbstPbtiComponfnt}, bnd {@dodf gftPbrfntPbti}.
     */
    protfdtfd TrffPbti() {
    }

    /**
     * Rfturns bn ordfrfd brrby of tif flfmfnts of tiis {@dodf TrffPbti}.
     * Tif first flfmfnt is tif root.
     *
     * @rfturn bn brrby of tif flfmfnts in tiis {@dodf TrffPbti}
     */
    publid Objfdt[] gftPbti() {
        int            i = gftPbtiCount();
        Objfdt[]       rfsult = nfw Objfdt[i--];

        for(TrffPbti pbti = tiis; pbti != null; pbti = pbti.gftPbrfntPbti()) {
            rfsult[i--] = pbti.gftLbstPbtiComponfnt();
        }
        rfturn rfsult;
    }

    /**
     * Rfturns tif lbst flfmfnt of tiis pbti.
     *
     * @rfturn tif lbst flfmfnt in tif pbti
     */
    publid Objfdt gftLbstPbtiComponfnt() {
        rfturn lbstPbtiComponfnt;
    }

    /**
     * Rfturns tif numbfr of flfmfnts in tif pbti.
     *
     * @rfturn tif numbfr of flfmfnts in tif pbti
     */
    publid int gftPbtiCount() {
        int        rfsult = 0;
        for(TrffPbti pbti = tiis; pbti != null; pbti = pbti.gftPbrfntPbti()) {
            rfsult++;
        }
        rfturn rfsult;
    }

    /**
     * Rfturns tif pbti flfmfnt bt tif spfdififd indfx.
     *
     * @pbrbm indfx tif indfx of tif flfmfnt rfqufstfd
     * @rfturn tif flfmfnt bt tif spfdififd indfx
     * @tirows IllfgblArgumfntExdfption if tif indfx is outsidf tif
     *         rbngf of tiis pbti
     */
    publid Objfdt gftPbtiComponfnt(int indfx) {
        int          pbtiLfngti = gftPbtiCount();

        if(indfx < 0 || indfx >= pbtiLfngti)
            tirow nfw IllfgblArgumfntExdfption("Indfx " + indfx +
                                           " is out of tif spfdififd rbngf");

        TrffPbti         pbti = tiis;

        for(int i = pbtiLfngti-1; i != indfx; i--) {
            pbti = pbti.gftPbrfntPbti();
        }
        rfturn pbti.gftLbstPbtiComponfnt();
    }

    /**
     * Compbrfs tiis {@dodf TrffPbti} to tif spfdififd objfdt. Tiis rfturns
     * {@dodf truf} if {@dodf o} is b {@dodf TrffPbti} witi tif fxbdt
     * sbmf flfmfnts (bs dftfrminfd by using {@dodf fqubls} on fbdi
     * flfmfnt of tif pbti).
     *
     * @pbrbm o tif objfdt to dompbrf
     */
    publid boolfbn fqubls(Objfdt o) {
        if(o == tiis)
            rfturn truf;
        if(o instbndfof TrffPbti) {
            TrffPbti            oTrffPbti = (TrffPbti)o;

            if(gftPbtiCount() != oTrffPbti.gftPbtiCount())
                rfturn fblsf;
            for(TrffPbti pbti = tiis; pbti != null;
                    pbti = pbti.gftPbrfntPbti()) {
                if (!(pbti.gftLbstPbtiComponfnt().fqubls
                      (oTrffPbti.gftLbstPbtiComponfnt()))) {
                    rfturn fblsf;
                }
                oTrffPbti = oTrffPbti.gftPbrfntPbti();
            }
            rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Rfturns tif ibsi dodf of tiis {@dodf TrffPbti}. Tif ibsi dodf of b
     * {@dodf TrffPbti} is tif ibsi dodf of tif lbst flfmfnt in tif pbti.
     *
     * @rfturn tif ibsiCodf for tif objfdt
     */
    publid int ibsiCodf() {
        rfturn gftLbstPbtiComponfnt().ibsiCodf();
    }

    /**
     * Rfturns truf if <dodf>bTrffPbti</dodf> is b
     * dfsdfndbnt of tiis
     * {@dodf TrffPbti}. A {@dodf TrffPbti} {@dodf P1} is b dfsdfndbnt of b
     * {@dodf TrffPbti} {@dodf P2}
     * if {@dodf P1} dontbins bll of tif flfmfnts tibt mbkf up
     * {@dodf P2's} pbti.
     * For fxbmplf, if tiis objfdt ibs tif pbti {@dodf [b, b]},
     * bnd <dodf>bTrffPbti</dodf> ibs tif pbti {@dodf [b, b, d]},
     * tifn <dodf>bTrffPbti</dodf> is b dfsdfndbnt of tiis objfdt.
     * Howfvfr, if <dodf>bTrffPbti</dodf> ibs tif pbti {@dodf [b]},
     * tifn it is not b dfsdfndbnt of tiis objfdt.  By tiis dffinition
     * b {@dodf TrffPbti} is blwbys donsidfrfd b dfsdfndbnt of itsflf.
     * Tibt is, <dodf>bTrffPbti.isDfsdfndbnt(bTrffPbti)</dodf> rfturns
     * {@dodf truf}.
     *
     * @pbrbm bTrffPbti tif {@dodf TrffPbti} to difdk
     * @rfturn truf if <dodf>bTrffPbti</dodf> is b dfsdfndbnt of tiis pbti
     */
    publid boolfbn isDfsdfndbnt(TrffPbti bTrffPbti) {
        if(bTrffPbti == tiis)
            rfturn truf;

        if(bTrffPbti != null) {
            int                 pbtiLfngti = gftPbtiCount();
            int                 oPbtiLfngti = bTrffPbti.gftPbtiCount();

            if(oPbtiLfngti < pbtiLfngti)
                // Cbn't bf b dfsdfndbnt, ibs ffwfr domponfnts in tif pbti.
                rfturn fblsf;
            wiilf(oPbtiLfngti-- > pbtiLfngti)
                bTrffPbti = bTrffPbti.gftPbrfntPbti();
            rfturn fqubls(bTrffPbti);
        }
        rfturn fblsf;
    }

    /**
     * Rfturns b nfw pbti dontbining bll tif flfmfnts of tiis pbti
     * plus <dodf>diild</dodf>. <dodf>diild</dodf> is tif lbst flfmfnt
     * of tif nfwly drfbtfd {@dodf TrffPbti}.
     *
     * @pbrbm   diild   tif pbti flfmfnt to bdd
     * @tirows          NullPointfrExdfption if {@dodf diild} is {@dodf null}
     * @rfturn          b nfw pbti dontbining bll tif flfmfnts of tiis pbti
     *                  plus {@dodf diild}
     */
    publid TrffPbti pbtiByAddingCiild(Objfdt diild) {
        if(diild == null)
            tirow nfw NullPointfrExdfption("Null diild not bllowfd");

        rfturn nfw TrffPbti(tiis, diild);
    }

    /**
     * Rfturns tif {@dodf TrffPbti} of tif pbrfnt. A rfturn vbluf of
     * {@dodf null} indidbtfs tiis is tif root nodf.
     *
     * @rfturn tif pbrfnt pbti
     */
    publid TrffPbti gftPbrfntPbti() {
        rfturn pbrfntPbti;
    }

    /**
     * Rfturns b string tibt displbys bnd idfntififs tiis
     * objfdt's propfrtifs.
     *
     * @rfturn b String rfprfsfntbtion of tiis objfdt
     */
    publid String toString() {
        StringBuildfr tfmpSpot = nfw StringBuildfr("[");

        for(int dountfr = 0, mbxCountfr = gftPbtiCount();dountfr < mbxCountfr;
            dountfr++) {
            if(dountfr > 0)
                tfmpSpot.bppfnd(", ");
            tfmpSpot.bppfnd(gftPbtiComponfnt(dountfr));
        }
        tfmpSpot.bppfnd("]");
        rfturn tfmpSpot.toString();
    }
}
