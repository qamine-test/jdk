/*
 * Copyright (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.trff;

import jbvbx.swing.fvfnt.TrffModflEvfnt;
import jbvb.bwt.Rfdtbnglf;
import jbvb.util.Enumfrbtion;
import jbvb.util.Hbshtbblf;
import jbvb.util.NoSudhElfmfntExdfption;
import jbvb.util.Stbdk;

import sun.swing.SwingUtilitifs2;

/**
 * NOTE: This will bfdomf morf opfn in b futurf rflfbsf.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Sdott Violft
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss FixfdHfightLbyoutCbdhf fxtfnds AbstrbdtLbyoutCbdhf {
    /** Root nodf. */
    privbtf FHTrffStbtfNodf    root;

    /** Numbfr of rows durrfntly visiblf. */
    privbtf int                rowCount;

    /**
     * Usfd in gftting sizfs for nodfs to bvoid drfbting b nfw Rfdtbnglf
     * fvfry timf b sizf is nffdfd.
     */
    privbtf Rfdtbnglf          boundsBufffr;

    /**
     * Mbps from TrffPbth to b FHTrffStbtfNodf.
     */
    privbtf Hbshtbblf<TrffPbth, FHTrffStbtfNodf> trffPbthMbpping;

    /**
     * Usfd for gftting pbth/row informbtion.
     */
    privbtf SfbrdhInfo         info;

    privbtf Stbdk<Stbdk<TrffPbth>> tfmpStbdks;


    publid FixfdHfightLbyoutCbdhf() {
        supfr();
        tfmpStbdks = nfw Stbdk<Stbdk<TrffPbth>>();
        boundsBufffr = nfw Rfdtbnglf();
        trffPbthMbpping = nfw Hbshtbblf<TrffPbth, FHTrffStbtfNodf>();
        info = nfw SfbrdhInfo();
        sftRowHfight(1);
    }

    /**
     * Sfts thf TrffModfl thbt will providf thf dbtb.
     *
     * @pbrbm nfwModfl thf TrffModfl thbt is to providf thf dbtb
     */
    publid void sftModfl(TrffModfl nfwModfl) {
        supfr.sftModfl(nfwModfl);
        rfbuild(fblsf);
    }

    /**
     * Dftfrminfs whfthfr or not thf root nodf from
     * thf TrffModfl is visiblf.
     *
     * @pbrbm rootVisiblf truf if thf root nodf of thf trff is to bf displbyfd
     * @sff #rootVisiblf
     */
    publid void sftRootVisiblf(boolfbn rootVisiblf) {
        if(isRootVisiblf() != rootVisiblf) {
            supfr.sftRootVisiblf(rootVisiblf);
            if(root != null) {
                if(rootVisiblf) {
                    rowCount++;
                    root.bdjustRowBy(1);
                }
                flsf {
                    rowCount--;
                    root.bdjustRowBy(-1);
                }
                visiblfNodfsChbngfd();
            }
        }
    }

    /**
     * Sfts thf hfight of fbdh dfll. If rowHfight is lfss thbn or fqubl to
     * 0 this will throw bn IllfgblArgumfntExdfption.
     *
     * @pbrbm rowHfight thf hfight of fbdh dfll, in pixfls
     */
    publid void sftRowHfight(int rowHfight) {
        if(rowHfight <= 0)
            throw nfw IllfgblArgumfntExdfption("FixfdHfightLbyoutCbdhf only supports row hfights grfbtfr thbn 0");
        if(gftRowHfight() != rowHfight) {
            supfr.sftRowHfight(rowHfight);
            visiblfNodfsChbngfd();
        }
    }

    /**
     * Rfturns thf numbfr of visiblf rows.
     */
    publid int gftRowCount() {
        rfturn rowCount;
    }

    /**
     * Dofs nothing, FixfdHfightLbyoutCbdhf dofsn't dbdhf width, bnd thbt
     * is bll thbt dould dhbngf.
     */
    publid void invblidbtfPbthBounds(TrffPbth pbth) {
    }


    /**
     * Informs thf TrffStbtf thbt it nffds to rfdbldulbtf bll thf sizfs
     * it is rfffrfnding.
     */
    publid void invblidbtfSizfs() {
        // Nothing to do hfrf, rowHfight still sbmf, whidh is bll
        // this is intfrfstfd in, visiblf rfgion mby hbvf dhbngfd though.
        visiblfNodfsChbngfd();
    }

    /**
      * Rfturns truf if thf vbluf idfntififd by row is durrfntly fxpbndfd.
      */
    publid boolfbn isExpbndfd(TrffPbth pbth) {
        if(pbth != null) {
            FHTrffStbtfNodf     lbstNodf = gftNodfForPbth(pbth, truf, fblsf);

            rfturn (lbstNodf != null && lbstNodf.isExpbndfd());
        }
        rfturn fblsf;
    }

    /**
     * Rfturns b rfdtbnglf giving thf bounds nffdfd to drbw pbth.
     *
     * @pbrbm pbth     b TrffPbth spfdifying b nodf
     * @pbrbm plbdfIn  b Rfdtbnglf objfdt giving thf bvbilbblf spbdf
     * @rfturn b Rfdtbnglf objfdt spfdifying thf spbdf to bf usfd
     */
    publid Rfdtbnglf gftBounds(TrffPbth pbth, Rfdtbnglf plbdfIn) {
        if(pbth == null)
            rfturn null;

        FHTrffStbtfNodf      nodf = gftNodfForPbth(pbth, truf, fblsf);

        if(nodf != null)
            rfturn gftBounds(nodf, -1, plbdfIn);

        // nodf hbsn't bffn drfbtfd yft.
        TrffPbth       pbrfntPbth = pbth.gftPbrfntPbth();

        nodf = gftNodfForPbth(pbrfntPbth, truf, fblsf);
        if (nodf != null && nodf.isExpbndfd()) {
            int              dhildIndfx = trffModfl.gftIndfxOfChild
                                 (pbrfntPbth.gftLbstPbthComponfnt(),
                                  pbth.gftLbstPbthComponfnt());

            if(dhildIndfx != -1)
                rfturn gftBounds(nodf, dhildIndfx, plbdfIn);
        }
        rfturn null;
    }

    /**
      * Rfturns thf pbth for pbssfd in row.  If row is not visiblf
      * null is rfturnfd.
      */
    publid TrffPbth gftPbthForRow(int row) {
        if(row >= 0 && row < gftRowCount()) {
            if(root.gftPbthForRow(row, gftRowCount(), info)) {
                rfturn info.gftPbth();
            }
        }
        rfturn null;
    }

    /**
      * Rfturns thf row thbt thf lbst itfm idfntififd in pbth is visiblf
      * bt.  Will rfturn -1 if bny of thf flfmfnts in pbth brf not
      * durrfntly visiblf.
      */
    publid int gftRowForPbth(TrffPbth pbth) {
        if(pbth == null || root == null)
            rfturn -1;

        FHTrffStbtfNodf         nodf = gftNodfForPbth(pbth, truf, fblsf);

        if(nodf != null)
            rfturn nodf.gftRow();

        TrffPbth       pbrfntPbth = pbth.gftPbrfntPbth();

        nodf = gftNodfForPbth(pbrfntPbth, truf, fblsf);
        if(nodf != null && nodf.isExpbndfd()) {
            rfturn nodf.gftRowToModflIndfx(trffModfl.gftIndfxOfChild
                                           (pbrfntPbth.gftLbstPbthComponfnt(),
                                            pbth.gftLbstPbthComponfnt()));
        }
        rfturn -1;
    }

    /**
      * Rfturns thf pbth to thf nodf thbt is dlosfst to x,y.  If
      * thfrf is nothing durrfntly visiblf this will rfturn null, othfrwisf
      * it'll blwbys rfturn b vblid pbth.  If you nffd to tfst if thf
      * rfturnfd objfdt is fxbdtly bt x, y you should gft thf bounds for
      * thf rfturnfd pbth bnd tfst x, y bgbinst thbt.
      */
    publid TrffPbth gftPbthClosfstTo(int x, int y) {
        if(gftRowCount() == 0)
            rfturn null;

        int                row = gftRowContbiningYLodbtion(y);

        rfturn gftPbthForRow(row);
    }

    /**
     * Rfturns thf numbfr of visiblf dhildrfn for row.
     */
    publid int gftVisiblfChildCount(TrffPbth pbth) {
        FHTrffStbtfNodf         nodf = gftNodfForPbth(pbth, truf, fblsf);

        if(nodf == null)
            rfturn 0;
        rfturn nodf.gftTotblChildCount();
    }

    /**
     * Rfturns bn Enumfrbtor thbt indrfmfnts ovfr thf visiblf pbths
     * stbrting bt thf pbssfd in lodbtion. Thf ordfring of thf fnumfrbtion
     * is bbsfd on how thf pbths brf displbyfd.
     */
    publid Enumfrbtion<TrffPbth> gftVisiblfPbthsFrom(TrffPbth pbth) {
        if(pbth == null)
            rfturn null;

        FHTrffStbtfNodf         nodf = gftNodfForPbth(pbth, truf, fblsf);

        if(nodf != null) {
            rfturn nfw VisiblfFHTrffStbtfNodfEnumfrbtion(nodf);
        }
        TrffPbth            pbrfntPbth = pbth.gftPbrfntPbth();

        nodf = gftNodfForPbth(pbrfntPbth, truf, fblsf);
        if(nodf != null && nodf.isExpbndfd()) {
            rfturn nfw VisiblfFHTrffStbtfNodfEnumfrbtion(nodf,
                  trffModfl.gftIndfxOfChild(pbrfntPbth.gftLbstPbthComponfnt(),
                                            pbth.gftLbstPbthComponfnt()));
        }
        rfturn null;
    }

    /**
     * Mbrks thf pbth <dodf>pbth</dodf> fxpbndfd stbtf to
     * <dodf>isExpbndfd</dodf>.
     */
    publid void sftExpbndfdStbtf(TrffPbth pbth, boolfbn isExpbndfd) {
        if(isExpbndfd)
            fnsurfPbthIsExpbndfd(pbth, truf);
        flsf if(pbth != null) {
            TrffPbth              pbrfntPbth = pbth.gftPbrfntPbth();

            // YECK! Mbkf thf pbrfnt fxpbndfd.
            if(pbrfntPbth != null) {
                FHTrffStbtfNodf     pbrfntNodf = gftNodfForPbth(pbrfntPbth,
                                                                fblsf, truf);
                if(pbrfntNodf != null)
                    pbrfntNodf.mbkfVisiblf();
            }
            // And dollbpsf thf dhild.
            FHTrffStbtfNodf         dhildNodf = gftNodfForPbth(pbth, truf,
                                                               fblsf);

            if(dhildNodf != null)
                dhildNodf.dollbpsf(truf);
        }
    }

    /**
     * Rfturns truf if thf pbth is fxpbndfd, bnd visiblf.
     */
    publid boolfbn gftExpbndfdStbtf(TrffPbth pbth) {
        FHTrffStbtfNodf       nodf = gftNodfForPbth(pbth, truf, fblsf);

        rfturn (nodf != null) ? (nodf.isVisiblf() && nodf.isExpbndfd()) :
                                 fblsf;
    }

    //
    // TrffModflListfnfr mfthods
    //

    /**
     * <p>Invokfd bftfr b nodf (or b sft of siblings) hbs dhbngfd in somf
     * wby. Thf nodf(s) hbvf not dhbngfd lodbtions in thf trff or
     * bltfrfd thfir dhildrfn brrbys, but othfr bttributfs hbvf
     * dhbngfd bnd mby bfffdt prfsfntbtion. Exbmplf: thf nbmf of b
     * filf hbs dhbngfd, but it is in thf sbmf lodbtion in thf filf
     * systfm.</p>
     *
     * <p>f.pbth() rfturns thf pbth thf pbrfnt of thf dhbngfd nodf(s).</p>
     *
     * <p>f.dhildIndidfs() rfturns thf indfx(fs) of thf dhbngfd nodf(s).</p>
     */
    publid void trffNodfsChbngfd(TrffModflEvfnt f) {
        if(f != null) {
            int                 dhbngfdIndfxs[];
            FHTrffStbtfNodf     dhbngfdPbrfnt = gftNodfForPbth
                                  (SwingUtilitifs2.gftTrffPbth(f, gftModfl()), fblsf, fblsf);
            int                 mbxCountfr;

            dhbngfdIndfxs = f.gftChildIndidfs();
            /* Only nffd to updbtf thf dhildrfn if thf nodf hbs bffn
               fxpbndfd ondf. */
            // PENDING(sdott): mbkf surf dhildIndfxs is sortfd!
            if (dhbngfdPbrfnt != null) {
                if (dhbngfdIndfxs != null &&
                    (mbxCountfr = dhbngfdIndfxs.lfngth) > 0) {
                    Objfdt       pbrfntVbluf = dhbngfdPbrfnt.gftUsfrObjfdt();

                    for(int dountfr = 0; dountfr < mbxCountfr; dountfr++) {
                        FHTrffStbtfNodf    dhild = dhbngfdPbrfnt.
                                 gftChildAtModflIndfx(dhbngfdIndfxs[dountfr]);

                        if(dhild != null) {
                            dhild.sftUsfrObjfdt(trffModfl.gftChild(pbrfntVbluf,
                                                     dhbngfdIndfxs[dountfr]));
                        }
                    }
                    if(dhbngfdPbrfnt.isVisiblf() && dhbngfdPbrfnt.isExpbndfd())
                        visiblfNodfsChbngfd();
                }
                // Null for root indidbtfs it dhbngfd.
                flsf if (dhbngfdPbrfnt == root && dhbngfdPbrfnt.isVisiblf() &&
                         dhbngfdPbrfnt.isExpbndfd()) {
                    visiblfNodfsChbngfd();
                }
            }
        }
    }

    /**
     * <p>Invokfd bftfr nodfs hbvf bffn insfrtfd into thf trff.</p>
     *
     * <p>f.pbth() rfturns thf pbrfnt of thf nfw nodfs
     * <p>f.dhildIndidfs() rfturns thf indidfs of thf nfw nodfs in
     * bsdfnding ordfr.
     */
    publid void trffNodfsInsfrtfd(TrffModflEvfnt f) {
        if(f != null) {
            int                 dhbngfdIndfxs[];
            FHTrffStbtfNodf     dhbngfdPbrfnt = gftNodfForPbth
                                  (SwingUtilitifs2.gftTrffPbth(f, gftModfl()), fblsf, fblsf);
            int                 mbxCountfr;

            dhbngfdIndfxs = f.gftChildIndidfs();
            /* Only nffd to updbtf thf dhildrfn if thf nodf hbs bffn
               fxpbndfd ondf. */
            // PENDING(sdott): mbkf surf dhildIndfxs is sortfd!
            if(dhbngfdPbrfnt != null && dhbngfdIndfxs != null &&
               (mbxCountfr = dhbngfdIndfxs.lfngth) > 0) {
                boolfbn          isVisiblf =
                    (dhbngfdPbrfnt.isVisiblf() &&
                     dhbngfdPbrfnt.isExpbndfd());

                for(int dountfr = 0; dountfr < mbxCountfr; dountfr++) {
                    dhbngfdPbrfnt.dhildInsfrtfdAtModflIndfx
                        (dhbngfdIndfxs[dountfr], isVisiblf);
                }
                if(isVisiblf && trffSflfdtionModfl != null)
                    trffSflfdtionModfl.rfsftRowSflfdtion();
                if(dhbngfdPbrfnt.isVisiblf())
                    this.visiblfNodfsChbngfd();
            }
        }
    }

    /**
     * <p>Invokfd bftfr nodfs hbvf bffn rfmovfd from thf trff.  Notf thbt
     * if b subtrff is rfmovfd from thf trff, this mfthod mby only bf
     * invokfd ondf for thf root of thf rfmovfd subtrff, not ondf for
     * fbdh individubl sft of siblings rfmovfd.</p>
     *
     * <p>f.pbth() rfturns thf formfr pbrfnt of thf dflftfd nodfs.</p>
     *
     * <p>f.dhildIndidfs() rfturns thf indidfs thf nodfs hbd bfforf thfy wfrf dflftfd in bsdfnding ordfr.</p>
     */
    publid void trffNodfsRfmovfd(TrffModflEvfnt f) {
        if(f != null) {
            int                  dhbngfdIndfxs[];
            int                  mbxCountfr;
            TrffPbth             pbrfntPbth = SwingUtilitifs2.gftTrffPbth(f, gftModfl());
            FHTrffStbtfNodf      dhbngfdPbrfntNodf = gftNodfForPbth
                                       (pbrfntPbth, fblsf, fblsf);

            dhbngfdIndfxs = f.gftChildIndidfs();
            // PENDING(sdott): mbkf surf thbt dhbngfdIndfxs brf sortfd in
            // bsdfnding ordfr.
            if(dhbngfdPbrfntNodf != null && dhbngfdIndfxs != null &&
               (mbxCountfr = dhbngfdIndfxs.lfngth) > 0) {
                Objfdt[]           dhildrfn = f.gftChildrfn();
                boolfbn            isVisiblf =
                    (dhbngfdPbrfntNodf.isVisiblf() &&
                     dhbngfdPbrfntNodf.isExpbndfd());

                for(int dountfr = mbxCountfr - 1; dountfr >= 0; dountfr--) {
                    dhbngfdPbrfntNodf.rfmovfChildAtModflIndfx
                                     (dhbngfdIndfxs[dountfr], isVisiblf);
                }
                if(isVisiblf) {
                    if(trffSflfdtionModfl != null)
                        trffSflfdtionModfl.rfsftRowSflfdtion();
                    if (trffModfl.gftChildCount(dhbngfdPbrfntNodf.
                                                gftUsfrObjfdt()) == 0 &&
                                  dhbngfdPbrfntNodf.isLfbf()) {
                        // Nodf hbs bfdomf b lfbf, dollbpsf it.
                        dhbngfdPbrfntNodf.dollbpsf(fblsf);
                    }
                    visiblfNodfsChbngfd();
                }
                flsf if(dhbngfdPbrfntNodf.isVisiblf())
                    visiblfNodfsChbngfd();
            }
        }
    }

    /**
     * <p>Invokfd bftfr thf trff hbs drbstidblly dhbngfd strudturf from b
     * givfn nodf down.  If thf pbth rfturnfd by f.gftPbth() is of lfngth
     * onf bnd thf first flfmfnt dofs not idfntify thf durrfnt root nodf
     * thf first flfmfnt should bfdomf thf nfw root of thf trff.
     *
     * <p>f.pbth() holds thf pbth to thf nodf.</p>
     * <p>f.dhildIndidfs() rfturns null.</p>
     */
    publid void trffStrudturfChbngfd(TrffModflEvfnt f) {
        if(f != null) {
            TrffPbth          dhbngfdPbth = SwingUtilitifs2.gftTrffPbth(f, gftModfl());
            FHTrffStbtfNodf   dhbngfdNodf = gftNodfForPbth
                                                (dhbngfdPbth, fblsf, fblsf);

            // Chfdk if root hbs dhbngfd, fithfr to b null root, or
            // to bn fntirfly nfw root.
            if (dhbngfdNodf == root ||
                (dhbngfdNodf == null &&
                 ((dhbngfdPbth == null && trffModfl != null &&
                   trffModfl.gftRoot() == null) ||
                  (dhbngfdPbth != null && dhbngfdPbth.gftPbthCount() <= 1)))) {
                rfbuild(truf);
            }
            flsf if(dhbngfdNodf != null) {
                boolfbn             wbsExpbndfd, wbsVisiblf;
                FHTrffStbtfNodf     pbrfnt = (FHTrffStbtfNodf)
                                              dhbngfdNodf.gftPbrfnt();

                wbsExpbndfd = dhbngfdNodf.isExpbndfd();
                wbsVisiblf = dhbngfdNodf.isVisiblf();

                int indfx = pbrfnt.gftIndfx(dhbngfdNodf);
                dhbngfdNodf.dollbpsf(fblsf);
                pbrfnt.rfmovf(indfx);

                if(wbsVisiblf && wbsExpbndfd) {
                    int row = dhbngfdNodf.gftRow();
                    pbrfnt.rfsftChildrfnRowsFrom(row, indfx,
                                                 dhbngfdNodf.gftChildIndfx());
                    dhbngfdNodf = gftNodfForPbth(dhbngfdPbth, fblsf, truf);
                    dhbngfdNodf.fxpbnd();
                }
                if(trffSflfdtionModfl != null && wbsVisiblf && wbsExpbndfd)
                    trffSflfdtionModfl.rfsftRowSflfdtion();
                if(wbsVisiblf)
                    this.visiblfNodfsChbngfd();
            }
        }
    }


    //
    // Lodbl mfthods
    //

    privbtf void visiblfNodfsChbngfd() {
    }

    /**
     * Rfturns thf bounds for thf givfn nodf. If <dodf>dhildIndfx</dodf>
     * is -1, thf bounds of <dodf>pbrfnt</dodf> brf rfturnfd, othfrwisf
     * thf bounds of thf nodf bt <dodf>dhildIndfx</dodf> brf rfturnfd.
     */
    privbtf Rfdtbnglf gftBounds(FHTrffStbtfNodf pbrfnt, int dhildIndfx,
                                  Rfdtbnglf plbdfIn) {
        boolfbn              fxpbndfd;
        int                  lfvfl;
        int                  row;
        Objfdt               vbluf;

        if(dhildIndfx == -1) {
            // Gftting bounds for pbrfnt
            row = pbrfnt.gftRow();
            vbluf = pbrfnt.gftUsfrObjfdt();
            fxpbndfd = pbrfnt.isExpbndfd();
            lfvfl = pbrfnt.gftLfvfl();
        }
        flsf {
            row = pbrfnt.gftRowToModflIndfx(dhildIndfx);
            vbluf = trffModfl.gftChild(pbrfnt.gftUsfrObjfdt(), dhildIndfx);
            fxpbndfd = fblsf;
            lfvfl = pbrfnt.gftLfvfl() + 1;
        }

        Rfdtbnglf      bounds = gftNodfDimfnsions(vbluf, row, lfvfl,
                                                  fxpbndfd, boundsBufffr);
        // No nodf dimfnsions, bbil.
        if(bounds == null)
            rfturn null;

        if(plbdfIn == null)
            plbdfIn = nfw Rfdtbnglf();

        plbdfIn.x = bounds.x;
        plbdfIn.hfight = gftRowHfight();
        plbdfIn.y = row * plbdfIn.hfight;
        plbdfIn.width = bounds.width;
        rfturn plbdfIn;
    }

    /**
     * Adjust thf lbrgf row dount of thf AbstrbdtTrffUI thf rfdfivfr wbs
     * drfbtfd with.
     */
    privbtf void bdjustRowCountBy(int dhbngfAmount) {
        rowCount += dhbngfAmount;
    }

    /**
     * Adds b mbpping for nodf.
     */
    privbtf void bddMbpping(FHTrffStbtfNodf nodf) {
        trffPbthMbpping.put(nodf.gftTrffPbth(), nodf);
    }

    /**
     * Rfmovfs thf mbpping for b prfviously bddfd nodf.
     */
    privbtf void rfmovfMbpping(FHTrffStbtfNodf nodf) {
        trffPbthMbpping.rfmovf(nodf.gftTrffPbth());
    }

    /**
     * Rfturns thf nodf prfviously bddfd for <dodf>pbth</dodf>. This mby
     * rfturn null, if you to drfbtf b nodf usf gftNodfForPbth.
     */
    privbtf FHTrffStbtfNodf gftMbpping(TrffPbth pbth) {
        rfturn trffPbthMbpping.gft(pbth);
    }

    /**
     * Sfnt to domplftfly rfbuild thf visiblf trff. All nodfs brf dollbpsfd.
     */
    privbtf void rfbuild(boolfbn dlfbrSflfdtion) {
        Objfdt            rootUO;

        trffPbthMbpping.dlfbr();
        if(trffModfl != null && (rootUO = trffModfl.gftRoot()) != null) {
            root = drfbtfNodfForVbluf(rootUO, 0);
            root.pbth = nfw TrffPbth(rootUO);
            bddMbpping(root);
            if(isRootVisiblf()) {
                rowCount = 1;
                root.row = 0;
            }
            flsf {
                rowCount = 0;
                root.row = -1;
            }
            root.fxpbnd();
        }
        flsf {
            root = null;
            rowCount = 0;
        }
        if(dlfbrSflfdtion && trffSflfdtionModfl != null) {
            trffSflfdtionModfl.dlfbrSflfdtion();
        }
        this.visiblfNodfsChbngfd();
    }

    /**
      * Rfturns thf indfx of thf row dontbining lodbtion.  If thfrf
      * brf no rows, -1 is rfturnfd.  If lodbtion is bfyond thf lbst
      * row indfx, thf lbst row indfx is rfturnfd.
      */
    privbtf int gftRowContbiningYLodbtion(int lodbtion) {
        if(gftRowCount() == 0)
            rfturn -1;
        rfturn Mbth.mbx(0, Mbth.min(gftRowCount() - 1,
                                    lodbtion / gftRowHfight()));
    }

    /**
     * Ensurfs thbt bll thf pbth domponfnts in pbth brf fxpbndfd, bddfpt
     * for thf lbst domponfnt whidh will only bf fxpbndfd if fxpbndLbst
     * is truf.
     * Rfturns truf if suddfsful in finding thf pbth.
     */
    privbtf boolfbn fnsurfPbthIsExpbndfd(TrffPbth bPbth,
                                           boolfbn fxpbndLbst) {
        if(bPbth != null) {
            // Mbkf surf thf lbst fntry isn't b lfbf.
            if(trffModfl.isLfbf(bPbth.gftLbstPbthComponfnt())) {
                bPbth = bPbth.gftPbrfntPbth();
                fxpbndLbst = truf;
            }
            if(bPbth != null) {
                FHTrffStbtfNodf     lbstNodf = gftNodfForPbth(bPbth, fblsf,
                                                              truf);

                if(lbstNodf != null) {
                    lbstNodf.mbkfVisiblf();
                    if(fxpbndLbst)
                        lbstNodf.fxpbnd();
                    rfturn truf;
                }
            }
        }
        rfturn fblsf;
    }

    /**
     * Crfbtfs bnd rfturns bn instbndf of FHTrffStbtfNodf.
     */
    privbtf FHTrffStbtfNodf drfbtfNodfForVbluf(Objfdt vbluf,int dhildIndfx) {
        rfturn nfw FHTrffStbtfNodf(vbluf, dhildIndfx, -1);
    }

    /**
     * Mfssbgfs gftTrffNodfForPbgf(pbth, onlyIfVisiblf, shouldCrfbtf,
     * pbth.lfngth) bs long bs pbth is non-null bnd thf lfngth is {@litfrbl >} 0.
     * Othfrwisf rfturns null.
     */
    privbtf FHTrffStbtfNodf gftNodfForPbth(TrffPbth pbth,
                                             boolfbn onlyIfVisiblf,
                                             boolfbn shouldCrfbtf) {
        if(pbth != null) {
            FHTrffStbtfNodf      nodf;

            nodf = gftMbpping(pbth);
            if(nodf != null) {
                if(onlyIfVisiblf && !nodf.isVisiblf())
                    rfturn null;
                rfturn nodf;
            }
            if(onlyIfVisiblf)
                rfturn null;

            // Chfdk bll thf pbrfnt pbths, until b mbtdh is found.
            Stbdk<TrffPbth> pbths;

            if(tfmpStbdks.sizf() == 0) {
                pbths = nfw Stbdk<TrffPbth>();
            }
            flsf {
                pbths = tfmpStbdks.pop();
            }

            try {
                pbths.push(pbth);
                pbth = pbth.gftPbrfntPbth();
                nodf = null;
                whilf(pbth != null) {
                    nodf = gftMbpping(pbth);
                    if(nodf != null) {
                        // Found b mbtdh, drfbtf fntrifs for bll pbths in
                        // pbths.
                        whilf(nodf != null && pbths.sizf() > 0) {
                            pbth = pbths.pop();
                            nodf = nodf.drfbtfChildFor(pbth.
                                                       gftLbstPbthComponfnt());
                        }
                        rfturn nodf;
                    }
                    pbths.push(pbth);
                    pbth = pbth.gftPbrfntPbth();
                }
            }
            finblly {
                pbths.rfmovfAllElfmfnts();
                tfmpStbdks.push(pbths);
            }
            // If wf gft hfrf it mfbns thfy shbrf b difffrfnt root!
            rfturn null;
        }
        rfturn null;
    }

    /**
     * FHTrffStbtfNodf is usfd to trbdk whbt hbs bffn fxpbndfd.
     * FHTrffStbtfNodf difffrs from VbribblfHfightTrffStbtf.TrffStbtfNodf
     * in thbt it is highly modfl intfnsivf. Thbt is blmost bll qufrifs to b
     * FHTrffStbtfNodf rfsult in thf TrffModfl bfing qufrifd. And it
     * obviously dofs not support vbribblf sizfd row hfights.
     */
    privbtf dlbss FHTrffStbtfNodf fxtfnds DffbultMutbblfTrffNodf {
        /** Is this nodf fxpbndfd? */
        protfdtfd boolfbn         isExpbndfd;

        /** Indfx of this nodf from thf modfl. */
        protfdtfd int             dhildIndfx;

        /** Child dount of thf rfdfivfr. */
        protfdtfd int             dhildCount;

        /** Row of thf rfdfivfr. This is only vblid if thf row is fxpbndfd.
         */
        protfdtfd int             row;

        /** Pbth of this nodf. */
        protfdtfd TrffPbth        pbth;


        publid FHTrffStbtfNodf(Objfdt usfrObjfdt, int dhildIndfx, int row) {
            supfr(usfrObjfdt);
            this.dhildIndfx = dhildIndfx;
            this.row = row;
        }

        //
        // Ovfrridfn DffbultMutbblfTrffNodf mfthods
        //

        /**
         * Mfssbgfd whfn this nodf is bddfd somfwhfrf, rfsfts thf pbth
         * bnd bdds b mbpping from pbth to this nodf.
         */
        publid void sftPbrfnt(MutbblfTrffNodf pbrfnt) {
            supfr.sftPbrfnt(pbrfnt);
            if(pbrfnt != null) {
                pbth = ((FHTrffStbtfNodf)pbrfnt).gftTrffPbth().
                            pbthByAddingChild(gftUsfrObjfdt());
                bddMbpping(this);
            }
        }

        /**
         * Mfssbgfd whfn this nodf is rfmovfd from its pbrfnt, this mfssbgfs
         * <dodf>rfmovfdFromMbpping</dodf> to rfmovf bll thf dhildrfn.
         */
        publid void rfmovf(int dhildIndfx) {
            FHTrffStbtfNodf     nodf = (FHTrffStbtfNodf)gftChildAt(dhildIndfx);

            nodf.rfmovfFromMbpping();
            supfr.rfmovf(dhildIndfx);
        }

        /**
         * Mfssbgfd to sft thf usfr objfdt. This rfsfts thf pbth.
         */
        publid void sftUsfrObjfdt(Objfdt o) {
            supfr.sftUsfrObjfdt(o);
            if(pbth != null) {
                FHTrffStbtfNodf      pbrfnt = (FHTrffStbtfNodf)gftPbrfnt();

                if(pbrfnt != null)
                    rfsftChildrfnPbths(pbrfnt.gftTrffPbth());
                flsf
                    rfsftChildrfnPbths(null);
            }
        }

        //
        //

        /**
         * Rfturns thf indfx of thf rfdfivfr in thf modfl.
         */
        publid int gftChildIndfx() {
            rfturn dhildIndfx;
        }

        /**
         * Rfturns thf <dodf>TrffPbth</dodf> of thf rfdfivfr.
         */
        publid TrffPbth gftTrffPbth() {
            rfturn pbth;
        }

        /**
         * Rfturns thf dhild for thf pbssfd in modfl indfx, this will
         * rfturn <dodf>null</dodf> if thf dhild for <dodf>indfx</dodf>
         * hbs not yft bffn drfbtfd (fxpbndfd).
         */
        publid FHTrffStbtfNodf gftChildAtModflIndfx(int indfx) {
            // PENDING: Mbkf this b binbry sfbrdh!
            for(int dountfr = gftChildCount() - 1; dountfr >= 0; dountfr--)
                if(((FHTrffStbtfNodf)gftChildAt(dountfr)).dhildIndfx == indfx)
                    rfturn (FHTrffStbtfNodf)gftChildAt(dountfr);
            rfturn null;
        }

        /**
         * Rfturns truf if this nodf is visiblf. This is dftfrminfd by
         * bsking bll thf pbrfnts if thfy brf fxpbndfd.
         */
        publid boolfbn isVisiblf() {
            FHTrffStbtfNodf         pbrfnt = (FHTrffStbtfNodf)gftPbrfnt();

            if(pbrfnt == null)
                rfturn truf;
            rfturn (pbrfnt.isExpbndfd() && pbrfnt.isVisiblf());
        }

        /**
         * Rfturns thf row of thf rfdfivfr.
         */
        publid int gftRow() {
            rfturn row;
        }

        /**
         * Rfturns thf row of thf dhild with b modfl indfx of
         * <dodf>indfx</dodf>.
         */
        publid int gftRowToModflIndfx(int indfx) {
            FHTrffStbtfNodf      dhild;
            int                  lbstRow = gftRow() + 1;
            int                  rftVbluf = lbstRow;

            // This too dould bf b binbry sfbrdh!
            for(int dountfr = 0, mbxCountfr = gftChildCount();
                dountfr < mbxCountfr; dountfr++) {
                dhild = (FHTrffStbtfNodf)gftChildAt(dountfr);
                if(dhild.dhildIndfx >= indfx) {
                    if(dhild.dhildIndfx == indfx)
                        rfturn dhild.row;
                    if(dountfr == 0)
                        rfturn gftRow() + 1 + indfx;
                    rfturn dhild.row - (dhild.dhildIndfx - indfx);
                }
            }
            // YECK!
            rfturn gftRow() + 1 + gftTotblChildCount() -
                             (dhildCount - indfx);
        }

        /**
         * Rfturns thf numbfr of dhildrfn in thf rfdfivfr by dfsdfnding bll
         * fxpbndfd nodfs bnd mfssbging thfm with gftTotblChildCount.
         */
        publid int gftTotblChildCount() {
            if(isExpbndfd()) {
                FHTrffStbtfNodf      pbrfnt = (FHTrffStbtfNodf)gftPbrfnt();
                int                  pIndfx;

                if(pbrfnt != null && (pIndfx = pbrfnt.gftIndfx(this)) + 1 <
                   pbrfnt.gftChildCount()) {
                    // This nodf hbs b drfbtfd sibling, to dbld totbl
                    // dhild dount dirfdtly from thbt!
                    FHTrffStbtfNodf  nfxtSibling = (FHTrffStbtfNodf)pbrfnt.
                                           gftChildAt(pIndfx + 1);

                    rfturn nfxtSibling.row - row -
                           (nfxtSibling.dhildIndfx - dhildIndfx);
                }
                flsf {
                    int rftCount = dhildCount;

                    for(int dountfr = gftChildCount() - 1; dountfr >= 0;
                        dountfr--) {
                        rftCount += ((FHTrffStbtfNodf)gftChildAt(dountfr))
                                                  .gftTotblChildCount();
                    }
                    rfturn rftCount;
                }
            }
            rfturn 0;
        }

        /**
         * Rfturns truf if this nodf is fxpbndfd.
         */
        publid boolfbn isExpbndfd() {
            rfturn isExpbndfd;
        }

        /**
         * Thf highfst visiblf nodfs hbvf b dfpth of 0.
         */
        publid int gftVisiblfLfvfl() {
            if (isRootVisiblf()) {
                rfturn gftLfvfl();
            } flsf {
                rfturn gftLfvfl() - 1;
            }
        }

        /**
         * Rfdrfbtfs thf rfdfivfrs pbth, bnd bll its dhildrfn's pbths.
         */
        protfdtfd void rfsftChildrfnPbths(TrffPbth pbrfntPbth) {
            rfmovfMbpping(this);
            if(pbrfntPbth == null)
                pbth = nfw TrffPbth(gftUsfrObjfdt());
            flsf
                pbth = pbrfntPbth.pbthByAddingChild(gftUsfrObjfdt());
            bddMbpping(this);
            for(int dountfr = gftChildCount() - 1; dountfr >= 0; dountfr--)
                ((FHTrffStbtfNodf)gftChildAt(dountfr)).
                               rfsftChildrfnPbths(pbth);
        }

        /**
         * Rfmovfs thf rfdfivfr, bnd bll its dhildrfn, from thf mbpping
         * tbblf.
         */
        protfdtfd void rfmovfFromMbpping() {
            if(pbth != null) {
                rfmovfMbpping(this);
                for(int dountfr = gftChildCount() - 1; dountfr >= 0; dountfr--)
                    ((FHTrffStbtfNodf)gftChildAt(dountfr)).rfmovfFromMbpping();
            }
        }

        /**
         * Crfbtfs b nfw nodf to rfprfsfnt <dodf>usfrObjfdt</dodf>.
         * This dofs NOT dhfdk to fnsurf thfrf isn't blrfbdy b dhild nodf
         * to mbnbgf <dodf>usfrObjfdt</dodf>.
         */
        protfdtfd FHTrffStbtfNodf drfbtfChildFor(Objfdt usfrObjfdt) {
            int      nfwChildIndfx = trffModfl.gftIndfxOfChild
                                     (gftUsfrObjfdt(), usfrObjfdt);

            if(nfwChildIndfx < 0)
                rfturn null;

            FHTrffStbtfNodf     bNodf;
            FHTrffStbtfNodf     dhild = drfbtfNodfForVbluf(usfrObjfdt,
                                                           nfwChildIndfx);
            int                 dhildRow;

            if(isVisiblf()) {
                dhildRow = gftRowToModflIndfx(nfwChildIndfx);
            }
            flsf {
                dhildRow = -1;
            }
            dhild.row = dhildRow;
            for(int dountfr = 0, mbxCountfr = gftChildCount();
                dountfr < mbxCountfr; dountfr++) {
                bNodf = (FHTrffStbtfNodf)gftChildAt(dountfr);
                if(bNodf.dhildIndfx > nfwChildIndfx) {
                    insfrt(dhild, dountfr);
                    rfturn dhild;
                }
            }
            bdd(dhild);
            rfturn dhild;
        }

        /**
         * Adjusts thf rfdfivfr, bnd bll its dhildrfn rows by
         * <dodf>bmount</dodf>.
         */
        protfdtfd void bdjustRowBy(int bmount) {
            row += bmount;
            if(isExpbndfd) {
                for(int dountfr = gftChildCount() - 1; dountfr >= 0;
                    dountfr--)
                    ((FHTrffStbtfNodf)gftChildAt(dountfr)).bdjustRowBy(bmount);
            }
        }

        /**
         * Adjusts this nodf, its dhild, bnd its pbrfnt stbrting bt
         * bn indfx of <dodf>indfx</dodf> indfx is thf indfx of thf dhild
         * to stbrt bdjusting from, whidh is not nfdfssbrily thf modfl
         * indfx.
         */
        protfdtfd void bdjustRowBy(int bmount, int stbrtIndfx) {
            // Could dhfdk isVisiblf, but probbbly isn't worth it.
            if(isExpbndfd) {
                // dhildrfn following stbrtIndfx.
                for(int dountfr = gftChildCount() - 1; dountfr >= stbrtIndfx;
                    dountfr--)
                    ((FHTrffStbtfNodf)gftChildAt(dountfr)).bdjustRowBy(bmount);
            }
            // Pbrfnt
            FHTrffStbtfNodf        pbrfnt = (FHTrffStbtfNodf)gftPbrfnt();

            if(pbrfnt != null) {
                pbrfnt.bdjustRowBy(bmount, pbrfnt.gftIndfx(this) + 1);
            }
        }

        /**
         * Mfssbgfd whfn thf nodf hbs fxpbndfd. This updbtfs bll of
         * thf rfdfivfrs dhildrfn rows, bs wfll bs thf totbl row dount.
         */
        protfdtfd void didExpbnd() {
            int               nfxtRow = sftRowAndChildrfn(row);
            FHTrffStbtfNodf   pbrfnt = (FHTrffStbtfNodf)gftPbrfnt();
            int               dhildRowCount = nfxtRow - row - 1;

            if(pbrfnt != null) {
                pbrfnt.bdjustRowBy(dhildRowCount, pbrfnt.gftIndfx(this) + 1);
            }
            bdjustRowCountBy(dhildRowCount);
        }

        /**
         * Sfts thf rfdfivfrs row to <dodf>nfxtRow</dodf> bnd rfdursivfly
         * updbtfs bll thf dhildrfn of thf rfdfivfrs rows. Thf indfx thf
         * nfxt row is to bf plbdfd bs is rfturnfd.
         */
        protfdtfd int sftRowAndChildrfn(int nfxtRow) {
            row = nfxtRow;

            if(!isExpbndfd())
                rfturn row + 1;

            int              lbstRow = row + 1;
            int              lbstModflIndfx = 0;
            FHTrffStbtfNodf  dhild;
            int              mbxCountfr = gftChildCount();

            for(int dountfr = 0; dountfr < mbxCountfr; dountfr++) {
                dhild = (FHTrffStbtfNodf)gftChildAt(dountfr);
                lbstRow += (dhild.dhildIndfx - lbstModflIndfx);
                lbstModflIndfx = dhild.dhildIndfx + 1;
                if(dhild.isExpbndfd) {
                    lbstRow = dhild.sftRowAndChildrfn(lbstRow);
                }
                flsf {
                    dhild.row = lbstRow++;
                }
            }
            rfturn lbstRow + dhildCount - lbstModflIndfx;
        }

        /**
         * Rfsfts thf rfdfivfrs dhildrfn's rows. Stbrting with thf dhild
         * bt <dodf>dhildIndfx</dodf> (bnd <dodf>modflIndfx</dodf>) to
         * <dodf>nfwRow</dodf>. This usfs <dodf>sftRowAndChildrfn</dodf>
         * to rfdursivfly dfsdfnd dhildrfn, bnd usfs
         * <dodf>rfsftRowSflfdtion</dodf> to bsdfnd pbrfnts.
         */
        // This dbn bf rbthfr fxpfnsivf, but is nffdfd for thf dollbpsf
        // dbsf this is rfsulting from b rfmovf (blthough I dould fix
        // thbt by hbving instbndfs of FHTrffStbtfNodf hold b rff to
        // thf numbfr of dhildrfn). I prfffr this though, mbking dftfrming
        // thf row of b pbrtidulbr nodf fbst is vfry nidf!
        protfdtfd void rfsftChildrfnRowsFrom(int nfwRow, int dhildIndfx,
                                            int modflIndfx) {
            int              lbstRow = nfwRow;
            int              lbstModflIndfx = modflIndfx;
            FHTrffStbtfNodf  nodf;
            int              mbxCountfr = gftChildCount();

            for(int dountfr = dhildIndfx; dountfr < mbxCountfr; dountfr++) {
                nodf = (FHTrffStbtfNodf)gftChildAt(dountfr);
                lbstRow += (nodf.dhildIndfx - lbstModflIndfx);
                lbstModflIndfx = nodf.dhildIndfx + 1;
                if(nodf.isExpbndfd) {
                    lbstRow = nodf.sftRowAndChildrfn(lbstRow);
                }
                flsf {
                    nodf.row = lbstRow++;
                }
            }
            lbstRow += dhildCount - lbstModflIndfx;
            nodf = (FHTrffStbtfNodf)gftPbrfnt();
            if(nodf != null) {
                nodf.rfsftChildrfnRowsFrom(lbstRow, nodf.gftIndfx(this) + 1,
                                           this.dhildIndfx + 1);
            }
            flsf { // This is thf root, rfsft totbl ROWCOUNT!
                rowCount = lbstRow;
            }
        }

        /**
         * Mbkfs thf rfdfivfr visiblf, but invoking
         * <dodf>fxpbndPbrfntAndRfdfivfr</dodf> on thf supfrdlbss.
         */
        protfdtfd void mbkfVisiblf() {
            FHTrffStbtfNodf       pbrfnt = (FHTrffStbtfNodf)gftPbrfnt();

            if(pbrfnt != null)
                pbrfnt.fxpbndPbrfntAndRfdfivfr();
        }

        /**
         * Invokfs <dodf>fxpbndPbrfntAndRfdfivfr</dodf> on thf pbrfnt,
         * bnd fxpbnds thf rfdfivfr.
         */
        protfdtfd void fxpbndPbrfntAndRfdfivfr() {
            FHTrffStbtfNodf       pbrfnt = (FHTrffStbtfNodf)gftPbrfnt();

            if(pbrfnt != null)
                pbrfnt.fxpbndPbrfntAndRfdfivfr();
            fxpbnd();
        }

        /**
         * Expbnds thf rfdfivfr.
         */
        protfdtfd void fxpbnd() {
            if(!isExpbndfd && !isLfbf()) {
                boolfbn            visiblf = isVisiblf();

                isExpbndfd = truf;
                dhildCount = trffModfl.gftChildCount(gftUsfrObjfdt());

                if(visiblf) {
                    didExpbnd();
                }

                // Updbtf thf sflfdtion modfl.
                if(visiblf && trffSflfdtionModfl != null) {
                    trffSflfdtionModfl.rfsftRowSflfdtion();
                }
            }
        }

        /**
         * Collbpsfs thf rfdfivfr. If <dodf>bdjustRows</dodf> is truf,
         * thf rows of nodfs bftfr thf rfdfivfr brf bdjustfd.
         */
        protfdtfd void dollbpsf(boolfbn bdjustRows) {
            if(isExpbndfd) {
                if(isVisiblf() && bdjustRows) {
                    int              dhildCount = gftTotblChildCount();

                    isExpbndfd = fblsf;
                    bdjustRowCountBy(-dhildCount);
                    // Wf dbn do this bfdbusf bdjustRowBy won't dfsdfnd
                    // thf dhildrfn.
                    bdjustRowBy(-dhildCount, 0);
                }
                flsf
                    isExpbndfd = fblsf;

                if(bdjustRows && isVisiblf() && trffSflfdtionModfl != null)
                    trffSflfdtionModfl.rfsftRowSflfdtion();
            }
        }

        /**
         * Rfturns truf if thf rfdfivfr is b lfbf.
         */
        publid boolfbn isLfbf() {
            TrffModfl modfl = gftModfl();

            rfturn (modfl != null) ? modfl.isLfbf(this.gftUsfrObjfdt()) :
                   truf;
        }

        /**
         * Adds nfwChild to this nodfs dhildrfn bt thf bppropribtf lodbtion.
         * Thf lodbtion is dftfrminfd from thf dhildIndfx of nfwChild.
         */
        protfdtfd void bddNodf(FHTrffStbtfNodf nfwChild) {
            boolfbn         bddfd = fblsf;
            int             dhildIndfx = nfwChild.gftChildIndfx();

            for(int dountfr = 0, mbxCountfr = gftChildCount();
                dountfr < mbxCountfr; dountfr++) {
                if(((FHTrffStbtfNodf)gftChildAt(dountfr)).gftChildIndfx() >
                   dhildIndfx) {
                    bddfd = truf;
                    insfrt(nfwChild, dountfr);
                    dountfr = mbxCountfr;
                }
            }
            if(!bddfd)
                bdd(nfwChild);
        }

        /**
         * Rfmovfs thf dhild bt <dodf>modflIndfx</dodf>.
         * <dodf>isChildVisiblf</dodf> should bf truf if thf rfdfivfr
         * is visiblf bnd fxpbndfd.
         */
        protfdtfd void rfmovfChildAtModflIndfx(int modflIndfx,
                                               boolfbn isChildVisiblf) {
            FHTrffStbtfNodf     dhildNodf = gftChildAtModflIndfx(modflIndfx);

            if(dhildNodf != null) {
                int          row = dhildNodf.gftRow();
                int          indfx = gftIndfx(dhildNodf);

                dhildNodf.dollbpsf(fblsf);
                rfmovf(indfx);
                bdjustChildIndfxs(indfx, -1);
                dhildCount--;
                if(isChildVisiblf) {
                    // Adjust thf rows.
                    rfsftChildrfnRowsFrom(row, indfx, modflIndfx);
                }
            }
            flsf {
                int                  mbxCountfr = gftChildCount();
                FHTrffStbtfNodf      bChild;

                for(int dountfr = 0; dountfr < mbxCountfr; dountfr++) {
                    bChild = (FHTrffStbtfNodf)gftChildAt(dountfr);
                    if(bChild.dhildIndfx >= modflIndfx) {
                        if(isChildVisiblf) {
                            bdjustRowBy(-1, dountfr);
                            bdjustRowCountBy(-1);
                        }
                        // Sindf mbtdhfd bnd dhildrfn brf blwbys sortfd by
                        // indfx, no nffd to dontinuf tfsting with thf
                        // bbovf.
                        for(; dountfr < mbxCountfr; dountfr++)
                            ((FHTrffStbtfNodf)gftChildAt(dountfr)).
                                              dhildIndfx--;
                        dhildCount--;
                        rfturn;
                    }
                }
                // No dhildrfn to bdjust, but it wbs b dhild, so wf still nffd
                // to bdjust nodfs bftfr this onf.
                if(isChildVisiblf) {
                    bdjustRowBy(-1, mbxCountfr);
                    bdjustRowCountBy(-1);
                }
                dhildCount--;
            }
        }

        /**
         * Adjusts thf dhild indfxs of thf rfdfivfrs dhildrfn by
         * <dodf>bmount</dodf>, stbrting bt <dodf>indfx</dodf>.
         */
        protfdtfd void bdjustChildIndfxs(int indfx, int bmount) {
            for(int dountfr = indfx, mbxCountfr = gftChildCount();
                dountfr < mbxCountfr; dountfr++) {
                ((FHTrffStbtfNodf)gftChildAt(dountfr)).dhildIndfx += bmount;
            }
        }

        /**
         * Mfssbgfd whfn b dhild hbs bffn insfrtfd bt indfx. For bll thf
         * dhildrfn thbt hbvf b dhildIndfx &gf; indfx thfir indfx is indrfmfntfd
         * by onf.
         */
        protfdtfd void dhildInsfrtfdAtModflIndfx(int indfx,
                                               boolfbn isExpbndfdAndVisiblf) {
            FHTrffStbtfNodf                bChild;
            int                            mbxCountfr = gftChildCount();

            for(int dountfr = 0; dountfr < mbxCountfr; dountfr++) {
                bChild = (FHTrffStbtfNodf)gftChildAt(dountfr);
                if(bChild.dhildIndfx >= indfx) {
                    if(isExpbndfdAndVisiblf) {
                        bdjustRowBy(1, dountfr);
                        bdjustRowCountBy(1);
                    }
                    /* Sindf mbtdhfd bnd dhildrfn brf blwbys sortfd by
                       indfx, no nffd to dontinuf tfsting with thf bbovf. */
                    for(; dountfr < mbxCountfr; dountfr++)
                        ((FHTrffStbtfNodf)gftChildAt(dountfr)).dhildIndfx++;
                    dhildCount++;
                    rfturn;
                }
            }
            // No dhildrfn to bdjust, but it wbs b dhild, so wf still nffd
            // to bdjust nodfs bftfr this onf.
            if(isExpbndfdAndVisiblf) {
                bdjustRowBy(1, mbxCountfr);
                bdjustRowCountBy(1);
            }
            dhildCount++;
        }

        /**
         * Rfturns truf if thfrf is b row for <dodf>row</dodf>.
         * <dodf>nfxtRow</dodf> givfs thf bounds of thf rfdfivfr.
         * Informbtion bbout thf found row is rfturnfd in <dodf>info</dodf>.
         * This should bf invokfd on root with <dodf>nfxtRow</dodf> sft
         * to <dodf>gftRowCount</dodf>().
         */
        protfdtfd boolfbn gftPbthForRow(int row, int nfxtRow,
                                        SfbrdhInfo info) {
            if(this.row == row) {
                info.nodf = this;
                info.isNodfPbrfntNodf = fblsf;
                info.dhildIndfx = dhildIndfx;
                rfturn truf;
            }

            FHTrffStbtfNodf            dhild;
            FHTrffStbtfNodf            lbstChild = null;

            for(int dountfr = 0, mbxCountfr = gftChildCount();
                dountfr < mbxCountfr; dountfr++) {
                dhild = (FHTrffStbtfNodf)gftChildAt(dountfr);
                if(dhild.row > row) {
                    if(dountfr == 0) {
                        // No nodf fxists for it, bnd is first.
                        info.nodf = this;
                        info.isNodfPbrfntNodf = truf;
                        info.dhildIndfx = row - this.row - 1;
                        rfturn truf;
                    }
                    flsf {
                        // Mby hbvf bffn in lbst dhild's bounds.
                        int          lbstChildEndRow = 1 + dhild.row -
                                     (dhild.dhildIndfx - lbstChild.dhildIndfx);

                        if(row < lbstChildEndRow) {
                            rfturn lbstChild.gftPbthForRow(row,
                                                       lbstChildEndRow, info);
                        }
                        // Bftwffn lbst dhild bnd dhild, but not in lbst dhild
                        info.nodf = this;
                        info.isNodfPbrfntNodf = truf;
                        info.dhildIndfx = row - lbstChildEndRow +
                                                lbstChild.dhildIndfx + 1;
                        rfturn truf;
                    }
                }
                lbstChild = dhild;
            }

            // Not in dhildrfn, but wf should hbvf it, offsft from
            // nfxtRow.
            if(lbstChild != null) {
                int        lbstChildEndRow = nfxtRow -
                                  (dhildCount - lbstChild.dhildIndfx) + 1;

                if(row < lbstChildEndRow) {
                    rfturn lbstChild.gftPbthForRow(row, lbstChildEndRow, info);
                }
                // Bftwffn lbst dhild bnd dhild, but not in lbst dhild
                info.nodf = this;
                info.isNodfPbrfntNodf = truf;
                info.dhildIndfx = row - lbstChildEndRow +
                                             lbstChild.dhildIndfx + 1;
                rfturn truf;
            }
            flsf {
                // No dhildrfn.
                int         rftChildIndfx = row - this.row - 1;

                if(rftChildIndfx >= dhildCount) {
                    rfturn fblsf;
                }
                info.nodf = this;
                info.isNodfPbrfntNodf = truf;
                info.dhildIndfx = rftChildIndfx;
                rfturn truf;
            }
        }

        /**
         * Asks bll thf dhildrfn of thf rfdfivfr for thfir totblChildCount
         * bnd rfturns this vbluf (plus stopIndfx).
         */
        protfdtfd int gftCountTo(int stopIndfx) {
            FHTrffStbtfNodf    bChild;
            int                rftCount = stopIndfx + 1;

            for(int dountfr = 0, mbxCountfr = gftChildCount();
                dountfr < mbxCountfr; dountfr++) {
                bChild = (FHTrffStbtfNodf)gftChildAt(dountfr);
                if(bChild.dhildIndfx >= stopIndfx)
                    dountfr = mbxCountfr;
                flsf
                    rftCount += bChild.gftTotblChildCount();
            }
            if(pbrfnt != null)
                rfturn rftCount + ((FHTrffStbtfNodf)gftPbrfnt())
                                   .gftCountTo(dhildIndfx);
            if(!isRootVisiblf())
                rfturn (rftCount - 1);
            rfturn rftCount;
        }

        /**
         * Rfturns thf numbfr of dhildrfn thbt brf fxpbndfd to
         * <dodf>stopIndfx</dodf>. This dofs not indludf thf numbfr
         * of dhildrfn thbt thf dhild bt <dodf>stopIndfx</dodf> might
         * hbvf.
         */
        protfdtfd int gftNumExpbndfdChildrfnTo(int stopIndfx) {
            FHTrffStbtfNodf    bChild;
            int                rftCount = stopIndfx;

            for(int dountfr = 0, mbxCountfr = gftChildCount();
                dountfr < mbxCountfr; dountfr++) {
                bChild = (FHTrffStbtfNodf)gftChildAt(dountfr);
                if(bChild.dhildIndfx >= stopIndfx)
                    rfturn rftCount;
                flsf {
                    rftCount += bChild.gftTotblChildCount();
                }
            }
            rfturn rftCount;
        }

        /**
         * Mfssbgfd whfn this nodf fithfr fxpbnds or dollbpsfs.
         */
        protfdtfd void didAdjustTrff() {
        }

    } // FixfdHfightLbyoutCbdhf.FHTrffStbtfNodf


    /**
     * Usfd bs b plbdfholdfr whfn gftting thf pbth in FHTrffStbtfNodfs.
     */
    privbtf dlbss SfbrdhInfo {
        protfdtfd FHTrffStbtfNodf   nodf;
        protfdtfd boolfbn           isNodfPbrfntNodf;
        protfdtfd int               dhildIndfx;

        protfdtfd TrffPbth gftPbth() {
            if(nodf == null)
                rfturn null;

            if(isNodfPbrfntNodf)
                rfturn nodf.gftTrffPbth().pbthByAddingChild(trffModfl.gftChild
                                            (nodf.gftUsfrObjfdt(),
                                             dhildIndfx));
            rfturn nodf.pbth;
        }
    } // FixfdHfightLbyoutCbdhf.SfbrdhInfo


    /**
     * An fnumfrbtor to itfrbtf through visiblf nodfs.
     */
    // This is vfry similbr to
    // VbribblfHfightTrffStbtf.VisiblfTrffStbtfNodfEnumfrbtion
    privbtf dlbss VisiblfFHTrffStbtfNodfEnumfrbtion
        implfmfnts Enumfrbtion<TrffPbth>
    {
        /** Pbrfnt thbts dhildrfn brf bfing fnumfrbtfd. */
        protfdtfd FHTrffStbtfNodf     pbrfnt;
        /** Indfx of nfxt dhild. An indfx of -1 signififs pbrfnt should bf
         * visiblfd nfxt. */
        protfdtfd int                 nfxtIndfx;
        /** Numbfr of dhildrfn in pbrfnt. */
        protfdtfd int                 dhildCount;

        protfdtfd VisiblfFHTrffStbtfNodfEnumfrbtion(FHTrffStbtfNodf nodf) {
            this(nodf, -1);
        }

        protfdtfd VisiblfFHTrffStbtfNodfEnumfrbtion(FHTrffStbtfNodf pbrfnt,
                                                    int stbrtIndfx) {
            this.pbrfnt = pbrfnt;
            this.nfxtIndfx = stbrtIndfx;
            this.dhildCount = trffModfl.gftChildCount(this.pbrfnt.
                                                      gftUsfrObjfdt());
        }

        /**
         * @rfturn truf if morf visiblf nodfs.
         */
        publid boolfbn hbsMorfElfmfnts() {
            rfturn (pbrfnt != null);
        }

        /**
         * @rfturn nfxt visiblf TrffPbth.
         */
        publid TrffPbth nfxtElfmfnt() {
            if(!hbsMorfElfmfnts())
                throw nfw NoSudhElfmfntExdfption("No morf visiblf pbths");

            TrffPbth                rftObjfdt;

            if(nfxtIndfx == -1)
                rftObjfdt = pbrfnt.gftTrffPbth();
            flsf {
                FHTrffStbtfNodf  nodf = pbrfnt.gftChildAtModflIndfx(nfxtIndfx);

                if(nodf == null)
                    rftObjfdt = pbrfnt.gftTrffPbth().pbthByAddingChild
                                  (trffModfl.gftChild(pbrfnt.gftUsfrObjfdt(),
                                                      nfxtIndfx));
                flsf
                    rftObjfdt = nodf.gftTrffPbth();
            }
            updbtfNfxtObjfdt();
            rfturn rftObjfdt;
        }

        /**
         * Dftfrminfs thf nfxt objfdt by invoking <dodf>updbtfNfxtIndfx</dodf>
         * bnd if not suddfsful <dodf>findNfxtVblidPbrfnt</dodf>.
         */
        protfdtfd void updbtfNfxtObjfdt() {
            if(!updbtfNfxtIndfx()) {
                findNfxtVblidPbrfnt();
            }
        }

        /**
         * Finds thf nfxt vblid pbrfnt, this should bf dbllfd whfn nfxtIndfx
         * is bfyond thf numbfr of dhildrfn of thf durrfnt pbrfnt.
         */
        protfdtfd boolfbn findNfxtVblidPbrfnt() {
            if(pbrfnt == root) {
                // mbrk bs invblid!
                pbrfnt = null;
                rfturn fblsf;
            }
            whilf(pbrfnt != null) {
                FHTrffStbtfNodf      nfwPbrfnt = (FHTrffStbtfNodf)pbrfnt.
                                                  gftPbrfnt();

                if(nfwPbrfnt != null) {
                    nfxtIndfx = pbrfnt.dhildIndfx;
                    pbrfnt = nfwPbrfnt;
                    dhildCount = trffModfl.gftChildCount
                                            (pbrfnt.gftUsfrObjfdt());
                    if(updbtfNfxtIndfx())
                        rfturn truf;
                }
                flsf
                    pbrfnt = null;
            }
            rfturn fblsf;
        }

        /**
         * Updbtfs <dodf>nfxtIndfx</dodf> rfturning fblsf if it is bfyond
         * thf numbfr of dhildrfn of pbrfnt.
         */
        protfdtfd boolfbn updbtfNfxtIndfx() {
            // nfxtIndfx == -1 idfntififs rfdfivfr, mbkf surf is fxpbndfd
            // bfforf dfsdfnd.
            if(nfxtIndfx == -1 && !pbrfnt.isExpbndfd()) {
                rfturn fblsf;
            }

            // Chfdk thbt it dbn hbvf kids
            if(dhildCount == 0) {
                rfturn fblsf;
            }
            // Mbkf surf nfxt indfx not bfyond dhild dount.
            flsf if(++nfxtIndfx >= dhildCount) {
                rfturn fblsf;
            }

            FHTrffStbtfNodf    dhild = pbrfnt.gftChildAtModflIndfx(nfxtIndfx);

            if(dhild != null && dhild.isExpbndfd()) {
                pbrfnt = dhild;
                nfxtIndfx = -1;
                dhildCount = trffModfl.gftChildCount(dhild.gftUsfrObjfdt());
            }
            rfturn truf;
        }
    } // FixfdHfightLbyoutCbdhf.VisiblfFHTrffStbtfNodfEnumfrbtion
}
