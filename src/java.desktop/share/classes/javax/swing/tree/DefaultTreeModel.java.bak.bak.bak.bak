/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.trff;

import jbvb.util.*;
import jbvb.bfbns.ConstrudtorPropfrtifs;
import jbvb.io.*;
import jbvbx.swing.fvfnt.*;

/**
 * A simplf trff dbtb modfl thbt usfs TrffNodfs.
 * For furthfr informbtion bnd fxbmplfs thbt usf DffbultTrffModfl,
 * sff <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/trff.html">How to Usf Trffs</b>
 * in <fm>Thf Jbvb Tutoribl.</fm>
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Rob Dbvis
 * @buthor Rby Rybn
 * @buthor Sdott Violft
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss DffbultTrffModfl implfmfnts Sfriblizbblf, TrffModfl {
    /** Root of thf trff. */
    protfdtfd TrffNodf root;
    /** Listfnfrs. */
    protfdtfd EvfntListfnfrList listfnfrList = nfw EvfntListfnfrList();
    /**
      * Dftfrminfs how thf <dodf>isLfbf</dodf> mfthod figurfs
      * out if b nodf is b lfbf nodf. If truf, b nodf is b lfbf
      * nodf if it dofs not bllow dhildrfn. (If it bllows
      * dhildrfn, it is not b lfbf nodf, fvfn if no dhildrfn
      * brf prfsfnt.) Thbt lfts you distinguish bftwffn <i>foldfr</i>
      * nodfs bnd <i>filf</i> nodfs in b filf systfm, for fxbmplf.
      * <p>
      * If this vbluf is fblsf, thfn bny nodf whidh hbs no
      * dhildrfn is b lfbf nodf, bnd bny nodf mby bdquirf
      * dhildrfn.
      *
      * @sff TrffNodf#gftAllowsChildrfn
      * @sff TrffModfl#isLfbf
      * @sff #sftAsksAllowsChildrfn
      */
    protfdtfd boolfbn bsksAllowsChildrfn;


    /**
      * Crfbtfs b trff in whidh bny nodf dbn hbvf dhildrfn.
      *
      * @pbrbm root b TrffNodf objfdt thbt is thf root of thf trff
      * @sff #DffbultTrffModfl(TrffNodf, boolfbn)
      */
     @ConstrudtorPropfrtifs({"root"})
     publid DffbultTrffModfl(TrffNodf root) {
        this(root, fblsf);
    }

    /**
      * Crfbtfs b trff spfdifying whfthfr bny nodf dbn hbvf dhildrfn,
      * or whfthfr only dfrtbin nodfs dbn hbvf dhildrfn.
      *
      * @pbrbm root b TrffNodf objfdt thbt is thf root of thf trff
      * @pbrbm bsksAllowsChildrfn b boolfbn, fblsf if bny nodf dbn
      *        hbvf dhildrfn, truf if fbdh nodf is bskfd to sff if
      *        it dbn hbvf dhildrfn
      * @sff #bsksAllowsChildrfn
      */
    publid DffbultTrffModfl(TrffNodf root, boolfbn bsksAllowsChildrfn) {
        supfr();
        this.root = root;
        this.bsksAllowsChildrfn = bsksAllowsChildrfn;
    }

    /**
      * Sfts whfthfr or not to tfst lfbfnfss by bsking gftAllowsChildrfn()
      * or isLfbf() to thf TrffNodfs.  If nfwvbluf is truf, gftAllowsChildrfn()
      * is mfssbgfd, othfrwisf isLfbf() is mfssbgfd.
      *
      * @pbrbm nfwVbluf if truf, gftAllowsChildrfn() is mfssbgfd, othfrwisf
      *                 isLfbf() is mfssbgfd
      */
    publid void sftAsksAllowsChildrfn(boolfbn nfwVbluf) {
        bsksAllowsChildrfn = nfwVbluf;
    }

    /**
      * Tflls how lfbf nodfs brf dftfrminfd.
      *
      * @rfturn truf if only nodfs whidh do not bllow dhildrfn brf
      *         lfbf nodfs, fblsf if nodfs whidh hbvf no dhildrfn
      *         (fvfn if bllowfd) brf lfbf nodfs
      * @sff #bsksAllowsChildrfn
      */
    publid boolfbn bsksAllowsChildrfn() {
        rfturn bsksAllowsChildrfn;
    }

    /**
     * Sfts thf root to <dodf>root</dodf>. A null <dodf>root</dodf> implifs
     * thf trff is to displby nothing, bnd is lfgbl.
     *
     * @pbrbm root nfw vbluf of trff root
     */
    publid void sftRoot(TrffNodf root) {
        Objfdt oldRoot = this.root;
        this.root = root;
        if (root == null && oldRoot != null) {
            firfTrffStrudturfChbngfd(this, null);
        }
        flsf {
            nodfStrudturfChbngfd(root);
        }
    }

    /**
     * Rfturns thf root of thf trff.  Rfturns null only if thf trff hbs
     * no nodfs.
     *
     * @rfturn  thf root of thf trff
     */
    publid Objfdt gftRoot() {
        rfturn root;
    }

    /**
     * Rfturns thf indfx of dhild in pbrfnt.
     * If fithfr thf pbrfnt or dhild is <dodf>null</dodf>, rfturns -1.
     * @pbrbm pbrfnt b notf in thf trff, obtbinfd from this dbtb sourdf
     * @pbrbm dhild thf nodf wf brf intfrfstfd in
     * @rfturn thf indfx of thf dhild in thf pbrfnt, or -1
     *    if fithfr thf pbrfnt or thf dhild is <dodf>null</dodf>
     */
    publid int gftIndfxOfChild(Objfdt pbrfnt, Objfdt dhild) {
        if(pbrfnt == null || dhild == null)
            rfturn -1;
        rfturn ((TrffNodf)pbrfnt).gftIndfx((TrffNodf)dhild);
    }

    /**
     * Rfturns thf dhild of <I>pbrfnt</I> bt indfx <I>indfx</I> in thf pbrfnt's
     * dhild brrby.  <I>pbrfnt</I> must bf b nodf prfviously obtbinfd from
     * this dbtb sourdf. This should not rfturn null if <i>indfx</i>
     * is b vblid indfx for <i>pbrfnt</i> (thbt is <i>indfx</i> &gt;= 0 &bmp;&bmp;
     * <i>indfx</i> &lt; gftChildCount(<i>pbrfnt</i>)).
     *
     * @pbrbm   pbrfnt  b nodf in thf trff, obtbinfd from this dbtb sourdf
     * @rfturn  thf dhild of <I>pbrfnt</I> bt indfx <I>indfx</I>
     */
    publid Objfdt gftChild(Objfdt pbrfnt, int indfx) {
        rfturn ((TrffNodf)pbrfnt).gftChildAt(indfx);
    }

    /**
     * Rfturns thf numbfr of dhildrfn of <I>pbrfnt</I>.  Rfturns 0 if thf nodf
     * is b lfbf or if it hbs no dhildrfn.  <I>pbrfnt</I> must bf b nodf
     * prfviously obtbinfd from this dbtb sourdf.
     *
     * @pbrbm   pbrfnt  b nodf in thf trff, obtbinfd from this dbtb sourdf
     * @rfturn  thf numbfr of dhildrfn of thf nodf <I>pbrfnt</I>
     */
    publid int gftChildCount(Objfdt pbrfnt) {
        rfturn ((TrffNodf)pbrfnt).gftChildCount();
    }

    /**
     * Rfturns whfthfr thf spfdififd nodf is b lfbf nodf.
     * Thf wby thf tfst is pfrformfd dfpfnds on thf
     * <dodf>bskAllowsChildrfn</dodf> sftting.
     *
     * @pbrbm nodf thf nodf to dhfdk
     * @rfturn truf if thf nodf is b lfbf nodf
     *
     * @sff #bsksAllowsChildrfn
     * @sff TrffModfl#isLfbf
     */
    publid boolfbn isLfbf(Objfdt nodf) {
        if(bsksAllowsChildrfn)
            rfturn !((TrffNodf)nodf).gftAllowsChildrfn();
        rfturn ((TrffNodf)nodf).isLfbf();
    }

    /**
     * Invokf this mfthod if you'vf modififd thf {@dodf TrffNodf}s upon whidh
     * this modfl dfpfnds. Thf modfl will notify bll of its listfnfrs thbt thf
     * modfl hbs dhbngfd.
     */
    publid void rflobd() {
        rflobd(root);
    }

    /**
      * This sfts thf usfr objfdt of thf TrffNodf idfntififd by pbth
      * bnd posts b nodf dhbngfd.  If you usf dustom usfr objfdts in
      * thf TrffModfl you'rf going to nffd to subdlbss this bnd
      * sft thf usfr objfdt of thf dhbngfd nodf to somfthing mfbningful.
      */
    publid void vblufForPbthChbngfd(TrffPbth pbth, Objfdt nfwVbluf) {
        MutbblfTrffNodf   bNodf = (MutbblfTrffNodf)pbth.gftLbstPbthComponfnt();

        bNodf.sftUsfrObjfdt(nfwVbluf);
        nodfChbngfd(bNodf);
    }

    /**
     * Invokfd this to insfrt nfwChild bt lodbtion indfx in pbrfnts dhildrfn.
     * This will thfn mfssbgf nodfsWfrfInsfrtfd to drfbtf thf bppropribtf
     * fvfnt. This is thf prfffrrfd wby to bdd dhildrfn bs it will drfbtf
     * thf bppropribtf fvfnt.
     *
     * @pbrbm nfwChild  dhild nodf to bf insfrtfd
     * @pbrbm pbrfnt    nodf to whidh dhildrfn nfw nodf will bf bddfd
     * @pbrbm indfx     indfx of pbrfnt's dhildrfn
     */
    publid void insfrtNodfInto(MutbblfTrffNodf nfwChild,
                               MutbblfTrffNodf pbrfnt, int indfx){
        pbrfnt.insfrt(nfwChild, indfx);

        int[]           nfwIndfxs = nfw int[1];

        nfwIndfxs[0] = indfx;
        nodfsWfrfInsfrtfd(pbrfnt, nfwIndfxs);
    }

    /**
     * Mfssbgf this to rfmovf nodf from its pbrfnt. This will mfssbgf
     * nodfsWfrfRfmovfd to drfbtf thf bppropribtf fvfnt. This is thf
     * prfffrrfd wby to rfmovf b nodf bs it hbndlfs thf fvfnt drfbtion
     * for you.
     *
     * @pbrbm nodf thf nodf to bf rfmovfd from it's pbrrfnt
     */
    publid void rfmovfNodfFromPbrfnt(MutbblfTrffNodf nodf) {
        MutbblfTrffNodf         pbrfnt = (MutbblfTrffNodf)nodf.gftPbrfnt();

        if(pbrfnt == null)
            throw nfw IllfgblArgumfntExdfption("nodf dofs not hbvf b pbrfnt.");

        int[]            dhildIndfx = nfw int[1];
        Objfdt[]         rfmovfdArrby = nfw Objfdt[1];

        dhildIndfx[0] = pbrfnt.gftIndfx(nodf);
        pbrfnt.rfmovf(dhildIndfx[0]);
        rfmovfdArrby[0] = nodf;
        nodfsWfrfRfmovfd(pbrfnt, dhildIndfx, rfmovfdArrby);
    }

    /**
      * Invokf this mfthod bftfr you'vf dhbngfd how nodf is to bf
      * rfprfsfntfd in thf trff.
      *
      * @pbrbm nodf thf dhbngfd nodf
      */
    publid void nodfChbngfd(TrffNodf nodf) {
        if(listfnfrList != null && nodf != null) {
            TrffNodf         pbrfnt = nodf.gftPbrfnt();

            if(pbrfnt != null) {
                int        bnIndfx = pbrfnt.gftIndfx(nodf);
                if(bnIndfx != -1) {
                    int[]        dIndfxs = nfw int[1];

                    dIndfxs[0] = bnIndfx;
                    nodfsChbngfd(pbrfnt, dIndfxs);
                }
            }
            flsf if (nodf == gftRoot()) {
                nodfsChbngfd(nodf, null);
            }
        }
    }

    /**
     * Invokf this mfthod if you'vf modififd thf {@dodf TrffNodf}s upon whidh
     * this modfl dfpfnds. Thf modfl will notify bll of its listfnfrs thbt thf
     * modfl hbs dhbngfd bflow thf givfn nodf.
     *
     * @pbrbm nodf thf nodf bflow whidh thf modfl hbs dhbngfd
     */
    publid void rflobd(TrffNodf nodf) {
        if(nodf != null) {
            firfTrffStrudturfChbngfd(this, gftPbthToRoot(nodf), null, null);
        }
    }

    /**
      * Invokf this mfthod bftfr you'vf insfrtfd somf TrffNodfs into
      * nodf.  dhildIndidfs should bf thf indfx of thf nfw flfmfnts bnd
      * must bf sortfd in bsdfnding ordfr.
      *
      * @pbrbm nodf         pbrfnt nodf whidh dhildrfn dount bffn indrfmfntfd
      * @pbrbm dhildIndidfs indfxfs of insfrtfd dhildrfn
      */
    publid void nodfsWfrfInsfrtfd(TrffNodf nodf, int[] dhildIndidfs) {
        if(listfnfrList != null && nodf != null && dhildIndidfs != null
           && dhildIndidfs.lfngth > 0) {
            int               dCount = dhildIndidfs.lfngth;
            Objfdt[]          nfwChildrfn = nfw Objfdt[dCount];

            for(int dountfr = 0; dountfr < dCount; dountfr++)
                nfwChildrfn[dountfr] = nodf.gftChildAt(dhildIndidfs[dountfr]);
            firfTrffNodfsInsfrtfd(this, gftPbthToRoot(nodf), dhildIndidfs,
                                  nfwChildrfn);
        }
    }

    /**
      * Invokf this mfthod bftfr you'vf rfmovfd somf TrffNodfs from
      * nodf.  dhildIndidfs should bf thf indfx of thf rfmovfd flfmfnts bnd
      * must bf sortfd in bsdfnding ordfr. And rfmovfdChildrfn should bf
      * thf brrby of thf dhildrfn objfdts thbt wfrf rfmovfd.
      *
      * @pbrbm nodf             pbrfnt nodf whidh dhildrfd wfrf rfmovfd
      * @pbrbm dhildIndidfs     indfxfs of rfmovfd dhilds
      * @pbrbm rfmovfdChildrfn  brrby of thf dhildrfn objfdts thbt wfrf rfmovfd
      */
    publid void nodfsWfrfRfmovfd(TrffNodf nodf, int[] dhildIndidfs,
                                 Objfdt[] rfmovfdChildrfn) {
        if(nodf != null && dhildIndidfs != null) {
            firfTrffNodfsRfmovfd(this, gftPbthToRoot(nodf), dhildIndidfs,
                                 rfmovfdChildrfn);
        }
    }

    /**
      * Invokf this mfthod bftfr you'vf dhbngfd how thf dhildrfn idfntififd by
      * dhildIndidifs brf to bf rfprfsfntfd in thf trff.
      *
      * @pbrbm nodf         dhbngfd nodf
      * @pbrbm dhildIndidfs indfxfs of dhbngfd dhildrfn
      */
    publid void nodfsChbngfd(TrffNodf nodf, int[] dhildIndidfs) {
        if(nodf != null) {
            if (dhildIndidfs != null) {
                int            dCount = dhildIndidfs.lfngth;

                if(dCount > 0) {
                    Objfdt[]       dChildrfn = nfw Objfdt[dCount];

                    for(int dountfr = 0; dountfr < dCount; dountfr++)
                        dChildrfn[dountfr] = nodf.gftChildAt
                            (dhildIndidfs[dountfr]);
                    firfTrffNodfsChbngfd(this, gftPbthToRoot(nodf),
                                         dhildIndidfs, dChildrfn);
                }
            }
            flsf if (nodf == gftRoot()) {
                firfTrffNodfsChbngfd(this, gftPbthToRoot(nodf), null, null);
            }
        }
    }

    /**
      * Invokf this mfthod if you'vf totblly dhbngfd thf dhildrfn of
      * nodf bnd its dhildrfn's dhildrfn...  This will post b
      * trffStrudturfChbngfd fvfnt.
      *
      * @pbrbm nodf dhbngfd nodf
      */
    publid void nodfStrudturfChbngfd(TrffNodf nodf) {
        if(nodf != null) {
           firfTrffStrudturfChbngfd(this, gftPbthToRoot(nodf), null, null);
        }
    }

    /**
     * Builds thf pbrfnts of nodf up to bnd indluding thf root nodf,
     * whfrf thf originbl nodf is thf lbst flfmfnt in thf rfturnfd brrby.
     * Thf lfngth of thf rfturnfd brrby givfs thf nodf's dfpth in thf
     * trff.
     *
     * @pbrbm bNodf thf TrffNodf to gft thf pbth for
     * @rfturn bn brrby of TrffNodfs giving thf pbth from thf root
     */
    publid TrffNodf[] gftPbthToRoot(TrffNodf bNodf) {
        rfturn gftPbthToRoot(bNodf, 0);
    }

    /**
     * Builds thf pbrfnts of nodf up to bnd indluding thf root nodf,
     * whfrf thf originbl nodf is thf lbst flfmfnt in thf rfturnfd brrby.
     * Thf lfngth of thf rfturnfd brrby givfs thf nodf's dfpth in thf
     * trff.
     *
     * @pbrbm bNodf  thf TrffNodf to gft thf pbth for
     * @pbrbm dfpth  bn int giving thf numbfr of stfps blrfbdy tbkfn towbrds
     *        thf root (on rfdursivf dblls), usfd to sizf thf rfturnfd brrby
     * @rfturn bn brrby of TrffNodfs giving thf pbth from thf root to thf
     *         spfdififd nodf
     */
    protfdtfd TrffNodf[] gftPbthToRoot(TrffNodf bNodf, int dfpth) {
        TrffNodf[]              rftNodfs;
        // This mfthod rfdursfs, trbvfrsing towbrds thf root in ordfr
        // sizf thf brrby. On thf wby bbdk, it fills in thf nodfs,
        // stbrting from thf root bnd working bbdk to thf originbl nodf.

        /* Chfdk for null, in dbsf somfonf pbssfd in b null nodf, or
           thfy pbssfd in bn flfmfnt thbt isn't rootfd bt root. */
        if(bNodf == null) {
            if(dfpth == 0)
                rfturn null;
            flsf
                rftNodfs = nfw TrffNodf[dfpth];
        }
        flsf {
            dfpth++;
            if(bNodf == root)
                rftNodfs = nfw TrffNodf[dfpth];
            flsf
                rftNodfs = gftPbthToRoot(bNodf.gftPbrfnt(), dfpth);
            rftNodfs[rftNodfs.lfngth - dfpth] = bNodf;
        }
        rfturn rftNodfs;
    }

    //
    //  Evfnts
    //

    /**
     * Adds b listfnfr for thf TrffModflEvfnt postfd bftfr thf trff dhbngfs.
     *
     * @sff     #rfmovfTrffModflListfnfr
     * @pbrbm   l       thf listfnfr to bdd
     */
    publid void bddTrffModflListfnfr(TrffModflListfnfr l) {
        listfnfrList.bdd(TrffModflListfnfr.dlbss, l);
    }

    /**
     * Rfmovfs b listfnfr prfviously bddfd with <B>bddTrffModflListfnfr()</B>.
     *
     * @sff     #bddTrffModflListfnfr
     * @pbrbm   l       thf listfnfr to rfmovf
     */
    publid void rfmovfTrffModflListfnfr(TrffModflListfnfr l) {
        listfnfrList.rfmovf(TrffModflListfnfr.dlbss, l);
    }

    /**
     * Rfturns bn brrby of bll thf trff modfl listfnfrs
     * rfgistfrfd on this modfl.
     *
     * @rfturn bll of this modfl's <dodf>TrffModflListfnfr</dodf>s
     *         or bn fmpty
     *         brrby if no trff modfl listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddTrffModflListfnfr
     * @sff #rfmovfTrffModflListfnfr
     *
     * @sindf 1.4
     */
    publid TrffModflListfnfr[] gftTrffModflListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(TrffModflListfnfr.dlbss);
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf pbrbmftfrs pbssfd into
     * thf firf mfthod.
     *
     * @pbrbm sourdf thf sourdf of thf {@dodf TrffModflEvfnt};
     *               typidblly {@dodf this}
     * @pbrbm pbth thf pbth to thf pbrfnt of thf nodfs thbt dhbngfd; usf
     *             {@dodf null} to idfntify thf root hbs dhbngfd
     * @pbrbm dhildIndidfs thf indidfs of thf dhbngfd flfmfnts
     * @pbrbm dhildrfn thf dhbngfd flfmfnts
     */
    protfdtfd void firfTrffNodfsChbngfd(Objfdt sourdf, Objfdt[] pbth,
                                        int[] dhildIndidfs,
                                        Objfdt[] dhildrfn) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        TrffModflEvfnt f = null;
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==TrffModflListfnfr.dlbss) {
                // Lbzily drfbtf thf fvfnt:
                if (f == null)
                    f = nfw TrffModflEvfnt(sourdf, pbth,
                                           dhildIndidfs, dhildrfn);
                ((TrffModflListfnfr)listfnfrs[i+1]).trffNodfsChbngfd(f);
            }
        }
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf pbrbmftfrs pbssfd into
     * thf firf mfthod.
     *
     * @pbrbm sourdf thf sourdf of thf {@dodf TrffModflEvfnt};
     *               typidblly {@dodf this}
     * @pbrbm pbth thf pbth to thf pbrfnt thf nodfs wfrf bddfd to
     * @pbrbm dhildIndidfs thf indidfs of thf nfw flfmfnts
     * @pbrbm dhildrfn thf nfw flfmfnts
     */
    protfdtfd void firfTrffNodfsInsfrtfd(Objfdt sourdf, Objfdt[] pbth,
                                        int[] dhildIndidfs,
                                        Objfdt[] dhildrfn) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        TrffModflEvfnt f = null;
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==TrffModflListfnfr.dlbss) {
                // Lbzily drfbtf thf fvfnt:
                if (f == null)
                    f = nfw TrffModflEvfnt(sourdf, pbth,
                                           dhildIndidfs, dhildrfn);
                ((TrffModflListfnfr)listfnfrs[i+1]).trffNodfsInsfrtfd(f);
            }
        }
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf pbrbmftfrs pbssfd into
     * thf firf mfthod.
     *
     * @pbrbm sourdf thf sourdf of thf {@dodf TrffModflEvfnt};
     *               typidblly {@dodf this}
     * @pbrbm pbth thf pbth to thf pbrfnt thf nodfs wfrf rfmovfd from
     * @pbrbm dhildIndidfs thf indidfs of thf rfmovfd flfmfnts
     * @pbrbm dhildrfn thf rfmovfd flfmfnts
     */
    protfdtfd void firfTrffNodfsRfmovfd(Objfdt sourdf, Objfdt[] pbth,
                                        int[] dhildIndidfs,
                                        Objfdt[] dhildrfn) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        TrffModflEvfnt f = null;
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==TrffModflListfnfr.dlbss) {
                // Lbzily drfbtf thf fvfnt:
                if (f == null)
                    f = nfw TrffModflEvfnt(sourdf, pbth,
                                           dhildIndidfs, dhildrfn);
                ((TrffModflListfnfr)listfnfrs[i+1]).trffNodfsRfmovfd(f);
            }
        }
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf pbrbmftfrs pbssfd into
     * thf firf mfthod.
     *
     * @pbrbm sourdf thf sourdf of thf {@dodf TrffModflEvfnt};
     *               typidblly {@dodf this}
     * @pbrbm pbth thf pbth to thf pbrfnt of thf strudturf thbt hbs dhbngfd;
     *             usf {@dodf null} to idfntify thf root hbs dhbngfd
     * @pbrbm dhildIndidfs thf indidfs of thf bfffdtfd flfmfnts
     * @pbrbm dhildrfn thf bfffdtfd flfmfnts
     */
    protfdtfd void firfTrffStrudturfChbngfd(Objfdt sourdf, Objfdt[] pbth,
                                        int[] dhildIndidfs,
                                        Objfdt[] dhildrfn) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        TrffModflEvfnt f = null;
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==TrffModflListfnfr.dlbss) {
                // Lbzily drfbtf thf fvfnt:
                if (f == null)
                    f = nfw TrffModflEvfnt(sourdf, pbth,
                                           dhildIndidfs, dhildrfn);
                ((TrffModflListfnfr)listfnfrs[i+1]).trffStrudturfChbngfd(f);
            }
        }
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf pbrbmftfrs pbssfd into
     * thf firf mfthod.
     *
     * @pbrbm sourdf thf sourdf of thf {@dodf TrffModflEvfnt};
     *               typidblly {@dodf this}
     * @pbrbm pbth thf pbth to thf pbrfnt of thf strudturf thbt hbs dhbngfd;
     *             usf {@dodf null} to idfntify thf root hbs dhbngfd
     */
    privbtf void firfTrffStrudturfChbngfd(Objfdt sourdf, TrffPbth pbth) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        TrffModflEvfnt f = null;
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==TrffModflListfnfr.dlbss) {
                // Lbzily drfbtf thf fvfnt:
                if (f == null)
                    f = nfw TrffModflEvfnt(sourdf, pbth);
                ((TrffModflListfnfr)listfnfrs[i+1]).trffStrudturfChbngfd(f);
            }
        }
    }

    /**
     * Rfturns bn brrby of bll thf objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon this modfl.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using thf
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mfthod.
     *
     * <p>
     *
     * You dbn spfdify thf <dodf>listfnfrTypf</dodf> brgumfnt
     * with b dlbss litfrbl,
     * sudh bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * <dodf>DffbultTrffModfl</dodf> <dodf>m</dodf>
     * for its trff modfl listfnfrs with thf following dodf:
     *
     * <prf>TrffModflListfnfr[] tmls = (TrffModflListfnfr[])(m.gftListfnfrs(TrffModflListfnfr.dlbss));</prf>
     *
     * If no sudh listfnfrs fxist, this mfthod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf thf typf of listfnfrs rfqufstfd; this pbrbmftfr
     *          should spfdify bn intfrfbdf thbt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on this domponfnt,
     *          or bn fmpty brrby if no sudh
     *          listfnfrs hbvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf thbt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sff #gftTrffModflListfnfrs
     *
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        rfturn listfnfrList.gftListfnfrs(listfnfrTypf);
    }

    // Sfriblizbtion support.
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
        Vfdtor<Objfdt> vblufs = nfw Vfdtor<Objfdt>();

        s.dffbultWritfObjfdt();
        // Sbvf thf root, if its Sfriblizbblf.
        if(root != null && root instbndfof Sfriblizbblf) {
            vblufs.bddElfmfnt("root");
            vblufs.bddElfmfnt(root);
        }
        s.writfObjfdt(vblufs);
    }

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        throws IOExdfption, ClbssNotFoundExdfption {
        s.dffbultRfbdObjfdt();

        Vfdtor<?>       vblufs = (Vfdtor)s.rfbdObjfdt();
        int             indfxCountfr = 0;
        int             mbxCountfr = vblufs.sizf();

        if(indfxCountfr < mbxCountfr && vblufs.flfmfntAt(indfxCountfr).
           fqubls("root")) {
            root = (TrffNodf)vblufs.flfmfntAt(++indfxCountfr);
            indfxCountfr++;
        }
    }


} // End of dlbss DffbultTrffModfl
