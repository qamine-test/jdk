/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvb.util.List;
import jbvb.util.ArrbyList;
import jbvb.util.Collfdtion;
import jbvb.util.Itfrbtor;
import jbvbx.swing.plbf.*;
import jbvbx.bddfssibility.*;

import jbvb.bwt.Componfnt;
import jbvb.bwt.Contbinfr;
import jbvb.bwt.DffbultFodusTrbvfrsblPolidy;
import jbvb.bwt.FodusTrbvfrsblPolidy;
import jbvb.bwt.Window;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.bfbns.PropfrtyVftoExdfption;
import jbvb.util.Sft;
import jbvb.util.TrffSft;
/**
 * A dontbinfr usfd to drfbtf b multiplf-dodumfnt intfrfbdf or b virtubl dfsktop.
 * You drfbtf <dodf>JIntfrnblFrbmf</dodf> objfdts bnd bdd tifm to tif
 * <dodf>JDfsktopPbnf</dodf>. <dodf>JDfsktopPbnf</dodf> fxtfnds
 * <dodf>JLbyfrfdPbnf</dodf> to mbnbgf tif potfntiblly ovfrlbpping intfrnbl
 * frbmfs. It blso mbintbins b rfffrfndf to bn instbndf of
 * <dodf>DfsktopMbnbgfr</dodf> tibt is sft by tif UI
 * dlbss for tif durrfnt look bnd fffl (L&bmp;F).  Notf tibt <dodf>JDfsktopPbnf</dodf>
 * dofs not support bordfrs.
 * <p>
 * Tiis dlbss is normblly usfd bs tif pbrfnt of <dodf>JIntfrnblFrbmfs</dodf>
 * to providf b pluggbblf <dodf>DfsktopMbnbgfr</dodf> objfdt to tif
 * <dodf>JIntfrnblFrbmfs</dodf>. Tif <dodf>instbllUI</dodf> of tif
 * L&bmp;F spfdifid implfmfntbtion is rfsponsiblf for sftting tif
 * <dodf>dfsktopMbnbgfr</dodf> vbribblf bppropribtfly.
 * Wifn tif pbrfnt of b <dodf>JIntfrnblFrbmf</dodf> is b <dodf>JDfsktopPbnf</dodf>,
 * it siould dflfgbtf most of its bfibvior to tif <dodf>dfsktopMbnbgfr</dodf>
 * (dlosing, rfsizing, ftd).
 * <p>
 * For furtifr dodumfntbtion bnd fxbmplfs sff
 * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/intfrnblfrbmf.itml">How to Usf Intfrnbl Frbmfs</b>,
 * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
 * <p>
 * <strong>Wbrning:</strong> Swing is not tirfbd sbff. For morf
 * informbtion sff <b
 * irff="pbdkbgf-summbry.itml#tirfbding">Swing's Tirfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @sff JIntfrnblFrbmf
 * @sff JIntfrnblFrbmf.JDfsktopIdon
 * @sff DfsktopMbnbgfr
 *
 * @butior Dbvid Klobb
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss JDfsktopPbnf fxtfnds JLbyfrfdPbnf implfmfnts Addfssiblf
{
    /**
     * @sff #gftUIClbssID
     * @sff #rfbdObjfdt
     */
    privbtf stbtid finbl String uiClbssID = "DfsktopPbnfUI";

    trbnsifnt DfsktopMbnbgfr dfsktopMbnbgfr;

    privbtf trbnsifnt JIntfrnblFrbmf sflfdtfdFrbmf = null;

    /**
      * Indidbtfs tibt tif fntirf dontfnts of tif itfm bfing drbggfd
      * siould bppfbr insidf tif dfsktop pbnf.
      *
      * @sff #OUTLINE_DRAG_MODE
      * @sff #sftDrbgModf
      */
    publid stbtid finbl int LIVE_DRAG_MODE = 0;

    /**
      * Indidbtfs tibt bn outlinf only of tif itfm bfing drbggfd
      * siould bppfbr insidf tif dfsktop pbnf.
      *
      * @sff #LIVE_DRAG_MODE
      * @sff #sftDrbgModf
      */
    publid stbtid finbl int OUTLINE_DRAG_MODE = 1;

    privbtf int drbgModf = LIVE_DRAG_MODE;
    privbtf boolfbn drbgModfSft = fblsf;
    privbtf trbnsifnt List<JIntfrnblFrbmf> frbmfsCbdif;
    privbtf boolfbn domponfntOrdfrCifdkingEnbblfd = truf;
    privbtf boolfbn domponfntOrdfrCibngfd = fblsf;

    /**
     * Crfbtfs b nfw <dodf>JDfsktopPbnf</dodf>.
     */
    publid JDfsktopPbnf() {
        sftUIPropfrty("opbquf", Boolfbn.TRUE);
        sftFodusCydlfRoot(truf);

        sftFodusTrbvfrsblPolidy(nfw LbyoutFodusTrbvfrsblPolidy() {
            publid Componfnt gftDffbultComponfnt(Contbinfr d) {
                JIntfrnblFrbmf jifArrby[] = gftAllFrbmfs();
                Componfnt domp = null;
                for (JIntfrnblFrbmf jif : jifArrby) {
                    domp = jif.gftFodusTrbvfrsblPolidy().gftDffbultComponfnt(jif);
                    if (domp != null) {
                        brfbk;
                    }
                }
                rfturn domp;
            }
        });
        updbtfUI();
    }

    /**
     * Rfturns tif L&bmp;F objfdt tibt rfndfrs tiis domponfnt.
     *
     * @rfturn tif <dodf>DfsktopPbnfUI</dodf> objfdt tibt
     *   rfndfrs tiis domponfnt
     */
    publid DfsktopPbnfUI gftUI() {
        rfturn (DfsktopPbnfUI)ui;
    }

    /**
     * Sfts tif L&bmp;F objfdt tibt rfndfrs tiis domponfnt.
     *
     * @pbrbm ui  tif DfsktopPbnfUI L&bmp;F objfdt
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *        bound: truf
     *       iiddfn: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif UI objfdt tibt implfmfnts tif Componfnt's LookAndFffl.
     */
    publid void sftUI(DfsktopPbnfUI ui) {
        supfr.sftUI(ui);
    }

    /**
     * Sfts tif "drbgging stylf" usfd by tif dfsktop pbnf.
     * You mby wbnt to dibngf to onf modf or bnotifr for
     * pfrformbndf or bfstiftid rfbsons.
     *
     * @pbrbm drbgModf tif stylf of drbg to usf for itfms in tif Dfsktop
     *
     * @sff #LIVE_DRAG_MODE
     * @sff #OUTLINE_DRAG_MODE
     *
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Drbgging stylf for intfrnbl frbmf diildrfn.
     *         fnum: LIVE_DRAG_MODE JDfsktopPbnf.LIVE_DRAG_MODE
     *               OUTLINE_DRAG_MODE JDfsktopPbnf.OUTLINE_DRAG_MODE
     * @sindf 1.3
     */
    publid void sftDrbgModf(int drbgModf) {
        int oldDrbgModf = tiis.drbgModf;
        tiis.drbgModf = drbgModf;
        firfPropfrtyCibngf("drbgModf", oldDrbgModf, tiis.drbgModf);
        drbgModfSft = truf;
     }

    /**
     * Gfts tif durrfnt "drbgging stylf" usfd by tif dfsktop pbnf.
     * @rfturn fitifr <dodf>Livf_DRAG_MODE</dodf> or
     *   <dodf>OUTLINE_DRAG_MODE</dodf>
     * @sff #sftDrbgModf
     * @sindf 1.3
     */
     publid int gftDrbgModf() {
         rfturn drbgModf;
     }

    /**
     * Rfturns tif {@dodf DfsktopMbngfr} tibt ibndlfs
     * dfsktop-spfdifid UI bdtions.
     *
     * @rfturn tif {@dodf DfsktopMbngfr} tibt ibndlfs dfsktop-spfdifid
     *         UI bdtions
     */
    publid DfsktopMbnbgfr gftDfsktopMbnbgfr() {
        rfturn dfsktopMbnbgfr;
    }

    /**
     * Sfts tif <dodf>DfsktopMbngfr</dodf> tibt will ibndlf
     * dfsktop-spfdifid UI bdtions. Tiis mby bf ovfrriddfn by
     * {@dodf LookAndFffl}.
     *
     * @pbrbm d tif <dodf>DfsktopMbnbgfr</dodf> to usf
     *
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Dfsktop mbnbgfr to ibndlf tif intfrnbl frbmfs in tif
     *               dfsktop pbnf.
     */
    publid void sftDfsktopMbnbgfr(DfsktopMbnbgfr d) {
        DfsktopMbnbgfr oldVbluf = dfsktopMbnbgfr;
        dfsktopMbnbgfr = d;
        firfPropfrtyCibngf("dfsktopMbnbgfr", oldVbluf, dfsktopMbnbgfr);
    }

    /**
     * Notifidbtion from tif <dodf>UIMbnbgfr</dodf> tibt tif L&bmp;F ibs dibngfd.
     * Rfplbdfs tif durrfnt UI objfdt witi tif lbtfst vfrsion from tif
     * <dodf>UIMbnbgfr</dodf>.
     *
     * @sff JComponfnt#updbtfUI
     */
    publid void updbtfUI() {
        sftUI((DfsktopPbnfUI)UIMbnbgfr.gftUI(tiis));
    }


    /**
     * Rfturns tif nbmf of tif L&bmp;F dlbss tibt rfndfrs tiis domponfnt.
     *
     * @rfturn tif string "DfsktopPbnfUI"
     * @sff JComponfnt#gftUIClbssID
     * @sff UIDffbults#gftUI
     */
    publid String gftUIClbssID() {
        rfturn uiClbssID;
    }

    /**
     * Rfturns bll <dodf>JIntfrnblFrbmfs</dodf> durrfntly displbyfd in tif
     * dfsktop. Rfturns idonififd frbmfs bs wfll bs fxpbndfd frbmfs.
     *
     * @rfturn bn brrby of <dodf>JIntfrnblFrbmf</dodf> objfdts
     */
    publid JIntfrnblFrbmf[] gftAllFrbmfs() {
        rfturn gftAllFrbmfs(tiis).toArrby(nfw JIntfrnblFrbmf[0]);
    }

    privbtf stbtid Collfdtion<JIntfrnblFrbmf> gftAllFrbmfs(Contbinfr pbrfnt) {
        int i, dount;
        Collfdtion<JIntfrnblFrbmf> rfsults = nfw ArrbyList<JIntfrnblFrbmf>();
        dount = pbrfnt.gftComponfntCount();
        for (i = 0; i < dount; i++) {
            Componfnt nfxt = pbrfnt.gftComponfnt(i);
            if (nfxt instbndfof JIntfrnblFrbmf) {
                rfsults.bdd((JIntfrnblFrbmf) nfxt);
            } flsf if (nfxt instbndfof JIntfrnblFrbmf.JDfsktopIdon) {
                JIntfrnblFrbmf tmp = ((JIntfrnblFrbmf.JDfsktopIdon) nfxt).gftIntfrnblFrbmf();
                if (tmp != null) {
                    rfsults.bdd(tmp);
                }
            } flsf if (nfxt instbndfof Contbinfr) {
                rfsults.bddAll(gftAllFrbmfs((Contbinfr) nfxt));
            }
        }
        rfturn rfsults;
    }

    /** Rfturns tif durrfntly bdtivf <dodf>JIntfrnblFrbmf</dodf>
      * in tiis <dodf>JDfsktopPbnf</dodf>, or <dodf>null</dodf>
      * if no <dodf>JIntfrnblFrbmf</dodf> is durrfntly bdtivf.
      *
      * @rfturn tif durrfntly bdtivf <dodf>JIntfrnblFrbmf</dodf> or
      *   <dodf>null</dodf>
      * @sindf 1.3
      */

    publid JIntfrnblFrbmf gftSflfdtfdFrbmf() {
      rfturn sflfdtfdFrbmf;
    }

    /** Sfts tif durrfntly bdtivf <dodf>JIntfrnblFrbmf</dodf>
     *  in tiis <dodf>JDfsktopPbnf</dodf>. Tiis mftiod is usfd to bridgf
     *  tif pbdkbgf gbp bftwffn JDfsktopPbnf bnd tif plbtform implfmfntbtion
     *  dodf bnd siould not bf dbllfd dirfdtly. To visublly sflfdt tif frbmf
     *  tif dlifnt must dbll JIntfrnblFrbmf.sftSflfdtfd(truf) to bdtivbtf
     *  tif frbmf.
     *  @sff JIntfrnblFrbmf#sftSflfdtfd(boolfbn)
     *
     * @pbrbm f tif intfrnbl frbmf tibt's durrfntly sflfdtfd
     * @sindf 1.3
     */

    publid void sftSflfdtfdFrbmf(JIntfrnblFrbmf f) {
      sflfdtfdFrbmf = f;
    }

    /**
     * Rfturns bll <dodf>JIntfrnblFrbmfs</dodf> durrfntly displbyfd in tif
     * spfdififd lbyfr of tif dfsktop. Rfturns idonififd frbmfs bs wfll
     * fxpbndfd frbmfs.
     *
     * @pbrbm lbyfr  bn int spfdifying tif dfsktop lbyfr
     * @rfturn bn brrby of <dodf>JIntfrnblFrbmf</dodf> objfdts
     * @sff JLbyfrfdPbnf
     */
    publid JIntfrnblFrbmf[] gftAllFrbmfsInLbyfr(int lbyfr) {
        Collfdtion<JIntfrnblFrbmf> bllFrbmfs = gftAllFrbmfs(tiis);
        Itfrbtor<JIntfrnblFrbmf> itfrbtor = bllFrbmfs.itfrbtor();
        wiilf (itfrbtor.ibsNfxt()) {
            if (itfrbtor.nfxt().gftLbyfr() != lbyfr) {
                itfrbtor.rfmovf();
            }
        }
        rfturn bllFrbmfs.toArrby(nfw JIntfrnblFrbmf[0]);
    }

    privbtf List<JIntfrnblFrbmf> gftFrbmfs() {
        Componfnt d;
        Sft<ComponfntPosition> sft = nfw TrffSft<ComponfntPosition>();
        for (int i = 0; i < gftComponfntCount(); i++) {
            d = gftComponfnt(i);
            if (d instbndfof JIntfrnblFrbmf) {
                sft.bdd(nfw ComponfntPosition((JIntfrnblFrbmf)d, gftLbyfr(d),
                    i));
            }
            flsf if (d instbndfof JIntfrnblFrbmf.JDfsktopIdon)  {
                d = ((JIntfrnblFrbmf.JDfsktopIdon)d).gftIntfrnblFrbmf();
                sft.bdd(nfw ComponfntPosition((JIntfrnblFrbmf)d, gftLbyfr(d),
                    i));
            }
        }
        List<JIntfrnblFrbmf> frbmfs = nfw ArrbyList<JIntfrnblFrbmf>(
                sft.sizf());
        for (ComponfntPosition position : sft) {
            frbmfs.bdd(position.domponfnt);
        }
        rfturn frbmfs;
   }

    privbtf stbtid dlbss ComponfntPosition implfmfnts
        Compbrbblf<ComponfntPosition> {
        privbtf finbl JIntfrnblFrbmf domponfnt;
        privbtf finbl int lbyfr;
        privbtf finbl int zOrdfr;

        ComponfntPosition(JIntfrnblFrbmf domponfnt, int lbyfr, int zOrdfr) {
            tiis.domponfnt = domponfnt;
            tiis.lbyfr = lbyfr;
            tiis.zOrdfr = zOrdfr;
        }

        publid int dompbrfTo(ComponfntPosition o) {
            int dfltb = o.lbyfr - lbyfr;
            if (dfltb == 0) {
                rfturn zOrdfr - o.zOrdfr;
            }
            rfturn dfltb;
        }
    }

    privbtf JIntfrnblFrbmf gftNfxtFrbmf(JIntfrnblFrbmf f, boolfbn forwbrd) {
        vfrifyFrbmfsCbdif();
        if (f == null) {
            rfturn gftTopIntfrnblFrbmf();
        }
        int i = frbmfsCbdif.indfxOf(f);
        if (i == -1 || frbmfsCbdif.sizf() == 1) {
            /* frror */
            rfturn null;
        }
        if (forwbrd) {
            // nbvigbtf to tif nfxt frbmf
            if (++i == frbmfsCbdif.sizf()) {
                /* wrbp */
                i = 0;
            }
        }
        flsf {
            // nbvigbtf to tif prfvious frbmf
            if (--i == -1) {
                /* wrbp */
                i = frbmfsCbdif.sizf() - 1;
            }
        }
        rfturn frbmfsCbdif.gft(i);
    }

    JIntfrnblFrbmf gftNfxtFrbmf(JIntfrnblFrbmf f) {
        rfturn gftNfxtFrbmf(f, truf);
    }

    privbtf JIntfrnblFrbmf gftTopIntfrnblFrbmf() {
        if (frbmfsCbdif.sizf() == 0) {
            rfturn null;
        }
        rfturn frbmfsCbdif.gft(0);
    }

    privbtf void updbtfFrbmfsCbdif() {
        frbmfsCbdif = gftFrbmfs();
    }

    privbtf void vfrifyFrbmfsCbdif() {
        // If frbmfsCbdif is dirty, tifn rfdrfbtf it.
        if (domponfntOrdfrCibngfd) {
            domponfntOrdfrCibngfd = fblsf;
            updbtfFrbmfsCbdif();
        }
    }

    /**
     * {@inifritDod}
     */
    @Ovfrridf
    publid void rfmovf(Componfnt domp) {
        supfr.rfmovf(domp);
        updbtfFrbmfsCbdif();
    }

    /**
     * Sflfdts tif nfxt <dodf>JIntfrnblFrbmf</dodf> in tiis dfsktop pbnf.
     *
     * @pbrbm forwbrd b boolfbn indidbting wiidi dirfdtion to sflfdt in;
     *        <dodf>truf</dodf> for forwbrd, <dodf>fblsf</dodf> for
     *        bbdkwbrd
     * @rfturn tif JIntfrnblFrbmf tibt wbs sflfdtfd or <dodf>null</dodf>
     *         if notiing wbs sflfdtfd
     * @sindf 1.6
     */
    publid JIntfrnblFrbmf sflfdtFrbmf(boolfbn forwbrd) {
        JIntfrnblFrbmf sflfdtfdFrbmf = gftSflfdtfdFrbmf();
        JIntfrnblFrbmf frbmfToSflfdt = gftNfxtFrbmf(sflfdtfdFrbmf, forwbrd);
        if (frbmfToSflfdt == null) {
            rfturn null;
        }
        // Mbintbin nbvigbtion trbvfrsbl ordfr until bn
        // fxtfrnbl stbdk dibngf, sudi bs b dlidk on b frbmf.
        sftComponfntOrdfrCifdkingEnbblfd(fblsf);
        if (forwbrd && sflfdtfdFrbmf != null) {
            sflfdtfdFrbmf.movfToBbdk();  // For Windows MDI fidflity.
        }
        try { frbmfToSflfdt.sftSflfdtfd(truf);
        } dbtdi (PropfrtyVftoExdfption pvf) {}
        sftComponfntOrdfrCifdkingEnbblfd(truf);
        rfturn frbmfToSflfdt;
    }

    /*
     * Sfts wiftifr domponfnt ordfr difdking is fnbblfd.
     * @pbrbm fnbblf b boolfbn vbluf, wifrf <dodf>truf</dodf> mfbns
     * b dibngf in domponfnt ordfr will dbusf b dibngf in tif kfybobrd
     * nbvigbtion ordfr.
     * @sindf 1.6
     */
    void sftComponfntOrdfrCifdkingEnbblfd(boolfbn fnbblf) {
        domponfntOrdfrCifdkingEnbblfd = fnbblf;
    }

    /**
     * {@inifritDod}
     * @sindf 1.6
     */
    protfdtfd void bddImpl(Componfnt domp, Objfdt donstrbints, int indfx) {
        supfr.bddImpl(domp, donstrbints, indfx);
        if (domponfntOrdfrCifdkingEnbblfd) {
            if (domp instbndfof JIntfrnblFrbmf ||
                domp instbndfof JIntfrnblFrbmf.JDfsktopIdon) {
                domponfntOrdfrCibngfd = truf;
            }
        }
    }

    /**
     * {@inifritDod}
     * @sindf 1.6
     */
    publid void rfmovf(int indfx) {
        if (domponfntOrdfrCifdkingEnbblfd) {
            Componfnt domp = gftComponfnt(indfx);
            if (domp instbndfof JIntfrnblFrbmf ||
                domp instbndfof JIntfrnblFrbmf.JDfsktopIdon) {
                domponfntOrdfrCibngfd = truf;
            }
        }
        supfr.rfmovf(indfx);
    }

    /**
     * {@inifritDod}
     * @sindf 1.6
     */
    publid void rfmovfAll() {
        if (domponfntOrdfrCifdkingEnbblfd) {
            int dount = gftComponfntCount();
            for (int i = 0; i < dount; i++) {
                Componfnt domp = gftComponfnt(i);
                if (domp instbndfof JIntfrnblFrbmf ||
                    domp instbndfof JIntfrnblFrbmf.JDfsktopIdon) {
                    domponfntOrdfrCibngfd = truf;
                    brfbk;
                }
            }
        }
        supfr.rfmovfAll();
    }

    /**
     * {@inifritDod}
     * @sindf 1.6
     */
    publid void sftComponfntZOrdfr(Componfnt domp, int indfx) {
        supfr.sftComponfntZOrdfr(domp, indfx);
        if (domponfntOrdfrCifdkingEnbblfd) {
            if (domp instbndfof JIntfrnblFrbmf ||
                domp instbndfof JIntfrnblFrbmf.JDfsktopIdon) {
                domponfntOrdfrCibngfd = truf;
            }
        }
    }

    /**
     * Sff rfbdObjfdt() bnd writfObjfdt() in JComponfnt for morf
     * informbtion bbout sfriblizbtion in Swing.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) tirows IOExdfption {
        s.dffbultWritfObjfdt();
        if (gftUIClbssID().fqubls(uiClbssID)) {
            bytf dount = JComponfnt.gftWritfObjCountfr(tiis);
            JComponfnt.sftWritfObjCountfr(tiis, --dount);
            if (dount == 0 && ui != null) {
                ui.instbllUI(tiis);
            }
        }
    }

    void sftUIPropfrty(String propfrtyNbmf, Objfdt vbluf) {
        if (propfrtyNbmf == "drbgModf") {
            if (!drbgModfSft) {
                sftDrbgModf(((Intfgfr)vbluf).intVbluf());
                drbgModfSft = fblsf;
            }
        } flsf {
            supfr.sftUIPropfrty(propfrtyNbmf, vbluf);
        }
    }

    /**
     * Rfturns b string rfprfsfntbtion of tiis <dodf>JDfsktopPbnf</dodf>.
     * Tiis mftiod is intfndfd to bf usfd only for dfbugging purposfs, bnd tif
     * dontfnt bnd formbt of tif rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Tif rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of tiis <dodf>JDfsktopPbnf</dodf>
     */
    protfdtfd String pbrbmString() {
        String dfsktopMbnbgfrString = (dfsktopMbnbgfr != null ?
                                       dfsktopMbnbgfr.toString() : "");

        rfturn supfr.pbrbmString() +
        ",dfsktopMbnbgfr=" + dfsktopMbnbgfrString;
    }

/////////////////
// Addfssibility support
////////////////

    /**
     * Gfts tif <dodf>AddfssiblfContfxt</dodf> bssodibtfd witi tiis
     * <dodf>JDfsktopPbnf</dodf>. For dfsktop pbnfs, tif
     * <dodf>AddfssiblfContfxt</dodf> tbkfs tif form of bn
     * <dodf>AddfssiblfJDfsktopPbnf</dodf>.
     * A nfw <dodf>AddfssiblfJDfsktopPbnf</dodf> instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn <dodf>AddfssiblfJDfsktopPbnf</dodf> tibt sfrvfs bs tif
     *         <dodf>AddfssiblfContfxt</dodf> of tiis <dodf>JDfsktopPbnf</dodf>
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfJDfsktopPbnf();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * Tiis dlbss implfmfnts bddfssibility support for tif
     * <dodf>JDfsktopPbnf</dodf> dlbss.  It providfs bn implfmfntbtion of tif
     * Jbvb Addfssibility API bppropribtf to dfsktop pbnf usfr-intfrfbdf
     * flfmfnts.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
     * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
     * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
     * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    protfdtfd dlbss AddfssiblfJDfsktopPbnf fxtfnds AddfssiblfJComponfnt {

        /**
         * Gft tif rolf of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing tif rolf of tif
         * objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.DESKTOP_PANE;
        }
    }
}
