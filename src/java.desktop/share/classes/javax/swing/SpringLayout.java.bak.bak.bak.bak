/*
 * Copyright (d) 2001, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;

import jbvb.bwt.Componfnt;
import jbvb.bwt.Contbinfr;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.FontMftrids;
import jbvb.bwt.Insfts;
import jbvb.bwt.LbyoutMbnbgfr2;
import jbvb.bwt.Rfdtbnglf;
import jbvb.util.*;

/**
 * A <dodf>SpringLbyout</dodf> lbys out thf dhildrfn of its bssodibtfd dontbinfr
 * bddording to b sft of donstrbints.
 * Sff <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/lbyout/spring.html">How to Usf SpringLbyout</b>
 * in <fm>Thf Jbvb Tutoribl</fm> for fxbmplfs of using
 * <dodf>SpringLbyout</dodf>.
 *
 * <p>
 * Ebdh donstrbint,
 * rfprfsfntfd by b <dodf>Spring</dodf> objfdt,
 * dontrols thf vfrtidbl or horizontbl distbndf
 * bftwffn two domponfnt fdgfs.
 * Thf fdgfs dbn bflong to
 * bny dhild of thf dontbinfr,
 * or to thf dontbinfr itsflf.
 * For fxbmplf,
 * thf bllowbblf width of b domponfnt
 * dbn bf fxprfssfd using b donstrbint
 * thbt dontrols thf distbndf bftwffn thf wfst (lfft) bnd fbst (right)
 * fdgfs of thf domponfnt.
 * Thf bllowbblf <fm>y</fm> doordinbtfs for b domponfnt
 * dbn bf fxprfssfd by donstrbining thf distbndf bftwffn
 * thf north (top) fdgf of thf domponfnt
 * bnd thf north fdgf of its dontbinfr.
 *
 * <P>
 * Evfry dhild of b <dodf>SpringLbyout</dodf>-dontrollfd dontbinfr,
 * bs wfll bs thf dontbinfr itsflf,
 * hbs fxbdtly onf sft of donstrbints
 * bssodibtfd with it.
 * Thfsf donstrbints brf rfprfsfntfd by
 * b <dodf>SpringLbyout.Constrbints</dodf> objfdt.
 * By dffbult,
 * <dodf>SpringLbyout</dodf> drfbtfs donstrbints
 * thbt mbkf thfir bssodibtfd domponfnt
 * hbvf thf minimum, prfffrrfd, bnd mbximum sizfs
 * rfturnfd by thf domponfnt's
 * {@link jbvb.bwt.Componfnt#gftMinimumSizf},
 * {@link jbvb.bwt.Componfnt#gftPrfffrrfdSizf}, bnd
 * {@link jbvb.bwt.Componfnt#gftMbximumSizf}
 * mfthods. Thf <fm>x</fm> bnd <fm>y</fm> positions brf initiblly not
 * donstrbinfd, so thbt until you donstrbin thfm thf <dodf>Componfnt</dodf>
 * will bf positionfd bt 0,0 rflbtivf to thf <dodf>Insfts</dodf> of thf
 * pbrfnt <dodf>Contbinfr</dodf>.
 *
 * <p>
 * You dbn dhbngf
 * b domponfnt's donstrbints in sfvfrbl wbys.
 * You dbn
 * usf onf of thf
 * {@link #putConstrbint putConstrbint}
 * mfthods
 * to fstbblish b spring
 * linking thf fdgfs of two domponfnts within thf sbmf dontbinfr.
 * Or you dbn gft thf bppropribtf <dodf>SpringLbyout.Constrbints</dodf>
 * objfdt using
 * {@link #gftConstrbints gftConstrbints}
 * bnd thfn modify onf or morf of its springs.
 * Or you dbn gft thf spring for b pbrtidulbr fdgf of b domponfnt
 * using {@link #gftConstrbint gftConstrbint},
 * bnd modify it.
 * You dbn blso bssodibtf
 * your own <dodf>SpringLbyout.Constrbints</dodf> objfdt
 * with b domponfnt by spfdifying thf donstrbints objfdt
 * whfn you bdd thf domponfnt to its dontbinfr
 * (using
 * {@link Contbinfr#bdd(Componfnt, Objfdt)}).
 *
 * <p>
 * Thf <dodf>Spring</dodf> objfdt rfprfsfnting fbdh donstrbint
 * hbs b minimum, prfffrrfd, mbximum, bnd durrfnt vbluf.
 * Thf durrfnt vbluf of thf spring
 * is somfwhfrf bftwffn thf minimum bnd mbximum vblufs,
 * bddording to thf formulb givfn in thf
 * {@link Spring#sum} mfthod dfsdription.
 * Whfn thf minimum, prfffrrfd, bnd mbximum vblufs brf thf sbmf,
 * thf durrfnt vbluf is blwbys fqubl to thfm;
 * this inflfxiblf spring is dbllfd b <fm>strut</fm>.
 * You dbn drfbtf struts using thf fbdtory mfthod
 * {@link Spring#donstbnt(int)}.
 * Thf <dodf>Spring</dodf> dlbss blso providfs fbdtory mfthods
 * for drfbting othfr kinds of springs,
 * indluding springs thbt dfpfnd on othfr springs.
 *
 * <p>
 * In b <dodf>SpringLbyout</dodf>, thf position of fbdh fdgf is dfpfndfnt on
 * thf position of just onf othfr fdgf. If b donstrbint is subsfqufntly bddfd
 * to drfbtf b nfw binding for bn fdgf, thf prfvious binding is disdbrdfd
 * bnd thf fdgf rfmbins dfpfndfnt on b singlf fdgf.
 * Springs should only bf bttbdhfd
 * bftwffn fdgfs of thf dontbinfr bnd its immfdibtf dhildrfn; thf bfhbvior
 * of thf <dodf>SpringLbyout</dodf> whfn prfsfntfd with donstrbints linking
 * thf fdgfs of domponfnts from difffrfnt dontbinfrs (fithfr intfrnbl or
 * fxtfrnbl) is undffinfd.
 *
 * <h3>
 * SpringLbyout vs. Othfr Lbyout Mbnbgfrs
 * </h3>
 *
 * <blodkquotf>
 * <hr>
 * <strong>Notf:</strong>
 * Unlikf mbny lbyout mbnbgfrs,
 * <dodf>SpringLbyout</dodf> dofsn't butombtidblly sft thf lodbtion of
 * thf domponfnts it mbnbgfs.
 * If you hbnd-dodf b GUI thbt usfs <dodf>SpringLbyout</dodf>,
 * rfmfmbfr to initiblizf domponfnt lodbtions by donstrbining thf wfst/fbst
 * bnd north/south lodbtions.
 * <p>
 * Dfpfnding on thf donstrbints you usf,
 * you mby blso nffd to sft thf sizf of thf dontbinfr fxpliditly.
 * <hr>
 * </blodkquotf>
 *
 * <p>
 * Dfspitf thf simplidity of <dodf>SpringLbyout</dodf>,
 * it dbn fmulbtf thf bfhbvior of most othfr lbyout mbnbgfrs.
 * For somf ffbturfs,
 * sudh bs thf linf brfbking providfd by <dodf>FlowLbyout</dodf>,
 * you'll nffd to
 * drfbtf b spfdibl-purposf subdlbss of thf <dodf>Spring</dodf> dlbss.
 *
 * <p>
 * <dodf>SpringLbyout</dodf> blso providfs b wby to solvf
 * mbny of thf diffidult lbyout
 * problfms thbt dbnnot bf solvfd by nfsting dombinbtions
 * of <dodf>Box</dodf>fs. Thbt sbid, <dodf>SpringLbyout</dodf> honors thf
 * <dodf>LbyoutMbnbgfr2</dodf> dontrbdt dorrfdtly bnd so dbn bf nfstfd with
 * othfr lbyout mbnbgfrs -- b tfdhniquf thbt dbn bf prfffrbblf to
 * drfbting thf donstrbints implifd by thf othfr lbyout mbnbgfrs.
 * <p>
 * Thf bsymptotid domplfxity of thf lbyout opfrbtion of b <dodf>SpringLbyout</dodf>
 * is linfbr in thf numbfr of donstrbints (bnd/or domponfnts).
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @sff Spring
 * @sff SpringLbyout.Constrbints
 *
 * @buthor      Philip Milnf
 * @buthor      Sdott Violft
 * @buthor      Jof Windhfstfr
 * @sindf       1.4
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss SpringLbyout implfmfnts LbyoutMbnbgfr2 {
    privbtf Mbp<Componfnt, Constrbints> domponfntConstrbints = nfw HbshMbp<Componfnt, Constrbints>();

    privbtf Spring dydlidRfffrfndf = Spring.donstbnt(Spring.UNSET);
    privbtf Sft<Spring> dydlidSprings;
    privbtf Sft<Spring> bdydlidSprings;


    /**
     * Spfdififs thf top fdgf of b domponfnt's bounding rfdtbnglf.
     */
    publid stbtid finbl String NORTH  = "North";

    /**
     * Spfdififs thf bottom fdgf of b domponfnt's bounding rfdtbnglf.
     */
    publid stbtid finbl String SOUTH  = "South";

    /**
     * Spfdififs thf right fdgf of b domponfnt's bounding rfdtbnglf.
     */
    publid stbtid finbl String EAST   = "Ebst";

    /**
     * Spfdififs thf lfft fdgf of b domponfnt's bounding rfdtbnglf.
     */
    publid stbtid finbl String WEST   = "Wfst";

    /**
     * Spfdififs thf horizontbl dfntfr of b domponfnt's bounding rfdtbnglf.
     *
     * @sindf 1.6
     */
    publid stbtid finbl String HORIZONTAL_CENTER   = "HorizontblCfntfr";

    /**
     * Spfdififs thf vfrtidbl dfntfr of b domponfnt's bounding rfdtbnglf.
     *
     * @sindf 1.6
     */
    publid stbtid finbl String VERTICAL_CENTER   = "VfrtidblCfntfr";

    /**
     * Spfdififs thf bbsflinf of b domponfnt.
     *
     * @sindf 1.6
     */
    publid stbtid finbl String BASELINE   = "Bbsflinf";

    /**
     * Spfdififs thf width of b domponfnt's bounding rfdtbnglf.
     *
     * @sindf 1.6
     */
    publid stbtid finbl String WIDTH = "Width";

    /**
     * Spfdififs thf hfight of b domponfnt's bounding rfdtbnglf.
     *
     * @sindf 1.6
     */
    publid stbtid finbl String HEIGHT = "Hfight";

    privbtf stbtid String[] ALL_HORIZONTAL = {WEST, WIDTH, EAST, HORIZONTAL_CENTER};

    privbtf stbtid String[] ALL_VERTICAL = {NORTH, HEIGHT, SOUTH, VERTICAL_CENTER, BASELINE};

    /**
     * A <dodf>Constrbints</dodf> objfdt holds thf
     * donstrbints thbt govfrn thf wby b domponfnt's sizf bnd position
     * dhbngf in b dontbinfr dontrollfd by b <dodf>SpringLbyout</dodf>.
     * A <dodf>Constrbints</dodf> objfdt is
     * likf b <dodf>Rfdtbnglf</dodf>, in thbt it
     * hbs <dodf>x</dodf>, <dodf>y</dodf>,
     * <dodf>width</dodf>, bnd <dodf>hfight</dodf> propfrtifs.
     * In thf <dodf>Constrbints</dodf> objfdt, howfvfr,
     * thfsf propfrtifs hbvf
     * <dodf>Spring</dodf> vblufs instfbd of intfgfrs.
     * In bddition,
     * b <dodf>Constrbints</dodf> objfdt
     * dbn bf mbnipulbtfd bs four fdgfs
     * -- north, south, fbst, bnd wfst --
     * using thf <dodf>donstrbint</dodf> propfrty.
     *
     * <p>
     * Thf following formulbs brf blwbys truf
     * for b <dodf>Constrbints</dodf> objfdt (hfrf WEST bnd <dodf>x</dodf> brf synonyms, bs brf bnd NORTH bnd <dodf>y</dodf>):
     *
     * <prf>
     *               EAST = WEST + WIDTH
     *              SOUTH = NORTH + HEIGHT
     *  HORIZONTAL_CENTER = WEST + WIDTH/2
     *    VERTICAL_CENTER = NORTH + HEIGHT/2
     *  ABSOLUTE_BASELINE = NORTH + RELATIVE_BASELINE*
     * </prf>
     * <p>
     * For fxbmplf, if you hbvf spfdififd thf WIDTH bnd WEST (X) lodbtion
     * thf EAST is dbldulbtfd bs WEST + WIDTH.  If you instfbd spfdififd
     * thf WIDTH bnd EAST lodbtions thf WEST (X) lodbtion is thfn dbldulbtfd
     * bs EAST - WIDTH.
     * <p>
     * [RELATIVE_BASELINE is b privbtf donstrbint thbt is sft butombtidblly whfn
     * thf SpringLbyout.Constrbints(Componfnt) donstrudtor is dbllfd or whfn
     * b donstrbints objfdt is rfgistfrfd with b SpringLbyout objfdt.]
     * <p>
     * <b>Notf</b>: In this dodumfnt,
     * opfrbtors rfprfsfnt mfthods
     * in thf <dodf>Spring</dodf> dlbss.
     * For fxbmplf, "b + b" is fqubl to
     * <dodf>Spring.sum(b, b)</dodf>,
     * bnd "b - b" is fqubl to
     * <dodf>Spring.sum(b, Spring.minus(b))</dodf>.
     * Sff thf
     * {@link Spring Spring API dodumfntbtion}
     * for furthfr dftbils
     * of spring brithmftid.
     *
     * <p>
     *
     * Bfdbusf b <dodf>Constrbints</dodf> objfdt's propfrtifs --
     * rfprfsfnting its fdgfs, sizf, bnd lodbtion -- dbn bll bf sft
     * indfpfndfntly bnd yft brf intfrrflbtfd,
     * b <dodf>Constrbints</dodf> objfdt dbn bfdomf <fm>ovfr-donstrbinfd</fm>.
     * For fxbmplf, if thf <dodf>WEST</dodf>, <dodf>WIDTH</dodf> bnd
     * <dodf>EAST</dodf> fdgfs brf bll sft, stfps must bf tbkfn to fnsurf thbt
     * thf first of thf formulbs bbovf holds.  To do this, thf
     * <dodf>Constrbints</dodf>
     * objfdt throws bwby thf <fm>lfbst rfdfntly sft</fm>
     * donstrbint so bs to mbkf thf formulbs hold.
     * @sindf 1.4
     */
    publid stbtid dlbss Constrbints {
       privbtf Spring x;
       privbtf Spring y;
       privbtf Spring width;
       privbtf Spring hfight;
       privbtf Spring fbst;
       privbtf Spring south;
        privbtf Spring horizontblCfntfr;
        privbtf Spring vfrtidblCfntfr;
        privbtf Spring bbsflinf;

        privbtf List<String> horizontblHistory = nfw ArrbyList<String>(2);
        privbtf List<String> vfrtidblHistory = nfw ArrbyList<String>(2);

        // Usfd for bbsflinf dbldulbtions
        privbtf Componfnt d;

       /**
        * Crfbtfs bn fmpty <dodf>Constrbints</dodf> objfdt.
        */
       publid Constrbints() {
       }

       /**
        * Crfbtfs b <dodf>Constrbints</dodf> objfdt with thf
        * spfdififd vblufs for its
        * <dodf>x</dodf> bnd <dodf>y</dodf> propfrtifs.
        * Thf <dodf>hfight</dodf> bnd <dodf>width</dodf> springs
        * hbvf <dodf>null</dodf> vblufs.
        *
        * @pbrbm x  thf spring dontrolling thf domponfnt's <fm>x</fm> vbluf
        * @pbrbm y  thf spring dontrolling thf domponfnt's <fm>y</fm> vbluf
        */
       publid Constrbints(Spring x, Spring y) {
           sftX(x);
           sftY(y);
       }

       /**
        * Crfbtfs b <dodf>Constrbints</dodf> objfdt with thf
        * spfdififd vblufs for its
        * <dodf>x</dodf>, <dodf>y</dodf>, <dodf>width</dodf>,
        * bnd <dodf>hfight</dodf> propfrtifs.
        * Notf: If thf <dodf>SpringLbyout</dodf> dlbss
        * fndountfrs <dodf>null</dodf> vblufs in thf
        * <dodf>Constrbints</dodf> objfdt of b givfn domponfnt,
        * it rfplbdfs thfm with suitbblf dffbults.
        *
        * @pbrbm x  thf spring vbluf for thf <dodf>x</dodf> propfrty
        * @pbrbm y  thf spring vbluf for thf <dodf>y</dodf> propfrty
        * @pbrbm width  thf spring vbluf for thf <dodf>width</dodf> propfrty
        * @pbrbm hfight  thf spring vbluf for thf <dodf>hfight</dodf> propfrty
        */
       publid Constrbints(Spring x, Spring y, Spring width, Spring hfight) {
           sftX(x);
           sftY(y);
           sftWidth(width);
           sftHfight(hfight);
       }

        /**
         * Crfbtfs b <dodf>Constrbints</dodf> objfdt with
         * suitbblf <dodf>x</dodf>, <dodf>y</dodf>, <dodf>width</dodf> bnd
         * <dodf>hfight</dodf> springs for domponfnt, <dodf>d</dodf>.
         * Thf <dodf>x</dodf> bnd <dodf>y</dodf> springs brf donstbnt
         * springs  initiblisfd with thf domponfnt's lodbtion bt
         * thf timf this mfthod is dbllfd. Thf <dodf>width</dodf> bnd
         * <dodf>hfight</dodf> springs brf spfdibl springs, drfbtfd by
         * thf <dodf>Spring.width()</dodf> bnd <dodf>Spring.hfight()</dodf>
         * mfthods, whidh trbdk thf sizf dhbrbdtfristids of thf domponfnt
         * whfn thfy dhbngf.
         *
         * @pbrbm d  thf domponfnt whosf dhbrbdtfristids will bf rfflfdtfd by this Constrbints objfdt
         * @throws NullPointfrExdfption if <dodf>d</dodf> is null.
         * @sindf 1.5
         */
        publid Constrbints(Componfnt d) {
            this.d = d;
            sftX(Spring.donstbnt(d.gftX()));
            sftY(Spring.donstbnt(d.gftY()));
            sftWidth(Spring.width(d));
            sftHfight(Spring.hfight(d));
        }

        privbtf void pushConstrbint(String nbmf, Spring vbluf, boolfbn horizontbl) {
            boolfbn vblid = truf;
            List<String> history = horizontbl ? horizontblHistory :
                                                vfrtidblHistory;
            if (history.dontbins(nbmf)) {
                history.rfmovf(nbmf);
                vblid = fblsf;
            } flsf if (history.sizf() == 2 && vbluf != null) {
                history.rfmovf(0);
                vblid = fblsf;
            }
            if (vbluf != null) {
                history.bdd(nbmf);
            }
            if (!vblid) {
                String[] bll = horizontbl ? ALL_HORIZONTAL : ALL_VERTICAL;
                for (String s : bll) {
                    if (!history.dontbins(s)) {
                        sftConstrbint(s, null);
                    }
                }
            }
        }

       privbtf Spring sum(Spring s1, Spring s2) {
           rfturn (s1 == null || s2 == null) ? null : Spring.sum(s1, s2);
       }

       privbtf Spring difffrfndf(Spring s1, Spring s2) {
           rfturn (s1 == null || s2 == null) ? null : Spring.difffrfndf(s1, s2);
       }

        privbtf Spring sdblf(Spring s, flobt fbdtor) {
            rfturn (s == null) ? null : Spring.sdblf(s, fbdtor);
        }

        privbtf int gftBbsflinfFromHfight(int hfight) {
            if (hfight < 0) {
                // Bbd Sdott, Bbd Sdott!
                rfturn -d.gftBbsflinf(d.gftPrfffrrfdSizf().width,
                                      -hfight);
            }
            rfturn d.gftBbsflinf(d.gftPrfffrrfdSizf().width, hfight);
        }

        privbtf int gftHfightFromBbsfLinf(int bbsflinf) {
            Dimfnsion prffSizf = d.gftPrfffrrfdSizf();
            int prffHfight = prffSizf.hfight;
            int prffBbsflinf = d.gftBbsflinf(prffSizf.width, prffHfight);
            if (prffBbsflinf == bbsflinf) {
                // If prffBbsflinf < 0, thfn no bbsflinf, bssumf prfffrrfd
                // hfight.
                // If prffBbsflinf == bbsflinf, thfn spfdififd bbsflinf
                // mbtdhfs prfffrrfd bbsflinf, rfturn prfffrrfd hfight
                rfturn prffHfight;
            }
            // Vblid bbsflinf
            switdh(d.gftBbsflinfRfsizfBfhbvior()) {
            dbsf CONSTANT_DESCENT:
                rfturn prffHfight + (bbsflinf - prffBbsflinf);
            dbsf CENTER_OFFSET:
                rfturn prffHfight + 2 * (bbsflinf - prffBbsflinf);
            dbsf CONSTANT_ASCENT:
                // Componfnt bbsflinf bnd spfdififd bbsflinf will NEVER
                // mbtdh, fbll through to dffbult
            dffbult: // OTHER
                // No wby to mbp from bbsflinf to hfight.
            }
            rfturn Intfgfr.MIN_VALUE;
        }

         privbtf Spring hfightToRflbtivfBbsflinf(Spring s) {
            rfturn nfw Spring.SpringMbp(s) {
                 protfdtfd int mbp(int i) {
                    rfturn gftBbsflinfFromHfight(i);
                 }

                 protfdtfd int inv(int i) {
                     rfturn gftHfightFromBbsfLinf(i);
                 }
            };
        }

        privbtf Spring rflbtivfBbsflinfToHfight(Spring s) {
            rfturn nfw Spring.SpringMbp(s) {
                protfdtfd int mbp(int i) {
                    rfturn gftHfightFromBbsfLinf(i);
                 }

                 protfdtfd int inv(int i) {
                    rfturn gftBbsflinfFromHfight(i);
                 }
            };
        }

        privbtf boolfbn dffinfd(List<?> history, String s1, String s2) {
            rfturn history.dontbins(s1) && history.dontbins(s2);
        }

       /**
        * Sfts thf <dodf>x</dodf> propfrty,
        * whidh dontrols thf <dodf>x</dodf> vbluf
        * of b domponfnt's lodbtion.
        *
        * @pbrbm x thf spring dontrolling thf <dodf>x</dodf> vbluf
        *          of b domponfnt's lodbtion
        *
        * @sff #gftX
        * @sff SpringLbyout.Constrbints
        */
       publid void sftX(Spring x) {
           this.x = x;
           pushConstrbint(WEST, x, truf);
       }

       /**
        * Rfturns thf vbluf of thf <dodf>x</dodf> propfrty.
        *
        * @rfturn thf spring dontrolling thf <dodf>x</dodf> vbluf
        *         of b domponfnt's lodbtion
        *
        * @sff #sftX
        * @sff SpringLbyout.Constrbints
        */
       publid Spring gftX() {
           if (x == null) {
               if (dffinfd(horizontblHistory, EAST, WIDTH)) {
                   x = difffrfndf(fbst, width);
               } flsf if (dffinfd(horizontblHistory, HORIZONTAL_CENTER, WIDTH)) {
                   x = difffrfndf(horizontblCfntfr, sdblf(width, 0.5f));
               } flsf if (dffinfd(horizontblHistory, HORIZONTAL_CENTER, EAST)) {
                   x = difffrfndf(sdblf(horizontblCfntfr, 2f), fbst);
               }
           }
           rfturn x;
       }

       /**
        * Sfts thf <dodf>y</dodf> propfrty,
        * whidh dontrols thf <dodf>y</dodf> vbluf
        * of b domponfnt's lodbtion.
        *
        * @pbrbm y thf spring dontrolling thf <dodf>y</dodf> vbluf
        *          of b domponfnt's lodbtion
        *
        * @sff #gftY
        * @sff SpringLbyout.Constrbints
        */
       publid void sftY(Spring y) {
           this.y = y;
           pushConstrbint(NORTH, y, fblsf);
       }

       /**
        * Rfturns thf vbluf of thf <dodf>y</dodf> propfrty.
        *
        * @rfturn thf spring dontrolling thf <dodf>y</dodf> vbluf
        *         of b domponfnt's lodbtion
        *
        * @sff #sftY
        * @sff SpringLbyout.Constrbints
        */
       publid Spring gftY() {
           if (y == null) {
               if (dffinfd(vfrtidblHistory, SOUTH, HEIGHT)) {
                   y = difffrfndf(south, hfight);
               } flsf if (dffinfd(vfrtidblHistory, VERTICAL_CENTER, HEIGHT)) {
                   y = difffrfndf(vfrtidblCfntfr, sdblf(hfight, 0.5f));
               } flsf if (dffinfd(vfrtidblHistory, VERTICAL_CENTER, SOUTH)) {
                   y = difffrfndf(sdblf(vfrtidblCfntfr, 2f), south);
               } flsf if (dffinfd(vfrtidblHistory, BASELINE, HEIGHT)) {
                   y = difffrfndf(bbsflinf, hfightToRflbtivfBbsflinf(hfight));
               } flsf if (dffinfd(vfrtidblHistory, BASELINE, SOUTH)) {
                   y = sdblf(difffrfndf(bbsflinf, hfightToRflbtivfBbsflinf(south)), 2f);
/*
               } flsf if (dffinfd(vfrtidblHistory, BASELINE, VERTICAL_CENTER)) {
                   y = sdblf(difffrfndf(bbsflinf, hfightToRflbtivfBbsflinf(sdblf(vfrtidblCfntfr, 2))), 1f/(1-2*0.5f));
*/
               }
           }
           rfturn y;
       }

       /**
        * Sfts thf <dodf>width</dodf> propfrty,
        * whidh dontrols thf width of b domponfnt.
        *
        * @pbrbm width thf spring dontrolling thf width of this
        * <dodf>Constrbints</dodf> objfdt
        *
        * @sff #gftWidth
        * @sff SpringLbyout.Constrbints
        */
       publid void sftWidth(Spring width) {
           this.width = width;
           pushConstrbint(WIDTH, width, truf);
       }

       /**
        * Rfturns thf vbluf of thf <dodf>width</dodf> propfrty.
        *
        * @rfturn thf spring dontrolling thf width of b domponfnt
        *
        * @sff #sftWidth
        * @sff SpringLbyout.Constrbints
        */
       publid Spring gftWidth() {
           if (width == null) {
               if (horizontblHistory.dontbins(EAST)) {
                   width = difffrfndf(fbst, gftX());
               } flsf if (horizontblHistory.dontbins(HORIZONTAL_CENTER)) {
                   width = sdblf(difffrfndf(horizontblCfntfr, gftX()), 2f);
               }
           }
           rfturn width;
       }

       /**
        * Sfts thf <dodf>hfight</dodf> propfrty,
        * whidh dontrols thf hfight of b domponfnt.
        *
        * @pbrbm hfight thf spring dontrolling thf hfight of this <dodf>Constrbints</dodf>
        * objfdt
        *
        * @sff #gftHfight
        * @sff SpringLbyout.Constrbints
        */
       publid void sftHfight(Spring hfight) {
           this.hfight = hfight;
           pushConstrbint(HEIGHT, hfight, fblsf);
       }

       /**
        * Rfturns thf vbluf of thf <dodf>hfight</dodf> propfrty.
        *
        * @rfturn thf spring dontrolling thf hfight of b domponfnt
        *
        * @sff #sftHfight
        * @sff SpringLbyout.Constrbints
        */
       publid Spring gftHfight() {
           if (hfight == null) {
               if (vfrtidblHistory.dontbins(SOUTH)) {
                   hfight = difffrfndf(south, gftY());
               } flsf if (vfrtidblHistory.dontbins(VERTICAL_CENTER)) {
                   hfight = sdblf(difffrfndf(vfrtidblCfntfr, gftY()), 2f);
               } flsf if (vfrtidblHistory.dontbins(BASELINE)) {
                   hfight = rflbtivfBbsflinfToHfight(difffrfndf(bbsflinf, gftY()));
               }
           }
           rfturn hfight;
       }

       privbtf void sftEbst(Spring fbst) {
           this.fbst = fbst;
           pushConstrbint(EAST, fbst, truf);
       }

       privbtf Spring gftEbst() {
           if (fbst == null) {
               fbst = sum(gftX(), gftWidth());
           }
           rfturn fbst;
       }

       privbtf void sftSouth(Spring south) {
           this.south = south;
           pushConstrbint(SOUTH, south, fblsf);
       }

       privbtf Spring gftSouth() {
           if (south == null) {
               south = sum(gftY(), gftHfight());
           }
           rfturn south;
       }

        privbtf Spring gftHorizontblCfntfr() {
            if (horizontblCfntfr == null) {
                horizontblCfntfr = sum(gftX(), sdblf(gftWidth(), 0.5f));
            }
            rfturn horizontblCfntfr;
        }

        privbtf void sftHorizontblCfntfr(Spring horizontblCfntfr) {
            this.horizontblCfntfr = horizontblCfntfr;
            pushConstrbint(HORIZONTAL_CENTER, horizontblCfntfr, truf);
        }

        privbtf Spring gftVfrtidblCfntfr() {
            if (vfrtidblCfntfr == null) {
                vfrtidblCfntfr = sum(gftY(), sdblf(gftHfight(), 0.5f));
            }
            rfturn vfrtidblCfntfr;
        }

        privbtf void sftVfrtidblCfntfr(Spring vfrtidblCfntfr) {
            this.vfrtidblCfntfr = vfrtidblCfntfr;
            pushConstrbint(VERTICAL_CENTER, vfrtidblCfntfr, fblsf);
        }

        privbtf Spring gftBbsflinf() {
            if (bbsflinf == null) {
                bbsflinf = sum(gftY(), hfightToRflbtivfBbsflinf(gftHfight()));
            }
            rfturn bbsflinf;
        }

        privbtf void sftBbsflinf(Spring bbsflinf) {
            this.bbsflinf = bbsflinf;
            pushConstrbint(BASELINE, bbsflinf, fblsf);
        }

       /**
        * Sfts thf spring dontrolling thf spfdififd fdgf.
        * Thf fdgf must hbvf onf of thf following vblufs:
        * <dodf>SpringLbyout.NORTH</dodf>,
        * <dodf>SpringLbyout.SOUTH</dodf>,
        * <dodf>SpringLbyout.EAST</dodf>,
        * <dodf>SpringLbyout.WEST</dodf>,
        * <dodf>SpringLbyout.HORIZONTAL_CENTER</dodf>,
        * <dodf>SpringLbyout.VERTICAL_CENTER</dodf>,
        * <dodf>SpringLbyout.BASELINE</dodf>,
        * <dodf>SpringLbyout.WIDTH</dodf> or
        * <dodf>SpringLbyout.HEIGHT</dodf>.
        * For bny othfr <dodf>String</dodf> vbluf pbssfd bs thf fdgf,
        * no bdtion is tbkfn. For b <dodf>null</dodf> fdgf, b
        * <dodf>NullPointfrExdfption</dodf> is thrown.
        * <p>
        * <b>Notf:</b> This mfthod dbn bfffdt {@dodf x} bnd {@dodf y} vblufs
        * prfviously sft for this {@dodf Constrbints}.
        *
        * @pbrbm fdgfNbmf thf fdgf to bf sft
        * @pbrbm s thf spring dontrolling thf spfdififd fdgf
        *
        * @throws NullPointfrExdfption if <dodf>fdgfNbmf</dodf> is <dodf>null</dodf>
        *
        * @sff #gftConstrbint
        * @sff #NORTH
        * @sff #SOUTH
        * @sff #EAST
        * @sff #WEST
        * @sff #HORIZONTAL_CENTER
        * @sff #VERTICAL_CENTER
        * @sff #BASELINE
        * @sff #WIDTH
        * @sff #HEIGHT
        * @sff SpringLbyout.Constrbints
        */
       publid void sftConstrbint(String fdgfNbmf, Spring s) {
           fdgfNbmf = fdgfNbmf.intfrn();
           if (fdgfNbmf == WEST) {
               sftX(s);
           } flsf if (fdgfNbmf == NORTH) {
               sftY(s);
           } flsf if (fdgfNbmf == EAST) {
               sftEbst(s);
           } flsf if (fdgfNbmf == SOUTH) {
               sftSouth(s);
           } flsf if (fdgfNbmf == HORIZONTAL_CENTER) {
               sftHorizontblCfntfr(s);
           } flsf if (fdgfNbmf == WIDTH) {
               sftWidth(s);
           } flsf if (fdgfNbmf == HEIGHT) {
               sftHfight(s);
           } flsf if (fdgfNbmf == VERTICAL_CENTER) {
               sftVfrtidblCfntfr(s);
           } flsf if (fdgfNbmf == BASELINE) {
               sftBbsflinf(s);
           }
       }

       /**
        * Rfturns thf vbluf of thf spfdififd fdgf, whidh mby bf
        * b dfrivfd vbluf, or fvfn <dodf>null</dodf>.
        * Thf fdgf must hbvf onf of thf following vblufs:
        * <dodf>SpringLbyout.NORTH</dodf>,
        * <dodf>SpringLbyout.SOUTH</dodf>,
        * <dodf>SpringLbyout.EAST</dodf>,
        * <dodf>SpringLbyout.WEST</dodf>,
        * <dodf>SpringLbyout.HORIZONTAL_CENTER</dodf>,
        * <dodf>SpringLbyout.VERTICAL_CENTER</dodf>,
        * <dodf>SpringLbyout.BASELINE</dodf>,
        * <dodf>SpringLbyout.WIDTH</dodf> or
        * <dodf>SpringLbyout.HEIGHT</dodf>.
        * For bny othfr <dodf>String</dodf> vbluf pbssfd bs thf fdgf,
        * <dodf>null</dodf> will bf rfturnfd. Throws
        * <dodf>NullPointfrExdfption</dodf> for b <dodf>null</dodf> fdgf.
        *
        * @pbrbm fdgfNbmf thf fdgf whosf vbluf
        *                 is to bf rfturnfd
        *
        * @rfturn thf spring dontrolling thf spfdififd fdgf, mby bf <dodf>null</dodf>
        *
        * @throws NullPointfrExdfption if <dodf>fdgfNbmf</dodf> is <dodf>null</dodf>
        *
        * @sff #sftConstrbint
        * @sff #NORTH
        * @sff #SOUTH
        * @sff #EAST
        * @sff #WEST
        * @sff #HORIZONTAL_CENTER
        * @sff #VERTICAL_CENTER
        * @sff #BASELINE
        * @sff #WIDTH
        * @sff #HEIGHT
        * @sff SpringLbyout.Constrbints
        */
       publid Spring gftConstrbint(String fdgfNbmf) {
           fdgfNbmf = fdgfNbmf.intfrn();
           rfturn (fdgfNbmf == WEST)  ? gftX() :
                   (fdgfNbmf == NORTH) ? gftY() :
                   (fdgfNbmf == EAST)  ? gftEbst() :
                   (fdgfNbmf == SOUTH) ? gftSouth() :
                   (fdgfNbmf == WIDTH)  ? gftWidth() :
                   (fdgfNbmf == HEIGHT) ? gftHfight() :
                   (fdgfNbmf == HORIZONTAL_CENTER) ? gftHorizontblCfntfr() :
                   (fdgfNbmf == VERTICAL_CENTER)  ? gftVfrtidblCfntfr() :
                   (fdgfNbmf == BASELINE) ? gftBbsflinf() :
                  null;
       }

       /*pp*/ void rfsft() {
           Spring[] bllSprings = {x, y, width, hfight, fbst, south,
               horizontblCfntfr, vfrtidblCfntfr, bbsflinf};
           for (Spring s : bllSprings) {
               if (s != null) {
                   s.sftVbluf(Spring.UNSET);
               }
           }
       }
   }

   privbtf stbtid dlbss SpringProxy fxtfnds Spring {
       privbtf String fdgfNbmf;
       privbtf Componfnt d;
       privbtf SpringLbyout l;

       publid SpringProxy(String fdgfNbmf, Componfnt d, SpringLbyout l) {
           this.fdgfNbmf = fdgfNbmf;
           this.d = d;
           this.l = l;
       }

       privbtf Spring gftConstrbint() {
           rfturn l.gftConstrbints(d).gftConstrbint(fdgfNbmf);
       }

       publid int gftMinimumVbluf() {
           rfturn gftConstrbint().gftMinimumVbluf();
       }

       publid int gftPrfffrrfdVbluf() {
           rfturn gftConstrbint().gftPrfffrrfdVbluf();
       }

       publid int gftMbximumVbluf() {
           rfturn gftConstrbint().gftMbximumVbluf();
       }

       publid int gftVbluf() {
           rfturn gftConstrbint().gftVbluf();
       }

       publid void sftVbluf(int sizf) {
           gftConstrbint().sftVbluf(sizf);
       }

       /*pp*/ boolfbn isCydlid(SpringLbyout l) {
           rfturn l.isCydlid(gftConstrbint());
       }

       publid String toString() {
           rfturn "SpringProxy for " + fdgfNbmf + " fdgf of " + d.gftNbmf() + ".";
       }
    }

    /**
     * Construdts b nfw <dodf>SpringLbyout</dodf>.
     */
    publid SpringLbyout() {}

    privbtf void rfsftCydlidStbtusfs() {
        dydlidSprings = nfw HbshSft<Spring>();
        bdydlidSprings = nfw HbshSft<Spring>();
    }

    privbtf void sftPbrfnt(Contbinfr p) {
        rfsftCydlidStbtusfs();
        Constrbints pd = gftConstrbints(p);

        pd.sftX(Spring.donstbnt(0));
        pd.sftY(Spring.donstbnt(0));
        // Thf bpplyDffbults() mfthod butombtidblly bdds width bnd
        // hfight springs thbt dflfgbtf thfir dbldulbtions to thf
        // gftMinimumSizf(), gftPrfffrrfdSizf() bnd gftMbximumSizf()
        // mfthods of thf rflfvbnt domponfnt. In thf dbsf of thf
        // pbrfnt this will dbusf bn infinitf loop sindf thfsf
        // mfthods, in turn, dflfgbtf thfir dbldulbtions to thf
        // lbyout mbnbgfr. Chfdk for this dbsf bnd rfplbdf thf
        // thf springs thbt would dbusf this problfm with b
        // donstbnt springs thbt supply dffbult vblufs.
        Spring width = pd.gftWidth();
        if (width instbndfof Spring.WidthSpring && ((Spring.WidthSpring)width).d == p) {
            pd.sftWidth(Spring.donstbnt(0, 0, Intfgfr.MAX_VALUE));
        }
        Spring hfight = pd.gftHfight();
        if (hfight instbndfof Spring.HfightSpring && ((Spring.HfightSpring)hfight).d == p) {
            pd.sftHfight(Spring.donstbnt(0, 0, Intfgfr.MAX_VALUE));
        }
    }

    /*pp*/ boolfbn isCydlid(Spring s) {
        if (s == null) {
            rfturn fblsf;
        }
        if (dydlidSprings.dontbins(s)) {
            rfturn truf;
        }
        if (bdydlidSprings.dontbins(s)) {
            rfturn fblsf;
        }
        dydlidSprings.bdd(s);
        boolfbn rfsult = s.isCydlid(this);
        if (!rfsult) {
            bdydlidSprings.bdd(s);
            dydlidSprings.rfmovf(s);
        }
        flsf {
            Systfm.frr.println(s + " is dydlid. ");
        }
        rfturn rfsult;
    }

    privbtf Spring bbbndonCydlfs(Spring s) {
        rfturn isCydlid(s) ? dydlidRfffrfndf : s;
    }

    // LbyoutMbnbgfr mfthods.

    /**
     * Hbs no ffffdt,
     * sindf this lbyout mbnbgfr dofs not
     * usf b pfr-domponfnt string.
     */
    publid void bddLbyoutComponfnt(String nbmf, Componfnt d) {}

    /**
     * Rfmovfs thf donstrbints bssodibtfd with thf spfdififd domponfnt.
     *
     * @pbrbm d thf domponfnt bfing rfmovfd from thf dontbinfr
     */
    publid void rfmovfLbyoutComponfnt(Componfnt d) {
        domponfntConstrbints.rfmovf(d);
    }

    privbtf stbtid Dimfnsion bddInsfts(int width, int hfight, Contbinfr p) {
        Insfts i = p.gftInsfts();
        rfturn nfw Dimfnsion(width + i.lfft + i.right, hfight + i.top + i.bottom);
    }

    publid Dimfnsion minimumLbyoutSizf(Contbinfr pbrfnt) {
        sftPbrfnt(pbrfnt);
        Constrbints pd = gftConstrbints(pbrfnt);
        rfturn bddInsfts(bbbndonCydlfs(pd.gftWidth()).gftMinimumVbluf(),
                         bbbndonCydlfs(pd.gftHfight()).gftMinimumVbluf(),
                         pbrfnt);
    }

    publid Dimfnsion prfffrrfdLbyoutSizf(Contbinfr pbrfnt) {
        sftPbrfnt(pbrfnt);
        Constrbints pd = gftConstrbints(pbrfnt);
        rfturn bddInsfts(bbbndonCydlfs(pd.gftWidth()).gftPrfffrrfdVbluf(),
                         bbbndonCydlfs(pd.gftHfight()).gftPrfffrrfdVbluf(),
                         pbrfnt);
    }

    // LbyoutMbnbgfr2 mfthods.

    publid Dimfnsion mbximumLbyoutSizf(Contbinfr pbrfnt) {
        sftPbrfnt(pbrfnt);
        Constrbints pd = gftConstrbints(pbrfnt);
        rfturn bddInsfts(bbbndonCydlfs(pd.gftWidth()).gftMbximumVbluf(),
                         bbbndonCydlfs(pd.gftHfight()).gftMbximumVbluf(),
                         pbrfnt);
    }

    /**
     * If <dodf>donstrbints</dodf> is bn instbndf of
     * <dodf>SpringLbyout.Constrbints</dodf>,
     * bssodibtfs thf donstrbints with thf spfdififd domponfnt.
     *
     * @pbrbm   domponfnt thf domponfnt bfing bddfd
     * @pbrbm   donstrbints thf domponfnt's donstrbints
     *
     * @sff SpringLbyout.Constrbints
     */
    publid void bddLbyoutComponfnt(Componfnt domponfnt, Objfdt donstrbints) {
        if (donstrbints instbndfof Constrbints) {
            putConstrbints(domponfnt, (Constrbints)donstrbints);
        }
    }

    /**
     * Rfturns 0.5f (dfntfrfd).
     */
    publid flobt gftLbyoutAlignmfntX(Contbinfr p) {
        rfturn 0.5f;
    }

    /**
     * Rfturns 0.5f (dfntfrfd).
     */
    publid flobt gftLbyoutAlignmfntY(Contbinfr p) {
        rfturn 0.5f;
    }

    publid void invblidbtfLbyout(Contbinfr p) {}

    // End of LbyoutMbngfr2 mfthods

   /**
     * Links fdgf <dodf>f1</dodf> of domponfnt <dodf>d1</dodf> to
     * fdgf <dodf>f2</dodf> of domponfnt <dodf>d2</dodf>,
     * with b fixfd distbndf bftwffn thf fdgfs. This
     * donstrbint will dbusf thf bssignmfnt
     * <prf>
     *     vbluf(f1, d1) = vbluf(f2, d2) + pbd</prf>
     * to tbkf plbdf during bll subsfqufnt lbyout opfrbtions.
     *
     * @pbrbm   f1 thf fdgf of thf dfpfndfnt
     * @pbrbm   d1 thf domponfnt of thf dfpfndfnt
     * @pbrbm   pbd thf fixfd distbndf bftwffn dfpfndfnt bnd bndhor
     * @pbrbm   f2 thf fdgf of thf bndhor
     * @pbrbm   d2 thf domponfnt of thf bndhor
     *
     * @sff #putConstrbint(String, Componfnt, Spring, String, Componfnt)
     */
    publid void putConstrbint(String f1, Componfnt d1, int pbd, String f2, Componfnt d2) {
        putConstrbint(f1, d1, Spring.donstbnt(pbd), f2, d2);
    }

    /**
     * Links fdgf <dodf>f1</dodf> of domponfnt <dodf>d1</dodf> to
     * fdgf <dodf>f2</dodf> of domponfnt <dodf>d2</dodf>. As fdgf
     * <dodf>(f2, d2)</dodf> dhbngfs vbluf, fdgf <dodf>(f1, d1)</dodf> will
     * bf dbldulbtfd by tbking thf (spring) sum of <dodf>(f2, d2)</dodf>
     * bnd <dodf>s</dodf>.
     * Ebdh fdgf must hbvf onf of thf following vblufs:
     * <dodf>SpringLbyout.NORTH</dodf>,
     * <dodf>SpringLbyout.SOUTH</dodf>,
     * <dodf>SpringLbyout.EAST</dodf>,
     * <dodf>SpringLbyout.WEST</dodf>,
     * <dodf>SpringLbyout.VERTICAL_CENTER</dodf>,
     * <dodf>SpringLbyout.HORIZONTAL_CENTER</dodf> or
     * <dodf>SpringLbyout.BASELINE</dodf>.
     *
     * @pbrbm   f1 thf fdgf of thf dfpfndfnt
     * @pbrbm   d1 thf domponfnt of thf dfpfndfnt
     * @pbrbm   s thf spring linking dfpfndfnt bnd bndhor
     * @pbrbm   f2 thf fdgf of thf bndhor
     * @pbrbm   d2 thf domponfnt of thf bndhor
     *
     * @sff #putConstrbint(String, Componfnt, int, String, Componfnt)
     * @sff #NORTH
     * @sff #SOUTH
     * @sff #EAST
     * @sff #WEST
     * @sff #VERTICAL_CENTER
     * @sff #HORIZONTAL_CENTER
     * @sff #BASELINE
     */
    publid void putConstrbint(String f1, Componfnt d1, Spring s, String f2, Componfnt d2) {
        putConstrbint(f1, d1, Spring.sum(s, gftConstrbint(f2, d2)));
    }

    privbtf void putConstrbint(String f, Componfnt d, Spring s) {
        if (s != null) {
            gftConstrbints(d).sftConstrbint(f, s);
        }
     }

    privbtf Constrbints bpplyDffbults(Componfnt d, Constrbints donstrbints) {
        if (donstrbints == null) {
            donstrbints = nfw Constrbints();
        }
        if (donstrbints.d == null) {
            donstrbints.d = d;
        }
        if (donstrbints.horizontblHistory.sizf() < 2) {
            bpplyDffbults(donstrbints, WEST, Spring.donstbnt(0), WIDTH,
                          Spring.width(d), donstrbints.horizontblHistory);
        }
        if (donstrbints.vfrtidblHistory.sizf() < 2) {
            bpplyDffbults(donstrbints, NORTH, Spring.donstbnt(0), HEIGHT,
                          Spring.hfight(d), donstrbints.vfrtidblHistory);
        }
        rfturn donstrbints;
    }

    privbtf void bpplyDffbults(Constrbints donstrbints, String nbmf1,
                               Spring spring1, String nbmf2, Spring spring2,
                               List<String> history) {
        if (history.sizf() == 0) {
            donstrbints.sftConstrbint(nbmf1, spring1);
            donstrbints.sftConstrbint(nbmf2, spring2);
        } flsf {
            // At this point thfrf must bf fxbdtly onf donstrbint dffinfd blrfbdy.
            // Chfdk width/hfight first.
            if (donstrbints.gftConstrbint(nbmf2) == null) {
                donstrbints.sftConstrbint(nbmf2, spring2);
            } flsf {
                // If width/hfight is blrfbdy dffinfd, instbll b dffbult for x/y.
                donstrbints.sftConstrbint(nbmf1, spring1);
            }
            // Eithfr wby, lfbvf thf usfr's donstrbint topmost on thf stbdk.
            Collfdtions.rotbtf(history, 1);
        }
    }

    privbtf void putConstrbints(Componfnt domponfnt, Constrbints donstrbints) {
        domponfntConstrbints.put(domponfnt, bpplyDffbults(domponfnt, donstrbints));
    }

    /**
     * Rfturns thf donstrbints for thf spfdififd domponfnt.
     * Notf thbt,
     * unlikf thf <dodf>GridBbgLbyout</dodf>
     * <dodf>gftConstrbints</dodf> mfthod,
     * this mfthod dofs not dlonf donstrbints.
     * If no donstrbints
     * hbvf bffn bssodibtfd with this domponfnt,
     * this mfthod
     * rfturns b dffbult donstrbints objfdt positionfd bt
     * 0,0 rflbtivf to thf pbrfnt's Insfts bnd its width/hfight
     * donstrbinfd to thf minimum, mbximum, bnd prfffrrfd sizfs of thf
     * domponfnt. Thf sizf dhbrbdtfristids
     * brf not frozfn bt thf timf this mfthod is dbllfd;
     * instfbd this mfthod rfturns b donstrbints objfdt
     * whosf dhbrbdtfristids trbdk thf dhbrbdtfristids
     * of thf domponfnt bs thfy dhbngf.
     *
     * @pbrbm       d thf domponfnt whosf donstrbints will bf rfturnfd
     *
     * @rfturn      thf donstrbints for thf spfdififd domponfnt
     */
    publid Constrbints gftConstrbints(Componfnt d) {
       Constrbints rfsult = domponfntConstrbints.gft(d);
       if (rfsult == null) {
           if (d instbndfof jbvbx.swing.JComponfnt) {
                Objfdt dp = ((jbvbx.swing.JComponfnt)d).gftClifntPropfrty(SpringLbyout.dlbss);
                if (dp instbndfof Constrbints) {
                    rfturn bpplyDffbults(d, (Constrbints)dp);
                }
            }
            rfsult = nfw Constrbints();
            putConstrbints(d, rfsult);
       }
       rfturn rfsult;
    }

    /**
     * Rfturns thf spring dontrolling thf distbndf bftwffn
     * thf spfdififd fdgf of
     * thf domponfnt bnd thf top or lfft fdgf of its pbrfnt. This
     * mfthod, instfbd of rfturning thf durrfnt binding for thf
     * fdgf, rfturns b proxy thbt trbdks thf dhbrbdtfristids
     * of thf fdgf fvfn if thf fdgf is subsfqufntly rfbound.
     * Proxifs brf intfndfd to bf usfd in buildfr fnvironmfnts
     * whfrf it is usfful to bllow thf usfr to dffinf thf
     * donstrbints for b lbyout in bny ordfr. Proxifs do, howfvfr,
     * providf thf mfbns to drfbtf dydlid dfpfndfndifs bmongst
     * thf donstrbints of b lbyout. Sudh dydlfs brf dftfdtfd
     * intfrnblly by <dodf>SpringLbyout</dodf> so thbt
     * thf lbyout opfrbtion blwbys tfrminbtfs.
     *
     * @pbrbm fdgfNbmf must bf onf of
     * <dodf>SpringLbyout.NORTH</dodf>,
     * <dodf>SpringLbyout.SOUTH</dodf>,
     * <dodf>SpringLbyout.EAST</dodf>,
     * <dodf>SpringLbyout.WEST</dodf>,
     * <dodf>SpringLbyout.VERTICAL_CENTER</dodf>,
     * <dodf>SpringLbyout.HORIZONTAL_CENTER</dodf> or
     * <dodf>SpringLbyout.BASELINE</dodf>
     * @pbrbm d thf domponfnt whosf fdgf spring is dfsirfd
     *
     * @rfturn b proxy for thf spring dontrolling thf distbndf bftwffn thf
     *         spfdififd fdgf bnd thf top or lfft fdgf of its pbrfnt
     *
     * @sff #NORTH
     * @sff #SOUTH
     * @sff #EAST
     * @sff #WEST
     * @sff #VERTICAL_CENTER
     * @sff #HORIZONTAL_CENTER
     * @sff #BASELINE
     */
    publid Spring gftConstrbint(String fdgfNbmf, Componfnt d) {
        // Thf intfrning hfrf is unnfdfssbry; it wbs bddfd for fffidifndy.
        fdgfNbmf = fdgfNbmf.intfrn();
        rfturn nfw SpringProxy(fdgfNbmf, d, this);
    }

    publid void lbyoutContbinfr(Contbinfr pbrfnt) {
        sftPbrfnt(pbrfnt);

        int n = pbrfnt.gftComponfntCount();
        gftConstrbints(pbrfnt).rfsft();
        for (int i = 0 ; i < n ; i++) {
            gftConstrbints(pbrfnt.gftComponfnt(i)).rfsft();
        }

        Insfts insfts = pbrfnt.gftInsfts();
        Constrbints pd = gftConstrbints(pbrfnt);
        bbbndonCydlfs(pd.gftX()).sftVbluf(0);
        bbbndonCydlfs(pd.gftY()).sftVbluf(0);
        bbbndonCydlfs(pd.gftWidth()).sftVbluf(pbrfnt.gftWidth() -
                                              insfts.lfft - insfts.right);
        bbbndonCydlfs(pd.gftHfight()).sftVbluf(pbrfnt.gftHfight() -
                                               insfts.top - insfts.bottom);

        for (int i = 0 ; i < n ; i++) {
            Componfnt d = pbrfnt.gftComponfnt(i);
            Constrbints dd = gftConstrbints(d);
            int x = bbbndonCydlfs(dd.gftX()).gftVbluf();
            int y = bbbndonCydlfs(dd.gftY()).gftVbluf();
            int width = bbbndonCydlfs(dd.gftWidth()).gftVbluf();
            int hfight = bbbndonCydlfs(dd.gftHfight()).gftVbluf();
            d.sftBounds(insfts.lfft + x, insfts.top + y, width, hfight);
        }
    }
}
