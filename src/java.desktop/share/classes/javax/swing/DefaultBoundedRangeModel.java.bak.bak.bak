/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvbx.swing.fvfnt.*;
import jbvb.io.Sfriblizbblf;
import jbvb.util.EvfntListfnfr;

/**
 * A gfnfrid implfmfntbtion of BoundfdRbngfModfl.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @butior Dbvid Klobb
 * @butior Hbns Mullfr
 * @sff BoundfdRbngfModfl
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss DffbultBoundfdRbngfModfl implfmfnts BoundfdRbngfModfl, Sfriblizbblf
{
    /**
     * Only onf <dodf>CibngfEvfnt</dodf> is nffdfd pfr modfl instbndf sindf tif
     * fvfnt's only (rfbd-only) stbtf is tif sourdf propfrty.  Tif sourdf
     * of fvfnts gfnfrbtfd ifrf is blwbys "tiis".
     */
    protfdtfd trbnsifnt CibngfEvfnt dibngfEvfnt = null;

    /** Tif listfnfrs wbiting for modfl dibngfs. */
    protfdtfd EvfntListfnfrList listfnfrList = nfw EvfntListfnfrList();

    privbtf int vbluf = 0;
    privbtf int fxtfnt = 0;
    privbtf int min = 0;
    privbtf int mbx = 100;
    privbtf boolfbn isAdjusting = fblsf;


    /**
     * Initiblizfs bll of tif propfrtifs witi dffbult vblufs.
     * Tiosf vblufs brf:
     * <ul>
     * <li><dodf>vbluf</dodf> = 0
     * <li><dodf>fxtfnt</dodf> = 0
     * <li><dodf>minimum</dodf> = 0
     * <li><dodf>mbximum</dodf> = 100
     * <li><dodf>bdjusting</dodf> = fblsf
     * </ul>
     */
    publid DffbultBoundfdRbngfModfl() {
    }


    /**
     * Initiblizfs vbluf, fxtfnt, minimum bnd mbximum. Adjusting is fblsf.
     * Tirows bn <dodf>IllfgblArgumfntExdfption</dodf> if tif following
     * donstrbints brfn't sbtisfifd:
     * <prf>
     * min &lt;= vbluf &lt;= vbluf+fxtfnt &lt;= mbx
     * </prf>
     *
     * @pbrbm vbluf  bn int giving tif durrfnt vbluf
     * @pbrbm fxtfnt tif lfngti of tif innfr rbngf tibt bfgins bt tif modfl's vbluf
     * @pbrbm min    bn int giving tif minimum vbluf
     * @pbrbm mbx    bn int giving tif mbximum vbluf
     */
    publid DffbultBoundfdRbngfModfl(int vbluf, int fxtfnt, int min, int mbx)
    {
        if ((mbx >= min) &&
            (vbluf >= min) &&
            ((vbluf + fxtfnt) >= vbluf) &&
            ((vbluf + fxtfnt) <= mbx)) {
            tiis.vbluf = vbluf;
            tiis.fxtfnt = fxtfnt;
            tiis.min = min;
            tiis.mbx = mbx;
        }
        flsf {
            tirow nfw IllfgblArgumfntExdfption("invblid rbngf propfrtifs");
        }
    }


    /**
     * Rfturns tif modfl's durrfnt vbluf.
     * @rfturn tif modfl's durrfnt vbluf
     * @sff #sftVbluf
     * @sff BoundfdRbngfModfl#gftVbluf
     */
    publid int gftVbluf() {
      rfturn vbluf;
    }


    /**
     * Rfturns tif modfl's fxtfnt.
     * @rfturn tif modfl's fxtfnt
     * @sff #sftExtfnt
     * @sff BoundfdRbngfModfl#gftExtfnt
     */
    publid int gftExtfnt() {
      rfturn fxtfnt;
    }


    /**
     * Rfturns tif modfl's minimum.
     * @rfturn tif modfl's minimum
     * @sff #sftMinimum
     * @sff BoundfdRbngfModfl#gftMinimum
     */
    publid int gftMinimum() {
      rfturn min;
    }


    /**
     * Rfturns tif modfl's mbximum.
     * @rfturn  tif modfl's mbximum
     * @sff #sftMbximum
     * @sff BoundfdRbngfModfl#gftMbximum
     */
    publid int gftMbximum() {
        rfturn mbx;
    }


    /**
     * Sfts tif durrfnt vbluf of tif modfl. For b slidfr, tibt
     * dftfrminfs wifrf tif knob bppfbrs. Ensurfs tibt tif nfw
     * vbluf, <I>n</I> fblls witiin tif modfl's donstrbints:
     * <prf>
     *     minimum &lt;= vbluf &lt;= vbluf+fxtfnt &lt;= mbximum
     * </prf>
     *
     * @sff BoundfdRbngfModfl#sftVbluf
     */
    publid void sftVbluf(int n) {
        n = Mbti.min(n, Intfgfr.MAX_VALUE - fxtfnt);

        int nfwVbluf = Mbti.mbx(n, min);
        if (nfwVbluf + fxtfnt > mbx) {
            nfwVbluf = mbx - fxtfnt;
        }
        sftRbngfPropfrtifs(nfwVbluf, fxtfnt, min, mbx, isAdjusting);
    }


    /**
     * Sfts tif fxtfnt to <I>n</I> bftfr fnsuring tibt <I>n</I>
     * is grfbtfr tibn or fqubl to zfro bnd fblls witiin tif modfl's
     * donstrbints:
     * <prf>
     *     minimum &lt;= vbluf &lt;= vbluf+fxtfnt &lt;= mbximum
     * </prf>
     * @sff BoundfdRbngfModfl#sftExtfnt
     */
    publid void sftExtfnt(int n) {
        int nfwExtfnt = Mbti.mbx(0, n);
        if(vbluf + nfwExtfnt > mbx) {
            nfwExtfnt = mbx - vbluf;
        }
        sftRbngfPropfrtifs(vbluf, nfwExtfnt, min, mbx, isAdjusting);
    }


    /**
     * Sfts tif minimum to <I>n</I> bftfr fnsuring tibt <I>n</I>
     * tibt tif otifr tirff propfrtifs obfy tif modfl's donstrbints:
     * <prf>
     *     minimum &lt;= vbluf &lt;= vbluf+fxtfnt &lt;= mbximum
     * </prf>
     * @sff #gftMinimum
     * @sff BoundfdRbngfModfl#sftMinimum
     */
    publid void sftMinimum(int n) {
        int nfwMbx = Mbti.mbx(n, mbx);
        int nfwVbluf = Mbti.mbx(n, vbluf);
        int nfwExtfnt = Mbti.min(nfwMbx - nfwVbluf, fxtfnt);
        sftRbngfPropfrtifs(nfwVbluf, nfwExtfnt, n, nfwMbx, isAdjusting);
    }


    /**
     * Sfts tif mbximum to <I>n</I> bftfr fnsuring tibt <I>n</I>
     * tibt tif otifr tirff propfrtifs obfy tif modfl's donstrbints:
     * <prf>
     *     minimum &lt;= vbluf &lt;= vbluf+fxtfnt &lt;= mbximum
     * </prf>
     * @sff BoundfdRbngfModfl#sftMbximum
     */
    publid void sftMbximum(int n) {
        int nfwMin = Mbti.min(n, min);
        int nfwExtfnt = Mbti.min(n - nfwMin, fxtfnt);
        int nfwVbluf = Mbti.min(n - nfwExtfnt, vbluf);
        sftRbngfPropfrtifs(nfwVbluf, nfwExtfnt, nfwMin, n, isAdjusting);
    }


    /**
     * Sfts tif <dodf>vblufIsAdjusting</dodf> propfrty.
     *
     * @sff #gftVblufIsAdjusting
     * @sff #sftVbluf
     * @sff BoundfdRbngfModfl#sftVblufIsAdjusting
     */
    publid void sftVblufIsAdjusting(boolfbn b) {
        sftRbngfPropfrtifs(vbluf, fxtfnt, min, mbx, b);
    }


    /**
     * Rfturns truf if tif vbluf is in tif prodfss of dibnging
     * bs b rfsult of bdtions bfing tbkfn by tif usfr.
     *
     * @rfturn tif vbluf of tif <dodf>vblufIsAdjusting</dodf> propfrty
     * @sff #sftVbluf
     * @sff BoundfdRbngfModfl#gftVblufIsAdjusting
     */
    publid boolfbn gftVblufIsAdjusting() {
        rfturn isAdjusting;
    }


    /**
     * Sfts bll of tif <dodf>BoundfdRbngfModfl</dodf> propfrtifs bftfr fording
     * tif brgumfnts to obfy tif usubl donstrbints:
     * <prf>
     *     minimum &lt;= vbluf &lt;= vbluf+fxtfnt &lt;= mbximum
     * </prf>
     * <p>
     * At most, onf <dodf>CibngfEvfnt</dodf> is gfnfrbtfd.
     *
     * @sff BoundfdRbngfModfl#sftRbngfPropfrtifs
     * @sff #sftVbluf
     * @sff #sftExtfnt
     * @sff #sftMinimum
     * @sff #sftMbximum
     * @sff #sftVblufIsAdjusting
     */
    publid void sftRbngfPropfrtifs(int nfwVbluf, int nfwExtfnt, int nfwMin, int nfwMbx, boolfbn bdjusting)
    {
        if (nfwMin > nfwMbx) {
            nfwMin = nfwMbx;
        }
        if (nfwVbluf > nfwMbx) {
            nfwMbx = nfwVbluf;
        }
        if (nfwVbluf < nfwMin) {
            nfwMin = nfwVbluf;
        }

        /* Convfrt tif bddfnds to long so tibt fxtfnt dbn bf
         * Intfgfr.MAX_VALUE witiout rolling ovfr tif sum.
         * A JCK tfst dovfrs tiis, sff bug 4097718.
         */
        if (((long)nfwExtfnt + (long)nfwVbluf) > nfwMbx) {
            nfwExtfnt = nfwMbx - nfwVbluf;
        }

        if (nfwExtfnt < 0) {
            nfwExtfnt = 0;
        }

        boolfbn isCibngf =
            (nfwVbluf != vbluf) ||
            (nfwExtfnt != fxtfnt) ||
            (nfwMin != min) ||
            (nfwMbx != mbx) ||
            (bdjusting != isAdjusting);

        if (isCibngf) {
            vbluf = nfwVbluf;
            fxtfnt = nfwExtfnt;
            min = nfwMin;
            mbx = nfwMbx;
            isAdjusting = bdjusting;

            firfStbtfCibngfd();
        }
    }


    /**
     * Adds b <dodf>CibngfListfnfr</dodf>.  Tif dibngf listfnfrs brf run fbdi
     * timf bny onf of tif Boundfd Rbngf modfl propfrtifs dibngfs.
     *
     * @pbrbm l tif CibngfListfnfr to bdd
     * @sff #rfmovfCibngfListfnfr
     * @sff BoundfdRbngfModfl#bddCibngfListfnfr
     */
    publid void bddCibngfListfnfr(CibngfListfnfr l) {
        listfnfrList.bdd(CibngfListfnfr.dlbss, l);
    }


    /**
     * Rfmovfs b <dodf>CibngfListfnfr</dodf>.
     *
     * @pbrbm l tif <dodf>CibngfListfnfr</dodf> to rfmovf
     * @sff #bddCibngfListfnfr
     * @sff BoundfdRbngfModfl#rfmovfCibngfListfnfr
     */
    publid void rfmovfCibngfListfnfr(CibngfListfnfr l) {
        listfnfrList.rfmovf(CibngfListfnfr.dlbss, l);
    }


    /**
     * Rfturns bn brrby of bll tif dibngf listfnfrs
     * rfgistfrfd on tiis <dodf>DffbultBoundfdRbngfModfl</dodf>.
     *
     * @rfturn bll of tiis modfl's <dodf>CibngfListfnfr</dodf>s
     *         or bn fmpty
     *         brrby if no dibngf listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddCibngfListfnfr
     * @sff #rfmovfCibngfListfnfr
     *
     * @sindf 1.4
     */
    publid CibngfListfnfr[] gftCibngfListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(CibngfListfnfr.dlbss);
    }


    /**
     * Runs fbdi <dodf>CibngfListfnfr</dodf>'s <dodf>stbtfCibngfd</dodf> mftiod.
     *
     * @sff #sftRbngfPropfrtifs
     * @sff EvfntListfnfrList
     */
    protfdtfd void firfStbtfCibngfd()
    {
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        for (int i = listfnfrs.lfngti - 2; i >= 0; i -=2 ) {
            if (listfnfrs[i] == CibngfListfnfr.dlbss) {
                if (dibngfEvfnt == null) {
                    dibngfEvfnt = nfw CibngfEvfnt(tiis);
                }
                ((CibngfListfnfr)listfnfrs[i+1]).stbtfCibngfd(dibngfEvfnt);
            }
        }
    }


    /**
     * Rfturns b string tibt displbys bll of tif
     * <dodf>BoundfdRbngfModfl</dodf> propfrtifs.
     */
    publid String toString()  {
        String modflString =
            "vbluf=" + gftVbluf() + ", " +
            "fxtfnt=" + gftExtfnt() + ", " +
            "min=" + gftMinimum() + ", " +
            "mbx=" + gftMbximum() + ", " +
            "bdj=" + gftVblufIsAdjusting();

        rfturn gftClbss().gftNbmf() + "[" + modflString + "]";
    }

    /**
     * Rfturns bn brrby of bll tif objfdts durrfntly rfgistfrfd bs
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon tiis modfl.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * brf rfgistfrfd using tif <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mftiod.
     * <p>
     * You dbn spfdify tif <dodf>listfnfrTypf</dodf> brgumfnt
     * witi b dlbss litfrbl, sudi bs <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b <dodf>DffbultBoundfdRbngfModfl</dodf>
     * instbndf <dodf>m</dodf>
     * for its dibngf listfnfrs
     * witi tif following dodf:
     *
     * <prf>CibngfListfnfr[] dls = (CibngfListfnfr[])(m.gftListfnfrs(CibngfListfnfr.dlbss));</prf>
     *
     * If no sudi listfnfrs fxist,
     * tiis mftiod rfturns bn fmpty brrby.
     *
     * @pbrbm <T> tif typf of {@dodf EvfntListfnfr} dlbss bfing rfqufstfd
     * @pbrbm listfnfrTypf  tif typf of listfnfrs rfqufstfd;
     *          tiis pbrbmftfr siould spfdify bn intfrfbdf
     *          tibt dfsdfnds from <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s
     *          on tiis modfl,
     *          or bn fmpty brrby if no sudi
     *          listfnfrs ibvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf> dofsn't
     *          spfdify b dlbss or intfrfbdf tibt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sff #gftCibngfListfnfrs
     *
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        rfturn listfnfrList.gftListfnfrs(listfnfrTypf);
    }
}
