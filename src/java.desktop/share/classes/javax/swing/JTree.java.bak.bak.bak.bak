/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bfbns.*;
import jbvb.io.*;
import jbvb.util.*;
import jbvbx.swing.fvfnt.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.trff.*;
import jbvbx.swing.tfxt.Position;
import jbvbx.bddfssibility.*;
import sun.swing.SwingUtilitifs2;
import sun.swing.SwingUtilitifs2.Sfdtion;
import stbtid sun.swing.SwingUtilitifs2.Sfdtion.*;


/**
 * <b nbmf="jtrff_dfsdription"></b>
 * A dontrol thbt displbys b sft of hifrbrdhidbl dbtb bs bn outlinf.
 * You dbn find tbsk-orifntfd dodumfntbtion bnd fxbmplfs of using trffs in
 * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/trff.html">How to Usf Trffs</b>,
 * b sfdtion in <fm>Thf Jbvb Tutoribl.</fm>
 * <p>
 * A spfdifid nodf in b trff dbn bf idfntififd fithfr by b
 * <dodf>TrffPbth</dodf> (bn objfdt
 * thbt fndbpsulbtfs b nodf bnd bll of its bndfstors), or by its
 * displby row, whfrf fbdh row in thf displby brfb displbys onf nodf.
 * An <i>fxpbndfd</i> nodf is b non-lfbf nodf (bs idfntififd by
 * <dodf>TrffModfl.isLfbf(nodf)</dodf> rfturning fblsf) thbt will displbys
 * its dhildrfn whfn bll its bndfstors brf <i>fxpbndfd</i>.
 * A <i>dollbpsfd</i>
 * nodf is onf whidh hidfs thfm. A <i>hiddfn</i> nodf is onf whidh is
 * undfr b dollbpsfd bndfstor. All of b <i>vifwbblf</i> nodfs pbrfnts
 * brf fxpbndfd, but mby or mby not bf displbyfd. A <i>displbyfd</i> nodf
 * is both vifwbblf bnd in thf displby brfb, whfrf it dbn bf sffn.
 * </p>
 * Thf following <dodf>JTrff</dodf> mfthods usf "visiblf" to mfbn "displbyfd":
 * <ul>
 * <li><dodf>isRootVisiblf()</dodf>
 * <li><dodf>sftRootVisiblf()</dodf>
 * <li><dodf>sdrollPbthToVisiblf()</dodf>
 * <li><dodf>sdrollRowToVisiblf()</dodf>
 * <li><dodf>gftVisiblfRowCount()</dodf>
 * <li><dodf>sftVisiblfRowCount()</dodf>
 * </ul>
 * Thf nfxt group of <dodf>JTrff</dodf> mfthods usf "visiblf" to mfbn
 * "vifwbblf" (undfr bn fxpbndfd pbrfnt):
 * <ul>
 * <li><dodf>isVisiblf()</dodf>
 * <li><dodf>mbkfVisiblf()</dodf>
 * </ul>
 * If you brf intfrfstfd in knowing whfn thf sflfdtion dhbngfs implfmfnt
 * thf <dodf>TrffSflfdtionListfnfr</dodf> intfrfbdf bnd bdd thf instbndf
 * using thf mfthod <dodf>bddTrffSflfdtionListfnfr</dodf>.
 * <dodf>vblufChbngfd</dodf> will bf invokfd whfn thf
 * sflfdtion dhbngfs, thbt is if thf usfr dlidks twidf on thf sbmf
 * nodf <dodf>vblufChbngfd</dodf> will only bf invokfd ondf.
 * <p>
 * If you brf intfrfstfd in dftfdting fithfr doublf-dlidk fvfnts or whfn
 * b usfr dlidks on b nodf, rfgbrdlfss of whfthfr or not it wbs sflfdtfd,
 * wf rfdommfnd you do thf following:
 * </p>
 * <prf>
 * finbl JTrff trff = ...;
 *
 * MousfListfnfr ml = nfw MousfAdbptfr() {
 *     publid void <b>mousfPrfssfd</b>(MousfEvfnt f) {
 *         int sflRow = trff.gftRowForLodbtion(f.gftX(), f.gftY());
 *         TrffPbth sflPbth = trff.gftPbthForLodbtion(f.gftX(), f.gftY());
 *         if(sflRow != -1) {
 *             if(f.gftClidkCount() == 1) {
 *                 mySinglfClidk(sflRow, sflPbth);
 *             }
 *             flsf if(f.gftClidkCount() == 2) {
 *                 myDoublfClidk(sflRow, sflPbth);
 *             }
 *         }
 *     }
 * };
 * trff.bddMousfListfnfr(ml);
 * </prf>
 * NOTE: This fxbmplf obtbins both thf pbth bnd row, but you only nffd to
 * gft thf onf you'rf intfrfstfd in.
 * <p>
 * To usf <dodf>JTrff</dodf> to displby dompound nodfs
 * (for fxbmplf, nodfs dontbining both
 * b grbphid idon bnd tfxt), subdlbss {@link TrffCfllRfndfrfr} bnd usf
 * {@link #sftCfllRfndfrfr} to tfll thf trff to usf it. To fdit sudh nodfs,
 * subdlbss {@link TrffCfllEditor} bnd usf {@link #sftCfllEditor}.
 * </p>
 * <p>
 * Likf bll <dodf>JComponfnt</dodf> dlbssfs, you dbn usf {@link InputMbp} bnd
 * {@link AdtionMbp}
 * to bssodibtf bn {@link Adtion} objfdt with b {@link KfyStrokf}
 * bnd fxfdutf thf bdtion undfr spfdififd donditions.
 * </p>
 * <strong>Wbrning:</strong> Swing is not thrfbd sbff. For morf
 * informbtion sff <b
 * hrff="pbdkbgf-summbry.html#thrfbding">Swing's Thrfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *</p>
 * @bfbninfo
 *   bttributf: isContbinfr fblsf
 * dfsdription: A domponfnt thbt displbys b sft of hifrbrdhidbl dbtb bs bn outlinf.
 *
 * @buthor Rob Dbvis
 * @buthor Rby Rybn
 * @buthor Sdott Violft
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl")
publid dlbss JTrff fxtfnds JComponfnt implfmfnts Sdrollbblf, Addfssiblf
{
    /**
     * @sff #gftUIClbssID
     * @sff #rfbdObjfdt
     */
    privbtf stbtid finbl String uiClbssID = "TrffUI";

    /**
     * Thf modfl thbt dffinfs thf trff displbyfd by this objfdt.
     */
    trbnsifnt protfdtfd TrffModfl        trffModfl;

    /**
     * Modfls thf sft of sflfdtfd nodfs in this trff.
     */
    trbnsifnt protfdtfd TrffSflfdtionModfl sflfdtionModfl;

    /**
     * Truf if thf root nodf is displbyfd, fblsf if its dhildrfn brf
     * thf highfst visiblf nodfs.
     */
    protfdtfd boolfbn                    rootVisiblf;

    /**
     * Thf dfll usfd to drbw nodfs. If <dodf>null</dodf>, thf UI usfs b dffbult
     * <dodf>dfllRfndfrfr</dodf>.
     */
    trbnsifnt protfdtfd TrffCfllRfndfrfr  dfllRfndfrfr;

    /**
     * Hfight to usf for fbdh displby row. If this is &lt;= 0 thf rfndfrfr
     * dftfrminfs thf hfight for fbdh row.
     */
    protfdtfd int                         rowHfight;
    privbtf boolfbn                       rowHfightSft = fblsf;

    /**
     * Mbps from <dodf>TrffPbth</dodf> to <dodf>Boolfbn</dodf>
     * indidbting whfthfr or not thf
     * pbrtidulbr pbth is fxpbndfd. This ONLY indidbtfs whfthfr b
     * givfn pbth is fxpbndfd, bnd NOT if it is visiblf or not. Thbt
     * informbtion must bf dftfrminfd by visiting bll thf pbrfnt
     * pbths bnd sffing if thfy brf visiblf.
     */
    trbnsifnt privbtf Hbshtbblf<TrffPbth, Boolfbn> fxpbndfdStbtf;


    /**
     * Truf if hbndlfs brf displbyfd bt thf topmost lfvfl of thf trff.
     * <p>
     * A hbndlf is b smbll idon thbt displbys bdjbdfnt to thf nodf whidh
     * bllows thf usfr to dlidk ondf to fxpbnd or dollbpsf thf nodf. A
     * dommon intfrfbdf shows b plus sign (+) for b nodf whidh dbn bf
     * fxpbndfd bnd b minus sign (-) for b nodf whidh dbn bf dollbpsfd.
     * Hbndlfs brf blwbys shown for nodfs bflow thf topmost lfvfl.
     * <p>
     * If thf <dodf>rootVisiblf</dodf> sftting spfdififs thbt thf root
     * nodf is to bf displbyfd, thfn thbt is thf only nodf bt thf topmost
     * lfvfl. If thf root nodf is not displbyfd, thfn bll of its
     * dhildrfn brf bt thf topmost lfvfl of thf trff. Hbndlfs brf
     * blwbys displbyfd for nodfs othfr thbn thf topmost.
     * <p>
     * If thf root nodf isn't visiblf, it is gfnfrblly b good to mbkf
     * this vbluf truf. Othfrwisf, thf trff looks fxbdtly likf b list,
     * bnd usfrs mby not know thbt thf "list fntrifs" brf bdtublly
     * trff nodfs.
     *
     * @sff #rootVisiblf
     */
    protfdtfd boolfbn           showsRootHbndlfs;
    privbtf boolfbn             showsRootHbndlfsSft = fblsf;

    /**
     * Crfbtfs b nfw fvfnt bnd pbssfd it off thf
     * <dodf>sflfdtionListfnfrs</dodf>.
     */
    protfdtfd trbnsifnt TrffSflfdtionRfdirfdtor sflfdtionRfdirfdtor;

    /**
     * Editor for thf fntrifs.  Dffbult is <dodf>null</dodf>
     * (trff is not fditbblf).
     */
    trbnsifnt protfdtfd TrffCfllEditor          dfllEditor;

    /**
     * Is thf trff fditbblf? Dffbult is fblsf.
     */
    protfdtfd boolfbn                 fditbblf;

    /**
     * Is this trff b lbrgf modfl? This is b dodf-optimizbtion sftting.
     * A lbrgf modfl dbn bf usfd whfn thf dfll hfight is thf sbmf for bll
     * nodfs. Thf UI will thfn dbdhf vfry littlf informbtion bnd instfbd
     * dontinublly mfssbgf thf modfl. Without b lbrgf modfl thf UI dbdhfs
     * most of thf informbtion, rfsulting in ffwfr mfthod dblls to thf modfl.
     * <p>
     * This vbluf is only b suggfstion to thf UI. Not bll UIs will
     * tbkf bdvbntbgf of it. Dffbult vbluf is fblsf.
     */
    protfdtfd boolfbn                 lbrgfModfl;

    /**
     * Numbfr of rows to mbkf visiblf bt onf timf. This vbluf is usfd for
     * thf <dodf>Sdrollbblf</dodf> intfrfbdf. It dftfrminfs thf prfffrrfd
     * sizf of thf displby brfb.
     */
    protfdtfd int                     visiblfRowCount;

    /**
     * If truf, whfn fditing is to bf stoppfd by wby of sflfdtion dhbnging,
     * dbtb in trff dhbnging or othfr mfbns <dodf>stopCfllEditing</dodf>
     * is invokfd, bnd dhbngfs brf sbvfd. If fblsf,
     * <dodf>dbndflCfllEditing</dodf> is invokfd, bnd dhbngfs
     * brf disdbrdfd. Dffbult is fblsf.
     */
    protfdtfd boolfbn                 invokfsStopCfllEditing;

    /**
     * If truf, whfn b nodf is fxpbndfd, bs mbny of thf dfsdfndbnts brf
     * sdrollfd to bf visiblf.
     */
    protfdtfd boolfbn                 sdrollsOnExpbnd;
    privbtf boolfbn                   sdrollsOnExpbndSft = fblsf;

    /**
     * Numbfr of mousf dlidks bfforf b nodf is fxpbndfd.
     */
    protfdtfd int                     togglfClidkCount;

    /**
     * Updbtfs thf <dodf>fxpbndfdStbtf</dodf>.
     */
    trbnsifnt protfdtfd TrffModflListfnfr       trffModflListfnfr;

    /**
     * Usfd whfn <dodf>sftExpbndfdStbtf</dodf> is invokfd,
     * will bf b <dodf>Stbdk</dodf> of <dodf>Stbdk</dodf>s.
     */
    trbnsifnt privbtf Stbdk<Stbdk<TrffPbth>> fxpbndfdStbdk;

    /**
     * Lfbd sflfdtion pbth, mby not bf <dodf>null</dodf>.
     */
    privbtf TrffPbth                  lfbdPbth;

    /**
     * Andhor pbth.
     */
    privbtf TrffPbth                  bndhorPbth;

    /**
     * Truf if pbths in thf sflfdtion should bf fxpbndfd.
     */
    privbtf boolfbn                   fxpbndsSflfdtfdPbths;

    /**
     * This is sft to truf for thf liff of thf <dodf>sftUI</dodf> dbll.
     */
    privbtf boolfbn                   sfttingUI;

    /** If truf, mousf prfssfs on sflfdtions initibtf b drbg opfrbtion. */
    privbtf boolfbn drbgEnbblfd;

    /**
     * Thf drop modf for this domponfnt.
     */
    privbtf DropModf dropModf = DropModf.USE_SELECTION;

    /**
     * Thf drop lodbtion.
     */
    privbtf trbnsifnt DropLodbtion dropLodbtion;

    /**
     * A subdlbss of <dodf>TrbnsffrHbndlfr.DropLodbtion</dodf> rfprfsfnting
     * b drop lodbtion for b <dodf>JTrff</dodf>.
     *
     * @sff #gftDropLodbtion
     * @sindf 1.6
     */
    publid stbtid finbl dlbss DropLodbtion fxtfnds TrbnsffrHbndlfr.DropLodbtion {
        privbtf finbl TrffPbth pbth;
        privbtf finbl int indfx;

        privbtf DropLodbtion(Point p, TrffPbth pbth, int indfx) {
            supfr(p);
            this.pbth = pbth;
            this.indfx = indfx;
        }

        /**
         * Rfturns thf indfx whfrf thf droppfd dbtb should bf insfrtfd
         * with rfspfdt to thf pbth rfturnfd by <dodf>gftPbth()</dodf>.
         * <p>
         * For drop modfs <dodf>DropModf.USE_SELECTION</dodf> bnd
         * <dodf>DropModf.ON</dodf>, this indfx is unimportbnt (bnd it will
         * blwbys bf <dodf>-1</dodf>) bs thf only intfrfsting dbtb is thf
         * pbth ovfr whidh thf drop opfrbtion oddurrfd.
         * <p>
         * For drop modf <dodf>DropModf.INSERT</dodf>, this indfx
         * indidbtfs thf indfx bt whidh thf dbtb should bf insfrtfd into
         * thf pbrfnt pbth rfprfsfntfd by <dodf>gftPbth()</dodf>.
         * <dodf>-1</dodf> indidbtfs thbt thf drop oddurrfd ovfr thf
         * pbrfnt itsflf, bnd in most dbsfs should bf trfbtfd bs insfrting
         * into fithfr thf bfginning or thf fnd of thf pbrfnt's list of
         * dhildrfn.
         * <p>
         * For <dodf>DropModf.ON_OR_INSERT</dodf>, this vbluf will bf
         * bn insfrt indfx, bs dfsdribfd bbovf, or <dodf>-1</dodf> if
         * thf drop oddurrfd ovfr thf pbth itsflf.
         *
         * @rfturn thf dhild indfx
         * @sff #gftPbth
         */
        publid int gftChildIndfx() {
            rfturn indfx;
        }

        /**
         * Rfturns thf pbth whfrf droppfd dbtb should bf plbdfd in thf
         * trff.
         * <p>
         * Intfrprftbtion of this vbluf dfpfnds on thf drop modf sft on thf
         * domponfnt. If thf drop modf is <dodf>DropModf.USE_SELECTION</dodf>
         * or <dodf>DropModf.ON</dodf>, thf rfturn vbluf is thf pbth in thf
         * trff ovfr whidh thf dbtb hbs bffn (or will bf) droppfd.
         * <dodf>null</dodf> indidbtfs thbt thf drop is ovfr fmpty spbdf,
         * not bssodibtfd with b pbrtidulbr pbth.
         * <p>
         * If thf drop modf is <dodf>DropModf.INSERT</dodf>, thf rfturn vbluf
         * rfffrs to thf pbth thbt should bfdomf thf pbrfnt of thf nfw dbtb,
         * in whidh dbsf <dodf>gftChildIndfx()</dodf> indidbtfs whfrf thf
         * nfw itfm should bf insfrtfd into this pbrfnt pbth. A
         * <dodf>null</dodf> pbth indidbtfs thbt no pbrfnt pbth hbs bffn
         * dftfrminfd, whidh dbn hbppfn for multiplf rfbsons:
         * <ul>
         *    <li>Thf trff hbs no modfl
         *    <li>Thfrf is no root in thf trff
         *    <li>Thf root is dollbpsfd
         *    <li>Thf root is b lfbf nodf
         * </ul>
         * It is up to thf dfvflopfr to dfdidf if bnd how thfy wish to hbndlf
         * thf <dodf>null</dodf> dbsf.
         * <p>
         * If thf drop modf is <dodf>DropModf.ON_OR_INSERT</dodf>,
         * <dodf>gftChildIndfx</dodf> dbn bf usfd to dftfrminf whfthfr thf
         * drop is on top of thf pbth itsflf (<dodf>-1</dodf>) or thf indfx
         * bt whidh it should bf insfrtfd into thf pbth (vblufs othfr thbn
         * <dodf>-1</dodf>).
         *
         * @rfturn thf drop pbth
         * @sff #gftChildIndfx
         */
        publid TrffPbth gftPbth() {
            rfturn pbth;
        }

        /**
         * Rfturns b string rfprfsfntbtion of this drop lodbtion.
         * This mfthod is intfndfd to bf usfd for dfbugging purposfs,
         * bnd thf dontfnt bnd formbt of thf rfturnfd string mby vbry
         * bftwffn implfmfntbtions.
         *
         * @rfturn b string rfprfsfntbtion of this drop lodbtion
         */
        publid String toString() {
            rfturn gftClbss().gftNbmf()
                   + "[dropPoint=" + gftDropPoint() + ","
                   + "pbth=" + pbth + ","
                   + "dhildIndfx=" + indfx + "]";
        }
    }

    /**
     * Thf row to fxpbnd during DnD.
     */
    privbtf int fxpbndRow = -1;

    @SupprfssWbrnings("sfribl")
    privbtf dlbss TrffTimfr fxtfnds Timfr {
        publid TrffTimfr() {
            supfr(2000, null);
            sftRfpfbts(fblsf);
        }

        publid void firfAdtionPfrformfd(AdtionEvfnt bf) {
            JTrff.this.fxpbndRow(fxpbndRow);
        }
    }

    /**
     * A timfr to fxpbnd nodfs during drop.
     */
    privbtf TrffTimfr dropTimfr;

    /**
     * Whfn <dodf>bddTrffExpbnsionListfnfr</dodf> is invokfd,
     * bnd <dodf>sfttingUI</dodf> is truf, this ivbr gfts sft to thf pbssfd in
     * <dodf>Listfnfr</dodf>. This listfnfr is thfn notififd first in
     * <dodf>firfTrffCollbpsfd</dodf> bnd <dodf>firfTrffExpbndfd</dodf>.
     * <p>This is bn ugly workbround for b wby to hbvf thf UI listfnfr
     * gft notififd bfforf othfr listfnfrs.
     */
    privbtf trbnsifnt TrffExpbnsionListfnfr     uiTrffExpbnsionListfnfr;

    /**
     * Mbx numbfr of stbdks to kffp bround.
     */
    privbtf stbtid int                TEMP_STACK_SIZE = 11;

    //
    // Bound propfrty nbmfs
    //
    /** Bound propfrty nbmf for <dodf>dfllRfndfrfr</dodf>. */
    publid finbl stbtid String        CELL_RENDERER_PROPERTY = "dfllRfndfrfr";
    /** Bound propfrty nbmf for <dodf>trffModfl</dodf>. */
    publid finbl stbtid String        TREE_MODEL_PROPERTY = "modfl";
    /** Bound propfrty nbmf for <dodf>rootVisiblf</dodf>. */
    publid finbl stbtid String        ROOT_VISIBLE_PROPERTY = "rootVisiblf";
    /** Bound propfrty nbmf for <dodf>showsRootHbndlfs</dodf>. */
    publid finbl stbtid String        SHOWS_ROOT_HANDLES_PROPERTY = "showsRootHbndlfs";
    /** Bound propfrty nbmf for <dodf>rowHfight</dodf>. */
    publid finbl stbtid String        ROW_HEIGHT_PROPERTY = "rowHfight";
    /** Bound propfrty nbmf for <dodf>dfllEditor</dodf>. */
    publid finbl stbtid String        CELL_EDITOR_PROPERTY = "dfllEditor";
    /** Bound propfrty nbmf for <dodf>fditbblf</dodf>. */
    publid finbl stbtid String        EDITABLE_PROPERTY = "fditbblf";
    /** Bound propfrty nbmf for <dodf>lbrgfModfl</dodf>. */
    publid finbl stbtid String        LARGE_MODEL_PROPERTY = "lbrgfModfl";
    /** Bound propfrty nbmf for sflfdtionModfl. */
    publid finbl stbtid String        SELECTION_MODEL_PROPERTY = "sflfdtionModfl";
    /** Bound propfrty nbmf for <dodf>visiblfRowCount</dodf>. */
    publid finbl stbtid String        VISIBLE_ROW_COUNT_PROPERTY = "visiblfRowCount";
    /** Bound propfrty nbmf for <dodf>mfssbgfsStopCfllEditing</dodf>. */
    publid finbl stbtid String        INVOKES_STOP_CELL_EDITING_PROPERTY = "invokfsStopCfllEditing";
    /** Bound propfrty nbmf for <dodf>sdrollsOnExpbnd</dodf>. */
    publid finbl stbtid String        SCROLLS_ON_EXPAND_PROPERTY = "sdrollsOnExpbnd";
    /** Bound propfrty nbmf for <dodf>togglfClidkCount</dodf>. */
    publid finbl stbtid String        TOGGLE_CLICK_COUNT_PROPERTY = "togglfClidkCount";
    /** Bound propfrty nbmf for <dodf>lfbdSflfdtionPbth</dodf>.
     * @sindf 1.3 */
    publid finbl stbtid String        LEAD_SELECTION_PATH_PROPERTY = "lfbdSflfdtionPbth";
    /** Bound propfrty nbmf for bndhor sflfdtion pbth.
     * @sindf 1.3 */
    publid finbl stbtid String        ANCHOR_SELECTION_PATH_PROPERTY = "bndhorSflfdtionPbth";
    /** Bound propfrty nbmf for fxpbnds sflfdtfd pbths propfrty
     * @sindf 1.3 */
    publid finbl stbtid String        EXPANDS_SELECTED_PATHS_PROPERTY = "fxpbndsSflfdtfdPbths";


    /**
     * Crfbtfs bnd rfturns b sbmplf <dodf>TrffModfl</dodf>.
     * Usfd primbrily for bfbnbuildfrs to show somfthing intfrfsting.
     *
     * @rfturn thf dffbult <dodf>TrffModfl</dodf>
     */
    protfdtfd stbtid TrffModfl gftDffbultTrffModfl() {
        DffbultMutbblfTrffNodf      root = nfw DffbultMutbblfTrffNodf("JTrff");
        DffbultMutbblfTrffNodf      pbrfnt;

        pbrfnt = nfw DffbultMutbblfTrffNodf("dolors");
        root.bdd(pbrfnt);
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("bluf"));
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("violft"));
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("rfd"));
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("yfllow"));

        pbrfnt = nfw DffbultMutbblfTrffNodf("sports");
        root.bdd(pbrfnt);
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("bbskftbbll"));
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("soddfr"));
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("footbbll"));
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("hodkfy"));

        pbrfnt = nfw DffbultMutbblfTrffNodf("food");
        root.bdd(pbrfnt);
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("hot dogs"));
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("pizzb"));
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("rbvioli"));
        pbrfnt.bdd(nfw DffbultMutbblfTrffNodf("bbnbnbs"));
        rfturn nfw DffbultTrffModfl(root);
    }

    /**
     * Rfturns b <dodf>TrffModfl</dodf> wrbpping thf spfdififd objfdt.
     * If thf objfdt is:<ul>
     * <li>bn brrby of <dodf>Objfdt</dodf>s,
     * <li>b <dodf>Hbshtbblf</dodf>, or
     * <li>b <dodf>Vfdtor</dodf>
     * </ul>thfn b nfw root nodf is drfbtfd with fbdh of thf indoming
     * objfdts bs dhildrfn. Othfrwisf, b nfw root is drfbtfd with
     * b vbluf of {@dodf "root"}.
     *
     * @pbrbm vbluf  thf <dodf>Objfdt</dodf> usfd bs thf foundbtion for
     *          thf <dodf>TrffModfl</dodf>
     * @rfturn b <dodf>TrffModfl</dodf> wrbpping thf spfdififd objfdt
     */
    protfdtfd stbtid TrffModfl drfbtfTrffModfl(Objfdt vbluf) {
        DffbultMutbblfTrffNodf           root;

        if((vbluf instbndfof Objfdt[]) || (vbluf instbndfof Hbshtbblf) ||
           (vbluf instbndfof Vfdtor)) {
            root = nfw DffbultMutbblfTrffNodf("root");
            DynbmidUtilTrffNodf.drfbtfChildrfn(root, vbluf);
        }
        flsf {
            root = nfw DynbmidUtilTrffNodf("root", vbluf);
        }
        rfturn nfw DffbultTrffModfl(root, fblsf);
    }

    /**
     * Rfturns b <dodf>JTrff</dodf> with b sbmplf modfl.
     * Thf dffbult modfl usfd by thf trff dffinfs b lfbf nodf bs bny nodf
     * without dhildrfn.
     *
     * @sff DffbultTrffModfl#bsksAllowsChildrfn
     */
    publid JTrff() {
        this(gftDffbultTrffModfl());
    }

    /**
     * Rfturns b <dodf>JTrff</dodf> with fbdh flfmfnt of thf
     * spfdififd brrby bs thf
     * dhild of b nfw root nodf whidh is not displbyfd.
     * By dffbult, thf trff dffinfs b lfbf nodf bs bny nodf without
     * dhildrfn.
     *
     * @pbrbm vbluf  bn brrby of <dodf>Objfdt</dodf>s
     * @sff DffbultTrffModfl#bsksAllowsChildrfn
     */
    publid JTrff(Objfdt[] vbluf) {
        this(drfbtfTrffModfl(vbluf));
        this.sftRootVisiblf(fblsf);
        this.sftShowsRootHbndlfs(truf);
        fxpbndRoot();
    }

    /**
     * Rfturns b <dodf>JTrff</dodf> with fbdh flfmfnt of thf spfdififd
     * <dodf>Vfdtor</dodf> bs thf
     * dhild of b nfw root nodf whidh is not displbyfd. By dffbult, thf
     * trff dffinfs b lfbf nodf bs bny nodf without dhildrfn.
     *
     * @pbrbm vbluf  b <dodf>Vfdtor</dodf>
     * @sff DffbultTrffModfl#bsksAllowsChildrfn
     */
    publid JTrff(Vfdtor<?> vbluf) {
        this(drfbtfTrffModfl(vbluf));
        this.sftRootVisiblf(fblsf);
        this.sftShowsRootHbndlfs(truf);
        fxpbndRoot();
    }

    /**
     * Rfturns b <dodf>JTrff</dodf> drfbtfd from b <dodf>Hbshtbblf</dodf>
     * whidh dofs not displby with root.
     * Ebdh vbluf-hblf of thf kfy/vbluf pbirs in thf <dodf>HbshTbblf</dodf>
     * bfdomfs b dhild of thf nfw root nodf. By dffbult, thf trff dffinfs
     * b lfbf nodf bs bny nodf without dhildrfn.
     *
     * @pbrbm vbluf  b <dodf>Hbshtbblf</dodf>
     * @sff DffbultTrffModfl#bsksAllowsChildrfn
     */
    publid JTrff(Hbshtbblf<?,?> vbluf) {
        this(drfbtfTrffModfl(vbluf));
        this.sftRootVisiblf(fblsf);
        this.sftShowsRootHbndlfs(truf);
        fxpbndRoot();
    }

    /**
     * Rfturns b <dodf>JTrff</dodf> with thf spfdififd
     * <dodf>TrffNodf</dodf> bs its root,
     * whidh displbys thf root nodf.
     * By dffbult, thf trff dffinfs b lfbf nodf bs bny nodf without dhildrfn.
     *
     * @pbrbm root  b <dodf>TrffNodf</dodf> objfdt
     * @sff DffbultTrffModfl#bsksAllowsChildrfn
     */
    publid JTrff(TrffNodf root) {
        this(root, fblsf);
    }

    /**
     * Rfturns b <dodf>JTrff</dodf> with thf spfdififd <dodf>TrffNodf</dodf>
     * bs its root, whidh
     * displbys thf root nodf bnd whidh dfdidfs whfthfr b nodf is b
     * lfbf nodf in thf spfdififd mbnnfr.
     *
     * @pbrbm root  b <dodf>TrffNodf</dodf> objfdt
     * @pbrbm bsksAllowsChildrfn  if fblsf, bny nodf without dhildrfn is b
     *              lfbf nodf; if truf, only nodfs thbt do not bllow
     *              dhildrfn brf lfbf nodfs
     * @sff DffbultTrffModfl#bsksAllowsChildrfn
     */
    publid JTrff(TrffNodf root, boolfbn bsksAllowsChildrfn) {
        this(nfw DffbultTrffModfl(root, bsksAllowsChildrfn));
    }

    /**
     * Rfturns bn instbndf of <dodf>JTrff</dodf> whidh displbys thf root nodf
     * -- thf trff is drfbtfd using thf spfdififd dbtb modfl.
     *
     * @pbrbm nfwModfl  thf <dodf>TrffModfl</dodf> to usf bs thf dbtb modfl
     */
    @ConstrudtorPropfrtifs({"modfl"})
    publid JTrff(TrffModfl nfwModfl) {
        supfr();
        fxpbndfdStbdk = nfw Stbdk<Stbdk<TrffPbth>>();
        togglfClidkCount = 2;
        fxpbndfdStbtf = nfw Hbshtbblf<TrffPbth, Boolfbn>();
        sftLbyout(null);
        rowHfight = 16;
        visiblfRowCount = 20;
        rootVisiblf = truf;
        sflfdtionModfl = nfw DffbultTrffSflfdtionModfl();
        dfllRfndfrfr = null;
        sdrollsOnExpbnd = truf;
        sftOpbquf(truf);
        fxpbndsSflfdtfdPbths = truf;
        updbtfUI();
        sftModfl(nfwModfl);
    }

    /**
     * Rfturns thf L&bmp;F objfdt thbt rfndfrs this domponfnt.
     *
     * @rfturn thf <dodf>TrffUI</dodf> objfdt thbt rfndfrs this domponfnt
     */
    publid TrffUI gftUI() {
        rfturn (TrffUI)ui;
    }

    /**
     * Sfts thf L&bmp;F objfdt thbt rfndfrs this domponfnt.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm ui  thf <dodf>TrffUI</dodf> L&bmp;F objfdt
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *        bound: truf
     *       hiddfn: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Thf UI objfdt thbt implfmfnts thf Componfnt's LookAndFffl.
     */
    publid void sftUI(TrffUI ui) {
        if (this.ui != ui) {
            sfttingUI = truf;
            uiTrffExpbnsionListfnfr = null;
            try {
                supfr.sftUI(ui);
            }
            finblly {
                sfttingUI = fblsf;
            }
        }
    }

    /**
     * Notifidbtion from thf <dodf>UIMbnbgfr</dodf> thbt thf L&bmp;F hbs dhbngfd.
     * Rfplbdfs thf durrfnt UI objfdt with thf lbtfst vfrsion from thf
     * <dodf>UIMbnbgfr</dodf>.
     *
     * @sff JComponfnt#updbtfUI
     */
    publid void updbtfUI() {
        sftUI((TrffUI)UIMbnbgfr.gftUI(this));

        SwingUtilitifs.updbtfRfndfrfrOrEditorUI(gftCfllRfndfrfr());
        SwingUtilitifs.updbtfRfndfrfrOrEditorUI(gftCfllEditor());
    }


    /**
     * Rfturns thf nbmf of thf L&bmp;F dlbss thbt rfndfrs this domponfnt.
     *
     * @rfturn thf string "TrffUI"
     * @sff JComponfnt#gftUIClbssID
     * @sff UIDffbults#gftUI
     */
    publid String gftUIClbssID() {
        rfturn uiClbssID;
    }


    /**
     * Rfturns thf durrfnt <dodf>TrffCfllRfndfrfr</dodf>
     *  thbt is rfndfring fbdh dfll.
     *
     * @rfturn thf <dodf>TrffCfllRfndfrfr</dodf> thbt is rfndfring fbdh dfll
     */
    publid TrffCfllRfndfrfr gftCfllRfndfrfr() {
        rfturn dfllRfndfrfr;
    }

    /**
     * Sfts thf <dodf>TrffCfllRfndfrfr</dodf> thbt will bf usfd to
     * drbw fbdh dfll.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm x  thf <dodf>TrffCfllRfndfrfr</dodf> thbt is to rfndfr fbdh dfll
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Thf TrffCfllRfndfrfr thbt will bf usfd to drbw
     *               fbdh dfll.
     */
    publid void sftCfllRfndfrfr(TrffCfllRfndfrfr x) {
        TrffCfllRfndfrfr oldVbluf = dfllRfndfrfr;

        dfllRfndfrfr = x;
        firfPropfrtyChbngf(CELL_RENDERER_PROPERTY, oldVbluf, dfllRfndfrfr);
        invblidbtf();
    }

    /**
      * Dftfrminfs whfthfr thf trff is fditbblf. Firfs b propfrty
      * dhbngf fvfnt if thf nfw sftting is difffrfnt from thf fxisting
      * sftting.
     * <p>
     * This is b bound propfrty.
      *
      * @pbrbm flbg  b boolfbn vbluf, truf if thf trff is fditbblf
      * @bfbninfo
      *        bound: truf
      *  dfsdription: Whfthfr thf trff is fditbblf.
      */
    publid void sftEditbblf(boolfbn flbg) {
        boolfbn                 oldVbluf = this.fditbblf;

        this.fditbblf = flbg;
        firfPropfrtyChbngf(EDITABLE_PROPERTY, oldVbluf, flbg);
        if (bddfssiblfContfxt != null) {
            bddfssiblfContfxt.firfPropfrtyChbngf(
                AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                (oldVbluf ? AddfssiblfStbtf.EDITABLE : null),
                (flbg ? AddfssiblfStbtf.EDITABLE : null));
        }
    }

    /**
     * Rfturns truf if thf trff is fditbblf.
     *
     * @rfturn truf if thf trff is fditbblf
     */
    publid boolfbn isEditbblf() {
        rfturn fditbblf;
    }

    /**
     * Sfts thf dfll fditor.  A <dodf>null</dodf> vbluf implifs thbt thf
     * trff dbnnot bf fditfd.  If this rfprfsfnts b dhbngf in thf
     * <dodf>dfllEditor</dodf>, thf <dodf>propfrtyChbngf</dodf>
     * mfthod is invokfd on bll listfnfrs.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm dfllEditor thf <dodf>TrffCfllEditor</dodf> to usf
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Thf dfll fditor. A null vbluf implifs thf trff
     *               dbnnot bf fditfd.
     */
    publid void sftCfllEditor(TrffCfllEditor dfllEditor) {
        TrffCfllEditor        oldEditor = this.dfllEditor;

        this.dfllEditor = dfllEditor;
        firfPropfrtyChbngf(CELL_EDITOR_PROPERTY, oldEditor, dfllEditor);
        invblidbtf();
    }

    /**
     * Rfturns thf fditor usfd to fdit fntrifs in thf trff.
     *
     * @rfturn thf <dodf>TrffCfllEditor</dodf> in usf,
     *          or <dodf>null</dodf> if thf trff dbnnot bf fditfd
     */
    publid TrffCfllEditor gftCfllEditor() {
        rfturn dfllEditor;
    }

    /**
     * Rfturns thf <dodf>TrffModfl</dodf> thbt is providing thf dbtb.
     *
     * @rfturn thf <dodf>TrffModfl</dodf> thbt is providing thf dbtb
     */
    publid TrffModfl gftModfl() {
        rfturn trffModfl;
    }

    /**
     * Sfts thf <dodf>TrffModfl</dodf> thbt will providf thf dbtb.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm nfwModfl thf <dodf>TrffModfl</dodf> thbt is to providf thf dbtb
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Thf TrffModfl thbt will providf thf dbtb.
     */
    publid void sftModfl(TrffModfl nfwModfl) {
        dlfbrSflfdtion();

        TrffModfl oldModfl = trffModfl;

        if(trffModfl != null && trffModflListfnfr != null)
            trffModfl.rfmovfTrffModflListfnfr(trffModflListfnfr);

        if (bddfssiblfContfxt != null) {
            if (trffModfl != null) {
                trffModfl.rfmovfTrffModflListfnfr((TrffModflListfnfr)bddfssiblfContfxt);
            }
            if (nfwModfl != null) {
                nfwModfl.bddTrffModflListfnfr((TrffModflListfnfr)bddfssiblfContfxt);
            }
        }

        trffModfl = nfwModfl;
        dlfbrTogglfdPbths();
        if(trffModfl != null) {
            if(trffModflListfnfr == null)
                trffModflListfnfr = drfbtfTrffModflListfnfr();
            if(trffModflListfnfr != null)
                trffModfl.bddTrffModflListfnfr(trffModflListfnfr);
            // Mbrk thf root bs fxpbndfd, if it isn't b lfbf.
            if(trffModfl.gftRoot() != null &&
               !trffModfl.isLfbf(trffModfl.gftRoot())) {
                fxpbndfdStbtf.put(nfw TrffPbth(trffModfl.gftRoot()),
                                  Boolfbn.TRUE);
            }
        }
        firfPropfrtyChbngf(TREE_MODEL_PROPERTY, oldModfl, trffModfl);
        invblidbtf();
    }

    /**
     * Rfturns truf if thf root nodf of thf trff is displbyfd.
     *
     * @rfturn truf if thf root nodf of thf trff is displbyfd
     * @sff #rootVisiblf
     */
    publid boolfbn isRootVisiblf() {
        rfturn rootVisiblf;
    }

    /**
     * Dftfrminfs whfthfr or not thf root nodf from
     * thf <dodf>TrffModfl</dodf> is visiblf.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm rootVisiblf truf if thf root nodf of thf trff is to bf displbyfd
     * @sff #rootVisiblf
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Whfthfr or not thf root nodf
     *               from thf TrffModfl is visiblf.
     */
    publid void sftRootVisiblf(boolfbn rootVisiblf) {
        boolfbn                oldVbluf = this.rootVisiblf;

        this.rootVisiblf = rootVisiblf;
        firfPropfrtyChbngf(ROOT_VISIBLE_PROPERTY, oldVbluf, this.rootVisiblf);
        if (bddfssiblfContfxt != null) {
            ((AddfssiblfJTrff)bddfssiblfContfxt).firfVisiblfDbtbPropfrtyChbngf();
        }
    }

    /**
     * Sfts thf vbluf of thf <dodf>showsRootHbndlfs</dodf> propfrty,
     * whidh spfdififs whfthfr thf nodf hbndlfs should bf displbyfd.
     * Thf dffbult vbluf of this propfrty dfpfnds on thf donstrudtor
     * usfd to drfbtf thf <dodf>JTrff</dodf>.
     * Somf look bnd fffls might not support hbndlfs;
     * thfy will ignorf this propfrty.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm nfwVbluf <dodf>truf</dodf> if root hbndlfs should bf displbyfd;
     *                 othfrwisf, <dodf>fblsf</dodf>
     * @sff #showsRootHbndlfs
     * @sff #gftShowsRootHbndlfs
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Whfthfr thf nodf hbndlfs brf to bf
     *               displbyfd.
     */
    publid void sftShowsRootHbndlfs(boolfbn nfwVbluf) {
        boolfbn                oldVbluf = showsRootHbndlfs;
        TrffModfl              modfl = gftModfl();

        showsRootHbndlfs = nfwVbluf;
        showsRootHbndlfsSft = truf;
        firfPropfrtyChbngf(SHOWS_ROOT_HANDLES_PROPERTY, oldVbluf,
                           showsRootHbndlfs);
        if (bddfssiblfContfxt != null) {
            ((AddfssiblfJTrff)bddfssiblfContfxt).firfVisiblfDbtbPropfrtyChbngf();
        }
        invblidbtf();
    }

    /**
     * Rfturns thf vbluf of thf <dodf>showsRootHbndlfs</dodf> propfrty.
     *
     * @rfturn thf vbluf of thf <dodf>showsRootHbndlfs</dodf> propfrty
     * @sff #showsRootHbndlfs
     */
    publid boolfbn gftShowsRootHbndlfs()
    {
        rfturn showsRootHbndlfs;
    }

    /**
     * Sfts thf hfight of fbdh dfll, in pixfls.  If thf spfdififd vbluf
     * is lfss thbn or fqubl to zfro thf durrfnt dfll rfndfrfr is
     * qufrifd for fbdh row's hfight.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm rowHfight thf hfight of fbdh dfll, in pixfls
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Thf hfight of fbdh dfll.
     */
    publid void sftRowHfight(int rowHfight)
    {
        int                oldVbluf = this.rowHfight;

        this.rowHfight = rowHfight;
        rowHfightSft = truf;
        firfPropfrtyChbngf(ROW_HEIGHT_PROPERTY, oldVbluf, this.rowHfight);
        invblidbtf();
    }

    /**
     * Rfturns thf hfight of fbdh row.  If thf rfturnfd vbluf is lfss thbn
     * or fqubl to 0 thf hfight for fbdh row is dftfrminfd by thf
     * rfndfrfr.
     *
     * @rfturn thf hfight of fbdh row
     */
    publid int gftRowHfight()
    {
        rfturn rowHfight;
    }

    /**
     * Rfturns truf if thf hfight of fbdh displby row is b fixfd sizf.
     *
     * @rfturn truf if thf hfight of fbdh row is b fixfd sizf
     */
    publid boolfbn isFixfdRowHfight()
    {
        rfturn (rowHfight > 0);
    }

    /**
     * Spfdififs whfthfr thf UI should usf b lbrgf modfl.
     * (Not bll UIs will implfmfnt this.) Firfs b propfrty dhbngf
     * for thf LARGE_MODEL_PROPERTY.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm nfwVbluf truf to suggfst b lbrgf modfl to thf UI
     * @sff #lbrgfModfl
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Whfthfr thf UI should usf b
     *               lbrgf modfl.
     */
    publid void sftLbrgfModfl(boolfbn nfwVbluf) {
        boolfbn                oldVbluf = lbrgfModfl;

        lbrgfModfl = nfwVbluf;
        firfPropfrtyChbngf(LARGE_MODEL_PROPERTY, oldVbluf, nfwVbluf);
    }

    /**
     * Rfturns truf if thf trff is donfigurfd for b lbrgf modfl.
     *
     * @rfturn truf if b lbrgf modfl is suggfstfd
     * @sff #lbrgfModfl
     */
    publid boolfbn isLbrgfModfl() {
        rfturn lbrgfModfl;
    }

    /**
     * Dftfrminfs whbt hbppfns whfn fditing is intfrruptfd by sflfdting
     * bnothfr nodf in thf trff, b dhbngf in thf trff's dbtb, or by somf
     * othfr mfbns. Sftting this propfrty to <dodf>truf</dodf> dbusfs thf
     * dhbngfs to bf butombtidblly sbvfd whfn fditing is intfrruptfd.
     * <p>
     * Firfs b propfrty dhbngf for thf INVOKES_STOP_CELL_EDITING_PROPERTY.
     *
     * @pbrbm nfwVbluf truf mfbns thbt <dodf>stopCfllEditing</dodf> is invokfd
     *        whfn fditing is intfrruptfd, bnd dbtb is sbvfd; fblsf mfbns thbt
     *        <dodf>dbndflCfllEditing</dodf> is invokfd, bnd dhbngfs brf lost
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Dftfrminfs whbt hbppfns whfn fditing is intfrruptfd,
     *               sflfdting bnothfr nodf in thf trff, b dhbngf in thf
     *               trff's dbtb, or somf othfr mfbns.
     */
    publid void sftInvokfsStopCfllEditing(boolfbn nfwVbluf) {
        boolfbn                  oldVbluf = invokfsStopCfllEditing;

        invokfsStopCfllEditing = nfwVbluf;
        firfPropfrtyChbngf(INVOKES_STOP_CELL_EDITING_PROPERTY, oldVbluf,
                           nfwVbluf);
    }

    /**
     * Rfturns thf indidbtor thbt tflls whbt hbppfns whfn fditing is
     * intfrruptfd.
     *
     * @rfturn thf indidbtor thbt tflls whbt hbppfns whfn fditing is
     *         intfrruptfd
     * @sff #sftInvokfsStopCfllEditing
     */
    publid boolfbn gftInvokfsStopCfllEditing() {
        rfturn invokfsStopCfllEditing;
    }

    /**
     * Sfts thf <dodf>sdrollsOnExpbnd</dodf> propfrty,
     * whidh dftfrminfs whfthfr thf
     * trff might sdroll to show prfviously hiddfn dhildrfn.
     * If this propfrty is <dodf>truf</dodf> (thf dffbult),
     * whfn b nodf fxpbnds
     * thf trff dbn usf sdrolling to mbkf
     * thf mbximum possiblf numbfr of thf nodf's dfsdfndbnts visiblf.
     * In somf look bnd fffls, trffs might not nffd to sdroll whfn fxpbndfd;
     * thosf look bnd fffls will ignorf this propfrty.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm nfwVbluf <dodf>fblsf</dodf> to disbblf sdrolling on fxpbnsion;
     *                 <dodf>truf</dodf> to fnbblf it
     * @sff #gftSdrollsOnExpbnd
     *
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Indidbtfs if b nodf dfsdfndbnt should bf sdrollfd whfn fxpbndfd.
     */
    publid void sftSdrollsOnExpbnd(boolfbn nfwVbluf) {
        boolfbn           oldVbluf = sdrollsOnExpbnd;

        sdrollsOnExpbnd = nfwVbluf;
        sdrollsOnExpbndSft = truf;
        firfPropfrtyChbngf(SCROLLS_ON_EXPAND_PROPERTY, oldVbluf,
                           nfwVbluf);
    }

    /**
     * Rfturns thf vbluf of thf <dodf>sdrollsOnExpbnd</dodf> propfrty.
     *
     * @rfturn thf vbluf of thf <dodf>sdrollsOnExpbnd</dodf> propfrty
     */
    publid boolfbn gftSdrollsOnExpbnd() {
        rfturn sdrollsOnExpbnd;
    }

    /**
     * Sfts thf numbfr of mousf dlidks bfforf b nodf will fxpbnd or dlosf.
     * Thf dffbult is two.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm dlidkCount thf numbfr of mousf dlidks to gft b nodf fxpbndfd or dlosfd
     * @sindf 1.3
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Numbfr of dlidks bfforf b nodf will fxpbnd/dollbpsf.
     */
    publid void sftTogglfClidkCount(int dlidkCount) {
        int         oldCount = togglfClidkCount;

        togglfClidkCount = dlidkCount;
        firfPropfrtyChbngf(TOGGLE_CLICK_COUNT_PROPERTY, oldCount,
                           dlidkCount);
    }

    /**
     * Rfturns thf numbfr of mousf dlidks nffdfd to fxpbnd or dlosf b nodf.
     *
     * @rfturn numbfr of mousf dlidks bfforf nodf is fxpbndfd
     * @sindf 1.3
     */
    publid int gftTogglfClidkCount() {
        rfturn togglfClidkCount;
    }

    /**
     * Configurfs thf <dodf>fxpbndsSflfdtfdPbths</dodf> propfrty. If
     * truf, bny timf thf sflfdtion is dhbngfd, fithfr vib thf
     * <dodf>TrffSflfdtionModfl</dodf>, or thf dovfr mfthods providfd by
     * <dodf>JTrff</dodf>, thf <dodf>TrffPbth</dodf>s pbrfnts will bf
     * fxpbndfd to mbkf thfm visiblf (visiblf mfbning thf pbrfnt pbth is
     * fxpbndfd, not nfdfssbrily in thf visiblf rfdtbnglf of thf
     * <dodf>JTrff</dodf>). If fblsf, whfn thf sflfdtion
     * dhbngfs thf nodfs pbrfnt is not mbdf visiblf (bll its pbrfnts fxpbndfd).
     * This is usfful if you wish to hbvf your sflfdtion modfl mbintbin pbths
     * thbt brf not blwbys visiblf (bll pbrfnts fxpbndfd).
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm nfwVbluf thf nfw vbluf for <dodf>fxpbndsSflfdtfdPbths</dodf>
     *
     * @sindf 1.3
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Indidbtfs whfthfr dhbngfs to thf sflfdtion should mbkf
     *               thf pbrfnt of thf pbth visiblf.
     */
    publid void sftExpbndsSflfdtfdPbths(boolfbn nfwVbluf) {
        boolfbn         oldVbluf = fxpbndsSflfdtfdPbths;

        fxpbndsSflfdtfdPbths = nfwVbluf;
        firfPropfrtyChbngf(EXPANDS_SELECTED_PATHS_PROPERTY, oldVbluf,
                           nfwVbluf);
    }

    /**
     * Rfturns thf <dodf>fxpbndsSflfdtfdPbths</dodf> propfrty.
     * @rfturn truf if sflfdtion dhbngfs rfsult in thf pbrfnt pbth bfing
     *         fxpbndfd
     * @sindf 1.3
     * @sff #sftExpbndsSflfdtfdPbths
     */
    publid boolfbn gftExpbndsSflfdtfdPbths() {
        rfturn fxpbndsSflfdtfdPbths;
    }

    /**
     * Turns on or off butombtid drbg hbndling. In ordfr to fnbblf butombtid
     * drbg hbndling, this propfrty should bf sft to {@dodf truf}, bnd thf
     * trff's {@dodf TrbnsffrHbndlfr} nffds to bf {@dodf non-null}.
     * Thf dffbult vbluf of thf {@dodf drbgEnbblfd} propfrty is {@dodf fblsf}.
     * <p>
     * Thf job of honoring this propfrty, bnd rfdognizing b usfr drbg gfsturf,
     * lifs with thf look bnd fffl implfmfntbtion, bnd in pbrtidulbr, thf trff's
     * {@dodf TrffUI}. Whfn butombtid drbg hbndling is fnbblfd, most look bnd
     * fffls (indluding thosf thbt subdlbss {@dodf BbsidLookAndFffl}) bfgin b
     * drbg bnd drop opfrbtion whfnfvfr thf usfr prfssfs thf mousf button ovfr
     * bn itfm bnd thfn movfs thf mousf b ffw pixfls. Sftting this propfrty to
     * {@dodf truf} dbn thfrfforf hbvf b subtlf ffffdt on how sflfdtions bfhbvf.
     * <p>
     * If b look bnd fffl is usfd thbt ignorfs this propfrty, you dbn still
     * bfgin b drbg bnd drop opfrbtion by dblling {@dodf fxportAsDrbg} on thf
     * trff's {@dodf TrbnsffrHbndlfr}.
     *
     * @pbrbm b whfthfr or not to fnbblf butombtid drbg hbndling
     * @fxdfption HfbdlfssExdfption if
     *            <dodf>b</dodf> is <dodf>truf</dodf> bnd
     *            <dodf>GrbphidsEnvironmfnt.isHfbdlfss()</dodf>
     *            rfturns <dodf>truf</dodf>
     * @sff jbvb.bwt.GrbphidsEnvironmfnt#isHfbdlfss
     * @sff #gftDrbgEnbblfd
     * @sff #sftTrbnsffrHbndlfr
     * @sff TrbnsffrHbndlfr
     * @sindf 1.4
     *
     * @bfbninfo
     *  dfsdription: dftfrminfs whfthfr butombtid drbg hbndling is fnbblfd
     *        bound: fblsf
     */
    publid void sftDrbgEnbblfd(boolfbn b) {
        if (b && GrbphidsEnvironmfnt.isHfbdlfss()) {
            throw nfw HfbdlfssExdfption();
        }
        drbgEnbblfd = b;
    }

    /**
     * Rfturns whfthfr or not butombtid drbg hbndling is fnbblfd.
     *
     * @rfturn thf vbluf of thf {@dodf drbgEnbblfd} propfrty
     * @sff #sftDrbgEnbblfd
     * @sindf 1.4
     */
    publid boolfbn gftDrbgEnbblfd() {
        rfturn drbgEnbblfd;
    }

    /**
     * Sfts thf drop modf for this domponfnt. For bbdkwbrd dompbtibility,
     * thf dffbult for this propfrty is <dodf>DropModf.USE_SELECTION</dodf>.
     * Usbgf of onf of thf othfr modfs is rfdommfndfd, howfvfr, for bn
     * improvfd usfr fxpfrifndf. <dodf>DropModf.ON</dodf>, for instbndf,
     * offfrs similbr bfhbvior of showing itfms bs sflfdtfd, but dofs so without
     * bfffdting thf bdtubl sflfdtion in thf trff.
     * <p>
     * <dodf>JTrff</dodf> supports thf following drop modfs:
     * <ul>
     *    <li><dodf>DropModf.USE_SELECTION</dodf></li>
     *    <li><dodf>DropModf.ON</dodf></li>
     *    <li><dodf>DropModf.INSERT</dodf></li>
     *    <li><dodf>DropModf.ON_OR_INSERT</dodf></li>
     * </ul>
     * <p>
     * Thf drop modf is only mfbningful if this domponfnt hbs b
     * <dodf>TrbnsffrHbndlfr</dodf> thbt bddfpts drops.
     *
     * @pbrbm dropModf thf drop modf to usf
     * @throws IllfgblArgumfntExdfption if thf drop modf is unsupportfd
     *         or <dodf>null</dodf>
     * @sff #gftDropModf
     * @sff #gftDropLodbtion
     * @sff #sftTrbnsffrHbndlfr
     * @sff TrbnsffrHbndlfr
     * @sindf 1.6
     */
    publid finbl void sftDropModf(DropModf dropModf) {
        if (dropModf != null) {
            switdh (dropModf) {
                dbsf USE_SELECTION:
                dbsf ON:
                dbsf INSERT:
                dbsf ON_OR_INSERT:
                    this.dropModf = dropModf;
                    rfturn;
            }
        }

        throw nfw IllfgblArgumfntExdfption(dropModf + ": Unsupportfd drop modf for trff");
    }

    /**
     * Rfturns thf drop modf for this domponfnt.
     *
     * @rfturn thf drop modf for this domponfnt
     * @sff #sftDropModf
     * @sindf 1.6
     */
    publid finbl DropModf gftDropModf() {
        rfturn dropModf;
    }

    /**
     * Cbldulbtfs b drop lodbtion in this domponfnt, rfprfsfnting whfrf b
     * drop bt thf givfn point should insfrt dbtb.
     *
     * @pbrbm p thf point to dbldulbtf b drop lodbtion for
     * @rfturn thf drop lodbtion, or <dodf>null</dodf>
     */
    DropLodbtion dropLodbtionForPoint(Point p) {
        DropLodbtion lodbtion = null;

        int row = gftClosfstRowForLodbtion(p.x, p.y);
        Rfdtbnglf bounds = gftRowBounds(row);
        TrffModfl modfl = gftModfl();
        Objfdt root = (modfl == null) ? null : modfl.gftRoot();
        TrffPbth rootPbth = (root == null) ? null : nfw TrffPbth(root);

        TrffPbth dhild;
        TrffPbth pbrfnt;
        boolfbn outsidf = row == -1
                          || p.y < bounds.y
                          || p.y >= bounds.y + bounds.hfight;

        switdh(dropModf) {
            dbsf USE_SELECTION:
            dbsf ON:
                if (outsidf) {
                    lodbtion = nfw DropLodbtion(p, null, -1);
                } flsf {
                    lodbtion = nfw DropLodbtion(p, gftPbthForRow(row), -1);
                }

                brfbk;
            dbsf INSERT:
            dbsf ON_OR_INSERT:
                if (row == -1) {
                    if (root != null && !modfl.isLfbf(root) && isExpbndfd(rootPbth)) {
                        lodbtion = nfw DropLodbtion(p, rootPbth, 0);
                    } flsf {
                        lodbtion = nfw DropLodbtion(p, null, -1);
                    }

                    brfbk;
                }

                boolfbn dhfdkOn = dropModf == DropModf.ON_OR_INSERT
                                  || !modfl.isLfbf(gftPbthForRow(row).gftLbstPbthComponfnt());

                Sfdtion sfdtion = SwingUtilitifs2.lifsInVfrtidbl(bounds, p, dhfdkOn);
                if(sfdtion == LEADING) {
                    dhild = gftPbthForRow(row);
                    pbrfnt = dhild.gftPbrfntPbth();
                } flsf if (sfdtion == TRAILING) {
                    int indfx = row + 1;
                    if (indfx >= gftRowCount()) {
                        if (modfl.isLfbf(root) || !isExpbndfd(rootPbth)) {
                            lodbtion = nfw DropLodbtion(p, null, -1);
                        } flsf {
                            pbrfnt = rootPbth;
                            indfx = modfl.gftChildCount(root);
                            lodbtion = nfw DropLodbtion(p, pbrfnt, indfx);
                        }

                        brfbk;
                    }

                    dhild = gftPbthForRow(indfx);
                    pbrfnt = dhild.gftPbrfntPbth();
                } flsf {
                    bssfrt dhfdkOn;
                    lodbtion = nfw DropLodbtion(p, gftPbthForRow(row), -1);
                    brfbk;
                }

                if (pbrfnt != null) {
                    lodbtion = nfw DropLodbtion(p, pbrfnt,
                        modfl.gftIndfxOfChild(pbrfnt.gftLbstPbthComponfnt(),
                                              dhild.gftLbstPbthComponfnt()));
                } flsf if (dhfdkOn || !modfl.isLfbf(root)) {
                    lodbtion = nfw DropLodbtion(p, rootPbth, -1);
                } flsf {
                    lodbtion = nfw DropLodbtion(p, null, -1);
                }

                brfbk;
            dffbult:
                bssfrt fblsf : "Unfxpfdtfd drop modf";
        }

        if (outsidf || row != fxpbndRow) {
            dbndflDropTimfr();
        }

        if (!outsidf && row != fxpbndRow) {
            if (isCollbpsfd(row)) {
                fxpbndRow = row;
                stbrtDropTimfr();
            }
        }

        rfturn lodbtion;
    }

    /**
     * Cbllfd to sft or dlfbr thf drop lodbtion during b DnD opfrbtion.
     * In somf dbsfs, thf domponfnt mby nffd to usf it's intfrnbl sflfdtion
     * tfmporbrily to indidbtf thf drop lodbtion. To hflp fbdilitbtf this,
     * this mfthod rfturns bnd bddfpts bs b pbrbmftfr b stbtf objfdt.
     * This stbtf objfdt dbn bf usfd to storf, bnd lbtfr rfstorf, thf sflfdtion
     * stbtf. Whbtfvfr this mfthod rfturns will bf pbssfd bbdk to it in
     * futurf dblls, bs thf stbtf pbrbmftfr. If it wbnts thf DnD systfm to
     * dontinuf storing thf sbmf stbtf, it must pbss it bbdk fvfry timf.
     * Hfrf's how this is usfd:
     * <p>
     * Lft's sby thbt on thf first dbll to this mfthod thf domponfnt dfdidfs
     * to sbvf somf stbtf (bfdbusf it is bbout to usf thf sflfdtion to show
     * b drop indfx). It dbn rfturn b stbtf objfdt to thf dbllfr fndbpsulbting
     * bny sbvfd sflfdtion stbtf. On b sfdond dbll, lft's sby thf drop lodbtion
     * is bfing dhbngfd to somfthing flsf. Thf domponfnt dofsn't nffd to
     * rfstorf bnything yft, so it simply pbssfs bbdk thf sbmf stbtf objfdt
     * to hbvf thf DnD systfm dontinuf storing it. Finblly, lft's sby this
     * mfthod is mfssbgfd with <dodf>null</dodf>. This mfbns DnD
     * is finishfd with this domponfnt for now, mfbning it should rfstorf
     * stbtf. At this point, it dbn usf thf stbtf pbrbmftfr to rfstorf
     * sbid stbtf, bnd of doursf rfturn <dodf>null</dodf> sindf thfrf's
     * no longfr bnything to storf.
     *
     * @pbrbm lodbtion thf drop lodbtion (bs dbldulbtfd by
     *        <dodf>dropLodbtionForPoint</dodf>) or <dodf>null</dodf>
     *        if thfrf's no longfr b vblid drop lodbtion
     * @pbrbm stbtf thf stbtf objfdt sbvfd fbrlifr for this domponfnt,
     *        or <dodf>null</dodf>
     * @pbrbm forDrop whfthfr or not thf mfthod is bfing dbllfd bfdbusf bn
     *        bdtubl drop oddurrfd
     * @rfturn bny sbvfd stbtf for this domponfnt, or <dodf>null</dodf> if nonf
     */
    Objfdt sftDropLodbtion(TrbnsffrHbndlfr.DropLodbtion lodbtion,
                           Objfdt stbtf,
                           boolfbn forDrop) {

        Objfdt rftVbl = null;
        DropLodbtion trffLodbtion = (DropLodbtion)lodbtion;

        if (dropModf == DropModf.USE_SELECTION) {
            if (trffLodbtion == null) {
                if (!forDrop && stbtf != null) {
                    sftSflfdtionPbths(((TrffPbth[][])stbtf)[0]);
                    sftAndhorSflfdtionPbth(((TrffPbth[][])stbtf)[1][0]);
                    sftLfbdSflfdtionPbth(((TrffPbth[][])stbtf)[1][1]);
                }
            } flsf {
                if (dropLodbtion == null) {
                    TrffPbth[] pbths = gftSflfdtionPbths();
                    if (pbths == null) {
                        pbths = nfw TrffPbth[0];
                    }

                    rftVbl = nfw TrffPbth[][] {pbths,
                            {gftAndhorSflfdtionPbth(), gftLfbdSflfdtionPbth()}};
                } flsf {
                    rftVbl = stbtf;
                }

                sftSflfdtionPbth(trffLodbtion.gftPbth());
            }
        }

        DropLodbtion old = dropLodbtion;
        dropLodbtion = trffLodbtion;
        firfPropfrtyChbngf("dropLodbtion", old, dropLodbtion);

        rfturn rftVbl;
    }

    /**
     * Cbllfd to indidbtf to this domponfnt thbt DnD is donf.
     * Allows for us to dbndfl thf fxpbnd timfr.
     */
    void dndDonf() {
        dbndflDropTimfr();
        dropTimfr = null;
    }

    /**
     * Rfturns thf lodbtion thbt this domponfnt should visublly indidbtf
     * bs thf drop lodbtion during b DnD opfrbtion ovfr thf domponfnt,
     * or {@dodf null} if no lodbtion is to durrfntly bf shown.
     * <p>
     * This mfthod is not mfbnt for qufrying thf drop lodbtion
     * from b {@dodf TrbnsffrHbndlfr}, bs thf drop lodbtion is only
     * sft bftfr thf {@dodf TrbnsffrHbndlfr}'s <dodf>dbnImport</dodf>
     * hbs rfturnfd bnd hbs bllowfd for thf lodbtion to bf shown.
     * <p>
     * Whfn this propfrty dhbngfs, b propfrty dhbngf fvfnt with
     * nbmf "dropLodbtion" is firfd by thf domponfnt.
     *
     * @rfturn thf drop lodbtion
     * @sff #sftDropModf
     * @sff TrbnsffrHbndlfr#dbnImport(TrbnsffrHbndlfr.TrbnsffrSupport)
     * @sindf 1.6
     */
    publid finbl DropLodbtion gftDropLodbtion() {
        rfturn dropLodbtion;
    }

    privbtf void stbrtDropTimfr() {
        if (dropTimfr == null) {
            dropTimfr = nfw TrffTimfr();
        }
        dropTimfr.stbrt();
    }

    privbtf void dbndflDropTimfr() {
        if (dropTimfr != null && dropTimfr.isRunning()) {
            fxpbndRow = -1;
            dropTimfr.stop();
        }
    }

    /**
     * Rfturns <dodf>isEditbblf</dodf>. This is invokfd from thf UI bfforf
     * fditing bfgins to insurf thbt thf givfn pbth dbn bf fditfd. This
     * is providfd bs bn fntry point for subdlbssfrs to bdd filtfrfd
     * fditing without hbving to rfsort to drfbting b nfw fditor.
     *
     * @pbrbm pbth b {@dodf TrffPbth} idfntifying b nodf
     * @rfturn truf if fvfry pbrfnt nodf bnd thf nodf itsflf is fditbblf
     * @sff #isEditbblf
     */
    publid boolfbn isPbthEditbblf(TrffPbth pbth) {
        rfturn isEditbblf();
    }

    /**
     * Ovfrridfs <dodf>JComponfnt</dodf>'s <dodf>gftToolTipTfxt</dodf>
     * mfthod in ordfr to bllow
     * rfndfrfr's tips to bf usfd if it hbs tfxt sft.
     * <p>
     * NOTE: For <dodf>JTrff</dodf> to propfrly displby tooltips of its
     * rfndfrfrs, <dodf>JTrff</dodf> must bf b rfgistfrfd domponfnt with thf
     * <dodf>ToolTipMbnbgfr</dodf>.  This dbn bf donf by invoking
     * <dodf>ToolTipMbnbgfr.shbrfdInstbndf().rfgistfrComponfnt(trff)</dodf>.
     * This is not donf butombtidblly!
     *
     * @pbrbm fvfnt thf <dodf>MousfEvfnt</dodf> thbt initibtfd thf
     *          <dodf>ToolTip</dodf> displby
     * @rfturn b string dontbining thf  tooltip or <dodf>null</dodf>
     *          if <dodf>fvfnt</dodf> is null
     */
    publid String gftToolTipTfxt(MousfEvfnt fvfnt) {
        String tip = null;

        if(fvfnt != null) {
            Point p = fvfnt.gftPoint();
            int sflRow = gftRowForLodbtion(p.x, p.y);
            TrffCfllRfndfrfr       r = gftCfllRfndfrfr();

            if(sflRow != -1 && r != null) {
                TrffPbth     pbth = gftPbthForRow(sflRow);
                Objfdt       lbstPbth = pbth.gftLbstPbthComponfnt();
                Componfnt    rComponfnt = r.gftTrffCfllRfndfrfrComponfnt
                    (this, lbstPbth, isRowSflfdtfd(sflRow),
                     isExpbndfd(sflRow), gftModfl().isLfbf(lbstPbth), sflRow,
                     truf);

                if(rComponfnt instbndfof JComponfnt) {
                    MousfEvfnt      nfwEvfnt;
                    Rfdtbnglf       pbthBounds = gftPbthBounds(pbth);

                    p.trbnslbtf(-pbthBounds.x, -pbthBounds.y);
                    nfwEvfnt = nfw MousfEvfnt(rComponfnt, fvfnt.gftID(),
                                          fvfnt.gftWhfn(),
                                              fvfnt.gftModififrs(),
                                              p.x, p.y,
                                              fvfnt.gftXOnSdrffn(),
                                              fvfnt.gftYOnSdrffn(),
                                              fvfnt.gftClidkCount(),
                                              fvfnt.isPopupTriggfr(),
                                              MousfEvfnt.NOBUTTON);

                    tip = ((JComponfnt)rComponfnt).gftToolTipTfxt(nfwEvfnt);
                }
            }
        }
        // No tip from thf rfndfrfr gft our own tip
        if (tip == null) {
            tip = gftToolTipTfxt();
        }
        rfturn tip;
    }

    /**
     * Cbllfd by thf rfndfrfrs to donvfrt thf spfdififd vbluf to
     * tfxt. This implfmfntbtion rfturns <dodf>vbluf.toString</dodf>, ignoring
     * bll othfr brgumfnts. To dontrol thf donvfrsion, subdlbss this
     * mfthod bnd usf bny of thf brgumfnts you nffd.
     *
     * @pbrbm vbluf thf <dodf>Objfdt</dodf> to donvfrt to tfxt
     * @pbrbm sflfdtfd truf if thf nodf is sflfdtfd
     * @pbrbm fxpbndfd truf if thf nodf is fxpbndfd
     * @pbrbm lfbf  truf if thf nodf is b lfbf nodf
     * @pbrbm row  bn intfgfr spfdifying thf nodf's displby row, whfrf 0 is
     *             thf first row in thf displby
     * @pbrbm hbsFodus truf if thf nodf hbs thf fodus
     * @rfturn thf <dodf>String</dodf> rfprfsfntbtion of thf nodf's vbluf
     */
    publid String donvfrtVblufToTfxt(Objfdt vbluf, boolfbn sflfdtfd,
                                     boolfbn fxpbndfd, boolfbn lfbf, int row,
                                     boolfbn hbsFodus) {
        if(vbluf != null) {
            String sVbluf = vbluf.toString();
            if (sVbluf != null) {
                rfturn sVbluf;
            }
        }
        rfturn "";
    }

    //
    // Thf following brf donvfnifndf mfthods thbt gft forwbrdfd to thf
    // durrfnt TrffUI.
    //

    /**
     * Rfturns thf numbfr of vifwbblf nodfs. A nodf is vifwbblf if bll of its
     * pbrfnts brf fxpbndfd. Thf root is only indludfd in this dount if
     * {@dodf isRootVisiblf()} is {@dodf truf}. This rfturns {@dodf 0} if
     * thf UI hbs not bffn sft.
     *
     * @rfturn thf numbfr of vifwbblf nodfs
     */
    publid int gftRowCount() {
        TrffUI            trff = gftUI();

        if(trff != null)
            rfturn trff.gftRowCount(this);
        rfturn 0;
    }

    /**
     * Sflfdts thf nodf idfntififd by thf spfdififd pbth. If bny
     * domponfnt of thf pbth is hiddfn (undfr b dollbpsfd nodf), bnd
     * <dodf>gftExpbndsSflfdtfdPbths</dodf> is truf it is
     * fxposfd (mbdf vifwbblf).
     *
     * @pbrbm pbth thf <dodf>TrffPbth</dodf> spfdifying thf nodf to sflfdt
     */
    publid void sftSflfdtionPbth(TrffPbth pbth) {
        gftSflfdtionModfl().sftSflfdtionPbth(pbth);
    }

    /**
     * Sflfdts thf nodfs idfntififd by thf spfdififd brrby of pbths.
     * If bny domponfnt in bny of thf pbths is hiddfn (undfr b dollbpsfd
     * nodf), bnd <dodf>gftExpbndsSflfdtfdPbths</dodf> is truf
     * it is fxposfd (mbdf vifwbblf).
     *
     * @pbrbm pbths bn brrby of <dodf>TrffPbth</dodf> objfdts thbt spfdififs
     *          thf nodfs to sflfdt
     */
    publid void sftSflfdtionPbths(TrffPbth[] pbths) {
        gftSflfdtionModfl().sftSflfdtionPbths(pbths);
    }

    /**
     * Sfts thf pbth idfntififs bs thf lfbd. Thf lfbd mby not bf sflfdtfd.
     * Thf lfbd is not mbintbinfd by <dodf>JTrff</dodf>,
     * rbthfr thf UI will updbtf it.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm nfwPbth  thf nfw lfbd pbth
     * @sindf 1.3
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Lfbd sflfdtion pbth
     */
    publid void sftLfbdSflfdtionPbth(TrffPbth nfwPbth) {
        TrffPbth          oldVbluf = lfbdPbth;

        lfbdPbth = nfwPbth;
        firfPropfrtyChbngf(LEAD_SELECTION_PATH_PROPERTY, oldVbluf, nfwPbth);

        // Firf thf bdtivf dfsdfndbnt propfrty dhbngf hfrf sindf thf
        // lfbdPbth got sft, this is triggfrfd both in dbsf nodf
        // sflfdtion dhbngfd bnd nodf fodus dhbngfd
        if (bddfssiblfContfxt != null){
            ((AddfssiblfJTrff)bddfssiblfContfxt).
                firfAdtivfDfsdfndbntPropfrtyChbngf(oldVbluf, nfwPbth);
        }
    }

    /**
     * Sfts thf pbth idfntififd bs thf bndhor.
     * Thf bndhor is not mbintbinfd by <dodf>JTrff</dodf>, rbthfr thf UI will
     * updbtf it.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm nfwPbth  thf nfw bndhor pbth
     * @sindf 1.3
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Andhor sflfdtion pbth
     */
    publid void sftAndhorSflfdtionPbth(TrffPbth nfwPbth) {
        TrffPbth          oldVbluf = bndhorPbth;

        bndhorPbth = nfwPbth;
        firfPropfrtyChbngf(ANCHOR_SELECTION_PATH_PROPERTY, oldVbluf, nfwPbth);
    }

    /**
     * Sflfdts thf nodf bt thf spfdififd row in thf displby.
     *
     * @pbrbm row  thf row to sflfdt, whfrf 0 is thf first row in
     *             thf displby
     */
    publid void sftSflfdtionRow(int row) {
        int[]             rows = { row };

        sftSflfdtionRows(rows);
    }

    /**
     * Sflfdts thf nodfs dorrfsponding to fbdh of thf spfdififd rows
     * in thf displby. If b pbrtidulbr flfmfnt of <dodf>rows</dodf> is
     * &lt; 0 or &gt;= <dodf>gftRowCount</dodf>, it will bf ignorfd.
     * If nonf of thf flfmfnts
     * in <dodf>rows</dodf> brf vblid rows, thf sflfdtion will
     * bf dlfbrfd. Thbt is it will bf bs if <dodf>dlfbrSflfdtion</dodf>
     * wbs invokfd.
     *
     * @pbrbm rows  bn brrby of ints spfdifying thf rows to sflfdt,
     *              whfrf 0 indidbtfs thf first row in thf displby
     */
    publid void sftSflfdtionRows(int[] rows) {
        TrffUI               ui = gftUI();

        if(ui != null && rows != null) {
            int                  numRows = rows.lfngth;
            TrffPbth[]           pbths = nfw TrffPbth[numRows];

            for(int dountfr = 0; dountfr < numRows; dountfr++) {
                pbths[dountfr] = ui.gftPbthForRow(this, rows[dountfr]);
            }
            sftSflfdtionPbths(pbths);
        }
    }

    /**
     * Adds thf nodf idfntififd by thf spfdififd <dodf>TrffPbth</dodf>
     * to thf durrfnt sflfdtion. If bny domponfnt of thf pbth isn't
     * vifwbblf, bnd <dodf>gftExpbndsSflfdtfdPbths</dodf> is truf it is
     * mbdf vifwbblf.
     * <p>
     * Notf thbt <dodf>JTrff</dodf> dofs not bllow duplidbtf nodfs to
     * fxist bs dhildrfn undfr thf sbmf pbrfnt -- fbdh sibling must bf
     * b uniquf objfdt.
     *
     * @pbrbm pbth thf <dodf>TrffPbth</dodf> to bdd
     */
    publid void bddSflfdtionPbth(TrffPbth pbth) {
        gftSflfdtionModfl().bddSflfdtionPbth(pbth);
    }

    /**
     * Adds fbdh pbth in thf brrby of pbths to thf durrfnt sflfdtion. If
     * bny domponfnt of bny of thf pbths isn't vifwbblf bnd
     * <dodf>gftExpbndsSflfdtfdPbths</dodf> is truf, it is
     * mbdf vifwbblf.
     * <p>
     * Notf thbt <dodf>JTrff</dodf> dofs not bllow duplidbtf nodfs to
     * fxist bs dhildrfn undfr thf sbmf pbrfnt -- fbdh sibling must bf
     * b uniquf objfdt.
     *
     * @pbrbm pbths bn brrby of <dodf>TrffPbth</dodf> objfdts thbt spfdififs
     *          thf nodfs to bdd
     */
    publid void bddSflfdtionPbths(TrffPbth[] pbths) {
        gftSflfdtionModfl().bddSflfdtionPbths(pbths);
    }

    /**
     * Adds thf pbth bt thf spfdififd row to thf durrfnt sflfdtion.
     *
     * @pbrbm row  bn intfgfr spfdifying thf row of thf nodf to bdd,
     *             whfrf 0 is thf first row in thf displby
     */
    publid void bddSflfdtionRow(int row) {
        int[]      rows = { row };

        bddSflfdtionRows(rows);
    }

    /**
     * Adds thf pbths bt fbdh of thf spfdififd rows to thf durrfnt sflfdtion.
     *
     * @pbrbm rows  bn brrby of ints spfdifying thf rows to bdd,
     *              whfrf 0 indidbtfs thf first row in thf displby
     */
    publid void bddSflfdtionRows(int[] rows) {
        TrffUI             ui = gftUI();

        if(ui != null && rows != null) {
            int                  numRows = rows.lfngth;
            TrffPbth[]           pbths = nfw TrffPbth[numRows];

            for(int dountfr = 0; dountfr < numRows; dountfr++)
                pbths[dountfr] = ui.gftPbthForRow(this, rows[dountfr]);
            bddSflfdtionPbths(pbths);
        }
    }

    /**
     * Rfturns thf lbst pbth domponfnt of thf sflfdtfd pbth. This is
     * b donvfnifndf mfthod for
     * {@dodf gftSflfdtionModfl().gftSflfdtionPbth().gftLbstPbthComponfnt()}.
     * This is typidblly only usfful if thf sflfdtion hbs onf pbth.
     *
     * @rfturn thf lbst pbth domponfnt of thf sflfdtfd pbth, or
     *         <dodf>null</dodf> if nothing is sflfdtfd
     * @sff TrffPbth#gftLbstPbthComponfnt
     */
    publid Objfdt gftLbstSflfdtfdPbthComponfnt() {
        TrffPbth     sflPbth = gftSflfdtionModfl().gftSflfdtionPbth();

        if(sflPbth != null)
            rfturn sflPbth.gftLbstPbthComponfnt();
        rfturn null;
    }

    /**
     * Rfturns thf pbth idfntififd bs thf lfbd.
     * @rfturn pbth idfntififd bs thf lfbd
     */
    publid TrffPbth gftLfbdSflfdtionPbth() {
        rfturn lfbdPbth;
    }

    /**
     * Rfturns thf pbth idfntififd bs thf bndhor.
     * @rfturn pbth idfntififd bs thf bndhor
     * @sindf 1.3
     */
    publid TrffPbth gftAndhorSflfdtionPbth() {
        rfturn bndhorPbth;
    }

    /**
     * Rfturns thf pbth to thf first sflfdtfd nodf.
     *
     * @rfturn thf <dodf>TrffPbth</dodf> for thf first sflfdtfd nodf,
     *          or <dodf>null</dodf> if nothing is durrfntly sflfdtfd
     */
    publid TrffPbth gftSflfdtionPbth() {
        rfturn gftSflfdtionModfl().gftSflfdtionPbth();
    }

    /**
     * Rfturns thf pbths of bll sflfdtfd vblufs.
     *
     * @rfturn bn brrby of <dodf>TrffPbth</dodf> objfdts indidbting thf sflfdtfd
     *         nodfs, or <dodf>null</dodf> if nothing is durrfntly sflfdtfd
     */
    publid TrffPbth[] gftSflfdtionPbths() {
        TrffPbth[] sflfdtionPbths = gftSflfdtionModfl().gftSflfdtionPbths();

        rfturn (sflfdtionPbths != null && sflfdtionPbths.lfngth > 0) ? sflfdtionPbths : null;
    }

    /**
     * Rfturns bll of thf durrfntly sflfdtfd rows. This mfthod is simply
     * forwbrdfd to thf <dodf>TrffSflfdtionModfl</dodf>.
     * If nothing is sflfdtfd <dodf>null</dodf> or bn fmpty brrby will
     * bf rfturnfd, bbsfd on thf <dodf>TrffSflfdtionModfl</dodf>
     * implfmfntbtion.
     *
     * @rfturn bn brrby of intfgfrs thbt idfntififs bll durrfntly sflfdtfd rows
     *         whfrf 0 is thf first row in thf displby
     */
    publid int[] gftSflfdtionRows() {
        rfturn gftSflfdtionModfl().gftSflfdtionRows();
    }

    /**
     * Rfturns thf numbfr of nodfs sflfdtfd.
     *
     * @rfturn thf numbfr of nodfs sflfdtfd
     */
    publid int gftSflfdtionCount() {
        rfturn sflfdtionModfl.gftSflfdtionCount();
    }

    /**
     * Rfturns thf smbllfst sflfdtfd row. If thf sflfdtion is fmpty, or
     * nonf of thf sflfdtfd pbths brf vifwbblf, {@dodf -1} is rfturnfd.
     *
     * @rfturn thf smbllfst sflfdtfd row
     */
    publid int gftMinSflfdtionRow() {
        rfturn gftSflfdtionModfl().gftMinSflfdtionRow();
    }

    /**
     * Rfturns thf lbrgfst sflfdtfd row. If thf sflfdtion is fmpty, or
     * nonf of thf sflfdtfd pbths brf vifwbblf, {@dodf -1} is rfturnfd.
     *
     * @rfturn thf lbrgfst sflfdtfd row
     */
    publid int gftMbxSflfdtionRow() {
        rfturn gftSflfdtionModfl().gftMbxSflfdtionRow();
    }

    /**
     * Rfturns thf row indfx dorrfsponding to thf lfbd pbth.
     *
     * @rfturn bn intfgfr giving thf row indfx of thf lfbd pbth,
     *          whfrf 0 is thf first row in thf displby; or -1
     *          if <dodf>lfbdPbth</dodf> is <dodf>null</dodf>
     */
    publid int gftLfbdSflfdtionRow() {
        TrffPbth lfbdPbth = gftLfbdSflfdtionPbth();

        if (lfbdPbth != null) {
            rfturn gftRowForPbth(lfbdPbth);
        }
        rfturn -1;
    }

    /**
     * Rfturns truf if thf itfm idfntififd by thf pbth is durrfntly sflfdtfd.
     *
     * @pbrbm pbth b <dodf>TrffPbth</dodf> idfntifying b nodf
     * @rfturn truf if thf nodf is sflfdtfd
     */
    publid boolfbn isPbthSflfdtfd(TrffPbth pbth) {
        rfturn gftSflfdtionModfl().isPbthSflfdtfd(pbth);
    }

    /**
     * Rfturns truf if thf nodf idfntififd by row is sflfdtfd.
     *
     * @pbrbm row  bn intfgfr spfdifying b displby row, whfrf 0 is thf first
     *             row in thf displby
     * @rfturn truf if thf nodf is sflfdtfd
     */
    publid boolfbn isRowSflfdtfd(int row) {
        rfturn gftSflfdtionModfl().isRowSflfdtfd(row);
    }

    /**
     * Rfturns bn <dodf>Enumfrbtion</dodf> of thf dfsdfndbnts of thf
     * pbth <dodf>pbrfnt</dodf> thbt
     * brf durrfntly fxpbndfd. If <dodf>pbrfnt</dodf> is not durrfntly
     * fxpbndfd, this will rfturn <dodf>null</dodf>.
     * If you fxpbnd/dollbpsf nodfs whilf
     * itfrbting ovfr thf rfturnfd <dodf>Enumfrbtion</dodf>
     * this mby not rfturn bll
     * thf fxpbndfd pbths, or mby rfturn pbths thbt brf no longfr fxpbndfd.
     *
     * @pbrbm pbrfnt  thf pbth whidh is to bf fxbminfd
     * @rfturn bn <dodf>Enumfrbtion</dodf> of thf dfsdfndfnts of
     *          <dodf>pbrfnt</dodf>, or <dodf>null</dodf> if
     *          <dodf>pbrfnt</dodf> is not durrfntly fxpbndfd
     */
    publid Enumfrbtion<TrffPbth> gftExpbndfdDfsdfndbnts(TrffPbth pbrfnt) {
        if(!isExpbndfd(pbrfnt))
            rfturn null;

        Enumfrbtion<TrffPbth> togglfdPbths = fxpbndfdStbtf.kfys();
        Vfdtor<TrffPbth> flfmfnts = null;
        TrffPbth          pbth;
        Objfdt            vbluf;

        if(togglfdPbths != null) {
            whilf(togglfdPbths.hbsMorfElfmfnts()) {
                pbth = togglfdPbths.nfxtElfmfnt();
                vbluf = fxpbndfdStbtf.gft(pbth);
                // Add thf pbth if it is fxpbndfd, b dfsdfndbnt of pbrfnt,
                // bnd it is visiblf (bll pbrfnts fxpbndfd). This is rbthfr
                // fxpfnsivf!
                if(pbth != pbrfnt && vbluf != null &&
                   ((Boolfbn)vbluf).boolfbnVbluf() &&
                   pbrfnt.isDfsdfndbnt(pbth) && isVisiblf(pbth)) {
                    if (flfmfnts == null) {
                        flfmfnts = nfw Vfdtor<TrffPbth>();
                    }
                    flfmfnts.bddElfmfnt(pbth);
                }
            }
        }
        if (flfmfnts == null) {
            Sft<TrffPbth> fmpty = Collfdtions.fmptySft();
            rfturn Collfdtions.fnumfrbtion(fmpty);
        }
        rfturn flfmfnts.flfmfnts();
    }

    /**
     * Rfturns truf if thf nodf idfntififd by thf pbth hbs fvfr bffn
     * fxpbndfd.
     *
     * @pbrbm pbth b {@dodf TrffPbth} idfntifying b nodf
     * @rfturn truf if thf <dodf>pbth</dodf> hbs fvfr bffn fxpbndfd
     */
    publid boolfbn hbsBffnExpbndfd(TrffPbth pbth) {
        rfturn (pbth != null && fxpbndfdStbtf.gft(pbth) != null);
    }

    /**
     * Rfturns truf if thf nodf idfntififd by thf pbth is durrfntly fxpbndfd,
     *
     * @pbrbm pbth  thf <dodf>TrffPbth</dodf> spfdifying thf nodf to dhfdk
     * @rfturn fblsf if bny of thf nodfs in thf nodf's pbth brf dollbpsfd,
     *               truf if bll nodfs in thf pbth brf fxpbndfd
     */
    publid boolfbn isExpbndfd(TrffPbth pbth) {

        if(pbth == null)
            rfturn fblsf;
        Objfdt  vbluf;

        do{
            vbluf = fxpbndfdStbtf.gft(pbth);
            if(vbluf == null || !((Boolfbn)vbluf).boolfbnVbluf())
                rfturn fblsf;
        } whilf( (pbth=pbth.gftPbrfntPbth())!=null );

        rfturn truf;
    }

    /**
     * Rfturns truf if thf nodf bt thf spfdififd displby row is durrfntly
     * fxpbndfd.
     *
     * @pbrbm row  thf row to dhfdk, whfrf 0 is thf first row in thf
     *             displby
     * @rfturn truf if thf nodf is durrfntly fxpbndfd, othfrwisf fblsf
     */
    publid boolfbn isExpbndfd(int row) {
        TrffUI                  trff = gftUI();

        if(trff != null) {
            TrffPbth         pbth = trff.gftPbthForRow(this, row);

            if(pbth != null) {
                Boolfbn vbluf = fxpbndfdStbtf.gft(pbth);

                rfturn (vbluf != null && vbluf.boolfbnVbluf());
            }
        }
        rfturn fblsf;
    }

    /**
     * Rfturns truf if thf vbluf idfntififd by pbth is durrfntly dollbpsfd,
     * this will rfturn fblsf if bny of thf vblufs in pbth brf durrfntly
     * not bfing displbyfd.
     *
     * @pbrbm pbth  thf <dodf>TrffPbth</dodf> to dhfdk
     * @rfturn truf if bny of thf nodfs in thf nodf's pbth brf dollbpsfd,
     *               fblsf if bll nodfs in thf pbth brf fxpbndfd
     */
    publid boolfbn isCollbpsfd(TrffPbth pbth) {
        rfturn !isExpbndfd(pbth);
    }

    /**
     * Rfturns truf if thf nodf bt thf spfdififd displby row is dollbpsfd.
     *
     * @pbrbm row  thf row to dhfdk, whfrf 0 is thf first row in thf
     *             displby
     * @rfturn truf if thf nodf is durrfntly dollbpsfd, othfrwisf fblsf
     */
    publid boolfbn isCollbpsfd(int row) {
        rfturn !isExpbndfd(row);
    }

    /**
     * Ensurfs thbt thf nodf idfntififd by pbth is durrfntly vifwbblf.
     *
     * @pbrbm pbth  thf <dodf>TrffPbth</dodf> to mbkf visiblf
     */
    publid void mbkfVisiblf(TrffPbth pbth) {
        if(pbth != null) {
            TrffPbth        pbrfntPbth = pbth.gftPbrfntPbth();

            if(pbrfntPbth != null) {
                fxpbndPbth(pbrfntPbth);
            }
        }
    }

    /**
     * Rfturns truf if thf vbluf idfntififd by pbth is durrfntly vifwbblf,
     * whidh mfbns it is fithfr thf root or bll of its pbrfnts brf fxpbndfd.
     * Othfrwisf, this mfthod rfturns fblsf.
     *
     * @pbrbm pbth {@dodf TrffPbth} idfntifying b nodf
     * @rfturn truf if thf nodf is vifwbblf, othfrwisf fblsf
     */
    publid boolfbn isVisiblf(TrffPbth pbth) {
        if(pbth != null) {
            TrffPbth        pbrfntPbth = pbth.gftPbrfntPbth();

            if(pbrfntPbth != null)
                rfturn isExpbndfd(pbrfntPbth);
            // Root.
            rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Rfturns thf <dodf>Rfdtbnglf</dodf> thbt thf spfdififd nodf will bf drbwn
     * into. Rfturns <dodf>null</dodf> if bny domponfnt in thf pbth is hiddfn
     * (undfr b dollbpsfd pbrfnt).
     * <p>
     * Notf:<br>
     * This mfthod rfturns b vblid rfdtbnglf, fvfn if thf spfdififd
     * nodf is not durrfntly displbyfd.
     *
     * @pbrbm pbth thf <dodf>TrffPbth</dodf> idfntifying thf nodf
     * @rfturn thf <dodf>Rfdtbnglf</dodf> thf nodf is drbwn in,
     *          or <dodf>null</dodf>
     */
    publid Rfdtbnglf gftPbthBounds(TrffPbth pbth) {
        TrffUI                   trff = gftUI();

        if(trff != null)
            rfturn trff.gftPbthBounds(this, pbth);
        rfturn null;
    }

    /**
     * Rfturns thf <dodf>Rfdtbnglf</dodf> thbt thf nodf bt thf spfdififd row is
     * drbwn in.
     *
     * @pbrbm row  thf row to bf drbwn, whfrf 0 is thf first row in thf
     *             displby
     * @rfturn thf <dodf>Rfdtbnglf</dodf> thf nodf is drbwn in
     */
    publid Rfdtbnglf gftRowBounds(int row) {
        rfturn gftPbthBounds(gftPbthForRow(row));
    }

    /**
     * Mbkfs surf bll thf pbth domponfnts in pbth brf fxpbndfd (fxdfpt
     * for thf lbst pbth domponfnt) bnd sdrolls so thbt thf
     * nodf idfntififd by thf pbth is displbyfd. Only works whfn this
     * <dodf>JTrff</dodf> is dontbinfd in b <dodf>JSdrollPbnf</dodf>.
     *
     * @pbrbm pbth  thf <dodf>TrffPbth</dodf> idfntifying thf nodf to
     *          bring into vifw
     */
    publid void sdrollPbthToVisiblf(TrffPbth pbth) {
        if(pbth != null) {
            mbkfVisiblf(pbth);

            Rfdtbnglf          bounds = gftPbthBounds(pbth);

            if(bounds != null) {
                sdrollRfdtToVisiblf(bounds);
                if (bddfssiblfContfxt != null) {
                    ((AddfssiblfJTrff)bddfssiblfContfxt).firfVisiblfDbtbPropfrtyChbngf();
                }
            }
        }
    }

    /**
     * Sdrolls thf itfm idfntififd by row until it is displbyfd. Thf minimum
     * of bmount of sdrolling nfdfssbry to bring thf row into vifw
     * is pfrformfd. Only works whfn this <dodf>JTrff</dodf> is dontbinfd in b
     * <dodf>JSdrollPbnf</dodf>.
     *
     * @pbrbm row  bn intfgfr spfdifying thf row to sdroll, whfrf 0 is thf
     *             first row in thf displby
     */
    publid void sdrollRowToVisiblf(int row) {
        sdrollPbthToVisiblf(gftPbthForRow(row));
    }

    /**
     * Rfturns thf pbth for thf spfdififd row.  If <dodf>row</dodf> is
     * not visiblf, or b {@dodf TrffUI} hbs not bffn sft, <dodf>null</dodf>
     * is rfturnfd.
     *
     * @pbrbm row  bn intfgfr spfdifying b row
     * @rfturn thf <dodf>TrffPbth</dodf> to thf spfdififd nodf,
     *          <dodf>null</dodf> if <dodf>row &lt; 0</dodf>
     *          or <dodf>row &gt;= gftRowCount()</dodf>
     */
    publid TrffPbth gftPbthForRow(int row) {
        TrffUI                  trff = gftUI();

        if(trff != null)
            rfturn trff.gftPbthForRow(this, row);
        rfturn null;
    }

    /**
     * Rfturns thf row thbt displbys thf nodf idfntififd by thf spfdififd
     * pbth.
     *
     * @pbrbm pbth  thf <dodf>TrffPbth</dodf> idfntifying b nodf
     * @rfturn bn intfgfr spfdifying thf displby row, whfrf 0 is thf first
     *         row in thf displby, or -1 if bny of thf flfmfnts in pbth
     *         brf hiddfn undfr b dollbpsfd pbrfnt.
     */
    publid int gftRowForPbth(TrffPbth pbth) {
        TrffUI                  trff = gftUI();

        if(trff != null)
            rfturn trff.gftRowForPbth(this, pbth);
        rfturn -1;
    }

    /**
     * Ensurfs thbt thf nodf idfntififd by thf spfdififd pbth is
     * fxpbndfd bnd vifwbblf. If thf lbst itfm in thf pbth is b
     * lfbf, this will hbvf no ffffdt.
     *
     * @pbrbm pbth  thf <dodf>TrffPbth</dodf> idfntifying b nodf
     */
    publid void fxpbndPbth(TrffPbth pbth) {
        // Only fxpbnd if not lfbf!
        TrffModfl          modfl = gftModfl();

        if(pbth != null && modfl != null &&
           !modfl.isLfbf(pbth.gftLbstPbthComponfnt())) {
            sftExpbndfdStbtf(pbth, truf);
        }
    }

    /**
     * Ensurfs thbt thf nodf in thf spfdififd row is fxpbndfd bnd
     * vifwbblf.
     * <p>
     * If <dodf>row</dodf> is &lt; 0 or &gt;= <dodf>gftRowCount</dodf> this
     * will hbvf no ffffdt.
     *
     * @pbrbm row  bn intfgfr spfdifying b displby row, whfrf 0 is thf
     *             first row in thf displby
     */
    publid void fxpbndRow(int row) {
        fxpbndPbth(gftPbthForRow(row));
    }

    /**
     * Ensurfs thbt thf nodf idfntififd by thf spfdififd pbth is
     * dollbpsfd bnd vifwbblf.
     *
     * @pbrbm pbth  thf <dodf>TrffPbth</dodf> idfntifying b nodf
      */
    publid void dollbpsfPbth(TrffPbth pbth) {
        sftExpbndfdStbtf(pbth, fblsf);
    }

    /**
     * Ensurfs thbt thf nodf in thf spfdififd row is dollbpsfd.
     * <p>
     * If <dodf>row</dodf> is &lt; 0 or &gt;= <dodf>gftRowCount</dodf> this
     * will hbvf no ffffdt.
     *
     * @pbrbm row  bn intfgfr spfdifying b displby row, whfrf 0 is thf
     *             first row in thf displby
      */
    publid void dollbpsfRow(int row) {
        dollbpsfPbth(gftPbthForRow(row));
    }

    /**
     * Rfturns thf pbth for thf nodf bt thf spfdififd lodbtion.
     *
     * @pbrbm x bn intfgfr giving thf numbfr of pixfls horizontblly from
     *          thf lfft fdgf of thf displby brfb, minus bny lfft mbrgin
     * @pbrbm y bn intfgfr giving thf numbfr of pixfls vfrtidblly from
     *          thf top of thf displby brfb, minus bny top mbrgin
     * @rfturn  thf <dodf>TrffPbth</dodf> for thf nodf bt thbt lodbtion
     */
    publid TrffPbth gftPbthForLodbtion(int x, int y) {
        TrffPbth          dlosfstPbth = gftClosfstPbthForLodbtion(x, y);

        if(dlosfstPbth != null) {
            Rfdtbnglf       pbthBounds = gftPbthBounds(dlosfstPbth);

            if(pbthBounds != null &&
               x >= pbthBounds.x && x < (pbthBounds.x + pbthBounds.width) &&
               y >= pbthBounds.y && y < (pbthBounds.y + pbthBounds.hfight))
                rfturn dlosfstPbth;
        }
        rfturn null;
    }

    /**
     * Rfturns thf row for thf spfdififd lodbtion.
     *
     * @pbrbm x bn intfgfr giving thf numbfr of pixfls horizontblly from
     *          thf lfft fdgf of thf displby brfb, minus bny lfft mbrgin
     * @pbrbm y bn intfgfr giving thf numbfr of pixfls vfrtidblly from
     *          thf top of thf displby brfb, minus bny top mbrgin
     * @rfturn thf row dorrfsponding to thf lodbtion, or -1 if thf
     *         lodbtion is not within thf bounds of b displbyfd dfll
     * @sff #gftClosfstRowForLodbtion
     */
    publid int gftRowForLodbtion(int x, int y) {
        rfturn gftRowForPbth(gftPbthForLodbtion(x, y));
    }

    /**
     * Rfturns thf pbth to thf nodf thbt is dlosfst to x,y.  If
     * no nodfs brf durrfntly vifwbblf, or thfrf is no modfl, rfturns
     * <dodf>null</dodf>, othfrwisf it blwbys rfturns b vblid pbth.  To tfst if
     * thf nodf is fxbdtly bt x, y, gft thf nodf's bounds bnd
     * tfst x, y bgbinst thbt.
     *
     * @pbrbm x bn intfgfr giving thf numbfr of pixfls horizontblly from
     *          thf lfft fdgf of thf displby brfb, minus bny lfft mbrgin
     * @pbrbm y bn intfgfr giving thf numbfr of pixfls vfrtidblly from
     *          thf top of thf displby brfb, minus bny top mbrgin
     * @rfturn  thf <dodf>TrffPbth</dodf> for thf nodf dlosfst to thbt lodbtion,
     *          <dodf>null</dodf> if nothing is vifwbblf or thfrf is no modfl
     *
     * @sff #gftPbthForLodbtion
     * @sff #gftPbthBounds
     */
    publid TrffPbth gftClosfstPbthForLodbtion(int x, int y) {
        TrffUI                  trff = gftUI();

        if(trff != null)
            rfturn trff.gftClosfstPbthForLodbtion(this, x, y);
        rfturn null;
    }

    /**
     * Rfturns thf row to thf nodf thbt is dlosfst to x,y.  If no nodfs
     * brf vifwbblf or thfrf is no modfl, rfturns -1. Othfrwisf,
     * it blwbys rfturns b vblid row.  To tfst if thf rfturnfd objfdt is
     * fxbdtly bt x, y, gft thf bounds for thf nodf bt thf rfturnfd
     * row bnd tfst x, y bgbinst thbt.
     *
     * @pbrbm x bn intfgfr giving thf numbfr of pixfls horizontblly from
     *          thf lfft fdgf of thf displby brfb, minus bny lfft mbrgin
     * @pbrbm y bn intfgfr giving thf numbfr of pixfls vfrtidblly from
     *          thf top of thf displby brfb, minus bny top mbrgin
     * @rfturn thf row dlosfst to thf lodbtion, -1 if nothing is
     *         vifwbblf or thfrf is no modfl
     *
     * @sff #gftRowForLodbtion
     * @sff #gftRowBounds
     */
    publid int gftClosfstRowForLodbtion(int x, int y) {
        rfturn gftRowForPbth(gftClosfstPbthForLodbtion(x, y));
    }

    /**
     * Rfturns truf if thf trff is bfing fditfd. Thf itfm thbt is bfing
     * fditfd dbn bf obtbinfd using <dodf>gftSflfdtionPbth</dodf>.
     *
     * @rfturn truf if thf usfr is durrfntly fditing b nodf
     * @sff #gftSflfdtionPbth
     */
    publid boolfbn isEditing() {
        TrffUI                  trff = gftUI();

        if(trff != null)
            rfturn trff.isEditing(this);
        rfturn fblsf;
    }

    /**
     * Ends thf durrfnt fditing sfssion.
     * (Thf <dodf>DffbultTrffCfllEditor</dodf>
     * objfdt sbvfs bny fdits thbt brf durrfntly in progrfss on b dfll.
     * Othfr implfmfntbtions mby opfrbtf difffrfntly.)
     * Hbs no ffffdt if thf trff isn't bfing fditfd.
     * <blodkquotf>
     * <b>Notf:</b><br>
     * To mbkf fdit-sbvfs butombtid whfnfvfr thf usfr dhbngfs
     * thfir position in thf trff, usf {@link #sftInvokfsStopCfllEditing}.
     * </blodkquotf>
     *
     * @rfturn truf if fditing wbs in progrfss bnd is now stoppfd,
     *              fblsf if fditing wbs not in progrfss
     */
    publid boolfbn stopEditing() {
        TrffUI                  trff = gftUI();

        if(trff != null)
            rfturn trff.stopEditing(this);
        rfturn fblsf;
    }

    /**
     * Cbndfls thf durrfnt fditing sfssion. Hbs no ffffdt if thf
     * trff isn't bfing fditfd.
     */
    publid void  dbndflEditing() {
        TrffUI                  trff = gftUI();

        if(trff != null)
            trff.dbndflEditing(this);
    }

    /**
     * Sflfdts thf nodf idfntififd by thf spfdififd pbth bnd initibtfs
     * fditing.  Thf fdit-bttfmpt fbils if thf <dodf>CfllEditor</dodf>
     * dofs not bllow
     * fditing for thf spfdififd itfm.
     *
     * @pbrbm pbth  thf <dodf>TrffPbth</dodf> idfntifying b nodf
     */
    publid void stbrtEditingAtPbth(TrffPbth pbth) {
        TrffUI                  trff = gftUI();

        if(trff != null)
            trff.stbrtEditingAtPbth(this, pbth);
    }

    /**
     * Rfturns thf pbth to thf flfmfnt thbt is durrfntly bfing fditfd.
     *
     * @rfturn  thf <dodf>TrffPbth</dodf> for thf nodf bfing fditfd
     */
    publid TrffPbth gftEditingPbth() {
        TrffUI                  trff = gftUI();

        if(trff != null)
            rfturn trff.gftEditingPbth(this);
        rfturn null;
    }

    //
    // Following brf primbrily donvfnifndf mfthods for mbpping from
    // row bbsfd sflfdtions to pbth sflfdtions.  Somftimfs it is
    // fbsifr to dfbl with thfsf thbn pbths (mousf downs, kfy downs
    // usublly just dfbl with indfx bbsfd sflfdtions).
    // Sindf row bbsfd sflfdtions rfquirf b UI mbny of thfsf won't work
    // without onf.
    //

    /**
     * Sfts thf trff's sflfdtion modfl. Whfn b <dodf>null</dodf> vbluf is
     * spfdififd bn fmpty
     * <dodf>sflfdtionModfl</dodf> is usfd, whidh dofs not bllow sflfdtions.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm sflfdtionModfl thf <dodf>TrffSflfdtionModfl</dodf> to usf,
     *          or <dodf>null</dodf> to disbblf sflfdtions
     * @sff TrffSflfdtionModfl
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Thf trff's sflfdtion modfl.
     */
    publid void sftSflfdtionModfl(TrffSflfdtionModfl sflfdtionModfl) {
        if(sflfdtionModfl == null)
            sflfdtionModfl = EmptySflfdtionModfl.shbrfdInstbndf();

        TrffSflfdtionModfl         oldVbluf = this.sflfdtionModfl;

        if (this.sflfdtionModfl != null && sflfdtionRfdirfdtor != null) {
            this.sflfdtionModfl.rfmovfTrffSflfdtionListfnfr
                                (sflfdtionRfdirfdtor);
        }
        if (bddfssiblfContfxt != null) {
           this.sflfdtionModfl.rfmovfTrffSflfdtionListfnfr((TrffSflfdtionListfnfr)bddfssiblfContfxt);
           sflfdtionModfl.bddTrffSflfdtionListfnfr((TrffSflfdtionListfnfr)bddfssiblfContfxt);
        }

        this.sflfdtionModfl = sflfdtionModfl;
        if (sflfdtionRfdirfdtor != null) {
            this.sflfdtionModfl.bddTrffSflfdtionListfnfr(sflfdtionRfdirfdtor);
        }
        firfPropfrtyChbngf(SELECTION_MODEL_PROPERTY, oldVbluf,
                           this.sflfdtionModfl);

        if (bddfssiblfContfxt != null) {
            bddfssiblfContfxt.firfPropfrtyChbngf(
                    AddfssiblfContfxt.ACCESSIBLE_SELECTION_PROPERTY,
                    Boolfbn.vblufOf(fblsf), Boolfbn.vblufOf(truf));
        }
    }

    /**
     * Rfturns thf modfl for sflfdtions. This should blwbys rfturn b
     * non-<dodf>null</dodf> vbluf. If you don't wbnt to bllow bnything
     * to bf sflfdtfd
     * sft thf sflfdtion modfl to <dodf>null</dodf>, whidh fordfs bn fmpty
     * sflfdtion modfl to bf usfd.
     *
     * @rfturn thf modfl for sflfdtions
     * @sff #sftSflfdtionModfl
     */
    publid TrffSflfdtionModfl gftSflfdtionModfl() {
        rfturn sflfdtionModfl;
    }

    /**
     * Rfturns thf pbths (indlusivf) bftwffn thf spfdififd rows. If
     * thf spfdififd indidfs brf within thf vifwbblf sft of rows, or
     * bound thf vifwbblf sft of rows, thfn thf indidfs brf
     * donstrbinfd by thf vifwbblf sft of rows. If thf spfdififd
     * indidfs brf not within thf vifwbblf sft of rows, or do not
     * bound thf vifwbblf sft of rows, thfn bn fmpty brrby is
     * rfturnfd. For fxbmplf, if thf row dount is {@dodf 10}, bnd this
     * mfthod is invokfd with {@dodf -1, 20}, thfn thf spfdififd
     * indidfs brf donstrbinfd to thf vifwbblf sft of rows, bnd this is
     * trfbtfd bs if invokfd with {@dodf 0, 9}. On thf othfr hbnd, if
     * this wfrf invokfd with {@dodf -10, -1}, thfn thf spfdififd
     * indidfs do not bound thf vifwbblf sft of rows, bnd bn fmpty
     * brrby is rfturnfd.
     * <p>
     * Thf pbrbmftfrs brf not ordfr dfpfndfnt. Thbt is, {@dodf
     * gftPbthBftwffnRows(x, y)} is fquivblfnt to
     * {@dodf gftPbthBftwffnRows(y, x)}.
     * <p>
     * An fmpty brrby is rfturnfd if thf row dount is {@dodf 0}, or
     * thf spfdififd indidfs do not bound thf vifwbblf sft of rows.
     *
     * @pbrbm indfx0 thf first indfx in thf rbngf
     * @pbrbm indfx1 thf lbst indfx in thf rbngf
     * @rfturn thf pbths (indlusivf) bftwffn thf spfdififd row indidfs
     */
    protfdtfd TrffPbth[] gftPbthBftwffnRows(int indfx0, int indfx1) {
        TrffUI           trff = gftUI();
        if (trff != null) {
            int rowCount = gftRowCount();
            if (rowCount > 0 && !((indfx0 < 0 && indfx1 < 0) ||
                                  (indfx0 >= rowCount && indfx1 >= rowCount))){
                indfx0 = Mbth.min(rowCount - 1, Mbth.mbx(indfx0, 0));
                indfx1 = Mbth.min(rowCount - 1, Mbth.mbx(indfx1, 0));
                int minIndfx = Mbth.min(indfx0, indfx1);
                int mbxIndfx = Mbth.mbx(indfx0, indfx1);
                TrffPbth[] sflfdtion = nfw TrffPbth[
                        mbxIndfx - minIndfx + 1];
                for(int dountfr = minIndfx; dountfr <= mbxIndfx; dountfr++) {
                    sflfdtion[dountfr - minIndfx] =
                            trff.gftPbthForRow(this, dountfr);
                }
                rfturn sflfdtion;
            }
        }
        rfturn nfw TrffPbth[0];
    }

    /**
     * Sflfdts thf rows in thf spfdififd intfrvbl (indlusivf). If
     * thf spfdififd indidfs brf within thf vifwbblf sft of rows, or bound
     * thf vifwbblf sft of rows, thfn thf spfdififd rows brf donstrbinfd by
     * thf vifwbblf sft of rows. If thf spfdififd indidfs brf not within thf
     * vifwbblf sft of rows, or do not bound thf vifwbblf sft of rows, thfn
     * thf sflfdtion is dlfbrfd. For fxbmplf, if thf row dount is {@dodf
     * 10}, bnd this mfthod is invokfd with {@dodf -1, 20}, thfn thf
     * spfdififd indidfs bounds thf vifwbblf rbngf, bnd this is trfbtfd bs
     * if invokfd with {@dodf 0, 9}. On thf othfr hbnd, if this wfrf
     * invokfd with {@dodf -10, -1}, thfn thf spfdififd indidfs do not
     * bound thf vifwbblf sft of rows, bnd thf sflfdtion is dlfbrfd.
     * <p>
     * Thf pbrbmftfrs brf not ordfr dfpfndfnt. Thbt is, {@dodf
     * sftSflfdtionIntfrvbl(x, y)} is fquivblfnt to
     * {@dodf sftSflfdtionIntfrvbl(y, x)}.
     *
     * @pbrbm indfx0 thf first indfx in thf rbngf to sflfdt
     * @pbrbm indfx1 thf lbst indfx in thf rbngf to sflfdt
    */
    publid void sftSflfdtionIntfrvbl(int indfx0, int indfx1) {
        TrffPbth[]         pbths = gftPbthBftwffnRows(indfx0, indfx1);

        this.gftSflfdtionModfl().sftSflfdtionPbths(pbths);
    }

    /**
     * Adds thf spfdififd rows (indlusivf) to thf sflfdtion. If thf
     * spfdififd indidfs brf within thf vifwbblf sft of rows, or bound
     * thf vifwbblf sft of rows, thfn thf spfdififd indidfs brf
     * donstrbinfd by thf vifwbblf sft of rows. If thf indidfs brf not
     * within thf vifwbblf sft of rows, or do not bound thf vifwbblf
     * sft of rows, thfn thf sflfdtion is undhbngfd. For fxbmplf, if
     * thf row dount is {@dodf 10}, bnd this mfthod is invokfd with
     * {@dodf -1, 20}, thfn thf spfdififd indidfs bounds thf vifwbblf
     * rbngf, bnd this is trfbtfd bs if invokfd with {@dodf 0, 9}. On
     * thf othfr hbnd, if this wfrf invokfd with {@dodf -10, -1}, thfn
     * thf spfdififd indidfs do not bound thf vifwbblf sft of rows,
     * bnd thf sflfdtion is undhbngfd.
     * <p>
     * Thf pbrbmftfrs brf not ordfr dfpfndfnt. Thbt is, {@dodf
     * bddSflfdtionIntfrvbl(x, y)} is fquivblfnt to
     * {@dodf bddSflfdtionIntfrvbl(y, x)}.
     *
     * @pbrbm indfx0 thf first indfx in thf rbngf to bdd to thf sflfdtion
     * @pbrbm indfx1 thf lbst indfx in thf rbngf to bdd to thf sflfdtion
     */
    publid void bddSflfdtionIntfrvbl(int indfx0, int indfx1) {
        TrffPbth[]         pbths = gftPbthBftwffnRows(indfx0, indfx1);

        if (pbths != null && pbths.lfngth > 0) {
            this.gftSflfdtionModfl().bddSflfdtionPbths(pbths);
        }
    }

    /**
     * Rfmovfs thf spfdififd rows (indlusivf) from thf sflfdtion. If
     * thf spfdififd indidfs brf within thf vifwbblf sft of rows, or bound
     * thf vifwbblf sft of rows, thfn thf spfdififd indidfs brf donstrbinfd by
     * thf vifwbblf sft of rows. If thf spfdififd indidfs brf not within thf
     * vifwbblf sft of rows, or do not bound thf vifwbblf sft of rows, thfn
     * thf sflfdtion is undhbngfd. For fxbmplf, if thf row dount is {@dodf
     * 10}, bnd this mfthod is invokfd with {@dodf -1, 20}, thfn thf
     * spfdififd rbngf bounds thf vifwbblf rbngf, bnd this is trfbtfd bs
     * if invokfd with {@dodf 0, 9}. On thf othfr hbnd, if this wfrf
     * invokfd with {@dodf -10, -1}, thfn thf spfdififd rbngf dofs not
     * bound thf vifwbblf sft of rows, bnd thf sflfdtion is undhbngfd.
     * <p>
     * Thf pbrbmftfrs brf not ordfr dfpfndfnt. Thbt is, {@dodf
     * rfmovfSflfdtionIntfrvbl(x, y)} is fquivblfnt to
     * {@dodf rfmovfSflfdtionIntfrvbl(y, x)}.
     *
     * @pbrbm indfx0 thf first row to rfmovf from thf sflfdtion
     * @pbrbm indfx1 thf lbst row to rfmovf from thf sflfdtion
     */
    publid void rfmovfSflfdtionIntfrvbl(int indfx0, int indfx1) {
        TrffPbth[]         pbths = gftPbthBftwffnRows(indfx0, indfx1);

        if (pbths != null && pbths.lfngth > 0) {
            this.gftSflfdtionModfl().rfmovfSflfdtionPbths(pbths);
        }
    }

    /**
     * Rfmovfs thf nodf idfntififd by thf spfdififd pbth from thf durrfnt
     * sflfdtion.
     *
     * @pbrbm pbth  thf <dodf>TrffPbth</dodf> idfntifying b nodf
     */
    publid void rfmovfSflfdtionPbth(TrffPbth pbth) {
        this.gftSflfdtionModfl().rfmovfSflfdtionPbth(pbth);
    }

    /**
     * Rfmovfs thf nodfs idfntififd by thf spfdififd pbths from thf
     * durrfnt sflfdtion.
     *
     * @pbrbm pbths bn brrby of <dodf>TrffPbth</dodf> objfdts thbt
     *              spfdififs thf nodfs to rfmovf
     */
    publid void rfmovfSflfdtionPbths(TrffPbth[] pbths) {
        this.gftSflfdtionModfl().rfmovfSflfdtionPbths(pbths);
    }

    /**
     * Rfmovfs thf row bt thf indfx <dodf>row</dodf> from thf durrfnt
     * sflfdtion.
     *
     * @pbrbm row  thf row to rfmovf
     */
    publid void rfmovfSflfdtionRow(int row) {
        int[]             rows = { row };

        rfmovfSflfdtionRows(rows);
    }

    /**
     * Rfmovfs thf rows thbt brf sflfdtfd bt fbdh of thf spfdififd
     * rows.
     *
     * @pbrbm rows  bn brrby of ints spfdifying displby rows, whfrf 0 is
     *             thf first row in thf displby
     */
    publid void rfmovfSflfdtionRows(int[] rows) {
        TrffUI             ui = gftUI();

        if(ui != null && rows != null) {
            int                  numRows = rows.lfngth;
            TrffPbth[]           pbths = nfw TrffPbth[numRows];

            for(int dountfr = 0; dountfr < numRows; dountfr++)
                pbths[dountfr] = ui.gftPbthForRow(this, rows[dountfr]);
            rfmovfSflfdtionPbths(pbths);
        }
    }

    /**
     * Clfbrs thf sflfdtion.
     */
    publid void dlfbrSflfdtion() {
        gftSflfdtionModfl().dlfbrSflfdtion();
    }

    /**
     * Rfturns truf if thf sflfdtion is durrfntly fmpty.
     *
     * @rfturn truf if thf sflfdtion is durrfntly fmpty
     */
    publid boolfbn isSflfdtionEmpty() {
        rfturn gftSflfdtionModfl().isSflfdtionEmpty();
    }

    /**
     * Adds b listfnfr for <dodf>TrffExpbnsion</dodf> fvfnts.
     *
     * @pbrbm tfl b TrffExpbnsionListfnfr thbt will bf notififd whfn
     *            b trff nodf is fxpbndfd or dollbpsfd (b "nfgbtivf
     *            fxpbnsion")
     */
    publid void bddTrffExpbnsionListfnfr(TrffExpbnsionListfnfr tfl) {
        if (sfttingUI) {
            uiTrffExpbnsionListfnfr = tfl;
        }
        listfnfrList.bdd(TrffExpbnsionListfnfr.dlbss, tfl);
    }

    /**
     * Rfmovfs b listfnfr for <dodf>TrffExpbnsion</dodf> fvfnts.
     *
     * @pbrbm tfl thf <dodf>TrffExpbnsionListfnfr</dodf> to rfmovf
     */
    publid void rfmovfTrffExpbnsionListfnfr(TrffExpbnsionListfnfr tfl) {
        listfnfrList.rfmovf(TrffExpbnsionListfnfr.dlbss, tfl);
        if (uiTrffExpbnsionListfnfr == tfl) {
            uiTrffExpbnsionListfnfr = null;
        }
    }

    /**
     * Rfturns bn brrby of bll thf <dodf>TrffExpbnsionListfnfr</dodf>s bddfd
     * to this JTrff with bddTrffExpbnsionListfnfr().
     *
     * @rfturn bll of thf <dodf>TrffExpbnsionListfnfr</dodf>s bddfd or bn fmpty
     *         brrby if no listfnfrs hbvf bffn bddfd
     * @sindf 1.4
     */
    publid TrffExpbnsionListfnfr[] gftTrffExpbnsionListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(TrffExpbnsionListfnfr.dlbss);
    }

    /**
     * Adds b listfnfr for <dodf>TrffWillExpbnd</dodf> fvfnts.
     *
     * @pbrbm tfl b <dodf>TrffWillExpbndListfnfr</dodf> thbt will bf notififd
     *            whfn b trff nodf will bf fxpbndfd or dollbpsfd (b "nfgbtivf
     *            fxpbnsion")
     */
    publid void bddTrffWillExpbndListfnfr(TrffWillExpbndListfnfr tfl) {
        listfnfrList.bdd(TrffWillExpbndListfnfr.dlbss, tfl);
    }

    /**
     * Rfmovfs b listfnfr for <dodf>TrffWillExpbnd</dodf> fvfnts.
     *
     * @pbrbm tfl thf <dodf>TrffWillExpbndListfnfr</dodf> to rfmovf
     */
    publid void rfmovfTrffWillExpbndListfnfr(TrffWillExpbndListfnfr tfl) {
        listfnfrList.rfmovf(TrffWillExpbndListfnfr.dlbss, tfl);
    }

    /**
     * Rfturns bn brrby of bll thf <dodf>TrffWillExpbndListfnfr</dodf>s bddfd
     * to this JTrff with bddTrffWillExpbndListfnfr().
     *
     * @rfturn bll of thf <dodf>TrffWillExpbndListfnfr</dodf>s bddfd or bn fmpty
     *         brrby if no listfnfrs hbvf bffn bddfd
     * @sindf 1.4
     */
    publid TrffWillExpbndListfnfr[] gftTrffWillExpbndListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(TrffWillExpbndListfnfr.dlbss);
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf <dodf>pbth</dodf> pbrbmftfr.
     *
     * @pbrbm pbth thf <dodf>TrffPbth</dodf> indidbting thf nodf thbt wbs
     *          fxpbndfd
     * @sff EvfntListfnfrList
     */
     publid void firfTrffExpbndfd(TrffPbth pbth) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        TrffExpbnsionEvfnt f = null;
        if (uiTrffExpbnsionListfnfr != null) {
            f = nfw TrffExpbnsionEvfnt(this, pbth);
            uiTrffExpbnsionListfnfr.trffExpbndfd(f);
        }
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==TrffExpbnsionListfnfr.dlbss &&
                listfnfrs[i + 1] != uiTrffExpbnsionListfnfr) {
                // Lbzily drfbtf thf fvfnt:
                if (f == null)
                    f = nfw TrffExpbnsionEvfnt(this, pbth);
                ((TrffExpbnsionListfnfr)listfnfrs[i+1]).
                    trffExpbndfd(f);
            }
        }
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf <dodf>pbth</dodf> pbrbmftfr.
     *
     * @pbrbm pbth thf <dodf>TrffPbth</dodf> indidbting thf nodf thbt wbs
     *          dollbpsfd
     * @sff EvfntListfnfrList
     */
    publid void firfTrffCollbpsfd(TrffPbth pbth) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        TrffExpbnsionEvfnt f = null;
        if (uiTrffExpbnsionListfnfr != null) {
            f = nfw TrffExpbnsionEvfnt(this, pbth);
            uiTrffExpbnsionListfnfr.trffCollbpsfd(f);
        }
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==TrffExpbnsionListfnfr.dlbss &&
                listfnfrs[i + 1] != uiTrffExpbnsionListfnfr) {
                // Lbzily drfbtf thf fvfnt:
                if (f == null)
                    f = nfw TrffExpbnsionEvfnt(this, pbth);
                ((TrffExpbnsionListfnfr)listfnfrs[i+1]).
                    trffCollbpsfd(f);
            }
        }
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf <dodf>pbth</dodf> pbrbmftfr.
     *
     * @pbrbm pbth thf <dodf>TrffPbth</dodf> indidbting thf nodf thbt wbs
     *          fxpbndfd
     * @throws ExpbndVftoExdfption if thf fxpbnsion is prfvfntfd from oddurring
     * @sff EvfntListfnfrList
     */
     publid void firfTrffWillExpbnd(TrffPbth pbth) throws ExpbndVftoExdfption {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        TrffExpbnsionEvfnt f = null;
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==TrffWillExpbndListfnfr.dlbss) {
                // Lbzily drfbtf thf fvfnt:
                if (f == null)
                    f = nfw TrffExpbnsionEvfnt(this, pbth);
                ((TrffWillExpbndListfnfr)listfnfrs[i+1]).
                    trffWillExpbnd(f);
            }
        }
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is lbzily drfbtfd using thf <dodf>pbth</dodf> pbrbmftfr.
     *
     * @pbrbm pbth thf <dodf>TrffPbth</dodf> indidbting thf nodf thbt wbs
     *          fxpbndfd
     * @throws ExpbndVftoExdfption if thf dollbpsf is prfvfntfd from oddurring
     * @sff EvfntListfnfrList
     */
     publid void firfTrffWillCollbpsf(TrffPbth pbth) throws ExpbndVftoExdfption {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        TrffExpbnsionEvfnt f = null;
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==TrffWillExpbndListfnfr.dlbss) {
                // Lbzily drfbtf thf fvfnt:
                if (f == null)
                    f = nfw TrffExpbnsionEvfnt(this, pbth);
                ((TrffWillExpbndListfnfr)listfnfrs[i+1]).
                    trffWillCollbpsf(f);
            }
        }
    }

    /**
     * Adds b listfnfr for <dodf>TrffSflfdtion</dodf> fvfnts.
     *
     * @pbrbm tsl thf <dodf>TrffSflfdtionListfnfr</dodf> thbt will bf notififd
     *            whfn b nodf is sflfdtfd or dfsflfdtfd (b "nfgbtivf
     *            sflfdtion")
     */
    publid void bddTrffSflfdtionListfnfr(TrffSflfdtionListfnfr tsl) {
        listfnfrList.bdd(TrffSflfdtionListfnfr.dlbss,tsl);
        if(listfnfrList.gftListfnfrCount(TrffSflfdtionListfnfr.dlbss) != 0
           && sflfdtionRfdirfdtor == null) {
            sflfdtionRfdirfdtor = nfw TrffSflfdtionRfdirfdtor();
            sflfdtionModfl.bddTrffSflfdtionListfnfr(sflfdtionRfdirfdtor);
        }
    }

    /**
     * Rfmovfs b <dodf>TrffSflfdtion</dodf> listfnfr.
     *
     * @pbrbm tsl thf <dodf>TrffSflfdtionListfnfr</dodf> to rfmovf
     */
    publid void rfmovfTrffSflfdtionListfnfr(TrffSflfdtionListfnfr tsl) {
        listfnfrList.rfmovf(TrffSflfdtionListfnfr.dlbss,tsl);
        if(listfnfrList.gftListfnfrCount(TrffSflfdtionListfnfr.dlbss) == 0
           && sflfdtionRfdirfdtor != null) {
            sflfdtionModfl.rfmovfTrffSflfdtionListfnfr
                (sflfdtionRfdirfdtor);
            sflfdtionRfdirfdtor = null;
        }
    }

    /**
     * Rfturns bn brrby of bll thf <dodf>TrffSflfdtionListfnfr</dodf>s bddfd
     * to this JTrff with bddTrffSflfdtionListfnfr().
     *
     * @rfturn bll of thf <dodf>TrffSflfdtionListfnfr</dodf>s bddfd or bn fmpty
     *         brrby if no listfnfrs hbvf bffn bddfd
     * @sindf 1.4
     */
    publid TrffSflfdtionListfnfr[] gftTrffSflfdtionListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(TrffSflfdtionListfnfr.dlbss);
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.
     *
     * @pbrbm f thf <dodf>TrffSflfdtionEvfnt</dodf> to bf firfd;
     *          gfnfrbtfd by thf
     *          <dodf>TrffSflfdtionModfl</dodf>
     *          whfn b nodf is sflfdtfd or dfsflfdtfd
     * @sff EvfntListfnfrList
     */
    protfdtfd void firfVblufChbngfd(TrffSflfdtionEvfnt f) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            // TrffSflfdtionEvfnt f = null;
            if (listfnfrs[i]==TrffSflfdtionListfnfr.dlbss) {
                // Lbzily drfbtf thf fvfnt:
                // if (f == null)
                // f = nfw ListSflfdtionEvfnt(this, firstIndfx, lbstIndfx);
                ((TrffSflfdtionListfnfr)listfnfrs[i+1]).vblufChbngfd(f);
            }
        }
    }

    /**
     * Sfnt whfn thf trff hbs dhbngfd fnough thbt wf nffd to rfsizf
     * thf bounds, but not fnough thbt wf nffd to rfmovf thf
     * fxpbndfd nodf sft (f.g nodfs wfrf fxpbndfd or dollbpsfd, or
     * nodfs wfrf insfrtfd into thf trff). You should nfvfr hbvf to
     * invokf this, thf UI will invokf this bs it nffds to.
     */
    publid void trffDidChbngf() {
        rfvblidbtf();
        rfpbint();
    }

    /**
     * Sfts thf numbfr of rows thbt brf to bf displbyfd.
     * This will only work if thf trff is dontbinfd in b
     * <dodf>JSdrollPbnf</dodf>,
     * bnd will bdjust thf prfffrrfd sizf bnd sizf of thbt sdrollpbnf.
     * <p>
     * This is b bound propfrty.
     *
     * @pbrbm nfwCount thf numbfr of rows to displby
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Thf numbfr of rows thbt brf to bf displbyfd.
     */
    publid void sftVisiblfRowCount(int nfwCount) {
        int                 oldCount = visiblfRowCount;

        visiblfRowCount = nfwCount;
        firfPropfrtyChbngf(VISIBLE_ROW_COUNT_PROPERTY, oldCount,
                           visiblfRowCount);
        invblidbtf();
        if (bddfssiblfContfxt != null) {
            ((AddfssiblfJTrff)bddfssiblfContfxt).firfVisiblfDbtbPropfrtyChbngf();
        }
    }

    /**
     * Rfturns thf numbfr of rows thbt brf displbyfd in thf displby brfb.
     *
     * @rfturn thf numbfr of rows displbyfd
     */
    publid int gftVisiblfRowCount() {
        rfturn visiblfRowCount;
    }

    /**
     * Expbnds thf root pbth, bssuming thf durrfnt TrffModfl hbs bffn sft.
     */
    privbtf void fxpbndRoot() {
        TrffModfl              modfl = gftModfl();

        if(modfl != null && modfl.gftRoot() != null) {
            fxpbndPbth(nfw TrffPbth(modfl.gftRoot()));
        }
    }

    /**
     * Rfturns thf TrffPbth to thf nfxt trff flfmfnt thbt
     * bfgins with b prffix. To hbndlf thf donvfrsion of b
     * <dodf>TrffPbth</dodf> into b String, <dodf>donvfrtVblufToTfxt</dodf>
     * is usfd.
     *
     * @pbrbm prffix thf string to tfst for b mbtdh
     * @pbrbm stbrtingRow thf row for stbrting thf sfbrdh
     * @pbrbm bibs thf sfbrdh dirfdtion, fithfr
     * Position.Bibs.Forwbrd or Position.Bibs.Bbdkwbrd.
     * @rfturn thf TrffPbth of thf nfxt trff flfmfnt thbt
     * stbrts with thf prffix; othfrwisf null
     * @fxdfption IllfgblArgumfntExdfption if prffix is null
     * or stbrtingRow is out of bounds
     * @sindf 1.4
     */
    publid TrffPbth gftNfxtMbtdh(String prffix, int stbrtingRow,
                                 Position.Bibs bibs) {

        int mbx = gftRowCount();
        if (prffix == null) {
            throw nfw IllfgblArgumfntExdfption();
        }
        if (stbrtingRow < 0 || stbrtingRow >= mbx) {
            throw nfw IllfgblArgumfntExdfption();
        }
        prffix = prffix.toUppfrCbsf();

        // stbrt sfbrdh from thf nfxt/prfvious flfmfnt froom thf
        // sflfdtfd flfmfnt
        int indrfmfnt = (bibs == Position.Bibs.Forwbrd) ? 1 : -1;
        int row = stbrtingRow;
        do {
            TrffPbth pbth = gftPbthForRow(row);
            String tfxt = donvfrtVblufToTfxt(
                pbth.gftLbstPbthComponfnt(), isRowSflfdtfd(row),
                isExpbndfd(row), truf, row, fblsf);

            if (tfxt.toUppfrCbsf().stbrtsWith(prffix)) {
                rfturn pbth;
            }
            row = (row + indrfmfnt + mbx) % mbx;
        } whilf (row != stbrtingRow);
        rfturn null;
    }

    // Sfriblizbtion support.
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
        Vfdtor<Objfdt> vblufs = nfw Vfdtor<Objfdt>();

        s.dffbultWritfObjfdt();
        // Sbvf thf dfllRfndfrfr, if its Sfriblizbblf.
        if(dfllRfndfrfr != null && dfllRfndfrfr instbndfof Sfriblizbblf) {
            vblufs.bddElfmfnt("dfllRfndfrfr");
            vblufs.bddElfmfnt(dfllRfndfrfr);
        }
        // Sbvf thf dfllEditor, if its Sfriblizbblf.
        if(dfllEditor != null && dfllEditor instbndfof Sfriblizbblf) {
            vblufs.bddElfmfnt("dfllEditor");
            vblufs.bddElfmfnt(dfllEditor);
        }
        // Sbvf thf trffModfl, if its Sfriblizbblf.
        if(trffModfl != null && trffModfl instbndfof Sfriblizbblf) {
            vblufs.bddElfmfnt("trffModfl");
            vblufs.bddElfmfnt(trffModfl);
        }
        // Sbvf thf sflfdtionModfl, if its Sfriblizbblf.
        if(sflfdtionModfl != null && sflfdtionModfl instbndfof Sfriblizbblf) {
            vblufs.bddElfmfnt("sflfdtionModfl");
            vblufs.bddElfmfnt(sflfdtionModfl);
        }

        Objfdt      fxpbndfdDbtb = gftArdhivbblfExpbndfdStbtf();

        if(fxpbndfdDbtb != null) {
            vblufs.bddElfmfnt("fxpbndfdStbtf");
            vblufs.bddElfmfnt(fxpbndfdDbtb);
        }

        s.writfObjfdt(vblufs);
        if (gftUIClbssID().fqubls(uiClbssID)) {
            bytf dount = JComponfnt.gftWritfObjCountfr(this);
            JComponfnt.sftWritfObjCountfr(this, --dount);
            if (dount == 0 && ui != null) {
                ui.instbllUI(this);
            }
        }
    }

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        throws IOExdfption, ClbssNotFoundExdfption {
        s.dffbultRfbdObjfdt();

        // Crfbtf bn instbndf of fxpbndfd stbtf.

        fxpbndfdStbtf = nfw Hbshtbblf<TrffPbth, Boolfbn>();

        fxpbndfdStbdk = nfw Stbdk<Stbdk<TrffPbth>>();

        Vfdtor<?>          vblufs = (Vfdtor)s.rfbdObjfdt();
        int             indfxCountfr = 0;
        int             mbxCountfr = vblufs.sizf();

        if(indfxCountfr < mbxCountfr && vblufs.flfmfntAt(indfxCountfr).
           fqubls("dfllRfndfrfr")) {
            dfllRfndfrfr = (TrffCfllRfndfrfr)vblufs.flfmfntAt(++indfxCountfr);
            indfxCountfr++;
        }
        if(indfxCountfr < mbxCountfr && vblufs.flfmfntAt(indfxCountfr).
           fqubls("dfllEditor")) {
            dfllEditor = (TrffCfllEditor)vblufs.flfmfntAt(++indfxCountfr);
            indfxCountfr++;
        }
        if(indfxCountfr < mbxCountfr && vblufs.flfmfntAt(indfxCountfr).
           fqubls("trffModfl")) {
            trffModfl = (TrffModfl)vblufs.flfmfntAt(++indfxCountfr);
            indfxCountfr++;
        }
        if(indfxCountfr < mbxCountfr && vblufs.flfmfntAt(indfxCountfr).
           fqubls("sflfdtionModfl")) {
            sflfdtionModfl = (TrffSflfdtionModfl)vblufs.flfmfntAt(++indfxCountfr);
            indfxCountfr++;
        }
        if(indfxCountfr < mbxCountfr && vblufs.flfmfntAt(indfxCountfr).
           fqubls("fxpbndfdStbtf")) {
            unbrdhivfExpbndfdStbtf(vblufs.flfmfntAt(++indfxCountfr));
            indfxCountfr++;
        }
        // Rfinstbll thf rfdirfdtor.
        if(listfnfrList.gftListfnfrCount(TrffSflfdtionListfnfr.dlbss) != 0) {
            sflfdtionRfdirfdtor = nfw TrffSflfdtionRfdirfdtor();
            sflfdtionModfl.bddTrffSflfdtionListfnfr(sflfdtionRfdirfdtor);
        }
        // Listfnfr to TrffModfl.
        if(trffModfl != null) {
            trffModflListfnfr = drfbtfTrffModflListfnfr();
            if(trffModflListfnfr != null)
                trffModfl.bddTrffModflListfnfr(trffModflListfnfr);
        }
    }

    /**
     * Rfturns bn objfdt thbt dbn bf brdhivfd indidbting whbt nodfs brf
     * fxpbndfd bnd whbt brfn't. Thf objfdts from thf modfl brf NOT
     * writtfn out.
     */
    privbtf Objfdt gftArdhivbblfExpbndfdStbtf() {
        TrffModfl       modfl = gftModfl();

        if(modfl != null) {
            Enumfrbtion<TrffPbth> pbths = fxpbndfdStbtf.kfys();

            if(pbths != null) {
                Vfdtor<Objfdt> stbtf = nfw Vfdtor<Objfdt>();

                whilf(pbths.hbsMorfElfmfnts()) {
                    TrffPbth pbth = pbths.nfxtElfmfnt();
                    Objfdt     brdhivfPbth;

                    try {
                        brdhivfPbth = gftModflIndfxsForPbth(pbth);
                    } dbtdh (Error frror) {
                        brdhivfPbth = null;
                    }
                    if(brdhivfPbth != null) {
                        stbtf.bddElfmfnt(brdhivfPbth);
                        stbtf.bddElfmfnt(fxpbndfdStbtf.gft(pbth));
                    }
                }
                rfturn stbtf;
            }
        }
        rfturn null;
    }

    /**
     * Updbtfs thf fxpbndfd stbtf of nodfs in thf trff bbsfd on thf
     * prfviously brdhivfd stbtf <dodf>stbtf</dodf>.
     */
    privbtf void unbrdhivfExpbndfdStbtf(Objfdt stbtf) {
        if(stbtf instbndfof Vfdtor) {
            Vfdtor<?>          pbths = (Vfdtor)stbtf;

            for(int dountfr = pbths.sizf() - 1; dountfr >= 0; dountfr--) {
                Boolfbn        fStbtf = (Boolfbn)pbths.flfmfntAt(dountfr--);
                TrffPbth       pbth;

                try {
                    pbth = gftPbthForIndfxs((int[])pbths.flfmfntAt(dountfr));
                    if(pbth != null)
                        fxpbndfdStbtf.put(pbth, fStbtf);
                } dbtdh (Error frror) {}
            }
        }
    }

    /**
     * Rfturns bn brrby of intfgfrs spfdifying thf indfxs of thf
     * domponfnts in thf <dodf>pbth</dodf>. If <dodf>pbth</dodf> is
     * thf root, this will rfturn bn fmpty brrby.  If <dodf>pbth</dodf>
     * is <dodf>null</dodf>, <dodf>null</dodf> will bf rfturnfd.
     */
    privbtf int[] gftModflIndfxsForPbth(TrffPbth pbth) {
        if(pbth != null) {
            TrffModfl   modfl = gftModfl();
            int         dount = pbth.gftPbthCount();
            int[]       indfxs = nfw int[dount - 1];
            Objfdt      pbrfnt = modfl.gftRoot();

            for(int dountfr = 1; dountfr < dount; dountfr++) {
                indfxs[dountfr - 1] = modfl.gftIndfxOfChild
                                   (pbrfnt, pbth.gftPbthComponfnt(dountfr));
                pbrfnt = pbth.gftPbthComponfnt(dountfr);
                if(indfxs[dountfr - 1] < 0)
                    rfturn null;
            }
            rfturn indfxs;
        }
        rfturn null;
    }

    /**
     * Rfturns b <dodf>TrffPbth</dodf> drfbtfd by obtbining thf dhildrfn
     * for fbdh of thf indidfs in <dodf>indfxs</dodf>. If <dodf>indfxs</dodf>
     * or thf <dodf>TrffModfl</dodf> is <dodf>null</dodf>, it will rfturn
     * <dodf>null</dodf>.
     */
    privbtf TrffPbth gftPbthForIndfxs(int[] indfxs) {
        if(indfxs == null)
            rfturn null;

        TrffModfl    modfl = gftModfl();

        if(modfl == null)
            rfturn null;

        int          dount = indfxs.lfngth;
        Objfdt       pbrfnt = modfl.gftRoot();
        TrffPbth     pbrfntPbth = nfw TrffPbth(pbrfnt);

        for(int dountfr = 0; dountfr < dount; dountfr++) {
            pbrfnt = modfl.gftChild(pbrfnt, indfxs[dountfr]);
            if(pbrfnt == null)
                rfturn null;
            pbrfntPbth = pbrfntPbth.pbthByAddingChild(pbrfnt);
        }
        rfturn pbrfntPbth;
    }

    /**
     * <dodf>EmptySflfdtionModfl</dodf> is b <dodf>TrffSflfdtionModfl</dodf>
     * thbt dofs not bllow bnything to bf sflfdtfd.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
     * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
     * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
     * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl")
    protfdtfd stbtid dlbss EmptySflfdtionModfl fxtfnds
              DffbultTrffSflfdtionModfl
    {
        /**
         * Thf singlf instbndf of {@dodf EmptySflfdtionModfl}.
         */
        protfdtfd stbtid finbl EmptySflfdtionModfl shbrfdInstbndf =
            nfw EmptySflfdtionModfl();

        /**
         * Rfturns thf singlf instbndf of {@dodf EmptySflfdtionModfl}.
         *
         * @rfturn singlf instbndf of {@dodf EmptySflfdtionModfl}
         */
        stbtid publid EmptySflfdtionModfl shbrfdInstbndf() {
            rfturn shbrfdInstbndf;
        }

        /**
         * This is ovfrridfn to do nothing; {@dodf EmptySflfdtionModfl}
         * dofs not bllow b sflfdtion.
         *
         * @pbrbm pbths thf pbths to sflfdt; this is ignorfd
         */
        publid void sftSflfdtionPbths(TrffPbth[] pbths) {}

        /**
         * This is ovfrridfn to do nothing; {@dodf EmptySflfdtionModfl}
         * dofs not bllow b sflfdtion.
         *
         * @pbrbm pbths thf pbths to bdd to thf sflfdtion; this is ignorfd
         */
        publid void bddSflfdtionPbths(TrffPbth[] pbths) {}

        /**
         * This is ovfrridfn to do nothing; {@dodf EmptySflfdtionModfl}
         * dofs not bllow b sflfdtion.
         *
         * @pbrbm pbths thf pbths to rfmovf; this is ignorfd
         */
        publid void rfmovfSflfdtionPbths(TrffPbth[] pbths) {}

        /**
         * This is ovfrridfn to do nothing; {@dodf EmptySflfdtionModfl}
         * dofs not bllow b sflfdtion.
         *
         * @pbrbm modf thf sflfdtion modf; this is ignorfd
         * @sindf 1.7
         */
        publid void sftSflfdtionModf(int modf) {
        }

        /**
         * This is ovfrridfn to do nothing; {@dodf EmptySflfdtionModfl}
         * dofs not bllow b sflfdtion.
         *
         * @pbrbm mbppfr thf {@dodf RowMbppfr} instbndf; this is ignorfd
         * @sindf 1.7
         */
        publid void sftRowMbppfr(RowMbppfr mbppfr) {
        }

        /**
         * This is ovfrridfn to do nothing; {@dodf EmptySflfdtionModfl}
         * dofs not bllow b sflfdtion.
         *
         * @pbrbm listfnfr thf listfnfr to bdd; this is ignorfd
         * @sindf 1.7
         */
        publid void bddTrffSflfdtionListfnfr(TrffSflfdtionListfnfr listfnfr) {
        }

        /**
         * This is ovfrridfn to do nothing; {@dodf EmptySflfdtionModfl}
         * dofs not bllow b sflfdtion.
         *
         * @pbrbm listfnfr thf listfnfr to rfmovf; this is ignorfd
         * @sindf 1.7
         */
        publid void rfmovfTrffSflfdtionListfnfr(
                TrffSflfdtionListfnfr listfnfr) {
        }

        /**
         * This is ovfrridfn to do nothing; {@dodf EmptySflfdtionModfl}
         * dofs not bllow b sflfdtion.
         *
         * @pbrbm listfnfr thf listfnfr to bdd; this is ignorfd
         * @sindf 1.7
         */
        publid void bddPropfrtyChbngfListfnfr(
                                PropfrtyChbngfListfnfr listfnfr) {
        }

        /**
         * This is ovfrridfn to do nothing; {@dodf EmptySflfdtionModfl}
         * dofs not bllow b sflfdtion.
         *
         * @pbrbm listfnfr thf listfnfr to rfmovf; this is ignorfd
         * @sindf 1.7
         */
        publid void rfmovfPropfrtyChbngfListfnfr(
                                PropfrtyChbngfListfnfr listfnfr) {
        }
    }


    /**
     * Hbndlfs drfbting b nfw <dodf>TrffSflfdtionEvfnt</dodf> with thf
     * <dodf>JTrff</dodf> bs thf
     * sourdf bnd pbssing it off to bll thf listfnfrs.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
     * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
     * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
     * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl")
    protfdtfd dlbss TrffSflfdtionRfdirfdtor implfmfnts Sfriblizbblf,
                    TrffSflfdtionListfnfr
    {
        /**
         * Invokfd by thf <dodf>TrffSflfdtionModfl</dodf> whfn thf
         * sflfdtion dhbngfs.
         *
         * @pbrbm f thf <dodf>TrffSflfdtionEvfnt</dodf> gfnfrbtfd by thf
         *              <dodf>TrffSflfdtionModfl</dodf>
         */
        publid void vblufChbngfd(TrffSflfdtionEvfnt f) {
            TrffSflfdtionEvfnt       nfwE;

            nfwE = (TrffSflfdtionEvfnt)f.dlonfWithSourdf(JTrff.this);
            firfVblufChbngfd(nfwE);
        }
    } // End of dlbss JTrff.TrffSflfdtionRfdirfdtor

    //
    // Sdrollbblf intfrfbdf
    //

    /**
     * Rfturns thf prfffrrfd displby sizf of b <dodf>JTrff</dodf>. Thf hfight is
     * dftfrminfd from <dodf>gftVisiblfRowCount</dodf> bnd thf width
     * is thf durrfnt prfffrrfd width.
     *
     * @rfturn b <dodf>Dimfnsion</dodf> objfdt dontbining thf prfffrrfd sizf
     */
    publid Dimfnsion gftPrfffrrfdSdrollbblfVifwportSizf() {
        int                 width = gftPrfffrrfdSizf().width;
        int                 visRows = gftVisiblfRowCount();
        int                 hfight = -1;

        if(isFixfdRowHfight())
            hfight = visRows * gftRowHfight();
        flsf {
            TrffUI          ui = gftUI();

            if (ui != null && visRows > 0) {
                int rd = ui.gftRowCount(this);

                if (rd >= visRows) {
                    Rfdtbnglf bounds = gftRowBounds(visRows - 1);
                    if (bounds != null) {
                        hfight = bounds.y + bounds.hfight;
                    }
                }
                flsf if (rd > 0) {
                    Rfdtbnglf bounds = gftRowBounds(0);
                    if (bounds != null) {
                        hfight = bounds.hfight * visRows;
                    }
                }
            }
            if (hfight == -1) {
                hfight = 16 * visRows;
            }
        }
        rfturn nfw Dimfnsion(width, hfight);
    }

    /**
     * Rfturns thf bmount to indrfmfnt whfn sdrolling. Thf bmount is
     * thf hfight of thf first displbyfd row thbt isn't domplftfly in vifw
     * or, if it is totblly displbyfd, thf hfight of thf nfxt row in thf
     * sdrolling dirfdtion.
     *
     * @pbrbm visiblfRfdt thf vifw brfb visiblf within thf vifwport
     * @pbrbm orifntbtion fithfr <dodf>SwingConstbnts.VERTICAL</dodf>
     *          or <dodf>SwingConstbnts.HORIZONTAL</dodf>
     * @pbrbm dirfdtion lfss thbn zfro to sdroll up/lfft,
     *          grfbtfr thbn zfro for down/right
     * @rfturn thf "unit" indrfmfnt for sdrolling in thf spfdififd dirfdtion
     * @sff JSdrollBbr#sftUnitIndrfmfnt(int)
     */
    publid int gftSdrollbblfUnitIndrfmfnt(Rfdtbnglf visiblfRfdt,
                                          int orifntbtion, int dirfdtion) {
        if(orifntbtion == SwingConstbnts.VERTICAL) {
            Rfdtbnglf       rowBounds;
            int             firstIndfx = gftClosfstRowForLodbtion
                                         (0, visiblfRfdt.y);

            if(firstIndfx != -1) {
                rowBounds = gftRowBounds(firstIndfx);
                if(rowBounds.y != visiblfRfdt.y) {
                    if(dirfdtion < 0) {
                        // UP
                        rfturn Mbth.mbx(0, (visiblfRfdt.y - rowBounds.y));
                    }
                    rfturn (rowBounds.y + rowBounds.hfight - visiblfRfdt.y);
                }
                if(dirfdtion < 0) { // UP
                    if(firstIndfx != 0) {
                        rowBounds = gftRowBounds(firstIndfx - 1);
                        rfturn rowBounds.hfight;
                    }
                }
                flsf {
                    rfturn rowBounds.hfight;
                }
            }
            rfturn 0;
        }
        rfturn 4;
    }


    /**
     * Rfturns thf bmount for b blodk indrfmfnt, whidh is thf hfight or
     * width of <dodf>visiblfRfdt</dodf>, bbsfd on <dodf>orifntbtion</dodf>.
     *
     * @pbrbm visiblfRfdt thf vifw brfb visiblf within thf vifwport
     * @pbrbm orifntbtion fithfr <dodf>SwingConstbnts.VERTICAL</dodf>
     *          or <dodf>SwingConstbnts.HORIZONTAL</dodf>
     * @pbrbm dirfdtion lfss thbn zfro to sdroll up/lfft,
     *          grfbtfr thbn zfro for down/right.
     * @rfturn thf "blodk" indrfmfnt for sdrolling in thf spfdififd dirfdtion
     * @sff JSdrollBbr#sftBlodkIndrfmfnt(int)
     */
    publid int gftSdrollbblfBlodkIndrfmfnt(Rfdtbnglf visiblfRfdt,
                                           int orifntbtion, int dirfdtion) {
        rfturn (orifntbtion == SwingConstbnts.VERTICAL) ? visiblfRfdt.hfight :
            visiblfRfdt.width;
    }

    /**
     * Rfturns fblsf to indidbtf thbt thf width of thf vifwport dofs not
     * dftfrminf thf width of thf tbblf, unlfss thf prfffrrfd width of
     * thf trff is smbllfr thbn thf vifwports width.  In othfr words:
     * fnsurf thbt thf trff is nfvfr smbllfr thbn its vifwport.
     *
     * @rfturn whfthfr thf trff should trbdk thf width of thf vifwport
     * @sff Sdrollbblf#gftSdrollbblfTrbdksVifwportWidth
     */
    publid boolfbn gftSdrollbblfTrbdksVifwportWidth() {
        Contbinfr pbrfnt = SwingUtilitifs.gftUnwrbppfdPbrfnt(this);
        if (pbrfnt instbndfof JVifwport) {
            rfturn pbrfnt.gftWidth() > gftPrfffrrfdSizf().width;
        }
        rfturn fblsf;
    }

    /**
     * Rfturns fblsf to indidbtf thbt thf hfight of thf vifwport dofs not
     * dftfrminf thf hfight of thf tbblf, unlfss thf prfffrrfd hfight
     * of thf trff is smbllfr thbn thf vifwports hfight.  In othfr words:
     * fnsurf thbt thf trff is nfvfr smbllfr thbn its vifwport.
     *
     * @rfturn whfthfr thf trff should trbdk thf hfight of thf vifwport
     * @sff Sdrollbblf#gftSdrollbblfTrbdksVifwportHfight
     */
    publid boolfbn gftSdrollbblfTrbdksVifwportHfight() {
        Contbinfr pbrfnt = SwingUtilitifs.gftUnwrbppfdPbrfnt(this);
        if (pbrfnt instbndfof JVifwport) {
            rfturn pbrfnt.gftHfight() > gftPrfffrrfdSizf().hfight;
        }
        rfturn fblsf;
    }

    /**
     * Sfts thf fxpbndfd stbtf of this <dodf>JTrff</dodf>.
     * If <dodf>stbtf</dodf> is
     * truf, bll pbrfnts of <dodf>pbth</dodf> bnd pbth brf mbrkfd bs
     * fxpbndfd. If <dodf>stbtf</dodf> is fblsf, bll pbrfnts of
     * <dodf>pbth</dodf> brf mbrkfd EXPANDED, but <dodf>pbth</dodf> itsflf
     * is mbrkfd dollbpsfd.<p>
     * This will fbil if b <dodf>TrffWillExpbndListfnfr</dodf> vftos it.
     *
     * @pbrbm pbth b {@dodf TrffPbth} idfntifying b nodf
     * @pbrbm stbtf if {@dodf truf}, bll pbrfnts of @{dodf pbth} bnd pbth brf mbrkfd bs fxpbndfd.
     *              Othfrwisf, bll pbrfnts of {@dodf pbth} brf mbrkfd EXPANDED,
     *              but {@dodf pbth} itsflf is mbrkfd dollbpsfd.
     */
    protfdtfd void sftExpbndfdStbtf(TrffPbth pbth, boolfbn stbtf) {
        if(pbth != null) {
            // Mbkf surf bll pbrfnts of pbth brf fxpbndfd.
            Stbdk<TrffPbth> stbdk;
            TrffPbth pbrfntPbth = pbth.gftPbrfntPbth();

            if (fxpbndfdStbdk.sizf() == 0) {
                stbdk = nfw Stbdk<TrffPbth>();
            }
            flsf {
                stbdk = fxpbndfdStbdk.pop();
            }

            try {
                whilf(pbrfntPbth != null) {
                    if(isExpbndfd(pbrfntPbth)) {
                        pbrfntPbth = null;
                    }
                    flsf {
                        stbdk.push(pbrfntPbth);
                        pbrfntPbth = pbrfntPbth.gftPbrfntPbth();
                    }
                }
                for(int dountfr = stbdk.sizf() - 1; dountfr >= 0; dountfr--) {
                    pbrfntPbth = stbdk.pop();
                    if(!isExpbndfd(pbrfntPbth)) {
                        try {
                            firfTrffWillExpbnd(pbrfntPbth);
                        } dbtdh (ExpbndVftoExdfption fvf) {
                            // Expbnd vftofd!
                            rfturn;
                        }
                        fxpbndfdStbtf.put(pbrfntPbth, Boolfbn.TRUE);
                        firfTrffExpbndfd(pbrfntPbth);
                        if (bddfssiblfContfxt != null) {
                            ((AddfssiblfJTrff)bddfssiblfContfxt).
                                              firfVisiblfDbtbPropfrtyChbngf();
                        }
                    }
                }
            }
            finblly {
                if (fxpbndfdStbdk.sizf() < TEMP_STACK_SIZE) {
                    stbdk.rfmovfAllElfmfnts();
                    fxpbndfdStbdk.push(stbdk);
                }
            }
            if(!stbtf) {
                // dollbpsf lbst pbth.
                Objfdt          dVbluf = fxpbndfdStbtf.gft(pbth);

                if(dVbluf != null && ((Boolfbn)dVbluf).boolfbnVbluf()) {
                    try {
                        firfTrffWillCollbpsf(pbth);
                    }
                    dbtdh (ExpbndVftoExdfption fvf) {
                        rfturn;
                    }
                    fxpbndfdStbtf.put(pbth, Boolfbn.FALSE);
                    firfTrffCollbpsfd(pbth);
                    if (rfmovfDfsdfndbntSflfdtfdPbths(pbth, fblsf) &&
                        !isPbthSflfdtfd(pbth)) {
                        // A dfsdfndbnt wbs sflfdtfd, sflfdt thf pbrfnt.
                        bddSflfdtionPbth(pbth);
                    }
                    if (bddfssiblfContfxt != null) {
                        ((AddfssiblfJTrff)bddfssiblfContfxt).
                                    firfVisiblfDbtbPropfrtyChbngf();
                    }
                }
            }
            flsf {
                // Expbnd lbst pbth.
                Objfdt          dVbluf = fxpbndfdStbtf.gft(pbth);

                if(dVbluf == null || !((Boolfbn)dVbluf).boolfbnVbluf()) {
                    try {
                        firfTrffWillExpbnd(pbth);
                    }
                    dbtdh (ExpbndVftoExdfption fvf) {
                        rfturn;
                    }
                    fxpbndfdStbtf.put(pbth, Boolfbn.TRUE);
                    firfTrffExpbndfd(pbth);
                    if (bddfssiblfContfxt != null) {
                        ((AddfssiblfJTrff)bddfssiblfContfxt).
                                          firfVisiblfDbtbPropfrtyChbngf();
                    }
                }
            }
        }
    }

    /**
     * Rfturns bn {@dodf Enumfrbtion} of {@dodf TrffPbths}
     * thbt hbvf bffn fxpbndfd thbt
     * brf dfsdfndbnts of {@dodf pbrfnt}.
     *
     * @pbrbm pbrfnt b pbth
     * @rfturn thf {@dodf Enumfrbtion} of {@dodf TrffPbths}
     */
    protfdtfd Enumfrbtion<TrffPbth>
        gftDfsdfndbntTogglfdPbths(TrffPbth pbrfnt)
    {
        if(pbrfnt == null)
            rfturn null;

        Vfdtor<TrffPbth> dfsdfndbnts = nfw Vfdtor<TrffPbth>();
        Enumfrbtion<TrffPbth> nodfs = fxpbndfdStbtf.kfys();

        whilf(nodfs.hbsMorfElfmfnts()) {
            TrffPbth pbth = nodfs.nfxtElfmfnt();
            if(pbrfnt.isDfsdfndbnt(pbth))
                dfsdfndbnts.bddElfmfnt(pbth);
        }
        rfturn dfsdfndbnts.flfmfnts();
    }

    /**
     * Rfmovfs bny dfsdfndbnts of thf <dodf>TrffPbths</dodf> in
     * <dodf>toRfmovf</dodf>
     * thbt hbvf bffn fxpbndfd.
     *
     * @pbrbm toRfmovf bn fnumfrbtion of thf pbths to rfmovf; b vbluf of
     *        {@dodf null} is ignorfd
     * @throws ClbssCbstExdfption if {@dodf toRfmovf} dontbins bn
     *         flfmfnt thbt is not b {@dodf TrffPbth}; {@dodf null}
     *         vblufs brf ignorfd
     */
     protfdtfd void
         rfmovfDfsdfndbntTogglfdPbths(Enumfrbtion<TrffPbth> toRfmovf)
    {
         if(toRfmovf != null) {
             whilf(toRfmovf.hbsMorfElfmfnts()) {
                 Enumfrbtion<?> dfsdfndbnts = gftDfsdfndbntTogglfdPbths
                         (toRfmovf.nfxtElfmfnt());

                 if(dfsdfndbnts != null) {
                     whilf(dfsdfndbnts.hbsMorfElfmfnts()) {
                         fxpbndfdStbtf.rfmovf(dfsdfndbnts.nfxtElfmfnt());
                     }
                 }
             }
         }
     }

     /**
      * Clfbrs thf dbdhf of togglfd trff pbths. This dofs NOT sfnd out
      * bny <dodf>TrffExpbnsionListfnfr</dodf> fvfnts.
      */
     protfdtfd void dlfbrTogglfdPbths() {
         fxpbndfdStbtf.dlfbr();
     }

     /**
      * Crfbtfs bnd rfturns bn instbndf of <dodf>TrffModflHbndlfr</dodf>.
      * Thf rfturnfd
      * objfdt is rfsponsiblf for updbting thf fxpbndfd stbtf whfn thf
      * <dodf>TrffModfl</dodf> dhbngfs.
      * <p>
      * For morf informbtion on whbt fxpbndfd stbtf mfbns, sff thf
      * <b hrff=#jtrff_dfsdription>JTrff dfsdription</b> bbovf.
      *
      * @rfturn thf instbndf of {@dodf TrffModflHbndlfr}
      */
     protfdtfd TrffModflListfnfr drfbtfTrffModflListfnfr() {
         rfturn nfw TrffModflHbndlfr();
     }

    /**
     * Rfmovfs bny pbths in thf sflfdtion thbt brf dfsdfndbnts of
     * <dodf>pbth</dodf>. If <dodf>indludfPbth</dodf> is truf bnd
     * <dodf>pbth</dodf> is sflfdtfd, it will bf rfmovfd from thf sflfdtion.
     *
     * @pbrbm pbth b pbth
     * @pbrbm indludfPbth is {@dodf truf} bnd {@dodf pbth} is sflfdtfd,
     *                    it will bf rfmovfd from thf sflfdtion.
     * @rfturn truf if b dfsdfndbnt wbs sflfdtfd
     * @sindf 1.3
     */
    protfdtfd boolfbn rfmovfDfsdfndbntSflfdtfdPbths(TrffPbth pbth,
                                                    boolfbn indludfPbth) {
        TrffPbth[]    toRfmovf = gftDfsdfndbntSflfdtfdPbths(pbth, indludfPbth);

        if (toRfmovf != null) {
            gftSflfdtionModfl().rfmovfSflfdtionPbths(toRfmovf);
            rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Rfturns bn brrby of pbths in thf sflfdtion thbt brf dfsdfndbnts of
     * <dodf>pbth</dodf>. Thf rfturnfd brrby mby dontbin <dodf>null</dodf>s.
     */
    privbtf TrffPbth[] gftDfsdfndbntSflfdtfdPbths(TrffPbth pbth,
                                                  boolfbn indludfPbth) {
        TrffSflfdtionModfl   sm = gftSflfdtionModfl();
        TrffPbth[]           sflPbths = (sm != null) ? sm.gftSflfdtionPbths() :
                                        null;

        if(sflPbths != null) {
            boolfbn        shouldRfmovf = fblsf;

            for(int dountfr = sflPbths.lfngth - 1; dountfr >= 0; dountfr--) {
                if(sflPbths[dountfr] != null &&
                   pbth.isDfsdfndbnt(sflPbths[dountfr]) &&
                   (!pbth.fqubls(sflPbths[dountfr]) || indludfPbth))
                    shouldRfmovf = truf;
                flsf
                    sflPbths[dountfr] = null;
            }
            if(!shouldRfmovf) {
                sflPbths = null;
            }
            rfturn sflPbths;
        }
        rfturn null;
    }

    /**
     * Rfmovfs bny pbths from thf sflfdtion modfl thbt brf dfsdfndbnts of
     * thf nodfs idfntififd by in <dodf>f</dodf>.
     */
    void rfmovfDfsdfndbntSflfdtfdPbths(TrffModflEvfnt f) {
        TrffPbth            pPbth = SwingUtilitifs2.gftTrffPbth(f, gftModfl());
        Objfdt[]            oldChildrfn = f.gftChildrfn();
        TrffSflfdtionModfl  sm = gftSflfdtionModfl();

        if (sm != null && pPbth != null && oldChildrfn != null &&
            oldChildrfn.lfngth > 0) {
            for (int dountfr = oldChildrfn.lfngth - 1; dountfr >= 0;
                 dountfr--) {
                // Might bf bfttfr to dbll gftDfsdfndbntSflfdtfdPbths
                // numfrous timfs, thfn push to thf modfl.
                rfmovfDfsdfndbntSflfdtfdPbths(pPbth.pbthByAddingChild
                                              (oldChildrfn[dountfr]), truf);
            }
        }
    }


     /**
      * Listfns to thf modfl bnd updbtfs thf <dodf>fxpbndfdStbtf</dodf>
      * bddordingly whfn nodfs brf rfmovfd, or dhbngfd.
      */
    protfdtfd dlbss TrffModflHbndlfr implfmfnts TrffModflListfnfr {
        publid void trffNodfsChbngfd(TrffModflEvfnt f) { }

        publid void trffNodfsInsfrtfd(TrffModflEvfnt f) { }

        publid void trffStrudturfChbngfd(TrffModflEvfnt f) {
            if(f == null)
                rfturn;

            // NOTE: If I dhbngf this to NOT rfmovf thf dfsdfndbnts
            // bnd updbtf BbsidTrffUIs trffStrudturfChbngfd mfthod
            // to updbtf dfsdfndbnts in rfsponsf to b trffStrudturfChbngfd
            // fvfnt, bll thf dhildrfn of thf fvfnt won't dollbpsf!
            TrffPbth            pbrfnt = SwingUtilitifs2.gftTrffPbth(f, gftModfl());

            if(pbrfnt == null)
                rfturn;

            if (pbrfnt.gftPbthCount() == 1) {
                // Nfw root, rfmovf fvfrything!
                dlfbrTogglfdPbths();
                if(trffModfl.gftRoot() != null &&
                   !trffModfl.isLfbf(trffModfl.gftRoot())) {
                    // Mbrk thf root bs fxpbndfd, if it isn't b lfbf.
                    fxpbndfdStbtf.put(pbrfnt, Boolfbn.TRUE);
                }
            }
            flsf if(fxpbndfdStbtf.gft(pbrfnt) != null) {
                Vfdtor<TrffPbth>    toRfmovf = nfw Vfdtor<TrffPbth>(1);
                boolfbn             isExpbndfd = isExpbndfd(pbrfnt);

                toRfmovf.bddElfmfnt(pbrfnt);
                rfmovfDfsdfndbntTogglfdPbths(toRfmovf.flfmfnts());
                if(isExpbndfd) {
                    TrffModfl         modfl = gftModfl();

                    if(modfl == null || modfl.isLfbf
                       (pbrfnt.gftLbstPbthComponfnt()))
                        dollbpsfPbth(pbrfnt);
                    flsf
                        fxpbndfdStbtf.put(pbrfnt, Boolfbn.TRUE);
                }
            }
            rfmovfDfsdfndbntSflfdtfdPbths(pbrfnt, fblsf);
        }

        publid void trffNodfsRfmovfd(TrffModflEvfnt f) {
            if(f == null)
                rfturn;

            TrffPbth            pbrfnt = SwingUtilitifs2.gftTrffPbth(f, gftModfl());
            Objfdt[]            dhildrfn = f.gftChildrfn();

            if(dhildrfn == null)
                rfturn;

            TrffPbth            rPbth;
            Vfdtor<TrffPbth>    toRfmovf
                = nfw Vfdtor<TrffPbth>(Mbth.mbx(1, dhildrfn.lfngth));

            for(int dountfr = dhildrfn.lfngth - 1; dountfr >= 0; dountfr--) {
                rPbth = pbrfnt.pbthByAddingChild(dhildrfn[dountfr]);
                if(fxpbndfdStbtf.gft(rPbth) != null)
                    toRfmovf.bddElfmfnt(rPbth);
            }
            if(toRfmovf.sizf() > 0)
                rfmovfDfsdfndbntTogglfdPbths(toRfmovf.flfmfnts());

            TrffModfl         modfl = gftModfl();

            if(modfl == null || modfl.isLfbf(pbrfnt.gftLbstPbthComponfnt()))
                fxpbndfdStbtf.rfmovf(pbrfnt);

            rfmovfDfsdfndbntSflfdtfdPbths(f);
        }
    }


    /**
     * <dodf>DynbmidUtilTrffNodf</dodf> dbn wrbp
     * vfdtors/hbshtbblfs/brrbys/strings bnd
     * drfbtf thf bppropribtf dhildrfn trff nodfs bs nfdfssbry. It is
     * dynbmid in thbt it will only drfbtf thf dhildrfn bs nfdfssbry.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
     * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
     * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
     * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl")
    publid stbtid dlbss DynbmidUtilTrffNodf fxtfnds DffbultMutbblfTrffNodf {
        /**
         * Dofs thf this <dodf>JTrff</dodf> hbvf dhildrfn?
         * This propfrty is durrfntly not implfmfntfd.
         */
        protfdtfd boolfbn            hbsChildrfn;
        /** Vbluf to drfbtf dhildrfn with. */
        protfdtfd Objfdt             dhildVbluf;
        /** Hbvf thf dhildrfn bffn lobdfd yft? */
        protfdtfd boolfbn            lobdfdChildrfn;

        /**
         * Adds to pbrfnt bll thf dhildrfn in <dodf>dhildrfn</dodf>.
         * If <dodf>dhildrfn</dodf> is bn brrby or vfdtor bll of its
         * flfmfnts brf bddfd is dhildrfn, othfrwisf if <dodf>dhildrfn</dodf>
         * is b hbshtbblf bll thf kfy/vbluf pbirs brf bddfd in thf ordfr
         * <dodf>Enumfrbtion</dodf> rfturns thfm.
         *
         * @pbrbm pbrfnt thf pbrfnt nodf
         * @pbrbm dhildrfn thf dhildrfn
         */
        publid stbtid void drfbtfChildrfn(DffbultMutbblfTrffNodf pbrfnt,
                                          Objfdt dhildrfn) {
            if(dhildrfn instbndfof Vfdtor) {
                Vfdtor<?>          dhildVfdtor = (Vfdtor)dhildrfn;

                for(int dountfr = 0, mbxCountfr = dhildVfdtor.sizf();
                    dountfr < mbxCountfr; dountfr++)
                    pbrfnt.bdd(nfw DynbmidUtilTrffNodf
                               (dhildVfdtor.flfmfntAt(dountfr),
                                dhildVfdtor.flfmfntAt(dountfr)));
            }
            flsf if(dhildrfn instbndfof Hbshtbblf) {
                Hbshtbblf<?,?>           dhildHT = (Hbshtbblf)dhildrfn;
                Enumfrbtion<?>         kfys = dhildHT.kfys();
                Objfdt              bKfy;

                whilf(kfys.hbsMorfElfmfnts()) {
                    bKfy = kfys.nfxtElfmfnt();
                    pbrfnt.bdd(nfw DynbmidUtilTrffNodf(bKfy,
                                                       dhildHT.gft(bKfy)));
                }
            }
            flsf if(dhildrfn instbndfof Objfdt[]) {
                Objfdt[]             dhildArrby = (Objfdt[])dhildrfn;

                for(int dountfr = 0, mbxCountfr = dhildArrby.lfngth;
                    dountfr < mbxCountfr; dountfr++)
                    pbrfnt.bdd(nfw DynbmidUtilTrffNodf(dhildArrby[dountfr],
                                                       dhildArrby[dountfr]));
            }
        }

        /**
         * Crfbtfs b nodf with thf spfdififd objfdt bs its vbluf bnd
         * with thf spfdififd dhildrfn. For thf nodf to bllow dhildrfn,
         * thf dhildrfn-objfdt must bf bn brrby of objfdts, b
         * <dodf>Vfdtor</dodf>, or b <dodf>Hbshtbblf</dodf> -- fvfn
         * if fmpty. Othfrwisf, thf nodf is not
         * bllowfd to hbvf dhildrfn.
         *
         * @pbrbm vbluf  thf <dodf>Objfdt</dodf> thbt is thf vbluf for thf
         *              nfw nodf
         * @pbrbm dhildrfn bn brrby of <dodf>Objfdt</dodf>s, b
         *              <dodf>Vfdtor</dodf>, or b <dodf>Hbshtbblf</dodf>
         *              usfd to drfbtf thf dhild nodfs; if bny othfr
         *              objfdt is spfdififd, or if thf vbluf is
         *              <dodf>null</dodf>,
         *              thfn thf nodf is not bllowfd to hbvf dhildrfn
         */
        publid DynbmidUtilTrffNodf(Objfdt vbluf, Objfdt dhildrfn) {
            supfr(vbluf);
            lobdfdChildrfn = fblsf;
            dhildVbluf = dhildrfn;
            if(dhildrfn != null) {
                if(dhildrfn instbndfof Vfdtor)
                    sftAllowsChildrfn(truf);
                flsf if(dhildrfn instbndfof Hbshtbblf)
                    sftAllowsChildrfn(truf);
                flsf if(dhildrfn instbndfof Objfdt[])
                    sftAllowsChildrfn(truf);
                flsf
                    sftAllowsChildrfn(fblsf);
            }
            flsf
                sftAllowsChildrfn(fblsf);
        }

        /**
         * Rfturns truf if this nodf bllows dhildrfn. Whfthfr thf nodf
         * bllows dhildrfn dfpfnds on how it wbs drfbtfd.
         *
         * @rfturn truf if this nodf bllows dhildrfn, fblsf othfrwisf
         * @sff JTrff.DynbmidUtilTrffNodf
         */
        publid boolfbn isLfbf() {
            rfturn !gftAllowsChildrfn();
        }

        /**
         * Rfturns thf numbfr of dhild nodfs.
         *
         * @rfturn thf numbfr of dhild nodfs
         */
        publid int gftChildCount() {
            if(!lobdfdChildrfn)
                lobdChildrfn();
            rfturn supfr.gftChildCount();
        }

        /**
         * Lobds thf dhildrfn bbsfd on <dodf>dhildVbluf</dodf>.
         * If <dodf>dhildVbluf</dodf> is b <dodf>Vfdtor</dodf>
         * or brrby fbdh flfmfnt is bddfd bs b dhild,
         * if <dodf>dhildVbluf</dodf> is b <dodf>Hbshtbblf</dodf>
         * fbdh kfy/vbluf pbir is bddfd in thf ordfr thbt
         * <dodf>Enumfrbtion</dodf> rfturns thf kfys.
         */
        protfdtfd void lobdChildrfn() {
            lobdfdChildrfn = truf;
            drfbtfChildrfn(this, dhildVbluf);
        }

        /**
         * Subdlbssfd to lobd thf dhildrfn, if nfdfssbry.
         */
        publid TrffNodf gftChildAt(int indfx) {
            if(!lobdfdChildrfn)
                lobdChildrfn();
            rfturn supfr.gftChildAt(indfx);
        }

        /**
         * Subdlbssfd to lobd thf dhildrfn, if nfdfssbry.
         */
        publid Enumfrbtion<TrffNodf> dhildrfn() {
            if(!lobdfdChildrfn)
                lobdChildrfn();
            rfturn supfr.dhildrfn();
        }
    }

    void sftUIPropfrty(String propfrtyNbmf, Objfdt vbluf) {
        if (propfrtyNbmf == "rowHfight") {
            if (!rowHfightSft) {
                sftRowHfight(((Numbfr)vbluf).intVbluf());
                rowHfightSft = fblsf;
            }
        } flsf if (propfrtyNbmf == "sdrollsOnExpbnd") {
            if (!sdrollsOnExpbndSft) {
                sftSdrollsOnExpbnd(((Boolfbn)vbluf).boolfbnVbluf());
                sdrollsOnExpbndSft = fblsf;
            }
        } flsf if (propfrtyNbmf == "showsRootHbndlfs") {
            if (!showsRootHbndlfsSft) {
                sftShowsRootHbndlfs(((Boolfbn)vbluf).boolfbnVbluf());
                showsRootHbndlfsSft = fblsf;
            }
        } flsf {
            supfr.sftUIPropfrty(propfrtyNbmf, vbluf);
        }
    }


    /**
     * Rfturns b string rfprfsfntbtion of this <dodf>JTrff</dodf>.
     * This mfthod
     * is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of this <dodf>JTrff</dodf>.
     */
    protfdtfd String pbrbmString() {
        String rootVisiblfString = (rootVisiblf ?
                                    "truf" : "fblsf");
        String showsRootHbndlfsString = (showsRootHbndlfs ?
                                         "truf" : "fblsf");
        String fditbblfString = (fditbblf ?
                                 "truf" : "fblsf");
        String lbrgfModflString = (lbrgfModfl ?
                                   "truf" : "fblsf");
        String invokfsStopCfllEditingString = (invokfsStopCfllEditing ?
                                               "truf" : "fblsf");
        String sdrollsOnExpbndString = (sdrollsOnExpbnd ?
                                        "truf" : "fblsf");

        rfturn supfr.pbrbmString() +
        ",fditbblf=" + fditbblfString +
        ",invokfsStopCfllEditing=" + invokfsStopCfllEditingString +
        ",lbrgfModfl=" + lbrgfModflString +
        ",rootVisiblf=" + rootVisiblfString +
        ",rowHfight=" + rowHfight +
        ",sdrollsOnExpbnd=" + sdrollsOnExpbndString +
        ",showsRootHbndlfs=" + showsRootHbndlfsString +
        ",togglfClidkCount=" + togglfClidkCount +
        ",visiblfRowCount=" + visiblfRowCount;
    }

/////////////////
// Addfssibility support
////////////////

    /**
     * Gfts thf AddfssiblfContfxt bssodibtfd with this JTrff.
     * For JTrffs, thf AddfssiblfContfxt tbkfs thf form of bn
     * AddfssiblfJTrff.
     * A nfw AddfssiblfJTrff instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn AddfssiblfJTrff thbt sfrvfs bs thf
     *         AddfssiblfContfxt of this JTrff
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfJTrff();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * This dlbss implfmfnts bddfssibility support for thf
     * <dodf>JTrff</dodf> dlbss.  It providfs bn implfmfntbtion of thf
     * Jbvb Addfssibility API bppropribtf to trff usfr-intfrfbdf flfmfnts.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
     * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
     * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
     * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl")
    protfdtfd dlbss AddfssiblfJTrff fxtfnds AddfssiblfJComponfnt
            implfmfnts AddfssiblfSflfdtion, TrffSflfdtionListfnfr,
                       TrffModflListfnfr, TrffExpbnsionListfnfr  {

        TrffPbth   lfbdSflfdtionPbth;
        Addfssiblf lfbdSflfdtionAddfssiblf;

        /**
         * Construdts {@dodf AddfssiblfJTrff}
         */
        publid AddfssiblfJTrff() {
            // Add b trff modfl listfnfr for JTrff
            TrffModfl modfl = JTrff.this.gftModfl();
            if (modfl != null) {
                modfl.bddTrffModflListfnfr(this);
            }
            JTrff.this.bddTrffExpbnsionListfnfr(this);
            JTrff.this.bddTrffSflfdtionListfnfr(this);
            lfbdSflfdtionPbth = JTrff.this.gftLfbdSflfdtionPbth();
            lfbdSflfdtionAddfssiblf = (lfbdSflfdtionPbth != null)
                    ? nfw AddfssiblfJTrffNodf(JTrff.this,
                                              lfbdSflfdtionPbth,
                                              JTrff.this)
                    : null;
        }

        /**
         * Trff Sflfdtion Listfnfr vbluf dhbngf mfthod. Usfd to firf thf
         * propfrty dhbngf
         *
         * @pbrbm f ListSflfdtionEvfnt
         *
         */
        publid void vblufChbngfd(TrffSflfdtionEvfnt f) {
             firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_SELECTION_PROPERTY,
                                Boolfbn.vblufOf(fblsf), Boolfbn.vblufOf(truf));
         }

        /**
         * Firf b visiblf dbtb propfrty dhbngf notifidbtion.
         * A 'visiblf' dbtb propfrty is onf thbt rfprfsfnts
         * somfthing bbout thf wby thf domponfnt bppfbrs on thf
         * displby, whfrf thbt bppfbrbndf isn't bound to bny othfr
         * propfrty. It notififs sdrffn rfbdfrs  thbt thf visubl
         * bppfbrbndf of thf domponfnt hbs dhbngfd, so thfy dbn
         * notify thf usfr.
         */
        publid void firfVisiblfDbtbPropfrtyChbngf() {
           firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                              Boolfbn.vblufOf(fblsf), Boolfbn.vblufOf(truf));
        }

        // Firf thf visiblf dbtb dhbngfs for thf modfl dhbngfs.

        /**
         * Trff Modfl Nodf dhbngf notifidbtion.
         *
         * @pbrbm f  b Trff Modfl fvfnt
         */
        publid void trffNodfsChbngfd(TrffModflEvfnt f) {
           firfVisiblfDbtbPropfrtyChbngf();
        }

        /**
         * Trff Modfl Nodf dhbngf notifidbtion.
         *
         * @pbrbm f  b Trff nodf insfrtion fvfnt
         */
        publid void trffNodfsInsfrtfd(TrffModflEvfnt f) {
           firfVisiblfDbtbPropfrtyChbngf();
        }

        /**
         * Trff Modfl Nodf dhbngf notifidbtion.
         *
         * @pbrbm f  b Trff nodf(s) rfmovbl fvfnt
         */
        publid  void trffNodfsRfmovfd(TrffModflEvfnt f) {
           firfVisiblfDbtbPropfrtyChbngf();
        }

        /**
         * Trff Modfl strudturf dhbngf dhbngf notifidbtion.
         *
         * @pbrbm f  b Trff Modfl fvfnt
         */
        publid  void trffStrudturfChbngfd(TrffModflEvfnt f) {
           firfVisiblfDbtbPropfrtyChbngf();
        }

        /**
         * Trff Collbpsfd notifidbtion.
         *
         * @pbrbm f  b TrffExpbnsionEvfnt
         */
        publid  void trffCollbpsfd(TrffExpbnsionEvfnt f) {
            firfVisiblfDbtbPropfrtyChbngf();
            TrffPbth pbth = f.gftPbth();
            if (pbth != null) {
                // Sft pbrfnt to null so AddfssiblfJTrffNodf domputfs
                // its pbrfnt.
                AddfssiblfJTrffNodf nodf = nfw AddfssiblfJTrffNodf(JTrff.this,
                                                                   pbth,
                                                                   null);
                PropfrtyChbngfEvfnt pdf = nfw PropfrtyChbngfEvfnt(nodf,
                    AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                    AddfssiblfStbtf.EXPANDED,
                    AddfssiblfStbtf.COLLAPSED);
                firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                   null, pdf);
            }
        }

        /**
         * Trff Modfl Expbnsion notifidbtion.
         *
         * @pbrbm f  b Trff nodf insfrtion fvfnt
         */
        publid  void trffExpbndfd(TrffExpbnsionEvfnt f) {
            firfVisiblfDbtbPropfrtyChbngf();
            TrffPbth pbth = f.gftPbth();
            if (pbth != null) {
                // TIGER - 4839971
                // Sft pbrfnt to null so AddfssiblfJTrffNodf domputfs
                // its pbrfnt.
                AddfssiblfJTrffNodf nodf = nfw AddfssiblfJTrffNodf(JTrff.this,
                                                                   pbth,
                                                                   null);
                PropfrtyChbngfEvfnt pdf = nfw PropfrtyChbngfEvfnt(nodf,
                    AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                    AddfssiblfStbtf.COLLAPSED,
                    AddfssiblfStbtf.EXPANDED);
                firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                                   null, pdf);
            }
        }

        /**
        *  Firf bn bdtivf dfsdfndbnt propfrty dhbngf notifidbtion.
        *  Thf bdtivf dfsdfndbnt is usfd for objfdts sudh bs list,
        *  trff, bnd tbblf, whidh mby hbvf trbnsifnt dhildrfn.
        *  It notififs sdrffn rfbdfrs thf bdtivf dhild of thf domponfnt
        *  hbs bffn dhbngfd so usfr dbn bf notififd from thfrf.
        *
        * @pbrbm oldPbth - lfbd pbth of prfvious bdtivf dhild
        * @pbrbm nfwPbth - lfbd pbth of durrfnt bdtivf dhild
        *
        */
        void firfAdtivfDfsdfndbntPropfrtyChbngf(TrffPbth oldPbth, TrffPbth nfwPbth){
            if(oldPbth != nfwPbth){
                Addfssiblf oldLSA = (oldPbth != null)
                                    ? nfw AddfssiblfJTrffNodf(JTrff.this,
                                                              oldPbth,
                                                              null)
                                    : null;

                Addfssiblf nfwLSA = (nfwPbth != null)
                                    ? nfw AddfssiblfJTrffNodf(JTrff.this,
                                                              nfwPbth,
                                                              null)
                                    : null;
                firfPropfrtyChbngf(AddfssiblfContfxt.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY,
                                                                oldLSA, nfwLSA);
            }
        }

        privbtf AddfssiblfContfxt gftCurrfntAddfssiblfContfxt() {
            Componfnt d = gftCurrfntComponfnt();
            if (d instbndfof Addfssiblf) {
                rfturn d.gftAddfssiblfContfxt();
            } flsf {
                rfturn null;
            }
        }

        privbtf Componfnt gftCurrfntComponfnt() {
            // is thf objfdt visiblf?
            // if so, gft row, sflfdtfd, fodus & lfbf stbtf,
            // bnd thfn gft thf rfndfrfr domponfnt bnd rfturn it
            TrffModfl modfl = JTrff.this.gftModfl();
            if (modfl == null) {
                rfturn null;
            }
            TrffPbth pbth = nfw TrffPbth(modfl.gftRoot());
            if (JTrff.this.isVisiblf(pbth)) {
                TrffCfllRfndfrfr r = JTrff.this.gftCfllRfndfrfr();
                TrffUI ui = JTrff.this.gftUI();
                if (ui != null) {
                    int row = ui.gftRowForPbth(JTrff.this, pbth);
                    int lsr = JTrff.this.gftLfbdSflfdtionRow();
                    boolfbn hbsFodus = JTrff.this.isFodusOwnfr()
                                       && (lsr == row);
                    boolfbn sflfdtfd = JTrff.this.isPbthSflfdtfd(pbth);
                    boolfbn fxpbndfd = JTrff.this.isExpbndfd(pbth);

                    rfturn r.gftTrffCfllRfndfrfrComponfnt(JTrff.this,
                        modfl.gftRoot(), sflfdtfd, fxpbndfd,
                        modfl.isLfbf(modfl.gftRoot()), row, hbsFodus);
                }
            }
            rfturn null;
        }

        // Ovfrriddfn mfthods from AddfssiblfJComponfnt

        /**
         * Gft thf rolf of this objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing thf rolf of thf
         * objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.TREE;
        }

        /**
         * Rfturns thf <dodf>Addfssiblf</dodf> dhild, if onf fxists,
         * dontbinfd bt thf lodbl doordinbtf <dodf>Point</dodf>.
         * Othfrwisf rfturns <dodf>null</dodf>.
         *
         * @pbrbm p point in lodbl doordinbtfs of this <dodf>Addfssiblf</dodf>
         * @rfturn thf <dodf>Addfssiblf</dodf>, if it fxists,
         *    bt thf spfdififd lodbtion; flsf <dodf>null</dodf>
         */
        publid Addfssiblf gftAddfssiblfAt(Point p) {
            TrffPbth pbth = gftClosfstPbthForLodbtion(p.x, p.y);
            if (pbth != null) {
                // JTrff.this is NOT thf pbrfnt; pbrfnt will gft domputfd lbtfr
                rfturn nfw AddfssiblfJTrffNodf(JTrff.this, pbth, null);
            } flsf {
                rfturn null;
            }
        }

        /**
         * Rfturns thf numbfr of top-lfvfl dhildrfn nodfs of this
         * JTrff.  Ebdh of thfsf nodfs mby in turn hbvf dhildrfn nodfs.
         *
         * @rfturn thf numbfr of bddfssiblf dhildrfn nodfs in thf trff.
         */
        publid int gftAddfssiblfChildrfnCount() {
            TrffModfl modfl = JTrff.this.gftModfl();
            if (modfl == null) {
                rfturn 0;
            }
            if (isRootVisiblf()) {
                rfturn 1;    // thf root nodf
            }

            // rfturn thf root's first sft of dhildrfn dount
            rfturn modfl.gftChildCount(modfl.gftRoot());
        }

        /**
         * Rfturn thf nth Addfssiblf dhild of thf objfdt.
         *
         * @pbrbm i zfro-bbsfd indfx of dhild
         * @rfturn thf nth Addfssiblf dhild of thf objfdt
         */
        publid Addfssiblf gftAddfssiblfChild(int i) {
            TrffModfl modfl = JTrff.this.gftModfl();
            if (modfl == null) {
                rfturn null;
            }
            if (isRootVisiblf()) {
                if (i == 0) {    // rfturn thf root nodf Addfssiblf
                    Objfdt[] objPbth = { modfl.gftRoot() };
                    TrffPbth pbth = nfw TrffPbth(objPbth);
                    rfturn nfw AddfssiblfJTrffNodf(JTrff.this, pbth, JTrff.this);
                } flsf {
                    rfturn null;
                }
            }

            // rfturn Addfssiblf for onf of root's dhild nodfs
            int dount = modfl.gftChildCount(modfl.gftRoot());
            if (i < 0 || i >= dount) {
                rfturn null;
            }
            Objfdt obj = modfl.gftChild(modfl.gftRoot(), i);
            Objfdt[] objPbth = { modfl.gftRoot(), obj };
            TrffPbth pbth = nfw TrffPbth(objPbth);
            rfturn nfw AddfssiblfJTrffNodf(JTrff.this, pbth, JTrff.this);
        }

        /**
         * Gft thf indfx of this objfdt in its bddfssiblf pbrfnt.
         *
         * @rfturn thf indfx of this objfdt in its pbrfnt.  Sindf b JTrff
         * top-lfvfl objfdt dofs not hbvf bn bddfssiblf pbrfnt.
         * @sff #gftAddfssiblfPbrfnt
         */
        publid int gftAddfssiblfIndfxInPbrfnt() {
            // didn't fvfr nffd to ovfrridf this...
            rfturn supfr.gftAddfssiblfIndfxInPbrfnt();
        }

        // AddfssiblfSflfdtion mfthods
        /**
         * Gft thf AddfssiblfSflfdtion bssodibtfd with this objfdt.  In thf
         * implfmfntbtion of thf Jbvb Addfssibility API for this dlbss,
         * rfturn this objfdt, whidh is rfsponsiblf for implfmfnting thf
         * AddfssiblfSflfdtion intfrfbdf on bfhblf of itsflf.
         *
         * @rfturn this objfdt
         */
        publid AddfssiblfSflfdtion gftAddfssiblfSflfdtion() {
            rfturn this;
        }

        /**
         * Rfturns thf numbfr of itfms durrfntly sflfdtfd.
         * If no itfms brf sflfdtfd, thf rfturn vbluf will bf 0.
         *
         * @rfturn thf numbfr of itfms durrfntly sflfdtfd.
         */
        publid int gftAddfssiblfSflfdtionCount() {
            Objfdt[] rootPbth = nfw Objfdt[1];
            rootPbth[0] = trffModfl.gftRoot();
            TrffPbth dhildPbth = nfw TrffPbth(rootPbth);
            if (JTrff.this.isPbthSflfdtfd(dhildPbth)) {
                rfturn 1;
            } flsf {
                rfturn 0;
            }
        }

        /**
         * Rfturns bn Addfssiblf rfprfsfnting thf spfdififd sflfdtfd itfm
         * in thf objfdt.  If thfrf isn't b sflfdtion, or thfrf brf
         * ffwfr itfms sflfdtfd thbn thf intfgfr pbssfd in, thf rfturn
         * vbluf will bf null.
         *
         * @pbrbm i thf zfro-bbsfd indfx of sflfdtfd itfms
         * @rfturn bn Addfssiblf dontbining thf sflfdtfd itfm
         */
        publid Addfssiblf gftAddfssiblfSflfdtion(int i) {
            // Thf JTrff dbn hbvf only onf bddfssiblf dhild, thf root.
            if (i == 0) {
                Objfdt[] rootPbth = nfw Objfdt[1];
                rootPbth[0] = trffModfl.gftRoot();
                TrffPbth dhildPbth = nfw TrffPbth(rootPbth);
                if (JTrff.this.isPbthSflfdtfd(dhildPbth)) {
                    rfturn nfw AddfssiblfJTrffNodf(JTrff.this, dhildPbth, JTrff.this);
                }
            }
            rfturn null;
        }

        /**
         * Rfturns truf if thf durrfnt dhild of this objfdt is sflfdtfd.
         *
         * @pbrbm i thf zfro-bbsfd indfx of thf dhild in this Addfssiblf objfdt.
         * @sff AddfssiblfContfxt#gftAddfssiblfChild
         */
        publid boolfbn isAddfssiblfChildSflfdtfd(int i) {
            // Thf JTrff dbn hbvf only onf bddfssiblf dhild, thf root.
            if (i == 0) {
                Objfdt[] rootPbth = nfw Objfdt[1];
                rootPbth[0] = trffModfl.gftRoot();
                TrffPbth dhildPbth = nfw TrffPbth(rootPbth);
                rfturn JTrff.this.isPbthSflfdtfd(dhildPbth);
            } flsf {
                rfturn fblsf;
            }
        }

        /**
         * Adds thf spfdififd sflfdtfd itfm in thf objfdt to thf objfdt's
         * sflfdtion.  If thf objfdt supports multiplf sflfdtions,
         * thf spfdififd itfm is bddfd to bny fxisting sflfdtion, othfrwisf
         * it rfplbdfs bny fxisting sflfdtion in thf objfdt.  If thf
         * spfdififd itfm is blrfbdy sflfdtfd, this mfthod hbs no ffffdt.
         *
         * @pbrbm i thf zfro-bbsfd indfx of sflfdtbblf itfms
         */
        publid void bddAddfssiblfSflfdtion(int i) {
           TrffModfl modfl = JTrff.this.gftModfl();
           if (modfl != null) {
               if (i == 0) {
                   Objfdt[] objPbth = {modfl.gftRoot()};
                   TrffPbth pbth = nfw TrffPbth(objPbth);
                   JTrff.this.bddSflfdtionPbth(pbth);
                }
            }
        }

        /**
         * Rfmovfs thf spfdififd sflfdtfd itfm in thf objfdt from thf objfdt's
         * sflfdtion.  If thf spfdififd itfm isn't durrfntly sflfdtfd, this
         * mfthod hbs no ffffdt.
         *
         * @pbrbm i thf zfro-bbsfd indfx of sflfdtbblf itfms
         */
        publid void rfmovfAddfssiblfSflfdtion(int i) {
            TrffModfl modfl = JTrff.this.gftModfl();
            if (modfl != null) {
                if (i == 0) {
                    Objfdt[] objPbth = {modfl.gftRoot()};
                    TrffPbth pbth = nfw TrffPbth(objPbth);
                    JTrff.this.rfmovfSflfdtionPbth(pbth);
                }
            }
        }

        /**
         * Clfbrs thf sflfdtion in thf objfdt, so thbt nothing in thf
         * objfdt is sflfdtfd.
         */
        publid void dlfbrAddfssiblfSflfdtion() {
            int dhildCount = gftAddfssiblfChildrfnCount();
            for (int i = 0; i < dhildCount; i++) {
                rfmovfAddfssiblfSflfdtion(i);
            }
        }

        /**
         * Cbusfs fvfry sflfdtfd itfm in thf objfdt to bf sflfdtfd
         * if thf objfdt supports multiplf sflfdtions.
         */
        publid void sflfdtAllAddfssiblfSflfdtion() {
            TrffModfl modfl = JTrff.this.gftModfl();
            if (modfl != null) {
                Objfdt[] objPbth = {modfl.gftRoot()};
                TrffPbth pbth = nfw TrffPbth(objPbth);
                JTrff.this.bddSflfdtionPbth(pbth);
            }
        }

        /**
         * This dlbss implfmfnts bddfssibility support for thf
         * <dodf>JTrff</dodf> dhild.  It providfs bn implfmfntbtion of thf
         * Jbvb Addfssibility API bppropribtf to trff nodfs.
         */
        protfdtfd dlbss AddfssiblfJTrffNodf fxtfnds AddfssiblfContfxt
            implfmfnts Addfssiblf, AddfssiblfComponfnt, AddfssiblfSflfdtion,
            AddfssiblfAdtion {

            privbtf JTrff trff = null;
            privbtf TrffModfl trffModfl = null;
            privbtf Objfdt obj = null;
            privbtf TrffPbth pbth = null;
            privbtf Addfssiblf bddfssiblfPbrfnt = null;
            privbtf int indfx = 0;
            privbtf boolfbn isLfbf = fblsf;

            /**
             * Construdts bn AddfssiblfJTrffNodf
             *
             * @pbrbm t bn instbndf of {@dodf JTrff}
             * @pbrbm p bn instbndf of {@dodf TrffPbth}
             * @pbrbm bp bn instbndf of {@dodf Addfssiblf}
             * @sindf 1.4
             */
            publid AddfssiblfJTrffNodf(JTrff t, TrffPbth p, Addfssiblf bp) {
                trff = t;
                pbth = p;
                bddfssiblfPbrfnt = bp;
                trffModfl = t.gftModfl();
                obj = p.gftLbstPbthComponfnt();
                if (trffModfl != null) {
                    isLfbf = trffModfl.isLfbf(obj);
                }
            }

            privbtf TrffPbth gftChildTrffPbth(int i) {
                // Trff nodfs dbn't bf so domplfx thbt thfy hbvf
                // two sfts of dhildrfn -> wf'rf ignoring thbt dbsf
                if (i < 0 || i >= gftAddfssiblfChildrfnCount()) {
                    rfturn null;
                } flsf {
                    Objfdt dhildObj = trffModfl.gftChild(obj, i);
                    Objfdt[] objPbth = pbth.gftPbth();
                    Objfdt[] objChildPbth = nfw Objfdt[objPbth.lfngth+1];
                    jbvb.lbng.Systfm.brrbydopy(objPbth, 0, objChildPbth, 0, objPbth.lfngth);
                    objChildPbth[objChildPbth.lfngth-1] = dhildObj;
                    rfturn nfw TrffPbth(objChildPbth);
                }
            }

            /**
             * Gft thf AddfssiblfContfxt bssodibtfd with this trff nodf.
             * In thf implfmfntbtion of thf Jbvb Addfssibility API for
             * this dlbss, rfturn this objfdt, whidh is its own
             * AddfssiblfContfxt.
             *
             * @rfturn this objfdt
             */
            publid AddfssiblfContfxt gftAddfssiblfContfxt() {
                rfturn this;
            }

            privbtf AddfssiblfContfxt gftCurrfntAddfssiblfContfxt() {
                Componfnt d = gftCurrfntComponfnt();
                if (d instbndfof Addfssiblf) {
                    rfturn d.gftAddfssiblfContfxt();
                } flsf {
                    rfturn null;
                }
            }

            privbtf Componfnt gftCurrfntComponfnt() {
                // is thf objfdt visiblf?
                // if so, gft row, sflfdtfd, fodus & lfbf stbtf,
                // bnd thfn gft thf rfndfrfr domponfnt bnd rfturn it
                if (trff.isVisiblf(pbth)) {
                    TrffCfllRfndfrfr r = trff.gftCfllRfndfrfr();
                    if (r == null) {
                        rfturn null;
                    }
                    TrffUI ui = trff.gftUI();
                    if (ui != null) {
                        int row = ui.gftRowForPbth(JTrff.this, pbth);
                        boolfbn sflfdtfd = trff.isPbthSflfdtfd(pbth);
                        boolfbn fxpbndfd = trff.isExpbndfd(pbth);
                        boolfbn hbsFodus = fblsf; // how to tfll?? -PK
                        rfturn r.gftTrffCfllRfndfrfrComponfnt(trff, obj,
                            sflfdtfd, fxpbndfd, isLfbf, row, hbsFodus);
                    }
                }
                rfturn null;
            }

        // AddfssiblfContfxt mfthods

             /**
              * Gft thf bddfssiblf nbmf of this objfdt.
              *
              * @rfturn thf lodblizfd nbmf of thf objfdt; null if this
              * objfdt dofs not hbvf b nbmf
              */
             publid String gftAddfssiblfNbmf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    String nbmf = bd.gftAddfssiblfNbmf();
                    if ((nbmf != null) && (nbmf != "")) {
                        rfturn bd.gftAddfssiblfNbmf();
                    } flsf {
                        rfturn null;
                    }
                }
                if ((bddfssiblfNbmf != null) && (bddfssiblfNbmf != "")) {
                    rfturn bddfssiblfNbmf;
                } flsf {
                    // fbll bbdk to thf dlifnt propfrty
                    rfturn (String)gftClifntPropfrty(AddfssiblfContfxt.ACCESSIBLE_NAME_PROPERTY);
                }
            }

            /**
             * Sft thf lodblizfd bddfssiblf nbmf of this objfdt.
             *
             * @pbrbm s thf nfw lodblizfd nbmf of thf objfdt.
             */
            publid void sftAddfssiblfNbmf(String s) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.sftAddfssiblfNbmf(s);
                } flsf {
                    supfr.sftAddfssiblfNbmf(s);
                }
            }

            //
            // *** should dhfdk tooltip tfxt for dfsd. (nffds MousfEvfnt)
            //
            /**
             * Gft thf bddfssiblf dfsdription of this objfdt.
             *
             * @rfturn thf lodblizfd dfsdription of thf objfdt; null if
             * this objfdt dofs not hbvf b dfsdription
             */
            publid String gftAddfssiblfDfsdription() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftAddfssiblfDfsdription();
                } flsf {
                    rfturn supfr.gftAddfssiblfDfsdription();
                }
            }

            /**
             * Sft thf bddfssiblf dfsdription of this objfdt.
             *
             * @pbrbm s thf nfw lodblizfd dfsdription of thf objfdt
             */
            publid void sftAddfssiblfDfsdription(String s) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.sftAddfssiblfDfsdription(s);
                } flsf {
                    supfr.sftAddfssiblfDfsdription(s);
                }
            }

            /**
             * Gft thf rolf of this objfdt.
             *
             * @rfturn bn instbndf of AddfssiblfRolf dfsdribing thf rolf of thf objfdt
             * @sff AddfssiblfRolf
             */
            publid AddfssiblfRolf gftAddfssiblfRolf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftAddfssiblfRolf();
                } flsf {
                    rfturn AddfssiblfRolf.UNKNOWN;
                }
            }

            /**
             * Gft thf stbtf sft of this objfdt.
             *
             * @rfturn bn instbndf of AddfssiblfStbtfSft dontbining thf
             * durrfnt stbtf sft of thf objfdt
             * @sff AddfssiblfStbtf
             */
            publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                AddfssiblfStbtfSft stbtfs;
                if (bd != null) {
                    stbtfs = bd.gftAddfssiblfStbtfSft();
                } flsf {
                    stbtfs = nfw AddfssiblfStbtfSft();
                }
                // nffd to tfst hfrf, 'dbusf thf undfrlying domponfnt
                // is b dfllRfndfrfr, whidh is nfvfr showing...
                if (isShowing()) {
                    stbtfs.bdd(AddfssiblfStbtf.SHOWING);
                } flsf if (stbtfs.dontbins(AddfssiblfStbtf.SHOWING)) {
                    stbtfs.rfmovf(AddfssiblfStbtf.SHOWING);
                }
                if (isVisiblf()) {
                    stbtfs.bdd(AddfssiblfStbtf.VISIBLE);
                } flsf if (stbtfs.dontbins(AddfssiblfStbtf.VISIBLE)) {
                    stbtfs.rfmovf(AddfssiblfStbtf.VISIBLE);
                }
                if (trff.isPbthSflfdtfd(pbth)){
                    stbtfs.bdd(AddfssiblfStbtf.SELECTED);
                }
                if (pbth == gftLfbdSflfdtionPbth()) {
                    stbtfs.bdd(AddfssiblfStbtf.ACTIVE);
                }
                if (!isLfbf) {
                    stbtfs.bdd(AddfssiblfStbtf.EXPANDABLE);
                }
                if (trff.isExpbndfd(pbth)) {
                    stbtfs.bdd(AddfssiblfStbtf.EXPANDED);
                } flsf {
                    stbtfs.bdd(AddfssiblfStbtf.COLLAPSED);
                }
                if (trff.isEditbblf()) {
                    stbtfs.bdd(AddfssiblfStbtf.EDITABLE);
                }
                rfturn stbtfs;
            }

            /**
             * Gft thf Addfssiblf pbrfnt of this objfdt.
             *
             * @rfturn thf Addfssiblf pbrfnt of this objfdt; null if this
             * objfdt dofs not hbvf bn Addfssiblf pbrfnt
             */
            publid Addfssiblf gftAddfssiblfPbrfnt() {
                // somfonf wbnts to know, so wf nffd to drfbtf our pbrfnt
                // if wf don't hbvf onf (hfy, wf'rf b tblfntfd kid!)
                if (bddfssiblfPbrfnt == null) {
                    Objfdt[] objPbth = pbth.gftPbth();
                    if (objPbth.lfngth > 1) {
                        Objfdt objPbrfnt = objPbth[objPbth.lfngth-2];
                        if (trffModfl != null) {
                            indfx = trffModfl.gftIndfxOfChild(objPbrfnt, obj);
                        }
                        Objfdt[] objPbrfntPbth = nfw Objfdt[objPbth.lfngth-1];
                        jbvb.lbng.Systfm.brrbydopy(objPbth, 0, objPbrfntPbth,
                                                   0, objPbth.lfngth-1);
                        TrffPbth pbrfntPbth = nfw TrffPbth(objPbrfntPbth);
                        bddfssiblfPbrfnt = nfw AddfssiblfJTrffNodf(trff,
                                                                   pbrfntPbth,
                                                                   null);
                        this.sftAddfssiblfPbrfnt(bddfssiblfPbrfnt);
                    } flsf if (trffModfl != null) {
                        bddfssiblfPbrfnt = trff; // wf'rf thf top!
                        indfx = 0; // wf'rf bn only dhild!
                        this.sftAddfssiblfPbrfnt(bddfssiblfPbrfnt);
                    }
                }
                rfturn bddfssiblfPbrfnt;
            }

            /**
             * Gft thf indfx of this objfdt in its bddfssiblf pbrfnt.
             *
             * @rfturn thf indfx of this objfdt in its pbrfnt; -1 if this
             * objfdt dofs not hbvf bn bddfssiblf pbrfnt.
             * @sff #gftAddfssiblfPbrfnt
             */
            publid int gftAddfssiblfIndfxInPbrfnt() {
                // indfx is invblid 'till wf hbvf bn bddfssiblfPbrfnt...
                if (bddfssiblfPbrfnt == null) {
                    gftAddfssiblfPbrfnt();
                }
                Objfdt[] objPbth = pbth.gftPbth();
                if (objPbth.lfngth > 1) {
                    Objfdt objPbrfnt = objPbth[objPbth.lfngth-2];
                    if (trffModfl != null) {
                        indfx = trffModfl.gftIndfxOfChild(objPbrfnt, obj);
                    }
                }
                rfturn indfx;
            }

            /**
             * Rfturns thf numbfr of bddfssiblf dhildrfn in thf objfdt.
             *
             * @rfturn thf numbfr of bddfssiblf dhildrfn in thf objfdt.
             */
            publid int gftAddfssiblfChildrfnCount() {
                // Trff nodfs dbn't bf so domplfx thbt thfy hbvf
                // two sfts of dhildrfn -> wf'rf ignoring thbt dbsf
                rfturn trffModfl.gftChildCount(obj);
            }

            /**
             * Rfturn thf spfdififd Addfssiblf dhild of thf objfdt.
             *
             * @pbrbm i zfro-bbsfd indfx of dhild
             * @rfturn thf Addfssiblf dhild of thf objfdt
             */
            publid Addfssiblf gftAddfssiblfChild(int i) {
                // Trff nodfs dbn't bf so domplfx thbt thfy hbvf
                // two sfts of dhildrfn -> wf'rf ignoring thbt dbsf
                if (i < 0 || i >= gftAddfssiblfChildrfnCount()) {
                    rfturn null;
                } flsf {
                    Objfdt dhildObj = trffModfl.gftChild(obj, i);
                    Objfdt[] objPbth = pbth.gftPbth();
                    Objfdt[] objChildPbth = nfw Objfdt[objPbth.lfngth+1];
                    jbvb.lbng.Systfm.brrbydopy(objPbth, 0, objChildPbth, 0, objPbth.lfngth);
                    objChildPbth[objChildPbth.lfngth-1] = dhildObj;
                    TrffPbth dhildPbth = nfw TrffPbth(objChildPbth);
                    rfturn nfw AddfssiblfJTrffNodf(JTrff.this, dhildPbth, this);
                }
            }

            /**
             * Gfts thf lodblf of thf domponfnt. If thf domponfnt dofs not hbvf
             * b lodblf, thfn thf lodblf of its pbrfnt is rfturnfd.
             *
             * @rfturn This domponfnt's lodblf. If this domponfnt dofs not hbvf
             * b lodblf, thf lodblf of its pbrfnt is rfturnfd.
             * @fxdfption IllfgblComponfntStbtfExdfption
             * If thf Componfnt dofs not hbvf its own lodblf bnd hbs not yft
             * bffn bddfd to b dontbinmfnt hifrbrdhy sudh thbt thf lodblf dbn bf
             * dftfrminfd from thf dontbining pbrfnt.
             * @sff #sftLodblf
             */
            publid Lodblf gftLodblf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn bd.gftLodblf();
                } flsf {
                    rfturn trff.gftLodblf();
                }
            }

            /**
             * Add b PropfrtyChbngfListfnfr to thf listfnfr list.
             * Thf listfnfr is rfgistfrfd for bll propfrtifs.
             *
             * @pbrbm l  Thf PropfrtyChbngfListfnfr to bf bddfd
             */
            publid void bddPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.bddPropfrtyChbngfListfnfr(l);
                } flsf {
                    supfr.bddPropfrtyChbngfListfnfr(l);
                }
            }

            /**
             * Rfmovf b PropfrtyChbngfListfnfr from thf listfnfr list.
             * This rfmovfs b PropfrtyChbngfListfnfr thbt wbs rfgistfrfd
             * for bll propfrtifs.
             *
             * @pbrbm l  Thf PropfrtyChbngfListfnfr to bf rfmovfd
             */
            publid void rfmovfPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    bd.rfmovfPropfrtyChbngfListfnfr(l);
                } flsf {
                    supfr.rfmovfPropfrtyChbngfListfnfr(l);
                }
            }

            /**
             * Gft thf AddfssiblfAdtion bssodibtfd with this objfdt.  In thf
             * implfmfntbtion of thf Jbvb Addfssibility API for this dlbss,
             * rfturn this objfdt, whidh is rfsponsiblf for implfmfnting thf
             * AddfssiblfAdtion intfrfbdf on bfhblf of itsflf.
             *
             * @rfturn this objfdt
             */
            publid AddfssiblfAdtion gftAddfssiblfAdtion() {
                rfturn this;
            }

            /**
             * Gft thf AddfssiblfComponfnt bssodibtfd with this objfdt.  In thf
             * implfmfntbtion of thf Jbvb Addfssibility API for this dlbss,
             * rfturn this objfdt, whidh is rfsponsiblf for implfmfnting thf
             * AddfssiblfComponfnt intfrfbdf on bfhblf of itsflf.
             *
             * @rfturn this objfdt
             */
            publid AddfssiblfComponfnt gftAddfssiblfComponfnt() {
                rfturn this; // to ovfrridf gftBounds()
            }

            /**
             * Gft thf AddfssiblfSflfdtion bssodibtfd with this objfdt if onf
             * fxists.  Othfrwisf rfturn null.
             *
             * @rfturn thf AddfssiblfSflfdtion, or null
             */
            publid AddfssiblfSflfdtion gftAddfssiblfSflfdtion() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null && isLfbf) {
                    rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfSflfdtion();
                } flsf {
                    rfturn this;
                }
            }

            /**
             * Gft thf AddfssiblfTfxt bssodibtfd with this objfdt if onf
             * fxists.  Othfrwisf rfturn null.
             *
             * @rfturn thf AddfssiblfTfxt, or null
             */
            publid AddfssiblfTfxt gftAddfssiblfTfxt() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfTfxt();
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Gft thf AddfssiblfVbluf bssodibtfd with this objfdt if onf
             * fxists.  Othfrwisf rfturn null.
             *
             * @rfturn thf AddfssiblfVbluf, or null
             */
            publid AddfssiblfVbluf gftAddfssiblfVbluf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    rfturn gftCurrfntAddfssiblfContfxt().gftAddfssiblfVbluf();
                } flsf {
                    rfturn null;
                }
            }


        // AddfssiblfComponfnt mfthods

            /**
             * Gft thf bbdkground dolor of this objfdt.
             *
             * @rfturn thf bbdkground dolor, if supportfd, of thf objfdt;
             * othfrwisf, null
             */
            publid Color gftBbdkground() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftBbdkground();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftBbdkground();
                    } flsf {
                        rfturn null;
                    }
                }
            }

            /**
             * Sft thf bbdkground dolor of this objfdt.
             *
             * @pbrbm d thf nfw Color for thf bbdkground
             */
            publid void sftBbdkground(Color d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftBbdkground(d);
                } flsf {
                    Componfnt dp = gftCurrfntComponfnt();
                    if (dp != null) {
                        dp.sftBbdkground(d);
                    }
                }
            }


            /**
             * Gft thf forfground dolor of this objfdt.
             *
             * @rfturn thf forfground dolor, if supportfd, of thf objfdt;
             * othfrwisf, null
             */
            publid Color gftForfground() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftForfground();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftForfground();
                    } flsf {
                        rfturn null;
                    }
                }
            }

            publid void sftForfground(Color d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftForfground(d);
                } flsf {
                    Componfnt dp = gftCurrfntComponfnt();
                    if (dp != null) {
                        dp.sftForfground(d);
                    }
                }
            }

            publid Cursor gftCursor() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftCursor();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftCursor();
                    } flsf {
                        Addfssiblf bp = gftAddfssiblfPbrfnt();
                        if (bp instbndfof AddfssiblfComponfnt) {
                            rfturn ((AddfssiblfComponfnt) bp).gftCursor();
                        } flsf {
                            rfturn null;
                        }
                    }
                }
            }

            publid void sftCursor(Cursor d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftCursor(d);
                } flsf {
                    Componfnt dp = gftCurrfntComponfnt();
                    if (dp != null) {
                        dp.sftCursor(d);
                    }
                }
            }

            publid Font gftFont() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftFont();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftFont();
                    } flsf {
                        rfturn null;
                    }
                }
            }

            publid void sftFont(Font f) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftFont(f);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftFont(f);
                    }
                }
            }

            publid FontMftrids gftFontMftrids(Font f) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftFontMftrids(f);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.gftFontMftrids(f);
                    } flsf {
                        rfturn null;
                    }
                }
            }

            publid boolfbn isEnbblfd() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).isEnbblfd();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.isEnbblfd();
                    } flsf {
                        rfturn fblsf;
                    }
                }
            }

            publid void sftEnbblfd(boolfbn b) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftEnbblfd(b);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftEnbblfd(b);
                    }
                }
            }

            publid boolfbn isVisiblf() {
                Rfdtbnglf pbthBounds = trff.gftPbthBounds(pbth);
                Rfdtbnglf pbrfntBounds = trff.gftVisiblfRfdt();
                rfturn pbthBounds != null && pbrfntBounds != null &&
                        pbrfntBounds.intfrsfdts(pbthBounds);
            }

            publid void sftVisiblf(boolfbn b) {
            }

            publid boolfbn isShowing() {
                rfturn (trff.isShowing() && isVisiblf());
            }

            publid boolfbn dontbins(Point p) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    Rfdtbnglf r = ((AddfssiblfComponfnt) bd).gftBounds();
                    rfturn r.dontbins(p);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        Rfdtbnglf r = d.gftBounds();
                        rfturn r.dontbins(p);
                    } flsf {
                        rfturn gftBounds().dontbins(p);
                    }
                }
            }

            publid Point gftLodbtionOnSdrffn() {
                if (trff != null) {
                    Point trffLodbtion = trff.gftLodbtionOnSdrffn();
                    Rfdtbnglf pbthBounds = trff.gftPbthBounds(pbth);
                    if (trffLodbtion != null && pbthBounds != null) {
                        Point nodfLodbtion = nfw Point(pbthBounds.x,
                                                       pbthBounds.y);
                        nodfLodbtion.trbnslbtf(trffLodbtion.x, trffLodbtion.y);
                        rfturn nodfLodbtion;
                    } flsf {
                        rfturn null;
                    }
                } flsf {
                    rfturn null;
                }
            }

            /**
             * Rfturns thf rflbtivf lodbtion of thf nodf
             *
             * @rfturn thf rflbtivf lodbtion of thf nodf
             */
            protfdtfd Point gftLodbtionInJTrff() {
                Rfdtbnglf r = trff.gftPbthBounds(pbth);
                if (r != null) {
                    rfturn r.gftLodbtion();
                } flsf {
                    rfturn null;
                }
            }

            publid Point gftLodbtion() {
                Rfdtbnglf r = gftBounds();
                if (r != null) {
                    rfturn r.gftLodbtion();
                } flsf {
                    rfturn null;
                }
            }

            publid void sftLodbtion(Point p) {
            }

            publid Rfdtbnglf gftBounds() {
                Rfdtbnglf r = trff.gftPbthBounds(pbth);
                Addfssiblf pbrfnt = gftAddfssiblfPbrfnt();
                if (pbrfnt != null) {
                    if (pbrfnt instbndfof AddfssiblfJTrffNodf) {
                        Point pbrfntLod = ((AddfssiblfJTrffNodf) pbrfnt).gftLodbtionInJTrff();
                        if (pbrfntLod != null && r != null) {
                            r.trbnslbtf(-pbrfntLod.x, -pbrfntLod.y);
                        } flsf {
                            rfturn null;        // not visiblf!
                        }
                    }
                }
                rfturn r;
            }

            publid void sftBounds(Rfdtbnglf r) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftBounds(r);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftBounds(r);
                    }
                }
            }

            publid Dimfnsion gftSizf() {
                rfturn gftBounds().gftSizf();
            }

            publid void sftSizf (Dimfnsion d) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).sftSizf(d);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.sftSizf(d);
                    }
                }
            }

            /**
             * Rfturns thf <dodf>Addfssiblf</dodf> dhild, if onf fxists,
             * dontbinfd bt thf lodbl doordinbtf <dodf>Point</dodf>.
             * Othfrwisf rfturns <dodf>null</dodf>.
             *
             * @pbrbm p point in lodbl doordinbtfs of this
             *    <dodf>Addfssiblf</dodf>
             * @rfturn thf <dodf>Addfssiblf</dodf>, if it fxists,
             *    bt thf spfdififd lodbtion; flsf <dodf>null</dodf>
             */
            publid Addfssiblf gftAddfssiblfAt(Point p) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).gftAddfssiblfAt(p);
                } flsf {
                    rfturn null;
                }
            }

            @SupprfssWbrnings("dfprfdbtion")
            publid boolfbn isFodusTrbvfrsbblf() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    rfturn ((AddfssiblfComponfnt) bd).isFodusTrbvfrsbblf();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        rfturn d.isFodusTrbvfrsbblf();
                    } flsf {
                        rfturn fblsf;
                    }
                }
            }

            publid void rfqufstFodus() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).rfqufstFodus();
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.rfqufstFodus();
                    }
                }
            }

            publid void bddFodusListfnfr(FodusListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).bddFodusListfnfr(l);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.bddFodusListfnfr(l);
                    }
                }
            }

            publid void rfmovfFodusListfnfr(FodusListfnfr l) {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd instbndfof AddfssiblfComponfnt) {
                    ((AddfssiblfComponfnt) bd).rfmovfFodusListfnfr(l);
                } flsf {
                    Componfnt d = gftCurrfntComponfnt();
                    if (d != null) {
                        d.rfmovfFodusListfnfr(l);
                    }
                }
            }

        // AddfssiblfSflfdtion mfthods

            /**
             * Rfturns thf numbfr of itfms durrfntly sflfdtfd.
             * If no itfms brf sflfdtfd, thf rfturn vbluf will bf 0.
             *
             * @rfturn thf numbfr of itfms durrfntly sflfdtfd.
             */
            publid int gftAddfssiblfSflfdtionCount() {
                int dount = 0;
                int dhildCount = gftAddfssiblfChildrfnCount();
                for (int i = 0; i < dhildCount; i++) {
                    TrffPbth dhildPbth = gftChildTrffPbth(i);
                    if (trff.isPbthSflfdtfd(dhildPbth)) {
                       dount++;
                    }
                }
                rfturn dount;
            }

            /**
             * Rfturns bn Addfssiblf rfprfsfnting thf spfdififd sflfdtfd itfm
             * in thf objfdt.  If thfrf isn't b sflfdtion, or thfrf brf
             * ffwfr itfms sflfdtfd thbn thf intfgfr pbssfd in, thf rfturn
             * vbluf will bf null.
             *
             * @pbrbm i thf zfro-bbsfd indfx of sflfdtfd itfms
             * @rfturn bn Addfssiblf dontbining thf sflfdtfd itfm
             */
            publid Addfssiblf gftAddfssiblfSflfdtion(int i) {
                int dhildCount = gftAddfssiblfChildrfnCount();
                if (i < 0 || i >= dhildCount) {
                    rfturn null;        // out of rbngf
                }
                int dount = 0;
                for (int j = 0; j < dhildCount && i >= dount; j++) {
                    TrffPbth dhildPbth = gftChildTrffPbth(j);
                    if (trff.isPbthSflfdtfd(dhildPbth)) {
                        if (dount == i) {
                            rfturn nfw AddfssiblfJTrffNodf(trff, dhildPbth, this);
                        } flsf {
                            dount++;
                        }
                    }
                }
                rfturn null;
            }

            /**
             * Rfturns truf if thf durrfnt dhild of this objfdt is sflfdtfd.
             *
             * @pbrbm i thf zfro-bbsfd indfx of thf dhild in this Addfssiblf
             * objfdt.
             * @sff AddfssiblfContfxt#gftAddfssiblfChild
             */
            publid boolfbn isAddfssiblfChildSflfdtfd(int i) {
                int dhildCount = gftAddfssiblfChildrfnCount();
                if (i < 0 || i >= dhildCount) {
                    rfturn fblsf;       // out of rbngf
                } flsf {
                    TrffPbth dhildPbth = gftChildTrffPbth(i);
                    rfturn trff.isPbthSflfdtfd(dhildPbth);
                }
            }

            /**
             * Adds thf spfdififd sflfdtfd itfm in thf objfdt to thf objfdt's
             * sflfdtion.  If thf objfdt supports multiplf sflfdtions,
             * thf spfdififd itfm is bddfd to bny fxisting sflfdtion, othfrwisf
             * it rfplbdfs bny fxisting sflfdtion in thf objfdt.  If thf
             * spfdififd itfm is blrfbdy sflfdtfd, this mfthod hbs no ffffdt.
             *
             * @pbrbm i thf zfro-bbsfd indfx of sflfdtbblf itfms
             */
            publid void bddAddfssiblfSflfdtion(int i) {
               TrffModfl modfl = JTrff.this.gftModfl();
               if (modfl != null) {
                   if (i >= 0 && i < gftAddfssiblfChildrfnCount()) {
                       TrffPbth pbth = gftChildTrffPbth(i);
                       JTrff.this.bddSflfdtionPbth(pbth);
                    }
                }
            }

            /**
             * Rfmovfs thf spfdififd sflfdtfd itfm in thf objfdt from thf
             * objfdt's
             * sflfdtion.  If thf spfdififd itfm isn't durrfntly sflfdtfd, this
             * mfthod hbs no ffffdt.
             *
             * @pbrbm i thf zfro-bbsfd indfx of sflfdtbblf itfms
             */
            publid void rfmovfAddfssiblfSflfdtion(int i) {
               TrffModfl modfl = JTrff.this.gftModfl();
               if (modfl != null) {
                   if (i >= 0 && i < gftAddfssiblfChildrfnCount()) {
                       TrffPbth pbth = gftChildTrffPbth(i);
                       JTrff.this.rfmovfSflfdtionPbth(pbth);
                    }
                }
            }

            /**
             * Clfbrs thf sflfdtion in thf objfdt, so thbt nothing in thf
             * objfdt is sflfdtfd.
             */
            publid void dlfbrAddfssiblfSflfdtion() {
                int dhildCount = gftAddfssiblfChildrfnCount();
                for (int i = 0; i < dhildCount; i++) {
                    rfmovfAddfssiblfSflfdtion(i);
                }
            }

            /**
             * Cbusfs fvfry sflfdtfd itfm in thf objfdt to bf sflfdtfd
             * if thf objfdt supports multiplf sflfdtions.
             */
            publid void sflfdtAllAddfssiblfSflfdtion() {
               TrffModfl modfl = JTrff.this.gftModfl();
               if (modfl != null) {
                   int dhildCount = gftAddfssiblfChildrfnCount();
                   TrffPbth pbth;
                   for (int i = 0; i < dhildCount; i++) {
                       pbth = gftChildTrffPbth(i);
                       JTrff.this.bddSflfdtionPbth(pbth);
                   }
                }
            }

        // AddfssiblfAdtion mfthods

            /**
             * Rfturns thf numbfr of bddfssiblf bdtions bvbilbblf in this
             * trff nodf.  If this nodf is not b lfbf, thfrf is bt lfbst
             * onf bdtion (togglf fxpbnd), in bddition to bny bvbilbblf
             * on thf objfdt bfhind thf TrffCfllRfndfrfr.
             *
             * @rfturn thf numbfr of Adtions in this objfdt
             */
            publid int gftAddfssiblfAdtionCount() {
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (bd != null) {
                    AddfssiblfAdtion bb = bd.gftAddfssiblfAdtion();
                    if (bb != null) {
                        rfturn (bb.gftAddfssiblfAdtionCount() + (isLfbf ? 0 : 1));
                    }
                }
                rfturn isLfbf ? 0 : 1;
            }

            /**
             * Rfturn b dfsdription of thf spfdififd bdtion of thf trff nodf.
             * If this nodf is not b lfbf, thfrf is bt lfbst onf bdtion
             * dfsdription (togglf fxpbnd), in bddition to bny bvbilbblf
             * on thf objfdt bfhind thf TrffCfllRfndfrfr.
             *
             * @pbrbm i zfro-bbsfd indfx of thf bdtions
             * @rfturn b dfsdription of thf bdtion
             */
            publid String gftAddfssiblfAdtionDfsdription(int i) {
                if (i < 0 || i >= gftAddfssiblfAdtionCount()) {
                    rfturn null;
                }
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (i == 0) {
                    // TIGER - 4766636
                    rfturn AddfssiblfAdtion.TOGGLE_EXPAND;
                } flsf if (bd != null) {
                    AddfssiblfAdtion bb = bd.gftAddfssiblfAdtion();
                    if (bb != null) {
                        rfturn bb.gftAddfssiblfAdtionDfsdription(i - 1);
                    }
                }
                rfturn null;
            }

            /**
             * Pfrform thf spfdififd Adtion on thf trff nodf.  If this nodf
             * is not b lfbf, thfrf is bt lfbst onf bdtion whidh dbn bf
             * donf (togglf fxpbnd), in bddition to bny bvbilbblf on thf
             * objfdt bfhind thf TrffCfllRfndfrfr.
             *
             * @pbrbm i zfro-bbsfd indfx of bdtions
             * @rfturn truf if thf thf bdtion wbs pfrformfd; flsf fblsf.
             */
            publid boolfbn doAddfssiblfAdtion(int i) {
                if (i < 0 || i >= gftAddfssiblfAdtionCount()) {
                    rfturn fblsf;
                }
                AddfssiblfContfxt bd = gftCurrfntAddfssiblfContfxt();
                if (i == 0) {
                    if (JTrff.this.isExpbndfd(pbth)) {
                        JTrff.this.dollbpsfPbth(pbth);
                    } flsf {
                        JTrff.this.fxpbndPbth(pbth);
                    }
                    rfturn truf;
                } flsf if (bd != null) {
                    AddfssiblfAdtion bb = bd.gftAddfssiblfAdtion();
                    if (bb != null) {
                        rfturn bb.doAddfssiblfAdtion(i - 1);
                    }
                }
                rfturn fblsf;
            }

        } // innfr dlbss AddfssiblfJTrffNodf

    }  // innfr dlbss AddfssiblfJTrff

} // End of dlbss JTrff
