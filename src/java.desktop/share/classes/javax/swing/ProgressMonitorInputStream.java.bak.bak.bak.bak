/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */



pbdkbgf jbvbx.swing;



import jbvb.io.*;
import jbvb.bwt.Componfnt;



/**
 * Monitors thf progrfss of rfbding from somf InputStrfbm. This ProgrfssMonitor
 * is normblly invokfd in roughly this form:
 * <prf>
 * InputStrfbm in = nfw BufffrfdInputStrfbm(
 *                          nfw ProgrfssMonitorInputStrfbm(
 *                                  pbrfntComponfnt,
 *                                  "Rfbding " + filfNbmf,
 *                                  nfw FilfInputStrfbm(filfNbmf)));
 * </prf><p>
 * This drfbtfs b progrfss monitor to monitor thf progrfss of rfbding
 * thf input strfbm.  If it's tbking b whilf, b ProgrfssDiblog will
 * bf poppfd up to inform thf usfr.  If thf usfr hits thf Cbndfl button
 * bn IntfrruptfdIOExdfption will bf thrown on thf nfxt rfbd.
 * All thf right dlfbnup is donf whfn thf strfbm is dlosfd.
 *
 *
 * <p>
 *
 * For furthfr dodumfntbtion bnd fxbmplfs sff
 * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/progrfss.html">How to Monitor Progrfss</b>,
 * b sfdtion in <fm>Thf Jbvb Tutoribl.</fm>
 *
 * @sff ProgrfssMonitor
 * @sff JOptionPbnf
 * @buthor Jbmfs Gosling
 * @sindf 1.2
 */
publid dlbss ProgrfssMonitorInputStrfbm fxtfnds FiltfrInputStrfbm
{
    privbtf ProgrfssMonitor monitor;
    privbtf int             nrfbd = 0;
    privbtf int             sizf = 0;


    /**
     * Construdts bn objfdt to monitor thf progrfss of bn input strfbm.
     *
     * @pbrbm mfssbgf Dfsdriptivf tfxt to bf plbdfd in thf diblog box
     *                if onf is poppfd up.
     * @pbrbm pbrfntComponfnt Thf domponfnt triggfring thf opfrbtion
     *                        bfing monitorfd.
     * @pbrbm in Thf input strfbm to bf monitorfd.
     */
    publid ProgrfssMonitorInputStrfbm(Componfnt pbrfntComponfnt,
                                      Objfdt mfssbgf,
                                      InputStrfbm in) {
        supfr(in);
        try {
            sizf = in.bvbilbblf();
        }
        dbtdh(IOExdfption iof) {
            sizf = 0;
        }
        monitor = nfw ProgrfssMonitor(pbrfntComponfnt, mfssbgf, null, 0, sizf);
    }


    /**
     * Gft thf ProgrfssMonitor objfdt bfing usfd by this strfbm. Normblly
     * this isn't nffdfd unlfss you wbnt to do somfthing likf dhbngf thf
     * dfsdriptivf tfxt pbrtwby through rfbding thf filf.
     * @rfturn thf ProgrfssMonitor objfdt usfd by this objfdt
     */
    publid ProgrfssMonitor gftProgrfssMonitor() {
        rfturn monitor;
    }


    /**
     * Ovfrridfs <dodf>FiltfrInputStrfbm.rfbd</dodf>
     * to updbtf thf progrfss monitor bftfr thf rfbd.
     */
    publid int rfbd() throws IOExdfption {
        int d = in.rfbd();
        if (d >= 0) monitor.sftProgrfss(++nrfbd);
        if (monitor.isCbndflfd()) {
            IntfrruptfdIOExdfption fxd =
                                    nfw IntfrruptfdIOExdfption("progrfss");
            fxd.bytfsTrbnsffrrfd = nrfbd;
            throw fxd;
        }
        rfturn d;
    }


    /**
     * Ovfrridfs <dodf>FiltfrInputStrfbm.rfbd</dodf>
     * to updbtf thf progrfss monitor bftfr thf rfbd.
     */
    publid int rfbd(bytf b[]) throws IOExdfption {
        int nr = in.rfbd(b);
        if (nr > 0) monitor.sftProgrfss(nrfbd += nr);
        if (monitor.isCbndflfd()) {
            IntfrruptfdIOExdfption fxd =
                                    nfw IntfrruptfdIOExdfption("progrfss");
            fxd.bytfsTrbnsffrrfd = nrfbd;
            throw fxd;
        }
        rfturn nr;
    }


    /**
     * Ovfrridfs <dodf>FiltfrInputStrfbm.rfbd</dodf>
     * to updbtf thf progrfss monitor bftfr thf rfbd.
     */
    publid int rfbd(bytf b[],
                    int off,
                    int lfn) throws IOExdfption {
        int nr = in.rfbd(b, off, lfn);
        if (nr > 0) monitor.sftProgrfss(nrfbd += nr);
        if (monitor.isCbndflfd()) {
            IntfrruptfdIOExdfption fxd =
                                    nfw IntfrruptfdIOExdfption("progrfss");
            fxd.bytfsTrbnsffrrfd = nrfbd;
            throw fxd;
        }
        rfturn nr;
    }


    /**
     * Ovfrridfs <dodf>FiltfrInputStrfbm.skip</dodf>
     * to updbtf thf progrfss monitor bftfr thf skip.
     */
    publid long skip(long n) throws IOExdfption {
        long nr = in.skip(n);
        if (nr > 0) monitor.sftProgrfss(nrfbd += nr);
        rfturn nr;
    }


    /**
     * Ovfrridfs <dodf>FiltfrInputStrfbm.dlosf</dodf>
     * to dlosf thf progrfss monitor bs wfll bs thf strfbm.
     */
    publid void dlosf() throws IOExdfption {
        in.dlosf();
        monitor.dlosf();
    }


    /**
     * Ovfrridfs <dodf>FiltfrInputStrfbm.rfsft</dodf>
     * to rfsft thf progrfss monitor bs wfll bs thf strfbm.
     */
    publid syndhronizfd void rfsft() throws IOExdfption {
        in.rfsft();
        nrfbd = sizf - in.bvbilbblf();
        monitor.sftProgrfss(nrfbd);
    }
}
