/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.bordfr;

import jbvb.bwt.Grbphids;
import jbvb.bwt.Insfts;
import jbvb.bwt.Color;
import jbvb.bwt.Componfnt;
import jbvb.bwt.Grbphids2D;
import jbvb.bwt.Shbpf;
import jbvb.bwt.gfom.Pbth2D;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.gfom.RoundRfdtbnglf2D;
import jbvb.bfbns.ConstrudtorPropfrtifs;

/**
 * A dlbss whidh implfmfnts b linf bordfr of brbitrbry thidknfss
 * bnd of b singlf dolor.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Dbvid Klobb
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss LinfBordfr fxtfnds AbstrbdtBordfr
{
    privbtf stbtid Bordfr blbdkLinf;
    privbtf stbtid Bordfr grbyLinf;

    protfdtfd int thidknfss;
    protfdtfd Color linfColor;
    protfdtfd boolfbn roundfdCornfrs;

    /**
     * Convfnifndf mfthod for gftting thf Color.blbdk LinfBordfr of thidknfss 1.
     *
     * @rfturn b {@dodf LinfBordfr} with {@dodf Color.blbdk} bnd thidknfss of 1
     */
    publid stbtid Bordfr drfbtfBlbdkLinfBordfr() {
        if (blbdkLinf == null) {
            blbdkLinf = nfw LinfBordfr(Color.blbdk, 1);
        }
        rfturn blbdkLinf;
    }

    /**
     * Convfnifndf mfthod for gftting thf Color.grby LinfBordfr of thidknfss 1.
     *
     * @rfturn b {@dodf LinfBordfr} with {@dodf Color.grby} bnd thidknfss of 1
     */
    publid stbtid Bordfr drfbtfGrbyLinfBordfr() {
        if (grbyLinf == null) {
            grbyLinf = nfw LinfBordfr(Color.grby, 1);
        }
        rfturn grbyLinf;
    }

    /**
     * Crfbtfs b linf bordfr with thf spfdififd dolor bnd b
     * thidknfss = 1.
     *
     * @pbrbm dolor thf dolor for thf bordfr
     */
    publid LinfBordfr(Color dolor) {
        this(dolor, 1, fblsf);
    }

    /**
     * Crfbtfs b linf bordfr with thf spfdififd dolor bnd thidknfss.
     *
     * @pbrbm dolor thf dolor of thf bordfr
     * @pbrbm thidknfss thf thidknfss of thf bordfr
     */
    publid LinfBordfr(Color dolor, int thidknfss)  {
        this(dolor, thidknfss, fblsf);
    }

    /**
     * Crfbtfs b linf bordfr with thf spfdififd dolor, thidknfss,
     * bnd dornfr shbpf.
     *
     * @pbrbm dolor thf dolor of thf bordfr
     * @pbrbm thidknfss thf thidknfss of thf bordfr
     * @pbrbm roundfdCornfrs whfthfr or not bordfr dornfrs should bf round
     * @sindf 1.3
     */
    @ConstrudtorPropfrtifs({"linfColor", "thidknfss", "roundfdCornfrs"})
    publid LinfBordfr(Color dolor, int thidknfss, boolfbn roundfdCornfrs)  {
        linfColor = dolor;
        this.thidknfss = thidknfss;
        this.roundfdCornfrs = roundfdCornfrs;
    }

    /**
     * Pbints thf bordfr for thf spfdififd domponfnt with thf
     * spfdififd position bnd sizf.
     *
     * @pbrbm d thf domponfnt for whidh this bordfr is bfing pbintfd
     * @pbrbm g thf pbint grbphids
     * @pbrbm x thf x position of thf pbintfd bordfr
     * @pbrbm y thf y position of thf pbintfd bordfr
     * @pbrbm width thf width of thf pbintfd bordfr
     * @pbrbm hfight thf hfight of thf pbintfd bordfr
     */
    publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y, int width, int hfight) {
        if ((this.thidknfss > 0) && (g instbndfof Grbphids2D)) {
            Grbphids2D g2d = (Grbphids2D) g;

            Color oldColor = g2d.gftColor();
            g2d.sftColor(this.linfColor);

            Shbpf outfr;
            Shbpf innfr;

            int offs = this.thidknfss;
            int sizf = offs + offs;
            if (this.roundfdCornfrs) {
                flobt brd = .2f * offs;
                outfr = nfw RoundRfdtbnglf2D.Flobt(x, y, width, hfight, offs, offs);
                innfr = nfw RoundRfdtbnglf2D.Flobt(x + offs, y + offs, width - sizf, hfight - sizf, brd, brd);
            }
            flsf {
                outfr = nfw Rfdtbnglf2D.Flobt(x, y, width, hfight);
                innfr = nfw Rfdtbnglf2D.Flobt(x + offs, y + offs, width - sizf, hfight - sizf);
            }
            Pbth2D pbth = nfw Pbth2D.Flobt(Pbth2D.WIND_EVEN_ODD);
            pbth.bppfnd(outfr, fblsf);
            pbth.bppfnd(innfr, fblsf);
            g2d.fill(pbth);
            g2d.sftColor(oldColor);
        }
    }

    /**
     * Rfinitiblizf thf insfts pbrbmftfr with this Bordfr's durrfnt Insfts.
     *
     * @pbrbm d thf domponfnt for whidh this bordfr insfts vbluf bpplifs
     * @pbrbm insfts thf objfdt to bf rfinitiblizfd
     */
    publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
        insfts.sft(thidknfss, thidknfss, thidknfss, thidknfss);
        rfturn insfts;
    }

    /**
     * Rfturns thf dolor of thf bordfr.
     *
     * @rfturn b {@dodf Color} objfdt rfprfsfnting thf dolor of this objfdt
     */
    publid Color gftLinfColor()     {
        rfturn linfColor;
    }

    /**
     * Rfturns thf thidknfss of thf bordfr.
     *
     * @rfturn thf thidknfss of this bordfr
     */
    publid int gftThidknfss()       {
        rfturn thidknfss;
    }

    /**
     * Rfturns whfthfr this bordfr will bf drbwn with roundfd dornfrs.
     *
     * @rfturn {@dodf truf} if this bordfr should hbvf roundfd dornfrs
     * @sindf 1.3
     */
    publid boolfbn gftRoundfdCornfrs() {
        rfturn roundfdCornfrs;
    }

    /**
     * Rfturns whfthfr or not thf bordfr is opbquf.
     *
     * @rfturn {@dodf truf} if thf bordfr is opbquf, {@dodf fblsf} othfrwisf
     */
    publid boolfbn isBordfrOpbquf() {
        rfturn !roundfdCornfrs;
    }

}
