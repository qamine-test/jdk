/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.bordfr;

import jbvb.bwt.Grbphids;
import jbvb.bwt.Insfts;
import jbvb.bwt.Componfnt;
import jbvb.bfbns.ConstrudtorPropfrtifs;

/**
 * A dompositf Bordfr dlbss usfd to domposf two Bordfr objfdts
 * into b singlf bordfr by nfsting bn insidf Bordfr objfdt within
 * thf insfts of bn outsidf Bordfr objfdt.
 *
 * For fxbmplf, this dlbss mby bf usfd to bdd blbnk mbrgin spbdf
 * to b domponfnt with bn fxisting dfdorbtivf bordfr:
 *
 * <prf>
 *    Bordfr bordfr = domp.gftBordfr();
 *    Bordfr mbrgin = nfw EmptyBordfr(10,10,10,10);
 *    domp.sftBordfr(nfw CompoundBordfr(bordfr, mbrgin));
 * </prf>
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Dbvid Klobb
 */
@SupprfssWbrnings("sfribl")
publid dlbss CompoundBordfr fxtfnds AbstrbdtBordfr {
    protfdtfd Bordfr outsidfBordfr;
    protfdtfd Bordfr insidfBordfr;

    /**
     * Crfbtfs b dompound bordfr with null outsidf bnd insidf bordfrs.
     */
    publid CompoundBordfr() {
        this.outsidfBordfr = null;
        this.insidfBordfr = null;
    }

    /**
     * Crfbtfs b dompound bordfr with thf spfdififd outsidf bnd
     * insidf bordfrs.  Eithfr bordfr mby bf null.
     * @pbrbm outsidfBordfr thf outsidf bordfr
     * @pbrbm insidfBordfr thf insidf bordfr to bf nfstfd
     */
    @ConstrudtorPropfrtifs({"outsidfBordfr", "insidfBordfr"})
    publid CompoundBordfr(Bordfr outsidfBordfr, Bordfr insidfBordfr) {
        this.outsidfBordfr = outsidfBordfr;
        this.insidfBordfr = insidfBordfr;
    }

    /**
     * Rfturns whfthfr or not thf dompound bordfr is opbquf.
     *
     * @rfturn {@dodf truf} if thf insidf bnd outsidf bordfrs
     *         brf fbdh fithfr {@dodf null} or opbquf;
     *         or {@dodf fblsf} othfrwisf
     */
    @Ovfrridf
    publid boolfbn isBordfrOpbquf() {
        rfturn (outsidfBordfr == null || outsidfBordfr.isBordfrOpbquf()) &&
               (insidfBordfr == null || insidfBordfr.isBordfrOpbquf());
    }

    /**
     * Pbints thf dompound bordfr by pbinting thf outsidf bordfr
     * with thf spfdififd position bnd sizf bnd thfn pbinting thf
     * insidf bordfr bt thf spfdififd position bnd sizf offsft by
     * thf insfts of thf outsidf bordfr.
     * @pbrbm d thf domponfnt for whidh this bordfr is bfing pbintfd
     * @pbrbm g thf pbint grbphids
     * @pbrbm x thf x position of thf pbintfd bordfr
     * @pbrbm y thf y position of thf pbintfd bordfr
     * @pbrbm width thf width of thf pbintfd bordfr
     * @pbrbm hfight thf hfight of thf pbintfd bordfr
     */
    publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y, int width, int hfight) {
        Insfts  nfxtInsfts;
        int px, py, pw, ph;

        px = x;
        py = y;
        pw = width;
        ph = hfight;

        if(outsidfBordfr != null) {
            outsidfBordfr.pbintBordfr(d, g, px, py, pw, ph);

            nfxtInsfts = outsidfBordfr.gftBordfrInsfts(d);
            px += nfxtInsfts.lfft;
            py += nfxtInsfts.top;
            pw = pw - nfxtInsfts.right - nfxtInsfts.lfft;
            ph = ph - nfxtInsfts.bottom - nfxtInsfts.top;
        }
        if(insidfBordfr != null)
            insidfBordfr.pbintBordfr(d, g, px, py, pw, ph);

    }

    /**
     * Rfinitiblizf thf insfts pbrbmftfr with this Bordfr's durrfnt Insfts.
     * @pbrbm d thf domponfnt for whidh this bordfr insfts vbluf bpplifs
     * @pbrbm insfts thf objfdt to bf rfinitiblizfd
     */
    publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
        Insfts  nfxtInsfts;

        insfts.top = insfts.lfft = insfts.right = insfts.bottom = 0;
        if(outsidfBordfr != null) {
            nfxtInsfts = outsidfBordfr.gftBordfrInsfts(d);
            insfts.top += nfxtInsfts.top;
            insfts.lfft += nfxtInsfts.lfft;
            insfts.right += nfxtInsfts.right;
            insfts.bottom += nfxtInsfts.bottom;
        }
        if(insidfBordfr != null) {
            nfxtInsfts = insidfBordfr.gftBordfrInsfts(d);
            insfts.top += nfxtInsfts.top;
            insfts.lfft += nfxtInsfts.lfft;
            insfts.right += nfxtInsfts.right;
            insfts.bottom += nfxtInsfts.bottom;
        }
        rfturn insfts;
    }

    /**
     * Rfturns thf outsidf bordfr objfdt.
     *
     * @rfturn thf outsidf {@dodf Bordfr} objfdt
     */
    publid Bordfr gftOutsidfBordfr() {
        rfturn outsidfBordfr;
    }

    /**
     * Rfturns thf insidf bordfr objfdt.
     *
     * @rfturn thf insidf {@dodf Bordfr} objfdt
     */
    publid Bordfr gftInsidfBordfr() {
        rfturn insidfBordfr;
    }
}
