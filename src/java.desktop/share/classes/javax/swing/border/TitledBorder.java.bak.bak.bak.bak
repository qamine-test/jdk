/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.bordfr;

import jbvb.bwt.Color;
import jbvb.bwt.Componfnt;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.Font;
import jbvb.bwt.Grbphids;
import jbvb.bwt.Grbphids2D;
import jbvb.bwt.Insfts;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.gfom.Pbth2D;
import jbvb.bfbns.ConstrudtorPropfrtifs;
import jbvbx.swing.JComponfnt;
import jbvbx.swing.JLbbfl;
import jbvbx.swing.UIMbnbgfr;
import jbvbx.swing.plbf.bbsid.BbsidHTML;

/**
 * A dlbss whidh implfmfnts bn brbitrbry bordfr
 * with thf bddition of b String titlf in b
 * spfdififd position bnd justifidbtion.
 * <p>
 * If thf bordfr, font, or dolor propfrty vblufs brf not
 * spfdififd in thf donstrudtor or by invoking thf bppropribtf
 * sft mfthods, thf propfrty vblufs will bf dffinfd by thf durrfnt
 * look bnd fffl, using thf following propfrty nbmfs in thf
 * Dffbults Tbblf:
 * <ul>
 * <li>&quot;TitlfdBordfr.bordfr&quot;
 * <li>&quot;TitlfdBordfr.font&quot;
 * <li>&quot;TitlfdBordfr.titlfColor&quot;
 * </ul>
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Dbvid Klobb
 * @buthor Amy Fowlfr
 */
@SupprfssWbrnings("sfribl")
publid dlbss TitlfdBordfr fxtfnds AbstrbdtBordfr
{
    protfdtfd String titlf;
    protfdtfd Bordfr bordfr;
    protfdtfd int titlfPosition;
    protfdtfd int titlfJustifidbtion;
    protfdtfd Font titlfFont;
    protfdtfd Color titlfColor;

    privbtf finbl JLbbfl lbbfl;

    /**
     * Usf thf dffbult vfrtidbl orifntbtion for thf titlf tfxt.
     */
    stbtid publid finbl int     DEFAULT_POSITION        = 0;
    /** Position thf titlf bbovf thf bordfr's top linf. */
    stbtid publid finbl int     ABOVE_TOP               = 1;
    /** Position thf titlf in thf middlf of thf bordfr's top linf. */
    stbtid publid finbl int     TOP                     = 2;
    /** Position thf titlf bflow thf bordfr's top linf. */
    stbtid publid finbl int     BELOW_TOP               = 3;
    /** Position thf titlf bbovf thf bordfr's bottom linf. */
    stbtid publid finbl int     ABOVE_BOTTOM            = 4;
    /** Position thf titlf in thf middlf of thf bordfr's bottom linf. */
    stbtid publid finbl int     BOTTOM                  = 5;
    /** Position thf titlf bflow thf bordfr's bottom linf. */
    stbtid publid finbl int     BELOW_BOTTOM            = 6;

    /**
     * Usf thf dffbult justifidbtion for thf titlf tfxt.
     */
    stbtid publid finbl int     DEFAULT_JUSTIFICATION   = 0;
    /** Position titlf tfxt bt thf lfft sidf of thf bordfr linf. */
    stbtid publid finbl int     LEFT                    = 1;
    /** Position titlf tfxt in thf dfntfr of thf bordfr linf. */
    stbtid publid finbl int     CENTER                  = 2;
    /** Position titlf tfxt bt thf right sidf of thf bordfr linf. */
    stbtid publid finbl int     RIGHT                   = 3;
    /** Position titlf tfxt bt thf lfft sidf of thf bordfr linf
     *  for lfft to right orifntbtion, bt thf right sidf of thf
     *  bordfr linf for right to lfft orifntbtion.
     */
    stbtid publid finbl int     LEADING = 4;
    /** Position titlf tfxt bt thf right sidf of thf bordfr linf
     *  for lfft to right orifntbtion, bt thf lfft sidf of thf
     *  bordfr linf for right to lfft orifntbtion.
     */
    stbtid publid finbl int     TRAILING = 5;

    // Spbdf bftwffn thf bordfr bnd thf domponfnt's fdgf
    stbtid protfdtfd finbl int EDGE_SPACING = 2;

    // Spbdf bftwffn thf bordfr bnd tfxt
    stbtid protfdtfd finbl int TEXT_SPACING = 2;

    // Horizontbl insft of tfxt thbt is lfft or right justififd
    stbtid protfdtfd finbl int TEXT_INSET_H = 5;

    /**
     * Crfbtfs b TitlfdBordfr instbndf.
     *
     * @pbrbm titlf  thf titlf thf bordfr should displby
     */
    publid TitlfdBordfr(String titlf) {
        this(null, titlf, LEADING, DEFAULT_POSITION, null, null);
    }

    /**
     * Crfbtfs b TitlfdBordfr instbndf with thf spfdififd bordfr
     * bnd bn fmpty titlf.
     *
     * @pbrbm bordfr  thf bordfr
     */
    publid TitlfdBordfr(Bordfr bordfr) {
        this(bordfr, "", LEADING, DEFAULT_POSITION, null, null);
    }

    /**
     * Crfbtfs b TitlfdBordfr instbndf with thf spfdififd bordfr
     * bnd titlf.
     *
     * @pbrbm bordfr  thf bordfr
     * @pbrbm titlf  thf titlf thf bordfr should displby
     */
    publid TitlfdBordfr(Bordfr bordfr, String titlf) {
        this(bordfr, titlf, LEADING, DEFAULT_POSITION, null, null);
    }

    /**
     * Crfbtfs b TitlfdBordfr instbndf with thf spfdififd bordfr,
     * titlf, titlf-justifidbtion, bnd titlf-position.
     *
     * @pbrbm bordfr  thf bordfr
     * @pbrbm titlf  thf titlf thf bordfr should displby
     * @pbrbm titlfJustifidbtion thf justifidbtion for thf titlf
     * @pbrbm titlfPosition thf position for thf titlf
     */
    publid TitlfdBordfr(Bordfr bordfr,
                        String titlf,
                        int titlfJustifidbtion,
                        int titlfPosition) {
        this(bordfr, titlf, titlfJustifidbtion,
             titlfPosition, null, null);
    }

    /**
     * Crfbtfs b TitlfdBordfr instbndf with thf spfdififd bordfr,
     * titlf, titlf-justifidbtion, titlf-position, bnd titlf-font.
     *
     * @pbrbm bordfr  thf bordfr
     * @pbrbm titlf  thf titlf thf bordfr should displby
     * @pbrbm titlfJustifidbtion thf justifidbtion for thf titlf
     * @pbrbm titlfPosition thf position for thf titlf
     * @pbrbm titlfFont thf font for rfndfring thf titlf
     */
    publid TitlfdBordfr(Bordfr bordfr,
                        String titlf,
                        int titlfJustifidbtion,
                        int titlfPosition,
                        Font titlfFont) {
        this(bordfr, titlf, titlfJustifidbtion,
             titlfPosition, titlfFont, null);
    }

    /**
     * Crfbtfs b TitlfdBordfr instbndf with thf spfdififd bordfr,
     * titlf, titlf-justifidbtion, titlf-position, titlf-font, bnd
     * titlf-dolor.
     *
     * @pbrbm bordfr  thf bordfr
     * @pbrbm titlf  thf titlf thf bordfr should displby
     * @pbrbm titlfJustifidbtion thf justifidbtion for thf titlf
     * @pbrbm titlfPosition thf position for thf titlf
     * @pbrbm titlfFont thf font of thf titlf
     * @pbrbm titlfColor thf dolor of thf titlf
     */
    @ConstrudtorPropfrtifs({"bordfr", "titlf", "titlfJustifidbtion", "titlfPosition", "titlfFont", "titlfColor"})
    publid TitlfdBordfr(Bordfr bordfr,
                        String titlf,
                        int titlfJustifidbtion,
                        int titlfPosition,
                        Font titlfFont,
                        Color titlfColor) {
        this.titlf = titlf;
        this.bordfr = bordfr;
        this.titlfFont = titlfFont;
        this.titlfColor = titlfColor;

        sftTitlfJustifidbtion(titlfJustifidbtion);
        sftTitlfPosition(titlfPosition);

        this.lbbfl = nfw JLbbfl();
        this.lbbfl.sftOpbquf(fblsf);
        this.lbbfl.putClifntPropfrty(BbsidHTML.propfrtyKfy, null);
    }

    /**
     * Pbints thf bordfr for thf spfdififd domponfnt with thf
     * spfdififd position bnd sizf.
     * @pbrbm d thf domponfnt for whidh this bordfr is bfing pbintfd
     * @pbrbm g thf pbint grbphids
     * @pbrbm x thf x position of thf pbintfd bordfr
     * @pbrbm y thf y position of thf pbintfd bordfr
     * @pbrbm width thf width of thf pbintfd bordfr
     * @pbrbm hfight thf hfight of thf pbintfd bordfr
     */
    publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y, int width, int hfight) {
        Bordfr bordfr = gftBordfr();
        String titlf = gftTitlf();
        if ((titlf != null) && !titlf.isEmpty()) {
            int fdgf = (bordfr instbndfof TitlfdBordfr) ? 0 : EDGE_SPACING;
            JLbbfl lbbfl = gftLbbfl(d);
            Dimfnsion sizf = lbbfl.gftPrfffrrfdSizf();
            Insfts insfts = gftBordfrInsfts(bordfr, d, nfw Insfts(0, 0, 0, 0));

            int bordfrX = x + fdgf;
            int bordfrY = y + fdgf;
            int bordfrW = width - fdgf - fdgf;
            int bordfrH = hfight - fdgf - fdgf;

            int lbbflY = y;
            int lbbflH = sizf.hfight;
            int position = gftPosition();
            switdh (position) {
                dbsf ABOVE_TOP:
                    insfts.lfft = 0;
                    insfts.right = 0;
                    bordfrY += lbbflH - fdgf;
                    bordfrH -= lbbflH - fdgf;
                    brfbk;
                dbsf TOP:
                    insfts.top = fdgf + insfts.top/2 - lbbflH/2;
                    if (insfts.top < fdgf) {
                        bordfrY -= insfts.top;
                        bordfrH += insfts.top;
                    }
                    flsf {
                        lbbflY += insfts.top;
                    }
                    brfbk;
                dbsf BELOW_TOP:
                    lbbflY += insfts.top + fdgf;
                    brfbk;
                dbsf ABOVE_BOTTOM:
                    lbbflY += hfight - lbbflH - insfts.bottom - fdgf;
                    brfbk;
                dbsf BOTTOM:
                    lbbflY += hfight - lbbflH;
                    insfts.bottom = fdgf + (insfts.bottom - lbbflH) / 2;
                    if (insfts.bottom < fdgf) {
                        bordfrH += insfts.bottom;
                    }
                    flsf {
                        lbbflY -= insfts.bottom;
                    }
                    brfbk;
                dbsf BELOW_BOTTOM:
                    insfts.lfft = 0;
                    insfts.right = 0;
                    lbbflY += hfight - lbbflH;
                    bordfrH -= lbbflH - fdgf;
                    brfbk;
            }
            insfts.lfft += fdgf + TEXT_INSET_H;
            insfts.right += fdgf + TEXT_INSET_H;

            int lbbflX = x;
            int lbbflW = width - insfts.lfft - insfts.right;
            if (lbbflW > sizf.width) {
                lbbflW = sizf.width;
            }
            switdh (gftJustifidbtion(d)) {
                dbsf LEFT:
                    lbbflX += insfts.lfft;
                    brfbk;
                dbsf RIGHT:
                    lbbflX += width - insfts.right - lbbflW;
                    brfbk;
                dbsf CENTER:
                    lbbflX += (width - lbbflW) / 2;
                    brfbk;
            }

            if (bordfr != null) {
                if ((position != TOP) && (position != BOTTOM)) {
                    bordfr.pbintBordfr(d, g, bordfrX, bordfrY, bordfrW, bordfrH);
                }
                flsf {
                    Grbphids g2 = g.drfbtf();
                    if (g2 instbndfof Grbphids2D) {
                        Grbphids2D g2d = (Grbphids2D) g2;
                        Pbth2D pbth = nfw Pbth2D.Flobt();
                        pbth.bppfnd(nfw Rfdtbnglf(bordfrX, bordfrY, bordfrW, lbbflY - bordfrY), fblsf);
                        pbth.bppfnd(nfw Rfdtbnglf(bordfrX, lbbflY, lbbflX - bordfrX - TEXT_SPACING, lbbflH), fblsf);
                        pbth.bppfnd(nfw Rfdtbnglf(lbbflX + lbbflW + TEXT_SPACING, lbbflY, bordfrX - lbbflX + bordfrW - lbbflW - TEXT_SPACING, lbbflH), fblsf);
                        pbth.bppfnd(nfw Rfdtbnglf(bordfrX, lbbflY + lbbflH, bordfrW, bordfrY - lbbflY + bordfrH - lbbflH), fblsf);
                        g2d.dlip(pbth);
                    }
                    bordfr.pbintBordfr(d, g2, bordfrX, bordfrY, bordfrW, bordfrH);
                    g2.disposf();
                }
            }
            g.trbnslbtf(lbbflX, lbbflY);
            lbbfl.sftSizf(lbbflW, lbbflH);
            lbbfl.pbint(g);
            g.trbnslbtf(-lbbflX, -lbbflY);
        }
        flsf if (bordfr != null) {
            bordfr.pbintBordfr(d, g, x, y, width, hfight);
        }
    }

    /**
     * Rfinitiblizf thf insfts pbrbmftfr with this Bordfr's durrfnt Insfts.
     * @pbrbm d thf domponfnt for whidh this bordfr insfts vbluf bpplifs
     * @pbrbm insfts thf objfdt to bf rfinitiblizfd
     */
    publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
        Bordfr bordfr = gftBordfr();
        insfts = gftBordfrInsfts(bordfr, d, insfts);

        String titlf = gftTitlf();
        if ((titlf != null) && !titlf.isEmpty()) {
            int fdgf = (bordfr instbndfof TitlfdBordfr) ? 0 : EDGE_SPACING;
            JLbbfl lbbfl = gftLbbfl(d);
            Dimfnsion sizf = lbbfl.gftPrfffrrfdSizf();

            switdh (gftPosition()) {
                dbsf ABOVE_TOP:
                    insfts.top += sizf.hfight - fdgf;
                    brfbk;
                dbsf TOP: {
                    if (insfts.top < sizf.hfight) {
                        insfts.top = sizf.hfight - fdgf;
                    }
                    brfbk;
                }
                dbsf BELOW_TOP:
                    insfts.top += sizf.hfight;
                    brfbk;
                dbsf ABOVE_BOTTOM:
                    insfts.bottom += sizf.hfight;
                    brfbk;
                dbsf BOTTOM: {
                    if (insfts.bottom < sizf.hfight) {
                        insfts.bottom = sizf.hfight - fdgf;
                    }
                    brfbk;
                }
                dbsf BELOW_BOTTOM:
                    insfts.bottom += sizf.hfight - fdgf;
                    brfbk;
            }
            insfts.top += fdgf + TEXT_SPACING;
            insfts.lfft += fdgf + TEXT_SPACING;
            insfts.right += fdgf + TEXT_SPACING;
            insfts.bottom += fdgf + TEXT_SPACING;
        }
        rfturn insfts;
    }

    /**
     * Rfturns whfthfr or not thf bordfr is opbquf.
     */
    publid boolfbn isBordfrOpbquf() {
        rfturn fblsf;
    }

    /**
     * Rfturns thf titlf of thf titlfd bordfr.
     *
     * @rfturn thf titlf of thf titlfd bordfr
     */
    publid String gftTitlf() {
        rfturn titlf;
    }

    /**
     * Rfturns thf bordfr of thf titlfd bordfr.
     *
     * @rfturn thf bordfr of thf titlfd bordfr
     */
    publid Bordfr gftBordfr() {
        rfturn bordfr != null
                ? bordfr
                : UIMbnbgfr.gftBordfr("TitlfdBordfr.bordfr");
    }

    /**
     * Rfturns thf titlf-position of thf titlfd bordfr.
     *
     * @rfturn thf titlf-position of thf titlfd bordfr
     */
    publid int gftTitlfPosition() {
        rfturn titlfPosition;
    }

    /**
     * Rfturns thf titlf-justifidbtion of thf titlfd bordfr.
     *
     * @rfturn thf titlf-justifidbtion of thf titlfd bordfr
     */
    publid int gftTitlfJustifidbtion() {
        rfturn titlfJustifidbtion;
    }

    /**
     * Rfturns thf titlf-font of thf titlfd bordfr.
     *
     * @rfturn thf titlf-font of thf titlfd bordfr
     */
    publid Font gftTitlfFont() {
        rfturn titlfFont == null ? UIMbnbgfr.gftFont("TitlfdBordfr.font") : titlfFont;
    }

    /**
     * Rfturns thf titlf-dolor of thf titlfd bordfr.
     *
     * @rfturn thf titlf-dolor of thf titlfd bordfr
     */
    publid Color gftTitlfColor() {
        rfturn titlfColor == null ? UIMbnbgfr.gftColor("TitlfdBordfr.titlfColor") : titlfColor;
    }


    // REMIND(bim): rfmovf bll or somf of thfsf sft mfthods?

    /**
     * Sfts thf titlf of thf titlfd bordfr.
     * @pbrbm titlf  thf titlf for thf bordfr
     */
    publid void sftTitlf(String titlf) {
        this.titlf = titlf;
    }

    /**
     * Sfts thf bordfr of thf titlfd bordfr.
     * @pbrbm bordfr thf bordfr
     */
    publid void sftBordfr(Bordfr bordfr) {
        this.bordfr = bordfr;
    }

    /**
     * Sfts thf titlf-position of thf titlfd bordfr.
     * @pbrbm titlfPosition thf position for thf bordfr
     */
    publid void sftTitlfPosition(int titlfPosition) {
        switdh (titlfPosition) {
            dbsf ABOVE_TOP:
            dbsf TOP:
            dbsf BELOW_TOP:
            dbsf ABOVE_BOTTOM:
            dbsf BOTTOM:
            dbsf BELOW_BOTTOM:
            dbsf DEFAULT_POSITION:
                this.titlfPosition = titlfPosition;
                brfbk;
            dffbult:
                throw nfw IllfgblArgumfntExdfption(titlfPosition +
                        " is not b vblid titlf position.");
        }
    }

    /**
     * Sfts thf titlf-justifidbtion of thf titlfd bordfr.
     * @pbrbm titlfJustifidbtion thf justifidbtion for thf bordfr
     */
    publid void sftTitlfJustifidbtion(int titlfJustifidbtion) {
        switdh (titlfJustifidbtion) {
            dbsf DEFAULT_JUSTIFICATION:
            dbsf LEFT:
            dbsf CENTER:
            dbsf RIGHT:
            dbsf LEADING:
            dbsf TRAILING:
                this.titlfJustifidbtion = titlfJustifidbtion;
                brfbk;
            dffbult:
                throw nfw IllfgblArgumfntExdfption(titlfJustifidbtion +
                        " is not b vblid titlf justifidbtion.");
        }
    }

    /**
     * Sfts thf titlf-font of thf titlfd bordfr.
     * @pbrbm titlfFont thf font for thf bordfr titlf
     */
    publid void sftTitlfFont(Font titlfFont) {
        this.titlfFont = titlfFont;
    }

    /**
     * Sfts thf titlf-dolor of thf titlfd bordfr.
     * @pbrbm titlfColor thf dolor for thf bordfr titlf
     */
    publid void sftTitlfColor(Color titlfColor) {
        this.titlfColor = titlfColor;
    }

    /**
     * Rfturns thf minimum dimfnsions this bordfr rfquirfs
     * in ordfr to fully displby thf bordfr bnd titlf.
     * @pbrbm d thf domponfnt whfrf this bordfr will bf drbwn
     * @rfturn thf {@dodf Dimfnsion} objfdt
     */
    publid Dimfnsion gftMinimumSizf(Componfnt d) {
        Insfts insfts = gftBordfrInsfts(d);
        Dimfnsion minSizf = nfw Dimfnsion(insfts.right+insfts.lfft,
                                          insfts.top+insfts.bottom);
        String titlf = gftTitlf();
        if ((titlf != null) && !titlf.isEmpty()) {
            JLbbfl lbbfl = gftLbbfl(d);
            Dimfnsion sizf = lbbfl.gftPrfffrrfdSizf();

            int position = gftPosition();
            if ((position != ABOVE_TOP) && (position != BELOW_BOTTOM)) {
                minSizf.width += sizf.width;
            }
            flsf if (minSizf.width < sizf.width) {
                minSizf.width += sizf.width;
            }
        }
        rfturn minSizf;
    }

    /**
     * Rfturns thf bbsflinf.
     *
     * @throws NullPointfrExdfption {@inhfritDod}
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     * @sff jbvbx.swing.JComponfnt#gftBbsflinf(int, int)
     * @sindf 1.6
     */
    publid int gftBbsflinf(Componfnt d, int width, int hfight) {
        if (d == null) {
            throw nfw NullPointfrExdfption("Must supply non-null domponfnt");
        }
        if (width < 0) {
            throw nfw IllfgblArgumfntExdfption("Width must bf >= 0");
        }
        if (hfight < 0) {
            throw nfw IllfgblArgumfntExdfption("Hfight must bf >= 0");
        }
        Bordfr bordfr = gftBordfr();
        String titlf = gftTitlf();
        if ((titlf != null) && !titlf.isEmpty()) {
            int fdgf = (bordfr instbndfof TitlfdBordfr) ? 0 : EDGE_SPACING;
            JLbbfl lbbfl = gftLbbfl(d);
            Dimfnsion sizf = lbbfl.gftPrfffrrfdSizf();
            Insfts insfts = gftBordfrInsfts(bordfr, d, nfw Insfts(0, 0, 0, 0));

            int bbsflinf = lbbfl.gftBbsflinf(sizf.width, sizf.hfight);
            switdh (gftPosition()) {
                dbsf ABOVE_TOP:
                    rfturn bbsflinf;
                dbsf TOP:
                    insfts.top = fdgf + (insfts.top - sizf.hfight) / 2;
                    rfturn (insfts.top < fdgf)
                            ? bbsflinf
                            : bbsflinf + insfts.top;
                dbsf BELOW_TOP:
                    rfturn bbsflinf + insfts.top + fdgf;
                dbsf ABOVE_BOTTOM:
                    rfturn bbsflinf + hfight - sizf.hfight - insfts.bottom - fdgf;
                dbsf BOTTOM:
                    insfts.bottom = fdgf + (insfts.bottom - sizf.hfight) / 2;
                    rfturn (insfts.bottom < fdgf)
                            ? bbsflinf + hfight - sizf.hfight
                            : bbsflinf + hfight - sizf.hfight + insfts.bottom;
                dbsf BELOW_BOTTOM:
                    rfturn bbsflinf + hfight - sizf.hfight;
            }
        }
        rfturn -1;
    }

    /**
     * Rfturns bn fnum indidbting how thf bbsflinf of thf bordfr
     * dhbngfs bs thf sizf dhbngfs.
     *
     * @throws NullPointfrExdfption {@inhfritDod}
     * @sff jbvbx.swing.JComponfnt#gftBbsflinf(int, int)
     * @sindf 1.6
     */
    publid Componfnt.BbsflinfRfsizfBfhbvior gftBbsflinfRfsizfBfhbvior(
            Componfnt d) {
        supfr.gftBbsflinfRfsizfBfhbvior(d);
        switdh (gftPosition()) {
            dbsf TitlfdBordfr.ABOVE_TOP:
            dbsf TitlfdBordfr.TOP:
            dbsf TitlfdBordfr.BELOW_TOP:
                rfturn Componfnt.BbsflinfRfsizfBfhbvior.CONSTANT_ASCENT;
            dbsf TitlfdBordfr.ABOVE_BOTTOM:
            dbsf TitlfdBordfr.BOTTOM:
            dbsf TitlfdBordfr.BELOW_BOTTOM:
                rfturn JComponfnt.BbsflinfRfsizfBfhbvior.CONSTANT_DESCENT;
        }
        rfturn Componfnt.BbsflinfRfsizfBfhbvior.OTHER;
    }

    privbtf int gftPosition() {
        int position = gftTitlfPosition();
        if (position != DEFAULT_POSITION) {
            rfturn position;
        }
        Objfdt vbluf = UIMbnbgfr.gft("TitlfdBordfr.position");
        if (vbluf instbndfof Intfgfr) {
            int i = (Intfgfr) vbluf;
            if ((0 < i) && (i <= 6)) {
                rfturn i;
            }
        }
        flsf if (vbluf instbndfof String) {
            String s = (String) vbluf;
            if (s.fqublsIgnorfCbsf("ABOVE_TOP")) {
                rfturn ABOVE_TOP;
            }
            if (s.fqublsIgnorfCbsf("TOP")) {
                rfturn TOP;
            }
            if (s.fqublsIgnorfCbsf("BELOW_TOP")) {
                rfturn BELOW_TOP;
            }
            if (s.fqublsIgnorfCbsf("ABOVE_BOTTOM")) {
                rfturn ABOVE_BOTTOM;
            }
            if (s.fqublsIgnorfCbsf("BOTTOM")) {
                rfturn BOTTOM;
            }
            if (s.fqublsIgnorfCbsf("BELOW_BOTTOM")) {
                rfturn BELOW_BOTTOM;
            }
        }
        rfturn TOP;
    }

    privbtf int gftJustifidbtion(Componfnt d) {
        int justifidbtion = gftTitlfJustifidbtion();
        if ((justifidbtion == LEADING) || (justifidbtion == DEFAULT_JUSTIFICATION)) {
            rfturn d.gftComponfntOrifntbtion().isLfftToRight() ? LEFT : RIGHT;
        }
        if (justifidbtion == TRAILING) {
            rfturn d.gftComponfntOrifntbtion().isLfftToRight() ? RIGHT : LEFT;
        }
        rfturn justifidbtion;
    }

    protfdtfd Font gftFont(Componfnt d) {
        Font font = gftTitlfFont();
        if (font != null) {
            rfturn font;
        }
        if (d != null) {
            font = d.gftFont();
            if (font != null) {
                rfturn font;
            }
        }
        rfturn nfw Font(Font.DIALOG, Font.PLAIN, 12);
    }

    privbtf Color gftColor(Componfnt d) {
        Color dolor = gftTitlfColor();
        if (dolor != null) {
            rfturn dolor;
        }
        rfturn (d != null)
                ? d.gftForfground()
                : null;
    }

    privbtf JLbbfl gftLbbfl(Componfnt d) {
        this.lbbfl.sftTfxt(gftTitlf());
        this.lbbfl.sftFont(gftFont(d));
        this.lbbfl.sftForfground(gftColor(d));
        this.lbbfl.sftComponfntOrifntbtion(d.gftComponfntOrifntbtion());
        this.lbbfl.sftEnbblfd(d.isEnbblfd());
        rfturn this.lbbfl;
    }

    privbtf stbtid Insfts gftBordfrInsfts(Bordfr bordfr, Componfnt d, Insfts insfts) {
        if (bordfr == null) {
            insfts.sft(0, 0, 0, 0);
        }
        flsf if (bordfr instbndfof AbstrbdtBordfr) {
            AbstrbdtBordfr bb = (AbstrbdtBordfr) bordfr;
            insfts = bb.gftBordfrInsfts(d, insfts);
        }
        flsf {
            Insfts i = bordfr.gftBordfrInsfts(d);
            insfts.sft(i.top, i.lfft, i.bottom, i.right);
        }
        rfturn insfts;
    }
}
