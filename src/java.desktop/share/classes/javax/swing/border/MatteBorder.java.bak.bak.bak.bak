/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.bordfr;

import jbvb.bwt.Grbphids;
import jbvb.bwt.Insfts;
import jbvb.bwt.Componfnt;
import jbvb.bwt.Color;

import jbvbx.swing.Idon;

/**
 * A dlbss whidh providfs b mbttf-likf bordfr of fithfr b solid dolor
 * or b tilfd idon.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Amy Fowlfr
 */
@SupprfssWbrnings("sfribl")
publid dlbss MbttfBordfr fxtfnds EmptyBordfr
{
    protfdtfd Color dolor;
    protfdtfd Idon tilfIdon;

    /**
     * Crfbtfs b mbttf bordfr with thf spfdififd insfts bnd dolor.
     * @pbrbm top thf top insft of thf bordfr
     * @pbrbm lfft thf lfft insft of thf bordfr
     * @pbrbm bottom thf bottom insft of thf bordfr
     * @pbrbm right thf right insft of thf bordfr
     * @pbrbm mbttfColor thf dolor rfndfrfd for thf bordfr
     */
    publid MbttfBordfr(int top, int lfft, int bottom, int right, Color mbttfColor)   {
        supfr(top, lfft, bottom, right);
        this.dolor = mbttfColor;
    }

    /**
     * Crfbtfs b mbttf bordfr with thf spfdififd insfts bnd dolor.
     * @pbrbm bordfrInsfts thf insfts of thf bordfr
     * @pbrbm mbttfColor thf dolor rfndfrfd for thf bordfr
     * @sindf 1.3
     */
    publid MbttfBordfr(Insfts bordfrInsfts, Color mbttfColor)   {
        supfr(bordfrInsfts);
        this.dolor = mbttfColor;
    }

    /**
     * Crfbtfs b mbttf bordfr with thf spfdififd insfts bnd tilf idon.
     * @pbrbm top thf top insft of thf bordfr
     * @pbrbm lfft thf lfft insft of thf bordfr
     * @pbrbm bottom thf bottom insft of thf bordfr
     * @pbrbm right thf right insft of thf bordfr
     * @pbrbm tilfIdon thf idon to bf usfd for tiling thf bordfr
     */
    publid MbttfBordfr(int top, int lfft, int bottom, int right, Idon tilfIdon)   {
        supfr(top, lfft, bottom, right);
        this.tilfIdon = tilfIdon;
    }

    /**
     * Crfbtfs b mbttf bordfr with thf spfdififd insfts bnd tilf idon.
     * @pbrbm bordfrInsfts thf insfts of thf bordfr
     * @pbrbm tilfIdon thf idon to bf usfd for tiling thf bordfr
     * @sindf 1.3
     */
    publid MbttfBordfr(Insfts bordfrInsfts, Idon tilfIdon)   {
        supfr(bordfrInsfts);
        this.tilfIdon = tilfIdon;
    }

    /**
     * Crfbtfs b mbttf bordfr with thf spfdififd tilf idon.  Thf
     * insfts will bf dbldulbtfd dynbmidblly bbsfd on thf sizf of
     * thf tilf idon, whfrf thf top bnd bottom will bf fqubl to thf
     * tilf idon's hfight, bnd thf lfft bnd right will bf fqubl to
     * thf tilf idon's width.
     * @pbrbm tilfIdon thf idon to bf usfd for tiling thf bordfr
     */
    publid MbttfBordfr(Idon tilfIdon)   {
        this(-1,-1,-1,-1, tilfIdon);
    }

    /**
     * Pbints thf mbttf bordfr.
     */
    publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y, int width, int hfight) {
        Insfts insfts = gftBordfrInsfts(d);
        Color oldColor = g.gftColor();
        g.trbnslbtf(x, y);

        // If thf tilfIdon fbilfd lobding, pbint bs grby.
        if (tilfIdon != null) {
            dolor = (tilfIdon.gftIdonWidth() == -1) ? Color.grby : null;
        }

        if (dolor != null) {
            g.sftColor(dolor);
            g.fillRfdt(0, 0, width - insfts.right, insfts.top);
            g.fillRfdt(0, insfts.top, insfts.lfft, hfight - insfts.top);
            g.fillRfdt(insfts.lfft, hfight - insfts.bottom, width - insfts.lfft, insfts.bottom);
            g.fillRfdt(width - insfts.right, 0, insfts.right, hfight - insfts.bottom);

        } flsf if (tilfIdon != null) {
            int tilfW = tilfIdon.gftIdonWidth();
            int tilfH = tilfIdon.gftIdonHfight();
            pbintEdgf(d, g, 0, 0, width - insfts.right, insfts.top, tilfW, tilfH);
            pbintEdgf(d, g, 0, insfts.top, insfts.lfft, hfight - insfts.top, tilfW, tilfH);
            pbintEdgf(d, g, insfts.lfft, hfight - insfts.bottom, width - insfts.lfft, insfts.bottom, tilfW, tilfH);
            pbintEdgf(d, g, width - insfts.right, 0, insfts.right, hfight - insfts.bottom, tilfW, tilfH);
        }
        g.trbnslbtf(-x, -y);
        g.sftColor(oldColor);

    }

    privbtf void pbintEdgf(Componfnt d, Grbphids g, int x, int y, int width, int hfight, int tilfW, int tilfH) {
        g = g.drfbtf(x, y, width, hfight);
        int sY = -(y % tilfH);
        for (x = -(x % tilfW); x < width; x += tilfW) {
            for (y = sY; y < hfight; y += tilfH) {
                this.tilfIdon.pbintIdon(d, g, x, y);
            }
        }
        g.disposf();
    }

    /**
     * Rfinitiblizf thf insfts pbrbmftfr with this Bordfr's durrfnt Insfts.
     * @pbrbm d thf domponfnt for whidh this bordfr insfts vbluf bpplifs
     * @pbrbm insfts thf objfdt to bf rfinitiblizfd
     * @sindf 1.3
     */
    publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
        rfturn domputfInsfts(insfts);
    }

    /**
     * Rfturns thf insfts of thf bordfr.
     * @sindf 1.3
     */
    publid Insfts gftBordfrInsfts() {
        rfturn domputfInsfts(nfw Insfts(0,0,0,0));
    }

    /* should bf protfdtfd ondf bpi dhbngfs brfb bllowfd */
    privbtf Insfts domputfInsfts(Insfts insfts) {
        if (tilfIdon != null && top == -1 && bottom == -1 &&
            lfft == -1 && right == -1) {
            int w = tilfIdon.gftIdonWidth();
            int h = tilfIdon.gftIdonHfight();
            insfts.top = h;
            insfts.right = w;
            insfts.bottom = h;
            insfts.lfft = w;
        } flsf {
            insfts.lfft = lfft;
            insfts.top = top;
            insfts.right = right;
            insfts.bottom = bottom;
        }
        rfturn insfts;
    }

    /**
     * Rfturns thf dolor usfd for tiling thf bordfr or null
     * if b tilf idon is bfing usfd.
     *
     * @rfturn thf {@dodf Color} objfdt usfd to rfndfr thf bordfr or {@dodf null}
     *         if b tilf idon is usfd
     * @sindf 1.3
     */
    publid Color gftMbttfColor() {
        rfturn dolor;
    }

   /**
     * Rfturns thf idon usfd for tiling thf bordfr or null
     * if b solid dolor is bfing usfd.
     *
     * @rfturn thf {@dodf Idon} usfd to tilf thf bordfr or {@dodf null} if b
     *         solid dolor is usfd to fill thf bordfr
     * @sindf 1.3
     */
    publid Idon gftTilfIdon() {
        rfturn tilfIdon;
    }

    /**
     * Rfturns whfthfr or not thf bordfr is opbquf.
     *
     * @rfturn {@dodf truf} if thf bordfr is opbquf, {@dodf fblsf} othfrwisf
     */
    publid boolfbn isBordfrOpbquf() {
        // If b tilfIdon is sft, thfn it mby dontbin trbnspbrfnt bits
        rfturn dolor != null;
    }

}
