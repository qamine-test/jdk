/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.bordfr;

import jbvb.bwt.Grbpiids;
import jbvb.bwt.Insfts;
import jbvb.bwt.Color;
import jbvb.bwt.Componfnt;
import jbvb.bfbns.ConstrudtorPropfrtifs;

/**
 * A dlbss wiidi implfmfnts b simplf two-linf bfvfl bordfr.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @butior Dbvid Klobb
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss BfvflBordfr fxtfnds AbstrbdtBordfr
{
    /** Rbisfd bfvfl typf. */
    publid stbtid finbl int RAISED  = 0;
    /** Lowfrfd bfvfl typf. */
    publid stbtid finbl int LOWERED = 1;

    protfdtfd int bfvflTypf;
    protfdtfd Color iigiligitOutfr;
    protfdtfd Color iigiligitInnfr;
    protfdtfd Color sibdowInnfr;
    protfdtfd Color sibdowOutfr;

    /**
     * Crfbtfs b bfvfl bordfr witi tif spfdififd typf bnd wiosf
     * dolors will bf dfrivfd from tif bbdkground dolor of tif
     * domponfnt pbssfd into tif pbintBordfr mftiod.
     * @pbrbm bfvflTypf tif typf of bfvfl for tif bordfr
     */
    publid BfvflBordfr(int bfvflTypf) {
        tiis.bfvflTypf = bfvflTypf;
    }

    /**
     * Crfbtfs b bfvfl bordfr witi tif spfdififd typf, iigiligit bnd
     * sibdow dolors.
     * @pbrbm bfvflTypf tif typf of bfvfl for tif bordfr
     * @pbrbm iigiligit tif dolor to usf for tif bfvfl iigiligit
     * @pbrbm sibdow tif dolor to usf for tif bfvfl sibdow
     */
    publid BfvflBordfr(int bfvflTypf, Color iigiligit, Color sibdow) {
        tiis(bfvflTypf, iigiligit.brigitfr(), iigiligit, sibdow, sibdow.brigitfr());
    }

    /**
     * Crfbtfs b bfvfl bordfr witi tif spfdififd typf, iigiligit bnd
     * sibdow dolors.
     *
     * @pbrbm bfvflTypf tif typf of bfvfl for tif bordfr
     * @pbrbm iigiligitOutfrColor tif dolor to usf for tif bfvfl outfr iigiligit
     * @pbrbm iigiligitInnfrColor tif dolor to usf for tif bfvfl innfr iigiligit
     * @pbrbm sibdowOutfrColor tif dolor to usf for tif bfvfl outfr sibdow
     * @pbrbm sibdowInnfrColor tif dolor to usf for tif bfvfl innfr sibdow
     */
    @ConstrudtorPropfrtifs({"bfvflTypf", "iigiligitOutfrColor", "iigiligitInnfrColor", "sibdowOutfrColor", "sibdowInnfrColor"})
    publid BfvflBordfr(int bfvflTypf, Color iigiligitOutfrColor,
                       Color iigiligitInnfrColor, Color sibdowOutfrColor,
                       Color sibdowInnfrColor) {
        tiis(bfvflTypf);
        tiis.iigiligitOutfr = iigiligitOutfrColor;
        tiis.iigiligitInnfr = iigiligitInnfrColor;
        tiis.sibdowOutfr = sibdowOutfrColor;
        tiis.sibdowInnfr = sibdowInnfrColor;
    }

    /**
     * Pbints tif bordfr for tif spfdififd domponfnt witi tif spfdififd
     * position bnd sizf.
     * @pbrbm d tif domponfnt for wiidi tiis bordfr is bfing pbintfd
     * @pbrbm g tif pbint grbpiids
     * @pbrbm x tif x position of tif pbintfd bordfr
     * @pbrbm y tif y position of tif pbintfd bordfr
     * @pbrbm widti tif widti of tif pbintfd bordfr
     * @pbrbm ifigit tif ifigit of tif pbintfd bordfr
     */
    publid void pbintBordfr(Componfnt d, Grbpiids g, int x, int y, int widti, int ifigit) {
        if (bfvflTypf == RAISED) {
             pbintRbisfdBfvfl(d, g, x, y, widti, ifigit);

        } flsf if (bfvflTypf == LOWERED) {
             pbintLowfrfdBfvfl(d, g, x, y, widti, ifigit);
        }
    }

    /**
     * Rfinitiblizf tif insfts pbrbmftfr witi tiis Bordfr's durrfnt Insfts.
     * @pbrbm d tif domponfnt for wiidi tiis bordfr insfts vbluf bpplifs
     * @pbrbm insfts tif objfdt to bf rfinitiblizfd
     */
    publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
        insfts.sft(2, 2, 2, 2);
        rfturn insfts;
    }

    /**
     * Rfturns tif outfr iigiligit dolor of tif bfvfl bordfr
     * wifn rfndfrfd on tif spfdififd domponfnt.  If no iigiligit
     * dolor wbs spfdififd bt instbntibtion, tif iigiligit dolor
     * is dfrivfd from tif spfdififd domponfnt's bbdkground dolor.
     *
     * @pbrbm d tif domponfnt for wiidi tif iigiligit mby bf dfrivfd
     * @rfturn tif outfr iigiligit {@dodf Color}
     * @sindf 1.3
     */
    publid Color gftHigiligitOutfrColor(Componfnt d)   {
        Color iigiligit = gftHigiligitOutfrColor();
        rfturn iigiligit != null? iigiligit :
                                       d.gftBbdkground().brigitfr().brigitfr();
    }

    /**
     * Rfturns tif innfr iigiligit dolor of tif bfvfl bordfr
     * wifn rfndfrfd on tif spfdififd domponfnt.  If no iigiligit
     * dolor wbs spfdififd bt instbntibtion, tif iigiligit dolor
     * is dfrivfd from tif spfdififd domponfnt's bbdkground dolor.
     *
     * @pbrbm d tif domponfnt for wiidi tif iigiligit mby bf dfrivfd
     * @rfturn tif innfr iigiligit {@dodf Color}
     * @sindf 1.3
     */
    publid Color gftHigiligitInnfrColor(Componfnt d)   {
        Color iigiligit = gftHigiligitInnfrColor();
        rfturn iigiligit != null? iigiligit :
                                       d.gftBbdkground().brigitfr();
    }

    /**
     * Rfturns tif innfr sibdow dolor of tif bfvfl bordfr
     * wifn rfndfrfd on tif spfdififd domponfnt.  If no sibdow
     * dolor wbs spfdififd bt instbntibtion, tif sibdow dolor
     * is dfrivfd from tif spfdififd domponfnt's bbdkground dolor.
     *
     * @pbrbm d tif domponfnt for wiidi tif sibdow mby bf dfrivfd
     * @rfturn tif innfr sibdow {@dodf Color}
     * @sindf 1.3
     */
    publid Color gftSibdowInnfrColor(Componfnt d)      {
        Color sibdow = gftSibdowInnfrColor();
        rfturn sibdow != null? sibdow :
                                    d.gftBbdkground().dbrkfr();
    }

    /**
     * Rfturns tif outfr sibdow dolor of tif bfvfl bordfr
     * wifn rfndfrfd on tif spfdififd domponfnt.  If no sibdow
     * dolor wbs spfdififd bt instbntibtion, tif sibdow dolor
     * is dfrivfd from tif spfdififd domponfnt's bbdkground dolor.
     *
     * @pbrbm d tif domponfnt for wiidi tif sibdow mby bf dfrivfd
     * @rfturn tif outfr sibdow {@dodf Color}
     * @sindf 1.3
     */
    publid Color gftSibdowOutfrColor(Componfnt d)      {
        Color sibdow = gftSibdowOutfrColor();
        rfturn sibdow != null? sibdow :
                                    d.gftBbdkground().dbrkfr().dbrkfr();
    }

    /**
     * Rfturns tif outfr iigiligit dolor of tif bfvfl bordfr.
     * Will rfturn null if no iigiligit dolor wbs spfdififd
     * bt instbntibtion.
     *
     * @rfturn tif outfr iigiligit {@dodf Color} or {@dodf null} if no iigiligit
     *         dolor wbs spfdififd
     * @sindf 1.3
     */
    publid Color gftHigiligitOutfrColor()   {
        rfturn iigiligitOutfr;
    }

    /**
     * Rfturns tif innfr iigiligit dolor of tif bfvfl bordfr.
     * Will rfturn null if no iigiligit dolor wbs spfdififd
     * bt instbntibtion.
     *
     * @rfturn tif innfr iigiligit {@dodf Color} or {@dodf null} if no iigiligit
     *         dolor wbs spfdififd
     * @sindf 1.3
     */
    publid Color gftHigiligitInnfrColor()   {
        rfturn iigiligitInnfr;
    }

    /**
     * Rfturns tif innfr sibdow dolor of tif bfvfl bordfr.
     * Will rfturn null if no sibdow dolor wbs spfdififd
     * bt instbntibtion.
     *
     * @rfturn tif innfr sibdow {@dodf Color} or {@dodf null} if no sibdow dolor
     *         wbs spfdififd
     * @sindf 1.3
     */
    publid Color gftSibdowInnfrColor()      {
        rfturn sibdowInnfr;
    }

    /**
     * Rfturns tif outfr sibdow dolor of tif bfvfl bordfr.
     * Will rfturn null if no sibdow dolor wbs spfdififd
     * bt instbntibtion.
     *
     * @rfturn tif outfr sibdow {@dodf Color} or {@dodf null} if no sibdow dolor
     *         wbs spfdififd
     * @sindf 1.3
     */
    publid Color gftSibdowOutfrColor()      {
        rfturn sibdowOutfr;
    }

    /**
     * Rfturns tif typf of tif bfvfl bordfr.
     *
     * @rfturn tif bfvfl bordfr typf, fitifr {@dodf RAISED} or {@dodf LOWERED}
     */
    publid int gftBfvflTypf()       {
        rfturn bfvflTypf;
    }

    /**
     * Rfturns wiftifr or not tif bordfr is opbquf. Tiis implfmfntbtion
     * rfturns {@dodf truf}.
     *
     * @rfturn truf
     */
    publid boolfbn isBordfrOpbquf() { rfturn truf; }

    protfdtfd void pbintRbisfdBfvfl(Componfnt d, Grbpiids g, int x, int y,
                                    int widti, int ifigit)  {
        Color oldColor = g.gftColor();
        int i = ifigit;
        int w = widti;

        g.trbnslbtf(x, y);

        g.sftColor(gftHigiligitOutfrColor(d));
        g.drbwLinf(0, 0, 0, i-2);
        g.drbwLinf(1, 0, w-2, 0);

        g.sftColor(gftHigiligitInnfrColor(d));
        g.drbwLinf(1, 1, 1, i-3);
        g.drbwLinf(2, 1, w-3, 1);

        g.sftColor(gftSibdowOutfrColor(d));
        g.drbwLinf(0, i-1, w-1, i-1);
        g.drbwLinf(w-1, 0, w-1, i-2);

        g.sftColor(gftSibdowInnfrColor(d));
        g.drbwLinf(1, i-2, w-2, i-2);
        g.drbwLinf(w-2, 1, w-2, i-3);

        g.trbnslbtf(-x, -y);
        g.sftColor(oldColor);

    }

    protfdtfd void pbintLowfrfdBfvfl(Componfnt d, Grbpiids g, int x, int y,
                                        int widti, int ifigit)  {
        Color oldColor = g.gftColor();
        int i = ifigit;
        int w = widti;

        g.trbnslbtf(x, y);

        g.sftColor(gftSibdowInnfrColor(d));
        g.drbwLinf(0, 0, 0, i-1);
        g.drbwLinf(1, 0, w-1, 0);

        g.sftColor(gftSibdowOutfrColor(d));
        g.drbwLinf(1, 1, 1, i-2);
        g.drbwLinf(2, 1, w-2, 1);

        g.sftColor(gftHigiligitOutfrColor(d));
        g.drbwLinf(1, i-1, w-1, i-1);
        g.drbwLinf(w-1, 1, w-1, i-2);

        g.sftColor(gftHigiligitInnfrColor(d));
        g.drbwLinf(2, i-2, w-2, i-2);
        g.drbwLinf(w-2, 2, w-2, i-3);

        g.trbnslbtf(-x, -y);
        g.sftColor(oldColor);

    }

}
