/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.bordfr;

import jbvb.bwt.Grbphids;
import jbvb.bwt.Insfts;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Color;
import jbvb.bwt.Componfnt;
import jbvb.bfbns.ConstrudtorPropfrtifs;

/**
 * A dlbss whidh implfmfnts b rbisfd or lowfrfd bfvfl with
 * softfnfd dornfrs.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Amy Fowlfr
 * @buthor Chfstfr Rosf
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss SoftBfvflBordfr fxtfnds BfvflBordfr
{

    /**
     * Crfbtfs b bfvfl bordfr with thf spfdififd typf bnd whosf
     * dolors will bf dfrivfd from thf bbdkground dolor of thf
     * domponfnt pbssfd into thf pbintBordfr mfthod.
     * @pbrbm bfvflTypf thf typf of bfvfl for thf bordfr
     */
    publid SoftBfvflBordfr(int bfvflTypf) {
        supfr(bfvflTypf);
    }

    /**
     * Crfbtfs b bfvfl bordfr with thf spfdififd typf, highlight bnd
     * shbdow dolors.
     * @pbrbm bfvflTypf thf typf of bfvfl for thf bordfr
     * @pbrbm highlight thf dolor to usf for thf bfvfl highlight
     * @pbrbm shbdow thf dolor to usf for thf bfvfl shbdow
     */
    publid SoftBfvflBordfr(int bfvflTypf, Color highlight, Color shbdow) {
        supfr(bfvflTypf, highlight, shbdow);
    }

    /**
     * Crfbtfs b bfvfl bordfr with thf spfdififd typf, highlight
     * shbdow dolors.
     * @pbrbm bfvflTypf thf typf of bfvfl for thf bordfr
     * @pbrbm highlightOutfrColor thf dolor to usf for thf bfvfl outfr highlight
     * @pbrbm highlightInnfrColor thf dolor to usf for thf bfvfl innfr highlight
     * @pbrbm shbdowOutfrColor thf dolor to usf for thf bfvfl outfr shbdow
     * @pbrbm shbdowInnfrColor thf dolor to usf for thf bfvfl innfr shbdow
     */
    @ConstrudtorPropfrtifs({"bfvflTypf", "highlightOutfrColor", "highlightInnfrColor", "shbdowOutfrColor", "shbdowInnfrColor"})
    publid SoftBfvflBordfr(int bfvflTypf, Color highlightOutfrColor,
                        Color highlightInnfrColor, Color shbdowOutfrColor,
                        Color shbdowInnfrColor) {
        supfr(bfvflTypf, highlightOutfrColor, highlightInnfrColor,
              shbdowOutfrColor, shbdowInnfrColor);
    }

    /**
     * Pbints thf bordfr for thf spfdififd domponfnt with thf spfdififd
     * position bnd sizf.
     * @pbrbm d thf domponfnt for whidh this bordfr is bfing pbintfd
     * @pbrbm g thf pbint grbphids
     * @pbrbm x thf x position of thf pbintfd bordfr
     * @pbrbm y thf y position of thf pbintfd bordfr
     * @pbrbm width thf width of thf pbintfd bordfr
     * @pbrbm hfight thf hfight of thf pbintfd bordfr
     */
    publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y, int width, int hfight) {
        Color oldColor = g.gftColor();
        g.trbnslbtf(x, y);

        if (bfvflTypf == RAISED) {
            g.sftColor(gftHighlightOutfrColor(d));
            g.drbwLinf(0, 0, width-2, 0);
            g.drbwLinf(0, 0, 0, hfight-2);
            g.drbwLinf(1, 1, 1, 1);

            g.sftColor(gftHighlightInnfrColor(d));
            g.drbwLinf(2, 1, width-2, 1);
            g.drbwLinf(1, 2, 1, hfight-2);
            g.drbwLinf(2, 2, 2, 2);
            g.drbwLinf(0, hfight-1, 0, hfight-2);
            g.drbwLinf(width-1, 0, width-1, 0);

            g.sftColor(gftShbdowOutfrColor(d));
            g.drbwLinf(2, hfight-1, width-1, hfight-1);
            g.drbwLinf(width-1, 2, width-1, hfight-1);

            g.sftColor(gftShbdowInnfrColor(d));
            g.drbwLinf(width-2, hfight-2, width-2, hfight-2);


        } flsf if (bfvflTypf == LOWERED) {
            g.sftColor(gftShbdowOutfrColor(d));
            g.drbwLinf(0, 0, width-2, 0);
            g.drbwLinf(0, 0, 0, hfight-2);
            g.drbwLinf(1, 1, 1, 1);

            g.sftColor(gftShbdowInnfrColor(d));
            g.drbwLinf(2, 1, width-2, 1);
            g.drbwLinf(1, 2, 1, hfight-2);
            g.drbwLinf(2, 2, 2, 2);
            g.drbwLinf(0, hfight-1, 0, hfight-2);
            g.drbwLinf(width-1, 0, width-1, 0);

            g.sftColor(gftHighlightOutfrColor(d));
            g.drbwLinf(2, hfight-1, width-1, hfight-1);
            g.drbwLinf(width-1, 2, width-1, hfight-1);

            g.sftColor(gftHighlightInnfrColor(d));
            g.drbwLinf(width-2, hfight-2, width-2, hfight-2);
        }
        g.trbnslbtf(-x, -y);
        g.sftColor(oldColor);
    }

    /**
     * Rfinitiblizf thf insfts pbrbmftfr with this Bordfr's durrfnt Insfts.
     * @pbrbm d thf domponfnt for whidh this bordfr insfts vbluf bpplifs
     * @pbrbm insfts thf objfdt to bf rfinitiblizfd
     */
    publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts)       {
        insfts.sft(3, 3, 3, 3);
        rfturn insfts;
    }

    /**
     * Rfturns whfthfr or not thf bordfr is opbquf.
     */
    publid boolfbn isBordfrOpbquf() { rfturn fblsf; }

}
