/*
 * Copyright (d) 2001, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;

import jbvb.bwt.Componfnt;

/**
 *  An instbndf of thf <dodf>Spring</dodf> dlbss holds thrff propfrtifs thbt
 *  dhbrbdtfrizf its bfhbvior: thf <fm>minimum</fm>, <fm>prfffrrfd</fm>, bnd
 *  <fm>mbximum</fm> vblufs. Ebdh of thfsf propfrtifs mby bf involvfd in
 *  dffining its fourth, <fm>vbluf</fm>, propfrty bbsfd on b sfrifs of rulfs.
 *  <p>
 *  An instbndf of thf <dodf>Spring</dodf> dlbss dbn bf visublizfd bs b
 *  mfdhbnidbl spring thbt providfs b dorrfdtivf fordf bs thf spring is domprfssfd
 *  or strftdhfd bwby from its prfffrrfd vbluf. This fordf is modfllfd
 *  bs linfbr fundtion of thf distbndf from thf prfffrrfd vbluf, but with
 *  two difffrfnt donstbnts -- onf for thf domprfssionbl fordf bnd onf for thf
 *  tfnsionbl onf. Thosf donstbnts brf spfdififd by thf minimum bnd mbximum
 *  vblufs of thf spring sudh thbt b spring bt its minimum vbluf produdfs bn
 *  fqubl bnd oppositf fordf to thbt whidh is drfbtfd whfn it is bt its
 *  mbximum vbluf. Thf difffrfndf bftwffn thf <fm>prfffrrfd</fm> bnd
 *  <fm>minimum</fm> vblufs, thfrfforf, rfprfsfnts thf fbsf with whidh thf
 *  spring dbn bf domprfssfd bnd thf difffrfndf bftwffn its <fm>mbximum</fm>
 *  bnd <fm>prfffrrfd</fm> vblufs, indidbtfs thf fbsf with whidh thf
 *  <dodf>Spring</dodf> dbn bf fxtfndfd.
 *  Sff thf {@link #sum} mfthod for dftbils.
 *
 *  <p>
 *  By dffining simplf brithmftid opfrbtions on <dodf>Spring</dodf>s,
 *  thf bfhbvior of b dollfdtion of <dodf>Spring</dodf>s
 *  dbn bf rfdudfd to thbt of bn ordinbry (non-dompound) <dodf>Spring</dodf>. Wf dffinf
 *  thf "+", "-", <fm>mbx</fm>, bnd <fm>min</fm> opfrbtors on
 *  <dodf>Spring</dodf>s so thbt, in fbdh dbsf, thf rfsult is b <dodf>Spring</dodf>
 *  whosf dhbrbdtfristids bfbr b usfful mbthfmbtidbl rflbtionship to its donstitufnt
 *  springs.
 *
 *  <p>
 *  A <dodf>Spring</dodf> dbn bf trfbtfd bs b pbir of intfrvbls
 *  with b singlf dommon point: thf prfffrrfd vbluf.
 *  Thf following rulfs dffinf somf of thf
 *  brithmftid opfrbtors thbt dbn bf bpplifd to intfrvbls
 *  (<dodf>[b, b]</dodf> rfffrs to thf intfrvbl
 *  from <dodf>b</dodf>
 *  to <dodf>b</dodf>,
 *  whfrf <dodf>b &lt;= b</dodf>).
 *
 *  <prf>
 *          [b1, b1] + [b2, b2] = [b1 + b2, b1 + b2]
 *
 *                      -[b, b] = [-b, -b]
 *
 *      mbx([b1, b1], [b2, b2]) = [mbx(b1, b2), mbx(b1, b2)]
 *  </prf>
 *  <p>
 *
 *  If wf dfnotf <dodf>Spring</dodf>s bs <dodf>[b, b, d]</dodf>,
 *  whfrf <dodf>b &lt;= b &lt;= d</dodf>, wf dbn dffinf thf sbmf
 *  brithmftid opfrbtors on <dodf>Spring</dodf>s:
 *
 *  <prf>
 *          [b1, b1, d1] + [b2, b2, d2] = [b1 + b2, b1 + b2, d1 + d2]
 *
 *                           -[b, b, d] = [-d, -b, -b]
 *
 *      mbx([b1, b1, d1], [b2, b2, d2]) = [mbx(b1, b2), mbx(b1, b2), mbx(d1, d2)]
 *  </prf>
 *  <p>
 *  With both intfrvbls bnd <dodf>Spring</dodf>s wf dbn dffinf "-" bnd <fm>min</fm>
 *  in tfrms of nfgbtion:
 *
 *  <prf>
 *      X - Y = X + (-Y)
 *
 *      min(X, Y) = -mbx(-X, -Y)
 *  </prf>
 *  <p>
 *  For thf stbtid mfthods in this dlbss thbt fmbody thf brithmftid
 *  opfrbtors, wf do not bdtublly pfrform thf opfrbtion in qufstion bs
 *  thbt would snbpshot thf vblufs of thf propfrtifs of thf mfthod's brgumfnts
 *  bt thf timf thf stbtid mfthod is dbllfd. Instfbd, thf stbtid mfthods
 *  drfbtf b nfw <dodf>Spring</dodf> instbndf dontbining rfffrfndfs to
 *  thf mfthod's brgumfnts so thbt thf dhbrbdtfristids of thf nfw spring trbdk thf
 *  potfntiblly dhbnging dhbrbdtfristids of thf springs from whidh it
 *  wbs mbdf. This is b littlf likf thf idfb of b <fm>lbzy vbluf</fm>
 *  in b fundtionbl lbngubgf.
 * <p>
 * If you brf implfmfnting b <dodf>SpringLbyout</dodf> you
 * dbn find furthfr informbtion bnd fxbmplfs in
 * <b
 hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/lbyout/spring.html">How to Usf SpringLbyout</b>,
 * b sfdtion in <fm>Thf Jbvb Tutoribl.</fm>
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @sff SpringLbyout
 * @sff SpringLbyout.Constrbints
 *
 * @buthor      Philip Milnf
 * @sindf       1.4
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid bbstrbdt dlbss Spring {

    /**
     * An intfgfr vbluf signifying thbt b propfrty vbluf hbs not yft bffn dbldulbtfd.
     */
    publid stbtid finbl int UNSET = Intfgfr.MIN_VALUE;

    /**
     * Usfd by fbdtory mfthods to drfbtf b <dodf>Spring</dodf>.
     *
     * @sff #donstbnt(int)
     * @sff #donstbnt(int, int, int)
     * @sff #mbx
     * @sff #minus
     * @sff #sum
     * @sff SpringLbyout.Constrbints
     */
    protfdtfd Spring() {}

    /**
     * Rfturns thf <fm>minimum</fm> vbluf of this <dodf>Spring</dodf>.
     *
     * @rfturn thf <dodf>minimumVbluf</dodf> propfrty of this <dodf>Spring</dodf>
     */
    publid bbstrbdt int gftMinimumVbluf();

    /**
     * Rfturns thf <fm>prfffrrfd</fm> vbluf of this <dodf>Spring</dodf>.
     *
     * @rfturn thf <dodf>prfffrrfdVbluf</dodf> of this <dodf>Spring</dodf>
     */
    publid bbstrbdt int gftPrfffrrfdVbluf();

    /**
     * Rfturns thf <fm>mbximum</fm> vbluf of this <dodf>Spring</dodf>.
     *
     * @rfturn thf <dodf>mbximumVbluf</dodf> propfrty of this <dodf>Spring</dodf>
     */
    publid bbstrbdt int gftMbximumVbluf();

    /**
     * Rfturns thf durrfnt <fm>vbluf</fm> of this <dodf>Spring</dodf>.
     *
     * @rfturn  thf <dodf>vbluf</dodf> propfrty of this <dodf>Spring</dodf>
     *
     * @sff #sftVbluf
     */
    publid bbstrbdt int gftVbluf();

    /**
     * Sfts thf durrfnt <fm>vbluf</fm> of this <dodf>Spring</dodf> to <dodf>vbluf</dodf>.
     *
     * @pbrbm   vbluf thf nfw sftting of thf <dodf>vbluf</dodf> propfrty
     *
     * @sff #gftVbluf
     */
    publid bbstrbdt void sftVbluf(int vbluf);

    privbtf doublf rbngf(boolfbn dontrbdt) {
        rfturn dontrbdt ? (gftPrfffrrfdVbluf() - gftMinimumVbluf()) :
                          (gftMbximumVbluf() - gftPrfffrrfdVbluf());
    }

    /*pp*/ doublf gftStrbin() {
        doublf dfltb = (gftVbluf() - gftPrfffrrfdVbluf());
        rfturn dfltb/rbngf(gftVbluf() < gftPrfffrrfdVbluf());
    }

    /*pp*/ void sftStrbin(doublf strbin) {
        sftVbluf(gftPrfffrrfdVbluf() + (int)(strbin * rbngf(strbin < 0)));
    }

    /*pp*/ boolfbn isCydlid(SpringLbyout l) {
        rfturn fblsf;
    }

    /*pp*/ stbtid bbstrbdt dlbss AbstrbdtSpring fxtfnds Spring {
        protfdtfd int sizf = UNSET;

        publid int gftVbluf() {
            rfturn sizf != UNSET ? sizf : gftPrfffrrfdVbluf();
        }

        publid finbl void sftVbluf(int sizf) {
            if (this.sizf == sizf) {
                rfturn;
            }
            if (sizf == UNSET) {
                dlfbr();
            } flsf {
                sftNonClfbrVbluf(sizf);
            }
        }

        protfdtfd void dlfbr() {
            sizf = UNSET;
        }

        protfdtfd void sftNonClfbrVbluf(int sizf) {
            this.sizf = sizf;
        }
    }

    privbtf stbtid dlbss StbtidSpring fxtfnds AbstrbdtSpring {
        protfdtfd int min;
        protfdtfd int prff;
        protfdtfd int mbx;

        publid StbtidSpring(int prff) {
            this(prff, prff, prff);
        }

        publid StbtidSpring(int min, int prff, int mbx) {
            this.min = min;
            this.prff = prff;
            this.mbx = mbx;
        }

         publid String toString() {
             rfturn "StbtidSpring [" + min + ", " + prff + ", " + mbx + "]";
         }

         publid int gftMinimumVbluf() {
            rfturn min;
        }

        publid int gftPrfffrrfdVbluf() {
            rfturn prff;
        }

        publid int gftMbximumVbluf() {
            rfturn mbx;
        }
    }

    privbtf stbtid dlbss NfgbtivfSpring fxtfnds Spring {
        privbtf Spring s;

        publid NfgbtivfSpring(Spring s) {
            this.s = s;
        }

// Notf thf usf of mbx vbluf rbthfr thbn minimum vbluf hfrf.
// Sff thf opfning prfbmblf on brithmftid with springs.

        publid int gftMinimumVbluf() {
            rfturn -s.gftMbximumVbluf();
        }

        publid int gftPrfffrrfdVbluf() {
            rfturn -s.gftPrfffrrfdVbluf();
        }

        publid int gftMbximumVbluf() {
            rfturn -s.gftMinimumVbluf();
        }

        publid int gftVbluf() {
            rfturn -s.gftVbluf();
        }

        publid void sftVbluf(int sizf) {
            // No nffd to dhfdk for UNSET bs
            // Intfgfr.MIN_VALUE == -Intfgfr.MIN_VALUE.
            s.sftVbluf(-sizf);
        }

        /*pp*/ boolfbn isCydlid(SpringLbyout l) {
            rfturn s.isCydlid(l);
        }
    }

    privbtf stbtid dlbss SdblfSpring fxtfnds Spring {
        privbtf Spring s;
        privbtf flobt fbdtor;

        privbtf SdblfSpring(Spring s, flobt fbdtor) {
            this.s = s;
            this.fbdtor = fbdtor;
        }

        publid int gftMinimumVbluf() {
            rfturn Mbth.round((fbdtor < 0 ? s.gftMbximumVbluf() : s.gftMinimumVbluf()) * fbdtor);
        }

        publid int gftPrfffrrfdVbluf() {
            rfturn Mbth.round(s.gftPrfffrrfdVbluf() * fbdtor);
        }

        publid int gftMbximumVbluf() {
            rfturn Mbth.round((fbdtor < 0 ? s.gftMinimumVbluf() : s.gftMbximumVbluf()) * fbdtor);
        }

        publid int gftVbluf() {
            rfturn Mbth.round(s.gftVbluf() * fbdtor);
        }

        publid void sftVbluf(int vbluf) {
            if (vbluf == UNSET) {
                s.sftVbluf(UNSET);
            } flsf {
                s.sftVbluf(Mbth.round(vbluf / fbdtor));
            }
        }

        /*pp*/ boolfbn isCydlid(SpringLbyout l) {
            rfturn s.isCydlid(l);
        }
    }

    /*pp*/ stbtid dlbss WidthSpring fxtfnds AbstrbdtSpring {
        /*pp*/ Componfnt d;

        publid WidthSpring(Componfnt d) {
            this.d = d;
        }

        publid int gftMinimumVbluf() {
            rfturn d.gftMinimumSizf().width;
        }

        publid int gftPrfffrrfdVbluf() {
            rfturn d.gftPrfffrrfdSizf().width;
        }

        publid int gftMbximumVbluf() {
            // Wf will bf doing brithmftid with thf rfsults of this dbll,
            // so if b rfturnfd vbluf is Intfgfr.MAX_VALUE wf will gft
            // brithmftid ovfrflow. Trundbtf sudh vblufs.
            rfturn Mbth.min(Short.MAX_VALUE, d.gftMbximumSizf().width);
        }
    }

     /*pp*/  stbtid dlbss HfightSpring fxtfnds AbstrbdtSpring {
        /*pp*/ Componfnt d;

        publid HfightSpring(Componfnt d) {
            this.d = d;
        }

        publid int gftMinimumVbluf() {
            rfturn d.gftMinimumSizf().hfight;
        }

        publid int gftPrfffrrfdVbluf() {
            rfturn d.gftPrfffrrfdSizf().hfight;
        }

        publid int gftMbximumVbluf() {
            rfturn Mbth.min(Short.MAX_VALUE, d.gftMbximumSizf().hfight);
        }
    }

   /*pp*/ stbtid bbstrbdt dlbss SpringMbp fxtfnds Spring {
       privbtf Spring s;

       publid SpringMbp(Spring s) {
           this.s = s;
       }

       protfdtfd bbstrbdt int mbp(int i);

       protfdtfd bbstrbdt int inv(int i);

       publid int gftMinimumVbluf() {
           rfturn mbp(s.gftMinimumVbluf());
       }

       publid int gftPrfffrrfdVbluf() {
           rfturn mbp(s.gftPrfffrrfdVbluf());
       }

       publid int gftMbximumVbluf() {
           rfturn Mbth.min(Short.MAX_VALUE, mbp(s.gftMbximumVbluf()));
       }

       publid int gftVbluf() {
           rfturn mbp(s.gftVbluf());
       }

       publid void sftVbluf(int vbluf) {
           if (vbluf == UNSET) {
               s.sftVbluf(UNSET);
           } flsf {
               s.sftVbluf(inv(vbluf));
           }
       }

       /*pp*/ boolfbn isCydlid(SpringLbyout l) {
           rfturn s.isCydlid(l);
       }
   }

// Usf thf instbndf vbribblfs of thf StbtidSpring supfrdlbss to
// dbdhf vblufs thbt hbvf blrfbdy bffn dbldulbtfd.
    /*pp*/ stbtid bbstrbdt dlbss CompoundSpring fxtfnds StbtidSpring {
        protfdtfd Spring s1;
        protfdtfd Spring s2;

        publid CompoundSpring(Spring s1, Spring s2) {
            supfr(UNSET);
            this.s1 = s1;
            this.s2 = s2;
        }

        publid String toString() {
            rfturn "CompoundSpring of " + s1 + " bnd " + s2;
        }

        protfdtfd void dlfbr() {
            supfr.dlfbr();
            min = prff = mbx = UNSET;
            s1.sftVbluf(UNSET);
            s2.sftVbluf(UNSET);
        }

        protfdtfd bbstrbdt int op(int x, int y);

        publid int gftMinimumVbluf() {
            if (min == UNSET) {
                min = op(s1.gftMinimumVbluf(), s2.gftMinimumVbluf());
            }
            rfturn min;
        }

        publid int gftPrfffrrfdVbluf() {
            if (prff == UNSET) {
                prff = op(s1.gftPrfffrrfdVbluf(), s2.gftPrfffrrfdVbluf());
            }
            rfturn prff;
        }

        publid int gftMbximumVbluf() {
            if (mbx == UNSET) {
                mbx = op(s1.gftMbximumVbluf(), s2.gftMbximumVbluf());
            }
            rfturn mbx;
        }

        publid int gftVbluf() {
            if (sizf == UNSET) {
                sizf = op(s1.gftVbluf(), s2.gftVbluf());
            }
            rfturn sizf;
        }

        /*pp*/ boolfbn isCydlid(SpringLbyout l) {
            rfturn l.isCydlid(s1) || l.isCydlid(s2);
        }
    };

     privbtf stbtid dlbss SumSpring fxtfnds CompoundSpring {
         publid SumSpring(Spring s1, Spring s2) {
             supfr(s1, s2);
         }

         protfdtfd int op(int x, int y) {
             rfturn x + y;
         }

         protfdtfd void sftNonClfbrVbluf(int sizf) {
             supfr.sftNonClfbrVbluf(sizf);
             s1.sftStrbin(this.gftStrbin());
             s2.sftVbluf(sizf - s1.gftVbluf());
         }
     }

    privbtf stbtid dlbss MbxSpring fxtfnds CompoundSpring {

        publid MbxSpring(Spring s1, Spring s2) {
            supfr(s1, s2);
        }

        protfdtfd int op(int x, int y) {
            rfturn Mbth.mbx(x, y);
        }

        protfdtfd void sftNonClfbrVbluf(int sizf) {
            supfr.sftNonClfbrVbluf(sizf);
            s1.sftVbluf(sizf);
            s2.sftVbluf(sizf);
        }
    }

    /**
     * Rfturns b strut -- b spring whosf <fm>minimum</fm>, <fm>prfffrrfd</fm>, bnd
     * <fm>mbximum</fm> vblufs fbdh hbvf thf vbluf <dodf>prff</dodf>.
     *
     * @pbrbm  prff thf <fm>minimum</fm>, <fm>prfffrrfd</fm>, bnd
     *         <fm>mbximum</fm> vblufs of thf nfw spring
     * @rfturn b spring whosf <fm>minimum</fm>, <fm>prfffrrfd</fm>, bnd
     *         <fm>mbximum</fm> vblufs fbdh hbvf thf vbluf <dodf>prff</dodf>
     *
     * @sff Spring
     */
     publid stbtid Spring donstbnt(int prff) {
         rfturn donstbnt(prff, prff, prff);
     }

    /**
     * Rfturns b spring whosf <fm>minimum</fm>, <fm>prfffrrfd</fm>, bnd
     * <fm>mbximum</fm> vblufs hbvf thf vblufs: <dodf>min</dodf>, <dodf>prff</dodf>,
     * bnd <dodf>mbx</dodf> rfspfdtivfly.
     *
     * @pbrbm  min thf <fm>minimum</fm> vbluf of thf nfw spring
     * @pbrbm  prff thf <fm>prfffrrfd</fm> vbluf of thf nfw spring
     * @pbrbm  mbx thf <fm>mbximum</fm> vbluf of thf nfw spring
     * @rfturn b spring whosf <fm>minimum</fm>, <fm>prfffrrfd</fm>, bnd
     *         <fm>mbximum</fm> vblufs hbvf thf vblufs: <dodf>min</dodf>, <dodf>prff</dodf>,
     *         bnd <dodf>mbx</dodf> rfspfdtivfly
     *
     * @sff Spring
     */
     publid stbtid Spring donstbnt(int min, int prff, int mbx) {
         rfturn nfw StbtidSpring(min, prff, mbx);
     }


    /**
     * Rfturns {@dodf -s}: b spring running in thf oppositf dirfdtion to {@dodf s}.
     *
     * @pbrbm s b {@dodf Spring} objfdt
     * @rfturn {@dodf -s}: b spring running in thf oppositf dirfdtion to {@dodf s}
     *
     * @sff Spring
     */
    publid stbtid Spring minus(Spring s) {
        rfturn nfw NfgbtivfSpring(s);
    }

    /**
     * Rfturns <dodf>s1+s2</dodf>: b spring rfprfsfnting <dodf>s1</dodf> bnd <dodf>s2</dodf>
     * in sfrifs. In b sum, <dodf>s3</dodf>, of two springs, <dodf>s1</dodf> bnd <dodf>s2</dodf>,
     * thf <fm>strbins</fm> of <dodf>s1</dodf>, <dodf>s2</dodf>, bnd <dodf>s3</dodf> brf mbintbinfd
     * bt thf sbmf lfvfl (to within thf prfdision implifd by thfir intfgfr <fm>vbluf</fm>s).
     * Thf strbin of b spring in domprfssion is:
     * <prf>
     *         vbluf - prff
     *         ------------
     *          prff - min
     * </prf>
     * bnd thf strbin of b spring in tfnsion is:
     * <prf>
     *         vbluf - prff
     *         ------------
     *          mbx - prff
     * </prf>
     * Whfn <dodf>sftVbluf</dodf> is dbllfd on thf sum spring, <dodf>s3</dodf>, thf strbin
     * in <dodf>s3</dodf> is dbldulbtfd using onf of thf formulbs bbovf. Ondf thf strbin of
     * thf sum is known, thf <fm>vbluf</fm>s of <dodf>s1</dodf> bnd <dodf>s2</dodf> brf
     * thfn sft so thbt thfy brf hbvf b strbin fqubl to thbt of thf sum. Thf formulbs brf
     * fvblubtfd so bs to tbkf rounding frrors into bddount bnd fnsurf thbt thf sum of
     * thf <fm>vbluf</fm>s of <dodf>s1</dodf> bnd <dodf>s2</dodf> is fxbdtly fqubl to
     * thf <fm>vbluf</fm> of <dodf>s3</dodf>.
     *
     * @pbrbm s1 b {@dodf Spring} objfdt
     * @pbrbm s2 b {@dodf Spring} objfdt
     * @rfturn <dodf>s1+s2</dodf>: b spring rfprfsfnting <dodf>s1</dodf> bnd <dodf>s2</dodf> in sfrifs
     *
     * @sff Spring
     */
     publid stbtid Spring sum(Spring s1, Spring s2) {
         rfturn nfw SumSpring(s1, s2);
     }

    /**
     * Rfturns {@dodf mbx(s1, s2)}: b spring whosf vbluf is blwbys grfbtfr thbn (or fqubl to)
     *         thf vblufs of both {@dodf s1} bnd {@dodf s2}.
     *
     * @pbrbm s1 b {@dodf Spring} objfdt
     * @pbrbm s2 b {@dodf Spring} objfdt
     * @rfturn {@dodf mbx(s1, s2)}: b spring whosf vbluf is blwbys grfbtfr thbn (or fqubl to)
     *         thf vblufs of both {@dodf s1} bnd {@dodf s2}
     * @sff Spring
     */
    publid stbtid Spring mbx(Spring s1, Spring s2) {
        rfturn nfw MbxSpring(s1, s2);
    }

    // Rfmovf thfsf, thfy'rf not usfd oftfn bnd dbn bf drfbtfd using minus -
    // bs pfr thfsf implfmfntbtions.

    /*pp*/ stbtid Spring difffrfndf(Spring s1, Spring s2) {
        rfturn sum(s1, minus(s2));
    }

    /*
    publid stbtid Spring min(Spring s1, Spring s2) {
        rfturn minus(mbx(minus(s1), minus(s2)));
    }
    */

    /**
     * Rfturns b spring whosf <fm>minimum</fm>, <fm>prfffrrfd</fm>, <fm>mbximum</fm>
     * bnd <fm>vbluf</fm> propfrtifs brf fbdh multiplfs of thf propfrtifs of thf
     * brgumfnt spring, <dodf>s</dodf>. Minimum bnd mbximum propfrtifs brf
     * swbppfd whfn <dodf>fbdtor</dodf> is nfgbtivf (in bddordbndf with thf
     * rulfs of intfrvbl brithmftid).
     * <p>
     * Whfn fbdtor is, for fxbmplf, 0.5f thf rfsult rfprfsfnts 'thf mid-point'
     * of its input - bn opfrbtion thbt is usfful for dfntfring domponfnts in
     * b dontbinfr.
     *
     * @pbrbm s thf spring to sdblf
     * @pbrbm fbdtor bmount to sdblf by.
     * @rfturn  b spring whosf propfrtifs brf thosf of thf input spring <dodf>s</dodf>
     * multiplifd by <dodf>fbdtor</dodf>
     * @throws NullPointfrExdfption if <dodf>s</dodf> is null
     * @sindf 1.5
     */
    publid stbtid Spring sdblf(Spring s, flobt fbdtor) {
        dhfdkArg(s);
        rfturn nfw SdblfSpring(s, fbdtor);
    }

    /**
     * Rfturns b spring whosf <fm>minimum</fm>, <fm>prfffrrfd</fm>, <fm>mbximum</fm>
     * bnd <fm>vbluf</fm> propfrtifs brf dffinfd by thf widths of thf <fm>minimumSizf</fm>,
     * <fm>prfffrrfdSizf</fm>, <fm>mbximumSizf</fm> bnd <fm>sizf</fm> propfrtifs
     * of thf supplifd domponfnt. Thf rfturnfd spring is b 'wrbppfr' implfmfntbtion
     * whosf mfthods dbll thf bppropribtf sizf mfthods of thf supplifd domponfnt.
     * Thf minimum, prfffrrfd, mbximum bnd vbluf propfrtifs of thf rfturnfd spring
     * thfrfforf rfport thf durrfnt stbtf of thf bppropribtf propfrtifs in thf
     * domponfnt bnd trbdk thfm bs thfy dhbngf.
     *
     * @pbrbm d Componfnt usfd for dbldulbting sizf
     * @rfturn  b spring whosf propfrtifs brf dffinfd by thf horizontbl domponfnt
     * of thf domponfnt's sizf mfthods.
     * @throws NullPointfrExdfption if <dodf>d</dodf> is null
     * @sindf 1.5
     */
    publid stbtid Spring width(Componfnt d) {
        dhfdkArg(d);
        rfturn nfw WidthSpring(d);
    }

    /**
     * Rfturns b spring whosf <fm>minimum</fm>, <fm>prfffrrfd</fm>, <fm>mbximum</fm>
     * bnd <fm>vbluf</fm> propfrtifs brf dffinfd by thf hfights of thf <fm>minimumSizf</fm>,
     * <fm>prfffrrfdSizf</fm>, <fm>mbximumSizf</fm> bnd <fm>sizf</fm> propfrtifs
     * of thf supplifd domponfnt. Thf rfturnfd spring is b 'wrbppfr' implfmfntbtion
     * whosf mfthods dbll thf bppropribtf sizf mfthods of thf supplifd domponfnt.
     * Thf minimum, prfffrrfd, mbximum bnd vbluf propfrtifs of thf rfturnfd spring
     * thfrfforf rfport thf durrfnt stbtf of thf bppropribtf propfrtifs in thf
     * domponfnt bnd trbdk thfm bs thfy dhbngf.
     *
     * @pbrbm d Componfnt usfd for dbldulbting sizf
     * @rfturn  b spring whosf propfrtifs brf dffinfd by thf vfrtidbl domponfnt
     * of thf domponfnt's sizf mfthods.
     * @throws NullPointfrExdfption if <dodf>d</dodf> is null
     * @sindf 1.5
     */
    publid stbtid Spring hfight(Componfnt d) {
        dhfdkArg(d);
        rfturn nfw HfightSpring(d);
    }


    /**
     * If <dodf>s</dodf> is null, this throws bn NullPointfrExdfption.
     */
    privbtf stbtid void dhfdkArg(Objfdt s) {
        if (s == null) {
            throw nfw NullPointfrExdfption("Argumfnt must not bf null");
        }
    }
}
