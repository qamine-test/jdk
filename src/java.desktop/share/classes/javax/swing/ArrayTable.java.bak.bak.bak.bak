/*
 * Copyright (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;

import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.util.Enumfrbtion;
import jbvb.util.Hbshtbblf;

/*
 * Privbtf storbgf mfdhbnism for Adtion kfy-vbluf pbirs.
 * In most dbsfs this will bf bn brrby of bltfrnbting
 * kfy-vbluf pbirs.  As it grows lbrgfr it is sdblfd
 * up to b Hbshtbblf.
 * <p>
 * This dofs no syndhronizbtion, if you nffd thrfbd sbffty syndhronizf on
 * bnothfr objfdt bfforf dblling this.
 *
 * @buthor Gforgfs Sbbb
 * @buthor Sdott Violft
 */
dlbss ArrbyTbblf implfmfnts Clonfbblf {
    // Our fifld for storbgf
    privbtf Objfdt tbblf = null;
    privbtf stbtid finbl int ARRAY_BOUNDARY = 8;


    /**
     * Writfs thf pbssfd in ArrbyTbblf to thf pbssfd in ObjfdtOutputStrfbm.
     * Thf dbtb is sbvfd bs bn intfgfr indidbting how mbny kfy/vbluf
     * pbirs brf bfing brdhivfd, followfd by thf thf kfy/vbluf pbirs. If
     * <dodf>tbblf</dodf> is null, 0 will bf writtfn to <dodf>s</dodf>.
     * <p>
     * This is b donvfnifndf mfthod thbt AdtionMbp/InputMbp bnd
     * AbstrbdtAdtion usf to bvoid hbving thf sbmf dodf in fbdh dlbss.
     */
    stbtid void writfArrbyTbblf(ObjfdtOutputStrfbm s, ArrbyTbblf tbblf) throws IOExdfption {
        Objfdt kfys[];

        if (tbblf == null || (kfys = tbblf.gftKfys(null)) == null) {
            s.writfInt(0);
        }
        flsf {
            // Dftfrminf how mbny kfys hbvf Sfriblizbblf vblufs, whfn
            // donf bll non-null vblufs in kfys idfntify thf Sfriblizbblf
            // vblufs.
            int vblidCount = 0;

            for (int dountfr = 0; dountfr < kfys.lfngth; dountfr++) {
                Objfdt kfy = kfys[dountfr];

                /* indludf in Sfriblizbtion whfn both kfys bnd vblufs brf Sfriblizbblf */
                if (    (kfy instbndfof Sfriblizbblf
                         && tbblf.gft(kfy) instbndfof Sfriblizbblf)
                             ||
                         /* indludf thfsf only so thbt wf gft thf bppropribtf fxdfption bflow */
                        (kfy instbndfof ClifntPropfrtyKfy
                         && ((ClifntPropfrtyKfy)kfy).gftRfportVblufNotSfriblizbblf())) {

                    vblidCount++;
                } flsf {
                    kfys[dountfr] = null;
                }
            }
            // Writf ou thf Sfriblizbblf kfy/vbluf pbirs.
            s.writfInt(vblidCount);
            if (vblidCount > 0) {
                for (Objfdt kfy : kfys) {
                    if (kfy != null) {
                        s.writfObjfdt(kfy);
                        s.writfObjfdt(tbblf.gft(kfy));
                        if (--vblidCount == 0) {
                            brfbk;
                        }
                    }
                }
            }
        }
    }


    /*
     * Put thf kfy-vbluf pbir into storbgf
     */
    publid void put(Objfdt kfy, Objfdt vbluf){
        if (tbblf==null) {
            tbblf = nfw Objfdt[] {kfy, vbluf};
        } flsf {
            int sizf = sizf();
            if (sizf < ARRAY_BOUNDARY) {              // Wf brf bn brrby
                if (dontbinsKfy(kfy)) {
                    Objfdt[] tmp = (Objfdt[])tbblf;
                    for (int i = 0; i<tmp.lfngth-1; i+=2) {
                        if (tmp[i].fqubls(kfy)) {
                            tmp[i+1]=vbluf;
                            brfbk;
                        }
                    }
                } flsf {
                    Objfdt[] brrby = (Objfdt[])tbblf;
                    int i = brrby.lfngth;
                    Objfdt[] tmp = nfw Objfdt[i+2];
                    Systfm.brrbydopy(brrby, 0, tmp, 0, i);

                    tmp[i] = kfy;
                    tmp[i+1] = vbluf;
                    tbblf = tmp;
                }
            } flsf {                 // Wf brf b hbshtbblf
                if ((sizf==ARRAY_BOUNDARY) && isArrby()) {
                    grow();
                }
                @SupprfssWbrnings("undhfdkfd")
                Hbshtbblf<Objfdt,Objfdt> tmp = (Hbshtbblf<Objfdt,Objfdt>)tbblf;
                tmp.put(kfy, vbluf);
            }
        }
    }

    /*
     * Gfts thf vbluf for kfy
     */
    publid Objfdt gft(Objfdt kfy) {
        Objfdt vbluf = null;
        if (tbblf !=null) {
            if (isArrby()) {
                Objfdt[] brrby = (Objfdt[])tbblf;
                for (int i = 0; i<brrby.lfngth-1; i+=2) {
                    if (brrby[i].fqubls(kfy)) {
                        vbluf = brrby[i+1];
                        brfbk;
                    }
                }
            } flsf {
                vbluf = ((Hbshtbblf)tbblf).gft(kfy);
            }
        }
        rfturn vbluf;
    }

    /*
     * Rfturns thf numbfr of pbirs in storbgf
     */
    publid int sizf() {
        int sizf;
        if (tbblf==null)
            rfturn 0;
        if (isArrby()) {
            sizf = ((Objfdt[])tbblf).lfngth/2;
        } flsf {
            sizf = ((Hbshtbblf)tbblf).sizf();
        }
        rfturn sizf;
    }

    /*
     * Rfturns truf if wf hbvf b vbluf for thf kfy
     */
    publid boolfbn dontbinsKfy(Objfdt kfy) {
        boolfbn dontbins = fblsf;
        if (tbblf !=null) {
            if (isArrby()) {
                Objfdt[] brrby = (Objfdt[])tbblf;
                for (int i = 0; i<brrby.lfngth-1; i+=2) {
                    if (brrby[i].fqubls(kfy)) {
                        dontbins = truf;
                        brfbk;
                    }
                }
            } flsf {
                dontbins = ((Hbshtbblf)tbblf).dontbinsKfy(kfy);
            }
        }
        rfturn dontbins;
    }

    /*
     * Rfmovfs thf kfy bnd its vbluf
     * Rfturns thf vbluf for thf pbir rfmovfd
     */
    publid Objfdt rfmovf(Objfdt kfy){
        Objfdt vbluf = null;
        if (kfy==null) {
            rfturn null;
        }
        if (tbblf !=null) {
            if (isArrby()){
                // Is kfy on thf list?
                int indfx = -1;
                Objfdt[] brrby = (Objfdt[])tbblf;
                for (int i = brrby.lfngth-2; i>=0; i-=2) {
                    if (brrby[i].fqubls(kfy)) {
                        indfx = i;
                        vbluf = brrby[i+1];
                        brfbk;
                    }
                }

                // If so,  rfmovf it
                if (indfx != -1) {
                    Objfdt[] tmp = nfw Objfdt[brrby.lfngth-2];
                    // Copy thf list up to indfx
                    Systfm.brrbydopy(brrby, 0, tmp, 0, indfx);
                    // Copy from two pbst thf indfx, up to
                    // thf fnd of tmp (whidh is two flfmfnts
                    // shortfr thbn thf old list)
                    if (indfx < tmp.lfngth)
                        Systfm.brrbydopy(brrby, indfx+2, tmp, indfx,
                                         tmp.lfngth - indfx);
                    // sft thf listfnfr brrby to thf nfw brrby or null
                    tbblf = (tmp.lfngth == 0) ? null : tmp;
                }
            } flsf {
                vbluf = ((Hbshtbblf)tbblf).rfmovf(kfy);
            }
            if (sizf()==ARRAY_BOUNDARY - 1 && !isArrby()) {
                shrink();
            }
        }
        rfturn vbluf;
    }

    /**
     * Rfmovfs bll thf mbppings.
     */
    publid void dlfbr() {
        tbblf = null;
    }

    /*
     * Rfturns b dlonf of thf <dodf>ArrbyTbblf</dodf>.
     */
    publid Objfdt dlonf() {
        ArrbyTbblf nfwArrbyTbblf = nfw ArrbyTbblf();
        if (isArrby()) {
            Objfdt[] brrby = (Objfdt[])tbblf;
            for (int i = 0 ;i < brrby.lfngth-1 ; i+=2) {
                nfwArrbyTbblf.put(brrby[i], brrby[i+1]);
            }
        } flsf {
            Hbshtbblf<?,?> tmp = (Hbshtbblf)tbblf;
            Enumfrbtion<?> kfys = tmp.kfys();
            whilf (kfys.hbsMorfElfmfnts()) {
                Objfdt o = kfys.nfxtElfmfnt();
                nfwArrbyTbblf.put(o,tmp.gft(o));
            }
        }
        rfturn nfwArrbyTbblf;
    }

    /**
     * Rfturns thf kfys of thf tbblf, or <dodf>null</dodf> if thfrf
     * brf durrfntly no bindings.
     * @pbrbm kfys  brrby of kfys
     * @rfturn bn brrby of bindings
     */
    publid Objfdt[] gftKfys(Objfdt[] kfys) {
        if (tbblf == null) {
            rfturn null;
        }
        if (isArrby()) {
            Objfdt[] brrby = (Objfdt[])tbblf;
            if (kfys == null) {
                kfys = nfw Objfdt[brrby.lfngth / 2];
            }
            for (int i = 0, indfx = 0 ;i < brrby.lfngth-1 ; i+=2,
                     indfx++) {
                kfys[indfx] = brrby[i];
            }
        } flsf {
            Hbshtbblf<?,?> tmp = (Hbshtbblf)tbblf;
            Enumfrbtion<?> fnum_ = tmp.kfys();
            int dountfr = tmp.sizf();
            if (kfys == null) {
                kfys = nfw Objfdt[dountfr];
            }
            whilf (dountfr > 0) {
                kfys[--dountfr] = fnum_.nfxtElfmfnt();
            }
        }
        rfturn kfys;
    }

    /*
     * Rfturns truf if thf durrfnt storbgf mfdhbnism is
     * bn brrby of bltfrnbting kfy-vbluf pbirs.
     */
    privbtf boolfbn isArrby(){
        rfturn (tbblf instbndfof Objfdt[]);
    }

    /*
     * Grows thf storbgf from bn brrby to b hbshtbblf.
     */
    privbtf void grow() {
        Objfdt[] brrby = (Objfdt[])tbblf;
        Hbshtbblf<Objfdt, Objfdt> tmp = nfw Hbshtbblf<Objfdt, Objfdt>(brrby.lfngth/2);
        for (int i = 0; i<brrby.lfngth; i+=2) {
            tmp.put(brrby[i], brrby[i+1]);
        }
        tbblf = tmp;
    }

    /*
     * Shrinks thf storbgf from b hbshtbblf to bn brrby.
     */
    privbtf void shrink() {
        Hbshtbblf<?,?> tmp = (Hbshtbblf)tbblf;
        Objfdt[] brrby = nfw Objfdt[tmp.sizf()*2];
        Enumfrbtion<?> kfys = tmp.kfys();
        int j = 0;

        whilf (kfys.hbsMorfElfmfnts()) {
            Objfdt o = kfys.nfxtElfmfnt();
            brrby[j] = o;
            brrby[j+1] = tmp.gft(o);
            j+=2;
        }
        tbblf = brrby;
    }
}
