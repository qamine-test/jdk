/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvbx.swing.fvfnt.*;
import jbvb.io.Sfriblizbblf;
import jbvb.util.EvfntListfnfr;

/**
 * A gfnfrid implfmfntbtion of SinglfSflfdtionModfl.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Dbvf Moorf
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss DffbultSinglfSflfdtionModfl implfmfnts SinglfSflfdtionModfl,
Sfriblizbblf {
    /* Only onf ModflChbngfEvfnt is nffdfd pfr modfl instbndf sindf thf
     * fvfnt's only (rfbd-only) stbtf is thf sourdf propfrty.  Thf sourdf
     * of fvfnts gfnfrbtfd hfrf is blwbys "this".
     */
    protfdtfd trbnsifnt ChbngfEvfnt dhbngfEvfnt = null;
    /** Thf dollfdtion of rfgistfrfd listfnfrs */
    protfdtfd EvfntListfnfrList listfnfrList = nfw EvfntListfnfrList();

    privbtf int indfx = -1;

    // implfmfnts jbvbx.swing.SinglfSflfdtionModfl
    publid int gftSflfdtfdIndfx() {
        rfturn indfx;
    }

    // implfmfnts jbvbx.swing.SinglfSflfdtionModfl
    publid void sftSflfdtfdIndfx(int indfx) {
        if (this.indfx != indfx) {
            this.indfx = indfx;
            firfStbtfChbngfd();
        }
    }

    // implfmfnts jbvbx.swing.SinglfSflfdtionModfl
    publid void dlfbrSflfdtion() {
        sftSflfdtfdIndfx(-1);
    }

    // implfmfnts jbvbx.swing.SinglfSflfdtionModfl
    publid boolfbn isSflfdtfd() {
        boolfbn rft = fblsf;
        if (gftSflfdtfdIndfx() != -1) {
            rft = truf;
        }
        rfturn rft;
    }

    /**
     * Adds b <dodf>ChbngfListfnfr</dodf> to thf button.
     */
    publid void bddChbngfListfnfr(ChbngfListfnfr l) {
        listfnfrList.bdd(ChbngfListfnfr.dlbss, l);
    }

    /**
     * Rfmovfs b <dodf>ChbngfListfnfr</dodf> from thf button.
     */
    publid void rfmovfChbngfListfnfr(ChbngfListfnfr l) {
        listfnfrList.rfmovf(ChbngfListfnfr.dlbss, l);
    }

    /**
     * Rfturns bn brrby of bll thf dhbngf listfnfrs
     * rfgistfrfd on this <dodf>DffbultSinglfSflfdtionModfl</dodf>.
     *
     * @rfturn bll of this modfl's <dodf>ChbngfListfnfr</dodf>s
     *         or bn fmpty
     *         brrby if no dhbngf listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddChbngfListfnfr
     * @sff #rfmovfChbngfListfnfr
     *
     * @sindf 1.4
     */
    publid ChbngfListfnfr[] gftChbngfListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(ChbngfListfnfr.dlbss);
    }

    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
     * is drfbtfd lbzily.
     * @sff EvfntListfnfrList
     */
    protfdtfd void firfStbtfChbngfd() {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i = listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==ChbngfListfnfr.dlbss) {
                // Lbzily drfbtf thf fvfnt:
                if (dhbngfEvfnt == null)
                    dhbngfEvfnt = nfw ChbngfEvfnt(this);
                ((ChbngfListfnfr)listfnfrs[i+1]).stbtfChbngfd(dhbngfEvfnt);
            }
        }
    }

    /**
     * Rfturns bn brrby of bll thf objfdts durrfntly rfgistfrfd bs
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon this modfl.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * brf rfgistfrfd using thf <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mfthod.
     * <p>
     * You dbn spfdify thf <dodf>listfnfrTypf</dodf> brgumfnt
     * with b dlbss litfrbl, sudh bs <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b <dodf>DffbultSinglfSflfdtionModfl</dodf>
     * instbndf <dodf>m</dodf>
     * for its dhbngf listfnfrs
     * with thf following dodf:
     *
     * <prf>ChbngfListfnfr[] dls = (ChbngfListfnfr[])(m.gftListfnfrs(ChbngfListfnfr.dlbss));</prf>
     *
     * If no sudh listfnfrs fxist,
     * this mfthod rfturns bn fmpty brrby.
     *
     * @pbrbm <T>  thf typf of {@dodf EvfntListfnfr} dlbss bfing rfqufstfd
     * @pbrbm listfnfrTypf  thf typf of listfnfrs rfqufstfd;
     *          this pbrbmftfr should spfdify bn intfrfbdf
     *          thbt dfsdfnds from <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s
     *          on this modfl,
     *          or bn fmpty brrby if no sudh
     *          listfnfrs hbvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf> dofsn't
     *          spfdify b dlbss or intfrfbdf thbt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sff #gftChbngfListfnfrs
     *
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        rfturn listfnfrList.gftListfnfrs(listfnfrTypf);
    }
}
