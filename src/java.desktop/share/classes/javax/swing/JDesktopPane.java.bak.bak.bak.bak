/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvb.util.List;
import jbvb.util.ArrbyList;
import jbvb.util.Collfdtion;
import jbvb.util.Itfrbtor;
import jbvbx.swing.plbf.*;
import jbvbx.bddfssibility.*;

import jbvb.bwt.Componfnt;
import jbvb.bwt.Contbinfr;
import jbvb.bwt.DffbultFodusTrbvfrsblPolidy;
import jbvb.bwt.FodusTrbvfrsblPolidy;
import jbvb.bwt.Window;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.bfbns.PropfrtyVftoExdfption;
import jbvb.util.Sft;
import jbvb.util.TrffSft;
/**
 * A dontbinfr usfd to drfbtf b multiplf-dodumfnt intfrfbdf or b virtubl dfsktop.
 * You drfbtf <dodf>JIntfrnblFrbmf</dodf> objfdts bnd bdd thfm to thf
 * <dodf>JDfsktopPbnf</dodf>. <dodf>JDfsktopPbnf</dodf> fxtfnds
 * <dodf>JLbyfrfdPbnf</dodf> to mbnbgf thf potfntiblly ovfrlbpping intfrnbl
 * frbmfs. It blso mbintbins b rfffrfndf to bn instbndf of
 * <dodf>DfsktopMbnbgfr</dodf> thbt is sft by thf UI
 * dlbss for thf durrfnt look bnd fffl (L&bmp;F).  Notf thbt <dodf>JDfsktopPbnf</dodf>
 * dofs not support bordfrs.
 * <p>
 * This dlbss is normblly usfd bs thf pbrfnt of <dodf>JIntfrnblFrbmfs</dodf>
 * to providf b pluggbblf <dodf>DfsktopMbnbgfr</dodf> objfdt to thf
 * <dodf>JIntfrnblFrbmfs</dodf>. Thf <dodf>instbllUI</dodf> of thf
 * L&bmp;F spfdifid implfmfntbtion is rfsponsiblf for sftting thf
 * <dodf>dfsktopMbnbgfr</dodf> vbribblf bppropribtfly.
 * Whfn thf pbrfnt of b <dodf>JIntfrnblFrbmf</dodf> is b <dodf>JDfsktopPbnf</dodf>,
 * it should dflfgbtf most of its bfhbvior to thf <dodf>dfsktopMbnbgfr</dodf>
 * (dlosing, rfsizing, ftd).
 * <p>
 * For furthfr dodumfntbtion bnd fxbmplfs sff
 * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/intfrnblfrbmf.html">How to Usf Intfrnbl Frbmfs</b>,
 * b sfdtion in <fm>Thf Jbvb Tutoribl</fm>.
 * <p>
 * <strong>Wbrning:</strong> Swing is not thrfbd sbff. For morf
 * informbtion sff <b
 * hrff="pbdkbgf-summbry.html#thrfbding">Swing's Thrfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @sff JIntfrnblFrbmf
 * @sff JIntfrnblFrbmf.JDfsktopIdon
 * @sff DfsktopMbnbgfr
 *
 * @buthor Dbvid Klobb
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss JDfsktopPbnf fxtfnds JLbyfrfdPbnf implfmfnts Addfssiblf
{
    /**
     * @sff #gftUIClbssID
     * @sff #rfbdObjfdt
     */
    privbtf stbtid finbl String uiClbssID = "DfsktopPbnfUI";

    trbnsifnt DfsktopMbnbgfr dfsktopMbnbgfr;

    privbtf trbnsifnt JIntfrnblFrbmf sflfdtfdFrbmf = null;

    /**
      * Indidbtfs thbt thf fntirf dontfnts of thf itfm bfing drbggfd
      * should bppfbr insidf thf dfsktop pbnf.
      *
      * @sff #OUTLINE_DRAG_MODE
      * @sff #sftDrbgModf
      */
    publid stbtid finbl int LIVE_DRAG_MODE = 0;

    /**
      * Indidbtfs thbt bn outlinf only of thf itfm bfing drbggfd
      * should bppfbr insidf thf dfsktop pbnf.
      *
      * @sff #LIVE_DRAG_MODE
      * @sff #sftDrbgModf
      */
    publid stbtid finbl int OUTLINE_DRAG_MODE = 1;

    privbtf int drbgModf = LIVE_DRAG_MODE;
    privbtf boolfbn drbgModfSft = fblsf;
    privbtf trbnsifnt List<JIntfrnblFrbmf> frbmfsCbdhf;
    privbtf boolfbn domponfntOrdfrChfdkingEnbblfd = truf;
    privbtf boolfbn domponfntOrdfrChbngfd = fblsf;

    /**
     * Crfbtfs b nfw <dodf>JDfsktopPbnf</dodf>.
     */
    publid JDfsktopPbnf() {
        sftUIPropfrty("opbquf", Boolfbn.TRUE);
        sftFodusCydlfRoot(truf);

        sftFodusTrbvfrsblPolidy(nfw LbyoutFodusTrbvfrsblPolidy() {
            publid Componfnt gftDffbultComponfnt(Contbinfr d) {
                JIntfrnblFrbmf jifArrby[] = gftAllFrbmfs();
                Componfnt domp = null;
                for (JIntfrnblFrbmf jif : jifArrby) {
                    domp = jif.gftFodusTrbvfrsblPolidy().gftDffbultComponfnt(jif);
                    if (domp != null) {
                        brfbk;
                    }
                }
                rfturn domp;
            }
        });
        updbtfUI();
    }

    /**
     * Rfturns thf L&bmp;F objfdt thbt rfndfrs this domponfnt.
     *
     * @rfturn thf <dodf>DfsktopPbnfUI</dodf> objfdt thbt
     *   rfndfrs this domponfnt
     */
    publid DfsktopPbnfUI gftUI() {
        rfturn (DfsktopPbnfUI)ui;
    }

    /**
     * Sfts thf L&bmp;F objfdt thbt rfndfrs this domponfnt.
     *
     * @pbrbm ui  thf DfsktopPbnfUI L&bmp;F objfdt
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *        bound: truf
     *       hiddfn: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Thf UI objfdt thbt implfmfnts thf Componfnt's LookAndFffl.
     */
    publid void sftUI(DfsktopPbnfUI ui) {
        supfr.sftUI(ui);
    }

    /**
     * Sfts thf "drbgging stylf" usfd by thf dfsktop pbnf.
     * You mby wbnt to dhbngf to onf modf or bnothfr for
     * pfrformbndf or bfsthftid rfbsons.
     *
     * @pbrbm drbgModf thf stylf of drbg to usf for itfms in thf Dfsktop
     *
     * @sff #LIVE_DRAG_MODE
     * @sff #OUTLINE_DRAG_MODE
     *
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Drbgging stylf for intfrnbl frbmf dhildrfn.
     *         fnum: LIVE_DRAG_MODE JDfsktopPbnf.LIVE_DRAG_MODE
     *               OUTLINE_DRAG_MODE JDfsktopPbnf.OUTLINE_DRAG_MODE
     * @sindf 1.3
     */
    publid void sftDrbgModf(int drbgModf) {
        int oldDrbgModf = this.drbgModf;
        this.drbgModf = drbgModf;
        firfPropfrtyChbngf("drbgModf", oldDrbgModf, this.drbgModf);
        drbgModfSft = truf;
     }

    /**
     * Gfts thf durrfnt "drbgging stylf" usfd by thf dfsktop pbnf.
     * @rfturn fithfr <dodf>Livf_DRAG_MODE</dodf> or
     *   <dodf>OUTLINE_DRAG_MODE</dodf>
     * @sff #sftDrbgModf
     * @sindf 1.3
     */
     publid int gftDrbgModf() {
         rfturn drbgModf;
     }

    /**
     * Rfturns thf {@dodf DfsktopMbngfr} thbt hbndlfs
     * dfsktop-spfdifid UI bdtions.
     *
     * @rfturn thf {@dodf DfsktopMbngfr} thbt hbndlfs dfsktop-spfdifid
     *         UI bdtions
     */
    publid DfsktopMbnbgfr gftDfsktopMbnbgfr() {
        rfturn dfsktopMbnbgfr;
    }

    /**
     * Sfts thf <dodf>DfsktopMbngfr</dodf> thbt will hbndlf
     * dfsktop-spfdifid UI bdtions. This mby bf ovfrriddfn by
     * {@dodf LookAndFffl}.
     *
     * @pbrbm d thf <dodf>DfsktopMbnbgfr</dodf> to usf
     *
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Dfsktop mbnbgfr to hbndlf thf intfrnbl frbmfs in thf
     *               dfsktop pbnf.
     */
    publid void sftDfsktopMbnbgfr(DfsktopMbnbgfr d) {
        DfsktopMbnbgfr oldVbluf = dfsktopMbnbgfr;
        dfsktopMbnbgfr = d;
        firfPropfrtyChbngf("dfsktopMbnbgfr", oldVbluf, dfsktopMbnbgfr);
    }

    /**
     * Notifidbtion from thf <dodf>UIMbnbgfr</dodf> thbt thf L&bmp;F hbs dhbngfd.
     * Rfplbdfs thf durrfnt UI objfdt with thf lbtfst vfrsion from thf
     * <dodf>UIMbnbgfr</dodf>.
     *
     * @sff JComponfnt#updbtfUI
     */
    publid void updbtfUI() {
        sftUI((DfsktopPbnfUI)UIMbnbgfr.gftUI(this));
    }


    /**
     * Rfturns thf nbmf of thf L&bmp;F dlbss thbt rfndfrs this domponfnt.
     *
     * @rfturn thf string "DfsktopPbnfUI"
     * @sff JComponfnt#gftUIClbssID
     * @sff UIDffbults#gftUI
     */
    publid String gftUIClbssID() {
        rfturn uiClbssID;
    }

    /**
     * Rfturns bll <dodf>JIntfrnblFrbmfs</dodf> durrfntly displbyfd in thf
     * dfsktop. Rfturns idonififd frbmfs bs wfll bs fxpbndfd frbmfs.
     *
     * @rfturn bn brrby of <dodf>JIntfrnblFrbmf</dodf> objfdts
     */
    publid JIntfrnblFrbmf[] gftAllFrbmfs() {
        rfturn gftAllFrbmfs(this).toArrby(nfw JIntfrnblFrbmf[0]);
    }

    privbtf stbtid Collfdtion<JIntfrnblFrbmf> gftAllFrbmfs(Contbinfr pbrfnt) {
        int i, dount;
        Collfdtion<JIntfrnblFrbmf> rfsults = nfw ArrbyList<JIntfrnblFrbmf>();
        dount = pbrfnt.gftComponfntCount();
        for (i = 0; i < dount; i++) {
            Componfnt nfxt = pbrfnt.gftComponfnt(i);
            if (nfxt instbndfof JIntfrnblFrbmf) {
                rfsults.bdd((JIntfrnblFrbmf) nfxt);
            } flsf if (nfxt instbndfof JIntfrnblFrbmf.JDfsktopIdon) {
                JIntfrnblFrbmf tmp = ((JIntfrnblFrbmf.JDfsktopIdon) nfxt).gftIntfrnblFrbmf();
                if (tmp != null) {
                    rfsults.bdd(tmp);
                }
            } flsf if (nfxt instbndfof Contbinfr) {
                rfsults.bddAll(gftAllFrbmfs((Contbinfr) nfxt));
            }
        }
        rfturn rfsults;
    }

    /** Rfturns thf durrfntly bdtivf <dodf>JIntfrnblFrbmf</dodf>
      * in this <dodf>JDfsktopPbnf</dodf>, or <dodf>null</dodf>
      * if no <dodf>JIntfrnblFrbmf</dodf> is durrfntly bdtivf.
      *
      * @rfturn thf durrfntly bdtivf <dodf>JIntfrnblFrbmf</dodf> or
      *   <dodf>null</dodf>
      * @sindf 1.3
      */

    publid JIntfrnblFrbmf gftSflfdtfdFrbmf() {
      rfturn sflfdtfdFrbmf;
    }

    /** Sfts thf durrfntly bdtivf <dodf>JIntfrnblFrbmf</dodf>
     *  in this <dodf>JDfsktopPbnf</dodf>. This mfthod is usfd to bridgf
     *  thf pbdkbgf gbp bftwffn JDfsktopPbnf bnd thf plbtform implfmfntbtion
     *  dodf bnd should not bf dbllfd dirfdtly. To visublly sflfdt thf frbmf
     *  thf dlifnt must dbll JIntfrnblFrbmf.sftSflfdtfd(truf) to bdtivbtf
     *  thf frbmf.
     *  @sff JIntfrnblFrbmf#sftSflfdtfd(boolfbn)
     *
     * @pbrbm f thf intfrnbl frbmf thbt's durrfntly sflfdtfd
     * @sindf 1.3
     */

    publid void sftSflfdtfdFrbmf(JIntfrnblFrbmf f) {
      sflfdtfdFrbmf = f;
    }

    /**
     * Rfturns bll <dodf>JIntfrnblFrbmfs</dodf> durrfntly displbyfd in thf
     * spfdififd lbyfr of thf dfsktop. Rfturns idonififd frbmfs bs wfll
     * fxpbndfd frbmfs.
     *
     * @pbrbm lbyfr  bn int spfdifying thf dfsktop lbyfr
     * @rfturn bn brrby of <dodf>JIntfrnblFrbmf</dodf> objfdts
     * @sff JLbyfrfdPbnf
     */
    publid JIntfrnblFrbmf[] gftAllFrbmfsInLbyfr(int lbyfr) {
        Collfdtion<JIntfrnblFrbmf> bllFrbmfs = gftAllFrbmfs(this);
        Itfrbtor<JIntfrnblFrbmf> itfrbtor = bllFrbmfs.itfrbtor();
        whilf (itfrbtor.hbsNfxt()) {
            if (itfrbtor.nfxt().gftLbyfr() != lbyfr) {
                itfrbtor.rfmovf();
            }
        }
        rfturn bllFrbmfs.toArrby(nfw JIntfrnblFrbmf[0]);
    }

    privbtf List<JIntfrnblFrbmf> gftFrbmfs() {
        Componfnt d;
        Sft<ComponfntPosition> sft = nfw TrffSft<ComponfntPosition>();
        for (int i = 0; i < gftComponfntCount(); i++) {
            d = gftComponfnt(i);
            if (d instbndfof JIntfrnblFrbmf) {
                sft.bdd(nfw ComponfntPosition((JIntfrnblFrbmf)d, gftLbyfr(d),
                    i));
            }
            flsf if (d instbndfof JIntfrnblFrbmf.JDfsktopIdon)  {
                d = ((JIntfrnblFrbmf.JDfsktopIdon)d).gftIntfrnblFrbmf();
                sft.bdd(nfw ComponfntPosition((JIntfrnblFrbmf)d, gftLbyfr(d),
                    i));
            }
        }
        List<JIntfrnblFrbmf> frbmfs = nfw ArrbyList<JIntfrnblFrbmf>(
                sft.sizf());
        for (ComponfntPosition position : sft) {
            frbmfs.bdd(position.domponfnt);
        }
        rfturn frbmfs;
   }

    privbtf stbtid dlbss ComponfntPosition implfmfnts
        Compbrbblf<ComponfntPosition> {
        privbtf finbl JIntfrnblFrbmf domponfnt;
        privbtf finbl int lbyfr;
        privbtf finbl int zOrdfr;

        ComponfntPosition(JIntfrnblFrbmf domponfnt, int lbyfr, int zOrdfr) {
            this.domponfnt = domponfnt;
            this.lbyfr = lbyfr;
            this.zOrdfr = zOrdfr;
        }

        publid int dompbrfTo(ComponfntPosition o) {
            int dfltb = o.lbyfr - lbyfr;
            if (dfltb == 0) {
                rfturn zOrdfr - o.zOrdfr;
            }
            rfturn dfltb;
        }
    }

    privbtf JIntfrnblFrbmf gftNfxtFrbmf(JIntfrnblFrbmf f, boolfbn forwbrd) {
        vfrifyFrbmfsCbdhf();
        if (f == null) {
            rfturn gftTopIntfrnblFrbmf();
        }
        int i = frbmfsCbdhf.indfxOf(f);
        if (i == -1 || frbmfsCbdhf.sizf() == 1) {
            /* frror */
            rfturn null;
        }
        if (forwbrd) {
            // nbvigbtf to thf nfxt frbmf
            if (++i == frbmfsCbdhf.sizf()) {
                /* wrbp */
                i = 0;
            }
        }
        flsf {
            // nbvigbtf to thf prfvious frbmf
            if (--i == -1) {
                /* wrbp */
                i = frbmfsCbdhf.sizf() - 1;
            }
        }
        rfturn frbmfsCbdhf.gft(i);
    }

    JIntfrnblFrbmf gftNfxtFrbmf(JIntfrnblFrbmf f) {
        rfturn gftNfxtFrbmf(f, truf);
    }

    privbtf JIntfrnblFrbmf gftTopIntfrnblFrbmf() {
        if (frbmfsCbdhf.sizf() == 0) {
            rfturn null;
        }
        rfturn frbmfsCbdhf.gft(0);
    }

    privbtf void updbtfFrbmfsCbdhf() {
        frbmfsCbdhf = gftFrbmfs();
    }

    privbtf void vfrifyFrbmfsCbdhf() {
        // If frbmfsCbdhf is dirty, thfn rfdrfbtf it.
        if (domponfntOrdfrChbngfd) {
            domponfntOrdfrChbngfd = fblsf;
            updbtfFrbmfsCbdhf();
        }
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid void rfmovf(Componfnt domp) {
        supfr.rfmovf(domp);
        updbtfFrbmfsCbdhf();
    }

    /**
     * Sflfdts thf nfxt <dodf>JIntfrnblFrbmf</dodf> in this dfsktop pbnf.
     *
     * @pbrbm forwbrd b boolfbn indidbting whidh dirfdtion to sflfdt in;
     *        <dodf>truf</dodf> for forwbrd, <dodf>fblsf</dodf> for
     *        bbdkwbrd
     * @rfturn thf JIntfrnblFrbmf thbt wbs sflfdtfd or <dodf>null</dodf>
     *         if nothing wbs sflfdtfd
     * @sindf 1.6
     */
    publid JIntfrnblFrbmf sflfdtFrbmf(boolfbn forwbrd) {
        JIntfrnblFrbmf sflfdtfdFrbmf = gftSflfdtfdFrbmf();
        JIntfrnblFrbmf frbmfToSflfdt = gftNfxtFrbmf(sflfdtfdFrbmf, forwbrd);
        if (frbmfToSflfdt == null) {
            rfturn null;
        }
        // Mbintbin nbvigbtion trbvfrsbl ordfr until bn
        // fxtfrnbl stbdk dhbngf, sudh bs b dlidk on b frbmf.
        sftComponfntOrdfrChfdkingEnbblfd(fblsf);
        if (forwbrd && sflfdtfdFrbmf != null) {
            sflfdtfdFrbmf.movfToBbdk();  // For Windows MDI fidflity.
        }
        try { frbmfToSflfdt.sftSflfdtfd(truf);
        } dbtdh (PropfrtyVftoExdfption pvf) {}
        sftComponfntOrdfrChfdkingEnbblfd(truf);
        rfturn frbmfToSflfdt;
    }

    /*
     * Sfts whfthfr domponfnt ordfr dhfdking is fnbblfd.
     * @pbrbm fnbblf b boolfbn vbluf, whfrf <dodf>truf</dodf> mfbns
     * b dhbngf in domponfnt ordfr will dbusf b dhbngf in thf kfybobrd
     * nbvigbtion ordfr.
     * @sindf 1.6
     */
    void sftComponfntOrdfrChfdkingEnbblfd(boolfbn fnbblf) {
        domponfntOrdfrChfdkingEnbblfd = fnbblf;
    }

    /**
     * {@inhfritDod}
     * @sindf 1.6
     */
    protfdtfd void bddImpl(Componfnt domp, Objfdt donstrbints, int indfx) {
        supfr.bddImpl(domp, donstrbints, indfx);
        if (domponfntOrdfrChfdkingEnbblfd) {
            if (domp instbndfof JIntfrnblFrbmf ||
                domp instbndfof JIntfrnblFrbmf.JDfsktopIdon) {
                domponfntOrdfrChbngfd = truf;
            }
        }
    }

    /**
     * {@inhfritDod}
     * @sindf 1.6
     */
    publid void rfmovf(int indfx) {
        if (domponfntOrdfrChfdkingEnbblfd) {
            Componfnt domp = gftComponfnt(indfx);
            if (domp instbndfof JIntfrnblFrbmf ||
                domp instbndfof JIntfrnblFrbmf.JDfsktopIdon) {
                domponfntOrdfrChbngfd = truf;
            }
        }
        supfr.rfmovf(indfx);
    }

    /**
     * {@inhfritDod}
     * @sindf 1.6
     */
    publid void rfmovfAll() {
        if (domponfntOrdfrChfdkingEnbblfd) {
            int dount = gftComponfntCount();
            for (int i = 0; i < dount; i++) {
                Componfnt domp = gftComponfnt(i);
                if (domp instbndfof JIntfrnblFrbmf ||
                    domp instbndfof JIntfrnblFrbmf.JDfsktopIdon) {
                    domponfntOrdfrChbngfd = truf;
                    brfbk;
                }
            }
        }
        supfr.rfmovfAll();
    }

    /**
     * {@inhfritDod}
     * @sindf 1.6
     */
    publid void sftComponfntZOrdfr(Componfnt domp, int indfx) {
        supfr.sftComponfntZOrdfr(domp, indfx);
        if (domponfntOrdfrChfdkingEnbblfd) {
            if (domp instbndfof JIntfrnblFrbmf ||
                domp instbndfof JIntfrnblFrbmf.JDfsktopIdon) {
                domponfntOrdfrChbngfd = truf;
            }
        }
    }

    /**
     * Sff rfbdObjfdt() bnd writfObjfdt() in JComponfnt for morf
     * informbtion bbout sfriblizbtion in Swing.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
        s.dffbultWritfObjfdt();
        if (gftUIClbssID().fqubls(uiClbssID)) {
            bytf dount = JComponfnt.gftWritfObjCountfr(this);
            JComponfnt.sftWritfObjCountfr(this, --dount);
            if (dount == 0 && ui != null) {
                ui.instbllUI(this);
            }
        }
    }

    void sftUIPropfrty(String propfrtyNbmf, Objfdt vbluf) {
        if (propfrtyNbmf == "drbgModf") {
            if (!drbgModfSft) {
                sftDrbgModf(((Intfgfr)vbluf).intVbluf());
                drbgModfSft = fblsf;
            }
        } flsf {
            supfr.sftUIPropfrty(propfrtyNbmf, vbluf);
        }
    }

    /**
     * Rfturns b string rfprfsfntbtion of this <dodf>JDfsktopPbnf</dodf>.
     * This mfthod is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of this <dodf>JDfsktopPbnf</dodf>
     */
    protfdtfd String pbrbmString() {
        String dfsktopMbnbgfrString = (dfsktopMbnbgfr != null ?
                                       dfsktopMbnbgfr.toString() : "");

        rfturn supfr.pbrbmString() +
        ",dfsktopMbnbgfr=" + dfsktopMbnbgfrString;
    }

/////////////////
// Addfssibility support
////////////////

    /**
     * Gfts thf <dodf>AddfssiblfContfxt</dodf> bssodibtfd with this
     * <dodf>JDfsktopPbnf</dodf>. For dfsktop pbnfs, thf
     * <dodf>AddfssiblfContfxt</dodf> tbkfs thf form of bn
     * <dodf>AddfssiblfJDfsktopPbnf</dodf>.
     * A nfw <dodf>AddfssiblfJDfsktopPbnf</dodf> instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn <dodf>AddfssiblfJDfsktopPbnf</dodf> thbt sfrvfs bs thf
     *         <dodf>AddfssiblfContfxt</dodf> of this <dodf>JDfsktopPbnf</dodf>
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfJDfsktopPbnf();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * This dlbss implfmfnts bddfssibility support for thf
     * <dodf>JDfsktopPbnf</dodf> dlbss.  It providfs bn implfmfntbtion of thf
     * Jbvb Addfssibility API bppropribtf to dfsktop pbnf usfr-intfrfbdf
     * flfmfnts.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
     * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
     * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
     * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    protfdtfd dlbss AddfssiblfJDfsktopPbnf fxtfnds AddfssiblfJComponfnt {

        /**
         * Gft thf rolf of this objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing thf rolf of thf
         * objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.DESKTOP_PANE;
        }
    }
}
