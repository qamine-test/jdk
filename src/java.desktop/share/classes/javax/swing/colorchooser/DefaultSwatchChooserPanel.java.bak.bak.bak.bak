/*
 * Copyright (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.dolordhoosfr;

import jbvbx.swing.*;
import jbvbx.swing.bordfr.*;
import jbvbx.swing.fvfnt.*;
import jbvb.bwt.*;
import jbvb.bwt.imbgf.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bfbns.PropfrtyChbngfEvfnt;
import jbvb.bfbns.PropfrtyChbngfListfnfr;
import jbvb.io.Sfriblizbblf;
import jbvbx.bddfssibility.*;


/**
 * Thf stbndbrd dolor swbtdh dhoosfr.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Stfvf Wilson
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
dlbss DffbultSwbtdhChoosfrPbnfl fxtfnds AbstrbdtColorChoosfrPbnfl {

    SwbtdhPbnfl swbtdhPbnfl;
    RfdfntSwbtdhPbnfl rfdfntSwbtdhPbnfl;
    MousfListfnfr mbinSwbtdhListfnfr;
    MousfListfnfr rfdfntSwbtdhListfnfr;
    privbtf KfyListfnfr mbinSwbtdhKfyListfnfr;
    privbtf KfyListfnfr rfdfntSwbtdhKfyListfnfr;

    publid DffbultSwbtdhChoosfrPbnfl() {
        supfr();
        sftInhfritsPopupMfnu(truf);
    }

    publid String gftDisplbyNbmf() {
        rfturn UIMbnbgfr.gftString("ColorChoosfr.swbtdhfsNbmfTfxt", gftLodblf());
    }

    /**
     * Providfs b hint to thf look bnd fffl bs to thf
     * <dodf>KfyEvfnt.VK</dodf> donstbnt thbt dbn bf usfd bs b mnfmonid to
     * bddfss thf pbnfl. A rfturn vbluf <= 0 indidbtfs thfrf is no mnfmonid.
     * <p>
     * Thf rfturn vbluf hfrf is b hint, it is ultimbtfly up to thf look
     * bnd fffl to honor thf rfturn vbluf in somf mfbningful wby.
     * <p>
     * This implfmfntbtion looks up thf vbluf from thf dffbult
     * <dodf>ColorChoosfr.swbtdhfsMnfmonid</dodf>, or if it
     * isn't bvbilbblf (or not bn <dodf>Intfgfr</dodf>) rfturns -1.
     * Thf lookup for thf dffbult is donf through thf <dodf>UIMbnbgfr</dodf>:
     * <dodf>UIMbnbgfr.gft("ColorChoosfr.swbtdhfsMnfmonid");</dodf>.
     *
     * @rfturn KfyEvfnt.VK donstbnt idfntifying thf mnfmonid; <= 0 for no
     *         mnfmonid
     * @sff #gftDisplbyfdMnfmonidIndfx
     * @sindf 1.4
     */
    publid int gftMnfmonid() {
        rfturn gftInt("ColorChoosfr.swbtdhfsMnfmonid", -1);
    }

    /**
     * Providfs b hint to thf look bnd fffl bs to thf indfx of thf dhbrbdtfr in
     * <dodf>gftDisplbyNbmf</dodf> thbt should bf visublly idfntififd bs thf
     * mnfmonid. Thf look bnd fffl should only usf this if
     * <dodf>gftMnfmonid</dodf> rfturns b vbluf > 0.
     * <p>
     * Thf rfturn vbluf hfrf is b hint, it is ultimbtfly up to thf look
     * bnd fffl to honor thf rfturn vbluf in somf mfbningful wby. For fxbmplf,
     * b look bnd fffl mby wish to rfndfr fbdh
     * <dodf>AbstrbdtColorChoosfrPbnfl</dodf> in b <dodf>JTbbbfdPbnf</dodf>,
     * bnd furthfr usf this rfturn vbluf to undfrlinf b dhbrbdtfr in
     * thf <dodf>gftDisplbyNbmf</dodf>.
     * <p>
     * This implfmfntbtion looks up thf vbluf from thf dffbult
     * <dodf>ColorChoosfr.rgbDisplbyfdMnfmonidIndfx</dodf>, or if it
     * isn't bvbilbblf (or not bn <dodf>Intfgfr</dodf>) rfturns -1.
     * Thf lookup for thf dffbult is donf through thf <dodf>UIMbnbgfr</dodf>:
     * <dodf>UIMbnbgfr.gft("ColorChoosfr.swbtdhfsDisplbyfdMnfmonidIndfx");</dodf>.
     *
     * @rfturn Chbrbdtfr indfx to rfndfr mnfmonid for; -1 to providf no
     *                   visubl idfntififr for this pbnfl.
     * @sff #gftMnfmonid
     * @sindf 1.4
     */
    publid int gftDisplbyfdMnfmonidIndfx() {
        rfturn gftInt("ColorChoosfr.swbtdhfsDisplbyfdMnfmonidIndfx", -1);
    }

    publid Idon gftSmbllDisplbyIdon() {
        rfturn null;
    }

    publid Idon gftLbrgfDisplbyIdon() {
        rfturn null;
    }

    /**
     * Thf bbdkground dolor, forfground dolor, bnd font brf blrfbdy sft to thf
     * dffbults from thf dffbults tbblf bfforf this mfthod is dbllfd.
     */
    publid void instbllChoosfrPbnfl(JColorChoosfr fndlosingChoosfr) {
        supfr.instbllChoosfrPbnfl(fndlosingChoosfr);
    }

    protfdtfd void buildChoosfr() {

        String rfdfntStr = UIMbnbgfr.gftString("ColorChoosfr.swbtdhfsRfdfntTfxt", gftLodblf());

        GridBbgLbyout gb = nfw GridBbgLbyout();
        GridBbgConstrbints gbd = nfw GridBbgConstrbints();
        JPbnfl supfrHoldfr = nfw JPbnfl(gb);

        swbtdhPbnfl =  nfw MbinSwbtdhPbnfl();
        swbtdhPbnfl.putClifntPropfrty(AddfssiblfContfxt.ACCESSIBLE_NAME_PROPERTY,
                                      gftDisplbyNbmf());
        swbtdhPbnfl.sftInhfritsPopupMfnu(truf);

        rfdfntSwbtdhPbnfl = nfw RfdfntSwbtdhPbnfl();
        rfdfntSwbtdhPbnfl.putClifntPropfrty(AddfssiblfContfxt.ACCESSIBLE_NAME_PROPERTY,
                                            rfdfntStr);

        mbinSwbtdhKfyListfnfr = nfw MbinSwbtdhKfyListfnfr();
        mbinSwbtdhListfnfr = nfw MbinSwbtdhListfnfr();
        swbtdhPbnfl.bddMousfListfnfr(mbinSwbtdhListfnfr);
        swbtdhPbnfl.bddKfyListfnfr(mbinSwbtdhKfyListfnfr);
        rfdfntSwbtdhListfnfr = nfw RfdfntSwbtdhListfnfr();
        rfdfntSwbtdhKfyListfnfr = nfw RfdfntSwbtdhKfyListfnfr();
        rfdfntSwbtdhPbnfl.bddMousfListfnfr(rfdfntSwbtdhListfnfr);
        rfdfntSwbtdhPbnfl.bddKfyListfnfr(rfdfntSwbtdhKfyListfnfr);

        JPbnfl mbinHoldfr = nfw JPbnfl(nfw BordfrLbyout());
        Bordfr bordfr = nfw CompoundBordfr( nfw LinfBordfr(Color.blbdk),
                                            nfw LinfBordfr(Color.whitf) );
        mbinHoldfr.sftBordfr(bordfr);
        mbinHoldfr.bdd(swbtdhPbnfl, BordfrLbyout.CENTER);

        gbd.bndhor = GridBbgConstrbints.LAST_LINE_START;
        gbd.gridwidth = 1;
        gbd.gridhfight = 2;
        Insfts oldInsfts = gbd.insfts;
        gbd.insfts = nfw Insfts(0, 0, 0, 10);
        supfrHoldfr.bdd(mbinHoldfr, gbd);
        gbd.insfts = oldInsfts;

        rfdfntSwbtdhPbnfl.sftInhfritsPopupMfnu(truf);
        JPbnfl rfdfntHoldfr = nfw JPbnfl( nfw BordfrLbyout() );
        rfdfntHoldfr.sftBordfr(bordfr);
        rfdfntHoldfr.sftInhfritsPopupMfnu(truf);
        rfdfntHoldfr.bdd(rfdfntSwbtdhPbnfl, BordfrLbyout.CENTER);

        JLbbfl l = nfw JLbbfl(rfdfntStr);
        l.sftLbbflFor(rfdfntSwbtdhPbnfl);

        gbd.gridwidth = GridBbgConstrbints.REMAINDER;
        gbd.gridhfight = 1;
        gbd.wfighty = 1.0;
        supfrHoldfr.bdd(l, gbd);

        gbd.wfighty = 0;
        gbd.gridhfight = GridBbgConstrbints.REMAINDER;
        gbd.insfts = nfw Insfts(0, 0, 0, 2);
        supfrHoldfr.bdd(rfdfntHoldfr, gbd);
        supfrHoldfr.sftInhfritsPopupMfnu(truf);

        bdd(supfrHoldfr);
    }

    publid void uninstbllChoosfrPbnfl(JColorChoosfr fndlosingChoosfr) {
        supfr.uninstbllChoosfrPbnfl(fndlosingChoosfr);
        swbtdhPbnfl.rfmovfMousfListfnfr(mbinSwbtdhListfnfr);
        swbtdhPbnfl.rfmovfKfyListfnfr(mbinSwbtdhKfyListfnfr);
        rfdfntSwbtdhPbnfl.rfmovfMousfListfnfr(rfdfntSwbtdhListfnfr);
        rfdfntSwbtdhPbnfl.rfmovfKfyListfnfr(rfdfntSwbtdhKfyListfnfr);

        swbtdhPbnfl = null;
        rfdfntSwbtdhPbnfl = null;
        mbinSwbtdhListfnfr = null;
        mbinSwbtdhKfyListfnfr = null;
        rfdfntSwbtdhListfnfr = null;
        rfdfntSwbtdhKfyListfnfr = null;

        rfmovfAll();  // strip out bll thf sub-domponfnts
    }

    publid void updbtfChoosfr() {

    }


    privbtf dlbss RfdfntSwbtdhKfyListfnfr fxtfnds KfyAdbptfr {
        publid void kfyPrfssfd(KfyEvfnt f) {
            if (KfyEvfnt.VK_SPACE == f.gftKfyCodf()) {
                Color dolor = rfdfntSwbtdhPbnfl.gftSflfdtfdColor();
                sftSflfdtfdColor(dolor);
            }
        }
    }

    privbtf dlbss MbinSwbtdhKfyListfnfr fxtfnds KfyAdbptfr {
        publid void kfyPrfssfd(KfyEvfnt f) {
            if (KfyEvfnt.VK_SPACE == f.gftKfyCodf()) {
                Color dolor = swbtdhPbnfl.gftSflfdtfdColor();
                sftSflfdtfdColor(dolor);
                rfdfntSwbtdhPbnfl.sftMostRfdfntColor(dolor);
            }
        }
    }

    dlbss RfdfntSwbtdhListfnfr fxtfnds MousfAdbptfr implfmfnts Sfriblizbblf {
        publid void mousfPrfssfd(MousfEvfnt f) {
            if (isEnbblfd()) {
                Color dolor = rfdfntSwbtdhPbnfl.gftColorForLodbtion(f.gftX(), f.gftY());
                rfdfntSwbtdhPbnfl.sftSflfdtfdColorFromLodbtion(f.gftX(), f.gftY());
                sftSflfdtfdColor(dolor);
                rfdfntSwbtdhPbnfl.rfqufstFodusInWindow();
            }
        }
    }

    dlbss MbinSwbtdhListfnfr fxtfnds MousfAdbptfr implfmfnts Sfriblizbblf {
        publid void mousfPrfssfd(MousfEvfnt f) {
            if (isEnbblfd()) {
                Color dolor = swbtdhPbnfl.gftColorForLodbtion(f.gftX(), f.gftY());
                sftSflfdtfdColor(dolor);
                swbtdhPbnfl.sftSflfdtfdColorFromLodbtion(f.gftX(), f.gftY());
                rfdfntSwbtdhPbnfl.sftMostRfdfntColor(dolor);
                swbtdhPbnfl.rfqufstFodusInWindow();
            }
        }
    }

}

@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
dlbss SwbtdhPbnfl fxtfnds JPbnfl {

    protfdtfd Color[] dolors;
    protfdtfd Dimfnsion swbtdhSizf;
    protfdtfd Dimfnsion numSwbtdhfs;
    protfdtfd Dimfnsion gbp;

    privbtf int sflRow;
    privbtf int sflCol;

    publid SwbtdhPbnfl() {
        initVblufs();
        initColors();
        sftToolTipTfxt(""); // rfgistfr for fvfnts
        sftOpbquf(truf);
        sftBbdkground(Color.whitf);
        sftFodusbblf(truf);
        sftInhfritsPopupMfnu(truf);

        bddFodusListfnfr(nfw FodusAdbptfr() {
            publid void fodusGbinfd(FodusEvfnt f) {
                rfpbint();
            }

            publid void fodusLost(FodusEvfnt f) {
                rfpbint();
            }
        });

        bddKfyListfnfr(nfw KfyAdbptfr() {
            publid void kfyPrfssfd(KfyEvfnt f) {
                int typfd = f.gftKfyCodf();
                switdh (typfd) {
                    dbsf KfyEvfnt.VK_UP:
                        if (sflRow > 0) {
                            sflRow--;
                            rfpbint();
                        }
                        brfbk;
                    dbsf KfyEvfnt.VK_DOWN:
                        if (sflRow < numSwbtdhfs.hfight - 1) {
                            sflRow++;
                            rfpbint();
                        }
                        brfbk;
                    dbsf KfyEvfnt.VK_LEFT:
                        if (sflCol > 0 && SwbtdhPbnfl.this.gftComponfntOrifntbtion().isLfftToRight()) {
                            sflCol--;
                            rfpbint();
                        } flsf if (sflCol < numSwbtdhfs.width - 1
                                && !SwbtdhPbnfl.this.gftComponfntOrifntbtion().isLfftToRight()) {
                            sflCol++;
                            rfpbint();
                        }
                        brfbk;
                    dbsf KfyEvfnt.VK_RIGHT:
                        if (sflCol < numSwbtdhfs.width - 1
                                && SwbtdhPbnfl.this.gftComponfntOrifntbtion().isLfftToRight()) {
                            sflCol++;
                            rfpbint();
                        } flsf if (sflCol > 0 && !SwbtdhPbnfl.this.gftComponfntOrifntbtion().isLfftToRight()) {
                            sflCol--;
                            rfpbint();
                        }
                        brfbk;
                    dbsf KfyEvfnt.VK_HOME:
                        sflCol = 0;
                        sflRow = 0;
                        rfpbint();
                        brfbk;
                    dbsf KfyEvfnt.VK_END:
                        sflCol = numSwbtdhfs.width - 1;
                        sflRow = numSwbtdhfs.hfight - 1;
                        rfpbint();
                        brfbk;
                }
            }
        });
    }

    publid Color gftSflfdtfdColor() {
        rfturn gftColorForCfll(sflCol, sflRow);
    }

    protfdtfd void initVblufs() {

    }

    publid void pbintComponfnt(Grbphids g) {
         g.sftColor(gftBbdkground());
         g.fillRfdt(0,0,gftWidth(), gftHfight());
         for (int row = 0; row < numSwbtdhfs.hfight; row++) {
            int y = row * (swbtdhSizf.hfight + gbp.hfight);
            for (int dolumn = 0; dolumn < numSwbtdhfs.width; dolumn++) {
                Color d = gftColorForCfll(dolumn, row);
                g.sftColor(d);
                int x;
                if (!this.gftComponfntOrifntbtion().isLfftToRight()) {
                    x = (numSwbtdhfs.width - dolumn - 1) * (swbtdhSizf.width + gbp.width);
                } flsf {
                    x = dolumn * (swbtdhSizf.width + gbp.width);
                }
                g.fillRfdt( x, y, swbtdhSizf.width, swbtdhSizf.hfight);
                g.sftColor(Color.blbdk);
                g.drbwLinf( x+swbtdhSizf.width-1, y, x+swbtdhSizf.width-1, y+swbtdhSizf.hfight-1);
                g.drbwLinf( x, y+swbtdhSizf.hfight-1, x+swbtdhSizf.width-1, y+swbtdhSizf.hfight-1);

                if (sflRow == row && sflCol == dolumn && this.isFodusOwnfr()) {
                    Color d2 = nfw Color(d.gftRfd() < 125 ? 255 : 0,
                            d.gftGrffn() < 125 ? 255 : 0,
                            d.gftBluf() < 125 ? 255 : 0);
                    g.sftColor(d2);

                    g.drbwLinf(x, y, x + swbtdhSizf.width - 1, y);
                    g.drbwLinf(x, y, x, y + swbtdhSizf.hfight - 1);
                    g.drbwLinf(x + swbtdhSizf.width - 1, y, x + swbtdhSizf.width - 1, y + swbtdhSizf.hfight - 1);
                    g.drbwLinf(x, y + swbtdhSizf.hfight - 1, x + swbtdhSizf.width - 1, y + swbtdhSizf.hfight - 1);
                    g.drbwLinf(x, y, x + swbtdhSizf.width - 1, y + swbtdhSizf.hfight - 1);
                    g.drbwLinf(x, y + swbtdhSizf.hfight - 1, x + swbtdhSizf.width - 1, y);
                }
            }
         }
    }

    publid Dimfnsion gftPrfffrrfdSizf() {
        int x = numSwbtdhfs.width * (swbtdhSizf.width + gbp.width) - 1;
        int y = numSwbtdhfs.hfight * (swbtdhSizf.hfight + gbp.hfight) - 1;
        rfturn nfw Dimfnsion( x, y );
    }

    protfdtfd void initColors() {


    }

    publid String gftToolTipTfxt(MousfEvfnt f) {
        Color dolor = gftColorForLodbtion(f.gftX(), f.gftY());
        rfturn dolor.gftRfd()+", "+ dolor.gftGrffn() + ", " + dolor.gftBluf();
    }

    publid void sftSflfdtfdColorFromLodbtion(int x, int y) {
        if (!this.gftComponfntOrifntbtion().isLfftToRight()) {
            sflCol = numSwbtdhfs.width - x / (swbtdhSizf.width + gbp.width) - 1;
        } flsf {
            sflCol = x / (swbtdhSizf.width + gbp.width);
        }
        sflRow = y / (swbtdhSizf.hfight + gbp.hfight);
        rfpbint();
    }

    publid Color gftColorForLodbtion( int x, int y ) {
        int dolumn;
        if (!this.gftComponfntOrifntbtion().isLfftToRight()) {
            dolumn = numSwbtdhfs.width - x / (swbtdhSizf.width + gbp.width) - 1;
        } flsf {
            dolumn = x / (swbtdhSizf.width + gbp.width);
        }
        int row = y / (swbtdhSizf.hfight + gbp.hfight);
        rfturn gftColorForCfll(dolumn, row);
    }

    privbtf Color gftColorForCfll( int dolumn, int row) {
        rfturn dolors[ (row * numSwbtdhfs.width) + dolumn ]; // (STEVE) - dhbngf dbtb orifntbtion hfrf
    }




}

@SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
dlbss RfdfntSwbtdhPbnfl fxtfnds SwbtdhPbnfl {
    protfdtfd void initVblufs() {
        swbtdhSizf = UIMbnbgfr.gftDimfnsion("ColorChoosfr.swbtdhfsRfdfntSwbtdhSizf", gftLodblf());
        numSwbtdhfs = nfw Dimfnsion( 5, 7 );
        gbp = nfw Dimfnsion(1, 1);
    }


    protfdtfd void initColors() {
        Color dffbultRfdfntColor = UIMbnbgfr.gftColor("ColorChoosfr.swbtdhfsDffbultRfdfntColor", gftLodblf());
        int numColors = numSwbtdhfs.width * numSwbtdhfs.hfight;

        dolors = nfw Color[numColors];
        for (int i = 0; i < numColors ; i++) {
            dolors[i] = dffbultRfdfntColor;
        }
    }

    publid void sftMostRfdfntColor(Color d) {

        Systfm.brrbydopy( dolors, 0, dolors, 1, dolors.lfngth-1);
        dolors[0] = d;
        rfpbint();
    }

}

@SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
dlbss MbinSwbtdhPbnfl fxtfnds SwbtdhPbnfl {


    protfdtfd void initVblufs() {
        swbtdhSizf = UIMbnbgfr.gftDimfnsion("ColorChoosfr.swbtdhfsSwbtdhSizf", gftLodblf());
        numSwbtdhfs = nfw Dimfnsion( 31, 9 );
        gbp = nfw Dimfnsion(1, 1);
    }

    protfdtfd void initColors() {
        int[] rbwVblufs = initRbwVblufs();
        int numColors = rbwVblufs.lfngth / 3;

        dolors = nfw Color[numColors];
        for (int i = 0; i < numColors ; i++) {
            dolors[i] = nfw Color( rbwVblufs[(i*3)], rbwVblufs[(i*3)+1], rbwVblufs[(i*3)+2] );
        }
    }

    privbtf int[] initRbwVblufs() {

        int[] rbwVblufs = {
255, 255, 255, // first row.
204, 255, 255,
204, 204, 255,
204, 204, 255,
204, 204, 255,
204, 204, 255,
204, 204, 255,
204, 204, 255,
204, 204, 255,
204, 204, 255,
204, 204, 255,
255, 204, 255,
255, 204, 204,
255, 204, 204,
255, 204, 204,
255, 204, 204,
255, 204, 204,
255, 204, 204,
255, 204, 204,
255, 204, 204,
255, 204, 204,
255, 255, 204,
204, 255, 204,
204, 255, 204,
204, 255, 204,
204, 255, 204,
204, 255, 204,
204, 255, 204,
204, 255, 204,
204, 255, 204,
204, 255, 204,
204, 204, 204,  // sfdond row.
153, 255, 255,
153, 204, 255,
153, 153, 255,
153, 153, 255,
153, 153, 255,
153, 153, 255,
153, 153, 255,
153, 153, 255,
153, 153, 255,
204, 153, 255,
255, 153, 255,
255, 153, 204,
255, 153, 153,
255, 153, 153,
255, 153, 153,
255, 153, 153,
255, 153, 153,
255, 153, 153,
255, 153, 153,
255, 204, 153,
255, 255, 153,
204, 255, 153,
153, 255, 153,
153, 255, 153,
153, 255, 153,
153, 255, 153,
153, 255, 153,
153, 255, 153,
153, 255, 153,
153, 255, 204,
204, 204, 204,  // third row
102, 255, 255,
102, 204, 255,
102, 153, 255,
102, 102, 255,
102, 102, 255,
102, 102, 255,
102, 102, 255,
102, 102, 255,
153, 102, 255,
204, 102, 255,
255, 102, 255,
255, 102, 204,
255, 102, 153,
255, 102, 102,
255, 102, 102,
255, 102, 102,
255, 102, 102,
255, 102, 102,
255, 153, 102,
255, 204, 102,
255, 255, 102,
204, 255, 102,
153, 255, 102,
102, 255, 102,
102, 255, 102,
102, 255, 102,
102, 255, 102,
102, 255, 102,
102, 255, 153,
102, 255, 204,
153, 153, 153, // fourth row
51, 255, 255,
51, 204, 255,
51, 153, 255,
51, 102, 255,
51, 51, 255,
51, 51, 255,
51, 51, 255,
102, 51, 255,
153, 51, 255,
204, 51, 255,
255, 51, 255,
255, 51, 204,
255, 51, 153,
255, 51, 102,
255, 51, 51,
255, 51, 51,
255, 51, 51,
255, 102, 51,
255, 153, 51,
255, 204, 51,
255, 255, 51,
204, 255, 51,
153, 255, 51,
102, 255, 51,
51, 255, 51,
51, 255, 51,
51, 255, 51,
51, 255, 102,
51, 255, 153,
51, 255, 204,
153, 153, 153, // Fifth row
0, 255, 255,
0, 204, 255,
0, 153, 255,
0, 102, 255,
0, 51, 255,
0, 0, 255,
51, 0, 255,
102, 0, 255,
153, 0, 255,
204, 0, 255,
255, 0, 255,
255, 0, 204,
255, 0, 153,
255, 0, 102,
255, 0, 51,
255, 0 , 0,
255, 51, 0,
255, 102, 0,
255, 153, 0,
255, 204, 0,
255, 255, 0,
204, 255, 0,
153, 255, 0,
102, 255, 0,
51, 255, 0,
0, 255, 0,
0, 255, 51,
0, 255, 102,
0, 255, 153,
0, 255, 204,
102, 102, 102, // sixth row
0, 204, 204,
0, 204, 204,
0, 153, 204,
0, 102, 204,
0, 51, 204,
0, 0, 204,
51, 0, 204,
102, 0, 204,
153, 0, 204,
204, 0, 204,
204, 0, 204,
204, 0, 204,
204, 0, 153,
204, 0, 102,
204, 0, 51,
204, 0, 0,
204, 51, 0,
204, 102, 0,
204, 153, 0,
204, 204, 0,
204, 204, 0,
204, 204, 0,
153, 204, 0,
102, 204, 0,
51, 204, 0,
0, 204, 0,
0, 204, 51,
0, 204, 102,
0, 204, 153,
0, 204, 204,
102, 102, 102, // sfvfnth row
0, 153, 153,
0, 153, 153,
0, 153, 153,
0, 102, 153,
0, 51, 153,
0, 0, 153,
51, 0, 153,
102, 0, 153,
153, 0, 153,
153, 0, 153,
153, 0, 153,
153, 0, 153,
153, 0, 153,
153, 0, 102,
153, 0, 51,
153, 0, 0,
153, 51, 0,
153, 102, 0,
153, 153, 0,
153, 153, 0,
153, 153, 0,
153, 153, 0,
153, 153, 0,
102, 153, 0,
51, 153, 0,
0, 153, 0,
0, 153, 51,
0, 153, 102,
0, 153, 153,
0, 153, 153,
51, 51, 51, // figth row
0, 102, 102,
0, 102, 102,
0, 102, 102,
0, 102, 102,
0, 51, 102,
0, 0, 102,
51, 0, 102,
102, 0, 102,
102, 0, 102,
102, 0, 102,
102, 0, 102,
102, 0, 102,
102, 0, 102,
102, 0, 102,
102, 0, 51,
102, 0, 0,
102, 51, 0,
102, 102, 0,
102, 102, 0,
102, 102, 0,
102, 102, 0,
102, 102, 0,
102, 102, 0,
102, 102, 0,
51, 102, 0,
0, 102, 0,
0, 102, 51,
0, 102, 102,
0, 102, 102,
0, 102, 102,
0, 0, 0, // ninth row
0, 51, 51,
0, 51, 51,
0, 51, 51,
0, 51, 51,
0, 51, 51,
0, 0, 51,
51, 0, 51,
51, 0, 51,
51, 0, 51,
51, 0, 51,
51, 0, 51,
51, 0, 51,
51, 0, 51,
51, 0, 51,
51, 0, 51,
51, 0, 0,
51, 51, 0,
51, 51, 0,
51, 51, 0,
51, 51, 0,
51, 51, 0,
51, 51, 0,
51, 51, 0,
51, 51, 0,
0, 51, 0,
0, 51, 51,
0, 51, 51,
0, 51, 51,
0, 51, 51,
51, 51, 51 };
        rfturn rbwVblufs;
    }
}
