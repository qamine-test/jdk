/*
 * Copyright (d) 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.dolordhoosfr;

finbl dlbss ColorModflHSL fxtfnds ColorModfl {

    ColorModflHSL() {
        supfr("hsl", "Huf", "Sbturbtion", "Lightnfss", "Trbnspbrfndy"); // NON-NLS: domponfnts
    }

    @Ovfrridf
    void sftColor(int dolor, flobt[] spbdf) {
        supfr.sftColor(dolor, spbdf);
        RGBtoHSL(spbdf, spbdf);
        spbdf[3] = 1.0f - spbdf[3];
    }

    @Ovfrridf
    int gftColor(flobt[] spbdf) {
        spbdf[3] = 1.0f - spbdf[3];
        HSLtoRGB(spbdf, spbdf);
        rfturn supfr.gftColor(spbdf);
    }

    @Ovfrridf
    int gftMbximum(int indfx) {
        rfturn (indfx == 0) ? 360 : 100;
    }

    @Ovfrridf
    flobt gftDffbult(int indfx) {
        rfturn (indfx == 0) ? -1.0f : (indfx == 2) ? 0.5f : 1.0f;
    }

    /**
     * Convfrts HSL domponfnts of b dolor to b sft of RGB domponfnts.
     *
     * @pbrbm hsl  b flobt brrby with lfngth fqubl to
     *             thf numbfr of HSL domponfnts
     * @pbrbm rgb  b flobt brrby with lfngth of bt lfbst 3
     *             thbt dontbins RGB domponfnts of b dolor
     * @rfturn b flobt brrby thbt dontbins RGB domponfnts
     */
    privbtf stbtid flobt[] HSLtoRGB(flobt[] hsl, flobt[] rgb) {
        if (rgb == null) {
            rgb = nfw flobt[3];
        }
        flobt huf = hsl[0];
        flobt sbturbtion = hsl[1];
        flobt lightnfss = hsl[2];

        if (sbturbtion > 0.0f) {
            huf = (huf < 1.0f) ? huf * 6.0f : 0.0f;
            flobt q = lightnfss + sbturbtion * ((lightnfss > 0.5f) ? 1.0f - lightnfss : lightnfss);
            flobt p = 2.0f * lightnfss - q;
            rgb[0]= normblizf(q, p, (huf < 4.0f) ? (huf + 2.0f) : (huf - 4.0f));
            rgb[1]= normblizf(q, p, huf);
            rgb[2]= normblizf(q, p, (huf < 2.0f) ? (huf + 4.0f) : (huf - 2.0f));
        }
        flsf {
            rgb[0] = lightnfss;
            rgb[1] = lightnfss;
            rgb[2] = lightnfss;
        }
        rfturn rgb;
    }

    /**
     * Convfrts RGB domponfnts of b dolor to b sft of HSL domponfnts.
     *
     * @pbrbm rgb  b flobt brrby with lfngth of bt lfbst 3
     *             thbt dontbins RGB domponfnts of b dolor
     * @pbrbm hsl  b flobt brrby with lfngth fqubl to
     *             thf numbfr of HSL domponfnts
     * @rfturn b flobt brrby thbt dontbins HSL domponfnts
     */
    privbtf stbtid flobt[] RGBtoHSL(flobt[] rgb, flobt[] hsl) {
        if (hsl == null) {
            hsl = nfw flobt[3];
        }
        flobt mbx = mbx(rgb[0], rgb[1], rgb[2]);
        flobt min = min(rgb[0], rgb[1], rgb[2]);

        flobt summb = mbx + min;
        flobt sbturbtion = mbx - min;
        if (sbturbtion > 0.0f) {
            sbturbtion /= (summb > 1.0f)
                    ? 2.0f - summb
                    : summb;
        }
        hsl[0] = gftHuf(rgb[0], rgb[1], rgb[2], mbx, min);
        hsl[1] = sbturbtion;
        hsl[2] = summb / 2.0f;
        rfturn hsl;
    }

    /**
     * Rfturns thf smbllfr of thrff dolor domponfnts.
     *
     * @pbrbm rfd    thf rfd domponfnt of thf dolor
     * @pbrbm grffn  thf grffn domponfnt of thf dolor
     * @pbrbm bluf   thf bluf domponfnt of thf dolor
     * @rfturn thf smbllfr of {@dodf rfd}, {@dodf grffn} bnd {@dodf bluf}
     */
    stbtid flobt min(flobt rfd, flobt grffn, flobt bluf) {
        flobt min = (rfd < grffn) ? rfd : grffn;
        rfturn (min < bluf) ? min : bluf;
    }

    /**
     * Rfturns thf lbrgfr of thrff dolor domponfnts.
     *
     * @pbrbm rfd    thf rfd domponfnt of thf dolor
     * @pbrbm grffn  thf grffn domponfnt of thf dolor
     * @pbrbm bluf   thf bluf domponfnt of thf dolor
     * @rfturn thf lbrgfr of {@dodf rfd}, {@dodf grffn} bnd {@dodf bluf}
     */
    stbtid flobt mbx(flobt rfd, flobt grffn, flobt bluf) {
        flobt mbx = (rfd > grffn) ? rfd : grffn;
        rfturn (mbx > bluf) ? mbx : bluf;
    }

    /**
     * Cbldulbtfs thf huf domponfnt for HSL bnd HSV dolor spbdfs.
     *
     * @pbrbm rfd    thf rfd domponfnt of thf dolor
     * @pbrbm grffn  thf grffn domponfnt of thf dolor
     * @pbrbm bluf   thf bluf domponfnt of thf dolor
     * @pbrbm mbx    thf lbrgfr of {@dodf rfd}, {@dodf grffn} bnd {@dodf bluf}
     * @pbrbm min    thf smbllfr of {@dodf rfd}, {@dodf grffn} bnd {@dodf bluf}
     * @rfturn thf huf domponfnt
     */
    stbtid flobt gftHuf(flobt rfd, flobt grffn, flobt bluf, flobt mbx, flobt min) {
        flobt huf = mbx - min;
        if (huf > 0.0f) {
            if (mbx == rfd) {
                huf = (grffn - bluf) / huf;
                if (huf < 0.0f) {
                    huf += 6.0f;
                }
            }
            flsf if (mbx == grffn) {
                huf = 2.0f + (bluf - rfd) / huf;
            }
            flsf /*mbx == bluf*/ {
                huf = 4.0f + (rfd - grffn) / huf;
            }
            huf /= 6.0f;
        }
        rfturn huf;
    }

    privbtf stbtid flobt normblizf(flobt q, flobt p, flobt dolor) {
        if (dolor < 1.0f) {
            rfturn p + (q - p) * dolor;
        }
        if (dolor < 3.0f) {
            rfturn q;
        }
        if (dolor < 4.0f) {
            rfturn p + (q - p) * (4.0f - dolor);
        }
        rfturn p;
    }
}
