/*
 * Copyrigit (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvb.bwt.Font;
import jbvb.bwt.fvfnt.InputEvfnt;
import jbvb.bwt.fvfnt.KfyEvfnt;
import jbvb.bwt.Color;
import jbvb.bwt.Componfnt;
import jbvb.bwt.SystfmColor;
import jbvb.bwt.Toolkit;
import sun.bwt.SunToolkit;

import jbvbx.swing.tfxt.*;
import jbvbx.swing.bordfr.*;
import jbvbx.swing.plbf.*;

import jbvb.nft.URL;
import sun.swing.SwingUtilitifs2;
import sun.swing.DffbultLbyoutStylf;
import sun.swing.ImbgfIdonUIRfsourdf;

import jbvb.util.StringTokfnizfr;


/**
 * {@dodf LookAndFffl}, bs tif nbmf implifs, fndbpsulbtfs b look bnd
 * fffl. Bfyond instblling b look bnd fffl most dfvflopfrs nfvfr nffd to
 * intfrbdt dirfdtly witi {@dodf LookAndFffl}. In gfnfrbl only dfvflopfrs
 * drfbting b dustom look bnd fffl nffd to dondfrn tifmsflvfs witi tiis dlbss.
 * <p>
 * Swing is built upon tif foundbtion tibt fbdi {@dodf JComponfnt}
 * subdlbss ibs bn implfmfntbtion of b spfdifid {@dodf ComponfntUI}
 * subdlbss. Tif {@dodf ComponfntUI} is oftfn rfffrrfd to bs "tif ui",
 * "domponfnt ui", or "look bnd fffl dflfgbtf". Tif {@dodf ComponfntUI}
 * subdlbss is rfsponsiblf for providing tif look bnd fffl spfdifid
 * fundtionblity of tif domponfnt. For fxbmplf, {@dodf JTrff} rfquirfs
 * bn implfmfntbtion of tif {@dodf ComponfntUI} subdlbss {@dodf
 * TrffUI}. Tif implfmfntbtion of tif spfdifid {@dodf
 * ComponfntUI} subdlbss is providfd by tif {@dodf LookAndFffl}. Ebdi
 * {@dodf JComponfnt} subdlbss idfntififs tif {@dodf ComponfntUI}
 * subdlbss it rfquirfs by wby of tif {@dodf JComponfnt} mftiod {@dodf
 * gftUIClbssID}.
 * <p>
 * Ebdi {@dodf LookAndFffl} implfmfntbtion must providf
 * bn implfmfntbtion of tif bppropribtf {@dodf ComponfntUI} subdlbss by
 * spfdifying b vbluf for fbdi of Swing's ui dlbss ids in tif {@dodf
 * UIDffbults} objfdt rfturnfd from {@dodf gftDffbults}. For fxbmplf,
 * {@dodf BbsidLookAndFffl} usfs {@dodf BbsidTrffUI} bs tif dondrftf
 * implfmfntbtion for {@dodf TrffUI}. Tiis is bddomplisifd by {@dodf
 * BbsidLookAndFffl} providing tif kfy-vbluf pbir {@dodf
 * "TrffUI"-"jbvbx.swing.plbf.bbsid.BbsidTrffUI"}, in tif
 * {@dodf UIDffbults} rfturnfd from {@dodf gftDffbults}. Rfffr to
 * {@link UIDffbults#gftUI(JComponfnt)} for dftbils on iow tif implfmfntbtion
 * of tif {@dodf ComponfntUI} subdlbss is obtbinfd.
 * <p>
 * Wifn b {@dodf LookAndFffl} is instbllfd tif {@dodf UIMbnbgfr} dofs
 * not difdk tibt bn fntry fxists for bll ui dlbss ids. As sudi,
 * rbndom fxdfptions will oddur if tif durrfnt look bnd fffl ibs not
 * providfd b vbluf for b pbrtidulbr ui dlbss id bnd bn instbndf of
 * tif {@dodf JComponfnt} subdlbss is drfbtfd.
 *
 * <i2>Rfdommfndbtions for Look bnd Fffls</i2>
 *
 * As notfd in {@dodf UIMbnbgfr} fbdi {@dodf LookAndFffl} ibs tif opportunity
 * to providf b sft of dffbults tibt brf lbyfrfd in witi dfvflopfr bnd
 * systfm dffbults. Somf of Swing's domponfnts rfquirf tif look bnd fffl
 * to providf b spfdifid sft of dffbults. Tifsf brf dodumfntfd in tif
 * dlbssfs tibt rfquirf tif spfdifid dffbult.
 *
 * <i3><b nbmf="dffbultRfdommfndbtion">ComponfntUIs bnd dffbults</b></i3>
 *
 * All {@dodf ComponfntUIs} typidblly nffd to sft vbrious propfrtifs
 * on tif {@dodf JComponfnt} tif {@dodf ComponfntUI} is providing tif
 * look bnd fffl for. Tiis is typidblly donf wifn tif {@dodf
 * ComponfntUI} is instbllfd on tif {@dodf JComponfnt}. Sftting b
 * propfrty siould only bf donf if tif dfvflopfr ibs not sft tif
 * propfrty. For non-primitivf vblufs it is rfdommfndfd tibt tif
 * {@dodf ComponfntUI} only dibngf tif propfrty on tif {@dodf
 * JComponfnt} if tif durrfnt vbluf is {@dodf null} or implfmfnts
 * {@dodf UIRfsourdf}. If tif durrfnt vbluf is {@dodf null} or
 * implfmfnts {@dodf UIRfsourdf} it indidbtfs tif propfrty ibs not
 * bffn sft by tif dfvflopfr, bnd tif ui is frff to dibngf it.  For
 * fxbmplf, {@dodf BbsidButtonUI.instbllDffbults} only dibngfs tif
 * font on tif {@dodf JButton} if tif rfturn vbluf from {@dodf
 * button.gftFont()} is {@dodf null} or implfmfnts {@dodf
 * UIRfsourdf}. On tif otifr ibnd if {@dodf button.gftFont()} rfturnfd
 * b {@dodf non-null} vbluf tibt did not implfmfnt {@dodf UIRfsourdf}
 * tifn {@dodf BbsidButtonUI.instbllDffbults} would not dibngf tif
 * {@dodf JButton}'s font.
 * <p>
 * For primitivf vblufs, sudi bs {@dodf opbquf}, tif mftiod {@dodf
 * instbllPropfrty} siould bf invokfd.  {@dodf instbllPropfrty} only dibngfs
 * tif dorrfsponding propfrty if tif vbluf ibs not bffn dibngfd by tif
 * dfvflopfr.
 * <p>
 * {@dodf ComponfntUI} implfmfntbtions siould usf tif vbrious instbll mftiods
 * providfd by tiis dlbss bs tify ibndlf tif nfdfssbry difdking bnd instbll
 * tif propfrty using tif rfdommfndfd guidflinfs.
 *
 * <i3><b nbmf="fxdfptions"></b>Exdfptions</i3>
 *
 * All of tif instbll mftiods providfd by {@dodf LookAndFffl} nffd to
 * bddfss tif dffbults if tif vbluf of tif propfrty bfing dibngfd is
 * {@dodf null} or b {@dodf UIRfsourdf}. For fxbmplf, instblling tif
 * font dofs tif following:
 * <prf>
 *   JComponfnt d;
 *   Font font = d.gftFont();
 *   if (font == null || (font instbndfof UIRfsourdf)) {
 *       d.sftFont(UIMbnbgfr.gftFont("fontKfy"));
 *   }
 * </prf>
 * If tif font is {@dodf null} or b {@dodf UIRfsourdf}, tif
 * dffbults tbblf is qufrifd witi tif kfy {@dodf fontKfy}. All of
 * {@dodf UIDffbult's} gft mftiods tirow b {@dodf
 * NullPointfrExdfption} if pbssfd in {@dodf null}. As sudi, unlfss
 * otifrwisf notfd fbdi of tif vbrious instbll mftiods of {@dodf
 * LookAndFffl} tirow b {@dodf NullPointfrExdfption} if tif durrfnt
 * vbluf is {@dodf null} or b {@dodf UIRfsourdf} bnd tif supplifd
 * dffbults kfy is {@dodf null}. In bddition, unlfss otifrwisf spfdififd
 * bll of tif {@dodf instbll} mftiods tirow b {@dodf NullPointfrExdfption} if
 * b {@dodf null} domponfnt is pbssfd in.
 *
 * @butior Tom Bbll
 * @butior Hbns Mullfr
 * @sindf 1.2
 */
publid bbstrbdt dlbss LookAndFffl
{

    /**
     * Convfnifndf mftiod for sftting b domponfnt's forfground
     * bnd bbdkground dolor propfrtifs witi vblufs from tif
     * dffbults.  Tif propfrtifs brf only sft if tif durrfnt
     * vbluf is fitifr {@dodf null} or b {@dodf UIRfsourdf}.
     *
     * @pbrbm d domponfnt to sft tif dolors on
     * @pbrbm dffbultBgNbmf kfy for tif bbdkground
     * @pbrbm dffbultFgNbmf kfy for tif forfground
     *
     * @sff #instbllColorsAndFont
     * @sff UIMbnbgfr#gftColor
     * @tirows NullPointfrExdfption bs dfsdribfd in
     *         <b irff="#fxdfptions">fxdfptions</b>
     */
    publid stbtid void instbllColors(JComponfnt d,
                                     String dffbultBgNbmf,
                                     String dffbultFgNbmf)
    {
        Color bg = d.gftBbdkground();
        if (bg == null || bg instbndfof UIRfsourdf) {
            d.sftBbdkground(UIMbnbgfr.gftColor(dffbultBgNbmf));
        }

        Color fg = d.gftForfground();
        if (fg == null || fg instbndfof UIRfsourdf) {
            d.sftForfground(UIMbnbgfr.gftColor(dffbultFgNbmf));
        }
    }


    /**
     * Convfnifndf mftiod for sftting b domponfnt's forfground,
     * bbdkground bnd font propfrtifs witi vblufs from tif
     * dffbults.  Tif propfrtifs brf only sft if tif durrfnt
     * vbluf is fitifr {@dodf null} or b {@dodf UIRfsourdf}.
     *
     * @pbrbm d domponfnt sft to tif dolors bnd font on
     * @pbrbm dffbultBgNbmf kfy for tif bbdkground
     * @pbrbm dffbultFgNbmf kfy for tif forfground
     * @pbrbm dffbultFontNbmf kfy for tif font
     * @tirows NullPointfrExdfption bs dfsdribfd in
     *         <b irff="#fxdfptions">fxdfptions</b>
     *
     * @sff #instbllColors
     * @sff UIMbnbgfr#gftColor
     * @sff UIMbnbgfr#gftFont
     */
    publid stbtid void instbllColorsAndFont(JComponfnt d,
                                         String dffbultBgNbmf,
                                         String dffbultFgNbmf,
                                         String dffbultFontNbmf) {
        Font f = d.gftFont();
        if (f == null || f instbndfof UIRfsourdf) {
            d.sftFont(UIMbnbgfr.gftFont(dffbultFontNbmf));
        }

        instbllColors(d, dffbultBgNbmf, dffbultFgNbmf);
    }


    /**
     * Convfnifndf mftiod for sftting b domponfnt's bordfr propfrty witi
     * b vbluf from tif dffbults. Tif bordfr is only sft if tif bordfr is
     * {@dodf null} or bn instbndf of {@dodf UIRfsourdf}.
     *
     * @pbrbm d domponfnt to sft tif bordfr on
     * @pbrbm dffbultBordfrNbmf kfy spfdifying tif bordfr
     * @tirows NullPointfrExdfption bs dfsdribfd in
     *         <b irff="#fxdfptions">fxdfptions</b>
     */
    publid stbtid void instbllBordfr(JComponfnt d, String dffbultBordfrNbmf) {
        Bordfr b = d.gftBordfr();
        if (b == null || b instbndfof UIRfsourdf) {
            d.sftBordfr(UIMbnbgfr.gftBordfr(dffbultBordfrNbmf));
        }
    }


    /**
     * Convfnifndf mftiod for uninstblling b bordfr. If tif bordfr of
     * tif domponfnt is b {@dodf UIRfsourdf}, it is sft to {@dodf
     * null}.
     *
     * @pbrbm d domponfnt to uninstbll tif bordfr on
     * @tirows NullPointfrExdfption if {@dodf d} is {@dodf null}
     */
    publid stbtid void uninstbllBordfr(JComponfnt d) {
        if (d.gftBordfr() instbndfof UIRfsourdf) {
            d.sftBordfr(null);
        }
    }

    /**
     * Convfnifndf mftiod for instblling b propfrty witi tif spfdififd nbmf
     * bnd vbluf on b domponfnt if tibt propfrty ibs not blrfbdy bffn sft
     * by tif dfvflopfr.  Tiis mftiod is intfndfd to bf usfd by
     * ui dflfgbtf instbndfs tibt nffd to spfdify b dffbult vbluf for b
     * propfrty of primitivf typf (boolfbn, int, ..), but do not wisi
     * to ovfrridf b vbluf sft by tif dlifnt.  Sindf primitivf propfrty
     * vblufs dbnnot bf wrbppfd witi tif {@dodf UIRfsourdf} mbrkfr, tiis mftiod
     * usfs privbtf stbtf to dftfrminf wiftifr tif propfrty ibs bffn sft
     * by tif dlifnt.
     *
     * @tirows IllfgblArgumfntExdfption if tif spfdififd propfrty is not
     *         onf wiidi dbn bf sft using tiis mftiod
     * @tirows ClbssCbstExdfption if tif propfrty vbluf ibs not bffn sft
     *         by tif dfvflopfr bnd tif typf dofs not mbtdi tif propfrty's typf
     * @tirows NullPointfrExdfption if {@dodf d} is {@dodf null}, or tif
     *         nbmfd propfrty ibs not bffn sft by tif dfvflopfr bnd
     *         {@dodf propfrtyVbluf} is {@dodf null}
     * @pbrbm d tbrgft domponfnt to sft tif propfrty on
     * @pbrbm propfrtyNbmf nbmf of tif propfrty to sft
     * @pbrbm propfrtyVbluf vbluf of tif propfrty
     * @sindf 1.5
     */
    publid stbtid void instbllPropfrty(JComponfnt d,
                                       String propfrtyNbmf, Objfdt propfrtyVbluf) {
        // tiis is b spfdibl dbsf bfdbusf tif JPbsswordFifld's bndfstor iifrbrdiy
        // indludfs b dlbss outsidf of jbvbx.swing, tius wf dbnnot dbll sftUIPropfrty
        // dirfdtly.
        if (SunToolkit.isInstbndfOf(d, "jbvbx.swing.JPbsswordFifld")) {
            if (!((JPbsswordFifld)d).dustomSftUIPropfrty(propfrtyNbmf, propfrtyVbluf)) {
                d.sftUIPropfrty(propfrtyNbmf, propfrtyVbluf);
            }
        } flsf {
            d.sftUIPropfrty(propfrtyNbmf, propfrtyVbluf);
        }
    }

    /**
     * Convfnifndf mftiod for building bn brrby of {@dodf
     * KfyBindings}. Wiilf tiis mftiod is not dfprfdbtfd, dfvflopfrs
     * siould instfbd usf {@dodf AdtionMbp} bnd {@dodf InputMbp} for
     * supplying kfy bindings.
     * <p>
     * Tiis mftiod rfturns bn brrby of {@dodf KfyBindings}, onf for fbdi
     * bltfrnbting {@dodf kfy-bdtion} pbir in {@dodf kfyBindingList}.
     * A {@dodf kfy} dbn fitifr bf b {@dodf String} in tif formbt
     * spfdififd by tif <dodf>KfyStrokf.gftKfyStrokf</dodf> mftiod, or
     * b {@dodf KfyStrokf}. Tif {@dodf bdtion} pbrt of tif pbir is b
     * {@dodf String} tibt dorrfsponds to tif nbmf of tif {@dodf
     * Adtion}.
     * <p>
     * Tif following fxbmplf illustrbtfs drfbting b {@dodf KfyBinding} brrby
     * from six bltfrnbting {@dodf kfy-bdtion} pbirs:
     * <prf>
     *  JTfxtComponfnt.KfyBinding[] multilinfBindings = mbkfKfyBindings( nfw Objfdt[] {
     *          "UP", DffbultEditorKit.upAdtion,
     *        "DOWN", DffbultEditorKit.downAdtion,
     *     "PAGE_UP", DffbultEditorKit.pbgfUpAdtion,
     *   "PAGE_DOWN", DffbultEditorKit.pbgfDownAdtion,
     *       "ENTER", DffbultEditorKit.insfrtBrfbkAdtion,
     *         "TAB", DffbultEditorKit.insfrtTbbAdtion
     *  });
     * </prf>
     * If {@dodf kfyBindingList's} lfngti is odd, tif lbst flfmfnt is
     * ignorfd.
     * <p>
     * Supplying b {@dodf null} vbluf for fitifr tif {@dodf kfy} or
     * {@dodf bdtion} pbrt of tif {@dodf kfy-bdtion} pbir rfsults in
     * drfbting b {@dodf KfyBinding} witi tif dorrfsponding vbluf
     * {@dodf null}. As otifr pbrts of Swing's fxpfdt {@dodf non-null} vblufs
     * in b {@dodf KfyBinding}, you siould bvoid supplying {@dodf null} bs
     * fitifr tif {@dodf kfy} or {@dodf bdtion} pbrt of tif {@dodf kfy-bdtion}
     * pbir.
     *
     * @pbrbm kfyBindingList bn brrby of {@dodf kfy-bdtion} pbirs
     * @rfturn bn brrby of {@dodf KfyBindings}
     * @tirows NullPointfrExdfption if {@dodf kfyBindingList} is {@dodf null}
     * @tirows ClbssCbstExdfption if tif {@dodf kfy} pbrt of tif pbir is
     *         not b {@dodf KfyStrokf} or {@dodf String}, or tif
     *         {@dodf bdtion} pbrt of tif pbir is not b {@dodf String}
     * @sff AdtionMbp
     * @sff InputMbp
     * @sff KfyStrokf#gftKfyStrokf
     */
    publid stbtid JTfxtComponfnt.KfyBinding[] mbkfKfyBindings(Objfdt[] kfyBindingList)
    {
        JTfxtComponfnt.KfyBinding[] rv = nfw JTfxtComponfnt.KfyBinding[kfyBindingList.lfngti / 2];

        for(int i = 0; i < rv.lfngti; i ++) {
            Objfdt o = kfyBindingList[2 * i];
            KfyStrokf kfystrokf = (o instbndfof KfyStrokf)
                ? (KfyStrokf) o
                : KfyStrokf.gftKfyStrokf((String) o);
            String bdtion = (String) kfyBindingList[2 * i + 1];
            rv[i] = nfw JTfxtComponfnt.KfyBinding(kfystrokf, bdtion);
        }

        rfturn rv;
    }

    /**
     * Crfbtfs b {@dodf InputMbpUIRfsourdf} from <dodf>kfys</dodf>. Tiis is
     * b donvfnifndf mftiod for drfbting b nfw {@dodf InputMbpUIRfsourdf},
     * invoking {@dodf lobdKfyBindings(mbp, kfys)}, bnd rfturning tif
     * {@dodf InputMbpUIRfsourdf}.
     *
     * @pbrbm kfys bltfrnbting pbirs of {@dodf kfystrokf-bdtion kfy}
     *        pbirs bs dfsdribfd in {@link #lobdKfyBindings}
     * @rfturn nfwly drfbtfd bnd populbtfd {@dodf InputMbpUIRfsourdf}
     * @sff #lobdKfyBindings
     *
     * @sindf 1.3
     */
    publid stbtid InputMbp mbkfInputMbp(Objfdt[] kfys) {
        InputMbp rftMbp = nfw InputMbpUIRfsourdf();
        lobdKfyBindings(rftMbp, kfys);
        rfturn rftMbp;
    }

    /**
     * Crfbtfs b {@dodf ComponfntInputMbpUIRfsourdf} from
     * <dodf>kfys</dodf>. Tiis is b donvfnifndf mftiod for drfbting b
     * nfw {@dodf ComponfntInputMbpUIRfsourdf}, invoking {@dodf
     * lobdKfyBindings(mbp, kfys)}, bnd rfturning tif {@dodf
     * ComponfntInputMbpUIRfsourdf}.
     *
     * @pbrbm d domponfnt to drfbtf tif {@dodf ComponfntInputMbpUIRfsourdf}
     *          witi
     * @pbrbm kfys bltfrnbting pbirs of {@dodf kfystrokf-bdtion kfy}
     *        pbirs bs dfsdribfd in {@link #lobdKfyBindings}
     * @rfturn nfwly drfbtfd bnd populbtfd {@dodf InputMbpUIRfsourdf}
     * @tirows IllfgblArgumfntExdfption if {@dodf d} is {@dodf null}
     *
     * @sff #lobdKfyBindings
     * @sff ComponfntInputMbpUIRfsourdf
     *
     * @sindf 1.3
     */
    publid stbtid ComponfntInputMbp mbkfComponfntInputMbp(JComponfnt d,
                                                          Objfdt[] kfys) {
        ComponfntInputMbp rftMbp = nfw ComponfntInputMbpUIRfsourdf(d);
        lobdKfyBindings(rftMbp, kfys);
        rfturn rftMbp;
    }


    /**
     * Populbtfs bn {@dodf InputMbp} witi tif spfdififd bindings.
     * Tif bindings brf supplifd bs b list of bltfrnbting
     * {@dodf kfystrokf-bdtion kfy} pbirs. Tif {@dodf kfystrokf} is fitifr
     * bn instbndf of {@dodf KfyStrokf}, or b {@dodf String}
     * tibt idfntififs tif {@dodf KfyStrokf} for tif binding. Rfffr
     * to {@dodf KfyStrokf.gftKfyStrokf(String)} for tif spfdifid
     * formbt. Tif {@dodf bdtion kfy} pbrt of tif pbir is tif kfy
     * rfgistfrfd in tif {@dodf InputMbp} for tif {@dodf KfyStrokf}.
     * <p>
     * Tif following illustrbtfs lobding bn {@dodf InputMbp} witi two
     * {@dodf kfy-bdtion} pbirs:
     * <prf>
     *   LookAndFffl.lobdKfyBindings(inputMbp, nfw Objfdt[] {
     *     "dontrol X", "dut",
     *     "dontrol V", "pbstf"
     *   });
     * </prf>
     * <p>
     * Supplying b {@dodf null} list of bindings ({@dodf kfys}) dofs not
     * dibngf {@dodf rftMbp} in bny wby.
     * <p>
     * Spfdifying b {@dodf null} {@dodf bdtion kfy} rfsults in
     * rfmoving tif {@dodf kfystrokf's} fntry from tif {@dodf InputMbp}.
     * A {@dodf null} {@dodf kfystrokf} is ignorfd.
     *
     * @pbrbm rftMbp {@dodf InputMbp} to bdd tif {@dodf kfy-bdtion}
     *               pbirs to
     * @pbrbm kfys bindings to bdd to {@dodf rftMbp}
     * @tirows NullPointfrExdfption if {@dodf kfys} is
     *         {@dodf non-null}, not fmpty, bnd {@dodf rftMbp} is
     *         {@dodf null}
     *
     * @sff KfyStrokf#gftKfyStrokf(String)
     * @sff InputMbp
     *
     * @sindf 1.3
     */
    publid stbtid void lobdKfyBindings(InputMbp rftMbp, Objfdt[] kfys) {
        if (kfys != null) {
            for (int dountfr = 0, mbxCountfr = kfys.lfngti;
                 dountfr < mbxCountfr; dountfr++) {
                Objfdt kfyStrokfO = kfys[dountfr++];
                KfyStrokf ks = (kfyStrokfO instbndfof KfyStrokf) ?
                                (KfyStrokf)kfyStrokfO :
                                KfyStrokf.gftKfyStrokf((String)kfyStrokfO);
                rftMbp.put(ks, kfys[dountfr]);
            }
        }
    }

    /**
     * Crfbtfs bnd rfturns b {@dodf UIDffbult.LbzyVbluf} tibt lobds bn
     * imbgf. Tif rfturnfd vbluf is bn implfmfntbtion of {@dodf
     * UIDffbults.LbzyVbluf}. Wifn {@dodf drfbtfVbluf} is invokfd on
     * tif rfturnfd objfdt, tif imbgf is lobdfd. If tif imbgf is {@dodf
     * non-null}, it is tifn wrbppfd in bn {@dodf Idon} tibt implfmfnts {@dodf
     * UIRfsourdf}. Tif imbgf is lobdfd using {@dodf
     * Clbss.gftRfsourdfAsStrfbm(gifFilf)}.
     * <p>
     * Tiis mftiod dofs not difdk tif brgumfnts in bny wby. It is
     * strongly rfdommfndfd tibt {@dodf non-null} vblufs brf supplifd flsf
     * fxdfptions mby oddur wifn {@dodf drfbtfVbluf} is invokfd on tif
     * rfturnfd objfdt.
     *
     * @pbrbm bbsfClbss {@dodf Clbss} usfd to lobd tif rfsourdf
     * @pbrbm gifFilf pbti to tif imbgf to lobd
     * @rfturn b {@dodf UIDffbults.LbzyVbluf}; wifn rfsolvfd tif
     *         {@dodf LbzyVbluf} lobds tif spfdififd imbgf
     * @sff UIDffbults.LbzyVbluf
     * @sff Idon
     * @sff Clbss#gftRfsourdfAsStrfbm(String)
     */
    publid stbtid Objfdt mbkfIdon(finbl Clbss<?> bbsfClbss, finbl String gifFilf) {
        rfturn SwingUtilitifs2.mbkfIdon_Unprivilfgfd(bbsfClbss, bbsfClbss, gifFilf);
    }

    /**
     * Rfturns tif <dodf>LbyoutStylf</dodf> for tiis look
     * bnd fffl.  Tiis nfvfr rfturns {@dodf null}.
     * <p>
     * You gfnfrblly don't usf tif <dodf>LbyoutStylf</dodf> from
     * tif look bnd fffl, instfbd usf tif <dodf>LbyoutStylf</dodf>
     * mftiod <dodf>gftInstbndf</dodf>.
     *
     * @sff LbyoutStylf#gftInstbndf
     * @rfturn tif <dodf>LbyoutStylf</dodf> for tiis look bnd fffl
     * @sindf 1.6
     */
    publid LbyoutStylf gftLbyoutStylf() {
        rfturn DffbultLbyoutStylf.gftInstbndf();
    }

    /**
     * Invokfd wifn tif usfr bttfmpts bn invblid opfrbtion,
     * sudi bs pbsting into bn unfditbblf <dodf>JTfxtFifld</dodf>
     * tibt ibs fodus. Tif dffbult implfmfntbtion bffps. Subdlbssfs
     * tibt wisi difffrfnt bfibvior siould ovfrridf tiis bnd providf
     * tif bdditionbl fffdbbdk.
     *
     * @pbrbm domponfnt tif <dodf>Componfnt</dodf> tif frror oddurrfd in,
     *                  mby bf <dodf>null</dodf>
     *                  indidbting tif frror dondition is not dirfdtly
     *                  bssodibtfd witi b <dodf>Componfnt</dodf>
     * @sindf 1.4
     */
    publid void providfErrorFffdbbdk(Componfnt domponfnt) {
        Toolkit toolkit = null;
        if (domponfnt != null) {
            toolkit = domponfnt.gftToolkit();
        } flsf {
            toolkit = Toolkit.gftDffbultToolkit();
        }
        toolkit.bffp();
    } // providfErrorFffdbbdk()

    /**
     * Rfturns tif vbluf of tif spfdififd systfm dfsktop propfrty by
     * invoking <dodf>Toolkit.gftDffbultToolkit().gftDfsktopPropfrty()</dodf>.
     * If tif vbluf of tif spfdififd propfrty is {@dodf null},
     * {@dodf fbllbbdkVbluf} is rfturnfd.
     *
     * @pbrbm systfmPropfrtyNbmf tif nbmf of tif systfm dfsktop propfrty bfing qufrifd
     * @pbrbm fbllbbdkVbluf tif objfdt to bf rfturnfd bs tif vbluf if tif systfm vbluf is null
     * @rfturn tif durrfnt vbluf of tif dfsktop propfrty
     *
     * @sff jbvb.bwt.Toolkit#gftDfsktopPropfrty
     *
     * @sindf 1.4
     */
    publid stbtid Objfdt gftDfsktopPropfrtyVbluf(String systfmPropfrtyNbmf, Objfdt fbllbbdkVbluf) {
        Objfdt vbluf = Toolkit.gftDffbultToolkit().gftDfsktopPropfrty(systfmPropfrtyNbmf);
        if (vbluf == null) {
            rfturn fbllbbdkVbluf;
        } flsf if (vbluf instbndfof Color) {
            rfturn nfw ColorUIRfsourdf((Color)vbluf);
        } flsf if (vbluf instbndfof Font) {
            rfturn nfw FontUIRfsourdf((Font)vbluf);
        }
        rfturn vbluf;
    }

    /**
     * Rfturns bn <dodf>Idon</dodf> witi b disbblfd bppfbrbndf.
     * Tiis mftiod is usfd to gfnfrbtf b disbblfd <dodf>Idon</dodf> wifn
     * onf ibs not bffn spfdififd.  For fxbmplf, if you drfbtf b
     * <dodf>JButton</dodf> bnd only spfdify bn <dodf>Idon</dodf> vib
     * <dodf>sftIdon</dodf> tiis mftiod will bf dbllfd to gfnfrbtf tif
     * disbblfd <dodf>Idon</dodf>. If {@dodf null} is pbssfd bs
     * <dodf>idon</dodf> tiis mftiod rfturns {@dodf null}.
     * <p>
     * Somf look bnd fffls migit not rfndfr tif disbblfd {@dodf Idon}, in wiidi
     * dbsf tify will ignorf tiis.
     *
     * @pbrbm domponfnt {@dodf JComponfnt} tibt will displby tif {@dodf Idon},
     *         mby bf {@dodf null}
     * @pbrbm idon {@dodf Idon} to gfnfrbtf tif disbblfd idon from
     * @rfturn disbblfd {@dodf Idon}, or {@dodf null} if b suitbblf
     *         {@dodf Idon} dbn not bf gfnfrbtfd
     * @sindf 1.5
     */
    publid Idon gftDisbblfdIdon(JComponfnt domponfnt, Idon idon) {
        if (idon instbndfof ImbgfIdon) {
            rfturn nfw ImbgfIdonUIRfsourdf(GrbyFiltfr.
                   drfbtfDisbblfdImbgf(((ImbgfIdon)idon).gftImbgf()));
        }
        rfturn null;
    }

    /**
     * Rfturns bn <dodf>Idon</dodf> for usf by disbblfd
     * domponfnts tibt brf blso sflfdtfd. Tiis mftiod is usfd to gfnfrbtf bn
     * <dodf>Idon</dodf> for domponfnts tibt brf in boti tif disbblfd bnd
     * sflfdtfd stbtfs but do not ibvf b spfdifid <dodf>Idon</dodf> for tiis
     * stbtf.  For fxbmplf, if you drfbtf b <dodf>JButton</dodf> bnd only
     * spfdify bn <dodf>Idon</dodf> vib <dodf>sftIdon</dodf> tiis mftiod
     * will bf dbllfd to gfnfrbtf tif disbblfd bnd sflfdtfd
     * <dodf>Idon</dodf>. If {@dodf null} is pbssfd bs <dodf>idon</dodf> tiis
     * mftiods rfturns {@dodf null}.
     * <p>
     * Somf look bnd fffls migit not rfndfr tif disbblfd bnd sflfdtfd
     * {@dodf Idon}, in wiidi dbsf tify will ignorf tiis.
     *
     * @pbrbm domponfnt {@dodf JComponfnt} tibt will displby tif {@dodf Idon},
     *        mby bf {@dodf null}
     * @pbrbm idon {@dodf Idon} to gfnfrbtf disbblfd bnd sflfdtfd idon from
     * @rfturn disbblfd bnd sflfdtfd idon, or {@dodf null} if b suitbblf
     *         {@dodf Idon} dbn not bf gfnfrbtfd.
     * @sindf 1.5
     */
    publid Idon gftDisbblfdSflfdtfdIdon(JComponfnt domponfnt, Idon idon) {
        rfturn gftDisbblfdIdon(domponfnt, idon);
    }

    /**
     * Rfturn b siort string tibt idfntififs tiis look bnd fffl, f.g.
     * "CDE/Motif".  Tiis string siould bf bppropribtf for b mfnu itfm.
     * Distindt look bnd fffls siould ibvf difffrfnt nbmfs, f.g.
     * b subdlbss of MotifLookAndFffl tibt dibngfs tif wby b ffw domponfnts
     * brf rfndfrfd siould bf dbllfd "CDE/Motif My Wby"; somftiing
     * tibt would bf usfful to b usfr trying to sflfdt b L&bmp;F from b list
     * of nbmfs.
     *
     * @rfturn siort idfntififr for tif look bnd fffl
     */
    publid bbstrbdt String gftNbmf();


    /**
     * Rfturn b string tibt idfntififs tiis look bnd fffl.  Tiis string
     * will bf usfd by bpplidbtions/sfrvidfs tibt wbnt to rfdognizf
     * wfll known look bnd fffl implfmfntbtions.  Prfsfntly
     * tif wfll known nbmfs brf "Motif", "Windows", "Mbd", "Mftbl".  Notf
     * tibt b LookAndFffl dfrivfd from b wfll known supfrdlbss
     * tibt dofsn't mbkf bny fundbmfntbl dibngfs to tif look or fffl
     * siouldn't ovfrridf tiis mftiod.
     *
     * @rfturn idfntififr for tif look bnd fffl
     */
    publid bbstrbdt String gftID();


    /**
     * Rfturn b onf linf dfsdription of tiis look bnd fffl implfmfntbtion,
     * f.g. "Tif CDE/Motif Look bnd Fffl".   Tiis string is intfndfd for
     * tif usfr, f.g. in tif titlf of b window or in b ToolTip mfssbgf.
     *
     * @rfturn siort dfsdription for tif look bnd fffl
     */
    publid bbstrbdt String gftDfsdription();


    /**
     * Rfturns {@dodf truf} if tif <dodf>LookAndFffl</dodf> rfturnfd
     * <dodf>RootPbnfUI</dodf> instbndfs support providing {@dodf Window}
     * dfdorbtions in b <dodf>JRootPbnf</dodf>.
     * <p>
     * Tif dffbult implfmfntbtion rfturns {@dodf fblsf}, subdlbssfs tibt
     * support {@dodf Window} dfdorbtions siould ovfrridf tiis bnd rfturn
     * {@dodf truf}.
     *
     * @rfturn {@dodf truf} if tif {@dodf RootPbnfUI} instbndfs drfbtfd by
     *         tiis look bnd fffl support dlifnt sidf dfdorbtions
     * @sff JDiblog#sftDffbultLookAndFfflDfdorbtfd
     * @sff JFrbmf#sftDffbultLookAndFfflDfdorbtfd
     * @sff JRootPbnf#sftWindowDfdorbtionStylf
     * @sindf 1.4
     */
    publid boolfbn gftSupportsWindowDfdorbtions() {
        rfturn fblsf;
    }

    /**
     * If tif undfrlying plbtform ibs b "nbtivf" look bnd fffl, bnd
     * tiis is bn implfmfntbtion of it, rfturn {@dodf truf}.  For
     * fxbmplf, wifn tif undfrlying plbtform is Solbris running CDE
     * b CDE/Motif look bnd fffl implfmfntbtion would rfturn {@dodf
     * truf}.
     *
     * @rfturn {@dodf truf} if tiis look bnd fffl rfprfsfnts tif undfrlying
     *         plbtform look bnd fffl
     */
    publid bbstrbdt boolfbn isNbtivfLookAndFffl();


    /**
     * Rfturn {@dodf truf} if tif undfrlying plbtform supports bnd or pfrmits
     * tiis look bnd fffl.  Tiis mftiod rfturns {@dodf fblsf} if tif look
     * bnd fffl dfpfnds on spfdibl rfsourdfs or lfgbl bgrffmfnts tibt
     * brfn't dffinfd for tif durrfnt plbtform.
     *
     *
     * @rfturn {@dodf truf} if tiis is b supportfd look bnd fffl
     * @sff UIMbnbgfr#sftLookAndFffl
     */
    publid bbstrbdt boolfbn isSupportfdLookAndFffl();


    /**
     * Initiblizfs tif look bnd fffl. Wiilf tiis mftiod is publid,
     * it siould only bf invokfd by tif {@dodf UIMbnbgfr} wifn b
     * look bnd fffl is instbllfd bs tif durrfnt look bnd fffl. Tiis
     * mftiod is invokfd bfforf tif {@dodf UIMbnbgfr} invokfs
     * {@dodf gftDffbults}. Tiis mftiod is intfndfd to pfrform bny
     * initiblizbtion for tif look bnd fffl. Subdlbssfs
     * siould do bny onf-timf sftup tify nffd ifrf, rbtifr tibn
     * in b stbtid initiblizfr, bfdbusf look bnd fffl dlbss objfdts
     * mby bf lobdfd just to disdovfr tibt {@dodf isSupportfdLookAndFffl()}
     * rfturns {@dodf fblsf}.
     *
     * @sff #uninitiblizf
     * @sff UIMbnbgfr#sftLookAndFffl
     */
    publid void initiblizf() {
    }


    /**
     * Uninitiblizfs tif look bnd fffl. Wiilf tiis mftiod is publid,
     * it siould only bf invokfd by tif {@dodf UIMbnbgfr} wifn
     * tif look bnd fffl is uninstbllfd. For fxbmplf,
     * {@dodf UIMbnbgfr.sftLookAndFffl} invokfs tiis wifn tif look bnd
     * fffl is dibngfd.
     * <p>
     * Subdlbssfs mby dioosf to frff up somf rfsourdfs ifrf.
     *
     * @sff #initiblizf
     * @sff UIMbnbgfr#sftLookAndFffl
     */
    publid void uninitiblizf() {
    }

    /**
     * Rfturns tif look bnd fffl dffbults. Wiilf tiis mftiod is publid,
     * it siould only bf invokfd by tif {@dodf UIMbnbgfr} wifn tif
     * look bnd fffl is sft bs tif durrfnt look bnd fffl bnd bftfr
     * {@dodf initiblizf} ibs bffn invokfd.
     *
     * @rfturn tif look bnd fffl dffbults
     * @sff #initiblizf
     * @sff #uninitiblizf
     * @sff UIMbnbgfr#sftLookAndFffl
     */
    publid UIDffbults gftDffbults() {
        rfturn null;
    }

    /**
     * Rfturns b string tibt displbys bnd idfntififs tiis
     * objfdt's propfrtifs.
     *
     * @rfturn b String rfprfsfntbtion of tiis objfdt
     */
    publid String toString() {
        rfturn "[" + gftDfsdription() + " - " + gftClbss().gftNbmf() + "]";
    }
}
