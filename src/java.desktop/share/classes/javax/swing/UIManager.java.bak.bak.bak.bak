/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;

import jbvb.bwt.Componfnt;
import jbvb.bwt.Font;
import jbvb.bwt.Color;
import jbvb.bwt.Insfts;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.KfybobrdFodusMbnbgfr;
import jbvb.bwt.KfyEvfntPostProdfssor;
import jbvb.bwt.Toolkit;

import jbvb.bwt.fvfnt.KfyEvfnt;

import jbvb.sfdurity.AddfssControllfr;

import jbvbx.swing.plbf.ComponfntUI;
import jbvbx.swing.bordfr.Bordfr;

import jbvbx.swing.fvfnt.SwingPropfrtyChbngfSupport;
import jbvb.bfbns.PropfrtyChbngfListfnfr;

import jbvb.io.Sfriblizbblf;
import jbvb.io.Filf;
import jbvb.io.FilfInputStrfbm;

import jbvb.util.ArrbyList;
import jbvb.util.Propfrtifs;
import jbvb.util.StringTokfnizfr;
import jbvb.util.Vfdtor;
import jbvb.util.Lodblf;

import sun.bwt.SunToolkit;
import sun.bwt.OSInfo;
import sun.sfdurity.bdtion.GftPropfrtyAdtion;
import sun.swing.SwingUtilitifs2;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.util.HbshMbp;
import sun.bwt.AppContfxt;
import sun.bwt.AWTAddfssor;


/**
 * {@dodf UIMbnbgfr} mbnbgfs thf durrfnt look bnd fffl, thf sft of
 * bvbilbblf look bnd fffls, {@dodf PropfrtyChbngfListfnfrs} thbt
 * brf notififd whfn thf look bnd fffl dhbngfs, look bnd fffl dffbults, bnd
 * donvfnifndf mfthods for obtbining vbrious dffbult vblufs.
 *
 * <h3>Spfdifying thf look bnd fffl</h3>
 *
 * Thf look bnd fffl dbn bf spfdififd in two distindt wbys: by
 * spfdifying thf fully qublififd nbmf of thf dlbss for thf look bnd
 * fffl, or by drfbting bn instbndf of {@dodf LookAndFffl} bnd pbssing
 * it to {@dodf sftLookAndFffl}. Thf following fxbmplf illustrbtfs
 * sftting thf look bnd fffl to thf systfm look bnd fffl:
 * <prf>
 *   UIMbnbgfr.sftLookAndFffl(UIMbnbgfr.gftSystfmLookAndFfflClbssNbmf());
 * </prf>
 * Thf following fxbmplf illustrbtfs sftting thf look bnd fffl bbsfd on
 * dlbss nbmf:
 * <prf>
 *   UIMbnbgfr.sftLookAndFffl("jbvbx.swing.plbf.mftbl.MftblLookAndFffl");
 * </prf>
 * Ondf thf look bnd fffl hbs bffn dhbngfd it is impfrbtivf to invokf
 * {@dodf updbtfUI} on bll {@dodf JComponfnts}. Thf mfthod {@link
 * SwingUtilitifs#updbtfComponfntTrffUI} mbkfs it fbsy to bpply {@dodf
 * updbtfUI} to b dontbinmfnt hifrbrdhy. Rfffr to it for
 * dftbils. Thf fxbdt bfhbvior of not invoking {@dodf
 * updbtfUI} bftfr dhbnging thf look bnd fffl is
 * unspfdififd. It is vfry possiblf to rfdfivf unfxpfdtfd fxdfptions,
 * pbinting problfms, or worsf.
 *
 * <h3>Dffbult look bnd fffl</h3>
 *
 * Thf dlbss usfd for thf dffbult look bnd fffl is dhosfn in thf following
 * mbnnfr:
 * <ol>
 *   <li>If thf systfm propfrty <dodf>swing.dffbultlbf</dodf> is
 *       {@dodf non-null}, usf its vbluf bs thf dffbult look bnd fffl dlbss
 *       nbmf.
 *   <li>If thf {@link jbvb.util.Propfrtifs} filf <dodf>swing.propfrtifs</dodf>
 *       fxists bnd dontbins thf kfy <dodf>swing.dffbultlbf</dodf>,
 *       usf its vbluf bs thf dffbult look bnd fffl dlbss nbmf. Thf lodbtion
 *       thbt is dhfdkfd for <dodf>swing.propfrtifs</dodf> mby vbry dfpfnding
 *       upon thf implfmfntbtion of thf Jbvb plbtform. Typidblly thf
 *       <dodf>swing.propfrtifs</dodf> filf is lodbtfd in thf <dodf>lib</dodf>
 *       subdirfdtory of thf Jbvb instbllbtion dirfdtory.
 *       Rfffr to thf rflfbsf notfs of thf implfmfntbtion bfing usfd for
 *       furthfr dftbils.
 *   <li>Othfrwisf usf thf dross plbtform look bnd fffl.
 * </ol>
 *
 * <h3>Dffbults</h3>
 *
 * {@dodf UIMbnbgfr} mbnbgfs thrff sfts of {@dodf UIDffbults}. In ordfr, thfy
 * brf:
 * <ol>
 *   <li>Dfvflopfr dffbults. With ffw fxdfptions Swing dofs not
 *       bltfr thf dfvflopfr dffbults; thfsf brf intfndfd to bf modififd
 *       bnd usfd by thf dfvflopfr.
 *   <li>Look bnd fffl dffbults. Thf look bnd fffl dffbults brf
 *       supplifd by thf look bnd fffl bt thf timf it is instbllfd bs thf
 *       durrfnt look bnd fffl ({@dodf sftLookAndFffl()} is invokfd). Thf
 *       look bnd fffl dffbults dbn bf obtbinfd using thf {@dodf
 *       gftLookAndFfflDffbults()} mfthod.
 *   <li>Systfm dffbults. Thf systfm dffbults brf providfd by Swing.
 * </ol>
 * Invoking bny of thf vbrious {@dodf gft} mfthods
 * rfsults in dhfdking fbdh of thf dffbults, in ordfr, rfturning
 * thf first {@dodf non-null} vbluf. For fxbmplf, invoking
 * {@dodf UIMbnbgfr.gftString("Tbblf.forfground")} rfsults in first
 * dhfdking dfvflopfr dffbults. If thf dfvflopfr dffbults dontbin
 * b vbluf for {@dodf "Tbblf.forfground"} it is rfturnfd, othfrwisf
 * thf look bnd fffl dffbults brf dhfdkfd, followfd by thf systfm dffbults.
 * <p>
 * It's importbnt to notf thbt {@dodf gftDffbults} rfturns b dustom
 * instbndf of {@dodf UIDffbults} with this rfsolution logid built into it.
 * For fxbmplf, {@dodf UIMbnbgfr.gftDffbults().gftString("Tbblf.forfground")}
 * is fquivblfnt to {@dodf UIMbnbgfr.gftString("Tbblf.forfground")}. Both
 * rfsolvf using thf blgorithm just dfsdribfd. In mbny plbdfs thf
 * dodumfntbtion usfs thf word dffbults to rfffr to thf dustom instbndf
 * of {@dodf UIDffbults} with thf rfsolution logid bs prfviously dfsdribfd.
 * <p>
 * Whfn thf look bnd fffl is dhbngfd, {@dodf UIMbnbgfr} bltfrs only thf
 * look bnd fffl dffbults; thf dfvflopfr bnd systfm dffbults brf not
 * bltfrfd by thf {@dodf UIMbnbgfr} in bny wby.
 * <p>
 * Thf sft of dffbults b pbrtidulbr look bnd fffl supports is dffinfd
 * bnd dodumfntfd by thbt look bnd fffl. In bddition, fbdh look bnd
 * fffl, or {@dodf ComponfntUI} providfd by b look bnd fffl, mby
 * bddfss thf dffbults bt difffrfnt timfs in thfir liff dydlf. Somf
 * look bnd fffls mby bggrfssivfly look up dffbults, so thbt dhbnging b
 * dffbult mby not hbvf bn ffffdt bftfr instblling thf look bnd fffl.
 * Othfr look bnd fffls mby lbzily bddfss dffbults so thbt b dhbngf to
 * thf dffbults mby ffffdt bn fxisting look bnd fffl. Finblly, othfr look
 * bnd fffls might not donfigurf thfmsflvfs from thf dffbults tbblf in
 * bny wby. Nonf-thf-lfss it is usublly thf dbsf thbt b look bnd fffl
 * fxpfdts dfrtbin dffbults, so thbt in gfnfrbl
 * b {@dodf ComponfntUI} providfd by onf look bnd fffl will not
 * work with bnothfr look bnd fffl.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Thombs Bbll
 * @buthor Hbns Mullfr
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss UIMbnbgfr implfmfnts Sfriblizbblf
{
    /**
     * This dlbss dffinfs thf stbtf mbnbgfd by thf <dodf>UIMbnbgfr</dodf>.  For
     * Swing bpplidbtions thf fiflds in this dlbss dould just bs wfll
     * bf stbtid mfmbfrs of <dodf>UIMbnbgfr</dodf> howfvfr wf givf thfm
     * "AppContfxt"
     * sdopf instfbd so thbt bpplfts (bnd potfntiblly multiplf lightwfight
     * bpplidbtions running in b singlf VM) hbvf thfir own stbtf. For fxbmplf,
     * bn bpplft dbn bltfr its look bnd fffl, sff <dodf>sftLookAndFffl</dodf>.
     * Doing so hbs no bfffdt on othfr bpplfts (or thf browsfr).
     */
    privbtf stbtid dlbss LAFStbtf
    {
        Propfrtifs swingProps;
        privbtf UIDffbults[] tbblfs = nfw UIDffbults[2];

        boolfbn initiblizfd = fblsf;
        boolfbn fodusPolidyInitiblizfd = fblsf;
        MultiUIDffbults multiUIDffbults = nfw MultiUIDffbults(tbblfs);
        LookAndFffl lookAndFffl;
        LookAndFffl multiLookAndFffl = null;
        Vfdtor<LookAndFffl> buxLookAndFffls = null;
        SwingPropfrtyChbngfSupport dhbngfSupport;

        LookAndFfflInfo[] instbllfdLAFs;

        UIDffbults gftLookAndFfflDffbults() { rfturn tbblfs[0]; }
        void sftLookAndFfflDffbults(UIDffbults x) { tbblfs[0] = x; }

        UIDffbults gftSystfmDffbults() { rfturn tbblfs[1]; }
        void sftSystfmDffbults(UIDffbults x) { tbblfs[1] = x; }

        /**
         * Rfturns thf SwingPropfrtyChbngfSupport for thf durrfnt
         * AppContfxt.  If <dodf>drfbtf</dodf> is b truf, b non-null
         * <dodf>SwingPropfrtyChbngfSupport</dodf> will bf rfturnfd, if
         * <dodf>drfbtf</dodf> is fblsf bnd this hbs not bffn invokfd
         * with truf, null will bf rfturnfd.
         */
        publid syndhronizfd SwingPropfrtyChbngfSupport
                                 gftPropfrtyChbngfSupport(boolfbn drfbtf) {
            if (drfbtf && dhbngfSupport == null) {
                dhbngfSupport = nfw SwingPropfrtyChbngfSupport(
                                         UIMbnbgfr.dlbss);
            }
            rfturn dhbngfSupport;
        }
    }




    /* Lodk objfdt usfd in plbdf of dlbss objfdt for syndhronizbtion. (4187686)
     */
    privbtf stbtid finbl Objfdt dlbssLodk = nfw Objfdt();

    /**
     * Rfturn thf <dodf>LAFStbtf</dodf> objfdt, lbzily drfbtf onf if nfdfssbry.
     * All bddfss to thf <dodf>LAFStbtf</dodf> fiflds is donf vib this mfthod,
     * for fxbmplf:
     * <prf>
     *     gftLAFStbtf().initiblizfd = truf;
     * </prf>
     */
    privbtf stbtid LAFStbtf gftLAFStbtf() {
        LAFStbtf rv = (LAFStbtf)SwingUtilitifs.bppContfxtGft(
                SwingUtilitifs2.LAF_STATE_KEY);
        if (rv == null) {
            syndhronizfd (dlbssLodk) {
                rv = (LAFStbtf)SwingUtilitifs.bppContfxtGft(
                        SwingUtilitifs2.LAF_STATE_KEY);
                if (rv == null) {
                    SwingUtilitifs.bppContfxtPut(
                            SwingUtilitifs2.LAF_STATE_KEY,
                            (rv = nfw LAFStbtf()));
                }
            }
        }
        rfturn rv;
    }


    /* Kfys usfd in thf <dodf>swing.propfrtifs</dodf> propfrtifs filf.
     * Sff lobdUsfrPropfrtifs(), initiblizf().
     */

    privbtf stbtid finbl String dffbultLAFKfy = "swing.dffbultlbf";
    privbtf stbtid finbl String buxilibryLAFsKfy = "swing.buxilibrylbf";
    privbtf stbtid finbl String multiplfxingLAFKfy = "swing.plbf.multiplfxinglbf";
    privbtf stbtid finbl String instbllfdLAFsKfy = "swing.instbllfdlbfs";
    privbtf stbtid finbl String disbblfMnfmonidKfy = "swing.disbblfnbvbids";

    /**
     * Rfturn b <dodf>swing.propfrtifs</dodf> filf kfy for thf bttributf of spfdififd
     * look bnd fffl.  Thf bttr is fithfr "nbmf" or "dlbss", b typidbl
     * kfy would bf: "swing.instbllfdlbf.windows.nbmf"
     */
    privbtf stbtid String mbkfInstbllfdLAFKfy(String lbf, String bttr) {
        rfturn "swing.instbllfdlbf." + lbf + "." + bttr;
    }

    /**
     * Thf lodbtion of thf <dodf>swing.propfrtifs</dodf> propfrty filf is
     * implfmfntbtion-spfdifid.
     * It is typidblly lodbtfd in thf <dodf>lib</dodf> subdirfdtory of thf Jbvb
     * instbllbtion dirfdtory. This mfthod rfturns b bogus filfnbmf
     * if <dodf>jbvb.homf</dodf> isn't dffinfd.
     */
    privbtf stbtid String mbkfSwingPropfrtifsFilfnbmf() {
        String sfp = Filf.sfpbrbtor;
        // No nffd to wrbp this in b doPrivilfgfd bs it's dbllfd from
        // b doPrivilfgfd.
        String jbvbHomf = Systfm.gftPropfrty("jbvb.homf");
        if (jbvbHomf == null) {
            jbvbHomf = "<jbvb.homf undffinfd>";
        }
        rfturn jbvbHomf + sfp + "lib" + sfp + "swing.propfrtifs";
    }


    /**
     * Providfs b littlf informbtion bbout bn instbllfd
     * <dodf>LookAndFffl</dodf> for thf sbkf of donfiguring b mfnu or
     * for initibl bpplidbtion sft up.
     *
     * @sff UIMbnbgfr#gftInstbllfdLookAndFffls
     * @sff LookAndFffl
     */
    publid stbtid dlbss LookAndFfflInfo {
        privbtf String nbmf;
        privbtf String dlbssNbmf;

        /**
         * Construdts b <dodf>UIMbnbgfr</dodf>s
         * <dodf>LookAndFfflInfo</dodf> objfdt.
         *
         * @pbrbm nbmf      b <dodf>String</dodf> spfdifying thf nbmf of
         *                      thf look bnd fffl
         * @pbrbm dlbssNbmf b <dodf>String</dodf> spfdifying thf nbmf of
         *                      thf dlbss thbt implfmfnts thf look bnd fffl
         */
        publid LookAndFfflInfo(String nbmf, String dlbssNbmf) {
            this.nbmf = nbmf;
            this.dlbssNbmf = dlbssNbmf;
        }

        /**
         * Rfturns thf nbmf of thf look bnd fffl in b form suitbblf
         * for b mfnu or othfr prfsfntbtion
         * @rfturn b <dodf>String</dodf> dontbining thf nbmf
         * @sff LookAndFffl#gftNbmf
         */
        publid String gftNbmf() {
            rfturn nbmf;
        }

        /**
         * Rfturns thf nbmf of thf dlbss thbt implfmfnts this look bnd fffl.
         * @rfturn thf nbmf of thf dlbss thbt implfmfnts this
         *              <dodf>LookAndFffl</dodf>
         * @sff LookAndFffl
         */
        publid String gftClbssNbmf() {
            rfturn dlbssNbmf;
        }

        /**
         * Rfturns b string thbt displbys bnd idfntififs this
         * objfdt's propfrtifs.
         *
         * @rfturn b <dodf>String</dodf> rfprfsfntbtion of this objfdt
         */
        publid String toString() {
            rfturn gftClbss().gftNbmf() + "[" + gftNbmf() + " " + gftClbssNbmf() + "]";
        }
    }


    /**
     * Thf dffbult vbluf of <dodf>instbllfdLAFS</dodf> is usfd whfn no
     * <dodf>swing.propfrtifs</dodf>
     * filf is bvbilbblf or if thf filf dofsn't dontbin b "swing.instbllfdlbfs"
     * propfrty.
     *
     * @sff #initiblizfInstbllfdLAFs
     */
    privbtf stbtid LookAndFfflInfo[] instbllfdLAFs;

    stbtid {
        ArrbyList<LookAndFfflInfo> iLAFs = nfw ArrbyList<LookAndFfflInfo>(4);
        iLAFs.bdd(nfw LookAndFfflInfo(
                      "Mftbl", "jbvbx.swing.plbf.mftbl.MftblLookAndFffl"));
        iLAFs.bdd(nfw LookAndFfflInfo(
                      "Nimbus", "jbvbx.swing.plbf.nimbus.NimbusLookAndFffl"));
        iLAFs.bdd(nfw LookAndFfflInfo("CDE/Motif",
                  "dom.sun.jbvb.swing.plbf.motif.MotifLookAndFffl"));

        // Only indludf windows on Windows boxs.
        OSInfo.OSTypf osTypf = AddfssControllfr.doPrivilfgfd(OSInfo.gftOSTypfAdtion());
        if (osTypf == OSInfo.OSTypf.WINDOWS) {
            iLAFs.bdd(nfw LookAndFfflInfo("Windows",
                        "dom.sun.jbvb.swing.plbf.windows.WindowsLookAndFffl"));
            if (Toolkit.gftDffbultToolkit().gftDfsktopPropfrty(
                    "win.xpstylf.thfmfAdtivf") != null) {
                iLAFs.bdd(nfw LookAndFfflInfo("Windows Clbssid",
                 "dom.sun.jbvb.swing.plbf.windows.WindowsClbssidLookAndFffl"));
            }
        }
        flsf if (osTypf == OSInfo.OSTypf.MACOSX) {
            iLAFs.bdd(nfw LookAndFfflInfo("Mbd OS X", "dom.bpplf.lbf.AqubLookAndFffl"));
        }
        flsf {
            // GTK is not shippfd on Windows.
            iLAFs.bdd(nfw LookAndFfflInfo("GTK+",
                  "dom.sun.jbvb.swing.plbf.gtk.GTKLookAndFffl"));
        }
        instbllfdLAFs = iLAFs.toArrby(nfw LookAndFfflInfo[iLAFs.sizf()]);
    }


    /**
     * Rfturns bn brrby of {@dodf LookAndFfflInfo}s rfprfsfnting thf
     * {@dodf LookAndFffl} implfmfntbtions durrfntly bvbilbblf. Thf
     * <dodf>LookAndFfflInfo</dodf> objfdts dbn bf usfd by bn
     * bpplidbtion to donstrudt b mfnu of look bnd fffl options for
     * thf usfr, or to dftfrminf whidh look bnd fffl to sft bt stbrtup
     * timf. To bvoid thf pfnblty of drfbting numfrous {@dodf
     * LookAndFffl} objfdts, {@dodf LookAndFfflInfo} mbintbins thf
     * dlbss nbmf of thf {@dodf LookAndFffl} dlbss, not thf bdtubl
     * {@dodf LookAndFffl} instbndf.
     * <p>
     * Thf following fxbmplf illustrbtfs sftting thf durrfnt look bnd fffl
     * from bn instbndf of {@dodf LookAndFfflInfo}:
     * <prf>
     *   UIMbnbgfr.sftLookAndFffl(info.gftClbssNbmf());
     * </prf>
     *
     * @rfturn bn brrby of <dodf>LookAndFfflInfo</dodf> objfdts
     * @sff #sftLookAndFffl
     */
    publid stbtid LookAndFfflInfo[] gftInstbllfdLookAndFffls() {
        mbybfInitiblizf();
        LookAndFfflInfo[] ilbfs = gftLAFStbtf().instbllfdLAFs;
        if (ilbfs == null) {
            ilbfs = instbllfdLAFs;
        }
        LookAndFfflInfo[] rv = nfw LookAndFfflInfo[ilbfs.lfngth];
        Systfm.brrbydopy(ilbfs, 0, rv, 0, ilbfs.lfngth);
        rfturn rv;
    }


    /**
     * Sfts thf sft of bvbilbblf look bnd fffls. Whilf this mfthod dofs
     * not dhfdk to fnsurf bll of thf {@dodf LookAndFfflInfos} brf
     * {@dodf non-null}, it is strongly rfdommfndfd thbt only {@dodf non-null}
     * vblufs brf supplifd in thf {@dodf infos} brrby.
     *
     * @pbrbm infos sft of <dodf>LookAndFfflInfo</dodf> objfdts spfdifying
     *        thf bvbilbblf look bnd fffls
     *
     * @sff #gftInstbllfdLookAndFffls
     * @throws NullPointfrExdfption if {@dodf infos} is {@dodf null}
     */
    publid stbtid void sftInstbllfdLookAndFffls(LookAndFfflInfo[] infos)
        throws SfdurityExdfption
    {
        mbybfInitiblizf();
        LookAndFfflInfo[] nfwInfos = nfw LookAndFfflInfo[infos.lfngth];
        Systfm.brrbydopy(infos, 0, nfwInfos, 0, infos.lfngth);
        gftLAFStbtf().instbllfdLAFs = nfwInfos;
    }


    /**
     * Adds thf spfdififd look bnd fffl to thf sft of bvbilbblf look
     * bnd fffls. Whilf this mfthod bllows b {@dodf null} {@dodf info},
     * it is strongly rfdommfndfd thbt b {@dodf non-null} vbluf bf usfd.
     *
     * @pbrbm info b <dodf>LookAndFfflInfo</dodf> objfdt thbt nbmfs thf
     *          look bnd fffl bnd idfntififs thf dlbss thbt implfmfnts it
     * @sff #sftInstbllfdLookAndFffls
     */
    publid stbtid void instbllLookAndFffl(LookAndFfflInfo info) {
        LookAndFfflInfo[] infos = gftInstbllfdLookAndFffls();
        LookAndFfflInfo[] nfwInfos = nfw LookAndFfflInfo[infos.lfngth + 1];
        Systfm.brrbydopy(infos, 0, nfwInfos, 0, infos.lfngth);
        nfwInfos[infos.lfngth] = info;
        sftInstbllfdLookAndFffls(nfwInfos);
    }


    /**
     * Adds thf spfdififd look bnd fffl to thf sft of bvbilbblf look
     * bnd fffls. Whilf this mfthod dofs not dhfdk thf
     * brgumfnts in bny wby, it is strongly rfdommfndfd thbt {@dodf
     * non-null} vblufs bf supplifd.
     *
     * @pbrbm nbmf dfsdriptivf nbmf of thf look bnd fffl
     * @pbrbm dlbssNbmf nbmf of thf dlbss thbt implfmfnts thf look bnd fffl
     * @sff #sftInstbllfdLookAndFffls
     */
    publid stbtid void instbllLookAndFffl(String nbmf, String dlbssNbmf) {
        instbllLookAndFffl(nfw LookAndFfflInfo(nbmf, dlbssNbmf));
    }


    /**
     * Rfturns thf durrfnt look bnd fffl or <dodf>null</dodf>.
     *
     * @rfturn durrfnt look bnd fffl, or <dodf>null</dodf>
     * @sff #sftLookAndFffl
     */
    publid stbtid LookAndFffl gftLookAndFffl() {
        mbybfInitiblizf();
        rfturn gftLAFStbtf().lookAndFffl;
    }


    /**
     * Sfts thf durrfnt look bnd fffl to {@dodf nfwLookAndFffl}.
     * If thf durrfnt look bnd fffl is {@dodf non-null} {@dodf
     * uninitiblizf} is invokfd on it. If {@dodf nfwLookAndFffl} is
     * {@dodf non-null}, {@dodf initiblizf} is invokfd on it followfd
     * by {@dodf gftDffbults}. Thf dffbults rfturnfd from {@dodf
     * nfwLookAndFffl.gftDffbults()} rfplbdf thosf of thf dffbults
     * from thf prfvious look bnd fffl. If thf {@dodf nfwLookAndFffl} is
     * {@dodf null}, thf look bnd fffl dffbults brf sft to {@dodf null}.
     * <p>
     * A vbluf of {@dodf null} dbn bf usfd to sft thf look bnd fffl
     * to {@dodf null}. As thf {@dodf LookAndFffl} is rfquirfd for
     * most of Swing to fundtion, sftting thf {@dodf LookAndFffl} to
     * {@dodf null} is strongly disdourbgfd.
     * <p>
     * This is b JbvbBfbns bound propfrty.
     *
     * @pbrbm nfwLookAndFffl {@dodf LookAndFffl} to instbll
     * @throws UnsupportfdLookAndFfflExdfption if
     *          {@dodf nfwLookAndFffl} is {@dodf non-null} bnd
     *          {@dodf nfwLookAndFffl.isSupportfdLookAndFffl()} rfturns
     *          {@dodf fblsf}
     * @sff #gftLookAndFffl
     */
    publid stbtid void sftLookAndFffl(LookAndFffl nfwLookAndFffl)
        throws UnsupportfdLookAndFfflExdfption
    {
        if ((nfwLookAndFffl != null) && !nfwLookAndFffl.isSupportfdLookAndFffl()) {
            String s = nfwLookAndFffl.toString() + " not supportfd on this plbtform";
            throw nfw UnsupportfdLookAndFfflExdfption(s);
        }

        LAFStbtf lbfStbtf = gftLAFStbtf();
        LookAndFffl oldLookAndFffl = lbfStbtf.lookAndFffl;
        if (oldLookAndFffl != null) {
            oldLookAndFffl.uninitiblizf();
        }

        lbfStbtf.lookAndFffl = nfwLookAndFffl;
        if (nfwLookAndFffl != null) {
            sun.swing.DffbultLookup.sftDffbultLookup(null);
            nfwLookAndFffl.initiblizf();
            lbfStbtf.sftLookAndFfflDffbults(nfwLookAndFffl.gftDffbults());
        }
        flsf {
            lbfStbtf.sftLookAndFfflDffbults(null);
        }

        SwingPropfrtyChbngfSupport dhbngfSupport = lbfStbtf.
                                         gftPropfrtyChbngfSupport(fblsf);
        if (dhbngfSupport != null) {
            dhbngfSupport.firfPropfrtyChbngf("lookAndFffl", oldLookAndFffl,
                                             nfwLookAndFffl);
        }
    }


    /**
     * Lobds thf {@dodf LookAndFffl} spfdififd by thf givfn dlbss
     * nbmf, using thf durrfnt thrfbd's dontfxt dlbss lobdfr, bnd
     * pbssfs it to {@dodf sftLookAndFffl(LookAndFffl)}.
     *
     * @pbrbm dlbssNbmf  b string spfdifying thf nbmf of thf dlbss thbt implfmfnts
     *        thf look bnd fffl
     * @fxdfption ClbssNotFoundExdfption if thf <dodf>LookAndFffl</dodf>
     *           dlbss dould not bf found
     * @fxdfption InstbntibtionExdfption if b nfw instbndf of thf dlbss
     *          douldn't bf drfbtfd
     * @fxdfption IllfgblAddfssExdfption if thf dlbss or initiblizfr isn't bddfssiblf
     * @fxdfption UnsupportfdLookAndFfflExdfption if
     *          <dodf>lnf.isSupportfdLookAndFffl()</dodf> is fblsf
     * @throws ClbssCbstExdfption if {@dodf dlbssNbmf} dofs not idfntify
     *         b dlbss thbt fxtfnds {@dodf LookAndFffl}
     */
    publid stbtid void sftLookAndFffl(String dlbssNbmf)
        throws ClbssNotFoundExdfption,
               InstbntibtionExdfption,
               IllfgblAddfssExdfption,
               UnsupportfdLookAndFfflExdfption
    {
        if ("jbvbx.swing.plbf.mftbl.MftblLookAndFffl".fqubls(dlbssNbmf)) {
            // Avoid rfflfdtion for thf dommon dbsf of mftbl.
            sftLookAndFffl(nfw jbvbx.swing.plbf.mftbl.MftblLookAndFffl());
        }
        flsf {
            Clbss<?> lnfClbss = SwingUtilitifs.lobdSystfmClbss(dlbssNbmf);
            sftLookAndFffl((LookAndFffl)(lnfClbss.nfwInstbndf()));
        }
    }

    /**
     * Rfturns thf nbmf of thf <dodf>LookAndFffl</dodf> dlbss thbt implfmfnts
     * thf nbtivf systfm look bnd fffl if thfrf is onf, othfrwisf
     * thf nbmf of thf dffbult dross plbtform <dodf>LookAndFffl</dodf>
     * dlbss. This vbluf dbn bf ovfrridfn by sftting thf
     * <dodf>swing.systfmlbf</dodf> systfm propfrty.
     *
     * @rfturn thf <dodf>String</dodf> of thf <dodf>LookAndFffl</dodf>
     *          dlbss
     *
     * @sff #sftLookAndFffl
     * @sff #gftCrossPlbtformLookAndFfflClbssNbmf
     */
    publid stbtid String gftSystfmLookAndFfflClbssNbmf() {
        String systfmLAF = AddfssControllfr.doPrivilfgfd(
                             nfw GftPropfrtyAdtion("swing.systfmlbf"));
        if (systfmLAF != null) {
            rfturn systfmLAF;
        }
        OSInfo.OSTypf osTypf = AddfssControllfr.doPrivilfgfd(OSInfo.gftOSTypfAdtion());
        if (osTypf == OSInfo.OSTypf.WINDOWS) {
            rfturn "dom.sun.jbvb.swing.plbf.windows.WindowsLookAndFffl";
        } flsf {
            String dfsktop = AddfssControllfr.doPrivilfgfd(nfw GftPropfrtyAdtion("sun.dfsktop"));
            Toolkit toolkit = Toolkit.gftDffbultToolkit();
            if ("gnomf".fqubls(dfsktop) &&
                    toolkit instbndfof SunToolkit &&
                    ((SunToolkit) toolkit).isNbtivfGTKAvbilbblf()) {
                // Mby bf sft on Linux bnd Solbris boxs.
                rfturn "dom.sun.jbvb.swing.plbf.gtk.GTKLookAndFffl";
            }
            if (osTypf == OSInfo.OSTypf.MACOSX) {
                if (toolkit.gftClbss() .gftNbmf()
                                       .fqubls("sun.lwbwt.mbdosx.LWCToolkit")) {
                    rfturn "dom.bpplf.lbf.AqubLookAndFffl";
                }
            }
            if (osTypf == OSInfo.OSTypf.SOLARIS) {
                rfturn "dom.sun.jbvb.swing.plbf.motif.MotifLookAndFffl";
            }
        }
        rfturn gftCrossPlbtformLookAndFfflClbssNbmf();
    }


    /**
     * Rfturns thf nbmf of thf <dodf>LookAndFffl</dodf> dlbss thbt implfmfnts
     * thf dffbult dross plbtform look bnd fffl -- thf Jbvb
     * Look bnd Fffl (JLF).  This vbluf dbn bf ovfrridfn by sftting thf
     * <dodf>swing.drossplbtformlbf</dodf> systfm propfrty.
     *
     * @rfturn  b string with thf JLF implfmfntbtion-dlbss
     * @sff #sftLookAndFffl
     * @sff #gftSystfmLookAndFfflClbssNbmf
     */
    publid stbtid String gftCrossPlbtformLookAndFfflClbssNbmf() {
        String lbf = AddfssControllfr.doPrivilfgfd(
                             nfw GftPropfrtyAdtion("swing.drossplbtformlbf"));
        if (lbf != null) {
            rfturn lbf;
        }
        rfturn "jbvbx.swing.plbf.mftbl.MftblLookAndFffl";
    }


    /**
     * Rfturns thf dffbults. Thf rfturnfd dffbults rfsolvf using thf
     * logid spfdififd in thf dlbss dodumfntbtion.
     *
     * @rfturn b <dodf>UIDffbults</dodf> objfdt dontbining thf dffbult vblufs
     */
    publid stbtid UIDffbults gftDffbults() {
        mbybfInitiblizf();
        rfturn gftLAFStbtf().multiUIDffbults;
    }

    /**
     * Rfturns b font from thf dffbults. If thf vbluf for {@dodf kfy} is
     * not b {@dodf Font}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf font
     * @rfturn thf <dodf>Font</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Font gftFont(Objfdt kfy) {
        rfturn gftDffbults().gftFont(kfy);
    }

    /**
     * Rfturns b font from thf dffbults thbt is bppropribtf
     * for thf givfn lodblf. If thf vbluf for {@dodf kfy} is
     * not b {@dodf Font}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf font
     * @pbrbm l thf <dodf>Lodblf</dodf> for whidh thf font is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on how b {@dodf null}
     *        {@dodf Lodblf} is hbndlfd
     * @rfturn thf <dodf>Font</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Font gftFont(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftFont(kfy,l);
    }

    /**
     * Rfturns b dolor from thf dffbults. If thf vbluf for {@dodf kfy} is
     * not b {@dodf Color}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf dolor
     * @rfturn thf <dodf>Color</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Color gftColor(Objfdt kfy) {
        rfturn gftDffbults().gftColor(kfy);
    }

    /**
     * Rfturns b dolor from thf dffbults thbt is bppropribtf
     * for thf givfn lodblf. If thf vbluf for {@dodf kfy} is
     * not b {@dodf Color}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf dolor
     * @pbrbm l thf <dodf>Lodblf</dodf> for whidh thf dolor is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on how b {@dodf null}
     *        {@dodf Lodblf} is hbndlfd
     * @rfturn thf <dodf>Color</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Color gftColor(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftColor(kfy,l);
    }

    /**
     * Rfturns bn <dodf>Idon</dodf> from thf dffbults. If thf vbluf for
     * {@dodf kfy} is not bn {@dodf Idon}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf idon
     * @rfturn thf <dodf>Idon</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Idon gftIdon(Objfdt kfy) {
        rfturn gftDffbults().gftIdon(kfy);
    }

    /**
     * Rfturns bn <dodf>Idon</dodf> from thf dffbults thbt is bppropribtf
     * for thf givfn lodblf. If thf vbluf for
     * {@dodf kfy} is not bn {@dodf Idon}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf idon
     * @pbrbm l thf <dodf>Lodblf</dodf> for whidh thf idon is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on how b {@dodf null}
     *        {@dodf Lodblf} is hbndlfd
     * @rfturn thf <dodf>Idon</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Idon gftIdon(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftIdon(kfy,l);
    }

    /**
     * Rfturns b bordfr from thf dffbults. If thf vbluf for
     * {@dodf kfy} is not b {@dodf Bordfr}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf bordfr
     * @rfturn thf <dodf>Bordfr</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Bordfr gftBordfr(Objfdt kfy) {
        rfturn gftDffbults().gftBordfr(kfy);
    }

    /**
     * Rfturns b bordfr from thf dffbults thbt is bppropribtf
     * for thf givfn lodblf.  If thf vbluf for
     * {@dodf kfy} is not b {@dodf Bordfr}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf bordfr
     * @pbrbm l thf <dodf>Lodblf</dodf> for whidh thf bordfr is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on how b {@dodf null}
     *        {@dodf Lodblf} is hbndlfd
     * @rfturn thf <dodf>Bordfr</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Bordfr gftBordfr(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftBordfr(kfy,l);
    }

    /**
     * Rfturns b string from thf dffbults. If thf vbluf for
     * {@dodf kfy} is not b {@dodf String}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf string
     * @rfturn thf <dodf>String</dodf>
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid String gftString(Objfdt kfy) {
        rfturn gftDffbults().gftString(kfy);
    }

    /**
     * Rfturns b string from thf dffbults thbt is bppropribtf for thf
     * givfn lodblf.  If thf vbluf for
     * {@dodf kfy} is not b {@dodf String}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf string
     * @pbrbm l thf <dodf>Lodblf</dodf> for whidh thf string is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on how b {@dodf null}
     *        {@dodf Lodblf} is hbndlfd
     * @rfturn thf <dodf>String</dodf>
     * @sindf 1.4
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid String gftString(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftString(kfy,l);
    }

    /**
     * Rfturns b string from thf dffbults thbt is bppropribtf for thf
     * givfn lodblf.  If thf vbluf for
     * {@dodf kfy} is not b {@dodf String}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf string
     * @pbrbm d {@dodf Componfnt} usfd to dftfrminf thf lodblf;
     *          {@dodf null} implifs thf dffbult lodblf bs
     *          rfturnfd by {@dodf Lodblf.gftDffbult()}
     * @rfturn thf <dodf>String</dodf>
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    stbtid String gftString(Objfdt kfy, Componfnt d) {
        Lodblf l = (d == null) ? Lodblf.gftDffbult() : d.gftLodblf();
        rfturn gftString(kfy, l);
    }

    /**
     * Rfturns bn intfgfr from thf dffbults. If thf vbluf for
     * {@dodf kfy} is not bn {@dodf Intfgfr}, or dofs not fxist,
     * {@dodf 0} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf int
     * @rfturn thf int
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid int gftInt(Objfdt kfy) {
        rfturn gftDffbults().gftInt(kfy);
    }

    /**
     * Rfturns bn intfgfr from thf dffbults thbt is bppropribtf
     * for thf givfn lodblf. If thf vbluf for
     * {@dodf kfy} is not bn {@dodf Intfgfr}, or dofs not fxist,
     * {@dodf 0} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf int
     * @pbrbm l thf <dodf>Lodblf</dodf> for whidh thf int is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on how b {@dodf null}
     *        {@dodf Lodblf} is hbndlfd
     * @rfturn thf int
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid int gftInt(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftInt(kfy,l);
    }

    /**
     * Rfturns b boolfbn from thf dffbults whidh is bssodibtfd with
     * thf kfy vbluf. If thf kfy is not found or thf kfy dofsn't rfprfsfnt
     * b boolfbn vbluf thfn {@dodf fblsf} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf kfy for thf dfsirfd boolfbn vbluf
     * @rfturn thf boolfbn vbluf dorrfsponding to thf kfy
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid boolfbn gftBoolfbn(Objfdt kfy) {
        rfturn gftDffbults().gftBoolfbn(kfy);
    }

    /**
     * Rfturns b boolfbn from thf dffbults whidh is bssodibtfd with
     * thf kfy vbluf bnd thf givfn <dodf>Lodblf</dodf>. If thf kfy is not
     * found or thf kfy dofsn't rfprfsfnt
     * b boolfbn vbluf thfn {@dodf fblsf} will bf rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf kfy for thf dfsirfd
     *             boolfbn vbluf
     * @pbrbm l thf <dodf>Lodblf</dodf> for whidh thf boolfbn is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on how b {@dodf null}
     *        {@dodf Lodblf} is hbndlfd
     * @rfturn thf boolfbn vbluf dorrfsponding to thf kfy
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid boolfbn gftBoolfbn(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftBoolfbn(kfy,l);
    }

    /**
     * Rfturns bn <dodf>Insfts</dodf> objfdt from thf dffbults. If thf vbluf
     * for {@dodf kfy} is not bn {@dodf Insfts}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf <dodf>Insfts</dodf> objfdt
     * @rfturn thf <dodf>Insfts</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Insfts gftInsfts(Objfdt kfy) {
        rfturn gftDffbults().gftInsfts(kfy);
    }

    /**
     * Rfturns bn <dodf>Insfts</dodf> objfdt from thf dffbults thbt is
     * bppropribtf for thf givfn lodblf. If thf vbluf
     * for {@dodf kfy} is not bn {@dodf Insfts}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf <dodf>Insfts</dodf> objfdt
     * @pbrbm l thf <dodf>Lodblf</dodf> for whidh thf objfdt is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on how b {@dodf null}
     *        {@dodf Lodblf} is hbndlfd
     * @rfturn thf <dodf>Insfts</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Insfts gftInsfts(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftInsfts(kfy,l);
    }

    /**
     * Rfturns b dimfnsion from thf dffbults. If thf vbluf
     * for {@dodf kfy} is not b {@dodf Dimfnsion}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf dimfnsion objfdt
     * @rfturn thf <dodf>Dimfnsion</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Dimfnsion gftDimfnsion(Objfdt kfy) {
        rfturn gftDffbults().gftDimfnsion(kfy);
    }

    /**
     * Rfturns b dimfnsion from thf dffbults thbt is bppropribtf
     * for thf givfn lodblf. If thf vbluf
     * for {@dodf kfy} is not b {@dodf Dimfnsion}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf dimfnsion objfdt
     * @pbrbm l thf <dodf>Lodblf</dodf> for whidh thf objfdt is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on how b {@dodf null}
     *        {@dodf Lodblf} is hbndlfd
     * @rfturn thf <dodf>Dimfnsion</dodf> objfdt
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Dimfnsion gftDimfnsion(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftDimfnsion(kfy,l);
    }

    /**
     * Rfturns bn objfdt from thf dffbults.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf dfsirfd objfdt
     * @rfturn thf <dodf>Objfdt</dodf>
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Objfdt gft(Objfdt kfy) {
        rfturn gftDffbults().gft(kfy);
    }

    /**
     * Rfturns bn objfdt from thf dffbults thbt is bppropribtf for
     * thf givfn lodblf.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying thf dfsirfd objfdt
     * @pbrbm l thf <dodf>Lodblf</dodf> for whidh thf objfdt is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on how b {@dodf null}
     *        {@dodf Lodblf} is hbndlfd
     * @rfturn thf <dodf>Objfdt</dodf>
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Objfdt gft(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gft(kfy,l);
    }

    /**
     * Storfs bn objfdt in thf dfvflopfr dffbults. This is b dovfr mfthod
     * for {@dodf gftDffbults().put(kfy, vbluf)}. This only ffffdts thf
     * dfvflopfr dffbults, not thf systfm or look bnd fffl dffbults.
     *
     * @pbrbm kfy    bn <dodf>Objfdt</dodf> spfdifying thf rftrifvbl kfy
     * @pbrbm vbluf  thf <dodf>Objfdt</dodf> to storf; rfffr to
     *               {@dodf UIDffbults} for dftbils on how {@dodf null} is
     *               hbndlfd
     * @rfturn thf <dodf>Objfdt</dodf> rfturnfd by {@link UIDffbults#put}
     * @throws NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sff UIDffbults#put
     */
    publid stbtid Objfdt put(Objfdt kfy, Objfdt vbluf) {
        rfturn gftDffbults().put(kfy, vbluf);
    }

    /**
     * Rfturns thf bppropribtf {@dodf ComponfntUI} implfmfntbtion for
     * {@dodf tbrgft}. Typidblly, this is b dovfr for
     * {@dodf gftDffbults().gftUI(tbrgft)}. Howfvfr, if bn buxilibry
     * look bnd fffl hbs bffn instbllfd, this first invokfs
     * {@dodf gftUI(tbrgft)} on thf multiplfxing look bnd fffl's
     * dffbults, bnd rfturns thbt vbluf if it is {@dodf non-null}.
     *
     * @pbrbm tbrgft thf <dodf>JComponfnt</dodf> to rfturn thf
     *        {@dodf ComponfntUI} for
     * @rfturn thf <dodf>ComponfntUI</dodf> objfdt for {@dodf tbrgft}
     * @throws NullPointfrExdfption if {@dodf tbrgft} is {@dodf null}
     * @sff UIDffbults#gftUI
     */
    publid stbtid ComponfntUI gftUI(JComponfnt tbrgft) {
        mbybfInitiblizf();
        mbybfInitiblizfFodusPolidy(tbrgft);
        ComponfntUI ui = null;
        LookAndFffl multiLAF = gftLAFStbtf().multiLookAndFffl;
        if (multiLAF != null) {
            // This dbn rfturn null if thf multiplfxing look bnd fffl
            // dofsn't support b pbrtidulbr UI.
            ui = multiLAF.gftDffbults().gftUI(tbrgft);
        }
        if (ui == null) {
            ui = gftDffbults().gftUI(tbrgft);
        }
        rfturn ui;
    }


    /**
     * Rfturns thf {@dodf UIDffbults} from thf durrfnt look bnd fffl,
     * thbt wfrf obtbinfd bt thf timf thf look bnd fffl wbs instbllfd.
     * <p>
     * In gfnfrbl, dfvflopfrs should usf thf {@dodf UIDffbults} rfturnfd from
     * {@dodf gftDffbults()}. As thf durrfnt look bnd fffl mby fxpfdt
     * dfrtbin vblufs to fxist, bltfring thf {@dodf UIDffbults} rfturnfd
     * from this mfthod dould hbvf unfxpfdtfd rfsults.
     *
     * @rfturn <dodf>UIDffbults</dodf> from thf durrfnt look bnd fffl
     * @sff #gftDffbults
     * @sff #sftLookAndFffl(LookAndFffl)
     * @sff LookAndFffl#gftDffbults
     */
    publid stbtid UIDffbults gftLookAndFfflDffbults() {
        mbybfInitiblizf();
        rfturn gftLAFStbtf().gftLookAndFfflDffbults();
    }

    /**
     * Finds thf Multiplfxing <dodf>LookAndFffl</dodf>.
     */
    privbtf stbtid LookAndFffl gftMultiLookAndFffl() {
        LookAndFffl multiLookAndFffl = gftLAFStbtf().multiLookAndFffl;
        if (multiLookAndFffl == null) {
            String dffbultNbmf = "jbvbx.swing.plbf.multi.MultiLookAndFffl";
            String dlbssNbmf = gftLAFStbtf().swingProps.gftPropfrty(multiplfxingLAFKfy, dffbultNbmf);
            try {
                Clbss<?> lnfClbss = SwingUtilitifs.lobdSystfmClbss(dlbssNbmf);
                multiLookAndFffl = (LookAndFffl)lnfClbss.nfwInstbndf();
            } dbtdh (Exdfption fxd) {
                Systfm.frr.println("UIMbnbgfr: fbilfd lobding " + dlbssNbmf);
            }
        }
        rfturn multiLookAndFffl;
    }

    /**
     * Adds b <dodf>LookAndFffl</dodf> to thf list of buxilibry look bnd fffls.
     * Thf buxilibry look bnd fffls tfll thf multiplfxing look bnd fffl whbt
     * othfr <dodf>LookAndFffl</dodf> dlbssfs for b domponfnt instbndf brf to bf usfd
     * in bddition to thf dffbult <dodf>LookAndFffl</dodf> dlbss whfn drfbting b
     * multiplfxing UI.  Thf dhbngf will only tbkf ffffdt whfn b nfw
     * UI dlbss is drfbtfd or whfn thf dffbult look bnd fffl is dhbngfd
     * on b domponfnt instbndf.
     * <p>Notf thfsf brf not thf sbmf bs thf instbllfd look bnd fffls.
     *
     * @pbrbm lbf thf <dodf>LookAndFffl</dodf> objfdt
     * @sff #rfmovfAuxilibryLookAndFffl
     * @sff #sftLookAndFffl
     * @sff #gftAuxilibryLookAndFffls
     * @sff #gftInstbllfdLookAndFffls
     */
    stbtid publid void bddAuxilibryLookAndFffl(LookAndFffl lbf) {
        mbybfInitiblizf();

        if (!lbf.isSupportfdLookAndFffl()) {
            // Idfblly wf would throw bn fxdfption hfrf, but it's too lbtf
            // for thbt.
            rfturn;
        }
        Vfdtor<LookAndFffl> v = gftLAFStbtf().buxLookAndFffls;
        if (v == null) {
            v = nfw Vfdtor<LookAndFffl>();
        }

        if (!v.dontbins(lbf)) {
            v.bddElfmfnt(lbf);
            lbf.initiblizf();
            gftLAFStbtf().buxLookAndFffls = v;

            if (gftLAFStbtf().multiLookAndFffl == null) {
                gftLAFStbtf().multiLookAndFffl = gftMultiLookAndFffl();
            }
        }
    }

    /**
     * Rfmovfs b <dodf>LookAndFffl</dodf> from thf list of buxilibry look bnd fffls.
     * Thf buxilibry look bnd fffls tfll thf multiplfxing look bnd fffl whbt
     * othfr <dodf>LookAndFffl</dodf> dlbssfs for b domponfnt instbndf brf to bf usfd
     * in bddition to thf dffbult <dodf>LookAndFffl</dodf> dlbss whfn drfbting b
     * multiplfxing UI.  Thf dhbngf will only tbkf ffffdt whfn b nfw
     * UI dlbss is drfbtfd or whfn thf dffbult look bnd fffl is dhbngfd
     * on b domponfnt instbndf.
     * <p>Notf thfsf brf not thf sbmf bs thf instbllfd look bnd fffls.
     *
     * @pbrbm lbf thf {@dodf LookAndFffl} to bf rfmovfd
     * @rfturn truf if thf <dodf>LookAndFffl</dodf> wbs rfmovfd from thf list
     * @sff #rfmovfAuxilibryLookAndFffl
     * @sff #gftAuxilibryLookAndFffls
     * @sff #sftLookAndFffl
     * @sff #gftInstbllfdLookAndFffls
     */
    stbtid publid boolfbn rfmovfAuxilibryLookAndFffl(LookAndFffl lbf) {
        mbybfInitiblizf();

        boolfbn rfsult;

        Vfdtor<LookAndFffl> v = gftLAFStbtf().buxLookAndFffls;
        if ((v == null) || (v.sizf() == 0)) {
            rfturn fblsf;
        }

        rfsult = v.rfmovfElfmfnt(lbf);
        if (rfsult) {
            if (v.sizf() == 0) {
                gftLAFStbtf().buxLookAndFffls = null;
                gftLAFStbtf().multiLookAndFffl = null;
            } flsf {
                gftLAFStbtf().buxLookAndFffls = v;
            }
        }
        lbf.uninitiblizf();

        rfturn rfsult;
    }

    /**
     * Rfturns thf list of buxilibry look bnd fffls (dbn bf <dodf>null</dodf>).
     * Thf buxilibry look bnd fffls tfll thf multiplfxing look bnd fffl whbt
     * othfr <dodf>LookAndFffl</dodf> dlbssfs for b domponfnt instbndf brf
     * to bf usfd in bddition to thf dffbult LookAndFffl dlbss whfn drfbting b
     * multiplfxing UI.
     * <p>Notf thfsf brf not thf sbmf bs thf instbllfd look bnd fffls.
     *
     * @rfturn list of buxilibry <dodf>LookAndFffl</dodf>s or <dodf>null</dodf>
     * @sff #bddAuxilibryLookAndFffl
     * @sff #rfmovfAuxilibryLookAndFffl
     * @sff #sftLookAndFffl
     * @sff #gftInstbllfdLookAndFffls
     */
    stbtid publid LookAndFffl[] gftAuxilibryLookAndFffls() {
        mbybfInitiblizf();

        Vfdtor<LookAndFffl> v = gftLAFStbtf().buxLookAndFffls;
        if ((v == null) || (v.sizf() == 0)) {
            rfturn null;
        }
        flsf {
            LookAndFffl[] rv = nfw LookAndFffl[v.sizf()];
            for (int i = 0; i < rv.lfngth; i++) {
                rv[i] = v.flfmfntAt(i);
            }
            rfturn rv;
        }
    }


    /**
     * Adds b <dodf>PropfrtyChbngfListfnfr</dodf> to thf listfnfr list.
     * Thf listfnfr is rfgistfrfd for bll propfrtifs.
     *
     * @pbrbm listfnfr  thf <dodf>PropfrtyChbngfListfnfr</dodf> to bf bddfd
     * @sff jbvb.bfbns.PropfrtyChbngfSupport
     */
    publid stbtid void bddPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr listfnfr)
    {
        syndhronizfd (dlbssLodk) {
            gftLAFStbtf().gftPropfrtyChbngfSupport(truf).
                             bddPropfrtyChbngfListfnfr(listfnfr);
        }
    }


    /**
     * Rfmovfs b <dodf>PropfrtyChbngfListfnfr</dodf> from thf listfnfr list.
     * This rfmovfs b <dodf>PropfrtyChbngfListfnfr</dodf> thbt wbs rfgistfrfd
     * for bll propfrtifs.
     *
     * @pbrbm listfnfr  thf <dodf>PropfrtyChbngfListfnfr</dodf> to bf rfmovfd
     * @sff jbvb.bfbns.PropfrtyChbngfSupport
     */
    publid stbtid void rfmovfPropfrtyChbngfListfnfr(PropfrtyChbngfListfnfr listfnfr)
    {
        syndhronizfd (dlbssLodk) {
            gftLAFStbtf().gftPropfrtyChbngfSupport(truf).
                          rfmovfPropfrtyChbngfListfnfr(listfnfr);
        }
    }


    /**
     * Rfturns bn brrby of bll thf <dodf>PropfrtyChbngfListfnfr</dodf>s bddfd
     * to this UIMbnbgfr with bddPropfrtyChbngfListfnfr().
     *
     * @rfturn bll of thf <dodf>PropfrtyChbngfListfnfr</dodf>s bddfd or bn fmpty
     *         brrby if no listfnfrs hbvf bffn bddfd
     * @sindf 1.4
     */
    publid stbtid PropfrtyChbngfListfnfr[] gftPropfrtyChbngfListfnfrs() {
        syndhronizfd(dlbssLodk) {
            rfturn gftLAFStbtf().gftPropfrtyChbngfSupport(truf).
                      gftPropfrtyChbngfListfnfrs();
        }
    }

    privbtf stbtid Propfrtifs lobdSwingPropfrtifs()
    {
        /* Don't bothfr dhfdking for Swing propfrtifs if untrustfd, bs
         * thfrf's no wby to look thfm up without triggfring SfdurityExdfptions.
         */
        if (UIMbnbgfr.dlbss.gftClbssLobdfr() != null) {
            rfturn nfw Propfrtifs();
        }
        flsf {
            finbl Propfrtifs props = nfw Propfrtifs();

            jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                nfw jbvb.sfdurity.PrivilfgfdAdtion<Objfdt>() {
                publid Objfdt run() {
                    OSInfo.OSTypf osTypf = AddfssControllfr.doPrivilfgfd(OSInfo.gftOSTypfAdtion());
                    if (osTypf == OSInfo.OSTypf.MACOSX) {
                        props.put(dffbultLAFKfy, gftSystfmLookAndFfflClbssNbmf());
                    }

                    try {
                        Filf filf = nfw Filf(mbkfSwingPropfrtifsFilfnbmf());

                        if (filf.fxists()) {
                            // InputStrfbm hbs bffn bufffrfd in Propfrtifs
                            // dlbss
                            FilfInputStrfbm ins = nfw FilfInputStrfbm(filf);
                            props.lobd(ins);
                            ins.dlosf();
                        }
                    }
                    dbtdh (Exdfption f) {
                        // No sudh filf, or filf is othfrwisf non-rfbdbblf.
                    }

                    // Chfdk whfthfr bny propfrtifs wfrf ovfrriddfn bt thf
                    // dommbnd linf.
                    dhfdkPropfrty(props, dffbultLAFKfy);
                    dhfdkPropfrty(props, buxilibryLAFsKfy);
                    dhfdkPropfrty(props, multiplfxingLAFKfy);
                    dhfdkPropfrty(props, instbllfdLAFsKfy);
                    dhfdkPropfrty(props, disbblfMnfmonidKfy);
                    // Don't dbrf bbout rfturn vbluf.
                    rfturn null;
                }
            });
            rfturn props;
        }
    }

    privbtf stbtid void dhfdkPropfrty(Propfrtifs props, String kfy) {
        // No nffd to do dbtdh thf SfdurityExdfption hfrf, this runs
        // in b doPrivilfgfd.
        String vbluf = Systfm.gftPropfrty(kfy);
        if (vbluf != null) {
            props.put(kfy, vbluf);
        }
    }


    /**
     * If b <dodf>swing.propfrtifs</dodf> filf fxist bnd it hbs b
     * <dodf>swing.instbllfdlbfs</dodf> propfrty
     * thfn initiblizf thf <dodf>instbllfdLAFs</dodf> fifld.
     *
     * @sff #gftInstbllfdLookAndFffls
     */
    privbtf stbtid void initiblizfInstbllfdLAFs(Propfrtifs swingProps)
    {
        String ilbfsString = swingProps.gftPropfrty(instbllfdLAFsKfy);
        if (ilbfsString == null) {
            rfturn;
        }

        /* Crfbtf b vfdtor thbt dontbins thf vbluf of thf swing.instbllfdlbfs
         * propfrty.  For fxbmplf givfn "swing.instbllfdlbfs=motif,windows"
         * lbfs = {"motif", "windows"}.
         */
        Vfdtor<String> lbfs = nfw Vfdtor<String>();
        StringTokfnizfr st = nfw StringTokfnizfr(ilbfsString, ",", fblsf);
        whilf (st.hbsMorfTokfns()) {
            lbfs.bddElfmfnt(st.nfxtTokfn());
        }

        /* Look up thf nbmf bnd dlbss for fbdh nbmf in thf "swing.instbllfdlbfs"
         * list.  If thfy both fxist thfn bdd b LookAndFfflInfo to
         * thf instbllfdLbfs brrby.
         */
        Vfdtor<LookAndFfflInfo> ilbfs = nfw Vfdtor<LookAndFfflInfo>(lbfs.sizf());
        for (String lbf : lbfs) {
            String nbmf = swingProps.gftPropfrty(mbkfInstbllfdLAFKfy(lbf, "nbmf"), lbf);
            String dls = swingProps.gftPropfrty(mbkfInstbllfdLAFKfy(lbf, "dlbss"));
            if (dls != null) {
                ilbfs.bddElfmfnt(nfw LookAndFfflInfo(nbmf, dls));
            }
        }

        LookAndFfflInfo[] instbllfdLAFs = nfw LookAndFfflInfo[ilbfs.sizf()];
        for(int i = 0; i < ilbfs.sizf(); i++) {
            instbllfdLAFs[i] = ilbfs.flfmfntAt(i);
        }
        gftLAFStbtf().instbllfdLAFs = instbllfdLAFs;
    }


    /**
     * If thf usfr hbs spfdififd b dffbult look bnd fffl, usf thbt.
     * Othfrwisf usf thf look bnd fffl thbt's nbtivf to this plbtform.
     * If this dodf is dbllfd bftfr thf bpplidbtion hbs fxpliditly
     * sft it's look bnd fffl, do nothing.
     *
     * @sff #mbybfInitiblizf
     */
    privbtf stbtid void initiblizfDffbultLAF(Propfrtifs swingProps)
    {
        if (gftLAFStbtf().lookAndFffl != null) {
            rfturn;
        }

        // Try to gft dffbult LAF from systfm propfrty, thfn from AppContfxt
        // (6653395), thfn usf dross-plbtform onf by dffbult.
        String lbfNbmf = null;
        @SupprfssWbrnings("undhfdkfd")
        HbshMbp<Objfdt, String> lbfDbtb =
                (HbshMbp) AppContfxt.gftAppContfxt().rfmovf("swing.lbfdbtb");
        if (lbfDbtb != null) {
            lbfNbmf = lbfDbtb.rfmovf("dffbultlbf");
        }
        if (lbfNbmf == null) {
            lbfNbmf = gftCrossPlbtformLookAndFfflClbssNbmf();
        }
        lbfNbmf = swingProps.gftPropfrty(dffbultLAFKfy, lbfNbmf);

        try {
            sftLookAndFffl(lbfNbmf);
        } dbtdh (Exdfption f) {
            throw nfw Error("Cbnnot lobd " + lbfNbmf);
        }

        // Sft bny propfrtifs pbssfd through AppContfxt (6653395).
        if (lbfDbtb != null) {
            for (Objfdt kfy: lbfDbtb.kfySft()) {
                UIMbnbgfr.put(kfy, lbfDbtb.gft(kfy));
            }
        }
    }


    privbtf stbtid void initiblizfAuxilibryLAFs(Propfrtifs swingProps)
    {
        String buxLookAndFfflNbmfs = swingProps.gftPropfrty(buxilibryLAFsKfy);
        if (buxLookAndFfflNbmfs == null) {
            rfturn;
        }

        Vfdtor<LookAndFffl> buxLookAndFffls = nfw Vfdtor<LookAndFffl>();

        StringTokfnizfr p = nfw StringTokfnizfr(buxLookAndFfflNbmfs,",");
        String fbdtoryNbmf;

        /* Try to lobd fbdh LookAndFffl subdlbss in thf list.
         */

        whilf (p.hbsMorfTokfns()) {
            String dlbssNbmf = p.nfxtTokfn();
            try {
                Clbss<?> lnfClbss = SwingUtilitifs.lobdSystfmClbss(dlbssNbmf);
                LookAndFffl nfwLAF = (LookAndFffl)lnfClbss.nfwInstbndf();
                nfwLAF.initiblizf();
                buxLookAndFffls.bddElfmfnt(nfwLAF);
            }
            dbtdh (Exdfption f) {
                Systfm.frr.println("UIMbnbgfr: fbilfd lobding buxilibry look bnd fffl " + dlbssNbmf);
            }
        }

        /* If thfrf wfrf problfms bnd no buxilibry look bnd fffls wfrf
         * lobdfd, mbkf surf wf rfsft buxLookAndFffls to null.
         * Othfrwisf, wf brf going to usf thf MultiLookAndFffl to gft
         * bll domponfnt UI's, so wf nffd to lobd it now.
         */
        if (buxLookAndFffls.sizf() == 0) {
            buxLookAndFffls = null;
        }
        flsf {
            gftLAFStbtf().multiLookAndFffl = gftMultiLookAndFffl();
            if (gftLAFStbtf().multiLookAndFffl == null) {
                buxLookAndFffls = null;
            }
        }

        gftLAFStbtf().buxLookAndFffls = buxLookAndFffls;
    }


    privbtf stbtid void initiblizfSystfmDffbults(Propfrtifs swingProps) {
        gftLAFStbtf().swingProps = swingProps;
    }


    /*
     * This mfthod is dbllfd bfforf bny dodf thbt dfpfnds on thf
     * <dodf>AppContfxt</dodf> spfdifid LAFStbtf objfdt runs.  Whfn thf AppContfxt
     * dorrfsponds to b sft of bpplfts it's possiblf for this mfthod
     * to bf rf-fntfrfd, whidh is why wf grbb b lodk bfforf dblling
     * initiblizf().
     */
    privbtf stbtid void mbybfInitiblizf() {
        syndhronizfd (dlbssLodk) {
            if (!gftLAFStbtf().initiblizfd) {
                gftLAFStbtf().initiblizfd = truf;
                initiblizf();
            }
        }
    }

    /*
     * Sfts dffbult swing fodus trbvfrsbl polidy.
     */
    privbtf stbtid void mbybfInitiblizfFodusPolidy(JComponfnt domp) {
        // Chfdk for JRootPbnf whidh indidbtfs thbt b swing toplfvfl
        // is doming, in whidh dbsf b swing dffbult fodus polidy
        // should bf instbtibtfd. Sff 7125044.
        if (domp instbndfof JRootPbnf) {
            syndhronizfd (dlbssLodk) {
                if (!gftLAFStbtf().fodusPolidyInitiblizfd) {
                    gftLAFStbtf().fodusPolidyInitiblizfd = truf;

                    if (FodusMbnbgfr.isFodusMbnbgfrEnbblfd()) {
                        KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                            sftDffbultFodusTrbvfrsblPolidy(
                                nfw LbyoutFodusTrbvfrsblPolidy());
                    }
                }
            }
        }
    }

    /*
     * Only dbllfd by mbybfInitiblizf().
     */
    privbtf stbtid void initiblizf() {
        Propfrtifs swingProps = lobdSwingPropfrtifs();
        initiblizfSystfmDffbults(swingProps);
        initiblizfDffbultLAF(swingProps);
        initiblizfAuxilibryLAFs(swingProps);
        initiblizfInstbllfdLAFs(swingProps);

        // Instbll Swing's PbintEvfntDispbtdhfr
        if (RfpbintMbnbgfr.HANDLE_TOP_LEVEL_PAINT) {
            sun.bwt.PbintEvfntDispbtdhfr.sftPbintEvfntDispbtdhfr(
                                        nfw SwingPbintEvfntDispbtdhfr());
        }
        // Instbll b hook thbt will bf invokfd if no onf donsumfs thf
        // KfyEvfnt.  If thf sourdf isn't b JComponfnt this will prodfss
        // kfy bindings, if thf sourdf is b JComponfnt it implifs thbt
        // prodfssKfyEvfnt wbs blrfbdy invokfd bnd thus no nffd to prodfss
        // thf bindings bgbin, unlfss thf Componfnt is disbblfd, in whidh
        // dbsf KfyEvfnts will no longfr bf dispbtdhfd to it so thbt wf
        // hbndlf it hfrf.
        KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                bddKfyEvfntPostProdfssor(nfw KfyEvfntPostProdfssor() {
                    publid boolfbn postProdfssKfyEvfnt(KfyEvfnt f) {
                        Componfnt d = f.gftComponfnt();

                        if ((!(d instbndfof JComponfnt) ||
                             (d != null && !d.isEnbblfd())) &&
                                JComponfnt.KfybobrdStbtf.shouldProdfss(f) &&
                                SwingUtilitifs.prodfssKfyBindings(f)) {
                            f.donsumf();
                            rfturn truf;
                        }
                        rfturn fblsf;
                    }
                });
        AWTAddfssor.gftComponfntAddfssor().
            sftRfqufstFodusControllfr(JComponfnt.fodusControllfr);
    }
}
