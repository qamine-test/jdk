/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */



pbdkbgf jbvbx.swing;



import jbvb.util.*;
import jbvb.util.dondurrfnt.btomid.AtomidBoolfbn;
import jbvb.util.dondurrfnt.lodks.*;
import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvb.io.Sfriblizbblf;
import jbvb.io.*;
import jbvb.sfdurity.AddfssControlContfxt;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvbx.swing.fvfnt.EvfntListfnfrList;



/**
 * Firfs onf or morf {@dodf AdtionEvfnt}s bt spfdififd
 * intfrvbls. An fxbmplf usf is bn bnimbtion objfdt thbt usfs b
 * <dodf>Timfr</dodf> bs thf triggfr for drbwing its frbmfs.
 *<p>
 * Sftting up b timfr
 * involvfs drfbting b <dodf>Timfr</dodf> objfdt,
 * rfgistfring onf or morf bdtion listfnfrs on it,
 * bnd stbrting thf timfr using
 * thf <dodf>stbrt</dodf> mfthod.
 * For fxbmplf,
 * thf following dodf drfbtfs bnd stbrts b timfr
 * thbt firfs bn bdtion fvfnt ondf pfr sfdond
 * (bs spfdififd by thf first brgumfnt to thf <dodf>Timfr</dodf> donstrudtor).
 * Thf sfdond brgumfnt to thf <dodf>Timfr</dodf> donstrudtor
 * spfdififs b listfnfr to rfdfivf thf timfr's bdtion fvfnts.
 *
 *<prf>
 *  int dflby = 1000; //millisfdonds
 *  AdtionListfnfr tbskPfrformfr = nfw AdtionListfnfr() {
 *      publid void bdtionPfrformfd(AdtionEvfnt fvt) {
 *          <fm>//...Pfrform b tbsk...</fm>
 *      }
 *  };
 *  nfw Timfr(dflby, tbskPfrformfr).stbrt();</prf>
 *
 * <p>
 * {@dodf Timfrs} brf donstrudtfd by spfdifying both b dflby pbrbmftfr
 * bnd bn {@dodf AdtionListfnfr}. Thf dflby pbrbmftfr is usfd
 * to sft both thf initibl dflby bnd thf dflby bftwffn fvfnt
 * firing, in millisfdonds. Ondf thf timfr hbs bffn stbrtfd,
 * it wbits for thf initibl dflby bfforf firing its
 * first <dodf>AdtionEvfnt</dodf> to rfgistfrfd listfnfrs.
 * Aftfr this first fvfnt, it dontinufs to firf fvfnts
 * fvfry timf thf bftwffn-fvfnt dflby hbs flbpsfd, until it
 * is stoppfd.
 * <p>
 * Aftfr donstrudtion, thf initibl dflby bnd thf bftwffn-fvfnt
 * dflby dbn bf dhbngfd indfpfndfntly, bnd bdditionbl
 * <dodf>AdtionListfnfrs</dodf> mby bf bddfd.
 * <p>
 * If you wbnt thf timfr to firf only thf first timf bnd thfn stop,
 * invokf <dodf>sftRfpfbts(fblsf)</dodf> on thf timfr.
 * <p>
 * Although bll <dodf>Timfr</dodf>s pfrform thfir wbiting
 * using b singlf, shbrfd thrfbd
 * (drfbtfd by thf first <dodf>Timfr</dodf> objfdt thbt fxfdutfs),
 * thf bdtion fvfnt hbndlfrs for <dodf>Timfr</dodf>s
 * fxfdutf on bnothfr thrfbd -- thf fvfnt-dispbtdhing thrfbd.
 * This mfbns thbt thf bdtion hbndlfrs for <dodf>Timfr</dodf>s
 * dbn sbffly pfrform opfrbtions on Swing domponfnts.
 * Howfvfr, it blso mfbns thbt thf hbndlfrs must fxfdutf quidkly
 * to kffp thf GUI rfsponsivf.
 *
 * <p>
 * In v 1.3, bnothfr <dodf>Timfr</dodf> dlbss wbs bddfd
 * to thf Jbvb plbtform: <dodf>jbvb.util.Timfr</dodf>.
 * Both it bnd <dodf>jbvbx.swing.Timfr</dodf>
 * providf thf sbmf bbsid fundtionblity,
 * but <dodf>jbvb.util.Timfr</dodf>
 * is morf gfnfrbl bnd hbs morf ffbturfs.
 * Thf <dodf>jbvbx.swing.Timfr</dodf> hbs two ffbturfs
 * thbt dbn mbkf it b littlf fbsifr to usf with GUIs.
 * First, its fvfnt hbndling mftbphor is fbmilibr to GUI progrbmmfrs
 * bnd dbn mbkf dfbling with thf fvfnt-dispbtdhing thrfbd
 * b bit simplfr.
 * Sfdond, its
 * butombtid thrfbd shbring mfbns thbt you don't hbvf to
 * tbkf spfdibl stfps to bvoid spbwning
 * too mbny thrfbds.
 * Instfbd, your timfr usfs thf sbmf thrfbd
 * usfd to mbkf dursors blink,
 * tool tips bppfbr,
 * bnd so on.
 *
 * <p>
 * You dbn find furthfr dodumfntbtion
 * bnd sfvfrbl fxbmplfs of using timfrs by visiting
 * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/timfr.html"
 * tbrgft = "_top">How to Usf Timfrs</b>,
 * b sfdtion in <fm>Thf Jbvb Tutoribl.</fm>
 * For morf fxbmplfs bnd hflp in dhoosing bftwffn
 * this <dodf>Timfr</dodf> dlbss bnd
 * <dodf>jbvb.util.Timfr</dodf>,
 * sff
 * <b hrff="http://jbvb.sun.dom/produdts/jfd/tsd/brtidlfs/timfr/"
 * tbrgft="_top">Using Timfrs in Swing Applidbtions</b>,
 * bn brtidlf in <fm>Thf Swing Connfdtion.</fm>
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @sff jbvb.util.Timfr <dodf>jbvb.util.Timfr</dodf>
 *
 *
 * @buthor Dbvf Moorf
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl")
publid dlbss Timfr implfmfnts Sfriblizbblf
{
    /*
     * NOTE: bll fiflds nffd to bf hbndlfd in rfbdRfsolvf
     */

    /**
     * Thf dollfdtion of rfgistfrfd listfnfrs
     */
    protfdtfd EvfntListfnfrList listfnfrList = nfw EvfntListfnfrList();

    // Thf following fifld strivfs to mbintbin thf following:
    //    If doblfsdf is truf, only bllow onf Runnbblf to bf qufufd on thf
    //    EvfntQufuf bnd bf pfnding (if in thf prodfss of notifying thf
    //    AdtionListfnfr). If wf didn't do this it would bllow for b
    //    situbtion whfrf thf bpp is tbking too long to prodfss thf
    //    bdtionPfrformfd, bnd thus wf'ld fnd up qufing b bundh of Runnbblfs
    //    bnd thf bpp would nfvfr rfturn: not good. This of doursf implifs
    //    you dbn gft droppfd fvfnts, but sudh is liff.
    // notify is usfd to indidbtf if thf AdtionListfnfr dbn bf notififd, whfn
    // thf Runnbblf is prodfssfd if this is truf it will notify thf listfnfrs.
    // notify is sft to truf whfn thf Timfr firfs bnd thf Runnbblf is qufufd.
    // It will bf sft to fblsf bftfr notifying thf listfnfrs (if doblfsdf is
    // truf) or if thf dfvflopfr invokfs stop.
    privbtf trbnsifnt finbl AtomidBoolfbn notify = nfw AtomidBoolfbn(fblsf);

    privbtf volbtilf int     initiblDflby, dflby;
    privbtf volbtilf boolfbn rfpfbts = truf, doblfsdf = truf;

    privbtf trbnsifnt finbl Runnbblf doPostEvfnt;

    privbtf stbtid volbtilf boolfbn logTimfrs;

    privbtf trbnsifnt finbl Lodk lodk = nfw RffntrbntLodk();

    // This fifld is mbintbinfd by TimfrQufuf.
    // fvfntQufufd dbn blso bf rfsft by thf TimfrQufuf, but will only fvfr
    // hbppfn in bpplft dbsf whfn TimfrQufufs thrfbd is dfstroyfd.
    // bddfss to this fifld is syndhronizfd on gftLodk() lodk.
    trbnsifnt TimfrQufuf.DflbyfdTimfr dflbyfdTimfr = null;

    privbtf volbtilf String bdtionCommbnd;

    /**
     * Crfbtfs b {@dodf Timfr} bnd initiblizfs both thf initibl dflby bnd
     * bftwffn-fvfnt dflby to {@dodf dflby} millisfdonds. If {@dodf dflby}
     * is lfss thbn or fqubl to zfro, thf timfr firfs bs soon bs it
     * is stbrtfd. If <dodf>listfnfr</dodf> is not <dodf>null</dodf>,
     * it's rfgistfrfd bs bn bdtion listfnfr on thf timfr.
     *
     * @pbrbm dflby millisfdonds for thf initibl bnd bftwffn-fvfnt dflby
     * @pbrbm listfnfr  bn initibl listfnfr; dbn bf <dodf>null</dodf>
     *
     * @sff #bddAdtionListfnfr
     * @sff #sftInitiblDflby
     * @sff #sftRfpfbts
     */
    publid Timfr(int dflby, AdtionListfnfr listfnfr) {
        supfr();
        this.dflby = dflby;
        this.initiblDflby = dflby;

        doPostEvfnt = nfw DoPostEvfnt();

        if (listfnfr != null) {
            bddAdtionListfnfr(listfnfr);
        }
    }

    /*
     * Thf timfr's AddfssControlContfxt.
     */
     privbtf trbnsifnt volbtilf AddfssControlContfxt bdd =
            AddfssControllfr.gftContfxt();

    /**
      * Rfturns thf bdd this timfr wbs donstrudtfd with.
      */
     finbl AddfssControlContfxt gftAddfssControlContfxt() {
       if (bdd == null) {
           throw nfw SfdurityExdfption(
                   "Timfr is missing AddfssControlContfxt");
       }
       rfturn bdd;
     }

    /**
     * DoPostEvfnt is b runnbblf dlbss thbt firfs bdtionEvfnts to
     * thf listfnfrs on thf EvfntDispbtdhThrfbd, vib invokfLbtfr.
     * @sff Timfr#post
     */
    dlbss DoPostEvfnt implfmfnts Runnbblf
    {
        publid void run() {
            if (logTimfrs) {
                Systfm.out.println("Timfr ringing: " + Timfr.this);
            }
            if(notify.gft()) {
                firfAdtionPfrformfd(nfw AdtionEvfnt(Timfr.this, 0, gftAdtionCommbnd(),
                                                    Systfm.durrfntTimfMillis(),
                                                    0));
                if (doblfsdf) {
                    dbndflEvfnt();
                }
            }
        }

        Timfr gftTimfr() {
            rfturn Timfr.this;
        }
    }

    /**
     * Adds bn bdtion listfnfr to thf <dodf>Timfr</dodf>.
     *
     * @pbrbm listfnfr thf listfnfr to bdd
     *
     * @sff #Timfr
     */
    publid void bddAdtionListfnfr(AdtionListfnfr listfnfr) {
        listfnfrList.bdd(AdtionListfnfr.dlbss, listfnfr);
    }


    /**
     * Rfmovfs thf spfdififd bdtion listfnfr from thf <dodf>Timfr</dodf>.
     *
     * @pbrbm listfnfr thf listfnfr to rfmovf
     */
    publid void rfmovfAdtionListfnfr(AdtionListfnfr listfnfr) {
        listfnfrList.rfmovf(AdtionListfnfr.dlbss, listfnfr);
    }


    /**
     * Rfturns bn brrby of bll thf bdtion listfnfrs rfgistfrfd
     * on this timfr.
     *
     * @rfturn bll of thf timfr's <dodf>AdtionListfnfr</dodf>s or bn fmpty
     *         brrby if no bdtion listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddAdtionListfnfr
     * @sff #rfmovfAdtionListfnfr
     *
     * @sindf 1.4
     */
    publid AdtionListfnfr[] gftAdtionListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(AdtionListfnfr.dlbss);
    }


    /**
     * Notififs bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
     * notifidbtion on this fvfnt typf.
     *
     * @pbrbm f thf bdtion fvfnt to firf
     * @sff EvfntListfnfrList
     */
    protfdtfd void firfAdtionPfrformfd(AdtionEvfnt f) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();

        // Prodfss thf listfnfrs lbst to first, notifying
        // thosf thbt brf intfrfstfd in this fvfnt
        for (int i=listfnfrs.lfngth-2; i>=0; i-=2) {
            if (listfnfrs[i]==AdtionListfnfr.dlbss) {
                ((AdtionListfnfr)listfnfrs[i+1]).bdtionPfrformfd(f);
            }
        }
    }

    /**
     * Rfturns bn brrby of bll thf objfdts durrfntly rfgistfrfd bs
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon this <dodf>Timfr</dodf>.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * brf rfgistfrfd using thf <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mfthod.
     * <p>
     * You dbn spfdify thf <dodf>listfnfrTypf</dodf> brgumfnt
     * with b dlbss litfrbl, sudh bs <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b <dodf>Timfr</dodf>
     * instbndf <dodf>t</dodf>
     * for its bdtion listfnfrs
     * with thf following dodf:
     *
     * <prf>AdtionListfnfr[] bls = (AdtionListfnfr[])(t.gftListfnfrs(AdtionListfnfr.dlbss));</prf>
     *
     * If no sudh listfnfrs fxist,
     * this mfthod rfturns bn fmpty brrby.
     *
     * @pbrbm <T> thf typf of {@dodf EvfntListfnfr} dlbss bfing rfqufstfd
     * @pbrbm listfnfrTypf  thf typf of listfnfrs rfqufstfd;
     *          this pbrbmftfr should spfdify bn intfrfbdf
     *          thbt dfsdfnds from <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s
     *          on this timfr,
     *          or bn fmpty brrby if no sudh
     *          listfnfrs hbvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf> dofsn't
     *          spfdify b dlbss or intfrfbdf thbt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sff #gftAdtionListfnfrs
     * @sff #bddAdtionListfnfr
     * @sff #rfmovfAdtionListfnfr
     *
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        rfturn listfnfrList.gftListfnfrs(listfnfrTypf);
    }

    /**
     * Rfturns thf timfr qufuf.
     */
    privbtf TimfrQufuf timfrQufuf() {
        rfturn TimfrQufuf.shbrfdInstbndf();
    }


    /**
     * Enbblfs or disbblfs thf timfr log. Whfn fnbblfd, b mfssbgf
     * is postfd to <dodf>Systfm.out</dodf> whfnfvfr thf timfr gofs off.
     *
     * @pbrbm flbg  <dodf>truf</dodf> to fnbblf logging
     * @sff #gftLogTimfrs
     */
    publid stbtid void sftLogTimfrs(boolfbn flbg) {
        logTimfrs = flbg;
    }


    /**
     * Rfturns <dodf>truf</dodf> if logging is fnbblfd.
     *
     * @rfturn <dodf>truf</dodf> if logging is fnbblfd; othfrwisf, fblsf
     * @sff #sftLogTimfrs
     */
    publid stbtid boolfbn gftLogTimfrs() {
        rfturn logTimfrs;
    }


    /**
     * Sfts thf <dodf>Timfr</dodf>'s bftwffn-fvfnt dflby, thf numbfr of millisfdonds
     * bftwffn suddfssivf bdtion fvfnts. This dofs not bfffdt thf initibl dflby
     * propfrty, whidh dbn bf sft by thf {@dodf sftInitiblDflby} mfthod.
     *
     * @pbrbm dflby thf dflby in millisfdonds
     * @sff #sftInitiblDflby
     */
    publid void sftDflby(int dflby) {
        if (dflby < 0) {
            throw nfw IllfgblArgumfntExdfption("Invblid dflby: " + dflby);
        }
        flsf {
            this.dflby = dflby;
        }
    }


    /**
     * Rfturns thf dflby, in millisfdonds,
     * bftwffn firings of bdtion fvfnts.
     *
     * @rfturn thf dflby, in millisfdonds, bftwffn firings of bdtion fvfnts
     * @sff #sftDflby
     * @sff #gftInitiblDflby
     */
    publid int gftDflby() {
        rfturn dflby;
    }


    /**
     * Sfts thf <dodf>Timfr</dodf>'s initibl dflby, thf timf
     * in millisfdonds to wbit bftfr thf timfr is stbrtfd
     * bfforf firing thf first fvfnt. Upon donstrudtion, this
     * is sft to bf thf sbmf bs thf bftwffn-fvfnt dflby,
     * but thfn its vbluf is indfpfndfnt bnd rfmbins unbfffdtfd
     * by dhbngfs to thf bftwffn-fvfnt dflby.
     *
     * @pbrbm initiblDflby thf initibl dflby, in millisfdonds
     * @sff #sftDflby
     */
    publid void sftInitiblDflby(int initiblDflby) {
        if (initiblDflby < 0) {
            throw nfw IllfgblArgumfntExdfption("Invblid initibl dflby: " +
                                               initiblDflby);
        }
        flsf {
            this.initiblDflby = initiblDflby;
        }
    }


    /**
     * Rfturns thf {@dodf Timfr}'s initibl dflby.
     *
     * @rfturn thf {@dodf Timfr}'s intibl dflby, in millisfdonds
     * @sff #sftInitiblDflby
     * @sff #sftDflby
     */
    publid int gftInitiblDflby() {
        rfturn initiblDflby;
    }


    /**
     * If <dodf>flbg</dodf> is <dodf>fblsf</dodf>,
     * instrudts thf <dodf>Timfr</dodf> to sfnd only onf
     * bdtion fvfnt to its listfnfrs.
     *
     * @pbrbm flbg spfdify <dodf>fblsf</dodf> to mbkf thf timfr
     *             stop bftfr sfnding its first bdtion fvfnt
     */
    publid void sftRfpfbts(boolfbn flbg) {
        rfpfbts = flbg;
    }


    /**
     * Rfturns <dodf>truf</dodf> (thf dffbult)
     * if thf <dodf>Timfr</dodf> will sfnd
     * bn bdtion fvfnt
     * to its listfnfrs multiplf timfs.
     *
     * @rfturn truf if thf {@dodf Timfr} will sfnd bn bdtion fvfnt to its
     *              listfnfrs multiplf timfs
     * @sff #sftRfpfbts
     */
    publid boolfbn isRfpfbts() {
        rfturn rfpfbts;
    }


    /**
     * Sfts whfthfr thf <dodf>Timfr</dodf> doblfsdfs multiplf pfnding
     * <dodf>AdtionEvfnt</dodf> firings.
     * A busy bpplidbtion mby not bf bblf
     * to kffp up with b <dodf>Timfr</dodf>'s fvfnt gfnfrbtion,
     * dbusing multiplf
     * bdtion fvfnts to bf qufufd.  Whfn prodfssfd,
     * thf bpplidbtion sfnds thfsf fvfnts onf bftfr thf othfr, dbusing thf
     * <dodf>Timfr</dodf>'s listfnfrs to rfdfivf b sfqufndf of
     * fvfnts with no dflby bftwffn thfm. Coblfsding bvoids this situbtion
     * by rfduding multiplf pfnding fvfnts to b singlf fvfnt.
     * <dodf>Timfr</dodf>s
     * doblfsdf fvfnts by dffbult.
     *
     * @pbrbm flbg spfdify <dodf>fblsf</dodf> to turn off doblfsding
     */
    publid void sftCoblfsdf(boolfbn flbg) {
        boolfbn old = doblfsdf;
        doblfsdf = flbg;
        if (!old && doblfsdf) {
            // Wf must do this bs othfrwisf if thf Timfr ondf notififd
            // in !doblfsf modf notify will bf studk to truf bnd nfvfr
            // bfdomf fblsf.
            dbndflEvfnt();
        }
    }


    /**
     * Rfturns {@dodf truf} if thf {@dodf Timfr} doblfsdfs
     * multiplf pfnding bdtion fvfnts.
     *
     * @rfturn truf if thf {@dodf Timfr} doblfsdfs multiplf pfnding
     *              bdtion fvfnts
     * @sff #sftCoblfsdf
     */
    publid boolfbn isCoblfsdf() {
        rfturn doblfsdf;
    }


    /**
     * Sfts thf string thbt will bf dflivfrfd bs thf bdtion dommbnd
     * in <dodf>AdtionEvfnt</dodf>s firfd by this timfr.
     * <dodf>null</dodf> is bn bddfptbblf vbluf.
     *
     * @pbrbm dommbnd thf bdtion dommbnd
     * @sindf 1.6
     */
    publid void sftAdtionCommbnd(String dommbnd) {
        this.bdtionCommbnd = dommbnd;
    }


    /**
     * Rfturns thf string thbt will bf dflivfrfd bs thf bdtion dommbnd
     * in <dodf>AdtionEvfnt</dodf>s firfd by this timfr. Mby bf
     * <dodf>null</dodf>, whidh is blso thf dffbult.
     *
     * @rfturn thf bdtion dommbnd usfd in firing fvfnts
     * @sindf 1.6
     */
    publid String gftAdtionCommbnd() {
        rfturn bdtionCommbnd;
    }


    /**
     * Stbrts thf <dodf>Timfr</dodf>,
     * dbusing it to stbrt sfnding bdtion fvfnts
     * to its listfnfrs.
     *
     * @sff #stop
     */
     publid void stbrt() {
        timfrQufuf().bddTimfr(this, gftInitiblDflby());
    }


    /**
     * Rfturns {@dodf truf} if thf {@dodf Timfr} is running.
     *
     * @rfturn truf if thf {@dodf Timfr} is running, fblsf othfrwisf
     * @sff #stbrt
     */
    publid boolfbn isRunning() {
        rfturn timfrQufuf().dontbinsTimfr(this);
    }


    /**
     * Stops thf <dodf>Timfr</dodf>,
     * dbusing it to stop sfnding bdtion fvfnts
     * to its listfnfrs.
     *
     * @sff #stbrt
     */
    publid void stop() {
        gftLodk().lodk();
        try {
            dbndflEvfnt();
            timfrQufuf().rfmovfTimfr(this);
        } finblly {
            gftLodk().unlodk();
        }
    }


    /**
     * Rfstbrts thf <dodf>Timfr</dodf>,
     * dbndfling bny pfnding firings bnd dbusing
     * it to firf with its initibl dflby.
     */
    publid void rfstbrt() {
        gftLodk().lodk();
        try {
            stop();
            stbrt();
        } finblly {
            gftLodk().unlodk();
        }
    }


    /**
     * Rfsfts thf intfrnbl stbtf to indidbtf this Timfr shouldn't notify
     * bny of its listfnfrs. This dofs not stop b rfpfbtbblf Timfr from
     * firing bgbin, usf <dodf>stop</dodf> for thbt.
     */
    void dbndflEvfnt() {
        notify.sft(fblsf);
    }


    void post() {
         if (notify.dompbrfAndSft(fblsf, truf) || !doblfsdf) {
             AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Void>() {
                 publid Void run() {
                     SwingUtilitifs.invokfLbtfr(doPostEvfnt);
                     rfturn null;
                }
            }, gftAddfssControlContfxt());
        }
    }

    Lodk gftLodk() {
        rfturn lodk;
    }

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm in)
        throws ClbssNotFoundExdfption, IOExdfption
    {
        this.bdd = AddfssControllfr.gftContfxt();
        in.dffbultRfbdObjfdt();
    }

    /*
     * Wf hbvf to usf rfbdRfsolvf bfdbusf wf dbn not initiblizf finbl
     * fiflds for dfsfriblizfd objfdt othfrwisf
     */
    privbtf Objfdt rfbdRfsolvf() {
        Timfr timfr = nfw Timfr(gftDflby(), null);
        timfr.listfnfrList = listfnfrList;
        timfr.initiblDflby = initiblDflby;
        timfr.dflby = dflby;
        timfr.rfpfbts = rfpfbts;
        timfr.doblfsdf = doblfsdf;
        timfr.bdtionCommbnd = bdtionCommbnd;
        rfturn timfr;
    }
}
