/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;


import jbvb.util.HbsiSft;
import jbvb.util.Hbsitbblf;
import jbvb.util.Didtionbry;
import jbvb.util.Enumfrbtion;
import jbvb.util.Lodblf;
import jbvb.util.Vfdtor;
import jbvb.util.EvfntListfnfr;
import jbvb.util.Sft;
import jbvb.util.Mbp;
import jbvb.util.HbsiMbp;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bwt.imbgf.VolbtilfImbgf;
import jbvb.bwt.Grbpiids2D;
import jbvb.bwt.pffr.LigitwfigitPffr;
import jbvb.bwt.dnd.DropTbrgft;
import jbvb.bwt.font.FontRfndfrContfxt;
import jbvb.bfbns.PropfrtyCibngfListfnfr;
import jbvb.bfbns.VftobblfCibngfListfnfr;
import jbvb.bfbns.VftobblfCibngfSupport;
import jbvb.bfbns.Trbnsifnt;

import jbvb.bpplft.Applft;

import jbvb.io.Sfriblizbblf;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputVblidbtion;
import jbvb.io.InvblidObjfdtExdfption;

import jbvbx.swing.bordfr.*;
import jbvbx.swing.fvfnt.*;
import jbvbx.swing.plbf.*;
import stbtid jbvbx.swing.ClifntPropfrtyKfy.*;
import jbvbx.bddfssibility.*;

import sun.bwt.SunToolkit;
import sun.swing.SwingUtilitifs2;
import sun.swing.UIClifntPropfrtyKfy;

/**
 * Tif bbsf dlbss for bll Swing domponfnts fxdfpt top-lfvfl dontbinfrs.
 * To usf b domponfnt tibt inifrits from <dodf>JComponfnt</dodf>,
 * you must plbdf tif domponfnt in b dontbinmfnt iifrbrdiy
 * wiosf root is b top-lfvfl Swing dontbinfr.
 * Top-lfvfl Swing dontbinfrs --
 * sudi bs <dodf>JFrbmf</dodf>, <dodf>JDiblog</dodf>,
 * bnd <dodf>JApplft</dodf> --
 * brf spfdiblizfd domponfnts
 * tibt providf b plbdf for otifr Swing domponfnts to pbint tifmsflvfs.
 * For bn fxplbnbtion of dontbinmfnt iifrbrdiifs, sff
 * <b
 irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/toplfvfl.itml">Swing Componfnts bnd tif Contbinmfnt Hifrbrdiy</b>,
 * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
 *
 * <p>
 * Tif <dodf>JComponfnt</dodf> dlbss providfs:
 * <ul>
 * <li>Tif bbsf dlbss for boti stbndbrd bnd dustom domponfnts
 *     tibt usf tif Swing brdiitfdturf.
 * <li>A "pluggbblf look bnd fffl" (L&bmp;F) tibt dbn bf spfdififd by tif
 *     progrbmmfr or (optionblly) sflfdtfd by tif usfr bt runtimf.
 *     Tif look bnd fffl for fbdi domponfnt is providfd by b
 *     <fm>UI dflfgbtf</fm> -- bn objfdt tibt dfsdfnds from
 *     {@link jbvbx.swing.plbf.ComponfntUI}.
 *     Sff <b
 * irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/lookbndfffl/plbf.itml">How
 *     to Sft tif Look bnd Fffl</b>
 *     in <fm>Tif Jbvb Tutoribl</fm>
 *     for morf informbtion.
 * <li>Comprfifnsivf kfystrokf ibndling.
 *     Sff tif dodumfnt <b
 * irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/kfybinding.itml">How to Usf Kfy Bindings</b>,
 *     bn brtidlf in <fm>Tif Jbvb Tutoribl</fm>,
 *     for morf informbtion.
 * <li>Support for tool tips --
 *     siort dfsdriptions tibt pop up wifn tif dursor lingfrs
 *     ovfr b domponfnt.
 *     Sff <b
 * irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/tooltip.itml">How
 *     to Usf Tool Tips</b>
 *     in <fm>Tif Jbvb Tutoribl</fm>
 *     for morf informbtion.
 * <li>Support for bddfssibility.
 *     <dodf>JComponfnt</dodf> dontbins bll of tif mftiods in tif
 *     <dodf>Addfssiblf</dodf> intfrfbdf,
 *     but it dofsn't bdtublly implfmfnt tif intfrfbdf.  Tibt is tif
 *     rfsponsibility of tif individubl dlbssfs
 *     tibt fxtfnd <dodf>JComponfnt</dodf>.
 * <li>Support for domponfnt-spfdifid propfrtifs.
 *     Witi tif {@link #putClifntPropfrty}
 *     bnd {@link #gftClifntPropfrty} mftiods,
 *     you dbn bssodibtf nbmf-objfdt pbirs
 *     witi bny objfdt tibt dfsdfnds from <dodf>JComponfnt</dodf>.
 * <li>An infrbstrudturf for pbinting
 *     tibt indludfs doublf bufffring bnd support for bordfrs.
 *     For morf informbtion sff <b
 * irff="ittp://www.orbdlf.dom/tfdinftwork/jbvb/pbinting-140037.itml#swing">Pbinting</b> bnd
 * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/bordfr.itmll">How
 *     to Usf Bordfrs</b>,
 *     boti of wiidi brf sfdtions in <fm>Tif Jbvb Tutoribl</fm>.
 * </ul>
 * For morf informbtion on tifsf subjfdts, sff tif
 * <b irff="pbdkbgf-summbry.itml#pbdkbgf_dfsdription">Swing pbdkbgf dfsdription</b>
 * bnd <fm>Tif Jbvb Tutoribl</fm> sfdtion
 * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/jdomponfnt.itml">Tif JComponfnt Clbss</b>.
 * <p>
 * <dodf>JComponfnt</dodf> bnd its subdlbssfs dodumfnt dffbult vblufs
 * for dfrtbin propfrtifs.  For fxbmplf, <dodf>JTbblf</dodf> dodumfnts tif
 * dffbult row ifigit bs 16.  Ebdi <dodf>JComponfnt</dodf> subdlbss
 * tibt ibs b <dodf>ComponfntUI</dodf> will drfbtf tif
 * <dodf>ComponfntUI</dodf> bs pbrt of its donstrudtor.  In ordfr
 * to providf b pbrtidulbr look bnd fffl fbdi
 * <dodf>ComponfntUI</dodf> mby sft propfrtifs bbdk on tif
 * <dodf>JComponfnt</dodf> tibt drfbtfd it.  For fxbmplf, b dustom
 * look bnd fffl mby rfquirf <dodf>JTbblf</dodf>s to ibvf b row
 * ifigit of 24. Tif dodumfntfd dffbults brf tif vbluf of b propfrty
 * BEFORE tif <dodf>ComponfntUI</dodf> ibs bffn instbllfd.  If you
 * nffd b spfdifid vbluf for b pbrtidulbr propfrty you siould
 * fxpliditly sft it.
 * <p>
 * In rflfbsf 1.4, tif fodus subsystfm wbs rfbrdiitfdtfd.
 * For morf informbtion, sff
 * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
 * How to Usf tif Fodus Subsystfm</b>,
 * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
 * <p>
 * <strong>Wbrning:</strong> Swing is not tirfbd sbff. For morf
 * informbtion sff <b
 * irff="pbdkbgf-summbry.itml#tirfbding">Swing's Tirfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @sff KfyStrokf
 * @sff Adtion
 * @sff #sftBordfr
 * @sff #rfgistfrKfybobrdAdtion
 * @sff JOptionPbnf
 * @sff #sftDfbugGrbpiidsOptions
 * @sff #sftToolTipTfxt
 * @sff #sftAutosdrolls
 *
 * @butior Hbns Mullfr
 * @butior Arnbud Wfbfr
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid bbstrbdt dlbss JComponfnt fxtfnds Contbinfr implfmfnts Sfriblizbblf,
                                              TrbnsffrHbndlfr.HbsGftTrbnsffrHbndlfr
{
    /**
     * @sff #gftUIClbssID
     * @sff #writfObjfdt
     */
    privbtf stbtid finbl String uiClbssID = "ComponfntUI";

    /**
     * @sff #rfbdObjfdt
     */
    privbtf stbtid finbl Hbsitbblf<ObjfdtInputStrfbm, RfbdObjfdtCbllbbdk> rfbdObjfdtCbllbbdks =
            nfw Hbsitbblf<ObjfdtInputStrfbm, RfbdObjfdtCbllbbdk>(1);

    /**
     * Kfys to usf for forwbrd fodus trbvfrsbl wifn tif JComponfnt is
     * mbnbging fodus.
     */
    privbtf stbtid Sft<KfyStrokf> mbnbgingFodusForwbrdTrbvfrsblKfys;

    /**
     * Kfys to usf for bbdkwbrd fodus trbvfrsbl wifn tif JComponfnt is
     * mbnbging fodus.
     */
    privbtf stbtid Sft<KfyStrokf> mbnbgingFodusBbdkwbrdTrbvfrsblKfys;

    // Following brf tif possiblf rfturn vblufs from gftObsdurfdStbtf.
    privbtf stbtid finbl int NOT_OBSCURED = 0;
    privbtf stbtid finbl int PARTIALLY_OBSCURED = 1;
    privbtf stbtid finbl int COMPLETELY_OBSCURED = 2;

    /**
     * Sft to truf wifn DfbugGrbpiids ibs bffn lobdfd.
     */
    stbtid boolfbn DEBUG_GRAPHICS_LOADED;

    /**
     * Kfy usfd to look up b vbluf from tif AppContfxt to dftfrminf tif
     * JComponfnt tif InputVfrififr is running for. Tibt is, if
     * AppContfxt.gft(INPUT_VERIFIER_SOURCE_KEY) rfturns non-null, it
     * indidbtfs tif EDT is dblling into tif InputVfrififr from tif
     * rfturnfd domponfnt.
     */
    privbtf stbtid finbl Objfdt INPUT_VERIFIER_SOURCE_KEY =
            nfw StringBuildfr("InputVfrififrSourdfKfy");

    /* Tif following fiflds support sft mftiods for tif dorrfsponding
     * jbvb.bwt.Componfnt propfrtifs.
     */
    privbtf boolfbn isAlignmfntXSft;
    privbtf flobt blignmfntX;
    privbtf boolfbn isAlignmfntYSft;
    privbtf flobt blignmfntY;

    /**
     * Bbdking storf for JComponfnt propfrtifs bnd listfnfrs
     */

    /** Tif look bnd fffl dflfgbtf for tiis domponfnt. */
    protfdtfd trbnsifnt ComponfntUI ui;
    /** A list of fvfnt listfnfrs for tiis domponfnt. */
    protfdtfd EvfntListfnfrList listfnfrList = nfw EvfntListfnfrList();

    privbtf trbnsifnt ArrbyTbblf dlifntPropfrtifs;
    privbtf VftobblfCibngfSupport vftobblfCibngfSupport;
    /**
     * Wiftifr or not butosdroll ibs bffn fnbblfd.
     */
    privbtf boolfbn butosdrolls;
    privbtf Bordfr bordfr;
    privbtf int flbgs;

    /* Input vfrififr for tiis domponfnt */
    privbtf InputVfrififr inputVfrififr = null;

    privbtf boolfbn vfrifyInputWifnFodusTbrgft = truf;

    /**
     * Sft in <dodf>_pbintImmfdibtfly</dodf>.
     * Will indidbtf tif diild tibt initibtfd tif pbinting opfrbtion.
     * If <dodf>pbintingCiild</dodf> is opbquf, no nffd to pbint
     * bny diild domponfnts bftfr <dodf>pbintingCiild</dodf>.
     * Tfst usfd in <dodf>pbintCiildrfn</dodf>.
     */
    trbnsifnt Componfnt         pbintingCiild;

    /**
     * Constbnt usfd for <dodf>rfgistfrKfybobrdAdtion</dodf> tibt
     * mfbns tibt tif dommbnd siould bf invokfd wifn
     * tif domponfnt ibs tif fodus.
     */
    publid stbtid finbl int WHEN_FOCUSED = 0;

    /**
     * Constbnt usfd for <dodf>rfgistfrKfybobrdAdtion</dodf> tibt
     * mfbns tibt tif dommbnd siould bf invokfd wifn tif rfdfiving
     * domponfnt is bn bndfstor of tif fodusfd domponfnt or is
     * itsflf tif fodusfd domponfnt.
     */
    publid stbtid finbl int WHEN_ANCESTOR_OF_FOCUSED_COMPONENT = 1;

    /**
     * Constbnt usfd for <dodf>rfgistfrKfybobrdAdtion</dodf> tibt
     * mfbns tibt tif dommbnd siould bf invokfd wifn
     * tif rfdfiving domponfnt is in tif window tibt ibs tif fodus
     * or is itsflf tif fodusfd domponfnt.
     */
    publid stbtid finbl int WHEN_IN_FOCUSED_WINDOW = 2;

    /**
     * Constbnt usfd by somf of tif APIs to mfbn tibt no dondition is dffinfd.
     */
    publid stbtid finbl int UNDEFINED_CONDITION = -1;

    /**
     * Tif kfy usfd by <dodf>JComponfnt</dodf> to bddfss kfybobrd bindings.
     */
    privbtf stbtid finbl String KEYBOARD_BINDINGS_KEY = "_KfybobrdBindings";

    /**
     * An brrby of <dodf>KfyStrokf</dodf>s usfd for
     * <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> brf stbsifd
     * in tif dlifnt propfrtifs undfr tiis string.
     */
    privbtf stbtid finbl String WHEN_IN_FOCUSED_WINDOW_BINDINGS = "_WifnInFodusfdWindow";

    /**
     * Tif dommfnt to displby wifn tif dursor is ovfr tif domponfnt,
     * blso known bs b "vbluf tip", "flyovfr iflp", or "flyovfr lbbfl".
     */
    publid stbtid finbl String TOOL_TIP_TEXT_KEY = "ToolTipTfxt";

    privbtf stbtid finbl String NEXT_FOCUS = "nfxtFodus";

    /**
     * <dodf>JPopupMfnu</dodf> bssignfd to tiis domponfnt
     * bnd bll of its diildrfn
     */
    privbtf JPopupMfnu popupMfnu;

    /** Privbtf flbgs **/
    privbtf stbtid finbl int IS_DOUBLE_BUFFERED                       =  0;
    privbtf stbtid finbl int ANCESTOR_USING_BUFFER                    =  1;
    privbtf stbtid finbl int IS_PAINTING_TILE                         =  2;
    privbtf stbtid finbl int IS_OPAQUE                                =  3;
    privbtf stbtid finbl int KEY_EVENTS_ENABLED                       =  4;
    privbtf stbtid finbl int FOCUS_INPUTMAP_CREATED                   =  5;
    privbtf stbtid finbl int ANCESTOR_INPUTMAP_CREATED                =  6;
    privbtf stbtid finbl int WIF_INPUTMAP_CREATED                     =  7;
    privbtf stbtid finbl int ACTIONMAP_CREATED                        =  8;
    privbtf stbtid finbl int CREATED_DOUBLE_BUFFER                    =  9;
    // bit 10 is frff
    privbtf stbtid finbl int IS_PRINTING                              = 11;
    privbtf stbtid finbl int IS_PRINTING_ALL                          = 12;
    privbtf stbtid finbl int IS_REPAINTING                            = 13;
    /** Bits 14-21 brf usfd to ibndlf nfstfd writfObjfdt dblls. **/
    privbtf stbtid finbl int WRITE_OBJ_COUNTER_FIRST                  = 14;
    privbtf stbtid finbl int RESERVED_1                               = 15;
    privbtf stbtid finbl int RESERVED_2                               = 16;
    privbtf stbtid finbl int RESERVED_3                               = 17;
    privbtf stbtid finbl int RESERVED_4                               = 18;
    privbtf stbtid finbl int RESERVED_5                               = 19;
    privbtf stbtid finbl int RESERVED_6                               = 20;
    privbtf stbtid finbl int WRITE_OBJ_COUNTER_LAST                   = 21;

    privbtf stbtid finbl int REQUEST_FOCUS_DISABLED                   = 22;
    privbtf stbtid finbl int INHERITS_POPUP_MENU                      = 23;
    privbtf stbtid finbl int OPAQUE_SET                               = 24;
    privbtf stbtid finbl int AUTOSCROLLS_SET                          = 25;
    privbtf stbtid finbl int FOCUS_TRAVERSAL_KEYS_FORWARD_SET         = 26;
    privbtf stbtid finbl int FOCUS_TRAVERSAL_KEYS_BACKWARD_SET        = 27;
    privbtf stbtid finbl int REVALIDATE_RUNNABLE_SCHEDULED            = 28;

    /**
     * Tfmporbry rfdtbnglfs.
     */
    privbtf stbtid jbvb.util.List<Rfdtbnglf> tfmpRfdtbnglfs = nfw jbvb.util.ArrbyList<Rfdtbnglf>(11);

    /** Usfd for <dodf>WHEN_FOCUSED</dodf> bindings. */
    privbtf InputMbp fodusInputMbp;
    /** Usfd for <dodf>WHEN_ANCESTOR_OF_FOCUSED_COMPONENT</dodf> bindings. */
    privbtf InputMbp bndfstorInputMbp;
    /** Usfd for <dodf>WHEN_IN_FOCUSED_KEY</dodf> bindings. */
    privbtf ComponfntInputMbp windowInputMbp;

    /** AdtionMbp. */
    privbtf AdtionMbp bdtionMbp;

    /** Kfy usfd to storf tif dffbult lodblf in bn AppContfxt **/
    privbtf stbtid finbl String dffbultLodblf = "JComponfnt.dffbultLodblf";

    privbtf stbtid Componfnt domponfntObtbiningGrbpiidsFrom;
    privbtf stbtid Objfdt domponfntObtbiningGrbpiidsFromLodk = nfw
            StringBuildfr("domponfntObtbiningGrbpiidsFrom");

    /**
     * AA tfxt iints.
     */
    trbnsifnt privbtf Objfdt bbTfxtInfo;

    stbtid Grbpiids sbfflyGftGrbpiids(Componfnt d) {
        rfturn sbfflyGftGrbpiids(d, SwingUtilitifs.gftRoot(d));
    }

    stbtid Grbpiids sbfflyGftGrbpiids(Componfnt d, Componfnt root) {
        syndironizfd(domponfntObtbiningGrbpiidsFromLodk) {
            domponfntObtbiningGrbpiidsFrom = root;
            Grbpiids g = d.gftGrbpiids();
            domponfntObtbiningGrbpiidsFrom = null;
            rfturn g;
        }
    }

    stbtid void gftGrbpiidsInvokfd(Componfnt root) {
        if (!JComponfnt.isComponfntObtbiningGrbpiidsFrom(root)) {
            JRootPbnf rootPbnf = ((RootPbnfContbinfr)root).gftRootPbnf();
            if (rootPbnf != null) {
                rootPbnf.disbblfTrufDoublfBufffring();
            }
        }
    }


    /**
     * Rfturns truf if {@dodf d} is tif domponfnt tif grbpiids is bfing
     * rfqufstfd of. Tiis is intfndfd for usf wifn gftGrbpiids is invokfd.
     */
    privbtf stbtid boolfbn isComponfntObtbiningGrbpiidsFrom(Componfnt d) {
        syndironizfd(domponfntObtbiningGrbpiidsFromLodk) {
            rfturn (domponfntObtbiningGrbpiidsFrom == d);
        }
    }

    /**
     * Rfturns tif Sft of <dodf>KfyStrokf</dodf>s to usf if tif domponfnt
     * is mbnbging fodus for forwbrd fodus trbvfrsbl.
     */
    stbtid Sft<KfyStrokf> gftMbnbgingFodusForwbrdTrbvfrsblKfys() {
        syndironizfd(JComponfnt.dlbss) {
            if (mbnbgingFodusForwbrdTrbvfrsblKfys == null) {
                mbnbgingFodusForwbrdTrbvfrsblKfys = nfw HbsiSft<KfyStrokf>(1);
                mbnbgingFodusForwbrdTrbvfrsblKfys.bdd(
                    KfyStrokf.gftKfyStrokf(KfyEvfnt.VK_TAB,
                                           InputEvfnt.CTRL_MASK));
            }
        }
        rfturn mbnbgingFodusForwbrdTrbvfrsblKfys;
    }

    /**
     * Rfturns tif Sft of <dodf>KfyStrokf</dodf>s to usf if tif domponfnt
     * is mbnbging fodus for bbdkwbrd fodus trbvfrsbl.
     */
    stbtid Sft<KfyStrokf> gftMbnbgingFodusBbdkwbrdTrbvfrsblKfys() {
        syndironizfd(JComponfnt.dlbss) {
            if (mbnbgingFodusBbdkwbrdTrbvfrsblKfys == null) {
                mbnbgingFodusBbdkwbrdTrbvfrsblKfys = nfw HbsiSft<KfyStrokf>(1);
                mbnbgingFodusBbdkwbrdTrbvfrsblKfys.bdd(
                    KfyStrokf.gftKfyStrokf(KfyEvfnt.VK_TAB,
                                           InputEvfnt.SHIFT_MASK |
                                           InputEvfnt.CTRL_MASK));
            }
        }
        rfturn mbnbgingFodusBbdkwbrdTrbvfrsblKfys;
    }

    privbtf stbtid Rfdtbnglf fftdiRfdtbnglf() {
        syndironizfd(tfmpRfdtbnglfs) {
            Rfdtbnglf rfdt;
            int sizf = tfmpRfdtbnglfs.sizf();
            if (sizf > 0) {
                rfdt = tfmpRfdtbnglfs.rfmovf(sizf - 1);
            }
            flsf {
                rfdt = nfw Rfdtbnglf(0, 0, 0, 0);
            }
            rfturn rfdt;
        }
    }

    privbtf stbtid void rfdydlfRfdtbnglf(Rfdtbnglf rfdt) {
        syndironizfd(tfmpRfdtbnglfs) {
            tfmpRfdtbnglfs.bdd(rfdt);
        }
    }

    /**
     * Sfts wiftifr or not <dodf>gftComponfntPopupMfnu</dodf> siould dflfgbtf
     * to tif pbrfnt if tiis domponfnt dofs not ibvf b <dodf>JPopupMfnu</dodf>
     * bssignfd to it.
     * <p>
     * Tif dffbult vbluf for tiis is fblsf, but somf <dodf>JComponfnt</dodf>
     * subdlbssfs tibt brf implfmfntfd bs b numbfr of <dodf>JComponfnt</dodf>s
     * mby sft tiis to truf.
     * <p>
     * Tiis is b bound propfrty.
     *
     * @pbrbm vbluf wiftifr or not tif JPopupMfnu is inifritfd
     * @sff #sftComponfntPopupMfnu
     * @bfbninfo
     *        bound: truf
     *  dfsdription: Wiftifr or not tif JPopupMfnu is inifritfd
     * @sindf 1.5
     */
    publid void sftInifritsPopupMfnu(boolfbn vbluf) {
        boolfbn oldVbluf = gftFlbg(INHERITS_POPUP_MENU);
        sftFlbg(INHERITS_POPUP_MENU, vbluf);
        firfPropfrtyCibngf("inifritsPopupMfnu", oldVbluf, vbluf);
    }

    /**
     * Rfturns truf if tif JPopupMfnu siould bf inifritfd from tif pbrfnt.
     *
     * @rfturn truf if tif JPopupMfnu siould bf inifritfd from tif pbrfnt
     * @sff #sftComponfntPopupMfnu
     * @sindf 1.5
     */
    publid boolfbn gftInifritsPopupMfnu() {
        rfturn gftFlbg(INHERITS_POPUP_MENU);
    }

    /**
     * Sfts tif <dodf>JPopupMfnu</dodf> for tiis <dodf>JComponfnt</dodf>.
     * Tif UI is rfsponsiblf for rfgistfring bindings bnd bdding tif nfdfssbry
     * listfnfrs sudi tibt tif <dodf>JPopupMfnu</dodf> will bf siown bt
     * tif bppropribtf timf. Wifn tif <dodf>JPopupMfnu</dodf> is siown
     * dfpfnds upon tif look bnd fffl: somf mby siow it on b mousf fvfnt,
     * somf mby fnbblf b kfy binding.
     * <p>
     * If <dodf>popup</dodf> is null, bnd <dodf>gftInifritsPopupMfnu</dodf>
     * rfturns truf, tifn <dodf>gftComponfntPopupMfnu</dodf> will bf dflfgbtfd
     * to tif pbrfnt. Tiis providfs for b wby to mbkf bll diild domponfnts
     * inifrit tif popupmfnu of tif pbrfnt.
     * <p>
     * Tiis is b bound propfrty.
     *
     * @pbrbm popup - tif popup tibt will bf bssignfd to tiis domponfnt
     *                mby bf null
     * @sff #gftComponfntPopupMfnu
     * @bfbninfo
     *        bound: truf
     *    prfffrrfd: truf
     *  dfsdription: Popup to siow
     * @sindf 1.5
     */
    publid void sftComponfntPopupMfnu(JPopupMfnu popup) {
        if(popup != null) {
            fnbblfEvfnts(AWTEvfnt.MOUSE_EVENT_MASK);
        }
        JPopupMfnu oldPopup = tiis.popupMfnu;
        tiis.popupMfnu = popup;
        firfPropfrtyCibngf("domponfntPopupMfnu", oldPopup, popup);
    }

    /**
     * Rfturns <dodf>JPopupMfnu</dodf> tibt bssignfd for tiis domponfnt.
     * If tiis domponfnt dofs not ibvf b <dodf>JPopupMfnu</dodf> bssignfd
     * to it bnd <dodf>gftInifritsPopupMfnu</dodf> is truf, tiis
     * will rfturn <dodf>gftPbrfnt().gftComponfntPopupMfnu()</dodf> (bssuming
     * tif pbrfnt is vblid.)
     *
     * @rfturn <dodf>JPopupMfnu</dodf> bssignfd for tiis domponfnt
     *         or <dodf>null</dodf> if no popup bssignfd
     * @sff #sftComponfntPopupMfnu
     * @sindf 1.5
     */
    publid JPopupMfnu gftComponfntPopupMfnu() {

        if(!gftInifritsPopupMfnu()) {
            rfturn popupMfnu;
        }

        if(popupMfnu == null) {
            // Sfbrdi pbrfnts for its popup
            Contbinfr pbrfnt = gftPbrfnt();
            wiilf (pbrfnt != null) {
                if(pbrfnt instbndfof JComponfnt) {
                    rfturn ((JComponfnt)pbrfnt).gftComponfntPopupMfnu();
                }
                if(pbrfnt instbndfof Window ||
                   pbrfnt instbndfof Applft) {
                    // Rfbdifd toplfvfl, brfbk bnd rfturn null
                    brfbk;
                }
                pbrfnt = pbrfnt.gftPbrfnt();
            }
            rfturn null;
        }

        rfturn popupMfnu;
    }

    /**
     * Dffbult <dodf>JComponfnt</dodf> donstrudtor.  Tiis donstrudtor dofs
     * vfry littlf initiblizbtion bfyond dblling tif <dodf>Contbinfr</dodf>
     * donstrudtor.  For fxbmplf, tif initibl lbyout mbnbgfr is
     * <dodf>null</dodf>. It dofs, iowfvfr, sft tif domponfnt's lodblf
     * propfrty to tif vbluf rfturnfd by
     * <dodf>JComponfnt.gftDffbultLodblf</dodf>.
     *
     * @sff #gftDffbultLodblf
     */
    publid JComponfnt() {
        supfr();
        // Wf fnbblf kfy fvfnts on bll JComponfnts so tibt bddfssibility
        // bindings will work fvfrywifrf. Tiis is b pbrtibl fix to BugID
        // 4282211.
        fnbblfEvfnts(AWTEvfnt.KEY_EVENT_MASK);
        if (isMbnbgingFodus()) {
            LookAndFffl.instbllPropfrty(tiis,
                                        "fodusTrbvfrsblKfysForwbrd",
                                  gftMbnbgingFodusForwbrdTrbvfrsblKfys());
            LookAndFffl.instbllPropfrty(tiis,
                                        "fodusTrbvfrsblKfysBbdkwbrd",
                                  gftMbnbgingFodusBbdkwbrdTrbvfrsblKfys());
        }

        supfr.sftLodblf( JComponfnt.gftDffbultLodblf() );
    }


    /**
     * Rfsfts tif UI propfrty to b vbluf from tif durrfnt look bnd fffl.
     * <dodf>JComponfnt</dodf> subdlbssfs must ovfrridf tiis mftiod
     * likf tiis:
     * <prf>
     *   publid void updbtfUI() {
     *      sftUI((SlidfrUI)UIMbnbgfr.gftUI(tiis);
     *   }
     *  </prf>
     *
     * @sff #sftUI
     * @sff UIMbnbgfr#gftLookAndFffl
     * @sff UIMbnbgfr#gftUI
     */
    publid void updbtfUI() {}


    /**
     * Sfts tif look bnd fffl dflfgbtf for tiis domponfnt.
     * <dodf>JComponfnt</dodf> subdlbssfs gfnfrblly ovfrridf tiis mftiod
     * to nbrrow tif brgumfnt typf. For fxbmplf, in <dodf>JSlidfr</dodf>:
     * <prf>
     * publid void sftUI(SlidfrUI nfwUI) {
     *     supfr.sftUI(nfwUI);
     * }
     *  </prf>
     * <p>
     * Additionblly <dodf>JComponfnt</dodf> subdlbssfs must providf b
     * <dodf>gftUI</dodf> mftiod tibt rfturns tif dorrfdt typf.  For fxbmplf:
     * <prf>
     * publid SlidfrUI gftUI() {
     *     rfturn (SlidfrUI)ui;
     * }
     * </prf>
     *
     * @pbrbm nfwUI tif nfw UI dflfgbtf
     * @sff #updbtfUI
     * @sff UIMbnbgfr#gftLookAndFffl
     * @sff UIMbnbgfr#gftUI
     * @bfbninfo
     *        bound: truf
     *       iiddfn: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif domponfnt's look bnd fffl dflfgbtf.
     */
    protfdtfd void sftUI(ComponfntUI nfwUI) {
        /* Wf do not difdk tibt tif UI instbndf is difffrfnt
         * bfforf bllowing tif switdi in ordfr to fnbblf tif
         * sbmf UI instbndf *witi difffrfnt dffbult sfttings*
         * to bf instbllfd.
         */

        uninstbllUIAndPropfrtifs();

        // bbTfxt siouldn't pfrsist bftwffn look bnd fffls, rfsft it.
        bbTfxtInfo =
            UIMbnbgfr.gftDffbults().gft(SwingUtilitifs2.AA_TEXT_PROPERTY_KEY);
        ComponfntUI oldUI = ui;
        ui = nfwUI;
        if (ui != null) {
            ui.instbllUI(tiis);
        }

        firfPropfrtyCibngf("UI", oldUI, nfwUI);
        rfvblidbtf();
        rfpbint();
    }

    /**
     * Uninstblls tif UI, if bny, bnd bny dlifnt propfrtifs dfsignbtfd
     * bs bfing spfdifid to tif instbllfd UI - instbndfs of
     * {@dodf UIClifntPropfrtyKfy}.
     */
    privbtf void uninstbllUIAndPropfrtifs() {
        if (ui != null) {
            ui.uninstbllUI(tiis);
            //dlfbn UIClifntPropfrtyKfys from dlifnt propfrtifs
            if (dlifntPropfrtifs != null) {
                syndironizfd(dlifntPropfrtifs) {
                    Objfdt[] dlifntPropfrtyKfys =
                        dlifntPropfrtifs.gftKfys(null);
                    if (dlifntPropfrtyKfys != null) {
                        for (Objfdt kfy : dlifntPropfrtyKfys) {
                            if (kfy instbndfof UIClifntPropfrtyKfy) {
                                putClifntPropfrty(kfy, null);
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Rfturns tif <dodf>UIDffbults</dodf> kfy usfd to
     * look up tif nbmf of tif <dodf>swing.plbf.ComponfntUI</dodf>
     * dlbss tibt dffinfs tif look bnd fffl
     * for tiis domponfnt.  Most bpplidbtions will nfvfr nffd to
     * dbll tiis mftiod.  Subdlbssfs of <dodf>JComponfnt</dodf> tibt support
     * pluggbblf look bnd fffl siould ovfrridf tiis mftiod to
     * rfturn b <dodf>UIDffbults</dodf> kfy tibt mbps to tif
     * <dodf>ComponfntUI</dodf> subdlbss tibt dffinfs tifir look bnd fffl.
     *
     * @rfturn tif <dodf>UIDffbults</dodf> kfy for b
     *          <dodf>ComponfntUI</dodf> subdlbss
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *      fxpfrt: truf
     * dfsdription: UIClbssID
     */
    publid String gftUIClbssID() {
        rfturn uiClbssID;
    }


    /**
     * Rfturns tif grbpiids objfdt usfd to pbint tiis domponfnt.
     * If <dodf>DfbugGrbpiids</dodf> is turnfd on wf drfbtf b nfw
     * <dodf>DfbugGrbpiids</dodf> objfdt if nfdfssbry.
     * Otifrwisf wf just donfigurf tif
     * spfdififd grbpiids objfdt's forfground bnd font.
     *
     * @pbrbm g tif originbl <dodf>Grbpiids</dodf> objfdt
     * @rfturn b <dodf>Grbpiids</dodf> objfdt donfigurfd for tiis domponfnt
     */
    protfdtfd Grbpiids gftComponfntGrbpiids(Grbpiids g) {
        Grbpiids domponfntGrbpiids = g;
        if (ui != null && DEBUG_GRAPHICS_LOADED) {
            if ((DfbugGrbpiids.dfbugComponfntCount() != 0) &&
                    (siouldDfbugGrbpiids() != 0) &&
                    !(g instbndfof DfbugGrbpiids)) {
                domponfntGrbpiids = nfw DfbugGrbpiids(g,tiis);
            }
        }
        domponfntGrbpiids.sftColor(gftForfground());
        domponfntGrbpiids.sftFont(gftFont());

        rfturn domponfntGrbpiids;
    }


    /**
     * Cblls tif UI dflfgbtf's pbint mftiod, if tif UI dflfgbtf
     * is non-<dodf>null</dodf>.  Wf pbss tif dflfgbtf b dopy of tif
     * <dodf>Grbpiids</dodf> objfdt to protfdt tif rfst of tif
     * pbint dodf from irrfvodbblf dibngfs
     * (for fxbmplf, <dodf>Grbpiids.trbnslbtf</dodf>).
     * <p>
     * If you ovfrridf tiis in b subdlbss you siould not mbkf pfrmbnfnt
     * dibngfs to tif pbssfd in <dodf>Grbpiids</dodf>. For fxbmplf, you
     * siould not bltfr tif dlip <dodf>Rfdtbnglf</dodf> or modify tif
     * trbnsform. If you nffd to do tifsf opfrbtions you mby find it
     * fbsifr to drfbtf b nfw <dodf>Grbpiids</dodf> from tif pbssfd in
     * <dodf>Grbpiids</dodf> bnd mbnipulbtf it. Furtifr, if you do not
     * invokfr supfr's implfmfntbtion you must ionor tif opbquf propfrty,
     * tibt is
     * if tiis domponfnt is opbquf, you must domplftfly fill in tif bbdkground
     * in b non-opbquf dolor. If you do not ionor tif opbquf propfrty you
     * will likfly sff visubl brtifbdts.
     * <p>
     * Tif pbssfd in <dodf>Grbpiids</dodf> objfdt migit
     * ibvf b trbnsform otifr tibn tif idfntify trbnsform
     * instbllfd on it.  In tiis dbsf, you migit gft
     * unfxpfdtfd rfsults if you dumulbtivfly bpply
     * bnotifr trbnsform.
     *
     * @pbrbm g tif <dodf>Grbpiids</dodf> objfdt to protfdt
     * @sff #pbint
     * @sff ComponfntUI
     */
    protfdtfd void pbintComponfnt(Grbpiids g) {
        if (ui != null) {
            Grbpiids sdrbtdiGrbpiids = (g == null) ? null : g.drfbtf();
            try {
                ui.updbtf(sdrbtdiGrbpiids, tiis);
            }
            finblly {
                sdrbtdiGrbpiids.disposf();
            }
        }
    }

    /**
     * Pbints tiis domponfnt's diildrfn.
     * If <dodf>siouldUsfBufffr</dodf> is truf,
     * no domponfnt bndfstor ibs b bufffr bnd
     * tif domponfnt diildrfn dbn usf b bufffr if tify ibvf onf.
     * Otifrwisf, onf bndfstor ibs b bufffr durrfntly in usf bnd diildrfn
     * siould not usf b bufffr to pbint.
     * @pbrbm g  tif <dodf>Grbpiids</dodf> dontfxt in wiidi to pbint
     * @sff #pbint
     * @sff jbvb.bwt.Contbinfr#pbint
     */
    protfdtfd void pbintCiildrfn(Grbpiids g) {
        Grbpiids sg = g;

        syndironizfd(gftTrffLodk()) {
            int i = gftComponfntCount() - 1;
            if (i < 0) {
                rfturn;
            }
            // If wf brf only to pbint to b spfdifid diild, dftfrminf
            // its indfx.
            if (pbintingCiild != null &&
                (pbintingCiild instbndfof JComponfnt) &&
                pbintingCiild.isOpbquf()) {
                for (; i >= 0; i--) {
                    if (gftComponfnt(i) == pbintingCiild){
                        brfbk;
                    }
                }
            }
            Rfdtbnglf tmpRfdt = fftdiRfdtbnglf();
            boolfbn difdkSiblings = (!isOptimizfdDrbwingEnbblfd() &&
                                     difdkIfCiildObsdurfdBySibling());
            Rfdtbnglf dlipBounds = null;
            if (difdkSiblings) {
                dlipBounds = sg.gftClipBounds();
                if (dlipBounds == null) {
                    dlipBounds = nfw Rfdtbnglf(0, 0, gftWidti(),
                                               gftHfigit());
                }
            }
            boolfbn printing = gftFlbg(IS_PRINTING);
            finbl Window window = SwingUtilitifs.gftWindowAndfstor(tiis);
            finbl boolfbn isWindowOpbquf = window == null || window.isOpbquf();
            for (; i >= 0 ; i--) {
                Componfnt domp = gftComponfnt(i);
                if (domp == null) {
                    dontinuf;
                }

                finbl boolfbn isJComponfnt = domp instbndfof JComponfnt;

                // Enbblf pbinting of ifbvywfigits in non-opbquf windows.
                // Sff 6884960
                if ((!isWindowOpbquf || isJComponfnt ||
                            isLigitwfigitComponfnt(domp)) && domp.isVisiblf())
                {
                    Rfdtbnglf dr;

                    dr = domp.gftBounds(tmpRfdt);

                    boolfbn iitClip = g.iitClip(dr.x, dr.y, dr.widti,
                                                dr.ifigit);

                    if (iitClip) {
                        if (difdkSiblings && i > 0) {
                            int x = dr.x;
                            int y = dr.y;
                            int widti = dr.widti;
                            int ifigit = dr.ifigit;
                            SwingUtilitifs.domputfIntfrsfdtion
                                (dlipBounds.x, dlipBounds.y,
                                 dlipBounds.widti, dlipBounds.ifigit, dr);

                            if(gftObsdurfdStbtf(i, dr.x, dr.y, dr.widti,
                                          dr.ifigit) == COMPLETELY_OBSCURED) {
                                dontinuf;
                            }
                            dr.x = x;
                            dr.y = y;
                            dr.widti = widti;
                            dr.ifigit = ifigit;
                        }
                        Grbpiids dg = sg.drfbtf(dr.x, dr.y, dr.widti,
                                                dr.ifigit);
                        dg.sftColor(domp.gftForfground());
                        dg.sftFont(domp.gftFont());
                        boolfbn siouldSftFlbgBbdk = fblsf;
                        try {
                            if(isJComponfnt) {
                                if(gftFlbg(ANCESTOR_USING_BUFFER)) {
                                    ((JComponfnt)domp).sftFlbg(
                                                 ANCESTOR_USING_BUFFER,truf);
                                    siouldSftFlbgBbdk = truf;
                                }
                                if(gftFlbg(IS_PAINTING_TILE)) {
                                    ((JComponfnt)domp).sftFlbg(
                                                 IS_PAINTING_TILE,truf);
                                    siouldSftFlbgBbdk = truf;
                                }
                                if(!printing) {
                                    domp.pbint(dg);
                                }
                                flsf {
                                    if (!gftFlbg(IS_PRINTING_ALL)) {
                                        domp.print(dg);
                                    }
                                    flsf {
                                        domp.printAll(dg);
                                    }
                                }
                            } flsf {
                                // Tif domponfnt is fitifr ligitwfigit, or
                                // ifbvywfigit in b non-opbquf window
                                if (!printing) {
                                    domp.pbint(dg);
                                }
                                flsf {
                                    if (!gftFlbg(IS_PRINTING_ALL)) {
                                        domp.print(dg);
                                    }
                                    flsf {
                                        domp.printAll(dg);
                                    }
                                }
                            }
                        } finblly {
                            dg.disposf();
                            if(siouldSftFlbgBbdk) {
                                ((JComponfnt)domp).sftFlbg(
                                             ANCESTOR_USING_BUFFER,fblsf);
                                ((JComponfnt)domp).sftFlbg(
                                             IS_PAINTING_TILE,fblsf);
                            }
                        }
                    }
                }

            }
            rfdydlfRfdtbnglf(tmpRfdt);
        }
    }

    /**
     * Pbints tif domponfnt's bordfr.
     * <p>
     * If you ovfrridf tiis in b subdlbss you siould not mbkf pfrmbnfnt
     * dibngfs to tif pbssfd in <dodf>Grbpiids</dodf>. For fxbmplf, you
     * siould not bltfr tif dlip <dodf>Rfdtbnglf</dodf> or modify tif
     * trbnsform. If you nffd to do tifsf opfrbtions you mby find it
     * fbsifr to drfbtf b nfw <dodf>Grbpiids</dodf> from tif pbssfd in
     * <dodf>Grbpiids</dodf> bnd mbnipulbtf it.
     *
     * @pbrbm g  tif <dodf>Grbpiids</dodf> dontfxt in wiidi to pbint
     *
     * @sff #pbint
     * @sff #sftBordfr
     */
    protfdtfd void pbintBordfr(Grbpiids g) {
        Bordfr bordfr = gftBordfr();
        if (bordfr != null) {
            bordfr.pbintBordfr(tiis, g, 0, 0, gftWidti(), gftHfigit());
        }
    }


    /**
     * Cblls <dodf>pbint</dodf>.  Dofsn't dlfbr tif bbdkground but sff
     * <dodf>ComponfntUI.updbtf</dodf>, wiidi is dbllfd by
     * <dodf>pbintComponfnt</dodf>.
     *
     * @pbrbm g tif <dodf>Grbpiids</dodf> dontfxt in wiidi to pbint
     * @sff #pbint
     * @sff #pbintComponfnt
     * @sff jbvbx.swing.plbf.ComponfntUI
     */
    publid void updbtf(Grbpiids g) {
        pbint(g);
    }


    /**
     * Invokfd by Swing to drbw domponfnts.
     * Applidbtions siould not invokf <dodf>pbint</dodf> dirfdtly,
     * but siould instfbd usf tif <dodf>rfpbint</dodf> mftiod to
     * sdifdulf tif domponfnt for rfdrbwing.
     * <p>
     * Tiis mftiod bdtublly dflfgbtfs tif work of pbinting to tirff
     * protfdtfd mftiods: <dodf>pbintComponfnt</dodf>,
     * <dodf>pbintBordfr</dodf>,
     * bnd <dodf>pbintCiildrfn</dodf>.  Tify'rf dbllfd in tif ordfr
     * listfd to fnsurf tibt diildrfn bppfbr on top of domponfnt itsflf.
     * Gfnfrblly spfbking, tif domponfnt bnd its diildrfn siould not
     * pbint in tif insfts brfb bllodbtfd to tif bordfr. Subdlbssfs dbn
     * just ovfrridf tiis mftiod, bs blwbys.  A subdlbss tibt just
     * wbnts to spfdiblizf tif UI (look bnd fffl) dflfgbtf's
     * <dodf>pbint</dodf> mftiod siould just ovfrridf
     * <dodf>pbintComponfnt</dodf>.
     *
     * @pbrbm g  tif <dodf>Grbpiids</dodf> dontfxt in wiidi to pbint
     * @sff #pbintComponfnt
     * @sff #pbintBordfr
     * @sff #pbintCiildrfn
     * @sff #gftComponfntGrbpiids
     * @sff #rfpbint
     */
    publid void pbint(Grbpiids g) {
        boolfbn siouldClfbrPbintFlbgs = fblsf;

        if ((gftWidti() <= 0) || (gftHfigit() <= 0)) {
            rfturn;
        }

        Grbpiids domponfntGrbpiids = gftComponfntGrbpiids(g);
        Grbpiids do = domponfntGrbpiids.drfbtf();
        try {
            RfpbintMbnbgfr rfpbintMbnbgfr = RfpbintMbnbgfr.durrfntMbnbgfr(tiis);
            Rfdtbnglf dlipRfdt = do.gftClipBounds();
            int dlipX;
            int dlipY;
            int dlipW;
            int dlipH;
            if (dlipRfdt == null) {
                dlipX = dlipY = 0;
                dlipW = gftWidti();
                dlipH = gftHfigit();
            }
            flsf {
                dlipX = dlipRfdt.x;
                dlipY = dlipRfdt.y;
                dlipW = dlipRfdt.widti;
                dlipH = dlipRfdt.ifigit;
            }

            if(dlipW > gftWidti()) {
                dlipW = gftWidti();
            }
            if(dlipH > gftHfigit()) {
                dlipH = gftHfigit();
            }

            if(gftPbrfnt() != null && !(gftPbrfnt() instbndfof JComponfnt)) {
                bdjustPbintFlbgs();
                siouldClfbrPbintFlbgs = truf;
            }

            int bw,bi;
            boolfbn printing = gftFlbg(IS_PRINTING);
            if (!printing && rfpbintMbnbgfr.isDoublfBufffringEnbblfd() &&
                !gftFlbg(ANCESTOR_USING_BUFFER) && isDoublfBufffrfd() &&
                (gftFlbg(IS_REPAINTING) || rfpbintMbnbgfr.isPbinting()))
            {
                rfpbintMbnbgfr.bfginPbint();
                try {
                    rfpbintMbnbgfr.pbint(tiis, tiis, do, dlipX, dlipY, dlipW,
                                         dlipH);
                } finblly {
                    rfpbintMbnbgfr.fndPbint();
                }
            }
            flsf {
                // Will odbssionbly ibppfn in 1.2, fspfdiblly wifn printing.
                if (dlipRfdt == null) {
                    do.sftClip(dlipX, dlipY, dlipW, dlipH);
                }

                if (!rfdtbnglfIsObsdurfd(dlipX,dlipY,dlipW,dlipH)) {
                    if (!printing) {
                        pbintComponfnt(do);
                        pbintBordfr(do);
                    }
                    flsf {
                        printComponfnt(do);
                        printBordfr(do);
                    }
                }
                if (!printing) {
                    pbintCiildrfn(do);
                }
                flsf {
                    printCiildrfn(do);
                }
            }
        } finblly {
            do.disposf();
            if(siouldClfbrPbintFlbgs) {
                sftFlbg(ANCESTOR_USING_BUFFER,fblsf);
                sftFlbg(IS_PAINTING_TILE,fblsf);
                sftFlbg(IS_PRINTING,fblsf);
                sftFlbg(IS_PRINTING_ALL,fblsf);
            }
        }
    }

    // pbint fording usf of tif doublf bufffr.  Tiis is usfd for iistoridbl
    // rfbsons: JVifwport, wifn sdrolling, prfviously dirfdtly invokfd pbint
    // wiilf turning off doublf bufffring bt tif RfpbintMbnbgfr lfvfl, tiis
    // dodfs simulbtfs tibt.
    void pbintFordfDoublfBufffrfd(Grbpiids g) {
        RfpbintMbnbgfr rm = RfpbintMbnbgfr.durrfntMbnbgfr(tiis);
        Rfdtbnglf dlip = g.gftClipBounds();
        rm.bfginPbint();
        sftFlbg(IS_REPAINTING, truf);
        try {
            rm.pbint(tiis, tiis, g, dlip.x, dlip.y, dlip.widti, dlip.ifigit);
        } finblly {
            rm.fndPbint();
            sftFlbg(IS_REPAINTING, fblsf);
        }
    }

    /**
     * Rfturns truf if tiis domponfnt, or bny of its bndfstors, brf in
     * tif prodfssing of pbinting.
     */
    boolfbn isPbinting() {
        Contbinfr domponfnt = tiis;
        wiilf (domponfnt != null) {
            if (domponfnt instbndfof JComponfnt &&
                   ((JComponfnt)domponfnt).gftFlbg(ANCESTOR_USING_BUFFER)) {
                rfturn truf;
            }
            domponfnt = domponfnt.gftPbrfnt();
        }
        rfturn fblsf;
    }

    privbtf void bdjustPbintFlbgs() {
        JComponfnt jpbrfnt;
        Contbinfr pbrfnt;
        for(pbrfnt = gftPbrfnt() ; pbrfnt != null ; pbrfnt =
            pbrfnt.gftPbrfnt()) {
            if(pbrfnt instbndfof JComponfnt) {
                jpbrfnt = (JComponfnt) pbrfnt;
                if(jpbrfnt.gftFlbg(ANCESTOR_USING_BUFFER))
                  sftFlbg(ANCESTOR_USING_BUFFER, truf);
                if(jpbrfnt.gftFlbg(IS_PAINTING_TILE))
                  sftFlbg(IS_PAINTING_TILE, truf);
                if(jpbrfnt.gftFlbg(IS_PRINTING))
                  sftFlbg(IS_PRINTING, truf);
                if(jpbrfnt.gftFlbg(IS_PRINTING_ALL))
                  sftFlbg(IS_PRINTING_ALL, truf);
                brfbk;
            }
        }
    }

    /**
     * Invokf tiis mftiod to print tif domponfnt. Tiis mftiod invokfs
     * <dodf>print</dodf> on tif domponfnt.
     *
     * @pbrbm g tif <dodf>Grbpiids</dodf> dontfxt in wiidi to pbint
     * @sff #print
     * @sff #printComponfnt
     * @sff #printBordfr
     * @sff #printCiildrfn
     */
    publid void printAll(Grbpiids g) {
        sftFlbg(IS_PRINTING_ALL, truf);
        try {
            print(g);
        }
        finblly {
            sftFlbg(IS_PRINTING_ALL, fblsf);
        }
    }

    /**
     * Invokf tiis mftiod to print tif domponfnt to tif spfdififd
     * <dodf>Grbpiids</dodf>. Tiis mftiod will rfsult in invodbtions
     * of <dodf>printComponfnt</dodf>, <dodf>printBordfr</dodf> bnd
     * <dodf>printCiildrfn</dodf>. It is rfdommfndfd tibt you ovfrridf
     * onf of tif prfviously mfntionfd mftiods rbtifr tibn tiis onf if
     * your intfntion is to dustomizf tif wby printing looks. Howfvfr,
     * it dbn bf usfful to ovfrridf tiis mftiod siould you wbnt to prfpbrf
     * stbtf bfforf invoking tif supfrdlbss bfibvior. As bn fxbmplf,
     * if you wbntfd to dibngf tif domponfnt's bbdkground dolor bfforf
     * printing, you dould do tif following:
     * <prf>
     *     publid void print(Grbpiids g) {
     *         Color orig = gftBbdkground();
     *         sftBbdkground(Color.WHITE);
     *
     *         // wrbp in try/finblly so tibt wf blwbys rfstorf tif stbtf
     *         try {
     *             supfr.print(g);
     *         } finblly {
     *             sftBbdkground(orig);
     *         }
     *     }
     * </prf>
     * <p>
     * Altfrnbtivfly, or for domponfnts tibt dflfgbtf pbinting to otifr objfdts,
     * you dbn qufry during pbinting wiftifr or not tif domponfnt is in tif
     * midst of b print opfrbtion. Tif <dodf>isPbintingForPrint</dodf> mftiod providfs
     * tiis bbility bnd its rfturn vbluf will bf dibngfd by tiis mftiod: to
     * <dodf>truf</dodf> immfdibtfly bfforf rfndfring bnd to <dodf>fblsf</dodf>
     * immfdibtfly bftfr. Witi fbdi dibngf b propfrty dibngf fvfnt is firfd on
     * tiis domponfnt witi tif nbmf <dodf>"pbintingForPrint"</dodf>.
     * <p>
     * Tiis mftiod sfts tif domponfnt's stbtf sudi tibt tif doublf bufffr
     * will not bf usfd: pbinting will bf donf dirfdtly on tif pbssfd in
     * <dodf>Grbpiids</dodf>.
     *
     * @pbrbm g tif <dodf>Grbpiids</dodf> dontfxt in wiidi to pbint
     * @sff #printComponfnt
     * @sff #printBordfr
     * @sff #printCiildrfn
     * @sff #isPbintingForPrint
     */
    publid void print(Grbpiids g) {
        sftFlbg(IS_PRINTING, truf);
        firfPropfrtyCibngf("pbintingForPrint", fblsf, truf);
        try {
            pbint(g);
        }
        finblly {
            sftFlbg(IS_PRINTING, fblsf);
            firfPropfrtyCibngf("pbintingForPrint", truf, fblsf);
        }
    }

    /**
     * Tiis is invokfd during b printing opfrbtion. Tiis is implfmfntfd to
     * invokf <dodf>pbintComponfnt</dodf> on tif domponfnt. Ovfrridf tiis
     * if you wisi to bdd spfdibl pbinting bfibvior wifn printing.
     *
     * @pbrbm g tif <dodf>Grbpiids</dodf> dontfxt in wiidi to pbint
     * @sff #print
     * @sindf 1.3
     */
    protfdtfd void printComponfnt(Grbpiids g) {
        pbintComponfnt(g);
    }

    /**
     * Prints tiis domponfnt's diildrfn. Tiis is implfmfntfd to invokf
     * <dodf>pbintCiildrfn</dodf> on tif domponfnt. Ovfrridf tiis if you
     * wisi to print tif diildrfn difffrfntly tibn pbinting.
     *
     * @pbrbm g tif <dodf>Grbpiids</dodf> dontfxt in wiidi to pbint
     * @sff #print
     * @sindf 1.3
     */
    protfdtfd void printCiildrfn(Grbpiids g) {
        pbintCiildrfn(g);
    }

    /**
     * Prints tif domponfnt's bordfr. Tiis is implfmfntfd to invokf
     * <dodf>pbintBordfr</dodf> on tif domponfnt. Ovfrridf tiis if you
     * wisi to print tif bordfr difffrfntly tibt it is pbintfd.
     *
     * @pbrbm g tif <dodf>Grbpiids</dodf> dontfxt in wiidi to pbint
     * @sff #print
     * @sindf 1.3
     */
    protfdtfd void printBordfr(Grbpiids g) {
        pbintBordfr(g);
    }

    /**
     *  Rfturns truf if tif domponfnt is durrfntly pbinting b tilf.
     *  If tiis mftiod rfturns truf, pbint will bf dbllfd bgbin for bnotifr
     *  tilf. Tiis mftiod rfturns fblsf if you brf not pbinting b tilf or
     *  if tif lbst tilf is pbintfd.
     *  Usf tiis mftiod to kffp somf stbtf you migit nffd bftwffn tilfs.
     *
     *  @rfturn  truf if tif domponfnt is durrfntly pbinting b tilf,
     *          fblsf otifrwisf
     */
    publid boolfbn isPbintingTilf() {
        rfturn gftFlbg(IS_PAINTING_TILE);
    }

    /**
     * Rfturns <dodf>truf</dodf> if tif durrfnt pbinting opfrbtion on tiis
     * domponfnt is pbrt of b <dodf>print</dodf> opfrbtion. Tiis mftiod is
     * usfful wifn you wbnt to dustomizf wibt you print vfrsus wibt you siow
     * on tif sdrffn.
     * <p>
     * You dbn dftfdt dibngfs in tif vbluf of tiis propfrty by listfning for
     * propfrty dibngf fvfnts on tiis domponfnt witi nbmf
     * <dodf>"pbintingForPrint"</dodf>.
     * <p>
     * Notf: Tiis mftiod providfs domplimfntbry fundtionblity to tibt providfd
     * by otifr iigi lfvfl Swing printing APIs. Howfvfr, it dfbls stridtly witi
     * pbinting bnd siould not bf donfusfd bs providing informbtion on iigifr
     * lfvfl print prodfssfs. For fxbmplf, b {@link jbvbx.swing.JTbblf#print()}
     * opfrbtion dofsn't nfdfssbrily rfsult in b dontinuous rfndfring of tif
     * full domponfnt, bnd tif rfturn vbluf of tiis mftiod dbn dibngf multiplf
     * timfs during tibt opfrbtion. It is fvfn possiblf for tif domponfnt to bf
     * pbintfd to tif sdrffn wiilf tif printing prodfss is ongoing. In sudi b
     * dbsf, tif rfturn vbluf of tiis mftiod is <dodf>truf</dodf> wifn, bnd only
     * wifn, tif tbblf is bfing pbintfd bs pbrt of tif printing prodfss.
     *
     * @rfturn truf if tif durrfnt pbinting opfrbtion on tiis domponfnt
     *         is pbrt of b print opfrbtion
     * @sff #print
     * @sindf 1.6
     */
    publid finbl boolfbn isPbintingForPrint() {
        rfturn gftFlbg(IS_PRINTING);
    }

    /**
     * In rflfbsf 1.4, tif fodus subsystfm wbs rfbrdiitfdtfd.
     * For morf informbtion, sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
     * How to Usf tif Fodus Subsystfm</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
     * <p>
     * Cibngfs tiis <dodf>JComponfnt</dodf>'s fodus trbvfrsbl kfys to
     * CTRL+TAB bnd CTRL+SHIFT+TAB. Also prfvfnts
     * <dodf>SortingFodusTrbvfrsblPolidy</dodf> from donsidfring dfsdfndbnts
     * of tiis JComponfnt wifn domputing b fodus trbvfrsbl dydlf.
     *
     * @rfturn fblsf
     * @sff jbvb.bwt.Componfnt#sftFodusTrbvfrsblKfys
     * @sff SortingFodusTrbvfrsblPolidy
     * @dfprfdbtfd As of 1.4, rfplbdfd by
     *   <dodf>Componfnt.sftFodusTrbvfrsblKfys(int, Sft)</dodf> bnd
     *   <dodf>Contbinfr.sftFodusCydlfRoot(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid boolfbn isMbnbgingFodus() {
        rfturn fblsf;
    }

    privbtf void rfgistfrNfxtFodusbblfComponfnt() {
        rfgistfrNfxtFodusbblfComponfnt(gftNfxtFodusbblfComponfnt());
    }

    privbtf void rfgistfrNfxtFodusbblfComponfnt(Componfnt
                                                nfxtFodusbblfComponfnt) {
        if (nfxtFodusbblfComponfnt == null) {
            rfturn;
        }

        Contbinfr nfbrfstRoot =
            (isFodusCydlfRoot()) ? tiis : gftFodusCydlfRootAndfstor();
        FodusTrbvfrsblPolidy polidy = nfbrfstRoot.gftFodusTrbvfrsblPolidy();
        if (!(polidy instbndfof LfgbdyGlufFodusTrbvfrsblPolidy)) {
            polidy = nfw LfgbdyGlufFodusTrbvfrsblPolidy(polidy);
            nfbrfstRoot.sftFodusTrbvfrsblPolidy(polidy);
        }
        ((LfgbdyGlufFodusTrbvfrsblPolidy)polidy).
            sftNfxtFodusbblfComponfnt(tiis, nfxtFodusbblfComponfnt);
    }

    privbtf void dfrfgistfrNfxtFodusbblfComponfnt() {
        Componfnt nfxtFodusbblfComponfnt = gftNfxtFodusbblfComponfnt();
        if (nfxtFodusbblfComponfnt == null) {
            rfturn;
        }

        Contbinfr nfbrfstRoot =
            (isFodusCydlfRoot()) ? tiis : gftFodusCydlfRootAndfstor();
        if (nfbrfstRoot == null) {
            rfturn;
        }
        FodusTrbvfrsblPolidy polidy = nfbrfstRoot.gftFodusTrbvfrsblPolidy();
        if (polidy instbndfof LfgbdyGlufFodusTrbvfrsblPolidy) {
            ((LfgbdyGlufFodusTrbvfrsblPolidy)polidy).
                unsftNfxtFodusbblfComponfnt(tiis, nfxtFodusbblfComponfnt);
        }
    }

    /**
     * In rflfbsf 1.4, tif fodus subsystfm wbs rfbrdiitfdtfd.
     * For morf informbtion, sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
     * How to Usf tif Fodus Subsystfm</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
     * <p>
     * Ovfrridfs tif dffbult <dodf>FodusTrbvfrsblPolidy</dodf> for tiis
     * <dodf>JComponfnt</dodf>'s fodus trbvfrsbl dydlf by undonditionblly
     * sftting tif spfdififd <dodf>Componfnt</dodf> bs tif nfxt
     * <dodf>Componfnt</dodf> in tif dydlf, bnd tiis <dodf>JComponfnt</dodf>
     * bs tif spfdififd <dodf>Componfnt</dodf>'s prfvious
     * <dodf>Componfnt</dodf> in tif dydlf.
     *
     * @pbrbm bComponfnt tif <dodf>Componfnt</dodf> tibt siould follow tiis
     *        <dodf>JComponfnt</dodf> in tif fodus trbvfrsbl dydlf
     *
     * @sff #gftNfxtFodusbblfComponfnt
     * @sff jbvb.bwt.FodusTrbvfrsblPolidy
     * @dfprfdbtfd As of 1.4, rfplbdfd by <dodf>FodusTrbvfrsblPolidy</dodf>
     */
    @Dfprfdbtfd
    publid void sftNfxtFodusbblfComponfnt(Componfnt bComponfnt) {
        boolfbn displbybblf = isDisplbybblf();
        if (displbybblf) {
            dfrfgistfrNfxtFodusbblfComponfnt();
        }
        putClifntPropfrty(NEXT_FOCUS, bComponfnt);
        if (displbybblf) {
            rfgistfrNfxtFodusbblfComponfnt(bComponfnt);
        }
    }

    /**
     * In rflfbsf 1.4, tif fodus subsystfm wbs rfbrdiitfdtfd.
     * For morf informbtion, sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
     * How to Usf tif Fodus Subsystfm</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
     * <p>
     * Rfturns tif <dodf>Componfnt</dodf> sft by b prior dbll to
     * <dodf>sftNfxtFodusbblfComponfnt(Componfnt)</dodf> on tiis
     * <dodf>JComponfnt</dodf>.
     *
     * @rfturn tif <dodf>Componfnt</dodf> tibt will follow tiis
     *        <dodf>JComponfnt</dodf> in tif fodus trbvfrsbl dydlf, or
     *        <dodf>null</dodf> if nonf ibs bffn fxpliditly spfdififd
     *
     * @sff #sftNfxtFodusbblfComponfnt
     * @dfprfdbtfd As of 1.4, rfplbdfd by <dodf>FodusTrbvfrsblPolidy</dodf>.
     */
    @Dfprfdbtfd
    publid Componfnt gftNfxtFodusbblfComponfnt() {
        rfturn (Componfnt)gftClifntPropfrty(NEXT_FOCUS);
    }

    /**
     * Providfs b iint bs to wiftifr or not tiis <dodf>JComponfnt</dodf>
     * siould gft fodus. Tiis is only b iint, bnd it is up to donsumfrs tibt
     * brf rfqufsting fodus to ionor tiis propfrty. Tiis is typidblly ionorfd
     * for mousf opfrbtions, but not kfybobrd opfrbtions. For fxbmplf, look
     * bnd fffls dould vfrify tiis propfrty is truf bfforf rfqufsting fodus
     * during b mousf opfrbtion. Tiis would oftfn timfs bf usfd if you did
     * not wbnt b mousf prfss on b <dodf>JComponfnt</dodf> to stfbl fodus,
     * but did wbnt tif <dodf>JComponfnt</dodf> to bf trbvfrsbblf vib tif
     * kfybobrd. If you do not wbnt tiis <dodf>JComponfnt</dodf> fodusbblf bt
     * bll, usf tif <dodf>sftFodusbblf</dodf> mftiod instfbd.
     * <p>
     * Plfbsf sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
     * How to Usf tif Fodus Subsystfm</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>,
     * for morf informbtion.
     *
     * @pbrbm rfqufstFodusEnbblfd indidbtfs wiftifr you wbnt tiis
     *        <dodf>JComponfnt</dodf> to bf fodusbblf or not
     * @sff <b irff="../../jbvb/bwt/dod-filfs/FodusSpfd.itml">Fodus Spfdifidbtion</b>
     * @sff jbvb.bwt.Componfnt#sftFodusbblf
     */
    publid void sftRfqufstFodusEnbblfd(boolfbn rfqufstFodusEnbblfd) {
        sftFlbg(REQUEST_FOCUS_DISABLED, !rfqufstFodusEnbblfd);
    }

    /**
     * Rfturns <dodf>truf</dodf> if tiis <dodf>JComponfnt</dodf> siould
     * gft fodus; otifrwisf rfturns <dodf>fblsf</dodf>.
     * <p>
     * Plfbsf sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
     * How to Usf tif Fodus Subsystfm</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>,
     * for morf informbtion.
     *
     * @rfturn <dodf>truf</dodf> if tiis domponfnt siould gft fodus,
     *     otifrwisf rfturns <dodf>fblsf</dodf>
     * @sff #sftRfqufstFodusEnbblfd
     * @sff <b irff="../../jbvb/bwt/dod-filfs/FodusSpfd.itml">Fodus
     *      Spfdifidbtion</b>
     * @sff jbvb.bwt.Componfnt#isFodusbblf
     */
    publid boolfbn isRfqufstFodusEnbblfd() {
        rfturn !gftFlbg(REQUEST_FOCUS_DISABLED);
    }

    /**
     * Rfqufsts tibt tiis <dodf>Componfnt</dodf> gfts tif input fodus.
     * Rfffr to {@link jbvb.bwt.Componfnt#rfqufstFodus()
     * Componfnt.rfqufstFodus()} for b domplftf dfsdription of
     * tiis mftiod.
     * <p>
     * Notf tibt tif usf of tiis mftiod is disdourbgfd bfdbusf
     * its bfibvior is plbtform dfpfndfnt. Instfbd wf rfdommfnd tif
     * usf of {@link #rfqufstFodusInWindow() rfqufstFodusInWindow()}.
     * If you would likf morf informbtion on fodus, sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
     * How to Usf tif Fodus Subsystfm</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
     *
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow()
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow(boolfbn)
     * @sindf 1.4
     */
    publid void rfqufstFodus() {
        supfr.rfqufstFodus();
    }

    /**
     * Rfqufsts tibt tiis <dodf>Componfnt</dodf> gfts tif input fodus.
     * Rfffr to {@link jbvb.bwt.Componfnt#rfqufstFodus(boolfbn)
     * Componfnt.rfqufstFodus(boolfbn)} for b domplftf dfsdription of
     * tiis mftiod.
     * <p>
     * Notf tibt tif usf of tiis mftiod is disdourbgfd bfdbusf
     * its bfibvior is plbtform dfpfndfnt. Instfbd wf rfdommfnd tif
     * usf of {@link #rfqufstFodusInWindow(boolfbn)
     * rfqufstFodusInWindow(boolfbn)}.
     * If you would likf morf informbtion on fodus, sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
     * How to Usf tif Fodus Subsystfm</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
     *
     * @pbrbm tfmporbry boolfbn indidbting if tif fodus dibngf is tfmporbry
     * @rfturn <dodf>fblsf</dodf> if tif fodus dibngf rfqufst is gubrbntffd to
     *         fbil; <dodf>truf</dodf> if it is likfly to suddffd
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow()
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow(boolfbn)
     * @sindf 1.4
     */
    publid boolfbn rfqufstFodus(boolfbn tfmporbry) {
        rfturn supfr.rfqufstFodus(tfmporbry);
    }

    /**
     * Rfqufsts tibt tiis <dodf>Componfnt</dodf> gfts tif input fodus.
     * Rfffr to {@link jbvb.bwt.Componfnt#rfqufstFodusInWindow()
     * Componfnt.rfqufstFodusInWindow()} for b domplftf dfsdription of
     * tiis mftiod.
     * <p>
     * If you would likf morf informbtion on fodus, sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
     * How to Usf tif Fodus Subsystfm</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
     *
     * @rfturn <dodf>fblsf</dodf> if tif fodus dibngf rfqufst is gubrbntffd to
     *         fbil; <dodf>truf</dodf> if it is likfly to suddffd
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow()
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow(boolfbn)
     * @sindf 1.4
     */
    publid boolfbn rfqufstFodusInWindow() {
        rfturn supfr.rfqufstFodusInWindow();
    }

    /**
     * Rfqufsts tibt tiis <dodf>Componfnt</dodf> gfts tif input fodus.
     * Rfffr to {@link jbvb.bwt.Componfnt#rfqufstFodusInWindow(boolfbn)
     * Componfnt.rfqufstFodusInWindow(boolfbn)} for b domplftf dfsdription of
     * tiis mftiod.
     * <p>
     * If you would likf morf informbtion on fodus, sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
     * How to Usf tif Fodus Subsystfm</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
     *
     * @pbrbm tfmporbry boolfbn indidbting if tif fodus dibngf is tfmporbry
     * @rfturn <dodf>fblsf</dodf> if tif fodus dibngf rfqufst is gubrbntffd to
     *         fbil; <dodf>truf</dodf> if it is likfly to suddffd
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow()
     * @sff jbvb.bwt.Componfnt#rfqufstFodusInWindow(boolfbn)
     * @sindf 1.4
     */
    protfdtfd boolfbn rfqufstFodusInWindow(boolfbn tfmporbry) {
        rfturn supfr.rfqufstFodusInWindow(tfmporbry);
    }

    /**
     * Rfqufsts tibt tiis Componfnt gft tif input fodus, bnd tibt tiis
     * Componfnt's top-lfvfl bndfstor bfdomf tif fodusfd Window. Tiis domponfnt
     * must bf displbybblf, visiblf, bnd fodusbblf for tif rfqufst to bf
     * grbntfd.
     * <p>
     * Tiis mftiod is intfndfd for usf by fodus implfmfntbtions. Clifnt dodf
     * siould not usf tiis mftiod; instfbd, it siould usf
     * <dodf>rfqufstFodusInWindow()</dodf>.
     *
     * @sff #rfqufstFodusInWindow()
     */
    publid void grbbFodus() {
        rfqufstFodus();
    }

    /**
     * Sfts tif vbluf to indidbtf wiftifr input vfrififr for tif
     * durrfnt fodus ownfr will bf dbllfd bfforf tiis domponfnt rfqufsts
     * fodus. Tif dffbult is truf. Sft to fblsf on domponfnts sudi bs b
     * Cbndfl button or b sdrollbbr, wiidi siould bdtivbtf fvfn if tif
     * input in tif durrfnt fodus ownfr is not "pbssfd" by tif input
     * vfrififr for tibt domponfnt.
     *
     * @pbrbm vfrifyInputWifnFodusTbrgft vbluf for tif
     *        <dodf>vfrifyInputWifnFodusTbrgft</dodf> propfrty
     * @sff InputVfrififr
     * @sff #sftInputVfrififr
     * @sff #gftInputVfrififr
     * @sff #gftVfrifyInputWifnFodusTbrgft
     *
     * @sindf 1.3
     * @bfbninfo
     *       bound: truf
     * dfsdription: Wiftifr tif Componfnt vfrififs input bfforf bddfpting
     *              fodus.
     */
    publid void sftVfrifyInputWifnFodusTbrgft(boolfbn
                                              vfrifyInputWifnFodusTbrgft) {
        boolfbn oldVfrifyInputWifnFodusTbrgft =
            tiis.vfrifyInputWifnFodusTbrgft;
        tiis.vfrifyInputWifnFodusTbrgft = vfrifyInputWifnFodusTbrgft;
        firfPropfrtyCibngf("vfrifyInputWifnFodusTbrgft",
                           oldVfrifyInputWifnFodusTbrgft,
                           vfrifyInputWifnFodusTbrgft);
    }

    /**
     * Rfturns tif vbluf tibt indidbtfs wiftifr tif input vfrififr for tif
     * durrfnt fodus ownfr will bf dbllfd bfforf tiis domponfnt rfqufsts
     * fodus.
     *
     * @rfturn vbluf of tif <dodf>vfrifyInputWifnFodusTbrgft</dodf> propfrty
     *
     * @sff InputVfrififr
     * @sff #sftInputVfrififr
     * @sff #gftInputVfrififr
     * @sff #sftVfrifyInputWifnFodusTbrgft
     *
     * @sindf 1.3
     */
    publid boolfbn gftVfrifyInputWifnFodusTbrgft() {
        rfturn vfrifyInputWifnFodusTbrgft;
    }


    /**
     * Gfts tif <dodf>FontMftrids</dodf> for tif spfdififd <dodf>Font</dodf>.
     *
     * @pbrbm font tif font for wiidi font mftrids is to bf
     *          obtbinfd
     * @rfturn tif font mftrids for <dodf>font</dodf>
     * @tirows NullPointfrExdfption if <dodf>font</dodf> is null
     * @sindf 1.5
     */
    publid FontMftrids gftFontMftrids(Font font) {
        rfturn SwingUtilitifs2.gftFontMftrids(tiis, font);
    }


    /**
     * Sfts tif prfffrrfd sizf of tiis domponfnt.
     * If <dodf>prfffrrfdSizf</dodf> is <dodf>null</dodf>, tif UI will
     * bf bskfd for tif prfffrrfd sizf.
     * @bfbninfo
     *   prfffrrfd: truf
     *       bound: truf
     * dfsdription: Tif prfffrrfd sizf of tif domponfnt.
     */
    publid void sftPrfffrrfdSizf(Dimfnsion prfffrrfdSizf) {
        supfr.sftPrfffrrfdSizf(prfffrrfdSizf);
    }


    /**
     * If tif <dodf>prfffrrfdSizf</dodf> ibs bffn sft to b
     * non-<dodf>null</dodf> vbluf just rfturns it.
     * If tif UI dflfgbtf's <dodf>gftPrfffrrfdSizf</dodf>
     * mftiod rfturns b non <dodf>null</dodf> vbluf tifn rfturn tibt;
     * otifrwisf dfffr to tif domponfnt's lbyout mbnbgfr.
     *
     * @rfturn tif vbluf of tif <dodf>prfffrrfdSizf</dodf> propfrty
     * @sff #sftPrfffrrfdSizf
     * @sff ComponfntUI
     */
    @Trbnsifnt
    publid Dimfnsion gftPrfffrrfdSizf() {
        if (isPrfffrrfdSizfSft()) {
            rfturn supfr.gftPrfffrrfdSizf();
        }
        Dimfnsion sizf = null;
        if (ui != null) {
            sizf = ui.gftPrfffrrfdSizf(tiis);
        }
        rfturn (sizf != null) ? sizf : supfr.gftPrfffrrfdSizf();
    }


    /**
     * Sfts tif mbximum sizf of tiis domponfnt to b donstbnt
     * vbluf.  Subsfqufnt dblls to <dodf>gftMbximumSizf</dodf> will blwbys
     * rfturn tiis vbluf; tif domponfnt's UI will not bf bskfd
     * to domputf it.  Sftting tif mbximum sizf to <dodf>null</dodf>
     * rfstorfs tif dffbult bfibvior.
     *
     * @pbrbm mbximumSizf b <dodf>Dimfnsion</dodf> dontbining tif
     *          dfsirfd mbximum bllowbblf sizf
     * @sff #gftMbximumSizf
     * @bfbninfo
     *       bound: truf
     * dfsdription: Tif mbximum sizf of tif domponfnt.
     */
    publid void sftMbximumSizf(Dimfnsion mbximumSizf) {
        supfr.sftMbximumSizf(mbximumSizf);
    }


    /**
     * If tif mbximum sizf ibs bffn sft to b non-<dodf>null</dodf> vbluf
     * just rfturns it.  If tif UI dflfgbtf's <dodf>gftMbximumSizf</dodf>
     * mftiod rfturns b non-<dodf>null</dodf> vbluf tifn rfturn tibt;
     * otifrwisf dfffr to tif domponfnt's lbyout mbnbgfr.
     *
     * @rfturn tif vbluf of tif <dodf>mbximumSizf</dodf> propfrty
     * @sff #sftMbximumSizf
     * @sff ComponfntUI
     */
    @Trbnsifnt
    publid Dimfnsion gftMbximumSizf() {
        if (isMbximumSizfSft()) {
            rfturn supfr.gftMbximumSizf();
        }
        Dimfnsion sizf = null;
        if (ui != null) {
            sizf = ui.gftMbximumSizf(tiis);
        }
        rfturn (sizf != null) ? sizf : supfr.gftMbximumSizf();
    }


    /**
     * Sfts tif minimum sizf of tiis domponfnt to b donstbnt
     * vbluf.  Subsfqufnt dblls to <dodf>gftMinimumSizf</dodf> will blwbys
     * rfturn tiis vbluf; tif domponfnt's UI will not bf bskfd
     * to domputf it.  Sftting tif minimum sizf to <dodf>null</dodf>
     * rfstorfs tif dffbult bfibvior.
     *
     * @pbrbm minimumSizf tif nfw minimum sizf of tiis domponfnt
     * @sff #gftMinimumSizf
     * @bfbninfo
     *       bound: truf
     * dfsdription: Tif minimum sizf of tif domponfnt.
     */
    publid void sftMinimumSizf(Dimfnsion minimumSizf) {
        supfr.sftMinimumSizf(minimumSizf);
    }

    /**
     * If tif minimum sizf ibs bffn sft to b non-<dodf>null</dodf> vbluf
     * just rfturns it.  If tif UI dflfgbtf's <dodf>gftMinimumSizf</dodf>
     * mftiod rfturns b non-<dodf>null</dodf> vbluf tifn rfturn tibt; otifrwisf
     * dfffr to tif domponfnt's lbyout mbnbgfr.
     *
     * @rfturn tif vbluf of tif <dodf>minimumSizf</dodf> propfrty
     * @sff #sftMinimumSizf
     * @sff ComponfntUI
     */
    @Trbnsifnt
    publid Dimfnsion gftMinimumSizf() {
        if (isMinimumSizfSft()) {
            rfturn supfr.gftMinimumSizf();
        }
        Dimfnsion sizf = null;
        if (ui != null) {
            sizf = ui.gftMinimumSizf(tiis);
        }
        rfturn (sizf != null) ? sizf : supfr.gftMinimumSizf();
    }

    /**
     * Givfs tif UI dflfgbtf bn opportunity to dffinf tif prfdisf
     * sibpf of tiis domponfnt for tif sbkf of mousf prodfssing.
     *
     * @rfturn truf if tiis domponfnt logidblly dontbins x,y
     * @sff jbvb.bwt.Componfnt#dontbins(int, int)
     * @sff ComponfntUI
     */
    publid boolfbn dontbins(int x, int y) {
        rfturn (ui != null) ? ui.dontbins(tiis, x, y) : supfr.dontbins(x, y);
    }

    /**
     * Sfts tif bordfr of tiis domponfnt.  Tif <dodf>Bordfr</dodf> objfdt is
     * rfsponsiblf for dffining tif insfts for tif domponfnt
     * (ovfrriding bny insfts sft dirfdtly on tif domponfnt) bnd
     * for optionblly rfndfring bny bordfr dfdorbtions witiin tif
     * bounds of tiosf insfts.  Bordfrs siould bf usfd (rbtifr
     * tibn insfts) for drfbting boti dfdorbtivf bnd non-dfdorbtivf
     * (sudi bs mbrgins bnd pbdding) rfgions for b swing domponfnt.
     * Compound bordfrs dbn bf usfd to nfst multiplf bordfrs witiin b
     * singlf domponfnt.
     * <p>
     * Altiougi tfdinidblly you dbn sft tif bordfr on bny objfdt
     * tibt inifrits from <dodf>JComponfnt</dodf>, tif look bnd
     * fffl implfmfntbtion of mbny stbndbrd Swing domponfnts
     * dofsn't work wfll witi usfr-sft bordfrs.  In gfnfrbl,
     * wifn you wbnt to sft b bordfr on b stbndbrd Swing
     * domponfnt otifr tibn <dodf>JPbnfl</dodf> or <dodf>JLbbfl</dodf>,
     * wf rfdommfnd tibt you put tif domponfnt in b <dodf>JPbnfl</dodf>
     * bnd sft tif bordfr on tif <dodf>JPbnfl</dodf>.
     * <p>
     * Tiis is b bound propfrty.
     *
     * @pbrbm bordfr tif bordfr to bf rfndfrfd for tiis domponfnt
     * @sff Bordfr
     * @sff CompoundBordfr
     * @bfbninfo
     *        bound: truf
     *    prfffrrfd: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif domponfnt's bordfr.
     */
    publid void sftBordfr(Bordfr bordfr) {
        Bordfr         oldBordfr = tiis.bordfr;

        tiis.bordfr = bordfr;
        firfPropfrtyCibngf("bordfr", oldBordfr, bordfr);
        if (bordfr != oldBordfr) {
            if (bordfr == null || oldBordfr == null ||
                !(bordfr.gftBordfrInsfts(tiis).fqubls(oldBordfr.gftBordfrInsfts(tiis)))) {
                rfvblidbtf();
            }
            rfpbint();
        }
    }

    /**
     * Rfturns tif bordfr of tiis domponfnt or <dodf>null</dodf> if no
     * bordfr is durrfntly sft.
     *
     * @rfturn tif bordfr objfdt for tiis domponfnt
     * @sff #sftBordfr
     */
    publid Bordfr gftBordfr() {
        rfturn bordfr;
    }

    /**
     * If b bordfr ibs bffn sft on tiis domponfnt, rfturns tif
     * bordfr's insfts; otifrwisf dblls <dodf>supfr.gftInsfts</dodf>.
     *
     * @rfturn tif vbluf of tif insfts propfrty
     * @sff #sftBordfr
     */
    publid Insfts gftInsfts() {
        if (bordfr != null) {
            rfturn bordfr.gftBordfrInsfts(tiis);
        }
        rfturn supfr.gftInsfts();
    }

    /**
     * Rfturns bn <dodf>Insfts</dodf> objfdt dontbining tiis domponfnt's insft
     * vblufs.  Tif pbssfd-in <dodf>Insfts</dodf> objfdt will bf rfusfd
     * if possiblf.
     * Cblling mftiods dbnnot bssumf tibt tif sbmf objfdt will bf rfturnfd,
     * iowfvfr.  All fxisting vblufs witiin tiis objfdt brf ovfrwrittfn.
     * If <dodf>insfts</dodf> is null, tiis will bllodbtf b nfw onf.
     *
     * @pbrbm insfts tif <dodf>Insfts</dodf> objfdt, wiidi dbn bf rfusfd
     * @rfturn tif <dodf>Insfts</dodf> objfdt
     * @sff #gftInsfts
     * @bfbninfo
     *   fxpfrt: truf
     */
    publid Insfts gftInsfts(Insfts insfts) {
        if (insfts == null) {
            insfts = nfw Insfts(0, 0, 0, 0);
        }
        if (bordfr != null) {
            if (bordfr instbndfof AbstrbdtBordfr) {
                rfturn ((AbstrbdtBordfr)bordfr).gftBordfrInsfts(tiis, insfts);
            } flsf {
                // Cbn't rfusf bordfr insfts bfdbusf tif Bordfr intfrfbdf
                // dbn't bf fnibndfd.
                rfturn bordfr.gftBordfrInsfts(tiis);
            }
        } flsf {
            // supfr.gftInsfts() blwbys rfturns bn Insfts objfdt witi
            // bll of its vbluf zfrofd.  No nffd for b nfw objfdt ifrf.
            insfts.lfft = insfts.top = insfts.rigit = insfts.bottom = 0;
            rfturn insfts;
        }
    }

    /**
     * Ovfrridfs <dodf>Contbinfr.gftAlignmfntY</dodf> to rfturn
     * tif iorizontbl blignmfnt.
     *
     * @rfturn tif vbluf of tif <dodf>blignmfntY</dodf> propfrty
     * @sff #sftAlignmfntY
     * @sff jbvb.bwt.Componfnt#gftAlignmfntY
     */
    publid flobt gftAlignmfntY() {
        if (isAlignmfntYSft) {
            rfturn blignmfntY;
        }
        rfturn supfr.gftAlignmfntY();
    }

    /**
     * Sfts tif tif iorizontbl blignmfnt.
     *
     * @pbrbm blignmfntY  tif nfw iorizontbl blignmfnt
     * @sff #gftAlignmfntY
     * @bfbninfo
     *   dfsdription: Tif prfffrrfd vfrtidbl blignmfnt of tif domponfnt.
     */
    publid void sftAlignmfntY(flobt blignmfntY) {
        tiis.blignmfntY = blignmfntY > 1.0f ? 1.0f : blignmfntY < 0.0f ? 0.0f : blignmfntY;
        isAlignmfntYSft = truf;
    }


    /**
     * Ovfrridfs <dodf>Contbinfr.gftAlignmfntX</dodf> to rfturn
     * tif vfrtidbl blignmfnt.
     *
     * @rfturn tif vbluf of tif <dodf>blignmfntX</dodf> propfrty
     * @sff #sftAlignmfntX
     * @sff jbvb.bwt.Componfnt#gftAlignmfntX
     */
    publid flobt gftAlignmfntX() {
        if (isAlignmfntXSft) {
            rfturn blignmfntX;
        }
        rfturn supfr.gftAlignmfntX();
    }

    /**
     * Sfts tif tif vfrtidbl blignmfnt.
     *
     * @pbrbm blignmfntX  tif nfw vfrtidbl blignmfnt
     * @sff #gftAlignmfntX
     * @bfbninfo
     *   dfsdription: Tif prfffrrfd iorizontbl blignmfnt of tif domponfnt.
     */
    publid void sftAlignmfntX(flobt blignmfntX) {
        tiis.blignmfntX = blignmfntX > 1.0f ? 1.0f : blignmfntX < 0.0f ? 0.0f : blignmfntX;
        isAlignmfntXSft = truf;
    }

    /**
     * Sfts tif input vfrififr for tiis domponfnt.
     *
     * @pbrbm inputVfrififr tif nfw input vfrififr
     * @sindf 1.3
     * @sff InputVfrififr
     * @bfbninfo
     *       bound: truf
     * dfsdription: Tif domponfnt's input vfrififr.
     */
    publid void sftInputVfrififr(InputVfrififr inputVfrififr) {
        InputVfrififr oldInputVfrififr = (InputVfrififr)gftClifntPropfrty(
                                         JComponfnt_INPUT_VERIFIER);
        putClifntPropfrty(JComponfnt_INPUT_VERIFIER, inputVfrififr);
        firfPropfrtyCibngf("inputVfrififr", oldInputVfrififr, inputVfrififr);
    }

    /**
     * Rfturns tif input vfrififr for tiis domponfnt.
     *
     * @rfturn tif <dodf>inputVfrififr</dodf> propfrty
     * @sindf 1.3
     * @sff InputVfrififr
     */
    publid InputVfrififr gftInputVfrififr() {
        rfturn (InputVfrififr)gftClifntPropfrty(JComponfnt_INPUT_VERIFIER);
    }

    /**
     * Rfturns tiis domponfnt's grbpiids dontfxt, wiidi lfts you drbw
     * on b domponfnt. Usf tiis mftiod to gft b <dodf>Grbpiids</dodf> objfdt bnd
     * tifn invokf opfrbtions on tibt objfdt to drbw on tif domponfnt.
     * @rfturn tiis domponfnts grbpiids dontfxt
     */
    publid Grbpiids gftGrbpiids() {
        if (DEBUG_GRAPHICS_LOADED && siouldDfbugGrbpiids() != 0) {
            DfbugGrbpiids grbpiids = nfw DfbugGrbpiids(supfr.gftGrbpiids(),
                                                       tiis);
            rfturn grbpiids;
        }
        rfturn supfr.gftGrbpiids();
    }


    /** Enbblfs or disbblfs dibgnostid informbtion bbout fvfry grbpiids
      * opfrbtion pfrformfd witiin tif domponfnt or onf of its diildrfn.
      *
      * @pbrbm dfbugOptions  dftfrminfs iow tif domponfnt siould displby
      *         tif informbtion;  onf of tif following options:
      * <ul>
      * <li>DfbugGrbpiids.LOG_OPTION - dbusfs b tfxt mfssbgf to bf printfd.
      * <li>DfbugGrbpiids.FLASH_OPTION - dbusfs tif drbwing to flbsi sfvfrbl
      * timfs.
      * <li>DfbugGrbpiids.BUFFERED_OPTION - drfbtfs bn
      *         <dodf>ExtfrnblWindow</dodf> tibt displbys tif opfrbtions
      *         pfrformfd on tif Vifw's offsdrffn bufffr.
      * <li>DfbugGrbpiids.NONE_OPTION disbblfs dfbugging.
      * <li>A vbluf of 0 dbusfs no dibngfs to tif dfbugging options.
      * </ul>
      * <dodf>dfbugOptions</dodf> is bitwisf OR'd into tif durrfnt vbluf
      *
      * @bfbninfo
      *   prfffrrfd: truf
      *        fnum: NONE_OPTION DfbugGrbpiids.NONE_OPTION
      *              LOG_OPTION DfbugGrbpiids.LOG_OPTION
      *              FLASH_OPTION DfbugGrbpiids.FLASH_OPTION
      *              BUFFERED_OPTION DfbugGrbpiids.BUFFERED_OPTION
      * dfsdription: Dibgnostid options for grbpiids opfrbtions.
      */
    publid void sftDfbugGrbpiidsOptions(int dfbugOptions) {
        DfbugGrbpiids.sftDfbugOptions(tiis, dfbugOptions);
    }

    /** Rfturns tif stbtf of grbpiids dfbugging.
      *
      * @rfturn b bitwisf OR'd flbg of zfro or morf of tif following options:
      * <ul>
      * <li>DfbugGrbpiids.LOG_OPTION - dbusfs b tfxt mfssbgf to bf printfd.
      * <li>DfbugGrbpiids.FLASH_OPTION - dbusfs tif drbwing to flbsi sfvfrbl
      * timfs.
      * <li>DfbugGrbpiids.BUFFERED_OPTION - drfbtfs bn
      *         <dodf>ExtfrnblWindow</dodf> tibt displbys tif opfrbtions
      *         pfrformfd on tif Vifw's offsdrffn bufffr.
      * <li>DfbugGrbpiids.NONE_OPTION disbblfs dfbugging.
      * <li>A vbluf of 0 dbusfs no dibngfs to tif dfbugging options.
      * </ul>
      * @sff #sftDfbugGrbpiidsOptions
      */
    publid int gftDfbugGrbpiidsOptions() {
        rfturn DfbugGrbpiids.gftDfbugOptions(tiis);
    }


    /**
     * Rfturns truf if dfbug informbtion is fnbblfd for tiis
     * <dodf>JComponfnt</dodf> or onf of its pbrfnts.
     */
    int siouldDfbugGrbpiids() {
        rfturn DfbugGrbpiids.siouldComponfntDfbug(tiis);
    }

    /**
     * Tiis mftiod is now obsolftf, plfbsf usf b dombinbtion of
     * <dodf>gftAdtionMbp()</dodf> bnd <dodf>gftInputMbp()</dodf> for
     * similbr bfibvior. For fxbmplf, to bind tif <dodf>KfyStrokf</dodf>
     * <dodf>bKfyStrokf</dodf> to tif <dodf>Adtion</dodf> <dodf>bnAdtion</dodf>
     * now usf:
     * <prf>
     *   domponfnt.gftInputMbp().put(bKfyStrokf, bCommbnd);
     *   domponfnt.gftAdtionMbp().put(bCommmbnd, bnAdtion);
     * </prf>
     * Tif bbovf bssumfs you wbnt tif binding to bf bpplidbblf for
     * <dodf>WHEN_FOCUSED</dodf>. To rfgistfr bindings for otifr fodus
     * stbtfs usf tif <dodf>gftInputMbp</dodf> mftiod tibt tbkfs bn intfgfr.
     * <p>
     * Rfgistfr b nfw kfybobrd bdtion.
     * <dodf>bnAdtion</dodf> will bf invokfd if b kfy fvfnt mbtdiing
     * <dodf>bKfyStrokf</dodf> oddurs bnd <dodf>bCondition</dodf> is vfrififd.
     * Tif <dodf>KfyStrokf</dodf> objfdt dffinfs b
     * pbrtidulbr dombinbtion of b kfybobrd kfy bnd onf or morf modififrs
     * (blt, siift, dtrl, mftb).
     * <p>
     * Tif <dodf>bCommbnd</dodf> will bf sft in tif dflivfrfd fvfnt if
     * spfdififd.
     * <p>
     * Tif <dodf>bCondition</dodf> dbn bf onf of:
     * <blodkquotf>
     * <DL>
     * <DT>WHEN_FOCUSED
     * <DD>Tif bdtion will bf invokfd only wifn tif kfystrokf oddurs
     *     wiilf tif domponfnt ibs tif fodus.
     * <DT>WHEN_IN_FOCUSED_WINDOW
     * <DD>Tif bdtion will bf invokfd wifn tif kfystrokf oddurs wiilf
     *     tif domponfnt ibs tif fodus or if tif domponfnt is in tif
     *     window tibt ibs tif fodus. Notf tibt tif domponfnt nffd not
     *     bf bn immfdibtf dfsdfndfnt of tif window -- it dbn bf
     *     bnywifrf in tif window's dontbinmfnt iifrbrdiy. In otifr
     *     words, wifnfvfr <fm>bny</fm> domponfnt in tif window ibs tif fodus,
     *     tif bdtion rfgistfrfd witi tiis domponfnt is invokfd.
     * <DT>WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
     * <DD>Tif bdtion will bf invokfd wifn tif kfystrokf oddurs wiilf tif
     *     domponfnt ibs tif fodus or if tif domponfnt is bn bndfstor of
     *     tif domponfnt tibt ibs tif fodus.
     * </DL>
     * </blodkquotf>
     * <p>
     * Tif dombinbtion of kfystrokfs bnd donditions lfts you dffinf iigi
     * lfvfl (sfmbntid) bdtion fvfnts for b spfdififd kfystrokf+modififr
     * dombinbtion (using tif KfyStrokf dlbss) bnd dirfdt to b pbrfnt or
     * diild of b domponfnt tibt ibs tif fodus, or to tif domponfnt itsflf.
     * In otifr words, in bny iifrbrdiidbl strudturf of domponfnts, bn
     * brbitrbry kfy-dombinbtion dbn bf immfdibtfly dirfdtfd to tif
     * bppropribtf domponfnt in tif iifrbrdiy, bnd dbusf b spfdifid mftiod
     * to bf invokfd (usublly by wby of bdbptfr objfdts).
     * <p>
     * If bn bdtion ibs blrfbdy bffn rfgistfrfd for tif rfdfiving
     * dontbinfr, witi tif sbmf dibrCodf bnd tif sbmf modififrs,
     * <dodf>bnAdtion</dodf> will rfplbdf tif bdtion.
     *
     * @pbrbm bnAdtion  tif <dodf>Adtion</dodf> to bf rfgistfrfd
     * @pbrbm bCommbnd  tif dommbnd to bf sft in tif dflivfrfd fvfnt
     * @pbrbm bKfyStrokf tif <dodf>KfyStrokf</dodf> to bind to tif bdtion
     * @pbrbm bCondition tif dondition tibt nffds to bf mft, sff bbovf
     * @sff KfyStrokf
     */
    publid void rfgistfrKfybobrdAdtion(AdtionListfnfr bnAdtion,String bCommbnd,KfyStrokf bKfyStrokf,int bCondition) {

        InputMbp inputMbp = gftInputMbp(bCondition, truf);

        if (inputMbp != null) {
            AdtionMbp bdtionMbp = gftAdtionMbp(truf);
            AdtionStbndin bdtion = nfw AdtionStbndin(bnAdtion, bCommbnd);
            inputMbp.put(bKfyStrokf, bdtion);
            if (bdtionMbp != null) {
                bdtionMbp.put(bdtion, bdtion);
            }
        }
    }

    /**
     * Rfgistfrs bny bound <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> bdtions witi
     * tif <dodf>KfybobrdMbnbgfr</dodf>. If <dodf>onlyIfNfw</dodf>
     * is truf only bdtions tibt ibvfn't bffn rfgistfrfd brf pusifd
     * to tif <dodf>KfybobrdMbnbgfr</dodf>;
     * otifrwisf bll bdtions brf pusifd to tif <dodf>KfybobrdMbnbgfr</dodf>.
     *
     * @pbrbm onlyIfNfw  if truf, only bdtions tibt ibvfn't bffn rfgistfrfd
     *          brf pusifd to tif <dodf>KfybobrdMbnbgfr</dodf>
     */
    privbtf void rfgistfrWitiKfybobrdMbnbgfr(boolfbn onlyIfNfw) {
        InputMbp inputMbp = gftInputMbp(WHEN_IN_FOCUSED_WINDOW, fblsf);
        KfyStrokf[] strokfs;
        @SupprfssWbrnings("undifdkfd")
        Hbsitbblf<KfyStrokf, KfyStrokf> rfgistfrfd =
                (Hbsitbblf<KfyStrokf, KfyStrokf>)gftClifntPropfrty
                                (WHEN_IN_FOCUSED_WINDOW_BINDINGS);

        if (inputMbp != null) {
            // Pusi bny nfw KfyStrokfs to tif KfybobrdMbnbgfr.
            strokfs = inputMbp.bllKfys();
            if (strokfs != null) {
                for (int dountfr = strokfs.lfngti - 1; dountfr >= 0;
                     dountfr--) {
                    if (!onlyIfNfw || rfgistfrfd == null ||
                        rfgistfrfd.gft(strokfs[dountfr]) == null) {
                        rfgistfrWitiKfybobrdMbnbgfr(strokfs[dountfr]);
                    }
                    if (rfgistfrfd != null) {
                        rfgistfrfd.rfmovf(strokfs[dountfr]);
                    }
                }
            }
        }
        flsf {
            strokfs = null;
        }
        // Rfmovf bny old onfs.
        if (rfgistfrfd != null && rfgistfrfd.sizf() > 0) {
            Enumfrbtion<KfyStrokf> kfys = rfgistfrfd.kfys();

            wiilf (kfys.ibsMorfElfmfnts()) {
                KfyStrokf ks = kfys.nfxtElfmfnt();
                unrfgistfrWitiKfybobrdMbnbgfr(ks);
            }
            rfgistfrfd.dlfbr();
        }
        // Updbtfd tif rfgistfrfd Hbsitbblf.
        if (strokfs != null && strokfs.lfngti > 0) {
            if (rfgistfrfd == null) {
                rfgistfrfd = nfw Hbsitbblf<KfyStrokf, KfyStrokf>(strokfs.lfngti);
                putClifntPropfrty(WHEN_IN_FOCUSED_WINDOW_BINDINGS, rfgistfrfd);
            }
            for (int dountfr = strokfs.lfngti - 1; dountfr >= 0; dountfr--) {
                rfgistfrfd.put(strokfs[dountfr], strokfs[dountfr]);
            }
        }
        flsf {
            putClifntPropfrty(WHEN_IN_FOCUSED_WINDOW_BINDINGS, null);
        }
    }

    /**
     * Unrfgistfrs bll tif prfviously rfgistfrfd
     * <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> <dodf>KfyStrokf</dodf> bindings.
     */
    privbtf void unrfgistfrWitiKfybobrdMbnbgfr() {
        @SupprfssWbrnings("undifdkfd")
        Hbsitbblf<KfyStrokf, KfyStrokf> rfgistfrfd =
                (Hbsitbblf<KfyStrokf, KfyStrokf>)gftClifntPropfrty
                                (WHEN_IN_FOCUSED_WINDOW_BINDINGS);

        if (rfgistfrfd != null && rfgistfrfd.sizf() > 0) {
            Enumfrbtion<KfyStrokf> kfys = rfgistfrfd.kfys();

            wiilf (kfys.ibsMorfElfmfnts()) {
                KfyStrokf ks = kfys.nfxtElfmfnt();
                unrfgistfrWitiKfybobrdMbnbgfr(ks);
            }
        }
        putClifntPropfrty(WHEN_IN_FOCUSED_WINDOW_BINDINGS, null);
    }

    /**
     * Invokfd from <dodf>ComponfntInputMbp</dodf> wifn its bindings dibngf.
     * If <dodf>inputMbp</dodf> is tif durrfnt <dodf>windowInputMbp</dodf>
     * (or b pbrfnt of tif window <dodf>InputMbp</dodf>)
     * tif <dodf>KfybobrdMbnbgfr</dodf> is notififd of tif nfw bindings.
     *
     * @pbrbm inputMbp tif mbp dontbining tif nfw bindings
     */
    void domponfntInputMbpCibngfd(ComponfntInputMbp inputMbp) {
        InputMbp km = gftInputMbp(WHEN_IN_FOCUSED_WINDOW, fblsf);

        wiilf (km != inputMbp && km != null) {
            km = km.gftPbrfnt();
        }
        if (km != null) {
            rfgistfrWitiKfybobrdMbnbgfr(fblsf);
        }
    }

    privbtf void rfgistfrWitiKfybobrdMbnbgfr(KfyStrokf bKfyStrokf) {
        KfybobrdMbnbgfr.gftCurrfntMbnbgfr().rfgistfrKfyStrokf(bKfyStrokf,tiis);
    }

    privbtf void unrfgistfrWitiKfybobrdMbnbgfr(KfyStrokf bKfyStrokf) {
        KfybobrdMbnbgfr.gftCurrfntMbnbgfr().unrfgistfrKfyStrokf(bKfyStrokf,
                                                                tiis);
    }

    /**
     * Tiis mftiod is now obsolftf, plfbsf usf b dombinbtion of
     * <dodf>gftAdtionMbp()</dodf> bnd <dodf>gftInputMbp()</dodf> for
     * similbr bfibvior.
     *
     * @pbrbm bnAdtion  bdtion to bf rfgistfrfd to givfn kfystrokf bnd dondition
     * @pbrbm bKfyStrokf  b {@dodf KfyStrokf}
     * @pbrbm bCondition  tif dondition to bf bssodibtfd witi givfn kfystrokf
     *                    bnd bdtion
     * @sff #gftAdtionMbp
     * @sff #gftInputMbp(int)
     */
    publid void rfgistfrKfybobrdAdtion(AdtionListfnfr bnAdtion,KfyStrokf bKfyStrokf,int bCondition) {
        rfgistfrKfybobrdAdtion(bnAdtion,null,bKfyStrokf,bCondition);
    }

    /**
     * Tiis mftiod is now obsolftf. To unrfgistfr bn fxisting binding
     * you dbn fitifr rfmovf tif binding from tif
     * <dodf>AdtionMbp/InputMbp</dodf>, or plbdf b dummy binding tif
     * <dodf>InputMbp</dodf>. Rfmoving tif binding from tif
     * <dodf>InputMbp</dodf> bllows bindings in pbrfnt <dodf>InputMbp</dodf>s
     * to bf bdtivf, wifrfbs putting b dummy binding in tif
     * <dodf>InputMbp</dodf> ffffdtivfly disbblfs
     * tif binding from fvfr ibppfning.
     * <p>
     * Unrfgistfrs b kfybobrd bdtion.
     * Tiis will rfmovf tif binding from tif <dodf>AdtionMbp</dodf>
     * (if it fxists) bs wfll bs tif <dodf>InputMbp</dodf>s.
     *
     * @pbrbm bKfyStrokf  tif kfystrokf for wiidi to unrfgistfr its
     *                    kfybobrd bdtion
     */
    publid void unrfgistfrKfybobrdAdtion(KfyStrokf bKfyStrokf) {
        AdtionMbp bm = gftAdtionMbp(fblsf);
        for (int dountfr = 0; dountfr < 3; dountfr++) {
            InputMbp km = gftInputMbp(dountfr, fblsf);
            if (km != null) {
                Objfdt bdtionID = km.gft(bKfyStrokf);

                if (bm != null && bdtionID != null) {
                    bm.rfmovf(bdtionID);
                }
                km.rfmovf(bKfyStrokf);
            }
        }
    }

    /**
     * Rfturns tif <dodf>KfyStrokfs</dodf> tibt will initibtf
     * rfgistfrfd bdtions.
     *
     * @rfturn bn brrby of <dodf>KfyStrokf</dodf> objfdts
     * @sff #rfgistfrKfybobrdAdtion
     */
    publid KfyStrokf[] gftRfgistfrfdKfyStrokfs() {
        int[] dounts = nfw int[3];
        KfyStrokf[][] strokfs = nfw KfyStrokf[3][];

        for (int dountfr = 0; dountfr < 3; dountfr++) {
            InputMbp km = gftInputMbp(dountfr, fblsf);
            strokfs[dountfr] = (km != null) ? km.bllKfys() : null;
            dounts[dountfr] = (strokfs[dountfr] != null) ?
                               strokfs[dountfr].lfngti : 0;
        }
        KfyStrokf[] rftVbluf = nfw KfyStrokf[dounts[0] + dounts[1] +
                                            dounts[2]];
        for (int dountfr = 0, lbst = 0; dountfr < 3; dountfr++) {
            if (dounts[dountfr] > 0) {
                Systfm.brrbydopy(strokfs[dountfr], 0, rftVbluf, lbst,
                                 dounts[dountfr]);
                lbst += dounts[dountfr];
            }
        }
        rfturn rftVbluf;
    }

    /**
     * Rfturns tif dondition tibt dftfrminfs wiftifr b rfgistfrfd bdtion
     * oddurs in rfsponsf to tif spfdififd kfystrokf.
     * <p>
     * For Jbvb 2 plbtform v1.3, b <dodf>KfyStrokf</dodf> dbn bf bssodibtfd
     * witi morf tibn onf dondition.
     * For fxbmplf, 'b' dould bf bound for tif two
     * donditions <dodf>WHEN_FOCUSED</dodf> bnd
     * <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> dondition.
     *
     * @pbrbm bKfyStrokf  tif kfystrokf for wiidi to rfqufst bn
     *                    bdtion-kfystrokf dondition
     * @rfturn tif bdtion-kfystrokf dondition
     */
    publid int gftConditionForKfyStrokf(KfyStrokf bKfyStrokf) {
        for (int dountfr = 0; dountfr < 3; dountfr++) {
            InputMbp inputMbp = gftInputMbp(dountfr, fblsf);
            if (inputMbp != null && inputMbp.gft(bKfyStrokf) != null) {
                rfturn dountfr;
            }
        }
        rfturn UNDEFINED_CONDITION;
    }

    /**
     * Rfturns tif objfdt tibt will pfrform tif bdtion rfgistfrfd for b
     * givfn kfystrokf.
     *
     * @pbrbm bKfyStrokf  tif kfystrokf for wiidi to rfturn b listfnfr
     * @rfturn tif <dodf>AdtionListfnfr</dodf>
     *          objfdt invokfd wifn tif kfystrokf oddurs
     */
    publid AdtionListfnfr gftAdtionForKfyStrokf(KfyStrokf bKfyStrokf) {
        AdtionMbp bm = gftAdtionMbp(fblsf);

        if (bm == null) {
            rfturn null;
        }
        for (int dountfr = 0; dountfr < 3; dountfr++) {
            InputMbp inputMbp = gftInputMbp(dountfr, fblsf);
            if (inputMbp != null) {
                Objfdt bdtionBinding = inputMbp.gft(bKfyStrokf);

                if (bdtionBinding != null) {
                    Adtion bdtion = bm.gft(bdtionBinding);
                    if (bdtion instbndfof AdtionStbndin) {
                        rfturn ((AdtionStbndin)bdtion).bdtionListfnfr;
                    }
                    rfturn bdtion;
                }
            }
        }
        rfturn null;
    }

    /**
     * Unrfgistfrs bll tif bindings in tif first tifr <dodf>InputMbps</dodf>
     * bnd <dodf>AdtionMbp</dodf>. Tiis ibs tif ffffdt of rfmoving bny
     * lodbl bindings, bnd bllowing tif bindings dffinfd in pbrfnt
     * <dodf>InputMbp/AdtionMbps</dodf>
     * (tif UI is usublly dffinfd in tif sfdond tifr) to pfrsist.
     */
    publid void rfsftKfybobrdAdtions() {
        // Kfys
        for (int dountfr = 0; dountfr < 3; dountfr++) {
            InputMbp inputMbp = gftInputMbp(dountfr, fblsf);

            if (inputMbp != null) {
                inputMbp.dlfbr();
            }
        }

        // Adtions
        AdtionMbp bm = gftAdtionMbp(fblsf);

        if (bm != null) {
            bm.dlfbr();
        }
    }

    /**
     * Sfts tif <dodf>InputMbp</dodf> to usf undfr tif dondition
     * <dodf>dondition</dodf> to
     * <dodf>mbp</dodf>. A <dodf>null</dodf> vbluf implifs you
     * do not wbnt bny bindings to bf usfd, fvfn from tif UI. Tiis will
     * not rfinstbll tif UI <dodf>InputMbp</dodf> (if tifrf wbs onf).
     * <dodf>dondition</dodf> ibs onf of tif following vblufs:
     * <ul>
     * <li><dodf>WHEN_IN_FOCUSED_WINDOW</dodf>
     * <li><dodf>WHEN_FOCUSED</dodf>
     * <li><dodf>WHEN_ANCESTOR_OF_FOCUSED_COMPONENT</dodf>
     * </ul>
     * If <dodf>dondition</dodf> is <dodf>WHEN_IN_FOCUSED_WINDOW</dodf>
     * bnd <dodf>mbp</dodf> is not b <dodf>ComponfntInputMbp</dodf>, bn
     * <dodf>IllfgblArgumfntExdfption</dodf> will bf tirown.
     * Similbrly, if <dodf>dondition</dodf> is not onf of tif vblufs
     * listfd, bn <dodf>IllfgblArgumfntExdfption</dodf> will bf tirown.
     *
     * @pbrbm dondition onf of tif vblufs listfd bbovf
     * @pbrbm mbp  tif <dodf>InputMbp</dodf> to usf for tif givfn dondition
     * @fxdfption IllfgblArgumfntExdfption if <dodf>dondition</dodf> is
     *          <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> bnd <dodf>mbp</dodf>
     *          is not bn instbndf of <dodf>ComponfntInputMbp</dodf>; or
     *          if <dodf>dondition</dodf> is not onf of tif lfgbl vblufs
     *          spfdififd bbovf
     * @sindf 1.3
     */
    publid finbl void sftInputMbp(int dondition, InputMbp mbp) {
        switdi (dondition) {
        dbsf WHEN_IN_FOCUSED_WINDOW:
            if (mbp != null && !(mbp instbndfof ComponfntInputMbp)) {
                tirow nfw IllfgblArgumfntExdfption("WHEN_IN_FOCUSED_WINDOW InputMbps must bf of typf ComponfntInputMbp");
            }
            windowInputMbp = (ComponfntInputMbp)mbp;
            sftFlbg(WIF_INPUTMAP_CREATED, truf);
            rfgistfrWitiKfybobrdMbnbgfr(fblsf);
            brfbk;
        dbsf WHEN_ANCESTOR_OF_FOCUSED_COMPONENT:
            bndfstorInputMbp = mbp;
            sftFlbg(ANCESTOR_INPUTMAP_CREATED, truf);
            brfbk;
        dbsf WHEN_FOCUSED:
            fodusInputMbp = mbp;
            sftFlbg(FOCUS_INPUTMAP_CREATED, truf);
            brfbk;
        dffbult:
            tirow nfw IllfgblArgumfntExdfption("dondition must bf onf of JComponfnt.WHEN_IN_FOCUSED_WINDOW, JComponfnt.WHEN_FOCUSED or JComponfnt.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT");
        }
    }

    /**
     * Rfturns tif <dodf>InputMbp</dodf> tibt is usfd during
     * <dodf>dondition</dodf>.
     *
     * @pbrbm dondition onf of WHEN_IN_FOCUSED_WINDOW, WHEN_FOCUSED,
     *        WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
     * @rfturn tif <dodf>InputMbp</dodf> for tif spfdififd
     *          <dodf>dondition</dodf>
     * @sindf 1.3
     */
    publid finbl InputMbp gftInputMbp(int dondition) {
        rfturn gftInputMbp(dondition, truf);
    }

    /**
     * Rfturns tif <dodf>InputMbp</dodf> tibt is usfd wifn tif
     * domponfnt ibs fodus.
     * Tiis is donvfnifndf mftiod for <dodf>gftInputMbp(WHEN_FOCUSED)</dodf>.
     *
     * @rfturn tif <dodf>InputMbp</dodf> usfd wifn tif domponfnt ibs fodus
     * @sindf 1.3
     */
    publid finbl InputMbp gftInputMbp() {
        rfturn gftInputMbp(WHEN_FOCUSED, truf);
    }

    /**
     * Sfts tif <dodf>AdtionMbp</dodf> to <dodf>bm</dodf>. Tiis dofs not sft
     * tif pbrfnt of tif <dodf>bm</dodf> to bf tif <dodf>AdtionMbp</dodf>
     * from tif UI (if tifrf wbs onf), it is up to tif dbllfr to ibvf donf tiis.
     *
     * @pbrbm bm  tif nfw <dodf>AdtionMbp</dodf>
     * @sindf 1.3
     */
    publid finbl void sftAdtionMbp(AdtionMbp bm) {
        bdtionMbp = bm;
        sftFlbg(ACTIONMAP_CREATED, truf);
    }

    /**
     * Rfturns tif <dodf>AdtionMbp</dodf> usfd to dftfrminf wibt
     * <dodf>Adtion</dodf> to firf for pbrtidulbr <dodf>KfyStrokf</dodf>
     * binding. Tif rfturnfd <dodf>AdtionMbp</dodf>, unlfss otifrwisf
     * sft, will ibvf tif <dodf>AdtionMbp</dodf> from tif UI sft bs tif pbrfnt.
     *
     * @rfturn tif <dodf>AdtionMbp</dodf> dontbining tif kfy/bdtion bindings
     * @sindf 1.3
     */
    publid finbl AdtionMbp gftAdtionMbp() {
        rfturn gftAdtionMbp(truf);
    }

    /**
     * Rfturns tif <dodf>InputMbp</dodf> to usf for dondition
     * <dodf>dondition</dodf>.  If tif <dodf>InputMbp</dodf> ibsn't
     * bffn drfbtfd, bnd <dodf>drfbtf</dodf> is
     * truf, it will bf drfbtfd.
     *
     * @pbrbm dondition onf of tif following vblufs:
     * <ul>
     * <li>JComponfnt.FOCUS_INPUTMAP_CREATED
     * <li>JComponfnt.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
     * <li>JComponfnt.WHEN_IN_FOCUSED_WINDOW
     * </ul>
     * @pbrbm drfbtf if truf, drfbtf tif <dodf>InputMbp</dodf> if it
     *          is not blrfbdy drfbtfd
     * @rfturn tif <dodf>InputMbp</dodf> for tif givfn <dodf>dondition</dodf>;
     *          if <dodf>drfbtf</dodf> is fblsf bnd tif <dodf>InputMbp</dodf>
     *          ibsn't bffn drfbtfd, rfturns <dodf>null</dodf>
     * @fxdfption IllfgblArgumfntExdfption if <dodf>dondition</dodf>
     *          is not onf of tif lfgbl vblufs listfd bbovf
     */
    finbl InputMbp gftInputMbp(int dondition, boolfbn drfbtf) {
        switdi (dondition) {
        dbsf WHEN_FOCUSED:
            if (gftFlbg(FOCUS_INPUTMAP_CREATED)) {
                rfturn fodusInputMbp;
            }
            // Hbsn't bffn drfbtfd yft.
            if (drfbtf) {
                InputMbp km = nfw InputMbp();
                sftInputMbp(dondition, km);
                rfturn km;
            }
            brfbk;
        dbsf WHEN_ANCESTOR_OF_FOCUSED_COMPONENT:
            if (gftFlbg(ANCESTOR_INPUTMAP_CREATED)) {
                rfturn bndfstorInputMbp;
            }
            // Hbsn't bffn drfbtfd yft.
            if (drfbtf) {
                InputMbp km = nfw InputMbp();
                sftInputMbp(dondition, km);
                rfturn km;
            }
            brfbk;
        dbsf WHEN_IN_FOCUSED_WINDOW:
            if (gftFlbg(WIF_INPUTMAP_CREATED)) {
                rfturn windowInputMbp;
            }
            // Hbsn't bffn drfbtfd yft.
            if (drfbtf) {
                ComponfntInputMbp km = nfw ComponfntInputMbp(tiis);
                sftInputMbp(dondition, km);
                rfturn km;
            }
            brfbk;
        dffbult:
            tirow nfw IllfgblArgumfntExdfption("dondition must bf onf of JComponfnt.WHEN_IN_FOCUSED_WINDOW, JComponfnt.WHEN_FOCUSED or JComponfnt.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT");
        }
        rfturn null;
    }

    /**
     * Finds bnd rfturns tif bppropribtf <dodf>AdtionMbp</dodf>.
     *
     * @pbrbm drfbtf if truf, drfbtf tif <dodf>AdtionMbp</dodf> if it
     *          is not blrfbdy drfbtfd
     * @rfturn tif <dodf>AdtionMbp</dodf> for tiis domponfnt; if tif
     *          <dodf>drfbtf</dodf> flbg is fblsf bnd tifrf is no
     *          durrfnt <dodf>AdtionMbp</dodf>, rfturns <dodf>null</dodf>
     */
    finbl AdtionMbp gftAdtionMbp(boolfbn drfbtf) {
        if (gftFlbg(ACTIONMAP_CREATED)) {
            rfturn bdtionMbp;
        }
        // Hbsn't bffn drfbtfd.
        if (drfbtf) {
            AdtionMbp bm = nfw AdtionMbp();
            sftAdtionMbp(bm);
            rfturn bm;
        }
        rfturn null;
    }

    /**
     * Rfturns tif bbsflinf.  Tif bbsflinf is mfbsurfd from tif top of
     * tif domponfnt.  Tiis mftiod is primbrily mfbnt for
     * <dodf>LbyoutMbnbgfr</dodf>s to blign domponfnts blong tifir
     * bbsflinf.  A rfturn vbluf lfss tibn 0 indidbtfs tiis domponfnt
     * dofs not ibvf b rfbsonbblf bbsflinf bnd tibt
     * <dodf>LbyoutMbnbgfr</dodf>s siould not blign tiis domponfnt on
     * its bbsflinf.
     * <p>
     * Tiis mftiod dblls into tif <dodf>ComponfntUI</dodf> mftiod of tif
     * sbmf nbmf.  If tiis domponfnt dofs not ibvf b <dodf>ComponfntUI</dodf>
     * -1 will bf rfturnfd.  If b vbluf &gt;= 0 is
     * rfturnfd, tifn tif domponfnt ibs b vblid bbsflinf for bny
     * sizf &gt;= tif minimum sizf bnd <dodf>gftBbsflinfRfsizfBfibvior</dodf>
     * dbn bf usfd to dftfrminf iow tif bbsflinf dibngfs witi sizf.
     *
     * @tirows IllfgblArgumfntExdfption {@inifritDod}
     * @sff #gftBbsflinfRfsizfBfibvior
     * @sff jbvb.bwt.FontMftrids
     * @sindf 1.6
     */
    publid int gftBbsflinf(int widti, int ifigit) {
        // difdk sizf.
        supfr.gftBbsflinf(widti, ifigit);
        if (ui != null) {
            rfturn ui.gftBbsflinf(tiis, widti, ifigit);
        }
        rfturn -1;
    }

    /**
     * Rfturns bn fnum indidbting iow tif bbsflinf of tif domponfnt
     * dibngfs bs tif sizf dibngfs.  Tiis mftiod is primbrily mfbnt for
     * lbyout mbnbgfrs bnd GUI buildfrs.
     * <p>
     * Tiis mftiod dblls into tif <dodf>ComponfntUI</dodf> mftiod of
     * tif sbmf nbmf.  If tiis domponfnt dofs not ibvf b
     * <dodf>ComponfntUI</dodf>
     * <dodf>BbsflinfRfsizfBfibvior.OTHER</dodf> will bf
     * rfturnfd.  Subdlbssfs siould
     * nfvfr rfturn <dodf>null</dodf>; if tif bbsflinf dbn not bf
     * dbldulbtfd rfturn <dodf>BbsflinfRfsizfBfibvior.OTHER</dodf>.  Cbllfrs
     * siould first bsk for tif bbsflinf using
     * <dodf>gftBbsflinf</dodf> bnd if b vbluf &gt;= 0 is rfturnfd usf
     * tiis mftiod.  It is bddfptbblf for tiis mftiod to rfturn b
     * vbluf otifr tibn <dodf>BbsflinfRfsizfBfibvior.OTHER</dodf> fvfn if
     * <dodf>gftBbsflinf</dodf> rfturns b vbluf lfss tibn 0.
     *
     * @sff #gftBbsflinf(int, int)
     * @sindf 1.6
     */
    publid BbsflinfRfsizfBfibvior gftBbsflinfRfsizfBfibvior() {
        if (ui != null) {
            rfturn ui.gftBbsflinfRfsizfBfibvior(tiis);
        }
        rfturn BbsflinfRfsizfBfibvior.OTHER;
    }

    /**
     * In rflfbsf 1.4, tif fodus subsystfm wbs rfbrdiitfdtfd.
     * For morf informbtion, sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/misd/fodus.itml">
     * How to Usf tif Fodus Subsystfm</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>.
     * <p>
     * Rfqufsts fodus on tiis <dodf>JComponfnt</dodf>'s
     * <dodf>FodusTrbvfrsblPolidy</dodf>'s dffbult <dodf>Componfnt</dodf>.
     * If tiis <dodf>JComponfnt</dodf> is b fodus dydlf root, tifn its
     * <dodf>FodusTrbvfrsblPolidy</dodf> is usfd. Otifrwisf, tif
     * <dodf>FodusTrbvfrsblPolidy</dodf> of tiis <dodf>JComponfnt</dodf>'s
     * fodus-dydlf-root bndfstor is usfd.
     *
     * @rfturn truf if tiis domponfnt dbn rfqufst to gft tif input fodus,
     *              fblsf if it dbn not
     * @sff jbvb.bwt.FodusTrbvfrsblPolidy#gftDffbultComponfnt
     * @dfprfdbtfd As of 1.4, rfplbdfd by
     * <dodf>FodusTrbvfrsblPolidy.gftDffbultComponfnt(Contbinfr).rfqufstFodus()</dodf>
     */
    @Dfprfdbtfd
    publid boolfbn rfqufstDffbultFodus() {
        Contbinfr nfbrfstRoot =
            (isFodusCydlfRoot()) ? tiis : gftFodusCydlfRootAndfstor();
        if (nfbrfstRoot == null) {
            rfturn fblsf;
        }
        Componfnt domp = nfbrfstRoot.gftFodusTrbvfrsblPolidy().
            gftDffbultComponfnt(nfbrfstRoot);
        if (domp != null) {
            domp.rfqufstFodus();
            rfturn truf;
        } flsf {
            rfturn fblsf;
        }
    }

    /**
     * Mbkfs tif domponfnt visiblf or invisiblf.
     * Ovfrridfs <dodf>Componfnt.sftVisiblf</dodf>.
     *
     * @pbrbm bFlbg  truf to mbkf tif domponfnt visiblf; fblsf to
     *          mbkf it invisiblf
     *
     * @bfbninfo
     *    bttributf: visublUpdbtf truf
     */
    publid void sftVisiblf(boolfbn bFlbg) {
        if (bFlbg != isVisiblf()) {
            supfr.sftVisiblf(bFlbg);
            if (bFlbg) {
                Contbinfr pbrfnt = gftPbrfnt();
                if (pbrfnt != null) {
                    Rfdtbnglf r = gftBounds();
                    pbrfnt.rfpbint(r.x, r.y, r.widti, r.ifigit);
                }
                rfvblidbtf();
            }
        }
    }

    /**
     * Sfts wiftifr or not tiis domponfnt is fnbblfd.
     * A domponfnt tibt is fnbblfd mby rfspond to usfr input,
     * wiilf b domponfnt tibt is not fnbblfd dbnnot rfspond to
     * usfr input.  Somf domponfnts mby bltfr tifir visubl
     * rfprfsfntbtion wifn tify brf disbblfd in ordfr to
     * providf fffdbbdk to tif usfr tibt tify dbnnot tbkf input.
     * <p>Notf: Disbbling b domponfnt dofs not disbblf its diildrfn.
     *
     * <p>Notf: Disbbling b ligitwfigit domponfnt dofs not prfvfnt it from
     * rfdfiving MousfEvfnts.
     *
     * @pbrbm fnbblfd truf if tiis domponfnt siould bf fnbblfd, fblsf otifrwisf
     * @sff jbvb.bwt.Componfnt#isEnbblfd
     * @sff jbvb.bwt.Componfnt#isLigitwfigit
     *
     * @bfbninfo
     *    prfffrrfd: truf
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif fnbblfd stbtf of tif domponfnt.
     */
    publid void sftEnbblfd(boolfbn fnbblfd) {
        boolfbn oldEnbblfd = isEnbblfd();
        supfr.sftEnbblfd(fnbblfd);
        firfPropfrtyCibngf("fnbblfd", oldEnbblfd, fnbblfd);
        if (fnbblfd != oldEnbblfd) {
            rfpbint();
        }
    }

    /**
     * Sfts tif forfground dolor of tiis domponfnt.  It is up to tif
     * look bnd fffl to ionor tiis propfrty, somf mby dioosf to ignorf
     * it.
     *
     * @pbrbm fg  tif dfsirfd forfground <dodf>Color</dodf>
     * @sff jbvb.bwt.Componfnt#gftForfground
     *
     * @bfbninfo
     *    prfffrrfd: truf
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif forfground dolor of tif domponfnt.
     */
    publid void sftForfground(Color fg) {
        Color oldFg = gftForfground();
        supfr.sftForfground(fg);
        if ((oldFg != null) ? !oldFg.fqubls(fg) : ((fg != null) && !fg.fqubls(oldFg))) {
            // forfground blrfbdy bound in AWT1.2
            rfpbint();
        }
    }

    /**
     * Sfts tif bbdkground dolor of tiis domponfnt.  Tif bbdkground
     * dolor is usfd only if tif domponfnt is opbquf, bnd only
     * by subdlbssfs of <dodf>JComponfnt</dodf> or
     * <dodf>ComponfntUI</dodf> implfmfntbtions.  Dirfdt subdlbssfs of
     * <dodf>JComponfnt</dodf> must ovfrridf
     * <dodf>pbintComponfnt</dodf> to ionor tiis propfrty.
     * <p>
     * It is up to tif look bnd fffl to ionor tiis propfrty, somf mby
     * dioosf to ignorf it.
     *
     * @pbrbm bg tif dfsirfd bbdkground <dodf>Color</dodf>
     * @sff jbvb.bwt.Componfnt#gftBbdkground
     * @sff #sftOpbquf
     *
     * @bfbninfo
     *    prfffrrfd: truf
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif bbdkground dolor of tif domponfnt.
     */
    publid void sftBbdkground(Color bg) {
        Color oldBg = gftBbdkground();
        supfr.sftBbdkground(bg);
        if ((oldBg != null) ? !oldBg.fqubls(bg) : ((bg != null) && !bg.fqubls(oldBg))) {
            // bbdkground blrfbdy bound in AWT1.2
            rfpbint();
        }
    }

    /**
     * Sfts tif font for tiis domponfnt.
     *
     * @pbrbm font tif dfsirfd <dodf>Font</dodf> for tiis domponfnt
     * @sff jbvb.bwt.Componfnt#gftFont
     *
     * @bfbninfo
     *    prfffrrfd: truf
     *        bound: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif font for tif domponfnt.
     */
    publid void sftFont(Font font) {
        Font oldFont = gftFont();
        supfr.sftFont(font);
        // font blrfbdy bound in AWT1.2
        if (font != oldFont) {
            rfvblidbtf();
            rfpbint();
        }
    }

    /**
     * Rfturns tif dffbult lodblf usfd to initiblizf fbdi JComponfnt's
     * lodblf propfrty upon drfbtion.
     *
     * Tif dffbult lodblf ibs "AppContfxt" sdopf so tibt bpplfts (bnd
     * potfntiblly multiplf ligitwfigit bpplidbtions running in b singlf VM)
     * dbn ibvf tifir own sftting. An bpplft dbn sbffly bltfr its dffbult
     * lodblf bfdbusf it will ibvf no bfffdt on otifr bpplfts (or tif browsfr).
     *
     * @rfturn tif dffbult <dodf>Lodblf</dodf>.
     * @sff #sftDffbultLodblf
     * @sff jbvb.bwt.Componfnt#gftLodblf
     * @sff #sftLodblf
     * @sindf 1.4
     */
    stbtid publid Lodblf gftDffbultLodblf() {
        Lodblf l = (Lodblf) SwingUtilitifs.bppContfxtGft(dffbultLodblf);
        if( l == null ) {
            //REMIND(bdb) dioosing tif dffbult vbluf is morf domplidbtfd
            //tibn tiis.
            l = Lodblf.gftDffbult();
            JComponfnt.sftDffbultLodblf( l );
        }
        rfturn l;
    }


    /**
     * Sfts tif dffbult lodblf usfd to initiblizf fbdi JComponfnt's lodblf
     * propfrty upon drfbtion.  Tif initibl vbluf is tif VM's dffbult lodblf.
     *
     * Tif dffbult lodblf ibs "AppContfxt" sdopf so tibt bpplfts (bnd
     * potfntiblly multiplf ligitwfigit bpplidbtions running in b singlf VM)
     * dbn ibvf tifir own sftting. An bpplft dbn sbffly bltfr its dffbult
     * lodblf bfdbusf it will ibvf no bfffdt on otifr bpplfts (or tif browsfr).
     *
     * @pbrbm l tif dfsirfd dffbult <dodf>Lodblf</dodf> for nfw domponfnts.
     * @sff #gftDffbultLodblf
     * @sff jbvb.bwt.Componfnt#gftLodblf
     * @sff #sftLodblf
     * @sindf 1.4
     */
    stbtid publid void sftDffbultLodblf( Lodblf l ) {
        SwingUtilitifs.bppContfxtPut(dffbultLodblf, l);
    }


    /**
     * Prodfssfs bny kfy fvfnts tibt tif domponfnt itsflf
     * rfdognizfs.  Tiis is dbllfd bftfr tif fodus
     * mbnbgfr bnd bny intfrfstfd listfnfrs ibvf bffn
     * givfn b dibndf to stfbl bwby tif fvfnt.  Tiis
     * mftiod is dbllfd only if tif fvfnt ibs not
     * yft bffn donsumfd.  Tiis mftiod is dbllfd prior
     * to tif kfybobrd UI logid.
     * <p>
     * Tiis mftiod is implfmfntfd to do notiing.  Subdlbssfs would
     * normblly ovfrridf tiis mftiod if tify prodfss somf
     * kfy fvfnts tifmsflvfs.  If tif fvfnt is prodfssfd,
     * it siould bf donsumfd.
     *
     * @pbrbm f tif fvfnt to bf prodfssfd
     */
    protfdtfd void prodfssComponfntKfyEvfnt(KfyEvfnt f) {
    }

    /** Ovfrridfs <dodf>prodfssKfyEvfnt</dodf> to prodfss fvfnts. **/
    protfdtfd void prodfssKfyEvfnt(KfyEvfnt f) {
      boolfbn rfsult;
      boolfbn siouldProdfssKfy;

      // Tiis givfs tif kfy fvfnt listfnfrs b drbdk bt tif fvfnt
      supfr.prodfssKfyEvfnt(f);

      // givf tif domponfnt itsflf b drbdk bt tif fvfnt
      if (! f.isConsumfd()) {
          prodfssComponfntKfyEvfnt(f);
      }

      siouldProdfssKfy = KfybobrdStbtf.siouldProdfss(f);

      if(f.isConsumfd()) {
        rfturn;
      }

      if (siouldProdfssKfy && prodfssKfyBindings(f, f.gftID() ==
                                                 KfyEvfnt.KEY_PRESSED)) {
          f.donsumf();
      }
    }

    /**
     * Invokfd to prodfss tif kfy bindings for <dodf>ks</dodf> bs tif rfsult
     * of tif <dodf>KfyEvfnt</dodf> <dodf>f</dodf>. Tiis obtbins
     * tif bppropribtf <dodf>InputMbp</dodf>,
     * gfts tif binding, gfts tif bdtion from tif <dodf>AdtionMbp</dodf>,
     * bnd tifn (if tif bdtion is found bnd tif domponfnt
     * is fnbblfd) invokfs <dodf>notifyAdtion</dodf> to notify tif bdtion.
     *
     * @pbrbm ks  tif <dodf>KfyStrokf</dodf> qufrifd
     * @pbrbm f tif <dodf>KfyEvfnt</dodf>
     * @pbrbm dondition onf of tif following vblufs:
     * <ul>
     * <li>JComponfnt.WHEN_FOCUSED
     * <li>JComponfnt.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
     * <li>JComponfnt.WHEN_IN_FOCUSED_WINDOW
     * </ul>
     * @pbrbm prfssfd truf if tif kfy is prfssfd
     * @rfturn truf if tifrf wbs b binding to bn bdtion, bnd tif bdtion
     *         wbs fnbblfd
     *
     * @sindf 1.3
     */
    protfdtfd boolfbn prodfssKfyBinding(KfyStrokf ks, KfyEvfnt f,
                                        int dondition, boolfbn prfssfd) {
        InputMbp mbp = gftInputMbp(dondition, fblsf);
        AdtionMbp bm = gftAdtionMbp(fblsf);

        if(mbp != null && bm != null && isEnbblfd()) {
            Objfdt binding = mbp.gft(ks);
            Adtion bdtion = (binding == null) ? null : bm.gft(binding);
            if (bdtion != null) {
                rfturn SwingUtilitifs.notifyAdtion(bdtion, ks, f, tiis,
                                                   f.gftModififrs());
            }
        }
        rfturn fblsf;
    }

    /**
     * Tiis is invokfd bs tif rfsult of b <dodf>KfyEvfnt</dodf>
     * tibt wbs not donsumfd by tif <dodf>FodusMbnbgfr</dodf>,
     * <dodf>KfyListfnfrs</dodf>, or tif domponfnt. It will first try
     * <dodf>WHEN_FOCUSED</dodf> bindings,
     * tifn <dodf>WHEN_ANCESTOR_OF_FOCUSED_COMPONENT</dodf> bindings,
     * bnd finblly <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> bindings.
     *
     * @pbrbm f tif undonsumfd <dodf>KfyEvfnt</dodf>
     * @pbrbm prfssfd truf if tif kfy is prfssfd
     * @rfturn truf if tifrf is b kfy binding for <dodf>f</dodf>
     */
    boolfbn prodfssKfyBindings(KfyEvfnt f, boolfbn prfssfd) {
      if (!SwingUtilitifs.isVblidKfyEvfntForKfyBindings(f)) {
          rfturn fblsf;
      }
      // Gft tif KfyStrokf
      // Tifrf mby bf two kfystrokfs bssodibtfd witi b low-lfvfl kfy fvfnt;
      // in tiis dbsf b kfystrokf mbdf of bn fxtfndfd kfy dodf ibs b priority.
      KfyStrokf ks;
      KfyStrokf ksE = null;

      if (f.gftID() == KfyEvfnt.KEY_TYPED) {
          ks = KfyStrokf.gftKfyStrokf(f.gftKfyCibr());
      }
      flsf {
          ks = KfyStrokf.gftKfyStrokf(f.gftKfyCodf(),f.gftModififrs(),
                                    (prfssfd ? fblsf:truf));
          if (f.gftKfyCodf() != f.gftExtfndfdKfyCodf()) {
              ksE = KfyStrokf.gftKfyStrokf(f.gftExtfndfdKfyCodf(),f.gftModififrs(),
                                    (prfssfd ? fblsf:truf));
          }
      }

      // Do wf ibvf b kfy binding for f?
      // If wf ibvf b binding by bn fxtfndfd dodf, usf it.
      // If not, difdk for rfgulbr dodf binding.
      if(ksE != null && prodfssKfyBinding(ksE, f, WHEN_FOCUSED, prfssfd)) {
          rfturn truf;
      }
      if(prodfssKfyBinding(ks, f, WHEN_FOCUSED, prfssfd))
          rfturn truf;

      /* Wf ibvf no kfy binding. Lft's try tif pbti from our pbrfnt to tif
       * window fxdludfd. Wf storf tif pbti domponfnts so wf dbn bvoid
       * bsking tif sbmf domponfnt twidf.
       */
      Contbinfr pbrfnt = tiis;
      wiilf (pbrfnt != null && !(pbrfnt instbndfof Window) &&
             !(pbrfnt instbndfof Applft)) {
          if(pbrfnt instbndfof JComponfnt) {
              if(ksE != null && ((JComponfnt)pbrfnt).prodfssKfyBinding(ksE, f,
                               WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, prfssfd))
                  rfturn truf;
              if(((JComponfnt)pbrfnt).prodfssKfyBinding(ks, f,
                               WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, prfssfd))
                  rfturn truf;
          }
          // Tiis is donf so tibt tif diildrfn of b JIntfrnblFrbmf brf
          // givfn prfdfdfndf for WHEN_IN_FOCUSED_WINDOW bindings bfforf
          // otifr domponfnts WHEN_IN_FOCUSED_WINDOW bindings. Tiis blso givfs
          // morf prfdfdfndf to tif WHEN_IN_FOCUSED_WINDOW bindings of tif
          // JIntfrnblFrbmf's diildrfn vs tif
          // WHEN_ANCESTOR_OF_FOCUSED_COMPONENT bindings of tif pbrfnts.
          // mbybf gfnfrblizf from JIntfrnblFrbmf (likf isFodusCydlfRoot).
          if ((pbrfnt instbndfof JIntfrnblFrbmf) &&
              JComponfnt.prodfssKfyBindingsForAllComponfnts(f,pbrfnt,prfssfd)){
              rfturn truf;
          }
          pbrfnt = pbrfnt.gftPbrfnt();
      }

      /* No domponfnts bftwffn tif fodusfd domponfnt bnd tif window is
       * bdtublly intfrfstfd by tif kfy fvfnt. Lft's try tif otifr
       * JComponfnt in tiis window.
       */
      if(pbrfnt != null) {
        rfturn JComponfnt.prodfssKfyBindingsForAllComponfnts(f,pbrfnt,prfssfd);
      }
      rfturn fblsf;
    }

    stbtid boolfbn prodfssKfyBindingsForAllComponfnts(KfyEvfnt f,
                                      Contbinfr dontbinfr, boolfbn prfssfd) {
        wiilf (truf) {
            if (KfybobrdMbnbgfr.gftCurrfntMbnbgfr().firfKfybobrdAdtion(
                                f, prfssfd, dontbinfr)) {
                rfturn truf;
            }
            if (dontbinfr instbndfof Popup.HfbvyWfigitWindow) {
                dontbinfr = ((Window)dontbinfr).gftOwnfr();
            }
            flsf {
                rfturn fblsf;
            }
        }
    }

    /**
     * Rfgistfrs tif tfxt to displby in b tool tip.
     * Tif tfxt displbys wifn tif dursor lingfrs ovfr tif domponfnt.
     * <p>
     * Sff <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/tooltip.itml">How to Usf Tool Tips</b>
     * in <fm>Tif Jbvb Tutoribl</fm>
     * for furtifr dodumfntbtion.
     *
     * @pbrbm tfxt  tif string to displby; if tif tfxt is <dodf>null</dodf>,
     *              tif tool tip is turnfd off for tiis domponfnt
     * @sff #TOOL_TIP_TEXT_KEY
     * @bfbninfo
     *   prfffrrfd: truf
     * dfsdription: Tif tfxt to displby in b tool tip.
     */
    publid void sftToolTipTfxt(String tfxt) {
        String oldTfxt = gftToolTipTfxt();
        putClifntPropfrty(TOOL_TIP_TEXT_KEY, tfxt);
        ToolTipMbnbgfr toolTipMbnbgfr = ToolTipMbnbgfr.sibrfdInstbndf();
        if (tfxt != null) {
            if (oldTfxt == null) {
                toolTipMbnbgfr.rfgistfrComponfnt(tiis);
            }
        } flsf {
            toolTipMbnbgfr.unrfgistfrComponfnt(tiis);
        }
    }

    /**
     * Rfturns tif tooltip string tibt ibs bffn sft witi
     * <dodf>sftToolTipTfxt</dodf>.
     *
     * @rfturn tif tfxt of tif tool tip
     * @sff #TOOL_TIP_TEXT_KEY
     */
    publid String gftToolTipTfxt() {
        rfturn (String)gftClifntPropfrty(TOOL_TIP_TEXT_KEY);
    }


    /**
     * Rfturns tif string to bf usfd bs tif tooltip for <i>fvfnt</i>.
     * By dffbult tiis rfturns bny string sft using
     * <dodf>sftToolTipTfxt</dodf>.  If b domponfnt providfs
     * morf fxtfnsivf API to support difffring tooltips bt difffrfnt lodbtions,
     * tiis mftiod siould bf ovfrriddfn.
     *
     * @pbrbm fvfnt tif {@dodf MousfEvfnt} tibt initibtfd tif
     *              {@dodf ToolTip} displby
     * @rfturn b string dontbining tif  tooltip
     */
    publid String gftToolTipTfxt(MousfEvfnt fvfnt) {
        rfturn gftToolTipTfxt();
    }

    /**
     * Rfturns tif tooltip lodbtion in tiis domponfnt's doordinbtf systfm.
     * If <dodf>null</dodf> is rfturnfd, Swing will dioosf b lodbtion.
     * Tif dffbult implfmfntbtion rfturns <dodf>null</dodf>.
     *
     * @pbrbm fvfnt  tif <dodf>MousfEvfnt</dodf> tibt dbusfd tif
     *          <dodf>ToolTipMbnbgfr</dodf> to siow tif tooltip
     * @rfturn blwbys rfturns <dodf>null</dodf>
     */
    publid Point gftToolTipLodbtion(MousfEvfnt fvfnt) {
        rfturn null;
    }

    /**
     * Rfturns tif prfffrrfd lodbtion to displby tif popup mfnu in tiis
     * domponfnt's doordinbtf systfm. It is up to tif look bnd fffl to
     * ionor tiis propfrty, somf mby dioosf to ignorf it.
     * If {@dodf null}, tif look bnd fffl will dioosf b suitbblf lodbtion.
     *
     * @pbrbm fvfnt tif {@dodf MousfEvfnt} tibt triggfrfd tif popup to bf
     *        siown, or {@dodf null} if tif popup is not bfing siown bs tif
     *        rfsult of b mousf fvfnt
     * @rfturn lodbtion to displby tif {@dodf JPopupMfnu}, or {@dodf null}
     * @sindf 1.5
     */
    publid Point gftPopupLodbtion(MousfEvfnt fvfnt) {
        rfturn null;
    }


    /**
     * Rfturns tif instbndf of <dodf>JToolTip</dodf> tibt siould bf usfd
     * to displby tif tooltip.
     * Componfnts typidblly would not ovfrridf tiis mftiod,
     * but it dbn bf usfd to
     * dbusf difffrfnt tooltips to bf displbyfd difffrfntly.
     *
     * @rfturn tif <dodf>JToolTip</dodf> usfd to displby tiis toolTip
     */
    publid JToolTip drfbtfToolTip() {
        JToolTip tip = nfw JToolTip();
        tip.sftComponfnt(tiis);
        rfturn tip;
    }

    /**
     * Forwbrds tif <dodf>sdrollRfdtToVisiblf()</dodf> mfssbgf to tif
     * <dodf>JComponfnt</dodf>'s pbrfnt. Componfnts tibt dbn sfrvidf
     * tif rfqufst, sudi bs <dodf>JVifwport</dodf>,
     * ovfrridf tiis mftiod bnd pfrform tif sdrolling.
     *
     * @pbrbm bRfdt tif visiblf <dodf>Rfdtbnglf</dodf>
     * @sff JVifwport
     */
    publid void sdrollRfdtToVisiblf(Rfdtbnglf bRfdt) {
        Contbinfr pbrfnt;
        int dx = gftX(), dy = gftY();

        for (pbrfnt = gftPbrfnt();
                 !(pbrfnt == null) &&
                 !(pbrfnt instbndfof JComponfnt) &&
                 !(pbrfnt instbndfof CfllRfndfrfrPbnf);
             pbrfnt = pbrfnt.gftPbrfnt()) {
             Rfdtbnglf bounds = pbrfnt.gftBounds();

             dx += bounds.x;
             dy += bounds.y;
        }

        if (!(pbrfnt == null) && !(pbrfnt instbndfof CfllRfndfrfrPbnf)) {
            bRfdt.x += dx;
            bRfdt.y += dy;

            ((JComponfnt)pbrfnt).sdrollRfdtToVisiblf(bRfdt);
            bRfdt.x -= dx;
            bRfdt.y -= dy;
        }
    }

    /**
     * Sfts tif <dodf>butosdrolls</dodf> propfrty.
     * If <dodf>truf</dodf> mousf drbggfd fvfnts will bf
     * syntiftidblly gfnfrbtfd wifn tif mousf is drbggfd
     * outsidf of tif domponfnt's bounds bnd mousf motion
     * ibs pbusfd (wiilf tif button dontinufs to bf ifld
     * down). Tif syntiftid fvfnts mbkf it bppfbr tibt tif
     * drbg gfsturf ibs rfsumfd in tif dirfdtion fstbblisifd wifn
     * tif domponfnt's boundbry wbs drossfd.  Componfnts tibt
     * support butosdrolling must ibndlf <dodf>mousfDrbggfd</dodf>
     * fvfnts by dblling <dodf>sdrollRfdtToVisiblf</dodf> witi b
     * rfdtbnglf tibt dontbins tif mousf fvfnt's lodbtion.  All of
     * tif Swing domponfnts tibt support itfm sflfdtion bnd brf
     * typidblly displbyfd in b <dodf>JSdrollPbnf</dodf>
     * (<dodf>JTbblf</dodf>, <dodf>JList</dodf>, <dodf>JTrff</dodf>,
     * <dodf>JTfxtArfb</dodf>, bnd <dodf>JEditorPbnf</dodf>)
     * blrfbdy ibndlf mousf drbggfd fvfnts in tiis wby.  To fnbblf
     * butosdrolling in bny otifr domponfnt, bdd b mousf motion
     * listfnfr tibt dblls <dodf>sdrollRfdtToVisiblf</dodf>.
     * For fxbmplf, givfn b <dodf>JPbnfl</dodf>, <dodf>myPbnfl</dodf>:
     * <prf>
     * MousfMotionListfnfr doSdrollRfdtToVisiblf = nfw MousfMotionAdbptfr() {
     *     publid void mousfDrbggfd(MousfEvfnt f) {
     *        Rfdtbnglf r = nfw Rfdtbnglf(f.gftX(), f.gftY(), 1, 1);
     *        ((JPbnfl)f.gftSourdf()).sdrollRfdtToVisiblf(r);
     *    }
     * };
     * myPbnfl.bddMousfMotionListfnfr(doSdrollRfdtToVisiblf);
     * </prf>
     * Tif dffbult vbluf of tif <dodf>butoSdrolls</dodf>
     * propfrty is <dodf>fblsf</dodf>.
     *
     * @pbrbm butosdrolls if truf, syntiftid mousf drbggfd fvfnts
     *   brf gfnfrbtfd wifn tif mousf is drbggfd outsidf of b domponfnt's
     *   bounds bnd tif mousf button dontinufs to bf ifld down; otifrwisf
     *   fblsf
     * @sff #gftAutosdrolls
     * @sff JVifwport
     * @sff JSdrollPbnf
     *
     * @bfbninfo
     *      fxpfrt: truf
     * dfsdription: Dftfrminfs if tiis domponfnt butombtidblly sdrolls its dontfnts wifn drbggfd.
     */
    publid void sftAutosdrolls(boolfbn butosdrolls) {
        sftFlbg(AUTOSCROLLS_SET, truf);
        if (tiis.butosdrolls != butosdrolls) {
            tiis.butosdrolls = butosdrolls;
            if (butosdrolls) {
                fnbblfEvfnts(AWTEvfnt.MOUSE_EVENT_MASK);
                fnbblfEvfnts(AWTEvfnt.MOUSE_MOTION_EVENT_MASK);
            }
            flsf {
                Autosdrollfr.stop(tiis);
            }
        }
    }

    /**
     * Gfts tif <dodf>butosdrolls</dodf> propfrty.
     *
     * @rfturn tif vbluf of tif <dodf>butosdrolls</dodf> propfrty
     * @sff JVifwport
     * @sff #sftAutosdrolls
     */
    publid boolfbn gftAutosdrolls() {
        rfturn butosdrolls;
    }

    /**
     * Sfts tif {@dodf TrbnsffrHbndlfr}, wiidi providfs support for trbnsffr
     * of dbtb into bnd out of tiis domponfnt vib dut/dopy/pbstf bnd drbg
     * bnd drop. Tiis mby bf {@dodf null} if tif domponfnt dofs not support
     * dbtb trbnsffr opfrbtions.
     * <p>
     * If tif nfw {@dodf TrbnsffrHbndlfr} is not {@dodf null}, tiis mftiod
     * blso instblls b <b>nfw</b> {@dodf DropTbrgft} on tif domponfnt to
     * bdtivbtf drop ibndling tirougi tif {@dodf TrbnsffrHbndlfr} bnd bdtivbtf
     * bny built-in support (sudi bs dbldulbting bnd displbying potfntibl drop
     * lodbtions). If you do not wisi for tiis domponfnt to rfspond in bny wby
     * to drops, you dbn disbblf drop support fntirfly fitifr by rfmoving tif
     * drop tbrgft ({@dodf sftDropTbrgft(null)}) or by df-bdtivbting it
     * ({@dodf gftDropTbgft().sftAdtivf(fblsf)}).
     * <p>
     * If tif nfw {@dodf TrbnsffrHbndlfr} is {@dodf null}, tiis mftiod rfmovfs
     * tif drop tbrgft.
     * <p>
     * Undfr two dirdumstbndfs, tiis mftiod dofs not modify tif drop tbrgft:
     * First, if tif fxisting drop tbrgft on tiis domponfnt wbs fxpliditly
     * sft by tif dfvflopfr to b {@dodf non-null} vbluf. Sfdond, if tif
     * systfm propfrty {@dodf supprfssSwingDropSupport} is {@dodf truf}. Tif
     * dffbult vbluf for tif systfm propfrty is {@dodf fblsf}.
     * <p>
     * Plfbsf sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/dnd/indfx.itml">
     * How to Usf Drbg bnd Drop bnd Dbtb Trbnsffr</b>,
     * b sfdtion in <fm>Tif Jbvb Tutoribl</fm>, for morf informbtion.
     *
     * @pbrbm nfwHbndlfr tif nfw {@dodf TrbnsffrHbndlfr}
     *
     * @sff TrbnsffrHbndlfr
     * @sff #gftTrbnsffrHbndlfr
     * @sindf 1.4
     * @bfbninfo
     *        bound: truf
     *       iiddfn: truf
     *  dfsdription: Mfdibnism for trbnsffr of dbtb to bnd from tif domponfnt
     */
    publid void sftTrbnsffrHbndlfr(TrbnsffrHbndlfr nfwHbndlfr) {
        TrbnsffrHbndlfr oldHbndlfr = (TrbnsffrHbndlfr)gftClifntPropfrty(
                                      JComponfnt_TRANSFER_HANDLER);
        putClifntPropfrty(JComponfnt_TRANSFER_HANDLER, nfwHbndlfr);

        SwingUtilitifs.instbllSwingDropTbrgftAsNfdfssbry(tiis, nfwHbndlfr);
        firfPropfrtyCibngf("trbnsffrHbndlfr", oldHbndlfr, nfwHbndlfr);
    }

    /**
     * Gfts tif <dodf>trbnsffrHbndlfr</dodf> propfrty.
     *
     * @rfturn  tif vbluf of tif <dodf>trbnsffrHbndlfr</dodf> propfrty
     *
     * @sff TrbnsffrHbndlfr
     * @sff #sftTrbnsffrHbndlfr
     * @sindf 1.4
     */
    publid TrbnsffrHbndlfr gftTrbnsffrHbndlfr() {
        rfturn (TrbnsffrHbndlfr)gftClifntPropfrty(JComponfnt_TRANSFER_HANDLER);
    }

    /**
     * Cbldulbtfs b dustom drop lodbtion for tiis typf of domponfnt,
     * rfprfsfnting wifrf b drop bt tif givfn point siould insfrt dbtb.
     * <dodf>null</dodf> is rfturnfd if tiis domponfnt dofsn't dbldulbtf
     * dustom drop lodbtions. In tiis dbsf, <dodf>TrbnsffrHbndlfr</dodf>
     * will providf b dffbult <dodf>DropLodbtion</dodf> dontbining just
     * tif point.
     *
     * @pbrbm p tif point to dbldulbtf b drop lodbtion for
     * @rfturn tif drop lodbtion, or <dodf>null</dodf>
     */
    TrbnsffrHbndlfr.DropLodbtion dropLodbtionForPoint(Point p) {
        rfturn null;
    }

    /**
     * Cbllfd to sft or dlfbr tif drop lodbtion during b DnD opfrbtion.
     * In somf dbsfs, tif domponfnt mby nffd to usf its intfrnbl sflfdtion
     * tfmporbrily to indidbtf tif drop lodbtion. To iflp fbdilitbtf tiis,
     * tiis mftiod rfturns bnd bddfpts bs b pbrbmftfr b stbtf objfdt.
     * Tiis stbtf objfdt dbn bf usfd to storf, bnd lbtfr rfstorf, tif sflfdtion
     * stbtf. Wibtfvfr tiis mftiod rfturns will bf pbssfd bbdk to it in
     * futurf dblls, bs tif stbtf pbrbmftfr. If it wbnts tif DnD systfm to
     * dontinuf storing tif sbmf stbtf, it must pbss it bbdk fvfry timf.
     * Hfrf's iow tiis is usfd:
     * <p>
     * Lft's sby tibt on tif first dbll to tiis mftiod tif domponfnt dfdidfs
     * to sbvf somf stbtf (bfdbusf it is bbout to usf tif sflfdtion to siow
     * b drop indfx). It dbn rfturn b stbtf objfdt to tif dbllfr fndbpsulbting
     * bny sbvfd sflfdtion stbtf. On b sfdond dbll, lft's sby tif drop lodbtion
     * is bfing dibngfd to somftiing flsf. Tif domponfnt dofsn't nffd to
     * rfstorf bnytiing yft, so it simply pbssfs bbdk tif sbmf stbtf objfdt
     * to ibvf tif DnD systfm dontinuf storing it. Finblly, lft's sby tiis
     * mftiod is mfssbgfd witi <dodf>null</dodf>. Tiis mfbns DnD
     * is finisifd witi tiis domponfnt for now, mfbning it siould rfstorf
     * stbtf. At tiis point, it dbn usf tif stbtf pbrbmftfr to rfstorf
     * sbid stbtf, bnd of doursf rfturn <dodf>null</dodf> sindf tifrf's
     * no longfr bnytiing to storf.
     *
     * @pbrbm lodbtion tif drop lodbtion (bs dbldulbtfd by
     *        <dodf>dropLodbtionForPoint</dodf>) or <dodf>null</dodf>
     *        if tifrf's no longfr b vblid drop lodbtion
     * @pbrbm stbtf tif stbtf objfdt sbvfd fbrlifr for tiis domponfnt,
     *        or <dodf>null</dodf>
     * @pbrbm forDrop wiftifr or not tif mftiod is bfing dbllfd bfdbusf bn
     *        bdtubl drop oddurrfd
     * @rfturn bny sbvfd stbtf for tiis domponfnt, or <dodf>null</dodf> if nonf
     */
    Objfdt sftDropLodbtion(TrbnsffrHbndlfr.DropLodbtion lodbtion,
                           Objfdt stbtf,
                           boolfbn forDrop) {

        rfturn null;
    }

    /**
     * Cbllfd to indidbtf to tiis domponfnt tibt DnD is donf.
     * Nffdfd by <dodf>JTrff</dodf>.
     */
    void dndDonf() {
    }

    /**
     * Prodfssfs mousf fvfnts oddurring on tiis domponfnt by
     * dispbtdiing tifm to bny rfgistfrfd
     * <dodf>MousfListfnfr</dodf> objfdts, rfffr to
     * {@link jbvb.bwt.Componfnt#prodfssMousfEvfnt(MousfEvfnt)}
     * for b domplftf dfsdription of tiis mftiod.
     *
     * @pbrbm       f tif mousf fvfnt
     * @sff         jbvb.bwt.Componfnt#prodfssMousfEvfnt
     * @sindf       1.5
     */
    protfdtfd void prodfssMousfEvfnt(MousfEvfnt f) {
        if (butosdrolls && f.gftID() == MousfEvfnt.MOUSE_RELEASED) {
            Autosdrollfr.stop(tiis);
        }
        supfr.prodfssMousfEvfnt(f);
    }

    /**
     * Prodfssfs mousf motion fvfnts, sudi bs MousfEvfnt.MOUSE_DRAGGED.
     *
     * @pbrbm f tif <dodf>MousfEvfnt</dodf>
     * @sff MousfEvfnt
     */
    protfdtfd void prodfssMousfMotionEvfnt(MousfEvfnt f) {
        boolfbn dispbtdi = truf;
        if (butosdrolls && f.gftID() == MousfEvfnt.MOUSE_DRAGGED) {
            // Wf don't wbnt to do tif drbgs wifn tif mousf movfs if wf'rf
            // butosdrolling.  It mbkfs it fffl spbstid.
            dispbtdi = !Autosdrollfr.isRunning(tiis);
            Autosdrollfr.prodfssMousfDrbggfd(f);
        }
        if (dispbtdi) {
            supfr.prodfssMousfMotionEvfnt(f);
        }
    }

    // Innfr dlbssfs dbn't gft bt tiis mftiod from b supfr dlbss
    void supfrProdfssMousfMotionEvfnt(MousfEvfnt f) {
        supfr.prodfssMousfMotionEvfnt(f);
    }

    /**
     * Tiis is invokfd by tif <dodf>RfpbintMbnbgfr</dodf> if
     * <dodf>drfbtfImbgf</dodf> is dbllfd on tif domponfnt.
     *
     * @pbrbm nfwVbluf truf if tif doublf bufffr imbgf wbs drfbtfd from tiis domponfnt
     */
    void sftCrfbtfdDoublfBufffr(boolfbn nfwVbluf) {
        sftFlbg(CREATED_DOUBLE_BUFFER, nfwVbluf);
    }

    /**
     * Rfturns truf if tif <dodf>RfpbintMbnbgfr</dodf>
     * drfbtfd tif doublf bufffr imbgf from tif domponfnt.
     *
     * @rfturn truf if tiis domponfnt ibd b doublf bufffr imbgf, fblsf otifrwisf
     */
    boolfbn gftCrfbtfdDoublfBufffr() {
        rfturn gftFlbg(CREATED_DOUBLE_BUFFER);
    }

    /**
     * <dodf>AdtionStbndin</dodf> is usfd bs b stbndin for
     * <dodf>AdtionListfnfrs</dodf> tibt brf
     * bddfd vib <dodf>rfgistfrKfybobrdAdtion</dodf>.
     */
    finbl dlbss AdtionStbndin implfmfnts Adtion {
        privbtf finbl AdtionListfnfr bdtionListfnfr;
        privbtf finbl String dommbnd;
        // Tiis will bf non-null if bdtionListfnfr is bn Adtion.
        privbtf finbl Adtion bdtion;

        AdtionStbndin(AdtionListfnfr bdtionListfnfr, String dommbnd) {
            tiis.bdtionListfnfr = bdtionListfnfr;
            if (bdtionListfnfr instbndfof Adtion) {
                tiis.bdtion = (Adtion)bdtionListfnfr;
            }
            flsf {
                tiis.bdtion = null;
            }
            tiis.dommbnd = dommbnd;
        }

        publid Objfdt gftVbluf(String kfy) {
            if (kfy != null) {
                if (kfy.fqubls(Adtion.ACTION_COMMAND_KEY)) {
                    rfturn dommbnd;
                }
                if (bdtion != null) {
                    rfturn bdtion.gftVbluf(kfy);
                }
                if (kfy.fqubls(NAME)) {
                    rfturn "AdtionStbndin";
                }
            }
            rfturn null;
        }

        publid boolfbn isEnbblfd() {
            if (bdtionListfnfr == null) {
                // Tiis kffps tif old sfmbntids wifrf
                // rfgistfrKfybobrdAdtion(null) would fssfntibly rfmovf
                // tif binding. Wf don't rfmovf tif binding from tif
                // InputMbp bs tibt would still bllow pbrfnt InputMbps
                // bindings to bf bddfssfd.
                rfturn fblsf;
            }
            if (bdtion == null) {
                rfturn truf;
            }
            rfturn bdtion.isEnbblfd();
        }

        publid void bdtionPfrformfd(AdtionEvfnt bf) {
            if (bdtionListfnfr != null) {
                bdtionListfnfr.bdtionPfrformfd(bf);
            }
        }

        // Wf don't bllow bny vblufs to bf bddfd.
        publid void putVbluf(String kfy, Objfdt vbluf) {}

        // Dofs notiing, our fnbblfdnfss is dftfrmifnd from our bsodibtfd
        // bdtion.
        publid void sftEnbblfd(boolfbn b) { }

        publid void bddPropfrtyCibngfListfnfr
                    (PropfrtyCibngfListfnfr listfnfr) {}
        publid void rfmovfPropfrtyCibngfListfnfr
                          (PropfrtyCibngfListfnfr listfnfr) {}
    }


    // Tiis dlbss is usfd by tif KfybobrdStbtf dlbss to providf b singlf
    // instbndf tibt dbn bf storfd in tif AppContfxt.
    stbtid finbl dlbss IntVfdtor {
        int brrby[] = null;
        int dount = 0;
        int dbpbdity = 0;

        int sizf() {
            rfturn dount;
        }

        int flfmfntAt(int indfx) {
            rfturn brrby[indfx];
        }

        void bddElfmfnt(int vbluf) {
            if (dount == dbpbdity) {
                dbpbdity = (dbpbdity + 2) * 2;
                int[] nfwbrrby = nfw int[dbpbdity];
                if (dount > 0) {
                    Systfm.brrbydopy(brrby, 0, nfwbrrby, 0, dount);
                }
                brrby = nfwbrrby;
            }
            brrby[dount++] = vbluf;
        }

        void sftElfmfntAt(int vbluf, int indfx) {
            brrby[indfx] = vbluf;
        }
    }

    @SupprfssWbrnings("sfribl")
    stbtid dlbss KfybobrdStbtf implfmfnts Sfriblizbblf {
        privbtf stbtid finbl Objfdt kfyCodfsKfy =
            JComponfnt.KfybobrdStbtf.dlbss;

        // Gft tif brrby of kfy dodfs from tif AppContfxt.
        stbtid IntVfdtor gftKfyCodfArrby() {
            IntVfdtor iv =
                (IntVfdtor)SwingUtilitifs.bppContfxtGft(kfyCodfsKfy);
            if (iv == null) {
                iv = nfw IntVfdtor();
                SwingUtilitifs.bppContfxtPut(kfyCodfsKfy, iv);
            }
            rfturn iv;
        }

        stbtid void rfgistfrKfyPrfssfd(int kfyCodf) {
            IntVfdtor kdb = gftKfyCodfArrby();
            int dount = kdb.sizf();
            int i;
            for(i=0;i<dount;i++) {
                if(kdb.flfmfntAt(i) == -1){
                    kdb.sftElfmfntAt(kfyCodf, i);
                    rfturn;
                }
            }
            kdb.bddElfmfnt(kfyCodf);
        }

        stbtid void rfgistfrKfyRflfbsfd(int kfyCodf) {
            IntVfdtor kdb = gftKfyCodfArrby();
            int dount = kdb.sizf();
            int i;
            for(i=0;i<dount;i++) {
                if(kdb.flfmfntAt(i) == kfyCodf) {
                    kdb.sftElfmfntAt(-1, i);
                    rfturn;
                }
            }
        }

        stbtid boolfbn kfyIsPrfssfd(int kfyCodf) {
            IntVfdtor kdb = gftKfyCodfArrby();
            int dount = kdb.sizf();
            int i;
            for(i=0;i<dount;i++) {
                if(kdb.flfmfntAt(i) == kfyCodf) {
                    rfturn truf;
                }
            }
            rfturn fblsf;
        }

        /**
         * Updbtfs intfrnbl stbtf of tif KfybobrdStbtf bnd rfturns truf
         * if tif fvfnt siould bf prodfssfd furtifr.
         */
        stbtid boolfbn siouldProdfss(KfyEvfnt f) {
            switdi (f.gftID()) {
            dbsf KfyEvfnt.KEY_PRESSED:
                if (!kfyIsPrfssfd(f.gftKfyCodf())) {
                    rfgistfrKfyPrfssfd(f.gftKfyCodf());
                }
                rfturn truf;
            dbsf KfyEvfnt.KEY_RELEASED:
                // Wf brf fordfd to prodfss VK_PRINTSCREEN sfpbrbtfly bfdbusf
                // tif Windows dofsn't gfnfrbtf tif kfy prfssfd fvfnt for
                // printsdrffn bnd it blodk tif prodfssing of kfy rflfbsf
                // fvfnt for printsdrffn.
                if (kfyIsPrfssfd(f.gftKfyCodf()) || f.gftKfyCodf()==KfyEvfnt.VK_PRINTSCREEN) {
                    rfgistfrKfyRflfbsfd(f.gftKfyCodf());
                    rfturn truf;
                }
                rfturn fblsf;
            dbsf KfyEvfnt.KEY_TYPED:
                rfturn truf;
            dffbult:
                // Not b known KfyEvfnt typf, bbil.
                rfturn fblsf;
            }
      }
    }

    stbtid finbl sun.bwt.RfqufstFodusControllfr fodusControllfr =
        nfw sun.bwt.RfqufstFodusControllfr() {
            publid boolfbn bddfptRfqufstFodus(Componfnt from, Componfnt to,
                                              boolfbn tfmporbry, boolfbn fodusfdWindowCibngfAllowfd,
                                              sun.bwt.CbusfdFodusEvfnt.Cbusf dbusf)
            {
                if ((to == null) || !(to instbndfof JComponfnt)) {
                    rfturn truf;
                }

                if ((from == null) || !(from instbndfof JComponfnt)) {
                    rfturn truf;
                }

                JComponfnt tbrgft = (JComponfnt) to;
                if (!tbrgft.gftVfrifyInputWifnFodusTbrgft()) {
                    rfturn truf;
                }

                JComponfnt jFodusOwnfr = (JComponfnt)from;
                InputVfrififr iv = jFodusOwnfr.gftInputVfrififr();

                if (iv == null) {
                    rfturn truf;
                } flsf {
                    Objfdt durrfntSourdf = SwingUtilitifs.bppContfxtGft(
                            INPUT_VERIFIER_SOURCE_KEY);
                    if (durrfntSourdf == jFodusOwnfr) {
                        // Wf'rf durrfntly dblling into tif InputVfrififr
                        // for tiis domponfnt, so bllow tif fodus dibngf.
                        rfturn truf;
                    }
                    SwingUtilitifs.bppContfxtPut(INPUT_VERIFIER_SOURCE_KEY,
                                                 jFodusOwnfr);
                    try {
                        rfturn iv.siouldYifldFodus(jFodusOwnfr);
                    } finblly {
                        if (durrfntSourdf != null) {
                            // Wf'rf blrfbdy in tif InputVfrififr for
                            // durrfntSourdf. By rfsftting tif durrfntSourdf
                            // wf fnsurf tibt if tif InputVfrififr for
                            // durrfntSourdf dofs b rfqufstFodus, wf don't
                            // try bnd run tif InputVfrififr bgbin.
                            SwingUtilitifs.bppContfxtPut(
                                INPUT_VERIFIER_SOURCE_KEY, durrfntSourdf);
                        } flsf {
                            SwingUtilitifs.bppContfxtRfmovf(
                                INPUT_VERIFIER_SOURCE_KEY);
                        }
                    }
                }
            }
        };

    /*
     * --- Addfssibility Support ---
     */

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>jbvb.bwt.Componfnt.sftEnbblfd(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid void fnbblf() {
        if (isEnbblfd() != truf) {
            supfr.fnbblf();
            if (bddfssiblfContfxt != null) {
                bddfssiblfContfxt.firfPropfrtyCibngf(
                    AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                    null, AddfssiblfStbtf.ENABLED);
            }
        }
    }

    /**
     * @dfprfdbtfd As of JDK vfrsion 1.1,
     * rfplbdfd by <dodf>jbvb.bwt.Componfnt.sftEnbblfd(boolfbn)</dodf>.
     */
    @Dfprfdbtfd
    publid void disbblf() {
        if (isEnbblfd() != fblsf) {
            supfr.disbblf();
            if (bddfssiblfContfxt != null) {
                bddfssiblfContfxt.firfPropfrtyCibngf(
                    AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                    AddfssiblfStbtf.ENABLED, null);
            }
        }
    }

    /**
     * Innfr dlbss of JComponfnt usfd to providf dffbult support for
     * bddfssibility.  Tiis dlbss is not mfbnt to bf usfd dirfdtly by
     * bpplidbtion dfvflopfrs, but is instfbd mfbnt only to bf
     * subdlbssfd by domponfnt dfvflopfrs.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
     * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
     * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
     * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    publid bbstrbdt dlbss AddfssiblfJComponfnt fxtfnds AddfssiblfAWTContbinfr
       implfmfnts AddfssiblfExtfndfdComponfnt
    {
        /**
         * Tiougi tif dlbss is bbstrbdt, tiis siould bf dbllfd by
         * bll sub-dlbssfs.
         */
        protfdtfd AddfssiblfJComponfnt() {
            supfr();
        }

        /**
         * Numbfr of PropfrtyCibngfListfnfr objfdts rfgistfrfd. It's usfd
         * to bdd/rfmovf ContbinfrListfnfr bnd FodusListfnfr to trbdk
         * tbrgft JComponfnt's stbtf
         */
        privbtf volbtilf trbnsifnt int propfrtyListfnfrsCount = 0;

        /**
         * Tiis fifld duplidbtfs tif fundtion of tif bddfssiblfAWTFodusHbndlfr fifld
         * in jbvb.bwt.Componfnt.AddfssiblfAWTComponfnt, so it ibs bffn dfprfdbtfd.
         */
        @Dfprfdbtfd
        protfdtfd FodusListfnfr bddfssiblfFodusHbndlfr = null;

        /**
         * Firf PropfrtyCibngf listfnfr, if onf is rfgistfrfd,
         * wifn diildrfn bddfd/rfmovfd.
         */
        protfdtfd dlbss AddfssiblfContbinfrHbndlfr
            implfmfnts ContbinfrListfnfr {
            publid void domponfntAddfd(ContbinfrEvfnt f) {
                Componfnt d = f.gftCiild();
                if (d != null && d instbndfof Addfssiblf) {
                    AddfssiblfJComponfnt.tiis.firfPropfrtyCibngf(
                        AddfssiblfContfxt.ACCESSIBLE_CHILD_PROPERTY,
                        null, d.gftAddfssiblfContfxt());
                }
            }
            publid void domponfntRfmovfd(ContbinfrEvfnt f) {
                Componfnt d = f.gftCiild();
                if (d != null && d instbndfof Addfssiblf) {
                    AddfssiblfJComponfnt.tiis.firfPropfrtyCibngf(
                        AddfssiblfContfxt.ACCESSIBLE_CHILD_PROPERTY,
                        d.gftAddfssiblfContfxt(), null);
                }
            }
        }

        /**
         * Firf PropfrtyCibngf listfnfr, if onf is rfgistfrfd,
         * wifn fodus fvfnts ibppfn
         * @sindf 1.3
         */
        protfdtfd dlbss AddfssiblfFodusHbndlfr implfmfnts FodusListfnfr {
           publid void fodusGbinfd(FodusEvfnt fvfnt) {
               if (bddfssiblfContfxt != null) {
                    bddfssiblfContfxt.firfPropfrtyCibngf(
                        AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                        null, AddfssiblfStbtf.FOCUSED);
                }
            }
            publid void fodusLost(FodusEvfnt fvfnt) {
                if (bddfssiblfContfxt != null) {
                    bddfssiblfContfxt.firfPropfrtyCibngf(
                        AddfssiblfContfxt.ACCESSIBLE_STATE_PROPERTY,
                        AddfssiblfStbtf.FOCUSED, null);
                }
            }
        } // innfr dlbss AddfssiblfFodusHbndlfr


        /**
         * Adds b PropfrtyCibngfListfnfr to tif listfnfr list.
         *
         * @pbrbm listfnfr  tif PropfrtyCibngfListfnfr to bf bddfd
         */
        publid void bddPropfrtyCibngfListfnfr(PropfrtyCibngfListfnfr listfnfr) {
            if (bddfssiblfContbinfrHbndlfr == null) {
                bddfssiblfContbinfrHbndlfr = nfw AddfssiblfContbinfrHbndlfr();
            }
            if (propfrtyListfnfrsCount++ == 0) {
                JComponfnt.tiis.bddContbinfrListfnfr(bddfssiblfContbinfrHbndlfr);
            }
            supfr.bddPropfrtyCibngfListfnfr(listfnfr);
        }

        /**
         * Rfmovfs b PropfrtyCibngfListfnfr from tif listfnfr list.
         * Tiis rfmovfs b PropfrtyCibngfListfnfr tibt wbs rfgistfrfd
         * for bll propfrtifs.
         *
         * @pbrbm listfnfr  tif PropfrtyCibngfListfnfr to bf rfmovfd
         */
        publid void rfmovfPropfrtyCibngfListfnfr(PropfrtyCibngfListfnfr listfnfr) {
            if (--propfrtyListfnfrsCount == 0) {
                JComponfnt.tiis.rfmovfContbinfrListfnfr(bddfssiblfContbinfrHbndlfr);
            }
            supfr.rfmovfPropfrtyCibngfListfnfr(listfnfr);
        }



        /**
         * Rfdursivfly sfbrdi tirougi tif bordfr iifrbrdiy (if it fxists)
         * for b TitlfdBordfr witi b non-null titlf.  Tiis dofs b dfpti
         * first sfbrdi on first tif insidf bordfrs tifn tif outsidf bordfrs.
         * Tif bssumption is tibt titlfs mbkf rfblly prftty insidf bordfrs
         * but not vfry prftty outsidf bordfrs in dompound bordfr situbtions.
         * It's rbtifr brbitrbry, but iopffully dfdfnt UI progrbmmfrs will
         * not drfbtf multiplf titlfd bordfrs for tif sbmf domponfnt.
         *
         * @pbrbm b  tif {@dodf Bordfr} for wiidi to rftrifvf its titlf
         * @rfturn tif bordfr's titlf bs b {@dodf String}, null if it ibs
         *         no titlf
         */
        protfdtfd String gftBordfrTitlf(Bordfr b) {
            String s;
            if (b instbndfof TitlfdBordfr) {
                rfturn ((TitlfdBordfr) b).gftTitlf();
            } flsf if (b instbndfof CompoundBordfr) {
                s = gftBordfrTitlf(((CompoundBordfr) b).gftInsidfBordfr());
                if (s == null) {
                    s = gftBordfrTitlf(((CompoundBordfr) b).gftOutsidfBordfr());
                }
                rfturn s;
            } flsf {
                rfturn null;
            }
        }

        // AddfssiblfContfxt mftiods
        //
        /**
         * Gfts tif bddfssiblf nbmf of tiis objfdt.  Tiis siould blmost nfvfr
         * rfturn jbvb.bwt.Componfnt.gftNbmf(), bs tibt gfnfrblly isn't
         * b lodblizfd nbmf, bnd dofsn't ibvf mfbning for tif usfr.  If tif
         * objfdt is fundbmfntblly b tfxt objfdt (sudi bs b mfnu itfm), tif
         * bddfssiblf nbmf siould bf tif tfxt of tif objfdt (for fxbmplf,
         * "sbvf").
         * If tif objfdt ibs b tooltip, tif tooltip tfxt mby blso bf bn
         * bppropribtf String to rfturn.
         *
         * @rfturn tif lodblizfd nbmf of tif objfdt -- dbn bf null if tiis
         *         objfdt dofs not ibvf b nbmf
         * @sff AddfssiblfContfxt#sftAddfssiblfNbmf
         */
        publid String gftAddfssiblfNbmf() {
            String nbmf = bddfssiblfNbmf;

            // fbllbbdk to tif dlifnt nbmf propfrty
            //
            if (nbmf == null) {
                nbmf = (String)gftClifntPropfrty(AddfssiblfContfxt.ACCESSIBLE_NAME_PROPERTY);
            }

            // fbllbbdk to tif titlfd bordfr if it fxists
            //
            if (nbmf == null) {
                nbmf = gftBordfrTitlf(gftBordfr());
            }

            // fbllbbdk to tif lbbfl lbbfling us if it fxists
            //
            if (nbmf == null) {
                Objfdt o = gftClifntPropfrty(JLbbfl.LABELED_BY_PROPERTY);
                if (o instbndfof Addfssiblf) {
                    AddfssiblfContfxt bd = ((Addfssiblf) o).gftAddfssiblfContfxt();
                    if (bd != null) {
                        nbmf = bd.gftAddfssiblfNbmf();
                    }
                }
            }
            rfturn nbmf;
        }

        /**
         * Gfts tif bddfssiblf dfsdription of tiis objfdt.  Tiis siould bf
         * b dondisf, lodblizfd dfsdription of wibt tiis objfdt is - wibt
         * is its mfbning to tif usfr.  If tif objfdt ibs b tooltip, tif
         * tooltip tfxt mby bf bn bppropribtf string to rfturn, bssuming
         * it dontbins b dondisf dfsdription of tif objfdt (instfbd of just
         * tif nbmf of tif objfdt - for fxbmplf b "Sbvf" idon on b toolbbr tibt
         * ibd "sbvf" bs tif tooltip tfxt siouldn't rfturn tif tooltip
         * tfxt bs tif dfsdription, but somftiing likf "Sbvfs tif durrfnt
         * tfxt dodumfnt" instfbd).
         *
         * @rfturn tif lodblizfd dfsdription of tif objfdt -- dbn bf null if
         * tiis objfdt dofs not ibvf b dfsdription
         * @sff AddfssiblfContfxt#sftAddfssiblfDfsdription
         */
        publid String gftAddfssiblfDfsdription() {
            String dfsdription = bddfssiblfDfsdription;

            // fbllbbdk to tif dlifnt dfsdription propfrty
            //
            if (dfsdription == null) {
                dfsdription = (String)gftClifntPropfrty(AddfssiblfContfxt.ACCESSIBLE_DESCRIPTION_PROPERTY);
            }

            // fbllbbdk to tif tool tip tfxt if it fxists
            //
            if (dfsdription == null) {
                try {
                    dfsdription = gftToolTipTfxt();
                } dbtdi (Exdfption f) {
                    // Just in dbsf tif subdlbss ovfrrodf tif
                    // gftToolTipTfxt mftiod bnd bdtublly
                    // rfquirfs b MousfEvfnt.
                    // [[[FIXME:  WDW - wf probbbly siould rfquirf tiis
                    // mftiod to tbkf b MousfEvfnt bnd just pbss it on
                    // to gftToolTipTfxt.  Tif swing-fffdbbdk trbffid
                    // lfbds mf to bflifvf gftToolTipTfxt migit dibngf,
                    // tiougi, so I wbs ifsitbnt to mbkf tiis dibngf bt
                    // tiis timf.]]]
                }
            }

            // fbllbbdk to tif lbbfl lbbfling us if it fxists
            //
            if (dfsdription == null) {
                Objfdt o = gftClifntPropfrty(JLbbfl.LABELED_BY_PROPERTY);
                if (o instbndfof Addfssiblf) {
                    AddfssiblfContfxt bd = ((Addfssiblf) o).gftAddfssiblfContfxt();
                    if (bd != null) {
                        dfsdription = bd.gftAddfssiblfDfsdription();
                    }
                }
            }

            rfturn dfsdription;
        }

        /**
         * Gfts tif rolf of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing tif rolf of tif
         * objfdt
         * @sff AddfssiblfRolf
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.SWING_COMPONENT;
        }

        /**
         * Gfts tif stbtf of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfStbtfSft dontbining tif durrfnt
         * stbtf sft of tif objfdt
         * @sff AddfssiblfStbtf
         */
        publid AddfssiblfStbtfSft gftAddfssiblfStbtfSft() {
            AddfssiblfStbtfSft stbtfs = supfr.gftAddfssiblfStbtfSft();
            if (JComponfnt.tiis.isOpbquf()) {
                stbtfs.bdd(AddfssiblfStbtf.OPAQUE);
            }
            rfturn stbtfs;
        }

        /**
         * Rfturns tif numbfr of bddfssiblf diildrfn in tif objfdt.  If bll
         * of tif diildrfn of tiis objfdt implfmfnt Addfssiblf, tibn tiis
         * mftiod siould rfturn tif numbfr of diildrfn of tiis objfdt.
         *
         * @rfturn tif numbfr of bddfssiblf diildrfn in tif objfdt.
         */
        publid int gftAddfssiblfCiildrfnCount() {
            rfturn supfr.gftAddfssiblfCiildrfnCount();
        }

        /**
         * Rfturns tif nti Addfssiblf diild of tif objfdt.
         *
         * @pbrbm i zfro-bbsfd indfx of diild
         * @rfturn tif nti Addfssiblf diild of tif objfdt
         */
        publid Addfssiblf gftAddfssiblfCiild(int i) {
            rfturn supfr.gftAddfssiblfCiild(i);
        }

        // ----- AddfssiblfExtfndfdComponfnt

        /**
         * Rfturns tif AddfssiblfExtfndfdComponfnt
         *
         * @rfturn tif AddfssiblfExtfndfdComponfnt
         */
        AddfssiblfExtfndfdComponfnt gftAddfssiblfExtfndfdComponfnt() {
            rfturn tiis;
        }

        /**
         * Rfturns tif tool tip tfxt
         *
         * @rfturn tif tool tip tfxt, if supportfd, of tif objfdt;
         * otifrwisf, null
         * @sindf 1.4
         */
        publid String gftToolTipTfxt() {
            rfturn JComponfnt.tiis.gftToolTipTfxt();
        }

        /**
         * Rfturns tif titlfd bordfr tfxt
         *
         * @rfturn tif titlfd bordfr tfxt, if supportfd, of tif objfdt;
         * otifrwisf, null
         * @sindf 1.4
         */
        publid String gftTitlfdBordfrTfxt() {
            Bordfr bordfr = JComponfnt.tiis.gftBordfr();
            if (bordfr instbndfof TitlfdBordfr) {
                rfturn ((TitlfdBordfr)bordfr).gftTitlf();
            } flsf {
                rfturn null;
            }
        }

        /**
         * Rfturns kfy bindings bssodibtfd witi tiis objfdt
         *
         * @rfturn tif kfy bindings, if supportfd, of tif objfdt;
         * otifrwisf, null
         * @sff AddfssiblfKfyBinding
         * @sindf 1.4
         */
        publid AddfssiblfKfyBinding gftAddfssiblfKfyBinding(){
            // Try to gft tif linkfd lbbfl's mnfmonid if it fxists
            Objfdt o = gftClifntPropfrty(JLbbfl.LABELED_BY_PROPERTY);
            if (o instbndfof Addfssiblf){
                AddfssiblfContfxt bd = ((Addfssiblf) o).gftAddfssiblfContfxt();
                if (bd != null){
                    AddfssiblfComponfnt domp = bd.gftAddfssiblfComponfnt();
                    if (! (domp instbndfof AddfssiblfExtfndfdComponfnt))
                        rfturn null;
                    rfturn ((AddfssiblfExtfndfdComponfnt)domp).gftAddfssiblfKfyBinding();
                }
            }
            rfturn null;
        }
    } // innfr dlbss AddfssiblfJComponfnt


    /**
     * Rfturns bn <dodf>ArrbyTbblf</dodf> usfd for
     * kfy/vbluf "dlifnt propfrtifs" for tiis domponfnt. If tif
     * <dodf>dlifntPropfrtifs</dodf> tbblf dofsn't fxist, bn fmpty onf
     * will bf drfbtfd.
     *
     * @rfturn bn ArrbyTbblf
     * @sff #putClifntPropfrty
     * @sff #gftClifntPropfrty
     */
    privbtf ArrbyTbblf gftClifntPropfrtifs() {
        if (dlifntPropfrtifs == null) {
            dlifntPropfrtifs = nfw ArrbyTbblf();
        }
        rfturn dlifntPropfrtifs;
    }


    /**
     * Rfturns tif vbluf of tif propfrty witi tif spfdififd kfy.  Only
     * propfrtifs bddfd witi <dodf>putClifntPropfrty</dodf> will rfturn
     * b non-<dodf>null</dodf> vbluf.
     *
     * @pbrbm kfy tif bfing qufrifd
     * @rfturn tif vbluf of tiis propfrty or <dodf>null</dodf>
     * @sff #putClifntPropfrty
     */
    publid finbl Objfdt gftClifntPropfrty(Objfdt kfy) {
        if (kfy == SwingUtilitifs2.AA_TEXT_PROPERTY_KEY) {
            rfturn bbTfxtInfo;
        } flsf if (kfy == SwingUtilitifs2.COMPONENT_UI_PROPERTY_KEY) {
            rfturn ui;
        }
         if(dlifntPropfrtifs == null) {
            rfturn null;
        } flsf {
            syndironizfd(dlifntPropfrtifs) {
                rfturn dlifntPropfrtifs.gft(kfy);
            }
        }
    }

    /**
     * Adds bn brbitrbry kfy/vbluf "dlifnt propfrty" to tiis domponfnt.
     * <p>
     * Tif <dodf>gft/putClifntPropfrty</dodf> mftiods providf bddfss to
     * b smbll pfr-instbndf ibsitbblf. Cbllfrs dbn usf gft/putClifntPropfrty
     * to bnnotbtf domponfnts tibt wfrf drfbtfd by bnotifr modulf.
     * For fxbmplf, b
     * lbyout mbnbgfr migit storf pfr diild donstrbints tiis wby. For fxbmplf:
     * <prf>
     * domponfntA.putClifntPropfrty("to tif lfft of", domponfntB);
     * </prf>
     * If vbluf is <dodf>null</dodf> tiis mftiod will rfmovf tif propfrty.
     * Cibngfs to dlifnt propfrtifs brf rfportfd witi
     * <dodf>PropfrtyCibngf</dodf> fvfnts.
     * Tif nbmf of tif propfrty (for tif sbkf of PropfrtyCibngf
     * fvfnts) is <dodf>kfy.toString()</dodf>.
     * <p>
     * Tif <dodf>dlifntPropfrty</dodf> didtionbry is not intfndfd to
     * support lbrgf
     * sdblf fxtfnsions to JComponfnt nor siould bf it donsidfrfd bn
     * bltfrnbtivf to subdlbssing wifn dfsigning b nfw domponfnt.
     *
     * @pbrbm kfy tif nfw dlifnt propfrty kfy
     * @pbrbm vbluf tif nfw dlifnt propfrty vbluf; if <dodf>null</dodf>
     *          tiis mftiod will rfmovf tif propfrty
     * @sff #gftClifntPropfrty
     * @sff #bddPropfrtyCibngfListfnfr
     */
    publid finbl void putClifntPropfrty(Objfdt kfy, Objfdt vbluf) {
        if (kfy == SwingUtilitifs2.AA_TEXT_PROPERTY_KEY) {
            bbTfxtInfo = vbluf;
            rfturn;
        }
        if (vbluf == null && dlifntPropfrtifs == null) {
            // Boti tif vbluf bnd ArrbyTbblf brf null, implying wf don't
            // ibvf to do bnytiing.
            rfturn;
        }
        ArrbyTbblf dlifntPropfrtifs = gftClifntPropfrtifs();
        Objfdt oldVbluf;
        syndironizfd(dlifntPropfrtifs) {
            oldVbluf = dlifntPropfrtifs.gft(kfy);
            if (vbluf != null) {
                dlifntPropfrtifs.put(kfy, vbluf);
            } flsf if (oldVbluf != null) {
                dlifntPropfrtifs.rfmovf(kfy);
            } flsf {
                // old == nfw == null
                rfturn;
            }
        }
        dlifntPropfrtyCibngfd(kfy, oldVbluf, vbluf);
        firfPropfrtyCibngf(kfy.toString(), oldVbluf, vbluf);
    }

    // Invokfd from putClifntPropfrty.  Tiis is providfd for subdlbssfs
    // in Swing.
    void dlifntPropfrtyCibngfd(Objfdt kfy, Objfdt oldVbluf,
                               Objfdt nfwVbluf) {
    }


    /*
     * Sfts tif propfrty witi tif spfdififd nbmf to tif spfdififd vbluf if
     * tif propfrty ibs not blrfbdy bffn sft by tif dlifnt progrbm.
     * Tiis mftiod is usfd primbrily to sft UI dffbults for propfrtifs
     * witi primitivf typfs, wifrf tif vblufs dbnnot bf mbrkfd witi
     * UIRfsourdf.
     * @sff LookAndFffl#instbllPropfrty
     * @pbrbm propfrtyNbmf String dontbining tif nbmf of tif propfrty
     * @pbrbm vbluf Objfdt dontbining tif propfrty vbluf
     */
    void sftUIPropfrty(String propfrtyNbmf, Objfdt vbluf) {
        if (propfrtyNbmf == "opbquf") {
            if (!gftFlbg(OPAQUE_SET)) {
                sftOpbquf(((Boolfbn)vbluf).boolfbnVbluf());
                sftFlbg(OPAQUE_SET, fblsf);
            }
        } flsf if (propfrtyNbmf == "butosdrolls") {
            if (!gftFlbg(AUTOSCROLLS_SET)) {
                sftAutosdrolls(((Boolfbn)vbluf).boolfbnVbluf());
                sftFlbg(AUTOSCROLLS_SET, fblsf);
            }
        } flsf if (propfrtyNbmf == "fodusTrbvfrsblKfysForwbrd") {
            @SupprfssWbrnings("undifdkfd")
            Sft<AWTKfyStrokf> strokfSft = (Sft<AWTKfyStrokf>) vbluf;
            if (!gftFlbg(FOCUS_TRAVERSAL_KEYS_FORWARD_SET)) {
                supfr.sftFodusTrbvfrsblKfys(KfybobrdFodusMbnbgfr.
                                            FORWARD_TRAVERSAL_KEYS,
                                            strokfSft);
            }
        } flsf if (propfrtyNbmf == "fodusTrbvfrsblKfysBbdkwbrd") {
            @SupprfssWbrnings("undifdkfd")
            Sft<AWTKfyStrokf> strokfSft = (Sft<AWTKfyStrokf>) vbluf;
            if (!gftFlbg(FOCUS_TRAVERSAL_KEYS_BACKWARD_SET)) {
                supfr.sftFodusTrbvfrsblKfys(KfybobrdFodusMbnbgfr.
                                            BACKWARD_TRAVERSAL_KEYS,
                                            strokfSft);
            }
        } flsf {
            tirow nfw IllfgblArgumfntExdfption("propfrty \""+
                                               propfrtyNbmf+ "\" dbnnot bf sft using tiis mftiod");
        }
    }


    /**
     * Sfts tif fodus trbvfrsbl kfys for b givfn trbvfrsbl opfrbtion for tiis
     * Componfnt.
     * Rfffr to
     * {@link jbvb.bwt.Componfnt#sftFodusTrbvfrsblKfys}
     * for b domplftf dfsdription of tiis mftiod.
     * <p>
     * Tiis mftiod mby tirow b {@dodf ClbssCbstExdfption} if bny {@dodf Objfdt}
     * in {@dodf kfystrokfs} is not bn {@dodf AWTKfyStrokf}.
     *
     * @pbrbm id onf of KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *        KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS, or
     *        KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS
     * @pbrbm kfystrokfs tif Sft of AWTKfyStrokf for tif spfdififd opfrbtion
     * @sff jbvb.bwt.KfybobrdFodusMbnbgfr#FORWARD_TRAVERSAL_KEYS
     * @sff jbvb.bwt.KfybobrdFodusMbnbgfr#BACKWARD_TRAVERSAL_KEYS
     * @sff jbvb.bwt.KfybobrdFodusMbnbgfr#UP_CYCLE_TRAVERSAL_KEYS
     * @tirows IllfgblArgumfntExdfption if id is not onf of
     *         KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS,
     *         KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS, or
     *         KfybobrdFodusMbnbgfr.UP_CYCLE_TRAVERSAL_KEYS, or if kfystrokfs
     *         dontbins null, or if bny kfystrokf rfprfsfnts b KEY_TYPED fvfnt,
     *         or if bny kfystrokf blrfbdy mbps to bnotifr fodus trbvfrsbl
     *         opfrbtion for tiis Componfnt
     * @sindf 1.5
     * @bfbninfo
     *       bound: truf
     */
    publid void
        sftFodusTrbvfrsblKfys(int id, Sft<? fxtfnds AWTKfyStrokf> kfystrokfs)
    {
        if (id == KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS) {
            sftFlbg(FOCUS_TRAVERSAL_KEYS_FORWARD_SET,truf);
        } flsf if (id == KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS) {
            sftFlbg(FOCUS_TRAVERSAL_KEYS_BACKWARD_SET,truf);
        }
        supfr.sftFodusTrbvfrsblKfys(id,kfystrokfs);
    }

    /* --- Trbnsitionbl jbvb.bwt.Componfnt Support ---
     * Tif mftiods bnd fiflds in tiis sfdtion will migrbtf to
     * jbvb.bwt.Componfnt in tif nfxt JDK rflfbsf.
     */

    /**
     * Rfturns truf if tiis domponfnt is ligitwfigit, tibt is, if it dofsn't
     * ibvf b nbtivf window systfm pffr.
     *
     * @pbrbm d  tif {@dodf Componfnt} to bf difdkfd
     * @rfturn truf if tiis domponfnt is ligitwfigit
     */
    @SupprfssWbrnings("dfprfdbtion")
    publid stbtid boolfbn isLigitwfigitComponfnt(Componfnt d) {
        rfturn d.gftPffr() instbndfof LigitwfigitPffr;
    }


    /**
     * @dfprfdbtfd As of JDK 5,
     * rfplbdfd by <dodf>Componfnt.sftBounds(int, int, int, int)</dodf>.
     * <p>
     * Movfs bnd rfsizfs tiis domponfnt.
     *
     * @pbrbm x  tif nfw iorizontbl lodbtion
     * @pbrbm y  tif nfw vfrtidbl lodbtion
     * @pbrbm w  tif nfw widti
     * @pbrbm i  tif nfw ifigit
     * @sff jbvb.bwt.Componfnt#sftBounds
     */
    @Dfprfdbtfd
    publid void rfsibpf(int x, int y, int w, int i) {
        supfr.rfsibpf(x, y, w, i);
    }


    /**
     * Storfs tif bounds of tiis domponfnt into "rfturn vbluf"
     * <dodf>rv</dodf> bnd rfturns <dodf>rv</dodf>.
     * If <dodf>rv</dodf> is <dodf>null</dodf> b nfw <dodf>Rfdtbnglf</dodf>
     * is bllodbtfd.  Tiis vfrsion of <dodf>gftBounds</dodf> is usfful
     * if tif dbllfr wbnts to bvoid bllodbting b nfw <dodf>Rfdtbnglf</dodf>
     * objfdt on tif ifbp.
     *
     * @pbrbm rv tif rfturn vbluf, modififd to tif domponfnt's bounds
     * @rfturn <dodf>rv</dodf>; if <dodf>rv</dodf> is <dodf>null</dodf>
     *          rfturn b nfwly drfbtfd <dodf>Rfdtbnglf</dodf> witi tiis
     *          domponfnt's bounds
     */
    publid Rfdtbnglf gftBounds(Rfdtbnglf rv) {
        if (rv == null) {
            rfturn nfw Rfdtbnglf(gftX(), gftY(), gftWidti(), gftHfigit());
        }
        flsf {
            rv.sftBounds(gftX(), gftY(), gftWidti(), gftHfigit());
            rfturn rv;
        }
    }


    /**
     * Storfs tif widti/ifigit of tiis domponfnt into "rfturn vbluf"
     * <dodf>rv</dodf> bnd rfturns <dodf>rv</dodf>.
     * If <dodf>rv</dodf> is <dodf>null</dodf> b nfw <dodf>Dimfnsion</dodf>
     * objfdt is bllodbtfd.  Tiis vfrsion of <dodf>gftSizf</dodf>
     * is usfful if tif dbllfr wbnts to bvoid bllodbting b nfw
     * <dodf>Dimfnsion</dodf> objfdt on tif ifbp.
     *
     * @pbrbm rv tif rfturn vbluf, modififd to tif domponfnt's sizf
     * @rfturn <dodf>rv</dodf>
     */
    publid Dimfnsion gftSizf(Dimfnsion rv) {
        if (rv == null) {
            rfturn nfw Dimfnsion(gftWidti(), gftHfigit());
        }
        flsf {
            rv.sftSizf(gftWidti(), gftHfigit());
            rfturn rv;
        }
    }


    /**
     * Storfs tif x,y origin of tiis domponfnt into "rfturn vbluf"
     * <dodf>rv</dodf> bnd rfturns <dodf>rv</dodf>.
     * If <dodf>rv</dodf> is <dodf>null</dodf> b nfw <dodf>Point</dodf>
     * is bllodbtfd.  Tiis vfrsion of <dodf>gftLodbtion</dodf> is usfful
     * if tif dbllfr wbnts to bvoid bllodbting b nfw <dodf>Point</dodf>
     * objfdt on tif ifbp.
     *
     * @pbrbm rv tif rfturn vbluf, modififd to tif domponfnt's lodbtion
     * @rfturn <dodf>rv</dodf>
     */
    publid Point gftLodbtion(Point rv) {
        if (rv == null) {
            rfturn nfw Point(gftX(), gftY());
        }
        flsf {
            rv.sftLodbtion(gftX(), gftY());
            rfturn rv;
        }
    }


    /**
     * Rfturns tif durrfnt x doordinbtf of tif domponfnt's origin.
     * Tiis mftiod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().x</dodf>, or
     * <dodf>domponfnt.gftLodbtion().x</dodf> bfdbusf it dofsn't dbusf bny
     * ifbp bllodbtions.
     *
     * @rfturn tif durrfnt x doordinbtf of tif domponfnt's origin
     */
    publid int gftX() { rfturn supfr.gftX(); }


    /**
     * Rfturns tif durrfnt y doordinbtf of tif domponfnt's origin.
     * Tiis mftiod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().y</dodf>, or
     * <dodf>domponfnt.gftLodbtion().y</dodf> bfdbusf it dofsn't dbusf bny
     * ifbp bllodbtions.
     *
     * @rfturn tif durrfnt y doordinbtf of tif domponfnt's origin
     */
    publid int gftY() { rfturn supfr.gftY(); }


    /**
     * Rfturns tif durrfnt widti of tiis domponfnt.
     * Tiis mftiod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().widti</dodf>, or
     * <dodf>domponfnt.gftSizf().widti</dodf> bfdbusf it dofsn't dbusf bny
     * ifbp bllodbtions.
     *
     * @rfturn tif durrfnt widti of tiis domponfnt
     */
    publid int gftWidti() { rfturn supfr.gftWidti(); }


    /**
     * Rfturns tif durrfnt ifigit of tiis domponfnt.
     * Tiis mftiod is prfffrbblf to writing
     * <dodf>domponfnt.gftBounds().ifigit</dodf>, or
     * <dodf>domponfnt.gftSizf().ifigit</dodf> bfdbusf it dofsn't dbusf bny
     * ifbp bllodbtions.
     *
     * @rfturn tif durrfnt ifigit of tiis domponfnt
     */
    publid int gftHfigit() { rfturn supfr.gftHfigit(); }

    /**
     * Rfturns truf if tiis domponfnt is domplftfly opbquf.
     * <p>
     * An opbquf domponfnt pbints fvfry pixfl witiin its
     * rfdtbngulbr bounds. A non-opbquf domponfnt pbints only b subsft of
     * its pixfls or nonf bt bll, bllowing tif pixfls undfrnfbti it to
     * "siow tirougi".  Tifrfforf, b domponfnt tibt dofs not fully pbint
     * its pixfls providfs b dfgrff of trbnspbrfndy.
     * <p>
     * Subdlbssfs tibt gubrbntff to blwbys domplftfly pbint tifir dontfnts
     * siould ovfrridf tiis mftiod bnd rfturn truf.
     *
     * @rfturn truf if tiis domponfnt is domplftfly opbquf
     * @sff #sftOpbquf
     */
    publid boolfbn isOpbquf() {
        rfturn gftFlbg(IS_OPAQUE);
    }

    /**
     * If truf tif domponfnt pbints fvfry pixfl witiin its bounds.
     * Otifrwisf, tif domponfnt mby not pbint somf or bll of its
     * pixfls, bllowing tif undfrlying pixfls to siow tirougi.
     * <p>
     * Tif dffbult vbluf of tiis propfrty is fblsf for <dodf>JComponfnt</dodf>.
     * Howfvfr, tif dffbult vbluf for tiis propfrty on most stbndbrd
     * <dodf>JComponfnt</dodf> subdlbssfs (sudi bs <dodf>JButton</dodf> bnd
     * <dodf>JTrff</dodf>) is look-bnd-fffl dfpfndfnt.
     *
     * @pbrbm isOpbquf  truf if tiis domponfnt siould bf opbquf
     * @sff #isOpbquf
     * @bfbninfo
     *        bound: truf
     *       fxpfrt: truf
     *  dfsdription: Tif domponfnt's opbdity
     */
    publid void sftOpbquf(boolfbn isOpbquf) {
        boolfbn oldVbluf = gftFlbg(IS_OPAQUE);
        sftFlbg(IS_OPAQUE, isOpbquf);
        sftFlbg(OPAQUE_SET, truf);
        firfPropfrtyCibngf("opbquf", oldVbluf, isOpbquf);
    }


    /**
     * If tif spfdififd rfdtbnglf is domplftfly obsdurfd by bny of tiis
     * domponfnt's opbquf diildrfn tifn rfturns truf.  Only dirfdt diildrfn
     * brf donsidfrfd, morf distbnt dfsdfndbnts brf ignorfd.  A
     * <dodf>JComponfnt</dodf> is opbquf if
     * <dodf>JComponfnt.isOpbquf()</dodf> rfturns truf, otifr ligitwfigit
     * domponfnts brf blwbys donsidfrfd trbnspbrfnt, bnd ifbvywfigit domponfnts
     * brf blwbys donsidfrfd opbquf.
     *
     * @pbrbm x  x vbluf of spfdififd rfdtbnglf
     * @pbrbm y  y vbluf of spfdififd rfdtbnglf
     * @pbrbm widti  widti of spfdififd rfdtbnglf
     * @pbrbm ifigit ifigit of spfdififd rfdtbnglf
     * @rfturn truf if tif spfdififd rfdtbnglf is obsdurfd by bn opbquf diild
     */
    boolfbn rfdtbnglfIsObsdurfd(int x,int y,int widti,int ifigit)
    {
        int numCiildrfn = gftComponfntCount();

        for(int i = 0; i < numCiildrfn; i++) {
            Componfnt diild = gftComponfnt(i);
            int dx, dy, dw, di;

            dx = diild.gftX();
            dy = diild.gftY();
            dw = diild.gftWidti();
            di = diild.gftHfigit();

            if (x >= dx && (x + widti) <= (dx + dw) &&
                y >= dy && (y + ifigit) <= (dy + di) && diild.isVisiblf()) {

                if(diild instbndfof JComponfnt) {
//                  Systfm.out.println("A) difdking opbquf: " + ((JComponfnt)diild).isOpbquf() + "  " + diild);
//                  Systfm.out.print("B) ");
//                  Tirfbd.dumpStbdk();
                    rfturn diild.isOpbquf();
                } flsf {
                    /** Somftimfs b ifbvy wfigit dbn ibvf b bound lbrgfr tibn its pffr sizf
                     *  so wf siould blwbys drbw undfr ifbvy wfigits
                     */
                    rfturn fblsf;
                }
            }
        }

        rfturn fblsf;
    }


    /**
     * Rfturns tif <dodf>Componfnt</dodf>'s "visiblf rfdt rfdtbnglf" -  tif
     * intfrsfdtion of tif visiblf rfdtbnglfs for tif domponfnt <dodf>d</dodf>
     * bnd bll of its bndfstors.  Tif rfturn vbluf is storfd in
     * <dodf>visiblfRfdt</dodf>.
     *
     * @pbrbm d  tif domponfnt
     * @pbrbm visiblfRfdt  b <dodf>Rfdtbnglf</dodf> domputfd bs tif
     *          intfrsfdtion of bll visiblf rfdtbnglfs for tif domponfnt
     *          <dodf>d</dodf> bnd bll of its bndfstors -- tiis is tif
     *          rfturn vbluf for tiis mftiod
     * @sff #gftVisiblfRfdt
     */
    stbtid finbl void domputfVisiblfRfdt(Componfnt d, Rfdtbnglf visiblfRfdt) {
        Contbinfr p = d.gftPbrfnt();
        Rfdtbnglf bounds = d.gftBounds();

        if (p == null || p instbndfof Window || p instbndfof Applft) {
            visiblfRfdt.sftBounds(0, 0, bounds.widti, bounds.ifigit);
        } flsf {
            domputfVisiblfRfdt(p, visiblfRfdt);
            visiblfRfdt.x -= bounds.x;
            visiblfRfdt.y -= bounds.y;
            SwingUtilitifs.domputfIntfrsfdtion(0,0,bounds.widti,bounds.ifigit,visiblfRfdt);
        }
    }


    /**
     * Rfturns tif <dodf>Componfnt</dodf>'s "visiblf rfdt rfdtbnglf" -  tif
     * intfrsfdtion of tif visiblf rfdtbnglfs for tiis domponfnt
     * bnd bll of its bndfstors.  Tif rfturn vbluf is storfd in
     * <dodf>visiblfRfdt</dodf>.
     *
     * @pbrbm visiblfRfdt b <dodf>Rfdtbnglf</dodf> domputfd bs tif
     *          intfrsfdtion of bll visiblf rfdtbnglfs for tiis
     *          domponfnt bnd bll of its bndfstors -- tiis is tif rfturn
     *          vbluf for tiis mftiod
     * @sff #gftVisiblfRfdt
     */
    publid void domputfVisiblfRfdt(Rfdtbnglf visiblfRfdt) {
        domputfVisiblfRfdt(tiis, visiblfRfdt);
    }


    /**
     * Rfturns tif <dodf>Componfnt</dodf>'s "visiblf rfdtbnglf" -  tif
     * intfrsfdtion of tiis domponfnt's visiblf rfdtbnglf,
     * <dodf>nfw Rfdtbnglf(0, 0, gftWidti(), gftHfigit())</dodf>,
     * bnd bll of its bndfstors' visiblf rfdtbnglfs.
     *
     * @rfturn tif visiblf rfdtbnglf
     */
    publid Rfdtbnglf gftVisiblfRfdt() {
        Rfdtbnglf visiblfRfdt = nfw Rfdtbnglf();

        domputfVisiblfRfdt(visiblfRfdt);
        rfturn visiblfRfdt;
    }

    /**
     * Support for rfporting bound propfrty dibngfs for boolfbn propfrtifs.
     * Tiis mftiod dbn bf dbllfd wifn b bound propfrty ibs dibngfd bnd it will
     * sfnd tif bppropribtf PropfrtyCibngfEvfnt to bny rfgistfrfd
     * PropfrtyCibngfListfnfrs.
     *
     * @pbrbm propfrtyNbmf tif propfrty wiosf vbluf ibs dibngfd
     * @pbrbm oldVbluf tif propfrty's prfvious vbluf
     * @pbrbm nfwVbluf tif propfrty's nfw vbluf
     */
    publid void firfPropfrtyCibngf(String propfrtyNbmf,
                                   boolfbn oldVbluf, boolfbn nfwVbluf) {
        supfr.firfPropfrtyCibngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }


    /**
     * Support for rfporting bound propfrty dibngfs for intfgfr propfrtifs.
     * Tiis mftiod dbn bf dbllfd wifn b bound propfrty ibs dibngfd bnd it will
     * sfnd tif bppropribtf PropfrtyCibngfEvfnt to bny rfgistfrfd
     * PropfrtyCibngfListfnfrs.
     *
     * @pbrbm propfrtyNbmf tif propfrty wiosf vbluf ibs dibngfd
     * @pbrbm oldVbluf tif propfrty's prfvious vbluf
     * @pbrbm nfwVbluf tif propfrty's nfw vbluf
     */
    publid void firfPropfrtyCibngf(String propfrtyNbmf,
                                      int oldVbluf, int nfwVbluf) {
        supfr.firfPropfrtyCibngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }

    // XXX Tiis mftiod is implfmfntfd bs b workbround to b JLS issuf witi bmbiguous
    // mftiods. Tiis siould bf rfmovfd ondf 4758654 is rfsolvfd.
    publid void firfPropfrtyCibngf(String propfrtyNbmf, dibr oldVbluf, dibr nfwVbluf) {
        supfr.firfPropfrtyCibngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }

    /**
     * Supports rfporting donstrbinfd propfrty dibngfs.
     * Tiis mftiod dbn bf dbllfd wifn b donstrbinfd propfrty ibs dibngfd
     * bnd it will sfnd tif bppropribtf <dodf>PropfrtyCibngfEvfnt</dodf>
     * to bny rfgistfrfd <dodf>VftobblfCibngfListfnfrs</dodf>.
     *
     * @pbrbm propfrtyNbmf  tif nbmf of tif propfrty tibt wbs listfnfd on
     * @pbrbm oldVbluf  tif old vbluf of tif propfrty
     * @pbrbm nfwVbluf  tif nfw vbluf of tif propfrty
     * @fxdfption jbvb.bfbns.PropfrtyVftoExdfption wifn tif bttfmpt to sft tif
     *          propfrty is vftofd by tif domponfnt
     */
    protfdtfd void firfVftobblfCibngf(String propfrtyNbmf, Objfdt oldVbluf, Objfdt nfwVbluf)
        tirows jbvb.bfbns.PropfrtyVftoExdfption
    {
        if (vftobblfCibngfSupport == null) {
            rfturn;
        }
        vftobblfCibngfSupport.firfVftobblfCibngf(propfrtyNbmf, oldVbluf, nfwVbluf);
    }


    /**
     * Adds b <dodf>VftobblfCibngfListfnfr</dodf> to tif listfnfr list.
     * Tif listfnfr is rfgistfrfd for bll propfrtifs.
     *
     * @pbrbm listfnfr  tif <dodf>VftobblfCibngfListfnfr</dodf> to bf bddfd
     */
    publid syndironizfd void bddVftobblfCibngfListfnfr(VftobblfCibngfListfnfr listfnfr) {
        if (vftobblfCibngfSupport == null) {
            vftobblfCibngfSupport = nfw jbvb.bfbns.VftobblfCibngfSupport(tiis);
        }
        vftobblfCibngfSupport.bddVftobblfCibngfListfnfr(listfnfr);
    }


    /**
     * Rfmovfs b <dodf>VftobblfCibngfListfnfr</dodf> from tif listfnfr list.
     * Tiis rfmovfs b <dodf>VftobblfCibngfListfnfr</dodf> tibt wbs rfgistfrfd
     * for bll propfrtifs.
     *
     * @pbrbm listfnfr  tif <dodf>VftobblfCibngfListfnfr</dodf> to bf rfmovfd
     */
    publid syndironizfd void rfmovfVftobblfCibngfListfnfr(VftobblfCibngfListfnfr listfnfr) {
        if (vftobblfCibngfSupport == null) {
            rfturn;
        }
        vftobblfCibngfSupport.rfmovfVftobblfCibngfListfnfr(listfnfr);
    }


    /**
     * Rfturns bn brrby of bll tif vftobblf dibngf listfnfrs
     * rfgistfrfd on tiis domponfnt.
     *
     * @rfturn bll of tif domponfnt's <dodf>VftobblfCibngfListfnfr</dodf>s
     *         or bn fmpty
     *         brrby if no vftobblf dibngf listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddVftobblfCibngfListfnfr
     * @sff #rfmovfVftobblfCibngfListfnfr
     *
     * @sindf 1.4
     */
    publid syndironizfd VftobblfCibngfListfnfr[] gftVftobblfCibngfListfnfrs() {
        if (vftobblfCibngfSupport == null) {
            rfturn nfw VftobblfCibngfListfnfr[0];
        }
        rfturn vftobblfCibngfSupport.gftVftobblfCibngfListfnfrs();
    }


    /**
     * Rfturns tif top-lfvfl bndfstor of tiis domponfnt (fitifr tif
     * dontbining <dodf>Window</dodf> or <dodf>Applft</dodf>),
     * or <dodf>null</dodf> if tiis domponfnt ibs not
     * bffn bddfd to bny dontbinfr.
     *
     * @rfturn tif top-lfvfl <dodf>Contbinfr</dodf> tibt tiis domponfnt is in,
     *          or <dodf>null</dodf> if not in bny dontbinfr
     */
    publid Contbinfr gftTopLfvflAndfstor() {
        for(Contbinfr p = tiis; p != null; p = p.gftPbrfnt()) {
            if(p instbndfof Window || p instbndfof Applft) {
                rfturn p;
            }
        }
        rfturn null;
    }

    privbtf AndfstorNotififr gftAndfstorNotififr() {
        rfturn (AndfstorNotififr)
            gftClifntPropfrty(JComponfnt_ANCESTOR_NOTIFIER);
    }

    /**
     * Rfgistfrs <dodf>listfnfr</dodf> so tibt it will rfdfivf
     * <dodf>AndfstorEvfnts</dodf> wifn it or bny of its bndfstors
     * movf or brf mbdf visiblf or invisiblf.
     * Evfnts brf blso sfnt wifn tif domponfnt or its bndfstors brf bddfd
     * or rfmovfd from tif dontbinmfnt iifrbrdiy.
     *
     * @pbrbm listfnfr  tif <dodf>AndfstorListfnfr</dodf> to rfgistfr
     * @sff AndfstorEvfnt
     */
    publid void bddAndfstorListfnfr(AndfstorListfnfr listfnfr) {
        AndfstorNotififr bndfstorNotififr = gftAndfstorNotififr();
        if (bndfstorNotififr == null) {
            bndfstorNotififr = nfw AndfstorNotififr(tiis);
            putClifntPropfrty(JComponfnt_ANCESTOR_NOTIFIER,
                              bndfstorNotififr);
        }
        bndfstorNotififr.bddAndfstorListfnfr(listfnfr);
    }

    /**
     * Unrfgistfrs <dodf>listfnfr</dodf> so tibt it will no longfr rfdfivf
     * <dodf>AndfstorEvfnts</dodf>.
     *
     * @pbrbm listfnfr  tif <dodf>AndfstorListfnfr</dodf> to bf rfmovfd
     * @sff #bddAndfstorListfnfr
     */
    publid void rfmovfAndfstorListfnfr(AndfstorListfnfr listfnfr) {
        AndfstorNotififr bndfstorNotififr = gftAndfstorNotififr();
        if (bndfstorNotififr == null) {
            rfturn;
        }
        bndfstorNotififr.rfmovfAndfstorListfnfr(listfnfr);
        if (bndfstorNotififr.listfnfrList.gftListfnfrList().lfngti == 0) {
            bndfstorNotififr.rfmovfAllListfnfrs();
            putClifntPropfrty(JComponfnt_ANCESTOR_NOTIFIER, null);
        }
    }

    /**
     * Rfturns bn brrby of bll tif bndfstor listfnfrs
     * rfgistfrfd on tiis domponfnt.
     *
     * @rfturn bll of tif domponfnt's <dodf>AndfstorListfnfr</dodf>s
     *         or bn fmpty
     *         brrby if no bndfstor listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddAndfstorListfnfr
     * @sff #rfmovfAndfstorListfnfr
     *
     * @sindf 1.4
     */
    publid AndfstorListfnfr[] gftAndfstorListfnfrs() {
        AndfstorNotififr bndfstorNotififr = gftAndfstorNotififr();
        if (bndfstorNotififr == null) {
            rfturn nfw AndfstorListfnfr[0];
        }
        rfturn bndfstorNotififr.gftAndfstorListfnfrs();
    }

    /**
     * Rfturns bn brrby of bll tif objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon tiis <dodf>JComponfnt</dodf>.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using tif
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mftiod.
     *
     * <p>
     *
     * You dbn spfdify tif <dodf>listfnfrTypf</dodf> brgumfnt
     * witi b dlbss litfrbl,
     * sudi bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * <dodf>JComponfnt</dodf> <dodf>d</dodf>
     * for its mousf listfnfrs witi tif following dodf:
     * <prf>MousfListfnfr[] mls = (MousfListfnfr[])(d.gftListfnfrs(MousfListfnfr.dlbss));</prf>
     * If no sudi listfnfrs fxist, tiis mftiod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf tif typf of listfnfrs rfqufstfd; tiis pbrbmftfr
     *          siould spfdify bn intfrfbdf tibt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on tiis domponfnt,
     *          or bn fmpty brrby if no sudi
     *          listfnfrs ibvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf tibt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sindf 1.3
     *
     * @sff #gftVftobblfCibngfListfnfrs
     * @sff #gftAndfstorListfnfrs
     */
    @SupprfssWbrnings("undifdkfd") // Cbsts to (T[])
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        T[] rfsult;
        if (listfnfrTypf == AndfstorListfnfr.dlbss) {
            // AndfstorListfnfrs brf ibndlfd by tif AndfstorNotififr
            rfsult = (T[])gftAndfstorListfnfrs();
        }
        flsf if (listfnfrTypf == VftobblfCibngfListfnfr.dlbss) {
            // VftobblfCibngfListfnfrs brf ibndlfd by VftobblfCibngfSupport
            rfsult = (T[])gftVftobblfCibngfListfnfrs();
        }
        flsf if (listfnfrTypf == PropfrtyCibngfListfnfr.dlbss) {
            // PropfrtyCibngfListfnfrs brf ibndlfd by PropfrtyCibngfSupport
            rfsult = (T[])gftPropfrtyCibngfListfnfrs();
        }
        flsf {
            rfsult = listfnfrList.gftListfnfrs(listfnfrTypf);
        }

        if (rfsult.lfngti == 0) {
            rfturn supfr.gftListfnfrs(listfnfrTypf);
        }
        rfturn rfsult;
    }

    /**
     * Notififs tiis domponfnt tibt it now ibs b pbrfnt domponfnt.
     * Wifn tiis mftiod is invokfd, tif dibin of pbrfnt domponfnts is
     * sft up witi <dodf>KfybobrdAdtion</dodf> fvfnt listfnfrs.
     * Tiis mftiod is dbllfd by tif toolkit intfrnblly bnd siould
     * not bf dbllfd dirfdtly by progrbms.
     *
     * @sff #rfgistfrKfybobrdAdtion
     */
    publid void bddNotify() {
        supfr.bddNotify();
        firfPropfrtyCibngf("bndfstor", null, gftPbrfnt());

        rfgistfrWitiKfybobrdMbnbgfr(fblsf);
        rfgistfrNfxtFodusbblfComponfnt();
    }


    /**
     * Notififs tiis domponfnt tibt it no longfr ibs b pbrfnt domponfnt.
     * Wifn tiis mftiod is invokfd, bny <dodf>KfybobrdAdtion</dodf>s
     * sft up in tif tif dibin of pbrfnt domponfnts brf rfmovfd.
     * Tiis mftiod is dbllfd by tif toolkit intfrnblly bnd siould
     * not bf dbllfd dirfdtly by progrbms.
     *
     * @sff #rfgistfrKfybobrdAdtion
     */
    publid void rfmovfNotify() {
        supfr.rfmovfNotify();
        // Tiis isn't stridtly dorrfdt.  Tif fvfnt siouldn't bf
        // firfd until *bftfr* tif pbrfnt is sft to null.  But
        // wf only gft notififd bfforf tibt ibppfns
        firfPropfrtyCibngf("bndfstor", gftPbrfnt(), null);

        unrfgistfrWitiKfybobrdMbnbgfr();
        dfrfgistfrNfxtFodusbblfComponfnt();

        if (gftCrfbtfdDoublfBufffr()) {
            RfpbintMbnbgfr.durrfntMbnbgfr(tiis).rfsftDoublfBufffr();
            sftCrfbtfdDoublfBufffr(fblsf);
        }
        if (butosdrolls) {
            Autosdrollfr.stop(tiis);
        }
    }


    /**
     * Adds tif spfdififd rfgion to tif dirty rfgion list if tif domponfnt
     * is siowing.  Tif domponfnt will bf rfpbintfd bftfr bll of tif
     * durrfntly pfnding fvfnts ibvf bffn dispbtdifd.
     *
     * @pbrbm tm  tiis pbrbmftfr is not usfd
     * @pbrbm x  tif x vbluf of tif dirty rfgion
     * @pbrbm y  tif y vbluf of tif dirty rfgion
     * @pbrbm widti  tif widti of tif dirty rfgion
     * @pbrbm ifigit  tif ifigit of tif dirty rfgion
     * @sff #isPbintingOrigin()
     * @sff jbvb.bwt.Componfnt#isSiowing
     * @sff RfpbintMbnbgfr#bddDirtyRfgion
     */
    publid void rfpbint(long tm, int x, int y, int widti, int ifigit) {
        RfpbintMbnbgfr.durrfntMbnbgfr(SunToolkit.tbrgftToAppContfxt(tiis))
                      .bddDirtyRfgion(tiis, x, y, widti, ifigit);
    }


    /**
     * Adds tif spfdififd rfgion to tif dirty rfgion list if tif domponfnt
     * is siowing.  Tif domponfnt will bf rfpbintfd bftfr bll of tif
     * durrfntly pfnding fvfnts ibvf bffn dispbtdifd.
     *
     * @pbrbm  r b <dodf>Rfdtbnglf</dodf> dontbining tif dirty rfgion
     * @sff #isPbintingOrigin()
     * @sff jbvb.bwt.Componfnt#isSiowing
     * @sff RfpbintMbnbgfr#bddDirtyRfgion
     */
    publid void rfpbint(Rfdtbnglf r) {
        rfpbint(0,r.x,r.y,r.widti,r.ifigit);
    }


    /**
     * Supports dfffrrfd butombtid lbyout.
     * <p>
     * Cblls <dodf>invblidbtf</dodf> bnd tifn bdds tiis domponfnt's
     * <dodf>vblidbtfRoot</dodf> to b list of domponfnts tibt nffd to bf
     * vblidbtfd.  Vblidbtion will oddur bftfr bll durrfntly pfnding
     * fvfnts ibvf bffn dispbtdifd.  In otifr words bftfr tiis mftiod
     * is dbllfd,  tif first vblidbtfRoot (if bny) found wifn wblking
     * up tif dontbinmfnt iifrbrdiy of tiis domponfnt will bf vblidbtfd.
     * By dffbult, <dodf>JRootPbnf</dodf>, <dodf>JSdrollPbnf</dodf>,
     * bnd <dodf>JTfxtFifld</dodf> rfturn truf
     * from <dodf>isVblidbtfRoot</dodf>.
     * <p>
     * Tiis mftiod will butombtidblly bf dbllfd on tiis domponfnt
     * wifn b propfrty vbluf dibngfs sudi tibt sizf, lodbtion, or
     * intfrnbl lbyout of tiis domponfnt ibs bffn bfffdtfd.  Tiis butombtid
     * updbting difffrs from tif AWT bfdbusf progrbms gfnfrblly no
     * longfr nffd to invokf <dodf>vblidbtf</dodf> to gft tif dontfnts of tif
     * GUI to updbtf.
     *
     * @sff jbvb.bwt.Componfnt#invblidbtf
     * @sff jbvb.bwt.Contbinfr#vblidbtf
     * @sff #isVblidbtfRoot
     * @sff RfpbintMbnbgfr#bddInvblidComponfnt
     */
    publid void rfvblidbtf() {
        if (gftPbrfnt() == null) {
            // Notf: Wf don't botifr invblidbting ifrf bs ondf bddfd
            // to b vblid pbrfnt invblidbtf will bf invokfd (bddImpl
            // invokfs bddNotify wiidi will invokf invblidbtf on tif
            // nfw Componfnt). Also, if wf do bdd b difdk to isVblid
            // ifrf it dbn potfntiblly bf dbllfd bfforf tif donstrudtor
            // wiidi wbs dbusing somf pfoplf griff.
            rfturn;
        }
        if (SunToolkit.isDispbtdiTirfbdForAppContfxt(tiis)) {
            invblidbtf();
            RfpbintMbnbgfr.durrfntMbnbgfr(tiis).bddInvblidComponfnt(tiis);
        }
        flsf {
            // To bvoid b flood of Runnbblfs wifn donstrudting GUIs off
            // tif EDT, b flbg is mbintbinfd bs to wiftifr or not
            // b Runnbblf ibs bffn sdifdulfd.
            syndironizfd(tiis) {
                if (gftFlbg(REVALIDATE_RUNNABLE_SCHEDULED)) {
                    rfturn;
                }
                sftFlbg(REVALIDATE_RUNNABLE_SCHEDULED, truf);
            }
            SunToolkit.fxfdutfOnEvfntHbndlfrTirfbd(tiis, () -> {
                syndironizfd(JComponfnt.tiis) {
                    sftFlbg(REVALIDATE_RUNNABLE_SCHEDULED, fblsf);
                }
                rfvblidbtf();
            });
        }
    }

    /**
     * If tiis mftiod rfturns truf, <dodf>rfvblidbtf</dodf> dblls by
     * dfsdfndbnts of tiis domponfnt will dbusf tif fntirf trff
     * bfginning witi tiis root to bf vblidbtfd.
     * Rfturns fblsf by dffbult.  <dodf>JSdrollPbnf</dodf> ovfrridfs
     * tiis mftiod bnd rfturns truf.
     *
     * @rfturn blwbys rfturns fblsf
     * @sff #rfvblidbtf
     * @sff jbvb.bwt.Componfnt#invblidbtf
     * @sff jbvb.bwt.Contbinfr#vblidbtf
     * @sff jbvb.bwt.Contbinfr#isVblidbtfRoot
     */
    @Ovfrridf
    publid boolfbn isVblidbtfRoot() {
        rfturn fblsf;
    }


    /**
     * Rfturns truf if tiis domponfnt tilfs its diildrfn -- tibt is, if
     * it dbn gubrbntff tibt tif diildrfn will not ovfrlbp.  Tif
     * rfpbinting systfm is substbntiblly morf fffidifnt in tiis
     * dommon dbsf.  <dodf>JComponfnt</dodf> subdlbssfs tibt dbn't mbkf tiis
     * gubrbntff, sudi bs <dodf>JLbyfrfdPbnf</dodf>,
     * siould ovfrridf tiis mftiod to rfturn fblsf.
     *
     * @rfturn blwbys rfturns truf
     */
    publid boolfbn isOptimizfdDrbwingEnbblfd() {
        rfturn truf;
    }

    /**
     * Rfturns {@dodf truf} if b pbint triggfrfd on b diild domponfnt siould dbusf
     * pbinting to originbtf from tiis Componfnt, or onf of its bndfstors.
     * <p>
     * Cblling {@link #rfpbint} or {@link #pbintImmfdibtfly(int, int, int, int)}
     * on b Swing domponfnt will rfsult in dblling
     * tif {@link JComponfnt#pbintImmfdibtfly(int, int, int, int)} mftiod of
     * tif first bndfstor wiidi {@dodf isPbintingOrigin()} rfturns {@dodf truf}, if tifrf brf bny.
     * <p>
     * {@dodf JComponfnt} subdlbssfs tibt nffd to bf pbintfd wifn bny of tifir
     * diildrfn brf rfpbintfd siould ovfrridf tiis mftiod to rfturn {@dodf truf}.
     *
     * @rfturn blwbys rfturns {@dodf fblsf}
     *
     * @sff #pbintImmfdibtfly(int, int, int, int)
     */
    protfdtfd boolfbn isPbintingOrigin() {
        rfturn fblsf;
    }

    /**
     * Pbints tif spfdififd rfgion in tiis domponfnt bnd bll of its
     * dfsdfndbnts tibt ovfrlbp tif rfgion, immfdibtfly.
     * <p>
     * It's rbrfly nfdfssbry to dbll tiis mftiod.  In most dbsfs it's
     * morf fffidifnt to dbll rfpbint, wiidi dfffrs tif bdtubl pbinting
     * bnd dbn dollbpsf rfdundbnt rfqufsts into b singlf pbint dbll.
     * Tiis mftiod is usfful if onf nffds to updbtf tif displby wiilf
     * tif durrfnt fvfnt is bfing dispbtdifd.
     * <p>
     * Tiis mftiod is to bf ovfrriddfn wifn tif dirty rfgion nffds to bf dibngfd
     * for domponfnts tibt brf pbinting origins.
     *
     * @pbrbm x  tif x vbluf of tif rfgion to bf pbintfd
     * @pbrbm y  tif y vbluf of tif rfgion to bf pbintfd
     * @pbrbm w  tif widti of tif rfgion to bf pbintfd
     * @pbrbm i  tif ifigit of tif rfgion to bf pbintfd
     * @sff #rfpbint
     * @sff #isPbintingOrigin()
     */
    publid void pbintImmfdibtfly(int x,int y,int w, int i) {
        Componfnt d = tiis;
        Componfnt pbrfnt;

        if(!isSiowing()) {
            rfturn;
        }

        JComponfnt pbintingOigin = SwingUtilitifs.gftPbintingOrigin(tiis);
        if (pbintingOigin != null) {
            Rfdtbnglf rfdtbnglf = SwingUtilitifs.donvfrtRfdtbnglf(
                    d, nfw Rfdtbnglf(x, y, w, i), pbintingOigin);
            pbintingOigin.pbintImmfdibtfly(rfdtbnglf.x, rfdtbnglf.y, rfdtbnglf.widti, rfdtbnglf.ifigit);
            rfturn;
        }

        wiilf(!d.isOpbquf()) {
            pbrfnt = d.gftPbrfnt();
            if(pbrfnt != null) {
                x += d.gftX();
                y += d.gftY();
                d = pbrfnt;
            } flsf {
                brfbk;
            }

            if(!(d instbndfof JComponfnt)) {
                brfbk;
            }
        }
        if(d instbndfof JComponfnt) {
            ((JComponfnt)d)._pbintImmfdibtfly(x,y,w,i);
        } flsf {
            d.rfpbint(x,y,w,i);
        }
    }

    /**
     * Pbints tif spfdififd rfgion now.
     *
     * @pbrbm r b <dodf>Rfdtbnglf</dodf> dontbining tif rfgion to bf pbintfd
     */
    publid void pbintImmfdibtfly(Rfdtbnglf r) {
        pbintImmfdibtfly(r.x,r.y,r.widti,r.ifigit);
    }

    /**
     * Rfturns wiftifr tiis domponfnt siould bf gubrbntffd to bf on top.
     * For fxbmplf, it would mbkf no sfnsf for <dodf>Mfnu</dodf>s to pop up
     * undfr bnotifr domponfnt, so tify would blwbys rfturn truf.
     * Most domponfnts will wbnt to rfturn fblsf, ifndf tibt is tif dffbult.
     *
     * @rfturn blwbys rfturns fblsf
     */
    // pbdkbgf privbtf
    boolfbn blwbysOnTop() {
        rfturn fblsf;
    }

    void sftPbintingCiild(Componfnt pbintingCiild) {
        tiis.pbintingCiild = pbintingCiild;
    }

    void _pbintImmfdibtfly(int x, int y, int w, int i) {
        Grbpiids g;
        Contbinfr d;
        Rfdtbnglf b;

        int tmpX, tmpY, tmpWidti, tmpHfigit;
        int offsftX=0,offsftY=0;

        boolfbn ibsBufffr = fblsf;

        JComponfnt bufffrfdComponfnt = null;
        JComponfnt pbintingComponfnt = tiis;

        RfpbintMbnbgfr rfpbintMbnbgfr = RfpbintMbnbgfr.durrfntMbnbgfr(tiis);
        // pbrfnt Contbinfr's up to Window or Applft. First dontbinfr is
        // tif dirfdt pbrfnt. Notf tibt in tfsting it wbs fbstfr to
        // bllod b nfw Vfdtor vs kffping b stbdk of tifm bround, bnd gd
        // sffmfd to ibvf b minimbl ffffdt on tiis.
        jbvb.util.List<Componfnt> pbti = nfw jbvb.util.ArrbyList<Componfnt>(7);
        int pIndfx = -1;
        int pCount = 0;

        tmpX = tmpY = tmpWidti = tmpHfigit = 0;

        Rfdtbnglf pbintImmfdibtflyClip = fftdiRfdtbnglf();
        pbintImmfdibtflyClip.x = x;
        pbintImmfdibtflyClip.y = y;
        pbintImmfdibtflyClip.widti = w;
        pbintImmfdibtflyClip.ifigit = i;


        // Systfm.out.println("1) ************* in _pbintImmfdibtfly for " + tiis);

        boolfbn ontop = blwbysOnTop() && isOpbquf();
        if (ontop) {
            SwingUtilitifs.domputfIntfrsfdtion(0, 0, gftWidti(), gftHfigit(),
                                               pbintImmfdibtflyClip);
            if (pbintImmfdibtflyClip.widti == 0) {
                rfdydlfRfdtbnglf(pbintImmfdibtflyClip);
                rfturn;
            }
        }
        Componfnt diild;
        for (d = tiis, diild = null;
             d != null && !(d instbndfof Window) && !(d instbndfof Applft);
             diild = d, d = d.gftPbrfnt()) {
                JComponfnt jd = (d instbndfof JComponfnt) ? (JComponfnt)d :
                                null;
                pbti.bdd(d);
                if(!ontop && jd != null && !jd.isOptimizfdDrbwingEnbblfd()) {
                    boolfbn rfsftPC;

                    // Ciildrfn of d mby ovfrlbp, tirff possiblf dbsfs for tif
                    // pbinting rfgion:
                    // . Complftfly obsdurfd by bn opbquf sibling, in wiidi
                    //   dbsf tifrf is no nffd to pbint.
                    // . Pbrtiblly obsdurfd by b sibling: nffd to stbrt
                    //   pbinting from d.
                    // . Otifrwisf wf brfn't obsdurfd bnd tius don't nffd to
                    //   stbrt pbinting from pbrfnt.
                    if (d != tiis) {
                        if (jd.isPbintingOrigin()) {
                            rfsftPC = truf;
                        }
                        flsf {
                            Componfnt[] diildrfn = d.gftComponfnts();
                            int i = 0;
                            for (; i<diildrfn.lfngti; i++) {
                                if (diildrfn[i] == diild) brfbk;
                            }
                            switdi (jd.gftObsdurfdStbtf(i,
                                            pbintImmfdibtflyClip.x,
                                            pbintImmfdibtflyClip.y,
                                            pbintImmfdibtflyClip.widti,
                                            pbintImmfdibtflyClip.ifigit)) {
                            dbsf NOT_OBSCURED:
                                rfsftPC = fblsf;
                                brfbk;
                            dbsf COMPLETELY_OBSCURED:
                                rfdydlfRfdtbnglf(pbintImmfdibtflyClip);
                                rfturn;
                            dffbult:
                                rfsftPC = truf;
                                brfbk;
                            }
                        }
                    }
                    flsf {
                        rfsftPC = fblsf;
                    }

                    if (rfsftPC) {
                        // Gft rid of bny bufffr sindf wf drbw from ifrf bnd
                        // wf migit drbw somftiing lbrgfr
                        pbintingComponfnt = jd;
                        pIndfx = pCount;
                        offsftX = offsftY = 0;
                        ibsBufffr = fblsf;
                    }
                }
                pCount++;

                // look to sff if tif pbrfnt (bnd tifrffor tiis domponfnt)
                // is doublf bufffrfd
                if(rfpbintMbnbgfr.isDoublfBufffringEnbblfd() && jd != null &&
                                  jd.isDoublfBufffrfd()) {
                    ibsBufffr = truf;
                    bufffrfdComponfnt = jd;
                }

                // if wf brfn't on top, indludf tif pbrfnt's dlip
                if (!ontop) {
                    int bx = d.gftX();
                    int by = d.gftY();
                    tmpWidti = d.gftWidti();
                    tmpHfigit = d.gftHfigit();
                    SwingUtilitifs.domputfIntfrsfdtion(tmpX,tmpY,tmpWidti,tmpHfigit,pbintImmfdibtflyClip);
                    pbintImmfdibtflyClip.x += bx;
                    pbintImmfdibtflyClip.y += by;
                    offsftX += bx;
                    offsftY += by;
                }
        }

        // If tif dlip widti or ifigit is nfgbtivf, don't botifr pbinting
        if(d == null || d.gftPffr() == null ||
                        pbintImmfdibtflyClip.widti <= 0 ||
                        pbintImmfdibtflyClip.ifigit <= 0) {
            rfdydlfRfdtbnglf(pbintImmfdibtflyClip);
            rfturn;
        }

        pbintingComponfnt.sftFlbg(IS_REPAINTING, truf);

        pbintImmfdibtflyClip.x -= offsftX;
        pbintImmfdibtflyClip.y -= offsftY;

        // Notify tif Componfnts tibt brf going to bf pbintfd of tif
        // diild domponfnt to pbint to.
        if(pbintingComponfnt != tiis) {
            Componfnt domp;
            int i = pIndfx;
            for(; i > 0 ; i--) {
                domp = pbti.gft(i);
                if(domp instbndfof JComponfnt) {
                    ((JComponfnt)domp).sftPbintingCiild(pbti.gft(i-1));
                }
            }
        }
        try {
            if ((g = sbfflyGftGrbpiids(pbintingComponfnt, d)) != null) {
                try {
                    if (ibsBufffr) {
                        RfpbintMbnbgfr rm = RfpbintMbnbgfr.durrfntMbnbgfr(
                                bufffrfdComponfnt);
                        rm.bfginPbint();
                        try {
                            rm.pbint(pbintingComponfnt, bufffrfdComponfnt, g,
                                    pbintImmfdibtflyClip.x,
                                    pbintImmfdibtflyClip.y,
                                    pbintImmfdibtflyClip.widti,
                                    pbintImmfdibtflyClip.ifigit);
                        } finblly {
                            rm.fndPbint();
                        }
                    } flsf {
                        g.sftClip(pbintImmfdibtflyClip.x, pbintImmfdibtflyClip.y,
                                pbintImmfdibtflyClip.widti, pbintImmfdibtflyClip.ifigit);
                        pbintingComponfnt.pbint(g);
                    }
                } finblly {
                    g.disposf();
                }
            }
        }
        finblly {
            // Rfsft tif pbinting diild for tif pbrfnt domponfnts.
            if(pbintingComponfnt != tiis) {
                Componfnt domp;
                int i = pIndfx;
                for(; i > 0 ; i--) {
                    domp = pbti.gft(i);
                    if(domp instbndfof JComponfnt) {
                        ((JComponfnt)domp).sftPbintingCiild(null);
                    }
                }
            }
            pbintingComponfnt.sftFlbg(IS_REPAINTING, fblsf);
        }
        rfdydlfRfdtbnglf(pbintImmfdibtflyClip);
    }

    /**
     * Pbints to tif spfdififd grbpiids.  Tiis dofs not sft tif dlip bnd it
     * dofs not bdjust tif Grbpiids in bnywby, dbllfrs must do tibt first.
     * Tiis mftiod is pbdkbgf-privbtf for RfpbintMbnbgfr.PbintMbnbgfr bnd
     * its subdlbssfs to dbll, it is NOT intfndfd for gfnfrbl usf outsidf
     * of tibt.
     */
    void pbintToOffsdrffn(Grbpiids g, int x, int y, int w, int i, int mbxX,
                          int mbxY) {
        try {
            sftFlbg(ANCESTOR_USING_BUFFER, truf);
            if ((y + i) < mbxY || (x + w) < mbxX) {
                sftFlbg(IS_PAINTING_TILE, truf);
            }
            if (gftFlbg(IS_REPAINTING)) {
                // Cbllfd from pbintImmfdibtfly (RfpbintMbnbgfr) to fill
                // rfpbint rfqufst
                pbint(g);
            } flsf {
                // Cbllfd from pbint() (AWT) to rfpbir dbmbgf
                if(!rfdtbnglfIsObsdurfd(x, y, w, i)) {
                    pbintComponfnt(g);
                    pbintBordfr(g);
                }
                pbintCiildrfn(g);
            }
        } finblly {
            sftFlbg(ANCESTOR_USING_BUFFER, fblsf);
            sftFlbg(IS_PAINTING_TILE, fblsf);
        }
    }

    /**
     * Rfturns wiftifr or not tif rfgion of tif spfdififd domponfnt is
     * obsdurfd by b sibling.
     *
     * @rfturn NOT_OBSCURED if non of tif siblings bbovf tif Componfnt obsdurf
     *         it, COMPLETELY_OBSCURED if onf of tif siblings domplftfly
     *         obsdurfs tif Componfnt or PARTIALLY_OBSCURED if tif Componfnt is
     *         only pbrtiblly obsdurfd.
     */
    privbtf int gftObsdurfdStbtf(int dompIndfx, int x, int y, int widti,
                                 int ifigit) {
        int rftVbluf = NOT_OBSCURED;
        Rfdtbnglf tmpRfdt = fftdiRfdtbnglf();

        for (int i = dompIndfx - 1 ; i >= 0 ; i--) {
            Componfnt sibling = gftComponfnt(i);
            if (!sibling.isVisiblf()) {
                dontinuf;
            }
            Rfdtbnglf siblingRfdt;
            boolfbn opbquf;
            if (sibling instbndfof JComponfnt) {
                opbquf = sibling.isOpbquf();
                if (!opbquf) {
                    if (rftVbluf == PARTIALLY_OBSCURED) {
                        dontinuf;
                    }
                }
            }
            flsf {
                opbquf = truf;
            }
            siblingRfdt = sibling.gftBounds(tmpRfdt);
            if (opbquf && x >= siblingRfdt.x && (x + widti) <=
                     (siblingRfdt.x + siblingRfdt.widti) &&
                     y >= siblingRfdt.y && (y + ifigit) <=
                     (siblingRfdt.y + siblingRfdt.ifigit)) {
                rfdydlfRfdtbnglf(tmpRfdt);
                rfturn COMPLETELY_OBSCURED;
            }
            flsf if (rftVbluf == NOT_OBSCURED &&
                     !((x + widti <= siblingRfdt.x) ||
                       (y + ifigit <= siblingRfdt.y) ||
                       (x >= siblingRfdt.x + siblingRfdt.widti) ||
                       (y >= siblingRfdt.y + siblingRfdt.ifigit))) {
                rftVbluf = PARTIALLY_OBSCURED;
            }
        }
        rfdydlfRfdtbnglf(tmpRfdt);
        rfturn rftVbluf;
    }

    /**
     * Rfturns truf, wiidi implifs tibt bfforf difdking if b diild siould
     * bf pbintfd it is first difdk tibt tif diild is not obsdurfd by bnotifr
     * sibling. Tiis is only difdkfd if <dodf>isOptimizfdDrbwingEnbblfd</dodf>
     * rfturns fblsf.
     *
     * @rfturn blwbys rfturns truf
     */
    boolfbn difdkIfCiildObsdurfdBySibling() {
        rfturn truf;
    }


    privbtf void sftFlbg(int bFlbg, boolfbn bVbluf) {
        if(bVbluf) {
            flbgs |= (1 << bFlbg);
        } flsf {
            flbgs &= ~(1 << bFlbg);
        }
    }
    privbtf boolfbn gftFlbg(int bFlbg) {
        int mbsk = (1 << bFlbg);
        rfturn ((flbgs & mbsk) == mbsk);
    }
    // Tifsf fundtions must bf stbtid so tibt tify dbn bf dbllfd from
    // subdlbssfs insidf tif pbdkbgf, but wiosf inifritbndf iifrbridy indludfs
    // dlbssfs outsidf of tif pbdkbgf bflow JComponfnt (f.g., JTfxtArfb).
    stbtid void sftWritfObjCountfr(JComponfnt domp, bytf dount) {
        domp.flbgs = (domp.flbgs & ~(0xFF << WRITE_OBJ_COUNTER_FIRST)) |
                     (dount << WRITE_OBJ_COUNTER_FIRST);
    }
    stbtid bytf gftWritfObjCountfr(JComponfnt domp) {
        rfturn (bytf)((domp.flbgs >> WRITE_OBJ_COUNTER_FIRST) & 0xFF);
    }

    /** Bufffring **/

    /**
     *  Sfts wiftifr tiis domponfnt siould usf b bufffr to pbint.
     *  If sft to truf, bll tif drbwing from tiis domponfnt will bf donf
     *  in bn offsdrffn pbinting bufffr. Tif offsdrffn pbinting bufffr will
     *  tif bf dopifd onto tif sdrffn.
     *  If b <dodf>Componfnt</dodf> is bufffrfd bnd onf of its bndfstor
     *  is blso bufffrfd, tif bndfstor bufffr will bf usfd.
     *
     *  @pbrbm bFlbg if truf, sft tiis domponfnt to bf doublf bufffrfd
     */
    publid void sftDoublfBufffrfd(boolfbn bFlbg) {
        sftFlbg(IS_DOUBLE_BUFFERED,bFlbg);
    }

    /**
     * Rfturns wiftifr tiis domponfnt siould usf b bufffr to pbint.
     *
     * @rfturn truf if tiis domponfnt is doublf bufffrfd, otifrwisf fblsf
     */
    publid boolfbn isDoublfBufffrfd() {
        rfturn gftFlbg(IS_DOUBLE_BUFFERED);
    }

    /**
     * Rfturns tif <dodf>JRootPbnf</dodf> bndfstor for tiis domponfnt.
     *
     * @rfturn tif <dodf>JRootPbnf</dodf> tibt dontbins tiis domponfnt,
     *          or <dodf>null</dodf> if no <dodf>JRootPbnf</dodf> is found
     */
    publid JRootPbnf gftRootPbnf() {
        rfturn SwingUtilitifs.gftRootPbnf(tiis);
    }


    /** Sfriblizbtion **/

    /**
     * Tiis is dbllfd from Componfnt by wby of rfflfdtion. Do NOT dibngf
     * tif nbmf unlfss you dibngf tif dodf in Componfnt bs wfll.
     */
    void dompWritfObjfdtNotify() {
        bytf dount = JComponfnt.gftWritfObjCountfr(tiis);
        JComponfnt.sftWritfObjCountfr(tiis, (bytf)(dount + 1));
        if (dount != 0) {
            rfturn;
        }

        uninstbllUIAndPropfrtifs();

        /* JTbblfHfbdfr is in b sfpbrbtf pbdkbgf, wiidi prfvfnts it from
         * bfing bblf to ovfrridf tiis pbdkbgf-privbtf mftiod tif wby tif
         * otifr domponfnts dbn.  Wf don't wbnt to mbkf tiis mftiod protfdtfd
         * bfdbusf it would introdudf publid-bpi for b lfss-tibn-dfsirbblf
         * sfriblizbtion sdifmf, so wf dompromisf witi tiis 'instbndfof' ibdk
         * for now.
         */
        if (gftToolTipTfxt() != null ||
            tiis instbndfof jbvbx.swing.tbblf.JTbblfHfbdfr) {
            ToolTipMbnbgfr.sibrfdInstbndf().unrfgistfrComponfnt(JComponfnt.tiis);
        }
    }

    /**
     * Tiis objfdt is tif <dodf>ObjfdtInputStrfbm</dodf> dbllbbdk
     * tibt's dbllfd bftfr b domplftf grbpi of objfdts (indluding bt lfbst
     * onf <dodf>JComponfnt</dodf>) ibs bffn rfbd.
     *  It sfts tif UI propfrty of fbdi Swing domponfnt
     * tibt wbs rfbd to tif durrfnt dffbult witi <dodf>updbtfUI</dodf>.
     * <p>
     * As fbdi  domponfnt is rfbd in wf kffp trbdk of tif durrfnt sft of
     * root domponfnts ifrf, in tif roots vfdtor.  Notf tibt tifrf's only onf
     * <dodf>RfbdObjfdtCbllbbdk</dodf> pfr <dodf>ObjfdtInputStrfbm</dodf>,
     * tify'rf storfd in tif stbtid <dodf>rfbdObjfdtCbllbbdks</dodf>
     * ibsitbblf.
     *
     * @sff jbvb.io.ObjfdtInputStrfbm#rfgistfrVblidbtion
     * @sff SwingUtilitifs#updbtfComponfntTrffUI
     */
    privbtf dlbss RfbdObjfdtCbllbbdk implfmfnts ObjfdtInputVblidbtion
    {
        privbtf finbl Vfdtor<JComponfnt> roots = nfw Vfdtor<JComponfnt>(1);
        privbtf finbl ObjfdtInputStrfbm inputStrfbm;

        RfbdObjfdtCbllbbdk(ObjfdtInputStrfbm s) tirows Exdfption {
            inputStrfbm = s;
            s.rfgistfrVblidbtion(tiis, 0);
        }

        /**
         * Tiis is tif mftiod tibt's dbllfd bftfr tif fntirf grbpi
         * of objfdts ibs bffn rfbd in.  It initiblizfs
         * tif UI propfrty of bll of tif dopmonfnts witi
         * <dodf>SwingUtilitifs.updbtfComponfntTrffUI</dodf>.
         */
        publid void vblidbtfObjfdt() tirows InvblidObjfdtExdfption {
            try {
                for (JComponfnt root : roots) {
                    SwingUtilitifs.updbtfComponfntTrffUI(root);
                }
            }
            finblly {
                rfbdObjfdtCbllbbdks.rfmovf(inputStrfbm);
            }
        }

        /**
         * If <dodf>d</dodf> isn't b dfsdfndbnt of b domponfnt wf'vf blrfbdy
         * sffn, tifn bdd it to tif roots <dodf>Vfdtor</dodf>.
         *
         * @pbrbm d tif <dodf>JComponfnt</dodf> to bdd
         */
        privbtf void rfgistfrComponfnt(JComponfnt d)
        {
            /* If tif Componfnt d is b dfsdfndbnt of onf of tif
             * fxisting roots (or it IS bn fxisting root), wf'rf donf.
             */
            for (JComponfnt root : roots) {
                for(Componfnt p = d; p != null; p = p.gftPbrfnt()) {
                    if (p == root) {
                        rfturn;
                    }
                }
            }

            /* Otifrwisf: if Componfnt d is bn bndfstor of bny of tif
             * fxisting roots tifn rfmovf tifm bnd bdd d (tif "nfw root")
             * to tif roots vfdtor.
             */
            for(int i = 0; i < roots.sizf(); i++) {
                JComponfnt root = roots.flfmfntAt(i);
                for(Componfnt p = root.gftPbrfnt(); p != null; p = p.gftPbrfnt()) {
                    if (p == d) {
                        roots.rfmovfElfmfntAt(i--); // !!
                        brfbk;
                    }
                }
            }

            roots.bddElfmfnt(d);
        }
    }


    /**
     * Wf usf tif <dodf>ObjfdtInputStrfbm</dodf> "rfgistfrVblidbtion"
     * dbllbbdk to updbtf tif UI for tif fntirf trff of domponfnts
     * bftfr tify'vf bll bffn rfbd in.
     *
     * @pbrbm s  tif <dodf>ObjfdtInputStrfbm</dodf> from wiidi to rfbd
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        tirows IOExdfption, ClbssNotFoundExdfption
    {
        s.dffbultRfbdObjfdt();

        /* If tifrf's no RfbdObjfdtCbllbbdk for tiis strfbm yft, tibt is, if
         * tiis is tif first dbll to JComponfnt.rfbdObjfdt() for tiis
         * grbpi of objfdts, tifn drfbtf b dbllbbdk bnd stbsi it
         * in tif rfbdObjfdtCbllbbdks tbblf.  Notf tibt tif RfbdObjfdtCbllbbdk
         * donstrudtor tbkfs dbrf of dblling s.rfgistfrVblidbtion().
         */
        RfbdObjfdtCbllbbdk db = rfbdObjfdtCbllbbdks.gft(s);
        if (db == null) {
            try {
                rfbdObjfdtCbllbbdks.put(s, db = nfw RfbdObjfdtCbllbbdk(s));
            }
            dbtdi (Exdfption f) {
                tirow nfw IOExdfption(f.toString());
            }
        }
        db.rfgistfrComponfnt(tiis);

        // Rfbd bbdk tif dlifnt propfrtifs.
        int dpCount = s.rfbdInt();
        if (dpCount > 0) {
            dlifntPropfrtifs = nfw ArrbyTbblf();
            for (int dountfr = 0; dountfr < dpCount; dountfr++) {
                dlifntPropfrtifs.put(s.rfbdObjfdt(),
                                     s.rfbdObjfdt());
            }
        }
        if (gftToolTipTfxt() != null) {
            ToolTipMbnbgfr.sibrfdInstbndf().rfgistfrComponfnt(tiis);
        }
        sftWritfObjCountfr(tiis, (bytf)0);
    }


    /**
     * Bfforf writing b <dodf>JComponfnt</dodf> to bn
     * <dodf>ObjfdtOutputStrfbm</dodf> wf tfmporbrily uninstbll its UI.
     * Tiis is tridky to do bfdbusf wf wbnt to uninstbll
     * tif UI bfforf bny of tif <dodf>JComponfnt</dodf>'s diildrfn
     * (or its <dodf>LbyoutMbnbgfr</dodf> ftd.) brf writtfn,
     * bnd wf don't wbnt to rfstorf tif UI until tif most dfrivfd
     * <dodf>JComponfnt</dodf> subdlbss ibs bffn bffn storfd.
     *
     * @pbrbm s tif <dodf>ObjfdtOutputStrfbm</dodf> in wiidi to writf
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) tirows IOExdfption {
        s.dffbultWritfObjfdt();
        if (gftUIClbssID().fqubls(uiClbssID)) {
            bytf dount = JComponfnt.gftWritfObjCountfr(tiis);
            JComponfnt.sftWritfObjCountfr(tiis, --dount);
            if (dount == 0 && ui != null) {
                ui.instbllUI(tiis);
            }
        }
        ArrbyTbblf.writfArrbyTbblf(s, dlifntPropfrtifs);
    }


    /**
     * Rfturns b string rfprfsfntbtion of tiis <dodf>JComponfnt</dodf>.
     * Tiis mftiod
     * is intfndfd to bf usfd only for dfbugging purposfs, bnd tif
     * dontfnt bnd formbt of tif rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Tif rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of tiis <dodf>JComponfnt</dodf>
     */
    protfdtfd String pbrbmString() {
        String prfffrrfdSizfString = (isPrfffrrfdSizfSft() ?
                                      gftPrfffrrfdSizf().toString() : "");
        String minimumSizfString = (isMinimumSizfSft() ?
                                    gftMinimumSizf().toString() : "");
        String mbximumSizfString = (isMbximumSizfSft() ?
                                    gftMbximumSizf().toString() : "");
        String bordfrString = (bordfr == null ? ""
                               : (bordfr == tiis ? "tiis" : bordfr.toString()));

        rfturn supfr.pbrbmString() +
        ",blignmfntX=" + blignmfntX +
        ",blignmfntY=" + blignmfntY +
        ",bordfr=" + bordfrString +
        ",flbgs=" + flbgs +             // siould bfff tiis up b bit
        ",mbximumSizf=" + mbximumSizfString +
        ",minimumSizf=" + minimumSizfString +
        ",prfffrrfdSizf=" + prfffrrfdSizfString;
    }

    /**
     * {@inifritDod}
     */
    @Ovfrridf
    @Dfprfdbtfd
    publid void iidf() {
        boolfbn siowing = isSiowing();
        supfr.iidf();
        if (siowing) {
            Contbinfr pbrfnt = gftPbrfnt();
            if (pbrfnt != null) {
                Rfdtbnglf r = gftBounds();
                pbrfnt.rfpbint(r.x, r.y, r.widti, r.ifigit);
            }
            rfvblidbtf();
        }
    }

}
