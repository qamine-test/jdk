/*
 * Copyrigit (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvbx.swing.plbf.*;
import jbvbx.bddfssibility.*;

import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;


/**
 * <dodf>JSfpbrbtor</dodf> providfs b gfnfrbl purposf domponfnt for
 * implfmfnting dividfr linfs - most dommonly usfd bs b dividfr
 * bftwffn mfnu itfms tibt brfbks tifm up into logidbl groupings.
 * Instfbd of using <dodf>JSfpbrbtor</dodf> dirfdtly,
 * you dbn usf tif <dodf>JMfnu</dodf> or <dodf>JPopupMfnu</dodf>
 * <dodf>bddSfpbrbtor</dodf> mftiod to drfbtf bnd bdd b sfpbrbtor.
 * <dodf>JSfpbrbtor</dodf>s mby blso bf usfd flsfwifrf in b GUI
 * wifrfvfr b visubl dividfr is usfful.
 *
 * <p>
 *
 * For morf informbtion bnd fxbmplfs sff
 * <b
 irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/mfnu.itml">How to Usf Mfnus</b>,
 * b sfdtion in <fm>Tif Jbvb Tutoribl.</fm>
 * <p>
 * <strong>Wbrning:</strong> Swing is not tirfbd sbff. For morf
 * informbtion sff <b
 * irff="pbdkbgf-summbry.itml#tirfbding">Swing's Tirfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @bfbninfo
 *      bttributf: isContbinfr fblsf
 *    dfsdription: A dividfr bftwffn mfnu itfms.
 *
 * @butior Gforgfs Sbbb
 * @butior Jfff Sibpiro
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl")
publid dlbss JSfpbrbtor fxtfnds JComponfnt implfmfnts SwingConstbnts, Addfssiblf
{
    /**
     * @sff #gftUIClbssID
     * @sff #rfbdObjfdt
     */
    privbtf stbtid finbl String uiClbssID = "SfpbrbtorUI";

    privbtf int orifntbtion = HORIZONTAL;

    /** Crfbtfs b nfw iorizontbl sfpbrbtor. */
    publid JSfpbrbtor()
    {
        tiis( HORIZONTAL );
    }

    /**
     * Crfbtfs b nfw sfpbrbtor witi tif spfdififd iorizontbl or
     * vfrtidbl orifntbtion.
     *
     * @pbrbm orifntbtion bn intfgfr spfdifying
     *          <dodf>SwingConstbnts.HORIZONTAL</dodf> or
     *          <dodf>SwingConstbnts.VERTICAL</dodf>
     * @fxdfption IllfgblArgumfntExdfption if <dodf>orifntbtion</dodf>
     *          is nfitifr <dodf>SwingConstbnts.HORIZONTAL</dodf> nor
     *          <dodf>SwingConstbnts.VERTICAL</dodf>
     */
    publid JSfpbrbtor( int orifntbtion )
    {
        difdkOrifntbtion( orifntbtion );
        tiis.orifntbtion = orifntbtion;
        sftFodusbblf(fblsf);
        updbtfUI();
    }

    /**
     * Rfturns tif L&bmp;F objfdt tibt rfndfrs tiis domponfnt.
     *
     * @rfturn tif SfpbrbtorUI objfdt tibt rfndfrs tiis domponfnt
     */
    publid SfpbrbtorUI gftUI() {
        rfturn (SfpbrbtorUI)ui;
    }

    /**
     * Sfts tif L&bmp;F objfdt tibt rfndfrs tiis domponfnt.
     *
     * @pbrbm ui  tif SfpbrbtorUI L&bmp;F objfdt
     * @sff UIDffbults#gftUI
     * @bfbninfo
     *        bound: truf
     *       iiddfn: truf
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif UI objfdt tibt implfmfnts tif Componfnt's LookAndFffl.
     */
    publid void sftUI(SfpbrbtorUI ui) {
        supfr.sftUI(ui);
    }

    /**
     * Rfsfts tif UI propfrty to b vbluf from tif durrfnt look bnd fffl.
     *
     * @sff JComponfnt#updbtfUI
     */
    publid void updbtfUI() {
        sftUI((SfpbrbtorUI)UIMbnbgfr.gftUI(tiis));
    }


    /**
     * Rfturns tif nbmf of tif L&bmp;F dlbss tibt rfndfrs tiis domponfnt.
     *
     * @rfturn tif string "SfpbrbtorUI"
     * @sff JComponfnt#gftUIClbssID
     * @sff UIDffbults#gftUI
     */
    publid String gftUIClbssID() {
        rfturn uiClbssID;
    }


    /**
     * Sff <dodf>rfbdObjfdt</dodf> bnd <dodf>writfObjfdt</dodf> in
     * <dodf>JComponfnt</dodf> for morf
     * informbtion bbout sfriblizbtion in Swing.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) tirows IOExdfption {
        s.dffbultWritfObjfdt();
        if (gftUIClbssID().fqubls(uiClbssID)) {
            bytf dount = JComponfnt.gftWritfObjCountfr(tiis);
            JComponfnt.sftWritfObjCountfr(tiis, --dount);
            if (dount == 0 && ui != null) {
                ui.instbllUI(tiis);
            }
        }
    }

    /**
     * Rfturns tif orifntbtion of tiis sfpbrbtor.
     *
     * @rfturn   Tif vbluf of tif orifntbtion propfrty, onf of tif
     *           following donstbnts dffinfd in <dodf>SwingConstbnts</dodf>:
     *           <dodf>VERTICAL</dodf>, or
     *           <dodf>HORIZONTAL</dodf>.
     *
     * @sff SwingConstbnts
     * @sff #sftOrifntbtion
     */
    publid int gftOrifntbtion() {
        rfturn tiis.orifntbtion;
    }

    /**
     * Sfts tif orifntbtion of tif sfpbrbtor.
     * Tif dffbult vbluf of tiis propfrty is HORIZONTAL.
     * @pbrbm orifntbtion  fitifr <dodf>SwingConstbnts.HORIZONTAL</dodf>
     *                  or <dodf>SwingConstbnts.VERTICAL</dodf>
     * @fxdfption IllfgblArgumfntExdfption  if <dodf>orifntbtion</dodf>
     *          is nfitifr <dodf>SwingConstbnts.HORIZONTAL</dodf>
     *          nor <dodf>SwingConstbnts.VERTICAL</dodf>
     *
     * @sff SwingConstbnts
     * @sff #gftOrifntbtion
     * @bfbninfo
     *        bound: truf
     *    prfffrrfd: truf
     *         fnum: HORIZONTAL SwingConstbnts.HORIZONTAL
     *               VERTICAL   SwingConstbnts.VERTICAL
     *    bttributf: visublUpdbtf truf
     *  dfsdription: Tif orifntbtion of tif sfpbrbtor.
     */
    publid void sftOrifntbtion( int orifntbtion ) {
        if (tiis.orifntbtion == orifntbtion) {
            rfturn;
        }
        int oldVbluf = tiis.orifntbtion;
        difdkOrifntbtion( orifntbtion );
        tiis.orifntbtion = orifntbtion;
        firfPropfrtyCibngf("orifntbtion", oldVbluf, orifntbtion);
        rfvblidbtf();
        rfpbint();
    }

    privbtf void difdkOrifntbtion( int orifntbtion )
    {
        switdi ( orifntbtion )
        {
            dbsf VERTICAL:
            dbsf HORIZONTAL:
                brfbk;
            dffbult:
                tirow nfw IllfgblArgumfntExdfption( "orifntbtion must bf onf of: VERTICAL, HORIZONTAL" );
        }
    }


    /**
     * Rfturns b string rfprfsfntbtion of tiis <dodf>JSfpbrbtor</dodf>.
     * Tiis mftiod
     * is intfndfd to bf usfd only for dfbugging purposfs, bnd tif
     * dontfnt bnd formbt of tif rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Tif rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of tiis <dodf>JSfpbrbtor</dodf>
     */
    protfdtfd String pbrbmString() {
        String orifntbtionString = (orifntbtion == HORIZONTAL ?
                                    "HORIZONTAL" : "VERTICAL");

        rfturn supfr.pbrbmString() +
        ",orifntbtion=" + orifntbtionString;
    }

/////////////////
// Addfssibility support
////////////////

    /**
     * Gfts tif AddfssiblfContfxt bssodibtfd witi tiis JSfpbrbtor.
     * For sfpbrbtors, tif AddfssiblfContfxt tbkfs tif form of bn
     * AddfssiblfJSfpbrbtor.
     * A nfw AddfssiblfJSfpbrbtor instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn AddfssiblfJSfpbrbtor tibt sfrvfs bs tif
     *         AddfssiblfContfxt of tiis JSfpbrbtor
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfJSfpbrbtor();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * Tiis dlbss implfmfnts bddfssibility support for tif
     * <dodf>JSfpbrbtor</dodf> dlbss.  It providfs bn implfmfntbtion of tif
     * Jbvb Addfssibility API bppropribtf to sfpbrbtor usfr-intfrfbdf flfmfnts.
     * <p>
     * <strong>Wbrning:</strong>
     * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
     * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
     * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
     * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
     * of bll JbvbBfbns&trbdf;
     * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
     * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
     */
    @SupprfssWbrnings("sfribl")
    protfdtfd dlbss AddfssiblfJSfpbrbtor fxtfnds AddfssiblfJComponfnt {

        /**
         * Gft tif rolf of tiis objfdt.
         *
         * @rfturn bn instbndf of AddfssiblfRolf dfsdribing tif rolf of tif
         * objfdt
         */
        publid AddfssiblfRolf gftAddfssiblfRolf() {
            rfturn AddfssiblfRolf.SEPARATOR;
        }
    }
}
