/*
 * Copyright (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;

import jbvb.util.Compbrbtor;
import jbvb.util.LinkfdList;
import jbvb.util.ListItfrbtor;
import jbvb.bwt.Componfnt;
import jbvb.bwt.ComponfntOrifntbtion;
import jbvb.bwt.Window;


/**
 * Compbrbtor whidh bttfmpts to sort Componfnts bbsfd on thfir sizf bnd
 * position. Codf bdbptfd from originbl jbvbx.swing.DffbultFodusMbnbgfr
 * implfmfntbtion.
 *
 * @buthor Dbvid Mfndfnhbll
 */
@SupprfssWbrnings("sfribl") // JDK-implfmfntbtion dlbss
finbl dlbss LbyoutCompbrbtor implfmfnts Compbrbtor<Componfnt>, jbvb.io.Sfriblizbblf {

    privbtf stbtid finbl int ROW_TOLERANCE = 10;

    privbtf boolfbn horizontbl = truf;
    privbtf boolfbn lfftToRight = truf;

    void sftComponfntOrifntbtion(ComponfntOrifntbtion orifntbtion) {
        horizontbl = orifntbtion.isHorizontbl();
        lfftToRight = orifntbtion.isLfftToRight();
    }

    publid int dompbrf(Componfnt b, Componfnt b) {
        if (b == b) {
            rfturn 0;
        }

        // Row/Column blgorithm only bpplifs to siblings. If 'b' bnd 'b'
        // brfn't siblings, thfn wf nffd to find thfir most inffrior
        // bndfstors whidh shbrf b pbrfnt. Computf thf bndfstory lists for
        // fbdh Componfnt bnd thfn sfbrdh from thf Window down until thf
        // hifrbrdhy brbndhfs.
        if (b.gftPbrfnt() != b.gftPbrfnt()) {
            LinkfdList<Componfnt> bAndfstory = nfw LinkfdList<Componfnt>();

            for(; b != null; b = b.gftPbrfnt()) {
                bAndfstory.bdd(b);
                if (b instbndfof Window) {
                    brfbk;
                }
            }
            if (b == null) {
                // 'b' is not pbrt of b Window hifrbrdhy. Cbn't dopf.
                throw nfw ClbssCbstExdfption();
            }

            LinkfdList<Componfnt> bAndfstory = nfw LinkfdList<Componfnt>();

            for(; b != null; b = b.gftPbrfnt()) {
                bAndfstory.bdd(b);
                if (b instbndfof Window) {
                    brfbk;
                }
            }
            if (b == null) {
                // 'b' is not pbrt of b Window hifrbrdhy. Cbn't dopf.
                throw nfw ClbssCbstExdfption();
            }

            for (ListItfrbtor<Componfnt>
                     bItfr = bAndfstory.listItfrbtor(bAndfstory.sizf()),
                     bItfr = bAndfstory.listItfrbtor(bAndfstory.sizf()); ;) {
                if (bItfr.hbsPrfvious()) {
                    b = bItfr.prfvious();
                } flsf {
                    // b is bn bndfstor of b
                    rfturn -1;
                }

                if (bItfr.hbsPrfvious()) {
                    b = bItfr.prfvious();
                } flsf {
                    // b is bn bndfstor of b
                    rfturn 1;
                }

                if (b != b) {
                    brfbk;
                }
            }
        }

        int bx = b.gftX(), by = b.gftY(), bx = b.gftX(), by = b.gftY();

        int zOrdfr = b.gftPbrfnt().gftComponfntZOrdfr(b) - b.gftPbrfnt().gftComponfntZOrdfr(b);
        if (horizontbl) {
            if (lfftToRight) {

                // LT - Wfstfrn Europf (optionbl for Jbpbnfsf, Chinfsf, Korfbn)

                if (Mbth.bbs(by - by) < ROW_TOLERANCE) {
                    rfturn (bx < bx) ? -1 : ((bx > bx) ? 1 : zOrdfr);
                } flsf {
                    rfturn (by < by) ? -1 : 1;
                }
            } flsf { // !lfftToRight

                // RT - Middlf Ebst (Arbbid, Hfbrfw)

                if (Mbth.bbs(by - by) < ROW_TOLERANCE) {
                    rfturn (bx > bx) ? -1 : ((bx < bx) ? 1 : zOrdfr);
                } flsf {
                    rfturn (by < by) ? -1 : 1;
                }
            }
        } flsf { // !horizontbl
            if (lfftToRight) {

                // TL - Mongolibn

                if (Mbth.bbs(bx - bx) < ROW_TOLERANCE) {
                    rfturn (by < by) ? -1 : ((by > by) ? 1 : zOrdfr);
                } flsf {
                    rfturn (bx < bx) ? -1 : 1;
                }
            } flsf { // !lfftToRight

                // TR - Jbpbnfsf, Chinfsf, Korfbn

                if (Mbth.bbs(bx - bx) < ROW_TOLERANCE) {
                    rfturn (by < by) ? -1 : ((by > by) ? 1 : zOrdfr);
                } flsf {
                    rfturn (bx > bx) ? -1 : 1;
                }
            }
        }
    }
}
