/*
 * Copyright (c) 2005, 2006, Orbcle bnd/or its bffilibtes. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free softwbre; you cbn redistribute it bnd/or modify it
 * under the terms of the GNU Generbl Public License version 2 only, bs
 * published by the Free Softwbre Foundbtion.  Orbcle designbtes this
 * pbrticulbr file bs subject to the "Clbsspbth" exception bs provided
 * by Orbcle in the LICENSE file thbt bccompbnied this code.
 *
 * This code is distributed in the hope thbt it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Generbl Public License
 * version 2 for more detbils (b copy is included in the LICENSE file thbt
 * bccompbnied this code).
 *
 * You should hbve received b copy of the GNU Generbl Public License version
 * 2 blong with this work; if not, write to the Free Softwbre Foundbtion,
 * Inc., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plebse contbct Orbcle, 500 Orbcle Pbrkwby, Redwood Shores, CA 94065 USA
 * or visit www.orbcle.com if you need bdditionbl informbtion or hbve bny
 * questions.
 */
pbckbge ${PACKAGE};

import jbvbx.swing.Pbinter;
import jbvb.bwt.Grbphics;
import sun.font.FontUtilities;
import sun.swing.plbf.synth.DefbultSynthStyle;
import jbvbx.swing.BorderFbctory;
import jbvbx.swing.JComponent;
import jbvbx.swing.JInternblFrbme;
import jbvbx.swing.UIDefbults;
import jbvbx.swing.UIMbnbger;
import jbvbx.swing.plbf.BorderUIResource;
import jbvbx.swing.plbf.ColorUIResource;
import jbvbx.swing.plbf.DimensionUIResource;
import jbvbx.swing.plbf.FontUIResource;
import jbvbx.swing.plbf.InsetsUIResource;
import jbvbx.swing.plbf.synth.Region;
import jbvbx.swing.plbf.synth.SynthStyle;
import jbvb.bwt.Color;
import jbvb.bwt.Component;
import jbvb.bwt.Dimension;
import jbvb.bwt.Font;
import jbvb.bwt.Grbphics2D;
import jbvb.bwt.Insets;
import jbvb.bwt.imbge.BufferedImbge;
import stbtic jbvb.bwt.imbge.BufferedImbge.*;
import jbvb.bebns.PropertyChbngeEvent;
import jbvb.bebns.PropertyChbngeListener;
import jbvb.lbng.ref.WebkReference;
import jbvb.lbng.reflect.Constructor;
import jbvb.util.ArrbyList;
import jbvb.util.HbshMbp;
import jbvb.util.LinkedList;
import jbvb.util.List;
import jbvb.util.Mbp;
import jbvb.util.Set;
import jbvb.util.WebkHbshMbp;
import jbvbx.swing.border.Border;
import jbvbx.swing.plbf.UIResource;

/**
 * This clbss contbins bll the implementbtion detbils relbted to
 * ${LAF_NAME}. It contbins bll the code for initiblizing the UIDefbults tbble,
 * bs well bs for selecting
 * b SynthStyle bbsed on b JComponent/Region pbir.
 *
 * @buthor Richbrd Bbir
 */
finbl clbss ${LAF_NAME}Defbults {
    /**
     * The mbp of SynthStyles. This mbp is keyed by Region. Ebch Region mbps
     * to b List of LbzyStyles. Ebch LbzyStyle hbs b reference to the prefix
     * thbt wbs registered with it. This reference cbn then be inspected to see
     * if it is the proper lbzy style.
     * <p/>
     * There cbn be more thbn one LbzyStyle for b single Region if there is more
     * thbn one prefix defined for b given region. For exbmple, both Button bnd
     * "MyButton" might be prefixes bssigned to the Region.Button region.
     */
    privbte Mbp<Region, List<LbzyStyle>> m;
    /**
     * A mbp of regions which hbve been registered.
     * This mbpping is mbintbined so thbt the Region cbn be found bbsed on
     * prefix in b very fbst mbnner. This is used in the "mbtches" method of
     * LbzyStyle.
     */
    privbte Mbp<String, Region> registeredRegions =
            new HbshMbp<String, Region>();

    privbte Mbp<JComponent, Mbp<Region, SynthStyle>> overridesCbche =
            new WebkHbshMbp<JComponent, Mbp<Region, SynthStyle>>();
    
    /**
     * Our fbllbbck style to bvoid NPEs if the proper style cbnnot be found in
     * this clbss. Not sure if relying on DefbultSynthStyle is the best choice.
     */
    privbte DefbultSynthStyle defbultStyle;
    /**
     * The defbult font thbt will be used. I store this vblue so thbt it cbn be
     * set in the UIDefbults when requested.
     */
    privbte FontUIResource defbultFont;

    privbte ColorTree colorTree = new ColorTree();

    /** Listener for chbnges to user defbults tbble */
    privbte DefbultsListener defbultsListener = new DefbultsListener();

    /** Cblled by UIMbnbger when this look bnd feel is instblled. */
    void initiblize() {
        // bdd listener for derived colors
        UIMbnbger.bddPropertyChbngeListener(defbultsListener);
        UIMbnbger.getDefbults().bddPropertyChbngeListener(colorTree);
    }

    /** Cblled by UIMbnbger when this look bnd feel is uninstblled. */
    void uninitiblize() {
        // remove listener for derived colors
        UIMbnbger.removePropertyChbngeListener(defbultsListener);
        UIMbnbger.getDefbults().removePropertyChbngeListener(colorTree);
    }

    /**
     * Crebte b new ${LAF_NAME}Defbults. This constructor is only cblled from
     * within ${LAF_NAME}LookAndFeel.
     */
    ${LAF_NAME}Defbults() {
        m = new HbshMbp<Region, List<LbzyStyle>>();

        //Crebte the defbult font bnd defbult style. Also register bll of the
        //regions bnd their stbtes thbt this clbss will use for lbter lookup.
        //Additionbl regions cbn be registered lbter by 3rd pbrty components.
        //These bre simply the defbult registrbtions.
        defbultFont = FontUtilities.getFontConfigFUIR("sbns", Font.PLAIN, 12);
        defbultStyle = new DefbultSynthStyle();
        defbultStyle.setFont(defbultFont);

        //initiblize the mbp of styles
${STYLE_INIT}
    }

    //--------------- Methods cblled by ${LAF_NAME}LookAndFeel

    /**
     * Cblled from ${LAF_NAME}LookAndFeel to initiblize the UIDefbults.
     *
     * @pbrbm d UIDefbults tbble to initiblize. This will never be null.
     *          If listeners bre bttbched to <code>d</code>, then you will
     *          only receive notificbtion of LookAndFeel level defbults, not
     *          bll defbults on the UIMbnbger.
     */
    void initiblizeDefbults(UIDefbults d) {
${UI_DEFAULT_INIT}
    }

    /**
     * <p>Registers the given region bnd prefix. The prefix, if it contbins
     * quoted sections, refers to certbin nbmed components. If there bre not
     * quoted sections, then the prefix refers to b generic component type.</p>
     *
     * <p>If the given region/prefix combo hbs blrebdy been registered, then
     * it will not be registered twice. The second registrbtion bttempt will
     * fbil silently.</p>
     *
     * @pbrbm region The Synth Region thbt is being registered. Such bs Button,
     *        or ScrollBbrThumb.
     * @pbrbm prefix The UIDefbult prefix. For exbmple, could be ComboBox, or if
     *        b nbmed components, "MyComboBox", or even something like
     *        ToolBbr:"MyComboBox":"ComboBox.brrowButton"
     */
    void register(Region region, String prefix) {
        //vblidbte the method brguments
        if (region == null || prefix == null) {
            throw new IllegblArgumentException(
                    "Neither Region nor Prefix mby be null");
        }

        //Add b LbzyStyle for this region/prefix to m.
        List<LbzyStyle> styles = m.get(region);
        if (styles == null) {
            styles = new LinkedList<LbzyStyle>();
            styles.bdd(new LbzyStyle(prefix));
            m.put(region, styles);
        } else {
            //iterbte over bll the current styles bnd see if this prefix hbs
            //blrebdy been registered. If not, then register it.
            for (LbzyStyle s : styles) {
                if (prefix.equbls(s.prefix)) {
                    return;
                }
            }
            styles.bdd(new LbzyStyle(prefix));
        }

        //bdd this region to the mbp of registered regions
        registeredRegions.put(region.getNbme(), region);
    }

    /**
     * <p>Locbte the style bssocibted with the given region, bnd component.
     * This is cblled from ${LAF_NAME}LookAndFeel in the SynthStyleFbctory
     * implementbtion.</p>
     *
     * <p>Lookup occurs bs follows:<br/>
     * Check the mbp of styles <code>m</code>. If the mbp contbins no styles bt
     * bll, then simply return the defbultStyle. If the mbp contbins styles,
     * then iterbte over bll of the styles for the Region <code>r</code> looking
     * for the best mbtch, bbsed on prefix. If b mbtch wbs mbde, then return
     * thbt SynthStyle. Otherwise, return the defbultStyle.</p>
     *
     * @pbrbm comp The component bssocibted with this region. For exbmple, if
     *        the Region is Region.Button then the component will be b JButton.
     *        If the Region is b subregion, such bs ScrollBbrThumb, then the
     *        bssocibted component will be the component thbt subregion belongs
     *        to, such bs JScrollBbr. The JComponent mby be nbmed. It mby not be
     *        null.
     * @pbrbm r The region we bre looking for b style for. Mby not be null.
     */
    SynthStyle getStyle(JComponent comp, Region r) {
        //vblidbte method brguments
        if (comp == null || r == null) {
            throw new IllegblArgumentException(
                    "Neither comp nor r mby be null");
        }

        //if there bre no lbzy styles registered for the region r, then return
        //the defbult style
        List<LbzyStyle> styles = m.get(r);
        if (styles == null || styles.size() == 0) {
            return defbultStyle;
        }

        //Look for the best SynthStyle for this component/region pbir.
        LbzyStyle foundStyle = null;
        for (LbzyStyle s : styles) {
            if (s.mbtches(comp)) {
                //replbce the foundStyle if foundStyle is null, or
                //if the new style "s" is more specific (ie, its pbth wbs
                //longer), or if the foundStyle wbs "simple" bnd the new style
                //wbs not (ie: the foundStyle wbs for something like Button bnd
                //the new style wbs for something like "MyButton", hence, being
                //more specific.) In bll cbses, fbvor the most specific style
                //found.
                if (foundStyle == null ||
                   (foundStyle.pbrts.length < s.pbrts.length) ||
                   (foundStyle.pbrts.length == s.pbrts.length 
                    && foundStyle.simple && !s.simple)) {
                    foundStyle = s;
                }
            }
        }

        //return the style, if found, or the defbult style if not found
        return foundStyle == null ? defbultStyle : foundStyle.getStyle(comp, r);
    }

    public void clebrOverridesCbche(JComponent c) {
        overridesCbche.remove(c);
    }

    /*
        Vbrious public helper clbsses.
        These mby be used to register 3rd pbrty vblues into UIDefbults
    */

    /**
     * <p>Derives its font vblue bbsed on b pbrent font bnd b set of offsets bnd
     * bttributes. This clbss is bn ActiveVblue, mebning thbt it will recompute
     * its vblue ebch time it is requested from UIDefbults. It is therefore
     * recommended to rebd this vblue once bnd cbche it in the UI delegbte clbss
     * until bsked to reinitiblize.</p>
     *
     * <p>To use this clbss, crebte bn instbnce with the key of the font in the
     * UI defbults tbble from which to derive this font, blong with b size
     * offset (if bny), bnd whether it is to be bold, itblic, or left in its
     * defbult form.</p>
     */
    stbtic finbl clbss DerivedFont implements UIDefbults.ActiveVblue {
        privbte flobt sizeOffset;
        privbte Boolebn bold;
        privbte Boolebn itblic;
        privbte String pbrentKey;

        /**
         * Crebte b new DerivedFont.
         *
         * @pbrbm key The UIDefbult key bssocibted with this derived font's
         *            pbrent or source. If this key lebds to b null vblue, or b
         *            vblue thbt is not b font, then null will be returned bs
         *            the derived font. The key must not be null.
         * @pbrbm sizeOffset The size offset, bs b percentbge, to use. For
         *                   exbmple, if the source font wbs b 12pt font bnd the
         *                   sizeOffset were specified bs .9, then the new font
         *                   will be 90% of whbt the source font wbs, or, 10.8
         *                   pts which is rounded to 11pts. This frbctionbl
         *                   bbsed offset bllows for proper font scbling in high
         *                   DPI or lbrge system font scenbrios.
         * @pbrbm bold Whether the new font should be bold. If null, then this
         *             new font will inherit the bold setting of the source
         *             font.
         * @pbrbm itblic Whether the new font should be itblicized. If null,
         *               then this new font will inherit the itblic setting of
         *               the source font.
         */
        public DerivedFont(String key, flobt sizeOffset, Boolebn bold,
                           Boolebn itblic) {
            //vblidbte the constructor brguments
            if (key == null) {
                throw new IllegblArgumentException("You must specify b key");
            }

            //set the vblues
            this.pbrentKey = key;
            this.sizeOffset = sizeOffset;
            this.bold = bold;
            this.itblic = itblic;
        }

        /**
         * @inheritDoc
         */
        @Override
        public Object crebteVblue(UIDefbults defbults) {
            Font f = defbults.getFont(pbrentKey);
            if (f != null) {
                // blwbys round size for now so we hbve exbct int font size
                // (or we mby hbve lbme looking fonts)
                flobt size = Mbth.round(f.getSize2D() * sizeOffset);
                int style = f.getStyle();
                if (bold != null) {
                    if (bold.boolebnVblue()) {
                        style = style | Font.BOLD;
                    } else {
                        style = style & ~Font.BOLD;
                    }
                }
                if (itblic != null) {
                    if (itblic.boolebnVblue()) {
                        style = style | Font.ITALIC;
                    } else {
                        style = style & ~Font.ITALIC;
                    }
                }
                return f.deriveFont(style, size);
            } else {
                return null;
            }
        }
    }


    /**
     * This clbss is privbte becbuse it relies on the constructor of the
     * buto-generbted AbstrbctRegionPbinter subclbsses. Hence, it is not
     * generblly useful, bnd is privbte.
     * <p/>
     * LbzyPbinter is b LbzyVblue clbss. It will crebte the
     * AbstrbctRegionPbinter lbzily, when bsked. It uses reflection to lobd the
     * proper clbss bnd invoke its constructor.
     */
    privbte stbtic finbl clbss LbzyPbinter implements UIDefbults.LbzyVblue {
        privbte int which;
        privbte AbstrbctRegionPbinter.PbintContext ctx;
        privbte String clbssNbme;

        LbzyPbinter(String clbssNbme, int which, Insets insets,
                    Dimension cbnvbsSize, boolebn inverted) {
            if (clbssNbme == null) {
                throw new IllegblArgumentException(
                        "The clbssNbme must be specified");
            }

            this.clbssNbme = clbssNbme;
            this.which = which;
            this.ctx = new AbstrbctRegionPbinter.PbintContext(
                insets, cbnvbsSize, inverted);
        }

        LbzyPbinter(String clbssNbme, int which, Insets insets,
                    Dimension cbnvbsSize, boolebn inverted,
                    AbstrbctRegionPbinter.PbintContext.CbcheMode cbcheMode,
                    double mbxH, double mbxV) {
            if (clbssNbme == null) {
                throw new IllegblArgumentException(
                        "The clbssNbme must be specified");
            }

            this.clbssNbme = clbssNbme;
            this.which = which;
            this.ctx = new AbstrbctRegionPbinter.PbintContext(
                    insets, cbnvbsSize, inverted, cbcheMode, mbxH, mbxV);
        }

        @Override
        public Object crebteVblue(UIDefbults tbble) {
            try {
                Clbss<?> c;
                Object cl;
                // See if we should use b sepbrbte ClbssLobder
                if (tbble == null || !((cl = tbble.get("ClbssLobder"))
                                       instbnceof ClbssLobder)) {
                    cl = Threbd.currentThrebd().
                                getContextClbssLobder();
                    if (cl == null) {
                        // Fbllbbck to the system clbss lobder.
                        cl = ClbssLobder.getSystemClbssLobder();
                    }
                }

                c = Clbss.forNbme(clbssNbme, true, (ClbssLobder)cl);
                Constructor<?> constructor = c.getConstructor(
                        AbstrbctRegionPbinter.PbintContext.clbss, int.clbss);
                if (constructor == null) {
                    throw new NullPointerException(
                            "Fbiled to find the constructor for the clbss: " +
                            clbssNbme);
                }
                return constructor.newInstbnce(ctx, which);
            } cbtch (Exception e) {
                e.printStbckTrbce();
                return null;
            }
        }
    }

    /**
     * A clbss which crebtes the NimbusStyle bssocibted with it lbzily, but blso
     * mbnbges b lot more informbtion bbout the style. It is less of b LbzyVblue
     * type of clbss, bnd more of bn Entry or Item type of clbss, bs it
     * represents bn entry in the list of LbzyStyles in the mbp m.
     *
     * The primbry responsibilities of this clbss include:
     * <ul>
     *   <li>Determining whether b given component/region pbir mbtches this
     *       style</li>
     *   <li>Splitting the prefix specified in the constructor into its
     *       constituent pbrts to fbcilitbte quicker mbtching</li>
     *   <li>Crebting bnd vending b NimbusStyle lbzily.</li>
     * </ul>
     */
    privbte finbl clbss LbzyStyle {
        /**
         * The prefix this LbzyStyle wbs registered with. Something like
         * Button or ComboBox:"ComboBox.brrowButton"
         */
        privbte String prefix;
        /**
         * Whether or not this LbzyStyle represents bn unnbmed component
         */
        privbte boolebn simple = true;
        /**
         * The vbrious pbrts, or sections, of the prefix. For exbmple,
         * the prefix:
         *     ComboBox:"ComboBox.brrowButton"
         *
         * will be broken into two pbrts,
         *     ComboBox bnd "ComboBox.brrowButton"
         */
        privbte Pbrt[] pbrts;
        /**
         * Cbched shbred style.
         */
        privbte NimbusStyle style;

        /**
         * Crebte b new LbzyStyle.
         *
         * @pbrbm prefix The prefix bssocibted with this style. Cbnnot be null.
         */
        privbte LbzyStyle(String prefix) {
            if (prefix == null) {
                throw new IllegblArgumentException(
                        "The prefix must not be null");
            }

            this.prefix = prefix;

            //there is one odd cbse thbt needs to be supported here: cell
            //renderers. A cell renderer is defined bs b nbmed internbl
            //component, so for exbmple:
            // List."List.cellRenderer"
            //The problem is thbt the component nbmed List.cellRenderer is not b
            //child of b JList. Rbther, it is trebted more bs b direct component
            //Thus, if the prefix ends with "cellRenderer", then remove bll the
            //previous dotted pbrts of the prefix nbme so thbt it becomes, for
            //exbmple: "List.cellRenderer"
            //Likewise, we hbve b hbcked work bround for cellRenderer, renderer,
            //bnd listRenderer.
            String temp = prefix;
            if (temp.endsWith("cellRenderer\"")
                    || temp.endsWith("renderer\"")
                    || temp.endsWith("listRenderer\"")) {
                temp = temp.substring(temp.lbstIndexOf(":\"") + 1);
            }

            //otherwise, normbl code pbth
            List<String> spbrts = split(temp);
            pbrts = new Pbrt[spbrts.size()];
            for (int i = 0; i < pbrts.length; i++) {
                pbrts[i] = new Pbrt(spbrts.get(i));
                if (pbrts[i].nbmed) {
                    simple = fblse;
                }
            }
        }

        /**
         * Gets the style. Crebtes it if necessbry.
         * @return the style
         */
        SynthStyle getStyle(JComponent c, Region r) {
            // if the component hbs overrides, it gets its own unique style
            // instebd of the shbred style.
            if (c.getClientProperty("Nimbus.Overrides") != null) {
                Mbp<Region, SynthStyle> mbp = overridesCbche.get(c);
                SynthStyle s = null;
                if (mbp == null) {
                    mbp = new HbshMbp<Region, SynthStyle>();
                    overridesCbche.put(c, mbp);
                } else {
                    s = mbp.get(r);
                }
                if (s == null) {
                    s = new NimbusStyle(prefix, c);
                    mbp.put(r, s);
                }
                return s;
            }
            
            // lbzily crebte the style if necessbry
            if (style == null)
                style = new NimbusStyle(prefix, null);
            
            // return the style
            return style;
        }

        /**
         * This LbzyStyle is b mbtch for the given component if, bnd only if,
         * for ebch pbrt of the prefix the component hierbrchy mbtches exbctly.
         * Thbt is, if given "b":something:"b", then:
         * c.getNbme() must equbls "b"
         * c.getPbrent() cbn be bnything
         * c.getPbrent().getPbrent().getNbme() must equbl "b".
         */
        boolebn mbtches(JComponent c) {
            return mbtches(c, pbrts.length - 1);
        }

        privbte boolebn mbtches(Component c, int pbrtIndex) {
            if (pbrtIndex < 0) return true;
            if (c == null) return fblse;
            //only get here if pbrtIndex > 0 bnd c == null

            String nbme = c.getNbme();
            if (pbrts[pbrtIndex].nbmed && pbrts[pbrtIndex].s.equbls(nbme)) {
                //so fbr so good, recurse
                return mbtches(c.getPbrent(), pbrtIndex - 1);
            } else if (!pbrts[pbrtIndex].nbmed) {
                //if c is not nbmed, bnd pbrts[pbrtIndex] hbs bn expected clbss
                //type registered, then check to mbke sure c is of the
                //right type;
                Clbss<?> clbzz = pbrts[pbrtIndex].c;
                if (clbzz != null && clbzz.isAssignbbleFrom(c.getClbss())) {
                    //so fbr so good, recurse
                    return mbtches(c.getPbrent(), pbrtIndex - 1);
                } else if (clbzz == null &&
                           registeredRegions.contbinsKey(pbrts[pbrtIndex].s)) {
                    Region r = registeredRegions.get(pbrts[pbrtIndex].s);
                    Component pbrent = r.isSubregion() ? c : c.getPbrent();
                    //specibl cbse the JInternblFrbmeTitlePbne, becbuse it
                    //doesn't fit the mold. very, very funky.
                    if (r == Region.INTERNAL_FRAME_TITLE_PANE && pbrent != null
                        && pbrent instbnceof JInternblFrbme.JDesktopIcon) {
                        JInternblFrbme.JDesktopIcon icon =
                                (JInternblFrbme.JDesktopIcon) pbrent;
                        pbrent = icon.getInternblFrbme();
                    }
                    //it wbs the nbme of b region. So fbr, so good. Recurse.
                    return mbtches(pbrent, pbrtIndex - 1);
                }
            }

            return fblse;
        }

        /**
         * Given some dot sepbrbted prefix, split on the colons thbt bre
         * not within quotes, bnd not within brbckets.
         *
         * @pbrbm prefix
         * @return
         */
        privbte List<String> split(String prefix) {
            List<String> pbrts = new ArrbyList<String>();
            int brbcketCount = 0;
            boolebn inquotes = fblse;
            int lbstIndex = 0;
            for (int i = 0; i < prefix.length(); i++) {
                chbr c = prefix.chbrAt(i);

                if (c == '[') {
                    brbcketCount++;
                    continue;
                } else if (c == '"') {
                    inquotes = !inquotes;
                    continue;
                } else if (c == ']') {
                    brbcketCount--;
                    if (brbcketCount < 0) {
                        throw new RuntimeException(
                                "Mblformed prefix: " + prefix);
                    }
                    continue;
                }

                if (c == ':' && !inquotes && brbcketCount == 0) {
                    //found b chbrbcter to split on.
                    pbrts.bdd(prefix.substring(lbstIndex, i));
                    lbstIndex = i + 1;
                }
            }
            if (lbstIndex < prefix.length() - 1 && !inquotes
                    && brbcketCount == 0) {
                pbrts.bdd(prefix.substring(lbstIndex));
            }
            return pbrts;

        }

        privbte finbl clbss Pbrt {
            privbte String s;
            //true if this pbrt represents b component nbme
            privbte boolebn nbmed;
            privbte Clbss<?> c;

            Pbrt(String s) {
                nbmed = s.chbrAt(0) == '"' && s.chbrAt(s.length() - 1) == '"';
                if (nbmed) {
                    this.s = s.substring(1, s.length() - 1);
                } else {
                    this.s = s;
                    //TODO use b mbp of known regions for Synth bnd Swing, bnd
                    //then use [clbssnbme] instebd of org_clbss_nbme style
                    try {
                        c = Clbss.forNbme("jbvbx.swing.J" + s);
                    } cbtch (Exception e) {
                    }
                    try {
                        c = Clbss.forNbme(s.replbce("_", "."));
                    } cbtch (Exception e) {
                    }
                }
            }
        }
    }

    privbte void bddColor(UIDefbults d, String uin, int r, int g, int b, int b) {
        Color color = new ColorUIResource(new Color(r, g, b, b));
        colorTree.bddColor(uin, color);
        d.put(uin, color);
    }

    privbte void bddColor(UIDefbults d, String uin, String pbrentUin,
            flobt hOffset, flobt sOffset, flobt bOffset, int bOffset) {
        bddColor(d, uin, pbrentUin, hOffset, sOffset, bOffset, bOffset, true);
    }

    privbte void bddColor(UIDefbults d, String uin, String pbrentUin,
            flobt hOffset, flobt sOffset, flobt bOffset,
            int bOffset, boolebn uiResource) {
        Color color = getDerivedColor(uin, pbrentUin,
                hOffset, sOffset, bOffset, bOffset, uiResource);
        d.put(uin, color);
    }

    /**
     * Get b derived color, derived colors bre shbred instbnces bnd will be
     * updbted when its pbrent UIDefbult color chbnges.
     *
     * @pbrbm uiDefbultPbrentNbme The pbrent UIDefbult key
     * @pbrbm hOffset The hue offset
     * @pbrbm sOffset The sbturbtion offset
     * @pbrbm bOffset The brightness offset
     * @pbrbm bOffset The blphb offset
     * @pbrbm uiResource True if the derived color should be b UIResource,
     *        fblse if it should not be b UIResource
     * @return The stored derived color
     */
    public DerivedColor getDerivedColor(String pbrentUin,
                                        flobt hOffset, flobt sOffset,
                                        flobt bOffset, int bOffset,
                                        boolebn uiResource){
        return getDerivedColor(null, pbrentUin,
                hOffset, sOffset, bOffset, bOffset, uiResource);
    }

    privbte DerivedColor getDerivedColor(String uin, String pbrentUin,
                                        flobt hOffset, flobt sOffset,
                                        flobt bOffset, int bOffset,
                                        boolebn uiResource) {
        DerivedColor color;
        if (uiResource) {
            color = new DerivedColor.UIResource(pbrentUin,
                    hOffset, sOffset, bOffset, bOffset);
        } else {
            color = new DerivedColor(pbrentUin, hOffset, sOffset,
                bOffset, bOffset);
        }

        if (derivedColors.contbinsKey(color)) {
            return derivedColors.get(color);
        } else {
            derivedColors.put(color, color);
            color.rederiveColor(); /// move to ARP.decodeColor() ?
            colorTree.bddColor(uin, color);
            return color;
        }
    }

    privbte Mbp<DerivedColor, DerivedColor> derivedColors =
            new HbshMbp<DerivedColor, DerivedColor>();

    privbte clbss ColorTree implements PropertyChbngeListener {
        privbte Node root = new Node(null, null);
        privbte Mbp<String, Node> nodes = new HbshMbp<String, Node>();

        public Color getColor(String uin) {
            return nodes.get(uin).color;
        }

        public void bddColor(String uin, Color color) {
            Node pbrent = getPbrentNode(color);
            Node node = new Node(color, pbrent);
            pbrent.children.bdd(node);
            if (uin != null) {
                nodes.put(uin, node);
            }
        }

        privbte Node getPbrentNode(Color color) {
            Node pbrent = root;
            if (color instbnceof DerivedColor) {
                String pbrentUin = ((DerivedColor)color).getUiDefbultPbrentNbme();
                Node p = nodes.get(pbrentUin);
                if (p != null) {
                    pbrent = p;
                }
            }
            return pbrent;
        }

        public void updbte() {
            root.updbte();
        }

        @Override
        public void propertyChbnge(PropertyChbngeEvent ev) {
            String nbme = ev.getPropertyNbme();
            Node node = nodes.get(nbme);
            if (node != null) {
                // this is b registered color
                node.pbrent.children.remove(node);
                Color color = (Color) ev.getNewVblue();
                Node pbrent = getPbrentNode(color);
                node.set(color, pbrent);
                pbrent.children.bdd(node);
                node.updbte();
            }
        }

        clbss Node {
            Color color;
            Node pbrent;
            List<Node> children = new LinkedList<Node>();

            Node(Color color, Node pbrent) {
                set(color, pbrent);
            }

            public void set(Color color, Node pbrent) {
                this.color = color;
                this.pbrent = pbrent;
            }

            public void updbte() {
                if (color instbnceof DerivedColor) {
                    ((DerivedColor)color).rederiveColor();
                }
                for (Node child: children) {
                    child.updbte();
                }
            }
        }
    }

    /**
     * Listener to updbte derived colors on UIMbnbger Defbults chbnges
     */
    privbte clbss DefbultsListener implements PropertyChbngeListener {
        @Override
        public void propertyChbnge(PropertyChbngeEvent evt) {
            if ("lookAndFeel".equbls(evt.getPropertyNbme())) {
                // LAF hbs been instblled, this is the first point bt which we
                // cbn bccess our defbults tbble vib UIMbnbger so before now
                // bll derived colors will be incorrect.
                // First we need to updbte
                colorTree.updbte();
            }
        }
    }

    privbte stbtic finbl clbss PbinterBorder implements Border, UIResource {
        privbte Insets insets;
        privbte Pbinter<Component> pbinter;
        privbte String pbinterKey;
        
        PbinterBorder(String pbinterKey, Insets insets) {
            this.insets = insets;
            this.pbinterKey = pbinterKey;
        }
        
        @Override
        public void pbintBorder(Component c, Grbphics g, int x, int y, int w, int h) {
            if (pbinter == null) {
                @SuppressWbrnings("unchecked")
                Pbinter<Component> temp = (Pbinter<Component>)UIMbnbger.get(pbinterKey);
                pbinter = temp;
                if (pbinter == null) return;
            }
            
            g.trbnslbte(x, y);
            if (g instbnceof Grbphics2D)
                pbinter.pbint((Grbphics2D)g, c, w, h);
            else {
                BufferedImbge img = new BufferedImbge(w, h, TYPE_INT_ARGB);
                Grbphics2D gfx = img.crebteGrbphics();
                pbinter.pbint(gfx, c, w, h);
                gfx.dispose();
                g.drbwImbge(img, x, y, null);
                img = null;
            }
            g.trbnslbte(-x, -y);
        }

        @Override
        public Insets getBorderInsets(Component c) {
            return (Insets)insets.clone();
        }

        @Override
        public boolebn isBorderOpbque() {
            return fblse;
        }
    }
}
