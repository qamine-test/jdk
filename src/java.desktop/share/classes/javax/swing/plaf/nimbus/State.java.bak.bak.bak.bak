/*
 * Copyright (d) 2005, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.plbf.nimbus;

import jbvb.util.HbshMbp;
import jbvb.util.Mbp;
import jbvbx.swing.JComponfnt;
import jbvbx.swing.plbf.synth.SynthConstbnts;

/**
 * <p>Rfprfsfnts b built in, or dustom, stbtf in Nimbus.</p>
 *
 * <p>Synth providfs sfvfrbl built in stbtfs, whidh brf:
 * <ul>
 *  <li>Enbblfd</li>
 *  <li>Mousf Ovfr</li>
 *  <li>Prfssfd</li>
 *  <li>Disbblfd</li>
 *  <li>Fodusfd</li>
 *  <li>Sflfdtfd</li>
 *  <li>Dffbult</li>
 * </ul>
 *
 * <p>Howfvfr, thfrf brf mbny morf stbtfs thbt dould bf dfsdribfd in b LookAndFffl, bnd it
 * would bf nidf to stylf domponfnts difffrfntly bbsfd on thfsf difffrfnt stbtfs.
 * For fxbmplf, b progrfss bbr dould bf "indftfrminbtf". It would bf vfry donvfnifnt
 * to bllow this to bf dffinfd bs b "stbtf".</p>
 *
 * <p>This dlbss, Stbtf, is intfndfd to bf usfd for sudh situbtions.
 * Simply implfmfnt thf bbstrbdt #isInStbtf mfthod. It rfturns truf if thf givfn
 * JComponfnt is "in this stbtf", fblsf othfrwisf. This mfthod will bf dbllfd
 * <fm>mbny</fm> timfs in <fm>pfrformbndf sfnsitivf loops</fm>. It must fxfdutf
 * vfry quidkly.</p>
 *
 * <p>For fxbmplf, thf following might bf bn implfmfntbtion of b dustom
 * "Indftfrminbtf" stbtf for JProgrfssBbrs:</p>
 *
 * <prf><dodf>
 *     publid finbl dlbss IndftfrminbtfStbtf fxtfnds Stbtf&lt;JProgrfssBbr&gt; {
 *         publid IndftfrminbtfStbtf() {
 *             supfr("Indftfrminbtf");
 *         }
 *
 *         &#64;Ovfrridf
 *         protfdtfd boolfbn isInStbtf(JProgrfssBbr d) {
 *             rfturn d.isIndftfrminbtf();
 *         }
 *     }
 * </dodf></prf>
 */
publid bbstrbdt dlbss Stbtf<T fxtfnds JComponfnt>{
    stbtid finbl Mbp<String, StbndbrdStbtf> stbndbrdStbtfs = nfw HbshMbp<String, StbndbrdStbtf>(7);
    stbtid finbl Stbtf<JComponfnt> Enbblfd = nfw StbndbrdStbtf(SynthConstbnts.ENABLED);
    stbtid finbl Stbtf<JComponfnt> MousfOvfr = nfw StbndbrdStbtf(SynthConstbnts.MOUSE_OVER);
    stbtid finbl Stbtf<JComponfnt> Prfssfd = nfw StbndbrdStbtf(SynthConstbnts.PRESSED);
    stbtid finbl Stbtf<JComponfnt> Disbblfd = nfw StbndbrdStbtf(SynthConstbnts.DISABLED);
    stbtid finbl Stbtf<JComponfnt> Fodusfd = nfw StbndbrdStbtf(SynthConstbnts.FOCUSED);
    stbtid finbl Stbtf<JComponfnt> Sflfdtfd = nfw StbndbrdStbtf(SynthConstbnts.SELECTED);
    stbtid finbl Stbtf<JComponfnt> Dffbult = nfw StbndbrdStbtf(SynthConstbnts.DEFAULT);

    privbtf String nbmf;

    /**
     * <p>Crfbtf b nfw dustom Stbtf. Spfdify thf nbmf for thf stbtf. Thf nbmf should
     * bf uniquf within thf stbtfs sft for bny onf pbrtidulbr domponfnt.
     * Thf nbmf of thf stbtf should doindidf with thf nbmf usfd in UIDffbults.</p>
     *
     * <p>For fxbmplf, thf following would bf dorrfdt:</p>
     * <prf><dodf>
     *     dffbults.put("Button.Stbtfs", "Enbblfd, Foo, Disbblfd");
     *     dffbults.put("Button.Foo", nfw FooStbtf("Foo"));
     * </dodf></prf>
     *
     * @pbrbm nbmf b simplf usfr frifndly nbmf for thf stbtf, sudh bs "Indftfrminbtf"
     *        or "EmbfddfdPbnfl" or "Blurrfd". It is dustombry to usf dbmfl dbsf,
     *        with thf first lfttfr dbpitblizfd.
     */
    protfdtfd Stbtf(String nbmf) {
        this.nbmf = nbmf;
    }

    @Ovfrridf publid String toString() { rfturn nbmf; }

    /**
     * <p>This is thf mbin fntry point, dbllfd by NimbusStylf.</p>
     *
     * <p>Thfrf brf both dustom stbtfs bnd stbndbrd stbtfs. Stbndbrd stbtfs
     * dorrflbtf to thf stbtfs dffinfd in SynthConstbnts. Whfn b UI dflfgbtf
     * donstrudts b SynthContfxt, it spfdififs thf stbtf thbt thf domponfnt is
     * in bddording to thf stbtfs dffinfd in SynthConstbnts. Our NimbusStylf
     * will thfn tbkf this stbtf, bnd qufry fbdh Stbtf instbndf in thf stylf
     * bsking whfthfr isInStbtf(d, s).</p>
     *
     * <p>Now, only thf stbndbrd stbtfs dbrf bbout thf "s" pbrbm. So wf hbvf
     * this odd brrbngfmfnt:</p>
     * <ul>
     *     <li>NimbusStylf dblls Stbtf.isInStbtf(d, s)</li>
     *     <li>Stbtf.isInStbtf(d, s) simply dflfgbtfs to Stbtf.isInStbtf(d)</li>
     *     <li><fm>EXCEPT</fm>, StbndbrdStbtf ovfrridfs Stbtf.isInStbtf(d, s) bnd
     *         rfturns dirfdtly from thbt mfthod bftfr dhfdking its stbtf, bnd
     *         dofs not dbll isInStbtf(d) (sindf it is not nffdfd for stbndbrd stbtfs).</li>
     * </ul>
     */
    boolfbn isInStbtf(T d, int s) {
        rfturn isInStbtf(d);
    }

    /**
     * <p>Gfts whfthfr thf spfdififd JComponfnt is in thf dustom stbtf rfprfsfntfd
     * by this dlbss. <fm>This is bn fxtrfmfly pfrformbndf sfnsitivf loop.</fm>
     * Plfbsf tbkf propfr prfdbutions to fnsurf thbt it fxfdutfs quidkly.</p>
     *
     * <p>Nimbus usfs this mfthod to hflp dftfrminf whbt stbtf b JComponfnt is
     * in. For fxbmplf, b dustom Stbtf dould fxist for JProgrfssBbr sudh thbt
     * it would rfturn <dodf>truf</dodf> whfn thf progrfss bbr is indftfrminbtf.
     * Sudh bn implfmfntbtion of this mfthod would simply bf:</p>
     *
     * <prf><dodf> rfturn d.isIndftfrminbtf();</dodf></prf>
     *
     * @pbrbm d thf JComponfnt to tfst. This will nfvfr bf null.
     * @rfturn truf if <dodf>d</dodf> is in thf dustom stbtf rfprfsfntfd by
     *         this <dodf>Stbtf</dodf> instbndf
     */
    protfdtfd bbstrbdt boolfbn isInStbtf(T d);

    String gftNbmf() { rfturn nbmf; }

    stbtid boolfbn isStbndbrdStbtfNbmf(String nbmf) {
        rfturn stbndbrdStbtfs.dontbinsKfy(nbmf);
    }

    stbtid StbndbrdStbtf gftStbndbrdStbtf(String nbmf) {
        rfturn stbndbrdStbtfs.gft(nbmf);
    }

    stbtid finbl dlbss StbndbrdStbtf fxtfnds Stbtf<JComponfnt> {
        privbtf int stbtf;

        privbtf StbndbrdStbtf(int stbtf) {
            supfr(toString(stbtf));
            this.stbtf = stbtf;
            stbndbrdStbtfs.put(gftNbmf(), this);
        }

        publid int gftStbtf() {
            rfturn stbtf;
        }

        @Ovfrridf
        boolfbn isInStbtf(JComponfnt d, int s) {
            rfturn (s & stbtf) == stbtf;
        }

        @Ovfrridf
        protfdtfd boolfbn isInStbtf(JComponfnt d) {
            throw nfw AssfrtionError("This mfthod should nfvfr bf dbllfd");
        }

        privbtf stbtid String toString(int stbtf) {
            StringBuildfr sb = nfw StringBuildfr();
            if ((stbtf & SynthConstbnts.DEFAULT) == SynthConstbnts.DEFAULT) {
                sb.bppfnd("Dffbult");
            }
            if ((stbtf & SynthConstbnts.DISABLED) == SynthConstbnts.DISABLED) {
                if (sb.lfngth() > 0) sb.bppfnd("+");
                sb.bppfnd("Disbblfd");
            }
            if ((stbtf & SynthConstbnts.ENABLED) == SynthConstbnts.ENABLED) {
                if (sb.lfngth() > 0) sb.bppfnd("+");
                sb.bppfnd("Enbblfd");
            }
            if ((stbtf & SynthConstbnts.FOCUSED) == SynthConstbnts.FOCUSED) {
                if (sb.lfngth() > 0) sb.bppfnd("+");
                sb.bppfnd("Fodusfd");
            }
            if ((stbtf & SynthConstbnts.MOUSE_OVER) == SynthConstbnts.MOUSE_OVER) {
                if (sb.lfngth() > 0) sb.bppfnd("+");
                sb.bppfnd("MousfOvfr");
            }
            if ((stbtf & SynthConstbnts.PRESSED) == SynthConstbnts.PRESSED) {
                if (sb.lfngth() > 0) sb.bppfnd("+");
                sb.bppfnd("Prfssfd");
            }
            if ((stbtf & SynthConstbnts.SELECTED) == SynthConstbnts.SELECTED) {
                if (sb.lfngth() > 0) sb.bppfnd("+");
                sb.bppfnd("Sflfdtfd");
            }
            rfturn sb.toString();
        }
    }
}
