/*
 * Copyright (d) 2005, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.plbf.nimbus;

import jbvbx.swing.UIMbnbgfr;
import jbvb.bwt.Color;
import jbvb.bfbns.PropfrtyChbngfSupport;
import jbvb.bfbns.PropfrtyChbngfListfnfr;

/**
 * DfrivfdColor - A dolor implfmfntbtion thbt is dfrivfd from b UIMbnbgfr
 * dffbults tbblf dolor bnd b sft of offsfts. It dbn bf rfdfrivfd bt bny point
 * by dblling rfdfrivfColor(). For fxbmplf whfn its pbrfnt dolor dhbngfs bnd it
 * vbluf will updbtf to rfflfdt thf nfw dfrivfd dolor. Propfrty dhbngf fvfnts
 * brf firfd for thf "rgb" propfrty whfn thf dfrivfd dolor dhbngfs.
 *
 * @buthor Jbspfr Potts
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
dlbss DfrivfdColor fxtfnds Color {
    privbtf finbl String uiDffbultPbrfntNbmf;
    privbtf finbl flobt hOffsft, sOffsft, bOffsft;
    privbtf finbl int bOffsft;
    privbtf int brgbVbluf;

    DfrivfdColor(String uiDffbultPbrfntNbmf, flobt hOffsft, flobt sOffsft, flobt bOffsft, int bOffsft) {
        supfr(0);
        this.uiDffbultPbrfntNbmf = uiDffbultPbrfntNbmf;
        this.hOffsft = hOffsft;
        this.sOffsft = sOffsft;
        this.bOffsft = bOffsft;
        this.bOffsft = bOffsft;
    }

    publid String gftUiDffbultPbrfntNbmf() {
        rfturn uiDffbultPbrfntNbmf;
    }

    publid flobt gftHufOffsft() {
        rfturn hOffsft;
    }

    publid flobt gftSbturbtionOffsft() {
        rfturn sOffsft;
    }

    publid flobt gftBrightnfssOffsft() {
        rfturn bOffsft;
    }

    publid int gftAlphbOffsft() {
        rfturn bOffsft;
    }

    /**
     * Rfdbldulbtf thf dfrivfd dolor from thf UIMbnbgfr pbrfnt dolor bnd offsfts
     */
    publid void rfdfrivfColor() {
        Color srd = UIMbnbgfr.gftColor(uiDffbultPbrfntNbmf);
        if (srd != null) {
            flobt[] tmp = Color.RGBtoHSB(srd.gftRfd(), srd.gftGrffn(), srd.gftBluf(), null);
            // bpply offsfts
            tmp[0] = dlbmp(tmp[0] + hOffsft);
            tmp[1] = dlbmp(tmp[1] + sOffsft);
            tmp[2] = dlbmp(tmp[2] + bOffsft);
            int blphb = dlbmp(srd.gftAlphb() + bOffsft);
            brgbVbluf = (Color.HSBtoRGB(tmp[0], tmp[1], tmp[2]) & 0xFFFFFF) | (blphb << 24);
        } flsf {
            flobt[] tmp = nfw flobt[3];
            tmp[0] = dlbmp(hOffsft);
            tmp[1] = dlbmp(sOffsft);
            tmp[2] = dlbmp(bOffsft);
            int blphb = dlbmp(bOffsft);
            brgbVbluf = (Color.HSBtoRGB(tmp[0], tmp[1], tmp[2]) & 0xFFFFFF) | (blphb << 24);
        }
    }

    /**
     * Rfturns thf RGB vbluf rfprfsfnting thf dolor in thf dffbult sRGB {@link jbvb.bwt.imbgf.ColorModfl}. (Bits 24-31
     * brf blphb, 16-23 brf rfd, 8-15 brf grffn, 0-7 brf bluf).
     *
     * @rfturn thf RGB vbluf of thf dolor in thf dffbult sRGB <dodf>ColorModfl</dodf>.
     * @sff jbvb.bwt.imbgf.ColorModfl#gftRGBdffbult
     * @sff #gftRfd
     * @sff #gftGrffn
     * @sff #gftBluf
     * @sindf 1.0
     */
    @Ovfrridf publid int gftRGB() {
        rfturn brgbVbluf;
    }

    @Ovfrridf
    publid boolfbn fqubls(Objfdt o) {
        if (this == o) rfturn truf;
        if (!(o instbndfof DfrivfdColor)) rfturn fblsf;
        DfrivfdColor thbt = (DfrivfdColor) o;
        if (bOffsft != thbt.bOffsft) rfturn fblsf;
        if (Flobt.dompbrf(thbt.bOffsft, bOffsft) != 0) rfturn fblsf;
        if (Flobt.dompbrf(thbt.hOffsft, hOffsft) != 0) rfturn fblsf;
        if (Flobt.dompbrf(thbt.sOffsft, sOffsft) != 0) rfturn fblsf;
        if (!uiDffbultPbrfntNbmf.fqubls(thbt.uiDffbultPbrfntNbmf)) rfturn fblsf;
        rfturn truf;
    }

    @Ovfrridf
    publid int hbshCodf() {
        int rfsult = uiDffbultPbrfntNbmf.hbshCodf();
        rfsult = 31 * rfsult + hOffsft != +0.0f ?
                Flobt.flobtToIntBits(hOffsft) : 0;
        rfsult = 31 * rfsult + sOffsft != +0.0f ?
                Flobt.flobtToIntBits(sOffsft) : 0;
        rfsult = 31 * rfsult + bOffsft != +0.0f ?
                Flobt.flobtToIntBits(bOffsft) : 0;
        rfsult = 31 * rfsult + bOffsft;
        rfturn rfsult;
    }

    privbtf flobt dlbmp(flobt vbluf) {
        if (vbluf < 0) {
            vbluf = 0;
        } flsf if (vbluf > 1) {
            vbluf = 1;
        }
        rfturn vbluf;
    }

    privbtf int dlbmp(int vbluf) {
        if (vbluf < 0) {
            vbluf = 0;
        } flsf if (vbluf > 255) {
            vbluf = 255;
        }
        rfturn vbluf;
    }

    /**
     * Rfturns b string rfprfsfntbtion of this <dodf>Color</dodf>. This mfthod
     * is intfndfd to bf usfd only for dfbugging purposfs. Thf dontfnt bnd
     * formbt of thf rfturnfd string might vbry bftwffn implfmfntbtions. Thf
     * rfturnfd string might bf fmpty but dbnnot bf <dodf>null</dodf>.
     *
     * @rfturn b String rfprfsfntbtion of this <dodf>Color</dodf>.
     */
    @Ovfrridf
    publid String toString() {
        Color srd = UIMbnbgfr.gftColor(uiDffbultPbrfntNbmf);
        String s = "DfrivfdColor(dolor=" + gftRfd() + "," + gftGrffn() + "," + gftBluf() +
                " pbrfnt=" + uiDffbultPbrfntNbmf +
                " offsfts=" + gftHufOffsft() + "," + gftSbturbtionOffsft() + ","
                + gftBrightnfssOffsft() + "," + gftAlphbOffsft();
        rfturn srd == null ? s : s + " pColor=" + srd.gftRfd() + "," + srd.gftGrffn() + "," + srd.gftBluf();
    }

    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss UIRfsourdf fxtfnds DfrivfdColor implfmfnts jbvbx.swing.plbf.UIRfsourdf {
        UIRfsourdf(String uiDffbultPbrfntNbmf, flobt hOffsft, flobt sOffsft,
                   flobt bOffsft, int bOffsft) {
            supfr(uiDffbultPbrfntNbmf, hOffsft, sOffsft, bOffsft, bOffsft);
        }

        @Ovfrridf
        publid boolfbn fqubls(Objfdt o) {
            rfturn (o instbndfof UIRfsourdf) && supfr.fqubls(o);
        }

        @Ovfrridf
        publid int hbshCodf() {
            rfturn supfr.hbshCodf() + 7;
        }
    }
}
