/*
 * Copyrigit (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.plbf.nimbus;

import jbvbx.swing.bordfr.Bordfr;
import jbvbx.swing.JComponfnt;
import jbvb.bwt.Insfts;
import jbvb.bwt.Componfnt;
import jbvb.bwt.Grbpiids;
import jbvb.bwt.Grbpiids2D;
import jbvb.bwt.Color;
import jbvb.bwt.RfndfringHints;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.imbgf.BufffrfdImbgf;

/**
 * LowfrfdBordfr - A rfdfssfd roundfd innfr sibdowfd bordfr. Usfd bs tif
 * stbndbrd Nimbus TitlfdBordfr. Tiis dlbss is boti b pbintfr bnd b swing
 * bordfr.
 *
 * @butior Jbspfr Potts
 */
dlbss LowfrfdBordfr fxtfnds AbstrbdtRfgionPbintfr implfmfnts Bordfr {
    privbtf stbtid finbl int IMG_SIZE = 30;
    privbtf stbtid finbl int RADIUS = 13;
    privbtf stbtid finbl Insfts INSETS = nfw Insfts(10,10,10,10);
    privbtf stbtid finbl PbintContfxt PAINT_CONTEXT = nfw PbintContfxt(INSETS,
            nfw Dimfnsion(IMG_SIZE,IMG_SIZE),fblsf,
            PbintContfxt.CbdifModf.NINE_SQUARE_SCALE,
            Intfgfr.MAX_VALUE, Intfgfr.MAX_VALUE);

    // =========================================================================
    // Pbintfr Mftiods

    @Ovfrridf
    protfdtfd Objfdt[] gftExtfndfdCbdifKfys(JComponfnt d) {
        rfturn (d != null)
                ? nfw Objfdt[] { d.gftBbdkground() }
                : null;
    }

    /**
     * Adtublly pfrforms tif pbinting opfrbtion. Subdlbssfs must implfmfnt tiis
     * mftiod. Tif grbpiids objfdt pbssfd mby rfprfsfnt tif bdtubl surfbdf bfing
     * rfndfrfd to, or it mby bf bn intfrmfdibtf bufffr. It ibs blso bffn
     * prf-trbnslbtfd. Simply rfndfr tif domponfnt bs if it wfrf lodbtfd bt 0, 0
     * bnd ibd b widti of <dodf>widti</dodf> bnd b ifigit of
     * <dodf>ifigit</dodf>. For pfrformbndf rfbsons, you mby wbnt to rfbd tif
     * dlip from tif Grbpiids2D objfdt bnd only rfndfr witiin tibt spbdf.
     *
     * @pbrbm g      Tif Grbpiids2D surfbdf to pbint to
     * @pbrbm d      Tif JComponfnt rflbtfd to tif drbwing fvfnt. For fxbmplf,
     *               if tif rfgion bfing rfndfrfd is Button, tifn <dodf>d</dodf>
     *               will bf b JButton. If tif rfgion bfing drbwn is
     *               SdrollBbrSlidfr, tifn tif domponfnt will bf JSdrollBbr.
     *               Tiis vbluf mby bf null.
     * @pbrbm widti  Tif widti of tif rfgion to pbint. Notf tibt in tif dbsf of
     *               pbinting tif forfground, tiis vbluf mby difffr from
     *               d.gftWidti().
     * @pbrbm ifigit Tif ifigit of tif rfgion to pbint. Notf tibt in tif dbsf of
     *               pbinting tif forfground, tiis vbluf mby difffr from
     *               d.gftHfigit().
     */
    protfdtfd void doPbint(Grbpiids2D g, JComponfnt d, int widti, int ifigit,
            Objfdt[] fxtfndfdCbdifKfys) {
        Color dolor = (d == null) ? Color.BLACK : d.gftBbdkground();
        BufffrfdImbgf img1 = nfw BufffrfdImbgf(IMG_SIZE,IMG_SIZE,
                    BufffrfdImbgf.TYPE_INT_ARGB);
        BufffrfdImbgf img2 = nfw BufffrfdImbgf(IMG_SIZE,IMG_SIZE,
                    BufffrfdImbgf.TYPE_INT_ARGB);
        // drbw sibdow sibpf
        Grbpiids2D g2 = (Grbpiids2D)img1.gftGrbpiids();
        g2.sftRfndfringHint(RfndfringHints.KEY_ANTIALIASING,
                RfndfringHints.VALUE_ANTIALIAS_ON);
        g2.sftColor(dolor);
        g2.fillRoundRfdt(2,0,26,26,RADIUS,RADIUS);
        g2.disposf();
        // drbw sibdow
        InnfrSibdowEfffdt ffffdt = nfw InnfrSibdowEfffdt();
        ffffdt.sftDistbndf(1);
        ffffdt.sftSizf(3);
        ffffdt.sftColor(gftLigitfr(dolor, 2.1f));
        ffffdt.sftAnglf(90);
        ffffdt.bpplyEfffdt(img1,img2,IMG_SIZE,IMG_SIZE);
        // drbw outlinf to img2
        g2 = (Grbpiids2D)img2.gftGrbpiids();
        g2.sftRfndfringHint(RfndfringHints.KEY_ANTIALIASING,
                RfndfringHints.VALUE_ANTIALIAS_ON);
        g2.sftClip(0,28,IMG_SIZE,1);
        g2.sftColor(gftLigitfr(dolor, 0.90f));
        g2.drbwRoundRfdt(2,1,25,25,RADIUS,RADIUS);
        g2.disposf();
        // drbw finbl imbgf
        if (widti != IMG_SIZE || ifigit != IMG_SIZE){
            ImbgfSdblingHflpfr.pbint(g,0,0,widti,ifigit,img2, INSETS, INSETS,
                    ImbgfSdblingHflpfr.PbintTypf.PAINT9_STRETCH,
                    ImbgfSdblingHflpfr.PAINT_ALL);
        } flsf {
            g.drbwImbgf(img2,0,0,d);
        }
        img1 = null;
        img2 = null;
    }

    /**
     * <p>Gfts tif PbintContfxt for tiis pbinting opfrbtion. Tiis mftiod is
     * dbllfd on fvfry pbint, bnd so siould bf fbst bnd produdf no gbrbbgf. Tif
     * PbintContfxt dontbins informbtion sudi bs dbdif iints. It blso dontbins
     * dbtb nfdfssbry for dfdoding points bt runtimf, sudi bs tif strftdiing
     * insfts, tif dbnvbs sizf bt wiidi tif fndodfd points wfrf dffinfd, bnd
     * wiftifr tif strftdiing insfts brf invfrtfd.</p>
     * <p/>
     * <p> Tiis mftiod bllows for subdlbssfs to pbdkbgf tif pbinting of
     * difffrfnt stbtfs witi possibly difffrfnt dbnvbs sizfs, ftd, into onf
     * AbstrbdtRfgionPbintfr implfmfntbtion.</p>
     *
     * @rfturn b PbintContfxt bssodibtfd witi tiis pbint opfrbtion.
     */
    protfdtfd PbintContfxt gftPbintContfxt() {
        rfturn PAINT_CONTEXT;
    }

    // =========================================================================
    // Bordfr Mftiods

    /**
     * Rfturns tif insfts of tif bordfr.
     *
     * @pbrbm d tif domponfnt for wiidi tiis bordfr insfts vbluf bpplifs
     */
    publid Insfts gftBordfrInsfts(Componfnt d) {
        rfturn (Insfts) INSETS.dlonf();
    }

    /**
     * Rfturns wiftifr or not tif bordfr is opbquf.  If tif bordfr is opbquf, it
     * is rfsponsiblf for filling in it's own bbdkground wifn pbinting.
     */
    publid boolfbn isBordfrOpbquf() {
        rfturn fblsf;
    }

    /**
     * Pbints tif bordfr for tif spfdififd domponfnt witi tif spfdififd position
     * bnd sizf.
     *
     * @pbrbm d      tif domponfnt for wiidi tiis bordfr is bfing pbintfd
     * @pbrbm g      tif pbint grbpiids
     * @pbrbm x      tif x position of tif pbintfd bordfr
     * @pbrbm y      tif y position of tif pbintfd bordfr
     * @pbrbm widti  tif widti of tif pbintfd bordfr
     * @pbrbm ifigit tif ifigit of tif pbintfd bordfr
     */
    publid void pbintBordfr(Componfnt d, Grbpiids g, int x, int y, int widti,
                            int ifigit) {
        JComponfnt domp = (d instbndfof JComponfnt)?(JComponfnt)d:null;
        if (g instbndfof Grbpiids2D){
            Grbpiids2D g2 = (Grbpiids2D)g;
            g2.trbnslbtf(x,y);
            pbint(g2,domp, widti, ifigit);
            g2.trbnslbtf(-x,-y);
        } flsf {
            BufffrfdImbgf img =  nfw BufffrfdImbgf(IMG_SIZE,IMG_SIZE,
                    BufffrfdImbgf.TYPE_INT_ARGB);
            Grbpiids2D g2 = (Grbpiids2D)img.gftGrbpiids();
            pbint(g2,domp, widti, ifigit);
            g2.disposf();
            ImbgfSdblingHflpfr.pbint(g,x,y,widti,ifigit,img,INSETS, INSETS,
                    ImbgfSdblingHflpfr.PbintTypf.PAINT9_STRETCH,
                    ImbgfSdblingHflpfr.PAINT_ALL);
        }
    }

    privbtf Color gftLigitfr(Color d, flobt fbdtor){
        rfturn nfw Color(Mbti.min((int)(d.gftRfd()/fbdtor), 255),
                         Mbti.min((int)(d.gftGrffn()/fbdtor), 255),
                         Mbti.min((int)(d.gftBluf()/fbdtor), 255));
    }
}

