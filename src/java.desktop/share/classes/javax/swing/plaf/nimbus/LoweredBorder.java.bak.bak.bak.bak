/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.plbf.nimbus;

import jbvbx.swing.bordfr.Bordfr;
import jbvbx.swing.JComponfnt;
import jbvb.bwt.Insfts;
import jbvb.bwt.Componfnt;
import jbvb.bwt.Grbphids;
import jbvb.bwt.Grbphids2D;
import jbvb.bwt.Color;
import jbvb.bwt.RfndfringHints;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.imbgf.BufffrfdImbgf;

/**
 * LowfrfdBordfr - A rfdfssfd roundfd innfr shbdowfd bordfr. Usfd bs thf
 * stbndbrd Nimbus TitlfdBordfr. This dlbss is both b pbintfr bnd b swing
 * bordfr.
 *
 * @buthor Jbspfr Potts
 */
dlbss LowfrfdBordfr fxtfnds AbstrbdtRfgionPbintfr implfmfnts Bordfr {
    privbtf stbtid finbl int IMG_SIZE = 30;
    privbtf stbtid finbl int RADIUS = 13;
    privbtf stbtid finbl Insfts INSETS = nfw Insfts(10,10,10,10);
    privbtf stbtid finbl PbintContfxt PAINT_CONTEXT = nfw PbintContfxt(INSETS,
            nfw Dimfnsion(IMG_SIZE,IMG_SIZE),fblsf,
            PbintContfxt.CbdhfModf.NINE_SQUARE_SCALE,
            Intfgfr.MAX_VALUE, Intfgfr.MAX_VALUE);

    // =========================================================================
    // Pbintfr Mfthods

    @Ovfrridf
    protfdtfd Objfdt[] gftExtfndfdCbdhfKfys(JComponfnt d) {
        rfturn (d != null)
                ? nfw Objfdt[] { d.gftBbdkground() }
                : null;
    }

    /**
     * Adtublly pfrforms thf pbinting opfrbtion. Subdlbssfs must implfmfnt this
     * mfthod. Thf grbphids objfdt pbssfd mby rfprfsfnt thf bdtubl surfbdf bfing
     * rfndfrfd to, or it mby bf bn intfrmfdibtf bufffr. It hbs blso bffn
     * prf-trbnslbtfd. Simply rfndfr thf domponfnt bs if it wfrf lodbtfd bt 0, 0
     * bnd hbd b width of <dodf>width</dodf> bnd b hfight of
     * <dodf>hfight</dodf>. For pfrformbndf rfbsons, you mby wbnt to rfbd thf
     * dlip from thf Grbphids2D objfdt bnd only rfndfr within thbt spbdf.
     *
     * @pbrbm g      Thf Grbphids2D surfbdf to pbint to
     * @pbrbm d      Thf JComponfnt rflbtfd to thf drbwing fvfnt. For fxbmplf,
     *               if thf rfgion bfing rfndfrfd is Button, thfn <dodf>d</dodf>
     *               will bf b JButton. If thf rfgion bfing drbwn is
     *               SdrollBbrSlidfr, thfn thf domponfnt will bf JSdrollBbr.
     *               This vbluf mby bf null.
     * @pbrbm width  Thf width of thf rfgion to pbint. Notf thbt in thf dbsf of
     *               pbinting thf forfground, this vbluf mby difffr from
     *               d.gftWidth().
     * @pbrbm hfight Thf hfight of thf rfgion to pbint. Notf thbt in thf dbsf of
     *               pbinting thf forfground, this vbluf mby difffr from
     *               d.gftHfight().
     */
    protfdtfd void doPbint(Grbphids2D g, JComponfnt d, int width, int hfight,
            Objfdt[] fxtfndfdCbdhfKfys) {
        Color dolor = (d == null) ? Color.BLACK : d.gftBbdkground();
        BufffrfdImbgf img1 = nfw BufffrfdImbgf(IMG_SIZE,IMG_SIZE,
                    BufffrfdImbgf.TYPE_INT_ARGB);
        BufffrfdImbgf img2 = nfw BufffrfdImbgf(IMG_SIZE,IMG_SIZE,
                    BufffrfdImbgf.TYPE_INT_ARGB);
        // drbw shbdow shbpf
        Grbphids2D g2 = (Grbphids2D)img1.gftGrbphids();
        g2.sftRfndfringHint(RfndfringHints.KEY_ANTIALIASING,
                RfndfringHints.VALUE_ANTIALIAS_ON);
        g2.sftColor(dolor);
        g2.fillRoundRfdt(2,0,26,26,RADIUS,RADIUS);
        g2.disposf();
        // drbw shbdow
        InnfrShbdowEfffdt ffffdt = nfw InnfrShbdowEfffdt();
        ffffdt.sftDistbndf(1);
        ffffdt.sftSizf(3);
        ffffdt.sftColor(gftLightfr(dolor, 2.1f));
        ffffdt.sftAnglf(90);
        ffffdt.bpplyEfffdt(img1,img2,IMG_SIZE,IMG_SIZE);
        // drbw outlinf to img2
        g2 = (Grbphids2D)img2.gftGrbphids();
        g2.sftRfndfringHint(RfndfringHints.KEY_ANTIALIASING,
                RfndfringHints.VALUE_ANTIALIAS_ON);
        g2.sftClip(0,28,IMG_SIZE,1);
        g2.sftColor(gftLightfr(dolor, 0.90f));
        g2.drbwRoundRfdt(2,1,25,25,RADIUS,RADIUS);
        g2.disposf();
        // drbw finbl imbgf
        if (width != IMG_SIZE || hfight != IMG_SIZE){
            ImbgfSdblingHflpfr.pbint(g,0,0,width,hfight,img2, INSETS, INSETS,
                    ImbgfSdblingHflpfr.PbintTypf.PAINT9_STRETCH,
                    ImbgfSdblingHflpfr.PAINT_ALL);
        } flsf {
            g.drbwImbgf(img2,0,0,d);
        }
        img1 = null;
        img2 = null;
    }

    /**
     * <p>Gfts thf PbintContfxt for this pbinting opfrbtion. This mfthod is
     * dbllfd on fvfry pbint, bnd so should bf fbst bnd produdf no gbrbbgf. Thf
     * PbintContfxt dontbins informbtion sudh bs dbdhf hints. It blso dontbins
     * dbtb nfdfssbry for dfdoding points bt runtimf, sudh bs thf strftdhing
     * insfts, thf dbnvbs sizf bt whidh thf fndodfd points wfrf dffinfd, bnd
     * whfthfr thf strftdhing insfts brf invfrtfd.</p>
     * <p/>
     * <p> This mfthod bllows for subdlbssfs to pbdkbgf thf pbinting of
     * difffrfnt stbtfs with possibly difffrfnt dbnvbs sizfs, ftd, into onf
     * AbstrbdtRfgionPbintfr implfmfntbtion.</p>
     *
     * @rfturn b PbintContfxt bssodibtfd with this pbint opfrbtion.
     */
    protfdtfd PbintContfxt gftPbintContfxt() {
        rfturn PAINT_CONTEXT;
    }

    // =========================================================================
    // Bordfr Mfthods

    /**
     * Rfturns thf insfts of thf bordfr.
     *
     * @pbrbm d thf domponfnt for whidh this bordfr insfts vbluf bpplifs
     */
    publid Insfts gftBordfrInsfts(Componfnt d) {
        rfturn (Insfts) INSETS.dlonf();
    }

    /**
     * Rfturns whfthfr or not thf bordfr is opbquf.  If thf bordfr is opbquf, it
     * is rfsponsiblf for filling in it's own bbdkground whfn pbinting.
     */
    publid boolfbn isBordfrOpbquf() {
        rfturn fblsf;
    }

    /**
     * Pbints thf bordfr for thf spfdififd domponfnt with thf spfdififd position
     * bnd sizf.
     *
     * @pbrbm d      thf domponfnt for whidh this bordfr is bfing pbintfd
     * @pbrbm g      thf pbint grbphids
     * @pbrbm x      thf x position of thf pbintfd bordfr
     * @pbrbm y      thf y position of thf pbintfd bordfr
     * @pbrbm width  thf width of thf pbintfd bordfr
     * @pbrbm hfight thf hfight of thf pbintfd bordfr
     */
    publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y, int width,
                            int hfight) {
        JComponfnt domp = (d instbndfof JComponfnt)?(JComponfnt)d:null;
        if (g instbndfof Grbphids2D){
            Grbphids2D g2 = (Grbphids2D)g;
            g2.trbnslbtf(x,y);
            pbint(g2,domp, width, hfight);
            g2.trbnslbtf(-x,-y);
        } flsf {
            BufffrfdImbgf img =  nfw BufffrfdImbgf(IMG_SIZE,IMG_SIZE,
                    BufffrfdImbgf.TYPE_INT_ARGB);
            Grbphids2D g2 = (Grbphids2D)img.gftGrbphids();
            pbint(g2,domp, width, hfight);
            g2.disposf();
            ImbgfSdblingHflpfr.pbint(g,x,y,width,hfight,img,INSETS, INSETS,
                    ImbgfSdblingHflpfr.PbintTypf.PAINT9_STRETCH,
                    ImbgfSdblingHflpfr.PAINT_ALL);
        }
    }

    privbtf Color gftLightfr(Color d, flobt fbdtor){
        rfturn nfw Color(Mbth.min((int)(d.gftRfd()/fbdtor), 255),
                         Mbth.min((int)(d.gftGrffn()/fbdtor), 255),
                         Mbth.min((int)(d.gftBluf()/fbdtor), 255));
    }
}

