/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.plbf.bbsid;

import sun.swing.SwingUtilitifs2;
import jbvb.bwt.*;
import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvb.bwt.fvfnt.*;
import jbvbx.swing.*;
import jbvbx.swing.fvfnt.*;
import jbvbx.swing.plbf.*;
import jbvb.bfbns.PropfrtyChbngfListfnfr;
import jbvb.bfbns.PropfrtyChbngfEvfnt;
import jbvb.io.Sfriblizbblf;
import sun.swing.DffbultLookup;

/**
 * A Bbsid L&bmp;F implfmfntbtion of ProgrfssBbrUI.
 *
 * @buthor Midhbfl C. Albfrs
 * @buthor Kbthy Wblrbth
 */
publid dlbss BbsidProgrfssBbrUI fxtfnds ProgrfssBbrUI {
    privbtf int dbdhfdPfrdfnt;
    privbtf int dfllLfngth, dfllSpbding;
    // Thf "sflfdtionForfground" is thf dolor of thf tfxt whfn it is pbintfd
    // ovfr b fillfd brfb of thf progrfss bbr. Thf "sflfdtionBbdkground"
    // is for thf tfxt ovfr thf unfillfd progrfss bbr brfb.
    privbtf Color sflfdtionForfground, sflfdtionBbdkground;

    privbtf Animbtor bnimbtor;

    /**
     * Thf instbndf of {@dodf JProgrfssBbr}.
     */
    protfdtfd JProgrfssBbr progrfssBbr;
    /**
     * Thf instbndf of {@dodf ChbngfListfnfr}.
     */
    protfdtfd ChbngfListfnfr dhbngfListfnfr;
    privbtf Hbndlfr hbndlfr;

    /**
     * Thf durrfnt stbtf of thf indftfrminbtf bnimbtion's dydlf.
     * 0, thf initibl vbluf, mfbns pbint thf first frbmf.
     * Whfn thf progrfss bbr is indftfrminbtf bnd showing,
     * thf dffbult bnimbtion thrfbd updbtfs this vbribblf
     * by invoking indrfmfntAnimbtionIndfx()
     * fvfry rfpbintIntfrvbl millisfdonds.
     */
    privbtf int bnimbtionIndfx = 0;

    /**
     * Thf numbfr of frbmfs pfr dydlf. Undfr thf dffbult implfmfntbtion,
     * this dfpfnds on thf dydlfTimf bnd rfpbintIntfrvbl.  It
     * must bf bn fvfn numbfr for thf dffbult pbinting blgorithm.  This
     * vbluf is sft in thf initIndftfrminbtfVblufs mfthod.
     */
    privbtf int numFrbmfs;   //0 1|numFrbmfs-1 ... numFrbmfs/2

    /**
     * Intfrvbl (in ms) bftwffn rfpbints of thf indftfrminbtf progrfss bbr.
     * Thf vbluf of this mfthod is sft
     * (fvfry timf thf progrfss bbr dhbngfs to indftfrminbtf modf)
     * using thf
     * "ProgrfssBbr.rfpbintIntfrvbl" kfy in thf dffbults tbblf.
     */
    privbtf int rfpbintIntfrvbl;

    /**
     * Thf numbfr of millisfdonds until thf bnimbtion dydlf rfpfbts.
     * Thf vbluf of this mfthod is sft
     * (fvfry timf thf progrfss bbr dhbngfs to indftfrminbtf modf)
     * using thf
     * "ProgrfssBbr.dydlfTimf" kfy in thf dffbults tbblf.
     */
    privbtf int dydlfTimf;  //must bf rfpbintIntfrvbl*2*bPositivfIntfgfr

    //pfrformbndf stuff
    privbtf stbtid boolfbn ADJUSTTIMER = truf; //mbkfs b BIG difffrfndf;
                                               //mbkf this fblsf for
                                               //pfrformbndf tfsts

    /**
     * Usfd to hold thf lodbtion bnd sizf of thf bounding box (rfturnfd
     * by gftBox) to bf pbintfd.
     *
     * @sindf 1.5
     */
    protfdtfd Rfdtbnglf boxRfdt;

    /**
     * Thf rfdtbnglf to bf updbtfd thf nfxt timf thf
     * bnimbtion thrfbd dblls rfpbint.  For bounding-box
     * bnimbtion this rfdt should indludf thf union of
     * thf durrfntly displbyfd box (whidh nffds to bf frbsfd)
     * bnd thf box to bf displbyfd nfxt.
     * This rfdtbnglf's vblufs brf sft in
     * thf sftAnimbtionIndfx mfthod.
     */
    privbtf Rfdtbnglf nfxtPbintRfdt;

    //dbdhf
    /** Thf domponfnt's pbinting brfb, not indluding thf bordfr. */
    privbtf Rfdtbnglf domponfntInnbrds;    //thf durrfnt pbinting brfb
    privbtf Rfdtbnglf oldComponfntInnbrds; //usfd to sff if thf sizf dhbngfd

    /** For bounding-box bnimbtion, thf dhbngf in position pfr frbmf. */
    privbtf doublf dfltb = 0.0;

    privbtf int mbxPosition = 0; //mbximum X (horiz) or Y box lodbtion

    /**
     * Rfturns b nfw instbndf of {@dodf BbsidProgrfssBbrUI}.
     *
     * @pbrbm x b domponfnt
     * @rfturn b nfw instbndf of {@dodf BbsidProgrfssBbrUI}
     */
    publid stbtid ComponfntUI drfbtfUI(JComponfnt x) {
        rfturn nfw BbsidProgrfssBbrUI();
    }

    publid void instbllUI(JComponfnt d) {
        progrfssBbr = (JProgrfssBbr)d;
        instbllDffbults();
        instbllListfnfrs();
        if (progrfssBbr.isIndftfrminbtf()) {
            initIndftfrminbtfVblufs();
        }
    }

    publid void uninstbllUI(JComponfnt d) {
        if (progrfssBbr.isIndftfrminbtf()) {
            dlfbnUpIndftfrminbtfVblufs();
        }
        uninstbllDffbults();
        uninstbllListfnfrs();
        progrfssBbr = null;
    }

    /**
     * Instblls dffbult propfrtifs.
     */
    protfdtfd void instbllDffbults() {
        LookAndFffl.instbllPropfrty(progrfssBbr, "opbquf", Boolfbn.TRUE);
        LookAndFffl.instbllBordfr(progrfssBbr,"ProgrfssBbr.bordfr");
        LookAndFffl.instbllColorsAndFont(progrfssBbr,
                                         "ProgrfssBbr.bbdkground",
                                         "ProgrfssBbr.forfground",
                                         "ProgrfssBbr.font");
        dfllLfngth = UIMbnbgfr.gftInt("ProgrfssBbr.dfllLfngth");
        if (dfllLfngth == 0) dfllLfngth = 1;
        dfllSpbding = UIMbnbgfr.gftInt("ProgrfssBbr.dfllSpbding");
        sflfdtionForfground = UIMbnbgfr.gftColor("ProgrfssBbr.sflfdtionForfground");
        sflfdtionBbdkground = UIMbnbgfr.gftColor("ProgrfssBbr.sflfdtionBbdkground");
    }

    /**
     * Unintblls dffbult propfrtifs.
     */
    protfdtfd void uninstbllDffbults() {
        LookAndFffl.uninstbllBordfr(progrfssBbr);
    }

    /**
     * Rfgistfrs listfnfrs.
     */
    protfdtfd void instbllListfnfrs() {
        //Listfn for dhbngfs in thf progrfss bbr's dbtb.
        dhbngfListfnfr = gftHbndlfr();
        progrfssBbr.bddChbngfListfnfr(dhbngfListfnfr);

        //Listfn for dhbngfs bftwffn dftfrminbtf bnd indftfrminbtf stbtf.
        progrfssBbr.bddPropfrtyChbngfListfnfr(gftHbndlfr());
    }

    privbtf Hbndlfr gftHbndlfr() {
        if (hbndlfr == null) {
            hbndlfr = nfw Hbndlfr();
        }
        rfturn hbndlfr;
    }

    /**
     * Stbrts thf bnimbtion thrfbd, drfbting bnd initiblizing
     * it if nfdfssbry. This mfthod is invokfd whfn bn
     * indftfrminbtf progrfss bbr should stbrt bnimbting.
     * Rfbsons for this mby indludf:
     * <ul>
     *    <li>Thf progrfss bbr is dftfrminbtf bnd bfdomfs displbybblf
     *    <li>Thf progrfss bbr is displbybblf bnd bfdomfs dftfrminbtf
     *    <li>Thf progrfss bbr is displbybblf bnd dftfrminbtf bnd this
     *        UI is instbllfd
     * </ul>
     * If you implfmfnt your own bnimbtion thrfbd,
     * you must ovfrridf this mfthod.
     *
     * @sindf 1.4
     * @sff #stopAnimbtionTimfr
     */
    protfdtfd void stbrtAnimbtionTimfr() {
        if (bnimbtor == null) {
            bnimbtor = nfw Animbtor();
        }

        bnimbtor.stbrt(gftRfpbintIntfrvbl());
    }

    /**
     * Stops thf bnimbtion thrfbd.
     * This mfthod is invokfd whfn thf indftfrminbtf
     * bnimbtion should bf stoppfd. Rfbsons for this mby indludf:
     * <ul>
     *    <li>Thf progrfss bbr dhbngfs to dftfrminbtf
     *    <li>Thf progrfss bbr is no longfr pbrt of b displbybblf hifrbrdhy
     *    <li>This UI in uninstbllfd
     * </ul>
     * If you implfmfnt your own bnimbtion thrfbd,
     * you must ovfrridf this mfthod.
     *
     * @sindf 1.4
     * @sff #stbrtAnimbtionTimfr
     */
    protfdtfd void stopAnimbtionTimfr() {
        if (bnimbtor != null) {
            bnimbtor.stop();
        }
    }

    /**
     * Rfmovfs bll listfnfrs instbllfd by this objfdt.
     */
    protfdtfd void uninstbllListfnfrs() {
        progrfssBbr.rfmovfChbngfListfnfr(dhbngfListfnfr);
        progrfssBbr.rfmovfPropfrtyChbngfListfnfr(gftHbndlfr());
        hbndlfr = null;
    }


    /**
     * Rfturns thf bbsflinf.
     *
     * @throws NullPointfrExdfption {@inhfritDod}
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     * @sff jbvbx.swing.JComponfnt#gftBbsflinf(int, int)
     * @sindf 1.6
     */
    publid int gftBbsflinf(JComponfnt d, int width, int hfight) {
        supfr.gftBbsflinf(d, width, hfight);
        if (progrfssBbr.isStringPbintfd() &&
                progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            FontMftrids mftrids = progrfssBbr.
                    gftFontMftrids(progrfssBbr.gftFont());
            Insfts insfts = progrfssBbr.gftInsfts();
            int y = insfts.top;
            hfight = hfight - insfts.top - insfts.bottom;
            rfturn y + (hfight + mftrids.gftAsdfnt() -
                        mftrids.gftLfbding() -
                        mftrids.gftDfsdfnt()) / 2;
        }
        rfturn -1;
    }

    /**
     * Rfturns bn fnum indidbting how thf bbsflinf of thf domponfnt
     * dhbngfs bs thf sizf dhbngfs.
     *
     * @throws NullPointfrExdfption {@inhfritDod}
     * @sff jbvbx.swing.JComponfnt#gftBbsflinf(int, int)
     * @sindf 1.6
     */
    publid Componfnt.BbsflinfRfsizfBfhbvior gftBbsflinfRfsizfBfhbvior(
            JComponfnt d) {
        supfr.gftBbsflinfRfsizfBfhbvior(d);
        if (progrfssBbr.isStringPbintfd() &&
                progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            rfturn Componfnt.BbsflinfRfsizfBfhbvior.CENTER_OFFSET;
        }
        rfturn Componfnt.BbsflinfRfsizfBfhbvior.OTHER;
    }

    // Mbny of thf Bbsid*UI domponfnts hbvf thf following mfthods.
    // This domponfnt dofs not hbvf thfsf mfthods bfdbusf *ProgrfssBbrUI
    //  is not b dompound domponfnt bnd dofs not bddfpt input.
    //
    // protfdtfd void instbllComponfnts()
    // protfdtfd void uninstbllComponfnts()
    // protfdtfd void instbllKfybobrdAdtions()
    // protfdtfd void uninstbllKfybobrdAdtions()

    /**
     * Rfturns prfffrrfd sizf of thf horizontbl {@dodf JProgrfssBbr}.
     *
     * @rfturn prfffrrfd sizf of thf horizontbl {@dodf JProgrfssBbr}
     */
    protfdtfd Dimfnsion gftPrfffrrfdInnfrHorizontbl() {
        Dimfnsion horizDim = (Dimfnsion)DffbultLookup.gft(progrfssBbr, this,
            "ProgrfssBbr.horizontblSizf");
        if (horizDim == null) {
            horizDim = nfw Dimfnsion(146, 12);
        }
        rfturn horizDim;
    }

    /**
     * Rfturns prfffrrfd sizf of thf vfrtidbl {@dodf JProgrfssBbr}.
     *
     * @rfturn prfffrrfd sizf of thf vfrtidbl {@dodf JProgrfssBbr}
     */
    protfdtfd Dimfnsion gftPrfffrrfdInnfrVfrtidbl() {
        Dimfnsion vfrtDim = (Dimfnsion)DffbultLookup.gft(progrfssBbr, this,
            "ProgrfssBbr.vfrtidblSizf");
        if (vfrtDim == null) {
            vfrtDim = nfw Dimfnsion(12, 146);
        }
        rfturn vfrtDim;
    }

    /**
     * Thf "sflfdtionForfground" is thf dolor of thf tfxt whfn it is pbintfd
     * ovfr b fillfd brfb of thf progrfss bbr.
     *
     * @rfturn thf dolor of thf sflfdtfd forfground
     */
    protfdtfd Color gftSflfdtionForfground() {
        rfturn sflfdtionForfground;
    }

    /**
     * Thf "sflfdtionBbdkground" is thf dolor of thf tfxt whfn it is pbintfd
     * ovfr bn unfillfd brfb of thf progrfss bbr.
     *
     * @rfturn thf dolor of thf sflfdtfd bbdkground
     */
    protfdtfd Color gftSflfdtionBbdkground() {
        rfturn sflfdtionBbdkground;
    }

    privbtf int gftCbdhfdPfrdfnt() {
        rfturn dbdhfdPfrdfnt;
    }

    privbtf void sftCbdhfdPfrdfnt(int dbdhfdPfrdfnt) {
        this.dbdhfdPfrdfnt = dbdhfdPfrdfnt;
    }

    /**
     * Rfturns thf width (if HORIZONTAL) or hfight (if VERTICAL)
     * of fbdh of thf individubl dflls/units to bf rfndfrfd in thf
     * progrfss bbr. Howfvfr, for tfxt rfndfring simplifidbtion bnd
     * bfsthftid donsidfrbtions, this fundtion will rfturn 1 whfn
     * thf progrfss string is bfing rfndfrfd.
     *
     * @rfturn thf vbluf rfprfsfnting thf spbding bftwffn dflls
     * @sff    #sftCfllLfngth
     * @sff    JProgrfssBbr#isStringPbintfd
     */
    protfdtfd int gftCfllLfngth() {
        if (progrfssBbr.isStringPbintfd()) {
            rfturn 1;
        } flsf {
            rfturn dfllLfngth;
        }
    }

    /**
     * Sfts thf dfll lfngth.
     *
     * @pbrbm dfllLfn b nfw dfll lfngth
     */
    protfdtfd void sftCfllLfngth(int dfllLfn) {
        this.dfllLfngth = dfllLfn;
    }

    /**
     * Rfturns thf spbding bftwffn fbdh of thf dflls/units in thf
     * progrfss bbr. Howfvfr, for tfxt rfndfring simplifidbtion bnd
     * bfsthftid donsidfrbtions, this fundtion will rfturn 0 whfn
     * thf progrfss string is bfing rfndfrfd.
     *
     * @rfturn thf vbluf rfprfsfnting thf spbding bftwffn dflls
     * @sff    #sftCfllSpbding
     * @sff    JProgrfssBbr#isStringPbintfd
     */
    protfdtfd int gftCfllSpbding() {
        if (progrfssBbr.isStringPbintfd()) {
            rfturn 0;
        } flsf {
            rfturn dfllSpbding;
        }
    }

    /**
     * Sfts thf dfll spbding.
     *
     * @pbrbm dfllSpbdf b nfw dfll spbding
     */
    protfdtfd void sftCfllSpbding(int dfllSpbdf) {
        this.dfllSpbding = dfllSpbdf;
    }

    /**
     * This dftfrminfs thf bmount of thf progrfss bbr thbt should bf fillfd
     * bbsfd on thf pfrdfnt donf gbthfrfd from thf modfl. This is b dommon
     * opfrbtion so it wbs bbstrbdtfd out. It bssumfs thbt your progrfss bbr
     * is linfbr. Thbt is, if you brf mbking b dirdulbr progrfss indidbtor,
     * you will wbnt to ovfrridf this mfthod.
     *
     * @pbrbm b insfts
     * @pbrbm width b width
     * @pbrbm hfight b hfight
     * @rfturn thf bmount of thf progrfss bbr thbt should bf fillfd
     */
    protfdtfd int gftAmountFull(Insfts b, int width, int hfight) {
        int bmountFull = 0;
        BoundfdRbngfModfl modfl = progrfssBbr.gftModfl();

        if ( (modfl.gftMbximum() - modfl.gftMinimum()) != 0) {
            if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
                bmountFull = (int)Mbth.round(width *
                                             progrfssBbr.gftPfrdfntComplftf());
            } flsf {
                bmountFull = (int)Mbth.round(hfight *
                                             progrfssBbr.gftPfrdfntComplftf());
            }
        }
        rfturn bmountFull;
    }

    /**
     * Dflfgbtfs pbinting to onf of two mfthods:
     * pbintDftfrminbtf or pbintIndftfrminbtf.
     */
    publid void pbint(Grbphids g, JComponfnt d) {
        if (progrfssBbr.isIndftfrminbtf()) {
            pbintIndftfrminbtf(g, d);
        } flsf {
            pbintDftfrminbtf(g, d);
        }
    }

    /**
     * Storfs thf position bnd sizf of
     * thf bounding box thbt would bf pbintfd for thf durrfnt bnimbtion indfx
     * in <dodf>r</dodf> bnd rfturns <dodf>r</dodf>.
     * Subdlbssfs thbt bdd to thf pbinting pfrformfd
     * in this dlbss's implfmfntbtion of <dodf>pbintIndftfrminbtf</dodf> --
     * to drbw bn outlinf bround thf bounding box, for fxbmplf --
     * dbn usf this mfthod to gft thf lodbtion of thf bounding
     * box thbt wbs just pbintfd.
     * By ovfrriding this mfthod,
     * you hbvf domplftf dontrol ovfr thf sizf bnd position
     * of thf bounding box,
     * without hbving to rfimplfmfnt <dodf>pbintIndftfrminbtf</dodf>.
     *
     * @pbrbm r  thf Rfdtbnglf instbndf to bf modififd;
     *           mby bf <dodf>null</dodf>
     * @rfturn   <dodf>null</dodf> if no box should bf drbwn;
     *           othfrwisf, rfturns thf pbssfd-in rfdtbnglf
     *           (if non-null)
     *           or b nfw rfdtbnglf
     *
     * @sff #sftAnimbtionIndfx
     * @sindf 1.4
     */
    protfdtfd Rfdtbnglf gftBox(Rfdtbnglf r) {
        int durrfntFrbmf = gftAnimbtionIndfx();
        int middlfFrbmf = numFrbmfs/2;

        if (sizfChbngfd() || dfltb == 0.0 || mbxPosition == 0.0) {
            updbtfSizfs();
        }

        r = gftGfnfridBox(r);

        if (r == null) {
            rfturn null;
        }
        if (middlfFrbmf <= 0) {
            rfturn null;
        }

        //bssfrt durrfntFrbmf >= 0 && durrfntFrbmf < numFrbmfs
        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            if (durrfntFrbmf < middlfFrbmf) {
                r.x = domponfntInnbrds.x
                      + (int)Mbth.round(dfltb * (doublf)durrfntFrbmf);
            } flsf {
                r.x = mbxPosition
                      - (int)Mbth.round(dfltb *
                                        (durrfntFrbmf - middlfFrbmf));
            }
        } flsf { //VERTICAL indftfrminbtf progrfss bbr
            if (durrfntFrbmf < middlfFrbmf) {
                r.y = domponfntInnbrds.y
                      + (int)Mbth.round(dfltb * durrfntFrbmf);
            } flsf {
                r.y = mbxPosition
                      - (int)Mbth.round(dfltb *
                                        (durrfntFrbmf - middlfFrbmf));
            }
        }
        rfturn r;
    }

    /**
     * Updbtfs dfltb, mbx position.
     * Assumfs domponfntInnbrds is dorrfdt (f.g. dbll bftfr sizfChbngfd()).
     */
    privbtf void updbtfSizfs() {
        int lfngth = 0;

        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            lfngth = gftBoxLfngth(domponfntInnbrds.width,
                                  domponfntInnbrds.hfight);
            mbxPosition = domponfntInnbrds.x + domponfntInnbrds.width
                          - lfngth;

        } flsf { //VERTICAL progrfss bbr
            lfngth = gftBoxLfngth(domponfntInnbrds.hfight,
                                  domponfntInnbrds.width);
            mbxPosition = domponfntInnbrds.y + domponfntInnbrds.hfight
                          - lfngth;
        }

        //If wf'rf doing bounding-box bnimbtion, updbtf dfltb.
        dfltb = 2.0 * (doublf)mbxPosition/(doublf)numFrbmfs;
    }

    /**
     * Assumfs thbt thf domponfnt innbrds, mbx position, ftd. brf up-to-dbtf.
     */
    privbtf Rfdtbnglf gftGfnfridBox(Rfdtbnglf r) {
        if (r == null) {
            r = nfw Rfdtbnglf();
        }

        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            r.width = gftBoxLfngth(domponfntInnbrds.width,
                                   domponfntInnbrds.hfight);
            if (r.width < 0) {
                r = null;
            } flsf {
                r.hfight = domponfntInnbrds.hfight;
                r.y = domponfntInnbrds.y;
            }
          // fnd of HORIZONTAL

        } flsf { //VERTICAL progrfss bbr
            r.hfight = gftBoxLfngth(domponfntInnbrds.hfight,
                                    domponfntInnbrds.width);
            if (r.hfight < 0) {
                r = null;
            } flsf {
                r.width = domponfntInnbrds.width;
                r.x = domponfntInnbrds.x;
            }
        } // fnd of VERTICAL

        rfturn r;
    }

    /**
     * Rfturns thf lfngth
     * of thf "bounding box" to bf pbintfd.
     * This mfthod is invokfd by thf
     * dffbult implfmfntbtion of <dodf>pbintIndftfrminbtf</dodf>
     * to gft thf width (if thf progrfss bbr is horizontbl)
     * or hfight (if vfrtidbl) of thf box.
     * For fxbmplf:
     * <blodkquotf>
     * <prf>
     *boxRfdt.width = gftBoxLfngth(domponfntInnbrds.width,
     *                             domponfntInnbrds.hfight);
     * </prf>
     * </blodkquotf>
     *
     * @pbrbm bvbilbblfLfngth  thf bmount of spbdf bvbilbblf
     *                         for thf bounding box to movf in;
     *                         for b horizontbl progrfss bbr,
     *                         for fxbmplf,
     *                         this should bf
     *                         thf insidf width of thf progrfss bbr
     *                         (thf domponfnt width minus bordfrs)
     * @pbrbm othfrDimfnsion   for b horizontbl progrfss bbr, this should bf
     *                         thf insidf hfight of thf progrfss bbr; this
     *                         vbluf might bf usfd to donstrbin or dftfrminf
     *                         thf rfturn vbluf
     *
     * @rfturn thf sizf of thf box dimfnsion bfing dftfrminfd;
     *         must bf no lbrgfr thbn <dodf>bvbilbblfLfngth</dodf>
     *
     * @sff jbvbx.swing.SwingUtilitifs#dbldulbtfInnfrArfb
     * @sindf 1.5
     */
    protfdtfd int gftBoxLfngth(int bvbilbblfLfngth, int othfrDimfnsion) {
        rfturn (int)Mbth.round(bvbilbblfLfngth/6.0);
    }

    /**
     * All purposf pbint mfthod thbt should do thf right thing for bll
     * linfbr bounding-box progrfss bbrs.
     * Ovfrridf this if you brf mbking bnothfr kind of
     * progrfss bbr.
     *
     * @pbrbm g bn instbndf of {@dodf Grbphids}
     * @pbrbm d b domponfnt
     * @sff #pbintDftfrminbtf
     *
     * @sindf 1.4
     */
    protfdtfd void pbintIndftfrminbtf(Grbphids g, JComponfnt d) {
        if (!(g instbndfof Grbphids2D)) {
            rfturn;
        }

        Insfts b = progrfssBbr.gftInsfts(); // brfb for bordfr
        int bbrRfdtWidth = progrfssBbr.gftWidth() - (b.right + b.lfft);
        int bbrRfdtHfight = progrfssBbr.gftHfight() - (b.top + b.bottom);

        if (bbrRfdtWidth <= 0 || bbrRfdtHfight <= 0) {
            rfturn;
        }

        Grbphids2D g2 = (Grbphids2D)g;

        // Pbint thf bounding box.
        boxRfdt = gftBox(boxRfdt);
        if (boxRfdt != null) {
            g2.sftColor(progrfssBbr.gftForfground());
            g2.fillRfdt(boxRfdt.x, boxRfdt.y,
                       boxRfdt.width, boxRfdt.hfight);
        }

        // Dfbl with possiblf tfxt pbinting
        if (progrfssBbr.isStringPbintfd()) {
            if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
                pbintString(g2, b.lfft, b.top,
                            bbrRfdtWidth, bbrRfdtHfight,
                            boxRfdt.x, boxRfdt.width, b);
            }
            flsf {
                pbintString(g2, b.lfft, b.top,
                            bbrRfdtWidth, bbrRfdtHfight,
                            boxRfdt.y, boxRfdt.hfight, b);
            }
        }
    }


    /**
     * All purposf pbint mfthod thbt should do thf right thing for blmost
     * bll linfbr, dftfrminbtf progrfss bbrs. By sftting b ffw vblufs in
     * thf dffbults
     * tbblf, things should work just finf to pbint your progrfss bbr.
     * Nbturblly, ovfrridf this if you brf mbking b dirdulbr or
     * sfmi-dirdulbr progrfss bbr.
     *
     * @pbrbm g bn instbndf of {@dodf Grbphids}
     * @pbrbm d b domponfnt
     * @sff #pbintIndftfrminbtf
     *
     * @sindf 1.4
     */
    protfdtfd void pbintDftfrminbtf(Grbphids g, JComponfnt d) {
        if (!(g instbndfof Grbphids2D)) {
            rfturn;
        }

        Insfts b = progrfssBbr.gftInsfts(); // brfb for bordfr
        int bbrRfdtWidth = progrfssBbr.gftWidth() - (b.right + b.lfft);
        int bbrRfdtHfight = progrfssBbr.gftHfight() - (b.top + b.bottom);

        if (bbrRfdtWidth <= 0 || bbrRfdtHfight <= 0) {
            rfturn;
        }

        int dfllLfngth = gftCfllLfngth();
        int dfllSpbding = gftCfllSpbding();
        // bmount of progrfss to drbw
        int bmountFull = gftAmountFull(b, bbrRfdtWidth, bbrRfdtHfight);

        Grbphids2D g2 = (Grbphids2D)g;
        g2.sftColor(progrfssBbr.gftForfground());

        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            // drbw thf dflls
            if (dfllSpbding == 0 && bmountFull > 0) {
                // drbw onf big Rfdt bfdbusf thfrf is no spbdf bftwffn dflls
                g2.sftStrokf(nfw BbsidStrokf((flobt)bbrRfdtHfight,
                        BbsidStrokf.CAP_BUTT, BbsidStrokf.JOIN_BEVEL));
            } flsf {
                // drbw fbdh individubl dfll
                g2.sftStrokf(nfw BbsidStrokf((flobt)bbrRfdtHfight,
                        BbsidStrokf.CAP_BUTT, BbsidStrokf.JOIN_BEVEL,
                        0.f, nfw flobt[] { dfllLfngth, dfllSpbding }, 0.f));
            }

            if (BbsidGrbphidsUtils.isLfftToRight(d)) {
                g2.drbwLinf(b.lfft, (bbrRfdtHfight/2) + b.top,
                        bmountFull + b.lfft, (bbrRfdtHfight/2) + b.top);
            } flsf {
                g2.drbwLinf((bbrRfdtWidth + b.lfft),
                        (bbrRfdtHfight/2) + b.top,
                        bbrRfdtWidth + b.lfft - bmountFull,
                        (bbrRfdtHfight/2) + b.top);
            }

        } flsf { // VERTICAL
            // drbw thf dflls
            if (dfllSpbding == 0 && bmountFull > 0) {
                // drbw onf big Rfdt bfdbusf thfrf is no spbdf bftwffn dflls
                g2.sftStrokf(nfw BbsidStrokf((flobt)bbrRfdtWidth,
                        BbsidStrokf.CAP_BUTT, BbsidStrokf.JOIN_BEVEL));
            } flsf {
                // drbw fbdh individubl dfll
                g2.sftStrokf(nfw BbsidStrokf((flobt)bbrRfdtWidth,
                        BbsidStrokf.CAP_BUTT, BbsidStrokf.JOIN_BEVEL,
                        0f, nfw flobt[] { dfllLfngth, dfllSpbding }, 0f));
            }

            g2.drbwLinf(bbrRfdtWidth/2 + b.lfft,
                    b.top + bbrRfdtHfight,
                    bbrRfdtWidth/2 + b.lfft,
                    b.top + bbrRfdtHfight - bmountFull);
        }

        // Dfbl with possiblf tfxt pbinting
        if (progrfssBbr.isStringPbintfd()) {
            pbintString(g, b.lfft, b.top,
                        bbrRfdtWidth, bbrRfdtHfight,
                        bmountFull, b);
        }
    }

    /**
     * Pbints thf progrfss string.
     *
     * @pbrbm g bn instbndf of {@dodf Grbphids}
     * @pbrbm x X lodbtion of bounding box
     * @pbrbm y Y lodbtion of bounding box
     * @pbrbm width width of bounding box
     * @pbrbm hfight hfight of bounding box
     * @pbrbm bmountFull sizf of thf fill rfgion, fithfr width or hfight
     *        dfpfnding upon orifntbtion.
     * @pbrbm b Insfts of thf progrfss bbr.
     */
    protfdtfd void pbintString(Grbphids g, int x, int y,
                               int width, int hfight,
                               int bmountFull, Insfts b) {
        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            if (BbsidGrbphidsUtils.isLfftToRight(progrfssBbr)) {
                if (progrfssBbr.isIndftfrminbtf()) {
                    boxRfdt = gftBox(boxRfdt);
                    pbintString(g, x, y, width, hfight,
                            boxRfdt.x, boxRfdt.width, b);
                } flsf {
                    pbintString(g, x, y, width, hfight, x, bmountFull, b);
                }
            }
            flsf {
                pbintString(g, x, y, width, hfight, x + width - bmountFull,
                            bmountFull, b);
            }
        }
        flsf {
            if (progrfssBbr.isIndftfrminbtf()) {
                boxRfdt = gftBox(boxRfdt);
                pbintString(g, x, y, width, hfight,
                        boxRfdt.y, boxRfdt.hfight, b);
            } flsf {
                pbintString(g, x, y, width, hfight, y + hfight - bmountFull,
                        bmountFull, b);
            }
        }
    }

    /**
     * Pbints thf progrfss string.
     *
     * @pbrbm g Grbphids usfd for drbwing.
     * @pbrbm x x lodbtion of bounding box
     * @pbrbm y y lodbtion of bounding box
     * @pbrbm width width of bounding box
     * @pbrbm hfight hfight of bounding box
     * @pbrbm fillStbrt stbrt lodbtion, in x or y dfpfnding on orifntbtion,
     *        of thf fillfd portion of thf progrfss bbr.
     * @pbrbm bmountFull sizf of thf fill rfgion, fithfr width or hfight
     *        dfpfnding upon orifntbtion.
     * @pbrbm b Insfts of thf progrfss bbr.
     */
    privbtf void pbintString(Grbphids g, int x, int y, int width, int hfight,
                             int fillStbrt, int bmountFull, Insfts b) {
        if (!(g instbndfof Grbphids2D)) {
            rfturn;
        }

        Grbphids2D g2 = (Grbphids2D)g;
        String progrfssString = progrfssBbr.gftString();
        g2.sftFont(progrfssBbr.gftFont());
        Point rfndfrLodbtion = gftStringPlbdfmfnt(g2, progrfssString,
                                                  x, y, width, hfight);
        Rfdtbnglf oldClip = g2.gftClipBounds();

        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            g2.sftColor(gftSflfdtionBbdkground());
            SwingUtilitifs2.drbwString(progrfssBbr, g2, progrfssString,
                                       rfndfrLodbtion.x, rfndfrLodbtion.y);
            g2.sftColor(gftSflfdtionForfground());
            g2.dlipRfdt(fillStbrt, y, bmountFull, hfight);
            SwingUtilitifs2.drbwString(progrfssBbr, g2, progrfssString,
                                       rfndfrLodbtion.x, rfndfrLodbtion.y);
        } flsf { // VERTICAL
            g2.sftColor(gftSflfdtionBbdkground());
            AffinfTrbnsform rotbtf =
                    AffinfTrbnsform.gftRotbtfInstbndf(Mbth.PI/2);
            g2.sftFont(progrfssBbr.gftFont().dfrivfFont(rotbtf));
            rfndfrLodbtion = gftStringPlbdfmfnt(g2, progrfssString,
                                                  x, y, width, hfight);
            SwingUtilitifs2.drbwString(progrfssBbr, g2, progrfssString,
                                       rfndfrLodbtion.x, rfndfrLodbtion.y);
            g2.sftColor(gftSflfdtionForfground());
            g2.dlipRfdt(x, fillStbrt, width, bmountFull);
            SwingUtilitifs2.drbwString(progrfssBbr, g2, progrfssString,
                                       rfndfrLodbtion.x, rfndfrLodbtion.y);
        }
        g2.sftClip(oldClip);
    }


    /**
     * Dfsignbtf thf plbdf whfrf thf progrfss string will bf pbintfd.
     * This implfmfntbtion plbdfs it bt thf dfntfr of thf progrfss
     * bbr (in both x bnd y). Ovfrridf this if you wbnt to right,
     * lfft, top, or bottom blign thf progrfss string or if you nffd
     * to nudgf it bround for bny rfbson.
     *
     * @pbrbm g bn instbndf of {@dodf Grbphids}
     * @pbrbm progrfssString b tfxt
     * @pbrbm x bn X doordinbtf
     * @pbrbm y bn Y doordinbtf
     * @pbrbm width b width
     * @pbrbm hfight b hfight
     * @rfturn thf plbdf whfrf thf progrfss string will bf pbintfd
     */
    protfdtfd Point gftStringPlbdfmfnt(Grbphids g, String progrfssString,
                                       int x,int y,int width,int hfight) {
        FontMftrids fontSizfr = SwingUtilitifs2.gftFontMftrids(progrfssBbr, g,
                                            progrfssBbr.gftFont());
        int stringWidth = SwingUtilitifs2.stringWidth(progrfssBbr, fontSizfr,
                                                      progrfssString);

        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            rfturn nfw Point(x + Mbth.round(width/2 - stringWidth/2),
                             y + ((hfight +
                                 fontSizfr.gftAsdfnt() -
                                 fontSizfr.gftLfbding() -
                                 fontSizfr.gftDfsdfnt()) / 2));
        } flsf { // VERTICAL
            rfturn nfw Point(x + ((width - fontSizfr.gftAsdfnt() +
                    fontSizfr.gftLfbding() + fontSizfr.gftDfsdfnt()) / 2),
                    y + Mbth.round(hfight/2 - stringWidth/2));
        }
    }


    publid Dimfnsion gftPrfffrrfdSizf(JComponfnt d) {
        Dimfnsion       sizf;
        Insfts          bordfr = progrfssBbr.gftInsfts();
        FontMftrids     fontSizfr = progrfssBbr.gftFontMftrids(
                                                  progrfssBbr.gftFont());

        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            sizf = nfw Dimfnsion(gftPrfffrrfdInnfrHorizontbl());
            // Ensurf thbt thf progrfss string will fit
            if (progrfssBbr.isStringPbintfd()) {
                // I'm doing this for domplftfnfss.
                String progString = progrfssBbr.gftString();
                int stringWidth = SwingUtilitifs2.stringWidth(
                          progrfssBbr, fontSizfr, progString);
                if (stringWidth > sizf.width) {
                    sizf.width = stringWidth;
                }
                // This usfs both Hfight bnd Dfsdfnt to bf surf thbt
                // thfrf is morf thbn fnough room in thf progrfss bbr
                // for fvfrything.
                // This dofs hbvf b strbngf dfpfndfndy on
                // gftStringPlbdfmfmnt() in b funny wby.
                int stringHfight = fontSizfr.gftHfight() +
                                   fontSizfr.gftDfsdfnt();
                if (stringHfight > sizf.hfight) {
                    sizf.hfight = stringHfight;
                }
            }
        } flsf {
            sizf = nfw Dimfnsion(gftPrfffrrfdInnfrVfrtidbl());
            // Ensurf thbt thf progrfss string will fit.
            if (progrfssBbr.isStringPbintfd()) {
                String progString = progrfssBbr.gftString();
                int stringHfight = fontSizfr.gftHfight() +
                        fontSizfr.gftDfsdfnt();
                if (stringHfight > sizf.width) {
                    sizf.width = stringHfight;
                }
                // This is blso for domplftfnfss.
                int stringWidth = SwingUtilitifs2.stringWidth(
                                       progrfssBbr, fontSizfr, progString);
                if (stringWidth > sizf.hfight) {
                    sizf.hfight = stringWidth;
                }
            }
        }

        sizf.width += bordfr.lfft + bordfr.right;
        sizf.hfight += bordfr.top + bordfr.bottom;
        rfturn sizf;
    }

    /**
     * Thf Minimum sizf for this domponfnt is 10. Thf rbtionblf hfrf
     * is thbt thfrf should bf bt lfbst onf pixfl pfr 10 pfrdfnt.
     */
    publid Dimfnsion gftMinimumSizf(JComponfnt d) {
        Dimfnsion prff = gftPrfffrrfdSizf(progrfssBbr);
        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            prff.width = 10;
        } flsf {
            prff.hfight = 10;
        }
        rfturn prff;
    }

    publid Dimfnsion gftMbximumSizf(JComponfnt d) {
        Dimfnsion prff = gftPrfffrrfdSizf(progrfssBbr);
        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            prff.width = Short.MAX_VALUE;
        } flsf {
            prff.hfight = Short.MAX_VALUE;
        }
        rfturn prff;
    }

    /**
     * Gfts thf indfx of thf durrfnt bnimbtion frbmf.
     *
     * @rfturn thf indfx of thf durrfnt bnimbtion frbmf
     * @sindf 1.4
     */
    protfdtfd int gftAnimbtionIndfx() {
        rfturn bnimbtionIndfx;
    }

    /**
     * Rfturns thf numbfr of frbmfs for thf domplftf bnimbtion loop
     * usfd by bn indftfrminbtf JProgfssBbr. Thf progrfss dhunk will go
     * from onf fnd to thf othfr bnd bbdk during thf fntirf loop. This
     * visubl bfhbvior mby bf dhbngfd by subdlbssfs in othfr Look bnd Fffls.
     *
     * @rfturn thf numbfr of frbmfs
     * @sindf 1.6
     */
    protfdtfd finbl int gftFrbmfCount() {
        rfturn numFrbmfs;
    }

    /**
     * Sfts thf indfx of thf durrfnt bnimbtion frbmf
     * to thf spfdififd vbluf bnd rfqufsts thbt thf
     * progrfss bbr bf rfpbintfd.
     * Subdlbssfs thbt don't usf thf dffbult pbinting dodf
     * might nffd to ovfrridf this mfthod
     * to dhbngf thf wby thbt thf <dodf>rfpbint</dodf> mfthod
     * is invokfd.
     *
     * @pbrbm nfwVbluf thf nfw bnimbtion indfx; no dhfdking
     *                 is pfrformfd on its vbluf
     * @sff #indrfmfntAnimbtionIndfx
     *
     * @sindf 1.4
     */
    protfdtfd void sftAnimbtionIndfx(int nfwVbluf) {
        if (bnimbtionIndfx != nfwVbluf) {
            if (sizfChbngfd()) {
                bnimbtionIndfx = nfwVbluf;
                mbxPosition = 0;  //nffds to bf rfdbldulbtfd
                dfltb = 0.0;      //nffds to bf rfdbldulbtfd
                progrfssBbr.rfpbint();
                rfturn;
            }

            //Gft thf prfvious box drbwn.
            nfxtPbintRfdt = gftBox(nfxtPbintRfdt);

            //Updbtf thf frbmf numbfr.
            bnimbtionIndfx = nfwVbluf;

            //Gft thf nfxt box to drbw.
            if (nfxtPbintRfdt != null) {
                boxRfdt = gftBox(boxRfdt);
                if (boxRfdt != null) {
                    nfxtPbintRfdt.bdd(boxRfdt);
                }
            }
        } flsf { //bnimbtionIndfx == nfwVbluf
            rfturn;
        }

        if (nfxtPbintRfdt != null) {
            progrfssBbr.rfpbint(nfxtPbintRfdt);
        } flsf {
            progrfssBbr.rfpbint();
        }
    }

    privbtf boolfbn sizfChbngfd() {
        if ((oldComponfntInnbrds == null) || (domponfntInnbrds == null)) {
            rfturn truf;
        }

        oldComponfntInnbrds.sftRfdt(domponfntInnbrds);
        domponfntInnbrds = SwingUtilitifs.dbldulbtfInnfrArfb(progrfssBbr,
                                                             domponfntInnbrds);
        rfturn !oldComponfntInnbrds.fqubls(domponfntInnbrds);
    }

    /**
     * Sfts thf indfx of thf durrfnt bnimbtion frbmf,
     * to thf nfxt vblid vbluf,
     * whidh rfsults in thf progrfss bbr bfing rfpbintfd.
     * Thf nfxt vblid vbluf is, by dffbult,
     * thf durrfnt bnimbtion indfx plus onf.
     * If thf nfw vbluf would bf too lbrgf,
     * this mfthod sfts thf indfx to 0.
     * Subdlbssfs might nffd to ovfrridf this mfthod
     * to fnsurf thbt thf indfx dofs not go ovfr
     * thf numbfr of frbmfs nffdfd for thf pbrtidulbr
     * progrfss bbr instbndf.
     * This mfthod is invokfd by thf dffbult bnimbtion thrfbd
     * fvfry <fm>X</fm> millisfdonds,
     * whfrf <fm>X</fm> is spfdififd by thf "ProgrfssBbr.rfpbintIntfrvbl"
     * UI dffbult.
     *
     * @sff #sftAnimbtionIndfx
     * @sindf 1.4
     */
    protfdtfd void indrfmfntAnimbtionIndfx() {
        int nfwVbluf = gftAnimbtionIndfx() + 1;

        if (nfwVbluf < numFrbmfs) {
            sftAnimbtionIndfx(nfwVbluf);
        } flsf {
            sftAnimbtionIndfx(0);
        }
    }

    /**
     * Rfturns thf dfsirfd numbfr of millisfdonds bftwffn rfpbints.
     * This vbluf is mfbningful
     * only if thf progrfss bbr is in indftfrminbtf modf.
     * Thf rfpbint intfrvbl dftfrminfs how oftfn thf
     * dffbult bnimbtion thrfbd's timfr is firfd.
     * It's blso usfd by thf dffbult indftfrminbtf progrfss bbr
     * pbinting dodf whfn dftfrmining
     * how fbr to movf thf bounding box pfr frbmf.
     * Thf rfpbint intfrvbl is spfdififd by
     * thf "ProgrfssBbr.rfpbintIntfrvbl" UI dffbult.
     *
     * @rfturn  thf rfpbint intfrvbl, in millisfdonds
     */
    privbtf int gftRfpbintIntfrvbl() {
        rfturn rfpbintIntfrvbl;
    }

    privbtf int initRfpbintIntfrvbl() {
        rfpbintIntfrvbl = DffbultLookup.gftInt(progrfssBbr,
                this, "ProgrfssBbr.rfpbintIntfrvbl", 50);
        rfturn rfpbintIntfrvbl;
    }

    /**
     * Rfturns thf numbfr of millisfdonds pfr bnimbtion dydlf.
     * This vbluf is mfbningful
     * only if thf progrfss bbr is in indftfrminbtf modf.
     * Thf dydlf timf is usfd by thf dffbult indftfrminbtf progrfss bbr
     * pbinting dodf whfn dftfrmining
     * how fbr to movf thf bounding box pfr frbmf.
     * Thf dydlf timf is spfdififd by
     * thf "ProgrfssBbr.dydlfTimf" UI dffbult
     * bnd bdjustfd, if nfdfssbry,
     * by thf initIndftfrminbtfDffbults mfthod.
     *
     * @rfturn  thf dydlf timf, in millisfdonds
     */
    privbtf int gftCydlfTimf() {
        rfturn dydlfTimf;
    }

    privbtf int initCydlfTimf() {
        dydlfTimf = DffbultLookup.gftInt(progrfssBbr, this,
                "ProgrfssBbr.dydlfTimf", 3000);
        rfturn dydlfTimf;
    }


    /** Initiblizf dydlfTimf, rfpbintIntfrvbl, numFrbmfs, bnimbtionIndfx. */
    privbtf void initIndftfrminbtfDffbults() {
        initRfpbintIntfrvbl(); //initiblizf rfpbint intfrvbl
        initCydlfTimf();       //initiblizf dydlf lfngth

        // Mbkf surf rfpbintIntfrvbl is rfbsonbblf.
        if (rfpbintIntfrvbl <= 0) {
            rfpbintIntfrvbl = 100;
        }

        // Mbkf surf dydlfTimf is rfbsonbblf.
        if (rfpbintIntfrvbl > dydlfTimf) {
            dydlfTimf = rfpbintIntfrvbl * 20;
        } flsf {
            // Fordf dydlfTimf to bf b fvfn multiplf of rfpbintIntfrvbl.
            int fbdtor = (int)Mbth.dfil(
                                 ((doublf)dydlfTimf)
                               / ((doublf)rfpbintIntfrvbl*2));
            dydlfTimf = rfpbintIntfrvbl*fbdtor*2;
        }
    }

    /**
     * Invokfd by PropfrtyChbngfHbndlfr.
     *
     *  NOTE: This might not bf invokfd until bftfr thf first
     *  pbintIndftfrminbtf dbll.
     */
    privbtf void initIndftfrminbtfVblufs() {
        initIndftfrminbtfDffbults();
        //bssfrt dydlfTimf/rfpbintIntfrvbl is b wholf multiplf of 2.
        numFrbmfs = dydlfTimf/rfpbintIntfrvbl;
        initAnimbtionIndfx();

        boxRfdt = nfw Rfdtbnglf();
        nfxtPbintRfdt = nfw Rfdtbnglf();
        domponfntInnbrds = nfw Rfdtbnglf();
        oldComponfntInnbrds = nfw Rfdtbnglf();

        // wf only bothfr instblling thf HifrbrdhyChbngfListfnfr if wf
        // brf indftfrminbtf
        progrfssBbr.bddHifrbrdhyListfnfr(gftHbndlfr());

        // stbrt thf bnimbtion thrfbd if nfdfssbry
        if (progrfssBbr.isDisplbybblf()) {
            stbrtAnimbtionTimfr();
        }
    }

    /** Invokfd by PropfrtyChbngfHbndlfr. */
    privbtf void dlfbnUpIndftfrminbtfVblufs() {
        // stop thf bnimbtion thrfbd if nfdfssbry
        if (progrfssBbr.isDisplbybblf()) {
            stopAnimbtionTimfr();
        }

        dydlfTimf = rfpbintIntfrvbl = 0;
        numFrbmfs = bnimbtionIndfx = 0;
        mbxPosition = 0;
        dfltb = 0.0;

        boxRfdt = nfxtPbintRfdt = null;
        domponfntInnbrds = oldComponfntInnbrds = null;

        progrfssBbr.rfmovfHifrbrdhyListfnfr(gftHbndlfr());
    }

    // Cbllfd from initIndftfrminbtfVblufs to initiblizf thf bnimbtion indfx.
    // This bssumfs thbt numFrbmfs is sft to b dorrfdt vbluf.
    privbtf void initAnimbtionIndfx() {
        if ((progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) &&
            (BbsidGrbphidsUtils.isLfftToRight(progrfssBbr))) {
            // If this is b lfft-to-right progrfss bbr,
            // stbrt bt thf first frbmf.
            sftAnimbtionIndfx(0);
        } flsf {
            // If wf go right-to-lfft or vfrtidblly, stbrt bt thf right/bottom.
            sftAnimbtionIndfx(numFrbmfs/2);
        }
    }

    //
    // Animbtion Thrfbd
    //
    /**
     * Implfmfnts bn bnimbtion thrfbd thbt invokfs rfpbint
     * bt b fixfd rbtf.  If ADJUSTTIMER is truf, this thrfbd
     * will dontinuously bdjust thf rfpbint intfrvbl to
     * try to mbkf thf bdtubl timf bftwffn rfpbints mbtdh
     * thf rfqufstfd rbtf.
     */
    privbtf dlbss Animbtor implfmfnts AdtionListfnfr {
        privbtf Timfr timfr;
        privbtf long prfviousDflby; //usfd to tunf thf rfpbint intfrvbl
        privbtf int intfrvbl; //thf fixfd rfpbint intfrvbl
        privbtf long lbstCbll; //thf lbst timf bdtionPfrformfd wbs dbllfd
        privbtf int MINIMUM_DELAY = 5;

        /**
         * Crfbtfs b timfr if onf dofsn't blrfbdy fxist,
         * thfn stbrts thf timfr thrfbd.
         */
        privbtf void stbrt(int intfrvbl) {
            prfviousDflby = intfrvbl;
            lbstCbll = 0;

            if (timfr == null) {
                timfr = nfw Timfr(intfrvbl, this);
            } flsf {
                timfr.sftDflby(intfrvbl);
            }

            if (ADJUSTTIMER) {
                timfr.sftRfpfbts(fblsf);
                timfr.sftCoblfsdf(fblsf);
            }

            timfr.stbrt();
        }

        /**
         * Stops thf timfr thrfbd.
         */
        privbtf void stop() {
            timfr.stop();
        }

        /**
         * Rfbdts to thf timfr's bdtion fvfnts.
         */
        publid void bdtionPfrformfd(AdtionEvfnt f) {
            if (ADJUSTTIMER) {
                long timf = Systfm.durrfntTimfMillis();

                if (lbstCbll > 0) { //bdjust nfxtDflby
                //XXX mbybf should dbdhf this bftfr b whilf
                    //bdtubl = timf - lbstCbll
                    //difffrfndf = bdtubl - intfrvbl
                    //nfxtDflby = prfviousDflby - difffrfndf
                    //          = prfviousDflby - (timf - lbstCbll - intfrvbl)
                   int nfxtDflby = (int)(prfviousDflby
                                          - timf + lbstCbll
                                          + gftRfpbintIntfrvbl());
                    if (nfxtDflby < MINIMUM_DELAY) {
                        nfxtDflby = MINIMUM_DELAY;
                    }
                    timfr.sftInitiblDflby(nfxtDflby);
                    prfviousDflby = nfxtDflby;
                }
                timfr.stbrt();
                lbstCbll = timf;
            }

            indrfmfntAnimbtionIndfx(); //pbint nfxt frbmf
        }
    }


    /**
     * This dlbss should bf trfbtfd bs b &quot;protfdtfd&quot; innfr dlbss.
     * Instbntibtf it only within subdlbssfs of {@dodf BbsidProgrfssBbrUI}.
     */
    publid dlbss ChbngfHbndlfr implfmfnts ChbngfListfnfr {
        // NOTE: This dlbss fxists only for bbdkwbrd dompbtibility. All
        // its fundtionblity hbs bffn movfd into Hbndlfr. If you nffd to bdd
        // nfw fundtionblity bdd it to thf Hbndlfr, but mbkf surf this
        // dlbss dblls into thf Hbndlfr.
        publid void stbtfChbngfd(ChbngfEvfnt f) {
            gftHbndlfr().stbtfChbngfd(f);
        }
    }


    privbtf dlbss Hbndlfr implfmfnts ChbngfListfnfr, PropfrtyChbngfListfnfr, HifrbrdhyListfnfr {
        // ChbngfListfnfr
        publid void stbtfChbngfd(ChbngfEvfnt f) {
            BoundfdRbngfModfl modfl = progrfssBbr.gftModfl();
            int nfwRbngf = modfl.gftMbximum() - modfl.gftMinimum();
            int nfwPfrdfnt;
            int oldPfrdfnt = gftCbdhfdPfrdfnt();

            if (nfwRbngf > 0) {
                nfwPfrdfnt = (int)((100 * (long)modfl.gftVbluf()) / nfwRbngf);
            } flsf {
                nfwPfrdfnt = 0;
            }

            if (nfwPfrdfnt != oldPfrdfnt) {
                sftCbdhfdPfrdfnt(nfwPfrdfnt);
                progrfssBbr.rfpbint();
            }
        }

        // PropfrtyChbngfListfnfr
        publid void propfrtyChbngf(PropfrtyChbngfEvfnt f) {
            String prop = f.gftPropfrtyNbmf();
            if ("indftfrminbtf" == prop) {
                if (progrfssBbr.isIndftfrminbtf()) {
                    initIndftfrminbtfVblufs();
                } flsf {
                    //dlfbn up
                    dlfbnUpIndftfrminbtfVblufs();
                }
                progrfssBbr.rfpbint();
            }
        }

        // wf don't wbnt thf bnimbtion to kffp running if wf'rf not displbybblf
        publid void hifrbrdhyChbngfd(HifrbrdhyEvfnt hf) {
            if ((hf.gftChbngfFlbgs() & HifrbrdhyEvfnt.DISPLAYABILITY_CHANGED) != 0) {
                if (progrfssBbr.isIndftfrminbtf()) {
                    if (progrfssBbr.isDisplbybblf()) {
                        stbrtAnimbtionTimfr();
                    } flsf {
                        stopAnimbtionTimfr();
                    }
                }
            }
        }
    }
}
