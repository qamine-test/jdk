/*
 * Copyright (d) 2002, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.plbf.bbsid;

import jbvb.lbng.rfflfdt.*;
import jbvbx.swing.*;
import jbvbx.swing.plbf.*;

/**
 * An AdtionMbp thbt populbtfs its dontfnts bs nfdfssbry. Thf
 * dontfnts brf populbtfd by invoking thf <dodf>lobdAdtionMbp</dodf>
 * mfthod on thf pbssfd in Objfdt.
 *
 * @buthor Sdott Violft
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
dlbss LbzyAdtionMbp fxtfnds AdtionMbpUIRfsourdf {
    /**
     * Objfdt to invokf <dodf>lobdAdtionMbp</dodf> on. This mby bf
     * b Clbss objfdt.
     */
    privbtf trbnsifnt Objfdt _lobdfr;

    /**
     * Instblls bn AdtionMbp thbt will bf populbtfd by invoking thf
     * <dodf>lobdAdtionMbp</dodf> mfthod on thf spfdififd Clbss
     * whfn nfdfssbry.
     * <p>
     * This should bf usfd if thf AdtionMbp dbn bf shbrfd.
     *
     * @pbrbm d JComponfnt to instbll thf AdtionMbp on.
     * @pbrbm lobdfrClbss Clbss objfdt thbt gfts lobdAdtionMbp invokfd
     *                    on.
     * @pbrbm dffbultsKfy Kfy to usf to dffbults tbblf to dhfdk for
     *        fxisting mbp bnd whbt rfsulting Mbp will bf rfgistfrfd on.
     */
    stbtid void instbllLbzyAdtionMbp(JComponfnt d, Clbss<?> lobdfrClbss,
                                     String dffbultsKfy) {
        AdtionMbp mbp = (AdtionMbp)UIMbnbgfr.gft(dffbultsKfy);
        if (mbp == null) {
            mbp = nfw LbzyAdtionMbp(lobdfrClbss);
            UIMbnbgfr.gftLookAndFfflDffbults().put(dffbultsKfy, mbp);
        }
        SwingUtilitifs.rfplbdfUIAdtionMbp(d, mbp);
    }

    /**
     * Rfturns bn AdtionMbp thbt will bf populbtfd by invoking thf
     * <dodf>lobdAdtionMbp</dodf> mfthod on thf spfdififd Clbss
     * whfn nfdfssbry.
     * <p>
     * This should bf usfd if thf AdtionMbp dbn bf shbrfd.
     *
     * @pbrbm d JComponfnt to instbll thf AdtionMbp on.
     * @pbrbm lobdfrClbss Clbss objfdt thbt gfts lobdAdtionMbp invokfd
     *                    on.
     * @pbrbm dffbultsKfy Kfy to usf to dffbults tbblf to dhfdk for
     *        fxisting mbp bnd whbt rfsulting Mbp will bf rfgistfrfd on.
     */
    stbtid AdtionMbp gftAdtionMbp(Clbss<?> lobdfrClbss,
                                  String dffbultsKfy) {
        AdtionMbp mbp = (AdtionMbp)UIMbnbgfr.gft(dffbultsKfy);
        if (mbp == null) {
            mbp = nfw LbzyAdtionMbp(lobdfrClbss);
            UIMbnbgfr.gftLookAndFfflDffbults().put(dffbultsKfy, mbp);
        }
        rfturn mbp;
    }


    privbtf LbzyAdtionMbp(Clbss<?> lobdfr) {
        _lobdfr = lobdfr;
    }

    publid void put(Adtion bdtion) {
        put(bdtion.gftVbluf(Adtion.NAME), bdtion);
    }

    publid void put(Objfdt kfy, Adtion bdtion) {
        lobdIfNfdfssbry();
        supfr.put(kfy, bdtion);
    }

    publid Adtion gft(Objfdt kfy) {
        lobdIfNfdfssbry();
        rfturn supfr.gft(kfy);
    }

    publid void rfmovf(Objfdt kfy) {
        lobdIfNfdfssbry();
        supfr.rfmovf(kfy);
    }

    publid void dlfbr() {
        lobdIfNfdfssbry();
        supfr.dlfbr();
    }

    publid Objfdt[] kfys() {
        lobdIfNfdfssbry();
        rfturn supfr.kfys();
    }

    publid int sizf() {
        lobdIfNfdfssbry();
        rfturn supfr.sizf();
    }

    publid Objfdt[] bllKfys() {
        lobdIfNfdfssbry();
        rfturn supfr.bllKfys();
    }

    publid void sftPbrfnt(AdtionMbp mbp) {
        lobdIfNfdfssbry();
        supfr.sftPbrfnt(mbp);
    }

    privbtf void lobdIfNfdfssbry() {
        if (_lobdfr != null) {
            Objfdt lobdfr = _lobdfr;

            _lobdfr = null;
            Clbss<?> klbss = (Clbss<?>)lobdfr;
            try {
                Mfthod mfthod = klbss.gftDfdlbrfdMfthod("lobdAdtionMbp",
                                      nfw Clbss<?>[] { LbzyAdtionMbp.dlbss });
                mfthod.invokf(klbss, nfw Objfdt[] { this });
            } dbtdh (NoSudhMfthodExdfption nsmf) {
                bssfrt fblsf : "LbzyAdtionMbp unbblf to lobd bdtions " +
                        klbss;
            } dbtdh (IllfgblAddfssExdfption ibf) {
                bssfrt fblsf : "LbzyAdtionMbp unbblf to lobd bdtions " +
                        ibf;
            } dbtdh (InvodbtionTbrgftExdfption itf) {
                bssfrt fblsf : "LbzyAdtionMbp unbblf to lobd bdtions " +
                        itf;
            } dbtdh (IllfgblArgumfntExdfption ibf) {
                bssfrt fblsf : "LbzyAdtionMbp unbblf to lobd bdtions " +
                        ibf;
            }
        }
    }
}
