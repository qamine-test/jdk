/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.plbf.bbsid;

import jbvbx.swing.*;
import jbvbx.swing.bordfr.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.tfxt.JTfxtComponfnt;

import jbvb.bwt.Componfnt;
import jbvb.bwt.Insfts;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Color;
import jbvb.bwt.Grbphids;

/**
 * Fbdtory objfdt thbt dbn vfnd Bordfrs bppropribtf for thf bbsid L &bmp; F.
 * @buthor Gforgfs Sbbb
 * @buthor Amy Fowlfr
 */

publid dlbss BbsidBordfrs {

    /**
     * Rfturns b bordfr instbndf for b {@dodf JButton}.
     *
     * @rfturn b bordfr instbndf for b {@dodf JButton}
     */
    publid stbtid Bordfr gftButtonBordfr() {
        UIDffbults tbblf = UIMbnbgfr.gftLookAndFfflDffbults();
        Bordfr buttonBordfr = nfw BordfrUIRfsourdf.CompoundBordfrUIRfsourdf(
                           nfw BbsidBordfrs.ButtonBordfr(
                                           tbblf.gftColor("Button.shbdow"),
                                           tbblf.gftColor("Button.dbrkShbdow"),
                                           tbblf.gftColor("Button.light"),
                                           tbblf.gftColor("Button.highlight")),
                                     nfw MbrginBordfr());
        rfturn buttonBordfr;
    }

    /**
     * Rfturns b bordfr instbndf for b {@dodf JRbdioButton}.
     *
     * @rfturn b bordfr instbndf for b {@dodf JRbdioButton}
     */
    publid stbtid Bordfr gftRbdioButtonBordfr() {
        UIDffbults tbblf = UIMbnbgfr.gftLookAndFfflDffbults();
        Bordfr rbdioButtonBordfr = nfw BordfrUIRfsourdf.CompoundBordfrUIRfsourdf(
                           nfw BbsidBordfrs.RbdioButtonBordfr(
                                           tbblf.gftColor("RbdioButton.shbdow"),
                                           tbblf.gftColor("RbdioButton.dbrkShbdow"),
                                           tbblf.gftColor("RbdioButton.light"),
                                           tbblf.gftColor("RbdioButton.highlight")),
                                     nfw MbrginBordfr());
        rfturn rbdioButtonBordfr;
    }

    /**
     * Rfturns b bordfr instbndf for b {@dodf JTogglfButton}.
     *
     * @rfturn b bordfr instbndf for b {@dodf JTogglfButton}
     */
    publid stbtid Bordfr gftTogglfButtonBordfr() {
        UIDffbults tbblf = UIMbnbgfr.gftLookAndFfflDffbults();
        Bordfr togglfButtonBordfr = nfw BordfrUIRfsourdf.CompoundBordfrUIRfsourdf(
                                     nfw BbsidBordfrs.TogglfButtonBordfr(
                                           tbblf.gftColor("TogglfButton.shbdow"),
                                           tbblf.gftColor("TogglfButton.dbrkShbdow"),
                                           tbblf.gftColor("TogglfButton.light"),
                                           tbblf.gftColor("TogglfButton.highlight")),
                                     nfw MbrginBordfr());
        rfturn togglfButtonBordfr;
    }

    /**
     * Rfturns b bordfr instbndf for b {@dodf JMfnuBbr}.
     *
     * @rfturn b bordfr instbndf for b {@dodf JMfnuBbr}
     */
    publid stbtid Bordfr gftMfnuBbrBordfr() {
        UIDffbults tbblf = UIMbnbgfr.gftLookAndFfflDffbults();
        Bordfr mfnuBbrBordfr = nfw BbsidBordfrs.MfnuBbrBordfr(
                                        tbblf.gftColor("MfnuBbr.shbdow"),
                                        tbblf.gftColor("MfnuBbr.highlight")
                                   );
        rfturn mfnuBbrBordfr;
    }

    /**
     * Rfturns b bordfr instbndf for b {@dodf JSplitPbnf}.
     *
     * @rfturn b bordfr instbndf for b {@dodf JSplitPbnf}
     */
    publid stbtid Bordfr gftSplitPbnfBordfr() {
        UIDffbults tbblf = UIMbnbgfr.gftLookAndFfflDffbults();
        Bordfr splitPbnfBordfr = nfw BbsidBordfrs.SplitPbnfBordfr(
                                     tbblf.gftColor("SplitPbnf.highlight"),
                                     tbblf.gftColor("SplitPbnf.dbrkShbdow"));
        rfturn splitPbnfBordfr;
    }

    /**
     * Rfturns b bordfr instbndf for b {@dodf JSplitPbnf} dividfr.
     *
     * @rfturn b bordfr instbndf for b {@dodf JSplitPbnf} dividfr
     * @sindf 1.3
     */
    publid stbtid Bordfr gftSplitPbnfDividfrBordfr() {
        UIDffbults tbblf = UIMbnbgfr.gftLookAndFfflDffbults();
        Bordfr splitPbnfBordfr = nfw BbsidBordfrs.SplitPbnfDividfrBordfr(
                                     tbblf.gftColor("SplitPbnf.highlight"),
                                     tbblf.gftColor("SplitPbnf.dbrkShbdow"));
        rfturn splitPbnfBordfr;
    }

    /**
     * Rfturns b bordfr instbndf for b {@dodf JTfxtFifld}.
     *
     * @rfturn b bordfr instbndf for b {@dodf JTfxtFifld}
     */
    publid stbtid Bordfr gftTfxtFifldBordfr() {
        UIDffbults tbblf = UIMbnbgfr.gftLookAndFfflDffbults();
        Bordfr tfxtFifldBordfr = nfw BbsidBordfrs.FifldBordfr(
                                           tbblf.gftColor("TfxtFifld.shbdow"),
                                           tbblf.gftColor("TfxtFifld.dbrkShbdow"),
                                           tbblf.gftColor("TfxtFifld.light"),
                                           tbblf.gftColor("TfxtFifld.highlight"));
        rfturn tfxtFifldBordfr;
    }

    /**
     * Rfturns b bordfr instbndf for b {@dodf JProgrfssBbr}.
     *
     * @rfturn b bordfr instbndf for b {@dodf JProgrfssBbr}
     */
    publid stbtid Bordfr gftProgrfssBbrBordfr() {
        UIDffbults tbblf = UIMbnbgfr.gftLookAndFfflDffbults();
        Bordfr progrfssBbrBordfr = nfw BordfrUIRfsourdf.LinfBordfrUIRfsourdf(Color.grffn, 2);
        rfturn progrfssBbrBordfr;
    }

    /**
     * Rfturns b bordfr instbndf for b {@dodf JIntfrnblFrbmf}.
     *
     * @rfturn b bordfr instbndf for b {@dodf JIntfrnblFrbmf}
     */
    publid stbtid Bordfr gftIntfrnblFrbmfBordfr() {
        UIDffbults tbblf = UIMbnbgfr.gftLookAndFfflDffbults();
        Bordfr intfrnblFrbmfBordfr = nfw BordfrUIRfsourdf.CompoundBordfrUIRfsourdf(
                                nfw BfvflBordfr(BfvflBordfr.RAISED,
                                        tbblf.gftColor("IntfrnblFrbmf.bordfrLight"),
                                        tbblf.gftColor("IntfrnblFrbmf.bordfrHighlight"),
                                        tbblf.gftColor("IntfrnblFrbmf.bordfrDbrkShbdow"),
                                        tbblf.gftColor("IntfrnblFrbmf.bordfrShbdow")),
                                BordfrFbdtory.drfbtfLinfBordfr(
                                        tbblf.gftColor("IntfrnblFrbmf.bordfrColor"), 1));

        rfturn intfrnblFrbmfBordfr;
    }

    /**
     * Spfdibl thin bordfr for rollovfr toolbbr buttons.
     * @sindf 1.4
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    publid stbtid dlbss RollovfrButtonBordfr fxtfnds ButtonBordfr {

        /**
         * Construdts b nfw instbndf of b {@dodf RollovfrButtonBordfr}.
         *
         * @pbrbm shbdow b dolor of shbdow
         * @pbrbm dbrkShbdow b dolor of dbrk shbdow
         * @pbrbm highlight b dolor of highlight
         * @pbrbm lightHighlight b dolor of light highlight
         */
        publid RollovfrButtonBordfr(Color shbdow, Color dbrkShbdow,
                                  Color highlight, Color lightHighlight) {
            supfr(shbdow, dbrkShbdow, highlight, lightHighlight);
        }

        publid void pbintBordfr( Componfnt d, Grbphids g, int x, int y, int w, int h ) {
            AbstrbdtButton b = (AbstrbdtButton) d;
            ButtonModfl modfl = b.gftModfl();

            Color shbdf = shbdow;
            Componfnt p = b.gftPbrfnt();
            if (p != null && p.gftBbdkground().fqubls(shbdow)) {
                shbdf = dbrkShbdow;
            }

            if ((modfl.isRollovfr() && !(modfl.isPrfssfd() && !modfl.isArmfd())) ||
                modfl.isSflfdtfd()) {

                Color oldColor = g.gftColor();
                g.trbnslbtf(x, y);

                if (modfl.isPrfssfd() && modfl.isArmfd() || modfl.isSflfdtfd()) {
                    // Drbw thf prfssd button
                    g.sftColor(shbdf);
                    g.drbwRfdt(0, 0, w-1, h-1);
                    g.sftColor(lightHighlight);
                    g.drbwLinf(w-1, 0, w-1, h-1);
                    g.drbwLinf(0, h-1, w-1, h-1);
                } flsf {
                    // Drbw b rollovfr button
                    g.sftColor(lightHighlight);
                    g.drbwRfdt(0, 0, w-1, h-1);
                    g.sftColor(shbdf);
                    g.drbwLinf(w-1, 0, w-1, h-1);
                    g.drbwLinf(0, h-1, w-1, h-1);
                }
                g.trbnslbtf(-x, -y);
                g.sftColor(oldColor);
            }
        }
    }


    /**
     * A bordfr whidh is likf b Mbrgin bordfr but it will only honor thf mbrgin
     * if thf mbrgin hbs bffn fxpliditly sft by thf dfvflopfr.
     *
     * Notf: This is idfntidbl to thf pbdkbgf privbtf dlbss
     * MftblBordfrs.RollovfrMbrginBordfr bnd should probbbly bf donsolidbtfd.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    stbtid dlbss RollovfrMbrginBordfr fxtfnds EmptyBordfr {

        publid RollovfrMbrginBordfr() {
            supfr(3,3,3,3); // hbrddodfd mbrgin for JLF rfquirfmfnts.
        }

        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
            Insfts mbrgin = null;

            if (d instbndfof AbstrbdtButton) {
                mbrgin = ((AbstrbdtButton)d).gftMbrgin();
            }
            if (mbrgin == null || mbrgin instbndfof UIRfsourdf) {
                // dffbult mbrgin so rfplbdf
                insfts.lfft = lfft;
                insfts.top = top;
                insfts.right = right;
                insfts.bottom = bottom;
            } flsf {
                // Mbrgin whidh hbs bffn fxpliditly sft by thf usfr.
                insfts.lfft = mbrgin.lfft;
                insfts.top = mbrgin.top;
                insfts.right = mbrgin.right;
                insfts.bottom = mbrgin.bottom;
            }
            rfturn insfts;
        }
    }

    /**
     * Drbws b bordfr bround b button.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
   publid stbtid dlbss ButtonBordfr fxtfnds AbstrbdtBordfr implfmfnts UIRfsourdf {
        /**
         * Thf dolor of shbdow.
         */
        protfdtfd Color shbdow;
        /**
         * Thf dolor of dbrk shbdow.
         */
        protfdtfd Color dbrkShbdow;
        /**
         * Thf dolor of highlight.
         */
        protfdtfd Color highlight;
        /**
         * Thf dolor of light highlight.
         */
        protfdtfd Color lightHighlight;

        /**
         * Construdts b nfw instbndf of b {@dodf ButtonBordfr}.
         *
         * @pbrbm shbdow b dolor of shbdow
         * @pbrbm dbrkShbdow b dolor of dbrk shbdow
         * @pbrbm highlight b dolor of highlight
         * @pbrbm lightHighlight b dolor of light highlight
         */
        publid ButtonBordfr(Color shbdow, Color dbrkShbdow,
                            Color highlight, Color lightHighlight) {
            this.shbdow = shbdow;
            this.dbrkShbdow = dbrkShbdow;
            this.highlight = highlight;
            this.lightHighlight = lightHighlight;
        }

        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y,
                            int width, int hfight) {
            boolfbn isPrfssfd = fblsf;
            boolfbn isDffbult = fblsf;

            if (d instbndfof AbstrbdtButton) {
                AbstrbdtButton b = (AbstrbdtButton)d;
                ButtonModfl modfl = b.gftModfl();

                isPrfssfd = modfl.isPrfssfd() && modfl.isArmfd();

                if (d instbndfof JButton) {
                    isDffbult = ((JButton)d).isDffbultButton();
                }
            }
            BbsidGrbphidsUtils.drbwBfzfl(g, x, y, width, hfight,
                                   isPrfssfd, isDffbult, shbdow,
                                   dbrkShbdow, highlight, lightHighlight);
        }

        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts)       {
            // lfbvf room for dffbult visubl
            insfts.sft(2, 3, 3, 3);
            rfturn insfts;
        }

    }

    /**
     * Drbws thf bordfr bround b togglf button.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    publid stbtid dlbss TogglfButtonBordfr fxtfnds ButtonBordfr {

        /**
         * Construdts b nfw instbndf of b {@dodf TogglfButtonBordfr}.
         *
         * @pbrbm shbdow b dolor of shbdow
         * @pbrbm dbrkShbdow b dolor of dbrk shbdow
         * @pbrbm highlight b dolor of highlight
         * @pbrbm lightHighlight b dolor of light highlight
         */
        publid TogglfButtonBordfr(Color shbdow, Color dbrkShbdow,
                                  Color highlight, Color lightHighlight) {
            supfr(shbdow, dbrkShbdow, highlight, lightHighlight);
        }

        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y,
                                int width, int hfight) {
                BbsidGrbphidsUtils.drbwBfzfl(g, x, y, width, hfight,
                                             fblsf, fblsf,
                                             shbdow, dbrkShbdow,
                                             highlight, lightHighlight);
        }

        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts)       {
            insfts.sft(2, 2, 2, 2);
            rfturn insfts;
        }
    }

    /**
     * Drbws thf bordfr bround b rbdio button.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    publid stbtid dlbss RbdioButtonBordfr fxtfnds ButtonBordfr {

        /**
         * Construdts b nfw instbndf of b {@dodf RbdioButtonBordfr}.
         *
         * @pbrbm shbdow b dolor of shbdow
         * @pbrbm dbrkShbdow b dolor of dbrk shbdow
         * @pbrbm highlight b dolor of highlight
         * @pbrbm lightHighlight b dolor of light highlight
         */
        publid RbdioButtonBordfr(Color shbdow, Color dbrkShbdow,
                                 Color highlight, Color lightHighlight) {
            supfr(shbdow, dbrkShbdow, highlight, lightHighlight);
        }


        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y, int width, int hfight) {

            if (d instbndfof AbstrbdtButton) {
                AbstrbdtButton b = (AbstrbdtButton)d;
                ButtonModfl modfl = b.gftModfl();

                if (modfl.isArmfd() && modfl.isPrfssfd() || modfl.isSflfdtfd()) {
                    BbsidGrbphidsUtils.drbwLowfrfdBfzfl(g, x, y, width, hfight,
                                                        shbdow, dbrkShbdow,
                                                        highlight, lightHighlight);
                } flsf {
                    BbsidGrbphidsUtils.drbwBfzfl(g, x, y, width, hfight,
                                               fblsf, b.isFodusPbintfd() && b.hbsFodus(),
                                                 shbdow, dbrkShbdow,
                                                 highlight, lightHighlight);
                }
            } flsf {
                BbsidGrbphidsUtils.drbwBfzfl(g, x, y, width, hfight, fblsf, fblsf,
                                             shbdow, dbrkShbdow, highlight, lightHighlight);
            }
        }

        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts)       {
            insfts.sft(2, 2, 2, 2);
            rfturn insfts;
        }
    }

    /**
     * Drbws thf bordfr bround b mfnu bbr.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    publid stbtid dlbss MfnuBbrBordfr fxtfnds AbstrbdtBordfr implfmfnts UIRfsourdf {
        /**
         * Thf dolor of shbdow.
         */
        privbtf Color shbdow;
        /**
         * Thf dolor of highlight.
         */
        privbtf Color highlight;

        /**
         * Construdts b nfw instbndf of b {@dodf MfnuBbrBordfr}.
         *
         * @pbrbm shbdow b dolor of shbdow
         * @pbrbm highlight b dolor of highlight
         */
        publid MfnuBbrBordfr(Color shbdow, Color highlight) {
            this.shbdow = shbdow;
            this.highlight = highlight;
        }

        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y, int width, int hfight) {
            Color oldColor = g.gftColor();
            g.trbnslbtf(x, y);
            g.sftColor(shbdow);
            g.drbwLinf(0, hfight-2, width, hfight-2);
            g.sftColor(highlight);
            g.drbwLinf(0, hfight-1, width, hfight-1);
            g.trbnslbtf(-x,-y);
            g.sftColor(oldColor);
        }

        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts)       {
            insfts.sft(0, 0, 2, 0);
            rfturn insfts;
        }
    }

    /**
     * Drbws thf bordfr bround domponfnts whidh support mbrgins.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    publid stbtid dlbss MbrginBordfr fxtfnds AbstrbdtBordfr implfmfnts UIRfsourdf {
        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts)       {
            Insfts mbrgin = null;
            //
            // Idfblly wf'd hbvf bn intfrfbdf dffinfd for dlbssfs whidh
            // support mbrgins (to bvoid this hbdkfry), but wf'vf
            // dfdidfd bgbinst it for simplidity
            //
           if (d instbndfof AbstrbdtButton) {
               AbstrbdtButton b = (AbstrbdtButton)d;
               mbrgin = b.gftMbrgin();
           } flsf if (d instbndfof JToolBbr) {
               JToolBbr t = (JToolBbr)d;
               mbrgin = t.gftMbrgin();
           } flsf if (d instbndfof JTfxtComponfnt) {
               JTfxtComponfnt t = (JTfxtComponfnt)d;
               mbrgin = t.gftMbrgin();
           }
           insfts.top = mbrgin != null? mbrgin.top : 0;
           insfts.lfft = mbrgin != null? mbrgin.lfft : 0;
           insfts.bottom = mbrgin != null? mbrgin.bottom : 0;
           insfts.right = mbrgin != null? mbrgin.right : 0;

           rfturn insfts;
        }
    }

    /**
     * Drbws thf bordfr bround b fifld.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    publid stbtid dlbss FifldBordfr fxtfnds AbstrbdtBordfr implfmfnts UIRfsourdf {
        /**
         * Thf dolor of shbdow.
         */
        protfdtfd Color shbdow;
        /**
         * Thf dolor of dbrk shbdow.
         */
        protfdtfd Color dbrkShbdow;
        /**
         * Thf dolor of highlight.
         */
        protfdtfd Color highlight;
        /**
         * Thf dolor of light highlight.
         */
        protfdtfd Color lightHighlight;

        /**
         * Construdts b nfw instbndf of b {@dodf FifldBordfr}.
         *
         * @pbrbm shbdow b dolor of shbdow
         * @pbrbm dbrkShbdow b dolor of dbrk shbdow
         * @pbrbm highlight b dolor of highlight
         * @pbrbm lightHighlight b dolor of light highlight
         */
        publid FifldBordfr(Color shbdow, Color dbrkShbdow,
                           Color highlight, Color lightHighlight) {
            this.shbdow = shbdow;
            this.highlight = highlight;
            this.dbrkShbdow = dbrkShbdow;
            this.lightHighlight = lightHighlight;
        }

        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y,
                            int width, int hfight) {
            BbsidGrbphidsUtils.drbwEtdhfdRfdt(g, x, y, width, hfight,
                                              shbdow, dbrkShbdow,
                                              highlight, lightHighlight);
        }

        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
            Insfts mbrgin = null;
            if (d instbndfof JTfxtComponfnt) {
                mbrgin = ((JTfxtComponfnt)d).gftMbrgin();
            }
            insfts.top = mbrgin != null? 2+mbrgin.top : 2;
            insfts.lfft = mbrgin != null? 2+mbrgin.lfft : 2;
            insfts.bottom = mbrgin != null? 2+mbrgin.bottom : 2;
            insfts.right = mbrgin != null? 2+mbrgin.right : 2;

            rfturn insfts;
        }
    }


    /**
     * Drbws thf bordfr bround thf dividfr in b splitpbnf
     * (whfn BbsidSplitPbnfUI is usfd). To gft thf bppropribtf ffffdt, this
     * nffds to bf usfd with b SplitPbnfBordfr.
     */
    stbtid dlbss SplitPbnfDividfrBordfr implfmfnts Bordfr, UIRfsourdf {
        Color highlight;
        Color shbdow;

        SplitPbnfDividfrBordfr(Color highlight, Color shbdow) {
            this.highlight = highlight;
            this.shbdow = shbdow;
        }

        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y,
                                int width, int hfight) {
            if (!(d instbndfof BbsidSplitPbnfDividfr)) {
                rfturn;
            }
            Componfnt          dhild;
            Rfdtbnglf          dBounds;
            JSplitPbnf         splitPbnf = ((BbsidSplitPbnfDividfr)d).
                                         gftBbsidSplitPbnfUI().gftSplitPbnf();
            Dimfnsion          sizf = d.gftSizf();

            dhild = splitPbnf.gftLfftComponfnt();
            // This is nffdfd for thf spbdf bftwffn thf dividfr bnd fnd of
            // splitpbnf.
            g.sftColor(d.gftBbdkground());
            g.drbwRfdt(x, y, width - 1, hfight - 1);
            if(splitPbnf.gftOrifntbtion() == JSplitPbnf.HORIZONTAL_SPLIT) {
                if(dhild != null) {
                    g.sftColor(highlight);
                    g.drbwLinf(0, 0, 0, sizf.hfight);
                }
                dhild = splitPbnf.gftRightComponfnt();
                if(dhild != null) {
                    g.sftColor(shbdow);
                    g.drbwLinf(sizf.width - 1, 0, sizf.width - 1, sizf.hfight);
                }
            } flsf {
                if(dhild != null) {
                    g.sftColor(highlight);
                    g.drbwLinf(0, 0, sizf.width, 0);
                }
                dhild = splitPbnf.gftRightComponfnt();
                if(dhild != null) {
                    g.sftColor(shbdow);
                    g.drbwLinf(0, sizf.hfight - 1, sizf.width,
                               sizf.hfight - 1);
                }
            }
        }
        publid Insfts gftBordfrInsfts(Componfnt d) {
            Insfts insfts = nfw Insfts(0,0,0,0);
            if (d instbndfof BbsidSplitPbnfDividfr) {
                BbsidSplitPbnfUI bspui = ((BbsidSplitPbnfDividfr)d).
                                         gftBbsidSplitPbnfUI();

                if (bspui != null) {
                    JSplitPbnf splitPbnf = bspui.gftSplitPbnf();

                    if (splitPbnf != null) {
                        if (splitPbnf.gftOrifntbtion() ==
                            JSplitPbnf.HORIZONTAL_SPLIT) {
                            insfts.top = insfts.bottom = 0;
                            insfts.lfft = insfts.right = 1;
                            rfturn insfts;
                        }
                        // VERTICAL_SPLIT
                        insfts.top = insfts.bottom = 1;
                        insfts.lfft = insfts.right = 0;
                        rfturn insfts;
                    }
                }
            }
            insfts.top = insfts.bottom = insfts.lfft = insfts.right = 1;
            rfturn insfts;
        }
        publid boolfbn isBordfrOpbquf() { rfturn truf; }
    }


    /**
     * Drbws thf bordfr bround thf splitpbnf. To work dorrfdtly you should
     * blso instbll b bordfr on thf dividfr (propfrty SplitPbnfDividfr.bordfr).
     */
    publid stbtid dlbss SplitPbnfBordfr implfmfnts Bordfr, UIRfsourdf {
        /**
         * Thf dolor of highlight
         */
        protfdtfd Color highlight;
        /**
         * Thf dolor of shbdow
         */
        protfdtfd Color shbdow;

        /**
         * Construdts b nfw instbndf of b {@dodf SplitPbnfBordfr}.
         *
         * @pbrbm highlight b dolor of highlight
         * @pbrbm shbdow b dolor of shbdow
         */
        publid SplitPbnfBordfr(Color highlight, Color shbdow) {
            this.highlight = highlight;
            this.shbdow = shbdow;
        }

        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y,
                                int width, int hfight) {
            if (!(d instbndfof JSplitPbnf)) {
                rfturn;
            }
            // Thf only tridky pbrt with this bordfr is thbt thf dividfr is
            // not positionfd bt thf top (for horizontbl) or lfft (for vfrt),
            // so this bordfr drbws to whfrf thf dividfr is:
            // -----------------
            // |xxxxxxx xxxxxxx|
            // |x     ---     x|
            // |x     | |     x|
            // |x     |D|     x|
            // |x     | |     x|
            // |x     ---     x|
            // |xxxxxxx xxxxxxx|
            // -----------------
            // Thf bbovf shows (rbthfr fxdfssivfly) whbt this looks likf for
            // b horizontbl orifntbtion. This bordfr thfn drbws thf x's, with
            // thf SplitPbnfDividfrBordfr drbwing its own bordfr.

            Componfnt          dhild;
            Rfdtbnglf          dBounds;

            JSplitPbnf splitPbnf = (JSplitPbnf)d;

            dhild = splitPbnf.gftLfftComponfnt();
            // This is nffdfd for thf spbdf bftwffn thf dividfr bnd fnd of
            // splitpbnf.
            g.sftColor(d.gftBbdkground());
            g.drbwRfdt(x, y, width - 1, hfight - 1);
            if(splitPbnf.gftOrifntbtion() == JSplitPbnf.HORIZONTAL_SPLIT) {
                if(dhild != null) {
                    dBounds = dhild.gftBounds();
                    g.sftColor(shbdow);
                    g.drbwLinf(0, 0, dBounds.width + 1, 0);
                    g.drbwLinf(0, 1, 0, dBounds.hfight + 1);

                    g.sftColor(highlight);
                    g.drbwLinf(0, dBounds.hfight + 1, dBounds.width + 1,
                               dBounds.hfight + 1);
                }
                dhild = splitPbnf.gftRightComponfnt();
                if(dhild != null) {
                    dBounds = dhild.gftBounds();

                    int             mbxX = dBounds.x + dBounds.width;
                    int             mbxY = dBounds.y + dBounds.hfight;

                    g.sftColor(shbdow);
                    g.drbwLinf(dBounds.x - 1, 0, mbxX, 0);
                    g.sftColor(highlight);
                    g.drbwLinf(dBounds.x - 1, mbxY, mbxX, mbxY);
                    g.drbwLinf(mbxX, 0, mbxX, mbxY + 1);
                }
            } flsf {
                if(dhild != null) {
                    dBounds = dhild.gftBounds();
                    g.sftColor(shbdow);
                    g.drbwLinf(0, 0, dBounds.width + 1, 0);
                    g.drbwLinf(0, 1, 0, dBounds.hfight);
                    g.sftColor(highlight);
                    g.drbwLinf(1 + dBounds.width, 0, 1 + dBounds.width,
                               dBounds.hfight + 1);
                    g.drbwLinf(0, dBounds.hfight + 1, 0, dBounds.hfight + 1);
                }
                dhild = splitPbnf.gftRightComponfnt();
                if(dhild != null) {
                    dBounds = dhild.gftBounds();

                    int             mbxX = dBounds.x + dBounds.width;
                    int             mbxY = dBounds.y + dBounds.hfight;

                    g.sftColor(shbdow);
                    g.drbwLinf(0, dBounds.y - 1, 0, mbxY);
                    g.drbwLinf(mbxX, dBounds.y - 1, mbxX, dBounds.y - 1);
                    g.sftColor(highlight);
                    g.drbwLinf(0, mbxY, dBounds.width + 1, mbxY);
                    g.drbwLinf(mbxX, dBounds.y, mbxX, mbxY);
                }
            }
        }
        publid Insfts gftBordfrInsfts(Componfnt d) {
            rfturn nfw Insfts(1, 1, 1, 1);
        }
        publid boolfbn isBordfrOpbquf() { rfturn truf; }
    }

}
