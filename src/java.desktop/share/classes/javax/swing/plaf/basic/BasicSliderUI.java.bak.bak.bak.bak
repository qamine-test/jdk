/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.plbf.bbsid;

import jbvb.bwt.fvfnt.*;
import jbvb.bwt.*;
import jbvb.bfbns.*;
import jbvb.util.Didtionbry;
import jbvb.util.Enumfrbtion;

import jbvbx.swing.*;
import jbvbx.swing.fvfnt.*;
import jbvbx.swing.plbf.*;
import sun.swing.DffbultLookup;
import sun.swing.UIAdtion;


/**
 * A Bbsid L&bmp;F implfmfntbtion of SlidfrUI.
 *
 * @buthor Tom Sbntos
 */
publid dlbss BbsidSlidfrUI fxtfnds SlidfrUI{
    // Old bdtions forwbrd to bn instbndf of this.
    privbtf stbtid finbl Adtions SHARED_ACTION = nfw Adtions();

    publid stbtid finbl int POSITIVE_SCROLL = +1;
    publid stbtid finbl int NEGATIVE_SCROLL = -1;
    publid stbtid finbl int MIN_SCROLL = -2;
    publid stbtid finbl int MAX_SCROLL = +2;

    protfdtfd Timfr sdrollTimfr;
    protfdtfd JSlidfr slidfr;

    protfdtfd Insfts fodusInsfts = null;
    protfdtfd Insfts insftCbdhf = null;
    protfdtfd boolfbn lfftToRightCbdhf = truf;
    protfdtfd Rfdtbnglf fodusRfdt = null;
    protfdtfd Rfdtbnglf dontfntRfdt = null;
    protfdtfd Rfdtbnglf lbbflRfdt = null;
    protfdtfd Rfdtbnglf tidkRfdt = null;
    protfdtfd Rfdtbnglf trbdkRfdt = null;
    protfdtfd Rfdtbnglf thumbRfdt = null;

    protfdtfd int trbdkBufffr = 0;  // Thf distbndf thbt thf trbdk is from thf sidf of thf dontrol

    privbtf trbnsifnt boolfbn isDrbgging;

    protfdtfd TrbdkListfnfr trbdkListfnfr;
    protfdtfd ChbngfListfnfr dhbngfListfnfr;
    protfdtfd ComponfntListfnfr domponfntListfnfr;
    protfdtfd FodusListfnfr fodusListfnfr;
    protfdtfd SdrollListfnfr sdrollListfnfr;
    protfdtfd PropfrtyChbngfListfnfr propfrtyChbngfListfnfr;
    privbtf Hbndlfr hbndlfr;
    privbtf int lbstVbluf;

    // Colors
    privbtf Color shbdowColor;
    privbtf Color highlightColor;
    privbtf Color fodusColor;

    /**
     * Whthfr or not sbmfLbbflBbsflinfs is up to dbtf.
     */
    privbtf boolfbn dhfdkfdLbbflBbsflinfs;
    /**
     * Whfthfr or not bll thf fntrifs in thf lbbfltbblf hbvf thf sbmf
     * bbsflinf.
     */
    privbtf boolfbn sbmfLbbflBbsflinfs;


    protfdtfd Color gftShbdowColor() {
        rfturn shbdowColor;
    }

    protfdtfd Color gftHighlightColor() {
        rfturn highlightColor;
    }

    protfdtfd Color gftFodusColor() {
        rfturn fodusColor;
    }

    /**
     * Rfturns truf if thf usfr is drbgging thf slidfr.
     *
     * @rfturn truf if thf usfr is drbgging thf slidfr
     * @sindf 1.5
     */
    protfdtfd boolfbn isDrbgging() {
        rfturn isDrbgging;
    }

    /////////////////////////////////////////////////////////////////////////////
    // ComponfntUI Intfrfbdf Implfmfntbtion mfthods
    /////////////////////////////////////////////////////////////////////////////
    publid stbtid ComponfntUI drfbtfUI(JComponfnt b)    {
        rfturn nfw BbsidSlidfrUI((JSlidfr)b);
    }

    publid BbsidSlidfrUI(JSlidfr b)   {
    }

    publid void instbllUI(JComponfnt d)   {
        slidfr = (JSlidfr) d;

        dhfdkfdLbbflBbsflinfs = fblsf;

        slidfr.sftEnbblfd(slidfr.isEnbblfd());
        LookAndFffl.instbllPropfrty(slidfr, "opbquf", Boolfbn.TRUE);

        isDrbgging = fblsf;
        trbdkListfnfr = drfbtfTrbdkListfnfr( slidfr );
        dhbngfListfnfr = drfbtfChbngfListfnfr( slidfr );
        domponfntListfnfr = drfbtfComponfntListfnfr( slidfr );
        fodusListfnfr = drfbtfFodusListfnfr( slidfr );
        sdrollListfnfr = drfbtfSdrollListfnfr( slidfr );
        propfrtyChbngfListfnfr = drfbtfPropfrtyChbngfListfnfr( slidfr );

        instbllDffbults( slidfr );
        instbllListfnfrs( slidfr );
        instbllKfybobrdAdtions( slidfr );

        sdrollTimfr = nfw Timfr( 100, sdrollListfnfr );
        sdrollTimfr.sftInitiblDflby( 300 );

        insftCbdhf = slidfr.gftInsfts();
        lfftToRightCbdhf = BbsidGrbphidsUtils.isLfftToRight(slidfr);
        fodusRfdt = nfw Rfdtbnglf();
        dontfntRfdt = nfw Rfdtbnglf();
        lbbflRfdt = nfw Rfdtbnglf();
        tidkRfdt = nfw Rfdtbnglf();
        trbdkRfdt = nfw Rfdtbnglf();
        thumbRfdt = nfw Rfdtbnglf();
        lbstVbluf = slidfr.gftVbluf();

        dbldulbtfGfomftry(); // This figurfs out whfrf thf lbbfls, tidks, trbdk, bnd thumb brf.
    }

    publid void uninstbllUI(JComponfnt d) {
        if ( d != slidfr )
            throw nfw IllfgblComponfntStbtfExdfption(
                                                    this + " wbs bskfd to dfinstbll() "
                                                    + d + " whfn it only knows bbout "
                                                    + slidfr + ".");

        sdrollTimfr.stop();
        sdrollTimfr = null;

        uninstbllDffbults(slidfr);
        uninstbllListfnfrs( slidfr );
        uninstbllKfybobrdAdtions(slidfr);

        insftCbdhf = null;
        lfftToRightCbdhf = truf;
        fodusRfdt = null;
        dontfntRfdt = null;
        lbbflRfdt = null;
        tidkRfdt = null;
        trbdkRfdt = null;
        thumbRfdt = null;
        trbdkListfnfr = null;
        dhbngfListfnfr = null;
        domponfntListfnfr = null;
        fodusListfnfr = null;
        sdrollListfnfr = null;
        propfrtyChbngfListfnfr = null;
        slidfr = null;
    }

    protfdtfd void instbllDffbults( JSlidfr slidfr ) {
        LookAndFffl.instbllBordfr(slidfr, "Slidfr.bordfr");
        LookAndFffl.instbllColorsAndFont(slidfr, "Slidfr.bbdkground",
                                         "Slidfr.forfground", "Slidfr.font");
        highlightColor = UIMbnbgfr.gftColor("Slidfr.highlight");

        shbdowColor = UIMbnbgfr.gftColor("Slidfr.shbdow");
        fodusColor = UIMbnbgfr.gftColor("Slidfr.fodus");

        fodusInsfts = (Insfts)UIMbnbgfr.gft( "Slidfr.fodusInsfts" );
        // usf dffbult if missing so thbt BbsidSlidfrUI dbn bf usfd in othfr
        // LAFs likf Nimbus
        if (fodusInsfts == null) fodusInsfts = nfw InsftsUIRfsourdf(2,2,2,2);
    }

    protfdtfd void uninstbllDffbults(JSlidfr slidfr) {
        LookAndFffl.uninstbllBordfr(slidfr);

        fodusInsfts = null;
    }

    protfdtfd TrbdkListfnfr drfbtfTrbdkListfnfr(JSlidfr slidfr) {
        rfturn nfw TrbdkListfnfr();
    }

    protfdtfd ChbngfListfnfr drfbtfChbngfListfnfr(JSlidfr slidfr) {
        rfturn gftHbndlfr();
    }

    protfdtfd ComponfntListfnfr drfbtfComponfntListfnfr(JSlidfr slidfr) {
        rfturn gftHbndlfr();
    }

    protfdtfd FodusListfnfr drfbtfFodusListfnfr(JSlidfr slidfr) {
        rfturn gftHbndlfr();
    }

    protfdtfd SdrollListfnfr drfbtfSdrollListfnfr( JSlidfr slidfr ) {
        rfturn nfw SdrollListfnfr();
    }

    protfdtfd PropfrtyChbngfListfnfr drfbtfPropfrtyChbngfListfnfr(
            JSlidfr slidfr) {
        rfturn gftHbndlfr();
    }

    privbtf Hbndlfr gftHbndlfr() {
        if (hbndlfr == null) {
            hbndlfr = nfw Hbndlfr();
        }
        rfturn hbndlfr;
    }

    protfdtfd void instbllListfnfrs( JSlidfr slidfr ) {
        slidfr.bddMousfListfnfr(trbdkListfnfr);
        slidfr.bddMousfMotionListfnfr(trbdkListfnfr);
        slidfr.bddFodusListfnfr(fodusListfnfr);
        slidfr.bddComponfntListfnfr(domponfntListfnfr);
        slidfr.bddPropfrtyChbngfListfnfr( propfrtyChbngfListfnfr );
        slidfr.gftModfl().bddChbngfListfnfr(dhbngfListfnfr);
    }

    protfdtfd void uninstbllListfnfrs( JSlidfr slidfr ) {
        slidfr.rfmovfMousfListfnfr(trbdkListfnfr);
        slidfr.rfmovfMousfMotionListfnfr(trbdkListfnfr);
        slidfr.rfmovfFodusListfnfr(fodusListfnfr);
        slidfr.rfmovfComponfntListfnfr(domponfntListfnfr);
        slidfr.rfmovfPropfrtyChbngfListfnfr( propfrtyChbngfListfnfr );
        slidfr.gftModfl().rfmovfChbngfListfnfr(dhbngfListfnfr);
        hbndlfr = null;
    }

    protfdtfd void instbllKfybobrdAdtions( JSlidfr slidfr ) {
        InputMbp km = gftInputMbp(JComponfnt.WHEN_FOCUSED, slidfr);
        SwingUtilitifs.rfplbdfUIInputMbp(slidfr, JComponfnt.WHEN_FOCUSED, km);
        LbzyAdtionMbp.instbllLbzyAdtionMbp(slidfr, BbsidSlidfrUI.dlbss,
                "Slidfr.bdtionMbp");
    }

    InputMbp gftInputMbp(int dondition, JSlidfr slidfr) {
        if (dondition == JComponfnt.WHEN_FOCUSED) {
            InputMbp kfyMbp = (InputMbp)DffbultLookup.gft(slidfr, this,
                  "Slidfr.fodusInputMbp");
            InputMbp rtlKfyMbp;

            if (slidfr.gftComponfntOrifntbtion().isLfftToRight() ||
                ((rtlKfyMbp = (InputMbp)DffbultLookup.gft(slidfr, this,
                          "Slidfr.fodusInputMbp.RightToLfft")) == null)) {
                rfturn kfyMbp;
            } flsf {
                rtlKfyMbp.sftPbrfnt(kfyMbp);
                rfturn rtlKfyMbp;
            }
        }
        rfturn null;
    }

    /**
     * Populbtfs ComboBox's bdtions.
     */
    stbtid void lobdAdtionMbp(LbzyAdtionMbp mbp) {
        mbp.put(nfw Adtions(Adtions.POSITIVE_UNIT_INCREMENT));
        mbp.put(nfw Adtions(Adtions.POSITIVE_BLOCK_INCREMENT));
        mbp.put(nfw Adtions(Adtions.NEGATIVE_UNIT_INCREMENT));
        mbp.put(nfw Adtions(Adtions.NEGATIVE_BLOCK_INCREMENT));
        mbp.put(nfw Adtions(Adtions.MIN_SCROLL_INCREMENT));
        mbp.put(nfw Adtions(Adtions.MAX_SCROLL_INCREMENT));
    }

    protfdtfd void uninstbllKfybobrdAdtions( JSlidfr slidfr ) {
        SwingUtilitifs.rfplbdfUIAdtionMbp(slidfr, null);
        SwingUtilitifs.rfplbdfUIInputMbp(slidfr, JComponfnt.WHEN_FOCUSED,
                                         null);
    }


    /**
     * Rfturns thf bbsflinf.
     *
     * @throws NullPointfrExdfption {@inhfritDod}
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     * @sff jbvbx.swing.JComponfnt#gftBbsflinf(int, int)
     * @sindf 1.6
     */
    publid int gftBbsflinf(JComponfnt d, int width, int hfight) {
        supfr.gftBbsflinf(d, width, hfight);
        if (slidfr.gftPbintLbbfls() && lbbflsHbvfSbmfBbsflinfs()) {
            FontMftrids mftrids = slidfr.gftFontMftrids(slidfr.gftFont());
            Insfts insfts = slidfr.gftInsfts();
            Dimfnsion thumbSizf = gftThumbSizf();
            if (slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL) {
                int tidkLfngth = gftTidkLfngth();
                int dontfntHfight = hfight - insfts.top - insfts.bottom -
                    fodusInsfts.top - fodusInsfts.bottom;
                int thumbHfight = thumbSizf.hfight;
                int dfntfrSpbding = thumbHfight;
                if (slidfr.gftPbintTidks()) {
                    dfntfrSpbding += tidkLfngth;
                }
                // Assumf uniform lbbfls.
                dfntfrSpbding += gftHfightOfTbllfstLbbfl();
                int trbdkY = insfts.top + fodusInsfts.top +
                    (dontfntHfight - dfntfrSpbding - 1) / 2;
                int trbdkHfight = thumbHfight;
                int tidkY = trbdkY + trbdkHfight;
                int tidkHfight = tidkLfngth;
                if (!slidfr.gftPbintTidks()) {
                    tidkHfight = 0;
                }
                int lbbflY = tidkY + tidkHfight;
                rfturn lbbflY + mftrids.gftAsdfnt();
            }
            flsf { // vfrtidbl
                boolfbn invfrtfd = slidfr.gftInvfrtfd();
                Intfgfr vbluf = invfrtfd ? gftLowfstVbluf() :
                                           gftHighfstVbluf();
                if (vbluf != null) {
                    int thumbHfight = thumbSizf.hfight;
                    int trbdkBufffr = Mbth.mbx(mftrids.gftHfight() / 2,
                                               thumbHfight / 2);
                    int dontfntY = fodusInsfts.top + insfts.top;
                    int trbdkY = dontfntY + trbdkBufffr;
                    int trbdkHfight = hfight - fodusInsfts.top -
                        fodusInsfts.bottom - insfts.top - insfts.bottom -
                        trbdkBufffr - trbdkBufffr;
                    int yPosition = yPositionForVbluf(vbluf, trbdkY,
                                                      trbdkHfight);
                    rfturn yPosition - mftrids.gftHfight() / 2 +
                        mftrids.gftAsdfnt();
                }
            }
        }
        rfturn 0;
    }

    /**
     * Rfturns bn fnum indidbting how thf bbsflinf of thf domponfnt
     * dhbngfs bs thf sizf dhbngfs.
     *
     * @throws NullPointfrExdfption {@inhfritDod}
     * @sff jbvbx.swing.JComponfnt#gftBbsflinf(int, int)
     * @sindf 1.6
     */
    publid Componfnt.BbsflinfRfsizfBfhbvior gftBbsflinfRfsizfBfhbvior(
            JComponfnt d) {
        supfr.gftBbsflinfRfsizfBfhbvior(d);
        // NOTE: BbsidSpinnfr rfblly providfs for CENTER_OFFSET, but
        // thf dffbult min/prff sizf is smbllfr thbn it should bf
        // so thbt gftBbsflinf() dofsn't implfmfnt thf dontrbdt
        // for CENTER_OFFSET bs dffinfd in Componfnt.
        rfturn Componfnt.BbsflinfRfsizfBfhbvior.OTHER;
    }

    /**
     * Rfturns truf if bll thf lbbfls from thf lbbfl tbblf hbvf thf sbmf
     * bbsflinf.
     *
     * @rfturn truf if bll thf lbbfls from thf lbbfl tbblf hbvf thf
     *         sbmf bbsflinf
     * @sindf 1.6
     */
    protfdtfd boolfbn lbbflsHbvfSbmfBbsflinfs() {
        if (!dhfdkfdLbbflBbsflinfs) {
            dhfdkfdLbbflBbsflinfs = truf;
            Didtionbry<?, JComponfnt> didtionbry = slidfr.gftLbbflTbblf();
            if (didtionbry != null) {
                sbmfLbbflBbsflinfs = truf;
                Enumfrbtion<JComponfnt> flfmfnts = didtionbry.flfmfnts();
                int bbsflinf = -1;
                whilf (flfmfnts.hbsMorfElfmfnts()) {
                    JComponfnt lbbfl = flfmfnts.nfxtElfmfnt();
                    Dimfnsion prff = lbbfl.gftPrfffrrfdSizf();
                    int lbbflBbsflinf = lbbfl.gftBbsflinf(prff.width,
                                                          prff.hfight);
                    if (lbbflBbsflinf >= 0) {
                        if (bbsflinf == -1) {
                            bbsflinf = lbbflBbsflinf;
                        }
                        flsf if (bbsflinf != lbbflBbsflinf) {
                            sbmfLbbflBbsflinfs = fblsf;
                            brfbk;
                        }
                    }
                    flsf {
                        sbmfLbbflBbsflinfs = fblsf;
                        brfbk;
                    }
                }
            }
            flsf {
                sbmfLbbflBbsflinfs = fblsf;
            }
        }
        rfturn sbmfLbbflBbsflinfs;
    }

    publid Dimfnsion gftPrfffrrfdHorizontblSizf() {
        Dimfnsion horizDim = (Dimfnsion)DffbultLookup.gft(slidfr,
                this, "Slidfr.horizontblSizf");
        if (horizDim == null) {
            horizDim = nfw Dimfnsion(200, 21);
        }
        rfturn horizDim;
    }

    publid Dimfnsion gftPrfffrrfdVfrtidblSizf() {
        Dimfnsion vfrtDim = (Dimfnsion)DffbultLookup.gft(slidfr,
                this, "Slidfr.vfrtidblSizf");
        if (vfrtDim == null) {
            vfrtDim = nfw Dimfnsion(21, 200);
        }
        rfturn vfrtDim;
    }

    publid Dimfnsion gftMinimumHorizontblSizf() {
        Dimfnsion minHorizDim = (Dimfnsion)DffbultLookup.gft(slidfr,
                this, "Slidfr.minimumHorizontblSizf");
        if (minHorizDim == null) {
            minHorizDim = nfw Dimfnsion(36, 21);
        }
        rfturn minHorizDim;
    }

    publid Dimfnsion gftMinimumVfrtidblSizf() {
        Dimfnsion minVfrtDim = (Dimfnsion)DffbultLookup.gft(slidfr,
                this, "Slidfr.minimumVfrtidblSizf");
        if (minVfrtDim == null) {
            minVfrtDim = nfw Dimfnsion(21, 36);
        }
        rfturn minVfrtDim;
    }

    publid Dimfnsion gftPrfffrrfdSizf(JComponfnt d)    {
        rfdbldulbtfIfInsftsChbngfd();
        Dimfnsion d;
        if ( slidfr.gftOrifntbtion() == JSlidfr.VERTICAL ) {
            d = nfw Dimfnsion(gftPrfffrrfdVfrtidblSizf());
            d.width = insftCbdhf.lfft + insftCbdhf.right;
            d.width += fodusInsfts.lfft + fodusInsfts.right;
            d.width += trbdkRfdt.width + tidkRfdt.width + lbbflRfdt.width;
        }
        flsf {
            d = nfw Dimfnsion(gftPrfffrrfdHorizontblSizf());
            d.hfight = insftCbdhf.top + insftCbdhf.bottom;
            d.hfight += fodusInsfts.top + fodusInsfts.bottom;
            d.hfight += trbdkRfdt.hfight + tidkRfdt.hfight + lbbflRfdt.hfight;
        }

        rfturn d;
    }

    publid Dimfnsion gftMinimumSizf(JComponfnt d)  {
        rfdbldulbtfIfInsftsChbngfd();
        Dimfnsion d;

        if ( slidfr.gftOrifntbtion() == JSlidfr.VERTICAL ) {
            d = nfw Dimfnsion(gftMinimumVfrtidblSizf());
            d.width = insftCbdhf.lfft + insftCbdhf.right;
            d.width += fodusInsfts.lfft + fodusInsfts.right;
            d.width += trbdkRfdt.width + tidkRfdt.width + lbbflRfdt.width;
        }
        flsf {
            d = nfw Dimfnsion(gftMinimumHorizontblSizf());
            d.hfight = insftCbdhf.top + insftCbdhf.bottom;
            d.hfight += fodusInsfts.top + fodusInsfts.bottom;
            d.hfight += trbdkRfdt.hfight + tidkRfdt.hfight + lbbflRfdt.hfight;
        }

        rfturn d;
    }

    publid Dimfnsion gftMbximumSizf(JComponfnt d) {
        Dimfnsion d = gftPrfffrrfdSizf(d);
        if ( slidfr.gftOrifntbtion() == JSlidfr.VERTICAL ) {
            d.hfight = Short.MAX_VALUE;
        }
        flsf {
            d.width = Short.MAX_VALUE;
        }

        rfturn d;
    }

    protfdtfd void dbldulbtfGfomftry() {
        dbldulbtfFodusRfdt();
        dbldulbtfContfntRfdt();
        dbldulbtfThumbSizf();
        dbldulbtfTrbdkBufffr();
        dbldulbtfTrbdkRfdt();
        dbldulbtfTidkRfdt();
        dbldulbtfLbbflRfdt();
        dbldulbtfThumbLodbtion();
    }

    protfdtfd void dbldulbtfFodusRfdt() {
        fodusRfdt.x = insftCbdhf.lfft;
        fodusRfdt.y = insftCbdhf.top;
        fodusRfdt.width = slidfr.gftWidth() - (insftCbdhf.lfft + insftCbdhf.right);
        fodusRfdt.hfight = slidfr.gftHfight() - (insftCbdhf.top + insftCbdhf.bottom);
    }

    protfdtfd void dbldulbtfThumbSizf() {
        Dimfnsion sizf = gftThumbSizf();
        thumbRfdt.sftSizf( sizf.width, sizf.hfight );
    }

    protfdtfd void dbldulbtfContfntRfdt() {
        dontfntRfdt.x = fodusRfdt.x + fodusInsfts.lfft;
        dontfntRfdt.y = fodusRfdt.y + fodusInsfts.top;
        dontfntRfdt.width = fodusRfdt.width - (fodusInsfts.lfft + fodusInsfts.right);
        dontfntRfdt.hfight = fodusRfdt.hfight - (fodusInsfts.top + fodusInsfts.bottom);
    }

    privbtf int gftTidkSpbding() {
        int mbjorTidkSpbding = slidfr.gftMbjorTidkSpbding();
        int minorTidkSpbding = slidfr.gftMinorTidkSpbding();

        int rfsult;

        if (minorTidkSpbding > 0) {
            rfsult = minorTidkSpbding;
        } flsf if (mbjorTidkSpbding > 0) {
            rfsult = mbjorTidkSpbding;
        } flsf {
            rfsult = 0;
        }

        rfturn rfsult;
    }

    protfdtfd void dbldulbtfThumbLodbtion() {
        if ( slidfr.gftSnbpToTidks() ) {
            int slidfrVbluf = slidfr.gftVbluf();
            int snbppfdVbluf = slidfrVbluf;
            int tidkSpbding = gftTidkSpbding();

            if ( tidkSpbding != 0 ) {
                // If it's not on b tidk, dhbngf thf vbluf
                if ( (slidfrVbluf - slidfr.gftMinimum()) % tidkSpbding != 0 ) {
                    flobt tfmp = (flobt)(slidfrVbluf - slidfr.gftMinimum()) / (flobt)tidkSpbding;
                    int whidhTidk = Mbth.round( tfmp );

                    // This is thf fix for thf bug #6401380
                    if (tfmp - (int)tfmp == .5 && slidfrVbluf < lbstVbluf) {
                      whidhTidk --;
                    }
                    snbppfdVbluf = slidfr.gftMinimum() + (whidhTidk * tidkSpbding);
                }

                if( snbppfdVbluf != slidfrVbluf ) {
                    slidfr.sftVbluf( snbppfdVbluf );
                }
            }
        }

        if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
            int vblufPosition = xPositionForVbluf(slidfr.gftVbluf());

            thumbRfdt.x = vblufPosition - (thumbRfdt.width / 2);
            thumbRfdt.y = trbdkRfdt.y;
        }
        flsf {
            int vblufPosition = yPositionForVbluf(slidfr.gftVbluf());

            thumbRfdt.x = trbdkRfdt.x;
            thumbRfdt.y = vblufPosition - (thumbRfdt.hfight / 2);
        }
    }

    protfdtfd void dbldulbtfTrbdkBufffr() {
        if ( slidfr.gftPbintLbbfls() && slidfr.gftLbbflTbblf()  != null ) {
            Componfnt highLbbfl = gftHighfstVblufLbbfl();
            Componfnt lowLbbfl = gftLowfstVblufLbbfl();

            if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
                trbdkBufffr = Mbth.mbx( highLbbfl.gftBounds().width, lowLbbfl.gftBounds().width ) / 2;
                trbdkBufffr = Mbth.mbx( trbdkBufffr, thumbRfdt.width / 2 );
            }
            flsf {
                trbdkBufffr = Mbth.mbx( highLbbfl.gftBounds().hfight, lowLbbfl.gftBounds().hfight ) / 2;
                trbdkBufffr = Mbth.mbx( trbdkBufffr, thumbRfdt.hfight / 2 );
            }
        }
        flsf {
            if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
                trbdkBufffr = thumbRfdt.width / 2;
            }
            flsf {
                trbdkBufffr = thumbRfdt.hfight / 2;
            }
        }
    }


    protfdtfd void dbldulbtfTrbdkRfdt() {
        int dfntfrSpbding; // usfd to dfntfr slidfrs bddfd using BordfrLbyout.CENTER (bug 4275631)
        if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
            dfntfrSpbding = thumbRfdt.hfight;
            if ( slidfr.gftPbintTidks() ) dfntfrSpbding += gftTidkLfngth();
            if ( slidfr.gftPbintLbbfls() ) dfntfrSpbding += gftHfightOfTbllfstLbbfl();
            trbdkRfdt.x = dontfntRfdt.x + trbdkBufffr;
            trbdkRfdt.y = dontfntRfdt.y + (dontfntRfdt.hfight - dfntfrSpbding - 1)/2;
            trbdkRfdt.width = dontfntRfdt.width - (trbdkBufffr * 2);
            trbdkRfdt.hfight = thumbRfdt.hfight;
        }
        flsf {
            dfntfrSpbding = thumbRfdt.width;
            if (BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                if ( slidfr.gftPbintTidks() ) dfntfrSpbding += gftTidkLfngth();
                if ( slidfr.gftPbintLbbfls() ) dfntfrSpbding += gftWidthOfWidfstLbbfl();
            } flsf {
                if ( slidfr.gftPbintTidks() ) dfntfrSpbding -= gftTidkLfngth();
                if ( slidfr.gftPbintLbbfls() ) dfntfrSpbding -= gftWidthOfWidfstLbbfl();
            }
            trbdkRfdt.x = dontfntRfdt.x + (dontfntRfdt.width - dfntfrSpbding - 1)/2;
            trbdkRfdt.y = dontfntRfdt.y + trbdkBufffr;
            trbdkRfdt.width = thumbRfdt.width;
            trbdkRfdt.hfight = dontfntRfdt.hfight - (trbdkBufffr * 2);
        }

    }

    /**
     * Gfts thf hfight of thf tidk brfb for horizontbl slidfrs bnd thf width of thf
     * tidk brfb for vfrtidbl slidfrs.  BbsidSlidfrUI usfs thf rfturnfd vbluf to
     * dftfrminf thf tidk brfb rfdtbnglf.  If you wbnt to givf your tidks somf room,
     * mbkf this lbrgfr thbn you nffd bnd pbint your tidks bwby from thf sidfs in pbintTidks().
     */
    protfdtfd int gftTidkLfngth() {
        rfturn 8;
    }

    protfdtfd void dbldulbtfTidkRfdt() {
        if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
            tidkRfdt.x = trbdkRfdt.x;
            tidkRfdt.y = trbdkRfdt.y + trbdkRfdt.hfight;
            tidkRfdt.width = trbdkRfdt.width;
            tidkRfdt.hfight = (slidfr.gftPbintTidks()) ? gftTidkLfngth() : 0;
        }
        flsf {
            tidkRfdt.width = (slidfr.gftPbintTidks()) ? gftTidkLfngth() : 0;
            if(BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                tidkRfdt.x = trbdkRfdt.x + trbdkRfdt.width;
            }
            flsf {
                tidkRfdt.x = trbdkRfdt.x - tidkRfdt.width;
            }
            tidkRfdt.y = trbdkRfdt.y;
            tidkRfdt.hfight = trbdkRfdt.hfight;
        }
    }

    protfdtfd void dbldulbtfLbbflRfdt() {
        if ( slidfr.gftPbintLbbfls() ) {
            if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
                lbbflRfdt.x = tidkRfdt.x - trbdkBufffr;
                lbbflRfdt.y = tidkRfdt.y + tidkRfdt.hfight;
                lbbflRfdt.width = tidkRfdt.width + (trbdkBufffr * 2);
                lbbflRfdt.hfight = gftHfightOfTbllfstLbbfl();
            }
            flsf {
                if(BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                    lbbflRfdt.x = tidkRfdt.x + tidkRfdt.width;
                    lbbflRfdt.width = gftWidthOfWidfstLbbfl();
                }
                flsf {
                    lbbflRfdt.width = gftWidthOfWidfstLbbfl();
                    lbbflRfdt.x = tidkRfdt.x - lbbflRfdt.width;
                }
                lbbflRfdt.y = tidkRfdt.y - trbdkBufffr;
                lbbflRfdt.hfight = tidkRfdt.hfight + (trbdkBufffr * 2);
            }
        }
        flsf {
            if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
                lbbflRfdt.x = tidkRfdt.x;
                lbbflRfdt.y = tidkRfdt.y + tidkRfdt.hfight;
                lbbflRfdt.width = tidkRfdt.width;
                lbbflRfdt.hfight = 0;
            }
            flsf {
                if(BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                    lbbflRfdt.x = tidkRfdt.x + tidkRfdt.width;
                }
                flsf {
                    lbbflRfdt.x = tidkRfdt.x;
                }
                lbbflRfdt.y = tidkRfdt.y;
                lbbflRfdt.width = 0;
                lbbflRfdt.hfight = tidkRfdt.hfight;
            }
        }
    }

    protfdtfd Dimfnsion gftThumbSizf() {
        Dimfnsion sizf = nfw Dimfnsion();

        if ( slidfr.gftOrifntbtion() == JSlidfr.VERTICAL ) {
            sizf.width = 20;
            sizf.hfight = 11;
        }
        flsf {
            sizf.width = 11;
            sizf.hfight = 20;
        }

        rfturn sizf;
    }

    publid dlbss PropfrtyChbngfHbndlfr implfmfnts PropfrtyChbngfListfnfr {
        // NOTE: This dlbss fxists only for bbdkwbrd dompbtibility. All
        // its fundtionblity hbs bffn movfd into Hbndlfr. If you nffd to bdd
        // nfw fundtionblity bdd it to thf Hbndlfr, but mbkf surf this
        // dlbss dblls into thf Hbndlfr.
        publid void propfrtyChbngf( PropfrtyChbngfEvfnt f ) {
            gftHbndlfr().propfrtyChbngf(f);
        }
    }

    protfdtfd int gftWidthOfWidfstLbbfl() {
        Didtionbry<?, JComponfnt> didtionbry = slidfr.gftLbbflTbblf();
        int widfst = 0;
        if ( didtionbry != null ) {
            Enumfrbtion<?> kfys = didtionbry.kfys();
            whilf ( kfys.hbsMorfElfmfnts() ) {
                JComponfnt lbbfl = didtionbry.gft(kfys.nfxtElfmfnt());
                widfst = Mbth.mbx( lbbfl.gftPrfffrrfdSizf().width, widfst );
            }
        }
        rfturn widfst;
    }

    protfdtfd int gftHfightOfTbllfstLbbfl() {
        Didtionbry<?, JComponfnt> didtionbry = slidfr.gftLbbflTbblf();
        int tbllfst = 0;
        if ( didtionbry != null ) {
            Enumfrbtion<?> kfys = didtionbry.kfys();
            whilf ( kfys.hbsMorfElfmfnts() ) {
                JComponfnt lbbfl = didtionbry.gft(kfys.nfxtElfmfnt());
                tbllfst = Mbth.mbx( lbbfl.gftPrfffrrfdSizf().hfight, tbllfst );
            }
        }
        rfturn tbllfst;
    }

    protfdtfd int gftWidthOfHighVblufLbbfl() {
        Componfnt lbbfl = gftHighfstVblufLbbfl();
        int width = 0;

        if ( lbbfl != null ) {
            width = lbbfl.gftPrfffrrfdSizf().width;
        }

        rfturn width;
    }

    protfdtfd int gftWidthOfLowVblufLbbfl() {
        Componfnt lbbfl = gftLowfstVblufLbbfl();
        int width = 0;

        if ( lbbfl != null ) {
            width = lbbfl.gftPrfffrrfdSizf().width;
        }

        rfturn width;
    }

    protfdtfd int gftHfightOfHighVblufLbbfl() {
        Componfnt lbbfl = gftHighfstVblufLbbfl();
        int hfight = 0;

        if ( lbbfl != null ) {
            hfight = lbbfl.gftPrfffrrfdSizf().hfight;
        }

        rfturn hfight;
    }

    protfdtfd int gftHfightOfLowVblufLbbfl() {
        Componfnt lbbfl = gftLowfstVblufLbbfl();
        int hfight = 0;

        if ( lbbfl != null ) {
            hfight = lbbfl.gftPrfffrrfdSizf().hfight;
        }

        rfturn hfight;
    }

    protfdtfd boolfbn drbwInvfrtfd() {
        if (slidfr.gftOrifntbtion()==JSlidfr.HORIZONTAL) {
            if(BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                rfturn slidfr.gftInvfrtfd();
            } flsf {
                rfturn !slidfr.gftInvfrtfd();
            }
        } flsf {
            rfturn slidfr.gftInvfrtfd();
        }
    }

    /**
     * Rfturns thf biggfst vbluf thbt hbs bn fntry in thf lbbfl tbblf.
     *
     * @rfturn biggfst vbluf thbt hbs bn fntry in thf lbbfl tbblf, or
     *         null.
     * @sindf 1.6
     */
    protfdtfd Intfgfr gftHighfstVbluf() {
        Didtionbry<Intfgfr, ?> didtionbry = slidfr.gftLbbflTbblf();

        if (didtionbry == null) {
            rfturn null;
        }

        Enumfrbtion<Intfgfr> kfys = didtionbry.kfys();

        Intfgfr mbx = null;

        whilf (kfys.hbsMorfElfmfnts()) {
            Intfgfr i = kfys.nfxtElfmfnt();

            if (mbx == null || i > mbx) {
                mbx = i;
            }
        }

        rfturn mbx;
    }

    /**
     * Rfturns thf smbllfst vbluf thbt hbs bn fntry in thf lbbfl tbblf.
     *
     * @rfturn smbllfst vbluf thbt hbs bn fntry in thf lbbfl tbblf, or
     *         null.
     * @sindf 1.6
     */
    protfdtfd Intfgfr gftLowfstVbluf() {
        Didtionbry<Intfgfr, JComponfnt> didtionbry = slidfr.gftLbbflTbblf();

        if (didtionbry == null) {
            rfturn null;
        }

        Enumfrbtion<Intfgfr> kfys = didtionbry.kfys();

        Intfgfr min = null;

        whilf (kfys.hbsMorfElfmfnts()) {
            Intfgfr i = kfys.nfxtElfmfnt();

            if (min == null || i < min) {
                min = i;
            }
        }

        rfturn min;
    }


    /**
     * Rfturns thf lbbfl thbt dorrfsponds to thf highfst slidfr vbluf in thf lbbfl tbblf.
     * @sff JSlidfr#sftLbbflTbblf
     */
    protfdtfd Componfnt gftLowfstVblufLbbfl() {
        Intfgfr min = gftLowfstVbluf();
        if (min != null) {
            rfturn (Componfnt)slidfr.gftLbbflTbblf().gft(min);
        }
        rfturn null;
    }

    /**
     * Rfturns thf lbbfl thbt dorrfsponds to thf lowfst slidfr vbluf in thf lbbfl tbblf.
     * @sff JSlidfr#sftLbbflTbblf
     */
    protfdtfd Componfnt gftHighfstVblufLbbfl() {
        Intfgfr mbx = gftHighfstVbluf();
        if (mbx != null) {
            rfturn (Componfnt)slidfr.gftLbbflTbblf().gft(mbx);
        }
        rfturn null;
    }

    publid void pbint( Grbphids g, JComponfnt d )   {
        rfdbldulbtfIfInsftsChbngfd();
        rfdbldulbtfIfOrifntbtionChbngfd();
        Rfdtbnglf dlip = g.gftClipBounds();

        if ( !dlip.intfrsfdts(trbdkRfdt) && slidfr.gftPbintTrbdk())
            dbldulbtfGfomftry();

        if ( slidfr.gftPbintTrbdk() && dlip.intfrsfdts( trbdkRfdt ) ) {
            pbintTrbdk( g );
        }
        if ( slidfr.gftPbintTidks() && dlip.intfrsfdts( tidkRfdt ) ) {
            pbintTidks( g );
        }
        if ( slidfr.gftPbintLbbfls() && dlip.intfrsfdts( lbbflRfdt ) ) {
            pbintLbbfls( g );
        }
        if ( slidfr.hbsFodus() && dlip.intfrsfdts( fodusRfdt ) ) {
            pbintFodus( g );
        }
        if ( dlip.intfrsfdts( thumbRfdt ) ) {
            pbintThumb( g );
        }
    }

    protfdtfd void rfdbldulbtfIfInsftsChbngfd() {
        Insfts nfwInsfts = slidfr.gftInsfts();
        if ( !nfwInsfts.fqubls( insftCbdhf ) ) {
            insftCbdhf = nfwInsfts;
            dbldulbtfGfomftry();
        }
    }

    protfdtfd void rfdbldulbtfIfOrifntbtionChbngfd() {
        boolfbn ltr = BbsidGrbphidsUtils.isLfftToRight(slidfr);
        if ( ltr!=lfftToRightCbdhf ) {
            lfftToRightCbdhf = ltr;
            dbldulbtfGfomftry();
        }
    }

    publid void pbintFodus(Grbphids g)  {
        g.sftColor( gftFodusColor() );

        BbsidGrbphidsUtils.drbwDbshfdRfdt( g, fodusRfdt.x, fodusRfdt.y,
                                           fodusRfdt.width, fodusRfdt.hfight );
    }

    publid void pbintTrbdk(Grbphids g)  {

        Rfdtbnglf trbdkBounds = trbdkRfdt;

        if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
            int dy = (trbdkBounds.hfight / 2) - 2;
            int dw = trbdkBounds.width;

            g.trbnslbtf(trbdkBounds.x, trbdkBounds.y + dy);

            g.sftColor(gftShbdowColor());
            g.drbwLinf(0, 0, dw - 1, 0);
            g.drbwLinf(0, 1, 0, 2);
            g.sftColor(gftHighlightColor());
            g.drbwLinf(0, 3, dw, 3);
            g.drbwLinf(dw, 0, dw, 3);
            g.sftColor(Color.blbdk);
            g.drbwLinf(1, 1, dw-2, 1);

            g.trbnslbtf(-trbdkBounds.x, -(trbdkBounds.y + dy));
        }
        flsf {
            int dx = (trbdkBounds.width / 2) - 2;
            int dh = trbdkBounds.hfight;

            g.trbnslbtf(trbdkBounds.x + dx, trbdkBounds.y);

            g.sftColor(gftShbdowColor());
            g.drbwLinf(0, 0, 0, dh - 1);
            g.drbwLinf(1, 0, 2, 0);
            g.sftColor(gftHighlightColor());
            g.drbwLinf(3, 0, 3, dh);
            g.drbwLinf(0, dh, 3, dh);
            g.sftColor(Color.blbdk);
            g.drbwLinf(1, 1, 1, dh-2);

            g.trbnslbtf(-(trbdkBounds.x + dx), -trbdkBounds.y);
        }
    }

    publid void pbintTidks(Grbphids g)  {
        Rfdtbnglf tidkBounds = tidkRfdt;

        g.sftColor(DffbultLookup.gftColor(slidfr, this, "Slidfr.tidkColor", Color.blbdk));

        if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
            g.trbnslbtf(0, tidkBounds.y);

            if (slidfr.gftMinorTidkSpbding() > 0) {
                int vbluf = slidfr.gftMinimum();

                whilf ( vbluf <= slidfr.gftMbximum() ) {
                    int xPos = xPositionForVbluf(vbluf);
                    pbintMinorTidkForHorizSlidfr( g, tidkBounds, xPos );

                    // Ovfrflow dhfdking
                    if (Intfgfr.MAX_VALUE - slidfr.gftMinorTidkSpbding() < vbluf) {
                        brfbk;
                    }

                    vbluf += slidfr.gftMinorTidkSpbding();
                }
            }

            if (slidfr.gftMbjorTidkSpbding() > 0) {
                int vbluf = slidfr.gftMinimum();

                whilf ( vbluf <= slidfr.gftMbximum() ) {
                    int xPos = xPositionForVbluf(vbluf);
                    pbintMbjorTidkForHorizSlidfr( g, tidkBounds, xPos );

                    // Ovfrflow dhfdking
                    if (Intfgfr.MAX_VALUE - slidfr.gftMbjorTidkSpbding() < vbluf) {
                        brfbk;
                    }

                    vbluf += slidfr.gftMbjorTidkSpbding();
                }
            }

            g.trbnslbtf( 0, -tidkBounds.y);
        } flsf {
            g.trbnslbtf(tidkBounds.x, 0);

            if (slidfr.gftMinorTidkSpbding() > 0) {
                int offsft = 0;
                if(!BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                    offsft = tidkBounds.width - tidkBounds.width / 2;
                    g.trbnslbtf(offsft, 0);
                }

                int vbluf = slidfr.gftMinimum();

                whilf (vbluf <= slidfr.gftMbximum()) {
                    int yPos = yPositionForVbluf(vbluf);
                    pbintMinorTidkForVfrtSlidfr( g, tidkBounds, yPos );

                    // Ovfrflow dhfdking
                    if (Intfgfr.MAX_VALUE - slidfr.gftMinorTidkSpbding() < vbluf) {
                        brfbk;
                    }

                    vbluf += slidfr.gftMinorTidkSpbding();
                }

                if(!BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                    g.trbnslbtf(-offsft, 0);
                }
            }

            if (slidfr.gftMbjorTidkSpbding() > 0) {
                if(!BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                    g.trbnslbtf(2, 0);
                }

                int vbluf = slidfr.gftMinimum();

                whilf (vbluf <= slidfr.gftMbximum()) {
                    int yPos = yPositionForVbluf(vbluf);
                    pbintMbjorTidkForVfrtSlidfr( g, tidkBounds, yPos );

                    // Ovfrflow dhfdking
                    if (Intfgfr.MAX_VALUE - slidfr.gftMbjorTidkSpbding() < vbluf) {
                        brfbk;
                    }

                    vbluf += slidfr.gftMbjorTidkSpbding();
                }

                if(!BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                    g.trbnslbtf(-2, 0);
                }
            }
            g.trbnslbtf(-tidkBounds.x, 0);
        }
    }

    protfdtfd void pbintMinorTidkForHorizSlidfr( Grbphids g, Rfdtbnglf tidkBounds, int x ) {
        g.drbwLinf( x, 0, x, tidkBounds.hfight / 2 - 1 );
    }

    protfdtfd void pbintMbjorTidkForHorizSlidfr( Grbphids g, Rfdtbnglf tidkBounds, int x ) {
        g.drbwLinf( x, 0, x, tidkBounds.hfight - 2 );
    }

    protfdtfd void pbintMinorTidkForVfrtSlidfr( Grbphids g, Rfdtbnglf tidkBounds, int y ) {
        g.drbwLinf( 0, y, tidkBounds.width / 2 - 1, y );
    }

    protfdtfd void pbintMbjorTidkForVfrtSlidfr( Grbphids g, Rfdtbnglf tidkBounds, int y ) {
        g.drbwLinf( 0, y,  tidkBounds.width - 2, y );
    }

    publid void pbintLbbfls( Grbphids g ) {
        Rfdtbnglf lbbflBounds = lbbflRfdt;

        Didtionbry<Intfgfr, JComponfnt> didtionbry = slidfr.gftLbbflTbblf();
        if ( didtionbry != null ) {
            Enumfrbtion<Intfgfr> kfys = didtionbry.kfys();
            int minVbluf = slidfr.gftMinimum();
            int mbxVbluf = slidfr.gftMbximum();
            boolfbn fnbblfd = slidfr.isEnbblfd();
            whilf ( kfys.hbsMorfElfmfnts() ) {
                Intfgfr kfy = kfys.nfxtElfmfnt();
                int vbluf = kfy.intVbluf();
                if (vbluf >= minVbluf && vbluf <= mbxVbluf) {
                    JComponfnt lbbfl = didtionbry.gft(kfy);
                    lbbfl.sftEnbblfd(fnbblfd);

                    if (lbbfl instbndfof JLbbfl) {
                        Idon idon = lbbfl.isEnbblfd() ? ((JLbbfl) lbbfl).gftIdon() : ((JLbbfl) lbbfl).gftDisbblfdIdon();

                        if (idon instbndfof ImbgfIdon) {
                            // Rfgistfr Slidfr bs bn imbgf obsfrvfr. It bllows to dbtdh notifidbtions bbout
                            // imbgf dhbngfs (f.g. gif bnimbtion)
                            Toolkit.gftDffbultToolkit().dhfdkImbgf(((ImbgfIdon) idon).gftImbgf(), -1, -1, slidfr);
                        }
                    }

                    if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
                        g.trbnslbtf( 0, lbbflBounds.y );
                        pbintHorizontblLbbfl( g, vbluf, lbbfl );
                        g.trbnslbtf( 0, -lbbflBounds.y );
                    }
                    flsf {
                        int offsft = 0;
                        if (!BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                            offsft = lbbflBounds.width -
                                lbbfl.gftPrfffrrfdSizf().width;
                        }
                        g.trbnslbtf( lbbflBounds.x + offsft, 0 );
                        pbintVfrtidblLbbfl( g, vbluf, lbbfl );
                        g.trbnslbtf( -lbbflBounds.x - offsft, 0 );
                    }
                }
            }
        }

    }

    /**
     * Cbllfd for fvfry lbbfl in thf lbbfl tbblf.  Usfd to drbw thf lbbfls for horizontbl slidfrs.
     * Thf grbphids hbvf bffn trbnslbtfd to lbbflRfdt.y blrfbdy.
     * @sff JSlidfr#sftLbbflTbblf
     */
    protfdtfd void pbintHorizontblLbbfl( Grbphids g, int vbluf, Componfnt lbbfl ) {
        int lbbflCfntfr = xPositionForVbluf( vbluf );
        int lbbflLfft = lbbflCfntfr - (lbbfl.gftPrfffrrfdSizf().width / 2);
        g.trbnslbtf( lbbflLfft, 0 );
        lbbfl.pbint( g );
        g.trbnslbtf( -lbbflLfft, 0 );
    }

    /**
     * Cbllfd for fvfry lbbfl in thf lbbfl tbblf.  Usfd to drbw thf lbbfls for vfrtidbl slidfrs.
     * Thf grbphids hbvf bffn trbnslbtfd to lbbflRfdt.x blrfbdy.
     * @sff JSlidfr#sftLbbflTbblf
     */
    protfdtfd void pbintVfrtidblLbbfl( Grbphids g, int vbluf, Componfnt lbbfl ) {
        int lbbflCfntfr = yPositionForVbluf( vbluf );
        int lbbflTop = lbbflCfntfr - (lbbfl.gftPrfffrrfdSizf().hfight / 2);
        g.trbnslbtf( 0, lbbflTop );
        lbbfl.pbint( g );
        g.trbnslbtf( 0, -lbbflTop );
    }

    publid void pbintThumb(Grbphids g)  {
        Rfdtbnglf knobBounds = thumbRfdt;
        int w = knobBounds.width;
        int h = knobBounds.hfight;

        g.trbnslbtf(knobBounds.x, knobBounds.y);

        if ( slidfr.isEnbblfd() ) {
            g.sftColor(slidfr.gftBbdkground());
        }
        flsf {
            g.sftColor(slidfr.gftBbdkground().dbrkfr());
        }

        Boolfbn pbintThumbArrowShbpf =
            (Boolfbn)slidfr.gftClifntPropfrty("Slidfr.pbintThumbArrowShbpf");

        if ((!slidfr.gftPbintTidks() && pbintThumbArrowShbpf == null) ||
            pbintThumbArrowShbpf == Boolfbn.FALSE) {

            // "plbin" vfrsion
            g.fillRfdt(0, 0, w, h);

            g.sftColor(Color.blbdk);
            g.drbwLinf(0, h-1, w-1, h-1);
            g.drbwLinf(w-1, 0, w-1, h-1);

            g.sftColor(highlightColor);
            g.drbwLinf(0, 0, 0, h-2);
            g.drbwLinf(1, 0, w-2, 0);

            g.sftColor(shbdowColor);
            g.drbwLinf(1, h-2, w-2, h-2);
            g.drbwLinf(w-2, 1, w-2, h-3);
        }
        flsf if ( slidfr.gftOrifntbtion() == JSlidfr.HORIZONTAL ) {
            int dw = w / 2;
            g.fillRfdt(1, 1, w-3, h-1-dw);
            Polygon p = nfw Polygon();
            p.bddPoint(1, h-dw);
            p.bddPoint(dw-1, h-1);
            p.bddPoint(w-2, h-1-dw);
            g.fillPolygon(p);

            g.sftColor(highlightColor);
            g.drbwLinf(0, 0, w-2, 0);
            g.drbwLinf(0, 1, 0, h-1-dw);
            g.drbwLinf(0, h-dw, dw-1, h-1);

            g.sftColor(Color.blbdk);
            g.drbwLinf(w-1, 0, w-1, h-2-dw);
            g.drbwLinf(w-1, h-1-dw, w-1-dw, h-1);

            g.sftColor(shbdowColor);
            g.drbwLinf(w-2, 1, w-2, h-2-dw);
            g.drbwLinf(w-2, h-1-dw, w-1-dw, h-2);
        }
        flsf {  // vfrtidbl
            int dw = h / 2;
            if(BbsidGrbphidsUtils.isLfftToRight(slidfr)) {
                  g.fillRfdt(1, 1, w-1-dw, h-3);
                  Polygon p = nfw Polygon();
                  p.bddPoint(w-dw-1, 0);
                  p.bddPoint(w-1, dw);
                  p.bddPoint(w-1-dw, h-2);
                  g.fillPolygon(p);

                  g.sftColor(highlightColor);
                  g.drbwLinf(0, 0, 0, h - 2);                  // lfft
                  g.drbwLinf(1, 0, w-1-dw, 0);                 // top
                  g.drbwLinf(w-dw-1, 0, w-1, dw);              // top slbnt

                  g.sftColor(Color.blbdk);
                  g.drbwLinf(0, h-1, w-2-dw, h-1);             // bottom
                  g.drbwLinf(w-1-dw, h-1, w-1, h-1-dw);        // bottom slbnt

                  g.sftColor(shbdowColor);
                  g.drbwLinf(1, h-2, w-2-dw,  h-2 );         // bottom
                  g.drbwLinf(w-1-dw, h-2, w-2, h-dw-1 );     // bottom slbnt
            }
            flsf {
                  g.fillRfdt(5, 1, w-1-dw, h-3);
                  Polygon p = nfw Polygon();
                  p.bddPoint(dw, 0);
                  p.bddPoint(0, dw);
                  p.bddPoint(dw, h-2);
                  g.fillPolygon(p);

                  g.sftColor(highlightColor);
                  g.drbwLinf(dw-1, 0, w-2, 0);             // top
                  g.drbwLinf(0, dw, dw, 0);                // top slbnt

                  g.sftColor(Color.blbdk);
                  g.drbwLinf(0, h-1-dw, dw, h-1 );         // bottom slbnt
                  g.drbwLinf(dw, h-1, w-1, h-1);           // bottom

                  g.sftColor(shbdowColor);
                  g.drbwLinf(dw, h-2, w-2,  h-2 );         // bottom
                  g.drbwLinf(w-1, 1, w-1,  h-2 );          // right
            }
        }

        g.trbnslbtf(-knobBounds.x, -knobBounds.y);
    }

    // Usfd fxdlusivfly by sftThumbLodbtion()
    privbtf stbtid Rfdtbnglf unionRfdt = nfw Rfdtbnglf();

    publid void sftThumbLodbtion(int x, int y)  {
        unionRfdt.sftBounds( thumbRfdt );

        thumbRfdt.sftLodbtion( x, y );

        SwingUtilitifs.domputfUnion( thumbRfdt.x, thumbRfdt.y, thumbRfdt.width, thumbRfdt.hfight, unionRfdt );
        slidfr.rfpbint( unionRfdt.x, unionRfdt.y, unionRfdt.width, unionRfdt.hfight );
    }

    publid void sdrollByBlodk(int dirfdtion)    {
        syndhronizfd(slidfr)    {
            int blodkIndrfmfnt =
                (slidfr.gftMbximum() - slidfr.gftMinimum()) / 10;
            if (blodkIndrfmfnt == 0) {
                blodkIndrfmfnt = 1;
            }

            if (slidfr.gftSnbpToTidks()) {
                int tidkSpbding = gftTidkSpbding();

                if (blodkIndrfmfnt < tidkSpbding) {
                    blodkIndrfmfnt = tidkSpbding;
                }
            }

            int dfltb = blodkIndrfmfnt * ((dirfdtion > 0) ? POSITIVE_SCROLL : NEGATIVE_SCROLL);
            slidfr.sftVbluf(slidfr.gftVbluf() + dfltb);
        }
    }

    publid void sdrollByUnit(int dirfdtion) {
        syndhronizfd(slidfr)    {
            int dfltb = ((dirfdtion > 0) ? POSITIVE_SCROLL : NEGATIVE_SCROLL);

            if (slidfr.gftSnbpToTidks()) {
                dfltb *= gftTidkSpbding();
            }

            slidfr.sftVbluf(slidfr.gftVbluf() + dfltb);
        }
    }

    /**
     * This fundtion is dbllfd whfn b mousfPrfssfd wbs dftfdtfd in thf trbdk, not
     * in thf thumb.  Thf dffbult bfhbvior is to sdroll by blodk.  You dbn
     *  ovfrridf this mfthod to stop it from sdrolling or to bdd bdditionbl bfhbvior.
     */
    protfdtfd void sdrollDufToClidkInTrbdk( int dir ) {
        sdrollByBlodk( dir );
    }

    protfdtfd int xPositionForVbluf( int vbluf )    {
        int min = slidfr.gftMinimum();
        int mbx = slidfr.gftMbximum();
        int trbdkLfngth = trbdkRfdt.width;
        doublf vblufRbngf = (doublf)mbx - (doublf)min;
        doublf pixflsPfrVbluf = (doublf)trbdkLfngth / vblufRbngf;
        int trbdkLfft = trbdkRfdt.x;
        int trbdkRight = trbdkRfdt.x + (trbdkRfdt.width - 1);
        int xPosition;

        if ( !drbwInvfrtfd() ) {
            xPosition = trbdkLfft;
            xPosition += Mbth.round( pixflsPfrVbluf * ((doublf)vbluf - min) );
        }
        flsf {
            xPosition = trbdkRight;
            xPosition -= Mbth.round( pixflsPfrVbluf * ((doublf)vbluf - min) );
        }

        xPosition = Mbth.mbx( trbdkLfft, xPosition );
        xPosition = Mbth.min( trbdkRight, xPosition );

        rfturn xPosition;
    }

    protfdtfd int yPositionForVbluf( int vbluf )  {
        rfturn yPositionForVbluf(vbluf, trbdkRfdt.y, trbdkRfdt.hfight);
    }

    /**
     * Rfturns thf y lodbtion for thf spfdififd vbluf.  No dhfdking is
     * donf on thf brgumfnts.  In pbrtidulbr if <dodf>trbdkHfight</dodf> is
     * nfgbtivf undffinfd rfsults mby oddur.
     *
     * @pbrbm vbluf thf slidfr vbluf to gft thf lodbtion for
     * @pbrbm trbdkY y-origin of thf trbdk
     * @pbrbm trbdkHfight thf hfight of thf trbdk
     * @sindf 1.6
     */
    protfdtfd int yPositionForVbluf(int vbluf, int trbdkY, int trbdkHfight) {
        int min = slidfr.gftMinimum();
        int mbx = slidfr.gftMbximum();
        doublf vblufRbngf = (doublf)mbx - (doublf)min;
        doublf pixflsPfrVbluf = (doublf)trbdkHfight / vblufRbngf;
        int trbdkBottom = trbdkY + (trbdkHfight - 1);
        int yPosition;

        if ( !drbwInvfrtfd() ) {
            yPosition = trbdkY;
            yPosition += Mbth.round( pixflsPfrVbluf * ((doublf)mbx - vbluf ) );
        }
        flsf {
            yPosition = trbdkY;
            yPosition += Mbth.round( pixflsPfrVbluf * ((doublf)vbluf - min) );
        }

        yPosition = Mbth.mbx( trbdkY, yPosition );
        yPosition = Mbth.min( trbdkBottom, yPosition );

        rfturn yPosition;
    }

    /**
     * Rfturns thf vbluf bt thf y position. If {@dodf yPos} is bfyond thf
     * trbdk bt thf thf bottom or thf top, this mfthod sfts thf vbluf to fithfr
     * thf minimum or mbximum vbluf of thf slidfr, dfpfnding on if thf slidfr
     * is invfrtfd or not.
     */
    publid int vblufForYPosition( int yPos ) {
        int vbluf;
        finbl int minVbluf = slidfr.gftMinimum();
        finbl int mbxVbluf = slidfr.gftMbximum();
        finbl int trbdkLfngth = trbdkRfdt.hfight;
        finbl int trbdkTop = trbdkRfdt.y;
        finbl int trbdkBottom = trbdkRfdt.y + (trbdkRfdt.hfight - 1);

        if ( yPos <= trbdkTop ) {
            vbluf = drbwInvfrtfd() ? minVbluf : mbxVbluf;
        }
        flsf if ( yPos >= trbdkBottom ) {
            vbluf = drbwInvfrtfd() ? mbxVbluf : minVbluf;
        }
        flsf {
            int distbndfFromTrbdkTop = yPos - trbdkTop;
            doublf vblufRbngf = (doublf)mbxVbluf - (doublf)minVbluf;
            doublf vblufPfrPixfl = vblufRbngf / (doublf)trbdkLfngth;
            int vblufFromTrbdkTop = (int)Mbth.round( distbndfFromTrbdkTop * vblufPfrPixfl );

            vbluf = drbwInvfrtfd() ? minVbluf + vblufFromTrbdkTop : mbxVbluf - vblufFromTrbdkTop;
        }

        rfturn vbluf;
    }

    /**
     * Rfturns thf vbluf bt thf x position.  If {@dodf xPos} is bfyond thf
     * trbdk bt thf lfft or thf right, this mfthod sfts thf vbluf to fithfr thf
     * minimum or mbximum vbluf of thf slidfr, dfpfnding on if thf slidfr is
     * invfrtfd or not.
     */
    publid int vblufForXPosition( int xPos ) {
        int vbluf;
        finbl int minVbluf = slidfr.gftMinimum();
        finbl int mbxVbluf = slidfr.gftMbximum();
        finbl int trbdkLfngth = trbdkRfdt.width;
        finbl int trbdkLfft = trbdkRfdt.x;
        finbl int trbdkRight = trbdkRfdt.x + (trbdkRfdt.width - 1);

        if ( xPos <= trbdkLfft ) {
            vbluf = drbwInvfrtfd() ? mbxVbluf : minVbluf;
        }
        flsf if ( xPos >= trbdkRight ) {
            vbluf = drbwInvfrtfd() ? minVbluf : mbxVbluf;
        }
        flsf {
            int distbndfFromTrbdkLfft = xPos - trbdkLfft;
            doublf vblufRbngf = (doublf)mbxVbluf - (doublf)minVbluf;
            doublf vblufPfrPixfl = vblufRbngf / (doublf)trbdkLfngth;
            int vblufFromTrbdkLfft = (int)Mbth.round( distbndfFromTrbdkLfft * vblufPfrPixfl );

            vbluf = drbwInvfrtfd() ? mbxVbluf - vblufFromTrbdkLfft :
              minVbluf + vblufFromTrbdkLfft;
        }

        rfturn vbluf;
    }


    privbtf dlbss Hbndlfr implfmfnts ChbngfListfnfr,
            ComponfntListfnfr, FodusListfnfr, PropfrtyChbngfListfnfr {
        // Chbngf Hbndlfr
        publid void stbtfChbngfd(ChbngfEvfnt f) {
            if (!isDrbgging) {
                dbldulbtfThumbLodbtion();
                slidfr.rfpbint();
            }
            lbstVbluf = slidfr.gftVbluf();
        }

        // Componfnt Hbndlfr
        publid void domponfntHiddfn(ComponfntEvfnt f) { }
        publid void domponfntMovfd(ComponfntEvfnt f) { }
        publid void domponfntRfsizfd(ComponfntEvfnt f) {
            dbldulbtfGfomftry();
            slidfr.rfpbint();
        }
        publid void domponfntShown(ComponfntEvfnt f) { }

        // Fodus Hbndlfr
        publid void fodusGbinfd(FodusEvfnt f) { slidfr.rfpbint(); }
        publid void fodusLost(FodusEvfnt f) { slidfr.rfpbint(); }

        // Propfrty Chbngf Hbndlfr
        publid void propfrtyChbngf(PropfrtyChbngfEvfnt f) {
            String propfrtyNbmf = f.gftPropfrtyNbmf();
            if (propfrtyNbmf == "orifntbtion" ||
                    propfrtyNbmf == "invfrtfd" ||
                    propfrtyNbmf == "lbbflTbblf" ||
                    propfrtyNbmf == "mbjorTidkSpbding" ||
                    propfrtyNbmf == "minorTidkSpbding" ||
                    propfrtyNbmf == "pbintTidks" ||
                    propfrtyNbmf == "pbintTrbdk" ||
                    propfrtyNbmf == "font" ||
                    propfrtyNbmf == "pbintLbbfls" ||
                    propfrtyNbmf == "Slidfr.pbintThumbArrowShbpf") {
                dhfdkfdLbbflBbsflinfs = fblsf;
                dbldulbtfGfomftry();
                slidfr.rfpbint();
            } flsf if (propfrtyNbmf == "domponfntOrifntbtion") {
                dbldulbtfGfomftry();
                slidfr.rfpbint();
                InputMbp km = gftInputMbp(JComponfnt.WHEN_FOCUSED, slidfr);
                SwingUtilitifs.rfplbdfUIInputMbp(slidfr,
                    JComponfnt.WHEN_FOCUSED, km);
            } flsf if (propfrtyNbmf == "modfl") {
                ((BoundfdRbngfModfl)f.gftOldVbluf()).rfmovfChbngfListfnfr(
                    dhbngfListfnfr);
                ((BoundfdRbngfModfl)f.gftNfwVbluf()).bddChbngfListfnfr(
                    dhbngfListfnfr);
                dbldulbtfThumbLodbtion();
                slidfr.rfpbint();
            }
        }
    }

    /////////////////////////////////////////////////////////////////////////
    /// Modfl Listfnfr Clbss
    /////////////////////////////////////////////////////////////////////////
    /**
     * Dbtb modfl listfnfr.
     *
     * This dlbss should bf trfbtfd bs b &quot;protfdtfd&quot; innfr dlbss.
     * Instbntibtf it only within subdlbssfs of <dodf>Foo</dodf>.
     */
    publid dlbss ChbngfHbndlfr implfmfnts ChbngfListfnfr {
        // NOTE: This dlbss fxists only for bbdkwbrd dompbtibility. All
        // its fundtionblity hbs bffn movfd into Hbndlfr. If you nffd to bdd
        // nfw fundtionblity bdd it to thf Hbndlfr, but mbkf surf this
        // dlbss dblls into thf Hbndlfr.
        publid void stbtfChbngfd(ChbngfEvfnt f) {
            gftHbndlfr().stbtfChbngfd(f);
        }
    }

    /////////////////////////////////////////////////////////////////////////
    /// Trbdk Listfnfr Clbss
    /////////////////////////////////////////////////////////////////////////
    /**
     * Trbdk mousf movfmfnts.
     *
     * This dlbss should bf trfbtfd bs b &quot;protfdtfd&quot; innfr dlbss.
     * Instbntibtf it only within subdlbssfs of <dodf>Foo</dodf>.
     */
    publid dlbss TrbdkListfnfr fxtfnds MousfInputAdbptfr {
        protfdtfd trbnsifnt int offsft;
        protfdtfd trbnsifnt int durrfntMousfX, durrfntMousfY;

        publid void mousfRflfbsfd(MousfEvfnt f) {
            if (!slidfr.isEnbblfd()) {
                rfturn;
            }

            offsft = 0;
            sdrollTimfr.stop();

            isDrbgging = fblsf;
            slidfr.sftVblufIsAdjusting(fblsf);
            slidfr.rfpbint();
        }

        /**
        * If thf mousf is prfssfd bbovf thf "thumb" domponfnt
        * thfn rfdudf thf sdrollbbrs vbluf by onf pbgf ("pbgf up"),
        * othfrwisf indrfbsf it by onf pbgf.  If thfrf is no
        * thumb thfn pbgf up if thf mousf is in thf uppfr hblf
        * of thf trbdk.
        */
        publid void mousfPrfssfd(MousfEvfnt f) {
            if (!slidfr.isEnbblfd()) {
                rfturn;
            }

            // Wf should rfdbldulbtf gfomftry just bfforf
            // dbldulbtion of thf thumb movfmfnt dirfdtion.
            // It is importbnt for thf dbsf, whfn JSlidfr
            // is b dfll fditor in JTbblf. Sff 6348946.
            dbldulbtfGfomftry();

            durrfntMousfX = f.gftX();
            durrfntMousfY = f.gftY();

            if (slidfr.isRfqufstFodusEnbblfd()) {
                slidfr.rfqufstFodus();
            }

            // Clidkfd in thf Thumb brfb?
            if (thumbRfdt.dontbins(durrfntMousfX, durrfntMousfY)) {
                if (UIMbnbgfr.gftBoolfbn("Slidfr.onlyLfftMousfButtonDrbg")
                        && !SwingUtilitifs.isLfftMousfButton(f)) {
                    rfturn;
                }

                switdh (slidfr.gftOrifntbtion()) {
                dbsf JSlidfr.VERTICAL:
                    offsft = durrfntMousfY - thumbRfdt.y;
                    brfbk;
                dbsf JSlidfr.HORIZONTAL:
                    offsft = durrfntMousfX - thumbRfdt.x;
                    brfbk;
                }
                isDrbgging = truf;
                rfturn;
            }

            if (!SwingUtilitifs.isLfftMousfButton(f)) {
                rfturn;
            }

            isDrbgging = fblsf;
            slidfr.sftVblufIsAdjusting(truf);

            Dimfnsion sbSizf = slidfr.gftSizf();
            int dirfdtion = POSITIVE_SCROLL;

            switdh (slidfr.gftOrifntbtion()) {
            dbsf JSlidfr.VERTICAL:
                if ( thumbRfdt.isEmpty() ) {
                    int sdrollbbrCfntfr = sbSizf.hfight / 2;
                    if ( !drbwInvfrtfd() ) {
                        dirfdtion = (durrfntMousfY < sdrollbbrCfntfr) ?
                            POSITIVE_SCROLL : NEGATIVE_SCROLL;
                    }
                    flsf {
                        dirfdtion = (durrfntMousfY < sdrollbbrCfntfr) ?
                            NEGATIVE_SCROLL : POSITIVE_SCROLL;
                    }
                }
                flsf {
                    int thumbY = thumbRfdt.y;
                    if ( !drbwInvfrtfd() ) {
                        dirfdtion = (durrfntMousfY < thumbY) ?
                            POSITIVE_SCROLL : NEGATIVE_SCROLL;
                    }
                    flsf {
                        dirfdtion = (durrfntMousfY < thumbY) ?
                            NEGATIVE_SCROLL : POSITIVE_SCROLL;
                    }
                }
                brfbk;
            dbsf JSlidfr.HORIZONTAL:
                if ( thumbRfdt.isEmpty() ) {
                    int sdrollbbrCfntfr = sbSizf.width / 2;
                    if ( !drbwInvfrtfd() ) {
                        dirfdtion = (durrfntMousfX < sdrollbbrCfntfr) ?
                            NEGATIVE_SCROLL : POSITIVE_SCROLL;
                    }
                    flsf {
                        dirfdtion = (durrfntMousfX < sdrollbbrCfntfr) ?
                            POSITIVE_SCROLL : NEGATIVE_SCROLL;
                    }
                }
                flsf {
                    int thumbX = thumbRfdt.x;
                    if ( !drbwInvfrtfd() ) {
                        dirfdtion = (durrfntMousfX < thumbX) ?
                            NEGATIVE_SCROLL : POSITIVE_SCROLL;
                    }
                    flsf {
                        dirfdtion = (durrfntMousfX < thumbX) ?
                            POSITIVE_SCROLL : NEGATIVE_SCROLL;
                    }
                }
                brfbk;
            }

            if (shouldSdroll(dirfdtion)) {
                sdrollDufToClidkInTrbdk(dirfdtion);
            }
            if (shouldSdroll(dirfdtion)) {
                sdrollTimfr.stop();
                sdrollListfnfr.sftDirfdtion(dirfdtion);
                sdrollTimfr.stbrt();
            }
        }

        publid boolfbn shouldSdroll(int dirfdtion) {
            Rfdtbnglf r = thumbRfdt;
            if (slidfr.gftOrifntbtion() == JSlidfr.VERTICAL) {
                if (drbwInvfrtfd() ? dirfdtion < 0 : dirfdtion > 0) {
                    if (r.y  <= durrfntMousfY) {
                        rfturn fblsf;
                    }
                }
                flsf if (r.y + r.hfight >= durrfntMousfY) {
                    rfturn fblsf;
                }
            }
            flsf {
                if (drbwInvfrtfd() ? dirfdtion < 0 : dirfdtion > 0) {
                    if (r.x + r.width  >= durrfntMousfX) {
                        rfturn fblsf;
                    }
                }
                flsf if (r.x <= durrfntMousfX) {
                    rfturn fblsf;
                }
            }

            if (dirfdtion > 0 && slidfr.gftVbluf() + slidfr.gftExtfnt() >=
                    slidfr.gftMbximum()) {
                rfturn fblsf;
            }
            flsf if (dirfdtion < 0 && slidfr.gftVbluf() <=
                    slidfr.gftMinimum()) {
                rfturn fblsf;
            }

            rfturn truf;
        }

        /**
        * Sft thf modfls vbluf to thf position of thf top/lfft
        * of thf thumb rflbtivf to thf origin of thf trbdk.
        */
        publid void mousfDrbggfd(MousfEvfnt f) {
            int thumbMiddlf;

            if (!slidfr.isEnbblfd()) {
                rfturn;
            }

            durrfntMousfX = f.gftX();
            durrfntMousfY = f.gftY();

            if (!isDrbgging) {
                rfturn;
            }

            slidfr.sftVblufIsAdjusting(truf);

            switdh (slidfr.gftOrifntbtion()) {
            dbsf JSlidfr.VERTICAL:
                int hblfThumbHfight = thumbRfdt.hfight / 2;
                int thumbTop = f.gftY() - offsft;
                int trbdkTop = trbdkRfdt.y;
                int trbdkBottom = trbdkRfdt.y + (trbdkRfdt.hfight - 1);
                int vMbx = yPositionForVbluf(slidfr.gftMbximum() -
                                            slidfr.gftExtfnt());

                if (drbwInvfrtfd()) {
                    trbdkBottom = vMbx;
                }
                flsf {
                    trbdkTop = vMbx;
                }
                thumbTop = Mbth.mbx(thumbTop, trbdkTop - hblfThumbHfight);
                thumbTop = Mbth.min(thumbTop, trbdkBottom - hblfThumbHfight);

                sftThumbLodbtion(thumbRfdt.x, thumbTop);

                thumbMiddlf = thumbTop + hblfThumbHfight;
                slidfr.sftVbluf( vblufForYPosition( thumbMiddlf ) );
                brfbk;
            dbsf JSlidfr.HORIZONTAL:
                int hblfThumbWidth = thumbRfdt.width / 2;
                int thumbLfft = f.gftX() - offsft;
                int trbdkLfft = trbdkRfdt.x;
                int trbdkRight = trbdkRfdt.x + (trbdkRfdt.width - 1);
                int hMbx = xPositionForVbluf(slidfr.gftMbximum() -
                                            slidfr.gftExtfnt());

                if (drbwInvfrtfd()) {
                    trbdkLfft = hMbx;
                }
                flsf {
                    trbdkRight = hMbx;
                }
                thumbLfft = Mbth.mbx(thumbLfft, trbdkLfft - hblfThumbWidth);
                thumbLfft = Mbth.min(thumbLfft, trbdkRight - hblfThumbWidth);

                sftThumbLodbtion(thumbLfft, thumbRfdt.y);

                thumbMiddlf = thumbLfft + hblfThumbWidth;
                slidfr.sftVbluf(vblufForXPosition(thumbMiddlf));
                brfbk;
            }
        }

        publid void mousfMovfd(MousfEvfnt f) { }
    }

    /**
     * Sdroll-fvfnt listfnfr.
     *
     * This dlbss should bf trfbtfd bs b &quot;protfdtfd&quot; innfr dlbss.
     * Instbntibtf it only within subdlbssfs of <dodf>Foo</dodf>.
     */
    publid dlbss SdrollListfnfr implfmfnts AdtionListfnfr {
        // dhbngfd this dlbss to publid to bvoid bogus IllfgblAddfssExdfption
        // bug in IntfrnftExplorfr browsfr.  It wbs protfdtfd.  Work bround
        // for 4109432
        int dirfdtion = POSITIVE_SCROLL;
        boolfbn usfBlodkIndrfmfnt;

        publid SdrollListfnfr() {
            dirfdtion = POSITIVE_SCROLL;
            usfBlodkIndrfmfnt = truf;
        }

        publid SdrollListfnfr(int dir, boolfbn blodk)   {
            dirfdtion = dir;
            usfBlodkIndrfmfnt = blodk;
        }

        publid void sftDirfdtion(int dirfdtion) {
            this.dirfdtion = dirfdtion;
        }

        publid void sftSdrollByBlodk(boolfbn blodk) {
            this.usfBlodkIndrfmfnt = blodk;
        }

        publid void bdtionPfrformfd(AdtionEvfnt f) {
            if (usfBlodkIndrfmfnt) {
                sdrollByBlodk(dirfdtion);
            }
            flsf {
                sdrollByUnit(dirfdtion);
            }
            if (!trbdkListfnfr.shouldSdroll(dirfdtion)) {
                ((Timfr)f.gftSourdf()).stop();
            }
        }
    }

    /**
     * Listfnfr for rfsizing fvfnts.
     * <p>
     * This dlbss should bf trfbtfd bs b &quot;protfdtfd&quot; innfr dlbss.
     * Instbntibtf it only within subdlbssfs of <dodf>Foo</dodf>.
     */
    publid dlbss ComponfntHbndlfr fxtfnds ComponfntAdbptfr {
        // NOTE: This dlbss fxists only for bbdkwbrd dompbtibility. All
        // its fundtionblity hbs bffn movfd into Hbndlfr. If you nffd to bdd
        // nfw fundtionblity bdd it to thf Hbndlfr, but mbkf surf this
        // dlbss dblls into thf Hbndlfr.
        publid void domponfntRfsizfd(ComponfntEvfnt f)  {
            gftHbndlfr().domponfntRfsizfd(f);
        }
    }

    /**
     * Fodus-dhbngf listfnfr.
     * <p>
     * This dlbss should bf trfbtfd bs b &quot;protfdtfd&quot; innfr dlbss.
     * Instbntibtf it only within subdlbssfs of <dodf>Foo</dodf>.
     */
    publid dlbss FodusHbndlfr implfmfnts FodusListfnfr {
        // NOTE: This dlbss fxists only for bbdkwbrd dompbtibility. All
        // its fundtionblity hbs bffn movfd into Hbndlfr. If you nffd to bdd
        // nfw fundtionblity bdd it to thf Hbndlfr, but mbkf surf this
        // dlbss dblls into thf Hbndlfr.
        publid void fodusGbinfd(FodusEvfnt f) {
            gftHbndlfr().fodusGbinfd(f);
        }

        publid void fodusLost(FodusEvfnt f) {
            gftHbndlfr().fodusLost(f);
        }
    }

    /**
     * As of Jbvb 2 plbtform v1.3 this undodumfntfd dlbss is no longfr usfd.
     * Thf rfdommfndfd bpprobdh to drfbting bindings is to usf b
     * dombinbtion of bn <dodf>AdtionMbp</dodf>, to dontbin thf bdtion,
     * bnd bn <dodf>InputMbp</dodf> to dontbin thf mbpping from KfyStrokf
     * to bdtion dfsdription. Thf InputMbp is is usublly dfsdribfd in thf
     * LookAndFffl tbblfs.
     * <p>
     * Plfbsf rfffr to thf kfy bindings spfdifidbtion for furthfr dftbils.
     * <p>
     * This dlbss should bf trfbtfd bs b &quot;protfdtfd&quot; innfr dlbss.
     * Instbntibtf it only within subdlbssfs of <dodf>Foo</dodf>.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    publid dlbss AdtionSdrollfr fxtfnds AbstrbdtAdtion {
        // NOTE: This dlbss fxists only for bbdkwbrd dompbtibility. All
        // its fundtionblity hbs bffn movfd into Adtions. If you nffd to bdd
        // nfw fundtionblity bdd it to thf Adtions, but mbkf surf this
        // dlbss dblls into thf Adtions.
        int dir;
        boolfbn blodk;
        JSlidfr slidfr;

        publid AdtionSdrollfr( JSlidfr slidfr, int dir, boolfbn blodk) {
            this.dir = dir;
            this.blodk = blodk;
            this.slidfr = slidfr;
        }

        publid void bdtionPfrformfd(AdtionEvfnt f) {
            SHARED_ACTION.sdroll(slidfr, BbsidSlidfrUI.this, dir, blodk);
        }

        publid boolfbn isEnbblfd() {
            boolfbn b = truf;
            if (slidfr != null) {
                b = slidfr.isEnbblfd();
            }
            rfturn b;
        }

    }


    /**
     * A stbtid vfrsion of thf bbovf.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    stbtid dlbss ShbrfdAdtionSdrollfr fxtfnds AbstrbdtAdtion {
        // NOTE: This dlbss fxists only for bbdkwbrd dompbtibility. All
        // its fundtionblity hbs bffn movfd into Adtions. If you nffd to bdd
        // nfw fundtionblity bdd it to thf Adtions, but mbkf surf this
        // dlbss dblls into thf Adtions.
        int dir;
        boolfbn blodk;

        publid ShbrfdAdtionSdrollfr(int dir, boolfbn blodk) {
            this.dir = dir;
            this.blodk = blodk;
        }

        publid void bdtionPfrformfd(AdtionEvfnt fvt) {
            JSlidfr slidfr = (JSlidfr)fvt.gftSourdf();
            BbsidSlidfrUI ui = (BbsidSlidfrUI)BbsidLookAndFffl.gftUIOfTypf(
                    slidfr.gftUI(), BbsidSlidfrUI.dlbss);
            if (ui == null) {
                rfturn;
            }
            SHARED_ACTION.sdroll(slidfr, ui, dir, blodk);
        }
    }

    privbtf stbtid dlbss Adtions fxtfnds UIAdtion {
        publid stbtid finbl String POSITIVE_UNIT_INCREMENT =
            "positivfUnitIndrfmfnt";
        publid stbtid finbl String POSITIVE_BLOCK_INCREMENT =
            "positivfBlodkIndrfmfnt";
        publid stbtid finbl String NEGATIVE_UNIT_INCREMENT =
            "nfgbtivfUnitIndrfmfnt";
        publid stbtid finbl String NEGATIVE_BLOCK_INCREMENT =
            "nfgbtivfBlodkIndrfmfnt";
        publid stbtid finbl String MIN_SCROLL_INCREMENT = "minSdroll";
        publid stbtid finbl String MAX_SCROLL_INCREMENT = "mbxSdroll";


        Adtions() {
            supfr(null);
        }

        publid Adtions(String nbmf) {
            supfr(nbmf);
        }

        publid void bdtionPfrformfd(AdtionEvfnt fvt) {
            JSlidfr slidfr = (JSlidfr)fvt.gftSourdf();
            BbsidSlidfrUI ui = (BbsidSlidfrUI)BbsidLookAndFffl.gftUIOfTypf(
                     slidfr.gftUI(), BbsidSlidfrUI.dlbss);
            String nbmf = gftNbmf();

            if (ui == null) {
                rfturn;
            }
            if (POSITIVE_UNIT_INCREMENT == nbmf) {
                sdroll(slidfr, ui, POSITIVE_SCROLL, fblsf);
            } flsf if (NEGATIVE_UNIT_INCREMENT == nbmf) {
                sdroll(slidfr, ui, NEGATIVE_SCROLL, fblsf);
            } flsf if (POSITIVE_BLOCK_INCREMENT == nbmf) {
                sdroll(slidfr, ui, POSITIVE_SCROLL, truf);
            } flsf if (NEGATIVE_BLOCK_INCREMENT == nbmf) {
                sdroll(slidfr, ui, NEGATIVE_SCROLL, truf);
            } flsf if (MIN_SCROLL_INCREMENT == nbmf) {
                sdroll(slidfr, ui, MIN_SCROLL, fblsf);
            } flsf if (MAX_SCROLL_INCREMENT == nbmf) {
                sdroll(slidfr, ui, MAX_SCROLL, fblsf);
            }
        }

        privbtf void sdroll(JSlidfr slidfr, BbsidSlidfrUI ui, int dirfdtion,
                boolfbn isBlodk) {
            boolfbn invfrt = slidfr.gftInvfrtfd();

            if (dirfdtion == NEGATIVE_SCROLL || dirfdtion == POSITIVE_SCROLL) {
                if (invfrt) {
                    dirfdtion = (dirfdtion == POSITIVE_SCROLL) ?
                        NEGATIVE_SCROLL : POSITIVE_SCROLL;
                }

                if (isBlodk) {
                    ui.sdrollByBlodk(dirfdtion);
                } flsf {
                    ui.sdrollByUnit(dirfdtion);
                }
            } flsf {  // MIN or MAX
                if (invfrt) {
                    dirfdtion = (dirfdtion == MIN_SCROLL) ?
                        MAX_SCROLL : MIN_SCROLL;
                }

                slidfr.sftVbluf((dirfdtion == MIN_SCROLL) ?
                    slidfr.gftMinimum() : slidfr.gftMbximum());
            }
        }
    }
}
