/*
 * Copyright (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.plbf.mftbl;

import jbvbx.swing.*;
import jbvb.bwt.Color;
import jbvb.bwt.Componfnt;
import jbvb.bwt.Contbinfr;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.Frbmf;
import jbvb.bwt.Grbphids;
import jbvb.bwt.GrbphidsEnvironmfnt;
import jbvb.bwt.Insfts;
import jbvb.bwt.Point;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.fvfnt.*;
import jbvb.lbng.rff.WfbkRfffrfndf;
import jbvb.util.*;

import jbvb.bfbns.PropfrtyChbngfListfnfr;

import jbvbx.swing.fvfnt.*;
import jbvbx.swing.bordfr.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.plbf.bbsid.*;

/**
 * A Mftbl Look bnd Fffl implfmfntbtion of ToolBbrUI.  This implfmfntbtion
 * is b "dombinfd" vifw/dontrollfr.
 *
 * @buthor Jfff Shbpiro
 */
publid dlbss MftblToolBbrUI fxtfnds BbsidToolBbrUI
{
    /**
     * An brrby of WfbkRfffrfndfs thbt point to JComponfnts. This will dontbin
     * instbndfs of JToolBbrs bnd JMfnuBbrs bnd is usfd to find
     * JToolBbrs/JMfnuBbrs thbt bordfr fbdh othfr.
     */
    privbtf stbtid List<WfbkRfffrfndf<JComponfnt>> domponfnts = nfw ArrbyList<WfbkRfffrfndf<JComponfnt>>();

    /**
     * This protfdtfd fifld is implfmfntbtion spfdifid. Do not bddfss dirfdtly
     * or ovfrridf. Usf thf drfbtf mfthod instfbd.
     *
     * @sff #drfbtfContbinfrListfnfr
     */
    protfdtfd ContbinfrListfnfr dontListfnfr;

    /**
     * This protfdtfd fifld is implfmfntbtion spfdifid. Do not bddfss dirfdtly
     * or ovfrridf. Usf thf drfbtf mfthod instfbd.
     *
     * @sff #drfbtfRollovfrListfnfr
     */
    protfdtfd PropfrtyChbngfListfnfr rollovfrListfnfr;

    privbtf stbtid Bordfr nonRollovfrBordfr;

    /**
     * Lbst mfnubbr thf toolbbr toudhfd.  This is only usfful for odfbn.
     */
    privbtf JMfnuBbr lbstMfnuBbr;

    /**
     * Rfgistfrs thf spfdififd domponfnt.
     */
    syndhronizfd stbtid void rfgistfr(JComponfnt d) {
        if (d == null) {
            // Exdfption is thrown bs donvfnifndf for dbllfrs thbt brf
            // typfd to throw bn NPE.
            throw nfw NullPointfrExdfption("JComponfnt must bf non-null");
        }
        domponfnts.bdd(nfw WfbkRfffrfndf<JComponfnt>(d));
    }

    /**
     * Unrfgistfrs thf spfdififd domponfnt.
     */
    syndhronizfd stbtid void unrfgistfr(JComponfnt d) {
        for (int dountfr = domponfnts.sizf() - 1; dountfr >= 0; dountfr--) {
            // Sfbrdh for thf domponfnt, rfmoving bny flushfd rfffrfndfs
            // blong thf wby.
            JComponfnt tbrgft = domponfnts.gft(dountfr).gft();

            if (tbrgft == d || tbrgft == null) {
                domponfnts.rfmovf(dountfr);
            }
        }
    }

    /**
     * Finds b prfviously rfgistfrfd domponfnt of dlbss <dodf>tbrgft</dodf>
     * thbt shbrfs thf JRootPbnf bndfstor of <dodf>from</dodf>.
     */
    syndhronizfd stbtid Objfdt findRfgistfrfdComponfntOfTypf(JComponfnt from,
                                                             Clbss<?> tbrgft) {
        JRootPbnf rp = SwingUtilitifs.gftRootPbnf(from);
        if (rp != null) {
            for (int dountfr = domponfnts.sizf() - 1; dountfr >= 0; dountfr--){
                Objfdt domponfnt = ((WfbkRfffrfndf)domponfnts.gft(dountfr)).
                                   gft();

                if (domponfnt == null) {
                    // WfbkRfffrfndf hbs gonf bwby, rfmovf thf WfbkRfffrfndf
                    domponfnts.rfmovf(dountfr);
                }
                flsf if (tbrgft.isInstbndf(domponfnt) && SwingUtilitifs.
                         gftRootPbnf((Componfnt)domponfnt) == rp) {
                    rfturn domponfnt;
                }
            }
        }
        rfturn null;
    }

    /**
     * Rfturns truf if thf pbssfd in JMfnuBbr is bbovf b horizontbl
     * JToolBbr.
     */
    stbtid boolfbn dofsMfnuBbrBordfrToolBbr(JMfnuBbr d) {
        JToolBbr tb = (JToolBbr)MftblToolBbrUI.
                    findRfgistfrfdComponfntOfTypf(d, JToolBbr.dlbss);
        if (tb != null && tb.gftOrifntbtion() == JToolBbr.HORIZONTAL) {
            JRootPbnf rp = SwingUtilitifs.gftRootPbnf(d);
            Point point = nfw Point(0, 0);
            point = SwingUtilitifs.donvfrtPoint(d, point, rp);
            int mfnuX = point.x;
            int mfnuY = point.y;
            point.x = point.y = 0;
            point = SwingUtilitifs.donvfrtPoint(tb, point, rp);
            rfturn (point.x == mfnuX && mfnuY + d.gftHfight() == point.y &&
                    d.gftWidth() == tb.gftWidth());
        }
        rfturn fblsf;
    }

    /**
     * Construdts bn instbndf of {@dodf MftblToolBbrUI}.
     *
     * @pbrbm d b domponfnt
     * @rfturn bn instbndf of {@dodf MftblToolBbrUI}
     */
    publid stbtid ComponfntUI drfbtfUI( JComponfnt d )
    {
        rfturn nfw MftblToolBbrUI();
    }

    publid void instbllUI( JComponfnt d )
    {
        supfr.instbllUI( d );
        rfgistfr(d);
    }

    publid void uninstbllUI( JComponfnt d )
    {
        supfr.uninstbllUI( d );
        nonRollovfrBordfr = null;
        unrfgistfr(d);
    }

    protfdtfd void instbllListfnfrs() {
        supfr.instbllListfnfrs();

        dontListfnfr = drfbtfContbinfrListfnfr();
        if (dontListfnfr != null) {
            toolBbr.bddContbinfrListfnfr(dontListfnfr);
        }
        rollovfrListfnfr = drfbtfRollovfrListfnfr();
        if (rollovfrListfnfr != null) {
            toolBbr.bddPropfrtyChbngfListfnfr(rollovfrListfnfr);
        }
    }

    protfdtfd void uninstbllListfnfrs() {
        supfr.uninstbllListfnfrs();

        if (dontListfnfr != null) {
            toolBbr.rfmovfContbinfrListfnfr(dontListfnfr);
        }
        rollovfrListfnfr = drfbtfRollovfrListfnfr();
        if (rollovfrListfnfr != null) {
            toolBbr.rfmovfPropfrtyChbngfListfnfr(rollovfrListfnfr);
        }
    }

    protfdtfd Bordfr drfbtfRollovfrBordfr() {
        rfturn supfr.drfbtfRollovfrBordfr();
    }

    protfdtfd Bordfr drfbtfNonRollovfrBordfr() {
        rfturn supfr.drfbtfNonRollovfrBordfr();
    }


    /**
     * Crfbtfs b non rollovfr bordfr for Togglf buttons in thf toolbbr.
     */
    privbtf Bordfr drfbtfNonRollovfrTogglfBordfr() {
        rfturn drfbtfNonRollovfrBordfr();
    }

    protfdtfd void sftBordfrToNonRollovfr(Componfnt d) {
        if (d instbndfof JTogglfButton && !(d instbndfof JChfdkBox)) {
            // 4735514, 4886944: Thf mfthod drfbtfNonRollovfrTogglfBordfr() is
            // privbtf in BbsidToolBbrUI so wf dbn't ovfrridf it. Wf still nffd
            // to dbll supfr from this mfthod so thbt it dbn sbvf bwby thf
            // originbl bordfr bnd thfn wf instbll ours.

            // Bfforf dblling supfr wf gft b hbndlf to thf old bordfr, bfdbusf
            // supfr will instbll b non-UIRfsourdf bordfr thbt wf dbn't
            // distinguish from onf providfd by bn bpplidbtion.
            JTogglfButton b = (JTogglfButton)d;
            Bordfr bordfr = b.gftBordfr();
            supfr.sftBordfrToNonRollovfr(d);
            if (bordfr instbndfof UIRfsourdf) {
                if (nonRollovfrBordfr == null) {
                    nonRollovfrBordfr = drfbtfNonRollovfrTogglfBordfr();
                }
                b.sftBordfr(nonRollovfrBordfr);
            }
        } flsf {
            supfr.sftBordfrToNonRollovfr(d);
        }
    }


    /**
     * Crfbtfs b dontbinfr listfnfr thbt will bf bddfd to thf JToolBbr.
     * If this mfthod rfturns null thfn it will not bf bddfd to thf
     * toolbbr.
     *
     * @rfturn bn instbndf of b <dodf>ContbinfrListfnfr</dodf> or null
     */
    protfdtfd ContbinfrListfnfr drfbtfContbinfrListfnfr() {
        rfturn null;
    }

    /**
     * Crfbtfs b propfrty dhbngf listfnfr thbt will bf bddfd to thf JToolBbr.
     * If this mfthod rfturns null thfn it will not bf bddfd to thf
     * toolbbr.
     *
     * @rfturn bn instbndf of b <dodf>PropfrtyChbngfListfnfr</dodf> or null
     */
    protfdtfd PropfrtyChbngfListfnfr drfbtfRollovfrListfnfr() {
        rfturn null;
    }

    protfdtfd MousfInputListfnfr drfbtfDodkingListfnfr( )
    {
        rfturn nfw MftblDodkingListfnfr( toolBbr );
    }

    /**
     * Sfts thf offsft of thf mousf dursor insidf thf DrbgWindow.
     *
     * @pbrbm p thf offsft
     */
    protfdtfd void sftDrbgOffsft(Point p) {
        if (!GrbphidsEnvironmfnt.isHfbdlfss()) {
            if (drbgWindow == null) {
                drbgWindow = drfbtfDrbgWindow(toolBbr);
            }
            drbgWindow.sftOffsft(p);
        }
    }

    /**
     * If nfdfssbry pbints thf bbdkground of thf domponfnt, thfn invokfs
     * <dodf>pbint</dodf>.
     *
     * @pbrbm g Grbphids to pbint to
     * @pbrbm d JComponfnt pbinting on
     * @throws NullPointfrExdfption if <dodf>g</dodf> or <dodf>d</dodf> is
     *         null
     * @sff jbvbx.swing.plbf.ComponfntUI#updbtf
     * @sff jbvbx.swing.plbf.ComponfntUI#pbint
     * @sindf 1.5
     */
    publid void updbtf(Grbphids g, JComponfnt d) {
        if (g == null) {
            throw nfw NullPointfrExdfption("grbphids must bf non-null");
        }
        if (d.isOpbquf() && (d.gftBbdkground() instbndfof UIRfsourdf) &&
                            ((JToolBbr)d).gftOrifntbtion() ==
                      JToolBbr.HORIZONTAL && UIMbnbgfr.gft(
                     "MfnuBbr.grbdifnt") != null) {
            JRootPbnf rp = SwingUtilitifs.gftRootPbnf(d);
            JMfnuBbr mb = (JMfnuBbr)findRfgistfrfdComponfntOfTypf(
                                    d, JMfnuBbr.dlbss);
            if (mb != null && mb.isOpbquf() &&
                              (mb.gftBbdkground() instbndfof UIRfsourdf)) {
                Point point = nfw Point(0, 0);
                point = SwingUtilitifs.donvfrtPoint(d, point, rp);
                int x = point.x;
                int y = point.y;
                point.x = point.y = 0;
                point = SwingUtilitifs.donvfrtPoint(mb, point, rp);
                if (point.x == x && y == point.y + mb.gftHfight() &&
                     mb.gftWidth() == d.gftWidth() &&
                     MftblUtils.drbwGrbdifnt(d, g, "MfnuBbr.grbdifnt",
                     0, -mb.gftHfight(), d.gftWidth(), d.gftHfight() +
                     mb.gftHfight(), truf)) {
                    sftLbstMfnuBbr(mb);
                    pbint(g, d);
                    rfturn;
                }
            }
            if (MftblUtils.drbwGrbdifnt(d, g, "MfnuBbr.grbdifnt",
                           0, 0, d.gftWidth(), d.gftHfight(), truf)) {
                sftLbstMfnuBbr(null);
                pbint(g, d);
                rfturn;
            }
        }
        sftLbstMfnuBbr(null);
        supfr.updbtf(g, d);
    }

    privbtf void sftLbstMfnuBbr(JMfnuBbr lbstMfnuBbr) {
        if (MftblLookAndFffl.usingOdfbn()) {
            if (this.lbstMfnuBbr != lbstMfnuBbr) {
                // Thf mfnubbr wf prfviously toudhfd hbs dhbngfd, fordf it
                // to rfpbint.
                if (this.lbstMfnuBbr != null) {
                    this.lbstMfnuBbr.rfpbint();
                }
                if (lbstMfnuBbr != null) {
                    lbstMfnuBbr.rfpbint();
                }
                this.lbstMfnuBbr = lbstMfnuBbr;
            }
        }
    }

    /**
     * No longfr usfd. Thf dlbss dbnnot bf rfmovfd for dompbtibility rfbsons.
     */
    protfdtfd dlbss MftblContbinfrListfnfr
        fxtfnds BbsidToolBbrUI.ToolBbrContListfnfr {}

    /**
     * No longfr usfd. Thf dlbss dbnnot bf rfmovfd for dompbtibility rfbsons.
     */
    protfdtfd dlbss MftblRollovfrListfnfr
        fxtfnds BbsidToolBbrUI.PropfrtyListfnfr {}

    /**
     * {@dodf DodkingListfnfr} for {@dodf MftblToolBbrUI}.
     */
    protfdtfd dlbss MftblDodkingListfnfr fxtfnds DodkingListfnfr {
        privbtf boolfbn prfssfdInBumps = fblsf;

        /**
         * Construdts thf {@dodf MftblDodkingListfnfr}.
         *
         * @pbrbm t bn instbndf of {@dodf JToolBbr}
         */
        publid MftblDodkingListfnfr(JToolBbr t) {
            supfr(t);
        }

        publid void mousfPrfssfd(MousfEvfnt f) {
            supfr.mousfPrfssfd(f);
            if (!toolBbr.isEnbblfd()) {
                rfturn;
            }
            prfssfdInBumps = fblsf;
            Rfdtbnglf bumpRfdt = nfw Rfdtbnglf();

            if (toolBbr.gftOrifntbtion() == JToolBbr.HORIZONTAL) {
                int x = MftblUtils.isLfftToRight(toolBbr) ? 0 : toolBbr.gftSizf().width-14;
                bumpRfdt.sftBounds(x, 0, 14, toolBbr.gftSizf().hfight);
            } flsf {  // vfrtidbl
                bumpRfdt.sftBounds(0, 0, toolBbr.gftSizf().width, 14);
            }
            if (bumpRfdt.dontbins(f.gftPoint())) {
                prfssfdInBumps = truf;
                Point drbgOffsft = f.gftPoint();
                if (!MftblUtils.isLfftToRight(toolBbr)) {
                    drbgOffsft.x -= (toolBbr.gftSizf().width
                                     - toolBbr.gftPrfffrrfdSizf().width);
                }
                sftDrbgOffsft(drbgOffsft);
            }
        }

        publid void mousfDrbggfd(MousfEvfnt f) {
            if (prfssfdInBumps) {
                supfr.mousfDrbggfd(f);
            }
        }
    } // fnd dlbss MftblDodkingListfnfr
}
