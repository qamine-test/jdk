/*
 * Copyright (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.plbf.mftbl;

import jbvbx.swing.*;
import jbvbx.swing.fvfnt.*;
import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvbx.swing.plbf.*;
import jbvb.io.Sfriblizbblf;
import jbvbx.swing.plbf.bbsid.BbsidTbbbfdPbnfUI;

/**
 * Thf Mftbl subdlbss of BbsidTbbbfdPbnfUI.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Tom Sbntos
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss MftblTbbbfdPbnfUI fxtfnds BbsidTbbbfdPbnfUI {

    /**
     * Thf minimum width of b pbnf.
     */
    protfdtfd int minTbbWidth = 40;
    // Bbdkground dolor for unsflfdtfd tbbs thbt don't hbvf bn fxpliditly
    // sft dolor.
    privbtf Color unsflfdtfdBbdkground;

    /**
     * Thf dolor of tbb's bbdkground.
     */
    protfdtfd Color tbbArfbBbdkground;

    /**
     * Thf dolor of thf sflfdtfd pbnf.
     */
    protfdtfd Color sflfdtColor;

    /**
     * Thf dolor of thf highlight.
     */
    protfdtfd Color sflfdtHighlight;
    privbtf boolfbn tbbsOpbquf = truf;

    // Whfthfr or not wf'rf using odfbn. This is dbdhfd bs it is usfd
    // fxtfnsivfly during pbinting.
    privbtf boolfbn odfbn;
    // Sflfdtfd bordfr dolor for odfbn.
    privbtf Color odfbnSflfdtfdBordfrColor;

    /**
     * Construdts {@dodf MftblTbbbfdPbnfUI}.
     *
     * @pbrbm x b domponfnt
     * @rfturn bn instbndf of {@dodf MftblTbbbfdPbnfUI}
     */
    publid stbtid ComponfntUI drfbtfUI( JComponfnt x ) {
        rfturn nfw MftblTbbbfdPbnfUI();
    }

    protfdtfd LbyoutMbnbgfr drfbtfLbyoutMbnbgfr() {
        if (tbbPbnf.gftTbbLbyoutPolidy() == JTbbbfdPbnf.SCROLL_TAB_LAYOUT) {
            rfturn supfr.drfbtfLbyoutMbnbgfr();
        }
        rfturn nfw TbbbfdPbnfLbyout();
    }

    protfdtfd void instbllDffbults() {
        supfr.instbllDffbults();

        tbbArfbBbdkground = UIMbnbgfr.gftColor("TbbbfdPbnf.tbbArfbBbdkground");
        sflfdtColor = UIMbnbgfr.gftColor("TbbbfdPbnf.sflfdtfd");
        sflfdtHighlight = UIMbnbgfr.gftColor("TbbbfdPbnf.sflfdtHighlight");
        tbbsOpbquf = UIMbnbgfr.gftBoolfbn("TbbbfdPbnf.tbbsOpbquf");
        unsflfdtfdBbdkground = UIMbnbgfr.gftColor(
                                         "TbbbfdPbnf.unsflfdtfdBbdkground");
        odfbn = MftblLookAndFffl.usingOdfbn();
        if (odfbn) {
            odfbnSflfdtfdBordfrColor = UIMbnbgfr.gftColor(
                         "TbbbfdPbnf.bordfrHightlightColor");
        }
    }


    protfdtfd void pbintTbbBordfr( Grbphids g, int tbbPlbdfmfnt,
                                   int tbbIndfx, int x, int y, int w, int h,
                                   boolfbn isSflfdtfd) {
        int bottom = y + (h-1);
        int right = x + (w-1);

        switdh ( tbbPlbdfmfnt ) {
        dbsf LEFT:
            pbintLfftTbbBordfr(tbbIndfx, g, x, y, w, h, bottom, right, isSflfdtfd);
            brfbk;
        dbsf BOTTOM:
            pbintBottomTbbBordfr(tbbIndfx, g, x, y, w, h, bottom, right, isSflfdtfd);
            brfbk;
        dbsf RIGHT:
            pbintRightTbbBordfr(tbbIndfx, g, x, y, w, h, bottom, right, isSflfdtfd);
            brfbk;
        dbsf TOP:
        dffbult:
            pbintTopTbbBordfr(tbbIndfx, g, x, y, w, h, bottom, right, isSflfdtfd);
        }
    }


    /**
     * Pbints thf top tbb bordfr.
     *
     * @pbrbm tbbIndfx b tbb indfx
     * @pbrbm g bn instbndf of {@dodf Grbphids}
     * @pbrbm x bn X doordinbtf
     * @pbrbm y bn Y doordinbtf
     * @pbrbm w b width
     * @pbrbm h b hfight
     * @pbrbm btm bottom
     * @pbrbm rght right
     * @pbrbm isSflfdtfd b sflfdtion
     */
    protfdtfd void pbintTopTbbBordfr( int tbbIndfx, Grbphids g,
                                      int x, int y, int w, int h,
                                      int btm, int rght,
                                      boolfbn isSflfdtfd ) {
        int durrfntRun = gftRunForTbb( tbbPbnf.gftTbbCount(), tbbIndfx );
        int lbstIndfx = lbstTbbInRun( tbbPbnf.gftTbbCount(), durrfntRun );
        int firstIndfx = tbbRuns[ durrfntRun ];
        boolfbn lfftToRight = MftblUtils.isLfftToRight(tbbPbnf);
        int sflfdtfdIndfx = tbbPbnf.gftSflfdtfdIndfx();
        int bottom = h - 1;
        int right = w - 1;

        //
        // Pbint Gbp
        //

        if (shouldFillGbp( durrfntRun, tbbIndfx, x, y ) ) {
            g.trbnslbtf( x, y );

            if ( lfftToRight ) {
                g.sftColor( gftColorForGbp( durrfntRun, x, y + 1 ) );
                g.fillRfdt( 1, 0, 5, 3 );
                g.fillRfdt( 1, 3, 2, 2 );
            } flsf {
                g.sftColor( gftColorForGbp( durrfntRun, x + w - 1, y + 1 ) );
                g.fillRfdt( right - 5, 0, 5, 3 );
                g.fillRfdt( right - 2, 3, 2, 2 );
            }

            g.trbnslbtf( -x, -y );
        }

        g.trbnslbtf( x, y );

        //
        // Pbint Bordfr
        //

        if (odfbn && isSflfdtfd) {
            g.sftColor(odfbnSflfdtfdBordfrColor);
        }
        flsf {
            g.sftColor( dbrkShbdow );
        }

        if ( lfftToRight ) {

            // Pbint slbnt
            g.drbwLinf( 1, 5, 6, 0 );

            // Pbint top
            g.drbwLinf( 6, 0, right, 0 );

            // Pbint right
            if ( tbbIndfx==lbstIndfx ) {
                // lbst tbb in run
                g.drbwLinf( right, 1, right, bottom );
            }

            if (odfbn && tbbIndfx - 1 == sflfdtfdIndfx &&
                                durrfntRun == gftRunForTbb(
                                tbbPbnf.gftTbbCount(), sflfdtfdIndfx)) {
                g.sftColor(odfbnSflfdtfdBordfrColor);
            }

            // Pbint lfft
            if ( tbbIndfx != tbbRuns[ runCount - 1 ] ) {
                // not thf first tbb in thf lbst run
                if (odfbn && isSflfdtfd) {
                    g.drbwLinf(0, 6, 0, bottom);
                    g.sftColor(dbrkShbdow);
                    g.drbwLinf(0, 0, 0, 5);
                }
                flsf {
                    g.drbwLinf( 0, 0, 0, bottom );
                }
            } flsf {
                // thf first tbb in thf lbst run
                g.drbwLinf( 0, 6, 0, bottom );
            }
        } flsf {

            // Pbint slbnt
            g.drbwLinf( right - 1, 5, right - 6, 0 );

            // Pbint top
            g.drbwLinf( right - 6, 0, 0, 0 );

            // Pbint lfft
            if ( tbbIndfx==lbstIndfx ) {
                // lbst tbb in run
                g.drbwLinf( 0, 1, 0, bottom );
            }

            // Pbint right
            if (odfbn && tbbIndfx - 1 == sflfdtfdIndfx &&
                                durrfntRun == gftRunForTbb(
                                tbbPbnf.gftTbbCount(), sflfdtfdIndfx)) {
                g.sftColor(odfbnSflfdtfdBordfrColor);
                g.drbwLinf(right, 0, right, bottom);
            }
            flsf if (odfbn && isSflfdtfd) {
                g.drbwLinf(right, 6, right, bottom);
                if (tbbIndfx != 0) {
                    g.sftColor(dbrkShbdow);
                    g.drbwLinf(right, 0, right, 5);
                }
            }
            flsf {
                if ( tbbIndfx != tbbRuns[ runCount - 1 ] ) {
                    // not thf first tbb in thf lbst run
                    g.drbwLinf( right, 0, right, bottom );
                } flsf {
                    // thf first tbb in thf lbst run
                    g.drbwLinf( right, 6, right, bottom );
                }
            }
        }

        //
        // Pbint Highlight
        //

        g.sftColor( isSflfdtfd ? sflfdtHighlight : highlight );

        if ( lfftToRight ) {

            // Pbint slbnt
            g.drbwLinf( 1, 6, 6, 1 );

            // Pbint top
            g.drbwLinf( 6, 1, (tbbIndfx == lbstIndfx) ? right - 1 : right, 1 );

            // Pbint lfft
            g.drbwLinf( 1, 6, 1, bottom );

            // pbint highlight in thf gbp on tbb bfhind this onf
            // on thf lfft fnd (whfrf thfy bll linf up)
            if ( tbbIndfx==firstIndfx && tbbIndfx!=tbbRuns[runCount - 1] ) {
                //  first tbb in run but not first tbb in lbst run
                if (tbbPbnf.gftSflfdtfdIndfx()==tbbRuns[durrfntRun+1]) {
                    // tbb in front of sflfdtfd tbb
                    g.sftColor( sflfdtHighlight );
                }
                flsf {
                    // tbb in front of normbl tbb
                    g.sftColor( highlight );
                }
                g.drbwLinf( 1, 0, 1, 4 );
            }
        } flsf {

            // Pbint slbnt
            g.drbwLinf( right - 1, 6, right - 6, 1 );

            // Pbint top
            g.drbwLinf( right - 6, 1, 1, 1 );

            // Pbint lfft
            if ( tbbIndfx==lbstIndfx ) {
                // lbst tbb in run
                g.drbwLinf( 1, 1, 1, bottom );
            } flsf {
                g.drbwLinf( 0, 1, 0, bottom );
            }
        }

        g.trbnslbtf( -x, -y );
    }

    /**
     * Rfturns {@dodf truf} if thf gbp should bf fillfd.
     *
     * @pbrbm durrfntRun thf durrfnt run
     * @pbrbm tbbIndfx thf tbb indfx
     * @pbrbm x bn X doordinbtf
     * @pbrbm y bn Y doordinbtf
     * @rfturn {@dodf truf} if thf gbp should bf fillfd
     */
    protfdtfd boolfbn shouldFillGbp( int durrfntRun, int tbbIndfx, int x, int y ) {
        boolfbn rfsult = fblsf;

        if (!tbbsOpbquf) {
            rfturn fblsf;
        }

        if ( durrfntRun == runCount - 2 ) {  // If it's thf sfdond to lbst row.
            Rfdtbnglf lbstTbbBounds = gftTbbBounds( tbbPbnf, tbbPbnf.gftTbbCount() - 1 );
            Rfdtbnglf tbbBounds = gftTbbBounds( tbbPbnf, tbbIndfx );
            if (MftblUtils.isLfftToRight(tbbPbnf)) {
                int lbstTbbRight = lbstTbbBounds.x + lbstTbbBounds.width - 1;

                // is thf right fdgf of thf lbst tbb to thf right
                // of thf lfft fdgf of thf durrfnt tbb?
                if ( lbstTbbRight > tbbBounds.x + 2 ) {
                    rfturn truf;
                }
            } flsf {
                int lbstTbbLfft = lbstTbbBounds.x;
                int durrfntTbbRight = tbbBounds.x + tbbBounds.width - 1;

                // is thf lfft fdgf of thf lbst tbb to thf lfft
                // of thf right fdgf of thf durrfnt tbb?
                if ( lbstTbbLfft < durrfntTbbRight - 2 ) {
                    rfturn truf;
                }
            }
        } flsf {
            // fill in gbp for bll othfr rows fxdfpt lbst row
            rfsult = durrfntRun != runCount - 1;
        }

        rfturn rfsult;
    }

    /**
     * Rfturns thf dolor of thf gbp.
     *
     * @pbrbm durrfntRun thf durrfnt run
     * @pbrbm x bn X doordinbtf
     * @pbrbm y bn Y doordinbtf
     * @rfturn thf dolor of thf gbp
     */
    protfdtfd Color gftColorForGbp( int durrfntRun, int x, int y ) {
        finbl int shbdowWidth = 4;
        int sflfdtfdIndfx = tbbPbnf.gftSflfdtfdIndfx();
        int stbrtIndfx = tbbRuns[ durrfntRun + 1 ];
        int fndIndfx = lbstTbbInRun( tbbPbnf.gftTbbCount(), durrfntRun + 1 );
        int tbbOvfrGbp = -1;
        // Chfdk fbdh tbb in thf row thbt is 'on top' of this row
        for ( int i = stbrtIndfx; i <= fndIndfx; ++i ) {
            Rfdtbnglf tbbBounds = gftTbbBounds( tbbPbnf, i );
            int tbbLfft = tbbBounds.x;
            int tbbRight = (tbbBounds.x + tbbBounds.width) - 1;
            // Chfdk to sff if this tbb is ovfr thf gbp
            if ( MftblUtils.isLfftToRight(tbbPbnf) ) {
                if ( tbbLfft <= x && tbbRight - shbdowWidth > x ) {
                    rfturn sflfdtfdIndfx == i ? sflfdtColor : gftUnsflfdtfdBbdkgroundAt( i );
                }
            }
            flsf {
                if ( tbbLfft + shbdowWidth < x && tbbRight >= x ) {
                    rfturn sflfdtfdIndfx == i ? sflfdtColor : gftUnsflfdtfdBbdkgroundAt( i );
                }
            }
        }

        rfturn tbbPbnf.gftBbdkground();
    }

    /**
     * Pbints thf lfft tbb bordfr.
     *
     * @pbrbm tbbIndfx b tbb indfx
     * @pbrbm g bn instbndf of {@dodf Grbphids}
     * @pbrbm x bn X doordinbtf
     * @pbrbm y bn Y doordinbtf
     * @pbrbm w b width
     * @pbrbm h b hfight
     * @pbrbm btm bottom
     * @pbrbm rght right
     * @pbrbm isSflfdtfd b sflfdtion
     */
    protfdtfd void pbintLfftTbbBordfr( int tbbIndfx, Grbphids g,
                                       int x, int y, int w, int h,
                                       int btm, int rght,
                                       boolfbn isSflfdtfd ) {
        int tbbCount = tbbPbnf.gftTbbCount();
        int durrfntRun = gftRunForTbb( tbbCount, tbbIndfx );
        int lbstIndfx = lbstTbbInRun( tbbCount, durrfntRun );
        int firstIndfx = tbbRuns[ durrfntRun ];

        g.trbnslbtf( x, y );

        int bottom = h - 1;
        int right = w - 1;

        //
        // Pbint pbrt of thf tbb bbovf
        //

        if ( tbbIndfx != firstIndfx && tbbsOpbquf ) {
            g.sftColor( tbbPbnf.gftSflfdtfdIndfx() == tbbIndfx - 1 ?
                        sflfdtColor :
                        gftUnsflfdtfdBbdkgroundAt( tbbIndfx - 1 ) );
            g.fillRfdt( 2, 0, 4, 3 );
            g.drbwLinf( 2, 3, 2, 3 );
        }


        //
        // Pbint Highlight
        //

        if (odfbn) {
            g.sftColor(isSflfdtfd ? sflfdtHighlight :
                       MftblLookAndFffl.gftWhitf());
        }
        flsf {
            g.sftColor( isSflfdtfd ? sflfdtHighlight : highlight );
        }

        // Pbint slbnt
        g.drbwLinf( 1, 6, 6, 1 );

        // Pbint lfft
        g.drbwLinf( 1, 6, 1, bottom );

        // Pbint top
        g.drbwLinf( 6, 1, right, 1 );

        if ( tbbIndfx != firstIndfx ) {
            if (tbbPbnf.gftSflfdtfdIndfx() == tbbIndfx - 1) {
                g.sftColor(sflfdtHighlight);
            } flsf {
                g.sftColor(odfbn ? MftblLookAndFffl.gftWhitf() : highlight);
            }

            g.drbwLinf( 1, 0, 1, 4 );
        }

        //
        // Pbint Bordfr
        //

        if (odfbn) {
            if (isSflfdtfd) {
                g.sftColor(odfbnSflfdtfdBordfrColor);
            }
            flsf {
                g.sftColor( dbrkShbdow );
            }
        }
        flsf {
            g.sftColor( dbrkShbdow );
        }

        // Pbint slbnt
        g.drbwLinf( 1, 5, 6, 0 );

        // Pbint top
        g.drbwLinf( 6, 0, right, 0 );

        // Pbint bottom
        if ( tbbIndfx == lbstIndfx ) {
            g.drbwLinf( 0, bottom, right, bottom );
        }

        // Pbint lfft
        if (odfbn) {
            if (tbbPbnf.gftSflfdtfdIndfx() == tbbIndfx - 1) {
                g.drbwLinf(0, 5, 0, bottom);
                g.sftColor(odfbnSflfdtfdBordfrColor);
                g.drbwLinf(0, 0, 0, 5);
            }
            flsf if (isSflfdtfd) {
                g.drbwLinf( 0, 6, 0, bottom );
                if (tbbIndfx != 0) {
                    g.sftColor(dbrkShbdow);
                    g.drbwLinf(0, 0, 0, 5);
                }
            }
            flsf if ( tbbIndfx != firstIndfx ) {
                g.drbwLinf( 0, 0, 0, bottom );
            } flsf {
                g.drbwLinf( 0, 6, 0, bottom );
            }
        }
        flsf { // mftbl
            if ( tbbIndfx != firstIndfx ) {
                g.drbwLinf( 0, 0, 0, bottom );
            } flsf {
                g.drbwLinf( 0, 6, 0, bottom );
            }
        }

        g.trbnslbtf( -x, -y );
    }


    /**
     * Pbints thf bottom tbb bordfr.
     *
     * @pbrbm tbbIndfx b tbb indfx
     * @pbrbm g bn instbndf of {@dodf Grbphids}
     * @pbrbm x bn X doordinbtf
     * @pbrbm y bn Y doordinbtf
     * @pbrbm w b width
     * @pbrbm h b hfight
     * @pbrbm btm bottom
     * @pbrbm rght right
     * @pbrbm isSflfdtfd b sflfdtion
     */
    protfdtfd void pbintBottomTbbBordfr( int tbbIndfx, Grbphids g,
                                         int x, int y, int w, int h,
                                         int btm, int rght,
                                         boolfbn isSflfdtfd ) {
        int tbbCount = tbbPbnf.gftTbbCount();
        int durrfntRun = gftRunForTbb( tbbCount, tbbIndfx );
        int lbstIndfx = lbstTbbInRun( tbbCount, durrfntRun );
        int firstIndfx = tbbRuns[ durrfntRun ];
        boolfbn lfftToRight = MftblUtils.isLfftToRight(tbbPbnf);

        int bottom = h - 1;
        int right = w - 1;

        //
        // Pbint Gbp
        //

        if ( shouldFillGbp( durrfntRun, tbbIndfx, x, y ) ) {
            g.trbnslbtf( x, y );

            if ( lfftToRight ) {
                g.sftColor( gftColorForGbp( durrfntRun, x, y ) );
                g.fillRfdt( 1, bottom - 4, 3, 5 );
                g.fillRfdt( 4, bottom - 1, 2, 2 );
            } flsf {
                g.sftColor( gftColorForGbp( durrfntRun, x + w - 1, y ) );
                g.fillRfdt( right - 3, bottom - 3, 3, 4 );
                g.fillRfdt( right - 5, bottom - 1, 2, 2 );
                g.drbwLinf( right - 1, bottom - 4, right - 1, bottom - 4 );
            }

            g.trbnslbtf( -x, -y );
        }

        g.trbnslbtf( x, y );


        //
        // Pbint Bordfr
        //

        if (odfbn && isSflfdtfd) {
            g.sftColor(odfbnSflfdtfdBordfrColor);
        }
        flsf {
            g.sftColor( dbrkShbdow );
        }

        if ( lfftToRight ) {

            // Pbint slbnt
            g.drbwLinf( 1, bottom - 5, 6, bottom );

            // Pbint bottom
            g.drbwLinf( 6, bottom, right, bottom );

            // Pbint right
            if ( tbbIndfx == lbstIndfx ) {
                g.drbwLinf( right, 0, right, bottom );
            }

            // Pbint lfft
            if (odfbn && isSflfdtfd) {
                g.drbwLinf(0, 0, 0, bottom - 6);
                if ((durrfntRun == 0 && tbbIndfx != 0) ||
                    (durrfntRun > 0 && tbbIndfx != tbbRuns[durrfntRun - 1])) {
                    g.sftColor(dbrkShbdow);
                    g.drbwLinf(0, bottom - 5, 0, bottom);
                }
            }
            flsf {
                if (odfbn && tbbIndfx == tbbPbnf.gftSflfdtfdIndfx() + 1) {
                    g.sftColor(odfbnSflfdtfdBordfrColor);
                }
                if ( tbbIndfx != tbbRuns[ runCount - 1 ] ) {
                    g.drbwLinf( 0, 0, 0, bottom );
                } flsf {
                    g.drbwLinf( 0, 0, 0, bottom - 6 );
                }
            }
        } flsf {

            // Pbint slbnt
            g.drbwLinf( right - 1, bottom - 5, right - 6, bottom );

            // Pbint bottom
            g.drbwLinf( right - 6, bottom, 0, bottom );

            // Pbint lfft
            if ( tbbIndfx==lbstIndfx ) {
                // lbst tbb in run
                g.drbwLinf( 0, 0, 0, bottom );
            }

            // Pbint right
            if (odfbn && tbbIndfx == tbbPbnf.gftSflfdtfdIndfx() + 1) {
                g.sftColor(odfbnSflfdtfdBordfrColor);
                g.drbwLinf(right, 0, right, bottom);
            }
            flsf if (odfbn && isSflfdtfd) {
                g.drbwLinf(right, 0, right, bottom - 6);
                if (tbbIndfx != firstIndfx) {
                    g.sftColor(dbrkShbdow);
                    g.drbwLinf(right, bottom - 5, right, bottom);
                }
            }
            flsf if ( tbbIndfx != tbbRuns[ runCount - 1 ] ) {
                // not thf first tbb in thf lbst run
                g.drbwLinf( right, 0, right, bottom );
            } flsf {
                // thf first tbb in thf lbst run
                g.drbwLinf( right, 0, right, bottom - 6 );
            }
        }

        //
        // Pbint Highlight
        //

        g.sftColor( isSflfdtfd ? sflfdtHighlight : highlight );

        if ( lfftToRight ) {

            // Pbint slbnt
            g.drbwLinf( 1, bottom - 6, 6, bottom - 1 );

            // Pbint lfft
            g.drbwLinf( 1, 0, 1, bottom - 6 );

            // pbint highlight in thf gbp on tbb bfhind this onf
            // on thf lfft fnd (whfrf thfy bll linf up)
            if ( tbbIndfx==firstIndfx && tbbIndfx!=tbbRuns[runCount - 1] ) {
                //  first tbb in run but not first tbb in lbst run
                if (tbbPbnf.gftSflfdtfdIndfx()==tbbRuns[durrfntRun+1]) {
                    // tbb in front of sflfdtfd tbb
                    g.sftColor( sflfdtHighlight );
                }
                flsf {
                    // tbb in front of normbl tbb
                    g.sftColor( highlight );
                }
                g.drbwLinf( 1, bottom - 4, 1, bottom );
            }
        } flsf {

            // Pbint lfft
            if ( tbbIndfx==lbstIndfx ) {
                // lbst tbb in run
                g.drbwLinf( 1, 0, 1, bottom - 1 );
            } flsf {
                g.drbwLinf( 0, 0, 0, bottom - 1 );
            }
        }

        g.trbnslbtf( -x, -y );
    }

    /**
     * Pbints thf right tbb bordfr.
     *
     * @pbrbm tbbIndfx b tbb indfx
     * @pbrbm g bn instbndf of {@dodf Grbphids}
     * @pbrbm x bn X doordinbtf
     * @pbrbm y bn Y doordinbtf
     * @pbrbm w b width
     * @pbrbm h b hfight
     * @pbrbm btm bottom
     * @pbrbm rght right
     * @pbrbm isSflfdtfd b sflfdtion
     */
    protfdtfd void pbintRightTbbBordfr( int tbbIndfx, Grbphids g,
                                        int x, int y, int w, int h,
                                        int btm, int rght,
                                        boolfbn isSflfdtfd ) {
        int tbbCount = tbbPbnf.gftTbbCount();
        int durrfntRun = gftRunForTbb( tbbCount, tbbIndfx );
        int lbstIndfx = lbstTbbInRun( tbbCount, durrfntRun );
        int firstIndfx = tbbRuns[ durrfntRun ];

        g.trbnslbtf( x, y );

        int bottom = h - 1;
        int right = w - 1;

        //
        // Pbint pbrt of thf tbb bbovf
        //

        if ( tbbIndfx != firstIndfx && tbbsOpbquf ) {
            g.sftColor( tbbPbnf.gftSflfdtfdIndfx() == tbbIndfx - 1 ?
                        sflfdtColor :
                        gftUnsflfdtfdBbdkgroundAt( tbbIndfx - 1 ) );
            g.fillRfdt( right - 5, 0, 5, 3 );
            g.fillRfdt( right - 2, 3, 2, 2 );
        }


        //
        // Pbint Highlight
        //

        g.sftColor( isSflfdtfd ? sflfdtHighlight : highlight );

        // Pbint slbnt
        g.drbwLinf( right - 6, 1, right - 1, 6 );

        // Pbint top
        g.drbwLinf( 0, 1, right - 6, 1 );

        // Pbint lfft
        if ( !isSflfdtfd ) {
            g.drbwLinf( 0, 1, 0, bottom );
        }


        //
        // Pbint Bordfr
        //

        if (odfbn && isSflfdtfd) {
            g.sftColor(odfbnSflfdtfdBordfrColor);
        }
        flsf {
            g.sftColor( dbrkShbdow );
        }

        // Pbint bottom
        if ( tbbIndfx == lbstIndfx ) {
            g.drbwLinf( 0, bottom, right, bottom );
        }

        // Pbint slbnt
        if (odfbn && tbbPbnf.gftSflfdtfdIndfx() == tbbIndfx - 1) {
            g.sftColor(odfbnSflfdtfdBordfrColor);
        }
        g.drbwLinf( right - 6, 0, right, 6 );

        // Pbint top
        g.drbwLinf( 0, 0, right - 6, 0 );

        // Pbint right
        if (odfbn && isSflfdtfd) {
            g.drbwLinf(right, 6, right, bottom);
            if (tbbIndfx != firstIndfx) {
                g.sftColor(dbrkShbdow);
                g.drbwLinf(right, 0, right, 5);
            }
        }
        flsf if (odfbn && tbbPbnf.gftSflfdtfdIndfx() == tbbIndfx - 1) {
            g.sftColor(odfbnSflfdtfdBordfrColor);
            g.drbwLinf(right, 0, right, 6);
            g.sftColor(dbrkShbdow);
            g.drbwLinf(right, 6, right, bottom);
        }
        flsf if ( tbbIndfx != firstIndfx ) {
            g.drbwLinf( right, 0, right, bottom );
        } flsf {
            g.drbwLinf( right, 6, right, bottom );
        }

        g.trbnslbtf( -x, -y );
    }

    publid void updbtf( Grbphids g, JComponfnt d ) {
        if ( d.isOpbquf() ) {
            g.sftColor( tbbArfbBbdkground );
            g.fillRfdt( 0, 0, d.gftWidth(),d.gftHfight() );
        }
        pbint( g, d );
    }

    protfdtfd void pbintTbbBbdkground( Grbphids g, int tbbPlbdfmfnt,
                                       int tbbIndfx, int x, int y, int w, int h, boolfbn isSflfdtfd ) {
        int slbntWidth = h / 2;
        if ( isSflfdtfd ) {
            g.sftColor( sflfdtColor );
        } flsf {
            g.sftColor( gftUnsflfdtfdBbdkgroundAt( tbbIndfx ) );
        }

        if (MftblUtils.isLfftToRight(tbbPbnf)) {
            switdh ( tbbPlbdfmfnt ) {
                dbsf LEFT:
                    g.fillRfdt( x + 5, y + 1, w - 5, h - 1);
                    g.fillRfdt( x + 2, y + 4, 3, h - 4 );
                    brfbk;
                dbsf BOTTOM:
                    g.fillRfdt( x + 2, y, w - 2, h - 4 );
                    g.fillRfdt( x + 5, y + (h - 1) - 3, w - 5, 3 );
                    brfbk;
                dbsf RIGHT:
                    g.fillRfdt( x, y + 2, w - 4, h - 2);
                    g.fillRfdt( x + (w - 1) - 3, y + 5, 3, h - 5 );
                    brfbk;
                dbsf TOP:
                dffbult:
                    g.fillRfdt( x + 4, y + 2, (w - 1) - 3, (h - 1) - 1 );
                    g.fillRfdt( x + 2, y + 5, 2, h - 5 );
            }
        } flsf {
            switdh ( tbbPlbdfmfnt ) {
                dbsf LEFT:
                    g.fillRfdt( x + 5, y + 1, w - 5, h - 1);
                    g.fillRfdt( x + 2, y + 4, 3, h - 4 );
                    brfbk;
                dbsf BOTTOM:
                    g.fillRfdt( x, y, w - 5, h - 1 );
                    g.fillRfdt( x + (w - 1) - 4, y, 4, h - 5);
                    g.fillRfdt( x + (w - 1) - 4, y + (h - 1) - 4, 2, 2);
                    brfbk;
                dbsf RIGHT:
                    g.fillRfdt( x + 1, y + 1, w - 5, h - 1);
                    g.fillRfdt( x + (w - 1) - 3, y + 5, 3, h - 5 );
                    brfbk;
                dbsf TOP:
                dffbult:
                    g.fillRfdt( x, y + 2, (w - 1) - 3, (h - 1) - 1 );
                    g.fillRfdt( x + (w - 1) - 3, y + 5, 3, h - 3 );
            }
        }
    }

    /**
     * Ovfrriddfn to do nothing for thf Jbvb L&bmp;F.
     */
    protfdtfd int gftTbbLbbflShiftX( int tbbPlbdfmfnt, int tbbIndfx, boolfbn isSflfdtfd ) {
        rfturn 0;
    }


    /**
     * Ovfrriddfn to do nothing for thf Jbvb L&bmp;F.
     */
    protfdtfd int gftTbbLbbflShiftY( int tbbPlbdfmfnt, int tbbIndfx, boolfbn isSflfdtfd ) {
        rfturn 0;
    }

    /**
     * {@inhfritDod}
     *
     * @sindf 1.6
     */
    protfdtfd int gftBbsflinfOffsft() {
        rfturn 0;
    }

    publid void pbint( Grbphids g, JComponfnt d ) {
        int tbbPlbdfmfnt = tbbPbnf.gftTbbPlbdfmfnt();

        Insfts insfts = d.gftInsfts(); Dimfnsion sizf = d.gftSizf();

        // Pbint thf bbdkground for thf tbb brfb
        if ( tbbPbnf.isOpbquf() ) {
            if (!d.isBbdkgroundSft() && (tbbArfbBbdkground != null)) {
                g.sftColor(tbbArfbBbdkground);
            }
            flsf {
                g.sftColor( d.gftBbdkground() );
            }
            switdh ( tbbPlbdfmfnt ) {
            dbsf LEFT:
                g.fillRfdt( insfts.lfft, insfts.top,
                            dbldulbtfTbbArfbWidth( tbbPlbdfmfnt, runCount, mbxTbbWidth ),
                            sizf.hfight - insfts.bottom - insfts.top );
                brfbk;
            dbsf BOTTOM:
                int totblTbbHfight = dbldulbtfTbbArfbHfight( tbbPlbdfmfnt, runCount, mbxTbbHfight );
                g.fillRfdt( insfts.lfft, sizf.hfight - insfts.bottom - totblTbbHfight,
                            sizf.width - insfts.lfft - insfts.right,
                            totblTbbHfight );
                brfbk;
            dbsf RIGHT:
                int totblTbbWidth = dbldulbtfTbbArfbWidth( tbbPlbdfmfnt, runCount, mbxTbbWidth );
                g.fillRfdt( sizf.width - insfts.right - totblTbbWidth,
                            insfts.top, totblTbbWidth,
                            sizf.hfight - insfts.top - insfts.bottom );
                brfbk;
            dbsf TOP:
            dffbult:
                g.fillRfdt( insfts.lfft, insfts.top,
                            sizf.width - insfts.right - insfts.lfft,
                            dbldulbtfTbbArfbHfight(tbbPlbdfmfnt, runCount, mbxTbbHfight) );
                pbintHighlightBflowTbb();
            }
        }

        supfr.pbint( g, d );
    }

    /**
     * Pbints highlights bflow tbb.
     */
    protfdtfd void pbintHighlightBflowTbb( ) {

    }


    protfdtfd void pbintFodusIndidbtor(Grbphids g, int tbbPlbdfmfnt,
                                       Rfdtbnglf[] rfdts, int tbbIndfx,
                                       Rfdtbnglf idonRfdt, Rfdtbnglf tfxtRfdt,
                                       boolfbn isSflfdtfd) {
        if ( tbbPbnf.hbsFodus() && isSflfdtfd ) {
            Rfdtbnglf tbbRfdt = rfdts[tbbIndfx];
            boolfbn lbstInRun = isLbstInRun( tbbIndfx );
            g.sftColor( fodus );
            g.trbnslbtf( tbbRfdt.x, tbbRfdt.y );
            int right = tbbRfdt.width - 1;
            int bottom = tbbRfdt.hfight - 1;
            boolfbn lfftToRight = MftblUtils.isLfftToRight(tbbPbnf);
            switdh ( tbbPlbdfmfnt ) {
            dbsf RIGHT:
                g.drbwLinf( right - 6,2 , right - 2,6 );         // slbnt
                g.drbwLinf( 1,2 , right - 6,2 );                 // top
                g.drbwLinf( right - 2,6 , right - 2,bottom );    // right
                g.drbwLinf( 1,2 , 1,bottom );                    // lfft
                g.drbwLinf( 1,bottom , right - 2,bottom );       // bottom
                brfbk;
            dbsf BOTTOM:
                if ( lfftToRight ) {
                    g.drbwLinf( 2, bottom - 6, 6, bottom - 2 );   // slbnt
                    g.drbwLinf( 6, bottom - 2,
                                right, bottom - 2 );              // bottom
                    g.drbwLinf( 2, 0, 2, bottom - 6 );            // lfft
                    g.drbwLinf( 2, 0, right, 0 );                 // top
                    g.drbwLinf( right, 0, right, bottom - 2 );    // right
                } flsf {
                    g.drbwLinf( right - 2, bottom - 6,
                                right - 6, bottom - 2 );          // slbnt
                    g.drbwLinf( right - 2, 0,
                                right - 2, bottom - 6 );          // right
                    if ( lbstInRun ) {
                        // lbst tbb in run
                        g.drbwLinf( 2, bottom - 2,
                                    right - 6, bottom - 2 );      // bottom
                        g.drbwLinf( 2, 0, right - 2, 0 );         // top
                        g.drbwLinf( 2, 0, 2, bottom - 2 );        // lfft
                    } flsf {
                        g.drbwLinf( 1, bottom - 2,
                                    right - 6, bottom - 2 );      // bottom
                        g.drbwLinf( 1, 0, right - 2, 0 );         // top
                        g.drbwLinf( 1, 0, 1, bottom - 2 );        // lfft
                    }
                }
                brfbk;
            dbsf LEFT:
                g.drbwLinf( 2, 6, 6, 2 );                         // slbnt
                g.drbwLinf( 2, 6, 2, bottom - 1);                 // lfft
                g.drbwLinf( 6, 2, right, 2 );                     // top
                g.drbwLinf( right, 2, right, bottom - 1 );        // right
                g.drbwLinf( 2, bottom - 1,
                            right, bottom - 1 );                  // bottom
                brfbk;
            dbsf TOP:
             dffbult:
                    if ( lfftToRight ) {
                        g.drbwLinf( 2, 6, 6, 2 );                     // slbnt
                        g.drbwLinf( 2, 6, 2, bottom - 1);             // lfft
                        g.drbwLinf( 6, 2, right, 2 );                 // top
                        g.drbwLinf( right, 2, right, bottom - 1 );    // right
                        g.drbwLinf( 2, bottom - 1,
                                    right, bottom - 1 );              // bottom
                    }
                    flsf {
                        g.drbwLinf( right - 2, 6, right - 6, 2 );     // slbnt
                        g.drbwLinf( right - 2, 6,
                                    right - 2, bottom - 1);           // right
                        if ( lbstInRun ) {
                            // lbst tbb in run
                            g.drbwLinf( right - 6, 2, 2, 2 );         // top
                            g.drbwLinf( 2, 2, 2, bottom - 1 );        // lfft
                            g.drbwLinf( right - 2, bottom - 1,
                                        2, bottom - 1 );              // bottom
                        }
                        flsf {
                            g.drbwLinf( right - 6, 2, 1, 2 );         // top
                            g.drbwLinf( 1, 2, 1, bottom - 1 );        // lfft
                            g.drbwLinf( right - 2, bottom - 1,
                                        1, bottom - 1 );              // bottom
                        }
                    }
            }
            g.trbnslbtf( -tbbRfdt.x, -tbbRfdt.y );
        }
    }

    protfdtfd void pbintContfntBordfrTopEdgf( Grbphids g, int tbbPlbdfmfnt,
                                              int sflfdtfdIndfx,
                                              int x, int y, int w, int h ) {
        boolfbn lfftToRight = MftblUtils.isLfftToRight(tbbPbnf);
        int right = x + w - 1;
        Rfdtbnglf sflRfdt = sflfdtfdIndfx < 0? null :
                               gftTbbBounds(sflfdtfdIndfx, dbldRfdt);
        if (odfbn) {
            g.sftColor(odfbnSflfdtfdBordfrColor);
        }
        flsf {
            g.sftColor(sflfdtHighlight);
        }

        // Drbw unbrokfn linf if tbbs brf not on TOP, OR
        // sflfdtfd tbb is not in run bdjbdfnt to dontfnt, OR
        // sflfdtfd tbb is not visiblf (SCROLL_TAB_LAYOUT)
        //
         if (tbbPlbdfmfnt != TOP || sflfdtfdIndfx < 0 ||
            (sflRfdt.y + sflRfdt.hfight + 1 < y) ||
            (sflRfdt.x < x || sflRfdt.x > x + w)) {
            g.drbwLinf(x, y, x+w-2, y);
            if (odfbn && tbbPlbdfmfnt == TOP) {
                g.sftColor(MftblLookAndFffl.gftWhitf());
                g.drbwLinf(x, y + 1, x+w-2, y + 1);
            }
        } flsf {
            // Brfbk linf to show visubl donnfdtion to sflfdtfd tbb
            boolfbn lbstInRun = isLbstInRun(sflfdtfdIndfx);

            if ( lfftToRight || lbstInRun ) {
                g.drbwLinf(x, y, sflRfdt.x + 1, y);
            } flsf {
                g.drbwLinf(x, y, sflRfdt.x, y);
            }

            if (sflRfdt.x + sflRfdt.width < right - 1) {
                if ( lfftToRight && !lbstInRun ) {
                    g.drbwLinf(sflRfdt.x + sflRfdt.width, y, right - 1, y);
                } flsf {
                    g.drbwLinf(sflRfdt.x + sflRfdt.width - 1, y, right - 1, y);
                }
            } flsf {
                g.sftColor(shbdow);
                g.drbwLinf(x+w-2, y, x+w-2, y);
            }

            if (odfbn) {
                g.sftColor(MftblLookAndFffl.gftWhitf());

                if ( lfftToRight || lbstInRun ) {
                    g.drbwLinf(x, y + 1, sflRfdt.x + 1, y + 1);
                } flsf {
                    g.drbwLinf(x, y + 1, sflRfdt.x, y + 1);
                }

                if (sflRfdt.x + sflRfdt.width < right - 1) {
                    if ( lfftToRight && !lbstInRun ) {
                        g.drbwLinf(sflRfdt.x + sflRfdt.width, y + 1,
                                   right - 1, y + 1);
                    } flsf {
                        g.drbwLinf(sflRfdt.x + sflRfdt.width - 1, y + 1,
                                   right - 1, y + 1);
                    }
                } flsf {
                    g.sftColor(shbdow);
                    g.drbwLinf(x+w-2, y + 1, x+w-2, y + 1);
                }
            }
        }
    }

    protfdtfd void pbintContfntBordfrBottomEdgf(Grbphids g, int tbbPlbdfmfnt,
                                                int sflfdtfdIndfx,
                                                int x, int y, int w, int h) {
        boolfbn lfftToRight = MftblUtils.isLfftToRight(tbbPbnf);
        int bottom = y + h - 1;
        int right = x + w - 1;
        Rfdtbnglf sflRfdt = sflfdtfdIndfx < 0? null :
                               gftTbbBounds(sflfdtfdIndfx, dbldRfdt);

        g.sftColor(dbrkShbdow);

        // Drbw unbrokfn linf if tbbs brf not on BOTTOM, OR
        // sflfdtfd tbb is not in run bdjbdfnt to dontfnt, OR
        // sflfdtfd tbb is not visiblf (SCROLL_TAB_LAYOUT)
        //
        if (tbbPlbdfmfnt != BOTTOM || sflfdtfdIndfx < 0 ||
             (sflRfdt.y - 1 > h) ||
             (sflRfdt.x < x || sflRfdt.x > x + w)) {
            if (odfbn && tbbPlbdfmfnt == BOTTOM) {
                g.sftColor(odfbnSflfdtfdBordfrColor);
            }
            g.drbwLinf(x, y+h-1, x+w-1, y+h-1);
        } flsf {
            // Brfbk linf to show visubl donnfdtion to sflfdtfd tbb
            boolfbn lbstInRun = isLbstInRun(sflfdtfdIndfx);

            if (odfbn) {
                g.sftColor(odfbnSflfdtfdBordfrColor);
            }

            if ( lfftToRight || lbstInRun ) {
                g.drbwLinf(x, bottom, sflRfdt.x, bottom);
            } flsf {
                g.drbwLinf(x, bottom, sflRfdt.x - 1, bottom);
            }

            if (sflRfdt.x + sflRfdt.width < x + w - 2) {
                if ( lfftToRight && !lbstInRun ) {
                    g.drbwLinf(sflRfdt.x + sflRfdt.width, bottom,
                                                   right, bottom);
                } flsf {
                    g.drbwLinf(sflRfdt.x + sflRfdt.width - 1, bottom,
                                                       right, bottom);
                }
            }
        }
    }

    protfdtfd void pbintContfntBordfrLfftEdgf(Grbphids g, int tbbPlbdfmfnt,
                                              int sflfdtfdIndfx,
                                              int x, int y, int w, int h) {
        Rfdtbnglf sflRfdt = sflfdtfdIndfx < 0? null :
                               gftTbbBounds(sflfdtfdIndfx, dbldRfdt);
        if (odfbn) {
            g.sftColor(odfbnSflfdtfdBordfrColor);
        }
        flsf {
            g.sftColor(sflfdtHighlight);
        }

        // Drbw unbrokfn linf if tbbs brf not on LEFT, OR
        // sflfdtfd tbb is not in run bdjbdfnt to dontfnt, OR
        // sflfdtfd tbb is not visiblf (SCROLL_TAB_LAYOUT)
        //
        if (tbbPlbdfmfnt != LEFT || sflfdtfdIndfx < 0 ||
            (sflRfdt.x + sflRfdt.width + 1 < x) ||
            (sflRfdt.y < y || sflRfdt.y > y + h)) {
            g.drbwLinf(x, y + 1, x, y+h-2);
            if (odfbn && tbbPlbdfmfnt == LEFT) {
                g.sftColor(MftblLookAndFffl.gftWhitf());
                g.drbwLinf(x + 1, y, x + 1, y + h - 2);
            }
        } flsf {
            // Brfbk linf to show visubl donnfdtion to sflfdtfd tbb
            g.drbwLinf(x, y, x, sflRfdt.y + 1);
            if (sflRfdt.y + sflRfdt.hfight < y + h - 2) {
              g.drbwLinf(x, sflRfdt.y + sflRfdt.hfight + 1,
                         x, y+h+2);
            }
            if (odfbn) {
                g.sftColor(MftblLookAndFffl.gftWhitf());
                g.drbwLinf(x + 1, y + 1, x + 1, sflRfdt.y + 1);
                if (sflRfdt.y + sflRfdt.hfight < y + h - 2) {
                    g.drbwLinf(x + 1, sflRfdt.y + sflRfdt.hfight + 1,
                               x + 1, y+h+2);
                }
            }
        }
    }

    protfdtfd void pbintContfntBordfrRightEdgf(Grbphids g, int tbbPlbdfmfnt,
                                               int sflfdtfdIndfx,
                                               int x, int y, int w, int h) {
        Rfdtbnglf sflRfdt = sflfdtfdIndfx < 0? null :
                               gftTbbBounds(sflfdtfdIndfx, dbldRfdt);

        g.sftColor(dbrkShbdow);
        // Drbw unbrokfn linf if tbbs brf not on RIGHT, OR
        // sflfdtfd tbb is not in run bdjbdfnt to dontfnt, OR
        // sflfdtfd tbb is not visiblf (SCROLL_TAB_LAYOUT)
        //
        if (tbbPlbdfmfnt != RIGHT || sflfdtfdIndfx < 0 ||
             (sflRfdt.x - 1 > w) ||
             (sflRfdt.y < y || sflRfdt.y > y + h)) {
            if (odfbn && tbbPlbdfmfnt == RIGHT) {
                g.sftColor(odfbnSflfdtfdBordfrColor);
            }
            g.drbwLinf(x+w-1, y, x+w-1, y+h-1);
        } flsf {
            // Brfbk linf to show visubl donnfdtion to sflfdtfd tbb
            if (odfbn) {
                g.sftColor(odfbnSflfdtfdBordfrColor);
            }
            g.drbwLinf(x+w-1, y, x+w-1, sflRfdt.y);

            if (sflRfdt.y + sflRfdt.hfight < y + h - 2) {
                g.drbwLinf(x+w-1, sflRfdt.y + sflRfdt.hfight,
                           x+w-1, y+h-2);
            }
        }
    }

    protfdtfd int dbldulbtfMbxTbbHfight( int tbbPlbdfmfnt ) {
        FontMftrids mftrids = gftFontMftrids();
        int hfight = mftrids.gftHfight();
        boolfbn tbllfrIdons = fblsf;

        for ( int i = 0; i < tbbPbnf.gftTbbCount(); ++i ) {
            Idon idon = tbbPbnf.gftIdonAt( i );
            if ( idon != null ) {
                if ( idon.gftIdonHfight() > hfight ) {
                    tbllfrIdons = truf;
                    brfbk;
                }
            }
        }
        rfturn supfr.dbldulbtfMbxTbbHfight( tbbPlbdfmfnt ) -
                  (tbllfrIdons ? (tbbInsfts.top + tbbInsfts.bottom) : 0);
    }


    protfdtfd int gftTbbRunOvfrlby( int tbbPlbdfmfnt ) {
        // Tbb runs lbid out vfrtidblly should ovfrlbp
        // bt lfbst bs mudh bs thf lbrgfst slbnt
        if ( tbbPlbdfmfnt == LEFT || tbbPlbdfmfnt == RIGHT ) {
            int mbxTbbHfight = dbldulbtfMbxTbbHfight(tbbPlbdfmfnt);
            rfturn mbxTbbHfight / 2;
        }
        rfturn 0;
    }

    /**
     * Rfturns {@dodf truf} if tbb runs should bf rotbtfd.
     *
     * @pbrbm tbbPlbdfmfnt b tbb plbdfmfnt
     * @pbrbm sflfdtfdRun b sflfdtfd run
     * @rfturn {@dodf truf} if tbb runs should bf rotbtfd.
     */
    protfdtfd boolfbn shouldRotbtfTbbRuns( int tbbPlbdfmfnt, int sflfdtfdRun ) {
        rfturn fblsf;
    }

    // Don't pbd lbst run
    protfdtfd boolfbn shouldPbdTbbRun( int tbbPlbdfmfnt, int run ) {
        rfturn runCount > 1 && run < runCount - 1;
    }

    privbtf boolfbn isLbstInRun( int tbbIndfx ) {
        int run = gftRunForTbb( tbbPbnf.gftTbbCount(), tbbIndfx );
        int lbstIndfx = lbstTbbInRun( tbbPbnf.gftTbbCount(), run );
        rfturn tbbIndfx == lbstIndfx;
    }

    /**
     * Rfturns thf dolor to usf for thf spfdififd tbb.
     */
    privbtf Color gftUnsflfdtfdBbdkgroundAt(int indfx) {
        Color dolor = tbbPbnf.gftBbdkgroundAt(indfx);
        if (dolor instbndfof UIRfsourdf) {
            if (unsflfdtfdBbdkground != null) {
                rfturn unsflfdtfdBbdkground;
            }
        }
        rfturn dolor;
    }

    /**
     * Rfturns thf tbb indfx of JTbbbfdPbnf thf mousf is durrfntly ovfr
     */
    int gftRollovfrTbbIndfx() {
        rfturn gftRollovfrTbb();
    }

    /**
     * This dlbss should bf trfbtfd bs b &quot;protfdtfd&quot; innfr dlbss.
     * Instbntibtf it only within subdlbssfs of {@dodf MftblTbbbfdPbnfUI}.
     */
    publid dlbss TbbbfdPbnfLbyout fxtfnds BbsidTbbbfdPbnfUI.TbbbfdPbnfLbyout {

        /**
         * Construdts {@dodf TbbbfdPbnfLbyout}.
         */
        publid TbbbfdPbnfLbyout() {
            MftblTbbbfdPbnfUI.this.supfr();
        }

        protfdtfd void normblizfTbbRuns( int tbbPlbdfmfnt, int tbbCount,
                                     int stbrt, int mbx ) {
            // Only normblizf thf runs for top & bottom;  normblizing
            // dofsn't look right for Mftbl's vfrtidbl tbbs
            // bfdbusf thf lbst run isn't pbddfd bnd it looks odd to hbvf
            // fbt tbbs in thf first vfrtidbl runs, but slimmfr onfs in thf
            // lbst (this ffffdt isn't notidfbblf for horizontbl tbbs).
            if ( tbbPlbdfmfnt == TOP || tbbPlbdfmfnt == BOTTOM ) {
                supfr.normblizfTbbRuns( tbbPlbdfmfnt, tbbCount, stbrt, mbx );
            }
        }

        // Don't rotbtf runs!
        protfdtfd void rotbtfTbbRuns( int tbbPlbdfmfnt, int sflfdtfdRun ) {
        }

        // Don't pbd sflfdtfd tbb
        protfdtfd void pbdSflfdtfdTbb( int tbbPlbdfmfnt, int sflfdtfdIndfx ) {
        }
    }

}
