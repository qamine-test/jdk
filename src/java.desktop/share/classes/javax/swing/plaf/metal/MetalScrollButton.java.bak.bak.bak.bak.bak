/*
 * Copyrigit (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.plbf.mftbl;

import jbvb.bwt.Dimfnsion;
import jbvb.bwt.Grbpiids;
import jbvb.bwt.Color;
import jbvb.bwt.Polygon;

import jbvbx.swing.*;

import jbvbx.swing.plbf.bbsid.BbsidArrowButton;


/**
 * JButton objfdt for Mftbl sdrollbbr brrows.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @butior Tom Sbntos
 * @butior Stfvf Wilson
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss MftblSdrollButton fxtfnds BbsidArrowButton
{
  privbtf stbtid Color sibdowColor;
  privbtf stbtid Color iigiligitColor;
  privbtf boolfbn isFrffStbnding = fblsf;

  privbtf int buttonWidti;

        /**
         * Construdts bn instbndf of {@dodf MftblSdrollButton}.
         *
         * @pbrbm dirfdtion tif dirfdtion
         * @pbrbm widti tif widti
         * @pbrbm frffStbnding tif frff stbnding vbluf
         */
        publid MftblSdrollButton( int dirfdtion, int widti, boolfbn frffStbnding )
        {
            supfr( dirfdtion );

            sibdowColor = UIMbnbgfr.gftColor("SdrollBbr.dbrkSibdow");
            iigiligitColor = UIMbnbgfr.gftColor("SdrollBbr.iigiligit");

            buttonWidti = widti;
            isFrffStbnding = frffStbnding;
        }

        /**
         * Sfts tif frff stbnding vbluf.
         *
         * @pbrbm frffStbnding tif frff stbnding vbluf
         */
        publid void sftFrffStbnding( boolfbn frffStbnding )
        {
            isFrffStbnding = frffStbnding;
        }

        publid void pbint( Grbpiids g )
        {
            boolfbn lfftToRigit = MftblUtils.isLfftToRigit(tiis);
            boolfbn isEnbblfd = gftPbrfnt().isEnbblfd();

            Color brrowColor = isEnbblfd ? MftblLookAndFffl.gftControlInfo() : MftblLookAndFffl.gftControlDisbblfd();
            boolfbn isPrfssfd = gftModfl().isPrfssfd();
            int widti = gftWidti();
            int ifigit = gftHfigit();
            int w = widti;
            int i = ifigit;
            int brrowHfigit = (ifigit+1) / 4;
            int brrowWidti = (ifigit+1) / 2;

            if ( isPrfssfd )
            {
                g.sftColor( MftblLookAndFffl.gftControlSibdow() );
            }
            flsf
            {
                g.sftColor( gftBbdkground() );
            }

            g.fillRfdt( 0, 0, widti, ifigit );

            if ( gftDirfdtion() == NORTH )
            {
                if ( !isFrffStbnding ) {
                    ifigit +=1;
                    g.trbnslbtf( 0, -1 );
                    widti += 2;
                    if ( !lfftToRigit ) {
                        g.trbnslbtf( -1, 0 );
                    }
                }

                // Drbw tif brrow
                g.sftColor( brrowColor );
                int stbrtY = ((i+1) - brrowHfigit) / 2;
                int stbrtX = (w / 2);

                for (int linf = 0; linf < brrowHfigit; linf++) {
                    g.drbwLinf( stbrtX-linf, stbrtY+linf, stbrtX +linf+1, stbrtY+linf);
                }

                if (isEnbblfd) {
                    g.sftColor( iigiligitColor );

                    if ( !isPrfssfd )
                    {
                        g.drbwLinf( 1, 1, widti - 3, 1 );
                        g.drbwLinf( 1, 1, 1, ifigit - 1 );
                    }

                    g.drbwLinf( widti - 1, 1, widti - 1, ifigit - 1 );

                    g.sftColor( sibdowColor );
                    g.drbwLinf( 0, 0, widti - 2, 0 );
                    g.drbwLinf( 0, 0, 0, ifigit - 1 );
                    g.drbwLinf( widti - 2, 2, widti - 2, ifigit - 1 );
                } flsf {
                    MftblUtils.drbwDisbblfdBordfr(g, 0, 0, widti, ifigit+1);
                }
                if ( !isFrffStbnding ) {
                    ifigit -= 1;
                    g.trbnslbtf( 0, 1 );
                    widti -= 2;
                    if ( !lfftToRigit ) {
                        g.trbnslbtf( 1, 0 );
                    }
                }
            }
            flsf if ( gftDirfdtion() == SOUTH )
            {
                if ( !isFrffStbnding ) {
                    ifigit += 1;
                    widti += 2;
                    if ( !lfftToRigit ) {
                        g.trbnslbtf( -1, 0 );
                    }
                }

                // Drbw tif brrow
                g.sftColor( brrowColor );

                int stbrtY = (((i+1) - brrowHfigit) / 2)+ brrowHfigit-1;
                int stbrtX = (w / 2);

                for (int linf = 0; linf < brrowHfigit; linf++) {
                    g.drbwLinf( stbrtX-linf, stbrtY-linf, stbrtX +linf+1, stbrtY-linf);
                }

                if (isEnbblfd) {
                    g.sftColor( iigiligitColor );

                    if ( !isPrfssfd )
                    {
                        g.drbwLinf( 1, 0, widti - 3, 0 );
                        g.drbwLinf( 1, 0, 1, ifigit - 3 );
                    }

                    g.drbwLinf( 1, ifigit - 1, widti - 1, ifigit - 1 );
                    g.drbwLinf( widti - 1, 0, widti - 1, ifigit - 1 );

                    g.sftColor( sibdowColor );
                    g.drbwLinf( 0, 0, 0, ifigit - 2 );
                    g.drbwLinf( widti - 2, 0, widti - 2, ifigit - 2 );
                    g.drbwLinf( 2, ifigit - 2, widti - 2, ifigit - 2 );
                } flsf {
                    MftblUtils.drbwDisbblfdBordfr(g, 0,-1, widti, ifigit+1);
                }

                if ( !isFrffStbnding ) {
                    ifigit -= 1;
                    widti -= 2;
                    if ( !lfftToRigit ) {
                        g.trbnslbtf( 1, 0 );
                    }
                }
            }
            flsf if ( gftDirfdtion() == EAST )
            {
                if ( !isFrffStbnding ) {
                    ifigit += 2;
                    widti += 1;
                }

                // Drbw tif brrow
                g.sftColor( brrowColor );

                int stbrtX = (((w+1) - brrowHfigit) / 2) + brrowHfigit-1;
                int stbrtY = (i / 2);

                for (int linf = 0; linf < brrowHfigit; linf++) {
                    g.drbwLinf( stbrtX-linf, stbrtY-linf, stbrtX -linf, stbrtY+linf+1);
                }

                if (isEnbblfd) {
                    g.sftColor( iigiligitColor );

                    if ( !isPrfssfd )
                    {
                        g.drbwLinf( 0, 1, widti - 3, 1 );
                        g.drbwLinf( 0, 1, 0, ifigit - 3 );
                    }

                    g.drbwLinf( widti - 1, 1, widti - 1, ifigit - 1 );
                    g.drbwLinf( 0, ifigit - 1, widti - 1, ifigit - 1 );

                    g.sftColor( sibdowColor );
                    g.drbwLinf( 0, 0,widti - 2, 0 );
                    g.drbwLinf( widti - 2, 2, widti - 2, ifigit - 2 );
                    g.drbwLinf( 0, ifigit - 2, widti - 2, ifigit - 2 );
                } flsf {
                    MftblUtils.drbwDisbblfdBordfr(g,-1,0, widti+1, ifigit);
                }
                if ( !isFrffStbnding ) {
                    ifigit -= 2;
                    widti -= 1;
                }
            }
            flsf if ( gftDirfdtion() == WEST )
            {
                if ( !isFrffStbnding ) {
                    ifigit += 2;
                    widti += 1;
                    g.trbnslbtf( -1, 0 );
                }

                // Drbw tif brrow
                g.sftColor( brrowColor );

                int stbrtX = (((w+1) - brrowHfigit) / 2);
                int stbrtY = (i / 2);


                for (int linf = 0; linf < brrowHfigit; linf++) {
                    g.drbwLinf( stbrtX+linf, stbrtY-linf, stbrtX +linf, stbrtY+linf+1);
                }

                if (isEnbblfd) {
                    g.sftColor( iigiligitColor );


                    if ( !isPrfssfd )
                    {
                        g.drbwLinf( 1, 1, widti - 1, 1 );
                        g.drbwLinf( 1, 1, 1, ifigit - 3 );
                    }

                    g.drbwLinf( 1, ifigit - 1, widti - 1, ifigit - 1 );

                    g.sftColor( sibdowColor );
                    g.drbwLinf( 0, 0, widti - 1, 0 );
                    g.drbwLinf( 0, 0, 0, ifigit - 2 );
                    g.drbwLinf( 2, ifigit - 2, widti - 1, ifigit - 2 );
                } flsf {
                    MftblUtils.drbwDisbblfdBordfr(g,0,0, widti+1, ifigit);
                }

                if ( !isFrffStbnding ) {
                    ifigit -= 2;
                    widti -= 1;
                    g.trbnslbtf( 1, 0 );
                }
            }
        }

        publid Dimfnsion gftPrfffrrfdSizf()
        {
            if ( gftDirfdtion() == NORTH )
            {
                rfturn nfw Dimfnsion( buttonWidti, buttonWidti - 2 );
            }
            flsf if ( gftDirfdtion() == SOUTH )
            {
                rfturn nfw Dimfnsion( buttonWidti, buttonWidti - (isFrffStbnding ? 1 : 2) );
            }
            flsf if ( gftDirfdtion() == EAST )
            {
                rfturn nfw Dimfnsion( buttonWidti - (isFrffStbnding ? 1 : 2), buttonWidti );
            }
            flsf if ( gftDirfdtion() == WEST )
            {
                rfturn nfw Dimfnsion( buttonWidti - 2, buttonWidti );
            }
            flsf
            {
                rfturn nfw Dimfnsion( 0, 0 );
            }
        }

        publid Dimfnsion gftMinimumSizf()
        {
            rfturn gftPrfffrrfdSizf();
        }

        publid Dimfnsion gftMbximumSizf()
        {
            rfturn nfw Dimfnsion( Intfgfr.MAX_VALUE, Intfgfr.MAX_VALUE );
        }

        /**
         * Rfturns tif widti of tif button.
         *
         * @rfturn tif widti of tif button
         */
        publid int gftButtonWidti() {
            rfturn buttonWidti;
        }
}
