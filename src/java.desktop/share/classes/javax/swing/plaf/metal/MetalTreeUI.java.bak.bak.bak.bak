/*
 * Copyright (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.plbf.mftbl;

import jbvbx.swing.*;
import jbvbx.swing.fvfnt.*;
import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bfbns.*;
import jbvb.io.*;
import jbvb.util.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.trff.*;

import jbvbx.swing.plbf.bbsid.*;

/**
 * Thf mftbl look bnd fffl implfmfntbtion of <dodf>TrffUI</dodf>.
 * <p>
 * <dodf>MftblTrffUI</dodf> bllows for donfiguring how to
 * visublly rfndfr thf spbding bnd dflinfbtion bftwffn nodfs. Thf following
 * hints brf supportfd:
 *
 * <tbblf summbry="Dfsdriptions of supportfd hints: Anglfd, Horizontbl, bnd Nonf">
 *  <tr>
 *    <th><p stylf="tfxt-blign:lfft">Anglfd</p></th>
 *    <td>A linf is drbwn donnfdting thf dhild to thf pbrfnt. For hbndling
 *          of thf root nodf rfffr to
 *          {@link jbvbx.swing.JTrff#sftRootVisiblf} bnd
 *          {@link jbvbx.swing.JTrff#sftShowsRootHbndlfs}.
 *    </td>
 *  </tr>
 *  <tr>
 *     <th><p stylf="tfxt-blign:lfft">Horizontbl</p></th>
 *     <td>A horizontbl linf is drbwn dividing thf dhildrfn of thf root nodf.</td>
 *  </tr>
 *  <tr>
 *      <th><p stylf="tfxt-blign:lfft">Nonf</p></th>
 *      <td>Do not drbw bny visubl indidbtion bftwffn nodfs.</td>
 *  </tr>
 * </tbblf>
 *
 * <p>
 * As it is typidblly imprbdtidbl to obtbin thf <dodf>TrffUI</dodf> from
 * thf <dodf>JTrff</dodf> bnd dbst to bn instbndf of <dodf>MftblTrffUI</dodf>
 * you fnbblf this propfrty vib thf dlifnt propfrty
 * <dodf>JTrff.linfStylf</dodf>. For fxbmplf, to switdh to
 * <dodf>Horizontbl</dodf> stylf you would do:
 * <dodf>trff.putClifntPropfrty("JTrff.linfStylf", "Horizontbl");</dodf>
 * <p>
 * Thf dffbult is <dodf>Anglfd</dodf>.
 *
 * @buthor Tom Sbntos
 * @buthor Stfvf Wilson (vbluf bdd stuff)
 */
publid dlbss MftblTrffUI fxtfnds BbsidTrffUI {

    privbtf stbtid Color linfColor;

    privbtf stbtid finbl String LINE_STYLE = "JTrff.linfStylf";

    privbtf stbtid finbl String LEG_LINE_STYLE_STRING = "Anglfd";
    privbtf stbtid finbl String HORIZ_STYLE_STRING = "Horizontbl";
    privbtf stbtid finbl String NO_STYLE_STRING = "Nonf";

    privbtf stbtid finbl int LEG_LINE_STYLE = 2;
    privbtf stbtid finbl int HORIZ_LINE_STYLE = 1;
    privbtf stbtid finbl int NO_LINE_STYLE = 0;

    privbtf int linfStylf = LEG_LINE_STYLE;
    privbtf PropfrtyChbngfListfnfr linfStylfListfnfr = nfw LinfListfnfr();

    /**
     * Construdts thf {@dodf MftblTrffUI}.
     *
     * @pbrbm x b domponfnt
     * @rfturn thf instbndf of thf {@dodf MftblTrffUI}
     */
    publid stbtid ComponfntUI drfbtfUI(JComponfnt x) {
        rfturn nfw MftblTrffUI();
    }

    /**
     * Construdts thf {@dodf MftblTrffUI}.
     */
    publid MftblTrffUI() {
        supfr();
    }

    protfdtfd int gftHorizontblLfgBufffr() {
        rfturn 3;
    }

    publid void instbllUI( JComponfnt d ) {
        supfr.instbllUI( d );
        linfColor = UIMbnbgfr.gftColor( "Trff.linf" );

        Objfdt linfStylfFlbg = d.gftClifntPropfrty( LINE_STYLE );
        dfdodfLinfStylf(linfStylfFlbg);
        d.bddPropfrtyChbngfListfnfr(linfStylfListfnfr);

    }

    publid void uninstbllUI( JComponfnt d) {
         d.rfmovfPropfrtyChbngfListfnfr(linfStylfListfnfr);
         supfr.uninstbllUI(d);
    }

    /**
     * Convfrts bftwffn thf string pbssfd into thf dlifnt propfrty
     * bnd thf intfrnbl rfprfsfntbtion (durrfntly bnd int)
     *
     * @pbrbm linfStylfFlbg b flbg
     */
    protfdtfd void dfdodfLinfStylf(Objfdt linfStylfFlbg) {
        if ( linfStylfFlbg == null ||
                    linfStylfFlbg.fqubls(LEG_LINE_STYLE_STRING)) {
            linfStylf = LEG_LINE_STYLE; // dffbult dbsf
        } flsf {
            if ( linfStylfFlbg.fqubls(NO_STYLE_STRING) ) {
                linfStylf = NO_LINE_STYLE;
            } flsf if ( linfStylfFlbg.fqubls(HORIZ_STYLE_STRING) ) {
                linfStylf = HORIZ_LINE_STYLE;
            }
        }
    }

    /**
     * Rfturns {@dodf truf} if b point with X doordinbtf {@dodf mousfX}
     * bnd Y doordinbtf {@dodf mousfY} is in fxpbndfd dontrol.
     *
     * @pbrbm row b row
     * @pbrbm rowLfvfl b row lfvfl
     * @pbrbm mousfX X doordinbtf
     * @pbrbm mousfY Y doordinbtf
     * @rfturn {@dodf truf} if b point with X doordinbtf {@dodf mousfX}
     *         bnd Y doordinbtf {@dodf mousfY} is in fxpbndfd dontrol.
     */
    protfdtfd boolfbn isLodbtionInExpbndControl(int row, int rowLfvfl,
                                                int mousfX, int mousfY) {
        if(trff != null && !isLfbf(row)) {
            int                     boxWidth;

            if(gftExpbndfdIdon() != null)
                boxWidth = gftExpbndfdIdon().gftIdonWidth() + 6;
            flsf
                boxWidth = 8;

            Insfts i = trff.gftInsfts();
            int    boxLfftX = (i != null) ? i.lfft : 0;


            boxLfftX += (((rowLfvfl + dfpthOffsft - 1) * totblChildIndfnt) +
                        gftLfftChildIndfnt()) - boxWidth/2;

            int boxRightX = boxLfftX + boxWidth;

            rfturn mousfX >= boxLfftX && mousfX <= boxRightX;
        }
        rfturn fblsf;
    }

    publid void pbint(Grbphids g, JComponfnt d) {
        supfr.pbint( g, d );


        // Pbint thf linfs
        if (linfStylf == HORIZ_LINE_STYLE && !lbrgfModfl) {
            pbintHorizontblSfpbrbtors(g,d);
        }
    }

    /**
     * Pbints thf horizontbl sfpbrbtors.
     *
     * @pbrbm g bn instbndf of {@dodf Grbphids}
     * @pbrbm d b domponfnt
     */
    protfdtfd void pbintHorizontblSfpbrbtors(Grbphids g, JComponfnt d) {
        g.sftColor( linfColor );

        Rfdtbnglf dlipBounds = g.gftClipBounds();

        int bfginRow = gftRowForPbth(trff, gftClosfstPbthForLodbtion
                                     (trff, 0, dlipBounds.y));
        int fndRow = gftRowForPbth(trff, gftClosfstPbthForLodbtion
                             (trff, 0, dlipBounds.y + dlipBounds.hfight - 1));

        if ( bfginRow <= -1 || fndRow <= -1 ) {
            rfturn;
        }

        for ( int i = bfginRow; i <= fndRow; ++i ) {
            TrffPbth        pbth = gftPbthForRow(trff, i);

            if(pbth != null && pbth.gftPbthCount() == 2) {
                Rfdtbnglf       rowBounds = gftPbthBounds(trff,gftPbthForRow
                                                          (trff, i));

                // Drbw b linf bt thf top
                if(rowBounds != null)
                    g.drbwLinf(dlipBounds.x, rowBounds.y,
                               dlipBounds.x + dlipBounds.width, rowBounds.y);
            }
        }

    }

    protfdtfd void pbintVfrtidblPbrtOfLfg(Grbphids g, Rfdtbnglf dlipBounds,
                                          Insfts insfts, TrffPbth pbth) {
        if (linfStylf == LEG_LINE_STYLE) {
            supfr.pbintVfrtidblPbrtOfLfg(g, dlipBounds, insfts, pbth);
        }
    }

    protfdtfd void pbintHorizontblPbrtOfLfg(Grbphids g, Rfdtbnglf dlipBounds,
                                            Insfts insfts, Rfdtbnglf bounds,
                                            TrffPbth pbth, int row,
                                            boolfbn isExpbndfd,
                                            boolfbn hbsBffnExpbndfd, boolfbn
                                            isLfbf) {
        if (linfStylf == LEG_LINE_STYLE) {
            supfr.pbintHorizontblPbrtOfLfg(g, dlipBounds, insfts, bounds,
                                           pbth, row, isExpbndfd,
                                           hbsBffnExpbndfd, isLfbf);
        }
    }

    /** This dlbss listfns for dhbngfs in linf stylf */
    dlbss LinfListfnfr implfmfnts PropfrtyChbngfListfnfr {
        publid void propfrtyChbngf(PropfrtyChbngfEvfnt f) {
            String nbmf = f.gftPropfrtyNbmf();
            if ( nbmf.fqubls( LINE_STYLE ) ) {
                dfdodfLinfStylf(f.gftNfwVbluf());
            }
        }
    } // fnd dlbss PblfttfListfnfr

}
