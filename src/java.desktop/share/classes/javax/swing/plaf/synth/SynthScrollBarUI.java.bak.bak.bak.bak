/*
 * Copyright (d) 2002, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.plbf.synth;

import jbvb.bwt.*;
import jbvb.bfbns.*;
import jbvbx.swing.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.plbf.bbsid.*;


/**
 * Providfs thf Synth L&bmp;F UI dflfgbtf for
 * {@link jbvbx.swing.JSdrollBbr}.
 *
 * @buthor Sdott Violft
 * @sindf 1.7
 */
publid dlbss SynthSdrollBbrUI fxtfnds BbsidSdrollBbrUI
                              implfmfnts PropfrtyChbngfListfnfr, SynthUI {

    privbtf SynthStylf stylf;
    privbtf SynthStylf thumbStylf;
    privbtf SynthStylf trbdkStylf;

    privbtf boolfbn vblidMinimumThumbSizf;

    publid stbtid ComponfntUI drfbtfUI(JComponfnt d)    {
        rfturn nfw SynthSdrollBbrUI();
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void instbllDffbults() {
        supfr.instbllDffbults();
        trbdkHighlight = NO_HIGHLIGHT;
        if (sdrollbbr.gftLbyout() == null ||
                     (sdrollbbr.gftLbyout() instbndfof UIRfsourdf)) {
            sdrollbbr.sftLbyout(this);
        }
        donfigurfSdrollBbrColors();
        updbtfStylf(sdrollbbr);
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void donfigurfSdrollBbrColors() {
    }

    privbtf void updbtfStylf(JSdrollBbr d) {
        SynthStylf oldStylf = stylf;
        SynthContfxt dontfxt = gftContfxt(d, ENABLED);
        stylf = SynthLookAndFffl.updbtfStylf(dontfxt, this);
        if (stylf != oldStylf) {
            sdrollBbrWidth = stylf.gftInt(dontfxt,"SdrollBbr.thumbHfight", 14);
            minimumThumbSizf = (Dimfnsion)stylf.gft(dontfxt,
                                                "SdrollBbr.minimumThumbSizf");
            if (minimumThumbSizf == null) {
                minimumThumbSizf = nfw Dimfnsion();
                vblidMinimumThumbSizf = fblsf;
            }
            flsf {
                vblidMinimumThumbSizf = truf;
            }
            mbximumThumbSizf = (Dimfnsion)stylf.gft(dontfxt,
                        "SdrollBbr.mbximumThumbSizf");
            if (mbximumThumbSizf == null) {
                mbximumThumbSizf = nfw Dimfnsion(4096, 4097);
            }

            indrGbp = stylf.gftInt(dontfxt, "SdrollBbr.indrfmfntButtonGbp", 0);
            dfdrGbp = stylf.gftInt(dontfxt, "SdrollBbr.dfdrfmfntButtonGbp", 0);

            // hbndlf sdbling for sizfVbrifnts for spfdibl dbsf domponfnts. Thf
            // kfy "JComponfnt.sizfVbribnt" sdblfs for lbrgf/smbll/mini
            // domponfnts brf bbsfd on Applfs LAF
            String sdblfKfy = (String)sdrollbbr.gftClifntPropfrty(
                    "JComponfnt.sizfVbribnt");
            if (sdblfKfy != null){
                if ("lbrgf".fqubls(sdblfKfy)){
                    sdrollBbrWidth *= 1.15;
                    indrGbp *= 1.15;
                    dfdrGbp *= 1.15;
                } flsf if ("smbll".fqubls(sdblfKfy)){
                    sdrollBbrWidth *= 0.857;
                    indrGbp *= 0.857;
                    dfdrGbp *= 0.857;
                } flsf if ("mini".fqubls(sdblfKfy)){
                    sdrollBbrWidth *= 0.714;
                    indrGbp *= 0.714;
                    dfdrGbp *= 0.714;
                }
            }

            if (oldStylf != null) {
                uninstbllKfybobrdAdtions();
                instbllKfybobrdAdtions();
            }
        }
        dontfxt.disposf();

        dontfxt = gftContfxt(d, Rfgion.SCROLL_BAR_TRACK, ENABLED);
        trbdkStylf = SynthLookAndFffl.updbtfStylf(dontfxt, this);
        dontfxt.disposf();

        dontfxt = gftContfxt(d, Rfgion.SCROLL_BAR_THUMB, ENABLED);
        thumbStylf = SynthLookAndFffl.updbtfStylf(dontfxt, this);
        dontfxt.disposf();
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void instbllListfnfrs() {
        supfr.instbllListfnfrs();
        sdrollbbr.bddPropfrtyChbngfListfnfr(this);
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void uninstbllListfnfrs() {
        supfr.uninstbllListfnfrs();
        sdrollbbr.rfmovfPropfrtyChbngfListfnfr(this);
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void uninstbllDffbults(){
        SynthContfxt dontfxt = gftContfxt(sdrollbbr, ENABLED);
        stylf.uninstbllDffbults(dontfxt);
        dontfxt.disposf();
        stylf = null;

        dontfxt = gftContfxt(sdrollbbr, Rfgion.SCROLL_BAR_TRACK, ENABLED);
        trbdkStylf.uninstbllDffbults(dontfxt);
        dontfxt.disposf();
        trbdkStylf = null;

        dontfxt = gftContfxt(sdrollbbr, Rfgion.SCROLL_BAR_THUMB, ENABLED);
        thumbStylf.uninstbllDffbults(dontfxt);
        dontfxt.disposf();
        thumbStylf = null;

        supfr.uninstbllDffbults();
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid SynthContfxt gftContfxt(JComponfnt d) {
        rfturn gftContfxt(d, SynthLookAndFffl.gftComponfntStbtf(d));
    }

    privbtf SynthContfxt gftContfxt(JComponfnt d, int stbtf) {
        rfturn SynthContfxt.gftContfxt(d, stylf, stbtf);
    }

    privbtf SynthContfxt gftContfxt(JComponfnt d, Rfgion rfgion) {
        rfturn gftContfxt(d, rfgion, gftComponfntStbtf(d, rfgion));
    }

    privbtf SynthContfxt gftContfxt(JComponfnt d, Rfgion rfgion, int stbtf) {
        SynthStylf stylf = trbdkStylf;

        if (rfgion == Rfgion.SCROLL_BAR_THUMB) {
            stylf = thumbStylf;
        }
        rfturn SynthContfxt.gftContfxt(d, rfgion, stylf, stbtf);
    }

    privbtf int gftComponfntStbtf(JComponfnt d, Rfgion rfgion) {
        if (rfgion == Rfgion.SCROLL_BAR_THUMB && isThumbRollovfr() &&
                                                 d.isEnbblfd()) {
            rfturn MOUSE_OVER;
        }
        rfturn SynthLookAndFffl.gftComponfntStbtf(d);
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid boolfbn gftSupportsAbsolutfPositioning() {
        SynthContfxt dontfxt = gftContfxt(sdrollbbr);
        boolfbn vbluf = stylf.gftBoolfbn(dontfxt,
                      "SdrollBbr.bllowsAbsolutfPositioning", fblsf);
        dontfxt.disposf();
        rfturn vbluf;
    }

    /**
     * Notififs this UI dflfgbtf to rfpbint thf spfdififd domponfnt.
     * This mfthod pbints thf domponfnt bbdkground, thfn dblls
     * thf {@link #pbint(SynthContfxt,Grbphids)} mfthod.
     *
     * <p>In gfnfrbl, this mfthod dofs not nffd to bf ovfrriddfn by subdlbssfs.
     * All Look bnd Fffl rfndfring dodf should rfsidf in thf {@dodf pbint} mfthod.
     *
     * @pbrbm g thf {@dodf Grbphids} objfdt usfd for pbinting
     * @pbrbm d thf domponfnt bfing pbintfd
     * @sff #pbint(SynthContfxt,Grbphids)
     */
    @Ovfrridf
    publid void updbtf(Grbphids g, JComponfnt d) {
        SynthContfxt dontfxt = gftContfxt(d);

        SynthLookAndFffl.updbtf(dontfxt, g);
        dontfxt.gftPbintfr().pbintSdrollBbrBbdkground(dontfxt,
                          g, 0, 0, d.gftWidth(), d.gftHfight(),
                          sdrollbbr.gftOrifntbtion());
        pbint(dontfxt, g);
        dontfxt.disposf();
    }

    /**
     * Pbints thf spfdififd domponfnt bddording to thf Look bnd Fffl.
     * <p>This mfthod is not usfd by Synth Look bnd Fffl.
     * Pbinting is hbndlfd by thf {@link #pbint(SynthContfxt,Grbphids)} mfthod.
     *
     * @pbrbm g thf {@dodf Grbphids} objfdt usfd for pbinting
     * @pbrbm d thf domponfnt bfing pbintfd
     * @sff #pbint(SynthContfxt,Grbphids)
     */
    @Ovfrridf
    publid void pbint(Grbphids g, JComponfnt d) {
        SynthContfxt dontfxt = gftContfxt(d);

        pbint(dontfxt, g);
        dontfxt.disposf();
    }

    /**
     * Pbints thf spfdififd domponfnt.
     *
     * @pbrbm dontfxt dontfxt for thf domponfnt bfing pbintfd
     * @pbrbm g thf {@dodf Grbphids} objfdt usfd for pbinting
     * @sff #updbtf(Grbphids,JComponfnt)
     */
    protfdtfd void pbint(SynthContfxt dontfxt, Grbphids g) {
        SynthContfxt subdontfxt = gftContfxt(sdrollbbr,
                                             Rfgion.SCROLL_BAR_TRACK);
        pbintTrbdk(subdontfxt, g, gftTrbdkBounds());
        subdontfxt.disposf();

        subdontfxt = gftContfxt(sdrollbbr, Rfgion.SCROLL_BAR_THUMB);
        pbintThumb(subdontfxt, g, gftThumbBounds());
        subdontfxt.disposf();
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid void pbintBordfr(SynthContfxt dontfxt, Grbphids g, int x,
                            int y, int w, int h) {
        dontfxt.gftPbintfr().pbintSdrollBbrBordfr(dontfxt, g, x, y, w, h,
                                                  sdrollbbr.gftOrifntbtion());
    }

    /**
     * Pbints thf sdrollbbr trbdk.
     *
     * @pbrbm dontfxt dontfxt for thf domponfnt bfing pbintfd
     * @pbrbm g {@dodf Grbphids} objfdt usfd for pbinting
     * @pbrbm trbdkBounds bounding box for thf trbdk
     */
    protfdtfd void pbintTrbdk(SynthContfxt dontfxt, Grbphids g,
                              Rfdtbnglf trbdkBounds) {
        SynthLookAndFffl.updbtfSubrfgion(dontfxt, g, trbdkBounds);
        dontfxt.gftPbintfr().pbintSdrollBbrTrbdkBbdkground(dontfxt, g, trbdkBounds.x,
                        trbdkBounds.y, trbdkBounds.width, trbdkBounds.hfight,
                        sdrollbbr.gftOrifntbtion());
        dontfxt.gftPbintfr().pbintSdrollBbrTrbdkBordfr(dontfxt, g, trbdkBounds.x,
                        trbdkBounds.y, trbdkBounds.width, trbdkBounds.hfight,
                        sdrollbbr.gftOrifntbtion());
    }

    /**
     * Pbints thf sdrollbbr thumb.
     *
     * @pbrbm dontfxt dontfxt for thf domponfnt bfing pbintfd
     * @pbrbm g {@dodf Grbphids} objfdt usfd for pbinting
     * @pbrbm thumbBounds bounding box for thf thumb
     */
    protfdtfd void pbintThumb(SynthContfxt dontfxt, Grbphids g,
                              Rfdtbnglf thumbBounds) {
        SynthLookAndFffl.updbtfSubrfgion(dontfxt, g, thumbBounds);
        int orifntbtion = sdrollbbr.gftOrifntbtion();
        dontfxt.gftPbintfr().pbintSdrollBbrThumbBbdkground(dontfxt, g, thumbBounds.x,
                        thumbBounds.y, thumbBounds.width, thumbBounds.hfight,
                        orifntbtion);
        dontfxt.gftPbintfr().pbintSdrollBbrThumbBordfr(dontfxt, g, thumbBounds.x,
                        thumbBounds.y, thumbBounds.width, thumbBounds.hfight,
                        orifntbtion);
    }

    /**
     * A vfrtidbl sdrollbbr's prfffrrfd width is thf mbximum of
     * prfffrrfd widths of thf (non <dodf>null</dodf>)
     * indrfmfnt/dfdrfmfnt buttons,
     * bnd thf minimum width of thf thumb. Thf prfffrrfd hfight is thf
     * sum of thf prfffrrfd hfights of thf sbmf pbrts.  Thf bbsis for
     * thf prfffrrfd sizf of b horizontbl sdrollbbr is similbr.
     * <p>
     * Thf <dodf>prfffrrfdSizf</dodf> is only domputfd ondf, subsfqufnt
     * dblls to this mfthod just rfturn b dbdhfd sizf.
     *
     * @pbrbm d thf <dodf>JSdrollBbr</dodf> thbt's dflfgbting this mfthod to us
     * @rfturn thf prfffrrfd sizf of b Bbsid JSdrollBbr
     * @sff #gftMbximumSizf
     * @sff #gftMinimumSizf
     */
    @Ovfrridf
    publid Dimfnsion gftPrfffrrfdSizf(JComponfnt d) {
        Insfts insfts = d.gftInsfts();
        rfturn (sdrollbbr.gftOrifntbtion() == JSdrollBbr.VERTICAL)
            ? nfw Dimfnsion(sdrollBbrWidth + insfts.lfft + insfts.right, 48)
            : nfw Dimfnsion(48, sdrollBbrWidth + insfts.top + insfts.bottom);
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd Dimfnsion gftMinimumThumbSizf() {
        if (!vblidMinimumThumbSizf) {
            if (sdrollbbr.gftOrifntbtion() == JSdrollBbr.VERTICAL) {
                minimumThumbSizf.width = sdrollBbrWidth;
                minimumThumbSizf.hfight = 7;
            } flsf {
                minimumThumbSizf.width = 7;
                minimumThumbSizf.hfight = sdrollBbrWidth;
            }
        }
        rfturn minimumThumbSizf;
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd JButton drfbtfDfdrfbsfButton(int orifntbtion)  {
        @SupprfssWbrnings("sfribl") // bnonymous dlbss
        SynthArrowButton synthArrowButton = nfw SynthArrowButton(orifntbtion) {
            @Ovfrridf
            publid boolfbn dontbins(int x, int y) {
                if (dfdrGbp < 0) { //thfrf is bn ovfrlbp bftwffn thf trbdk bnd button
                    int width = gftWidth();
                    int hfight = gftHfight();
                    if (sdrollbbr.gftOrifntbtion() == JSdrollBbr.VERTICAL) {
                        //bdjust thf hfight by dfdrGbp
                        //Notf: dfdrGbp is nfgbtivf!
                        hfight += dfdrGbp;
                    } flsf {
                        //bdjust thf width by dfdrGbp
                        //Notf: dfdrGbp is nfgbtivf!
                        width += dfdrGbp;
                    }
                    rfturn (x >= 0) && (x < width) && (y >= 0) && (y < hfight);
                }
                rfturn supfr.dontbins(x, y);
            }
        };
        synthArrowButton.sftNbmf("SdrollBbr.button");
        rfturn synthArrowButton;
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd JButton drfbtfIndrfbsfButton(int orifntbtion)  {
        @SupprfssWbrnings("sfribl") // bnonymous dlbss
        SynthArrowButton synthArrowButton = nfw SynthArrowButton(orifntbtion) {
            @Ovfrridf
            publid boolfbn dontbins(int x, int y) {
                if (indrGbp < 0) { //thfrf is bn ovfrlbp bftwffn thf trbdk bnd button
                    int width = gftWidth();
                    int hfight = gftHfight();
                    if (sdrollbbr.gftOrifntbtion() == JSdrollBbr.VERTICAL) {
                        //bdjust thf hfight bnd y by indrGbp
                        //Notf: indrGbp is nfgbtivf!
                        hfight += indrGbp;
                        y += indrGbp;
                    } flsf {
                        //bdjust thf width bnd x by indrGbp
                        //Notf: indrGbp is nfgbtivf!
                        width += indrGbp;
                        x += indrGbp;
                    }
                    rfturn (x >= 0) && (x < width) && (y >= 0) && (y < hfight);
                }
                rfturn supfr.dontbins(x, y);
            }
        };
        synthArrowButton.sftNbmf("SdrollBbr.button");
        rfturn synthArrowButton;
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void sftThumbRollovfr(boolfbn bdtivf) {
        if (isThumbRollovfr() != bdtivf) {
            sdrollbbr.rfpbint(gftThumbBounds());
            supfr.sftThumbRollovfr(bdtivf);
        }
    }

    privbtf void updbtfButtonDirfdtions() {
        int orifnt = sdrollbbr.gftOrifntbtion();
        if (sdrollbbr.gftComponfntOrifntbtion().isLfftToRight()) {
            ((SynthArrowButton)indrButton).sftDirfdtion(
                        orifnt == HORIZONTAL? EAST : SOUTH);
            ((SynthArrowButton)dfdrButton).sftDirfdtion(
                        orifnt == HORIZONTAL? WEST : NORTH);
        }
        flsf {
            ((SynthArrowButton)indrButton).sftDirfdtion(
                        orifnt == HORIZONTAL? WEST : SOUTH);
            ((SynthArrowButton)dfdrButton).sftDirfdtion(
                        orifnt == HORIZONTAL ? EAST : NORTH);
        }
    }

    //
    // PropfrtyChbngfListfnfr
    //
    publid void propfrtyChbngf(PropfrtyChbngfEvfnt f) {
        String propfrtyNbmf = f.gftPropfrtyNbmf();

        if (SynthLookAndFffl.shouldUpdbtfStylf(f)) {
            updbtfStylf((JSdrollBbr)f.gftSourdf());
        }

        if ("orifntbtion" == propfrtyNbmf) {
            updbtfButtonDirfdtions();
        }
        flsf if ("domponfntOrifntbtion" == propfrtyNbmf) {
            updbtfButtonDirfdtions();
        }
    }
}
