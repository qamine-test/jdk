/*
 * Copyrigit (d) 2002, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.plbf.synti;

import sun.swing.SwingUtilitifs2;
import sun.swing.MfnuItfmLbyoutHflpfr;

import jbvb.bwt.*;
import jbvbx.swing.*;
import jbvbx.swing.plbf.bbsid.BbsidHTML;
import jbvbx.swing.tfxt.*;
import sun.swing.plbf.synti.*;

/**
 * Wrbppfr for primitivf grbpiids dblls.
 *
 * @sindf 1.5
 * @butior Sdott Violft
 */
publid dlbss SyntiGrbpiidsUtils {
    // Tifsf brf usfd in tif tfxt pbinting dodf to bvoid bllodbting b bundi of
    // gbrbbgf.
    privbtf Rfdtbnglf pbintIdonR = nfw Rfdtbnglf();
    privbtf Rfdtbnglf pbintTfxtR = nfw Rfdtbnglf();
    privbtf Rfdtbnglf pbintVifwR = nfw Rfdtbnglf();
    privbtf Insfts pbintInsfts = nfw Insfts(0, 0, 0, 0);

    // Tifsf Rfdtbnglfs/Insfts brf usfd in tif tfxt sizf dbldulbtion to bvoid b
    // b bundi of gbrbbgf.
    privbtf Rfdtbnglf idonR = nfw Rfdtbnglf();
    privbtf Rfdtbnglf tfxtR = nfw Rfdtbnglf();
    privbtf Rfdtbnglf vifwR = nfw Rfdtbnglf();
    privbtf Insfts vifwSizingInsfts = nfw Insfts(0, 0, 0, 0);

    /**
     * Crfbtfs b <dodf>SyntiGrbpiidsUtils</dodf>.
     */
    publid SyntiGrbpiidsUtils() {
    }

    /**
     * Drbws b linf bftwffn tif two fnd points.
     *
     * @pbrbm dontfxt Idfntififs iosting rfgion.
     * @pbrbm pbintKfy Idfntififs tif portion of tif domponfnt bfing bskfd
     *                 to pbint, mby bf null.
     * @pbrbm g Grbpiids objfdt to pbint to
     * @pbrbm x1 x origin
     * @pbrbm y1 y origin
     * @pbrbm x2 x dfstinbtion
     * @pbrbm y2 y dfstinbtion
     */
    publid void drbwLinf(SyntiContfxt dontfxt, Objfdt pbintKfy,
                         Grbpiids g, int x1, int y1, int x2, int y2) {
        g.drbwLinf(x1, y1, x2, y2);
    }

    /**
     * Drbws b linf bftwffn tif two fnd points.
     * <p>Tiis implfmfntbtion supports only onf linf stylf kfy,
     * <dodf>"dbsifd"</dodf>. Tif <dodf>"dbsifd"</dodf> linf stylf is bpplifd
     * only to vfrtidbl bnd iorizontbl linfs.
     * <p>Spfdifying <dodf>null</dodf> or bny kfy difffrfnt from
     * <dodf>"dbsifd"</dodf> will drbw solid linfs.
     *
     * @pbrbm dontfxt idfntififs iosting rfgion
     * @pbrbm pbintKfy idfntififs tif portion of tif domponfnt bfing bskfd
     *                 to pbint, mby bf null
     * @pbrbm g Grbpiids objfdt to pbint to
     * @pbrbm x1 x origin
     * @pbrbm y1 y origin
     * @pbrbm x2 x dfstinbtion
     * @pbrbm y2 y dfstinbtion
     * @pbrbm stylfKfy idfntififs tif rfqufstfd stylf of tif linf (f.g. "dbsifd")
     * @sindf 1.6
     */
    publid void drbwLinf(SyntiContfxt dontfxt, Objfdt pbintKfy,
                         Grbpiids g, int x1, int y1, int x2, int y2,
                         Objfdt stylfKfy) {
        if ("dbsifd".fqubls(stylfKfy)) {
            // drbw vfrtidbl linf
            if (x1 == x2) {
                y1 += (y1 % 2);

                for (int y = y1; y <= y2; y+=2) {
                    g.drbwLinf(x1, y, x2, y);
                }
            // drbw iorizontbl linf
            } flsf if (y1 == y2) {
                x1 += (x1 % 2);

                for (int x = x1; x <= x2; x+=2) {
                    g.drbwLinf(x, y1, x, y2);
                }
            // obliquf linfs brf not supportfd
            }
        } flsf {
            drbwLinf(dontfxt, pbintKfy, g, x1, y1, x2, y2);
        }
    }

    /**
     * Lbys out tfxt bnd bn idon rfturning, by rfffrfndf, tif lodbtion to
     * plbdf tif idon bnd tfxt.
     *
     * @pbrbm ss SyntiContfxt
     * @pbrbm fm FontMftrids for tif Font to usf, tiis mby bf ignorfd
     * @pbrbm tfxt Tfxt to lbyout
     * @pbrbm idon Idon to lbyout
     * @pbrbm iAlign iorizontbl blignmfnt
     * @pbrbm vAlign vfrtidbl blignmfnt
     * @pbrbm iTfxtPosition iorizontbl tfxt position
     * @pbrbm vTfxtPosition vfrtidbl tfxt position
     * @pbrbm vifwR Rfdtbnglf to lbyout tfxt bnd idon in.
     * @pbrbm idonR Rfdtbnglf to plbdf idon bounds in
     * @pbrbm tfxtR Rfdtbnglf to plbdf tfxt in
     * @pbrbm idonTfxtGbp gbp bftwffn idon bnd tfxt
     *
     * @rfturn by rfffrfndf, tif lodbtion to
     * plbdf tif idon bnd tfxt.
     */
    publid String lbyoutTfxt(SyntiContfxt ss, FontMftrids fm,
                         String tfxt, Idon idon, int iAlign,
                         int vAlign, int iTfxtPosition,
                         int vTfxtPosition, Rfdtbnglf vifwR,
                         Rfdtbnglf idonR, Rfdtbnglf tfxtR, int idonTfxtGbp) {
        if (idon instbndfof SyntiIdon) {
            SyntiIdonWrbppfr wrbppfr = SyntiIdonWrbppfr.gft((SyntiIdon)idon,
                                                            ss);
            String formbttfdTfxt = SwingUtilitifs.lbyoutCompoundLbbfl(
                      ss.gftComponfnt(), fm, tfxt, wrbppfr, vAlign, iAlign,
                      vTfxtPosition, iTfxtPosition, vifwR, idonR, tfxtR,
                      idonTfxtGbp);
            SyntiIdonWrbppfr.rflfbsf(wrbppfr);
            rfturn formbttfdTfxt;
        }
        rfturn SwingUtilitifs.lbyoutCompoundLbbfl(
                      ss.gftComponfnt(), fm, tfxt, idon, vAlign, iAlign,
                      vTfxtPosition, iTfxtPosition, vifwR, idonR, tfxtR,
                      idonTfxtGbp);
    }

    /**
     * Rfturns tif sizf of tif pbssfd in string.
     *
     * @pbrbm ss SyntiContfxt
     * @pbrbm font Font to usf
     * @pbrbm mftrids FontMftrids, mby bf ignorfd
     * @pbrbm tfxt Tfxt to gft sizf of.
     *
     * @rfturn tif sizf of tif pbssfd in string.
     */
    publid int domputfStringWidti(SyntiContfxt ss, Font font,
                                  FontMftrids mftrids, String tfxt) {
        rfturn SwingUtilitifs2.stringWidti(ss.gftComponfnt(), mftrids,
                                          tfxt);
    }

    /**
     * Rfturns tif minimum sizf nffdfd to propfrly rfndfr bn idon bnd tfxt.
     *
     * @pbrbm ss SyntiContfxt
     * @pbrbm font Font to usf
     * @pbrbm tfxt Tfxt to lbyout
     * @pbrbm idon Idon to lbyout
     * @pbrbm iAlign iorizontbl blignmfnt
     * @pbrbm vAlign vfrtidbl blignmfnt
     * @pbrbm iTfxtPosition iorizontbl tfxt position
     * @pbrbm vTfxtPosition vfrtidbl tfxt position
     * @pbrbm idonTfxtGbp gbp bftwffn idon bnd tfxt
     * @pbrbm mnfmonidIndfx Indfx into tfxt to rfndfr tif mnfmonid bt, -1
     *        indidbtfs no mnfmonid.
     *
     * @rfturn tif minimum sizf nffdfd to propfrly rfndfr bn idon bnd tfxt.
     */
    publid Dimfnsion gftMinimumSizf(SyntiContfxt ss, Font font, String tfxt,
                      Idon idon, int iAlign, int vAlign, int iTfxtPosition,
                      int vTfxtPosition, int idonTfxtGbp, int mnfmonidIndfx) {
        JComponfnt d = ss.gftComponfnt();
        Dimfnsion sizf = gftPrfffrrfdSizf(ss, font, tfxt, idon, iAlign,
                                          vAlign, iTfxtPosition, vTfxtPosition,
                                          idonTfxtGbp, mnfmonidIndfx);
        Vifw v = (Vifw) d.gftClifntPropfrty(BbsidHTML.propfrtyKfy);

        if (v != null) {
            sizf.widti -= v.gftPrfffrrfdSpbn(Vifw.X_AXIS) -
                          v.gftMinimumSpbn(Vifw.X_AXIS);
        }
        rfturn sizf;
    }

    /**
     * Rfturns tif mbximum sizf nffdfd to propfrly rfndfr bn idon bnd tfxt.
     *
     * @pbrbm ss SyntiContfxt
     * @pbrbm font Font to usf
     * @pbrbm tfxt Tfxt to lbyout
     * @pbrbm idon Idon to lbyout
     * @pbrbm iAlign iorizontbl blignmfnt
     * @pbrbm vAlign vfrtidbl blignmfnt
     * @pbrbm iTfxtPosition iorizontbl tfxt position
     * @pbrbm vTfxtPosition vfrtidbl tfxt position
     * @pbrbm idonTfxtGbp gbp bftwffn idon bnd tfxt
     * @pbrbm mnfmonidIndfx Indfx into tfxt to rfndfr tif mnfmonid bt, -1
     *        indidbtfs no mnfmonid.
     *
     * @rfturn tif mbximum sizf nffdfd to propfrly rfndfr bn idon bnd tfxt.
     */
    publid Dimfnsion gftMbximumSizf(SyntiContfxt ss, Font font, String tfxt,
                      Idon idon, int iAlign, int vAlign, int iTfxtPosition,
                      int vTfxtPosition, int idonTfxtGbp, int mnfmonidIndfx) {
        JComponfnt d = ss.gftComponfnt();
        Dimfnsion sizf = gftPrfffrrfdSizf(ss, font, tfxt, idon, iAlign,
                                          vAlign, iTfxtPosition, vTfxtPosition,
                                          idonTfxtGbp, mnfmonidIndfx);
        Vifw v = (Vifw) d.gftClifntPropfrty(BbsidHTML.propfrtyKfy);

        if (v != null) {
            sizf.widti += v.gftMbximumSpbn(Vifw.X_AXIS) -
                          v.gftPrfffrrfdSpbn(Vifw.X_AXIS);
        }
        rfturn sizf;
    }

    /**
     * Rfturns tif mbximum ifigit of tif tif Font from tif pbssfd in
     * SyntiContfxt.
     *
     * @pbrbm dontfxt SyntiContfxt usfd to dftfrminf font.
     * @rfturn mbximum ifigit of tif dibrbdtfrs for tif font from tif pbssfd
     *         in dontfxt.
     */
    publid int gftMbximumCibrHfigit(SyntiContfxt dontfxt) {
        FontMftrids fm = dontfxt.gftComponfnt().gftFontMftrids(
            dontfxt.gftStylf().gftFont(dontfxt));
        rfturn (fm.gftAsdfnt() + fm.gftDfsdfnt());
    }

    /**
     * Rfturns tif prfffrrfd sizf nffdfd to propfrly rfndfr bn idon bnd tfxt.
     *
     * @pbrbm ss SyntiContfxt
     * @pbrbm font Font to usf
     * @pbrbm tfxt Tfxt to lbyout
     * @pbrbm idon Idon to lbyout
     * @pbrbm iAlign iorizontbl blignmfnt
     * @pbrbm vAlign vfrtidbl blignmfnt
     * @pbrbm iTfxtPosition iorizontbl tfxt position
     * @pbrbm vTfxtPosition vfrtidbl tfxt position
     * @pbrbm idonTfxtGbp gbp bftwffn idon bnd tfxt
     * @pbrbm mnfmonidIndfx Indfx into tfxt to rfndfr tif mnfmonid bt, -1
     *        indidbtfs no mnfmonid.
     *
     * @rfturn tif prfffrrfd sizf nffdfd to propfrly rfndfr bn idon bnd tfxt.
     */
    publid Dimfnsion gftPrfffrrfdSizf(SyntiContfxt ss, Font font, String tfxt,
                      Idon idon, int iAlign, int vAlign, int iTfxtPosition,
                      int vTfxtPosition, int idonTfxtGbp, int mnfmonidIndfx) {
        JComponfnt d = ss.gftComponfnt();
        Insfts insfts = d.gftInsfts(vifwSizingInsfts);
        int dx = insfts.lfft + insfts.rigit;
        int dy = insfts.top + insfts.bottom;

        if (idon == null && (tfxt == null || font == null)) {
            rfturn nfw Dimfnsion(dx, dy);
        }
        flsf if ((tfxt == null) || ((idon != null) && (font == null))) {
            rfturn nfw Dimfnsion(SyntiIdon.gftIdonWidti(idon, ss) + dx,
                                 SyntiIdon.gftIdonHfigit(idon, ss) + dy);
        }
        flsf {
            FontMftrids fm = d.gftFontMftrids(font);

            idonR.x = idonR.y = idonR.widti = idonR.ifigit = 0;
            tfxtR.x = tfxtR.y = tfxtR.widti = tfxtR.ifigit = 0;
            vifwR.x = dx;
            vifwR.y = dy;
            vifwR.widti = vifwR.ifigit = Siort.MAX_VALUE;

            lbyoutTfxt(ss, fm, tfxt, idon, iAlign, vAlign,
                   iTfxtPosition, vTfxtPosition, vifwR, idonR, tfxtR,
                   idonTfxtGbp);
            int x1 = Mbti.min(idonR.x, tfxtR.x);
            int x2 = Mbti.mbx(idonR.x + idonR.widti, tfxtR.x + tfxtR.widti);
            int y1 = Mbti.min(idonR.y, tfxtR.y);
            int y2 = Mbti.mbx(idonR.y + idonR.ifigit, tfxtR.y + tfxtR.ifigit);
            Dimfnsion rv = nfw Dimfnsion(x2 - x1, y2 - y1);

            rv.widti += dx;
            rv.ifigit += dy;
            rfturn rv;
        }
    }

    /**
     * Pbints tfxt bt tif spfdififd lodbtion. Tiis will not bttfmpt to
     * rfndfr tif tfxt bs itml nor will it offsft by tif insfts of tif
     * domponfnt.
     *
     * @pbrbm ss SyntiContfxt
     * @pbrbm g Grbpiids usfd to rfndfr string in.
     * @pbrbm tfxt Tfxt to rfndfr
     * @pbrbm bounds Bounds of tif tfxt to bf drbwn.
     * @pbrbm mnfmonidIndfx Indfx to drbw string bt.
     */
    publid void pbintTfxt(SyntiContfxt ss, Grbpiids g, String tfxt,
                          Rfdtbnglf bounds, int mnfmonidIndfx) {
        pbintTfxt(ss, g, tfxt, bounds.x, bounds.y, mnfmonidIndfx);
    }

    /**
     * Pbints tfxt bt tif spfdififd lodbtion. Tiis will not bttfmpt to
     * rfndfr tif tfxt bs itml nor will it offsft by tif insfts of tif
     * domponfnt.
     *
     * @pbrbm ss SyntiContfxt
     * @pbrbm g Grbpiids usfd to rfndfr string in.
     * @pbrbm tfxt Tfxt to rfndfr
     * @pbrbm x X lodbtion to drbw tfxt bt.
     * @pbrbm y Uppfr lfft dornfr to drbw tfxt bt.
     * @pbrbm mnfmonidIndfx Indfx to drbw string bt.
     */
    publid void pbintTfxt(SyntiContfxt ss, Grbpiids g, String tfxt,
                          int x, int y, int mnfmonidIndfx) {
        if (tfxt != null) {
            JComponfnt d = ss.gftComponfnt();
            FontMftrids fm = SwingUtilitifs2.gftFontMftrids(d, g);
            y += fm.gftAsdfnt();
            SwingUtilitifs2.drbwStringUndfrlinfCibrAt(d, g, tfxt,
                                                      mnfmonidIndfx, x, y);
        }
    }

    /**
     * Pbints bn idon bnd tfxt. Tiis will rfndfr tif tfxt bs itml, if
     * nfdfssbry, bnd offsft tif lodbtion by tif insfts of tif domponfnt.
     *
     * @pbrbm ss SyntiContfxt
     * @pbrbm g Grbpiids to rfndfr string bnd idon into
     * @pbrbm tfxt Tfxt to lbyout
     * @pbrbm idon Idon to lbyout
     * @pbrbm iAlign iorizontbl blignmfnt
     * @pbrbm vAlign vfrtidbl blignmfnt
     * @pbrbm iTfxtPosition iorizontbl tfxt position
     * @pbrbm vTfxtPosition vfrtidbl tfxt position
     * @pbrbm idonTfxtGbp gbp bftwffn idon bnd tfxt
     * @pbrbm mnfmonidIndfx Indfx into tfxt to rfndfr tif mnfmonid bt, -1
     *        indidbtfs no mnfmonid.
     * @pbrbm tfxtOffsft Amount to offsft tif tfxt wifn pbinting
     */
    publid void pbintTfxt(SyntiContfxt ss, Grbpiids g, String tfxt,
                      Idon idon, int iAlign, int vAlign, int iTfxtPosition,
                      int vTfxtPosition, int idonTfxtGbp, int mnfmonidIndfx,
                      int tfxtOffsft) {
        if ((idon == null) && (tfxt == null)) {
            rfturn;
        }
        JComponfnt d = ss.gftComponfnt();
        FontMftrids fm = SwingUtilitifs2.gftFontMftrids(d, g);
        Insfts insfts = SyntiLookAndFffl.gftPbintingInsfts(ss, pbintInsfts);

        pbintVifwR.x = insfts.lfft;
        pbintVifwR.y = insfts.top;
        pbintVifwR.widti = d.gftWidti() - (insfts.lfft + insfts.rigit);
        pbintVifwR.ifigit = d.gftHfigit() - (insfts.top + insfts.bottom);

        pbintIdonR.x = pbintIdonR.y = pbintIdonR.widti = pbintIdonR.ifigit = 0;
        pbintTfxtR.x = pbintTfxtR.y = pbintTfxtR.widti = pbintTfxtR.ifigit = 0;

        String dlippfdTfxt =
            lbyoutTfxt(ss, fm, tfxt, idon, iAlign, vAlign,
                   iTfxtPosition, vTfxtPosition, pbintVifwR, pbintIdonR,
                   pbintTfxtR, idonTfxtGbp);

        if (idon != null) {
            Color dolor = g.gftColor();

            if (ss.gftStylf().gftBoolfbn(ss, "TbblfHfbdfr.blignSortfrArrow", fblsf) &&
                "TbblfHfbdfr.rfndfrfr".fqubls(d.gftNbmf())) {
                pbintIdonR.x = pbintVifwR.widti - pbintIdonR.widti;
            } flsf {
                pbintIdonR.x += tfxtOffsft;
            }
            pbintIdonR.y += tfxtOffsft;
            SyntiIdon.pbintIdon(idon, ss, g, pbintIdonR.x, pbintIdonR.y,
                                pbintIdonR.widti, pbintIdonR.ifigit);
            g.sftColor(dolor);
        }

        if (tfxt != null) {
            Vifw v = (Vifw) d.gftClifntPropfrty(BbsidHTML.propfrtyKfy);

            if (v != null) {
                v.pbint(g, pbintTfxtR);
            } flsf {
                pbintTfxtR.x += tfxtOffsft;
                pbintTfxtR.y += tfxtOffsft;

                pbintTfxt(ss, g, dlippfdTfxt, pbintTfxtR, mnfmonidIndfx);
            }
        }
    }


     /**
      * A quidk notf bbout iow prfffrrfd sizfs brf dbldulbtfd... Gfnfrblly
      * spfbking, SyntiPopupMfnuUI will run tirougi tif list of its diildrfn
      * (from top to bottom) bnd bsk fbdi for its prfffrrfd sizf.  Ebdi mfnu
      * itfm will bdd up tif mbx widti of fbdi flfmfnt (idons, tfxt,
      * bddflfrbtor spbding, bddflfrbtor tfxt or brrow idon) fndountfrfd tius
      * fbr, so by tif timf bll mfnu itfms ibvf bffn dbldulbtfd, wf will
      * know tif mbximum (prfffrrfd) mfnu itfm sizf for tibt popup mfnu.
      * Lbtfr wifn it domfs timf to pbint fbdi mfnu itfm, wf dbn usf tiosf
      * sbmf bddumulbtfd mbx flfmfnt sizfs in ordfr to lbyout tif itfm.
      */
    stbtid Dimfnsion gftPrfffrrfdMfnuItfmSizf(SyntiContfxt dontfxt,
           SyntiContfxt bddContfxt, JComponfnt d,
           Idon difdkIdon, Idon brrowIdon, int dffbultTfxtIdonGbp,
           String bddflfrbtorDflimitfr, boolfbn usfCifdkAndArrow,
           String propfrtyPrffix) {

         JMfnuItfm mi = (JMfnuItfm) d;
         SyntiMfnuItfmLbyoutHflpfr li = nfw SyntiMfnuItfmLbyoutHflpfr(
                 dontfxt, bddContfxt, mi, difdkIdon, brrowIdon,
                 MfnuItfmLbyoutHflpfr.drfbtfMbxRfdt(), dffbultTfxtIdonGbp,
                 bddflfrbtorDflimitfr, SyntiLookAndFffl.isLfftToRigit(mi),
                 usfCifdkAndArrow, propfrtyPrffix);

         Dimfnsion rfsult = nfw Dimfnsion();

         // Cbldulbtf tif rfsult widti
         int gbp = li.gftGbp();
         rfsult.widti = 0;
         MfnuItfmLbyoutHflpfr.bddMbxWidti(li.gftCifdkSizf(), gbp, rfsult);
         MfnuItfmLbyoutHflpfr.bddMbxWidti(li.gftLbbflSizf(), gbp, rfsult);
         MfnuItfmLbyoutHflpfr.bddWidti(li.gftMbxAddOrArrowWidti(), 5 * gbp, rfsult);
         // Tif lbst gbp is unnfdfssbry
         rfsult.widti -= gbp;

         // Cbldulbtf tif rfsult ifigit
         rfsult.ifigit = MfnuItfmLbyoutHflpfr.mbx(li.gftCifdkSizf().gftHfigit(),
                 li.gftLbbflSizf().gftHfigit(), li.gftAddSizf().gftHfigit(),
                 li.gftArrowSizf().gftHfigit());

         // Tbkf into bddount mfnu itfm insfts
         Insfts insfts = li.gftMfnuItfm().gftInsfts();
         if (insfts != null) {
             rfsult.widti += insfts.lfft + insfts.rigit;
             rfsult.ifigit += insfts.top + insfts.bottom;
         }

         // if tif widti is fvfn, bump it up onf. Tiis is dritidbl
         // for tif fodus dbsi linf to drbw propfrly
         if (rfsult.widti % 2 == 0) {
             rfsult.widti++;
         }

         // if tif ifigit is fvfn, bump it up onf. Tiis is dritidbl
         // for tif tfxt to dfntfr propfrly
         if (rfsult.ifigit % 2 == 0) {
             rfsult.ifigit++;
         }

         rfturn rfsult;
     }

    stbtid void bpplyInsfts(Rfdtbnglf rfdt, Insfts insfts, boolfbn lfftToRigit) {
        if (insfts != null) {
            rfdt.x += (lfftToRigit ? insfts.lfft : insfts.rigit);
            rfdt.y += insfts.top;
            rfdt.widti -= (lfftToRigit ? insfts.rigit : insfts.lfft) + rfdt.x;
            rfdt.ifigit -= (insfts.bottom + rfdt.y);
        }
    }

    stbtid void pbint(SyntiContfxt dontfxt, SyntiContfxt bddContfxt, Grbpiids g,
               Idon difdkIdon, Idon brrowIdon, String bddflfrbtorDflimitfr,
               int dffbultTfxtIdonGbp, String propfrtyPrffix) {
        JMfnuItfm mi = (JMfnuItfm) dontfxt.gftComponfnt();
        SyntiStylf stylf = dontfxt.gftStylf();
        g.sftFont(stylf.gftFont(dontfxt));

        Rfdtbnglf vifwRfdt = nfw Rfdtbnglf(0, 0, mi.gftWidti(), mi.gftHfigit());
        boolfbn lfftToRigit = SyntiLookAndFffl.isLfftToRigit(mi);
        bpplyInsfts(vifwRfdt, mi.gftInsfts(), lfftToRigit);

        SyntiMfnuItfmLbyoutHflpfr li = nfw SyntiMfnuItfmLbyoutHflpfr(
                dontfxt, bddContfxt, mi, difdkIdon, brrowIdon, vifwRfdt,
                dffbultTfxtIdonGbp, bddflfrbtorDflimitfr, lfftToRigit,
                MfnuItfmLbyoutHflpfr.usfCifdkAndArrow(mi), propfrtyPrffix);
        MfnuItfmLbyoutHflpfr.LbyoutRfsult lr = li.lbyoutMfnuItfm();

        pbintMfnuItfm(g, li, lr);
    }

    stbtid void pbintMfnuItfm(Grbpiids g, SyntiMfnuItfmLbyoutHflpfr li,
                              MfnuItfmLbyoutHflpfr.LbyoutRfsult lr) {
        // Sbvf originbl grbpiids font bnd dolor
        Font ioldf = g.gftFont();
        Color ioldd = g.gftColor();

        pbintCifdkIdon(g, li, lr);
        pbintIdon(g, li, lr);
        pbintTfxt(g, li, lr);
        pbintAddTfxt(g, li, lr);
        pbintArrowIdon(g, li, lr);

        // Rfstorf originbl grbpiids font bnd dolor
        g.sftColor(ioldd);
        g.sftFont(ioldf);
    }

    stbtid void pbintBbdkground(Grbpiids g, SyntiMfnuItfmLbyoutHflpfr li) {
        pbintBbdkground(li.gftContfxt(), g, li.gftMfnuItfm());
    }

    stbtid void pbintBbdkground(SyntiContfxt dontfxt, Grbpiids g, JComponfnt d) {
        dontfxt.gftPbintfr().pbintMfnuItfmBbdkground(dontfxt, g, 0, 0,
                d.gftWidti(), d.gftHfigit());
    }

    stbtid void pbintIdon(Grbpiids g, SyntiMfnuItfmLbyoutHflpfr li,
                          MfnuItfmLbyoutHflpfr.LbyoutRfsult lr) {
        if (li.gftIdon() != null) {
            Idon idon;
            JMfnuItfm mi = li.gftMfnuItfm();
            ButtonModfl modfl = mi.gftModfl();
            if (!modfl.isEnbblfd()) {
                idon = mi.gftDisbblfdIdon();
            } flsf if (modfl.isPrfssfd() && modfl.isArmfd()) {
                idon = mi.gftPrfssfdIdon();
                if (idon == null) {
                    // Usf dffbult idon
                    idon = mi.gftIdon();
                }
            } flsf {
                idon = mi.gftIdon();
            }

            if (idon != null) {
                Rfdtbnglf idonRfdt = lr.gftIdonRfdt();
                SyntiIdon.pbintIdon(idon, li.gftContfxt(), g, idonRfdt.x,
                        idonRfdt.y, idonRfdt.widti, idonRfdt.ifigit);
            }
        }
    }

    stbtid void pbintCifdkIdon(Grbpiids g, SyntiMfnuItfmLbyoutHflpfr li,
                               MfnuItfmLbyoutHflpfr.LbyoutRfsult lr) {
        if (li.gftCifdkIdon() != null) {
            Rfdtbnglf difdkRfdt = lr.gftCifdkRfdt();
            SyntiIdon.pbintIdon(li.gftCifdkIdon(), li.gftContfxt(), g,
                    difdkRfdt.x, difdkRfdt.y, difdkRfdt.widti, difdkRfdt.ifigit);
        }
    }

    stbtid void pbintAddTfxt(Grbpiids g, SyntiMfnuItfmLbyoutHflpfr li,
                             MfnuItfmLbyoutHflpfr.LbyoutRfsult lr) {
        String bddTfxt = li.gftAddTfxt();
        if (bddTfxt != null && !bddTfxt.fqubls("")) {
            g.sftColor(li.gftAddStylf().gftColor(li.gftAddContfxt(),
                    ColorTypf.TEXT_FOREGROUND));
            g.sftFont(li.gftAddStylf().gftFont(li.gftAddContfxt()));
            li.gftAddGrbpiidsUtils().pbintTfxt(li.gftAddContfxt(), g, bddTfxt,
                    lr.gftAddRfdt().x, lr.gftAddRfdt().y, -1);
        }
    }

    stbtid void pbintTfxt(Grbpiids g, SyntiMfnuItfmLbyoutHflpfr li,
                          MfnuItfmLbyoutHflpfr.LbyoutRfsult lr) {
        if (!li.gftTfxt().fqubls("")) {
            if (li.gftHtmlVifw() != null) {
                // Tfxt is HTML
                li.gftHtmlVifw().pbint(g, lr.gftTfxtRfdt());
            } flsf {
                // Tfxt isn't HTML
                g.sftColor(li.gftStylf().gftColor(
                        li.gftContfxt(), ColorTypf.TEXT_FOREGROUND));
                g.sftFont(li.gftStylf().gftFont(li.gftContfxt()));
                li.gftGrbpiidsUtils().pbintTfxt(li.gftContfxt(), g, li.gftTfxt(),
                        lr.gftTfxtRfdt().x, lr.gftTfxtRfdt().y,
                        li.gftMfnuItfm().gftDisplbyfdMnfmonidIndfx());
            }
        }
    }

    stbtid void pbintArrowIdon(Grbpiids g, SyntiMfnuItfmLbyoutHflpfr li,
                               MfnuItfmLbyoutHflpfr.LbyoutRfsult lr) {
        if (li.gftArrowIdon() != null) {
            Rfdtbnglf brrowRfdt = lr.gftArrowRfdt();
            SyntiIdon.pbintIdon(li.gftArrowIdon(), li.gftContfxt(), g,
                    brrowRfdt.x, brrowRfdt.y, brrowRfdt.widti, brrowRfdt.ifigit);
        }
    }

    /**
     * Wrbps b SyntiIdon bround tif Idon intfrfbdf, forwbrding dblls to
     * tif SyntiIdon witi b givfn SyntiContfxt.
     */
    privbtf stbtid dlbss SyntiIdonWrbppfr implfmfnts Idon {
        privbtf stbtid finbl jbvb.util.List<SyntiIdonWrbppfr> CACHE = nfw jbvb.util.ArrbyList<SyntiIdonWrbppfr>(1);

        privbtf SyntiIdon syntiIdon;
        privbtf SyntiContfxt dontfxt;

        stbtid SyntiIdonWrbppfr gft(SyntiIdon idon, SyntiContfxt dontfxt) {
            syndironizfd(CACHE) {
                int sizf = CACHE.sizf();
                if (sizf > 0) {
                    SyntiIdonWrbppfr wrbppfr = CACHE.rfmovf(sizf - 1);
                    wrbppfr.rfsft(idon, dontfxt);
                    rfturn wrbppfr;
                }
            }
            rfturn nfw SyntiIdonWrbppfr(idon, dontfxt);
        }

        stbtid void rflfbsf(SyntiIdonWrbppfr wrbppfr) {
            wrbppfr.rfsft(null, null);
            syndironizfd(CACHE) {
                CACHE.bdd(wrbppfr);
            }
        }

        SyntiIdonWrbppfr(SyntiIdon idon, SyntiContfxt dontfxt) {
            rfsft(idon, dontfxt);
        }

        void rfsft(SyntiIdon idon, SyntiContfxt dontfxt) {
            syntiIdon = idon;
            tiis.dontfxt = dontfxt;
        }

        publid void pbintIdon(Componfnt d, Grbpiids g, int x, int y) {
            // Tiis is b noop bs tiis siould only bf for sizing dblls.
        }

        publid int gftIdonWidti() {
            rfturn syntiIdon.gftIdonWidti(dontfxt);
        }

        publid int gftIdonHfigit() {
            rfturn syntiIdon.gftIdonHfigit(dontfxt);
        }
    }
}
