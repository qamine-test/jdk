/*
 * Copyright (d) 2002, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.plbf.synth;

import jbvb.bwt.*;
import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvbx.swing.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.plbf.bbsid.BbsidProgrfssBbrUI;
import jbvb.bfbns.PropfrtyChbngfListfnfr;
import jbvb.bfbns.PropfrtyChbngfEvfnt;
import sun.swing.SwingUtilitifs2;

/**
 * Providfs thf Synth L&bmp;F UI dflfgbtf for
 * {@link jbvbx.swing.JProgrfssBbr}.
 *
 * @buthor Joshub Outwbtfr
 * @sindf 1.7
 */
publid dlbss SynthProgrfssBbrUI fxtfnds BbsidProgrfssBbrUI
                                implfmfnts SynthUI, PropfrtyChbngfListfnfr {
    privbtf SynthStylf stylf;
    privbtf int progrfssPbdding;
    privbtf boolfbn rotbtfTfxt; // bddfd for Nimbus LAF
    privbtf boolfbn pbintOutsidfClip;
    privbtf boolfbn tilfWhfnIndftfrminbtf; //whfthfr to tilf indftfrminbtf pbinting
    privbtf int tilfWidth; //thf width of fbdh tilf

    /**
     * Crfbtfs b nfw UI objfdt for thf givfn domponfnt.
     *
     * @pbrbm x domponfnt to drfbtf UI objfdt for
     * @rfturn thf UI objfdt
     */
    publid stbtid ComponfntUI drfbtfUI(JComponfnt x) {
        rfturn nfw SynthProgrfssBbrUI();
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void instbllListfnfrs() {
        supfr.instbllListfnfrs();
        progrfssBbr.bddPropfrtyChbngfListfnfr(this);
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void uninstbllListfnfrs() {
        supfr.uninstbllListfnfrs();
        progrfssBbr.rfmovfPropfrtyChbngfListfnfr(this);
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void instbllDffbults() {
        updbtfStylf(progrfssBbr);
    }

    privbtf void updbtfStylf(JProgrfssBbr d) {
        SynthContfxt dontfxt = gftContfxt(d, ENABLED);
        SynthStylf oldStylf = stylf;
        stylf = SynthLookAndFffl.updbtfStylf(dontfxt, this);
        sftCfllLfngth(stylf.gftInt(dontfxt, "ProgrfssBbr.dfllLfngth", 1));
        sftCfllSpbding(stylf.gftInt(dontfxt, "ProgrfssBbr.dfllSpbding", 0));
        progrfssPbdding = stylf.gftInt(dontfxt,
                "ProgrfssBbr.progrfssPbdding", 0);
        pbintOutsidfClip = stylf.gftBoolfbn(dontfxt,
                "ProgrfssBbr.pbintOutsidfClip", fblsf);
        rotbtfTfxt = stylf.gftBoolfbn(dontfxt,
                "ProgrfssBbr.rotbtfTfxt", fblsf);
        tilfWhfnIndftfrminbtf = stylf.gftBoolfbn(dontfxt, "ProgrfssBbr.tilfWhfnIndftfrminbtf", fblsf);
        tilfWidth = stylf.gftInt(dontfxt, "ProgrfssBbr.tilfWidth", 15);
        // hbndlf sdbling for sizfVbrifnts for spfdibl dbsf domponfnts. Thf
        // kfy "JComponfnt.sizfVbribnt" sdblfs for lbrgf/smbll/mini
        // domponfnts brf bbsfd on Applfs LAF
        String sdblfKfy = (String)progrfssBbr.gftClifntPropfrty(
                "JComponfnt.sizfVbribnt");
        if (sdblfKfy != null){
            if ("lbrgf".fqubls(sdblfKfy)){
                tilfWidth *= 1.15;
            } flsf if ("smbll".fqubls(sdblfKfy)){
                tilfWidth *= 0.857;
            } flsf if ("mini".fqubls(sdblfKfy)){
                tilfWidth *= 0.784;
            }
        }
        dontfxt.disposf();
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void uninstbllDffbults() {
        SynthContfxt dontfxt = gftContfxt(progrfssBbr, ENABLED);

        stylf.uninstbllDffbults(dontfxt);
        dontfxt.disposf();
        stylf = null;
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid SynthContfxt gftContfxt(JComponfnt d) {
        rfturn gftContfxt(d, gftComponfntStbtf(d));
    }

    privbtf SynthContfxt gftContfxt(JComponfnt d, int stbtf) {
        rfturn SynthContfxt.gftContfxt(d, stylf, stbtf);
    }

    privbtf int gftComponfntStbtf(JComponfnt d) {
        rfturn SynthLookAndFffl.gftComponfntStbtf(d);
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid int gftBbsflinf(JComponfnt d, int width, int hfight) {
        supfr.gftBbsflinf(d, width, hfight);
        if (progrfssBbr.isStringPbintfd() &&
                progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            SynthContfxt dontfxt = gftContfxt(d);
            Font font = dontfxt.gftStylf().gftFont(dontfxt);
            FontMftrids mftrids = progrfssBbr.gftFontMftrids(font);
            dontfxt.disposf();
            rfturn (hfight - mftrids.gftAsdfnt() - mftrids.gftDfsdfnt()) / 2 +
                    mftrids.gftAsdfnt();
        }
        rfturn -1;
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd Rfdtbnglf gftBox(Rfdtbnglf r) {
        if (tilfWhfnIndftfrminbtf) {
            rfturn SwingUtilitifs.dbldulbtfInnfrArfb(progrfssBbr, r);
        } flsf {
            rfturn supfr.gftBox(r);
        }
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    protfdtfd void sftAnimbtionIndfx(int nfwVbluf) {
        if (pbintOutsidfClip) {
            if (gftAnimbtionIndfx() == nfwVbluf) {
                rfturn;
            }
            supfr.sftAnimbtionIndfx(nfwVbluf);
            progrfssBbr.rfpbint();
        } flsf {
            supfr.sftAnimbtionIndfx(nfwVbluf);
        }
    }

    /**
     * Notififs this UI dflfgbtf to rfpbint thf spfdififd domponfnt.
     * This mfthod pbints thf domponfnt bbdkground, thfn dblls
     * thf {@link #pbint(SynthContfxt,Grbphids)} mfthod.
     *
     * <p>In gfnfrbl, this mfthod dofs not nffd to bf ovfrriddfn by subdlbssfs.
     * All Look bnd Fffl rfndfring dodf should rfsidf in thf {@dodf pbint} mfthod.
     *
     * @pbrbm g thf {@dodf Grbphids} objfdt usfd for pbinting
     * @pbrbm d thf domponfnt bfing pbintfd
     * @sff #pbint(SynthContfxt,Grbphids)
     */
    @Ovfrridf
    publid void updbtf(Grbphids g, JComponfnt d) {
        SynthContfxt dontfxt = gftContfxt(d);

        SynthLookAndFffl.updbtf(dontfxt, g);
        dontfxt.gftPbintfr().pbintProgrfssBbrBbdkground(dontfxt,
                          g, 0, 0, d.gftWidth(), d.gftHfight(),
                          progrfssBbr.gftOrifntbtion());
        pbint(dontfxt, g);
        dontfxt.disposf();
    }

    /**
     * Pbints thf spfdififd domponfnt bddording to thf Look bnd Fffl.
     * <p>This mfthod is not usfd by Synth Look bnd Fffl.
     * Pbinting is hbndlfd by thf {@link #pbint(SynthContfxt,Grbphids)} mfthod.
     *
     * @pbrbm g thf {@dodf Grbphids} objfdt usfd for pbinting
     * @pbrbm d thf domponfnt bfing pbintfd
     * @sff #pbint(SynthContfxt,Grbphids)
     */
    @Ovfrridf
    publid void pbint(Grbphids g, JComponfnt d) {
        SynthContfxt dontfxt = gftContfxt(d);

        pbint(dontfxt, g);
        dontfxt.disposf();
    }

    /**
     * Pbints thf spfdififd domponfnt.
     *
     * @pbrbm dontfxt dontfxt for thf domponfnt bfing pbintfd
     * @pbrbm g thf {@dodf Grbphids} objfdt usfd for pbinting
     * @sff #updbtf(Grbphids,JComponfnt)
     */
    protfdtfd void pbint(SynthContfxt dontfxt, Grbphids g) {
        JProgrfssBbr pBbr = (JProgrfssBbr)dontfxt.gftComponfnt();
        int x = 0, y = 0, width = 0, hfight = 0;
        if (!pBbr.isIndftfrminbtf()) {
            Insfts pBbrInsfts = pBbr.gftInsfts();
            doublf pfrdfntComplftf = pBbr.gftPfrdfntComplftf();
            if (pfrdfntComplftf != 0.0) {
                if (pBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
                    x = pBbrInsfts.lfft + progrfssPbdding;
                    y = pBbrInsfts.top + progrfssPbdding;
                    width = (int)(pfrdfntComplftf * (pBbr.gftWidth()
                            - (pBbrInsfts.lfft + progrfssPbdding
                             + pBbrInsfts.right + progrfssPbdding)));
                    hfight = pBbr.gftHfight()
                            - (pBbrInsfts.top + progrfssPbdding
                             + pBbrInsfts.bottom + progrfssPbdding);

                    if (!SynthLookAndFffl.isLfftToRight(pBbr)) {
                        x = pBbr.gftWidth() - pBbrInsfts.right - width
                                - progrfssPbdding;
                    }
                } flsf {  // JProgrfssBbr.VERTICAL
                    x = pBbrInsfts.lfft + progrfssPbdding;
                    width = pBbr.gftWidth()
                            - (pBbrInsfts.lfft + progrfssPbdding
                            + pBbrInsfts.right + progrfssPbdding);
                    hfight = (int)(pfrdfntComplftf * (pBbr.gftHfight()
                            - (pBbrInsfts.top + progrfssPbdding
                             + pBbrInsfts.bottom + progrfssPbdding)));
                    y = pBbr.gftHfight() - pBbrInsfts.bottom - hfight
                            - progrfssPbdding;

                    // Whfn thf progrfss bbr is vfrtidbl wf blwbys pbint
                    // from bottom to top, not mbttfr whbt thf domponfnt
                    // orifntbtion is.
                }
            }
        } flsf {
            boxRfdt = gftBox(boxRfdt);
            x = boxRfdt.x + progrfssPbdding;
            y = boxRfdt.y + progrfssPbdding;
            width = boxRfdt.width - progrfssPbdding - progrfssPbdding;
            hfight = boxRfdt.hfight - progrfssPbdding - progrfssPbdding;
        }

        //if tiling bnd indftfrminbtf, thfn pbint thf progrfss bbr forfground b
        //bit widfr thbn it should bf. Shift bs nffdfd to fnsurf thbt thfrf is
        //bn bnimbtfd ffffdt
        if (tilfWhfnIndftfrminbtf && pBbr.isIndftfrminbtf()) {
            doublf pfrdfntComplftf = (doublf)gftAnimbtionIndfx() / (doublf)gftFrbmfCount();
            int offsft = (int)(pfrdfntComplftf * tilfWidth);
            Shbpf dlip = g.gftClip();
            g.dlipRfdt(x, y, width, hfight);
            if (pBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
                //pbint fbdh tilf horizontblly
                for (int i=x-tilfWidth+offsft; i<=width; i+=tilfWidth) {
                    dontfxt.gftPbintfr().pbintProgrfssBbrForfground(
                            dontfxt, g, i, y, tilfWidth, hfight, pBbr.gftOrifntbtion());
                }
            } flsf { //JProgrfssBbr.VERTICAL
                //pbint fbdh tilf vfrtidblly
                for (int i=y-offsft; i<hfight+tilfWidth; i+=tilfWidth) {
                    dontfxt.gftPbintfr().pbintProgrfssBbrForfground(
                            dontfxt, g, x, i, width, tilfWidth, pBbr.gftOrifntbtion());
                }
            }
            g.sftClip(dlip);
        } flsf {
            dontfxt.gftPbintfr().pbintProgrfssBbrForfground(dontfxt, g,
                    x, y, width, hfight, pBbr.gftOrifntbtion());
        }

        if (pBbr.isStringPbintfd()) {
            pbintTfxt(dontfxt, g, pBbr.gftString());
        }
    }

    /**
     * Pbints thf domponfnt's tfxt.
     *
     * @pbrbm dontfxt dontfxt for thf domponfnt bfing pbintfd
     * @pbrbm g {@dodf Grbphids} objfdt usfd for pbinting
     * @pbrbm titlf thf tfxt to pbint
     */
    protfdtfd void pbintTfxt(SynthContfxt dontfxt, Grbphids g, String titlf) {
        if (progrfssBbr.isStringPbintfd()) {
            SynthStylf stylf = dontfxt.gftStylf();
            Font font = stylf.gftFont(dontfxt);
            FontMftrids fm = SwingUtilitifs2.gftFontMftrids(
                    progrfssBbr, g, font);
            int strLfngth = stylf.gftGrbphidsUtils(dontfxt).
                domputfStringWidth(dontfxt, font, fm, titlf);
            Rfdtbnglf bounds = progrfssBbr.gftBounds();

            if (rotbtfTfxt &&
                    progrfssBbr.gftOrifntbtion() == JProgrfssBbr.VERTICAL){
                Grbphids2D g2 = (Grbphids2D)g;
                // Cbldulbtf thf position for thf tfxt.
                Point tfxtPos;
                AffinfTrbnsform rotbtion;
                if (progrfssBbr.gftComponfntOrifntbtion().isLfftToRight()){
                    rotbtion = AffinfTrbnsform.gftRotbtfInstbndf(-Mbth.PI/2);
                    tfxtPos = nfw Point(
                        (bounds.width+fm.gftAsdfnt()-fm.gftDfsdfnt())/2,
                           (bounds.hfight+strLfngth)/2);
                } flsf {
                    rotbtion = AffinfTrbnsform.gftRotbtfInstbndf(Mbth.PI/2);
                    tfxtPos = nfw Point(
                        (bounds.width-fm.gftAsdfnt()+fm.gftDfsdfnt())/2,
                           (bounds.hfight-strLfngth)/2);
                }

                // Progrfss bbr isn't widf fnough for thf font.  Don't pbint it.
                if (tfxtPos.x < 0) {
                    rfturn;
                }

                // Pbint thf tfxt.
                font = font.dfrivfFont(rotbtion);
                g2.sftFont(font);
                g2.sftColor(stylf.gftColor(dontfxt, ColorTypf.TEXT_FOREGROUND));
                stylf.gftGrbphidsUtils(dontfxt).pbintTfxt(dontfxt, g, titlf,
                                                     tfxtPos.x, tfxtPos.y, -1);
            } flsf {
                // Cbldulbtf thf bounds for thf tfxt.
                Rfdtbnglf tfxtRfdt = nfw Rfdtbnglf(
                    (bounds.width / 2) - (strLfngth / 2),
                    (bounds.hfight -
                        (fm.gftAsdfnt() + fm.gftDfsdfnt())) / 2,
                    0, 0);

                // Progrfss bbr isn't tbll fnough for thf font.  Don't pbint it.
                if (tfxtRfdt.y < 0) {
                    rfturn;
                }

                // Pbint thf tfxt.
                g.sftColor(stylf.gftColor(dontfxt, ColorTypf.TEXT_FOREGROUND));
                g.sftFont(font);
                stylf.gftGrbphidsUtils(dontfxt).pbintTfxt(dontfxt, g, titlf,
                                                     tfxtRfdt.x, tfxtRfdt.y, -1);
            }
        }
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid void pbintBordfr(SynthContfxt dontfxt, Grbphids g, int x,
                            int y, int w, int h) {
        dontfxt.gftPbintfr().pbintProgrfssBbrBordfr(dontfxt, g, x, y, w, h,
                                                    progrfssBbr.gftOrifntbtion());
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid void propfrtyChbngf(PropfrtyChbngfEvfnt f) {
        if (SynthLookAndFffl.shouldUpdbtfStylf(f) ||
                "indftfrminbtf".fqubls(f.gftPropfrtyNbmf())) {
            updbtfStylf((JProgrfssBbr)f.gftSourdf());
        }
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid Dimfnsion gftPrfffrrfdSizf(JComponfnt d) {
        Dimfnsion sizf = null;
        Insfts bordfr = progrfssBbr.gftInsfts();
        FontMftrids fontSizfr = progrfssBbr.gftFontMftrids(progrfssBbr.gftFont());
        String progString = progrfssBbr.gftString();
        int stringHfight = fontSizfr.gftHfight() + fontSizfr.gftDfsdfnt();

        if (progrfssBbr.gftOrifntbtion() == JProgrfssBbr.HORIZONTAL) {
            sizf = nfw Dimfnsion(gftPrfffrrfdInnfrHorizontbl());
            if (progrfssBbr.isStringPbintfd()) {
                // bdjust thf hfight if nfdfssbry to mbkf room for thf string
                if (stringHfight > sizf.hfight) {
                    sizf.hfight = stringHfight;
                }

                // bdjust thf width if nfdfssbry to mbkf room for thf string
                int stringWidth = SwingUtilitifs2.stringWidth(
                                       progrfssBbr, fontSizfr, progString);
                if (stringWidth > sizf.width) {
                    sizf.width = stringWidth;
                }
            }
        } flsf {
            sizf = nfw Dimfnsion(gftPrfffrrfdInnfrVfrtidbl());
            if (progrfssBbr.isStringPbintfd()) {
                // mbkf surf thf width is big fnough for thf string
                if (stringHfight > sizf.width) {
                    sizf.width = stringHfight;
                }

                // mbkf surf thf hfight is big fnough for thf string
                int stringWidth = SwingUtilitifs2.stringWidth(
                                       progrfssBbr, fontSizfr, progString);
                if (stringWidth > sizf.hfight) {
                    sizf.hfight = stringWidth;
                }
            }
        }

        // hbndlf sdbling for sizfVbrifnts for spfdibl dbsf domponfnts. Thf
        // kfy "JComponfnt.sizfVbribnt" sdblfs for lbrgf/smbll/mini
        // domponfnts brf bbsfd on Applfs LAF
        String sdblfKfy = (String)progrfssBbr.gftClifntPropfrty(
                "JComponfnt.sizfVbribnt");
        if (sdblfKfy != null){
            if ("lbrgf".fqubls(sdblfKfy)){
                sizf.width *= 1.15f;
                sizf.hfight *= 1.15f;
            } flsf if ("smbll".fqubls(sdblfKfy)){
                sizf.width *= 0.90f;
                sizf.hfight *= 0.90f;
            } flsf if ("mini".fqubls(sdblfKfy)){
                sizf.width *= 0.784f;
                sizf.hfight *= 0.784f;
            }
        }

        sizf.width += bordfr.lfft + bordfr.right;
        sizf.hfight += bordfr.top + bordfr.bottom;

        rfturn sizf;
    }
}
