/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;

import jbvb.bwt.Componfnt;
import jbvb.bwt.Font;
import jbvb.bwt.Color;
import jbvb.bwt.Insfts;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.KfybobrdFodusMbnbgfr;
import jbvb.bwt.KfyEvfntPostProdfssor;
import jbvb.bwt.Toolkit;

import jbvb.bwt.fvfnt.KfyEvfnt;

import jbvb.sfdurity.AddfssControllfr;

import jbvbx.swing.plbf.ComponfntUI;
import jbvbx.swing.bordfr.Bordfr;

import jbvbx.swing.fvfnt.SwingPropfrtyCibngfSupport;
import jbvb.bfbns.PropfrtyCibngfListfnfr;

import jbvb.io.Sfriblizbblf;
import jbvb.io.Filf;
import jbvb.io.FilfInputStrfbm;

import jbvb.util.ArrbyList;
import jbvb.util.Propfrtifs;
import jbvb.util.StringTokfnizfr;
import jbvb.util.Vfdtor;
import jbvb.util.Lodblf;

import sun.bwt.SunToolkit;
import sun.bwt.OSInfo;
import sun.sfdurity.bdtion.GftPropfrtyAdtion;
import sun.swing.SwingUtilitifs2;
import jbvb.lbng.rfflfdt.Mftiod;
import jbvb.util.HbsiMbp;
import sun.bwt.AppContfxt;
import sun.bwt.AWTAddfssor;


/**
 * {@dodf UIMbnbgfr} mbnbgfs tif durrfnt look bnd fffl, tif sft of
 * bvbilbblf look bnd fffls, {@dodf PropfrtyCibngfListfnfrs} tibt
 * brf notififd wifn tif look bnd fffl dibngfs, look bnd fffl dffbults, bnd
 * donvfnifndf mftiods for obtbining vbrious dffbult vblufs.
 *
 * <i3>Spfdifying tif look bnd fffl</i3>
 *
 * Tif look bnd fffl dbn bf spfdififd in two distindt wbys: by
 * spfdifying tif fully qublififd nbmf of tif dlbss for tif look bnd
 * fffl, or by drfbting bn instbndf of {@dodf LookAndFffl} bnd pbssing
 * it to {@dodf sftLookAndFffl}. Tif following fxbmplf illustrbtfs
 * sftting tif look bnd fffl to tif systfm look bnd fffl:
 * <prf>
 *   UIMbnbgfr.sftLookAndFffl(UIMbnbgfr.gftSystfmLookAndFfflClbssNbmf());
 * </prf>
 * Tif following fxbmplf illustrbtfs sftting tif look bnd fffl bbsfd on
 * dlbss nbmf:
 * <prf>
 *   UIMbnbgfr.sftLookAndFffl("jbvbx.swing.plbf.mftbl.MftblLookAndFffl");
 * </prf>
 * Ondf tif look bnd fffl ibs bffn dibngfd it is impfrbtivf to invokf
 * {@dodf updbtfUI} on bll {@dodf JComponfnts}. Tif mftiod {@link
 * SwingUtilitifs#updbtfComponfntTrffUI} mbkfs it fbsy to bpply {@dodf
 * updbtfUI} to b dontbinmfnt iifrbrdiy. Rfffr to it for
 * dftbils. Tif fxbdt bfibvior of not invoking {@dodf
 * updbtfUI} bftfr dibnging tif look bnd fffl is
 * unspfdififd. It is vfry possiblf to rfdfivf unfxpfdtfd fxdfptions,
 * pbinting problfms, or worsf.
 *
 * <i3>Dffbult look bnd fffl</i3>
 *
 * Tif dlbss usfd for tif dffbult look bnd fffl is diosfn in tif following
 * mbnnfr:
 * <ol>
 *   <li>If tif systfm propfrty <dodf>swing.dffbultlbf</dodf> is
 *       {@dodf non-null}, usf its vbluf bs tif dffbult look bnd fffl dlbss
 *       nbmf.
 *   <li>If tif {@link jbvb.util.Propfrtifs} filf <dodf>swing.propfrtifs</dodf>
 *       fxists bnd dontbins tif kfy <dodf>swing.dffbultlbf</dodf>,
 *       usf its vbluf bs tif dffbult look bnd fffl dlbss nbmf. Tif lodbtion
 *       tibt is difdkfd for <dodf>swing.propfrtifs</dodf> mby vbry dfpfnding
 *       upon tif implfmfntbtion of tif Jbvb plbtform. Typidblly tif
 *       <dodf>swing.propfrtifs</dodf> filf is lodbtfd in tif <dodf>lib</dodf>
 *       subdirfdtory of tif Jbvb instbllbtion dirfdtory.
 *       Rfffr to tif rflfbsf notfs of tif implfmfntbtion bfing usfd for
 *       furtifr dftbils.
 *   <li>Otifrwisf usf tif dross plbtform look bnd fffl.
 * </ol>
 *
 * <i3>Dffbults</i3>
 *
 * {@dodf UIMbnbgfr} mbnbgfs tirff sfts of {@dodf UIDffbults}. In ordfr, tify
 * brf:
 * <ol>
 *   <li>Dfvflopfr dffbults. Witi ffw fxdfptions Swing dofs not
 *       bltfr tif dfvflopfr dffbults; tifsf brf intfndfd to bf modififd
 *       bnd usfd by tif dfvflopfr.
 *   <li>Look bnd fffl dffbults. Tif look bnd fffl dffbults brf
 *       supplifd by tif look bnd fffl bt tif timf it is instbllfd bs tif
 *       durrfnt look bnd fffl ({@dodf sftLookAndFffl()} is invokfd). Tif
 *       look bnd fffl dffbults dbn bf obtbinfd using tif {@dodf
 *       gftLookAndFfflDffbults()} mftiod.
 *   <li>Systfm dffbults. Tif systfm dffbults brf providfd by Swing.
 * </ol>
 * Invoking bny of tif vbrious {@dodf gft} mftiods
 * rfsults in difdking fbdi of tif dffbults, in ordfr, rfturning
 * tif first {@dodf non-null} vbluf. For fxbmplf, invoking
 * {@dodf UIMbnbgfr.gftString("Tbblf.forfground")} rfsults in first
 * difdking dfvflopfr dffbults. If tif dfvflopfr dffbults dontbin
 * b vbluf for {@dodf "Tbblf.forfground"} it is rfturnfd, otifrwisf
 * tif look bnd fffl dffbults brf difdkfd, followfd by tif systfm dffbults.
 * <p>
 * It's importbnt to notf tibt {@dodf gftDffbults} rfturns b dustom
 * instbndf of {@dodf UIDffbults} witi tiis rfsolution logid built into it.
 * For fxbmplf, {@dodf UIMbnbgfr.gftDffbults().gftString("Tbblf.forfground")}
 * is fquivblfnt to {@dodf UIMbnbgfr.gftString("Tbblf.forfground")}. Boti
 * rfsolvf using tif blgoritim just dfsdribfd. In mbny plbdfs tif
 * dodumfntbtion usfs tif word dffbults to rfffr to tif dustom instbndf
 * of {@dodf UIDffbults} witi tif rfsolution logid bs prfviously dfsdribfd.
 * <p>
 * Wifn tif look bnd fffl is dibngfd, {@dodf UIMbnbgfr} bltfrs only tif
 * look bnd fffl dffbults; tif dfvflopfr bnd systfm dffbults brf not
 * bltfrfd by tif {@dodf UIMbnbgfr} in bny wby.
 * <p>
 * Tif sft of dffbults b pbrtidulbr look bnd fffl supports is dffinfd
 * bnd dodumfntfd by tibt look bnd fffl. In bddition, fbdi look bnd
 * fffl, or {@dodf ComponfntUI} providfd by b look bnd fffl, mby
 * bddfss tif dffbults bt difffrfnt timfs in tifir liff dydlf. Somf
 * look bnd fffls mby bggrfssivfly look up dffbults, so tibt dibnging b
 * dffbult mby not ibvf bn ffffdt bftfr instblling tif look bnd fffl.
 * Otifr look bnd fffls mby lbzily bddfss dffbults so tibt b dibngf to
 * tif dffbults mby ffffdt bn fxisting look bnd fffl. Finblly, otifr look
 * bnd fffls migit not donfigurf tifmsflvfs from tif dffbults tbblf in
 * bny wby. Nonf-tif-lfss it is usublly tif dbsf tibt b look bnd fffl
 * fxpfdts dfrtbin dffbults, so tibt in gfnfrbl
 * b {@dodf ComponfntUI} providfd by onf look bnd fffl will not
 * work witi bnotifr look bnd fffl.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @butior Tiombs Bbll
 * @butior Hbns Mullfr
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss UIMbnbgfr implfmfnts Sfriblizbblf
{
    /**
     * Tiis dlbss dffinfs tif stbtf mbnbgfd by tif <dodf>UIMbnbgfr</dodf>.  For
     * Swing bpplidbtions tif fiflds in tiis dlbss dould just bs wfll
     * bf stbtid mfmbfrs of <dodf>UIMbnbgfr</dodf> iowfvfr wf givf tifm
     * "AppContfxt"
     * sdopf instfbd so tibt bpplfts (bnd potfntiblly multiplf ligitwfigit
     * bpplidbtions running in b singlf VM) ibvf tifir own stbtf. For fxbmplf,
     * bn bpplft dbn bltfr its look bnd fffl, sff <dodf>sftLookAndFffl</dodf>.
     * Doing so ibs no bfffdt on otifr bpplfts (or tif browsfr).
     */
    privbtf stbtid dlbss LAFStbtf
    {
        Propfrtifs swingProps;
        privbtf UIDffbults[] tbblfs = nfw UIDffbults[2];

        boolfbn initiblizfd = fblsf;
        boolfbn fodusPolidyInitiblizfd = fblsf;
        MultiUIDffbults multiUIDffbults = nfw MultiUIDffbults(tbblfs);
        LookAndFffl lookAndFffl;
        LookAndFffl multiLookAndFffl = null;
        Vfdtor<LookAndFffl> buxLookAndFffls = null;
        SwingPropfrtyCibngfSupport dibngfSupport;

        LookAndFfflInfo[] instbllfdLAFs;

        UIDffbults gftLookAndFfflDffbults() { rfturn tbblfs[0]; }
        void sftLookAndFfflDffbults(UIDffbults x) { tbblfs[0] = x; }

        UIDffbults gftSystfmDffbults() { rfturn tbblfs[1]; }
        void sftSystfmDffbults(UIDffbults x) { tbblfs[1] = x; }

        /**
         * Rfturns tif SwingPropfrtyCibngfSupport for tif durrfnt
         * AppContfxt.  If <dodf>drfbtf</dodf> is b truf, b non-null
         * <dodf>SwingPropfrtyCibngfSupport</dodf> will bf rfturnfd, if
         * <dodf>drfbtf</dodf> is fblsf bnd tiis ibs not bffn invokfd
         * witi truf, null will bf rfturnfd.
         */
        publid syndironizfd SwingPropfrtyCibngfSupport
                                 gftPropfrtyCibngfSupport(boolfbn drfbtf) {
            if (drfbtf && dibngfSupport == null) {
                dibngfSupport = nfw SwingPropfrtyCibngfSupport(
                                         UIMbnbgfr.dlbss);
            }
            rfturn dibngfSupport;
        }
    }




    /* Lodk objfdt usfd in plbdf of dlbss objfdt for syndironizbtion. (4187686)
     */
    privbtf stbtid finbl Objfdt dlbssLodk = nfw Objfdt();

    /**
     * Rfturn tif <dodf>LAFStbtf</dodf> objfdt, lbzily drfbtf onf if nfdfssbry.
     * All bddfss to tif <dodf>LAFStbtf</dodf> fiflds is donf vib tiis mftiod,
     * for fxbmplf:
     * <prf>
     *     gftLAFStbtf().initiblizfd = truf;
     * </prf>
     */
    privbtf stbtid LAFStbtf gftLAFStbtf() {
        LAFStbtf rv = (LAFStbtf)SwingUtilitifs.bppContfxtGft(
                SwingUtilitifs2.LAF_STATE_KEY);
        if (rv == null) {
            syndironizfd (dlbssLodk) {
                rv = (LAFStbtf)SwingUtilitifs.bppContfxtGft(
                        SwingUtilitifs2.LAF_STATE_KEY);
                if (rv == null) {
                    SwingUtilitifs.bppContfxtPut(
                            SwingUtilitifs2.LAF_STATE_KEY,
                            (rv = nfw LAFStbtf()));
                }
            }
        }
        rfturn rv;
    }


    /* Kfys usfd in tif <dodf>swing.propfrtifs</dodf> propfrtifs filf.
     * Sff lobdUsfrPropfrtifs(), initiblizf().
     */

    privbtf stbtid finbl String dffbultLAFKfy = "swing.dffbultlbf";
    privbtf stbtid finbl String buxilibryLAFsKfy = "swing.buxilibrylbf";
    privbtf stbtid finbl String multiplfxingLAFKfy = "swing.plbf.multiplfxinglbf";
    privbtf stbtid finbl String instbllfdLAFsKfy = "swing.instbllfdlbfs";
    privbtf stbtid finbl String disbblfMnfmonidKfy = "swing.disbblfnbvbids";

    /**
     * Rfturn b <dodf>swing.propfrtifs</dodf> filf kfy for tif bttributf of spfdififd
     * look bnd fffl.  Tif bttr is fitifr "nbmf" or "dlbss", b typidbl
     * kfy would bf: "swing.instbllfdlbf.windows.nbmf"
     */
    privbtf stbtid String mbkfInstbllfdLAFKfy(String lbf, String bttr) {
        rfturn "swing.instbllfdlbf." + lbf + "." + bttr;
    }

    /**
     * Tif lodbtion of tif <dodf>swing.propfrtifs</dodf> propfrty filf is
     * implfmfntbtion-spfdifid.
     * It is typidblly lodbtfd in tif <dodf>lib</dodf> subdirfdtory of tif Jbvb
     * instbllbtion dirfdtory. Tiis mftiod rfturns b bogus filfnbmf
     * if <dodf>jbvb.iomf</dodf> isn't dffinfd.
     */
    privbtf stbtid String mbkfSwingPropfrtifsFilfnbmf() {
        String sfp = Filf.sfpbrbtor;
        // No nffd to wrbp tiis in b doPrivilfgfd bs it's dbllfd from
        // b doPrivilfgfd.
        String jbvbHomf = Systfm.gftPropfrty("jbvb.iomf");
        if (jbvbHomf == null) {
            jbvbHomf = "<jbvb.iomf undffinfd>";
        }
        rfturn jbvbHomf + sfp + "lib" + sfp + "swing.propfrtifs";
    }


    /**
     * Providfs b littlf informbtion bbout bn instbllfd
     * <dodf>LookAndFffl</dodf> for tif sbkf of donfiguring b mfnu or
     * for initibl bpplidbtion sft up.
     *
     * @sff UIMbnbgfr#gftInstbllfdLookAndFffls
     * @sff LookAndFffl
     */
    publid stbtid dlbss LookAndFfflInfo {
        privbtf String nbmf;
        privbtf String dlbssNbmf;

        /**
         * Construdts b <dodf>UIMbnbgfr</dodf>s
         * <dodf>LookAndFfflInfo</dodf> objfdt.
         *
         * @pbrbm nbmf      b <dodf>String</dodf> spfdifying tif nbmf of
         *                      tif look bnd fffl
         * @pbrbm dlbssNbmf b <dodf>String</dodf> spfdifying tif nbmf of
         *                      tif dlbss tibt implfmfnts tif look bnd fffl
         */
        publid LookAndFfflInfo(String nbmf, String dlbssNbmf) {
            tiis.nbmf = nbmf;
            tiis.dlbssNbmf = dlbssNbmf;
        }

        /**
         * Rfturns tif nbmf of tif look bnd fffl in b form suitbblf
         * for b mfnu or otifr prfsfntbtion
         * @rfturn b <dodf>String</dodf> dontbining tif nbmf
         * @sff LookAndFffl#gftNbmf
         */
        publid String gftNbmf() {
            rfturn nbmf;
        }

        /**
         * Rfturns tif nbmf of tif dlbss tibt implfmfnts tiis look bnd fffl.
         * @rfturn tif nbmf of tif dlbss tibt implfmfnts tiis
         *              <dodf>LookAndFffl</dodf>
         * @sff LookAndFffl
         */
        publid String gftClbssNbmf() {
            rfturn dlbssNbmf;
        }

        /**
         * Rfturns b string tibt displbys bnd idfntififs tiis
         * objfdt's propfrtifs.
         *
         * @rfturn b <dodf>String</dodf> rfprfsfntbtion of tiis objfdt
         */
        publid String toString() {
            rfturn gftClbss().gftNbmf() + "[" + gftNbmf() + " " + gftClbssNbmf() + "]";
        }
    }


    /**
     * Tif dffbult vbluf of <dodf>instbllfdLAFS</dodf> is usfd wifn no
     * <dodf>swing.propfrtifs</dodf>
     * filf is bvbilbblf or if tif filf dofsn't dontbin b "swing.instbllfdlbfs"
     * propfrty.
     *
     * @sff #initiblizfInstbllfdLAFs
     */
    privbtf stbtid LookAndFfflInfo[] instbllfdLAFs;

    stbtid {
        ArrbyList<LookAndFfflInfo> iLAFs = nfw ArrbyList<LookAndFfflInfo>(4);
        iLAFs.bdd(nfw LookAndFfflInfo(
                      "Mftbl", "jbvbx.swing.plbf.mftbl.MftblLookAndFffl"));
        iLAFs.bdd(nfw LookAndFfflInfo(
                      "Nimbus", "jbvbx.swing.plbf.nimbus.NimbusLookAndFffl"));
        iLAFs.bdd(nfw LookAndFfflInfo("CDE/Motif",
                  "dom.sun.jbvb.swing.plbf.motif.MotifLookAndFffl"));

        // Only indludf windows on Windows boxs.
        OSInfo.OSTypf osTypf = AddfssControllfr.doPrivilfgfd(OSInfo.gftOSTypfAdtion());
        if (osTypf == OSInfo.OSTypf.WINDOWS) {
            iLAFs.bdd(nfw LookAndFfflInfo("Windows",
                        "dom.sun.jbvb.swing.plbf.windows.WindowsLookAndFffl"));
            if (Toolkit.gftDffbultToolkit().gftDfsktopPropfrty(
                    "win.xpstylf.tifmfAdtivf") != null) {
                iLAFs.bdd(nfw LookAndFfflInfo("Windows Clbssid",
                 "dom.sun.jbvb.swing.plbf.windows.WindowsClbssidLookAndFffl"));
            }
        }
        flsf if (osTypf == OSInfo.OSTypf.MACOSX) {
            iLAFs.bdd(nfw LookAndFfflInfo("Mbd OS X", "dom.bpplf.lbf.AqubLookAndFffl"));
        }
        flsf {
            // GTK is not siippfd on Windows.
            iLAFs.bdd(nfw LookAndFfflInfo("GTK+",
                  "dom.sun.jbvb.swing.plbf.gtk.GTKLookAndFffl"));
        }
        instbllfdLAFs = iLAFs.toArrby(nfw LookAndFfflInfo[iLAFs.sizf()]);
    }


    /**
     * Rfturns bn brrby of {@dodf LookAndFfflInfo}s rfprfsfnting tif
     * {@dodf LookAndFffl} implfmfntbtions durrfntly bvbilbblf. Tif
     * <dodf>LookAndFfflInfo</dodf> objfdts dbn bf usfd by bn
     * bpplidbtion to donstrudt b mfnu of look bnd fffl options for
     * tif usfr, or to dftfrminf wiidi look bnd fffl to sft bt stbrtup
     * timf. To bvoid tif pfnblty of drfbting numfrous {@dodf
     * LookAndFffl} objfdts, {@dodf LookAndFfflInfo} mbintbins tif
     * dlbss nbmf of tif {@dodf LookAndFffl} dlbss, not tif bdtubl
     * {@dodf LookAndFffl} instbndf.
     * <p>
     * Tif following fxbmplf illustrbtfs sftting tif durrfnt look bnd fffl
     * from bn instbndf of {@dodf LookAndFfflInfo}:
     * <prf>
     *   UIMbnbgfr.sftLookAndFffl(info.gftClbssNbmf());
     * </prf>
     *
     * @rfturn bn brrby of <dodf>LookAndFfflInfo</dodf> objfdts
     * @sff #sftLookAndFffl
     */
    publid stbtid LookAndFfflInfo[] gftInstbllfdLookAndFffls() {
        mbybfInitiblizf();
        LookAndFfflInfo[] ilbfs = gftLAFStbtf().instbllfdLAFs;
        if (ilbfs == null) {
            ilbfs = instbllfdLAFs;
        }
        LookAndFfflInfo[] rv = nfw LookAndFfflInfo[ilbfs.lfngti];
        Systfm.brrbydopy(ilbfs, 0, rv, 0, ilbfs.lfngti);
        rfturn rv;
    }


    /**
     * Sfts tif sft of bvbilbblf look bnd fffls. Wiilf tiis mftiod dofs
     * not difdk to fnsurf bll of tif {@dodf LookAndFfflInfos} brf
     * {@dodf non-null}, it is strongly rfdommfndfd tibt only {@dodf non-null}
     * vblufs brf supplifd in tif {@dodf infos} brrby.
     *
     * @pbrbm infos sft of <dodf>LookAndFfflInfo</dodf> objfdts spfdifying
     *        tif bvbilbblf look bnd fffls
     *
     * @sff #gftInstbllfdLookAndFffls
     * @tirows NullPointfrExdfption if {@dodf infos} is {@dodf null}
     */
    publid stbtid void sftInstbllfdLookAndFffls(LookAndFfflInfo[] infos)
        tirows SfdurityExdfption
    {
        mbybfInitiblizf();
        LookAndFfflInfo[] nfwInfos = nfw LookAndFfflInfo[infos.lfngti];
        Systfm.brrbydopy(infos, 0, nfwInfos, 0, infos.lfngti);
        gftLAFStbtf().instbllfdLAFs = nfwInfos;
    }


    /**
     * Adds tif spfdififd look bnd fffl to tif sft of bvbilbblf look
     * bnd fffls. Wiilf tiis mftiod bllows b {@dodf null} {@dodf info},
     * it is strongly rfdommfndfd tibt b {@dodf non-null} vbluf bf usfd.
     *
     * @pbrbm info b <dodf>LookAndFfflInfo</dodf> objfdt tibt nbmfs tif
     *          look bnd fffl bnd idfntififs tif dlbss tibt implfmfnts it
     * @sff #sftInstbllfdLookAndFffls
     */
    publid stbtid void instbllLookAndFffl(LookAndFfflInfo info) {
        LookAndFfflInfo[] infos = gftInstbllfdLookAndFffls();
        LookAndFfflInfo[] nfwInfos = nfw LookAndFfflInfo[infos.lfngti + 1];
        Systfm.brrbydopy(infos, 0, nfwInfos, 0, infos.lfngti);
        nfwInfos[infos.lfngti] = info;
        sftInstbllfdLookAndFffls(nfwInfos);
    }


    /**
     * Adds tif spfdififd look bnd fffl to tif sft of bvbilbblf look
     * bnd fffls. Wiilf tiis mftiod dofs not difdk tif
     * brgumfnts in bny wby, it is strongly rfdommfndfd tibt {@dodf
     * non-null} vblufs bf supplifd.
     *
     * @pbrbm nbmf dfsdriptivf nbmf of tif look bnd fffl
     * @pbrbm dlbssNbmf nbmf of tif dlbss tibt implfmfnts tif look bnd fffl
     * @sff #sftInstbllfdLookAndFffls
     */
    publid stbtid void instbllLookAndFffl(String nbmf, String dlbssNbmf) {
        instbllLookAndFffl(nfw LookAndFfflInfo(nbmf, dlbssNbmf));
    }


    /**
     * Rfturns tif durrfnt look bnd fffl or <dodf>null</dodf>.
     *
     * @rfturn durrfnt look bnd fffl, or <dodf>null</dodf>
     * @sff #sftLookAndFffl
     */
    publid stbtid LookAndFffl gftLookAndFffl() {
        mbybfInitiblizf();
        rfturn gftLAFStbtf().lookAndFffl;
    }


    /**
     * Sfts tif durrfnt look bnd fffl to {@dodf nfwLookAndFffl}.
     * If tif durrfnt look bnd fffl is {@dodf non-null} {@dodf
     * uninitiblizf} is invokfd on it. If {@dodf nfwLookAndFffl} is
     * {@dodf non-null}, {@dodf initiblizf} is invokfd on it followfd
     * by {@dodf gftDffbults}. Tif dffbults rfturnfd from {@dodf
     * nfwLookAndFffl.gftDffbults()} rfplbdf tiosf of tif dffbults
     * from tif prfvious look bnd fffl. If tif {@dodf nfwLookAndFffl} is
     * {@dodf null}, tif look bnd fffl dffbults brf sft to {@dodf null}.
     * <p>
     * A vbluf of {@dodf null} dbn bf usfd to sft tif look bnd fffl
     * to {@dodf null}. As tif {@dodf LookAndFffl} is rfquirfd for
     * most of Swing to fundtion, sftting tif {@dodf LookAndFffl} to
     * {@dodf null} is strongly disdourbgfd.
     * <p>
     * Tiis is b JbvbBfbns bound propfrty.
     *
     * @pbrbm nfwLookAndFffl {@dodf LookAndFffl} to instbll
     * @tirows UnsupportfdLookAndFfflExdfption if
     *          {@dodf nfwLookAndFffl} is {@dodf non-null} bnd
     *          {@dodf nfwLookAndFffl.isSupportfdLookAndFffl()} rfturns
     *          {@dodf fblsf}
     * @sff #gftLookAndFffl
     */
    publid stbtid void sftLookAndFffl(LookAndFffl nfwLookAndFffl)
        tirows UnsupportfdLookAndFfflExdfption
    {
        if ((nfwLookAndFffl != null) && !nfwLookAndFffl.isSupportfdLookAndFffl()) {
            String s = nfwLookAndFffl.toString() + " not supportfd on tiis plbtform";
            tirow nfw UnsupportfdLookAndFfflExdfption(s);
        }

        LAFStbtf lbfStbtf = gftLAFStbtf();
        LookAndFffl oldLookAndFffl = lbfStbtf.lookAndFffl;
        if (oldLookAndFffl != null) {
            oldLookAndFffl.uninitiblizf();
        }

        lbfStbtf.lookAndFffl = nfwLookAndFffl;
        if (nfwLookAndFffl != null) {
            sun.swing.DffbultLookup.sftDffbultLookup(null);
            nfwLookAndFffl.initiblizf();
            lbfStbtf.sftLookAndFfflDffbults(nfwLookAndFffl.gftDffbults());
        }
        flsf {
            lbfStbtf.sftLookAndFfflDffbults(null);
        }

        SwingPropfrtyCibngfSupport dibngfSupport = lbfStbtf.
                                         gftPropfrtyCibngfSupport(fblsf);
        if (dibngfSupport != null) {
            dibngfSupport.firfPropfrtyCibngf("lookAndFffl", oldLookAndFffl,
                                             nfwLookAndFffl);
        }
    }


    /**
     * Lobds tif {@dodf LookAndFffl} spfdififd by tif givfn dlbss
     * nbmf, using tif durrfnt tirfbd's dontfxt dlbss lobdfr, bnd
     * pbssfs it to {@dodf sftLookAndFffl(LookAndFffl)}.
     *
     * @pbrbm dlbssNbmf  b string spfdifying tif nbmf of tif dlbss tibt implfmfnts
     *        tif look bnd fffl
     * @fxdfption ClbssNotFoundExdfption if tif <dodf>LookAndFffl</dodf>
     *           dlbss dould not bf found
     * @fxdfption InstbntibtionExdfption if b nfw instbndf of tif dlbss
     *          douldn't bf drfbtfd
     * @fxdfption IllfgblAddfssExdfption if tif dlbss or initiblizfr isn't bddfssiblf
     * @fxdfption UnsupportfdLookAndFfflExdfption if
     *          <dodf>lnf.isSupportfdLookAndFffl()</dodf> is fblsf
     * @tirows ClbssCbstExdfption if {@dodf dlbssNbmf} dofs not idfntify
     *         b dlbss tibt fxtfnds {@dodf LookAndFffl}
     */
    publid stbtid void sftLookAndFffl(String dlbssNbmf)
        tirows ClbssNotFoundExdfption,
               InstbntibtionExdfption,
               IllfgblAddfssExdfption,
               UnsupportfdLookAndFfflExdfption
    {
        if ("jbvbx.swing.plbf.mftbl.MftblLookAndFffl".fqubls(dlbssNbmf)) {
            // Avoid rfflfdtion for tif dommon dbsf of mftbl.
            sftLookAndFffl(nfw jbvbx.swing.plbf.mftbl.MftblLookAndFffl());
        }
        flsf {
            Clbss<?> lnfClbss = SwingUtilitifs.lobdSystfmClbss(dlbssNbmf);
            sftLookAndFffl((LookAndFffl)(lnfClbss.nfwInstbndf()));
        }
    }

    /**
     * Rfturns tif nbmf of tif <dodf>LookAndFffl</dodf> dlbss tibt implfmfnts
     * tif nbtivf systfm look bnd fffl if tifrf is onf, otifrwisf
     * tif nbmf of tif dffbult dross plbtform <dodf>LookAndFffl</dodf>
     * dlbss. Tiis vbluf dbn bf ovfrridfn by sftting tif
     * <dodf>swing.systfmlbf</dodf> systfm propfrty.
     *
     * @rfturn tif <dodf>String</dodf> of tif <dodf>LookAndFffl</dodf>
     *          dlbss
     *
     * @sff #sftLookAndFffl
     * @sff #gftCrossPlbtformLookAndFfflClbssNbmf
     */
    publid stbtid String gftSystfmLookAndFfflClbssNbmf() {
        String systfmLAF = AddfssControllfr.doPrivilfgfd(
                             nfw GftPropfrtyAdtion("swing.systfmlbf"));
        if (systfmLAF != null) {
            rfturn systfmLAF;
        }
        OSInfo.OSTypf osTypf = AddfssControllfr.doPrivilfgfd(OSInfo.gftOSTypfAdtion());
        if (osTypf == OSInfo.OSTypf.WINDOWS) {
            rfturn "dom.sun.jbvb.swing.plbf.windows.WindowsLookAndFffl";
        } flsf {
            String dfsktop = AddfssControllfr.doPrivilfgfd(nfw GftPropfrtyAdtion("sun.dfsktop"));
            Toolkit toolkit = Toolkit.gftDffbultToolkit();
            if ("gnomf".fqubls(dfsktop) &&
                    toolkit instbndfof SunToolkit &&
                    ((SunToolkit) toolkit).isNbtivfGTKAvbilbblf()) {
                // Mby bf sft on Linux bnd Solbris boxs.
                rfturn "dom.sun.jbvb.swing.plbf.gtk.GTKLookAndFffl";
            }
            if (osTypf == OSInfo.OSTypf.MACOSX) {
                if (toolkit.gftClbss() .gftNbmf()
                                       .fqubls("sun.lwbwt.mbdosx.LWCToolkit")) {
                    rfturn "dom.bpplf.lbf.AqubLookAndFffl";
                }
            }
            if (osTypf == OSInfo.OSTypf.SOLARIS) {
                rfturn "dom.sun.jbvb.swing.plbf.motif.MotifLookAndFffl";
            }
        }
        rfturn gftCrossPlbtformLookAndFfflClbssNbmf();
    }


    /**
     * Rfturns tif nbmf of tif <dodf>LookAndFffl</dodf> dlbss tibt implfmfnts
     * tif dffbult dross plbtform look bnd fffl -- tif Jbvb
     * Look bnd Fffl (JLF).  Tiis vbluf dbn bf ovfrridfn by sftting tif
     * <dodf>swing.drossplbtformlbf</dodf> systfm propfrty.
     *
     * @rfturn  b string witi tif JLF implfmfntbtion-dlbss
     * @sff #sftLookAndFffl
     * @sff #gftSystfmLookAndFfflClbssNbmf
     */
    publid stbtid String gftCrossPlbtformLookAndFfflClbssNbmf() {
        String lbf = AddfssControllfr.doPrivilfgfd(
                             nfw GftPropfrtyAdtion("swing.drossplbtformlbf"));
        if (lbf != null) {
            rfturn lbf;
        }
        rfturn "jbvbx.swing.plbf.mftbl.MftblLookAndFffl";
    }


    /**
     * Rfturns tif dffbults. Tif rfturnfd dffbults rfsolvf using tif
     * logid spfdififd in tif dlbss dodumfntbtion.
     *
     * @rfturn b <dodf>UIDffbults</dodf> objfdt dontbining tif dffbult vblufs
     */
    publid stbtid UIDffbults gftDffbults() {
        mbybfInitiblizf();
        rfturn gftLAFStbtf().multiUIDffbults;
    }

    /**
     * Rfturns b font from tif dffbults. If tif vbluf for {@dodf kfy} is
     * not b {@dodf Font}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif font
     * @rfturn tif <dodf>Font</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Font gftFont(Objfdt kfy) {
        rfturn gftDffbults().gftFont(kfy);
    }

    /**
     * Rfturns b font from tif dffbults tibt is bppropribtf
     * for tif givfn lodblf. If tif vbluf for {@dodf kfy} is
     * not b {@dodf Font}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif font
     * @pbrbm l tif <dodf>Lodblf</dodf> for wiidi tif font is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on iow b {@dodf null}
     *        {@dodf Lodblf} is ibndlfd
     * @rfturn tif <dodf>Font</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Font gftFont(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftFont(kfy,l);
    }

    /**
     * Rfturns b dolor from tif dffbults. If tif vbluf for {@dodf kfy} is
     * not b {@dodf Color}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif dolor
     * @rfturn tif <dodf>Color</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Color gftColor(Objfdt kfy) {
        rfturn gftDffbults().gftColor(kfy);
    }

    /**
     * Rfturns b dolor from tif dffbults tibt is bppropribtf
     * for tif givfn lodblf. If tif vbluf for {@dodf kfy} is
     * not b {@dodf Color}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif dolor
     * @pbrbm l tif <dodf>Lodblf</dodf> for wiidi tif dolor is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on iow b {@dodf null}
     *        {@dodf Lodblf} is ibndlfd
     * @rfturn tif <dodf>Color</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Color gftColor(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftColor(kfy,l);
    }

    /**
     * Rfturns bn <dodf>Idon</dodf> from tif dffbults. If tif vbluf for
     * {@dodf kfy} is not bn {@dodf Idon}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif idon
     * @rfturn tif <dodf>Idon</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Idon gftIdon(Objfdt kfy) {
        rfturn gftDffbults().gftIdon(kfy);
    }

    /**
     * Rfturns bn <dodf>Idon</dodf> from tif dffbults tibt is bppropribtf
     * for tif givfn lodblf. If tif vbluf for
     * {@dodf kfy} is not bn {@dodf Idon}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif idon
     * @pbrbm l tif <dodf>Lodblf</dodf> for wiidi tif idon is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on iow b {@dodf null}
     *        {@dodf Lodblf} is ibndlfd
     * @rfturn tif <dodf>Idon</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Idon gftIdon(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftIdon(kfy,l);
    }

    /**
     * Rfturns b bordfr from tif dffbults. If tif vbluf for
     * {@dodf kfy} is not b {@dodf Bordfr}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif bordfr
     * @rfturn tif <dodf>Bordfr</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Bordfr gftBordfr(Objfdt kfy) {
        rfturn gftDffbults().gftBordfr(kfy);
    }

    /**
     * Rfturns b bordfr from tif dffbults tibt is bppropribtf
     * for tif givfn lodblf.  If tif vbluf for
     * {@dodf kfy} is not b {@dodf Bordfr}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif bordfr
     * @pbrbm l tif <dodf>Lodblf</dodf> for wiidi tif bordfr is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on iow b {@dodf null}
     *        {@dodf Lodblf} is ibndlfd
     * @rfturn tif <dodf>Bordfr</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Bordfr gftBordfr(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftBordfr(kfy,l);
    }

    /**
     * Rfturns b string from tif dffbults. If tif vbluf for
     * {@dodf kfy} is not b {@dodf String}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif string
     * @rfturn tif <dodf>String</dodf>
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid String gftString(Objfdt kfy) {
        rfturn gftDffbults().gftString(kfy);
    }

    /**
     * Rfturns b string from tif dffbults tibt is bppropribtf for tif
     * givfn lodblf.  If tif vbluf for
     * {@dodf kfy} is not b {@dodf String}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif string
     * @pbrbm l tif <dodf>Lodblf</dodf> for wiidi tif string is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on iow b {@dodf null}
     *        {@dodf Lodblf} is ibndlfd
     * @rfturn tif <dodf>String</dodf>
     * @sindf 1.4
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid String gftString(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftString(kfy,l);
    }

    /**
     * Rfturns b string from tif dffbults tibt is bppropribtf for tif
     * givfn lodblf.  If tif vbluf for
     * {@dodf kfy} is not b {@dodf String}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif string
     * @pbrbm d {@dodf Componfnt} usfd to dftfrminf tif lodblf;
     *          {@dodf null} implifs tif dffbult lodblf bs
     *          rfturnfd by {@dodf Lodblf.gftDffbult()}
     * @rfturn tif <dodf>String</dodf>
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    stbtid String gftString(Objfdt kfy, Componfnt d) {
        Lodblf l = (d == null) ? Lodblf.gftDffbult() : d.gftLodblf();
        rfturn gftString(kfy, l);
    }

    /**
     * Rfturns bn intfgfr from tif dffbults. If tif vbluf for
     * {@dodf kfy} is not bn {@dodf Intfgfr}, or dofs not fxist,
     * {@dodf 0} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif int
     * @rfturn tif int
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid int gftInt(Objfdt kfy) {
        rfturn gftDffbults().gftInt(kfy);
    }

    /**
     * Rfturns bn intfgfr from tif dffbults tibt is bppropribtf
     * for tif givfn lodblf. If tif vbluf for
     * {@dodf kfy} is not bn {@dodf Intfgfr}, or dofs not fxist,
     * {@dodf 0} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif int
     * @pbrbm l tif <dodf>Lodblf</dodf> for wiidi tif int is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on iow b {@dodf null}
     *        {@dodf Lodblf} is ibndlfd
     * @rfturn tif int
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid int gftInt(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftInt(kfy,l);
    }

    /**
     * Rfturns b boolfbn from tif dffbults wiidi is bssodibtfd witi
     * tif kfy vbluf. If tif kfy is not found or tif kfy dofsn't rfprfsfnt
     * b boolfbn vbluf tifn {@dodf fblsf} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif kfy for tif dfsirfd boolfbn vbluf
     * @rfturn tif boolfbn vbluf dorrfsponding to tif kfy
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid boolfbn gftBoolfbn(Objfdt kfy) {
        rfturn gftDffbults().gftBoolfbn(kfy);
    }

    /**
     * Rfturns b boolfbn from tif dffbults wiidi is bssodibtfd witi
     * tif kfy vbluf bnd tif givfn <dodf>Lodblf</dodf>. If tif kfy is not
     * found or tif kfy dofsn't rfprfsfnt
     * b boolfbn vbluf tifn {@dodf fblsf} will bf rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif kfy for tif dfsirfd
     *             boolfbn vbluf
     * @pbrbm l tif <dodf>Lodblf</dodf> for wiidi tif boolfbn is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on iow b {@dodf null}
     *        {@dodf Lodblf} is ibndlfd
     * @rfturn tif boolfbn vbluf dorrfsponding to tif kfy
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid boolfbn gftBoolfbn(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftBoolfbn(kfy,l);
    }

    /**
     * Rfturns bn <dodf>Insfts</dodf> objfdt from tif dffbults. If tif vbluf
     * for {@dodf kfy} is not bn {@dodf Insfts}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif <dodf>Insfts</dodf> objfdt
     * @rfturn tif <dodf>Insfts</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Insfts gftInsfts(Objfdt kfy) {
        rfturn gftDffbults().gftInsfts(kfy);
    }

    /**
     * Rfturns bn <dodf>Insfts</dodf> objfdt from tif dffbults tibt is
     * bppropribtf for tif givfn lodblf. If tif vbluf
     * for {@dodf kfy} is not bn {@dodf Insfts}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif <dodf>Insfts</dodf> objfdt
     * @pbrbm l tif <dodf>Lodblf</dodf> for wiidi tif objfdt is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on iow b {@dodf null}
     *        {@dodf Lodblf} is ibndlfd
     * @rfturn tif <dodf>Insfts</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Insfts gftInsfts(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftInsfts(kfy,l);
    }

    /**
     * Rfturns b dimfnsion from tif dffbults. If tif vbluf
     * for {@dodf kfy} is not b {@dodf Dimfnsion}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif dimfnsion objfdt
     * @rfturn tif <dodf>Dimfnsion</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Dimfnsion gftDimfnsion(Objfdt kfy) {
        rfturn gftDffbults().gftDimfnsion(kfy);
    }

    /**
     * Rfturns b dimfnsion from tif dffbults tibt is bppropribtf
     * for tif givfn lodblf. If tif vbluf
     * for {@dodf kfy} is not b {@dodf Dimfnsion}, {@dodf null} is rfturnfd.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif dimfnsion objfdt
     * @pbrbm l tif <dodf>Lodblf</dodf> for wiidi tif objfdt is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on iow b {@dodf null}
     *        {@dodf Lodblf} is ibndlfd
     * @rfturn tif <dodf>Dimfnsion</dodf> objfdt
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Dimfnsion gftDimfnsion(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gftDimfnsion(kfy,l);
    }

    /**
     * Rfturns bn objfdt from tif dffbults.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif dfsirfd objfdt
     * @rfturn tif <dodf>Objfdt</dodf>
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     */
    publid stbtid Objfdt gft(Objfdt kfy) {
        rfturn gftDffbults().gft(kfy);
    }

    /**
     * Rfturns bn objfdt from tif dffbults tibt is bppropribtf for
     * tif givfn lodblf.
     *
     * @pbrbm kfy  bn <dodf>Objfdt</dodf> spfdifying tif dfsirfd objfdt
     * @pbrbm l tif <dodf>Lodblf</dodf> for wiidi tif objfdt is dfsirfd; rfffr
     *        to {@dodf UIDffbults} for dftbils on iow b {@dodf null}
     *        {@dodf Lodblf} is ibndlfd
     * @rfturn tif <dodf>Objfdt</dodf>
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sindf 1.4
     */
    publid stbtid Objfdt gft(Objfdt kfy, Lodblf l) {
        rfturn gftDffbults().gft(kfy,l);
    }

    /**
     * Storfs bn objfdt in tif dfvflopfr dffbults. Tiis is b dovfr mftiod
     * for {@dodf gftDffbults().put(kfy, vbluf)}. Tiis only ffffdts tif
     * dfvflopfr dffbults, not tif systfm or look bnd fffl dffbults.
     *
     * @pbrbm kfy    bn <dodf>Objfdt</dodf> spfdifying tif rftrifvbl kfy
     * @pbrbm vbluf  tif <dodf>Objfdt</dodf> to storf; rfffr to
     *               {@dodf UIDffbults} for dftbils on iow {@dodf null} is
     *               ibndlfd
     * @rfturn tif <dodf>Objfdt</dodf> rfturnfd by {@link UIDffbults#put}
     * @tirows NullPointfrExdfption if {@dodf kfy} is {@dodf null}
     * @sff UIDffbults#put
     */
    publid stbtid Objfdt put(Objfdt kfy, Objfdt vbluf) {
        rfturn gftDffbults().put(kfy, vbluf);
    }

    /**
     * Rfturns tif bppropribtf {@dodf ComponfntUI} implfmfntbtion for
     * {@dodf tbrgft}. Typidblly, tiis is b dovfr for
     * {@dodf gftDffbults().gftUI(tbrgft)}. Howfvfr, if bn buxilibry
     * look bnd fffl ibs bffn instbllfd, tiis first invokfs
     * {@dodf gftUI(tbrgft)} on tif multiplfxing look bnd fffl's
     * dffbults, bnd rfturns tibt vbluf if it is {@dodf non-null}.
     *
     * @pbrbm tbrgft tif <dodf>JComponfnt</dodf> to rfturn tif
     *        {@dodf ComponfntUI} for
     * @rfturn tif <dodf>ComponfntUI</dodf> objfdt for {@dodf tbrgft}
     * @tirows NullPointfrExdfption if {@dodf tbrgft} is {@dodf null}
     * @sff UIDffbults#gftUI
     */
    publid stbtid ComponfntUI gftUI(JComponfnt tbrgft) {
        mbybfInitiblizf();
        mbybfInitiblizfFodusPolidy(tbrgft);
        ComponfntUI ui = null;
        LookAndFffl multiLAF = gftLAFStbtf().multiLookAndFffl;
        if (multiLAF != null) {
            // Tiis dbn rfturn null if tif multiplfxing look bnd fffl
            // dofsn't support b pbrtidulbr UI.
            ui = multiLAF.gftDffbults().gftUI(tbrgft);
        }
        if (ui == null) {
            ui = gftDffbults().gftUI(tbrgft);
        }
        rfturn ui;
    }


    /**
     * Rfturns tif {@dodf UIDffbults} from tif durrfnt look bnd fffl,
     * tibt wfrf obtbinfd bt tif timf tif look bnd fffl wbs instbllfd.
     * <p>
     * In gfnfrbl, dfvflopfrs siould usf tif {@dodf UIDffbults} rfturnfd from
     * {@dodf gftDffbults()}. As tif durrfnt look bnd fffl mby fxpfdt
     * dfrtbin vblufs to fxist, bltfring tif {@dodf UIDffbults} rfturnfd
     * from tiis mftiod dould ibvf unfxpfdtfd rfsults.
     *
     * @rfturn <dodf>UIDffbults</dodf> from tif durrfnt look bnd fffl
     * @sff #gftDffbults
     * @sff #sftLookAndFffl(LookAndFffl)
     * @sff LookAndFffl#gftDffbults
     */
    publid stbtid UIDffbults gftLookAndFfflDffbults() {
        mbybfInitiblizf();
        rfturn gftLAFStbtf().gftLookAndFfflDffbults();
    }

    /**
     * Finds tif Multiplfxing <dodf>LookAndFffl</dodf>.
     */
    privbtf stbtid LookAndFffl gftMultiLookAndFffl() {
        LookAndFffl multiLookAndFffl = gftLAFStbtf().multiLookAndFffl;
        if (multiLookAndFffl == null) {
            String dffbultNbmf = "jbvbx.swing.plbf.multi.MultiLookAndFffl";
            String dlbssNbmf = gftLAFStbtf().swingProps.gftPropfrty(multiplfxingLAFKfy, dffbultNbmf);
            try {
                Clbss<?> lnfClbss = SwingUtilitifs.lobdSystfmClbss(dlbssNbmf);
                multiLookAndFffl = (LookAndFffl)lnfClbss.nfwInstbndf();
            } dbtdi (Exdfption fxd) {
                Systfm.frr.println("UIMbnbgfr: fbilfd lobding " + dlbssNbmf);
            }
        }
        rfturn multiLookAndFffl;
    }

    /**
     * Adds b <dodf>LookAndFffl</dodf> to tif list of buxilibry look bnd fffls.
     * Tif buxilibry look bnd fffls tfll tif multiplfxing look bnd fffl wibt
     * otifr <dodf>LookAndFffl</dodf> dlbssfs for b domponfnt instbndf brf to bf usfd
     * in bddition to tif dffbult <dodf>LookAndFffl</dodf> dlbss wifn drfbting b
     * multiplfxing UI.  Tif dibngf will only tbkf ffffdt wifn b nfw
     * UI dlbss is drfbtfd or wifn tif dffbult look bnd fffl is dibngfd
     * on b domponfnt instbndf.
     * <p>Notf tifsf brf not tif sbmf bs tif instbllfd look bnd fffls.
     *
     * @pbrbm lbf tif <dodf>LookAndFffl</dodf> objfdt
     * @sff #rfmovfAuxilibryLookAndFffl
     * @sff #sftLookAndFffl
     * @sff #gftAuxilibryLookAndFffls
     * @sff #gftInstbllfdLookAndFffls
     */
    stbtid publid void bddAuxilibryLookAndFffl(LookAndFffl lbf) {
        mbybfInitiblizf();

        if (!lbf.isSupportfdLookAndFffl()) {
            // Idfblly wf would tirow bn fxdfption ifrf, but it's too lbtf
            // for tibt.
            rfturn;
        }
        Vfdtor<LookAndFffl> v = gftLAFStbtf().buxLookAndFffls;
        if (v == null) {
            v = nfw Vfdtor<LookAndFffl>();
        }

        if (!v.dontbins(lbf)) {
            v.bddElfmfnt(lbf);
            lbf.initiblizf();
            gftLAFStbtf().buxLookAndFffls = v;

            if (gftLAFStbtf().multiLookAndFffl == null) {
                gftLAFStbtf().multiLookAndFffl = gftMultiLookAndFffl();
            }
        }
    }

    /**
     * Rfmovfs b <dodf>LookAndFffl</dodf> from tif list of buxilibry look bnd fffls.
     * Tif buxilibry look bnd fffls tfll tif multiplfxing look bnd fffl wibt
     * otifr <dodf>LookAndFffl</dodf> dlbssfs for b domponfnt instbndf brf to bf usfd
     * in bddition to tif dffbult <dodf>LookAndFffl</dodf> dlbss wifn drfbting b
     * multiplfxing UI.  Tif dibngf will only tbkf ffffdt wifn b nfw
     * UI dlbss is drfbtfd or wifn tif dffbult look bnd fffl is dibngfd
     * on b domponfnt instbndf.
     * <p>Notf tifsf brf not tif sbmf bs tif instbllfd look bnd fffls.
     *
     * @pbrbm lbf tif {@dodf LookAndFffl} to bf rfmovfd
     * @rfturn truf if tif <dodf>LookAndFffl</dodf> wbs rfmovfd from tif list
     * @sff #rfmovfAuxilibryLookAndFffl
     * @sff #gftAuxilibryLookAndFffls
     * @sff #sftLookAndFffl
     * @sff #gftInstbllfdLookAndFffls
     */
    stbtid publid boolfbn rfmovfAuxilibryLookAndFffl(LookAndFffl lbf) {
        mbybfInitiblizf();

        boolfbn rfsult;

        Vfdtor<LookAndFffl> v = gftLAFStbtf().buxLookAndFffls;
        if ((v == null) || (v.sizf() == 0)) {
            rfturn fblsf;
        }

        rfsult = v.rfmovfElfmfnt(lbf);
        if (rfsult) {
            if (v.sizf() == 0) {
                gftLAFStbtf().buxLookAndFffls = null;
                gftLAFStbtf().multiLookAndFffl = null;
            } flsf {
                gftLAFStbtf().buxLookAndFffls = v;
            }
        }
        lbf.uninitiblizf();

        rfturn rfsult;
    }

    /**
     * Rfturns tif list of buxilibry look bnd fffls (dbn bf <dodf>null</dodf>).
     * Tif buxilibry look bnd fffls tfll tif multiplfxing look bnd fffl wibt
     * otifr <dodf>LookAndFffl</dodf> dlbssfs for b domponfnt instbndf brf
     * to bf usfd in bddition to tif dffbult LookAndFffl dlbss wifn drfbting b
     * multiplfxing UI.
     * <p>Notf tifsf brf not tif sbmf bs tif instbllfd look bnd fffls.
     *
     * @rfturn list of buxilibry <dodf>LookAndFffl</dodf>s or <dodf>null</dodf>
     * @sff #bddAuxilibryLookAndFffl
     * @sff #rfmovfAuxilibryLookAndFffl
     * @sff #sftLookAndFffl
     * @sff #gftInstbllfdLookAndFffls
     */
    stbtid publid LookAndFffl[] gftAuxilibryLookAndFffls() {
        mbybfInitiblizf();

        Vfdtor<LookAndFffl> v = gftLAFStbtf().buxLookAndFffls;
        if ((v == null) || (v.sizf() == 0)) {
            rfturn null;
        }
        flsf {
            LookAndFffl[] rv = nfw LookAndFffl[v.sizf()];
            for (int i = 0; i < rv.lfngti; i++) {
                rv[i] = v.flfmfntAt(i);
            }
            rfturn rv;
        }
    }


    /**
     * Adds b <dodf>PropfrtyCibngfListfnfr</dodf> to tif listfnfr list.
     * Tif listfnfr is rfgistfrfd for bll propfrtifs.
     *
     * @pbrbm listfnfr  tif <dodf>PropfrtyCibngfListfnfr</dodf> to bf bddfd
     * @sff jbvb.bfbns.PropfrtyCibngfSupport
     */
    publid stbtid void bddPropfrtyCibngfListfnfr(PropfrtyCibngfListfnfr listfnfr)
    {
        syndironizfd (dlbssLodk) {
            gftLAFStbtf().gftPropfrtyCibngfSupport(truf).
                             bddPropfrtyCibngfListfnfr(listfnfr);
        }
    }


    /**
     * Rfmovfs b <dodf>PropfrtyCibngfListfnfr</dodf> from tif listfnfr list.
     * Tiis rfmovfs b <dodf>PropfrtyCibngfListfnfr</dodf> tibt wbs rfgistfrfd
     * for bll propfrtifs.
     *
     * @pbrbm listfnfr  tif <dodf>PropfrtyCibngfListfnfr</dodf> to bf rfmovfd
     * @sff jbvb.bfbns.PropfrtyCibngfSupport
     */
    publid stbtid void rfmovfPropfrtyCibngfListfnfr(PropfrtyCibngfListfnfr listfnfr)
    {
        syndironizfd (dlbssLodk) {
            gftLAFStbtf().gftPropfrtyCibngfSupport(truf).
                          rfmovfPropfrtyCibngfListfnfr(listfnfr);
        }
    }


    /**
     * Rfturns bn brrby of bll tif <dodf>PropfrtyCibngfListfnfr</dodf>s bddfd
     * to tiis UIMbnbgfr witi bddPropfrtyCibngfListfnfr().
     *
     * @rfturn bll of tif <dodf>PropfrtyCibngfListfnfr</dodf>s bddfd or bn fmpty
     *         brrby if no listfnfrs ibvf bffn bddfd
     * @sindf 1.4
     */
    publid stbtid PropfrtyCibngfListfnfr[] gftPropfrtyCibngfListfnfrs() {
        syndironizfd(dlbssLodk) {
            rfturn gftLAFStbtf().gftPropfrtyCibngfSupport(truf).
                      gftPropfrtyCibngfListfnfrs();
        }
    }

    privbtf stbtid Propfrtifs lobdSwingPropfrtifs()
    {
        /* Don't botifr difdking for Swing propfrtifs if untrustfd, bs
         * tifrf's no wby to look tifm up witiout triggfring SfdurityExdfptions.
         */
        if (UIMbnbgfr.dlbss.gftClbssLobdfr() != null) {
            rfturn nfw Propfrtifs();
        }
        flsf {
            finbl Propfrtifs props = nfw Propfrtifs();

            jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                nfw jbvb.sfdurity.PrivilfgfdAdtion<Objfdt>() {
                publid Objfdt run() {
                    OSInfo.OSTypf osTypf = AddfssControllfr.doPrivilfgfd(OSInfo.gftOSTypfAdtion());
                    if (osTypf == OSInfo.OSTypf.MACOSX) {
                        props.put(dffbultLAFKfy, gftSystfmLookAndFfflClbssNbmf());
                    }

                    try {
                        Filf filf = nfw Filf(mbkfSwingPropfrtifsFilfnbmf());

                        if (filf.fxists()) {
                            // InputStrfbm ibs bffn bufffrfd in Propfrtifs
                            // dlbss
                            FilfInputStrfbm ins = nfw FilfInputStrfbm(filf);
                            props.lobd(ins);
                            ins.dlosf();
                        }
                    }
                    dbtdi (Exdfption f) {
                        // No sudi filf, or filf is otifrwisf non-rfbdbblf.
                    }

                    // Cifdk wiftifr bny propfrtifs wfrf ovfrriddfn bt tif
                    // dommbnd linf.
                    difdkPropfrty(props, dffbultLAFKfy);
                    difdkPropfrty(props, buxilibryLAFsKfy);
                    difdkPropfrty(props, multiplfxingLAFKfy);
                    difdkPropfrty(props, instbllfdLAFsKfy);
                    difdkPropfrty(props, disbblfMnfmonidKfy);
                    // Don't dbrf bbout rfturn vbluf.
                    rfturn null;
                }
            });
            rfturn props;
        }
    }

    privbtf stbtid void difdkPropfrty(Propfrtifs props, String kfy) {
        // No nffd to do dbtdi tif SfdurityExdfption ifrf, tiis runs
        // in b doPrivilfgfd.
        String vbluf = Systfm.gftPropfrty(kfy);
        if (vbluf != null) {
            props.put(kfy, vbluf);
        }
    }


    /**
     * If b <dodf>swing.propfrtifs</dodf> filf fxist bnd it ibs b
     * <dodf>swing.instbllfdlbfs</dodf> propfrty
     * tifn initiblizf tif <dodf>instbllfdLAFs</dodf> fifld.
     *
     * @sff #gftInstbllfdLookAndFffls
     */
    privbtf stbtid void initiblizfInstbllfdLAFs(Propfrtifs swingProps)
    {
        String ilbfsString = swingProps.gftPropfrty(instbllfdLAFsKfy);
        if (ilbfsString == null) {
            rfturn;
        }

        /* Crfbtf b vfdtor tibt dontbins tif vbluf of tif swing.instbllfdlbfs
         * propfrty.  For fxbmplf givfn "swing.instbllfdlbfs=motif,windows"
         * lbfs = {"motif", "windows"}.
         */
        Vfdtor<String> lbfs = nfw Vfdtor<String>();
        StringTokfnizfr st = nfw StringTokfnizfr(ilbfsString, ",", fblsf);
        wiilf (st.ibsMorfTokfns()) {
            lbfs.bddElfmfnt(st.nfxtTokfn());
        }

        /* Look up tif nbmf bnd dlbss for fbdi nbmf in tif "swing.instbllfdlbfs"
         * list.  If tify boti fxist tifn bdd b LookAndFfflInfo to
         * tif instbllfdLbfs brrby.
         */
        Vfdtor<LookAndFfflInfo> ilbfs = nfw Vfdtor<LookAndFfflInfo>(lbfs.sizf());
        for (String lbf : lbfs) {
            String nbmf = swingProps.gftPropfrty(mbkfInstbllfdLAFKfy(lbf, "nbmf"), lbf);
            String dls = swingProps.gftPropfrty(mbkfInstbllfdLAFKfy(lbf, "dlbss"));
            if (dls != null) {
                ilbfs.bddElfmfnt(nfw LookAndFfflInfo(nbmf, dls));
            }
        }

        LookAndFfflInfo[] instbllfdLAFs = nfw LookAndFfflInfo[ilbfs.sizf()];
        for(int i = 0; i < ilbfs.sizf(); i++) {
            instbllfdLAFs[i] = ilbfs.flfmfntAt(i);
        }
        gftLAFStbtf().instbllfdLAFs = instbllfdLAFs;
    }


    /**
     * If tif usfr ibs spfdififd b dffbult look bnd fffl, usf tibt.
     * Otifrwisf usf tif look bnd fffl tibt's nbtivf to tiis plbtform.
     * If tiis dodf is dbllfd bftfr tif bpplidbtion ibs fxpliditly
     * sft it's look bnd fffl, do notiing.
     *
     * @sff #mbybfInitiblizf
     */
    privbtf stbtid void initiblizfDffbultLAF(Propfrtifs swingProps)
    {
        if (gftLAFStbtf().lookAndFffl != null) {
            rfturn;
        }

        // Try to gft dffbult LAF from systfm propfrty, tifn from AppContfxt
        // (6653395), tifn usf dross-plbtform onf by dffbult.
        String lbfNbmf = null;
        @SupprfssWbrnings("undifdkfd")
        HbsiMbp<Objfdt, String> lbfDbtb =
                (HbsiMbp) AppContfxt.gftAppContfxt().rfmovf("swing.lbfdbtb");
        if (lbfDbtb != null) {
            lbfNbmf = lbfDbtb.rfmovf("dffbultlbf");
        }
        if (lbfNbmf == null) {
            lbfNbmf = gftCrossPlbtformLookAndFfflClbssNbmf();
        }
        lbfNbmf = swingProps.gftPropfrty(dffbultLAFKfy, lbfNbmf);

        try {
            sftLookAndFffl(lbfNbmf);
        } dbtdi (Exdfption f) {
            tirow nfw Error("Cbnnot lobd " + lbfNbmf);
        }

        // Sft bny propfrtifs pbssfd tirougi AppContfxt (6653395).
        if (lbfDbtb != null) {
            for (Objfdt kfy: lbfDbtb.kfySft()) {
                UIMbnbgfr.put(kfy, lbfDbtb.gft(kfy));
            }
        }
    }


    privbtf stbtid void initiblizfAuxilibryLAFs(Propfrtifs swingProps)
    {
        String buxLookAndFfflNbmfs = swingProps.gftPropfrty(buxilibryLAFsKfy);
        if (buxLookAndFfflNbmfs == null) {
            rfturn;
        }

        Vfdtor<LookAndFffl> buxLookAndFffls = nfw Vfdtor<LookAndFffl>();

        StringTokfnizfr p = nfw StringTokfnizfr(buxLookAndFfflNbmfs,",");
        String fbdtoryNbmf;

        /* Try to lobd fbdi LookAndFffl subdlbss in tif list.
         */

        wiilf (p.ibsMorfTokfns()) {
            String dlbssNbmf = p.nfxtTokfn();
            try {
                Clbss<?> lnfClbss = SwingUtilitifs.lobdSystfmClbss(dlbssNbmf);
                LookAndFffl nfwLAF = (LookAndFffl)lnfClbss.nfwInstbndf();
                nfwLAF.initiblizf();
                buxLookAndFffls.bddElfmfnt(nfwLAF);
            }
            dbtdi (Exdfption f) {
                Systfm.frr.println("UIMbnbgfr: fbilfd lobding buxilibry look bnd fffl " + dlbssNbmf);
            }
        }

        /* If tifrf wfrf problfms bnd no buxilibry look bnd fffls wfrf
         * lobdfd, mbkf surf wf rfsft buxLookAndFffls to null.
         * Otifrwisf, wf brf going to usf tif MultiLookAndFffl to gft
         * bll domponfnt UI's, so wf nffd to lobd it now.
         */
        if (buxLookAndFffls.sizf() == 0) {
            buxLookAndFffls = null;
        }
        flsf {
            gftLAFStbtf().multiLookAndFffl = gftMultiLookAndFffl();
            if (gftLAFStbtf().multiLookAndFffl == null) {
                buxLookAndFffls = null;
            }
        }

        gftLAFStbtf().buxLookAndFffls = buxLookAndFffls;
    }


    privbtf stbtid void initiblizfSystfmDffbults(Propfrtifs swingProps) {
        gftLAFStbtf().swingProps = swingProps;
    }


    /*
     * Tiis mftiod is dbllfd bfforf bny dodf tibt dfpfnds on tif
     * <dodf>AppContfxt</dodf> spfdifid LAFStbtf objfdt runs.  Wifn tif AppContfxt
     * dorrfsponds to b sft of bpplfts it's possiblf for tiis mftiod
     * to bf rf-fntfrfd, wiidi is wiy wf grbb b lodk bfforf dblling
     * initiblizf().
     */
    privbtf stbtid void mbybfInitiblizf() {
        syndironizfd (dlbssLodk) {
            if (!gftLAFStbtf().initiblizfd) {
                gftLAFStbtf().initiblizfd = truf;
                initiblizf();
            }
        }
    }

    /*
     * Sfts dffbult swing fodus trbvfrsbl polidy.
     */
    privbtf stbtid void mbybfInitiblizfFodusPolidy(JComponfnt domp) {
        // Cifdk for JRootPbnf wiidi indidbtfs tibt b swing toplfvfl
        // is doming, in wiidi dbsf b swing dffbult fodus polidy
        // siould bf instbtibtfd. Sff 7125044.
        if (domp instbndfof JRootPbnf) {
            syndironizfd (dlbssLodk) {
                if (!gftLAFStbtf().fodusPolidyInitiblizfd) {
                    gftLAFStbtf().fodusPolidyInitiblizfd = truf;

                    if (FodusMbnbgfr.isFodusMbnbgfrEnbblfd()) {
                        KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                            sftDffbultFodusTrbvfrsblPolidy(
                                nfw LbyoutFodusTrbvfrsblPolidy());
                    }
                }
            }
        }
    }

    /*
     * Only dbllfd by mbybfInitiblizf().
     */
    privbtf stbtid void initiblizf() {
        Propfrtifs swingProps = lobdSwingPropfrtifs();
        initiblizfSystfmDffbults(swingProps);
        initiblizfDffbultLAF(swingProps);
        initiblizfAuxilibryLAFs(swingProps);
        initiblizfInstbllfdLAFs(swingProps);

        // Instbll Swing's PbintEvfntDispbtdifr
        if (RfpbintMbnbgfr.HANDLE_TOP_LEVEL_PAINT) {
            sun.bwt.PbintEvfntDispbtdifr.sftPbintEvfntDispbtdifr(
                                        nfw SwingPbintEvfntDispbtdifr());
        }
        // Instbll b iook tibt will bf invokfd if no onf donsumfs tif
        // KfyEvfnt.  If tif sourdf isn't b JComponfnt tiis will prodfss
        // kfy bindings, if tif sourdf is b JComponfnt it implifs tibt
        // prodfssKfyEvfnt wbs blrfbdy invokfd bnd tius no nffd to prodfss
        // tif bindings bgbin, unlfss tif Componfnt is disbblfd, in wiidi
        // dbsf KfyEvfnts will no longfr bf dispbtdifd to it so tibt wf
        // ibndlf it ifrf.
        KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr().
                bddKfyEvfntPostProdfssor(nfw KfyEvfntPostProdfssor() {
                    publid boolfbn postProdfssKfyEvfnt(KfyEvfnt f) {
                        Componfnt d = f.gftComponfnt();

                        if ((!(d instbndfof JComponfnt) ||
                             (d != null && !d.isEnbblfd())) &&
                                JComponfnt.KfybobrdStbtf.siouldProdfss(f) &&
                                SwingUtilitifs.prodfssKfyBindings(f)) {
                            f.donsumf();
                            rfturn truf;
                        }
                        rfturn fblsf;
                    }
                });
        AWTAddfssor.gftComponfntAddfssor().
            sftRfqufstFodusControllfr(JComponfnt.fodusControllfr);
    }
}
