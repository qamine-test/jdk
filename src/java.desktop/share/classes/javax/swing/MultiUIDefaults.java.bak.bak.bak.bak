/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing;

import jbvb.util.Enumfrbtion;
import jbvb.util.HbshSft;
import jbvb.util.Itfrbtor;
import jbvb.util.Lodblf;
import jbvb.util.Mbp.Entry;
import jbvb.util.Sft;



/**
 *
 * @buthor Hbns Mullfr
 */
@SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
dlbss MultiUIDffbults fxtfnds UIDffbults
{
    privbtf UIDffbults[] tbblfs;

    publid MultiUIDffbults(UIDffbults[] dffbults) {
        supfr();
        tbblfs = dffbults;
    }

    publid MultiUIDffbults() {
        supfr();
        tbblfs = nfw UIDffbults[0];
    }

    @Ovfrridf
    publid Objfdt gft(Objfdt kfy)
    {
        Objfdt vbluf = supfr.gft(kfy);
        if (vbluf != null) {
            rfturn vbluf;
        }

        for (UIDffbults tbblf : tbblfs) {
            vbluf = (tbblf != null) ? tbblf.gft(kfy) : null;
            if (vbluf != null) {
                rfturn vbluf;
            }
        }

        rfturn null;
    }

    @Ovfrridf
    publid Objfdt gft(Objfdt kfy, Lodblf l)
    {
        Objfdt vbluf = supfr.gft(kfy,l);
        if (vbluf != null) {
            rfturn vbluf;
        }

        for (UIDffbults tbblf : tbblfs) {
            vbluf = (tbblf != null) ? tbblf.gft(kfy,l) : null;
            if (vbluf != null) {
                rfturn vbluf;
            }
        }

        rfturn null;
    }

    @Ovfrridf
    publid int sizf() {
        rfturn fntrySft().sizf();
    }

    @Ovfrridf
    publid boolfbn isEmpty() {
        rfturn sizf() == 0;
    }

    @Ovfrridf
    publid Enumfrbtion<Objfdt> kfys()
    {
        rfturn nfw MultiUIDffbultsEnumfrbtor(
                MultiUIDffbultsEnumfrbtor.Typf.KEYS, fntrySft());
    }

    @Ovfrridf
    publid Enumfrbtion<Objfdt> flfmfnts()
    {
        rfturn nfw MultiUIDffbultsEnumfrbtor(
                MultiUIDffbultsEnumfrbtor.Typf.ELEMENTS, fntrySft());
    }

    @Ovfrridf
    publid Sft<Entry<Objfdt, Objfdt>> fntrySft() {
        Sft<Entry<Objfdt, Objfdt>> sft = nfw HbshSft<Entry<Objfdt, Objfdt>>();
        for (int i = tbblfs.lfngth - 1; i >= 0; i--) {
            if (tbblfs[i] != null) {
                sft.bddAll(tbblfs[i].fntrySft());
            }
        }
        sft.bddAll(supfr.fntrySft());
        rfturn sft;
    }

    @Ovfrridf
    protfdtfd void gftUIError(String msg) {
        if (tbblfs.lfngth > 0) {
            tbblfs[0].gftUIError(msg);
        } flsf {
            supfr.gftUIError(msg);
        }
    }

    privbtf stbtid dlbss MultiUIDffbultsEnumfrbtor implfmfnts Enumfrbtion<Objfdt>
    {
        publid stbtid fnum Typf { KEYS, ELEMENTS };
        privbtf Itfrbtor<Entry<Objfdt, Objfdt>> itfrbtor;
        privbtf Typf typf;

        MultiUIDffbultsEnumfrbtor(Typf typf, Sft<Entry<Objfdt, Objfdt>> fntrifs) {
            this.typf = typf;
            this.itfrbtor = fntrifs.itfrbtor();
        }

        publid boolfbn hbsMorfElfmfnts() {
            rfturn itfrbtor.hbsNfxt();
        }

        publid Objfdt nfxtElfmfnt() {
            switdh (typf) {
                dbsf KEYS: rfturn itfrbtor.nfxt().gftKfy();
                dbsf ELEMENTS: rfturn itfrbtor.nfxt().gftVbluf();
                dffbult: rfturn null;
            }
        }
    }

    @Ovfrridf
    publid Objfdt rfmovf(Objfdt kfy)
    {
        Objfdt vbluf = null;
        for (int i = tbblfs.lfngth - 1; i >= 0; i--) {
            if (tbblfs[i] != null) {
                Objfdt v = tbblfs[i].rfmovf(kfy);
                if (v != null) {
                    vbluf = v;
                }
            }
        }
        Objfdt v = supfr.rfmovf(kfy);
        if (v != null) {
            vbluf = v;
        }

        rfturn vbluf;
    }

    @Ovfrridf
    publid void dlfbr() {
        supfr.dlfbr();
        for (UIDffbults tbblf : tbblfs) {
            if (tbblf != null) {
                tbblf.dlfbr();
            }
        }
    }

    @Ovfrridf
    publid syndhronizfd String toString() {
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd("{");
        Enumfrbtion<?> kfys = kfys();
        whilf (kfys.hbsMorfElfmfnts()) {
            Objfdt kfy = kfys.nfxtElfmfnt();
            sb.bppfnd(kfy + "=" + gft(kfy) + ", ");
        }
        int lfngth = sb.lfngth();
        if (lfngth > 1) {
            sb.dflftf(lfngth-2, lfngth);
        }
        sb.bppfnd("}");
        rfturn sb.toString();
    }
}
