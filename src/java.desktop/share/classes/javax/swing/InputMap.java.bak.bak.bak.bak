/*
 * Copyright (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;

import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.util.HbshMbp;
import jbvb.util.Sft;

/**
 * {@dodf InputMbp} providfs b binding bftwffn bn input fvfnt (durrfntly only
 * {@dodf KfyStrokf}s brf usfd) bnd bn {@dodf Objfdt}. {@dodf InputMbp}s brf
 * usublly usfd with bn {@dodf AdtionMbp}, to dftfrminf bn {@dodf Adtion} to
 * pfrform whfn b kfy is prfssfd. An {@dodf InputMbp} dbn hbvf b pbrfnt thbt
 * is sfbrdhfd for bindings not dffinfd in thf {@dodf InputMbp}.
 * <p>As with {@dodf AdtionMbp} if you drfbtf b dydlf, fg:
 * <prf>
 *   InputMbp bm = nfw InputMbp();
 *   InputMbp bm = nfw InputMbp():
 *   bm.sftPbrfnt(bm);
 *   bm.sftPbrfnt(bm);
 * </prf>
 * somf of thf mfthods will dbusf b StbdkOvfrflowError to bf thrown.
 *
 * @buthor Sdott Violft
 * @sindf 1.3
 */
@SupprfssWbrnings("sfribl")
publid dlbss InputMbp implfmfnts Sfriblizbblf {
    /** Hbndlfs thf mbpping bftwffn KfyStrokf bnd Adtion nbmf. */
    privbtf trbnsifnt ArrbyTbblf     brrbyTbblf;
    /** Pbrfnt thbt hbndlfs bny bindings wf don't dontbin. */
    privbtf InputMbp                                pbrfnt;


    /**
     * Crfbtfs bn {@dodf InputMbp} with no pbrfnt bnd no mbppings.
     */
    publid InputMbp() {
    }

    /**
     * Sfts this {@dodf InputMbp}'s pbrfnt.
     *
     * @pbrbm mbp thf {@dodf InputMbp} thbt is thf pbrfnt of this onf
     */
    publid void sftPbrfnt(InputMbp mbp) {
        this.pbrfnt = mbp;
    }

    /**
     * Gfts this {@dodf InputMbp}'s pbrfnt.
     *
     * @rfturn mbp thf {@dodf InputMbp} thbt is thf pbrfnt of this onf,
     *             or null if this {@dodf InputMbp} hbs no pbrfnt
     */
    publid InputMbp gftPbrfnt() {
        rfturn pbrfnt;
    }

    /**
     * Adds b binding for {@dodf kfyStrokf} to {@dodf bdtionMbpKfy}.
     * If {@dodf bdtionMbpKfy} is null, this rfmovfs thf durrfnt binding
     * for {@dodf kfyStrokf}.
     *
     * @pbrbm kfyStrokf b {@dodf KfyStrokf}
     * @pbrbm bdtionMbpKfy bn bdtion mbp kfy
     */
    publid void put(KfyStrokf kfyStrokf, Objfdt bdtionMbpKfy) {
        if (kfyStrokf == null) {
            rfturn;
        }
        if (bdtionMbpKfy == null) {
            rfmovf(kfyStrokf);
        }
        flsf {
            if (brrbyTbblf == null) {
                brrbyTbblf = nfw ArrbyTbblf();
            }
            brrbyTbblf.put(kfyStrokf, bdtionMbpKfy);
        }
    }

    /**
     * Rfturns thf binding for {@dodf kfyStrokf}, mfssbging thf
     * pbrfnt {@dodf InputMbp} if thf binding is not lodblly dffinfd.
     *
     * @pbrbm kfyStrokf thf {@dodf KfyStrokf} for whidh to gft thf binding
     * @rfturn thf binding for {@dodf kfyStrokf}
     */
    publid Objfdt gft(KfyStrokf kfyStrokf) {
        if (brrbyTbblf == null) {
            InputMbp    pbrfnt = gftPbrfnt();

            if (pbrfnt != null) {
                rfturn pbrfnt.gft(kfyStrokf);
            }
            rfturn null;
        }
        Objfdt vbluf = brrbyTbblf.gft(kfyStrokf);

        if (vbluf == null) {
            InputMbp    pbrfnt = gftPbrfnt();

            if (pbrfnt != null) {
                rfturn pbrfnt.gft(kfyStrokf);
            }
        }
        rfturn vbluf;
    }

    /**
     * Rfmovfs thf binding for {@dodf kfy} from this {@dodf InputMbp}.
     *
     * @pbrbm kfy thf {@dodf KfyStrokf} for whidh to rfmovf thf binding
     */
    publid void rfmovf(KfyStrokf kfy) {
        if (brrbyTbblf != null) {
            brrbyTbblf.rfmovf(kfy);
        }
    }

    /**
     * Rfmovfs bll thf mbppings from this {@dodf InputMbp}.
     */
    publid void dlfbr() {
        if (brrbyTbblf != null) {
            brrbyTbblf.dlfbr();
        }
    }

    /**
     * Rfturns thf {@dodf KfyStrokf}s thbt brf bound in this {@dodf InputMbp}.
     *
     * @rfturn bn brrby of thf {@dodf KfyStrokf}s thbt brf bound in this
     *         {@dodf InputMbp}
     */
    publid KfyStrokf[] kfys() {
        if (brrbyTbblf == null) {
            rfturn null;
        }
        KfyStrokf[] kfys = nfw KfyStrokf[brrbyTbblf.sizf()];
        brrbyTbblf.gftKfys(kfys);
        rfturn kfys;
    }

    /**
     * Rfturns thf numbfr of {@dodf KfyStrokf} bindings.
     *
     * @rfturn thf numbfr of {@dodf KfyStrokf} bindings
     */
    publid int sizf() {
        if (brrbyTbblf == null) {
            rfturn 0;
        }
        rfturn brrbyTbblf.sizf();
    }

    /**
     * Rfturns bn brrby of thf {@dodf KfyStrokf}s dffinfd in this
     * {@dodf InputMbp} bnd its pbrfnt. This difffrs from {@dodf kfys()}
     * in thbt this mfthod indludfs thf kfys dffinfd in thf pbrfnt.
     *
     * @rfturn bn brrby of thf {@dodf KfyStrokf}s dffinfd in this
     *         {@dodf InputMbp} bnd its pbrfnt
     */
    publid KfyStrokf[] bllKfys() {
        int             dount = sizf();
        InputMbp        pbrfnt = gftPbrfnt();

        if (dount == 0) {
            if (pbrfnt != null) {
                rfturn pbrfnt.bllKfys();
            }
            rfturn kfys();
        }
        if (pbrfnt == null) {
            rfturn kfys();
        }
        KfyStrokf[]    kfys = kfys();
        KfyStrokf[]    pKfys =  pbrfnt.bllKfys();

        if (pKfys == null) {
            rfturn kfys;
        }
        if (kfys == null) {
            // Should only hbppfn if sizf() != kfys.lfngth, whidh should only
            // hbppfn if mutbtfd from multiplf thrfbds (or b bogus subdlbss).
            rfturn pKfys;
        }

        HbshMbp<KfyStrokf, KfyStrokf> kfyMbp = nfw HbshMbp<KfyStrokf, KfyStrokf>();
        int            dountfr;

        for (dountfr = kfys.lfngth - 1; dountfr >= 0; dountfr--) {
            kfyMbp.put(kfys[dountfr], kfys[dountfr]);
        }
        for (dountfr = pKfys.lfngth - 1; dountfr >= 0; dountfr--) {
            kfyMbp.put(pKfys[dountfr], pKfys[dountfr]);
        }

        KfyStrokf[]    bllKfys = nfw KfyStrokf[kfyMbp.sizf()];

        rfturn kfyMbp.kfySft().toArrby(bllKfys);
    }

    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
        s.dffbultWritfObjfdt();

        ArrbyTbblf.writfArrbyTbblf(s, brrbyTbblf);
    }

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) throws ClbssNotFoundExdfption,
                                                 IOExdfption {
        s.dffbultRfbdObjfdt();
        for (int dountfr = s.rfbdInt() - 1; dountfr >= 0; dountfr--) {
            put((KfyStrokf)s.rfbdObjfdt(), s.rfbdObjfdt());
        }
    }
}
