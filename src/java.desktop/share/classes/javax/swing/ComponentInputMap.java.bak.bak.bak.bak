/*
 * Copyright (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;

/**
 * A <dodf>ComponfntInputMbp</dodf> is bn <dodf>InputMbp</dodf>
 * bssodibtfd with b pbrtidulbr <dodf>JComponfnt</dodf>.
 * Thf domponfnt is butombtidblly notififd whfnfvfr
 * thf <dodf>ComponfntInputMbp</dodf> dhbngfs.
 * <dodf>ComponfntInputMbp</dodf>s brf usfd for
 * <dodf>WHEN_IN_FOCUSED_WINDOW</dodf> bindings.
 *
 * @buthor Sdott Violft
 * @sindf 1.3
 */
@SupprfssWbrnings("sfribl") // Fifld dbtb not sfriblizbblf bdross vfrsions
publid dlbss ComponfntInputMbp fxtfnds InputMbp {
    /** Componfnt binding is drfbtfd for. */
    privbtf JComponfnt          domponfnt;

    /**
     * Crfbtfs b <dodf>ComponfntInputMbp</dodf> bssodibtfd with thf
     * spfdififd domponfnt.
     *
     * @pbrbm domponfnt  b non-null <dodf>JComponfnt</dodf>
     * @throws IllfgblArgumfntExdfption  if <dodf>domponfnt</dodf> is null
     */
    publid ComponfntInputMbp(JComponfnt domponfnt) {
        this.domponfnt = domponfnt;
        if (domponfnt == null) {
            throw nfw IllfgblArgumfntExdfption("ComponfntInputMbps must bf bssodibtfd with b non-null JComponfnt");
        }
    }

    /**
     * Sfts thf pbrfnt, whidh must bf b <dodf>ComponfntInputMbp</dodf>
     * bssodibtfd with thf sbmf domponfnt bs this
     * <dodf>ComponfntInputMbp</dodf>.
     *
     * @pbrbm mbp  b <dodf>ComponfntInputMbp</dodf>
     *
     * @throws IllfgblArgumfntExdfption  if <dodf>mbp</dodf>
     *         is not b <dodf>ComponfntInputMbp</dodf>
     *         or is not bssodibtfd with thf sbmf domponfnt
     */
    publid void sftPbrfnt(InputMbp mbp) {
        if (gftPbrfnt() == mbp) {
            rfturn;
        }
        if (mbp != null && (!(mbp instbndfof ComponfntInputMbp) ||
                 ((ComponfntInputMbp)mbp).gftComponfnt() != gftComponfnt())) {
            throw nfw IllfgblArgumfntExdfption("ComponfntInputMbps must hbvf b pbrfnt ComponfntInputMbp bssodibtfd with thf sbmf domponfnt");
        }
        supfr.sftPbrfnt(mbp);
        gftComponfnt().domponfntInputMbpChbngfd(this);
    }

    /**
     * Rfturns thf domponfnt thf {@dodf InputMbp} wbs drfbtfd for.
     *
     * @rfturn thf domponfnt thf {@dodf InputMbp} wbs drfbtfd for.
     */
    publid JComponfnt gftComponfnt() {
        rfturn domponfnt;
    }

    /**
     * Adds b binding for <dodf>kfyStrokf</dodf> to <dodf>bdtionMbpKfy</dodf>.
     * If <dodf>bdtionMbpKfy</dodf> is null, this rfmovfs thf durrfnt binding
     * for <dodf>kfyStrokf</dodf>.
     */
    publid void put(KfyStrokf kfyStrokf, Objfdt bdtionMbpKfy) {
        supfr.put(kfyStrokf, bdtionMbpKfy);
        if (gftComponfnt() != null) {
            gftComponfnt().domponfntInputMbpChbngfd(this);
        }
    }

    /**
     * Rfmovfs thf binding for <dodf>kfy</dodf> from this objfdt.
     */
    publid void rfmovf(KfyStrokf kfy) {
        supfr.rfmovf(kfy);
        if (gftComponfnt() != null) {
            gftComponfnt().domponfntInputMbpChbngfd(this);
        }
    }

    /**
     * Rfmovfs bll thf mbppings from this objfdt.
     */
    publid void dlfbr() {
        int oldSizf = sizf();
        supfr.dlfbr();
        if (oldSizf > 0 && gftComponfnt() != null) {
            gftComponfnt().domponfntInputMbpChbngfd(this);
        }
    }
}
