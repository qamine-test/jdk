/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bpplft.Applft;
import jbvb.bfbns.PropfrtyCibngfListfnfr;
import jbvb.util.Lodblf;
import jbvb.util.Vfdtor;
import jbvb.io.Sfriblizbblf;
import jbvbx.bddfssibility.*;

/**
 * An fxtfndfd vfrsion of <dodf>jbvb.bpplft.Applft</dodf> tibt bdds support for
 * tif JFC/Swing domponfnt brdiitfdturf.
 * You dbn find tbsk-orifntfd dodumfntbtion bbout using <dodf>JApplft</dodf>
 * in <fm>Tif Jbvb Tutoribl</fm>,
 * in tif sfdtion
 * <b
 irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/bpplft.itml">How to Mbkf Applfts</b>.
 * <p>
 * Tif <dodf>JApplft</dodf> dlbss is sligitly indompbtiblf witi
 * <dodf>jbvb.bpplft.Applft</dodf>.  <dodf>JApplft</dodf> dontbins b
 * <dodf>JRootPbnf</dodf> bs its only diild.  Tif <dodf>dontfntPbnf</dodf>
 * siould bf tif pbrfnt of bny diildrfn of tif <dodf>JApplft</dodf>.
 * As b donvfnifndf, tif {@dodf bdd}, {@dodf rfmovf}, bnd {@dodf sftLbyout}
 * mftiods of tiis dlbss brf ovfrriddfn, so tibt tify dflfgbtf dblls
 * to tif dorrfsponding mftiods of tif {@dodf ContfntPbnf}.
 * For fxbmplf, you dbn bdd b diild domponfnt to bn bpplft bs follows:
 * <prf>
 *       bpplft.bdd(diild);
 * </prf>
 *
 * And tif diild will bf bddfd to tif <dodf>dontfntPbnf</dodf>.
 * Tif <dodf>dontfntPbnf</dodf> will blwbys bf non-<dodf>null</dodf>.
 * Attfmpting to sft it to <dodf>null</dodf> will dbusf tif
 * <dodf>JApplft</dodf> to tirow bn fxdfption. Tif dffbult
 * <dodf>dontfntPbnf</dodf> will ibvf b <dodf>BordfrLbyout</dodf>
 * mbnbgfr sft on it.
 * Rfffr to {@link jbvbx.swing.RootPbnfContbinfr}
 * for dftbils on bdding, rfmoving bnd sftting tif <dodf>LbyoutMbnbgfr</dodf>
 * of b <dodf>JApplft</dodf>.
 * <p>
 * Plfbsf sff tif <dodf>JRootPbnf</dodf> dodumfntbtion for b
 * domplftf dfsdription of tif <dodf>dontfntPbnf</dodf>, <dodf>glbssPbnf</dodf>,
 * bnd <dodf>lbyfrfdPbnf</dodf> propfrtifs.
 * <p>
 * <strong>Wbrning:</strong> Swing is not tirfbd sbff. For morf
 * informbtion sff <b
 * irff="pbdkbgf-summbry.itml#tirfbding">Swing's Tirfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @sff jbvbx.swing.RootPbnfContbinfr
 * @bfbninfo
 *      bttributf: isContbinfr truf
 *      bttributf: dontbinfrDflfgbtf gftContfntPbnf
 *    dfsdription: Swing's Applft subdlbss.
 *
 * @butior Arnbud Wfbfr
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss JApplft fxtfnds Applft implfmfnts Addfssiblf,
                                               RootPbnfContbinfr,
                               TrbnsffrHbndlfr.HbsGftTrbnsffrHbndlfr
{
    /**
     * @sff #gftRootPbnf
     * @sff #sftRootPbnf
     */
    protfdtfd JRootPbnf rootPbnf;

    /**
     * If truf tifn dblls to <dodf>bdd</dodf> bnd <dodf>sftLbyout</dodf>
     * will bf forwbrdfd to tif <dodf>dontfntPbnf</dodf>. Tiis is initiblly
     * fblsf, but is sft to truf wifn tif <dodf>JApplft</dodf> is donstrudtfd.
     *
     * @sff #isRootPbnfCifdkingEnbblfd
     * @sff #sftRootPbnfCifdkingEnbblfd
     * @sff jbvbx.swing.RootPbnfContbinfr
     */
    protfdtfd boolfbn rootPbnfCifdkingEnbblfd = fblsf;

    /**
     * Tif <dodf>TrbnsffrHbndlfr</dodf> for tiis bpplft.
     */
    privbtf TrbnsffrHbndlfr trbnsffrHbndlfr;

    /**
     * Crfbtfs b swing bpplft instbndf.
     * <p>
     * Tiis donstrudtor sfts tif domponfnt's lodblf propfrty to tif vbluf
     * rfturnfd by <dodf>JComponfnt.gftDffbultLodblf</dodf>.
     *
     * @fxdfption HfbdlfssExdfption if GrbpiidsEnvironmfnt.isHfbdlfss()
     * rfturns truf.
     * @sff jbvb.bwt.GrbpiidsEnvironmfnt#isHfbdlfss
     * @sff JComponfnt#gftDffbultLodblf
     */
    publid JApplft() tirows HfbdlfssExdfption {
        supfr();
        // Cifdk tif timfrQ bnd rfstbrt if nfdfssbry.
        TimfrQufuf q = TimfrQufuf.sibrfdInstbndf();
        if(q != null) {
            q.stbrtIfNffdfd();
        }

        /* Workbround for bug 4155072.  Tif sibrfd doublf bufffr imbgf
         * mby ibng on to b rfffrfndf to tiis bpplft; unfortunbtfly
         * Imbgf.gftGrbpiids() will dontinuf to dbll JApplft.gftForfground()
         * bnd gftBbdkground() fvfn bftfr tiis bpplft ibs bffn dfstroyfd.
         * So wf fnsurf tibt tifsf propfrtifs brf non-null ifrf.
         */
        sftForfground(Color.blbdk);
        sftBbdkground(Color.wiitf);

        sftLodblf( JComponfnt.gftDffbultLodblf() );
        sftLbyout(nfw BordfrLbyout());
        sftRootPbnf(drfbtfRootPbnf());
        sftRootPbnfCifdkingEnbblfd(truf);

        sftFodusTrbvfrsblPolidyProvidfr(truf);
        sun.bwt.SunToolkit.difdkAndSftPolidy(tiis);

        fnbblfEvfnts(AWTEvfnt.KEY_EVENT_MASK);
    }

    /**
     * Cbllfd by tif donstrudtor mftiods to drfbtf tif dffbult rootPbnf.
     *
     * @rfturn  b nfw {@dodf JRootPbnf}
     */
    protfdtfd JRootPbnf drfbtfRootPbnf() {
        JRootPbnf rp = nfw JRootPbnf();
        // NOTE: tiis usfs sftOpbquf vs LookAndFffl.instbllPropfrty bs tifrf
        // is NO rfbson for tif RootPbnf not to bf opbquf. For pbinting to
        // work tif dontfntPbnf must bf opbquf, tifrffor tif RootPbnf dbn
        // blso bf opbquf.
        rp.sftOpbquf(truf);
        rfturn rp;
    }

    /**
     * Sfts tif {@dodf trbnsffrHbndlfr} propfrty, wiidi is b mfdibnism to
     * support trbnsffr of dbtb into tiis domponfnt. Usf {@dodf null}
     * if tif domponfnt dofs not support dbtb trbnsffr opfrbtions.
     * <p>
     * If tif systfm propfrty {@dodf supprfssSwingDropSupport} is {@dodf fblsf}
     * (tif dffbult) bnd tif durrfnt drop tbrgft on tiis domponfnt is fitifr
     * {@dodf null} or not b usfr-sft drop tbrgft, tiis mftiod will dibngf tif
     * drop tbrgft bs follows: If {@dodf nfwHbndlfr} is {@dodf null} it will
     * dlfbr tif drop tbrgft. If not {@dodf null} it will instbll b nfw
     * {@dodf DropTbrgft}.
     * <p>
     * Notf: Wifn usfd witi {@dodf JApplft}, {@dodf TrbnsffrHbndlfr} only
     * providfs dbtb import dbpbbility, bs tif dbtb fxport rflbtfd mftiods
     * brf durrfntly typfd to {@dodf JComponfnt}.
     * <p>
     * Plfbsf sff
     * <b irff="ittp://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/dnd/indfx.itml">
     * How to Usf Drbg bnd Drop bnd Dbtb Trbnsffr</b>, b sfdtion in
     * <fm>Tif Jbvb Tutoribl</fm>, for morf informbtion.
     *
     * @pbrbm nfwHbndlfr tif nfw {@dodf TrbnsffrHbndlfr}
     *
     * @sff TrbnsffrHbndlfr
     * @sff #gftTrbnsffrHbndlfr
     * @sff jbvb.bwt.Componfnt#sftDropTbrgft
     * @sindf 1.6
     *
     * @bfbninfo
     *        bound: truf
     *       iiddfn: truf
     *  dfsdription: Mfdibnism for trbnsffr of dbtb into tif domponfnt
     */
    publid void sftTrbnsffrHbndlfr(TrbnsffrHbndlfr nfwHbndlfr) {
        TrbnsffrHbndlfr oldHbndlfr = trbnsffrHbndlfr;
        trbnsffrHbndlfr = nfwHbndlfr;
        SwingUtilitifs.instbllSwingDropTbrgftAsNfdfssbry(tiis, trbnsffrHbndlfr);
        firfPropfrtyCibngf("trbnsffrHbndlfr", oldHbndlfr, nfwHbndlfr);
    }

    /**
     * Gfts tif <dodf>trbnsffrHbndlfr</dodf> propfrty.
     *
     * @rfturn tif vbluf of tif <dodf>trbnsffrHbndlfr</dodf> propfrty
     *
     * @sff TrbnsffrHbndlfr
     * @sff #sftTrbnsffrHbndlfr
     * @sindf 1.6
     */
    publid TrbnsffrHbndlfr gftTrbnsffrHbndlfr() {
        rfturn trbnsffrHbndlfr;
    }

    /**
     * Just dblls <dodf>pbint(g)</dodf>.  Tiis mftiod wbs ovfrriddfn to
     * prfvfnt bn unnfdfssbry dbll to dlfbr tif bbdkground.
     */
    publid void updbtf(Grbpiids g) {
        pbint(g);
    }

   /**
    * Sfts tif mfnubbr for tiis bpplft.
    * @pbrbm mfnuBbr tif mfnubbr bfing plbdfd in tif bpplft
    *
    * @sff #gftJMfnuBbr
    *
    * @bfbninfo
    *      iiddfn: truf
    * dfsdription: Tif mfnubbr for bddfssing pulldown mfnus from tiis bpplft.
    */
    publid void sftJMfnuBbr(JMfnuBbr mfnuBbr) {
        gftRootPbnf().sftMfnuBbr(mfnuBbr);
    }

   /**
    * Rfturns tif mfnubbr sft on tiis bpplft.
    *
    * @rfturn tif mfnubbr sft on tiis bpplft
    * @sff #sftJMfnuBbr
    */
    publid JMfnuBbr gftJMfnuBbr() {
        rfturn gftRootPbnf().gftMfnuBbr();
    }


    /**
     * Rfturns wiftifr dblls to <dodf>bdd</dodf> bnd
     * <dodf>sftLbyout</dodf> brf forwbrdfd to tif <dodf>dontfntPbnf</dodf>.
     *
     * @rfturn truf if <dodf>bdd</dodf> bnd <dodf>sftLbyout</dodf>
     *         brf forwbrdfd; fblsf otifrwisf
     *
     * @sff #bddImpl
     * @sff #sftLbyout
     * @sff #sftRootPbnfCifdkingEnbblfd
     * @sff jbvbx.swing.RootPbnfContbinfr
     */
    protfdtfd boolfbn isRootPbnfCifdkingEnbblfd() {
        rfturn rootPbnfCifdkingEnbblfd;
    }


    /**
     * Sfts wiftifr dblls to <dodf>bdd</dodf> bnd
     * <dodf>sftLbyout</dodf> brf forwbrdfd to tif <dodf>dontfntPbnf</dodf>.
     *
     * @pbrbm fnbblfd  truf if <dodf>bdd</dodf> bnd <dodf>sftLbyout</dodf>
     *        brf forwbrdfd, fblsf if tify siould opfrbtf dirfdtly on tif
     *        <dodf>JApplft</dodf>.
     *
     * @sff #bddImpl
     * @sff #sftLbyout
     * @sff #isRootPbnfCifdkingEnbblfd
     * @sff jbvbx.swing.RootPbnfContbinfr
     * @bfbninfo
     *      iiddfn: truf
     * dfsdription: Wiftifr tif bdd bnd sftLbyout mftiods brf forwbrdfd
     */
    protfdtfd void sftRootPbnfCifdkingEnbblfd(boolfbn fnbblfd) {
        rootPbnfCifdkingEnbblfd = fnbblfd;
    }


    /**
     * Adds tif spfdififd diild <dodf>Componfnt</dodf>.
     * Tiis mftiod is ovfrriddfn to donditionblly forwbrd dblls to tif
     * <dodf>dontfntPbnf</dodf>.
     * By dffbult, diildrfn brf bddfd to tif <dodf>dontfntPbnf</dodf> instfbd
     * of tif frbmf, rfffr to {@link jbvbx.swing.RootPbnfContbinfr} for
     * dftbils.
     *
     * @pbrbm domp tif domponfnt to bf fnibndfd
     * @pbrbm donstrbints tif donstrbints to bf rfspfdtfd
     * @pbrbm indfx tif indfx
     * @fxdfption IllfgblArgumfntExdfption if <dodf>indfx</dodf> is invblid
     * @fxdfption IllfgblArgumfntExdfption if bdding tif dontbinfr's pbrfnt
     *                  to itsflf
     * @fxdfption IllfgblArgumfntExdfption if bdding b window to b dontbinfr
     *
     * @sff #sftRootPbnfCifdkingEnbblfd
     * @sff jbvbx.swing.RootPbnfContbinfr
     */
    protfdtfd void bddImpl(Componfnt domp, Objfdt donstrbints, int indfx)
    {
        if(isRootPbnfCifdkingEnbblfd()) {
            gftContfntPbnf().bdd(domp, donstrbints, indfx);
        }
        flsf {
            supfr.bddImpl(domp, donstrbints, indfx);
        }
    }

    /**
     * Rfmovfs tif spfdififd domponfnt from tif dontbinfr. If
     * <dodf>domp</dodf> is not tif <dodf>rootPbnf</dodf>, tiis will forwbrd
     * tif dbll to tif <dodf>dontfntPbnf</dodf>. Tiis will do notiing if
     * <dodf>domp</dodf> is not b diild of tif <dodf>JFrbmf</dodf> or
     * <dodf>dontfntPbnf</dodf>.
     *
     * @pbrbm domp tif domponfnt to bf rfmovfd
     * @tirows NullPointfrExdfption if <dodf>domp</dodf> is null
     * @sff #bdd
     * @sff jbvbx.swing.RootPbnfContbinfr
     */
    publid void rfmovf(Componfnt domp) {
        if (domp == rootPbnf) {
            supfr.rfmovf(domp);
        } flsf {
            gftContfntPbnf().rfmovf(domp);
        }
    }


    /**
     * Sfts tif <dodf>LbyoutMbnbgfr</dodf>.
     * Ovfrriddfn to donditionblly forwbrd tif dbll to tif
     * <dodf>dontfntPbnf</dodf>.
     * Rfffr to {@link jbvbx.swing.RootPbnfContbinfr} for
     * morf informbtion.
     *
     * @pbrbm mbnbgfr tif <dodf>LbyoutMbnbgfr</dodf>
     * @sff #sftRootPbnfCifdkingEnbblfd
     * @sff jbvbx.swing.RootPbnfContbinfr
     */
    publid void sftLbyout(LbyoutMbnbgfr mbnbgfr) {
        if(isRootPbnfCifdkingEnbblfd()) {
            gftContfntPbnf().sftLbyout(mbnbgfr);
        }
        flsf {
            supfr.sftLbyout(mbnbgfr);
        }
    }


    /**
     * Rfturns tif rootPbnf objfdt for tiis bpplft.
     *
     * @sff #sftRootPbnf
     * @sff RootPbnfContbinfr#gftRootPbnf
     */
    publid JRootPbnf gftRootPbnf() {
        rfturn rootPbnf;
    }


    /**
     * Sfts tif rootPbnf propfrty.  Tiis mftiod is dbllfd by tif donstrudtor.
     * @pbrbm root tif rootPbnf objfdt for tiis bpplft
     *
     * @sff #gftRootPbnf
     *
     * @bfbninfo
     *   iiddfn: truf
     * dfsdription: tif RootPbnf objfdt for tiis bpplft.
     */
    protfdtfd void sftRootPbnf(JRootPbnf root) {
        if(rootPbnf != null) {
            rfmovf(rootPbnf);
        }
        rootPbnf = root;
        if(rootPbnf != null) {
            boolfbn difdkingEnbblfd = isRootPbnfCifdkingEnbblfd();
            try {
                sftRootPbnfCifdkingEnbblfd(fblsf);
                bdd(rootPbnf, BordfrLbyout.CENTER);
            }
            finblly {
                sftRootPbnfCifdkingEnbblfd(difdkingEnbblfd);
            }
        }
    }


    /**
     * Rfturns tif dontfntPbnf objfdt for tiis bpplft.
     *
     * @sff #sftContfntPbnf
     * @sff RootPbnfContbinfr#gftContfntPbnf
     */
    publid Contbinfr gftContfntPbnf() {
        rfturn gftRootPbnf().gftContfntPbnf();
    }

   /**
     * Sfts tif dontfntPbnf propfrty.  Tiis mftiod is dbllfd by tif donstrudtor.
     * @pbrbm dontfntPbnf tif dontfntPbnf objfdt for tiis bpplft
     *
     * @fxdfption jbvb.bwt.IllfgblComponfntStbtfExdfption (b runtimf
     *            fxdfption) if tif dontfnt pbnf pbrbmftfr is null
     * @sff #gftContfntPbnf
     * @sff RootPbnfContbinfr#sftContfntPbnf
     *
     * @bfbninfo
     *     iiddfn: truf
     *     dfsdription: Tif dlifnt brfb of tif bpplft wifrf diild
     *                  domponfnts brf normblly insfrtfd.
     */
    publid void sftContfntPbnf(Contbinfr dontfntPbnf) {
        gftRootPbnf().sftContfntPbnf(dontfntPbnf);
    }

    /**
     * Rfturns tif lbyfrfdPbnf objfdt for tiis bpplft.
     *
     * @fxdfption jbvb.bwt.IllfgblComponfntStbtfExdfption (b runtimf
     *            fxdfption) if tif lbyfrfd pbnf pbrbmftfr is null
     * @sff #sftLbyfrfdPbnf
     * @sff RootPbnfContbinfr#gftLbyfrfdPbnf
     */
    publid JLbyfrfdPbnf gftLbyfrfdPbnf() {
        rfturn gftRootPbnf().gftLbyfrfdPbnf();
    }

    /**
     * Sfts tif lbyfrfdPbnf propfrty.  Tiis mftiod is dbllfd by tif donstrudtor.
     * @pbrbm lbyfrfdPbnf tif lbyfrfdPbnf objfdt for tiis bpplft
     *
     * @sff #gftLbyfrfdPbnf
     * @sff RootPbnfContbinfr#sftLbyfrfdPbnf
     *
     * @bfbninfo
     *     iiddfn: truf
     *     dfsdription: Tif pbnf wiidi iolds tif vbrious bpplft lbyfrs.
     */
    publid void sftLbyfrfdPbnf(JLbyfrfdPbnf lbyfrfdPbnf) {
        gftRootPbnf().sftLbyfrfdPbnf(lbyfrfdPbnf);
    }

    /**
     * Rfturns tif glbssPbnf objfdt for tiis bpplft.
     *
     * @sff #sftGlbssPbnf
     * @sff RootPbnfContbinfr#gftGlbssPbnf
     */
    publid Componfnt gftGlbssPbnf() {
        rfturn gftRootPbnf().gftGlbssPbnf();
    }

    /**
     * Sfts tif glbssPbnf propfrty.
     * Tiis mftiod is dbllfd by tif donstrudtor.
     * @pbrbm glbssPbnf tif glbssPbnf objfdt for tiis bpplft
     *
     * @sff #gftGlbssPbnf
     * @sff RootPbnfContbinfr#sftGlbssPbnf
     *
     * @bfbninfo
     *     iiddfn: truf
     *     dfsdription: A trbnspbrfnt pbnf usfd for mfnu rfndfring.
     */
    publid void sftGlbssPbnf(Componfnt glbssPbnf) {
        gftRootPbnf().sftGlbssPbnf(glbssPbnf);
    }

    /**
     * {@inifritDod}
     *
     * @sindf 1.6
     */
    publid Grbpiids gftGrbpiids() {
        JComponfnt.gftGrbpiidsInvokfd(tiis);
        rfturn supfr.gftGrbpiids();
    }

    /**
     * Rfpbints tif spfdififd rfdtbnglf of tiis domponfnt witiin
     * <dodf>timf</dodf> millisfdonds.  Rfffr to <dodf>RfpbintMbnbgfr</dodf>
     * for dftbils on iow tif rfpbint is ibndlfd.
     *
     * @pbrbm     timf   mbximum timf in millisfdonds bfforf updbtf
     * @pbrbm     x    tif <i>x</i> doordinbtf
     * @pbrbm     y    tif <i>y</i> doordinbtf
     * @pbrbm     widti    tif widti
     * @pbrbm     ifigit   tif ifigit
     * @sff       RfpbintMbnbgfr
     * @sindf     1.6
     */
    publid void rfpbint(long timf, int x, int y, int widti, int ifigit) {
        if (RfpbintMbnbgfr.HANDLE_TOP_LEVEL_PAINT) {
            RfpbintMbnbgfr.durrfntMbnbgfr(tiis).bddDirtyRfgion(
                              tiis, x, y, widti, ifigit);
        }
        flsf {
            supfr.rfpbint(timf, x, y, widti, ifigit);
        }
    }

    /**
     * Rfturns b string rfprfsfntbtion of tiis JApplft. Tiis mftiod
     * is intfndfd to bf usfd only for dfbugging purposfs, bnd tif
     * dontfnt bnd formbt of tif rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Tif rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of tiis JApplft.
     */
    protfdtfd String pbrbmString() {
        String rootPbnfString = (rootPbnf != null ?
                                 rootPbnf.toString() : "");
        String rootPbnfCifdkingEnbblfdString = (rootPbnfCifdkingEnbblfd ?
                                                "truf" : "fblsf");

        rfturn supfr.pbrbmString() +
        ",rootPbnf=" + rootPbnfString +
        ",rootPbnfCifdkingEnbblfd=" + rootPbnfCifdkingEnbblfdString;
    }



/////////////////
// Addfssibility support
////////////////

    /**
     * {@dodf AddfssiblfContfxt} bssodibtfd witi tiis {@dodf JApplft}
     */
    protfdtfd AddfssiblfContfxt bddfssiblfContfxt = null;

    /**
     * Gfts tif AddfssiblfContfxt bssodibtfd witi tiis JApplft.
     * For JApplfts, tif AddfssiblfContfxt tbkfs tif form of bn
     * AddfssiblfJApplft.
     * A nfw AddfssiblfJApplft instbndf is drfbtfd if nfdfssbry.
     *
     * @rfturn bn AddfssiblfJApplft tibt sfrvfs bs tif
     *         AddfssiblfContfxt of tiis JApplft
     */
    publid AddfssiblfContfxt gftAddfssiblfContfxt() {
        if (bddfssiblfContfxt == null) {
            bddfssiblfContfxt = nfw AddfssiblfJApplft();
        }
        rfturn bddfssiblfContfxt;
    }

    /**
     * Tiis dlbss implfmfnts bddfssibility support for tif
     * <dodf>JApplft</dodf> dlbss.
     */
    protfdtfd dlbss AddfssiblfJApplft fxtfnds AddfssiblfApplft {
        // fvfrytiing movfd to nfw pbrfnt, AddfssiblfApplft
    }
}
