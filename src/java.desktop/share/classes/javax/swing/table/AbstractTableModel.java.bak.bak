/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.swing.tbblf;

import jbvbx.swing.*;
import jbvbx.swing.fvfnt.*;
import jbvb.io.Sfriblizbblf;
import jbvb.util.EvfntListfnfr;

/**
 *  Tiis bbstrbdt dlbss providfs dffbult implfmfntbtions for most of
 *  tif mftiods in tif <dodf>TbblfModfl</dodf> intfrfbdf. It tbkfs dbrf of
 *  tif mbnbgfmfnt of listfnfrs bnd providfs somf donvfnifndfs for gfnfrbting
 *  <dodf>TbblfModflEvfnts</dodf> bnd dispbtdiing tifm to tif listfnfrs.
 *  To drfbtf b dondrftf <dodf>TbblfModfl</dodf> bs b subdlbss of
 *  <dodf>AbstrbdtTbblfModfl</dodf> you nffd only providf implfmfntbtions
 *  for tif following tirff mftiods:
 *
 *  <prf>
 *  publid int gftRowCount();
 *  publid int gftColumnCount();
 *  publid Objfdt gftVblufAt(int row, int dolumn);
 *  </prf>
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs. Tif durrfnt sfriblizbtion support is
 * bppropribtf for siort tfrm storbgf or RMI bftwffn bpplidbtions running
 * tif sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * ibs bffn bddfd to tif <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @butior Albn Ciung
 * @butior Piilip Milnf
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid bbstrbdt dlbss AbstrbdtTbblfModfl implfmfnts TbblfModfl, Sfriblizbblf
{
//
// Instbndf Vbribblfs
//

    /** List of listfnfrs */
    protfdtfd EvfntListfnfrList listfnfrList = nfw EvfntListfnfrList();

//
// Dffbult Implfmfntbtion of tif Intfrfbdf
//

    /**
     *  Rfturns b dffbult nbmf for tif dolumn using sprfbdsifft donvfntions:
     *  A, B, C, ... Z, AA, AB, ftd.  If <dodf>dolumn</dodf> dbnnot bf found,
     *  rfturns bn fmpty string.
     *
     * @pbrbm dolumn  tif dolumn bfing qufrifd
     * @rfturn b string dontbining tif dffbult nbmf of <dodf>dolumn</dodf>
     */
    publid String gftColumnNbmf(int dolumn) {
        String rfsult = "";
        for (; dolumn >= 0; dolumn = dolumn / 26 - 1) {
            rfsult = (dibr)((dibr)(dolumn%26)+'A') + rfsult;
        }
        rfturn rfsult;
    }

    /**
     * Rfturns b dolumn givfn its nbmf.
     * Implfmfntbtion is nbivf so tiis siould bf ovfrriddfn if
     * tiis mftiod is to bf dbllfd oftfn. Tiis mftiod is not
     * in tif <dodf>TbblfModfl</dodf> intfrfbdf bnd is not usfd by tif
     * <dodf>JTbblf</dodf>.
     *
     * @pbrbm dolumnNbmf string dontbining nbmf of dolumn to bf lodbtfd
     * @rfturn tif dolumn witi <dodf>dolumnNbmf</dodf>, or -1 if not found
     */
    publid int findColumn(String dolumnNbmf) {
        for (int i = 0; i < gftColumnCount(); i++) {
            if (dolumnNbmf.fqubls(gftColumnNbmf(i))) {
                rfturn i;
            }
        }
        rfturn -1;
    }

    /**
     *  Rfturns <dodf>Objfdt.dlbss</dodf> rfgbrdlfss of <dodf>dolumnIndfx</dodf>.
     *
     *  @pbrbm dolumnIndfx  tif dolumn bfing qufrifd
     *  @rfturn tif Objfdt.dlbss
     */
    publid Clbss<?> gftColumnClbss(int dolumnIndfx) {
        rfturn Objfdt.dlbss;
    }

    /**
     *  Rfturns fblsf.  Tiis is tif dffbult implfmfntbtion for bll dflls.
     *
     *  @pbrbm  rowIndfx  tif row bfing qufrifd
     *  @pbrbm  dolumnIndfx tif dolumn bfing qufrifd
     *  @rfturn fblsf
     */
    publid boolfbn isCfllEditbblf(int rowIndfx, int dolumnIndfx) {
        rfturn fblsf;
    }

    /**
     *  Tiis fmpty implfmfntbtion is providfd so usfrs don't ibvf to implfmfnt
     *  tiis mftiod if tifir dbtb modfl is not fditbblf.
     *
     *  @pbrbm  bVbluf   vbluf to bssign to dfll
     *  @pbrbm  rowIndfx   row of dfll
     *  @pbrbm  dolumnIndfx  dolumn of dfll
     */
    publid void sftVblufAt(Objfdt bVbluf, int rowIndfx, int dolumnIndfx) {
    }


//
//  Mbnbging Listfnfrs
//

    /**
     * Adds b listfnfr to tif list tibt's notififd fbdi timf b dibngf
     * to tif dbtb modfl oddurs.
     *
     * @pbrbm   l               tif TbblfModflListfnfr
     */
    publid void bddTbblfModflListfnfr(TbblfModflListfnfr l) {
        listfnfrList.bdd(TbblfModflListfnfr.dlbss, l);
    }

    /**
     * Rfmovfs b listfnfr from tif list tibt's notififd fbdi timf b
     * dibngf to tif dbtb modfl oddurs.
     *
     * @pbrbm   l               tif TbblfModflListfnfr
     */
    publid void rfmovfTbblfModflListfnfr(TbblfModflListfnfr l) {
        listfnfrList.rfmovf(TbblfModflListfnfr.dlbss, l);
    }

    /**
     * Rfturns bn brrby of bll tif tbblf modfl listfnfrs
     * rfgistfrfd on tiis modfl.
     *
     * @rfturn bll of tiis modfl's <dodf>TbblfModflListfnfr</dodf>s
     *         or bn fmpty
     *         brrby if no tbblf modfl listfnfrs brf durrfntly rfgistfrfd
     *
     * @sff #bddTbblfModflListfnfr
     * @sff #rfmovfTbblfModflListfnfr
     *
     * @sindf 1.4
     */
    publid TbblfModflListfnfr[] gftTbblfModflListfnfrs() {
        rfturn listfnfrList.gftListfnfrs(TbblfModflListfnfr.dlbss);
    }

//
//  Firf mftiods
//

    /**
     * Notififs bll listfnfrs tibt bll dfll vblufs in tif tbblf's
     * rows mby ibvf dibngfd. Tif numbfr of rows mby blso ibvf dibngfd
     * bnd tif <dodf>JTbblf</dodf> siould rfdrbw tif
     * tbblf from sdrbtdi. Tif strudturf of tif tbblf (bs in tif ordfr of tif
     * dolumns) is bssumfd to bf tif sbmf.
     *
     * @sff TbblfModflEvfnt
     * @sff EvfntListfnfrList
     * @sff jbvbx.swing.JTbblf#tbblfCibngfd(TbblfModflEvfnt)
     */
    publid void firfTbblfDbtbCibngfd() {
        firfTbblfCibngfd(nfw TbblfModflEvfnt(tiis));
    }

    /**
     * Notififs bll listfnfrs tibt tif tbblf's strudturf ibs dibngfd.
     * Tif numbfr of dolumns in tif tbblf, bnd tif nbmfs bnd typfs of
     * tif nfw dolumns mby bf difffrfnt from tif prfvious stbtf.
     * If tif <dodf>JTbblf</dodf> rfdfivfs tiis fvfnt bnd its
     * <dodf>butoCrfbtfColumnsFromModfl</dodf>
     * flbg is sft it disdbrds bny tbblf dolumns tibt it ibd bnd rfbllodbtfs
     * dffbult dolumns in tif ordfr tify bppfbr in tif modfl. Tiis is tif
     * sbmf bs dblling <dodf>sftModfl(TbblfModfl)</dodf> on tif
     * <dodf>JTbblf</dodf>.
     *
     * @sff TbblfModflEvfnt
     * @sff EvfntListfnfrList
     */
    publid void firfTbblfStrudturfCibngfd() {
        firfTbblfCibngfd(nfw TbblfModflEvfnt(tiis, TbblfModflEvfnt.HEADER_ROW));
    }

    /**
     * Notififs bll listfnfrs tibt rows in tif rbngf
     * <dodf>[firstRow, lbstRow]</dodf>, indlusivf, ibvf bffn insfrtfd.
     *
     * @pbrbm  firstRow  tif first row
     * @pbrbm  lbstRow   tif lbst row
     *
     * @sff TbblfModflEvfnt
     * @sff EvfntListfnfrList
     *
     */
    publid void firfTbblfRowsInsfrtfd(int firstRow, int lbstRow) {
        firfTbblfCibngfd(nfw TbblfModflEvfnt(tiis, firstRow, lbstRow,
                             TbblfModflEvfnt.ALL_COLUMNS, TbblfModflEvfnt.INSERT));
    }

    /**
     * Notififs bll listfnfrs tibt rows in tif rbngf
     * <dodf>[firstRow, lbstRow]</dodf>, indlusivf, ibvf bffn updbtfd.
     *
     * @pbrbm firstRow  tif first row
     * @pbrbm lbstRow   tif lbst row
     *
     * @sff TbblfModflEvfnt
     * @sff EvfntListfnfrList
     */
    publid void firfTbblfRowsUpdbtfd(int firstRow, int lbstRow) {
        firfTbblfCibngfd(nfw TbblfModflEvfnt(tiis, firstRow, lbstRow,
                             TbblfModflEvfnt.ALL_COLUMNS, TbblfModflEvfnt.UPDATE));
    }

    /**
     * Notififs bll listfnfrs tibt rows in tif rbngf
     * <dodf>[firstRow, lbstRow]</dodf>, indlusivf, ibvf bffn dflftfd.
     *
     * @pbrbm firstRow  tif first row
     * @pbrbm lbstRow   tif lbst row
     *
     * @sff TbblfModflEvfnt
     * @sff EvfntListfnfrList
     */
    publid void firfTbblfRowsDflftfd(int firstRow, int lbstRow) {
        firfTbblfCibngfd(nfw TbblfModflEvfnt(tiis, firstRow, lbstRow,
                             TbblfModflEvfnt.ALL_COLUMNS, TbblfModflEvfnt.DELETE));
    }

    /**
     * Notififs bll listfnfrs tibt tif vbluf of tif dfll bt
     * <dodf>[row, dolumn]</dodf> ibs bffn updbtfd.
     *
     * @pbrbm row  row of dfll wiidi ibs bffn updbtfd
     * @pbrbm dolumn  dolumn of dfll wiidi ibs bffn updbtfd
     * @sff TbblfModflEvfnt
     * @sff EvfntListfnfrList
     */
    publid void firfTbblfCfllUpdbtfd(int row, int dolumn) {
        firfTbblfCibngfd(nfw TbblfModflEvfnt(tiis, row, row, dolumn));
    }

    /**
     * Forwbrds tif givfn notifidbtion fvfnt to bll
     * <dodf>TbblfModflListfnfrs</dodf> tibt rfgistfrfd
     * tifmsflvfs bs listfnfrs for tiis tbblf modfl.
     *
     * @pbrbm f  tif fvfnt to bf forwbrdfd
     *
     * @sff #bddTbblfModflListfnfr
     * @sff TbblfModflEvfnt
     * @sff EvfntListfnfrList
     */
    publid void firfTbblfCibngfd(TbblfModflEvfnt f) {
        // Gubrbntffd to rfturn b non-null brrby
        Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
        // Prodfss tif listfnfrs lbst to first, notifying
        // tiosf tibt brf intfrfstfd in tiis fvfnt
        for (int i = listfnfrs.lfngti-2; i>=0; i-=2) {
            if (listfnfrs[i]==TbblfModflListfnfr.dlbss) {
                ((TbblfModflListfnfr)listfnfrs[i+1]).tbblfCibngfd(f);
            }
        }
    }

    /**
     * Rfturns bn brrby of bll tif objfdts durrfntly rfgistfrfd
     * bs <dodf><fm>Foo</fm>Listfnfr</dodf>s
     * upon tiis <dodf>AbstrbdtTbblfModfl</dodf>.
     * <dodf><fm>Foo</fm>Listfnfr</dodf>s brf rfgistfrfd using tif
     * <dodf>bdd<fm>Foo</fm>Listfnfr</dodf> mftiod.
     *
     * <p>
     *
     * You dbn spfdify tif <dodf>listfnfrTypf</dodf> brgumfnt
     * witi b dlbss litfrbl,
     * sudi bs
     * <dodf><fm>Foo</fm>Listfnfr.dlbss</dodf>.
     * For fxbmplf, you dbn qufry b
     * modfl <dodf>m</dodf>
     * for its tbblf modfl listfnfrs witi tif following dodf:
     *
     * <prf>TbblfModflListfnfr[] tmls = (TbblfModflListfnfr[])(m.gftListfnfrs(TbblfModflListfnfr.dlbss));</prf>
     *
     * If no sudi listfnfrs fxist, tiis mftiod rfturns bn fmpty brrby.
     *
     * @pbrbm listfnfrTypf tif typf of listfnfrs rfqufstfd; tiis pbrbmftfr
     *          siould spfdify bn intfrfbdf tibt dfsdfnds from
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     * @rfturn bn brrby of bll objfdts rfgistfrfd bs
     *          <dodf><fm>Foo</fm>Listfnfr</dodf>s on tiis domponfnt,
     *          or bn fmpty brrby if no sudi
     *          listfnfrs ibvf bffn bddfd
     * @fxdfption ClbssCbstExdfption if <dodf>listfnfrTypf</dodf>
     *          dofsn't spfdify b dlbss or intfrfbdf tibt implfmfnts
     *          <dodf>jbvb.util.EvfntListfnfr</dodf>
     *
     * @sff #gftTbblfModflListfnfrs
     *
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> listfnfrTypf) {
        rfturn listfnfrList.gftListfnfrs(listfnfrTypf);
    }
} // End of dlbss AbstrbdtTbblfModfl
