/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.AdtionEvfnt;

import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;

import jbvbx.swing.tfxt.*;
import jbvbx.swing.fvfnt.*;
import jbvbx.swing.plbf.*;

/**
 * A tfxt domponfnt thbt dbn bf mbrkfd up with bttributfs thbt brf
 * rfprfsfntfd grbphidblly.
 * You dbn find how-to informbtion bnd fxbmplfs of using tfxt pbnfs in
 * <b hrff="http://dods.orbdlf.dom/jbvbsf/tutoribl/uiswing/domponfnts/tfxt.html">Using Tfxt Componfnts</b>,
 * b sfdtion in <fm>Thf Jbvb Tutoribl.</fm>
 *
 * <p>
 * This domponfnt modfls pbrbgrbphs
 * thbt brf domposfd of runs of dhbrbdtfr lfvfl bttributfs.  Ebdh
 * pbrbgrbph mby hbvf b logidbl stylf bttbdhfd to it whidh dontbins
 * thf dffbult bttributfs to usf if not ovfrriddfn by bttributfs sft
 * on thf pbrbgrbph or dhbrbdtfr run.  Componfnts bnd imbgfs mby
 * bf fmbfddfd in thf flow of tfxt.
 *
 * <dl>
 * <dt><b>Nfwlinfs</b>
 * <dd>
 * For b disdussion on how nfwlinfs brf hbndlfd, sff
 * <b hrff="tfxt/DffbultEditorKit.html">DffbultEditorKit</b>.
 * </dl>
 *
 * <p>
 * <strong>Wbrning:</strong> Swing is not thrfbd sbff. For morf
 * informbtion sff <b
 * hrff="pbdkbgf-summbry.html#thrfbding">Swing's Thrfbding
 * Polidy</b>.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @bfbninfo
 *   bttributf: isContbinfr truf
 * dfsdription: A tfxt domponfnt thbt dbn bf mbrkfd up with bttributfs thbt brf grbphidblly rfprfsfntfd.
 *
 * @buthor  Timothy Prinzing
 * @sff jbvbx.swing.tfxt.StylfdEditorKit
 * @sindf 1.2
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss JTfxtPbnf fxtfnds JEditorPbnf {

    /**
     * Crfbtfs b nfw <dodf>JTfxtPbnf</dodf>.  A nfw instbndf of
     * <dodf>StylfdEditorKit</dodf> is
     * drfbtfd bnd sft, bnd thf dodumfnt modfl sft to <dodf>null</dodf>.
     */
    publid JTfxtPbnf() {
        supfr();
        EditorKit fditorKit = drfbtfDffbultEditorKit();
        String dontfntTypf = fditorKit.gftContfntTypf();
        if (dontfntTypf != null
            && gftEditorKitClbssNbmfForContfntTypf(dontfntTypf) ==
                 dffbultEditorKitMbp.gft(dontfntTypf)) {
            sftEditorKitForContfntTypf(dontfntTypf, fditorKit);
        }
        sftEditorKit(fditorKit);
    }

    /**
     * Crfbtfs b nfw <dodf>JTfxtPbnf</dodf>, with b spfdififd dodumfnt modfl.
     * A nfw instbndf of <dodf>jbvbx.swing.tfxt.StylfdEditorKit</dodf>
     *  is drfbtfd bnd sft.
     *
     * @pbrbm dod thf dodumfnt modfl
     */
    publid JTfxtPbnf(StylfdDodumfnt dod) {
        this();
        sftStylfdDodumfnt(dod);
    }

    /**
     * Rfturns thf dlbss ID for thf UI.
     *
     * @rfturn thf string "TfxtPbnfUI"
     *
     * @sff JComponfnt#gftUIClbssID
     * @sff UIDffbults#gftUI
     */
    publid String gftUIClbssID() {
        rfturn uiClbssID;
    }

    /**
     * Assodibtfs thf fditor with b tfxt dodumfnt.  This
     * must bf b <dodf>StylfdDodumfnt</dodf>.
     *
     * @pbrbm dod  thf dodumfnt to displby/fdit
     * @fxdfption IllfgblArgumfntExdfption  if <dodf>dod</dodf> dbn't
     *   bf nbrrowfd to b <dodf>StylfdDodumfnt</dodf> whidh is thf
     *   rfquirfd typf of modfl for this tfxt domponfnt
     */
    publid void sftDodumfnt(Dodumfnt dod) {
        if (dod instbndfof StylfdDodumfnt) {
            supfr.sftDodumfnt(dod);
        } flsf {
            throw nfw IllfgblArgumfntExdfption("Modfl must bf StylfdDodumfnt");
        }
    }

    /**
     * Assodibtfs thf fditor with b tfxt dodumfnt.
     * Thf durrfntly rfgistfrfd fbdtory is usfd to build b vifw for
     * thf dodumfnt, whidh gfts displbyfd by thf fditor.
     *
     * @pbrbm dod  thf dodumfnt to displby/fdit
     */
    publid void sftStylfdDodumfnt(StylfdDodumfnt dod) {
        supfr.sftDodumfnt(dod);
    }

    /**
     * Fftdhfs thf modfl bssodibtfd with thf fditor.
     *
     * @rfturn thf modfl
     */
    publid StylfdDodumfnt gftStylfdDodumfnt() {
        rfturn (StylfdDodumfnt) gftDodumfnt();
    }

    /**
     * Rfplbdfs thf durrfntly sflfdtfd dontfnt with nfw dontfnt
     * rfprfsfntfd by thf givfn string.  If thfrf is no sflfdtion
     * this bmounts to bn insfrt of thf givfn tfxt.  If thfrf
     * is no rfplbdfmfnt tfxt this bmounts to b rfmovbl of thf
     * durrfnt sflfdtion.  Thf rfplbdfmfnt tfxt will hbvf thf
     * bttributfs durrfntly dffinfd for input bt thf point of
     * insfrtion.  If thf dodumfnt is not fditbblf, bffp bnd rfturn.
     *
     * @pbrbm dontfnt  thf dontfnt to rfplbdf thf sflfdtion with
     */
    @Ovfrridf
    publid void rfplbdfSflfdtion(String dontfnt) {
        rfplbdfSflfdtion(dontfnt, truf);
    }

    privbtf void rfplbdfSflfdtion(String dontfnt, boolfbn dhfdkEditbblf) {
        if (dhfdkEditbblf && !isEditbblf()) {
            UIMbnbgfr.gftLookAndFffl().providfErrorFffdbbdk(JTfxtPbnf.this);
            rfturn;
        }
        Dodumfnt dod = gftStylfdDodumfnt();
        if (dod != null) {
            try {
                Cbrft dbrft = gftCbrft();
                boolfbn domposfdTfxtSbvfd = sbvfComposfdTfxt(dbrft.gftDot());
                int p0 = Mbth.min(dbrft.gftDot(), dbrft.gftMbrk());
                int p1 = Mbth.mbx(dbrft.gftDot(), dbrft.gftMbrk());
                AttributfSft bttr = gftInputAttributfs().dopyAttributfs();
                if (dod instbndfof AbstrbdtDodumfnt) {
                    ((AbstrbdtDodumfnt)dod).rfplbdf(p0, p1 - p0, dontfnt,bttr);
                }
                flsf {
                    if (p0 != p1) {
                        dod.rfmovf(p0, p1 - p0);
                    }
                    if (dontfnt != null && dontfnt.lfngth() > 0) {
                        dod.insfrtString(p0, dontfnt, bttr);
                    }
                }
                if (domposfdTfxtSbvfd) {
                    rfstorfComposfdTfxt();
                }
            } dbtdh (BbdLodbtionExdfption f) {
                UIMbnbgfr.gftLookAndFffl().providfErrorFffdbbdk(JTfxtPbnf.this);
            }
        }
    }

    /**
     * Insfrts b domponfnt into thf dodumfnt bs b rfplbdfmfnt
     * for thf durrfntly sflfdtfd dontfnt.  If thfrf is no
     * sflfdtion thf domponfnt is ffffdtivfly insfrtfd bt thf
     * durrfnt position of thf dbrft.  This is rfprfsfntfd in
     * thf bssodibtfd dodumfnt bs bn bttributf of onf dhbrbdtfr
     * of dontfnt.
     * <p>
     * Thf domponfnt givfn is thf bdtubl domponfnt usfd by thf
     * JTfxtPbnf.  Sindf domponfnts dbnnot bf b dhild of morf thbn
     * onf dontbinfr, this mfthod should not bf usfd in situbtions
     * whfrf thf modfl is shbrfd by tfxt domponfnts.
     * <p>
     * Thf domponfnt is plbdfd rflbtivf to thf tfxt bbsflinf
     * bddording to thf vbluf rfturnfd by
     * <dodf>Componfnt.gftAlignmfntY</dodf>.  For Swing domponfnts
     * this vbluf dbn bf donvfnifntly sft using thf mfthod
     * <dodf>JComponfnt.sftAlignmfntY</dodf>.  For fxbmplf, sftting
     * b vbluf of <dodf>0.75</dodf> will dbusf 75 pfrdfnt of thf
     * domponfnt to bf bbovf thf bbsflinf, bnd 25 pfrdfnt of thf
     * domponfnt to bf bflow thf bbsflinf.
     *
     * @pbrbm d    thf domponfnt to insfrt
     */
    publid void insfrtComponfnt(Componfnt d) {
        MutbblfAttributfSft inputAttributfs = gftInputAttributfs();
        inputAttributfs.rfmovfAttributfs(inputAttributfs);
        StylfConstbnts.sftComponfnt(inputAttributfs, d);
        rfplbdfSflfdtion(" ", fblsf);
        inputAttributfs.rfmovfAttributfs(inputAttributfs);
    }

    /**
     * Insfrts bn idon into thf dodumfnt bs b rfplbdfmfnt
     * for thf durrfntly sflfdtfd dontfnt.  If thfrf is no
     * sflfdtion thf idon is ffffdtivfly insfrtfd bt thf
     * durrfnt position of thf dbrft.  This is rfprfsfntfd in
     * thf bssodibtfd dodumfnt bs bn bttributf of onf dhbrbdtfr
     * of dontfnt.
     *
     * @pbrbm g    thf idon to insfrt
     * @sff Idon
     */
    publid void insfrtIdon(Idon g) {
        MutbblfAttributfSft inputAttributfs = gftInputAttributfs();
        inputAttributfs.rfmovfAttributfs(inputAttributfs);
        StylfConstbnts.sftIdon(inputAttributfs, g);
        rfplbdfSflfdtion(" ", fblsf);
        inputAttributfs.rfmovfAttributfs(inputAttributfs);
    }

    /**
     * Adds b nfw stylf into thf logidbl stylf hifrbrdhy.  Stylf bttributfs
     * rfsolvf from bottom up so bn bttributf spfdififd in b dhild
     * will ovfrridf bn bttributf spfdififd in thf pbrfnt.
     *
     * @pbrbm nm   thf nbmf of thf stylf (must bf uniquf within thf
     *   dollfdtion of nbmfd stylfs).  Thf nbmf mby bf <dodf>null</dodf>
     *   if thf stylf is unnbmfd, but thf dbllfr is rfsponsiblf
     *   for mbnbging thf rfffrfndf rfturnfd bs bn unnbmfd stylf dbn't
     *   bf fftdhfd by nbmf.  An unnbmfd stylf mby bf usfful for things
     *   likf dhbrbdtfr bttributf ovfrridfs sudh bs found in b stylf
     *   run.
     * @pbrbm pbrfnt thf pbrfnt stylf.  This mby bf <dodf>null</dodf>
     *   if unspfdififd
     *   bttributfs nffd not bf rfsolvfd in somf othfr stylf.
     * @rfturn thf nfw <dodf>Stylf</dodf>
     */
    publid Stylf bddStylf(String nm, Stylf pbrfnt) {
        StylfdDodumfnt dod = gftStylfdDodumfnt();
        rfturn dod.bddStylf(nm, pbrfnt);
    }

    /**
     * Rfmovfs b nbmfd non-<dodf>null</dodf> stylf prfviously bddfd to
     * thf dodumfnt.
     *
     * @pbrbm nm  thf nbmf of thf stylf to rfmovf
     */
    publid void rfmovfStylf(String nm) {
        StylfdDodumfnt dod = gftStylfdDodumfnt();
        dod.rfmovfStylf(nm);
    }

    /**
     * Fftdhfs b nbmfd non-<dodf>null</dodf> stylf prfviously bddfd.
     *
     * @pbrbm nm  thf nbmf of thf stylf
     * @rfturn thf <dodf>Stylf</dodf>
     */
    publid Stylf gftStylf(String nm) {
        StylfdDodumfnt dod = gftStylfdDodumfnt();
        rfturn dod.gftStylf(nm);
    }

    /**
     * Sfts thf logidbl stylf to usf for thf pbrbgrbph bt thf
     * durrfnt dbrft position.  If bttributfs brfn't fxpliditly sft
     * for dhbrbdtfr bnd pbrbgrbph bttributfs thfy will rfsolvf
     * through thf logidbl stylf bssignfd to thf pbrbgrbph, whidh
     * in tfrm mby rfsolvf through somf hifrbrdhy domplftfly
     * indfpfndfnt of thf flfmfnt hifrbrdhy in thf dodumfnt.
     *
     * @pbrbm s  thf logidbl stylf to bssign to thf pbrbgrbph,
     *          or <dodf>null</dodf> for no stylf
     */
    publid void sftLogidblStylf(Stylf s) {
        StylfdDodumfnt dod = gftStylfdDodumfnt();
        dod.sftLogidblStylf(gftCbrftPosition(), s);
    }

    /**
     * Fftdhfs thf logidbl stylf bssignfd to thf pbrbgrbph rfprfsfntfd
     * by thf durrfnt position of thf dbrft, or <dodf>null</dodf>.
     *
     * @rfturn thf <dodf>Stylf</dodf>
     */
    publid Stylf gftLogidblStylf() {
        StylfdDodumfnt dod = gftStylfdDodumfnt();
        rfturn dod.gftLogidblStylf(gftCbrftPosition());
    }

    /**
     * Fftdhfs thf dhbrbdtfr bttributfs in ffffdt bt thf
     * durrfnt lodbtion of thf dbrft, or <dodf>null</dodf>.
     *
     * @rfturn thf bttributfs, or <dodf>null</dodf>
     */
    publid AttributfSft gftChbrbdtfrAttributfs() {
        StylfdDodumfnt dod = gftStylfdDodumfnt();
        Elfmfnt run = dod.gftChbrbdtfrElfmfnt(gftCbrftPosition());
        if (run != null) {
            rfturn run.gftAttributfs();
        }
        rfturn null;
    }

    /**
     * Applifs thf givfn bttributfs to dhbrbdtfr
     * dontfnt.  If thfrf is b sflfdtion, thf bttributfs
     * brf bpplifd to thf sflfdtion rbngf.  If thfrf
     * is no sflfdtion, thf bttributfs brf bpplifd to
     * thf input bttributf sft whidh dffinfs thf bttributfs
     * for bny nfw tfxt thbt gfts insfrtfd.
     *
     * @pbrbm bttr thf bttributfs
     * @pbrbm rfplbdf if truf, thfn rfplbdf thf fxisting bttributfs first
     */
    publid void sftChbrbdtfrAttributfs(AttributfSft bttr, boolfbn rfplbdf) {
        int p0 = gftSflfdtionStbrt();
        int p1 = gftSflfdtionEnd();
        if (p0 != p1) {
            StylfdDodumfnt dod = gftStylfdDodumfnt();
            dod.sftChbrbdtfrAttributfs(p0, p1 - p0, bttr, rfplbdf);
        } flsf {
            MutbblfAttributfSft inputAttributfs = gftInputAttributfs();
            if (rfplbdf) {
                inputAttributfs.rfmovfAttributfs(inputAttributfs);
            }
            inputAttributfs.bddAttributfs(bttr);
        }
    }

    /**
     * Fftdhfs thf durrfnt pbrbgrbph bttributfs in ffffdt
     * bt thf lodbtion of thf dbrft, or <dodf>null</dodf> if nonf.
     *
     * @rfturn thf bttributfs
     */
    publid AttributfSft gftPbrbgrbphAttributfs() {
        StylfdDodumfnt dod = gftStylfdDodumfnt();
        Elfmfnt pbrbgrbph = dod.gftPbrbgrbphElfmfnt(gftCbrftPosition());
        if (pbrbgrbph != null) {
            rfturn pbrbgrbph.gftAttributfs();
        }
        rfturn null;
    }

    /**
     * Applifs thf givfn bttributfs to pbrbgrbphs.  If
     * thfrf is b sflfdtion, thf bttributfs brf bpplifd
     * to thf pbrbgrbphs thbt intfrsfdt thf sflfdtion.
     * If thfrf is no sflfdtion, thf bttributfs brf bpplifd
     * to thf pbrbgrbph bt thf durrfnt dbrft position.
     *
     * @pbrbm bttr thf non-<dodf>null</dodf> bttributfs
     * @pbrbm rfplbdf if truf, rfplbdf thf fxisting bttributfs first
     */
    publid void sftPbrbgrbphAttributfs(AttributfSft bttr, boolfbn rfplbdf) {
        int p0 = gftSflfdtionStbrt();
        int p1 = gftSflfdtionEnd();
        StylfdDodumfnt dod = gftStylfdDodumfnt();
        dod.sftPbrbgrbphAttributfs(p0, p1 - p0, bttr, rfplbdf);
    }

    /**
     * Gfts thf input bttributfs for thf pbnf.
     *
     * @rfturn thf bttributfs
     */
    publid MutbblfAttributfSft gftInputAttributfs() {
        rfturn gftStylfdEditorKit().gftInputAttributfs();
    }

    /**
     * Gfts thf fditor kit.
     *
     * @rfturn thf fditor kit
     */
    protfdtfd finbl StylfdEditorKit gftStylfdEditorKit() {
        rfturn (StylfdEditorKit) gftEditorKit();
    }

    /**
     * @sff #gftUIClbssID
     * @sff #rfbdObjfdt
     */
    privbtf stbtid finbl String uiClbssID = "TfxtPbnfUI";


    /**
     * Sff <dodf>rfbdObjfdt</dodf> bnd <dodf>writfObjfdt</dodf> in
     * <dodf>JComponfnt</dodf> for morf
     * informbtion bbout sfriblizbtion in Swing.
     *
     * @pbrbm s thf output strfbm
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
        s.dffbultWritfObjfdt();
        if (gftUIClbssID().fqubls(uiClbssID)) {
            bytf dount = JComponfnt.gftWritfObjCountfr(this);
            JComponfnt.sftWritfObjCountfr(this, --dount);
            if (dount == 0 && ui != null) {
                ui.instbllUI(this);
            }
        }
    }


    // --- JEditorPbnf ------------------------------------

    /**
     * Crfbtfs thf <dodf>EditorKit</dodf> to usf by dffbult.  This
     * is implfmfntfd to rfturn <dodf>jbvbx.swing.tfxt.StylfdEditorKit</dodf>.
     *
     * @rfturn thf fditor kit
     */
    protfdtfd EditorKit drfbtfDffbultEditorKit() {
        rfturn nfw StylfdEditorKit();
    }

    /**
     * Sfts thf durrfntly instbllfd kit for hbndling
     * dontfnt.  This is thf bound propfrty thbt
     * fstbblishfs thf dontfnt typf of thf fditor.
     *
     * @pbrbm kit thf dfsirfd fditor bfhbvior
     * @fxdfption IllfgblArgumfntExdfption if kit is not b
     *          <dodf>StylfdEditorKit</dodf>
     */
    publid finbl void sftEditorKit(EditorKit kit) {
        if (kit instbndfof StylfdEditorKit) {
            supfr.sftEditorKit(kit);
        } flsf {
            throw nfw IllfgblArgumfntExdfption("Must bf StylfdEditorKit");
        }
    }

    /**
     * Rfturns b string rfprfsfntbtion of this <dodf>JTfxtPbnf</dodf>.
     * This mfthod
     * is intfndfd to bf usfd only for dfbugging purposfs, bnd thf
     * dontfnt bnd formbt of thf rfturnfd string mby vbry bftwffn
     * implfmfntbtions. Thf rfturnfd string mby bf fmpty but mby not
     * bf <dodf>null</dodf>.
     *
     * @rfturn  b string rfprfsfntbtion of this <dodf>JTfxtPbnf</dodf>
     */
    protfdtfd String pbrbmString() {
        rfturn supfr.pbrbmString();
    }

}
