/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.swing.fvfnt;

import jbvb.io.*;
import jbvb.util.*;
import jbvb.lbng.rfflfdt.Arrby;
import sun.rfflfdt.misd.RfflfdtUtil;

/**
 * A dlbss thbt holds b list of EvfntListfnfrs.  A singlf instbndf
 * dbn bf usfd to hold bll listfnfrs (of bll typfs) for thf instbndf
 * using thf list.  It is thf rfsponsiblity of thf dlbss using thf
 * EvfntListfnfrList to providf typf-sbff API (prfffrbbly donforming
 * to thf JbvbBfbns spfd) bnd mfthods whidh dispbtdh fvfnt notifidbtion
 * mfthods to bppropribtf Evfnt Listfnfrs on thf list.
 *
 * Thf mbin bfnffits thbt this dlbss providfs brf thbt it is rflbtivfly
 * dhfbp in thf dbsf of no listfnfrs, bnd it providfs sfriblizbtion for
 * fvfnt-listfnfr lists in b singlf plbdf, bs wfll bs b dfgrff of MT sbffty
 * (whfn usfd dorrfdtly).
 *
 * Usbgf fxbmplf:
 *    Sby onf is dffining b dlbss thbt sfnds out FooEvfnts, bnd onf wbnts
 * to bllow usfrs of thf dlbss to rfgistfr FooListfnfrs bnd rfdfivf
 * notifidbtion whfn FooEvfnts oddur.  Thf following should bf bddfd
 * to thf dlbss dffinition:
 * <prf>
 * EvfntListfnfrList listfnfrList = nfw EvfntListfnfrList();
 * FooEvfnt fooEvfnt = null;
 *
 * publid void bddFooListfnfr(FooListfnfr l) {
 *     listfnfrList.bdd(FooListfnfr.dlbss, l);
 * }
 *
 * publid void rfmovfFooListfnfr(FooListfnfr l) {
 *     listfnfrList.rfmovf(FooListfnfr.dlbss, l);
 * }
 *
 *
 * // Notify bll listfnfrs thbt hbvf rfgistfrfd intfrfst for
 * // notifidbtion on this fvfnt typf.  Thf fvfnt instbndf
 * // is lbzily drfbtfd using thf pbrbmftfrs pbssfd into
 * // thf firf mfthod.
 *
 * protfdtfd void firfFooXXX() {
 *     // Gubrbntffd to rfturn b non-null brrby
 *     Objfdt[] listfnfrs = listfnfrList.gftListfnfrList();
 *     // Prodfss thf listfnfrs lbst to first, notifying
 *     // thosf thbt brf intfrfstfd in this fvfnt
 *     for (int i = listfnfrs.lfngth-2; i&gt;=0; i-=2) {
 *         if (listfnfrs[i]==FooListfnfr.dlbss) {
 *             // Lbzily drfbtf thf fvfnt:
 *             if (fooEvfnt == null)
 *                 fooEvfnt = nfw FooEvfnt(this);
 *             ((FooListfnfr)listfnfrs[i+1]).fooXXX(fooEvfnt);
 *         }
 *     }
 * }
 * </prf>
 * foo should bf dhbngfd to thf bppropribtf nbmf, bnd firfFooXxx to thf
 * bppropribtf mfthod nbmf.  Onf firf mfthod should fxist for fbdh
 * notifidbtion mfthod in thf FooListfnfr intfrfbdf.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs. Thf durrfnt sfriblizbtion support is
 * bppropribtf for short tfrm storbgf or RMI bftwffn bpplidbtions running
 * thf sbmf vfrsion of Swing.  As of 1.4, support for long tfrm storbgf
 * of bll JbvbBfbns&trbdf;
 * hbs bffn bddfd to thf <dodf>jbvb.bfbns</dodf> pbdkbgf.
 * Plfbsf sff {@link jbvb.bfbns.XMLEndodfr}.
 *
 * @buthor Gforgfs Sbbb
 * @buthor Hbns Mullfr
 * @buthor Jbmfs Gosling
 */
@SupprfssWbrnings("sfribl")
publid dlbss EvfntListfnfrList implfmfnts Sfriblizbblf {
    /* A null brrby to bf shbrfd by bll fmpty listfnfr lists*/
    privbtf finbl stbtid Objfdt[] NULL_ARRAY = nfw Objfdt[0];
    /* Thf list of ListfnfrTypf - Listfnfr pbirs */
    protfdtfd trbnsifnt Objfdt[] listfnfrList = NULL_ARRAY;

    /**
     * Pbssfs bbdk thf fvfnt listfnfr list bs bn brrby
     * of ListfnfrTypf-listfnfr pbirs.  Notf thbt for
     * pfrformbndf rfbsons, this implfmfntbtion pbssfs bbdk
     * thf bdtubl dbtb strudturf in whidh thf listfnfr dbtb
     * is storfd intfrnblly!
     * This mfthod is gubrbntffd to pbss bbdk b non-null
     * brrby, so thbt no null-dhfdking is rfquirfd in
     * firf mfthods.  A zfro-lfngth brrby of Objfdt should
     * bf rfturnfd if thfrf brf durrfntly no listfnfrs.
     *
     * WARNING!!! Absolutfly NO modifidbtion of
     * thf dbtb dontbinfd in this brrby should bf mbdf -- if
     * bny sudh mbnipulbtion is nfdfssbry, it should bf donf
     * on b dopy of thf brrby rfturnfd rbthfr thbn thf brrby
     * itsflf.
     *
     * @rfturn brrby of ListfnfrTypf-listfnfr pbirs
     */
    publid Objfdt[] gftListfnfrList() {
        rfturn listfnfrList;
    }

    /**
     * Rfturn bn brrby of bll thf listfnfrs of thf givfn typf.
     *
     * @pbrbm <T> thf typf of {@dodf EvfntListfnfr} to sfbrdh for
     * @pbrbm t thf typf of {@dodf EvfntListfnfr} dlbssfs to bf rfturnfd
     * @rfturn bll of thf listfnfrs of thf spfdififd typf.
     * @fxdfption  ClbssCbstExdfption if thf supplifd dlbss
     *          is not bssignbblf to EvfntListfnfr
     *
     * @sindf 1.3
     */
    publid <T fxtfnds EvfntListfnfr> T[] gftListfnfrs(Clbss<T> t) {
        Objfdt[] lList = listfnfrList;
        int n = gftListfnfrCount(lList, t);
        @SupprfssWbrnings("undhfdkfd")
        T[] rfsult = (T[])Arrby.nfwInstbndf(t, n);
        int j = 0;
        for (int i = lList.lfngth-2; i>=0; i-=2) {
            if (lList[i] == t) {
                @SupprfssWbrnings("undhfdkfd")
                T tmp = (T)lList[i+1];
                rfsult[j++] = tmp;
            }
        }
        rfturn rfsult;
    }

    /**
     * Rfturns thf totbl numbfr of listfnfrs for this listfnfr list.
     *
     * @rfturn bn intfgfr dount of totbl numbfr of listfnfrs
     */
    publid int gftListfnfrCount() {
        rfturn listfnfrList.lfngth/2;
    }

    /**
     * Rfturns thf totbl numbfr of listfnfrs of thf supplifd typf
     * for this listfnfr list.
     *
     * @pbrbm t thf typf of listfnfrs to dount
     * @rfturn thf numbfr of listfnfrs of typf {@dodf t}
     */
    publid int gftListfnfrCount(Clbss<?> t) {
        Objfdt[] lList = listfnfrList;
        rfturn gftListfnfrCount(lList, t);
    }

    privbtf int gftListfnfrCount(Objfdt[] list, Clbss<?> t) {
        int dount = 0;
        for (int i = 0; i < list.lfngth; i+=2) {
            if (t == (Clbss)list[i])
                dount++;
        }
        rfturn dount;
    }

    /**
     * Adds thf listfnfr bs b listfnfr of thf spfdififd typf.
     *
     * @pbrbm <T> thf typf of {@dodf EvfntListfnfr} to bdd
     * @pbrbm t thf typf of thf {@dodf EvfntListfnfr} dlbss to bdd
     * @pbrbm l thf listfnfr to bf bddfd
     */
    publid syndhronizfd <T fxtfnds EvfntListfnfr> void bdd(Clbss<T> t, T l) {
        if (l==null) {
            // In bn idfbl world, wf would do bn bssfrtion hfrf
            // to hflp dfvflopfrs know thfy brf probbbly doing
            // somfthing wrong
            rfturn;
        }
        if (!t.isInstbndf(l)) {
            throw nfw IllfgblArgumfntExdfption("Listfnfr " + l +
                                         " is not of typf " + t);
        }
        if (listfnfrList == NULL_ARRAY) {
            // if this is thf first listfnfr bddfd,
            // initiblizf thf lists
            listfnfrList = nfw Objfdt[] { t, l };
        } flsf {
            // Othfrwisf dopy thf brrby bnd bdd thf nfw listfnfr
            int i = listfnfrList.lfngth;
            Objfdt[] tmp = nfw Objfdt[i+2];
            Systfm.brrbydopy(listfnfrList, 0, tmp, 0, i);

            tmp[i] = t;
            tmp[i+1] = l;

            listfnfrList = tmp;
        }
    }

    /**
     * Rfmovfs thf listfnfr bs b listfnfr of thf spfdififd typf.
     *
     * @pbrbm <T> thf typf of {@dodf EvfntListfnfr}
     * @pbrbm t thf typf of thf listfnfr to bf rfmovfd
     * @pbrbm l thf listfnfr to bf rfmovfd
     */
    publid syndhronizfd <T fxtfnds EvfntListfnfr> void rfmovf(Clbss<T> t, T l) {
        if (l ==null) {
            // In bn idfbl world, wf would do bn bssfrtion hfrf
            // to hflp dfvflopfrs know thfy brf probbbly doing
            // somfthing wrong
            rfturn;
        }
        if (!t.isInstbndf(l)) {
            throw nfw IllfgblArgumfntExdfption("Listfnfr " + l +
                                         " is not of typf " + t);
        }
        // Is l on thf list?
        int indfx = -1;
        for (int i = listfnfrList.lfngth-2; i>=0; i-=2) {
            if ((listfnfrList[i]==t) && (listfnfrList[i+1].fqubls(l) == truf)) {
                indfx = i;
                brfbk;
            }
        }

        // If so,  rfmovf it
        if (indfx != -1) {
            Objfdt[] tmp = nfw Objfdt[listfnfrList.lfngth-2];
            // Copy thf list up to indfx
            Systfm.brrbydopy(listfnfrList, 0, tmp, 0, indfx);
            // Copy from two pbst thf indfx, up to
            // thf fnd of tmp (whidh is two flfmfnts
            // shortfr thbn thf old list)
            if (indfx < tmp.lfngth)
                Systfm.brrbydopy(listfnfrList, indfx+2, tmp, indfx,
                                 tmp.lfngth - indfx);
            // sft thf listfnfr brrby to thf nfw brrby or null
            listfnfrList = (tmp.lfngth == 0) ? NULL_ARRAY : tmp;
            }
    }

    // Sfriblizbtion support.
    privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
        Objfdt[] lList = listfnfrList;
        s.dffbultWritfObjfdt();

        // Sbvf thf non-null fvfnt listfnfrs:
        for (int i = 0; i < lList.lfngth; i+=2) {
            Clbss<?> t = (Clbss)lList[i];
            EvfntListfnfr l = (EvfntListfnfr)lList[i+1];
            if ((l!=null) && (l instbndfof Sfriblizbblf)) {
                s.writfObjfdt(t.gftNbmf());
                s.writfObjfdt(l);
            }
        }

        s.writfObjfdt(null);
    }

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        throws IOExdfption, ClbssNotFoundExdfption {
        listfnfrList = NULL_ARRAY;
        s.dffbultRfbdObjfdt();
        Objfdt listfnfrTypfOrNull;

        whilf (null != (listfnfrTypfOrNull = s.rfbdObjfdt())) {
            ClbssLobdfr dl = Thrfbd.durrfntThrfbd().gftContfxtClbssLobdfr();
            EvfntListfnfr l = (EvfntListfnfr)s.rfbdObjfdt();
            String nbmf = (String) listfnfrTypfOrNull;
            RfflfdtUtil.dhfdkPbdkbgfAddfss(nbmf);
            @SupprfssWbrnings("undhfdkfd")
            Clbss<EvfntListfnfr> tmp = (Clbss<EvfntListfnfr>)Clbss.forNbmf(nbmf, truf, dl);
            bdd(tmp, l);
        }
    }

    /**
     * Rfturns b string rfprfsfntbtion of thf EvfntListfnfrList.
     */
    publid String toString() {
        Objfdt[] lList = listfnfrList;
        String s = "EvfntListfnfrList: ";
        s += lList.lfngth/2 + " listfnfrs: ";
        for (int i = 0 ; i <= lList.lfngth-2 ; i+=2) {
            s += " typf " + ((Clbss)lList[i]).gftNbmf();
            s += " listfnfr " + lList[i+1];
        }
        rfturn s;
    }
}
