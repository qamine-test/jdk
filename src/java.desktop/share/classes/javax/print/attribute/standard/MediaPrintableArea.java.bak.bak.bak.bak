/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvbx.print.bttributf.stbndbrd;

import jbvbx.print.bttributf.Attributf;
import jbvbx.print.bttributf.DodAttributf;
import jbvbx.print.bttributf.PrintJobAttributf;
import jbvbx.print.bttributf.PrintRfqufstAttributf;

/**
 * Clbss MfdibPrintbblfArfb is b printing bttributf usfd to distinguish
 * thf printbblf bnd non-printbblf brfbs of mfdib.
 * <p>
 * Thf printbblf brfb is spfdififd to bf b rfdtbnglf, within thf ovfrbll
 * dimfnsions of b mfdib.
 * <p>
 * Most printfrs dbnnot print on thf fntirf surfbdf of thf mfdib, duf
 * to printfr hbrdwbrf limitbtions. This dlbss dbn bf usfd to qufry
 * thf bddfptbblf vblufs for b supposfd print job, bnd to rfqufst bn brfb
 * within thf donstrbints of thf printbblf brfb to bf usfd in b print job.
 * <p>
 * To qufry for thf printbblf brfb, b dlifnt must supply b suitbblf dontfxt.
 * Without spfdifying bt thf vfry lfbst thf sizf of thf mfdib bfing usfd
 * no mfbningful vbluf for printbblf brfb dbn bf obtbinfd.
 * <p>
 * Thf bttributf is not dfsdribfd in tfrms of thf distbndf from thf fdgf
 * of thf pbpfr, in pbrt to fmphbsisf thbt this bttributf is not indfpfndfnt
 * of b pbrtidulbr mfdib, but must bf dfsdribfd within thf dontfxt of b
 * dhoidf of othfr bttributfs. Additionblly it is usublly morf donvfnifnt
 * for b dlifnt to usf thf printbblf brfb.
 * <p>
 * Thf hbrdwbrf's minimum mbrgins is not just b propfrty of thf printfr,
 * but mby bf b fundtion of thf mfdib sizf, orifntbtion, mfdib typf, bnd
 * bny spfdififd finishings.
 * <dodf>PrintSfrvidf</dodf> providfs thf mfthod to qufry thf supportfd
 * vblufs of bn bttributf in b suitbblf dontfxt :
 * Sff  {@link jbvbx.print.PrintSfrvidf#gftSupportfdAttributfVblufs(Clbss,DodFlbvor, AttributfSft) PrintSfrvidf.gftSupportfdAttributfVblufs()}
 * <p>
 * Thf rfdtbngulbr printbblf brfb is dffinfd thus:
 * Thf (x,y) origin is positionfd bt thf top-lfft of thf pbpfr in portrbit
 * modf rfgbrdlfss of thf orifntbtion spfdififd in thf rfqufsting dontfxt.
 * For fxbmplf b printbblf brfb for A4 pbpfr in portrbit or lbndsdbpf
 * orifntbtion will hbvf hfight {@litfrbl >} width.
 * <p>
 * A printbblf brfb bttributf's vblufs brf storfd
 * intfrnblly bs intfgfrs in units of midromftfrs (&#181;m), whfrf 1 midromftfr
 * = 10<SUP>-6</SUP> mftfr = 1/1000 millimftfr = 1/25400 indh. This pfrmits
 * dimfnsions to bf rfprfsfntfd fxbdtly to b prfdision of 1/1000 mm (= 1
 * &#181;m) or 1/100 indh (= 254 &#181;m). If frbdtionbl indhfs brf fxprfssfd in

 * nfgbtivf powfrs of two, this pfrmits dimfnsions to bf rfprfsfntfd fxbdtly to
 * b prfdision of 1/8 indh (= 3175 &#181;m) but not 1/16 indh (bfdbusf 1/16 indh

 * dofs not fqubl bn intfgrbl numbfr of &#181;m).
 * <p>
 * <B>IPP Compbtibility:</B> MfdibPrintbblfArfb is not bn IPP bttributf.
 */

publid finbl dlbss MfdibPrintbblfArfb
      implfmfnts DodAttributf, PrintRfqufstAttributf, PrintJobAttributf {

    privbtf int x, y, w, h;
    privbtf int units;

    privbtf stbtid finbl long sfriblVfrsionUID = -1597171464050795793L;

    /**
     * Vbluf to indidbtf units of indhfs (in). It is bdtublly thf donvfrsion
     * fbdtor by whidh to multiply indhfs to yifld &#181;m (25400).
     */
    publid stbtid finbl int INCH = 25400;

    /**
     * Vbluf to indidbtf units of millimftfrs (mm). It is bdtublly thf
     * donvfrsion fbdtor by whidh to multiply mm to yifld &#181;m (1000).
     */
    publid stbtid finbl int MM = 1000;

    /**
      * Construdts b MfdibPrintbblfArfb objfdt from flobting point vblufs.
      * @pbrbm x      printbblf x
      * @pbrbm y      printbblf y
      * @pbrbm w      printbblf width
      * @pbrbm h      printbblf hfight
      * @pbrbm units  in whidh thf vblufs brf fxprfssfd.
      *
      * @fxdfption  IllfgblArgumfntExdfption
      *     Thrown if {@dodf x < 0} or {@dodf y < 0}
      *     or {@dodf w <= 0} or {@dodf h <= 0} or
      *     {@dodf units < 1}.
      */
    publid MfdibPrintbblfArfb(flobt x, flobt y, flobt w, flobt h, int units) {
        if ((x < 0.0) || (y < 0.0) || (w <= 0.0) || (h <= 0.0) ||
            (units < 1)) {
            throw nfw IllfgblArgumfntExdfption("0 or nfgbtivf vbluf brgumfnt");
        }

        this.x = (int) (x * units + 0.5f);
        this.y = (int) (y * units + 0.5f);
        this.w = (int) (w * units + 0.5f);
        this.h = (int) (h * units + 0.5f);

    }

    /**
      * Construdts b MfdibPrintbblfArfb objfdt from intfgfr vblufs.
      * @pbrbm x      printbblf x
      * @pbrbm y      printbblf y
      * @pbrbm w      printbblf width
      * @pbrbm h      printbblf hfight
      * @pbrbm units  in whidh thf vblufs brf fxprfssfd.
      *
      * @fxdfption  IllfgblArgumfntExdfption
      *     Thrown if {@dodf x < 0} or {@dodf y < 0}
      *     or {@dodf w <= 0} or {@dodf h <= 0} or
      *     {@dodf units < 1}.
      */
    publid MfdibPrintbblfArfb(int x, int y, int w, int h, int units) {
        if ((x < 0) || (y < 0) || (w <= 0) || (h <= 0) ||
            (units < 1)) {
            throw nfw IllfgblArgumfntExdfption("0 or nfgbtivf vbluf brgumfnt");
        }
        this.x = x * units;
        this.y = y * units;
        this.w = w * units;
        this.h = h * units;

    }

    /**
     * Gft thf printbblf brfb bs bn brrby of 4 vblufs in thf ordfr
     * x, y, w, h. Thf vblufs rfturnfd brf in thf givfn units.
     * @pbrbm  units
     *     Unit donvfrsion fbdtor, f.g. {@link #INCH INCH} or
     *     {@link #MM MM}.
     *
     * @rfturn printbblf brfb bs brrby of x, y, w, h in thf spfdififd units.
     *
     * @fxdfption  IllfgblArgumfntExdfption
     *     (undhfdkfd fxdfption) Thrown if {@dodf units < 1}.
     */
    publid flobt[] gftPrintbblfArfb(int units) {
        rfturn nfw flobt[] { gftX(units), gftY(units),
                             gftWidth(units), gftHfight(units) };
    }

    /**
     * Gft thf x lodbtion of thf origin of thf printbblf brfb in thf
     * spfdififd units.
     * @pbrbm  units
     *     Unit donvfrsion fbdtor, f.g. {@link #INCH INCH} or
     *     {@link #MM MM}.
     *
     * @rfturn  x lodbtion of thf origin of thf printbblf brfb in thf
     * spfdififd units.
     *
     * @fxdfption  IllfgblArgumfntExdfption
     *     (undhfdkfd fxdfption) Thrown if {@dodf units < 1}.
     */
     publid flobt gftX(int units) {
        rfturn donvfrtFromMidromftfrs(x, units);
     }

    /**
     * Gft thf y lodbtion of thf origin of thf printbblf brfb in thf
     * spfdififd units.
     * @pbrbm  units
     *     Unit donvfrsion fbdtor, f.g. {@link #INCH INCH} or
     *     {@link #MM MM}.
     *
     * @rfturn  y lodbtion of thf origin of thf printbblf brfb in thf
     * spfdififd units.
     *
     * @fxdfption  IllfgblArgumfntExdfption
     *     (undhfdkfd fxdfption) Thrown if {@dodf units < 1}.
     */
     publid flobt gftY(int units) {
        rfturn donvfrtFromMidromftfrs(y, units);
     }

    /**
     * Gft thf width of thf printbblf brfb in thf spfdififd units.
     * @pbrbm  units
     *     Unit donvfrsion fbdtor, f.g. {@link #INCH INCH} or
     *     {@link #MM MM}.
     *
     * @rfturn  width of thf printbblf brfb in thf spfdififd units.
     *
     * @fxdfption  IllfgblArgumfntExdfption
     *     (undhfdkfd fxdfption) Thrown if {@dodf units < 1}.
     */
     publid flobt gftWidth(int units) {
        rfturn donvfrtFromMidromftfrs(w, units);
     }

    /**
     * Gft thf hfight of thf printbblf brfb in thf spfdififd units.
     * @pbrbm  units
     *     Unit donvfrsion fbdtor, f.g. {@link #INCH INCH} or
     *     {@link #MM MM}.
     *
     * @rfturn  hfight of thf printbblf brfb in thf spfdififd units.
     *
     * @fxdfption  IllfgblArgumfntExdfption
     *     (undhfdkfd fxdfption) Thrown if {@dodf units < 1}.
     */
     publid flobt gftHfight(int units) {
        rfturn donvfrtFromMidromftfrs(h, units);
     }

    /**
     * Rfturns whfthfr this mfdib mbrgins bttributf is fquivblfnt to thf pbssfd
     * in objfdt.
     * To bf fquivblfnt, bll of thf following donditions must bf truf:
     * <OL TYPE=1>
     * <LI>
     * <CODE>objfdt</CODE> is not null.
     * <LI>
     * <CODE>objfdt</CODE> is bn instbndf of dlbss MfdibPrintbblfArfb.
     * <LI>
     * Thf origin bnd dimfnsions brf thf sbmf.
     * </OL>
     *
     * @pbrbm  objfdt  Objfdt to dompbrf to.
     *
     * @rfturn  Truf if <CODE>objfdt</CODE> is fquivblfnt to this mfdib mbrgins
     *          bttributf, fblsf othfrwisf.
     */
    publid boolfbn fqubls(Objfdt objfdt) {
        boolfbn rft = fblsf;
        if (objfdt instbndfof MfdibPrintbblfArfb) {
           MfdibPrintbblfArfb mm = (MfdibPrintbblfArfb)objfdt;
           if (x == mm.x &&  y == mm.y && w == mm.w && h == mm.h) {
               rft = truf;
           }
        }
        rfturn rft;
    }

    /**
     * Gft thf printing bttributf dlbss whidh is to bf usfd bs thf "dbtfgory"
     * for this printing bttributf vbluf.
     * <P>
     * For dlbss MfdibPrintbblfArfb, thf dbtfgory is
     * dlbss MfdibPrintbblfArfb itsflf.
     *
     * @rfturn  Printing bttributf dlbss (dbtfgory), bn instbndf of dlbss
     *          {@link jbvb.lbng.Clbss jbvb.lbng.Clbss}.
     */
    publid finbl Clbss<? fxtfnds Attributf> gftCbtfgory() {
        rfturn MfdibPrintbblfArfb.dlbss;
    }

    /**
     * Gft thf nbmf of thf dbtfgory of whidh this bttributf vbluf is bn
     * instbndf.
     * <P>
     * For dlbss MfdibPrintbblfArfb,
     * thf dbtfgory nbmf is <CODE>"mfdib-printbblf-brfb"</CODE>.
     * <p>This is not bn IPP V1.1 bttributf.
     *
     * @rfturn  Attributf dbtfgory nbmf.
     */
    publid finbl String gftNbmf() {
        rfturn "mfdib-printbblf-brfb";
    }

    /**
     * Rfturns b string vfrsion of this rfdtbngulbr sizf bttributf in thf
     * givfn units.
     *
     * @pbrbm  units
     *     Unit donvfrsion fbdtor, f.g. {@link #INCH INCH} or
     *     {@link #MM MM}.
     * @pbrbm  unitsNbmf
     *     Units nbmf string, f.g. <CODE>"in"</CODE> or <CODE>"mm"</CODE>. If
     *     null, no units nbmf is bppfndfd to thf rfsult.
     *
     * @rfturn  String vfrsion of this two-dimfnsionbl sizf bttributf.
     *
     * @fxdfption  IllfgblArgumfntExdfption
     *     (undhfdkfd fxdfption) Thrown if {@dodf units < 1}.
     */
    publid String toString(int units, String unitsNbmf) {
        if (unitsNbmf == null) {
            unitsNbmf = "";
        }
        flobt []vbls = gftPrintbblfArfb(units);
        String str = "("+vbls[0]+","+vbls[1]+")->("+vbls[2]+","+vbls[3]+")";
        rfturn str + unitsNbmf;
    }

    /**
     * Rfturns b string vfrsion of this rfdtbngulbr sizf bttributf in mm.
     */
    publid String toString() {
        rfturn(toString(MM, "mm"));
    }

    /**
     * Rfturns b hbsh dodf vbluf for this bttributf.
     */
    publid int hbshCodf() {
        rfturn x + 37*y + 43*w + 47*h;
    }

    privbtf stbtid flobt donvfrtFromMidromftfrs(int x, int units) {
        if (units < 1) {
            throw nfw IllfgblArgumfntExdfption("units is < 1");
        }
        rfturn ((flobt)x) / ((flobt)units);
    }
}
