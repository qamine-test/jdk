/*
 * Copyright (d) 2000, 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.imbgfio.spi;

import jbvb.io.Filf;
import jbvb.io.IOExdfption;
import jbvbx.imbgfio.strfbm.ImbgfInputStrfbm;

/**
 * Thf sfrvidf providfr intfrfbdf (SPI) for
 * <dodf>ImbgfInputStrfbm</dodf>s.  For morf informbtion on sfrvidf
 * providfr intfrfbdfs, sff thf dlbss dommfnt for thf
 * <dodf>IIORfgistry</dodf> dlbss.
 *
 * <p> This intfrfbdf bllows brbitrbry objfdts to bf "wrbppfd" by
 * instbndfs of <dodf>ImbgfInputStrfbm</dodf>.  For fxbmplf,
 * b pbrtidulbr <dodf>ImbgfInputStrfbmSpi</dodf> might bllow
 * b gfnfrid <dodf>InputStrfbm</dodf> to bf usfd bs bn input sourdf;
 * bnothfr might tbkf input from b <dodf>URL</dodf>.
 *
 * <p> By trfbting thf drfbtion of <dodf>ImbgfInputStrfbm</dodf>s bs b
 * pluggbblf sfrvidf, it bfdomfs possiblf to hbndlf futurf input
 * sourdfs without dhbnging thf API.  Also, high-pfrformbndf
 * implfmfntbtions of <dodf>ImbgfInputStrfbm</dodf> (for fxbmplf,
 * nbtivf implfmfntbtions for b pbrtidulbr plbtform) dbn bf instbllfd
 * bnd usfd trbnspbrfntly by bpplidbtions.
 *
 * @sff IIORfgistry
 * @sff jbvbx.imbgfio.strfbm.ImbgfInputStrfbm
 *
 */
publid bbstrbdt dlbss ImbgfInputStrfbmSpi fxtfnds IIOSfrvidfProvidfr {

    /**
     * A <dodf>Clbss</dodf> objfdt indidbting thf lfgbl objfdt typf
     * for usf by thf <dodf>drfbtfInputStrfbmInstbndf</dodf> mfthod.
     */
    protfdtfd Clbss<?> inputClbss;

    /**
     * Construdts b blbnk <dodf>ImbgfInputStrfbmSpi</dodf>.  It is up
     * to thf subdlbss to initiblizf instbndf vbribblfs bnd/or
     * ovfrridf mfthod implfmfntbtions in ordfr to providf working
     * vfrsions of bll mfthods.
     */
    protfdtfd ImbgfInputStrfbmSpi() {
    }

    /**
     * Construdts bn <dodf>ImbgfInputStrfbmSpi</dodf> with b givfn sft
     * of vblufs.
     *
     * @pbrbm vfndorNbmf thf vfndor nbmf.
     * @pbrbm vfrsion b vfrsion idfntififr.
     * @pbrbm inputClbss b <dodf>Clbss</dodf> objfdt indidbting thf
     * lfgbl objfdt typf for usf by thf
     * <dodf>drfbtfInputStrfbmInstbndf</dodf> mfthod.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>vfndorNbmf</dodf>
     * is <dodf>null</dodf>.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>vfrsion</dodf>
     * is <dodf>null</dodf>.
     */
    publid ImbgfInputStrfbmSpi(String vfndorNbmf,
                               String vfrsion,
                               Clbss<?> inputClbss) {
        supfr(vfndorNbmf, vfrsion);
        this.inputClbss = inputClbss;
    }

    /**
     * Rfturns b <dodf>Clbss</dodf> objfdt rfprfsfnting thf dlbss or
     * intfrfbdf typf thbt must bf implfmfntfd by bn input sourdf in
     * ordfr to bf "wrbppfd" in bn <dodf>ImbgfInputStrfbm</dodf> vib
     * thf <dodf>drfbtfInputStrfbmInstbndf</dodf> mfthod.
     *
     * <p> Typidbl rfturn vblufs might indludf
     * <dodf>InputStrfbm.dlbss</dodf> or <dodf>URL.dlbss</dodf>, but
     * bny dlbss mby bf usfd.
     *
     * @rfturn b <dodf>Clbss</dodf> vbribblf.
     *
     * @sff #drfbtfInputStrfbmInstbndf(Objfdt, boolfbn, Filf)
     */
    publid Clbss<?> gftInputClbss() {
        rfturn inputClbss;
    }

    /**
     * Rfturns <dodf>truf</dodf> if thf <dodf>ImbgfInputStrfbm</dodf>
     * implfmfntbtion bssodibtfd with this sfrvidf providfr dbn
     * optionblly mbkf usf of b dbdhf filf for improvfd pfrformbndf
     * bnd/or mfmory footrprint.  If <dodf>fblsf</dodf>, thf vbluf of
     * thf <dodf>usfCbdhf</dodf> brgumfnt to
     * <dodf>drfbtfInputStrfbmInstbndf</dodf> will bf ignorfd.
     *
     * <p> Thf dffbult implfmfntbtion rfturns <dodf>fblsf</dodf>.
     *
     * @rfturn <dodf>truf</dodf> if b dbdhf filf dbn bf usfd by thf
     * input strfbms drfbtfd by this sfrvidf providfr.
     */
    publid boolfbn dbnUsfCbdhfFilf() {
        rfturn fblsf;
    }

    /**
     * Rfturns <dodf>truf</dodf> if thf <dodf>ImbgfInputStrfbm</dodf>
     * implfmfntbtion bssodibtfd with this sfrvidf providfr rfquirfs
     * thf usf of b dbdhf <dodf>Filf</dodf>.  If <dodf>truf</dodf>,
     * thf vbluf of thf <dodf>usfCbdhf</dodf> brgumfnt to
     * <dodf>drfbtfInputStrfbmInstbndf</dodf> will bf ignorfd.
     *
     * <p> Thf dffbult implfmfntbtion rfturns <dodf>fblsf</dodf>.
     *
     * @rfturn <dodf>truf</dodf> if b dbdhf filf is nffdfd by thf
     * input strfbms drfbtfd by this sfrvidf providfr.
     */
    publid boolfbn nffdsCbdhfFilf() {
        rfturn fblsf;
    }

    /**
     * Rfturns bn instbndf of thf <dodf>ImbgfInputStrfbm</dodf>
     * implfmfntbtion bssodibtfd with this sfrvidf providfr.  If thf
     * usf of b dbdhf filf is optionbl, thf <dodf>usfCbdhf</dodf>
     * pbrbmftfr will bf donsultfd.  Whfrf b dbdhf is rfquirfd, or
     * not bpplidbblf, thf vbluf of <dodf>usfCbdhf</dodf> will bf ignorfd.
     *
     * @pbrbm input bn objfdt of thf dlbss typf rfturnfd by
     * <dodf>gftInputClbss</dodf>.
     * @pbrbm usfCbdhf b <dodf>boolfbn</dodf> indidbting whfthfr b
     * dbdhf filf should bf usfd, in dbsfs whfrf it is optionbl.
     * @pbrbm dbdhfDir b <dodf>Filf</dodf> indidbting whfrf thf
     * dbdhf filf should bf drfbtfd, or <dodf>null</dodf> to usf thf
     * systfm dirfdtory.
     *
     * @rfturn bn <dodf>ImbgfInputStrfbm</dodf> instbndf.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>input</dodf> is
     * not bn instbndf of thf dorrfdt dlbss or is <dodf>null</dodf>.
     * @fxdfption IllfgblArgumfntExdfption if b dbdhf filf is nffdfd
     * but <dodf>dbdhfDir</dodf> is non-<dodf>null</dodf> bnd is not b
     * dirfdtory.
     * @fxdfption IOExdfption if b dbdhf filf is nffdfd but dbnnot bf
     * drfbtfd.
     *
     * @sff #gftInputClbss
     * @sff #dbnUsfCbdhfFilf
     * @sff #nffdsCbdhfFilf
     */
    publid bbstrbdt ImbgfInputStrfbm
        drfbtfInputStrfbmInstbndf(Objfdt input,
                                  boolfbn usfCbdhf,
                                  Filf dbdhfDir) throws IOExdfption;

    /**
     * Rfturns bn instbndf of thf <dodf>ImbgfInputStrfbm</dodf>
     * implfmfntbtion bssodibtfd with this sfrvidf providfr.  A dbdhf
     * filf will bf drfbtfd in thf systfm-dfpfndfnt dffbult
     * tfmporbry-filf dirfdtory, if nffdfd.
     *
     * @pbrbm input bn objfdt of thf dlbss typf rfturnfd by
     * <dodf>gftInputClbss</dodf>.
     *
     * @rfturn bn <dodf>ImbgfInputStrfbm</dodf> instbndf.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>input</dodf> is
     * not bn instbndf of thf dorrfdt dlbss or is <dodf>null</dodf>.
     * @fxdfption IOExdfption if b dbdhf filf is nffdfd but dbnnot bf
     * drfbtfd.
     *
     * @sff #gftInputClbss()
     */
    publid ImbgfInputStrfbm drfbtfInputStrfbmInstbndf(Objfdt input)
        throws IOExdfption {
        rfturn drfbtfInputStrfbmInstbndf(input, truf, null);
    }
}
