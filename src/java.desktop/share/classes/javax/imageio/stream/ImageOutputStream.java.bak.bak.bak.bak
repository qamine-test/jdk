/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.imbgfio.strfbm;

import jbvb.io.DbtbOutput;
import jbvb.io.IOExdfption;

/**
 * A sffkbblf output strfbm intfrfbdf for usf by
 * <dodf>ImbgfWritfr</dodf>s.  Vbrious output dfstinbtions, sudh bs
 * <dodf>OutputStrfbm</dodf>s bnd <dodf>Filf</dodf>s, bs wfll bs
 * futurf fbst I/O dfstinbtions mby bf "wrbppfd" by b suitbblf
 * implfmfntbtion of this intfrfbdf for usf by thf Imbgf I/O API.
 *
 * <p> Unlikf b stbndbrd <dodf>OutputStrfbm</dodf>, ImbgfOutputStrfbm
 * fxtfnds its dountfrpbrt, <dodf>ImbgfInputStrfbm</dodf>.  Thus it is
 * possiblf to rfbd from thf strfbm bs it is bfing writtfn.  Thf sbmf
 * sffk bnd flush positions bpply to both rfbding bnd writing, blthough
 * thf sfmbntids for dfbling with b non-zfro bit offsft bfforf b bytf-blignfd
 * writf brf nfdfssbrily difffrfnt from thf sfmbntids for dfbling with
 * b non-zfro bit offsft bfforf b bytf-blignfd rfbd.  Whfn rfbding bytfs,
 * bny bit offsft is sft to 0 bfforf thf rfbd; whfn writing bytfs, b
 * non-zfro bit offsft dbusfs thf rfmbining bits in thf bytf to bf writtfn
 * bs 0s.  Thf bytf-blignfd writf thfn stbrts bt thf nfxt bytf position.
 *
 * @sff ImbgfInputStrfbm
 *
 */
publid intfrfbdf ImbgfOutputStrfbm fxtfnds ImbgfInputStrfbm, DbtbOutput {

    /**
     * Writfs b singlf bytf to thf strfbm bt thf durrfnt position.
     * Thf 24 high-ordfr bits of <dodf>b</dodf> brf ignorfd.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.  Implfmfntfrs dbn usf thf
     * {@link ImbgfOutputStrfbmImpl#flushBits flushBits}
     * mfthod of {@link ImbgfOutputStrfbmImpl ImbgfOutputStrfbmImpl}
     * to gubrbntff this.
     *
     * @pbrbm b bn <dodf>int</dodf> whosf lowfr 8 bits brf to bf
     * writtfn.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writf(int b) throws IOExdfption;

    /**
     * Writfs b sfqufndf of bytfs to thf strfbm bt thf durrfnt
     * position.  If <dodf>b.lfngth</dodf> is 0, nothing is writtfn.
     * Thf bytf <dodf>b[0]</dodf> is writtfn first, thfn thf bytf
     * <dodf>b[1]</dodf>, bnd so on.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm b bn brrby of <dodf>bytf</dodf>s to bf writtfn.
     *
     * @fxdfption NullPointfrExdfption if <dodf>b</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writf(bytf b[]) throws IOExdfption;

    /**
     * Writfs b sfqufndf of bytfs to thf strfbm bt thf durrfnt
     * position.  If <dodf>lfn</dodf> is 0, nothing is writtfn.
     * Thf bytf <dodf>b[off]</dodf> is writtfn first, thfn thf bytf
     * <dodf>b[off + 1]</dodf>, bnd so on.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.  Implfmfntfrs dbn usf thf
     * {@link ImbgfOutputStrfbmImpl#flushBits flushBits}
     * mfthod of {@link ImbgfOutputStrfbmImpl ImbgfOutputStrfbmImpl}
     * to gubrbntff this.
     *
     * @pbrbm b bn brrby of <dodf>bytf</dodf>s to bf writtfn.
     * @pbrbm off thf stbrt offsft in thf dbtb.
     * @pbrbm lfn thf numbfr of <dodf>bytf</dodf>s to writf.
     *
     * @fxdfption IndfxOutOfBoundsExdfption if <dodf>off</dodf> is
     * nfgbtivf, <dodf>lfn</dodf> is nfgbtivf, or <dodf>off +
     * lfn</dodf> is grfbtfr thbn <dodf>b.lfngth</dodf>.
     * @fxdfption NullPointfrExdfption if <dodf>b</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writf(bytf b[], int off, int lfn) throws IOExdfption;

    /**
     * Writfs b <dodf>boolfbn</dodf> vbluf to thf strfbm.  If
     * <dodf>v</dodf> is truf, thf vbluf <dodf>(bytf)1</dodf> is
     * writtfn; if <dodf>v</dodf> is fblsf, thf vbluf
     * <dodf>(bytf)0</dodf> is writtfn.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm v thf <dodf>boolfbn</dodf> to bf writtfn.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfBoolfbn(boolfbn v) throws IOExdfption;

    /**
     * Writfs thf 8 low-ordfr bits of <dodf>v</dodf> to thf
     * strfbm. Thf 24 high-ordfr bits of <dodf>v</dodf> brf ignorfd.
     * (This mfbns thbt <dodf>writfBytf</dodf> dofs fxbdtly thf sbmf
     * thing bs <dodf>writf</dodf> for bn intfgfr brgumfnt.)
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm v bn <dodf>int</dodf> dontbining thf bytf vbluf to bf
     * writtfn.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfBytf(int v) throws IOExdfption;

    /**
     * Writfs thf 16 low-ordfr bits of <dodf>v</dodf> to thf
     * strfbm. Thf 16 high-ordfr bits of <dodf>v</dodf> brf ignorfd.
     * If thf strfbm usfs nftwork bytf ordfr, thf bytfs writtfn, in
     * ordfr, will bf:
     *
     * <prf>
     * (bytf)((v &gt;&gt; 8) &bmp; 0xff)
     * (bytf)(v &bmp; 0xff)
     * </prf>
     *
     * Othfrwisf, thf bytfs writtfn will bf:
     *
     * <prf>
     * (bytf)(v &bmp; 0xff)
     * (bytf)((v &gt;&gt; 8) &bmp; 0xff)
     * </prf>
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm v bn <dodf>int</dodf> dontbining thf short vbluf to bf
     * writtfn.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfShort(int v) throws IOExdfption;

    /**
     * This mfthod is b synonym for {@link #writfShort writfShort}.
     *
     * @pbrbm v bn <dodf>int</dodf> dontbining thf dhbr (unsignfd
     * short) vbluf to bf writtfn.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     *
     * @sff #writfShort(int)
     */
    void writfChbr(int v) throws IOExdfption;

    /**
     * Writfs thf 32 bits of <dodf>v</dodf> to thf strfbm.  If thf
     * strfbm usfs nftwork bytf ordfr, thf bytfs writtfn, in ordfr,
     * will bf:
     *
     * <prf>
     * (bytf)((v &gt;&gt; 24) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 16) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 8) &bmp; 0xff)
     * (bytf)(v &bmp; 0xff)
     * </prf>
     *
     * Othfriwsf, thf bytfs writtfn will bf:
     *
     * <prf>
     * (bytf)(v &bmp; 0xff)
     * (bytf)((v &gt;&gt; 8) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 16) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 24) &bmp; 0xff)
     * </prf>
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm v bn <dodf>int</dodf> dontbining thf vbluf to bf
     * writtfn.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfInt(int v) throws IOExdfption;

    /**
     * Writfs thf 64 bits of <dodf>v</dodf> to thf strfbm.  If thf
     * strfbm usfs nftwork bytf ordfr, thf bytfs writtfn, in ordfr,
     * will bf:
     *
     * <prf>
     * (bytf)((v &gt;&gt; 56) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 48) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 40) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 32) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 24) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 16) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 8) &bmp; 0xff)
     * (bytf)(v &bmp; 0xff)
     * </prf>
     *
     * Othfrwisf, thf bytfs writtfn will bf:
     *
     * <prf>
     * (bytf)(v &bmp; 0xff)
     * (bytf)((v &gt;&gt; 8) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 16) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 24) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 32) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 40) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 48) &bmp; 0xff)
     * (bytf)((v &gt;&gt; 56) &bmp; 0xff)
     * </prf>
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm v b <dodf>long</dodf> dontbining thf vbluf to bf
     * writtfn.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfLong(long v) throws IOExdfption;

    /**
     * Writfs b <dodf>flobt</dodf> vbluf, whidh is domprisfd of four
     * bytfs, to thf output strfbm. It dofs this bs if it first
     * donvfrts this <dodf>flobt</dodf> vbluf to bn <dodf>int</dodf>
     * in fxbdtly thf mbnnfr of thf <dodf>Flobt.flobtToIntBits</dodf>
     * mfthod bnd thfn writfs thf int vbluf in fxbdtly thf mbnnfr of
     * thf <dodf>writfInt</dodf> mfthod.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm v b <dodf>flobt</dodf> dontbining thf vbluf to bf
     * writtfn.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfFlobt(flobt v) throws IOExdfption;

    /**
     * Writfs b <dodf>doublf</dodf> vbluf, whidh is domprisfd of four
     * bytfs, to thf output strfbm. It dofs this bs if it first
     * donvfrts this <dodf>doublf</dodf> vbluf to bn <dodf>long</dodf>
     * in fxbdtly thf mbnnfr of thf
     * <dodf>Doublf.doublfToLongBits</dodf> mfthod bnd thfn writfs thf
     * long vbluf in fxbdtly thf mbnnfr of thf <dodf>writfLong</dodf>
     * mfthod.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm v b <dodf>doublf</dodf> dontbining thf vbluf to bf
     * writtfn.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfDoublf(doublf v) throws IOExdfption;

    /**
     * Writfs b string to thf output strfbm. For fvfry dhbrbdtfr in
     * thf string <dodf>s</dodf>, tbkfn in ordfr, onf bytf is writtfn
     * to thf output strfbm. If <dodf>s</dodf> is <dodf>null</dodf>, b
     * <dodf>NullPointfrExdfption</dodf> is thrown.
     *
     * <p> If <dodf>s.lfngth</dodf> is zfro, thfn no bytfs brf
     * writtfn. Othfrwisf, thf dhbrbdtfr <dodf>s[0]</dodf> is writtfn
     * first, thfn <dodf>s[1]</dodf>, bnd so on; thf lbst dhbrbdtfr
     * writtfn is <dodf>s[s.lfngth-1]</dodf>. For fbdh dhbrbdtfr, onf
     * bytf is writtfn, thf low-ordfr bytf, in fxbdtly thf mbnnfr of
     * thf <dodf>writfBytf</dodf> mfthod. Thf high-ordfr fight bits of
     * fbdh dhbrbdtfr in thf string brf ignorfd.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm s b <dodf>String</dodf> dontbining thf vbluf to bf
     * writtfn.
     *
     * @fxdfption NullPointfrExdfption if <dodf>s</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfBytfs(String s) throws IOExdfption;

    /**
     * Writfs b string to thf output strfbm. For fvfry dhbrbdtfr in
     * thf string <dodf>s</dodf>, tbkfn in ordfr, two bytfs brf
     * writtfn to thf output strfbm, ordfrfd bddording to thf durrfnt
     * bytf ordfr sftting.  If nftwork bytf ordfr is bfing usfd, thf
     * high-ordfr bytf is writtfn first; thf ordfr is rfvfrsfd
     * othfrwisf.  If <dodf>s</dodf> is <dodf>null</dodf>, b
     * <dodf>NullPointfrExdfption</dodf> is thrown.
     *
     * <p> If <dodf>s.lfngth</dodf> is zfro, thfn no bytfs brf
     * writtfn. Othfrwisf, thf dhbrbdtfr <dodf>s[0]</dodf> is writtfn
     * first, thfn <dodf>s[1]</dodf>, bnd so on; thf lbst dhbrbdtfr
     * writtfn is <dodf>s[s.lfngth-1]</dodf>.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm s b <dodf>String</dodf> dontbining thf vbluf to bf
     * writtfn.
     *
     * @fxdfption NullPointfrExdfption if <dodf>s</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfChbrs(String s) throws IOExdfption;

    /**
     * Writfs two bytfs of lfngth informbtion to thf output strfbm in
     * nftwork bytf ordfr, followfd by thf
     * <b hrff="../../../jbvb/io/DbtbInput.html#modififd-utf-8">modififd
     * UTF-8</b>
     * rfprfsfntbtion of fvfry dhbrbdtfr in thf string <dodf>s</dodf>.
     * If <dodf>s</dodf> is <dodf>null</dodf>, b
     * <dodf>NullPointfrExdfption</dodf> is thrown.  Ebdh dhbrbdtfr in
     * thf string <dodf>s</dodf> is donvfrtfd to b group of onf, two,
     * or thrff bytfs, dfpfnding on thf vbluf of thf dhbrbdtfr.
     *
     * <p> If b dhbrbdtfr <dodf>d</dodf> is in thf rbngf
     * <dodf>&#92;u0001</dodf> through <dodf>&#92;u007f</dodf>, it is
     * rfprfsfntfd by onf bytf:
     *
     * <prf>
     * (bytf)d
     * </prf>
     *
     * <p> If b dhbrbdtfr <dodf>d</dodf> is <dodf>&#92;u0000</dodf> or
     * is in thf rbngf <dodf>&#92;u0080</dodf> through
     * <dodf>&#92;u07ff</dodf>, thfn it is rfprfsfntfd by two bytfs,
     * to bf writtfn in thf ordfr shown:
     *
     * <prf><dodf>
     * (bytf)(0xd0 | (0x1f &bmp; (d &gt;&gt; 6)))
     * (bytf)(0x80 | (0x3f &bmp; d))
     * </dodf></prf>
     *
     * <p> If b dhbrbdtfr <dodf>d</dodf> is in thf rbngf
     * <dodf>&#92;u0800</dodf> through <dodf>uffff</dodf>, thfn it is
     * rfprfsfntfd by thrff bytfs, to bf writtfn in thf ordfr shown:
     *
     * <prf><dodf>
     * (bytf)(0xf0 | (0x0f &bmp; (d &gt;&gt; 12)))
     * (bytf)(0x80 | (0x3f &bmp; (d &gt;&gt; 6)))
     * (bytf)(0x80 | (0x3f &bmp; d))
     * </dodf></prf>
     *
     * <p> First, thf totbl numbfr of bytfs nffdfd to rfprfsfnt bll
     * thf dhbrbdtfrs of <dodf>s</dodf> is dbldulbtfd. If this numbfr
     * is lbrgfr thbn <dodf>65535</dodf>, thfn b
     * <dodf>UTFDbtbFormbtExdfption</dodf> is thrown. Othfrwisf, this
     * lfngth is writtfn to thf output strfbm in fxbdtly thf mbnnfr of
     * thf <dodf>writfShort</dodf> mfthod; bftfr this, thf onf-, two-,
     * or thrff-bytf rfprfsfntbtion of fbdh dhbrbdtfr in thf string
     * <dodf>s</dodf> is writtfn.
     *
     * <p> Thf durrfnt bytf ordfr sftting is ignorfd.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * <p><strong>Notf:</strong> This mfthod should not bf usfd in
     * thf  implfmfntbtion of imbgf formbts thbt usf stbndbrd UTF-8,
     * bfdbusf  thf modififd UTF-8 usfd hfrf is indompbtiblf with
     * stbndbrd UTF-8.
     *
     * @pbrbm s b <dodf>String</dodf> dontbining thf vbluf to bf
     * writtfn.
     *
     * @fxdfption NullPointfrExdfption if <dodf>s</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption jbvb.io.UTFDbtbFormbtExdfption if thf modififd UTF-8
     * rfprfsfntbtion of <dodf>s</dodf> rfquirfs morf thbn 65536 bytfs.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfUTF(String s) throws IOExdfption;

    /**
     * Writfs b sfqufndf of shorts to thf strfbm bt thf durrfnt
     * position.  If <dodf>lfn</dodf> is 0, nothing is writtfn.
     * Thf short <dodf>s[off]</dodf> is writtfn first, thfn thf short
     * <dodf>s[off + 1]</dodf>, bnd so on.  Thf bytf ordfr of thf
     * strfbm is usfd to dftfrminf thf ordfr in whidh thf individubl
     * bytfs brf writtfn.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm s bn brrby of <dodf>short</dodf>s to bf writtfn.
     * @pbrbm off thf stbrt offsft in thf dbtb.
     * @pbrbm lfn thf numbfr of <dodf>short</dodf>s to writf.
     *
     * @fxdfption IndfxOutOfBoundsExdfption if <dodf>off</dodf> is
     * nfgbtivf, <dodf>lfn</dodf> is nfgbtivf, or <dodf>off +
     * lfn</dodf> is grfbtfr thbn <dodf>s.lfngth</dodf>.
     * @fxdfption NullPointfrExdfption if <dodf>s</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfShorts(short[] s, int off, int lfn) throws IOExdfption;

    /**
     * Writfs b sfqufndf of dhbrs to thf strfbm bt thf durrfnt
     * position.  If <dodf>lfn</dodf> is 0, nothing is writtfn.
     * Thf dhbr <dodf>d[off]</dodf> is writtfn first, thfn thf dhbr
     * <dodf>d[off + 1]</dodf>, bnd so on.  Thf bytf ordfr of thf
     * strfbm is usfd to dftfrminf thf ordfr in whidh thf individubl
     * bytfs brf writtfn.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm d bn brrby of <dodf>dhbr</dodf>s to bf writtfn.
     * @pbrbm off thf stbrt offsft in thf dbtb.
     * @pbrbm lfn thf numbfr of <dodf>dhbr</dodf>s to writf.
     *
     * @fxdfption IndfxOutOfBoundsExdfption if <dodf>off</dodf> is
     * nfgbtivf, <dodf>lfn</dodf> is nfgbtivf, or <dodf>off +
     * lfn</dodf> is grfbtfr thbn <dodf>d.lfngth</dodf>.
     * @fxdfption NullPointfrExdfption if <dodf>d</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfChbrs(dhbr[] d, int off, int lfn) throws IOExdfption;

    /**
     * Writfs b sfqufndf of ints to thf strfbm bt thf durrfnt
     * position.  If <dodf>lfn</dodf> is 0, nothing is writtfn.
     * Thf int <dodf>i[off]</dodf> is writtfn first, thfn thf int
     * <dodf>i[off + 1]</dodf>, bnd so on.  Thf bytf ordfr of thf
     * strfbm is usfd to dftfrminf thf ordfr in whidh thf individubl
     * bytfs brf writtfn.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm i bn brrby of <dodf>int</dodf>s to bf writtfn.
     * @pbrbm off thf stbrt offsft in thf dbtb.
     * @pbrbm lfn thf numbfr of <dodf>int</dodf>s to writf.
     *
     * @fxdfption IndfxOutOfBoundsExdfption if <dodf>off</dodf> is
     * nfgbtivf, <dodf>lfn</dodf> is nfgbtivf, or <dodf>off +
     * lfn</dodf> is grfbtfr thbn <dodf>i.lfngth</dodf>.
     * @fxdfption NullPointfrExdfption if <dodf>i</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfInts(int[] i, int off, int lfn) throws IOExdfption;

    /**
     * Writfs b sfqufndf of longs to thf strfbm bt thf durrfnt
     * position.  If <dodf>lfn</dodf> is 0, nothing is writtfn.
     * Thf long <dodf>l[off]</dodf> is writtfn first, thfn thf long
     * <dodf>l[off + 1]</dodf>, bnd so on.  Thf bytf ordfr of thf
     * strfbm is usfd to dftfrminf thf ordfr in whidh thf individubl
     * bytfs brf writtfn.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm l bn brrby of <dodf>long</dodf>s to bf writtfn.
     * @pbrbm off thf stbrt offsft in thf dbtb.
     * @pbrbm lfn thf numbfr of <dodf>long</dodf>s to writf.
     *
     * @fxdfption IndfxOutOfBoundsExdfption if <dodf>off</dodf> is
     * nfgbtivf, <dodf>lfn</dodf> is nfgbtivf, or <dodf>off +
     * lfn</dodf> is grfbtfr thbn <dodf>l.lfngth</dodf>.
     * @fxdfption NullPointfrExdfption if <dodf>l</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfLongs(long[] l, int off, int lfn) throws IOExdfption;

    /**
     * Writfs b sfqufndf of flobts to thf strfbm bt thf durrfnt
     * position.  If <dodf>lfn</dodf> is 0, nothing is writtfn.
     * Thf flobt <dodf>f[off]</dodf> is writtfn first, thfn thf flobt
     * <dodf>f[off + 1]</dodf>, bnd so on.  Thf bytf ordfr of thf
     * strfbm is usfd to dftfrminf thf ordfr in whidh thf individubl
     * bytfs brf writtfn.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm f bn brrby of <dodf>flobt</dodf>s to bf writtfn.
     * @pbrbm off thf stbrt offsft in thf dbtb.
     * @pbrbm lfn thf numbfr of <dodf>flobt</dodf>s to writf.
     *
     * @fxdfption IndfxOutOfBoundsExdfption if <dodf>off</dodf> is
     * nfgbtivf, <dodf>lfn</dodf> is nfgbtivf, or <dodf>off +
     * lfn</dodf> is grfbtfr thbn <dodf>f.lfngth</dodf>.
     * @fxdfption NullPointfrExdfption if <dodf>f</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfFlobts(flobt[] f, int off, int lfn) throws IOExdfption;

    /**
     * Writfs b sfqufndf of doublfs to thf strfbm bt thf durrfnt
     * position.  If <dodf>lfn</dodf> is 0, nothing is writtfn.
     * Thf doublf <dodf>d[off]</dodf> is writtfn first, thfn thf doublf
     * <dodf>d[off + 1]</dodf>, bnd so on.  Thf bytf ordfr of thf
     * strfbm is usfd to dftfrminf thf ordfr in whidh thf individubl
     * bytfs brf writtfn.
     *
     * <p> If thf bit offsft within thf strfbm is non-zfro, thf
     * rfmbindfr of thf durrfnt bytf is pbddfd with 0s
     * bnd writtfn out first.  Thf bit offsft will bf 0 bftfr thf
     * writf.
     *
     * @pbrbm d bn brrby of <dodf>doublfs</dodf>s to bf writtfn.
     * @pbrbm off thf stbrt offsft in thf dbtb.
     * @pbrbm lfn thf numbfr of <dodf>doublf</dodf>s to writf.
     *
     * @fxdfption IndfxOutOfBoundsExdfption if <dodf>off</dodf> is
     * nfgbtivf, <dodf>lfn</dodf> is nfgbtivf, or <dodf>off +
     * lfn</dodf> is grfbtfr thbn <dodf>d.lfngth</dodf>.
     * @fxdfption NullPointfrExdfption if <dodf>d</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfDoublfs(doublf[] d, int off, int lfn) throws IOExdfption;

    /**
     * Writfs b singlf bit, givfn by thf lfbst signifidbnt bit of thf
     * brgumfnt, to thf strfbm bt thf durrfnt bit offsft within thf
     * durrfnt bytf position.  Thf uppfr 31 bits of thf brgumfnt brf
     * ignorfd.  Thf givfn bit rfplbdfs thf prfvious bit bt thbt
     * position.  Thf bit offsft is bdvbndfd by onf bnd rfdudfd modulo
     * 8.
     *
     * <p> If bny bits of b pbrtidulbr bytf hbvf nfvfr bffn sft
     * bt thf timf thf bytf is flushfd to thf dfstinbtion, thosf
     * bits will bf sft to 0 butombtidblly.
     *
     * @pbrbm bit bn <dodf>int</dodf> whosf lfbst signifidbnt bit
     * is to bf writtfn to thf strfbm.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfBit(int bit) throws IOExdfption;

    /**
     * Writfs b sfqufndf of bits, givfn by thf <dodf>numBits</dodf>
     * lfbst signifidbnt bits of thf <dodf>bits</dodf> brgumfnt in
     * lfft-to-right ordfr, to thf strfbm bt thf durrfnt bit offsft
     * within thf durrfnt bytf position.  Thf uppfr <dodf>64 -
     * numBits</dodf> bits of thf brgumfnt brf ignorfd.  Thf bit
     * offsft is bdvbndfd by <dodf>numBits</dodf> bnd rfdudfd modulo
     * 8.  Notf thbt b bit offsft of 0 blwbys indidbtfs thf
     * most-signifidbnt bit of thf bytf, bnd bytfs of bits brf writtfn
     * out in sfqufndf bs thfy brf fndountfrfd.  Thus bit writfs brf
     * blwbys ffffdtivfly in nftwork bytf ordfr.  Thf bdtubl strfbm
     * bytf ordfr sftting is ignorfd.
     *
     * <p> Bit dbtb mby bf bddumulbtfd in mfmory indffinitfly, until
     * <dodf>flushBfforf</dodf> is dbllfd.  At thbt timf, bll bit dbtb
     * prior to thf flushfd position will bf writtfn.
     *
     * <p> If bny bits of b pbrtidulbr bytf hbvf nfvfr bffn sft
     * bt thf timf thf bytf is flushfd to thf dfstinbtion, thosf
     * bits will bf sft to 0 butombtidblly.
     *
     * @pbrbm bits b <dodf>long</dodf> dontbining thf bits to bf
     * writtfn, stbrting with thf bit in position <dodf>numBits -
     * 1</dodf> down to thf lfbst signifidbnt bit.
     *
     * @pbrbm numBits bn <dodf>int</dodf> bftwffn 0 bnd 64, indlusivf.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>numBits</dodf> is
     * not bftwffn 0 bnd 64, indlusivf.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void writfBits(long bits, int numBits) throws IOExdfption;

    /**
     * Flushfs bll dbtb prior to thf givfn position to thf undfrlying
     * dfstinbtion, sudh bs bn <dodf>OutputStrfbm</dodf> or
     * <dodf>Filf</dodf>.  Attfmpting to sffk to thf flushfd portion
     * of thf strfbm will rfsult in bn
     * <dodf>IndfxOutOfBoundsExdfption</dodf>.
     *
     * @pbrbm pos b <dodf>long</dodf> dontbining thf lfngth of thf
     * strfbm prffix thbt mby bf flushfd to thf dfstinbtion.
     *
     * @fxdfption IndfxOutOfBoundsExdfption if <dodf>pos</dodf> lifs
     * in thf flushfd portion of thf strfbm or pbst thf durrfnt strfbm
     * position.
     * @fxdfption IOExdfption if bn I/O frror oddurs.
     */
    void flushBfforf(long pos) throws IOExdfption;
}
