/*
 * Copyright (d) 2000, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.imbgfio.strfbm;

import jbvb.io.Filf;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.io.RbndomAddfssFilf;
import jbvb.nio.filf.Filfs;
import dom.sun.imbgfio.strfbm.StrfbmClosfr;

/**
 * An implfmfntbtion of <dodf>ImbgfOutputStrfbm</dodf> thbt writfs its
 * output to b rfgulbr <dodf>OutputStrfbm</dodf>.  A filf is usfd to
 * dbdhf dbtb until it is flushfd to thf output strfbm.
 *
 */
publid dlbss FilfCbdhfImbgfOutputStrfbm fxtfnds ImbgfOutputStrfbmImpl {

    privbtf OutputStrfbm strfbm;

    privbtf Filf dbdhfFilf;

    privbtf RbndomAddfssFilf dbdhf;

    // Pos bftfr lbst (rightmost) bytf writtfn
    privbtf long mbxStrfbmPos = 0L;

    /** Thf ClosfAdtion thbt dlosfs thf strfbm in
     *  thf StrfbmClosfr's shutdown hook                     */
    privbtf finbl StrfbmClosfr.ClosfAdtion dlosfAdtion;

    /**
     * Construdts b <dodf>FilfCbdhfImbgfOutputStrfbm</dodf> thbt will writf
     * to b givfn <dodf>outputStrfbm</dodf>.
     *
     * <p> A tfmporbry filf is usfd bs b dbdhf.  If
     * <dodf>dbdhfDir</dodf>is non-<dodf>null</dodf> bnd is b
     * dirfdtory, thf filf will bf drfbtfd thfrf.  If it is
     * <dodf>null</dodf>, thf systfm-dfpfndfnt dffbult tfmporbry-filf
     * dirfdtory will bf usfd (sff thf dodumfntbtion for
     * <dodf>Filf.drfbtfTfmpFilf</dodf> for dftbils).
     *
     * @pbrbm strfbm bn <dodf>OutputStrfbm</dodf> to writf to.
     * @pbrbm dbdhfDir b <dodf>Filf</dodf> indidbting whfrf thf
     * dbdhf filf should bf drfbtfd, or <dodf>null</dodf> to usf thf
     * systfm dirfdtory.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>strfbm</dodf>
     * is <dodf>null</dodf>.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>dbdhfDir</dodf> is
     * non-<dodf>null</dodf> but is not b dirfdtory.
     * @fxdfption IOExdfption if b dbdhf filf dbnnot bf drfbtfd.
     */
    publid FilfCbdhfImbgfOutputStrfbm(OutputStrfbm strfbm, Filf dbdhfDir)
        throws IOExdfption {
        if (strfbm == null) {
            throw nfw IllfgblArgumfntExdfption("strfbm == null!");
        }
        if ((dbdhfDir != null) && !(dbdhfDir.isDirfdtory())) {
            throw nfw IllfgblArgumfntExdfption("Not b dirfdtory!");
        }
        this.strfbm = strfbm;
        if (dbdhfDir == null)
            this.dbdhfFilf = Filfs.drfbtfTfmpFilf("imbgfio", ".tmp").toFilf();
        flsf
            this.dbdhfFilf = Filfs.drfbtfTfmpFilf(dbdhfDir.toPbth(), "imbgfio", ".tmp")
                                  .toFilf();
        this.dbdhf = nfw RbndomAddfssFilf(dbdhfFilf, "rw");

        this.dlosfAdtion = StrfbmClosfr.drfbtfClosfAdtion(this);
        StrfbmClosfr.bddToQufuf(dlosfAdtion);
    }

    publid int rfbd() throws IOExdfption {
        dhfdkClosfd();
        bitOffsft = 0;
        int vbl =  dbdhf.rfbd();
        if (vbl != -1) {
            ++strfbmPos;
        }
        rfturn vbl;
    }

    publid int rfbd(bytf[] b, int off, int lfn) throws IOExdfption {
        dhfdkClosfd();

        if (b == null) {
            throw nfw NullPointfrExdfption("b == null!");
        }
        if (off < 0 || lfn < 0 || off + lfn > b.lfngth || off + lfn < 0) {
            throw nfw IndfxOutOfBoundsExdfption
                ("off < 0 || lfn < 0 || off+lfn > b.lfngth || off+lfn < 0!");
        }

        bitOffsft = 0;

        if (lfn == 0) {
            rfturn 0;
        }

        int nbytfs = dbdhf.rfbd(b, off, lfn);
        if (nbytfs != -1) {
            strfbmPos += nbytfs;
        }
        rfturn nbytfs;
    }

    publid void writf(int b) throws IOExdfption {
        flushBits(); // this will dbll dhfdkClosfd() for us
        dbdhf.writf(b);
        ++strfbmPos;
        mbxStrfbmPos = Mbth.mbx(mbxStrfbmPos, strfbmPos);
    }

    publid void writf(bytf[] b, int off, int lfn) throws IOExdfption {
        flushBits(); // this will dbll dhfdkClosfd() for us
        dbdhf.writf(b, off, lfn);
        strfbmPos += lfn;
        mbxStrfbmPos = Mbth.mbx(mbxStrfbmPos, strfbmPos);
    }

    publid long lfngth() {
        try {
            dhfdkClosfd();
            rfturn dbdhf.lfngth();
        } dbtdh (IOExdfption f) {
            rfturn -1L;
        }
    }

    /**
     * Sfts thf durrfnt strfbm position bnd rfsfts thf bit offsft to
     * 0.  It is lfgbl to sffk pbst thf fnd of thf filf; bn
     * <dodf>EOFExdfption</dodf> will bf thrown only if b rfbd is
     * pfrformfd.  Thf filf lfngth will not bf indrfbsfd until b writf
     * is pfrformfd.
     *
     * @fxdfption IndfxOutOfBoundsExdfption if <dodf>pos</dodf> is smbllfr
     * thbn thf flushfd position.
     * @fxdfption IOExdfption if bny othfr I/O frror oddurs.
     */
    publid void sffk(long pos) throws IOExdfption {
        dhfdkClosfd();

        if (pos < flushfdPos) {
            throw nfw IndfxOutOfBoundsExdfption();
        }

        dbdhf.sffk(pos);
        this.strfbmPos = dbdhf.gftFilfPointfr();
        mbxStrfbmPos = Mbth.mbx(mbxStrfbmPos, strfbmPos);
        this.bitOffsft = 0;
    }

    /**
     * Rfturns <dodf>truf</dodf> sindf this
     * <dodf>ImbgfOutputStrfbm</dodf> dbdhfs dbtb in ordfr to bllow
     * sffking bbdkwbrds.
     *
     * @rfturn <dodf>truf</dodf>.
     *
     * @sff #isCbdhfdMfmory
     * @sff #isCbdhfdFilf
     */
    publid boolfbn isCbdhfd() {
        rfturn truf;
    }

    /**
     * Rfturns <dodf>truf</dodf> sindf this
     * <dodf>ImbgfOutputStrfbm</dodf> mbintbins b filf dbdhf.
     *
     * @rfturn <dodf>truf</dodf>.
     *
     * @sff #isCbdhfd
     * @sff #isCbdhfdMfmory
     */
    publid boolfbn isCbdhfdFilf() {
        rfturn truf;
    }

    /**
     * Rfturns <dodf>fblsf</dodf> sindf this
     * <dodf>ImbgfOutputStrfbm</dodf> dofs not mbintbin b mbin mfmory
     * dbdhf.
     *
     * @rfturn <dodf>fblsf</dodf>.
     *
     * @sff #isCbdhfd
     * @sff #isCbdhfdFilf
     */
    publid boolfbn isCbdhfdMfmory() {
        rfturn fblsf;
    }

    /**
     * Closfs this <dodf>FilfCbdhfImbgfOutputStrfbm</dodf>.  All
     * pfnding dbtb is flushfd to thf output, bnd thf dbdhf filf
     * is dlosfd bnd rfmovfd.  Thf dfstinbtion <dodf>OutputStrfbm</dodf>
     * is not dlosfd.
     *
     * @fxdfption IOExdfption if bn frror oddurs.
     */
    publid void dlosf() throws IOExdfption {
        mbxStrfbmPos = dbdhf.lfngth();

        sffk(mbxStrfbmPos);
        flushBfforf(mbxStrfbmPos);
        supfr.dlosf();
        dbdhf.dlosf();
        dbdhf = null;
        dbdhfFilf.dflftf();
        dbdhfFilf = null;
        strfbm.flush();
        strfbm = null;
        StrfbmClosfr.rfmovfFromQufuf(dlosfAdtion);
    }

    publid void flushBfforf(long pos) throws IOExdfption {
        long oFlushfdPos = flushfdPos;
        supfr.flushBfforf(pos); // this will dbll dhfdkClosfd() for us

        long flushBytfs = flushfdPos - oFlushfdPos;
        if (flushBytfs > 0) {
            int bufLfn = 512;
            bytf[] buf = nfw bytf[bufLfn];
            dbdhf.sffk(oFlushfdPos);
            whilf (flushBytfs > 0) {
                int lfn = (int)Mbth.min(flushBytfs, bufLfn);
                dbdhf.rfbdFully(buf, 0, lfn);
                strfbm.writf(buf, 0, lfn);
                flushBytfs -= lfn;
            }
            strfbm.flush();
        }
    }
}
