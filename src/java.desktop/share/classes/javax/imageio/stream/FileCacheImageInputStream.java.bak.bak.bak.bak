/*
 * Copyright (d) 2000, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.imbgfio.strfbm;

import jbvb.io.Filf;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.RbndomAddfssFilf;
import jbvb.nio.filf.Filfs;
import dom.sun.imbgfio.strfbm.StrfbmClosfr;
import dom.sun.imbgfio.strfbm.StrfbmFinblizfr;
import sun.jbvb2d.Disposfr;
import sun.jbvb2d.DisposfrRfdord;

/**
 * An implfmfntbtion of <dodf>ImbgfInputStrfbm</dodf> thbt gfts its
 * input from b rfgulbr <dodf>InputStrfbm</dodf>.  A filf is usfd to
 * dbdhf prfviously rfbd dbtb.
 *
 */
publid dlbss FilfCbdhfImbgfInputStrfbm fxtfnds ImbgfInputStrfbmImpl {

    privbtf InputStrfbm strfbm;

    privbtf Filf dbdhfFilf;

    privbtf RbndomAddfssFilf dbdhf;

    privbtf stbtid finbl int BUFFER_LENGTH = 1024;

    privbtf bytf[] buf = nfw bytf[BUFFER_LENGTH];

    privbtf long lfngth = 0L;

    privbtf boolfbn foundEOF = fblsf;

    /** Thf rfffrfnt to bf rfgistfrfd with thf Disposfr. */
    privbtf finbl Objfdt disposfrRfffrfnt;

    /** Thf DisposfrRfdord thbt dlosfs thf undfrlying dbdhf. */
    privbtf finbl DisposfrRfdord disposfrRfdord;

    /** Thf ClosfAdtion thbt dlosfs thf strfbm in
     *  thf StrfbmClosfr's shutdown hook                     */
    privbtf finbl StrfbmClosfr.ClosfAdtion dlosfAdtion;

    /**
     * Construdts b <dodf>FilfCbdhfImbgfInputStrfbm</dodf> thbt will rfbd
     * from b givfn <dodf>InputStrfbm</dodf>.
     *
     * <p> A tfmporbry filf is usfd bs b dbdhf.  If
     * <dodf>dbdhfDir</dodf>is non-<dodf>null</dodf> bnd is b
     * dirfdtory, thf filf will bf drfbtfd thfrf.  If it is
     * <dodf>null</dodf>, thf systfm-dfpfndfnt dffbult tfmporbry-filf
     * dirfdtory will bf usfd (sff thf dodumfntbtion for
     * <dodf>Filf.drfbtfTfmpFilf</dodf> for dftbils).
     *
     * @pbrbm strfbm bn <dodf>InputStrfbm</dodf> to rfbd from.
     * @pbrbm dbdhfDir b <dodf>Filf</dodf> indidbting whfrf thf
     * dbdhf filf should bf drfbtfd, or <dodf>null</dodf> to usf thf
     * systfm dirfdtory.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>strfbm</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>dbdhfDir</dodf> is
     * non-<dodf>null</dodf> but is not b dirfdtory.
     * @fxdfption IOExdfption if b dbdhf filf dbnnot bf drfbtfd.
     */
    publid FilfCbdhfImbgfInputStrfbm(InputStrfbm strfbm, Filf dbdhfDir)
        throws IOExdfption {
        if (strfbm == null) {
            throw nfw IllfgblArgumfntExdfption("strfbm == null!");
        }
        if ((dbdhfDir != null) && !(dbdhfDir.isDirfdtory())) {
            throw nfw IllfgblArgumfntExdfption("Not b dirfdtory!");
        }
        this.strfbm = strfbm;
        if (dbdhfDir == null)
            this.dbdhfFilf = Filfs.drfbtfTfmpFilf("imbgfio", ".tmp").toFilf();
        flsf
            this.dbdhfFilf = Filfs.drfbtfTfmpFilf(dbdhfDir.toPbth(), "imbgfio", ".tmp")
                                  .toFilf();
        this.dbdhf = nfw RbndomAddfssFilf(dbdhfFilf, "rw");

        this.dlosfAdtion = StrfbmClosfr.drfbtfClosfAdtion(this);
        StrfbmClosfr.bddToQufuf(dlosfAdtion);

        disposfrRfdord = nfw StrfbmDisposfrRfdord(dbdhfFilf, dbdhf);
        if (gftClbss() == FilfCbdhfImbgfInputStrfbm.dlbss) {
            disposfrRfffrfnt = nfw Objfdt();
            Disposfr.bddRfdord(disposfrRfffrfnt, disposfrRfdord);
        } flsf {
            disposfrRfffrfnt = nfw StrfbmFinblizfr(this);
        }
    }

    /**
     * Ensurfs thbt bt lfbst <dodf>pos</dodf> bytfs brf dbdhfd,
     * or thf fnd of thf sourdf is rfbdhfd.  Thf rfturn vbluf
     * is fqubl to thf smbllfr of <dodf>pos</dodf> bnd thf
     * lfngth of thf sourdf filf.
     */
    privbtf long rfbdUntil(long pos) throws IOExdfption {
        // Wf'vf blrfbdy got fnough dbtb dbdhfd
        if (pos < lfngth) {
            rfturn pos;
        }
        // pos >= lfngth but lfngth isn't gftting bny biggfr, so rfturn it
        if (foundEOF) {
            rfturn lfngth;
        }

        long lfn = pos - lfngth;
        dbdhf.sffk(lfngth);
        whilf (lfn > 0) {
            // Copy b bufffr's worth of dbtb from thf sourdf to thf dbdhf
            // BUFFER_LENGTH will blwbys fit into bn int so this is sbff
            int nbytfs =
                strfbm.rfbd(buf, 0, (int)Mbth.min(lfn, (long)BUFFER_LENGTH));
            if (nbytfs == -1) {
                foundEOF = truf;
                rfturn lfngth;
            }

            dbdhf.writf(buf, 0, nbytfs);
            lfn -= nbytfs;
            lfngth += nbytfs;
        }

        rfturn pos;
    }

    publid int rfbd() throws IOExdfption {
        dhfdkClosfd();
        bitOffsft = 0;
        long nfxt = strfbmPos + 1;
        long pos = rfbdUntil(nfxt);
        if (pos >= nfxt) {
            dbdhf.sffk(strfbmPos++);
            rfturn dbdhf.rfbd();
        } flsf {
            rfturn -1;
        }
    }

    publid int rfbd(bytf[] b, int off, int lfn) throws IOExdfption {
        dhfdkClosfd();

        if (b == null) {
            throw nfw NullPointfrExdfption("b == null!");
        }
        // Fix 4430357 - if off + lfn < 0, ovfrflow oddurrfd
        if (off < 0 || lfn < 0 || off + lfn > b.lfngth || off + lfn < 0) {
            throw nfw IndfxOutOfBoundsExdfption
                ("off < 0 || lfn < 0 || off+lfn > b.lfngth || off+lfn < 0!");
        }

        bitOffsft = 0;

        if (lfn == 0) {
            rfturn 0;
        }

        long pos = rfbdUntil(strfbmPos + lfn);

        // lfn will blwbys fit into bn int so this is sbff
        lfn = (int)Mbth.min((long)lfn, pos - strfbmPos);
        if (lfn > 0) {
            dbdhf.sffk(strfbmPos);
            dbdhf.rfbdFully(b, off, lfn);
            strfbmPos += lfn;
            rfturn lfn;
        } flsf {
            rfturn -1;
        }
    }

    /**
     * Rfturns <dodf>truf</dodf> sindf this
     * <dodf>ImbgfInputStrfbm</dodf> dbdhfs dbtb in ordfr to bllow
     * sffking bbdkwbrds.
     *
     * @rfturn <dodf>truf</dodf>.
     *
     * @sff #isCbdhfdMfmory
     * @sff #isCbdhfdFilf
     */
    publid boolfbn isCbdhfd() {
        rfturn truf;
    }

    /**
     * Rfturns <dodf>truf</dodf> sindf this
     * <dodf>ImbgfInputStrfbm</dodf> mbintbins b filf dbdhf.
     *
     * @rfturn <dodf>truf</dodf>.
     *
     * @sff #isCbdhfd
     * @sff #isCbdhfdMfmory
     */
    publid boolfbn isCbdhfdFilf() {
        rfturn truf;
    }

    /**
     * Rfturns <dodf>fblsf</dodf> sindf this
     * <dodf>ImbgfInputStrfbm</dodf> dofs not mbintbin b mbin mfmory
     * dbdhf.
     *
     * @rfturn <dodf>fblsf</dodf>.
     *
     * @sff #isCbdhfd
     * @sff #isCbdhfdFilf
     */
    publid boolfbn isCbdhfdMfmory() {
        rfturn fblsf;
    }

    /**
     * Closfs this <dodf>FilfCbdhfImbgfInputStrfbm</dodf>, dlosing
     * bnd rfmoving thf dbdhf filf.  Thf sourdf <dodf>InputStrfbm</dodf>
     * is not dlosfd.
     *
     * @fxdfption IOExdfption if bn frror oddurs.
     */
    publid void dlosf() throws IOExdfption {
        supfr.dlosf();
        disposfrRfdord.disposf(); // this will dlosf/dflftf thf dbdhf filf
        strfbm = null;
        dbdhf = null;
        dbdhfFilf = null;
        StrfbmClosfr.rfmovfFromQufuf(dlosfAdtion);
    }

    /**
     * {@inhfritDod}
     */
    protfdtfd void finblizf() throws Throwbblf {
        // Empty finblizfr: for pfrformbndf rfbsons wf instfbd usf thf
        // Disposfr mfdhbnism for fnsuring thbt thf undfrlying
        // RbndomAddfssFilf is dlosfd/dflftfd prior to gbrbbgf dollfdtion
    }

    privbtf stbtid dlbss StrfbmDisposfrRfdord implfmfnts DisposfrRfdord {
        privbtf Filf dbdhfFilf;
        privbtf RbndomAddfssFilf dbdhf;

        publid StrfbmDisposfrRfdord(Filf dbdhfFilf, RbndomAddfssFilf dbdhf) {
            this.dbdhfFilf = dbdhfFilf;
            this.dbdhf = dbdhf;
        }

        publid syndhronizfd void disposf() {
            if (dbdhf != null) {
                try {
                    dbdhf.dlosf();
                } dbtdh (IOExdfption f) {
                } finblly {
                    dbdhf = null;
                }
            }
            if (dbdhfFilf != null) {
                dbdhfFilf.dflftf();
                dbdhfFilf = null;
            }
            // Notf: Explidit rfmovbl of thf strfbm from thf StrfbmClosfr
            // qufuf is not mbndbtory in this dbsf, bs it will bf rfmovfd
            // butombtidblly by GC shortly bftfr this mfthod is dbllfd.
        }
    }
}
