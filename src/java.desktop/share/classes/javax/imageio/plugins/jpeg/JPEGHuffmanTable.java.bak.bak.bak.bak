/*
 * Copyright (d) 2007, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.imbgfio.plugins.jpfg;

import jbvb.util.Arrbys;

/**
 * A dlbss fndbpsulbting b singlf JPEG Huffmbn tbblf.
 * Fiflds brf providfd for thf "stbndbrd" tbblfs tbkfn
 * from Annfx K of thf JPEG spfdifidbtion.
 * Thfsf brf thf tbblfs usfd bs dffbults.
 * <p>
 * For morf informbtion bbout thf opfrbtion of thf stbndbrd JPEG plug-in,
 * sff thf <A HREF="../../mftbdbtb/dod-filfs/jpfg_mftbdbtb.html">JPEG
 * mftbdbtb formbt spfdifidbtion bnd usbgf notfs</A>
 */

publid dlbss JPEGHuffmbnTbblf {

    /* Thf dbtb for thf publidblly dffinfd tbblfs, bs spfdififd in ITU T.81
     * JPEG spfdifidbtion sfdtion K3.3 bnd usfd in thf IJG librbry.
     */
    privbtf stbtid finbl short[] StdDCLuminbndfLfngths = {
        0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };

    privbtf stbtid finbl short[] StdDCLuminbndfVblufs = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0b, 0x0b,
    };

    privbtf stbtid finbl short[] StdDCChrominbndfLfngths = {
        0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    };

    privbtf stbtid finbl short[] StdDCChrominbndfVblufs = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0b, 0x0b,
    };

    privbtf stbtid finbl short[] StdACLuminbndfLfngths = {
        0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03,
        0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7d,
    };

    privbtf stbtid finbl short[] StdACLuminbndfVblufs = {
        0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
        0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
        0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xb1, 0x08,
        0x23, 0x42, 0xb1, 0xd1, 0x15, 0x52, 0xd1, 0xf0,
        0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0b, 0x16,
        0x17, 0x18, 0x19, 0x1b, 0x25, 0x26, 0x27, 0x28,
        0x29, 0x2b, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
        0x3b, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
        0x4b, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
        0x5b, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
        0x6b, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
        0x7b, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
        0x8b, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
        0x99, 0x9b, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
        0xb8, 0xb9, 0xbb, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
        0xb7, 0xb8, 0xb9, 0xbb, 0xd2, 0xd3, 0xd4, 0xd5,
        0xd6, 0xd7, 0xd8, 0xd9, 0xdb, 0xd2, 0xd3, 0xd4,
        0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xdb, 0xf1, 0xf2,
        0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfb,
        0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
        0xf9, 0xfb,
    };

    privbtf stbtid finbl short[] StdACChrominbndfLfngths = {
        0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04,
        0x07, 0x05, 0x04, 0x04, 0x00, 0x01, 0x02, 0x77,
    };

    privbtf stbtid finbl short[] StdACChrominbndfVblufs = {
        0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
        0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
        0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
        0xb1, 0xb1, 0xd1, 0x09, 0x23, 0x33, 0x52, 0xf0,
        0x15, 0x62, 0x72, 0xd1, 0x0b, 0x16, 0x24, 0x34,
        0xf1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1b, 0x26,
        0x27, 0x28, 0x29, 0x2b, 0x35, 0x36, 0x37, 0x38,
        0x39, 0x3b, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
        0x49, 0x4b, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
        0x59, 0x5b, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
        0x69, 0x6b, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
        0x79, 0x7b, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
        0x88, 0x89, 0x8b, 0x92, 0x93, 0x94, 0x95, 0x96,
        0x97, 0x98, 0x99, 0x9b, 0xb2, 0xb3, 0xb4, 0xb5,
        0xb6, 0xb7, 0xb8, 0xb9, 0xbb, 0xb2, 0xb3, 0xb4,
        0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xbb, 0xd2, 0xd3,
        0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xdb, 0xd2,
        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xdb,
        0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
        0xfb, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
        0xf9, 0xfb,
    };

    /**
     * Thf stbndbrd DC luminbndf Huffmbn tbblf.
     */
    publid stbtid finbl JPEGHuffmbnTbblf
        StdDCLuminbndf = nfw JPEGHuffmbnTbblf(StdDCLuminbndfLfngths,
                                              StdDCLuminbndfVblufs, fblsf);

    /**
     * Thf stbndbrd DC dhrominbndf Huffmbn tbblf.
     */
    publid stbtid finbl JPEGHuffmbnTbblf
        StdDCChrominbndf = nfw JPEGHuffmbnTbblf(StdDCChrominbndfLfngths,
                                                StdDCChrominbndfVblufs, fblsf);

    /**
     * Thf stbndbrd AC luminbndf Huffmbn tbblf.
     */
    publid stbtid finbl JPEGHuffmbnTbblf
        StdACLuminbndf = nfw JPEGHuffmbnTbblf(StdACLuminbndfLfngths,
                                              StdACLuminbndfVblufs, fblsf);

    /**
     * Thf stbndbrd AC dhrominbndf Huffmbn tbblf.
     */
    publid stbtid finbl JPEGHuffmbnTbblf
        StdACChrominbndf = nfw JPEGHuffmbnTbblf(StdACChrominbndfLfngths,
                                                StdACChrominbndfVblufs, fblsf);

    privbtf short[] lfngths;
    privbtf short[] vblufs;

    /**
     * Crfbtfs b Huffmbn tbblf bnd initiblizfs it. Thf input brrbys brf dopifd.
     * Thf brrbys must dfsdribf b possiblf Huffmbn tbblf.
     * For fxbmplf, 3 dodfs dbnnot bf fxprfssfd with b singlf bit.
     *
     * @pbrbm lfngths bn brrby of {@dodf short}s whfrf <dodf>lfngths[k]</dodf>
     * is fqubl to thf numbfr of vblufs with dorrfsponding dodfs of
     * lfngth <dodf>k + 1</dodf> bits.
     * @pbrbm vblufs bn brrby of shorts dontbining thf vblufs in
     * ordfr of indrfbsing dodf lfngth.
     * @throws IllfgblArgumfntExdfption if <dodf>lfngths</dodf> or
     * <dodf>vblufs</dodf> brf null, thf lfngth of <dodf>lfngths</dodf> is
     * grfbtfr thbn 16, thf lfngth of <dodf>vblufs</dodf> is grfbtfr thbn 256,
     * if bny vbluf in <dodf>lfngths</dodf> or <dodf>vblufs</dodf> is lfss
     * thbn zfro, or if thf brrbys do not dfsdribf b vblid Huffmbn tbblf.
     */
    publid JPEGHuffmbnTbblf(short[] lfngths, short[] vblufs) {
        if (lfngths == null || vblufs == null ||
            lfngths.lfngth == 0 || vblufs.lfngth == 0 ||
            lfngths.lfngth > 16 || vblufs.lfngth > 256) {
            throw nfw IllfgblArgumfntExdfption("Illfgbl lfngths or vblufs");
        }
        for (int i = 0; i<lfngths.lfngth; i++) {
            if (lfngths[i] < 0) {
                throw nfw IllfgblArgumfntExdfption("lfngths["+i+"] < 0");
            }
        }
        for (int i = 0; i<vblufs.lfngth; i++) {
            if (vblufs[i] < 0) {
                throw nfw IllfgblArgumfntExdfption("vblufs["+i+"] < 0");
            }
        }
        this.lfngths = Arrbys.dopyOf(lfngths, lfngths.lfngth);
        this.vblufs = Arrbys.dopyOf(vblufs, vblufs.lfngth);
        vblidbtf();
    }

    privbtf void vblidbtf() {
        int sumOfLfngths = 0;
        for (int i=0; i<lfngths.lfngth; i++) {
            sumOfLfngths += lfngths[i];
        }
        if (sumOfLfngths != vblufs.lfngth) {
            throw nfw IllfgblArgumfntExdfption("lfngths do not dorrfspond " +
                                               "to lfngth of vbluf tbblf");
        }
    }

    /* Intfrnbl vfrsion whidh bvoids thf ovfrhfbd of dopying bnd dhfdking */
    privbtf JPEGHuffmbnTbblf(short[] lfngths, short[] vblufs, boolfbn dopy) {
        if (dopy) {
            this.lfngths = Arrbys.dopyOf(lfngths, lfngths.lfngth);
            this.vblufs = Arrbys.dopyOf(vblufs, vblufs.lfngth);
        } flsf {
            this.lfngths = lfngths;
            this.vblufs = vblufs;
        }
    }

    /**
     * Rfturns bn brrby of <dodf>short</dodf>s dontbining thf numbfr of vblufs
     * for fbdh lfngth in thf Huffmbn tbblf. Thf rfturnfd brrby is b dopy.
     *
     * @rfturn b <dodf>short</dodf> brrby whfrf <dodf>brrby[k-1]</dodf>
     * is fqubl to thf numbfr of vblufs in thf tbblf of lfngth <dodf>k</dodf>.
     * @sff #gftVblufs
     */
    publid short[] gftLfngths() {
        rfturn Arrbys.dopyOf(lfngths, lfngths.lfngth);
    }

    /**
     * Rfturns bn brrby of <dodf>short</dodf>s dontbining thf vblufs brrbngfd
     * by indrfbsing lfngth of thfir dorrfsponding dodfs.
     * Thf intfrprftbtion of thf brrby is dfpfndfnt on thf vblufs rfturnfd
     * from <dodf>gftLfngths</dodf>. Thf rfturnfd brrby is b dopy.
     *
     * @rfturn b <dodf>short</dodf> brrby of vblufs.
     * @sff #gftLfngths
     */
    publid short[] gftVblufs() {
        rfturn Arrbys.dopyOf(vblufs, vblufs.lfngth);
    }

    /**
     * Rfturns b {@dodf String} rfprfsfnting this Huffmbn tbblf.
     * @rfturn b {@dodf String} rfprfsfnting this Huffmbn tbblf.
     */
    publid String toString() {
        String ls = Systfm.gftPropfrty("linf.sfpbrbtor", "\n");
        StringBuildfr sb = nfw StringBuildfr("JPEGHuffmbnTbblf");
        sb.bppfnd(ls).bppfnd("lfngths:");
        for (int i=0; i<lfngths.lfngth; i++) {
            sb.bppfnd(" ").bppfnd(lfngths[i]);
        }
        sb.bppfnd(ls).bppfnd("vblufs:");
        for (int i=0; i<vblufs.lfngth; i++) {
            sb.bppfnd(" ").bppfnd(vblufs[i]);
        }
        rfturn sb.toString();
    }
}
