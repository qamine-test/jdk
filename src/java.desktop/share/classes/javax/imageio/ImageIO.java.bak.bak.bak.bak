/*
 * Copyright (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.imbgfio;

import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.RfndfrfdImbgf;
import jbvb.io.Filf;
import jbvb.io.FilfPfrmission;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.nft.URL;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtions;
import jbvb.util.HbshSft;
import jbvb.util.Itfrbtor;
import jbvb.util.NoSudhElfmfntExdfption;
import jbvb.util.Sft;
import jbvbx.imbgfio.spi.IIORfgistry;
import jbvbx.imbgfio.spi.ImbgfRfbdfrSpi;
import jbvbx.imbgfio.spi.ImbgfRfbdfrWritfrSpi;
import jbvbx.imbgfio.spi.ImbgfWritfrSpi;
import jbvbx.imbgfio.spi.ImbgfInputStrfbmSpi;
import jbvbx.imbgfio.spi.ImbgfOutputStrfbmSpi;
import jbvbx.imbgfio.spi.ImbgfTrbnsdodfrSpi;
import jbvbx.imbgfio.spi.SfrvidfRfgistry;
import jbvbx.imbgfio.strfbm.ImbgfInputStrfbm;
import jbvbx.imbgfio.strfbm.ImbgfOutputStrfbm;
import sun.bwt.AppContfxt;
import sun.sfdurity.bdtion.GftPropfrtyAdtion;

/**
 * A dlbss dontbining stbtid donvfnifndf mfthods for lodbting
 * <dodf>ImbgfRfbdfr</dodf>s bnd <dodf>ImbgfWritfr</dodf>s, bnd
 * pfrforming simplf fndoding bnd dfdoding.
 *
 */
publid finbl dlbss ImbgfIO {

    privbtf stbtid finbl IIORfgistry thfRfgistry =
        IIORfgistry.gftDffbultInstbndf();

    /**
     * Construdtor is privbtf to prfvfnt instbntibtion.
     */
    privbtf ImbgfIO() {}

    /**
     * Sdbns for plug-ins on thf bpplidbtion dlbss pbth,
     * lobds thfir sfrvidf providfr dlbssfs, bnd rfgistfrs b sfrvidf
     * providfr instbndf for fbdh onf found with thf
     * <dodf>IIORfgistry</dodf>.
     *
     * <p>This mfthod is nffdfd bfdbusf thf bpplidbtion dlbss pbth dbn
     * thforftidblly dhbngf, or bdditionbl plug-ins mby bfdomf bvbilbblf.
     * Rbthfr thbn rf-sdbnning thf dlbsspbth on fvfry invodbtion of thf
     * API, thf dlbss pbth is sdbnnfd butombtidblly only on thf first
     * invodbtion. Clifnts dbn dbll this mfthod to prompt b rf-sdbn.
     * Thus this mfthod nffd only bf invokfd by sophistidbtfd bpplidbtions
     * whidh dynbmidblly mbkf nfw plug-ins bvbilbblf bt runtimf.
     *
     * <p> Thf <dodf>gftRfsourdfs</dodf> mfthod of thf dontfxt
     * <dodf>ClbssLobdfr</dodf> is usfd lodbtf JAR filfs dontbining
     * filfs nbmfd
     * <dodf>META-INF/sfrvidfs/jbvbx.imbgfio.spi.</dodf><i>dlbssnbmf</i>,
     * whfrf <i>dlbssnbmf</i> is onf of <dodf>ImbgfRfbdfrSpi</dodf>,
     * <dodf>ImbgfWritfrSpi</dodf>, <dodf>ImbgfTrbnsdodfrSpi</dodf>,
     * <dodf>ImbgfInputStrfbmSpi</dodf>, or
     * <dodf>ImbgfOutputStrfbmSpi</dodf>, blong thf bpplidbtion dlbss
     * pbth.
     *
     * <p> Thf dontfnts of thf lodbtfd filfs indidbtf thf nbmfs of
     * bdtubl implfmfntbtion dlbssfs whidh implfmfnt thf
     * bforfmfntionfd sfrvidf providfr intfrfbdfs; thf dffbult dlbss
     * lobdfr is thfn usfd to lobd fbdh of thfsf dlbssfs bnd to
     * instbntibtf bn instbndf of fbdh dlbss, whidh is thfn plbdfd
     * into thf rfgistry for lbtfr rftrifvbl.
     *
     * <p> Thf fxbdt sft of lodbtions sfbrdhfd dfpfnds on thf
     * implfmfntbtion of thf Jbvb runtimf fnvironmfnt.
     *
     * @sff ClbssLobdfr#gftRfsourdfs
     */
    publid stbtid void sdbnForPlugins() {
        thfRfgistry.rfgistfrApplidbtionClbsspbthSpis();
    }

    // ImbgfInputStrfbms

    /**
     * A dlbss to hold informbtion bbout dbdhing.  Ebdh
     * <dodf>ThrfbdGroup</dodf> will hbvf its own dopy
     * vib thf <dodf>AppContfxt</dodf> mfdhbnism.
     */
    stbtid dlbss CbdhfInfo {
        boolfbn usfCbdhf = truf;
        Filf dbdhfDirfdtory = null;
        Boolfbn hbsPfrmission = null;

        publid CbdhfInfo() {}

        publid boolfbn gftUsfCbdhf() {
            rfturn usfCbdhf;
        }

        publid void sftUsfCbdhf(boolfbn usfCbdhf) {
            this.usfCbdhf = usfCbdhf;
        }

        publid Filf gftCbdhfDirfdtory() {
            rfturn dbdhfDirfdtory;
        }

        publid void sftCbdhfDirfdtory(Filf dbdhfDirfdtory) {
            this.dbdhfDirfdtory = dbdhfDirfdtory;
        }

        publid Boolfbn gftHbsPfrmission() {
            rfturn hbsPfrmission;
        }

        publid void sftHbsPfrmission(Boolfbn hbsPfrmission) {
            this.hbsPfrmission = hbsPfrmission;
        }
    }

    /**
     * Rfturns thf <dodf>CbdhfInfo</dodf> objfdt bssodibtfd with this
     * <dodf>ThrfbdGroup</dodf>.
     */
    privbtf stbtid syndhronizfd CbdhfInfo gftCbdhfInfo() {
        AppContfxt dontfxt = AppContfxt.gftAppContfxt();
        CbdhfInfo info = (CbdhfInfo)dontfxt.gft(CbdhfInfo.dlbss);
        if (info == null) {
            info = nfw CbdhfInfo();
            dontfxt.put(CbdhfInfo.dlbss, info);
        }
        rfturn info;
    }

    /**
     * Rfturns thf dffbult tfmporbry (dbdhf) dirfdtory bs dffinfd by thf
     * jbvb.io.tmpdir systfm propfrty.
     */
    privbtf stbtid String gftTfmpDir() {
        GftPropfrtyAdtion b = nfw GftPropfrtyAdtion("jbvb.io.tmpdir");
        rfturn AddfssControllfr.doPrivilfgfd(b);
    }

    /**
     * Dftfrminfs whfthfr thf dbllfr hbs writf bddfss to thf dbdhf
     * dirfdtory, storfs thf rfsult in thf <dodf>CbdhfInfo</dodf> objfdt,
     * bnd rfturns thf dfdision.  This mfthod hflps to prfvfnt mystfrious
     * SfdurityExdfptions to bf thrown whfn this donvfnifndf dlbss is usfd
     * in bn bpplft, for fxbmplf.
     */
    privbtf stbtid boolfbn hbsCbdhfPfrmission() {
        Boolfbn hbsPfrmission = gftCbdhfInfo().gftHbsPfrmission();

        if (hbsPfrmission != null) {
            rfturn hbsPfrmission.boolfbnVbluf();
        } flsf {
            try {
                SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
                if (sfdurity != null) {
                    Filf dbdhfdir = gftCbdhfDirfdtory();
                    String dbdhfpbth;

                    if (dbdhfdir != null) {
                        dbdhfpbth = dbdhfdir.gftPbth();
                    } flsf {
                        dbdhfpbth = gftTfmpDir();

                        if (dbdhfpbth == null || dbdhfpbth.isEmpty()) {
                            gftCbdhfInfo().sftHbsPfrmission(Boolfbn.FALSE);
                            rfturn fblsf;
                        }
                    }

                    // wf hbvf to dhfdk whfthfr wf dbn rfbd, writf,
                    // bnd dflftf dbdhf filfs.
                    // So, domposf dbdhf filf pbth bnd dhfdk it.
                    String filfpbth = dbdhfpbth;
                    if (!filfpbth.fndsWith(Filf.sfpbrbtor)) {
                        filfpbth += Filf.sfpbrbtor;
                    }
                    filfpbth += "*";

                    sfdurity.dhfdkPfrmission(nfw FilfPfrmission(filfpbth, "rfbd, writf, dflftf"));
                }
            } dbtdh (SfdurityExdfption f) {
                gftCbdhfInfo().sftHbsPfrmission(Boolfbn.FALSE);
                rfturn fblsf;
            }

            gftCbdhfInfo().sftHbsPfrmission(Boolfbn.TRUE);
            rfturn truf;
        }
    }

    /**
     * Sfts b flbg indidbting whfthfr b disk-bbsfd dbdhf filf should
     * bf usfd whfn drfbting <dodf>ImbgfInputStrfbm</dodf>s bnd
     * <dodf>ImbgfOutputStrfbm</dodf>s.
     *
     * <p> Whfn rfbding from b stbndbrd <dodf>InputStrfbm</dodf>, it
     * mby bf nfdfssbry to sbvf prfviously rfbd informbtion in b dbdhf
     * sindf thf undfrlying strfbm dofs not bllow dbtb to bf rf-rfbd.
     * Similbrly, whfn writing to b stbndbrd
     * <dodf>OutputStrfbm</dodf>, b dbdhf mby bf usfd to bllow b
     * prfviously writtfn vbluf to bf dhbngfd bfforf flushing it to
     * thf finbl dfstinbtion.
     *
     * <p> Thf dbdhf mby rfsidf in mbin mfmory or on disk.  Sftting
     * this flbg to <dodf>fblsf</dodf> disbllows thf usf of disk for
     * futurf strfbms, whidh mby bf bdvbntbgfous whfn working with
     * smbll imbgfs, bs thf ovfrhfbd of drfbting bnd dfstroying filfs
     * is rfmovfd.
     *
     * <p> On stbrtup, thf vbluf is sft to <dodf>truf</dodf>.
     *
     * @pbrbm usfCbdhf b <dodf>boolfbn</dodf> indidbting whfthfr b
     * dbdhf filf should bf usfd, in dbsfs whfrf it is optionbl.
     *
     * @sff #gftUsfCbdhf
     */
    publid stbtid void sftUsfCbdhf(boolfbn usfCbdhf) {
        gftCbdhfInfo().sftUsfCbdhf(usfCbdhf);
    }

    /**
     * Rfturns thf durrfnt vbluf sft by <dodf>sftUsfCbdhf</dodf>, or
     * <dodf>truf</dodf> if no fxplidit sftting hbs bffn mbdf.
     *
     * @rfturn truf if b disk-bbsfd dbdhf mby bf usfd for
     * <dodf>ImbgfInputStrfbm</dodf>s bnd
     * <dodf>ImbgfOutputStrfbm</dodf>s.
     *
     * @sff #sftUsfCbdhf
     */
    publid stbtid boolfbn gftUsfCbdhf() {
        rfturn gftCbdhfInfo().gftUsfCbdhf();
    }

    /**
     * Sfts thf dirfdtory whfrf dbdhf filfs brf to bf drfbtfd.  A
     * vbluf of <dodf>null</dodf> indidbtfs thbt thf systfm-dfpfndfnt
     * dffbult tfmporbry-filf dirfdtory is to bf usfd.  If
     * <dodf>gftUsfCbdhf</dodf> rfturns fblsf, this vbluf is ignorfd.
     *
     * @pbrbm dbdhfDirfdtory b <dodf>Filf</dodf> spfdifying b dirfdtory.
     *
     * @sff Filf#drfbtfTfmpFilf(String, String, Filf)
     *
     * @fxdfption SfdurityExdfption if thf sfdurity mbnbgfr dfnifs
     * bddfss to thf dirfdtory.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>dbdhfDir</dodf> is
     * non-<dodf>null</dodf> but is not b dirfdtory.
     *
     * @sff #gftCbdhfDirfdtory
     */
    publid stbtid void sftCbdhfDirfdtory(Filf dbdhfDirfdtory) {
        if ((dbdhfDirfdtory != null) && !(dbdhfDirfdtory.isDirfdtory())) {
            throw nfw IllfgblArgumfntExdfption("Not b dirfdtory!");
        }
        gftCbdhfInfo().sftCbdhfDirfdtory(dbdhfDirfdtory);
        gftCbdhfInfo().sftHbsPfrmission(null);
    }

    /**
     * Rfturns thf durrfnt vbluf sft by
     * <dodf>sftCbdhfDirfdtory</dodf>, or <dodf>null</dodf> if no
     * fxplidit sftting hbs bffn mbdf.
     *
     * @rfturn b <dodf>Filf</dodf> indidbting thf dirfdtory whfrf
     * dbdhf filfs will bf drfbtfd, or <dodf>null</dodf> to indidbtf
     * thf systfm-dfpfndfnt dffbult tfmporbry-filf dirfdtory.
     *
     * @sff #sftCbdhfDirfdtory
     */
    publid stbtid Filf gftCbdhfDirfdtory() {
        rfturn gftCbdhfInfo().gftCbdhfDirfdtory();
    }

    /**
     * Rfturns bn <dodf>ImbgfInputStrfbm</dodf> thbt will tbkf its
     * input from thf givfn <dodf>Objfdt</dodf>.  Thf sft of
     * <dodf>ImbgfInputStrfbmSpi</dodf>s rfgistfrfd with thf
     * <dodf>IIORfgistry</dodf> dlbss is qufrifd bnd thf first onf
     * thbt is bblf to tbkf input from thf supplifd objfdt is usfd to
     * drfbtf thf rfturnfd <dodf>ImbgfInputStrfbm</dodf>.  If no
     * suitbblf <dodf>ImbgfInputStrfbmSpi</dodf> fxists,
     * <dodf>null</dodf> is rfturnfd.
     *
     * <p> Thf durrfnt dbdhf sfttings from <dodf>gftUsfCbdhf</dodf>bnd
     * <dodf>gftCbdhfDirfdtory</dodf> will bf usfd to dontrol dbdhing.
     *
     * @pbrbm input bn <dodf>Objfdt</dodf> to bf usfd bs bn input
     * sourdf, sudh bs b <dodf>Filf</dodf>, rfbdbblf
     * <dodf>RbndomAddfssFilf</dodf>, or <dodf>InputStrfbm</dodf>.
     *
     * @rfturn bn <dodf>ImbgfInputStrfbm</dodf>, or <dodf>null</dodf>.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>input</dodf>
     * is <dodf>null</dodf>.
     * @fxdfption IOExdfption if b dbdhf filf is nffdfd but dbnnot bf
     * drfbtfd.
     *
     * @sff jbvbx.imbgfio.spi.ImbgfInputStrfbmSpi
     */
    publid stbtid ImbgfInputStrfbm drfbtfImbgfInputStrfbm(Objfdt input)
        throws IOExdfption {
        if (input == null) {
            throw nfw IllfgblArgumfntExdfption("input == null!");
        }

        Itfrbtor<ImbgfInputStrfbmSpi> itfr;
        // Ensurf dbtfgory is prfsfnt
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfInputStrfbmSpi.dlbss,
                                                   truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn null;
        }

        boolfbn usfdbdhf = gftUsfCbdhf() && hbsCbdhfPfrmission();

        whilf (itfr.hbsNfxt()) {
            ImbgfInputStrfbmSpi spi = itfr.nfxt();
            if (spi.gftInputClbss().isInstbndf(input)) {
                try {
                    rfturn spi.drfbtfInputStrfbmInstbndf(input,
                                                         usfdbdhf,
                                                         gftCbdhfDirfdtory());
                } dbtdh (IOExdfption f) {
                    throw nfw IIOExdfption("Cbn't drfbtf dbdhf filf!", f);
                }
            }
        }

        rfturn null;
    }

    // ImbgfOutputStrfbms

    /**
     * Rfturns bn <dodf>ImbgfOutputStrfbm</dodf> thbt will sfnd its
     * output to thf givfn <dodf>Objfdt</dodf>.  Thf sft of
     * <dodf>ImbgfOutputStrfbmSpi</dodf>s rfgistfrfd with thf
     * <dodf>IIORfgistry</dodf> dlbss is qufrifd bnd thf first onf
     * thbt is bblf to sfnd output from thf supplifd objfdt is usfd to
     * drfbtf thf rfturnfd <dodf>ImbgfOutputStrfbm</dodf>.  If no
     * suitbblf <dodf>ImbgfOutputStrfbmSpi</dodf> fxists,
     * <dodf>null</dodf> is rfturnfd.
     *
     * <p> Thf durrfnt dbdhf sfttings from <dodf>gftUsfCbdhf</dodf>bnd
     * <dodf>gftCbdhfDirfdtory</dodf> will bf usfd to dontrol dbdhing.
     *
     * @pbrbm output bn <dodf>Objfdt</dodf> to bf usfd bs bn output
     * dfstinbtion, sudh bs b <dodf>Filf</dodf>, writbblf
     * <dodf>RbndomAddfssFilf</dodf>, or <dodf>OutputStrfbm</dodf>.
     *
     * @rfturn bn <dodf>ImbgfOutputStrfbm</dodf>, or
     * <dodf>null</dodf>.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>output</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if b dbdhf filf is nffdfd but dbnnot bf
     * drfbtfd.
     *
     * @sff jbvbx.imbgfio.spi.ImbgfOutputStrfbmSpi
     */
    publid stbtid ImbgfOutputStrfbm drfbtfImbgfOutputStrfbm(Objfdt output)
        throws IOExdfption {
        if (output == null) {
            throw nfw IllfgblArgumfntExdfption("output == null!");
        }

        Itfrbtor<ImbgfOutputStrfbmSpi> itfr;
        // Ensurf dbtfgory is prfsfnt
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfOutputStrfbmSpi.dlbss,
                                                   truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn null;
        }

        boolfbn usfdbdhf = gftUsfCbdhf() && hbsCbdhfPfrmission();

        whilf (itfr.hbsNfxt()) {
            ImbgfOutputStrfbmSpi spi = itfr.nfxt();
            if (spi.gftOutputClbss().isInstbndf(output)) {
                try {
                    rfturn spi.drfbtfOutputStrfbmInstbndf(output,
                                                          usfdbdhf,
                                                          gftCbdhfDirfdtory());
                } dbtdh (IOExdfption f) {
                    throw nfw IIOExdfption("Cbn't drfbtf dbdhf filf!", f);
                }
            }
        }

        rfturn null;
    }

    privbtf stbtid fnum SpiInfo {
        FORMAT_NAMES {
            @Ovfrridf
            String[] info(ImbgfRfbdfrWritfrSpi spi) {
                rfturn spi.gftFormbtNbmfs();
            }
        },
        MIME_TYPES {
            @Ovfrridf
            String[] info(ImbgfRfbdfrWritfrSpi spi) {
                rfturn spi.gftMIMETypfs();
            }
        },
        FILE_SUFFIXES {
            @Ovfrridf
            String[] info(ImbgfRfbdfrWritfrSpi spi) {
                rfturn spi.gftFilfSuffixfs();
            }
        };

        bbstrbdt String[] info(ImbgfRfbdfrWritfrSpi spi);
    }

    privbtf stbtid <S fxtfnds ImbgfRfbdfrWritfrSpi>
        String[] gftRfbdfrWritfrInfo(Clbss<S> spiClbss, SpiInfo spiInfo)
    {
        // Ensurf dbtfgory is prfsfnt
        Itfrbtor<S> itfr;
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(spiClbss, truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn nfw String[0];
        }

        HbshSft<String> s = nfw HbshSft<String>();
        whilf (itfr.hbsNfxt()) {
            ImbgfRfbdfrWritfrSpi spi = itfr.nfxt();
            Collfdtions.bddAll(s, spiInfo.info(spi));
        }

        rfturn s.toArrby(nfw String[s.sizf()]);
    }

    // Rfbdfrs

    /**
     * Rfturns bn brrby of <dodf>String</dodf>s listing bll of thf
     * informbl formbt nbmfs undfrstood by thf durrfnt sft of rfgistfrfd
     * rfbdfrs.
     *
     * @rfturn bn brrby of <dodf>String</dodf>s.
     */
    publid stbtid String[] gftRfbdfrFormbtNbmfs() {
        rfturn gftRfbdfrWritfrInfo(ImbgfRfbdfrSpi.dlbss,
                                   SpiInfo.FORMAT_NAMES);
    }

    /**
     * Rfturns bn brrby of <dodf>String</dodf>s listing bll of thf
     * MIME typfs undfrstood by thf durrfnt sft of rfgistfrfd
     * rfbdfrs.
     *
     * @rfturn bn brrby of <dodf>String</dodf>s.
     */
    publid stbtid String[] gftRfbdfrMIMETypfs() {
        rfturn gftRfbdfrWritfrInfo(ImbgfRfbdfrSpi.dlbss,
                                   SpiInfo.MIME_TYPES);
    }

    /**
     * Rfturns bn brrby of <dodf>String</dodf>s listing bll of thf
     * filf suffixfs bssodibtfd with thf formbts undfrstood
     * by thf durrfnt sft of rfgistfrfd rfbdfrs.
     *
     * @rfturn bn brrby of <dodf>String</dodf>s.
     * @sindf 1.6
     */
    publid stbtid String[] gftRfbdfrFilfSuffixfs() {
        rfturn gftRfbdfrWritfrInfo(ImbgfRfbdfrSpi.dlbss,
                                   SpiInfo.FILE_SUFFIXES);
    }

    stbtid dlbss ImbgfRfbdfrItfrbtor implfmfnts Itfrbtor<ImbgfRfbdfr> {
        // Contbins ImbgfRfbdfrSpis
        privbtf Itfrbtor<ImbgfRfbdfrSpi> itfr;

        publid ImbgfRfbdfrItfrbtor(Itfrbtor<ImbgfRfbdfrSpi> itfr) {
            this.itfr = itfr;
        }

        publid boolfbn hbsNfxt() {
            rfturn itfr.hbsNfxt();
        }

        publid ImbgfRfbdfr nfxt() {
            ImbgfRfbdfrSpi spi = null;
            try {
                spi = itfr.nfxt();
                rfturn spi.drfbtfRfbdfrInstbndf();
            } dbtdh (IOExdfption f) {
                // Dfrfgistfr thf spi in this dbsf, but only bs
                // bn ImbgfRfbdfrSpi
                thfRfgistry.dfrfgistfrSfrvidfProvidfr(spi, ImbgfRfbdfrSpi.dlbss);
            }
            rfturn null;
        }

        publid void rfmovf() {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
    }

    stbtid dlbss CbnDfdodfInputFiltfr
        implfmfnts SfrvidfRfgistry.Filtfr {

        Objfdt input;

        publid CbnDfdodfInputFiltfr(Objfdt input) {
            this.input = input;
        }

        publid boolfbn filtfr(Objfdt flt) {
            try {
                ImbgfRfbdfrSpi spi = (ImbgfRfbdfrSpi)flt;
                ImbgfInputStrfbm strfbm = null;
                if (input instbndfof ImbgfInputStrfbm) {
                    strfbm = (ImbgfInputStrfbm)input;
                }

                // Pfrform mbrk/rfsft bs b dfffnsivf mfbsurf
                // fvfn though plug-ins brf supposfd to tbkf
                // dbrf of it.
                boolfbn dbnDfdodf = fblsf;
                if (strfbm != null) {
                    strfbm.mbrk();
                }
                dbnDfdodf = spi.dbnDfdodfInput(input);
                if (strfbm != null) {
                    strfbm.rfsft();
                }

                rfturn dbnDfdodf;
            } dbtdh (IOExdfption f) {
                rfturn fblsf;
            }
        }
    }

    stbtid dlbss CbnEndodfImbgfAndFormbtFiltfr
        implfmfnts SfrvidfRfgistry.Filtfr {

        ImbgfTypfSpfdififr typf;
        String formbtNbmf;

        publid CbnEndodfImbgfAndFormbtFiltfr(ImbgfTypfSpfdififr typf,
                                             String formbtNbmf) {
            this.typf = typf;
            this.formbtNbmf = formbtNbmf;
        }

        publid boolfbn filtfr(Objfdt flt) {
            ImbgfWritfrSpi spi = (ImbgfWritfrSpi)flt;
            rfturn Arrbys.bsList(spi.gftFormbtNbmfs()).dontbins(formbtNbmf) &&
                spi.dbnEndodfImbgf(typf);
        }
    }

    stbtid dlbss ContbinsFiltfr
        implfmfnts SfrvidfRfgistry.Filtfr {

        Mfthod mfthod;
        String nbmf;

        // mfthod rfturns bn brrby of Strings
        publid ContbinsFiltfr(Mfthod mfthod,
                              String nbmf) {
            this.mfthod = mfthod;
            this.nbmf = nbmf;
        }

        publid boolfbn filtfr(Objfdt flt) {
            try {
                rfturn dontbins((String[])mfthod.invokf(flt), nbmf);
            } dbtdh (Exdfption f) {
                rfturn fblsf;
            }
        }
    }

    /**
     * Rfturns bn <dodf>Itfrbtor</dodf> dontbining bll durrfntly
     * rfgistfrfd <dodf>ImbgfRfbdfr</dodf>s thbt dlbim to bf bblf to
     * dfdodf thf supplifd <dodf>Objfdt</dodf>, typidblly bn
     * <dodf>ImbgfInputStrfbm</dodf>.
     *
     * <p> Thf strfbm position is lfft bt its prior position upon
     * fxit from this mfthod.
     *
     * @pbrbm input bn <dodf>ImbgfInputStrfbm</dodf> or othfr
     * <dodf>Objfdt</dodf> dontbining fndodfd imbgf dbtb.
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> dontbining <dodf>ImbgfRfbdfr</dodf>s.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>input</dodf> is
     * <dodf>null</dodf>.
     *
     * @sff jbvbx.imbgfio.spi.ImbgfRfbdfrSpi#dbnDfdodfInput
     */
    publid stbtid Itfrbtor<ImbgfRfbdfr> gftImbgfRfbdfrs(Objfdt input) {
        if (input == null) {
            throw nfw IllfgblArgumfntExdfption("input == null!");
        }
        Itfrbtor<ImbgfRfbdfrSpi> itfr;
        // Ensurf dbtfgory is prfsfnt
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfRfbdfrSpi.dlbss,
                                              nfw CbnDfdodfInputFiltfr(input),
                                              truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn Collfdtions.fmptyItfrbtor();
        }

        rfturn nfw ImbgfRfbdfrItfrbtor(itfr);
    }

    privbtf stbtid Mfthod rfbdfrFormbtNbmfsMfthod;
    privbtf stbtid Mfthod rfbdfrFilfSuffixfsMfthod;
    privbtf stbtid Mfthod rfbdfrMIMETypfsMfthod;
    privbtf stbtid Mfthod writfrFormbtNbmfsMfthod;
    privbtf stbtid Mfthod writfrFilfSuffixfsMfthod;
    privbtf stbtid Mfthod writfrMIMETypfsMfthod;

    stbtid {
        try {
            rfbdfrFormbtNbmfsMfthod =
                ImbgfRfbdfrSpi.dlbss.gftMfthod("gftFormbtNbmfs");
            rfbdfrFilfSuffixfsMfthod =
                ImbgfRfbdfrSpi.dlbss.gftMfthod("gftFilfSuffixfs");
            rfbdfrMIMETypfsMfthod =
                ImbgfRfbdfrSpi.dlbss.gftMfthod("gftMIMETypfs");

            writfrFormbtNbmfsMfthod =
                ImbgfWritfrSpi.dlbss.gftMfthod("gftFormbtNbmfs");
            writfrFilfSuffixfsMfthod =
                ImbgfWritfrSpi.dlbss.gftMfthod("gftFilfSuffixfs");
            writfrMIMETypfsMfthod =
                ImbgfWritfrSpi.dlbss.gftMfthod("gftMIMETypfs");
        } dbtdh (NoSudhMfthodExdfption f) {
            f.printStbdkTrbdf();
        }
    }

    /**
     * Rfturns bn <dodf>Itfrbtor</dodf> dontbining bll durrfntly
     * rfgistfrfd <dodf>ImbgfRfbdfr</dodf>s thbt dlbim to bf bblf to
     * dfdodf thf nbmfd formbt.
     *
     * @pbrbm formbtNbmf b <dodf>String</dodf> dontbining thf informbl
     * nbmf of b formbt (<i>f.g.</i>, "jpfg" or "tiff".
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> dontbining
     * <dodf>ImbgfRfbdfr</dodf>s.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>formbtNbmf</dodf>
     * is <dodf>null</dodf>.
     *
     * @sff jbvbx.imbgfio.spi.ImbgfRfbdfrSpi#gftFormbtNbmfs
     */
    publid stbtid Itfrbtor<ImbgfRfbdfr>
        gftImbgfRfbdfrsByFormbtNbmf(String formbtNbmf)
    {
        if (formbtNbmf == null) {
            throw nfw IllfgblArgumfntExdfption("formbtNbmf == null!");
        }
        Itfrbtor<ImbgfRfbdfrSpi> itfr;
        // Ensurf dbtfgory is prfsfnt
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfRfbdfrSpi.dlbss,
                                    nfw ContbinsFiltfr(rfbdfrFormbtNbmfsMfthod,
                                                       formbtNbmf),
                                                truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn Collfdtions.fmptyItfrbtor();
        }
        rfturn nfw ImbgfRfbdfrItfrbtor(itfr);
    }

    /**
     * Rfturns bn <dodf>Itfrbtor</dodf> dontbining bll durrfntly
     * rfgistfrfd <dodf>ImbgfRfbdfr</dodf>s thbt dlbim to bf bblf to
     * dfdodf filfs with thf givfn suffix.
     *
     * @pbrbm filfSuffix b <dodf>String</dodf> dontbining b filf
     * suffix (<i>f.g.</i>, "jpg" or "tiff").
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> dontbining
     * <dodf>ImbgfRfbdfr</dodf>s.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>filfSuffix</dodf>
     * is <dodf>null</dodf>.
     *
     * @sff jbvbx.imbgfio.spi.ImbgfRfbdfrSpi#gftFilfSuffixfs
     */
    publid stbtid Itfrbtor<ImbgfRfbdfr>
        gftImbgfRfbdfrsBySuffix(String filfSuffix)
    {
        if (filfSuffix == null) {
            throw nfw IllfgblArgumfntExdfption("filfSuffix == null!");
        }
        // Ensurf dbtfgory is prfsfnt
        Itfrbtor<ImbgfRfbdfrSpi> itfr;
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfRfbdfrSpi.dlbss,
                                   nfw ContbinsFiltfr(rfbdfrFilfSuffixfsMfthod,
                                                      filfSuffix),
                                              truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn Collfdtions.fmptyItfrbtor();
        }
        rfturn nfw ImbgfRfbdfrItfrbtor(itfr);
    }

    /**
     * Rfturns bn <dodf>Itfrbtor</dodf> dontbining bll durrfntly
     * rfgistfrfd <dodf>ImbgfRfbdfr</dodf>s thbt dlbim to bf bblf to
     * dfdodf filfs with thf givfn MIME typf.
     *
     * @pbrbm MIMETypf b <dodf>String</dodf> dontbining b filf
     * suffix (<i>f.g.</i>, "imbgf/jpfg" or "imbgf/x-bmp").
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> dontbining
     * <dodf>ImbgfRfbdfr</dodf>s.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>MIMETypf</dodf> is
     * <dodf>null</dodf>.
     *
     * @sff jbvbx.imbgfio.spi.ImbgfRfbdfrSpi#gftMIMETypfs
     */
    publid stbtid Itfrbtor<ImbgfRfbdfr>
        gftImbgfRfbdfrsByMIMETypf(String MIMETypf)
    {
        if (MIMETypf == null) {
            throw nfw IllfgblArgumfntExdfption("MIMETypf == null!");
        }
        // Ensurf dbtfgory is prfsfnt
        Itfrbtor<ImbgfRfbdfrSpi> itfr;
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfRfbdfrSpi.dlbss,
                                      nfw ContbinsFiltfr(rfbdfrMIMETypfsMfthod,
                                                         MIMETypf),
                                              truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn Collfdtions.fmptyItfrbtor();
        }
        rfturn nfw ImbgfRfbdfrItfrbtor(itfr);
    }

    // Writfrs

    /**
     * Rfturns bn brrby of <dodf>String</dodf>s listing bll of thf
     * informbl formbt nbmfs undfrstood by thf durrfnt sft of rfgistfrfd
     * writfrs.
     *
     * @rfturn bn brrby of <dodf>String</dodf>s.
     */
    publid stbtid String[] gftWritfrFormbtNbmfs() {
        rfturn gftRfbdfrWritfrInfo(ImbgfWritfrSpi.dlbss,
                                   SpiInfo.FORMAT_NAMES);
    }

    /**
     * Rfturns bn brrby of <dodf>String</dodf>s listing bll of thf
     * MIME typfs undfrstood by thf durrfnt sft of rfgistfrfd
     * writfrs.
     *
     * @rfturn bn brrby of <dodf>String</dodf>s.
     */
    publid stbtid String[] gftWritfrMIMETypfs() {
        rfturn gftRfbdfrWritfrInfo(ImbgfWritfrSpi.dlbss,
                                   SpiInfo.MIME_TYPES);
    }

    /**
     * Rfturns bn brrby of <dodf>String</dodf>s listing bll of thf
     * filf suffixfs bssodibtfd with thf formbts undfrstood
     * by thf durrfnt sft of rfgistfrfd writfrs.
     *
     * @rfturn bn brrby of <dodf>String</dodf>s.
     * @sindf 1.6
     */
    publid stbtid String[] gftWritfrFilfSuffixfs() {
        rfturn gftRfbdfrWritfrInfo(ImbgfWritfrSpi.dlbss,
                                   SpiInfo.FILE_SUFFIXES);
    }

    stbtid dlbss ImbgfWritfrItfrbtor implfmfnts Itfrbtor<ImbgfWritfr> {
        // Contbins ImbgfWritfrSpis
        privbtf Itfrbtor<ImbgfWritfrSpi> itfr;

        publid ImbgfWritfrItfrbtor(Itfrbtor<ImbgfWritfrSpi> itfr) {
            this.itfr = itfr;
        }

        publid boolfbn hbsNfxt() {
            rfturn itfr.hbsNfxt();
        }

        publid ImbgfWritfr nfxt() {
            ImbgfWritfrSpi spi = null;
            try {
                spi = itfr.nfxt();
                rfturn spi.drfbtfWritfrInstbndf();
            } dbtdh (IOExdfption f) {
                // Dfrfgistfr thf spi in this dbsf, but only bs b writfrSpi
                thfRfgistry.dfrfgistfrSfrvidfProvidfr(spi, ImbgfWritfrSpi.dlbss);
            }
            rfturn null;
        }

        publid void rfmovf() {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
    }

    privbtf stbtid boolfbn dontbins(String[] nbmfs, String nbmf) {
        for (int i = 0; i < nbmfs.lfngth; i++) {
            if (nbmf.fqublsIgnorfCbsf(nbmfs[i])) {
                rfturn truf;
            }
        }

        rfturn fblsf;
    }

    /**
     * Rfturns bn <dodf>Itfrbtor</dodf> dontbining bll durrfntly
     * rfgistfrfd <dodf>ImbgfWritfr</dodf>s thbt dlbim to bf bblf to
     * fndodf thf nbmfd formbt.
     *
     * @pbrbm formbtNbmf b <dodf>String</dodf> dontbining thf informbl
     * nbmf of b formbt (<i>f.g.</i>, "jpfg" or "tiff".
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> dontbining
     * <dodf>ImbgfWritfr</dodf>s.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>formbtNbmf</dodf> is
     * <dodf>null</dodf>.
     *
     * @sff jbvbx.imbgfio.spi.ImbgfWritfrSpi#gftFormbtNbmfs
     */
    publid stbtid Itfrbtor<ImbgfWritfr>
        gftImbgfWritfrsByFormbtNbmf(String formbtNbmf)
    {
        if (formbtNbmf == null) {
            throw nfw IllfgblArgumfntExdfption("formbtNbmf == null!");
        }
        Itfrbtor<ImbgfWritfrSpi> itfr;
        // Ensurf dbtfgory is prfsfnt
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfWritfrSpi.dlbss,
                                    nfw ContbinsFiltfr(writfrFormbtNbmfsMfthod,
                                                       formbtNbmf),
                                            truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn Collfdtions.fmptyItfrbtor();
        }
        rfturn nfw ImbgfWritfrItfrbtor(itfr);
    }

    /**
     * Rfturns bn <dodf>Itfrbtor</dodf> dontbining bll durrfntly
     * rfgistfrfd <dodf>ImbgfWritfr</dodf>s thbt dlbim to bf bblf to
     * fndodf filfs with thf givfn suffix.
     *
     * @pbrbm filfSuffix b <dodf>String</dodf> dontbining b filf
     * suffix (<i>f.g.</i>, "jpg" or "tiff").
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> dontbining <dodf>ImbgfWritfr</dodf>s.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>filfSuffix</dodf> is
     * <dodf>null</dodf>.
     *
     * @sff jbvbx.imbgfio.spi.ImbgfWritfrSpi#gftFilfSuffixfs
     */
    publid stbtid Itfrbtor<ImbgfWritfr>
        gftImbgfWritfrsBySuffix(String filfSuffix)
    {
        if (filfSuffix == null) {
            throw nfw IllfgblArgumfntExdfption("filfSuffix == null!");
        }
        Itfrbtor<ImbgfWritfrSpi> itfr;
        // Ensurf dbtfgory is prfsfnt
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfWritfrSpi.dlbss,
                                   nfw ContbinsFiltfr(writfrFilfSuffixfsMfthod,
                                                      filfSuffix),
                                            truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn Collfdtions.fmptyItfrbtor();
        }
        rfturn nfw ImbgfWritfrItfrbtor(itfr);
    }

    /**
     * Rfturns bn <dodf>Itfrbtor</dodf> dontbining bll durrfntly
     * rfgistfrfd <dodf>ImbgfWritfr</dodf>s thbt dlbim to bf bblf to
     * fndodf filfs with thf givfn MIME typf.
     *
     * @pbrbm MIMETypf b <dodf>String</dodf> dontbining b filf
     * suffix (<i>f.g.</i>, "imbgf/jpfg" or "imbgf/x-bmp").
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> dontbining <dodf>ImbgfWritfr</dodf>s.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>MIMETypf</dodf> is
     * <dodf>null</dodf>.
     *
     * @sff jbvbx.imbgfio.spi.ImbgfWritfrSpi#gftMIMETypfs
     */
    publid stbtid Itfrbtor<ImbgfWritfr>
        gftImbgfWritfrsByMIMETypf(String MIMETypf)
    {
        if (MIMETypf == null) {
            throw nfw IllfgblArgumfntExdfption("MIMETypf == null!");
        }
        Itfrbtor<ImbgfWritfrSpi> itfr;
        // Ensurf dbtfgory is prfsfnt
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfWritfrSpi.dlbss,
                                      nfw ContbinsFiltfr(writfrMIMETypfsMfthod,
                                                         MIMETypf),
                                            truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn Collfdtions.fmptyItfrbtor();
        }
        rfturn nfw ImbgfWritfrItfrbtor(itfr);
    }

    /**
     * Rfturns bn <dodf>ImbgfWritfr</dodf>dorrfsponding to thf givfn
     * <dodf>ImbgfRfbdfr</dodf>, if thfrf is onf, or <dodf>null</dodf>
     * if thf plug-in for this <dodf>ImbgfRfbdfr</dodf> dofs not
     * spfdify b dorrfsponding <dodf>ImbgfWritfr</dodf>, or if thf
     * givfn <dodf>ImbgfRfbdfr</dodf> is not rfgistfrfd.  This
     * mfdhbnism mby bf usfd to obtbin bn <dodf>ImbgfWritfr</dodf>
     * thbt will undfrstbnd thf intfrnbl strudturf of non-pixfl
     * mftbdbtb (bs fndodfd by <dodf>IIOMftbdbtb</dodf> objfdts)
     * gfnfrbtfd by thf <dodf>ImbgfRfbdfr</dodf>.  By obtbining this
     * dbtb from thf <dodf>ImbgfRfbdfr</dodf> bnd pbssing it on to thf
     * <dodf>ImbgfWritfr</dodf> obtbinfd with this mfthod, b dlifnt
     * progrbm dbn rfbd bn imbgf, modify it in somf wby, bnd writf it
     * bbdk out prfsfrving bll mftbdbtb, without hbving to undfrstbnd
     * bnything bbout thf strudturf of thf mftbdbtb, or fvfn bbout
     * thf imbgf formbt.  Notf thbt this mfthod rfturns thf
     * "prfffrrfd" writfr, whidh is thf first in thf list rfturnfd by
     * <dodf>jbvbx.imbgfio.spi.ImbgfRfbdfrSpi.gftImbgfWritfrSpiNbmfs()</dodf>.
     *
     * @pbrbm rfbdfr bn instbndf of b rfgistfrfd <dodf>ImbgfRfbdfr</dodf>.
     *
     * @rfturn bn <dodf>ImbgfWritfr</dodf>, or null.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>rfbdfr</dodf> is
     * <dodf>null</dodf>.
     *
     * @sff #gftImbgfRfbdfr(ImbgfWritfr)
     * @sff jbvbx.imbgfio.spi.ImbgfRfbdfrSpi#gftImbgfWritfrSpiNbmfs()
     */
    publid stbtid ImbgfWritfr gftImbgfWritfr(ImbgfRfbdfr rfbdfr) {
        if (rfbdfr == null) {
            throw nfw IllfgblArgumfntExdfption("rfbdfr == null!");
        }

        ImbgfRfbdfrSpi rfbdfrSpi = rfbdfr.gftOriginbtingProvidfr();
        if (rfbdfrSpi == null) {
            Itfrbtor<ImbgfRfbdfrSpi> rfbdfrSpiItfr;
            // Ensurf dbtfgory is prfsfnt
            try {
                rfbdfrSpiItfr =
                    thfRfgistry.gftSfrvidfProvidfrs(ImbgfRfbdfrSpi.dlbss,
                                                    fblsf);
            } dbtdh (IllfgblArgumfntExdfption f) {
                rfturn null;
            }

            whilf (rfbdfrSpiItfr.hbsNfxt()) {
                ImbgfRfbdfrSpi tfmp = rfbdfrSpiItfr.nfxt();
                if (tfmp.isOwnRfbdfr(rfbdfr)) {
                    rfbdfrSpi = tfmp;
                    brfbk;
                }
            }
            if (rfbdfrSpi == null) {
                rfturn null;
            }
        }

        String[] writfrNbmfs = rfbdfrSpi.gftImbgfWritfrSpiNbmfs();
        if (writfrNbmfs == null) {
            rfturn null;
        }

        Clbss<?> writfrSpiClbss = null;
        try {
            writfrSpiClbss = Clbss.forNbmf(writfrNbmfs[0], truf,
                                           ClbssLobdfr.gftSystfmClbssLobdfr());
        } dbtdh (ClbssNotFoundExdfption f) {
            rfturn null;
        }

        ImbgfWritfrSpi writfrSpi = (ImbgfWritfrSpi)
            thfRfgistry.gftSfrvidfProvidfrByClbss(writfrSpiClbss);
        if (writfrSpi == null) {
            rfturn null;
        }

        try {
            rfturn writfrSpi.drfbtfWritfrInstbndf();
        } dbtdh (IOExdfption f) {
            // Dfrfgistfr thf spi in this dbsf, but only bs b writfrSpi
            thfRfgistry.dfrfgistfrSfrvidfProvidfr(writfrSpi,
                                                  ImbgfWritfrSpi.dlbss);
            rfturn null;
        }
    }

    /**
     * Rfturns bn <dodf>ImbgfRfbdfr</dodf>dorrfsponding to thf givfn
     * <dodf>ImbgfWritfr</dodf>, if thfrf is onf, or <dodf>null</dodf>
     * if thf plug-in for this <dodf>ImbgfWritfr</dodf> dofs not
     * spfdify b dorrfsponding <dodf>ImbgfRfbdfr</dodf>, or if thf
     * givfn <dodf>ImbgfWritfr</dodf> is not rfgistfrfd.  This mfthod
     * is providfd prindipblly for symmftry with
     * <dodf>gftImbgfWritfr(ImbgfRfbdfr)</dodf>.  Notf thbt this
     * mfthod rfturns thf "prfffrrfd" rfbdfr, whidh is thf first in
     * thf list rfturnfd by
     * jbvbx.imbgfio.spi.ImbgfWritfrSpi.<dodf>gftImbgfRfbdfrSpiNbmfs()</dodf>.
     *
     * @pbrbm writfr bn instbndf of b rfgistfrfd <dodf>ImbgfWritfr</dodf>.
     *
     * @rfturn bn <dodf>ImbgfRfbdfr</dodf>, or null.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>writfr</dodf> is
     * <dodf>null</dodf>.
     *
     * @sff #gftImbgfWritfr(ImbgfRfbdfr)
     * @sff jbvbx.imbgfio.spi.ImbgfWritfrSpi#gftImbgfRfbdfrSpiNbmfs()
     */
    publid stbtid ImbgfRfbdfr gftImbgfRfbdfr(ImbgfWritfr writfr) {
        if (writfr == null) {
            throw nfw IllfgblArgumfntExdfption("writfr == null!");
        }

        ImbgfWritfrSpi writfrSpi = writfr.gftOriginbtingProvidfr();
        if (writfrSpi == null) {
            Itfrbtor<ImbgfWritfrSpi> writfrSpiItfr;
            // Ensurf dbtfgory is prfsfnt
            try {
                writfrSpiItfr =
                    thfRfgistry.gftSfrvidfProvidfrs(ImbgfWritfrSpi.dlbss,
                                                    fblsf);
            } dbtdh (IllfgblArgumfntExdfption f) {
                rfturn null;
            }

            whilf (writfrSpiItfr.hbsNfxt()) {
                ImbgfWritfrSpi tfmp = writfrSpiItfr.nfxt();
                if (tfmp.isOwnWritfr(writfr)) {
                    writfrSpi = tfmp;
                    brfbk;
                }
            }
            if (writfrSpi == null) {
                rfturn null;
            }
        }

        String[] rfbdfrNbmfs = writfrSpi.gftImbgfRfbdfrSpiNbmfs();
        if (rfbdfrNbmfs == null) {
            rfturn null;
        }

        Clbss<?> rfbdfrSpiClbss = null;
        try {
            rfbdfrSpiClbss = Clbss.forNbmf(rfbdfrNbmfs[0], truf,
                                           ClbssLobdfr.gftSystfmClbssLobdfr());
        } dbtdh (ClbssNotFoundExdfption f) {
            rfturn null;
        }

        ImbgfRfbdfrSpi rfbdfrSpi = (ImbgfRfbdfrSpi)
            thfRfgistry.gftSfrvidfProvidfrByClbss(rfbdfrSpiClbss);
        if (rfbdfrSpi == null) {
            rfturn null;
        }

        try {
            rfturn rfbdfrSpi.drfbtfRfbdfrInstbndf();
        } dbtdh (IOExdfption f) {
            // Dfrfgistfr thf spi in this dbsf, but only bs b rfbdfrSpi
            thfRfgistry.dfrfgistfrSfrvidfProvidfr(rfbdfrSpi,
                                                  ImbgfRfbdfrSpi.dlbss);
            rfturn null;
        }
    }

    /**
     * Rfturns bn <dodf>Itfrbtor</dodf> dontbining bll durrfntly
     * rfgistfrfd <dodf>ImbgfWritfr</dodf>s thbt dlbim to bf bblf to
     * fndodf imbgfs of thf givfn lbyout (spfdififd using bn
     * <dodf>ImbgfTypfSpfdififr</dodf>) in thf givfn formbt.
     *
     * @pbrbm typf bn <dodf>ImbgfTypfSpfdififr</dodf> indidbting thf
     * lbyout of thf imbgf to bf writtfn.
     * @pbrbm formbtNbmf thf informbl nbmf of thf <dodf>formbt</dodf>.
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> dontbining <dodf>ImbgfWritfr</dodf>s.
     *
     * @fxdfption IllfgblArgumfntExdfption if bny pbrbmftfr is
     * <dodf>null</dodf>.
     *
     * @sff jbvbx.imbgfio.spi.ImbgfWritfrSpi#dbnEndodfImbgf(ImbgfTypfSpfdififr)
     */
    publid stbtid Itfrbtor<ImbgfWritfr>
        gftImbgfWritfrs(ImbgfTypfSpfdififr typf, String formbtNbmf)
    {
        if (typf == null) {
            throw nfw IllfgblArgumfntExdfption("typf == null!");
        }
        if (formbtNbmf == null) {
            throw nfw IllfgblArgumfntExdfption("formbtNbmf == null!");
        }

        Itfrbtor<ImbgfWritfrSpi> itfr;
        // Ensurf dbtfgory is prfsfnt
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfWritfrSpi.dlbss,
                                 nfw CbnEndodfImbgfAndFormbtFiltfr(typf,
                                                                   formbtNbmf),
                                            truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn Collfdtions.fmptyItfrbtor();
        }

        rfturn nfw ImbgfWritfrItfrbtor(itfr);
    }

    stbtid dlbss ImbgfTrbnsdodfrItfrbtor
        implfmfnts Itfrbtor<ImbgfTrbnsdodfr>
    {
        // Contbins ImbgfTrbnsdodfrSpis
        publid Itfrbtor<ImbgfTrbnsdodfrSpi> itfr;

        publid ImbgfTrbnsdodfrItfrbtor(Itfrbtor<ImbgfTrbnsdodfrSpi> itfr) {
            this.itfr = itfr;
        }

        publid boolfbn hbsNfxt() {
            rfturn itfr.hbsNfxt();
        }

        publid ImbgfTrbnsdodfr nfxt() {
            ImbgfTrbnsdodfrSpi spi = null;
            spi = itfr.nfxt();
            rfturn spi.drfbtfTrbnsdodfrInstbndf();
        }

        publid void rfmovf() {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
    }

    stbtid dlbss TrbnsdodfrFiltfr
        implfmfnts SfrvidfRfgistry.Filtfr {

        String rfbdfrSpiNbmf;
        String writfrSpiNbmf;

        publid TrbnsdodfrFiltfr(ImbgfRfbdfrSpi rfbdfrSpi,
                                ImbgfWritfrSpi writfrSpi) {
            this.rfbdfrSpiNbmf = rfbdfrSpi.gftClbss().gftNbmf();
            this.writfrSpiNbmf = writfrSpi.gftClbss().gftNbmf();
        }

        publid boolfbn filtfr(Objfdt flt) {
            ImbgfTrbnsdodfrSpi spi = (ImbgfTrbnsdodfrSpi)flt;
            String rfbdfrNbmf = spi.gftRfbdfrSfrvidfProvidfrNbmf();
            String writfrNbmf = spi.gftWritfrSfrvidfProvidfrNbmf();
            rfturn (rfbdfrNbmf.fqubls(rfbdfrSpiNbmf) &&
                    writfrNbmf.fqubls(writfrSpiNbmf));
        }
    }

    /**
     * Rfturns bn <dodf>Itfrbtor</dodf> dontbining bll durrfntly
     * rfgistfrfd <dodf>ImbgfTrbnsdodfr</dodf>s thbt dlbim to bf
     * bblf to trbnsdodf bftwffn thf mftbdbtb of thf givfn
     * <dodf>ImbgfRfbdfr</dodf> bnd <dodf>ImbgfWritfr</dodf>.
     *
     * @pbrbm rfbdfr bn <dodf>ImbgfRfbdfr</dodf>.
     * @pbrbm writfr bn <dodf>ImbgfWritfr</dodf>.
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> dontbining
     * <dodf>ImbgfTrbnsdodfr</dodf>s.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>rfbdfr</dodf> or
     * <dodf>writfr</dodf> is <dodf>null</dodf>.
     */
    publid stbtid Itfrbtor<ImbgfTrbnsdodfr>
        gftImbgfTrbnsdodfrs(ImbgfRfbdfr rfbdfr, ImbgfWritfr writfr)
    {
        if (rfbdfr == null) {
            throw nfw IllfgblArgumfntExdfption("rfbdfr == null!");
        }
        if (writfr == null) {
            throw nfw IllfgblArgumfntExdfption("writfr == null!");
        }
        ImbgfRfbdfrSpi rfbdfrSpi = rfbdfr.gftOriginbtingProvidfr();
        ImbgfWritfrSpi writfrSpi = writfr.gftOriginbtingProvidfr();
        SfrvidfRfgistry.Filtfr filtfr =
            nfw TrbnsdodfrFiltfr(rfbdfrSpi, writfrSpi);

        Itfrbtor<ImbgfTrbnsdodfrSpi> itfr;
        // Ensurf dbtfgory is prfsfnt
        try {
            itfr = thfRfgistry.gftSfrvidfProvidfrs(ImbgfTrbnsdodfrSpi.dlbss,
                                            filtfr, truf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            rfturn Collfdtions.fmptyItfrbtor();
        }
        rfturn nfw ImbgfTrbnsdodfrItfrbtor(itfr);
    }

    // All-in-onf mfthods

    /**
     * Rfturns b <dodf>BufffrfdImbgf</dodf> bs thf rfsult of dfdoding
     * b supplifd <dodf>Filf</dodf> with bn <dodf>ImbgfRfbdfr</dodf>
     * dhosfn butombtidblly from bmong thosf durrfntly rfgistfrfd.
     * Thf <dodf>Filf</dodf> is wrbppfd in bn
     * <dodf>ImbgfInputStrfbm</dodf>.  If no rfgistfrfd
     * <dodf>ImbgfRfbdfr</dodf> dlbims to bf bblf to rfbd thf
     * rfsulting strfbm, <dodf>null</dodf> is rfturnfd.
     *
     * <p> Thf durrfnt dbdhf sfttings from <dodf>gftUsfCbdhf</dodf>bnd
     * <dodf>gftCbdhfDirfdtory</dodf> will bf usfd to dontrol dbdhing in thf
     * <dodf>ImbgfInputStrfbm</dodf> thbt is drfbtfd.
     *
     * <p> Notf thbt thfrf is no <dodf>rfbd</dodf> mfthod thbt tbkfs b
     * filfnbmf bs b <dodf>String</dodf>; usf this mfthod instfbd bftfr
     * drfbting b <dodf>Filf</dodf> from thf filfnbmf.
     *
     * <p> This mfthod dofs not bttfmpt to lodbtf
     * <dodf>ImbgfRfbdfr</dodf>s thbt dbn rfbd dirfdtly from b
     * <dodf>Filf</dodf>; thbt mby bf bddomplishfd using
     * <dodf>IIORfgistry</dodf> bnd <dodf>ImbgfRfbdfrSpi</dodf>.
     *
     * @pbrbm input b <dodf>Filf</dodf> to rfbd from.
     *
     * @rfturn b <dodf>BufffrfdImbgf</dodf> dontbining thf dfdodfd
     * dontfnts of thf input, or <dodf>null</dodf>.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>input</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn frror oddurs during rfbding.
     */
    publid stbtid BufffrfdImbgf rfbd(Filf input) throws IOExdfption {
        if (input == null) {
            throw nfw IllfgblArgumfntExdfption("input == null!");
        }
        if (!input.dbnRfbd()) {
            throw nfw IIOExdfption("Cbn't rfbd input filf!");
        }

        ImbgfInputStrfbm strfbm = drfbtfImbgfInputStrfbm(input);
        if (strfbm == null) {
            throw nfw IIOExdfption("Cbn't drfbtf bn ImbgfInputStrfbm!");
        }
        BufffrfdImbgf bi = rfbd(strfbm);
        if (bi == null) {
            strfbm.dlosf();
        }
        rfturn bi;
    }

    /**
     * Rfturns b <dodf>BufffrfdImbgf</dodf> bs thf rfsult of dfdoding
     * b supplifd <dodf>InputStrfbm</dodf> with bn <dodf>ImbgfRfbdfr</dodf>
     * dhosfn butombtidblly from bmong thosf durrfntly rfgistfrfd.
     * Thf <dodf>InputStrfbm</dodf> is wrbppfd in bn
     * <dodf>ImbgfInputStrfbm</dodf>.  If no rfgistfrfd
     * <dodf>ImbgfRfbdfr</dodf> dlbims to bf bblf to rfbd thf
     * rfsulting strfbm, <dodf>null</dodf> is rfturnfd.
     *
     * <p> Thf durrfnt dbdhf sfttings from <dodf>gftUsfCbdhf</dodf>bnd
     * <dodf>gftCbdhfDirfdtory</dodf> will bf usfd to dontrol dbdhing in thf
     * <dodf>ImbgfInputStrfbm</dodf> thbt is drfbtfd.
     *
     * <p> This mfthod dofs not bttfmpt to lodbtf
     * <dodf>ImbgfRfbdfr</dodf>s thbt dbn rfbd dirfdtly from bn
     * <dodf>InputStrfbm</dodf>; thbt mby bf bddomplishfd using
     * <dodf>IIORfgistry</dodf> bnd <dodf>ImbgfRfbdfrSpi</dodf>.
     *
     * <p> This mfthod <fm>dofs not</fm> dlosf thf providfd
     * <dodf>InputStrfbm</dodf> bftfr thf rfbd opfrbtion hbs domplftfd;
     * it is thf rfsponsibility of thf dbllfr to dlosf thf strfbm, if dfsirfd.
     *
     * @pbrbm input bn <dodf>InputStrfbm</dodf> to rfbd from.
     *
     * @rfturn b <dodf>BufffrfdImbgf</dodf> dontbining thf dfdodfd
     * dontfnts of thf input, or <dodf>null</dodf>.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>input</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn frror oddurs during rfbding.
     */
    publid stbtid BufffrfdImbgf rfbd(InputStrfbm input) throws IOExdfption {
        if (input == null) {
            throw nfw IllfgblArgumfntExdfption("input == null!");
        }

        ImbgfInputStrfbm strfbm = drfbtfImbgfInputStrfbm(input);
        BufffrfdImbgf bi = rfbd(strfbm);
        if (bi == null) {
            strfbm.dlosf();
        }
        rfturn bi;
    }

    /**
     * Rfturns b <dodf>BufffrfdImbgf</dodf> bs thf rfsult of dfdoding
     * b supplifd <dodf>URL</dodf> with bn <dodf>ImbgfRfbdfr</dodf>
     * dhosfn butombtidblly from bmong thosf durrfntly rfgistfrfd.  An
     * <dodf>InputStrfbm</dodf> is obtbinfd from thf <dodf>URL</dodf>,
     * whidh is wrbppfd in bn <dodf>ImbgfInputStrfbm</dodf>.  If no
     * rfgistfrfd <dodf>ImbgfRfbdfr</dodf> dlbims to bf bblf to rfbd
     * thf rfsulting strfbm, <dodf>null</dodf> is rfturnfd.
     *
     * <p> Thf durrfnt dbdhf sfttings from <dodf>gftUsfCbdhf</dodf>bnd
     * <dodf>gftCbdhfDirfdtory</dodf> will bf usfd to dontrol dbdhing in thf
     * <dodf>ImbgfInputStrfbm</dodf> thbt is drfbtfd.
     *
     * <p> This mfthod dofs not bttfmpt to lodbtf
     * <dodf>ImbgfRfbdfr</dodf>s thbt dbn rfbd dirfdtly from b
     * <dodf>URL</dodf>; thbt mby bf bddomplishfd using
     * <dodf>IIORfgistry</dodf> bnd <dodf>ImbgfRfbdfrSpi</dodf>.
     *
     * @pbrbm input b <dodf>URL</dodf> to rfbd from.
     *
     * @rfturn b <dodf>BufffrfdImbgf</dodf> dontbining thf dfdodfd
     * dontfnts of thf input, or <dodf>null</dodf>.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>input</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn frror oddurs during rfbding.
     */
    publid stbtid BufffrfdImbgf rfbd(URL input) throws IOExdfption {
        if (input == null) {
            throw nfw IllfgblArgumfntExdfption("input == null!");
        }

        InputStrfbm istrfbm = null;
        try {
            istrfbm = input.opfnStrfbm();
        } dbtdh (IOExdfption f) {
            throw nfw IIOExdfption("Cbn't gft input strfbm from URL!", f);
        }
        ImbgfInputStrfbm strfbm = drfbtfImbgfInputStrfbm(istrfbm);
        BufffrfdImbgf bi;
        try {
            bi = rfbd(strfbm);
            if (bi == null) {
                strfbm.dlosf();
            }
        } finblly {
            istrfbm.dlosf();
        }
        rfturn bi;
    }

    /**
     * Rfturns b <dodf>BufffrfdImbgf</dodf> bs thf rfsult of dfdoding
     * b supplifd <dodf>ImbgfInputStrfbm</dodf> with bn
     * <dodf>ImbgfRfbdfr</dodf> dhosfn butombtidblly from bmong thosf
     * durrfntly rfgistfrfd.  If no rfgistfrfd
     * <dodf>ImbgfRfbdfr</dodf> dlbims to bf bblf to rfbd thf strfbm,
     * <dodf>null</dodf> is rfturnfd.
     *
     * <p> Unlikf most othfr mfthods in this dlbss, this mfthod <fm>dofs</fm>
     * dlosf thf providfd <dodf>ImbgfInputStrfbm</dodf> bftfr thf rfbd
     * opfrbtion hbs domplftfd, unlfss <dodf>null</dodf> is rfturnfd,
     * in whidh dbsf this mfthod <fm>dofs not</fm> dlosf thf strfbm.
     *
     * @pbrbm strfbm bn <dodf>ImbgfInputStrfbm</dodf> to rfbd from.
     *
     * @rfturn b <dodf>BufffrfdImbgf</dodf> dontbining thf dfdodfd
     * dontfnts of thf input, or <dodf>null</dodf>.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>strfbm</dodf> is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn frror oddurs during rfbding.
     */
    publid stbtid BufffrfdImbgf rfbd(ImbgfInputStrfbm strfbm)
        throws IOExdfption {
        if (strfbm == null) {
            throw nfw IllfgblArgumfntExdfption("strfbm == null!");
        }

        Itfrbtor<ImbgfRfbdfr> itfr = gftImbgfRfbdfrs(strfbm);
        if (!itfr.hbsNfxt()) {
            rfturn null;
        }

        ImbgfRfbdfr rfbdfr = itfr.nfxt();
        ImbgfRfbdPbrbm pbrbm = rfbdfr.gftDffbultRfbdPbrbm();
        rfbdfr.sftInput(strfbm, truf, truf);
        BufffrfdImbgf bi;
        try {
            bi = rfbdfr.rfbd(0, pbrbm);
        } finblly {
            rfbdfr.disposf();
            strfbm.dlosf();
        }
        rfturn bi;
    }

    /**
     * Writfs bn imbgf using thf bn brbitrbry <dodf>ImbgfWritfr</dodf>
     * thbt supports thf givfn formbt to bn
     * <dodf>ImbgfOutputStrfbm</dodf>.  Thf imbgf is writtfn to thf
     * <dodf>ImbgfOutputStrfbm</dodf> stbrting bt thf durrfnt strfbm
     * pointfr, ovfrwriting fxisting strfbm dbtb from thbt point
     * forwbrd, if prfsfnt.
     *
     * <p> This mfthod <fm>dofs not</fm> dlosf thf providfd
     * <dodf>ImbgfOutputStrfbm</dodf> bftfr thf writf opfrbtion hbs domplftfd;
     * it is thf rfsponsibility of thf dbllfr to dlosf thf strfbm, if dfsirfd.
     *
     * @pbrbm im b <dodf>RfndfrfdImbgf</dodf> to bf writtfn.
     * @pbrbm formbtNbmf b <dodf>String</dodf> dontbining thf informbl
     * nbmf of thf formbt.
     * @pbrbm output bn <dodf>ImbgfOutputStrfbm</dodf> to bf writtfn to.
     *
     * @rfturn <dodf>fblsf</dodf> if no bppropribtf writfr is found.
     *
     * @fxdfption IllfgblArgumfntExdfption if bny pbrbmftfr is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn frror oddurs during writing.
     */
    publid stbtid boolfbn writf(RfndfrfdImbgf im,
                                String formbtNbmf,
                                ImbgfOutputStrfbm output) throws IOExdfption {
        if (im == null) {
            throw nfw IllfgblArgumfntExdfption("im == null!");
        }
        if (formbtNbmf == null) {
            throw nfw IllfgblArgumfntExdfption("formbtNbmf == null!");
        }
        if (output == null) {
            throw nfw IllfgblArgumfntExdfption("output == null!");
        }

        rfturn doWritf(im, gftWritfr(im, formbtNbmf), output);
    }

    /**
     * Writfs bn imbgf using bn brbitrbry <dodf>ImbgfWritfr</dodf>
     * thbt supports thf givfn formbt to b <dodf>Filf</dodf>.  If
     * thfrf is blrfbdy b <dodf>Filf</dodf> prfsfnt, its dontfnts brf
     * disdbrdfd.
     *
     * @pbrbm im b <dodf>RfndfrfdImbgf</dodf> to bf writtfn.
     * @pbrbm formbtNbmf b <dodf>String</dodf> dontbining thf informbl
     * nbmf of thf formbt.
     * @pbrbm output b <dodf>Filf</dodf> to bf writtfn to.
     *
     * @rfturn <dodf>fblsf</dodf> if no bppropribtf writfr is found.
     *
     * @fxdfption IllfgblArgumfntExdfption if bny pbrbmftfr is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn frror oddurs during writing.
     */
    publid stbtid boolfbn writf(RfndfrfdImbgf im,
                                String formbtNbmf,
                                Filf output) throws IOExdfption {
        if (output == null) {
            throw nfw IllfgblArgumfntExdfption("output == null!");
        }
        ImbgfOutputStrfbm strfbm = null;

        ImbgfWritfr writfr = gftWritfr(im, formbtNbmf);
        if (writfr == null) {
            /* Do not mbkf dhbngfs in thf filf systfm if wf hbvf
             * no bppropribtf writfr.
             */
            rfturn fblsf;
        }

        try {
            output.dflftf();
            strfbm = drfbtfImbgfOutputStrfbm(output);
        } dbtdh (IOExdfption f) {
            throw nfw IIOExdfption("Cbn't drfbtf output strfbm!", f);
        }

        try {
            rfturn doWritf(im, writfr, strfbm);
        } finblly {
            strfbm.dlosf();
        }
    }

    /**
     * Writfs bn imbgf using bn brbitrbry <dodf>ImbgfWritfr</dodf>
     * thbt supports thf givfn formbt to bn <dodf>OutputStrfbm</dodf>.
     *
     * <p> This mfthod <fm>dofs not</fm> dlosf thf providfd
     * <dodf>OutputStrfbm</dodf> bftfr thf writf opfrbtion hbs domplftfd;
     * it is thf rfsponsibility of thf dbllfr to dlosf thf strfbm, if dfsirfd.
     *
     * <p> Thf durrfnt dbdhf sfttings from <dodf>gftUsfCbdhf</dodf>bnd
     * <dodf>gftCbdhfDirfdtory</dodf> will bf usfd to dontrol dbdhing.
     *
     * @pbrbm im b <dodf>RfndfrfdImbgf</dodf> to bf writtfn.
     * @pbrbm formbtNbmf b <dodf>String</dodf> dontbining thf informbl
     * nbmf of thf formbt.
     * @pbrbm output bn <dodf>OutputStrfbm</dodf> to bf writtfn to.
     *
     * @rfturn <dodf>fblsf</dodf> if no bppropribtf writfr is found.
     *
     * @fxdfption IllfgblArgumfntExdfption if bny pbrbmftfr is
     * <dodf>null</dodf>.
     * @fxdfption IOExdfption if bn frror oddurs during writing.
     */
    publid stbtid boolfbn writf(RfndfrfdImbgf im,
                                String formbtNbmf,
                                OutputStrfbm output) throws IOExdfption {
        if (output == null) {
            throw nfw IllfgblArgumfntExdfption("output == null!");
        }
        ImbgfOutputStrfbm strfbm = null;
        try {
            strfbm = drfbtfImbgfOutputStrfbm(output);
        } dbtdh (IOExdfption f) {
            throw nfw IIOExdfption("Cbn't drfbtf output strfbm!", f);
        }

        try {
            rfturn doWritf(im, gftWritfr(im, formbtNbmf), strfbm);
        } finblly {
            strfbm.dlosf();
        }
    }

    /**
     * Rfturns <dodf>ImbgfWritfr</dodf> instbndf bddording to givfn
     * rfndfrfd imbgf bnd imbgf formbt or <dodf>null</dodf> if thfrf
     * is no bppropribtf writfr.
     */
    privbtf stbtid ImbgfWritfr gftWritfr(RfndfrfdImbgf im,
                                         String formbtNbmf) {
        ImbgfTypfSpfdififr typf =
            ImbgfTypfSpfdififr.drfbtfFromRfndfrfdImbgf(im);
        Itfrbtor<ImbgfWritfr> itfr = gftImbgfWritfrs(typf, formbtNbmf);

        if (itfr.hbsNfxt()) {
            rfturn itfr.nfxt();
        } flsf {
            rfturn null;
        }
    }

    /**
     * Writfs imbgf to output strfbm  using givfn imbgf writfr.
     */
    privbtf stbtid boolfbn doWritf(RfndfrfdImbgf im, ImbgfWritfr writfr,
                                 ImbgfOutputStrfbm output) throws IOExdfption {
        if (writfr == null) {
            rfturn fblsf;
        }
        writfr.sftOutput(output);
        try {
            writfr.writf(im);
        } finblly {
            writfr.disposf();
            output.flush();
        }
        rfturn truf;
    }
}
