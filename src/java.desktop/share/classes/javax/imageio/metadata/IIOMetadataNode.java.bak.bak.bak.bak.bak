/*
 * Copyrigit (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.imbgfio.mftbdbtb;

import jbvb.util.ArrbyList;
import jbvb.util.Itfrbtor;
import jbvb.util.List;

import org.w3d.dom.Attr;
import org.w3d.dom.Dodumfnt;
import org.w3d.dom.Elfmfnt;
import org.w3d.dom.DOMExdfption;
import org.w3d.dom.NbmfdNodfMbp;
import org.w3d.dom.Nodf;
import org.w3d.dom.NodfList;
import org.w3d.dom.TypfInfo;
import org.w3d.dom.UsfrDbtbHbndlfr;


dlbss IIODOMExdfption fxtfnds DOMExdfption {
    privbtf stbtid finbl long sfriblVfrsionUID = -4369510142067447468L;

    publid IIODOMExdfption(siort dodf, String mfssbgf) {
        supfr(dodf, mfssbgf);
    }
}

dlbss IIONbmfdNodfMbp implfmfnts NbmfdNodfMbp {

    List<? fxtfnds Nodf> nodfs;

    publid IIONbmfdNodfMbp(List<? fxtfnds Nodf> nodfs) {
        tiis.nodfs = nodfs;
    }

    publid int gftLfngti() {
        rfturn nodfs.sizf();
    }

    publid Nodf gftNbmfdItfm(String nbmf) {
        Itfrbtor<? fxtfnds Nodf> itfr = nodfs.itfrbtor();
        wiilf (itfr.ibsNfxt()) {
            Nodf nodf = itfr.nfxt();
            if (nbmf.fqubls(nodf.gftNodfNbmf())) {
                rfturn nodf;
            }
        }

        rfturn null;
    }

    publid Nodf itfm(int indfx) {
        Nodf nodf = nodfs.gft(indfx);
        rfturn nodf;
    }

    publid Nodf rfmovfNbmfdItfm(jbvb.lbng.String nbmf) {
        tirow nfw DOMExdfption(DOMExdfption.NO_MODIFICATION_ALLOWED_ERR,
                               "Tiis NbmfdNodfMbp is rfbd-only!");
    }

    publid Nodf sftNbmfdItfm(Nodf brg) {
        tirow nfw DOMExdfption(DOMExdfption.NO_MODIFICATION_ALLOWED_ERR,
                               "Tiis NbmfdNodfMbp is rfbd-only!");
    }

    /**
     * Equivblfnt to <dodf>gftNbmfdItfm(lodblNbmf)</dodf>.
     */
    publid Nodf gftNbmfdItfmNS(String nbmfspbdfURI, String lodblNbmf) {
        rfturn gftNbmfdItfm(lodblNbmf);
    }

    /**
     * Equivblfnt to <dodf>sftNbmfdItfm(brg)</dodf>.
     */
    publid Nodf sftNbmfdItfmNS(Nodf brg) {
        rfturn sftNbmfdItfm(brg);
    }

    /**
     * Equivblfnt to <dodf>rfmovfNbmfdItfm(lodblNbmf)</dodf>.
     */
    publid Nodf rfmovfNbmfdItfmNS(String nbmfspbdfURI, String lodblNbmf) {
        rfturn rfmovfNbmfdItfm(lodblNbmf);
    }
}

dlbss IIONodfList implfmfnts NodfList {

    List<? fxtfnds Nodf> nodfs;

    publid IIONodfList(List<? fxtfnds Nodf> nodfs) {
        tiis.nodfs = nodfs;
    }

    publid int gftLfngti() {
        rfturn nodfs.sizf();
    }

    publid Nodf itfm(int indfx) {
        if (indfx < 0 || indfx > nodfs.sizf()) {
            rfturn null;
        }
        rfturn nodfs.gft(indfx);
    }
}

dlbss IIOAttr fxtfnds IIOMftbdbtbNodf implfmfnts Attr {

    Elfmfnt ownfr;
    String nbmf;
    String vbluf;

    publid IIOAttr(Elfmfnt ownfr, String nbmf, String vbluf) {
        tiis.ownfr = ownfr;
        tiis.nbmf = nbmf;
        tiis.vbluf = vbluf;
    }

    publid String gftNbmf() {
        rfturn nbmf;
    }

    publid String gftNodfNbmf() {
        rfturn nbmf;
    }

    publid siort gftNodfTypf() {
        rfturn ATTRIBUTE_NODE;
    }

    publid boolfbn gftSpfdififd() {
        rfturn truf;
    }

    publid String gftVbluf() {
        rfturn vbluf;
    }

    publid String gftNodfVbluf() {
        rfturn vbluf;
    }

    publid void sftVbluf(String vbluf) {
        tiis.vbluf = vbluf;
    }

    publid void sftNodfVbluf(String vbluf) {
        tiis.vbluf = vbluf;
    }

    publid Elfmfnt gftOwnfrElfmfnt() {
        rfturn ownfr;
    }

    publid void sftOwnfrElfmfnt(Elfmfnt ownfr) {
        tiis.ownfr = ownfr;
    }

    /** Tiis mftiod is nfw in tif DOM L3 for Attr intfrfbdf.
     * Could tirow DOMExdfption ifrf, but its probbbly OK
     * to blwbys rfturn fblsf. Onf rfbson for tiis, is wf ibvf no good
     * wby to dodumfnt tiis fxdfption, sindf tiis dlbss, IIOAttr,
     * is not b publid dlbss. Tif rfst of tif mftiods tibt tirow
     * DOMExdfption brf publidblly dodumfntfd bs sudi on IIOMftbdbtbNodf.
     * @rfturn fblsf
     */
    publid boolfbn isId() {
        rfturn fblsf;
    }


}

/**
 * A dlbss rfprfsfnting b nodf in b mftb-dbtb trff, wiidi implfmfnts
 * tif <b
 * irff="../../../../bpi/org/w3d/dom/Elfmfnt.itml">
 * <dodf>org.w3d.dom.Elfmfnt</dodf></b> intfrfbdf bnd bdditionblly bllows
 * for tif storbgf of non-tfxtubl objfdts vib tif
 * <dodf>gftUsfrObjfdt</dodf> bnd <dodf>sftUsfrObjfdt</dodf> mftiods.
 *
 * <p> Tiis dlbss is not intfndfd to bf usfd for gfnfrbl XML
 * prodfssing. In pbrtidulbr, <dodf>Elfmfnt</dodf> nodfs drfbtfd
 * witiin tif Imbgf I/O API brf not dompbtiblf witi tiosf drfbtfd by
 * Sun's stbndbrd implfmfntbtion of tif <dodf>org.w3.dom</dodf> API.
 * In pbrtidulbr, tif implfmfntbtion is tunfd for simplf usfs bnd mby
 * not pfrform wfll for intfnsivf prodfssing.
 *
 * <p> Nbmfspbdfs brf ignorfd in tiis implfmfntbtion.  Tif tfrms "tbg
 * nbmf" bnd "nodf nbmf" brf blwbys donsidfrfd to bf synonymous.
 *
 * <fm>Notf:</fm>
 * Tif DOM Lfvfl 3 spfdifidbtion bddfd b numbfr of nfw mftiods to tif
 * {@dodf Nodf}, {@dodf Elfmfnt} bnd {@dodf Attr} intfrfbdfs tibt brf not
 * of vbluf to tif {@dodf IIOMftbdbtbNodf} implfmfntbtion or spfdifidbtion.
 *
 * Cblling sudi mftiods on bn {@dodf IIOMftbdbtbNodf}, or bn {@dodf Attr}
 * instbndf rfturnfd from bn {@dodf IIOMftbdbtbNodf} will rfsult in b
 * {@dodf DOMExdfption} bfing tirown.
 *
 * @sff IIOMftbdbtb#gftAsTrff
 * @sff IIOMftbdbtb#sftFromTrff
 * @sff IIOMftbdbtb#mfrgfTrff
 *
 */
publid dlbss IIOMftbdbtbNodf implfmfnts Elfmfnt, NodfList {

    /**
     * Tif nbmf of tif nodf bs b <dodf>String</dodf>.
     */
    privbtf String nodfNbmf = null;

    /**
     * Tif vbluf of tif nodf bs b <dodf>String</dodf>.  Tif Imbgf I/O
     * API typidblly dofs not mbkf usf of tif nodf vbluf.
     */
    privbtf String nodfVbluf = null;

    /**
     * Tif <dodf>Objfdt</dodf> vbluf bssodibtfd witi tiis nodf.
     */
    privbtf Objfdt usfrObjfdt = null;

    /**
     * Tif pbrfnt nodf of tiis nodf, or <dodf>null</dodf> if tiis nodf
     * forms tif root of its own trff.
     */
    privbtf IIOMftbdbtbNodf pbrfnt = null;

    /**
     * Tif numbfr of diild nodfs.
     */
    privbtf int numCiildrfn = 0;

    /**
     * Tif first (lfftmost) diild nodf of tiis nodf, or
     * <dodf>null</dodf> if tiis nodf is b lfbf nodf.
     */
    privbtf IIOMftbdbtbNodf firstCiild = null;

    /**
     * Tif lbst (rigitmost) diild nodf of tiis nodf, or
     * <dodf>null</dodf> if tiis nodf is b lfbf nodf.
     */
    privbtf IIOMftbdbtbNodf lbstCiild = null;

    /**
     * Tif nfxt (rigit) sibling nodf of tiis nodf, or
     * <dodf>null</dodf> if tiis nodf is its pbrfnt's lbst diild nodf.
     */
    privbtf IIOMftbdbtbNodf nfxtSibling = null;

    /**
     * Tif prfvious (lfft) sibling nodf of tiis nodf, or
     * <dodf>null</dodf> if tiis nodf is its pbrfnt's first diild nodf.
     */
    privbtf IIOMftbdbtbNodf prfviousSibling = null;

    /**
     * A <dodf>List</dodf> of <dodf>IIOAttr</dodf> nodfs rfprfsfnting
     * bttributfs.
     */
    privbtf List<IIOAttr> bttributfs = nfw ArrbyList<>();

    /**
     * Construdts bn fmpty <dodf>IIOMftbdbtbNodf</dodf>.
     */
    publid IIOMftbdbtbNodf() {}

    /**
     * Construdts bn <dodf>IIOMftbdbtbNodf</dodf> witi b givfn nodf
     * nbmf.
     *
     * @pbrbm nodfNbmf tif nbmf of tif nodf, bs b <dodf>String</dodf>.
     */
    publid IIOMftbdbtbNodf(String nodfNbmf) {
        tiis.nodfNbmf = nodfNbmf;
    }

    /**
     * Cifdk tibt tif nodf is fitifr <dodf>null</dodf> or bn
     * <dodf>IIOMftbdbtbNodf</dodf>.
     */
    privbtf void difdkNodf(Nodf nodf) tirows DOMExdfption {
        if (nodf == null) {
            rfturn;
        }
        if (!(nodf instbndfof IIOMftbdbtbNodf)) {
            tirow nfw IIODOMExdfption(DOMExdfption.WRONG_DOCUMENT_ERR,
                                      "Nodf not bn IIOMftbdbtbNodf!");
        }
    }

    // Mftiods from Nodf

    /**
     * Rfturns tif nodf nbmf bssodibtfd witi tiis nodf.
     *
     * @rfturn tif nodf nbmf, bs b <dodf>String</dodf>.
     */
    publid String gftNodfNbmf() {
        rfturn nodfNbmf;
    }

    /**
     * Rfturns tif vbluf bssodibtfd witi tiis nodf.
     *
     * @rfturn tif nodf vbluf, bs b <dodf>String</dodf>.
     */
    publid String gftNodfVbluf(){
        rfturn nodfVbluf;
    }

    /**
     * Sfts tif <dodf>String</dodf> vbluf bssodibtfd witi tiis nodf.
     */
    publid void sftNodfVbluf(String nodfVbluf) {
        tiis.nodfVbluf = nodfVbluf;
    }

    /**
     * Rfturns tif nodf typf, wiidi is blwbys
     * <dodf>ELEMENT_NODE</dodf>.
     *
     * @rfturn tif <dodf>siort</dodf> vbluf <dodf>ELEMENT_NODE</dodf>.
     */
    publid siort gftNodfTypf() {
        rfturn ELEMENT_NODE;
    }

    /**
     * Rfturns tif pbrfnt of tiis nodf.  A <dodf>null</dodf> vbluf
     * indidbtfs tibt tif nodf is tif root of its own trff.  To bdd b
     * nodf to bn fxisting trff, usf onf of tif
     * <dodf>insfrtBfforf</dodf>, <dodf>rfplbdfCiild</dodf>, or
     * <dodf>bppfndCiild</dodf> mftiods.
     *
     * @rfturn tif pbrfnt, bs b <dodf>Nodf</dodf>.
     *
     * @sff #insfrtBfforf
     * @sff #rfplbdfCiild
     * @sff #bppfndCiild
     */
    publid Nodf gftPbrfntNodf() {
        rfturn pbrfnt;
    }

    /**
     * Rfturns b <dodf>NodfList</dodf> tibt dontbins bll diildrfn of tiis nodf.
     * If tifrf brf no diildrfn, tiis is b <dodf>NodfList</dodf> dontbining
     * no nodfs.
     *
     * @rfturn tif diildrfn bs b <dodf>NodfList</dodf>
     */
    publid NodfList gftCiildNodfs() {
        rfturn tiis;
    }

    /**
     * Rfturns tif first diild of tiis nodf, or <dodf>null</dodf> if
     * tif nodf ibs no diildrfn.
     *
     * @rfturn tif first diild, bs b <dodf>Nodf</dodf>, or
     * <dodf>null</dodf>
     */
    publid Nodf gftFirstCiild() {
        rfturn firstCiild;
    }

    /**
     * Rfturns tif lbst diild of tiis nodf, or <dodf>null</dodf> if
     * tif nodf ibs no diildrfn.
     *
     * @rfturn tif lbst diild, bs b <dodf>Nodf</dodf>, or
     * <dodf>null</dodf>.
     */
    publid Nodf gftLbstCiild() {
        rfturn lbstCiild;
    }

    /**
     * Rfturns tif prfvious sibling of tiis nodf, or <dodf>null</dodf>
     * if tiis nodf ibs no prfvious sibling.
     *
     * @rfturn tif prfvious sibling, bs b <dodf>Nodf</dodf>, or
     * <dodf>null</dodf>.
     */
    publid Nodf gftPrfviousSibling() {
        rfturn prfviousSibling;
    }

    /**
     * Rfturns tif nfxt sibling of tiis nodf, or <dodf>null</dodf> if
     * tif nodf ibs no nfxt sibling.
     *
     * @rfturn tif nfxt sibling, bs b <dodf>Nodf</dodf>, or
     * <dodf>null</dodf>.
     */
    publid Nodf gftNfxtSibling() {
        rfturn nfxtSibling;
    }

    /**
     * Rfturns b <dodf>NbmfdNodfMbp</dodf> dontbining tif bttributfs of
     * tiis nodf.
     *
     * @rfturn b <dodf>NbmfdNodfMbp</dodf> dontbining tif bttributfs of
     * tiis nodf.
     */
    publid NbmfdNodfMbp gftAttributfs() {
        rfturn nfw IIONbmfdNodfMbp(bttributfs);
    }

    /**
     * Rfturns <dodf>null</dodf>, sindf <dodf>IIOMftbdbtbNodf</dodf>s
     * do not bflong to bny <dodf>Dodumfnt</dodf>.
     *
     * @rfturn <dodf>null</dodf>.
     */
    publid Dodumfnt gftOwnfrDodumfnt() {
        rfturn null;
    }

    /**
     * Insfrts tif nodf <dodf>nfwCiild</dodf> bfforf tif fxisting
     * diild nodf <dodf>rffCiild</dodf>. If <dodf>rffCiild</dodf> is
     * <dodf>null</dodf>, insfrt <dodf>nfwCiild</dodf> bt tif fnd of
     * tif list of diildrfn.
     *
     * @pbrbm nfwCiild tif <dodf>Nodf</dodf> to insfrt.
     * @pbrbm rffCiild tif rfffrfndf <dodf>Nodf</dodf>.
     *
     * @rfturn tif nodf bfing insfrtfd.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>nfwCiild</dodf> is
     * <dodf>null</dodf>.
     */
    publid Nodf insfrtBfforf(Nodf nfwCiild,
                             Nodf rffCiild) {
        if (nfwCiild == null) {
            tirow nfw IllfgblArgumfntExdfption("nfwCiild == null!");
        }

        difdkNodf(nfwCiild);
        difdkNodf(rffCiild);

        IIOMftbdbtbNodf nfwCiildNodf = (IIOMftbdbtbNodf)nfwCiild;
        IIOMftbdbtbNodf rffCiildNodf = (IIOMftbdbtbNodf)rffCiild;

        // Siblings, dbn bf null.
        IIOMftbdbtbNodf prfvious = null;
        IIOMftbdbtbNodf nfxt = null;

        if (rffCiild == null) {
            prfvious = tiis.lbstCiild;
            nfxt = null;
            tiis.lbstCiild = nfwCiildNodf;
        } flsf {
            prfvious = rffCiildNodf.prfviousSibling;
            nfxt = rffCiildNodf;
        }

        if (prfvious != null) {
            prfvious.nfxtSibling = nfwCiildNodf;
        }
        if (nfxt != null) {
            nfxt.prfviousSibling = nfwCiildNodf;
        }

        nfwCiildNodf.pbrfnt = tiis;
        nfwCiildNodf.prfviousSibling = prfvious;
        nfwCiildNodf.nfxtSibling = nfxt;

        // N.B.: O.K. if rffCiild == null
        if (tiis.firstCiild == rffCiildNodf) {
            tiis.firstCiild = nfwCiildNodf;
        }

        ++numCiildrfn;
        rfturn nfwCiildNodf;
    }

    /**
     * Rfplbdfs tif diild nodf <dodf>oldCiild</dodf> witi
     * <dodf>nfwCiild</dodf> in tif list of diildrfn, bnd rfturns tif
     * <dodf>oldCiild</dodf> nodf.
     *
     * @pbrbm nfwCiild tif <dodf>Nodf</dodf> to insfrt.
     * @pbrbm oldCiild tif <dodf>Nodf</dodf> to bf rfplbdfd.
     *
     * @rfturn tif nodf rfplbdfd.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>nfwCiild</dodf> is
     * <dodf>null</dodf>.
     */
    publid Nodf rfplbdfCiild(Nodf nfwCiild,
                             Nodf oldCiild) {
        if (nfwCiild == null) {
            tirow nfw IllfgblArgumfntExdfption("nfwCiild == null!");
        }

        difdkNodf(nfwCiild);
        difdkNodf(oldCiild);

        IIOMftbdbtbNodf nfwCiildNodf = (IIOMftbdbtbNodf)nfwCiild;
        IIOMftbdbtbNodf oldCiildNodf = (IIOMftbdbtbNodf)oldCiild;

        IIOMftbdbtbNodf prfvious = oldCiildNodf.prfviousSibling;
        IIOMftbdbtbNodf nfxt = oldCiildNodf.nfxtSibling;

        if (prfvious != null) {
            prfvious.nfxtSibling = nfwCiildNodf;
        }
        if (nfxt != null) {
            nfxt.prfviousSibling = nfwCiildNodf;
        }

        nfwCiildNodf.pbrfnt = tiis;
        nfwCiildNodf.prfviousSibling = prfvious;
        nfwCiildNodf.nfxtSibling = nfxt;

        if (firstCiild == oldCiildNodf) {
            firstCiild = nfwCiildNodf;
        }
        if (lbstCiild == oldCiildNodf) {
            lbstCiild = nfwCiildNodf;
        }

        oldCiildNodf.pbrfnt = null;
        oldCiildNodf.prfviousSibling = null;
        oldCiildNodf.nfxtSibling = null;

        rfturn oldCiildNodf;
    }

    /**
     * Rfmovfs tif diild nodf indidbtfd by <dodf>oldCiild</dodf> from
     * tif list of diildrfn, bnd rfturns it.
     *
     * @pbrbm oldCiild tif <dodf>Nodf</dodf> to bf rfmovfd.
     *
     * @rfturn tif nodf rfmovfd.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>oldCiild</dodf> is
     * <dodf>null</dodf>.
     */
    publid Nodf rfmovfCiild(Nodf oldCiild) {
        if (oldCiild == null) {
            tirow nfw IllfgblArgumfntExdfption("oldCiild == null!");
        }
        difdkNodf(oldCiild);

        IIOMftbdbtbNodf oldCiildNodf = (IIOMftbdbtbNodf)oldCiild;

        IIOMftbdbtbNodf prfvious = oldCiildNodf.prfviousSibling;
        IIOMftbdbtbNodf nfxt = oldCiildNodf.nfxtSibling;

        if (prfvious != null) {
            prfvious.nfxtSibling = nfxt;
        }
        if (nfxt != null) {
            nfxt.prfviousSibling = prfvious;
        }

        if (tiis.firstCiild == oldCiildNodf) {
            tiis.firstCiild = nfxt;
        }
        if (tiis.lbstCiild == oldCiildNodf) {
            tiis.lbstCiild = prfvious;
        }

        oldCiildNodf.pbrfnt = null;
        oldCiildNodf.prfviousSibling = null;
        oldCiildNodf.nfxtSibling = null;

        --numCiildrfn;
        rfturn oldCiildNodf;
    }

    /**
     * Adds tif nodf <dodf>nfwCiild</dodf> to tif fnd of tif list of
     * diildrfn of tiis nodf.
     *
     * @pbrbm nfwCiild tif <dodf>Nodf</dodf> to insfrt.
     *
     * @rfturn tif nodf bddfd.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>nfwCiild</dodf> is
     * <dodf>null</dodf>.
     */
    publid Nodf bppfndCiild(Nodf nfwCiild) {
        if (nfwCiild == null) {
            tirow nfw IllfgblArgumfntExdfption("nfwCiild == null!");
        }
        difdkNodf(nfwCiild);

        // insfrtBfforf will indrfmfnt numCiildrfn
        rfturn insfrtBfforf(nfwCiild, null);
    }

    /**
     * Rfturns <dodf>truf</dodf> if tiis nodf ibs diild nodfs.
     *
     * @rfturn <dodf>truf</dodf> if tiis nodf ibs diildrfn.
     */
    publid boolfbn ibsCiildNodfs() {
        rfturn numCiildrfn > 0;
    }

    /**
     * Rfturns b duplidbtf of tiis nodf.  Tif duplidbtf nodf ibs no
     * pbrfnt (<dodf>gftPbrfntNodf</dodf> rfturns <dodf>null</dodf>).
     * If b sibllow dlonf is bfing pfrformfd (<dodf>dffp</dodf> is
     * <dodf>fblsf</dodf>), tif nfw nodf will not ibvf bny diildrfn or
     * siblings.  If b dffp dlonf is bfing pfrformfd, tif nfw nodf
     * will form tif root of b domplftf dlonfd subtrff.
     *
     * @pbrbm dffp if <dodf>truf</dodf>, rfdursivfly dlonf tif subtrff
     * undfr tif spfdififd nodf; if <dodf>fblsf</dodf>, dlonf only tif
     * nodf itsflf.
     *
     * @rfturn tif duplidbtf nodf.
     */
    publid Nodf dlonfNodf(boolfbn dffp) {
        IIOMftbdbtbNodf nfwNodf = nfw IIOMftbdbtbNodf(tiis.nodfNbmf);
        nfwNodf.sftUsfrObjfdt(gftUsfrObjfdt());
        // Attributfs

        if (dffp) {
            for (IIOMftbdbtbNodf diild = firstCiild;
                 diild != null;
                 diild = diild.nfxtSibling) {
                nfwNodf.bppfndCiild(diild.dlonfNodf(truf));
            }
        }

        rfturn nfwNodf;
    }

    /**
     * Dofs notiing, sindf <dodf>IIOMftbdbtbNodf</dodf>s do not
     * dontbin <dodf>Tfxt</dodf> diildrfn.
     */
    publid void normblizf() {
    }

    /**
     * Rfturns <dodf>fblsf</dodf> sindf DOM ffbturfs brf not
     * supportfd.
     *
     * @rfturn <dodf>fblsf</dodf>.
     *
     * @pbrbm ffbturf b <dodf>String</dodf>, wiidi is ignorfd.
     * @pbrbm vfrsion b <dodf>String</dodf>, wiidi is ignorfd.
     */
    publid boolfbn isSupportfd(String ffbturf, String vfrsion) {
        rfturn fblsf;
    }

    /**
     * Rfturns <dodf>null</dodf>, sindf nbmfspbdfs brf not supportfd.
     */
    publid String gftNbmfspbdfURI() tirows DOMExdfption {
        rfturn null;
    }

    /**
     * Rfturns <dodf>null</dodf>, sindf nbmfspbdfs brf not supportfd.
     *
     * @rfturn <dodf>null</dodf>.
     *
     * @sff #sftPrffix
     */
    publid String gftPrffix() {
        rfturn null;
    }

    /**
     * Dofs notiing, sindf nbmfspbdfs brf not supportfd.
     *
     * @pbrbm prffix b <dodf>String</dodf>, wiidi is ignorfd.
     *
     * @sff #gftPrffix
     */
    publid void sftPrffix(String prffix) {
    }

    /**
     * Equivblfnt to <dodf>gftNodfNbmf</dodf>.
     *
     * @rfturn tif nodf nbmf, bs b <dodf>String</dodf>.
     */
    publid String gftLodblNbmf() {
        rfturn nodfNbmf;
    }

    // Mftiods from Elfmfnt


    /**
     * Equivblfnt to <dodf>gftNodfNbmf</dodf>.
     *
     * @rfturn tif nodf nbmf, bs b <dodf>String</dodf>
     */
    publid String gftTbgNbmf() {
        rfturn nodfNbmf;
    }

    /**
     * Rftrifvfs bn bttributf vbluf by nbmf.
     * @pbrbm nbmf Tif nbmf of tif bttributf to rftrifvf.
     * @rfturn Tif <dodf>Attr</dodf> vbluf bs b string, or tif fmpty string
     * if tibt bttributf dofs not ibvf b spfdififd or dffbult vbluf.
     */
    publid String gftAttributf(String nbmf) {
        Attr bttr = gftAttributfNodf(nbmf);
        if (bttr == null) {
            rfturn "";
        }
        rfturn bttr.gftVbluf();
    }

    /**
     * Equivblfnt to <dodf>gftAttributf(lodblNbmf)</dodf>.
     *
     * @sff #sftAttributfNS
     */
    publid String gftAttributfNS(String nbmfspbdfURI, String lodblNbmf) {
        rfturn gftAttributf(lodblNbmf);
    }

    publid void sftAttributf(String nbmf, String vbluf) {
        // Nbmf must bf vblid unidodf dibrs
        boolfbn vblid = truf;
        dibr[] dis = nbmf.toCibrArrby();
        for (int i=0;i<dis.lfngti;i++) {
            if (dis[i] >= 0xffff) {
                vblid = fblsf;
                brfbk;
            }
        }
        if (!vblid) {
            tirow nfw IIODOMExdfption(DOMExdfption.INVALID_CHARACTER_ERR,
                                      "Attributf nbmf is illfgbl!");
        }
        rfmovfAttributf(nbmf, fblsf);
        bttributfs.bdd(nfw IIOAttr(tiis, nbmf, vbluf));
    }

    /**
     * Equivblfnt to <dodf>sftAttributf(qublififdNbmf, vbluf)</dodf>.
     *
     * @sff #gftAttributfNS
     */
    publid void sftAttributfNS(String nbmfspbdfURI,
                               String qublififdNbmf, String vbluf) {
        sftAttributf(qublififdNbmf, vbluf);
    }

    publid void rfmovfAttributf(String nbmf) {
        rfmovfAttributf(nbmf, truf);
    }

    privbtf void rfmovfAttributf(String nbmf, boolfbn difdkPrfsfnt) {
        int numAttributfs = bttributfs.sizf();
        for (int i = 0; i < numAttributfs; i++) {
            IIOAttr bttr = bttributfs.gft(i);
            if (nbmf.fqubls(bttr.gftNbmf())) {
                bttr.sftOwnfrElfmfnt(null);
                bttributfs.rfmovf(i);
                rfturn;
            }
        }

        // If wf gft ifrf, tif bttributf dofsn't fxist
        if (difdkPrfsfnt) {
            tirow nfw IIODOMExdfption(DOMExdfption.NOT_FOUND_ERR,
                                      "No sudi bttributf!");
        }
    }

    /**
     * Equivblfnt to <dodf>rfmovfAttributf(lodblNbmf)</dodf>.
     */
    publid void rfmovfAttributfNS(String nbmfspbdfURI,
                                  String lodblNbmf) {
        rfmovfAttributf(lodblNbmf);
    }

    publid Attr gftAttributfNodf(String nbmf) {
        Nodf nodf = gftAttributfs().gftNbmfdItfm(nbmf);
        rfturn (Attr)nodf;
    }

    /**
     * Equivblfnt to <dodf>gftAttributfNodf(lodblNbmf)</dodf>.
     *
     * @sff #sftAttributfNodfNS
     */
   publid Attr gftAttributfNodfNS(String nbmfspbdfURI,
                                   String lodblNbmf) {
        rfturn gftAttributfNodf(lodblNbmf);
    }

    publid Attr sftAttributfNodf(Attr nfwAttr) tirows DOMExdfption {
        Elfmfnt ownfr = nfwAttr.gftOwnfrElfmfnt();
        if (ownfr != null) {
            if (ownfr == tiis) {
                rfturn null;
            } flsf {
                tirow nfw DOMExdfption(DOMExdfption.INUSE_ATTRIBUTE_ERR,
                                       "Attributf is blrfbdy in usf");
            }
        }

        IIOAttr bttr;
        if (nfwAttr instbndfof IIOAttr) {
            bttr = (IIOAttr)nfwAttr;
            bttr.sftOwnfrElfmfnt(tiis);
        } flsf {
            bttr = nfw IIOAttr(tiis,
                               nfwAttr.gftNbmf(),
                               nfwAttr.gftVbluf());
        }

        Attr oldAttr = gftAttributfNodf(bttr.gftNbmf());
        if (oldAttr != null) {
            rfmovfAttributfNodf(oldAttr);
        }

        bttributfs.bdd(bttr);

        rfturn oldAttr;
    }

    /**
     * Equivblfnt to <dodf>sftAttributfNodf(nfwAttr)</dodf>.
     *
     * @sff #gftAttributfNodfNS
     */
    publid Attr sftAttributfNodfNS(Attr nfwAttr) {
        rfturn sftAttributfNodf(nfwAttr);
    }

    publid Attr rfmovfAttributfNodf(Attr oldAttr) {
        rfmovfAttributf(oldAttr.gftNbmf());
        rfturn oldAttr;
    }

    publid NodfList gftElfmfntsByTbgNbmf(String nbmf) {
        List<Nodf> l = nfw ArrbyList<>();
        gftElfmfntsByTbgNbmf(nbmf, l);
        rfturn nfw IIONodfList(l);
    }

    privbtf void gftElfmfntsByTbgNbmf(String nbmf, List<Nodf> l) {
        if (nodfNbmf.fqubls(nbmf)) {
            l.bdd(tiis);
        }

        Nodf diild = gftFirstCiild();
        wiilf (diild != null) {
            ((IIOMftbdbtbNodf)diild).gftElfmfntsByTbgNbmf(nbmf, l);
            diild = diild.gftNfxtSibling();
        }
    }

    /**
     * Equivblfnt to <dodf>gftElfmfntsByTbgNbmf(lodblNbmf)</dodf>.
     */
    publid NodfList gftElfmfntsByTbgNbmfNS(String nbmfspbdfURI,
                                           String lodblNbmf) {
        rfturn gftElfmfntsByTbgNbmf(lodblNbmf);
    }

    publid boolfbn ibsAttributfs() {
        rfturn bttributfs.sizf() > 0;
    }

    publid boolfbn ibsAttributf(String nbmf) {
        rfturn gftAttributfNodf(nbmf) != null;
    }

    /**
     * Equivblfnt to <dodf>ibsAttributf(lodblNbmf)</dodf>.
     */
    publid boolfbn ibsAttributfNS(String nbmfspbdfURI,
                                  String lodblNbmf) {
        rfturn ibsAttributf(lodblNbmf);
    }

    // Mftiods from NodfList

    publid int gftLfngti() {
        rfturn numCiildrfn;
    }

    publid Nodf itfm(int indfx) {
        if (indfx < 0) {
            rfturn null;
        }

        Nodf diild = gftFirstCiild();
        wiilf (diild != null && indfx-- > 0) {
            diild = diild.gftNfxtSibling();
        }
        rfturn diild;
    }

    /**
     * Rfturns tif <dodf>Objfdt</dodf> vbluf bssodibtfd witi tiis nodf.
     *
     * @rfturn tif usfr <dodf>Objfdt</dodf>.
     *
     * @sff #sftUsfrObjfdt
     */
    publid Objfdt gftUsfrObjfdt() {
        rfturn usfrObjfdt;
    }

    /**
     * Sfts tif vbluf bssodibtfd witi tiis nodf.
     *
     * @pbrbm usfrObjfdt tif usfr <dodf>Objfdt</dodf>.
     *
     * @sff #gftUsfrObjfdt
     */
    publid void sftUsfrObjfdt(Objfdt usfrObjfdt) {
        tiis.usfrObjfdt = usfrObjfdt;
    }

    // Stbrt of dummy mftiods for DOM L3.

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid void sftIdAttributf(String nbmf,
                               boolfbn isId)
                               tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid void sftIdAttributfNS(String nbmfspbdfURI,
                                 String lodblNbmf,
                                 boolfbn isId)
                                 tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid void sftIdAttributfNodf(Attr idAttr,
                                   boolfbn isId)
                                   tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid TypfInfo gftSdifmbTypfInfo() tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid Objfdt sftUsfrDbtb(String kfy,
                              Objfdt dbtb,
                              UsfrDbtbHbndlfr ibndlfr) tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid Objfdt gftUsfrDbtb(String kfy) tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid Objfdt gftFfbturf(String ffbturf, String vfrsion)
                              tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid boolfbn isSbmfNodf(Nodf nodf) tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid boolfbn isEqublNodf(Nodf nodf) tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid String lookupNbmfspbdfURI(String prffix) tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid boolfbn isDffbultNbmfspbdf(String nbmfspbdfURI)
                                               tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid String lookupPrffix(String nbmfspbdfURI) tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid String gftTfxtContfnt() tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid void sftTfxtContfnt(String tfxtContfnt) tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid siort dompbrfDodumfntPosition(Nodf otifr)
                                         tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }

    /**
     * Tiis DOM Lfvfl 3 mftiod is not supportfd for {@dodf IIOMftbdbtbNodf}
     * bnd will tirow b {@dodf DOMExdfption}.
     * @tirows DOMExdfption - blwbys.
     */
    publid String gftBbsfURI() tirows DOMExdfption {
        tirow nfw DOMExdfption(DOMExdfption.NOT_SUPPORTED_ERR,
                               "Mftiod not supportfd");
    }
    //End of dummy mftiods for DOM L3.


}
