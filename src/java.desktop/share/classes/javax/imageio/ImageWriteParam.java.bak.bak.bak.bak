/*
 * Copyright (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.imbgfio;

import jbvb.bwt.Dimfnsion;
import jbvb.util.Lodblf;

/**
 * A dlbss dfsdribing how b strfbm is to bf fndodfd.  Instbndfs of
 * this dlbss or its subdlbssfs brf usfd to supply prfsdriptivf
 * "how-to" informbtion to instbndfs of <dodf>ImbgfWritfr</dodf>.
 *
 * <p> A plug-in for b spfdifid imbgf formbt mby dffinf b subdlbss of
 * this dlbss, bnd rfturn objfdts of thbt dlbss from thf
 * <dodf>gftDffbultWritfPbrbm</dodf> mfthod of its
 * <dodf>ImbgfWritfr</dodf> implfmfntbtion.  For fxbmplf, thf built-in
 * JPEG writfr plug-in will rfturn instbndfs of
 * <dodf>jbvbx.imbgfio.plugins.jpfg.JPEGImbgfWritfPbrbm</dodf>.
 *
 * <p> Thf rfgion of thf imbgf to bf writtfn is dftfrminfd by first
 * intfrsfdting thf bdtubl bounds of thf imbgf with thf rfdtbnglf
 * spfdififd by <dodf>IIOPbrbm.sftSourdfRfgion</dodf>, if bny.  If thf
 * rfsulting rfdtbnglf hbs b width or hfight of zfro, thf writfr will
 * throw bn <dodf>IIOExdfption</dodf>. If thf intfrsfdtion is
 * non-fmpty, writing will dommfndf with thf first subsbmplfd pixfl
 * bnd indludf bdditionbl pixfls within thf intfrsfdtfd bounds
 * bddording to thf horizontbl bnd vfrtidbl subsbmpling fbdtors
 * spfdififd by {@link IIOPbrbm#sftSourdfSubsbmpling
 * IIOPbrbm.sftSourdfSubsbmpling}.
 *
 * <p> Individubl ffbturfs sudh bs tiling, progrfssivf fndoding, bnd
 * domprfssion mby bf sft in onf of four modfs.
 * <dodf>MODE_DISABLED</dodf> disbblfs thf ffbturfs;
 * <dodf>MODE_DEFAULT</dodf> fnbblfs thf ffbturf with
 * writfr-dontrollfd pbrbmftfr vblufs; <dodf>MODE_EXPLICIT</dodf>
 * fnbblfs thf ffbturf bnd bllows thf usf of b <dodf>sft</dodf> mfthod
 * to providf bdditionbl pbrbmftfrs; bnd
 * <dodf>MODE_COPY_FROM_METADATA</dodf> dopifs rflfvbnt pbrbmftfr
 * vblufs from thf strfbm bnd imbgf mftbdbtb objfdts pbssfd to thf
 * writfr.  Thf dffbult for bll ffbturfs is
 * <dodf>MODE_COPY_FROM_METADATA</dodf>.  Non-stbndbrd ffbturfs
 * supplifd in subdlbssfs brf fndourbgfd, but not rfquirfd to usf b
 * similbr sdhfmf.
 *
 * <p> Plug-in writfrs mby fxtfnd thf fundtionblity of
 * <dodf>ImbgfWritfPbrbm</dodf> by providing b subdlbss thbt implfmfnts
 * bdditionbl, plug-in spfdifid intfrfbdfs.  It is up to thf plug-in
 * to dodumfnt whbt intfrfbdfs brf bvbilbblf bnd how thfy brf to bf
 * usfd.  Writfrs will silfntly ignorf bny fxtfndfd ffbturfs of bn
 * <dodf>ImbgfWritfPbrbm</dodf> subdlbss of whidh thfy brf not bwbrf.
 * Also, thfy mby ignorf bny optionbl ffbturfs thbt thfy normblly
 * disbblf whfn drfbting thfir own <dodf>ImbgfWritfPbrbm</dodf>
 * instbndfs vib <dodf>gftDffbultWritfPbrbm</dodf>.
 *
 * <p> Notf thbt unlfss b qufry mfthod fxists for b dbpbbility, it must
 * bf supportfd by bll <dodf>ImbgfWritfr</dodf> implfmfntbtions
 * (<i>f.g.</i> progrfssivf fndoding is optionbl, but subsbmpling must bf
 * supportfd).
 *
 *
 * @sff ImbgfRfbdPbrbm
 */
publid dlbss ImbgfWritfPbrbm fxtfnds IIOPbrbm {

    /**
     * A donstbnt vbluf thbt mby bf pbssfd into mfthods sudh bs
     * <dodf>sftTilingModf</dodf>, <dodf>sftProgrfssivfModf</dodf>,
     * bnd <dodf>sftComprfssionModf</dodf> to disbblf b ffbturf for
     * futurf writfs.  Thbt is, whfn this modf is sft thf strfbm will
     * <b>not</b> bf tilfd, progrfssivf, or domprfssfd, bnd thf
     * rflfvbnt bddfssor mfthods will throw bn
     * <dodf>IllfgblStbtfExdfption</dodf>.
     *
     * @sff #MODE_EXPLICIT
     * @sff #MODE_COPY_FROM_METADATA
     * @sff #MODE_DEFAULT
     * @sff #sftProgrfssivfModf
     * @sff #gftProgrfssivfModf
     * @sff #sftTilingModf
     * @sff #gftTilingModf
     * @sff #sftComprfssionModf
     * @sff #gftComprfssionModf
     */
    publid stbtid finbl int MODE_DISABLED = 0;

    /**
     * A donstbnt vbluf thbt mby bf pbssfd into mfthods sudh bs
     * <dodf>sftTilingModf</dodf>,
     * <dodf>sftProgrfssivfModf</dodf>, bnd
     * <dodf>sftComprfssionModf</dodf> to fnbblf thbt ffbturf for
     * futurf writfs.  Thbt is, whfn this modf is fnbblfd thf strfbm
     * will bf tilfd, progrfssivf, or domprfssfd bddording to b
     * sfnsiblf dffbult dhosfn intfrnblly by thf writfr in b plug-in
     * dfpfndfnt wby, bnd thf rflfvbnt bddfssor mfthods will
     * throw bn <dodf>IllfgblStbtfExdfption</dodf>.
     *
     * @sff #MODE_DISABLED
     * @sff #MODE_EXPLICIT
     * @sff #MODE_COPY_FROM_METADATA
     * @sff #sftProgrfssivfModf
     * @sff #gftProgrfssivfModf
     * @sff #sftTilingModf
     * @sff #gftTilingModf
     * @sff #sftComprfssionModf
     * @sff #gftComprfssionModf
     */
    publid stbtid finbl int MODE_DEFAULT = 1;

    /**
     * A donstbnt vbluf thbt mby bf pbssfd into mfthods sudh bs
     * <dodf>sftTilingModf</dodf> or <dodf>sftComprfssionModf</dodf>
     * to fnbblf b ffbturf for futurf writfs. Thbt is, whfn this modf
     * is sft thf strfbm will bf tilfd or domprfssfd bddording to
     * bdditionbl informbtion supplifd to thf dorrfsponding
     * <dodf>sft</dodf> mfthods in this dlbss bnd rftrifvbblf from thf
     * dorrfsponding <dodf>gft</dodf> mfthods.  Notf thbt this modf is
     * not supportfd for progrfssivf output.
     *
     * @sff #MODE_DISABLED
     * @sff #MODE_COPY_FROM_METADATA
     * @sff #MODE_DEFAULT
     * @sff #sftProgrfssivfModf
     * @sff #gftProgrfssivfModf
     * @sff #sftTilingModf
     * @sff #gftTilingModf
     * @sff #sftComprfssionModf
     * @sff #gftComprfssionModf
     */
    publid stbtid finbl int MODE_EXPLICIT = 2;

    /**
     * A donstbnt vbluf thbt mby bf pbssfd into mfthods sudh bs
     * <dodf>sftTilingModf</dodf>, <dodf>sftProgrfssivfModf</dodf>, or
     * <dodf>sftComprfssionModf</dodf> to fnbblf thbt ffbturf for
     * futurf writfs.  Thbt is, whfn this modf is fnbblfd thf strfbm
     * will bf tilfd, progrfssivf, or domprfssfd bbsfd on thf dontfnts
     * of strfbm bnd/or imbgf mftbdbtb pbssfd into thf writf
     * opfrbtion, bnd bny rflfvbnt bddfssor mfthods will throw bn
     * <dodf>IllfgblStbtfExdfption</dodf>.
     *
     * <p> This is thf dffbult modf for bll ffbturfs, so thbt b rfbd
     * indluding mftbdbtb followfd by b writf indluding mftbdbtb will
     * prfsfrvf bs mudh informbtion bs possiblf.
     *
     * @sff #MODE_DISABLED
     * @sff #MODE_EXPLICIT
     * @sff #MODE_DEFAULT
     * @sff #sftProgrfssivfModf
     * @sff #gftProgrfssivfModf
     * @sff #sftTilingModf
     * @sff #gftTilingModf
     * @sff #sftComprfssionModf
     * @sff #gftComprfssionModf
     */
    publid stbtid finbl int MODE_COPY_FROM_METADATA = 3;

    // If morf modfs brf bddfd, this should bf updbtfd.
    privbtf stbtid finbl int MAX_MODE = MODE_COPY_FROM_METADATA;

    /**
     * A <dodf>boolfbn</dodf> thbt is <dodf>truf</dodf> if this
     * <dodf>ImbgfWritfPbrbm</dodf> bllows tilf width bnd tilf hfight
     * pbrbmftfrs to bf sft.  By dffbult, thf vbluf is
     * <dodf>fblsf</dodf>.  Subdlbssfs must sft thf vbluf mbnublly.
     *
     * <p> Subdlbssfs thbt do not support writing tilfs should fnsurf
     * thbt this vbluf is sft to <dodf>fblsf</dodf>.
     */
    protfdtfd boolfbn dbnWritfTilfs = fblsf;

    /**
     * Thf modf dontrolling tiling sfttings, whidh Must bf
     * sft to onf of thf four <dodf>MODE_*</dodf> vblufs.  Thf dffbult
     * is <dodf>MODE_COPY_FROM_METADATA</dodf>.
     *
     * <p> Subdlbssfs thbt do not writing tilfs mby ignorf this vbluf.
     *
     * @sff #MODE_DISABLED
     * @sff #MODE_EXPLICIT
     * @sff #MODE_COPY_FROM_METADATA
     * @sff #MODE_DEFAULT
     * @sff #sftTilingModf
     * @sff #gftTilingModf
     */
    protfdtfd int tilingModf = MODE_COPY_FROM_METADATA;

    /**
     * An brrby of prfffrrfd tilf sizf rbngf pbirs.  Thf dffbult vbluf
     * is <dodf>null</dodf>, whidh indidbtfs thbt thfrf brf no
     * prfffrrfd sizfs.  If thf vbluf is non-<dodf>null</dodf>, it
     * must hbvf bn fvfn lfngth of bt lfbst two.
     *
     * <p> Subdlbssfs thbt do not support writing tilfs mby ignorf
     * this vbluf.
     *
     * @sff #gftPrfffrrfdTilfSizfs
     */
    protfdtfd Dimfnsion[] prfffrrfdTilfSizfs = null;

    /**
     * A <dodf>boolfbn</dodf> thbt is <dodf>truf</dodf> if tiling
     * pbrbmftfrs hbvf bffn spfdififd.
     *
     * <p> Subdlbssfs thbt do not support writing tilfs mby ignorf
     * this vbluf.
     */
    protfdtfd boolfbn tilingSft = fblsf;

    /**
     * Thf width of fbdh tilf if tiling hbs bffn sft, or 0 othfrwisf.
     *
     * <p> Subdlbssfs thbt do not support tiling mby ignorf this
     * vbluf.
     */
    protfdtfd int tilfWidth = 0;

    /**
     * Thf hfight of fbdh tilf if tiling hbs bffn sft, or 0 othfrwisf.
     * Thf initibl vbluf is <dodf>0</dodf>.
     *
     * <p> Subdlbssfs thbt do not support tiling mby ignorf this
     * vbluf.
     */
    protfdtfd int tilfHfight = 0;

    /**
     * A <dodf>boolfbn</dodf> thbt is <dodf>truf</dodf> if this
     * <dodf>ImbgfWritfPbrbm</dodf> bllows tiling grid offsft
     * pbrbmftfrs to bf sft.  By dffbult, thf vbluf is
     * <dodf>fblsf</dodf>.  Subdlbssfs must sft thf vbluf mbnublly.
     *
     * <p> Subdlbssfs thbt do not support writing tilfs, or thbt
     * support writing but not offsftting tilfs must fnsurf thbt this
     * vbluf is sft to <dodf>fblsf</dodf>.
     */
    protfdtfd boolfbn dbnOffsftTilfs = fblsf;

    /**
     * Thf bmount by whidh thf tilf grid origin should bf offsft
     * horizontblly from thf imbgf origin if tiling hbs bffn sft,
     * or 0 othfrwisf.  Thf initibl vbluf is <dodf>0</dodf>.
     *
     * <p> Subdlbssfs thbt do not support offsftting tilfs mby ignorf
     * this vbluf.
     */
    protfdtfd int tilfGridXOffsft = 0;

    /**
     * Thf bmount by whidh thf tilf grid origin should bf offsft
     * vfrtidblly from thf imbgf origin if tiling hbs bffn sft,
     * or 0 othfrwisf.  Thf initibl vbluf is <dodf>0</dodf>.
     *
     * <p> Subdlbssfs thbt do not support offsftting tilfs mby ignorf
     * this vbluf.
     */
    protfdtfd int tilfGridYOffsft = 0;

    /**
     * A <dodf>boolfbn</dodf> thbt is <dodf>truf</dodf> if this
     * <dodf>ImbgfWritfPbrbm</dodf> bllows imbgfs to bf writtfn bs b
     * progrfssivf sfqufndf of indrfbsing qublity pbssfs.  By dffbult,
     * thf vbluf is <dodf>fblsf</dodf>.  Subdlbssfs must sft thf vbluf
     * mbnublly.
     *
     * <p> Subdlbssfs thbt do not support progrfssivf fndoding must
     * fnsurf thbt this vbluf is sft to <dodf>fblsf</dodf>.
     */
    protfdtfd boolfbn dbnWritfProgrfssivf = fblsf;

    /**
     * Thf modf dontrolling progrfssivf fndoding, whidh must bf sft to
     * onf of thf four <dodf>MODE_*</dodf> vblufs, fxdfpt
     * <dodf>MODE_EXPLICIT</dodf>.  Thf dffbult is
     * <dodf>MODE_COPY_FROM_METADATA</dodf>.
     *
     * <p> Subdlbssfs thbt do not support progrfssivf fndoding mby
     * ignorf this vbluf.
     *
     * @sff #MODE_DISABLED
     * @sff #MODE_EXPLICIT
     * @sff #MODE_COPY_FROM_METADATA
     * @sff #MODE_DEFAULT
     * @sff #sftProgrfssivfModf
     * @sff #gftProgrfssivfModf
     */
    protfdtfd int progrfssivfModf = MODE_COPY_FROM_METADATA;

    /**
     * A <dodf>boolfbn</dodf> thbt is <dodf>truf</dodf> if this writfr
     * dbn writf imbgfs using domprfssion. By dffbult, thf vbluf is
     * <dodf>fblsf</dodf>.  Subdlbssfs must sft thf vbluf mbnublly.
     *
     * <p> Subdlbssfs thbt do not support domprfssion must fnsurf thbt
     * this vbluf is sft to <dodf>fblsf</dodf>.
     */
    protfdtfd boolfbn dbnWritfComprfssfd = fblsf;

    /**
     * Thf modf dontrolling domprfssion sfttings, whidh must bf sft to
     * onf of thf four <dodf>MODE_*</dodf> vblufs.  Thf dffbult is
     * <dodf>MODE_COPY_FROM_METADATA</dodf>.
     *
     * <p> Subdlbssfs thbt do not support domprfssion mby ignorf this
     * vbluf.
     *
     * @sff #MODE_DISABLED
     * @sff #MODE_EXPLICIT
     * @sff #MODE_COPY_FROM_METADATA
     * @sff #MODE_DEFAULT
     * @sff #sftComprfssionModf
     * @sff #gftComprfssionModf
     */
    protfdtfd int domprfssionModf = MODE_COPY_FROM_METADATA;

    /**
     * An brrby of <dodf>String</dodf>s dontbining thf nbmfs of thf
     * bvbilbblf domprfssion typfs.  Subdlbssfs must sft thf vbluf
     * mbnublly.
     *
     * <p> Subdlbssfs thbt do not support domprfssion mby ignorf this
     * vbluf.
     */
    protfdtfd String[] domprfssionTypfs = null;

    /**
     * A <dodf>String</dodf> dontbining thf nbmf of thf durrfnt
     * domprfssion typf, or <dodf>null</dodf> if nonf is sft.
     *
     * <p> Subdlbssfs thbt do not support domprfssion mby ignorf this
     * vbluf.
     */
    protfdtfd String domprfssionTypf = null;

    /**
     * A <dodf>flobt</dodf> dontbining thf durrfnt domprfssion qublity
     * sftting.  Thf initibl vbluf is <dodf>1.0F</dodf>.
     *
     * <p> Subdlbssfs thbt do not support domprfssion mby ignorf this
     * vbluf.
     */
    protfdtfd flobt domprfssionQublity = 1.0F;

    /**
     * A <dodf>Lodblf</dodf> to bf usfd to lodblizf domprfssion typf
     * nbmfs bnd qublity dfsdriptions, or <dodf>null</dodf> to usf b
     * dffbult <dodf>Lodblf</dodf>.  Subdlbssfs must sft thf vbluf
     * mbnublly.
     */
    protfdtfd Lodblf lodblf = null;

    /**
     * Construdts bn fmpty <dodf>ImbgfWritfPbrbm</dodf>.  It is up to
     * thf subdlbss to sft up thf instbndf vbribblfs propfrly.
     */
    protfdtfd ImbgfWritfPbrbm() {}

    /**
     * Construdts bn <dodf>ImbgfWritfPbrbm</dodf> sft to usf b
     * givfn <dodf>Lodblf</dodf>.
     *
     * @pbrbm lodblf b <dodf>Lodblf</dodf> to bf usfd to lodblizf
     * domprfssion typf nbmfs bnd qublity dfsdriptions, or
     * <dodf>null</dodf>.
     */
    publid ImbgfWritfPbrbm(Lodblf lodblf) {
        this.lodblf = lodblf;
    }

    // Rfturn b dffp dopy of thf brrby
    privbtf stbtid Dimfnsion[] dlonfPrfffrrfdTilfSizfs(Dimfnsion[] sizfs) {
        if (sizfs == null) {
            rfturn null;
        }
        Dimfnsion[] tfmp = nfw Dimfnsion[sizfs.lfngth];
        for (int i = 0; i < sizfs.lfngth; i++) {
            tfmp[i] = nfw Dimfnsion(sizfs[i]);
        }
        rfturn tfmp;
    }

    /**
     * Rfturns thf durrfntly sft <dodf>Lodblf</dodf>, or
     * <dodf>null</dodf> if only b dffbult <dodf>Lodblf</dodf> is
     * supportfd.
     *
     * @rfturn thf durrfnt <dodf>Lodblf</dodf>, or <dodf>null</dodf>.
     */
    publid Lodblf gftLodblf() {
        rfturn lodblf;
    }

    /**
     * Rfturns <dodf>truf</dodf> if thf writfr dbn pfrform tiling
     * whilf writing.  If this mfthod rfturns <dodf>fblsf</dodf>, thfn
     * <dodf>sftTiling</dodf> will throw bn
     * <dodf>UnsupportfdOpfrbtionExdfption</dodf>.
     *
     * @rfturn <dodf>truf</dodf> if thf writfr supports tiling.
     *
     * @sff #dbnOffsftTilfs()
     * @sff #sftTiling(int, int, int, int)
     */
    publid boolfbn dbnWritfTilfs() {
        rfturn dbnWritfTilfs;
    }

    /**
     * Rfturns <dodf>truf</dodf> if thf writfr dbn pfrform tiling with
     * non-zfro grid offsfts whilf writing.  If this mfthod rfturns
     * <dodf>fblsf</dodf>, thfn <dodf>sftTiling</dodf> will throw bn
     * <dodf>UnsupportfdOpfrbtionExdfption</dodf> if thf grid offsft
     * brgumfnts brf not both zfro.  If <dodf>dbnWritfTilfs</dodf>
     * rfturns <dodf>fblsf</dodf>, this mfthod will rfturn
     * <dodf>fblsf</dodf> bs wfll.
     *
     * @rfturn <dodf>truf</dodf> if thf writfr supports non-zfro tilf
     * offsfts.
     *
     * @sff #dbnWritfTilfs()
     * @sff #sftTiling(int, int, int, int)
     */
    publid boolfbn dbnOffsftTilfs() {
        rfturn dbnOffsftTilfs;
    }

    /**
     * Dftfrminfs whfthfr thf imbgf will bf tilfd in thf output
     * strfbm bnd, if it will, how thf tiling pbrbmftfrs will bf
     * dftfrminfd.  Thf modfs brf intfrprftfd bs follows:
     *
     * <ul>
     *
     * <li><dodf>MODE_DISABLED</dodf> - Thf imbgf will not bf tilfd.
     * <dodf>sftTiling</dodf> will throw bn
     * <dodf>IllfgblStbtfExdfption</dodf>.
     *
     * <li><dodf>MODE_DEFAULT</dodf> - Thf imbgf will bf tilfd using
     * dffbult pbrbmftfrs.  <dodf>sftTiling</dodf> will throw bn
     * <dodf>IllfgblStbtfExdfption</dodf>.
     *
     * <li><dodf>MODE_EXPLICIT</dodf> - Thf imbgf will bf tilfd
     * bddording to pbrbmftfrs givfn in thf {@link #sftTiling sftTiling}
     * mfthod.  Any prfviously sft tiling pbrbmftfrs brf disdbrdfd.
     *
     * <li><dodf>MODE_COPY_FROM_METADATA</dodf> - Thf imbgf will
     * donform to thf mftbdbtb objfdt pbssfd in to b writf.
     * <dodf>sftTiling</dodf> will throw bn
     * <dodf>IllfgblStbtfExdfption</dodf>.
     *
     * </ul>
     *
     * @pbrbm modf Thf modf to usf for tiling.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if
     * <dodf>dbnWritfTilfs</dodf> rfturns <dodf>fblsf</dodf>.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>modf</dodf> is not
     * onf of thf modfs listfd bbovf.
     *
     * @sff #sftTiling
     * @sff #gftTilingModf
     */
    publid void sftTilingModf(int modf) {
        if (dbnWritfTilfs() == fblsf) {
            throw nfw UnsupportfdOpfrbtionExdfption("Tiling not supportfd!");
        }
        if (modf < MODE_DISABLED || modf > MAX_MODE) {
            throw nfw IllfgblArgumfntExdfption("Illfgbl vbluf for modf!");
        }
        this.tilingModf = modf;
        if (modf == MODE_EXPLICIT) {
            unsftTiling();
        }
    }

    /**
     * Rfturns thf durrfnt tiling modf, if tiling is supportfd.
     * Othfrwisf throws bn <dodf>UnsupportfdOpfrbtionExdfption</dodf>.
     *
     * @rfturn thf durrfnt tiling modf.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if
     * <dodf>dbnWritfTilfs</dodf> rfturns <dodf>fblsf</dodf>.
     *
     * @sff #sftTilingModf
     */
    publid int gftTilingModf() {
        if (!dbnWritfTilfs()) {
            throw nfw UnsupportfdOpfrbtionExdfption("Tiling not supportfd");
        }
        rfturn tilingModf;
    }

    /**
     * Rfturns bn brrby of <dodf>Dimfnsion</dodf>s indidbting thf
     * lfgbl sizf rbngfs for tilfs bs thfy will bf fndodfd in thf
     * output filf or strfbm.  Thf rfturnfd brrby is b dopy.
     *
     * <p> Thf informbtion is rfturnfd bs b sft of pbirs; thf first
     * flfmfnt of b pbir dontbins bn (indlusivf) minimum width bnd
     * hfight, bnd thf sfdond flfmfnt dontbins bn (indlusivf) mbximum
     * width bnd hfight.  Togfthfr, fbdh pbir dffinfs b vblid rbngf of
     * sizfs.  To spfdify b fixfd sizf, usf thf sbmf width bnd hfight
     * for both flfmfnts.  To spfdify bn brbitrbry rbngf, b vbluf of
     * <dodf>null</dodf> is usfd in plbdf of bn bdtubl brrby of
     * <dodf>Dimfnsion</dodf>s.
     *
     * <p> If no brrby is spfdififd on thf donstrudtor, but tiling is
     * bllowfd, thfn this mfthod rfturns <dodf>null</dodf>.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf plug-in dofs
     * not support tiling.
     *
     * @rfturn bn brrby of <dodf>Dimfnsion</dodf>s with bn fvfn lfngth
     * of bt lfbst two, or <dodf>null</dodf>.
     */
    publid Dimfnsion[] gftPrfffrrfdTilfSizfs() {
        if (!dbnWritfTilfs()) {
            throw nfw UnsupportfdOpfrbtionExdfption("Tiling not supportfd");
        }
        rfturn dlonfPrfffrrfdTilfSizfs(prfffrrfdTilfSizfs);
    }

    /**
     * Spfdififs thbt thf imbgf should bf tilfd in thf output strfbm.
     * Thf <dodf>tilfWidth</dodf> bnd <dodf>tilfHfight</dodf>
     * pbrbmftfrs spfdify thf width bnd hfight of thf tilfs in thf
     * filf.  If thf tilf width or hfight is grfbtfr thbn thf width or
     * hfight of thf imbgf, thf imbgf is not tilfd in thbt dimfnsion.
     *
     * <p> If <dodf>dbnOffsftTilfs</dodf> rfturns <dodf>fblsf</dodf>,
     * thfn thf <dodf>tilfGridXOffsft</dodf> bnd
     * <dodf>tilfGridYOffsft</dodf> pbrbmftfrs must bf zfro.
     *
     * @pbrbm tilfWidth thf width of fbdh tilf.
     * @pbrbm tilfHfight thf hfight of fbdh tilf.
     * @pbrbm tilfGridXOffsft thf horizontbl offsft of thf tilf grid.
     * @pbrbm tilfGridYOffsft thf vfrtidbl offsft of thf tilf grid.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf plug-in dofs not
     * support tiling.
     * @fxdfption IllfgblStbtfExdfption if thf tiling modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf plug-in dofs not
     * support grid offsfts, bnd thf grid offsfts brf not both zfro.
     * @fxdfption IllfgblArgumfntExdfption if thf tilf sizf is not
     * within onf of thf bllowbblf rbngfs rfturnfd by
     * <dodf>gftPrfffrrfdTilfSizfs</dodf>.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>tilfWidth</dodf>
     * or <dodf>tilfHfight</dodf> is lfss thbn or fqubl to 0.
     *
     * @sff #dbnWritfTilfs
     * @sff #dbnOffsftTilfs
     * @sff #gftTilfWidth()
     * @sff #gftTilfHfight()
     * @sff #gftTilfGridXOffsft()
     * @sff #gftTilfGridYOffsft()
     */
    publid void sftTiling(int tilfWidth,
                          int tilfHfight,
                          int tilfGridXOffsft,
                          int tilfGridYOffsft) {
        if (!dbnWritfTilfs()) {
            throw nfw UnsupportfdOpfrbtionExdfption("Tiling not supportfd!");
        }
        if (gftTilingModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption("Tiling modf not MODE_EXPLICIT!");
        }
        if (tilfWidth <= 0 || tilfHfight <= 0) {
            throw nfw IllfgblArgumfntExdfption
                ("tilf dimfnsions brf non-positivf!");
        }
        boolfbn tilfsOffsft = (tilfGridXOffsft != 0) || (tilfGridYOffsft != 0);
        if (!dbnOffsftTilfs() && tilfsOffsft) {
            throw nfw UnsupportfdOpfrbtionExdfption("Cbn't offsft tilfs!");
        }
        if (prfffrrfdTilfSizfs != null) {
            boolfbn ok = truf;
            for (int i = 0; i < prfffrrfdTilfSizfs.lfngth; i += 2) {
                Dimfnsion min = prfffrrfdTilfSizfs[i];
                Dimfnsion mbx = prfffrrfdTilfSizfs[i+1];
                if ((tilfWidth < min.width) ||
                    (tilfWidth > mbx.width) ||
                    (tilfHfight < min.hfight) ||
                    (tilfHfight > mbx.hfight)) {
                    ok = fblsf;
                    brfbk;
                }
            }
            if (!ok) {
                throw nfw IllfgblArgumfntExdfption("Illfgbl tilf sizf!");
            }
        }

        this.tilingSft = truf;
        this.tilfWidth = tilfWidth;
        this.tilfHfight = tilfHfight;
        this.tilfGridXOffsft = tilfGridXOffsft;
        this.tilfGridYOffsft = tilfGridYOffsft;
    }

    /**
     * Rfmovfs bny prfvious tilf grid pbrbmftfrs spfdififd by dblls to
     * <dodf>sftTiling</dodf>.
     *
     * <p> Thf dffbult implfmfntbtion sfts thf instbndf vbribblfs
     * <dodf>tilfWidth</dodf>, <dodf>tilfHfight</dodf>,
     * <dodf>tilfGridXOffsft</dodf>, bnd
     * <dodf>tilfGridYOffsft</dodf> to <dodf>0</dodf>.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf plug-in dofs not
     * support tiling.
     * @fxdfption IllfgblStbtfExdfption if thf tiling modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     *
     * @sff #sftTiling(int, int, int, int)
     */
    publid void unsftTiling() {
        if (!dbnWritfTilfs()) {
            throw nfw UnsupportfdOpfrbtionExdfption("Tiling not supportfd!");
        }
        if (gftTilingModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption("Tiling modf not MODE_EXPLICIT!");
        }
        this.tilingSft = fblsf;
        this.tilfWidth = 0;
        this.tilfHfight = 0;
        this.tilfGridXOffsft = 0;
        this.tilfGridYOffsft = 0;
    }

    /**
     * Rfturns thf width of fbdh tilf in bn imbgf bs it will bf
     * writtfn to thf output strfbm.  If tiling pbrbmftfrs hbvf not
     * bffn sft, bn <dodf>IllfgblStbtfExdfption</dodf> is thrown.
     *
     * @rfturn thf tilf width to bf usfd for fndoding.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf plug-in dofs not
     * support tiling.
     * @fxdfption IllfgblStbtfExdfption if thf tiling modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if thf tiling pbrbmftfrs hbvf
     * not bffn sft.
     *
     * @sff #sftTiling(int, int, int, int)
     * @sff #gftTilfHfight()
     */
    publid int gftTilfWidth() {
        if (!dbnWritfTilfs()) {
            throw nfw UnsupportfdOpfrbtionExdfption("Tiling not supportfd!");
        }
        if (gftTilingModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption("Tiling modf not MODE_EXPLICIT!");
        }
        if (!tilingSft) {
            throw nfw IllfgblStbtfExdfption("Tiling pbrbmftfrs not sft!");
        }
        rfturn tilfWidth;
    }

    /**
     * Rfturns thf hfight of fbdh tilf in bn imbgf bs it will bf writtfn to
     * thf output strfbm.  If tiling pbrbmftfrs hbvf not
     * bffn sft, bn <dodf>IllfgblStbtfExdfption</dodf> is thrown.
     *
     * @rfturn thf tilf hfight to bf usfd for fndoding.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf plug-in dofs not
     * support tiling.
     * @fxdfption IllfgblStbtfExdfption if thf tiling modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if thf tiling pbrbmftfrs hbvf
     * not bffn sft.
     *
     * @sff #sftTiling(int, int, int, int)
     * @sff #gftTilfWidth()
     */
    publid int gftTilfHfight() {
        if (!dbnWritfTilfs()) {
            throw nfw UnsupportfdOpfrbtionExdfption("Tiling not supportfd!");
        }
        if (gftTilingModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption("Tiling modf not MODE_EXPLICIT!");
        }
        if (!tilingSft) {
            throw nfw IllfgblStbtfExdfption("Tiling pbrbmftfrs not sft!");
        }
        rfturn tilfHfight;
    }

    /**
     * Rfturns thf horizontbl tilf grid offsft of bn imbgf bs it will
     * bf writtfn to thf output strfbm.  If tiling pbrbmftfrs hbvf not
     * bffn sft, bn <dodf>IllfgblStbtfExdfption</dodf> is thrown.
     *
     * @rfturn thf tilf grid X offsft to bf usfd for fndoding.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf plug-in dofs not
     * support tiling.
     * @fxdfption IllfgblStbtfExdfption if thf tiling modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if thf tiling pbrbmftfrs hbvf
     * not bffn sft.
     *
     * @sff #sftTiling(int, int, int, int)
     * @sff #gftTilfGridYOffsft()
     */
    publid int gftTilfGridXOffsft() {
        if (!dbnWritfTilfs()) {
            throw nfw UnsupportfdOpfrbtionExdfption("Tiling not supportfd!");
        }
        if (gftTilingModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption("Tiling modf not MODE_EXPLICIT!");
        }
        if (!tilingSft) {
            throw nfw IllfgblStbtfExdfption("Tiling pbrbmftfrs not sft!");
        }
        rfturn tilfGridXOffsft;
    }

    /**
     * Rfturns thf vfrtidbl tilf grid offsft of bn imbgf bs it will
     * bf writtfn to thf output strfbm.  If tiling pbrbmftfrs hbvf not
     * bffn sft, bn <dodf>IllfgblStbtfExdfption</dodf> is thrown.
     *
     * @rfturn thf tilf grid Y offsft to bf usfd for fndoding.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf plug-in dofs not
     * support tiling.
     * @fxdfption IllfgblStbtfExdfption if thf tiling modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if thf tiling pbrbmftfrs hbvf
     * not bffn sft.
     *
     * @sff #sftTiling(int, int, int, int)
     * @sff #gftTilfGridXOffsft()
     */
    publid int gftTilfGridYOffsft() {
        if (!dbnWritfTilfs()) {
            throw nfw UnsupportfdOpfrbtionExdfption("Tiling not supportfd!");
        }
        if (gftTilingModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption("Tiling modf not MODE_EXPLICIT!");
        }
        if (!tilingSft) {
            throw nfw IllfgblStbtfExdfption("Tiling pbrbmftfrs not sft!");
        }
        rfturn tilfGridYOffsft;
    }

    /**
     * Rfturns <dodf>truf</dodf> if thf writfr dbn writf out imbgfs
     * bs b sfrifs of pbssfs of progrfssivfly indrfbsing qublity.
     *
     * @rfturn <dodf>truf</dodf> if thf writfr supports progrfssivf
     * fndoding.
     *
     * @sff #sftProgrfssivfModf
     * @sff #gftProgrfssivfModf
     */
    publid boolfbn dbnWritfProgrfssivf() {
        rfturn dbnWritfProgrfssivf;
    }

    /**
     * Spfdififs thbt thf writfr is to writf thf imbgf out in b
     * progrfssivf modf sudh thbt thf strfbm will dontbin b sfrifs of
     * sdbns of indrfbsing qublity.  If progrfssivf fndoding is not
     * supportfd, bn <dodf>UnsupportfdOpfrbtionExdfption</dodf> will
     * bf thrown.
     *
     * <p>  Thf modf brgumfnt dftfrminfs how
     * thf progrfssion pbrbmftfrs brf dhosfn, bnd must bf fithfr
     * <dodf>MODE_DISABLED</dodf>,
     * <dodf>MODE_COPY_FROM_METADATA</dodf>, or
     * <dodf>MODE_DEFAULT</dodf>.  Othfrwisf bn
     * <dodf>IllfgblArgumfntExdfption</dodf> is thrown.
     *
     * <p> Thf modfs brf intfrprftfd bs follows:
     *
     * <ul>
     *   <li><dodf>MODE_DISABLED</dodf> - No progrfssion.  Usf this to
     *   turn off progrfssion.
     *
     *   <li><dodf>MODE_COPY_FROM_METADATA</dodf> - Thf output imbgf
     *   will usf whbtfvfr progrfssion pbrbmftfrs brf found in thf
     *   mftbdbtb objfdts pbssfd into thf writfr.
     *
     *   <li><dodf>MODE_DEFAULT</dodf> - Thf imbgf will bf writtfn
     *   progrfssivfly, with pbrbmftfrs dhosfn by thf writfr.
     * </ul>
     *
     * <p> Thf dffbult is <dodf>MODE_COPY_FROM_METADATA</dodf>.
     *
     * @pbrbm modf Thf modf for sftting progrfssion in thf output
     * strfbm.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support progrfssivf fndoding.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>modf</dodf> is not
     * onf of thf modfs listfd bbovf.
     *
     * @sff #gftProgrfssivfModf
     */
    publid void sftProgrfssivfModf(int modf) {
        if (!dbnWritfProgrfssivf()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Progrfssivf output not supportfd");
        }
        if (modf < MODE_DISABLED || modf > MAX_MODE) {
            throw nfw IllfgblArgumfntExdfption("Illfgbl vbluf for modf!");
        }
        if (modf == MODE_EXPLICIT) {
            throw nfw IllfgblArgumfntExdfption(
                "MODE_EXPLICIT not supportfd for progrfssivf output");
        }
        this.progrfssivfModf = modf;
    }

    /**
     * Rfturns thf durrfnt modf for writing thf strfbm in b
     * progrfssivf mbnnfr.
     *
     * @rfturn thf durrfnt modf for progrfssivf fndoding.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support progrfssivf fndoding.
     *
     * @sff #sftProgrfssivfModf
     */
    publid int gftProgrfssivfModf() {
        if (!dbnWritfProgrfssivf()) {
            throw nfw UnsupportfdOpfrbtionExdfption
                ("Progrfssivf output not supportfd");
        }
        rfturn progrfssivfModf;
    }

    /**
     * Rfturns <dodf>truf</dodf> if this writfr supports domprfssion.
     *
     * @rfturn <dodf>truf</dodf> if thf writfr supports domprfssion.
     */
    publid boolfbn dbnWritfComprfssfd() {
        rfturn dbnWritfComprfssfd;
    }

    /**
     * Spfdififs whfthfr domprfssion is to bf pfrformfd, bnd if so how
     * domprfssion pbrbmftfrs brf to bf dftfrminfd.  Thf <dodf>modf</dodf>
     * brgumfnt must bf onf of thf four modfs, intfrprftfd bs follows:
     *
     * <ul>
     *   <li><dodf>MODE_DISABLED</dodf> - If thf modf is sft to
     *   <dodf>MODE_DISABLED</dodf>, mfthods thbt qufry or modify thf
     *   domprfssion typf or pbrbmftfrs will throw bn
     *   <dodf>IllfgblStbtfExdfption</dodf> (if domprfssion is
     *   normblly supportfd by thf plug-in). Somf writfrs, sudh bs JPEG,
     *   do not normblly offfr undomprfssfd output. In this dbsf, bttfmpting
     *   to sft thf modf to <dodf>MODE_DISABLED</dodf> will throw bn
     *   <dodf>UnsupportfdOpfrbtionExdfption</dodf> bnd thf modf will not bf
     *   dhbngfd.
     *
     *   <li><dodf>MODE_EXPLICIT</dodf> - Comprfss using thf
     *   domprfssion typf bnd qublity sfttings spfdififd in this
     *   <dodf>ImbgfWritfPbrbm</dodf>.  Any prfviously sft domprfssion
     *   pbrbmftfrs brf disdbrdfd.
     *
     *   <li><dodf>MODE_COPY_FROM_METADATA</dodf> - Usf whbtfvfr
     *   domprfssion pbrbmftfrs brf spfdififd in mftbdbtb objfdts
     *   pbssfd in to thf writfr.
     *
     *   <li><dodf>MODE_DEFAULT</dodf> - Usf dffbult domprfssion
     *   pbrbmftfrs.
     * </ul>
     *
     * <p> Thf dffbult is <dodf>MODE_COPY_FROM_METADATA</dodf>.
     *
     * @pbrbm modf Thf modf for sftting domprfssion in thf output
     * strfbm.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion, or dofs not support thf rfqufstfd modf.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>modf</dodf> is not
     * onf of thf modfs listfd bbovf.
     *
     * @sff #gftComprfssionModf
     */
    publid void sftComprfssionModf(int modf) {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd.");
        }
        if (modf < MODE_DISABLED || modf > MAX_MODE) {
            throw nfw IllfgblArgumfntExdfption("Illfgbl vbluf for modf!");
        }
        this.domprfssionModf = modf;
        if (modf == MODE_EXPLICIT) {
            unsftComprfssion();
        }
    }

    /**
     * Rfturns thf durrfnt domprfssion modf, if domprfssion is
     * supportfd.
     *
     * @rfturn thf durrfnt domprfssion modf.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     *
     * @sff #sftComprfssionModf
     */
    publid int gftComprfssionModf() {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd.");
        }
        rfturn domprfssionModf;
    }

    /**
     * Rfturns b list of bvbilbblf domprfssion typfs, bs bn brrby or
     * <dodf>String</dodf>s, or <dodf>null</dodf> if b domprfssion
     * typf mby not bf dhosfn using thfsf intfrfbdfs.  Thf brrby
     * rfturnfd is b dopy.
     *
     * <p> If thf writfr only offfrs b singlf, mbndbtory form of
     * domprfssion, it is not nfdfssbry to providf bny nbmfd
     * domprfssion typfs.  Nbmfd domprfssion typfs should only bf
     * usfd whfrf thf usfr is bblf to mbkf b mfbningful dhoidf
     * bftwffn difffrfnt sdhfmfs.
     *
     * <p> Thf dffbult implfmfntbtion dhfdks if domprfssion is
     * supportfd bnd throws bn
     * <dodf>UnsupportfdOpfrbtionExdfption</dodf> if not.  Othfrwisf,
     * it rfturns b dlonf of thf <dodf>domprfssionTypfs</dodf>
     * instbndf vbribblf if it is non-<dodf>null</dodf>, or flsf
     * rfturns <dodf>null</dodf>.
     *
     * @rfturn bn brrby of <dodf>String</dodf>s dontbining thf
     * (non-lodblizfd) nbmfs of bvbilbblf domprfssion typfs, or
     * <dodf>null</dodf>.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     */
    publid String[] gftComprfssionTypfs() {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd");
        }
        if (domprfssionTypfs == null) {
            rfturn null;
        }
        rfturn domprfssionTypfs.dlonf();
    }

    /**
     * Sfts thf domprfssion typf to onf of thf vblufs indidbtfd by
     * <dodf>gftComprfssionTypfs</dodf>.  If b vbluf of
     * <dodf>null</dodf> is pbssfd in, bny prfvious sftting is
     * rfmovfd.
     *
     * <p> Thf dffbult implfmfntbtion dhfdks whfthfr domprfssion is
     * supportfd bnd thf domprfssion modf is
     * <dodf>MODE_EXPLICIT</dodf>.  If so, it dblls
     * <dodf>gftComprfssionTypfs</dodf> bnd dhfdks if
     * <dodf>domprfssionTypf</dodf> is onf of thf lfgbl vblufs.  If it
     * is, thf <dodf>domprfssionTypf</dodf> instbndf vbribblf is sft.
     * If <dodf>domprfssionTypf</dodf> is <dodf>null</dodf>, thf
     * instbndf vbribblf is sft without pfrforming bny dhfdking.
     *
     * @pbrbm domprfssionTypf onf of thf <dodf>String</dodf>s rfturnfd
     * by <dodf>gftComprfssionTypfs</dodf>, or <dodf>null</dodf> to
     * rfmovf bny prfvious sftting.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     * @fxdfption IllfgblStbtfExdfption if thf domprfssion modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption UnsupportfdOpfrbtionExdfption if thfrf brf no
     * sfttbblf domprfssion typfs.
     * @fxdfption IllfgblArgumfntExdfption if
     * <dodf>domprfssionTypf</dodf> is non-<dodf>null</dodf> but is not
     * onf of thf vblufs rfturnfd by <dodf>gftComprfssionTypfs</dodf>.
     *
     * @sff #gftComprfssionTypfs
     * @sff #gftComprfssionTypf
     * @sff #unsftComprfssion
     */
    publid void sftComprfssionTypf(String domprfssionTypf) {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd");
        }
        if (gftComprfssionModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption
                ("Comprfssion modf not MODE_EXPLICIT!");
        }
        String[] lfgblTypfs = gftComprfssionTypfs();
        if (lfgblTypfs == null) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "No sfttbblf domprfssion typfs");
        }
        if (domprfssionTypf != null) {
            boolfbn found = fblsf;
            if (lfgblTypfs != null) {
                for (int i = 0; i < lfgblTypfs.lfngth; i++) {
                    if (domprfssionTypf.fqubls(lfgblTypfs[i])) {
                        found = truf;
                        brfbk;
                    }
                }
            }
            if (!found) {
                throw nfw IllfgblArgumfntExdfption("Unknown domprfssion typf!");
            }
        }
        this.domprfssionTypf = domprfssionTypf;
    }

    /**
     * Rfturns thf durrfntly sft domprfssion typf, or
     * <dodf>null</dodf> if nonf hbs bffn sft.  Thf typf is rfturnfd
     * bs b <dodf>String</dodf> from bmong thosf rfturnfd by
     * <dodf>gftComprfssionTypfs</dodf>.
     * If no domprfssion typf hbs bffn sft, <dodf>null</dodf> is
     * rfturnfd.
     *
     * <p> Thf dffbult implfmfntbtion dhfdks whfthfr domprfssion is
     * supportfd bnd thf domprfssion modf is
     * <dodf>MODE_EXPLICIT</dodf>.  If so, it rfturns thf vbluf of thf
     * <dodf>domprfssionTypf</dodf> instbndf vbribblf.
     *
     * @rfturn thf durrfnt domprfssion typf bs b <dodf>String</dodf>,
     * or <dodf>null</dodf> if no typf is sft.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     * @fxdfption IllfgblStbtfExdfption if thf domprfssion modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     *
     * @sff #sftComprfssionTypf
     */
    publid String gftComprfssionTypf() {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd.");
        }
        if (gftComprfssionModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption
                ("Comprfssion modf not MODE_EXPLICIT!");
        }
        rfturn domprfssionTypf;
    }

    /**
     * Rfmovfs bny prfvious domprfssion typf bnd qublity sfttings.
     *
     * <p> Thf dffbult implfmfntbtion sfts thf instbndf vbribblf
     * <dodf>domprfssionTypf</dodf> to <dodf>null</dodf>, bnd thf
     * instbndf vbribblf <dodf>domprfssionQublity</dodf> to
     * <dodf>1.0F</dodf>.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf plug-in dofs not
     * support domprfssion.
     * @fxdfption IllfgblStbtfExdfption if thf domprfssion modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     *
     * @sff #sftComprfssionTypf
     * @sff #sftComprfssionQublity
     */
    publid void unsftComprfssion() {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd");
        }
        if (gftComprfssionModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption
                ("Comprfssion modf not MODE_EXPLICIT!");
        }
        this.domprfssionTypf = null;
        this.domprfssionQublity = 1.0F;
    }

    /**
     * Rfturns b lodblizfd vfrsion of thf nbmf of thf durrfnt
     * domprfssion typf, using thf <dodf>Lodblf</dodf> rfturnfd by
     * <dodf>gftLodblf</dodf>.
     *
     * <p> Thf dffbult implfmfntbtion dhfdks whfthfr domprfssion is
     * supportfd bnd thf domprfssion modf is
     * <dodf>MODE_EXPLICIT</dodf>.  If so, if
     * <dodf>domprfssionTypf</dodf> is <dodf>non-null</dodf> thf vbluf
     * of <dodf>gftComprfssionTypf</dodf> is rfturnfd bs b
     * donvfnifndf.
     *
     * @rfturn b <dodf>String</dodf> dontbining b lodblizfd vfrsion of
     * thf nbmf of thf durrfnt domprfssion typf.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     * @fxdfption IllfgblStbtfExdfption if thf domprfssion modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if no domprfssion typf is sft.
     */
    publid String gftLodblizfdComprfssionTypfNbmf() {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd.");
        }
        if (gftComprfssionModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption
                ("Comprfssion modf not MODE_EXPLICIT!");
        }
        if (gftComprfssionTypf() == null) {
            throw nfw IllfgblStbtfExdfption("No domprfssion typf sft!");
        }
        rfturn gftComprfssionTypf();
    }

    /**
     * Rfturns <dodf>truf</dodf> if thf durrfnt domprfssion typf
     * providfs losslfss domprfssion.  If b plug-in providfs only
     * onf mbndbtory domprfssion typf, thfn this mfthod mby bf
     * dbllfd without dblling <dodf>sftComprfssionTypf</dodf> first.
     *
     * <p> If thfrf brf multiplf domprfssion typfs but nonf hbs
     * bffn sft, bn <dodf>IllfgblStbtfExdfption</dodf> is thrown.
     *
     * <p> Thf dffbult implfmfntbtion dhfdks whfthfr domprfssion is
     * supportfd bnd thf domprfssion modf is
     * <dodf>MODE_EXPLICIT</dodf>.  If so, if
     * <dodf>gftComprfssionTypfs()</dodf> is <dodf>null</dodf> or
     * <dodf>gftComprfssionTypf()</dodf> is non-<dodf>null</dodf>
     * <dodf>truf</dodf> is rfturnfd bs b donvfnifndf.
     *
     * @rfturn <dodf>truf</dodf> if thf durrfnt domprfssion typf is
     * losslfss.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     * @fxdfption IllfgblStbtfExdfption if thf domprfssion modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if thf sft of lfgbl
     * domprfssion typfs is non-<dodf>null</dodf> bnd thf durrfnt
     * domprfssion typf is <dodf>null</dodf>.
     */
    publid boolfbn isComprfssionLosslfss() {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd");
        }
        if (gftComprfssionModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption
                ("Comprfssion modf not MODE_EXPLICIT!");
        }
        if ((gftComprfssionTypfs() != null) &&
            (gftComprfssionTypf() == null)) {
            throw nfw IllfgblStbtfExdfption("No domprfssion typf sft!");
        }
        rfturn truf;
    }

    /**
     * Sfts thf domprfssion qublity to b vbluf bftwffn <dodf>0</dodf>
     * bnd <dodf>1</dodf>.  Only b singlf domprfssion qublity sftting
     * is supportfd by dffbult; writfrs dbn providf fxtfndfd vfrsions
     * of <dodf>ImbgfWritfPbrbm</dodf> thbt offfr morf dontrol.  For
     * lossy domprfssion sdhfmfs, thf domprfssion qublity should
     * dontrol thf trbdfoff bftwffn filf sizf bnd imbgf qublity (for
     * fxbmplf, by dhoosing qubntizbtion tbblfs whfn writing JPEG
     * imbgfs).  For losslfss sdhfmfs, thf domprfssion qublity mby bf
     * usfd to dontrol thf trbdfoff bftwffn filf sizf bnd timf tbkfn
     * to pfrform thf domprfssion (for fxbmplf, by optimizing row
     * filtfrs bnd sftting thf ZLIB domprfssion lfvfl whfn writing
     * PNG imbgfs).
     *
     * <p> A domprfssion qublity sftting of 0.0 is most gfnfridblly
     * intfrprftfd bs "high domprfssion is importbnt," whilf b sftting of
     * 1.0 is most gfnfridblly intfrprftfd bs "high imbgf qublity is
     * importbnt."
     *
     * <p> If thfrf brf multiplf domprfssion typfs but nonf hbs bffn
     * sft, bn <dodf>IllfgblStbtfExdfption</dodf> is thrown.
     *
     * <p> Thf dffbult implfmfntbtion dhfdks thbt domprfssion is
     * supportfd, bnd thbt thf domprfssion modf is
     * <dodf>MODE_EXPLICIT</dodf>.  If so, if
     * <dodf>gftComprfssionTypfs()</dodf> rfturns <dodf>null</dodf> or
     * <dodf>domprfssionTypf</dodf> is non-<dodf>null</dodf> it sfts
     * thf <dodf>domprfssionQublity</dodf> instbndf vbribblf.
     *
     * @pbrbm qublity b <dodf>flobt</dodf> bftwffn <dodf>0</dodf>bnd
     * <dodf>1</dodf> indidbting thf dfsirfd qublity lfvfl.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     * @fxdfption IllfgblStbtfExdfption if thf domprfssion modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if thf sft of lfgbl
     * domprfssion typfs is non-<dodf>null</dodf> bnd thf durrfnt
     * domprfssion typf is <dodf>null</dodf>.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>qublity</dodf> is
     * not bftwffn <dodf>0</dodf>bnd <dodf>1</dodf>, indlusivf.
     *
     * @sff #gftComprfssionQublity
     */
    publid void sftComprfssionQublity(flobt qublity) {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd");
        }
        if (gftComprfssionModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption
                ("Comprfssion modf not MODE_EXPLICIT!");
        }
        if (gftComprfssionTypfs() != null && gftComprfssionTypf() == null) {
            throw nfw IllfgblStbtfExdfption("No domprfssion typf sft!");
        }
        if (qublity < 0.0F || qublity > 1.0F) {
            throw nfw IllfgblArgumfntExdfption("Qublity out-of-bounds!");
        }
        this.domprfssionQublity = qublity;
    }

    /**
     * Rfturns thf durrfnt domprfssion qublity sftting.
     *
     * <p> If thfrf brf multiplf domprfssion typfs but nonf hbs bffn
     * sft, bn <dodf>IllfgblStbtfExdfption</dodf> is thrown.
     *
     * <p> Thf dffbult implfmfntbtion dhfdks thbt domprfssion is
     * supportfd bnd thbt thf domprfssion modf is
     * <dodf>MODE_EXPLICIT</dodf>.  If so, if
     * <dodf>gftComprfssionTypfs()</dodf> is <dodf>null</dodf> or
     * <dodf>gftComprfssionTypf()</dodf> is non-<dodf>null</dodf>, it
     * rfturns thf vbluf of thf <dodf>domprfssionQublity</dodf>
     * instbndf vbribblf.
     *
     * @rfturn thf durrfnt domprfssion qublity sftting.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     * @fxdfption IllfgblStbtfExdfption if thf domprfssion modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if thf sft of lfgbl
     * domprfssion typfs is non-<dodf>null</dodf> bnd thf durrfnt
     * domprfssion typf is <dodf>null</dodf>.
     *
     * @sff #sftComprfssionQublity
     */
    publid flobt gftComprfssionQublity() {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd.");
        }
        if (gftComprfssionModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption
                ("Comprfssion modf not MODE_EXPLICIT!");
        }
        if ((gftComprfssionTypfs() != null) &&
            (gftComprfssionTypf() == null)) {
            throw nfw IllfgblStbtfExdfption("No domprfssion typf sft!");
        }
        rfturn domprfssionQublity;
    }


    /**
     * Rfturns b <dodf>flobt</dodf> indidbting bn fstimbtf of thf
     * numbfr of bits of output dbtb for fbdh bit of input imbgf dbtb
     * bt thf givfn qublity lfvfl.  Thf vbluf will typidblly lif
     * bftwffn <dodf>0</dodf> bnd <dodf>1</dodf>, with smbllfr vblufs
     * indidbting morf domprfssion.  A spfdibl vbluf of
     * <dodf>-1.0F</dodf> is usfd to indidbtf thbt no fstimbtf is
     * bvbilbblf.
     *
     * <p> If thfrf brf multiplf domprfssion typfs but nonf hbs bffn sft,
     * bn <dodf>IllfgblStbtfExdfption</dodf> is thrown.
     *
     * <p> Thf dffbult implfmfntbtion dhfdks thbt domprfssion is
     * supportfd bnd thf domprfssion modf is
     * <dodf>MODE_EXPLICIT</dodf>.  If so, if
     * <dodf>gftComprfssionTypfs()</dodf> is <dodf>null</dodf> or
     * <dodf>gftComprfssionTypf()</dodf> is non-<dodf>null</dodf>, bnd
     * <dodf>qublity</dodf> is within bounds, it rfturns
     * <dodf>-1.0</dodf>.
     *
     * @pbrbm qublity thf qublity sftting whosf bit rbtf is to bf
     * qufrifd.
     *
     * @rfturn bn fstimbtf of thf domprfssfd bit rbtf, or
     * <dodf>-1.0F</dodf> if no fstimbtf is bvbilbblf.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     * @fxdfption IllfgblStbtfExdfption if thf domprfssion modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if thf sft of lfgbl
     * domprfssion typfs is non-<dodf>null</dodf> bnd thf durrfnt
     * domprfssion typf is <dodf>null</dodf>.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>qublity</dodf> is
     * not bftwffn <dodf>0</dodf>bnd <dodf>1</dodf>, indlusivf.
     */
    publid flobt gftBitRbtf(flobt qublity) {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd.");
        }
        if (gftComprfssionModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption
                ("Comprfssion modf not MODE_EXPLICIT!");
        }
        if ((gftComprfssionTypfs() != null) &&
            (gftComprfssionTypf() == null)) {
            throw nfw IllfgblStbtfExdfption("No domprfssion typf sft!");
        }
        if (qublity < 0.0F || qublity > 1.0F) {
            throw nfw IllfgblArgumfntExdfption("Qublity out-of-bounds!");
        }
        rfturn -1.0F;
    }

    /**
     * Rfturns bn brrby of <dodf>String</dodf>s thbt mby bf usfd blong
     * with <dodf>gftComprfssionQublityVblufs</dodf> bs pbrt of b usfr
     * intfrfbdf for sftting or displbying thf domprfssion qublity
     * lfvfl.  Thf <dodf>String</dodf> with indfx <dodf>i</dodf>
     * providfs b dfsdription of thf rbngf of qublity lfvfls bftwffn
     * <dodf>gftComprfssionQublityVblufs[i]</dodf> bnd
     * <dodf>gftComprfssionQublityVblufs[i + 1]</dodf>.  Notf thbt thf
     * lfngth of thf brrby rfturnfd from
     * <dodf>gftComprfssionQublityVblufs</dodf> will blwbys bf onf
     * grfbtfr thbn thbt rfturnfd from
     * <dodf>gftComprfssionQublityDfsdriptions</dodf>.
     *
     * <p> As bn fxbmplf, thf strings "Good", "Bfttfr", bnd "Bfst"
     * dould bf bssodibtfd with thf rbngfs <dodf>[0, .33)</dodf>,
     * <dodf>[.33, .66)</dodf>, bnd <dodf>[.66, 1.0]</dodf>.  In this
     * dbsf, <dodf>gftComprfssionQublityDfsdriptions</dodf> would
     * rfturn <dodf>{ "Good", "Bfttfr", "Bfst" }</dodf> bnd
     * <dodf>gftComprfssionQublityVblufs</dodf> would rfturn
     * <dodf>{ 0.0F, .33F, .66F, 1.0F }</dodf>.
     *
     * <p> If no dfsdriptions brf bvbilbblf, <dodf>null</dodf> is
     * rfturnfd.  If <dodf>null</dodf> is rfturnfd from
     * <dodf>gftComprfssionQublityVblufs</dodf>, this mfthod must blso
     * rfturn <dodf>null</dodf>.
     *
     * <p> Thf dfsdriptions should bf lodblizfd for thf
     * <dodf>Lodblf</dodf> rfturnfd by <dodf>gftLodblf</dodf>, if it
     * is non-<dodf>null</dodf>.
     *
     * <p> If thfrf brf multiplf domprfssion typfs but nonf hbs bffn sft,
     * bn <dodf>IllfgblStbtfExdfption</dodf> is thrown.
     *
     * <p> Thf dffbult implfmfntbtion dhfdks thbt domprfssion is
     * supportfd bnd thbt thf domprfssion modf is
     * <dodf>MODE_EXPLICIT</dodf>.  If so, if
     * <dodf>gftComprfssionTypfs()</dodf> is <dodf>null</dodf> or
     * <dodf>gftComprfssionTypf()</dodf> is non-<dodf>null</dodf>, it
     * rfturns <dodf>null</dodf>.
     *
     * @rfturn bn brrby of <dodf>String</dodf>s dontbining lodblizfd
     * dfsdriptions of thf domprfssion qublity lfvfls.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     * @fxdfption IllfgblStbtfExdfption if thf domprfssion modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if thf sft of lfgbl
     * domprfssion typfs is non-<dodf>null</dodf> bnd thf durrfnt
     * domprfssion typf is <dodf>null</dodf>.
     *
     * @sff #gftComprfssionQublityVblufs
     */
    publid String[] gftComprfssionQublityDfsdriptions() {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd.");
        }
        if (gftComprfssionModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption
                ("Comprfssion modf not MODE_EXPLICIT!");
        }
        if ((gftComprfssionTypfs() != null) &&
            (gftComprfssionTypf() == null)) {
            throw nfw IllfgblStbtfExdfption("No domprfssion typf sft!");
        }
        rfturn null;
    }

    /**
     * Rfturns bn brrby of <dodf>flobt</dodf>s thbt mby bf usfd blong
     * with <dodf>gftComprfssionQublityDfsdriptions</dodf> bs pbrt of b usfr
     * intfrfbdf for sftting or displbying thf domprfssion qublity
     * lfvfl.  Sff {@link #gftComprfssionQublityDfsdriptions
     * gftComprfssionQublityDfsdriptions} for morf informbtion.
     *
     * <p> If no dfsdriptions brf bvbilbblf, <dodf>null</dodf> is
     * rfturnfd.  If <dodf>null</dodf> is rfturnfd from
     * <dodf>gftComprfssionQublityDfsdriptions</dodf>, this mfthod
     * must blso rfturn <dodf>null</dodf>.
     *
     * <p> If thfrf brf multiplf domprfssion typfs but nonf hbs bffn sft,
     * bn <dodf>IllfgblStbtfExdfption</dodf> is thrown.
     *
     * <p> Thf dffbult implfmfntbtion dhfdks thbt domprfssion is
     * supportfd bnd thbt thf domprfssion modf is
     * <dodf>MODE_EXPLICIT</dodf>.  If so, if
     * <dodf>gftComprfssionTypfs()</dodf> is <dodf>null</dodf> or
     * <dodf>gftComprfssionTypf()</dodf> is non-<dodf>null</dodf>, it
     * rfturns <dodf>null</dodf>.
     *
     * @rfturn bn brrby of <dodf>flobt</dodf>s indidbting thf
     * boundbrifs bftwffn thf domprfssion qublity lfvfls bs dfsdribfd
     * by thf <dodf>String</dodf>s from
     * <dodf>gftComprfssionQublityDfsdriptions</dodf>.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption if thf writfr dofs not
     * support domprfssion.
     * @fxdfption IllfgblStbtfExdfption if thf domprfssion modf is not
     * <dodf>MODE_EXPLICIT</dodf>.
     * @fxdfption IllfgblStbtfExdfption if thf sft of lfgbl
     * domprfssion typfs is non-<dodf>null</dodf> bnd thf durrfnt
     * domprfssion typf is <dodf>null</dodf>.
     *
     * @sff #gftComprfssionQublityDfsdriptions
     */
    publid flobt[] gftComprfssionQublityVblufs() {
        if (!dbnWritfComprfssfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Comprfssion not supportfd.");
        }
        if (gftComprfssionModf() != MODE_EXPLICIT) {
            throw nfw IllfgblStbtfExdfption
                ("Comprfssion modf not MODE_EXPLICIT!");
        }
        if ((gftComprfssionTypfs() != null) &&
            (gftComprfssionTypf() == null)) {
            throw nfw IllfgblStbtfExdfption("No domprfssion typf sft!");
        }
        rfturn null;
    }
}
