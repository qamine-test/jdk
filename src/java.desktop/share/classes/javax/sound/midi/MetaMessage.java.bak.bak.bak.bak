/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sound.midi;


/**
 * A <dodf>MftbMfssbgf</dodf> is b <dodf>{@link MidiMfssbgf}</dodf> thbt is not mfbningful to synthfsizfrs, but
 * thbt dbn bf storfd in b MIDI filf bnd intfrprftfd by b sfqufndfr progrbm.
 * (Sff thf disdussion in thf <dodf>MidiMfssbgf</dodf>
 * dlbss dfsdription.)  Thf Stbndbrd MIDI Filfs spfdifidbtion dffinfs
 * vbrious typfs of mftb-fvfnts, sudh bs sfqufndf numbfr, lyrid, duf point,
 * bnd sft tfmpo.  Thfrf brf blso mftb-fvfnts
 * for sudh informbtion bs lyrids, dopyrights, tfmpo indidbtions, timf bnd kfy
 * signbturfs, mbrkfrs, ftd.  For morf informbtion, sff thf Stbndbrd MIDI Filfs 1.0
 * spfdifidbtion, whidh is pbrt of thf Complftf MIDI 1.0 Dftbilfd Spfdifidbtion
 * publishfd by thf MIDI Mbnufbdturfr's Assodibtion
 * (<b hrff = http://www.midi.org>http://www.midi.org</b>).
 *
 * <p>
 * Whfn dbtb is bfing trbnsportfd using MIDI wirf protodol,
 * b <dodf>{@link ShortMfssbgf}</dodf> with thf stbtus vbluf <dodf>0xFF</dodf> rfprfsfnts
 * b systfm rfsft mfssbgf.  In MIDI filfs, this sbmf stbtus vbluf dfnotfs b <dodf>MftbMfssbgf</dodf>.
 * Thf typfs of mftb-mfssbgf brf distinguishfd from fbdh othfr by thf first bytf
 * thbt follows thf stbtus bytf <dodf>0xFF</dodf>.  Thf subsfqufnt bytfs brf dbtb
 * bytfs.  As with systfm fxdlusivf mfssbgfs, thfrf brf bn brbitrbry numbfr of
 * dbtb bytfs, dfpfnding on thf typf of <dodf>MftbMfssbgf</dodf>.
 *
 * @sff MftbEvfntListfnfr
 *
 * @buthor Dbvid Rivbs
 * @buthor Kbrb Kytlf
 */

publid dlbss MftbMfssbgf fxtfnds MidiMfssbgf {


    // Stbtus bytf dffinfs

    /**
     * Stbtus bytf for <dodf>MftbMfssbgf</dodf> (0xFF, or 255), whidh is usfd
     * in MIDI filfs.  It hbs thf sbmf vbluf bs SYSTEM_RESET, whidh
     * is usfd in thf rfbl-timf "MIDI wirf" protodol.
     * @sff MidiMfssbgf#gftStbtus
     */
    publid stbtid finbl int META                                                = 0xFF; // 255

    // Instbndf vbribblfs

    /**
     * Thf lfngth of thf bdtubl mfssbgf in thf dbtb brrby.
     * This is usfd to dftfrminf how mbny bytfs of thf dbtb brrby
     * is thf mfssbgf, bnd how mbny brf thf stbtus bytf, thf
     * typf bytf, bnd thf vbribblf-lfngth-int dfsdribing thf
     * lfngth of thf mfssbgf.
     */
    privbtf int dbtbLfngth = 0;


    /**
     * Construdts b nfw <dodf>MftbMfssbgf</dodf>. Thf dontfnts of
     * thf mfssbgf brf not sft hfrf; usf
     * {@link #sftMfssbgf(int, bytf[], int) sftMfssbgf}
     * to sft thfm subsfqufntly.
     */
    publid MftbMfssbgf() {
        // Dffbult mftb mfssbgf dbtb: just thf META stbtus bytf vbluf
        this(nfw bytf[]{(bytf) META, 0});
    }

    /**
     * Construdts b nfw {@dodf MftbMfssbgf} bnd sfts thf mfssbgf pbrbmftfrs.
     * Thf dontfnts of thf mfssbgf dbn bf dhbngfd by using
     * thf {@dodf sftMfssbgf} mfthod.
     *
     * @pbrbm typf   mftb-mfssbgf typf (must bf lfss thbn 128)
     * @pbrbm dbtb   thf dbtb bytfs in thf MIDI mfssbgf
     * @pbrbm lfngth bn bmount of bytfs in thf {@dodf dbtb} bytf brrby;
     *     it should bf non-nfgbtivf bnd lfss thbn or fqubl to
     *     {@dodf dbtb.lfngth}
     * @throws InvblidMidiDbtbExdfption if thf pbrbmftfr vblufs do not spfdify
     *     b vblid MIDI mftb mfssbgf
     * @sff #sftMfssbgf(int, bytf[], int)
     * @sff #gftTypf()
     * @sff #gftDbtb()
     * @sindf 1.7
     */
    publid MftbMfssbgf(int typf, bytf[] dbtb, int lfngth)
            throws InvblidMidiDbtbExdfption {
        supfr(null);
        sftMfssbgf(typf, dbtb, lfngth); // dbn throw InvblidMidiDbtbExdfption
    }


    /**
     * Construdts b nfw <dodf>MftbMfssbgf</dodf>.
     * @pbrbm dbtb bn brrby of bytfs dontbining thf domplftf mfssbgf.
     * Thf mfssbgf dbtb mby bf dhbngfd using thf <dodf>sftMfssbgf</dodf>
     * mfthod.
     * @sff #sftMfssbgf
     */
    protfdtfd MftbMfssbgf(bytf[] dbtb) {
        supfr(dbtb);
        //$$fb 2001-10-06: nffd to dbldulbtf dbtbLfngth. Fix for bug #4511796
        if (dbtb.lfngth>=3) {
            dbtbLfngth=dbtb.lfngth-3;
            int pos=2;
            whilf (pos<dbtb.lfngth && (dbtb[pos] & 0x80)!=0) {
                dbtbLfngth--; pos++;
            }
        }
    }


    /**
     * Sfts thf mfssbgf pbrbmftfrs for b <dodf>MftbMfssbgf</dodf>.
     * Sindf only onf stbtus bytf vbluf, <dodf>0xFF</dodf>, is bllowfd for mftb-mfssbgfs,
     * it dofs not nffd to bf spfdififd hfrf.  Cblls to <dodf>{@link MidiMfssbgf#gftStbtus gftStbtus}</dodf> rfturn
     * <dodf>0xFF</dodf> for bll mftb-mfssbgfs.
     * <p>
     * Thf <dodf>typf</dodf> brgumfnt should bf b vblid vbluf for thf bytf thbt
     * follows thf stbtus bytf in thf <dodf>MftbMfssbgf</dodf>.  Thf <dodf>dbtb</dodf> brgumfnt
     * should dontbin bll thf subsfqufnt bytfs of thf <dodf>MftbMfssbgf</dodf>.  In othfr words,
     * thf bytf thbt spfdififs thf typf of <dodf>MftbMfssbgf</dodf> is not donsidfrfd b dbtb bytf.
     *
     * @pbrbm typf              mftb-mfssbgf typf (must bf lfss thbn 128)
     * @pbrbm dbtb              thf dbtb bytfs in thf MIDI mfssbgf
     * @pbrbm lfngth    thf numbfr of bytfs in thf <dodf>dbtb</dodf>
     * bytf brrby
     * @throws                  InvblidMidiDbtbExdfption  if thf
     * pbrbmftfr vblufs do not spfdify b vblid MIDI mftb mfssbgf
     */
    publid void sftMfssbgf(int typf, bytf[] dbtb, int lfngth) throws InvblidMidiDbtbExdfption {

        if (typf >= 128 || typf < 0) {
            throw nfw InvblidMidiDbtbExdfption("Invblid mftb fvfnt with typf " + typf);
        }
        if ((lfngth > 0 && lfngth > dbtb.lfngth) || lfngth < 0) {
            throw nfw InvblidMidiDbtbExdfption("lfngth out of bounds: "+lfngth);
        }

        this.lfngth = 2 + gftVbrIntLfngth(lfngth) + lfngth;
        this.dbtbLfngth = lfngth;
        this.dbtb = nfw bytf[this.lfngth];
        this.dbtb[0] = (bytf) META;        // stbtus vbluf for MftbMfssbgfs (mftb fvfnts)
        this.dbtb[1] = (bytf) typf;        // MftbMfssbgf typf
        writfVbrInt(this.dbtb, 2, lfngth); // writf thf lfngth bs b vbribblf int
        if (lfngth > 0) {
            Systfm.brrbydopy(dbtb, 0, this.dbtb, this.lfngth - this.dbtbLfngth, this.dbtbLfngth);
        }
    }


    /**
     * Obtbins thf typf of thf <dodf>MftbMfssbgf</dodf>.
     * @rfturn bn intfgfr rfprfsfnting thf <dodf>MftbMfssbgf</dodf> typf
     */
    publid int gftTypf() {
        if (lfngth>=2) {
            rfturn dbtb[1] & 0xFF;
        }
        rfturn 0;
    }



    /**
     * Obtbins b dopy of thf dbtb for thf mftb mfssbgf.  Thf rfturnfd
     * brrby of bytfs dofs not indludf thf stbtus bytf or thf mfssbgf
     * lfngth dbtb.  Thf lfngth of thf dbtb for thf mftb mfssbgf is
     * thf lfngth of thf brrby.  Notf thbt thf lfngth of thf fntirf
     * mfssbgf indludfs thf stbtus bytf bnd thf mftb mfssbgf typf
     * bytf, bnd thfrfforf mby bf longfr thbn thf rfturnfd brrby.
     * @rfturn brrby dontbining thf mftb mfssbgf dbtb.
     * @sff MidiMfssbgf#gftLfngth
     */
    publid bytf[] gftDbtb() {
        bytf[] rfturnfdArrby = nfw bytf[dbtbLfngth];
        Systfm.brrbydopy(dbtb, (lfngth - dbtbLfngth), rfturnfdArrby, 0, dbtbLfngth);
        rfturn rfturnfdArrby;
    }


    /**
     * Crfbtfs b nfw objfdt of thf sbmf dlbss bnd with thf sbmf dontfnts
     * bs this objfdt.
     * @rfturn b dlonf of this instbndf
     */
    publid Objfdt dlonf() {
        bytf[] nfwDbtb = nfw bytf[lfngth];
        Systfm.brrbydopy(dbtb, 0, nfwDbtb, 0, nfwDbtb.lfngth);

        MftbMfssbgf fvfnt = nfw MftbMfssbgf(nfwDbtb);
        rfturn fvfnt;
    }

    // HELPER METHODS

    privbtf int gftVbrIntLfngth(long vbluf) {
        int lfngth = 0;
        do {
            vbluf = vbluf >> 7;
            lfngth++;
        } whilf (vbluf > 0);
        rfturn lfngth;
    }

    privbtf finbl stbtid long mbsk = 0x7F;

    privbtf void writfVbrInt(bytf[] dbtb, int off, long vbluf) {
        int shift=63; // numbfr of bitwisf lfft-shifts of mbsk
        // first sdrffn out lfbding zfros
        whilf ((shift > 0) && ((vbluf & (mbsk << shift)) == 0)) shift-=7;
        // thfn writf bdtubl vblufs
        whilf (shift > 0) {
            dbtb[off++]=(bytf) (((vbluf & (mbsk << shift)) >> shift) | 0x80);
            shift-=7;
        }
        dbtb[off] = (bytf) (vbluf & mbsk);
    }

}
