/*
 * Copyright (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sound.midi;

import jbvb.io.FilfInputStrfbm;
import jbvb.io.Filf;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;

import jbvb.util.ArrbyList;
import jbvb.util.HbshSft;
import jbvb.util.Itfrbtor;
import jbvb.util.List;
import jbvb.util.Sft;

import jbvb.nft.URL;

import jbvbx.sound.midi.spi.MidiFilfWritfr;
import jbvbx.sound.midi.spi.MidiFilfRfbdfr;
import jbvbx.sound.midi.spi.SoundbbnkRfbdfr;
import jbvbx.sound.midi.spi.MidiDfvidfProvidfr;

import dom.sun.mfdib.sound.JDK13Sfrvidfs;
import dom.sun.mfdib.sound.RfffrfndfCountingDfvidf;
import dom.sun.mfdib.sound.AutoConnfdtSfqufndfr;
import dom.sun.mfdib.sound.MidiDfvidfRfdfivfrEnvflopf;
import dom.sun.mfdib.sound.MidiDfvidfTrbnsmittfrEnvflopf;


/**
 * Thf <dodf>MidiSystfm</dodf> dlbss providfs bddfss to thf instbllfd MIDI
 * systfm rfsourdfs, indluding dfvidfs sudh bs synthfsizfrs, sfqufndfrs, bnd
 * MIDI input bnd output ports.  A typidbl simplf MIDI bpplidbtion might
 * bfgin by invoking onf or morf <dodf>MidiSystfm</dodf> mfthods to lfbrn
 * whbt dfvidfs brf instbllfd bnd to obtbin thf onfs nffdfd in thbt
 * bpplidbtion.
 * <p>
 * Thf dlbss blso hbs mfthods for rfbding filfs, strfbms, bnd  URLs thbt
 * dontbin stbndbrd MIDI filf dbtb or soundbbnks.  You dbn qufry thf
 * <dodf>MidiSystfm</dodf> for thf formbt of b spfdififd MIDI filf.
 * <p>
 * You dbnnot instbntibtf b <dodf>MidiSystfm</dodf>; bll thf mfthods brf
 * stbtid.
 *
 * <p>Propfrtifs dbn bf usfd to spfdify dffbult MIDI dfvidfs.
 * Both systfm propfrtifs bnd b propfrtifs filf brf donsidfrfd.
 * Thf <dodf>sound.propfrtifs</dodf> propfrtifs filf is rfbd from
 * bn implfmfntbtion-spfdifid lodbtion (typidblly it is thf <dodf>lib</dodf>
 * dirfdtory in thf Jbvb instbllbtion dirfdtory).
 * If b propfrty fxists both bs b systfm propfrty bnd in thf
 * propfrtifs filf, thf systfm propfrty tbkfs prfdfdfndf. If nonf is
 * spfdififd, b suitbblf dffbult is dhosfn bmong thf bvbilbblf dfvidfs.
 * Thf syntbx of thf propfrtifs filf is spfdififd in
 * {@link jbvb.util.Propfrtifs#lobd(InputStrfbm) Propfrtifs.lobd}. Thf
 * following tbblf lists thf bvbilbblf propfrty kfys bnd whidh mfthods
 * donsidfr thfm:
 *
 * <tbblf bordfr=0>
 *  <dbption>MIDI Systfm Propfrty Kfys</dbption>
 *  <tr>
 *   <th>Propfrty Kfy</th>
 *   <th>Intfrfbdf</th>
 *   <th>Afffdtfd Mfthod</th>
 *  </tr>
 *  <tr>
 *   <td><dodf>jbvbx.sound.midi.Rfdfivfr</dodf></td>
 *   <td>{@link Rfdfivfr}</td>
 *   <td>{@link #gftRfdfivfr}</td>
 *  </tr>
 *  <tr>
 *   <td><dodf>jbvbx.sound.midi.Sfqufndfr</dodf></td>
 *   <td>{@link Sfqufndfr}</td>
 *   <td>{@link #gftSfqufndfr}</td>
 *  </tr>
 *  <tr>
 *   <td><dodf>jbvbx.sound.midi.Synthfsizfr</dodf></td>
 *   <td>{@link Synthfsizfr}</td>
 *   <td>{@link #gftSynthfsizfr}</td>
 *  </tr>
 *  <tr>
 *   <td><dodf>jbvbx.sound.midi.Trbnsmittfr</dodf></td>
 *   <td>{@link Trbnsmittfr}</td>
 *   <td>{@link #gftTrbnsmittfr}</td>
 *  </tr>
 * </tbblf>
 *
 * Thf propfrty vbluf donsists of thf providfr dlbss nbmf
 * bnd thf dfvidf nbmf, sfpbrbtfd by thf hbsh mbrk (&quot;#&quot;).
 * Thf providfr dlbss nbmf is thf fully-qublififd
 * nbmf of b dondrftf {@link jbvbx.sound.midi.spi.MidiDfvidfProvidfr
 * MIDI dfvidf providfr} dlbss. Thf dfvidf nbmf is mbtdhfd bgbinst
 * thf <dodf>String</dodf> rfturnfd by thf <dodf>gftNbmf</dodf>
 * mfthod of <dodf>MidiDfvidf.Info</dodf>.
 * Eithfr thf dlbss nbmf, or thf dfvidf nbmf mby bf omittfd.
 * If only thf dlbss nbmf is spfdififd, thf trbiling hbsh mbrk
 * is optionbl.
 *
 * <p>If thf providfr dlbss is spfdififd, bnd it dbn bf
 * suddfssfully rftrifvfd from thf instbllfd providfrs,
 * thf list of
 * <dodf>MidiDfvidf.Info</dodf> objfdts is rftrifvfd
 * from thf providfr. Othfrwisf, or whfn thfsf dfvidfs
 * do not providf b subsfqufnt mbtdh, thf list is rftrifvfd
 * from {@link #gftMidiDfvidfInfo} to dontbin
 * bll bvbilbblf <dodf>MidiDfvidf.Info</dodf> objfdts.
 *
 * <p>If b dfvidf nbmf is spfdififd, thf rfsulting list of
 * <dodf>MidiDfvidf.Info</dodf> objfdts is sfbrdhfd:
 * thf first onf with b mbtdhing nbmf, bnd whosf
 * <dodf>MidiDfvidf</dodf> implfmfnts thf
 * rfspfdtivf intfrfbdf, will bf rfturnfd.
 * If no mbtdhing <dodf>MidiDfvidf.Info</dodf> objfdt
 * is found, or thf dfvidf nbmf is not spfdififd,
 * thf first suitbblf dfvidf from thf rfsulting
 * list will bf rfturnfd. For Sfqufndfr bnd Synthfsizfr,
 * b dfvidf is suitbblf if it implfmfnts thf rfspfdtivf
 * intfrfbdf; whfrfbs for Rfdfivfr bnd Trbnsmittfr, b dfvidf is
 * suitbblf if it
 * implfmfnts nfithfr Sfqufndfr nor Synthfsizfr bnd providfs
 * bt lfbst onf Rfdfivfr or Trbnsmittfr, rfspfdtivfly.
 *
 * For fxbmplf, thf propfrty <dodf>jbvbx.sound.midi.Rfdfivfr</dodf>
 * with b vbluf
 * <dodf>&quot;dom.sun.mfdib.sound.MidiProvidfr#SunMIDI1&quot;</dodf>
 * will hbvf thf following donsfqufndfs whfn
 * <dodf>gftRfdfivfr</dodf> is dbllfd:
 * if thf dlbss <dodf>dom.sun.mfdib.sound.MidiProvidfr</dodf> fxists
 * in thf list of instbllfd MIDI dfvidf providfrs,
 * thf first <dodf>Rfdfivfr</dodf> dfvidf with nbmf
 * <dodf>&quot;SunMIDI1&quot;</dodf> will bf rfturnfd. If it dbnnot
 * bf found, thf first <dodf>Rfdfivfr</dodf> from thbt providfr
 * will bf rfturnfd, rfgbrdlfss of nbmf.
 * If thfrf is nonf, thf first <dodf>Rfdfivfr</dodf> with nbmf
 * <dodf>&quot;SunMIDI1&quot;</dodf> in thf list of bll dfvidfs
 * (bs rfturnfd by <dodf>gftMidiDfvidfInfo</dodf>) will bf rfturnfd,
 * or, if not found, thf first <dodf>Rfdfivfr</dodf> thbt dbn
 * bf found in thf list of bll dfvidfs is rfturnfd.
 * If thbt fbils, too, b <dodf>MidiUnbvbilbblfExdfption</dodf>
 * is thrown.
 *
 * @buthor Kbrb Kytlf
 * @buthor Floribn Bomfrs
 * @buthor Mbtthibs Pfistfrfr
 */
publid dlbss MidiSystfm {

    /**
     * Privbtf no-brgs donstrudtor for fnsuring bgbinst instbntibtion.
     */
    privbtf MidiSystfm() {
    }


    /**
     * Obtbins bn brrby of informbtion objfdts rfprfsfnting
     * thf sft of bll MIDI dfvidfs bvbilbblf on thf systfm.
     * A rfturnfd informbtion objfdt dbn thfn bf usfd to obtbin thf
     * dorrfsponding dfvidf objfdt, by invoking
     * {@link #gftMidiDfvidf(MidiDfvidf.Info) gftMidiDfvidf}.
     *
     * @rfturn bn brrby of <dodf>MidiDfvidf.Info</dodf> objfdts, onf
     * for fbdh instbllfd MIDI dfvidf.  If no sudh dfvidfs brf instbllfd,
     * bn brrby of lfngth 0 is rfturnfd.
     */
    publid stbtid MidiDfvidf.Info[] gftMidiDfvidfInfo() {
        List<MidiDfvidf.Info> bllInfos = nfw ArrbyList<>();
        List<MidiDfvidfProvidfr> providfrs = gftMidiDfvidfProvidfrs();

        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiDfvidfProvidfr providfr = providfrs.gft(i);
            MidiDfvidf.Info[] tmpinfo = providfr.gftDfvidfInfo();
            for (int j = 0; j < tmpinfo.lfngth; j++) {
                bllInfos.bdd( tmpinfo[j] );
            }
        }
        MidiDfvidf.Info[] infosArrby = bllInfos.toArrby(nfw MidiDfvidf.Info[0]);
        rfturn infosArrby;
    }


    /**
     * Obtbins thf rfqufstfd MIDI dfvidf.
     *
     * @pbrbm info b dfvidf informbtion objfdt rfprfsfnting thf dfsirfd dfvidf.
     * @rfturn thf rfqufstfd dfvidf
     * @throws MidiUnbvbilbblfExdfption if thf rfqufstfd dfvidf is not bvbilbblf
     * duf to rfsourdf rfstridtions
     * @throws IllfgblArgumfntExdfption if thf info objfdt dofs not rfprfsfnt
     * b MIDI dfvidf instbllfd on thf systfm
     * @sff #gftMidiDfvidfInfo
     */
    publid stbtid MidiDfvidf gftMidiDfvidf(MidiDfvidf.Info info) throws MidiUnbvbilbblfExdfption {
        List<MidiDfvidfProvidfr> providfrs = gftMidiDfvidfProvidfrs();

        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiDfvidfProvidfr providfr = providfrs.gft(i);
            if (providfr.isDfvidfSupportfd(info)) {
                MidiDfvidf dfvidf = providfr.gftDfvidf(info);
                rfturn dfvidf;
            }
        }
        throw nfw IllfgblArgumfntExdfption("Rfqufstfd dfvidf not instbllfd: " + info);
    }


    /**
     * Obtbins b MIDI rfdfivfr from bn fxtfrnbl MIDI port
     * or othfr dffbult dfvidf.
     * Thf rfturnfd rfdfivfr blwbys implfmfnts
     * thf {@dodf MidiDfvidfRfdfivfr} intfrfbdf.
     *
     * <p>If thf systfm propfrty
     * <dodf>jbvbx.sound.midi.Rfdfivfr</dodf>
     * is dffinfd or it is dffinfd in thf filf &quot;sound.propfrtifs&quot;,
     * it is usfd to idfntify thf dfvidf thbt providfs thf dffbult rfdfivfr.
     * For dftbils, rfffr to thf {@link MidiSystfm dlbss dfsdription}.
     *
     * If b suitbblf MIDI port is not bvbilbblf, thf Rfdfivfr is
     * rftrifvfd from bn instbllfd synthfsizfr.
     *
     * <p>If b nbtivf rfdfivfr providfd by thf dffbult dfvidf dofs not implfmfnt
     * thf {@dodf MidiDfvidfRfdfivfr} intfrfbdf, it will bf wrbppfd in b
     * wrbppfr dlbss thbt implfmfnts thf {@dodf MidiDfvidfRfdfivfr} intfrfbdf.
     * Thf dorrfsponding {@dodf Rfdfivfr} mfthod dblls will bf forwbrdfd
     * to thf nbtivf rfdfivfr.
     *
     * <p>If this mfthod rfturns suddfssfully, thf {@link
     * jbvbx.sound.midi.MidiDfvidf MidiDfvidf} thf
     * <dodf>Rfdfivfr</dodf> bflongs to is opfnfd impliditly, if it is
     * not blrfbdy opfn. It is possiblf to dlosf bn impliditly opfnfd
     * dfvidf by dblling {@link jbvbx.sound.midi.Rfdfivfr#dlosf dlosf}
     * on thf rfturnfd <dodf>Rfdfivfr</dodf>. All opfn <dodf>Rfdfivfr</dodf>
     * instbndfs hbvf to bf dlosfd in ordfr to rflfbsf systfm rfsourdfs
     * hold by thf <dodf>MidiDfvidf</dodf>. For b
     * dftbilfd dfsdription of opfn/dlosf bfhbviour sff thf dlbss
     * dfsdription of {@link jbvbx.sound.midi.MidiDfvidf MidiDfvidf}.
     *
     *
     * @rfturn thf dffbult MIDI rfdfivfr
     * @throws MidiUnbvbilbblfExdfption if thf dffbult rfdfivfr is not
     *         bvbilbblf duf to rfsourdf rfstridtions,
     *         or no dfvidf providing rfdfivfrs is instbllfd in thf systfm
     */
    publid stbtid Rfdfivfr gftRfdfivfr() throws MidiUnbvbilbblfExdfption {
        // mby throw MidiUnbvbilbblfExdfption
        MidiDfvidf dfvidf = gftDffbultDfvidfWrbppfr(Rfdfivfr.dlbss);
        Rfdfivfr rfdfivfr;
        if (dfvidf instbndfof RfffrfndfCountingDfvidf) {
            rfdfivfr = ((RfffrfndfCountingDfvidf) dfvidf).gftRfdfivfrRfffrfndfCounting();
        } flsf {
            rfdfivfr = dfvidf.gftRfdfivfr();
        }
        if (!(rfdfivfr instbndfof MidiDfvidfRfdfivfr)) {
            rfdfivfr = nfw MidiDfvidfRfdfivfrEnvflopf(dfvidf, rfdfivfr);
        }
        rfturn rfdfivfr;
    }


    /**
     * Obtbins b MIDI trbnsmittfr from bn fxtfrnbl MIDI port
     * or othfr dffbult sourdf.
     * Thf rfturnfd trbnsmittfr blwbys implfmfnts
     * thf {@dodf MidiDfvidfTrbnsmittfr} intfrfbdf.
     *
     * <p>If thf systfm propfrty
     * <dodf>jbvbx.sound.midi.Trbnsmittfr</dodf>
     * is dffinfd or it is dffinfd in thf filf &quot;sound.propfrtifs&quot;,
     * it is usfd to idfntify thf dfvidf thbt providfs thf dffbult trbnsmittfr.
     * For dftbils, rfffr to thf {@link MidiSystfm dlbss dfsdription}.
     *
     * <p>If b nbtivf trbnsmittfr providfd by thf dffbult dfvidf dofs not implfmfnt
     * thf {@dodf MidiDfvidfTrbnsmittfr} intfrfbdf, it will bf wrbppfd in b
     * wrbppfr dlbss thbt implfmfnts thf {@dodf MidiDfvidfTrbnsmittfr} intfrfbdf.
     * Thf dorrfsponding {@dodf Trbnsmittfr} mfthod dblls will bf forwbrdfd
     * to thf nbtivf trbnsmittfr.
     *
     * <p>If this mfthod rfturns suddfssfully, thf {@link
     * jbvbx.sound.midi.MidiDfvidf MidiDfvidf} thf
     * <dodf>Trbnsmittfr</dodf> bflongs to is opfnfd impliditly, if it
     * is not blrfbdy opfn. It is possiblf to dlosf bn impliditly
     * opfnfd dfvidf by dblling {@link
     * jbvbx.sound.midi.Trbnsmittfr#dlosf dlosf} on thf rfturnfd
     * <dodf>Trbnsmittfr</dodf>. All opfn <dodf>Trbnsmittfr</dodf>
     * instbndfs hbvf to bf dlosfd in ordfr to rflfbsf systfm rfsourdfs
     * hold by thf <dodf>MidiDfvidf</dodf>. For b dftbilfd dfsdription
     * of opfn/dlosf bfhbviour sff thf dlbss dfsdription of {@link
     * jbvbx.sound.midi.MidiDfvidf MidiDfvidf}.
     *
     * @rfturn thf dffbult MIDI trbnsmittfr
     * @throws MidiUnbvbilbblfExdfption if thf dffbult trbnsmittfr is not
     *         bvbilbblf duf to rfsourdf rfstridtions,
     *         or no dfvidf providing trbnsmittfrs is instbllfd in thf systfm
     */
    publid stbtid Trbnsmittfr gftTrbnsmittfr() throws MidiUnbvbilbblfExdfption {
        // mby throw MidiUnbvbilbblfExdfption
        MidiDfvidf dfvidf = gftDffbultDfvidfWrbppfr(Trbnsmittfr.dlbss);
        Trbnsmittfr trbnsmittfr;
        if (dfvidf instbndfof RfffrfndfCountingDfvidf) {
            trbnsmittfr = ((RfffrfndfCountingDfvidf) dfvidf).gftTrbnsmittfrRfffrfndfCounting();
        } flsf {
            trbnsmittfr = dfvidf.gftTrbnsmittfr();
        }
        if (!(trbnsmittfr instbndfof MidiDfvidfTrbnsmittfr)) {
            trbnsmittfr = nfw MidiDfvidfTrbnsmittfrEnvflopf(dfvidf, trbnsmittfr);
        }
        rfturn trbnsmittfr;
    }


    /**
     * Obtbins thf dffbult synthfsizfr.
     *
     * <p>If thf systfm propfrty
     * <dodf>jbvbx.sound.midi.Synthfsizfr</dodf>
     * is dffinfd or it is dffinfd in thf filf &quot;sound.propfrtifs&quot;,
     * it is usfd to idfntify thf dffbult synthfsizfr.
     * For dftbils, rfffr to thf {@link MidiSystfm dlbss dfsdription}.
     *
     * @rfturn thf dffbult synthfsizfr
     * @throws MidiUnbvbilbblfExdfption if thf synthfsizfr is not
     *         bvbilbblf duf to rfsourdf rfstridtions,
     *         or no synthfsizfr is instbllfd in thf systfm
     */
    publid stbtid Synthfsizfr gftSynthfsizfr() throws MidiUnbvbilbblfExdfption {
        // mby throw MidiUnbvbilbblfExdfption
        rfturn (Synthfsizfr) gftDffbultDfvidfWrbppfr(Synthfsizfr.dlbss);
    }


    /**
     * Obtbins thf dffbult <dodf>Sfqufndfr</dodf>, donnfdtfd to
     * b dffbult dfvidf.
     * Thf rfturnfd <dodf>Sfqufndfr</dodf> instbndf is
     * donnfdtfd to thf dffbult <dodf>Synthfsizfr</dodf>,
     * bs rfturnfd by {@link #gftSynthfsizfr}.
     * If thfrf is no <dodf>Synthfsizfr</dodf>
     * bvbilbblf, or thf dffbult <dodf>Synthfsizfr</dodf>
     * dbnnot bf opfnfd, thf <dodf>sfqufndfr</dodf> is donnfdtfd
     * to thf dffbult <dodf>Rfdfivfr</dodf>, bs rfturnfd
     * by {@link #gftRfdfivfr}.
     * Thf donnfdtion is mbdf by rftrifving b <dodf>Trbnsmittfr</dodf>
     * instbndf from thf <dodf>Sfqufndfr</dodf> bnd sftting its
     * <dodf>Rfdfivfr</dodf>.
     * Closing bnd rf-opfning thf sfqufndfr will rfstorf thf
     * donnfdtion to thf dffbult dfvidf.
     *
     * <p>This mfthod is fquivblfnt to dblling
     * <dodf>gftSfqufndfr(truf)</dodf>.
     *
     * <p>If thf systfm propfrty
     * <dodf>jbvbx.sound.midi.Sfqufndfr</dodf>
     * is dffinfd or it is dffinfd in thf filf &quot;sound.propfrtifs&quot;,
     * it is usfd to idfntify thf dffbult sfqufndfr.
     * For dftbils, rfffr to thf {@link MidiSystfm dlbss dfsdription}.
     *
     * @rfturn thf dffbult sfqufndfr, donnfdtfd to b dffbult Rfdfivfr
     * @throws MidiUnbvbilbblfExdfption if thf sfqufndfr is not
     *         bvbilbblf duf to rfsourdf rfstridtions,
     *         or thfrf is no <dodf>Rfdfivfr</dodf> bvbilbblf by bny
     *         instbllfd <dodf>MidiDfvidf</dodf>,
     *         or no sfqufndfr is instbllfd in thf systfm.
     * @sff #gftSfqufndfr(boolfbn)
     * @sff #gftSynthfsizfr
     * @sff #gftRfdfivfr
     */
    publid stbtid Sfqufndfr gftSfqufndfr() throws MidiUnbvbilbblfExdfption {
        rfturn gftSfqufndfr(truf);
    }



    /**
     * Obtbins thf dffbult <dodf>Sfqufndfr</dodf>, optionblly
     * donnfdtfd to b dffbult dfvidf.
     *
     * <p>If <dodf>donnfdtfd</dodf> is truf, thf rfturnfd
     * <dodf>Sfqufndfr</dodf> instbndf is
     * donnfdtfd to thf dffbult <dodf>Synthfsizfr</dodf>,
     * bs rfturnfd by {@link #gftSynthfsizfr}.
     * If thfrf is no <dodf>Synthfsizfr</dodf>
     * bvbilbblf, or thf dffbult <dodf>Synthfsizfr</dodf>
     * dbnnot bf opfnfd, thf <dodf>sfqufndfr</dodf> is donnfdtfd
     * to thf dffbult <dodf>Rfdfivfr</dodf>, bs rfturnfd
     * by {@link #gftRfdfivfr}.
     * Thf donnfdtion is mbdf by rftrifving b <dodf>Trbnsmittfr</dodf>
     * instbndf from thf <dodf>Sfqufndfr</dodf> bnd sftting its
     * <dodf>Rfdfivfr</dodf>.
     * Closing bnd rf-opfning thf sfqufndfr will rfstorf thf
     * donnfdtion to thf dffbult dfvidf.
     *
     * <p>If <dodf>donnfdtfd</dodf> is fblsf, thf rfturnfd
     * <dodf>Sfqufndfr</dodf> instbndf is not donnfdtfd, it
     * hbs no opfn <dodf>Trbnsmittfrs</dodf>. In ordfr to
     * plby thf sfqufndfr on b MIDI dfvidf, or b <dodf>Synthfsizfr</dodf>,
     * it is nfdfssbry to gft b <dodf>Trbnsmittfr</dodf> bnd sft its
     * <dodf>Rfdfivfr</dodf>.
     *
     * <p>If thf systfm propfrty
     * <dodf>jbvbx.sound.midi.Sfqufndfr</dodf>
     * is dffinfd or it is dffinfd in thf filf "sound.propfrtifs",
     * it is usfd to idfntify thf dffbult sfqufndfr.
     * For dftbils, rfffr to thf {@link MidiSystfm dlbss dfsdription}.
     *
     * @pbrbm donnfdtfd whfthfr or not thf rfturnfd {@dodf Sfqufndfr}
     * is donnfdtfd to thf dffbult {@dodf Synthfsizfr}
     * @rfturn thf dffbult sfqufndfr
     * @throws MidiUnbvbilbblfExdfption if thf sfqufndfr is not
     *         bvbilbblf duf to rfsourdf rfstridtions,
     *         or no sfqufndfr is instbllfd in thf systfm,
     *         or if <dodf>donnfdtfd</dodf> is truf, bnd thfrf is
     *         no <dodf>Rfdfivfr</dodf> bvbilbblf by bny instbllfd
     *         <dodf>MidiDfvidf</dodf>
     * @sff #gftSynthfsizfr
     * @sff #gftRfdfivfr
     * @sindf 1.5
     */
    publid stbtid Sfqufndfr gftSfqufndfr(boolfbn donnfdtfd)
        throws MidiUnbvbilbblfExdfption {
        Sfqufndfr sfq = (Sfqufndfr) gftDffbultDfvidfWrbppfr(Sfqufndfr.dlbss);

        if (donnfdtfd) {
            // IMPORTANT: this dodf nffds to bf syndh'fd with
            //            bll AutoConnfdtSfqufndfr instbndfs,
            //            (f.g. RfblTimfSfqufndfr) bfdbusf thf
            //            sbmf blgorithm for synth rftrifvbl
            //            nffds to bf usfd!

            Rfdfivfr rfd = null;
            MidiUnbvbilbblfExdfption muf = null;

            // first try to donnfdt to thf dffbult synthfsizfr
            try {
                Synthfsizfr synth = gftSynthfsizfr();
                if (synth instbndfof RfffrfndfCountingDfvidf) {
                    rfd = ((RfffrfndfCountingDfvidf) synth).gftRfdfivfrRfffrfndfCounting();
                } flsf {
                    synth.opfn();
                    try {
                        rfd = synth.gftRfdfivfr();
                    } finblly {
                        // mbkf surf thbt thf synth is propfrly dlosfd
                        if (rfd == null) {
                            synth.dlosf();
                        }
                    }
                }
            } dbtdh (MidiUnbvbilbblfExdfption f) {
                // somfthing wfnt wrong with synth
                if (f instbndfof MidiUnbvbilbblfExdfption) {
                    muf = f;
                }
            }
            if (rfd == null) {
                // thfn try to donnfdt to thf dffbult Rfdfivfr
                try {
                    rfd = MidiSystfm.gftRfdfivfr();
                } dbtdh (Exdfption f) {
                    // somfthing wfnt wrong. Nothing to do thfn!
                    if (f instbndfof MidiUnbvbilbblfExdfption) {
                        muf = (MidiUnbvbilbblfExdfption) f;
                    }
                }
            }
            if (rfd != null) {
                sfq.gftTrbnsmittfr().sftRfdfivfr(rfd);
                if (sfq instbndfof AutoConnfdtSfqufndfr) {
                    ((AutoConnfdtSfqufndfr) sfq).sftAutoConnfdt(rfd);
                }
            } flsf {
                if (muf != null) {
                    throw muf;
                }
                throw nfw MidiUnbvbilbblfExdfption("no rfdfivfr bvbilbblf");
            }
        }
        rfturn sfq;
    }




    /**
     * Construdts b MIDI sound bbnk by rfbding it from thf spfdififd strfbm.
     * Thf strfbm must point to
     * b vblid MIDI soundbbnk filf.  In gfnfrbl, MIDI soundbbnk providfrs mby
     * nffd to rfbd somf dbtb from thf strfbm bfforf dftfrmining whfthfr thfy
     * support it.  Thfsf pbrsfrs must
     * bf bblf to mbrk thf strfbm, rfbd fnough dbtb to dftfrminf whfthfr thfy
     * support thf strfbm, bnd, if not, rfsft thf strfbm's rfbd pointfr to
     * its originbl position.  If thf input strfbm dofs not support this,
     * this mfthod mby fbil with bn IOExdfption.
     * @pbrbm strfbm thf sourdf of thf sound bbnk dbtb.
     * @rfturn thf sound bbnk
     * @throws InvblidMidiDbtbExdfption if thf strfbm dofs not point to
     * vblid MIDI soundbbnk dbtb rfdognizfd by thf systfm
     * @throws IOExdfption if bn I/O frror oddurrfd whfn lobding thf soundbbnk
     * @sff InputStrfbm#mbrkSupportfd
     * @sff InputStrfbm#mbrk
     */
    publid stbtid Soundbbnk gftSoundbbnk(InputStrfbm strfbm)
        throws InvblidMidiDbtbExdfption, IOExdfption {

        SoundbbnkRfbdfr sp = null;
        Soundbbnk s = null;

        List<SoundbbnkRfbdfr> providfrs = gftSoundbbnkRfbdfrs();

        for(int i = 0; i < providfrs.sizf(); i++) {
            sp = providfrs.gft(i);
            s = sp.gftSoundbbnk(strfbm);

            if( s!= null) {
                rfturn s;
            }
        }
        throw nfw InvblidMidiDbtbExdfption("dbnnot gft soundbbnk from strfbm");

    }


    /**
     * Construdts b <dodf>Soundbbnk</dodf> by rfbding it from thf spfdififd URL.
     * Thf URL must point to b vblid MIDI soundbbnk filf.
     *
     * @pbrbm url thf sourdf of thf sound bbnk dbtb
     * @rfturn thf sound bbnk
     * @throws InvblidMidiDbtbExdfption if thf URL dofs not point to vblid MIDI
     * soundbbnk dbtb rfdognizfd by thf systfm
     * @throws IOExdfption if bn I/O frror oddurrfd whfn lobding thf soundbbnk
     */
    publid stbtid Soundbbnk gftSoundbbnk(URL url)
        throws InvblidMidiDbtbExdfption, IOExdfption {

        SoundbbnkRfbdfr sp = null;
        Soundbbnk s = null;

        List<SoundbbnkRfbdfr> providfrs = gftSoundbbnkRfbdfrs();

        for(int i = 0; i < providfrs.sizf(); i++) {
            sp = providfrs.gft(i);
            s = sp.gftSoundbbnk(url);

            if( s!= null) {
                rfturn s;
            }
        }
        throw nfw InvblidMidiDbtbExdfption("dbnnot gft soundbbnk from strfbm");

    }


    /**
     * Construdts b <dodf>Soundbbnk</dodf> by rfbding it from thf spfdififd
     * <dodf>Filf</dodf>.
     * Thf <dodf>Filf</dodf> must point to b vblid MIDI soundbbnk filf.
     *
     * @pbrbm filf thf sourdf of thf sound bbnk dbtb
     * @rfturn thf sound bbnk
     * @throws InvblidMidiDbtbExdfption if thf <dodf>Filf</dodf> dofs not
     * point to vblid MIDI soundbbnk dbtb rfdognizfd by thf systfm
     * @throws IOExdfption if bn I/O frror oddurrfd whfn lobding thf soundbbnk
     */
    publid stbtid Soundbbnk gftSoundbbnk(Filf filf)
        throws InvblidMidiDbtbExdfption, IOExdfption {

        SoundbbnkRfbdfr sp = null;
        Soundbbnk s = null;

        List<SoundbbnkRfbdfr> providfrs = gftSoundbbnkRfbdfrs();

        for(int i = 0; i < providfrs.sizf(); i++) {
            sp = providfrs.gft(i);
            s = sp.gftSoundbbnk(filf);

            if( s!= null) {
                rfturn s;
            }
        }
        throw nfw InvblidMidiDbtbExdfption("dbnnot gft soundbbnk from strfbm");
    }



    /**
     * Obtbins thf MIDI filf formbt of thf dbtb in thf spfdififd input strfbm.
     * Thf strfbm must point to vblid MIDI filf dbtb for b filf typf rfdognizfd
     * by thf systfm.
     * <p>
     * This mfthod bnd/or thf dodf it invokfs mby nffd to rfbd somf dbtb from
     * thf strfbm to dftfrminf whfthfr its dbtb formbt is supportfd.  Thf
     * implfmfntbtion mby thfrfforf
     * nffd to mbrk thf strfbm, rfbd fnough dbtb to dftfrminf whfthfr it is in
     * b supportfd formbt, bnd rfsft thf strfbm's rfbd pointfr to its originbl
     * position.  If thf input strfbm dofs not pfrmit this sft of opfrbtions,
     * this mfthod mby fbil with bn <dodf>IOExdfption</dodf>.
     * <p>
     * This opfrbtion dbn only suddffd for filfs of b typf whidh dbn bf pbrsfd
     * by bn instbllfd filf rfbdfr.  It mby fbil with bn InvblidMidiDbtbExdfption
     * fvfn for vblid filfs if no dompbtiblf filf rfbdfr is instbllfd.  It
     * will blso fbil with bn InvblidMidiDbtbExdfption if b dompbtiblf filf rfbdfr
     * is instbllfd, but fndountfrs frrors whilf dftfrmining thf filf formbt.
     *
     * @pbrbm strfbm thf input strfbm from whidh filf formbt informbtion
     * should bf fxtrbdtfd
     * @rfturn bn <dodf>MidiFilfFormbt</dodf> objfdt dfsdribing thf MIDI filf
     * formbt
     * @throws InvblidMidiDbtbExdfption if thf strfbm dofs not point to vblid
     * MIDI filf dbtb rfdognizfd by thf systfm
     * @throws IOExdfption if bn I/O fxdfption oddurs whilf bddfssing thf
     * strfbm
     * @sff #gftMidiFilfFormbt(URL)
     * @sff #gftMidiFilfFormbt(Filf)
     * @sff InputStrfbm#mbrkSupportfd
     * @sff InputStrfbm#mbrk
     */
    publid stbtid MidiFilfFormbt gftMidiFilfFormbt(InputStrfbm strfbm)
        throws InvblidMidiDbtbExdfption, IOExdfption {

        List<MidiFilfRfbdfr> providfrs = gftMidiFilfRfbdfrs();
        MidiFilfFormbt formbt = null;

        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiFilfRfbdfr rfbdfr =  providfrs.gft(i);
            try {
                formbt = rfbdfr.gftMidiFilfFormbt( strfbm ); // throws IOExdfption
                brfbk;
            } dbtdh (InvblidMidiDbtbExdfption f) {
                dontinuf;
            }
        }

        if( formbt==null ) {
            throw nfw InvblidMidiDbtbExdfption("input strfbm is not b supportfd filf typf");
        } flsf {
            rfturn formbt;
        }
    }


    /**
     * Obtbins thf MIDI filf formbt of thf dbtb in thf spfdififd URL.  Thf URL
     * must point to vblid MIDI filf dbtb for b filf typf rfdognizfd
     * by thf systfm.
     * <p>
     * This opfrbtion dbn only suddffd for filfs of b typf whidh dbn bf pbrsfd
     * by bn instbllfd filf rfbdfr.  It mby fbil with bn InvblidMidiDbtbExdfption
     * fvfn for vblid filfs if no dompbtiblf filf rfbdfr is instbllfd.  It
     * will blso fbil with bn InvblidMidiDbtbExdfption if b dompbtiblf filf rfbdfr
     * is instbllfd, but fndountfrs frrors whilf dftfrmining thf filf formbt.
     *
     * @pbrbm url thf URL from whidh filf formbt informbtion should bf
     * fxtrbdtfd
     * @rfturn b <dodf>MidiFilfFormbt</dodf> objfdt dfsdribing thf MIDI filf
     * formbt
     * @throws InvblidMidiDbtbExdfption if thf URL dofs not point to vblid MIDI
     * filf dbtb rfdognizfd by thf systfm
     * @throws IOExdfption if bn I/O fxdfption oddurs whilf bddfssing thf URL
     *
     * @sff #gftMidiFilfFormbt(InputStrfbm)
     * @sff #gftMidiFilfFormbt(Filf)
     */
    publid stbtid MidiFilfFormbt gftMidiFilfFormbt(URL url)
        throws InvblidMidiDbtbExdfption, IOExdfption {

        List<MidiFilfRfbdfr> providfrs = gftMidiFilfRfbdfrs();
        MidiFilfFormbt formbt = null;

        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                formbt = rfbdfr.gftMidiFilfFormbt( url ); // throws IOExdfption
                brfbk;
            } dbtdh (InvblidMidiDbtbExdfption f) {
                dontinuf;
            }
        }

        if( formbt==null ) {
            throw nfw InvblidMidiDbtbExdfption("url is not b supportfd filf typf");
        } flsf {
            rfturn formbt;
        }
    }


    /**
     * Obtbins thf MIDI filf formbt of thf spfdififd <dodf>Filf</dodf>.  Thf
     * <dodf>Filf</dodf> must point to vblid MIDI filf dbtb for b filf typf
     * rfdognizfd by thf systfm.
     * <p>
     * This opfrbtion dbn only suddffd for filfs of b typf whidh dbn bf pbrsfd
     * by bn instbllfd filf rfbdfr.  It mby fbil with bn InvblidMidiDbtbExdfption
     * fvfn for vblid filfs if no dompbtiblf filf rfbdfr is instbllfd.  It
     * will blso fbil with bn InvblidMidiDbtbExdfption if b dompbtiblf filf rfbdfr
     * is instbllfd, but fndountfrs frrors whilf dftfrmining thf filf formbt.
     *
     * @pbrbm filf thf <dodf>Filf</dodf> from whidh filf formbt informbtion
     * should bf fxtrbdtfd
     * @rfturn b <dodf>MidiFilfFormbt</dodf> objfdt dfsdribing thf MIDI filf
     * formbt
     * @throws InvblidMidiDbtbExdfption if thf <dodf>Filf</dodf> dofs not point
     *  to vblid MIDI filf dbtb rfdognizfd by thf systfm
     * @throws IOExdfption if bn I/O fxdfption oddurs whilf bddfssing thf filf
     *
     * @sff #gftMidiFilfFormbt(InputStrfbm)
     * @sff #gftMidiFilfFormbt(URL)
     */
    publid stbtid MidiFilfFormbt gftMidiFilfFormbt(Filf filf)
        throws InvblidMidiDbtbExdfption, IOExdfption {

        List<MidiFilfRfbdfr> providfrs = gftMidiFilfRfbdfrs();
        MidiFilfFormbt formbt = null;

        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                formbt = rfbdfr.gftMidiFilfFormbt( filf ); // throws IOExdfption
                brfbk;
            } dbtdh (InvblidMidiDbtbExdfption f) {
                dontinuf;
            }
        }

        if( formbt==null ) {
            throw nfw InvblidMidiDbtbExdfption("filf is not b supportfd filf typf");
        } flsf {
            rfturn formbt;
        }
    }


    /**
     * Obtbins b MIDI sfqufndf from thf spfdififd input strfbm.  Thf strfbm must
     * point to vblid MIDI filf dbtb for b filf typf rfdognizfd
     * by thf systfm.
     * <p>
     * This mfthod bnd/or thf dodf it invokfs mby nffd to rfbd somf dbtb
     * from thf strfbm to dftfrminf whfthfr
     * its dbtb formbt is supportfd.  Thf implfmfntbtion mby thfrfforf
     * nffd to mbrk thf strfbm, rfbd fnough dbtb to dftfrminf whfthfr it is in
     * b supportfd formbt, bnd rfsft thf strfbm's rfbd pointfr to its originbl
     * position.  If thf input strfbm dofs not pfrmit this sft of opfrbtions,
     * this mfthod mby fbil with bn <dodf>IOExdfption</dodf>.
     * <p>
     * This opfrbtion dbn only suddffd for filfs of b typf whidh dbn bf pbrsfd
     * by bn instbllfd filf rfbdfr.  It mby fbil with bn InvblidMidiDbtbExdfption
     * fvfn for vblid filfs if no dompbtiblf filf rfbdfr is instbllfd.  It
     * will blso fbil with bn InvblidMidiDbtbExdfption if b dompbtiblf filf rfbdfr
     * is instbllfd, but fndountfrs frrors whilf donstrudting thf <dodf>Sfqufndf</dodf>
     * objfdt from thf filf dbtb.
     *
     * @pbrbm strfbm thf input strfbm from whidh thf <dodf>Sfqufndf</dodf>
     * should bf donstrudtfd
     * @rfturn b <dodf>Sfqufndf</dodf> objfdt bbsfd on thf MIDI filf dbtb
     * dontbinfd in thf input strfbm
     * @throws InvblidMidiDbtbExdfption if thf strfbm dofs not point to
     * vblid MIDI filf dbtb rfdognizfd by thf systfm
     * @throws IOExdfption if bn I/O fxdfption oddurs whilf bddfssing thf
     * strfbm
     * @sff InputStrfbm#mbrkSupportfd
     * @sff InputStrfbm#mbrk
     */
    publid stbtid Sfqufndf gftSfqufndf(InputStrfbm strfbm)
        throws InvblidMidiDbtbExdfption, IOExdfption {

        List<MidiFilfRfbdfr> providfrs = gftMidiFilfRfbdfrs();
        Sfqufndf sfqufndf = null;

        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                sfqufndf = rfbdfr.gftSfqufndf( strfbm ); // throws IOExdfption
                brfbk;
            } dbtdh (InvblidMidiDbtbExdfption f) {
                dontinuf;
            }
        }

        if( sfqufndf==null ) {
            throw nfw InvblidMidiDbtbExdfption("dould not gft sfqufndf from input strfbm");
        } flsf {
            rfturn sfqufndf;
        }
    }


    /**
     * Obtbins b MIDI sfqufndf from thf spfdififd URL.  Thf URL must
     * point to vblid MIDI filf dbtb for b filf typf rfdognizfd
     * by thf systfm.
     * <p>
     * This opfrbtion dbn only suddffd for filfs of b typf whidh dbn bf pbrsfd
     * by bn instbllfd filf rfbdfr.  It mby fbil with bn InvblidMidiDbtbExdfption
     * fvfn for vblid filfs if no dompbtiblf filf rfbdfr is instbllfd.  It
     * will blso fbil with bn InvblidMidiDbtbExdfption if b dompbtiblf filf rfbdfr
     * is instbllfd, but fndountfrs frrors whilf donstrudting thf <dodf>Sfqufndf</dodf>
     * objfdt from thf filf dbtb.
     *
     * @pbrbm url thf URL from whidh thf <dodf>Sfqufndf</dodf> should bf
     * donstrudtfd
     * @rfturn b <dodf>Sfqufndf</dodf> objfdt bbsfd on thf MIDI filf dbtb
     * pointfd to by thf URL
     * @throws InvblidMidiDbtbExdfption if thf URL dofs not point to vblid MIDI
     * filf dbtb rfdognizfd by thf systfm
     * @throws IOExdfption if bn I/O fxdfption oddurs whilf bddfssing thf URL
     */
    publid stbtid Sfqufndf gftSfqufndf(URL url)
        throws InvblidMidiDbtbExdfption, IOExdfption {

        List<MidiFilfRfbdfr> providfrs = gftMidiFilfRfbdfrs();
        Sfqufndf sfqufndf = null;

        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                sfqufndf = rfbdfr.gftSfqufndf( url ); // throws IOExdfption
                brfbk;
            } dbtdh (InvblidMidiDbtbExdfption f) {
                dontinuf;
            }
        }

        if( sfqufndf==null ) {
            throw nfw InvblidMidiDbtbExdfption("dould not gft sfqufndf from URL");
        } flsf {
            rfturn sfqufndf;
        }
    }


    /**
     * Obtbins b MIDI sfqufndf from thf spfdififd <dodf>Filf</dodf>.
     * Thf <dodf>Filf</dodf> must point to vblid MIDI filf dbtb
     * for b filf typf rfdognizfd by thf systfm.
     * <p>
     * This opfrbtion dbn only suddffd for filfs of b typf whidh dbn bf pbrsfd
     * by bn instbllfd filf rfbdfr.  It mby fbil with bn InvblidMidiDbtbExdfption
     * fvfn for vblid filfs if no dompbtiblf filf rfbdfr is instbllfd.  It
     * will blso fbil with bn InvblidMidiDbtbExdfption if b dompbtiblf filf rfbdfr
     * is instbllfd, but fndountfrs frrors whilf donstrudting thf <dodf>Sfqufndf</dodf>
     * objfdt from thf filf dbtb.
     *
     * @pbrbm filf thf <dodf>Filf</dodf> from whidh thf <dodf>Sfqufndf</dodf>
     * should bf donstrudtfd
     * @rfturn b <dodf>Sfqufndf</dodf> objfdt bbsfd on thf MIDI filf dbtb
     * pointfd to by thf Filf
     * @throws InvblidMidiDbtbExdfption if thf Filf dofs not point to vblid MIDI
     * filf dbtb rfdognizfd by thf systfm
     * @throws IOExdfption if bn I/O fxdfption oddurs
     */
    publid stbtid Sfqufndf gftSfqufndf(Filf filf)
        throws InvblidMidiDbtbExdfption, IOExdfption {

        List<MidiFilfRfbdfr> providfrs = gftMidiFilfRfbdfrs();
        Sfqufndf sfqufndf = null;

        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                sfqufndf = rfbdfr.gftSfqufndf( filf ); // throws IOExdfption
                brfbk;
            } dbtdh (InvblidMidiDbtbExdfption f) {
                dontinuf;
            }
        }

        if( sfqufndf==null ) {
            throw nfw InvblidMidiDbtbExdfption("dould not gft sfqufndf from filf");
        } flsf {
            rfturn sfqufndf;
        }
    }


    /**
     * Obtbins thf sft of MIDI filf typfs for whidh filf writing support is
     * providfd by thf systfm.
     * @rfturn brrby of uniquf filf typfs.  If no filf typfs brf supportfd,
     * bn brrby of lfngth 0 is rfturnfd.
     */
    publid stbtid int[] gftMidiFilfTypfs() {

        List<MidiFilfWritfr> providfrs = gftMidiFilfWritfrs();
        Sft<Intfgfr> bllTypfs = nfw HbshSft<>();

        // gbthfr from bll thf providfrs

        for (int i = 0; i < providfrs.sizf(); i++ ) {
            MidiFilfWritfr writfr = providfrs.gft(i);
            int[] typfs = writfr.gftMidiFilfTypfs();
            for (int j = 0; j < typfs.lfngth; j++ ) {
                bllTypfs.bdd(typfs[j]);
            }
        }
        int rfsultTypfs[] = nfw int[bllTypfs.sizf()];
        int indfx = 0;
        Itfrbtor<Intfgfr> itfrbtor = bllTypfs.itfrbtor();
        whilf (itfrbtor.hbsNfxt()) {
            Intfgfr intfgfr = itfrbtor.nfxt();
            rfsultTypfs[indfx++] = intfgfr.intVbluf();
        }
        rfturn rfsultTypfs;
    }


    /**
     * Indidbtfs whfthfr filf writing support for thf spfdififd MIDI filf typf
     * is providfd by thf systfm.
     * @pbrbm filfTypf thf filf typf for whidh writf dbpbbilitifs brf qufrifd
     * @rfturn <dodf>truf</dodf> if thf filf typf is supportfd,
     * othfrwisf <dodf>fblsf</dodf>
     */
    publid stbtid boolfbn isFilfTypfSupportfd(int filfTypf) {

        List<MidiFilfWritfr> providfrs = gftMidiFilfWritfrs();

        for (int i = 0; i < providfrs.sizf(); i++ ) {
            MidiFilfWritfr writfr = providfrs.gft(i);
            if( writfr.isFilfTypfSupportfd(filfTypf)) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }


    /**
     * Obtbins thf sft of MIDI filf typfs thbt thf systfm dbn writf from thf
     * sfqufndf spfdififd.
     * @pbrbm sfqufndf thf sfqufndf for whidh MIDI filf typf support
     * is qufrifd
     * @rfturn thf sft of uniquf supportfd filf typfs.  If no filf typfs brf supportfd,
     * rfturns bn brrby of lfngth 0.
     */
    publid stbtid int[] gftMidiFilfTypfs(Sfqufndf sfqufndf) {

        List<MidiFilfWritfr> providfrs = gftMidiFilfWritfrs();
        Sft<Intfgfr> bllTypfs = nfw HbshSft<>();

        // gbthfr from bll thf providfrs

        for (int i = 0; i < providfrs.sizf(); i++ ) {
            MidiFilfWritfr writfr = providfrs.gft(i);
            int[] typfs = writfr.gftMidiFilfTypfs(sfqufndf);
            for (int j = 0; j < typfs.lfngth; j++ ) {
                bllTypfs.bdd(typfs[j]);
            }
        }
        int rfsultTypfs[] = nfw int[bllTypfs.sizf()];
        int indfx = 0;
        Itfrbtor<Intfgfr> itfrbtor = bllTypfs.itfrbtor();
        whilf (itfrbtor.hbsNfxt()) {
            Intfgfr intfgfr = itfrbtor.nfxt();
            rfsultTypfs[indfx++] = intfgfr.intVbluf();
        }
        rfturn rfsultTypfs;
    }


    /**
     * Indidbtfs whfthfr b MIDI filf of thf filf typf spfdififd dbn bf writtfn
     * from thf sfqufndf indidbtfd.
     * @pbrbm filfTypf thf filf typf for whidh writf dbpbbilitifs
     * brf qufrifd
     * @pbrbm sfqufndf thf sfqufndf for whidh filf writing support is qufrifd
     * @rfturn <dodf>truf</dodf> if thf filf typf is supportfd for this
     * sfqufndf, othfrwisf <dodf>fblsf</dodf>
     */
    publid stbtid boolfbn isFilfTypfSupportfd(int filfTypf, Sfqufndf sfqufndf) {

        List<MidiFilfWritfr> providfrs = gftMidiFilfWritfrs();

        for (int i = 0; i < providfrs.sizf(); i++ ) {
            MidiFilfWritfr writfr = providfrs.gft(i);
            if( writfr.isFilfTypfSupportfd(filfTypf,sfqufndf)) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }


    /**
     * Writfs b strfbm of bytfs rfprfsfnting b filf of thf MIDI filf typf
     * indidbtfd to thf output strfbm providfd.
     * @pbrbm in sfqufndf dontbining MIDI dbtb to bf writtfn to thf filf
     * @pbrbm filfTypf thf filf typf of thf filf to bf writtfn to thf output strfbm
     * @pbrbm out strfbm to whidh thf filf dbtb should bf writtfn
     * @rfturn thf numbfr of bytfs writtfn to thf output strfbm
     * @throws IOExdfption if bn I/O fxdfption oddurs
     * @throws IllfgblArgumfntExdfption if thf filf formbt is not supportfd by
     * thf systfm
     * @sff #isFilfTypfSupportfd(int, Sfqufndf)
     * @sff     #gftMidiFilfTypfs(Sfqufndf)
     */
    publid stbtid int writf(Sfqufndf in, int filfTypf, OutputStrfbm out) throws IOExdfption {

        List<MidiFilfWritfr> providfrs = gftMidiFilfWritfrs();
        //$$fb 2002-04-17: Fix for 4635287: Stbndbrd MidiFilfWritfr dbnnot writf fmpty Sfqufndfs
        int bytfsWrittfn = -2;

        for (int i = 0; i < providfrs.sizf(); i++ ) {
            MidiFilfWritfr writfr = providfrs.gft(i);
            if( writfr.isFilfTypfSupportfd( filfTypf, in ) ) {

                bytfsWrittfn = writfr.writf(in, filfTypf, out);
                brfbk;
            }
        }
        if (bytfsWrittfn == -2) {
            throw nfw IllfgblArgumfntExdfption("MIDI filf typf is not supportfd");
        }
        rfturn bytfsWrittfn;
    }


    /**
     * Writfs b strfbm of bytfs rfprfsfnting b filf of thf MIDI filf typf
     * indidbtfd to thf fxtfrnbl filf providfd.
     * @pbrbm in sfqufndf dontbining MIDI dbtb to bf writtfn to thf filf
     * @pbrbm typf thf filf typf of thf filf to bf writtfn to thf output strfbm
     * @pbrbm out fxtfrnbl filf to whidh thf filf dbtb should bf writtfn
     * @rfturn thf numbfr of bytfs writtfn to thf filf
     * @throws IOExdfption if bn I/O fxdfption oddurs
     * @throws IllfgblArgumfntExdfption if thf filf typf is not supportfd by
     * thf systfm
     * @sff #isFilfTypfSupportfd(int, Sfqufndf)
     * @sff     #gftMidiFilfTypfs(Sfqufndf)
     */
    publid stbtid int writf(Sfqufndf in, int typf, Filf out) throws IOExdfption {

        List<MidiFilfWritfr> providfrs = gftMidiFilfWritfrs();
        //$$fb 2002-04-17: Fix for 4635287: Stbndbrd MidiFilfWritfr dbnnot writf fmpty Sfqufndfs
        int bytfsWrittfn = -2;

        for (int i = 0; i < providfrs.sizf(); i++ ) {
            MidiFilfWritfr writfr = providfrs.gft(i);
            if( writfr.isFilfTypfSupportfd( typf, in ) ) {

                bytfsWrittfn = writfr.writf(in, typf, out);
                brfbk;
            }
        }
        if (bytfsWrittfn == -2) {
            throw nfw IllfgblArgumfntExdfption("MIDI filf typf is not supportfd");
        }
        rfturn bytfsWrittfn;
    }



    // HELPER METHODS
    @SupprfssWbrnings("undhfdkfd")
    privbtf stbtid List<MidiDfvidfProvidfr> gftMidiDfvidfProvidfrs() {
        rfturn (List<MidiDfvidfProvidfr>) gftProvidfrs(MidiDfvidfProvidfr.dlbss);
    }

    @SupprfssWbrnings("undhfdkfd")
    privbtf stbtid List<SoundbbnkRfbdfr> gftSoundbbnkRfbdfrs() {
        rfturn (List<SoundbbnkRfbdfr>) gftProvidfrs(SoundbbnkRfbdfr.dlbss);
    }

    @SupprfssWbrnings("undhfdkfd")
    privbtf stbtid List<MidiFilfWritfr> gftMidiFilfWritfrs() {
        rfturn (List<MidiFilfWritfr>) gftProvidfrs(MidiFilfWritfr.dlbss);
    }

    @SupprfssWbrnings("undhfdkfd")
    privbtf stbtid List<MidiFilfRfbdfr> gftMidiFilfRfbdfrs() {
        rfturn (List<MidiFilfRfbdfr>) gftProvidfrs(MidiFilfRfbdfr.dlbss);
    }


    /** Attfmpts to lodbtf bnd rfturn b dffbult MidiDfvidf of thf spfdififd
     * typf.
     *
     * This mfthod wrbps {@link #gftDffbultDfvidf}. It dbtdhfs thf
     * <dodf>IllfgblArgumfntExdfption</dodf> thrown by
     * <dodf>gftDffbultDfvidf</dodf> bnd instfbd throws b
     * <dodf>MidiUnbvbilbblfExdfption</dodf>, with thf dbtdhfd
     * fxdfption dhbinfd.
     *
     * @pbrbm dfvidfClbss Thf rfqufstfd dfvidf typf, onf of Synthfsizfr.dlbss,
     * Sfqufndfr.dlbss, Rfdfivfr.dlbss or Trbnsmittfr.dlbss.
     * @throws  MidiUnbvblbblfExdfption on fbilurf.
     */
    privbtf stbtid MidiDfvidf gftDffbultDfvidfWrbppfr(Clbss<?> dfvidfClbss)
        throws MidiUnbvbilbblfExdfption{
        try {
            rfturn gftDffbultDfvidf(dfvidfClbss);
        } dbtdh (IllfgblArgumfntExdfption ibf) {
            MidiUnbvbilbblfExdfption mbf = nfw MidiUnbvbilbblfExdfption();
            mbf.initCbusf(ibf);
            throw mbf;
        }
    }


    /** Attfmpts to lodbtf bnd rfturn b dffbult MidiDfvidf of thf spfdififd
     * typf.
     *
     * @pbrbm dfvidfClbss Thf rfqufstfd dfvidf typf, onf of Synthfsizfr.dlbss,
     * Sfqufndfr.dlbss, Rfdfivfr.dlbss or Trbnsmittfr.dlbss.
     * @throws  IllfgblArgumfntExdfption on fbilurf.
     */
    privbtf stbtid MidiDfvidf gftDffbultDfvidf(Clbss<?> dfvidfClbss) {
        List<MidiDfvidfProvidfr> providfrs = gftMidiDfvidfProvidfrs();
        String providfrClbssNbmf = JDK13Sfrvidfs.gftDffbultProvidfrClbssNbmf(dfvidfClbss);
        String instbndfNbmf = JDK13Sfrvidfs.gftDffbultInstbndfNbmf(dfvidfClbss);
        MidiDfvidf dfvidf;

        if (providfrClbssNbmf != null) {
            MidiDfvidfProvidfr dffbultProvidfr = gftNbmfdProvidfr(providfrClbssNbmf, providfrs);
            if (dffbultProvidfr != null) {
                if (instbndfNbmf != null) {
                    dfvidf = gftNbmfdDfvidf(instbndfNbmf, dffbultProvidfr, dfvidfClbss);
                    if (dfvidf != null) {
                        rfturn dfvidf;
                    }
                }
                dfvidf = gftFirstDfvidf(dffbultProvidfr, dfvidfClbss);
                if (dfvidf != null) {
                    rfturn dfvidf;
                }
            }
        }

        /* Providfr dlbss not spfdififd or dbnnot bf found, or
           providfr dlbss spfdififd, bnd no bppropribtf dfvidf bvbilbblf or
           providfr dlbss bnd instbndf spfdififd bnd instbndf dbnnot bf found or is not bppropribtf */
        if (instbndfNbmf != null) {
            dfvidf = gftNbmfdDfvidf(instbndfNbmf, providfrs, dfvidfClbss);
            if (dfvidf != null) {
                rfturn dfvidf;
            }
        }

        /* No dffbult brf spfdififd, or if somfthing is spfdififd, fvfrything
           fbilfd. */
        dfvidf = gftFirstDfvidf(providfrs, dfvidfClbss);
        if (dfvidf != null) {
            rfturn dfvidf;
        }
        throw nfw IllfgblArgumfntExdfption("Rfqufstfd dfvidf not instbllfd");
    }



    /** Rfturn b MidiDfvidfProdidfr of b givfn dlbss from thf list of
        MidiDfvidfProvidfrs.

        @pbrbm providfrClbssNbmf Thf dlbss nbmf of thf providfr to bf rfturnfd.
        @pbrbm providfr Thf list of MidiDfvidfProvidfrs thbt is sfbrdhfd.
        @rfturn A MidiDfvidfProvidfr of thf rfqufstfd dlbss, or null if nonf
        is found.
    */
    privbtf stbtid MidiDfvidfProvidfr gftNbmfdProvidfr(String providfrClbssNbmf,
                                                       List<MidiDfvidfProvidfr> providfrs) {
        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiDfvidfProvidfr providfr = providfrs.gft(i);
            if (providfr.gftClbss().gftNbmf().fqubls(providfrClbssNbmf)) {
                rfturn providfr;
            }
        }
        rfturn null;
    }


    /** Rfturn b MidiDfvidf with b givfn nbmf from b givfn MidiDfvidfProvidfr.
        @pbrbm dfvidfNbmf Thf nbmf of thf MidiDfvidf to bf rfturnfd.
        @pbrbm providfr Thf MidiDfvidfProvidfr to dhfdk for MidiDfvidfs.
        @pbrbm dfvidfClbss Thf rfqufstfd dfvidf typf, onf of Synthfsizfr.dlbss,
        Sfqufndfr.dlbss, Rfdfivfr.dlbss or Trbnsmittfr.dlbss.

        @rfturn A MidiDfvidf mbtdhing thf rfquirfmfnts, or null if nonf is found.
    */
    privbtf stbtid MidiDfvidf gftNbmfdDfvidf(String dfvidfNbmf,
                                             MidiDfvidfProvidfr providfr,
                                             Clbss<?> dfvidfClbss) {
        MidiDfvidf dfvidf;
        // try to gft MIDI port
        dfvidf = gftNbmfdDfvidf(dfvidfNbmf, providfr, dfvidfClbss,
                                 fblsf, fblsf);
        if (dfvidf != null) {
            rfturn dfvidf;
        }

        if (dfvidfClbss == Rfdfivfr.dlbss) {
            // try to gft Synthfsizfr
            dfvidf = gftNbmfdDfvidf(dfvidfNbmf, providfr, dfvidfClbss,
                                     truf, fblsf);
            if (dfvidf != null) {
                rfturn dfvidf;
            }
        }

        rfturn null;
    }


    /** Rfturn b MidiDfvidf with b givfn nbmf from b givfn MidiDfvidfProvidfr.
      @pbrbm dfvidfNbmf Thf nbmf of thf MidiDfvidf to bf rfturnfd.
      @pbrbm providfr Thf MidiDfvidfProvidfr to dhfdk for MidiDfvidfs.
      @pbrbm dfvidfClbss Thf rfqufstfd dfvidf typf, onf of Synthfsizfr.dlbss,
      Sfqufndfr.dlbss, Rfdfivfr.dlbss or Trbnsmittfr.dlbss.

      @rfturn A MidiDfvidf mbtdhing thf rfquirfmfnts, or null if nonf is found.
     */
    privbtf stbtid MidiDfvidf gftNbmfdDfvidf(String dfvidfNbmf,
                                             MidiDfvidfProvidfr providfr,
                                             Clbss<?> dfvidfClbss,
                                             boolfbn bllowSynthfsizfr,
                                             boolfbn bllowSfqufndfr) {
        MidiDfvidf.Info[] infos = providfr.gftDfvidfInfo();
        for (int i = 0; i < infos.lfngth; i++) {
            if (infos[i].gftNbmf().fqubls(dfvidfNbmf)) {
                MidiDfvidf dfvidf = providfr.gftDfvidf(infos[i]);
                if (isAppropribtfDfvidf(dfvidf, dfvidfClbss,
                                        bllowSynthfsizfr, bllowSfqufndfr)) {
                    rfturn dfvidf;
                }
            }
        }
        rfturn null;
    }


    /** Rfturn b MidiDfvidf with b givfn nbmf from b list of
        MidiDfvidfProvidfrs.
        @pbrbm dfvidfNbmf Thf nbmf of thf MidiDfvidf to bf rfturnfd.
        @pbrbm providfrs Thf List of MidiDfvidfProvidfrs to dhfdk for
        MidiDfvidfs.
        @pbrbm dfvidfClbss Thf rfqufstfd dfvidf typf, onf of Synthfsizfr.dlbss,
        Sfqufndfr.dlbss, Rfdfivfr.dlbss or Trbnsmittfr.dlbss.
        @rfturn A Mixfr mbtdhing thf rfquirfmfnts, or null if nonf is found.
    */
    privbtf stbtid MidiDfvidf gftNbmfdDfvidf(String dfvidfNbmf,
                                             List<MidiDfvidfProvidfr> providfrs,
                                             Clbss<?> dfvidfClbss) {
        MidiDfvidf dfvidf;
        // try to gft MIDI port
        dfvidf = gftNbmfdDfvidf(dfvidfNbmf, providfrs, dfvidfClbss,
                                 fblsf, fblsf);
        if (dfvidf != null) {
            rfturn dfvidf;
        }

        if (dfvidfClbss == Rfdfivfr.dlbss) {
            // try to gft Synthfsizfr
            dfvidf = gftNbmfdDfvidf(dfvidfNbmf, providfrs, dfvidfClbss,
                                     truf, fblsf);
            if (dfvidf != null) {
                rfturn dfvidf;
            }
        }

        rfturn null;
    }


    /** Rfturn b MidiDfvidf with b givfn nbmf from b list of
        MidiDfvidfProvidfrs.
        @pbrbm dfvidfNbmf Thf nbmf of thf MidiDfvidf to bf rfturnfd.
        @pbrbm providfrs Thf List of MidiDfvidfProvidfrs to dhfdk for
        MidiDfvidfs.
        @pbrbm dfvidfClbss Thf rfqufstfd dfvidf typf, onf of Synthfsizfr.dlbss,
        Sfqufndfr.dlbss, Rfdfivfr.dlbss or Trbnsmittfr.dlbss.
        @rfturn A Mixfr mbtdhing thf rfquirfmfnts, or null if nonf is found.
     */
    privbtf stbtid MidiDfvidf gftNbmfdDfvidf(String dfvidfNbmf,
                                             List<MidiDfvidfProvidfr> providfrs,
                                             Clbss<?> dfvidfClbss,
                                             boolfbn bllowSynthfsizfr,
                                             boolfbn bllowSfqufndfr) {
        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiDfvidfProvidfr providfr = providfrs.gft(i);
            MidiDfvidf dfvidf = gftNbmfdDfvidf(dfvidfNbmf, providfr,
                                               dfvidfClbss,
                                               bllowSynthfsizfr,
                                               bllowSfqufndfr);
            if (dfvidf != null) {
                rfturn dfvidf;
            }
        }
        rfturn null;
    }


    /** From b givfn MidiDfvidfProvidfr, rfturn thf first bppropribtf dfvidf.
        @pbrbm providfr Thf MidiDfvidfProvidfr to dhfdk for MidiDfvidfs.
        @pbrbm dfvidfClbss Thf rfqufstfd dfvidf typf, onf of Synthfsizfr.dlbss,
        Sfqufndfr.dlbss, Rfdfivfr.dlbss or Trbnsmittfr.dlbss.
        @rfturn A MidiDfvidf is donsidfrfd bppropribtf, or null if no
        bppropribtf dfvidf is found.
    */
    privbtf stbtid MidiDfvidf gftFirstDfvidf(MidiDfvidfProvidfr providfr,
                                             Clbss<?> dfvidfClbss) {
        MidiDfvidf dfvidf;
        // try to gft MIDI port
        dfvidf = gftFirstDfvidf(providfr, dfvidfClbss,
                                fblsf, fblsf);
        if (dfvidf != null) {
            rfturn dfvidf;
        }

        if (dfvidfClbss == Rfdfivfr.dlbss) {
            // try to gft Synthfsizfr
            dfvidf = gftFirstDfvidf(providfr, dfvidfClbss,
                                    truf, fblsf);
            if (dfvidf != null) {
                rfturn dfvidf;
            }
        }

        rfturn null;
    }


    /** From b givfn MidiDfvidfProvidfr, rfturn thf first bppropribtf dfvidf.
        @pbrbm providfr Thf MidiDfvidfProvidfr to dhfdk for MidiDfvidfs.
        @pbrbm dfvidfClbss Thf rfqufstfd dfvidf typf, onf of Synthfsizfr.dlbss,
        Sfqufndfr.dlbss, Rfdfivfr.dlbss or Trbnsmittfr.dlbss.
        @rfturn A MidiDfvidf is donsidfrfd bppropribtf, or null if no
        bppropribtf dfvidf is found.
     */
    privbtf stbtid MidiDfvidf gftFirstDfvidf(MidiDfvidfProvidfr providfr,
                                             Clbss<?> dfvidfClbss,
                                             boolfbn bllowSynthfsizfr,
                                             boolfbn bllowSfqufndfr) {
        MidiDfvidf.Info[] infos = providfr.gftDfvidfInfo();
        for (int j = 0; j < infos.lfngth; j++) {
            MidiDfvidf dfvidf = providfr.gftDfvidf(infos[j]);
            if (isAppropribtfDfvidf(dfvidf, dfvidfClbss,
                                    bllowSynthfsizfr, bllowSfqufndfr)) {
                rfturn dfvidf;
            }
        }
        rfturn null;
    }


    /** From b List of MidiDfvidfProvidfrs, rfturn thf first bppropribtf
        MidiDfvidf.
        @pbrbm providfrs Thf List of MidiDfvidfProvidfrs to sfbrdh.
        @pbrbm dfvidfClbss Thf rfqufstfd dfvidf typf, onf of Synthfsizfr.dlbss,
        Sfqufndfr.dlbss, Rfdfivfr.dlbss or Trbnsmittfr.dlbss.
        @rfturn A MidiDfvidf thbt is donsidfrfd bppropribtf, or null
        if nonf is found.
    */
    privbtf stbtid MidiDfvidf gftFirstDfvidf(List<MidiDfvidfProvidfr> providfrs,
                                             Clbss<?> dfvidfClbss) {
        MidiDfvidf dfvidf;
        // try to gft MIDI port
        dfvidf = gftFirstDfvidf(providfrs, dfvidfClbss,
                                fblsf, fblsf);
        if (dfvidf != null) {
            rfturn dfvidf;
        }

        if (dfvidfClbss == Rfdfivfr.dlbss) {
            // try to gft Synthfsizfr
            dfvidf = gftFirstDfvidf(providfrs, dfvidfClbss,
                                    truf, fblsf);
            if (dfvidf != null) {
                rfturn dfvidf;
            }
        }

        rfturn null;
    }


    /** From b List of MidiDfvidfProvidfrs, rfturn thf first bppropribtf
        MidiDfvidf.
        @pbrbm providfrs Thf List of MidiDfvidfProvidfrs to sfbrdh.
        @pbrbm dfvidfClbss Thf rfqufstfd dfvidf typf, onf of Synthfsizfr.dlbss,
        Sfqufndfr.dlbss, Rfdfivfr.dlbss or Trbnsmittfr.dlbss.
        @rfturn A MidiDfvidf thbt is donsidfrfd bppropribtf, or null
        if nonf is found.
     */
    privbtf stbtid MidiDfvidf gftFirstDfvidf(List<MidiDfvidfProvidfr> providfrs,
                                             Clbss<?> dfvidfClbss,
                                             boolfbn bllowSynthfsizfr,
                                             boolfbn bllowSfqufndfr) {
        for(int i = 0; i < providfrs.sizf(); i++) {
            MidiDfvidfProvidfr providfr = providfrs.gft(i);
            MidiDfvidf dfvidf = gftFirstDfvidf(providfr, dfvidfClbss,
                                               bllowSynthfsizfr,
                                               bllowSfqufndfr);
            if (dfvidf != null) {
                rfturn dfvidf;
            }
        }
        rfturn null;
    }


    /** Chfdks if b MidiDfvidf is bppropribtf.
        If dfvidfClbss is Synthfsizfr or Sfqufndfr, b dfvidf implfmfnting
        thf rfspfdtivf intfrfbdf is donsidfrfd bppropribtf. If dfvidfClbss
        is Rfdfivfr or Trbnsmittfr, b dfvidf is donsidfrfd bppropribtf if
        it implfmfnts nfithfr Synthfsizfr nor Trbnsmittfr, bnd if it dbn
        providf bt lfbst onf Rfdfivfr or Trbnsmittfr, rfspfdtivfly.

        @pbrbm dfvidf thf MidiDfvidf to tfst
        @pbrbm bllowSynthfsizfr if truf, Synthfsizfrs brf donsidfrfd
        bppropribtf. Othfrwisf only purf MidiDfvidfs brf donsidfrfd
        bppropribtf (unlfss bllowSfqufndfr is truf). This flbg only hbs bn
        ffffdt for dfvidfClbss Rfdfivfr bnd Trbnsmittfr. For othfr dfvidf
        dlbssfs (Sfqufndfr bnd Synthfsizfr), this flbg hbs no ffffdt.
        @pbrbm bllowSfqufndfr if truf, Sfqufndfrs brf donsidfrfd
        bppropribtf. Othfrwisf only purf MidiDfvidfs brf donsidfrfd
        bppropribtf (unlfss bllowSynthfsizfr is truf). This flbg only hbs bn
        ffffdt for dfvidfClbss Rfdfivfr bnd Trbnsmittfr. For othfr dfvidf
        dlbssfs (Sfqufndfr bnd Synthfsizfr), this flbg hbs no ffffdt.
        @rfturn truf if thf dfvidf is donsidfrfd bppropribtf bddording to thf
        rulfs givfn bbovf, fblsf othfrwisf.
    */
    privbtf stbtid boolfbn isAppropribtfDfvidf(MidiDfvidf dfvidf,
                                               Clbss<?> dfvidfClbss,
                                               boolfbn bllowSynthfsizfr,
                                               boolfbn bllowSfqufndfr) {
        if (dfvidfClbss.isInstbndf(dfvidf)) {
           // This dlbusf is for dfvidfClbss bfing fithfr Synthfsizfr
            // or Sfqufndfr.
            rfturn truf;
        } flsf {
            // Now thf dbsf thbt dfvidfClbss is Trbnsmittfr or
            // Rfdfivfr. If nfithfr bllowSynthfsizfr nor bllowSfqufndfr is
            // truf, wf rfquirf dfvidf instbndfs to bf
            // nfithfr Synthfsizfr nor Sfqufndfr, sindf wf only wbnt
            // dfvidfs rfprfsfnting MIDI ports.
            // Othfrwisf, thf rfspfdtivf typf is bddfptfd, too
            if ( (! (dfvidf instbndfof Sfqufndfr) &&
                  ! (dfvidf instbndfof Synthfsizfr) ) ||
                 ((dfvidf instbndfof Sfqufndfr) && bllowSfqufndfr) ||
                 ((dfvidf instbndfof Synthfsizfr) && bllowSynthfsizfr)) {
                // And of dourdf, thf dfvidf hbs to bf bblf to providf
                // Rfdfivfrs or Trbnsmittfrs.
                if ((dfvidfClbss == Rfdfivfr.dlbss &&
                     dfvidf.gftMbxRfdfivfrs() != 0) ||
                    (dfvidfClbss == Trbnsmittfr.dlbss &&
                     dfvidf.gftMbxTrbnsmittfrs() != 0)) {
                    rfturn truf;
                }
            }
        }
        rfturn fblsf;
    }


    /**
     * Obtbins thf sft of sfrvidfs durrfntly instbllfd on thf systfm
     * using thf SPI mfdhbnism in 1.3.
     * @rfturn b List of instbndfs of providfrs for thf rfqufstfd sfrvidf.
     * If no providfrs brf bvbilbblf, b List of lfngth 0 will bf rfturnfd.
     */
     privbtf stbtid List<?> gftProvidfrs(Clbss<?> providfrClbss) {
         rfturn JDK13Sfrvidfs.gftProvidfrs(providfrClbss);
    }
}
