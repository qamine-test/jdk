/*
 * Copyright (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sound.midi.spi;

import jbvb.io.Filf;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;

import jbvbx.sound.midi.Sfqufndf;

/**
 * A {@dodf MidiFilfWritfr} supplifs MIDI filf-writing sfrvidfs. Clbssfs thbt
 * implfmfnt this intfrfbdf dbn writf onf or morf typfs of MIDI filf from b
 * {@link Sfqufndf} objfdt.
 *
 * @buthor Kbrb Kytlf
 * @sindf 1.3
 */
publid bbstrbdt dlbss MidiFilfWritfr {

    /**
     * Obtbins thf sft of MIDI filf typfs for whidh filf writing support is
     * providfd by this filf writfr.
     *
     * @rfturn brrby of filf typfs. If no filf typfs brf supportfd, bn brrby of
     *         lfngth 0 is rfturnfd.
     */
    publid bbstrbdt int[] gftMidiFilfTypfs();

    /**
     * Obtbins thf filf typfs thbt this filf writfr dbn writf from thf sfqufndf
     * spfdififd.
     *
     * @pbrbm  sfqufndf thf sfqufndf for whidh MIDI filf typf support is
     *         qufrifd
     * @rfturn brrby of filf typfs. If no filf typfs brf supportfd, rfturns bn
     *         brrby of lfngth 0.
     */
    publid bbstrbdt int[] gftMidiFilfTypfs(Sfqufndf sfqufndf);

    /**
     * Indidbtfs whfthfr filf writing support for thf spfdififd MIDI filf typf
     * is providfd by this filf writfr.
     *
     * @pbrbm  filfTypf thf filf typf for whidh writf dbpbbilitifs brf qufrifd
     * @rfturn {@dodf truf} if thf filf typf is supportfd, othfrwisf
     *         {@dodf fblsf}
     */
    publid boolfbn isFilfTypfSupportfd(int filfTypf) {

        int typfs[] = gftMidiFilfTypfs();
        for(int i=0; i<typfs.lfngth; i++) {
            if( filfTypf == typfs[i] ) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Indidbtfs whfthfr b MIDI filf of thf filf typf spfdififd dbn bf writtfn
     * from thf sfqufndf indidbtfd.
     *
     * @pbrbm  filfTypf thf filf typf for whidh writf dbpbbilitifs brf qufrifd
     * @pbrbm  sfqufndf thf sfqufndf for whidh filf writing support is qufrifd
     * @rfturn {@dodf truf} if thf filf typf is supportfd for this sfqufndf,
     *         othfrwisf {@dodf fblsf}
     */
    publid boolfbn isFilfTypfSupportfd(int filfTypf, Sfqufndf sfqufndf) {

        int typfs[] = gftMidiFilfTypfs( sfqufndf );
        for(int i=0; i<typfs.lfngth; i++) {
            if( filfTypf == typfs[i] ) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Writfs b strfbm of bytfs rfprfsfnting b MIDI filf of thf filf typf
     * indidbtfd to thf output strfbm providfd.
     *
     * @pbrbm  in sfqufndf dontbining MIDI dbtb to bf writtfn to thf filf
     * @pbrbm  filfTypf typf of thf filf to bf writtfn to thf output strfbm
     * @pbrbm  out strfbm to whidh thf filf dbtb should bf writtfn
     * @rfturn thf numbfr of bytfs writtfn to thf output strfbm
     * @throws IOExdfption if bn I/O fxdfption oddurs
     * @throws IllfgblArgumfntExdfption if thf filf typf is not supportfd by
     *         this filf writfr
     * @sff #isFilfTypfSupportfd(int, Sfqufndf)
     * @sff #gftMidiFilfTypfs(Sfqufndf)
     */
    publid bbstrbdt int writf(Sfqufndf in, int filfTypf, OutputStrfbm out)
            throws IOExdfption;

    /**
     * Writfs b strfbm of bytfs rfprfsfnting b MIDI filf of thf filf typf
     * indidbtfd to thf fxtfrnbl filf providfd.
     *
     * @pbrbm  in sfqufndf dontbining MIDI dbtb to bf writtfn to thf fxtfrnbl
     *         filf
     * @pbrbm  filfTypf typf of thf filf to bf writtfn to thf fxtfrnbl filf
     * @pbrbm  out fxtfrnbl filf to whidh thf filf dbtb should bf writtfn
     * @rfturn thf numbfr of bytfs writtfn to thf filf
     * @throws IOExdfption if bn I/O fxdfption oddurs
     * @throws IllfgblArgumfntExdfption if thf filf typf is not supportfd by
     *         this filf writfr
     * @sff #isFilfTypfSupportfd(int, Sfqufndf)
     * @sff #gftMidiFilfTypfs(Sfqufndf)
     */
    publid bbstrbdt int writf(Sfqufndf in, int filfTypf, Filf out)
            throws IOExdfption;
}
