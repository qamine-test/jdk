/*
 * Copyright (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sound.midi;

/**
 * A <dodf>SysfxMfssbgf</dodf> objfdt rfprfsfnts b MIDI systfm fxdlusivf mfssbgf.
 * <p>
 * Whfn b systfm fxdlusivf mfssbgf is rfbd from b MIDI filf, it blwbys hbs
 * b dffinfd lfngth.  Dbtb from b systfm fxdlusivf mfssbgf from b MIDI filf
 * should bf storfd in thf dbtb brrby of b <dodf>SysfxMfssbgf</dodf> bs
 * follows: thf systfm fxdlusivf mfssbgf stbtus bytf (0xF0 or 0xF7), bll
 * mfssbgf dbtb bytfs, bnd finblly thf fnd-of-fxdlusivf flbg (0xF7).
 * Thf lfngth rfportfd by thf <dodf>SysfxMfssbgf</dodf> objfdt is thfrfforf
 * thf lfngth of thf systfm fxdlusivf dbtb plus two: onf bytf for thf stbtus
 * bytf bnd onf for thf fnd-of-fxdlusivf flbg.
 * <p>
 * As didtbtfd by thf Stbndbrd MIDI Filfs spfdifidbtion, two stbtus bytf vblufs brf lfgbl
 * for b <dodf>SysfxMfssbgf</dodf> rfbd from b MIDI filf:
 * <ul>
 * <li>0xF0: Systfm Exdlusivf mfssbgf (sbmf bs in MIDI wirf protodol)</li>
 * <li>0xF7: Spfdibl Systfm Exdlusivf mfssbgf</li>
 * </ul>
 * <p>
 * Whfn Jbvb Sound is usfd to hbndlf systfm fxdlusivf dbtb thbt is bfing rfdfivfd
 * using MIDI wirf protodol, it should plbdf thf dbtb in onf or morf
 * <dodf>SysfxMfssbgfs</dodf>.  In this dbsf, thf lfngth of thf systfm fxdlusivf dbtb
 * is not known in bdvbndf; thf fnd of thf systfm fxdlusivf dbtb is mbrkfd by bn
 * fnd-of-fxdlusivf flbg (0xF7) in thf MIDI wirf bytf strfbm.
 * <ul>
 * <li>0xF0: Systfm Exdlusivf mfssbgf (sbmf bs in MIDI wirf protodol)</li>
 * <li>0xF7: End of Exdlusivf (EOX)</li>
 * </ul>
 * Thf first <dodf>SysfxMfssbgf</dodf> objfdt dontbining dbtb for b pbrtidulbr systfm
 * fxdlusivf mfssbgf should hbvf thf stbtus vbluf 0xF0.  If this mfssbgf dontbins bll
 * thf systfm fxdlusivf dbtb
 * for thf mfssbgf, it should fnd with thf stbtus bytf 0xF7 (EOX).
 * Othfrwisf, bdditionbl systfm fxdlusivf dbtb should bf sfnt in onf or morf
 * <dodf>SysfxMfssbgfs</dodf> with b stbtus vbluf of 0xF7.  Thf <dodf>SysfxMfssbgf</dodf>
 * dontbining thf lbst of thf dbtb for thf systfm fxdlusivf mfssbgf should fnd with thf
 * vbluf 0xF7 (EOX) to mbrk thf fnd of thf systfm fxdlusivf mfssbgf.
 * <p>
 * If systfm fxdlusivf dbtb from <dodf>SysfxMfssbgfs</dodf> objfdts is bfing trbnsmittfd
 * using MIDI wirf protodol, only thf initibl 0xF0 stbtus bytf, thf systfm fxdlusivf
 * dbtb itsflf, bnd thf finbl 0xF7 (EOX) bytf should bf propbgbtfd; bny 0xF7 stbtus
 * bytfs usfd to indidbtf thbt b <dodf>SysfxMfssbgf</dodf> dontbins dontinuing systfm
 * fxdlusivf dbtb should not bf propbgbtfd vib MIDI wirf protodol.
 *
 * @buthor Dbvid Rivbs
 * @buthor Kbrb Kytlf
 * @buthor Floribn Bomfrs
 */
publid dlbss SysfxMfssbgf fxtfnds MidiMfssbgf {


    // Stbtus bytf dffinfs


    /**
     * Stbtus bytf for Systfm Exdlusivf mfssbgf (0xF0, or 240).
     * @sff MidiMfssbgf#gftStbtus
     */
    publid stbtid finbl int SYSTEM_EXCLUSIVE                    = 0xF0; // 240


    /**
     * Stbtus bytf for Spfdibl Systfm Exdlusivf mfssbgf (0xF7, or 247), whidh is usfd
     * in MIDI filfs.  It hbs thf sbmf vbluf bs END_OF_EXCLUSIVE, whidh
     * is usfd in thf rfbl-timf "MIDI wirf" protodol.
     * @sff MidiMfssbgf#gftStbtus
     */
    publid stbtid finbl int SPECIAL_SYSTEM_EXCLUSIVE    = 0xF7; // 247


    // Instbndf vbribblfs


    /*
     * Thf dbtb bytfs for this systfm fxdlusivf mfssbgf.  Thfsf brf
     * initiblizfd to <dodf>null</dodf> bnd brf sft fxpliditly
     * by {@link #sftMfssbgf(int, bytf[], int, long) sftMfssbgf}.
     */
    //protfdtfd bytf[] dbtb = null;


    /**
     * Construdts b nfw <dodf>SysfxMfssbgf</dodf>. Thf
     * dontfnts of thf nfw mfssbgf brf gubrbntffd to spfdify
     * b vblid MIDI mfssbgf.  Subsfqufntly, you mby sft thf
     * dontfnts of thf mfssbgf using onf of thf <dodf>sftMfssbgf</dodf>
     * mfthods.
     * @sff #sftMfssbgf
     */
    publid SysfxMfssbgf() {
        this(nfw bytf[2]);
        // Dffbult sysfx mfssbgf dbtb: SOX followfd by EOX
        dbtb[0] = (bytf) (SYSTEM_EXCLUSIVE & 0xFF);
        dbtb[1] = (bytf) (ShortMfssbgf.END_OF_EXCLUSIVE & 0xFF);
    }

    /**
     * Construdts b nfw {@dodf SysfxMfssbgf} bnd sfts thf dbtb for
     * thf mfssbgf. Thf first bytf of thf dbtb brrby must bf b vblid systfm
     * fxdlusivf stbtus bytf (0xF0 or 0xF7).
     * Thf dontfnts of thf mfssbgf dbn bf dhbngfd by using onf of
     * thf {@dodf sftMfssbgf} mfthods.
     *
     * @pbrbm dbtb thf systfm fxdlusivf mfssbgf dbtb indluding thf stbtus bytf
     * @pbrbm lfngth thf lfngth of thf vblid mfssbgf dbtb in thf brrby,
     *     indluding thf stbtus bytf; it should bf non-nfgbtivf bnd lfss thbn
     *     or fqubl to {@dodf dbtb.lfngth}
     * @throws InvblidMidiDbtbExdfption if thf pbrbmftfr vblufs
     *     do not spfdify b vblid MIDI mftb mfssbgf.
     * @sff #sftMfssbgf(bytf[], int)
     * @sff #sftMfssbgf(int, bytf[], int)
     * @sff #gftDbtb()
     * @sindf 1.7
     */
    publid SysfxMfssbgf(bytf[] dbtb, int lfngth)
            throws InvblidMidiDbtbExdfption {
        supfr(null);
        sftMfssbgf(dbtb, lfngth);
    }

    /**
     * Construdts b nfw {@dodf SysfxMfssbgf} bnd sfts thf dbtb for thf mfssbgf.
     * Thf dontfnts of thf mfssbgf dbn bf dhbngfd by using onf of
     * thf {@dodf sftMfssbgf} mfthods.
     *
     * @pbrbm stbtus thf stbtus bytf for thf mfssbgf; it must bf b vblid systfm
     *     fxdlusivf stbtus bytf (0xF0 or 0xF7)
     * @pbrbm dbtb thf systfm fxdlusivf mfssbgf dbtb (without thf stbtus bytf)
     * @pbrbm lfngth thf lfngth of thf vblid mfssbgf dbtb in thf brrby;
     *     it should bf non-nfgbtivf bnd lfss thbn or fqubl to
     *     {@dodf dbtb.lfngth}
     * @throws InvblidMidiDbtbExdfption if thf pbrbmftfr vblufs
     *     do not spfdify b vblid MIDI mftb mfssbgf.
     * @sff #sftMfssbgf(bytf[], int)
     * @sff #sftMfssbgf(int, bytf[], int)
     * @sff #gftDbtb()
     * @sindf 1.7
     */
    publid SysfxMfssbgf(int stbtus, bytf[] dbtb, int lfngth)
            throws InvblidMidiDbtbExdfption {
        supfr(null);
        sftMfssbgf(stbtus, dbtb, lfngth);
    }


    /**
     * Construdts b nfw <dodf>SysfxMfssbgf</dodf>.
     * @pbrbm dbtb bn brrby of bytfs dontbining thf domplftf mfssbgf.
     * Thf mfssbgf dbtb mby bf dhbngfd using thf <dodf>sftMfssbgf</dodf>
     * mfthod.
     * @sff #sftMfssbgf
     */
    protfdtfd SysfxMfssbgf(bytf[] dbtb) {
        supfr(dbtb);
    }


    /**
     * Sfts thf dbtb for thf systfm fxdlusivf mfssbgf.   Thf
     * first bytf of thf dbtb brrby must bf b vblid systfm
     * fxdlusivf stbtus bytf (0xF0 or 0xF7).
     * @pbrbm dbtb thf systfm fxdlusivf mfssbgf dbtb
     * @pbrbm lfngth thf lfngth of thf vblid mfssbgf dbtb in
     * thf brrby, indluding thf stbtus bytf.
     */
    publid void sftMfssbgf(bytf[] dbtb, int lfngth) throws InvblidMidiDbtbExdfption {
        int stbtus = (dbtb[0] & 0xFF);
        if ((stbtus != 0xF0) && (stbtus != 0xF7)) {
            throw nfw InvblidMidiDbtbExdfption("Invblid stbtus bytf for sysfx mfssbgf: 0x" + Intfgfr.toHfxString(stbtus));
        }
        supfr.sftMfssbgf(dbtb, lfngth);
    }


    /**
     * Sfts thf dbtb for thf systfm fxdlusivf mfssbgf.
     * @pbrbm stbtus thf stbtus bytf for thf mfssbgf (0xF0 or 0xF7)
     * @pbrbm dbtb thf systfm fxdlusivf mfssbgf dbtb
     * @pbrbm lfngth thf lfngth of thf vblid mfssbgf dbtb in
     * thf brrby
     * @throws InvblidMidiDbtbExdfption if thf stbtus bytf is invblid for b sysfx mfssbgf
     */
    publid void sftMfssbgf(int stbtus, bytf[] dbtb, int lfngth) throws InvblidMidiDbtbExdfption {
        if ( (stbtus != 0xF0) && (stbtus != 0xF7) ) {
            throw nfw InvblidMidiDbtbExdfption("Invblid stbtus bytf for sysfx mfssbgf: 0x" + Intfgfr.toHfxString(stbtus));
        }
        if (lfngth < 0 || lfngth > dbtb.lfngth) {
            throw nfw IndfxOutOfBoundsExdfption("lfngth out of bounds: "+lfngth);
        }
        this.lfngth = lfngth + 1;

        if (this.dbtb==null || this.dbtb.lfngth < this.lfngth) {
            this.dbtb = nfw bytf[this.lfngth];
        }

        this.dbtb[0] = (bytf) (stbtus & 0xFF);
        if (lfngth > 0) {
            Systfm.brrbydopy(dbtb, 0, this.dbtb, 1, lfngth);
        }
    }


    /**
     * Obtbins b dopy of thf dbtb for thf systfm fxdlusivf mfssbgf.
     * Thf rfturnfd brrby of bytfs dofs not indludf thf stbtus bytf.
     * @rfturn brrby dontbining thf systfm fxdlusivf mfssbgf dbtb.
     */
    publid bytf[] gftDbtb() {
        bytf[] rfturnfdArrby = nfw bytf[lfngth - 1];
        Systfm.brrbydopy(dbtb, 1, rfturnfdArrby, 0, (lfngth - 1));
        rfturn rfturnfdArrby;
    }


    /**
     * Crfbtfs b nfw objfdt of thf sbmf dlbss bnd with thf sbmf dontfnts
     * bs this objfdt.
     * @rfturn b dlonf of this instbndf
     */
    publid Objfdt dlonf() {
        bytf[] nfwDbtb = nfw bytf[lfngth];
        Systfm.brrbydopy(dbtb, 0, nfwDbtb, 0, nfwDbtb.lfngth);
        SysfxMfssbgf fvfnt = nfw SysfxMfssbgf(nfwDbtb);
        rfturn fvfnt;
    }
}
