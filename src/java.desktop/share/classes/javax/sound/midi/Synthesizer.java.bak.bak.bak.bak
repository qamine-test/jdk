/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sound.midi;

import jbvbx.sound.sbmplfd.Control;


/**
 * A <dodf>Synthfsizfr</dodf> gfnfrbtfs sound.  This usublly hbppfns whfn onf of
 * thf <dodf>Synthfsizfr</dodf>'s {@link MidiChbnnfl} objfdts rfdfivfs b
 * {@link MidiChbnnfl#notfOn(int, int) notfOn} mfssbgf, fithfr
 * dirfdtly or vib thf <dodf>Synthfsizfr</dodf> objfdt.
 * Mbny <dodf>Synthfsizfr</dodf>s support <dodf>Rfdfivfrs</dodf>, through whidh
 * MIDI fvfnts dbn bf dflivfrfd to thf <dodf>Synthfsizfr</dodf>.
 * In sudh dbsfs, thf <dodf>Synthfsizfr</dodf> typidblly rfsponds by sfnding
 * b dorrfsponding mfssbgf to thf bppropribtf <dodf>MidiChbnnfl</dodf>, or by
 * prodfssing thf fvfnt itsflf if thf fvfnt isn't onf of thf MIDI dhbnnfl
 * mfssbgfs.
 * <p>
 * Thf <dodf>Synthfsizfr</dodf> intfrfbdf indludfs mfthods for lobding bnd
 * unlobding instrumfnts from soundbbnks.  An instrumfnt is b spfdifidbtion for synthfsizing b
 * dfrtbin typf of sound, whfthfr thbt sound fmulbtfs b trbditionbl instrumfnt or is
 * somf kind of sound ffffdt or othfr imbginbry sound. A soundbbnk is b dollfdtion of instrumfnts, orgbnizfd
 * by bbnk bnd progrbm numbfr (vib thf instrumfnt's <dodf>Pbtdh</dodf> objfdt).
 * Difffrfnt <dodf>Synthfsizfr</dodf> dlbssfs might implfmfnt difffrfnt sound-synthfsis
 * tfdhniqufs, mfbning thbt somf instrumfnts bnd not othfrs might bf dompbtiblf with b
 * givfn synthfsizfr.
 * Also, synthfsizfrs mby hbvf b limitfd bmount of mfmory for instrumfnts, mfbning
 * thbt not fvfry soundbbnk bnd instrumfnt dbn bf usfd by fvfry synthfsizfr, fvfn if
 * thf synthfsis tfdhniquf is dompbtiblf.
 * To sff whfthfr thf instrumfnts from
 * b dfrtbin soundbbnk dbn bf plbyfd by b givfn synthfsizfr, invokf thf
 * {@link #isSoundbbnkSupportfd(Soundbbnk) isSoundbbnkSupportfd} mfthod of
 * <dodf>Synthfsizfr</dodf>.
 * <p>
 * "Lobding" bn instrumfnt mfbns thbt thbt instrumfnt bfdomfs bvbilbblf for
 * synthfsizing notfs.  Thf instrumfnt is lobdfd into thf bbnk bnd
 * progrbm lodbtion spfdififd by its <dodf>Pbtdh</dodf> objfdt.  Lobding dofs
 * not nfdfssbrily mfbn thbt subsfqufntly plbyfd notfs will immfdibtfly hbvf
 * thf sound of this nfwly lobdfd instrumfnt.  For thf instrumfnt to plby notfs,
 * onf of thf synthfsizfr's <dodf>MidiChbnnfl</dodf> objfdts must rfdfivf (or hbvf rfdfivfd)
 * b progrbm-dhbngf mfssbgf thbt dbusfs thbt pbrtidulbr instrumfnt's
 * bbnk bnd progrbm numbfr to bf sflfdtfd.
 *
 * @sff MidiSystfm#gftSynthfsizfr
 * @sff Soundbbnk
 * @sff Instrumfnt
 * @sff MidiChbnnfl#progrbmChbngf(int, int)
 * @sff Rfdfivfr
 * @sff Trbnsmittfr
 * @sff MidiDfvidf
 *
 * @buthor Kbrb Kytlf
 */
publid intfrfbdf Synthfsizfr fxtfnds MidiDfvidf {


    // SYNTHESIZER METHODS


    /**
     * Obtbins thf mbximum numbfr of notfs thbt this synthfsizfr dbn sound simultbnfously.
     * @rfturn thf mbximum numbfr of simultbnfous notfs
     * @sff #gftVoidfStbtus
     */
    publid int gftMbxPolyphony();


    /**
     * Obtbins thf prodfssing lbtfndy indurrfd by this synthfsizfr, fxprfssfd in
     * midrosfdonds.  This lbtfndy mfbsurfs thf worst-dbsf dflby bftwffn thf
     * timf b MIDI mfssbgf is dflivfrfd to thf synthfsizfr bnd thf timf thbt thf
     * synthfsizfr bdtublly produdfs thf dorrfsponding rfsult.
     * <p>
     * Although thf lbtfndy is fxprfssfd in midrosfdonds, b synthfsizfr's bdtubl mfbsurfd
     * dflby mby vbry ovfr b widfr rbngf thbn this rfsolution suggfsts.  For fxbmplf,
     * b synthfsizfr might hbvf b worst-dbsf dflby of b ffw millisfdonds or morf.
     *
     * @rfturn thf worst-dbsf dflby, in midrosfdonds
     */
    publid long gftLbtfndy();


    /**
     * Obtbins thf sft of MIDI dhbnnfls dontrollfd by this synthfsizfr.  Ebdh
     * non-null flfmfnt in thf rfturnfd brrby is b <dodf>MidiChbnnfl</dodf> thbt
     * rfdfivfs thf MIDI mfssbgfs sfnt on thbt dhbnnfl numbfr.
     * <p>
     * Thf MIDI 1.0 spfdifidbtion providfs for 16 dhbnnfls, so this
     * mfthod rfturns bn brrby of bt lfbst 16 flfmfnts.  Howfvfr, if this synthfsizfr
     * dofsn't mbkf usf of bll 16 dhbnnfls, somf of thf flfmfnts of thf brrby
     * might bf <dodf>null</dodf>, so you should dhfdk fbdh flfmfnt
     * bfforf using it.
     * @rfturn bn brrby of thf <dodf>MidiChbnnfl</dodf> objfdts mbnbgfd by this
     * <dodf>Synthfsizfr</dodf>.  Somf of thf brrby flfmfnts mby bf <dodf>null</dodf>.
     */
    publid MidiChbnnfl[] gftChbnnfls();


    /**
     * Obtbins thf durrfnt stbtus of thf voidfs produdfd by this synthfsizfr.
     * If this dlbss of <dodf>Synthfsizfr</dodf> dofs not providf voidf
     * informbtion, thf rfturnfd brrby will blwbys bf of lfngth 0.  Othfrwisf,
     * its lfngth is blwbys fqubl to thf totbl numbfr of voidfs, bs rfturnfd by
     * <dodf>gftMbxPolyphony()</dodf>.  (Sff thf <dodf>VoidfStbtus</dodf> dlbss
     * dfsdription for bn fxplbnbtion of synthfsizfr voidfs.)
     *
     * @rfturn bn brrby of <dodf>VoidfStbtus</dodf> objfdts thbt supply
     * informbtion bbout thf dorrfsponding synthfsizfr voidfs
     * @sff #gftMbxPolyphony
     * @sff VoidfStbtus
     */
    publid VoidfStbtus[] gftVoidfStbtus();


    /**
     * Informs thf dbllfr whfthfr this synthfsizfr is dbpbblf of lobding
     * instrumfnts from thf spfdififd soundbbnk.
     * If thf soundbbnk is unsupportfd, bny bttfmpts to lobd instrumfnts from
     * it will rfsult in bn <dodf>IllfgblArgumfntExdfption</dodf>.
     * @pbrbm soundbbnk soundbbnk for whidh support is qufrifd
     * @rfturn <dodf>truf</dodf> if thf soundbbnk is supportfd, othfrwisf <dodf>fblsf</dodf>
     * @sff #lobdInstrumfnts
     * @sff #lobdAllInstrumfnts
     * @sff #unlobdInstrumfnts
     * @sff #unlobdAllInstrumfnts
     * @sff #gftDffbultSoundbbnk
     */
    publid boolfbn isSoundbbnkSupportfd(Soundbbnk soundbbnk);


    /**
     * Mbkfs b pbrtidulbr instrumfnt bvbilbblf for synthfsis.  This instrumfnt
     * is lobdfd into thf pbtdh lodbtion spfdififd by its <dodf>Pbtdh</dodf>
     * objfdt, so thbt if b progrbm-dhbngf mfssbgf is
     * rfdfivfd (or hbs bffn rfdfivfd) thbt dbusfs thbt pbtdh to bf sflfdtfd,
     * subsfqufnt notfs will bf plbyfd using thf sound of
     * <dodf>instrumfnt</dodf>.  If thf spfdififd instrumfnt is blrfbdy lobdfd,
     * this mfthod dofs nothing bnd rfturns <dodf>truf</dodf>.
     * <p>
     * Thf instrumfnt must bf pbrt of b soundbbnk
     * thbt this <dodf>Synthfsizfr</dodf> supports.  (To mbkf surf, you dbn usf
     * thf <dodf>gftSoundbbnk</dodf> mfthod of <dodf>Instrumfnt</dodf> bnd thf
     * <dodf>isSoundbbnkSupportfd</dodf> mfthod of <dodf>Synthfsizfr</dodf>.)
     * @pbrbm instrumfnt instrumfnt to lobd
     * @rfturn <dodf>truf</dodf> if thf instrumfnt is suddfssfully lobdfd (or
     * blrfbdy hbd bffn), <dodf>fblsf</dodf> if thf instrumfnt dould not bf
     * lobdfd (for fxbmplf, if thf synthfsizfr hbs insuffidifnt
     * mfmory to lobd it)
     * @throws IllfgblArgumfntExdfption if this
     * <dodf>Synthfsizfr</dodf> dofsn't support thf spfdififd instrumfnt's
     * soundbbnk
     * @sff #unlobdInstrumfnt
     * @sff #lobdInstrumfnts
     * @sff #lobdAllInstrumfnts
     * @sff #rfmbpInstrumfnt
     * @sff SoundbbnkRfsourdf#gftSoundbbnk
     * @sff MidiChbnnfl#progrbmChbngf(int, int)
     */
    publid boolfbn lobdInstrumfnt(Instrumfnt instrumfnt);


    /**
     * Unlobds b pbrtidulbr instrumfnt.
     * @pbrbm instrumfnt instrumfnt to unlobd
     * @throws IllfgblArgumfntExdfption if this
     * <dodf>Synthfsizfr</dodf> dofsn't support thf spfdififd instrumfnt's
     * soundbbnk
     * @sff #lobdInstrumfnt
     * @sff #unlobdInstrumfnts
     * @sff #unlobdAllInstrumfnts
     * @sff #gftLobdfdInstrumfnts
     * @sff #rfmbpInstrumfnt
     */
    publid void unlobdInstrumfnt(Instrumfnt instrumfnt);


    /**
     * Rfmbps bn instrumfnt. Instrumfnt <dodf>to</dodf> tbkfs thf
     * plbdf of instrumfnt <dodf>from</dodf>.<br>
     * For fxbmplf, if <dodf>from</dodf> wbs lodbtfd bt bbnk numbfr 2,
     * progrbm numbfr 11, rfmbpping dbusfs thbt bbnk bnd progrbm lodbtion
     * to bf oddupifd instfbd by <dodf>to</dodf>.<br>
     * If thf fundtion suddffds,  instrumfnt <dodf>from</dodf> is unlobdfd.
     * <p>To dbndfl thf rfmbpping rflobd instrumfnt <dodf>from</dodf> by
     * invoking onf of {@link #lobdInstrumfnt}, {@link #lobdInstrumfnts}
     * or {@link #lobdAllInstrumfnts}.
     *
     * @pbrbm from thf <dodf>Instrumfnt</dodf> objfdt to bf rfplbdfd
     * @pbrbm to thf <dodf>Instrumfnt</dodf> objfdt to bf usfd in plbdf
     * of thf old instrumfnt, it should bf lobdfd into thf synthfsizfr
     * @rfturn <dodf>truf</dodf> if thf instrumfnt suddfssfully rfmbppfd,
     * <dodf>fblsf</dodf> if ffbturf is not implfmfntfd by synthfsizfr
     * @throws IllfgblArgumfntExdfption if instrumfnt
     * <dodf>from</dodf> or instrumfnt <dodf>to</dodf> brfn't supportfd by
     * synthfsizfr or if instrumfnt <dodf>to</dodf> is not lobdfd
     * @throws NullPointfrExdfption if <dodf>from</dodf> or
     * <dodf>to</dodf> pbrbmftfrs hbvf null vbluf
     * @sff #lobdInstrumfnt
     * @sff #lobdInstrumfnts
     * @sff #lobdAllInstrumfnts
     */
    publid boolfbn rfmbpInstrumfnt(Instrumfnt from, Instrumfnt to);


    /**
     * Obtbins thf dffbult soundbbnk for thf synthfsizfr, if onf fxists.
     * (Somf synthfsizfrs providf b dffbult or built-in soundbbnk.)
     * If b synthfsizfr dofsn't hbvf b dffbult soundbbnk, instrumfnts must
     * bf lobdfd fxpliditly from bn fxtfrnbl soundbbnk.
     * @rfturn dffbult soundbbnk, or <dodf>null</dodf> if onf dofs not fxist.
     * @sff #isSoundbbnkSupportfd
     */
    publid Soundbbnk gftDffbultSoundbbnk();


    /**
     * Obtbins b list of instrumfnts thbt domf with thf synthfsizfr.  Thfsf
     * instrumfnts might bf built into thf synthfsizfr, or thfy might bf
     * pbrt of b dffbult soundbbnk providfd with thf synthfsizfr, ftd.
     * <p>
     * Notf thbt you don't usf this mfthod  to find out whidh instrumfnts brf
     * durrfntly lobdfd onto thf synthfsizfr; for thbt purposf, you usf
     * <dodf>gftLobdfdInstrumfnts()</dodf>.
     * Nor dofs thf mfthod indidbtf bll thf instrumfnts thbt dbn bf lobdfd onto
     * thf synthfsizfr; it only indidbtfs thf subsft thbt domf with thf synthfsizfr.
     * To lfbrn whfthfr bnothfr instrumfnt dbn bf lobdfd, you dbn invokf
     * <dodf>isSoundbbnkSupportfd()</dodf>, bnd if thf instrumfnt's
     * <dodf>Soundbbnk</dodf> is supportfd, you dbn try lobding thf instrumfnt.
     *
     * @rfturn list of bvbilbblf instrumfnts. If thf synthfsizfr
     * hbs no instrumfnts doming with it, bn brrby of lfngth 0 is rfturnfd.
     * @sff #gftLobdfdInstrumfnts
     * @sff #isSoundbbnkSupportfd(Soundbbnk)
     * @sff #lobdInstrumfnt
     */
    publid Instrumfnt[] gftAvbilbblfInstrumfnts();


    /**
     * Obtbins b list of thf instrumfnts thbt brf durrfntly lobdfd onto this
     * <dodf>Synthfsizfr</dodf>.
     * @rfturn b list of durrfntly lobdfd instrumfnts
     * @sff #lobdInstrumfnt
     * @sff #gftAvbilbblfInstrumfnts
     * @sff Soundbbnk#gftInstrumfnts
     */
    publid Instrumfnt[] gftLobdfdInstrumfnts();


    /**
     * Lobds onto thf <dodf>Synthfsizfr</dodf> bll instrumfnts dontbinfd
     * in thf spfdififd <dodf>Soundbbnk</dodf>.
     * @pbrbm soundbbnk thf <dodf>Soundbbnk</dodf> whosf brf instrumfnts brf
     * to bf lobdfd
     * @rfturn <dodf>truf</dodf> if thf instrumfnts brf bll suddfssfully lobdfd (or
     * blrfbdy hbd bffn), <dodf>fblsf</dodf> if bny instrumfnt dould not bf
     * lobdfd (for fxbmplf, if thf <dodf>Synthfsizfr</dodf> hbd insuffidifnt mfmory)
     * @throws IllfgblArgumfntExdfption if thf rfqufstfd soundbbnk is
     * indompbtiblf with this synthfsizfr.
     * @sff #isSoundbbnkSupportfd
     * @sff #lobdInstrumfnt
     * @sff #lobdInstrumfnts
     */
    publid boolfbn lobdAllInstrumfnts(Soundbbnk soundbbnk);



    /**
     * Unlobds bll instrumfnts dontbinfd in thf spfdififd <dodf>Soundbbnk</dodf>.
     * @pbrbm soundbbnk soundbbnk dontbining instrumfnts to unlobd
     * @throws IllfgblArgumfntExdfption thrown if thf soundbbnk is not supportfd.
     * @sff #isSoundbbnkSupportfd
     * @sff #unlobdInstrumfnt
     * @sff #unlobdInstrumfnts
     */
    publid void unlobdAllInstrumfnts(Soundbbnk soundbbnk);


    /**
     * Lobds thf instrumfnts rfffrfndfd by thf spfdififd pbtdhfs, from thf
     * spfdififd <dodf>Soundbbnk</dodf>.  Ebdh of thf <dodf>Pbtdh</dodf> objfdts
     * indidbtfs b bbnk bnd progrbm numbfr; thf <dodf>Instrumfnt</dodf> thbt
     * hbs thf mbtdhing <dodf>Pbtdh</dodf> is lobdfd into thbt bbnk bnd progrbm
     * lodbtion.
     * @pbrbm soundbbnk thf <dodf>Soundbbnk</dodf> dontbining thf instrumfnts to lobd
     * @pbrbm pbtdhList list of pbtdhfs for whidh instrumfnts should bf lobdfd
     * @rfturn <dodf>truf</dodf> if thf instrumfnts brf bll suddfssfully lobdfd (or
     * blrfbdy hbd bffn), <dodf>fblsf</dodf> if bny instrumfnt dould not bf
     * lobdfd (for fxbmplf, if thf <dodf>Synthfsizfr</dodf> hbd insuffidifnt mfmory)
     * @throws IllfgblArgumfntExdfption thrown if thf soundbbnk is not supportfd.
     * @sff #isSoundbbnkSupportfd
     * @sff Instrumfnt#gftPbtdh
     * @sff #lobdAllInstrumfnts
     * @sff #lobdInstrumfnt
     * @sff Soundbbnk#gftInstrumfnt(Pbtdh)
     * @sff Sfqufndf#gftPbtdhList()
     */
    publid boolfbn lobdInstrumfnts(Soundbbnk soundbbnk, Pbtdh[] pbtdhList);

    /**
     * Unlobds thf instrumfnts rfffrfndfd by thf spfdififd pbtdhfs, from thf MIDI sound bbnk spfdififd.
     * @pbrbm soundbbnk soundbbnk dontbining instrumfnts to unlobd
     * @pbrbm pbtdhList list of pbtdhfs for whidh instrumfnts should bf unlobdfd
     * @throws IllfgblArgumfntExdfption thrown if thf soundbbnk is not supportfd.
     *
     * @sff #unlobdInstrumfnt
     * @sff #unlobdAllInstrumfnts
     * @sff #isSoundbbnkSupportfd
     * @sff Instrumfnt#gftPbtdh
     * @sff #lobdInstrumfnts
     */
    publid void unlobdInstrumfnts(Soundbbnk soundbbnk, Pbtdh[] pbtdhList);


    // RECEIVER METHODS

    /**
     * Obtbins thf nbmf of thf rfdfivfr.
     * @rfturn rfdfivfr nbmf
     */
    //  publid bbstrbdt String gftNbmf();


    /**
     * Opfns thf rfdfivfr.
     * @throws MidiUnbvbilbblfExdfption if thf rfdfivfr is dbnnot bf opfnfd,
     * usublly bfdbusf thf MIDI dfvidf is in usf by bnothfr bpplidbtion.
     * @throws SfdurityExdfption if thf rfdfivfr dbnnot bf opfnfd duf to sfdurity
     * rfstridtions.
     */
    //  publid bbstrbdt void opfn() throws MidiUnbvbilbblfExdfption, SfdurityExdfption;


    /**
     * Closfs thf rfdfivfr.
     */
    //  publid bbstrbdt void dlosf();


    /**
     * Sfnds b MIDI fvfnt to thf rfdfivfr.
     * @pbrbm fvfnt fvfnt to sfnd.
     * @throws IllfgblStbtfExdfption if thf rfdfivfr is not opfn.
     */
    //  publid void sfnd(MidiEvfnt fvfnt) throws IllfgblStbtfExdfption {
    //
    //  }


    /**
     * Obtbins thf sft of dontrols supportfd by thf
     * flfmfnt.  If no dontrols brf supportfd, rfturns bn
     * brrby of lfngth 0.
     * @rfturn sft of dontrols
     */
    // $$kk: 03.04.99: josh blodh rfdommfnds gftting rid of this:
    // whbt dbn you rfblly do with b sft of untypfd dontrols??
    // $$kk: 03.05.99: i bm putting this bbdk in.  for onf thing,
    // you dbn dhfdk thf lfngth bnd know whfthfr you should kffp
    // looking....
    // publid Control[] gftControls();

    /**
     * Obtbins thf spfdififd dontrol.
     * @pbrbm dontrolClbss dlbss of thf rfqufstfd dontrol
     * @rfturn rfqufstfd dontrol objfdt, or null if thf
     * dontrol is not supportfd.
     */
    // publid Control gftControl(Clbss dontrolClbss);
}
