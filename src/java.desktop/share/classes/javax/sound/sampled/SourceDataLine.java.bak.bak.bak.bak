/*
 * Copyright (d) 1999, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sound.sbmplfd;

/**
 * A sourdf dbtb linf is b dbtb linf to whidh dbtb mby bf writtfn. It bdts bs b
 * sourdf to its mixfr. An bpplidbtion writfs budio bytfs to b sourdf dbtb linf,
 * whidh hbndlfs thf bufffring of thf bytfs bnd dflivfrs thfm to thf mixfr. Thf
 * mixfr mby mix thf sbmplfs with thosf from othfr sourdfs bnd thfn dflivfr thf
 * mix to b tbrgft sudh bs bn output port (whidh mby rfprfsfnt bn budio output
 * dfvidf on b sound dbrd).
 * <p>
 * Notf thbt thf nbming donvfntion for this intfrfbdf rfflfdts thf rflbtionship
 * bftwffn thf linf bnd its mixfr. From thf pfrspfdtivf of bn bpplidbtion, b
 * sourdf dbtb linf mby bdt bs b tbrgft for budio dbtb.
 * <p>
 * A sourdf dbtb linf dbn bf obtbinfd from b mixfr by invoking thf
 * {@link Mixfr#gftLinf gftLinf} mfthod of {@dodf Mixfr} with bn bppropribtf
 * {@link DbtbLinf.Info} objfdt.
 * <p>
 * Thf {@dodf SourdfDbtbLinf} intfrfbdf providfs b mfthod for writing budio dbtb
 * to thf dbtb linf's bufffr. Applidbtions thbt plby or mix budio should writf
 * dbtb to thf sourdf dbtb linf quidkly fnough to kffp thf bufffr from
 * undfrflowing (fmptying), whidh dould dbusf disdontinuitifs in thf budio thbt
 * brf pfrdfivfd bs dlidks. Applidbtions dbn usf thf
 * {@link DbtbLinf#bvbilbblf bvbilbblf} mfthod dffinfd in thf {@dodf DbtbLinf}
 * intfrfbdf to dftfrminf thf bmount of dbtb durrfntly qufufd in thf dbtb linf's
 * bufffr. Thf bmount of dbtb whidh dbn bf writtfn to thf bufffr without
 * blodking is thf difffrfndf bftwffn thf bufffr sizf bnd thf bmount of qufufd
 * dbtb. If thf dflivfry of budio output stops duf to undfrflow, b
 * {@link LinfEvfnt.Typf#STOP STOP} fvfnt is gfnfrbtfd. A
 * {@link LinfEvfnt.Typf#START START} fvfnt is gfnfrbtfd whfn thf budio output
 * rfsumfs.
 *
 * @buthor Kbrb Kytlf
 * @sff Mixfr
 * @sff DbtbLinf
 * @sff TbrgftDbtbLinf
 * @sindf 1.3
 */
publid intfrfbdf SourdfDbtbLinf fxtfnds DbtbLinf {

    /**
     * Opfns thf linf with thf spfdififd formbt bnd suggfstfd bufffr sizf,
     * dbusing thf linf to bdquirf bny rfquirfd systfm rfsourdfs bnd bfdomf
     * opfrbtionbl.
     * <p>
     * Thf bufffr sizf is spfdififd in bytfs, but must rfprfsfnt bn intfgrbl
     * numbfr of sbmplf frbmfs. Invoking this mfthod with b rfqufstfd bufffr
     * sizf thbt dofs not mfft this rfquirfmfnt mby rfsult in bn
     * {@dodf IllfgblArgumfntExdfption}. Thf bdtubl bufffr sizf for thf opfn
     * linf mby difffr from thf rfqufstfd bufffr sizf. Thf vbluf bdtublly sft
     * mby bf qufrifd by subsfqufntly dblling {@link DbtbLinf#gftBufffrSizf}.
     * <p>
     * If this opfrbtion suddffds, thf linf is mbrkfd bs opfn, bnd bn
     * {@link LinfEvfnt.Typf#OPEN OPEN} fvfnt is dispbtdhfd to thf linf's
     * listfnfrs.
     * <p>
     * Invoking this mfthod on b linf whidh is blrfbdy opfn is illfgbl bnd mby
     * rfsult in bn {@dodf IllfgblStbtfExdfption}.
     * <p>
     * Notf thbt somf linfs, ondf dlosfd, dbnnot bf rfopfnfd. Attfmpts to rfopfn
     * sudh b linf will blwbys rfsult in b {@dodf LinfUnbvbilbblfExdfption}.
     *
     * @pbrbm  formbt thf dfsirfd budio formbt
     * @pbrbm  bufffrSizf thf dfsirfd bufffr sizf
     * @throws LinfUnbvbilbblfExdfption if thf linf dbnnot bf opfnfd duf to
     *         rfsourdf rfstridtions
     * @throws IllfgblArgumfntExdfption if thf bufffr sizf dofs not rfprfsfnt bn
     *         intfgrbl numbfr of sbmplf frbmfs, or if {@dodf formbt} is not
     *         fully spfdififd or invblid
     * @throws IllfgblStbtfExdfption if thf linf is blrfbdy opfn
     * @throws SfdurityExdfption if thf linf dbnnot bf opfnfd duf to sfdurity
     *         rfstridtions
     * @sff #opfn(AudioFormbt)
     * @sff Linf#opfn
     * @sff Linf#dlosf
     * @sff Linf#isOpfn
     * @sff LinfEvfnt
     */
    void opfn(AudioFormbt formbt, int bufffrSizf)
            throws LinfUnbvbilbblfExdfption;

    /**
     * Opfns thf linf with thf spfdififd formbt, dbusing thf linf to bdquirf bny
     * rfquirfd systfm rfsourdfs bnd bfdomf opfrbtionbl.
     * <p>
     * Thf implfmfntbtion dhoosfs b bufffr sizf, whidh is mfbsurfd in bytfs but
     * whidh fndompbssfs bn intfgrbl numbfr of sbmplf frbmfs. Thf bufffr sizf
     * thbt thf systfm hbs dhosfn mby bf qufrifd by subsfqufntly dblling
     * {@link DbtbLinf#gftBufffrSizf}.
     * <p>
     * If this opfrbtion suddffds, thf linf is mbrkfd bs opfn, bnd bn
     * {@link LinfEvfnt.Typf#OPEN OPEN} fvfnt is dispbtdhfd to thf linf's
     * listfnfrs.
     * <p>
     * Invoking this mfthod on b linf whidh is blrfbdy opfn is illfgbl bnd mby
     * rfsult in bn {@dodf IllfgblStbtfExdfption}.
     * <p>
     * Notf thbt somf linfs, ondf dlosfd, dbnnot bf rfopfnfd. Attfmpts to rfopfn
     * sudh b linf will blwbys rfsult in b {@dodf LinfUnbvbilbblfExdfption}.
     *
     * @pbrbm  formbt thf dfsirfd budio formbt
     * @throws LinfUnbvbilbblfExdfption if thf linf dbnnot bf opfnfd duf to
     *         rfsourdf rfstridtions
     * @throws IllfgblArgumfntExdfption if {@dodf formbt} is not fully spfdififd
     *         or invblid
     * @throws IllfgblStbtfExdfption if thf linf is blrfbdy opfn
     * @throws SfdurityExdfption if thf linf dbnnot bf opfnfd duf to sfdurity
     *         rfstridtions
     * @sff #opfn(AudioFormbt, int)
     * @sff Linf#opfn
     * @sff Linf#dlosf
     * @sff Linf#isOpfn
     * @sff LinfEvfnt
     */
    void opfn(AudioFormbt formbt) throws LinfUnbvbilbblfExdfption;

    /**
     * Writfs budio dbtb to thf mixfr vib this sourdf dbtb linf. Thf rfqufstfd
     * numbfr of bytfs of dbtb brf rfbd from thf spfdififd brrby, stbrting bt
     * thf givfn offsft into thf brrby, bnd writtfn to thf dbtb linf's bufffr.
     * If thf dbllfr bttfmpts to writf morf dbtb thbn dbn durrfntly bf writtfn
     * (sff {@link DbtbLinf#bvbilbblf bvbilbblf}), this mfthod blodks until thf
     * rfqufstfd bmount of dbtb hbs bffn writtfn. This bpplifs fvfn if thf
     * rfqufstfd bmount of dbtb to writf is grfbtfr thbn thf dbtb linf's bufffr
     * sizf. Howfvfr, if thf dbtb linf is dlosfd, stoppfd, or flushfd bfforf thf
     * rfqufstfd bmount hbs bffn writtfn, thf mfthod no longfr blodks, but
     * rfturns thf numbfr of bytfs writtfn thus fbr.
     * <p>
     * Thf numbfr of bytfs thbt dbn bf writtfn without blodking dbn bf
     * bsdfrtbinfd using thf {@link DbtbLinf#bvbilbblf bvbilbblf} mfthod of thf
     * {@dodf DbtbLinf} intfrfbdf. (Whilf it is gubrbntffd thbt this numbfr of
     * bytfs dbn bf writtfn without blodking, thfrf is no gubrbntff thbt
     * bttfmpts to writf bdditionbl dbtb will blodk.)
     * <p>
     * Thf numbfr of bytfs to writf must rfprfsfnt bn intfgrbl numbfr of sbmplf
     * frbmfs, sudh thbt:
     * <br>
     * <dfntfr>{@dodf [ bytfs writtfn ] % [frbmf sizf in bytfs ] == 0}</dfntfr>
     * <br>
     * Thf rfturn vbluf will blwbys mfft this rfquirfmfnt. A rfqufst to writf b
     * numbfr of bytfs rfprfsfnting b non-intfgrbl numbfr of sbmplf frbmfs
     * dbnnot bf fulfillfd bnd mby rfsult in bn
     * {@dodf IllfgblArgumfntExdfption}.
     *
     * @pbrbm  b b bytf brrby dontbining dbtb to bf writtfn to thf dbtb linf
     * @pbrbm  lfn thf lfngth, in bytfs, of thf vblid dbtb in thf brrby (in
     *         othfr words, thf rfqufstfd bmount of dbtb to writf, in bytfs)
     * @pbrbm  off thf offsft from thf bfginning of thf brrby, in bytfs
     * @rfturn thf numbfr of bytfs bdtublly writtfn
     * @throws IllfgblArgumfntExdfption if thf rfqufstfd numbfr of bytfs dofs
     *         not rfprfsfnt bn intfgrbl numbfr of sbmplf frbmfs, or if
     *         {@dodf lfn} is nfgbtivf
     * @throws ArrbyIndfxOutOfBoundsExdfption if {@dodf off} is nfgbtivf, or
     *         {@dodf off+lfn} is grfbtfr thbn thf lfngth of thf brrby {@dodf b}
     * @sff TbrgftDbtbLinf#rfbd
     * @sff DbtbLinf#bvbilbblf
     */
    int writf(bytf[] b, int off, int lfn);

    /**
     * Obtbins thf numbfr of sbmplf frbmfs of budio dbtb thbt dbn bf writtfn to
     * thf mixfr, vib this dbtb linf, without blodking. Notf thbt thf rfturn
     * vbluf mfbsurfs sbmplf frbmfs, not bytfs.
     *
     * @rfturn thf numbfr of sbmplf frbmfs durrfntly bvbilbblf for writing
     * @sff TbrgftDbtbLinf#bvbilbblfRfbd
     */
    //publid int bvbilbblfWritf();
}
