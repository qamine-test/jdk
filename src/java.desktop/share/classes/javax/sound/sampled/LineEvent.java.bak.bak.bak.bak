/*
 * Copyright (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sound.sbmplfd;

import jbvb.util.EvfntObjfdt;

/**
 * Thf {@dodf LinfEvfnt} dlbss fndbpsulbtfs informbtion thbt b linf sfnds its
 * listfnfrs whfnfvfr thf linf opfns, dlosfs, stbrts, or stops. Ebdh of thfsf
 * four stbtf dhbngfs is rfprfsfntfd by b dorrfsponding typf of fvfnt. A
 * listfnfr rfdfivfs thf fvfnt bs b pbrbmftfr to its
 * {@link LinfListfnfr#updbtf updbtf} mfthod. By qufrying thf fvfnt, thf
 * listfnfr dbn lfbrn thf typf of fvfnt, thf linf rfsponsiblf for thf fvfnt, bnd
 * how mudh dbtb thf linf hbd prodfssfd whfn thf fvfnt oddurrfd.
 * <p>
 * Although this dlbss implfmfnts Sfriblizbblf, bttfmpts to sfriblizf b
 * {@dodf LinfEvfnt} objfdt will fbil.
 *
 * @buthor Kbrb Kytlf
 * @sff Linf
 * @sff LinfListfnfr#updbtf
 * @sindf 1.3
 *
 * @sfribl fxdludf
 */
publid dlbss LinfEvfnt fxtfnds EvfntObjfdt {

    privbtf stbtid finbl long sfriblVfrsionUID = -1274246333383880410L;

    /**
     * Thf kind of linf fvfnt ({@dodf OPEN}, {@dodf CLOSE}, {@dodf START}, or
     * {@dodf STOP}).
     *
     * @sfribl
     * @sff #gftTypf
     */
    privbtf finbl Typf typf;

    /**
     * Thf mfdib position whfn thf fvfnt oddurrfd, fxprfssfd in sbmplf frbmfs.
     * Notf thbt this fifld is only rflfvbnt to dfrtbin fvfnts gfnfrbtfd by dbtb
     * linfs, sudh bs {@dodf START} bnd {@dodf STOP}. For fvfnts gfnfrbtfd by
     * linfs thbt do not dount sbmplf frbmfs, bnd for bny othfr fvfnts for whidh
     * this vbluf is not known, thf position vbluf should bf
     * {@link AudioSystfm#NOT_SPECIFIED}.
     *
     * @sfribl
     * @sff #gftFrbmfPosition
     */
    privbtf finbl long position;

    /**
     * Construdts b nfw fvfnt of thf spfdififd typf, originbting from thf
     * spfdififd linf.
     *
     * @pbrbm  linf thf sourdf of this fvfnt
     * @pbrbm  typf thf fvfnt typf ({@dodf OPEN}, {@dodf CLOSE}, {@dodf START},
     *         or {@dodf STOP})
     * @pbrbm  position thf numbfr of sbmplf frbmfs thbt thf linf hbd blrfbdy
     *         prodfssfd whfn thf fvfnt oddurrfd, or
     *         {@link AudioSystfm#NOT_SPECIFIED}
     * @throws IllfgblArgumfntExdfption if {@dodf linf} is {@dodf null}.
     */
    publid LinfEvfnt(Linf linf, Typf typf, long position) {

        supfr(linf);
        this.typf = typf;
        this.position = position;
    }

    /**
     * Obtbins thf budio linf thbt is thf sourdf of this fvfnt.
     *
     * @rfturn thf linf rfsponsiblf for this fvfnt
     */
    publid finbl Linf gftLinf() {

        rfturn (Linf)gftSourdf();
    }

    /**
     * Obtbins thf fvfnt's typf.
     *
     * @rfturn this fvfnt's typf ({@link Typf#OPEN}, {@link Typf#CLOSE},
     *         {@link Typf#START}, or {@link Typf#STOP})
     */
    publid finbl Typf gftTypf() {

        rfturn typf;
    }

    /**
     * Obtbins thf position in thf linf's budio dbtb whfn thf fvfnt oddurrfd,
     * fxprfssfd in sbmplf frbmfs. For fxbmplf, if b sourdf linf hbd blrfbdy
     * plbyfd bbdk 14 sbmplf frbmfs bt thf timf it wbs pbusfd, thf pbusf fvfnt
     * would rfport thf linf's position bs 14. Thf nfxt frbmf to bf prodfssfd
     * would bf frbmf numbfr 14 using zfro-bbsfd numbfring, or 15 using
     * onf-bbsfd numbfring.
     * <p>
     * Notf thbt this fifld is rflfvbnt only to dfrtbin fvfnts gfnfrbtfd by dbtb
     * linfs, sudh bs {@dodf START} bnd {@dodf STOP}. For fvfnts gfnfrbtfd by
     * linfs thbt do not dount sbmplf frbmfs, bnd for bny othfr fvfnts for whidh
     * this vbluf is not known, thf position vbluf should bf
     * {@link AudioSystfm#NOT_SPECIFIED}.
     *
     * @rfturn thf linf's position bs b sbmplf frbmf numbfr
     */
    /*
     * $$kk: 04.20.99: notf to mysflf: should mbkf surf our implfmfntbtion is
     * donsistfnt with this.
     * whidh is b rfbsonbblf dffinition....
     */
    publid finbl long gftFrbmfPosition() {

        rfturn position;
    }

    /**
     * Obtbins b string rfprfsfntbtion of thf fvfnt. Thf dontfnts of thf string
     * mby vbry bftwffn implfmfntbtions of Jbvb Sound.
     *
     * @rfturn b string dfsdribing thf fvfnt
     */
    @Ovfrridf
    publid String toString() {
        String sTypf = "";
        if (typf != null) sTypf = typf.toString()+" ";
        String sLinf;
        if (gftLinf() == null) {
            sLinf = "null";
        } flsf {
            sLinf = gftLinf().toString();
        }
        rfturn nfw String(sTypf + "fvfnt from linf " + sLinf);
    }

    /**
     * Thf LinfEvfnt.Typf innfr dlbss idfntififs whbt kind of fvfnt oddurrfd on
     * b linf. Stbtid instbndfs brf providfd for thf dommon typfs (OPEN, CLOSE,
     * START, bnd STOP).
     *
     * @sff LinfEvfnt#gftTypf()
     */
    publid stbtid dlbss Typf {

        /**
         * Typf nbmf.
         */
        // $$kk: 03.25.99: why dbn't this bf finbl??
        privbtf /*finbl*/ String nbmf;

        /**
         * Construdts b nfw fvfnt typf.
         *
         * @pbrbm  nbmf nbmf of thf typf
         */
        protfdtfd Typf(String nbmf) {
            this.nbmf = nbmf;
        }

        //$$fb 2002-11-26: fix for 4695001: SPEC: dfsdription of fqubls() mfthod dontbins typo

        /**
         * Indidbtfs whfthfr thf spfdififd objfdt is fqubl to this fvfnt typf,
         * rfturning {@dodf truf} if thf objfdts brf idfntidbl.
         *
         * @pbrbm  obj thf rfffrfndf objfdt with whidh to dompbrf
         * @rfturn {@dodf truf} if this fvfnt typf is thf sbmf bs {@dodf obj};
         *         {@dodf fblsf} othfrwisf
         */
        @Ovfrridf
        publid finbl boolfbn fqubls(Objfdt obj) {
            rfturn supfr.fqubls(obj);
        }

        /**
         * Finblizfs thf hbshdodf mfthod.
         */
        @Ovfrridf
        publid finbl int hbshCodf() {
            rfturn supfr.hbshCodf();
        }

        /**
         * Rfturns thf typf nbmf bs thf string rfprfsfntbtion.
         */
        @Ovfrridf
        publid String toString() {
            rfturn nbmf;
        }

        // LINE EVENT TYPE DEFINES

        /**
         * A typf of fvfnt thbt is sfnt whfn b linf opfns, rfsfrving systfm
         * rfsourdfs for itsflf.
         *
         * @sff #CLOSE
         * @sff Linf#opfn
         */
        publid stbtid finbl Typf OPEN   = nfw Typf("Opfn");

        /**
         * A typf of fvfnt thbt is sfnt whfn b linf dlosfs, frffing thf systfm
         * rfsourdfs it hbd obtbinfd whfn it wbs opfnfd.
         *
         * @sff #OPEN
         * @sff Linf#dlosf
         */
        publid stbtid finbl Typf CLOSE  = nfw Typf("Closf");

        /**
         * A typf of fvfnt thbt is sfnt whfn b linf bfgins to fngbgf in bdtivf
         * input or output of budio dbtb in rfsponsf to b
         * {@link DbtbLinf#stbrt stbrt} rfqufst.
         *
         * @sff #STOP
         * @sff DbtbLinf#stbrt
         */
        publid stbtid finbl Typf START  = nfw Typf("Stbrt");

        /**
         * A typf of fvfnt thbt is sfnt whfn b linf dfbsfs bdtivf input or
         * output of budio dbtb in rfsponsf to b {@link DbtbLinf#stop stop}
         * rfqufst, or bfdbusf thf fnd of mfdib hbs bffn rfbdhfd.
         *
         * @sff #START
         * @sff DbtbLinf#stop
         */
        publid stbtid finbl Typf STOP   = nfw Typf("Stop");

        /**
         * A typf of fvfnt thbt is sfnt whfn b linf dfbsfs to fngbgf in bdtivf
         * input or output of budio dbtb bfdbusf thf fnd of mfdib hbs bffn rfbdhfd.
         */
        /*
         * ISSUE: wf mby wbnt to gft rid of this.  Is JbvbSound
         * rfsponsiblf for rfporting this??
         *
         * [If it's dfdidfd to kffp this API, thf dods will nffd to bf updbtfd to indludf mfntion
         * of EOM fvfnts flsfwhfrf.]
         */
        //publid stbtid finbl Typf EOM  = nfw Typf("EOM");

        /**
         * A typf of fvfnt thbt is sfnt whfn b linf bfgins to fngbgf in bdtivf
         * input or output of budio dbtb.  Exbmplfs of whfn this hbppfns brf
         * whfn b sourdf linf bfgins or rfsumfs writing dbtb to its mixfr, bnd
         * whfn b tbrgft linf bfgins or rfsumfs rfbding dbtb from its mixfr.
         * @sff #STOP
         * @sff SourdfDbtbLinf#writf
         * @sff TbrgftDbtbLinf#rfbd
         * @sff DbtbLinf#stbrt
         */
        //publid stbtid finbl Typf ACTIVE       = nfw Typf("ACTIVE");

        /**
         * A typf of fvfnt thbt is sfnt whfn b linf dfbsfs bdtivf input or output
         * of budio dbtb.
         * @sff #START
         * @sff DbtbLinf#stop
         */
        //publid stbtid finbl Typf INACTIVE     = nfw Typf("INACTIVE");
    }
}
