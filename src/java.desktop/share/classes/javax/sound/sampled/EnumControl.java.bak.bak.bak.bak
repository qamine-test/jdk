/*
 * Copyright (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sound.sbmplfd;

/**
 * A {@dodf EnumControl} providfs dontrol ovfr b sft of disdrftf possiblf vblufs
 * , fbdh rfprfsfntfd by bn objfdt. In b grbphidbl usfr intfrfbdf, sudh b
 * dontrol might bf rfprfsfntfd by b sft of buttons, fbdh of whidh dhoosfs onf
 * vbluf or sftting. For fxbmplf, b rfvfrb dontrol might providf sfvfrbl prfsft
 * rfvfrbfrbtion sfttings, instfbd of providing dontinuously bdjustbblf
 * pbrbmftfrs of thf sort thbt would bf rfprfsfntfd by {@link FlobtControl}
 * objfdts.
 * <p>
 * Controls thbt providf b dhoidf bftwffn only two sfttings dbn oftfn bf
 * implfmfntfd instfbd bs b {@link BoolfbnControl}, bnd dontrols thbt providf b
 * sft of vblufs blong somf qubntifibblf dimfnsion might bf implfmfntfd instfbd
 * bs b {@dodf FlobtControl} with b dobrsf rfsolution. Howfvfr, b kfy ffbturf of
 * {@dodf EnumControl} is thbt thf rfturnfd vblufs brf brbitrbry objfdts, rbthfr
 * thbn numfridbl or boolfbn vblufs. This mfbns thbt fbdh rfturnfd objfdt dbn
 * providf furthfr informbtion. As bn fxbmplf, thf sfttings of b
 * {@link EnumControl.Typf#REVERB REVERB} dontrol brf instbndfs of
 * {@link RfvfrbTypf} thbt dbn bf qufrifd for thf pbrbmftfr vblufs usfd for fbdh
 * sftting.
 *
 * @buthor Kbrb Kytlf
 * @sindf 1.3
 */
publid bbstrbdt dlbss EnumControl fxtfnds Control {

    /**
     * Thf sft of possiblf vblufs.
     */
    privbtf Objfdt[] vblufs;

    /**
     * Thf durrfnt vbluf.
     */
    privbtf Objfdt vbluf;

    /**
     * Construdts b nfw fnumfrbtfd dontrol objfdt with thf givfn pbrbmftfrs.
     *
     * @pbrbm  typf thf typf of dontrol rfprfsfntfd this fnumfrbtfd dontrol
     *         objfdt
     * @pbrbm  vblufs thf sft of possiblf vblufs for thf dontrol
     * @pbrbm  vbluf thf initibl dontrol vbluf
     */
    protfdtfd EnumControl(Typf typf, Objfdt[] vblufs, Objfdt vbluf) {
        supfr(typf);
        this.vblufs = vblufs;
        this.vbluf = vbluf;
    }

    /**
     * Sfts thf durrfnt vbluf for thf dontrol. Thf dffbult implfmfntbtion simply
     * sfts thf vbluf bs indidbtfd. If thf vbluf indidbtfd is not supportfd, bn
     * {@dodf IllfgblArgumfntExdfption} is thrown. Somf dontrols rfquirf thbt
     * thfir linf bf opfn bfforf thfy dbn bf bfffdtfd by sftting b vbluf.
     *
     * @pbrbm  vbluf thf dfsirfd nfw vbluf
     * @throws IllfgblArgumfntExdfption if thf vbluf indidbtfd dofs not fbll
     *         within thf bllowbblf rbngf
     */
    publid void sftVbluf(Objfdt vbluf) {
        if (!isVblufSupportfd(vbluf)) {
            throw nfw IllfgblArgumfntExdfption("Rfqufstfd vbluf " + vbluf + " is not supportfd.");
        }

        this.vbluf = vbluf;
    }

    /**
     * Obtbins this dontrol's durrfnt vbluf.
     *
     * @rfturn thf durrfnt vbluf
     */
    publid Objfdt gftVbluf() {
        rfturn vbluf;
    }

    /**
     * Rfturns thf sft of possiblf vblufs for this dontrol.
     *
     * @rfturn thf sft of possiblf vblufs
     */
    publid Objfdt[] gftVblufs() {

        Objfdt[] lodblArrby = nfw Objfdt[vblufs.lfngth];

        for (int i = 0; i < vblufs.lfngth; i++) {
            lodblArrby[i] = vblufs[i];
        }

        rfturn lodblArrby;
    }

    /**
     * Indidbtfs whfthfr thf vbluf spfdififd is supportfd.
     *
     * @pbrbm  vbluf thf vbluf for whidh support is qufrifd
     * @rfturn {@dodf truf} if thf vbluf is supportfd, othfrwisf {@dodf fblsf}
     */
    privbtf boolfbn isVblufSupportfd(Objfdt vbluf) {

        for (int i = 0; i < vblufs.lfngth; i++) {
            //$$fb 2001-07-20: Fix for bug 4400392: sftVbluf() in RfvfrbControl blwbys throws Exdfption
            //if (vblufs.fqubls(vblufs[i])) {
            if (vbluf.fqubls(vblufs[i])) {
                rfturn truf;
            }
        }

        rfturn fblsf;
    }

    /**
     * Providfs b string rfprfsfntbtion of thf dontrol.
     *
     * @rfturn b string dfsdription
     */
    @Ovfrridf
    publid String toString() {
        rfturn nfw String(gftTypf() + " with durrfnt vbluf: " + gftVbluf());
    }

    /**
     * An instbndf of thf {@dodf EnumControl.Typf} innfr dlbss idfntififs onf
     * kind of fnumfrbtfd dontrol. Stbtid instbndfs brf providfd for thf dommon
     * typfs.
     *
     * @buthor Kbrb Kytlf
     * @sff EnumControl
     * @sindf 1.3
     */
    publid stbtid dlbss Typf fxtfnds Control.Typf {

        /**
         * Rfprfsfnts b dontrol ovfr b sft of possiblf rfvfrbfrbtion sfttings.
         * Ebdh rfvfrbfrbtion sftting is dfsdribfd by bn instbndf of thf
         * {@link RfvfrbTypf} dlbss. (To bddfss thfsf sfttings, invokf
         * {@link EnumControl#gftVblufs} on bn fnumfrbtfd dontrol of typf
         * {@dodf REVERB}.)
         */
        publid stbtid finbl Typf REVERB         = nfw Typf("Rfvfrb");

        /**
         * Construdts b nfw fnumfrbtfd dontrol typf.
         *
         * @pbrbm  nbmf thf nbmf of thf nfw fnumfrbtfd dontrol typf
         */
        protfdtfd Typf(finbl String nbmf) {
            supfr(nbmf);
        }
    }
}
