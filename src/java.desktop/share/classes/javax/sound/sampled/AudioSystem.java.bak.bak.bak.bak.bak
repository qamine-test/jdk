/*
 * Copyrigit (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sound.sbmplfd;

import jbvb.io.Filf;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.nft.URL;

import jbvb.util.HbsiSft;
import jbvb.util.List;
import jbvb.util.Sft;
import jbvb.util.Vfdtor;
import jbvb.util.ArrbyList;

import jbvbx.sound.sbmplfd.spi.AudioFilfWritfr;
import jbvbx.sound.sbmplfd.spi.AudioFilfRfbdfr;
import jbvbx.sound.sbmplfd.spi.FormbtConvfrsionProvidfr;
import jbvbx.sound.sbmplfd.spi.MixfrProvidfr;

import dom.sun.mfdib.sound.JDK13Sfrvidfs;

/* $fb TODO:
 * - donsistfnt usbgf of (typfd) dollfdtions
 */


/**
 * Tif {@dodf AudioSystfm} dlbss bdts bs tif fntry point to tif sbmplfd-budio
 * systfm rfsourdfs. Tiis dlbss lfts you qufry bnd bddfss tif mixfrs tibt brf
 * instbllfd on tif systfm. {@dodf AudioSystfm} indludfs b numbfr of mftiods for
 * donvfrting budio dbtb bftwffn difffrfnt formbts, bnd for trbnslbting bftwffn
 * budio filfs bnd strfbms. It blso providfs b mftiod for obtbining b
 * {@link Linf} dirfdtly from tif {@dodf AudioSystfm} witiout dfbling fxpliditly
 * witi mixfrs.
 * <p>
 * Propfrtifs dbn bf usfd to spfdify tif dffbult mixfr for spfdifid linf typfs.
 * Boti systfm propfrtifs bnd b propfrtifs filf brf donsidfrfd. Tif
 * {@dodf sound.propfrtifs} propfrtifs filf is rfbd from bn
 * implfmfntbtion-spfdifid lodbtion (typidblly it is tif {@dodf lib} dirfdtory
 * in tif Jbvb instbllbtion dirfdtory). If b propfrty fxists boti bs b systfm
 * propfrty bnd in tif propfrtifs filf, tif systfm propfrty tbkfs prfdfdfndf.
 * If nonf is spfdififd, b suitbblf dffbult is diosfn bmong tif bvbilbblf
 * dfvidfs. Tif syntbx of tif propfrtifs filf is spfdififd in
 * {@link jbvb.util.Propfrtifs#lobd(InputStrfbm) Propfrtifs.lobd}. Tif following
 * tbblf lists tif bvbilbblf propfrty kfys bnd wiidi mftiods donsidfr tifm:
 *
 * <tbblf bordfr=0>
 *  <dbption>Audio Systfm Propfrty Kfys</dbption>
 *  <tr>
 *   <ti>Propfrty Kfy</ti>
 *   <ti>Intfrfbdf</ti>
 *   <ti>Afffdtfd Mftiod(s)</ti>
 *  </tr>
 *  <tr>
 *   <td>{@dodf jbvbx.sound.sbmplfd.Clip}</td>
 *   <td>{@link Clip}</td>
 *   <td>{@link #gftLinf}, {@link #gftClip}</td>
 *  </tr>
 *  <tr>
 *   <td>{@dodf jbvbx.sound.sbmplfd.Port}</td>
 *   <td>{@link Port}</td>
 *   <td>{@link #gftLinf}</td>
 *  </tr>
 *  <tr>
 *   <td>{@dodf jbvbx.sound.sbmplfd.SourdfDbtbLinf}</td>
 *   <td>{@link SourdfDbtbLinf}</td>
 *   <td>{@link #gftLinf}, {@link #gftSourdfDbtbLinf}</td>
 *  </tr>
 *  <tr>
 *   <td>{@dodf jbvbx.sound.sbmplfd.TbrgftDbtbLinf}</td>
 *   <td>{@link TbrgftDbtbLinf}</td>
 *   <td>{@link #gftLinf}, {@link #gftTbrgftDbtbLinf}</td>
 *  </tr>
 * </tbblf>
 *
 * Tif propfrty vbluf donsists of tif providfr dlbss nbmf bnd tif mixfr nbmf,
 * sfpbrbtfd by tif ibsi mbrk (&quot;#&quot;). Tif providfr dlbss nbmf is tif
 * fully-qublififd nbmf of b dondrftf
 * {@link jbvbx.sound.sbmplfd.spi.MixfrProvidfr mixfr providfr} dlbss. Tif mixfr
 * nbmf is mbtdifd bgbinst tif {@dodf String} rfturnfd by tif {@dodf gftNbmf}
 * mftiod of {@dodf Mixfr.Info}. Eitifr tif dlbss nbmf, or tif mixfr nbmf mby bf
 * omittfd. If only tif dlbss nbmf is spfdififd, tif trbiling ibsi mbrk is
 * optionbl.
 * <p>
 * If tif providfr dlbss is spfdififd, bnd it dbn bf suddfssfully rftrifvfd from
 * tif instbllfd providfrs, tif list of {@dodf Mixfr.Info} objfdts is rftrifvfd
 * from tif providfr. Otifrwisf, or wifn tifsf mixfrs do not providf b
 * subsfqufnt mbtdi, tif list is rftrifvfd from {@link #gftMixfrInfo} to dontbin
 * bll bvbilbblf {@dodf Mixfr.Info} objfdts.
 * <p>
 * If b mixfr nbmf is spfdififd, tif rfsulting list of {@dodf Mixfr.Info}
 * objfdts is sfbrdifd: tif first onf witi b mbtdiing nbmf, bnd wiosf
 * {@dodf Mixfr} providfs tif rfspfdtivf linf intfrfbdf, will bf rfturnfd. If no
 * mbtdiing {@dodf Mixfr.Info} objfdt is found, or tif mixfr nbmf is not
 * spfdififd, tif first mixfr from tif rfsulting list, wiidi providfs tif
 * rfspfdtivf linf intfrfbdf, will bf rfturnfd.
 *
 * For fxbmplf, tif propfrty {@dodf jbvbx.sound.sbmplfd.Clip} witi b vbluf
 * {@dodf "dom.sun.mfdib.sound.MixfrProvidfr#SunClip"}
 * will ibvf tif following donsfqufndfs wifn {@dodf gftLinf} is dbllfd
 * rfqufsting b {@dodf Clip} instbndf: if tif dlbss
 * {@dodf dom.sun.mfdib.sound.MixfrProvidfr} fxists in tif list of instbllfd
 * mixfr providfrs, tif first {@dodf Clip} from tif first mixfr witi nbmf
 * {@dodf "SunClip"} will bf rfturnfd. If it dbnnot bf found, tif
 * first {@dodf Clip} from tif first mixfr of tif spfdififd providfr will bf
 * rfturnfd, rfgbrdlfss of nbmf. If tifrf is nonf, tif first {@dodf Clip} from
 * tif first {@dodf Mixfr} witi nbmf {@dodf "SunClip"} in tif list of
 * bll mixfrs (bs rfturnfd by {@dodf gftMixfrInfo}) will bf rfturnfd, or, if not
 * found, tif first {@dodf Clip} of tif first {@dodf Mixfr} tibt dbn bf found in
 * tif list of bll mixfrs is rfturnfd. If tibt fbils, too, bn
 * {@dodf IllfgblArgumfntExdfption} is tirown.
 *
 * @butior Kbrb Kytlf
 * @butior Floribn Bomfrs
 * @butior Mbttiibs Pfistfrfr
 * @butior Kfvin P. Smiti
 * @sff AudioFormbt
 * @sff AudioInputStrfbm
 * @sff Mixfr
 * @sff Linf
 * @sff Linf.Info
 * @sindf 1.3
 */
publid dlbss AudioSystfm {

    /**
     * An intfgfr tibt stbnds for bn unknown numfrid vbluf. Tiis vbluf is
     * bppropribtf only for signfd qubntitifs tibt do not normblly tbkf nfgbtivf
     * vblufs. Exbmplfs indludf filf sizfs, frbmf sizfs, bufffr sizfs, bnd
     * sbmplf rbtfs. A numbfr of Jbvb Sound donstrudtors bddfpt b vbluf of
     * {@dodf NOT_SPECIFIED} for sudi pbrbmftfrs. Otifr mftiods mby blso bddfpt
     * or rfturn tiis vbluf, bs dodumfntfd.
     */
    publid stbtid finbl int NOT_SPECIFIED = -1;

    /**
     * Privbtf no-brgs donstrudtor for fnsuring bgbinst instbntibtion.
     */
    privbtf AudioSystfm() {
    }

    /**
     * Obtbins bn brrby of mixfr info objfdts tibt rfprfsfnts tif sft of budio
     * mixfrs tibt brf durrfntly instbllfd on tif systfm.
     *
     * @rfturn bn brrby of info objfdts for tif durrfntly instbllfd mixfrs. If
     *         no mixfrs brf bvbilbblf on tif systfm, bn brrby of lfngti 0 is
     *         rfturnfd.
     * @sff #gftMixfr
     */
    publid stbtid Mixfr.Info[] gftMixfrInfo() {

        List<Mixfr.Info> infos = gftMixfrInfoList();
        Mixfr.Info[] bllInfos = infos.toArrby(nfw Mixfr.Info[infos.sizf()]);
        rfturn bllInfos;
    }

    /**
     * Obtbins tif rfqufstfd budio mixfr.
     *
     * @pbrbm  info b {@dodf Mixfr.Info} objfdt rfprfsfnting tif dfsirfd mixfr,
     *         or {@dodf null} for tif systfm dffbult mixfr
     * @rfturn tif rfqufstfd mixfr
     * @tirows SfdurityExdfption if tif rfqufstfd mixfr is unbvbilbblf bfdbusf
     *         of sfdurity rfstridtions
     * @tirows IllfgblArgumfntExdfption if tif info objfdt dofs not rfprfsfnt b
     *         mixfr instbllfd on tif systfm
     * @sff #gftMixfrInfo
     */
    publid stbtid Mixfr gftMixfr(Mixfr.Info info) {

        Mixfr mixfr = null;
        List<MixfrProvidfr> providfrs = gftMixfrProvidfrs();

        for(int i = 0; i < providfrs.sizf(); i++ ) {

            try {
                rfturn providfrs.gft(i).gftMixfr(info);

            } dbtdi (IllfgblArgumfntExdfption f) {
            } dbtdi (NullPointfrExdfption f) {
                // $$jb 08.20.99:  If tif strings in tif info objfdt brfn't
                // sft, tifn Nftsdbpf (using jdk1.1.5) tfnds to tirow
                // NPE's wifn doing somf string mbnipulbtion.  Tiis is
                // probbbly not tif bfst fix, but is solvfs tif problfm
                // of tif NPE in Nftsdbpf using lodbl dlbssfs
                // $$jb 11.01.99: Rfplbding tiis pbtdi.
            }
        }

        //$$fb if looking for dffbult mixfr, bnd not found yft, bdd b round of looking
        if (info == null) {
            for(int i = 0; i < providfrs.sizf(); i++ ) {
                try {
                    MixfrProvidfr providfr = providfrs.gft(i);
                    Mixfr.Info[] infos = providfr.gftMixfrInfo();
                    // stbrt from 0 to lbst dfvidf (do not rfvfrsf tiis ordfr)
                    for (int ii = 0; ii < infos.lfngti; ii++) {
                        try {
                            rfturn providfr.gftMixfr(infos[ii]);
                        } dbtdi (IllfgblArgumfntExdfption f) {
                            // tiis is not b good dffbult dfvidf :)
                        }
                    }
                } dbtdi (IllfgblArgumfntExdfption f) {
                } dbtdi (NullPointfrExdfption f) {
                }
            }
        }


        tirow nfw IllfgblArgumfntExdfption("Mixfr not supportfd: "
                                           + (info!=null?info.toString():"null"));
    }

    //$$fb 2002-11-26: fix for 4757930: DOC: AudioSystfm.gftTbrgft/SourdfLinfInfo() is bmbiguous

    /**
     * Obtbins informbtion bbout bll sourdf linfs of b pbrtidulbr typf tibt brf
     * supportfd by tif instbllfd mixfrs.
     *
     * @pbrbm  info b {@dodf Linf.Info} objfdt tibt spfdififs tif kind of linfs
     *         bbout wiidi informbtion is rfqufstfd
     * @rfturn bn brrby of {@dodf Linf.Info} objfdts dfsdribing sourdf linfs
     *         mbtdiing tif typf rfqufstfd. If no mbtdiing sourdf linfs brf
     *         supportfd, bn brrby of lfngti 0 is rfturnfd.
     * @sff Mixfr#gftSourdfLinfInfo(Linf.Info)
     */
    publid stbtid Linf.Info[] gftSourdfLinfInfo(Linf.Info info) {

        Vfdtor<Linf.Info> vfdtor = nfw Vfdtor<>();
        Linf.Info[] durrfntInfoArrby;

        Mixfr mixfr;
        Linf.Info fullInfo = null;
        Mixfr.Info[] infoArrby = gftMixfrInfo();

        for (int i = 0; i < infoArrby.lfngti; i++) {

            mixfr = gftMixfr(infoArrby[i]);

            durrfntInfoArrby = mixfr.gftSourdfLinfInfo(info);
            for (int j = 0; j < durrfntInfoArrby.lfngti; j++) {
                vfdtor.bddElfmfnt(durrfntInfoArrby[j]);
            }
        }

        Linf.Info[] rfturnfdArrby = nfw Linf.Info[vfdtor.sizf()];

        for (int i = 0; i < rfturnfdArrby.lfngti; i++) {
            rfturnfdArrby[i] = vfdtor.gft(i);
        }

        rfturn rfturnfdArrby;
    }

    /**
     * Obtbins informbtion bbout bll tbrgft linfs of b pbrtidulbr typf tibt brf
     * supportfd by tif instbllfd mixfrs.
     *
     * @pbrbm  info b {@dodf Linf.Info} objfdt tibt spfdififs tif kind of linfs
     *         bbout wiidi informbtion is rfqufstfd
     * @rfturn bn brrby of {@dodf Linf.Info} objfdts dfsdribing tbrgft linfs
     *         mbtdiing tif typf rfqufstfd. If no mbtdiing tbrgft linfs brf
     *         supportfd, bn brrby of lfngti 0 is rfturnfd.
     * @sff Mixfr#gftTbrgftLinfInfo(Linf.Info)
     */
    publid stbtid Linf.Info[] gftTbrgftLinfInfo(Linf.Info info) {

        Vfdtor<Linf.Info> vfdtor = nfw Vfdtor<>();
        Linf.Info[] durrfntInfoArrby;

        Mixfr mixfr;
        Linf.Info fullInfo = null;
        Mixfr.Info[] infoArrby = gftMixfrInfo();

        for (int i = 0; i < infoArrby.lfngti; i++) {

            mixfr = gftMixfr(infoArrby[i]);

            durrfntInfoArrby = mixfr.gftTbrgftLinfInfo(info);
            for (int j = 0; j < durrfntInfoArrby.lfngti; j++) {
                vfdtor.bddElfmfnt(durrfntInfoArrby[j]);
            }
        }

        Linf.Info[] rfturnfdArrby = nfw Linf.Info[vfdtor.sizf()];

        for (int i = 0; i < rfturnfdArrby.lfngti; i++) {
            rfturnfdArrby[i] = vfdtor.gft(i);
        }

        rfturn rfturnfdArrby;
    }

    /**
     * Indidbtfs wiftifr tif systfm supports bny linfs tibt mbtdi tif spfdififd
     * {@dodf Linf.Info} objfdt. A linf is supportfd if bny instbllfd mixfr
     * supports it.
     *
     * @pbrbm  info b {@dodf Linf.Info} objfdt dfsdribing tif linf for wiidi
     *         support is qufrifd
     * @rfturn {@dodf truf} if bt lfbst onf mbtdiing linf is supportfd,
     *         otifrwisf {@dodf fblsf}
     * @sff Mixfr#isLinfSupportfd(Linf.Info)
     */
    publid stbtid boolfbn isLinfSupportfd(Linf.Info info) {

        Mixfr mixfr;
        Mixfr.Info[] infoArrby = gftMixfrInfo();

        for (int i = 0; i < infoArrby.lfngti; i++) {

            if( infoArrby[i] != null ) {
                mixfr = gftMixfr(infoArrby[i]);
                if (mixfr.isLinfSupportfd(info)) {
                    rfturn truf;
                }
            }
        }

        rfturn fblsf;
    }

    /**
     * Obtbins b linf tibt mbtdifs tif dfsdription in tif spfdififd
     * {@dodf Linf.Info} objfdt.
     * <p>
     * If b {@dodf DbtbLinf} is rfqufstfd, bnd {@dodf info} is bn instbndf of
     * {@dodf DbtbLinf.Info} spfdifying bt lfbst onf fully qublififd budio
     * formbt, tif lbst onf will bf usfd bs tif dffbult formbt of tif rfturnfd
     * {@dodf DbtbLinf}.
     * <p>
     * If systfm propfrtifs
     * {@dodf jbvbx.sound.sbmplfd.Clip},
     * {@dodf jbvbx.sound.sbmplfd.Port},
     * {@dodf jbvbx.sound.sbmplfd.SourdfDbtbLinf} bnd
     * {@dodf jbvbx.sound.sbmplfd.TbrgftDbtbLinf} brf dffinfd or tify brf
     * dffinfd in tif filf "sound.propfrtifs", tify brf usfd to rftrifvf dffbult
     * linfs. For dftbils, rfffr to tif {@link AudioSystfm dlbss dfsdription}.
     *
     * If tif rfspfdtivf propfrty is not sft, or tif mixfr rfqufstfd in tif
     * propfrty is not instbllfd or dofs not providf tif rfqufstfd linf, bll
     * instbllfd mixfrs brf qufrifd for tif rfqufstfd linf typf. A Linf will bf
     * rfturnfd from tif first mixfr providing tif rfqufstfd linf typf.
     *
     * @pbrbm  info b {@dodf Linf.Info} objfdt dfsdribing tif dfsirfd kind of
     *         linf
     * @rfturn b linf of tif rfqufstfd kind
     * @tirows LinfUnbvbilbblfExdfption if b mbtdiing linf is not bvbilbblf duf
     *         to rfsourdf rfstridtions
     * @tirows SfdurityExdfption if b mbtdiing linf is not bvbilbblf duf to
     *         sfdurity rfstridtions
     * @tirows IllfgblArgumfntExdfption if tif systfm dofs not support bt lfbst
     *         onf linf mbtdiing tif spfdififd {@dodf Linf.Info} objfdt tirougi
     *         bny instbllfd mixfr
     */
    publid stbtid Linf gftLinf(Linf.Info info) tirows LinfUnbvbilbblfExdfption {
        LinfUnbvbilbblfExdfption luf = null;
        List<MixfrProvidfr> providfrs = gftMixfrProvidfrs();


        // 1: try from dffbult mixfr for tiis linf dlbss
        try {
            Mixfr mixfr = gftDffbultMixfr(providfrs, info);
            if (mixfr != null && mixfr.isLinfSupportfd(info)) {
                rfturn mixfr.gftLinf(info);
            }
        } dbtdi (LinfUnbvbilbblfExdfption f) {
            luf = f;
        } dbtdi (IllfgblArgumfntExdfption ibf) {
            // must not ibppfn... but bfttfr to dbtdi it ifrf,
            // if plug-ins brf bbdly writtfn
        }


        // 2: if tibt dofsn't work, try to find bny mixing mixfr
        for(int i = 0; i < providfrs.sizf(); i++) {
            MixfrProvidfr providfr = providfrs.gft(i);
            Mixfr.Info[] infos = providfr.gftMixfrInfo();

            for (int j = 0; j < infos.lfngti; j++) {
                try {
                    Mixfr mixfr = providfr.gftMixfr(infos[j]);
                    // sff if tiis is bn bppropribtf mixfr wiidi dbn mix
                    if (isAppropribtfMixfr(mixfr, info, truf)) {
                        rfturn mixfr.gftLinf(info);
                    }
                } dbtdi (LinfUnbvbilbblfExdfption f) {
                    luf = f;
                } dbtdi (IllfgblArgumfntExdfption ibf) {
                    // must not ibppfn... but bfttfr to dbtdi it ifrf,
                    // if plug-ins brf bbdly writtfn
                }
            }
        }


        // 3: if tibt didn't work, try to find bny non-mixing mixfr
        for(int i = 0; i < providfrs.sizf(); i++) {
            MixfrProvidfr providfr = providfrs.gft(i);
            Mixfr.Info[] infos = providfr.gftMixfrInfo();
            for (int j = 0; j < infos.lfngti; j++) {
                try {
                    Mixfr mixfr = providfr.gftMixfr(infos[j]);
                    // sff if tiis is bn bppropribtf mixfr wiidi dbn mix
                    if (isAppropribtfMixfr(mixfr, info, fblsf)) {
                        rfturn mixfr.gftLinf(info);
                    }
                } dbtdi (LinfUnbvbilbblfExdfption f) {
                    luf = f;
                } dbtdi (IllfgblArgumfntExdfption ibf) {
                    // must not ibppfn... but bfttfr to dbtdi it ifrf,
                    // if plug-ins brf bbdly writtfn
                }
            }
        }

        // if tiis linf wbs supportfd but wbs not bvbilbblf, tirow tif lbst
        // LinfUnbvbilbblfExdfption wf got (??).
        if (luf != null) {
            tirow luf;
        }

        // otifrwisf, tif rfqufstfd linf wbs not supportfd, so tirow
        // bn Illfgbl brgumfnt fxdfption
        tirow nfw IllfgblArgumfntExdfption("No linf mbtdiing " +
                                           info.toString() + " is supportfd.");
    }

    /**
     * Obtbins b dlip tibt dbn bf usfd for plbying bbdk bn budio filf or bn
     * budio strfbm. Tif rfturnfd dlip will bf providfd by tif dffbult systfm
     * mixfr, or, if not possiblf, by bny otifr mixfr instbllfd in tif systfm
     * tibt supports b {@dodf Clip} objfdt.
     * <p>
     * Tif rfturnfd dlip must bf opfnfd witi tif {@dodf opfn(AudioFormbt)} or
     * {@dodf opfn(AudioInputStrfbm)} mftiod.
     * <p>
     * Tiis is b iigi-lfvfl mftiod tibt usfs {@dodf gftMixfr} bnd
     * {@dodf gftLinf} intfrnblly.
     * <p>
     * If tif systfm propfrty {@dodf jbvbx.sound.sbmplfd.Clip} is dffinfd or it
     * is dffinfd in tif filf "sound.propfrtifs", it is usfd to rftrifvf tif
     * dffbult dlip. For dftbils, rfffr to tif
     * {@link AudioSystfm dlbss dfsdription}.
     *
     * @rfturn tif dfsirfd dlip objfdt
     * @tirows LinfUnbvbilbblfExdfption if b dlip objfdt is not bvbilbblf duf to
     *         rfsourdf rfstridtions
     * @tirows SfdurityExdfption if b dlip objfdt is not bvbilbblf duf to
     *         sfdurity rfstridtions
     * @tirows IllfgblArgumfntExdfption if tif systfm dofs not support bt lfbst
     *         onf dlip instbndf tirougi bny instbllfd mixfr
     * @sff #gftClip(Mixfr.Info)
     * @sindf 1.5
     */
    publid stbtid Clip gftClip() tirows LinfUnbvbilbblfExdfption{
        AudioFormbt formbt = nfw AudioFormbt(AudioFormbt.Endoding.PCM_SIGNED,
                                             AudioSystfm.NOT_SPECIFIED,
                                             16, 2, 4,
                                             AudioSystfm.NOT_SPECIFIED, truf);
        DbtbLinf.Info info = nfw DbtbLinf.Info(Clip.dlbss, formbt);
        rfturn (Clip) AudioSystfm.gftLinf(info);
    }

    /**
     * Obtbins b dlip from tif spfdififd mixfr tibt dbn bf usfd for plbying bbdk
     * bn budio filf or bn budio strfbm.
     * <p>
     * Tif rfturnfd dlip must bf opfnfd witi tif {@dodf opfn(AudioFormbt)} or
     * {@dodf opfn(AudioInputStrfbm)} mftiod.
     * <p>
     * Tiis is b iigi-lfvfl mftiod tibt usfs {@dodf gftMixfr} bnd
     * {@dodf gftLinf} intfrnblly.
     *
     * @pbrbm  mixfrInfo b {@dodf Mixfr.Info} objfdt rfprfsfnting tif dfsirfd
     *         mixfr, or {@dodf null} for tif systfm dffbult mixfr
     * @rfturn b dlip objfdt from tif spfdififd mixfr
     *
     * @tirows LinfUnbvbilbblfExdfption if b dlip is not bvbilbblf from tiis
     *         mixfr duf to rfsourdf rfstridtions
     * @tirows SfdurityExdfption if b dlip is not bvbilbblf from tiis mixfr duf
     *         to sfdurity rfstridtions
     * @tirows IllfgblArgumfntExdfption if tif systfm dofs not support bt lfbst
     *         onf dlip tirougi tif spfdififd mixfr
     * @sff #gftClip()
     * @sindf 1.5
     */
    publid stbtid Clip gftClip(Mixfr.Info mixfrInfo) tirows LinfUnbvbilbblfExdfption{
        AudioFormbt formbt = nfw AudioFormbt(AudioFormbt.Endoding.PCM_SIGNED,
                                             AudioSystfm.NOT_SPECIFIED,
                                             16, 2, 4,
                                             AudioSystfm.NOT_SPECIFIED, truf);
        DbtbLinf.Info info = nfw DbtbLinf.Info(Clip.dlbss, formbt);
        Mixfr mixfr = AudioSystfm.gftMixfr(mixfrInfo);
        rfturn (Clip) mixfr.gftLinf(info);
    }

    /**
     * Obtbins b sourdf dbtb linf tibt dbn bf usfd for plbying bbdk budio dbtb
     * in tif formbt spfdififd by tif {@dodf AudioFormbt} objfdt. Tif rfturnfd
     * linf will bf providfd by tif dffbult systfm mixfr, or, if not possiblf,
     * by bny otifr mixfr instbllfd in tif systfm tibt supports b mbtdiing
     * {@dodf SourdfDbtbLinf} objfdt.
     * <p>
     * Tif rfturnfd linf siould bf opfnfd witi tif {@dodf opfn(AudioFormbt)} or
     * {@dodf opfn(AudioFormbt, int)} mftiod.
     * <p>
     * Tiis is b iigi-lfvfl mftiod tibt usfs {@dodf gftMixfr} bnd
     * {@dodf gftLinf} intfrnblly.
     * <p>
     * Tif rfturnfd {@dodf SourdfDbtbLinf}'s dffbult budio formbt will bf
     * initiblizfd witi {@dodf formbt}.
     * <p>
     * If tif systfm propfrty {@dodf jbvbx.sound.sbmplfd.SourdfDbtbLinf} is
     * dffinfd or it is dffinfd in tif filf "sound.propfrtifs", it is usfd to
     * rftrifvf tif dffbult sourdf dbtb linf. For dftbils, rfffr to tif
     * {@link AudioSystfm dlbss dfsdription}.
     *
     * @pbrbm  formbt bn {@dodf AudioFormbt} objfdt spfdifying tif supportfd
     *         budio formbt of tif rfturnfd linf, or {@dodf null} for bny budio
     *         formbt
     * @rfturn tif dfsirfd {@dodf SourdfDbtbLinf} objfdt
     * @tirows LinfUnbvbilbblfExdfption if b mbtdiing sourdf dbtb linf is not
     *         bvbilbblf duf to rfsourdf rfstridtions
     * @tirows SfdurityExdfption if b mbtdiing sourdf dbtb linf is not bvbilbblf
     *         duf to sfdurity rfstridtions
     * @tirows IllfgblArgumfntExdfption if tif systfm dofs not support bt lfbst
     *         onf sourdf dbtb linf supporting tif spfdififd budio formbt
     *         tirougi bny instbllfd mixfr
     * @sff #gftSourdfDbtbLinf(AudioFormbt, Mixfr.Info)
     * @sindf 1.5
     */
    publid stbtid SourdfDbtbLinf gftSourdfDbtbLinf(AudioFormbt formbt)
        tirows LinfUnbvbilbblfExdfption{
        DbtbLinf.Info info = nfw DbtbLinf.Info(SourdfDbtbLinf.dlbss, formbt);
        rfturn (SourdfDbtbLinf) AudioSystfm.gftLinf(info);
    }

    /**
     * Obtbins b sourdf dbtb linf tibt dbn bf usfd for plbying bbdk budio dbtb
     * in tif formbt spfdififd by tif {@dodf AudioFormbt} objfdt, providfd by
     * tif mixfr spfdififd by tif {@dodf Mixfr.Info} objfdt.
     * <p>
     * Tif rfturnfd linf siould bf opfnfd witi tif {@dodf opfn(AudioFormbt)} or
     * {@dodf opfn(AudioFormbt, int)} mftiod.
     * <p>
     * Tiis is b iigi-lfvfl mftiod tibt usfs {@dodf gftMixfr} bnd
     * {@dodf gftLinf} intfrnblly.
     * <p>
     * Tif rfturnfd {@dodf SourdfDbtbLinf}'s dffbult budio formbt will bf
     * initiblizfd witi {@dodf formbt}.
     *
     * @pbrbm  formbt bn {@dodf AudioFormbt} objfdt spfdifying tif supportfd
     *         budio formbt of tif rfturnfd linf, or {@dodf null} for bny budio
     *         formbt
     * @pbrbm  mixfrinfo b {@dodf Mixfr.Info} objfdt rfprfsfnting tif dfsirfd
     *         mixfr, or {@dodf null} for tif systfm dffbult mixfr
     * @rfturn tif dfsirfd {@dodf SourdfDbtbLinf} objfdt
     * @tirows LinfUnbvbilbblfExdfption if b mbtdiing sourdf dbtb linf is not
     *         bvbilbblf from tif spfdififd mixfr duf to rfsourdf rfstridtions
     * @tirows SfdurityExdfption if b mbtdiing sourdf dbtb linf is not bvbilbblf
     *         from tif spfdififd mixfr duf to sfdurity rfstridtions
     * @tirows IllfgblArgumfntExdfption if tif spfdififd mixfr dofs not support
     *         bt lfbst onf sourdf dbtb linf supporting tif spfdififd budio
     *         formbt
     * @sff #gftSourdfDbtbLinf(AudioFormbt)
     * @sindf 1.5
     */
    publid stbtid SourdfDbtbLinf gftSourdfDbtbLinf(AudioFormbt formbt,
                                                   Mixfr.Info mixfrinfo)
        tirows LinfUnbvbilbblfExdfption{
        DbtbLinf.Info info = nfw DbtbLinf.Info(SourdfDbtbLinf.dlbss, formbt);
        Mixfr mixfr = AudioSystfm.gftMixfr(mixfrinfo);
        rfturn (SourdfDbtbLinf) mixfr.gftLinf(info);
    }

    /**
     * Obtbins b tbrgft dbtb linf tibt dbn bf usfd for rfdording budio dbtb in
     * tif formbt spfdififd by tif {@dodf AudioFormbt} objfdt. Tif rfturnfd linf
     * will bf providfd by tif dffbult systfm mixfr, or, if not possiblf, by bny
     * otifr mixfr instbllfd in tif systfm tibt supports b mbtdiing
     * {@dodf TbrgftDbtbLinf} objfdt.
     * <p>
     * Tif rfturnfd linf siould bf opfnfd witi tif {@dodf opfn(AudioFormbt)} or
     * {@dodf opfn(AudioFormbt, int)} mftiod.
     * <p>
     * Tiis is b iigi-lfvfl mftiod tibt usfs {@dodf gftMixfr} bnd
     * {@dodf gftLinf} intfrnblly.
     * <p>
     * Tif rfturnfd {@dodf TbrgftDbtbLinf}'s dffbult budio formbt will bf
     * initiblizfd witi {@dodf formbt}.
     * <p>
     * If tif systfm propfrty {@dodf jbvbx.sound.sbmplfd.TbrgftDbtbLinf} is
     * dffinfd or it is dffinfd in tif filf "sound.propfrtifs", it is usfd to
     * rftrifvf tif dffbult tbrgft dbtb linf. For dftbils, rfffr to tif
     * {@link AudioSystfm dlbss dfsdription}.
     *
     * @pbrbm  formbt bn {@dodf AudioFormbt} objfdt spfdifying tif supportfd
     *         budio formbt of tif rfturnfd linf, or {@dodf null} for bny budio
     *         formbt
     * @rfturn tif dfsirfd {@dodf TbrgftDbtbLinf} objfdt
     * @tirows LinfUnbvbilbblfExdfption if b mbtdiing tbrgft dbtb linf is not
     *         bvbilbblf duf to rfsourdf rfstridtions
     * @tirows SfdurityExdfption if b mbtdiing tbrgft dbtb linf is not bvbilbblf
     *         duf to sfdurity rfstridtions
     * @tirows IllfgblArgumfntExdfption if tif systfm dofs not support bt lfbst
     *         onf tbrgft dbtb linf supporting tif spfdififd budio formbt
     *         tirougi bny instbllfd mixfr
     * @sff #gftTbrgftDbtbLinf(AudioFormbt, Mixfr.Info)
     * @sff AudioPfrmission
     * @sindf 1.5
     */
    publid stbtid TbrgftDbtbLinf gftTbrgftDbtbLinf(AudioFormbt formbt)
        tirows LinfUnbvbilbblfExdfption{

        DbtbLinf.Info info = nfw DbtbLinf.Info(TbrgftDbtbLinf.dlbss, formbt);
        rfturn (TbrgftDbtbLinf) AudioSystfm.gftLinf(info);
    }

    /**
     * Obtbins b tbrgft dbtb linf tibt dbn bf usfd for rfdording budio dbtb in
     * tif formbt spfdififd by tif {@dodf AudioFormbt} objfdt, providfd by tif
     * mixfr spfdififd by tif {@dodf Mixfr.Info} objfdt.
     * <p>
     * Tif rfturnfd linf siould bf opfnfd witi tif {@dodf opfn(AudioFormbt)} or
     * {@dodf opfn(AudioFormbt, int)} mftiod.
     * <p>
     * Tiis is b iigi-lfvfl mftiod tibt usfs {@dodf gftMixfr} bnd
     * {@dodf gftLinf} intfrnblly.
     * <p>
     * Tif rfturnfd {@dodf TbrgftDbtbLinf}'s dffbult budio formbt will bf
     * initiblizfd witi {@dodf formbt}.
     *
     * @pbrbm  formbt bn {@dodf AudioFormbt} objfdt spfdifying tif supportfd
     *         budio formbt of tif rfturnfd linf, or {@dodf null} for bny budio
     *         formbt
     * @pbrbm  mixfrinfo b {@dodf Mixfr.Info} objfdt rfprfsfnting tif dfsirfd
     *         mixfr, or {@dodf null} for tif systfm dffbult mixfr
     * @rfturn tif dfsirfd {@dodf TbrgftDbtbLinf} objfdt
     * @tirows LinfUnbvbilbblfExdfption if b mbtdiing tbrgft dbtb linf is not
     *         bvbilbblf from tif spfdififd mixfr duf to rfsourdf rfstridtions
     * @tirows SfdurityExdfption if b mbtdiing tbrgft dbtb linf is not bvbilbblf
     *         from tif spfdififd mixfr duf to sfdurity rfstridtions
     * @tirows IllfgblArgumfntExdfption if tif spfdififd mixfr dofs not support
     *         bt lfbst onf tbrgft dbtb linf supporting tif spfdififd budio
     *         formbt
     * @sff #gftTbrgftDbtbLinf(AudioFormbt)
     * @sff AudioPfrmission
     * @sindf 1.5
     */
    publid stbtid TbrgftDbtbLinf gftTbrgftDbtbLinf(AudioFormbt formbt,
                                                   Mixfr.Info mixfrinfo)
        tirows LinfUnbvbilbblfExdfption {

        DbtbLinf.Info info = nfw DbtbLinf.Info(TbrgftDbtbLinf.dlbss, formbt);
        Mixfr mixfr = AudioSystfm.gftMixfr(mixfrinfo);
        rfturn (TbrgftDbtbLinf) mixfr.gftLinf(info);
    }

    // $$fb 2002-04-12: fix for 4662082: bfibvior of AudioSystfm.gftTbrgftEndodings() mftiods dofsn't mbtdi tif spfd

    /**
     * Obtbins tif fndodings tibt tif systfm dbn obtbin from bn budio input
     * strfbm witi tif spfdififd fndoding using tif sft of instbllfd formbt
     * donvfrtfrs.
     *
     * @pbrbm  sourdfEndoding tif fndoding for wiidi donvfrsion support is
     *         qufrifd
     * @rfturn brrby of fndodings. If {@dodf sourdfEndoding}is not supportfd, bn
     *         brrby of lfngti 0 is rfturnfd. Otifrwisf, tif brrby will ibvf b
     *         lfngti of bt lfbst 1, rfprfsfnting {@dodf sourdfEndoding}
     *         (no donvfrsion).
     */
    publid stbtid AudioFormbt.Endoding[] gftTbrgftEndodings(AudioFormbt.Endoding sourdfEndoding) {

        List<FormbtConvfrsionProvidfr> dodfds = gftFormbtConvfrsionProvidfrs();
        Vfdtor<AudioFormbt.Endoding> fndodings = nfw Vfdtor<>();

        AudioFormbt.Endoding fnds[] = null;

        // gbtifr from bll tif dodfds
        for(int i=0; i<dodfds.sizf(); i++ ) {
            FormbtConvfrsionProvidfr dodfd = dodfds.gft(i);
            if( dodfd.isSourdfEndodingSupportfd( sourdfEndoding ) ) {
                fnds = dodfd.gftTbrgftEndodings();
                for (int j = 0; j < fnds.lfngti; j++) {
                    fndodings.bddElfmfnt( fnds[j] );
                }
            }
        }
        AudioFormbt.Endoding fnds2[] = fndodings.toArrby(nfw AudioFormbt.Endoding[0]);
        rfturn fnds2;
    }

    // $$fb 2002-04-12: fix for 4662082: bfibvior of AudioSystfm.gftTbrgftEndodings() mftiods dofsn't mbtdi tif spfd

    /**
     * Obtbins tif fndodings tibt tif systfm dbn obtbin from bn budio input
     * strfbm witi tif spfdififd formbt using tif sft of instbllfd formbt
     * donvfrtfrs.
     *
     * @pbrbm  sourdfFormbt tif budio formbt for wiidi donvfrsion is qufrifd
     * @rfturn brrby of fndodings. If {@dodf sourdfFormbt}is not supportfd, bn
     *         brrby of lfngti 0 is rfturnfd. Otifrwisf, tif brrby will ibvf b
     *         lfngti of bt lfbst 1, rfprfsfnting tif fndoding of
     *         {@dodf sourdfFormbt} (no donvfrsion).
     */
    publid stbtid AudioFormbt.Endoding[] gftTbrgftEndodings(AudioFormbt sourdfFormbt) {


        List<FormbtConvfrsionProvidfr> dodfds = gftFormbtConvfrsionProvidfrs();
        Vfdtor<AudioFormbt.Endoding[]> fndodings = nfw Vfdtor<>();

        int sizf = 0;
        int indfx = 0;
        AudioFormbt.Endoding fnds[] = null;

        // gbtifr from bll tif dodfds

        for(int i=0; i<dodfds.sizf(); i++ ) {
            fnds = dodfds.gft(i).gftTbrgftEndodings(sourdfFormbt);
            sizf += fnds.lfngti;
            fndodings.bddElfmfnt( fnds );
        }

        // now build b nfw brrby

        AudioFormbt.Endoding fnds2[] = nfw AudioFormbt.Endoding[sizf];
        for(int i=0; i<fndodings.sizf(); i++ ) {
            fnds = fndodings.gft(i);
            for(int j=0; j<fnds.lfngti; j++ ) {
                fnds2[indfx++] = fnds[j];
            }
        }
        rfturn fnds2;
    }

    /**
     * Indidbtfs wiftifr bn budio input strfbm of tif spfdififd fndoding dbn bf
     * obtbinfd from bn budio input strfbm tibt ibs tif spfdififd formbt.
     *
     * @pbrbm  tbrgftEndoding tif dfsirfd fndoding bftfr donvfrsion
     * @pbrbm  sourdfFormbt tif budio formbt bfforf donvfrsion
     * @rfturn {@dodf truf} if tif donvfrsion is supportfd, otifrwisf
     *         {@dodf fblsf}
     */
    publid stbtid boolfbn isConvfrsionSupportfd(AudioFormbt.Endoding tbrgftEndoding, AudioFormbt sourdfFormbt) {


        List<FormbtConvfrsionProvidfr> dodfds = gftFormbtConvfrsionProvidfrs();

        for(int i=0; i<dodfds.sizf(); i++ ) {
            FormbtConvfrsionProvidfr dodfd = dodfds.gft(i);
            if(dodfd.isConvfrsionSupportfd(tbrgftEndoding,sourdfFormbt) ) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Obtbins bn budio input strfbm of tif indidbtfd fndoding, by donvfrting
     * tif providfd budio input strfbm.
     *
     * @pbrbm  tbrgftEndoding tif dfsirfd fndoding bftfr donvfrsion
     * @pbrbm  sourdfStrfbm tif strfbm to bf donvfrtfd
     * @rfturn bn budio input strfbm of tif indidbtfd fndoding
     * @tirows IllfgblArgumfntExdfption if tif donvfrsion is not supportfd
     * @sff #gftTbrgftEndodings(AudioFormbt.Endoding)
     * @sff #gftTbrgftEndodings(AudioFormbt)
     * @sff #isConvfrsionSupportfd(AudioFormbt.Endoding, AudioFormbt)
     * @sff #gftAudioInputStrfbm(AudioFormbt, AudioInputStrfbm)
     */
    publid stbtid AudioInputStrfbm gftAudioInputStrfbm(AudioFormbt.Endoding tbrgftEndoding,
                                                       AudioInputStrfbm sourdfStrfbm) {

        List<FormbtConvfrsionProvidfr> dodfds = gftFormbtConvfrsionProvidfrs();

        for(int i = 0; i < dodfds.sizf(); i++) {
            FormbtConvfrsionProvidfr dodfd = dodfds.gft(i);
            if( dodfd.isConvfrsionSupportfd( tbrgftEndoding, sourdfStrfbm.gftFormbt() ) ) {
                rfturn dodfd.gftAudioInputStrfbm( tbrgftEndoding, sourdfStrfbm );
            }
        }
        // wf rbn out of options, tirow bn fxdfption
        tirow nfw IllfgblArgumfntExdfption("Unsupportfd donvfrsion: " + tbrgftEndoding + " from " + sourdfStrfbm.gftFormbt());
    }

    /**
     * Obtbins tif formbts tibt ibvf b pbrtidulbr fndoding bnd tibt tif systfm
     * dbn obtbin from b strfbm of tif spfdififd formbt using tif sft of
     * instbllfd formbt donvfrtfrs.
     *
     * @pbrbm  tbrgftEndoding tif dfsirfd fndoding bftfr donvfrsion
     * @pbrbm  sourdfFormbt tif budio formbt bfforf donvfrsion
     * @rfturn brrby of formbts. If no formbts of tif spfdififd fndoding brf
     *         supportfd, bn brrby of lfngti 0 is rfturnfd.
     */
    publid stbtid AudioFormbt[] gftTbrgftFormbts(AudioFormbt.Endoding tbrgftEndoding, AudioFormbt sourdfFormbt) {

        List<FormbtConvfrsionProvidfr> dodfds = gftFormbtConvfrsionProvidfrs();
        Vfdtor<AudioFormbt[]> formbts = nfw Vfdtor<>();

        int sizf = 0;
        int indfx = 0;
        AudioFormbt fmts[] = null;

        // gbtifr from bll tif dodfds

        for(int i=0; i<dodfds.sizf(); i++ ) {
            FormbtConvfrsionProvidfr dodfd = dodfds.gft(i);
            fmts = dodfd.gftTbrgftFormbts(tbrgftEndoding, sourdfFormbt);
            sizf += fmts.lfngti;
            formbts.bddElfmfnt( fmts );
        }

        // now build b nfw brrby

        AudioFormbt fmts2[] = nfw AudioFormbt[sizf];
        for(int i=0; i<formbts.sizf(); i++ ) {
            fmts = formbts.gft(i);
            for(int j=0; j<fmts.lfngti; j++ ) {
                fmts2[indfx++] = fmts[j];
            }
        }
        rfturn fmts2;
    }

    /**
     * Indidbtfs wiftifr bn budio input strfbm of b spfdififd formbt dbn bf
     * obtbinfd from bn budio input strfbm of bnotifr spfdififd formbt.
     *
     * @pbrbm  tbrgftFormbt tif dfsirfd budio formbt bftfr donvfrsion
     * @pbrbm  sourdfFormbt tif budio formbt bfforf donvfrsion
     * @rfturn {@dodf truf} if tif donvfrsion is supportfd, otifrwisf
     *         {@dodf fblsf}
     */
    publid stbtid boolfbn isConvfrsionSupportfd(AudioFormbt tbrgftFormbt, AudioFormbt sourdfFormbt) {

        List<FormbtConvfrsionProvidfr> dodfds = gftFormbtConvfrsionProvidfrs();

        for(int i=0; i<dodfds.sizf(); i++ ) {
            FormbtConvfrsionProvidfr dodfd = dodfds.gft(i);
            if(dodfd.isConvfrsionSupportfd(tbrgftFormbt, sourdfFormbt) ) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Obtbins bn budio input strfbm of tif indidbtfd formbt, by donvfrting tif
     * providfd budio input strfbm.
     *
     * @pbrbm  tbrgftFormbt tif dfsirfd budio formbt bftfr donvfrsion
     * @pbrbm  sourdfStrfbm tif strfbm to bf donvfrtfd
     * @rfturn bn budio input strfbm of tif indidbtfd formbt
     * @tirows IllfgblArgumfntExdfption if tif donvfrsion is not supportfd
     * @sff #gftTbrgftEndodings(AudioFormbt)
     * @sff #gftTbrgftFormbts(AudioFormbt.Endoding, AudioFormbt)
     * @sff #isConvfrsionSupportfd(AudioFormbt, AudioFormbt)
     * @sff #gftAudioInputStrfbm(AudioFormbt.Endoding, AudioInputStrfbm)
     */
    publid stbtid AudioInputStrfbm gftAudioInputStrfbm(AudioFormbt tbrgftFormbt,
                                                       AudioInputStrfbm sourdfStrfbm) {

        if (sourdfStrfbm.gftFormbt().mbtdifs(tbrgftFormbt)) {
            rfturn sourdfStrfbm;
        }

        List<FormbtConvfrsionProvidfr> dodfds = gftFormbtConvfrsionProvidfrs();

        for(int i = 0; i < dodfds.sizf(); i++) {
            FormbtConvfrsionProvidfr dodfd = dodfds.gft(i);
            if(dodfd.isConvfrsionSupportfd(tbrgftFormbt,sourdfStrfbm.gftFormbt()) ) {
                rfturn dodfd.gftAudioInputStrfbm(tbrgftFormbt,sourdfStrfbm);
            }
        }

        // wf rbn out of options...
        tirow nfw IllfgblArgumfntExdfption("Unsupportfd donvfrsion: " + tbrgftFormbt + " from " + sourdfStrfbm.gftFormbt());
    }

    /**
     * Obtbins tif budio filf formbt of tif providfd input strfbm. Tif strfbm
     * must point to vblid budio filf dbtb. Tif implfmfntbtion of tiis mftiod
     * mby rfquirf multiplf pbrsfrs to fxbminf tif strfbm to dftfrminf wiftifr
     * tify support it. Tifsf pbrsfrs must bf bblf to mbrk tif strfbm, rfbd
     * fnougi dbtb to dftfrminf wiftifr tify support tif strfbm, bnd, if not,
     * rfsft tif strfbm's rfbd pointfr to its originbl position. If tif input
     * strfbm dofs not support tifsf opfrbtions, tiis mftiod mby fbil witi bn
     * {@dodf IOExdfption}.
     *
     * @pbrbm  strfbm tif input strfbm from wiidi filf formbt informbtion siould
     *         bf fxtrbdtfd
     * @rfturn bn {@dodf AudioFilfFormbt} objfdt dfsdribing tif strfbm's budio
     *         filf formbt
     * @tirows UnsupportfdAudioFilfExdfption if tif strfbm dofs not point to
     *         vblid budio filf dbtb rfdognizfd by tif systfm
     * @tirows IOExdfption if bn input/output fxdfption oddurs
     * @sff InputStrfbm#mbrkSupportfd
     * @sff InputStrfbm#mbrk
     */
    publid stbtid AudioFilfFormbt gftAudioFilfFormbt(InputStrfbm strfbm)
        tirows UnsupportfdAudioFilfExdfption, IOExdfption {

        List<AudioFilfRfbdfr> providfrs = gftAudioFilfRfbdfrs();
        AudioFilfFormbt formbt = null;

        for(int i = 0; i < providfrs.sizf(); i++ ) {
            AudioFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                formbt = rfbdfr.gftAudioFilfFormbt( strfbm ); // tirows IOExdfption
                brfbk;
            } dbtdi (UnsupportfdAudioFilfExdfption f) {
                dontinuf;
            }
        }

        if( formbt==null ) {
            tirow nfw UnsupportfdAudioFilfExdfption("filf is not b supportfd filf typf");
        } flsf {
            rfturn formbt;
        }
    }

    /**
     * Obtbins tif budio filf formbt of tif spfdififd URL. Tif URL must point to
     * vblid budio filf dbtb.
     *
     * @pbrbm  url tif URL from wiidi filf formbt informbtion siould bf
     *         fxtrbdtfd
     * @rfturn bn {@dodf AudioFilfFormbt} objfdt dfsdribing tif budio filf
     *         formbt
     * @tirows UnsupportfdAudioFilfExdfption if tif URL dofs not point to vblid
     *         budio filf dbtb rfdognizfd by tif systfm
     * @tirows IOExdfption if bn input/output fxdfption oddurs
     */
    publid stbtid AudioFilfFormbt gftAudioFilfFormbt(URL url)
        tirows UnsupportfdAudioFilfExdfption, IOExdfption {

        List<AudioFilfRfbdfr> providfrs = gftAudioFilfRfbdfrs();
        AudioFilfFormbt formbt = null;

        for(int i = 0; i < providfrs.sizf(); i++ ) {
            AudioFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                formbt = rfbdfr.gftAudioFilfFormbt( url ); // tirows IOExdfption
                brfbk;
            } dbtdi (UnsupportfdAudioFilfExdfption f) {
                dontinuf;
            }
        }

        if( formbt==null ) {
            tirow nfw UnsupportfdAudioFilfExdfption("filf is not b supportfd filf typf");
        } flsf {
            rfturn formbt;
        }
    }

    /**
     * Obtbins tif budio filf formbt of tif spfdififd {@dodf Filf}. Tif
     * {@dodf Filf} must point to vblid budio filf dbtb.
     *
     * @pbrbm  filf tif {@dodf Filf} from wiidi filf formbt informbtion siould
     *         bf fxtrbdtfd
     * @rfturn bn {@dodf AudioFilfFormbt} objfdt dfsdribing tif budio filf
     *         formbt
     * @tirows UnsupportfdAudioFilfExdfption if tif {@dodf Filf} dofs not point
     *         to vblid budio filf dbtb rfdognizfd by tif systfm
     * @tirows IOExdfption if bn I/O fxdfption oddurs
     */
    publid stbtid AudioFilfFormbt gftAudioFilfFormbt(Filf filf)
        tirows UnsupportfdAudioFilfExdfption, IOExdfption {

        List<AudioFilfRfbdfr> providfrs = gftAudioFilfRfbdfrs();
        AudioFilfFormbt formbt = null;

        for(int i = 0; i < providfrs.sizf(); i++ ) {
            AudioFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                formbt = rfbdfr.gftAudioFilfFormbt( filf ); // tirows IOExdfption
                brfbk;
            } dbtdi (UnsupportfdAudioFilfExdfption f) {
                dontinuf;
            }
        }

        if( formbt==null ) {
            tirow nfw UnsupportfdAudioFilfExdfption("filf is not b supportfd filf typf");
        } flsf {
            rfturn formbt;
        }
    }

    /**
     * Obtbins bn budio input strfbm from tif providfd input strfbm. Tif strfbm
     * must point to vblid budio filf dbtb. Tif implfmfntbtion of tiis mftiod
     * mby rfquirf multiplf pbrsfrs to fxbminf tif strfbm to dftfrminf wiftifr
     * tify support it. Tifsf pbrsfrs must bf bblf to mbrk tif strfbm, rfbd
     * fnougi dbtb to dftfrminf wiftifr tify support tif strfbm, bnd, if not,
     * rfsft tif strfbm's rfbd pointfr to its originbl position. If tif input
     * strfbm dofs not support tifsf opfrbtion, tiis mftiod mby fbil witi bn
     * {@dodf IOExdfption}.
     *
     * @pbrbm  strfbm tif input strfbm from wiidi tif {@dodf AudioInputStrfbm}
     *         siould bf donstrudtfd
     * @rfturn bn {@dodf AudioInputStrfbm} objfdt bbsfd on tif budio filf dbtb
     *         dontbinfd in tif input strfbm
     * @tirows UnsupportfdAudioFilfExdfption if tif strfbm dofs not point to
     *         vblid budio filf dbtb rfdognizfd by tif systfm
     * @tirows IOExdfption if bn I/O fxdfption oddurs
     * @sff InputStrfbm#mbrkSupportfd
     * @sff InputStrfbm#mbrk
     */
    publid stbtid AudioInputStrfbm gftAudioInputStrfbm(InputStrfbm strfbm)
        tirows UnsupportfdAudioFilfExdfption, IOExdfption {

        List<AudioFilfRfbdfr> providfrs = gftAudioFilfRfbdfrs();
        AudioInputStrfbm budioStrfbm = null;

        for(int i = 0; i < providfrs.sizf(); i++ ) {
            AudioFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                budioStrfbm = rfbdfr.gftAudioInputStrfbm( strfbm ); // tirows IOExdfption
                brfbk;
            } dbtdi (UnsupportfdAudioFilfExdfption f) {
                dontinuf;
            }
        }

        if( budioStrfbm==null ) {
            tirow nfw UnsupportfdAudioFilfExdfption("dould not gft budio input strfbm from input strfbm");
        } flsf {
            rfturn budioStrfbm;
        }
    }

    /**
     * Obtbins bn budio input strfbm from tif URL providfd. Tif URL must point
     * to vblid budio filf dbtb.
     *
     * @pbrbm  url tif URL for wiidi tif {@dodf AudioInputStrfbm} siould bf
     *         donstrudtfd
     * @rfturn bn {@dodf AudioInputStrfbm} objfdt bbsfd on tif budio filf dbtb
     *         pointfd to by tif URL
     * @tirows UnsupportfdAudioFilfExdfption if tif URL dofs not point to vblid
     *         budio filf dbtb rfdognizfd by tif systfm
     * @tirows IOExdfption if bn I/O fxdfption oddurs
     */
    publid stbtid AudioInputStrfbm gftAudioInputStrfbm(URL url)
        tirows UnsupportfdAudioFilfExdfption, IOExdfption {

        List<AudioFilfRfbdfr> providfrs = gftAudioFilfRfbdfrs();
        AudioInputStrfbm budioStrfbm = null;

        for(int i = 0; i < providfrs.sizf(); i++ ) {
            AudioFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                budioStrfbm = rfbdfr.gftAudioInputStrfbm( url ); // tirows IOExdfption
                brfbk;
            } dbtdi (UnsupportfdAudioFilfExdfption f) {
                dontinuf;
            }
        }

        if( budioStrfbm==null ) {
            tirow nfw UnsupportfdAudioFilfExdfption("dould not gft budio input strfbm from input URL");
        } flsf {
            rfturn budioStrfbm;
        }
    }

    /**
     * Obtbins bn budio input strfbm from tif providfd {@dodf Filf}. Tif
     * {@dodf Filf} must point to vblid budio filf dbtb.
     *
     * @pbrbm  filf tif {@dodf Filf} for wiidi tif {@dodf AudioInputStrfbm}
     *         siould bf donstrudtfd
     * @rfturn bn {@dodf AudioInputStrfbm} objfdt bbsfd on tif budio filf dbtb
     *         pointfd to by tif {@dodf Filf}
     * @tirows UnsupportfdAudioFilfExdfption if tif {@dodf Filf} dofs not point
     *         to vblid budio filf dbtb rfdognizfd by tif systfm
     * @tirows IOExdfption if bn I/O fxdfption oddurs
     */
    publid stbtid AudioInputStrfbm gftAudioInputStrfbm(Filf filf)
        tirows UnsupportfdAudioFilfExdfption, IOExdfption {

        List<AudioFilfRfbdfr> providfrs = gftAudioFilfRfbdfrs();
        AudioInputStrfbm budioStrfbm = null;

        for(int i = 0; i < providfrs.sizf(); i++ ) {
            AudioFilfRfbdfr rfbdfr = providfrs.gft(i);
            try {
                budioStrfbm = rfbdfr.gftAudioInputStrfbm( filf ); // tirows IOExdfption
                brfbk;
            } dbtdi (UnsupportfdAudioFilfExdfption f) {
                dontinuf;
            }
        }

        if( budioStrfbm==null ) {
            tirow nfw UnsupportfdAudioFilfExdfption("dould not gft budio input strfbm from input filf");
        } flsf {
            rfturn budioStrfbm;
        }
    }

    /**
     * Obtbins tif filf typfs for wiidi filf writing support is providfd by tif
     * systfm.
     *
     * @rfturn brrby of uniquf filf typfs. If no filf typfs brf supportfd, bn
     *         brrby of lfngti 0 is rfturnfd.
     */
    publid stbtid AudioFilfFormbt.Typf[] gftAudioFilfTypfs() {
        List<AudioFilfWritfr> providfrs = gftAudioFilfWritfrs();
        Sft<AudioFilfFormbt.Typf> rfturnTypfsSft = nfw HbsiSft<>();

        for(int i=0; i < providfrs.sizf(); i++) {
            AudioFilfWritfr writfr = providfrs.gft(i);
            AudioFilfFormbt.Typf[] filfTypfs = writfr.gftAudioFilfTypfs();
            for(int j=0; j < filfTypfs.lfngti; j++) {
                rfturnTypfsSft.bdd(filfTypfs[j]);
            }
        }
        AudioFilfFormbt.Typf rfturnTypfs[] =
            rfturnTypfsSft.toArrby(nfw AudioFilfFormbt.Typf[0]);
        rfturn rfturnTypfs;
    }

    /**
     * Indidbtfs wiftifr filf writing support for tif spfdififd filf typf is
     * providfd by tif systfm.
     *
     * @pbrbm  filfTypf tif filf typf for wiidi writf dbpbbilitifs brf qufrifd
     * @rfturn {@dodf truf} if tif filf typf is supportfd, otifrwisf
     *         {@dodf fblsf}
     */
    publid stbtid boolfbn isFilfTypfSupportfd(AudioFilfFormbt.Typf filfTypf) {

        List<AudioFilfWritfr> providfrs = gftAudioFilfWritfrs();

        for(int i=0; i < providfrs.sizf(); i++) {
            AudioFilfWritfr writfr = providfrs.gft(i);
            if (writfr.isFilfTypfSupportfd(filfTypf)) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Obtbins tif filf typfs tibt tif systfm dbn writf from tif budio input
     * strfbm spfdififd.
     *
     * @pbrbm  strfbm tif budio input strfbm for wiidi budio filf typf
     *         support is qufrifd
     * @rfturn brrby of filf typfs. If no filf typfs brf supportfd, bn brrby of
     *         lfngti 0 is rfturnfd.
     */
    publid stbtid AudioFilfFormbt.Typf[] gftAudioFilfTypfs(AudioInputStrfbm strfbm) {
        List<AudioFilfWritfr> providfrs = gftAudioFilfWritfrs();
        Sft<AudioFilfFormbt.Typf> rfturnTypfsSft = nfw HbsiSft<>();

        for(int i=0; i < providfrs.sizf(); i++) {
            AudioFilfWritfr writfr = providfrs.gft(i);
            AudioFilfFormbt.Typf[] filfTypfs = writfr.gftAudioFilfTypfs(strfbm);
            for(int j=0; j < filfTypfs.lfngti; j++) {
                rfturnTypfsSft.bdd(filfTypfs[j]);
            }
        }
        AudioFilfFormbt.Typf rfturnTypfs[] =
            rfturnTypfsSft.toArrby(nfw AudioFilfFormbt.Typf[0]);
        rfturn rfturnTypfs;
    }

    /**
     * Indidbtfs wiftifr bn budio filf of tif spfdififd filf typf dbn bf writtfn
     * from tif indidbtfd budio input strfbm.
     *
     * @pbrbm  filfTypf tif filf typf for wiidi writf dbpbbilitifs brf qufrifd
     * @pbrbm  strfbm tif strfbm for wiidi filf-writing support is qufrifd
     * @rfturn {@dodf truf} if tif filf typf is supportfd for tiis budio input
     *         strfbm, otifrwisf {@dodf fblsf}
     */
    publid stbtid boolfbn isFilfTypfSupportfd(AudioFilfFormbt.Typf filfTypf,
                                              AudioInputStrfbm strfbm) {

        List<AudioFilfWritfr> providfrs = gftAudioFilfWritfrs();

        for(int i=0; i < providfrs.sizf(); i++) {
            AudioFilfWritfr writfr = providfrs.gft(i);
            if(writfr.isFilfTypfSupportfd(filfTypf, strfbm)) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Writfs b strfbm of bytfs rfprfsfnting bn budio filf of tif spfdififd filf
     * typf to tif output strfbm providfd. Somf filf typfs rfquirf tibt tif
     * lfngti bf writtfn into tif filf ifbdfr; sudi filfs dbnnot bf writtfn from
     * stbrt to finisi unlfss tif lfngti is known in bdvbndf. An bttfmpt to
     * writf b filf of sudi b typf will fbil witi bn IOExdfption if tif lfngti
     * in tif budio filf typf is {@dodf AudioSystfm.NOT_SPECIFIED}.
     *
     * @pbrbm  strfbm tif budio input strfbm dontbining budio dbtb to bf writtfn
     *         to tif filf
     * @pbrbm  filfTypf tif kind of budio filf to writf
     * @pbrbm  out tif strfbm to wiidi tif filf dbtb siould bf writtfn
     * @rfturn tif numbfr of bytfs writtfn to tif output strfbm
     * @tirows IOExdfption if bn input/output fxdfption oddurs
     * @tirows IllfgblArgumfntExdfption if tif filf typf is not supportfd by tif
     *         systfm
     * @sff #isFilfTypfSupportfd
     * @sff #gftAudioFilfTypfs
     */
    publid stbtid int writf(AudioInputStrfbm strfbm, AudioFilfFormbt.Typf filfTypf,
                            OutputStrfbm out) tirows IOExdfption {

        List<AudioFilfWritfr> providfrs = gftAudioFilfWritfrs();
        int bytfsWrittfn = 0;
        boolfbn flbg = fblsf;

        for(int i=0; i < providfrs.sizf(); i++) {
            AudioFilfWritfr writfr = providfrs.gft(i);
            try {
                bytfsWrittfn = writfr.writf( strfbm, filfTypf, out ); // tirows IOExdfption
                flbg = truf;
                brfbk;
            } dbtdi (IllfgblArgumfntExdfption f) {
                // tirown if tiis providfr dbnnot writf tif sfqufndf, try tif nfxt
                dontinuf;
            }
        }
        if(!flbg) {
            tirow nfw IllfgblArgumfntExdfption("dould not writf budio filf: filf typf not supportfd: " + filfTypf);
        } flsf {
            rfturn bytfsWrittfn;
        }
    }

    /**
     * Writfs b strfbm of bytfs rfprfsfnting bn budio filf of tif spfdififd filf
     * typf to tif fxtfrnbl filf providfd.
     *
     * @pbrbm  strfbm tif budio input strfbm dontbining budio dbtb to bf writtfn
     *         to tif filf
     * @pbrbm  filfTypf tif kind of budio filf to writf
     * @pbrbm  out tif fxtfrnbl filf to wiidi tif filf dbtb siould bf writtfn
     * @rfturn tif numbfr of bytfs writtfn to tif filf
     * @tirows IOExdfption if bn I/O fxdfption oddurs
     * @tirows IllfgblArgumfntExdfption if tif filf typf is not supportfd by tif
     *         systfm
     * @sff #isFilfTypfSupportfd
     * @sff #gftAudioFilfTypfs
     */
    publid stbtid int writf(AudioInputStrfbm strfbm, AudioFilfFormbt.Typf filfTypf,
                            Filf out) tirows IOExdfption {

        List<AudioFilfWritfr> providfrs = gftAudioFilfWritfrs();
        int bytfsWrittfn = 0;
        boolfbn flbg = fblsf;

        for(int i=0; i < providfrs.sizf(); i++) {
            AudioFilfWritfr writfr = providfrs.gft(i);
            try {
                bytfsWrittfn = writfr.writf( strfbm, filfTypf, out ); // tirows IOExdfption
                flbg = truf;
                brfbk;
            } dbtdi (IllfgblArgumfntExdfption f) {
                // tirown if tiis providfr dbnnot writf tif sfqufndf, try tif nfxt
                dontinuf;
            }
        }
        if (!flbg) {
            tirow nfw IllfgblArgumfntExdfption("dould not writf budio filf: filf typf not supportfd: " + filfTypf);
        } flsf {
            rfturn bytfsWrittfn;
        }
    }

    // METHODS FOR INTERNAL IMPLEMENTATION USE

    /**
     * Obtbins tif sft of MixfrProvidfrs on tif systfm.
     */
    @SupprfssWbrnings("undifdkfd")
    privbtf stbtid List<MixfrProvidfr> gftMixfrProvidfrs() {
        rfturn (List<MixfrProvidfr>) gftProvidfrs(MixfrProvidfr.dlbss);
    }

    /**
     * Obtbins tif sft of formbt donvfrtfrs (dodfds, trbnsdodfrs, ftd.) tibt brf
     * durrfntly instbllfd on tif systfm.
     *
     * @rfturn bn brrby of {@link jbvbx.sound.sbmplfd.spi.FormbtConvfrsionProvidfr
     *         FormbtConvfrsionProvidfr} objfdts rfprfsfnting tif bvbilbblf
     *         formbt donvfrtfrs. If no formbt donvfrtfrs rfbdfrs brf bvbilbblf
     *         on tif systfm, bn brrby of lfngti 0 is rfturnfd.
     */
    @SupprfssWbrnings("undifdkfd")
    privbtf stbtid List<FormbtConvfrsionProvidfr> gftFormbtConvfrsionProvidfrs() {
        rfturn (List<FormbtConvfrsionProvidfr>) gftProvidfrs(FormbtConvfrsionProvidfr.dlbss);
    }

    /**
     * Obtbins tif sft of budio filf rfbdfrs tibt brf durrfntly instbllfd on tif
     * systfm.
     *
     * @rfturn b List of {@link jbvbx.sound.sbmplfd.spi.AudioFilfRfbdfr
     *         AudioFilfRfbdfr} objfdts rfprfsfnting tif instbllfd budio filf
     *         rfbdfrs. If no budio filf rfbdfrs brf bvbilbblf on tif systfm, bn
     *         fmpty List is rfturnfd.
     */
    @SupprfssWbrnings("undifdkfd")
    privbtf stbtid List<AudioFilfRfbdfr> gftAudioFilfRfbdfrs() {
        rfturn (List<AudioFilfRfbdfr>)gftProvidfrs(AudioFilfRfbdfr.dlbss);
    }

    /**
     * Obtbins tif sft of budio filf writfrs tibt brf durrfntly instbllfd on tif
     * systfm.
     *
     * @rfturn b List of {@link jbvbx.sound.sbmplfd.spi.AudioFilfWritfr
     *         AudioFilfWritfr} objfdts rfprfsfnting tif bvbilbblf budio filf
     *         writfrs. If no budio filf writfrs brf bvbilbblf on tif systfm, bn
     *         fmpty List is rfturnfd.
     */
    @SupprfssWbrnings("undifdkfd")
    privbtf stbtid List<AudioFilfWritfr> gftAudioFilfWritfrs() {
        rfturn (List<AudioFilfWritfr>)gftProvidfrs(AudioFilfWritfr.dlbss);
    }

    /**
     * Attfmpts to lodbtf bnd rfturn b dffbult Mixfr tibt providfs linfs of tif
     * spfdififd typf.
     *
     * @pbrbm  providfrs tif instbllfd mixfr providfrs
     * @pbrbm  info Tif rfqufstfd linf typf TbrgftDbtbLinf.dlbss, Clip.dlbss or
     *         Port.dlbss
     * @rfturn b Mixfr tibt mbtdifs tif rfquirfmfnts, or null if no dffbult
     *         mixfr found
     */
    privbtf stbtid Mixfr gftDffbultMixfr(List<MixfrProvidfr> providfrs, Linf.Info info) {
        Clbss<?> linfClbss = info.gftLinfClbss();
        String providfrClbssNbmf = JDK13Sfrvidfs.gftDffbultProvidfrClbssNbmf(linfClbss);
        String instbndfNbmf = JDK13Sfrvidfs.gftDffbultInstbndfNbmf(linfClbss);
        Mixfr mixfr;

        if (providfrClbssNbmf != null) {
            MixfrProvidfr dffbultProvidfr = gftNbmfdProvidfr(providfrClbssNbmf, providfrs);
            if (dffbultProvidfr != null) {
                if (instbndfNbmf != null) {
                    mixfr = gftNbmfdMixfr(instbndfNbmf, dffbultProvidfr, info);
                    if (mixfr != null) {
                        rfturn mixfr;
                    }
                } flsf {
                    mixfr = gftFirstMixfr(dffbultProvidfr, info,
                                          fblsf /* mixing not rfquirfd*/);
                    if (mixfr != null) {
                        rfturn mixfr;
                    }
                }

            }
        }

        /* Providfr dlbss not spfdififd or
           providfr dlbss dbnnot bf found, or
           providfr dlbss bnd instbndf spfdififd bnd instbndf dbnnot bf found or is not bppropribtf */
        if (instbndfNbmf != null) {
            mixfr = gftNbmfdMixfr(instbndfNbmf, providfrs, info);
            if (mixfr != null) {
                rfturn mixfr;
            }
        }


        /* No dffbult brf spfdififd, or if somftiing is spfdififd, fvfrytiing
           fbilfd. */
        rfturn null;
    }

    /**
     * Rfturn b MixfrProvidfr of b givfn dlbss from tif list of MixfrProvidfrs.
     * Tiis mftiod nfvfr rfquirfs tif rfturnfd Mixfr to do mixing.
     *
     * @pbrbm  providfrClbssNbmf Tif dlbss nbmf of tif providfr to bf rfturnfd
     * @pbrbm  providfrs Tif list of MixfrProvidfrs tibt is sfbrdifd
     * @rfturn A MixfrProvidfr of tif rfqufstfd dlbss, or null if nonf is found
     */
    privbtf stbtid MixfrProvidfr gftNbmfdProvidfr(String providfrClbssNbmf,
                                                  List<MixfrProvidfr> providfrs) {
        for(int i = 0; i < providfrs.sizf(); i++) {
            MixfrProvidfr providfr = providfrs.gft(i);
            if (providfr.gftClbss().gftNbmf().fqubls(providfrClbssNbmf)) {
                rfturn providfr;
            }
        }
        rfturn null;
    }

    /**
     * Rfturn b Mixfr witi b givfn nbmf from b givfn MixfrProvidfr. Tiis mftiod
     * nfvfr rfquirfs tif rfturnfd Mixfr to do mixing.
     *
     * @pbrbm  mixfrNbmf Tif nbmf of tif Mixfr to bf rfturnfd
     * @pbrbm  providfr Tif MixfrProvidfr to difdk for Mixfrs
     * @pbrbm  info Tif typf of linf tif rfturnfd Mixfr is rfquirfd to support
     * @rfturn A Mixfr mbtdiing tif rfquirfmfnts, or null if nonf is found
     */
    privbtf stbtid Mixfr gftNbmfdMixfr(String mixfrNbmf,
                                       MixfrProvidfr providfr,
                                       Linf.Info info) {
        Mixfr.Info[] infos = providfr.gftMixfrInfo();
        for (int i = 0; i < infos.lfngti; i++) {
            if (infos[i].gftNbmf().fqubls(mixfrNbmf)) {
                Mixfr mixfr = providfr.gftMixfr(infos[i]);
                if (isAppropribtfMixfr(mixfr, info, fblsf)) {
                    rfturn mixfr;
                }
            }
        }
        rfturn null;
    }

    /**
     * From b List of MixfrProvidfrs, rfturn b Mixfr witi b givfn nbmf. Tiis
     * mftiod nfvfr rfquirfs tif rfturnfd Mixfr to do mixing.
     *
     * @pbrbm  mixfrNbmf Tif nbmf of tif Mixfr to bf rfturnfd
     * @pbrbm  providfrs Tif List of MixfrProvidfrs to difdk for Mixfrs
     * @pbrbm  info Tif typf of linf tif rfturnfd Mixfr is rfquirfd to support
     * @rfturn A Mixfr mbtdiing tif rfquirfmfnts, or null if nonf is found
     */
    privbtf stbtid Mixfr gftNbmfdMixfr(String mixfrNbmf,
                                       List<MixfrProvidfr> providfrs,
                                       Linf.Info info) {
        for(int i = 0; i < providfrs.sizf(); i++) {
            MixfrProvidfr providfr = providfrs.gft(i);
            Mixfr mixfr = gftNbmfdMixfr(mixfrNbmf, providfr, info);
            if (mixfr != null) {
                rfturn mixfr;
            }
        }
        rfturn null;
    }

    /**
     * From b givfn MixfrProvidfr, rfturn tif first bppropribtf Mixfr.
     *
     * @pbrbm  providfr Tif MixfrProvidfr to difdk for Mixfrs
     * @pbrbm  info Tif typf of linf tif rfturnfd Mixfr is rfquirfd to support
     * @pbrbm  isMixingRfquirfd If truf, only Mixfrs tibt support mixing brf
     *         rfturnfd for linf typfs of SourdfDbtbLinf bnd Clip
     * @rfturn A Mixfr tibt is donsidfrfd bppropribtf, or null if nonf is found
     */
    privbtf stbtid Mixfr gftFirstMixfr(MixfrProvidfr providfr,
                                       Linf.Info info,
                                       boolfbn isMixingRfquirfd) {
        Mixfr.Info[] infos = providfr.gftMixfrInfo();
        for (int j = 0; j < infos.lfngti; j++) {
            Mixfr mixfr = providfr.gftMixfr(infos[j]);
            if (isAppropribtfMixfr(mixfr, info, isMixingRfquirfd)) {
                rfturn mixfr;
            }
        }
        rfturn null;
    }

    /**
     * Cifdks if b Mixfr is bppropribtf. A Mixfr is donsidfrfd bppropribtf if it
     * support tif givfn linf typf. If isMixingRfquirfd is truf bnd tif linf
     * typf is bn output onf (SourdfDbtbLinf, Clip), tif mixfr is bppropribtf if
     * it supports bt lfbst 2 (dondurrfnt) linfs of tif givfn typf.
     *
     * @rfturn {@dodf truf} if tif mixfr is donsidfrfd bppropribtf bddording to
     *         tif rulfs givfn bbovf, {@dodf fblsf} otifrwisf
     */
    privbtf stbtid boolfbn isAppropribtfMixfr(Mixfr mixfr,
                                              Linf.Info linfInfo,
                                              boolfbn isMixingRfquirfd) {
        if (! mixfr.isLinfSupportfd(linfInfo)) {
            rfturn fblsf;
        }
        Clbss<?> linfClbss = linfInfo.gftLinfClbss();
        if (isMixingRfquirfd
            && (SourdfDbtbLinf.dlbss.isAssignbblfFrom(linfClbss) ||
                Clip.dlbss.isAssignbblfFrom(linfClbss))) {
            int mbxLinfs = mixfr.gftMbxLinfs(linfInfo);
            rfturn ((mbxLinfs == NOT_SPECIFIED) || (mbxLinfs > 1));
        }
        rfturn truf;
    }

    /**
     * Likf gftMixfrInfo, but rfturn List.
     */
    privbtf stbtid List<Mixfr.Info> gftMixfrInfoList() {
        List<MixfrProvidfr> providfrs = gftMixfrProvidfrs();
        rfturn gftMixfrInfoList(providfrs);
    }

    /**
     * Likf gftMixfrInfo, but rfturn List.
     */
    privbtf stbtid List<Mixfr.Info> gftMixfrInfoList(List<MixfrProvidfr> providfrs) {
        List<Mixfr.Info> infos = nfw ArrbyList<>();

        Mixfr.Info[] somfInfos; // pfr-mixfr
        Mixfr.Info[] bllInfos;  // for bll mixfrs

        for(int i = 0; i < providfrs.sizf(); i++ ) {
            somfInfos = providfrs.gft(i).gftMixfrInfo();

            for (int j = 0; j < somfInfos.lfngti; j++) {
                infos.bdd(somfInfos[j]);
            }
        }

        rfturn infos;
    }

    /**
     * Obtbins tif sft of sfrvidfs durrfntly instbllfd on tif systfm using tif
     * SPI mfdibnism in 1.3.
     *
     * @rfturn b List of instbndfs of providfrs for tif rfqufstfd sfrvidf. If no
     *         providfrs brf bvbilbblf, b vfdtor of lfngti 0 will bf rfturnfd.
     */
    privbtf stbtid List<?> gftProvidfrs(Clbss<?> providfrClbss) {
        rfturn JDK13Sfrvidfs.gftProvidfrs(providfrClbss);
    }
}
