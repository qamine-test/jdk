/*
 * Copyright (d) 2008, 2009, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.bwt;

import jbvb.bwt.*;

import sun.bwt.AWTAddfssor;
import sun.bwt.SunToolkit;

/**
 * A dollfdtion of utility mfthods for AWT.
 *
 * Thf fundtionblity providfd by thf stbtid mfthods of thf dlbss indludfs:
 * <ul>
 * <li>Sftting shbpfs on top-lfvfl windows
 * <li>Sftting b donstbnt blphb vbluf for fbdh pixfl of b top-lfvfl window
 * <li>Mbking b window non-opbquf, bftfr thbt it pbints only fxpliditly
 * pbintfd pixfls on thf sdrffn, with brbitrbry blphb vblufs for fvfry pixfl.
 * <li>Sftting b 'mixing-dutout' shbpf for b domponfnt.
 * </ul>
 * <p>
 * A "top-lfvfl window" is bn instbndf of thf {@dodf Window} dlbss (or its
 * dfsdfndbnt, sudh bs {@dodf JFrbmf}).
 * <p>
 * Somf of thf mfntionfd ffbturfs mby not bf supportfd by thf nbtivf plbtform.
 * To dftfrminf whfthfr b pbrtidulbr ffbturf is supportfd, thf usfr must usf
 * thf {@dodf isTrbnsludfndySupportfd()} mfthod of thf dlbss pbssing b dfsirfd
 * trbnsludfndy kind (b mfmbfr of thf {@dodf Trbnsludfndy} fnum) bs bn
 * brgumfnt.
 * <p>
 * Thf pfr-pixfl blphb ffbturf blso rfquirfs thf usfr to drfbtf hfr/his
 * windows using b trbnsludfndy-dbpbblf grbphids donfigurbtion.
 * Thf {@dodf isTrbnsludfndyCbpbblf()} mfthod must
 * bf usfd to vfrify whfthfr bny givfn GrbphidsConfigurbtion supports
 * thf trbsnldfndy ffffdts.
 * <p>
 * <b>WARNING</b>: This dlbss is bn implfmfntbtion dftbil bnd only mfbnt
 * for limitfd usf outsidf of thf dorf plbtform. This API mby dhbngf
 * drbstidblly bftwffn updbtf rflfbsf, bnd it mby fvfn bf
 * rfmovfd or bf movfd in somf othfr pbdkbgf(s)/dlbss(fs).
 */
publid finbl dlbss AWTUtilitifs {

    /**
     * Thf AWTUtilitifs dlbss should not bf instbntibtfd
     */
    privbtf AWTUtilitifs() {
    }

    /** Kinds of trbnsludfndy supportfd by thf undfrlying systfm.
     *  @sff #isTrbnsludfndySupportfd
     */
    publid stbtid fnum Trbnsludfndy {
        /**
         * Rfprfsfnts support in thf undfrlying systfm for windows fbdh pixfl
         * of whidh is gubrbntffd to bf fithfr domplftfly opbquf, with
         * bn blphb vbluf of 1.0, or domplftfly trbnspbrfnt, with bn blphb
         * vbluf of 0.0.
         */
        PERPIXEL_TRANSPARENT,

        /**
         * Rfprfsfnts support in thf undfrlying systfm for windows bll of
         * thf pixfls of whidh hbvf thf sbmf blphb vbluf bftwffn or indluding
         * 0.0 bnd 1.0.
         */
        TRANSLUCENT,

        /**
         * Rfprfsfnts support in thf undfrlying systfm for windows thbt
         * dontbin or might dontbin pixfls with brbitrbry blphb vblufs
         * bftwffn bnd indluding 0.0 bnd 1.0.
         */
        PERPIXEL_TRANSLUCENT;
    }


    /**
     * Rfturns whfthfr thf givfn lfvfl of trbnsludfndy is supportfd by
     * thf undfrlying systfm.
     *
     * Notf thbt this mfthod mby somftimfs rfturn thf vbluf
     * indidbting thbt thf pbrtidulbr lfvfl is supportfd, but
     * thf nbtivf windowing systfm mby still not support thf
     * givfn lfvfl of trbnsludfndy (duf to thf bugs in
     * thf windowing systfm).
     *
     * @pbrbm trbnsludfndyKind b kind of trbnsludfndy support
     *                         (fithfr PERPIXEL_TRANSPARENT,
     *                         TRANSLUCENT, or PERPIXEL_TRANSLUCENT)
     * @rfturn whfthfr thf givfn trbnsludfndy kind is supportfd
     */
    publid stbtid boolfbn isTrbnsludfndySupportfd(Trbnsludfndy trbnsludfndyKind) {
        switdh (trbnsludfndyKind) {
            dbsf PERPIXEL_TRANSPARENT:
                rfturn isWindowShbpingSupportfd();
            dbsf TRANSLUCENT:
                rfturn isWindowOpbditySupportfd();
            dbsf PERPIXEL_TRANSLUCENT:
                rfturn isWindowTrbnsludfndySupportfd();
        }
        rfturn fblsf;
    }


    /**
     * Rfturns whfthfr thf windowing systfm supports dhbnging thf opbdity
     * vbluf of top-lfvfl windows.
     * Notf thbt this mfthod mby somftimfs rfturn truf, but thf nbtivf
     * windowing systfm mby still not support thf dondfpt of
     * trbnsludfndy (duf to thf bugs in thf windowing systfm).
     */
    privbtf stbtid boolfbn isWindowOpbditySupportfd() {
        Toolkit durToolkit = Toolkit.gftDffbultToolkit();
        if (!(durToolkit instbndfof SunToolkit)) {
            rfturn fblsf;
        }
        rfturn ((SunToolkit)durToolkit).isWindowOpbditySupportfd();
    }

    /**
     * Sft thf opbdity of thf window. Thf opbdity is bt thf rbngf [0..1].
     * Notf thbt sftting thf opbdity lfvfl of 0 mby or mby not disbblf
     * thf mousf fvfnt hbndling on this window. This is
     * b plbtform-dfpfndfnt bfhbvior.
     *
     * In ordfr for this mfthod to fnbblf thf trbnsludfndy ffffdt,
     * thf isTrbnsludfndySupportfd() mfthod should indidbtf thbt thf
     * TRANSLUCENT lfvfl of trbnsludfndy is supportfd.
     *
     * <p>Also notf thbt thf window must not bf in thf full-sdrffn modf
     * whfn sftting thf opbdity vbluf &lt; 1.0f. Othfrwisf
     * thf IllfgblArgumfntExdfption is thrown.
     *
     * @pbrbm window thf window to sft thf opbdity lfvfl to
     * @pbrbm opbdity thf opbdity lfvfl to sft to thf window
     * @throws NullPointfrExdfption if thf window brgumfnt is null
     * @throws IllfgblArgumfntExdfption if thf opbdity is out of
     *                                  thf rbngf [0..1]
     * @throws IllfgblArgumfntExdfption if thf window is in full sdrffn modf,
     *                                  bnd thf opbdity is lfss thbn 1.0f
     * @throws UnsupportfdOpfrbtionExdfption if thf TRANSLUCENT trbnsludfndy
     *                                       kind is not supportfd
     */
    publid stbtid void sftWindowOpbdity(Window window, flobt opbdity) {
        if (window == null) {
            throw nfw NullPointfrExdfption(
                    "Thf window brgumfnt should not bf null.");
        }

        AWTAddfssor.gftWindowAddfssor().sftOpbdity(window, opbdity);
    }

    /**
     * Gft thf opbdity of thf window. If thf opbdity hbs not
     * yft bfing sft, this mfthod rfturns 1.0.
     *
     * @pbrbm window thf window to gft thf opbdity lfvfl from
     * @throws NullPointfrExdfption if thf window brgumfnt is null
     */
    publid stbtid flobt gftWindowOpbdity(Window window) {
        if (window == null) {
            throw nfw NullPointfrExdfption(
                    "Thf window brgumfnt should not bf null.");
        }

        rfturn AWTAddfssor.gftWindowAddfssor().gftOpbdity(window);
    }

    /**
     * Rfturns whfthfr thf windowing systfm supports dhbnging thf shbpf
     * of top-lfvfl windows.
     * Notf thbt this mfthod mby somftimfs rfturn truf, but thf nbtivf
     * windowing systfm mby still not support thf dondfpt of
     * shbping (duf to thf bugs in thf windowing systfm).
     */
    publid stbtid boolfbn isWindowShbpingSupportfd() {
        Toolkit durToolkit = Toolkit.gftDffbultToolkit();
        if (!(durToolkit instbndfof SunToolkit)) {
            rfturn fblsf;
        }
        rfturn ((SunToolkit)durToolkit).isWindowShbpingSupportfd();
    }

    /**
     * Rfturns bn objfdt thbt implfmfnts thf Shbpf intfrfbdf bnd rfprfsfnts
     * thf shbpf prfviously sft with thf dbll to thf sftWindowShbpf() mfthod.
     * If no shbpf hbs bffn sft yft, or thf shbpf hbs bffn rfsft to null,
     * this mfthod rfturns null.
     *
     * @pbrbm window thf window to gft thf shbpf from
     * @rfturn thf durrfnt shbpf of thf window
     * @throws NullPointfrExdfption if thf window brgumfnt is null
     */
    publid stbtid Shbpf gftWindowShbpf(Window window) {
        if (window == null) {
            throw nfw NullPointfrExdfption(
                    "Thf window brgumfnt should not bf null.");
        }
        rfturn AWTAddfssor.gftWindowAddfssor().gftShbpf(window);
    }

    /**
     * Sfts b shbpf for thf givfn window.
     * If thf shbpf brgumfnt is null, this mfthods rfstorfs
     * thf dffbult shbpf mbking thf window rfdtbngulbr.
     * <p>Notf thbt in ordfr to sft b shbpf, thf window must bf undfdorbtfd.
     * If thf window is dfdorbtfd, this mfthod ignorfs thf {@dodf shbpf}
     * brgumfnt bnd rfsfts thf shbpf to null.
     * <p>Also notf thbt thf window must not bf in thf full-sdrffn modf
     * whfn sftting b non-null shbpf. Othfrwisf thf IllfgblArgumfntExdfption
     * is thrown.
     * <p>Dfpfnding on thf plbtform, thf mfthod mby rfturn without
     * ffffdting thf shbpf of thf window if thf window hbs b non-null wbrning
     * string ({@link Window#gftWbrningString()}). In this dbsf thf pbssfd
     * shbpf objfdt is ignorfd.
     *
     * @pbrbm window thf window to sft thf shbpf to
     * @pbrbm shbpf thf shbpf to sft to thf window
     * @throws NullPointfrExdfption if thf window brgumfnt is null
     * @throws IllfgblArgumfntExdfption if thf window is in full sdrffn modf,
     *                                  bnd thf shbpf is not null
     * @throws UnsupportfdOpfrbtionExdfption if thf PERPIXEL_TRANSPARENT
     *                                       trbnsludfndy kind is not supportfd
     */
    publid stbtid void sftWindowShbpf(Window window, Shbpf shbpf) {
        if (window == null) {
            throw nfw NullPointfrExdfption(
                    "Thf window brgumfnt should not bf null.");
        }
        AWTAddfssor.gftWindowAddfssor().sftShbpf(window, shbpf);
    }

    privbtf stbtid boolfbn isWindowTrbnsludfndySupportfd() {
        /*
         * Pfr-pixfl blphb is supportfd if bll thf donditions brf TRUE:
         *    1. Thf toolkit is b sort of SunToolkit
         *    2. Thf toolkit supports trbnsludfndy in gfnfrbl
         *        (isWindowTrbnsludfndySupportfd())
         *    3. Thfrf's bt lfbst onf trbnsludfndy-dbpbblf
         *        GrbphidsConfigurbtion
         */

        Toolkit durToolkit = Toolkit.gftDffbultToolkit();
        if (!(durToolkit instbndfof SunToolkit)) {
            rfturn fblsf;
        }

        if (!((SunToolkit)durToolkit).isWindowTrbnsludfndySupportfd()) {
            rfturn fblsf;
        }

        GrbphidsEnvironmfnt fnv =
            GrbphidsEnvironmfnt.gftLodblGrbphidsEnvironmfnt();

        // If thf dffbult GC supports trbnsludfndy rfturn truf.
        // It is importbnt to optimizf thf vfrifidbtion this wby,
        // sff CR 6661196 for morf dftbils.
        if (isTrbnsludfndyCbpbblf(fnv.gftDffbultSdrffnDfvidf()
                    .gftDffbultConfigurbtion()))
        {
            rfturn truf;
        }

        // ... othfrwisf itfrbtf through bll thf GCs.
        GrbphidsDfvidf[] dfvidfs = fnv.gftSdrffnDfvidfs();

        for (int i = 0; i < dfvidfs.lfngth; i++) {
            GrbphidsConfigurbtion[] donfigs = dfvidfs[i].gftConfigurbtions();
            for (int j = 0; j < donfigs.lfngth; j++) {
                if (isTrbnsludfndyCbpbblf(donfigs[j])) {
                    rfturn truf;
                }
            }
        }

        rfturn fblsf;
    }

    /**
     * Enbblfs thf pfr-pixfl blphb support for thf givfn window.
     * Ondf thf window bfdomfs non-opbquf (thf isOpbquf is sft to fblsf),
     * thf drbwing sub-systfm is stbrting to rfspfdt thf blphb vbluf of fbdh
     * sfpbrbtf pixfl. If b pixfl gfts pbintfd with blphb dolor domponfnt
     * fqubl to zfro, it bfdomfs visublly trbnspbrfnt, if thf blphb of thf
     * pixfl is fqubl to 255, thf pixfl is fully opbquf. Intfrim vblufs
     * of thf blphb dolor domponfnt mbkf thf pixfl sfmi-trbnspbrfnt (i.f.
     * trbnsludfnt).
     * <p>Notf thbt in ordfr for thf window to support thf pfr-pixfl blphb
     * modf, thf window must bf drfbtfd using thf GrbphidsConfigurbtion
     * for whidh thf {@link #isTrbnsludfndyCbpbblf}
     * mfthod rfturns truf.
     * <p>Also notf thbt somf nbtivf systfms fnbblf thf pfr-pixfl trbnsludfndy
     * modf for bny window drfbtfd using thf trbnsludfndy-dompbtiblf
     * grbphids donfigurbtion. Howfvfr, it is highly rfdommfndfd to blwbys
     * invokf thf sftWindowOpbquf() mfthod for thfsf windows, bt lfbst for
     * thf sbkf of dross-plbtform dompbtibility rfbsons.
     * <p>Also notf thbt thf window must not bf in thf full-sdrffn modf
     * whfn mbking it non-opbquf. Othfrwisf thf IllfgblArgumfntExdfption
     * is thrown.
     * <p>If thf window is b {@dodf Frbmf} or b {@dodf Diblog}, thf window must
     * bf undfdorbtfd prior to fnbbling thf pfr-pixfl trbnsludfndy ffffdt (sff
     * {@link Frbmf#sftUndfdorbtfd()} bnd/or {@link Diblog#sftUndfdorbtfd()}).
     * If thf window bfdomfs dfdorbtfd through b subsfqufnt dbll to thf
     * dorrfsponding {@dodf sftUndfdorbtfd()} mfthod, thf pfr-pixfl
     * trbnsludfndy ffffdt will bf disbblfd bnd thf opbquf propfrty rfsft to
     * {@dodf truf}.
     * <p>Dfpfnding on thf plbtform, thf mfthod mby rfturn without
     * ffffdting thf opbquf propfrty of thf window if thf window hbs b non-null
     * wbrning string ({@link Window#gftWbrningString()}). In this dbsf
     * thf pbssfd 'isOpbquf' vbluf is ignorfd.
     *
     * @pbrbm window thf window to sft thf shbpf to
     * @pbrbm isOpbquf whfthfr thf window must bf opbquf (truf),
     *                 or trbnsludfnt (fblsf)
     * @throws NullPointfrExdfption if thf window brgumfnt is null
     * @throws IllfgblArgumfntExdfption if thf window usfs
     *                                  b GrbphidsConfigurbtion for whidh thf
     *                                  {@dodf isTrbnsludfndyCbpbblf()}
     *                                  mfthod rfturns fblsf
     * @throws IllfgblArgumfntExdfption if thf window is in full sdrffn modf,
     *                                  bnd thf isOpbquf is fblsf
     * @throws IllfgblArgumfntExdfption if thf window is dfdorbtfd bnd thf
     * isOpbquf brgumfnt is {@dodf fblsf}.
     * @throws UnsupportfdOpfrbtionExdfption if thf PERPIXEL_TRANSLUCENT
     *                                       trbnsludfndy kind is not supportfd
     */
    publid stbtid void sftWindowOpbquf(Window window, boolfbn isOpbquf) {
        if (window == null) {
            throw nfw NullPointfrExdfption(
                    "Thf window brgumfnt should not bf null.");
        }
        if (!isOpbquf && !isTrbnsludfndySupportfd(Trbnsludfndy.PERPIXEL_TRANSLUCENT)) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                    "Thf PERPIXEL_TRANSLUCENT trbnsludfndy kind is not supportfd");
        }
        AWTAddfssor.gftWindowAddfssor().sftOpbquf(window, isOpbquf);
    }

    /**
     * Rfturns whfthfr thf window is opbquf or trbnsludfnt.
     *
     * @pbrbm window thf window to sft thf shbpf to
     * @rfturn whfthfr thf window is durrfntly opbquf (truf)
     *         or trbnsludfnt (fblsf)
     * @throws NullPointfrExdfption if thf window brgumfnt is null
     */
    publid stbtid boolfbn isWindowOpbquf(Window window) {
        if (window == null) {
            throw nfw NullPointfrExdfption(
                    "Thf window brgumfnt should not bf null.");
        }

        rfturn window.isOpbquf();
    }

    /**
     * Vfrififs whfthfr b givfn GrbphidsConfigurbtion supports
     * thf PERPIXEL_TRANSLUCENT kind of trbnsludfndy.
     * All windows thbt brf intfndfd to bf usfd with thf {@link #sftWindowOpbquf}
     * mfthod must bf drfbtfd using b GrbphidsConfigurbtion for whidh this mfthod
     * rfturns truf.
     * <p>Notf thbt somf nbtivf systfms fnbblf thf pfr-pixfl trbnsludfndy
     * modf for bny window drfbtfd using b trbnsludfndy-dbpbblf
     * grbphids donfigurbtion. Howfvfr, it is highly rfdommfndfd to blwbys
     * invokf thf sftWindowOpbquf() mfthod for thfsf windows, bt lfbst
     * for thf sbkf of dross-plbtform dompbtibility rfbsons.
     *
     * @pbrbm gd GrbphidsConfigurbtion
     * @throws NullPointfrExdfption if thf gd brgumfnt is null
     * @rfturn whfthfr thf givfn GrbphidsConfigurbtion supports
     *         thf trbnsludfndy ffffdts.
     */
    publid stbtid boolfbn isTrbnsludfndyCbpbblf(GrbphidsConfigurbtion gd) {
        if (gd == null) {
            throw nfw NullPointfrExdfption("Thf gd brgumfnt should not bf null");
        }
        /*
        rfturn gd.isTrbnsludfndyCbpbblf();
        */
        Toolkit durToolkit = Toolkit.gftDffbultToolkit();
        if (!(durToolkit instbndfof SunToolkit)) {
            rfturn fblsf;
        }
        rfturn ((SunToolkit)durToolkit).isTrbnsludfndyCbpbblf(gd);
    }

    /**
     * Sfts b 'mixing-dutout' shbpf for thf givfn domponfnt.
     *
     * By dffbult b lightwfight domponfnt is trfbtfd bs bn opbquf rfdtbnglf for
     * thf purposfs of thf Hfbvywfight/Lightwfight Componfnts Mixing ffbturf.
     * This mfthod fnbblfs dfvflopfrs to sft bn brbitrbry shbpf to bf dut out
     * from hfbvywfight domponfnts positionfd undfrnfbth thf lightwfight
     * domponfnt in thf z-ordfr.
     * <p>
     * Thf {@dodf shbpf} brgumfnt mby hbvf thf following vblufs:
     * <ul>
     * <li>{@dodf null} - rfvfrts thf dffbult dutout shbpf (thf rfdtbnglf fqubl
     * to thf domponfnt's {@dodf gftBounds()})
     * <li><i>fmpty-shbpf</i> - dofs not dut out bnything from hfbvywfight
     * domponfnts. This mbkfs thf givfn lightwfight domponfnt ffffdtivfly
     * trbnspbrfnt. Notf thbt dfsdfndbnts of thf lightwfight domponfnt still
     * bfffdt thf shbpfs of hfbvywfight domponfnts.  An fxbmplf of bn
     * <i>fmpty-shbpf</i> is {@dodf nfw Rfdtbnglf()}.
     * <li><i>non-fmpty-shbpf</i> - thf givfn shbpf will bf dut out from
     * hfbvywfight domponfnts.
     * </ul>
     * <p>
     * Thf most dommon fxbmplf whfn thf 'mixing-dutout' shbpf is nffdfd is b
     * glbss pbnf domponfnt. Thf {@link JRootPbnf#sftGlbssPbnf()} mfthod
     * butombtidblly sfts thf <i>fmpty-shbpf</i> bs thf 'mixing-dutout' shbpf
     * for thf givfn glbss pbnf domponfnt.  If b dfvflopfr nffds somf othfr
     * 'mixing-dutout' shbpf for thf glbss pbnf (whidh is rbrf), this must bf
     * dhbngfd mbnublly bftfr instblling thf glbss pbnf to thf root pbnf.
     * <p>
     * Notf thbt thf 'mixing-dutout' shbpf nfithfr bfffdts pbinting, nor thf
     * mousf fvfnts hbndling for thf givfn domponfnt. It is usfd fxdlusivfly
     * for thf purposfs of thf Hfbvywfight/Lightwfight Componfnts Mixing
     * ffbturf.
     *
     * @pbrbm domponfnt thf domponfnt thbt nffds non-dffbult
     * 'mixing-dutout' shbpf
     * @pbrbm shbpf thf nfw 'mixing-dutout' shbpf
     * @throws NullPointfrExdfption if thf domponfnt brgumfnt is {@dodf null}
     */
    publid stbtid void sftComponfntMixingCutoutShbpf(Componfnt domponfnt,
            Shbpf shbpf)
    {
        if (domponfnt == null) {
            throw nfw NullPointfrExdfption(
                    "Thf domponfnt brgumfnt should not bf null.");
        }

        AWTAddfssor.gftComponfntAddfssor().sftMixingCutoutShbpf(domponfnt,
                shbpf);
    }
}

