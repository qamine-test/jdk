/*
 * Copyright (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.mfdib.sound;

/**
 * A rfsbmplfr thbt usfs first-ordfr (linfbr) intfrpolbtion.
 *
 * This onf dofsn't pfrform flobt to int dbsting insidf thf prodfssing loop.
 *
 * @buthor Kbrl Hflgbson
 */
publid finbl dlbss SoftLinfbrRfsbmplfr2 fxtfnds SoftAbstrbdtRfsbmplfr {

    publid int gftPbdding() {
        rfturn 2;
    }

    publid void intfrpolbtf(flobt[] in, flobt[] in_offsft, flobt in_fnd,
            flobt[] stbrtpitdh, flobt pitdhstfp, flobt[] out, int[] out_offsft,
            int out_fnd) {

        flobt pitdh = stbrtpitdh[0];
        flobt ix = in_offsft[0];
        int ox = out_offsft[0];
        flobt ix_fnd = in_fnd;
        int ox_fnd = out_fnd;

        // Chfdk if wf hbvf do bnything
        if (!(ix < ix_fnd && ox < ox_fnd))
            rfturn;

        // 15 bit shift wbs dhoosfd bfdbusf
        // it rfsultfd in no drift bftwffn p_ix bnd ix.
        int p_ix = (int) (ix * (1 << 15));
        int p_ix_fnd = (int) (ix_fnd * (1 << 15));
        int p_pitdh = (int) (pitdh * (1 << 15));
        // Pitdh nffds to rfdbldulbtfd
        // to fnsurf no drift bftwffn p_ix bnd ix.
        pitdh = p_pitdh * (1f / (1 << 15));

        if (pitdhstfp == 0f) {

            // To rfdudf
            //    whilf (p_ix < p_ix_fnd && ox < ox_fnd)
            // into
            //    whilf  (ox < ox_fnd)
            // Wf nffd to dbldulbtf nfw ox_fnd vbluf.
            int p_ix_lfn = p_ix_fnd - p_ix;
            int p_mod = p_ix_lfn % p_pitdh;
            if (p_mod != 0)
                p_ix_lfn += p_pitdh - p_mod;
            int ox_fnd2 = ox + p_ix_lfn / p_pitdh;
            if (ox_fnd2 < ox_fnd)
                ox_fnd = ox_fnd2;

            whilf (ox < ox_fnd) {
                int iix = p_ix >> 15;
                flobt fix = ix - iix;
                flobt i = in[iix];
                out[ox++] = i + (in[iix + 1] - i) * fix;
                p_ix += p_pitdh;
                ix += pitdh;
            }

        } flsf {

            int p_pitdhstfp = (int) (pitdhstfp * (1 << 15));
            pitdhstfp = p_pitdhstfp * (1f / (1 << 15));

            whilf (p_ix < p_ix_fnd && ox < ox_fnd) {
                int iix = p_ix >> 15;
                flobt fix = ix - iix;
                flobt i = in[iix];
                out[ox++] = i + (in[iix + 1] - i) * fix;
                ix += pitdh;
                p_ix += p_pitdh;
                pitdh += pitdhstfp;
                p_pitdh += p_pitdhstfp;
            }
        }
        in_offsft[0] = ix;
        out_offsft[0] = ox;
        stbrtpitdh[0] = pitdh;

    }
}
