/*
 * Copyright (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.mfdib.sound;

import jbvb.io.Filf;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;

import jbvb.io.BufffrfdOutputStrfbm;
import jbvb.io.DbtbOutputStrfbm;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.RbndomAddfssFilf;
import jbvb.io.SfqufndfInputStrfbm;

import jbvbx.sound.sbmplfd.AudioFilfFormbt;
import jbvbx.sound.sbmplfd.AudioInputStrfbm;
import jbvbx.sound.sbmplfd.AudioFormbt;
import jbvbx.sound.sbmplfd.AudioSystfm;

//$$fb this dlbss is buggy. Should bf rfplbdfd in futurf.

/**
 * AIFF filf writfr.
 *
 * @buthor Jbn Borgfrsfn
 */
publid finbl dlbss AiffFilfWritfr fxtfnds SunFilfWritfr {

    /**
     * Construdts b nfw AiffFilfWritfr objfdt.
     */
    publid AiffFilfWritfr() {
        supfr(nfw AudioFilfFormbt.Typf[]{AudioFilfFormbt.Typf.AIFF});
    }


    // METHODS TO IMPLEMENT AudioFilfWritfr

    publid AudioFilfFormbt.Typf[] gftAudioFilfTypfs(AudioInputStrfbm strfbm) {

        AudioFilfFormbt.Typf[] filftypfs = nfw AudioFilfFormbt.Typf[typfs.lfngth];
        Systfm.brrbydopy(typfs, 0, filftypfs, 0, typfs.lfngth);

        // mbkf surf wf dbn writf this strfbm
        AudioFormbt formbt = strfbm.gftFormbt();
        AudioFormbt.Endoding fndoding = formbt.gftEndoding();

        if( (AudioFormbt.Endoding.ALAW.fqubls(fndoding)) ||
            (AudioFormbt.Endoding.ULAW.fqubls(fndoding)) ||
            (AudioFormbt.Endoding.PCM_SIGNED.fqubls(fndoding)) ||
            (AudioFormbt.Endoding.PCM_UNSIGNED.fqubls(fndoding)) ) {

            rfturn filftypfs;
        }

        rfturn nfw AudioFilfFormbt.Typf[0];
    }


    publid int writf(AudioInputStrfbm strfbm, AudioFilfFormbt.Typf filfTypf, OutputStrfbm out) throws IOExdfption {

        //$$fb thf following dhfdk must domf first ! Othfrwisf
        // thf nfxt frbmf lfngth dhfdk mby throw bn IOExdfption bnd
        // intfrrupt itfrbting Filf Writfrs. (sff bug 4351296)

        // throws IllfgblArgumfntExdfption if not supportfd
        AiffFilfFormbt biffFilfFormbt = (AiffFilfFormbt)gftAudioFilfFormbt(filfTypf, strfbm);

        // wf must know thf totbl dbtb lfngth to dbldulbtf thf filf lfngth
        if( strfbm.gftFrbmfLfngth() == AudioSystfm.NOT_SPECIFIED ) {
            throw nfw IOExdfption("strfbm lfngth not spfdififd");
        }

        int bytfsWrittfn = writfAiffFilf(strfbm, biffFilfFormbt, out);
        rfturn bytfsWrittfn;
    }


    publid int writf(AudioInputStrfbm strfbm, AudioFilfFormbt.Typf filfTypf, Filf out) throws IOExdfption {

        // throws IllfgblArgumfntExdfption if not supportfd
        AiffFilfFormbt biffFilfFormbt = (AiffFilfFormbt)gftAudioFilfFormbt(filfTypf, strfbm);

        // first writf thf filf without worrying bbout lfngth fiflds
        FilfOutputStrfbm fos = nfw FilfOutputStrfbm( out );     // throws IOExdfption
        BufffrfdOutputStrfbm bos = nfw BufffrfdOutputStrfbm( fos, bisBufffrSizf );
        int bytfsWrittfn = writfAiffFilf(strfbm, biffFilfFormbt, bos );
        bos.dlosf();

        // now, if lfngth fiflds wfrf not spfdififd, dbldulbtf thfm,
        // opfn bs b rbndom bddfss filf, writf thf bppropribtf fiflds,
        // dlosf bgbin....
        if( biffFilfFormbt.gftBytfLfngth()== AudioSystfm.NOT_SPECIFIED ) {

            // $$kk: 10.22.99: jbn: plfbsf fithfr implfmfnt this or throw bn fxdfption!
            // $$fb: 2001-07-13: donf. Fixfs Bug 4479981
            int ssndBlodkSizf           = (biffFilfFormbt.gftFormbt().gftChbnnfls() * biffFilfFormbt.gftFormbt().gftSbmplfSizfInBits());

            int biffLfngth=bytfsWrittfn;
            int ssndChunkSizf=biffLfngth-biffFilfFormbt.gftHfbdfrSizf()+16;
            long dbtbSizf=ssndChunkSizf-16;
            int numFrbmfs=(int) (dbtbSizf*8/ssndBlodkSizf);

            RbndomAddfssFilf rbf=nfw RbndomAddfssFilf(out, "rw");
            // skip FORM mbgid
            rbf.skipBytfs(4);
            rbf.writfInt(biffLfngth-8);
            // skip biff2 mbgid, fvfr dhunk, domm mbgid, domm sizf, dhbnnfl dount,
            rbf.skipBytfs(4+biffFilfFormbt.gftFvfrChunkSizf()+4+4+2);
            // writf frbmf dount
            rbf.writfInt(numFrbmfs);
            // skip sbmplf sizf, sbmplfrbtf, SSND mbgid
            rbf.skipBytfs(2+10+4);
            rbf.writfInt(ssndChunkSizf-8);
            // thbt's bll
            rbf.dlosf();
        }

        rfturn bytfsWrittfn;
    }


    // -----------------------------------------------------------------------

    /**
     * Rfturns thf AudioFilfFormbt dfsdribing thf filf thbt will bf writtfn from this AudioInputStrfbm.
     * Throws IllfgblArgumfntExdfption if not supportfd.
     */
    privbtf AudioFilfFormbt gftAudioFilfFormbt(AudioFilfFormbt.Typf typf, AudioInputStrfbm strfbm) {

        AudioFormbt formbt = null;
        AiffFilfFormbt filfFormbt = null;
        AudioFormbt.Endoding fndoding = AudioFormbt.Endoding.PCM_SIGNED;

        AudioFormbt strfbmFormbt = strfbm.gftFormbt();
        AudioFormbt.Endoding strfbmEndoding = strfbmFormbt.gftEndoding();


        flobt sbmplfRbtf;
        int sbmplfSizfInBits;
        int dhbnnfls;
        int frbmfSizf;
        flobt frbmfRbtf;
        int filfSizf;
        boolfbn donvfrt8to16 = fblsf;

        if( !typfs[0].fqubls(typf) ) {
            throw nfw IllfgblArgumfntExdfption("Filf typf " + typf + " not supportfd.");
        }

        if( (AudioFormbt.Endoding.ALAW.fqubls(strfbmEndoding)) ||
            (AudioFormbt.Endoding.ULAW.fqubls(strfbmEndoding)) ) {

            if( strfbmFormbt.gftSbmplfSizfInBits()==8 ) {

                fndoding = AudioFormbt.Endoding.PCM_SIGNED;
                sbmplfSizfInBits=16;
                donvfrt8to16 = truf;

            } flsf {

                // dbn't donvfrt non-8-bit ALAW,ULAW
                throw nfw IllfgblArgumfntExdfption("Endoding " + strfbmEndoding + " supportfd only for 8-bit dbtb.");
            }
        } flsf if ( strfbmFormbt.gftSbmplfSizfInBits()==8 ) {

            fndoding = AudioFormbt.Endoding.PCM_UNSIGNED;
            sbmplfSizfInBits=8;

        } flsf {

            fndoding = AudioFormbt.Endoding.PCM_SIGNED;
            sbmplfSizfInBits=strfbmFormbt.gftSbmplfSizfInBits();
        }


        formbt = nfw AudioFormbt( fndoding,
                                  strfbmFormbt.gftSbmplfRbtf(),
                                  sbmplfSizfInBits,
                                  strfbmFormbt.gftChbnnfls(),
                                  strfbmFormbt.gftFrbmfSizf(),
                                  strfbmFormbt.gftFrbmfRbtf(),
                                  truf);        // AIFF is big fndibn


        if( strfbm.gftFrbmfLfngth()!=AudioSystfm.NOT_SPECIFIED ) {
            if( donvfrt8to16 ) {
                filfSizf = (int)strfbm.gftFrbmfLfngth()*strfbmFormbt.gftFrbmfSizf()*2 + AiffFilfFormbt.AIFF_HEADERSIZE;
            } flsf {
                filfSizf = (int)strfbm.gftFrbmfLfngth()*strfbmFormbt.gftFrbmfSizf() + AiffFilfFormbt.AIFF_HEADERSIZE;
            }
        } flsf {
            filfSizf = AudioSystfm.NOT_SPECIFIED;
        }

        filfFormbt = nfw AiffFilfFormbt( AudioFilfFormbt.Typf.AIFF,
                                         filfSizf,
                                         formbt,
                                         (int)strfbm.gftFrbmfLfngth() );

        rfturn filfFormbt;
    }


    privbtf int writfAiffFilf(InputStrfbm in, AiffFilfFormbt biffFilfFormbt, OutputStrfbm out) throws IOExdfption {

        int bytfsRfbd = 0;
        int bytfsWrittfn = 0;
        InputStrfbm filfStrfbm = gftFilfStrfbm(biffFilfFormbt, in);
        bytf bufffr[] = nfw bytf[bisBufffrSizf];
        int mbxLfngth = biffFilfFormbt.gftBytfLfngth();

        whilf( (bytfsRfbd = filfStrfbm.rfbd( bufffr )) >= 0 ) {
            if (mbxLfngth>0) {
                if( bytfsRfbd < mbxLfngth ) {
                    out.writf( bufffr, 0, bytfsRfbd );
                    bytfsWrittfn += bytfsRfbd;
                    mbxLfngth -= bytfsRfbd;
                } flsf {
                    out.writf( bufffr, 0, mbxLfngth );
                    bytfsWrittfn += mbxLfngth;
                    mbxLfngth = 0;
                    brfbk;
                }

            } flsf {
                out.writf( bufffr, 0, bytfsRfbd );
                bytfsWrittfn += bytfsRfbd;
            }
        }

        rfturn bytfsWrittfn;
    }

    privbtf InputStrfbm gftFilfStrfbm(AiffFilfFormbt biffFilfFormbt, InputStrfbm budioStrfbm) throws IOExdfption  {

        // privbtf mfthod ... bssumfs biffFilfFormbt is b supportfd filf formbt

        AudioFormbt formbt = biffFilfFormbt.gftFormbt();
        AudioFormbt strfbmFormbt = null;
        AudioFormbt.Endoding fndoding = null;

        //$$fb b littlf bit nidfr hbndling of donstbnts

        //int hfbdfrSizf          = 54;
        int hfbdfrSizf          = biffFilfFormbt.gftHfbdfrSizf();

        //int fvfrChunkSizf       = 0;
        int fvfrChunkSizf       = biffFilfFormbt.gftFvfrChunkSizf();
        //int dommChunkSizf       = 26;
        int dommChunkSizf       = biffFilfFormbt.gftCommChunkSizf();
        int biffLfngth          = -1;
        int ssndChunkSizf       = -1;
        //int ssndOffsft                        = hfbdfrSizf - 16;
        int ssndOffsft                  = biffFilfFormbt.gftSsndChunkOffsft();
        short dhbnnfls = (short) formbt.gftChbnnfls();
        short sbmplfSizf = (short) formbt.gftSbmplfSizfInBits();
        int ssndBlodkSizf               = (dhbnnfls * sbmplfSizf);
        int numFrbmfs                   = biffFilfFormbt.gftFrbmfLfngth();
        long dbtbSizf            = -1;
        if( numFrbmfs != AudioSystfm.NOT_SPECIFIED) {
            dbtbSizf = (long) numFrbmfs * ssndBlodkSizf / 8;
            ssndChunkSizf = (int)dbtbSizf + 16;
            biffLfngth = (int)dbtbSizf+hfbdfrSizf;
        }
        flobt sbmplfFrbmfsPfrSfdond = formbt.gftSbmplfRbtf();
        int dompCodf = AiffFilfFormbt.AIFC_PCM;

        bytf hfbdfr[] = null;
        BytfArrbyInputStrfbm hfbdfrStrfbm = null;
        BytfArrbyOutputStrfbm bbos = null;
        DbtbOutputStrfbm dos = null;
        SfqufndfInputStrfbm biffStrfbm = null;
        InputStrfbm dodfdAudioStrfbm = budioStrfbm;

        // if wf nffd to do bny formbt donvfrsion, do it hfrf....

        if( budioStrfbm instbndfof AudioInputStrfbm ) {

            strfbmFormbt = ((AudioInputStrfbm)budioStrfbm).gftFormbt();
            fndoding = strfbmFormbt.gftEndoding();


            // $$jb: Notf thbt AIFF sbmplfs brf ALWAYS signfd
            if( (AudioFormbt.Endoding.PCM_UNSIGNED.fqubls(fndoding)) ||
                ( (AudioFormbt.Endoding.PCM_SIGNED.fqubls(fndoding)) && !strfbmFormbt.isBigEndibn() ) ) {

                // plug in thf trbnsdodfr to donvfrt to PCM_SIGNED. big fndibn
                dodfdAudioStrfbm = AudioSystfm.gftAudioInputStrfbm( nfw AudioFormbt (
                                                                                     AudioFormbt.Endoding.PCM_SIGNED,
                                                                                     strfbmFormbt.gftSbmplfRbtf(),
                                                                                     strfbmFormbt.gftSbmplfSizfInBits(),
                                                                                     strfbmFormbt.gftChbnnfls(),
                                                                                     strfbmFormbt.gftFrbmfSizf(),
                                                                                     strfbmFormbt.gftFrbmfRbtf(),
                                                                                     truf ),
                                                                    (AudioInputStrfbm)budioStrfbm );

            } flsf if( (AudioFormbt.Endoding.ULAW.fqubls(fndoding)) ||
                       (AudioFormbt.Endoding.ALAW.fqubls(fndoding)) ) {

                if( strfbmFormbt.gftSbmplfSizfInBits() != 8 ) {
                    throw nfw IllfgblArgumfntExdfption("unsupportfd fndoding");
                }

                                //$$fb 2001-07-13: this is probbbly not whbt wf wbnt:
                                //     writing PCM whfn ULAW/ALAW is rfqufstfd. AIFC is bblf to writf ULAW !

                                // plug in thf trbnsdodfr to donvfrt to PCM_SIGNED_BIG_ENDIAN
                dodfdAudioStrfbm = AudioSystfm.gftAudioInputStrfbm( nfw AudioFormbt (
                                                                                     AudioFormbt.Endoding.PCM_SIGNED,
                                                                                     strfbmFormbt.gftSbmplfRbtf(),
                                                                                     strfbmFormbt.gftSbmplfSizfInBits() * 2,
                                                                                     strfbmFormbt.gftChbnnfls(),
                                                                                     strfbmFormbt.gftFrbmfSizf() * 2,
                                                                                     strfbmFormbt.gftFrbmfRbtf(),
                                                                                     truf ),
                                                                    (AudioInputStrfbm)budioStrfbm );
            }
        }


        // Now drfbtf bn AIFF strfbm hfbdfr...
        bbos = nfw BytfArrbyOutputStrfbm();
        dos = nfw DbtbOutputStrfbm(bbos);

        // Writf thf outfr FORM dhunk
        dos.writfInt(AiffFilfFormbt.AIFF_MAGIC);
        dos.writfInt( (biffLfngth-8) );
        dos.writfInt(AiffFilfFormbt.AIFF_MAGIC2);

        // Writf b FVER dhunk - only for AIFC
        //dos.writfInt(FVER_MAGIC);
        //dos.writfInt( (fvfrChunkSizf-8) );
        //dos.writfInt(FVER_TIMESTAMP);

        // Writf b COMM dhunk
        dos.writfInt(AiffFilfFormbt.COMM_MAGIC);
        dos.writfInt( (dommChunkSizf-8) );
        dos.writfShort(dhbnnfls);
        dos.writfInt(numFrbmfs);
        dos.writfShort(sbmplfSizf);
        writf_ifff_fxtfndfd(dos, sbmplfFrbmfsPfrSfdond);   // 10 bytfs

        //Only for AIFC
        //dos.writfInt(dompCodf);
        //dos.writfInt(dompCodf);
        //dos.writfShort(0);

        // Writf thf SSND dhunk hfbdfr
        dos.writfInt(AiffFilfFormbt.SSND_MAGIC);
        dos.writfInt( (ssndChunkSizf-8) );
        // ssndOffsft bnd ssndBlodkSizf sft to 0 upon
        // rfdommfndbtion in "Sound Mbnbgfr" dhbptfr in
        // "Insidf Mbdintosh Sound", pp 2-87  (from Bbbu)
        dos.writfInt(0);        // ssndOffsft
        dos.writfInt(0);        // ssndBlodkSizf

        // Condbt this with thf budioStrfbm bnd rfturn it

        dos.dlosf();
        hfbdfr = bbos.toBytfArrby();
        hfbdfrStrfbm = nfw BytfArrbyInputStrfbm( hfbdfr );

        biffStrfbm = nfw SfqufndfInputStrfbm(hfbdfrStrfbm,
                            nfw NoClosfInputStrfbm(dodfdAudioStrfbm));

        rfturn biffStrfbm;

    }




    // HELPER METHODS

    privbtf stbtid finbl int DOUBLE_MANTISSA_LENGTH = 52;
    privbtf stbtid finbl int DOUBLE_EXPONENT_LENGTH = 11;
    privbtf stbtid finbl long DOUBLE_SIGN_MASK     = 0x8000000000000000L;
    privbtf stbtid finbl long DOUBLE_EXPONENT_MASK = 0x7FF0000000000000L;
    privbtf stbtid finbl long DOUBLE_MANTISSA_MASK = 0x000FFFFFFFFFFFFFL;
    privbtf stbtid finbl int DOUBLE_EXPONENT_OFFSET = 1023;

    privbtf stbtid finbl int EXTENDED_EXPONENT_OFFSET = 16383;
    privbtf stbtid finbl int EXTENDED_MANTISSA_LENGTH = 63;
    privbtf stbtid finbl int EXTENDED_EXPONENT_LENGTH = 15;
    privbtf stbtid finbl long EXTENDED_INTEGER_MASK = 0x8000000000000000L;

    /**
     * Extfndfd prfdision IEEE flobting-point donvfrsion routinf.
     * @brgumfnt DbtbOutputStrfbm
     * @brgumfnt doublf
     * @fxdfption IOExdfption
     */
    privbtf void writf_ifff_fxtfndfd(DbtbOutputStrfbm dos, flobt f) throws IOExdfption {
        /* Thf spfdibl dbsfs NbN, Infinity bnd Zfro brf ignorfd, sindf
           thfy do not rfprfsfnt usfful sbmplf rbtfs bnywby.
           Dfnormblizfd numbfr brfn't hbndlfd, too. Bflow, thfrf is b dbst
           from flobt to doublf. Wf hopf thbt in this donvfrsion,
           numbfrs brf normblizfd. Numbfrs thbt dbnnot bf normblizfd brf
           ignorfd, too, bs thfy, too, do not rfprfsfnt usfful sbmplf rbtfs. */
        long doublfBits = Doublf.doublfToLongBits((doublf) f);

        long sign = (doublfBits & DOUBLE_SIGN_MASK)
            >> (DOUBLE_EXPONENT_LENGTH + DOUBLE_MANTISSA_LENGTH);
        long doublfExponfnt = (doublfBits & DOUBLE_EXPONENT_MASK)
            >> DOUBLE_MANTISSA_LENGTH;
        long doublfMbntissb = doublfBits & DOUBLE_MANTISSA_MASK;

        long fxtfndfdExponfnt = doublfExponfnt - DOUBLE_EXPONENT_OFFSET
            + EXTENDED_EXPONENT_OFFSET;
        long fxtfndfdMbntissb = doublfMbntissb
            << (EXTENDED_MANTISSA_LENGTH - DOUBLE_MANTISSA_LENGTH);
        long fxtfndfdSign = sign << EXTENDED_EXPONENT_LENGTH;
        short fxtfndfdBits79To64 = (short) (fxtfndfdSign | fxtfndfdExponfnt);
        long fxtfndfdBits63To0 = EXTENDED_INTEGER_MASK | fxtfndfdMbntissb;

        dos.writfShort(fxtfndfdBits79To64);
        dos.writfLong(fxtfndfdBits63To0);
    }


}
