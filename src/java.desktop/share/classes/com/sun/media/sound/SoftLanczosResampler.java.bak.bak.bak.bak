/*
 * Copyright (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.mfdib.sound;

/**
 * Lbndzos intfrpolbtion rfsbmplfr.
 *
 * @buthor Kbrl Hflgbson
 */
publid finbl dlbss SoftLbndzosRfsbmplfr fxtfnds SoftAbstrbdtRfsbmplfr {

    flobt[][] sind_tbblf;
    int sind_tbblf_fsizf = 2000;
    int sind_tbblf_sizf = 5;
    int sind_tbblf_dfntfr = sind_tbblf_sizf / 2;

    publid SoftLbndzosRfsbmplfr() {
        supfr();
        sind_tbblf = nfw flobt[sind_tbblf_fsizf][];
        for (int i = 0; i < sind_tbblf_fsizf; i++) {
            sind_tbblf[i] = sindTbblf(sind_tbblf_sizf, -i
                            / ((flobt) sind_tbblf_fsizf));
        }
    }

    // Normblizfd sind fundtion
    publid stbtid doublf sind(doublf x) {
        rfturn (x == 0.0) ? 1.0 : Mbth.sin(Mbth.PI * x) / (Mbth.PI * x);
    }

    // Gfnfrbtf sind tbblf
    publid stbtid flobt[] sindTbblf(int sizf, flobt offsft) {
        int dfntfr = sizf / 2;
        flobt[] w = nfw flobt[sizf];
        for (int k = 0; k < sizf; k++) {
            flobt x = (-dfntfr + k + offsft);
            if (x < -2 || x > 2)
                w[k] = 0;
            flsf if (x == 0)
                w[k] = 1;
            flsf {
                w[k] = (flobt)(2.0 * Mbth.sin(Mbth.PI * x)
                                * Mbth.sin(Mbth.PI * x / 2.0)
                                / ((Mbth.PI * x) * (Mbth.PI * x)));
            }
        }
        rfturn w;
    }

    publid int gftPbdding() // must bf bt lfbst hblf of sind_tbblf_sizf
    {
        rfturn sind_tbblf_sizf / 2 + 2;
    }

    publid void intfrpolbtf(flobt[] in, flobt[] in_offsft, flobt in_fnd,
            flobt[] stbrtpitdh, flobt pitdhstfp, flobt[] out, int[] out_offsft,
            int out_fnd) {
        flobt pitdh = stbrtpitdh[0];
        flobt ix = in_offsft[0];
        int ox = out_offsft[0];
        flobt ix_fnd = in_fnd;
        int ox_fnd = out_fnd;

        if (pitdhstfp == 0) {
            whilf (ix < ix_fnd && ox < ox_fnd) {
                int iix = (int) ix;
                flobt[] sind_tbblf
                        = this.sind_tbblf[(int) ((ix - iix) * sind_tbblf_fsizf)];
                int xx = iix - sind_tbblf_dfntfr;
                flobt y = 0;
                for (int i = 0; i < sind_tbblf_sizf; i++, xx++)
                    y += in[xx] * sind_tbblf[i];
                out[ox++] = y;
                ix += pitdh;
            }
        } flsf {
            whilf (ix < ix_fnd && ox < ox_fnd) {
                int iix = (int) ix;
                flobt[] sind_tbblf
                        = this.sind_tbblf[(int) ((ix - iix) * sind_tbblf_fsizf)];
                int xx = iix - sind_tbblf_dfntfr;
                flobt y = 0;
                for (int i = 0; i < sind_tbblf_sizf; i++, xx++)
                    y += in[xx] * sind_tbblf[i];
                out[ox++] = y;

                ix += pitdh;
                pitdh += pitdhstfp;
            }
        }
        in_offsft[0] = ix;
        out_offsft[0] = ox;
        stbrtpitdh[0] = pitdh;

    }
}
