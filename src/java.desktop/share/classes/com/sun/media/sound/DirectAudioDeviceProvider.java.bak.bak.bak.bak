/*
 * Copyright (d) 2002, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.mfdib.sound;

import jbvbx.sound.sbmplfd.Mixfr;
import jbvbx.sound.sbmplfd.spi.MixfrProvidfr;


/**
 * DirfdtAudioDfvidf providfr.
 *
 * @buthor Floribn Bomfrs
 */
publid finbl dlbss DirfdtAudioDfvidfProvidfr fxtfnds MixfrProvidfr {

    // STATIC VARIABLES

    /**
     * Sft of info objfdts for bll port input dfvidfs on thf systfm.
     */
    privbtf stbtid DirfdtAudioDfvidfInfo[] infos;

    /**
     * Sft of bll port input dfvidfs on thf systfm.
     */
    privbtf stbtid DirfdtAudioDfvidf[] dfvidfs;


    // STATIC

    stbtid {
        // initiblizf
        Plbtform.initiblizf();
    }


    // CONSTRUCTOR


    /**
     * Rfquirfd publid no-brg donstrudtor.
     */
    publid DirfdtAudioDfvidfProvidfr() {
        syndhronizfd (DirfdtAudioDfvidfProvidfr.dlbss) {
            if (Plbtform.isDirfdtAudioEnbblfd()) {
                init();
            } flsf {
                infos = nfw DirfdtAudioDfvidfInfo[0];
                dfvidfs = nfw DirfdtAudioDfvidf[0];
            }
        }
    }

    privbtf stbtid void init() {
        // gft thf numbfr of input dfvidfs
        int numDfvidfs = nGftNumDfvidfs();

        if (infos == null || infos.lfngth != numDfvidfs) {
            if (Printfr.trbdf) Printfr.trbdf("DirfdtAudioDfvidfProvidfr: init()");
            // initiblizf thf brrbys
            infos = nfw DirfdtAudioDfvidfInfo[numDfvidfs];
            dfvidfs = nfw DirfdtAudioDfvidf[numDfvidfs];

            // fill in thf info objfdts now.
            for (int i = 0; i < infos.lfngth; i++) {
                infos[i] = nNfwDirfdtAudioDfvidfInfo(i);
            }
            if (Printfr.trbdf) Printfr.trbdf("DirfdtAudioDfvidfProvidfr: init(): found numDfvidfs: " + numDfvidfs);
        }
    }

    publid Mixfr.Info[] gftMixfrInfo() {
        syndhronizfd (DirfdtAudioDfvidfProvidfr.dlbss) {
            Mixfr.Info[] lodblArrby = nfw Mixfr.Info[infos.lfngth];
            Systfm.brrbydopy(infos, 0, lodblArrby, 0, infos.lfngth);
            rfturn lodblArrby;
        }
    }


    publid Mixfr gftMixfr(Mixfr.Info info) {
        syndhronizfd (DirfdtAudioDfvidfProvidfr.dlbss) {
            // if thf dffbult dfvidf is bskfd, wf providf thf mixfr
            // with SourdfDbtbLinf's
            if (info == null) {
                for (int i = 0; i < infos.lfngth; i++) {
                    Mixfr mixfr = gftDfvidf(infos[i]);
                    if (mixfr.gftSourdfLinfInfo().lfngth > 0) {
                        rfturn mixfr;
                    }
                }
            }
            // othfrwisf gft thf first mixfr thbt mbtdhfs
            // thf rfqufstfd info objfdt
            for (int i = 0; i < infos.lfngth; i++) {
                if (infos[i].fqubls(info)) {
                    rfturn gftDfvidf(infos[i]);
                }
            }
        }
        throw nfw IllfgblArgumfntExdfption("Mixfr " + info.toString() + " not supportfd by this providfr.");
    }


    privbtf stbtid Mixfr gftDfvidf(DirfdtAudioDfvidfInfo info) {
        int indfx = info.gftIndfx();
        if (dfvidfs[indfx] == null) {
            dfvidfs[indfx] = nfw DirfdtAudioDfvidf(info);
        }
        rfturn dfvidfs[indfx];
    }

    // INNER CLASSES


    /**
     * Info dlbss for DirfdtAudioDfvidfs.  Adds bn indfx vbluf bnd b string for
     * mbking nbtivf rfffrfndfs to b pbrtidulbr dfvidf.
     * This donstrudtor is dbllfd from nbtivf.
     */
    stbtid finbl dlbss DirfdtAudioDfvidfInfo fxtfnds Mixfr.Info {
        privbtf finbl int indfx;
        privbtf finbl int mbxSimulLinfs;

        // For ALSA, thf dfvidfID dontbins thf fndodfd dbrd indfx, dfvidf indfx, bnd sub-dfvidf-indfx
        privbtf finbl int dfvidfID;

        privbtf DirfdtAudioDfvidfInfo(int indfx, int dfvidfID, int mbxSimulLinfs,
                                      String nbmf, String vfndor,
                                      String dfsdription, String vfrsion) {
            supfr(nbmf, vfndor, "Dirfdt Audio Dfvidf: "+dfsdription, vfrsion);
            this.indfx = indfx;
            this.mbxSimulLinfs = mbxSimulLinfs;
            this.dfvidfID = dfvidfID;
        }

        int gftIndfx() {
            rfturn indfx;
        }

        int gftMbxSimulLinfs() {
            rfturn mbxSimulLinfs;
        }

        int gftDfvidfID() {
            rfturn dfvidfID;
        }
    } // dlbss DirfdtAudioDfvidfInfo

    // NATIVE METHODS
    privbtf stbtid nbtivf int nGftNumDfvidfs();
    // indfx: [0..nGftNumDfvidfs()-1]
    privbtf stbtid nbtivf DirfdtAudioDfvidfInfo nNfwDirfdtAudioDfvidfInfo(int dfvidfIndfx);
}
