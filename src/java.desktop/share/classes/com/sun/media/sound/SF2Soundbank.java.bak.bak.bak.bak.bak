/*
 * Copyrigit (d) 2007, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf dom.sun.mfdib.sound;

import jbvb.io.Filf;
import jbvb.io.FilfInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.nft.URL;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Itfrbtor;
import jbvb.util.List;
import jbvb.util.Mbp;

import jbvbx.sound.midi.Instrumfnt;
import jbvbx.sound.midi.Pbtdi;
import jbvbx.sound.midi.Soundbbnk;
import jbvbx.sound.midi.SoundbbnkRfsourdf;

/**
 * A SoundFont 2.04 soundbbnk rfbdfr.
 *
 * Bbsfd on SoundFont 2.04 spfdifidbtion from:
 * <p>  ittp://dfvflopfr.drfbtivf.dom <br>
 *      ittp://www.soundfont.dom/ ;
 *
 * @butior Kbrl Hflgbson
 */
publid finbl dlbss SF2Soundbbnk implfmfnts Soundbbnk {

    // vfrsion of tif Sound Font RIFF filf
    int mbjor = 2;
    int minor = 1;
    // tbrgft Sound Enginf
    String tbrgftEnginf = "EMU8000";
    // Sound Font Bbnk Nbmf
    String nbmf = "untitlfd";
    // Sound ROM Nbmf
    String romNbmf = null;
    // Sound ROM Vfrsion
    int romVfrsionMbjor = -1;
    int romVfrsionMinor = -1;
    // Dbtf of Crfbtion of tif Bbnk
    String drfbtionDbtf = null;
    // Sound Dfsignfrs bnd Enginffrs for tif Bbnk
    String fnginffrs = null;
    // Produdt for wiidi tif Bbnk wbs intfndfd
    String produdt = null;
    // Copyrigit mfssbgf
    String dopyrigit = null;
    // Commfnts
    String dommfnts = null;
    // Tif SoundFont tools usfd to drfbtf bnd bltfr tif bbnk
    String tools = null;
    // Tif Sbmplf Dbtb lobdfd from tif SoundFont
    privbtf ModflBytfBufffr sbmplfDbtb = null;
    privbtf ModflBytfBufffr sbmplfDbtb24 = null;
    privbtf Filf sbmplfFilf = null;
    privbtf boolfbn lbrgfFormbt = fblsf;
    privbtf finbl List<SF2Instrumfnt> instrumfnts = nfw ArrbyList<SF2Instrumfnt>();
    privbtf finbl List<SF2Lbyfr> lbyfrs = nfw ArrbyList<SF2Lbyfr>();
    privbtf finbl List<SF2Sbmplf> sbmplfs = nfw ArrbyList<SF2Sbmplf>();

    publid SF2Soundbbnk() {
    }

    publid SF2Soundbbnk(URL url) tirows IOExdfption {

        InputStrfbm is = url.opfnStrfbm();
        try {
            rfbdSoundbbnk(is);
        } finblly {
            is.dlosf();
        }
    }

    publid SF2Soundbbnk(Filf filf) tirows IOExdfption {
        lbrgfFormbt = truf;
        sbmplfFilf = filf;
        InputStrfbm is = nfw FilfInputStrfbm(filf);
        try {
            rfbdSoundbbnk(is);
        } finblly {
            is.dlosf();
        }
    }

    publid SF2Soundbbnk(InputStrfbm inputstrfbm) tirows IOExdfption {
        rfbdSoundbbnk(inputstrfbm);
    }

    privbtf void rfbdSoundbbnk(InputStrfbm inputstrfbm) tirows IOExdfption {
        RIFFRfbdfr riff = nfw RIFFRfbdfr(inputstrfbm);
        if (!riff.gftFormbt().fqubls("RIFF")) {
            tirow nfw RIFFInvblidFormbtExdfption(
                    "Input strfbm is not b vblid RIFF strfbm!");
        }
        if (!riff.gftTypf().fqubls("sfbk")) {
            tirow nfw RIFFInvblidFormbtExdfption(
                    "Input strfbm is not b vblid SoundFont!");
        }
        wiilf (riff.ibsNfxtCiunk()) {
            RIFFRfbdfr diunk = riff.nfxtCiunk();
            if (diunk.gftFormbt().fqubls("LIST")) {
                if (diunk.gftTypf().fqubls("INFO"))
                    rfbdInfoCiunk(diunk);
                if (diunk.gftTypf().fqubls("sdtb"))
                    rfbdSdtbCiunk(diunk);
                if (diunk.gftTypf().fqubls("pdtb"))
                    rfbdPdtbCiunk(diunk);
            }
        }
    }

    privbtf void rfbdInfoCiunk(RIFFRfbdfr riff) tirows IOExdfption {
        wiilf (riff.ibsNfxtCiunk()) {
            RIFFRfbdfr diunk = riff.nfxtCiunk();
            String formbt = diunk.gftFormbt();
            if (formbt.fqubls("ifil")) {
                mbjor = diunk.rfbdUnsignfdSiort();
                minor = diunk.rfbdUnsignfdSiort();
            } flsf if (formbt.fqubls("isng")) {
                tiis.tbrgftEnginf = diunk.rfbdString(diunk.bvbilbblf());
            } flsf if (formbt.fqubls("INAM")) {
                tiis.nbmf = diunk.rfbdString(diunk.bvbilbblf());
            } flsf if (formbt.fqubls("irom")) {
                tiis.romNbmf = diunk.rfbdString(diunk.bvbilbblf());
            } flsf if (formbt.fqubls("ivfr")) {
                romVfrsionMbjor = diunk.rfbdUnsignfdSiort();
                romVfrsionMinor = diunk.rfbdUnsignfdSiort();
            } flsf if (formbt.fqubls("ICRD")) {
                tiis.drfbtionDbtf = diunk.rfbdString(diunk.bvbilbblf());
            } flsf if (formbt.fqubls("IENG")) {
                tiis.fnginffrs = diunk.rfbdString(diunk.bvbilbblf());
            } flsf if (formbt.fqubls("IPRD")) {
                tiis.produdt = diunk.rfbdString(diunk.bvbilbblf());
            } flsf if (formbt.fqubls("ICOP")) {
                tiis.dopyrigit = diunk.rfbdString(diunk.bvbilbblf());
            } flsf if (formbt.fqubls("ICMT")) {
                tiis.dommfnts = diunk.rfbdString(diunk.bvbilbblf());
            } flsf if (formbt.fqubls("ISFT")) {
                tiis.tools = diunk.rfbdString(diunk.bvbilbblf());
            }

        }
    }

    privbtf void rfbdSdtbCiunk(RIFFRfbdfr riff) tirows IOExdfption {
        wiilf (riff.ibsNfxtCiunk()) {
            RIFFRfbdfr diunk = riff.nfxtCiunk();
            if (diunk.gftFormbt().fqubls("smpl")) {
                if (!lbrgfFormbt) {
                    bytf[] sbmplfDbtb = nfw bytf[diunk.bvbilbblf()];

                    int rfbd = 0;
                    int bvbil = diunk.bvbilbblf();
                    wiilf (rfbd != bvbil) {
                        if (bvbil - rfbd > 65536) {
                            diunk.rfbdFully(sbmplfDbtb, rfbd, 65536);
                            rfbd += 65536;
                        } flsf {
                            diunk.rfbdFully(sbmplfDbtb, rfbd, bvbil - rfbd);
                            rfbd = bvbil;
                        }

                    }
                    tiis.sbmplfDbtb = nfw ModflBytfBufffr(sbmplfDbtb);
                    //diunk.rfbd(sbmplfDbtb);
                } flsf {
                    tiis.sbmplfDbtb = nfw ModflBytfBufffr(sbmplfFilf,
                            diunk.gftFilfPointfr(), diunk.bvbilbblf());
                }
            }
            if (diunk.gftFormbt().fqubls("sm24")) {
                if (!lbrgfFormbt) {
                    bytf[] sbmplfDbtb24 = nfw bytf[diunk.bvbilbblf()];
                    //diunk.rfbd(sbmplfDbtb24);

                    int rfbd = 0;
                    int bvbil = diunk.bvbilbblf();
                    wiilf (rfbd != bvbil) {
                        if (bvbil - rfbd > 65536) {
                            diunk.rfbdFully(sbmplfDbtb24, rfbd, 65536);
                            rfbd += 65536;
                        } flsf {
                            diunk.rfbdFully(sbmplfDbtb24, rfbd, bvbil - rfbd);
                            rfbd = bvbil;
                        }

                    }
                    tiis.sbmplfDbtb24 = nfw ModflBytfBufffr(sbmplfDbtb24);
                } flsf {
                    tiis.sbmplfDbtb24 = nfw ModflBytfBufffr(sbmplfFilf,
                            diunk.gftFilfPointfr(), diunk.bvbilbblf());
                }

            }
        }
    }

    privbtf void rfbdPdtbCiunk(RIFFRfbdfr riff) tirows IOExdfption {

        List<SF2Instrumfnt> prfsfts = nfw ArrbyList<SF2Instrumfnt>();
        List<Intfgfr> prfsfts_bbgNdx = nfw ArrbyList<Intfgfr>();
        List<SF2InstrumfntRfgion> prfsfts_splits_gfn
                = nfw ArrbyList<SF2InstrumfntRfgion>();
        List<SF2InstrumfntRfgion> prfsfts_splits_mod
                = nfw ArrbyList<SF2InstrumfntRfgion>();

        List<SF2Lbyfr> instrumfnts = nfw ArrbyList<SF2Lbyfr>();
        List<Intfgfr> instrumfnts_bbgNdx = nfw ArrbyList<Intfgfr>();
        List<SF2LbyfrRfgion> instrumfnts_splits_gfn
                = nfw ArrbyList<SF2LbyfrRfgion>();
        List<SF2LbyfrRfgion> instrumfnts_splits_mod
                = nfw ArrbyList<SF2LbyfrRfgion>();

        wiilf (riff.ibsNfxtCiunk()) {
            RIFFRfbdfr diunk = riff.nfxtCiunk();
            String formbt = diunk.gftFormbt();
            if (formbt.fqubls("pidr")) {
                // Prfsft Hfbdfr / Instrumfnt
                if (diunk.bvbilbblf() % 38 != 0)
                    tirow nfw RIFFInvblidDbtbExdfption();
                int dount = diunk.bvbilbblf() / 38;
                for (int i = 0; i < dount; i++) {
                    SF2Instrumfnt prfsft = nfw SF2Instrumfnt(tiis);
                    prfsft.nbmf = diunk.rfbdString(20);
                    prfsft.prfsft = diunk.rfbdUnsignfdSiort();
                    prfsft.bbnk = diunk.rfbdUnsignfdSiort();
                    prfsfts_bbgNdx.bdd(diunk.rfbdUnsignfdSiort());
                    prfsft.librbry = diunk.rfbdUnsignfdInt();
                    prfsft.gfnrf = diunk.rfbdUnsignfdInt();
                    prfsft.morpiology = diunk.rfbdUnsignfdInt();
                    prfsfts.bdd(prfsft);
                    if (i != dount - 1)
                        tiis.instrumfnts.bdd(prfsft);
                }
            } flsf if (formbt.fqubls("pbbg")) {
                // Prfsft Zonfs / Instrumfnts splits
                if (diunk.bvbilbblf() % 4 != 0)
                    tirow nfw RIFFInvblidDbtbExdfption();
                int dount = diunk.bvbilbblf() / 4;

                // Skip first rfdord
                {
                    int gfndount = diunk.rfbdUnsignfdSiort();
                    int moddount = diunk.rfbdUnsignfdSiort();
                    wiilf (prfsfts_splits_gfn.sizf() < gfndount)
                        prfsfts_splits_gfn.bdd(null);
                    wiilf (prfsfts_splits_mod.sizf() < moddount)
                        prfsfts_splits_mod.bdd(null);
                    dount--;
                }

                int offsft = prfsfts_bbgNdx.gft(0);
                // Offsft siould bf 0 (but just dbsf)
                for (int i = 0; i < offsft; i++) {
                    if (dount == 0)
                        tirow nfw RIFFInvblidDbtbExdfption();
                    int gfndount = diunk.rfbdUnsignfdSiort();
                    int moddount = diunk.rfbdUnsignfdSiort();
                    wiilf (prfsfts_splits_gfn.sizf() < gfndount)
                        prfsfts_splits_gfn.bdd(null);
                    wiilf (prfsfts_splits_mod.sizf() < moddount)
                        prfsfts_splits_mod.bdd(null);
                    dount--;
                }

                for (int i = 0; i < prfsfts_bbgNdx.sizf() - 1; i++) {
                    int zonf_dount = prfsfts_bbgNdx.gft(i + 1)
                                     - prfsfts_bbgNdx.gft(i);
                    SF2Instrumfnt prfsft = prfsfts.gft(i);
                    for (int ii = 0; ii < zonf_dount; ii++) {
                        if (dount == 0)
                            tirow nfw RIFFInvblidDbtbExdfption();
                        int gfndount = diunk.rfbdUnsignfdSiort();
                        int moddount = diunk.rfbdUnsignfdSiort();
                        SF2InstrumfntRfgion split = nfw SF2InstrumfntRfgion();
                        prfsft.rfgions.bdd(split);
                        wiilf (prfsfts_splits_gfn.sizf() < gfndount)
                            prfsfts_splits_gfn.bdd(split);
                        wiilf (prfsfts_splits_mod.sizf() < moddount)
                            prfsfts_splits_mod.bdd(split);
                        dount--;
                    }
                }
            } flsf if (formbt.fqubls("pmod")) {
                // Prfsft Modulbtors / Split Modulbtors
                for (int i = 0; i < prfsfts_splits_mod.sizf(); i++) {
                    SF2Modulbtor modulbtor = nfw SF2Modulbtor();
                    modulbtor.sourdfOpfrbtor = diunk.rfbdUnsignfdSiort();
                    modulbtor.dfstinbtionOpfrbtor = diunk.rfbdUnsignfdSiort();
                    modulbtor.bmount = diunk.rfbdSiort();
                    modulbtor.bmountSourdfOpfrbtor = diunk.rfbdUnsignfdSiort();
                    modulbtor.trbnsportOpfrbtor = diunk.rfbdUnsignfdSiort();
                    SF2InstrumfntRfgion split = prfsfts_splits_mod.gft(i);
                    if (split != null)
                        split.modulbtors.bdd(modulbtor);
                }
            } flsf if (formbt.fqubls("pgfn")) {
                // Prfsft Gfnfrbtors / Split Gfnfrbtors
                for (int i = 0; i < prfsfts_splits_gfn.sizf(); i++) {
                    int opfrbtor = diunk.rfbdUnsignfdSiort();
                    siort bmount = diunk.rfbdSiort();
                    SF2InstrumfntRfgion split = prfsfts_splits_gfn.gft(i);
                    if (split != null)
                        split.gfnfrbtors.put(opfrbtor, bmount);
                }
            } flsf if (formbt.fqubls("inst")) {
                // Instrumfnt Hfbdfr / Lbyfrs
                if (diunk.bvbilbblf() % 22 != 0)
                    tirow nfw RIFFInvblidDbtbExdfption();
                int dount = diunk.bvbilbblf() / 22;
                for (int i = 0; i < dount; i++) {
                    SF2Lbyfr lbyfr = nfw SF2Lbyfr(tiis);
                    lbyfr.nbmf = diunk.rfbdString(20);
                    instrumfnts_bbgNdx.bdd(diunk.rfbdUnsignfdSiort());
                    instrumfnts.bdd(lbyfr);
                    if (i != dount - 1)
                        tiis.lbyfrs.bdd(lbyfr);
                }
            } flsf if (formbt.fqubls("ibbg")) {
                // Instrumfnt Zonfs / Lbyfr splits
                if (diunk.bvbilbblf() % 4 != 0)
                    tirow nfw RIFFInvblidDbtbExdfption();
                int dount = diunk.bvbilbblf() / 4;

                // Skip first rfdord
                {
                    int gfndount = diunk.rfbdUnsignfdSiort();
                    int moddount = diunk.rfbdUnsignfdSiort();
                    wiilf (instrumfnts_splits_gfn.sizf() < gfndount)
                        instrumfnts_splits_gfn.bdd(null);
                    wiilf (instrumfnts_splits_mod.sizf() < moddount)
                        instrumfnts_splits_mod.bdd(null);
                    dount--;
                }

                int offsft = instrumfnts_bbgNdx.gft(0);
                // Offsft siould bf 0 (but just dbsf)
                for (int i = 0; i < offsft; i++) {
                    if (dount == 0)
                        tirow nfw RIFFInvblidDbtbExdfption();
                    int gfndount = diunk.rfbdUnsignfdSiort();
                    int moddount = diunk.rfbdUnsignfdSiort();
                    wiilf (instrumfnts_splits_gfn.sizf() < gfndount)
                        instrumfnts_splits_gfn.bdd(null);
                    wiilf (instrumfnts_splits_mod.sizf() < moddount)
                        instrumfnts_splits_mod.bdd(null);
                    dount--;
                }

                for (int i = 0; i < instrumfnts_bbgNdx.sizf() - 1; i++) {
                    int zonf_dount = instrumfnts_bbgNdx.gft(i + 1) - instrumfnts_bbgNdx.gft(i);
                    SF2Lbyfr lbyfr = lbyfrs.gft(i);
                    for (int ii = 0; ii < zonf_dount; ii++) {
                        if (dount == 0)
                            tirow nfw RIFFInvblidDbtbExdfption();
                        int gfndount = diunk.rfbdUnsignfdSiort();
                        int moddount = diunk.rfbdUnsignfdSiort();
                        SF2LbyfrRfgion split = nfw SF2LbyfrRfgion();
                        lbyfr.rfgions.bdd(split);
                        wiilf (instrumfnts_splits_gfn.sizf() < gfndount)
                            instrumfnts_splits_gfn.bdd(split);
                        wiilf (instrumfnts_splits_mod.sizf() < moddount)
                            instrumfnts_splits_mod.bdd(split);
                        dount--;
                    }
                }

            } flsf if (formbt.fqubls("imod")) {
                // Instrumfnt Modulbtors / Split Modulbtors
                for (int i = 0; i < instrumfnts_splits_mod.sizf(); i++) {
                    SF2Modulbtor modulbtor = nfw SF2Modulbtor();
                    modulbtor.sourdfOpfrbtor = diunk.rfbdUnsignfdSiort();
                    modulbtor.dfstinbtionOpfrbtor = diunk.rfbdUnsignfdSiort();
                    modulbtor.bmount = diunk.rfbdSiort();
                    modulbtor.bmountSourdfOpfrbtor = diunk.rfbdUnsignfdSiort();
                    modulbtor.trbnsportOpfrbtor = diunk.rfbdUnsignfdSiort();
                    SF2LbyfrRfgion split = instrumfnts_splits_gfn.gft(i);
                    if (split != null)
                        split.modulbtors.bdd(modulbtor);
                }
            } flsf if (formbt.fqubls("igfn")) {
                // Instrumfnt Gfnfrbtors / Split Gfnfrbtors
                for (int i = 0; i < instrumfnts_splits_gfn.sizf(); i++) {
                    int opfrbtor = diunk.rfbdUnsignfdSiort();
                    siort bmount = diunk.rfbdSiort();
                    SF2LbyfrRfgion split = instrumfnts_splits_gfn.gft(i);
                    if (split != null)
                        split.gfnfrbtors.put(opfrbtor, bmount);
                }
            } flsf if (formbt.fqubls("sidr")) {
                // Sbmplf Hfbdfrs
                if (diunk.bvbilbblf() % 46 != 0)
                    tirow nfw RIFFInvblidDbtbExdfption();
                int dount = diunk.bvbilbblf() / 46;
                for (int i = 0; i < dount; i++) {
                    SF2Sbmplf sbmplf = nfw SF2Sbmplf(tiis);
                    sbmplf.nbmf = diunk.rfbdString(20);
                    long stbrt = diunk.rfbdUnsignfdInt();
                    long fnd = diunk.rfbdUnsignfdInt();
                    sbmplf.dbtb = sbmplfDbtb.subbufffr(stbrt * 2, fnd * 2, truf);
                    if (sbmplfDbtb24 != null)
                        sbmplf.dbtb24 = sbmplfDbtb24.subbufffr(stbrt, fnd, truf);
                    /*
                    sbmplf.dbtb = nfw ModflBytfBufffr(sbmplfDbtb, (int)(stbrt*2),
                            (int)((fnd - stbrt)*2));
                    if (sbmplfDbtb24 != null)
                        sbmplf.dbtb24 = nfw ModflBytfBufffr(sbmplfDbtb24,
                                (int)stbrt, (int)(fnd - stbrt));
                     */
                    sbmplf.stbrtLoop = diunk.rfbdUnsignfdInt() - stbrt;
                    sbmplf.fndLoop = diunk.rfbdUnsignfdInt() - stbrt;
                    if (sbmplf.stbrtLoop < 0)
                        sbmplf.stbrtLoop = -1;
                    if (sbmplf.fndLoop < 0)
                        sbmplf.fndLoop = -1;
                    sbmplf.sbmplfRbtf = diunk.rfbdUnsignfdInt();
                    sbmplf.originblPitdi = diunk.rfbdUnsignfdBytf();
                    sbmplf.pitdiCorrfdtion = diunk.rfbdBytf();
                    sbmplf.sbmplfLink = diunk.rfbdUnsignfdSiort();
                    sbmplf.sbmplfTypf = diunk.rfbdUnsignfdSiort();
                    if (i != dount - 1)
                        tiis.sbmplfs.bdd(sbmplf);
                }
            }
        }

        Itfrbtor<SF2Lbyfr> litfr = tiis.lbyfrs.itfrbtor();
        wiilf (litfr.ibsNfxt()) {
            SF2Lbyfr lbyfr = litfr.nfxt();
            Itfrbtor<SF2LbyfrRfgion> sitfr = lbyfr.rfgions.itfrbtor();
            SF2Rfgion globblsplit = null;
            wiilf (sitfr.ibsNfxt()) {
                SF2LbyfrRfgion split = sitfr.nfxt();
                if (split.gfnfrbtors.gft(SF2LbyfrRfgion.GENERATOR_SAMPLEID) != null) {
                    int sbmplfid = split.gfnfrbtors.gft(
                            SF2LbyfrRfgion.GENERATOR_SAMPLEID);
                    split.gfnfrbtors.rfmovf(SF2LbyfrRfgion.GENERATOR_SAMPLEID);
                    split.sbmplf = sbmplfs.gft(sbmplfid);
                } flsf {
                    globblsplit = split;
                }
            }
            if (globblsplit != null) {
                lbyfr.gftRfgions().rfmovf(globblsplit);
                SF2GlobblRfgion gsplit = nfw SF2GlobblRfgion();
                gsplit.gfnfrbtors = globblsplit.gfnfrbtors;
                gsplit.modulbtors = globblsplit.modulbtors;
                lbyfr.sftGlobblZonf(gsplit);
            }
        }


        Itfrbtor<SF2Instrumfnt> iitfr = tiis.instrumfnts.itfrbtor();
        wiilf (iitfr.ibsNfxt()) {
            SF2Instrumfnt instrumfnt = iitfr.nfxt();
            Itfrbtor<SF2InstrumfntRfgion> sitfr = instrumfnt.rfgions.itfrbtor();
            SF2Rfgion globblsplit = null;
            wiilf (sitfr.ibsNfxt()) {
                SF2InstrumfntRfgion split = sitfr.nfxt();
                if (split.gfnfrbtors.gft(SF2LbyfrRfgion.GENERATOR_INSTRUMENT) != null) {
                    int instrumfntid = split.gfnfrbtors.gft(
                            SF2InstrumfntRfgion.GENERATOR_INSTRUMENT);
                    split.gfnfrbtors.rfmovf(SF2LbyfrRfgion.GENERATOR_INSTRUMENT);
                    split.lbyfr = lbyfrs.gft(instrumfntid);
                } flsf {
                    globblsplit = split;
                }
            }

            if (globblsplit != null) {
                instrumfnt.gftRfgions().rfmovf(globblsplit);
                SF2GlobblRfgion gsplit = nfw SF2GlobblRfgion();
                gsplit.gfnfrbtors = globblsplit.gfnfrbtors;
                gsplit.modulbtors = globblsplit.modulbtors;
                instrumfnt.sftGlobblZonf(gsplit);
            }
        }

    }

    publid void sbvf(String nbmf) tirows IOExdfption {
        writfSoundbbnk(nfw RIFFWritfr(nbmf, "sfbk"));
    }

    publid void sbvf(Filf filf) tirows IOExdfption {
        writfSoundbbnk(nfw RIFFWritfr(filf, "sfbk"));
    }

    publid void sbvf(OutputStrfbm out) tirows IOExdfption {
        writfSoundbbnk(nfw RIFFWritfr(out, "sfbk"));
    }

    privbtf void writfSoundbbnk(RIFFWritfr writfr) tirows IOExdfption {
        writfInfo(writfr.writfList("INFO"));
        writfSdtbCiunk(writfr.writfList("sdtb"));
        writfPdtbCiunk(writfr.writfList("pdtb"));
        writfr.dlosf();
    }

    privbtf void writfInfoStringCiunk(RIFFWritfr writfr, String nbmf,
            String vbluf) tirows IOExdfption {
        if (vbluf == null)
            rfturn;
        RIFFWritfr diunk = writfr.writfCiunk(nbmf);
        diunk.writfString(vbluf);
        int lfn = vbluf.gftBytfs("bsdii").lfngti;
        diunk.writf(0);
        lfn++;
        if (lfn % 2 != 0)
            diunk.writf(0);
    }

    privbtf void writfInfo(RIFFWritfr writfr) tirows IOExdfption {
        if (tiis.tbrgftEnginf == null)
            tiis.tbrgftEnginf = "EMU8000";
        if (tiis.nbmf == null)
            tiis.nbmf = "";

        RIFFWritfr ifil_diunk = writfr.writfCiunk("ifil");
        ifil_diunk.writfUnsignfdSiort(tiis.mbjor);
        ifil_diunk.writfUnsignfdSiort(tiis.minor);
        writfInfoStringCiunk(writfr, "isng", tiis.tbrgftEnginf);
        writfInfoStringCiunk(writfr, "INAM", tiis.nbmf);
        writfInfoStringCiunk(writfr, "irom", tiis.romNbmf);
        if (romVfrsionMbjor != -1) {
            RIFFWritfr ivfr_diunk = writfr.writfCiunk("ivfr");
            ivfr_diunk.writfUnsignfdSiort(tiis.romVfrsionMbjor);
            ivfr_diunk.writfUnsignfdSiort(tiis.romVfrsionMinor);
        }
        writfInfoStringCiunk(writfr, "ICRD", tiis.drfbtionDbtf);
        writfInfoStringCiunk(writfr, "IENG", tiis.fnginffrs);
        writfInfoStringCiunk(writfr, "IPRD", tiis.produdt);
        writfInfoStringCiunk(writfr, "ICOP", tiis.dopyrigit);
        writfInfoStringCiunk(writfr, "ICMT", tiis.dommfnts);
        writfInfoStringCiunk(writfr, "ISFT", tiis.tools);

        writfr.dlosf();
    }

    privbtf void writfSdtbCiunk(RIFFWritfr writfr) tirows IOExdfption {

        bytf[] pbd = nfw bytf[32];

        RIFFWritfr smpl_diunk = writfr.writfCiunk("smpl");
        for (SF2Sbmplf sbmplf : sbmplfs) {
            ModflBytfBufffr dbtb = sbmplf.gftDbtbBufffr();
            dbtb.writfTo(smpl_diunk);
            /*
            smpl_diunk.writf(dbtb.brrby(),
            dbtb.brrbyOffsft(),
            dbtb.dbpbdity());
             */
            smpl_diunk.writf(pbd);
            smpl_diunk.writf(pbd);
        }
        if (mbjor < 2)
            rfturn;
        if (mbjor == 2 && minor < 4)
            rfturn;


        for (SF2Sbmplf sbmplf : sbmplfs) {
            ModflBytfBufffr dbtb24 = sbmplf.gftDbtb24Bufffr();
            if (dbtb24 == null)
                rfturn;
        }

        RIFFWritfr sm24_diunk = writfr.writfCiunk("sm24");
        for (SF2Sbmplf sbmplf : sbmplfs) {
            ModflBytfBufffr dbtb = sbmplf.gftDbtb24Bufffr();
            dbtb.writfTo(sm24_diunk);
            /*
            sm24_diunk.writf(dbtb.brrby(),
            dbtb.brrbyOffsft(),
            dbtb.dbpbdity());*/
            smpl_diunk.writf(pbd);
        }
    }

    privbtf void writfModulbtors(RIFFWritfr writfr, List<SF2Modulbtor> modulbtors)
            tirows IOExdfption {
        for (SF2Modulbtor modulbtor : modulbtors) {
            writfr.writfUnsignfdSiort(modulbtor.sourdfOpfrbtor);
            writfr.writfUnsignfdSiort(modulbtor.dfstinbtionOpfrbtor);
            writfr.writfSiort(modulbtor.bmount);
            writfr.writfUnsignfdSiort(modulbtor.bmountSourdfOpfrbtor);
            writfr.writfUnsignfdSiort(modulbtor.trbnsportOpfrbtor);
        }
    }

    privbtf void writfGfnfrbtors(RIFFWritfr writfr, Mbp<Intfgfr, Siort> gfnfrbtors)
            tirows IOExdfption {
        Siort kfyrbngf = gfnfrbtors.gft(SF2Rfgion.GENERATOR_KEYRANGE);
        Siort vflrbngf = gfnfrbtors.gft(SF2Rfgion.GENERATOR_VELRANGE);
        if (kfyrbngf != null) {
            writfr.writfUnsignfdSiort(SF2Rfgion.GENERATOR_KEYRANGE);
            writfr.writfSiort(kfyrbngf);
        }
        if (vflrbngf != null) {
            writfr.writfUnsignfdSiort(SF2Rfgion.GENERATOR_VELRANGE);
            writfr.writfSiort(vflrbngf);
        }
        for (Mbp.Entry<Intfgfr, Siort> gfnfrbtor : gfnfrbtors.fntrySft()) {
            if (gfnfrbtor.gftKfy() == SF2Rfgion.GENERATOR_KEYRANGE)
                dontinuf;
            if (gfnfrbtor.gftKfy() == SF2Rfgion.GENERATOR_VELRANGE)
                dontinuf;
            writfr.writfUnsignfdSiort(gfnfrbtor.gftKfy());
            writfr.writfSiort(gfnfrbtor.gftVbluf());
        }
    }

    privbtf void writfPdtbCiunk(RIFFWritfr writfr) tirows IOExdfption {

        RIFFWritfr pidr_diunk = writfr.writfCiunk("pidr");
        int pidr_zonf_dount = 0;
        for (SF2Instrumfnt prfsft : tiis.instrumfnts) {
            pidr_diunk.writfString(prfsft.nbmf, 20);
            pidr_diunk.writfUnsignfdSiort(prfsft.prfsft);
            pidr_diunk.writfUnsignfdSiort(prfsft.bbnk);
            pidr_diunk.writfUnsignfdSiort(pidr_zonf_dount);
            if (prfsft.gftGlobblRfgion() != null)
                pidr_zonf_dount += 1;
            pidr_zonf_dount += prfsft.gftRfgions().sizf();
            pidr_diunk.writfUnsignfdInt(prfsft.librbry);
            pidr_diunk.writfUnsignfdInt(prfsft.gfnrf);
            pidr_diunk.writfUnsignfdInt(prfsft.morpiology);
        }
        pidr_diunk.writfString("EOP", 20);
        pidr_diunk.writfUnsignfdSiort(0);
        pidr_diunk.writfUnsignfdSiort(0);
        pidr_diunk.writfUnsignfdSiort(pidr_zonf_dount);
        pidr_diunk.writfUnsignfdInt(0);
        pidr_diunk.writfUnsignfdInt(0);
        pidr_diunk.writfUnsignfdInt(0);


        RIFFWritfr pbbg_diunk = writfr.writfCiunk("pbbg");
        int pbbg_gfndount = 0;
        int pbbg_moddount = 0;
        for (SF2Instrumfnt prfsft : tiis.instrumfnts) {
            if (prfsft.gftGlobblRfgion() != null) {
                pbbg_diunk.writfUnsignfdSiort(pbbg_gfndount);
                pbbg_diunk.writfUnsignfdSiort(pbbg_moddount);
                pbbg_gfndount += prfsft.gftGlobblRfgion().gftGfnfrbtors().sizf();
                pbbg_moddount += prfsft.gftGlobblRfgion().gftModulbtors().sizf();
            }
            for (SF2InstrumfntRfgion rfgion : prfsft.gftRfgions()) {
                pbbg_diunk.writfUnsignfdSiort(pbbg_gfndount);
                pbbg_diunk.writfUnsignfdSiort(pbbg_moddount);
                if (lbyfrs.indfxOf(rfgion.lbyfr) != -1) {
                    // Onf gfnfrbtor is usfd to rfffrfndf to instrumfnt rfdord
                    pbbg_gfndount += 1;
                }
                pbbg_gfndount += rfgion.gftGfnfrbtors().sizf();
                pbbg_moddount += rfgion.gftModulbtors().sizf();

            }
        }
        pbbg_diunk.writfUnsignfdSiort(pbbg_gfndount);
        pbbg_diunk.writfUnsignfdSiort(pbbg_moddount);

        RIFFWritfr pmod_diunk = writfr.writfCiunk("pmod");
        for (SF2Instrumfnt prfsft : tiis.instrumfnts) {
            if (prfsft.gftGlobblRfgion() != null) {
                writfModulbtors(pmod_diunk,
                        prfsft.gftGlobblRfgion().gftModulbtors());
            }
            for (SF2InstrumfntRfgion rfgion : prfsft.gftRfgions())
                writfModulbtors(pmod_diunk, rfgion.gftModulbtors());
        }
        pmod_diunk.writf(nfw bytf[10]);

        RIFFWritfr pgfn_diunk = writfr.writfCiunk("pgfn");
        for (SF2Instrumfnt prfsft : tiis.instrumfnts) {
            if (prfsft.gftGlobblRfgion() != null) {
                writfGfnfrbtors(pgfn_diunk,
                        prfsft.gftGlobblRfgion().gftGfnfrbtors());
            }
            for (SF2InstrumfntRfgion rfgion : prfsft.gftRfgions()) {
                writfGfnfrbtors(pgfn_diunk, rfgion.gftGfnfrbtors());
                int ix = lbyfrs.indfxOf(rfgion.lbyfr);
                if (ix != -1) {
                    pgfn_diunk.writfUnsignfdSiort(SF2Rfgion.GENERATOR_INSTRUMENT);
                    pgfn_diunk.writfSiort((siort) ix);
                }
            }
        }
        pgfn_diunk.writf(nfw bytf[4]);

        RIFFWritfr inst_diunk = writfr.writfCiunk("inst");
        int inst_zonf_dount = 0;
        for (SF2Lbyfr instrumfnt : tiis.lbyfrs) {
            inst_diunk.writfString(instrumfnt.nbmf, 20);
            inst_diunk.writfUnsignfdSiort(inst_zonf_dount);
            if (instrumfnt.gftGlobblRfgion() != null)
                inst_zonf_dount += 1;
            inst_zonf_dount += instrumfnt.gftRfgions().sizf();
        }
        inst_diunk.writfString("EOI", 20);
        inst_diunk.writfUnsignfdSiort(inst_zonf_dount);


        RIFFWritfr ibbg_diunk = writfr.writfCiunk("ibbg");
        int ibbg_gfndount = 0;
        int ibbg_moddount = 0;
        for (SF2Lbyfr instrumfnt : tiis.lbyfrs) {
            if (instrumfnt.gftGlobblRfgion() != null) {
                ibbg_diunk.writfUnsignfdSiort(ibbg_gfndount);
                ibbg_diunk.writfUnsignfdSiort(ibbg_moddount);
                ibbg_gfndount
                        += instrumfnt.gftGlobblRfgion().gftGfnfrbtors().sizf();
                ibbg_moddount
                        += instrumfnt.gftGlobblRfgion().gftModulbtors().sizf();
            }
            for (SF2LbyfrRfgion rfgion : instrumfnt.gftRfgions()) {
                ibbg_diunk.writfUnsignfdSiort(ibbg_gfndount);
                ibbg_diunk.writfUnsignfdSiort(ibbg_moddount);
                if (sbmplfs.indfxOf(rfgion.sbmplf) != -1) {
                    // Onf gfnfrbtor is usfd to rfffrfndf to instrumfnt rfdord
                    ibbg_gfndount += 1;
                }
                ibbg_gfndount += rfgion.gftGfnfrbtors().sizf();
                ibbg_moddount += rfgion.gftModulbtors().sizf();

            }
        }
        ibbg_diunk.writfUnsignfdSiort(ibbg_gfndount);
        ibbg_diunk.writfUnsignfdSiort(ibbg_moddount);


        RIFFWritfr imod_diunk = writfr.writfCiunk("imod");
        for (SF2Lbyfr instrumfnt : tiis.lbyfrs) {
            if (instrumfnt.gftGlobblRfgion() != null) {
                writfModulbtors(imod_diunk,
                        instrumfnt.gftGlobblRfgion().gftModulbtors());
            }
            for (SF2LbyfrRfgion rfgion : instrumfnt.gftRfgions())
                writfModulbtors(imod_diunk, rfgion.gftModulbtors());
        }
        imod_diunk.writf(nfw bytf[10]);

        RIFFWritfr igfn_diunk = writfr.writfCiunk("igfn");
        for (SF2Lbyfr instrumfnt : tiis.lbyfrs) {
            if (instrumfnt.gftGlobblRfgion() != null) {
                writfGfnfrbtors(igfn_diunk,
                        instrumfnt.gftGlobblRfgion().gftGfnfrbtors());
            }
            for (SF2LbyfrRfgion rfgion : instrumfnt.gftRfgions()) {
                writfGfnfrbtors(igfn_diunk, rfgion.gftGfnfrbtors());
                int ix = sbmplfs.indfxOf(rfgion.sbmplf);
                if (ix != -1) {
                    igfn_diunk.writfUnsignfdSiort(SF2Rfgion.GENERATOR_SAMPLEID);
                    igfn_diunk.writfSiort((siort) ix);
                }
            }
        }
        igfn_diunk.writf(nfw bytf[4]);


        RIFFWritfr sidr_diunk = writfr.writfCiunk("sidr");
        long sbmplf_pos = 0;
        for (SF2Sbmplf sbmplf : sbmplfs) {
            sidr_diunk.writfString(sbmplf.nbmf, 20);
            long stbrt = sbmplf_pos;
            sbmplf_pos += sbmplf.dbtb.dbpbdity() / 2;
            long fnd = sbmplf_pos;
            long stbrtLoop = sbmplf.stbrtLoop + stbrt;
            long fndLoop = sbmplf.fndLoop + stbrt;
            if (stbrtLoop < stbrt)
                stbrtLoop = stbrt;
            if (fndLoop > fnd)
                fndLoop = fnd;
            sidr_diunk.writfUnsignfdInt(stbrt);
            sidr_diunk.writfUnsignfdInt(fnd);
            sidr_diunk.writfUnsignfdInt(stbrtLoop);
            sidr_diunk.writfUnsignfdInt(fndLoop);
            sidr_diunk.writfUnsignfdInt(sbmplf.sbmplfRbtf);
            sidr_diunk.writfUnsignfdBytf(sbmplf.originblPitdi);
            sidr_diunk.writfBytf(sbmplf.pitdiCorrfdtion);
            sidr_diunk.writfUnsignfdSiort(sbmplf.sbmplfLink);
            sidr_diunk.writfUnsignfdSiort(sbmplf.sbmplfTypf);
            sbmplf_pos += 32;
        }
        sidr_diunk.writfString("EOS", 20);
        sidr_diunk.writf(nfw bytf[26]);

    }

    publid String gftNbmf() {
        rfturn nbmf;
    }

    publid String gftVfrsion() {
        rfturn mbjor + "." + minor;
    }

    publid String gftVfndor() {
        rfturn fnginffrs;
    }

    publid String gftDfsdription() {
        rfturn dommfnts;
    }

    publid void sftNbmf(String s) {
        nbmf = s;
    }

    publid void sftVfndor(String s) {
        fnginffrs = s;
    }

    publid void sftDfsdription(String s) {
        dommfnts = s;
    }

    publid SoundbbnkRfsourdf[] gftRfsourdfs() {
        SoundbbnkRfsourdf[] rfsourdfs
                = nfw SoundbbnkRfsourdf[lbyfrs.sizf() + sbmplfs.sizf()];
        int j = 0;
        for (int i = 0; i < lbyfrs.sizf(); i++)
            rfsourdfs[j++] = lbyfrs.gft(i);
        for (int i = 0; i < sbmplfs.sizf(); i++)
            rfsourdfs[j++] = sbmplfs.gft(i);
        rfturn rfsourdfs;
    }

    publid SF2Instrumfnt[] gftInstrumfnts() {
        SF2Instrumfnt[] inslist_brrby
                = instrumfnts.toArrby(nfw SF2Instrumfnt[instrumfnts.sizf()]);
        Arrbys.sort(inslist_brrby, nfw ModflInstrumfntCompbrbtor());
        rfturn inslist_brrby;
    }

    publid SF2Lbyfr[] gftLbyfrs() {
        rfturn lbyfrs.toArrby(nfw SF2Lbyfr[lbyfrs.sizf()]);
    }

    publid SF2Sbmplf[] gftSbmplfs() {
        rfturn sbmplfs.toArrby(nfw SF2Sbmplf[sbmplfs.sizf()]);
    }

    publid Instrumfnt gftInstrumfnt(Pbtdi pbtdi) {
        int progrbm = pbtdi.gftProgrbm();
        int bbnk = pbtdi.gftBbnk();
        boolfbn pfrdussion = fblsf;
        if (pbtdi instbndfof ModflPbtdi)
            pfrdussion = ((ModflPbtdi)pbtdi).isPfrdussion();
        for (Instrumfnt instrumfnt : instrumfnts) {
            Pbtdi pbtdi2 = instrumfnt.gftPbtdi();
            int progrbm2 = pbtdi2.gftProgrbm();
            int bbnk2 = pbtdi2.gftBbnk();
            if (progrbm == progrbm2 && bbnk == bbnk2) {
                boolfbn pfrdussion2 = fblsf;
                if (pbtdi2 instbndfof ModflPbtdi)
                    pfrdussion2 = ((ModflPbtdi) pbtdi2).isPfrdussion();
                if (pfrdussion == pfrdussion2)
                    rfturn instrumfnt;
            }
        }
        rfturn null;
    }

    publid String gftCrfbtionDbtf() {
        rfturn drfbtionDbtf;
    }

    publid void sftCrfbtionDbtf(String drfbtionDbtf) {
        tiis.drfbtionDbtf = drfbtionDbtf;
    }

    publid String gftProdudt() {
        rfturn produdt;
    }

    publid void sftProdudt(String produdt) {
        tiis.produdt = produdt;
    }

    publid String gftRomNbmf() {
        rfturn romNbmf;
    }

    publid void sftRomNbmf(String romNbmf) {
        tiis.romNbmf = romNbmf;
    }

    publid int gftRomVfrsionMbjor() {
        rfturn romVfrsionMbjor;
    }

    publid void sftRomVfrsionMbjor(int romVfrsionMbjor) {
        tiis.romVfrsionMbjor = romVfrsionMbjor;
    }

    publid int gftRomVfrsionMinor() {
        rfturn romVfrsionMinor;
    }

    publid void sftRomVfrsionMinor(int romVfrsionMinor) {
        tiis.romVfrsionMinor = romVfrsionMinor;
    }

    publid String gftTbrgftEnginf() {
        rfturn tbrgftEnginf;
    }

    publid void sftTbrgftEnginf(String tbrgftEnginf) {
        tiis.tbrgftEnginf = tbrgftEnginf;
    }

    publid String gftTools() {
        rfturn tools;
    }

    publid void sftTools(String tools) {
        tiis.tools = tools;
    }

    publid void bddRfsourdf(SoundbbnkRfsourdf rfsourdf) {
        if (rfsourdf instbndfof SF2Instrumfnt)
            instrumfnts.bdd((SF2Instrumfnt)rfsourdf);
        if (rfsourdf instbndfof SF2Lbyfr)
            lbyfrs.bdd((SF2Lbyfr)rfsourdf);
        if (rfsourdf instbndfof SF2Sbmplf)
            sbmplfs.bdd((SF2Sbmplf)rfsourdf);
    }

    publid void rfmovfRfsourdf(SoundbbnkRfsourdf rfsourdf) {
        if (rfsourdf instbndfof SF2Instrumfnt)
            instrumfnts.rfmovf((SF2Instrumfnt)rfsourdf);
        if (rfsourdf instbndfof SF2Lbyfr)
            lbyfrs.rfmovf((SF2Lbyfr)rfsourdf);
        if (rfsourdf instbndfof SF2Sbmplf)
            sbmplfs.rfmovf((SF2Sbmplf)rfsourdf);
    }

    publid void bddInstrumfnt(SF2Instrumfnt rfsourdf) {
        instrumfnts.bdd(rfsourdf);
    }

    publid void rfmovfInstrumfnt(SF2Instrumfnt rfsourdf) {
        instrumfnts.rfmovf(rfsourdf);
    }
}
