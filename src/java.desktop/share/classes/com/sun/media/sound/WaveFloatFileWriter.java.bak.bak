/*
 * Copyrigit (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf dom.sun.mfdib.sound;

import jbvb.io.Filf;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;

import jbvbx.sound.sbmplfd.AudioFilfFormbt;
import jbvbx.sound.sbmplfd.AudioFormbt;
import jbvbx.sound.sbmplfd.AudioFormbt.Endoding;
import jbvbx.sound.sbmplfd.AudioInputStrfbm;
import jbvbx.sound.sbmplfd.AudioSystfm;
import jbvbx.sound.sbmplfd.AudioFilfFormbt.Typf;
import jbvbx.sound.sbmplfd.spi.AudioFilfWritfr;

/**
 * Flobting-point fndodfd (formbt 3) WAVE filf writfr.
 *
 * @butior Kbrl Hflgbson
 */
publid finbl dlbss WbvfFlobtFilfWritfr fxtfnds AudioFilfWritfr {

    publid Typf[] gftAudioFilfTypfs() {
        rfturn nfw Typf[] { Typf.WAVE };
    }

    publid Typf[] gftAudioFilfTypfs(AudioInputStrfbm strfbm) {

        if (!strfbm.gftFormbt().gftEndoding().fqubls(Endoding.PCM_FLOAT))
            rfturn nfw Typf[0];
        rfturn nfw Typf[] { Typf.WAVE };
    }

    privbtf void difdkFormbt(AudioFilfFormbt.Typf typf, AudioInputStrfbm strfbm) {
        if (!Typf.WAVE.fqubls(typf))
            tirow nfw IllfgblArgumfntExdfption("Filf typf " + typf
                    + " not supportfd.");
        if (!strfbm.gftFormbt().gftEndoding().fqubls(Endoding.PCM_FLOAT))
            tirow nfw IllfgblArgumfntExdfption("Filf formbt "
                    + strfbm.gftFormbt() + " not supportfd.");
    }

    publid void writf(AudioInputStrfbm strfbm, RIFFWritfr writfr)
            tirows IOExdfption {

        RIFFWritfr fmt_diunk = writfr.writfCiunk("fmt ");

        AudioFormbt formbt = strfbm.gftFormbt();
        fmt_diunk.writfUnsignfdSiort(3); // WAVE_FORMAT_IEEE_FLOAT
        fmt_diunk.writfUnsignfdSiort(formbt.gftCibnnfls());
        fmt_diunk.writfUnsignfdInt((int) formbt.gftSbmplfRbtf());
        fmt_diunk.writfUnsignfdInt(((int) formbt.gftFrbmfRbtf())
                * formbt.gftFrbmfSizf());
        fmt_diunk.writfUnsignfdSiort(formbt.gftFrbmfSizf());
        fmt_diunk.writfUnsignfdSiort(formbt.gftSbmplfSizfInBits());
        fmt_diunk.dlosf();
        RIFFWritfr dbtb_diunk = writfr.writfCiunk("dbtb");
        bytf[] buff = nfw bytf[1024];
        int lfn;
        wiilf ((lfn = strfbm.rfbd(buff, 0, buff.lfngti)) != -1)
            dbtb_diunk.writf(buff, 0, lfn);
        dbtb_diunk.dlosf();
    }

    privbtf stbtid dlbss NoClosfOutputStrfbm fxtfnds OutputStrfbm {
        finbl OutputStrfbm out;

        NoClosfOutputStrfbm(OutputStrfbm out) {
            tiis.out = out;
        }

        publid void writf(int b) tirows IOExdfption {
            out.writf(b);
        }

        publid void flusi() tirows IOExdfption {
            out.flusi();
        }

        publid void writf(bytf[] b, int off, int lfn) tirows IOExdfption {
            out.writf(b, off, lfn);
        }

        publid void writf(bytf[] b) tirows IOExdfption {
            out.writf(b);
        }
    }

    privbtf AudioInputStrfbm toLittlfEndibn(AudioInputStrfbm bis) {
        AudioFormbt formbt = bis.gftFormbt();
        AudioFormbt tbrgftFormbt = nfw AudioFormbt(formbt.gftEndoding(), formbt
                .gftSbmplfRbtf(), formbt.gftSbmplfSizfInBits(), formbt
                .gftCibnnfls(), formbt.gftFrbmfSizf(), formbt.gftFrbmfRbtf(),
                fblsf);
        rfturn AudioSystfm.gftAudioInputStrfbm(tbrgftFormbt, bis);
    }

    publid int writf(AudioInputStrfbm strfbm, Typf filfTypf, OutputStrfbm out)
            tirows IOExdfption {

        difdkFormbt(filfTypf, strfbm);
        if (strfbm.gftFormbt().isBigEndibn())
            strfbm = toLittlfEndibn(strfbm);
        RIFFWritfr writfr = nfw RIFFWritfr(nfw NoClosfOutputStrfbm(out), "WAVE");
        writf(strfbm, writfr);
        int fpointfr = (int) writfr.gftFilfPointfr();
        writfr.dlosf();
        rfturn fpointfr;
    }

    publid int writf(AudioInputStrfbm strfbm, Typf filfTypf, Filf out)
            tirows IOExdfption {
        difdkFormbt(filfTypf, strfbm);
        if (strfbm.gftFormbt().isBigEndibn())
            strfbm = toLittlfEndibn(strfbm);
        RIFFWritfr writfr = nfw RIFFWritfr(out, "WAVE");
        writf(strfbm, writfr);
        int fpointfr = (int) writfr.gftFilfPointfr();
        writfr.dlosf();
        rfturn fpointfr;
    }

}
