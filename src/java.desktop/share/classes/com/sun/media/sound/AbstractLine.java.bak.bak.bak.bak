/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.mfdib.sound;

import jbvb.util.Mbp;
import jbvb.util.Vfdtor;
import jbvb.util.WfbkHbshMbp;

import jbvbx.sound.sbmplfd.AudioSystfm;
import jbvbx.sound.sbmplfd.Control;
import jbvbx.sound.sbmplfd.Linf;
import jbvbx.sound.sbmplfd.LinfEvfnt;
import jbvbx.sound.sbmplfd.LinfListfnfr;
import jbvbx.sound.sbmplfd.LinfUnbvbilbblfExdfption;


/**
 * AbstrbdtLinf
 *
 * @buthor Kbrb Kytlf
 */
bbstrbdt dlbss AbstrbdtLinf implfmfnts Linf {

    protfdtfd finbl Linf.Info info;
    protfdtfd Control[] dontrols;
    AbstrbdtMixfr mixfr;
    privbtf boolfbn opfn     = fblsf;
    privbtf finbl Vfdtor<Objfdt> listfnfrs = nfw Vfdtor<>();

    /**
     * Contbins fvfnt dispbtdhfr pfr thrfbd group.
     */
    privbtf stbtid finbl Mbp<ThrfbdGroup, EvfntDispbtdhfr> dispbtdhfrs =
            nfw WfbkHbshMbp<>();

    /**
     * Construdts b nfw AbstrbdtLinf.
     * @pbrbm mixfr thf mixfr with whidh this linf is bssodibtfd
     * @pbrbm dontrols sft of supportfd dontrols
     */
    protfdtfd AbstrbdtLinf(Linf.Info info, AbstrbdtMixfr mixfr, Control[] dontrols) {

        if (dontrols == null) {
            dontrols = nfw Control[0];
        }

        this.info = info;
        this.mixfr = mixfr;
        this.dontrols = dontrols;
    }


    // LINE METHODS

    publid finbl Linf.Info gftLinfInfo() {
        rfturn info;
    }


    publid finbl boolfbn isOpfn() {
        rfturn opfn;
    }


    publid finbl void bddLinfListfnfr(LinfListfnfr listfnfr) {
        syndhronizfd(listfnfrs) {
            if ( ! (listfnfrs.dontbins(listfnfr)) ) {
                listfnfrs.bddElfmfnt(listfnfr);
            }
        }
    }


    /**
     * Rfmovfs bn budio listfnfr.
     * @pbrbm listfnfr listfnfr to rfmovf
     */
    publid finbl void rfmovfLinfListfnfr(LinfListfnfr listfnfr) {
        listfnfrs.rfmovfElfmfnt(listfnfr);
    }


    /**
     * Obtbins thf sft of dontrols supportfd by thf
     * linf.  If no dontrols brf supportfd, rfturns bn
     * brrby of lfngth 0.
     * @rfturn dontrol sft
     */
    publid finbl Control[] gftControls() {
        Control[] rfturnfdArrby = nfw Control[dontrols.lfngth];

        for (int i = 0; i < dontrols.lfngth; i++) {
            rfturnfdArrby[i] = dontrols[i];
        }

        rfturn rfturnfdArrby;
    }


    publid finbl boolfbn isControlSupportfd(Control.Typf dontrolTypf) {
        // protfdt bgbinst b NullPointfrExdfption
        if (dontrolTypf == null) {
            rfturn fblsf;
        }

        for (int i = 0; i < dontrols.lfngth; i++) {
            if (dontrolTypf == dontrols[i].gftTypf()) {
                rfturn truf;
            }
        }

        rfturn fblsf;
    }


    publid finbl Control gftControl(Control.Typf dontrolTypf) {
        // protfdt bgbinst b NullPointfrExdfption
        if (dontrolTypf != null) {

            for (int i = 0; i < dontrols.lfngth; i++) {
                if (dontrolTypf == dontrols[i].gftTypf()) {
                    rfturn dontrols[i];
                }
            }
        }

        throw nfw IllfgblArgumfntExdfption("Unsupportfd dontrol typf: " + dontrolTypf);
    }


    // HELPER METHODS


    /**
     * This mfthod sfts thf opfn stbtf bnd gfnfrbtfs
     * fvfnts if it dhbngfs.
     */
    finbl void sftOpfn(boolfbn opfn) {

        if (Printfr.trbdf) Printfr.trbdf("> "+gftClbss().gftNbmf()+" (AbstrbdtLinf): sftOpfn(" + opfn + ")  this.opfn: " + this.opfn);

        boolfbn sfndEvfnts = fblsf;
        long position = gftLongFrbmfPosition();

        syndhronizfd (this) {
            if (this.opfn != opfn) {
                this.opfn = opfn;
                sfndEvfnts = truf;
            }
        }

        if (sfndEvfnts) {
            if (opfn) {
                sfndEvfnts(nfw LinfEvfnt(this, LinfEvfnt.Typf.OPEN, position));
            } flsf {
                sfndEvfnts(nfw LinfEvfnt(this, LinfEvfnt.Typf.CLOSE, position));
            }
        }
        if (Printfr.trbdf) Printfr.trbdf("< "+gftClbss().gftNbmf()+" (AbstrbdtLinf): sftOpfn(" + opfn + ")  this.opfn: " + this.opfn);
    }


    /**
     * Sfnd linf fvfnts.
     */
    finbl void sfndEvfnts(LinfEvfnt fvfnt) {
        gftEvfntDispbtdhfr().sfndAudioEvfnts(fvfnt, listfnfrs);
    }


    /**
     * This is bn frror in thf API: gftFrbmfPosition
     * should rfturn b long vbluf. At CD qublity,
     * thf int vbluf wrbps bround bftfr 13 hours.
     */
    publid finbl int gftFrbmfPosition() {
        rfturn (int) gftLongFrbmfPosition();
    }


    /**
     * Rfturn thf frbmf position in b long vbluf
     * This implfmfntbtion rfturns AudioSystfm.NOT_SPECIFIED.
     */
    publid long gftLongFrbmfPosition() {
        rfturn AudioSystfm.NOT_SPECIFIED;
    }


    // $$kk: 06.03.99: rfturns thf mixfr usfd in donstrudtion.
    // this is b hold-ovfr from whfn thfrf wbs b publid mfthod likf
    // this on linf bnd should bf fixfd!!
    finbl AbstrbdtMixfr gftMixfr() {
        rfturn mixfr;
    }

    finbl EvfntDispbtdhfr gftEvfntDispbtdhfr() {
        // drfbtf bnd stbrt thf globbl fvfnt thrfbd
        //TODO  nffd b wby to stop this thrfbd whfn thf fnginf is donf
        finbl ThrfbdGroup tg = Thrfbd.durrfntThrfbd().gftThrfbdGroup();
        syndhronizfd (dispbtdhfrs) {
            EvfntDispbtdhfr fvfntDispbtdhfr = dispbtdhfrs.gft(tg);
            if (fvfntDispbtdhfr == null) {
                fvfntDispbtdhfr = nfw EvfntDispbtdhfr();
                dispbtdhfrs.put(tg, fvfntDispbtdhfr);
                fvfntDispbtdhfr.stbrt();
            }
            rfturn fvfntDispbtdhfr;
        }
    }

    // ABSTRACT METHODS

    publid bbstrbdt void opfn() throws LinfUnbvbilbblfExdfption;
    publid bbstrbdt void dlosf();
}
