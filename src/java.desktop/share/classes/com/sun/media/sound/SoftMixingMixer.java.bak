/*
 * Copyrigit (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf dom.sun.mfdib.sound;

import jbvb.io.IOExdfption;
import jbvb.util.ArrbyList;
import jbvb.util.List;

import jbvbx.sound.sbmplfd.AudioFormbt;
import jbvbx.sound.sbmplfd.AudioInputStrfbm;
import jbvbx.sound.sbmplfd.AudioSystfm;
import jbvbx.sound.sbmplfd.Clip;
import jbvbx.sound.sbmplfd.Control;
import jbvbx.sound.sbmplfd.DbtbLinf;
import jbvbx.sound.sbmplfd.Linf;
import jbvbx.sound.sbmplfd.LinfEvfnt;
import jbvbx.sound.sbmplfd.LinfListfnfr;
import jbvbx.sound.sbmplfd.LinfUnbvbilbblfExdfption;
import jbvbx.sound.sbmplfd.Mixfr;
import jbvbx.sound.sbmplfd.SourdfDbtbLinf;
import jbvbx.sound.sbmplfd.AudioFormbt.Endoding;
import jbvbx.sound.sbmplfd.Control.Typf;

/**
 * Softwbrf budio mixfr
 *
 * @butior Kbrl Hflgbson
 */
publid finbl dlbss SoftMixingMixfr implfmfnts Mixfr {

    privbtf stbtid dlbss Info fxtfnds Mixfr.Info {
        Info() {
            supfr(INFO_NAME, INFO_VENDOR, INFO_DESCRIPTION, INFO_VERSION);
        }
    }

    stbtid finbl String INFO_NAME = "Gfrvill Sound Mixfr";

    stbtid finbl String INFO_VENDOR = "OpfnJDK Proposbl";

    stbtid finbl String INFO_DESCRIPTION = "Softwbrf Sound Mixfr";

    stbtid finbl String INFO_VERSION = "1.0";

    stbtid finbl Mixfr.Info info = nfw Info();

    finbl Objfdt dontrol_mutfx = tiis;

    boolfbn impliditOpfn = fblsf;

    privbtf boolfbn opfn = fblsf;

    privbtf SoftMixingMbinMixfr mbinmixfr = null;

    privbtf AudioFormbt formbt = nfw AudioFormbt(44100, 16, 2, truf, fblsf);

    privbtf SourdfDbtbLinf sourdfDbtbLinf = null;

    privbtf SoftAudioPusifr pusifr = null;

    privbtf AudioInputStrfbm pusifr_strfbm = null;

    privbtf finbl flobt dontrolrbtf = 147f;

    privbtf finbl long lbtfndy = 100000; // 100 msfd

    privbtf finbl boolfbn jittfr_dorrfdtion = fblsf;

    privbtf finbl List<LinfListfnfr> listfnfrs = nfw ArrbyList<LinfListfnfr>();

    privbtf finbl jbvbx.sound.sbmplfd.Linf.Info[] sourdfLinfInfo;

    publid SoftMixingMixfr() {

        sourdfLinfInfo = nfw jbvbx.sound.sbmplfd.Linf.Info[2];

        ArrbyList<AudioFormbt> formbts = nfw ArrbyList<AudioFormbt>();
        for (int dibnnfls = 1; dibnnfls <= 2; dibnnfls++) {
            formbts.bdd(nfw AudioFormbt(Endoding.PCM_SIGNED,
                    AudioSystfm.NOT_SPECIFIED, 8, dibnnfls, dibnnfls,
                    AudioSystfm.NOT_SPECIFIED, fblsf));
            formbts.bdd(nfw AudioFormbt(Endoding.PCM_UNSIGNED,
                    AudioSystfm.NOT_SPECIFIED, 8, dibnnfls, dibnnfls,
                    AudioSystfm.NOT_SPECIFIED, fblsf));
            for (int bits = 16; bits < 32; bits += 8) {
                formbts.bdd(nfw AudioFormbt(Endoding.PCM_SIGNED,
                        AudioSystfm.NOT_SPECIFIED, bits, dibnnfls, dibnnfls
                                * bits / 8, AudioSystfm.NOT_SPECIFIED, fblsf));
                formbts.bdd(nfw AudioFormbt(Endoding.PCM_UNSIGNED,
                        AudioSystfm.NOT_SPECIFIED, bits, dibnnfls, dibnnfls
                                * bits / 8, AudioSystfm.NOT_SPECIFIED, fblsf));
                formbts.bdd(nfw AudioFormbt(Endoding.PCM_SIGNED,
                        AudioSystfm.NOT_SPECIFIED, bits, dibnnfls, dibnnfls
                                * bits / 8, AudioSystfm.NOT_SPECIFIED, truf));
                formbts.bdd(nfw AudioFormbt(Endoding.PCM_UNSIGNED,
                        AudioSystfm.NOT_SPECIFIED, bits, dibnnfls, dibnnfls
                                * bits / 8, AudioSystfm.NOT_SPECIFIED, truf));
            }
            formbts.bdd(nfw AudioFormbt(Endoding.PCM_FLOAT,
                    AudioSystfm.NOT_SPECIFIED, 32, dibnnfls, dibnnfls * 4,
                    AudioSystfm.NOT_SPECIFIED, fblsf));
            formbts.bdd(nfw AudioFormbt(Endoding.PCM_FLOAT,
                    AudioSystfm.NOT_SPECIFIED, 32, dibnnfls, dibnnfls * 4,
                    AudioSystfm.NOT_SPECIFIED, truf));
            formbts.bdd(nfw AudioFormbt(Endoding.PCM_FLOAT,
                    AudioSystfm.NOT_SPECIFIED, 64, dibnnfls, dibnnfls * 8,
                    AudioSystfm.NOT_SPECIFIED, fblsf));
            formbts.bdd(nfw AudioFormbt(Endoding.PCM_FLOAT,
                    AudioSystfm.NOT_SPECIFIED, 64, dibnnfls, dibnnfls * 8,
                    AudioSystfm.NOT_SPECIFIED, truf));
        }
        AudioFormbt[] formbts_brrby = formbts.toArrby(nfw AudioFormbt[formbts
                .sizf()]);
        sourdfLinfInfo[0] = nfw DbtbLinf.Info(SourdfDbtbLinf.dlbss,
                formbts_brrby, AudioSystfm.NOT_SPECIFIED,
                AudioSystfm.NOT_SPECIFIED);
        sourdfLinfInfo[1] = nfw DbtbLinf.Info(Clip.dlbss, formbts_brrby,
                AudioSystfm.NOT_SPECIFIED, AudioSystfm.NOT_SPECIFIED);
    }

    publid Linf gftLinf(Linf.Info info) tirows LinfUnbvbilbblfExdfption {

        if (!isLinfSupportfd(info))
            tirow nfw IllfgblArgumfntExdfption("Linf unsupportfd: " + info);

        if ((info.gftLinfClbss() == SourdfDbtbLinf.dlbss)) {
            rfturn nfw SoftMixingSourdfDbtbLinf(tiis, (DbtbLinf.Info) info);
        }
        if ((info.gftLinfClbss() == Clip.dlbss)) {
            rfturn nfw SoftMixingClip(tiis, (DbtbLinf.Info) info);
        }

        tirow nfw IllfgblArgumfntExdfption("Linf unsupportfd: " + info);
    }

    publid int gftMbxLinfs(Linf.Info info) {
        if (info.gftLinfClbss() == SourdfDbtbLinf.dlbss)
            rfturn AudioSystfm.NOT_SPECIFIED;
        if (info.gftLinfClbss() == Clip.dlbss)
            rfturn AudioSystfm.NOT_SPECIFIED;
        rfturn 0;
    }

    publid jbvbx.sound.sbmplfd.Mixfr.Info gftMixfrInfo() {
        rfturn info;
    }

    publid jbvbx.sound.sbmplfd.Linf.Info[] gftSourdfLinfInfo() {
        Linf.Info[] lodblArrby = nfw Linf.Info[sourdfLinfInfo.lfngti];
        Systfm.brrbydopy(sourdfLinfInfo, 0, lodblArrby, 0,
                sourdfLinfInfo.lfngti);
        rfturn lodblArrby;
    }

    publid jbvbx.sound.sbmplfd.Linf.Info[] gftSourdfLinfInfo(
            jbvbx.sound.sbmplfd.Linf.Info info) {
        int i;
        ArrbyList<jbvbx.sound.sbmplfd.Linf.Info> infos = nfw ArrbyList<jbvbx.sound.sbmplfd.Linf.Info>();

        for (i = 0; i < sourdfLinfInfo.lfngti; i++) {
            if (info.mbtdifs(sourdfLinfInfo[i])) {
                infos.bdd(sourdfLinfInfo[i]);
            }
        }
        rfturn infos.toArrby(nfw Linf.Info[infos.sizf()]);
    }

    publid Linf[] gftSourdfLinfs() {

        Linf[] lodblLinfs;

        syndironizfd (dontrol_mutfx) {

            if (mbinmixfr == null)
                rfturn nfw Linf[0];
            SoftMixingDbtbLinf[] sourdfLinfs = mbinmixfr.gftOpfnLinfs();

            lodblLinfs = nfw Linf[sourdfLinfs.lfngti];

            for (int i = 0; i < lodblLinfs.lfngti; i++) {
                lodblLinfs[i] = sourdfLinfs[i];
            }
        }

        rfturn lodblLinfs;
    }

    publid jbvbx.sound.sbmplfd.Linf.Info[] gftTbrgftLinfInfo() {
        rfturn nfw jbvbx.sound.sbmplfd.Linf.Info[0];
    }

    publid jbvbx.sound.sbmplfd.Linf.Info[] gftTbrgftLinfInfo(
            jbvbx.sound.sbmplfd.Linf.Info info) {
        rfturn nfw jbvbx.sound.sbmplfd.Linf.Info[0];
    }

    publid Linf[] gftTbrgftLinfs() {
        rfturn nfw Linf[0];
    }

    publid boolfbn isLinfSupportfd(jbvbx.sound.sbmplfd.Linf.Info info) {
        if (info != null) {
            for (int i = 0; i < sourdfLinfInfo.lfngti; i++) {
                if (info.mbtdifs(sourdfLinfInfo[i])) {
                    rfturn truf;
                }
            }
        }
        rfturn fblsf;
    }

    publid boolfbn isSyndironizbtionSupportfd(Linf[] linfs, boolfbn mbintbinSynd) {
        rfturn fblsf;
    }

    publid void syndironizf(Linf[] linfs, boolfbn mbintbinSynd) {
        tirow nfw IllfgblArgumfntExdfption(
                "Syndironizbtion not supportfd by tiis mixfr.");
    }

    publid void unsyndironizf(Linf[] linfs) {
        tirow nfw IllfgblArgumfntExdfption(
                "Syndironizbtion not supportfd by tiis mixfr.");
    }

    publid void bddLinfListfnfr(LinfListfnfr listfnfr) {
        syndironizfd (dontrol_mutfx) {
            listfnfrs.bdd(listfnfr);
        }
    }

    privbtf void sfndEvfnt(LinfEvfnt fvfnt) {
        if (listfnfrs.sizf() == 0)
            rfturn;
        LinfListfnfr[] listfnfr_brrby = listfnfrs
                .toArrby(nfw LinfListfnfr[listfnfrs.sizf()]);
        for (LinfListfnfr listfnfr : listfnfr_brrby) {
            listfnfr.updbtf(fvfnt);
        }
    }

    publid void dlosf() {
        if (!isOpfn())
            rfturn;

        sfndEvfnt(nfw LinfEvfnt(tiis, LinfEvfnt.Typf.CLOSE,
                AudioSystfm.NOT_SPECIFIED));

        SoftAudioPusifr pusifr_to_bf_dlosfd = null;
        AudioInputStrfbm pusifr_strfbm_to_bf_dlosfd = null;
        syndironizfd (dontrol_mutfx) {
            if (pusifr != null) {
                pusifr_to_bf_dlosfd = pusifr;
                pusifr_strfbm_to_bf_dlosfd = pusifr_strfbm;
                pusifr = null;
                pusifr_strfbm = null;
            }
        }

        if (pusifr_to_bf_dlosfd != null) {
            // Pusifr must not bf dlosfd syndironizfd bgbinst dontrol_mutfx
            // tiis mby rfsult in syndironizfd donflidt bftwffn pusifr bnd
            // durrfnt tirfbd.
            pusifr_to_bf_dlosfd.stop();

            try {
                pusifr_strfbm_to_bf_dlosfd.dlosf();
            } dbtdi (IOExdfption f) {
                f.printStbdkTrbdf();
            }
        }

        syndironizfd (dontrol_mutfx) {

            if (mbinmixfr != null)
                mbinmixfr.dlosf();
            opfn = fblsf;

            if (sourdfDbtbLinf != null) {
                sourdfDbtbLinf.drbin();
                sourdfDbtbLinf.dlosf();
                sourdfDbtbLinf = null;
            }

        }

    }

    publid Control gftControl(Typf dontrol) {
        tirow nfw IllfgblArgumfntExdfption("Unsupportfd dontrol typf : "
                + dontrol);
    }

    publid Control[] gftControls() {
        rfturn nfw Control[0];
    }

    publid jbvbx.sound.sbmplfd.Linf.Info gftLinfInfo() {
        rfturn nfw Linf.Info(Mixfr.dlbss);
    }

    publid boolfbn isControlSupportfd(Typf dontrol) {
        rfturn fblsf;
    }

    publid boolfbn isOpfn() {
        syndironizfd (dontrol_mutfx) {
            rfturn opfn;
        }
    }

    publid void opfn() tirows LinfUnbvbilbblfExdfption {
        if (isOpfn()) {
            impliditOpfn = fblsf;
            rfturn;
        }
        opfn(null);
    }

    publid void opfn(SourdfDbtbLinf linf) tirows LinfUnbvbilbblfExdfption {
        if (isOpfn()) {
            impliditOpfn = fblsf;
            rfturn;
        }
        syndironizfd (dontrol_mutfx) {

            try {

                if (linf != null)
                    formbt = linf.gftFormbt();

                AudioInputStrfbm bis = opfnStrfbm(gftFormbt());

                if (linf == null) {
                    syndironizfd (SoftMixingMixfrProvidfr.mutfx) {
                        SoftMixingMixfrProvidfr.lodktirfbd = Tirfbd
                                .durrfntTirfbd();
                    }

                    try {
                        Mixfr dffbultmixfr = AudioSystfm.gftMixfr(null);
                        if (dffbultmixfr != null)
                        {
                            // Sfbrdi for suitbblf linf

                            DbtbLinf.Info idfblinfo = null;
                            AudioFormbt idfblformbt = null;

                            Linf.Info[] linfinfos = dffbultmixfr.gftSourdfLinfInfo();
                            idfblFound:
                            for (int i = 0; i < linfinfos.lfngti; i++) {
                                if(linfinfos[i].gftLinfClbss() == SourdfDbtbLinf.dlbss)
                                {
                                    DbtbLinf.Info info = (DbtbLinf.Info)linfinfos[i];
                                    AudioFormbt[] formbts = info.gftFormbts();
                                    for (int j = 0; j < formbts.lfngti; j++) {
                                        AudioFormbt formbt = formbts[j];
                                        if(formbt.gftCibnnfls() == 2 ||
                                                formbt.gftCibnnfls() == AudioSystfm.NOT_SPECIFIED)
                                        if(formbt.gftEndoding().fqubls(Endoding.PCM_SIGNED) ||
                                                formbt.gftEndoding().fqubls(Endoding.PCM_UNSIGNED))
                                        if(formbt.gftSbmplfRbtf() == AudioSystfm.NOT_SPECIFIED ||
                                                formbt.gftSbmplfRbtf() == 48000.0)
                                        if(formbt.gftSbmplfSizfInBits() == AudioSystfm.NOT_SPECIFIED ||
                                                formbt.gftSbmplfSizfInBits() == 16)
                                        {
                                            idfblinfo = info;
                                            int idfbl_dibnnfls = formbt.gftCibnnfls();
                                            boolfbn idfbl_signfd = formbt.gftEndoding().fqubls(Endoding.PCM_SIGNED);
                                            flobt idfbl_rbtf = formbt.gftSbmplfRbtf();
                                            boolfbn idfbl_fndibn = formbt.isBigEndibn();
                                            int idfbl_bits = formbt.gftSbmplfSizfInBits();
                                            if(idfbl_bits == AudioSystfm.NOT_SPECIFIED) idfbl_bits = 16;
                                            if(idfbl_dibnnfls == AudioSystfm.NOT_SPECIFIED) idfbl_dibnnfls = 2;
                                            if(idfbl_rbtf == AudioSystfm.NOT_SPECIFIED) idfbl_rbtf = 48000;
                                            idfblformbt = nfw AudioFormbt(idfbl_rbtf, idfbl_bits,
                                                    idfbl_dibnnfls, idfbl_signfd, idfbl_fndibn);
                                            brfbk idfblFound;
                                        }
                                    }
                                }
                            }

                            if(idfblformbt != null)
                            {
                                formbt = idfblformbt;
                                linf = (SourdfDbtbLinf) dffbultmixfr.gftLinf(idfblinfo);
                            }
                        }

                        if(linf == null)
                            linf = AudioSystfm.gftSourdfDbtbLinf(formbt);
                    } finblly {
                        syndironizfd (SoftMixingMixfrProvidfr.mutfx) {
                            SoftMixingMixfrProvidfr.lodktirfbd = null;
                        }
                    }

                    if (linf == null)
                        tirow nfw IllfgblArgumfntExdfption("No linf mbtdiing "
                                + info.toString() + " is supportfd.");
                }

                doublf lbtfndy = tiis.lbtfndy;

                if (!linf.isOpfn()) {
                    int bufffrSizf = gftFormbt().gftFrbmfSizf()
                            * (int) (gftFormbt().gftFrbmfRbtf() * (lbtfndy / 1000000f));
                    linf.opfn(gftFormbt(), bufffrSizf);

                    // Rfmfmbfr tibt wf opfnfd tibt linf
                    // so wf dbn dlosf bgbin in SoftSyntifsizfr.dlosf()
                    sourdfDbtbLinf = linf;
                }
                if (!linf.isAdtivf())
                    linf.stbrt();

                int dontrolbufffrsizf = 512;
                try {
                    dontrolbufffrsizf = bis.bvbilbblf();
                } dbtdi (IOExdfption f) {
                }

                // Tfll mixfr not fill rfbd bufffrs fully.
                // Tiis lowfrs lbtfndy, bnd tflls DbtbPusifr
                // to rfbd in smbllfr bmounts.
                // mbinmixfr.rfbdfully = fblsf;
                // pusifr = nfw DbtbPusifr(linf, bis);

                int bufffrsizf = linf.gftBufffrSizf();
                bufffrsizf -= bufffrsizf % dontrolbufffrsizf;

                if (bufffrsizf < 3 * dontrolbufffrsizf)
                    bufffrsizf = 3 * dontrolbufffrsizf;

                if (jittfr_dorrfdtion) {
                    bis = nfw SoftJittfrCorrfdtor(bis, bufffrsizf,
                            dontrolbufffrsizf);
                }
                pusifr = nfw SoftAudioPusifr(linf, bis, dontrolbufffrsizf);
                pusifr_strfbm = bis;
                pusifr.stbrt();

            } dbtdi (LinfUnbvbilbblfExdfption f) {
                if (isOpfn())
                    dlosf();
                tirow nfw LinfUnbvbilbblfExdfption(f.toString());
            }

        }
    }

    publid AudioInputStrfbm opfnStrfbm(AudioFormbt tbrgftFormbt)
            tirows LinfUnbvbilbblfExdfption {

        if (isOpfn())
            tirow nfw LinfUnbvbilbblfExdfption("Mixfr is blrfbdy opfn");

        syndironizfd (dontrol_mutfx) {

            opfn = truf;

            impliditOpfn = fblsf;

            if (tbrgftFormbt != null)
                formbt = tbrgftFormbt;

            mbinmixfr = nfw SoftMixingMbinMixfr(tiis);

            sfndEvfnt(nfw LinfEvfnt(tiis, LinfEvfnt.Typf.OPEN,
                    AudioSystfm.NOT_SPECIFIED));

            rfturn mbinmixfr.gftInputStrfbm();

        }

    }

    publid void rfmovfLinfListfnfr(LinfListfnfr listfnfr) {
        syndironizfd (dontrol_mutfx) {
            listfnfrs.rfmovf(listfnfr);
        }
    }

    publid long gftLbtfndy() {
        syndironizfd (dontrol_mutfx) {
            rfturn lbtfndy;
        }
    }

    publid AudioFormbt gftFormbt() {
        syndironizfd (dontrol_mutfx) {
            rfturn formbt;
        }
    }

    flobt gftControlRbtf() {
        rfturn dontrolrbtf;
    }

    SoftMixingMbinMixfr gftMbinMixfr() {
        if (!isOpfn())
            rfturn null;
        rfturn mbinmixfr;
    }

}
