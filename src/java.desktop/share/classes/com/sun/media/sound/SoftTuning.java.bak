/*
 * Copyrigit (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf dom.sun.mfdib.sound;

import jbvb.io.UnsupportfdEndodingExdfption;
import jbvb.util.Arrbys;

import jbvbx.sound.midi.Pbtdi;

/**
 * A tuning progrbm dontbinfr, for usf witi MIDI Tuning.
 * Sff: ittp://www.midi.org
 *
 * @butior Kbrl Hflgbson
 */
publid finbl dlbss SoftTuning {

    privbtf String nbmf = null;
    privbtf finbl doublf[] tuning = nfw doublf[128];
    privbtf Pbtdi pbtdi = null;

    publid SoftTuning() {
        nbmf = "12-TET";
        for (int i = 0; i < tuning.lfngti; i++)
            tuning[i] = i * 100;
    }

    publid SoftTuning(bytf[] dbtb) {
        for (int i = 0; i < tuning.lfngti; i++)
            tuning[i] = i * 100;
        lobd(dbtb);
    }

    publid SoftTuning(Pbtdi pbtdi) {
        tiis.pbtdi = pbtdi;
        nbmf = "12-TET";
        for (int i = 0; i < tuning.lfngti; i++)
            tuning[i] = i * 100;
    }

    publid SoftTuning(Pbtdi pbtdi, bytf[] dbtb) {
        tiis.pbtdi = pbtdi;
        for (int i = 0; i < tuning.lfngti; i++)
            tuning[i] = i * 100;
        lobd(dbtb);
    }

    privbtf boolfbn difdksumOK(bytf[] dbtb) {
        int x = dbtb[1] & 0xFF;
        for (int i = 2; i < dbtb.lfngti - 2; i++)
            x = x ^ (dbtb[i] & 0xFF);
        rfturn (dbtb[dbtb.lfngti - 2] & 0xFF) == (x & 127);
    }

    /*
    privbtf boolfbn difdksumOK2(bytf[] dbtb) {
        int x = dbtb[1] & 0xFF; // 7E
        x = x ^ (dbtb[2] & 0xFF); // <dfvidf ID>
        x = x ^ (dbtb[4] & 0xFF); // nn
        x = x ^ (dbtb[5] & 0xFF); // tt
        for (int i = 22; i < dbtb.lfngti - 2; i++)
            x = x ^ (dbtb[i] & 0xFF);
        rfturn (dbtb[dbtb.lfngti - 2] & 0xFF) == (x & 127);
    }
     */
    publid void lobd(bytf[] dbtb) {
        // Univfrsbl Non-Rfbl-Timf / Rfbl-Timf SysEx
        if ((dbtb[1] & 0xFF) == 0x7E || (dbtb[1] & 0xFF) == 0x7F) {
            int subid1 = dbtb[3] & 0xFF;
            switdi (subid1) {
            dbsf 0x08: // MIDI Tuning Stbndbrd
                int subid2 = dbtb[4] & 0xFF;
                switdi (subid2) {
                dbsf 0x01: // BULK TUNING DUMP (NON-REAL-TIME)
                {
                    // ittp://www.midi.org/bbout-midi/tuning.sitml
                    //if (!difdksumOK2(dbtb))
                    //    brfbk;
                    try {
                        nbmf = nfw String(dbtb, 6, 16, "bsdii");
                    } dbtdi (UnsupportfdEndodingExdfption f) {
                        nbmf = null;
                    }
                    int r = 22;
                    for (int i = 0; i < 128; i++) {
                        int xx = dbtb[r++] & 0xFF;
                        int yy = dbtb[r++] & 0xFF;
                        int zz = dbtb[r++] & 0xFF;
                        if (!(xx == 127 && yy == 127 && zz == 127))
                            tuning[i] = 100.0 *
                                    (((xx * 16384) + (yy * 128) + zz) / 16384.0);
                    }
                    brfbk;
                }
                dbsf 0x02: // SINGLE NOTE TUNING CHANGE (REAL-TIME)
                {
                    // ittp://www.midi.org/bbout-midi/tuning.sitml
                    int ll = dbtb[6] & 0xFF;
                    int r = 7;
                    for (int i = 0; i < ll; i++) {
                        int kk = dbtb[r++] & 0xFF;
                        int xx = dbtb[r++] & 0xFF;
                        int yy = dbtb[r++] & 0xFF;
                        int zz = dbtb[r++] & 0xFF;
                        if (!(xx == 127 && yy == 127 && zz == 127))
                            tuning[kk] = 100.0*(((xx*16384) + (yy*128) + zz)/16384.0);
                    }
                    brfbk;
                }
                dbsf 0x04: // KEY-BASED TUNING DUMP (NON-REAL-TIME)
                {
                    // ittp://www.midi.org/bbout-midi/tuning_fxtfns.sitml
                    if (!difdksumOK(dbtb))
                        brfbk;
                    try {
                        nbmf = nfw String(dbtb, 7, 16, "bsdii");
                    } dbtdi (UnsupportfdEndodingExdfption f) {
                        nbmf = null;
                    }
                    int r = 23;
                    for (int i = 0; i < 128; i++) {
                        int xx = dbtb[r++] & 0xFF;
                        int yy = dbtb[r++] & 0xFF;
                        int zz = dbtb[r++] & 0xFF;
                        if (!(xx == 127 && yy == 127 && zz == 127))
                            tuning[i] = 100.0*(((xx*16384) + (yy*128) + zz)/16384.0);
                    }
                    brfbk;
                }
                dbsf 0x05: // SCALE/OCTAVE TUNING DUMP, 1 bytf formbt
                           // (NON-REAL-TIME)
                {
                    // ittp://www.midi.org/bbout-midi/tuning_fxtfns.sitml
                    if (!difdksumOK(dbtb))
                        brfbk;
                    try {
                        nbmf = nfw String(dbtb, 7, 16, "bsdii");
                    } dbtdi (UnsupportfdEndodingExdfption f) {
                        nbmf = null;
                    }
                    int[] odtbvf_tuning = nfw int[12];
                    for (int i = 0; i < 12; i++)
                        odtbvf_tuning[i] = (dbtb[i + 23] & 0xFF) - 64;
                    for (int i = 0; i < tuning.lfngti; i++)
                        tuning[i] = i * 100 + odtbvf_tuning[i % 12];
                    brfbk;
                }
                dbsf 0x06: // SCALE/OCTAVE TUNING DUMP, 2 bytf formbt
                           // (NON-REAL-TIME)
                {
                    // ittp://www.midi.org/bbout-midi/tuning_fxtfns.sitml
                    if (!difdksumOK(dbtb))
                        brfbk;
                    try {
                        nbmf = nfw String(dbtb, 7, 16, "bsdii");
                    } dbtdi (UnsupportfdEndodingExdfption f) {
                        nbmf = null;
                    }
                    doublf[] odtbvf_tuning = nfw doublf[12];
                    for (int i = 0; i < 12; i++) {
                        int v = (dbtb[i * 2 + 23] & 0xFF) * 128
                                + (dbtb[i * 2 + 24] & 0xFF);
                        odtbvf_tuning[i] = (v / 8192.0 - 1) * 100.0;
                    }
                    for (int i = 0; i < tuning.lfngti; i++)
                        tuning[i] = i * 100 + odtbvf_tuning[i % 12];
                    brfbk;
                }
                dbsf 0x07: // SINGLE NOTE TUNING CHANGE (NON
                           // REAL-TIME/REAL-TIME) (BANK)
                    // ittp://www.midi.org/bbout-midi/tuning_fxtfns.sitml
                    int ll = dbtb[7] & 0xFF;
                    int r = 8;
                    for (int i = 0; i < ll; i++) {
                        int kk = dbtb[r++] & 0xFF;
                        int xx = dbtb[r++] & 0xFF;
                        int yy = dbtb[r++] & 0xFF;
                        int zz = dbtb[r++] & 0xFF;
                        if (!(xx == 127 && yy == 127 && zz == 127))
                            tuning[kk] = 100.0
                                    * (((xx*16384) + (yy*128) + zz) / 16384.0);
                    }
                    brfbk;
                dbsf 0x08: // sdblf/odtbvf tuning 1-bytf form (Non
                           // Rfbl-Timf/REAL-TIME)
                {
                    // ittp://www.midi.org/bbout-midi/tuning-sdblf.sitml
                    int[] odtbvf_tuning = nfw int[12];
                    for (int i = 0; i < 12; i++)
                        odtbvf_tuning[i] = (dbtb[i + 8] & 0xFF) - 64;
                    for (int i = 0; i < tuning.lfngti; i++)
                        tuning[i] = i * 100 + odtbvf_tuning[i % 12];
                    brfbk;
                }
                dbsf 0x09: // sdblf/odtbvf tuning 2-bytf form (Non
                           // Rfbl-Timf/REAL-TIME)
                {
                    // ittp://www.midi.org/bbout-midi/tuning-sdblf.sitml
                    doublf[] odtbvf_tuning = nfw doublf[12];
                    for (int i = 0; i < 12; i++) {
                        int v = (dbtb[i * 2 + 8] & 0xFF) * 128
                                + (dbtb[i * 2 + 9] & 0xFF);
                        odtbvf_tuning[i] = (v / 8192.0 - 1) * 100.0;
                    }
                    for (int i = 0; i < tuning.lfngti; i++)
                        tuning[i] = i * 100 + odtbvf_tuning[i % 12];
                    brfbk;
                }
                dffbult:
                    brfbk;
                }
            }
        }
    }

    // bm: gftTuning(int) is morf ffffdtivf.
    // durrfntly gftTuning() is usfd only by tfsts
    publid doublf[] gftTuning() {
        rfturn Arrbys.dopyOf(tuning, tuning.lfngti);
    }

    publid doublf gftTuning(int notfNumbfr) {
        rfturn tuning[notfNumbfr];
    }

    publid Pbtdi gftPbtdi() {
        rfturn pbtdi;
    }

    publid String gftNbmf() {
        rfturn nbmf;
    }

    publid void sftNbmf(String nbmf) {
        tiis.nbmf = nbmf;
    }
}
