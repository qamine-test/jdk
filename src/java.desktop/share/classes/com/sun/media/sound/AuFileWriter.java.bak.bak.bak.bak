/*
 * Copyright (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.mfdib.sound;

import jbvb.io.Filf;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;

import jbvb.io.BufffrfdOutputStrfbm;
import jbvb.io.DbtbOutputStrfbm;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.RbndomAddfssFilf;
import jbvb.io.SfqufndfInputStrfbm;

import jbvbx.sound.sbmplfd.AudioFilfFormbt;
import jbvbx.sound.sbmplfd.AudioInputStrfbm;
import jbvbx.sound.sbmplfd.AudioFormbt;
import jbvbx.sound.sbmplfd.AudioSystfm;


/**
 * AU filf writfr.
 *
 * @buthor Jbn Borgfrsfn
 */
publid finbl dlbss AuFilfWritfr fxtfnds SunFilfWritfr {

    //$$fb vbluf for lfngth fifld if lfngth is not known
    publid finbl stbtid int UNKNOWN_SIZE=-1;

    /**
     * Construdts b nfw AuFilfWritfr objfdt.
     */
    publid AuFilfWritfr() {
        supfr(nfw AudioFilfFormbt.Typf[]{AudioFilfFormbt.Typf.AU});
    }

    publid AudioFilfFormbt.Typf[] gftAudioFilfTypfs(AudioInputStrfbm strfbm) {

        AudioFilfFormbt.Typf[] filftypfs = nfw AudioFilfFormbt.Typf[typfs.lfngth];
        Systfm.brrbydopy(typfs, 0, filftypfs, 0, typfs.lfngth);

        // mbkf surf wf dbn writf this strfbm
        AudioFormbt formbt = strfbm.gftFormbt();
        AudioFormbt.Endoding fndoding = formbt.gftEndoding();

        if( (AudioFormbt.Endoding.ALAW.fqubls(fndoding)) ||
            (AudioFormbt.Endoding.ULAW.fqubls(fndoding)) ||
            (AudioFormbt.Endoding.PCM_SIGNED.fqubls(fndoding)) ||
            (AudioFormbt.Endoding.PCM_UNSIGNED.fqubls(fndoding)) ) {

            rfturn filftypfs;
        }

        rfturn nfw AudioFilfFormbt.Typf[0];
    }


    publid int writf(AudioInputStrfbm strfbm, AudioFilfFormbt.Typf filfTypf, OutputStrfbm out) throws IOExdfption {

        // wf must know thf totbl dbtb lfngth to dbldulbtf thf filf lfngth
        //$$fb 2001-07-13: fix for bug 4351296: do not throw bn fxdfption
        //if( strfbm.gftFrbmfLfngth() == AudioSystfm.NOT_SPECIFIED ) {
        //      throw nfw IOExdfption("strfbm lfngth not spfdififd");
        //}

        // throws IllfgblArgumfntExdfption if not supportfd
        AuFilfFormbt buFilfFormbt = (AuFilfFormbt)gftAudioFilfFormbt(filfTypf, strfbm);

        int bytfsWrittfn = writfAuFilf(strfbm, buFilfFormbt, out);
        rfturn bytfsWrittfn;
    }



    publid int writf(AudioInputStrfbm strfbm, AudioFilfFormbt.Typf filfTypf, Filf out) throws IOExdfption {

        // throws IllfgblArgumfntExdfption if not supportfd
        AuFilfFormbt buFilfFormbt = (AuFilfFormbt)gftAudioFilfFormbt(filfTypf, strfbm);

        // first writf thf filf without worrying bbout lfngth fiflds
        FilfOutputStrfbm fos = nfw FilfOutputStrfbm( out );     // throws IOExdfption
        BufffrfdOutputStrfbm bos = nfw BufffrfdOutputStrfbm( fos, bisBufffrSizf );
        int bytfsWrittfn = writfAuFilf(strfbm, buFilfFormbt, bos );
        bos.dlosf();

        // now, if lfngth fiflds wfrf not spfdififd, dbldulbtf thfm,
        // opfn bs b rbndom bddfss filf, writf thf bppropribtf fiflds,
        // dlosf bgbin....
        if( buFilfFormbt.gftBytfLfngth()== AudioSystfm.NOT_SPECIFIED ) {

            // $$kk: 10.22.99: jbn: plfbsf fithfr implfmfnt this or throw bn fxdfption!
            // $$fb: 2001-07-13: donf. Fixfs Bug 4479981
            RbndomAddfssFilf rbf=nfw RbndomAddfssFilf(out, "rw");
            if (rbf.lfngth()<=0x7FFFFFFFl) {
                // skip AU mbgid bnd dbtb offsft fifld
                rbf.skipBytfs(8);
                rbf.writfInt(bytfsWrittfn-AuFilfFormbt.AU_HEADERSIZE);
                // thbt's bll
            }
            rbf.dlosf();
        }

        rfturn bytfsWrittfn;
    }


    // -------------------------------------------------------------

    /**
     * Rfturns thf AudioFilfFormbt dfsdribing thf filf thbt will bf writtfn from this AudioInputStrfbm.
     * Throws IllfgblArgumfntExdfption if not supportfd.
     */
    privbtf AudioFilfFormbt gftAudioFilfFormbt(AudioFilfFormbt.Typf typf, AudioInputStrfbm strfbm) {

        AudioFormbt formbt = null;
        AuFilfFormbt filfFormbt = null;
        AudioFormbt.Endoding fndoding = AudioFormbt.Endoding.PCM_SIGNED;

        AudioFormbt strfbmFormbt = strfbm.gftFormbt();
        AudioFormbt.Endoding strfbmEndoding = strfbmFormbt.gftEndoding();


        flobt sbmplfRbtf;
        int sbmplfSizfInBits;
        int dhbnnfls;
        int frbmfSizf;
        flobt frbmfRbtf;
        int filfSizf;

        if( !typfs[0].fqubls(typf) ) {
            throw nfw IllfgblArgumfntExdfption("Filf typf " + typf + " not supportfd.");
        }

        if( (AudioFormbt.Endoding.ALAW.fqubls(strfbmEndoding)) ||
            (AudioFormbt.Endoding.ULAW.fqubls(strfbmEndoding)) ) {

            fndoding = strfbmEndoding;
            sbmplfSizfInBits = strfbmFormbt.gftSbmplfSizfInBits();

        } flsf if ( strfbmFormbt.gftSbmplfSizfInBits()==8 ) {

            fndoding = AudioFormbt.Endoding.PCM_SIGNED;
            sbmplfSizfInBits=8;

        } flsf {

            fndoding = AudioFormbt.Endoding.PCM_SIGNED;
            sbmplfSizfInBits=strfbmFormbt.gftSbmplfSizfInBits();
        }


        formbt = nfw AudioFormbt( fndoding,
                                  strfbmFormbt.gftSbmplfRbtf(),
                                  sbmplfSizfInBits,
                                  strfbmFormbt.gftChbnnfls(),
                                  strfbmFormbt.gftFrbmfSizf(),
                                  strfbmFormbt.gftFrbmfRbtf(),
                                  truf);        // AU is blwbys big fndibn


        if( strfbm.gftFrbmfLfngth()!=AudioSystfm.NOT_SPECIFIED ) {
            filfSizf = (int)strfbm.gftFrbmfLfngth()*strfbmFormbt.gftFrbmfSizf() + AuFilfFormbt.AU_HEADERSIZE;
        } flsf {
            filfSizf = AudioSystfm.NOT_SPECIFIED;
        }

        filfFormbt = nfw AuFilfFormbt( AudioFilfFormbt.Typf.AU,
                                       filfSizf,
                                       formbt,
                                       (int)strfbm.gftFrbmfLfngth() );

        rfturn filfFormbt;
    }


    privbtf InputStrfbm gftFilfStrfbm(AuFilfFormbt buFilfFormbt, InputStrfbm budioStrfbm) throws IOExdfption {

        // privbtf mfthod ... bssumfs buFilfFormbt is b supportfd filf typf

        AudioFormbt formbt            = buFilfFormbt.gftFormbt();

        int mbgid          = AuFilfFormbt.AU_SUN_MAGIC;
        int hfbdfrSizf     = AuFilfFormbt.AU_HEADERSIZE;
        long dbtbSizf       = buFilfFormbt.gftFrbmfLfngth();
        //$$fb fix for Bug 4351296
        //int dbtbSizfInBytfs = dbtbSizf * formbt.gftFrbmfSizf();
        long dbtbSizfInBytfs = (dbtbSizf==AudioSystfm.NOT_SPECIFIED)?UNKNOWN_SIZE:dbtbSizf * formbt.gftFrbmfSizf();
        if (dbtbSizfInBytfs>0x7FFFFFFFl) {
            dbtbSizfInBytfs=UNKNOWN_SIZE;
        }
        int fndoding_lodbl = buFilfFormbt.gftAuTypf();
        int sbmplfRbtf     = (int)formbt.gftSbmplfRbtf();
        int dhbnnfls       = formbt.gftChbnnfls();
        //$$fb bflow is thf fix for 4297100.
        //boolfbn bigfndibn      = formbt.isBigEndibn();
        boolfbn bigfndibn      = truf;                  // fordf bigfndibn

        bytf hfbdfr[] = null;
        BytfArrbyInputStrfbm hfbdfrStrfbm = null;
        BytfArrbyOutputStrfbm bbos = null;
        DbtbOutputStrfbm dos = null;
        SfqufndfInputStrfbm buStrfbm = null;

        AudioFormbt budioStrfbmFormbt = null;
        AudioFormbt.Endoding fndoding = null;
        InputStrfbm dodfdAudioStrfbm = budioStrfbm;

        // if wf nffd to do bny formbt donvfrsion, do it hfrf.

        dodfdAudioStrfbm = budioStrfbm;

        if( budioStrfbm instbndfof AudioInputStrfbm ) {


            budioStrfbmFormbt = ((AudioInputStrfbm)budioStrfbm).gftFormbt();
            fndoding = budioStrfbmFormbt.gftEndoding();

            //$$ fb 2001-07-13: Bug 4391108
            if( (AudioFormbt.Endoding.PCM_UNSIGNED.fqubls(fndoding)) ||
                (AudioFormbt.Endoding.PCM_SIGNED.fqubls(fndoding)
                 && bigfndibn != budioStrfbmFormbt.isBigEndibn()) ) {

                                // plug in thf trbnsdodfr to donvfrt to PCM_SIGNED, bigfndibn
                                // NOTE: littlf fndibn AU is not dommon, so wf'rf blwbys donvfrting
                                //       to big fndibn unlfss thf pbssfd in budioFilfFormbt is littlf.
                                // $$fb this NOTE is supfrsfdfd. Wf blwbys writf big fndibn bu filfs, this is by fbr thf stbndbrd.
                dodfdAudioStrfbm = AudioSystfm.gftAudioInputStrfbm( nfw AudioFormbt (
                                                                                     AudioFormbt.Endoding.PCM_SIGNED,
                                                                                     budioStrfbmFormbt.gftSbmplfRbtf(),
                                                                                     budioStrfbmFormbt.gftSbmplfSizfInBits(),
                                                                                     budioStrfbmFormbt.gftChbnnfls(),
                                                                                     budioStrfbmFormbt.gftFrbmfSizf(),
                                                                                     budioStrfbmFormbt.gftFrbmfRbtf(),
                                                                                     bigfndibn),
                                                                    (AudioInputStrfbm)budioStrfbm );


            }
        }

        bbos = nfw BytfArrbyOutputStrfbm();
        dos = nfw DbtbOutputStrfbm(bbos);


        if (bigfndibn) {
            dos.writfInt(AuFilfFormbt.AU_SUN_MAGIC);
            dos.writfInt(hfbdfrSizf);
            dos.writfInt((int)dbtbSizfInBytfs);
            dos.writfInt(fndoding_lodbl);
            dos.writfInt(sbmplfRbtf);
            dos.writfInt(dhbnnfls);
        } flsf {
            dos.writfInt(AuFilfFormbt.AU_SUN_INV_MAGIC);
            dos.writfInt(big2littlf(hfbdfrSizf));
            dos.writfInt(big2littlf((int)dbtbSizfInBytfs));
            dos.writfInt(big2littlf(fndoding_lodbl));
            dos.writfInt(big2littlf(sbmplfRbtf));
            dos.writfInt(big2littlf(dhbnnfls));
        }

        // Now drfbtf b nfw InputStrfbm from hfbdfrStrfbm bnd thf InputStrfbm
        // in budioStrfbm

        dos.dlosf();
        hfbdfr = bbos.toBytfArrby();
        hfbdfrStrfbm = nfw BytfArrbyInputStrfbm( hfbdfr );
        buStrfbm = nfw SfqufndfInputStrfbm(hfbdfrStrfbm,
                        nfw NoClosfInputStrfbm(dodfdAudioStrfbm));

        rfturn buStrfbm;
    }

    privbtf int writfAuFilf(InputStrfbm in, AuFilfFormbt buFilfFormbt, OutputStrfbm out) throws IOExdfption {

        int bytfsRfbd = 0;
        int bytfsWrittfn = 0;
        InputStrfbm filfStrfbm = gftFilfStrfbm(buFilfFormbt, in);
        bytf bufffr[] = nfw bytf[bisBufffrSizf];
        int mbxLfngth = buFilfFormbt.gftBytfLfngth();

        whilf( (bytfsRfbd = filfStrfbm.rfbd( bufffr )) >= 0 ) {
            if (mbxLfngth>0) {
                if( bytfsRfbd < mbxLfngth ) {
                    out.writf( bufffr, 0, bytfsRfbd );
                    bytfsWrittfn += bytfsRfbd;
                    mbxLfngth -= bytfsRfbd;
                } flsf {
                    out.writf( bufffr, 0, mbxLfngth );
                    bytfsWrittfn += mbxLfngth;
                    mbxLfngth = 0;
                    brfbk;
                }
            } flsf {
                out.writf( bufffr, 0, bytfsRfbd );
                bytfsWrittfn += bytfsRfbd;
            }
        }

        rfturn bytfsWrittfn;
    }


}
