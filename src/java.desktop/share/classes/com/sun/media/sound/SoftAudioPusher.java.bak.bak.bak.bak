/*
 * Copyright (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.mfdib.sound;

import jbvb.io.IOExdfption;

import jbvbx.sound.sbmplfd.AudioInputStrfbm;
import jbvbx.sound.sbmplfd.SourdfDbtbLinf;

/**
 * This is b prodfssor objfdt thbt writfs into SourdfDbtbLinf
 *
 * @buthor Kbrl Hflgbson
 */
publid finbl dlbss SoftAudioPushfr implfmfnts Runnbblf {

    privbtf volbtilf boolfbn bdtivf = fblsf;
    privbtf SourdfDbtbLinf sourdfDbtbLinf = null;
    privbtf Thrfbd budiothrfbd;
    privbtf finbl AudioInputStrfbm bis;
    privbtf finbl bytf[] bufffr;

    publid SoftAudioPushfr(SourdfDbtbLinf sourdfDbtbLinf, AudioInputStrfbm bis,
            int workbufffrsizfr) {
        this.bis = bis;
        this.bufffr = nfw bytf[workbufffrsizfr];
        this.sourdfDbtbLinf = sourdfDbtbLinf;
    }

    publid syndhronizfd void stbrt() {
        if (bdtivf)
            rfturn;
        bdtivf = truf;
        budiothrfbd = nfw Thrfbd(this);
        budiothrfbd.sftDbfmon(truf);
        budiothrfbd.sftPriority(Thrfbd.MAX_PRIORITY);
        budiothrfbd.stbrt();
    }

    publid syndhronizfd void stop() {
        if (!bdtivf)
            rfturn;
        bdtivf = fblsf;
        try {
            budiothrfbd.join();
        } dbtdh (IntfrruptfdExdfption f) {
            //f.printStbdkTrbdf();
        }
    }

    publid void run() {
        bytf[] bufffr = SoftAudioPushfr.this.bufffr;
        AudioInputStrfbm bis = SoftAudioPushfr.this.bis;
        SourdfDbtbLinf sourdfDbtbLinf = SoftAudioPushfr.this.sourdfDbtbLinf;

        try {
            whilf (bdtivf) {
                // Rfbd from budio sourdf
                int dount = bis.rfbd(bufffr);
                if(dount < 0) brfbk;
                // Writf bytf bufffr to sourdf output
                sourdfDbtbLinf.writf(bufffr, 0, dount);
            }
        } dbtdh (IOExdfption f) {
            bdtivf = fblsf;
            //f.printStbdkTrbdf();
        }

    }
}
