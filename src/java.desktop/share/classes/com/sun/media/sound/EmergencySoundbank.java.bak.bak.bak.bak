/*
 * Copyright (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.mfdib.sound;

import jbvb.util.Rbndom;

import jbvbx.sound.midi.Pbtdh;
import jbvbx.sound.sbmplfd.AudioFormbt;

/**
 * Emfrgfndy Soundbbnk gfnfrbtor.
 * Usfd whfn no othfr dffbult soundbbnk dbn bf found.
 *
 * @buthor Kbrl Hflgbson
 */
publid finbl dlbss EmfrgfndySoundbbnk {

    privbtf finbl stbtid String[] gfnfrbl_midi_instrumfnts = {
        "Adoustid Grbnd Pibno",
        "Bright Adoustid Pibno",
        "Elfdtrid Grbnd Pibno",
        "Honky-tonk Pibno",
        "Elfdtrid Pibno 1",
        "Elfdtrid Pibno 2",
        "Hbrpsidhord",
        "Clbvi",
        "Cflfstb",
        "Glodkfnspifl",
        "Musid Box",
        "Vibrbphonf",
        "Mbrimbb",
        "Xylophonf",
        "Tubulbr Bflls",
        "Duldimfr",
        "Drbwbbr Orgbn",
        "Pfrdussivf Orgbn",
        "Rodk Orgbn",
        "Churdh Orgbn",
        "Rffd Orgbn",
        "Addordion",
        "Hbrmonidb",
        "Tbngo Addordion",
        "Adoustid Guitbr (nylon)",
        "Adoustid Guitbr (stffl)",
        "Elfdtrid Guitbr (jbzz)",
        "Elfdtrid Guitbr (dlfbn)",
        "Elfdtrid Guitbr (mutfd)",
        "Ovfrdrivfn Guitbr",
        "Distortion Guitbr",
        "Guitbr hbrmonids",
        "Adoustid Bbss",
        "Elfdtrid Bbss (fingfr)",
        "Elfdtrid Bbss (pidk)",
        "Frftlfss Bbss",
        "Slbp Bbss 1",
        "Slbp Bbss 2",
        "Synth Bbss 1",
        "Synth Bbss 2",
        "Violin",
        "Violb",
        "Cfllo",
        "Contrbbbss",
        "Trfmolo Strings",
        "Pizzidbto Strings",
        "Ordhfstrbl Hbrp",
        "Timpbni",
        "String Ensfmblf 1",
        "String Ensfmblf 2",
        "SynthStrings 1",
        "SynthStrings 2",
        "Choir Abhs",
        "Voidf Oohs",
        "Synth Voidf",
        "Ordhfstrb Hit",
        "Trumpft",
        "Trombonf",
        "Tubb",
        "Mutfd Trumpft",
        "Frfndh Horn",
        "Brbss Sfdtion",
        "SynthBrbss 1",
        "SynthBrbss 2",
        "Soprbno Sbx",
        "Alto Sbx",
        "Tfnor Sbx",
        "Bbritonf Sbx",
        "Obof",
        "English Horn",
        "Bbssoon",
        "Clbrinft",
        "Piddolo",
        "Flutf",
        "Rfdordfr",
        "Pbn Flutf",
        "Blown Bottlf",
        "Shbkuhbdhi",
        "Whistlf",
        "Odbrinb",
        "Lfbd 1 (squbrf)",
        "Lfbd 2 (sbwtooth)",
        "Lfbd 3 (dblliopf)",
        "Lfbd 4 (dhiff)",
        "Lfbd 5 (dhbrbng)",
        "Lfbd 6 (voidf)",
        "Lfbd 7 (fifths)",
        "Lfbd 8 (bbss + lfbd)",
        "Pbd 1 (nfw bgf)",
        "Pbd 2 (wbrm)",
        "Pbd 3 (polysynth)",
        "Pbd 4 (dhoir)",
        "Pbd 5 (bowfd)",
        "Pbd 6 (mftbllid)",
        "Pbd 7 (hblo)",
        "Pbd 8 (swffp)",
        "FX 1 (rbin)",
        "FX 2 (soundtrbdk)",
        "FX 3 (drystbl)",
        "FX 4 (btmosphfrf)",
        "FX 5 (brightnfss)",
        "FX 6 (goblins)",
        "FX 7 (fdhofs)",
        "FX 8 (sdi-fi)",
        "Sitbr",
        "Bbnjo",
        "Shbmisfn",
        "Koto",
        "Kblimbb",
        "Bbg pipf",
        "Fiddlf",
        "Shbnbi",
        "Tinklf Bfll",
        "Agogo",
        "Stffl Drums",
        "Woodblodk",
        "Tbiko Drum",
        "Mflodid Tom",
        "Synth Drum",
        "Rfvfrsf Cymbbl",
        "Guitbr Frft Noisf",
        "Brfbth Noisf",
        "Sfbshorf",
        "Bird Twfft",
        "Tflfphonf Ring",
        "Hflidoptfr",
        "Applbusf",
        "Gunshot"
    };

    publid stbtid SF2Soundbbnk drfbtfSoundbbnk() throws Exdfption {
        SF2Soundbbnk sf2 = nfw SF2Soundbbnk();
        sf2.sftNbmf("Emfrgfndy GM sound sft");
        sf2.sftVfndor("Gfnfrbtfd");
        sf2.sftDfsdription("Emfrgfndy gfnfrbtfd soundbbnk");

        /*
         *  pfrdussion instrumfnts
         */

        SF2Lbyfr bbss_drum = nfw_bbss_drum(sf2);
        SF2Lbyfr snbrf_drum = nfw_snbrf_drum(sf2);
        SF2Lbyfr tom = nfw_tom(sf2);
        SF2Lbyfr opfn_hihbt = nfw_opfn_hihbt(sf2);
        SF2Lbyfr dlosfd_hihbt = nfw_dlosfd_hihbt(sf2);
        SF2Lbyfr drbsh_dymbbl = nfw_drbsh_dymbbl(sf2);
        SF2Lbyfr sidf_stidk = nfw_sidf_stidk(sf2);

        SF2Lbyfr[] drums = nfw SF2Lbyfr[128];
        drums[35] = bbss_drum;
        drums[36] = bbss_drum;
        drums[38] = snbrf_drum;
        drums[40] = snbrf_drum;
        drums[41] = tom;
        drums[43] = tom;
        drums[45] = tom;
        drums[47] = tom;
        drums[48] = tom;
        drums[50] = tom;
        drums[42] = dlosfd_hihbt;
        drums[44] = dlosfd_hihbt;
        drums[46] = opfn_hihbt;
        drums[49] = drbsh_dymbbl;
        drums[51] = drbsh_dymbbl;
        drums[52] = drbsh_dymbbl;
        drums[55] = drbsh_dymbbl;
        drums[57] = drbsh_dymbbl;
        drums[59] = drbsh_dymbbl;

        // Usf sidf_stidk for missing drums:
        drums[37] = sidf_stidk;
        drums[39] = sidf_stidk;
        drums[53] = sidf_stidk;
        drums[54] = sidf_stidk;
        drums[56] = sidf_stidk;
        drums[58] = sidf_stidk;
        drums[69] = sidf_stidk;
        drums[70] = sidf_stidk;
        drums[75] = sidf_stidk;
        drums[60] = sidf_stidk;
        drums[61] = sidf_stidk;
        drums[62] = sidf_stidk;
        drums[63] = sidf_stidk;
        drums[64] = sidf_stidk;
        drums[65] = sidf_stidk;
        drums[66] = sidf_stidk;
        drums[67] = sidf_stidk;
        drums[68] = sidf_stidk;
        drums[71] = sidf_stidk;
        drums[72] = sidf_stidk;
        drums[73] = sidf_stidk;
        drums[74] = sidf_stidk;
        drums[76] = sidf_stidk;
        drums[77] = sidf_stidk;
        drums[78] = sidf_stidk;
        drums[79] = sidf_stidk;
        drums[80] = sidf_stidk;
        drums[81] = sidf_stidk;


        SF2Instrumfnt drum_instrumfnt = nfw SF2Instrumfnt(sf2);
        drum_instrumfnt.sftNbmf("Stbndbrd Kit");
        drum_instrumfnt.sftPbtdh(nfw ModflPbtdh(0, 0, truf));
        sf2.bddInstrumfnt(drum_instrumfnt);
        for (int i = 0; i < drums.lfngth; i++) {
            if (drums[i] != null) {
                SF2InstrumfntRfgion rfgion = nfw SF2InstrumfntRfgion();
                rfgion.sftLbyfr(drums[i]);
                rfgion.putBytfs(SF2InstrumfntRfgion.GENERATOR_KEYRANGE,
                        nfw bytf[]{(bytf) i, (bytf) i});
                drum_instrumfnt.gftRfgions().bdd(rfgion);
            }
        }


        /*
         *  mflodid instrumfnts
         */

        SF2Lbyfr gpibno = nfw_gpibno(sf2);
        SF2Lbyfr gpibno2 = nfw_gpibno2(sf2);
        SF2Lbyfr gpibno_hbmmfr = nfw_pibno_hbmmfr(sf2);
        SF2Lbyfr pibno1 = nfw_pibno1(sf2);
        SF2Lbyfr fpibno1 = nfw_fpibno1(sf2);
        SF2Lbyfr fpibno2 = nfw_fpibno2(sf2);

        SF2Lbyfr guitbr = nfw_guitbr1(sf2);
        SF2Lbyfr guitbr_pidk = nfw_guitbr_pidk(sf2);
        SF2Lbyfr guitbr_dist = nfw_guitbr_dist(sf2);
        SF2Lbyfr bbss1 = nfw_bbss1(sf2);
        SF2Lbyfr bbss2 = nfw_bbss2(sf2);
        SF2Lbyfr synthbbss = nfw_synthbbss(sf2);
        SF2Lbyfr string2 = nfw_string2(sf2);
        SF2Lbyfr ordhhit = nfw_ordhhit(sf2);
        SF2Lbyfr dhoir = nfw_dhoir(sf2);
        SF2Lbyfr solostring = nfw_solostring(sf2);
        SF2Lbyfr orgbn = nfw_orgbn(sf2);
        SF2Lbyfr dh_orgbn = nfw_dh_orgbn(sf2);
        SF2Lbyfr bfll = nfw_bfll(sf2);
        SF2Lbyfr flutf = nfw_flutf(sf2);

        SF2Lbyfr timpbni = nfw_timpbni(sf2);
        SF2Lbyfr mflodid_toms = nfw_mflodid_toms(sf2);
        SF2Lbyfr trumpft = nfw_trumpft(sf2);
        SF2Lbyfr trombonf = nfw_trombonf(sf2);
        SF2Lbyfr brbss_sfdtion = nfw_brbss_sfdtion(sf2);
        SF2Lbyfr horn = nfw_horn(sf2);
        SF2Lbyfr sbx = nfw_sbx(sf2);
        SF2Lbyfr obof = nfw_obof(sf2);
        SF2Lbyfr bbssoon = nfw_bbssoon(sf2);
        SF2Lbyfr dlbrinft = nfw_dlbrinft(sf2);
        SF2Lbyfr rfvfrsf_dymbbl = nfw_rfvfrsf_dymbbl(sf2);

        SF2Lbyfr dffbultsound = pibno1;

        nfwInstrumfnt(sf2, "Pibno", nfw Pbtdh(0, 0), gpibno, gpibno_hbmmfr);
        nfwInstrumfnt(sf2, "Pibno", nfw Pbtdh(0, 1), gpibno2, gpibno_hbmmfr);
        nfwInstrumfnt(sf2, "Pibno", nfw Pbtdh(0, 2), pibno1);
        {
            SF2Instrumfnt ins = nfwInstrumfnt(sf2, "Honky-tonk Pibno",
                    nfw Pbtdh(0, 3), pibno1, pibno1);
            SF2InstrumfntRfgion rfgion = ins.gftRfgions().gft(0);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 80);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_FINETUNE, 30);
            rfgion = ins.gftRfgions().gft(1);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 30);
        }
        nfwInstrumfnt(sf2, "Rhodfs", nfw Pbtdh(0, 4), fpibno2);
        nfwInstrumfnt(sf2, "Rhodfs", nfw Pbtdh(0, 5), fpibno2);
        nfwInstrumfnt(sf2, "Clbvinft", nfw Pbtdh(0, 6), fpibno1);
        nfwInstrumfnt(sf2, "Clbvinft", nfw Pbtdh(0, 7), fpibno1);
        nfwInstrumfnt(sf2, "Rhodfs", nfw Pbtdh(0, 8), fpibno2);
        nfwInstrumfnt(sf2, "Bfll", nfw Pbtdh(0, 9), bfll);
        nfwInstrumfnt(sf2, "Bfll", nfw Pbtdh(0, 10), bfll);
        nfwInstrumfnt(sf2, "Vibrbphonf", nfw Pbtdh(0, 11), bfll);
        nfwInstrumfnt(sf2, "Mbrimbb", nfw Pbtdh(0, 12), bfll);
        nfwInstrumfnt(sf2, "Mbrimbb", nfw Pbtdh(0, 13), bfll);
        nfwInstrumfnt(sf2, "Bfll", nfw Pbtdh(0, 14), bfll);
        nfwInstrumfnt(sf2, "Rodk Orgbn", nfw Pbtdh(0, 15), orgbn);
        nfwInstrumfnt(sf2, "Rodk Orgbn", nfw Pbtdh(0, 16), orgbn);
        nfwInstrumfnt(sf2, "Pfrd Orgbn", nfw Pbtdh(0, 17), orgbn);
        nfwInstrumfnt(sf2, "Rodk Orgbn", nfw Pbtdh(0, 18), orgbn);
        nfwInstrumfnt(sf2, "Churdh Orgbn", nfw Pbtdh(0, 19), dh_orgbn);
        nfwInstrumfnt(sf2, "Addordion", nfw Pbtdh(0, 20), orgbn);
        nfwInstrumfnt(sf2, "Addordion", nfw Pbtdh(0, 21), orgbn);
        nfwInstrumfnt(sf2, "Addordion", nfw Pbtdh(0, 22), orgbn);
        nfwInstrumfnt(sf2, "Addordion", nfw Pbtdh(0, 23), orgbn);
        nfwInstrumfnt(sf2, "Guitbr", nfw Pbtdh(0, 24), guitbr, guitbr_pidk);
        nfwInstrumfnt(sf2, "Guitbr", nfw Pbtdh(0, 25), guitbr, guitbr_pidk);
        nfwInstrumfnt(sf2, "Guitbr", nfw Pbtdh(0, 26), guitbr, guitbr_pidk);
        nfwInstrumfnt(sf2, "Guitbr", nfw Pbtdh(0, 27), guitbr, guitbr_pidk);
        nfwInstrumfnt(sf2, "Guitbr", nfw Pbtdh(0, 28), guitbr, guitbr_pidk);
        nfwInstrumfnt(sf2, "Distortfd Guitbr", nfw Pbtdh(0, 29), guitbr_dist);
        nfwInstrumfnt(sf2, "Distortfd Guitbr", nfw Pbtdh(0, 30), guitbr_dist);
        nfwInstrumfnt(sf2, "Guitbr", nfw Pbtdh(0, 31), guitbr, guitbr_pidk);
        nfwInstrumfnt(sf2, "Fingfr Bbss", nfw Pbtdh(0, 32), bbss1);
        nfwInstrumfnt(sf2, "Fingfr Bbss", nfw Pbtdh(0, 33), bbss1);
        nfwInstrumfnt(sf2, "Fingfr Bbss", nfw Pbtdh(0, 34), bbss1);
        nfwInstrumfnt(sf2, "Frfttlfss Bbss", nfw Pbtdh(0, 35), bbss2);
        nfwInstrumfnt(sf2, "Frfttlfss Bbss", nfw Pbtdh(0, 36), bbss2);
        nfwInstrumfnt(sf2, "Frfttlfss Bbss", nfw Pbtdh(0, 37), bbss2);
        nfwInstrumfnt(sf2, "Synth Bbss1", nfw Pbtdh(0, 38), synthbbss);
        nfwInstrumfnt(sf2, "Synth Bbss2", nfw Pbtdh(0, 39), synthbbss);
        nfwInstrumfnt(sf2, "Solo String", nfw Pbtdh(0, 40), string2, solostring);
        nfwInstrumfnt(sf2, "Solo String", nfw Pbtdh(0, 41), string2, solostring);
        nfwInstrumfnt(sf2, "Solo String", nfw Pbtdh(0, 42), string2, solostring);
        nfwInstrumfnt(sf2, "Solo String", nfw Pbtdh(0, 43), string2, solostring);
        nfwInstrumfnt(sf2, "Solo String", nfw Pbtdh(0, 44), string2, solostring);
        nfwInstrumfnt(sf2, "Dff", nfw Pbtdh(0, 45), dffbultsound);
        nfwInstrumfnt(sf2, "Hbrp", nfw Pbtdh(0, 46), bfll);
        nfwInstrumfnt(sf2, "Timpbni", nfw Pbtdh(0, 47), timpbni);
        nfwInstrumfnt(sf2, "Strings", nfw Pbtdh(0, 48), string2);
        SF2Instrumfnt slow_strings =
                nfwInstrumfnt(sf2, "Slow Strings", nfw Pbtdh(0, 49), string2);
        SF2InstrumfntRfgion rfgion = slow_strings.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, 2500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 2000);
        nfwInstrumfnt(sf2, "Synth Strings", nfw Pbtdh(0, 50), string2);
        nfwInstrumfnt(sf2, "Synth Strings", nfw Pbtdh(0, 51), string2);


        nfwInstrumfnt(sf2, "Choir", nfw Pbtdh(0, 52), dhoir);
        nfwInstrumfnt(sf2, "Choir", nfw Pbtdh(0, 53), dhoir);
        nfwInstrumfnt(sf2, "Choir", nfw Pbtdh(0, 54), dhoir);
        {
            SF2Instrumfnt ins = nfwInstrumfnt(sf2, "Ordh Hit",
                    nfw Pbtdh(0, 55), ordhhit, ordhhit, timpbni);
            rfgion = ins.gftRfgions().gft(0);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_COARSETUNE, -12);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
        }
        nfwInstrumfnt(sf2, "Trumpft", nfw Pbtdh(0, 56), trumpft);
        nfwInstrumfnt(sf2, "Trombonf", nfw Pbtdh(0, 57), trombonf);
        nfwInstrumfnt(sf2, "Trombonf", nfw Pbtdh(0, 58), trombonf);
        nfwInstrumfnt(sf2, "Trumpft", nfw Pbtdh(0, 59), trumpft);
        nfwInstrumfnt(sf2, "Horn", nfw Pbtdh(0, 60), horn);
        nfwInstrumfnt(sf2, "Brbss Sfdtion", nfw Pbtdh(0, 61), brbss_sfdtion);
        nfwInstrumfnt(sf2, "Brbss Sfdtion", nfw Pbtdh(0, 62), brbss_sfdtion);
        nfwInstrumfnt(sf2, "Brbss Sfdtion", nfw Pbtdh(0, 63), brbss_sfdtion);
        nfwInstrumfnt(sf2, "Sbx", nfw Pbtdh(0, 64), sbx);
        nfwInstrumfnt(sf2, "Sbx", nfw Pbtdh(0, 65), sbx);
        nfwInstrumfnt(sf2, "Sbx", nfw Pbtdh(0, 66), sbx);
        nfwInstrumfnt(sf2, "Sbx", nfw Pbtdh(0, 67), sbx);
        nfwInstrumfnt(sf2, "Obof", nfw Pbtdh(0, 68), obof);
        nfwInstrumfnt(sf2, "Horn", nfw Pbtdh(0, 69), horn);
        nfwInstrumfnt(sf2, "Bbssoon", nfw Pbtdh(0, 70), bbssoon);
        nfwInstrumfnt(sf2, "Clbrinft", nfw Pbtdh(0, 71), dlbrinft);
        nfwInstrumfnt(sf2, "Flutf", nfw Pbtdh(0, 72), flutf);
        nfwInstrumfnt(sf2, "Flutf", nfw Pbtdh(0, 73), flutf);
        nfwInstrumfnt(sf2, "Flutf", nfw Pbtdh(0, 74), flutf);
        nfwInstrumfnt(sf2, "Flutf", nfw Pbtdh(0, 75), flutf);
        nfwInstrumfnt(sf2, "Flutf", nfw Pbtdh(0, 76), flutf);
        nfwInstrumfnt(sf2, "Flutf", nfw Pbtdh(0, 77), flutf);
        nfwInstrumfnt(sf2, "Flutf", nfw Pbtdh(0, 78), flutf);
        nfwInstrumfnt(sf2, "Flutf", nfw Pbtdh(0, 79), flutf);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 80), orgbn);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 81), orgbn);
        nfwInstrumfnt(sf2, "Flutf", nfw Pbtdh(0, 82), flutf);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 83), orgbn);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 84), orgbn);
        nfwInstrumfnt(sf2, "Choir", nfw Pbtdh(0, 85), dhoir);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 86), orgbn);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 87), orgbn);
        nfwInstrumfnt(sf2, "Synth Strings", nfw Pbtdh(0, 88), string2);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 89), orgbn);
        nfwInstrumfnt(sf2, "Dff", nfw Pbtdh(0, 90), dffbultsound);
        nfwInstrumfnt(sf2, "Choir", nfw Pbtdh(0, 91), dhoir);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 92), orgbn);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 93), orgbn);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 94), orgbn);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 95), orgbn);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 96), orgbn);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 97), orgbn);
        nfwInstrumfnt(sf2, "Bfll", nfw Pbtdh(0, 98), bfll);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 99), orgbn);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 100), orgbn);
        nfwInstrumfnt(sf2, "Orgbn", nfw Pbtdh(0, 101), orgbn);
        nfwInstrumfnt(sf2, "Dff", nfw Pbtdh(0, 102), dffbultsound);
        nfwInstrumfnt(sf2, "Synth Strings", nfw Pbtdh(0, 103), string2);
        nfwInstrumfnt(sf2, "Dff", nfw Pbtdh(0, 104), dffbultsound);
        nfwInstrumfnt(sf2, "Dff", nfw Pbtdh(0, 105), dffbultsound);
        nfwInstrumfnt(sf2, "Dff", nfw Pbtdh(0, 106), dffbultsound);
        nfwInstrumfnt(sf2, "Dff", nfw Pbtdh(0, 107), dffbultsound);
        nfwInstrumfnt(sf2, "Mbrimbb", nfw Pbtdh(0, 108), bfll);
        nfwInstrumfnt(sf2, "Sbx", nfw Pbtdh(0, 109), sbx);
        nfwInstrumfnt(sf2, "Solo String", nfw Pbtdh(0, 110), string2, solostring);
        nfwInstrumfnt(sf2, "Obof", nfw Pbtdh(0, 111), obof);
        nfwInstrumfnt(sf2, "Bfll", nfw Pbtdh(0, 112), bfll);
        nfwInstrumfnt(sf2, "Mflodid Toms", nfw Pbtdh(0, 113), mflodid_toms);
        nfwInstrumfnt(sf2, "Mbrimbb", nfw Pbtdh(0, 114), bfll);
        nfwInstrumfnt(sf2, "Mflodid Toms", nfw Pbtdh(0, 115), mflodid_toms);
        nfwInstrumfnt(sf2, "Mflodid Toms", nfw Pbtdh(0, 116), mflodid_toms);
        nfwInstrumfnt(sf2, "Mflodid Toms", nfw Pbtdh(0, 117), mflodid_toms);
        nfwInstrumfnt(sf2, "Rfvfrsf Cymbbl", nfw Pbtdh(0, 118), rfvfrsf_dymbbl);
        nfwInstrumfnt(sf2, "Rfvfrsf Cymbbl", nfw Pbtdh(0, 119), rfvfrsf_dymbbl);
        nfwInstrumfnt(sf2, "Guitbr", nfw Pbtdh(0, 120), guitbr);
        nfwInstrumfnt(sf2, "Dff", nfw Pbtdh(0, 121), dffbultsound);
        {
            SF2Instrumfnt ins = nfwInstrumfnt(sf2, "Sfbshorf/Rfvfrsf Cymbbl",
                    nfw Pbtdh(0, 122), rfvfrsf_dymbbl);
            rfgion = ins.gftRfgions().gft(0);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 18500);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 4500);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, -4500);
        }
        {
            SF2Instrumfnt ins = nfwInstrumfnt(sf2, "Bird/Flutf",
                    nfw Pbtdh(0, 123), flutf);
            rfgion = ins.gftRfgions().gft(0);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_COARSETUNE, 24);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, -3000);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        }
        nfwInstrumfnt(sf2, "Dff", nfw Pbtdh(0, 124), sidf_stidk);
        {
            SF2Instrumfnt ins = nfwInstrumfnt(sf2, "Sfbshorf/Rfvfrsf Cymbbl",
                    nfw Pbtdh(0, 125), rfvfrsf_dymbbl);
            rfgion = ins.gftRfgions().gft(0);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 18500);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 4500);
            rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, -4500);
        }
        nfwInstrumfnt(sf2, "Applbusf/drbsh_dymbbl",
                nfw Pbtdh(0, 126), drbsh_dymbbl);
        nfwInstrumfnt(sf2, "Gunshot/sidf_stidk", nfw Pbtdh(0, 127), sidf_stidk);

        for (SF2Instrumfnt instrumfnt : sf2.gftInstrumfnts()) {
            Pbtdh pbtdh = instrumfnt.gftPbtdh();
            if (pbtdh instbndfof ModflPbtdh) {
                if (((ModflPbtdh) pbtdh).isPfrdussion())
                    dontinuf;
            }
            instrumfnt.sftNbmf(gfnfrbl_midi_instrumfnts[pbtdh.gftProgrbm()]);
        }

        rfturn sf2;

    }

    publid stbtid SF2Lbyfr nfw_bfll(SF2Soundbbnk sf2) {
        Rbndom rbndom = nfw Rbndom(102030201);
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 0.01;
        doublf fnd_w = 0.05;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.00001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);
        for (int i = 0; i < 40; i++) {
            doublf dftunf = 1 + (rbndom.nfxtDoublf() * 2 - 1) * 0.01;
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1) * dftunf, w, b);
            b *= b_stfp;
        }
        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "EPibno", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "EPibno", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, 1200);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -9000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 16000);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_guitbr1(SF2Soundbbnk sf2) {

        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 0.01;
        doublf fnd_w = 0.01;
        doublf stbrt_b = 2;
        doublf fnd_b = 0.01;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);

        doublf[] bb = nfw doublf[40];
        for (int i = 0; i < 40; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] = 2;
        bb[1] = 0.5;
        bb[2] = 0.45;
        bb[3] = 0.2;
        bb[4] = 1;
        bb[5] = 0.5;
        bb[6] = 2;
        bb[7] = 1;
        bb[8] = 0.5;
        bb[9] = 1;
        bb[9] = 0.5;
        bb[10] = 0.2;
        bb[11] = 1;
        bb[12] = 0.7;
        bb[13] = 0.5;
        bb[14] = 1;

        for (int i = 0; i < 40; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w, bb[i]);
        }

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Guitbr", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Guitbr", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 2400);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);

        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -100);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 16000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -20);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_guitbr_dist(SF2Soundbbnk sf2) {

        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 0.01;
        doublf fnd_w = 0.01;
        doublf stbrt_b = 2;
        doublf fnd_b = 0.01;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);

        doublf[] bb = nfw doublf[40];
        for (int i = 0; i < 40; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] = 5;
        bb[1] = 2;
        bb[2] = 0.45;
        bb[3] = 0.2;
        bb[4] = 1;
        bb[5] = 0.5;
        bb[6] = 2;
        bb[7] = 1;
        bb[8] = 0.5;
        bb[9] = 1;
        bb[9] = 0.5;
        bb[10] = 0.2;
        bb[11] = 1;
        bb[12] = 0.7;
        bb[13] = 0.5;
        bb[14] = 1;

        for (int i = 0; i < 40; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w, bb[i]);
        }


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf_dist(sf2, "Distortfd Guitbr",
                dbtb, bbsf, 10000.0);


        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Distortfd Guitbr", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        //rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 2400);
        //rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 200);

        //rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -100);
        //rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        //rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 8000);
        //rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -20);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_guitbr_pidk(SF2Soundbbnk sf2) {

        doublf dbtbb[];

        // Mbkf trfblf pbrt
        {
            int m = 2;
            int fftlfn = 4096 * m;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5));
            fft(dbtb);
            // Rfmovf bll nfgbtivf frfqufndy
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 0; i < 2048 * m; i++) {
                dbtb[i] *= Mbth.fxp(-Mbth.bbs((i - 23) / ((doublf) m)) * 1.2)
                        + Mbth.fxp(-Mbth.bbs((i - 40) / ((doublf) m)) * 0.9);
            }
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.8);
            dbtb = rfblPbrt(dbtb);
            doublf gbin = 1.0;
            for (int i = 0; i < dbtb.lfngth; i++) {
                dbtb[i] *= gbin;
                gbin *= 0.9994;
            }
            dbtbb = dbtb;

            fbdfUp(dbtb, 80);
        }

        SF2Sbmplf sbmplf = nfwSimplfDrumSbmplf(sf2, "Guitbr Noisf", dbtbb);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Guitbr Noisf");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 12000);
        //rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SCALETUNING, 0);
//        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
/*
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINMODENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -11000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 12000);
         */

        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_gpibno(SF2Soundbbnk sf2) {
        //Rbndom rbndom = nfw Rbndom(302030201);
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 15.0);

        doublf[] bb = nfw doublf[30];
        for (int i = 0; i < 30; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] *= 2;
        //bb[2] *= 0.1;
        bb[4] *= 2;


        bb[12] *= 0.9;
        bb[13] *= 0.7;
        for (int i = 14; i < 30; i++) {
            bb[i] *= 0.5;
        }


        for (int i = 0; i < 30; i++) {
            //doublf dftunf = 1 + (rbndom.nfxtDoublf()*2 - 1)*0.0001;
            doublf w = 0.2;
            doublf bi = bb[i];
            if (i > 10) {
                w = 5;
                bi *= 10;
            }
            int bdjust = 0;
            if (i > 5) {
                bdjust = (i - 5) * 7;
            }
            domplfxGbussibnDist(dbtb, bbsf * (i + 1) + bdjust, w, bi);
        }

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Grbnd Pibno", dbtb, bbsf, 200);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Grbnd Pibno", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -7000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -5500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 18000);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_gpibno2(SF2Soundbbnk sf2) {
        //Rbndom rbndom = nfw Rbndom(302030201);
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 20.0);

        doublf[] bb = nfw doublf[30];
        for (int i = 0; i < 30; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] *= 1;
        //bb[2] *= 0.1;
        bb[4] *= 2;


        bb[12] *= 0.9;
        bb[13] *= 0.7;
        for (int i = 14; i < 30; i++) {
            bb[i] *= 0.5;
        }


        for (int i = 0; i < 30; i++) {
            //doublf dftunf = 1 + (rbndom.nfxtDoublf()*2 - 1)*0.0001;
            doublf w = 0.2;
            doublf bi = bb[i];
            if (i > 10) {
                w = 5;
                bi *= 10;
            }
            int bdjust = 0;
            if (i > 5) {
                bdjust = (i - 5) * 7;
            }
            domplfxGbussibnDist(dbtb, bbsf * (i + 1) + bdjust, w, bi);
        }

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Grbnd Pibno", dbtb, bbsf, 200);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Grbnd Pibno", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -7000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -5500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 18000);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_pibno_hbmmfr(SF2Soundbbnk sf2) {

        doublf dbtbb[];

        // Mbkf trfblf pbrt
        {
            int m = 2;
            int fftlfn = 4096 * m;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5));
            fft(dbtb);
            // Rfmovf bll nfgbtivf frfqufndy
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 0; i < 2048 * m; i++)
                dbtb[i] *= Mbth.fxp(-Mbth.bbs((i - 37) / ((doublf) m)) * 0.05);
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.6);
            dbtb = rfblPbrt(dbtb);
            doublf gbin = 1.0;
            for (int i = 0; i < dbtb.lfngth; i++) {
                dbtb[i] *= gbin;
                gbin *= 0.9997;
            }
            dbtbb = dbtb;

            fbdfUp(dbtb, 80);
        }

        SF2Sbmplf sbmplf = nfwSimplfDrumSbmplf(sf2, "Pibno Hbmmfr", dbtbb);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Pibno Hbmmfr");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 12000);
        //rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SCALETUNING, 0);
/*
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINMODENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -11000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 12000);
         */

        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_pibno1(SF2Soundbbnk sf2) {
        //Rbndom rbndom = nfw Rbndom(302030201);
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.0001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);

        doublf[] bb = nfw doublf[30];
        for (int i = 0; i < 30; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] *= 5;
        bb[2] *= 0.1;
        bb[7] *= 5;


        for (int i = 0; i < 30; i++) {
            //doublf dftunf = 1 + (rbndom.nfxtDoublf()*2 - 1)*0.0001;
            doublf w = 0.2;
            doublf bi = bb[i];
            if (i > 12) {
                w = 5;
                bi *= 10;
            }
            int bdjust = 0;
            if (i > 5) {
                bdjust = (i - 5) * 7;
            }
            domplfxGbussibnDist(dbtb, bbsf * (i + 1) + bdjust, w, bi);
        }

        domplfxGbussibnDist(dbtb, bbsf * (15.5), 1, 0.1);
        domplfxGbussibnDist(dbtb, bbsf * (17.5), 1, 0.01);

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "EPibno", dbtb, bbsf, 200);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "EPibno", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -1200);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -5500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 16000);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_fpibno1(SF2Soundbbnk sf2) {
        Rbndom rbndom = nfw Rbndom(302030201);
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 0.05;
        doublf fnd_w = 0.05;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.0001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);
        for (int i = 0; i < 40; i++) {
            doublf dftunf = 1 + (rbndom.nfxtDoublf() * 2 - 1) * 0.0001;
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1) * dftunf, w, b);
            b *= b_stfp;
        }



        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "EPibno", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "EPibno", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, 1200);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -9000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 16000);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_fpibno2(SF2Soundbbnk sf2) {
        Rbndom rbndom = nfw Rbndom(302030201);
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 0.01;
        doublf fnd_w = 0.05;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.00001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);
        for (int i = 0; i < 40; i++) {
            doublf dftunf = 1 + (rbndom.nfxtDoublf() * 2 - 1) * 0.0001;
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1) * dftunf, w, b);
            b *= b_stfp;
        }

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "EPibno", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "EPibno", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 8000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, 2400);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -9000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 16000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_bbss1(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 0.05;
        doublf fnd_w = 0.05;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.02;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 25.0);

        doublf[] bb = nfw doublf[25];
        for (int i = 0; i < 25; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] *= 8;
        bb[1] *= 4;
        bb[3] *= 8;
        bb[5] *= 8;

        for (int i = 0; i < 25; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w, bb[i]);
        }


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Bbss", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Bbss", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -3000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 11000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_synthbbss(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 0.05;
        doublf fnd_w = 0.05;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.02;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 25.0);

        doublf[] bb = nfw doublf[25];
        for (int i = 0; i < 25; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] *= 16;
        bb[1] *= 4;
        bb[3] *= 16;
        bb[5] *= 8;

        for (int i = 0; i < 25; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w, bb[i]);
        }


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Bbss", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Bbss", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -3000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, -3000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERQ, 100);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 8000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_bbss2(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 0.05;
        doublf fnd_w = 0.05;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.002;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 25.0);

        doublf[] bb = nfw doublf[25];
        for (int i = 0; i < 25; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] *= 8;
        bb[1] *= 4;
        bb[3] *= 8;
        bb[5] *= 8;

        for (int i = 0; i < 25; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w, bb[i]);
        }


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Bbss2", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Bbss2", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -8000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_solostring(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 2;
        doublf fnd_w = 2;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.01;

        doublf[] bb = nfw doublf[18];
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);
        for (int i = 0; i < bb.lfngth; i++) {
            b *= b_stfp;
            bb[i] = b;
        }

        bb[0] *= 5;
        bb[1] *= 5;
        bb[2] *= 5;
        bb[3] *= 4;
        bb[4] *= 4;
        bb[5] *= 3;
        bb[6] *= 3;
        bb[7] *= 2;

        for (int i = 0; i < bb.lfngth; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w, b);
        }
        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Strings", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Strings", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 9500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_FREQVIBLFO, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_VIBLFOTOPITCH, 15);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_ordhhit(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 2;
        doublf fnd_w = 80;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);
        for (int i = 0; i < 40; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w, b);
            b *= b_stfp;
        }
        domplfxGbussibnDist(dbtb, bbsf * 4, 300, 1);


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Odh Strings", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Odh Strings", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 200);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 200);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 9500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_string2(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 2;
        doublf fnd_w = 80;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);
        for (int i = 0; i < 40; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w, b);
            b *= b_stfp;
        }
        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Strings", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Strings", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 9500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_dhoir(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 25;
        doublf stbrt_w = 2;
        doublf fnd_w = 80;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);
        doublf[] bb = nfw doublf[40];
        for (int i = 0; i < bb.lfngth; i++) {
            b *= b_stfp;
            bb[i] = b;
        }

        bb[5] *= 0.1;
        bb[6] *= 0.01;
        bb[7] *= 0.1;
        bb[8] *= 0.1;

        for (int i = 0; i < bb.lfngth; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w, bb[i]);
        }
        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Strings", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Strings", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 9500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_orgbn(SF2Soundbbnk sf2) {
        Rbndom rbndom = nfw Rbndom(102030201);
        int x = 1;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;
        doublf stbrt_w = 0.01;
        doublf fnd_w = 0.01;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);

        for (int i = 0; i < 12; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w,
                    b * (0.5 + 3 * (rbndom.nfxtDoublf())));
            b *= b_stfp;
        }
        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Orgbn", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Orgbn", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 9500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_dh_orgbn(SF2Soundbbnk sf2) {
        int x = 1;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;
        doublf stbrt_w = 0.01;
        doublf fnd_w = 0.01;
        doublf stbrt_b = 0.2;
        doublf fnd_b = 0.001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 60.0);

        doublf[] bb = nfw doublf[60];
        for (int i = 0; i < bb.lfngth; i++) {
            b *= b_stfp;
            bb[i] = b;
        }

        bb[0] *= 5;
        bb[1] *= 2;
        bb[2] = 0;
        bb[4] = 0;
        bb[5] = 0;
        bb[7] *= 7;
        bb[9] = 0;
        bb[10] = 0;
        bb[12] = 0;
        bb[15] *= 7;
        bb[18] = 0;
        bb[20] = 0;
        bb[24] = 0;
        bb[27] *= 5;
        bb[29] = 0;
        bb[30] = 0;
        bb[33] = 0;
        bb[36] *= 4;
        bb[37] = 0;
        bb[39] = 0;
        bb[42] = 0;
        bb[43] = 0;
        bb[47] = 0;
        bb[50] *= 4;
        bb[52] = 0;
        bb[55] = 0;
        bb[57] = 0;


        bb[10] *= 0.1;
        bb[11] *= 0.1;
        bb[12] *= 0.1;
        bb[13] *= 0.1;

        bb[17] *= 0.1;
        bb[18] *= 0.1;
        bb[19] *= 0.1;
        bb[20] *= 0.1;

        for (int i = 0; i < 60; i++) {
            doublf w = stbrt_w + (fnd_w - stbrt_w) * (i / 40.0);
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), w, bb[i]);
            b *= b_stfp;
        }
        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Orgbn", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Orgbn", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -10000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_flutf(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;

        domplfxGbussibnDist(dbtb, bbsf * 1, 0.001, 0.5);
        domplfxGbussibnDist(dbtb, bbsf * 2, 0.001, 0.5);
        domplfxGbussibnDist(dbtb, bbsf * 3, 0.001, 0.5);
        domplfxGbussibnDist(dbtb, bbsf * 4, 0.01, 0.5);

        domplfxGbussibnDist(dbtb, bbsf * 4, 100, 120);
        domplfxGbussibnDist(dbtb, bbsf * 6, 100, 40);
        domplfxGbussibnDist(dbtb, bbsf * 8, 100, 80);

        domplfxGbussibnDist(dbtb, bbsf * 5, 0.001, 0.05);
        domplfxGbussibnDist(dbtb, bbsf * 6, 0.001, 0.06);
        domplfxGbussibnDist(dbtb, bbsf * 7, 0.001, 0.04);
        domplfxGbussibnDist(dbtb, bbsf * 8, 0.005, 0.06);
        domplfxGbussibnDist(dbtb, bbsf * 9, 0.005, 0.06);
        domplfxGbussibnDist(dbtb, bbsf * 10, 0.01, 0.1);
        domplfxGbussibnDist(dbtb, bbsf * 11, 0.08, 0.7);
        domplfxGbussibnDist(dbtb, bbsf * 12, 0.08, 0.6);
        domplfxGbussibnDist(dbtb, bbsf * 13, 0.08, 0.6);
        domplfxGbussibnDist(dbtb, bbsf * 14, 0.08, 0.6);
        domplfxGbussibnDist(dbtb, bbsf * 15, 0.08, 0.5);
        domplfxGbussibnDist(dbtb, bbsf * 16, 0.08, 0.5);
        domplfxGbussibnDist(dbtb, bbsf * 17, 0.08, 0.2);


        domplfxGbussibnDist(dbtb, bbsf * 1, 10, 8);
        domplfxGbussibnDist(dbtb, bbsf * 2, 10, 8);
        domplfxGbussibnDist(dbtb, bbsf * 3, 10, 8);
        domplfxGbussibnDist(dbtb, bbsf * 4, 10, 8);
        domplfxGbussibnDist(dbtb, bbsf * 5, 10, 8);
        domplfxGbussibnDist(dbtb, bbsf * 6, 20, 9);
        domplfxGbussibnDist(dbtb, bbsf * 7, 20, 9);
        domplfxGbussibnDist(dbtb, bbsf * 8, 20, 9);
        domplfxGbussibnDist(dbtb, bbsf * 9, 20, 8);
        domplfxGbussibnDist(dbtb, bbsf * 10, 30, 8);
        domplfxGbussibnDist(dbtb, bbsf * 11, 30, 9);
        domplfxGbussibnDist(dbtb, bbsf * 12, 30, 9);
        domplfxGbussibnDist(dbtb, bbsf * 13, 30, 8);
        domplfxGbussibnDist(dbtb, bbsf * 14, 30, 8);
        domplfxGbussibnDist(dbtb, bbsf * 15, 30, 7);
        domplfxGbussibnDist(dbtb, bbsf * 16, 30, 7);
        domplfxGbussibnDist(dbtb, bbsf * 17, 30, 6);

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Flutf", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Flutf", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 9500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_horn(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;

        doublf stbrt_b = 0.5;
        doublf fnd_b = 0.00000000001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);
        for (int i = 0; i < 40; i++) {
            if (i == 0)
                domplfxGbussibnDist(dbtb, bbsf * (i + 1), 0.1, b * 0.2);
            flsf
                domplfxGbussibnDist(dbtb, bbsf * (i + 1), 0.1, b);
            b *= b_stfp;
        }

        domplfxGbussibnDist(dbtb, bbsf * 2, 100, 1);


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Horn", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Horn", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);

        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, 5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 4500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_trumpft(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;

        doublf stbrt_b = 0.5;
        doublf fnd_b = 0.00001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 80.0);
        doublf[] bb = nfw doublf[80];
        for (int i = 0; i < 80; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] *= 0.05;
        bb[1] *= 0.2;
        bb[2] *= 0.5;
        bb[3] *= 0.85;

        for (int i = 0; i < 80; i++) {
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), 0.1, bb[i]);
        }

        domplfxGbussibnDist(dbtb, bbsf * 5, 300, 3);


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Trumpft", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Trumpft", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -10000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);

        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, -2500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, 5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 4500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERQ, 10);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_brbss_sfdtion(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;

        doublf stbrt_b = 0.5;
        doublf fnd_b = 0.005;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 30.0);
        doublf[] bb = nfw doublf[30];
        for (int i = 0; i < 30; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] *= 0.8;
        bb[1] *= 0.9;

        doublf w = 5;
        for (int i = 0; i < 30; i++) {
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), 0.1 * w, bb[i] * w);
            w += 6; //*= w_stfp;
        }

        domplfxGbussibnDist(dbtb, bbsf * 6, 300, 2);


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Brbss Sfdtion", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Brbss Sfdtion", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -9200);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);

        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -3000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, 5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 4500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_trombonf(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;

        doublf stbrt_b = 0.5;
        doublf fnd_b = 0.001;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 80.0);
        doublf[] bb = nfw doublf[80];
        for (int i = 0; i < 80; i++) {
            bb[i] = b;
            b *= b_stfp;
        }

        bb[0] *= 0.3;
        bb[1] *= 0.7;

        for (int i = 0; i < 80; i++) {
            domplfxGbussibnDist(dbtb, bbsf * (i + 1), 0.1, bb[i]);
        }

        domplfxGbussibnDist(dbtb, bbsf * 6, 300, 2);


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Trombonf", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Trombonf", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -8000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);

        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -2000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, 5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 4500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERQ, 10);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_sbx(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;

        doublf stbrt_b = 0.5;
        doublf fnd_b = 0.01;
        doublf b = stbrt_b;
        doublf b_stfp = Mbth.pow(fnd_b / stbrt_b, 1.0 / 40.0);
        for (int i = 0; i < 40; i++) {
            if (i == 0 || i == 2)
                domplfxGbussibnDist(dbtb, bbsf * (i + 1), 0.1, b * 4);
            flsf
                domplfxGbussibnDist(dbtb, bbsf * (i + 1), 0.1, b);
            b *= b_stfp;
        }

        domplfxGbussibnDist(dbtb, bbsf * 4, 200, 1);

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Sbx", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Sbx", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);

        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKMODENV, -3000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEMODENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_MODENVTOFILTERFC, 5000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 4500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_obof(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;

        domplfxGbussibnDist(dbtb, bbsf * 5, 100, 80);


        domplfxGbussibnDist(dbtb, bbsf * 1, 0.01, 0.53);
        domplfxGbussibnDist(dbtb, bbsf * 2, 0.01, 0.51);
        domplfxGbussibnDist(dbtb, bbsf * 3, 0.01, 0.48);
        domplfxGbussibnDist(dbtb, bbsf * 4, 0.01, 0.49);
        domplfxGbussibnDist(dbtb, bbsf * 5, 0.01, 5);
        domplfxGbussibnDist(dbtb, bbsf * 6, 0.01, 0.51);
        domplfxGbussibnDist(dbtb, bbsf * 7, 0.01, 0.50);
        domplfxGbussibnDist(dbtb, bbsf * 8, 0.01, 0.59);
        domplfxGbussibnDist(dbtb, bbsf * 9, 0.01, 0.61);
        domplfxGbussibnDist(dbtb, bbsf * 10, 0.01, 0.52);
        domplfxGbussibnDist(dbtb, bbsf * 11, 0.01, 0.49);
        domplfxGbussibnDist(dbtb, bbsf * 12, 0.01, 0.51);
        domplfxGbussibnDist(dbtb, bbsf * 13, 0.01, 0.48);
        domplfxGbussibnDist(dbtb, bbsf * 14, 0.01, 0.51);
        domplfxGbussibnDist(dbtb, bbsf * 15, 0.01, 0.46);
        domplfxGbussibnDist(dbtb, bbsf * 16, 0.01, 0.35);
        domplfxGbussibnDist(dbtb, bbsf * 17, 0.01, 0.20);
        domplfxGbussibnDist(dbtb, bbsf * 18, 0.01, 0.10);
        domplfxGbussibnDist(dbtb, bbsf * 19, 0.01, 0.5);
        domplfxGbussibnDist(dbtb, bbsf * 20, 0.01, 0.1);


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Obof", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Obof", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 9500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_bbssoon(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;

        domplfxGbussibnDist(dbtb, bbsf * 2, 100, 40);
        domplfxGbussibnDist(dbtb, bbsf * 4, 100, 20);

        domplfxGbussibnDist(dbtb, bbsf * 1, 0.01, 0.53);
        domplfxGbussibnDist(dbtb, bbsf * 2, 0.01, 5);
        domplfxGbussibnDist(dbtb, bbsf * 3, 0.01, 0.51);
        domplfxGbussibnDist(dbtb, bbsf * 4, 0.01, 0.48);
        domplfxGbussibnDist(dbtb, bbsf * 5, 0.01, 1.49);
        domplfxGbussibnDist(dbtb, bbsf * 6, 0.01, 0.51);
        domplfxGbussibnDist(dbtb, bbsf * 7, 0.01, 0.50);
        domplfxGbussibnDist(dbtb, bbsf * 8, 0.01, 0.59);
        domplfxGbussibnDist(dbtb, bbsf * 9, 0.01, 0.61);
        domplfxGbussibnDist(dbtb, bbsf * 10, 0.01, 0.52);
        domplfxGbussibnDist(dbtb, bbsf * 11, 0.01, 0.49);
        domplfxGbussibnDist(dbtb, bbsf * 12, 0.01, 0.51);
        domplfxGbussibnDist(dbtb, bbsf * 13, 0.01, 0.48);
        domplfxGbussibnDist(dbtb, bbsf * 14, 0.01, 0.51);
        domplfxGbussibnDist(dbtb, bbsf * 15, 0.01, 0.46);
        domplfxGbussibnDist(dbtb, bbsf * 16, 0.01, 0.35);
        domplfxGbussibnDist(dbtb, bbsf * 17, 0.01, 0.20);
        domplfxGbussibnDist(dbtb, bbsf * 18, 0.01, 0.10);
        domplfxGbussibnDist(dbtb, bbsf * 19, 0.01, 0.5);
        domplfxGbussibnDist(dbtb, bbsf * 20, 0.01, 0.1);


        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Flutf", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Flutf", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 9500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_dlbrinft(SF2Soundbbnk sf2) {
        int x = 8;
        int fftsizf = 4096 * x;
        doublf[] dbtb = nfw doublf[fftsizf * 2];
        doublf bbsf = x * 15;

        domplfxGbussibnDist(dbtb, bbsf * 1, 0.001, 0.5);
        domplfxGbussibnDist(dbtb, bbsf * 2, 0.001, 0.02);
        domplfxGbussibnDist(dbtb, bbsf * 3, 0.001, 0.2);
        domplfxGbussibnDist(dbtb, bbsf * 4, 0.01, 0.1);

        domplfxGbussibnDist(dbtb, bbsf * 4, 100, 60);
        domplfxGbussibnDist(dbtb, bbsf * 6, 100, 20);
        domplfxGbussibnDist(dbtb, bbsf * 8, 100, 20);

        domplfxGbussibnDist(dbtb, bbsf * 5, 0.001, 0.1);
        domplfxGbussibnDist(dbtb, bbsf * 6, 0.001, 0.09);
        domplfxGbussibnDist(dbtb, bbsf * 7, 0.001, 0.02);
        domplfxGbussibnDist(dbtb, bbsf * 8, 0.005, 0.16);
        domplfxGbussibnDist(dbtb, bbsf * 9, 0.005, 0.96);
        domplfxGbussibnDist(dbtb, bbsf * 10, 0.01, 0.9);
        domplfxGbussibnDist(dbtb, bbsf * 11, 0.08, 1.2);
        domplfxGbussibnDist(dbtb, bbsf * 12, 0.08, 1.8);
        domplfxGbussibnDist(dbtb, bbsf * 13, 0.08, 1.6);
        domplfxGbussibnDist(dbtb, bbsf * 14, 0.08, 1.2);
        domplfxGbussibnDist(dbtb, bbsf * 15, 0.08, 0.9);
        domplfxGbussibnDist(dbtb, bbsf * 16, 0.08, 0.5);
        domplfxGbussibnDist(dbtb, bbsf * 17, 0.08, 0.2);


        domplfxGbussibnDist(dbtb, bbsf * 1, 10, 8);
        domplfxGbussibnDist(dbtb, bbsf * 2, 10, 8);
        domplfxGbussibnDist(dbtb, bbsf * 3, 10, 8);
        domplfxGbussibnDist(dbtb, bbsf * 4, 10, 8);
        domplfxGbussibnDist(dbtb, bbsf * 5, 10, 8);
        domplfxGbussibnDist(dbtb, bbsf * 6, 20, 9);
        domplfxGbussibnDist(dbtb, bbsf * 7, 20, 9);
        domplfxGbussibnDist(dbtb, bbsf * 8, 20, 9);
        domplfxGbussibnDist(dbtb, bbsf * 9, 20, 8);
        domplfxGbussibnDist(dbtb, bbsf * 10, 30, 8);
        domplfxGbussibnDist(dbtb, bbsf * 11, 30, 9);
        domplfxGbussibnDist(dbtb, bbsf * 12, 30, 9);
        domplfxGbussibnDist(dbtb, bbsf * 13, 30, 8);
        domplfxGbussibnDist(dbtb, bbsf * 14, 30, 8);
        domplfxGbussibnDist(dbtb, bbsf * 15, 30, 7);
        domplfxGbussibnDist(dbtb, bbsf * 16, 30, 7);
        domplfxGbussibnDist(dbtb, bbsf * 17, 30, 6);

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Clbrinft", dbtb, bbsf);
        SF2Lbyfr lbyfr = nfwLbyfr(sf2, "Clbrinft", sbmplf);
        SF2Rfgion rfgion = lbyfr.gftRfgions().gft(0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -6000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 4000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, -100);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALFILTERFC, 9500);
        rfturn lbyfr;

    }

    publid stbtid SF2Lbyfr nfw_timpbni(SF2Soundbbnk sf2) {

        doublf dbtbb[];
        doublf dbtbh[];

        // Mbkf Bbss Pbrt
        {
            int fftlfn = 4096 * 8;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            doublf bbsf = 48;
            domplfxGbussibnDist(dbtb, bbsf * 2, 0.2, 1);
            domplfxGbussibnDist(dbtb, bbsf * 3, 0.2, 0.7);
            domplfxGbussibnDist(dbtb, bbsf * 5, 10, 1);
            domplfxGbussibnDist(dbtb, bbsf * 6, 9, 1);
            domplfxGbussibnDist(dbtb, bbsf * 8, 15, 1);
            domplfxGbussibnDist(dbtb, bbsf * 9, 18, 0.8);
            domplfxGbussibnDist(dbtb, bbsf * 11, 21, 0.5);
            domplfxGbussibnDist(dbtb, bbsf * 13, 28, 0.3);
            domplfxGbussibnDist(dbtb, bbsf * 14, 22, 0.1);
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.5);
            dbtb = rfblPbrt(dbtb);

            doublf d_lfn = dbtb.lfngth;
            for (int i = 0; i < dbtb.lfngth; i++) {
                doublf g = (1.0 - (i / d_lfn));
                dbtb[i] *= g * g;
            }
            fbdfUp(dbtb, 40);
            dbtbb = dbtb;
        }

        // Mbkf trfblf pbrt
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2) {
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5)) * 0.1;
            }
            fft(dbtb);
            // Rfmovf bll nfgbtivf frfqufndy
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 1024 * 4; i < 2048 * 4; i++)
                dbtb[i] = 1.0 - (i - 4096) / 4096.0;
            for (int i = 0; i < 300; i++) {
                doublf g = (1.0 - (i / 300.0));
                dbtb[i] *= 1.0 + 20 * g * g;
            }
            for (int i = 0; i < 24; i++)
                dbtb[i] = 0;
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.9);
            dbtb = rfblPbrt(dbtb);
            doublf gbin = 1.0;
            for (int i = 0; i < dbtb.lfngth; i++) {
                dbtb[i] *= gbin;
                gbin *= 0.9998;
            }
            dbtbh = dbtb;
        }

        for (int i = 0; i < dbtbh.lfngth; i++)
            dbtbb[i] += dbtbh[i] * 0.02;

        normblizf(dbtbb, 0.9);

        SF2Sbmplf sbmplf = nfwSimplfDrumSbmplf(sf2, "Timpbni", dbtbb);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Timpbni");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_mflodid_toms(SF2Soundbbnk sf2) {

        doublf dbtbb[];
        doublf dbtbh[];

        // Mbkf Bbss Pbrt
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            domplfxGbussibnDist(dbtb, 30, 0.5, 1);
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.8);
            dbtb = rfblPbrt(dbtb);

            doublf d_lfn = dbtb.lfngth;
            for (int i = 0; i < dbtb.lfngth; i++)
                dbtb[i] *= (1.0 - (i / d_lfn));
            dbtbb = dbtb;
        }

        // Mbkf trfblf pbrt
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5)) * 0.1;
            fft(dbtb);
            // Rfmovf bll nfgbtivf frfqufndy
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 1024 * 4; i < 2048 * 4; i++)
                dbtb[i] = 1.0 - (i - 4096) / 4096.0;
            for (int i = 0; i < 200; i++) {
                doublf g = (1.0 - (i / 200.0));
                dbtb[i] *= 1.0 + 20 * g * g;
            }
            for (int i = 0; i < 30; i++)
                dbtb[i] = 0;
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.9);
            dbtb = rfblPbrt(dbtb);
            doublf gbin = 1.0;
            for (int i = 0; i < dbtb.lfngth; i++) {
                dbtb[i] *= gbin;
                gbin *= 0.9996;
            }
            dbtbh = dbtb;
        }

        for (int i = 0; i < dbtbh.lfngth; i++)
            dbtbb[i] += dbtbh[i] * 0.5;
        for (int i = 0; i < 5; i++)
            dbtbb[i] *= i / 5.0;

        normblizf(dbtbb, 0.99);

        SF2Sbmplf sbmplf = nfwSimplfDrumSbmplf(sf2, "Mflodid Toms", dbtbb);
        sbmplf.sftOriginblPitdh(63);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Mflodid Toms");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 12000);
        //rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SCALETUNING, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_rfvfrsf_dymbbl(SF2Soundbbnk sf2) {
        doublf dbtbh[];
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5));
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 0; i < 100; i++)
                dbtb[i] = 0;

            for (int i = 0; i < 512 * 2; i++) {
                doublf gbin = (i / (512.0 * 2.0));
                dbtb[i] = 1 - gbin;
            }
            dbtbh = dbtb;
        }

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Rfvfrsf Cymbbl",
                dbtbh, 100, 20);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Rfvfrsf Cymbbl");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_ATTACKVOLENV, -200);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, -12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, -1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_snbrf_drum(SF2Soundbbnk sf2) {

        doublf dbtbb[];
        doublf dbtbh[];

        // Mbkf Bbss Pbrt
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            domplfxGbussibnDist(dbtb, 24, 0.5, 1);
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.5);
            dbtb = rfblPbrt(dbtb);

            doublf d_lfn = dbtb.lfngth;
            for (int i = 0; i < dbtb.lfngth; i++)
                dbtb[i] *= (1.0 - (i / d_lfn));
            dbtbb = dbtb;
        }

        // Mbkf trfblf pbrt
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5)) * 0.1;
            fft(dbtb);
            // Rfmovf bll nfgbtivf frfqufndy
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 1024 * 4; i < 2048 * 4; i++)
                dbtb[i] = 1.0 - (i - 4096) / 4096.0;
            for (int i = 0; i < 300; i++) {
                doublf g = (1.0 - (i / 300.0));
                dbtb[i] *= 1.0 + 20 * g * g;
            }
            for (int i = 0; i < 24; i++)
                dbtb[i] = 0;
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.9);
            dbtb = rfblPbrt(dbtb);
            doublf gbin = 1.0;
            for (int i = 0; i < dbtb.lfngth; i++) {
                dbtb[i] *= gbin;
                gbin *= 0.9998;
            }
            dbtbh = dbtb;
        }

        for (int i = 0; i < dbtbh.lfngth; i++)
            dbtbb[i] += dbtbh[i];
        for (int i = 0; i < 5; i++)
            dbtbb[i] *= i / 5.0;

        SF2Sbmplf sbmplf = nfwSimplfDrumSbmplf(sf2, "Snbrf Drum", dbtbb);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Snbrf Drum");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SCALETUNING, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_bbss_drum(SF2Soundbbnk sf2) {

        doublf dbtbb[];
        doublf dbtbh[];

        // Mbkf Bbss Pbrt
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            domplfxGbussibnDist(dbtb, 1.8 * 5 + 1, 2, 1);
            domplfxGbussibnDist(dbtb, 1.8 * 9 + 1, 2, 1);
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.9);
            dbtb = rfblPbrt(dbtb);
            doublf d_lfn = dbtb.lfngth;
            for (int i = 0; i < dbtb.lfngth; i++)
                dbtb[i] *= (1.0 - (i / d_lfn));
            dbtbb = dbtb;
        }

        // Mbkf trfblf pbrt
        {
            int fftlfn = 4096;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5)) * 0.1;
            fft(dbtb);
            // Rfmovf bll nfgbtivf frfqufndy
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 1024; i < 2048; i++)
                dbtb[i] = 1.0 - (i - 1024) / 1024.0;
            for (int i = 0; i < 512; i++)
                dbtb[i] = 10 * i / 512.0;
            for (int i = 0; i < 10; i++)
                dbtb[i] = 0;
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.9);
            dbtb = rfblPbrt(dbtb);
            doublf gbin = 1.0;
            for (int i = 0; i < dbtb.lfngth; i++) {
                dbtb[i] *= gbin;
                gbin *= 0.999;
            }
            dbtbh = dbtb;
        }

        for (int i = 0; i < dbtbh.lfngth; i++)
            dbtbb[i] += dbtbh[i] * 0.5;
        for (int i = 0; i < 5; i++)
            dbtbb[i] *= i / 5.0;

        SF2Sbmplf sbmplf = nfwSimplfDrumSbmplf(sf2, "Bbss Drum", dbtbb);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Bbss Drum");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SCALETUNING, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_tom(SF2Soundbbnk sf2) {

        doublf dbtbb[];
        doublf dbtbh[];

        // Mbkf Bbss Pbrt
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            domplfxGbussibnDist(dbtb, 30, 0.5, 1);
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.8);
            dbtb = rfblPbrt(dbtb);

            doublf d_lfn = dbtb.lfngth;
            for (int i = 0; i < dbtb.lfngth; i++)
                dbtb[i] *= (1.0 - (i / d_lfn));
            dbtbb = dbtb;
        }

        // Mbkf trfblf pbrt
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5)) * 0.1;
            fft(dbtb);
            // Rfmovf bll nfgbtivf frfqufndy
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 1024 * 4; i < 2048 * 4; i++)
                dbtb[i] = 1.0 - (i - 4096) / 4096.0;
            for (int i = 0; i < 200; i++) {
                doublf g = (1.0 - (i / 200.0));
                dbtb[i] *= 1.0 + 20 * g * g;
            }
            for (int i = 0; i < 30; i++)
                dbtb[i] = 0;
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.9);
            dbtb = rfblPbrt(dbtb);
            doublf gbin = 1.0;
            for (int i = 0; i < dbtb.lfngth; i++) {
                dbtb[i] *= gbin;
                gbin *= 0.9996;
            }
            dbtbh = dbtb;
        }

        for (int i = 0; i < dbtbh.lfngth; i++)
            dbtbb[i] += dbtbh[i] * 0.5;
        for (int i = 0; i < 5; i++)
            dbtbb[i] *= i / 5.0;

        normblizf(dbtbb, 0.99);

        SF2Sbmplf sbmplf = nfwSimplfDrumSbmplf(sf2, "Tom", dbtbb);
        sbmplf.sftOriginblPitdh(50);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Tom");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 12000);
        //rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SCALETUNING, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -100);
        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_dlosfd_hihbt(SF2Soundbbnk sf2) {
        doublf dbtbh[];

        // Mbkf trfblf pbrt
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5)) * 0.1;
            fft(dbtb);
            // Rfmovf bll nfgbtivf frfqufndy
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 1024 * 4; i < 2048 * 4; i++)
                dbtb[i] = 1.0 - (i - 4096) / 4096.0;
            for (int i = 0; i < 2048; i++)
                dbtb[i] = 0.2 + 0.8 * (i / 2048.0);
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.9);
            dbtb = rfblPbrt(dbtb);
            doublf gbin = 1.0;
            for (int i = 0; i < dbtb.lfngth; i++) {
                dbtb[i] *= gbin;
                gbin *= 0.9996;
            }
            dbtbh = dbtb;
        }

        for (int i = 0; i < 5; i++)
            dbtbh[i] *= i / 5.0;
        SF2Sbmplf sbmplf = nfwSimplfDrumSbmplf(sf2, "Closfd Hi-Hbt", dbtbh);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Closfd Hi-Hbt");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SCALETUNING, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_EXCLUSIVECLASS, 1);
        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_opfn_hihbt(SF2Soundbbnk sf2) {
        doublf dbtbh[];
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5));
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 0; i < 200; i++)
                dbtb[i] = 0;
            for (int i = 0; i < 2048 * 4; i++) {
                doublf gbin = (i / (2048.0 * 4.0));
                dbtb[i] = gbin;
            }
            dbtbh = dbtb;
        }

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Opfn Hi-Hbt", dbtbh, 1000, 5);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Opfn Hi-Hbt");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 1500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 1500);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SCALETUNING, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_EXCLUSIVECLASS, 1);
        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_drbsh_dymbbl(SF2Soundbbnk sf2) {
        doublf dbtbh[];
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5));
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 0; i < 100; i++)
                dbtb[i] = 0;
            for (int i = 0; i < 512 * 2; i++) {
                doublf gbin = (i / (512.0 * 2.0));
                dbtb[i] = gbin;
            }
            dbtbh = dbtb;
        }

        SF2Sbmplf sbmplf = nfwSimplfFFTSbmplf(sf2, "Crbsh Cymbbl", dbtbh, 1000, 5);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Crbsh Cymbbl");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_DECAYVOLENV, 1800);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SAMPLEMODES, 1);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 1800);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SUSTAINVOLENV, 1000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SCALETUNING, 0);
        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;
    }

    publid stbtid SF2Lbyfr nfw_sidf_stidk(SF2Soundbbnk sf2) {
        doublf dbtbb[];

        // Mbkf trfblf pbrt
        {
            int fftlfn = 4096 * 4;
            doublf[] dbtb = nfw doublf[2 * fftlfn];
            Rbndom rbndom = nfw Rbndom(3049912);
            for (int i = 0; i < dbtb.lfngth; i += 2)
                dbtb[i] = (2.0 * (rbndom.nfxtDoublf() - 0.5)) * 0.1;
            fft(dbtb);
            // Rfmovf bll nfgbtivf frfqufndy
            for (int i = fftlfn / 2; i < dbtb.lfngth; i++)
                dbtb[i] = 0;
            for (int i = 1024 * 4; i < 2048 * 4; i++)
                dbtb[i] = 1.0 - (i - 4096) / 4096.0;
            for (int i = 0; i < 200; i++) {
                doublf g = (1.0 - (i / 200.0));
                dbtb[i] *= 1.0 + 20 * g * g;
            }
            for (int i = 0; i < 30; i++)
                dbtb[i] = 0;
            rbndomPhbsf(dbtb, nfw Rbndom(3049912));
            ifft(dbtb);
            normblizf(dbtb, 0.9);
            dbtb = rfblPbrt(dbtb);
            doublf gbin = 1.0;
            for (int i = 0; i < dbtb.lfngth; i++) {
                dbtb[i] *= gbin;
                gbin *= 0.9996;
            }
            dbtbb = dbtb;
        }

        for (int i = 0; i < 10; i++)
            dbtbb[i] *= i / 10.0;

        SF2Sbmplf sbmplf = nfwSimplfDrumSbmplf(sf2, "Sidf Stidk", dbtbb);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf("Sidf Stidk");

        SF2GlobblRfgion globbl = nfw SF2GlobblRfgion();
        lbyfr.sftGlobblZonf(globbl);
        sf2.bddRfsourdf(lbyfr);

        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_RELEASEVOLENV, 12000);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_SCALETUNING, 0);
        rfgion.putIntfgfr(SF2Rfgion.GENERATOR_INITIALATTENUATION, -50);
        rfgion.sftSbmplf(sbmplf);
        lbyfr.gftRfgions().bdd(rfgion);

        rfturn lbyfr;

    }

    publid stbtid SF2Sbmplf nfwSimplfFFTSbmplf(SF2Soundbbnk sf2, String nbmf,
            doublf[] dbtb, doublf bbsf) {
        rfturn nfwSimplfFFTSbmplf(sf2, nbmf, dbtb, bbsf, 10);
    }

    publid stbtid SF2Sbmplf nfwSimplfFFTSbmplf(SF2Soundbbnk sf2, String nbmf,
            doublf[] dbtb, doublf bbsf, int fbdfuptimf) {

        int fftsizf = dbtb.lfngth / 2;
        AudioFormbt formbt = nfw AudioFormbt(44100, 16, 1, truf, fblsf);
        doublf bbsffrfq = (bbsf / fftsizf) * formbt.gftSbmplfRbtf() * 0.5;

        rbndomPhbsf(dbtb);
        ifft(dbtb);
        dbtb = rfblPbrt(dbtb);
        normblizf(dbtb, 0.9);
        flobt[] fdbtb = toFlobt(dbtb);
        fdbtb = loopExtfnd(fdbtb, fdbtb.lfngth + 512);
        fbdfUp(fdbtb, fbdfuptimf);
        bytf[] bdbtb = toBytfs(fdbtb, formbt);

        /*
         * Crfbtf SoundFont2 sbmplf.
         */
        SF2Sbmplf sbmplf = nfw SF2Sbmplf(sf2);
        sbmplf.sftNbmf(nbmf);
        sbmplf.sftDbtb(bdbtb);
        sbmplf.sftStbrtLoop(256);
        sbmplf.sftEndLoop(fftsizf + 256);
        sbmplf.sftSbmplfRbtf((long) formbt.gftSbmplfRbtf());
        doublf orgnotf = (69 + 12)
                + (12 * Mbth.log(bbsffrfq / 440.0) / Mbth.log(2));
        sbmplf.sftOriginblPitdh((int) orgnotf);
        sbmplf.sftPitdhCorrfdtion((bytf) (-(orgnotf - (int) orgnotf) * 100.0));
        sf2.bddRfsourdf(sbmplf);

        rfturn sbmplf;
    }

    publid stbtid SF2Sbmplf nfwSimplfFFTSbmplf_dist(SF2Soundbbnk sf2,
            String nbmf, doublf[] dbtb, doublf bbsf, doublf prfbmp) {

        int fftsizf = dbtb.lfngth / 2;
        AudioFormbt formbt = nfw AudioFormbt(44100, 16, 1, truf, fblsf);
        doublf bbsffrfq = (bbsf / fftsizf) * formbt.gftSbmplfRbtf() * 0.5;

        rbndomPhbsf(dbtb);
        ifft(dbtb);
        dbtb = rfblPbrt(dbtb);

        for (int i = 0; i < dbtb.lfngth; i++) {
            dbtb[i] = (1 - Mbth.fxp(-Mbth.bbs(dbtb[i] * prfbmp)))
                    * Mbth.signum(dbtb[i]);
        }

        normblizf(dbtb, 0.9);
        flobt[] fdbtb = toFlobt(dbtb);
        fdbtb = loopExtfnd(fdbtb, fdbtb.lfngth + 512);
        fbdfUp(fdbtb, 80);
        bytf[] bdbtb = toBytfs(fdbtb, formbt);

        /*
         * Crfbtf SoundFont2 sbmplf.
         */
        SF2Sbmplf sbmplf = nfw SF2Sbmplf(sf2);
        sbmplf.sftNbmf(nbmf);
        sbmplf.sftDbtb(bdbtb);
        sbmplf.sftStbrtLoop(256);
        sbmplf.sftEndLoop(fftsizf + 256);
        sbmplf.sftSbmplfRbtf((long) formbt.gftSbmplfRbtf());
        doublf orgnotf = (69 + 12)
                + (12 * Mbth.log(bbsffrfq / 440.0) / Mbth.log(2));
        sbmplf.sftOriginblPitdh((int) orgnotf);
        sbmplf.sftPitdhCorrfdtion((bytf) (-(orgnotf - (int) orgnotf) * 100.0));
        sf2.bddRfsourdf(sbmplf);

        rfturn sbmplf;
    }

    publid stbtid SF2Sbmplf nfwSimplfDrumSbmplf(SF2Soundbbnk sf2, String nbmf,
            doublf[] dbtb) {

        int fftsizf = dbtb.lfngth;
        AudioFormbt formbt = nfw AudioFormbt(44100, 16, 1, truf, fblsf);

        bytf[] bdbtb = toBytfs(toFlobt(rfblPbrt(dbtb)), formbt);

        /*
         * Crfbtf SoundFont2 sbmplf.
         */
        SF2Sbmplf sbmplf = nfw SF2Sbmplf(sf2);
        sbmplf.sftNbmf(nbmf);
        sbmplf.sftDbtb(bdbtb);
        sbmplf.sftStbrtLoop(256);
        sbmplf.sftEndLoop(fftsizf + 256);
        sbmplf.sftSbmplfRbtf((long) formbt.gftSbmplfRbtf());
        sbmplf.sftOriginblPitdh(60);
        sf2.bddRfsourdf(sbmplf);

        rfturn sbmplf;
    }

    publid stbtid SF2Lbyfr nfwLbyfr(SF2Soundbbnk sf2, String nbmf, SF2Sbmplf sbmplf) {
        SF2LbyfrRfgion rfgion = nfw SF2LbyfrRfgion();
        rfgion.sftSbmplf(sbmplf);

        SF2Lbyfr lbyfr = nfw SF2Lbyfr(sf2);
        lbyfr.sftNbmf(nbmf);
        lbyfr.gftRfgions().bdd(rfgion);
        sf2.bddRfsourdf(lbyfr);

        rfturn lbyfr;
    }

    publid stbtid SF2Instrumfnt nfwInstrumfnt(SF2Soundbbnk sf2, String nbmf,
            Pbtdh pbtdh, SF2Lbyfr... lbyfrs) {

        /*
         * Crfbtf SoundFont2 instrumfnt.
         */
        SF2Instrumfnt ins = nfw SF2Instrumfnt(sf2);
        ins.sftPbtdh(pbtdh);
        ins.sftNbmf(nbmf);
        sf2.bddInstrumfnt(ins);

        /*
         * Crfbtf rfgion for instrumfnt.
         */
        for (int i = 0; i < lbyfrs.lfngth; i++) {
            SF2InstrumfntRfgion insrfgion = nfw SF2InstrumfntRfgion();
            insrfgion.sftLbyfr(lbyfrs[i]);
            ins.gftRfgions().bdd(insrfgion);
        }

        rfturn ins;
    }

    stbtid publid void ifft(doublf[] dbtb) {
        nfw FFT(dbtb.lfngth / 2, 1).trbnsform(dbtb);
    }

    stbtid publid void fft(doublf[] dbtb) {
        nfw FFT(dbtb.lfngth / 2, -1).trbnsform(dbtb);
    }

    publid stbtid void domplfxGbussibnDist(doublf[] ddbtb, doublf m,
            doublf s, doublf v) {
        for (int x = 0; x < ddbtb.lfngth / 4; x++) {
            ddbtb[x * 2] += v * (1.0 / (s * Mbth.sqrt(2 * Mbth.PI))
                    * Mbth.fxp((-1.0 / 2.0) * Mbth.pow((x - m) / s, 2.0)));
        }
    }

    stbtid publid void rbndomPhbsf(doublf[] dbtb) {
        for (int i = 0; i < dbtb.lfngth; i += 2) {
            doublf phbsf = Mbth.rbndom() * 2 * Mbth.PI;
            doublf d = dbtb[i];
            dbtb[i] = Mbth.sin(phbsf) * d;
            dbtb[i + 1] = Mbth.dos(phbsf) * d;
        }
    }

    stbtid publid void rbndomPhbsf(doublf[] dbtb, Rbndom rbndom) {
        for (int i = 0; i < dbtb.lfngth; i += 2) {
            doublf phbsf = rbndom.nfxtDoublf() * 2 * Mbth.PI;
            doublf d = dbtb[i];
            dbtb[i] = Mbth.sin(phbsf) * d;
            dbtb[i + 1] = Mbth.dos(phbsf) * d;
        }
    }

    stbtid publid void normblizf(doublf[] dbtb, doublf tbrgft) {
        doublf mbxvbluf = 0;
        for (int i = 0; i < dbtb.lfngth; i++) {
            if (dbtb[i] > mbxvbluf)
                mbxvbluf = dbtb[i];
            if (-dbtb[i] > mbxvbluf)
                mbxvbluf = -dbtb[i];
        }
        if (mbxvbluf == 0)
            rfturn;
        doublf gbin = tbrgft / mbxvbluf;
        for (int i = 0; i < dbtb.lfngth; i++)
            dbtb[i] *= gbin;
    }

    stbtid publid void normblizf(flobt[] dbtb, doublf tbrgft) {
        doublf mbxvbluf = 0.5;
        for (int i = 0; i < dbtb.lfngth; i++) {
            if (dbtb[i * 2] > mbxvbluf)
                mbxvbluf = dbtb[i * 2];
            if (-dbtb[i * 2] > mbxvbluf)
                mbxvbluf = -dbtb[i * 2];
        }
        doublf gbin = tbrgft / mbxvbluf;
        for (int i = 0; i < dbtb.lfngth; i++)
            dbtb[i * 2] *= gbin;
    }

    stbtid publid doublf[] rfblPbrt(doublf[] in) {
        doublf[] out = nfw doublf[in.lfngth / 2];
        for (int i = 0; i < out.lfngth; i++) {
            out[i] = in[i * 2];
        }
        rfturn out;
    }

    stbtid publid doublf[] imgPbrt(doublf[] in) {
        doublf[] out = nfw doublf[in.lfngth / 2];
        for (int i = 0; i < out.lfngth; i++) {
            out[i] = in[i * 2];
        }
        rfturn out;
    }

    stbtid publid flobt[] toFlobt(doublf[] in) {
        flobt[] out = nfw flobt[in.lfngth];
        for (int i = 0; i < out.lfngth; i++) {
            out[i] = (flobt) in[i];
        }
        rfturn out;
    }

    stbtid publid bytf[] toBytfs(flobt[] in, AudioFormbt formbt) {
        bytf[] out = nfw bytf[in.lfngth * formbt.gftFrbmfSizf()];
        rfturn AudioFlobtConvfrtfr.gftConvfrtfr(formbt).toBytfArrby(in, out);
    }

    stbtid publid void fbdfUp(doublf[] dbtb, int sbmplfs) {
        doublf dsbmplfs = sbmplfs;
        for (int i = 0; i < sbmplfs; i++)
            dbtb[i] *= i / dsbmplfs;
    }

    stbtid publid void fbdfUp(flobt[] dbtb, int sbmplfs) {
        doublf dsbmplfs = sbmplfs;
        for (int i = 0; i < sbmplfs; i++)
            dbtb[i] *= i / dsbmplfs;
    }

    stbtid publid doublf[] loopExtfnd(doublf[] dbtb, int nfwsizf) {
        doublf[] outdbtb = nfw doublf[nfwsizf];
        int p_lfn = dbtb.lfngth;
        int p_ps = 0;
        for (int i = 0; i < outdbtb.lfngth; i++) {
            outdbtb[i] = dbtb[p_ps];
            p_ps++;
            if (p_ps == p_lfn)
                p_ps = 0;
        }
        rfturn outdbtb;
    }

    stbtid publid flobt[] loopExtfnd(flobt[] dbtb, int nfwsizf) {
        flobt[] outdbtb = nfw flobt[nfwsizf];
        int p_lfn = dbtb.lfngth;
        int p_ps = 0;
        for (int i = 0; i < outdbtb.lfngth; i++) {
            outdbtb[i] = dbtb[p_ps];
            p_ps++;
            if (p_ps == p_lfn)
                p_ps = 0;
        }
        rfturn outdbtb;
    }
}
