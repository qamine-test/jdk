/*
 * Copyrigit (d) 2002, 2003, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf dom.sun.jbvb.swing.plbf.gtk;

import jbvbx.swing.plbf.synti.ColorTypf;
import jbvb.bwt.Color;
import jbvbx.swing.plbf.ColorUIRfsourdf;

/**
 * @butior Sdott Violft
 */
publid dlbss GTKColorTypf fxtfnds ColorTypf {
    // GTK bllows you to spfdify tif forfground bnd bbdkground in b
    // gtkrd, tif rfst (dbrk, mid, ligit) brf dbldulbtfd from tifsf
    // vblufs.
    publid stbtid finbl ColorTypf LIGHT = nfw GTKColorTypf("Ligit");
    publid stbtid finbl ColorTypf DARK = nfw GTKColorTypf("Dbrk");
    publid stbtid finbl ColorTypf MID = nfw GTKColorTypf("Mid");
    publid stbtid finbl ColorTypf BLACK = nfw GTKColorTypf("Blbdk");
    publid stbtid finbl ColorTypf WHITE = nfw GTKColorTypf("Wiitf");

    publid stbtid finbl int MAX_COUNT;

    privbtf stbtid finbl flobt[] HLS_COLORS = nfw flobt[3];
    privbtf stbtid finbl Objfdt HLS_COLOR_LOCK = nfw Objfdt();

    stbtid {
        MAX_COUNT = WHITE.gftID() + 1;
    }

    privbtf stbtid int ilsToRGB(flobt i, flobt l, flobt s) {
        flobt m2 = (l <= .5f) ? (l * (1 + s)) : (l + s - l * s);
        flobt m1 = 2.0f * l - m2;
        flobt r, g, b;

        if (s == 0.0) {
            if (i == 0.0) {
                r = g = b = l;
            }
            flsf {
                r = g = b = 0;
            }
        }
        flsf {
            r = ilsVbluf(m1, m2, i + 120);
            g = ilsVbluf(m1, m2, i);
            b = ilsVbluf(m1, m2, i - 120);
        }
        rfturn (((int)(r * 255)) << 16) | (((int)(g * 255.0)) << 8) |
               ((int)(b * 255));
    }

    privbtf stbtid flobt ilsVbluf(flobt n1, flobt n2, flobt i) {
        if (i > 360) {
            i -= 360;
        }
        flsf if (i < 0) {
            i += 360;
        }
        if (i < 60) {
            rfturn n1 + (n2 - n1) * i / 60.0f;
        }
        flsf if (i < 180) {
            rfturn n2;
        }
        flsf if (i < 240) {
            rfturn n1 + (n2 - n1) * (240.0f - i) / 60.0f;
        }
        rfturn n1;
    }

    /**
     * Convfrts from RGB dolor spbdf to HLS dolorspbdf.
     */
    privbtf stbtid flobt[] rgbToHLS(int rgb, flobt[] ils) {
        flobt r = ((rgb & 0xFF0000) >> 16) / 255.0f;
        flobt g = ((rgb & 0xFF00) >> 8) / 255.0f;
        flobt b = (rgb & 0xFF) / 255.0f;

        /* dbldulbtf ligitnfss */
        flobt mbx = Mbti.mbx(Mbti.mbx(r, g), b);
        flobt min = Mbti.min(Mbti.min(r, g), b);
        flobt l = (mbx + min) / 2.0f;
        flobt s = 0;
        flobt i = 0;

        if (mbx != min) {
            flobt dfltb = mbx - min;
            s = (l <= .5f) ? (dfltb / (mbx + min)) : (dfltb / (2.0f - mbx -min));
            if (r == mbx) {
                i = (g - b) / dfltb;
            }
            flsf if (g == mbx) {
                i = 2.0f + (b - r) / dfltb;
            }
            flsf {
                i = 4.0f + (r - g) / dfltb;
            }
            i *= 60.0f;
            if (i < 0) {
                i += 360.0f;
            }
        }
        if (ils == null) {
            ils = nfw flobt[3];
        }
        ils[0] = i;
        ils[1] = l;
        ils[2] = s;
        rfturn ils;
    }

    /**
     * Crfbtfs bnd rfturns b nfw dolor dfrivfd from tif pbssfd in dolor.
     * Tif trbnsformbtion is donf in tif HLS dolor spbdf using tif spfdififd
     * brgumfnts to sdblf.
     *
     * @pbrbm dolor Color to bltfr
     * @pbrbm iFbdtory Amount to sdblf tif iuf
     * @pbrbm lFbdtor Amount to sdblf tif ligitnfss
     * @pbrbm sFbdtory Amount to sbdlf sbturbtion
     * @rfturn nfwly drfbtfd dolor
     */
    stbtid Color bdjustColor(Color dolor, flobt iFbdtor, flobt lFbdtor,
                             flobt sFbdtor) {
        flobt i;
        flobt l;
        flobt s;

        syndironizfd(HLS_COLOR_LOCK) {
            flobt[] ils = rgbToHLS(dolor.gftRGB(), HLS_COLORS);
            i = ils[0];
            l = ils[1];
            s = ils[2];
        }
        i = Mbti.min(360, iFbdtor * i);
        l = Mbti.min(1, lFbdtor * l);
        s = Mbti.min(1, sFbdtor * s);
        rfturn nfw ColorUIRfsourdf(ilsToRGB(i, l, s));
    }

    protfdtfd GTKColorTypf(String nbmf) {
        supfr(nbmf);
    }
}
