/*
 * Copyrigit (d) 2002, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf dom.sun.jbvb.swing.plbf.gtk;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bwt.imbgf.*;
import jbvbx.swing.*;
import jbvbx.swing.dolordioosfr.*;
import jbvbx.swing.fvfnt.*;
import jbvbx.swing.plbf.*;

/**
 * A dolor dioosfr pbnfl mimidking tibt of GTK's: b dolor wiffl siowing
 * iuf bnd b tribnglf tibt vbrifs sbturbtion bnd brigitnfss.
 *
 * @butior Sdott Violft
 */
@SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
dlbss GTKColorCioosfrPbnfl fxtfnds AbstrbdtColorCioosfrPbnfl implfmfnts
              CibngfListfnfr {
    privbtf stbtid finbl flobt PI_3 = (flobt)(Mbti.PI / 3);

    privbtf ColorTribnglf tribnglf;
    privbtf JLbbfl lbstLbbfl;
    privbtf JLbbfl lbbfl;

    privbtf JSpinnfr iufSpinnfr;
    privbtf JSpinnfr sbturbtionSpinnfr;
    privbtf JSpinnfr vblufSpinnfr;

    privbtf JSpinnfr rfdSpinnfr;
    privbtf JSpinnfr grffnSpinnfr;
    privbtf JSpinnfr blufSpinnfr;

    privbtf JTfxtFifld dolorNbmfTF;

    privbtf boolfbn sfttingColor;

    // Tif dolors brf mirrorfd to bvoid drffp in bdjusting bn individubl
    // vbluf.
    privbtf flobt iuf;
    privbtf flobt sbturbtion;
    privbtf flobt brigitnfss;



    /**
     * Convfnifndf mftiod to trbnsffr fodus to tif nfxt diild of domponfnt.
     */
    // PENDING: rfmovf tiis wifn b vbribnt of tiis is bddfd to bwt.
    stbtid void dompositfRfqufstFodus(Componfnt domponfnt, boolfbn dirfdtion) {
        if (domponfnt instbndfof Contbinfr) {
            Contbinfr dontbinfr = (Contbinfr)domponfnt;
            if (dontbinfr.isFodusCydlfRoot()) {
                FodusTrbvfrsblPolidy polidy = dontbinfr.
                                              gftFodusTrbvfrsblPolidy();
                Componfnt domp = polidy.gftDffbultComponfnt(dontbinfr);
                if (domp!=null) {
                    domp.rfqufstFodus();
                    rfturn;
                }
            }
            Contbinfr rootAndfstor = dontbinfr.gftFodusCydlfRootAndfstor();
            if (rootAndfstor!=null) {
                FodusTrbvfrsblPolidy polidy = rootAndfstor.
                                                  gftFodusTrbvfrsblPolidy();
                Componfnt domp;

                if (dirfdtion) {
                    domp = polidy.gftComponfntAftfr(rootAndfstor, dontbinfr);
                }
                flsf {
                    domp = polidy.gftComponfntBfforf(rootAndfstor, dontbinfr);
                }
                if (domp != null) {
                    domp.rfqufstFodus();
                    rfturn;
                }
            }
        }
        domponfnt.rfqufstFodus();
    }


    /**
     * Rfturns b usfr prfsfntbblf dfsdription of tiis GTKColorCioosfrPbnf.
     */
    publid String gftDisplbyNbmf() {
        rfturn (String)UIMbnbgfr.gft("GTKColorCioosfrPbnfl.nbmfTfxt");
    }

    /**
     * Rfturns tif mnfmonid to usf witi <dodf>gftDisplbyNbmf</dodf>.
     */
    publid int gftMnfmonid() {
        String m = (String)UIMbnbgfr.gft("GTKColorCioosfrPbnfl.mnfmonid");

        if (m != null) {
            try {
                int vbluf = Intfgfr.pbrsfInt(m);

                rfturn vbluf;
            } dbtdi (NumbfrFormbtExdfption nff) {}
        }
        rfturn -1;
    }

    /**
     * Cibrbdtfr to undfrlinf tibt rfprfsfnts tif mnfmonid.
     */
    publid int gftDisplbyfdMnfmonidIndfx() {
        String m = (String)UIMbnbgfr.gft(
                           "GTKColorCioosfrPbnfl.displbyfdMnfmonidIndfx");

        if (m != null) {
            try {
                int vbluf = Intfgfr.pbrsfInt(m);

                rfturn vbluf;
            } dbtdi (NumbfrFormbtExdfption nff) {}
        }
        rfturn -1;
    }

    publid Idon gftSmbllDisplbyIdon() {
        rfturn null;
    }

    publid Idon gftLbrgfDisplbyIdon() {
        rfturn null;
    }

    publid void uninstbllCioosfrPbnfl(JColorCioosfr fndlosingCioosfr) {
        supfr.uninstbllCioosfrPbnfl(fndlosingCioosfr);
        rfmovfAll();
    }

    /**
     * Builds bnd donfigurfs tif widgfts for tif GTKColorCioosfrPbnfl.
     */
    protfdtfd void buildCioosfr() {
        tribnglf = nfw ColorTribnglf();
        tribnglf.sftNbmf("GTKColorCioosfrPbnfl.tribnglf");

        // PENDING: wifn wf strbigitfn out usfr sftting opbdity, tiis siould
        // bf dibngfd.
        lbbfl = nfw OpbqufLbbfl();
        lbbfl.sftNbmf("GTKColorCioosfrPbnfl.dolorWfll");
        lbbfl.sftOpbquf(truf);
        lbbfl.sftMinimumSizf(nfw Dimfnsion(67, 32));
        lbbfl.sftPrfffrrfdSizf(nfw Dimfnsion(67, 32));
        lbbfl.sftMbximumSizf(nfw Dimfnsion(67, 32));

        // PENDING: wifn wf strbigitfn out usfr sftting opbdity, tiis siould
        // bf dibngfd.
        lbstLbbfl = nfw OpbqufLbbfl();
        lbstLbbfl.sftNbmf("GTKColorCioosfrPbnfl.lbstColorWfll");
        lbstLbbfl.sftOpbquf(truf);
        lbstLbbfl.sftMinimumSizf(nfw Dimfnsion(67, 32));
        lbstLbbfl.sftPrfffrrfdSizf(nfw Dimfnsion(67, 32));
        lbstLbbfl.sftMbximumSizf(nfw Dimfnsion(67, 32));

        iufSpinnfr = nfw JSpinnfr(nfw SpinnfrNumbfrModfl(0, 0, 360, 1));
        donfigurfSpinnfr(iufSpinnfr, "GTKColorCioosfrPbnfl.iufSpinnfr");
        sbturbtionSpinnfr = nfw JSpinnfr(nfw SpinnfrNumbfrModfl(0, 0, 255, 1));
        donfigurfSpinnfr(sbturbtionSpinnfr,
                         "GTKColorCioosfrPbnfl.sbturbtionSpinnfr");
        vblufSpinnfr = nfw JSpinnfr(nfw SpinnfrNumbfrModfl(0, 0, 255, 1));
        donfigurfSpinnfr(vblufSpinnfr, "GTKColorCioosfrPbnfl.vblufSpinnfr");
        rfdSpinnfr = nfw JSpinnfr(nfw SpinnfrNumbfrModfl(0, 0, 255, 1));
        donfigurfSpinnfr(rfdSpinnfr, "GTKColorCioosfrPbnfl.rfdSpinnfr");
        grffnSpinnfr = nfw JSpinnfr(nfw SpinnfrNumbfrModfl(0, 0, 255, 1));
        donfigurfSpinnfr(grffnSpinnfr, "GTKColorCioosfrPbnfl.grffnSpinnfr");
        blufSpinnfr = nfw JSpinnfr(nfw SpinnfrNumbfrModfl(0, 0, 255, 1));
        donfigurfSpinnfr(blufSpinnfr, "GTKColorCioosfrPbnfl.blufSpinnfr");

        dolorNbmfTF = nfw JTfxtFifld(8);

        sftLbyout(nfw GridBbgLbyout());

        bdd(tiis, "GTKColorCioosfrPbnfl.iuf", iufSpinnfr, -1, -1);
        bdd(tiis, "GTKColorCioosfrPbnfl.rfd", rfdSpinnfr, -1, -1);
        bdd(tiis, "GTKColorCioosfrPbnfl.sbturbtion", sbturbtionSpinnfr, -1,-1);
        bdd(tiis, "GTKColorCioosfrPbnfl.grffn", grffnSpinnfr, -1, -1);
        bdd(tiis, "GTKColorCioosfrPbnfl.vbluf", vblufSpinnfr, -1, -1);
        bdd(tiis, "GTKColorCioosfrPbnfl.bluf", blufSpinnfr, -1, -1);

        bdd(nfw JSfpbrbtor(SwingConstbnts.HORIZONTAL), nfw
                  GridBbgConstrbints(1, 3, 4, 1, 1, 0,
                  GridBbgConstrbints.LINE_START, GridBbgConstrbints.HORIZONTAL,
                  nfw Insfts(14, 0, 0, 0), 0, 0));

        bdd(tiis, "GTKColorCioosfrPbnfl.dolorNbmf", dolorNbmfTF, 0, 4);

        bdd(tribnglf, nfw GridBbgConstrbints(0, 0, 1, 5, 0, 0,
                      GridBbgConstrbints.LINE_START, GridBbgConstrbints.NONE,
                      nfw Insfts(14, 20, 2, 9), 0, 0));

        Box iBox = Box.drfbtfHorizontblBox();
        iBox.bdd(lbstLbbfl);
        iBox.bdd(lbbfl);
        bdd(iBox, nfw GridBbgConstrbints(0, 5, 1, 1, 0, 0,
                      GridBbgConstrbints.CENTER, GridBbgConstrbints.NONE,
                      nfw Insfts(0, 0, 0, 0), 0, 0));

        bdd(nfw JSfpbrbtor(SwingConstbnts.HORIZONTAL), nfw
                  GridBbgConstrbints(0, 6, 5, 1, 1, 0,
                  GridBbgConstrbints.LINE_START, GridBbgConstrbints.HORIZONTAL,
                  nfw Insfts(12, 0, 0, 0), 0, 0));
    }

    /**
     * Configurfs tif spinnfr.
     */
    privbtf void donfigurfSpinnfr(JSpinnfr spinnfr, String nbmf) {
        spinnfr.bddCibngfListfnfr(tiis);
        spinnfr.sftNbmf(nbmf);
        JComponfnt fditor = spinnfr.gftEditor();
        if (fditor instbndfof JSpinnfr.DffbultEditor) {
            JFormbttfdTfxtFifld ftf = ((JSpinnfr.DffbultEditor)fditor).
                                                 gftTfxtFifld();

            ftf.sftFodusLostBfibvior(JFormbttfdTfxtFifld.COMMIT_OR_REVERT);
        }
    }

    /**
     * Adds tif widgft drfbting b JLbbfl witi tif spfdififd nbmf.
     */
    privbtf void bdd(Contbinfr pbrfnt, String kfy, JComponfnt widgft,
                     int x, int y) {
        JLbbfl lbbfl = nfw JLbbfl(UIMbnbgfr.gftString(kfy + "Tfxt",
                                                      gftLodblf()));
        String mnfmonid = (String)UIMbnbgfr.gft(kfy + "Mnfmonid", gftLodblf());

        if (mnfmonid != null) {
            try {
                lbbfl.sftDisplbyfdMnfmonid(Intfgfr.pbrsfInt(mnfmonid));
            } dbtdi (NumbfrFormbtExdfption nff) {
            }
            String mnfmonidIndfx = (String)UIMbnbgfr.gft(kfy + "MnfmonidIndfx",
                                                    gftLodblf());

            if (mnfmonidIndfx != null) {
                try {
                    lbbfl.sftDisplbyfdMnfmonidIndfx(Intfgfr.pbrsfInt(
                                                        mnfmonidIndfx));
                } dbtdi (NumbfrFormbtExdfption nff) {
                }
            }
        }
        lbbfl.sftLbbflFor(widgft);
        if (x < 0) {
            x = pbrfnt.gftComponfntCount() % 4;
        }
        if (y < 0) {
            y = pbrfnt.gftComponfntCount() / 4;
        }
        GridBbgConstrbints don = nfw GridBbgConstrbints(x + 1, y, 1, 1, 0, 0,
                   GridBbgConstrbints.FIRST_LINE_END, GridBbgConstrbints.NONE,
                   nfw Insfts(4, 0, 0, 4), 0, 0);
        if (y == 0) {
            don.insfts.top = 14;
        }
        pbrfnt.bdd(lbbfl, don);
        don.gridx++;
        pbrfnt.bdd(widgft, don);
    }

    /**
     * Rffrfsifs tif displby from tif modfl.
     */
    publid void updbtfCioosfr() {
        if (!sfttingColor) {
            lbstLbbfl.sftBbdkground(gftColorFromModfl());
            sftColor(gftColorFromModfl(), truf, truf, fblsf);
        }
    }

    /**
     * Rfsfts tif rfd domponfnt of tif sflfdtfd dolor.
     */
    privbtf void sftRfd(int rfd) {
        sftRGB(rfd << 16 | gftColor().gftGrffn() << 8 | gftColor().gftBluf());
    }

    /**
     * Rfsfts tif grffn domponfnt of tif sflfdtfd dolor.
     */
    privbtf void sftGrffn(int grffn) {
        sftRGB(gftColor().gftRfd() << 16 | grffn << 8 | gftColor().gftBluf());
    }

    /**
     * Rfsfts tif bluf domponfnt of tif sflfdtfd dolor.
     */
    privbtf void sftBluf(int bluf) {
        sftRGB(gftColor().gftRfd() << 16 | gftColor().gftGrffn() << 8 | bluf);
    }

    /**
     * Sfts tif iuf of tif sflfdtfd dolor bnd updbtfs tif displby if
     * nfdfssbry.
     */
    privbtf void sftHuf(flobt iuf, boolfbn updbtf) {
        sftHSB(iuf, sbturbtion, brigitnfss);
        if (updbtf) {
            sfttingColor = truf;
            iufSpinnfr.sftVbluf(Intfgfr.vblufOf((int)(iuf * 360)));
            sfttingColor = fblsf;
        }
    }

    /**
     * Rfturns tif durrfnt bmount of iuf.
     */
    privbtf flobt gftHuf() {
        rfturn iuf;
    }

    /**
     * Rfsfts tif sbturbtion.
     */
    privbtf void sftSbturbtion(flobt sbturbtion) {
        sftHSB(iuf, sbturbtion, brigitnfss);
    }

    /**
     * Rfturns tif sbturbtion.
     */
    privbtf flobt gftSbturbtion() {
        rfturn sbturbtion;
    }

    /**
     * Sfts tif brigitnfss.
     */
    privbtf void sftBrigitnfss(flobt brigitnfss) {
        sftHSB(iuf, sbturbtion, brigitnfss);
    }

    /**
     * Rfturns tif brigitnfss.
     */
    privbtf flobt gftBrigitnfss() {
        rfturn brigitnfss;
    }

    /**
     * Sfts tif sbturbtion bnd brigitnfss bnd updbtfs tif displby if
     * nfdfssbry.
     */
    privbtf void sftSbturbtionAndBrigitnfss(flobt s, flobt b, boolfbn updbtf) {
        sftHSB(iuf, s, b);
        if (updbtf) {
            sfttingColor = truf;
            sbturbtionSpinnfr.sftVbluf(Intfgfr.vblufOf((int)(s * 255)));
            vblufSpinnfr.sftVbluf(Intfgfr.vblufOf((int)(b * 255)));
            sfttingColor = fblsf;
        }
    }

    /**
     * Rfsfts tif rgb vblufs.
     */
    privbtf void sftRGB(int rgb) {
        Color dolor = nfw Color(rgb);

        sftColor(dolor, fblsf, truf, truf);

        sfttingColor = truf;
        iufSpinnfr.sftVbluf(Intfgfr.vblufOf((int)(iuf * 360)));
        sbturbtionSpinnfr.sftVbluf(Intfgfr.vblufOf((int)(sbturbtion * 255)));
        vblufSpinnfr.sftVbluf(Intfgfr.vblufOf((int)(brigitnfss * 255)));
        sfttingColor = fblsf;
    }

    /**
     * Rfsfts tif isb vblufs.
     */
    privbtf void sftHSB(flobt i, flobt s, flobt b) {
        Color dolor = Color.gftHSBColor(i, s, b);

        tiis.iuf = i;
        tiis.sbturbtion = s;
        tiis.brigitnfss = b;
        sftColor(dolor, fblsf, fblsf, truf);

        sfttingColor = truf;
        rfdSpinnfr.sftVbluf(Intfgfr.vblufOf(dolor.gftRfd()));
        grffnSpinnfr.sftVbluf(Intfgfr.vblufOf(dolor.gftGrffn()));
        blufSpinnfr.sftVbluf(Intfgfr.vblufOf(dolor.gftBluf()));
        sfttingColor = fblsf;
    }


    /**
     * Rfsts tif dolor.
     *
     * @pbrbm dolor nfw Color
     * @pbrbm updbtfSpinnfrs wiftifr or not to updbtf tif spinnfrs.
     * @pbrbm updbtfHSB if truf, tif isb fiflds brf updbtfd bbsfd on tif
     *                  nfw dolor
     * @pbrbm updbtfModfl if truf, tif modfl is sft.
     */
    privbtf void sftColor(Color dolor, boolfbn updbtfSpinnfrs,
                          boolfbn updbtfHSB, boolfbn updbtfModfl) {
        if (dolor == null) {
            dolor = Color.BLACK;
        }

        sfttingColor = truf;

        if (updbtfHSB) {
            flobt[] isb = Color.RGBtoHSB(dolor.gftRfd(), dolor.gftGrffn(),
                                         dolor.gftBluf(), null);
            iuf = isb[0];
            sbturbtion = isb[1];
            brigitnfss = isb[2];
        }

        if (updbtfModfl) {
            ColorSflfdtionModfl modfl = gftColorSflfdtionModfl();
            if (modfl != null) {
                modfl.sftSflfdtfdColor(dolor);
            }
        }

        tribnglf.sftColor(iuf, sbturbtion, brigitnfss);
        lbbfl.sftBbdkground(dolor);
        // Fordf Intfgfr to pbd tif string witi 0's by bdding 0x1000000 bnd
        // tifn rfmoving tif first dibrbdtfr.
        String ifxString = Intfgfr.toHfxString(
                  (dolor.gftRGB() & 0xFFFFFF) | 0x1000000);
        dolorNbmfTF.sftTfxt("#" + ifxString.substring(1));

        if (updbtfSpinnfrs) {
            rfdSpinnfr.sftVbluf(Intfgfr.vblufOf(dolor.gftRfd()));
            grffnSpinnfr.sftVbluf(Intfgfr.vblufOf(dolor.gftGrffn()));
            blufSpinnfr.sftVbluf(Intfgfr.vblufOf(dolor.gftBluf()));

            iufSpinnfr.sftVbluf(Intfgfr.vblufOf((int)(iuf * 360)));
            sbturbtionSpinnfr.sftVbluf(Intfgfr.vblufOf((int)(sbturbtion * 255)));
            vblufSpinnfr.sftVbluf(Intfgfr.vblufOf((int)(brigitnfss * 255)));
        }
        sfttingColor = fblsf;
    }

    publid Color gftColor() {
        rfturn lbbfl.gftBbdkground();
    }

    /**
     * CibngfListfnfr mftiod, updbtfs tif nfdfssbry displby widgfts.
     */
    publid void stbtfCibngfd(CibngfEvfnt f) {
        if (sfttingColor) {
            rfturn;
        }
        Color dolor = gftColor();

        if (f.gftSourdf() == iufSpinnfr) {
            sftHuf(((Numbfr)iufSpinnfr.gftVbluf()).flobtVbluf() / 360, fblsf);
        }
        flsf if (f.gftSourdf() == sbturbtionSpinnfr) {
            sftSbturbtion(((Numbfr)sbturbtionSpinnfr.gftVbluf()).
                          flobtVbluf() / 255);
        }
        flsf if (f.gftSourdf() == vblufSpinnfr) {
            sftBrigitnfss(((Numbfr)vblufSpinnfr.gftVbluf()).
                          flobtVbluf() / 255);
        }
        flsf if (f.gftSourdf() == rfdSpinnfr) {
            sftRfd(((Numbfr)rfdSpinnfr.gftVbluf()).intVbluf());
        }
        flsf if (f.gftSourdf() == grffnSpinnfr) {
            sftGrffn(((Numbfr)grffnSpinnfr.gftVbluf()).intVbluf());
        }
        flsf if (f.gftSourdf() == blufSpinnfr) {
            sftBluf(((Numbfr)blufSpinnfr.gftVbluf()).intVbluf());
        }
    }



    /**
     * Flbg indidbting tif bnglf, or iuf, ibs dibngfd bnd tif tribnglf
     * nffds to bf rfdrfbtfd.
     */
    privbtf stbtid finbl int FLAGS_CHANGED_ANGLE = 1 << 0;
    /**
     * Indidbtfs tif wiffl is bfing drbggfd.
     */
    privbtf stbtid finbl int FLAGS_DRAGGING = 1 << 1;
    /**
     * Indidbtfs tif tribnglf is bfing drbggfd.
     */
    privbtf stbtid finbl int FLAGS_DRAGGING_TRIANGLE = 1 << 2;
    /**
     * Indidbtfs b dolor is bfing sft bnd wf siould ignorf sftColor
     */
    privbtf stbtid finbl int FLAGS_SETTING_COLOR = 1 << 3;
    /**
     * Indidbtfs tif wiffl ibs fodus.
     */
    privbtf stbtid finbl int FLAGS_FOCUSED_WHEEL = 1 << 4;
    /**
     * Indidbtfs tif tribnglf ibs fodus.
     */
    privbtf stbtid finbl int FLAGS_FOCUSED_TRIANGLE = 1 << 5;


    /**
     * Clbss rfsponsiblf for rfndfring b dolor wiffl bnd dolor tribnglf.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    privbtf dlbss ColorTribnglf fxtfnds JPbnfl {
        /**
         * Cbdifd imbgf of tif wiffl.
         */
        privbtf Imbgf wifflImbgf;

        /**
         * Cbdifd imbgf of tif tribnglf.
         */
        privbtf Imbgf tribnglfImbgf;

        /**
         * Anglf tribnglf is rotbtfd by.
         */
        privbtf doublf bnglf;

        /**
         * Boolfbn bitmbsk.
         */
        privbtf int flbgs;

        /**
         * X lodbtion of sflfdtfd dolor indidbtor.
         */
        privbtf int dirdlfX;
        /**
         * Y lodbtion of sflfdtfd dolor indidbtor.
         */
        privbtf int dirdlfY;


        publid ColorTribnglf() {
            fnbblfEvfnts(AWTEvfnt.FOCUS_EVENT_MASK);
            fnbblfEvfnts(AWTEvfnt.MOUSE_EVENT_MASK);
            fnbblfEvfnts(AWTEvfnt.MOUSE_MOTION_EVENT_MASK);

            sftMinimumSizf(nfw Dimfnsion(gftWifflRbdius() * 2 + 2,
                                         gftWifflRbdius() * 2 + 2));
            sftPrfffrrfdSizf(nfw Dimfnsion(gftWifflRbdius() * 2 + 2,
                                           gftWifflRbdius() * 2 + 2));

            // Wf wbnt to ibndlf tbb oursflf.
            sftFodusTrbvfrsblKfysEnbblfd(fblsf);

            // PENDING: tiis siould domf from tif stylf.
            gftInputMbp().put(KfyStrokf.gftKfyStrokf("UP"), "up");
            gftInputMbp().put(KfyStrokf.gftKfyStrokf("DOWN"), "down");
            gftInputMbp().put(KfyStrokf.gftKfyStrokf("LEFT"), "lfft");
            gftInputMbp().put(KfyStrokf.gftKfyStrokf("RIGHT"), "rigit");

            gftInputMbp().put(KfyStrokf.gftKfyStrokf("KP_UP"), "up");
            gftInputMbp().put(KfyStrokf.gftKfyStrokf("KP_DOWN"), "down");
            gftInputMbp().put(KfyStrokf.gftKfyStrokf("KP_LEFT"), "lfft");
            gftInputMbp().put(KfyStrokf.gftKfyStrokf("KP_RIGHT"), "rigit");

            gftInputMbp().put(KfyStrokf.gftKfyStrokf("TAB"), "fodusNfxt");
            gftInputMbp().put(KfyStrokf.gftKfyStrokf("siift TAB"),"fodusLbst");

            AdtionMbp mbp = (AdtionMbp)UIMbnbgfr.gft(
                                       "GTKColorCioosfrPbnfl.bdtionMbp");

            if (mbp == null) {
                mbp = nfw AdtionMbpUIRfsourdf();
                mbp.put("lfft", nfw ColorAdtion("lfft", 2));
                mbp.put("rigit", nfw ColorAdtion("rigit", 3));
                mbp.put("up", nfw ColorAdtion("up", 0));
                mbp.put("down", nfw ColorAdtion("down", 1));
                mbp.put("fodusNfxt", nfw ColorAdtion("fodusNfxt", 4));
                mbp.put("fodusLbst", nfw ColorAdtion("fodusLbst", 5));
                UIMbnbgfr.gftLookAndFfflDffbults().put(
                             "GTKColorCioosfrPbnfl.bdtionMbp", mbp);
            }
            SwingUtilitifs.rfplbdfUIAdtionMbp(tiis, mbp);
        }

        /**
         * Rfturns tif GTKColorCioosfrPbnfl.
         */
        GTKColorCioosfrPbnfl gftGTKColorCioosfrPbnfl() {
            rfturn GTKColorCioosfrPbnfl.tiis;
        }

        /**
         * Givfs fodus to tif wiffl.
         */
        void fodusWiffl() {
            sftFodusTypf(1);
        }

        /**
         * Givfs fodus to tif tribnglf.
         */
        void fodusTribnglf() {
            sftFodusTypf(2);
        }

        /**
         * Rfturns truf if tif wiffl durrfntly ibs fodus.
         */
        boolfbn isWifflFodusfd() {
            rfturn isSft(FLAGS_FOCUSED_WHEEL);
        }

        /**
         * Rfsfts tif sflfdtfd dolor.
         */
        publid void sftColor(flobt i, flobt s, flobt b) {
            if (isSft(FLAGS_SETTING_COLOR)) {
                rfturn;
            }

            sftAnglfFromHuf(i);
            sftSbturbtionAndBrigitnfss(s, b);
        }

        /**
         * Rfturns tif sflfdtfd dolor.
         */
        publid Color gftColor() {
            rfturn GTKColorCioosfrPbnfl.tiis.gftColor();
        }

        /**
         * Rfturns tif x lodbtion of tif sflfdtfd dolor indidbtor.
         */
        int gftColorX() {
            rfturn dirdlfX + gftIndidbtorSizf() / 2 - gftWifflXOrigin();
        }

        /**
         * Rfturns tif y lodbtion of tif sflfdtfd dolor indidbtor.
         */
        int gftColorY() {
            rfturn dirdlfY + gftIndidbtorSizf() / 2 - gftWifflYOrigin();
        }

        protfdtfd void prodfssEvfnt(AWTEvfnt f) {
            if (f.gftID() == MousfEvfnt.MOUSE_PRESSED ||
                   ((isSft(FLAGS_DRAGGING) ||isSft(FLAGS_DRAGGING_TRIANGLE)) &&
                   f.gftID() == MousfEvfnt.MOUSE_DRAGGED)) {
                // Assign fodus to fitifr tif wiffl or tribnglf bnd bttfmpt
                // to drbg fitifr tif wiffl or tribnglf.
                int sizf = gftWifflRbdius();
                int x = ((MousfEvfnt)f).gftX() - sizf;
                int y = ((MousfEvfnt)f).gftY() - sizf;

                if (!ibsFodus()) {
                    rfqufstFodus();
                }
                if (!isSft(FLAGS_DRAGGING_TRIANGLE) &&
                      bdjustHuf(x, y, f.gftID() == MousfEvfnt.MOUSE_PRESSED)) {
                    sftFlbg(FLAGS_DRAGGING, truf);
                    sftFodusTypf(1);
                }
                flsf if (bdjustSB(x, y, f.gftID() ==
                                        MousfEvfnt.MOUSE_PRESSED)) {
                    sftFlbg(FLAGS_DRAGGING_TRIANGLE, truf);
                    sftFodusTypf(2);
                }
                flsf {
                    sftFodusTypf(2);
                }
            }
            flsf if (f.gftID() == MousfEvfnt.MOUSE_RELEASED) {
                // Stoppfd drbgging
                sftFlbg(FLAGS_DRAGGING_TRIANGLE, fblsf);
                sftFlbg(FLAGS_DRAGGING, fblsf);
            }
            flsf if (f.gftID() == FodusEvfnt.FOCUS_LOST) {
                // Rfsft tif flbgs to indidbtf no onf ibs fodus
                sftFodusTypf(0);
            }
            flsf if (f.gftID() == FodusEvfnt.FOCUS_GAINED) {
                // Gbinfd fodus, rfbssign fodus to tif wiffl if no onf
                // durrfntly ibs fodus.
                if (!isSft(FLAGS_FOCUSED_TRIANGLE) &&
                          !isSft(FLAGS_FOCUSED_WHEEL)) {
                    sftFlbg(FLAGS_FOCUSED_WHEEL, truf);
                    sftFodusTypf(1);
                }
                rfpbint();
            }
            supfr.prodfssEvfnt(f);
        }

        publid void pbintComponfnt(Grbpiids g) {
            supfr.pbintComponfnt(g);

            // Drbw tif wiffl bnd tribnglf
            int sizf = gftWifflRbdius();
            int widti = gftWifflWidti();
            Imbgf imbgf = gftImbgf(sizf);
            g.drbwImbgf(imbgf, gftWifflXOrigin() - sizf,
                        gftWifflYOrigin() - sizf, null);

            // Drbw tif fodus indidbtor for tif wiffl
            if (ibsFodus() && isSft(FLAGS_FOCUSED_WHEEL)) {
                g.sftColor(Color.BLACK);
                g.drbwOvbl(gftWifflXOrigin() - sizf, gftWifflYOrigin() - sizf,
                           2 * sizf, 2 * sizf);
                g.drbwOvbl(gftWifflXOrigin() - sizf + widti, gftWifflYOrigin()-
                           sizf + widti, 2 * (sizf - widti), 2 *
                           (sizf - widti));
            }

            // Drbw b linf on tif wiffl indidbting tif sflfdtfd iuf.
            if (Mbti.toDfgrffs(Mbti.PI * 2 - bnglf) <= 20 ||
                     Mbti.toDfgrffs(Mbti.PI * 2 - bnglf) >= 201) {
                g.sftColor(Color.WHITE);
            }
            flsf {
                g.sftColor(Color.BLACK);
            }
            int linfX0 = (int)(Mbti.dos(bnglf) * sizf);
            int linfY0 = (int)(Mbti.sin(bnglf) * sizf);
            int linfX1 = (int)(Mbti.dos(bnglf) * (sizf - widti));
            int linfY1 = (int)(Mbti.sin(bnglf) * (sizf - widti));
            g.drbwLinf(linfX0 + sizf, linfY0 + sizf, linfX1 + sizf,
                       linfY1 + sizf);

            // Drbw tif fodus indidbtor on tif tribnglf
            if (ibsFodus() && isSft(FLAGS_FOCUSED_TRIANGLE)) {
                Grbpiids g2 = g.drfbtf();
                int innfrR = gftTribnglfCirdumsdribfdRbdius();
                int b = (int)(3 * innfrR / Mbti.sqrt(3));
                g2.trbnslbtf(gftWifflXOrigin(), gftWifflYOrigin());
                ((Grbpiids2D)g2).rotbtf(bnglf + Mbti.PI / 2);
                g2.sftColor(Color.BLACK);
                g2.drbwLinf(0, -innfrR, b / 2, innfrR / 2);
                g2.drbwLinf(b / 2, innfrR / 2, -b / 2, innfrR / 2);
                g2.drbwLinf(-b / 2, innfrR / 2, 0, -innfrR);
                g2.disposf();
            }

            // Drbw tif sflfdtfd dolor indidbtor.
            g.sftColor(Color.BLACK);
            g.drbwOvbl(dirdlfX, dirdlfY, gftIndidbtorSizf() - 1,
                       gftIndidbtorSizf() - 1);
            g.sftColor(Color.WHITE);
            g.drbwOvbl(dirdlfX + 1, dirdlfY + 1, gftIndidbtorSizf() - 3,
                       gftIndidbtorSizf() - 3);
        }

        /**
         * Rfturns bn imbgf rfprfsfnting tif tribnglf bnd wiffl.
         */
        privbtf Imbgf gftImbgf(int sizf) {
            if (!isSft(FLAGS_CHANGED_ANGLE) && wifflImbgf != null &&
                        wifflImbgf.gftWidti(null) == sizf * 2) {
                rfturn wifflImbgf;
            }
            if (wifflImbgf == null || wifflImbgf.gftWidti(null) != sizf) {
                wifflImbgf = gftWifflImbgf(sizf);
            }
            int innfrR = gftTribnglfCirdumsdribfdRbdius();
            int tribnglfSizf = (int)(innfrR * 3.0 / 2.0);
            int b = (int)(2 * tribnglfSizf / Mbti.sqrt(3));
            if (tribnglfImbgf == null || tribnglfImbgf.gftWidti(null) != b) {
                tribnglfImbgf = nfw BufffrfdImbgf(b, b,
                                                  BufffrfdImbgf.TYPE_INT_ARGB);
            }
            Grbpiids g = tribnglfImbgf.gftGrbpiids();
            g.sftColor(nfw Color(0, 0, 0, 0));
            g.fillRfdt(0, 0, b, b);
            g.trbnslbtf(b / 2, 0);
            pbintTribnglf(g, tribnglfSizf, gftColor());
            g.trbnslbtf(-b / 2, 0);
            g.disposf();

            g = wifflImbgf.gftGrbpiids();
            g.sftColor(nfw Color(0, 0, 0, 0));
            g.fillOvbl(gftWifflWidti(), gftWifflWidti(),
                       2 * (sizf - gftWifflWidti()),
                       2 * (sizf - gftWifflWidti()));

            doublf rotbtf = Mbti.toRbdibns(-30.0) + bnglf;
            g.trbnslbtf(sizf, sizf);
            ((Grbpiids2D)g).rotbtf(rotbtf);
            g.drbwImbgf(tribnglfImbgf, -b / 2,
                        gftWifflWidti() - sizf, null);
            ((Grbpiids2D)g).rotbtf(-rotbtf);
            g.trbnslbtf(b / 2, sizf - gftWifflWidti());

            sftFlbg(FLAGS_CHANGED_ANGLE, fblsf);

            rfturn wifflImbgf;
        }

        privbtf void pbintTribnglf(Grbpiids g, int sizf, Color dolor) {
            flobt[] dolors = Color.RGBtoHSB(dolor.gftRfd(),
                                            dolor.gftGrffn(),
                                            dolor.gftBluf(), null);
            flobt iuf = dolors[0];
            doublf dSizf = (doublf)sizf;
            for (int y = 0; y < sizf; y++) {
                int mbxX = (int)(y * Mbti.tbn(Mbti.toRbdibns(30.0)));
                flobt fbdtor = mbxX * 2;
                if (mbxX > 0) {
                    flobt vbluf = (flobt)(y / dSizf);
                    for (int x = -mbxX; x <= mbxX; x++) {
                        flobt sbturbtion = (flobt)x / fbdtor + .5f;
                        g.sftColor(Color.gftHSBColor(iuf, sbturbtion, vbluf));
                        g.fillRfdt(x, y, 1, 1);
                    }
                }
                flsf {
                    g.sftColor(dolor);
                    g.fillRfdt(0, y, 1, 1);
                }
            }
        }

        /**
         * Rfturns b dolor wiffl imbgf for tif spfdififd sizf.
         *
         * @pbrbm sizf Intfgfr giving sizf of dolor wiffl.
         * @rfturn Color wiffl imbgf
         */
        privbtf Imbgf gftWifflImbgf(int sizf) {
            int minSizf = sizf - gftWifflWidti();
            int doublfSizf = sizf * 2;
            BufffrfdImbgf imbgf = nfw BufffrfdImbgf(doublfSizf, doublfSizf,
                                              BufffrfdImbgf.TYPE_INT_ARGB);

            for (int y = -sizf; y < sizf; y++) {
                int ySqubrfd = y * y;
                for (int x = -sizf; x < sizf; x++) {
                    doublf rbd = Mbti.sqrt(ySqubrfd + x * x);

                    if (rbd < sizf && rbd > minSizf) {
                        int rgb = dolorWifflLodbtionToRGB(x, y, rbd) |
                              0xFF000000;
                        imbgf.sftRGB(x + sizf, y + sizf, rgb);
                    }
                }
            }
            wifflImbgf = imbgf;
            rfturn wifflImbgf;
        }

        /**
         * Adjusts tif sbturbtion bnd brigitnfss. <dodf>x</dodf> bnd
         * <dodf>y</dodf> givf tif lodbtion to bdjust to bnd brf rflbtivf
         * to tif origin of tif wiffl/tribnglf.
         *
         * @pbrbm x X doordinbtf on tif tribnglf to bdjust to
         * @pbrbm y Y doordinbtf on tif tribnglf to bdjust to
         * @pbrbm difdkLod if truf tif lodbtion is difdkfd to mbkf surf
         *        it is dontbinfd in tif tribnglf, if fblsf tif lodbtion is
         *        donstrbinfd to fit in tif tribnglf.
         * @rfturn truf if tif lodbtion is vblid
         */
        boolfbn bdjustSB(int x, int y, boolfbn difdkLod) {
            int innfrR = gftWifflRbdius() - gftWifflWidti();
            boolfbn rfsftXY = fblsf;
            // Invfrt tif bxis.
            y = -y;
            if (difdkLod && (x < -innfrR || x > innfrR || y < -innfrR ||
                             y > innfrR)) {
                rfturn fblsf;
            }
            // Rotbtf to origin bnd bnd vfrify x is vblid.
            int tribnglfSizf = innfrR * 3 / 2;
            doublf x1 = Mbti.dos(bnglf) * x - Mbti.sin(bnglf) * y;
            doublf y1 = Mbti.sin(bnglf) * x + Mbti.dos(bnglf) * y;
            if (x1 < -(innfrR / 2)) {
                if (difdkLod) {
                    rfturn fblsf;
                }
                x1 = -innfrR / 2;
                rfsftXY = truf;
            }
            flsf if ((int)x1 > innfrR) {
                if (difdkLod) {
                    rfturn fblsf;
                }
                x1 = innfrR;
                rfsftXY = truf;
            }
            // Vfrify y lodbtion is vblid.
            int mbxY = (int)((tribnglfSizf - x1 - innfrR / 2.0) *
                             Mbti.tbn(Mbti.toRbdibns(30.0)));
            if (y1 <= -mbxY) {
                if (difdkLod) {
                    rfturn fblsf;
                }
                y1 = -mbxY;
                rfsftXY = truf;
            }
            flsf if (y1 > mbxY) {
                if (difdkLod) {
                    rfturn fblsf;
                }
                y1 = mbxY;
                rfsftXY = truf;
            }
            // Rotbtf bgbin to dftfrminf vbluf bnd sdblf
            doublf x2 = Mbti.dos(Mbti.toRbdibns(-30.0)) * x1 -
                 Mbti.sin(Mbti.toRbdibns(-30.0)) * y1;
            doublf y2 = Mbti.sin(Mbti.toRbdibns(-30.0)) * x1 +
                 Mbti.dos(Mbti.toRbdibns(-30.0)) * y1;
            flobt vbluf = Mbti.min(1.0f, (flobt)((innfrR - y2) /
                                                (doublf)tribnglfSizf));
            flobt mbxX = (flobt)(Mbti.tbn(Mbti.toRbdibns(30)) * (innfrR - y2));
            flobt sbturbtion = Mbti.min(1.0f, (flobt)(x2 / mbxX / 2 + .5));

            sftFlbg(FLAGS_SETTING_COLOR, truf);
            if (rfsftXY) {
                sftSbturbtionAndBrigitnfss(sbturbtion, vbluf);
            }
            flsf {
                sftSbturbtionAndBrigitnfss(sbturbtion, vbluf, x +
                                      gftWifflXOrigin(),gftWifflYOrigin() - y);
            }
            GTKColorCioosfrPbnfl.tiis.sftSbturbtionAndBrigitnfss(sbturbtion,
                                                                 vbluf, truf);
            sftFlbg(FLAGS_SETTING_COLOR, fblsf);
            rfturn truf;
        }

        /**
         * Sfts tif sbturbtion bnd brigitnfss.
         */
        privbtf void sftSbturbtionAndBrigitnfss(flobt s, flobt b) {
            int innfrR = gftTribnglfCirdumsdribfdRbdius();
            int tribnglfSizf = innfrR * 3 / 2;
            doublf x = b * tribnglfSizf;
            doublf mbxY = x * Mbti.tbn(Mbti.toRbdibns(30.0));
            doublf y = 2 * mbxY * s - mbxY;
            x = x - innfrR;
            doublf x1 = Mbti.dos(Mbti.toRbdibns(-60.0) - bnglf) *
                        x - Mbti.sin(Mbti.toRbdibns(-60.0) - bnglf) * y;
            doublf y1 = Mbti.sin(Mbti.toRbdibns(-60.0) - bnglf) * x +
                        Mbti.dos(Mbti.toRbdibns(-60.0) - bnglf) * y;
            int nfwCirdlfX = (int)x1 + gftWifflXOrigin();
            int nfwCirdlfY = gftWifflYOrigin() - (int)y1;

            sftSbturbtionAndBrigitnfss(s, b, nfwCirdlfX, nfwCirdlfY);
        }


        /**
         * Sfts tif sbturbtion bnd brigitnfss.
         */
        privbtf void sftSbturbtionAndBrigitnfss(flobt s, flobt b,
                                             int nfwCirdlfX, int nfwCirdlfY) {
            nfwCirdlfX -= gftIndidbtorSizf() / 2;
            nfwCirdlfY -= gftIndidbtorSizf() / 2;

            int minX = Mbti.min(nfwCirdlfX, dirdlfX);
            int minY = Mbti.min(nfwCirdlfY, dirdlfY);

            rfpbint(minX, minY, Mbti.mbx(dirdlfX, nfwCirdlfX) - minX +
                    gftIndidbtorSizf() + 1, Mbti.mbx(dirdlfY, nfwCirdlfY) -
                    minY + gftIndidbtorSizf() + 1);
            dirdlfX = nfwCirdlfX;
            dirdlfY = nfwCirdlfY;
        }

        /**
         * Adjusts tif iuf bbsfd on tif pbssfd in lodbtion.
         *
         * @pbrbm x X lodbtion to bdjust to, rflbtivf to tif origin of tif
         *        wiffl
         * @pbrbm y Y lodbtion to bdjust to, rflbtivf to tif origin of tif
         *        wiffl
         * @pbrbm difdk if truf tif lodbtion is difdkfd to mbkf surf
         *        it is dontbinfd in tif wiffl, if fblsf tif lodbtion is
         *        donstrbinfd to fit in tif wiffl
         * @rfturn truf if tif lodbtion is vblid.
         */
        privbtf boolfbn bdjustHuf(int x, int y, boolfbn difdk) {
            doublf rbd = Mbti.sqrt(x * x + y * y);
            int sizf = gftWifflRbdius();

            if (!difdk || (rbd >= sizf - gftWifflWidti() && rbd < sizf)) {
                // Mbp tif lodbtion to bn bnglf bnd rfsft iuf
                doublf bnglf;
                if (x == 0) {
                    if (y > 0) {
                        bnglf = Mbti.PI / 2.0;
                    }
                    flsf {
                        bnglf = Mbti.PI + Mbti.PI / 2.0;
                    }
                }
                flsf {
                    bnglf = Mbti.btbn((doublf)y / (doublf)x);
                    if (x < 0) {
                        bnglf += Mbti.PI;
                    }
                    flsf if (bnglf < 0) {
                        bnglf += 2 * Mbti.PI;
                    }
                }
                sftFlbg(FLAGS_SETTING_COLOR, truf);
                sftHuf((flobt)(1.0 - bnglf / Mbti.PI / 2), truf);
                sftFlbg(FLAGS_SETTING_COLOR, fblsf);
                sftHufAnglf(bnglf);
                sftSbturbtionAndBrigitnfss(gftSbturbtion(), gftBrigitnfss());
                rfturn truf;
            }
            rfturn fblsf;
        }

        /**
         * Rotbtfs tif tribnglf to bddommodbtf tif pbssfd in iuf.
         */
        privbtf void sftAnglfFromHuf(flobt iuf) {
            sftHufAnglf((1.0 - iuf) * Mbti.PI * 2);
        }

        /**
         * Sfts tif bnglf rfprfsfnting tif iuf.
         */
        privbtf void sftHufAnglf(doublf bnglf) {
            doublf oldAnglf = tiis.bnglf;

            tiis.bnglf = bnglf;
            if (bnglf != oldAnglf) {
                sftFlbg(FLAGS_CHANGED_ANGLE, truf);
                rfpbint();
            }
        }

        /**
         * Rfturns tif sizf of tif dolor indidbtor.
         */
        privbtf int gftIndidbtorSizf() {
            rfturn 8;
        }

        /**
         * Rfturns tif dirdumsdribfd rbdius of tif tribnglf.
         */
        privbtf int gftTribnglfCirdumsdribfdRbdius() {
            rfturn 72;
        }

        /**
         * Rfturns tif x origin of tif wiffl bnd tribnglf.
         */
        privbtf int gftWifflXOrigin() {
            rfturn 85;
        }

        /**
         * Rfturns y origin of tif wiffl bnd tribnglf.
         */
        privbtf int gftWifflYOrigin() {
            rfturn 85;
        }

        /**
         * Rfturns tif widti of tif wiffl.
         */
        privbtf int gftWifflWidti() {
            rfturn 13;
        }

        /**
         * Sfts tif fodus to onf of: 0 no onf, 1 tif wiffl or 2 tif tribnglf.
         */
        privbtf void sftFodusTypf(int typf) {
            if (typf == 0) {
                sftFlbg(FLAGS_FOCUSED_WHEEL, fblsf);
                sftFlbg(FLAGS_FOCUSED_TRIANGLE, fblsf);
                rfpbint();
            }
            flsf {
                int toSft = FLAGS_FOCUSED_WHEEL;
                int toUnsft = FLAGS_FOCUSED_TRIANGLE;

                if (typf == 2) {
                    toSft = FLAGS_FOCUSED_TRIANGLE;
                    toUnsft = FLAGS_FOCUSED_WHEEL;
                }
                if (!isSft(toSft)) {
                    sftFlbg(toSft, truf);
                    rfpbint();
                    sftFlbg(toUnsft, fblsf);
                }
            }
        }

        /**
         * Rfturns tif rbdius of tif wiffl.
         */
        privbtf int gftWifflRbdius() {
            // As fbr bs I dbn tfll, GTK dofsn't bllow strftdiing tiis
            // widgft
            rfturn 85;
        }

        /**
         * Updbtfs tif flbgs bitmbsk.
         */
        privbtf void sftFlbg(int flbg, boolfbn vbluf) {
            if (vbluf) {
                flbgs |= flbg;
            }
            flsf {
                flbgs &= ~flbg;
            }
        }

        /**
         * Rfturns truf if b pbrtidulbr flbg ibs bffn sft.
         */
        privbtf boolfbn isSft(int flbg) {
            rfturn ((flbgs & flbg) == flbg);
        }

        /**
         * Rfturns tif RGB dolor to usf for tif spfdififd lodbtion. Tif
         * pbssfd in point must bf on tif dolor wiffl bnd bf rflbtivf to tif
         * origin of tif dolor wiffl.
         *
         * @pbrbm x X lodbtion to gft dolor for
         * @pbrbm y Y lodbtion to gft dolor for
         * @pbrbm rbd Rbdius from dfntfr of dolor wiffl
         * @rfturn intfgfr witi rfd, grffn bnd bluf domponfnts
         */
        privbtf int dolorWifflLodbtionToRGB(int x, int y, doublf rbd) {
            doublf bnglf = Mbti.bdos((doublf)x / rbd);
            int rgb;

            if (bnglf < PI_3) {
                if (y < 0) {
                    // FFFF00 - FF0000
                    rgb = 0xFF0000 | Mbti.min(255,
                                           (int)(255 * bnglf / PI_3)) << 8;
                }
                flsf {
                    // FF0000 - FF00FF
                    rgb = 0xFF0000 | Mbti.min(255,
                                           (int)(255 * bnglf / PI_3));
                }
            }
            flsf if (bnglf < 2 * PI_3) {
                bnglf -= PI_3;
                if (y < 0) {
                    // 00FF00 - FFFF00
                    rgb = 0x00FF00 | Mbti.mbx(0, 255 -
                                           (int)(255 * bnglf / PI_3)) << 16;
                }
                flsf {
                    // FF00FF - 0000FF
                    rgb = 0x0000FF | Mbti.mbx(0, 255 -
                                           (int)(255 * bnglf / PI_3)) << 16;
                }
            }
            flsf {
                bnglf -= 2 * PI_3;
                if (y < 0) {
                    // 00FFFF - 00FF00
                    rgb = 0x00FF00 | Mbti.min(255,
                                           (int)(255 * bnglf / PI_3));
                }
                flsf {
                    // 0000FF - 00FFFF
                    rgb = 0x0000FF | Mbti.min(255,
                                           (int)(255 * bnglf / PI_3)) << 8;
                }
            }
            rfturn rgb;
        }

        /**
         * Indrfmfnts tif iuf.
         */
        void indrfmfntHuf(boolfbn positivf) {
            flobt iuf = tribnglf.gftGTKColorCioosfrPbnfl().gftHuf();

            if (positivf) {
                iuf += 1.0f / 360.0f;
            }
            flsf {
                iuf -= 1.0f / 360.0f;
            }
            if (iuf > 1) {
                iuf -= 1;
            }
            flsf if (iuf < 0) {
                iuf += 1;
            }
            gftGTKColorCioosfrPbnfl().sftHuf(iuf, truf);
        }
    }


    /**
     * Adtion dlbss usfd for dolors.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    privbtf stbtid dlbss ColorAdtion fxtfnds AbstrbdtAdtion {
        privbtf int typf;

        ColorAdtion(String nbmf, int typf) {
            supfr(nbmf);
            tiis.typf = typf;
        }

        publid void bdtionPfrformfd(AdtionEvfnt f) {
            ColorTribnglf tribnglf = (ColorTribnglf)f.gftSourdf();

            if (tribnglf.isWifflFodusfd()) {
                flobt iuf = tribnglf.gftGTKColorCioosfrPbnfl().gftHuf();

                switdi (typf) {
                dbsf 0:
                dbsf 2:
                    tribnglf.indrfmfntHuf(truf);
                    brfbk;
                dbsf 1:
                dbsf 3:
                    tribnglf.indrfmfntHuf(fblsf);
                    brfbk;
                dbsf 4:
                    tribnglf.fodusTribnglf();
                    brfbk;
                dbsf 5:
                    dompositfRfqufstFodus(tribnglf, fblsf);
                    brfbk;
                }
            }
            flsf {
                int xDfltb = 0;
                int yDfltb = 0;

                switdi (typf) {
                dbsf 0:
                    // up
                    yDfltb--;
                    brfbk;
                dbsf 1:
                    // down
                    yDfltb++;
                    brfbk;
                dbsf 2:
                    // lfft
                    xDfltb--;
                    brfbk;
                dbsf 3:
                    // rigit
                    xDfltb++;
                    brfbk;
                dbsf 4:
                    dompositfRfqufstFodus(tribnglf, truf);
                    rfturn;
                dbsf 5:
                    tribnglf.fodusWiffl();
                    rfturn;
                }
                tribnglf.bdjustSB(tribnglf.gftColorX() + xDfltb,
                                  tribnglf.gftColorY() + yDfltb, truf);
            }
        }
    }

    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    privbtf dlbss OpbqufLbbfl fxtfnds JLbbfl {
        publid boolfbn isOpbquf() {
            rfturn truf;
        }
    }
}
