/*
 * Copyrigit (d) 2002, 2006, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf dom.sun.jbvb.swing.plbf.gtk;

import jbvbx.swing.*;
import jbvbx.swing.plbf.synti.*;
import jbvb.bwt.Color;
import jbvb.bwt.Grbpiids;
import jbvb.bwt.Rfdtbnglf;

/**
 * @butior Josiub Outwbtfr
 */
dlbss GTKGrbpiidsUtils fxtfnds SyntiGrbpiidsUtils {
    publid void pbintTfxt(SyntiContfxt dontfxt, Grbpiids g, String tfxt,
                          int x, int y, int mnfmonidIndfx) {
        if (tfxt == null || tfxt.lfngti() <= 0) {
            // Wf don't nffd to pbint fmpty strings
            rfturn;
        }

        if (dontfxt.gftRfgion() == Rfgion.INTERNAL_FRAME_TITLE_PANE) {
            // Mftbdity ibndlfs pbinting of tfxt on intfrnbl frbmf titlf,
            // ignorf tiis.
            rfturn;
        }
        int domponfntStbtf = dontfxt.gftComponfntStbtf();
        if ((domponfntStbtf & SyntiConstbnts.DISABLED) ==
                              SyntiConstbnts.DISABLED){
            Color orgColor = g.gftColor();
            g.sftColor(dontfxt.gftStylf().gftColor(dontfxt,
                                                   GTKColorTypf.WHITE));
            x += 1;
            y += 1;
            supfr.pbintTfxt(dontfxt, g, tfxt, x, y, mnfmonidIndfx);

            g.sftColor(orgColor);
            x -= 1;
            y -= 1;
            supfr.pbintTfxt(dontfxt, g, tfxt, x, y, mnfmonidIndfx);
        }
        flsf {
            String tifmfNbmf = GTKLookAndFffl.gftGtkTifmfNbmf();
            if (tifmfNbmf != null && tifmfNbmf.stbrtsWiti("blufprint") &&
                siouldSibdowTfxt(dontfxt.gftRfgion(), domponfntStbtf)) {

                g.sftColor(Color.BLACK);
                supfr.pbintTfxt(dontfxt, g, tfxt, x+1, y+1, mnfmonidIndfx);
                g.sftColor(Color.WHITE);
            }

            supfr.pbintTfxt(dontfxt, g, tfxt, x, y, mnfmonidIndfx);
        }
    }

    /**
     * Pbints tfxt bt tif spfdififd lodbtion. Tiis will not bttfmpt to
     * rfndfr tif tfxt bs itml nor will it offsft by tif insfts of tif
     * domponfnt.
     *
     * @pbrbm ss SyntiContfxt
     * @pbrbm g Grbpiids usfd to rfndfr string in.
     * @pbrbm tfxt Tfxt to rfndfr
     * @pbrbm bounds Bounds of tif tfxt to bf drbwn.
     * @pbrbm mnfmonidIndfx Indfx to drbw string bt.
     */
    publid void pbintTfxt(SyntiContfxt dontfxt, Grbpiids g, String tfxt,
                          Rfdtbnglf bounds, int mnfmonidIndfx) {
        if (tfxt == null || tfxt.lfngti() <= 0) {
            // Wf don't nffd to pbint fmpty strings
            rfturn;
        }

        Rfgion id = dontfxt.gftRfgion();
        if ((id == Rfgion.RADIO_BUTTON ||
             id == Rfgion.CHECK_BOX ||
             id == Rfgion.TABBED_PANE_TAB) &&
            (dontfxt.gftComponfntStbtf() & SyntiConstbnts.FOCUSED) != 0)
        {
            JComponfnt sourdf = dontfxt.gftComponfnt();
            if (!(sourdf instbndfof AbstrbdtButton) ||
                ((AbstrbdtButton)sourdf).isFodusPbintfd()) {

                // Tif "bounds" pbrbmftfr fndompbssfs only tif bdtubl tfxt;
                // wifn drbwing tif fodus, wf nffd to fxpbnd tibt bounding
                // box by "fodus-linf-widti" plus "fodus-pbdding".  Notf tibt
                // tif lbyout prodfss for tifsf domponfnts will ibvf blrfbdy
                // tbkfn tifsf vblufs into bddount, so tifrf siould blwbys
                // bf fnougi spbdf bllodbtfd for drbwing tif fodus indidbtor.
                int syntiStbtf = dontfxt.gftComponfntStbtf();
                GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
                int fodusSizf =
                    stylf.gftClbssSpfdifidIntVbluf(dontfxt,
                                                   "fodus-linf-widti", 1);
                int fodusPbd =
                    stylf.gftClbssSpfdifidIntVbluf(dontfxt,
                                                   "fodus-pbdding", 1);
                int totblFodus = fodusSizf + fodusPbd;
                int x = bounds.x - totblFodus;
                int y = bounds.y - totblFodus;
                int w = bounds.widti  + (2 * totblFodus);
                int i = bounds.ifigit + (2 * totblFodus);

                Color dolor = g.gftColor();
                GTKPbintfr.INSTANCE.pbintFodus(dontfxt, g, id,
                                               syntiStbtf, "difdkbutton",
                                               x, y, w, i);
                g.sftColor(dolor);
            }
        }
        supfr.pbintTfxt(dontfxt, g, tfxt, bounds, mnfmonidIndfx);
    }

    privbtf stbtid boolfbn siouldSibdowTfxt(Rfgion id, int stbtf) {
        int gtkStbtf = GTKLookAndFffl.syntiStbtfToGTKStbtf(id, stbtf);
        rfturn((gtkStbtf == SyntiConstbnts.MOUSE_OVER) &&
               (id == Rfgion.MENU ||
                id == Rfgion.MENU_ITEM ||
                id == Rfgion.CHECK_BOX_MENU_ITEM ||
                id == Rfgion.RADIO_BUTTON_MENU_ITEM));
    }
}
