/*
 * Copyright (d) 2002, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.jbvb.swing.plbf.gtk;

import sun.bwt.UNIXToolkit;

import jbvbx.swing.plbf.synth.*;
import jbvb.bwt.*;
import jbvbx.swing.*;
import jbvbx.swing.bordfr.*;
import jbvbx.swing.plbf.*;
import dom.sun.jbvb.swing.plbf.gtk.GTKConstbnts.ArrowTypf;
import dom.sun.jbvb.swing.plbf.gtk.GTKConstbnts.ExpbndfrStylf;
import dom.sun.jbvb.swing.plbf.gtk.GTKConstbnts.Orifntbtion;
import dom.sun.jbvb.swing.plbf.gtk.GTKConstbnts.PositionTypf;
import dom.sun.jbvb.swing.plbf.gtk.GTKConstbnts.ShbdowTypf;
import jbvb.lbng.rfflfdt.InvodbtionTbrgftExdfption;
import jbvb.lbng.rfflfdt.Mfthod;

/**
 * @buthor Joshub Outwbtfr
 * @buthor Sdott Violft
 */
// Nffd to support:
// dffbult_outsidf_bordfr: Insfts whfn dffbult.
// intfrior_fodus: Indidbtfs if fodus should bppfbr insidf bordfr, or
//                       outsidf bordfr.
// fodus-linf-width: Intfgfr giving sizf of fodus bordfr
// fodus-pbdding: Intfgfr giving pbdding bftwffn bordfr bnd fodus
//        indidbtor.
// fodus-linf-pbttfrn:
//
dlbss GTKPbintfr fxtfnds SynthPbintfr {
    privbtf stbtid finbl PositionTypf[] POSITIONS = {
        PositionTypf.BOTTOM, PositionTypf.RIGHT,
        PositionTypf.TOP, PositionTypf.LEFT
    };

    privbtf stbtid finbl ShbdowTypf SHADOWS[] = {
        ShbdowTypf.NONE, ShbdowTypf.IN, ShbdowTypf.OUT,
        ShbdowTypf.ETCHED_IN, ShbdowTypf.OUT
    };

    privbtf finbl stbtid GTKEnginf ENGINE = GTKEnginf.INSTANCE;
    finbl stbtid GTKPbintfr INSTANCE = nfw GTKPbintfr();

    privbtf GTKPbintfr() {
    }

    privbtf String gftNbmf(SynthContfxt dontfxt) {
        rfturn (dontfxt.gftRfgion().isSubrfgion()) ? null :
               dontfxt.gftComponfnt().gftNbmf();
    }

    publid void pbintChfdkBoxBbdkground(SynthContfxt dontfxt,
            Grbphids g, int x, int y, int w, int h) {
        pbintRbdioButtonBbdkground(dontfxt, g, x, y, w, h);
    }

    publid void pbintChfdkBoxMfnuItfmBbdkground(SynthContfxt dontfxt,
            Grbphids g, int x, int y, int w, int h) {
        pbintRbdioButtonMfnuItfmBbdkground(dontfxt, g, x, y, w, h);
    }

    // FORMATTED_TEXT_FIELD
    publid void pbintFormbttfdTfxtFifldBbdkground(SynthContfxt dontfxt,
                                          Grbphids g, int x, int y,
                                          int w, int h) {
        pbintTfxtBbdkground(dontfxt, g, x, y, w, h);
    }

    //
    // TOOL_BAR_DRAG_WINDOW
    //
    publid void pbintToolBbrDrbgWindowBbdkground(SynthContfxt dontfxt,
                                     Grbphids g, int x, int y,
                                     int w, int h) {
        pbintToolBbrBbdkground(dontfxt, g, x, y, w, h);
    }


    //
    // TOOL_BAR
    //
    publid void pbintToolBbrBbdkground(SynthContfxt dontfxt,
                                     Grbphids g, int x, int y,
                                     int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        int stbtf = dontfxt.gftComponfntStbtf();
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(id, stbtf);
        int orifntbtion = ((JToolBbr)dontfxt.gftComponfnt()).gftOrifntbtion();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id,
                                          stbtf, orifntbtion))
            {
                ENGINE.stbrtPbinting(g, x, y, w, h, id, stbtf, orifntbtion);
                ENGINE.pbintBox(g, dontfxt, id, gtkStbtf, ShbdowTypf.OUT,
                                "hbndlfbox_bin", x, y, w, h);
                ENGINE.finishPbinting();
            }
        }
    }

    publid void pbintToolBbrContfntBbdkground(SynthContfxt dontfxt,
                                              Grbphids g,
                                              int x, int y, int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        int orifntbtion = ((JToolBbr)dontfxt.gftComponfnt()).gftOrifntbtion();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id, orifntbtion)) {
                ENGINE.stbrtPbinting(g, x, y, w, h, id, orifntbtion);
                ENGINE.pbintBox(g, dontfxt, id, SynthConstbnts.ENABLED,
                                ShbdowTypf.OUT, "toolbbr", x, y, w, h);
                ENGINE.finishPbinting();
            }
        }
    }

    //
    // PASSWORD_FIELD
    //
    publid void pbintPbsswordFifldBbdkground(SynthContfxt dontfxt,
                                     Grbphids g, int x, int y,
                                     int w, int h) {
        pbintTfxtBbdkground(dontfxt, g, x, y, w, h);
    }

    //
    // TEXT_FIELD
    //
    publid void pbintTfxtFifldBbdkground(SynthContfxt dontfxt, Grbphids g,
                                         int x, int y, int w, int h) {
        if (gftNbmf(dontfxt) == "Trff.dfllEditor") {
            pbintTrffCfllEditorBbdkground(dontfxt, g, x, y, w, h);
        } flsf {
            pbintTfxtBbdkground(dontfxt, g, x, y, w, h);
        }
    }

    //
    // RADIO_BUTTON
    //
    // NOTE: this is dbllfd for JChfdkBox too
    publid void pbintRbdioButtonBbdkground(SynthContfxt dontfxt,
                                     Grbphids g, int x, int y,
                                     int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                id, dontfxt.gftComponfntStbtf());
        if (gtkStbtf == SynthConstbnts.MOUSE_OVER) {
            syndhronizfd (UNIXToolkit.GTK_LOCK) {
                if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id)) {
                    ENGINE.stbrtPbinting(g, x, y, w, h, id);
                    ENGINE.pbintFlbtBox(g, dontfxt, id,
                            SynthConstbnts.MOUSE_OVER, ShbdowTypf.ETCHED_OUT,
                            "dhfdkbutton", x, y, w, h, ColorTypf.BACKGROUND);
                    ENGINE.finishPbinting();
                }
            }
        }
    }

    //
    // RADIO_BUTTON_MENU_ITEM
    //
    // NOTE: this is dbllfd for JChfdkBoxMfnuItfm too
    publid void pbintRbdioButtonMfnuItfmBbdkground(SynthContfxt dontfxt,
                                     Grbphids g, int x, int y,
                                     int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                id, dontfxt.gftComponfntStbtf());
        if (gtkStbtf == SynthConstbnts.MOUSE_OVER) {
            syndhronizfd (UNIXToolkit.GTK_LOCK) {
                if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id)) {
                    ShbdowTypf shbdow = (GTKLookAndFffl.is2_2() ?
                        ShbdowTypf.NONE : ShbdowTypf.OUT);
                    ENGINE.stbrtPbinting(g, x, y, w, h, id);
                    ENGINE.pbintBox(g, dontfxt, id, gtkStbtf,
                            shbdow, "mfnuitfm", x, y, w, h);
                    ENGINE.finishPbinting();
                }
            }
        }
    }

    //
    // LABEL
    //
    publid void pbintLbbflBbdkground(SynthContfxt dontfxt,
                                     Grbphids g, int x, int y,
                                     int w, int h) {
        String nbmf = gftNbmf(dontfxt);
        JComponfnt d = dontfxt.gftComponfnt();
        Contbinfr  dontbinfr = d.gftPbrfnt();

        if (nbmf == "TbblfHfbdfr.rfndfrfr" ||
            nbmf == "GTKFilfChoosfr.dirfdtoryListLbbfl" ||
            nbmf == "GTKFilfChoosfr.filfListLbbfl") {

            pbintButtonBbdkgroundImpl(dontfxt, g, Rfgion.BUTTON, "button",
                    x, y, w, h, truf, fblsf, fblsf, fblsf);
        }
        /*
         * If thf lbbfl is b ListCfllRfndfrfr bnd it's in b dontbinfr
         * (CfllRfndfrfrPbnf) whidh is in b JComboBox thfn wf pbint thf lbbfl
         * bs b TfxtFifld likf b gtk_fntry for b dombobox.
         */
        flsf if (d instbndfof ListCfllRfndfrfr &&
                 dontbinfr != null &&
                 dontbinfr.gftPbrfnt() instbndfof JComboBox ) {
            pbintTfxtBbdkground(dontfxt, g, x, y, w, h);
        }
    }

    //
    // INTERNAL_FRAME
    //
    publid void pbintIntfrnblFrbmfBordfr(SynthContfxt dontfxt,
                                      Grbphids g, int x, int y,
                                      int w, int h) {
        Mftbdity.INSTANCE.pbintFrbmfBordfr(dontfxt, g, x, y, w, h);
    }

    //
    // DESKTOP_PANE
    //
    publid void pbintDfsktopPbnfBbdkground(SynthContfxt dontfxt,
                                           Grbphids g, int x, int y,
                                           int w, int h) {
        // Dofs not dbll into ENGINE for bfttfr pfrformbndf
        fillArfb(dontfxt, g, x, y, w, h, ColorTypf.BACKGROUND);
    }

    //
    // DESKTOP_ICON
    //
    publid void pbintDfsktopIdonBordfr(SynthContfxt dontfxt,
                                           Grbphids g, int x, int y,
                                           int w, int h) {
        Mftbdity.INSTANCE.pbintFrbmfBordfr(dontfxt, g, x, y, w, h);
    }

    publid void pbintButtonBbdkground(SynthContfxt dontfxt, Grbphids g,
                                      int x, int y, int w, int h) {
        String nbmf = gftNbmf(dontfxt);
        if (nbmf != null && nbmf.stbrtsWith("IntfrnblFrbmfTitlfPbnf.")) {
            Mftbdity.INSTANCE.pbintButtonBbdkground(dontfxt, g, x, y, w, h);

        } flsf {
            AbstrbdtButton button = (AbstrbdtButton)dontfxt.gftComponfnt();
            boolfbn pbintBG = button.isContfntArfbFillfd() &&
                              button.isBordfrPbintfd();
            boolfbn pbintFodus = button.isFodusPbintfd();
            boolfbn dffbultCbpbblf = (button instbndfof JButton) &&
                    ((JButton)button).isDffbultCbpbblf();
            boolfbn toolButton = (button.gftPbrfnt() instbndfof JToolBbr);
            pbintButtonBbdkgroundImpl(dontfxt, g, Rfgion.BUTTON, "button",
                    x, y, w, h, pbintBG, pbintFodus, dffbultCbpbblf, toolButton);
        }
    }

    privbtf void pbintButtonBbdkgroundImpl(SynthContfxt dontfxt, Grbphids g,
            Rfgion id, String dftbil, int x, int y, int w, int h,
            boolfbn pbintBbdkground, boolfbn pbintFodus,
            boolfbn dffbultCbpbblf, boolfbn toolButton) {
        int stbtf = dontfxt.gftComponfntStbtf();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id, stbtf, dftbil,
                    pbintBbdkground, pbintFodus, dffbultCbpbblf, toolButton)) {
                rfturn;
            }
            ENGINE.stbrtPbinting(g, x, y, w, h, id, stbtf, dftbil,
                pbintBbdkground, pbintFodus, dffbultCbpbblf, toolButton);

            // Pbint thf dffbult indidbtor
            GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
            if (dffbultCbpbblf && !toolButton) {
                Insfts dffbultInsfts = stylf.gftClbssSpfdifidInsftsVbluf(
                        dontfxt, "dffbult-bordfr",
                        GTKStylf.BUTTON_DEFAULT_BORDER_INSETS);

                if (pbintBbdkground && (stbtf & SynthConstbnts.DEFAULT) != 0) {
                    ENGINE.pbintBox(g, dontfxt, id, SynthConstbnts.ENABLED,
                            ShbdowTypf.IN, "buttondffbult", x, y, w, h);
                }
                x += dffbultInsfts.lfft;
                y += dffbultInsfts.top;
                w -= (dffbultInsfts.lfft + dffbultInsfts.right);
                h -= (dffbultInsfts.top + dffbultInsfts.bottom);
            }

            boolfbn intfriorFodus = stylf.gftClbssSpfdifidBoolVbluf(
                    dontfxt, "intfrior-fodus", truf);
            int fodusSizf = stylf.gftClbssSpfdifidIntVbluf(
                    dontfxt, "fodus-linf-width",1);
            int fodusPbd = stylf.gftClbssSpfdifidIntVbluf(
                    dontfxt, "fodus-pbdding", 1);

            int totblFodusSizf = fodusSizf + fodusPbd;
            int xThidknfss = stylf.gftXThidknfss();
            int yThidknfss = stylf.gftYThidknfss();

            // Rfndfr thf box.
            if (!intfriorFodus &&
                    (stbtf & SynthConstbnts.FOCUSED) == SynthConstbnts.FOCUSED) {
                x += totblFodusSizf;
                y += totblFodusSizf;
                w -= 2 * totblFodusSizf;
                h -= 2 * totblFodusSizf;
            }

            int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(id, stbtf);
            boolfbn pbintBg;
            if (toolButton) {
                // Toolbbr buttons should only hbvf thfir bbdkground pbintfd
                // in thf PRESSED, SELECTED, or MOUSE_OVER stbtfs.
                pbintBg =
                    (gtkStbtf != SynthConstbnts.ENABLED) &&
                    (gtkStbtf != SynthConstbnts.DISABLED);
            } flsf {
                // Othfrwisf, blwbys pbint thf button's bbdkground, unlfss
                // thf usfr hbs ovfrriddfn it bnd wf'rf in thf ENABLED stbtf.
                pbintBg =
                    pbintBbdkground ||
                    (gtkStbtf != SynthConstbnts.ENABLED);
            }
            if (pbintBg) {
                ShbdowTypf shbdowTypf = ShbdowTypf.OUT;
                if ((stbtf & (SynthConstbnts.PRESSED |
                              SynthConstbnts.SELECTED)) != 0) {
                    shbdowTypf = ShbdowTypf.IN;
                }
                ENGINE.pbintBox(g, dontfxt, id, gtkStbtf,
                        shbdowTypf, dftbil, x, y, w, h);
            }

            // fodus
            if (pbintFodus && (stbtf & SynthConstbnts.FOCUSED) != 0) {
                if (intfriorFodus) {
                    x += xThidknfss + fodusPbd;
                    y += yThidknfss + fodusPbd;
                    w -= 2 * (xThidknfss + fodusPbd);
                    h -= 2 * (yThidknfss + fodusPbd);
                } flsf {
                    x -= totblFodusSizf;
                    y -= totblFodusSizf;
                    w += 2 * totblFodusSizf;
                    h += 2 * totblFodusSizf;
                }
                ENGINE.pbintFodus(g, dontfxt, id, gtkStbtf, dftbil, x, y, w, h);
            }
            ENGINE.finishPbinting();
        }
    }

    //
    // ARROW_BUTTON
    //
    publid void pbintArrowButtonForfground(SynthContfxt dontfxt, Grbphids g,
                                           int x, int y, int w, int h,
                                           int dirfdtion) {
        Rfgion id = dontfxt.gftRfgion();
        Componfnt d = dontfxt.gftComponfnt();
        String nbmf = d.gftNbmf();

        ArrowTypf brrowTypf = null;
        switdh (dirfdtion) {
            dbsf SwingConstbnts.NORTH:
                brrowTypf = ArrowTypf.UP; brfbk;
            dbsf SwingConstbnts.SOUTH:
                brrowTypf = ArrowTypf.DOWN; brfbk;
            dbsf SwingConstbnts.EAST:
                brrowTypf = ArrowTypf.RIGHT; brfbk;
            dbsf SwingConstbnts.WEST:
                brrowTypf = ArrowTypf.LEFT; brfbk;
        }

        String dftbil = "brrow";
        if ((nbmf == "SdrollBbr.button") || (nbmf == "TbbbfdPbnf.button")) {
            if (brrowTypf == ArrowTypf.UP || brrowTypf == ArrowTypf.DOWN) {
                dftbil = "vsdrollbbr";
            } flsf {
                dftbil = "hsdrollbbr";
            }
        } flsf if (nbmf == "Spinnfr.nfxtButton" ||
                   nbmf == "Spinnfr.prfviousButton") {
            dftbil = "spinbutton";
        } flsf if (nbmf != "ComboBox.brrowButton") {
            bssfrt fblsf : "unfxpfdtfd nbmf: " + nbmf;
        }

        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                id, dontfxt.gftComponfntStbtf());
        ShbdowTypf shbdowTypf = (gtkStbtf == SynthConstbnts.PRESSED ?
            ShbdowTypf.IN : ShbdowTypf.OUT);
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (ENGINE.pbintCbdhfdImbgf(g, x, y, w, h,
                    gtkStbtf, nbmf, dirfdtion)) {
                rfturn;
            }
            ENGINE.stbrtPbinting(g, x, y, w, h, gtkStbtf, nbmf, dirfdtion);
            ENGINE.pbintArrow(g, dontfxt, id, gtkStbtf,
                    shbdowTypf, brrowTypf, dftbil, x, y, w, h);
            ENGINE.finishPbinting();
        }
    }

    publid void pbintArrowButtonBbdkground(SynthContfxt dontfxt,
            Grbphids g, int x, int y, int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        AbstrbdtButton button = (AbstrbdtButton)dontfxt.gftComponfnt();

        String nbmf = button.gftNbmf();
        String dftbil = "button";
        int dirfdtion = SwingConstbnts.CENTER;
        if ((nbmf == "SdrollBbr.button") || (nbmf == "TbbbfdPbnf.button")) {
            Intfgfr prop = (Intfgfr)
                button.gftClifntPropfrty("__brrow_dirfdtion__");
            dirfdtion = (prop != null) ?
                prop.intVbluf() : SwingConstbnts.WEST;
            switdh (dirfdtion) {
            dffbult:
            dbsf SwingConstbnts.EAST:
            dbsf SwingConstbnts.WEST:
                dftbil = "hsdrollbbr";
                brfbk;
            dbsf SwingConstbnts.NORTH:
            dbsf SwingConstbnts.SOUTH:
                dftbil = "vsdrollbbr";
                brfbk;
            }
        } flsf if (nbmf == "Spinnfr.prfviousButton") {
            dftbil = "spinbutton_down";
        } flsf if (nbmf == "Spinnfr.nfxtButton") {
            dftbil = "spinbutton_up";
        } flsf if (nbmf != "ComboBox.brrowButton") {
            bssfrt fblsf : "unfxpfdtfd nbmf: " + nbmf;
        }

        int stbtf = dontfxt.gftComponfntStbtf();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id,
                                        stbtf, dftbil, dirfdtion))
            {
                rfturn;
            }
            ENGINE.stbrtPbinting(g, x, y, w, h, id,
                                 stbtf, dftbil, dirfdtion);

            if (dftbil.stbrtsWith("spin")) {
                /*
                 * Thf ubuntulooks fnginf (bnd prfsumbbly othfrs) fxpfdt us to
                 * first drbw thf full "spinbutton" bbdkground, bnd thfn drbw
                 * thf individubl "spinbutton_up/down" buttons on top of thbt.
                 * Notf thbt it is thf stbtf of thf JSpinnfr (not its brrow
                 * button) thbt dftfrminfs how wf drbw this bbdkground.
                 */
                int spinStbtf = button.gftPbrfnt().isEnbblfd() ?
                    SynthConstbnts.ENABLED : SynthConstbnts.DISABLED;
                int mody = (dftbil == "spinbutton_up") ? y : y-h;
                int modh = h*2;
                ENGINE.pbintBox(g, dontfxt, id, spinStbtf,
                                ShbdowTypf.IN, "spinbutton",
                                x, mody, w, modh);
            }

            int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(id, stbtf);
            ShbdowTypf shbdowTypf = ShbdowTypf.OUT;
            if ((gtkStbtf & (SynthConstbnts.PRESSED |
                             SynthConstbnts.SELECTED)) != 0)
            {
                shbdowTypf = ShbdowTypf.IN;
            }
            ENGINE.pbintBox(g, dontfxt, id, gtkStbtf,
                            shbdowTypf, dftbil,
                            x, y, w, h);

            ENGINE.finishPbinting();
        }
    }


    //
    // LIST
    //
    publid void pbintListBbdkground(SynthContfxt dontfxt, Grbphids g,
                                    int x, int y, int w, int h) {
        // Dofs not dbll into ENGINE for bfttfr pfrformbndf
        fillArfb(dontfxt, g, x, y, w, h, GTKColorTypf.TEXT_BACKGROUND);
    }

    publid void pbintMfnuBbrBbdkground(SynthContfxt dontfxt, Grbphids g,
                                       int x, int y, int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id)) {
                rfturn;
            }
            GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
            int shbdow = stylf.gftClbssSpfdifidIntVbluf(
                    dontfxt, "shbdow-typf", 2);
            ShbdowTypf shbdowTypf = SHADOWS[shbdow];
            int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                    id, dontfxt.gftComponfntStbtf());
            ENGINE.stbrtPbinting(g, x, y, w, h, id);
            ENGINE.pbintBox(g, dontfxt, id, gtkStbtf,
                shbdowTypf, "mfnubbr", x, y, w, h);
            ENGINE.finishPbinting();
        }
    }

    //
    // MENU
    //
    publid void pbintMfnuBbdkground(SynthContfxt dontfxt,
                                     Grbphids g,
                                     int x, int y, int w, int h) {
        pbintMfnuItfmBbdkground(dontfxt, g, x, y, w, h);
    }

    // This is dbllfd for both MENU bnd MENU_ITEM
    publid void pbintMfnuItfmBbdkground(SynthContfxt dontfxt,
                                     Grbphids g,
                                     int x, int y, int w, int h) {
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                dontfxt.gftRfgion(), dontfxt.gftComponfntStbtf());
        if (gtkStbtf == SynthConstbnts.MOUSE_OVER) {
            Rfgion id = Rfgion.MENU_ITEM;
            syndhronizfd (UNIXToolkit.GTK_LOCK) {
                if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id)) {
                    ShbdowTypf shbdow = (GTKLookAndFffl.is2_2() ?
                        ShbdowTypf.NONE : ShbdowTypf.OUT);
                    ENGINE.stbrtPbinting(g, x, y, w, h, id);
                    ENGINE.pbintBox(g, dontfxt, id, gtkStbtf, shbdow,
                            "mfnuitfm", x, y, w, h);
                    ENGINE.finishPbinting();
                }
            }
        }
    }

    publid void pbintPopupMfnuBbdkground(SynthContfxt dontfxt, Grbphids g,
                                        int x, int y, int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                id, dontfxt.gftComponfntStbtf());
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id, gtkStbtf)) {
                rfturn;
            }
            ENGINE.stbrtPbinting(g, x, y, w, h, id, gtkStbtf);
            ENGINE.pbintBox(g, dontfxt, id, gtkStbtf,
                    ShbdowTypf.OUT, "mfnu", x, y, w, h);

            GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
            int xThidknfss = stylf.gftXThidknfss();
            int yThidknfss = stylf.gftYThidknfss();
            ENGINE.pbintBbdkground(g, dontfxt, id, gtkStbtf,
                    stylf.gftGTKColor(dontfxt, gtkStbtf, GTKColorTypf.BACKGROUND),
                    x + xThidknfss, y + yThidknfss,
                    w - xThidknfss - xThidknfss, h - yThidknfss - yThidknfss);
            ENGINE.finishPbinting();
        }
    }

    publid void pbintProgrfssBbrBbdkground(SynthContfxt dontfxt,
                                            Grbphids g,
                                            int x, int y, int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id)) {
                ENGINE.stbrtPbinting(g, x, y, w, h, id);
                ENGINE.pbintBox(g, dontfxt, id, SynthConstbnts.ENABLED,
                        ShbdowTypf.IN, "trough", x, y, w, h);
                ENGINE.finishPbinting();
            }
        }
    }

    publid void pbintProgrfssBbrForfground(SynthContfxt dontfxt, Grbphids g,
                                            int x, int y, int w, int h,
                                            int orifntbtion) {
        Rfgion id = dontfxt.gftRfgion();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            // Notf thbt wf don't dbll pbintCbdhfdImbgf() hfrf.  Sindf thf
            // progrfss bbr forfground is pbintfd difffrfntly for fbdh vbluf
            // it would bf wbstfful to try to dbdhf bn imbgf for fbdh stbtf,
            // so instfbd wf simply bvoid dbdhing in this dbsf.
            if (w <= 0 || h <= 0) {
                rfturn;
            }
            ENGINE.stbrtPbinting(g, x, y, w, h, id, "fg");
            ENGINE.pbintBox(g, dontfxt, id, SynthConstbnts.MOUSE_OVER,
                            ShbdowTypf.OUT, "bbr", x, y, w, h);
            ENGINE.finishPbinting(fblsf); // don't bothfr dbdhing thf imbgf
        }
    }

    publid void pbintVifwportBordfr(SynthContfxt dontfxt, Grbphids g,
                                           int x, int y, int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id)) {
                ENGINE.stbrtPbinting(g, x, y, w, h, id);
                ENGINE.pbintShbdow(g, dontfxt, id, SynthConstbnts.ENABLED,
                        ShbdowTypf.IN, "sdrollfd_window", x, y, w, h);
                ENGINE.finishPbinting();
            }
        }
    }

    publid void pbintSfpbrbtorBbdkground(SynthContfxt dontfxt,
                                          Grbphids g,
                                          int x, int y, int w, int h,
                                         int orifntbtion) {
        Rfgion id = dontfxt.gftRfgion();
        int stbtf = dontfxt.gftComponfntStbtf();
        JComponfnt d = dontfxt.gftComponfnt();

        /*
         * Notf: In thfory, thf stylf's x/y thidknfss vblufs would dftfrminf
         * thf width of thf sfpbrbtor dontfnt.  In prbdtidf, howfvfr, somf
         * fnginfs will rfndfr b linf thbt is widfr thbn thf dorrfsponding
         * thidknfss vbluf.  For fxbmplf, ubuntulooks rfports x/y thidknfss
         * vblufs of 1 for sfpbrbtors, but blwbys rfndfrs b 2-pixfl widf linf.
         * As b rfsult of bll this, wf nffd to bf dbrfful not to rfstridt
         * thf w/h vblufs bflow too mudh, so thbt thf full thidknfss of thf
         * rfndfrfd linf will bf dbpturfd by our imbgf dbdhing dodf.
         */
        String dftbil;
        if (d instbndfof JToolBbr.Sfpbrbtor) {
            /*
             * GTK rfndfrs toolbbr sfpbrbtors difffrfntly in thbt bn
             * brtifidibl pbdding is bddfd to fbdh fnd of thf sfpbrbtor.
             * Thf vbluf of 0.2f bflow is dfrivfd from thf sourdf dodf of
             * gtktoolbbr.d in thf durrfnt vfrsion of GTK+ (2.8.20 bt thf
             * timf of this writing).  Spfdifidblly, thf rflfvbnt vblufs brf:
             *     SPACE_LINE_DIVISION 10.0
             *     SPACE_LINE_START     2.0
             *     SPACE_LINE_END       8.0
             * Thfsf brf usfd to dftfrminf thf distbndf from thf top (or lfft)
             * fdgf of thf toolbbr to thf othfr fdgf.  So for fxbmplf, thf
             * stbrting/top point of b vfrtidbl sfpbrbtor is 2/10 of thf
             * hfight of b horizontbl toolbbr bwby from thf top fdgf, whidh
             * is how wf brrivf bt 0.2f bflow.  Likfwisf, thf fnding/bottom
             * point is 8/10 of thf hfight bwby from thf top fdgf, or in othfr
             * words, it is 2/10 bwby from thf bottom fdgf, whidh is bgbin
             * how wf brrivf bt thf 0.2f vbluf bflow.
             *
             * Thf sfpbrbtor is blso dfntfrfd horizontblly or vfrtidblly,
             * dfpfnding on its orifntbtion.  This wbs dftfrminfd fmpiridblly
             * bnd by fxbmining thf dodf rfffrfndfd bbovf.
             */
            dftbil = "toolbbr";
            flobt pdt = 0.2f;
            JToolBbr.Sfpbrbtor sfp = (JToolBbr.Sfpbrbtor)d;
            Dimfnsion sizf = sfp.gftSfpbrbtorSizf();
            GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
            if (orifntbtion == JSfpbrbtor.HORIZONTAL) {
                x += (int)(w * pdt);
                w -= (int)(w * pdt * 2);
                y += (sizf.hfight - stylf.gftYThidknfss()) / 2;
            } flsf {
                y += (int)(h * pdt);
                h -= (int)(h * pdt * 2);
                x += (sizf.width - stylf.gftXThidknfss()) / 2;
            }
        } flsf {
            // For rfgulbr/mfnu sfpbrbtors, wf simply subtrbdt out thf insfts.
            dftbil = "sfpbrbtor";
            Insfts insfts = d.gftInsfts();
            x += insfts.lfft;
            y += insfts.top;
            if (orifntbtion == JSfpbrbtor.HORIZONTAL) {
                w -= (insfts.lfft + insfts.right);
            } flsf {
                h -= (insfts.top + insfts.bottom);
            }
        }

        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id,
                                          stbtf, dftbil, orifntbtion)) {
                ENGINE.stbrtPbinting(g, x, y, w, h, id,
                                     stbtf, dftbil, orifntbtion);
                if (orifntbtion == JSfpbrbtor.HORIZONTAL) {
                    ENGINE.pbintHlinf(g, dontfxt, id, stbtf,
                                      dftbil, x, y, w, h);
                } flsf {
                    ENGINE.pbintVlinf(g, dontfxt, id, stbtf,
                                      dftbil, x, y, w, h);
                }
                ENGINE.finishPbinting();
            }
        }
    }

    publid void pbintSlidfrTrbdkBbdkground(SynthContfxt dontfxt,
                                       Grbphids g,
                                       int x, int y, int w,int h) {
        Rfgion id = dontfxt.gftRfgion();
        int stbtf = dontfxt.gftComponfntStbtf();

        // For fodusfd slidfrs, wf pbint fodus rfdt outsidf thf bounds pbssfd.
        // Nffd to bdjust for thbt.
        boolfbn fodusfd = ((stbtf & SynthConstbnts.FOCUSED) != 0);
        int fodusSizf = 0;
        if (fodusfd) {
            GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
            fodusSizf = stylf.gftClbssSpfdifidIntVbluf(
                                dontfxt, "fodus-linf-width", 1) +
                        stylf.gftClbssSpfdifidIntVbluf(
                                dontfxt, "fodus-pbdding", 1);
            x -= fodusSizf;
            y -= fodusSizf;
            w += fodusSizf * 2;
            h += fodusSizf * 2;
        }

        // Thf ubuntulooks fnginf pbints slidfr troughs difffrfntly dfpfnding
        // on thf durrfnt slidfr vbluf bnd its domponfnt orifntbtion.
        JSlidfr slidfr = (JSlidfr)dontfxt.gftComponfnt();
        doublf vbluf = slidfr.gftVbluf();
        doublf min = slidfr.gftMinimum();
        doublf mbx = slidfr.gftMbximum();
        doublf visiblf = 20; // not usfd for slidfrs; bny vbluf will work

        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            // Notf thbt wf don't dbll pbintCbdhfdImbgf() hfrf.  Sindf somf
            // fnginfs (f.g. ubuntulooks) pbint thf slidfr bbdkground
            // difffrfntly for bny givfn slidfr vbluf, it would bf wbstfful
            // to try to dbdhf bn imbgf for fbdh stbtf, so instfbd wf simply
            // bvoid dbdhing in this dbsf.
            if (w <= 0 || h <= 0) {
                rfturn;
            }
            ENGINE.stbrtPbinting(g, x, y, w, h, id, stbtf, vbluf);
            int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(id, stbtf);
            ENGINE.sftRbngfVbluf(dontfxt, id, vbluf, min, mbx, visiblf);
            ENGINE.pbintBox(g, dontfxt, id, gtkStbtf, ShbdowTypf.IN,
                            "trough", x + fodusSizf, y + fodusSizf,
                            w - 2 * fodusSizf, h - 2 * fodusSizf);
            if (fodusfd) {
                ENGINE.pbintFodus(g, dontfxt, id, SynthConstbnts.ENABLED,
                                  "trough", x, y, w, h);
            }
            ENGINE.finishPbinting(fblsf); // don't bothfr dbdhing thf imbgf
        }
    }

    publid void pbintSlidfrThumbBbdkground(SynthContfxt dontfxt,
            Grbphids g, int x, int y, int w, int h, int dir) {
        Rfgion id = dontfxt.gftRfgion();
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                id, dontfxt.gftComponfntStbtf());
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id, gtkStbtf, dir)) {
                Orifntbtion orifntbtion = (dir == JSlidfr.HORIZONTAL ?
                    Orifntbtion.HORIZONTAL : Orifntbtion.VERTICAL);
                String dftbil = (dir == JSlidfr.HORIZONTAL ?
                    "hsdblf" : "vsdblf");
                ENGINE.stbrtPbinting(g, x, y, w, h, id, gtkStbtf, dir);
                ENGINE.pbintSlidfr(g, dontfxt, id, gtkStbtf,
                        ShbdowTypf.OUT, dftbil, x, y, w, h, orifntbtion);
                ENGINE.finishPbinting();
            }
        }
    }

    //
    // SPINNER
    //
    publid void pbintSpinnfrBbdkground(SynthContfxt dontfxt,
                                        Grbphids g,
                                        int x, int y, int w, int h) {
        // This is hbndlfd in pbintTfxtFifldBbdkground
    }

    //
    // SPLIT_PANE_DIVIDER
    //
    publid void pbintSplitPbnfDividfrBbdkground(SynthContfxt dontfxt,
                                       Grbphids g,
                                       int x, int y, int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                id, dontfxt.gftComponfntStbtf());
        JSplitPbnf splitPbnf = (JSplitPbnf)dontfxt.gftComponfnt();
        Orifntbtion orifntbtion =
                (splitPbnf.gftOrifntbtion() == JSplitPbnf.HORIZONTAL_SPLIT ?
                    Orifntbtion.VERTICAL : Orifntbtion.HORIZONTAL);
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h,
                    id, gtkStbtf, orifntbtion)) {
                ENGINE.stbrtPbinting(g, x, y, w, h, id, gtkStbtf, orifntbtion);
                ENGINE.pbintHbndlf(g, dontfxt, id, gtkStbtf,
                        ShbdowTypf.OUT, "pbnfd", x, y, w, h, orifntbtion);
                ENGINE.finishPbinting();
            }
        }
    }

    publid void pbintSplitPbnfDrbgDividfr(SynthContfxt dontfxt,
                                       Grbphids g,int x, int y, int w, int h,
                                       int orifntbtion) {
        pbintSplitPbnfDividfrForfground(dontfxt, g, x, y, w, h, orifntbtion);
    }

    publid void pbintTbbbfdPbnfContfntBbdkground(SynthContfxt dontfxt,
                                      Grbphids g, int x, int y, int w, int h) {
        JTbbbfdPbnf pbnf = (JTbbbfdPbnf)dontfxt.gftComponfnt();
        int sflfdtfdIndfx = pbnf.gftSflfdtfdIndfx();
        PositionTypf plbdfmfnt = GTKLookAndFffl.SwingOrifntbtionConstbntToGTK(
                                                        pbnf.gftTbbPlbdfmfnt());

        int gbpStbrt = 0;
        int gbpSizf = 0;
        if (sflfdtfdIndfx != -1) {
            Rfdtbnglf tbbBounds = pbnf.gftBoundsAt(sflfdtfdIndfx);

            if (plbdfmfnt == PositionTypf.TOP ||
                plbdfmfnt == PositionTypf.BOTTOM) {

                gbpStbrt = tbbBounds.x - x;
                gbpSizf = tbbBounds.width;
            }
            flsf {
                gbpStbrt = tbbBounds.y - y;
                gbpSizf = tbbBounds.hfight;
            }
        }

        Rfgion id = dontfxt.gftRfgion();
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                id, dontfxt.gftComponfntStbtf());
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h,
                    id, gtkStbtf, plbdfmfnt, gbpStbrt, gbpSizf)) {
                ENGINE.stbrtPbinting(g, x, y, w, h,
                        id, gtkStbtf, plbdfmfnt, gbpStbrt, gbpSizf);
                ENGINE.pbintBoxGbp(g, dontfxt, id, gtkStbtf, ShbdowTypf.OUT,
                        "notfbook", x, y, w, h, plbdfmfnt, gbpStbrt, gbpSizf);
                ENGINE.finishPbinting();
            }
        }
    }

    publid void pbintTbbbfdPbnfTbbBbdkground(SynthContfxt dontfxt,
                                           Grbphids g,
                                           int x, int y, int w, int h,
                                           int tbbIndfx) {
        Rfgion id = dontfxt.gftRfgion();
        int stbtf = dontfxt.gftComponfntStbtf();
        int gtkStbtf = ((stbtf & SynthConstbnts.SELECTED) != 0 ?
            SynthConstbnts.ENABLED : SynthConstbnts.PRESSED);
        JTbbbfdPbnf pbnf = (JTbbbfdPbnf)dontfxt.gftComponfnt();
        int plbdfmfnt = pbnf.gftTbbPlbdfmfnt();

        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h,
                    id, gtkStbtf, plbdfmfnt, tbbIndfx)) {
                PositionTypf sidf = POSITIONS[plbdfmfnt - 1];
                ENGINE.stbrtPbinting(g, x, y, w, h,
                        id, gtkStbtf, plbdfmfnt, tbbIndfx);
                ENGINE.pbintExtfnsion(g, dontfxt, id, gtkStbtf,
                        ShbdowTypf.OUT, "tbb", x, y, w, h, sidf, tbbIndfx);
                ENGINE.finishPbinting();
            }
        }
    }

    //
    // TEXT_PANE
    //
    publid void pbintTfxtPbnfBbdkground(SynthContfxt dontfxt, Grbphids g,
                                        int x, int y, int w, int h) {
        pbintTfxtArfbBbdkground(dontfxt, g, x, y, w, h);
    }

    //
    // EDITOR_PANE
    //
    publid void pbintEditorPbnfBbdkground(SynthContfxt dontfxt, Grbphids g,
                                          int x, int y, int w, int h) {
        pbintTfxtArfbBbdkground(dontfxt, g, x, y, w, h);
    }

    //
    // TEXT_AREA
    //
    publid void pbintTfxtArfbBbdkground(SynthContfxt dontfxt, Grbphids g,
                                        int x, int y, int w, int h) {
        // Dofs not dbll into ENGINE for bfttfr pfrformbndf
        fillArfb(dontfxt, g, x, y, w, h, GTKColorTypf.TEXT_BACKGROUND);
    }

    //
    // TEXT_FIELD
    //
    // NOTE: Combobox bnd Lbbfl, Pbssword bnd FormbttfdTfxtFifld dblls this
    // too.
    privbtf void pbintTfxtBbdkground(SynthContfxt dontfxt, Grbphids g,
                                     int x, int y, int w, int h) {
        // Tfxt is odd in thbt it usfs thf TEXT_BACKGROUND vs BACKGROUND.
        JComponfnt d = dontfxt.gftComponfnt();
        Contbinfr dontbinfr = d.gftPbrfnt();
        Contbinfr dontbinfrPbrfnt = null;
        GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
        Rfgion id = dontfxt.gftRfgion();
        int stbtf = dontfxt.gftComponfntStbtf();

        if (d instbndfof ListCfllRfndfrfr && dontbinfr != null) {
            dontbinfrPbrfnt = dontbinfr.gftPbrfnt();
            if (dontbinfrPbrfnt instbndfof JComboBox
                    && dontbinfrPbrfnt.hbsFodus()) {
                stbtf |= SynthConstbnts.FOCUSED;
            }
        }

        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id, stbtf)) {
                rfturn;
            }

            int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(id, stbtf);
            int fodusSizf = 0;
            boolfbn intfriorFodus = stylf.gftClbssSpfdifidBoolVbluf(
                    dontfxt, "intfrior-fodus", truf);

            fodusSizf = stylf.gftClbssSpfdifidIntVbluf(dontfxt,
                    "fodus-linf-width",1);
            if (!intfriorFodus && (stbtf & SynthConstbnts.FOCUSED) != 0) {
                x += fodusSizf;
                y += fodusSizf;
                w -= 2 * fodusSizf;
                h -= 2 * fodusSizf;
            }

            int xThidknfss = stylf.gftXThidknfss();
            int yThidknfss = stylf.gftYThidknfss();

            ENGINE.stbrtPbinting(g, x, y, w, h, id, stbtf);
            ENGINE.pbintShbdow(g, dontfxt, id, gtkStbtf,
                               ShbdowTypf.IN, "fntry", x, y, w, h);
            ENGINE.pbintFlbtBox(g, dontfxt, id,
                                gtkStbtf, ShbdowTypf.NONE, "fntry_bg",
                                x + xThidknfss,
                                y + yThidknfss,
                                w - (2 * xThidknfss),
                                h - (2 * yThidknfss),
                                ColorTypf.TEXT_BACKGROUND);

            if (fodusSizf > 0 && (stbtf & SynthConstbnts.FOCUSED) != 0) {
                if (!intfriorFodus) {
                    x -=  fodusSizf;
                    y -=  fodusSizf;
                    w +=  2 * fodusSizf;
                    h +=  2 * fodusSizf;
                } flsf {
                    if (dontbinfrPbrfnt instbndfof JComboBox) {
                        x += (fodusSizf + 2);
                        y += (fodusSizf + 1);
                        w -= (2 * fodusSizf + 1);
                        h -= (2 * fodusSizf + 2);
                    } flsf {
                        x += fodusSizf;
                        y += fodusSizf;
                        w -= 2 * fodusSizf;
                        h -= 2 * fodusSizf;
                    }
                }
                ENGINE.pbintFodus(g, dontfxt, id, gtkStbtf,
                        "fntry", x, y, w, h);
            }
            ENGINE.finishPbinting();
        }
    }

    privbtf void pbintTrffCfllEditorBbdkground(SynthContfxt dontfxt, Grbphids g,
                                               int x, int y, int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                id, dontfxt.gftComponfntStbtf());
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id, gtkStbtf)) {
                ENGINE.stbrtPbinting(g, x, y, w, h, id, gtkStbtf);
                ENGINE.pbintFlbtBox(g, dontfxt, id, gtkStbtf, ShbdowTypf.NONE,
                        "fntry_bg", x, y, w, h, ColorTypf.TEXT_BACKGROUND);
                ENGINE.finishPbinting();
            }
        }
    }


    //
    // ROOT_PANE
    //
    publid void pbintRootPbnfBbdkground(SynthContfxt dontfxt, Grbphids g,
                                        int x, int y, int w, int h) {
        // Dofs not dbll into ENGINE for bfttfr pfrformbndf
        fillArfb(dontfxt, g, x, y, w, h, GTKColorTypf.BACKGROUND);
    }

    //
    // TOGGLE_BUTTON
    //
    publid void pbintTogglfButtonBbdkground(SynthContfxt dontfxt,
                                            Grbphids g,
                                            int x, int y, int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        JTogglfButton togglfButton = (JTogglfButton)dontfxt.gftComponfnt();
        boolfbn pbintBG = togglfButton.isContfntArfbFillfd() &&
                          togglfButton.isBordfrPbintfd();
        boolfbn pbintFodus = togglfButton.isFodusPbintfd();
        boolfbn toolButton = (togglfButton.gftPbrfnt() instbndfof JToolBbr);
        pbintButtonBbdkgroundImpl(dontfxt, g, id, "button",
                                  x, y, w, h,
                                  pbintBG, pbintFodus, fblsf, toolButton);
    }


    //
    // SCROLL_BAR
    //
    publid void pbintSdrollBbrBbdkground(SynthContfxt dontfxt,
                                          Grbphids g,
                                          int x, int y, int w,int h) {
        Rfgion id = dontfxt.gftRfgion();
        boolfbn fodusfd =
                (dontfxt.gftComponfntStbtf() & SynthConstbnts.FOCUSED) != 0;
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id, fodusfd)) {
                rfturn;
            }
            ENGINE.stbrtPbinting(g, x, y, w, h, id, fodusfd);

            // Notf: thf sdrollbbr insfts blrfbdy indludf thf "trough-bordfr",
            // whidh is nffdfd to position thf sdrollbbr buttons propfrly.
            // But whfn wf rfndfr, wf nffd to tbkf thf trough bordfr out
            // of thf fqubtion so thbt wf pbint thf fntirf brfb dovfrfd by
            // thf trough bordfr bnd thf sdrollbbr dontfnt itsflf.
            Insfts insfts = dontfxt.gftComponfnt().gftInsfts();
            GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
            int troughBordfr =
                stylf.gftClbssSpfdifidIntVbluf(dontfxt, "trough-bordfr", 1);
            insfts.lfft   -= troughBordfr;
            insfts.right  -= troughBordfr;
            insfts.top    -= troughBordfr;
            insfts.bottom -= troughBordfr;

            ENGINE.pbintBox(g, dontfxt, id, SynthConstbnts.PRESSED,
                            ShbdowTypf.IN, "trough",
                            x + insfts.lfft,
                            y + insfts.top,
                            w - insfts.lfft - insfts.right,
                            h - insfts.top - insfts.bottom);

            if (fodusfd) {
                ENGINE.pbintFodus(g, dontfxt, id,
                        SynthConstbnts.ENABLED, "trough", x, y, w, h);
            }
            ENGINE.finishPbinting();
        }
    }


    //
    // SCROLL_BAR_THUMB
    //
    publid void pbintSdrollBbrThumbBbdkground(SynthContfxt dontfxt,
            Grbphids g, int x, int y, int w, int h, int dir) {
        Rfgion id = dontfxt.gftRfgion();
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                id, dontfxt.gftComponfntStbtf());

        // Thf dlfbrlooks fnginf pbints sdrollbbr thumbs difffrfntly
        // dfpfnding on thf durrfnt sdroll vbluf (spfdifidblly, it will bvoid
        // rfndfring b dfrtbin linf whfn thf thumb is bt thf stbrting or
        // fnding position).  Thfrfforf, wf normblizf thf durrfnt vbluf to
        // thf rbngf [0,100] hfrf bnd thfn pbss it down to sftRbngfVbluf()
        // so thbt thf nbtivf widgft is donfigurfd bppropribtfly.  Notf thbt
        // thfrf brf rfblly only four vblufs thbt mbttfr (min, middlf, mbx,
        // or fill) so wf rfstridt to onf of thosf four vblufs to bvoid
        // blowing out thf imbgf dbdhf.
        JSdrollBbr sb = (JSdrollBbr)dontfxt.gftComponfnt();
        boolfbn rtl =
            sb.gftOrifntbtion() == JSdrollBbr.HORIZONTAL &&
            !sb.gftComponfntOrifntbtion().isLfftToRight();
        doublf min = 0;
        doublf mbx = 100;
        doublf visiblf = 20;
        doublf vbluf;
        if (sb.gftMbximum() - sb.gftMinimum() == sb.gftVisiblfAmount()) {
            // In this dbsf, thf thumb fills thf fntirf trbdk, so it is
            // toudhing both fnds bt thf sbmf timf
            vbluf = 0;
            visiblf = 100;
        } flsf if (sb.gftVbluf() == sb.gftMinimum()) {
            // At minimum
            vbluf = rtl ? 100 : 0;
        } flsf if (sb.gftVbluf() >= sb.gftMbximum() - sb.gftVisiblfAmount()) {
            // At mbximum
            vbluf = rtl ? 0 : 100;
        } flsf {
            // Somfwhfrf in bftwffn
            vbluf = 50;
        }

        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id, gtkStbtf,
                                          dir, vbluf, visiblf, rtl))
            {
                ENGINE.stbrtPbinting(g, x, y, w, h, id, gtkStbtf,
                                     dir, vbluf, visiblf, rtl);
                Orifntbtion orifntbtion = (dir == JSdrollBbr.HORIZONTAL ?
                    Orifntbtion.HORIZONTAL : Orifntbtion.VERTICAL);
                ENGINE.sftRbngfVbluf(dontfxt, id, vbluf, min, mbx, visiblf);
                ENGINE.pbintSlidfr(g, dontfxt, id, gtkStbtf,
                        ShbdowTypf.OUT, "slidfr", x, y, w, h, orifntbtion);
                ENGINE.finishPbinting();
            }
        }
    }

    //
    // TOOL_TIP
    //
    publid void pbintToolTipBbdkground(SynthContfxt dontfxt, Grbphids g,
                                        int x, int y, int w,int h) {
        Rfgion id = dontfxt.gftRfgion();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id)) {
                ENGINE.stbrtPbinting(g, x, y, w, h, id);
                ENGINE.pbintFlbtBox(g, dontfxt, id, SynthConstbnts.ENABLED,
                        ShbdowTypf.OUT, "tooltip", x, y, w, h,
                        ColorTypf.BACKGROUND);
                ENGINE.finishPbinting();
            }
        }
    }


    //
    // TREE_CELL
    //
    publid void pbintTrffCfllBbdkground(SynthContfxt dontfxt, Grbphids g,
                                        int x, int y, int w, int h) {
        Rfgion id = dontfxt.gftRfgion();
        int stbtf = dontfxt.gftComponfntStbtf();
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(id, stbtf);
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id, stbtf)) {
                ENGINE.stbrtPbinting(g, x, y, w, h, id, stbtf);
                // thf string brg should bltfrnbtf bbsfd on row bfing pbintfd,
                // but wf durrfntly don't pbss thbt in.
                ENGINE.pbintFlbtBox(g, dontfxt, id, gtkStbtf, ShbdowTypf.NONE,
                        "dfll_odd", x, y, w, h, ColorTypf.TEXT_BACKGROUND);
                ENGINE.finishPbinting();
            }
        }
    }

    publid void pbintTrffCfllFodus(SynthContfxt dontfxt, Grbphids g,
                                    int x, int y, int w, int h) {
        Rfgion id = Rfgion.TREE_CELL;
        int stbtf = dontfxt.gftComponfntStbtf();
        pbintFodus(dontfxt, g, id, stbtf, "trffvifw", x, y, w, h);
    }


    //
    // TREE
    //
    publid void pbintTrffBbdkground(SynthContfxt dontfxt, Grbphids g,
                                    int x, int y, int w, int h) {
        // As fbr bs I dbn tfll, thfsf don't dbll into thf ENGINE.
        fillArfb(dontfxt, g, x, y, w, h, GTKColorTypf.TEXT_BACKGROUND);
    }


    //
    // VIEWPORT
    //
    publid void pbintVifwportBbdkground(SynthContfxt dontfxt, Grbphids g,
                                        int x, int y, int w, int h) {
        // As fbr bs I dbn tfll, thfsf don't dbll into thf ENGINE.
        // Also notf thbt you don't wbnt this to dbll into thf ENGINE
        // bs if it whfrf to pbint b bbdkground JVifwport wouldn't sdroll
        // dorrfdtly.
        fillArfb(dontfxt, g, x, y, w, h, GTKColorTypf.TEXT_BACKGROUND);
    }

    void pbintFodus(SynthContfxt dontfxt, Grbphids g, Rfgion id,
            int stbtf, String dftbil, int x, int y, int w, int h) {
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(id, stbtf);
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id, gtkStbtf, "fodus")) {
                ENGINE.stbrtPbinting(g, x, y, w, h, id, gtkStbtf, "fodus");
                ENGINE.pbintFodus(g, dontfxt, id, gtkStbtf, dftbil, x, y, w, h);
                ENGINE.finishPbinting();
            }
        }
    }

    void pbintMftbdityElfmfnt(SynthContfxt dontfxt, Grbphids g,
            int gtkStbtf, String dftbil, int x, int y, int w, int h,
            ShbdowTypf shbdow, ArrowTypf dirfdtion) {
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(
                    g, x, y, w, h, gtkStbtf, dftbil, shbdow, dirfdtion)) {
                ENGINE.stbrtPbinting(
                        g, x, y, w, h, gtkStbtf, dftbil, shbdow, dirfdtion);
                if (dftbil == "mftbdity-brrow") {
                    ENGINE.pbintArrow(g, dontfxt, Rfgion.INTERNAL_FRAME_TITLE_PANE,
                            gtkStbtf, shbdow, dirfdtion, "", x, y, w, h);

                } flsf if (dftbil == "mftbdity-box") {
                    ENGINE.pbintBox(g, dontfxt, Rfgion.INTERNAL_FRAME_TITLE_PANE,
                            gtkStbtf, shbdow, "", x, y, w, h);

                } flsf if (dftbil == "mftbdity-vlinf") {
                    ENGINE.pbintVlinf(g, dontfxt, Rfgion.INTERNAL_FRAME_TITLE_PANE,
                            gtkStbtf, "", x, y, w, h);
                }
                ENGINE.finishPbinting();
            }
        }
    }

    void pbintIdon(SynthContfxt dontfxt, Grbphids g,
            Mfthod pbintMfthod, int x, int y, int w, int h) {
        int stbtf = dontfxt.gftComponfntStbtf();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, stbtf, pbintMfthod)) {
                ENGINE.stbrtPbinting(g, x, y, w, h, stbtf, pbintMfthod);
                try {
                    pbintMfthod.invokf(this, dontfxt, g, stbtf, x, y, w, h);
                } dbtdh (IllfgblAddfssExdfption ibf) {
                    bssfrt fblsf;
                } dbtdh (InvodbtionTbrgftExdfption itf) {
                    bssfrt fblsf;
                }
                ENGINE.finishPbinting();
            }
        }
    }

    void pbintIdon(SynthContfxt dontfxt, Grbphids g,
            Mfthod pbintMfthod, int x, int y, int w, int h, Objfdt dirfdtion) {
        int stbtf = dontfxt.gftComponfntStbtf();
        syndhronizfd (UNIXToolkit.GTK_LOCK) {
            if (! ENGINE.pbintCbdhfdImbgf(g,
                    x, y, w, h, stbtf, pbintMfthod, dirfdtion)) {
                ENGINE.stbrtPbinting(g,
                        x, y, w, h, stbtf, pbintMfthod, dirfdtion);
                try {
                    pbintMfthod.invokf(this, dontfxt,
                            g, stbtf, x, y, w, h, dirfdtion);
                } dbtdh (IllfgblAddfssExdfption ibf) {
                    bssfrt fblsf;
                } dbtdh (InvodbtionTbrgftExdfption itf) {
                    bssfrt fblsf;
                }
                ENGINE.finishPbinting();
            }
        }
    }

    // All idon pbinting mfthods brf dbllfd from undfr GTK_LOCK

    publid void pbintTrffExpbndfdIdon(SynthContfxt dontfxt,
            Grbphids g, int stbtf, int x, int y, int w, int h) {
        ENGINE.pbintExpbndfr(g, dontfxt, Rfgion.TREE,
                GTKLookAndFffl.synthStbtfToGTKStbtf(dontfxt.gftRfgion(), stbtf),
                ExpbndfrStylf.EXPANDED, "trffvifw", x, y, w, h);
    }

    publid void pbintTrffCollbpsfdIdon(SynthContfxt dontfxt,
            Grbphids g, int stbtf, int x, int y, int w, int h) {
        ENGINE.pbintExpbndfr(g, dontfxt, Rfgion.TREE,
                GTKLookAndFffl.synthStbtfToGTKStbtf(dontfxt.gftRfgion(), stbtf),
                ExpbndfrStylf.COLLAPSED, "trffvifw", x, y, w, h);
    }

    publid void pbintChfdkBoxIdon(SynthContfxt dontfxt,
            Grbphids g, int stbtf, int x, int y, int w, int h) {
        GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
        int sizf = stylf.gftClbssSpfdifidIntVbluf(dontfxt,
                        "indidbtor-sizf", GTKIdonFbdtory.DEFAULT_ICON_SIZE);
        int offsft = stylf.gftClbssSpfdifidIntVbluf(dontfxt,
                        "indidbtor-spbding", GTKIdonFbdtory.DEFAULT_ICON_SPACING);

        ENGINE.pbintChfdk(g, dontfxt, Rfgion.CHECK_BOX, "dhfdkbutton",
                x+offsft, y+offsft, sizf, sizf);
    }

    publid void pbintRbdioButtonIdon(SynthContfxt dontfxt,
            Grbphids g, int stbtf, int x, int y, int w, int h) {
        GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
        int sizf = stylf.gftClbssSpfdifidIntVbluf(dontfxt,
                        "indidbtor-sizf", GTKIdonFbdtory.DEFAULT_ICON_SIZE);
        int offsft = stylf.gftClbssSpfdifidIntVbluf(dontfxt,
                        "indidbtor-spbding", GTKIdonFbdtory.DEFAULT_ICON_SPACING);

        ENGINE.pbintOption(g, dontfxt, Rfgion.RADIO_BUTTON, "rbdiobutton",
                x+offsft, y+offsft, sizf, sizf);
    }

    publid void pbintMfnuArrowIdon(SynthContfxt dontfxt, Grbphids g,
            int stbtf, int x, int y, int w, int h, ArrowTypf dir) {
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                dontfxt.gftRfgion(), stbtf);
        ShbdowTypf shbdow = ShbdowTypf.OUT;
        if (gtkStbtf == SynthConstbnts.MOUSE_OVER) {
            shbdow = ShbdowTypf.IN;
        }
        ENGINE.pbintArrow(g, dontfxt, Rfgion.MENU_ITEM, gtkStbtf, shbdow,
                dir, "mfnuitfm", x + 3, y + 3, 7, 7);
    }

    publid void pbintChfdkBoxMfnuItfmChfdkIdon(SynthContfxt dontfxt,
            Grbphids g, int stbtf, int x, int y, int w, int h) {

        GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
        int sizf = stylf.gftClbssSpfdifidIntVbluf(dontfxt,"indidbtor-sizf",
                GTKIdonFbdtory.DEFAULT_TOGGLE_MENU_ITEM_SIZE);

        ENGINE.pbintChfdk(g, dontfxt, Rfgion.CHECK_BOX_MENU_ITEM, "dhfdk",
                x + GTKIdonFbdtory.CHECK_ICON_EXTRA_INSET,
                y + GTKIdonFbdtory.CHECK_ICON_EXTRA_INSET,
                sizf, sizf);
    }

    publid void pbintRbdioButtonMfnuItfmChfdkIdon(SynthContfxt dontfxt,
            Grbphids g, int stbtf, int x, int y, int w, int h) {

        GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();
        int sizf = stylf.gftClbssSpfdifidIntVbluf(dontfxt,"indidbtor-sizf",
                GTKIdonFbdtory.DEFAULT_TOGGLE_MENU_ITEM_SIZE);

        ENGINE.pbintOption(g, dontfxt, Rfgion.RADIO_BUTTON_MENU_ITEM, "option",
                x + GTKIdonFbdtory.CHECK_ICON_EXTRA_INSET,
                y + GTKIdonFbdtory.CHECK_ICON_EXTRA_INSET,
                sizf, sizf);
    }

    publid void pbintToolBbrHbndlfIdon(SynthContfxt dontfxt, Grbphids g,
            int stbtf, int x, int y, int w, int h, Orifntbtion orifntbtion) {
        int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(
                dontfxt.gftRfgion(), stbtf);

        // Thf orifntbtion pbrbmftfr pbssfd down by Synth rfffrs to thf
        // orifntbtion of thf toolbbr, but thf onf wf pbss to GTK rfffrs
        // to thf orifntbtion of thf hbndlf.  Thfrfforf, wf nffd to swbp
        // thf vbluf hfrf: horizontbl toolbbrs hbvf vfrtidbl hbndlfs, bnd
        // vidf vfrsb.
        orifntbtion = (orifntbtion == Orifntbtion.HORIZONTAL) ?
            Orifntbtion.VERTICAL : Orifntbtion.HORIZONTAL;

        ENGINE.pbintHbndlf(g, dontfxt, Rfgion.TOOL_BAR, gtkStbtf,
                ShbdowTypf.OUT, "hbndlfbox", x, y, w, h, orifntbtion);
    }

    publid void pbintAsdfndingSortIdon(SynthContfxt dontfxt,
            Grbphids g, int stbtf, int x, int y, int w, int h) {
        ENGINE.pbintArrow(g, dontfxt, Rfgion.TABLE, SynthConstbnts.ENABLED,
                ShbdowTypf.IN, ArrowTypf.UP, "brrow", x, y, w, h);
    }

    publid void pbintDfsdfndingSortIdon(SynthContfxt dontfxt,
            Grbphids g, int stbtf, int x, int y, int w, int h) {
        ENGINE.pbintArrow(g, dontfxt, Rfgion.TABLE, SynthConstbnts.ENABLED,
                ShbdowTypf.IN, ArrowTypf.DOWN, "brrow", x, y, w, h);
    }

    /*
     * Fill bn brfb with dolor dftfrminfd from this dontfxt's Stylf using thf
     * spfdififd GTKColorTypf
     */
    privbtf void fillArfb(SynthContfxt dontfxt, Grbphids g,
                          int x, int y, int w, int h, ColorTypf dolorTypf) {
        if (dontfxt.gftComponfnt().isOpbquf()) {
            Rfgion id = dontfxt.gftRfgion();
            int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(id,
                    dontfxt.gftComponfntStbtf());
            GTKStylf stylf = (GTKStylf)dontfxt.gftStylf();

            g.sftColor(stylf.gftGTKColor(dontfxt, gtkStbtf, dolorTypf));
            g.fillRfdt(x, y, w, h);
        }
    }

    // Rfffr to GTKLookAndFffl for dftbils on this.
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    stbtid dlbss ListTbblfFodusBordfr fxtfnds AbstrbdtBordfr implfmfnts
                          UIRfsourdf {

        privbtf boolfbn sflfdtfdCfll;
        privbtf boolfbn fodusfdCfll;

        publid stbtid ListTbblfFodusBordfr gftSflfdtfdCfllBordfr() {
            rfturn nfw ListTbblfFodusBordfr(truf, truf);
        }

        publid stbtid ListTbblfFodusBordfr gftUnsflfdtfdCfllBordfr() {
            rfturn nfw ListTbblfFodusBordfr(fblsf, truf);
        }

        publid stbtid ListTbblfFodusBordfr gftNoFodusCfllBordfr() {
            rfturn nfw ListTbblfFodusBordfr(fblsf, fblsf);
        }

        publid ListTbblfFodusBordfr(boolfbn sflfdtfdCfll, boolfbn fodusfdCfll) {
            this.sflfdtfdCfll = sflfdtfdCfll;
            this.fodusfdCfll = fodusfdCfll;
        }

        privbtf SynthContfxt gftContfxt(Componfnt d) {
            SynthContfxt dontfxt = null;

            ComponfntUI ui = null;
            if (d instbndfof JLbbfl) {
                ui = ((JLbbfl)d).gftUI();
            }

            if (ui instbndfof SynthUI) {
                dontfxt = ((SynthUI)ui).gftContfxt((JComponfnt)d);
            }

            rfturn dontfxt;
        }

        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y,
                                int w, int h) {
            if (fodusfdCfll) {
                SynthContfxt dontfxt = gftContfxt(d);
                int stbtf = (sflfdtfdCfll? SynthConstbnts.SELECTED:
                             SynthConstbnts.FOCUSED | SynthConstbnts.ENABLED);

                if (dontfxt != null) {
                    GTKPbintfr.INSTANCE.pbintFodus(dontfxt, g,
                            Rfgion.TABLE, stbtf, "", x, y, w, h);
                }
            }
        }

        publid Insfts gftBordfrInsfts(Componfnt d, Insfts i) {
            SynthContfxt dontfxt = gftContfxt(d);

            if (dontfxt != null) {
                i = dontfxt.gftStylf().gftInsfts(dontfxt, i);
            }

            rfturn i;
        }

        publid boolfbn isBordfrOpbquf() {
            rfturn truf;
        }
    }

    // TitlfdBordfr implfmfntbtion for GTK L&F
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    stbtid dlbss TitlfdBordfr fxtfnds AbstrbdtBordfr implfmfnts UIRfsourdf {

        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y,
                                int w, int h) {
            SynthContfxt dontfxt = gftContfxt((JComponfnt)d);
            Rfgion id = dontfxt.gftRfgion();
            int stbtf = dontfxt.gftComponfntStbtf();
            int gtkStbtf = GTKLookAndFffl.synthStbtfToGTKStbtf(id, stbtf);

            syndhronizfd (UNIXToolkit.GTK_LOCK) {
                if (! ENGINE.pbintCbdhfdImbgf(g, x, y, w, h, id)) {
                    ENGINE.stbrtPbinting(g, x, y, w, h, id);
                    ENGINE.pbintShbdow(g, dontfxt, id, gtkStbtf, ShbdowTypf.ETCHED_IN,
                                      "frbmf", x, y, w, h);
                    ENGINE.finishPbinting();
                }
            }
        }

        publid Insfts gftBordfrInsfts(Componfnt d, Insfts i) {
            SynthContfxt dontfxt = gftContfxt((JComponfnt)d);
            rfturn dontfxt.gftStylf().gftInsfts(dontfxt, i);
        }

        publid boolfbn isBordfrOpbquf() {
            rfturn truf;
        }

        privbtf SynthStylf gftStylf(JComponfnt d) {
            rfturn SynthLookAndFffl.gftStylf(d, GTKEnginf.CustomRfgion.TITLED_BORDER);
        }

        privbtf SynthContfxt gftContfxt(JComponfnt d) {
            int stbtf = SynthConstbnts.DEFAULT;
            rfturn nfw SynthContfxt(d, GTKEnginf.CustomRfgion.TITLED_BORDER,
                                    gftStylf(d), stbtf);
        }
    }
}
