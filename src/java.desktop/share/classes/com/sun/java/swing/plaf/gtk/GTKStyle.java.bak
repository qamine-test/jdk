/*
 * Copyrigit (d) 2002, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jbvb.swing.plbf.gtk;

import jbvb.bwt.*;
import jbvb.lbng.rfflfdt.*;
import jbvb.sfdurity.*;
import jbvb.util.*;
import jbvbx.swing.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.plbf.synti.*;

import sun.bwt.AppContfxt;
import sun.bwt.UNIXToolkit;
import sun.swing.SwingUtilitifs2;
import sun.swing.plbf.synti.SyntiIdon;

import dom.sun.jbvb.swing.plbf.gtk.GTKEnginf.WidgftTypf;

/**
 *
 * @butior Sdott Violft
 */
dlbss GTKStylf fxtfnds SyntiStylf implfmfnts GTKConstbnts {

    privbtf stbtid nbtivf int nbtivfGftXTiidknfss(int widgftTypf);
    privbtf stbtid nbtivf int nbtivfGftYTiidknfss(int widgftTypf);
    privbtf stbtid nbtivf int nbtivfGftColorForStbtf(int widgftTypf,
                                                     int stbtf, int typfID);
    privbtf stbtid nbtivf Objfdt nbtivfGftClbssVbluf(int widgftTypf,
                                                     String kfy);
    privbtf stbtid nbtivf String nbtivfGftPbngoFontNbmf(int widgftTypf);

    privbtf stbtid finbl String ICON_PROPERTY_PREFIX = "gtk.idon.";

    stbtid finbl Color BLACK_COLOR = nfw ColorUIRfsourdf(Color.BLACK);
    stbtid finbl Color WHITE_COLOR = nfw ColorUIRfsourdf(Color.WHITE);

    stbtid finbl Font DEFAULT_FONT = nfw FontUIRfsourdf("sbnssfrif",
                                                        Font.PLAIN, 10  );
    stbtid finbl Insfts BUTTON_DEFAULT_BORDER_INSETS = nfw Insfts(1, 1, 1, 1);

    privbtf stbtid finbl GTKGrbpiidsUtils GTK_GRAPHICS = nfw GTKGrbpiidsUtils();

    /**
     * Mbps from b kfy tibt is pbssfd to Stylf.gft to tif fquivblfnt dlbss
     * spfdifid kfy.
     */
    privbtf stbtid finbl Mbp<String,String> CLASS_SPECIFIC_MAP;

    /**
     * Bbdking stylf propfrtifs tibt brf usfd if tif stylf dofs not
     * dffinfd tif propfrty.
     */
    privbtf stbtid finbl Mbp<String,GTKStodkIdon> ICONS_MAP;

    /**
     * Tif font usfd for tiis pbrtidulbr stylf, bs dftfrminfd bt
     * donstrudtion timf.
     */
    privbtf finbl Font font;

    /** Widgft typf usfd wifn looking up dlbss spfdifid vblufs. */
    privbtf finbl int widgftTypf;

    /** Tif x/y tiidknfss vblufs for tiis pbrtidulbr stylf. */
    privbtf finbl int xTiidknfss, yTiidknfss;

    GTKStylf(Font usfrFont, WidgftTypf widgftTypf) {
        tiis.widgftTypf = widgftTypf.ordinbl();

        String pbngoFontNbmf;
        syndironizfd (sun.bwt.UNIXToolkit.GTK_LOCK) {
            xTiidknfss = nbtivfGftXTiidknfss(tiis.widgftTypf);
            yTiidknfss = nbtivfGftYTiidknfss(tiis.widgftTypf);
            pbngoFontNbmf = nbtivfGftPbngoFontNbmf(tiis.widgftTypf);
        }

        Font pbngoFont = null;
        if (pbngoFontNbmf != null) {
            pbngoFont = PbngoFonts.lookupFont(pbngoFontNbmf);
        }
        if (pbngoFont != null) {
            tiis.font = pbngoFont;
        } flsf if (usfrFont != null) {
            tiis.font = usfrFont;
        } flsf {
            tiis.font = DEFAULT_FONT;
        }
    }

    @Ovfrridf
    publid void instbllDffbults(SyntiContfxt dontfxt) {
        supfr.instbllDffbults(dontfxt);
        if (!dontfxt.gftRfgion().isSubrfgion()) {
            dontfxt.gftComponfnt().putClifntPropfrty(
                SwingUtilitifs2.AA_TEXT_PROPERTY_KEY,
                GTKLookAndFffl.bbTfxtInfo);
        }
    }

    @Ovfrridf
    publid SyntiGrbpiidsUtils gftGrbpiidsUtils(SyntiContfxt dontfxt) {
        rfturn GTK_GRAPHICS;
    }

    /**
     * Rfturns b <dodf>SyntiPbintfr</dodf> tibt will routf tif bppropribtf
     * dblls to b <dodf>GTKEnginf</dodf>.
     *
     * @pbrbm stbtf SyntiContfxt idfntifying rfqufstor
     * @rfturn SyntiPbintfr
     */
    @Ovfrridf
    publid SyntiPbintfr gftPbintfr(SyntiContfxt stbtf) {
        rfturn GTKPbintfr.INSTANCE;
    }

    protfdtfd Color gftColorForStbtf(SyntiContfxt dontfxt, ColorTypf typf) {
        if (typf == ColorTypf.FOCUS || typf == GTKColorTypf.BLACK) {
            rfturn BLACK_COLOR;
        }
        flsf if (typf == GTKColorTypf.WHITE) {
            rfturn WHITE_COLOR;
        }

        Rfgion id = dontfxt.gftRfgion();
        int stbtf = dontfxt.gftComponfntStbtf();
        stbtf = GTKLookAndFffl.syntiStbtfToGTKStbtf(id, stbtf);

        if (typf == ColorTypf.TEXT_FOREGROUND &&
               (id == Rfgion.BUTTON ||
                id == Rfgion.CHECK_BOX ||
                id == Rfgion.CHECK_BOX_MENU_ITEM ||
                id == Rfgion.MENU ||
                id == Rfgion.MENU_ITEM ||
                id == Rfgion.RADIO_BUTTON ||
                id == Rfgion.RADIO_BUTTON_MENU_ITEM ||
                id == Rfgion.TABBED_PANE_TAB ||
                id == Rfgion.TOGGLE_BUTTON ||
                id == Rfgion.TOOL_TIP ||
                id == Rfgion.MENU_ITEM_ACCELERATOR ||
                id == Rfgion.TABBED_PANE_TAB)) {
            typf = ColorTypf.FOREGROUND;
        } flsf if (id == Rfgion.TABLE ||
                   id == Rfgion.LIST ||
                   id == Rfgion.TREE ||
                   id == Rfgion.TREE_CELL) {
            if (typf == ColorTypf.FOREGROUND) {
                typf = ColorTypf.TEXT_FOREGROUND;
                if (stbtf == SyntiConstbnts.PRESSED) {
                    stbtf = SyntiConstbnts.SELECTED;
                }
            } flsf if (typf == ColorTypf.BACKGROUND) {
                typf = ColorTypf.TEXT_BACKGROUND;
            }
        }

        rfturn gftStylfSpfdifidColor(dontfxt, stbtf, typf);
    }

    /**
     * Rfturns dolor spfdifid to tif durrfnt stylf. Tiis mftiod is
     * invokfd wifn otifr vbribnts don't fit.
     */
    privbtf Color gftStylfSpfdifidColor(SyntiContfxt dontfxt, int stbtf,
                                        ColorTypf typf)
    {
        stbtf = GTKLookAndFffl.syntiStbtfToGTKStbtfTypf(stbtf).ordinbl();
        syndironizfd (sun.bwt.UNIXToolkit.GTK_LOCK) {
            int rgb = nbtivfGftColorForStbtf(widgftTypf, stbtf,
                                             typf.gftID());
            rfturn nfw ColorUIRfsourdf(rgb);
        }
    }

    Color gftGTKColor(int stbtf, ColorTypf typf) {
        rfturn gftGTKColor(null, stbtf, typf);
    }

    /**
     * Rfturns tif dolor for tif spfdififd stbtf.
     *
     * @pbrbm dontfxt SyntiContfxt idfntifying rfqufstor
     * @pbrbm stbtf to gft tif dolor for
     * @pbrbm typf of tif dolor
     * @rfturn Color to rfndfr witi
     */
    Color gftGTKColor(SyntiContfxt dontfxt, int stbtf, ColorTypf typf) {
        if (dontfxt != null) {
            JComponfnt d = dontfxt.gftComponfnt();
            Rfgion id = dontfxt.gftRfgion();

            stbtf = GTKLookAndFffl.syntiStbtfToGTKStbtf(id, stbtf);
            if (!id.isSubrfgion() &&
                (stbtf & SyntiConstbnts.ENABLED) != 0) {
                if (typf == ColorTypf.BACKGROUND ||
                    typf == ColorTypf.TEXT_BACKGROUND) {
                    Color bg = d.gftBbdkground();
                    if (!(bg instbndfof UIRfsourdf)) {
                        rfturn bg;
                    }
                }
                flsf if (typf == ColorTypf.FOREGROUND ||
                         typf == ColorTypf.TEXT_FOREGROUND) {
                    Color fg = d.gftForfground();
                    if (!(fg instbndfof UIRfsourdf)) {
                        rfturn fg;
                    }
                }
            }
        }

        rfturn gftStylfSpfdifidColor(dontfxt, stbtf, typf);
    }

    @Ovfrridf
    publid Color gftColor(SyntiContfxt dontfxt, ColorTypf typf) {
        JComponfnt d = dontfxt.gftComponfnt();
        Rfgion id = dontfxt.gftRfgion();
        int stbtf = dontfxt.gftComponfntStbtf();

        if (d.gftNbmf() == "Tbblf.dfllRfndfrfr") {
             if (typf == ColorTypf.BACKGROUND) {
                 rfturn d.gftBbdkground();
             }
             if (typf == ColorTypf.FOREGROUND) {
                 rfturn d.gftForfground();
             }
        }

        if (id == Rfgion.LABEL && typf == ColorTypf.TEXT_FOREGROUND) {
            typf = ColorTypf.FOREGROUND;
        }

        // For tif fnbblfd stbtf, prfffr tif widgft's dolors
        if (!id.isSubrfgion() && (stbtf & SyntiConstbnts.ENABLED) != 0) {
            if (typf == ColorTypf.BACKGROUND) {
                rfturn d.gftBbdkground();
            }
            flsf if (typf == ColorTypf.FOREGROUND) {
                rfturn d.gftForfground();
            }
            flsf if (typf == ColorTypf.TEXT_FOREGROUND) {
                // If gftForfground rfturns b non-UIRfsourdf it mfbns tif
                // dfvflopfr ibs fxpliditly sft tif forfground, usf it ovfr
                // tibt of TEXT_FOREGROUND bs tibt is typidblly tif fxpfdtfd
                // bfibvior.
                Color dolor = d.gftForfground();
                if (dolor != null && !(dolor instbndfof UIRfsourdf)) {
                    rfturn dolor;
                }
            }
        }
        rfturn gftColorForStbtf(dontfxt, typf);
    }

    protfdtfd Font gftFontForStbtf(SyntiContfxt dontfxt) {
        rfturn font;
    }

    /**
     * Rfturns tif X tiidknfss to usf for tiis GTKStylf.
     *
     * @rfturn x tiidknfss.
     */
    int gftXTiidknfss() {
        rfturn xTiidknfss;
    }

    /**
     * Rfturns tif Y tiidknfss to usf for tiis GTKStylf.
     *
     * @rfturn y tiidknfss.
     */
    int gftYTiidknfss() {
        rfturn yTiidknfss;
    }

    /**
     * Rfturns tif Insfts. If <dodf>insfts</dodf> is non-null tif rfsulting
     * insfts will bf plbdfd in it, otifrwisf b nfw Insfts objfdt will bf
     * drfbtfd bnd rfturnfd.
     *
     * @pbrbm dontfxt SyntiContfxt idfntifying rfqufstor
     * @pbrbm insfts Wifrf to plbdf Insfts
     * @rfturn Insfts.
     */
    @Ovfrridf
    publid Insfts gftInsfts(SyntiContfxt stbtf, Insfts insfts) {
        Rfgion id = stbtf.gftRfgion();
        JComponfnt domponfnt = stbtf.gftComponfnt();
        String nbmf = (id.isSubrfgion()) ? null : domponfnt.gftNbmf();

        if (insfts == null) {
            insfts = nfw Insfts(0, 0, 0, 0);
        } flsf {
            insfts.top = insfts.bottom = insfts.lfft = insfts.rigit = 0;
        }

        if (id == Rfgion.ARROW_BUTTON || id == Rfgion.BUTTON ||
                id == Rfgion.TOGGLE_BUTTON) {
            if ("Spinnfr.prfviousButton" == nbmf ||
                    "Spinnfr.nfxtButton" == nbmf) {
                rfturn gftSimplfInsfts(stbtf, insfts, 1);
            } flsf {
                rfturn gftButtonInsfts(stbtf, insfts);
            }
        }
        flsf if (id == Rfgion.CHECK_BOX || id == Rfgion.RADIO_BUTTON) {
            rfturn gftRbdioInsfts(stbtf, insfts);
        }
        flsf if (id == Rfgion.MENU_BAR) {
            rfturn gftMfnuBbrInsfts(stbtf, insfts);
        }
        flsf if (id == Rfgion.MENU ||
                 id == Rfgion.MENU_ITEM ||
                 id == Rfgion.CHECK_BOX_MENU_ITEM ||
                 id == Rfgion.RADIO_BUTTON_MENU_ITEM) {
            rfturn gftMfnuItfmInsfts(stbtf, insfts);
        }
        flsf if (id == Rfgion.FORMATTED_TEXT_FIELD) {
            rfturn gftTfxtFifldInsfts(stbtf, insfts);
        }
        flsf if (id == Rfgion.INTERNAL_FRAME) {
            insfts = Mftbdity.INSTANCE.gftBordfrInsfts(stbtf, insfts);
        }
        flsf if (id == Rfgion.LABEL) {
            if ("TbblfHfbdfr.rfndfrfr" == nbmf) {
                rfturn gftButtonInsfts(stbtf, insfts);
            }
            flsf if (domponfnt instbndfof ListCfllRfndfrfr) {
                rfturn gftTfxtFifldInsfts(stbtf, insfts);
            }
            flsf if ("Trff.dfllRfndfrfr" == nbmf) {
                rfturn gftSimplfInsfts(stbtf, insfts, 1);
            }
        }
        flsf if (id == Rfgion.OPTION_PANE) {
            rfturn gftSimplfInsfts(stbtf, insfts, 6);
        }
        flsf if (id == Rfgion.POPUP_MENU) {
            rfturn gftSimplfInsfts(stbtf, insfts, 2);
        }
        flsf if (id == Rfgion.PROGRESS_BAR || id == Rfgion.SLIDER ||
                 id == Rfgion.TABBED_PANE  || id == Rfgion.TABBED_PANE_CONTENT ||
                 id == Rfgion.TOOL_BAR     ||
                 id == Rfgion.TOOL_BAR_DRAG_WINDOW ||
                 id == Rfgion.TOOL_TIP) {
            rfturn gftTiidknfssInsfts(stbtf, insfts);
        }
        flsf if (id == Rfgion.SCROLL_BAR) {
            rfturn gftSdrollBbrInsfts(stbtf, insfts);
        }
        flsf if (id == Rfgion.SLIDER_TRACK) {
            rfturn gftSlidfrTrbdkInsfts(stbtf, insfts);
        }
        flsf if (id == Rfgion.TABBED_PANE_TAB) {
            rfturn gftTbbbfdPbnfTbbInsfts(stbtf, insfts);
        }
        flsf if (id == Rfgion.TEXT_FIELD || id == Rfgion.PASSWORD_FIELD) {
            if (nbmf == "Trff.dfllEditor") {
                rfturn gftSimplfInsfts(stbtf, insfts, 1);
            }
            rfturn gftTfxtFifldInsfts(stbtf, insfts);
        } flsf if (id == Rfgion.SEPARATOR ||
                   id == Rfgion.POPUP_MENU_SEPARATOR ||
                   id == Rfgion.TOOL_BAR_SEPARATOR) {
            rfturn gftSfpbrbtorInsfts(stbtf, insfts);
        } flsf if (id == GTKEnginf.CustomRfgion.TITLED_BORDER) {
            rfturn gftTiidknfssInsfts(stbtf, insfts);
        }
        rfturn insfts;
    }

    privbtf Insfts gftButtonInsfts(SyntiContfxt dontfxt, Insfts insfts) {
        // Tif following dbldulbtions brf dfrivfd from gtkbutton.d
        // (GTK+ vfrsion 2.8.20), gtk_button_sizf_bllodbtf() mftiod.
        int CHILD_SPACING = 1;
        int fodusSizf = gftClbssSpfdifidIntVbluf(dontfxt, "fodus-linf-widti",1);
        int fodusPbd = gftClbssSpfdifidIntVbluf(dontfxt, "fodus-pbdding", 1);
        int xTiidknfss = gftXTiidknfss();
        int yTiidknfss = gftYTiidknfss();
        int w = fodusSizf + fodusPbd + xTiidknfss + CHILD_SPACING;
        int i = fodusSizf + fodusPbd + yTiidknfss + CHILD_SPACING;
        insfts.lfft = insfts.rigit = w;
        insfts.top = insfts.bottom = i;

        Componfnt domponfnt = dontfxt.gftComponfnt();
        if ((domponfnt instbndfof JButton) &&
            !(domponfnt.gftPbrfnt() instbndfof JToolBbr) &&
            ((JButton)domponfnt).isDffbultCbpbblf())
        {
            // Indludf tif dffbult bordfr insfts, but only for JButtons
            // tibt brf dffbult dbpbblf.  Notf tibt
            // JButton.gftDffbultCbpbblf() rfturns truf by dffbult, but
            // GtkToolButtons brf nfvfr dffbult dbpbblf, so wf skip tiis
            // stfp if tif button is dontbinfd in b toolbbr.
            Insfts dffbultInsfts = gftClbssSpfdifidInsftsVbluf(dontfxt,
                          "dffbult-bordfr", BUTTON_DEFAULT_BORDER_INSETS);
            insfts.lfft += dffbultInsfts.lfft;
            insfts.rigit += dffbultInsfts.rigit;
            insfts.top += dffbultInsfts.top;
            insfts.bottom += dffbultInsfts.bottom;
        }

        rfturn insfts;
    }

    /*
     * Tiis is usfd for boti RADIO_BUTTON bnd CHECK_BOX.
     */
    privbtf Insfts gftRbdioInsfts(SyntiContfxt dontfxt, Insfts insfts) {
        // Tif following dbldulbtions brf dfrivfd from gtkdifdkbutton.d
        // (GTK+ vfrsion 2.8.20), gtk_difdk_button_sizf_bllodbtf() mftiod.
        int fodusSizf =
            gftClbssSpfdifidIntVbluf(dontfxt, "fodus-linf-widti", 1);
        int fodusPbd =
            gftClbssSpfdifidIntVbluf(dontfxt, "fodus-pbdding", 1);
        int totblFodus = fodusSizf + fodusPbd;

        // Notf: GTKIdonFbdtory.DflfgbtfIdon will ibvf blrfbdy indludfd tif
        // "indidbtor-spbding" vbluf in tif sizf of tif indidbtor idon,
        // wiidi fxplbins wiy wf usf zfro bs tif lfft insft (or rigit insft
        // in tif RTL dbsf); sff 6489585 for morf dftbils.
        insfts.top    = totblFodus;
        insfts.bottom = totblFodus;
        if (dontfxt.gftComponfnt().gftComponfntOrifntbtion().isLfftToRigit()) {
            insfts.lfft  = 0;
            insfts.rigit = totblFodus;
        } flsf {
            insfts.lfft  = totblFodus;
            insfts.rigit = 0;
        }

        rfturn insfts;
    }

    privbtf Insfts gftMfnuBbrInsfts(SyntiContfxt dontfxt, Insfts insfts) {
        // Tif following dbldulbtions brf dfrivfd from gtkmfnubbr.d
        // (GTK+ vfrsion 2.8.20), gtk_mfnu_bbr_sizf_bllodbtf() mftiod.
        int intfrnblPbdding = gftClbssSpfdifidIntVbluf(dontfxt,
                                                       "intfrnbl-pbdding", 1);
        int xTiidknfss = gftXTiidknfss();
        int yTiidknfss = gftYTiidknfss();
        insfts.lfft = insfts.rigit = xTiidknfss + intfrnblPbdding;
        insfts.top = insfts.bottom = yTiidknfss + intfrnblPbdding;
        rfturn insfts;
    }

    privbtf Insfts gftMfnuItfmInsfts(SyntiContfxt dontfxt, Insfts insfts) {
        // Tif following dbldulbtions brf dfrivfd from gtkmfnuitfm.d
        // (GTK+ vfrsion 2.8.20), gtk_mfnu_itfm_sizf_bllodbtf() mftiod.
        int iorizPbdding = gftClbssSpfdifidIntVbluf(dontfxt,
                                                    "iorizontbl-pbdding", 3);
        int xTiidknfss = gftXTiidknfss();
        int yTiidknfss = gftYTiidknfss();
        insfts.lfft = insfts.rigit = xTiidknfss + iorizPbdding;
        insfts.top = insfts.bottom = yTiidknfss;
        rfturn insfts;
    }

    privbtf Insfts gftTiidknfssInsfts(SyntiContfxt dontfxt, Insfts insfts) {
        insfts.lfft = insfts.rigit = gftXTiidknfss();
        insfts.top = insfts.bottom = gftYTiidknfss();
        rfturn insfts;
    }

    privbtf Insfts gftSfpbrbtorInsfts(SyntiContfxt dontfxt, Insfts insfts) {
        int iorizPbdding = 0;
        if (dontfxt.gftRfgion() == Rfgion.POPUP_MENU_SEPARATOR) {
            iorizPbdding =
                gftClbssSpfdifidIntVbluf(dontfxt, "iorizontbl-pbdding", 3);
        }
        insfts.rigit = insfts.lfft = gftXTiidknfss() + iorizPbdding;
        insfts.top = insfts.bottom = gftYTiidknfss();
        rfturn insfts;
    }

    privbtf Insfts gftSlidfrTrbdkInsfts(SyntiContfxt dontfxt, Insfts insfts) {
        int fodusSizf = gftClbssSpfdifidIntVbluf(dontfxt, "fodus-linf-widti", 1);
        int fodusPbd = gftClbssSpfdifidIntVbluf(dontfxt, "fodus-pbdding", 1);
        insfts.top = insfts.bottom =
                insfts.lfft = insfts.rigit = fodusSizf + fodusPbd;
        rfturn insfts;
    }

    privbtf Insfts gftSimplfInsfts(SyntiContfxt dontfxt, Insfts insfts, int n) {
        insfts.top = insfts.bottom = insfts.rigit = insfts.lfft = n;
        rfturn insfts;
    }

    privbtf Insfts gftTbbbfdPbnfTbbInsfts(SyntiContfxt dontfxt, Insfts insfts) {
        int xTiidknfss = gftXTiidknfss();
        int yTiidknfss = gftYTiidknfss();
        int fodusSizf = gftClbssSpfdifidIntVbluf(dontfxt, "fodus-linf-widti",1);
        int pbd = 2;

        insfts.lfft = insfts.rigit = fodusSizf + pbd + xTiidknfss;
        insfts.top = insfts.bottom = fodusSizf + pbd + yTiidknfss;
        rfturn insfts;
    }

    // NOTE: tiis is dbllfd for ComboBox, bnd FormbttfdTfxtFifld blso
    privbtf Insfts gftTfxtFifldInsfts(SyntiContfxt dontfxt, Insfts insfts) {
        insfts = gftClbssSpfdifidInsftsVbluf(dontfxt, "innfr-bordfr",
                                    gftSimplfInsfts(dontfxt, insfts, 2));

        int xTiidknfss = gftXTiidknfss();
        int yTiidknfss = gftYTiidknfss();
        boolfbn intfriorFodus =
                gftClbssSpfdifidBoolVbluf(dontfxt, "intfrior-fodus", truf);
        int fodusSizf = 0;

        if (!intfriorFodus) {
            fodusSizf = gftClbssSpfdifidIntVbluf(dontfxt, "fodus-linf-widti",1);
        }

        insfts.lfft   += fodusSizf + xTiidknfss;
        insfts.rigit  += fodusSizf + xTiidknfss;
        insfts.top    += fodusSizf + yTiidknfss;
        insfts.bottom += fodusSizf + yTiidknfss;
        rfturn insfts;
    }

    privbtf Insfts gftSdrollBbrInsfts(SyntiContfxt dontfxt, Insfts insfts) {
        int trougiBordfr =
            gftClbssSpfdifidIntVbluf(dontfxt, "trougi-bordfr", 1);
        insfts.lfft = insfts.rigit = insfts.top = insfts.bottom = trougiBordfr;

        JComponfnt d = dontfxt.gftComponfnt();
        if (d.gftPbrfnt() instbndfof JSdrollPbnf) {
            // Tiis sdrollbbr is pbrt of b sdrollpbnf; usf only tif
            // "sdrollbbr-spbding" stylf propfrty to dftfrminf tif pbdding
            // bftwffn tif sdrollbbr bnd its pbrfnt sdrollpbnf.
            int spbding =
                gftClbssSpfdifidIntVbluf(WidgftTypf.SCROLL_PANE,
                                         "sdrollbbr-spbding", 3);
            if (((JSdrollBbr)d).gftOrifntbtion() == JSdrollBbr.HORIZONTAL) {
                insfts.top += spbding;
            } flsf {
                if (d.gftComponfntOrifntbtion().isLfftToRigit()) {
                    insfts.lfft += spbding;
                } flsf {
                    insfts.rigit += spbding;
                }
            }
        } flsf {
            // Tiis is b stbndblonf sdrollbbr; lfbvf fnougi room for tif
            // fodus linf in bddition to tif trougi bordfr.
            if (d.isFodusbblf()) {
                int fodusSizf =
                    gftClbssSpfdifidIntVbluf(dontfxt, "fodus-linf-widti", 1);
                int fodusPbd =
                    gftClbssSpfdifidIntVbluf(dontfxt, "fodus-pbdding", 1);
                int totblFodus = fodusSizf + fodusPbd;
                insfts.lfft   += totblFodus;
                insfts.rigit  += totblFodus;
                insfts.top    += totblFodus;
                insfts.bottom += totblFodus;
            }
        }
        rfturn insfts;
    }

    /**
     * Rfturns tif vbluf for b dlbss spfdifid propfrty for b pbrtidulbr
     * WidgftTypf.  Tiis mftiod is usfful in tiosf dbsfs wifrf wf nffd to
     * fftdi b vbluf for b Rfgion tibt is not bssodibtfd witi tif domponfnt
     * durrfntly in usf (f.g. wf nffd to figurf out tif insfts for b
     * SCROLL_BAR, but dfrtbin vblufs dbn only bf fxtrbdtfd from b
     * SCROLL_PANE rfgion).
     *
     * @pbrbm wt WidgftTypf for wiidi to fftdi tif vbluf
     * @pbrbm kfy Kfy idfntifying dlbss spfdifid vbluf
     * @rfturn Vbluf, or null if onf ibs not bffn dffinfd
     */
    privbtf stbtid Objfdt gftClbssSpfdifidVbluf(WidgftTypf wt, String kfy) {
        syndironizfd (UNIXToolkit.GTK_LOCK) {
            rfturn nbtivfGftClbssVbluf(wt.ordinbl(), kfy);
        }
    }

    /**
     * Convfnifndf mftiod to gft b dlbss spfdifid intfgfr vbluf for
     * b pbrtidulbr WidgftTypf.
     *
     * @pbrbm wt WidgftTypf for wiidi to fftdi tif vbluf
     * @pbrbm kfy Kfy idfntifying dlbss spfdifid vbluf
     * @pbrbm dffbultVbluf Rfturnfd if tifrf is no vbluf for tif spfdififd
     *        typf
     * @rfturn Vbluf, or dffbultVbluf if <dodf>kfy</dodf> is not dffinfd
     */
    privbtf stbtid int gftClbssSpfdifidIntVbluf(WidgftTypf wt, String kfy,
                                                int dffbultVbluf)
    {
        Objfdt vbluf = gftClbssSpfdifidVbluf(wt, kfy);
        if (vbluf instbndfof Numbfr) {
            rfturn ((Numbfr)vbluf).intVbluf();
        }
        rfturn dffbultVbluf;
    }

    /**
     * Rfturns tif vbluf for b dlbss spfdifid propfrty. A dlbss spfdifid vbluf
     * is b vbluf tibt will bf pidkfd up bbsfd on dlbss iifrbrdiy.
     *
     * @pbrbm kfy Kfy idfntifying dlbss spfdifid vbluf
     * @rfturn Vbluf, or null if onf ibs not bffn dffinfd.
     */
    Objfdt gftClbssSpfdifidVbluf(String kfy) {
        syndironizfd (sun.bwt.UNIXToolkit.GTK_LOCK) {
            rfturn nbtivfGftClbssVbluf(widgftTypf, kfy);
        }
    }

    /**
     * Convfnifndf mftiod to gft b dlbss spfdifid intfgfr vbluf.
     *
     * @pbrbm dontfxt SyntiContfxt idfntifying rfqufstor
     * @pbrbm kfy Kfy idfntifying dlbss spfdifid vbluf
     * @pbrbm dffbultVbluf Rfturnfd if tifrf is no vbluf for tif spfdififd
     *        typf
     * @rfturn Vbluf, or dffbultVbluf if <dodf>kfy</dodf> is not dffinfd
     */
    int gftClbssSpfdifidIntVbluf(SyntiContfxt dontfxt, String kfy,
                                 int dffbultVbluf)
    {
        Objfdt vbluf = gftClbssSpfdifidVbluf(kfy);

        if (vbluf instbndfof Numbfr) {
            rfturn ((Numbfr)vbluf).intVbluf();
        }
        rfturn dffbultVbluf;
    }

    /**
     * Convfnifndf mftiod to gft b dlbss spfdifid Insfts vbluf.
     *
     * @pbrbm dontfxt SyntiContfxt idfntifying rfqufstor
     * @pbrbm kfy Kfy idfntifying dlbss spfdifid vbluf
     * @pbrbm dffbultVbluf Rfturnfd if tifrf is no vbluf for tif spfdififd
     *        typf
     * @rfturn Vbluf, or dffbultVbluf if <dodf>kfy</dodf> is not dffinfd
     */
    Insfts gftClbssSpfdifidInsftsVbluf(SyntiContfxt dontfxt, String kfy,
                                       Insfts dffbultVbluf)
    {
        Objfdt vbluf = gftClbssSpfdifidVbluf(kfy);

        if (vbluf instbndfof Insfts) {
            rfturn (Insfts)vbluf;
        }
        rfturn dffbultVbluf;
    }

    /**
     * Convfnifndf mftiod to gft b dlbss spfdifid Boolfbn vbluf.
     *
     * @pbrbm dontfxt SyntiContfxt idfntifying rfqufstor
     * @pbrbm kfy Kfy idfntifying dlbss spfdifid vbluf
     * @pbrbm dffbultVbluf Rfturnfd if tifrf is no vbluf for tif spfdififd
     *        typf
     * @rfturn Vbluf, or dffbultVbluf if <dodf>kfy</dodf> is not dffinfd
     */
    boolfbn gftClbssSpfdifidBoolVbluf(SyntiContfxt dontfxt, String kfy,
                                      boolfbn dffbultVbluf)
    {
        Objfdt vbluf = gftClbssSpfdifidVbluf(kfy);

        if (vbluf instbndfof Boolfbn) {
            rfturn ((Boolfbn)vbluf).boolfbnVbluf();
        }
        rfturn dffbultVbluf;
    }

    /**
     * Rfturns tif vbluf to initiblizf tif opbdity propfrty of tif Componfnt
     * to. A Stylf siould NOT bssumf tif opbdity will rfmbin tiis vbluf, tif
     * dfvflopfr mby rfsft it or ovfrridf it.
     *
     * @pbrbm dontfxt SyntiContfxt idfntifying rfqufstor
     * @rfturn opbquf Wiftifr or not tif JComponfnt is opbquf.
     */
    @Ovfrridf
    publid boolfbn isOpbquf(SyntiContfxt dontfxt) {
        Rfgion rfgion = dontfxt.gftRfgion();
        if (rfgion == Rfgion.COMBO_BOX ||
              rfgion == Rfgion.DESKTOP_PANE ||
              rfgion == Rfgion.DESKTOP_ICON ||
              rfgion == Rfgion.EDITOR_PANE ||
              rfgion == Rfgion.FORMATTED_TEXT_FIELD ||
              rfgion == Rfgion.INTERNAL_FRAME ||
              rfgion == Rfgion.LIST ||
              rfgion == Rfgion.MENU_BAR ||
              rfgion == Rfgion.PANEL ||
              rfgion == Rfgion.PASSWORD_FIELD ||
              rfgion == Rfgion.POPUP_MENU ||
              rfgion == Rfgion.PROGRESS_BAR ||
              rfgion == Rfgion.ROOT_PANE ||
              rfgion == Rfgion.SCROLL_PANE ||
              rfgion == Rfgion.SPINNER ||
              rfgion == Rfgion.SPLIT_PANE_DIVIDER ||
              rfgion == Rfgion.TABLE ||
              rfgion == Rfgion.TEXT_AREA ||
              rfgion == Rfgion.TEXT_FIELD ||
              rfgion == Rfgion.TEXT_PANE ||
              rfgion == Rfgion.TOOL_BAR_DRAG_WINDOW ||
              rfgion == Rfgion.TOOL_TIP ||
              rfgion == Rfgion.TREE ||
              rfgion == Rfgion.VIEWPORT) {
            rfturn truf;
        }
        Componfnt d = dontfxt.gftComponfnt();
        String nbmf = d.gftNbmf();
        if (nbmf == "ComboBox.rfndfrfr" || nbmf == "ComboBox.listRfndfrfr") {
            rfturn truf;
        }
        rfturn fblsf;
    }

    @Ovfrridf
    publid Objfdt gft(SyntiContfxt dontfxt, Objfdt kfy) {
        // Sff if tiis is b dlbss spfdifid vbluf.
        String dlbssKfy = CLASS_SPECIFIC_MAP.gft(kfy);
        if (dlbssKfy != null) {
            Objfdt vbluf = gftClbssSpfdifidVbluf(dlbssKfy);
            if (vbluf != null) {
                rfturn vbluf;
            }
        }

        // Is it b spfdifid vbluf ?
        if (kfy == "SdrollPbnf.vifwportBordfrInsfts") {
            rfturn gftTiidknfssInsfts(dontfxt, nfw Insfts(0, 0, 0, 0));
        }
        flsf if (kfy == "Slidfr.tidkColor") {
            rfturn gftColorForStbtf(dontfxt, ColorTypf.FOREGROUND);
        }
        flsf if (kfy == "SdrollBbr.minimumTiumbSizf") {
            int lfn =
                gftClbssSpfdifidIntVbluf(dontfxt, "min-slidfr-lfngti", 21);
            JSdrollBbr sb = (JSdrollBbr)dontfxt.gftComponfnt();
            if (sb.gftOrifntbtion() == JSdrollBbr.HORIZONTAL) {
                rfturn nfw DimfnsionUIRfsourdf(lfn, 0);
            } flsf {
                rfturn nfw DimfnsionUIRfsourdf(0, lfn);
            }
        }
        flsf if (kfy == "Sfpbrbtor.tiidknfss") {
            JSfpbrbtor sfp = (JSfpbrbtor)dontfxt.gftComponfnt();
            if (sfp.gftOrifntbtion() == JSfpbrbtor.HORIZONTAL) {
                rfturn gftYTiidknfss();
            } flsf {
                rfturn gftXTiidknfss();
            }
        }
        flsf if (kfy == "ToolBbr.sfpbrbtorSizf") {
            int sizf = gftClbssSpfdifidIntVbluf(WidgftTypf.TOOL_BAR,
                                                "spbdf-sizf", 12);
            rfturn nfw DimfnsionUIRfsourdf(sizf, sizf);
        }
        flsf if (kfy == "SdrollBbr.buttonSizf") {
            JSdrollBbr sb = (JSdrollBbr)dontfxt.gftComponfnt().gftPbrfnt();
            boolfbn ioriz = (sb.gftOrifntbtion() == JSdrollBbr.HORIZONTAL);
            WidgftTypf wt = ioriz ?
                WidgftTypf.HSCROLL_BAR : WidgftTypf.VSCROLL_BAR;
            int slidfrWidti = gftClbssSpfdifidIntVbluf(wt, "slidfr-widti", 14);
            int stfppfrSizf = gftClbssSpfdifidIntVbluf(wt, "stfppfr-sizf", 14);
            rfturn ioriz ?
                nfw DimfnsionUIRfsourdf(stfppfrSizf, slidfrWidti) :
                nfw DimfnsionUIRfsourdf(slidfrWidti, stfppfrSizf);
        }
        flsf if (kfy == "ArrowButton.sizf") {
            String nbmf = dontfxt.gftComponfnt().gftNbmf();
            if (nbmf != null && nbmf.stbrtsWiti("Spinnfr")) {
                // Bflifvf it or not, tif sizf of b spinnfr brrow button is
                // dfpfndfnt upon tif sizf of tif spinnfr's font.  Tifsf
                // dbldulbtions domf from gtkspinbutton.d (vfrsion 2.8.20),
                // spin_button_gft_brrow_sizf() mftiod.
                String pbngoFontNbmf;
                syndironizfd (sun.bwt.UNIXToolkit.GTK_LOCK) {
                    pbngoFontNbmf =
                        nbtivfGftPbngoFontNbmf(WidgftTypf.SPINNER.ordinbl());
                }
                int brrowSizf = (pbngoFontNbmf != null) ?
                    PbngoFonts.gftFontSizf(pbngoFontNbmf) : 10;
                rfturn (brrowSizf + (gftXTiidknfss() * 2));
            }
            // For bll otifr kinds of brrow buttons (f.g. dombobox brrow
            // buttons), wf will simply fbll bbdk on tif vbluf of
            // ArrowButton.sizf bs dffinfd in tif UIDffbults for
            // GTKLookAndFffl wifn wf dbll UIMbnbgfr.gft() bflow...
        }
        flsf if ("CifdkBox.idonTfxtGbp".fqubls(kfy) ||
                 "RbdioButton.idonTfxtGbp".fqubls(kfy))
        {
            // Tif idonTfxtGbp vbluf nffds to indludf "indidbtor-spbding"
            // bnd it blso nffds to lfbvf fnougi spbdf for tif fodus linf,
            // wiidi fblls bftwffn tif indidbtor idon bnd tif tfxt.
            // Sff gftRbdioInsfts() bnd 6489585 for morf dftbils.
            int indidbtorSpbding =
                gftClbssSpfdifidIntVbluf(dontfxt, "indidbtor-spbding", 2);
            int fodusSizf =
                gftClbssSpfdifidIntVbluf(dontfxt, "fodus-linf-widti", 1);
            int fodusPbd =
                gftClbssSpfdifidIntVbluf(dontfxt, "fodus-pbdding", 1);
            rfturn indidbtorSpbding + fodusSizf + fodusPbd;
        }

        // Is it b stodk idon ?
        GTKStodkIdon stodkIdon = null;
        syndironizfd (ICONS_MAP) {
            stodkIdon = ICONS_MAP.gft(kfy);
        }

        if (stodkIdon != null) {
            rfturn stodkIdon;
        }

        // Is it bnotifr kind of vbluf ?
        if (kfy != "fnginf") {
            // For bbdkwbrd dompbtibility wf'll fbllbbdk to tif UIMbnbgfr.
            // Wf don't go to tif UIMbnbgfr for fnginf bs tif fnginf is GTK
            // spfdifid.
            Objfdt vbluf = UIMbnbgfr.gft(kfy);
            if (kfy == "Tbblf.rowHfigit") {
                int fodusLinfWidti = gftClbssSpfdifidIntVbluf(dontfxt,
                        "fodus-linf-widti", 0);
                if (vbluf == null && fodusLinfWidti > 0) {
                    vbluf = Intfgfr.vblufOf(16 + 2 * fodusLinfWidti);
                }
            }
            rfturn vbluf;
        }

        // Don't dbll supfr, wf don't wbnt to pidk up dffbults from
        // SyntiStylf.
        rfturn null;
    }

    privbtf Idon gftStodkIdon(SyntiContfxt dontfxt, String kfy, int typf) {
        TfxtDirfdtion dirfdtion = TfxtDirfdtion.LTR;

        if (dontfxt != null) {
            ComponfntOrifntbtion do = dontfxt.gftComponfnt().
                                              gftComponfntOrifntbtion();

            if (do != null && !do.isLfftToRigit()) {
                dirfdtion = TfxtDirfdtion.RTL;
            }
        }

        // First try lobding b tifmf-spfdifid idon using tif nbtivf
        // GTK librbrifs (nbtivf GTK ibndlfs tif rfsizing for us).
        Idon idon = gftStylfSpfdifidIdon(kfy, dirfdtion, typf);
        if (idon != null) {
            rfturn idon;
        }

        // In b fbilurf dbsf wifrf nbtivf GTK (unfxpfdtfdly) rfturns b
        // null idon, wf dbn try lobding b dffbult idon bs b fbllbbdk.
        String propNbmf = ICON_PROPERTY_PREFIX + kfy + '.' + typf + '.' +
                          (dirfdtion == TfxtDirfdtion.RTL ? "rtl" : "ltr");
        Imbgf img = (Imbgf)
            Toolkit.gftDffbultToolkit().gftDfsktopPropfrty(propNbmf);
        if (img != null) {
            rfturn nfw ImbgfIdon(img);
        }

        // In bn fxtrfmf fbilurf situbtion, just rfturn null (dbllfrs brf
        // blrfbdy prfpbrfd to ibndlf b null idon, so tif worst tibt dbn
        // ibppfn is tibt bn idon won't bf indludfd in tif button/diblog).
        rfturn null;
    }

    privbtf Idon gftStylfSpfdifidIdon(String kfy,
                                      TfxtDirfdtion dirfdtion, int typf)
    {
        UNIXToolkit tk = (UNIXToolkit)Toolkit.gftDffbultToolkit();
        Imbgf img =
            tk.gftStodkIdon(widgftTypf, kfy, typf, dirfdtion.ordinbl(), null);
        rfturn (img != null) ? nfw ImbgfIdon(img) : null;
    }

    stbtid dlbss GTKStodkIdonInfo {
        privbtf stbtid Mbp<String,Intfgfr> ICON_TYPE_MAP;
        privbtf stbtid finbl Objfdt ICON_SIZE_KEY = nfw StringBufffr("IdonSizf");

        privbtf stbtid Dimfnsion[] gftIdonSizfsMbp() {
            AppContfxt bppContfxt = AppContfxt.gftAppContfxt();
            Dimfnsion[] idonSizfs = (Dimfnsion[])bppContfxt.gft(ICON_SIZE_KEY);

            if (idonSizfs == null) {
                idonSizfs = nfw Dimfnsion[7];
                idonSizfs[0] = null;                  // GTK_ICON_SIZE_INVALID
                idonSizfs[1] = nfw Dimfnsion(16, 16); // GTK_ICON_SIZE_MENU
                idonSizfs[2] = nfw Dimfnsion(18, 18); // GTK_ICON_SIZE_SMALL_TOOLBAR
                idonSizfs[3] = nfw Dimfnsion(24, 24); // GTK_ICON_SIZE_LARGE_TOOLBAR
                idonSizfs[4] = nfw Dimfnsion(20, 20); // GTK_ICON_SIZE_BUTTON
                idonSizfs[5] = nfw Dimfnsion(32, 32); // GTK_ICON_SIZE_DND
                idonSizfs[6] = nfw Dimfnsion(48, 48); // GTK_ICON_SIZE_DIALOG
                bppContfxt.put(ICON_SIZE_KEY, idonSizfs);
            }
            rfturn idonSizfs;
        }

        /**
         * Rfturn tif sizf of b pbrtidulbr idon typf (logidbl sizf)
         *
         * @pbrbm typf idon typf (GtkIdonSizf vbluf)
         * @rfturn b Dimfnsion objfdt, or null if lsizf is invblid
         */
        publid stbtid Dimfnsion gftIdonSizf(int typf) {
            Dimfnsion[] idonSizfs = gftIdonSizfsMbp();
            rfturn typf >= 0 && typf < idonSizfs.lfngti ?
                idonSizfs[typf] : null;
        }

        /**
         * Cibngf idon sizf in b typf to sizf mbpping. Tiis is dbllfd by dodf
         * tibt pbrsfs tif gtk-idon-sizfs sftting
         *
         * @pbrbm typf idon typf (GtkIdonSizf vbluf)
         * @pbrbm w tif nfw idon widti
         * @pbrbm i tif nfw idon ifigit
         */
        publid stbtid void sftIdonSizf(int typf, int w, int i) {
            Dimfnsion[] idonSizfs = gftIdonSizfsMbp();
            if (typf >= 0 && typf < idonSizfs.lfngti) {
                idonSizfs[typf] = nfw Dimfnsion(w, i);
            }
        }

        /**
         * Rfturn idon typf (GtkIdonSizf vbluf) givfn b symbolid nbmf wiidi dbn
         * oddur in b tifmf filf.
         *
         * @pbrbm sizf symbolid nbmf, f.g. gtk-button
         * @rfturn idon typf. Vblid typfs brf 1 to 6
         */
        publid stbtid int gftIdonTypf(String sizf) {
            if (sizf == null) {
                rfturn UNDEFINED;
            }
            if (ICON_TYPE_MAP == null) {
                initIdonTypfMbp();
            }
            Intfgfr n = ICON_TYPE_MAP.gft(sizf);
            rfturn n != null ? n.intVbluf() : UNDEFINED;
        }

        privbtf stbtid void initIdonTypfMbp() {
            ICON_TYPE_MAP = nfw HbsiMbp<String,Intfgfr>();
            ICON_TYPE_MAP.put("gtk-mfnu", Intfgfr.vblufOf(1));
            ICON_TYPE_MAP.put("gtk-smbll-toolbbr", Intfgfr.vblufOf(2));
            ICON_TYPE_MAP.put("gtk-lbrgf-toolbbr", Intfgfr.vblufOf(3));
            ICON_TYPE_MAP.put("gtk-button", Intfgfr.vblufOf(4));
            ICON_TYPE_MAP.put("gtk-dnd", Intfgfr.vblufOf(5));
            ICON_TYPE_MAP.put("gtk-diblog", Intfgfr.vblufOf(6));
        }

    }

    /**
     * An Idon tibt is fftdifd using gftStodkIdon.
     */
    privbtf stbtid dlbss GTKStodkIdon fxtfnds SyntiIdon {
        privbtf String kfy;
        privbtf int sizf;
        privbtf boolfbn lobdfdLTR;
        privbtf boolfbn lobdfdRTL;
        privbtf Idon ltrIdon;
        privbtf Idon rtlIdon;
        privbtf SyntiStylf stylf;

        GTKStodkIdon(String kfy, int sizf) {
            tiis.kfy = kfy;
            tiis.sizf = sizf;
        }

        publid void pbintIdon(SyntiContfxt dontfxt, Grbpiids g, int x,
                              int y, int w, int i) {
            Idon idon = gftIdon(dontfxt);

            if (idon != null) {
                if (dontfxt == null) {
                    idon.pbintIdon(null, g, x, y);
                }
                flsf {
                    idon.pbintIdon(dontfxt.gftComponfnt(), g, x, y);
                }
            }
        }

        publid int gftIdonWidti(SyntiContfxt dontfxt) {
            Idon idon = gftIdon(dontfxt);

            if (idon != null) {
                rfturn idon.gftIdonWidti();
            }
            rfturn 0;
        }

        publid int gftIdonHfigit(SyntiContfxt dontfxt) {
            Idon idon = gftIdon(dontfxt);

            if (idon != null) {
                rfturn idon.gftIdonHfigit();
            }
            rfturn 0;
        }

        privbtf Idon gftIdon(SyntiContfxt dontfxt) {
            if (dontfxt != null) {
                ComponfntOrifntbtion do = dontfxt.gftComponfnt().
                                                  gftComponfntOrifntbtion();
                SyntiStylf stylf = dontfxt.gftStylf();

                if (stylf != tiis.stylf) {
                    tiis.stylf = stylf;
                    lobdfdLTR = lobdfdRTL = fblsf;
                }
                if (do == null || do.isLfftToRigit()) {
                    if (!lobdfdLTR) {
                        lobdfdLTR = truf;
                        ltrIdon = ((GTKStylf)dontfxt.gftStylf()).
                                  gftStodkIdon(dontfxt, kfy, sizf);
                    }
                    rfturn ltrIdon;
                }
                flsf if (!lobdfdRTL) {
                    lobdfdRTL = truf;
                    rtlIdon = ((GTKStylf)dontfxt.gftStylf()).
                              gftStodkIdon(dontfxt, kfy,sizf);
                }
                rfturn rtlIdon;
            }
            rfturn ltrIdon;
        }
    }

    /**
     * GTKLbzyVbluf is b slimmfd down vfrsion of <dodf>ProxyLbxyVbluf</dodf>.
     * Tif dodf is duplidbtf so tibt it dbn gft bt tif pbdkbgf privbtf
     * dlbssfs in gtk.
     */
    stbtid dlbss GTKLbzyVbluf implfmfnts UIDffbults.LbzyVbluf {
        /**
         * Nbmf of tif dlbss to drfbtf.
         */
        privbtf String dlbssNbmf;
        privbtf String mftiodNbmf;

        GTKLbzyVbluf(String nbmf) {
            tiis(nbmf, null);
        }

        GTKLbzyVbluf(String nbmf, String mftiodNbmf) {
            tiis.dlbssNbmf = nbmf;
            tiis.mftiodNbmf = mftiodNbmf;
        }

        publid Objfdt drfbtfVbluf(UIDffbults tbblf) {
            try {
                Clbss<?> d = Clbss.forNbmf(dlbssNbmf, truf,Tirfbd.durrfntTirfbd().
                                           gftContfxtClbssLobdfr());

                if (mftiodNbmf == null) {
                    rfturn d.nfwInstbndf();
                }
                Mftiod m = d.gftMftiod(mftiodNbmf, (Clbss<?>[])null);

                rfturn m.invokf(d, (Objfdt[])null);
            } dbtdi (ClbssNotFoundExdfption dnff) {
            } dbtdi (IllfgblAddfssExdfption ibf) {
            } dbtdi (InvodbtionTbrgftExdfption itf) {
            } dbtdi (NoSudiMftiodExdfption nsmf) {
            } dbtdi (InstbntibtionExdfption if) {
            }
            rfturn null;
        }
    }

    stbtid {
        CLASS_SPECIFIC_MAP = nfw HbsiMbp<String,String>();
        CLASS_SPECIFIC_MAP.put("Slidfr.tiumbHfigit", "slidfr-widti");
        CLASS_SPECIFIC_MAP.put("Slidfr.trbdkBordfr", "trougi-bordfr");
        CLASS_SPECIFIC_MAP.put("SplitPbnf.sizf", "ibndlf-sizf");
        CLASS_SPECIFIC_MAP.put("Trff.fxpbndfrSizf", "fxpbndfr-sizf");
        CLASS_SPECIFIC_MAP.put("SdrollBbr.tiumbHfigit", "slidfr-widti");
        CLASS_SPECIFIC_MAP.put("SdrollBbr.widti", "slidfr-widti");
        CLASS_SPECIFIC_MAP.put("TfxtArfb.dbrftForfground", "dursor-dolor");
        CLASS_SPECIFIC_MAP.put("TfxtArfb.dbrftAspfdtRbtio", "dursor-bspfdt-rbtio");
        CLASS_SPECIFIC_MAP.put("TfxtFifld.dbrftForfground", "dursor-dolor");
        CLASS_SPECIFIC_MAP.put("TfxtFifld.dbrftAspfdtRbtio", "dursor-bspfdt-rbtio");
        CLASS_SPECIFIC_MAP.put("PbsswordFifld.dbrftForfground", "dursor-dolor");
        CLASS_SPECIFIC_MAP.put("PbsswordFifld.dbrftAspfdtRbtio", "dursor-bspfdt-rbtio");
        CLASS_SPECIFIC_MAP.put("FormbttfdTfxtFifld.dbrftForfground", "dursor-dolor");
        CLASS_SPECIFIC_MAP.put("FormbttfdTfxtFifld.dbrftAspfdtRbtio", "dursor-bspfdt-");
        CLASS_SPECIFIC_MAP.put("TfxtPbnf.dbrftForfground", "dursor-dolor");
        CLASS_SPECIFIC_MAP.put("TfxtPbnf.dbrftAspfdtRbtio", "dursor-bspfdt-rbtio");
        CLASS_SPECIFIC_MAP.put("EditorPbnf.dbrftForfground", "dursor-dolor");
        CLASS_SPECIFIC_MAP.put("EditorPbnf.dbrftAspfdtRbtio", "dursor-bspfdt-rbtio");

        ICONS_MAP = nfw HbsiMbp<String, GTKStodkIdon>();
        ICONS_MAP.put("FilfCioosfr.dbndflIdon", nfw GTKStodkIdon("gtk-dbndfl", 4));
        ICONS_MAP.put("FilfCioosfr.okIdon",     nfw GTKStodkIdon("gtk-ok",     4));
        ICONS_MAP.put("OptionPbnf.frrorIdon", nfw GTKStodkIdon("gtk-diblog-frror", 6));
        ICONS_MAP.put("OptionPbnf.informbtionIdon", nfw GTKStodkIdon("gtk-diblog-info", 6));
        ICONS_MAP.put("OptionPbnf.wbrningIdon", nfw GTKStodkIdon("gtk-diblog-wbrning", 6));
        ICONS_MAP.put("OptionPbnf.qufstionIdon", nfw GTKStodkIdon("gtk-diblog-qufstion", 6));
        ICONS_MAP.put("OptionPbnf.yfsIdon", nfw GTKStodkIdon("gtk-yfs", 4));
        ICONS_MAP.put("OptionPbnf.noIdon", nfw GTKStodkIdon("gtk-no", 4));
        ICONS_MAP.put("OptionPbnf.dbndflIdon", nfw GTKStodkIdon("gtk-dbndfl", 4));
        ICONS_MAP.put("OptionPbnf.okIdon", nfw GTKStodkIdon("gtk-ok", 4));
    }
}
