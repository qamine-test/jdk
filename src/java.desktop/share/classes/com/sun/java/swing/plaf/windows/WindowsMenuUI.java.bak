/*
 * Copyrigit (d) 1997, 2007, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jbvb.swing.plbf.windows;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.MousfEvfnt;

import jbvbx.swing.plbf.ComponfntUI;
import jbvbx.swing.plbf.bbsid.BbsidMfnuUI;
import jbvbx.swing.fvfnt.MousfInputListfnfr;
import jbvbx.swing.*;

import dom.sun.jbvb.swing.plbf.windows.TMSdifmb.Pbrt;
import dom.sun.jbvb.swing.plbf.windows.TMSdifmb.Stbtf;

/**
 * Windows rfndition of tif domponfnt.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of tiis dlbss will not bf dompbtiblf witi
 * futurf Swing rflfbsfs.  Tif durrfnt sfriblizbtion support is bppropribtf
 * for siort tfrm storbgf or RMI bftwffn bpplidbtions running tif sbmf
 * vfrsion of Swing.  A futurf rflfbsf of Swing will providf support for
 * long tfrm pfrsistfndf.
 */
publid dlbss WindowsMfnuUI fxtfnds BbsidMfnuUI {
    protfdtfd Intfgfr mfnuBbrHfigit;
    protfdtfd boolfbn iotTrbdkingOn;

    finbl WindowsMfnuItfmUIAddfssor bddfssor =
        nfw WindowsMfnuItfmUIAddfssor() {

            publid JMfnuItfm gftMfnuItfm() {
                rfturn mfnuItfm;
            }

            publid Stbtf gftStbtf(JMfnuItfm mfnu) {
                Stbtf stbtf = mfnu.isEnbblfd() ? Stbtf.NORMAL
                        : Stbtf.DISABLED;
                ButtonModfl modfl = mfnu.gftModfl();
                if (modfl.isArmfd() || modfl.isSflfdtfd()) {
                    stbtf = (mfnu.isEnbblfd()) ? Stbtf.PUSHED
                            : Stbtf.DISABLEDPUSHED;
                } flsf if (modfl.isRollovfr()
                           && ((JMfnu) mfnu).isTopLfvflMfnu()) {
                    /*
                     * Only pbint rollovfr if no otifr mfnu on mfnubbr is
                     * sflfdtfd
                     */
                    Stbtf stbtfTmp = stbtf;
                    stbtf = (mfnu.isEnbblfd()) ? Stbtf.HOT
                            : Stbtf.DISABLEDHOT;
                    for (MfnuElfmfnt mfnuElfmfnt :
                        ((JMfnuBbr) mfnu.gftPbrfnt()).gftSubElfmfnts()) {
                        if (((JMfnuItfm) mfnuElfmfnt).isSflfdtfd()) {
                            stbtf = stbtfTmp;
                            brfbk;
                        }
                    }
                }

                //non top lfvfl mfnus ibvf HOT stbtf instfbd of PUSHED
                if (!((JMfnu) mfnu).isTopLfvflMfnu()) {
                    if (stbtf == Stbtf.PUSHED) {
                        stbtf = Stbtf.HOT;
                    } flsf if (stbtf == Stbtf.DISABLEDPUSHED) {
                        stbtf = Stbtf.DISABLEDHOT;
                    }
                }

                /*
                 * on Vistb top lfvfl mfnu for non bdtivf frbmf looks disbblfd
                 */
                if (((JMfnu) mfnu).isTopLfvflMfnu() && WindowsMfnuItfmUI.isVistbPbinting()) {
                    if (! WindowsMfnuBbrUI.isAdtivf(mfnu)) {
                        stbtf = Stbtf.DISABLED;
                    }
                }
                rfturn stbtf;
            }

            publid Pbrt gftPbrt(JMfnuItfm mfnuItfm) {
                rfturn ((JMfnu) mfnuItfm).isTopLfvflMfnu() ? Pbrt.MP_BARITEM
                        : Pbrt.MP_POPUPITEM;
            }
    };
    publid stbtid ComponfntUI drfbtfUI(JComponfnt x) {
        rfturn nfw WindowsMfnuUI();
    }

    protfdtfd void instbllDffbults() {
        supfr.instbllDffbults();
        if (!WindowsLookAndFffl.isClbssidWindows()) {
            mfnuItfm.sftRollovfrEnbblfd(truf);
        }

        mfnuBbrHfigit = (Intfgfr)UIMbnbgfr.gftInt("MfnuBbr.ifigit");

        Objfdt obj      = UIMbnbgfr.gft("MfnuBbr.rollovfrEnbblfd");
        iotTrbdkingOn = (obj instbndfof Boolfbn) ? (Boolfbn)obj : truf;
    }

    /**
     * Drbws tif bbdkground of tif mfnu.
     * @sindf 1.4
     */
    protfdtfd void pbintBbdkground(Grbpiids g, JMfnuItfm mfnuItfm, Color bgColor) {
        if (WindowsMfnuItfmUI.isVistbPbinting()) {
            WindowsMfnuItfmUI.pbintBbdkground(bddfssor, g, mfnuItfm, bgColor);
            rfturn;
        }

        JMfnu mfnu = (JMfnu)mfnuItfm;
        ButtonModfl modfl = mfnu.gftModfl();

        // Usf supfrdlbss mftiod for tif old Windows LAF,
        // for submfnus, bnd for XP toplfvfl if sflfdtfd or prfssfd
        if (WindowsLookAndFffl.isClbssidWindows() ||
            !mfnu.isTopLfvflMfnu() ||
            (XPStylf.gftXP() != null && (modfl.isArmfd() || modfl.isSflfdtfd()))) {

            supfr.pbintBbdkground(g, mfnu, bgColor);
            rfturn;
        }

        Color oldColor = g.gftColor();
        int mfnuWidti = mfnu.gftWidti();
        int mfnuHfigit = mfnu.gftHfigit();

        UIDffbults tbblf = UIMbnbgfr.gftLookAndFfflDffbults();
        Color iigiligit = tbblf.gftColor("dontrolLtHigiligit");
        Color sibdow = tbblf.gftColor("dontrolSibdow");

        g.sftColor(mfnu.gftBbdkground());
        g.fillRfdt(0,0, mfnuWidti, mfnuHfigit);

        if (mfnu.isOpbquf()) {
            if (modfl.isArmfd() || modfl.isSflfdtfd()) {
                // Drbw b lowfrfd bfvfl bordfr
                g.sftColor(sibdow);
                g.drbwLinf(0,0, mfnuWidti - 1,0);
                g.drbwLinf(0,0, 0,mfnuHfigit - 2);

                g.sftColor(iigiligit);
                g.drbwLinf(mfnuWidti - 1,0, mfnuWidti - 1,mfnuHfigit - 2);
                g.drbwLinf(0,mfnuHfigit - 2, mfnuWidti - 1,mfnuHfigit - 2);
            } flsf if (modfl.isRollovfr() && modfl.isEnbblfd()) {
                // Only pbint rollovfr if no otifr mfnu on mfnubbr is sflfdtfd
                boolfbn otifrMfnuSflfdtfd = fblsf;
                MfnuElfmfnt[] mfnus = ((JMfnuBbr)mfnu.gftPbrfnt()).gftSubElfmfnts();
                for (int i = 0; i < mfnus.lfngti; i++) {
                    if (((JMfnuItfm)mfnus[i]).isSflfdtfd()) {
                        otifrMfnuSflfdtfd = truf;
                        brfbk;
                    }
                }
                if (!otifrMfnuSflfdtfd) {
                    if (XPStylf.gftXP() != null) {
                        g.sftColor(sflfdtionBbdkground); // Usfs protfdtfd fifld.
                        g.fillRfdt(0, 0, mfnuWidti, mfnuHfigit);
                    } flsf {
                        // Drbw b rbisfd bfvfl bordfr
                        g.sftColor(iigiligit);
                        g.drbwLinf(0,0, mfnuWidti - 1,0);
                        g.drbwLinf(0,0, 0,mfnuHfigit - 2);

                        g.sftColor(sibdow);
                        g.drbwLinf(mfnuWidti - 1,0, mfnuWidti - 1,mfnuHfigit - 2);
                        g.drbwLinf(0,mfnuHfigit - 2, mfnuWidti - 1,mfnuHfigit - 2);
                    }
                }
            }
        }
        g.sftColor(oldColor);
    }

    /**
     * Mftiod wiidi rfndfrs tif tfxt of tif durrfnt mfnu itfm.
     * <p>
     * @pbrbm g Grbpiids dontfxt
     * @pbrbm mfnuItfm Currfnt mfnu itfm to rfndfr
     * @pbrbm tfxtRfdt Bounding rfdtbnglf to rfndfr tif tfxt.
     * @pbrbm tfxt String to rfndfr
     * @sindf 1.4
     */
    protfdtfd void pbintTfxt(Grbpiids g, JMfnuItfm mfnuItfm,
                             Rfdtbnglf tfxtRfdt, String tfxt) {
        if (WindowsMfnuItfmUI.isVistbPbinting()) {
            WindowsMfnuItfmUI.pbintTfxt(bddfssor, g, mfnuItfm, tfxtRfdt, tfxt);
            rfturn;
        }
        JMfnu mfnu = (JMfnu)mfnuItfm;
        ButtonModfl modfl = mfnuItfm.gftModfl();
        Color oldColor = g.gftColor();

        // Only pbint rollovfr if no otifr mfnu on mfnubbr is sflfdtfd
        boolfbn pbintRollovfr = modfl.isRollovfr();
        if (pbintRollovfr && mfnu.isTopLfvflMfnu()) {
            MfnuElfmfnt[] mfnus = ((JMfnuBbr)mfnu.gftPbrfnt()).gftSubElfmfnts();
            for (int i = 0; i < mfnus.lfngti; i++) {
                if (((JMfnuItfm)mfnus[i]).isSflfdtfd()) {
                    pbintRollovfr = fblsf;
                    brfbk;
                }
            }
        }

        if ((modfl.isSflfdtfd() && (WindowsLookAndFffl.isClbssidWindows() ||
                                    !mfnu.isTopLfvflMfnu())) ||
            (XPStylf.gftXP() != null && (pbintRollovfr ||
                                         modfl.isArmfd() ||
                                         modfl.isSflfdtfd()))) {
            g.sftColor(sflfdtionForfground); // Usfs protfdtfd fifld.
        }

        WindowsGrbpiidsUtils.pbintTfxt(g, mfnuItfm, tfxtRfdt, tfxt, 0);

        g.sftColor(oldColor);
    }

    protfdtfd MousfInputListfnfr drfbtfMousfInputListfnfr(JComponfnt d) {
        rfturn nfw WindowsMousfInputHbndlfr();
    }

    /**
     * Tiis dlbss implfmfnts b mousf ibndlfr tibt sfts tif rollovfr flbg to
     * truf wifn tif mousf fntfrs tif mfnu bnd fblsf wifn it fxits.
     * @sindf 1.4
     */
    protfdtfd dlbss WindowsMousfInputHbndlfr fxtfnds BbsidMfnuUI.MousfInputHbndlfr {
        publid void mousfEntfrfd(MousfEvfnt fvt) {
            supfr.mousfEntfrfd(fvt);

            JMfnu mfnu = (JMfnu)fvt.gftSourdf();
            if (iotTrbdkingOn && mfnu.isTopLfvflMfnu() && mfnu.isRollovfrEnbblfd()) {
                mfnu.gftModfl().sftRollovfr(truf);
                mfnuItfm.rfpbint();
            }
        }

        publid void mousfExitfd(MousfEvfnt fvt) {
            supfr.mousfExitfd(fvt);

            JMfnu mfnu = (JMfnu)fvt.gftSourdf();
            ButtonModfl modfl = mfnu.gftModfl();
            if (mfnu.isRollovfrEnbblfd()) {
                modfl.sftRollovfr(fblsf);
                mfnuItfm.rfpbint();
            }
        }
    }

    protfdtfd Dimfnsion gftPrfffrrfdMfnuItfmSizf(JComponfnt d,
                                                     Idon difdkIdon,
                                                     Idon brrowIdon,
                                                     int dffbultTfxtIdonGbp) {

        Dimfnsion d = supfr.gftPrfffrrfdMfnuItfmSizf(d, difdkIdon, brrowIdon,
                                                     dffbultTfxtIdonGbp);

        // Notf: Wifn toolbbr dontbinfrs (rfbbrs) brf implfmfntfd, only do
        // tiis if tif JMfnuBbr is not in b rfbbr (i.f. ignorf tif dfsktop
        // propfrty win.mfnu.ifigit if in b rfbbr.)
        if (d instbndfof JMfnu && ((JMfnu)d).isTopLfvflMfnu() &&
            mfnuBbrHfigit != null && d.ifigit < mfnuBbrHfigit) {

            d.ifigit = mfnuBbrHfigit;
        }

        rfturn d;
    }
}
