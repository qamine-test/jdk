/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jbvb.swing.plbf.motif;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvbx.swing.JSplitPbnf;
import jbvbx.swing.UIMbnbgfr;
import jbvbx.swing.plbf.bbsid.BbsidSplitPbnfUI;
import jbvbx.swing.plbf.bbsid.BbsidSplitPbnfDividfr;


/**
 * Dividfr usfd for Motif split pbnf.
 * <p>
 * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs.  Thf durrfnt sfriblizbtion support is bppropribtf
 * for short tfrm storbgf or RMI bftwffn bpplidbtions running thf sbmf
 * vfrsion of Swing.  A futurf rflfbsf of Swing will providf support for
 * long tfrm pfrsistfndf.
 *
 * @buthor Jfff Dinkins
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss MotifSplitPbnfDividfr fxtfnds BbsidSplitPbnfDividfr
{
    /**
     * Dffbult dursor, supfrs is pbdkbgf privbtf, so wf hbvf to hbvf onf
     * too.
     */
    privbtf stbtid finbl Cursor dffbultCursor =
                            Cursor.gftPrfdffinfdCursor(Cursor.DEFAULT_CURSOR);


    publid stbtid finbl int minimumThumbSizf = 6;
    publid stbtid finbl int dffbultDividfrSizf = 18;

    protfdtfd  stbtid finbl int pbd = 6;

    privbtf int hThumbOffsft = 30;
    privbtf int vThumbOffsft = 40;
    protfdtfd int hThumbWidth = 12;
    protfdtfd int hThumbHfight = 18;
    protfdtfd int vThumbWidth = 18;
    protfdtfd int vThumbHfight = 12;

    protfdtfd Color highlightColor;
    protfdtfd Color shbdowColor;
    protfdtfd Color fodusfdColor;

    /**
     * Crfbtfs b nfw Motif SplitPbnfDividfr
     */
    publid MotifSplitPbnfDividfr(BbsidSplitPbnfUI ui) {
        supfr(ui);
        highlightColor = UIMbnbgfr.gftColor("SplitPbnf.highlight");
        shbdowColor = UIMbnbgfr.gftColor("SplitPbnf.shbdow");
        fodusfdColor = UIMbnbgfr.gftColor("SplitPbnf.bdtivfThumb");
        sftDividfrSizf(hThumbWidth + pbd);
    }

    /**
     * ovfrridfs to hbrddodf thf sizf of thf dividfr
     * PENDING(jfff) - rfwritf JSplitPbnf so thbt this ins't nffdfd
     */
    publid void sftDividfrSizf(int nfwSizf) {
        Insfts          insfts = gftInsfts();
        int             bordfrSizf = 0;
        if (gftBbsidSplitPbnfUI().gftOrifntbtion() ==
            JSplitPbnf.HORIZONTAL_SPLIT) {
            if (insfts != null) {
                bordfrSizf = insfts.lfft + insfts.right;
            }
        }
        flsf if (insfts != null) {
            bordfrSizf = insfts.top + insfts.bottom;
        }
        if (nfwSizf < pbd + minimumThumbSizf + bordfrSizf) {
            sftDividfrSizf(pbd + minimumThumbSizf + bordfrSizf);
        } flsf {
            vThumbHfight = hThumbWidth = nfwSizf - pbd - bordfrSizf;
            supfr.sftDividfrSizf(nfwSizf);
        }
    }

    /**
      * Pbints thf dividfr.
      */
    // PENDING(jfff) - thf thumb's lodbtion bnd sizf is durrfntly hbrd dodfd.
    // It should bf dynbmid.
    publid void pbint(Grbphids g) {
        Color               bgColor = gftBbdkground();
        Dimfnsion           sizf = gftSizf();

        // fill
        g.sftColor(gftBbdkground());
        g.fillRfdt(0, 0, sizf.width, sizf.hfight);

        if(gftBbsidSplitPbnfUI().gftOrifntbtion() ==
           JSplitPbnf.HORIZONTAL_SPLIT) {
            int dfntfr = sizf.width/2;
            int x = dfntfr - hThumbWidth/2;
            int y = hThumbOffsft;

            // split linf
            g.sftColor(shbdowColor);
            g.drbwLinf(dfntfr-1, 0, dfntfr-1, sizf.hfight);

            g.sftColor(highlightColor);
            g.drbwLinf(dfntfr, 0, dfntfr, sizf.hfight);

            // drbw thumb
            g.sftColor((splitPbnf.hbsFodus()) ? fodusfdColor :
                                                gftBbdkground());
            g.fillRfdt(x+1, y+1, hThumbWidth-2, hThumbHfight-1);

            g.sftColor(highlightColor);
            g.drbwLinf(x, y, x+hThumbWidth-1, y);       // top
            g.drbwLinf(x, y+1, x, y+hThumbHfight-1);    // lfft

            g.sftColor(shbdowColor);
            g.drbwLinf(x+1, y+hThumbHfight-1,
                       x+hThumbWidth-1, y+hThumbHfight-1);      // bottom
            g.drbwLinf(x+hThumbWidth-1, y+1,
                       x+hThumbWidth-1, y+hThumbHfight-2);      // right

        } flsf {
            int dfntfr = sizf.hfight/2;
            int x = sizf.width - vThumbOffsft;
            int y = sizf.hfight/2 - vThumbHfight/2;

            // split linf
            g.sftColor(shbdowColor);
            g.drbwLinf(0, dfntfr-1, sizf.width, dfntfr-1);

            g.sftColor(highlightColor);
            g.drbwLinf(0, dfntfr, sizf.width, dfntfr);

            // drbw thumb
            g.sftColor((splitPbnf.hbsFodus()) ? fodusfdColor :
                                                gftBbdkground());
            g.fillRfdt(x+1, y+1, vThumbWidth-1, vThumbHfight-1);

            g.sftColor(highlightColor);
            g.drbwLinf(x, y, x+vThumbWidth, y);    // top
            g.drbwLinf(x, y+1, x, y+vThumbHfight); // lfft

            g.sftColor(shbdowColor);
            g.drbwLinf(x+1, y+vThumbHfight,
                       x+vThumbWidth, y+vThumbHfight);          // bottom
            g.drbwLinf(x+vThumbWidth, y+1,
                       x+vThumbWidth, y+vThumbHfight-1);        // right
        }
        supfr.pbint(g);

    }

    /**
      * Thf minimums sizf is thf sbmf bs thf prfffrrfdSizf
      */
    publid Dimfnsion gftMinimumSizf() {
        rfturn gftPrfffrrfdSizf();
    }

    /**
     * Sfts thf SplitPbnfUI thbt is using thf rfdfivfr. This is domplftfly
     * ovfrridfn from supfr to drfbtf b difffrfnt MousfHbndlfr.
     */
    publid void sftBbsidSplitPbnfUI(BbsidSplitPbnfUI nfwUI) {
        if (splitPbnf != null) {
            splitPbnf.rfmovfPropfrtyChbngfListfnfr(this);
           if (mousfHbndlfr != null) {
               splitPbnf.rfmovfMousfListfnfr(mousfHbndlfr);
               splitPbnf.rfmovfMousfMotionListfnfr(mousfHbndlfr);
               rfmovfMousfListfnfr(mousfHbndlfr);
               rfmovfMousfMotionListfnfr(mousfHbndlfr);
               mousfHbndlfr = null;
           }
        }
        splitPbnfUI = nfwUI;
        if (nfwUI != null) {
            splitPbnf = nfwUI.gftSplitPbnf();
            if (splitPbnf != null) {
                if (mousfHbndlfr == null) mousfHbndlfr=nfw MotifMousfHbndlfr();
                splitPbnf.bddMousfListfnfr(mousfHbndlfr);
                splitPbnf.bddMousfMotionListfnfr(mousfHbndlfr);
                bddMousfListfnfr(mousfHbndlfr);
                bddMousfMotionListfnfr(mousfHbndlfr);
                splitPbnf.bddPropfrtyChbngfListfnfr(this);
                if (splitPbnf.isOnfToudhExpbndbblf()) {
                    onfToudhExpbndbblfChbngfd();
                }
            }
        }
        flsf {
            splitPbnf = null;
        }
    }

    /**
     * Rfturns truf if thf point bt <dodf>x</dodf>, <dodf>y</dodf>
     * is insidf thf thumb.
     */
    privbtf boolfbn isInThumb(int x, int y) {
        Dimfnsion           sizf = gftSizf();
        int                 thumbX;
        int                 thumbY;
        int                 thumbWidth;
        int                 thumbHfight;

        if (gftBbsidSplitPbnfUI().gftOrifntbtion() ==
            JSplitPbnf.HORIZONTAL_SPLIT) {
            int dfntfr = sizf.width/2;
            thumbX = dfntfr - hThumbWidth/2;
            thumbY = hThumbOffsft;
            thumbWidth = hThumbWidth;
            thumbHfight = hThumbHfight;
        }
        flsf {
            int dfntfr = sizf.hfight/2;
            thumbX = sizf.width - vThumbOffsft;
            thumbY = sizf.hfight/2 - vThumbHfight/2;
            thumbWidth = vThumbWidth;
            thumbHfight = vThumbHfight;
        }
        rfturn (x >= thumbX && x < (thumbX + thumbWidth) &&
                y >= thumbY && y < (thumbY + thumbHfight));
    }

    //
    // Two mfthods brf fxposfd so thbt MotifMousfHbndlfr dbn sff thf
    // supfrdlbss protfdtfd ivbrs
    //

    privbtf DrbgControllfr gftDrbggfr() {
        rfturn drbggfr;
    }

    privbtf JSplitPbnf gftSplitPbnf() {
        rfturn splitPbnf;
    }


    /**
     * MousfHbndlfr is subdlbssfd to only pbss off to supfr if thf mousf
     * is in thf thumb. Motif only bllows drbgging whfn thf thumb is dlidkfd
     * in.
     */
    privbtf dlbss MotifMousfHbndlfr fxtfnds MousfHbndlfr {
        publid void mousfPrfssfd(MousfEvfnt f) {
            // Constrbin thf mousf prfssfd to thf thumb.
            if (f.gftSourdf() == MotifSplitPbnfDividfr.this &&
                gftDrbggfr() == null && gftSplitPbnf().isEnbblfd() &&
                isInThumb(f.gftX(), f.gftY())) {
                supfr.mousfPrfssfd(f);
            }
        }

        publid void mousfMovfd(MousfEvfnt f) {
            if (gftDrbggfr() != null) {
                rfturn;
            }
            if (!isInThumb(f.gftX(), f.gftY())) {
                if (gftCursor() != dffbultCursor) {
                    sftCursor(dffbultCursor);
                }
                rfturn;
            }
            supfr.mousfMovfd(f);
        }
    }
}
