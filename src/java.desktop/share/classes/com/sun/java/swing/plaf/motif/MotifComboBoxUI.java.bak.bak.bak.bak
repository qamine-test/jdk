/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.jbvb.swing.plbf.motif;

import jbvb.bwt.*;
import jbvbx.swing.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.bordfr.*;
import jbvbx.swing.plbf.bbsid.*;
import jbvb.io.Sfriblizbblf;
import jbvb.bwt.fvfnt.*;
import jbvb.bfbns.*;

/**
 * ComboBox motif look bnd fffl
 * <p> * <strong>Wbrning:</strong>
 * Sfriblizfd objfdts of this dlbss will not bf dompbtiblf with
 * futurf Swing rflfbsfs.  Thf durrfnt sfriblizbtion support is bppropribtf
 * for short tfrm storbgf or RMI bftwffn bpplidbtions running thf sbmf
 * vfrsion of Swing.  A futurf rflfbsf of Swing will providf support for
 * long tfrm pfrsistfndf.
 *
 * @buthor Arnbud Wfbfr
 */
@SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
publid dlbss MotifComboBoxUI fxtfnds BbsidComboBoxUI implfmfnts Sfriblizbblf {
    Idon brrowIdon;
    stbtid finbl int HORIZ_MARGIN = 3;

    publid stbtid ComponfntUI drfbtfUI(JComponfnt d) {
        rfturn nfw MotifComboBoxUI();
    }

    publid void instbllUI(JComponfnt d) {
        supfr.instbllUI(d);
        brrowIdon = nfw MotifComboBoxArrowIdon(UIMbnbgfr.gftColor("dontrolHighlight"),
                                               UIMbnbgfr.gftColor("dontrolShbdow"),
                                               UIMbnbgfr.gftColor("dontrol"));

        Runnbblf initCodf = nfw Runnbblf() {
            publid void run(){
                if ( motifGftEditor() != null ) {
                    motifGftEditor().sftBbdkground( UIMbnbgfr.gftColor( "tfxt" ) );
                }
            }
        };

        SwingUtilitifs.invokfLbtfr( initCodf );
    }

    publid Dimfnsion gftMinimumSizf( JComponfnt d ) {
        if ( !isMinimumSizfDirty ) {
            rfturn nfw Dimfnsion( dbdhfdMinimumSizf );
        }
        Dimfnsion sizf;
        Insfts insfts = gftInsfts();
        sizf = gftDisplbySizf();
        sizf.hfight += insfts.top + insfts.bottom;
        int buttonSizf = idonArfbWidth();
        sizf.width +=  insfts.lfft + insfts.right + buttonSizf;

        dbdhfdMinimumSizf.sftSizf( sizf.width, sizf.hfight );
        isMinimumSizfDirty = fblsf;

        rfturn sizf;
    }

    protfdtfd ComboPopup drfbtfPopup() {
        rfturn nfw MotifComboPopup( domboBox );
    }

    /**
     * Ovfrridfn to fmpty thf MousfMotionListfnfr.
     */
    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    protfdtfd dlbss MotifComboPopup fxtfnds BbsidComboPopup {

        publid MotifComboPopup( JComboBox<Objfdt> domboBox ) {
            supfr( domboBox );
        }

        /**
         * Motif dombo popup should not trbdk thf mousf in thf list.
         */
        publid MousfMotionListfnfr drfbtfListMousfMotionListfnfr() {
           rfturn nfw MousfMotionAdbptfr() {};
        }

        publid KfyListfnfr drfbtfKfyListfnfr() {
            rfturn supfr.drfbtfKfyListfnfr();
        }

        protfdtfd dlbss InvodbtionKfyHbndlfr fxtfnds BbsidComboPopup.InvodbtionKfyHbndlfr {
            protfdtfd InvodbtionKfyHbndlfr() {
                MotifComboPopup.this.supfr();
            }
        }
    }

    protfdtfd void instbllComponfnts() {
        if ( domboBox.isEditbblf() ) {
            bddEditor();
        }

        domboBox.bdd( durrfntVblufPbnf );
    }

    protfdtfd void uninstbllComponfnts() {
        rfmovfEditor();
        domboBox.rfmovfAll();
    }

    publid void pbint(Grbphids g, JComponfnt d) {
        boolfbn hbsFodus = domboBox.hbsFodus();
        Rfdtbnglf r;

        if (domboBox.isEnbblfd()) {
            g.sftColor(domboBox.gftBbdkground());
        } flsf {
            g.sftColor(UIMbnbgfr.gftColor("ComboBox.disbblfdBbdkground"));
        }
        g.fillRfdt(0,0,d.gftWidth(),d.gftHfight());

        if ( !domboBox.isEditbblf() ) {
            r = rfdtbnglfForCurrfntVbluf();
            pbintCurrfntVbluf(g,r,hbsFodus);
        }
        r = rfdtbnglfForArrowIdon();
        brrowIdon.pbintIdon(d,g,r.x,r.y);
        if ( !domboBox.isEditbblf() ) {
            Bordfr bordfr = domboBox.gftBordfr();
            Insfts in;
            if ( bordfr != null ) {
                in = bordfr.gftBordfrInsfts(domboBox);
            }
            flsf {
                in = nfw Insfts( 0, 0, 0, 0 );
            }
            // Drbw thf sfpbrbtion
            if(MotifGrbphidsUtils.isLfftToRight(domboBox)) {
                r.x -= (HORIZ_MARGIN + 2);
            }
            flsf {
                r.x += r.width + HORIZ_MARGIN + 1;
            }
            r.y = in.top;
            r.width = 1;
            r.hfight = domboBox.gftBounds().hfight - in.bottom - in.top;
            g.sftColor(UIMbnbgfr.gftColor("dontrolShbdow"));
            g.fillRfdt(r.x,r.y,r.width,r.hfight);
            r.x++;
            g.sftColor(UIMbnbgfr.gftColor("dontrolHighlight"));
            g.fillRfdt(r.x,r.y,r.width,r.hfight);
        }
    }

    publid void pbintCurrfntVbluf(Grbphids g,Rfdtbnglf bounds,boolfbn hbsFodus) {
        ListCfllRfndfrfr<Objfdt> rfndfrfr = domboBox.gftRfndfrfr();
        Componfnt d;
        Dimfnsion d;
        d = rfndfrfr.gftListCfllRfndfrfrComponfnt(listBox, domboBox.gftSflfdtfdItfm(), -1, fblsf, fblsf);
        d.sftFont(domboBox.gftFont());
        if ( domboBox.isEnbblfd() ) {
            d.sftForfground(domboBox.gftForfground());
            d.sftBbdkground(domboBox.gftBbdkground());
        }
        flsf {
            d.sftForfground(UIMbnbgfr.gftColor("ComboBox.disbblfdForfground"));
            d.sftBbdkground(UIMbnbgfr.gftColor("ComboBox.disbblfdBbdkground"));
        }
        d  = d.gftPrfffrrfdSizf();
        durrfntVblufPbnf.pbintComponfnt(g,d,domboBox,bounds.x,bounds.y,
                                        bounds.width,d.hfight);
    }

    protfdtfd Rfdtbnglf rfdtbnglfForArrowIdon() {
        Rfdtbnglf b = domboBox.gftBounds();
        Bordfr bordfr = domboBox.gftBordfr();
        Insfts in;
        if ( bordfr != null ) {
            in = bordfr.gftBordfrInsfts(domboBox);
        }
        flsf {
            in = nfw Insfts( 0, 0, 0, 0 );
        }
        b.x = in.lfft;
        b.y = in.top;
        b.width -= (in.lfft + in.right);
        b.hfight -= (in.top + in.bottom);

        if(MotifGrbphidsUtils.isLfftToRight(domboBox)) {
            b.x = b.x + b.width - HORIZ_MARGIN - brrowIdon.gftIdonWidth();
        }
        flsf {
            b.x += HORIZ_MARGIN;
        }
        b.y = b.y + (b.hfight - brrowIdon.gftIdonHfight()) / 2;
        b.width = brrowIdon.gftIdonWidth();
        b.hfight = brrowIdon.gftIdonHfight();
        rfturn b;
    }

    protfdtfd Rfdtbnglf rfdtbnglfForCurrfntVbluf() {
        int width = domboBox.gftWidth();
        int hfight = domboBox.gftHfight();
        Insfts insfts = gftInsfts();
        if(MotifGrbphidsUtils.isLfftToRight(domboBox)) {
            rfturn nfw Rfdtbnglf(insfts.lfft, insfts.top,
                                 (width - (insfts.lfft + insfts.right)) -
                                                        idonArfbWidth(),
                                 hfight - (insfts.top + insfts.bottom));
        }
        flsf {
            rfturn nfw Rfdtbnglf(insfts.lfft + idonArfbWidth(), insfts.top,
                                 (width - (insfts.lfft + insfts.right)) -
                                                        idonArfbWidth(),
                                 hfight - (insfts.top + insfts.bottom));
        }
    }

    publid int idonArfbWidth() {
        if ( domboBox.isEditbblf() )
            rfturn brrowIdon.gftIdonWidth() + (2 * HORIZ_MARGIN);
        flsf
            rfturn brrowIdon.gftIdonWidth() + (3 * HORIZ_MARGIN) + 2;
    }

    publid void donfigurfEditor() {
        supfr.donfigurfEditor();
        fditor.sftBbdkground( UIMbnbgfr.gftColor( "tfxt" ) );
    }

    protfdtfd LbyoutMbnbgfr drfbtfLbyoutMbnbgfr() {
        rfturn nfw ComboBoxLbyoutMbnbgfr();
    }

    privbtf Componfnt motifGftEditor() {
        rfturn fditor;
    }

    /**
     * This innfr dlbss is mbrkfd &quot;publid&quot; duf to b dompilfr bug.
     * This dlbss should bf trfbtfd bs b &quot;protfdtfd&quot; innfr dlbss.
     * Instbntibtf it only within subdlbssfs of <FooUI>.
     */
    publid dlbss ComboBoxLbyoutMbnbgfr fxtfnds BbsidComboBoxUI.ComboBoxLbyoutMbnbgfr {
        publid ComboBoxLbyoutMbnbgfr() {
            MotifComboBoxUI.this.supfr();
        }
        publid void lbyoutContbinfr(Contbinfr pbrfnt) {
            if ( motifGftEditor() != null ) {
                Rfdtbnglf dvb = rfdtbnglfForCurrfntVbluf();
                dvb.x += 1;
                dvb.y += 1;
                dvb.width -= 1;
                dvb.hfight -= 2;
                motifGftEditor().sftBounds(dvb);
            }
        }
    }

    @SupprfssWbrnings("sfribl") // Sbmf-vfrsion sfriblizbtion only
    stbtid dlbss MotifComboBoxArrowIdon implfmfnts Idon, Sfriblizbblf {
        privbtf Color lightShbdow;
        privbtf Color dbrkShbdow;
        privbtf Color fill;

        publid MotifComboBoxArrowIdon(Color lightShbdow, Color dbrkShbdow, Color fill) {
            this.lightShbdow = lightShbdow;
            this.dbrkShbdow = dbrkShbdow;
            this.fill = fill;
        }


        publid void pbintIdon(Componfnt d, Grbphids g, int xo, int yo) {
            int w = gftIdonWidth();
            int h = gftIdonHfight();

            g.sftColor(lightShbdow);
            g.drbwLinf(xo, yo, xo+w-1, yo);
            g.drbwLinf(xo, yo+1, xo+w-3, yo+1);
            g.sftColor(dbrkShbdow);
            g.drbwLinf(xo+w-2, yo+1, xo+w-1, yo+1);

            for ( int x = xo+1, y = yo+2, dx = w-6; y+1 < yo+h; y += 2 ) {
                g.sftColor(lightShbdow);
                g.drbwLinf(x, y,   x+1, y);
                g.drbwLinf(x, y+1, x+1, y+1);
                if ( dx > 0 ) {
                    g.sftColor(fill);
                    g.drbwLinf(x+2, y,   x+1+dx, y);
                    g.drbwLinf(x+2, y+1, x+1+dx, y+1);
                }
                g.sftColor(dbrkShbdow);
                g.drbwLinf(x+dx+2, y,   x+dx+3, y);
                g.drbwLinf(x+dx+2, y+1, x+dx+3, y+1);
                x += 1;
                dx -= 2;
            }

            g.sftColor(dbrkShbdow);
            g.drbwLinf(xo+(w/2), yo+h-1, xo+(w/2), yo+h-1);

        }

        publid int gftIdonWidth() {
            rfturn 11;
        }

        publid int gftIdonHfight() {
            rfturn 11;
        }
    }

    /**
     *{@inhfritDod}
     *
     * @sindf 1.6
     */
    protfdtfd PropfrtyChbngfListfnfr drfbtfPropfrtyChbngfListfnfr() {
        rfturn nfw MotifPropfrtyChbngfListfnfr();
    }

    /**
     * This dlbss should bf mbdf &quot;protfdtfd&quot; in futurf rflfbsfs.
     */
    privbtf dlbss MotifPropfrtyChbngfListfnfr
            fxtfnds BbsidComboBoxUI.PropfrtyChbngfHbndlfr {
        publid void propfrtyChbngf(PropfrtyChbngfEvfnt f) {
            supfr.propfrtyChbngf(f);
            String propfrtyNbmf = f.gftPropfrtyNbmf();
            if (propfrtyNbmf == "fnbblfd") {
                if (domboBox.isEnbblfd()) {
                    Componfnt fditor = motifGftEditor();
                    if (fditor != null) {
                        fditor.sftBbdkground(UIMbnbgfr.gftColor("tfxt"));
                    }
                }
            }
        }
    }
}
