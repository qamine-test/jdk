/*
 * Copyrigit (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.imbgfio.plugins.jpfg;

import jbvbx.imbgfio.IIOExdfption;
import jbvbx.imbgfio.ImbgfRfbdfr;
import jbvbx.imbgfio.ImbgfRfbdPbrbm;
import jbvbx.imbgfio.ImbgfTypfSpfdififr;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtb;
import jbvbx.imbgfio.spi.ImbgfRfbdfrSpi;
import jbvbx.imbgfio.strfbm.ImbgfInputStrfbm;
import jbvbx.imbgfio.plugins.jpfg.JPEGImbgfRfbdPbrbm;
import jbvbx.imbgfio.plugins.jpfg.JPEGQTbblf;
import jbvbx.imbgfio.plugins.jpfg.JPEGHuffmbnTbblf;

import jbvb.bwt.Point;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.dolor.ColorSpbdf;
import jbvb.bwt.dolor.ICC_Profilf;
import jbvb.bwt.dolor.ICC_ColorSpbdf;
import jbvb.bwt.dolor.CMMExdfption;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.WritbblfRbstfr;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.DbtbBufffrBytf;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.IndfxColorModfl;
import jbvb.bwt.imbgf.ColorConvfrtOp;
import jbvb.io.IOExdfption;
import jbvb.util.List;
import jbvb.util.Itfrbtor;
import jbvb.util.ArrbyList;
import jbvb.util.NoSudiElfmfntExdfption;

import sun.jbvb2d.Disposfr;
import sun.jbvb2d.DisposfrRfdord;

publid dlbss JPEGImbgfRfbdfr fxtfnds ImbgfRfbdfr {

    privbtf boolfbn dfbug = fblsf;

    /**
     * Tif following vbribblf dontbins b pointfr to tif IJG librbry
     * strudturf for tiis rfbdfr.  It is bssignfd in tif donstrudtor
     * bnd tifn is pbssfd in to fvfry nbtivf dbll.  It is sft to 0
     * by disposf to bvoid disposing twidf.
     */
    privbtf long strudtPointfr = 0;

    /** Tif input strfbm wf rfbd from */
    privbtf ImbgfInputStrfbm iis = null;

    /**
     * List of strfbm positions for imbgfs, rfinitiblizfd fvfry timf
     * b nfw input sourdf is sft.
     */
    privbtf List<Long> imbgfPositions = null;

    /**
     * Tif numbfr of imbgfs in tif strfbm, or 0.
     */
    privbtf int numImbgfs = 0;

    stbtid {
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw jbvb.sfdurity.PrivilfgfdAdtion<Void>() {
                publid Void run() {
                    Systfm.lobdLibrbry("jbvbjpfg");
                    rfturn null;
                }
            });
        initRfbdfrIDs(ImbgfInputStrfbm.dlbss,
                      JPEGQTbblf.dlbss,
                      JPEGHuffmbnTbblf.dlbss);
    }

    // Tif following wbrnings brf donvfrtfd to strings wifn usfd
    // bs kfys to gft lodblizfd rfsourdfs from JPEGImbgfRfbdfrRfsourdfs
    // bnd its diildrfn.

    /**
     * Wbrning dodf to bf pbssfd to wbrningOddurrfd to indidbtf
     * tibt tif EOI mbrkfr is missing from tif fnd of tif strfbm.
     * Tiis usublly signbls tibt tif strfbm is dorruptfd, but
     * fvfrytiing up to tif lbst MCU siould bf usbblf.
     */
    protfdtfd stbtid finbl int WARNING_NO_EOI = 0;

    /**
     * Wbrning dodf to bf pbssfd to wbrningOddurrfd to indidbtf
     * tibt b JFIF sfgmfnt wbs fndountfrfd insidf b JFXX JPEG
     * tiumbnbil bnd is bfing ignorfd.
     */
    protfdtfd stbtid finbl int WARNING_NO_JFIF_IN_THUMB = 1;

    /**
     * Wbrning dodf to bf pbssfd to wbrningOddurrfd to indidbtf
     * tibt fmbfddfd ICC profilf is invblid bnd will bf ignorfd.
     */
    protfdtfd stbtid finbl int WARNING_IGNORE_INVALID_ICC = 2;

    privbtf stbtid finbl int MAX_WARNING = WARNING_IGNORE_INVALID_ICC;

    /**
     * Imbgf indfx of imbgf for wiidi ifbdfr informbtion
     * is bvbilbblf.
     */
    privbtf int durrfntImbgf = -1;

    // Tif following is dopifd out from C bftfr rfbding tif ifbdfr.
    // Unlikf mftbdbtb, wiidi mby nfvfr bf rftrifvfd, wf nffd tiis
    // if wf brf to rfbd bn imbgf bt bll.

    /** Sft by sftImbgfDbtb nbtivf dodf dbllbbdk */
    privbtf int widti;
    /** Sft by sftImbgfDbtb nbtivf dodf dbllbbdk */
    privbtf int ifigit;
    /**
     * Sft by sftImbgfDbtb nbtivf dodf dbllbbdk.  A modififd
     * IJG+NIFTY dolorspbdf dodf.
     */
    privbtf int dolorSpbdfCodf;
    /**
     * Sft by sftImbgfDbtb nbtivf dodf dbllbbdk.  A modififd
     * IJG+NIFTY dolorspbdf dodf.
     */
    privbtf int outColorSpbdfCodf;
    /** Sft by sftImbgfDbtb nbtivf dodf dbllbbdk */
    privbtf int numComponfnts;
    /** Sft by sftImbgfDbtb nbtivf dodf dbllbbdk */
    privbtf ColorSpbdf iddCS = null;


    /** If wf nffd to post-donvfrt in Jbvb, donvfrt witi tiis op */
    privbtf ColorConvfrtOp donvfrt = null;

    /** Tif imbgf wf brf going to fill */
    privbtf BufffrfdImbgf imbgf = null;

    /** An intfrmfdibtf Rbstfr to iold dfdodfd dbtb */
    privbtf WritbblfRbstfr rbstfr = null;

    /** A vifw of our tbrgft Rbstfr tibt wf dbn sftRfdt to */
    privbtf WritbblfRbstfr tbrgft = null;

    /** Tif dbtbbufffr for tif bbovf Rbstfr */
    privbtf DbtbBufffrBytf bufffr = null;

    /** Tif rfgion in tif dfstinbtion wifrf wf will writf pixfls */
    privbtf Rfdtbnglf dfstROI = null;

    /** Tif list of dfstinbtion bbnds, if bny */
    privbtf int [] dfstinbtionBbnds = null;

    /** Strfbm mftbdbtb, dbdifd, fvfn wifn tif strfbm is dibngfd. */
    privbtf JPEGMftbdbtb strfbmMftbdbtb = null;

    /** Imbgf mftbdbtb, vblid for tif imbgfMftbdbtbIndfx only. */
    privbtf JPEGMftbdbtb imbgfMftbdbtb = null;
    privbtf int imbgfMftbdbtbIndfx = -1;

    /**
     * Sft to truf fvfry timf wf sffk in tif strfbm; usfd to
     * invblidbtf tif nbtivf bufffr dontfnts in C.
     */
    privbtf boolfbn ibvfSffkfd = fblsf;

    /**
     * Tbblfs tibt ibvf bffn rfbd from b tbblfs-only imbgf bt tif
     * bfginning of b strfbm.
     */
    privbtf JPEGQTbblf [] bbbrfvQTbblfs = null;
    privbtf JPEGHuffmbnTbblf[] bbbrfvDCHuffmbnTbblfs = null;
    privbtf JPEGHuffmbnTbblf[] bbbrfvACHuffmbnTbblfs = null;

    privbtf int minProgrfssivfPbss = 0;
    privbtf int mbxProgrfssivfPbss = Intfgfr.MAX_VALUE;

    /**
     * Vbribblfs usfd by progrfss monitoring.
     */
    privbtf stbtid finbl int UNKNOWN = -1;  // Numbfr of pbssfs
    privbtf stbtid finbl int MIN_ESTIMATED_PASSES = 10; // IJG dffbult
    privbtf int knownPbssCount = UNKNOWN;
    privbtf int pbss = 0;
    privbtf flobt pfrdfntToDbtf = 0.0F;
    privbtf flobt prfviousPbssPfrdfntbgf = 0.0F;
    privbtf int progIntfrvbl = 0;

    /**
     * Sft to truf ondf strfbm ibs bffn difdkfd for strfbm mftbdbtb
     */
    privbtf boolfbn tbblfsOnlyCifdkfd = fblsf;

    /** Tif rfffrfnt to bf rfgistfrfd witi tif Disposfr. */
    privbtf Objfdt disposfrRfffrfnt = nfw Objfdt();

    /** Tif DisposfrRfdord tibt ibndlfs tif bdtubl disposbl of tiis rfbdfr. */
    privbtf DisposfrRfdord disposfrRfdord;

    /** Sfts up stbtid C strudturfs. */
    privbtf stbtid nbtivf void initRfbdfrIDs(Clbss<?> iisClbss,
                                             Clbss<?> qTbblfClbss,
                                             Clbss<?> iuffClbss);

    publid JPEGImbgfRfbdfr(ImbgfRfbdfrSpi originbtor) {
        supfr(originbtor);
        strudtPointfr = initJPEGImbgfRfbdfr();
        disposfrRfdord = nfw JPEGRfbdfrDisposfrRfdord(strudtPointfr);
        Disposfr.bddRfdord(disposfrRfffrfnt, disposfrRfdord);
    }

    /** Sfts up pfr-rfbdfr C strudturf bnd rfturns b pointfr to it. */
    privbtf nbtivf long initJPEGImbgfRfbdfr();

    /**
     * Cbllfd by tif nbtivf dodf or otifr dlbssfs to signbl b wbrning.
     * Tif dodf is usfd to lookup b lodblizfd mfssbgf to bf usfd wifn
     * sfnding wbrnings to listfnfrs.
     */
    protfdtfd void wbrningOddurrfd(int dodf) {
        dbLodk.lodk();
        try {
            if ((dodf < 0) || (dodf > MAX_WARNING)){
                tirow nfw IntfrnblError("Invblid wbrning indfx");
            }
            prodfssWbrningOddurrfd
                ("dom.sun.imbgfio.plugins.jpfg.JPEGImbgfRfbdfrRfsourdfs",
                 Intfgfr.toString(dodf));
        } finblly {
            dbLodk.unlodk();
        }
    }

    /**
     * Tif librbry ibs it's own frror fbdility tibt fmits wbrning mfssbgfs.
     * Tiis routinf is dbllfd by tif nbtivf dodf wifn it ibs blrfbdy
     * formbttfd b string for output.
     * XXX  For truly domplftf lodblizbtion of bll wbrning mfssbgfs,
     * tif sun_jpfg_output_mfssbgf routinf in tif nbtivf dodf siould
     * sfnd only tif dodfs bnd pbrbmftfrs to b mftiod ifrf in Jbvb,
     * wiidi will tifn formbt bnd sfnd tif wbrnings, using lodblizfd
     * strings.  Tiis mftiod will ibvf to dfbl witi bll tif pbrbmftfrs
     * bnd formbts (%u witi possibly lbrgf numbfrs, %02d, %02x, ftd.)
     * tibt bdtublly oddur in tif JPEG librbry.  For now, tiis prfvfnts
     * librbry wbrnings from bfing printfd to stdfrr.
     */
    protfdtfd void wbrningWitiMfssbgf(String msg) {
        dbLodk.lodk();
        try {
            prodfssWbrningOddurrfd(msg);
        } finblly {
            dbLodk.unlodk();
        }
    }

    publid void sftInput(Objfdt input,
                         boolfbn sffkForwbrdOnly,
                         boolfbn ignorfMftbdbtb)
    {
        sftTirfbdLodk();
        try {
            dbLodk.difdk();

            supfr.sftInput(input, sffkForwbrdOnly, ignorfMftbdbtb);
            tiis.ignorfMftbdbtb = ignorfMftbdbtb;
            rfsftIntfrnblStbtf();
            iis = (ImbgfInputStrfbm) input; // Alwbys works
            sftSourdf(strudtPointfr);
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    /**
     * Tiis mftiod is dbllfd from nbtivf dodf in ordfr to fill
     * nbtivf input bufffr.
     *
     * Wf blodk bny bttfmpt to dibngf tif rfbding stbtf during tiis
     * mftiod, in ordfr to prfvfnt b dorruption of tif nbtivf dfdodfr
     * stbtf.
     *
     * @rfturn numbfr of bytfs rfbd from tif strfbm.
     */
    privbtf int rfbdInputDbtb(bytf[] buf, int off, int lfn) tirows IOExdfption {
        dbLodk.lodk();
        try {
            rfturn iis.rfbd(buf, off, lfn);
        } finblly {
            dbLodk.unlodk();
        }
    }

    /**
     * Tiis mftiod is dbllfd from tif nbtivf dodf in ordfr to
     * skip rfqufstfd numbfr of bytfs in tif input strfbm.
     *
     * @pbrbm n
     * @rfturn
     * @tirows IOExdfption
     */
    privbtf long skipInputBytfs(long n) tirows IOExdfption {
        dbLodk.lodk();
        try {
            rfturn iis.skipBytfs(n);
        } finblly {
            dbLodk.unlodk();
        }
    }

    privbtf nbtivf void sftSourdf(long strudtPointfr);

    privbtf void difdkTbblfsOnly() tirows IOExdfption {
        if (dfbug) {
            Systfm.out.println("Cifdking for tbblfs-only imbgf");
        }
        long sbvfPos = iis.gftStrfbmPosition();
        if (dfbug) {
            Systfm.out.println("sbvfd pos is " + sbvfPos);
            Systfm.out.println("lfngti is " + iis.lfngti());
        }
        // Rfbd tif first ifbdfr
        boolfbn tbblfsOnly = rfbdNbtivfHfbdfr(truf);
        if (tbblfsOnly) {
            if (dfbug) {
                Systfm.out.println("tbblfs-only imbgf found");
                long pos = iis.gftStrfbmPosition();
                Systfm.out.println("pos bftfr rfturn from nbtivf is " + pos);
            }
            // Tiis rfbds tif tbblfs-only imbgf twidf, ondf from C
            // bnd ondf from Jbvb, but only if ignorfMftbdbtb is fblsf
            if (ignorfMftbdbtb == fblsf) {
                iis.sffk(sbvfPos);
                ibvfSffkfd = truf;
                strfbmMftbdbtb = nfw JPEGMftbdbtb(truf, fblsf,
                                                  iis, tiis);
                long pos = iis.gftStrfbmPosition();
                if (dfbug) {
                    Systfm.out.println
                        ("pos bftfr donstrudting strfbm mftbdbtb is " + pos);
                }
            }
            // Now wf brf bt tif first imbgf if tifrf brf bny, so bdd it
            // to tif list
            if (ibsNfxtImbgf()) {
                imbgfPositions.bdd(iis.gftStrfbmPosition());
            }
        } flsf { // Not tbblfs only, so bdd originbl pos to tif list
            imbgfPositions.bdd(sbvfPos);
            // And sft durrfnt imbgf sindf wf'vf rfbd it now
            durrfntImbgf = 0;
        }
        if (sffkForwbrdOnly) {
            Long pos = imbgfPositions.gft(imbgfPositions.sizf()-1);
            iis.flusiBfforf(pos.longVbluf());
        }
        tbblfsOnlyCifdkfd = truf;
    }

    publid int gftNumImbgfs(boolfbn bllowSfbrdi) tirows IOExdfption {
        sftTirfbdLodk();
        try { // lodkfd tirfbd
            dbLodk.difdk();

            rfturn gftNumImbgfsOnTirfbd(bllowSfbrdi);
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    @SupprfssWbrnings("fblltirougi")
    privbtf int gftNumImbgfsOnTirfbd(boolfbn bllowSfbrdi)
      tirows IOExdfption {
        if (numImbgfs != 0) {
            rfturn numImbgfs;
        }
        if (iis == null) {
            tirow nfw IllfgblStbtfExdfption("Input not sft");
        }
        if (bllowSfbrdi == truf) {
            if (sffkForwbrdOnly) {
                tirow nfw IllfgblStbtfExdfption(
                    "sffkForwbrdOnly bnd bllowSfbrdi dbn't boti bf truf!");
            }
            // Otifrwisf wf ibvf to rfbd tif fntirf strfbm

            if (!tbblfsOnlyCifdkfd) {
                difdkTbblfsOnly();
            }

            iis.mbrk();

            gotoImbgf(0);

            JPEGBufffr bufffr = nfw JPEGBufffr(iis);
            bufffr.lobdBuf(0);

            boolfbn donf = fblsf;
            wiilf (!donf) {
                donf = bufffr.sdbnForFF(tiis);
                switdi (bufffr.buf[bufffr.bufPtr] & 0xff) {
                dbsf JPEG.SOI:
                    numImbgfs++;
                    // FALL THROUGH to dfdrfmfnt bufffr vbrs
                    // Tiis first sft dofsn't ibvf b lfngti
                dbsf 0: // not b mbrkfr, just b dbtb 0xff
                dbsf JPEG.RST0:
                dbsf JPEG.RST1:
                dbsf JPEG.RST2:
                dbsf JPEG.RST3:
                dbsf JPEG.RST4:
                dbsf JPEG.RST5:
                dbsf JPEG.RST6:
                dbsf JPEG.RST7:
                dbsf JPEG.EOI:
                    bufffr.bufAvbil--;
                    bufffr.bufPtr++;
                    brfbk;
                    // All tif otifrs ibvf b lfngti
                dffbult:
                    bufffr.bufAvbil--;
                    bufffr.bufPtr++;
                    bufffr.lobdBuf(2);
                    int lfngti = ((bufffr.buf[bufffr.bufPtr++] & 0xff) << 8) |
                        (bufffr.buf[bufffr.bufPtr++] & 0xff);
                    bufffr.bufAvbil -= 2;
                    lfngti -= 2; // lfngti indludfs itsflf
                    bufffr.skipDbtb(lfngti);
                }
            }


            iis.rfsft();

            rfturn numImbgfs;
        }

        rfturn -1;  // Sfbrdi is nfdfssbry for JPEG
    }

    /**
     * Sfts tif input strfbm to tif stbrt of tif rfqufstfd imbgf.
     * <prf>
     * @fxdfption IllfgblStbtfExdfption if tif input sourdf ibs not bffn
     * sft.
     * @fxdfption IndfxOutOfBoundsExdfption if tif supplifd indfx is
     * out of bounds.
     * </prf>
     */
    privbtf void gotoImbgf(int imbgfIndfx) tirows IOExdfption {
        if (iis == null) {
            tirow nfw IllfgblStbtfExdfption("Input not sft");
        }
        if (imbgfIndfx < minIndfx) {
            tirow nfw IndfxOutOfBoundsExdfption();
        }
        if (!tbblfsOnlyCifdkfd) {
            difdkTbblfsOnly();
        }
        if (imbgfIndfx < imbgfPositions.sizf()) {
            iis.sffk(imbgfPositions.gft(imbgfIndfx).longVbluf());
        } flsf {
            // rfbd to stbrt of imbgf, sbving positions
            // First sffk to tif lbst position wf blrfbdy ibvf, bnd skip tif
            // fntirf imbgf
            Long pos = imbgfPositions.gft(imbgfPositions.sizf()-1);
            iis.sffk(pos.longVbluf());
            skipImbgf();
            // Now bdd bll intfrvfning positions, skipping imbgfs
            for (int indfx = imbgfPositions.sizf();
                 indfx <= imbgfIndfx;
                 indfx++) {
                // Is tifrf bn imbgf?
                if (!ibsNfxtImbgf()) {
                    tirow nfw IndfxOutOfBoundsExdfption();
                }
                pos = iis.gftStrfbmPosition();
                imbgfPositions.bdd(pos);
                if (sffkForwbrdOnly) {
                    iis.flusiBfforf(pos.longVbluf());
                }
                if (indfx < imbgfIndfx) {
                    skipImbgf();
                }  // Otifrwisf wf brf wifrf wf wbnt to bf
            }
        }

        if (sffkForwbrdOnly) {
            minIndfx = imbgfIndfx;
        }

        ibvfSffkfd = truf;  // No wby is nbtivf bufffr still vblid
    }

    /**
     * Skip ovfr b domplftf imbgf in tif strfbm, lfbving tif strfbm
     * positionfd sudi tibt tif nfxt bytf to bf rfbd is tif first
     * bytf of tif nfxt imbgf.  For JPEG, tiis mfbns tibt wf rfbd
     * until wf fndountfr bn EOI mbrkfr or until tif fnd of tif strfbm.
     * If tif strfbm fnds bfforf bn EOI mbrkfr is fndountfrfd, bn
     * IndfxOutOfBoundsExdfption is tirown.
     */
    privbtf void skipImbgf() tirows IOExdfption {
        if (dfbug) {
            Systfm.out.println("skipImbgf dbllfd");
        }
        boolfbn foundFF = fblsf;
        for (int bytfvbl = iis.rfbd();
             bytfvbl != -1;
             bytfvbl = iis.rfbd()) {

            if (foundFF == truf) {
                if (bytfvbl == JPEG.EOI) {
                    rfturn;
                }
            }
            foundFF = (bytfvbl == 0xff) ? truf : fblsf;
        }
        tirow nfw IndfxOutOfBoundsExdfption();
    }

    /**
     * Rfturns <dodf>truf</dodf> if tifrf is bn imbgf bfyond
     * tif durrfnt strfbm position.  Dofs not disturb tif
     * strfbm position.
     */
    privbtf boolfbn ibsNfxtImbgf() tirows IOExdfption {
        if (dfbug) {
            Systfm.out.print("ibsNfxtImbgf dbllfd; rfturning ");
        }
        iis.mbrk();
        boolfbn foundFF = fblsf;
        for (int bytfvbl = iis.rfbd();
             bytfvbl != -1;
             bytfvbl = iis.rfbd()) {

            if (foundFF == truf) {
                if (bytfvbl == JPEG.SOI) {
                    iis.rfsft();
                    if (dfbug) {
                        Systfm.out.println("truf");
                    }
                    rfturn truf;
                }
            }
            foundFF = (bytfvbl == 0xff) ? truf : fblsf;
        }
        // Wf iit tif fnd of tif strfbm bfforf wf iit bn SOI, so no imbgf
        iis.rfsft();
        if (dfbug) {
            Systfm.out.println("fblsf");
        }
        rfturn fblsf;
    }

    /**
     * Pusi bbdk tif givfn numbfr of bytfs to tif input strfbm.
     * Cbllfd by tif nbtivf dodf bt tif fnd of fbdi imbgf so
     * tibt tif nfxt onf dbn bf idfntififd from Jbvb.
     */
    privbtf void pusiBbdk(int num) tirows IOExdfption {
        if (dfbug) {
            Systfm.out.println("pusiing bbdk " + num + " bytfs");
        }
        dbLodk.lodk();
        try {
            iis.sffk(iis.gftStrfbmPosition()-num);
            // Tif bufffr is dlfbr bftfr tiis, so no nffd to sft ibvfSffkfd.
        } finblly {
            dbLodk.unlodk();
        }
    }

    /**
     * Rfbds ifbdfr informbtion for tif givfn imbgf, if possiblf.
     */
    privbtf void rfbdHfbdfr(int imbgfIndfx, boolfbn rfsft)
        tirows IOExdfption {
        gotoImbgf(imbgfIndfx);
        rfbdNbtivfHfbdfr(rfsft); // Ignorf rfturn
        durrfntImbgf = imbgfIndfx;
    }

    privbtf boolfbn rfbdNbtivfHfbdfr(boolfbn rfsft) tirows IOExdfption {
        boolfbn rftvbl = fblsf;
        rftvbl = rfbdImbgfHfbdfr(strudtPointfr, ibvfSffkfd, rfsft);
        ibvfSffkfd = fblsf;
        rfturn rftvbl;
    }

    /**
     * Rfbd in tif ifbdfr informbtion stbrting from tif durrfnt
     * strfbm position, rfturning <dodf>truf</dodf> if tif
     * ifbdfr wbs b tbblfs-only imbgf.  Aftfr tiis dbll, tif
     * nbtivf IJG dfdomprfssion strudt will dontbin tif imbgf
     * informbtion rfquirfd by most qufry dblls bflow
     * (f.g. gftWidti, gftHfigit, ftd.), if tif ifbdfr wbs not
     * b tbblfs-only imbgf.
     * If rfsft is <dodf>truf</dodf>, tif stbtf of tif IJG
     * objfdt is rfsft so tibt it dbn rfbd b ifbdfr bgbin.
     * Tiis ibppfns butombtidblly if tif ifbdfr wbs b tbblfs-only
     * imbgf.
     */
    privbtf nbtivf boolfbn rfbdImbgfHfbdfr(long strudtPointfr,
                                           boolfbn dlfbrBufffr,
                                           boolfbn rfsft)
        tirows IOExdfption;

    /*
     * Cbllfd by tif nbtivf dodf wifnfvfr bn imbgf ifbdfr ibs bffn
     * rfbd.  Wiftifr wf rfbd mftbdbtb or not, wf blwbys nffd tiis
     * informbtion, so it is pbssfd bbdk indfpfndfntly of
     * mftbdbtb, wiidi mby nfvfr bf rfbd.
     */
    privbtf void sftImbgfDbtb(int widti,
                              int ifigit,
                              int dolorSpbdfCodf,
                              int outColorSpbdfCodf,
                              int numComponfnts,
                              bytf [] iddDbtb) {
        tiis.widti = widti;
        tiis.ifigit = ifigit;
        tiis.dolorSpbdfCodf = dolorSpbdfCodf;
        tiis.outColorSpbdfCodf = outColorSpbdfCodf;
        tiis.numComponfnts = numComponfnts;

        if (iddDbtb == null) {
            iddCS = null;
            rfturn;
        }

        ICC_Profilf nfwProfilf = null;
        try {
            nfwProfilf = ICC_Profilf.gftInstbndf(iddDbtb);
        } dbtdi (IllfgblArgumfntExdfption f) {
            /*
             * Color profilf dbtb sffms to bf invblid.
             * Ignorf tiis profilf.
             */
            iddCS = null;
            wbrningOddurrfd(WARNING_IGNORE_INVALID_ICC);

            rfturn;
        }
        bytf[] nfwDbtb = nfwProfilf.gftDbtb();

        ICC_Profilf oldProfilf = null;
        if (iddCS instbndfof ICC_ColorSpbdf) {
            oldProfilf = ((ICC_ColorSpbdf)iddCS).gftProfilf();
        }
        bytf[] oldDbtb = null;
        if (oldProfilf != null) {
            oldDbtb = oldProfilf.gftDbtb();
        }

        /*
         * At tif momfnt wf dbn't rfly on tif ColorSpbdf.fqubls()
         * bnd ICC_Profilf.fqubls() bfdbusf tify do not dftfdt
         * tif dbsf wifn two profilfs brf drfbtfd from sbmf dbtb.
         *
         * So, wf ibvf to do dbtb dompbrison in ordfr to bvoid
         * drfbtion of difffrfnt ColorSpbdf instbndfs for tif sbmf
         * fmbfddfd dbtb.
         */
        if (oldDbtb == null ||
            !jbvb.util.Arrbys.fqubls(oldDbtb, nfwDbtb))
        {
            iddCS = nfw ICC_ColorSpbdf(nfwProfilf);
            // vfrify nfw dolor spbdf
            try {
                flobt[] dolors = iddCS.fromRGB(nfw flobt[] {1f, 0f, 0f});
            } dbtdi (CMMExdfption f) {
                /*
                 * Embfddfd profilf sffms to bf dorruptfd.
                 * Ignorf tiis profilf.
                 */
                iddCS = null;
                dbLodk.lodk();
                try {
                    wbrningOddurrfd(WARNING_IGNORE_INVALID_ICC);
                } finblly {
                    dbLodk.unlodk();
                }
            }
        }
    }

    publid int gftWidti(int imbgfIndfx) tirows IOExdfption {
        sftTirfbdLodk();
        try {
            if (durrfntImbgf != imbgfIndfx) {
                dbLodk.difdk();
                rfbdHfbdfr(imbgfIndfx, truf);
            }
            rfturn widti;
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    publid int gftHfigit(int imbgfIndfx) tirows IOExdfption {
        sftTirfbdLodk();
        try {
            if (durrfntImbgf != imbgfIndfx) {
                dbLodk.difdk();
                rfbdHfbdfr(imbgfIndfx, truf);
            }
            rfturn ifigit;
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    /////////// Color Convfrsion bnd Imbgf Typfs

    /**
     * Rfturn bn ImbgfTypfSpfdififr dorrfsponding to tif givfn
     * dolor spbdf dodf, or null if tif dolor spbdf is unsupportfd.
     */
    privbtf ImbgfTypfProdudfr gftImbgfTypf(int dodf) {
        ImbgfTypfProdudfr rft = null;

        if ((dodf > 0) && (dodf < JPEG.NUM_JCS_CODES)) {
            rft = ImbgfTypfProdudfr.gftTypfProdudfr(dodf);
        }
        rfturn rft;
    }

    publid ImbgfTypfSpfdififr gftRbwImbgfTypf(int imbgfIndfx)
        tirows IOExdfption {
        sftTirfbdLodk();
        try {
            if (durrfntImbgf != imbgfIndfx) {
                dbLodk.difdk();

                rfbdHfbdfr(imbgfIndfx, truf);
            }

            // Rfturns null if it dbn't bf rfprfsfntfd
            rfturn gftImbgfTypf(dolorSpbdfCodf).gftTypf();
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    publid Itfrbtor<ImbgfTypfSpfdififr> gftImbgfTypfs(int imbgfIndfx)
        tirows IOExdfption {
        sftTirfbdLodk();
        try {
            rfturn gftImbgfTypfsOnTirfbd(imbgfIndfx);
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    privbtf Itfrbtor<ImbgfTypfSpfdififr> gftImbgfTypfsOnTirfbd(int imbgfIndfx)
        tirows IOExdfption {
        if (durrfntImbgf != imbgfIndfx) {
            dbLodk.difdk();
            rfbdHfbdfr(imbgfIndfx, truf);
        }

        // Wf rfturn bn itfrbtor dontbining tif dffbult, bny
        // donvfrsions tibt tif librbry providfs, bnd
        // bll tif otifr dffbult typfs witi tif sbmf numbfr
        // of domponfnts, bs wf dbn do tifsf bs b post-prodfss.
        // As wf donvfrt Rbstfrs rbtifr tibn imbgfs, imbgfs
        // witi blpib dbnnot bf donvfrtfd in b post-prodfss.

        // If tiis imbgf dbn't bf intfrprftfd, tiis mftiod
        // rfturns bn fmpty Itfrbtor.

        // Gft tif rbw ITS, if tifrf is onf.  Notf tibt tiis
        // won't blwbys bf tif sbmf bs tif dffbult.
        ImbgfTypfProdudfr rbw = gftImbgfTypf(dolorSpbdfCodf);

        // Givfn tif fndodfd dolorspbdf, build b list of ITS's
        // rfprfsfnting outputs you dould ibndlf stbrting
        // witi tif dffbult.

        ArrbyList<ImbgfTypfProdudfr> list = nfw ArrbyList<ImbgfTypfProdudfr>(1);

        switdi (dolorSpbdfCodf) {
        dbsf JPEG.JCS_GRAYSCALE:
            list.bdd(rbw);
            list.bdd(gftImbgfTypf(JPEG.JCS_RGB));
            brfbk;
        dbsf JPEG.JCS_RGB:
            list.bdd(rbw);
            list.bdd(gftImbgfTypf(JPEG.JCS_GRAYSCALE));
            list.bdd(gftImbgfTypf(JPEG.JCS_YCC));
            brfbk;
        dbsf JPEG.JCS_RGBA:
            list.bdd(rbw);
            brfbk;
        dbsf JPEG.JCS_YCC:
            if (rbw != null) {  // Migit bf null if PYCC.pf not instbllfd
                list.bdd(rbw);
                list.bdd(gftImbgfTypf(JPEG.JCS_RGB));
            }
            brfbk;
        dbsf JPEG.JCS_YCCA:
            if (rbw != null) {  // Migit bf null if PYCC.pf not instbllfd
                list.bdd(rbw);
            }
            brfbk;
        dbsf JPEG.JCS_YCbCr:
            // As tifrf is no YCbCr ColorSpbdf, wf dbn't support
            // tif rbw typf.

            // duf to 4705399, usf RGB bs dffbult in ordfr to bvoid
            // slowing down of drbwing opfrbtions witi rfsult imbgf.
            list.bdd(gftImbgfTypf(JPEG.JCS_RGB));

            if (iddCS != null) {
                list.bdd(nfw ImbgfTypfProdudfr() {
                    protfdtfd ImbgfTypfSpfdififr produdf() {
                        rfturn ImbgfTypfSpfdififr.drfbtfIntfrlfbvfd
                         (iddCS,
                          JPEG.bOffsRGB,  // Assumf it's for RGB
                          DbtbBufffr.TYPE_BYTE,
                          fblsf,
                          fblsf);
                    }
                });

            }

            list.bdd(gftImbgfTypf(JPEG.JCS_GRAYSCALE));
            list.bdd(gftImbgfTypf(JPEG.JCS_YCC));
            brfbk;
        dbsf JPEG.JCS_YCbCrA:  // Dffbult is to donvfrt to RGBA
            // As tifrf is no YCbCr ColorSpbdf, wf dbn't support
            // tif rbw typf.
            list.bdd(gftImbgfTypf(JPEG.JCS_RGBA));
            brfbk;
        }

        rfturn nfw ImbgfTypfItfrbtor(list.itfrbtor());
    }

    /**
     * Cifdks tif implifd dolor donvfrsion bftwffn tif strfbm bnd
     * tif tbrgft imbgf, bltfring tif IJG output dolor spbdf if nfdfssbry.
     * If b jbvb dolor donvfrsion is rfquirfd, tifn tiis sfts up
     * <dodf>donvfrt</dodf>.
     * If bbnds brf bfing rfbrrbngfd bt bll (fitifr sourdf or dfstinbtion
     * bbnds brf spfdififd in tif pbrbm), tifn tif dffbult dolor
     * donvfrsions brf bssumfd to bf dorrfdt.
     * Tirows bn IIOExdfption if tifrf is no donvfrsion bvbilbblf.
     */
    privbtf void difdkColorConvfrsion(BufffrfdImbgf imbgf,
                                      ImbgfRfbdPbrbm pbrbm)
        tirows IIOExdfption {

        // If wf brf rfbrrbnging dibnnfls bt bll, tif dffbult
        // donvfrsions rfmbin in plbdf.  If tif usfr wbnts
        // rbw dibnnfls tifn if siould do tiis wiilf rfbding
        // b Rbstfr.
        if (pbrbm != null) {
            if ((pbrbm.gftSourdfBbnds() != null) ||
                (pbrbm.gftDfstinbtionBbnds() != null)) {
                // Addfpt dffbult donvfrsions out of dfdodfr, silfntly
                rfturn;
            }
        }

        // XXX - Wf do not durrfntly support bny indfxfd dolor modfls,
        // tiougi wf dould, bs IJG will qubntizf for us.
        // Tiis is b pfrformbndf bnd mfmory-usf issuf, bs
        // usfrs dbn rfbd RGB bnd tifn donvfrt to indfxfd in Jbvb.

        ColorModfl dm = imbgf.gftColorModfl();

        if (dm instbndfof IndfxColorModfl) {
            tirow nfw IIOExdfption("IndfxColorModfl not supportfd");
        }

        // Now difdk tif ColorSpbdf typf bgbinst outColorSpbdfCodf
        // Wf mby wbnt to twfbk tif dffbult
        ColorSpbdf ds = dm.gftColorSpbdf();
        int dsTypf = ds.gftTypf();
        donvfrt = null;
        switdi (outColorSpbdfCodf) {
        dbsf JPEG.JCS_GRAYSCALE:  // Its grby in tif filf
            if  (dsTypf == ColorSpbdf.TYPE_RGB) { // Wf wbnt RGB
                // IJG dbn do tiis for us morf fffidifntly
                sftOutColorSpbdf(strudtPointfr, JPEG.JCS_RGB);
                // Updbtf jbvb stbtf bddording to dibngfs
                // in tif nbtivf pbrt of dfdodfr.
                outColorSpbdfCodf = JPEG.JCS_RGB;
                numComponfnts = 3;
            } flsf if (dsTypf != ColorSpbdf.TYPE_GRAY) {
                tirow nfw IIOExdfption("Indompbtiblf dolor donvfrsion");
            }
            brfbk;
        dbsf JPEG.JCS_RGB:  // IJG wbnts to go to RGB
            if (dsTypf ==  ColorSpbdf.TYPE_GRAY) {  // Wf wbnt grby
                if (dolorSpbdfCodf == JPEG.JCS_YCbCr) {
                    // If tif jpfg spbdf is YCbCr, IJG dbn do it
                    sftOutColorSpbdf(strudtPointfr, JPEG.JCS_GRAYSCALE);
                    // Updbtf jbvb stbtf bddording to dibngfs
                    // in tif nbtivf pbrt of dfdodfr.
                    outColorSpbdfCodf = JPEG.JCS_GRAYSCALE;
                    numComponfnts = 1;
                }
            } flsf if ((iddCS != null) &&
                       (dm.gftNumComponfnts() == numComponfnts) &&
                       (ds != iddCS)) {
                // Wf ibvf bn ICC profilf but it isn't usfd in tif dfst
                // imbgf.  So donvfrt from tif profilf ds to tif tbrgft ds
                donvfrt = nfw ColorConvfrtOp(iddCS, ds, null);
                // Lfbvf IJG donvfrsion in plbdf; wf still nffd it
            } flsf if ((iddCS == null) &&
                       (!ds.isCS_sRGB()) &&
                       (dm.gftNumComponfnts() == numComponfnts)) {
                // Tbrgft isn't sRGB, so donvfrt from sRGB to tif tbrgft
                donvfrt = nfw ColorConvfrtOp(JPEG.JCS.sRGB, ds, null);
            } flsf if (dsTypf != ColorSpbdf.TYPE_RGB) {
                tirow nfw IIOExdfption("Indompbtiblf dolor donvfrsion");
            }
            brfbk;
        dbsf JPEG.JCS_RGBA:
            // No donvfrsions bvbilbblf; imbgf must bf RGBA
            if ((dsTypf != ColorSpbdf.TYPE_RGB) ||
                (dm.gftNumComponfnts() != numComponfnts)) {
                tirow nfw IIOExdfption("Indompbtiblf dolor donvfrsion");
            }
            brfbk;
        dbsf JPEG.JCS_YCC:
            {
                ColorSpbdf YCC = JPEG.JCS.gftYCC();
                if (YCC == null) { // Wf dbn't do YCC bt bll
                    tirow nfw IIOExdfption("Indompbtiblf dolor donvfrsion");
                }
                if ((ds != YCC) &&
                    (dm.gftNumComponfnts() == numComponfnts)) {
                    donvfrt = nfw ColorConvfrtOp(YCC, ds, null);
                }
            }
            brfbk;
        dbsf JPEG.JCS_YCCA:
            {
                ColorSpbdf YCC = JPEG.JCS.gftYCC();
                // No donvfrsions bvbilbblf; imbgf must bf YCCA
                if ((YCC == null) || // Wf dbn't do YCC bt bll
                    (ds != YCC) ||
                    (dm.gftNumComponfnts() != numComponfnts)) {
                    tirow nfw IIOExdfption("Indompbtiblf dolor donvfrsion");
                }
            }
            brfbk;
        dffbult:
            // Anytiing flsf wf dbn't ibndlf bt bll
            tirow nfw IIOExdfption("Indompbtiblf dolor donvfrsion");
        }
    }

    /**
     * Sft tif IJG output spbdf to tif givfn vbluf.  Tif librbry will
     * pfrform tif bppropribtf dolorspbdf donvfrsions.
     */
    privbtf nbtivf void sftOutColorSpbdf(long strudtPointfr, int id);

    /////// End of Color Convfrsion & Imbgf Typfs

    publid ImbgfRfbdPbrbm gftDffbultRfbdPbrbm() {
        rfturn nfw JPEGImbgfRfbdPbrbm();
    }

    publid IIOMftbdbtb gftStrfbmMftbdbtb() tirows IOExdfption {
        sftTirfbdLodk();
        try {
            if (!tbblfsOnlyCifdkfd) {
                dbLodk.difdk();
                difdkTbblfsOnly();
            }
            rfturn strfbmMftbdbtb;
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    publid IIOMftbdbtb gftImbgfMftbdbtb(int imbgfIndfx)
        tirows IOExdfption {
        sftTirfbdLodk();
        try {
            // imbgfMftbdbtbIndfx will blwbys bf fitifr b vblid indfx or
            // -1, in wiidi dbsf imbgfMftbdbtb will not bf null.
            // So wf dbn lfbvf difdking imbgfIndfx for gotoImbgf.
            if ((imbgfMftbdbtbIndfx == imbgfIndfx)
                && (imbgfMftbdbtb != null)) {
                rfturn imbgfMftbdbtb;
            }

            dbLodk.difdk();

            gotoImbgf(imbgfIndfx);

            imbgfMftbdbtb = nfw JPEGMftbdbtb(fblsf, fblsf, iis, tiis);

            imbgfMftbdbtbIndfx = imbgfIndfx;

            rfturn imbgfMftbdbtb;
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    publid BufffrfdImbgf rfbd(int imbgfIndfx, ImbgfRfbdPbrbm pbrbm)
        tirows IOExdfption {
        sftTirfbdLodk();
        try {
            dbLodk.difdk();
            try {
                rfbdIntfrnbl(imbgfIndfx, pbrbm, fblsf);
            } dbtdi (RuntimfExdfption f) {
                rfsftLibrbryStbtf(strudtPointfr);
                tirow f;
            } dbtdi (IOExdfption f) {
                rfsftLibrbryStbtf(strudtPointfr);
                tirow f;
            }

            BufffrfdImbgf rft = imbgf;
            imbgf = null;  // don't kffp b rfffrfndf ifrf
            rfturn rft;
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    privbtf Rbstfr rfbdIntfrnbl(int imbgfIndfx,
                                ImbgfRfbdPbrbm pbrbm,
                                boolfbn wbntRbstfr) tirows IOExdfption {
        rfbdHfbdfr(imbgfIndfx, fblsf);

        WritbblfRbstfr imRbs = null;
        int numImbgfBbnds = 0;

        if (!wbntRbstfr){
            // Cbn wf rfbd tiis imbgf?
            Itfrbtor<ImbgfTypfSpfdififr> imbgfTypfs = gftImbgfTypfs(imbgfIndfx);
            if (imbgfTypfs.ibsNfxt() == fblsf) {
                tirow nfw IIOExdfption("Unsupportfd Imbgf Typf");
            }

            imbgf = gftDfstinbtion(pbrbm, imbgfTypfs, widti, ifigit);
            imRbs = imbgf.gftRbstfr();

            // Tif dfstinbtion mby still bf indompbtiblf.

            numImbgfBbnds = imbgf.gftSbmplfModfl().gftNumBbnds();

            // Cifdk wiftifr wf dbn ibndlf bny implifd dolor donvfrsion

            // Tirows IIOExdfption if tif strfbm bnd tif imbgf brf
            // indompbtiblf, bnd sfts donvfrt if b jbvb donvfrsion
            // is nfdfssbry
            difdkColorConvfrsion(imbgf, pbrbm);

            // Cifdk tif sourdf bnd dfstinbtion bbnds in tif pbrbm
            difdkRfbdPbrbmBbndSfttings(pbrbm, numComponfnts, numImbgfBbnds);
        } flsf {
            // Sft tif output dolor spbdf fqubl to tif input dolorspbdf
            // Tiis disbblfs bll donvfrsions
            sftOutColorSpbdf(strudtPointfr, dolorSpbdfCodf);
            imbgf = null;
        }

        // Crfbtf bn intfrmfdibtf 1-linf Rbstfr tibt will iold tif dfdodfd,
        // subsbmplfd, dlippfd, bbnd-sflfdtfd imbgf dbtb in b singlf
        // bytf-intfrlfbvfd bufffr.  Tif bbovf trbnsformbtions
        // will oddur in C for pfrformbndf.  Evfry timf tiis Rbstfr
        // is fillfd wf will dbll bbdk to bddfptPixfls bflow to dopy
        // tiis to wibtfvfr kind of bufffr our imbgf ibs.

        int [] srdBbnds = JPEG.bbndOffsfts[numComponfnts-1];
        int numRbstfrBbnds = (wbntRbstfr ? numComponfnts : numImbgfBbnds);
        dfstinbtionBbnds = null;

        Rfdtbnglf srdROI = nfw Rfdtbnglf(0, 0, 0, 0);
        dfstROI = nfw Rfdtbnglf(0, 0, 0, 0);
        domputfRfgions(pbrbm, widti, ifigit, imbgf, srdROI, dfstROI);

        int pfriodX = 1;
        int pfriodY = 1;

        minProgrfssivfPbss = 0;
        mbxProgrfssivfPbss = Intfgfr.MAX_VALUE;

        if (pbrbm != null) {
            pfriodX = pbrbm.gftSourdfXSubsbmpling();
            pfriodY = pbrbm.gftSourdfYSubsbmpling();

            int[] sBbnds = pbrbm.gftSourdfBbnds();
            if (sBbnds != null) {
                srdBbnds = sBbnds;
                numRbstfrBbnds = srdBbnds.lfngti;
            }
            if (!wbntRbstfr) {  // ignorf dfst bbnds for Rbstfr
                dfstinbtionBbnds = pbrbm.gftDfstinbtionBbnds();
            }

            minProgrfssivfPbss = pbrbm.gftSourdfMinProgrfssivfPbss();
            mbxProgrfssivfPbss = pbrbm.gftSourdfMbxProgrfssivfPbss();

            if (pbrbm instbndfof JPEGImbgfRfbdPbrbm) {
                JPEGImbgfRfbdPbrbm jpbrbm = (JPEGImbgfRfbdPbrbm) pbrbm;
                if (jpbrbm.brfTbblfsSft()) {
                    bbbrfvQTbblfs = jpbrbm.gftQTbblfs();
                    bbbrfvDCHuffmbnTbblfs = jpbrbm.gftDCHuffmbnTbblfs();
                    bbbrfvACHuffmbnTbblfs = jpbrbm.gftACHuffmbnTbblfs();
                }
            }
        }

        int linfSizf = dfstROI.widti*numRbstfrBbnds;

        bufffr = nfw DbtbBufffrBytf(linfSizf);

        int [] bbndOffs = JPEG.bbndOffsfts[numRbstfrBbnds-1];

        rbstfr = Rbstfr.drfbtfIntfrlfbvfdRbstfr(bufffr,
                                                dfstROI.widti, 1,
                                                linfSizf,
                                                numRbstfrBbnds,
                                                bbndOffs,
                                                null);

        // Now tibt wf ibvf tif Rbstfr wf'll dfdodf to, gft b vifw of tif
        // tbrgft Rbstfr tibt will pfrmit b simplf sftRfdt for fbdi sdbnlinf
        if (wbntRbstfr) {
            tbrgft =  Rbstfr.drfbtfIntfrlfbvfdRbstfr(DbtbBufffr.TYPE_BYTE,
                                                     dfstROI.widti,
                                                     dfstROI.ifigit,
                                                     linfSizf,
                                                     numRbstfrBbnds,
                                                     bbndOffs,
                                                     null);
        } flsf {
            tbrgft = imRbs;
        }
        int [] bbndSizfs = tbrgft.gftSbmplfModfl().gftSbmplfSizf();
        for (int i = 0; i < bbndSizfs.lfngti; i++) {
            if (bbndSizfs[i] <= 0 || bbndSizfs[i] > 8) {
                tirow nfw IIOExdfption("Illfgbl bbnd sizf: siould bf 0 < sizf <= 8");
            }
        }

        /*
         * If tif prodfss is sfqufntibl, bnd wf ibvf rfstbrt mbrkfrs,
         * wf dould skip to tif dorrfdt rfstbrt mbrkfr, if tif librbry
         * lfts us.  Tibt's bn optimizbtion to invfstigbtf lbtfr.
         */

        // Cifdk for updbtf listfnfrs (don't dbll bbdk if nonf)
        boolfbn dbllbbdkUpdbtfs = ((updbtfListfnfrs != null)
                                   || (progrfssListfnfrs != null));

        // Sft up progrfssion dbtb
        initProgrfssDbtb();
        // if wf ibvf b mftbdbtb objfdt, wf dbn dount tif sdbns
        // bnd sft knownPbssCount
        if (imbgfIndfx == imbgfMftbdbtbIndfx) { // Wf ibvf mftbdbtb
            knownPbssCount = 0;
            for (Itfrbtor<MbrkfrSfgmfnt> itfr =
                    imbgfMftbdbtb.mbrkfrSfqufndf.itfrbtor(); itfr.ibsNfxt();) {
                if (itfr.nfxt() instbndfof SOSMbrkfrSfgmfnt) {
                    knownPbssCount++;
                }
            }
        }
        progIntfrvbl = Mbti.mbx((tbrgft.gftHfigit()-1) / 20, 1);
        if (knownPbssCount > 0) {
            progIntfrvbl *= knownPbssCount;
        } flsf if (mbxProgrfssivfPbss != Intfgfr.MAX_VALUE) {
            progIntfrvbl *= (mbxProgrfssivfPbss - minProgrfssivfPbss + 1);
        }

        if (dfbug) {
            Systfm.out.println("**** Rfbd Dbtb *****");
            Systfm.out.println("numRbstfrBbnds is " + numRbstfrBbnds);
            Systfm.out.print("srdBbnds:");
            for (int i = 0; i<srdBbnds.lfngti;i++)
                Systfm.out.print(" " + srdBbnds[i]);
            Systfm.out.println();
            Systfm.out.println("dfstinbtion bbnds is " + dfstinbtionBbnds);
            if (dfstinbtionBbnds != null) {
                for (int i = 0; i < dfstinbtionBbnds.lfngti; i++) {
                    Systfm.out.print(" " + dfstinbtionBbnds[i]);
                }
                Systfm.out.println();
            }
            Systfm.out.println("sourdfROI is " + srdROI);
            Systfm.out.println("dfstROI is " + dfstROI);
            Systfm.out.println("pfriodX is " + pfriodX);
            Systfm.out.println("pfriodY is " + pfriodY);
            Systfm.out.println("minProgrfssivfPbss is " + minProgrfssivfPbss);
            Systfm.out.println("mbxProgrfssivfPbss is " + mbxProgrfssivfPbss);
            Systfm.out.println("dbllbbdkUpdbtfs is " + dbllbbdkUpdbtfs);
        }

        // Finblly, wf brf rfbdy to rfbd

        prodfssImbgfStbrtfd(durrfntImbgf);

        boolfbn bbortfd = fblsf;

        // Notf tibt gftDbtb disbblfs bddflfrbtion on bufffr, but it is
        // just b 1-linf intfrmfdibtf dbtb trbnsffr bufffr tibt will not
        // bfffdt tif bddflfrbtion of tif rfsulting imbgf.
        bbortfd = rfbdImbgf(strudtPointfr,
                            bufffr.gftDbtb(),
                            numRbstfrBbnds,
                            srdBbnds,
                            bbndSizfs,
                            srdROI.x, srdROI.y,
                            srdROI.widti, srdROI.ifigit,
                            pfriodX, pfriodY,
                            bbbrfvQTbblfs,
                            bbbrfvDCHuffmbnTbblfs,
                            bbbrfvACHuffmbnTbblfs,
                            minProgrfssivfPbss, mbxProgrfssivfPbss,
                            dbllbbdkUpdbtfs);

        if (bbortfd) {
            prodfssRfbdAbortfd();
        } flsf {
            prodfssImbgfComplftf();
        }

        rfturn tbrgft;

    }

    /**
     * Tiis mftiod is dbllfd bbdk from C wifn tif intfrmfdibtf Rbstfr
     * is full.  Tif pbrbmftfr indidbtfs tif sdbnlinf in tif tbrgft
     * Rbstfr to wiidi tif intfrmfdibtf Rbstfr siould bf dopifd.
     * Aftfr tif dopy, wf notify updbtf listfnfrs.
     */
    privbtf void bddfptPixfls(int y, boolfbn progrfssivf) {
        if (donvfrt != null) {
            donvfrt.filtfr(rbstfr, rbstfr);
        }
        tbrgft.sftRfdt(dfstROI.x, dfstROI.y + y, rbstfr);

        dbLodk.lodk();
        try {
            prodfssImbgfUpdbtf(imbgf,
                               dfstROI.x, dfstROI.y+y,
                               rbstfr.gftWidti(), 1,
                               1, 1,
                               dfstinbtionBbnds);
            if ((y > 0) && (y%progIntfrvbl == 0)) {
                int ifigit = tbrgft.gftHfigit()-1;
                flobt pfrdfntOfPbss = ((flobt)y)/ifigit;
                if (progrfssivf) {
                    if (knownPbssCount != UNKNOWN) {
                        prodfssImbgfProgrfss((pbss + pfrdfntOfPbss)*100.0F
                                             / knownPbssCount);
                    } flsf if (mbxProgrfssivfPbss != Intfgfr.MAX_VALUE) {
                        // Usf tif rbngf of bllowfd progrfssivf pbssfs
                        prodfssImbgfProgrfss((pbss + pfrdfntOfPbss)*100.0F
                                             / (mbxProgrfssivfPbss - minProgrfssivfPbss + 1));
                    } flsf {
                        // Assumf tifrf brf b minimum of MIN_ESTIMATED_PASSES
                        // bnd tibt tifrf is blwbys onf morf pbss
                        // Computf tif pfrdfntbgf bs tif pfrdfntbgf bt tif fnd
                        // of tif prfvious pbss, plus tif pfrdfntbgf of tiis
                        // pbss sdblfd to bf tif pfrdfntbgf of tif totbl rfmbining,
                        // bssuming b minimum of MIN_ESTIMATED_PASSES pbssfs bnd
                        // tibt tifrf is blwbys onf morf pbss.  Tiis is monotonid
                        // bnd bsymptotid to 1.0, wiidi is wibt wf nffd.
                        int rfmbiningPbssfs = // indluding tiis onf
                            Mbti.mbx(2, MIN_ESTIMATED_PASSES-pbss);
                        int totblPbssfs = pbss + rfmbiningPbssfs-1;
                        progIntfrvbl = Mbti.mbx(ifigit/20*totblPbssfs,
                                                totblPbssfs);
                        if (y%progIntfrvbl == 0) {
                            pfrdfntToDbtf = prfviousPbssPfrdfntbgf +
                                (1.0F - prfviousPbssPfrdfntbgf)
                                * (pfrdfntOfPbss)/rfmbiningPbssfs;
                            if (dfbug) {
                                Systfm.out.print("pbss= " + pbss);
                                Systfm.out.print(", y= " + y);
                                Systfm.out.print(", progInt= " + progIntfrvbl);
                                Systfm.out.print(", % of pbss: " + pfrdfntOfPbss);
                                Systfm.out.print(", rfm. pbssfs: "
                                                 + rfmbiningPbssfs);
                                Systfm.out.print(", prfv%: "
                                                 + prfviousPbssPfrdfntbgf);
                                Systfm.out.print(", %ToDbtf: " + pfrdfntToDbtf);
                                Systfm.out.print(" ");
                            }
                            prodfssImbgfProgrfss(pfrdfntToDbtf*100.0F);
                        }
                    }
                } flsf {
                    prodfssImbgfProgrfss(pfrdfntOfPbss * 100.0F);
                }
            }
        } finblly {
            dbLodk.unlodk();
        }
    }

    privbtf void initProgrfssDbtb() {
        knownPbssCount = UNKNOWN;
        pbss = 0;
        pfrdfntToDbtf = 0.0F;
        prfviousPbssPfrdfntbgf = 0.0F;
        progIntfrvbl = 0;
    }

    privbtf void pbssStbrtfd (int pbss) {
        dbLodk.lodk();
        try {
            tiis.pbss = pbss;
            prfviousPbssPfrdfntbgf = pfrdfntToDbtf;
            prodfssPbssStbrtfd(imbgf,
                               pbss,
                               minProgrfssivfPbss,
                               mbxProgrfssivfPbss,
                               0, 0,
                               1,1,
                               dfstinbtionBbnds);
        } finblly {
            dbLodk.unlodk();
        }
    }

    privbtf void pbssComplftf () {
        dbLodk.lodk();
        try {
            prodfssPbssComplftf(imbgf);
        } finblly {
            dbLodk.unlodk();
        }
    }

    void tiumbnbilStbrtfd(int tiumbnbilIndfx) {
        dbLodk.lodk();
        try {
            prodfssTiumbnbilStbrtfd(durrfntImbgf, tiumbnbilIndfx);
        } finblly {
            dbLodk.unlodk();
        }
    }

    // Providf bddfss to protfdtfd supfrdlbss mftiod
    void tiumbnbilProgrfss(flobt pfrdfntbgfDonf) {
        dbLodk.lodk();
        try {
            prodfssTiumbnbilProgrfss(pfrdfntbgfDonf);
        } finblly {
            dbLodk.unlodk();
        }
    }

    // Providf bddfss to protfdtfd supfrdlbss mftiod
    void tiumbnbilComplftf() {
        dbLodk.lodk();
        try {
            prodfssTiumbnbilComplftf();
        } finblly {
            dbLodk.unlodk();
        }
    }

    /**
     * Rfturns <dodf>truf</dodf> if tif rfbd wbs bbortfd.
     */
    privbtf nbtivf boolfbn rfbdImbgf(long strudtPointfr,
                                     bytf [] bufffr,
                                     int numRbstfrBbnds,
                                     int [] srdBbnds,
                                     int [] bbndSizfs,
                                     int sourdfXOffsft, int sourdfYOffsft,
                                     int sourdfWidti, int sourdfHfigit,
                                     int pfriodX, int pfriodY,
                                     JPEGQTbblf [] bbbrfvQTbblfs,
                                     JPEGHuffmbnTbblf [] bbbrfvDCHuffmbnTbblfs,
                                     JPEGHuffmbnTbblf [] bbbrfvACHuffmbnTbblfs,
                                     int minProgrfssivfPbss,
                                     int mbxProgrfssivfPbss,
                                     boolfbn wbntUpdbtfs);

    publid void bbort() {
        sftTirfbdLodk();
        try {
            /**
             * NB: wf do not difdk tif dbll bbdk lodk ifrf,
             * wf bllow to bbort tif rfbdfr bny timf.
             */

            supfr.bbort();
            bbortRfbd(strudtPointfr);
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    /** Sft tif C lfvfl bbort flbg. Kffp it btomid for tirfbd sbffty. */
    privbtf nbtivf void bbortRfbd(long strudtPointfr);

    /** Rfsfts librbry stbtf wifn bn fxdfption oddurrfd during b rfbd. */
    privbtf nbtivf void rfsftLibrbryStbtf(long strudtPointfr);

    publid boolfbn dbnRfbdRbstfr() {
        rfturn truf;
    }

    publid Rbstfr rfbdRbstfr(int imbgfIndfx, ImbgfRfbdPbrbm pbrbm)
        tirows IOExdfption {
        sftTirfbdLodk();
        Rbstfr rftvbl = null;
        try {
            dbLodk.difdk();
            /*
             * Tiis dould bf furtifr optimizfd by not rfsftting tif dfst.
             * offsft bnd drfbting b trbnslbtfd rbstfr in rfbdIntfrnbl()
             * (sff bug 4994702 for morf info).
             */

            // For Rbstfrs, dfstinbtion offsft is logidbl, not piysidbl, so
            // sft it to 0 bfforf dblling domputfRfgions, so tibt tif dfstinbtion
            // rfgion is not dlippfd.
            Point sbvfDfstOffsft = null;
            if (pbrbm != null) {
                sbvfDfstOffsft = pbrbm.gftDfstinbtionOffsft();
                pbrbm.sftDfstinbtionOffsft(nfw Point(0, 0));
            }
            rftvbl = rfbdIntfrnbl(imbgfIndfx, pbrbm, truf);
            // Apply tif dfstinbtion offsft, if bny, bs b logidbl offsft
            if (sbvfDfstOffsft != null) {
                tbrgft = tbrgft.drfbtfWritbblfTrbnslbtfdCiild(sbvfDfstOffsft.x,
                                                              sbvfDfstOffsft.y);
            }
        } dbtdi (RuntimfExdfption f) {
            rfsftLibrbryStbtf(strudtPointfr);
            tirow f;
        } dbtdi (IOExdfption f) {
            rfsftLibrbryStbtf(strudtPointfr);
            tirow f;
        } finblly {
            dlfbrTirfbdLodk();
        }
        rfturn rftvbl;
    }

    publid boolfbn rfbdfrSupportsTiumbnbils() {
        rfturn truf;
    }

    publid int gftNumTiumbnbils(int imbgfIndfx) tirows IOExdfption {
        sftTirfbdLodk();
        try {
            dbLodk.difdk();

            gftImbgfMftbdbtb(imbgfIndfx);  // difdks iis stbtf for us
            // Now difdk tif jfif sfgmfnts
            JFIFMbrkfrSfgmfnt jfif =
                (JFIFMbrkfrSfgmfnt) imbgfMftbdbtb.findMbrkfrSfgmfnt
                (JFIFMbrkfrSfgmfnt.dlbss, truf);
            int rftvbl = 0;
            if (jfif != null) {
                rftvbl = (jfif.tiumb == null) ? 0 : 1;
                rftvbl += jfif.fxtSfgmfnts.sizf();
            }
            rfturn rftvbl;
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    publid int gftTiumbnbilWidti(int imbgfIndfx, int tiumbnbilIndfx)
        tirows IOExdfption {
        sftTirfbdLodk();
        try {
            dbLodk.difdk();

            if ((tiumbnbilIndfx < 0)
                || (tiumbnbilIndfx >= gftNumTiumbnbils(imbgfIndfx))) {
                tirow nfw IndfxOutOfBoundsExdfption("No sudi tiumbnbil");
            }
            // Now wf know tibt tifrf is b jfif sfgmfnt
            JFIFMbrkfrSfgmfnt jfif =
                (JFIFMbrkfrSfgmfnt) imbgfMftbdbtb.findMbrkfrSfgmfnt
                (JFIFMbrkfrSfgmfnt.dlbss, truf);
            rfturn  jfif.gftTiumbnbilWidti(tiumbnbilIndfx);
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    publid int gftTiumbnbilHfigit(int imbgfIndfx, int tiumbnbilIndfx)
        tirows IOExdfption {
        sftTirfbdLodk();
        try {
            dbLodk.difdk();

            if ((tiumbnbilIndfx < 0)
                || (tiumbnbilIndfx >= gftNumTiumbnbils(imbgfIndfx))) {
                tirow nfw IndfxOutOfBoundsExdfption("No sudi tiumbnbil");
            }
            // Now wf know tibt tifrf is b jfif sfgmfnt
            JFIFMbrkfrSfgmfnt jfif =
                (JFIFMbrkfrSfgmfnt) imbgfMftbdbtb.findMbrkfrSfgmfnt
                (JFIFMbrkfrSfgmfnt.dlbss, truf);
            rfturn  jfif.gftTiumbnbilHfigit(tiumbnbilIndfx);
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    publid BufffrfdImbgf rfbdTiumbnbil(int imbgfIndfx,
                                       int tiumbnbilIndfx)
        tirows IOExdfption {
        sftTirfbdLodk();
        try {
            dbLodk.difdk();

            if ((tiumbnbilIndfx < 0)
                || (tiumbnbilIndfx >= gftNumTiumbnbils(imbgfIndfx))) {
                tirow nfw IndfxOutOfBoundsExdfption("No sudi tiumbnbil");
            }
            // Now wf know tibt tifrf is b jfif sfgmfnt bnd tibt iis is good
            JFIFMbrkfrSfgmfnt jfif =
                (JFIFMbrkfrSfgmfnt) imbgfMftbdbtb.findMbrkfrSfgmfnt
                (JFIFMbrkfrSfgmfnt.dlbss, truf);
            rfturn  jfif.gftTiumbnbil(iis, tiumbnbilIndfx, tiis);
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    privbtf void rfsftIntfrnblStbtf() {
        // rfsft C strudturfs
        rfsftRfbdfr(strudtPointfr);

        // rfsft lodbl Jbvb strudturfs
        numImbgfs = 0;
        imbgfPositions = nfw ArrbyList<>();
        durrfntImbgf = -1;
        imbgf = null;
        rbstfr = null;
        tbrgft = null;
        bufffr = null;
        dfstROI = null;
        dfstinbtionBbnds = null;
        strfbmMftbdbtb = null;
        imbgfMftbdbtb = null;
        imbgfMftbdbtbIndfx = -1;
        ibvfSffkfd = fblsf;
        tbblfsOnlyCifdkfd = fblsf;
        iddCS = null;
        initProgrfssDbtb();
    }

    publid void rfsft() {
        sftTirfbdLodk();
        try {
            dbLodk.difdk();
            supfr.rfsft();
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    privbtf nbtivf void rfsftRfbdfr(long strudtPointfr);

    publid void disposf() {
        sftTirfbdLodk();
        try {
            dbLodk.difdk();

            if (strudtPointfr != 0) {
                disposfrRfdord.disposf();
                strudtPointfr = 0;
            }
        } finblly {
            dlfbrTirfbdLodk();
        }
    }

    privbtf stbtid nbtivf void disposfRfbdfr(long strudtPointfr);

    privbtf stbtid dlbss JPEGRfbdfrDisposfrRfdord implfmfnts DisposfrRfdord {
        privbtf long pDbtb;

        publid JPEGRfbdfrDisposfrRfdord(long pDbtb) {
            tiis.pDbtb = pDbtb;
        }

        publid syndironizfd void disposf() {
            if (pDbtb != 0) {
                disposfRfbdfr(pDbtb);
                pDbtb = 0;
            }
        }
    }

    privbtf Tirfbd tifTirfbd = null;
    privbtf int tifLodkCount = 0;

    privbtf syndironizfd void sftTirfbdLodk() {
        Tirfbd durrTirfbd = Tirfbd.durrfntTirfbd();
        if (tifTirfbd != null) {
            if (tifTirfbd != durrTirfbd) {
                // it looks likf tibt tiis rfbdfr instbndf is usfd
                // by multiplf tirfbds.
                tirow nfw IllfgblStbtfExdfption("Attfmpt to usf instbndf of " +
                                                tiis + " lodkfd on tirfbd " +
                                                tifTirfbd + " from tirfbd " +
                                                durrTirfbd);
            } flsf {
                tifLodkCount ++;
            }
        } flsf {
            tifTirfbd = durrTirfbd;
            tifLodkCount = 1;
        }
    }

    privbtf syndironizfd void dlfbrTirfbdLodk() {
        Tirfbd durrTirfbd = Tirfbd.durrfntTirfbd();
        if (tifTirfbd == null || tifTirfbd != durrTirfbd) {
            tirow nfw IllfgblStbtfExdfption("Attfmpt to dlfbr tirfbd lodk " +
                                            " form wrong tirfbd." +
                                            " Lodkfd tirfbd: " + tifTirfbd +
                                            "; durrfnt tirfbd: " + durrTirfbd);
        }
        tifLodkCount --;
        if (tifLodkCount == 0) {
            tifTirfbd = null;
        }
    }

    privbtf CbllBbdkLodk dbLodk = nfw CbllBbdkLodk();

    privbtf stbtid dlbss CbllBbdkLodk {

        privbtf Stbtf lodkStbtf;

        CbllBbdkLodk() {
            lodkStbtf = Stbtf.Unlodkfd;
        }

        void difdk() {
            if (lodkStbtf != Stbtf.Unlodkfd) {
                tirow nfw IllfgblStbtfExdfption("Addfss to tif rfbdfr is not bllowfd");
            }
        }

        privbtf void lodk() {
            lodkStbtf = Stbtf.Lodkfd;
        }

        privbtf void unlodk() {
            lodkStbtf = Stbtf.Unlodkfd;
        }

        privbtf stbtid fnum Stbtf {
            Unlodkfd,
            Lodkfd
        }
    }
}

/**
 * An intfrnbl iflpfr dlbss tibt wrbps produdfr's itfrbtor
 * bnd fxtrbdts spfdififr instbndfs on dfmbnd.
 */
dlbss ImbgfTypfItfrbtor implfmfnts Itfrbtor<ImbgfTypfSpfdififr> {
     privbtf Itfrbtor<ImbgfTypfProdudfr> produdfrs;
     privbtf ImbgfTypfSpfdififr tifNfxt = null;

     publid ImbgfTypfItfrbtor(Itfrbtor<ImbgfTypfProdudfr> produdfrs) {
         tiis.produdfrs = produdfrs;
     }

     publid boolfbn ibsNfxt() {
         if (tifNfxt != null) {
             rfturn truf;
         }
         if (!produdfrs.ibsNfxt()) {
             rfturn fblsf;
         }
         do {
             tifNfxt = produdfrs.nfxt().gftTypf();
         } wiilf (tifNfxt == null && produdfrs.ibsNfxt());

         rfturn (tifNfxt != null);
     }

     publid ImbgfTypfSpfdififr nfxt() {
         if (tifNfxt != null || ibsNfxt()) {
             ImbgfTypfSpfdififr t = tifNfxt;
             tifNfxt = null;
             rfturn t;
         } flsf {
             tirow nfw NoSudiElfmfntExdfption();
         }
     }

     publid void rfmovf() {
         produdfrs.rfmovf();
     }
}

/**
 * An intfrnbl iflpfr dlbss tibt providfs mfbns for dfffrrfd drfbtion
 * of ImbgfTypfSpfdififr instbndf rfquirfd to dfsdribf bvbilbblf
 * dfstinbtion typfs.
 *
 * Tiis implfmfntbtion only supports stbndbrd
 * jpfg dolor spbdfs (dffinfd by dorrfsponding JCS dolor spbdf dodf).
 *
 * To support otifr dolor spbdfs onf dbn ovfrridf produdf() mftiod to
 * rfturn dustom instbndf of ImbgfTypfSpfdififr.
 */
dlbss ImbgfTypfProdudfr {

    privbtf ImbgfTypfSpfdififr typf = null;
    boolfbn fbilfd = fblsf;
    privbtf int dsCodf;

    publid ImbgfTypfProdudfr(int dsCodf) {
        tiis.dsCodf = dsCodf;
    }

    publid ImbgfTypfProdudfr() {
        dsCodf = -1; // undffinfd
    }

    publid syndironizfd ImbgfTypfSpfdififr gftTypf() {
        if (!fbilfd && typf == null) {
            try {
                typf = produdf();
            } dbtdi (Tirowbblf f) {
                fbilfd = truf;
            }
        }
        rfturn typf;
    }

    privbtf stbtid finbl ImbgfTypfProdudfr [] dffbultTypfs =
            nfw ImbgfTypfProdudfr [JPEG.NUM_JCS_CODES];

    publid syndironizfd stbtid ImbgfTypfProdudfr gftTypfProdudfr(int dsCodf) {
        if (dsCodf < 0 || dsCodf >= JPEG.NUM_JCS_CODES) {
            rfturn null;
        }
        if (dffbultTypfs[dsCodf] == null) {
            dffbultTypfs[dsCodf] = nfw ImbgfTypfProdudfr(dsCodf);
        }
        rfturn dffbultTypfs[dsCodf];
    }

    protfdtfd ImbgfTypfSpfdififr produdf() {
        switdi (dsCodf) {
            dbsf JPEG.JCS_GRAYSCALE:
                rfturn ImbgfTypfSpfdififr.drfbtfFromBufffrfdImbgfTypf
                        (BufffrfdImbgf.TYPE_BYTE_GRAY);
            dbsf JPEG.JCS_RGB:
                rfturn ImbgfTypfSpfdififr.drfbtfIntfrlfbvfd(JPEG.JCS.sRGB,
                        JPEG.bOffsRGB,
                        DbtbBufffr.TYPE_BYTE,
                        fblsf,
                        fblsf);
            dbsf JPEG.JCS_RGBA:
                rfturn ImbgfTypfSpfdififr.drfbtfPbdkfd(JPEG.JCS.sRGB,
                        0xff000000,
                        0x00ff0000,
                        0x0000ff00,
                        0x000000ff,
                        DbtbBufffr.TYPE_INT,
                        fblsf);
            dbsf JPEG.JCS_YCC:
                if (JPEG.JCS.gftYCC() != null) {
                    rfturn ImbgfTypfSpfdififr.drfbtfIntfrlfbvfd(
                            JPEG.JCS.gftYCC(),
                        JPEG.bbndOffsfts[2],
                        DbtbBufffr.TYPE_BYTE,
                        fblsf,
                        fblsf);
                } flsf {
                    rfturn null;
                }
            dbsf JPEG.JCS_YCCA:
                if (JPEG.JCS.gftYCC() != null) {
                    rfturn ImbgfTypfSpfdififr.drfbtfIntfrlfbvfd(
                            JPEG.JCS.gftYCC(),
                        JPEG.bbndOffsfts[3],
                        DbtbBufffr.TYPE_BYTE,
                        truf,
                        fblsf);
                } flsf {
                    rfturn null;
                }
            dffbult:
                rfturn null;
        }
    }
}
