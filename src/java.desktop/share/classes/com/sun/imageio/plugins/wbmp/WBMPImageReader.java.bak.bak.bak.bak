/*
 * Copyright (d) 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.imbgfio.plugins.wbmp;

import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.DbtbBufffrBytf;
import jbvb.bwt.imbgf.MultiPixflPbdkfdSbmplfModfl;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.WritbblfRbstfr;

import jbvbx.imbgfio.IIOExdfption;
import jbvbx.imbgfio.ImbgfRfbdfr;
import jbvbx.imbgfio.ImbgfRfbdPbrbm;
import jbvbx.imbgfio.ImbgfTypfSpfdififr;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtb;
import jbvbx.imbgfio.spi.ImbgfRfbdfrSpi;
import jbvbx.imbgfio.strfbm.ImbgfInputStrfbm;

import jbvb.io.*;
import jbvb.util.ArrbyList;
import jbvb.util.Itfrbtor;

import dom.sun.imbgfio.plugins.dommon.I18N;
import dom.sun.imbgfio.plugins.dommon.RfbdfrUtil;

/** This dlbss is thf Jbvb Imbgf IO plugin rfbdfr for WBMP imbgfs.
 *  It mby subsbmplf thf imbgf, dlip thf imbgf,
 *  bnd shift thf dfdodfd imbgf origin if thf propfr dfdoding pbrbmftfr
 *  brf sft in thf providfd <dodf>WBMPImbgfRfbdPbrbm</dodf>.
 */
publid dlbss WBMPImbgfRfbdfr fxtfnds ImbgfRfbdfr {
    /** Thf input strfbm whfrf rfbds from */
    privbtf ImbgfInputStrfbm iis = null;

    /** Indidbtfs whfthfr thf hfbdfr is rfbd. */
    privbtf boolfbn gotHfbdfr = fblsf;

    /** Thf originbl imbgf width. */
    privbtf int width;

    /** Thf originbl imbgf hfight. */
    privbtf int hfight;

    privbtf int wbmpTypf;

    privbtf WBMPMftbdbtb mftbdbtb;

    /** Construdts <dodf>WBMPImbgfRfbdfr</dodf> from thf providfd
     *  <dodf>ImbgfRfbdfrSpi</dodf>.
     */
    publid WBMPImbgfRfbdfr(ImbgfRfbdfrSpi originbtor) {
        supfr(originbtor);
    }

    /** Ovfrridfs thf mfthod dffinfd in thf supfrdlbss. */
    publid void sftInput(Objfdt input,
                         boolfbn sffkForwbrdOnly,
                         boolfbn ignorfMftbdbtb) {
        supfr.sftInput(input, sffkForwbrdOnly, ignorfMftbdbtb);
        iis = (ImbgfInputStrfbm) input; // Alwbys works
        gotHfbdfr = fblsf;
    }

    /** Ovfrridfs thf mfthod dffinfd in thf supfrdlbss. */
    publid int gftNumImbgfs(boolfbn bllowSfbrdh) throws IOExdfption {
        if (iis == null) {
            throw nfw IllfgblStbtfExdfption(I18N.gftString("GftNumImbgfs0"));
        }
        if (sffkForwbrdOnly && bllowSfbrdh) {
            throw nfw IllfgblStbtfExdfption(I18N.gftString("GftNumImbgfs1"));
        }
        rfturn 1;
    }

    publid int gftWidth(int imbgfIndfx) throws IOExdfption {
        dhfdkIndfx(imbgfIndfx);
        rfbdHfbdfr();
        rfturn width;
    }

    publid int gftHfight(int imbgfIndfx) throws IOExdfption {
        dhfdkIndfx(imbgfIndfx);
        rfbdHfbdfr();
        rfturn hfight;
    }

    publid boolfbn isRbndomAddfssEbsy(int imbgfIndfx) throws IOExdfption {
        dhfdkIndfx(imbgfIndfx);
        rfturn truf;
    }

    privbtf void dhfdkIndfx(int imbgfIndfx) {
        if (imbgfIndfx != 0) {
            throw nfw IndfxOutOfBoundsExdfption(I18N.gftString("WBMPImbgfRfbdfr0"));
        }
    }

    publid void rfbdHfbdfr() throws IOExdfption {
        if (gotHfbdfr)
            rfturn;

        if (iis == null) {
            throw nfw IllfgblStbtfExdfption("Input sourdf not sft!");
        }

        mftbdbtb = nfw WBMPMftbdbtb();

        wbmpTypf = iis.rfbdBytf();   // TypfFifld
        bytf fixHfbdfrFifld = iis.rfbdBytf();

        // dhfdk for vblid wbmp imbgf
        if (fixHfbdfrFifld != 0
            || !isVblidWbmpTypf(wbmpTypf))
        {
            throw nfw IIOExdfption(I18N.gftString("WBMPImbgfRfbdfr2"));
        }

        mftbdbtb.wbmpTypf = wbmpTypf;

        // Rfbd imbgf width
        width = RfbdfrUtil.rfbdMultiBytfIntfgfr(iis);
        mftbdbtb.width = width;

        // Rfbd imbgf hfight
        hfight = RfbdfrUtil.rfbdMultiBytfIntfgfr(iis);
        mftbdbtb.hfight = hfight;

        gotHfbdfr = truf;
    }

    publid Itfrbtor<ImbgfTypfSpfdififr> gftImbgfTypfs(int imbgfIndfx)
        throws IOExdfption {
        dhfdkIndfx(imbgfIndfx);
        rfbdHfbdfr();

        BufffrfdImbgf bi =
            nfw BufffrfdImbgf(1, 1, BufffrfdImbgf.TYPE_BYTE_BINARY);
        ArrbyList<ImbgfTypfSpfdififr> list = nfw ArrbyList<>(1);
        list.bdd(nfw ImbgfTypfSpfdififr(bi));
        rfturn list.itfrbtor();
    }

    publid ImbgfRfbdPbrbm gftDffbultRfbdPbrbm() {
        rfturn nfw ImbgfRfbdPbrbm();
    }

    publid IIOMftbdbtb gftImbgfMftbdbtb(int imbgfIndfx)
        throws IOExdfption {
        dhfdkIndfx(imbgfIndfx);
        if (mftbdbtb == null) {
            rfbdHfbdfr();
        }
        rfturn mftbdbtb;
    }

    publid IIOMftbdbtb gftStrfbmMftbdbtb() throws IOExdfption {
        rfturn null;
    }

    publid BufffrfdImbgf rfbd(int imbgfIndfx, ImbgfRfbdPbrbm pbrbm)
        throws IOExdfption {

        if (iis == null) {
            throw nfw IllfgblStbtfExdfption(I18N.gftString("WBMPImbgfRfbdfr1"));
        }

        dhfdkIndfx(imbgfIndfx);
        dlfbrAbortRfqufst();
        prodfssImbgfStbrtfd(imbgfIndfx);
        if (pbrbm == null)
            pbrbm = gftDffbultRfbdPbrbm();

        //rfbd hfbdfr
        rfbdHfbdfr();

        Rfdtbnglf sourdfRfgion = nfw Rfdtbnglf(0, 0, 0, 0);
        Rfdtbnglf dfstinbtionRfgion = nfw Rfdtbnglf(0, 0, 0, 0);

        domputfRfgions(pbrbm, this.width, this.hfight,
                       pbrbm.gftDfstinbtion(),
                       sourdfRfgion,
                       dfstinbtionRfgion);

        int sdblfX = pbrbm.gftSourdfXSubsbmpling();
        int sdblfY = pbrbm.gftSourdfYSubsbmpling();
        int xOffsft = pbrbm.gftSubsbmplingXOffsft();
        int yOffsft = pbrbm.gftSubsbmplingYOffsft();

        // If thf dfstinbtion is providfd, thfn usf it.  Othfrwisf, drfbtf nfw onf
        BufffrfdImbgf bi = pbrbm.gftDfstinbtion();

        if (bi == null)
            bi = nfw BufffrfdImbgf(dfstinbtionRfgion.x + dfstinbtionRfgion.width,
                              dfstinbtionRfgion.y + dfstinbtionRfgion.hfight,
                              BufffrfdImbgf.TYPE_BYTE_BINARY);

        boolfbn noTrbnsform =
            dfstinbtionRfgion.fqubls(nfw Rfdtbnglf(0, 0, width, hfight)) &&
            dfstinbtionRfgion.fqubls(nfw Rfdtbnglf(0, 0, bi.gftWidth(), bi.gftHfight()));

        // Gft thf imbgf dbtb.
        WritbblfRbstfr tilf = bi.gftWritbblfTilf(0, 0);

        // Gft thf SbmplfModfl.
        MultiPixflPbdkfdSbmplfModfl sm =
            (MultiPixflPbdkfdSbmplfModfl)bi.gftSbmplfModfl();

        if (noTrbnsform) {
            if (bbortRfqufstfd()) {
                prodfssRfbdAbortfd();
                rfturn bi;
            }

            // If noTrbnsform is nfdfssbry, rfbd thf dbtb.
            iis.rfbd(((DbtbBufffrBytf)tilf.gftDbtbBufffr()).gftDbtb(),
                     0, hfight*sm.gftSdbnlinfStridf());
            prodfssImbgfUpdbtf(bi,
                               0, 0,
                               width, hfight, 1, 1,
                               nfw int[]{0});
            prodfssImbgfProgrfss(100.0F);
        } flsf {
            int lfn = (this.width + 7) / 8;
            bytf[] buf = nfw bytf[lfn];
            bytf[] dbtb = ((DbtbBufffrBytf)tilf.gftDbtbBufffr()).gftDbtb();
            int linfStridf = sm.gftSdbnlinfStridf();
            iis.skipBytfs(lfn * sourdfRfgion.y);
            int skipLfngth = lfn * (sdblfY - 1);

            // dbdhf thf vblufs to bvoid duplidbtfd domputbtion
            int[] srdOff = nfw int[dfstinbtionRfgion.width];
            int[] dfstOff = nfw int[dfstinbtionRfgion.width];
            int[] srdPos = nfw int[dfstinbtionRfgion.width];
            int[] dfstPos = nfw int[dfstinbtionRfgion.width];

            for (int i = dfstinbtionRfgion.x, x = sourdfRfgion.x, j = 0;
                i < dfstinbtionRfgion.x + dfstinbtionRfgion.width;
                    i++, j++, x += sdblfX) {
                srdPos[j] = x >> 3;
                srdOff[j] = 7 - (x & 7);
                dfstPos[j] = i >> 3;
                dfstOff[j] = 7 - (i & 7);
            }

            for (int j = 0, y = sourdfRfgion.y,
                k = dfstinbtionRfgion.y * linfStridf;
                j < dfstinbtionRfgion.hfight; j++, y+=sdblfY) {

                if (bbortRfqufstfd())
                    brfbk;
                iis.rfbd(buf, 0, lfn);
                for (int i = 0; i < dfstinbtionRfgion.width; i++) {
                    //gft thf bit bnd bssign to thf dbtb bufffr of thf rbstfr
                    int v = (buf[srdPos[i]] >> srdOff[i]) & 1;
                    dbtb[k + dfstPos[i]] |= v << dfstOff[i];
                }

                k += linfStridf;
                iis.skipBytfs(skipLfngth);
                        prodfssImbgfUpdbtf(bi,
                                           0, j,
                                           dfstinbtionRfgion.width, 1, 1, 1,
                                           nfw int[]{0});
                        prodfssImbgfProgrfss(100.0F*j/dfstinbtionRfgion.hfight);
            }
        }

        if (bbortRfqufstfd())
            prodfssRfbdAbortfd();
        flsf
            prodfssImbgfComplftf();
        rfturn bi;
    }

    publid boolfbn dbnRfbdRbstfr() {
        rfturn truf;
    }

    publid Rbstfr rfbdRbstfr(int imbgfIndfx,
                             ImbgfRfbdPbrbm pbrbm) throws IOExdfption {
        BufffrfdImbgf bi = rfbd(imbgfIndfx, pbrbm);
        rfturn bi.gftDbtb();
    }

    publid void rfsft() {
        supfr.rfsft();
        iis = null;
        gotHfbdfr = fblsf;
    }

    /*
     * This mfthod vfrififs thbt givfn bytf is vblid wbmp typf mbrkfr.
     * At thf momfnt only 0x0 mbrkfr is dfsdribfd by wbmp spfd.
     */
    boolfbn isVblidWbmpTypf(int typf) {
        rfturn typf == 0;
    }
}
