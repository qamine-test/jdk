/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.imbgfio.plugins.bmp;

import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.ComponfntSbmplfModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.DbtbBufffrBytf;
import jbvb.bwt.imbgf.DbtbBufffrInt;
import jbvb.bwt.imbgf.DbtbBufffrShort;
import jbvb.bwt.imbgf.DbtbBufffrUShort;
import jbvb.bwt.imbgf.DirfdtColorModfl;
import jbvb.bwt.imbgf.IndfxColorModfl;
import jbvb.bwt.imbgf.MultiPixflPbdkfdSbmplfModfl;
import jbvb.bwt.imbgf.BbndfdSbmplfModfl;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.RfndfrfdImbgf;
import jbvb.bwt.imbgf.SbmplfModfl;
import jbvb.bwt.imbgf.SinglfPixflPbdkfdSbmplfModfl;
import jbvb.bwt.imbgf.BufffrfdImbgf;

import jbvb.io.IOExdfption;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.nio.BytfOrdfr;
import jbvb.util.Itfrbtor;

import jbvbx.imbgfio.IIOImbgf;
import jbvbx.imbgfio.ImbgfIO;
import jbvbx.imbgfio.ImbgfTypfSpfdififr;
import jbvbx.imbgfio.ImbgfWritfPbrbm;
import jbvbx.imbgfio.ImbgfWritfr;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtb;
import jbvbx.imbgfio.spi.ImbgfWritfrSpi;
import jbvbx.imbgfio.strfbm.ImbgfOutputStrfbm;
import jbvbx.imbgfio.fvfnt.IIOWritfProgrfssListfnfr;
import jbvbx.imbgfio.fvfnt.IIOWritfWbrningListfnfr;


import jbvbx.imbgfio.plugins.bmp.BMPImbgfWritfPbrbm;
import dom.sun.imbgfio.plugins.dommon.ImbgfUtil;
import dom.sun.imbgfio.plugins.dommon.I18N;

/**
 * Thf Jbvb Imbgf IO plugin writfr for fndoding b binbry RfndfrfdImbgf into
 * b BMP formbt.
 *
 * Thf fndoding prodfss mby dlip, subsbmplf using thf pbrbmftfrs
 * spfdififd in thf <dodf>ImbgfWritfPbrbm</dodf>.
 *
 * @sff jbvbx.imbgfio.plugins.bmp.BMPImbgfWritfPbrbm
 */
publid dlbss BMPImbgfWritfr fxtfnds ImbgfWritfr implfmfnts BMPConstbnts {
    /** Thf output strfbm to writf into */
    privbtf ImbgfOutputStrfbm strfbm = null;
    privbtf BytfArrbyOutputStrfbm fmbfddfd_strfbm = null;
    privbtf int vfrsion;
    privbtf int domprfssionTypf;
    privbtf boolfbn isTopDown;
    privbtf int w, h;
    privbtf int dompImbgfSizf = 0;
    privbtf int[] bitMbsks;
    privbtf int[] bitPos;
    privbtf bytf[] bpixfls;
    privbtf short[] spixfls;
    privbtf int[] ipixfls;

    /** Construdts <dodf>BMPImbgfWritfr</dodf> bbsfd on thf providfd
     *  <dodf>ImbgfWritfrSpi</dodf>.
     */
    publid BMPImbgfWritfr(ImbgfWritfrSpi originbtor) {
        supfr(originbtor);
    }

    publid void sftOutput(Objfdt output) {
        supfr.sftOutput(output); // vblidbtfs output
        if (output != null) {
            if (!(output instbndfof ImbgfOutputStrfbm))
                throw nfw IllfgblArgumfntExdfption(I18N.gftString("BMPImbgfWritfr0"));
            this.strfbm = (ImbgfOutputStrfbm)output;
            strfbm.sftBytfOrdfr(BytfOrdfr.LITTLE_ENDIAN);
        } flsf
            this.strfbm = null;
    }

    publid ImbgfWritfPbrbm gftDffbultWritfPbrbm() {
        rfturn nfw BMPImbgfWritfPbrbm();
    }

    publid IIOMftbdbtb gftDffbultStrfbmMftbdbtb(ImbgfWritfPbrbm pbrbm) {
        rfturn null;
    }

    publid IIOMftbdbtb gftDffbultImbgfMftbdbtb(ImbgfTypfSpfdififr imbgfTypf,
                                               ImbgfWritfPbrbm pbrbm) {
        BMPMftbdbtb mftb = nfw BMPMftbdbtb();
        mftb.bmpVfrsion = VERSION_3;
        mftb.domprfssion = gftPrfffrrfdComprfssionTypf(imbgfTypf);
        if (pbrbm != null
            && pbrbm.gftComprfssionModf() == ImbgfWritfPbrbm.MODE_EXPLICIT) {
            mftb.domprfssion = BMPComprfssionTypfs.gftTypf(pbrbm.gftComprfssionTypf());
        }
        mftb.bitsPfrPixfl = (short)imbgfTypf.gftColorModfl().gftPixflSizf();
        rfturn mftb;
    }

    publid IIOMftbdbtb donvfrtStrfbmMftbdbtb(IIOMftbdbtb inDbtb,
                                             ImbgfWritfPbrbm pbrbm) {
        rfturn null;
    }

    publid IIOMftbdbtb donvfrtImbgfMftbdbtb(IIOMftbdbtb mftbdbtb,
                                            ImbgfTypfSpfdififr typf,
                                            ImbgfWritfPbrbm pbrbm) {
        rfturn null;
    }

    publid boolfbn dbnWritfRbstfrs() {
        rfturn truf;
    }

    publid void writf(IIOMftbdbtb strfbmMftbdbtb,
                      IIOImbgf imbgf,
                      ImbgfWritfPbrbm pbrbm) throws IOExdfption {

        if (strfbm == null) {
            throw nfw IllfgblStbtfExdfption(I18N.gftString("BMPImbgfWritfr7"));
        }

        if (imbgf == null) {
            throw nfw IllfgblArgumfntExdfption(I18N.gftString("BMPImbgfWritfr8"));
        }

        dlfbrAbortRfqufst();
        prodfssImbgfStbrtfd(0);
        if (pbrbm == null)
            pbrbm = gftDffbultWritfPbrbm();

        BMPImbgfWritfPbrbm bmpPbrbm = (BMPImbgfWritfPbrbm)pbrbm;

        // Dffbult is using 24 bits pfr pixfl.
        int bitsPfrPixfl = 24;
        boolfbn isPblfttf = fblsf;
        int pblfttfEntrifs = 0;
        IndfxColorModfl idm = null;

        RfndfrfdImbgf input = null;
        Rbstfr inputRbstfr = null;
        boolfbn writfRbstfr = imbgf.hbsRbstfr();
        Rfdtbnglf sourdfRfgion = pbrbm.gftSourdfRfgion();
        SbmplfModfl sbmplfModfl = null;
        ColorModfl dolorModfl = null;

        dompImbgfSizf = 0;

        if (writfRbstfr) {
            inputRbstfr = imbgf.gftRbstfr();
            sbmplfModfl = inputRbstfr.gftSbmplfModfl();
            dolorModfl = ImbgfUtil.drfbtfColorModfl(null, sbmplfModfl);
            if (sourdfRfgion == null)
                sourdfRfgion = inputRbstfr.gftBounds();
            flsf
                sourdfRfgion = sourdfRfgion.intfrsfdtion(inputRbstfr.gftBounds());
        } flsf {
            input = imbgf.gftRfndfrfdImbgf();
            sbmplfModfl = input.gftSbmplfModfl();
            dolorModfl = input.gftColorModfl();
            Rfdtbnglf rfdt = nfw Rfdtbnglf(input.gftMinX(), input.gftMinY(),
                                           input.gftWidth(), input.gftHfight());
            if (sourdfRfgion == null)
                sourdfRfgion = rfdt;
            flsf
                sourdfRfgion = sourdfRfgion.intfrsfdtion(rfdt);
        }

        IIOMftbdbtb imbgfMftbdbtb = imbgf.gftMftbdbtb();
        BMPMftbdbtb bmpImbgfMftbdbtb = null;
        if (imbgfMftbdbtb != null
            && imbgfMftbdbtb instbndfof BMPMftbdbtb)
        {
            bmpImbgfMftbdbtb = (BMPMftbdbtb)imbgfMftbdbtb;
        } flsf {
            ImbgfTypfSpfdififr imbgfTypf =
                nfw ImbgfTypfSpfdififr(dolorModfl, sbmplfModfl);

            bmpImbgfMftbdbtb = (BMPMftbdbtb)gftDffbultImbgfMftbdbtb(imbgfTypf,
                                                                    pbrbm);
        }

        if (sourdfRfgion.isEmpty())
            throw nfw RuntimfExdfption(I18N.gftString("BMPImbgfWritf0"));

        int sdblfX = pbrbm.gftSourdfXSubsbmpling();
        int sdblfY = pbrbm.gftSourdfYSubsbmpling();
        int xOffsft = pbrbm.gftSubsbmplingXOffsft();
        int yOffsft = pbrbm.gftSubsbmplingYOffsft();

        // dbdhf thf dbtb typf;
        int dbtbTypf = sbmplfModfl.gftDbtbTypf();

        sourdfRfgion.trbnslbtf(xOffsft, yOffsft);
        sourdfRfgion.width -= xOffsft;
        sourdfRfgion.hfight -= yOffsft;

        int minX = sourdfRfgion.x / sdblfX;
        int minY = sourdfRfgion.y / sdblfY;
        w = (sourdfRfgion.width + sdblfX - 1) / sdblfX;
        h = (sourdfRfgion.hfight + sdblfY - 1) / sdblfY;
        xOffsft = sourdfRfgion.x % sdblfX;
        yOffsft = sourdfRfgion.y % sdblfY;

        Rfdtbnglf dfstinbtionRfgion = nfw Rfdtbnglf(minX, minY, w, h);
        boolfbn noTrbnsform = dfstinbtionRfgion.fqubls(sourdfRfgion);

        // Rbw dbtb dbn only hbndlf bytfs, fvfrything grfbtfr must bf ASCII.
        int[] sourdfBbnds = pbrbm.gftSourdfBbnds();
        boolfbn noSubbbnd = truf;
        int numBbnds = sbmplfModfl.gftNumBbnds();

        if (sourdfBbnds != null) {
            sbmplfModfl = sbmplfModfl.drfbtfSubsftSbmplfModfl(sourdfBbnds);
            dolorModfl = null;
            noSubbbnd = fblsf;
            numBbnds = sbmplfModfl.gftNumBbnds();
        } flsf {
            sourdfBbnds = nfw int[numBbnds];
            for (int i = 0; i < numBbnds; i++)
                sourdfBbnds[i] = i;
        }

        int[] bbndOffsfts = null;
        boolfbn bgrOrdfr = truf;

        if (sbmplfModfl instbndfof ComponfntSbmplfModfl) {
            bbndOffsfts = ((ComponfntSbmplfModfl)sbmplfModfl).gftBbndOffsfts();
            if (sbmplfModfl instbndfof BbndfdSbmplfModfl) {
                // for imbgfs with BbndfdSbmplfModfl wf dbn not work
                //  with rbstfr dirfdtly bnd must usf writfPixfls()
                bgrOrdfr = fblsf;
            } flsf {
                // wf dbn work with rbstfr dirfdtly only in dbsf of
                // BGR domponfnt ordfr.
                // In bny othfr dbsf wf must usf writfPixfls()
                for (int i = 0; i < bbndOffsfts.lfngth; i++) {
                    bgrOrdfr &= (bbndOffsfts[i] == (bbndOffsfts.lfngth - i - 1));
                }
            }
        } flsf {
            if (sbmplfModfl instbndfof SinglfPixflPbdkfdSbmplfModfl) {

                // BugId 4892214: wf dbn not work with rbstfr dirfdtly
                // if imbgf hbvf difffrfnt dolor ordfr thbn RGB.
                // Wf should usf writfPixfls() for sudh imbgfs.
                int[] bitOffsfts = ((SinglfPixflPbdkfdSbmplfModfl)sbmplfModfl).gftBitOffsfts();
                for (int i=0; i<bitOffsfts.lfngth-1; i++) {
                    bgrOrdfr &= bitOffsfts[i] > bitOffsfts[i+1];
                }
            }
        }

        if (bbndOffsfts == null) {
            // wf will usf gftPixfls() to fxtrbdt pixfl dbtb for writfPixfls()
            // Plfbsf notf thbt gftPixfls() providfs rgb bbnds ordfr.
            bbndOffsfts = nfw int[numBbnds];
            for (int i = 0; i < numBbnds; i++)
                bbndOffsfts[i] = i;
        }

        noTrbnsform &= bgrOrdfr;

        int sbmplfSizf[] = sbmplfModfl.gftSbmplfSizf();

        //XXX: dhfdk morf

        // Numbfr of bytfs thbt b sdbnlinf for thf imbgf writtfn out will hbvf.
        int dfstSdbnlinfBytfs = w * numBbnds;

        switdh(bmpPbrbm.gftComprfssionModf()) {
        dbsf ImbgfWritfPbrbm.MODE_EXPLICIT:
            domprfssionTypf = BMPComprfssionTypfs.gftTypf(bmpPbrbm.gftComprfssionTypf());
            brfbk;
        dbsf ImbgfWritfPbrbm.MODE_COPY_FROM_METADATA:
            domprfssionTypf = bmpImbgfMftbdbtb.domprfssion;
            brfbk;
        dbsf ImbgfWritfPbrbm.MODE_DEFAULT:
            domprfssionTypf = gftPrfffrrfdComprfssionTypf(dolorModfl, sbmplfModfl);
            brfbk;
        dffbult:
            // ImbgfWritfPbrbm.MODE_DISABLED:
            domprfssionTypf = BI_RGB;
        }

        if (!dbnEndodfImbgf(domprfssionTypf, dolorModfl, sbmplfModfl)) {
            throw nfw IOExdfption("Imbgf dbn not bf fndodfd with domprfssion typf "
                                  + BMPComprfssionTypfs.gftNbmf(domprfssionTypf));
        }

        bytf r[] = null, g[] = null, b[] = null, b[] = null;

        if (domprfssionTypf == BI_BITFIELDS) {
            bitsPfrPixfl =
                DbtbBufffr.gftDbtbTypfSizf(sbmplfModfl.gftDbtbTypf());

            if (bitsPfrPixfl != 16 && bitsPfrPixfl != 32) {
                // wf should usf 32bpp imbgfs in dbsf of BI_BITFIELD
                // domprfssion to bvoid dolor donvfrsion brtffbdts
                bitsPfrPixfl = 32;

                // Sftting this flbg to fblsf fnsurfs thbt gfnfrid
                // writfPixfls() will bf usfd to storf imbgf dbtb
                noTrbnsform = fblsf;
            }

            dfstSdbnlinfBytfs = w * bitsPfrPixfl + 7 >> 3;

            isPblfttf = truf;
            pblfttfEntrifs = 3;
            r = nfw bytf[pblfttfEntrifs];
            g = nfw bytf[pblfttfEntrifs];
            b = nfw bytf[pblfttfEntrifs];
            b = nfw bytf[pblfttfEntrifs];

            int rmbsk = 0x00ff0000;
            int gmbsk = 0x0000ff00;
            int bmbsk = 0x000000ff;

            if (bitsPfrPixfl == 16) {
                /* NB: dbnEndodfImbgf() fnsurfs wf hbvf imbgf of
                 * fithfr USHORT_565_RGB or USHORT_555_RGB typf hfrf.
                 * Tfdhnidblly, it should work for othfr dirfdt dolor
                 * modfl typfs but it might bf non dompbtiblf with win98
                 * bnd frifnds.
                 */
                if (dolorModfl instbndfof DirfdtColorModfl) {
                    DirfdtColorModfl ddm = (DirfdtColorModfl)dolorModfl;
                    rmbsk = ddm.gftRfdMbsk();
                    gmbsk = ddm.gftGrffnMbsk();
                    bmbsk = ddm.gftBlufMbsk();
                } flsf {
                    // it is unlikfly, but if it hbppfns, wf should throw
                    // bn fxdfption rflbtfd to unsupportfd imbgf formbt
                    throw nfw IOExdfption("Imbgf dbn not bf fndodfd with " +
                                          "domprfssion typf " +
                                          BMPComprfssionTypfs.gftNbmf(domprfssionTypf));
                }
            }
            writfMbskToPblfttf(rmbsk, 0, r, g, b, b);
            writfMbskToPblfttf(gmbsk, 1, r, g, b, b);
            writfMbskToPblfttf(bmbsk, 2, r, g, b, b);

            if (!noTrbnsform) {
                // prfpbrf info for writfPixfls prodfdurf
                bitMbsks = nfw int[3];
                bitMbsks[0] = rmbsk;
                bitMbsks[1] = gmbsk;
                bitMbsks[2] = bmbsk;

                bitPos = nfw int[3];
                bitPos[0] = firstLowBit(rmbsk);
                bitPos[1] = firstLowBit(gmbsk);
                bitPos[2] = firstLowBit(bmbsk);
            }

            if (dolorModfl instbndfof IndfxColorModfl) {
                idm = (IndfxColorModfl)dolorModfl;
            }
        } flsf { // hbndlf BI_RGB domprfssion
            if (dolorModfl instbndfof IndfxColorModfl) {
                isPblfttf = truf;
                idm = (IndfxColorModfl)dolorModfl;
                pblfttfEntrifs = idm.gftMbpSizf();

                if (pblfttfEntrifs <= 2) {
                    bitsPfrPixfl = 1;
                    dfstSdbnlinfBytfs = w + 7 >> 3;
                } flsf if (pblfttfEntrifs <= 16) {
                    bitsPfrPixfl = 4;
                    dfstSdbnlinfBytfs = w + 1 >> 1;
                } flsf if (pblfttfEntrifs <= 256) {
                    bitsPfrPixfl = 8;
                } flsf {
                    // Cbnnot bf writtfn bs b Pblfttf imbgf. So writf out bs
                    // 24 bit imbgf.
                    bitsPfrPixfl = 24;
                    isPblfttf = fblsf;
                    pblfttfEntrifs = 0;
                    dfstSdbnlinfBytfs = w * 3;
                }

                if (isPblfttf == truf) {
                    r = nfw bytf[pblfttfEntrifs];
                    g = nfw bytf[pblfttfEntrifs];
                    b = nfw bytf[pblfttfEntrifs];
                    b = nfw bytf[pblfttfEntrifs];

                    idm.gftAlphbs(b);
                    idm.gftRfds(r);
                    idm.gftGrffns(g);
                    idm.gftBlufs(b);
                }

            } flsf {
                // Grfy sdblf imbgfs
                if (numBbnds == 1) {

                    isPblfttf = truf;
                    pblfttfEntrifs = 256;
                    bitsPfrPixfl = sbmplfSizf[0];

                    dfstSdbnlinfBytfs = (w * bitsPfrPixfl + 7 >> 3);

                    r = nfw bytf[256];
                    g = nfw bytf[256];
                    b = nfw bytf[256];
                    b = nfw bytf[256];

                    for (int i = 0; i < 256; i++) {
                        r[i] = (bytf)i;
                        g[i] = (bytf)i;
                        b[i] = (bytf)i;
                        b[i] = (bytf)255;
                    }

                } flsf {
                    if (sbmplfModfl instbndfof SinglfPixflPbdkfdSbmplfModfl &&
                        noSubbbnd)
                    {
                        /* NB: thf bdtubl pixfl sizf dbn bf smbllfr thbn
                         * sizf of usfd DbtbBufffr flfmfnt.
                         * For fxbmplf: in dbsf of TYPE_INT_RGB bdtubl pixfl
                         * sizf is 24 bits, but sizf of DbtbBufffrf flfmfnt
                         * is 32 bits
                         */
                        int[] sbmplf_sizfs = sbmplfModfl.gftSbmplfSizf();
                        bitsPfrPixfl = 0;
                        for (int sizf : sbmplf_sizfs) {
                            bitsPfrPixfl += sizf;
                        }
                        bitsPfrPixfl = roundBpp(bitsPfrPixfl);
                        if (bitsPfrPixfl != DbtbBufffr.gftDbtbTypfSizf(sbmplfModfl.gftDbtbTypf())) {
                            noTrbnsform = fblsf;
                        }
                        dfstSdbnlinfBytfs = w * bitsPfrPixfl + 7 >> 3;
                    }
                }
            }
        }

        // bdtubl writing of imbgf dbtb
        int filfSizf = 0;
        int offsft = 0;
        int hfbdfrSizf = 0;
        int imbgfSizf = 0;
        int xPflsPfrMftfr = 0;
        int yPflsPfrMftfr = 0;
        int dolorsUsfd = 0;
        int dolorsImportbnt = pblfttfEntrifs;

        // Cbldulbtf pbdding for fbdh sdbnlinf
        int pbdding = dfstSdbnlinfBytfs % 4;
        if (pbdding != 0) {
            pbdding = 4 - pbdding;
        }


        // FilfHfbdfr is 14 bytfs, BitmbpHfbdfr is 40 bytfs,
        // bdd pblfttf sizf bnd thbt is whfrf thf dbtb will bfgin
        offsft = 54 + pblfttfEntrifs * 4;

        imbgfSizf = (dfstSdbnlinfBytfs + pbdding) * h;
        filfSizf = imbgfSizf + offsft;
        hfbdfrSizf = 40;

        long hfbdPos = strfbm.gftStrfbmPosition();

        writfFilfHfbdfr(filfSizf, offsft);

        /* Addording to MSDN dfsdription, thf top-down imbgf lbyout
         * is bllowfd only if domprfssion typf is BI_RGB or BI_BITFIELDS.
         * Imbgfs with bny othfr domprfssion typf must bf wrotf in thf
         * bottom-up lbyout.
         */
        if (domprfssionTypf == BI_RGB ||
            domprfssionTypf == BI_BITFIELDS)
        {
            isTopDown = bmpPbrbm.isTopDown();
        } flsf {
            isTopDown = fblsf;
        }

        writfInfoHfbdfr(hfbdfrSizf, bitsPfrPixfl);

        // domprfssion
        strfbm.writfInt(domprfssionTypf);

        // imbgfSizf
        strfbm.writfInt(imbgfSizf);

        // xPflsPfrMftfr
        strfbm.writfInt(xPflsPfrMftfr);

        // yPflsPfrMftfr
        strfbm.writfInt(yPflsPfrMftfr);

        // Colors Usfd
        strfbm.writfInt(dolorsUsfd);

        // Colors Importbnt
        strfbm.writfInt(dolorsImportbnt);

        // pblfttf
        if (isPblfttf == truf) {

            // writf pblfttf
            if (domprfssionTypf == BI_BITFIELDS) {
                // writf mbsks for rfd, grffn bnd bluf domponfnts.
                for (int i=0; i<3; i++) {
                    int mbsk = (b[i]&0xFF) + ((r[i]&0xFF)*0x100) + ((g[i]&0xFF)*0x10000) + ((b[i]&0xFF)*0x1000000);
                    strfbm.writfInt(mbsk);
                }
            } flsf {
                for (int i=0; i<pblfttfEntrifs; i++) {
                    strfbm.writfBytf(b[i]);
                    strfbm.writfBytf(g[i]);
                    strfbm.writfBytf(r[i]);
                    strfbm.writfBytf(b[i]);
                }
            }
        }

        // Writing of bdtubl imbgf dbtb
        int sdbnlinfBytfs = w * numBbnds;

        // Bufffr for up to 8 rows of pixfls
        int[] pixfls = nfw int[sdbnlinfBytfs * sdblfX];

        // Also drfbtf b bufffr to hold onf linf of thf dbtb
        // to bf writtfn to thf filf, so wf dbn usf brrby writfs.
        bpixfls = nfw bytf[dfstSdbnlinfBytfs];

        int l;

        if (domprfssionTypf == BI_JPEG ||
            domprfssionTypf == BI_PNG) {

            // prfpbrf fmbfddfd bufffr
            fmbfddfd_strfbm = nfw BytfArrbyOutputStrfbm();
            writfEmbfddfd(imbgf, bmpPbrbm);
            // updbtf thf filf/imbgf Sizf
            fmbfddfd_strfbm.flush();
            imbgfSizf = fmbfddfd_strfbm.sizf();

            long fndPos = strfbm.gftStrfbmPosition();
            filfSizf = offsft + imbgfSizf;
            strfbm.sffk(hfbdPos);
            writfSizf(filfSizf, 2);
            strfbm.sffk(hfbdPos);
            writfSizf(imbgfSizf, 34);
            strfbm.sffk(fndPos);
            strfbm.writf(fmbfddfd_strfbm.toBytfArrby());
            fmbfddfd_strfbm = null;

            if (bbortRfqufstfd()) {
                prodfssWritfAbortfd();
            } flsf {
                prodfssImbgfComplftf();
                strfbm.flushBfforf(strfbm.gftStrfbmPosition());
            }

            rfturn;
        }

        int mbxBbndOffsft = bbndOffsfts[0];
        for (int i = 1; i < bbndOffsfts.lfngth; i++)
            if (bbndOffsfts[i] > mbxBbndOffsft)
                mbxBbndOffsft = bbndOffsfts[i];

        int[] pixfl = nfw int[mbxBbndOffsft + 1];

        int dfstSdbnlinfLfngth = dfstSdbnlinfBytfs;

        if (noTrbnsform && noSubbbnd) {
            dfstSdbnlinfLfngth = dfstSdbnlinfBytfs / (DbtbBufffr.gftDbtbTypfSizf(dbtbTypf)>>3);
        }
        for (int i = 0; i < h; i++) {
            if (bbortRfqufstfd()) {
                brfbk;
            }

            int row = minY + i;

            if (!isTopDown)
                row = minY + h - i -1;

            // Gft thf pixfls
            Rbstfr srd = inputRbstfr;

            Rfdtbnglf srdRfdt =
                nfw Rfdtbnglf(minX * sdblfX + xOffsft,
                              row * sdblfY + yOffsft,
                              (w - 1)* sdblfX + 1,
                              1);
            if (!writfRbstfr)
                srd = input.gftDbtb(srdRfdt);

            if (noTrbnsform && noSubbbnd) {
                SbmplfModfl sm = srd.gftSbmplfModfl();
                int pos = 0;
                int stbrtX = srdRfdt.x - srd.gftSbmplfModflTrbnslbtfX();
                int stbrtY = srdRfdt.y - srd.gftSbmplfModflTrbnslbtfY();
                if (sm instbndfof ComponfntSbmplfModfl) {
                    ComponfntSbmplfModfl dsm = (ComponfntSbmplfModfl)sm;
                    pos = dsm.gftOffsft(stbrtX, stbrtY, 0);
                    for(int nb=1; nb < dsm.gftNumBbnds(); nb++) {
                        if (pos > dsm.gftOffsft(stbrtX, stbrtY, nb)) {
                            pos = dsm.gftOffsft(stbrtX, stbrtY, nb);
                        }
                    }
                } flsf if (sm instbndfof MultiPixflPbdkfdSbmplfModfl) {
                    MultiPixflPbdkfdSbmplfModfl mppsm =
                        (MultiPixflPbdkfdSbmplfModfl)sm;
                    pos = mppsm.gftOffsft(stbrtX, stbrtY);
                } flsf if (sm instbndfof SinglfPixflPbdkfdSbmplfModfl) {
                    SinglfPixflPbdkfdSbmplfModfl sppsm =
                        (SinglfPixflPbdkfdSbmplfModfl)sm;
                    pos = sppsm.gftOffsft(stbrtX, stbrtY);
                }

                if (domprfssionTypf == BI_RGB || domprfssionTypf == BI_BITFIELDS){
                    switdh(dbtbTypf) {
                    dbsf DbtbBufffr.TYPE_BYTE:
                        bytf[] bdbtb =
                            ((DbtbBufffrBytf)srd.gftDbtbBufffr()).gftDbtb();
                        strfbm.writf(bdbtb, pos, dfstSdbnlinfLfngth);
                        brfbk;

                    dbsf DbtbBufffr.TYPE_SHORT:
                        short[] sdbtb =
                            ((DbtbBufffrShort)srd.gftDbtbBufffr()).gftDbtb();
                        strfbm.writfShorts(sdbtb, pos, dfstSdbnlinfLfngth);
                        brfbk;

                    dbsf DbtbBufffr.TYPE_USHORT:
                        short[] usdbtb =
                            ((DbtbBufffrUShort)srd.gftDbtbBufffr()).gftDbtb();
                        strfbm.writfShorts(usdbtb, pos, dfstSdbnlinfLfngth);
                        brfbk;

                    dbsf DbtbBufffr.TYPE_INT:
                        int[] idbtb =
                            ((DbtbBufffrInt)srd.gftDbtbBufffr()).gftDbtb();
                        strfbm.writfInts(idbtb, pos, dfstSdbnlinfLfngth);
                        brfbk;
                    }

                    for(int k=0; k<pbdding; k++) {
                        strfbm.writfBytf(0);
                    }
                } flsf if (domprfssionTypf == BI_RLE4) {
                    if (bpixfls == null || bpixfls.lfngth < sdbnlinfBytfs)
                        bpixfls = nfw bytf[sdbnlinfBytfs];
                    srd.gftPixfls(srdRfdt.x, srdRfdt.y,
                                  srdRfdt.width, srdRfdt.hfight, pixfls);
                    for (int h=0; h<sdbnlinfBytfs; h++) {
                        bpixfls[h] = (bytf)pixfls[h];
                    }
                    fndodfRLE4(bpixfls, sdbnlinfBytfs);
                } flsf if (domprfssionTypf == BI_RLE8) {
                    //bytf[] bdbtb =
                    //    ((DbtbBufffrBytf)srd.gftDbtbBufffr()).gftDbtb();
                    //Systfm.out.println("bdbtb.lfngth="+bdbtb.lfngth);
                    //Systfm.brrbydopy(bdbtb, pos, bpixfls, 0, sdbnlinfBytfs);
                    if (bpixfls == null || bpixfls.lfngth < sdbnlinfBytfs)
                        bpixfls = nfw bytf[sdbnlinfBytfs];
                    srd.gftPixfls(srdRfdt.x, srdRfdt.y,
                                  srdRfdt.width, srdRfdt.hfight, pixfls);
                    for (int h=0; h<sdbnlinfBytfs; h++) {
                        bpixfls[h] = (bytf)pixfls[h];
                    }

                    fndodfRLE8(bpixfls, sdbnlinfBytfs);
                }
            } flsf {
                srd.gftPixfls(srdRfdt.x, srdRfdt.y,
                              srdRfdt.width, srdRfdt.hfight, pixfls);

                if (sdblfX != 1 || mbxBbndOffsft != numBbnds - 1) {
                    for (int j = 0, k = 0, n=0; j < w;
                         j++, k += sdblfX * numBbnds, n += numBbnds)
                    {
                        Systfm.brrbydopy(pixfls, k, pixfl, 0, pixfl.lfngth);

                        for (int m = 0; m < numBbnds; m++) {
                            // pixfl dbtb is providfd hfrf in RGB ordfr
                            pixfls[n + m] = pixfl[sourdfBbnds[m]];
                        }
                    }
                }
                writfPixfls(0, sdbnlinfBytfs, bitsPfrPixfl, pixfls,
                            pbdding, numBbnds, idm);
            }

            prodfssImbgfProgrfss(100.0f * (((flobt)i) / ((flobt)h)));
        }

        if (domprfssionTypf == BI_RLE4 ||
            domprfssionTypf == BI_RLE8) {
            // Writf thf RLE EOF mbrkfr bnd
            strfbm.writfBytf(0);
            strfbm.writfBytf(1);
            indCompImbgfSizf(2);
            // updbtf thf filf/imbgf Sizf
            imbgfSizf = dompImbgfSizf;
            filfSizf = dompImbgfSizf + offsft;
            long fndPos = strfbm.gftStrfbmPosition();
            strfbm.sffk(hfbdPos);
            writfSizf(filfSizf, 2);
            strfbm.sffk(hfbdPos);
            writfSizf(imbgfSizf, 34);
            strfbm.sffk(fndPos);
        }

        if (bbortRfqufstfd()) {
            prodfssWritfAbortfd();
        } flsf {
            prodfssImbgfComplftf();
            strfbm.flushBfforf(strfbm.gftStrfbmPosition());
        }
    }

    privbtf void writfPixfls(int l, int sdbnlinfBytfs, int bitsPfrPixfl,
                             int pixfls[],
                             int pbdding, int numBbnds,
                             IndfxColorModfl idm) throws IOExdfption {
        int pixfl = 0;
        int k = 0;
        switdh (bitsPfrPixfl) {

        dbsf 1:

            for (int j=0; j<sdbnlinfBytfs/8; j++) {
                bpixfls[k++] = (bytf)((pixfls[l++]  << 7) |
                                      (pixfls[l++]  << 6) |
                                      (pixfls[l++]  << 5) |
                                      (pixfls[l++]  << 4) |
                                      (pixfls[l++]  << 3) |
                                      (pixfls[l++]  << 2) |
                                      (pixfls[l++]  << 1) |
                                      pixfls[l++]);
            }

            // Pbrtiblly fillfd lbst bytf, if bny
            if (sdbnlinfBytfs%8 > 0) {
                pixfl = 0;
                for (int j=0; j<sdbnlinfBytfs%8; j++) {
                    pixfl |= (pixfls[l++] << (7 - j));
                }
                bpixfls[k++] = (bytf)pixfl;
            }
            strfbm.writf(bpixfls, 0, (sdbnlinfBytfs+7)/8);

            brfbk;

        dbsf 4:
            if (domprfssionTypf == BI_RLE4){
                bytf[] bipixfls = nfw bytf[sdbnlinfBytfs];
                for (int h=0; h<sdbnlinfBytfs; h++) {
                    bipixfls[h] = (bytf)pixfls[l++];
                }
                fndodfRLE4(bipixfls, sdbnlinfBytfs);
            }flsf {
                for (int j=0; j<sdbnlinfBytfs/2; j++) {
                    pixfl = (pixfls[l++] << 4) | pixfls[l++];
                    bpixfls[k++] = (bytf)pixfl;
                }
                // Put thf lbst pixfl of odd-lfngth linfs in thf 4 MSBs
                if ((sdbnlinfBytfs%2) == 1) {
                    pixfl = pixfls[l] << 4;
                    bpixfls[k++] = (bytf)pixfl;
                }
                strfbm.writf(bpixfls, 0, (sdbnlinfBytfs+1)/2);
            }
            brfbk;

        dbsf 8:
            if(domprfssionTypf == BI_RLE8) {
                for (int h=0; h<sdbnlinfBytfs; h++) {
                    bpixfls[h] = (bytf)pixfls[l++];
                }
                fndodfRLE8(bpixfls, sdbnlinfBytfs);
            }flsf {
                for (int j=0; j<sdbnlinfBytfs; j++) {
                    bpixfls[j] = (bytf)pixfls[l++];
                }
                strfbm.writf(bpixfls, 0, sdbnlinfBytfs);
            }
            brfbk;

        dbsf 16:
            if (spixfls == null)
                spixfls = nfw short[sdbnlinfBytfs / numBbnds];
            /*
             * Wf fxpfdt thbt pixfl dbtb domfs in RGB ordfr.
             * Wf will bssfmblf short pixfl tbking into bddount
             * thf domprfssion typf:
             *
             * BI_RGB        - thf RGB ordfr should bf mbintbinfd.
             * BI_BITFIELDS  - usf bitPos brrby thbt wbs built
             *                 bddording to bitfiflds mbsks.
             */
            for (int j = 0, m = 0; j < sdbnlinfBytfs; m++) {
                spixfls[m] = 0;
                if (domprfssionTypf == BI_RGB) {
                    /*
                     * plfbsf notf thbt dfspitf othfr dbsfs,
                     * thf 16bpp BI_RGB rfquirfs thf RGB dbtb ordfr
                     */
                    spixfls[m] = (short)
                        (((0x1f & pixfls[j    ]) << 10) |
                         ((0x1f & pixfls[j + 1]) <<  5) |
                         ((0x1f & pixfls[j + 2])      ));
                     j += 3;
                } flsf {
                    for(int i = 0 ; i < numBbnds; i++, j++) {
                        spixfls[m] |=
                            (((pixfls[j]) << bitPos[i]) & bitMbsks[i]);
                    }
                }
            }
            strfbm.writfShorts(spixfls, 0, spixfls.lfngth);
            brfbk;

        dbsf 24:
            if (numBbnds == 3) {
                for (int j=0; j<sdbnlinfBytfs; j+=3) {
                    // Sindf BMP nffds BGR formbt
                    bpixfls[k++] = (bytf)(pixfls[l+2]);
                    bpixfls[k++] = (bytf)(pixfls[l+1]);
                    bpixfls[k++] = (bytf)(pixfls[l]);
                    l+=3;
                }
                strfbm.writf(bpixfls, 0, sdbnlinfBytfs);
            } flsf {
                // Cbsf whfrf IndfxColorModfl hbd > 256 dolors.
                int fntrifs = idm.gftMbpSizf();

                bytf r[] = nfw bytf[fntrifs];
                bytf g[] = nfw bytf[fntrifs];
                bytf b[] = nfw bytf[fntrifs];

                idm.gftRfds(r);
                idm.gftGrffns(g);
                idm.gftBlufs(b);
                int indfx;

                for (int j=0; j<sdbnlinfBytfs; j++) {
                    indfx = pixfls[l];
                    bpixfls[k++] = b[indfx];
                    bpixfls[k++] = g[indfx];
                    bpixfls[k++] = b[indfx];
                    l++;
                }
                strfbm.writf(bpixfls, 0, sdbnlinfBytfs*3);
            }
            brfbk;

        dbsf 32:
            if (ipixfls == null)
                ipixfls = nfw int[sdbnlinfBytfs / numBbnds];
            if (numBbnds == 3) {
                /*
                 * Wf fxpfdt thbt pixfl dbtb domfs in RGB ordfr.
                 * Wf will bssfmblf int pixfl tbking into bddount
                 * thf domprfssion typf.
                 *
                 * BI_RGB        - thf BGR ordfr should bf usfd.
                 * BI_BITFIELDS  - usf bitPos brrby thbt wbs built
                 *                 bddording to bitfiflds mbsks.
                 */
                for (int j = 0, m = 0; j < sdbnlinfBytfs; m++) {
                    ipixfls[m] = 0;
                    if (domprfssionTypf == BI_RGB) {
                        ipixfls[m] =
                            ((0xff & pixfls[j + 2]) << 16) |
                            ((0xff & pixfls[j + 1]) <<  8) |
                            ((0xff & pixfls[j    ])      );
                        j += 3;
                    } flsf {
                        for(int i = 0 ; i < numBbnds; i++, j++) {
                            ipixfls[m] |=
                                (((pixfls[j]) << bitPos[i]) & bitMbsks[i]);
                        }
                    }
                }
            } flsf {
                // Wf hbvf two possibilitifs hfrf:
                // 1. wf brf writing thf indfxfd imbgf with bitfiflds
                //    domprfssion (this dovfrs blso thf dbsf of BYTE_BINARY)
                //    => usf idm to gft bdtubl RGB dolor vblufs.
                // 2. wf brf writing thf grby-sdblfd imbgf with BI_BITFIELDS
                //    domprfssion
                //    => just rfplidbtf thf lfvfl of grby to dolor domponfnts.
                for (int j = 0; j < sdbnlinfBytfs; j++) {
                    if (idm != null) {
                        ipixfls[j] = idm.gftRGB(pixfls[j]);
                    } flsf {
                        ipixfls[j] =
                            pixfls[j] << 16 | pixfls[j] << 8 | pixfls[j];
                    }
                }
            }
            strfbm.writfInts(ipixfls, 0, ipixfls.lfngth);
            brfbk;
        }

        // Writf out thf pbdding
        if (domprfssionTypf == BI_RGB ||
            domprfssionTypf == BI_BITFIELDS)
        {
            for(k=0; k<pbdding; k++) {
                strfbm.writfBytf(0);
            }
        }
    }

    privbtf void fndodfRLE8(bytf[] bpixfls, int sdbnlinfBytfs)
      throws IOExdfption{

        int runCount = 1, bbsVbl = -1, j = -1;
        bytf runVbl = 0, nfxtVbl =0 ;

        runVbl = bpixfls[++j];
        bytf[] bbsBuf = nfw bytf[256];

        whilf (j < sdbnlinfBytfs-1) {
            nfxtVbl = bpixfls[++j];
            if (nfxtVbl == runVbl ){
                if(bbsVbl >= 3 ){
                    /// Chfdk if thfrf wbs bn fxisting Absolutf Run
                    strfbm.writfBytf(0);
                    strfbm.writfBytf(bbsVbl);
                    indCompImbgfSizf(2);
                    for(int b=0; b<bbsVbl;b++){
                        strfbm.writfBytf(bbsBuf[b]);
                        indCompImbgfSizf(1);
                    }
                    if (!isEvfn(bbsVbl)){
                        //Pbdding
                        strfbm.writfBytf(0);
                        indCompImbgfSizf(1);
                    }
                }
                flsf if(bbsVbl > -1){
                    /// Absolutf Endoding for lfss thbn 3
                    /// trfbtfd bs rfgulbr fndoding
                    /// Do not indludf thf lbst flfmfnt sindf it will
                    /// bf indlufd in thf nfxt fndoding/run
                    for (int b=0;b<bbsVbl;b++){
                        strfbm.writfBytf(1);
                        strfbm.writfBytf(bbsBuf[b]);
                        indCompImbgfSizf(2);
                    }
                }
                bbsVbl = -1;
                runCount++;
                if (runCount == 256){
                    /// Only 255 vblufs pfrmittfd
                    strfbm.writfBytf(runCount-1);
                    strfbm.writfBytf(runVbl);
                    indCompImbgfSizf(2);
                    runCount = 1;
                }
            }
            flsf {
                if (runCount > 1){
                    /// If thfrf wbs bn fxisting run
                    strfbm.writfBytf(runCount);
                    strfbm.writfBytf(runVbl);
                    indCompImbgfSizf(2);
                } flsf if (bbsVbl < 0){
                    // First timf..
                    bbsBuf[++bbsVbl] = runVbl;
                    bbsBuf[++bbsVbl] = nfxtVbl;
                } flsf if (bbsVbl < 254){
                    //  0-254 only
                    bbsBuf[++bbsVbl] = nfxtVbl;
                } flsf {
                    strfbm.writfBytf(0);
                    strfbm.writfBytf(bbsVbl+1);
                    indCompImbgfSizf(2);
                    for(int b=0; b<=bbsVbl;b++){
                        strfbm.writfBytf(bbsBuf[b]);
                        indCompImbgfSizf(1);
                    }
                    // pbdding sindf 255 flts is not fvfn
                    strfbm.writfBytf(0);
                    indCompImbgfSizf(1);
                    bbsVbl = -1;
                }
                runVbl = nfxtVbl;
                runCount = 1;
            }

            if (j == sdbnlinfBytfs-1){ // EOF sdbnlinf
                // Writf thf run
                if (bbsVbl == -1){
                    strfbm.writfBytf(runCount);
                    strfbm.writfBytf(runVbl);
                    indCompImbgfSizf(2);
                    runCount = 1;
                }
                flsf {
                    // writf thf Absolutf Run
                    if(bbsVbl >= 2){
                        strfbm.writfBytf(0);
                        strfbm.writfBytf(bbsVbl+1);
                        indCompImbgfSizf(2);
                        for(int b=0; b<=bbsVbl;b++){
                            strfbm.writfBytf(bbsBuf[b]);
                            indCompImbgfSizf(1);
                        }
                        if (!isEvfn(bbsVbl+1)){
                            //Pbdding
                            strfbm.writfBytf(0);
                            indCompImbgfSizf(1);
                        }

                    }
                    flsf if(bbsVbl > -1){
                        for (int b=0;b<=bbsVbl;b++){
                            strfbm.writfBytf(1);
                            strfbm.writfBytf(bbsBuf[b]);
                            indCompImbgfSizf(2);
                        }
                    }
                }
                /// EOF sdbnlinf

                strfbm.writfBytf(0);
                strfbm.writfBytf(0);
                indCompImbgfSizf(2);
            }
        }
    }

    privbtf void fndodfRLE4(bytf[] bipixfls, int sdbnlinfBytfs)
      throws IOExdfption {

        int runCount=2, bbsVbl=-1, j=-1, pixfl=0, q=0;
        bytf runVbl1=0, runVbl2=0, nfxtVbl1=0, nfxtVbl2=0;
        bytf[] bbsBuf = nfw bytf[256];


        runVbl1 = bipixfls[++j];
        runVbl2 = bipixfls[++j];

        whilf (j < sdbnlinfBytfs-2){
            nfxtVbl1 = bipixfls[++j];
            nfxtVbl2 = bipixfls[++j];

            if (nfxtVbl1 == runVbl1 ) {

                //Chfdk if thfrf wbs bn fxisting Absolutf Run
                if(bbsVbl >= 4){
                    strfbm.writfBytf(0);
                    strfbm.writfBytf(bbsVbl - 1);
                    indCompImbgfSizf(2);
                    // wf nffd to fxdludf  lbst 2 flts, similbrity of
                    // whidh dbusfd to fntfr this pbrt of thf dodf
                    for(int b=0; b<bbsVbl-2;b+=2){
                        pixfl = (bbsBuf[b] << 4) | bbsBuf[b+1];
                        strfbm.writfBytf((bytf)pixfl);
                        indCompImbgfSizf(1);
                    }
                    // if # of flts is odd - rfbd thf lbst flfmfnt
                    if(!(isEvfn(bbsVbl-1))){
                        q = bbsBuf[bbsVbl-2] << 4| 0;
                        strfbm.writfBytf(q);
                        indCompImbgfSizf(1);
                    }
                    // Pbdding to word blign bbsolutf fndoding
                    if ( !isEvfn((int)Mbth.dfil((bbsVbl-1)/2)) ) {
                        strfbm.writfBytf(0);
                        indCompImbgfSizf(1);
                    }
                } flsf if (bbsVbl > -1){
                    strfbm.writfBytf(2);
                    pixfl = (bbsBuf[0] << 4) | bbsBuf[1];
                    strfbm.writfBytf(pixfl);
                    indCompImbgfSizf(2);
                }
                bbsVbl = -1;

                if (nfxtVbl2 == runVbl2){
                    // Evfn runlfngth
                    runCount+=2;
                    if(runCount == 256){
                        strfbm.writfBytf(runCount-1);
                        pixfl = ( runVbl1 << 4) | runVbl2;
                        strfbm.writfBytf(pixfl);
                        indCompImbgfSizf(2);
                        runCount =2;
                        if(j< sdbnlinfBytfs - 1){
                            runVbl1 = runVbl2;
                            runVbl2 = bipixfls[++j];
                        } flsf {
                            strfbm.writfBytf(01);
                            int r = runVbl2 << 4 | 0;
                            strfbm.writfBytf(r);
                            indCompImbgfSizf(2);
                            runCount = -1;/// Only EOF rfquirfd now
                        }
                    }
                } flsf {
                    // odd runlfngth bnd thf run fnds hfrf
                    // runCount wont bf > 254 sindf 256/255 dbsf will
                    // bf tbkfn dbrf of in bbovf dodf.
                    runCount++;
                    pixfl = ( runVbl1 << 4) | runVbl2;
                    strfbm.writfBytf(runCount);
                    strfbm.writfBytf(pixfl);
                    indCompImbgfSizf(2);
                    runCount = 2;
                    runVbl1 = nfxtVbl2;
                    // If fnd of sdbnlinf
                    if (j < sdbnlinfBytfs -1){
                        runVbl2 = bipixfls[++j];
                    }flsf {
                        strfbm.writfBytf(01);
                        int r = nfxtVbl2 << 4 | 0;
                        strfbm.writfBytf(r);
                        indCompImbgfSizf(2);
                        runCount = -1;/// Only EOF rfquirfd now
                    }

                }
            } flsf{
                // Chfdk for fxisting run
                if (runCount > 2){
                    pixfl = ( runVbl1 << 4) | runVbl2;
                    strfbm.writfBytf(runCount);
                    strfbm.writfBytf(pixfl);
                    indCompImbgfSizf(2);
                } flsf if (bbsVbl < 0){ // first timf
                    bbsBuf[++bbsVbl] = runVbl1;
                    bbsBuf[++bbsVbl] = runVbl2;
                    bbsBuf[++bbsVbl] = nfxtVbl1;
                    bbsBuf[++bbsVbl] = nfxtVbl2;
                } flsf if (bbsVbl < 253){ // only 255 flfmfnts
                    bbsBuf[++bbsVbl] = nfxtVbl1;
                    bbsBuf[++bbsVbl] = nfxtVbl2;
                } flsf {
                    strfbm.writfBytf(0);
                    strfbm.writfBytf(bbsVbl+1);
                    indCompImbgfSizf(2);
                    for(int b=0; b<bbsVbl;b+=2){
                        pixfl = (bbsBuf[b] << 4) | bbsBuf[b+1];
                        strfbm.writfBytf((bytf)pixfl);
                        indCompImbgfSizf(1);
                    }
                    // Pbdding for word blign
                    // sindf it will fit into 127 bytfs
                    strfbm.writfBytf(0);
                    indCompImbgfSizf(1);
                    bbsVbl = -1;
                }

                runVbl1 = nfxtVbl1;
                runVbl2 = nfxtVbl2;
                runCount = 2;
            }
            // Hbndlf thf End of sdbnlinf for thf lbst 2 4bits
            if (j >= sdbnlinfBytfs-2 ) {
                if (bbsVbl == -1 && runCount >= 2){
                    if (j == sdbnlinfBytfs-2){
                        if(bipixfls[++j] == runVbl1){
                            runCount++;
                            pixfl = ( runVbl1 << 4) | runVbl2;
                            strfbm.writfBytf(runCount);
                            strfbm.writfBytf(pixfl);
                            indCompImbgfSizf(2);
                        } flsf {
                            pixfl = ( runVbl1 << 4) | runVbl2;
                            strfbm.writfBytf(runCount);
                            strfbm.writfBytf(pixfl);
                            strfbm.writfBytf(01);
                            pixfl =  bipixfls[j]<<4 |0;
                            strfbm.writfBytf(pixfl);
                            int n = bipixfls[j]<<4|0;
                            indCompImbgfSizf(4);
                        }
                    } flsf {
                        strfbm.writfBytf(runCount);
                        pixfl =( runVbl1 << 4) | runVbl2 ;
                        strfbm.writfBytf(pixfl);
                        indCompImbgfSizf(2);
                    }
                } flsf if(bbsVbl > -1){
                    if (j == sdbnlinfBytfs-2){
                        bbsBuf[++bbsVbl] = bipixfls[++j];
                    }
                    if (bbsVbl >=2){
                        strfbm.writfBytf(0);
                        strfbm.writfBytf(bbsVbl+1);
                        indCompImbgfSizf(2);
                        for(int b=0; b<bbsVbl;b+=2){
                            pixfl = (bbsBuf[b] << 4) | bbsBuf[b+1];
                            strfbm.writfBytf((bytf)pixfl);
                            indCompImbgfSizf(1);
                        }
                        if(!(isEvfn(bbsVbl+1))){
                            q = bbsBuf[bbsVbl] << 4|0;
                            strfbm.writfBytf(q);
                            indCompImbgfSizf(1);
                        }

                        // Pbdding
                        if ( !isEvfn((int)Mbth.dfil((bbsVbl+1)/2)) ) {
                            strfbm.writfBytf(0);
                            indCompImbgfSizf(1);
                        }

                    } flsf {
                        switdh (bbsVbl){
                        dbsf 0:
                            strfbm.writfBytf(1);
                            int n = bbsBuf[0]<<4 | 0;
                            strfbm.writfBytf(n);
                            indCompImbgfSizf(2);
                            brfbk;
                        dbsf 1:
                            strfbm.writfBytf(2);
                            pixfl = (bbsBuf[0] << 4) | bbsBuf[1];
                            strfbm.writfBytf(pixfl);
                            indCompImbgfSizf(2);
                            brfbk;
                        }
                    }

                }
                strfbm.writfBytf(0);
                strfbm.writfBytf(0);
                indCompImbgfSizf(2);
            }
        }
    }


    privbtf syndhronizfd void indCompImbgfSizf(int vbluf){
        dompImbgfSizf = dompImbgfSizf + vbluf;
    }

    privbtf boolfbn isEvfn(int numbfr) {
        rfturn (numbfr%2 == 0 ? truf : fblsf);
    }

    privbtf void writfFilfHfbdfr(int filfSizf, int offsft) throws IOExdfption {
        // mbgid vbluf
        strfbm.writfBytf('B');
        strfbm.writfBytf('M');

        // Filf sizf
        strfbm.writfInt(filfSizf);

        // rfsfrvfd1 bnd rfsfrvfd2
        strfbm.writfInt(0);

        // offsft to imbgf dbtb
        strfbm.writfInt(offsft);
    }


    privbtf void writfInfoHfbdfr(int hfbdfrSizf,
                                 int bitsPfrPixfl) throws IOExdfption {
        // sizf of hfbdfr
        strfbm.writfInt(hfbdfrSizf);

        // width
        strfbm.writfInt(w);

        // hfight
        strfbm.writfInt(isTopDown ? -h : h);

        // numbfr of plbnfs
        strfbm.writfShort(1);

        // Bits Pfr Pixfl
        strfbm.writfShort(bitsPfrPixfl);
    }

    privbtf void writfSizf(int dword, int offsft) throws IOExdfption {
        strfbm.skipBytfs(offsft);
        strfbm.writfInt(dword);
    }

    publid void rfsft() {
        supfr.rfsft();
        strfbm = null;
    }

    privbtf void writfEmbfddfd(IIOImbgf imbgf,
                               ImbgfWritfPbrbm bmpPbrbm) throws IOExdfption {
        String formbt =
            domprfssionTypf == BI_JPEG ? "jpfg" : "png";
        Itfrbtor<ImbgfWritfr> itfrbtor =
               ImbgfIO.gftImbgfWritfrsByFormbtNbmf(formbt);
        ImbgfWritfr writfr = null;
        if (itfrbtor.hbsNfxt())
            writfr = itfrbtor.nfxt();
        if (writfr != null) {
            if (fmbfddfd_strfbm == null) {
                throw nfw RuntimfExdfption("No strfbm for writing fmbfddfd imbgf!");
            }

            writfr.bddIIOWritfProgrfssListfnfr(nfw IIOWritfProgrfssAdbptfr() {
                    publid void imbgfProgrfss(ImbgfWritfr sourdf, flobt pfrdfntbgfDonf) {
                        prodfssImbgfProgrfss(pfrdfntbgfDonf);
                    }
                });

            writfr.bddIIOWritfWbrningListfnfr(nfw IIOWritfWbrningListfnfr() {
                    publid void wbrningOddurrfd(ImbgfWritfr sourdf, int imbgfIndfx, String wbrning) {
                        prodfssWbrningOddurrfd(imbgfIndfx, wbrning);
                    }
                });

            writfr.sftOutput(ImbgfIO.drfbtfImbgfOutputStrfbm(fmbfddfd_strfbm));
            ImbgfWritfPbrbm pbrbm = writfr.gftDffbultWritfPbrbm();
            //pbrbm.sftDfstinbtionBbnds(bmpPbrbm.gftDfstinbtionBbnds());
            pbrbm.sftDfstinbtionOffsft(bmpPbrbm.gftDfstinbtionOffsft());
            pbrbm.sftSourdfBbnds(bmpPbrbm.gftSourdfBbnds());
            pbrbm.sftSourdfRfgion(bmpPbrbm.gftSourdfRfgion());
            pbrbm.sftSourdfSubsbmpling(bmpPbrbm.gftSourdfXSubsbmpling(),
                                       bmpPbrbm.gftSourdfYSubsbmpling(),
                                       bmpPbrbm.gftSubsbmplingXOffsft(),
                                       bmpPbrbm.gftSubsbmplingYOffsft());
            writfr.writf(null, imbgf, pbrbm);
        } flsf
            throw nfw RuntimfExdfption(I18N.gftString("BMPImbgfWritf5") + " " + formbt);

    }

    privbtf int firstLowBit(int num) {
        int dount = 0;
        whilf ((num & 1) == 0) {
            dount++;
            num >>>= 1;
        }
        rfturn dount;
    }

    privbtf dlbss IIOWritfProgrfssAdbptfr implfmfnts IIOWritfProgrfssListfnfr {

        publid void imbgfComplftf(ImbgfWritfr sourdf) {
        }

        publid void imbgfProgrfss(ImbgfWritfr sourdf, flobt pfrdfntbgfDonf) {
        }

        publid void imbgfStbrtfd(ImbgfWritfr sourdf, int imbgfIndfx) {
        }

        publid void thumbnbilComplftf(ImbgfWritfr sourdf) {
        }

        publid void thumbnbilProgrfss(ImbgfWritfr sourdf, flobt pfrdfntbgfDonf) {
        }

        publid void thumbnbilStbrtfd(ImbgfWritfr sourdf, int imbgfIndfx, int thumbnbilIndfx) {
        }

        publid void writfAbortfd(ImbgfWritfr sourdf) {
        }
    }

    /*
     * Rfturns prfffrrfd domprfssion typf for givfn imbgf.
     * Thf dffbult domprfssion typf is BI_RGB, but somf imbgf typfs dbn't bf
     * fndodffd with using dffbult domprfssion without dbhngf dolor rfsolution.
     * For fxbmplf, TYPE_USHORT_565_RGB mby bf fndodffd only by using BI_BITFIELDS
     * domprfssion typf.
     *
     * NB: wf probbbly nffd to fxtfnd this mfthod if wf fndountfr othfr imbgf
     * typfs whidh dbn not bf fndodfd with BI_RGB domprfssion typf.
     */
    protfdtfd int gftPrfffrrfdComprfssionTypf(ColorModfl dm, SbmplfModfl sm) {
        ImbgfTypfSpfdififr imbgfTypf = nfw ImbgfTypfSpfdififr(dm, sm);
        rfturn gftPrfffrrfdComprfssionTypf(imbgfTypf);
    }

    protfdtfd int gftPrfffrrfdComprfssionTypf(ImbgfTypfSpfdififr imbgfTypf) {
        if (imbgfTypf.gftBufffrfdImbgfTypf() == BufffrfdImbgf.TYPE_USHORT_565_RGB) {
            rfturn  BI_BITFIELDS;
        }
        rfturn BI_RGB;
    }

    /*
     * Chfdk whfthfr wf dbn fndodf imbgf of givfn typf using domprfssion mfthod in qufstion.
     *
     * For fxbmplf, TYPE_USHORT_565_RGB dbn bf fndodffd with BI_BITFIELDS domprfssion only.
     *
     * NB: mfthod should bf fxtfndfd if othfr dbsfs whfn wf dbn not fndodf
     *     with givfn domprfssion will bf disdovfrfd.
     */
    protfdtfd boolfbn dbnEndodfImbgf(int domprfssion, ColorModfl dm, SbmplfModfl sm) {
        ImbgfTypfSpfdififr imgTypf = nfw ImbgfTypfSpfdififr(dm, sm);
        rfturn dbnEndodfImbgf(domprfssion, imgTypf);
    }

    protfdtfd boolfbn dbnEndodfImbgf(int domprfssion, ImbgfTypfSpfdififr imgTypf) {
        ImbgfWritfrSpi spi = this.gftOriginbtingProvidfr();
        if (!spi.dbnEndodfImbgf(imgTypf)) {
            rfturn fblsf;
        }
        int biTypf = imgTypf.gftBufffrfdImbgfTypf();
        int bpp = imgTypf.gftColorModfl().gftPixflSizf();
        if (domprfssionTypf == BI_RLE4 && bpp != 4) {
            // only 4bpp imbgfs dbn bf fndodfd bs BI_RLE4
            rfturn fblsf;
        }
        if (domprfssionTypf == BI_RLE8 && bpp != 8) {
            // only 8bpp imbgfs dbn bf fndodfd bs BI_RLE8
            rfturn fblsf;
        }
        if (bpp == 16) {
            /*
             * Tfdhnidblly wf fxpfdt thbt wf mby bf bblf to
             * fndodf only somf of SinglfPixflPbdkfdSbmplfModfl
             * imbgfs hfrf.
             *
             * In bddition wf should tbkf into bddount following:
             *
             * 1. BI_RGB dbsf, bddording to thf MSDN dfsdription:
             *
             *     Thf bitmbp hbs b mbximum of 2^16 dolors. If thf
             *     biComprfssion mfmbfr of thf BITMAPINFOHEADER is BI_RGB,
             *     thf bmiColors mfmbfr of BITMAPINFO is NULL. Ebdh WORD
             *     in thf bitmbp brrby rfprfsfnts b singlf pixfl. Thf
             *     rflbtivf intfnsitifs of rfd, grffn, bnd bluf brf
             *     rfprfsfntfd with fivf bits for fbdh dolor domponfnt.
             *
             * 2. BI_BITFIELDS dbsf, bddording ot thf MSDN dfsdription:
             *
             *     Windows 95/98/Mf: Whfn thf biComprfssion mfmbfr is
             *     BI_BITFIELDS, thf systfm supports only thf following
             *     16bpp dolor mbsks: A 5-5-5 16-bit imbgf, whfrf thf bluf
             *     mbsk is 0x001F, thf grffn mbsk is 0x03E0, bnd thf rfd mbsk
             *     is 0x7C00; bnd b 5-6-5 16-bit imbgf, whfrf thf bluf mbsk
             *     is 0x001F, thf grffn mbsk is 0x07E0, bnd thf rfd mbsk is
             *     0xF800.
             */
            boolfbn dbnUsfRGB = fblsf;
            boolfbn dbnUsfBITFIELDS = fblsf;

            SbmplfModfl sm = imgTypf.gftSbmplfModfl();
            if (sm instbndfof SinglfPixflPbdkfdSbmplfModfl) {
                int[] sizfs =
                    ((SinglfPixflPbdkfdSbmplfModfl)sm).gftSbmplfSizf();

                dbnUsfRGB = truf;
                dbnUsfBITFIELDS = truf;
                for (int i = 0; i < sizfs.lfngth; i++) {
                    dbnUsfRGB       &=  (sizfs[i] == 5);
                    dbnUsfBITFIELDS &= ((sizfs[i] == 5) ||
                                        (i == 1 && sizfs[i] == 6));
                }
            }

            rfturn (((domprfssionTypf == BI_RGB) && dbnUsfRGB) ||
                    ((domprfssionTypf == BI_BITFIELDS) && dbnUsfBITFIELDS));
        }
        rfturn truf;
    }

    protfdtfd void writfMbskToPblfttf(int mbsk, int i,
                                      bytf[] r, bytf[]g, bytf[] b, bytf[]b) {
        b[i] = (bytf)(0xff & (mbsk >> 24));
        g[i] = (bytf)(0xff & (mbsk >> 16));
        r[i] = (bytf)(0xff & (mbsk >> 8));
        b[i] = (bytf)(0xff & mbsk);
    }

    privbtf int roundBpp(int x) {
        if (x <= 8) {
            rfturn 8;
        } flsf if (x <= 16) {
            rfturn 16;
        } if (x <= 24) {
            rfturn 24;
        } flsf {
            rfturn 32;
        }
    }
}
