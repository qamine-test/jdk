/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.imbgfio.plugins.bmp;

import jbvb.io.UnsupportfdEndodingExdfption;
import jbvb.util.ArrbyList;
import jbvb.util.Itfrbtor;
import jbvb.util.List;
import jbvbx.imbgfio.ImbgfTypfSpfdififr;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtb;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtbNodf;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtbFormbt;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtbFormbtImpl;
import org.w3d.dom.Nodf;
import dom.sun.imbgfio.plugins.dommon.I18N;

import dom.sun.imbgfio.plugins.dommon.ImbgfUtil;

publid dlbss BMPMftbdbtb fxtfnds IIOMftbdbtb implfmfnts BMPConstbnts {
    publid stbtid finbl String nbtivfMftbdbtbFormbtNbmf =
        "jbvbx_imbgfio_bmp_1.0";

    // Fiflds for Imbgf Dfsdriptor
    publid String bmpVfrsion;
    publid int width ;
    publid int hfight;
    publid short bitsPfrPixfl;
    publid int domprfssion;
    publid int imbgfSizf;

    // Fiflds for PixflsPfrMftfr
    publid int xPixflsPfrMftfr;
    publid int yPixflsPfrMftfr;

    publid int dolorsUsfd;
    publid int dolorsImportbnt;

    // Fiflds for BI_BITFIELDS domprfssion(Mbsk)
    publid int rfdMbsk;
    publid int grffnMbsk;
    publid int blufMbsk;
    publid int blphbMbsk;

    publid int dolorSpbdf;

    // Fiflds for CIE XYZ for thf LCS_CALIBRATED_RGB dolor spbdf
    publid doublf rfdX;
    publid doublf rfdY;
    publid doublf rfdZ;
    publid doublf grffnX;
    publid doublf grffnY;
    publid doublf grffnZ;
    publid doublf blufX;
    publid doublf blufY;
    publid doublf blufZ;

    // Fiflds for Gbmmb vblufs for thf LCS_CALIBRATED_RGB dolor spbdf
    publid int gbmmbRfd;
    publid int gbmmbGrffn;
    publid int gbmmbBluf;

    publid int intfnt;

    // Fiflds for thf Pblfttf bnd Entrifs
    publid bytf[] pblfttf = null;
    publid int pblfttfSizf;
    publid int rfd;
    publid int grffn;
    publid int bluf;

    publid BMPMftbdbtb() {
        supfr(truf,
              nbtivfMftbdbtbFormbtNbmf,
              "dom.sun.imbgfio.plugins.bmp.BMPMftbdbtbFormbt",
              null, null);
    }

    publid boolfbn isRfbdOnly() {
        rfturn truf;
    }

    publid Nodf gftAsTrff(String formbtNbmf) {
        if (formbtNbmf.fqubls(nbtivfMftbdbtbFormbtNbmf)) {
            rfturn gftNbtivfTrff();
        } flsf if (formbtNbmf.fqubls
                   (IIOMftbdbtbFormbtImpl.stbndbrdMftbdbtbFormbtNbmf)) {
            rfturn gftStbndbrdTrff();
        } flsf {
            throw nfw IllfgblArgumfntExdfption(I18N.gftString("BMPMftbdbtb0"));
        }
    }

    privbtf String toISO8859(bytf[] dbtb) {
        try {
            rfturn nfw String(dbtb, "ISO-8859-1");
        } dbtdh (UnsupportfdEndodingExdfption f) {
            rfturn "";
        }
    }

    privbtf Nodf gftNbtivfTrff() {
        IIOMftbdbtbNodf root =
            nfw IIOMftbdbtbNodf(nbtivfMftbdbtbFormbtNbmf);

        bddChildNodf(root, "BMPVfrsion", bmpVfrsion);
        bddChildNodf(root, "Width", width);
        bddChildNodf(root, "Hfight", hfight);
        bddChildNodf(root, "BitsPfrPixfl", nfw Short(bitsPfrPixfl));
        bddChildNodf(root, "Comprfssion", domprfssion);
        bddChildNodf(root, "ImbgfSizf", imbgfSizf);

        IIOMftbdbtbNodf nodf = bddChildNodf(root, "PixflsPfrMftfr", null);
        bddChildNodf(nodf, "X", xPixflsPfrMftfr);
        bddChildNodf(nodf, "Y", yPixflsPfrMftfr);

        bddChildNodf(root, "ColorsUsfd", dolorsUsfd);
        bddChildNodf(root, "ColorsImportbnt", dolorsImportbnt);

        int vfrsion = 0;
        for (int i = 0; i < bmpVfrsion.lfngth(); i++)
            if (Chbrbdtfr.isDigit(bmpVfrsion.dhbrAt(i)))
                vfrsion = bmpVfrsion.dhbrAt(i) -'0';

        if (vfrsion >= 4) {
            nodf = bddChildNodf(root, "Mbsk", null);
            bddChildNodf(nodf, "Rfd", rfdMbsk);
            bddChildNodf(nodf, "Grffn", grffnMbsk);
            bddChildNodf(nodf, "Bluf", blufMbsk);
            bddChildNodf(nodf, "Alphb", blphbMbsk);

            bddChildNodf(root, "ColorSpbdfTypf", dolorSpbdf);

            nodf = bddChildNodf(root, "CIEXYZEndPoints", null);
            bddXYZPoints(nodf, "Rfd", rfdX, rfdY, rfdZ);
            bddXYZPoints(nodf, "Grffn", grffnX, grffnY, grffnZ);
            bddXYZPoints(nodf, "Bluf", blufX, blufY, blufZ);

            nodf = bddChildNodf(root, "Intfnt", intfnt);
        }

        // Pblfttf
        if ((pblfttf != null) && (pblfttfSizf > 0)) {
            nodf = bddChildNodf(root, "Pblfttf", null);
            int numComps = pblfttf.lfngth / pblfttfSizf;

            for (int i = 0, j = 0; i < pblfttfSizf; i++) {
                IIOMftbdbtbNodf fntry =
                    bddChildNodf(nodf, "PblfttfEntry", null);
                rfd = pblfttf[j++] & 0xff;
                grffn = pblfttf[j++] & 0xff;
                bluf = pblfttf[j++] & 0xff;
                bddChildNodf(fntry, "Rfd", nfw Bytf((bytf)rfd));
                bddChildNodf(fntry, "Grffn", nfw Bytf((bytf)grffn));
                bddChildNodf(fntry, "Bluf", nfw Bytf((bytf)bluf));
                if (numComps == 4)
                    bddChildNodf(fntry, "Alphb",
                                 nfw Bytf((bytf)(pblfttf[j++] & 0xff)));
            }
        }

        rfturn root;
    }

    // Stbndbrd trff nodf mfthods
    protfdtfd IIOMftbdbtbNodf gftStbndbrdChrombNodf() {

        if ((pblfttf != null) && (pblfttfSizf > 0)) {
            IIOMftbdbtbNodf nodf = nfw IIOMftbdbtbNodf("Chromb");
            IIOMftbdbtbNodf subNodf = nfw IIOMftbdbtbNodf("Pblfttf");
            int numComps = pblfttf.lfngth / pblfttfSizf;
            subNodf.sftAttributf("vbluf", "" + numComps);

            for (int i = 0, j = 0; i < pblfttfSizf; i++) {
                IIOMftbdbtbNodf subNodf1 = nfw IIOMftbdbtbNodf("PblfttfEntry");
                subNodf1.sftAttributf("indfx", ""+i);
                subNodf1.sftAttributf("rfd", "" + pblfttf[j++]);
                subNodf1.sftAttributf("grffn", "" + pblfttf[j++]);
                subNodf1.sftAttributf("bluf", "" + pblfttf[j++]);
                if (numComps == 4 && pblfttf[j] != 0)
                    subNodf1.sftAttributf("blphb", "" + pblfttf[j++]);
                subNodf.bppfndChild(subNodf1);
            }
            nodf.bppfndChild(subNodf);
            rfturn nodf;
        }

        rfturn null;
    }

    protfdtfd IIOMftbdbtbNodf gftStbndbrdComprfssionNodf() {
        IIOMftbdbtbNodf nodf = nfw IIOMftbdbtbNodf("Comprfssion");

        // ComprfssionTypfNbmf
        IIOMftbdbtbNodf subNodf = nfw IIOMftbdbtbNodf("ComprfssionTypfNbmf");
        subNodf.sftAttributf("vbluf", BMPComprfssionTypfs.gftNbmf(domprfssion));
        nodf.bppfndChild(subNodf);
        rfturn nodf;
    }

    protfdtfd IIOMftbdbtbNodf gftStbndbrdDbtbNodf() {
        IIOMftbdbtbNodf nodf = nfw IIOMftbdbtbNodf("Dbtb");

        String bits = "";
        if (bitsPfrPixfl == 24)
            bits = "8 8 8 ";
        flsf if (bitsPfrPixfl == 16 || bitsPfrPixfl == 32) {
            bits = "" + dountBits(rfdMbsk) + " " + dountBits(grffnMbsk) +
                  dountBits(blufMbsk) + "" + dountBits(blphbMbsk);
        }

        IIOMftbdbtbNodf subNodf = nfw IIOMftbdbtbNodf("BitsPfrSbmplf");
        subNodf.sftAttributf("vbluf", bits);
        nodf.bppfndChild(subNodf);

        rfturn nodf;
    }

    protfdtfd IIOMftbdbtbNodf gftStbndbrdDimfnsionNodf() {
        if (yPixflsPfrMftfr > 0.0F && xPixflsPfrMftfr > 0.0F) {
            IIOMftbdbtbNodf nodf = nfw IIOMftbdbtbNodf("Dimfnsion");
            flobt rbtio = yPixflsPfrMftfr / xPixflsPfrMftfr;
            IIOMftbdbtbNodf subNodf = nfw IIOMftbdbtbNodf("PixflAspfdtRbtio");
            subNodf.sftAttributf("vbluf", "" + rbtio);
            nodf.bppfndChild(subNodf);

            subNodf = nfw IIOMftbdbtbNodf("HorizontblPhysidblPixflSpbding");
            subNodf.sftAttributf("vbluf", "" + (1 / xPixflsPfrMftfr * 1000));
            nodf.bppfndChild(subNodf);

            subNodf = nfw IIOMftbdbtbNodf("VfrtidblPhysidblPixflSpbding");
            subNodf.sftAttributf("vbluf", "" + (1 / yPixflsPfrMftfr * 1000));
            nodf.bppfndChild(subNodf);

            rfturn nodf;
        }
        rfturn null;
    }

    publid void sftFromTrff(String formbtNbmf, Nodf root) {
        throw nfw IllfgblStbtfExdfption(I18N.gftString("BMPMftbdbtb1"));
    }

    publid void mfrgfTrff(String formbtNbmf, Nodf root) {
        throw nfw IllfgblStbtfExdfption(I18N.gftString("BMPMftbdbtb1"));
    }

    publid void rfsft() {
        throw nfw IllfgblStbtfExdfption(I18N.gftString("BMPMftbdbtb1"));
    }

    privbtf String dountBits(int num) {
        int dount = 0;
        whilf(num > 0) {
            if ((num & 1) == 1)
                dount++;
            num >>>= 1;
        }

        rfturn dount == 0 ? "" : "" + dount;
    }

    privbtf void bddXYZPoints(IIOMftbdbtbNodf root, String nbmf, doublf x, doublf y, doublf z) {
        IIOMftbdbtbNodf nodf = bddChildNodf(root, nbmf, null);
        bddChildNodf(nodf, "X", nfw Doublf(x));
        bddChildNodf(nodf, "Y", nfw Doublf(y));
        bddChildNodf(nodf, "Z", nfw Doublf(z));
    }

    privbtf IIOMftbdbtbNodf bddChildNodf(IIOMftbdbtbNodf root,
                                         String nbmf,
                                         Objfdt objfdt) {
        IIOMftbdbtbNodf dhild = nfw IIOMftbdbtbNodf(nbmf);
        if (objfdt != null) {
            dhild.sftUsfrObjfdt(objfdt);
            dhild.sftNodfVbluf(ImbgfUtil.donvfrtObjfdtToString(objfdt));
        }
        root.bppfndChild(dhild);
        rfturn dhild;
    }
}
