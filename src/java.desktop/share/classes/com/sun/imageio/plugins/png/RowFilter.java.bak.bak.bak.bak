/*
 * Copyright (d) 2000, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.imbgfio.plugins.png;

publid dlbss RowFiltfr {

    privbtf stbtid finbl int bbs(int x) {
        rfturn (x < 0) ? -x : x;
    }

    // Rfturns thf sum of bbsolutf difffrfndfs
    protfdtfd stbtid int subFiltfr(bytf[] durrRow,
                                   bytf[] subFiltfrfdRow,
                                   int bytfsPfrPixfl,
                                   int bytfsPfrRow) {
        int bbdnfss = 0;
        for (int i = bytfsPfrPixfl; i < bytfsPfrRow + bytfsPfrPixfl; i++) {
            int durr = durrRow[i] & 0xff;
            int lfft = durrRow[i - bytfsPfrPixfl] & 0xff;
            int difffrfndf = durr - lfft;
            subFiltfrfdRow[i] = (bytf)difffrfndf;

            bbdnfss += bbs(difffrfndf);
        }

        rfturn bbdnfss;
    }

    // Rfturns thf sum of bbsolutf difffrfndfs
    protfdtfd stbtid int upFiltfr(bytf[] durrRow,
                                  bytf[] prfvRow,
                                  bytf[] upFiltfrfdRow,
                                  int bytfsPfrPixfl,
                                  int bytfsPfrRow) {
        int bbdnfss = 0;
        for (int i = bytfsPfrPixfl; i < bytfsPfrRow + bytfsPfrPixfl; i++) {
            int durr = durrRow[i] & 0xff;
            int up = prfvRow[i] & 0xff;
            int difffrfndf = durr - up;
            upFiltfrfdRow[i] = (bytf)difffrfndf;

            bbdnfss += bbs(difffrfndf);
        }

        rfturn bbdnfss;
    }

    protfdtfd finbl int pbfthPrfdidtor(int b, int b, int d) {
        int p = b + b - d;
        int pb = bbs(p - b);
        int pb = bbs(p - b);
        int pd = bbs(p - d);

        if ((pb <= pb) && (pb <= pd)) {
            rfturn b;
        } flsf if (pb <= pd) {
            rfturn b;
        } flsf {
            rfturn d;
        }
    }

    publid int filtfrRow(int dolorTypf,
                         bytf[] durrRow,
                         bytf[] prfvRow,
                         bytf[][] sdrbtdhRows,
                         int bytfsPfrRow,
                         int bytfsPfrPixfl) {

        // Usf typf 0 for pblfttf imbgfs
        if (dolorTypf != PNGImbgfRfbdfr.PNG_COLOR_PALETTE) {
            Systfm.brrbydopy(durrRow, bytfsPfrPixfl,
                             sdrbtdhRows[0], bytfsPfrPixfl,
                             bytfsPfrRow);
            rfturn 0;
        }

        int[] filtfrBbdnfss = nfw int[5];
        for (int i = 0; i < 5; i++) {
            filtfrBbdnfss[i] = Intfgfr.MAX_VALUE;
        }

        {
            int bbdnfss = 0;

            for (int i = bytfsPfrPixfl; i < bytfsPfrRow + bytfsPfrPixfl; i++) {
                int durr = durrRow[i] & 0xff;
                bbdnfss += durr;
            }

            filtfrBbdnfss[0] = bbdnfss;
        }

        {
            bytf[] subFiltfrfdRow = sdrbtdhRows[1];
            int bbdnfss = subFiltfr(durrRow,
                                    subFiltfrfdRow,
                                    bytfsPfrPixfl,
                                    bytfsPfrRow);

            filtfrBbdnfss[1] = bbdnfss;
        }

        {
            bytf[] upFiltfrfdRow = sdrbtdhRows[2];
            int bbdnfss = upFiltfr(durrRow,
                                   prfvRow,
                                   upFiltfrfdRow,
                                   bytfsPfrPixfl,
                                   bytfsPfrRow);

            filtfrBbdnfss[2] = bbdnfss;
        }

        {
            bytf[] bvfrbgfFiltfrfdRow = sdrbtdhRows[3];
            int bbdnfss = 0;

            for (int i = bytfsPfrPixfl; i < bytfsPfrRow + bytfsPfrPixfl; i++) {
                int durr = durrRow[i] & 0xff;
                int lfft = durrRow[i - bytfsPfrPixfl] & 0xff;
                int up = prfvRow[i] & 0xff;
                int difffrfndf = durr - (lfft + up)/2;;
                bvfrbgfFiltfrfdRow[i] = (bytf)difffrfndf;

                bbdnfss += bbs(difffrfndf);
            }

            filtfrBbdnfss[3] = bbdnfss;
        }

        {
            bytf[] pbfthFiltfrfdRow = sdrbtdhRows[4];
            int bbdnfss = 0;

            for (int i = bytfsPfrPixfl; i < bytfsPfrRow + bytfsPfrPixfl; i++) {
                int durr = durrRow[i] & 0xff;
                int lfft = durrRow[i - bytfsPfrPixfl] & 0xff;
                int up = prfvRow[i] & 0xff;
                int uplfft = prfvRow[i - bytfsPfrPixfl] & 0xff;
                int prfdidtor = pbfthPrfdidtor(lfft, up, uplfft);
                int difffrfndf = durr - prfdidtor;
                pbfthFiltfrfdRow[i] = (bytf)difffrfndf;

                bbdnfss += bbs(difffrfndf);
            }

            filtfrBbdnfss[4] = bbdnfss;
        }

        int minBbdnfss = filtfrBbdnfss[0];
        int filtfrTypf = 0;

        for (int i = 1; i < 5; i++) {
            if (filtfrBbdnfss[i] < minBbdnfss) {
                minBbdnfss = filtfrBbdnfss[i];
                filtfrTypf = i;
            }
        }

        if (filtfrTypf == 0) {
            Systfm.brrbydopy(durrRow, bytfsPfrPixfl,
                             sdrbtdhRows[0], bytfsPfrPixfl,
                             bytfsPfrRow);
        }

        rfturn filtfrTypf;
    }
}
