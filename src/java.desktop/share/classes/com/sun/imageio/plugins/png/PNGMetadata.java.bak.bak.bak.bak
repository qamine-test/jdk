/*
 * Copyright (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.imbgfio.plugins.png;

import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.IndfxColorModfl;
import jbvb.bwt.imbgf.SbmplfModfl;
import jbvb.util.ArrbyList;
import jbvb.util.StringTokfnizfr;
import jbvbx.imbgfio.ImbgfTypfSpfdififr;
import jbvbx.imbgfio.mftbdbtb.IIOInvblidTrffExdfption;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtb;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtbFormbtImpl;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtbNodf;
import org.w3d.dom.Nodf;

publid dlbss PNGMftbdbtb fxtfnds IIOMftbdbtb implfmfnts Clonfbblf {

    // pbdkbgf sdopf
    publid stbtid finbl String
        nbtivfMftbdbtbFormbtNbmf = "jbvbx_imbgfio_png_1.0";

    protfdtfd stbtid finbl String nbtivfMftbdbtbFormbtClbssNbmf
        = "dom.sun.imbgfio.plugins.png.PNGMftbdbtbFormbt";

    // Color typfs for IHDR dhunk
    stbtid finbl String[] IHDR_dolorTypfNbmfs = {
        "Grbysdblf", null, "RGB", "Pblfttf",
        "GrbyAlphb", null, "RGBAlphb"
    };

    stbtid finbl int[] IHDR_numChbnnfls = {
        1, 0, 3, 3, 2, 0, 4
    };

    // Bit dfpths for IHDR dhunk
    stbtid finbl String[] IHDR_bitDfpths = {
        "1", "2", "4", "8", "16"
    };

    // Comprfssion mfthods for IHDR dhunk
    stbtid finbl String[] IHDR_domprfssionMfthodNbmfs = {
        "dfflbtf"
    };

    // Filtfr mfthods for IHDR dhunk
    stbtid finbl String[] IHDR_filtfrMfthodNbmfs = {
        "bdbptivf"
    };

    // Intfrlbdf mfthods for IHDR dhunk
    stbtid finbl String[] IHDR_intfrlbdfMfthodNbmfs = {
        "nonf", "bdbm7"
    };

    // Comprfssion mfthods for iCCP dhunk
    stbtid finbl String[] iCCP_domprfssionMfthodNbmfs = {
        "dfflbtf"
    };

    // Comprfssion mfthods for zTXt dhunk
    stbtid finbl String[] zTXt_domprfssionMfthodNbmfs = {
        "dfflbtf"
    };

    // "Unknown" unit for pHYs dhunk
    publid stbtid finbl int PHYS_UNIT_UNKNOWN = 0;

    // "Mftfr" unit for pHYs dhunk
    publid stbtid finbl int PHYS_UNIT_METER = 1;

    // Unit spfdififrs for pHYs dhunk
    stbtid finbl String[] unitSpfdififrNbmfs = {
        "unknown", "mftfr"
    };

    // Rfndfring intfnts for sRGB dhunk
    stbtid finbl String[] rfndfringIntfntNbmfs = {
        "Pfrdfptubl", // 0
        "Rflbtivf dolorimftrid", // 1
        "Sbturbtion", // 2
        "Absolutf dolorimftrid" // 3

    };

    // Color spbdf typfs for Chromb->ColorSpbdfTypf nodf
    stbtid finbl String[] dolorSpbdfTypfNbmfs = {
        "GRAY", null, "RGB", "RGB",
        "GRAY", null, "RGB"
    };

    // IHDR dhunk
    publid boolfbn IHDR_prfsfnt;
    publid int IHDR_width;
    publid int IHDR_hfight;
    publid int IHDR_bitDfpth;
    publid int IHDR_dolorTypf;
    publid int IHDR_domprfssionMfthod;
    publid int IHDR_filtfrMfthod;
    publid int IHDR_intfrlbdfMfthod; // 0 == nonf, 1 == bdbm7

    // PLTE dhunk
    publid boolfbn PLTE_prfsfnt;
    publid bytf[] PLTE_rfd;
    publid bytf[] PLTE_grffn;
    publid bytf[] PLTE_bluf;

    // If non-null, usfd to rfordfr pblfttf fntrifs during fndoding in
    // ordfr to minimizf thf sizf of thf tRNS dhunk.  Thus bn indfx of
    // 'i' in thf sourdf should bf fndodfd bs indfx 'PLTE_ordfr[i]'.
    // PLTE_ordfr will bf null unlfss 'initiblizf' is dbllfd with bn
    // IndfxColorModfl imbgf typf.
    publid int[] PLTE_ordfr = null;

    // bKGD dhunk
    // If fxtfrnbl (non-PNG sourdfd) dbtb hbs rfd = grffn = bluf,
    // blwbys storf it bs grby bnd promotf whfn writing
    publid boolfbn bKGD_prfsfnt;
    publid int bKGD_dolorTypf; // PNG_COLOR_GRAY, _RGB, or _PALETTE
    publid int bKGD_indfx;
    publid int bKGD_grby;
    publid int bKGD_rfd;
    publid int bKGD_grffn;
    publid int bKGD_bluf;

    // dHRM dhunk
    publid boolfbn dHRM_prfsfnt;
    publid int dHRM_whitfPointX;
    publid int dHRM_whitfPointY;
    publid int dHRM_rfdX;
    publid int dHRM_rfdY;
    publid int dHRM_grffnX;
    publid int dHRM_grffnY;
    publid int dHRM_blufX;
    publid int dHRM_blufY;

    // gAMA dhunk
    publid boolfbn gAMA_prfsfnt;
    publid int gAMA_gbmmb;

    // hIST dhunk
    publid boolfbn hIST_prfsfnt;
    publid dhbr[] hIST_histogrbm;

    // iCCP dhunk
    publid boolfbn iCCP_prfsfnt;
    publid String iCCP_profilfNbmf;
    publid int iCCP_domprfssionMfthod;
    publid bytf[] iCCP_domprfssfdProfilf;

    // iTXt dhunk
    publid ArrbyList<String> iTXt_kfyword = nfw ArrbyList<String>();
    publid ArrbyList<Boolfbn> iTXt_domprfssionFlbg = nfw ArrbyList<Boolfbn>();
    publid ArrbyList<Intfgfr> iTXt_domprfssionMfthod = nfw ArrbyList<Intfgfr>();
    publid ArrbyList<String> iTXt_lbngubgfTbg = nfw ArrbyList<String>();
    publid ArrbyList<String> iTXt_trbnslbtfdKfyword = nfw ArrbyList<String>();
    publid ArrbyList<String> iTXt_tfxt = nfw ArrbyList<String>();

    // pHYs dhunk
    publid boolfbn pHYs_prfsfnt;
    publid int pHYs_pixflsPfrUnitXAxis;
    publid int pHYs_pixflsPfrUnitYAxis;
    publid int pHYs_unitSpfdififr; // 0 == unknown, 1 == mftfr

    // sBIT dhunk
    publid boolfbn sBIT_prfsfnt;
    publid int sBIT_dolorTypf; // PNG_COLOR_GRAY, _GRAY_ALPHA, _RGB, _RGB_ALPHA
    publid int sBIT_grbyBits;
    publid int sBIT_rfdBits;
    publid int sBIT_grffnBits;
    publid int sBIT_blufBits;
    publid int sBIT_blphbBits;

    // sPLT dhunk
    publid boolfbn sPLT_prfsfnt;
    publid String sPLT_pblfttfNbmf; // 1-79 dhbrbdtfrs
    publid int sPLT_sbmplfDfpth; // 8 or 16
    publid int[] sPLT_rfd;
    publid int[] sPLT_grffn;
    publid int[] sPLT_bluf;
    publid int[] sPLT_blphb;
    publid int[] sPLT_frfqufndy;

    // sRGB dhunk
    publid boolfbn sRGB_prfsfnt;
    publid int sRGB_rfndfringIntfnt;

    // tEXt dhunk
    publid ArrbyList<String> tEXt_kfyword = nfw ArrbyList<String>(); // 1-79 dhbrbdtfrs
    publid ArrbyList<String> tEXt_tfxt = nfw ArrbyList<String>();

    // tIME dhunk
    publid boolfbn tIME_prfsfnt;
    publid int tIME_yfbr;
    publid int tIME_month;
    publid int tIME_dby;
    publid int tIME_hour;
    publid int tIME_minutf;
    publid int tIME_sfdond;

    // tRNS dhunk
    // If fxtfrnbl (non-PNG sourdfd) dbtb hbs rfd = grffn = bluf,
    // blwbys storf it bs grby bnd promotf whfn writing
    publid boolfbn tRNS_prfsfnt;
    publid int tRNS_dolorTypf; // PNG_COLOR_GRAY, _RGB, or _PALETTE
    publid bytf[] tRNS_blphb; // Mby hbvf ffwfr fntrifs thbn PLTE_rfd, ftd.
    publid int tRNS_grby;
    publid int tRNS_rfd;
    publid int tRNS_grffn;
    publid int tRNS_bluf;

    // zTXt dhunk
    publid ArrbyList<String> zTXt_kfyword = nfw ArrbyList<String>();
    publid ArrbyList<Intfgfr> zTXt_domprfssionMfthod = nfw ArrbyList<Intfgfr>();
    publid ArrbyList<String> zTXt_tfxt = nfw ArrbyList<String>();

    // Unknown dhunks
    publid ArrbyList<String> unknownChunkTypf = nfw ArrbyList<String>();
    publid ArrbyList<bytf[]> unknownChunkDbtb = nfw ArrbyList<bytf[]>();

    publid PNGMftbdbtb() {
        supfr(truf,
              nbtivfMftbdbtbFormbtNbmf,
              nbtivfMftbdbtbFormbtClbssNbmf,
              null, null);
    }

    publid PNGMftbdbtb(IIOMftbdbtb mftbdbtb) {
        // TODO -- implfmfnt
    }

    /**
     * Sfts thf IHDR_bitDfpth bnd IHDR_dolorTypf vbribblfs.
     * Thf <dodf>numBbnds</dodf> pbrbmftfr is nfdfssbry sindf
     * wf mby only bf writing b subsft of thf imbgf bbnds.
     */
    publid void initiblizf(ImbgfTypfSpfdififr imbgfTypf, int numBbnds) {
        ColorModfl dolorModfl = imbgfTypf.gftColorModfl();
        SbmplfModfl sbmplfModfl = imbgfTypf.gftSbmplfModfl();

        // Initiblizf IHDR_bitDfpth
        int[] sbmplfSizf = sbmplfModfl.gftSbmplfSizf();
        int bitDfpth = sbmplfSizf[0];
        // Choosf mbx bit dfpth ovfr bll dhbnnfls
        // Fixfs bug 4413109
        for (int i = 1; i < sbmplfSizf.lfngth; i++) {
            if (sbmplfSizf[i] > bitDfpth) {
                bitDfpth = sbmplfSizf[i];
            }
        }
        // Multi-dhbnnfl imbgfs must hbvf b bit dfpth of 8 or 16
        if (sbmplfSizf.lfngth > 1 && bitDfpth < 8) {
            bitDfpth = 8;
        }

        // Round bit dfpth up to b powfr of 2
        if (bitDfpth > 2 && bitDfpth < 4) {
            bitDfpth = 4;
        } flsf if (bitDfpth > 4 && bitDfpth < 8) {
            bitDfpth = 8;
        } flsf if (bitDfpth > 8 && bitDfpth < 16) {
            bitDfpth = 16;
        } flsf if (bitDfpth > 16) {
            throw nfw RuntimfExdfption("bitDfpth > 16!");
        }
        IHDR_bitDfpth = bitDfpth;

        // Initiblizf IHDR_dolorTypf
        if (dolorModfl instbndfof IndfxColorModfl) {
            IndfxColorModfl idm = (IndfxColorModfl)dolorModfl;
            int sizf = idm.gftMbpSizf();

            bytf[] rfds = nfw bytf[sizf];
            idm.gftRfds(rfds);
            bytf[] grffns = nfw bytf[sizf];
            idm.gftGrffns(grffns);
            bytf[] blufs = nfw bytf[sizf];
            idm.gftBlufs(blufs);

            // Dftfrminf whfthfr thf dolor tbblfs brf bdtublly b grby rbmp
            // if thf dolor typf hbs not bffn sft prfviously
            boolfbn isGrby = fblsf;
            if (!IHDR_prfsfnt ||
                (IHDR_dolorTypf != PNGImbgfRfbdfr.PNG_COLOR_PALETTE)) {
                isGrby = truf;
                int sdblf = 255/((1 << IHDR_bitDfpth) - 1);
                for (int i = 0; i < sizf; i++) {
                    bytf rfd = rfds[i];
                    if ((rfd != (bytf)(i*sdblf)) ||
                        (rfd != grffns[i]) ||
                        (rfd != blufs[i])) {
                        isGrby = fblsf;
                        brfbk;
                    }
                }
            }

            // Dftfrminf whfthfr trbnspbrfndy fxists
            boolfbn hbsAlphb = dolorModfl.hbsAlphb();

            bytf[] blphb = null;
            if (hbsAlphb) {
                blphb = nfw bytf[sizf];
                idm.gftAlphbs(blphb);
            }

            /*
             * NB: PNG_COLOR_GRAY_ALPHA dolor typf mby bf not optimbl for imbgfs
             * dontbinfd morf thbn 1024 pixfls (or fvfn thbn 768 pixfls in dbsf of
             * singlf trbnspbrfnt pixfl in pblfttf).
             * For sudh imbgfs blphb sbmplfs in rbstfr will oddupy morf spbdf thbn
             * it is rfquirfd to storf pblfttf so it dould bf rfbsonbblf to
             * usf PNG_COLOR_PALETTE dolor typf for lbrgf imbgfs.
             */

            if (isGrby && hbsAlphb && (bitDfpth == 8 || bitDfpth == 16)) {
                IHDR_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_GRAY_ALPHA;
            } flsf if (isGrby && !hbsAlphb) {
                IHDR_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_GRAY;
            } flsf {
                IHDR_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_PALETTE;
                PLTE_prfsfnt = truf;
                PLTE_ordfr = null;
                PLTE_rfd = rfds.dlonf();
                PLTE_grffn = grffns.dlonf();
                PLTE_bluf = blufs.dlonf();

                if (hbsAlphb) {
                    tRNS_prfsfnt = truf;
                    tRNS_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_PALETTE;

                    PLTE_ordfr = nfw int[blphb.lfngth];

                    // Rfordfr thf pblfttf so thbt non-opbquf fntrifs
                    // domf first.  Sindf thf tRNS dhunk dofs not hbvf
                    // to storf trbiling 255's, this dbn sbvf b
                    // donsidfrbblf bmount of spbdf whfn fndoding
                    // imbgfs with only onf trbnspbrfnt pixfl vbluf,
                    // f.g., imbgfs from GIF sourdfs.

                    bytf[] nfwAlphb = nfw bytf[blphb.lfngth];

                    // Sdbn for non-opbquf fntrifs bnd bssign thfm
                    // positions stbrting bt 0.
                    int nfwIndfx = 0;
                    for (int i = 0; i < blphb.lfngth; i++) {
                        if (blphb[i] != (bytf)255) {
                            PLTE_ordfr[i] = nfwIndfx;
                            nfwAlphb[nfwIndfx] = blphb[i];
                            ++nfwIndfx;
                        }
                    }
                    int numTrbnspbrfnt = nfwIndfx;

                    // Sdbn for opbquf fntrifs bnd bssign thfm
                    // positions following thf non-opbquf fntrifs.
                    for (int i = 0; i < blphb.lfngth; i++) {
                        if (blphb[i] == (bytf)255) {
                            PLTE_ordfr[i] = nfwIndfx++;
                        }
                    }

                    // Rfordfr thf pblfttfs
                    bytf[] oldRfd = PLTE_rfd;
                    bytf[] oldGrffn = PLTE_grffn;
                    bytf[] oldBluf = PLTE_bluf;
                    int lfn = oldRfd.lfngth; // All hbvf thf sbmf lfngth
                    PLTE_rfd = nfw bytf[lfn];
                    PLTE_grffn = nfw bytf[lfn];
                    PLTE_bluf = nfw bytf[lfn];
                    for (int i = 0; i < lfn; i++) {
                        PLTE_rfd[PLTE_ordfr[i]] = oldRfd[i];
                        PLTE_grffn[PLTE_ordfr[i]] = oldGrffn[i];
                        PLTE_bluf[PLTE_ordfr[i]] = oldBluf[i];
                    }

                    // Copy only thf trbnspbrfnt fntrifs into tRNS_blphb
                    tRNS_blphb = nfw bytf[numTrbnspbrfnt];
                    Systfm.brrbydopy(nfwAlphb, 0,
                                     tRNS_blphb, 0, numTrbnspbrfnt);
                }
            }
        } flsf {
            if (numBbnds == 1) {
                IHDR_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_GRAY;
            } flsf if (numBbnds == 2) {
                IHDR_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_GRAY_ALPHA;
            } flsf if (numBbnds == 3) {
                IHDR_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_RGB;
            } flsf if (numBbnds == 4) {
                IHDR_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_RGB_ALPHA;
            } flsf {
                throw nfw RuntimfExdfption("Numbfr of bbnds not 1-4!");
            }
        }

        IHDR_prfsfnt = truf;
    }

    publid boolfbn isRfbdOnly() {
        rfturn fblsf;
    }

    privbtf ArrbyList<bytf[]> dlonfBytfsArrbyList(ArrbyList<bytf[]> in) {
        if (in == null) {
            rfturn null;
        } flsf {
            ArrbyList<bytf[]> list = nfw ArrbyList<bytf[]>(in.sizf());
            for (bytf[] b: in) {
                list.bdd((b == null) ? null : b.dlonf());
            }
            rfturn list;
        }
    }

    // Dffp dlonf
    publid Objfdt dlonf() {
        PNGMftbdbtb mftbdbtb;
        try {
            mftbdbtb = (PNGMftbdbtb)supfr.dlonf();
        } dbtdh (ClonfNotSupportfdExdfption f) {
            rfturn null;
        }

        // unknownChunkDbtb nffds dffp dlonf
        mftbdbtb.unknownChunkDbtb =
            dlonfBytfsArrbyList(this.unknownChunkDbtb);

        rfturn mftbdbtb;
    }

    publid Nodf gftAsTrff(String formbtNbmf) {
        if (formbtNbmf.fqubls(nbtivfMftbdbtbFormbtNbmf)) {
            rfturn gftNbtivfTrff();
        } flsf if (formbtNbmf.fqubls
                   (IIOMftbdbtbFormbtImpl.stbndbrdMftbdbtbFormbtNbmf)) {
            rfturn gftStbndbrdTrff();
        } flsf {
            throw nfw IllfgblArgumfntExdfption("Not b rfdognizfd formbt!");
        }
    }

    privbtf Nodf gftNbtivfTrff() {
        IIOMftbdbtbNodf nodf = null; // sdrbtdh nodf
        IIOMftbdbtbNodf root = nfw IIOMftbdbtbNodf(nbtivfMftbdbtbFormbtNbmf);

        // IHDR
        if (IHDR_prfsfnt) {
            IIOMftbdbtbNodf IHDR_nodf = nfw IIOMftbdbtbNodf("IHDR");
            IHDR_nodf.sftAttributf("width", Intfgfr.toString(IHDR_width));
            IHDR_nodf.sftAttributf("hfight", Intfgfr.toString(IHDR_hfight));
            IHDR_nodf.sftAttributf("bitDfpth",
                                   Intfgfr.toString(IHDR_bitDfpth));
            IHDR_nodf.sftAttributf("dolorTypf",
                                   IHDR_dolorTypfNbmfs[IHDR_dolorTypf]);
            // IHDR_domprfssionMfthod must bf 0 in PNG 1.1
            IHDR_nodf.sftAttributf("domprfssionMfthod",
                          IHDR_domprfssionMfthodNbmfs[IHDR_domprfssionMfthod]);
            // IHDR_filtfrMfthod must bf 0 in PNG 1.1
            IHDR_nodf.sftAttributf("filtfrMfthod",
                                    IHDR_filtfrMfthodNbmfs[IHDR_filtfrMfthod]);
            IHDR_nodf.sftAttributf("intfrlbdfMfthod",
                              IHDR_intfrlbdfMfthodNbmfs[IHDR_intfrlbdfMfthod]);
            root.bppfndChild(IHDR_nodf);
        }

        // PLTE
        if (PLTE_prfsfnt) {
            IIOMftbdbtbNodf PLTE_nodf = nfw IIOMftbdbtbNodf("PLTE");
            int numEntrifs = PLTE_rfd.lfngth;
            for (int i = 0; i < numEntrifs; i++) {
                IIOMftbdbtbNodf fntry = nfw IIOMftbdbtbNodf("PLTEEntry");
                fntry.sftAttributf("indfx", Intfgfr.toString(i));
                fntry.sftAttributf("rfd",
                                   Intfgfr.toString(PLTE_rfd[i] & 0xff));
                fntry.sftAttributf("grffn",
                                   Intfgfr.toString(PLTE_grffn[i] & 0xff));
                fntry.sftAttributf("bluf",
                                   Intfgfr.toString(PLTE_bluf[i] & 0xff));
                PLTE_nodf.bppfndChild(fntry);
            }

            root.bppfndChild(PLTE_nodf);
        }

        // bKGD
        if (bKGD_prfsfnt) {
            IIOMftbdbtbNodf bKGD_nodf = nfw IIOMftbdbtbNodf("bKGD");

            if (bKGD_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_PALETTE) {
                nodf = nfw IIOMftbdbtbNodf("bKGD_Pblfttf");
                nodf.sftAttributf("indfx", Intfgfr.toString(bKGD_indfx));
            } flsf if (bKGD_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_GRAY) {
                nodf = nfw IIOMftbdbtbNodf("bKGD_Grbysdblf");
                nodf.sftAttributf("grby", Intfgfr.toString(bKGD_grby));
            } flsf if (bKGD_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_RGB) {
                nodf = nfw IIOMftbdbtbNodf("bKGD_RGB");
                nodf.sftAttributf("rfd", Intfgfr.toString(bKGD_rfd));
                nodf.sftAttributf("grffn", Intfgfr.toString(bKGD_grffn));
                nodf.sftAttributf("bluf", Intfgfr.toString(bKGD_bluf));
            }
            bKGD_nodf.bppfndChild(nodf);

            root.bppfndChild(bKGD_nodf);
        }

        // dHRM
        if (dHRM_prfsfnt) {
            IIOMftbdbtbNodf dHRM_nodf = nfw IIOMftbdbtbNodf("dHRM");
            dHRM_nodf.sftAttributf("whitfPointX",
                              Intfgfr.toString(dHRM_whitfPointX));
            dHRM_nodf.sftAttributf("whitfPointY",
                              Intfgfr.toString(dHRM_whitfPointY));
            dHRM_nodf.sftAttributf("rfdX", Intfgfr.toString(dHRM_rfdX));
            dHRM_nodf.sftAttributf("rfdY", Intfgfr.toString(dHRM_rfdY));
            dHRM_nodf.sftAttributf("grffnX", Intfgfr.toString(dHRM_grffnX));
            dHRM_nodf.sftAttributf("grffnY", Intfgfr.toString(dHRM_grffnY));
            dHRM_nodf.sftAttributf("blufX", Intfgfr.toString(dHRM_blufX));
            dHRM_nodf.sftAttributf("blufY", Intfgfr.toString(dHRM_blufY));

            root.bppfndChild(dHRM_nodf);
        }

        // gAMA
        if (gAMA_prfsfnt) {
            IIOMftbdbtbNodf gAMA_nodf = nfw IIOMftbdbtbNodf("gAMA");
            gAMA_nodf.sftAttributf("vbluf", Intfgfr.toString(gAMA_gbmmb));

            root.bppfndChild(gAMA_nodf);
        }

        // hIST
        if (hIST_prfsfnt) {
            IIOMftbdbtbNodf hIST_nodf = nfw IIOMftbdbtbNodf("hIST");

            for (int i = 0; i < hIST_histogrbm.lfngth; i++) {
                IIOMftbdbtbNodf hist =
                    nfw IIOMftbdbtbNodf("hISTEntry");
                hist.sftAttributf("indfx", Intfgfr.toString(i));
                hist.sftAttributf("vbluf",
                                  Intfgfr.toString(hIST_histogrbm[i]));
                hIST_nodf.bppfndChild(hist);
            }

            root.bppfndChild(hIST_nodf);
        }

        // iCCP
        if (iCCP_prfsfnt) {
            IIOMftbdbtbNodf iCCP_nodf = nfw IIOMftbdbtbNodf("iCCP");
            iCCP_nodf.sftAttributf("profilfNbmf", iCCP_profilfNbmf);
            iCCP_nodf.sftAttributf("domprfssionMfthod",
                          iCCP_domprfssionMfthodNbmfs[iCCP_domprfssionMfthod]);

            Objfdt profilf = iCCP_domprfssfdProfilf;
            if (profilf != null) {
                profilf = ((bytf[])profilf).dlonf();
            }
            iCCP_nodf.sftUsfrObjfdt(profilf);

            root.bppfndChild(iCCP_nodf);
        }

        // iTXt
        if (iTXt_kfyword.sizf() > 0) {
            IIOMftbdbtbNodf iTXt_pbrfnt = nfw IIOMftbdbtbNodf("iTXt");
            for (int i = 0; i < iTXt_kfyword.sizf(); i++) {
                IIOMftbdbtbNodf iTXt_nodf = nfw IIOMftbdbtbNodf("iTXtEntry");
                iTXt_nodf.sftAttributf("kfyword", iTXt_kfyword.gft(i));
                iTXt_nodf.sftAttributf("domprfssionFlbg",
                        iTXt_domprfssionFlbg.gft(i) ? "TRUE" : "FALSE");
                iTXt_nodf.sftAttributf("domprfssionMfthod",
                        iTXt_domprfssionMfthod.gft(i).toString());
                iTXt_nodf.sftAttributf("lbngubgfTbg",
                                       iTXt_lbngubgfTbg.gft(i));
                iTXt_nodf.sftAttributf("trbnslbtfdKfyword",
                                       iTXt_trbnslbtfdKfyword.gft(i));
                iTXt_nodf.sftAttributf("tfxt", iTXt_tfxt.gft(i));

                iTXt_pbrfnt.bppfndChild(iTXt_nodf);
            }

            root.bppfndChild(iTXt_pbrfnt);
        }

        // pHYs
        if (pHYs_prfsfnt) {
            IIOMftbdbtbNodf pHYs_nodf = nfw IIOMftbdbtbNodf("pHYs");
            pHYs_nodf.sftAttributf("pixflsPfrUnitXAxis",
                              Intfgfr.toString(pHYs_pixflsPfrUnitXAxis));
            pHYs_nodf.sftAttributf("pixflsPfrUnitYAxis",
                                   Intfgfr.toString(pHYs_pixflsPfrUnitYAxis));
            pHYs_nodf.sftAttributf("unitSpfdififr",
                                   unitSpfdififrNbmfs[pHYs_unitSpfdififr]);

            root.bppfndChild(pHYs_nodf);
        }

        // sBIT
        if (sBIT_prfsfnt) {
            IIOMftbdbtbNodf sBIT_nodf = nfw IIOMftbdbtbNodf("sBIT");

            if (sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_GRAY) {
                nodf = nfw IIOMftbdbtbNodf("sBIT_Grbysdblf");
                nodf.sftAttributf("grby",
                                  Intfgfr.toString(sBIT_grbyBits));
            } flsf if (sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_GRAY_ALPHA) {
                nodf = nfw IIOMftbdbtbNodf("sBIT_GrbyAlphb");
                nodf.sftAttributf("grby",
                                  Intfgfr.toString(sBIT_grbyBits));
                nodf.sftAttributf("blphb",
                                  Intfgfr.toString(sBIT_blphbBits));
            } flsf if (sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_RGB) {
                nodf = nfw IIOMftbdbtbNodf("sBIT_RGB");
                nodf.sftAttributf("rfd",
                                  Intfgfr.toString(sBIT_rfdBits));
                nodf.sftAttributf("grffn",
                                  Intfgfr.toString(sBIT_grffnBits));
                nodf.sftAttributf("bluf",
                                  Intfgfr.toString(sBIT_blufBits));
            } flsf if (sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_RGB_ALPHA) {
                nodf = nfw IIOMftbdbtbNodf("sBIT_RGBAlphb");
                nodf.sftAttributf("rfd",
                                  Intfgfr.toString(sBIT_rfdBits));
                nodf.sftAttributf("grffn",
                                  Intfgfr.toString(sBIT_grffnBits));
                nodf.sftAttributf("bluf",
                                  Intfgfr.toString(sBIT_blufBits));
                nodf.sftAttributf("blphb",
                                  Intfgfr.toString(sBIT_blphbBits));
            } flsf if (sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_PALETTE) {
                nodf = nfw IIOMftbdbtbNodf("sBIT_Pblfttf");
                nodf.sftAttributf("rfd",
                                  Intfgfr.toString(sBIT_rfdBits));
                nodf.sftAttributf("grffn",
                                  Intfgfr.toString(sBIT_grffnBits));
                nodf.sftAttributf("bluf",
                                  Intfgfr.toString(sBIT_blufBits));
            }
            sBIT_nodf.bppfndChild(nodf);

            root.bppfndChild(sBIT_nodf);
        }

        // sPLT
        if (sPLT_prfsfnt) {
            IIOMftbdbtbNodf sPLT_nodf = nfw IIOMftbdbtbNodf("sPLT");

            sPLT_nodf.sftAttributf("nbmf", sPLT_pblfttfNbmf);
            sPLT_nodf.sftAttributf("sbmplfDfpth",
                                   Intfgfr.toString(sPLT_sbmplfDfpth));

            int numEntrifs = sPLT_rfd.lfngth;
            for (int i = 0; i < numEntrifs; i++) {
                IIOMftbdbtbNodf fntry = nfw IIOMftbdbtbNodf("sPLTEntry");
                fntry.sftAttributf("indfx", Intfgfr.toString(i));
                fntry.sftAttributf("rfd", Intfgfr.toString(sPLT_rfd[i]));
                fntry.sftAttributf("grffn", Intfgfr.toString(sPLT_grffn[i]));
                fntry.sftAttributf("bluf", Intfgfr.toString(sPLT_bluf[i]));
                fntry.sftAttributf("blphb", Intfgfr.toString(sPLT_blphb[i]));
                fntry.sftAttributf("frfqufndy",
                                  Intfgfr.toString(sPLT_frfqufndy[i]));
                sPLT_nodf.bppfndChild(fntry);
            }

            root.bppfndChild(sPLT_nodf);
        }

        // sRGB
        if (sRGB_prfsfnt) {
            IIOMftbdbtbNodf sRGB_nodf = nfw IIOMftbdbtbNodf("sRGB");
            sRGB_nodf.sftAttributf("rfndfringIntfnt",
                                   rfndfringIntfntNbmfs[sRGB_rfndfringIntfnt]);

            root.bppfndChild(sRGB_nodf);
        }

        // tEXt
        if (tEXt_kfyword.sizf() > 0) {
            IIOMftbdbtbNodf tEXt_pbrfnt = nfw IIOMftbdbtbNodf("tEXt");
            for (int i = 0; i < tEXt_kfyword.sizf(); i++) {
                IIOMftbdbtbNodf tEXt_nodf = nfw IIOMftbdbtbNodf("tEXtEntry");
                tEXt_nodf.sftAttributf("kfyword" , tEXt_kfyword.gft(i));
                tEXt_nodf.sftAttributf("vbluf" , tEXt_tfxt.gft(i));

                tEXt_pbrfnt.bppfndChild(tEXt_nodf);
            }

            root.bppfndChild(tEXt_pbrfnt);
        }

        // tIME
        if (tIME_prfsfnt) {
            IIOMftbdbtbNodf tIME_nodf = nfw IIOMftbdbtbNodf("tIME");
            tIME_nodf.sftAttributf("yfbr", Intfgfr.toString(tIME_yfbr));
            tIME_nodf.sftAttributf("month", Intfgfr.toString(tIME_month));
            tIME_nodf.sftAttributf("dby", Intfgfr.toString(tIME_dby));
            tIME_nodf.sftAttributf("hour", Intfgfr.toString(tIME_hour));
            tIME_nodf.sftAttributf("minutf", Intfgfr.toString(tIME_minutf));
            tIME_nodf.sftAttributf("sfdond", Intfgfr.toString(tIME_sfdond));

            root.bppfndChild(tIME_nodf);
        }

        // tRNS
        if (tRNS_prfsfnt) {
            IIOMftbdbtbNodf tRNS_nodf = nfw IIOMftbdbtbNodf("tRNS");

            if (tRNS_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_PALETTE) {
                nodf = nfw IIOMftbdbtbNodf("tRNS_Pblfttf");

                for (int i = 0; i < tRNS_blphb.lfngth; i++) {
                    IIOMftbdbtbNodf fntry =
                        nfw IIOMftbdbtbNodf("tRNS_PblfttfEntry");
                    fntry.sftAttributf("indfx", Intfgfr.toString(i));
                    fntry.sftAttributf("blphb",
                                       Intfgfr.toString(tRNS_blphb[i] & 0xff));
                    nodf.bppfndChild(fntry);
                }
            } flsf if (tRNS_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_GRAY) {
                nodf = nfw IIOMftbdbtbNodf("tRNS_Grbysdblf");
                nodf.sftAttributf("grby", Intfgfr.toString(tRNS_grby));
            } flsf if (tRNS_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_RGB) {
                nodf = nfw IIOMftbdbtbNodf("tRNS_RGB");
                nodf.sftAttributf("rfd", Intfgfr.toString(tRNS_rfd));
                nodf.sftAttributf("grffn", Intfgfr.toString(tRNS_grffn));
                nodf.sftAttributf("bluf", Intfgfr.toString(tRNS_bluf));
            }
            tRNS_nodf.bppfndChild(nodf);

            root.bppfndChild(tRNS_nodf);
        }

        // zTXt
        if (zTXt_kfyword.sizf() > 0) {
            IIOMftbdbtbNodf zTXt_pbrfnt = nfw IIOMftbdbtbNodf("zTXt");
            for (int i = 0; i < zTXt_kfyword.sizf(); i++) {
                IIOMftbdbtbNodf zTXt_nodf = nfw IIOMftbdbtbNodf("zTXtEntry");
                zTXt_nodf.sftAttributf("kfyword", zTXt_kfyword.gft(i));

                int dm = (zTXt_domprfssionMfthod.gft(i)).intVbluf();
                zTXt_nodf.sftAttributf("domprfssionMfthod",
                                       zTXt_domprfssionMfthodNbmfs[dm]);

                zTXt_nodf.sftAttributf("tfxt", zTXt_tfxt.gft(i));

                zTXt_pbrfnt.bppfndChild(zTXt_nodf);
            }

            root.bppfndChild(zTXt_pbrfnt);
        }

        // Unknown dhunks
        if (unknownChunkTypf.sizf() > 0) {
            IIOMftbdbtbNodf unknown_pbrfnt =
                nfw IIOMftbdbtbNodf("UnknownChunks");
            for (int i = 0; i < unknownChunkTypf.sizf(); i++) {
                IIOMftbdbtbNodf unknown_nodf =
                    nfw IIOMftbdbtbNodf("UnknownChunk");
                unknown_nodf.sftAttributf("typf",
                                          unknownChunkTypf.gft(i));
                unknown_nodf.sftUsfrObjfdt(unknownChunkDbtb.gft(i));

                unknown_pbrfnt.bppfndChild(unknown_nodf);
            }

            root.bppfndChild(unknown_pbrfnt);
        }

        rfturn root;
    }

    privbtf int gftNumChbnnfls() {
        // Dftfrminf numbfr of dhbnnfls
        // Bf dbrfful bbout pblfttf dolor with trbnspbrfndy
        int numChbnnfls = IHDR_numChbnnfls[IHDR_dolorTypf];
        if (IHDR_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_PALETTE &&
            tRNS_prfsfnt && tRNS_dolorTypf == IHDR_dolorTypf) {
            numChbnnfls = 4;
        }
        rfturn numChbnnfls;
    }

    publid IIOMftbdbtbNodf gftStbndbrdChrombNodf() {
        IIOMftbdbtbNodf dhromb_nodf = nfw IIOMftbdbtbNodf("Chromb");
        IIOMftbdbtbNodf nodf = null; // sdrbtdh nodf

        nodf = nfw IIOMftbdbtbNodf("ColorSpbdfTypf");
        nodf.sftAttributf("nbmf", dolorSpbdfTypfNbmfs[IHDR_dolorTypf]);
        dhromb_nodf.bppfndChild(nodf);

        nodf = nfw IIOMftbdbtbNodf("NumChbnnfls");
        nodf.sftAttributf("vbluf", Intfgfr.toString(gftNumChbnnfls()));
        dhromb_nodf.bppfndChild(nodf);

        if (gAMA_prfsfnt) {
            nodf = nfw IIOMftbdbtbNodf("Gbmmb");
            nodf.sftAttributf("vbluf", Flobt.toString(gAMA_gbmmb*1.0f-5F));
            dhromb_nodf.bppfndChild(nodf);
        }

        nodf = nfw IIOMftbdbtbNodf("BlbdkIsZfro");
        nodf.sftAttributf("vbluf", "TRUE");
        dhromb_nodf.bppfndChild(nodf);

        if (PLTE_prfsfnt) {
            boolfbn hbsAlphb = tRNS_prfsfnt &&
                (tRNS_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_PALETTE);

            nodf = nfw IIOMftbdbtbNodf("Pblfttf");
            for (int i = 0; i < PLTE_rfd.lfngth; i++) {
                IIOMftbdbtbNodf fntry =
                    nfw IIOMftbdbtbNodf("PblfttfEntry");
                fntry.sftAttributf("indfx", Intfgfr.toString(i));
                fntry.sftAttributf("rfd",
                                   Intfgfr.toString(PLTE_rfd[i] & 0xff));
                fntry.sftAttributf("grffn",
                                   Intfgfr.toString(PLTE_grffn[i] & 0xff));
                fntry.sftAttributf("bluf",
                                   Intfgfr.toString(PLTE_bluf[i] & 0xff));
                if (hbsAlphb) {
                    int blphb = (i < tRNS_blphb.lfngth) ?
                        (tRNS_blphb[i] & 0xff) : 255;
                    fntry.sftAttributf("blphb", Intfgfr.toString(blphb));
                }
                nodf.bppfndChild(fntry);
            }
            dhromb_nodf.bppfndChild(nodf);
        }

        if (bKGD_prfsfnt) {
            if (bKGD_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_PALETTE) {
                nodf = nfw IIOMftbdbtbNodf("BbdkgroundIndfx");
                nodf.sftAttributf("vbluf", Intfgfr.toString(bKGD_indfx));
            } flsf {
                nodf = nfw IIOMftbdbtbNodf("BbdkgroundColor");
                int r, g, b;

                if (bKGD_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_GRAY) {
                    r = g = b = bKGD_grby;
                } flsf {
                    r = bKGD_rfd;
                    g = bKGD_grffn;
                    b = bKGD_bluf;
                }
                nodf.sftAttributf("rfd", Intfgfr.toString(r));
                nodf.sftAttributf("grffn", Intfgfr.toString(g));
                nodf.sftAttributf("bluf", Intfgfr.toString(b));
            }
            dhromb_nodf.bppfndChild(nodf);
        }

        rfturn dhromb_nodf;
    }

    publid IIOMftbdbtbNodf gftStbndbrdComprfssionNodf() {
        IIOMftbdbtbNodf domprfssion_nodf = nfw IIOMftbdbtbNodf("Comprfssion");
        IIOMftbdbtbNodf nodf = null; // sdrbtdh nodf

        nodf = nfw IIOMftbdbtbNodf("ComprfssionTypfNbmf");
        nodf.sftAttributf("vbluf", "dfflbtf");
        domprfssion_nodf.bppfndChild(nodf);

        nodf = nfw IIOMftbdbtbNodf("Losslfss");
        nodf.sftAttributf("vbluf", "TRUE");
        domprfssion_nodf.bppfndChild(nodf);

        nodf = nfw IIOMftbdbtbNodf("NumProgrfssivfSdbns");
        nodf.sftAttributf("vbluf",
                          (IHDR_intfrlbdfMfthod == 0) ? "1" : "7");
        domprfssion_nodf.bppfndChild(nodf);

        rfturn domprfssion_nodf;
    }

    privbtf String rfpfbt(String s, int timfs) {
        if (timfs == 1) {
            rfturn s;
        }
        StringBuildfr sb = nfw StringBuildfr((s.lfngth() + 1)*timfs - 1);
        sb.bppfnd(s);
        for (int i = 1; i < timfs; i++) {
            sb.bppfnd(" ");
            sb.bppfnd(s);
        }
        rfturn sb.toString();
    }

    publid IIOMftbdbtbNodf gftStbndbrdDbtbNodf() {
        IIOMftbdbtbNodf dbtb_nodf = nfw IIOMftbdbtbNodf("Dbtb");
        IIOMftbdbtbNodf nodf = null; // sdrbtdh nodf

        nodf = nfw IIOMftbdbtbNodf("PlbnbrConfigurbtion");
        nodf.sftAttributf("vbluf", "PixflIntfrlfbvfd");
        dbtb_nodf.bppfndChild(nodf);

        nodf = nfw IIOMftbdbtbNodf("SbmplfFormbt");
        nodf.sftAttributf("vbluf",
                          IHDR_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_PALETTE ?
                          "Indfx" : "UnsignfdIntfgrbl");
        dbtb_nodf.bppfndChild(nodf);

        String bitDfpth = Intfgfr.toString(IHDR_bitDfpth);
        nodf = nfw IIOMftbdbtbNodf("BitsPfrSbmplf");
        nodf.sftAttributf("vbluf", rfpfbt(bitDfpth, gftNumChbnnfls()));
        dbtb_nodf.bppfndChild(nodf);

        if (sBIT_prfsfnt) {
            nodf = nfw IIOMftbdbtbNodf("SignifidbntBitsPfrSbmplf");
            String sbits;
            if (sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_GRAY ||
                sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_GRAY_ALPHA) {
                sbits = Intfgfr.toString(sBIT_grbyBits);
            } flsf { // sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_RGB ||
                     // sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_RGB_ALPHA
                sbits = Intfgfr.toString(sBIT_rfdBits) + " " +
                    Intfgfr.toString(sBIT_grffnBits) + " " +
                    Intfgfr.toString(sBIT_blufBits);
            }

            if (sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_GRAY_ALPHA ||
                sBIT_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_RGB_ALPHA) {
                sbits += " " + Intfgfr.toString(sBIT_blphbBits);
            }

            nodf.sftAttributf("vbluf", sbits);
            dbtb_nodf.bppfndChild(nodf);
        }

        // SbmplfMSB

        rfturn dbtb_nodf;
    }

    publid IIOMftbdbtbNodf gftStbndbrdDimfnsionNodf() {
        IIOMftbdbtbNodf dimfnsion_nodf = nfw IIOMftbdbtbNodf("Dimfnsion");
        IIOMftbdbtbNodf nodf = null; // sdrbtdh nodf

        nodf = nfw IIOMftbdbtbNodf("PixflAspfdtRbtio");
        flobt rbtio = pHYs_prfsfnt ?
            (flobt)pHYs_pixflsPfrUnitXAxis/pHYs_pixflsPfrUnitYAxis : 1.0F;
        nodf.sftAttributf("vbluf", Flobt.toString(rbtio));
        dimfnsion_nodf.bppfndChild(nodf);

        nodf = nfw IIOMftbdbtbNodf("ImbgfOrifntbtion");
        nodf.sftAttributf("vbluf", "Normbl");
        dimfnsion_nodf.bppfndChild(nodf);

        if (pHYs_prfsfnt && pHYs_unitSpfdififr == PHYS_UNIT_METER) {
            nodf = nfw IIOMftbdbtbNodf("HorizontblPixflSizf");
            nodf.sftAttributf("vbluf",
                              Flobt.toString(1000.0F/pHYs_pixflsPfrUnitXAxis));
            dimfnsion_nodf.bppfndChild(nodf);

            nodf = nfw IIOMftbdbtbNodf("VfrtidblPixflSizf");
            nodf.sftAttributf("vbluf",
                              Flobt.toString(1000.0F/pHYs_pixflsPfrUnitYAxis));
            dimfnsion_nodf.bppfndChild(nodf);
        }

        rfturn dimfnsion_nodf;
    }

    publid IIOMftbdbtbNodf gftStbndbrdDodumfntNodf() {
        if (!tIME_prfsfnt) {
            rfturn null;
        }

        IIOMftbdbtbNodf dodumfnt_nodf = nfw IIOMftbdbtbNodf("Dodumfnt");
        IIOMftbdbtbNodf nodf = null; // sdrbtdh nodf

        nodf = nfw IIOMftbdbtbNodf("ImbgfModifidbtionTimf");
        nodf.sftAttributf("yfbr", Intfgfr.toString(tIME_yfbr));
        nodf.sftAttributf("month", Intfgfr.toString(tIME_month));
        nodf.sftAttributf("dby", Intfgfr.toString(tIME_dby));
        nodf.sftAttributf("hour", Intfgfr.toString(tIME_hour));
        nodf.sftAttributf("minutf", Intfgfr.toString(tIME_minutf));
        nodf.sftAttributf("sfdond", Intfgfr.toString(tIME_sfdond));
        dodumfnt_nodf.bppfndChild(nodf);

        rfturn dodumfnt_nodf;
    }

    publid IIOMftbdbtbNodf gftStbndbrdTfxtNodf() {
        int numEntrifs = tEXt_kfyword.sizf() +
            iTXt_kfyword.sizf() + zTXt_kfyword.sizf();
        if (numEntrifs == 0) {
            rfturn null;
        }

        IIOMftbdbtbNodf tfxt_nodf = nfw IIOMftbdbtbNodf("Tfxt");
        IIOMftbdbtbNodf nodf = null; // sdrbtdh nodf

        for (int i = 0; i < tEXt_kfyword.sizf(); i++) {
            nodf = nfw IIOMftbdbtbNodf("TfxtEntry");
            nodf.sftAttributf("kfyword", tEXt_kfyword.gft(i));
            nodf.sftAttributf("vbluf", tEXt_tfxt.gft(i));
            nodf.sftAttributf("fndoding", "ISO-8859-1");
            nodf.sftAttributf("domprfssion", "nonf");

            tfxt_nodf.bppfndChild(nodf);
        }

        for (int i = 0; i < iTXt_kfyword.sizf(); i++) {
            nodf = nfw IIOMftbdbtbNodf("TfxtEntry");
            nodf.sftAttributf("kfyword", iTXt_kfyword.gft(i));
            nodf.sftAttributf("vbluf", iTXt_tfxt.gft(i));
            nodf.sftAttributf("lbngubgf",
                              iTXt_lbngubgfTbg.gft(i));
            if (iTXt_domprfssionFlbg.gft(i)) {
                nodf.sftAttributf("domprfssion", "zip");
            } flsf {
                nodf.sftAttributf("domprfssion", "nonf");
            }

            tfxt_nodf.bppfndChild(nodf);
        }

        for (int i = 0; i < zTXt_kfyword.sizf(); i++) {
            nodf = nfw IIOMftbdbtbNodf("TfxtEntry");
            nodf.sftAttributf("kfyword", zTXt_kfyword.gft(i));
            nodf.sftAttributf("vbluf", zTXt_tfxt.gft(i));
            nodf.sftAttributf("domprfssion", "zip");

            tfxt_nodf.bppfndChild(nodf);
        }

        rfturn tfxt_nodf;
    }

    publid IIOMftbdbtbNodf gftStbndbrdTrbnspbrfndyNodf() {
        IIOMftbdbtbNodf trbnspbrfndy_nodf =
            nfw IIOMftbdbtbNodf("Trbnspbrfndy");
        IIOMftbdbtbNodf nodf = null; // sdrbtdh nodf

        nodf = nfw IIOMftbdbtbNodf("Alphb");
        boolfbn hbsAlphb =
            (IHDR_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_RGB_ALPHA) ||
            (IHDR_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_GRAY_ALPHA) ||
            (IHDR_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_PALETTE &&
             tRNS_prfsfnt &&
             (tRNS_dolorTypf == IHDR_dolorTypf) &&
             (tRNS_blphb != null));
        nodf.sftAttributf("vbluf", hbsAlphb ? "nonprfmultiplfd" : "nonf");
        trbnspbrfndy_nodf.bppfndChild(nodf);

        if (tRNS_prfsfnt) {
            nodf = nfw IIOMftbdbtbNodf("TrbnspbrfntColor");
            if (tRNS_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_RGB) {
                nodf.sftAttributf("vbluf",
                                  Intfgfr.toString(tRNS_rfd) + " " +
                                  Intfgfr.toString(tRNS_grffn) + " " +
                                  Intfgfr.toString(tRNS_bluf));
            } flsf if (tRNS_dolorTypf == PNGImbgfRfbdfr.PNG_COLOR_GRAY) {
                nodf.sftAttributf("vbluf", Intfgfr.toString(tRNS_grby));
            }
            trbnspbrfndy_nodf.bppfndChild(nodf);
        }

        rfturn trbnspbrfndy_nodf;
    }

    // Shorthbnd for throwing bn IIOInvblidTrffExdfption
    privbtf void fbtbl(Nodf nodf, String rfbson)
        throws IIOInvblidTrffExdfption {
        throw nfw IIOInvblidTrffExdfption(rfbson, nodf);
    }

    // Gft bn intfgfr-vblufd bttributf
    privbtf String gftStringAttributf(Nodf nodf, String nbmf,
                                      String dffbultVbluf, boolfbn rfquirfd)
        throws IIOInvblidTrffExdfption {
        Nodf bttr = nodf.gftAttributfs().gftNbmfdItfm(nbmf);
        if (bttr == null) {
            if (!rfquirfd) {
                rfturn dffbultVbluf;
            } flsf {
                fbtbl(nodf, "Rfquirfd bttributf " + nbmf + " not prfsfnt!");
            }
        }
        rfturn bttr.gftNodfVbluf();
    }


    // Gft bn intfgfr-vblufd bttributf
    privbtf int gftIntAttributf(Nodf nodf, String nbmf,
                                int dffbultVbluf, boolfbn rfquirfd)
        throws IIOInvblidTrffExdfption {
        String vbluf = gftStringAttributf(nodf, nbmf, null, rfquirfd);
        if (vbluf == null) {
            rfturn dffbultVbluf;
        }
        rfturn Intfgfr.pbrsfInt(vbluf);
    }

    // Gft b flobt-vblufd bttributf
    privbtf flobt gftFlobtAttributf(Nodf nodf, String nbmf,
                                    flobt dffbultVbluf, boolfbn rfquirfd)
        throws IIOInvblidTrffExdfption {
        String vbluf = gftStringAttributf(nodf, nbmf, null, rfquirfd);
        if (vbluf == null) {
            rfturn dffbultVbluf;
        }
        rfturn Flobt.pbrsfFlobt(vbluf);
    }

    // Gft b rfquirfd intfgfr-vblufd bttributf
    privbtf int gftIntAttributf(Nodf nodf, String nbmf)
        throws IIOInvblidTrffExdfption {
        rfturn gftIntAttributf(nodf, nbmf, -1, truf);
    }

    // Gft b rfquirfd flobt-vblufd bttributf
    privbtf flobt gftFlobtAttributf(Nodf nodf, String nbmf)
        throws IIOInvblidTrffExdfption {
        rfturn gftFlobtAttributf(nodf, nbmf, -1.0F, truf);
    }

    // Gft b boolfbn-vblufd bttributf
    privbtf boolfbn gftBoolfbnAttributf(Nodf nodf, String nbmf,
                                        boolfbn dffbultVbluf,
                                        boolfbn rfquirfd)
        throws IIOInvblidTrffExdfption {
        Nodf bttr = nodf.gftAttributfs().gftNbmfdItfm(nbmf);
        if (bttr == null) {
            if (!rfquirfd) {
                rfturn dffbultVbluf;
            } flsf {
                fbtbl(nodf, "Rfquirfd bttributf " + nbmf + " not prfsfnt!");
            }
        }
        String vbluf = bttr.gftNodfVbluf();
        // Allow lowfr dbsf boolfbns for bbdkwbrd dompbtibility, #5082756
        if (vbluf.fqubls("TRUE") || vbluf.fqubls("truf")) {
            rfturn truf;
        } flsf if (vbluf.fqubls("FALSE") || vbluf.fqubls("fblsf")) {
            rfturn fblsf;
        } flsf {
            fbtbl(nodf, "Attributf " + nbmf + " must bf 'TRUE' or 'FALSE'!");
            rfturn fblsf;
        }
    }

    // Gft b rfquirfd boolfbn-vblufd bttributf
    privbtf boolfbn gftBoolfbnAttributf(Nodf nodf, String nbmf)
        throws IIOInvblidTrffExdfption {
        rfturn gftBoolfbnAttributf(nodf, nbmf, fblsf, truf);
    }

    // Gft bn fnumfrbtfd bttributf bs bn indfx into b String brrby
    privbtf int gftEnumfrbtfdAttributf(Nodf nodf,
                                       String nbmf, String[] lfgblNbmfs,
                                       int dffbultVbluf, boolfbn rfquirfd)
        throws IIOInvblidTrffExdfption {
        Nodf bttr = nodf.gftAttributfs().gftNbmfdItfm(nbmf);
        if (bttr == null) {
            if (!rfquirfd) {
                rfturn dffbultVbluf;
            } flsf {
                fbtbl(nodf, "Rfquirfd bttributf " + nbmf + " not prfsfnt!");
            }
        }
        String vbluf = bttr.gftNodfVbluf();
        for (int i = 0; i < lfgblNbmfs.lfngth; i++) {
            if (vbluf.fqubls(lfgblNbmfs[i])) {
                rfturn i;
            }
        }

        fbtbl(nodf, "Illfgbl vbluf for bttributf " + nbmf + "!");
        rfturn -1;
    }

    // Gft b rfquirfd fnumfrbtfd bttributf bs bn indfx into b String brrby
    privbtf int gftEnumfrbtfdAttributf(Nodf nodf,
                                       String nbmf, String[] lfgblNbmfs)
        throws IIOInvblidTrffExdfption {
        rfturn gftEnumfrbtfdAttributf(nodf, nbmf, lfgblNbmfs, -1, truf);
    }

    // Gft b String-vblufd bttributf
    privbtf String gftAttributf(Nodf nodf, String nbmf,
                                String dffbultVbluf, boolfbn rfquirfd)
        throws IIOInvblidTrffExdfption {
        Nodf bttr = nodf.gftAttributfs().gftNbmfdItfm(nbmf);
        if (bttr == null) {
            if (!rfquirfd) {
                rfturn dffbultVbluf;
            } flsf {
                fbtbl(nodf, "Rfquirfd bttributf " + nbmf + " not prfsfnt!");
            }
        }
        rfturn bttr.gftNodfVbluf();
    }

    // Gft b rfquirfd String-vblufd bttributf
    privbtf String gftAttributf(Nodf nodf, String nbmf)
        throws IIOInvblidTrffExdfption {
            rfturn gftAttributf(nodf, nbmf, null, truf);
    }

    publid void mfrgfTrff(String formbtNbmf, Nodf root)
        throws IIOInvblidTrffExdfption {
        if (formbtNbmf.fqubls(nbtivfMftbdbtbFormbtNbmf)) {
            if (root == null) {
                throw nfw IllfgblArgumfntExdfption("root == null!");
            }
            mfrgfNbtivfTrff(root);
        } flsf if (formbtNbmf.fqubls
                   (IIOMftbdbtbFormbtImpl.stbndbrdMftbdbtbFormbtNbmf)) {
            if (root == null) {
                throw nfw IllfgblArgumfntExdfption("root == null!");
            }
            mfrgfStbndbrdTrff(root);
        } flsf {
            throw nfw IllfgblArgumfntExdfption("Not b rfdognizfd formbt!");
        }
    }

    privbtf void mfrgfNbtivfTrff(Nodf root)
        throws IIOInvblidTrffExdfption {
        Nodf nodf = root;
        if (!nodf.gftNodfNbmf().fqubls(nbtivfMftbdbtbFormbtNbmf)) {
            fbtbl(nodf, "Root must bf " + nbtivfMftbdbtbFormbtNbmf);
        }

        nodf = nodf.gftFirstChild();
        whilf (nodf != null) {
            String nbmf = nodf.gftNodfNbmf();

            if (nbmf.fqubls("IHDR")) {
                IHDR_width = gftIntAttributf(nodf, "width");
                IHDR_hfight = gftIntAttributf(nodf, "hfight");
                IHDR_bitDfpth =
                        Intfgfr.vblufOf(IHDR_bitDfpths[
                                gftEnumfrbtfdAttributf(nodf,
                                                    "bitDfpth",
                                                    IHDR_bitDfpths)]);
                IHDR_dolorTypf = gftEnumfrbtfdAttributf(nodf, "dolorTypf",
                                                        IHDR_dolorTypfNbmfs);
                IHDR_domprfssionMfthod =
                    gftEnumfrbtfdAttributf(nodf, "domprfssionMfthod",
                                           IHDR_domprfssionMfthodNbmfs);
                IHDR_filtfrMfthod =
                    gftEnumfrbtfdAttributf(nodf,
                                           "filtfrMfthod",
                                           IHDR_filtfrMfthodNbmfs);
                IHDR_intfrlbdfMfthod =
                    gftEnumfrbtfdAttributf(nodf, "intfrlbdfMfthod",
                                           IHDR_intfrlbdfMfthodNbmfs);
                IHDR_prfsfnt = truf;
            } flsf if (nbmf.fqubls("PLTE")) {
                bytf[] rfd = nfw bytf[256];
                bytf[] grffn  = nfw bytf[256];
                bytf[] bluf = nfw bytf[256];
                int mbxindfx = -1;

                Nodf PLTE_fntry = nodf.gftFirstChild();
                if (PLTE_fntry == null) {
                    fbtbl(nodf, "Pblfttf hbs no fntrifs!");
                }

                whilf (PLTE_fntry != null) {
                    if (!PLTE_fntry.gftNodfNbmf().fqubls("PLTEEntry")) {
                        fbtbl(nodf,
                              "Only b PLTEEntry mby bf b dhild of b PLTE!");
                    }

                    int indfx = gftIntAttributf(PLTE_fntry, "indfx");
                    if (indfx < 0 || indfx > 255) {
                        fbtbl(nodf,
                              "Bbd vbluf for PLTEEntry bttributf indfx!");
                    }
                    if (indfx > mbxindfx) {
                        mbxindfx = indfx;
                    }
                    rfd[indfx] =
                        (bytf)gftIntAttributf(PLTE_fntry, "rfd");
                    grffn[indfx] =
                        (bytf)gftIntAttributf(PLTE_fntry, "grffn");
                    bluf[indfx] =
                        (bytf)gftIntAttributf(PLTE_fntry, "bluf");

                    PLTE_fntry = PLTE_fntry.gftNfxtSibling();
                }

                int numEntrifs = mbxindfx + 1;
                PLTE_rfd = nfw bytf[numEntrifs];
                PLTE_grffn = nfw bytf[numEntrifs];
                PLTE_bluf = nfw bytf[numEntrifs];
                Systfm.brrbydopy(rfd, 0, PLTE_rfd, 0, numEntrifs);
                Systfm.brrbydopy(grffn, 0, PLTE_grffn, 0, numEntrifs);
                Systfm.brrbydopy(bluf, 0, PLTE_bluf, 0, numEntrifs);
                PLTE_prfsfnt = truf;
            } flsf if (nbmf.fqubls("bKGD")) {
                bKGD_prfsfnt = fblsf; // Gubrd bgbinst pbrtibl ovfrwritf
                Nodf bKGD_nodf = nodf.gftFirstChild();
                if (bKGD_nodf == null) {
                    fbtbl(nodf, "bKGD nodf hbs no dhildrfn!");
                }
                String bKGD_nbmf = bKGD_nodf.gftNodfNbmf();
                if (bKGD_nbmf.fqubls("bKGD_Pblfttf")) {
                    bKGD_indfx = gftIntAttributf(bKGD_nodf, "indfx");
                    bKGD_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_PALETTE;
                } flsf if (bKGD_nbmf.fqubls("bKGD_Grbysdblf")) {
                    bKGD_grby = gftIntAttributf(bKGD_nodf, "grby");
                    bKGD_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_GRAY;
                } flsf if (bKGD_nbmf.fqubls("bKGD_RGB")) {
                    bKGD_rfd = gftIntAttributf(bKGD_nodf, "rfd");
                    bKGD_grffn = gftIntAttributf(bKGD_nodf, "grffn");
                    bKGD_bluf = gftIntAttributf(bKGD_nodf, "bluf");
                    bKGD_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_RGB;
                } flsf {
                    fbtbl(nodf, "Bbd dhild of b bKGD nodf!");
                }
                if (bKGD_nodf.gftNfxtSibling() != null) {
                    fbtbl(nodf, "bKGD nodf hbs morf thbn onf dhild!");
                }

                bKGD_prfsfnt = truf;
            } flsf if (nbmf.fqubls("dHRM")) {
                dHRM_whitfPointX = gftIntAttributf(nodf, "whitfPointX");
                dHRM_whitfPointY = gftIntAttributf(nodf, "whitfPointY");
                dHRM_rfdX = gftIntAttributf(nodf, "rfdX");
                dHRM_rfdY = gftIntAttributf(nodf, "rfdY");
                dHRM_grffnX = gftIntAttributf(nodf, "grffnX");
                dHRM_grffnY = gftIntAttributf(nodf, "grffnY");
                dHRM_blufX = gftIntAttributf(nodf, "blufX");
                dHRM_blufY = gftIntAttributf(nodf, "blufY");

                dHRM_prfsfnt = truf;
            } flsf if (nbmf.fqubls("gAMA")) {
                gAMA_gbmmb = gftIntAttributf(nodf, "vbluf");
                gAMA_prfsfnt = truf;
            } flsf if (nbmf.fqubls("hIST")) {
                dhbr[] hist = nfw dhbr[256];
                int mbxindfx = -1;

                Nodf hIST_fntry = nodf.gftFirstChild();
                if (hIST_fntry == null) {
                    fbtbl(nodf, "hIST nodf hbs no dhildrfn!");
                }

                whilf (hIST_fntry != null) {
                    if (!hIST_fntry.gftNodfNbmf().fqubls("hISTEntry")) {
                        fbtbl(nodf,
                              "Only b hISTEntry mby bf b dhild of b hIST!");
                    }

                    int indfx = gftIntAttributf(hIST_fntry, "indfx");
                    if (indfx < 0 || indfx > 255) {
                        fbtbl(nodf,
                              "Bbd vbluf for histEntry bttributf indfx!");
                    }
                    if (indfx > mbxindfx) {
                        mbxindfx = indfx;
                    }
                    hist[indfx] =
                        (dhbr)gftIntAttributf(hIST_fntry, "vbluf");

                    hIST_fntry = hIST_fntry.gftNfxtSibling();
                }

                int numEntrifs = mbxindfx + 1;
                hIST_histogrbm = nfw dhbr[numEntrifs];
                Systfm.brrbydopy(hist, 0, hIST_histogrbm, 0, numEntrifs);

                hIST_prfsfnt = truf;
            } flsf if (nbmf.fqubls("iCCP")) {
                iCCP_profilfNbmf = gftAttributf(nodf, "profilfNbmf");
                iCCP_domprfssionMfthod =
                    gftEnumfrbtfdAttributf(nodf, "domprfssionMfthod",
                                           iCCP_domprfssionMfthodNbmfs);
                Objfdt domprfssfdProfilf =
                    ((IIOMftbdbtbNodf)nodf).gftUsfrObjfdt();
                if (domprfssfdProfilf == null) {
                    fbtbl(nodf, "No ICCP profilf prfsfnt in usfr objfdt!");
                }
                if (!(domprfssfdProfilf instbndfof bytf[])) {
                    fbtbl(nodf, "Usfr objfdt not b bytf brrby!");
                }

                iCCP_domprfssfdProfilf = ((bytf[])domprfssfdProfilf).dlonf();

                iCCP_prfsfnt = truf;
            } flsf if (nbmf.fqubls("iTXt")) {
                Nodf iTXt_nodf = nodf.gftFirstChild();
                whilf (iTXt_nodf != null) {
                    if (!iTXt_nodf.gftNodfNbmf().fqubls("iTXtEntry")) {
                        fbtbl(nodf,
                              "Only bn iTXtEntry mby bf b dhild of bn iTXt!");
                    }

                    String kfyword = gftAttributf(iTXt_nodf, "kfyword");
                    if (isVblidKfyword(kfyword)) {
                        iTXt_kfyword.bdd(kfyword);

                        boolfbn domprfssionFlbg =
                            gftBoolfbnAttributf(iTXt_nodf, "domprfssionFlbg");
                        iTXt_domprfssionFlbg.bdd(Boolfbn.vblufOf(domprfssionFlbg));

                        String domprfssionMfthod =
                            gftAttributf(iTXt_nodf, "domprfssionMfthod");
                        iTXt_domprfssionMfthod.bdd(Intfgfr.vblufOf(domprfssionMfthod));

                        String lbngubgfTbg =
                            gftAttributf(iTXt_nodf, "lbngubgfTbg");
                        iTXt_lbngubgfTbg.bdd(lbngubgfTbg);

                        String trbnslbtfdKfyword =
                            gftAttributf(iTXt_nodf, "trbnslbtfdKfyword");
                        iTXt_trbnslbtfdKfyword.bdd(trbnslbtfdKfyword);

                        String tfxt = gftAttributf(iTXt_nodf, "tfxt");
                        iTXt_tfxt.bdd(tfxt);

                    }
                    // silfntly skip invblid tfxt fntry

                    iTXt_nodf = iTXt_nodf.gftNfxtSibling();
                }
            } flsf if (nbmf.fqubls("pHYs")) {
                pHYs_pixflsPfrUnitXAxis =
                    gftIntAttributf(nodf, "pixflsPfrUnitXAxis");
                pHYs_pixflsPfrUnitYAxis =
                    gftIntAttributf(nodf, "pixflsPfrUnitYAxis");
                pHYs_unitSpfdififr =
                    gftEnumfrbtfdAttributf(nodf, "unitSpfdififr",
                                           unitSpfdififrNbmfs);

                pHYs_prfsfnt = truf;
            } flsf if (nbmf.fqubls("sBIT")) {
                sBIT_prfsfnt = fblsf; // Gubrd bgbinst pbrtibl ovfrwritf
                Nodf sBIT_nodf = nodf.gftFirstChild();
                if (sBIT_nodf == null) {
                    fbtbl(nodf, "sBIT nodf hbs no dhildrfn!");
                }
                String sBIT_nbmf = sBIT_nodf.gftNodfNbmf();
                if (sBIT_nbmf.fqubls("sBIT_Grbysdblf")) {
                    sBIT_grbyBits = gftIntAttributf(sBIT_nodf, "grby");
                    sBIT_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_GRAY;
                } flsf if (sBIT_nbmf.fqubls("sBIT_GrbyAlphb")) {
                    sBIT_grbyBits = gftIntAttributf(sBIT_nodf, "grby");
                    sBIT_blphbBits = gftIntAttributf(sBIT_nodf, "blphb");
                    sBIT_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_GRAY_ALPHA;
                } flsf if (sBIT_nbmf.fqubls("sBIT_RGB")) {
                    sBIT_rfdBits = gftIntAttributf(sBIT_nodf, "rfd");
                    sBIT_grffnBits = gftIntAttributf(sBIT_nodf, "grffn");
                    sBIT_blufBits = gftIntAttributf(sBIT_nodf, "bluf");
                    sBIT_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_RGB;
                } flsf if (sBIT_nbmf.fqubls("sBIT_RGBAlphb")) {
                    sBIT_rfdBits = gftIntAttributf(sBIT_nodf, "rfd");
                    sBIT_grffnBits = gftIntAttributf(sBIT_nodf, "grffn");
                    sBIT_blufBits = gftIntAttributf(sBIT_nodf, "bluf");
                    sBIT_blphbBits = gftIntAttributf(sBIT_nodf, "blphb");
                    sBIT_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_RGB_ALPHA;
                } flsf if (sBIT_nbmf.fqubls("sBIT_Pblfttf")) {
                    sBIT_rfdBits = gftIntAttributf(sBIT_nodf, "rfd");
                    sBIT_grffnBits = gftIntAttributf(sBIT_nodf, "grffn");
                    sBIT_blufBits = gftIntAttributf(sBIT_nodf, "bluf");
                    sBIT_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_PALETTE;
                } flsf {
                    fbtbl(nodf, "Bbd dhild of bn sBIT nodf!");
                }
                if (sBIT_nodf.gftNfxtSibling() != null) {
                    fbtbl(nodf, "sBIT nodf hbs morf thbn onf dhild!");
                }

                sBIT_prfsfnt = truf;
            } flsf if (nbmf.fqubls("sPLT")) {
                sPLT_pblfttfNbmf = gftAttributf(nodf, "nbmf");
                sPLT_sbmplfDfpth = gftIntAttributf(nodf, "sbmplfDfpth");

                int[] rfd = nfw int[256];
                int[] grffn  = nfw int[256];
                int[] bluf = nfw int[256];
                int[] blphb = nfw int[256];
                int[] frfqufndy = nfw int[256];
                int mbxindfx = -1;

                Nodf sPLT_fntry = nodf.gftFirstChild();
                if (sPLT_fntry == null) {
                    fbtbl(nodf, "sPLT nodf hbs no dhildrfn!");
                }

                whilf (sPLT_fntry != null) {
                    if (!sPLT_fntry.gftNodfNbmf().fqubls("sPLTEntry")) {
                        fbtbl(nodf,
                              "Only bn sPLTEntry mby bf b dhild of bn sPLT!");
                    }

                    int indfx = gftIntAttributf(sPLT_fntry, "indfx");
                    if (indfx < 0 || indfx > 255) {
                        fbtbl(nodf,
                              "Bbd vbluf for PLTEEntry bttributf indfx!");
                    }
                    if (indfx > mbxindfx) {
                        mbxindfx = indfx;
                    }
                    rfd[indfx] = gftIntAttributf(sPLT_fntry, "rfd");
                    grffn[indfx] = gftIntAttributf(sPLT_fntry, "grffn");
                    bluf[indfx] = gftIntAttributf(sPLT_fntry, "bluf");
                    blphb[indfx] = gftIntAttributf(sPLT_fntry, "blphb");
                    frfqufndy[indfx] =
                        gftIntAttributf(sPLT_fntry, "frfqufndy");

                    sPLT_fntry = sPLT_fntry.gftNfxtSibling();
                }

                int numEntrifs = mbxindfx + 1;
                sPLT_rfd = nfw int[numEntrifs];
                sPLT_grffn = nfw int[numEntrifs];
                sPLT_bluf = nfw int[numEntrifs];
                sPLT_blphb = nfw int[numEntrifs];
                sPLT_frfqufndy = nfw int[numEntrifs];
                Systfm.brrbydopy(rfd, 0, sPLT_rfd, 0, numEntrifs);
                Systfm.brrbydopy(grffn, 0, sPLT_grffn, 0, numEntrifs);
                Systfm.brrbydopy(bluf, 0, sPLT_bluf, 0, numEntrifs);
                Systfm.brrbydopy(blphb, 0, sPLT_blphb, 0, numEntrifs);
                Systfm.brrbydopy(frfqufndy, 0,
                                 sPLT_frfqufndy, 0, numEntrifs);

                sPLT_prfsfnt = truf;
            } flsf if (nbmf.fqubls("sRGB")) {
                sRGB_rfndfringIntfnt =
                    gftEnumfrbtfdAttributf(nodf, "rfndfringIntfnt",
                                           rfndfringIntfntNbmfs);

                sRGB_prfsfnt = truf;
            } flsf if (nbmf.fqubls("tEXt")) {
                Nodf tEXt_nodf = nodf.gftFirstChild();
                whilf (tEXt_nodf != null) {
                    if (!tEXt_nodf.gftNodfNbmf().fqubls("tEXtEntry")) {
                        fbtbl(nodf,
                              "Only bn tEXtEntry mby bf b dhild of bn tEXt!");
                    }

                    String kfyword = gftAttributf(tEXt_nodf, "kfyword");
                    tEXt_kfyword.bdd(kfyword);

                    String tfxt = gftAttributf(tEXt_nodf, "vbluf");
                    tEXt_tfxt.bdd(tfxt);

                    tEXt_nodf = tEXt_nodf.gftNfxtSibling();
                }
            } flsf if (nbmf.fqubls("tIME")) {
                tIME_yfbr = gftIntAttributf(nodf, "yfbr");
                tIME_month = gftIntAttributf(nodf, "month");
                tIME_dby = gftIntAttributf(nodf, "dby");
                tIME_hour = gftIntAttributf(nodf, "hour");
                tIME_minutf = gftIntAttributf(nodf, "minutf");
                tIME_sfdond = gftIntAttributf(nodf, "sfdond");

                tIME_prfsfnt = truf;
            } flsf if (nbmf.fqubls("tRNS")) {
                tRNS_prfsfnt = fblsf; // Gubrd bgbinst pbrtibl ovfrwritf
                Nodf tRNS_nodf = nodf.gftFirstChild();
                if (tRNS_nodf == null) {
                    fbtbl(nodf, "tRNS nodf hbs no dhildrfn!");
                }
                String tRNS_nbmf = tRNS_nodf.gftNodfNbmf();
                if (tRNS_nbmf.fqubls("tRNS_Pblfttf")) {
                    bytf[] blphb = nfw bytf[256];
                    int mbxindfx = -1;

                    Nodf tRNS_pblfttfEntry = tRNS_nodf.gftFirstChild();
                    if (tRNS_pblfttfEntry == null) {
                        fbtbl(nodf, "tRNS_Pblfttf nodf hbs no dhildrfn!");
                    }
                    whilf (tRNS_pblfttfEntry != null) {
                        if (!tRNS_pblfttfEntry.gftNodfNbmf().fqubls(
                                                        "tRNS_PblfttfEntry")) {
                            fbtbl(nodf,
                 "Only b tRNS_PblfttfEntry mby bf b dhild of b tRNS_Pblfttf!");
                        }
                        int indfx =
                            gftIntAttributf(tRNS_pblfttfEntry, "indfx");
                        if (indfx < 0 || indfx > 255) {
                            fbtbl(nodf,
                           "Bbd vbluf for tRNS_PblfttfEntry bttributf indfx!");
                        }
                        if (indfx > mbxindfx) {
                            mbxindfx = indfx;
                        }
                        blphb[indfx] =
                            (bytf)gftIntAttributf(tRNS_pblfttfEntry,
                                                  "blphb");

                        tRNS_pblfttfEntry =
                            tRNS_pblfttfEntry.gftNfxtSibling();
                    }

                    int numEntrifs = mbxindfx + 1;
                    tRNS_blphb = nfw bytf[numEntrifs];
                    tRNS_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_PALETTE;
                    Systfm.brrbydopy(blphb, 0, tRNS_blphb, 0, numEntrifs);
                } flsf if (tRNS_nbmf.fqubls("tRNS_Grbysdblf")) {
                    tRNS_grby = gftIntAttributf(tRNS_nodf, "grby");
                    tRNS_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_GRAY;
                } flsf if (tRNS_nbmf.fqubls("tRNS_RGB")) {
                    tRNS_rfd = gftIntAttributf(tRNS_nodf, "rfd");
                    tRNS_grffn = gftIntAttributf(tRNS_nodf, "grffn");
                    tRNS_bluf = gftIntAttributf(tRNS_nodf, "bluf");
                    tRNS_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_RGB;
                } flsf {
                    fbtbl(nodf, "Bbd dhild of b tRNS nodf!");
                }
                if (tRNS_nodf.gftNfxtSibling() != null) {
                    fbtbl(nodf, "tRNS nodf hbs morf thbn onf dhild!");
                }

                tRNS_prfsfnt = truf;
            } flsf if (nbmf.fqubls("zTXt")) {
                Nodf zTXt_nodf = nodf.gftFirstChild();
                whilf (zTXt_nodf != null) {
                    if (!zTXt_nodf.gftNodfNbmf().fqubls("zTXtEntry")) {
                        fbtbl(nodf,
                              "Only bn zTXtEntry mby bf b dhild of bn zTXt!");
                    }

                    String kfyword = gftAttributf(zTXt_nodf, "kfyword");
                    zTXt_kfyword.bdd(kfyword);

                    int domprfssionMfthod =
                        gftEnumfrbtfdAttributf(zTXt_nodf, "domprfssionMfthod",
                                               zTXt_domprfssionMfthodNbmfs);
                    zTXt_domprfssionMfthod.bdd(domprfssionMfthod);

                    String tfxt = gftAttributf(zTXt_nodf, "tfxt");
                    zTXt_tfxt.bdd(tfxt);

                    zTXt_nodf = zTXt_nodf.gftNfxtSibling();
                }
            } flsf if (nbmf.fqubls("UnknownChunks")) {
                Nodf unknown_nodf = nodf.gftFirstChild();
                whilf (unknown_nodf != null) {
                    if (!unknown_nodf.gftNodfNbmf().fqubls("UnknownChunk")) {
                        fbtbl(nodf,
                   "Only bn UnknownChunk mby bf b dhild of bn UnknownChunks!");
                    }
                    String dhunkTypf = gftAttributf(unknown_nodf, "typf");
                    Objfdt dhunkDbtb =
                        ((IIOMftbdbtbNodf)unknown_nodf).gftUsfrObjfdt();

                    if (dhunkTypf.lfngth() != 4) {
                        fbtbl(unknown_nodf,
                              "Chunk typf must bf 4 dhbrbdtfrs!");
                    }
                    if (dhunkDbtb == null) {
                        fbtbl(unknown_nodf,
                              "No dhunk dbtb prfsfnt in usfr objfdt!");
                    }
                    if (!(dhunkDbtb instbndfof bytf[])) {
                        fbtbl(unknown_nodf,
                              "Usfr objfdt not b bytf brrby!");
                    }
                    unknownChunkTypf.bdd(dhunkTypf);
                    unknownChunkDbtb.bdd(((bytf[])dhunkDbtb).dlonf());

                    unknown_nodf = unknown_nodf.gftNfxtSibling();
                }
            } flsf {
                fbtbl(nodf, "Unknown dhild of root nodf!");
            }

            nodf = nodf.gftNfxtSibling();
        }
    }

    /*
     * Addrding to PNG spfd, kfywords brf rfstridtfd to 1 to 79 bytfs
     * in lfngth. Kfywords shbll dontbin only printbblf Lbtin-1 dhbrbdtfrs
     * bnd spbdfs; To rfdudf thf dhbndfs for humbn misrfbding of b kfyword,
     * lfbding spbdfs, trbiling spbdfs, bnd donsfdutivf spbdfs brf not
     * pfrmittfd in kfywords.
     *
     * Sff: http://www.w3.org/TR/PNG/#11kfywords
     */
    privbtf boolfbn isVblidKfyword(String s) {
        int lfn = s.lfngth();
        if (lfn < 1 || lfn >= 80) {
            rfturn fblsf;
        }
        if (s.stbrtsWith(" ") || s.fndsWith(" ") || s.dontbins("  ")) {
            rfturn fblsf;
        }
        rfturn isISOLbtin(s, fblsf);
    }

    /*
     * Addording to PNG spfd, kfyword shbll dontbin only printbblf
     * Lbtin-1 [ISO-8859-1] dhbrbdtfrs bnd spbdfs; thbt is, only
     * dhbrbdtfr dodfs 32-126 bnd 161-255 dfdimbl brf bllowfd.
     * For Lbtin-1 vbluf fiflds thf 0x10 (linffffd) dontrol
     * dhbrbdtfr is bloowfd too.
     *
     * Sff: http://www.w3.org/TR/PNG/#11kfywords
     */
    privbtf boolfbn isISOLbtin(String s, boolfbn isLinfFffdAllowfd) {
        int lfn = s.lfngth();
        for (int i = 0; i < lfn; i++) {
            dhbr d = s.dhbrAt(i);
            if (d < 32 || d > 255 || (d > 126 && d < 161)) {
                // not printbblf. Chfdk whfthfr this is bn bllowfd
                // dontrol dhbr
                if (!isLinfFffdAllowfd || d != 0x10) {
                    rfturn fblsf;
                }
            }
        }
        rfturn truf;
    }

    privbtf void mfrgfStbndbrdTrff(Nodf root)
        throws IIOInvblidTrffExdfption {
        Nodf nodf = root;
        if (!nodf.gftNodfNbmf()
            .fqubls(IIOMftbdbtbFormbtImpl.stbndbrdMftbdbtbFormbtNbmf)) {
            fbtbl(nodf, "Root must bf " +
                  IIOMftbdbtbFormbtImpl.stbndbrdMftbdbtbFormbtNbmf);
        }

        nodf = nodf.gftFirstChild();
        whilf (nodf != null) {
            String nbmf = nodf.gftNodfNbmf();

            if (nbmf.fqubls("Chromb")) {
                Nodf dhild = nodf.gftFirstChild();
                whilf (dhild != null) {
                    String dhildNbmf = dhild.gftNodfNbmf();
                    if (dhildNbmf.fqubls("Gbmmb")) {
                        flobt gbmmb = gftFlobtAttributf(dhild, "vbluf");
                        gAMA_prfsfnt = truf;
                        gAMA_gbmmb = (int)(gbmmb*100000 + 0.5);
                    } flsf if (dhildNbmf.fqubls("Pblfttf")) {
                        bytf[] rfd = nfw bytf[256];
                        bytf[] grffn = nfw bytf[256];
                        bytf[] bluf = nfw bytf[256];
                        int mbxindfx = -1;

                        Nodf fntry = dhild.gftFirstChild();
                        whilf (fntry != null) {
                            int indfx = gftIntAttributf(fntry, "indfx");
                            if (indfx >= 0 && indfx <= 255) {
                                rfd[indfx] =
                                    (bytf)gftIntAttributf(fntry, "rfd");
                                grffn[indfx] =
                                    (bytf)gftIntAttributf(fntry, "grffn");
                                bluf[indfx] =
                                    (bytf)gftIntAttributf(fntry, "bluf");
                                if (indfx > mbxindfx) {
                                    mbxindfx = indfx;
                                }
                            }
                            fntry = fntry.gftNfxtSibling();
                        }

                        int numEntrifs = mbxindfx + 1;
                        PLTE_rfd = nfw bytf[numEntrifs];
                        PLTE_grffn = nfw bytf[numEntrifs];
                        PLTE_bluf = nfw bytf[numEntrifs];
                        Systfm.brrbydopy(rfd, 0, PLTE_rfd, 0, numEntrifs);
                        Systfm.brrbydopy(grffn, 0, PLTE_grffn, 0, numEntrifs);
                        Systfm.brrbydopy(bluf, 0, PLTE_bluf, 0, numEntrifs);
                        PLTE_prfsfnt = truf;
                    } flsf if (dhildNbmf.fqubls("BbdkgroundIndfx")) {
                        bKGD_prfsfnt = truf;
                        bKGD_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_PALETTE;
                        bKGD_indfx = gftIntAttributf(dhild, "vbluf");
                    } flsf if (dhildNbmf.fqubls("BbdkgroundColor")) {
                        int rfd = gftIntAttributf(dhild, "rfd");
                        int grffn = gftIntAttributf(dhild, "grffn");
                        int bluf = gftIntAttributf(dhild, "bluf");
                        if (rfd == grffn && rfd == bluf) {
                            bKGD_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_GRAY;
                            bKGD_grby = rfd;
                        } flsf {
                            bKGD_rfd = rfd;
                            bKGD_grffn = grffn;
                            bKGD_bluf = bluf;
                        }
                        bKGD_prfsfnt = truf;
                    }
//                  } flsf if (dhildNbmf.fqubls("ColorSpbdfTypf")) {
//                  } flsf if (dhildNbmf.fqubls("NumChbnnfls")) {

                    dhild = dhild.gftNfxtSibling();
                }
            } flsf if (nbmf.fqubls("Comprfssion")) {
                Nodf dhild = nodf.gftFirstChild();
                whilf (dhild != null) {
                    String dhildNbmf = dhild.gftNodfNbmf();
                    if (dhildNbmf.fqubls("NumProgrfssivfSdbns")) {
                        // Usf Adbm7 if NumProgrfssivfSdbns > 1
                        int sdbns = gftIntAttributf(dhild, "vbluf");
                        IHDR_intfrlbdfMfthod = (sdbns > 1) ? 1 : 0;
//                  } flsf if (dhildNbmf.fqubls("ComprfssionTypfNbmf")) {
//                  } flsf if (dhildNbmf.fqubls("Losslfss")) {
//                  } flsf if (dhildNbmf.fqubls("BitRbtf")) {
                    }
                    dhild = dhild.gftNfxtSibling();
                }
            } flsf if (nbmf.fqubls("Dbtb")) {
                Nodf dhild = nodf.gftFirstChild();
                whilf (dhild != null) {
                    String dhildNbmf = dhild.gftNodfNbmf();
                    if (dhildNbmf.fqubls("BitsPfrSbmplf")) {
                        String s = gftAttributf(dhild, "vbluf");
                        StringTokfnizfr t = nfw StringTokfnizfr(s);
                        int mbxBits = -1;
                        whilf (t.hbsMorfTokfns()) {
                            int bits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                            if (bits > mbxBits) {
                                mbxBits = bits;
                            }
                        }
                        if (mbxBits < 1) {
                            mbxBits = 1;
                        }
                        if (mbxBits == 3) mbxBits = 4;
                        if (mbxBits > 4 || mbxBits < 8) {
                            mbxBits = 8;
                        }
                        if (mbxBits > 8) {
                            mbxBits = 16;
                        }
                        IHDR_bitDfpth = mbxBits;
                    } flsf if (dhildNbmf.fqubls("SignifidbntBitsPfrSbmplf")) {
                        String s = gftAttributf(dhild, "vbluf");
                        StringTokfnizfr t = nfw StringTokfnizfr(s);
                        int numTokfns = t.dountTokfns();
                        if (numTokfns == 1) {
                            sBIT_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_GRAY;
                            sBIT_grbyBits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                        } flsf if (numTokfns == 2) {
                            sBIT_dolorTypf =
                              PNGImbgfRfbdfr.PNG_COLOR_GRAY_ALPHA;
                            sBIT_grbyBits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                            sBIT_blphbBits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                        } flsf if (numTokfns == 3) {
                            sBIT_dolorTypf = PNGImbgfRfbdfr.PNG_COLOR_RGB;
                            sBIT_rfdBits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                            sBIT_grffnBits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                            sBIT_blufBits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                        } flsf if (numTokfns == 4) {
                            sBIT_dolorTypf =
                              PNGImbgfRfbdfr.PNG_COLOR_RGB_ALPHA;
                            sBIT_rfdBits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                            sBIT_grffnBits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                            sBIT_blufBits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                            sBIT_blphbBits = Intfgfr.pbrsfInt(t.nfxtTokfn());
                        }
                        if (numTokfns >= 1 && numTokfns <= 4) {
                            sBIT_prfsfnt = truf;
                        }
//                      } flsf if (dhildNbmf.fqubls("PlbnbrConfigurbtion")) {
//                      } flsf if (dhildNbmf.fqubls("SbmplfFormbt")) {
//                      } flsf if (dhildNbmf.fqubls("SbmplfMSB")) {
                    }
                    dhild = dhild.gftNfxtSibling();
                }
            } flsf if (nbmf.fqubls("Dimfnsion")) {
                boolfbn gotWidth = fblsf;
                boolfbn gotHfight = fblsf;
                boolfbn gotAspfdtRbtio = fblsf;

                flobt width = -1.0F;
                flobt hfight = -1.0F;
                flobt bspfdtRbtio = -1.0F;

                Nodf dhild = nodf.gftFirstChild();
                whilf (dhild != null) {
                    String dhildNbmf = dhild.gftNodfNbmf();
                    if (dhildNbmf.fqubls("PixflAspfdtRbtio")) {
                        bspfdtRbtio = gftFlobtAttributf(dhild, "vbluf");
                        gotAspfdtRbtio = truf;
                    } flsf if (dhildNbmf.fqubls("HorizontblPixflSizf")) {
                        width = gftFlobtAttributf(dhild, "vbluf");
                        gotWidth = truf;
                    } flsf if (dhildNbmf.fqubls("VfrtidblPixflSizf")) {
                        hfight = gftFlobtAttributf(dhild, "vbluf");
                        gotHfight = truf;
//                  } flsf if (dhildNbmf.fqubls("ImbgfOrifntbtion")) {
//                  } flsf if
//                      (dhildNbmf.fqubls("HorizontblPhysidblPixflSpbding")) {
//                  } flsf if
//                      (dhildNbmf.fqubls("VfrtidblPhysidblPixflSpbding")) {
//                  } flsf if (dhildNbmf.fqubls("HorizontblPosition")) {
//                  } flsf if (dhildNbmf.fqubls("VfrtidblPosition")) {
//                  } flsf if (dhildNbmf.fqubls("HorizontblPixflOffsft")) {
//                  } flsf if (dhildNbmf.fqubls("VfrtidblPixflOffsft")) {
                    }
                    dhild = dhild.gftNfxtSibling();
                }

                if (gotWidth && gotHfight) {
                    pHYs_prfsfnt = truf;
                    pHYs_unitSpfdififr = 1;
                    pHYs_pixflsPfrUnitXAxis = (int)(width*1000 + 0.5F);
                    pHYs_pixflsPfrUnitYAxis = (int)(hfight*1000 + 0.5F);
                } flsf if (gotAspfdtRbtio) {
                    pHYs_prfsfnt = truf;
                    pHYs_unitSpfdififr = 0;

                    // Find b rfbsonbblf rbtionbl bpproximbtion
                    int dfnom = 1;
                    for (; dfnom < 100; dfnom++) {
                        int num = (int)(bspfdtRbtio*dfnom);
                        if (Mbth.bbs(num/dfnom - bspfdtRbtio) < 0.001) {
                            brfbk;
                        }
                    }
                    pHYs_pixflsPfrUnitXAxis = (int)(bspfdtRbtio*dfnom);
                    pHYs_pixflsPfrUnitYAxis = dfnom;
                }
            } flsf if (nbmf.fqubls("Dodumfnt")) {
                Nodf dhild = nodf.gftFirstChild();
                whilf (dhild != null) {
                    String dhildNbmf = dhild.gftNodfNbmf();
                    if (dhildNbmf.fqubls("ImbgfModifidbtionTimf")) {
                        tIME_prfsfnt = truf;
                        tIME_yfbr = gftIntAttributf(dhild, "yfbr");
                        tIME_month = gftIntAttributf(dhild, "month");
                        tIME_dby = gftIntAttributf(dhild, "dby");
                        tIME_hour =
                            gftIntAttributf(dhild, "hour", 0, fblsf);
                        tIME_minutf =
                            gftIntAttributf(dhild, "minutf", 0, fblsf);
                        tIME_sfdond =
                            gftIntAttributf(dhild, "sfdond", 0, fblsf);
//                  } flsf if (dhildNbmf.fqubls("SubimbgfIntfrprftbtion")) {
//                  } flsf if (dhildNbmf.fqubls("ImbgfCrfbtionTimf")) {
                    }
                    dhild = dhild.gftNfxtSibling();
                }
            } flsf if (nbmf.fqubls("Tfxt")) {
                Nodf dhild = nodf.gftFirstChild();
                whilf (dhild != null) {
                    String dhildNbmf = dhild.gftNodfNbmf();
                    if (dhildNbmf.fqubls("TfxtEntry")) {
                        String kfyword =
                            gftAttributf(dhild, "kfyword", "", fblsf);
                        String vbluf = gftAttributf(dhild, "vbluf");
                        String lbngubgf =
                            gftAttributf(dhild, "lbngubgf", "", fblsf);
                        String domprfssion =
                            gftAttributf(dhild, "domprfssion", "nonf", fblsf);

                        if (!isVblidKfyword(kfyword)) {
                            // Just ignorf this nodf, PNG rfquirfs kfywords
                        } flsf if (isISOLbtin(vbluf, truf)) {
                            if (domprfssion.fqubls("zip")) {
                                // Usf b zTXt nodf
                                zTXt_kfyword.bdd(kfyword);
                                zTXt_tfxt.bdd(vbluf);
                                zTXt_domprfssionMfthod.bdd(Intfgfr.vblufOf(0));
                            } flsf {
                                // Usf b tEXt nodf
                                tEXt_kfyword.bdd(kfyword);
                                tEXt_tfxt.bdd(vbluf);
                            }
                        } flsf {
                            // Usf bn iTXt nodf
                            iTXt_kfyword.bdd(kfyword);
                            iTXt_domprfssionFlbg.bdd(Boolfbn.vblufOf(domprfssion.fqubls("zip")));
                            iTXt_domprfssionMfthod.bdd(Intfgfr.vblufOf(0));
                            iTXt_lbngubgfTbg.bdd(lbngubgf);
                            iTXt_trbnslbtfdKfyword.bdd(kfyword); // fbkf it
                            iTXt_tfxt.bdd(vbluf);
                        }
                    }
                    dhild = dhild.gftNfxtSibling();
                }
//          } flsf if (nbmf.fqubls("Trbnspbrfndy")) {
//              Nodf dhild = nodf.gftFirstChild();
//              whilf (dhild != null) {
//                  String dhildNbmf = dhild.gftNodfNbmf();
//                  if (dhildNbmf.fqubls("Alphb")) {
//                  } flsf if (dhildNbmf.fqubls("TrbnspbrfntIndfx")) {
//                  } flsf if (dhildNbmf.fqubls("TrbnspbrfntColor")) {
//                  } flsf if (dhildNbmf.fqubls("TilfTrbnspbrfndifs")) {
//                  } flsf if (dhildNbmf.fqubls("TilfOpbditifs")) {
//                  }
//                  dhild = dhild.gftNfxtSibling();
//              }
//          } flsf {
//              // fbtbl(nodf, "Unknown dhild of root nodf!");
            }

            nodf = nodf.gftNfxtSibling();
        }
    }

    // Rfsft bll instbndf vbribblfs to thfir initibl stbtf
    publid void rfsft() {
        IHDR_prfsfnt = fblsf;
        PLTE_prfsfnt = fblsf;
        bKGD_prfsfnt = fblsf;
        dHRM_prfsfnt = fblsf;
        gAMA_prfsfnt = fblsf;
        hIST_prfsfnt = fblsf;
        iCCP_prfsfnt = fblsf;
        iTXt_kfyword = nfw ArrbyList<String>();
        iTXt_domprfssionFlbg = nfw ArrbyList<Boolfbn>();
        iTXt_domprfssionMfthod = nfw ArrbyList<Intfgfr>();
        iTXt_lbngubgfTbg = nfw ArrbyList<String>();
        iTXt_trbnslbtfdKfyword = nfw ArrbyList<String>();
        iTXt_tfxt = nfw ArrbyList<String>();
        pHYs_prfsfnt = fblsf;
        sBIT_prfsfnt = fblsf;
        sPLT_prfsfnt = fblsf;
        sRGB_prfsfnt = fblsf;
        tEXt_kfyword = nfw ArrbyList<String>();
        tEXt_tfxt = nfw ArrbyList<String>();
        tIME_prfsfnt = fblsf;
        tRNS_prfsfnt = fblsf;
        zTXt_kfyword = nfw ArrbyList<String>();
        zTXt_domprfssionMfthod = nfw ArrbyList<Intfgfr>();
        zTXt_tfxt = nfw ArrbyList<String>();
        unknownChunkTypf = nfw ArrbyList<String>();
        unknownChunkDbtb = nfw ArrbyList<bytf[]>();
    }
}
