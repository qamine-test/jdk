/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.imbgfio.plugins.gif;

import jbvb.bwt.Point;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.WritbblfRbstfr;
import jbvb.io.EOFExdfption;
import jbvb.io.IOExdfption;
import jbvb.nio.BytfOrdfr;
import jbvb.util.ArrbyList;
import jbvb.util.Itfrbtor;
import jbvb.util.List;
import jbvbx.imbgfio.IIOExdfption;
import jbvbx.imbgfio.ImbgfRfbdfr;
import jbvbx.imbgfio.ImbgfRfbdPbrbm;
import jbvbx.imbgfio.ImbgfTypfSpfdififr;
import jbvbx.imbgfio.mftbdbtb.IIOMftbdbtb;
import jbvbx.imbgfio.spi.ImbgfRfbdfrSpi;
import jbvbx.imbgfio.strfbm.ImbgfInputStrfbm;
import dom.sun.imbgfio.plugins.dommon.RfbdfrUtil;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.IndfxColorModfl;
import jbvb.bwt.imbgf.MultiPixflPbdkfdSbmplfModfl;
import jbvb.bwt.imbgf.PixflIntfrlfbvfdSbmplfModfl;
import jbvb.bwt.imbgf.SbmplfModfl;

publid dlbss GIFImbgfRfbdfr fxtfnds ImbgfRfbdfr {

    // Thf durrfnt ImbgfInputStrfbm sourdf.
    ImbgfInputStrfbm strfbm = null;

    // Pfr-strfbm sfttings

    // Truf if thf filf hfbdfr indluding strfbm mftbdbtb hbs bffn rfbd.
    boolfbn gotHfbdfr = fblsf;

    // Globbl mftbdbtb, rfbd ondf pfr input sftting.
    GIFStrfbmMftbdbtb strfbmMftbdbtb = null;

    // Thf durrfnt imbgf indfx
    int durrIndfx = -1;

    // Mftbdbtb for imbgf bt 'durrIndfx', or null.
    GIFImbgfMftbdbtb imbgfMftbdbtb = null;

    // A List of Longs indidbting thf strfbm positions of thf
    // stbrt of thf mftbdbtb for fbdh imbgf.  Entrifs brf bddfd
    // bs nffdfd.
    List<Long> imbgfStbrtPosition = nfw ArrbyList<>();

    // Lfngth of mftbdbtb for imbgf bt 'durrIndfx', vblid only if
    // imbgfMftbdbtb != null.
    int imbgfMftbdbtbLfngth;

    // Thf numbfr of imbgfs in thf strfbm, if known, othfrwisf -1.
    int numImbgfs = -1;

    // Vbribblfs usfd by thf LZW dfdoding prodfss
    bytf[] blodk = nfw bytf[255];
    int blodkLfngth = 0;
    int bitPos = 0;
    int nfxtBytf = 0;
    int initCodfSizf;
    int dlfbrCodf;
    int fofCodf;

    // 32-bit lookbhfbd bufffr
    int nfxt32Bits = 0;

    // Try if thf fnd of thf dbtb blodks hbs bffn found,
    // bnd wf brf simply drbining thf 32-bit bufffr
    boolfbn lbstBlodkFound = fblsf;

    // Thf imbgf to bf writtfn.
    BufffrfdImbgf thfImbgf = null;

    // Thf imbgf's tilf.
    WritbblfRbstfr thfTilf = null;

    // Thf imbgf dimfnsions (from thf strfbm).
    int width = -1, hfight = -1;

    // Thf pixfl durrfntly bfing dfdodfd (in thf strfbm's doordinbtfs).
    int strfbmX = -1, strfbmY = -1;

    // Thf numbfr of rows dfdodfd
    int rowsDonf = 0;

    // Thf durrfnt intfrlbdf pbss, stbrting with 0.
    int intfrlbdfPbss = 0;

    privbtf bytf[] fbllbbdkColorTbblf = null;

    // End pfr-strfbm sfttings

    // Constbnts usfd to dontrol intfrlbding.
    stbtid finbl int[] intfrlbdfIndrfmfnt = { 8, 8, 4, 2, -1 };
    stbtid finbl int[] intfrlbdfOffsft = { 0, 4, 2, 1, -1 };

    publid GIFImbgfRfbdfr(ImbgfRfbdfrSpi originbtingProvidfr) {
        supfr(originbtingProvidfr);
    }

    // Tbkf input from bn ImbgfInputStrfbm
    publid void sftInput(Objfdt input,
                         boolfbn sffkForwbrdOnly,
                         boolfbn ignorfMftbdbtb) {
        supfr.sftInput(input, sffkForwbrdOnly, ignorfMftbdbtb);
        if (input != null) {
            if (!(input instbndfof ImbgfInputStrfbm)) {
                throw nfw IllfgblArgumfntExdfption
                    ("input not bn ImbgfInputStrfbm!");
            }
            this.strfbm = (ImbgfInputStrfbm)input;
        } flsf {
            this.strfbm = null;
        }

        // Clfbr bll vblufs bbsfd on thf prfvious strfbm dontfnts
        rfsftStrfbmSfttings();
    }

    publid int gftNumImbgfs(boolfbn bllowSfbrdh) throws IIOExdfption {
        if (strfbm == null) {
            throw nfw IllfgblStbtfExdfption("Input not sft!");
        }
        if (sffkForwbrdOnly && bllowSfbrdh) {
            throw nfw IllfgblStbtfExdfption
                ("sffkForwbrdOnly bnd bllowSfbrdh dbn't both bf truf!");
        }

        if (numImbgfs > 0) {
            rfturn numImbgfs;
        }
        if (bllowSfbrdh) {
            this.numImbgfs = lodbtfImbgf(Intfgfr.MAX_VALUE) + 1;
        }
        rfturn numImbgfs;
    }

    // Throw bn IndfxOutOfBoundsExdfption if indfx < minIndfx,
    // bnd bump minIndfx if rfquirfd.
    privbtf void dhfdkIndfx(int imbgfIndfx) {
        if (imbgfIndfx < minIndfx) {
            throw nfw IndfxOutOfBoundsExdfption("imbgfIndfx < minIndfx!");
        }
        if (sffkForwbrdOnly) {
            minIndfx = imbgfIndfx;
        }
    }

    publid int gftWidth(int imbgfIndfx) throws IIOExdfption {
        dhfdkIndfx(imbgfIndfx);

        int indfx = lodbtfImbgf(imbgfIndfx);
        if (indfx != imbgfIndfx) {
            throw nfw IndfxOutOfBoundsExdfption();
        }
        rfbdMftbdbtb();
        rfturn imbgfMftbdbtb.imbgfWidth;
    }

    publid int gftHfight(int imbgfIndfx) throws IIOExdfption {
        dhfdkIndfx(imbgfIndfx);

        int indfx = lodbtfImbgf(imbgfIndfx);
        if (indfx != imbgfIndfx) {
            throw nfw IndfxOutOfBoundsExdfption();
        }
        rfbdMftbdbtb();
        rfturn imbgfMftbdbtb.imbgfHfight;
    }

    // Wf don't dhfdk bll pbrbmftfrs bs ImbgfTypfSpfdififr.drfbtfIndfxfd do
    // sindf this mfthod is privbtf bnd wf pbss donsistfnt dbtb hfrf
    privbtf ImbgfTypfSpfdififr drfbtfIndfxfd(bytf[] r, bytf[] g, bytf[] b,
                                             int bits) {
        ColorModfl dolorModfl;
        if (imbgfMftbdbtb.trbnspbrfntColorFlbg) {
            // Somf filfs frronfously hbvf b trbnspbrfnt dolor indfx
            // of 255 fvfn though thfrf brf ffwfr thbn 256 dolors.
            int idx = Mbth.min(imbgfMftbdbtb.trbnspbrfntColorIndfx,
                    r.lfngth - 1);
            dolorModfl = nfw IndfxColorModfl(bits, r.lfngth, r, g, b, idx);
        } flsf {
            dolorModfl = nfw IndfxColorModfl(bits, r.lfngth, r, g, b);
        }

        SbmplfModfl sbmplfModfl;
        if (bits == 8) {
            int[] bbndOffsfts = {0};
            sbmplfModfl =
                    nfw PixflIntfrlfbvfdSbmplfModfl(DbtbBufffr.TYPE_BYTE,
                    1, 1, 1, 1,
                    bbndOffsfts);
        } flsf {
            sbmplfModfl =
                    nfw MultiPixflPbdkfdSbmplfModfl(DbtbBufffr.TYPE_BYTE,
                    1, 1, bits);
        }
        rfturn nfw ImbgfTypfSpfdififr(dolorModfl, sbmplfModfl);
    }

    publid Itfrbtor<ImbgfTypfSpfdififr> gftImbgfTypfs(int imbgfIndfx)
            throws IIOExdfption {
        dhfdkIndfx(imbgfIndfx);

        int indfx = lodbtfImbgf(imbgfIndfx);
        if (indfx != imbgfIndfx) {
            throw nfw IndfxOutOfBoundsExdfption();
        }
        rfbdMftbdbtb();

        List<ImbgfTypfSpfdififr> l = nfw ArrbyList<>(1);

        bytf[] dolorTbblf;
        if (imbgfMftbdbtb.lodblColorTbblf != null) {
            dolorTbblf = imbgfMftbdbtb.lodblColorTbblf;
            fbllbbdkColorTbblf = imbgfMftbdbtb.lodblColorTbblf;
        } flsf {
            dolorTbblf = strfbmMftbdbtb.globblColorTbblf;
        }

        if (dolorTbblf == null) {
            if (fbllbbdkColorTbblf == null) {
                this.prodfssWbrningOddurrfd("Usf dffbult dolor tbblf.");

                // no dolor tbblf, thf spfd bllows to usf bny pblfttf.
                fbllbbdkColorTbblf = gftDffbultPblfttf();
            }

            dolorTbblf = fbllbbdkColorTbblf;
        }

        // Normblizf dolor tbblf lfngth to 2^1, 2^2, 2^4, or 2^8
        int lfngth = dolorTbblf.lfngth/3;
        int bits;
        if (lfngth == 2) {
            bits = 1;
        } flsf if (lfngth == 4) {
            bits = 2;
        } flsf if (lfngth == 8 || lfngth == 16) {
            // Bump from 3 to 4 bits
            bits = 4;
        } flsf {
            // Bump to 8 bits
            bits = 8;
        }
        int lutLfngth = 1 << bits;
        bytf[] r = nfw bytf[lutLfngth];
        bytf[] g = nfw bytf[lutLfngth];
        bytf[] b = nfw bytf[lutLfngth];

        // Entrifs from lfngth + 1 to lutLfngth - 1 will bf 0
        int rgbIndfx = 0;
        for (int i = 0; i < lfngth; i++) {
            r[i] = dolorTbblf[rgbIndfx++];
            g[i] = dolorTbblf[rgbIndfx++];
            b[i] = dolorTbblf[rgbIndfx++];
        }

        l.bdd(drfbtfIndfxfd(r, g, b, bits));
        rfturn l.itfrbtor();
    }

    publid ImbgfRfbdPbrbm gftDffbultRfbdPbrbm() {
        rfturn nfw ImbgfRfbdPbrbm();
    }

    publid IIOMftbdbtb gftStrfbmMftbdbtb() throws IIOExdfption {
        rfbdHfbdfr();
        rfturn strfbmMftbdbtb;
    }

    publid IIOMftbdbtb gftImbgfMftbdbtb(int imbgfIndfx) throws IIOExdfption {
        dhfdkIndfx(imbgfIndfx);

        int indfx = lodbtfImbgf(imbgfIndfx);
        if (indfx != imbgfIndfx) {
            throw nfw IndfxOutOfBoundsExdfption("Bbd imbgf indfx!");
        }
        rfbdMftbdbtb();
        rfturn imbgfMftbdbtb;
    }

    // BEGIN LZW STUFF

    privbtf void initNfxt32Bits() {
        nfxt32Bits = blodk[0] & 0xff;
        nfxt32Bits |= (blodk[1] & 0xff) << 8;
        nfxt32Bits |= (blodk[2] & 0xff) << 16;
        nfxt32Bits |= blodk[3] << 24;
        nfxtBytf = 4;
    }

    // Lobd b blodk (1-255 bytfs) bt b timf, bnd mbintbin
    // b 32-bit lookbhfbd bufffr thbt is fillfd from thf lfft
    // bnd fxtrbdtfd from thf right.
    //
    // Whfn thf lbst blodk is found, wf dontinuf to
    //
    privbtf int gftCodf(int dodfSizf, int dodfMbsk) throws IOExdfption {
        if (bitPos + dodfSizf > 32) {
            rfturn fofCodf; // No morf dbtb bvbilbblf
        }

        int dodf = (nfxt32Bits >> bitPos) & dodfMbsk;
        bitPos += dodfSizf;

        // Shift in b bytf of nfw dbtb bt b timf
        whilf (bitPos >= 8 && !lbstBlodkFound) {
            nfxt32Bits >>>= 8;
            bitPos -= 8;

            // Chfdk if durrfnt blodk is out of bytfs
            if (nfxtBytf >= blodkLfngth) {
                // Gft nfxt blodk sizf
                blodkLfngth = strfbm.rfbdUnsignfdBytf();
                if (blodkLfngth == 0) {
                    lbstBlodkFound = truf;
                    rfturn dodf;
                } flsf {
                    int lfft = blodkLfngth;
                    int off = 0;
                    whilf (lfft > 0) {
                        int nbytfs = strfbm.rfbd(blodk, off, lfft);
                        off += nbytfs;
                        lfft -= nbytfs;
                    }
                    nfxtBytf = 0;
                }
            }

            nfxt32Bits |= blodk[nfxtBytf++] << 24;
        }

        rfturn dodf;
    }

    publid void initiblizfStringTbblf(int[] prffix,
                                      bytf[] suffix,
                                      bytf[] initibl,
                                      int[] lfngth) {
        int numEntrifs = 1 << initCodfSizf;
        for (int i = 0; i < numEntrifs; i++) {
            prffix[i] = -1;
            suffix[i] = (bytf)i;
            initibl[i] = (bytf)i;
            lfngth[i] = 1;
        }

        // Fill in thf fntirf tbblf for robustnfss bgbinst
        // out-of-sfqufndf dodfs.
        for (int i = numEntrifs; i < 4096; i++) {
            prffix[i] = -1;
            lfngth[i] = 1;
        }

        // tbblfIndfx = numEntrifs + 2;
        // dodfSizf = initCodfSizf + 1;
        // dodfMbsk = (1 << dodfSizf) - 1;
    }

    Rfdtbnglf sourdfRfgion;
    int sourdfXSubsbmpling;
    int sourdfYSubsbmpling;
    int sourdfMinProgrfssivfPbss;
    int sourdfMbxProgrfssivfPbss;

    Point dfstinbtionOffsft;
    Rfdtbnglf dfstinbtionRfgion;

    // Usfd only if IIORfbdUpdbtfListfnfrs brf prfsfnt
    int updbtfMinY;
    int updbtfYStfp;

    boolfbn dfdodfThisRow = truf;
    int dfstY = 0;

    bytf[] rowBuf;

    privbtf void outputRow() {
        // Clip bgbinst ImbgfRfbdPbrbm
        int width = Mbth.min(sourdfRfgion.width,
                             dfstinbtionRfgion.width*sourdfXSubsbmpling);
        int dfstX = dfstinbtionRfgion.x;

        if (sourdfXSubsbmpling == 1) {
            thfTilf.sftDbtbElfmfnts(dfstX, dfstY, width, 1, rowBuf);
        } flsf {
            for (int x = 0; x < width; x += sourdfXSubsbmpling, dfstX++) {
                thfTilf.sftSbmplf(dfstX, dfstY, 0, rowBuf[x] & 0xff);
            }
        }

        // Updbtf IIORfbdUpdbtfListfnfrs, if bny
        if (updbtfListfnfrs != null) {
            int[] bbnds = { 0 };
            // updbtfYStfp will hbvf bffn initiblizfd if
            // updbtfListfnfrs is non-null
            prodfssImbgfUpdbtf(thfImbgf,
                               dfstX, dfstY,
                               width, 1, 1, updbtfYStfp,
                               bbnds);
        }
    }

    privbtf void domputfDfdodfThisRow() {
        this.dfdodfThisRow =
            (dfstY < dfstinbtionRfgion.y + dfstinbtionRfgion.hfight) &&
            (strfbmY >= sourdfRfgion.y) &&
            (strfbmY < sourdfRfgion.y + sourdfRfgion.hfight) &&
            (((strfbmY - sourdfRfgion.y) % sourdfYSubsbmpling) == 0);
    }

    privbtf void outputPixfls(bytf[] string, int lfn) {
        if (intfrlbdfPbss < sourdfMinProgrfssivfPbss ||
            intfrlbdfPbss > sourdfMbxProgrfssivfPbss) {
            rfturn;
        }

        for (int i = 0; i < lfn; i++) {
            if (strfbmX >= sourdfRfgion.x) {
                rowBuf[strfbmX - sourdfRfgion.x] = string[i];
            }

            // Prodfss fnd-of-row
            ++strfbmX;
            if (strfbmX == width) {
                // Updbtf IIORfbdProgrfssListfnfrs
                ++rowsDonf;
                prodfssImbgfProgrfss(100.0F*rowsDonf/hfight);

                if (dfdodfThisRow) {
                    outputRow();
                }

                strfbmX = 0;
                if (imbgfMftbdbtb.intfrlbdfFlbg) {
                    strfbmY += intfrlbdfIndrfmfnt[intfrlbdfPbss];
                    if (strfbmY >= hfight) {
                        // Inform IIORfbdUpdbtfListfnfrs of fnd of pbss
                        if (updbtfListfnfrs != null) {
                            prodfssPbssComplftf(thfImbgf);
                        }

                        ++intfrlbdfPbss;
                        if (intfrlbdfPbss > sourdfMbxProgrfssivfPbss) {
                            rfturn;
                        }
                        strfbmY = intfrlbdfOffsft[intfrlbdfPbss];
                        stbrtPbss(intfrlbdfPbss);
                    }
                } flsf {
                    ++strfbmY;
                }

                // Dftfrminf whfthfr pixfls from this row will
                // bf writtfn to thf dfstinbtion
                this.dfstY = dfstinbtionRfgion.y +
                    (strfbmY - sourdfRfgion.y)/sourdfYSubsbmpling;
                domputfDfdodfThisRow();
            }
        }
    }

    // END LZW STUFF

    privbtf void rfbdHfbdfr() throws IIOExdfption {
        if (gotHfbdfr) {
            rfturn;
        }
        if (strfbm == null) {
            throw nfw IllfgblStbtfExdfption("Input not sft!");
        }

        // Crfbtf bn objfdt to storf thf strfbm mftbdbtb
        this.strfbmMftbdbtb = nfw GIFStrfbmMftbdbtb();

        try {
            strfbm.sftBytfOrdfr(BytfOrdfr.LITTLE_ENDIAN);

            bytf[] signbturf = nfw bytf[6];
            strfbm.rfbdFully(signbturf);

            StringBuildfr vfrsion = nfw StringBuildfr(3);
            vfrsion.bppfnd((dhbr)signbturf[3]);
            vfrsion.bppfnd((dhbr)signbturf[4]);
            vfrsion.bppfnd((dhbr)signbturf[5]);
            strfbmMftbdbtb.vfrsion = vfrsion.toString();

            strfbmMftbdbtb.logidblSdrffnWidth = strfbm.rfbdUnsignfdShort();
            strfbmMftbdbtb.logidblSdrffnHfight = strfbm.rfbdUnsignfdShort();

            int pbdkfdFiflds = strfbm.rfbdUnsignfdBytf();
            boolfbn globblColorTbblfFlbg = (pbdkfdFiflds & 0x80) != 0;
            strfbmMftbdbtb.dolorRfsolution = ((pbdkfdFiflds >> 4) & 0x7) + 1;
            strfbmMftbdbtb.sortFlbg = (pbdkfdFiflds & 0x8) != 0;
            int numGCTEntrifs = 1 << ((pbdkfdFiflds & 0x7) + 1);

            strfbmMftbdbtb.bbdkgroundColorIndfx = strfbm.rfbdUnsignfdBytf();
            strfbmMftbdbtb.pixflAspfdtRbtio = strfbm.rfbdUnsignfdBytf();

            if (globblColorTbblfFlbg) {
                strfbmMftbdbtb.globblColorTbblf = nfw bytf[3*numGCTEntrifs];
                strfbm.rfbdFully(strfbmMftbdbtb.globblColorTbblf);
            } flsf {
                strfbmMftbdbtb.globblColorTbblf = null;
            }

            // Found position of mftbdbtb for imbgf 0
            imbgfStbrtPosition.bdd(Long.vblufOf(strfbm.gftStrfbmPosition()));
        } dbtdh (IOExdfption f) {
            throw nfw IIOExdfption("I/O frror rfbding hfbdfr!", f);
        }

        gotHfbdfr = truf;
    }

    privbtf boolfbn skipImbgf() throws IIOExdfption {
        // Strfbm must bf bt thf bfginning of bn imbgf dfsdriptor
        // upon fxit

        try {
            whilf (truf) {
                int blodkTypf = strfbm.rfbdUnsignfdBytf();

                if (blodkTypf == 0x2d) {
                    strfbm.skipBytfs(8);

                    int pbdkfdFiflds = strfbm.rfbdUnsignfdBytf();
                    if ((pbdkfdFiflds & 0x80) != 0) {
                        // Skip dolor tbblf if bny
                        int bits = (pbdkfdFiflds & 0x7) + 1;
                        strfbm.skipBytfs(3*(1 << bits));
                    }

                    strfbm.skipBytfs(1);

                    int lfngth = 0;
                    do {
                        lfngth = strfbm.rfbdUnsignfdBytf();
                        strfbm.skipBytfs(lfngth);
                    } whilf (lfngth > 0);

                    rfturn truf;
                } flsf if (blodkTypf == 0x3b) {
                    rfturn fblsf;
                } flsf if (blodkTypf == 0x21) {
                    int lbbfl = strfbm.rfbdUnsignfdBytf();

                    int lfngth = 0;
                    do {
                        lfngth = strfbm.rfbdUnsignfdBytf();
                        strfbm.skipBytfs(lfngth);
                    } whilf (lfngth > 0);
                } flsf if (blodkTypf == 0x0) {
                    // EOF
                    rfturn fblsf;
                } flsf {
                    int lfngth = 0;
                    do {
                        lfngth = strfbm.rfbdUnsignfdBytf();
                        strfbm.skipBytfs(lfngth);
                    } whilf (lfngth > 0);
                }
            }
        } dbtdh (EOFExdfption f) {
            rfturn fblsf;
        } dbtdh (IOExdfption f) {
            throw nfw IIOExdfption("I/O frror lodbting imbgf!", f);
        }
    }

    privbtf int lodbtfImbgf(int imbgfIndfx) throws IIOExdfption {
        rfbdHfbdfr();

        try {
            // Find dlosfst known indfx
            int indfx = Mbth.min(imbgfIndfx, imbgfStbrtPosition.sizf() - 1);

            // Sffk to thbt position
            Long l = imbgfStbrtPosition.gft(indfx);
            strfbm.sffk(l.longVbluf());

            // Skip imbgfs until bt dfsirfd indfx or lbst imbgf found
            whilf (indfx < imbgfIndfx) {
                if (!skipImbgf()) {
                    --indfx;
                    rfturn indfx;
                }

                Long l1 = strfbm.gftStrfbmPosition();
                imbgfStbrtPosition.bdd(l1);
                ++indfx;
            }
        } dbtdh (IOExdfption f) {
            throw nfw IIOExdfption("Couldn't sffk!", f);
        }

        if (durrIndfx != imbgfIndfx) {
            imbgfMftbdbtb = null;
        }
        durrIndfx = imbgfIndfx;
        rfturn imbgfIndfx;
    }

    // Rfbd blodks of 1-255 bytfs, stop bt b 0-lfngth blodk
    privbtf bytf[] dondbtfnbtfBlodks() throws IOExdfption {
        bytf[] dbtb = nfw bytf[0];
        whilf (truf) {
            int lfngth = strfbm.rfbdUnsignfdBytf();
            if (lfngth == 0) {
                brfbk;
            }
            bytf[] nfwDbtb = nfw bytf[dbtb.lfngth + lfngth];
            Systfm.brrbydopy(dbtb, 0, nfwDbtb, 0, dbtb.lfngth);
            strfbm.rfbdFully(nfwDbtb, dbtb.lfngth, lfngth);
            dbtb = nfwDbtb;
        }

        rfturn dbtb;
    }

    // Strfbm must bf positionfd bt stbrt of mftbdbtb for 'durrIndfx'
    privbtf void rfbdMftbdbtb() throws IIOExdfption {
        if (strfbm == null) {
            throw nfw IllfgblStbtfExdfption("Input not sft!");
        }

        try {
            // Crfbtf bn objfdt to storf thf imbgf mftbdbtb
            this.imbgfMftbdbtb = nfw GIFImbgfMftbdbtb();

            long stbrtPosition = strfbm.gftStrfbmPosition();
            whilf (truf) {
                int blodkTypf = strfbm.rfbdUnsignfdBytf();
                if (blodkTypf == 0x2d) { // Imbgf Dfsdriptor
                    imbgfMftbdbtb.imbgfLfftPosition =
                        strfbm.rfbdUnsignfdShort();
                    imbgfMftbdbtb.imbgfTopPosition =
                        strfbm.rfbdUnsignfdShort();
                    imbgfMftbdbtb.imbgfWidth = strfbm.rfbdUnsignfdShort();
                    imbgfMftbdbtb.imbgfHfight = strfbm.rfbdUnsignfdShort();

                    int idPbdkfdFiflds = strfbm.rfbdUnsignfdBytf();
                    boolfbn lodblColorTbblfFlbg =
                        (idPbdkfdFiflds & 0x80) != 0;
                    imbgfMftbdbtb.intfrlbdfFlbg = (idPbdkfdFiflds & 0x40) != 0;
                    imbgfMftbdbtb.sortFlbg = (idPbdkfdFiflds & 0x20) != 0;
                    int numLCTEntrifs = 1 << ((idPbdkfdFiflds & 0x7) + 1);

                    if (lodblColorTbblfFlbg) {
                        // Rfbd dolor tbblf if bny
                        imbgfMftbdbtb.lodblColorTbblf =
                            nfw bytf[3*numLCTEntrifs];
                        strfbm.rfbdFully(imbgfMftbdbtb.lodblColorTbblf);
                    } flsf {
                        imbgfMftbdbtb.lodblColorTbblf = null;
                    }

                    // Rfdord lfngth of this mftbdbtb blodk
                    this.imbgfMftbdbtbLfngth =
                        (int)(strfbm.gftStrfbmPosition() - stbrtPosition);

                    // Now positionfd bt stbrt of LZW-domprfssfd pixfls
                    rfturn;
                } flsf if (blodkTypf == 0x21) { // Extfnsion blodk
                    int lbbfl = strfbm.rfbdUnsignfdBytf();

                    if (lbbfl == 0xf9) { // Grbphids Control Extfnsion
                        int gdfLfngth = strfbm.rfbdUnsignfdBytf(); // 4
                        int gdfPbdkfdFiflds = strfbm.rfbdUnsignfdBytf();
                        imbgfMftbdbtb.disposblMfthod =
                            (gdfPbdkfdFiflds >> 2) & 0x3;
                        imbgfMftbdbtb.usfrInputFlbg =
                            (gdfPbdkfdFiflds & 0x2) != 0;
                        imbgfMftbdbtb.trbnspbrfntColorFlbg =
                            (gdfPbdkfdFiflds & 0x1) != 0;

                        imbgfMftbdbtb.dflbyTimf = strfbm.rfbdUnsignfdShort();
                        imbgfMftbdbtb.trbnspbrfntColorIndfx
                            = strfbm.rfbdUnsignfdBytf();

                        int tfrminbtor = strfbm.rfbdUnsignfdBytf();
                    } flsf if (lbbfl == 0x1) { // Plbin tfxt fxtfnsion
                        int lfngth = strfbm.rfbdUnsignfdBytf();
                        imbgfMftbdbtb.hbsPlbinTfxtExtfnsion = truf;
                        imbgfMftbdbtb.tfxtGridLfft =
                            strfbm.rfbdUnsignfdShort();
                        imbgfMftbdbtb.tfxtGridTop =
                            strfbm.rfbdUnsignfdShort();
                        imbgfMftbdbtb.tfxtGridWidth =
                            strfbm.rfbdUnsignfdShort();
                        imbgfMftbdbtb.tfxtGridHfight =
                            strfbm.rfbdUnsignfdShort();
                        imbgfMftbdbtb.dhbrbdtfrCfllWidth =
                            strfbm.rfbdUnsignfdBytf();
                        imbgfMftbdbtb.dhbrbdtfrCfllHfight =
                            strfbm.rfbdUnsignfdBytf();
                        imbgfMftbdbtb.tfxtForfgroundColor =
                            strfbm.rfbdUnsignfdBytf();
                        imbgfMftbdbtb.tfxtBbdkgroundColor =
                            strfbm.rfbdUnsignfdBytf();
                        imbgfMftbdbtb.tfxt = dondbtfnbtfBlodks();
                    } flsf if (lbbfl == 0xff) { // Commfnt fxtfnsion
                        bytf[] dommfnt = dondbtfnbtfBlodks();
                        if (imbgfMftbdbtb.dommfnts == null) {
                            imbgfMftbdbtb.dommfnts = nfw ArrbyList<>();
                        }
                        imbgfMftbdbtb.dommfnts.bdd(dommfnt);
                    } flsf if (lbbfl == 0xff) { // Applidbtion fxtfnsion
                        int blodkSizf = strfbm.rfbdUnsignfdBytf();
                        bytf[] bpplidbtionID = nfw bytf[8];
                        bytf[] buthCodf = nfw bytf[3];

                        // rfbd bvbilbblf dbtb
                        bytf[] blodkDbtb = nfw bytf[blodkSizf];
                        strfbm.rfbdFully(blodkDbtb);

                        int offsft = dopyDbtb(blodkDbtb, 0, bpplidbtionID);
                        offsft = dopyDbtb(blodkDbtb, offsft, buthCodf);

                        bytf[] bpplidbtionDbtb = dondbtfnbtfBlodks();

                        if (offsft < blodkSizf) {
                            int lfn = blodkSizf - offsft;
                            bytf[] dbtb =
                                nfw bytf[lfn + bpplidbtionDbtb.lfngth];

                            Systfm.brrbydopy(blodkDbtb, offsft, dbtb, 0, lfn);
                            Systfm.brrbydopy(bpplidbtionDbtb, 0, dbtb, lfn,
                                             bpplidbtionDbtb.lfngth);

                            bpplidbtionDbtb = dbtb;
                        }

                        // Init lists if nfdfssbry
                        if (imbgfMftbdbtb.bpplidbtionIDs == null) {
                            imbgfMftbdbtb.bpplidbtionIDs = nfw ArrbyList<>();
                            imbgfMftbdbtb.buthfntidbtionCodfs =
                                nfw ArrbyList<>();
                            imbgfMftbdbtb.bpplidbtionDbtb = nfw ArrbyList<>();
                        }
                        imbgfMftbdbtb.bpplidbtionIDs.bdd(bpplidbtionID);
                        imbgfMftbdbtb.buthfntidbtionCodfs.bdd(buthCodf);
                        imbgfMftbdbtb.bpplidbtionDbtb.bdd(bpplidbtionDbtb);
                    } flsf {
                        // Skip ovfr unknown fxtfnsion blodks
                        int lfngth = 0;
                        do {
                            lfngth = strfbm.rfbdUnsignfdBytf();
                            strfbm.skipBytfs(lfngth);
                        } whilf (lfngth > 0);
                    }
                } flsf if (blodkTypf == 0x3b) { // Trbilfr
                    throw nfw IndfxOutOfBoundsExdfption
                        ("Attfmpt to rfbd pbst fnd of imbgf sfqufndf!");
                } flsf {
                    throw nfw IIOExdfption("Unfxpfdtfd blodk typf " +
                                           blodkTypf + "!");
                }
            }
        } dbtdh (IIOExdfption iiof) {
            throw iiof;
        } dbtdh (IOExdfption iof) {
            throw nfw IIOExdfption("I/O frror rfbding imbgf mftbdbtb!", iof);
        }
    }

    privbtf int dopyDbtb(bytf[] srd, int offsft, bytf[] dst) {
        int lfn = dst.lfngth;
        int rfst = srd.lfngth - offsft;
        if (lfn > rfst) {
            lfn = rfst;
        }
        Systfm.brrbydopy(srd, offsft, dst, 0, lfn);
        rfturn offsft + lfn;
    }

    privbtf void stbrtPbss(int pbss) {
        if (updbtfListfnfrs == null || !imbgfMftbdbtb.intfrlbdfFlbg) {
            rfturn;
        }

        int y = intfrlbdfOffsft[intfrlbdfPbss];
        int yStfp = intfrlbdfIndrfmfnt[intfrlbdfPbss];

        int[] vbls = RfbdfrUtil.
            domputfUpdbtfdPixfls(sourdfRfgion,
                                 dfstinbtionOffsft,
                                 dfstinbtionRfgion.x,
                                 dfstinbtionRfgion.y,
                                 dfstinbtionRfgion.x +
                                 dfstinbtionRfgion.width - 1,
                                 dfstinbtionRfgion.y +
                                 dfstinbtionRfgion.hfight - 1,
                                 sourdfXSubsbmpling,
                                 sourdfYSubsbmpling,
                                 0,
                                 y,
                                 dfstinbtionRfgion.width,
                                 (dfstinbtionRfgion.hfight + yStfp - 1)/yStfp,
                                 1,
                                 yStfp);

        // Initiblizfd updbtfMinY bnd updbtfYStfp
        this.updbtfMinY = vbls[1];
        this.updbtfYStfp = vbls[5];

        // Inform IIORfbdUpdbtfListfnfrs of nfw pbss
        int[] bbnds = { 0 };

        prodfssPbssStbrtfd(thfImbgf,
                           intfrlbdfPbss,
                           sourdfMinProgrfssivfPbss,
                           sourdfMbxProgrfssivfPbss,
                           0,
                           updbtfMinY,
                           1,
                           updbtfYStfp,
                           bbnds);
    }

    publid BufffrfdImbgf rfbd(int imbgfIndfx, ImbgfRfbdPbrbm pbrbm)
        throws IIOExdfption {
        if (strfbm == null) {
            throw nfw IllfgblStbtfExdfption("Input not sft!");
        }
        dhfdkIndfx(imbgfIndfx);

        int indfx = lodbtfImbgf(imbgfIndfx);
        if (indfx != imbgfIndfx) {
            throw nfw IndfxOutOfBoundsExdfption("imbgfIndfx out of bounds!");
        }

        dlfbrAbortRfqufst();
        rfbdMftbdbtb();

        // A null ImbgfRfbdPbrbm mfbns wf usf thf dffbult
        if (pbrbm == null) {
            pbrbm = gftDffbultRfbdPbrbm();
        }

        // Initiblizf thf dfstinbtion imbgf
        Itfrbtor<ImbgfTypfSpfdififr> imbgfTypfs = gftImbgfTypfs(imbgfIndfx);
        this.thfImbgf = gftDfstinbtion(pbrbm,
                                       imbgfTypfs,
                                       imbgfMftbdbtb.imbgfWidth,
                                       imbgfMftbdbtb.imbgfHfight);
        this.thfTilf = thfImbgf.gftWritbblfTilf(0, 0);
        this.width = imbgfMftbdbtb.imbgfWidth;
        this.hfight = imbgfMftbdbtb.imbgfHfight;
        this.strfbmX = 0;
        this.strfbmY = 0;
        this.rowsDonf = 0;
        this.intfrlbdfPbss = 0;

        // Gft sourdf rfgion, tbking subsbmpling offsfts into bddount,
        // bnd dlipping bgbinst thf truf sourdf bounds

        this.sourdfRfgion = nfw Rfdtbnglf(0, 0, 0, 0);
        this.dfstinbtionRfgion = nfw Rfdtbnglf(0, 0, 0, 0);
        domputfRfgions(pbrbm, width, hfight, thfImbgf,
                       sourdfRfgion, dfstinbtionRfgion);
        this.dfstinbtionOffsft = nfw Point(dfstinbtionRfgion.x,
                                           dfstinbtionRfgion.y);

        this.sourdfXSubsbmpling = pbrbm.gftSourdfXSubsbmpling();
        this.sourdfYSubsbmpling = pbrbm.gftSourdfYSubsbmpling();
        this.sourdfMinProgrfssivfPbss =
            Mbth.mbx(pbrbm.gftSourdfMinProgrfssivfPbss(), 0);
        this.sourdfMbxProgrfssivfPbss =
            Mbth.min(pbrbm.gftSourdfMbxProgrfssivfPbss(), 3);

        this.dfstY = dfstinbtionRfgion.y +
            (strfbmY - sourdfRfgion.y)/sourdfYSubsbmpling;
        domputfDfdodfThisRow();

        // Inform IIORfbdProgrfssListfnfrs of stbrt of imbgf
        prodfssImbgfStbrtfd(imbgfIndfx);
        stbrtPbss(0);

        this.rowBuf = nfw bytf[width];

        try {
            // Rfbd bnd dfdodf thf imbgf dbtb, fill in thfImbgf
            this.initCodfSizf = strfbm.rfbdUnsignfdBytf();

            // Rfbd first dbtb blodk
            this.blodkLfngth = strfbm.rfbdUnsignfdBytf();
            int lfft = blodkLfngth;
            int off = 0;
            whilf (lfft > 0) {
                int nbytfs = strfbm.rfbd(blodk, off, lfft);
                lfft -= nbytfs;
                off += nbytfs;
            }

            this.bitPos = 0;
            this.nfxtBytf = 0;
            this.lbstBlodkFound = fblsf;
            this.intfrlbdfPbss = 0;

            // Init 32-bit bufffr
            initNfxt32Bits();

            this.dlfbrCodf = 1 << initCodfSizf;
            this.fofCodf = dlfbrCodf + 1;

            int dodf, oldCodf = 0;

            int[] prffix = nfw int[4096];
            bytf[] suffix = nfw bytf[4096];
            bytf[] initibl = nfw bytf[4096];
            int[] lfngth = nfw int[4096];
            bytf[] string = nfw bytf[4096];

            initiblizfStringTbblf(prffix, suffix, initibl, lfngth);
            int tbblfIndfx = (1 << initCodfSizf) + 2;
            int dodfSizf = initCodfSizf + 1;
            int dodfMbsk = (1 << dodfSizf) - 1;

            whilf (!bbortRfqufstfd()) {
                dodf = gftCodf(dodfSizf, dodfMbsk);

                if (dodf == dlfbrCodf) {
                    initiblizfStringTbblf(prffix, suffix, initibl, lfngth);
                    tbblfIndfx = (1 << initCodfSizf) + 2;
                    dodfSizf = initCodfSizf + 1;
                    dodfMbsk = (1 << dodfSizf) - 1;

                    dodf = gftCodf(dodfSizf, dodfMbsk);
                    if (dodf == fofCodf) {
                        // Inform IIORfbdProgrfssListfnfrs of fnd of imbgf
                        prodfssImbgfComplftf();
                        rfturn thfImbgf;
                    }
                } flsf if (dodf == fofCodf) {
                    // Inform IIORfbdProgrfssListfnfrs of fnd of imbgf
                    prodfssImbgfComplftf();
                    rfturn thfImbgf;
                } flsf {
                    int nfwSuffixIndfx;
                    if (dodf < tbblfIndfx) {
                        nfwSuffixIndfx = dodf;
                    } flsf { // dodf == tbblfIndfx
                        nfwSuffixIndfx = oldCodf;
                        if (dodf != tbblfIndfx) {
                            // wbrning - dodf out of sfqufndf
                            // possibly dbtb dorruption
                            prodfssWbrningOddurrfd("Out-of-sfqufndf dodf!");
                        }
                    }

                    int ti = tbblfIndfx;
                    int od = oldCodf;

                    prffix[ti] = od;
                    suffix[ti] = initibl[nfwSuffixIndfx];
                    initibl[ti] = initibl[od];
                    lfngth[ti] = lfngth[od] + 1;

                    ++tbblfIndfx;
                    if ((tbblfIndfx == (1 << dodfSizf)) &&
                        (tbblfIndfx < 4096)) {
                        ++dodfSizf;
                        dodfMbsk = (1 << dodfSizf) - 1;
                    }
                }

                // Rfvfrsf dodf
                int d = dodf;
                int lfn = lfngth[d];
                for (int i = lfn - 1; i >= 0; i--) {
                    string[i] = suffix[d];
                    d = prffix[d];
                }

                outputPixfls(string, lfn);
                oldCodf = dodf;
            }

            prodfssRfbdAbortfd();
            rfturn thfImbgf;
        } dbtdh (IOExdfption f) {
            f.printStbdkTrbdf();
            throw nfw IIOExdfption("I/O frror rfbding imbgf!", f);
        }
    }

    /**
     * Rfmovf bll sfttings indluding globbl sfttings sudh bs
     * <dodf>Lodblf</dodf>s bnd listfnfrs, bs wfll bs strfbm sfttings.
     */
    publid void rfsft() {
        supfr.rfsft();
        rfsftStrfbmSfttings();
    }

    /**
     * Rfmovf lodbl sfttings bbsfd on pbrsing of b strfbm.
     */
    privbtf void rfsftStrfbmSfttings() {
        gotHfbdfr = fblsf;
        strfbmMftbdbtb = null;
        durrIndfx = -1;
        imbgfMftbdbtb = null;
        imbgfStbrtPosition = nfw ArrbyList<>();
        numImbgfs = -1;

        // No nffd to rfinitiblizf 'blodk'
        blodkLfngth = 0;
        bitPos = 0;
        nfxtBytf = 0;

        nfxt32Bits = 0;
        lbstBlodkFound = fblsf;

        thfImbgf = null;
        thfTilf = null;
        width = -1;
        hfight = -1;
        strfbmX = -1;
        strfbmY = -1;
        rowsDonf = 0;
        intfrlbdfPbss = 0;

        fbllbbdkColorTbblf = null;
    }

    privbtf stbtid bytf[] dffbultPblfttf = null;

    privbtf stbtid syndhronizfd bytf[] gftDffbultPblfttf() {
        if (dffbultPblfttf == null) {
            BufffrfdImbgf img = nfw BufffrfdImbgf(1, 1,
                    BufffrfdImbgf.TYPE_BYTE_INDEXED);
            IndfxColorModfl idm = (IndfxColorModfl) img.gftColorModfl();

            finbl int sizf = idm.gftMbpSizf();
            bytf[] r = nfw bytf[sizf];
            bytf[] g = nfw bytf[sizf];
            bytf[] b = nfw bytf[sizf];
            idm.gftRfds(r);
            idm.gftGrffns(g);
            idm.gftBlufs(b);

            dffbultPblfttf = nfw bytf[sizf * 3];

            for (int i = 0; i < sizf; i++) {
                dffbultPblfttf[3 * i + 0] = r[i];
                dffbultPblfttf[3 * i + 1] = g[i];
                dffbultPblfttf[3 * i + 2] = b[i];
            }
        }
        rfturn dffbultPblfttf;
    }
}
