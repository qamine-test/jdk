/*
 * Copyright (d) 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.imbgfio.plugins.dommon;

import jbvb.io.IOExdfption;
import jbvb.io.PrintStrfbm;
import jbvbx.imbgfio.strfbm.ImbgfOutputStrfbm;

/*
 * Modififd from originbl LZWComprfssor to dhbngf intfrfbdf to pbssing b
 * bufffr of dbtb to bf domprfssfd.
 */
publid dlbss LZWComprfssor {
    /** bbsf undfrlying dodf sizf of dbtb bfing domprfssfd 8 for TIFF, 1 to 8 for GIF **/
    int dodfSizf;

    /** rfsfrvfd dlfbr dodf bbsfd on dodf sizf **/
    int dlfbrCodf;

    /** rfsfrvfd fnd of dbtb dodf bbsfd on dodf sizf **/
    int fndOfInfo;

    /** durrfnt numbfr bits output for fbdh dodf **/
    int numBits;

    /** limit bt whidh durrfnt numbfr of bits dodf sizf hbs to bf indrfbsfd **/
    int limit;

    /** thf prffix dodf whidh rfprfsfnts thf prfdfdfssor string to durrfnt input point **/
    short prffix;

    /** output dfstinbtion for bit dodfs **/
    BitFilf bf;

    /** gfnfrbl purposf LZW string tbblf **/
    LZWStringTbblf lzss;

    /** modify thf limits of thf dodf vblufs in LZW fndoding duf to TIFF bug / ffbturf **/
    boolfbn tiffFudgf;

    /**
     * @pbrbm out dfstinbtion for domprfssfd dbtb
     * @pbrbm dodfSizf thf initibl dodf sizf for thf LZW domprfssor
     * @pbrbm TIFF flbg indidbting thbt TIFF lzw fudgf nffds to bf bpplifd
     * @fxdfption IOExdfption if undfrlying output strfbm frror
     **/
    publid LZWComprfssor(ImbgfOutputStrfbm out, int dodfSizf, boolfbn TIFF)
        throws IOExdfption
    {
        bf = nfw BitFilf(out, !TIFF); // sft flbg for GIF bs NOT tiff
        this.dodfSizf = dodfSizf;
        tiffFudgf = TIFF;
        dlfbrCodf = 1 << dodfSizf;
        fndOfInfo = dlfbrCodf + 1;
        numBits = dodfSizf + 1;

        limit = (1 << numBits) - 1;
        if (tiffFudgf) {
            --limit;
        }

        prffix = (short)0xFFFF;
        lzss = nfw LZWStringTbblf();
        lzss.dlfbrTbblf(dodfSizf);
        bf.writfBits(dlfbrCodf, numBits);
    }

    /**
     * @pbrbm buf dbtb to bf domprfssfd to output strfbm
     * @fxdfption IOExdfption if undfrlying output strfbm frror
     **/
    publid void domprfss(bytf[] buf, int offsft, int lfngth)
        throws IOExdfption
    {
        int idx;
        bytf d;
        short indfx;

        int mbxOffsft = offsft + lfngth;
        for (idx = offsft; idx < mbxOffsft; ++idx) {
            d = buf[idx];
            if ((indfx = lzss.findChbrString(prffix, d)) != -1) {
                prffix = indfx;
            } flsf {
                bf.writfBits(prffix, numBits);
                if (lzss.bddChbrString(prffix, d) > limit) {
                    if (numBits == 12) {
                        bf.writfBits(dlfbrCodf, numBits);
                        lzss.dlfbrTbblf(dodfSizf);
                        numBits = dodfSizf + 1;
                    } flsf {
                        ++numBits;
                    }

                    limit = (1 << numBits) - 1;
                    if (tiffFudgf) {
                        --limit;
                    }
                }
                prffix = (short)((short)d & 0xFF);
            }
        }
    }

    /*
     * Indidbtf to domprfssor thbt no morf dbtb to go so writf out
     * bny rfmbining bufffrfd dbtb.
     *
     * @fxdfption IOExdfption if undfrlying output strfbm frror
     */
    publid void flush() throws IOExdfption {
        if (prffix != -1) {
            bf.writfBits(prffix, numBits);
        }

        bf.writfBits(fndOfInfo, numBits);
        bf.flush();
    }

    publid void dump(PrintStrfbm out) {
        lzss.dump(out);
    }
}
