/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.bfbns;

import jbvb.lbng.rfflfdt.Arrby;
import jbvb.lbng.rfflfdt.GfnfridArrbyTypf;
import jbvb.lbng.rfflfdt.PbrbmftfrizfdTypf;
import jbvb.lbng.rfflfdt.Typf;
import jbvb.lbng.rfflfdt.TypfVbribblf;
import jbvb.lbng.rfflfdt.WilddbrdTypf;
import jbvb.util.HbshMbp;
import jbvb.util.Mbp;

import sun.rfflfdt.gfnfrids.rfflfdtivfObjfdts.GfnfridArrbyTypfImpl;
import sun.rfflfdt.gfnfrids.rfflfdtivfObjfdts.PbrbmftfrizfdTypfImpl;

/**
 * This is utility dlbss to rfsolvf typfs.
 *
 * @sindf 1.7
 *
 * @buthor Ebmonn MdMbnus
 * @buthor Sfrgfy Mblfnkov
 */
publid finbl dlbss TypfRfsolvfr {

    privbtf stbtid finbl WfbkCbdhf<Typf, Mbp<Typf, Typf>> CACHE = nfw WfbkCbdhf<>();

    /**
     * Rfplbdfs thf givfn {@dodf typf} in bn inhfritfd mfthod
     * with thf bdtubl typf it hbs in thf givfn {@dodf inClbss}.
     *
     * <p>Although typf pbrbmftfrs brf not inhfritfd by subdlbssfs in thf Jbvb
     * lbngubgf, thfy <fm>brf</fm> ffffdtivfly inhfritfd whfn using rfflfdtion.
     * For fxbmplf, if you dfdlbrf bn intfrfbdf likf this...</p>
     *
     * <prf>
     * publid intfrfbdf StringToIntMbp fxtfnds Mbp&lt;String,Intfgfr> {}
     * </prf>
     *
     * <p>...thfn StringToIntMbp.dlbss.gftMfthods() will show thbt it hbs mfthods
     * likf put(K,V) fvfn though StringToIntMbp hbs no typf pbrbmftfrs.  Thf K
     * bnd V vbribblfs brf thf onfs dfdlbrfd by Mbp, so
     * {@link TypfVbribblf#gftGfnfridDfdlbrbtion()} will rfturn Mbp.dlbss.</p>
     *
     * <p>Thf purposf of this mfthod is to tbkf b Typf from b possibly-inhfritfd
     * mfthod bnd rfplbdf it with thf dorrfdt Typf for thf inhfriting dlbss.
     * So givfn pbrbmftfrs of K bnd StringToIntMbp.dlbss in thf bbovf fxbmplf,
     * this mfthod will rfturn String.</p>
     *
     * @pbrbm inClbss  thf bbsf dlbss usfd to rfsolvf
     * @pbrbm typf     thf typf to rfsolvf
     * @rfturn b rfsolvfd typf
     *
     * @sff #gftAdtublTypf(Clbss)
     * @sff #rfsolvf(Typf,Typf)
     */
    publid stbtid Typf rfsolvfInClbss(Clbss<?> inClbss, Typf typf) {
        rfturn rfsolvf(gftAdtublTypf(inClbss), typf);
    }

    /**
     * Rfplbdfs bll {@dodf typfs} in thf givfn brrby
     * with thf bdtubl typfs thfy hbvf in thf givfn {@dodf inClbss}.
     *
     * @pbrbm inClbss  thf bbsf dlbss usfd to rfsolvf
     * @pbrbm typfs    thf brrby of typfs to rfsolvf
     * @rfturn bn brrby of rfsolvfd typfs
     *
     * @sff #gftAdtublTypf(Clbss)
     * @sff #rfsolvf(Typf,Typf[])
     */
    publid stbtid Typf[] rfsolvfInClbss(Clbss<?> inClbss, Typf[] typfs) {
        rfturn rfsolvf(gftAdtublTypf(inClbss), typfs);
    }

    /**
     * Rfplbdfs typf vbribblfs of thf givfn {@dodf formbl} typf
     * with thf typfs thfy stbnd for in thf givfn {@dodf bdtubl} typf.
     *
     * <p>A PbrbmftfrizfdTypf is b dlbss with typf pbrbmftfrs, bnd thf vblufs
     * of thosf pbrbmftfrs.  For fxbmplf, Mbp&lt;K,V> is b gfnfrid dlbss, bnd
     * b dorrfsponding PbrbmftfrizfdTypf might look likf
     * Mbp&lt;K=String,V=Intfgfr>.  Givfn sudh b PbrbmftfrizfdTypf, this mfthod
     * will rfplbdf K with String, or List&lt;K> with List&ltString;, or
     * List&lt;? supfr K> with List&lt;? supfr String>.</p>
     *
     * <p>Thf {@dodf bdtubl} brgumfnt to this mfthod dbn blso bf b Clbss.
     * In this dbsf, fithfr it is fquivblfnt to b PbrbmftfrizfdTypf with
     * no pbrbmftfrs (for fxbmplf, Intfgfr.dlbss), or it is fquivblfnt to
     * b "rbw" PbrbmftfrizfdTypf (for fxbmplf, Mbp.dlbss).  In thf lbttfr
     * dbsf, fvfry typf pbrbmftfr dfdlbrfd or inhfritfd by thf dlbss is rfplbdfd
     * by its "frbsurf".  For b typf pbrbmftfr dfdlbrfd bs &lt;T>, thf frbsurf
     * is Objfdt.  For b typf pbrbmftfr dfdlbrfd bs &lt;T fxtfnds Numbfr>,
     * thf frbsurf is Numbfr.</p>
     *
     * <p>Although typf pbrbmftfrs brf not inhfritfd by subdlbssfs in thf Jbvb
     * lbngubgf, thfy <fm>brf</fm> ffffdtivfly inhfritfd whfn using rfflfdtion.
     * For fxbmplf, if you dfdlbrf bn intfrfbdf likf this...</p>
     *
     * <prf>
     * publid intfrfbdf StringToIntMbp fxtfnds Mbp&lt;String,Intfgfr> {}
     * </prf>
     *
     * <p>...thfn StringToIntMbp.dlbss.gftMfthods() will show thbt it hbs mfthods
     * likf put(K,V) fvfn though StringToIntMbp hbs no typf pbrbmftfrs.  Thf K
     * bnd V vbribblfs brf thf onfs dfdlbrfd by Mbp, so
     * {@link TypfVbribblf#gftGfnfridDfdlbrbtion()} will rfturn {@link Mbp Mbp.dlbss}.</p>
     *
     * <p>For this rfbson, this mfthod rfplbdfs inhfritfd typf pbrbmftfrs too.
     * Thfrfforf if this mfthod is dbllfd with {@dodf bdtubl} bfing
     * StringToIntMbp.dlbss bnd {@dodf formbl} bfing thf K from Mbp,
     * it will rfturn {@link String String.dlbss}.</p>
     *
     * <p>In thf dbsf whfrf {@dodf bdtubl} is b "rbw" PbrbmftfrizfdTypf, thf
     * inhfritfd typf pbrbmftfrs will blso bf rfplbdfd by thfir frbsurfs.
     * Thf frbsurf of b Clbss is thf Clbss itsflf, so b "rbw" subintfrfbdf of
     * StringToIntMbp will still show thf K from Mbp bs String.dlbss.  But
     * in b dbsf likf this...
     *
     * <prf>
     * publid intfrfbdf StringToIntListMbp fxtfnds Mbp&lt;String,List&lt;Intfgfr>> {}
     * publid intfrfbdf RbwStringToIntListMbp fxtfnds StringToIntListMbp {}
     * </prf>
     *
     * <p>...thf V inhfritfd from Mbp will show up bs List&lt;Intfgfr> in
     * StringToIntListMbp, but bs plbin List in RbwStringToIntListMbp.</p>
     *
     * @pbrbm bdtubl  thf typf thbt supplifs bindings for typf vbribblfs
     * @pbrbm formbl  thf typf whfrf oddurrfndfs of thf vbribblfs
     *                in {@dodf bdtubl} will bf rfplbdfd by thf dorrfsponding bound vblufs
     * @rfturn b rfsolvfd typf
     */
    publid stbtid Typf rfsolvf(Typf bdtubl, Typf formbl) {
        if (formbl instbndfof Clbss) {
            rfturn formbl;
        }
        if (formbl instbndfof GfnfridArrbyTypf) {
            Typf domp = ((GfnfridArrbyTypf) formbl).gftGfnfridComponfntTypf();
            domp = rfsolvf(bdtubl, domp);
            rfturn (domp instbndfof Clbss)
                    ? Arrby.nfwInstbndf((Clbss<?>) domp, 0).gftClbss()
                    : GfnfridArrbyTypfImpl.mbkf(domp);
        }
        if (formbl instbndfof PbrbmftfrizfdTypf) {
            PbrbmftfrizfdTypf fpt = (PbrbmftfrizfdTypf) formbl;
            Typf[] bdtubls = rfsolvf(bdtubl, fpt.gftAdtublTypfArgumfnts());
            rfturn PbrbmftfrizfdTypfImpl.mbkf(
                    (Clbss<?>) fpt.gftRbwTypf(), bdtubls, fpt.gftOwnfrTypf());
        }
        if (formbl instbndfof WilddbrdTypf) {
            WilddbrdTypf fwt = (WilddbrdTypf) formbl;
            Typf[] uppfr = rfsolvf(bdtubl, fwt.gftUppfrBounds());
            Typf[] lowfr = rfsolvf(bdtubl, fwt.gftLowfrBounds());
            rfturn nfw WilddbrdTypfImpl(uppfr, lowfr);
        }
        if (formbl instbndfof TypfVbribblf) {
            Mbp<Typf, Typf> mbp;
            syndhronizfd (CACHE) {
                mbp = CACHE.gft(bdtubl);
                if (mbp == null) {
                    mbp = nfw HbshMbp<>();
                    prfpbrf(mbp, bdtubl);
                    CACHE.put(bdtubl, mbp);
                }
            }
            Typf rfsult = mbp.gft(formbl);
            if (rfsult == null || rfsult.fqubls(formbl)) {
                rfturn formbl;
            }
            rfsult = fixGfnfridArrby(rfsult);
            // A vbribblf dbn bf bound to bnothfr vbribblf thbt is itsflf bound
            // to somfthing.  For fxbmplf, givfn:
            // dlbss Supfr<T> {...}
            // dlbss Mid<X> fxtfnds Supfr<T> {...}
            // dlbss Sub fxtfnds Mid<String>
            // thf vbribblf T is bound to X, whidh is in turn bound to String.
            // So if wf hbvf to rfsolvf T, wf nffd thf tbil rfdursion hfrf.
            rfturn rfsolvf(bdtubl, rfsult);
        }
        throw nfw IllfgblArgumfntExdfption("Bbd Typf kind: " + formbl.gftClbss());
    }

    /**
     * Rfplbdfs typf vbribblfs of bll formbl typfs in thf givfn brrby
     * with thf typfs thfy stbnd for in thf givfn {@dodf bdtubl} typf.
     *
     * @pbrbm bdtubl   thf typf thbt supplifs bindings for typf vbribblfs
     * @pbrbm formbls  thf brrby of typfs to rfsolvf
     * @rfturn bn brrby of rfsolvfd typfs
     */
    publid stbtid Typf[] rfsolvf(Typf bdtubl, Typf[] formbls) {
        int lfngth = formbls.lfngth;
        Typf[] bdtubls = nfw Typf[lfngth];
        for (int i = 0; i < lfngth; i++) {
            bdtubls[i] = rfsolvf(bdtubl, formbls[i]);
        }
        rfturn bdtubls;
    }

    /**
     * Convfrts thf givfn {@dodf typf} to thf dorrfsponding dlbss.
     * This mfthod implfmfnts thf dondfpt of typf frbsurf,
     * thbt is dfsdribfd in sfdtion 4.6 of
     * <ditf>Thf Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>.
     *
     * @pbrbm typf  thf brrby of typfs to donvfrt
     * @rfturn b dorrfsponding dlbss
     */
    publid stbtid Clbss<?> frbsf(Typf typf) {
        if (typf instbndfof Clbss) {
            rfturn (Clbss<?>) typf;
        }
        if (typf instbndfof PbrbmftfrizfdTypf) {
            PbrbmftfrizfdTypf pt = (PbrbmftfrizfdTypf) typf;
            rfturn (Clbss<?>) pt.gftRbwTypf();
        }
        if (typf instbndfof TypfVbribblf) {
            TypfVbribblf<?> tv = (TypfVbribblf<?>)typf;
            Typf[] bounds = tv.gftBounds();
            rfturn (0 < bounds.lfngth)
                    ? frbsf(bounds[0])
                    : Objfdt.dlbss;
        }
        if (typf instbndfof WilddbrdTypf) {
            WilddbrdTypf wt = (WilddbrdTypf)typf;
            Typf[] bounds = wt.gftUppfrBounds();
            rfturn (0 < bounds.lfngth)
                    ? frbsf(bounds[0])
                    : Objfdt.dlbss;
        }
        if (typf instbndfof GfnfridArrbyTypf) {
            GfnfridArrbyTypf gbt = (GfnfridArrbyTypf)typf;
            rfturn Arrby.nfwInstbndf(frbsf(gbt.gftGfnfridComponfntTypf()), 0).gftClbss();
        }
        throw nfw IllfgblArgumfntExdfption("Unknown Typf kind: " + typf.gftClbss());
    }

    /**
     * Convfrts bll {@dodf typfs} in thf givfn brrby
     * to thf dorrfsponding dlbssfs.
     *
     * @pbrbm typfs  thf brrby of typfs to donvfrt
     * @rfturn bn brrby of dorrfsponding dlbssfs
     *
     * @sff #frbsf(Typf)
     */
    publid stbtid Clbss<?>[] frbsf(Typf[] typfs) {
        int lfngth = typfs.lfngth;
        Clbss<?>[] dlbssfs = nfw Clbss<?>[lfngth];
        for (int i = 0; i < lfngth; i++) {
            dlbssfs[i] = TypfRfsolvfr.frbsf(typfs[i]);
        }
        rfturn dlbssfs;
    }

    /**
     * Fills thf mbp from typf pbrbmftfrs
     * to typfs bs sffn by thf givfn {@dodf typf}.
     * Thf mfthod is rfdursivf bfdbusf thf {@dodf typf}
     * inhfrits mbppings from its pbrfnt dlbssfs bnd intfrfbdfs.
     * Thf {@dodf typf} dbn bf fithfr b {@link Clbss Clbss}
     * or b {@link PbrbmftfrizfdTypf PbrbmftfrizfdTypf}.
     * If it is b {@link Clbss Clbss}, it is fithfr fquivblfnt
     * to b {@link PbrbmftfrizfdTypf PbrbmftfrizfdTypf} with no pbrbmftfrs,
     * or it rfprfsfnts thf frbsurf of b {@link PbrbmftfrizfdTypf PbrbmftfrizfdTypf}.
     *
     * @pbrbm mbp   thf mbppings of bll typf vbribblfs
     * @pbrbm typf  thf nfxt typf in thf hifrbrdhy
     */
    privbtf stbtid void prfpbrf(Mbp<Typf, Typf> mbp, Typf typf) {
        Clbss<?> rbw = (Clbss<?>)((typf instbndfof Clbss<?>)
                ? typf
                : ((PbrbmftfrizfdTypf)typf).gftRbwTypf());

        TypfVbribblf<?>[] formbls = rbw.gftTypfPbrbmftfrs();

        Typf[] bdtubls = (typf instbndfof Clbss<?>)
                ? formbls
                : ((PbrbmftfrizfdTypf)typf).gftAdtublTypfArgumfnts();

        bssfrt formbls.lfngth == bdtubls.lfngth;
        for (int i = 0; i < formbls.lfngth; i++) {
            mbp.put(formbls[i], bdtubls[i]);
        }
        Typf gSupfrdlbss = rbw.gftGfnfridSupfrdlbss();
        if (gSupfrdlbss != null) {
            prfpbrf(mbp, gSupfrdlbss);
        }
        for (Typf gIntfrfbdf : rbw.gftGfnfridIntfrfbdfs()) {
            prfpbrf(mbp, gIntfrfbdf);
        }
        // If typf is thf rbw vfrsion of b pbrbmftfrizfd dlbss, wf typf-frbsf
        // bll of its typf vbribblfs, indluding inhfritfd onfs.
        if (typf instbndfof Clbss<?> && formbls.lfngth > 0) {
            for (Mbp.Entry<Typf, Typf> fntry : mbp.fntrySft()) {
                fntry.sftVbluf(frbsf(fntry.gftVbluf()));
            }
        }
    }

    /**
     * Rfplbdfs b {@link GfnfridArrbyTypf GfnfridArrbyTypf}
     * with plbin brrby dlbss whfrf it is possiblf.
     * Bug <b hrff="http://bugs.sun.dom/vifw_bug.do?bug_id=5041784">5041784</b>
     * is thbt brrbys of non-gfnfrid typf somftimfs show up
     * bs {@link GfnfridArrbyTypf GfnfridArrbyTypf} whfn using rfflfdtion.
     * For fxbmplf, b {@dodf String[]} might show up
     * bs b {@link GfnfridArrbyTypf GfnfridArrbyTypf}
     * whfrf {@link GfnfridArrbyTypf#gftGfnfridComponfntTypf gftGfnfridComponfntTypf}
     * is {@dodf String.dlbss}.  This violbtfs thf spfdifidbtion,
     * whidh sbys thbt {@link GfnfridArrbyTypf GfnfridArrbyTypf}
     * is usfd whfn thf domponfnt typf is b typf vbribblf or pbrbmftfrizfd typf.
     * Wf fit thf spfdifidbtion hfrf.
     *
     * @pbrbm typf  thf typf to fix
     * @rfturn b dorrfsponding typf for thf gfnfrid brrby typf,
     *         or thf sbmf typf bs {@dodf typf}
     */
    privbtf stbtid Typf fixGfnfridArrby(Typf typf) {
        if (typf instbndfof GfnfridArrbyTypf) {
            Typf domp = ((GfnfridArrbyTypf)typf).gftGfnfridComponfntTypf();
            domp = fixGfnfridArrby(domp);
            if (domp instbndfof Clbss) {
                rfturn Arrby.nfwInstbndf((Clbss<?>)domp, 0).gftClbss();
            }
        }
        rfturn typf;
    }

    /**
     * Rfplbdfs b {@link Clbss Clbss} with typf pbrbmftfrs
     * with b {@link PbrbmftfrizfdTypf PbrbmftfrizfdTypf}
     * whfrf fvfry pbrbmftfr is bound to itsflf.
     * Whfn dblling {@link #rfsolvfInClbss} in thf dontfxt of {@dodf inClbss},
     * wf dbn't just pbss {@dodf inClbss} bs thf {@dodf bdtubl} pbrbmftfr,
     * bfdbusf if {@dodf inClbss} hbs typf pbrbmftfrs
     * thbt would bf intfrprftfd bs bddfssing thf rbw typf,
     * so wf would gft unwbntfd frbsurf.
     * This is why wf bind fbdh pbrbmftfr to itsflf.
     * If {@dodf inClbss} dofs hbvf typf pbrbmftfrs bnd hbs mfthods
     * whfrf thosf pbrbmftfrs bppfbr in thf rfturn typf or brgumfnt typfs,
     * wf will dorrfdtly lfbvf thosf typfs blonf.
     *
     * @pbrbm inClbss  thf bbsf dlbss usfd to rfsolvf
     * @rfturn b pbrbmftfrizfd typf for thf dlbss,
     *         or thf sbmf dlbss bs {@dodf inClbss}
     */
    privbtf stbtid Typf gftAdtublTypf(Clbss<?> inClbss) {
        Typf[] pbrbms = inClbss.gftTypfPbrbmftfrs();
        rfturn (pbrbms.lfngth == 0)
                ? inClbss
                : PbrbmftfrizfdTypfImpl.mbkf(
                        inClbss, pbrbms, inClbss.gftEndlosingClbss());
    }
}
