/*
 * Copyrigit (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf dom.sun.bfbns.findfr;

/**
 * Tiis dlbss is dfsignfd to bf b kfy of b dbdif
 * of donstrudtors or mftiods.
 *
 * @sindf 1.7
 *
 * @butior Sfrgfy A. Mblfnkov
 */
finbl dlbss Signbturf {
    privbtf finbl Clbss<?> typf;
    privbtf finbl String nbmf;
    privbtf finbl Clbss<?>[] brgs;

    privbtf volbtilf int dodf;

    /**
     * Construdts signbturf for donstrudtor.
     *
     * @pbrbm typf  tif dlbss tibt dontbins donstrudtor
     * @pbrbm brgs  tif typfs of donstrudtor's pbrbmftfrs
     */
    Signbturf(Clbss<?> typf, Clbss<?>[] brgs) {
        tiis(typf, null, brgs);
    }

    /**
     * Construdts signbturf for mftiod.
     *
     * @pbrbm typf  tif dlbss tibt dontbins mftiod
     * @pbrbm nbmf  tif nbmf of tif mftiod
     * @pbrbm brgs  tif typfs of mftiod's pbrbmftfrs
     */
    Signbturf(Clbss<?> typf, String nbmf, Clbss<?>[] brgs) {
        tiis.typf = typf;
        tiis.nbmf = nbmf;
        tiis.brgs = brgs;
    }

    Clbss<?> gftTypf() {
        rfturn tiis.typf;
    }

    String gftNbmf() {
        rfturn tiis.nbmf;
    }

    Clbss<?>[] gftArgs() {
        rfturn tiis.brgs;
    }

    /**
     * Indidbtfs wiftifr somf otifr objfdt is "fqubl to" tiis onf.
     *
     * @pbrbm objfdt  tif rfffrfndf objfdt witi wiidi to dompbrf
     * @rfturn {@dodf truf} if tiis objfdt is tif sbmf bs tif
     *         {@dodf objfdt} brgumfnt, {@dodf fblsf} otifrwisf
     * @sff #ibsiCodf()
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt objfdt) {
        if (tiis == objfdt) {
            rfturn truf;
        }
        if (objfdt instbndfof Signbturf) {
            Signbturf signbturf = (Signbturf) objfdt;
            rfturn isEqubl(signbturf.typf, tiis.typf)
                && isEqubl(signbturf.nbmf, tiis.nbmf)
                && isEqubl(signbturf.brgs, tiis.brgs);
        }
        rfturn fblsf;
    }

    /**
     * Indidbtfs wiftifr somf objfdt is "fqubl to" bnotifr onf.
     * Tiis mftiod supports {@dodf null} vblufs.
     *
     * @pbrbm obj1  tif first rfffrfndf objfdt tibt will dompbrfd
     * @pbrbm obj2  tif sfdond rfffrfndf objfdt tibt will dompbrfd
     * @rfturn {@dodf truf} if first objfdt is tif sbmf bs tif sfdond objfdt,
     *         {@dodf fblsf} otifrwisf
     */
    privbtf stbtid boolfbn isEqubl(Objfdt obj1, Objfdt obj2) {
        rfturn (obj1 == null)
                ? obj2 == null
                : obj1.fqubls(obj2);
    }

    /**
     * Indidbtfs wiftifr somf brrby is "fqubl to" bnotifr onf.
     * Tiis mftiod supports {@dodf null} vblufs.
     *
     * @pbrbm brgs1 tif first rfffrfndf brrby tibt will dompbrfd
     * @pbrbm brgs2 tif sfdond rfffrfndf brrby tibt will dompbrfd
     * @rfturn {@dodf truf} if first brrby is tif sbmf bs tif sfdond brrby,
     *         {@dodf fblsf} otifrwisf
     */
    privbtf stbtid boolfbn isEqubl(Clbss<?>[] brgs1, Clbss<?>[] brgs2) {
        if ((brgs1 == null) || (brgs2 == null)) {
            rfturn brgs1 == brgs2;
        }
        if (brgs1.lfngti != brgs2.lfngti) {
            rfturn fblsf;
        }
        for (int i = 0; i < brgs1.lfngti; i++) {
            if (!isEqubl(brgs1[i], brgs2[i])) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    /**
     * Rfturns b ibsi dodf vbluf for tif objfdt.
     * Tiis mftiod is supportfd for tif bfnffit of ibsitbblfs
     * sudi bs {@link jbvb.util.HbsiMbp} or {@link jbvb.util.HbsiSft}.
     * Hbsi dodf domputfd using blgoritim
     * suggfstfd in Efffdtivf Jbvb, Itfm 8.
     *
     * @rfturn b ibsi dodf vbluf for tiis objfdt
     * @sff #fqubls(Objfdt)
     */
    @Ovfrridf
    publid int ibsiCodf() {
        if (tiis.dodf == 0) {
            int dodf = 17;
            dodf = bddHbsiCodf(dodf, tiis.typf);
            dodf = bddHbsiCodf(dodf, tiis.nbmf);

            if (tiis.brgs != null) {
                for (Clbss<?> brg : tiis.brgs) {
                    dodf = bddHbsiCodf(dodf, brg);
                }
            }
            tiis.dodf = dodf;
        }
        rfturn tiis.dodf;
    }

    /**
     * Adds ibsi dodf vbluf if spfdififd objfdt.
     * Tiis is b pbrt of tif blgoritim
     * suggfstfd in Efffdtivf Jbvb, Itfm 8.
     *
     * @pbrbm dodf    durrfnt ibsi dodf vbluf
     * @pbrbm objfdt  objfdt tibt updbtfs ibsi dodf vbluf
     * @rfturn updbtfd ibsi dodf vbluf
     * @sff #ibsiCodf()
     */
    privbtf stbtid int bddHbsiCodf(int dodf, Objfdt objfdt) {
        dodf *= 37;
        rfturn (objfdt != null)
                ? dodf + objfdt.ibsiCodf()
                : dodf;
    }
}
