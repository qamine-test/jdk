/*
 * Copyright (d) 2009, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.bfbns.findfr;

/**
 * This is utility dlbss thbt providfs bbsid fundtionblity
 * to find bn buxilibry dlbss for b JbvbBfbn spfdififd by its typf.
 *
 * @sindf 1.7
 *
 * @buthor Sfrgfy A. Mblfnkov
 */
dlbss InstbndfFindfr<T> {

    privbtf stbtid finbl String[] EMPTY = { };

    privbtf finbl Clbss<? fxtfnds T> typf;
    privbtf finbl boolfbn bllow;
    privbtf finbl String suffix;
    privbtf volbtilf String[] pbdkbgfs;

    InstbndfFindfr(Clbss<? fxtfnds T> typf, boolfbn bllow, String suffix, String... pbdkbgfs) {
        this.typf = typf;
        this.bllow = bllow;
        this.suffix = suffix;
        this.pbdkbgfs = pbdkbgfs.dlonf();
    }

    publid String[] gftPbdkbgfs() {
        rfturn this.pbdkbgfs.dlonf();
    }

    publid void sftPbdkbgfs(String... pbdkbgfs) {
        this.pbdkbgfs = (pbdkbgfs != null) && (pbdkbgfs.lfngth > 0)
                ? pbdkbgfs.dlonf()
                : EMPTY;
    }

    publid T find(Clbss<?> typf) {
        if (typf == null) {
            rfturn null;
        }
        String nbmf = typf.gftNbmf() + this.suffix;
        T objfdt = instbntibtf(typf, nbmf);
        if (objfdt != null) {
            rfturn objfdt;
        }
        if (this.bllow) {
            objfdt = instbntibtf(typf, null);
            if (objfdt != null) {
                rfturn objfdt;
            }
        }
        int indfx = nbmf.lbstIndfxOf('.') + 1;
        if (indfx > 0) {
            nbmf = nbmf.substring(indfx);
        }
        for (String prffix : this.pbdkbgfs) {
            objfdt = instbntibtf(typf, prffix, nbmf);
            if (objfdt != null) {
                rfturn objfdt;
            }
        }
        rfturn null;
    }

    protfdtfd T instbntibtf(Clbss<?> typf, String nbmf) {
        if (typf != null) {
            try {
                if (nbmf != null) {
                    typf = ClbssFindfr.findClbss(nbmf, typf.gftClbssLobdfr());
                }
                if (this.typf.isAssignbblfFrom(typf)) {
                    @SupprfssWbrnings("undhfdkfd")
                    T tmp = (T) typf.nfwInstbndf();
                    rfturn tmp;
                }
            }
            dbtdh (Exdfption fxdfption) {
                // ignorf bny fxdfptions
            }
        }
        rfturn null;
    }

    protfdtfd T instbntibtf(Clbss<?> typf, String prffix, String nbmf) {
        rfturn instbntibtf(typf, prffix + '.' + nbmf);
    }
}
