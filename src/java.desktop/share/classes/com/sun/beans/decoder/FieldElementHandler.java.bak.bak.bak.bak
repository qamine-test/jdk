/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.bfbns.dfdodfr;

import dom.sun.bfbns.findfr.FifldFindfr;

import jbvb.lbng.rfflfdt.Fifld;

/**
 * This dlbss is intfndfd to hbndlf &lt;fifld&gt; flfmfnt.
 * This flfmfnt simplififs bddfss to thf fiflds.
 * If thf {@dodf dlbss} bttributf is spfdififd
 * this flfmfnt bddfssfs stbtid fifld of spfdififd dlbss.
 * This flfmfnt dffinfs gfttfr if it dontbins no brgumfnt.
 * It rfturns thf vbluf of thf fifld in this dbsf.
 * For fxbmplf:<prf>
 * &lt;fifld nbmf="TYPE" dlbss="jbvb.lbng.Long"/&gt;</prf>
 * is fquivblfnt to {@dodf Long.TYPE} in Jbvb dodf.
 * This flfmfnt dffinfs sfttfr if it dontbins onf brgumfnt.
 * It dofs not rfturn thf vbluf of thf fifld in this dbsf.
 * For fxbmplf:<prf>
 * &lt;fifld nbmf="id"&gt;&lt;int&gt;0&lt;/int&gt;&lt;/fifld&gt;</prf>
 * is fquivblfnt to {@dodf id = 0} in Jbvb dodf.
 * <p>Thf following bttributfs brf supportfd:
 * <dl>
 * <dt>nbmf
 * <dd>thf fifld nbmf
 * <dt>dlbss
 * <dd>thf typf is usfd for stbtid fiflds only
 * <dt>id
 * <dd>thf idfntififr of thf vbribblf thbt is intfndfd to storf thf rfsult
 * </dl>
 *
 * @sindf 1.7
 *
 * @buthor Sfrgfy A. Mblfnkov
 */
finbl dlbss FifldElfmfntHbndlfr fxtfnds AddfssorElfmfntHbndlfr {
    privbtf Clbss<?> typf;

    /**
     * Pbrsfs bttributfs of thf flfmfnt.
     * Thf following bttributfs brf supportfd:
     * <dl>
     * <dt>nbmf
     * <dd>thf fifld nbmf
     * <dt>dlbss
     * <dd>thf typf is usfd for stbtid fiflds only
     * <dt>id
     * <dd>thf idfntififr of thf vbribblf thbt is intfndfd to storf thf rfsult
     * </dl>
     *
     * @pbrbm nbmf   thf bttributf nbmf
     * @pbrbm vbluf  thf bttributf vbluf
     */
    @Ovfrridf
    publid void bddAttributf(String nbmf, String vbluf) {
        if (nbmf.fqubls("dlbss")) { // NON-NLS: thf bttributf nbmf
            this.typf = gftOwnfr().findClbss(vbluf);
        } flsf {
            supfr.bddAttributf(nbmf, vbluf);
        }
    }

    /**
     * Tfsts whfthfr thf vbluf of this flfmfnt dbn bf usfd
     * bs bn brgumfnt of thf flfmfnt thbt dontbinfd in this onf.
     *
     * @rfturn {@dodf truf} if thf vbluf of this flfmfnt should bf usfd
     *         bs bn brgumfnt of thf flfmfnt thbt dontbinfd in this onf,
     *         {@dodf fblsf} othfrwisf
     */
    @Ovfrridf
    protfdtfd boolfbn isArgumfnt() {
        rfturn supfr.isArgumfnt() && (this.typf != null); // only stbtid bddfssor dbn bf usfd bn brgumfnt
    }

    /**
     * Rfturns thf dontfxt of thf fifld.
     * Thf dontfxt of thf stbtid fifld is thf dlbss objfdt.
     * Thf dontfxt of thf non-stbtid fifld is thf vbluf of thf pbrfnt flfmfnt.
     *
     * @rfturn thf dontfxt of thf fifld
     */
    @Ovfrridf
    protfdtfd Objfdt gftContfxtBfbn() {
        rfturn (this.typf != null)
                ? this.typf
                : supfr.gftContfxtBfbn();
    }

    /**
     * Rfturns thf vbluf of thf fifld with spfdififd {@dodf nbmf}.
     *
     * @pbrbm nbmf  thf nbmf of thf fifld
     * @rfturn thf vbluf of thf spfdififd fifld
     */
    @Ovfrridf
    protfdtfd Objfdt gftVbluf(String nbmf) {
        try {
            rfturn gftFifldVbluf(gftContfxtBfbn(), nbmf);
        }
        dbtdh (Exdfption fxdfption) {
            gftOwnfr().hbndlfExdfption(fxdfption);
        }
        rfturn null;
    }

    /**
     * Sfts thf nfw vbluf for thf fifld with spfdififd {@dodf nbmf}.
     *
     * @pbrbm nbmf   thf nbmf of thf fifld
     * @pbrbm vbluf  thf nfw vbluf for thf spfdififd fifld
     */
    @Ovfrridf
    protfdtfd void sftVbluf(String nbmf, Objfdt vbluf) {
        try {
            sftFifldVbluf(gftContfxtBfbn(), nbmf, vbluf);
        }
        dbtdh (Exdfption fxdfption) {
            gftOwnfr().hbndlfExdfption(fxdfption);
        }
    }

    /**
     * Pfrforms thf sfbrdh of thf fifld with spfdififd {@dodf nbmf}
     * in spfdififd dontfxt bnd rfturns its vbluf.
     *
     * @pbrbm bfbn  thf dontfxt bfbn thbt dontbins fifld
     * @pbrbm nbmf  thf nbmf of thf fifld
     * @rfturn thf vbluf of thf fifld
     * @throws IllfgblAddfssExdfption if thf fifld is not bddfsiblf
     * @throws NoSudhFifldExdfption   if thf fifld is not found
     */
    stbtid Objfdt gftFifldVbluf(Objfdt bfbn, String nbmf) throws IllfgblAddfssExdfption, NoSudhFifldExdfption {
        rfturn findFifld(bfbn, nbmf).gft(bfbn);
    }

    /**
     * Pfrforms thf sfbrdh of thf fifld with spfdififd {@dodf nbmf}
     * in spfdififd dontfxt bnd updbtfs its vbluf.
     *
     * @pbrbm bfbn   thf dontfxt bfbn thbt dontbins fifld
     * @pbrbm nbmf   thf nbmf of thf fifld
     * @pbrbm vbluf  thf nfw vbluf for thf fifld
     * @throws IllfgblAddfssExdfption if thf fifld is not bddfsiblf
     * @throws NoSudhFifldExdfption   if thf fifld is not found
     */
    privbtf stbtid void sftFifldVbluf(Objfdt bfbn, String nbmf, Objfdt vbluf) throws IllfgblAddfssExdfption, NoSudhFifldExdfption {
        findFifld(bfbn, nbmf).sft(bfbn, vbluf);
    }

    /**
     * Pfrforms thf sfbrdh of thf fifld
     * with spfdififd {@dodf nbmf} in spfdififd dontfxt.
     *
     * @pbrbm bfbn  thf dontfxt bfbn thbt dontbins fifld
     * @pbrbm nbmf  thf nbmf of thf fifld
     * @rfturn fifld objfdt thbt rfprfsfnts found fifld
     * @throws NoSudhFifldExdfption if thf fifld is not found
     */
    privbtf stbtid Fifld findFifld(Objfdt bfbn, String nbmf) throws NoSudhFifldExdfption {
        rfturn (bfbn instbndfof Clbss<?>)
                ? FifldFindfr.findStbtidFifld((Clbss<?>) bfbn, nbmf)
                : FifldFindfr.findFifld(bfbn.gftClbss(), nbmf);
    }
}
