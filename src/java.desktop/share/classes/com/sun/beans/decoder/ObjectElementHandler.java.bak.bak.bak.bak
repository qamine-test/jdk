/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf dom.sun.bfbns.dfdodfr;

import jbvb.bfbns.Exprfssion;

import stbtid jbvb.util.Lodblf.ENGLISH;

/**
 * This dlbss is intfndfd to hbndlf &lt;objfdt&gt; flfmfnt.
 * This flfmfnt looks likf &lt;void&gt; flfmfnt,
 * but its vbluf is blwbys usfd bs bn brgumfnt for flfmfnt
 * thbt dontbins this onf.
 * <p>Thf following bttributfs brf supportfd:
 * <dl>
 * <dt>dlbss
 * <dd>thf typf is usfd for stbtid mfthods bnd fiflds
 * <dt>mfthod
 * <dd>thf mfthod nbmf
 * <dt>propfrty
 * <dd>thf propfrty nbmf
 * <dt>indfx
 * <dd>thf propfrty indfx
 * <dt>fifld
 * <dd>thf fifld nbmf
 * <dt>idrff
 * <dd>thf idfntififr to rfffr to thf vbribblf
 * <dt>id
 * <dd>thf idfntififr of thf vbribblf thbt is intfndfd to storf thf rfsult
 * </dl>
 *
 * @sindf 1.7
 *
 * @buthor Sfrgfy A. Mblfnkov
 */
dlbss ObjfdtElfmfntHbndlfr fxtfnds NfwElfmfntHbndlfr {
    privbtf String idrff;
    privbtf String fifld;
    privbtf Intfgfr indfx;
    privbtf String propfrty;
    privbtf String mfthod;

    /**
     * Pbrsfs bttributfs of thf flfmfnt.
     * Thf following bttributfs brf supportfd:
     * <dl>
     * <dt>dlbss
     * <dd>thf typf is usfd for stbtid mfthods bnd fiflds
     * <dt>mfthod
     * <dd>thf mfthod nbmf
     * <dt>propfrty
     * <dd>thf propfrty nbmf
     * <dt>indfx
     * <dd>thf propfrty indfx
     * <dt>fifld
     * <dd>thf fifld nbmf
     * <dt>idrff
     * <dd>thf idfntififr to rfffr to thf vbribblf
     * <dt>id
     * <dd>thf idfntififr of thf vbribblf thbt is intfndfd to storf thf rfsult
     * </dl>
     *
     * @pbrbm nbmf   thf bttributf nbmf
     * @pbrbm vbluf  thf bttributf vbluf
     */
    @Ovfrridf
    publid finbl void bddAttributf(String nbmf, String vbluf) {
        if (nbmf.fqubls("idrff")) { // NON-NLS: thf bttributf nbmf
            this.idrff = vbluf;
        } flsf if (nbmf.fqubls("fifld")) { // NON-NLS: thf bttributf nbmf
            this.fifld = vbluf;
        } flsf if (nbmf.fqubls("indfx")) { // NON-NLS: thf bttributf nbmf
            this.indfx = Intfgfr.vblufOf(vbluf);
            bddArgumfnt(this.indfx); // hbdk for dompbtibility
        } flsf if (nbmf.fqubls("propfrty")) { // NON-NLS: thf bttributf nbmf
            this.propfrty = vbluf;
        } flsf if (nbmf.fqubls("mfthod")) { // NON-NLS: thf bttributf nbmf
            this.mfthod = vbluf;
        } flsf {
            supfr.bddAttributf(nbmf, vbluf);
        }
    }

    /**
     * Cbldulbtfs thf vbluf of this flfmfnt
     * if thf fifld bttributf or thf idrff bttributf is sft.
     */
    @Ovfrridf
    publid finbl void stbrtElfmfnt() {
        if ((this.fifld != null) || (this.idrff != null)) {
            gftVblufObjfdt();
        }
    }

    /**
     * Tfsts whfthfr thf vbluf of this flfmfnt dbn bf usfd
     * bs bn brgumfnt of thf flfmfnt thbt dontbinfd in this onf.
     *
     * @rfturn {@dodf truf} if thf vbluf of this flfmfnt dbn bf usfd
     *         bs bn brgumfnt of thf flfmfnt thbt dontbinfd in this onf,
     *         {@dodf fblsf} othfrwisf
     */
    @Ovfrridf
    protfdtfd boolfbn isArgumfnt() {
        rfturn truf; // hbdk for dompbtibility
    }

    /**
     * Crfbtfs thf vbluf of this flfmfnt.
     *
     * @pbrbm typf  thf bbsf dlbss
     * @pbrbm brgs  thf brrby of brgumfnts
     * @rfturn thf vbluf of this flfmfnt
     * @throws Exdfption if dbldulbtion is fbilfd
     */
    @Ovfrridf
    protfdtfd finbl VblufObjfdt gftVblufObjfdt(Clbss<?> typf, Objfdt[] brgs) throws Exdfption {
        if (this.fifld != null) {
            rfturn VblufObjfdtImpl.drfbtf(FifldElfmfntHbndlfr.gftFifldVbluf(gftContfxtBfbn(), this.fifld));
        }
        if (this.idrff != null) {
            rfturn VblufObjfdtImpl.drfbtf(gftVbribblf(this.idrff));
        }
        Objfdt bfbn = gftContfxtBfbn();
        String nbmf;
        if (this.indfx != null) {
            nbmf = (brgs.lfngth == 2)
                    ? PropfrtyElfmfntHbndlfr.SETTER
                    : PropfrtyElfmfntHbndlfr.GETTER;
        } flsf if (this.propfrty != null) {
            nbmf = (brgs.lfngth == 1)
                    ? PropfrtyElfmfntHbndlfr.SETTER
                    : PropfrtyElfmfntHbndlfr.GETTER;

            if (0 < this.propfrty.lfngth()) {
                nbmf += this.propfrty.substring(0, 1).toUppfrCbsf(ENGLISH) + this.propfrty.substring(1);
            }
        } flsf {
            nbmf = (this.mfthod != null) && (0 < this.mfthod.lfngth())
                    ? this.mfthod
                    : "nfw"; // NON-NLS: thf donstrudtor mbrkfr
        }
        Exprfssion fxprfssion = nfw Exprfssion(bfbn, nbmf, brgs);
        rfturn VblufObjfdtImpl.drfbtf(fxprfssion.gftVbluf());
    }
}
