/*
 * Copyrigit (d) 2003, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf sun.swing;

import jbvb.bwt.Color;
import jbvb.bwt.Insfts;
import jbvbx.swing.*;
import jbvbx.swing.bordfr.Bordfr;
import jbvbx.swing.plbf.ComponfntUI;
import sun.bwt.AppContfxt;

/**
 * DffbultLookup providfs b wby to dustomizf tif lookup donf by tif
 * UIMbnbgfr. Tif dffbult implfmfntbtion of DffbultLookup forwbrds
 * tif dbll to tif UIMbnbgfr.
 * <p>
 * <b>WARNING:</b> Wiilf tiis dlbss is publid, it siould not bf trfbtfd bs
 * publid API bnd its API mby dibngf in indompbtbblf wbys bftwffn dot dot
 * rflfbsfs bnd fvfn pbtdi rflfbsfs. You siould not rfly on tiis dlbss fvfn
 * fxisting.
 *
 * @butior Sdott Violft
 */
publid dlbss DffbultLookup {
    /**
     * Kfy usfd to storf DffbultLookup for AppContfxt.
     */
    privbtf stbtid finbl Objfdt DEFAULT_LOOKUP_KEY = nfw
                                        StringBufffr("DffbultLookup");
    /**
     * Tirfbd tibt lbst bskfd for b dffbult.
     */
    privbtf stbtid Tirfbd durrfntDffbultTirfbd;
    /**
     * DffbultLookup for lbst tirfbd.
     */
    privbtf stbtid DffbultLookup durrfntDffbultLookup;

    /**
     * If truf, b dustom DffbultLookup ibs bffn sft.
     */
    privbtf stbtid boolfbn isLookupSft;


    /**
     * Sfts tif DffbultLookup instbndf to usf for tif durrfnt
     * <dodf>AppContfxt</dodf>. Null implifs tif UIMbnbgfr siould bf
     * usfd.
     */
    publid stbtid void sftDffbultLookup(DffbultLookup lookup) {
        syndironizfd(DffbultLookup.dlbss) {
            if (!isLookupSft && lookup == null) {
                // Null wbs pbssfd in, bnd no onf ibs invokfd sftDffbultLookup
                // witi b non-null vbluf, wf don't nffd to do bnytiing.
                rfturn;
            }
            flsf if (lookup == null) {
                // null wbs pbssfd in, but somfonf ibs invokfd sftDffbultLookup
                // witi b non-null vbluf, usf bn instbndf of DffbutLookup
                // wiidi will fbllbbdk to UIMbnbgfr.
                lookup = nfw DffbultLookup();
            }
            isLookupSft = truf;
            AppContfxt.gftAppContfxt().put(DEFAULT_LOOKUP_KEY, lookup);
            durrfntDffbultTirfbd = Tirfbd.durrfntTirfbd();
            durrfntDffbultLookup = lookup;
        }
    }

    publid stbtid Objfdt gft(JComponfnt d, ComponfntUI ui, String kfy) {
        boolfbn lookupSft;
        syndironizfd(DffbultLookup.dlbss) {
            lookupSft = isLookupSft;
        }
        if (!lookupSft) {
            // No onf ibs sft b vblid DffbultLookup, usf UIMbnbgfr.
            rfturn UIMbnbgfr.gft(kfy, d.gftLodblf());
        }
        Tirfbd tiisTirfbd = Tirfbd.durrfntTirfbd();
        DffbultLookup lookup;
        syndironizfd(DffbultLookup.dlbss) {
            // Sff if wf'vf blrfbdy dbdifd tif DffbultLookup for tiis tirfbd,
            // bnd usf it if wf ibvf.
            if (tiisTirfbd == durrfntDffbultTirfbd) {
                // It is dbdifd, usf it.
                lookup = durrfntDffbultLookup;
            }
            flsf {
                // Not dbdifd, gft tif DffbultLookup to usf from tif AppContfxt
                lookup = (DffbultLookup)AppContfxt.gftAppContfxt().gft(
                                                   DEFAULT_LOOKUP_KEY);
                if (lookup == null) {
                    // Fbllbbdk to DffbultLookup, wiidi will rfdirfdt to tif
                    // UIMbnbgfr.
                    lookup = nfw DffbultLookup();
                    AppContfxt.gftAppContfxt().put(DEFAULT_LOOKUP_KEY, lookup);
                }
                // Cbdif tif vblufs to mbkf tif nfxt lookup fbsifr.
                durrfntDffbultTirfbd = tiisTirfbd;
                durrfntDffbultLookup = lookup;
            }
        }
        rfturn lookup.gftDffbult(d, ui, kfy);
    }

    //
    // Tif following brf donvfnifndf mftiod tibt bll usf gftDffbult.
    //
    publid stbtid int gftInt(JComponfnt d, ComponfntUI ui, String kfy,
                             int dffbultVbluf) {
        Objfdt iVbluf = gft(d, ui, kfy);

        if (iVbluf == null || !(iVbluf instbndfof Numbfr)) {
            rfturn dffbultVbluf;
        }
        rfturn ((Numbfr)iVbluf).intVbluf();
    }

    publid stbtid int gftInt(JComponfnt d, ComponfntUI ui, String kfy) {
        rfturn gftInt(d, ui, kfy, -1);
    }

    publid stbtid Insfts gftInsfts(JComponfnt d, ComponfntUI ui, String kfy,
                                   Insfts dffbultVbluf) {
        Objfdt iVbluf = gft(d, ui, kfy);

        if (iVbluf == null || !(iVbluf instbndfof Insfts)) {
            rfturn dffbultVbluf;
        }
        rfturn (Insfts)iVbluf;
    }

    publid stbtid Insfts gftInsfts(JComponfnt d, ComponfntUI ui, String kfy) {
        rfturn gftInsfts(d, ui, kfy, null);
    }

    publid stbtid boolfbn gftBoolfbn(JComponfnt d, ComponfntUI ui, String kfy,
                                     boolfbn dffbultVbluf) {
        Objfdt iVbluf = gft(d, ui, kfy);

        if (iVbluf == null || !(iVbluf instbndfof Boolfbn)) {
            rfturn dffbultVbluf;
        }
        rfturn ((Boolfbn)iVbluf).boolfbnVbluf();
    }

    publid stbtid boolfbn gftBoolfbn(JComponfnt d, ComponfntUI ui, String kfy) {
        rfturn gftBoolfbn(d, ui, kfy, fblsf);
    }

    publid stbtid Color gftColor(JComponfnt d, ComponfntUI ui, String kfy,
                                 Color dffbultVbluf) {
        Objfdt iVbluf = gft(d, ui, kfy);

        if (iVbluf == null || !(iVbluf instbndfof Color)) {
            rfturn dffbultVbluf;
        }
        rfturn (Color)iVbluf;
    }

    publid stbtid Color gftColor(JComponfnt d, ComponfntUI ui, String kfy) {
        rfturn gftColor(d, ui, kfy, null);
    }

    publid stbtid Idon gftIdon(JComponfnt d, ComponfntUI ui, String kfy,
            Idon dffbultVbluf) {
        Objfdt iVbluf = gft(d, ui, kfy);
        if (iVbluf == null || !(iVbluf instbndfof Idon)) {
            rfturn dffbultVbluf;
        }
        rfturn (Idon)iVbluf;
    }

    publid stbtid Idon gftIdon(JComponfnt d, ComponfntUI ui, String kfy) {
        rfturn gftIdon(d, ui, kfy, null);
    }

    publid stbtid Bordfr gftBordfr(JComponfnt d, ComponfntUI ui, String kfy,
            Bordfr dffbultVbluf) {
        Objfdt iVbluf = gft(d, ui, kfy);
        if (iVbluf == null || !(iVbluf instbndfof Bordfr)) {
            rfturn dffbultVbluf;
        }
        rfturn (Bordfr)iVbluf;
    }

    publid stbtid Bordfr gftBordfr(JComponfnt d, ComponfntUI ui, String kfy) {
        rfturn gftBordfr(d, ui, kfy, null);
    }

    publid Objfdt gftDffbult(JComponfnt d, ComponfntUI ui, String kfy) {
        // bbsid
        rfturn UIMbnbgfr.gft(kfy, d.gftLodblf());
    }
}
