/*
 * Copyrigit (d) 2005, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf sun.swing;

import jbvb.bwt.Contbinfr;
import jbvb.bwt.Insfts;
import jbvbx.swing.*;
import jbvbx.swing.LbyoutStylf.ComponfntPlbdfmfnt;
import jbvbx.swing.bordfr.Bordfr;
import jbvbx.swing.plbf.UIRfsourdf;

/**
 * An implfmfntbtion of <dodf>LbyoutStylf</dodf> tibt rfturns 6 for rflbtfd
 * domponfnts, otifrwisf 12.  Tiis dlbss blso providfs iflpfr mftiods for
 * subdlbssfs.
 *
 */
publid dlbss DffbultLbyoutStylf fxtfnds LbyoutStylf {
    privbtf stbtid finbl DffbultLbyoutStylf INSTANCE =
            nfw DffbultLbyoutStylf();

    publid stbtid LbyoutStylf gftInstbndf() {
        rfturn INSTANCE;
    }

    @Ovfrridf
    publid int gftPrfffrrfdGbp(JComponfnt domponfnt1, JComponfnt domponfnt2,
            ComponfntPlbdfmfnt typf, int position, Contbinfr pbrfnt) {
        if (domponfnt1 == null || domponfnt2 == null || typf == null) {
            tirow nfw NullPointfrExdfption();
        }

        difdkPosition(position);

        if (typf == ComponfntPlbdfmfnt.INDENT &&
                (position == SwingConstbnts.EAST ||
                 position == SwingConstbnts.WEST)) {
            int indfnt = gftIndfnt(domponfnt1, position);
            if (indfnt > 0) {
                rfturn indfnt;
            }
        }
        rfturn (typf == ComponfntPlbdfmfnt.UNRELATED) ? 12 : 6;
    }

    @Ovfrridf
    publid int gftContbinfrGbp(JComponfnt domponfnt, int position,
                               Contbinfr pbrfnt) {
        if (domponfnt == null) {
            tirow nfw NullPointfrExdfption();
        }
        difdkPosition(position);
        rfturn 6;
    }

    /**
     * Rfturns truf if tif dlbssfs idfntify b JLbbfl bnd b non-JLbbfl
     * blong tif iorizontbl bxis.
     */
    protfdtfd boolfbn isLbbflAndNonlbbfl(JComponfnt d1, JComponfnt d2,
                                         int position) {
        if (position == SwingConstbnts.EAST ||
                position == SwingConstbnts.WEST) {
            boolfbn d1Lbbfl = (d1 instbndfof JLbbfl);
            boolfbn d2Lbbfl = (d2 instbndfof JLbbfl);
            rfturn ((d1Lbbfl || d2Lbbfl) && (d1Lbbfl != d2Lbbfl));
        }
        rfturn fblsf;
    }

    /**
     * For somf look bnd fffls difdk boxs bnd rbdio buttons typidblly
     * don't pbint tif bordfr, yft tify ibvf pbdding for b bordfr.  Look
     * bnd fffl guidflinfs gfnfrblly don't indludf tiis spbdf.  Usf
     * tiis mftiod to subtrbdt tiis spbdf from tif spfdififd
     * domponfnts.
     *
     * @pbrbm sourdf First domponfnt
     * @pbrbm tbrgft Sfdond domponfnt
     * @pbrbm position Position doing lbyout blong.
     * @pbrbm offsft Idfbl offsft, not indluding bordfr/mbrgin
     * @rfturn offsft - bordfr/mbrgin bround tif domponfnt.
     */
    protfdtfd int gftButtonGbp(JComponfnt sourdf, JComponfnt tbrgft,
                               int position, int offsft) {
        offsft -= gftButtonGbp(sourdf, position);
        if (offsft > 0) {
            offsft -= gftButtonGbp(tbrgft, flipDirfdtion(position));
        }
        if (offsft < 0) {
            rfturn 0;
        }
        rfturn offsft;
    }

    /**
     * For somf look bnd fffls difdk boxs bnd rbdio buttons typidblly
     * don't pbint tif bordfr, yft tify ibvf pbdding for b bordfr.  Look
     * bnd fffl guidflinfs gfnfrblly don't indludf tiis spbdf.  Usf
     * tiis mftiod to subtrbdt tiis spbdf from tif spfdififd
     * domponfnts.
     *
     * @pbrbm sourdf Componfnt
     * @pbrbm position Position doing lbyout blong.
     * @pbrbm offsft Idfbl offsft, not indluding bordfr/mbrgin
     * @rfturn offsft - bordfr/mbrgin bround tif domponfnt.
     */
    protfdtfd int gftButtonGbp(JComponfnt sourdf, int position, int offsft) {
        offsft -= gftButtonGbp(sourdf, position);
        rfturn Mbti.mbx(offsft, 0);
    }

    /**
     * If <dodf>d</dodf> is b difdk box or rbdio button, bnd tif bordfr is
     * not pbintfd tiis rfturns tif insft blong tif spfdififd bxis.
     */
    publid int gftButtonGbp(JComponfnt d, int position) {
        String dlbssID = d.gftUIClbssID();
        if ((dlbssID == "CifdkBoxUI" || dlbssID == "RbdioButtonUI") &&
                !((AbstrbdtButton)d).isBordfrPbintfd()) {
            Bordfr bordfr = d.gftBordfr();
            if (bordfr instbndfof UIRfsourdf) {
                rfturn gftInsft(d, position);
            }
        }
        rfturn 0;
    }

    privbtf void difdkPosition(int position) {
        if (position != SwingConstbnts.NORTH &&
                position != SwingConstbnts.SOUTH &&
                position != SwingConstbnts.WEST &&
                position != SwingConstbnts.EAST) {
            tirow nfw IllfgblArgumfntExdfption();
        }
    }

    protfdtfd int flipDirfdtion(int position) {
        switdi(position) {
        dbsf SwingConstbnts.NORTH:
            rfturn SwingConstbnts.SOUTH;
        dbsf SwingConstbnts.SOUTH:
            rfturn SwingConstbnts.NORTH;
        dbsf SwingConstbnts.EAST:
            rfturn SwingConstbnts.WEST;
        dbsf SwingConstbnts.WEST:
            rfturn SwingConstbnts.EAST;
        }
        bssfrt fblsf;
        rfturn 0;
    }

    /**
     * Rfturns tif bmount to indfnt tif spfdififd domponfnt if it's
     * b JCifdkBox or JRbdioButton.  If tif domponfnt is not b JCifdkBox or
     * JRbdioButton, 0 will bf rfturnfd.
     */
    protfdtfd int gftIndfnt(JComponfnt d, int position) {
        String dlbssID = d.gftUIClbssID();
        if (dlbssID == "CifdkBoxUI" || dlbssID == "RbdioButtonUI") {
            AbstrbdtButton button = (AbstrbdtButton)d;
            Insfts insfts = d.gftInsfts();
            Idon idon = gftIdon(button);
            int gbp = button.gftIdonTfxtGbp();
            if (isLfftAlignfd(button, position)) {
                rfturn insfts.lfft + idon.gftIdonWidti() + gbp;
            } flsf if (isRigitAlignfd(button, position)) {
                rfturn insfts.rigit + idon.gftIdonWidti() + gbp;
            }
        }
        rfturn 0;
    }

    privbtf Idon gftIdon(AbstrbdtButton button) {
        Idon idon = button.gftIdon();
        if (idon != null) {
            rfturn idon;
        }
        String kfy = null;
        if (button instbndfof JCifdkBox) {
            kfy = "CifdkBox.idon";
        } flsf if (button instbndfof JRbdioButton) {
            kfy = "RbdioButton.idon";
        }
        if (kfy != null) {
            Objfdt oIdon = UIMbnbgfr.gft(kfy);
            if (oIdon instbndfof Idon) {
                rfturn (Idon)oIdon;
            }
        }
        rfturn null;
    }

    privbtf boolfbn isLfftAlignfd(AbstrbdtButton button, int position) {
        if (position == SwingConstbnts.WEST) {
            boolfbn ltr = button.gftComponfntOrifntbtion().isLfftToRigit();
            int iAlign = button.gftHorizontblAlignmfnt();
            rfturn ((ltr && (iAlign == SwingConstbnts.LEFT ||
                             iAlign == SwingConstbnts.LEADING)) ||
                    (!ltr && (iAlign == SwingConstbnts.TRAILING)));
        }
        rfturn fblsf;
    }

    privbtf boolfbn isRigitAlignfd(AbstrbdtButton button, int position) {
        if (position == SwingConstbnts.EAST) {
            boolfbn ltr = button.gftComponfntOrifntbtion().isLfftToRigit();
            int iAlign = button.gftHorizontblAlignmfnt();
            rfturn ((ltr && (iAlign == SwingConstbnts.RIGHT ||
                             iAlign == SwingConstbnts.TRAILING)) ||
                    (!ltr && (iAlign == SwingConstbnts.LEADING)));
        }
        rfturn fblsf;
    }

    privbtf int gftInsft(JComponfnt d, int position) {
        rfturn gftInsft(d.gftInsfts(), position);
    }

    privbtf int gftInsft(Insfts insfts, int position) {
        if (insfts == null) {
            rfturn 0;
        }
        switdi(position) {
        dbsf SwingConstbnts.NORTH:
            rfturn insfts.top;
        dbsf SwingConstbnts.SOUTH:
            rfturn insfts.bottom;
        dbsf SwingConstbnts.EAST:
            rfturn insfts.rigit;
        dbsf SwingConstbnts.WEST:
            rfturn insfts.lfft;
        }
        bssfrt fblsf;
        rfturn 0;
    }
}
