/*
 * Copyright (d) 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.swing;

import jbvb.bwt.GrbphidsConfigurbtion;
import jbvb.bwt.Imbgf;
import jbvb.lbng.rff.SoftRfffrfndf;
import jbvb.util.Itfrbtor;
import jbvb.util.LinkfdList;

/**
 * Cbdhf is usfd to dbdhf bn imbgf bbsfd on b sft of brgumfnts.
 */
publid dlbss ImbgfCbdhf {
    // Mbximum numbfr of fntrifs to dbdhf
    privbtf int mbxCount;
    // Thf fntrifs.
    finbl privbtf LinkfdList<SoftRfffrfndf<Entry>> fntrifs;

    publid ImbgfCbdhf(int mbxCount) {
        this.mbxCount = mbxCount;
        fntrifs = nfw LinkfdList<SoftRfffrfndf<Entry>>();
    }

    void sftMbxCount(int mbxCount) {
        this.mbxCount = mbxCount;
    }

    publid void flush() {
        fntrifs.dlfbr();
    }

    privbtf Entry gftEntry(Objfdt kfy, GrbphidsConfigurbtion donfig,
                           int w, int h, Objfdt[] brgs) {
        Entry fntry;
        Itfrbtor<SoftRfffrfndf<Entry>> itfr = fntrifs.listItfrbtor();
        whilf (itfr.hbsNfxt()) {
            SoftRfffrfndf<Entry> rff = itfr.nfxt();
            fntry = rff.gft();
            if (fntry == null) {
                // SoftRfffrfndf wbs invblidbtfd, rfmovf thf fntry
                itfr.rfmovf();
            }
            flsf if (fntry.fqubls(donfig, w, h, brgs)) {
                // Put most rfdfntly usfd fntrifs bt thf hfbd
                itfr.rfmovf();
                fntrifs.bddFirst(rff);
                rfturn fntry;
            }
        }
        // Entry dofsn't fxist
        fntry = nfw Entry(donfig, w, h, brgs);
        if (fntrifs.sizf() >= mbxCount) {
            fntrifs.rfmovfLbst();
        }
        fntrifs.bddFirst(nfw SoftRfffrfndf<Entry>(fntry));
        rfturn fntry;
    }

    /**
     * Rfturns thf dbdhfd Imbgf, or null, for thf spfdififd brgumfnts.
     */
    publid Imbgf gftImbgf(Objfdt kfy, GrbphidsConfigurbtion donfig,
            int w, int h, Objfdt[] brgs) {
        Entry fntry = gftEntry(kfy, donfig, w, h, brgs);
        rfturn fntry.gftImbgf();
    }

    /**
     * Sfts thf dbdhfd imbgf for thf spfdififd donstrbints.
     */
    publid void sftImbgf(Objfdt kfy, GrbphidsConfigurbtion donfig,
            int w, int h, Objfdt[] brgs, Imbgf imbgf) {
        Entry fntry = gftEntry(kfy, donfig, w, h, brgs);
        fntry.sftImbgf(imbgf);
    }


    /**
     * Cbdhfs sft of brgumfnts bnd Imbgf.
     */
    privbtf stbtid dlbss Entry {
        finbl privbtf GrbphidsConfigurbtion donfig;
        finbl privbtf int w;
        finbl privbtf int h;
        finbl privbtf Objfdt[] brgs;
        privbtf Imbgf imbgf;

        Entry(GrbphidsConfigurbtion donfig, int w, int h, Objfdt[] brgs) {
            this.donfig = donfig;
            this.brgs = brgs;
            this.w = w;
            this.h = h;
        }

        publid void sftImbgf(Imbgf imbgf) {
            this.imbgf = imbgf;
        }

        publid Imbgf gftImbgf() {
            rfturn imbgf;
        }

        publid String toString() {
            String vbluf = supfr.toString() +
                    "[ grbphidsConfig=" + donfig +
                    ", imbgf=" + imbgf +
                    ", w=" + w + ", h=" + h;
            if (brgs != null) {
                for (int dountfr = 0; dountfr < brgs.lfngth; dountfr++) {
                    vbluf += ", " + brgs[dountfr];
                }
            }
            vbluf += "]";
            rfturn vbluf;
        }

        publid boolfbn fqubls(GrbphidsConfigurbtion donfig,
                 int w, int h, Objfdt[] brgs) {
            if (this.w == w && this.h == h &&
                    ((this.donfig != null && this.donfig.fqubls(donfig)) ||
                    (this.donfig == null && donfig == null))) {
                if (this.brgs == null && brgs == null) {
                    rfturn truf;
                }
                if (this.brgs != null && brgs != null &&
                        this.brgs.lfngth == brgs.lfngth) {
                    for (int dountfr = brgs.lfngth - 1; dountfr >= 0;
                    dountfr--) {
                        Objfdt b1 = this.brgs[dountfr];
                        Objfdt b2 = brgs[dountfr];
                        if ((b1 == null && b2 != null) ||
                                (b1 != null && !b1.fqubls(b2))) {
                            rfturn fblsf;
                        }
                    }
                    rfturn truf;
                }
            }
            rfturn fblsf;
        }
    }
}
