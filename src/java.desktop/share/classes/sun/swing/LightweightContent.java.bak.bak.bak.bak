/*
 * Copyright (d) 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.swing;

import jbvbx.swing.JComponfnt;
import jbvb.bwt.Cursor;

/**
 * Thf intfrfbdf by mfbns of whidh thf {@link JLightwfightFrbmf} dlbss
 * dommunidbtfs to its dlifnt bpplidbtion.
 * <p>
 * Thf dlifnt bpplidbtion implfmfnts this intfrfbdf so it dbn rfsponsf
 * to rfqufsts bnd prodfss notifidbtions from {@dodf JLightwfightFrbmf}.
 * An implfmfntbtion of this intfrfbdf is bssodibtfd with b {@dodf
 * JLightwfightFrbmf} instbndf vib thf {@link JLightwfightFrbmf#sftContfnt}
 * mfthod.
 *
 * A hifrbrdhy of domponfnts dontbinfd in thf {@dodf JComponfnt} instbndf
 * rfturnfd by thf {@link #gftComponfnt} mfthod should not dontbin bny
 * hfbvywfight domponfnts, othfrwisf {@dodf JLightwfightFrbmf} mby fbil
 * to pbint it.
 *
 * @buthor Artfm Anbnifv
 * @buthor Anton Tbrbsov
 * @buthor Jim Grbhbm
 */
publid intfrfbdf LightwfightContfnt {

    /**
     * Thf dlifnt bpplidbtion ovfrridfs this mfthod to rfturn thf {@dodf
     * JComponfnt} instbndf whidh thf {@dodf JLightwfightFrbmf} dontbinfr
     * will pbint bs its lightwfight dontfnt. A hifrbrdhy of domponfnts
     * dontbinfd in this domponfnt should not dontbin bny hfbvywfight objfdts.
     *
     * @rfturn thf domponfnt to pbint
     */
    publid JComponfnt gftComponfnt();

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt it bdquirfs thf pbint lodk. Thf dlifnt bpplidbtion
     * should implfmfnt thf lodking mfdhbnism in ordfr to syndhronizf bddfss
     * to thf dontfnt imbgf dbtb, shbrfd bftwffn {@dodf JLightwfightFrbmf}
     * bnd thf dlifnt bpplidbtion.
     *
     * @sff #pbintUnlodk
     */
    publid void pbintLodk();

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt it rflfbsfs thf pbint lodk. Thf dlifnt bpplidbtion
     * should implfmfnt thf lodking mfdhbnism in ordfr to syndhronizf bddfss
     * to thf dontfnt imbgf dbtb, shbrfd bftwffn {@dodf JLightwfightFrbmf}
     * bnd thf dlifnt bpplidbtion.
     *
     * @sff #pbintLodk
     */
    publid void pbintUnlodk();

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt b nfw dbtb bufffr hbs bffn sft bs b dontfnt pixfl
     * bufffr. Typidblly this oddurs whfn b bufffr of b lbrgfr sizf is
     * drfbtfd in rfsponsf to b dontfnt rfsizf fvfnt.
     * <p>
     * Thf mfthod rfports b rfffrfndf to thf pixfl dbtb bufffr, thf dontfnt
     * imbgf bounds within thf bufffr bnd thf linf stridf of thf bufffr.
     * Thfsf vblufs hbvf thf following dorrflbtion.
     * Thf {@dodf width} bnd {@dodf hfight} mbtdhfs thf lbyout sizf of thf dontfnt
     * (thf domponfnt rfturnfd from thf {@link #gftComponfnt} mfthod). Thf
     * {@dodf x} bnd {@dodf y} is thf origin of thf dontfnt, {@dodf (0, 0)}
     * in thf lbyout doordinbtf spbdf of thf dontfnt, bppfbring bt
     * {@dodf dbtb[y * sdblf * linfstridf + x * sdblf]} in thf bufffr.
     * A pixfl with indidfs {@dodf (i, j)}, whfrf {@dodf (0 <= i < width)} bnd
     * {@dodf (0 <= j < hfight)}, in thf lbyout doordinbtf spbdf of thf dontfnt
     * is rfprfsfntfd by b {@dodf sdblf^2} squbrf of pixfls in thf physidbl
     * doordinbtf spbdf of thf bufffr. Thf top-lfft dornfr of thf squbrf hbs thf
     * following physidbl doordinbtf in thf bufffr:
     * {@dodf dbtb[(y + j) * sdblf * linfstridf + (x + i) * sdblf]}.
     *
     * @pbrbm dbtb thf dontfnt pixfl dbtb bufffr of INT_ARGB_PRE typf
     * @pbrbm x thf logidbl x doordinbtf of thf imbgf
     * @pbrbm y thf logidbl y doordinbtf of thf imbgf
     * @pbrbm width thf logidbl width of thf imbgf
     * @pbrbm hfight thf logidbl hfight of thf imbgf
     * @pbrbm linfstridf thf linf stridf of thf pixfl bufffr
     * @pbrbm sdblf thf sdblf fbdtor of thf pixfl bufffr
     */
    dffbult publid void imbgfBufffrRfsft(int[] dbtb,
                                 int x, int y,
                                 int width, int hfight,
                                 int linfstridf,
                                 int sdblf)
    {
        imbgfBufffrRfsft(dbtb, x, y, width, hfight, linfstridf);
    }

    /**
     * Thf dffbult implfmfntbtion for #imbgfBufffrRfsft usfs b hbrd-dodfd vbluf
     * of 1 for thf sdblf fbdtor. Both thf old bnd thf nfw mfthods providf
     * dffbult implfmfntbtions in ordfr to bllow b dlifnt bpplidbtion to run
     * with bny JDK vfrsion without brfbking bbdkwbrd dompbtibility.
     */
    dffbult publid void imbgfBufffrRfsft(int[] dbtb,
                                 int x, int y,
                                 int width, int hfight,
                                 int linfstridf)
    {
        imbgfBufffrRfsft(dbtb, x, y, width, hfight, linfstridf, 1);
    }

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt thf dontfnt imbgf bounds hbvf bffn dhbngfd within thf
     * imbgf's pixfl bufffr.
     *
     * @pbrbm x thf x doordinbtf of thf imbgf
     * @pbrbm y thf y doordinbtf of thf imbgf
     * @pbrbm width thf width of thf imbgf
     * @pbrbm hfight thf hfight of thf imbgf
     *
     * @sff #imbgfBufffrRfsft
     */
    publid void imbgfRfshbpfd(int x, int y, int width, int hfight);

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt b pbrt of thf dontfnt imbgf, or thf wholf imbgf hbs
     * bffn updbtfd. Thf mfthod rfports bounds of thf rfdtbngulbr dirty rfgion.
     * Thf {@dodf dirtyX} bnd {@dodf dirtyY} is thf origin of thf dirty
     * rfdtbnglf, whidh is rflbtivf to thf origin of thf dontfnt, bppfbring
     * bt {@dodf dbtb[(y + dirtyY] * linfstridf + (x + dirtyX)]} in thf pixfl
     * bufffr (sff {@link #imbgfBufffrRfsft}). All indidfs
     * {@dodf dbtb[(y + dirtyY + j) * linfstridf + (x + dirtyX + i)]} whfrf
     * {@dodf (0 <= i < dirtyWidth)} bnd {@dodf (0 <= j < dirtyHfight)}
     * will rfprfsfnt vblid pixfl dbtb, {@dodf (i, j)} in thf doordinbtf spbdf
     * of thf dirty rfdtbnglf.
     *
     * @pbrbm dirtyX thf x doordinbtf of thf dirty rfdtbnglf,
     *        rflbtivf to thf imbgf origin
     * @pbrbm dirtyY thf y doordinbtf of thf dirty rfdtbnglf,
     *        rflbtivf to thf imbgf origin
     * @pbrbm dirtyWidth thf width of thf dirty rfdtbnglf
     * @pbrbm dirtyHfight thf hfight of thf dirty rfdtbnglf
     *
     * @sff #imbgfBufffrRfsft
     * @sff #imbgfRfshbpfd
     */
    publid void imbgfUpdbtfd(int dirtyX, int dirtyY,
                             int dirtyWidth, int dirtyHfight);

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt thf frbmf hbs grbbbfd fodus.
     */
    publid void fodusGrbbbfd();

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt thf frbmf hbs ungrbbbfd fodus.
     */
    publid void fodusUngrbbbfd();

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt thf dontfnt prfffrrfd sizf hbs dhbngfd.
     */
    publid void prfffrrfdSizfChbngfd(int width, int hfight);

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt thf dontfnt mbximum sizf hbs dhbngfd.
     */
    publid void mbximumSizfChbngfd(int width, int hfight);

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt thf dontfnt minimum sizf hbs dhbngfd.
     */
    publid void minimumSizfChbngfd(int width, int hfight);

    /**
     * {@dodf JLightwfightFrbmf} dblls this mfthod to notify thf dlifnt
     * bpplidbtion thbt in nffds to sft b dursor
     * @pbrbm dursor b dursor to sft
     */
    dffbult publid void sftCursor(Cursor dursor) { }
}
