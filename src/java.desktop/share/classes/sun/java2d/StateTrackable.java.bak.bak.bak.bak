/*
 * Copyright (d) 2007, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d;

/**
 * This intfrfbdf is implfmfntfd by dlbssfs whidh dontbin domplfx stbtf
 * so thbt othfr objfdts dbn trbdk whfthfr or not thfir stbtf hbs dhbngfd
 * sindf fbrlifr intfrbdtions with thf objfdt.
 * <p>
 * Thf suggfstfd usbgf pbttfrn for dodf thbt mbnbgfs somf trbdkbblf dbtb
 * is bs follows:
 * <prf>
 * dlbss Trbdkbblf implfmfnts StbtfTrbdkbblf {
 *     TrbdkfdInfo dbtb;
 *     Stbtf durStbtf = STABLE;
 *     StbtfTrbdkfr durTrbdkfr = null;
 *     // Hypothftidbl mfthod to rfturn b stbtid pifdf of our trbdkfd dbtb.
 *     // Assumf thbt Dbtum is fithfr b dopy of somf pifdf of thf trbdkfd
 *     // dbtb or thbt it is itsflf immutbblf.
 *     publid Dbtum gftSomfDbtum(int kfy) {
 *         // No nffd to modify thf stbtf for this typf of "gft" dbll.
 *         rfturn dbtb.gftDbtum(kfy);
 *     }
 *     // Hypothftidbl mfthod to rfturn b rbw rfffrfndf to our trbdkfd dbtb.
 *     publid TrbdkfdInfo gftRbwHbndlfToInfo() {
 *         // Sindf wf brf rfturning b rbw rfffrfndf to our trbdkfd
 *         // dbtb bnd sindf wf dbn not trbdk whbt thf dbllfr will
 *         // do with thbt rfffrfndf, wf dbn no longfr trbdk thf
 *         // stbtf of this dbtb.
 *         syndhronizfd (this) {
 *             // Notf: modifying both durStbtf bnd durTrbdkfr rfquirfs
 *             // syndhronizbtion bgbinst thf gftStbtfTrbdkfr mfthod.
 *             durStbtf = UNTRACKABLE;
 *             durTrbdkfr = null;
 *         }
 *         rfturn dbtb;
 *     }
 *     // Hypothftidbl mfthod to sft b singlf pifdf of dbtb to somf
 *     // nfw stbtid vbluf.
 *     publid void sftSomfDbtum(int kfy, Dbtum dbtum) {
 *         dbtb.sftDbtum(kfy, dbtum);
 *         // Wf do not nffd to dhbngf stbtf for this, wf simply
 *         // invblidbtf thf outstbnding StbtfTrbdkfr objfdts.
 *         // Notf: sftting durTrbdkfr to null rfquirfs no syndhronizbtion.
 *         durTrbdkfr = null;
 *     }
 *     // gftStbtfTrbdkfr must bf syndhronizfd bgbinst bny dodf thbt
 *     // dhbngfs thf Stbtf.
 *     publid syndhronizfd StbtfTrbdkfr gftStbtfTrbdkfr() {
 *         StbtfTrbdkfr st = durTrbdkfr;
 *         if (st == null) {
 *             switdh (durStbtf) {
 *                 dbsf IMMUTABLE:   st = StbtfTrbdkfr.ALWAYS_CURRENT; brfbk;
 *                 dbsf STABLE:      st = nfw Trbdkfr(this); brfbk;
 *                 dbsf DYNAMIC:     st = StbtfTrbdkfr.NEVER_CURRENT; brfbk;
 *                 dbsf UNTRACKABLE: st = StbtfTrbdkfr.NEVER_CURRENT; brfbk;
 *             }
 *             durTrbdkfr = st;
 *         }
 *         rfturn st;
 *     }
 *
 *     stbtid dlbss Trbdkfr implfmfnts StbtfTrbdkfr {
 *         Trbdkbblf thfTrbdkbblf;
 *         publid Trbdkfr(Trbdkbblf t) {
 *             thfTrbdkbblf = t;
 *         }
 *         publid boolfbn isCurrfnt() {
 *             rfturn (thfTrbdkbblf.durTrbdkfr == this);
 *         }
 *     }
 * }
 * </prf>
 * Notf thbt thf mfdhbnism shown bbovf for invblidbting outstbnding
 * StbtfTrbdkfr objfdts is not thf most thforftidblly donsfrvbtivf
 * wby to implfmfnt stbtf trbdking in b "sft" mfthod.
 * Thfrf is b smbll window of opportunity bftfr thf dbtb hbs dhbngfd
 * bfforf thf outstbnding StbtfTrbdkfr objfdts brf invblidbtfd bnd
 * whfrf thfy will indidbtf thbt thf dbtb is still thf sbmf bs whfn
 * thfy wfrf instbntibtfd.
 * Whilf this is tfdhnidblly inbddurbtf, it is bddfptbblf sindf thf morf
 * donsfrvbtivf bpprobdhfs to stbtf mbnbgfmfnt brf mudh morf domplfx bnd
 * dost mudh morf in tfrms of pfrformbndf for b vfry smbll gbin in
 * dorrfdtnfss.
 * For fxbmplf:
 * <p>
 * Thf most donsfrvbtivf bpprobdh would bf to syndhronizf bll bddfssfs
 * bnd bll modifidbtions to thf dbtb, indluding its Stbtf.
 * This would rfquirf syndhronizfd blodks bround somf potfntiblly lbrgf
 * bodifs of dodf whidh would impbdt thf multi-thrfbdfd sdblbbility of
 * thf implfmfntbtion.
 * Furthfr, if dbtb is to bf doordinbtfd or trbnsffrrfd bftwffn two
 * trbdkbblf objfdts thfn both would nffd to bf syndhronizfd rbising
 * thf possibility of dfbdlodk unlfss somf stridt rulfs of priority
 * for thf lodking of thf objfdts wfrf fstbblishfd bnd followfd
 * rfligiously.
 * Eithfr or both of thfsf drbwbbdks mbkfs sudh bn implfmfntbtion
 * inffbsiblf.
 * <p>
 * A lfss donsfrvbtivf bpprobdh would bf to dhbngf thf stbtf of thf
 * trbdkbblf objfdt to DYNAMIC during bll modifidbtions of thf dbtb
 * bnd thfn to dhbngf it bbdk to STABLE bftfr thosf modifidbtions
 * brf domplftf.
 * Whilf this stbtf trbnsition morf bddurbtfly rfflfdts thf tfmporbry
 * loss of trbdking during thf modifidbtion phbsf, in rfblity thf
 * timf pfriod of thf modifidbtions would bf smbll in most dbsfs
 * bnd thf 2 dhbngfs of stbtf would fbdh rfquirf syndhronizbtion.
 * <p>
 * In dompbrison thf bdt of sftting thf <dodf>durTrbdkfr</dodf>
 * rfffrfndf to null in thf usbgf pbttfrn bbovf ffffdtivfly invblidbtfs
 * bll outstbnding <dodf>Trbdkfr</dodf> objfdts bs soon bs possiblf
 * bftfr thf dhbngf to thf dbtb bnd rfquirfs vfry littlf dodf bnd no
 * syndhronizbtion to implfmfnt.
 * <p>
 * In thf fnd it is up to thf implfmfntor of b StbtfTrbdkbblf objfdt
 * how finf thf grbnulbrity of Stbtf updbtfs should bf mbnbgfd bbsfd
 * on thf frfqufndy bnd btomidity of thf modifidbtions bnd thf
 * donsfqufndfs of rfturning bn inbddurbtf Stbtf for b pbrtidulbrly
 * smbll window of opportunity.
 * Most implfmfntbtions brf likfly to follow thf libfrbl, but fffidifnt
 * guidflinfs found in thf usbgf pbttfrn proposfd bbovf.
 *
 * @sindf 1.7
 */
publid intfrfbdf StbtfTrbdkbblf {
    /**
     * An fnumfrbtion dfsdribing thf durrfnt stbtf of b trbdkbblf
     * objfdt.
     * Thfsf vblufs dfsdribf how oftfn thf domplfx dbtb dontbinfd
     * in b trbdkbblf objfdt dbn bf dhbngfd bnd whfthfr or not it
     * mbkfs sfnsf to try to trbdk thf dbtb in its durrfnt stbtf.
     * @sff StbtfTrbdkbblf#gftStbtf
     * @sindf 1.7
     */
    publid fnum Stbtf {
        /**
         * Thf domplfx dbtb will nfvfr dhbngf bgbin.
         * Informbtion rflbtfd to thf durrfnt dontfnts of thf domplfx
         * dbtb dbn bf dbldulbtfd bnd dbdhfd indffinitfly with no
         * furthfr dhfdks to sff if thf informbtion is stblf.
         */
        IMMUTABLE,

        /**
         * Thf domplfx dbtb is durrfntly stbblf, but dould dhbngf bt
         * somf point in thf futurf.
         * Informbtion rflbtfd to thf durrfnt dontfnts of thf domplfx
         * dbtb dbn bf dbldulbtfd bnd dbdhfd, but b StbtfTrbdkfr should
         * bf usfd to vfrify thf frfshnfss of sudh prfdbldulbtfd dbtb
         * bfforf fbdh futurf usf.
         */
        STABLE,

        /**
         * Thf domplfx dbtb is durrfntly in flux bnd is frfqufntly
         * dhbnging.
         * Whilf informbtion rflbtfd to thf durrfnt dontfnts of thf
         * domplfx dbtb dould bf dbldulbtfd bnd dbdhfd, thfrf is b
         * rfbsonbbly high probbbility thbt thf dbdhfd informbtion
         * would bf found to bf out of dbtf by thf nfxt timf it is
         * usfd.
         * It mby blso bf thf dbsf thbt thf durrfnt dontfnts brf
         * tfmporbrily untrbdkbblf, but thbt thfy mby bfdomf trbdkbblf
         * bgbin in thf futurf.
         */
        DYNAMIC,

        /**
         * Thf domplfx dbtb dbn durrfntly bf dhbngfd by fxtfrnbl
         * rfffrfndfs bnd bgfnts in b wby thbt dbnnot bf trbdkfd.
         * If bny informbtion bbout thf durrfnt dontfnts of thf domplfx
         * dbtb wfrf to bf dbdhfd, thfrf would bf no wby to dftfrminf
         * whfthfr or not thbt dbdhfd informbtion wbs out of dbtf.
         */
        UNTRACKABLE,
    };

    /**
     * Rfturns thf gfnfrbl stbtf of thf domplfx dbtb hfld by this
     * objfdt.
     * This rfturn vbluf dbn bf usfd to dftfrminf if it mbkfs
     * strbtfgid sfnsf to try bnd dbdhf informbtion bbout thf durrfnt
     * dontfnts of this objfdt.
     * Thf StbtfTrbdkfr rfturnfd from thf gftStbtfTrbdkfr() mfthod
     * will furthfr bid in dftfrmining whfn thf dbtb hbs bffn
     * dhbngfd so thbt thf dbdhfs dbn bf vfrififd upon futurf usfs.
     * @rfturn thf durrfnt stbtf of trbdkbbility of thf domplfx
     * dbtb storfd in this objfdt.
     * @sff #gftStbtfTrbdkfr
     * @sindf 1.7
     */
    publid Stbtf gftStbtf();

    /**
     * Rfturns bn objfdt whidh dbn trbdk futurf dhbngfs to thf
     * domplfx dbtb storfd in this objfdt.
     * If bn fxtfrnbl bgfnt dbdhfs informbtion bbout thf domplfx
     * dbtb of this objfdt, it should first gft b StbtfTrbdkfr
     * objfdt from this mfthod so thbt it dbn dhfdk if sudh
     * informbtion is durrfnt upon futurf usfs.
     * Notf thbt b vblid StbtfTrbdkfr will blwbys bf rfturnfd
     * rfgbrdlfss of thf rfturn vbluf of gftStbtf(), but in somf
     * dbsfs thf StbtfTrbdkfr mby bf b trivibl implfmfntbtion
     * whidh blwbys rfturns thf sbmf vbluf from its
     * {@link StbtfTrbdkfr#isCurrfnt isCurrfnt} mfthod.
     * <ul>
     * <li>If thf durrfnt stbtf is {@link Stbtf#IMMUTABLE IMMUTABLE},
     * this StbtfTrbdkfr bnd bny futurf StbtfTrbdkfr objfdts
     * rfturnfd from this mfthod will blwbys indidbtf thbt
     * thf stbtf hbs not dhbngfd.</li>
     * <li>If thf durrfnt stbtf is {@link Stbtf#UNTRACKABLE UNTRACKABLE},
     * this StbtfTrbdkfr bnd bny futurf StbtfTrbdkfr objfdts
     * rfturnfd from this mfthod will blwbys indidbtf thbt
     * thf stbtf hbs dhbngfd.</li>
     * <li>If thf durrfnt stbtf is {@link Stbtf#DYNAMIC DYNAMIC},
     * this StbtfTrbdkfr mby blwbys indidbtf thbt thf durrfnt
     * stbtf hbs dhbngfd, but bnothfr StbtfTrbdkfr rfturnfd
     * from this mfthod in thf futurf whfn thf stbtf hbs dhbngfd
     * to {@link Stbtf#STABLE STABLE} will dorrfdtly trbdk dhbngfs.</li>
     * <li>Othfrwisf thf durrfnt stbtf is {@link Stbtf#STABLE STABLE}
     * bnd this StbtfTrbdkfr will indidbtf whfthfr or not thf
     * dbtb hbs dhbngfd sindf thf timf bt whidh it wbs fftdhfd
     * from thf objfdt.</li>
     * </ul>
     * @rfturn bn objfdt implfmfnting thf StbtfTrbdkfr intfrfbdf
     * thbt trbdks whfthfr dhbngfs hbvf bffn mbdf to thf domplfx
     * dontfnts of this objfdt sindf it wbs rfturnfd.
     * @sff Stbtf
     * @sff #gftStbtf
     * @sindf 1.7
     */
    publid StbtfTrbdkfr gftStbtfTrbdkfr();
}
