/*
 * Copyrigit (d) 2007, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf sun.jbvb2d.dmm.ldms;

import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.ComponfntColorModfl;
import jbvb.bwt.imbgf.ComponfntSbmplfModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.SbmplfModfl;
import sun.bwt.imbgf.BytfComponfntRbstfr;
import sun.bwt.imbgf.SiortComponfntRbstfr;
import sun.bwt.imbgf.IntfgfrComponfntRbstfr;

dlbss LCMSImbgfLbyout {

    publid stbtid int BYTES_SH(int x) {
        rfturn x;
    }

    publid stbtid int EXTRA_SH(int x) {
        rfturn x << 7;
    }

    publid stbtid int CHANNELS_SH(int x) {
        rfturn x << 3;
    }
    publid stbtid finbl int SWAPFIRST = 1 << 14;
    publid stbtid finbl int DOSWAP = 1 << 10;
    publid stbtid finbl int PT_RGB_8 =
            CHANNELS_SH(3) | BYTES_SH(1);
    publid stbtid finbl int PT_GRAY_8 =
            CHANNELS_SH(1) | BYTES_SH(1);
    publid stbtid finbl int PT_GRAY_16 =
            CHANNELS_SH(1) | BYTES_SH(2);
    publid stbtid finbl int PT_RGBA_8 =
            EXTRA_SH(1) | CHANNELS_SH(3) | BYTES_SH(1);
    publid stbtid finbl int PT_ARGB_8 =
            EXTRA_SH(1) | CHANNELS_SH(3) | BYTES_SH(1) | SWAPFIRST;
    publid stbtid finbl int PT_BGR_8 =
            DOSWAP | CHANNELS_SH(3) | BYTES_SH(1);
    publid stbtid finbl int PT_ABGR_8 =
            DOSWAP | EXTRA_SH(1) | CHANNELS_SH(3) | BYTES_SH(1);
    publid stbtid finbl int PT_BGRA_8 = EXTRA_SH(1) | CHANNELS_SH(3)
            | BYTES_SH(1) | DOSWAP | SWAPFIRST;
    publid stbtid finbl int DT_BYTE = 0;
    publid stbtid finbl int DT_SHORT = 1;
    publid stbtid finbl int DT_INT = 2;
    publid stbtid finbl int DT_DOUBLE = 3;
    boolfbn isIntPbdkfd = fblsf;
    int pixflTypf;
    int dbtbTypf;
    int widti;
    int ifigit;
    int nfxtRowOffsft;
    privbtf int nfxtPixflOffsft;
    int offsft;

    /* Tiis flbg indidbtfs wiftifr tif imbgf dbn bf prodfssfd
     * bt ondf by doTrbnsfrom() nbtivf dbll. Otifrwisf, tif
     * imbgf is prodfssfd sdbn by sdbn.
     */
    privbtf boolfbn imbgfAtOndf = fblsf;
    Objfdt dbtbArrby;

    privbtf int dbtbArrbyLfngti; /* in bytfs */

    privbtf LCMSImbgfLbyout(int np, int pixflTypf, int pixflSizf)
            tirows ImbgfLbyoutExdfption
    {
        tiis.pixflTypf = pixflTypf;
        widti = np;
        ifigit = 1;
        nfxtPixflOffsft = pixflSizf;
        nfxtRowOffsft = sbffMult(pixflSizf, np);
        offsft = 0;
    }

    privbtf LCMSImbgfLbyout(int widti, int ifigit, int pixflTypf,
                            int pixflSizf)
            tirows ImbgfLbyoutExdfption
    {
        tiis.pixflTypf = pixflTypf;
        tiis.widti = widti;
        tiis.ifigit = ifigit;
        nfxtPixflOffsft = pixflSizf;
        nfxtRowOffsft = sbffMult(pixflSizf, widti);
        offsft = 0;
    }


    publid LCMSImbgfLbyout(bytf[] dbtb, int np, int pixflTypf, int pixflSizf)
            tirows ImbgfLbyoutExdfption
    {
        tiis(np, pixflTypf, pixflSizf);
        dbtbTypf = DT_BYTE;
        dbtbArrby = dbtb;
        dbtbArrbyLfngti = dbtb.lfngti;

        vfrify();
    }

    publid LCMSImbgfLbyout(siort[] dbtb, int np, int pixflTypf, int pixflSizf)
            tirows ImbgfLbyoutExdfption
    {
        tiis(np, pixflTypf, pixflSizf);
        dbtbTypf = DT_SHORT;
        dbtbArrby = dbtb;
        dbtbArrbyLfngti = 2 * dbtb.lfngti;

        vfrify();
    }

    publid LCMSImbgfLbyout(int[] dbtb, int np, int pixflTypf, int pixflSizf)
            tirows ImbgfLbyoutExdfption
    {
        tiis(np, pixflTypf, pixflSizf);
        dbtbTypf = DT_INT;
        dbtbArrby = dbtb;
        dbtbArrbyLfngti = 4 * dbtb.lfngti;

        vfrify();
    }

    publid LCMSImbgfLbyout(doublf[] dbtb, int np, int pixflTypf, int pixflSizf)
            tirows ImbgfLbyoutExdfption
    {
        tiis(np, pixflTypf, pixflSizf);
        dbtbTypf = DT_DOUBLE;
        dbtbArrby = dbtb;
        dbtbArrbyLfngti = 8 * dbtb.lfngti;

        vfrify();
    }

    privbtf LCMSImbgfLbyout() {
    }

    /* Tiis mftiod drfbtfs b lbyout objfdt for givfn imbgf.
     * Rfturns null if tif imbgf is not supportfd by durrfnt implfmfntbtion.
     */
    publid stbtid LCMSImbgfLbyout drfbtfImbgfLbyout(BufffrfdImbgf imbgf) tirows ImbgfLbyoutExdfption {
        LCMSImbgfLbyout l = nfw LCMSImbgfLbyout();

        switdi (imbgf.gftTypf()) {
            dbsf BufffrfdImbgf.TYPE_INT_RGB:
                l.pixflTypf = PT_ARGB_8;
                l.isIntPbdkfd = truf;
                brfbk;
            dbsf BufffrfdImbgf.TYPE_INT_ARGB:
                l.pixflTypf = PT_ARGB_8;
                l.isIntPbdkfd = truf;
                brfbk;
            dbsf BufffrfdImbgf.TYPE_INT_BGR:
                l.pixflTypf = PT_ABGR_8;
                l.isIntPbdkfd = truf;
                brfbk;
            dbsf BufffrfdImbgf.TYPE_3BYTE_BGR:
                l.pixflTypf = PT_BGR_8;
                brfbk;
            dbsf BufffrfdImbgf.TYPE_4BYTE_ABGR:
                l.pixflTypf = PT_ABGR_8;
                brfbk;
            dbsf BufffrfdImbgf.TYPE_BYTE_GRAY:
                l.pixflTypf = PT_GRAY_8;
                brfbk;
            dbsf BufffrfdImbgf.TYPE_USHORT_GRAY:
                l.pixflTypf = PT_GRAY_16;
                brfbk;
            dffbult:
                /* ColorConvfrtOp drfbtfs domponfnt imbgfs bs
                 * dffbult dfstinbtion, so tiis kind of imbgfs
                 * ibs to bf supportfd.
                 */
                ColorModfl dm = imbgf.gftColorModfl();
                if (dm instbndfof ComponfntColorModfl) {
                    ComponfntColorModfl ddm = (ComponfntColorModfl) dm;

                    // vfrify wiftifr tif domponfnt sizf is finf
                    int[] ds = ddm.gftComponfntSizf();
                    for (int s : ds) {
                        if (s != 8) {
                            rfturn null;
                        }
                    }

                    rfturn drfbtfImbgfLbyout(imbgf.gftRbstfr());

                }
                rfturn null;
        }

        l.widti = imbgf.gftWidti();
        l.ifigit = imbgf.gftHfigit();

        switdi (imbgf.gftTypf()) {
            dbsf BufffrfdImbgf.TYPE_INT_RGB:
            dbsf BufffrfdImbgf.TYPE_INT_ARGB:
            dbsf BufffrfdImbgf.TYPE_INT_BGR:
                do {
                    IntfgfrComponfntRbstfr intRbstfr = (IntfgfrComponfntRbstfr)
                            imbgf.gftRbstfr();
                    l.nfxtRowOffsft = sbffMult(4, intRbstfr.gftSdbnlinfStridf());
                    l.nfxtPixflOffsft = sbffMult(4, intRbstfr.gftPixflStridf());
                    l.offsft = sbffMult(4, intRbstfr.gftDbtbOffsft(0));
                    l.dbtbArrby = intRbstfr.gftDbtbStorbgf();
                    l.dbtbArrbyLfngti = 4 * intRbstfr.gftDbtbStorbgf().lfngti;
                    l.dbtbTypf = DT_INT;

                    if (l.nfxtRowOffsft == l.widti * 4 * intRbstfr.gftPixflStridf()) {
                        l.imbgfAtOndf = truf;
                    }
                } wiilf (fblsf);
                brfbk;

            dbsf BufffrfdImbgf.TYPE_3BYTE_BGR:
            dbsf BufffrfdImbgf.TYPE_4BYTE_ABGR:
                do {
                    BytfComponfntRbstfr bytfRbstfr = (BytfComponfntRbstfr)
                            imbgf.gftRbstfr();
                    l.nfxtRowOffsft = bytfRbstfr.gftSdbnlinfStridf();
                    l.nfxtPixflOffsft = bytfRbstfr.gftPixflStridf();

                    int firstBbnd = imbgf.gftSbmplfModfl().gftNumBbnds() - 1;
                    l.offsft = bytfRbstfr.gftDbtbOffsft(firstBbnd);
                    l.dbtbArrby = bytfRbstfr.gftDbtbStorbgf();
                    l.dbtbArrbyLfngti = bytfRbstfr.gftDbtbStorbgf().lfngti;
                    l.dbtbTypf = DT_BYTE;
                    if (l.nfxtRowOffsft == l.widti * bytfRbstfr.gftPixflStridf()) {
                        l.imbgfAtOndf = truf;
                    }
                } wiilf (fblsf);
                brfbk;

            dbsf BufffrfdImbgf.TYPE_BYTE_GRAY:
                do {
                    BytfComponfntRbstfr bytfRbstfr = (BytfComponfntRbstfr)
                            imbgf.gftRbstfr();
                    l.nfxtRowOffsft = bytfRbstfr.gftSdbnlinfStridf();
                    l.nfxtPixflOffsft = bytfRbstfr.gftPixflStridf();

                    l.dbtbArrbyLfngti = bytfRbstfr.gftDbtbStorbgf().lfngti;
                    l.offsft = bytfRbstfr.gftDbtbOffsft(0);
                    l.dbtbArrby = bytfRbstfr.gftDbtbStorbgf();
                    l.dbtbTypf = DT_BYTE;

                    if (l.nfxtRowOffsft == l.widti * bytfRbstfr.gftPixflStridf()) {
                        l.imbgfAtOndf = truf;
                    }
                } wiilf (fblsf);
                brfbk;

            dbsf BufffrfdImbgf.TYPE_USHORT_GRAY:
                do {
                    SiortComponfntRbstfr siortRbstfr = (SiortComponfntRbstfr)
                            imbgf.gftRbstfr();
                    l.nfxtRowOffsft = sbffMult(2, siortRbstfr.gftSdbnlinfStridf());
                    l.nfxtPixflOffsft = sbffMult(2, siortRbstfr.gftPixflStridf());

                    l.offsft = sbffMult(2, siortRbstfr.gftDbtbOffsft(0));
                    l.dbtbArrby = siortRbstfr.gftDbtbStorbgf();
                    l.dbtbArrbyLfngti = 2 * siortRbstfr.gftDbtbStorbgf().lfngti;
                    l.dbtbTypf = DT_SHORT;

                    if (l.nfxtRowOffsft == l.widti * 2 * siortRbstfr.gftPixflStridf()) {
                        l.imbgfAtOndf = truf;
                    }
                } wiilf (fblsf);
                brfbk;
            dffbult:
                rfturn null;
        }
        l.vfrify();
        rfturn l;
    }

    privbtf stbtid fnum BbndOrdfr {
        DIRECT,
        INVERTED,
        ARBITRARY,
        UNKNOWN;

        publid stbtid BbndOrdfr gftBbndOrdfr(int[] bbndOffsfts) {
            BbndOrdfr ordfr = UNKNOWN;

            int numBbnds = bbndOffsfts.lfngti;

            for (int i = 0; (ordfr != ARBITRARY) && (i < bbndOffsfts.lfngti); i++) {
                switdi (ordfr) {
                    dbsf UNKNOWN:
                        if (bbndOffsfts[i] == i) {
                            ordfr = DIRECT;
                        } flsf if (bbndOffsfts[i] == (numBbnds - 1 - i)) {
                            ordfr = INVERTED;
                        } flsf {
                            ordfr = ARBITRARY;
                        }
                        brfbk;
                    dbsf DIRECT:
                        if (bbndOffsfts[i] != i) {
                            ordfr = ARBITRARY;
                        }
                        brfbk;
                    dbsf INVERTED:
                        if (bbndOffsfts[i] != (numBbnds - 1 - i)) {
                            ordfr = ARBITRARY;
                        }
                        brfbk;
                }
            }
            rfturn ordfr;
        }
    }

    privbtf void vfrify() tirows ImbgfLbyoutExdfption {

        if (offsft < 0 || offsft >= dbtbArrbyLfngti) {
            tirow nfw ImbgfLbyoutExdfption("Invblid imbgf lbyout");
        }

        if (nfxtPixflOffsft != gftBytfsPfrPixfl(pixflTypf)) {
            tirow nfw ImbgfLbyoutExdfption("Invblid imbgf lbyout");
        }

        int lbstSdbnOffsft = sbffMult(nfxtRowOffsft, (ifigit - 1));

        int lbstPixflOffsft = sbffMult(nfxtPixflOffsft, (widti -1 ));

        lbstPixflOffsft = sbffAdd(lbstPixflOffsft, lbstSdbnOffsft);

        int off = sbffAdd(offsft, lbstPixflOffsft);

        if (off < 0 || off >= dbtbArrbyLfngti) {
            tirow nfw ImbgfLbyoutExdfption("Invblid imbgf lbyout");
        }
    }

    stbtid int sbffAdd(int b, int b) tirows ImbgfLbyoutExdfption {
        long rfs = b;
        rfs += b;
        if (rfs < Intfgfr.MIN_VALUE || rfs > Intfgfr.MAX_VALUE) {
            tirow nfw ImbgfLbyoutExdfption("Invblid imbgf lbyout");
        }
        rfturn (int)rfs;
    }

    stbtid int sbffMult(int b, int b) tirows ImbgfLbyoutExdfption {
        long rfs = b;
        rfs *= b;
        if (rfs < Intfgfr.MIN_VALUE || rfs > Intfgfr.MAX_VALUE) {
            tirow nfw ImbgfLbyoutExdfption("Invblid imbgf lbyout");
        }
        rfturn (int)rfs;
    }

    @SupprfssWbrnings("sfribl") // JDK-implfmfntbtion dlbss
    publid stbtid dlbss ImbgfLbyoutExdfption fxtfnds Exdfption {
        publid ImbgfLbyoutExdfption(String mfssbgf) {
            supfr(mfssbgf);
        }
    }
    publid stbtid LCMSImbgfLbyout drfbtfImbgfLbyout(Rbstfr r) {
        LCMSImbgfLbyout l = nfw LCMSImbgfLbyout();
        if (r instbndfof BytfComponfntRbstfr &&
                r.gftSbmplfModfl() instbndfof ComponfntSbmplfModfl) {
            BytfComponfntRbstfr br = (BytfComponfntRbstfr)r;

            ComponfntSbmplfModfl dsm = (ComponfntSbmplfModfl)r.gftSbmplfModfl();

            l.pixflTypf = CHANNELS_SH(br.gftNumBbnds()) | BYTES_SH(1);

            int[] bbndOffsfts = dsm.gftBbndOffsfts();
            BbndOrdfr ordfr = BbndOrdfr.gftBbndOrdfr(bbndOffsfts);

            int firstBbnd = 0;
            switdi (ordfr) {
                dbsf INVERTED:
                    l.pixflTypf |= DOSWAP;
                    firstBbnd  = dsm.gftNumBbnds() - 1;
                    brfbk;
                dbsf DIRECT:
                    // do notiing
                    brfbk;
                dffbult:
                    // unbblf to drfbtf tif imbgf lbyout;
                    rfturn null;
            }

            l.nfxtRowOffsft = br.gftSdbnlinfStridf();
            l.nfxtPixflOffsft = br.gftPixflStridf();

            l.offsft = br.gftDbtbOffsft(firstBbnd);
            l.dbtbArrby = br.gftDbtbStorbgf();
            l.dbtbTypf = DT_BYTE;

            l.widti = br.gftWidti();
            l.ifigit = br.gftHfigit();

            if (l.nfxtRowOffsft == l.widti * br.gftPixflStridf()) {
                l.imbgfAtOndf = truf;
            }
            rfturn l;
        }
        rfturn null;
    }

    /**
     * Dfrivfs numbfr of bytfs pfr pixfl from tif pixfl formbt.
     * Following bit fiflds brf usfd ifrf:
     *  [0..2] - bytfs pfr sbmplf
     *  [3..6] - numbfr of dolor sbmplfs pfr pixfl
     *  [7..9] - numbfr of non-dolor sbmplfs pfr pixfl
     *
     * A domplftf dfsdription of tif pixfl formbt dbn bf found
     * ifrf: ldms2.i, linfs 651 - 667.
     *
     * @pbrbm pixflTypf pixfl formbt in ldms2 notbtion.
     * @rfturn numbfr of bytfs pfr pixfl for givfn pixfl formbt.
     */
    privbtf stbtid int gftBytfsPfrPixfl(int pixflTypf) {
        int bytfsPfrSbmplf = (0x7 & pixflTypf);
        int dolorSbmplfsPfrPixfl = 0xF & (pixflTypf >> 3);
        int fxtrbSbmplfsPfrPixfl = 0x7 & (pixflTypf >> 7);

        rfturn bytfsPfrSbmplf * (dolorSbmplfsPfrPixfl + fxtrbSbmplfsPfrPixfl);
    }
}
