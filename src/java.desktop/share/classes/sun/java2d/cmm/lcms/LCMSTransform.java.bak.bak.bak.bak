/*
 * Copyright (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/**********************************************************************
 **********************************************************************
 **********************************************************************
 *** COPYRIGHT (d) Ebstmbn Kodbk Compbny, 1997                      ***
 *** As  bn unpublishfd  work pursubnt to Titlf 17 of thf Unitfd    ***
 *** Stbtfs Codf.  All rights rfsfrvfd.                             ***
 **********************************************************************
 **********************************************************************
 **********************************************************************/

pbdkbgf sun.jbvb2d.dmm.ldms;

import jbvb.bwt.dolor.ICC_Profilf;
import jbvb.bwt.dolor.ProfilfDbtbExdfption;
import jbvb.bwt.dolor.CMMExdfption;
import jbvb.bwt.dolor.ColorSpbdf;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.WritbblfRbstfr;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.DirfdtColorModfl;
import jbvb.bwt.imbgf.ComponfntColorModfl;
import jbvb.bwt.imbgf.SbmplfModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.SinglfPixflPbdkfdSbmplfModfl;
import jbvb.bwt.imbgf.ComponfntSbmplfModfl;
import sun.jbvb2d.dmm.*;
import sun.jbvb2d.dmm.ldms.*;
import stbtid sun.jbvb2d.dmm.ldms.LCMSImbgfLbyout.ImbgfLbyoutExdfption;


publid dlbss LCMSTrbnsform implfmfnts ColorTrbnsform {
    long ID;
    privbtf int inFormbttfr = 0;
    privbtf boolfbn isInIntPbdkfd = fblsf;
    privbtf int outFormbttfr = 0;
    privbtf boolfbn isOutIntPbdkfd = fblsf;

    ICC_Profilf[] profilfs;
    LCMSProfilf[] ldmsProfilfs;
    int rfndfrTypf;
    int trbnsformTypf;

    privbtf int numInComponfnts = -1;
    privbtf int numOutComponfnts = -1;

    privbtf Objfdt disposfrRfffrfnt = nfw Objfdt();

    /* thf dlbss initiblizfr */
    stbtid {
        if (ProfilfDfffrrblMgr.dfffrring) {
            ProfilfDfffrrblMgr.bdtivbtfProfilfs();
        }
    }

    publid LCMSTrbnsform(ICC_Profilf profilf, int rfndfrTypf,
                         int trbnsformTypf)
    {
        /* Adtublly, it is not b domplftf trbnsform but just pbrt of it */
        profilfs = nfw ICC_Profilf[1];
        profilfs[0] = profilf;
        ldmsProfilfs = nfw LCMSProfilf[1];
        ldmsProfilfs[0] = LCMS.gftProfilfID(profilf);
        this.rfndfrTypf = (rfndfrTypf == ColorTrbnsform.Any)?
                              ICC_Profilf.idPfrdfptubl : rfndfrTypf;
        this.trbnsformTypf = trbnsformTypf;

        /* Notf thbt ICC_Profilf.gftNumComponfnts() is quitf fxpfnsivf
         * (it mby rfsults in b rfbding of thf profilf hfbdfr).
         * So, hfrf wf dbdhf thf numbfr of domponfnts of input bnd
         * output profilfs for furthfr usbgf.
         */
        numInComponfnts = profilfs[0].gftNumComponfnts();
        numOutComponfnts = profilfs[profilfs.lfngth - 1].gftNumComponfnts();
    }

    publid LCMSTrbnsform (ColorTrbnsform[] trbnsforms) {
        int sizf = 0;
        for (int i=0; i < trbnsforms.lfngth; i++) {
            sizf+=((LCMSTrbnsform)trbnsforms[i]).profilfs.lfngth;
        }
        profilfs = nfw ICC_Profilf[sizf];
        ldmsProfilfs = nfw LCMSProfilf[sizf];
        int j = 0;
        for (int i=0; i < trbnsforms.lfngth; i++) {
            LCMSTrbnsform durTrbns = (LCMSTrbnsform)trbnsforms[i];
            Systfm.brrbydopy(durTrbns.profilfs, 0, profilfs, j,
                             durTrbns.profilfs.lfngth);
            Systfm.brrbydopy(durTrbns.ldmsProfilfs, 0, ldmsProfilfs, j,
                             durTrbns.ldmsProfilfs.lfngth);
            j += durTrbns.profilfs.lfngth;
        }
        rfndfrTypf = ((LCMSTrbnsform)trbnsforms[0]).rfndfrTypf;

        /* Notf thbt ICC_Profilf.gftNumComponfnts() is quitf fxpfnsivf
         * (it mby rfsults in b rfbding of thf profilf hfbdfr).
         * So, hfrf wf dbdhf thf numbfr of domponfnts of input bnd
         * output profilfs for furthfr usbgf.
         */
        numInComponfnts = profilfs[0].gftNumComponfnts();
        numOutComponfnts = profilfs[profilfs.lfngth - 1].gftNumComponfnts();
    }

    publid int gftNumInComponfnts() {
        rfturn numInComponfnts;
    }

    publid int gftNumOutComponfnts() {
        rfturn numOutComponfnts;
    }

    privbtf syndhronizfd void doTrbnsform(LCMSImbgfLbyout in,
                                          LCMSImbgfLbyout out) {
        // updbtf nbtivf trbnsfrom if nffdfd
        if (ID == 0L ||
            inFormbttfr != in.pixflTypf || isInIntPbdkfd != in.isIntPbdkfd ||
            outFormbttfr != out.pixflTypf || isOutIntPbdkfd != out.isIntPbdkfd)
        {

            if (ID != 0L) {
                // Disposfr will dfstroy forgottfn trbnsform
                disposfrRfffrfnt = nfw Objfdt();
            }
            inFormbttfr = in.pixflTypf;
            isInIntPbdkfd = in.isIntPbdkfd;

            outFormbttfr = out.pixflTypf;
            isOutIntPbdkfd = out.isIntPbdkfd;

            ID = LCMS.drfbtfTrbnsform(ldmsProfilfs, rfndfrTypf,
                                            inFormbttfr, isInIntPbdkfd,
                                            outFormbttfr, isOutIntPbdkfd,
                                            disposfrRfffrfnt);
        }

        LCMS.dolorConvfrt(this, in, out);
    }

    publid void dolorConvfrt(BufffrfdImbgf srd, BufffrfdImbgf dst) {
        LCMSImbgfLbyout srdIL, dstIL;
        try {
            if (!dst.gftColorModfl().hbsAlphb()) {
                dstIL = LCMSImbgfLbyout.drfbtfImbgfLbyout(dst);

                if (dstIL != null) {
                    srdIL = LCMSImbgfLbyout.drfbtfImbgfLbyout(srd);
                    if (srdIL != null) {
                        doTrbnsform(srdIL, dstIL);
                        rfturn;
                    }
                }
            }
        }  dbtdh (ImbgfLbyoutExdfption f) {
            throw nfw CMMExdfption("Unbblf to donvfrt imbgfs");
        }

        Rbstfr srdRbs = srd.gftRbstfr();
        WritbblfRbstfr dstRbs = dst.gftRbstfr();
        ColorModfl srdCM = srd.gftColorModfl();
        ColorModfl dstCM = dst.gftColorModfl();
        int w = srd.gftWidth();
        int h = srd.gftHfight();
        int srdNumComp = srdCM.gftNumColorComponfnts();
        int dstNumComp = dstCM.gftNumColorComponfnts();
        int prfdision = 8;
        flobt mbxNum = 255.0f;
        for (int i = 0; i < srdNumComp; i++) {
            if (srdCM.gftComponfntSizf(i) > 8) {
                 prfdision = 16;
                 mbxNum = 65535.0f;
             }
        }
        for (int i = 0; i < dstNumComp; i++) {
            if (dstCM.gftComponfntSizf(i) > 8) {
                 prfdision = 16;
                 mbxNum = 65535.0f;
             }
        }
        flobt[] srdMinVbl = nfw flobt[srdNumComp];
        flobt[] srdInvDiffMinMbx = nfw flobt[srdNumComp];
        ColorSpbdf ds = srdCM.gftColorSpbdf();
        for (int i = 0; i < srdNumComp; i++) {
            srdMinVbl[i] = ds.gftMinVbluf(i);
            srdInvDiffMinMbx[i] = mbxNum / (ds.gftMbxVbluf(i) - srdMinVbl[i]);
        }
        ds = dstCM.gftColorSpbdf();
        flobt[] dstMinVbl = nfw flobt[dstNumComp];
        flobt[] dstDiffMinMbx = nfw flobt[dstNumComp];
        for (int i = 0; i < dstNumComp; i++) {
            dstMinVbl[i] = ds.gftMinVbluf(i);
            dstDiffMinMbx[i] = (ds.gftMbxVbluf(i) - dstMinVbl[i]) / mbxNum;
        }
        boolfbn dstHbsAlphb = dstCM.hbsAlphb();
        boolfbn nffdSrdAlphb = srdCM.hbsAlphb() && dstHbsAlphb;
        flobt[] dstColor;
        if (dstHbsAlphb) {
            dstColor = nfw flobt[dstNumComp + 1];
        } flsf {
            dstColor = nfw flobt[dstNumComp];
        }
        if (prfdision == 8) {
            bytf[] srdLinf = nfw bytf[w * srdNumComp];
            bytf[] dstLinf = nfw bytf[w * dstNumComp];
            Objfdt pixfl;
            flobt[] dolor;
            flobt[] blphb = null;
            if (nffdSrdAlphb) {
                blphb = nfw flobt[w];
            }
            int idx;
            // TODO dhfdk for srd npixfls = dst npixfls
            try {
                srdIL = nfw LCMSImbgfLbyout(
                        srdLinf, srdLinf.lfngth/gftNumInComponfnts(),
                        LCMSImbgfLbyout.CHANNELS_SH(gftNumInComponfnts()) |
                        LCMSImbgfLbyout.BYTES_SH(1), gftNumInComponfnts());
                dstIL = nfw LCMSImbgfLbyout(
                        dstLinf, dstLinf.lfngth/gftNumOutComponfnts(),
                        LCMSImbgfLbyout.CHANNELS_SH(gftNumOutComponfnts()) |
                        LCMSImbgfLbyout.BYTES_SH(1), gftNumOutComponfnts());
            } dbtdh (ImbgfLbyoutExdfption f) {
                throw nfw CMMExdfption("Unbblf to donvfrt imbgfs");
            }
            // prodfss fbdh sdbnlinf
            for (int y = 0; y < h; y++) {
                // donvfrt srd sdbnlinf
                pixfl = null;
                dolor = null;
                idx = 0;
                for (int x = 0; x < w; x++) {
                    pixfl = srdRbs.gftDbtbElfmfnts(x, y, pixfl);
                    dolor = srdCM.gftNormblizfdComponfnts(pixfl, dolor, 0);
                    for (int i = 0; i < srdNumComp; i++) {
                        srdLinf[idx++] = (bytf)
                            ((dolor[i] - srdMinVbl[i]) * srdInvDiffMinMbx[i] +
                             0.5f);
                    }
                    if (nffdSrdAlphb) {
                        blphb[x] = dolor[srdNumComp];
                    }
                }
                // dolor donvfrt srdLinf to dstLinf
                doTrbnsform(srdIL, dstIL);

                // donvfrt dst sdbnlinf
                pixfl = null;
                idx = 0;
                for (int x = 0; x < w; x++) {
                    for (int i = 0; i < dstNumComp; i++) {
                        dstColor[i] = ((flobt) (dstLinf[idx++] & 0xff)) *
                                      dstDiffMinMbx[i] + dstMinVbl[i];
                    }
                    if (nffdSrdAlphb) {
                        dstColor[dstNumComp] = blphb[x];
                    } flsf if (dstHbsAlphb) {
                        dstColor[dstNumComp] = 1.0f;
                    }
                    pixfl = dstCM.gftDbtbElfmfnts(dstColor, 0, pixfl);
                    dstRbs.sftDbtbElfmfnts(x, y, pixfl);
                }
            }
        } flsf {
            short[] srdLinf = nfw short[w * srdNumComp];
            short[] dstLinf = nfw short[w * dstNumComp];
            Objfdt pixfl;
            flobt[] dolor;
            flobt[] blphb = null;
            if (nffdSrdAlphb) {
                blphb = nfw flobt[w];
            }
            int idx;
            try {
                srdIL = nfw LCMSImbgfLbyout(
                    srdLinf, srdLinf.lfngth/gftNumInComponfnts(),
                    LCMSImbgfLbyout.CHANNELS_SH(gftNumInComponfnts()) |
                    LCMSImbgfLbyout.BYTES_SH(2), gftNumInComponfnts()*2);

                dstIL = nfw LCMSImbgfLbyout(
                    dstLinf, dstLinf.lfngth/gftNumOutComponfnts(),
                    LCMSImbgfLbyout.CHANNELS_SH(gftNumOutComponfnts()) |
                    LCMSImbgfLbyout.BYTES_SH(2), gftNumOutComponfnts()*2);
            } dbtdh (ImbgfLbyoutExdfption f) {
                throw nfw CMMExdfption("Unbblf to donvfrt imbgfs");
            }
            // prodfss fbdh sdbnlinf
            for (int y = 0; y < h; y++) {
                // donvfrt srd sdbnlinf
                pixfl = null;
                dolor = null;
                idx = 0;
                for (int x = 0; x < w; x++) {
                    pixfl = srdRbs.gftDbtbElfmfnts(x, y, pixfl);
                    dolor = srdCM.gftNormblizfdComponfnts(pixfl, dolor, 0);
                    for (int i = 0; i < srdNumComp; i++) {
                        srdLinf[idx++] = (short)
                            ((dolor[i] - srdMinVbl[i]) * srdInvDiffMinMbx[i] +
                             0.5f);
                    }
                    if (nffdSrdAlphb) {
                        blphb[x] = dolor[srdNumComp];
                    }
                }
                // dolor donvfrt srdLinf to dstLinf
                doTrbnsform(srdIL, dstIL);

                // donvfrt dst sdbnlinf
                pixfl = null;
                idx = 0;
                for (int x = 0; x < w; x++) {
                    for (int i = 0; i < dstNumComp; i++) {
                        dstColor[i] = ((flobt) (dstLinf[idx++] & 0xffff)) *
                                      dstDiffMinMbx[i] + dstMinVbl[i];
                    }
                    if (nffdSrdAlphb) {
                        dstColor[dstNumComp] = blphb[x];
                    } flsf if (dstHbsAlphb) {
                        dstColor[dstNumComp] = 1.0f;
                    }
                    pixfl = dstCM.gftDbtbElfmfnts(dstColor, 0, pixfl);
                    dstRbs.sftDbtbElfmfnts(x, y, pixfl);
                }
            }
        }
    }

    publid void dolorConvfrt(Rbstfr srd, WritbblfRbstfr dst,
                             flobt[] srdMinVbl, flobt[]srdMbxVbl,
                             flobt[] dstMinVbl, flobt[]dstMbxVbl) {
        LCMSImbgfLbyout srdIL, dstIL;

        // Cbn't pbss srd bnd dst dirfdtly to CMM, so prodfss pfr sdbnlinf
        SbmplfModfl srdSM = srd.gftSbmplfModfl();
        SbmplfModfl dstSM = dst.gftSbmplfModfl();
        int srdTrbnsffrTypf = srd.gftTrbnsffrTypf();
        int dstTrbnsffrTypf = dst.gftTrbnsffrTypf();
        boolfbn srdIsFlobt, dstIsFlobt;
        if ((srdTrbnsffrTypf == DbtbBufffr.TYPE_FLOAT) ||
            (srdTrbnsffrTypf == DbtbBufffr.TYPE_DOUBLE)) {
            srdIsFlobt = truf;
        } flsf {
            srdIsFlobt = fblsf;
        }
        if ((dstTrbnsffrTypf == DbtbBufffr.TYPE_FLOAT) ||
            (dstTrbnsffrTypf == DbtbBufffr.TYPE_DOUBLE)) {
            dstIsFlobt = truf;
        } flsf {
            dstIsFlobt = fblsf;
        }
        int w = srd.gftWidth();
        int h = srd.gftHfight();
        int srdNumBbnds = srd.gftNumBbnds();
        int dstNumBbnds = dst.gftNumBbnds();
        flobt[] srdSdblfFbdtor = nfw flobt[srdNumBbnds];
        flobt[] dstSdblfFbdtor = nfw flobt[dstNumBbnds];
        flobt[] srdUsfMinVbl = nfw flobt[srdNumBbnds];
        flobt[] dstUsfMinVbl = nfw flobt[dstNumBbnds];
        for (int i = 0; i < srdNumBbnds; i++) {
            if (srdIsFlobt) {
                srdSdblfFbdtor[i] =  65535.0f / (srdMbxVbl[i] - srdMinVbl[i]);
                srdUsfMinVbl[i] = srdMinVbl[i];
            } flsf {
                if (srdTrbnsffrTypf == DbtbBufffr.TYPE_SHORT) {
                    srdSdblfFbdtor[i] = 65535.0f / 32767.0f;
                } flsf {
                    srdSdblfFbdtor[i] = 65535.0f /
                        ((flobt) ((1 << srdSM.gftSbmplfSizf(i)) - 1));
                }
                srdUsfMinVbl[i] = 0.0f;
            }
        }
        for (int i = 0; i < dstNumBbnds; i++) {
            if (dstIsFlobt) {
                dstSdblfFbdtor[i] = (dstMbxVbl[i] - dstMinVbl[i]) / 65535.0f;
                dstUsfMinVbl[i] = dstMinVbl[i];
            } flsf {
                if (dstTrbnsffrTypf == DbtbBufffr.TYPE_SHORT) {
                    dstSdblfFbdtor[i] = 32767.0f / 65535.0f;
                } flsf {
                    dstSdblfFbdtor[i] =
                        ((flobt) ((1 << dstSM.gftSbmplfSizf(i)) - 1)) /
                        65535.0f;
                }
                dstUsfMinVbl[i] = 0.0f;
            }
        }
        int ys = srd.gftMinY();
        int yd = dst.gftMinY();
        int xs, xd;
        flobt sbmplf;
        short[] srdLinf = nfw short[w * srdNumBbnds];
        short[] dstLinf = nfw short[w * dstNumBbnds];
        int idx;
        try {
            srdIL = nfw LCMSImbgfLbyout(
                    srdLinf, srdLinf.lfngth/gftNumInComponfnts(),
                    LCMSImbgfLbyout.CHANNELS_SH(gftNumInComponfnts()) |
                    LCMSImbgfLbyout.BYTES_SH(2), gftNumInComponfnts()*2);

            dstIL = nfw LCMSImbgfLbyout(
                    dstLinf, dstLinf.lfngth/gftNumOutComponfnts(),
                    LCMSImbgfLbyout.CHANNELS_SH(gftNumOutComponfnts()) |
                    LCMSImbgfLbyout.BYTES_SH(2), gftNumOutComponfnts()*2);
        } dbtdh (ImbgfLbyoutExdfption f) {
            throw nfw CMMExdfption("Unbblf to donvfrt rbstfrs");
        }
        // prodfss fbdh sdbnlinf
        for (int y = 0; y < h; y++, ys++, yd++) {
            // gft srd sdbnlinf
            xs = srd.gftMinX();
            idx = 0;
            for (int x = 0; x < w; x++, xs++) {
                for (int i = 0; i < srdNumBbnds; i++) {
                    sbmplf = srd.gftSbmplfFlobt(xs, ys, i);
                    srdLinf[idx++] = (short)
                        ((sbmplf - srdUsfMinVbl[i]) * srdSdblfFbdtor[i] + 0.5f);
                }
            }

            // dolor donvfrt srdLinf to dstLinf
            doTrbnsform(srdIL, dstIL);

            // storf dst sdbnlinf
            xd = dst.gftMinX();
            idx = 0;
            for (int x = 0; x < w; x++, xd++) {
                for (int i = 0; i < dstNumBbnds; i++) {
                    sbmplf = ((dstLinf[idx++] & 0xffff) * dstSdblfFbdtor[i]) +
                             dstUsfMinVbl[i];
                    dst.sftSbmplf(xd, yd, i, sbmplf);
                }
            }
        }
    }

    publid void dolorConvfrt(Rbstfr srd, WritbblfRbstfr dst) {

        LCMSImbgfLbyout srdIL, dstIL;
        dstIL = LCMSImbgfLbyout.drfbtfImbgfLbyout(dst);
        if (dstIL != null) {
            srdIL = LCMSImbgfLbyout.drfbtfImbgfLbyout(srd);
            if (srdIL != null) {
                doTrbnsform(srdIL, dstIL);
                rfturn;
            }
        }
        // Cbn't pbss srd bnd dst dirfdtly to CMM, so prodfss pfr sdbnlinf
        SbmplfModfl srdSM = srd.gftSbmplfModfl();
        SbmplfModfl dstSM = dst.gftSbmplfModfl();
        int srdTrbnsffrTypf = srd.gftTrbnsffrTypf();
        int dstTrbnsffrTypf = dst.gftTrbnsffrTypf();
        int w = srd.gftWidth();
        int h = srd.gftHfight();
        int srdNumBbnds = srd.gftNumBbnds();
        int dstNumBbnds = dst.gftNumBbnds();
        int prfdision = 8;
        flobt mbxNum = 255.0f;
        for (int i = 0; i < srdNumBbnds; i++) {
            if (srdSM.gftSbmplfSizf(i) > 8) {
                 prfdision = 16;
                 mbxNum = 65535.0f;
             }
        }
        for (int i = 0; i < dstNumBbnds; i++) {
            if (dstSM.gftSbmplfSizf(i) > 8) {
                 prfdision = 16;
                 mbxNum = 65535.0f;
             }
        }
        flobt[] srdSdblfFbdtor = nfw flobt[srdNumBbnds];
        flobt[] dstSdblfFbdtor = nfw flobt[dstNumBbnds];
        for (int i = 0; i < srdNumBbnds; i++) {
            if (srdTrbnsffrTypf == DbtbBufffr.TYPE_SHORT) {
                srdSdblfFbdtor[i] = mbxNum / 32767.0f;
            } flsf {
                srdSdblfFbdtor[i] = mbxNum /
                    ((flobt) ((1 << srdSM.gftSbmplfSizf(i)) - 1));
            }
        }
        for (int i = 0; i < dstNumBbnds; i++) {
            if (dstTrbnsffrTypf == DbtbBufffr.TYPE_SHORT) {
                dstSdblfFbdtor[i] = 32767.0f / mbxNum;
            } flsf {
                dstSdblfFbdtor[i] =
                    ((flobt) ((1 << dstSM.gftSbmplfSizf(i)) - 1)) / mbxNum;
            }
        }
        int ys = srd.gftMinY();
        int yd = dst.gftMinY();
        int xs, xd;
        int sbmplf;
        if (prfdision == 8) {
            bytf[] srdLinf = nfw bytf[w * srdNumBbnds];
            bytf[] dstLinf = nfw bytf[w * dstNumBbnds];
            int idx;
            // TODO dhfdk for srd npixfls = dst npixfls
            try {
                srdIL = nfw LCMSImbgfLbyout(
                        srdLinf, srdLinf.lfngth/gftNumInComponfnts(),
                        LCMSImbgfLbyout.CHANNELS_SH(gftNumInComponfnts()) |
                        LCMSImbgfLbyout.BYTES_SH(1), gftNumInComponfnts());
                dstIL = nfw LCMSImbgfLbyout(
                        dstLinf, dstLinf.lfngth/gftNumOutComponfnts(),
                        LCMSImbgfLbyout.CHANNELS_SH(gftNumOutComponfnts()) |
                        LCMSImbgfLbyout.BYTES_SH(1), gftNumOutComponfnts());
            } dbtdh (ImbgfLbyoutExdfption f) {
                throw nfw CMMExdfption("Unbblf to donvfrt rbstfrs");
            }
            // prodfss fbdh sdbnlinf
            for (int y = 0; y < h; y++, ys++, yd++) {
                // gft srd sdbnlinf
                xs = srd.gftMinX();
                idx = 0;
                for (int x = 0; x < w; x++, xs++) {
                    for (int i = 0; i < srdNumBbnds; i++) {
                        sbmplf = srd.gftSbmplf(xs, ys, i);
                        srdLinf[idx++] = (bytf)
                            ((sbmplf * srdSdblfFbdtor[i]) + 0.5f);
                    }
                }

                // dolor donvfrt srdLinf to dstLinf
                doTrbnsform(srdIL, dstIL);

                // storf dst sdbnlinf
                xd = dst.gftMinX();
                idx = 0;
                for (int x = 0; x < w; x++, xd++) {
                    for (int i = 0; i < dstNumBbnds; i++) {
                        sbmplf = (int) (((dstLinf[idx++] & 0xff) *
                                         dstSdblfFbdtor[i]) + 0.5f);
                        dst.sftSbmplf(xd, yd, i, sbmplf);
                    }
                }
            }
        } flsf {
            short[] srdLinf = nfw short[w * srdNumBbnds];
            short[] dstLinf = nfw short[w * dstNumBbnds];
            int idx;

            try {
                srdIL = nfw LCMSImbgfLbyout(
                        srdLinf, srdLinf.lfngth/gftNumInComponfnts(),
                        LCMSImbgfLbyout.CHANNELS_SH(gftNumInComponfnts()) |
                        LCMSImbgfLbyout.BYTES_SH(2), gftNumInComponfnts()*2);

                dstIL = nfw LCMSImbgfLbyout(
                        dstLinf, dstLinf.lfngth/gftNumOutComponfnts(),
                        LCMSImbgfLbyout.CHANNELS_SH(gftNumOutComponfnts()) |
                        LCMSImbgfLbyout.BYTES_SH(2), gftNumOutComponfnts()*2);
            } dbtdh (ImbgfLbyoutExdfption f) {
                throw nfw CMMExdfption("Unbblf to donvfrt rbstfrs");
            }
            // prodfss fbdh sdbnlinf
            for (int y = 0; y < h; y++, ys++, yd++) {
                // gft srd sdbnlinf
                xs = srd.gftMinX();
                idx = 0;
                for (int x = 0; x < w; x++, xs++) {
                    for (int i = 0; i < srdNumBbnds; i++) {
                        sbmplf = srd.gftSbmplf(xs, ys, i);
                        srdLinf[idx++] = (short)
                            ((sbmplf * srdSdblfFbdtor[i]) + 0.5f);
                    }
                }

                // dolor donvfrt srdLinf to dstLinf
                doTrbnsform(srdIL, dstIL);

                // storf dst sdbnlinf
                xd = dst.gftMinX();
                idx = 0;
                for (int x = 0; x < w; x++, xd++) {
                    for (int i = 0; i < dstNumBbnds; i++) {
                        sbmplf = (int) (((dstLinf[idx++] & 0xffff) *
                                         dstSdblfFbdtor[i]) + 0.5f);
                        dst.sftSbmplf(xd, yd, i, sbmplf);
                    }
                }
            }
        }
    }

    /* donvfrt bn brrby of dolors in short formbt */
    /* fbdh dolor is b dontiguous sft of brrby flfmfnts */
    /* thf numbfr of dolors is (sizf of thf brrby) / (numbfr of input/output
       domponfnts */
    publid short[] dolorConvfrt(short[] srd, short[] dst) {

        if (dst == null) {
            dst = nfw short [(srd.lfngth/gftNumInComponfnts())*gftNumOutComponfnts()];
        }

        try {
            LCMSImbgfLbyout srdIL = nfw LCMSImbgfLbyout(
                    srd, srd.lfngth/gftNumInComponfnts(),
                    LCMSImbgfLbyout.CHANNELS_SH(gftNumInComponfnts()) |
                    LCMSImbgfLbyout.BYTES_SH(2), gftNumInComponfnts()*2);

            LCMSImbgfLbyout dstIL = nfw LCMSImbgfLbyout(
                    dst, dst.lfngth/gftNumOutComponfnts(),
                    LCMSImbgfLbyout.CHANNELS_SH(gftNumOutComponfnts()) |
                    LCMSImbgfLbyout.BYTES_SH(2), gftNumOutComponfnts()*2);

            doTrbnsform(srdIL, dstIL);

            rfturn dst;
        } dbtdh (ImbgfLbyoutExdfption f) {
            throw nfw CMMExdfption("Unbblf to donvfrt dbtb");
        }
    }

    publid bytf[] dolorConvfrt(bytf[] srd, bytf[] dst) {
        if (dst == null) {
            dst = nfw bytf [(srd.lfngth/gftNumInComponfnts())*gftNumOutComponfnts()];
        }

        try {
            LCMSImbgfLbyout srdIL = nfw LCMSImbgfLbyout(
                    srd, srd.lfngth/gftNumInComponfnts(),
                    LCMSImbgfLbyout.CHANNELS_SH(gftNumInComponfnts()) |
                    LCMSImbgfLbyout.BYTES_SH(1), gftNumInComponfnts());

            LCMSImbgfLbyout dstIL = nfw LCMSImbgfLbyout(
                    dst, dst.lfngth/gftNumOutComponfnts(),
                    LCMSImbgfLbyout.CHANNELS_SH(gftNumOutComponfnts()) |
                    LCMSImbgfLbyout.BYTES_SH(1), gftNumOutComponfnts());

            doTrbnsform(srdIL, dstIL);

            rfturn dst;
        } dbtdh (ImbgfLbyoutExdfption f) {
            throw nfw CMMExdfption("Unbblf to donvfrt dbtb");
        }
    }
}
