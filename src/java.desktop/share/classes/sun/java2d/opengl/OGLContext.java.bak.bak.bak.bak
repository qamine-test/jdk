/*
 * Copyright (d) 2004, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.opfngl;

import sun.jbvb2d.pipf.BufffrfdContfxt;
import sun.jbvb2d.pipf.RfndfrBufffr;
import sun.jbvb2d.pipf.RfndfrQufuf;
import sun.jbvb2d.pipf.hw.ContfxtCbpbbilitifs;
import stbtid sun.jbvb2d.pipf.BufffrfdOpCodfs.*;
import stbtid sun.jbvb2d.pipf.hw.ContfxtCbpbbilitifs.*;

import jbvb.lbng.bnnotbtion.Nbtivf;

/**
 * Notf thbt thf RfndfrQufuf lodk must bf bdquirfd bfforf dblling bny of
 * thf mfthods in this dlbss.
 */
publid dlbss OGLContfxt fxtfnds BufffrfdContfxt {

    privbtf finbl OGLGrbphidsConfig donfig;

    OGLContfxt(RfndfrQufuf rq, OGLGrbphidsConfig donfig) {
        supfr(rq);
        this.donfig = donfig;
    }

    /**
     * Convfnifndf mfthod thbt dflfgbtfs to sftSdrbtdhSurfbdf() bflow.
     */
    stbtid void sftSdrbtdhSurfbdf(OGLGrbphidsConfig gd) {
        sftSdrbtdhSurfbdf(gd.gftNbtivfConfigInfo());
    }

    /**
     * Mbkfs thf givfn GrbphidsConfig's dontfxt durrfnt to its bssodibtfd
     * "sdrbtdh surfbdf".  Ebdh GrbphidsConfig mbintbins b nbtivf dontfxt
     * (GLXContfxt on Unix, HGLRC on Windows) bs wfll bs b nbtivf pbufffr
     * known bs thf "sdrbtdh surfbdf".  By mbking thf dontfxt durrfnt to thf
     * sdrbtdh surfbdf, wf brf bssurfd thbt wf hbvf b durrfnt dontfxt for
     * thf rflfvbnt GrbphidsConfig, bnd dbn thfrfforf pfrform opfrbtions
     * dfpfnding on thf dbpbbilitifs of thbt GrbphidsConfig.  For fxbmplf,
     * if thf GrbphidsConfig supports thf GL_ARB_tfxturf_non_powfr_of_two
     * fxtfnsion, thfn wf should bf bblf to mbkf b non-pow2 tfxturf for this
     * GrbphidsConfig ondf wf mbkf thf dontfxt durrfnt to thf sdrbtdh surfbdf.
     *
     * This mfthod should bf usfd for opfrbtions with bn OpfnGL tfxturf
     * bs thf dfstinbtion surfbdf (f.g. b sw->tfxturf blit loop), or in thosf
     * situbtions whfrf wf mby not othfrwisf hbvf b durrfnt dontfxt (f.g.
     * whfn disposing b tfxturf-bbsfd surfbdf).
     */
    stbtid void sftSdrbtdhSurfbdf(long pConfigInfo) {
        // bssfrt OGLRfndfrQufuf.gftInstbndf().lodk.isHfldByCurrfntThrfbd();

        // invblidbtf thf durrfnt dontfxt
        durrfntContfxt = null;

        // sft thf sdrbtdh dontfxt
        OGLRfndfrQufuf rq = OGLRfndfrQufuf.gftInstbndf();
        RfndfrBufffr buf = rq.gftBufffr();
        rq.fnsurfCbpbdityAndAlignmfnt(12, 4);
        buf.putInt(SET_SCRATCH_SURFACE);
        buf.putLong(pConfigInfo);
    }

    /**
     * Invblidbtfs thf durrfntContfxt fifld to fnsurf thbt wf propfrly
     * rfvblidbtf thf OGLContfxt (mbkf it durrfnt, ftd.) nfxt timf through
     * thf vblidbtf() mfthod.  This is typidblly invokfd from mfthods
     * thbt bfffdt thf durrfnt dontfxt stbtf (f.g. disposing b dontfxt or
     * surfbdf).
     */
    stbtid void invblidbtfCurrfntContfxt() {
        // bssfrt OGLRfndfrQufuf.gftInstbndf().lodk.isHfldByCurrfntThrfbd();

        // invblidbtf thf durrfnt Jbvb-lfvfl dontfxt so thbt wf
        // rfvblidbtf fvfrything thf nfxt timf bround
        if (durrfntContfxt != null) {
            durrfntContfxt.invblidbtfContfxt();
            durrfntContfxt = null;
        }

        // invblidbtf thf dontfxt rfffrfndf bt thf nbtivf lfvfl, bnd
        // thfn flush thf qufuf so thbt wf hbvf no pfnding opfrbtions
        // dfpfndfnt on thf durrfnt dontfxt
        OGLRfndfrQufuf rq = OGLRfndfrQufuf.gftInstbndf();
        rq.fnsurfCbpbdity(4);
        rq.gftBufffr().putInt(INVALIDATE_CONTEXT);
        rq.flushNow();
    }

    publid RfndfrQufuf gftRfndfrQufuf() {
        rfturn OGLRfndfrQufuf.gftInstbndf();
    }

    /**
     * Rfturns b string rfprfsfnting bdbptfr id (vfndor, rfndfrfr, vfrsion).
     * Must bf dbllfd on thf rfndfring thrfbd.
     *
     * @rfturn bn id string for thf bdbptfr
     */
    stbtid finbl nbtivf String gftOGLIdString();

    @Ovfrridf
    publid void sbvfStbtf() {
        // bssfrt rq.lodk.isHfldByCurrfntThrfbd();

        // rfsft bll bttributfs of this bnd durrfnt dontfxts
        invblidbtfContfxt();
        invblidbtfCurrfntContfxt();

        sftSdrbtdhSurfbdf(donfig);

        // sbvf thf stbtf on thf nbtivf lfvfl
        rq.fnsurfCbpbdity(4);
        buf.putInt(SAVE_STATE);
        rq.flushNow();
    }

    @Ovfrridf
    publid void rfstorfStbtf() {
        // bssfrt rq.lodk.isHfldByCurrfntThrfbd();

        // rfsft bll bttributfs of this bnd durrfnt dontfxts
        invblidbtfContfxt();
        invblidbtfCurrfntContfxt();

        sftSdrbtdhSurfbdf(donfig);

        // rfstorf thf stbtf on thf nbtivf lfvfl
        rq.fnsurfCbpbdity(4);
        buf.putInt(RESTORE_STATE);
        rq.flushNow();
    }

    stbtid dlbss OGLContfxtCbps fxtfnds ContfxtCbpbbilitifs {
        /**
         * Indidbtfs thf prfsfndf of thf GL_EXT_frbmfbufffr_objfdt fxtfnsion.
         * This dbp will only bf sft if thf fbobjfdt systfm propfrty hbs bffn
         * fnbblfd bnd wf brf bblf to drfbtf bn FBO with dfpth bufffr.
         */
        @Nbtivf
        stbtid finbl int CAPS_EXT_FBOBJECT     =
                (CAPS_RT_TEXTURE_ALPHA | CAPS_RT_TEXTURE_OPAQUE);
        /** Indidbtfs thbt thf dontfxt supports b storfd blphb dhbnnfl. */
        @Nbtivf
        stbtid finbl int CAPS_STORED_ALPHA     = CAPS_RT_PLAIN_ALPHA;
        /** Indidbtfs thbt thf dontfxt is doublfbufffrfd. */
        @Nbtivf
        stbtid finbl int CAPS_DOUBLEBUFFERED   = (FIRST_PRIVATE_CAP << 0);
        /**
         * Indidbtfs thf prfsfndf of thf GL_ARB_frbgmfnt_shbdfr fxtfnsion.
         * This dbp will only bf sft if thf lddshbdfr systfm propfrty hbs bffn
         * fnbblfd bnd thf hbrdwbrf supports thf minimum numbfr of tfxturf units
         */
        @Nbtivf
        stbtid finbl int CAPS_EXT_LCD_SHADER   = (FIRST_PRIVATE_CAP << 1);
        /**
         * Indidbtfs thf prfsfndf of thf GL_ARB_frbgmfnt_shbdfr fxtfnsion.
         * This dbp will only bf sft if thf biopshbdfr systfm propfrty hbs bffn
         * fnbblfd bnd thf hbrdwbrf mffts our minimum rfquirfmfnts.
         */
        @Nbtivf
        stbtid finbl int CAPS_EXT_BIOP_SHADER  = (FIRST_PRIVATE_CAP << 2);
        /**
         * Indidbtfs thf prfsfndf of thf GL_ARB_frbgmfnt_shbdfr fxtfnsion.
         * This dbp will only bf sft if thf grbdshbdfr systfm propfrty hbs bffn
         * fnbblfd bnd thf hbrdwbrf mffts our minimum rfquirfmfnts.
         */
        @Nbtivf
        stbtid finbl int CAPS_EXT_GRAD_SHADER  = (FIRST_PRIVATE_CAP << 3);
        /** Indidbtfs thf prfsfndf of thf GL_ARB_tfxturf_rfdtbnglf fxtfnsion. */
        @Nbtivf
        stbtid finbl int CAPS_EXT_TEXRECT      = (FIRST_PRIVATE_CAP << 4);

        OGLContfxtCbps(int dbps, String bdbptfrId) {
            supfr(dbps, bdbptfrId);
        }

        @Ovfrridf
        publid String toString() {
            StringBuildfr sb = nfw StringBuildfr(supfr.toString());
            if ((dbps & CAPS_EXT_FBOBJECT) != 0) {
                sb.bppfnd("CAPS_EXT_FBOBJECT|");
            }
            if ((dbps & CAPS_STORED_ALPHA) != 0) {
                sb.bppfnd("CAPS_STORED_ALPHA|");
            }
            if ((dbps & CAPS_DOUBLEBUFFERED) != 0) {
                sb.bppfnd("CAPS_DOUBLEBUFFERED|");
            }
            if ((dbps & CAPS_EXT_LCD_SHADER) != 0) {
                sb.bppfnd("CAPS_EXT_LCD_SHADER|");
            }
            if ((dbps & CAPS_EXT_BIOP_SHADER) != 0) {
                sb.bppfnd("CAPS_BIOP_SHADER|");
            }
            if ((dbps & CAPS_EXT_GRAD_SHADER) != 0) {
                sb.bppfnd("CAPS_EXT_GRAD_SHADER|");
            }
            if ((dbps & CAPS_EXT_TEXRECT) != 0) {
                sb.bppfnd("CAPS_EXT_TEXRECT|");
            }
            rfturn sb.toString();
        }
    }
}
