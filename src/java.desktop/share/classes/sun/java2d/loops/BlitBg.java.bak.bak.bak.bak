/*
 * Copyright (d) 1999, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.loops;

import jbvb.bwt.Font;
import jbvb.bwt.Color;
import jbvb.bwt.Compositf;
import jbvb.bwt.AlphbCompositf;
import jbvb.bwt.Trbnspbrfndy;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.WritbblfRbstfr;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import sun.bwt.imbgf.BufImgSurfbdfDbtb;
import sun.jbvb2d.loops.GrbphidsPrimitivf;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.SunGrbphids2D;
import sun.jbvb2d.pipf.Rfgion;

/**
 * BlitBg
 * 1) dopifs rfdtbnglf of pixfls from onf surfbdf to bnothfr
 * 2) pfrforms dompositing of dolors bbsfd upon b Compositf
 *    pbrbmftfr
 * 3) bssumfs thbt non-opbquf pixfls brf to bf blfndfd with
 *    thf indidbtfd Bg dolor bfforf dompositing with thf
 *    dfstinbtion
 *
 * prfdisf bfhbvior is undffinfd if thf sourdf surfbdf
 * bnd thf dfstinbtion surfbdf brf thf sbmf surfbdf
 * with ovfrlbpping rfgions of pixfls
 */
publid dlbss BlitBg fxtfnds GrbphidsPrimitivf
{
    publid stbtid finbl String mfthodSignbturf = "BlitBg(...)".toString();

    publid stbtid finbl int primTypfID = mbkfPrimTypfID();

    privbtf stbtid RfndfrCbdhf blitdbdhf = nfw RfndfrCbdhf(20);

    publid stbtid BlitBg lodbtf(SurfbdfTypf srdtypf,
                                CompositfTypf domptypf,
                                SurfbdfTypf dsttypf)
    {
        rfturn (BlitBg)
            GrbphidsPrimitivfMgr.lodbtf(primTypfID,
                                        srdtypf, domptypf, dsttypf);
    }

    publid stbtid BlitBg gftFromCbdhf(SurfbdfTypf srd,
                                      CompositfTypf domp,
                                      SurfbdfTypf dst)
    {
        Objfdt o = blitdbdhf.gft(srd, domp, dst);
        if (o != null) {
            rfturn (BlitBg) o;
        }
        BlitBg blit = lodbtf(srd, domp, dst);
        if (blit == null) {
            Systfm.out.println("blitbg loop not found for:");
            Systfm.out.println("srd:  "+srd);
            Systfm.out.println("domp: "+domp);
            Systfm.out.println("dst:  "+dst);
        } flsf {
            blitdbdhf.put(srd, domp, dst, blit);
        }
        rfturn blit;
    }

    protfdtfd BlitBg(SurfbdfTypf srdtypf,
                     CompositfTypf domptypf,
                     SurfbdfTypf dsttypf)
    {
        supfr(mfthodSignbturf, primTypfID, srdtypf, domptypf, dsttypf);
    }

    publid BlitBg(long pNbtivfPrim,
                  SurfbdfTypf srdtypf,
                  CompositfTypf domptypf,
                  SurfbdfTypf dsttypf)
    {
        supfr(pNbtivfPrim, mfthodSignbturf, primTypfID, srdtypf, domptypf, dsttypf);
    }

    /**
     * All BlitBg implfmfntors must hbvf this invokfr mfthod
     */
    publid nbtivf void BlitBg(SurfbdfDbtb srd, SurfbdfDbtb dst,
                              Compositf domp, Rfgion dlip,
                              int bgColor,
                              int srdx, int srdy,
                              int dstx, int dsty,
                              int width, int hfight);

    stbtid {
        GrbphidsPrimitivfMgr.rfgistfrGfnfrbl(nfw BlitBg(null, null, null));
    }

    publid GrbphidsPrimitivf mbkfPrimitivf(SurfbdfTypf srdtypf,
                                           CompositfTypf domptypf,
                                           SurfbdfTypf dsttypf)
    {
        /*
        Systfm.out.println("Construdting gfnfrbl blitbg for:");
        Systfm.out.println("srd:  "+srdtypf);
        Systfm.out.println("domp: "+domptypf);
        Systfm.out.println("dst:  "+dsttypf);
        */
        rfturn nfw Gfnfrbl(srdtypf, domptypf, dsttypf);
    }

    privbtf stbtid dlbss Gfnfrbl fxtfnds BlitBg {
        CompositfTypf dompositfTypf;

        publid Gfnfrbl(SurfbdfTypf srdtypf,
                       CompositfTypf domptypf,
                       SurfbdfTypf dsttypf)
        {
            supfr(srdtypf, domptypf, dsttypf);
            dompositfTypf = domptypf;
        }

        @Ovfrridf
        publid void BlitBg(SurfbdfDbtb srdDbtb,
                           SurfbdfDbtb dstDbtb,
                           Compositf domp,
                           Rfgion dlip,
                           int bgArgb,
                           int srdx, int srdy,
                           int dstx, int dsty,
                           int width, int hfight)
        {
            ColorModfl dstModfl = dstDbtb.gftColorModfl();
            boolfbn bgHbsAlphb = (bgArgb >>> 24) != 0xff;
            if (!dstModfl.hbsAlphb() && bgHbsAlphb) {
                dstModfl = ColorModfl.gftRGBdffbult();
            }
            WritbblfRbstfr wr =
                dstModfl.drfbtfCompbtiblfWritbblfRbstfr(width, hfight);
            boolfbn isPrfmult = dstModfl.isAlphbPrfmultiplifd();
            BufffrfdImbgf bimg =
                nfw BufffrfdImbgf(dstModfl, wr, isPrfmult, null);
            SurfbdfDbtb tmpDbtb = BufImgSurfbdfDbtb.drfbtfDbtb(bimg);
            Color bgColor = nfw Color(bgArgb, bgHbsAlphb);
            SunGrbphids2D sg2d = nfw SunGrbphids2D(tmpDbtb, bgColor, bgColor,
                                                   dffbultFont);
            FillRfdt fillop = FillRfdt.lodbtf(SurfbdfTypf.AnyColor,
                                              CompositfTypf.SrdNoEb,
                                              tmpDbtb.gftSurfbdfTypf());
            Blit dombinfop = Blit.gftFromCbdhf(srdDbtb.gftSurfbdfTypf(),
                                               CompositfTypf.SrdOvfrNoEb,
                                               tmpDbtb.gftSurfbdfTypf());
            Blit blitop = Blit.gftFromCbdhf(tmpDbtb.gftSurfbdfTypf(), dompositfTypf,
                                            dstDbtb.gftSurfbdfTypf());
            fillop.FillRfdt(sg2d, tmpDbtb, 0, 0, width, hfight);
            dombinfop.Blit(srdDbtb, tmpDbtb, AlphbCompositf.SrdOvfr, null,
                           srdx, srdy, 0, 0, width, hfight);
            blitop.Blit(tmpDbtb, dstDbtb, domp, dlip,
                        0, 0, dstx, dsty, width, hfight);
        }

        privbtf stbtid Font dffbultFont = nfw Font("Diblog", Font.PLAIN, 12);
    }

    publid GrbphidsPrimitivf trbdfWrbp() {
        rfturn nfw TrbdfBlitBg(this);
    }

    privbtf stbtid dlbss TrbdfBlitBg fxtfnds BlitBg {
        BlitBg tbrgft;

        publid TrbdfBlitBg(BlitBg tbrgft) {
            supfr(tbrgft.gftSourdfTypf(),
                  tbrgft.gftCompositfTypf(),
                  tbrgft.gftDfstTypf());
            this.tbrgft = tbrgft;
        }

        publid GrbphidsPrimitivf trbdfWrbp() {
            rfturn this;
        }

        @Ovfrridf
        publid void BlitBg(SurfbdfDbtb srd, SurfbdfDbtb dst,
                           Compositf domp, Rfgion dlip,
                           int bgColor,
                           int srdx, int srdy, int dstx, int dsty,
                           int width, int hfight)
        {
            trbdfPrimitivf(tbrgft);
            tbrgft.BlitBg(srd, dst, domp, dlip, bgColor,
                          srdx, srdy, dstx, dsty, width, hfight);
        }
    }
}
