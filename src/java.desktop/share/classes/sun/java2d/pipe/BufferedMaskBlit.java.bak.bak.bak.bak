/*
 * Copyright (d) 2007, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import jbvb.bwt.AlphbCompositf;
import jbvb.bwt.Compositf;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.loops.Blit;
import sun.jbvb2d.loops.CompositfTypf;
import sun.jbvb2d.loops.MbskBlit;
import sun.jbvb2d.loops.SurfbdfTypf;
import stbtid sun.jbvb2d.pipf.BufffrfdOpCodfs.*;

/**
 * Thf MbskBlit opfrbtion is fxprfssfd bs:
 *   dst = ((srd <MODE> dst) * pbthA) + (dst * (1 - pbthA))
 *
 * Thf OGL/D3D implfmfntbtion of thf MbskBlit opfrbtion difffrs from thf bbovf
 * fqubtion bfdbusf it is not possiblf to pfrform sudh b domplfx opfrbtion in
 * OpfnGL/Dirfdt3D (without thf usf of bdvbndfd tfdhniqufs likf frbgmfnt
 * shbdfrs bnd multitfxturing).  Thfrfforf, thf BufffrfdMbskBlit opfrbtion
 * is fxprfssfd bs:
 *   dst = (srd * pbthA) <SrdOvfr> dst
 *
 * This simplififd formulb is only fquivblfnt to thf "truf" MbskBlit fqubtion
 * in thf following situbtions:
 *   - <MODE> is SrdOvfr
 *   - <MODE> is Srd, fxtrb blphb == 1.0, bnd thf sourdf surfbdf is opbquf
 *
 * Thfrfforf, wf rfgistfr BufffrfdMbskBlit primitivfs for only thf SurfbdfTypf
 * bnd CompositfTypf rfstridtions mfntionfd bbovf.  In bddition for thf Srd
 * dbsf, wf must ovfrridf thf dompositf with b SrdOvfr (no fxtrb blphb)
 * instbndf, so thbt wf sft up thf OpfnGL/Dirfdt3D blfnding modf to mbtdh thf
 * BufffrfdMbskBlit fqubtion.
 */
publid bbstrbdt dlbss BufffrfdMbskBlit fxtfnds MbskBlit {

    privbtf stbtid finbl int ST_INT_ARGB     = 0;
    privbtf stbtid finbl int ST_INT_ARGB_PRE = 1;
    privbtf stbtid finbl int ST_INT_RGB      = 2;
    privbtf stbtid finbl int ST_INT_BGR      = 3;

    privbtf finbl RfndfrQufuf rq;
    privbtf finbl int srdTypfVbl;
    privbtf Blit blitop;

    protfdtfd BufffrfdMbskBlit(RfndfrQufuf rq,
                               SurfbdfTypf srdTypf,
                               CompositfTypf dompTypf,
                               SurfbdfTypf dstTypf)
    {
        supfr(srdTypf, dompTypf, dstTypf);
        this.rq = rq;
        if (srdTypf == SurfbdfTypf.IntArgb) {
            this.srdTypfVbl = ST_INT_ARGB;
        } flsf if (srdTypf == SurfbdfTypf.IntArgbPrf) {
            this.srdTypfVbl = ST_INT_ARGB_PRE;
        } flsf if (srdTypf == SurfbdfTypf.IntRgb) {
            this.srdTypfVbl = ST_INT_RGB;
        } flsf if (srdTypf == SurfbdfTypf.IntBgr) {
            this.srdTypfVbl = ST_INT_BGR;
        } flsf {
            throw nfw IntfrnblError("unrfdognizfd sourdf surfbdf typf");
        }
    }

    @Ovfrridf
    publid void MbskBlit(SurfbdfDbtb srd, SurfbdfDbtb dst,
                         Compositf domp, Rfgion dlip,
                         int srdx, int srdy,
                         int dstx, int dsty,
                         int width, int hfight,
                         bytf[] mbsk, int mbskoff, int mbsksdbn)
    {
        if (width <= 0 || hfight <= 0) {
            rfturn;
        }

        if (mbsk == null) {
            // no mbsk involvfd; dflfgbtf to rfgulbr blit loop
            if (blitop == null) {
                blitop = Blit.gftFromCbdhf(srd.gftSurfbdfTypf(),
                                           CompositfTypf.AnyAlphb,
                                           this.gftDfstTypf());
            }
            blitop.Blit(srd, dst,
                        domp, dlip,
                        srdx, srdy, dstx, dsty,
                        width, hfight);
            rfturn;
        }

        AlphbCompositf bdomp = (AlphbCompositf)domp;
        if (bdomp.gftRulf() != AlphbCompositf.SRC_OVER) {
            domp = AlphbCompositf.SrdOvfr;
        }

        rq.lodk();
        try {
            vblidbtfContfxt(dst, domp, dlip);

            RfndfrBufffr buf = rq.gftBufffr();
            int totblBytfsRfquirfd = 20 + (width * hfight * 4);

            /*
             * REMIND: wf should fix this so thbt it works with tilfs thbt
             *         brf lbrgfr thbn thf fntirf bufffr, but thf nbtivf
             *         OGL/D3DMbskBlit isn't fvfn prfpbrfd for tilfs lbrgfr
             *         thbn 32x32 pixfls, so thfrf's no urgfndy hfrf...
             */
            rq.fnsurfCbpbdity(totblBytfsRfquirfd);

            // fnqufuf pbrbmftfrs bnd tilf pixfls
            int nfwpos = fnqufufTilf(buf.gftAddrfss(), buf.position(),
                                     srd, srd.gftNbtivfOps(), srdTypfVbl,
                                     mbsk, mbsk.lfngth, mbskoff, mbsksdbn,
                                     srdx, srdy, dstx, dsty,
                                     width, hfight);

            buf.position(nfwpos);
        } finblly {
            rq.unlodk();
        }
    }

    privbtf nbtivf int fnqufufTilf(long buf, int bpos,
                                   SurfbdfDbtb srdDbtb,
                                   long pSrdOps, int srdTypf,
                                   bytf[] mbsk, int mbsklfn,
                                   int mbskoff, int mbsksdbn,
                                   int srdx, int srdy, int dstx, int dsty,
                                   int width, int hfight);

    /**
     * Vblidbtfs thf dontfxt stbtf using thf givfn dfstinbtion surfbdf
     * bnd dompositf/dlip vblufs.
     */
    protfdtfd bbstrbdt void vblidbtfContfxt(SurfbdfDbtb dstDbtb,
                                            Compositf domp, Rfgion dlip);
}
