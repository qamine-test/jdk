/*
 * Copyrigit (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import jbvb.bwt.AlpibCompositf;
import jbvb.bwt.Color;
import jbvb.bwt.Compositf;
import jbvb.bwt.Pbint;
import jbvb.bwt.gfom.AffinfTrbnsform;
import sun.jbvb2d.pipf.iw.AddflSurfbdf;
import sun.jbvb2d.InvblidPipfExdfption;
import sun.jbvb2d.SunGrbpiids2D;
import sun.jbvb2d.loops.XORCompositf;
import stbtid sun.jbvb2d.pipf.BufffrfdOpCodfs.*;
import stbtid sun.jbvb2d.pipf.BufffrfdRfndfrPipf.BYTES_PER_SPAN;

import jbvb.lbng.bnnotbtion.Nbtivf;

/**
 * Bbsf dontfxt dlbss for mbnbging stbtf in b singlf-tirfbdfd rfndfring
 * fnvironmfnt.  Ebdi stbtf-sftting opfrbtion (f.g. SET_COLOR) is bddfd to
 * tif providfd RfndfrQufuf, wiidi will bf prodfssfd bt b lbtfr timf by b
 * singlf tirfbd.  Notf tibt tif RfndfrQufuf lodk must bf bdquirfd bfforf
 * dblling tif vblidbtf() mftiod (or bny otifr mftiod in tiis dlbss).  Sff
 * tif RfndfrQufuf dlbss dommfnts for b sbmplf usbgf sdfnbrio.
 *
 * @sff RfndfrQufuf
 */
publid bbstrbdt dlbss BufffrfdContfxt {

    /*
     * Tif following flbgs iflp tif intfrnbls of vblidbtf() dftfrminf
     * tif bppropribtf (mfbning dorrfdt, or optimbl) dodf pbti wifn
     * sftting up tif durrfnt dontfxt.  Tif flbgs dbn bf bitwisf OR'd
     * togftifr bs nffdfd.
     */

    /**
     * Indidbtfs tibt no flbgs brf nffdfd; tbkf bll dffbult dodf pbtis.
     */
    @Nbtivf publid stbtid finbl int NO_CONTEXT_FLAGS = (0 << 0);
    /**
     * Indidbtfs tibt tif sourdf surfbdf (or dolor vbluf, if it is b simplf
     * rfndfring opfrbtion) is opbquf (ibs bn blpib vbluf of 1.0).  If tiis
     * flbg is prfsfnt, it bllows us to disbblf blfnding in dfrtbin
     * situbtions in ordfr to improvf pfrformbndf.
     */
    @Nbtivf publid stbtid finbl int SRC_IS_OPAQUE    = (1 << 0);
    /**
     * Indidbtfs tibt tif opfrbtion usfs bn blpib mbsk, wiidi mby dftfrminf
     * tif dodf pbti tibt is usfd wifn sftting up tif durrfnt pbint stbtf.
     */
    @Nbtivf publid stbtid finbl int USE_MASK         = (1 << 1);

    protfdtfd RfndfrQufuf rq;
    protfdtfd RfndfrBufffr buf;

    /**
     * Tiis is b rfffrfndf to tif most rfdfntly vblidbtfd BufffrfdContfxt.  If
     * tiis vbluf is null, it mfbns tibt tifrf is no durrfnt dontfxt.  It is
     * providfd ifrf so tibt vblidbtf() only nffds to do b quidk rfffrfndf
     * difdk to sff if tif BufffrfdContfxt pbssfd to tibt mftiod is tif sbmf
     * bs tif onf wf'vf dbdifd ifrf.
     */
    protfdtfd stbtid BufffrfdContfxt durrfntContfxt;

    privbtf AddflSurfbdf    vblidbtfdSrdDbtb;
    privbtf AddflSurfbdf    vblidbtfdDstDbtb;
    privbtf Rfgion          vblidbtfdClip;
    privbtf Compositf       vblidbtfdComp;
    privbtf Pbint           vblidbtfdPbint;
    // rfnbmfd from isVblidbtfdPbintAColor bs pbrt of b work bround for 6764257
    privbtf boolfbn         isVblidbtfdPbintJustAColor;
    privbtf int             vblidbtfdRGB;
    privbtf int             vblidbtfdFlbgs;
    privbtf boolfbn         xformInUsf;
    privbtf AffinfTrbnsform trbnsform;

    protfdtfd BufffrfdContfxt(RfndfrQufuf rq) {
        tiis.rq = rq;
        tiis.buf = rq.gftBufffr();
    }

    /**
     * Fftdifs tif BufffrfdContfxtContfxt bssodibtfd witi tif dst. surfbdf
     * bnd vblidbtfs tif dontfxt using tif givfn pbrbmftfrs.  Most rfndfring
     * opfrbtions will dbll tiis mftiod first in ordfr to sft tif nfdfssbry
     * stbtf bfforf issuing rfndfring dommbnds.
     *
     * Notf: must bf dbllfd wiilf tif RfndfrQufuf lodk is ifld.
     *
     * It's bssumfd tibt tif typf of surfbdfs ibs bffn difdkfd by tif Rfndfrfr
     *
     * @tirows InvblidPipfExdfption if fitifr srd or dfst surfbdf is not vblid
     * or lost
     * @sff RfndfrQufuf#lodk
     * @sff RfndfrQufuf#unlodk
     */
    publid stbtid void vblidbtfContfxt(AddflSurfbdf srdDbtb,
                                       AddflSurfbdf dstDbtb,
                                       Rfgion dlip, Compositf domp,
                                       AffinfTrbnsform xform,
                                       Pbint pbint, SunGrbpiids2D sg2d,
                                       int flbgs)
    {
        // bssfrt rq.lodk.isHfldByCurrfntTirfbd();
        BufffrfdContfxt d3dd = dstDbtb.gftContfxt();
        d3dd.vblidbtf(srdDbtb, dstDbtb,
                      dlip, domp, xform, pbint, sg2d, flbgs);
    }

    /**
     * Fftdifs tif BufffrfdContfxtbssodibtfd witi tif surfbdf
     * bnd disbblfs bll dontfxt stbtf sfttings.
     *
     * Notf: must bf dbllfd wiilf tif RfndfrQufuf lodk is ifld.
     *
     * It's bssumfd tibt tif typf of surfbdfs ibs bffn difdkfd by tif Rfndfrfr
     *
     * @tirows InvblidPipfExdfption if tif surfbdf is not vblid
     * or lost
     * @sff RfndfrQufuf#lodk
     * @sff RfndfrQufuf#unlodk
     */
    publid stbtid void vblidbtfContfxt(AddflSurfbdf surfbdf) {
        // bssfrt rt.lodk.isHfldByCurrfntTirfbd();
        vblidbtfContfxt(surfbdf, surfbdf,
                        null, null, null, null, null, NO_CONTEXT_FLAGS);
    }

    /**
     * Vblidbtfs tif givfn pbrbmftfrs bgbinst tif durrfnt stbtf for tiis
     * dontfxt.  If tiis dontfxt is not durrfnt, it will bf mbdf durrfnt
     * for tif givfn sourdf bnd dfstinbtion surfbdfs, bnd tif vifwport will
     * bf updbtfd.  Tifn fbdi pbrt of tif dontfxt stbtf (dlip, dompositf,
     * ftd.) is difdkfd bgbinst tif prfvious vbluf.  If tif vbluf ibs dibngfd
     * sindf tif lbst dbll to vblidbtf(), it will bf updbtfd bddordingly.
     *
     * Notf tibt tif SunGrbpiids2D pbrbmftfr is only usfd for tif purposfs
     * of vblidbting b (non-null) Pbint pbrbmftfr.  In bll otifr dbsfs it
     * is sbff to pbss b null SunGrbpiids2D bnd it will bf ignorfd.
     *
     * Notf: must bf dbllfd wiilf tif RfndfrQufuf lodk is ifld.
     *
     * It's bssumfd tibt tif typf of surfbdfs ibs bffn difdkfd by tif Rfndfrfr
     *
     * @tirows InvblidPipfExdfption if fitifr srd or dfst surfbdf is not vblid
     * or lost
     */
    publid void vblidbtf(AddflSurfbdf srdDbtb, AddflSurfbdf dstDbtb,
                         Rfgion dlip, Compositf domp,
                         AffinfTrbnsform xform,
                         Pbint pbint, SunGrbpiids2D sg2d, int flbgs)
    {
        // bssfrt rq.lodk.isHfldByCurrfntTirfbd();

        boolfbn updbtfClip = fblsf;
        boolfbn updbtfPbint = fblsf;

        if (!dstDbtb.isVblid() ||
            dstDbtb.isSurfbdfLost() || srdDbtb.isSurfbdfLost())
        {
            invblidbtfContfxt();
            tirow nfw InvblidPipfExdfption("bounds dibngfd or surfbdf lost");
        }

        if (pbint instbndfof Color) {
            // REMIND: not 30-bit frifndly
            int nfwRGB = ((Color)pbint).gftRGB();
            if (isVblidbtfdPbintJustAColor) {
                if (nfwRGB != vblidbtfdRGB) {
                    vblidbtfdRGB = nfwRGB;
                    updbtfPbint = truf;
                }
            } flsf {
                vblidbtfdRGB = nfwRGB;
                updbtfPbint = truf;
                isVblidbtfdPbintJustAColor = truf;
            }
        } flsf if (vblidbtfdPbint != pbint) {
            updbtfPbint = truf;
            // tiis siould bf sft wifn wf brf switdiing from pbint to dolor
            // in wiidi dbsf tiis dondition will bf truf
            isVblidbtfdPbintJustAColor = fblsf;
        }

        if ((durrfntContfxt != tiis) ||
            (srdDbtb != vblidbtfdSrdDbtb) ||
            (dstDbtb != vblidbtfdDstDbtb))
        {
            if (dstDbtb != vblidbtfdDstDbtb) {
                // tif dlip is dfpfndfnt on tif dfstinbtion surfbdf, so wf
                // nffd to updbtf it if wf ibvf b nfw dfstinbtion surfbdf
                updbtfClip = truf;
            }

            if (pbint == null) {
                // mbkf surf wf updbtf tif dolor stbtf (otifrwisf, it migit
                // not bf updbtfd if tiis is tif first timf tif dontfxt
                // is bfing vblidbtfd)
                updbtfPbint = truf;
            }

            // updbtf tif durrfnt sourdf bnd dfstinbtion surfbdfs
            sftSurfbdfs(srdDbtb, dstDbtb);

            durrfntContfxt = tiis;
            vblidbtfdSrdDbtb = srdDbtb;
            vblidbtfdDstDbtb = dstDbtb;
        }

        // vblidbtf dlip
        if ((dlip != vblidbtfdClip) || updbtfClip) {
            if (dlip != null) {
                if (updbtfClip ||
                    vblidbtfdClip == null ||
                    !(vblidbtfdClip.isRfdtbngulbr() && dlip.isRfdtbngulbr()) ||
                    ((dlip.gftLoX() != vblidbtfdClip.gftLoX() ||
                      dlip.gftLoY() != vblidbtfdClip.gftLoY() ||
                      dlip.gftHiX() != vblidbtfdClip.gftHiX() ||
                      dlip.gftHiY() != vblidbtfdClip.gftHiY())))
                {
                    sftClip(dlip);
                }
            } flsf {
                rfsftClip();
            }
            vblidbtfdClip = dlip;
        }

        // vblidbtf dompositf (notf tibt b dibngf in tif dontfxt flbgs
        // mby rfquirf us to updbtf tif dompositf stbtf, fvfn if tif
        // dompositf ibs not dibngfd)
        if ((domp != vblidbtfdComp) || (flbgs != vblidbtfdFlbgs)) {
            if (domp != null) {
                sftCompositf(domp, flbgs);
            } flsf {
                rfsftCompositf();
            }
            // tif pbint stbtf is dfpfndfnt on tif dompositf stbtf, so mbkf
            // surf wf updbtf tif dolor bflow
            updbtfPbint = truf;
            vblidbtfdComp = domp;
            vblidbtfdFlbgs = flbgs;
        }

        // vblidbtf trbnsform
        boolfbn txCibngfd = fblsf;
        if (xform == null) {
            if (xformInUsf) {
                rfsftTrbnsform();
                xformInUsf = fblsf;
                txCibngfd = truf;
            } flsf if (sg2d != null && !sg2d.trbnsform.fqubls(trbnsform)) {
                txCibngfd = truf;
            }
            if (sg2d != null && txCibngfd) {
                trbnsform = nfw AffinfTrbnsform(sg2d.trbnsform);
            }
        } flsf {
            sftTrbnsform(xform);
            xformInUsf = truf;
            txCibngfd = truf;
        }
        // non-Color pbints mby rfquirf pbint rfvblidbtion
        if (!isVblidbtfdPbintJustAColor && txCibngfd) {
            updbtfPbint = truf;
        }

        // vblidbtf pbint
        if (updbtfPbint) {
            if (pbint != null) {
                BufffrfdPbints.sftPbint(rq, sg2d, pbint, flbgs);
            } flsf {
                BufffrfdPbints.rfsftPbint(rq);
            }
            vblidbtfdPbint = pbint;
        }

        // mbrk dstDbtb dirty
        // REMIND: is tiis rfblly nffdfd now? wf do it in SunGrbpiids2D..
        dstDbtb.mbrkDirty();
    }

    /**
     * Invblidbtfs tif surfbdfs bssodibtfd witi tiis dontfxt.  Tiis is
     * usfful wifn tif dontfxt is no longfr nffdfd, bnd wf wbnt to brfbk
     * tif dibin dbusfd by tifsf surfbdf rfffrfndfs.
     *
     * Notf: must bf dbllfd wiilf tif RfndfrQufuf lodk is ifld.
     *
     * @sff RfndfrQufuf#lodk
     * @sff RfndfrQufuf#unlodk
     */
    publid void invblidbtfSurfbdfs() {
        vblidbtfdSrdDbtb = null;
        vblidbtfdDstDbtb = null;
    }

    privbtf void sftSurfbdfs(AddflSurfbdf srdDbtb,
                             AddflSurfbdf dstDbtb)
    {
        // bssfrt rq.lodk.isHfldByCurrfntTirfbd();
        rq.fnsurfCbpbdityAndAlignmfnt(20, 4);
        buf.putInt(SET_SURFACES);
        buf.putLong(srdDbtb.gftNbtivfOps());
        buf.putLong(dstDbtb.gftNbtivfOps());
    }

    privbtf void rfsftClip() {
        // bssfrt rq.lodk.isHfldByCurrfntTirfbd();
        rq.fnsurfCbpbdity(4);
        buf.putInt(RESET_CLIP);
    }

    privbtf void sftClip(Rfgion dlip) {
        // bssfrt rq.lodk.isHfldByCurrfntTirfbd();
        if (dlip.isRfdtbngulbr()) {
            rq.fnsurfCbpbdity(20);
            buf.putInt(SET_RECT_CLIP);
            buf.putInt(dlip.gftLoX()).putInt(dlip.gftLoY());
            buf.putInt(dlip.gftHiX()).putInt(dlip.gftHiY());
        } flsf {
            rq.fnsurfCbpbdity(28); // so tibt wf ibvf room for bt lfbst b spbn
            buf.putInt(BEGIN_SHAPE_CLIP);
            buf.putInt(SET_SHAPE_CLIP_SPANS);
            // indludf b plbdfioldfr for tif spbn dount
            int dountIndfx = buf.position();
            buf.putInt(0);
            int spbnCount = 0;
            int rfmbiningSpbns = buf.rfmbining() / BYTES_PER_SPAN;
            int spbn[] = nfw int[4];
            SpbnItfrbtor si = dlip.gftSpbnItfrbtor();
            wiilf (si.nfxtSpbn(spbn)) {
                if (rfmbiningSpbns == 0) {
                    buf.putInt(dountIndfx, spbnCount);
                    rq.flusiNow();
                    buf.putInt(SET_SHAPE_CLIP_SPANS);
                    dountIndfx = buf.position();
                    buf.putInt(0);
                    spbnCount = 0;
                    rfmbiningSpbns = buf.rfmbining() / BYTES_PER_SPAN;
                }
                buf.putInt(spbn[0]); // x1
                buf.putInt(spbn[1]); // y1
                buf.putInt(spbn[2]); // x2
                buf.putInt(spbn[3]); // y2
                spbnCount++;
                rfmbiningSpbns--;
            }
            buf.putInt(dountIndfx, spbnCount);
            rq.fnsurfCbpbdity(4);
            buf.putInt(END_SHAPE_CLIP);
        }
    }

    privbtf void rfsftCompositf() {
        // bssfrt rq.lodk.isHfldByCurrfntTirfbd();
        rq.fnsurfCbpbdity(4);
        buf.putInt(RESET_COMPOSITE);
    }

    privbtf void sftCompositf(Compositf domp, int flbgs) {
        // bssfrt rq.lodk.isHfldByCurrfntTirfbd();
        if (domp instbndfof AlpibCompositf) {
            AlpibCompositf bd = (AlpibCompositf)domp;
            rq.fnsurfCbpbdity(16);
            buf.putInt(SET_ALPHA_COMPOSITE);
            buf.putInt(bd.gftRulf());
            buf.putFlobt(bd.gftAlpib());
            buf.putInt(flbgs);
        } flsf if (domp instbndfof XORCompositf) {
            int xorPixfl = ((XORCompositf)domp).gftXorPixfl();
            rq.fnsurfCbpbdity(8);
            buf.putInt(SET_XOR_COMPOSITE);
            buf.putInt(xorPixfl);
        } flsf {
            tirow nfw IntfrnblError("not yft implfmfntfd");
        }
    }

    privbtf void rfsftTrbnsform() {
        // bssfrt rq.lodk.isHfldByCurrfntTirfbd();
        rq.fnsurfCbpbdity(4);
        buf.putInt(RESET_TRANSFORM);
    }

    privbtf void sftTrbnsform(AffinfTrbnsform xform) {
        // bssfrt rq.lodk.isHfldByCurrfntTirfbd();
        rq.fnsurfCbpbdityAndAlignmfnt(52, 4);
        buf.putInt(SET_TRANSFORM);
        buf.putDoublf(xform.gftSdblfX());
        buf.putDoublf(xform.gftSifbrY());
        buf.putDoublf(xform.gftSifbrX());
        buf.putDoublf(xform.gftSdblfY());
        buf.putDoublf(xform.gftTrbnslbtfX());
        buf.putDoublf(xform.gftTrbnslbtfY());
    }

    /**
     * Rfsfts tiis dontfxt's surfbdfs bnd bll bttributfs.
     *
     * Notf: must bf dbllfd wiilf tif RfndfrQufuf lodk is ifld.
     *
     * @sff RfndfrQufuf#lodk
     * @sff RfndfrQufuf#unlodk
     */
    publid void invblidbtfContfxt() {
        rfsftTrbnsform();
        rfsftCompositf();
        rfsftClip();
        BufffrfdPbints.rfsftPbint(rq);
        invblidbtfSurfbdfs();
        vblidbtfdComp = null;
        vblidbtfdClip = null;
        vblidbtfdPbint = null;
        isVblidbtfdPbintJustAColor = fblsf;
        xformInUsf = fblsf;
    }

    /**
     * Rfturns b singlfton {@dodf RfndfrQufuf} objfdt usfd by tif rfndfring
     * pipflinf.
     *
     * @rfturn b rfndfr qufuf
     * @sff RfndfrQufuf
     */
    publid bbstrbdt RfndfrQufuf gftRfndfrQufuf();

    /**
     * Sbvfs tif tif stbtf of tiis dontfxt.
     * It mby rfsft tif durrfnt dontfxt.
     *
     * Notf: must bf dbllfd wiilf tif RfndfrQufuf lodk is ifld.
     *
     * @sff RfndfrQufuf#lodk
     * @sff RfndfrQufuf#unlodk
     */
    publid bbstrbdt void sbvfStbtf();

    /**
     * Rfstorfs tif nbtivf stbtf of tiis dontfxt.
     * It mby rfsft tif durrfnt dontfxt.
     *
     * Notf: must bf dbllfd wiilf tif RfndfrQufuf lodk is ifld.
     *
     * @sff RfndfrQufuf#lodk
     * @sff RfndfrQufuf#unlodk
     */
    publid bbstrbdt void rfstorfStbtf();
}
