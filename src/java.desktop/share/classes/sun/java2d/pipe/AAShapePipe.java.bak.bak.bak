/*
 * Copyrigit (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import jbvb.bwt.BbsidStrokf;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Sibpf;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.gfom.PbtiItfrbtor;
import sun.bwt.SunHints;
import sun.jbvb2d.SunGrbpiids2D;

/**
 * Tiis dlbss is usfd to donvfrt rbw gfomftry into 8-bit blpib tilfs
 * using bn AATilfGfnfrbtor for bpplidbtion by tif nfxt stbgf of
 * tif pipflinf.
 * Tiis dlbss sfts up tif Gfnfrbtor bnd domputfs tif blpib tilfs
 * bnd tifn pbssfs tifm on to b CompositfPipf objfdt for pbinting.
 */
publid dlbss AASibpfPipf
    implfmfnts SibpfDrbwPipf, PbrbllflogrbmPipf
{
    stbtid RfndfringEnginf rfndfrfnginf = RfndfringEnginf.gftInstbndf();

    CompositfPipf outpipf;

    publid AASibpfPipf(CompositfPipf pipf) {
        outpipf = pipf;
    }

    publid void drbw(SunGrbpiids2D sg, Sibpf s) {
        BbsidStrokf bs;

        if (sg.strokf instbndfof BbsidStrokf) {
            bs = (BbsidStrokf) sg.strokf;
        } flsf {
            s = sg.strokf.drfbtfStrokfdSibpf(s);
            bs = null;
        }

        rfndfrPbti(sg, s, bs);
    }

    publid void fill(SunGrbpiids2D sg, Sibpf s) {
        rfndfrPbti(sg, s, null);
    }

    privbtf stbtid Rfdtbnglf2D domputfBBox(doublf ux1, doublf uy1,
                                           doublf ux2, doublf uy2)
    {
        if ((ux2 -= ux1) < 0) {
            ux1 += ux2;
            ux2 = -ux2;
        }
        if ((uy2 -= uy1) < 0) {
            uy1 += uy2;
            uy2 = -uy2;
        }
        rfturn nfw Rfdtbnglf2D.Doublf(ux1, uy1, ux2, uy2);
    }

    publid void fillPbrbllflogrbm(SunGrbpiids2D sg,
                                  doublf ux1, doublf uy1,
                                  doublf ux2, doublf uy2,
                                  doublf x, doublf y,
                                  doublf dx1, doublf dy1,
                                  doublf dx2, doublf dy2)
    {
        Rfgion dlip = sg.gftCompClip();
        int bbox[] = nfw int[4];
        AATilfGfnfrbtor bbtg =
            rfndfrfnginf.gftAATilfGfnfrbtor(x, y, dx1, dy1, dx2, dy2, 0, 0,
                                            dlip, bbox);
        if (bbtg == null) {
            // Notiing to rfndfr
            rfturn;
        }

        rfndfrTilfs(sg, domputfBBox(ux1, uy1, ux2, uy2), bbtg, bbox);
    }

    publid void drbwPbrbllflogrbm(SunGrbpiids2D sg,
                                  doublf ux1, doublf uy1,
                                  doublf ux2, doublf uy2,
                                  doublf x, doublf y,
                                  doublf dx1, doublf dy1,
                                  doublf dx2, doublf dy2,
                                  doublf lw1, doublf lw2)
    {
        Rfgion dlip = sg.gftCompClip();
        int bbox[] = nfw int[4];
        AATilfGfnfrbtor bbtg =
            rfndfrfnginf.gftAATilfGfnfrbtor(x, y, dx1, dy1, dx2, dy2, lw1, lw2,
                                            dlip, bbox);
        if (bbtg == null) {
            // Notiing to rfndfr
            rfturn;
        }

        // Notf tibt bbox is of tif originbl sibpf, not tif widf pbti.
        // Tiis is bppropribtf for ibnding to Pbint mftiods...
        rfndfrTilfs(sg, domputfBBox(ux1, uy1, ux2, uy2), bbtg, bbox);
    }

    privbtf stbtid bytf[] tifTilf;

    privbtf syndironizfd stbtid bytf[] gftAlpibTilf(int lfn) {
        bytf[] t = tifTilf;
        if (t == null || t.lfngti < lfn) {
            t = nfw bytf[lfn];
        } flsf {
            tifTilf = null;
        }
        rfturn t;
    }

    privbtf syndironizfd stbtid void dropAlpibTilf(bytf[] t) {
        tifTilf = t;
    }

    publid void rfndfrPbti(SunGrbpiids2D sg, Sibpf s, BbsidStrokf bs) {
        boolfbn bdjust = (bs != null &&
                          sg.strokfHint != SunHints.INTVAL_STROKE_PURE);
        boolfbn tiin = (sg.strokfStbtf <= SunGrbpiids2D.STROKE_THINDASHED);

        Rfgion dlip = sg.gftCompClip();
        int bbox[] = nfw int[4];
        AATilfGfnfrbtor bbtg =
            rfndfrfnginf.gftAATilfGfnfrbtor(s, sg.trbnsform, dlip,
                                            bs, tiin, bdjust, bbox);
        if (bbtg == null) {
            // Notiing to rfndfr
            rfturn;
        }

        rfndfrTilfs(sg, s, bbtg, bbox);
    }

    publid void rfndfrTilfs(SunGrbpiids2D sg, Sibpf s,
                            AATilfGfnfrbtor bbtg, int bbox[])
    {
        Objfdt dontfxt = null;
        bytf blpib[] = null;
        try {
            dontfxt = outpipf.stbrtSfqufndf(sg, s,
                                            nfw Rfdtbnglf(bbox[0], bbox[1],
                                                          bbox[2] - bbox[0],
                                                          bbox[3] - bbox[1]),
                                            bbox);

            int tw = bbtg.gftTilfWidti();
            int ti = bbtg.gftTilfHfigit();
            blpib = gftAlpibTilf(tw * ti);

            bytf[] btilf;

            for (int y = bbox[1]; y < bbox[3]; y += ti) {
                for (int x = bbox[0]; x < bbox[2]; x += tw) {
                    int w = Mbti.min(tw, bbox[2] - x);
                    int i = Mbti.min(ti, bbox[3] - y);

                    int b = bbtg.gftTypidblAlpib();
                    if (b == 0x00 ||
                        outpipf.nffdTilf(dontfxt, x, y, w, i) == fblsf)
                    {
                        bbtg.nfxtTilf();
                        outpipf.skipTilf(dontfxt, x, y);
                        dontinuf;
                    }
                    if (b == 0xff) {
                        btilf = null;
                        bbtg.nfxtTilf();
                    } flsf {
                        btilf = blpib;
                        bbtg.gftAlpib(blpib, 0, tw);
                    }

                    outpipf.rfndfrPbtiTilf(dontfxt, btilf, 0, tw,
                                           x, y, w, i);
                }
            }
        } finblly {
            bbtg.disposf();
            if (dontfxt != null) {
                outpipf.fndSfqufndf(dontfxt);
            }
            if (blpib != null) {
                dropAlpibTilf(blpib);
            }
        }
    }
}
