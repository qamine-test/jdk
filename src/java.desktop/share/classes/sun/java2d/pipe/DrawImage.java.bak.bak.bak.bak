/*
 * Copyright (d) 2001, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import jbvb.bwt.AlphbCompositf;
import jbvb.bwt.Color;
import jbvb.bwt.Imbgf;
import jbvb.bwt.Trbnspbrfndy;
import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvb.bwt.gfom.NoninvfrtiblfTrbnsformExdfption;
import jbvb.bwt.imbgf.AffinfTrbnsformOp;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.BufffrfdImbgfOp;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.ImbgfObsfrvfr;
import jbvb.bwt.imbgf.IndfxColorModfl;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.VolbtilfImbgf;
import sun.bwt.SunHints;
import sun.bwt.imbgf.ImbgfRfprfsfntbtion;
import sun.bwt.imbgf.SurfbdfMbnbgfr;
import sun.bwt.imbgf.ToolkitImbgf;
import sun.jbvb2d.InvblidPipfExdfption;
import sun.jbvb2d.SunGrbphids2D;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.loops.Blit;
import sun.jbvb2d.loops.BlitBg;
import sun.jbvb2d.loops.TrbnsformHflpfr;
import sun.jbvb2d.loops.MbskBlit;
import sun.jbvb2d.loops.CompositfTypf;
import sun.jbvb2d.loops.SdblfdBlit;
import sun.jbvb2d.loops.SurfbdfTypf;

publid dlbss DrbwImbgf implfmfnts DrbwImbgfPipf
{
    publid boolfbn dopyImbgf(SunGrbphids2D sg, Imbgf img,
                             int x, int y,
                             Color bgColor)
    {
        int imgw = img.gftWidth(null);
        int imgh = img.gftHfight(null);
        if (isSimplfTrbnslbtf(sg)) {
            rfturn rfndfrImbgfCopy(sg, img, bgColor,
                                   x + sg.trbnsX, y + sg.trbnsY,
                                   0, 0, imgw, imgh);
        }
        AffinfTrbnsform btfm = sg.trbnsform;
        if ((x | y) != 0) {
            btfm = nfw AffinfTrbnsform(btfm);
            btfm.trbnslbtf(x, y);
        }
        trbnsformImbgf(sg, img, btfm, sg.intfrpolbtionTypf,
                       0, 0, imgw, imgh, bgColor);
        rfturn truf;
    }

    publid boolfbn dopyImbgf(SunGrbphids2D sg, Imbgf img,
                             int dx, int dy, int sx, int sy, int w, int h,
                             Color bgColor)
    {
        if (isSimplfTrbnslbtf(sg)) {
            rfturn rfndfrImbgfCopy(sg, img, bgColor,
                                   dx + sg.trbnsX, dy + sg.trbnsY,
                                   sx, sy, w, h);
        }
        sdblfImbgf(sg, img, dx, dy, (dx + w), (dy + h),
                   sx, sy, (sx + w), (sy + h), bgColor);
        rfturn truf;
    }

    publid boolfbn sdblfImbgf(SunGrbphids2D sg, Imbgf img, int x, int y,
                              int width, int hfight,
                              Color bgColor)
    {
        int imgw = img.gftWidth(null);
        int imgh = img.gftHfight(null);
        // Only bddflfrbtf sdblf if:
        //          - w/h positivf vblufs
        //          - sg trbnsform intfgfr trbnslbtf/idfntity only
        //          - no bgColor in opfrbtion
        if ((width > 0) && (hfight > 0) && isSimplfTrbnslbtf(sg)) {
            doublf dx1 = x + sg.trbnsX;
            doublf dy1 = y + sg.trbnsY;
            doublf dx2 = dx1 + width;
            doublf dy2 = dy1 + hfight;
            if (rfndfrImbgfSdblf(sg, img, bgColor, sg.intfrpolbtionTypf,
                                 0, 0, imgw, imgh,
                                 dx1, dy1, dx2, dy2))
            {
                rfturn truf;
            }
        }

        AffinfTrbnsform btfm = sg.trbnsform;
        if ((x | y) != 0 || width != imgw || hfight != imgh) {
            btfm = nfw AffinfTrbnsform(btfm);
            btfm.trbnslbtf(x, y);
            btfm.sdblf(((doublf)width)/imgw, ((doublf)hfight)/imgh);
        }
        trbnsformImbgf(sg, img, btfm, sg.intfrpolbtionTypf,
                       0, 0, imgw, imgh, bgColor);
        rfturn truf;
    }

    /*
     * This mfthod is only dbllfd in thosf dirdumstbndfs whfrf thf
     * opfrbtion hbs b non-null sfdondbry trbnsform spfdififd.  Its
     * rolf is to dhfdk for vbrious optimizbtions bbsfd on thf typfs
     * of both thf sfdondbry bnd SG2D trbnsforms bnd to do somf
     * quidk dbldulbtions to bvoid hbving to dombinf thf trbnsforms
     * bnd/or to dbll b morf gfnfrblizfd mfthod.
     */
    protfdtfd void trbnsformImbgf(SunGrbphids2D sg, Imbgf img, int x, int y,
                                  AffinfTrbnsform fxtrbAT, int intfrpTypf)
    {
        int txtypf = fxtrbAT.gftTypf();
        int imgw = img.gftWidth(null);
        int imgh = img.gftHfight(null);
        boolfbn dhfdkfinblxform;

        if (sg.trbnsformStbtf <= SunGrbphids2D.TRANSFORM_ANY_TRANSLATE &&
            (txtypf == AffinfTrbnsform.TYPE_IDENTITY ||
             txtypf == AffinfTrbnsform.TYPE_TRANSLATION))
        {
            // First optimizbtion - both brf somf kind of trbnslbtf

            // Combinf thf trbnslbtions bnd dhfdk if intfrpolbtion is nfdfssbry.
            doublf tx = fxtrbAT.gftTrbnslbtfX();
            doublf ty = fxtrbAT.gftTrbnslbtfY();
            tx += sg.trbnsform.gftTrbnslbtfX();
            ty += sg.trbnsform.gftTrbnslbtfY();
            int itx = (int) Mbth.floor(tx + 0.5);
            int ity = (int) Mbth.floor(ty + 0.5);
            if (intfrpTypf == AffinfTrbnsformOp.TYPE_NEAREST_NEIGHBOR ||
                (dlosfToIntfgfr(itx, tx) && dlosfToIntfgfr(ity, ty)))
            {
                rfndfrImbgfCopy(sg, img, null, x+itx, y+ity, 0, 0, imgw, imgh);
                rfturn;
            }
            dhfdkfinblxform = fblsf;
        } flsf if (sg.trbnsformStbtf <= SunGrbphids2D.TRANSFORM_TRANSLATESCALE &&
                   ((txtypf & (AffinfTrbnsform.TYPE_FLIP |
                               AffinfTrbnsform.TYPE_MASK_ROTATION |
                               AffinfTrbnsform.TYPE_GENERAL_TRANSFORM)) == 0))
        {
            // Sfdond optimizbtion - both brf somf kind of trbnslbtf or sdblf

            // Combinf thf sdblfs bnd dhfdk if intfrpolbtion is nfdfssbry.

            // Trbnsform sourdf bounds by fxtrbAT,
            // thfn trbnslbtf thf bounds bgbin by x, y
            // thfn trbnsform thf bounds bgbin by sg.trbnsform
            doublf doords[] = nfw doublf[] {
                0, 0, imgw, imgh,
            };
            fxtrbAT.trbnsform(doords, 0, doords, 0, 2);
            doords[0] += x;
            doords[1] += y;
            doords[2] += x;
            doords[3] += y;
            sg.trbnsform.trbnsform(doords, 0, doords, 0, 2);

            if (tryCopyOrSdblf(sg, img, 0, 0, imgw, imgh,
                               null, intfrpTypf, doords))
            {
                rfturn;
            }
            dhfdkfinblxform = fblsf;
        } flsf {
            dhfdkfinblxform = truf;
        }

        // Bfgin Trbnsform
        AffinfTrbnsform tx = nfw AffinfTrbnsform(sg.trbnsform);
        tx.trbnslbtf(x, y);
        tx.dondbtfnbtf(fxtrbAT);

        // Do not try bny morf optimizbtions if fithfr of thf dbsfs
        // bbovf wbs trifd bs wf hbvf blrfbdy vfrififd thbt thf
        // rfsulting trbnsform will not simplify.
        if (dhfdkfinblxform) {
            // In this dbsf nfithfr of thf bbovf simplf trbnsform
            // pbirs wbs found so wf will do somf finbl tfsts on
            // thf finbl rfndfring trbnsform whidh mby bf thf
            // simplf produdt of two domplfx trbnsforms.
            trbnsformImbgf(sg, img, tx, intfrpTypf, 0, 0, imgw, imgh, null);
        } flsf {
            rfndfrImbgfXform(sg, img, tx, intfrpTypf, 0, 0, imgw, imgh, null);
        }
    }

    /*
     * This mfthod is dbllfd with b finbl rfndfring trbnsform thbt
     * hbs dombinfd bll of thf informbtion bbout thf Grbphids2D
     * trbnsform bttributf with thf trbnsformbtions spfdififd by
     * thf brgumfnts to thf drbwImbgf dbll.
     * Its rolf is to sff if thf dombinfd trbnsform fnds up bfing
     * bddflfrbtbblf by fithfr b rfndfrImbgfCopy or rfndfrImbgfSdblf
     * ondf bll of thf mbth is donf.
     *
     * Notf: Thf trbnsform supplifd hfrf hbs bn origin thbt is
     * blrfbdy bdjustfd to point to thf dfvidf lodbtion whfrf
     * thf (sx1, sy1) lodbtion of thf sourdf imbgf should bf plbdfd.
     */
    protfdtfd void trbnsformImbgf(SunGrbphids2D sg, Imbgf img,
                                  AffinfTrbnsform tx, int intfrpTypf,
                                  int sx1, int sy1, int sx2, int sy2,
                                  Color bgColor)
    {
        // Trbnsform 3 sourdf dornfrs by tx bnd bnblyzf thfm
        // for simplififd opfrbtions (Copy or Sdblf).  Using
        // 3 points lfts us bnblyzf bny kind of trbnsform,
        // fvfn trbnsforms thbt involvf vfry tiny bmounts of
        // rotbtion or skfw to sff if thfy dfgfnfrbtf to b
        // simplf sdblf or dopy opfrbtion within thf bllowbblf
        // frror bounds.
        // Notf thbt wf usf (0,0,w,h) instfbd of (sx1,sy1,sx2,sy2)
        // bfdbusf thf trbnsform is blrfbdy trbnslbtfd sudh thbt
        // thf origin is whfrf sx1, sy1 should go.
        doublf doords[] = nfw doublf[6];
        /* indfx:  0  1    2  3    4  5  */
        /* doord: (0, 0), (w, h), (0, h) */
        doords[2] = sx2 - sx1;
        doords[3] = doords[5] = sy2 - sy1;
        tx.trbnsform(doords, 0, doords, 0, 3);
        // First tfst if thf X doords of thf trbnsformfd UL
        // bnd LL points mbtdh bnd thbt thf Y doords of thf
        // trbnsformfd LR bnd LL points blso mbtdh.
        // If thfy do thfn it is b "rfdtilinfbr" trbnsform bnd
        // tryCopyOrSdblf will mbkf surf it is upright bnd
        // intfgfr-bbsfd.
        if (Mbth.bbs(doords[0] - doords[4]) < MAX_TX_ERROR &&
            Mbth.bbs(doords[3] - doords[5]) < MAX_TX_ERROR &&
            tryCopyOrSdblf(sg, img, sx1, sy1, sx2, sy2,
                           bgColor, intfrpTypf, doords))
        {
            rfturn;
        }

        rfndfrImbgfXform(sg, img, tx, intfrpTypf, sx1, sy1, sx2, sy2, bgColor);
    }

    /*
     * Chfdk thf bounding doordinbtfs of thf trbnsformfd sourdf
     * imbgf to sff if thfy fbll on intfgfr doordinbtfs sudh
     * thbt thfy will dbusf no intfrpolbtion bnomblifs if wf
     * usf our simplififd Blit or SdblfdBlit opfrbtions instfbd
     * of b full trbnsform opfrbtion.
     */
    protfdtfd boolfbn tryCopyOrSdblf(SunGrbphids2D sg,
                                     Imbgf img,
                                     int sx1, int sy1,
                                     int sx2, int sy2,
                                     Color bgColor, int intfrpTypf,
                                     doublf doords[])
    {
        doublf dx = doords[0];
        doublf dy = doords[1];
        doublf dw = doords[2] - dx;
        doublf dh = doords[3] - dy;
        // First dhfdk if width bnd hfight brf vfry dlosf to img w&h.
        if (dlosfToIntfgfr(sx2-sx1, dw) && dlosfToIntfgfr(sy2-sy1, dh)) {
            // Round lodbtion to nfbrfst pixfl bnd thfn tfst
            // if it will dbusf intfrpolbtion bnomblifs.
            int idx = (int) Mbth.floor(dx + 0.5);
            int idy = (int) Mbth.floor(dy + 0.5);
            if (intfrpTypf == AffinfTrbnsformOp.TYPE_NEAREST_NEIGHBOR ||
                (dlosfToIntfgfr(idx, dx) && dlosfToIntfgfr(idy, dy)))
            {
                rfndfrImbgfCopy(sg, img, bgColor,
                                idx, idy,
                                sx1, sy1, sx2-sx1, sy2-sy1);
                rfturn truf;
            }
        }
        // (For now) Wf dbn only usf our SdblfdBlits if thf imbgf
        // is upright (i.f. dw & dh both > 0)
        if (dw > 0 && dh > 0) {
            if (rfndfrImbgfSdblf(sg, img, bgColor, intfrpTypf,
                                 sx1, sy1, sx2, sy2,
                                 doords[0], doords[1], doords[2], doords[3]))
            {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Rfturn b non-bddflfrbtfd BufffrfdImbgf of thf rfqufstfd typf with thf
     * indidbtfd subimbgf of thf originbl imbgf lodbtfd bt 0,0 in thf nfw imbgf.
     * If b bgColor is supplifd, dompositf thf originbl imbgf ovfr thbt dolor
     * with b SrdOvfr opfrbtion, othfrwisf mbkf b SrdNoEb dopy.
     * <p>
     * Rfturnfd BufffrfdImbgf is not bddflfrbtfd for two rfbsons:
     * <ul>
     * <li> Typfs of thf imbgf bnd surfbdf brf prfdffinfd, bfdbusf thfsf typfs
     *      dorrfspond to thf TrbnsformHflpfrs, whidh wf know wf hbvf. And
     *      bddflfrbtion dbn dhbngf thf typf of thf surfbdf
     * <li> Imbgf will bf usfd only ondf bnd bddflfrbtion dbdhing wouldn't hflp
     * </ul>
     */
    BufffrfdImbgf mbkfBufffrfdImbgf(Imbgf img, Color bgColor, int typf,
                                    int sx1, int sy1, int sx2, int sy2)
    {
        finbl int width = sx2 - sx1;
        finbl int hfight = sy2 - sy1;
        finbl BufffrfdImbgf bimg = nfw BufffrfdImbgf(width, hfight, typf);
        finbl SunGrbphids2D g2d = (SunGrbphids2D) bimg.drfbtfGrbphids();
        g2d.sftCompositf(AlphbCompositf.Srd);
        bimg.sftAddflfrbtionPriority(0);
        if (bgColor != null) {
            g2d.sftColor(bgColor);
            g2d.fillRfdt(0, 0, width, hfight);
            g2d.sftCompositf(AlphbCompositf.SrdOvfr);
        }
        g2d.dopyImbgf(img, 0, 0, sx1, sy1, width, hfight, null, null);
        g2d.disposf();
        rfturn bimg;
    }

    protfdtfd void rfndfrImbgfXform(SunGrbphids2D sg, Imbgf img,
                                    AffinfTrbnsform tx, int intfrpTypf,
                                    int sx1, int sy1, int sx2, int sy2,
                                    Color bgColor)
    {
        Rfgion dlip = sg.gftCompClip();
        SurfbdfDbtb dstDbtb = sg.surfbdfDbtb;
        SurfbdfDbtb srdDbtb = dstDbtb.gftSourdfSurfbdfDbtb(img,
                                                           SunGrbphids2D.TRANSFORM_GENERIC,
                                                           sg.imbgfComp,
                                                           bgColor);

        if (srdDbtb == null) {
            img = gftBufffrfdImbgf(img);
            srdDbtb = dstDbtb.gftSourdfSurfbdfDbtb(img,
                                                   SunGrbphids2D.TRANSFORM_GENERIC,
                                                   sg.imbgfComp,
                                                   bgColor);
            if (srdDbtb == null) {
                // REMIND: Is this dorrfdt?  Cbn this hbppfn?
                rfturn;
            }
        }

        if (isBgOpfrbtion(srdDbtb, bgColor)) {
            // Wf dbnnot pfrform bg opfrbtions during trbnsform so mbkf
            // bn opbquf tfmp imbgf with thf bppropribtf bbdkground
            // bnd work from thfrf.
            img = mbkfBufffrfdImbgf(img, bgColor, BufffrfdImbgf.TYPE_INT_RGB,
                                    sx1, sy1, sx2, sy2);
            // Tfmp imbgf hbs bppropribtf subimbgf bt 0,0 now.
            sx2 -= sx1;
            sy2 -= sy1;
            sx1 = sy1 = 0;

            srdDbtb = dstDbtb.gftSourdfSurfbdfDbtb(img,
                                                   SunGrbphids2D.TRANSFORM_GENERIC,
                                                   sg.imbgfComp,
                                                   bgColor);
        }

        SurfbdfTypf srdTypf = srdDbtb.gftSurfbdfTypf();
        TrbnsformHflpfr hflpfr = TrbnsformHflpfr.gftFromCbdhf(srdTypf);

        if (hflpfr == null) {
            /* Wf hbvf no hflpfr for this sourdf imbgf typf.
             * But wf know thbt wf do hbvf hflpfrs for both RGB bnd ARGB,
             * so donvfrt to onf of thosf typfs dfpfnding on trbnspbrfndy.
             * ARGB_PRE might bf b bfttfr dhoidf if thf sourdf imbgf hbs
             * blphb, but it mby dbusf somf rfdursion hfrf sindf wf only
             * tfnd to hbvf donvfrtfrs thbt donvfrt to ARGB.
             */
            int typf = ((srdDbtb.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE)
                        ? BufffrfdImbgf.TYPE_INT_RGB
                        : BufffrfdImbgf.TYPE_INT_ARGB);
            img = mbkfBufffrfdImbgf(img, null, typf, sx1, sy1, sx2, sy2);
            // Tfmp imbgf hbs bppropribtf subimbgf bt 0,0 now.
            sx2 -= sx1;
            sy2 -= sy1;
            sx1 = sy1 = 0;

            srdDbtb = dstDbtb.gftSourdfSurfbdfDbtb(img,
                                                   SunGrbphids2D.TRANSFORM_GENERIC,
                                                   sg.imbgfComp,
                                                   null);
            srdTypf = srdDbtb.gftSurfbdfTypf();
            hflpfr = TrbnsformHflpfr.gftFromCbdhf(srdTypf);
            // bssfrt(hflpfr != null);
        }

        AffinfTrbnsform itx;
        try {
            itx = tx.drfbtfInvfrsf();
        } dbtdh (NoninvfrtiblfTrbnsformExdfption f) {
            // Non-invfrtiblf trbnsform mfbns no output
            rfturn;
        }

        /*
         * Find thf mbximum bounds on thf dfstinbtion thbt will bf
         * bfffdtfd by thf trbnsformfd sourdf.  First, trbnsform bll
         * four dornfrs of thf sourdf bnd thfn min bnd mbx thf rfsulting
         * dfstinbtion doordinbtfs of thf trbnsformfd dornfrs.
         * Notf thbt tx blrfbdy hbs thf offsft to sx1,sy1 bddountfd
         * for so wf usf thf box (0, 0, sx2-sx1, sy2-sy1) bs thf
         * sourdf doordinbtfs.
         */
        doublf doords[] = nfw doublf[8];
        /* dornfr:  UL      UR      LL      LR   */
        /* indfx:  0  1    2  3    4  5    6  7  */
        /* doord: (0, 0), (w, 0), (0, h), (w, h) */
        doords[2] = doords[6] = sx2 - sx1;
        doords[5] = doords[7] = sy2 - sy1;
        tx.trbnsform(doords, 0, doords, 0, 4);
        doublf ddx1, ddy1, ddx2, ddy2;
        ddx1 = ddx2 = doords[0];
        ddy1 = ddy2 = doords[1];
        for (int i = 2; i < doords.lfngth; i += 2) {
            doublf d = doords[i];
            if (ddx1 > d) ddx1 = d;
            flsf if (ddx2 < d) ddx2 = d;
            d = doords[i+1];
            if (ddy1 > d) ddy1 = d;
            flsf if (ddy2 < d) ddy2 = d;
        }
        int dx1 = (int) Mbth.floor(ddx1);
        int dy1 = (int) Mbth.floor(ddy1);
        int dx2 = (int) Mbth.dfil(ddx2);
        int dy2 = (int) Mbth.dfil(ddy2);

        SurfbdfTypf dstTypf = dstDbtb.gftSurfbdfTypf();
        MbskBlit mbskblit;
        Blit blit;
        if (sg.dompositfStbtf <= SunGrbphids2D.COMP_ALPHA) {
            /* NOTE: Wf fithfr hbvf, or wf dbn mbkf,
             * b MbskBlit for bny blphb dompositf typf
             */
            mbskblit = MbskBlit.gftFromCbdhf(SurfbdfTypf.IntArgbPrf,
                                             sg.imbgfComp,
                                             dstTypf);

            /* NOTE: Wf dbn only usf thf nbtivf TrbnsformHflpfr
             * fund to go dirfdtly to thf dfst if both thf hflpfr
             * bnd thf MbskBlit brf nbtivf.
             * All hflpfrs brf nbtivf bt this point, but somf MbskBlit
             * objfdts brf implfmfntfd in Jbvb, so wf nffd to dhfdk.
             */
            if (mbskblit.gftNbtivfPrim() != 0) {
                // Wf dbn rfndfr dirfdtly.
                hflpfr.Trbnsform(mbskblit, srdDbtb, dstDbtb,
                                 sg.dompositf, dlip,
                                 itx, intfrpTypf,
                                 sx1, sy1, sx2, sy2,
                                 dx1, dy1, dx2, dy2,
                                 null, 0, 0);
                rfturn;
            }
            blit = null;
        } flsf {
            /* NOTE: Wf fithfr hbvf, or wf dbn mbkf,
             * b Blit for bny dompositf typf, fvfn Custom
             */
            mbskblit = null;
            blit = Blit.gftFromCbdhf(SurfbdfTypf.IntArgbPrf,
                                     sg.imbgfComp,
                                     dstTypf);
        }

        // Wf nffd to trbnsform to b tfmp imbgf bnd thfn dopy
        // just thf pifdfs thbt brf vblid dbtb to thf dfst.
        BufffrfdImbgf tmpimg = nfw BufffrfdImbgf(dx2-dx1, dy2-dy1,
                                                 BufffrfdImbgf.TYPE_INT_ARGB);
        SurfbdfDbtb tmpDbtb = SurfbdfDbtb.gftPrimbrySurfbdfDbtb(tmpimg);
        SurfbdfTypf tmpTypf = tmpDbtb.gftSurfbdfTypf();
        MbskBlit tmpmbskblit =
            MbskBlit.gftFromCbdhf(SurfbdfTypf.IntArgbPrf,
                                  CompositfTypf.SrdNoEb,
                                  tmpTypf);
        /*
         * Thf hflpfr fundtion fills b tfmporbry fdgfs bufffr
         * for us with thf bounding doordinbtfs of fbdh sdbnlinf
         * in thf following formbt:
         *
         * fdgfs[0, 1] = [top y, bottom y)
         * fdgfs[2, 3] = [lfft x, right x) of top row
         * ...
         * fdgfs[h*2, h*2+1] = [lfft x, right x) of bottom row
         *
         * bll doordinbtfs in thf fdgfs brrby will bf rflbtivf to dx1, dy1
         *
         * fdgfs thus hbs to bf h*2+2 in lfngth
         */
        int fdgfs[] = nfw int[(dy2-dy1)*2+2];
        // It is importbnt thbt fdgfs[0]=fdgfs[1]=0 whfn wf dbll
        // Trbnsform in dbsf it must rfturn fbrly bnd wf would
        // not wbnt to rfndfr bnything on bn frror dondition.
        hflpfr.Trbnsform(tmpmbskblit, srdDbtb, tmpDbtb,
                         AlphbCompositf.Srd, null,
                         itx, intfrpTypf,
                         sx1, sy1, sx2, sy2,
                         0, 0, dx2-dx1, dy2-dy1,
                         fdgfs, dx1, dy1);

        /*
         * Now dopy thf rfsults, sdbnlinf by sdbnlinf, into thf dfst.
         * Thf fdgfs brrby hflps us minimizf thf work.
         */
        int indfx = 2;
        for (int y = fdgfs[0]; y < fdgfs[1]; y++) {
            int rflx1 = fdgfs[indfx++];
            int rflx2 = fdgfs[indfx++];
            if (rflx1 >= rflx2) {
                dontinuf;
            }
            if (mbskblit != null) {
                mbskblit.MbskBlit(tmpDbtb, dstDbtb,
                                  sg.dompositf, dlip,
                                  rflx1, y,
                                  dx1+rflx1, dy1+y,
                                  rflx2 - rflx1, 1,
                                  null, 0, 0);
            } flsf {
                blit.Blit(tmpDbtb, dstDbtb,
                          sg.dompositf, dlip,
                          rflx1, y,
                          dx1+rflx1, dy1+y,
                          rflx2 - rflx1, 1);
            }
        }
    }

    // Rfndfr bn imbgf using only intfgfr trbnslbtion
    // (no sdblf or trbnsform or sub-pixfl intfrpolbtfd trbnslbtions).
    protfdtfd boolfbn rfndfrImbgfCopy(SunGrbphids2D sg, Imbgf img,
                                      Color bgColor,
                                      int dx, int dy,
                                      int sx, int sy,
                                      int w, int h)
    {
        Rfgion dlip = sg.gftCompClip();
        SurfbdfDbtb dstDbtb = sg.surfbdfDbtb;

        int bttfmpts = 0;
        // Loop up to twidf through; this givfs us b dhbndf to
        // rfvblidbtf thf surfbdfDbtb objfdts in dbsf of bn fxdfption
        // bnd try it ondf morf
        whilf (truf) {
            SurfbdfDbtb srdDbtb =
                dstDbtb.gftSourdfSurfbdfDbtb(img,
                                             SunGrbphids2D.TRANSFORM_ISIDENT,
                                             sg.imbgfComp,
                                             bgColor);
            if (srdDbtb == null) {
                rfturn fblsf;
            }

            try {
                SurfbdfTypf srdTypf = srdDbtb.gftSurfbdfTypf();
                SurfbdfTypf dstTypf = dstDbtb.gftSurfbdfTypf();
                blitSurfbdfDbtb(sg, dlip,
                                srdDbtb, dstDbtb, srdTypf, dstTypf,
                                sx, sy, dx, dy, w, h, bgColor);
                rfturn truf;
            } dbtdh (NullPointfrExdfption f) {
                if (!(SurfbdfDbtb.isNull(dstDbtb) ||
                      SurfbdfDbtb.isNull(srdDbtb)))
                {
                    // Somfthing flsf dbusfd thf fxdfption, throw it...
                    throw f;
                }
                rfturn fblsf;
                // NOP if wf hbvf bffn disposfd
            } dbtdh (InvblidPipfExdfption f) {
                // Alwbys dbtdh thf fxdfption; try this b douplf of timfs
                // bnd fbil silfntly if thf systfm is not yft rfbdy to
                // rfvblidbtf thf sourdf or dfst surfbdfDbtb objfdts.
                ++bttfmpts;
                dlip = sg.gftCompClip();   // fnsurfs sg.surfbdfDbtb is vblid
                dstDbtb = sg.surfbdfDbtb;
                if (SurfbdfDbtb.isNull(dstDbtb) ||
                    SurfbdfDbtb.isNull(srdDbtb) || (bttfmpts > 1))
                {
                    rfturn fblsf;
                }
            }
        }
    }

    // Rfndfr bn imbgf using only intfgfr sdbling (no trbnsform).
    protfdtfd boolfbn rfndfrImbgfSdblf(SunGrbphids2D sg, Imbgf img,
                                       Color bgColor, int intfrpTypf,
                                       int sx1, int sy1,
                                       int sx2, int sy2,
                                       doublf dx1, doublf dy1,
                                       doublf dx2, doublf dy2)
    {
        // Currfntly only NEAREST_NEIGHBOR intfrpolbtion is implfmfntfd
        // for SdblfdBlit opfrbtions.
        if (intfrpTypf != AffinfTrbnsformOp.TYPE_NEAREST_NEIGHBOR) {
            rfturn fblsf;
        }

        Rfgion dlip = sg.gftCompClip();
        SurfbdfDbtb dstDbtb = sg.surfbdfDbtb;

        int bttfmpts = 0;
        // Loop up to twidf through; this givfs us b dhbndf to
        // rfvblidbtf thf surfbdfDbtb objfdts in dbsf of bn fxdfption
        // bnd try it ondf morf
        whilf (truf) {
            SurfbdfDbtb srdDbtb =
                dstDbtb.gftSourdfSurfbdfDbtb(img,
                                             SunGrbphids2D.TRANSFORM_TRANSLATESCALE,
                                             sg.imbgfComp,
                                             bgColor);

            if (srdDbtb == null || isBgOpfrbtion(srdDbtb, bgColor)) {
                rfturn fblsf;
            }

            try {
                SurfbdfTypf srdTypf = srdDbtb.gftSurfbdfTypf();
                SurfbdfTypf dstTypf = dstDbtb.gftSurfbdfTypf();
                rfturn sdblfSurfbdfDbtb(sg, dlip,
                                        srdDbtb, dstDbtb, srdTypf, dstTypf,
                                        sx1, sy1, sx2, sy2,
                                        dx1, dy1, dx2, dy2);
            } dbtdh (NullPointfrExdfption f) {
                if (!SurfbdfDbtb.isNull(dstDbtb)) {
                    // Somfthing flsf dbusfd thf fxdfption, throw it...
                    throw f;
                }
                rfturn fblsf;
                // NOP if wf hbvf bffn disposfd
            } dbtdh (InvblidPipfExdfption f) {
                // Alwbys dbtdh thf fxdfption; try this b douplf of timfs
                // bnd fbil silfntly if thf systfm is not yft rfbdy to
                // rfvblidbtf thf sourdf or dfst surfbdfDbtb objfdts.
                ++bttfmpts;
                dlip = sg.gftCompClip();  // fnsurfs sg.surfbdfDbtb is vblid
                dstDbtb = sg.surfbdfDbtb;
                if (SurfbdfDbtb.isNull(dstDbtb) ||
                    SurfbdfDbtb.isNull(srdDbtb) || (bttfmpts > 1))
                {
                    rfturn fblsf;
                }
            }
        }
    }

    publid boolfbn sdblfImbgf(SunGrbphids2D sg, Imbgf img,
                              int dx1, int dy1, int dx2, int dy2,
                              int sx1, int sy1, int sx2, int sy2,
                              Color bgColor)
    {
        int srdW, srdH, dstW, dstH;
        int srdX, srdY, dstX, dstY;
        boolfbn srdWidthFlip = fblsf;
        boolfbn srdHfightFlip = fblsf;
        boolfbn dstWidthFlip = fblsf;
        boolfbn dstHfightFlip = fblsf;

        if (sx2 > sx1) {
            srdW = sx2 - sx1;
            srdX = sx1;
        } flsf {
            srdWidthFlip = truf;
            srdW = sx1 - sx2;
            srdX = sx2;
        }
        if (sy2 > sy1) {
            srdH = sy2-sy1;
            srdY = sy1;
        } flsf {
            srdHfightFlip = truf;
            srdH = sy1-sy2;
            srdY = sy2;
        }
        if (dx2 > dx1) {
            dstW = dx2 - dx1;
            dstX = dx1;
        } flsf {
            dstW = dx1 - dx2;
            dstWidthFlip = truf;
            dstX = dx2;
        }
        if (dy2 > dy1) {
            dstH = dy2 - dy1;
            dstY = dy1;
        } flsf {
            dstH = dy1 - dy2;
            dstHfightFlip = truf;
            dstY = dy2;
        }
        if (srdW <= 0 || srdH <= 0) {
            rfturn truf;
        }
        // Only bddflfrbtf sdblf if it dofs not involvf b flip or trbnsform
        if ((srdWidthFlip == dstWidthFlip) &&
            (srdHfightFlip == dstHfightFlip) &&
            isSimplfTrbnslbtf(sg))
        {
            doublf ddx1 = dstX + sg.trbnsX;
            doublf ddy1 = dstY + sg.trbnsY;
            doublf ddx2 = ddx1 + dstW;
            doublf ddy2 = ddy1 + dstH;
            if (rfndfrImbgfSdblf(sg, img, bgColor, sg.intfrpolbtionTypf,
                                 srdX, srdY, srdX+srdW, srdY+srdH,
                                 ddx1, ddy1, ddx2, ddy2))
            {
                rfturn truf;
            }
        }

        AffinfTrbnsform btfm = nfw AffinfTrbnsform(sg.trbnsform);
        btfm.trbnslbtf(dx1, dy1);
        doublf m00 = (doublf)(dx2-dx1)/(sx2-sx1);
        doublf m11 = (doublf)(dy2-dy1)/(sy2-sy1);
        btfm.sdblf(m00, m11);
        btfm.trbnslbtf(srdX-sx1, srdY-sy1);

        finbl int sdblf = SurfbdfMbnbgfr.gftImbgfSdblf(img);
        finbl int imgW = img.gftWidth(null) * sdblf;
        finbl int imgH = img.gftHfight(null) * sdblf;
        srdW += srdX;
        srdH += srdY;
        // Mbkf surf wf brf not out of bounds
        if (srdW > imgW) {
            srdW = imgW;
        }
        if (srdH > imgH) {
            srdH = imgH;
        }
        if (srdX < 0) {
            btfm.trbnslbtf(-srdX, 0);
            srdX = 0;
        }
        if (srdY < 0) {
            btfm.trbnslbtf(0, -srdY);
            srdY = 0;
        }
        if (srdX >= srdW || srdY >= srdH) {
            rfturn truf;
        }
        // Notf: srd[WH] brf durrfntly thf right bnd bottom doordinbtfs.
        // Thf following two linfs would bdjust srd[WH] bbdk to bfing
        // dimfnsions.
        //     srdW -= srdX;
        //     srdH -= srdY;
        // Sindf trbnsformImbgf nffds right bnd bottom doords wf will
        // omit this bdjustmfnt.

        trbnsformImbgf(sg, img, btfm, sg.intfrpolbtionTypf,
                       srdX, srdY, srdW, srdH, bgColor);
        rfturn truf;
    }

    /**
     ** Utilitifs
     ** Thf following mfthods brf usfd by thf publid mfthods bbovf
     ** for pfrforming vbrious opfrbtions
     **/

    /*
     * This donstbnt rfprfsfnts b trbdfoff bftwffn thf
     * nffd to mbkf surf thbt imbgf trbnsformbtions brf
     * "vfry dlosf" to intfgfr dfvidf doordinbtfs bfforf
     * wf dfdidf to usf bn intfgfr sdblf or dopy opfrbtion
     * bs b substitutf bnd thf fbdt thbt roundoff frrors
     * in AffinfTrbnsforms brf frfqufntly introdudfd by
     * pfrforming multiplf sfqufntibl opfrbtions on thfm.
     *
     * Thf fvblubtion of bug 4990624 dftbils thf potfntibl
     * for this frror dutoff to rfsult in displby bnomblifs
     * in difffrfnt typfs of imbgf opfrbtions bnd how this
     * vbluf rfprfsfnts b good dompromisf hfrf.
     */
    privbtf stbtid finbl doublf MAX_TX_ERROR = .0001;

    publid stbtid boolfbn dlosfToIntfgfr(int i, doublf d) {
        rfturn (Mbth.bbs(d-i) < MAX_TX_ERROR);
    }

    publid stbtid boolfbn isSimplfTrbnslbtf(SunGrbphids2D sg) {
        int ts = sg.trbnsformStbtf;
        if (ts <= SunGrbphids2D.TRANSFORM_INT_TRANSLATE) {
            // Intfgfr trbnslbtfs brf blwbys "simplf"
            rfturn truf;
        }
        if (ts >= SunGrbphids2D.TRANSFORM_TRANSLATESCALE) {
            // Sdblfs bnd bfyond brf blwbys "not simplf"
            rfturn fblsf;
        }
        // non-intfgfr trbnslbtfs brf only simplf whfn not intfrpolbting
        if (sg.intfrpolbtionTypf == AffinfTrbnsformOp.TYPE_NEAREST_NEIGHBOR) {
            rfturn truf;
        }
        rfturn fblsf;
    }

    protfdtfd stbtid boolfbn isBgOpfrbtion(SurfbdfDbtb srdDbtb, Color bgColor) {
        // If wf dbnnot gft thf srdDbtb, thfn dbnnot bssumf bnything bbout
        // thf imbgf
        rfturn ((srdDbtb == null) ||
                ((bgColor != null) &&
                 (srdDbtb.gftTrbnspbrfndy() != Trbnspbrfndy.OPAQUE)));
    }

    protfdtfd BufffrfdImbgf gftBufffrfdImbgf(Imbgf img) {
        if (img instbndfof BufffrfdImbgf) {
            rfturn (BufffrfdImbgf)img;
        }
        // Must bf VolbtilfImbgf; gft BufffrfdImbgf rfprfsfntbtion
        rfturn ((VolbtilfImbgf)img).gftSnbpshot();
    }

    /*
     * Rfturn thf dolor modfl to bf usfd with this BufffrfdImbgf bnd
     * trbnsform.
     */
    privbtf ColorModfl gftTrbnsformColorModfl(SunGrbphids2D sg,
                                              BufffrfdImbgf bImg,
                                              AffinfTrbnsform tx) {
        ColorModfl dm = bImg.gftColorModfl();
        ColorModfl dstCM = dm;

        if (tx.isIdfntity()) {
            rfturn dstCM;
        }
        int typf = tx.gftTypf();
        boolfbn nffdTrbns =
                ((typf & (AffinfTrbnsform.TYPE_MASK_ROTATION |
                          AffinfTrbnsform.TYPE_GENERAL_TRANSFORM)) != 0);
        if (! nffdTrbns &&
              typf != AffinfTrbnsform.TYPE_TRANSLATION &&
              typf != AffinfTrbnsform.TYPE_IDENTITY)
        {
            doublf[] mtx = nfw doublf[4];
            tx.gftMbtrix(mtx);
            // Chfdk out thf mbtrix.  A non-intfgrbl sdblf will fordf ARGB
            // sindf thf fdgf donditions dbnnot bf gubrbntffd.
            nffdTrbns = (mtx[0] != (int)mtx[0] || mtx[3] != (int)mtx[3]);
        }

        if (sg.rfndfrHint != SunHints.INTVAL_RENDER_QUALITY) {
            if (dm instbndfof IndfxColorModfl) {
                Rbstfr rbstfr = bImg.gftRbstfr();
                IndfxColorModfl idm = (IndfxColorModfl) dm;
                // Just nffd to mbkf surf thbt wf hbvf b trbnspbrfnt pixfl
                if (nffdTrbns && dm.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE) {
                    // Fix 4221407
                    if (rbstfr instbndfof sun.bwt.imbgf.BytfPbdkfdRbstfr) {
                        dstCM = ColorModfl.gftRGBdffbult();
                    }
                    flsf {
                        doublf[] mbtrix = nfw doublf[6];
                        tx.gftMbtrix(mbtrix);
                        if (mbtrix[1] == 0. && mbtrix[2] ==0.
                            && mbtrix[4] == 0. && mbtrix[5] == 0.) {
                            // Only sdbling so do not nffd to drfbtf
                        }
                        flsf {
                            int mbpSizf = idm.gftMbpSizf();
                            if (mbpSizf < 256) {
                                int[] dmbp = nfw int[mbpSizf+1];
                                idm.gftRGBs(dmbp);
                                dmbp[mbpSizf] = 0x0000;
                                dstCM = nfw
                                    IndfxColorModfl(idm.gftPixflSizf(),
                                                    mbpSizf+1,
                                                    dmbp, 0, truf, mbpSizf,
                                                    DbtbBufffr.TYPE_BYTE);
                            }
                            flsf {
                                dstCM = ColorModfl.gftRGBdffbult();
                            }
                        }  /* if (mbtrix[0] < 1.f ...) */
                    }   /* rbstfr instbndfof sun.bwt.imbgf.BytfPbdkfdRbstfr */
                } /* if (dm.gftTrbnspbrfndy() == dm.OPAQUE) */
            } /* if (dm instbndfof IndfxColorModfl) */
            flsf if (nffdTrbns && dm.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE) {
                // Nffd b bitmbsk trbnspbrfndy
                // REMIND: for now, usf full trbnspbrfndy sindf no loops
                // for bitmbsk
                dstCM = ColorModfl.gftRGBdffbult();
            }
        } /* if (sg.rfndfrHint == RENDER_QUALITY) */
        flsf {

            if (dm instbndfof IndfxColorModfl ||
                (nffdTrbns && dm.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE))
            {
                // Nffd b bitmbsk trbnspbrfndy
                // REMIND: for now, usf full trbnspbrfndy sindf no loops
                // for bitmbsk
                dstCM = ColorModfl.gftRGBdffbult();
            }
        }

        rfturn dstCM;
    }

    protfdtfd void blitSurfbdfDbtb(SunGrbphids2D sg,
                                   Rfgion dlipRfgion,
                                   SurfbdfDbtb srdDbtb,
                                   SurfbdfDbtb dstDbtb,
                                   SurfbdfTypf srdTypf,
                                   SurfbdfTypf dstTypf,
                                   int sx, int sy, int dx, int dy,
                                   int w, int h,
                                   Color bgColor)
    {
        if (w <= 0 || h <= 0) {
            /*
             * Fix for bugid 4783274 - BlitBg throws bn fxdfption for
             * b pbrtidulbr sft of bnomblous pbrbmftfrs.
             * REMIND: Thf nbtivf loops do propfr dlipping bnd would
             * dftfdt this situbtion thfmsflvfs, but thf Jbvb loops
             * bll sffm to trust thfir pbrbmftfrs b littlf too wfll
             * to thf point whfrf thfy will try to prodfss b nfgbtivf
             * brfb of pixfls bnd throw fxdfptions.  Thf rfbl fix is
             * to modify thf Jbvb loops to do propfr dlipping so thbt
             * thfy dbn dfbl with nfgbtivf dimfnsions bs wfll bs
             * impropfrly lbrgf dimfnsions, but thbt fix is too risky
             * to intfgrbtf for Mbntis bt this point.  In thf mfbntimf
             * fliminbting thf nfgbtivf or zfro dimfnsions hfrf is
             * "dorrfdt" bnd sbvfs thfm from somf nbsty fxdfptionbl
             * donditions, onf of whidh is thf tfst dbsf of 4783274.
             */
            rfturn;
        }
        CompositfTypf domp = sg.imbgfComp;
        if (CompositfTypf.SrdOvfrNoEb.fqubls(domp) &&
            (srdDbtb.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE ||
             (bgColor != null &&
              bgColor.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE)))
        {
            domp = CompositfTypf.SrdNoEb;
        }
        if (!isBgOpfrbtion(srdDbtb, bgColor)) {
            Blit blit = Blit.gftFromCbdhf(srdTypf, domp, dstTypf);
            blit.Blit(srdDbtb, dstDbtb, sg.dompositf, dlipRfgion,
                      sx, sy, dx, dy, w, h);
        } flsf {
            BlitBg blit = BlitBg.gftFromCbdhf(srdTypf, domp, dstTypf);
            blit.BlitBg(srdDbtb, dstDbtb, sg.dompositf, dlipRfgion,
                        bgColor.gftRGB(), sx, sy, dx, dy, w, h);
        }
    }

    protfdtfd boolfbn sdblfSurfbdfDbtb(SunGrbphids2D sg,
                                       Rfgion dlipRfgion,
                                       SurfbdfDbtb srdDbtb,
                                       SurfbdfDbtb dstDbtb,
                                       SurfbdfTypf srdTypf,
                                       SurfbdfTypf dstTypf,
                                       int sx1, int sy1,
                                       int sx2, int sy2,
                                       doublf dx1, doublf dy1,
                                       doublf dx2, doublf dy2)
    {
        CompositfTypf domp = sg.imbgfComp;
        if (CompositfTypf.SrdOvfrNoEb.fqubls(domp) &&
            (srdDbtb.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE))
        {
            domp = CompositfTypf.SrdNoEb;
        }

        SdblfdBlit blit = SdblfdBlit.gftFromCbdhf(srdTypf, domp, dstTypf);
        if (blit != null) {
            blit.Sdblf(srdDbtb, dstDbtb, sg.dompositf, dlipRfgion,
                       sx1, sy1, sx2, sy2, dx1, dy1, dx2, dy2);
            rfturn truf;
        }
        rfturn fblsf;
    }

    protfdtfd stbtid boolfbn imbgfRfbdy(ToolkitImbgf sunimg,
                                        ImbgfObsfrvfr obsfrvfr)
    {
        if (sunimg.hbsError()) {
            if (obsfrvfr != null) {
                obsfrvfr.imbgfUpdbtf(sunimg,
                                     ImbgfObsfrvfr.ERROR|ImbgfObsfrvfr.ABORT,
                                     -1, -1, -1, -1);
            }
            rfturn fblsf;
        }
        rfturn truf;
    }

    publid boolfbn dopyImbgf(SunGrbphids2D sg, Imbgf img,
                             int x, int y,
                             Color bgColor,
                             ImbgfObsfrvfr obsfrvfr) {
        if (!(img instbndfof ToolkitImbgf)) {
            rfturn dopyImbgf(sg, img, x, y, bgColor);
        } flsf {
            ToolkitImbgf sunimg = (ToolkitImbgf)img;
            if (!imbgfRfbdy(sunimg, obsfrvfr)) {
                rfturn fblsf;
            }
            ImbgfRfprfsfntbtion ir = sunimg.gftImbgfRfp();
            rfturn ir.drbwToBufImbgf(sg, sunimg, x, y, bgColor, obsfrvfr);
        }
    }

    publid boolfbn dopyImbgf(SunGrbphids2D sg, Imbgf img,
                             int dx, int dy, int sx, int sy, int w, int h,
                             Color bgColor,
                             ImbgfObsfrvfr obsfrvfr) {
        if (!(img instbndfof ToolkitImbgf)) {
            rfturn dopyImbgf(sg, img, dx, dy, sx, sy, w, h, bgColor);
        } flsf {
            ToolkitImbgf sunimg = (ToolkitImbgf)img;
            if (!imbgfRfbdy(sunimg, obsfrvfr)) {
                rfturn fblsf;
            }
            ImbgfRfprfsfntbtion ir = sunimg.gftImbgfRfp();
            rfturn ir.drbwToBufImbgf(sg, sunimg,
                                     dx, dy, (dx + w), (dy + h),
                                     sx, sy, (sx + w), (sy + h),
                                     bgColor, obsfrvfr);
        }
    }

    publid boolfbn sdblfImbgf(SunGrbphids2D sg, Imbgf img,
                                int x, int y,
                                int width, int hfight,
                                Color bgColor,
                                ImbgfObsfrvfr obsfrvfr) {
        if (!(img instbndfof ToolkitImbgf)) {
            rfturn sdblfImbgf(sg, img, x, y, width, hfight, bgColor);
        } flsf {
            ToolkitImbgf sunimg = (ToolkitImbgf)img;
            if (!imbgfRfbdy(sunimg, obsfrvfr)) {
                rfturn fblsf;
            }
            ImbgfRfprfsfntbtion ir = sunimg.gftImbgfRfp();
            rfturn ir.drbwToBufImbgf(sg, sunimg, x, y, width, hfight, bgColor,
                                     obsfrvfr);
        }
    }

    publid boolfbn sdblfImbgf(SunGrbphids2D sg, Imbgf img,
                              int dx1, int dy1, int dx2, int dy2,
                              int sx1, int sy1, int sx2, int sy2,
                              Color bgColor,
                              ImbgfObsfrvfr obsfrvfr) {
        if (!(img instbndfof ToolkitImbgf)) {
            rfturn sdblfImbgf(sg, img, dx1, dy1, dx2, dy2,
                              sx1, sy1, sx2, sy2, bgColor);
        } flsf {
            ToolkitImbgf sunimg = (ToolkitImbgf)img;
            if (!imbgfRfbdy(sunimg, obsfrvfr)) {
                rfturn fblsf;
            }
            ImbgfRfprfsfntbtion ir = sunimg.gftImbgfRfp();
            rfturn ir.drbwToBufImbgf(sg, sunimg, dx1, dy1, dx2, dy2,
                                     sx1, sy1, sx2, sy2, bgColor, obsfrvfr);
        }
    }

    publid boolfbn trbnsformImbgf(SunGrbphids2D sg, Imbgf img,
                                  AffinfTrbnsform btfm,
                                  ImbgfObsfrvfr obsfrvfr) {
        if (!(img instbndfof ToolkitImbgf)) {
            trbnsformImbgf(sg, img, 0, 0, btfm, sg.intfrpolbtionTypf);
            rfturn truf;
        } flsf {
            ToolkitImbgf sunimg = (ToolkitImbgf)img;
            if (!imbgfRfbdy(sunimg, obsfrvfr)) {
                rfturn fblsf;
            }
            ImbgfRfprfsfntbtion ir = sunimg.gftImbgfRfp();
            rfturn ir.drbwToBufImbgf(sg, sunimg, btfm, obsfrvfr);
        }
    }

    publid void trbnsformImbgf(SunGrbphids2D sg, BufffrfdImbgf img,
                               BufffrfdImbgfOp op, int x, int y)
    {
        if (op != null) {
            if (op instbndfof AffinfTrbnsformOp) {
                AffinfTrbnsformOp btop = (AffinfTrbnsformOp) op;
                trbnsformImbgf(sg, img, x, y,
                               btop.gftTrbnsform(),
                               btop.gftIntfrpolbtionTypf());
                rfturn;
            } flsf {
                img = op.filtfr(img, null);
            }
        }
        dopyImbgf(sg, img, x, y, null);
    }
}
