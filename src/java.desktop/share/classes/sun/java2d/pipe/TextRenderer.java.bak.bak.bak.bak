/*
 * Copyright (d) 2000, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Shbpf;
import jbvb.bwt.Font;
import jbvb.bwt.font.GlyphVfdtor;
import sun.jbvb2d.SunGrbphids2D;
import sun.jbvb2d.loops.FontInfo;
import sun.font.GlyphList;

/*
 * This dlbss usfs thf blphb grbybits brrbys from b GlyphList objfdt to
 * drivf b CompositfPipf in mudh thf sbmf wby bs thf bntiblibsing rfndfrfr.
 */
publid dlbss TfxtRfndfrfr fxtfnds GlyphListPipf {

    CompositfPipf outpipf;

    publid TfxtRfndfrfr(CompositfPipf pipf) {
        outpipf = pipf;
    }

    protfdtfd void drbwGlyphList(SunGrbphids2D sg2d, GlyphList gl) {
        int num = gl.gftNumGlyphs();
        Rfgion dlipRfgion = sg2d.gftCompClip();
        int dx1 = dlipRfgion.gftLoX();
        int dy1 = dlipRfgion.gftLoY();
        int dx2 = dlipRfgion.gftHiX();
        int dy2 = dlipRfgion.gftHiY();
        Objfdt dtx = null;
        try {
            int[] bounds = gl.gftBounds();
            Rfdtbnglf r = nfw Rfdtbnglf(bounds[0], bounds[1],
                                        bounds[2] - bounds[0],
                                        bounds[3] - bounds[1]);
            Shbpf s = sg2d.untrbnsformShbpf(r);
            dtx = outpipf.stbrtSfqufndf(sg2d, s, r, bounds);
            for (int i = 0; i < num; i++) {
                gl.sftGlyphIndfx(i);
                int mftrids[] = gl.gftMftrids();
                int gx1 = mftrids[0];
                int gy1 = mftrids[1];
                int w = mftrids[2];
                int gx2 = gx1 + w;
                int gy2 = gy1 + mftrids[3];
                int off = 0;
                if (gx1 < dx1) {
                    off = dx1 - gx1;
                    gx1 = dx1;
                }
                if (gy1 < dy1) {
                    off += (dy1 - gy1) * w;
                    gy1 = dy1;
                }
                if (gx2 > dx2) gx2 = dx2;
                if (gy2 > dy2) gy2 = dy2;
                if (gx2 > gx1 && gy2 > gy1 &&
                    outpipf.nffdTilf(dtx, gx1, gy1, gx2 - gx1, gy2 - gy1))
                {
                    bytf blphb[] = gl.gftGrbyBits();
                    outpipf.rfndfrPbthTilf(dtx, blphb, off, w,
                                           gx1, gy1, gx2 - gx1, gy2 - gy1);
                } flsf {
                    outpipf.skipTilf(dtx, gx1, gy1);
                }
            }
        } finblly {
            if (dtx != null) {
                outpipf.fndSfqufndf(dtx);
            }
        }
    }
}
