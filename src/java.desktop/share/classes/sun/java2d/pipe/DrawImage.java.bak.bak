/*
 * Copyrigit (d) 2001, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import jbvb.bwt.AlpibCompositf;
import jbvb.bwt.Color;
import jbvb.bwt.Imbgf;
import jbvb.bwt.Trbnspbrfndy;
import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvb.bwt.gfom.NoninvfrtiblfTrbnsformExdfption;
import jbvb.bwt.imbgf.AffinfTrbnsformOp;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.BufffrfdImbgfOp;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.ImbgfObsfrvfr;
import jbvb.bwt.imbgf.IndfxColorModfl;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.VolbtilfImbgf;
import sun.bwt.SunHints;
import sun.bwt.imbgf.ImbgfRfprfsfntbtion;
import sun.bwt.imbgf.SurfbdfMbnbgfr;
import sun.bwt.imbgf.ToolkitImbgf;
import sun.jbvb2d.InvblidPipfExdfption;
import sun.jbvb2d.SunGrbpiids2D;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.loops.Blit;
import sun.jbvb2d.loops.BlitBg;
import sun.jbvb2d.loops.TrbnsformHflpfr;
import sun.jbvb2d.loops.MbskBlit;
import sun.jbvb2d.loops.CompositfTypf;
import sun.jbvb2d.loops.SdblfdBlit;
import sun.jbvb2d.loops.SurfbdfTypf;

publid dlbss DrbwImbgf implfmfnts DrbwImbgfPipf
{
    publid boolfbn dopyImbgf(SunGrbpiids2D sg, Imbgf img,
                             int x, int y,
                             Color bgColor)
    {
        int imgw = img.gftWidti(null);
        int imgi = img.gftHfigit(null);
        if (isSimplfTrbnslbtf(sg)) {
            rfturn rfndfrImbgfCopy(sg, img, bgColor,
                                   x + sg.trbnsX, y + sg.trbnsY,
                                   0, 0, imgw, imgi);
        }
        AffinfTrbnsform btfm = sg.trbnsform;
        if ((x | y) != 0) {
            btfm = nfw AffinfTrbnsform(btfm);
            btfm.trbnslbtf(x, y);
        }
        trbnsformImbgf(sg, img, btfm, sg.intfrpolbtionTypf,
                       0, 0, imgw, imgi, bgColor);
        rfturn truf;
    }

    publid boolfbn dopyImbgf(SunGrbpiids2D sg, Imbgf img,
                             int dx, int dy, int sx, int sy, int w, int i,
                             Color bgColor)
    {
        if (isSimplfTrbnslbtf(sg)) {
            rfturn rfndfrImbgfCopy(sg, img, bgColor,
                                   dx + sg.trbnsX, dy + sg.trbnsY,
                                   sx, sy, w, i);
        }
        sdblfImbgf(sg, img, dx, dy, (dx + w), (dy + i),
                   sx, sy, (sx + w), (sy + i), bgColor);
        rfturn truf;
    }

    publid boolfbn sdblfImbgf(SunGrbpiids2D sg, Imbgf img, int x, int y,
                              int widti, int ifigit,
                              Color bgColor)
    {
        int imgw = img.gftWidti(null);
        int imgi = img.gftHfigit(null);
        // Only bddflfrbtf sdblf if:
        //          - w/i positivf vblufs
        //          - sg trbnsform intfgfr trbnslbtf/idfntity only
        //          - no bgColor in opfrbtion
        if ((widti > 0) && (ifigit > 0) && isSimplfTrbnslbtf(sg)) {
            doublf dx1 = x + sg.trbnsX;
            doublf dy1 = y + sg.trbnsY;
            doublf dx2 = dx1 + widti;
            doublf dy2 = dy1 + ifigit;
            if (rfndfrImbgfSdblf(sg, img, bgColor, sg.intfrpolbtionTypf,
                                 0, 0, imgw, imgi,
                                 dx1, dy1, dx2, dy2))
            {
                rfturn truf;
            }
        }

        AffinfTrbnsform btfm = sg.trbnsform;
        if ((x | y) != 0 || widti != imgw || ifigit != imgi) {
            btfm = nfw AffinfTrbnsform(btfm);
            btfm.trbnslbtf(x, y);
            btfm.sdblf(((doublf)widti)/imgw, ((doublf)ifigit)/imgi);
        }
        trbnsformImbgf(sg, img, btfm, sg.intfrpolbtionTypf,
                       0, 0, imgw, imgi, bgColor);
        rfturn truf;
    }

    /*
     * Tiis mftiod is only dbllfd in tiosf dirdumstbndfs wifrf tif
     * opfrbtion ibs b non-null sfdondbry trbnsform spfdififd.  Its
     * rolf is to difdk for vbrious optimizbtions bbsfd on tif typfs
     * of boti tif sfdondbry bnd SG2D trbnsforms bnd to do somf
     * quidk dbldulbtions to bvoid ibving to dombinf tif trbnsforms
     * bnd/or to dbll b morf gfnfrblizfd mftiod.
     */
    protfdtfd void trbnsformImbgf(SunGrbpiids2D sg, Imbgf img, int x, int y,
                                  AffinfTrbnsform fxtrbAT, int intfrpTypf)
    {
        int txtypf = fxtrbAT.gftTypf();
        int imgw = img.gftWidti(null);
        int imgi = img.gftHfigit(null);
        boolfbn difdkfinblxform;

        if (sg.trbnsformStbtf <= SunGrbpiids2D.TRANSFORM_ANY_TRANSLATE &&
            (txtypf == AffinfTrbnsform.TYPE_IDENTITY ||
             txtypf == AffinfTrbnsform.TYPE_TRANSLATION))
        {
            // First optimizbtion - boti brf somf kind of trbnslbtf

            // Combinf tif trbnslbtions bnd difdk if intfrpolbtion is nfdfssbry.
            doublf tx = fxtrbAT.gftTrbnslbtfX();
            doublf ty = fxtrbAT.gftTrbnslbtfY();
            tx += sg.trbnsform.gftTrbnslbtfX();
            ty += sg.trbnsform.gftTrbnslbtfY();
            int itx = (int) Mbti.floor(tx + 0.5);
            int ity = (int) Mbti.floor(ty + 0.5);
            if (intfrpTypf == AffinfTrbnsformOp.TYPE_NEAREST_NEIGHBOR ||
                (dlosfToIntfgfr(itx, tx) && dlosfToIntfgfr(ity, ty)))
            {
                rfndfrImbgfCopy(sg, img, null, x+itx, y+ity, 0, 0, imgw, imgi);
                rfturn;
            }
            difdkfinblxform = fblsf;
        } flsf if (sg.trbnsformStbtf <= SunGrbpiids2D.TRANSFORM_TRANSLATESCALE &&
                   ((txtypf & (AffinfTrbnsform.TYPE_FLIP |
                               AffinfTrbnsform.TYPE_MASK_ROTATION |
                               AffinfTrbnsform.TYPE_GENERAL_TRANSFORM)) == 0))
        {
            // Sfdond optimizbtion - boti brf somf kind of trbnslbtf or sdblf

            // Combinf tif sdblfs bnd difdk if intfrpolbtion is nfdfssbry.

            // Trbnsform sourdf bounds by fxtrbAT,
            // tifn trbnslbtf tif bounds bgbin by x, y
            // tifn trbnsform tif bounds bgbin by sg.trbnsform
            doublf doords[] = nfw doublf[] {
                0, 0, imgw, imgi,
            };
            fxtrbAT.trbnsform(doords, 0, doords, 0, 2);
            doords[0] += x;
            doords[1] += y;
            doords[2] += x;
            doords[3] += y;
            sg.trbnsform.trbnsform(doords, 0, doords, 0, 2);

            if (tryCopyOrSdblf(sg, img, 0, 0, imgw, imgi,
                               null, intfrpTypf, doords))
            {
                rfturn;
            }
            difdkfinblxform = fblsf;
        } flsf {
            difdkfinblxform = truf;
        }

        // Bfgin Trbnsform
        AffinfTrbnsform tx = nfw AffinfTrbnsform(sg.trbnsform);
        tx.trbnslbtf(x, y);
        tx.dondbtfnbtf(fxtrbAT);

        // Do not try bny morf optimizbtions if fitifr of tif dbsfs
        // bbovf wbs trifd bs wf ibvf blrfbdy vfrififd tibt tif
        // rfsulting trbnsform will not simplify.
        if (difdkfinblxform) {
            // In tiis dbsf nfitifr of tif bbovf simplf trbnsform
            // pbirs wbs found so wf will do somf finbl tfsts on
            // tif finbl rfndfring trbnsform wiidi mby bf tif
            // simplf produdt of two domplfx trbnsforms.
            trbnsformImbgf(sg, img, tx, intfrpTypf, 0, 0, imgw, imgi, null);
        } flsf {
            rfndfrImbgfXform(sg, img, tx, intfrpTypf, 0, 0, imgw, imgi, null);
        }
    }

    /*
     * Tiis mftiod is dbllfd witi b finbl rfndfring trbnsform tibt
     * ibs dombinfd bll of tif informbtion bbout tif Grbpiids2D
     * trbnsform bttributf witi tif trbnsformbtions spfdififd by
     * tif brgumfnts to tif drbwImbgf dbll.
     * Its rolf is to sff if tif dombinfd trbnsform fnds up bfing
     * bddflfrbtbblf by fitifr b rfndfrImbgfCopy or rfndfrImbgfSdblf
     * ondf bll of tif mbti is donf.
     *
     * Notf: Tif trbnsform supplifd ifrf ibs bn origin tibt is
     * blrfbdy bdjustfd to point to tif dfvidf lodbtion wifrf
     * tif (sx1, sy1) lodbtion of tif sourdf imbgf siould bf plbdfd.
     */
    protfdtfd void trbnsformImbgf(SunGrbpiids2D sg, Imbgf img,
                                  AffinfTrbnsform tx, int intfrpTypf,
                                  int sx1, int sy1, int sx2, int sy2,
                                  Color bgColor)
    {
        // Trbnsform 3 sourdf dornfrs by tx bnd bnblyzf tifm
        // for simplififd opfrbtions (Copy or Sdblf).  Using
        // 3 points lfts us bnblyzf bny kind of trbnsform,
        // fvfn trbnsforms tibt involvf vfry tiny bmounts of
        // rotbtion or skfw to sff if tify dfgfnfrbtf to b
        // simplf sdblf or dopy opfrbtion witiin tif bllowbblf
        // frror bounds.
        // Notf tibt wf usf (0,0,w,i) instfbd of (sx1,sy1,sx2,sy2)
        // bfdbusf tif trbnsform is blrfbdy trbnslbtfd sudi tibt
        // tif origin is wifrf sx1, sy1 siould go.
        doublf doords[] = nfw doublf[6];
        /* indfx:  0  1    2  3    4  5  */
        /* doord: (0, 0), (w, i), (0, i) */
        doords[2] = sx2 - sx1;
        doords[3] = doords[5] = sy2 - sy1;
        tx.trbnsform(doords, 0, doords, 0, 3);
        // First tfst if tif X doords of tif trbnsformfd UL
        // bnd LL points mbtdi bnd tibt tif Y doords of tif
        // trbnsformfd LR bnd LL points blso mbtdi.
        // If tify do tifn it is b "rfdtilinfbr" trbnsform bnd
        // tryCopyOrSdblf will mbkf surf it is uprigit bnd
        // intfgfr-bbsfd.
        if (Mbti.bbs(doords[0] - doords[4]) < MAX_TX_ERROR &&
            Mbti.bbs(doords[3] - doords[5]) < MAX_TX_ERROR &&
            tryCopyOrSdblf(sg, img, sx1, sy1, sx2, sy2,
                           bgColor, intfrpTypf, doords))
        {
            rfturn;
        }

        rfndfrImbgfXform(sg, img, tx, intfrpTypf, sx1, sy1, sx2, sy2, bgColor);
    }

    /*
     * Cifdk tif bounding doordinbtfs of tif trbnsformfd sourdf
     * imbgf to sff if tify fbll on intfgfr doordinbtfs sudi
     * tibt tify will dbusf no intfrpolbtion bnomblifs if wf
     * usf our simplififd Blit or SdblfdBlit opfrbtions instfbd
     * of b full trbnsform opfrbtion.
     */
    protfdtfd boolfbn tryCopyOrSdblf(SunGrbpiids2D sg,
                                     Imbgf img,
                                     int sx1, int sy1,
                                     int sx2, int sy2,
                                     Color bgColor, int intfrpTypf,
                                     doublf doords[])
    {
        doublf dx = doords[0];
        doublf dy = doords[1];
        doublf dw = doords[2] - dx;
        doublf di = doords[3] - dy;
        // First difdk if widti bnd ifigit brf vfry dlosf to img w&i.
        if (dlosfToIntfgfr(sx2-sx1, dw) && dlosfToIntfgfr(sy2-sy1, di)) {
            // Round lodbtion to nfbrfst pixfl bnd tifn tfst
            // if it will dbusf intfrpolbtion bnomblifs.
            int idx = (int) Mbti.floor(dx + 0.5);
            int idy = (int) Mbti.floor(dy + 0.5);
            if (intfrpTypf == AffinfTrbnsformOp.TYPE_NEAREST_NEIGHBOR ||
                (dlosfToIntfgfr(idx, dx) && dlosfToIntfgfr(idy, dy)))
            {
                rfndfrImbgfCopy(sg, img, bgColor,
                                idx, idy,
                                sx1, sy1, sx2-sx1, sy2-sy1);
                rfturn truf;
            }
        }
        // (For now) Wf dbn only usf our SdblfdBlits if tif imbgf
        // is uprigit (i.f. dw & di boti > 0)
        if (dw > 0 && di > 0) {
            if (rfndfrImbgfSdblf(sg, img, bgColor, intfrpTypf,
                                 sx1, sy1, sx2, sy2,
                                 doords[0], doords[1], doords[2], doords[3]))
            {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Rfturn b non-bddflfrbtfd BufffrfdImbgf of tif rfqufstfd typf witi tif
     * indidbtfd subimbgf of tif originbl imbgf lodbtfd bt 0,0 in tif nfw imbgf.
     * If b bgColor is supplifd, dompositf tif originbl imbgf ovfr tibt dolor
     * witi b SrdOvfr opfrbtion, otifrwisf mbkf b SrdNoEb dopy.
     * <p>
     * Rfturnfd BufffrfdImbgf is not bddflfrbtfd for two rfbsons:
     * <ul>
     * <li> Typfs of tif imbgf bnd surfbdf brf prfdffinfd, bfdbusf tifsf typfs
     *      dorrfspond to tif TrbnsformHflpfrs, wiidi wf know wf ibvf. And
     *      bddflfrbtion dbn dibngf tif typf of tif surfbdf
     * <li> Imbgf will bf usfd only ondf bnd bddflfrbtion dbdiing wouldn't iflp
     * </ul>
     */
    BufffrfdImbgf mbkfBufffrfdImbgf(Imbgf img, Color bgColor, int typf,
                                    int sx1, int sy1, int sx2, int sy2)
    {
        finbl int widti = sx2 - sx1;
        finbl int ifigit = sy2 - sy1;
        finbl BufffrfdImbgf bimg = nfw BufffrfdImbgf(widti, ifigit, typf);
        finbl SunGrbpiids2D g2d = (SunGrbpiids2D) bimg.drfbtfGrbpiids();
        g2d.sftCompositf(AlpibCompositf.Srd);
        bimg.sftAddflfrbtionPriority(0);
        if (bgColor != null) {
            g2d.sftColor(bgColor);
            g2d.fillRfdt(0, 0, widti, ifigit);
            g2d.sftCompositf(AlpibCompositf.SrdOvfr);
        }
        g2d.dopyImbgf(img, 0, 0, sx1, sy1, widti, ifigit, null, null);
        g2d.disposf();
        rfturn bimg;
    }

    protfdtfd void rfndfrImbgfXform(SunGrbpiids2D sg, Imbgf img,
                                    AffinfTrbnsform tx, int intfrpTypf,
                                    int sx1, int sy1, int sx2, int sy2,
                                    Color bgColor)
    {
        Rfgion dlip = sg.gftCompClip();
        SurfbdfDbtb dstDbtb = sg.surfbdfDbtb;
        SurfbdfDbtb srdDbtb = dstDbtb.gftSourdfSurfbdfDbtb(img,
                                                           SunGrbpiids2D.TRANSFORM_GENERIC,
                                                           sg.imbgfComp,
                                                           bgColor);

        if (srdDbtb == null) {
            img = gftBufffrfdImbgf(img);
            srdDbtb = dstDbtb.gftSourdfSurfbdfDbtb(img,
                                                   SunGrbpiids2D.TRANSFORM_GENERIC,
                                                   sg.imbgfComp,
                                                   bgColor);
            if (srdDbtb == null) {
                // REMIND: Is tiis dorrfdt?  Cbn tiis ibppfn?
                rfturn;
            }
        }

        if (isBgOpfrbtion(srdDbtb, bgColor)) {
            // Wf dbnnot pfrform bg opfrbtions during trbnsform so mbkf
            // bn opbquf tfmp imbgf witi tif bppropribtf bbdkground
            // bnd work from tifrf.
            img = mbkfBufffrfdImbgf(img, bgColor, BufffrfdImbgf.TYPE_INT_RGB,
                                    sx1, sy1, sx2, sy2);
            // Tfmp imbgf ibs bppropribtf subimbgf bt 0,0 now.
            sx2 -= sx1;
            sy2 -= sy1;
            sx1 = sy1 = 0;

            srdDbtb = dstDbtb.gftSourdfSurfbdfDbtb(img,
                                                   SunGrbpiids2D.TRANSFORM_GENERIC,
                                                   sg.imbgfComp,
                                                   bgColor);
        }

        SurfbdfTypf srdTypf = srdDbtb.gftSurfbdfTypf();
        TrbnsformHflpfr iflpfr = TrbnsformHflpfr.gftFromCbdif(srdTypf);

        if (iflpfr == null) {
            /* Wf ibvf no iflpfr for tiis sourdf imbgf typf.
             * But wf know tibt wf do ibvf iflpfrs for boti RGB bnd ARGB,
             * so donvfrt to onf of tiosf typfs dfpfnding on trbnspbrfndy.
             * ARGB_PRE migit bf b bfttfr dioidf if tif sourdf imbgf ibs
             * blpib, but it mby dbusf somf rfdursion ifrf sindf wf only
             * tfnd to ibvf donvfrtfrs tibt donvfrt to ARGB.
             */
            int typf = ((srdDbtb.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE)
                        ? BufffrfdImbgf.TYPE_INT_RGB
                        : BufffrfdImbgf.TYPE_INT_ARGB);
            img = mbkfBufffrfdImbgf(img, null, typf, sx1, sy1, sx2, sy2);
            // Tfmp imbgf ibs bppropribtf subimbgf bt 0,0 now.
            sx2 -= sx1;
            sy2 -= sy1;
            sx1 = sy1 = 0;

            srdDbtb = dstDbtb.gftSourdfSurfbdfDbtb(img,
                                                   SunGrbpiids2D.TRANSFORM_GENERIC,
                                                   sg.imbgfComp,
                                                   null);
            srdTypf = srdDbtb.gftSurfbdfTypf();
            iflpfr = TrbnsformHflpfr.gftFromCbdif(srdTypf);
            // bssfrt(iflpfr != null);
        }

        AffinfTrbnsform itx;
        try {
            itx = tx.drfbtfInvfrsf();
        } dbtdi (NoninvfrtiblfTrbnsformExdfption f) {
            // Non-invfrtiblf trbnsform mfbns no output
            rfturn;
        }

        /*
         * Find tif mbximum bounds on tif dfstinbtion tibt will bf
         * bfffdtfd by tif trbnsformfd sourdf.  First, trbnsform bll
         * four dornfrs of tif sourdf bnd tifn min bnd mbx tif rfsulting
         * dfstinbtion doordinbtfs of tif trbnsformfd dornfrs.
         * Notf tibt tx blrfbdy ibs tif offsft to sx1,sy1 bddountfd
         * for so wf usf tif box (0, 0, sx2-sx1, sy2-sy1) bs tif
         * sourdf doordinbtfs.
         */
        doublf doords[] = nfw doublf[8];
        /* dornfr:  UL      UR      LL      LR   */
        /* indfx:  0  1    2  3    4  5    6  7  */
        /* doord: (0, 0), (w, 0), (0, i), (w, i) */
        doords[2] = doords[6] = sx2 - sx1;
        doords[5] = doords[7] = sy2 - sy1;
        tx.trbnsform(doords, 0, doords, 0, 4);
        doublf ddx1, ddy1, ddx2, ddy2;
        ddx1 = ddx2 = doords[0];
        ddy1 = ddy2 = doords[1];
        for (int i = 2; i < doords.lfngti; i += 2) {
            doublf d = doords[i];
            if (ddx1 > d) ddx1 = d;
            flsf if (ddx2 < d) ddx2 = d;
            d = doords[i+1];
            if (ddy1 > d) ddy1 = d;
            flsf if (ddy2 < d) ddy2 = d;
        }
        int dx1 = (int) Mbti.floor(ddx1);
        int dy1 = (int) Mbti.floor(ddy1);
        int dx2 = (int) Mbti.dfil(ddx2);
        int dy2 = (int) Mbti.dfil(ddy2);

        SurfbdfTypf dstTypf = dstDbtb.gftSurfbdfTypf();
        MbskBlit mbskblit;
        Blit blit;
        if (sg.dompositfStbtf <= SunGrbpiids2D.COMP_ALPHA) {
            /* NOTE: Wf fitifr ibvf, or wf dbn mbkf,
             * b MbskBlit for bny blpib dompositf typf
             */
            mbskblit = MbskBlit.gftFromCbdif(SurfbdfTypf.IntArgbPrf,
                                             sg.imbgfComp,
                                             dstTypf);

            /* NOTE: Wf dbn only usf tif nbtivf TrbnsformHflpfr
             * fund to go dirfdtly to tif dfst if boti tif iflpfr
             * bnd tif MbskBlit brf nbtivf.
             * All iflpfrs brf nbtivf bt tiis point, but somf MbskBlit
             * objfdts brf implfmfntfd in Jbvb, so wf nffd to difdk.
             */
            if (mbskblit.gftNbtivfPrim() != 0) {
                // Wf dbn rfndfr dirfdtly.
                iflpfr.Trbnsform(mbskblit, srdDbtb, dstDbtb,
                                 sg.dompositf, dlip,
                                 itx, intfrpTypf,
                                 sx1, sy1, sx2, sy2,
                                 dx1, dy1, dx2, dy2,
                                 null, 0, 0);
                rfturn;
            }
            blit = null;
        } flsf {
            /* NOTE: Wf fitifr ibvf, or wf dbn mbkf,
             * b Blit for bny dompositf typf, fvfn Custom
             */
            mbskblit = null;
            blit = Blit.gftFromCbdif(SurfbdfTypf.IntArgbPrf,
                                     sg.imbgfComp,
                                     dstTypf);
        }

        // Wf nffd to trbnsform to b tfmp imbgf bnd tifn dopy
        // just tif pifdfs tibt brf vblid dbtb to tif dfst.
        BufffrfdImbgf tmpimg = nfw BufffrfdImbgf(dx2-dx1, dy2-dy1,
                                                 BufffrfdImbgf.TYPE_INT_ARGB);
        SurfbdfDbtb tmpDbtb = SurfbdfDbtb.gftPrimbrySurfbdfDbtb(tmpimg);
        SurfbdfTypf tmpTypf = tmpDbtb.gftSurfbdfTypf();
        MbskBlit tmpmbskblit =
            MbskBlit.gftFromCbdif(SurfbdfTypf.IntArgbPrf,
                                  CompositfTypf.SrdNoEb,
                                  tmpTypf);
        /*
         * Tif iflpfr fundtion fills b tfmporbry fdgfs bufffr
         * for us witi tif bounding doordinbtfs of fbdi sdbnlinf
         * in tif following formbt:
         *
         * fdgfs[0, 1] = [top y, bottom y)
         * fdgfs[2, 3] = [lfft x, rigit x) of top row
         * ...
         * fdgfs[i*2, i*2+1] = [lfft x, rigit x) of bottom row
         *
         * bll doordinbtfs in tif fdgfs brrby will bf rflbtivf to dx1, dy1
         *
         * fdgfs tius ibs to bf i*2+2 in lfngti
         */
        int fdgfs[] = nfw int[(dy2-dy1)*2+2];
        // It is importbnt tibt fdgfs[0]=fdgfs[1]=0 wifn wf dbll
        // Trbnsform in dbsf it must rfturn fbrly bnd wf would
        // not wbnt to rfndfr bnytiing on bn frror dondition.
        iflpfr.Trbnsform(tmpmbskblit, srdDbtb, tmpDbtb,
                         AlpibCompositf.Srd, null,
                         itx, intfrpTypf,
                         sx1, sy1, sx2, sy2,
                         0, 0, dx2-dx1, dy2-dy1,
                         fdgfs, dx1, dy1);

        /*
         * Now dopy tif rfsults, sdbnlinf by sdbnlinf, into tif dfst.
         * Tif fdgfs brrby iflps us minimizf tif work.
         */
        int indfx = 2;
        for (int y = fdgfs[0]; y < fdgfs[1]; y++) {
            int rflx1 = fdgfs[indfx++];
            int rflx2 = fdgfs[indfx++];
            if (rflx1 >= rflx2) {
                dontinuf;
            }
            if (mbskblit != null) {
                mbskblit.MbskBlit(tmpDbtb, dstDbtb,
                                  sg.dompositf, dlip,
                                  rflx1, y,
                                  dx1+rflx1, dy1+y,
                                  rflx2 - rflx1, 1,
                                  null, 0, 0);
            } flsf {
                blit.Blit(tmpDbtb, dstDbtb,
                          sg.dompositf, dlip,
                          rflx1, y,
                          dx1+rflx1, dy1+y,
                          rflx2 - rflx1, 1);
            }
        }
    }

    // Rfndfr bn imbgf using only intfgfr trbnslbtion
    // (no sdblf or trbnsform or sub-pixfl intfrpolbtfd trbnslbtions).
    protfdtfd boolfbn rfndfrImbgfCopy(SunGrbpiids2D sg, Imbgf img,
                                      Color bgColor,
                                      int dx, int dy,
                                      int sx, int sy,
                                      int w, int i)
    {
        Rfgion dlip = sg.gftCompClip();
        SurfbdfDbtb dstDbtb = sg.surfbdfDbtb;

        int bttfmpts = 0;
        // Loop up to twidf tirougi; tiis givfs us b dibndf to
        // rfvblidbtf tif surfbdfDbtb objfdts in dbsf of bn fxdfption
        // bnd try it ondf morf
        wiilf (truf) {
            SurfbdfDbtb srdDbtb =
                dstDbtb.gftSourdfSurfbdfDbtb(img,
                                             SunGrbpiids2D.TRANSFORM_ISIDENT,
                                             sg.imbgfComp,
                                             bgColor);
            if (srdDbtb == null) {
                rfturn fblsf;
            }

            try {
                SurfbdfTypf srdTypf = srdDbtb.gftSurfbdfTypf();
                SurfbdfTypf dstTypf = dstDbtb.gftSurfbdfTypf();
                blitSurfbdfDbtb(sg, dlip,
                                srdDbtb, dstDbtb, srdTypf, dstTypf,
                                sx, sy, dx, dy, w, i, bgColor);
                rfturn truf;
            } dbtdi (NullPointfrExdfption f) {
                if (!(SurfbdfDbtb.isNull(dstDbtb) ||
                      SurfbdfDbtb.isNull(srdDbtb)))
                {
                    // Somftiing flsf dbusfd tif fxdfption, tirow it...
                    tirow f;
                }
                rfturn fblsf;
                // NOP if wf ibvf bffn disposfd
            } dbtdi (InvblidPipfExdfption f) {
                // Alwbys dbtdi tif fxdfption; try tiis b douplf of timfs
                // bnd fbil silfntly if tif systfm is not yft rfbdy to
                // rfvblidbtf tif sourdf or dfst surfbdfDbtb objfdts.
                ++bttfmpts;
                dlip = sg.gftCompClip();   // fnsurfs sg.surfbdfDbtb is vblid
                dstDbtb = sg.surfbdfDbtb;
                if (SurfbdfDbtb.isNull(dstDbtb) ||
                    SurfbdfDbtb.isNull(srdDbtb) || (bttfmpts > 1))
                {
                    rfturn fblsf;
                }
            }
        }
    }

    // Rfndfr bn imbgf using only intfgfr sdbling (no trbnsform).
    protfdtfd boolfbn rfndfrImbgfSdblf(SunGrbpiids2D sg, Imbgf img,
                                       Color bgColor, int intfrpTypf,
                                       int sx1, int sy1,
                                       int sx2, int sy2,
                                       doublf dx1, doublf dy1,
                                       doublf dx2, doublf dy2)
    {
        // Currfntly only NEAREST_NEIGHBOR intfrpolbtion is implfmfntfd
        // for SdblfdBlit opfrbtions.
        if (intfrpTypf != AffinfTrbnsformOp.TYPE_NEAREST_NEIGHBOR) {
            rfturn fblsf;
        }

        Rfgion dlip = sg.gftCompClip();
        SurfbdfDbtb dstDbtb = sg.surfbdfDbtb;

        int bttfmpts = 0;
        // Loop up to twidf tirougi; tiis givfs us b dibndf to
        // rfvblidbtf tif surfbdfDbtb objfdts in dbsf of bn fxdfption
        // bnd try it ondf morf
        wiilf (truf) {
            SurfbdfDbtb srdDbtb =
                dstDbtb.gftSourdfSurfbdfDbtb(img,
                                             SunGrbpiids2D.TRANSFORM_TRANSLATESCALE,
                                             sg.imbgfComp,
                                             bgColor);

            if (srdDbtb == null || isBgOpfrbtion(srdDbtb, bgColor)) {
                rfturn fblsf;
            }

            try {
                SurfbdfTypf srdTypf = srdDbtb.gftSurfbdfTypf();
                SurfbdfTypf dstTypf = dstDbtb.gftSurfbdfTypf();
                rfturn sdblfSurfbdfDbtb(sg, dlip,
                                        srdDbtb, dstDbtb, srdTypf, dstTypf,
                                        sx1, sy1, sx2, sy2,
                                        dx1, dy1, dx2, dy2);
            } dbtdi (NullPointfrExdfption f) {
                if (!SurfbdfDbtb.isNull(dstDbtb)) {
                    // Somftiing flsf dbusfd tif fxdfption, tirow it...
                    tirow f;
                }
                rfturn fblsf;
                // NOP if wf ibvf bffn disposfd
            } dbtdi (InvblidPipfExdfption f) {
                // Alwbys dbtdi tif fxdfption; try tiis b douplf of timfs
                // bnd fbil silfntly if tif systfm is not yft rfbdy to
                // rfvblidbtf tif sourdf or dfst surfbdfDbtb objfdts.
                ++bttfmpts;
                dlip = sg.gftCompClip();  // fnsurfs sg.surfbdfDbtb is vblid
                dstDbtb = sg.surfbdfDbtb;
                if (SurfbdfDbtb.isNull(dstDbtb) ||
                    SurfbdfDbtb.isNull(srdDbtb) || (bttfmpts > 1))
                {
                    rfturn fblsf;
                }
            }
        }
    }

    publid boolfbn sdblfImbgf(SunGrbpiids2D sg, Imbgf img,
                              int dx1, int dy1, int dx2, int dy2,
                              int sx1, int sy1, int sx2, int sy2,
                              Color bgColor)
    {
        int srdW, srdH, dstW, dstH;
        int srdX, srdY, dstX, dstY;
        boolfbn srdWidtiFlip = fblsf;
        boolfbn srdHfigitFlip = fblsf;
        boolfbn dstWidtiFlip = fblsf;
        boolfbn dstHfigitFlip = fblsf;

        if (sx2 > sx1) {
            srdW = sx2 - sx1;
            srdX = sx1;
        } flsf {
            srdWidtiFlip = truf;
            srdW = sx1 - sx2;
            srdX = sx2;
        }
        if (sy2 > sy1) {
            srdH = sy2-sy1;
            srdY = sy1;
        } flsf {
            srdHfigitFlip = truf;
            srdH = sy1-sy2;
            srdY = sy2;
        }
        if (dx2 > dx1) {
            dstW = dx2 - dx1;
            dstX = dx1;
        } flsf {
            dstW = dx1 - dx2;
            dstWidtiFlip = truf;
            dstX = dx2;
        }
        if (dy2 > dy1) {
            dstH = dy2 - dy1;
            dstY = dy1;
        } flsf {
            dstH = dy1 - dy2;
            dstHfigitFlip = truf;
            dstY = dy2;
        }
        if (srdW <= 0 || srdH <= 0) {
            rfturn truf;
        }
        // Only bddflfrbtf sdblf if it dofs not involvf b flip or trbnsform
        if ((srdWidtiFlip == dstWidtiFlip) &&
            (srdHfigitFlip == dstHfigitFlip) &&
            isSimplfTrbnslbtf(sg))
        {
            doublf ddx1 = dstX + sg.trbnsX;
            doublf ddy1 = dstY + sg.trbnsY;
            doublf ddx2 = ddx1 + dstW;
            doublf ddy2 = ddy1 + dstH;
            if (rfndfrImbgfSdblf(sg, img, bgColor, sg.intfrpolbtionTypf,
                                 srdX, srdY, srdX+srdW, srdY+srdH,
                                 ddx1, ddy1, ddx2, ddy2))
            {
                rfturn truf;
            }
        }

        AffinfTrbnsform btfm = nfw AffinfTrbnsform(sg.trbnsform);
        btfm.trbnslbtf(dx1, dy1);
        doublf m00 = (doublf)(dx2-dx1)/(sx2-sx1);
        doublf m11 = (doublf)(dy2-dy1)/(sy2-sy1);
        btfm.sdblf(m00, m11);
        btfm.trbnslbtf(srdX-sx1, srdY-sy1);

        finbl int sdblf = SurfbdfMbnbgfr.gftImbgfSdblf(img);
        finbl int imgW = img.gftWidti(null) * sdblf;
        finbl int imgH = img.gftHfigit(null) * sdblf;
        srdW += srdX;
        srdH += srdY;
        // Mbkf surf wf brf not out of bounds
        if (srdW > imgW) {
            srdW = imgW;
        }
        if (srdH > imgH) {
            srdH = imgH;
        }
        if (srdX < 0) {
            btfm.trbnslbtf(-srdX, 0);
            srdX = 0;
        }
        if (srdY < 0) {
            btfm.trbnslbtf(0, -srdY);
            srdY = 0;
        }
        if (srdX >= srdW || srdY >= srdH) {
            rfturn truf;
        }
        // Notf: srd[WH] brf durrfntly tif rigit bnd bottom doordinbtfs.
        // Tif following two linfs would bdjust srd[WH] bbdk to bfing
        // dimfnsions.
        //     srdW -= srdX;
        //     srdH -= srdY;
        // Sindf trbnsformImbgf nffds rigit bnd bottom doords wf will
        // omit tiis bdjustmfnt.

        trbnsformImbgf(sg, img, btfm, sg.intfrpolbtionTypf,
                       srdX, srdY, srdW, srdH, bgColor);
        rfturn truf;
    }

    /**
     ** Utilitifs
     ** Tif following mftiods brf usfd by tif publid mftiods bbovf
     ** for pfrforming vbrious opfrbtions
     **/

    /*
     * Tiis donstbnt rfprfsfnts b trbdfoff bftwffn tif
     * nffd to mbkf surf tibt imbgf trbnsformbtions brf
     * "vfry dlosf" to intfgfr dfvidf doordinbtfs bfforf
     * wf dfdidf to usf bn intfgfr sdblf or dopy opfrbtion
     * bs b substitutf bnd tif fbdt tibt roundoff frrors
     * in AffinfTrbnsforms brf frfqufntly introdudfd by
     * pfrforming multiplf sfqufntibl opfrbtions on tifm.
     *
     * Tif fvblubtion of bug 4990624 dftbils tif potfntibl
     * for tiis frror dutoff to rfsult in displby bnomblifs
     * in difffrfnt typfs of imbgf opfrbtions bnd iow tiis
     * vbluf rfprfsfnts b good dompromisf ifrf.
     */
    privbtf stbtid finbl doublf MAX_TX_ERROR = .0001;

    publid stbtid boolfbn dlosfToIntfgfr(int i, doublf d) {
        rfturn (Mbti.bbs(d-i) < MAX_TX_ERROR);
    }

    publid stbtid boolfbn isSimplfTrbnslbtf(SunGrbpiids2D sg) {
        int ts = sg.trbnsformStbtf;
        if (ts <= SunGrbpiids2D.TRANSFORM_INT_TRANSLATE) {
            // Intfgfr trbnslbtfs brf blwbys "simplf"
            rfturn truf;
        }
        if (ts >= SunGrbpiids2D.TRANSFORM_TRANSLATESCALE) {
            // Sdblfs bnd bfyond brf blwbys "not simplf"
            rfturn fblsf;
        }
        // non-intfgfr trbnslbtfs brf only simplf wifn not intfrpolbting
        if (sg.intfrpolbtionTypf == AffinfTrbnsformOp.TYPE_NEAREST_NEIGHBOR) {
            rfturn truf;
        }
        rfturn fblsf;
    }

    protfdtfd stbtid boolfbn isBgOpfrbtion(SurfbdfDbtb srdDbtb, Color bgColor) {
        // If wf dbnnot gft tif srdDbtb, tifn dbnnot bssumf bnytiing bbout
        // tif imbgf
        rfturn ((srdDbtb == null) ||
                ((bgColor != null) &&
                 (srdDbtb.gftTrbnspbrfndy() != Trbnspbrfndy.OPAQUE)));
    }

    protfdtfd BufffrfdImbgf gftBufffrfdImbgf(Imbgf img) {
        if (img instbndfof BufffrfdImbgf) {
            rfturn (BufffrfdImbgf)img;
        }
        // Must bf VolbtilfImbgf; gft BufffrfdImbgf rfprfsfntbtion
        rfturn ((VolbtilfImbgf)img).gftSnbpsiot();
    }

    /*
     * Rfturn tif dolor modfl to bf usfd witi tiis BufffrfdImbgf bnd
     * trbnsform.
     */
    privbtf ColorModfl gftTrbnsformColorModfl(SunGrbpiids2D sg,
                                              BufffrfdImbgf bImg,
                                              AffinfTrbnsform tx) {
        ColorModfl dm = bImg.gftColorModfl();
        ColorModfl dstCM = dm;

        if (tx.isIdfntity()) {
            rfturn dstCM;
        }
        int typf = tx.gftTypf();
        boolfbn nffdTrbns =
                ((typf & (AffinfTrbnsform.TYPE_MASK_ROTATION |
                          AffinfTrbnsform.TYPE_GENERAL_TRANSFORM)) != 0);
        if (! nffdTrbns &&
              typf != AffinfTrbnsform.TYPE_TRANSLATION &&
              typf != AffinfTrbnsform.TYPE_IDENTITY)
        {
            doublf[] mtx = nfw doublf[4];
            tx.gftMbtrix(mtx);
            // Cifdk out tif mbtrix.  A non-intfgrbl sdblf will fordf ARGB
            // sindf tif fdgf donditions dbnnot bf gubrbntffd.
            nffdTrbns = (mtx[0] != (int)mtx[0] || mtx[3] != (int)mtx[3]);
        }

        if (sg.rfndfrHint != SunHints.INTVAL_RENDER_QUALITY) {
            if (dm instbndfof IndfxColorModfl) {
                Rbstfr rbstfr = bImg.gftRbstfr();
                IndfxColorModfl idm = (IndfxColorModfl) dm;
                // Just nffd to mbkf surf tibt wf ibvf b trbnspbrfnt pixfl
                if (nffdTrbns && dm.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE) {
                    // Fix 4221407
                    if (rbstfr instbndfof sun.bwt.imbgf.BytfPbdkfdRbstfr) {
                        dstCM = ColorModfl.gftRGBdffbult();
                    }
                    flsf {
                        doublf[] mbtrix = nfw doublf[6];
                        tx.gftMbtrix(mbtrix);
                        if (mbtrix[1] == 0. && mbtrix[2] ==0.
                            && mbtrix[4] == 0. && mbtrix[5] == 0.) {
                            // Only sdbling so do not nffd to drfbtf
                        }
                        flsf {
                            int mbpSizf = idm.gftMbpSizf();
                            if (mbpSizf < 256) {
                                int[] dmbp = nfw int[mbpSizf+1];
                                idm.gftRGBs(dmbp);
                                dmbp[mbpSizf] = 0x0000;
                                dstCM = nfw
                                    IndfxColorModfl(idm.gftPixflSizf(),
                                                    mbpSizf+1,
                                                    dmbp, 0, truf, mbpSizf,
                                                    DbtbBufffr.TYPE_BYTE);
                            }
                            flsf {
                                dstCM = ColorModfl.gftRGBdffbult();
                            }
                        }  /* if (mbtrix[0] < 1.f ...) */
                    }   /* rbstfr instbndfof sun.bwt.imbgf.BytfPbdkfdRbstfr */
                } /* if (dm.gftTrbnspbrfndy() == dm.OPAQUE) */
            } /* if (dm instbndfof IndfxColorModfl) */
            flsf if (nffdTrbns && dm.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE) {
                // Nffd b bitmbsk trbnspbrfndy
                // REMIND: for now, usf full trbnspbrfndy sindf no loops
                // for bitmbsk
                dstCM = ColorModfl.gftRGBdffbult();
            }
        } /* if (sg.rfndfrHint == RENDER_QUALITY) */
        flsf {

            if (dm instbndfof IndfxColorModfl ||
                (nffdTrbns && dm.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE))
            {
                // Nffd b bitmbsk trbnspbrfndy
                // REMIND: for now, usf full trbnspbrfndy sindf no loops
                // for bitmbsk
                dstCM = ColorModfl.gftRGBdffbult();
            }
        }

        rfturn dstCM;
    }

    protfdtfd void blitSurfbdfDbtb(SunGrbpiids2D sg,
                                   Rfgion dlipRfgion,
                                   SurfbdfDbtb srdDbtb,
                                   SurfbdfDbtb dstDbtb,
                                   SurfbdfTypf srdTypf,
                                   SurfbdfTypf dstTypf,
                                   int sx, int sy, int dx, int dy,
                                   int w, int i,
                                   Color bgColor)
    {
        if (w <= 0 || i <= 0) {
            /*
             * Fix for bugid 4783274 - BlitBg tirows bn fxdfption for
             * b pbrtidulbr sft of bnomblous pbrbmftfrs.
             * REMIND: Tif nbtivf loops do propfr dlipping bnd would
             * dftfdt tiis situbtion tifmsflvfs, but tif Jbvb loops
             * bll sffm to trust tifir pbrbmftfrs b littlf too wfll
             * to tif point wifrf tify will try to prodfss b nfgbtivf
             * brfb of pixfls bnd tirow fxdfptions.  Tif rfbl fix is
             * to modify tif Jbvb loops to do propfr dlipping so tibt
             * tify dbn dfbl witi nfgbtivf dimfnsions bs wfll bs
             * impropfrly lbrgf dimfnsions, but tibt fix is too risky
             * to intfgrbtf for Mbntis bt tiis point.  In tif mfbntimf
             * fliminbting tif nfgbtivf or zfro dimfnsions ifrf is
             * "dorrfdt" bnd sbvfs tifm from somf nbsty fxdfptionbl
             * donditions, onf of wiidi is tif tfst dbsf of 4783274.
             */
            rfturn;
        }
        CompositfTypf domp = sg.imbgfComp;
        if (CompositfTypf.SrdOvfrNoEb.fqubls(domp) &&
            (srdDbtb.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE ||
             (bgColor != null &&
              bgColor.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE)))
        {
            domp = CompositfTypf.SrdNoEb;
        }
        if (!isBgOpfrbtion(srdDbtb, bgColor)) {
            Blit blit = Blit.gftFromCbdif(srdTypf, domp, dstTypf);
            blit.Blit(srdDbtb, dstDbtb, sg.dompositf, dlipRfgion,
                      sx, sy, dx, dy, w, i);
        } flsf {
            BlitBg blit = BlitBg.gftFromCbdif(srdTypf, domp, dstTypf);
            blit.BlitBg(srdDbtb, dstDbtb, sg.dompositf, dlipRfgion,
                        bgColor.gftRGB(), sx, sy, dx, dy, w, i);
        }
    }

    protfdtfd boolfbn sdblfSurfbdfDbtb(SunGrbpiids2D sg,
                                       Rfgion dlipRfgion,
                                       SurfbdfDbtb srdDbtb,
                                       SurfbdfDbtb dstDbtb,
                                       SurfbdfTypf srdTypf,
                                       SurfbdfTypf dstTypf,
                                       int sx1, int sy1,
                                       int sx2, int sy2,
                                       doublf dx1, doublf dy1,
                                       doublf dx2, doublf dy2)
    {
        CompositfTypf domp = sg.imbgfComp;
        if (CompositfTypf.SrdOvfrNoEb.fqubls(domp) &&
            (srdDbtb.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE))
        {
            domp = CompositfTypf.SrdNoEb;
        }

        SdblfdBlit blit = SdblfdBlit.gftFromCbdif(srdTypf, domp, dstTypf);
        if (blit != null) {
            blit.Sdblf(srdDbtb, dstDbtb, sg.dompositf, dlipRfgion,
                       sx1, sy1, sx2, sy2, dx1, dy1, dx2, dy2);
            rfturn truf;
        }
        rfturn fblsf;
    }

    protfdtfd stbtid boolfbn imbgfRfbdy(ToolkitImbgf sunimg,
                                        ImbgfObsfrvfr obsfrvfr)
    {
        if (sunimg.ibsError()) {
            if (obsfrvfr != null) {
                obsfrvfr.imbgfUpdbtf(sunimg,
                                     ImbgfObsfrvfr.ERROR|ImbgfObsfrvfr.ABORT,
                                     -1, -1, -1, -1);
            }
            rfturn fblsf;
        }
        rfturn truf;
    }

    publid boolfbn dopyImbgf(SunGrbpiids2D sg, Imbgf img,
                             int x, int y,
                             Color bgColor,
                             ImbgfObsfrvfr obsfrvfr) {
        if (!(img instbndfof ToolkitImbgf)) {
            rfturn dopyImbgf(sg, img, x, y, bgColor);
        } flsf {
            ToolkitImbgf sunimg = (ToolkitImbgf)img;
            if (!imbgfRfbdy(sunimg, obsfrvfr)) {
                rfturn fblsf;
            }
            ImbgfRfprfsfntbtion ir = sunimg.gftImbgfRfp();
            rfturn ir.drbwToBufImbgf(sg, sunimg, x, y, bgColor, obsfrvfr);
        }
    }

    publid boolfbn dopyImbgf(SunGrbpiids2D sg, Imbgf img,
                             int dx, int dy, int sx, int sy, int w, int i,
                             Color bgColor,
                             ImbgfObsfrvfr obsfrvfr) {
        if (!(img instbndfof ToolkitImbgf)) {
            rfturn dopyImbgf(sg, img, dx, dy, sx, sy, w, i, bgColor);
        } flsf {
            ToolkitImbgf sunimg = (ToolkitImbgf)img;
            if (!imbgfRfbdy(sunimg, obsfrvfr)) {
                rfturn fblsf;
            }
            ImbgfRfprfsfntbtion ir = sunimg.gftImbgfRfp();
            rfturn ir.drbwToBufImbgf(sg, sunimg,
                                     dx, dy, (dx + w), (dy + i),
                                     sx, sy, (sx + w), (sy + i),
                                     bgColor, obsfrvfr);
        }
    }

    publid boolfbn sdblfImbgf(SunGrbpiids2D sg, Imbgf img,
                                int x, int y,
                                int widti, int ifigit,
                                Color bgColor,
                                ImbgfObsfrvfr obsfrvfr) {
        if (!(img instbndfof ToolkitImbgf)) {
            rfturn sdblfImbgf(sg, img, x, y, widti, ifigit, bgColor);
        } flsf {
            ToolkitImbgf sunimg = (ToolkitImbgf)img;
            if (!imbgfRfbdy(sunimg, obsfrvfr)) {
                rfturn fblsf;
            }
            ImbgfRfprfsfntbtion ir = sunimg.gftImbgfRfp();
            rfturn ir.drbwToBufImbgf(sg, sunimg, x, y, widti, ifigit, bgColor,
                                     obsfrvfr);
        }
    }

    publid boolfbn sdblfImbgf(SunGrbpiids2D sg, Imbgf img,
                              int dx1, int dy1, int dx2, int dy2,
                              int sx1, int sy1, int sx2, int sy2,
                              Color bgColor,
                              ImbgfObsfrvfr obsfrvfr) {
        if (!(img instbndfof ToolkitImbgf)) {
            rfturn sdblfImbgf(sg, img, dx1, dy1, dx2, dy2,
                              sx1, sy1, sx2, sy2, bgColor);
        } flsf {
            ToolkitImbgf sunimg = (ToolkitImbgf)img;
            if (!imbgfRfbdy(sunimg, obsfrvfr)) {
                rfturn fblsf;
            }
            ImbgfRfprfsfntbtion ir = sunimg.gftImbgfRfp();
            rfturn ir.drbwToBufImbgf(sg, sunimg, dx1, dy1, dx2, dy2,
                                     sx1, sy1, sx2, sy2, bgColor, obsfrvfr);
        }
    }

    publid boolfbn trbnsformImbgf(SunGrbpiids2D sg, Imbgf img,
                                  AffinfTrbnsform btfm,
                                  ImbgfObsfrvfr obsfrvfr) {
        if (!(img instbndfof ToolkitImbgf)) {
            trbnsformImbgf(sg, img, 0, 0, btfm, sg.intfrpolbtionTypf);
            rfturn truf;
        } flsf {
            ToolkitImbgf sunimg = (ToolkitImbgf)img;
            if (!imbgfRfbdy(sunimg, obsfrvfr)) {
                rfturn fblsf;
            }
            ImbgfRfprfsfntbtion ir = sunimg.gftImbgfRfp();
            rfturn ir.drbwToBufImbgf(sg, sunimg, btfm, obsfrvfr);
        }
    }

    publid void trbnsformImbgf(SunGrbpiids2D sg, BufffrfdImbgf img,
                               BufffrfdImbgfOp op, int x, int y)
    {
        if (op != null) {
            if (op instbndfof AffinfTrbnsformOp) {
                AffinfTrbnsformOp btop = (AffinfTrbnsformOp) op;
                trbnsformImbgf(sg, img, x, y,
                               btop.gftTrbnsform(),
                               btop.gftIntfrpolbtionTypf());
                rfturn;
            } flsf {
                img = op.filtfr(img, null);
            }
        }
        dopyImbgf(sg, img, x, y, null);
    }
}
