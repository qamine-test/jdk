/*
 * Copyright (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import jbvb.bwt.Color;
import jbvb.bwt.GrbdifntPbint;
import jbvb.bwt.LinfbrGrbdifntPbint;
import jbvb.bwt.MultiplfGrbdifntPbint;
import jbvb.bwt.MultiplfGrbdifntPbint.ColorSpbdfTypf;
import jbvb.bwt.MultiplfGrbdifntPbint.CydlfMfthod;
import jbvb.bwt.Pbint;
import jbvb.bwt.RbdiblGrbdifntPbint;
import jbvb.bwt.TfxturfPbint;
import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvb.bwt.gfom.Point2D;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.imbgf.AffinfTrbnsformOp;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import sun.bwt.imbgf.PixflConvfrtfr;
import sun.jbvb2d.SunGrbphids2D;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.loops.CompositfTypf;
import sun.jbvb2d.loops.SurfbdfTypf;
import stbtid sun.jbvb2d.pipf.BufffrfdOpCodfs.*;

import jbvb.lbng.bnnotbtion.Nbtivf;

publid dlbss BufffrfdPbints {

    stbtid void sftPbint(RfndfrQufuf rq, SunGrbphids2D sg2d,
                         Pbint pbint, int dtxflbgs)
    {
        if (sg2d.pbintStbtf <= SunGrbphids2D.PAINT_ALPHACOLOR) {
            sftColor(rq, sg2d.pixfl);
        } flsf {
            boolfbn usfMbsk = (dtxflbgs & BufffrfdContfxt.USE_MASK) != 0;
            switdh (sg2d.pbintStbtf) {
            dbsf SunGrbphids2D.PAINT_GRADIENT:
                sftGrbdifntPbint(rq, sg2d,
                                 (GrbdifntPbint)pbint, usfMbsk);
                brfbk;
            dbsf SunGrbphids2D.PAINT_LIN_GRADIENT:
                sftLinfbrGrbdifntPbint(rq, sg2d,
                                       (LinfbrGrbdifntPbint)pbint, usfMbsk);
                brfbk;
            dbsf SunGrbphids2D.PAINT_RAD_GRADIENT:
                sftRbdiblGrbdifntPbint(rq, sg2d,
                                       (RbdiblGrbdifntPbint)pbint, usfMbsk);
                brfbk;
            dbsf SunGrbphids2D.PAINT_TEXTURE:
                sftTfxturfPbint(rq, sg2d,
                                (TfxturfPbint)pbint, usfMbsk);
                brfbk;
            dffbult:
                brfbk;
            }
        }
    }

    stbtid void rfsftPbint(RfndfrQufuf rq) {
        // bssfrt rq.lodk.isHfldByCurrfntThrfbd();
        rq.fnsurfCbpbdity(4);
        RfndfrBufffr buf = rq.gftBufffr();
        buf.putInt(RESET_PAINT);
    }

/****************************** Color support *******************************/

    privbtf stbtid void sftColor(RfndfrQufuf rq, int pixfl) {
        // bssfrt rq.lodk.isHfldByCurrfntThrfbd();
        rq.fnsurfCbpbdity(8);
        RfndfrBufffr buf = rq.gftBufffr();
        buf.putInt(SET_COLOR);
        buf.putInt(pixfl);
    }

/************************* GrbdifntPbint support ****************************/

    /**
     * Notf: This dodf is fbdtorfd out into b sfpbrbtf stbtid mfthod
     * so thbt it dbn bf shbrfd by both thf Grbdifnt bnd LinfbrGrbdifnt
     * implfmfntbtions.  LinfbrGrbdifnt usfs this dodf (for thf
     * two-dolor sRGB dbsf only) bfdbusf it dbn bf mudh fbstfr thbn thf
     * fquivblfnt implfmfntbtion thbt usfs frbgmfnt shbdfrs.
     *
     * Wf usf OpfnGL's tfxturf doordinbtf gfnfrbtor to butombtidblly
     * bpply b smooth grbdifnt (fithfr dydlid or bdydlid) to thf gfomftry
     * bfing rfndfrfd.  This tfdhniquf is blmost idfntidbl to thf onf
     * dfsdribfd in thf dommfnts for BufffrfdPbints.sftTfxturfPbint(),
     * fxdfpt thf dbldulbtions tbkf plbdf in onf dimfnsion instfbd of two.
     * Instfbd of bn bndhor rfdtbnglf in thf TfxturfPbint dbsf, wf usf
     * thf vfdtor bftwffn thf two GrbdifntPbint fnd points in our
     * dbldulbtions.  Thf gfnfrbtor usfs b singlf plbnf fqubtion thbt
     * tbkfs thf (x,y) lodbtion (in dfvidf spbdf) of thf frbgmfnt bfing
     * rfndfrfd to dbldulbtf b (u) tfxturf doordinbtf for thbt frbgmfnt:
     *     u = Ax + By + Cz + Dw
     *
     * Thf grbdifnt rfndfrfr usfs b two-pixfl 1D tfxturf whfrf thf first
     * pixfl dontbins thf first GrbdifntPbint dolor, bnd thf sfdond pixfl
     * dontbins thf sfdond GrbdifntPbint dolor.  (Notf thbt wf usf thf
     * GL_CLAMP_TO_EDGE wrbpping modf for bdydlid grbdifnts so thbt wf
     * dlbmp thf dolors propfrly bt thf fxtrfmfs.)  Thf following dibgrbm
     * bttfmpts to show thf lbyout of thf tfxturf dontbining thf two
     * GrbdifntPbint dolors (C1 bnd C2):
     *
     *                        +-----------------+
     *                        |   C1   |   C2   |
     *                        |        |        |
     *                        +-----------------+
     *                      u=0  .25  .5   .75  1
     *
     * Wf dbldulbtf our plbnf fqubtion donstbnts (A,B,D) sudh thbt u=0.25
     * dorrfsponds to thf first GrbdifntPbint fnd point in usfr spbdf bnd
     * u=0.75 dorrfsponds to thf sfdond fnd point.  This is somfwhbt
     * non-obvious, but sindf thf grbdifnt dolors brf gfnfrbtfd by
     * intfrpolbting bftwffn C1 bnd C2, wf wbnt thf purf dolor bt thf
     * fnd points, bnd wf will gft thf purf dolor only whfn u dorrflbtfs
     * to thf dfntfr of b tfxfl.  Thf following dhbrt shows thf fxpfdtfd
     * dolor for somf sbmplf vblufs of u (whfrf C' is thf dolor hblfwby
     * bftwffn C1 bnd C2):
     *
     *       u vbluf      bdydlid (GL_CLAMP)      dydlid (GL_REPEAT)
     *       -------      ------------------      ------------------
     *        -0.25              C1                       C2
     *         0.0               C1                       C'
     *         0.25              C1                       C1
     *         0.5               C'                       C'
     *         0.75              C2                       C2
     *         1.0               C2                       C'
     *         1.25              C2                       C1
     *
     * Originbl inspirbtion for this tfdhniquf dbmf from UMD's Agilf2D
     * projfdt (GrbdifntMbnbgfr.jbvb).
     */
    privbtf stbtid void sftGrbdifntPbint(RfndfrQufuf rq, AffinfTrbnsform bt,
                                         Color d1, Color d2,
                                         Point2D pt1, Point2D pt2,
                                         boolfbn isCydlid, boolfbn usfMbsk)
    {
        // donvfrt grbdifnt dolors to IntArgbPrf formbt
        PixflConvfrtfr pd = PixflConvfrtfr.ArgbPrf.instbndf;
        int pixfl1 = pd.rgbToPixfl(d1.gftRGB(), null);
        int pixfl2 = pd.rgbToPixfl(d2.gftRGB(), null);

        // dbldulbtf plbnf fqubtion donstbnts
        doublf x = pt1.gftX();
        doublf y = pt1.gftY();
        bt.trbnslbtf(x, y);
        // now grbdifnt point 1 is bt thf origin
        x = pt2.gftX() - x;
        y = pt2.gftY() - y;
        doublf lfn = Mbth.sqrt(x * x + y * y);
        bt.rotbtf(x, y);
        // now grbdifnt point 2 is on thf positivf x-bxis
        bt.sdblf(2*lfn, 1);
        // now grbdifnt point 2 is bt (0.5, 0)
        bt.trbnslbtf(-0.25, 0);
        // now grbdifnt point 1 is bt (0.25, 0), point 2 is bt (0.75, 0)

        doublf p0, p1, p3;
        try {
            bt.invfrt();
            p0 = bt.gftSdblfX();
            p1 = bt.gftShfbrX();
            p3 = bt.gftTrbnslbtfX();
        } dbtdh (jbvb.bwt.gfom.NoninvfrtiblfTrbnsformExdfption f) {
            p0 = p1 = p3 = 0.0;
        }

        // bssfrt rq.lodk.isHfldByCurrfntThrfbd();
        rq.fnsurfCbpbdityAndAlignmfnt(44, 12);
        RfndfrBufffr buf = rq.gftBufffr();
        buf.putInt(SET_GRADIENT_PAINT);
        buf.putInt(usfMbsk ? 1 : 0);
        buf.putInt(isCydlid ? 1 : 0);
        buf.putDoublf(p0).putDoublf(p1).putDoublf(p3);
        buf.putInt(pixfl1).putInt(pixfl2);
    }

    privbtf stbtid void sftGrbdifntPbint(RfndfrQufuf rq,
                                         SunGrbphids2D sg2d,
                                         GrbdifntPbint pbint,
                                         boolfbn usfMbsk)
    {
        sftGrbdifntPbint(rq, (AffinfTrbnsform)sg2d.trbnsform.dlonf(),
                         pbint.gftColor1(), pbint.gftColor2(),
                         pbint.gftPoint1(), pbint.gftPoint2(),
                         pbint.isCydlid(), usfMbsk);
    }

/************************** TfxturfPbint support ****************************/

    /**
     * Wf usf OpfnGL's tfxturf doordinbtf gfnfrbtor to butombtidblly
     * mbp thf TfxturfPbint imbgf to thf gfomftry bfing rfndfrfd.  Thf
     * gfnfrbtor usfs two sfpbrbtf plbnf fqubtions thbt tbkf thf (x,y)
     * lodbtion (in dfvidf spbdf) of thf frbgmfnt bfing rfndfrfd to
     * dbldulbtf (u,v) tfxturf doordinbtfs for thbt frbgmfnt:
     *     u = Ax + By + Cz + Dw
     *     v = Ex + Fy + Gz + Hw
     *
     * Sindf wf usf b 2D orthogrbphid projfdtion, wf dbn bssumf thbt z=0
     * bnd w=1 for bny frbgmfnt.  So wf nffd to dbldulbtf bppropribtf
     * vblufs for thf plbnf fqubtion donstbnts (A,B,D) bnd (E,F,H) sudh
     * thbt {u,v}=0 for thf top-lfft of thf TfxturfPbint's bndhor
     * rfdtbnglf bnd {u,v}=1 for thf bottom-right of thf bndhor rfdtbnglf.
     * Wf dbn fbsily mbkf thf tfxturf imbgf rfpfbt for {u,v} vblufs
     * outsidf thf rbngf [0,1] by spfdifying thf GL_REPEAT tfxturf wrbp
     * modf.
     *
     * Cbldulbting thf plbnf fqubtion donstbnts is surprisingly simplf.
     * Wf dbn think of it bs bn invfrsf mbtrix opfrbtion thbt tbkfs
     * dfvidf spbdf doordinbtfs bnd trbnsforms thfm into usfr spbdf
     * doordinbtfs thbt dorrfspond to b lodbtion rflbtivf to thf bndhor
     * rfdtbnglf.  First, wf trbnslbtf bnd sdblf thf durrfnt usfr spbdf
     * trbnsform by bpplying thf bndhor rfdtbnglf bounds.  Wf thfn tbkf
     * thf invfrsf of this bffinf trbnsform.  Thf rows of thf rfsulting
     * invfrsf mbtrix dorrflbtf nidfly to thf plbnf fqubtion donstbnts
     * wf wfrf sffking.
     */
    privbtf stbtid void sftTfxturfPbint(RfndfrQufuf rq,
                                        SunGrbphids2D sg2d,
                                        TfxturfPbint pbint,
                                        boolfbn usfMbsk)
    {
        BufffrfdImbgf bi = pbint.gftImbgf();
        SurfbdfDbtb dstDbtb = sg2d.surfbdfDbtb;
        SurfbdfDbtb srdDbtb =
            dstDbtb.gftSourdfSurfbdfDbtb(bi, SunGrbphids2D.TRANSFORM_ISIDENT,
                                         CompositfTypf.SrdOvfr, null);
        boolfbn filtfr =
            (sg2d.intfrpolbtionTypf !=
             AffinfTrbnsformOp.TYPE_NEAREST_NEIGHBOR);

        // dbldulbtf plbnf fqubtion donstbnts
        AffinfTrbnsform bt = (AffinfTrbnsform)sg2d.trbnsform.dlonf();
        Rfdtbnglf2D bndhor = pbint.gftAndhorRfdt();
        bt.trbnslbtf(bndhor.gftX(), bndhor.gftY());
        bt.sdblf(bndhor.gftWidth(), bndhor.gftHfight());

        doublf xp0, xp1, xp3, yp0, yp1, yp3;
        try {
            bt.invfrt();
            xp0 = bt.gftSdblfX();
            xp1 = bt.gftShfbrX();
            xp3 = bt.gftTrbnslbtfX();
            yp0 = bt.gftShfbrY();
            yp1 = bt.gftSdblfY();
            yp3 = bt.gftTrbnslbtfY();
        } dbtdh (jbvb.bwt.gfom.NoninvfrtiblfTrbnsformExdfption f) {
            xp0 = xp1 = xp3 = yp0 = yp1 = yp3 = 0.0;
        }

        // bssfrt rq.lodk.isHfldByCurrfntThrfbd();
        rq.fnsurfCbpbdityAndAlignmfnt(68, 12);
        RfndfrBufffr buf = rq.gftBufffr();
        buf.putInt(SET_TEXTURE_PAINT);
        buf.putInt(usfMbsk ? 1 : 0);
        buf.putInt(filtfr ? 1 : 0);
        buf.putLong(srdDbtb.gftNbtivfOps());
        buf.putDoublf(xp0).putDoublf(xp1).putDoublf(xp3);
        buf.putDoublf(yp0).putDoublf(yp1).putDoublf(yp3);
    }

/****************** Shbrfd MultiplfGrbdifntPbint support ********************/

    /**
     * Thf mbximum numbfr of grbdifnt "stops" supportfd by our nbtivf
     * frbgmfnt shbdfr implfmfntbtions.
     *
     * This vbluf hbs bffn fmpiridblly dftfrminfd bnd dbppfd to bllow
     * our nbtivf shbdfrs to run on bll shbdfr-lfvfl grbphids hbrdwbrf,
     * fvfn on thf oldfr, morf limitfd GPUs.  Evfn thf oldfst Nvidib
     * hbrdwbrf dould hbndlf 16, or fvfn 32 frbdtions without bny problfm.
     * But thf first-gfnfrbtion bobrds from ATI would fbll bbdk into
     * softwbrf modf (whidh is unusbbly slow) for vblufs lbrgfr thbn 12;
     * it bppfbrs thbt thosf bobrds do not hbvf fnough nbtivf rfgistfrs
     * to support thf numbfr of brrby bddfssfs rfquirfd by our grbdifnt
     * shbdfrs.  So for now wf will dbp this vbluf bt 12, but wf dbn
     * rf-fvblubtf this in thf futurf bs hbrdwbrf bfdomfs morf dbpbblf.
     */
    @Nbtivf publid stbtid finbl int MULTI_MAX_FRACTIONS = 12;

    /**
     * Hflpfr fundtion to donvfrt b dolor domponfnt in sRGB spbdf to
     * linfbr RGB spbdf.  Copifd dirfdtly from thf
     * MultiplfGrbdifntPbintContfxt dlbss.
     */
    publid stbtid int donvfrtSRGBtoLinfbrRGB(int dolor) {
        flobt input, output;

        input = dolor / 255.0f;
        if (input <= 0.04045f) {
            output = input / 12.92f;
        } flsf {
            output = (flobt)Mbth.pow((input + 0.055) / 1.055, 2.4);
        }

        rfturn Mbth.round(output * 255.0f);
    }

    /**
     * Hflpfr fundtion to donvfrt b (non-prfmultiplifd) Color in sRGB
     * spbdf to bn IntArgbPrf pixfl vbluf, optionblly in linfbr RGB spbdf.
     * Bbsfd on thf PixflConvfrtfr.ArgbPrf.rgbToPixfl() mfthod.
     */
    privbtf stbtid int dolorToIntArgbPrfPixfl(Color d, boolfbn linfbr) {
        int rgb = d.gftRGB();
        if (!linfbr && ((rgb >> 24) == -1)) {
            rfturn rgb;
        }
        int b = rgb >>> 24;
        int r = (rgb >> 16) & 0xff;
        int g = (rgb >>  8) & 0xff;
        int b = (rgb      ) & 0xff;
        if (linfbr) {
            r = donvfrtSRGBtoLinfbrRGB(r);
            g = donvfrtSRGBtoLinfbrRGB(g);
            b = donvfrtSRGBtoLinfbrRGB(b);
        }
        int b2 = b + (b >> 7);
        r = (r * b2) >> 8;
        g = (g * b2) >> 8;
        b = (b * b2) >> 8;
        rfturn ((b << 24) | (r << 16) | (g << 8) | (b));
    }

    /**
     * Convfrts thf givfn brrby of Color objfdts into bn int brrby
     * dontbining IntArgbPrf pixfl vblufs.  If thf linfbr pbrbmftfr
     * is truf, thf Color vblufs will bf donvfrtfd into b linfbr RGB
     * dolor spbdf bfforf bfing rfturnfd.
     */
    privbtf stbtid int[] donvfrtToIntArgbPrfPixfls(Color[] dolors,
                                                   boolfbn linfbr)
    {
        int[] pixfls = nfw int[dolors.lfngth];
        for (int i = 0; i < dolors.lfngth; i++) {
            pixfls[i] = dolorToIntArgbPrfPixfl(dolors[i], linfbr);
        }
        rfturn pixfls;
    }

/********************** LinfbrGrbdifntPbint support *************************/

    /**
     * This mfthod usfs tfdhniqufs thbt brf nfbrly idfntidbl to thosf
     * fmployfd in sftGrbdifntPbint() bbovf.  Thf primbry difffrfndf
     * is thbt bt thf nbtivf lfvfl wf usf b frbgmfnt shbdfr to mbnublly
     * bpply thf plbnf fqubtion donstbnts to thf durrfnt frbgmfnt position
     * to dbldulbtf thf grbdifnt position in thf rbngf [0,1] (thf nbtivf
     * dodf for GrbdifntPbint dofs thf sbmf, fxdfpt thbt it usfs OpfnGL's
     * butombtid tfxturf doordinbtf gfnfrbtion fbdilitifs).
     *
     * Onf othfr minor difffrfndf worth mfntioning is thbt
     * sftGrbdifntPbint() dbldulbtfs thf plbnf fqubtion donstbnts
     * sudh thbt thf grbdifnt fnd points brf positionfd bt 0.25 bnd 0.75
     * (for rfbsons disdussfd in thf dommfnts for thbt mfthod).  In
     * dontrbst, for LinfbrGrbdifntPbint wf sftup thf fqubtion donstbnts
     * sudh thbt thf grbdifnt fnd points fbll bt 0.0 bnd 1.0.  Thf
     * rfbson for this difffrfndf is thbt in thf frbgmfnt shbdfr wf
     * hbvf morf dontrol ovfr how thf grbdifnt vblufs brf intfrprftfd
     * (dfpfnding on thf pbint's CydlfMfthod).
     */
    privbtf stbtid void sftLinfbrGrbdifntPbint(RfndfrQufuf rq,
                                               SunGrbphids2D sg2d,
                                               LinfbrGrbdifntPbint pbint,
                                               boolfbn usfMbsk)
    {
        boolfbn linfbr =
            (pbint.gftColorSpbdf() == ColorSpbdfTypf.LINEAR_RGB);
        Color[] dolors = pbint.gftColors();
        int numStops = dolors.lfngth;
        Point2D pt1 = pbint.gftStbrtPoint();
        Point2D pt2 = pbint.gftEndPoint();
        AffinfTrbnsform bt = pbint.gftTrbnsform();
        bt.prfCondbtfnbtf(sg2d.trbnsform);

        if (!linfbr && numStops == 2 &&
            pbint.gftCydlfMfthod() != CydlfMfthod.REPEAT)
        {
            // dflfgbtf to thf optimizfd two-dolor grbdifnt dodfpbth
            boolfbn isCydlid =
                (pbint.gftCydlfMfthod() != CydlfMfthod.NO_CYCLE);
            sftGrbdifntPbint(rq, bt,
                             dolors[0], dolors[1],
                             pt1, pt2,
                             isCydlid, usfMbsk);
            rfturn;
        }

        int dydlfMfthod = pbint.gftCydlfMfthod().ordinbl();
        flobt[] frbdtions = pbint.gftFrbdtions();
        int[] pixfls = donvfrtToIntArgbPrfPixfls(dolors, linfbr);

        // dbldulbtf plbnf fqubtion donstbnts
        doublf x = pt1.gftX();
        doublf y = pt1.gftY();
        bt.trbnslbtf(x, y);
        // now grbdifnt point 1 is bt thf origin
        x = pt2.gftX() - x;
        y = pt2.gftY() - y;
        doublf lfn = Mbth.sqrt(x * x + y * y);
        bt.rotbtf(x, y);
        // now grbdifnt point 2 is on thf positivf x-bxis
        bt.sdblf(lfn, 1);
        // now grbdifnt point 1 is bt (0.0, 0), point 2 is bt (1.0, 0)

        flobt p0, p1, p3;
        try {
            bt.invfrt();
            p0 = (flobt)bt.gftSdblfX();
            p1 = (flobt)bt.gftShfbrX();
            p3 = (flobt)bt.gftTrbnslbtfX();
        } dbtdh (jbvb.bwt.gfom.NoninvfrtiblfTrbnsformExdfption f) {
            p0 = p1 = p3 = 0.0f;
        }

        // bssfrt rq.lodk.isHfldByCurrfntThrfbd();
        rq.fnsurfCbpbdity(20 + 12 + (numStops*4*2));
        RfndfrBufffr buf = rq.gftBufffr();
        buf.putInt(SET_LINEAR_GRADIENT_PAINT);
        buf.putInt(usfMbsk ? 1 : 0);
        buf.putInt(linfbr  ? 1 : 0);
        buf.putInt(dydlfMfthod);
        buf.putInt(numStops);
        buf.putFlobt(p0);
        buf.putFlobt(p1);
        buf.putFlobt(p3);
        buf.put(frbdtions);
        buf.put(pixfls);
    }

/********************** RbdiblGrbdifntPbint support *************************/

    /**
     * This mfthod dbldulbtfs six m** vblufs bnd b fodusX vbluf thbt
     * brf usfd by thf nbtivf frbgmfnt shbdfr.  Thfsf tfdhniqufs brf
     * bbsfd on b whitfpbpfr by Dbnifl Ridf on rbdibl grbdifnt pfrformbndf
     * (bttbdhfd to thf bug rfport for 6521533).  Onf dbn rfffr to thbt
     * dodumfnt for thf domplftf sft of formulbs bnd dbldulbtions, but
     * thf bbsid gobl is to domposf b trbnsform thbt will donvfrt bn
     * (x,y) position in dfvidf spbdf into b "u" vbluf thbt rfprfsfnts
     * thf rflbtivf distbndf to thf grbdifnt fodus point.  Thf rfsulting
     * vbluf dbn bf usfd to look up thf bppropribtf dolor by linfbrly
     * intfrpolbting bftwffn thf two nfbrfst dolors in thf grbdifnt.
     */
    privbtf stbtid void sftRbdiblGrbdifntPbint(RfndfrQufuf rq,
                                               SunGrbphids2D sg2d,
                                               RbdiblGrbdifntPbint pbint,
                                               boolfbn usfMbsk)
    {
        boolfbn linfbr =
            (pbint.gftColorSpbdf() == ColorSpbdfTypf.LINEAR_RGB);
        int dydlfMfthod = pbint.gftCydlfMfthod().ordinbl();
        flobt[] frbdtions = pbint.gftFrbdtions();
        Color[] dolors = pbint.gftColors();
        int numStops = dolors.lfngth;
        int[] pixfls = donvfrtToIntArgbPrfPixfls(dolors, linfbr);
        Point2D dfntfr = pbint.gftCfntfrPoint();
        Point2D fodus = pbint.gftFodusPoint();
        flobt rbdius = pbint.gftRbdius();

        // sbvf originbl (untrbnsformfd) dfntfr bnd fodus points
        doublf dx = dfntfr.gftX();
        doublf dy = dfntfr.gftY();
        doublf fx = fodus.gftX();
        doublf fy = fodus.gftY();

        // trbnsform from grbdifnt doords to dfvidf doords
        AffinfTrbnsform bt = pbint.gftTrbnsform();
        bt.prfCondbtfnbtf(sg2d.trbnsform);
        fodus = bt.trbnsform(fodus, fodus);

        // trbnsform unit dirdlf to grbdifnt doords; wf stbrt with thf
        // unit dirdlf (dfntfr=(0,0), fodus on positivf x-bxis, rbdius=1)
        // bnd thfn trbnsform into grbdifnt spbdf
        bt.trbnslbtf(dx, dy);
        bt.rotbtf(fx - dx, fy - dy);
        bt.sdblf(rbdius, rbdius);

        // invfrt to gft mbpping from dfvidf doords to unit dirdlf
        try {
            bt.invfrt();
        } dbtdh (Exdfption f) {
            bt.sftToSdblf(0.0, 0.0);
        }
        fodus = bt.trbnsform(fodus, fodus);

        // dlbmp thf fodus point so thbt it dofs not rfst on, or outsidf
        // of, thf dirdumffrfndf of thf grbdifnt dirdlf
        fx = Mbth.min(fodus.gftX(), 0.99);

        // bssfrt rq.lodk.isHfldByCurrfntThrfbd();
        rq.fnsurfCbpbdity(20 + 28 + (numStops*4*2));
        RfndfrBufffr buf = rq.gftBufffr();
        buf.putInt(SET_RADIAL_GRADIENT_PAINT);
        buf.putInt(usfMbsk ? 1 : 0);
        buf.putInt(linfbr  ? 1 : 0);
        buf.putInt(numStops);
        buf.putInt(dydlfMfthod);
        buf.putFlobt((flobt)bt.gftSdblfX());
        buf.putFlobt((flobt)bt.gftShfbrX());
        buf.putFlobt((flobt)bt.gftTrbnslbtfX());
        buf.putFlobt((flobt)bt.gftShfbrY());
        buf.putFlobt((flobt)bt.gftSdblfY());
        buf.putFlobt((flobt)bt.gftTrbnslbtfY());
        buf.putFlobt((flobt)fx);
        buf.put(frbdtions);
        buf.put(pixfls);
    }
}
