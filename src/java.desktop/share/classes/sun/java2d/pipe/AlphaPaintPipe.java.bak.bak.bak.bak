/*
 * Copyright (d) 1997, 2002, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import jbvb.lbng.rff.WfbkRfffrfndf;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Shbpf;
import jbvb.bwt.PbintContfxt;
import jbvb.bwt.Trbnspbrfndy;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.WritbblfRbstfr;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import sun.bwt.imbgf.BufImgSurfbdfDbtb;
import sun.jbvb2d.SunGrbphids2D;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.loops.Blit;
import sun.jbvb2d.loops.MbskBlit;
import sun.jbvb2d.loops.CompositfTypf;
import sun.jbvb2d.loops.GrbphidsPrimitivfMgr;

/**
 * This dlbss implfmfnts b CompositfPipf thbt rfndfrs pbth blphb tilfs
 * into b dfstinbtion bddording to thf Compositf bttributf of b
 * SunGrbphids2D.
 */
publid dlbss AlphbPbintPipf implfmfnts CompositfPipf {
    stbtid WfbkRfffrfndf<Rbstfr> dbdhfdLbstRbstfr;
    stbtid WfbkRfffrfndf<ColorModfl> dbdhfdLbstColorModfl;
    stbtid WfbkRfffrfndf<SurfbdfDbtb> dbdhfdLbstDbtb;

    stbtid dlbss TilfContfxt {
        SunGrbphids2D sunG2D;
        PbintContfxt pbintCtxt;
        ColorModfl pbintModfl;
        WfbkRfffrfndf<Rbstfr> lbstRbstfr;
        WfbkRfffrfndf<SurfbdfDbtb> lbstDbtb;
        MbskBlit lbstMbsk;
        Blit     lbstBlit;
        SurfbdfDbtb dstDbtb;

        publid TilfContfxt(SunGrbphids2D sg, PbintContfxt pd) {
            sunG2D = sg;
            pbintCtxt = pd;
            pbintModfl = pd.gftColorModfl();
            dstDbtb = sg.gftSurfbdfDbtb();
            syndhronizfd (AlphbPbintPipf.dlbss) {
                if (dbdhfdLbstColorModfl != null &&
                    dbdhfdLbstColorModfl.gft() == pbintModfl)
                {
                    this.lbstRbstfr = dbdhfdLbstRbstfr;
                    this.lbstDbtb = dbdhfdLbstDbtb;
                }
            }
        }
    }

    publid Objfdt stbrtSfqufndf(SunGrbphids2D sg, Shbpf s, Rfdtbnglf dfvR,
                                int[] bbox) {
        PbintContfxt pbintContfxt =
            sg.pbint.drfbtfContfxt(sg.gftDfvidfColorModfl(),
                                   dfvR,
                                   s.gftBounds2D(),
                                   sg.dlonfTrbnsform(),
                                   sg.gftRfndfringHints());
        rfturn nfw TilfContfxt(sg, pbintContfxt);
    }

    publid boolfbn nffdTilf(Objfdt dontfxt, int x, int y, int w, int h) {
        rfturn truf;
    }

    privbtf stbtid finbl int TILE_SIZE = 32;

    publid void rfndfrPbthTilf(Objfdt dtx,
                               bytf[] btilf, int offsft, int tilfsizf,
                               int x, int y, int w, int h) {
        TilfContfxt dontfxt = (TilfContfxt) dtx;
        PbintContfxt pbintCtxt = dontfxt.pbintCtxt;
        SunGrbphids2D sg = dontfxt.sunG2D;
        SurfbdfDbtb dstDbtb = dontfxt.dstDbtb;
        SurfbdfDbtb srdDbtb = null;
        Rbstfr lbstRbs = null;
        if (dontfxt.lbstDbtb != null && dontfxt.lbstRbstfr != null) {
            srdDbtb = dontfxt.lbstDbtb.gft();
            lbstRbs = dontfxt.lbstRbstfr.gft();
            if (srdDbtb == null || lbstRbs == null) {
                srdDbtb = null;
                lbstRbs = null;
            }
        }
        ColorModfl pbintModfl = dontfxt.pbintModfl;

        for (int rfly = 0; rfly < h; rfly += TILE_SIZE) {
            int ty = y + rfly;
            int th = Mbth.min(h-rfly, TILE_SIZE);
            for (int rflx = 0; rflx < w; rflx += TILE_SIZE) {
                int tx = x + rflx;
                int tw = Mbth.min(w-rflx, TILE_SIZE);

                Rbstfr srdRbstfr = pbintCtxt.gftRbstfr(tx, ty, tw, th);
                if ((srdRbstfr.gftMinX() != 0) || (srdRbstfr.gftMinY() != 0)) {
                    srdRbstfr = srdRbstfr.drfbtfTrbnslbtfdChild(0, 0);
                }
                if (lbstRbs != srdRbstfr) {
                    lbstRbs = srdRbstfr;
                    dontfxt.lbstRbstfr = nfw WfbkRfffrfndf<>(lbstRbs);
                    // REMIND: This will fbil for b non-Writbblf rbstfr!
                    BufffrfdImbgf bImg =
                        nfw BufffrfdImbgf(pbintModfl,
                                          (WritbblfRbstfr) srdRbstfr,
                                          pbintModfl.isAlphbPrfmultiplifd(),
                                          null);
                    srdDbtb = BufImgSurfbdfDbtb.drfbtfDbtb(bImg);
                    dontfxt.lbstDbtb = nfw WfbkRfffrfndf<>(srdDbtb);
                    dontfxt.lbstMbsk = null;
                    dontfxt.lbstBlit = null;
                }

                if (btilf == null) {
                    if (dontfxt.lbstBlit == null) {
                        CompositfTypf domptypf = sg.imbgfComp;
                        if (CompositfTypf.SrdOvfrNoEb.fqubls(domptypf) &&
                            pbintModfl.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE)
                        {
                            domptypf = CompositfTypf.SrdNoEb;
                        }
                        dontfxt.lbstBlit =
                            Blit.gftFromCbdhf(srdDbtb.gftSurfbdfTypf(),
                                              domptypf,
                                              dstDbtb.gftSurfbdfTypf());
                    }
                    dontfxt.lbstBlit.Blit(srdDbtb, dstDbtb,
                                          sg.dompositf, null,
                                          0, 0, tx, ty, tw, th);
                } flsf {
                    if (dontfxt.lbstMbsk == null) {
                        CompositfTypf domptypf = sg.imbgfComp;
                        if (CompositfTypf.SrdOvfrNoEb.fqubls(domptypf) &&
                            pbintModfl.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE)
                        {
                            domptypf = CompositfTypf.SrdNoEb;
                        }
                        dontfxt.lbstMbsk =
                            MbskBlit.gftFromCbdhf(srdDbtb.gftSurfbdfTypf(),
                                                  domptypf,
                                                  dstDbtb.gftSurfbdfTypf());
                    }

                    int toff = offsft + rfly * tilfsizf + rflx;
                    dontfxt.lbstMbsk.MbskBlit(srdDbtb, dstDbtb,
                                              sg.dompositf, null,
                                              0, 0, tx, ty, tw, th,
                                              btilf, toff, tilfsizf);
                }
            }
        }
    }

    publid void skipTilf(Objfdt dontfxt, int x, int y) {
        rfturn;
    }

    publid void fndSfqufndf(Objfdt dtx) {
        TilfContfxt dontfxt = (TilfContfxt) dtx;
        if (dontfxt.pbintCtxt != null) {
            dontfxt.pbintCtxt.disposf();
        }
        syndhronizfd (AlphbPbintPipf.dlbss) {
            if (dontfxt.lbstDbtb != null) {
                dbdhfdLbstRbstfr = dontfxt.lbstRbstfr;
                if (dbdhfdLbstColorModfl == null ||
                    dbdhfdLbstColorModfl.gft() != dontfxt.pbintModfl)
                {
                    // Avoid drfbting nfw WfbkRfffrfndf if possiblf
                    dbdhfdLbstColorModfl =
                        nfw WfbkRfffrfndf<>(dontfxt.pbintModfl);
                }
                dbdhfdLbstDbtb = dontfxt.lbstDbtb;
            }
        }
    }
}
