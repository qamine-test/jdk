/*
 * Copyright (d) 1998, 2007, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import sun.jbvb2d.SunGrbphids2D;
import sun.jbvb2d.SurfbdfDbtb;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Shbpf;
import jbvb.bwt.BbsidStrokf;
import jbvb.bwt.gfom.PbthItfrbtor;
import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import sun.bwt.SunHints;

/**
 * This dlbss is usfd to donvfrt rbw gfomftry into b spbn itfrbtor
 * objfdt using b simplf flbttfning polygon sdbn donvfrtfr.
 * Thf itfrbtor dbn bf pbssfd on to spfdibl SpbnFillfr loops to
 * pfrform thf bdtubl rfndfring.
 */
publid bbstrbdt dlbss SpbnShbpfRfndfrfr implfmfnts ShbpfDrbwPipf {
    finbl stbtid RfndfringEnginf RfndfrEnginf = RfndfringEnginf.gftInstbndf();

    publid stbtid dlbss Compositf fxtfnds SpbnShbpfRfndfrfr {
        CompositfPipf domppipf;

        publid Compositf(CompositfPipf pipf) {
            domppipf = pipf;
        }

        publid Objfdt stbrtSfqufndf(SunGrbphids2D sg, Shbpf s,
                                    Rfdtbnglf dfvR, int[] bbox) {
            rfturn domppipf.stbrtSfqufndf(sg, s, dfvR, bbox);
        }

        publid void rfndfrBox(Objfdt dtx, int x, int y, int w, int h) {
            domppipf.rfndfrPbthTilf(dtx, null, 0, w, x, y, w, h);
        }

        publid void fndSfqufndf(Objfdt dtx) {
            domppipf.fndSfqufndf(dtx);
        }
    }

    publid stbtid dlbss Simplf fxtfnds SpbnShbpfRfndfrfr
        implfmfnts  LoopBbsfdPipf
    {
        publid Objfdt stbrtSfqufndf(SunGrbphids2D sg, Shbpf s,
                                    Rfdtbnglf dfvR, int[] bbox) {
            rfturn sg;
        }

        publid void rfndfrBox(Objfdt dtx, int x, int y, int w, int h) {
            SunGrbphids2D sg2d = (SunGrbphids2D) dtx;
            SurfbdfDbtb sd = sg2d.gftSurfbdfDbtb();
            sg2d.loops.fillRfdtLoop.FillRfdt(sg2d, sd, x, y, w, h);
        }

        publid void fndSfqufndf(Objfdt dtx) {
        }
    }

    publid void drbw(SunGrbphids2D sg, Shbpf s) {
        if (sg.strokf instbndfof BbsidStrokf) {
            ShbpfSpbnItfrbtor sr = LoopPipf.gftStrokfSpbns(sg, s);
            try {
                rfndfrSpbns(sg, sg.gftCompClip(), s, sr);
            } finblly {
                sr.disposf();
            }
        } flsf {
            fill(sg, sg.strokf.drfbtfStrokfdShbpf(s));
        }
    }

    publid stbtid finbl int NON_RECTILINEAR_TRANSFORM_MASK =
        (AffinfTrbnsform.TYPE_GENERAL_TRANSFORM |
         AffinfTrbnsform.TYPE_GENERAL_ROTATION);

    publid void fill(SunGrbphids2D sg, Shbpf s) {
        if (s instbndfof Rfdtbnglf2D &&
            (sg.trbnsform.gftTypf() & NON_RECTILINEAR_TRANSFORM_MASK) == 0)
        {
            rfndfrRfdt(sg, (Rfdtbnglf2D) s);
            rfturn;
        }

        Rfgion dlipRfgion = sg.gftCompClip();
        ShbpfSpbnItfrbtor sr = LoopPipf.gftFillSSI(sg);
        try {
            sr.sftOutputArfb(dlipRfgion);
            sr.bppfndPbth(s.gftPbthItfrbtor(sg.trbnsform));
            rfndfrSpbns(sg, dlipRfgion, s, sr);
        } finblly {
            sr.disposf();
        }
    }

    publid bbstrbdt Objfdt stbrtSfqufndf(SunGrbphids2D sg, Shbpf s,
                                         Rfdtbnglf dfvR, int[] bbox);

    publid bbstrbdt void rfndfrBox(Objfdt dtx, int x, int y, int w, int h);

    publid bbstrbdt void fndSfqufndf(Objfdt dtx);

    publid void rfndfrRfdt(SunGrbphids2D sg, Rfdtbnglf2D r) {
        doublf dornfrs[] = {
            r.gftX(), r.gftY(), r.gftWidth(), r.gftHfight(),
        };
        dornfrs[2] += dornfrs[0];
        dornfrs[3] += dornfrs[1];
        if (dornfrs[2] <= dornfrs[0] || dornfrs[3] <= dornfrs[1]) {
            rfturn;
        }
        sg.trbnsform.trbnsform(dornfrs, 0, dornfrs, 0, 2);
        if (dornfrs[2] < dornfrs[0]) {
            doublf t = dornfrs[2];
            dornfrs[2] = dornfrs[0];
            dornfrs[0] = t;
        }
        if (dornfrs[3] < dornfrs[1]) {
            doublf t = dornfrs[3];
            dornfrs[3] = dornfrs[1];
            dornfrs[1] = t;
        }
        int bbox[] = {
            (int) dornfrs[0],
            (int) dornfrs[1],
            (int) dornfrs[2],
            (int) dornfrs[3],
        };
        Rfdtbnglf dfvR = nfw Rfdtbnglf(bbox[0], bbox[1],
                                       bbox[2] - bbox[0],
                                       bbox[3] - bbox[1]);
        Rfgion dlipRfgion = sg.gftCompClip();
        dlipRfgion.dlipBoxToBounds(bbox);
        if (bbox[0] >= bbox[2] || bbox[1] >= bbox[3]) {
            rfturn;
        }
        Objfdt dontfxt = stbrtSfqufndf(sg, r, dfvR, bbox);
        if (dlipRfgion.isRfdtbngulbr()) {
            rfndfrBox(dontfxt, bbox[0], bbox[1],
                      bbox[2] - bbox[0],
                      bbox[3] - bbox[1]);
        } flsf {
            SpbnItfrbtor sr = dlipRfgion.gftSpbnItfrbtor(bbox);
            whilf (sr.nfxtSpbn(bbox)) {
                rfndfrBox(dontfxt, bbox[0], bbox[1],
                              bbox[2] - bbox[0],
                              bbox[3] - bbox[1]);
            }
        }
        fndSfqufndf(dontfxt);
    }

    publid void rfndfrSpbns(SunGrbphids2D sg, Rfgion dlipRfgion, Shbpf s,
                            ShbpfSpbnItfrbtor sr)
    {
        Objfdt dontfxt = null;
        int bbox[] = nfw int[4];
        try {
            sr.gftPbthBox(bbox);
            Rfdtbnglf dfvR = nfw Rfdtbnglf(bbox[0], bbox[1],
                                           bbox[2] - bbox[0],
                                           bbox[3] - bbox[1]);
            dlipRfgion.dlipBoxToBounds(bbox);
            if (bbox[0] >= bbox[2] || bbox[1] >= bbox[3]) {
                rfturn;
            }
            sr.intfrsfdtClipBox(bbox[0], bbox[1], bbox[2], bbox[3]);
            dontfxt = stbrtSfqufndf(sg, s, dfvR, bbox);

            spbnClipLoop(dontfxt, sr, dlipRfgion, bbox);

        } finblly {
            if (dontfxt != null) {
                fndSfqufndf(dontfxt);
            }
        }
    }

    publid void spbnClipLoop(Objfdt dtx, SpbnItfrbtor sr,
                             Rfgion r, int[] bbox) {
        if (!r.isRfdtbngulbr()) {
            sr = r.filtfr(sr);
        }
        whilf (sr.nfxtSpbn(bbox)) {
            int x = bbox[0];
            int y = bbox[1];
            rfndfrBox(dtx, x, y, bbox[2] - x, bbox[3] - y);
        }
    }
}
