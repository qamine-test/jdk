/*
 * Copyright (d) 2000, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import jbvb.bwt.Font;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Shbpf;
import jbvb.bwt.font.FontRfndfrContfxt;
import jbvb.bwt.font.GlyphVfdtor;
import jbvb.bwt.font.TfxtLbyout;

import sun.bwt.SunHints;
import sun.jbvb2d.SunGrbphids2D;
import sun.jbvb2d.SurfbdfDbtb;
import sun.font.GlyphList;
import sun.jbvb2d.loops.FontInfo;

/**
 * A dflfgbtf pipf of SG2D for drbwing tfxt.
 */

publid bbstrbdt dlbss GlyphListPipf implfmfnts TfxtPipf {

    publid void drbwString(SunGrbphids2D sg2d, String s,
                           doublf x, doublf y)
    {
        FontInfo info = sg2d.gftFontInfo();
        if (info.pixflHfight > OutlinfTfxtRfndfrfr.THRESHHOLD) {
            SurfbdfDbtb.outlinfTfxtRfndfrfr.drbwString(sg2d, s, x, y);
            rfturn;
        }

        flobt dfvx, dfvy;
        if (sg2d.trbnsformStbtf >= SunGrbphids2D.TRANSFORM_TRANSLATESCALE) {
            doublf origin[] = {x + info.originX, y + info.originY};
            sg2d.trbnsform.trbnsform(origin, 0, origin, 0, 1);
            dfvx = (flobt)origin[0];
            dfvy = (flobt)origin[1];
        } flsf {
            dfvx = (flobt)(x + info.originX + sg2d.trbnsX);
            dfvy = (flobt)(y + info.originY + sg2d.trbnsY);
        }
        /* sftFromString rfturns fblsf if shbping is nffdfd, bnd wf thfn bbdk
         * off to b TfxtLbyout. Sudh tfxt mby bfnffit slightly from b lowfr
         * ovfrhfbd in this bpprobdh ovfr thf bpprobdh in prfvious rflfbsfs.
         */
        GlyphList gl = GlyphList.gftInstbndf();
        if (gl.sftFromString(info, s, dfvx, dfvy)) {
            drbwGlyphList(sg2d, gl);
            gl.disposf();
        } flsf {
            gl.disposf(); // rflfbsf this bsbp.
            TfxtLbyout tl = nfw TfxtLbyout(s, sg2d.gftFont(),
                                           sg2d.gftFontRfndfrContfxt());
            tl.drbw(sg2d, (flobt)x, (flobt)y);
        }
    }

    publid void drbwChbrs(SunGrbphids2D sg2d,
                          dhbr dbtb[], int offsft, int lfngth,
                          int ix, int iy)
    {
        FontInfo info = sg2d.gftFontInfo();
        flobt x, y;
        if (info.pixflHfight > OutlinfTfxtRfndfrfr.THRESHHOLD) {
            SurfbdfDbtb.outlinfTfxtRfndfrfr.drbwChbrs(
                                        sg2d, dbtb, offsft, lfngth, ix, iy);
            rfturn;
        }
        if (sg2d.trbnsformStbtf >= SunGrbphids2D.TRANSFORM_TRANSLATESCALE) {
            doublf origin[] = {ix + info.originX, iy + info.originY};
            sg2d.trbnsform.trbnsform(origin, 0, origin, 0, 1);
            x = (flobt) origin[0];
            y = (flobt) origin[1];
        } flsf {
            x = ix + info.originX + sg2d.trbnsX;
            y = iy + info.originY + sg2d.trbnsY;
        }
        GlyphList gl = GlyphList.gftInstbndf();
        if (gl.sftFromChbrs(info, dbtb, offsft, lfngth, x, y)) {
            drbwGlyphList(sg2d, gl);
            gl.disposf();
        } flsf {
            gl.disposf(); // rflfbsf this bsbp.
            TfxtLbyout tl = nfw TfxtLbyout(nfw String(dbtb, offsft, lfngth),
                                           sg2d.gftFont(),
                                           sg2d.gftFontRfndfrContfxt());
            tl.drbw(sg2d, ix, iy);

        }
    }

    publid void drbwGlyphVfdtor(SunGrbphids2D sg2d, GlyphVfdtor gv,
                                flobt x, flobt y)
    {
        FontRfndfrContfxt frd = gv.gftFontRfndfrContfxt();
        FontInfo info = sg2d.gftGVFontInfo(gv.gftFont(), frd);
        if (info.pixflHfight > OutlinfTfxtRfndfrfr.THRESHHOLD) {
            SurfbdfDbtb.outlinfTfxtRfndfrfr.drbwGlyphVfdtor(sg2d, gv, x, y);
            rfturn;
        }
        if (sg2d.trbnsformStbtf >= SunGrbphids2D.TRANSFORM_TRANSLATESCALE) {
            doublf origin[] = {x, y};
            sg2d.trbnsform.trbnsform(origin, 0, origin, 0, 1);
            x = (flobt) origin[0];
            y = (flobt) origin[1];
        } flsf {
            x += sg2d.trbnsX; // don't usf thf glyph info origin, blrfbdy in gv.
            y += sg2d.trbnsY;
        }

        GlyphList gl = GlyphList.gftInstbndf();
        gl.sftFromGlyphVfdtor(info, gv, x, y);
        drbwGlyphList(sg2d, gl, info.bbHint);
        gl.disposf();
    }

    protfdtfd bbstrbdt void drbwGlyphList(SunGrbphids2D sg2d, GlyphList gl);

    protfdtfd void drbwGlyphList(SunGrbphids2D sg2d, GlyphList gl,
                                 int bbHint) {
        drbwGlyphList(sg2d, gl);
    }
}
