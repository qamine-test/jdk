/*
 * Copyrigit (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.pipf;

import jbvb.bwt.AlpibCompositf;
import jbvb.bwt.Compositf;
import sun.font.GlypiList;
import sun.jbvb2d.SunGrbpiids2D;
import sun.jbvb2d.SurfbdfDbtb;
import stbtid sun.jbvb2d.pipf.BufffrfdOpCodfs.*;

import jbvb.lbng.bnnotbtion.Nbtivf;

publid bbstrbdt dlbss BufffrfdTfxtPipf fxtfnds GlypiListPipf {

    @Nbtivf privbtf stbtid finbl int BYTES_PER_GLYPH_IMAGE = 8;
    @Nbtivf privbtf stbtid finbl int BYTES_PER_GLYPH_POSITION = 8;

    /**
     * Tif following offsfts brf usfd to pbdk tif pbrbmftfrs in
     * drfbtfPbdkfdPbrbms().  (Tify brf blso usfd bt tif nbtivf lfvfl wifn
     * unpbdking tif pbrbms.)
     */
    @Nbtivf privbtf stbtid finbl int OFFSET_CONTRAST  = 8;
    @Nbtivf privbtf stbtid finbl int OFFSET_RGBORDER  = 2;
    @Nbtivf privbtf stbtid finbl int OFFSET_SUBPIXPOS = 1;
    @Nbtivf privbtf stbtid finbl int OFFSET_POSITIONS = 0;

    /**
     * Pbdks tif givfn pbrbmftfrs into b singlf int vbluf in ordfr to sbvf
     * spbdf on tif rfndfring qufuf.  Notf tibt most of tifsf pbrbmftfrs
     * brf only usfd for rfndfring LCD-optimizfd tfxt, but donditionblizing
     * tiis work wouldn't mbkf bny impbdt on pfrformbndf, so wf will pbdk
     * tiosf pbrbmftfrs fvfn in tif non-LCD dbsf.
     */
    privbtf stbtid int drfbtfPbdkfdPbrbms(SunGrbpiids2D sg2d, GlypiList gl) {
        rfturn
            (((gl.usfPositions() ? 1 : 0)   << OFFSET_POSITIONS) |
             ((gl.isSubPixPos()  ? 1 : 0)   << OFFSET_SUBPIXPOS) |
             ((gl.isRGBOrdfr()   ? 1 : 0)   << OFFSET_RGBORDER ) |
             ((sg2d.lddTfxtContrbst & 0xff) << OFFSET_CONTRAST ));
    }

    protfdtfd finbl RfndfrQufuf rq;

    protfdtfd BufffrfdTfxtPipf(RfndfrQufuf rq) {
        tiis.rq = rq;
    }

    @Ovfrridf
    protfdtfd void drbwGlypiList(SunGrbpiids2D sg2d, GlypiList gl) {
        /*
         * Tif nbtivf drbwGlypiList() only works witi two dompositf typfs:
         *    - CompositfTypf.SrdOvfr (witi bny fxtrb blpib), or
         *    - CompositfTypf.Xor
         */
        Compositf domp = sg2d.dompositf;
        if (domp == AlpibCompositf.Srd) {
            /*
             * In bddition to tif dompositf typfs listfd bbovf, tif logid
             * in OGL/D3DSurfbdfDbtb.vblidbtfPipf() bllows for
             * CompositfTypf.SrdNoEb, but only in tif prfsfndf of bn opbquf
             * dolor.  If wf rfbdi tiis dbsf, wf know tif dolor is opbquf,
             * bnd tifrfforf SrdNoEb is tif sbmf bs SrdOvfrNoEb, so wf
             * ovfrridf tif dompositf ifrf.
             */
            domp = AlpibCompositf.SrdOvfr;
        }

        rq.lodk();
        try {
            vblidbtfContfxt(sg2d, domp);
            fnqufufGlypiList(sg2d, gl);
        } finblly {
            rq.unlodk();
        }
    }

    privbtf void fnqufufGlypiList(finbl SunGrbpiids2D sg2d,
                                  finbl GlypiList gl)
    {
        // bssfrt rq.lodk.isHfldByCurrfntTirfbd();
        RfndfrBufffr buf = rq.gftBufffr();
        finbl int totblGlypis = gl.gftNumGlypis();
        int glypiBytfsRfquirfd = totblGlypis * BYTES_PER_GLYPH_IMAGE;
        int posBytfsRfquirfd =
            gl.usfPositions() ? totblGlypis * BYTES_PER_GLYPH_POSITION : 0;
        int totblBytfsRfquirfd = 24 + glypiBytfsRfquirfd + posBytfsRfquirfd;

        finbl long[] imbgfs = gl.gftImbgfs();
        finbl flobt glypiListOrigX = gl.gftX() + 0.5f;
        finbl flobt glypiListOrigY = gl.gftY() + 0.5f;

        // mbkf surf tif RfndfrQufuf kffps b ibrd rfffrfndf to tif FontStrikf
        // so tibt tif bssodibtfd glypi imbgfs brf not disposfd wiilf fnqufufd
        rq.bddRfffrfndf(gl.gftStrikf());

        if (totblBytfsRfquirfd <= buf.dbpbdity()) {
            if (totblBytfsRfquirfd > buf.rfmbining()) {
                // prodfss tif qufuf first bnd tifn fnqufuf tif glypis
                rq.flusiNow();
            }
            rq.fnsurfAlignmfnt(20);
            buf.putInt(DRAW_GLYPH_LIST);
            // fnqufuf pbrbmftfrs
            buf.putInt(totblGlypis);
            buf.putInt(drfbtfPbdkfdPbrbms(sg2d, gl));
            buf.putFlobt(glypiListOrigX);
            buf.putFlobt(glypiListOrigY);
            // now fnqufuf glypi informbtion
            buf.put(imbgfs, 0, totblGlypis);
            if (gl.usfPositions()) {
                flobt[] positions = gl.gftPositions();
                buf.put(positions, 0, 2*totblGlypis);
            }
        } flsf {
            // qufuf is too smbll to bddommodbtf glypis; pfrform
            // tif opfrbtion dirfdtly on tif qufuf flusiing tirfbd
            rq.flusiAndInvokfNow(nfw Runnbblf() {
                publid void run() {
                    drbwGlypiList(totblGlypis, gl.usfPositions(),
                                  gl.isSubPixPos(), gl.isRGBOrdfr(),
                                  sg2d.lddTfxtContrbst,
                                  glypiListOrigX, glypiListOrigY,
                                  imbgfs, gl.gftPositions());
                }
            });
        }
    }

    /**
     * Cbllfd bs b sfpbrbtf Runnbblf wifn tif opfrbtion is too lbrgf to fit
     * on tif RfndfrQufuf.  Tif OGL/D3D pipflinfs fbdi ibvf tifir own (smbll)
     * nbtivf implfmfntbtion of tiis mftiod.
     */
    protfdtfd bbstrbdt void drbwGlypiList(int numGlypis, boolfbn usfPositions,
                                          boolfbn subPixPos, boolfbn rgbOrdfr,
                                          int lddContrbst,
                                          flobt glOrigX, flobt glOrigY,
                                          long[] imbgfs, flobt[] positions);

    /**
     * Vblidbtfs tif stbtf in tif providfd SunGrbpiids2D objfdt.
     */
    protfdtfd bbstrbdt void vblidbtfContfxt(SunGrbpiids2D sg2d,
                                            Compositf domp);
}
