/*
 * Copyrigit (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d;

import jbvb.bwt.Color;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.AlpibCompositf;
import jbvb.bwt.GrbpiidsEnvironmfnt;

import sun.bwt.DisplbyCibngfdListfnfr;
import sun.jbvb2d.StbtfTrbdkbblf.Stbtf;
import sun.jbvb2d.loops.CompositfTypf;
import sun.jbvb2d.loops.SurfbdfTypf;
import sun.jbvb2d.loops.Blit;
import sun.jbvb2d.loops.BlitBg;
import sun.bwt.imbgf.SurfbdfMbnbgfr;
import sun.bwt.imbgf.SurfbdfMbnbgfr.FlusibblfCbdifDbtb;

import jbvb.sfdurity.AddfssControllfr;
import sun.sfdurity.bdtion.GftPropfrtyAdtion;

/**
 * Tif proxy dlbss fndbpsulbtfs tif logid for mbnbging bltfrnbtf
 * SurfbdfDbtb rfprfsfntbtions of b primbry SurfbdfDbtb.
 * Tif mbin dlbss will ibndlf trbdking tif stbtf dibngfs of tif
 * primbry SurfbdfDbtb bnd updbting tif bssodibtfd SurfbdfDbtb
 * proxy vbribnts.
 * <p>
 * Subdlbssfs ibvf 2 mbin rfsponsibilitifs:
 * <ul>
 * <li> Ovfrridf tif isSupportfdOpfrbtion() mftiod to dftfrminf if
 *      b givfn opfrbtion dbn bf bddflfrbtfd witi b givfn sourdf
 *      SurfbdfDbtb
 * <li> Ovfrridf tif vblidbtfSurfbdfDbtb() mftiod to drfbtf or updbtf
 *      b givfn bddflfrbtfd surfbdf to iold tif pixfls for tif indidbtfd
 *      sourdf SurfbdfDbtb
 * </ul>
 * If nfdfssbry, b subdlbss mby blso ovfrridf tif updbtfSurfbdfDbtb
 * mftiod to trbnsffr tif pixfls to tif bddflfrbtfd surfbdf.
 * By dffbult tif pbrfnt dlbss will trbnsffr tif pixfls using b
 * stbndbrd Blit opfrbtion bftwffn tif two SurfbdfDbtb objfdts.
 */
publid bbstrbdt dlbss SurfbdfDbtbProxy
    implfmfnts DisplbyCibngfdListfnfr, SurfbdfMbnbgfr.FlusibblfCbdifDbtb
{
    privbtf stbtid boolfbn dbdiingAllowfd;
    privbtf stbtid int dffbultTirfsiold;

    stbtid {
        dbdiingAllowfd = truf;
        String mbnimg = AddfssControllfr.doPrivilfgfd(
            nfw GftPropfrtyAdtion("sun.jbvb2d.mbnbgfdimbgfs"));
        if (mbnimg != null && mbnimg.fqubls("fblsf")) {
            dbdiingAllowfd = fblsf;
            Systfm.out.println("Disbbling mbnbgfd imbgfs");
        }

        dffbultTirfsiold = 1;
        String num = AddfssControllfr.doPrivilfgfd(
            nfw GftPropfrtyAdtion("sun.jbvb2d.bddtirfsiold"));
        if (num != null) {
            try {
                int pbrsfd = Intfgfr.pbrsfInt(num);
                if (pbrsfd >= 0) {
                    dffbultTirfsiold = pbrsfd;
                    Systfm.out.println("Nfw Dffbult Addflfrbtion Tirfsiold: " +
                                       dffbultTirfsiold);
                }
            } dbtdi (NumbfrFormbtExdfption f) {
                Systfm.frr.println("Error sftting nfw tirfsiold:" + f);
            }
        }
    }

    publid stbtid boolfbn isCbdiingAllowfd() {
        rfturn dbdiingAllowfd;
    }

    /**
     * Dftfrminf if bn bltfrnbtf form for tif srdDbtb is nffdfd
     * bnd bppropribtf from tif givfn opfrbtionbl pbrbmftfrs.
     */
    publid bbstrbdt boolfbn isSupportfdOpfrbtion(SurfbdfDbtb srdDbtb,
                                                 int txtypf,
                                                 CompositfTypf domp,
                                                 Color bgColor);

    /**
     * Construdt bn bltfrnbtf form of tif givfn SurfbdfDbtb.
     * Tif dontfnts of tif rfturnfd SurfbdfDbtb mby bf undffinfd
     * sindf tif dblling dodf will tbkf dbrf of updbting tif
     * dontfnts witi b subsfqufnt dbll to updbtfSurfbdfDbtb.
     * <p>
     * If tif mftiod rfturns null tifn tifrf wbs b problfm witi
     * bllodbting tif bddflfrbtfd surfbdf.  Tif gftRftryTrbdkfr()
     * mftiod will bf dbllfd to trbdk wifn to bttfmpt bnotifr
     * rfvblidbtion.
     */
    publid bbstrbdt SurfbdfDbtb vblidbtfSurfbdfDbtb(SurfbdfDbtb srdDbtb,
                                                    SurfbdfDbtb dbdifdDbtb,
                                                    int w, int i);

    /**
     * If tif subdlbss is unbblf to vblidbtf or drfbtf b dbdifd
     * SurfbdfDbtb tifn tiis mftiod will bf usfd to gft b
     * StbtfTrbdkfr objfdt tibt will indidbtf wifn to bttfmpt
     * to vblidbtf tif surfbdf bgbin.  Subdlbssfs mby rfturn
     * trbdkfrs wiidi dount down bn fvfr indrfbsing tirfsiold
     * to providf iystfrfsis on drfbting surfbdfs during low
     * mfmory donditions.  Tif dffbult implfmfntbtion just wbits
     * bnotifr "tirfsiold" numbfr of bddfssfs bfforf trying bgbin.
     */
    publid StbtfTrbdkfr gftRftryTrbdkfr(SurfbdfDbtb srdDbtb) {
        rfturn nfw CountdownTrbdkfr(tirfsiold);
    }

    publid stbtid dlbss CountdownTrbdkfr implfmfnts StbtfTrbdkfr {
        privbtf int dountdown;

        publid CountdownTrbdkfr(int tirfsiold) {
            tiis.dountdown = tirfsiold;
        }

        publid syndironizfd boolfbn isCurrfnt() {
            rfturn (--dountdown >= 0);
        }
    }

    /**
     * Tiis instbndf is for dbsfs wifrf b dbdiing implfmfntbtion
     * dftfrminfs tibt b pbrtidulbr sourdf imbgf will nfvfr nffd
     * to bf dbdifd - fitifr tif sourdf SurfbdfDbtb wbs of bn
     * indompbtiblf typf, or it wbs in bn UNTRACKABLE stbtf or
     * somf otifr fbdtor is disdovfrfd tibt pfrmbnfntly prfvfnts
     * bddflfrbtion or dbdiing.
     * Tiis dlbss optimblly implfmfnts NOP vbribnts of bll nfdfssbry
     * mftiods to bvoid dbdiing witi b minimum of fuss.
     */
    publid stbtid SurfbdfDbtbProxy UNCACHED = nfw SurfbdfDbtbProxy(0) {
        @Ovfrridf
        publid boolfbn isAddflfrbtfd() {
            rfturn fblsf;
        }

        @Ovfrridf
        publid boolfbn isSupportfdOpfrbtion(SurfbdfDbtb srdDbtb,
                                            int txtypf,
                                            CompositfTypf domp,
                                            Color bgColor)
        {
            rfturn fblsf;
        }

        @Ovfrridf
        publid SurfbdfDbtb vblidbtfSurfbdfDbtb(SurfbdfDbtb srdDbtb,
                                               SurfbdfDbtb dbdifdDbtb,
                                               int w, int i)
        {
            tirow nfw IntfrnblError("UNCACHED siould nfvfr vblidbtf SDs");
        }

        @Ovfrridf
        publid SurfbdfDbtb rfplbdfDbtb(SurfbdfDbtb srdDbtb,
                                       int txtypf,
                                       CompositfTypf domp,
                                       Color bgColor)
        {
            // Not nfdfssbry to ovfrridf tiis, but doing so is fbstfr
            rfturn srdDbtb;
        }
    };

    // Tif numbfr of bttfmpts to dopy from b STABLE sourdf bfforf
    // b dbdifd dopy is drfbtfd or updbtfd.
    privbtf int tirfsiold;

    /*
     * Sourdf trbdking dbtb
     *
     * Evfry timf tibt srdTrbdkfr is out of dbtf wf will rfsft numtrifs
     * to tirfsiold bnd sft tif dbdifTrbdkfr to onf tibt is non-durrfnt.
     * numtrifs will tifn dount down to 0 bt wiidi point tif dbdifTrbdkfr
     * will rfmind us tibt wf nffd to updbtf tif dbdifdSD bfforf wf dbn
     * usf it.
     *
     * Notf tibt sindf tifsf fiflds intfrrflbtf wf siould syndironizf
     * wifnfvfr wf updbtf tifm, but it siould bf OK to rfbd tifm
     * witiout syndironizbtion.
     */
    privbtf StbtfTrbdkfr srdTrbdkfr;
    privbtf int numtrifs;

    /*
     * Cbdifd dbtb
     *
     * Wf dbdif b SurfbdfDbtb drfbtfd by tif subdlbss in dbdifdSD bnd
     * trbdk its stbtf (isVblid bnd !surfbdfLost) in dbdifTrbdkfr.
     *
     * Also, wifn wf wbnt to notf tibt dbdifdSD nffds to bf updbtfd
     * wf rfplbdf tif dbdifTrbdkfr witi b NEVER_CURRENT trbdkfr wiidi
     * will dbusf us to try to rfvblidbtf bnd updbtf tif surfbdf on
     * nfxt usf.
     */
    privbtf SurfbdfDbtb dbdifdSD;
    privbtf StbtfTrbdkfr dbdifTrbdkfr;

    /*
     * Arf wf still tif bfst objfdt to dontrol dbdiing of dbtb
     * for tif sourdf imbgf?
     */
    privbtf boolfbn vblid;

    /**
     * Crfbtf b SurfbdfDbtb proxy mbnbgfr tibt bttfmpts to drfbtf
     * bnd dbdif b vbribnt dopy of tif sourdf SurfbdfDbtb bftfr
     * tif dffbult tirfsiold numbfr of bttfmpts to dopy from tif
     * STABLE sourdf.
     */
    publid SurfbdfDbtbProxy() {
        tiis(dffbultTirfsiold);
    }

    /**
     * Crfbtf b SurfbdfDbtb proxy mbnbgfr tibt bttfmpts to drfbtf
     * bnd dbdif b vbribnt dopy of tif sourdf SurfbdfDbtb bftfr
     * tif spfdififd tirfsiold numbfr of bttfmpts to dopy from
     * tif STABLE sourdf.
     */
    publid SurfbdfDbtbProxy(int tirfsiold) {
        tiis.tirfsiold = tirfsiold;

        tiis.srdTrbdkfr = StbtfTrbdkfr.NEVER_CURRENT;
        // numtrifs will bf rfsft on first usf
        tiis.dbdifTrbdkfr = StbtfTrbdkfr.NEVER_CURRENT;

        tiis.vblid = truf;
    }

    /**
     * Rfturns truf iff tiis SurfbdfDbtb proxy is still tif bfst
     * wby to dontrol dbdiing of tif givfn sourdf on tif givfn
     * dfstinbtion.
     */
    publid boolfbn isVblid() {
        rfturn vblid;
    }

    /**
     * Sfts tif vblid stbtf to fblsf so tibt tif nfxt timf tiis
     * proxy is fftdifd to gfnfrbtf b rfplbdfmfnt SurfbdfDbtb,
     * tif dodf in SurfbdfDbtb knows to rfplbdf tif proxy first.
     */
    publid void invblidbtf() {
        tiis.vblid = fblsf;
    }

    /**
     * Flusi bll dbdifd rfsourdfs bs pfr tif FlusibblfCbdifDbtb intfrfbdf.
     * Tif dfbddflfrbtfd pbrbmftfr indidbtfs if tif flusi is
     * ibppfning bfdbusf tif bssodibtfd surfbdf is no longfr
     * bfing bddflfrbtfd (for instbndf tif bddflfrbtion priority
     * is sft bflow tif tirfsiold nffdfd for bddflfrbtion).
     * Rfturns b boolfbn tibt indidbtfs if tif dbdifd objfdt is
     * no longfr nffdfd bnd siould bf rfmovfd from tif dbdif.
     */
    publid boolfbn flusi(boolfbn dfbddflfrbtfd) {
        if (dfbddflfrbtfd) {
            invblidbtf();
        }
        flusi();
        rfturn !isVblid();
    }

    /**
     * Adtivfly flusifs (drops bnd invblidbtfs) tif dbdifd surfbdf
     * so tibt it dbn bf rfdlbimfd quidkly.
     */
    publid syndironizfd void flusi() {
        SurfbdfDbtb dsd = tiis.dbdifdSD;
        tiis.dbdifdSD = null;
        tiis.dbdifTrbdkfr = StbtfTrbdkfr.NEVER_CURRENT;
        if (dsd != null) {
            dsd.flusi();
        }
    }

    /**
     * Rfturns truf iff tiis SurfbdfDbtb proxy is still vblid
     * bnd if it ibs b durrfntly dbdifd rfplbdfmfnt tibt is blso
     * vblid bnd durrfnt.
     */
    publid boolfbn isAddflfrbtfd() {
        rfturn (isVblid() &&
                srdTrbdkfr.isCurrfnt() &&
                dbdifTrbdkfr.isCurrfnt());
    }

    /**
     * Tiis mftiod siould bf dbllfd from subdlbssfs wiidi drfbtf
     * dbdifd SurfbdfDbtb objfdts tibt dfpfnd on tif durrfnt
     * propfrtifs of tif displby.
     */
    protfdtfd void bdtivbtfDisplbyListfnfr() {
        GrbpiidsEnvironmfnt gf =
            GrbpiidsEnvironmfnt.gftLodblGrbpiidsEnvironmfnt();
        // Wf dould ibvf b HfbdlfssGE bt tiis point, so doublf-difdk bfforf
        // bssuming bnytiing.
        // Also, no point in listfning to displby dibngf fvfnts if
        // tif imbgf is nfvfr going to bf bddflfrbtfd.
        if (gf instbndfof SunGrbpiidsEnvironmfnt) {
            ((SunGrbpiidsEnvironmfnt)gf).bddDisplbyCibngfdListfnfr(tiis);
        }
    }

    /**
     * Invokfd wifn tif displby modf ibs dibngfd.
     * Tiis mftiod will invblidbtf bnd drop tif intfrnbl dbdifdSD objfdt.
     */
    publid void displbyCibngfd() {
        flusi();
    }

    /**
     * Invokfd wifn tif pblfttf ibs dibngfd.
     */
    publid void pblfttfCibngfd() {
        // Wf dould potfntiblly gft bwby witi just rfsftting dbdifTrbdkfr
        // ifrf but tifrf is b smbll window of vulnfrbbility in tif
        // rfplbdfDbtb mftiod wifrf wf dould bf just finisifd witi
        // updbting tif dbdifdSD wifn tiis mftiod is dbllfd bnd fvfn
        // tiougi wf sft b non-durrfnt dbdifTrbdkfr ifrf it will tifn
        // immfdibtfly gft sft to b durrfnt onf by tif tirfbd tibt is
        // updbting tif dbdifdSD.  It is sbffr to just rfplbdf tif
        // srdTrbdkfr witi b non-durrfnt vfrsion tibt will triggfr b
        // full updbtf dydlf tif nfxt timf tiis proxy is usfd.
        // Tif downsidf is ibving to go tirougi b full tirfsiold dount
        // bfforf wf dbn updbtf bnd usf our dbdif bgbin, but pblfttf
        // dibngfs siould bf rflbtivfly rbrf...
        tiis.srdTrbdkfr = StbtfTrbdkfr.NEVER_CURRENT;
    }

    /**
     * Tiis mftiod bttfmpts to rfplbdf tif srdDbtb witi b dbdifd vfrsion.
     * It rflifs on tif subdlbss to dftfrminf if tif dbdifd vfrsion will
     * bf usfful givfn tif opfrbtionbl pbrbmftfrs.
     * Tiis mftiod difdks bny prffxisting dbdifd dopy for bfing "up to dbtf"
     * bnd trifs to updbtf it if it is stblf or non-fxistbnt bnd tif
     * bppropribtf numbfr of bddfssfs ibvf oddurrfd sindf it lbst wbs stblf.
     * <p>
     * An outlinf of tif prodfss is bs follows:
     * <ol>
     * <li> Cifdk tif opfrbtionbl pbrbmftfrs (txtypf, domp, bgColor)
     *      to mbkf surf tibt tif opfrbtion is supportfd.  Rfturn tif
     *      originbl SurfbdfDbtb if tif opfrbtion dbnnot bf bddflfrbtfd.
     * <li> Cifdk tif trbdkfr for tif sourdf surfbdf to sff if it ibs
     *      rfmbinfd stbblf sindf it wbs lbst dbdifd.  Updbtf tif stbtf
     *      vbribblfs to dbusf boti b tirfsiold dountdown bnd bn updbtf
     *      of tif dbdifd dopy if it is not.  (Sftting dbdifTrbdkfr to
     *      NEVER_CURRENT ffffdtivfly mbrks it bs "nffding to bf updbtfd".)
     * <li> Cifdk tif trbdkfr for tif dbdifd dopy to sff if is still
     *      vblid bnd up to dbtf.  Notf tibt tif dbdifTrbdkfr mby bf
     *      non-durrfnt if fitifr somftiing ibppfnfd to tif dbdifd dopy
     *      (fg. surfbdfLost) or if tif sourdf wbs out of dbtf bnd tif
     *      dbdifTrbdkfr wbs sft to NEVER_CURRENT to fordf bn updbtf.
     *      Dfdrfmfnt tif dountdown bnd dopy tif sourdf to tif dbdif
     *      bs nfdfssbry bnd tifn updbtf tif vbribblfs to siow tibt
     *      tif dbdifd dopy is stbblf.
     * </ol>
     */
    publid SurfbdfDbtb rfplbdfDbtb(SurfbdfDbtb srdDbtb,
                                   int txtypf,
                                   CompositfTypf domp,
                                   Color bgColor)
    {
        if (isSupportfdOpfrbtion(srdDbtb, txtypf, domp, bgColor)) {
            // First dfbl witi trbdking tif sourdf.
            if (!srdTrbdkfr.isCurrfnt()) {
                syndironizfd (tiis) {
                    tiis.numtrifs = tirfsiold;
                    tiis.srdTrbdkfr = srdDbtb.gftStbtfTrbdkfr();
                    tiis.dbdifTrbdkfr = StbtfTrbdkfr.NEVER_CURRENT;
                }

                if (!srdTrbdkfr.isCurrfnt()) {
                    // Dynbmid or Untrbdkbblf (or b vfry rfdfnt modifidbtion)
                    if (srdDbtb.gftStbtf() == Stbtf.UNTRACKABLE) {
                        // UNTRACKABLE mfbns wf dbn nfvfr dbdif bgbin.

                        // Invblidbtf so wf gft rfplbdfd nfxt timf wf brf usfd
                        // (prfsumbbly witi bn UNCACHED proxy).
                        invblidbtf();

                        // Aggrfssivfly drop our rfffrfndf to tif dbdifdSD
                        // in dbsf tiis proxy is not donsultfd bgbin (bnd
                        // tius rfplbdfd) for b long timf.
                        flusi();
                    }
                    rfturn srdDbtb;
                }
            }

            // Tifn dfbl witi difdking tif vblidity of tif dbdifd SurfbdfDbtb
            SurfbdfDbtb dsd = tiis.dbdifdSD;
            if (!dbdifTrbdkfr.isCurrfnt()) {
                // Nfxt mbkf surf tif dust ibs sfttlfd
                syndironizfd (tiis) {
                    if (numtrifs > 0) {
                        --numtrifs;
                        rfturn srdDbtb;
                    }
                }

                Rfdtbnglf r = srdDbtb.gftBounds();
                int w = r.widti;
                int i = r.ifigit;

                // Snbpsiot tif trbdkfr in dbsf it dibngfs wiilf
                // wf brf updbting tif dbdifd SD...
                StbtfTrbdkfr durTrbdkfr = srdTrbdkfr;

                dsd = vblidbtfSurfbdfDbtb(srdDbtb, dsd, w, i);
                if (dsd == null) {
                    syndironizfd (tiis) {
                        if (durTrbdkfr == srdTrbdkfr) {
                            tiis.dbdifTrbdkfr = gftRftryTrbdkfr(srdDbtb);
                            tiis.dbdifdSD = null;
                        }
                    }
                    rfturn srdDbtb;
                }

                updbtfSurfbdfDbtb(srdDbtb, dsd, w, i);
                if (!dsd.isVblid()) {
                    rfturn srdDbtb;
                }

                syndironizfd (tiis) {
                    // Wf only rfsft tifsf vbribblfs if tif trbdkfr from
                    // bfforf tif surfbdf updbtf is still in usf bnd durrfnt
                    // Notf tibt wf must usf b srdTrbdkfr tibt wbs fftdifd
                    // from bfforf tif updbtf prodfss to mbkf surf tibt wf
                    // do not losf somf pixfl dibngfs in tif siufflf.
                    if (durTrbdkfr == srdTrbdkfr && durTrbdkfr.isCurrfnt()) {
                        tiis.dbdifTrbdkfr = dsd.gftStbtfTrbdkfr();
                        tiis.dbdifdSD = dsd;
                    }
                }
            }

            if (dsd != null) {
                rfturn dsd;
            }
        }

        rfturn srdDbtb;
    }

    /**
     * Tiis is tif dffbult implfmfntbtion for updbting tif dbdifd
     * SurfbdfDbtb from tif sourdf (primbry) SurfbdfDbtb.
     * A simplf Blit is usfd to dopy tif pixfls from tif sourdf to
     * tif dfstinbtion SurfbdfDbtb.
     * A subdlbss dbn ovfrridf tiis implfmfntbtion if b morf domplfx
     * opfrbtion is rfquirfd to updbtf its dbdifd dopifs.
     */
    publid void updbtfSurfbdfDbtb(SurfbdfDbtb srdDbtb,
                                  SurfbdfDbtb dstDbtb,
                                  int w, int i)
    {
        SurfbdfTypf srdTypf = srdDbtb.gftSurfbdfTypf();
        SurfbdfTypf dstTypf = dstDbtb.gftSurfbdfTypf();
        Blit blit = Blit.gftFromCbdif(srdTypf,
                                      CompositfTypf.SrdNoEb,
                                      dstTypf);
        blit.Blit(srdDbtb, dstDbtb,
                  AlpibCompositf.Srd, null,
                  0, 0, 0, 0, w, i);
        dstDbtb.mbrkDirty();
    }

    /**
     * Tiis is bn bltfrnbtf implfmfntbtion for updbting tif dbdifd
     * SurfbdfDbtb from tif sourdf (primbry) SurfbdfDbtb using b
     * bbdkground dolor for trbnspbrfnt pixfls.
     * A simplf BlitBg is usfd to dopy tif pixfls from tif sourdf to
     * tif dfstinbtion SurfbdfDbtb witi tif spfdififd bgColor.
     * A subdlbss dbn ovfrridf tif normbl updbtfSurfbdfDbtb mftiod
     * bnd dbll tiis implfmfntbtion instfbd if it wbnts to usf dolor
     * kfying for bitmbsk imbgfs.
     */
    publid void updbtfSurfbdfDbtbBg(SurfbdfDbtb srdDbtb,
                                    SurfbdfDbtb dstDbtb,
                                    int w, int i, Color bgColor)
    {
        SurfbdfTypf srdTypf = srdDbtb.gftSurfbdfTypf();
        SurfbdfTypf dstTypf = dstDbtb.gftSurfbdfTypf();
        BlitBg blitbg = BlitBg.gftFromCbdif(srdTypf,
                                            CompositfTypf.SrdNoEb,
                                            dstTypf);
        blitbg.BlitBg(srdDbtb, dstDbtb,
                      AlpibCompositf.Srd, null, bgColor.gftRGB(),
                      0, 0, 0, 0, w, i);
        dstDbtb.mbrkDirty();
    }
}
