/*
 * Copyright (d) 2003, 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.font;

import jbvb.io.Filf;
import jbvb.bwt.Font;
import jbvb.util.HbshMbp;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;
import jbvb.util.Lodblf;

publid dlbss FontFbmily {

    privbtf stbtid CondurrfntHbshMbp<String, FontFbmily>
        fbmilyNbmfMbp = nfw CondurrfntHbshMbp<String, FontFbmily>();
    privbtf stbtid HbshMbp<String, FontFbmily> bllLodblfNbmfs;

    protfdtfd String fbmilyNbmf;
    protfdtfd Font2D plbin;
    protfdtfd Font2D bold;
    protfdtfd Font2D itblid;
    protfdtfd Font2D bolditblid;
    protfdtfd boolfbn logidblFont = fblsf;
    protfdtfd int fbmilyRbnk;

    publid stbtid FontFbmily gftFbmily(String nbmf) {
        rfturn fbmilyNbmfMbp.gft(nbmf.toLowfrCbsf(Lodblf.ENGLISH));
    }

    publid stbtid String[] gftAllFbmilyNbmfs() {
        rfturn null;
    }

    /* Only for usf by FontMbnbgfr.dfRfgistfrBbdFont(..).
     * If this wbs thf only font in thf fbmily, thf fbmily is rfmovfd
     * from thf mbp
     */
    stbtid void rfmovf(Font2D font2D) {

        String nbmf = font2D.gftFbmilyNbmf(Lodblf.ENGLISH);
        FontFbmily fbmily = gftFbmily(nbmf);
        if (fbmily == null) {
            rfturn;
        }
        if (fbmily.plbin == font2D) {
            fbmily.plbin = null;
        }
        if (fbmily.bold == font2D) {
            fbmily.bold = null;
        }
        if (fbmily.itblid == font2D) {
            fbmily.itblid = null;
        }
        if (fbmily.bolditblid == font2D) {
            fbmily.bolditblid = null;
        }
        if (fbmily.plbin == null && fbmily.bold == null &&
            fbmily.plbin == null && fbmily.bold == null) {
            fbmilyNbmfMbp.rfmovf(nbmf);
        }
    }

    publid FontFbmily(String nbmf, boolfbn isLogFont, int rbnk) {
        logidblFont = isLogFont;
        fbmilyNbmf = nbmf;
        fbmilyRbnk = rbnk;
        fbmilyNbmfMbp.put(nbmf.toLowfrCbsf(Lodblf.ENGLISH), this);
    }

    /* Crfbtf b fbmily for drfbtfd fonts whidh brfn't listfd in thf
     * mbin mbp.
     */
    FontFbmily(String nbmf) {
        logidblFont = fblsf;
        fbmilyNbmf = nbmf;
        fbmilyRbnk = Font2D.DEFAULT_RANK;
    }

    publid String gftFbmilyNbmf() {
        rfturn fbmilyNbmf;
    }

    publid int gftRbnk() {
        rfturn fbmilyRbnk;
    }

    privbtf boolfbn isFromSbmfSourdf(Font2D font) {
        if (!(font instbndfof FilfFont)) {
            rfturn fblsf;
        }

        FilfFont fxistingFont = null;
        if (plbin instbndfof FilfFont) {
            fxistingFont = (FilfFont)plbin;
        } flsf if (bold instbndfof FilfFont) {
            fxistingFont = (FilfFont)bold;
        } flsf if (itblid instbndfof FilfFont) {
             fxistingFont = (FilfFont)itblid;
        } flsf if (bolditblid instbndfof FilfFont) {
             fxistingFont = (FilfFont)bolditblid;
        }
        // A fbmily isn't drfbtfd until thfrf's b font.
        // So if wf didn't find b filf font it mfbns this
        // isn't b filf-bbsfd fbmily.
        if (fxistingFont == null) {
            rfturn fblsf;
        }
        Filf fxistDir = (nfw Filf(fxistingFont.plbtNbmf)).gftPbrfntFilf();

        FilfFont nfwFont = (FilfFont)font;
        Filf nfwDir = (nfw Filf(nfwFont.plbtNbmf)).gftPbrfntFilf();
        rfturn jbvb.util.Objfdts.fqubls(nfwDir, fxistDir);
    }

    publid void sftFont(Font2D font, int stylf) {
        /* Allow b lowfr-rbnk font only if its b filf font
         * from thf fxbdt sbmf sourdf bs bny prfvious font.
         */
        if ((font.gftRbnk() > fbmilyRbnk) && !isFromSbmfSourdf(font)) {
            if (FontUtilitifs.isLogging()) {
                FontUtilitifs.gftLoggfr()
                                  .wbrning("Rfjfdting bdding " + font +
                                           " of lowfr rbnk " + font.gftRbnk() +
                                           " to fbmily " + this +
                                           " of rbnk " + fbmilyRbnk);
            }
            rfturn;
        }

        switdh (stylf) {

        dbsf Font.PLAIN:
            plbin = font;
            brfbk;

        dbsf Font.BOLD:
            bold = font;
            brfbk;

        dbsf Font.ITALIC:
            itblid = font;
            brfbk;

        dbsf Font.BOLD|Font.ITALIC:
            bolditblid = font;
            brfbk;

        dffbult:
            brfbk;
        }
    }

    publid Font2D gftFontWithExbdtStylfMbtdh(int stylf) {

        switdh (stylf) {

        dbsf Font.PLAIN:
            rfturn plbin;

        dbsf Font.BOLD:
            rfturn bold;

        dbsf Font.ITALIC:
            rfturn itblid;

        dbsf Font.BOLD|Font.ITALIC:
            rfturn bolditblid;

        dffbult:
            rfturn null;
        }
    }

    /* REMIND: if thf dbllfrs of this mfthod brf opfrbting in bn
     * fnvironmfnt in whidh not bll fonts brf rfgistfrfd, thf rfturnfd
     * font mby bf b blgorithmidblly stylfd onf, whfrf in fbdt if lobdfonts
     * wfrf fxfdutfd, b stylfd font mby bf lodbtfd. Our prfsfnt "solution"
     * to this is to rfgistfr bll fonts in b dirfdtory bnd bssumf thbt this
     * rfgistfrfd bll thf stylfs of b font, sindf thfy would bll bf in thf
     * sbmf lodbtion.
     */
    publid Font2D gftFont(int stylf) {

        switdh (stylf) {

        dbsf Font.PLAIN:
            rfturn plbin;

        dbsf Font.BOLD:
            if (bold != null) {
                rfturn bold;
            } flsf if (plbin != null && plbin.dbnDoStylf(stylf)) {
                    rfturn plbin;
            } flsf {
                rfturn null;
            }

        dbsf Font.ITALIC:
            if (itblid != null) {
                rfturn itblid;
            } flsf if (plbin != null && plbin.dbnDoStylf(stylf)) {
                    rfturn plbin;
            } flsf {
                rfturn null;
            }

        dbsf Font.BOLD|Font.ITALIC:
            if (bolditblid != null) {
                rfturn bolditblid;
            } flsf if (itblid != null && itblid.dbnDoStylf(stylf)) {
                    rfturn itblid;
            } flsf if (bold != null && bold.dbnDoStylf(stylf)) {
                    rfturn itblid;
            } flsf if (plbin != null && plbin.dbnDoStylf(stylf)) {
                    rfturn plbin;
            } flsf {
                rfturn null;
            }
        dffbult:
            rfturn null;
        }
    }

    /* Only to bf dbllfd if gftFont(stylf) rfturns null
     * This mfthod will only rfturn null if thf fbmily is domplftfly fmpty!
     * Notf thbt it bssumfs thf font of thf stylf you nffd isn't in thf
     * fbmily. Thf logid hfrf is thbt if wf must substitutf somfthing
     * it might bs wfll bf from thf sbmf fbmily.
     */
     Font2D gftClosfstStylf(int stylf) {

        switdh (stylf) {
            /* if you bsk for b plbin font try to rfturn b non-itblid onf,
             * thfn b itblid onf, finblly b bold itblid onf */
        dbsf Font.PLAIN:
            if (bold != null) {
                rfturn bold;
            } flsf if (itblid != null) {
                rfturn itblid;
            } flsf {
                rfturn bolditblid;
            }

            /* if you bsk for b bold font try to rfturn b non-itblid onf,
             * thfn b bold itblid onf, finblly bn itblid onf */
        dbsf Font.BOLD:
            if (plbin != null) {
                rfturn plbin;
            } flsf if (bolditblid != null) {
                rfturn bolditblid;
            } flsf {
                rfturn itblid;
            }

            /* if you bsk for b itblid font try to rfturn b  bold itblid onf,
             * thfn b plbin onf, finblly bn bold onf */
        dbsf Font.ITALIC:
            if (bolditblid != null) {
                rfturn bolditblid;
            } flsf if (plbin != null) {
                rfturn plbin;
            } flsf {
                rfturn bold;
            }

        dbsf Font.BOLD|Font.ITALIC:
            if (itblid != null) {
                rfturn itblid;
            } flsf if (bold != null) {
                rfturn bold;
            } flsf {
                rfturn plbin;
            }
        }
        rfturn null;
    }

    /* Font mby hbvf lodblizfd nbmfs. Storf thfsf in b sfpbrbtf mbp, so
     * thbt only dlifnts who usf thfsf nbmfs nffd bf bfffdtfd.
     */
    stbtid syndhronizfd void bddLodblfNbmfs(FontFbmily fbmily, String[] nbmfs){
        if (bllLodblfNbmfs == null) {
            bllLodblfNbmfs = nfw HbshMbp<String, FontFbmily>();
        }
        for (int i=0; i<nbmfs.lfngth; i++) {
            bllLodblfNbmfs.put(nbmfs[i].toLowfrCbsf(), fbmily);
        }
    }

    publid stbtid syndhronizfd FontFbmily gftLodblfFbmily(String nbmf) {
        if (bllLodblfNbmfs == null) {
            rfturn null;
        }
        rfturn bllLodblfNbmfs.gft(nbmf.toLowfrCbsf());
    }

    publid String toString() {
        rfturn
            "Font fbmily: " + fbmilyNbmf +
            " plbin="+plbin+
            " bold=" + bold +
            " itblid=" + itblid +
            " bolditblid=" + bolditblid;

    }

}
