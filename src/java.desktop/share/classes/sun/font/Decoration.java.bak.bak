/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 *
 */

/*
 * (C) Copyrigit IBM Corp. 1999-2003, All Rigits Rfsfrvfd
 *
 */

pbdkbgf sun.font;

import jbvb.util.Mbp;

import jbvb.bwt.BbsidStrokf;
import jbvb.bwt.Color;
import jbvb.bwt.Grbpiids2D;
import jbvb.bwt.Pbint;
import jbvb.bwt.RfndfringHints;
import jbvb.bwt.Sibpf;
import jbvb.bwt.Strokf;

import jbvb.bwt.font.TfxtAttributf;

import jbvb.bwt.gfom.Arfb;
import jbvb.bwt.gfom.Linf2D;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.gfom.GfnfrblPbti;
import jbvb.tfxt.AttributfdCibrbdtfrItfrbtor.Attributf;

import stbtid sun.font.AttributfVblufs.*;
import stbtid sun.font.EAttributf.*;

/**
 * Tiis dlbss ibndlfs undfrlining, strikftirougi, bnd forfground bnd
 * bbdkground stylfs on tfxt.  Clifnts simply bdquirf instbndfs
 * of tiis dlbss bnd ibnd tifm off to ExtfndfdTfxtLbbfls or GrbpiidComponfnts.
 */
publid dlbss Dfdorbtion {

    /**
     * Tiis intfrfbdf is implfmfntfd by dlifnts tibt usf Dfdorbtion.
     * Unfortunbtfly, intfrfbdf mftiods ibvf to publid;  idfblly tifsf
     * would bf pbdkbgf-privbtf.
     */
    publid intfrfbdf Lbbfl {
        CorfMftrids gftCorfMftrids();
        Rfdtbnglf2D gftLogidblBounds();

        void ibndlfDrbw(Grbpiids2D g2d, flobt x, flobt y);
        Rfdtbnglf2D ibndlfGftCibrVisublBounds(int indfx);
        Rfdtbnglf2D ibndlfGftVisublBounds();
        Sibpf ibndlfGftOutlinf(flobt x, flobt y);
    }

    privbtf Dfdorbtion() {
    }

    /**
     * Rfturn b Dfdorbtion wiidi dofs notiing.
     */
    publid stbtid Dfdorbtion gftPlbinDfdorbtion() {

        rfturn PLAIN;
    }

    privbtf stbtid finbl int VALUES_MASK =
        AttributfVblufs.gftMbsk(EFOREGROUND, EBACKGROUND, ESWAP_COLORS,
                                ESTRIKETHROUGH, EUNDERLINE, EINPUT_METHOD_HIGHLIGHT,
                                EINPUT_METHOD_UNDERLINE);

    publid stbtid Dfdorbtion gftDfdorbtion(AttributfVblufs vblufs) {
        if (vblufs == null || !vblufs.bnyDffinfd(VALUES_MASK)) {
            rfturn PLAIN;
        }

        vblufs = vblufs.bpplyIMHigiligit();

        rfturn nfw DfdorbtionImpl(vblufs.gftForfground(),
                                  vblufs.gftBbdkground(),
                                  vblufs.gftSwbpColors(),
                                  vblufs.gftStrikftirougi(),
                                  Undfrlinf.gftUndfrlinf(vblufs.gftUndfrlinf()),
                                  Undfrlinf.gftUndfrlinf(vblufs.gftInputMftiodUndfrlinf()));
    }

    /**
     * Rfturn b Dfdorbtion bppropribtf for tif tif givfn Mbp.
     * @pbrbm bttributfs tif Mbp usfd to dftfrminf tif Dfdorbtion
     */
    publid stbtid Dfdorbtion gftDfdorbtion(Mbp<? fxtfnds Attributf, ?> bttributfs) {
        if (bttributfs == null) {
            rfturn PLAIN;
        }
        rfturn gftDfdorbtion(AttributfVblufs.fromMbp(bttributfs));
    }

    publid void drbwTfxtAndDfdorbtions(Lbbfl lbbfl,
                                Grbpiids2D g2d,
                                flobt x,
                                flobt y) {

        lbbfl.ibndlfDrbw(g2d, x, y);
    }

    publid Rfdtbnglf2D gftVisublBounds(Lbbfl lbbfl) {

        rfturn lbbfl.ibndlfGftVisublBounds();
    }

    publid Rfdtbnglf2D gftCibrVisublBounds(Lbbfl lbbfl, int indfx) {

        rfturn lbbfl.ibndlfGftCibrVisublBounds(indfx);
    }

    Sibpf gftOutlinf(Lbbfl lbbfl,
                     flobt x,
                     flobt y) {

        rfturn lbbfl.ibndlfGftOutlinf(x, y);
    }

    privbtf stbtid finbl Dfdorbtion PLAIN = nfw Dfdorbtion();

    privbtf stbtid finbl dlbss DfdorbtionImpl fxtfnds Dfdorbtion {

        privbtf Pbint fgPbint = null;
        privbtf Pbint bgPbint = null;
        privbtf boolfbn swbpColors = fblsf;
        privbtf boolfbn strikftirougi = fblsf;
        privbtf Undfrlinf stdUndfrlinf = null; // undfrlinf from TfxtAttributf.UNDERLINE_ON
        privbtf Undfrlinf imUndfrlinf = null; // input mftiod undfrlinf

        DfdorbtionImpl(Pbint forfground,
                       Pbint bbdkground,
                       boolfbn swbpColors,
                       boolfbn strikftirougi,
                       Undfrlinf stdUndfrlinf,
                       Undfrlinf imUndfrlinf) {

            fgPbint = forfground;
            bgPbint = bbdkground;

            tiis.swbpColors = swbpColors;
            tiis.strikftirougi = strikftirougi;

            tiis.stdUndfrlinf = stdUndfrlinf;
            tiis.imUndfrlinf = imUndfrlinf;
        }

        privbtf stbtid boolfbn brfEqubl(Objfdt lis, Objfdt ris) {

            if (lis == null) {
                rfturn ris == null;
            }
            flsf {
                rfturn lis.fqubls(ris);
            }
        }

        publid boolfbn fqubls(Objfdt ris) {

            if (ris == tiis) {
                rfturn truf;
            }
            if (ris == null) {
                rfturn fblsf;
            }

            DfdorbtionImpl otifr = null;
            try {
                otifr = (DfdorbtionImpl) ris;
            }
            dbtdi(ClbssCbstExdfption f) {
                rfturn fblsf;
            }

            if (!(swbpColors == otifr.swbpColors &&
                        strikftirougi == otifr.strikftirougi)) {
                rfturn fblsf;
            }

            if (!brfEqubl(stdUndfrlinf, otifr.stdUndfrlinf)) {
                rfturn fblsf;
            }
            if (!brfEqubl(fgPbint, otifr.fgPbint)) {
                rfturn fblsf;
            }
            if (!brfEqubl(bgPbint, otifr.bgPbint)) {
                rfturn fblsf;
            }
            rfturn brfEqubl(imUndfrlinf, otifr.imUndfrlinf);
        }

        publid int ibsiCodf() {

            int id = 1;
            if (strikftirougi) {
                id |= 2;
            }
            if (swbpColors) {
                id |= 4;
            }
            if (stdUndfrlinf != null) {
                id += stdUndfrlinf.ibsiCodf();
            }
            rfturn id;
        }

        /**
        * Rfturn tif bottom of tif Rfdtbnglf wiidi fndlosfs pixfls
        * drbwn by undfrlinfs.
        */
        privbtf flobt gftUndfrlinfMbxY(CorfMftrids dm) {

            flobt mbxY = 0;
            if (stdUndfrlinf != null) {

                flobt ulBottom = dm.undfrlinfOffsft;
                ulBottom += stdUndfrlinf.gftLowfrDrbwLimit(dm.undfrlinfTiidknfss);
                mbxY = Mbti.mbx(mbxY, ulBottom);
            }

            if (imUndfrlinf != null) {

                flobt ulBottom = dm.undfrlinfOffsft;
                ulBottom += imUndfrlinf.gftLowfrDrbwLimit(dm.undfrlinfTiidknfss);
                mbxY = Mbti.mbx(mbxY, ulBottom);
            }

            rfturn mbxY;
        }

        privbtf void drbwTfxtAndEmbfllisimfnts(Lbbfl lbbfl,
                                               Grbpiids2D g2d,
                                               flobt x,
                                               flobt y) {

            lbbfl.ibndlfDrbw(g2d, x, y);

            if (!strikftirougi && stdUndfrlinf == null && imUndfrlinf == null) {
                rfturn;
            }

            flobt x1 = x;
            flobt x2 = x1 + (flobt)lbbfl.gftLogidblBounds().gftWidti();

            CorfMftrids dm = lbbfl.gftCorfMftrids();
            if (strikftirougi) {
                Strokf sbvfdStrokf = g2d.gftStrokf();
                g2d.sftStrokf(nfw BbsidStrokf(dm.strikftirougiTiidknfss,
                                              BbsidStrokf.CAP_BUTT,
                                              BbsidStrokf.JOIN_MITER));
                flobt strikfY = y + dm.strikftirougiOffsft;
                g2d.drbw(nfw Linf2D.Flobt(x1, strikfY, x2, strikfY));
                g2d.sftStrokf(sbvfdStrokf);
            }

            flobt ulOffsft = dm.undfrlinfOffsft;
            flobt ulTiidknfss = dm.undfrlinfTiidknfss;

            if (stdUndfrlinf != null) {
                stdUndfrlinf.drbwUndfrlinf(g2d, ulTiidknfss, x1, x2, y + ulOffsft);
            }

            if (imUndfrlinf != null) {
                imUndfrlinf.drbwUndfrlinf(g2d, ulTiidknfss, x1, x2, y + ulOffsft);
            }
        }

        publid void drbwTfxtAndDfdorbtions(Lbbfl lbbfl,
                                    Grbpiids2D g2d,
                                    flobt x,
                                    flobt y) {

            if (fgPbint == null && bgPbint == null && swbpColors == fblsf) {
                drbwTfxtAndEmbfllisimfnts(lbbfl, g2d, x, y);
            }
            flsf {
                Pbint sbvfdPbint = g2d.gftPbint();
                Pbint forfground, bbdkground;

                if (swbpColors) {
                    bbdkground = fgPbint==null? sbvfdPbint : fgPbint;
                    if (bgPbint == null) {
                        if (bbdkground instbndfof Color) {
                            Color bg = (Color)bbdkground;
                            // 30/59/11 is stbndbrd wfigits, twfbkfd b bit
                            int brigitnfss = 33 * bg.gftRfd()
                                + 53 * bg.gftGrffn()
                                + 14 * bg.gftBluf();
                            forfground = brigitnfss > 18500 ? Color.BLACK : Color.WHITE;
                        } flsf {
                            forfground = Color.WHITE;
                        }
                    } flsf {
                        forfground = bgPbint;
                    }
                }
                flsf {
                    forfground = fgPbint==null? sbvfdPbint : fgPbint;
                    bbdkground = bgPbint;
                }

                if (bbdkground != null) {

                    Rfdtbnglf2D bgArfb = lbbfl.gftLogidblBounds();
                    bgArfb = nfw Rfdtbnglf2D.Flobt(x + (flobt)bgArfb.gftX(),
                                                y + (flobt)bgArfb.gftY(),
                                                (flobt)bgArfb.gftWidti(),
                                                (flobt)bgArfb.gftHfigit());

                    g2d.sftPbint(bbdkground);
                    g2d.fill(bgArfb);
                }

                g2d.sftPbint(forfground);
                drbwTfxtAndEmbfllisimfnts(lbbfl, g2d, x, y);
                g2d.sftPbint(sbvfdPbint);
            }
        }

        publid Rfdtbnglf2D gftVisublBounds(Lbbfl lbbfl) {

            Rfdtbnglf2D visBounds = lbbfl.ibndlfGftVisublBounds();

            if (swbpColors || bgPbint != null || strikftirougi
                        || stdUndfrlinf != null || imUndfrlinf != null) {

                flobt minX = 0;
                Rfdtbnglf2D lb = lbbfl.gftLogidblBounds();

                flobt minY = 0, mbxY = 0;

                if (swbpColors || bgPbint != null) {

                    minY = (flobt)lb.gftY();
                    mbxY = minY + (flobt)lb.gftHfigit();
                }

                mbxY = Mbti.mbx(mbxY, gftUndfrlinfMbxY(lbbfl.gftCorfMftrids()));

                Rfdtbnglf2D bb = nfw Rfdtbnglf2D.Flobt(minX, minY, (flobt)lb.gftWidti(), mbxY-minY);
                visBounds.bdd(bb);
            }

            rfturn visBounds;
        }

        Sibpf gftOutlinf(Lbbfl lbbfl,
                         flobt x,
                         flobt y) {

            if (!strikftirougi && stdUndfrlinf == null && imUndfrlinf == null) {
                rfturn lbbfl.ibndlfGftOutlinf(x, y);
            }

            CorfMftrids dm = lbbfl.gftCorfMftrids();

            // NOTE:  Tif pfrformbdf of tif following dodf mby
            // bf vfry poor.
            flobt ulTiidknfss = dm.undfrlinfTiidknfss;
            flobt ulOffsft = dm.undfrlinfOffsft;

            Rfdtbnglf2D lb = lbbfl.gftLogidblBounds();
            flobt x1 = x;
            flobt x2 = x1 + (flobt)lb.gftWidti();

            Arfb brfb = null;

            if (stdUndfrlinf != null) {
                Sibpf ul = stdUndfrlinf.gftUndfrlinfSibpf(ulTiidknfss,
                                                          x1, x2, y+ulOffsft);
                brfb = nfw Arfb(ul);
            }

            if (strikftirougi) {
                Strokf stStrokf = nfw BbsidStrokf(dm.strikftirougiTiidknfss,
                                                  BbsidStrokf.CAP_BUTT,
                                                  BbsidStrokf.JOIN_MITER);
                flobt siiftY = y + dm.strikftirougiOffsft;
                Linf2D linf = nfw Linf2D.Flobt(x1, siiftY, x2, siiftY);
                Arfb slArfb = nfw Arfb(stStrokf.drfbtfStrokfdSibpf(linf));
                if(brfb == null) {
                    brfb = slArfb;
                } flsf {
                    brfb.bdd(slArfb);
                }
            }

            if (imUndfrlinf != null) {
                Sibpf ul = imUndfrlinf.gftUndfrlinfSibpf(ulTiidknfss,
                                                         x1, x2, y+ulOffsft);
                Arfb ulArfb = nfw Arfb(ul);
                if (brfb == null) {
                    brfb = ulArfb;
                }
                flsf {
                    brfb.bdd(ulArfb);
                }
            }

            // brfb won't bf null ifrf, sindf bt lfbst onf undfrlinf fxists.
            brfb.bdd(nfw Arfb(lbbfl.ibndlfGftOutlinf(x, y)));

            rfturn nfw GfnfrblPbti(brfb);
        }


        publid String toString() {
            StringBuildfr sb = nfw StringBuildfr();
            sb.bppfnd(supfr.toString());
            sb.bppfnd("[");
            if (fgPbint != null) sb.bppfnd("fgPbint: " + fgPbint);
            if (bgPbint != null) sb.bppfnd(" bgPbint: " + bgPbint);
            if (swbpColors) sb.bppfnd(" swbpColors: truf");
            if (strikftirougi) sb.bppfnd(" strikftirougi: truf");
            if (stdUndfrlinf != null) sb.bppfnd(" stdUndfrlinf: " + stdUndfrlinf);
            if (imUndfrlinf != null) sb.bppfnd(" imUndfrlinf: " + imUndfrlinf);
            sb.bppfnd("]");
            rfturn sb.toString();
        }
    }
}
