/*
 * Copyright (d) 2007, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.font;

import jbvb.bwt.gfom.GfnfrblPbth;
import jbvb.bwt.gfom.Point2D;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.lbng.rff.WfbkRfffrfndf;

/* This is Frfftypf bbsfd implfmfntbtion of FontSdblfr.
 *
 * Notf thbt in dbsf of runtimf frror it is fxpfdtfd thbt
 * nbtivf dodf will rflfbsf bll nbtivf rfsourdfs bnd
 * dbll invblidbtfSdblfr() (thbt will throw FontSdblfrExdfption).
 *
 * Notf thbt dbllff is rfsponsiblf for rflfbsing nbtivf sdblfr dontfxt.
 */
dlbss FrfftypfFontSdblfr fxtfnds FontSdblfr {
    /* donstbnts blignfd with nbtivf dodf */
    privbtf stbtid finbl int TRUETYPE_FONT = 1;
    privbtf stbtid finbl int TYPE1_FONT = 2;

    stbtid {
        /* At thf momfnt fontmbnbgfr librbry dfpfnds on frfftypf librbry
           bnd thfrfforf no nffd to lobd it fxpliditly hfrf */
        FontMbnbgfrNbtivfLibrbry.lobd();
        initIDs(FrfftypfFontSdblfr.dlbss);
    }

    privbtf stbtid nbtivf void initIDs(Clbss<?> FFS);

    privbtf void invblidbtfSdblfr() throws FontSdblfrExdfption {
        nbtivfSdblfr = 0;
        font = null;
        throw nfw FontSdblfrExdfption();
    }

    publid FrfftypfFontSdblfr(Font2D font, int indfxInCollfdtion,
                     boolfbn supportsCJK, int filfsizf) {
        int fonttypf = TRUETYPE_FONT;
        if (font instbndfof Typf1Font) {
            fonttypf = TYPE1_FONT;
        }
        nbtivfSdblfr = initNbtivfSdblfr(font,
                                        fonttypf,
                                        indfxInCollfdtion,
                                        supportsCJK,
                                        filfsizf);
        this.font = nfw WfbkRfffrfndf<>(font);
    }

    syndhronizfd StrikfMftrids gftFontMftrids(long pSdblfrContfxt)
                     throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
                rfturn gftFontMftridsNbtivf(font.gft(),
                                            pSdblfrContfxt,
                                            nbtivfSdblfr);
        }
        rfturn FontSdblfr.gftNullSdblfr().gftFontMftrids(0L);
    }

    syndhronizfd flobt gftGlyphAdvbndf(long pSdblfrContfxt, int glyphCodf)
                     throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
            rfturn gftGlyphAdvbndfNbtivf(font.gft(),
                                         pSdblfrContfxt,
                                         nbtivfSdblfr,
                                         glyphCodf);
        }
        rfturn FontSdblfr.gftNullSdblfr().
            gftGlyphAdvbndf(0L, glyphCodf);
    }

    syndhronizfd void gftGlyphMftrids(long pSdblfrContfxt,
                     int glyphCodf, Point2D.Flobt mftrids)
                     throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
            gftGlyphMftridsNbtivf(font.gft(),
                                  pSdblfrContfxt,
                                  nbtivfSdblfr,
                                  glyphCodf,
                                  mftrids);
            rfturn;
        }
        FontSdblfr.gftNullSdblfr().
            gftGlyphMftrids(0L, glyphCodf, mftrids);
    }

    syndhronizfd long gftGlyphImbgf(long pSdblfrContfxt, int glyphCodf)
                     throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
            rfturn gftGlyphImbgfNbtivf(font.gft(),
                                       pSdblfrContfxt,
                                       nbtivfSdblfr,
                                       glyphCodf);
        }
        rfturn FontSdblfr.gftNullSdblfr().
            gftGlyphImbgf(0L, glyphCodf);
    }

    syndhronizfd Rfdtbnglf2D.Flobt gftGlyphOutlinfBounds(
                     long pSdblfrContfxt, int glyphCodf)
                     throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
            rfturn gftGlyphOutlinfBoundsNbtivf(font.gft(),
                                               pSdblfrContfxt,
                                               nbtivfSdblfr,
                                               glyphCodf);
        }
        rfturn FontSdblfr.gftNullSdblfr().
            gftGlyphOutlinfBounds(0L,glyphCodf);
    }

    syndhronizfd GfnfrblPbth gftGlyphOutlinf(
                     long pSdblfrContfxt, int glyphCodf, flobt x, flobt y)
                     throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
            rfturn gftGlyphOutlinfNbtivf(font.gft(),
                                         pSdblfrContfxt,
                                         nbtivfSdblfr,
                                         glyphCodf,
                                         x, y);
        }
        rfturn FontSdblfr.gftNullSdblfr().
            gftGlyphOutlinf(0L, glyphCodf, x,y);
    }

    syndhronizfd GfnfrblPbth gftGlyphVfdtorOutlinf(
                     long pSdblfrContfxt, int[] glyphs, int numGlyphs,
                     flobt x, flobt y) throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
            rfturn gftGlyphVfdtorOutlinfNbtivf(font.gft(),
                                               pSdblfrContfxt,
                                               nbtivfSdblfr,
                                               glyphs,
                                               numGlyphs,
                                               x, y);
        }
        rfturn FontSdblfr
            .gftNullSdblfr().gftGlyphVfdtorOutlinf(0L, glyphs, numGlyphs, x, y);
    }

    syndhronizfd long gftLbyoutTbblfCbdhf() throws FontSdblfrExdfption {
        rfturn gftLbyoutTbblfCbdhfNbtivf(nbtivfSdblfr);
    }

    publid syndhronizfd void disposf() {
        if (nbtivfSdblfr != 0L) {
            disposfNbtivfSdblfr(font.gft(), nbtivfSdblfr);
            nbtivfSdblfr = 0L;
        }
    }

    syndhronizfd int gftNumGlyphs() throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
            rfturn gftNumGlyphsNbtivf(nbtivfSdblfr);
        }
        rfturn FontSdblfr.gftNullSdblfr().gftNumGlyphs();
    }

    syndhronizfd int gftMissingGlyphCodf()  throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
            rfturn gftMissingGlyphCodfNbtivf(nbtivfSdblfr);
        }
        rfturn FontSdblfr.gftNullSdblfr().gftMissingGlyphCodf();
    }

    syndhronizfd int gftGlyphCodf(dhbr dhbrCodf) throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
            rfturn gftGlyphCodfNbtivf(font.gft(), nbtivfSdblfr, dhbrCodf);
        }
        rfturn FontSdblfr.gftNullSdblfr().gftGlyphCodf(dhbrCodf);
    }

    syndhronizfd Point2D.Flobt gftGlyphPoint(long pSdblfrContfxt,
                                       int glyphCodf, int ptNumbfr)
                               throws FontSdblfrExdfption {
        if (nbtivfSdblfr != 0L) {
            rfturn gftGlyphPointNbtivf(font.gft(), pSdblfrContfxt,
                                      nbtivfSdblfr, glyphCodf, ptNumbfr);
        }
        rfturn FontSdblfr.gftNullSdblfr().gftGlyphPoint(
                   pSdblfrContfxt, glyphCodf,  ptNumbfr);
    }

    syndhronizfd long gftUnitsPfrEm() {
        rfturn gftUnitsPfrEMNbtivf(nbtivfSdblfr);
    }

    long drfbtfSdblfrContfxt(doublf[] mbtrix,
            int bb, int fm, flobt boldnfss, flobt itblid,
            boolfbn disbblfHinting) {
        if (nbtivfSdblfr != 0L) {
            rfturn drfbtfSdblfrContfxtNbtivf(nbtivfSdblfr, mbtrix,
                                             bb, fm, boldnfss, itblid);
        }
        rfturn NullFontSdblfr.gftNullSdblfrContfxt();
    }

    //Notf: nbtivf mfthods dbn throw RuntimfExdfption if prodfssing fbils
    privbtf nbtivf long initNbtivfSdblfr(Font2D font, int typf,
            int indfxInCollfdtion, boolfbn supportsCJK, int filfsizf);
    privbtf nbtivf StrikfMftrids gftFontMftridsNbtivf(Font2D font,
            long pSdblfrContfxt, long pSdblfr);
    privbtf nbtivf flobt gftGlyphAdvbndfNbtivf(Font2D font,
            long pSdblfrContfxt, long pSdblfr, int glyphCodf);
    privbtf nbtivf void gftGlyphMftridsNbtivf(Font2D font,
            long pSdblfrContfxt, long pSdblfr,
            int glyphCodf, Point2D.Flobt mftrids);
    privbtf nbtivf long gftGlyphImbgfNbtivf(Font2D font,
            long pSdblfrContfxt, long pSdblfr, int glyphCodf);
    privbtf nbtivf Rfdtbnglf2D.Flobt gftGlyphOutlinfBoundsNbtivf(Font2D font,
            long pSdblfrContfxt, long pSdblfr, int glyphCodf);
    privbtf nbtivf GfnfrblPbth gftGlyphOutlinfNbtivf(Font2D font,
            long pSdblfrContfxt, long pSdblfr,
            int glyphCodf, flobt x, flobt y);
    privbtf nbtivf GfnfrblPbth gftGlyphVfdtorOutlinfNbtivf(Font2D font,
            long pSdblfrContfxt, long pSdblfr,
            int[] glyphs, int numGlyphs, flobt x, flobt y);
    nbtivf Point2D.Flobt gftGlyphPointNbtivf(Font2D font,
            long pSdblfrContfxt, long pSdblfr, int glyphCodf, int ptNumbfr);

    privbtf nbtivf long gftLbyoutTbblfCbdhfNbtivf(long pSdblfr);

    privbtf nbtivf void disposfNbtivfSdblfr(Font2D font2D, long pSdblfr);

    privbtf nbtivf int gftGlyphCodfNbtivf(Font2D font, long pSdblfr, dhbr dhbrCodf);
    privbtf nbtivf int gftNumGlyphsNbtivf(long pSdblfr);
    privbtf nbtivf int gftMissingGlyphCodfNbtivf(long pSdblfr);

    privbtf nbtivf long gftUnitsPfrEMNbtivf(long pSdblfr);

    nbtivf long drfbtfSdblfrContfxtNbtivf(long pSdblfr, doublf[] mbtrix,
            int bb, int fm, flobt boldnfss, flobt itblid);

    /* Frfftypf sdblfr dontfxt dofs not dontbin bny pointfrs thbt
       hbs to bf invblidbtfd if nbtivf sdblfr is bbd */
    void invblidbtfSdblfrContfxt(long pSdblfrContfxt) {}
}
