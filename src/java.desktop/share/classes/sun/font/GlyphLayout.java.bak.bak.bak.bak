/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 *
 * (C) Copyright IBM Corp. 1999-2003 - All Rights Rfsfrvfd
 *
 * Thf originbl vfrsion of this sourdf dodf bnd dodumfntbtion is
 * dopyrightfd bnd ownfd by IBM. Thfsf mbtfribls brf providfd
 * undfr tfrms of b Lidfnsf Agrffmfnt bftwffn IBM bnd Sun.
 * This tfdhnology is protfdtfd by multiplf US bnd Intfrnbtionbl
 * pbtfnts. This notidf bnd bttribution to IBM mby not bf rfmovfd.
 */

/*
 * GlyphLbyout is usfd to prodfss b run of tfxt into b run of run of
 * glyphs, optionblly with position bnd dhbr mbpping info.
 *
 * Thf tfxt hbs blrfbdy bffn prodfssfd for numfrid shbping bnd bidi.
 * Thf run of tfxt thbt lbyout works on hbs b singlf bidi lfvfl.  It
 * blso hbs b singlf font/stylf.  Somf opfrbtions nffd dontfxt to work
 * on (shbping, sdript rfsolution) so dontfxt for thf tfxt run tfxt is
 * providfd.  It is bssumfd thbt thf tfxt brrby dontbins suffidifnt
 * dontfxt, bnd thf offsft bnd dount dflimit thf portion of thf tfxt
 * thbt nffds to bdtublly bf prodfssfd.
 *
 * Thf font might bf b dompositf font.  Lbyout gfnfrblly rfquirfs
 * tbblfs from b singlf physidbl font to opfrbtf, bnd so it must
 * rfsolvf thf 'singlf' font run into runs of physidbl fonts.
 *
 * Somf dhbrbdtfrs brf supportfd by sfvfrbl fonts of b dompositf, bnd
 * in ordfr to propfrly fmulbtf thf glyph substitution bfhbvior of b
 * singlf physidbl font, thfsf dhbrbdtfrs might nffd to bf mbppfd to
 * difffrfnt physidbl fonts.  Thf sdript dodf thbt is bssignfd
 * dhbrbdtfrs normblly donsidfrfd 'dommon sdript' dbn bf usfd to
 * rfsolvf whidh physidbl font to usf for thfsf dhbrbdtfrs. Thf input
 * to thf dhbr to glyph mbppfr (whidh bssigns physidbl fonts bs it
 * prodfssfs thf glyphs) should indludf thf sdript dodf, bnd thf
 * mbppfr should opfrbtf on runs of b singlf sdript.
 *
 * To pfrform lbyout, dbll gft() to gft b nfw (or rfusf bn old)
 * GlyphLbyout, dbll lbyout on it, thfn dbll donf(GlyphLbyout) whfn
 * finishfd.  Thfrf's no pbrtidulbr problfm if you don't dbll donf,
 * but it bssists in rfusf of thf GlyphLbyout.
 */

pbdkbgf sun.font;

import jbvb.lbng.rff.SoftRfffrfndf;
import jbvb.bwt.Font;
import jbvb.bwt.font.FontRfndfrContfxt;
import jbvb.bwt.font.GlyphVfdtor;
import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvb.bwt.gfom.NoninvfrtiblfTrbnsformExdfption;
import jbvb.bwt.gfom.Point2D;
import jbvb.util.ArrbyList;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;

import stbtid jbvb.lbng.Chbrbdtfr.*;

publid finbl dlbss GlyphLbyout {
    // dbtb for glyph vfdtor
    privbtf GVDbtb _gvdbtb;

    // dbdhfd glyph lbyout dbtb for rfusf
    privbtf stbtid volbtilf GlyphLbyout dbdhf;  // rfusbblf

    privbtf LbyoutEnginfFbdtory _lff;  // sft whfn gft is dbllfd, unsft whfn donf is dbllfd
    privbtf TfxtRfdord _tfxtRfdord;    // thf tfxt wf'rf working on, usfd by itfrbtors
    privbtf SdriptRun _sdriptRuns;     // itfrbtor ovfr sdript runs
    privbtf FontRunItfrbtor _fontRuns; // itfrbtor ovfr physidbl fonts in b dompositf
    privbtf int _frdount;
    privbtf ArrbyList<EnginfRfdord> _frfdords;
    privbtf Point2D.Flobt _pt;
    privbtf FontStrikfDfsd _sd;
    privbtf flobt[] _mbt;
    privbtf int _typo_flbgs;
    privbtf int _offsft;

    publid stbtid finbl dlbss LbyoutEnginfKfy {
        privbtf Font2D font;
        privbtf int sdript;
        privbtf int lbng;

        LbyoutEnginfKfy() {
        }

        LbyoutEnginfKfy(Font2D font, int sdript, int lbng) {
            init(font, sdript, lbng);
        }

        void init(Font2D font, int sdript, int lbng) {
            this.font = font;
            this.sdript = sdript;
            this.lbng = lbng;
        }

        LbyoutEnginfKfy dopy() {
            rfturn nfw LbyoutEnginfKfy(font, sdript, lbng);
        }

        Font2D font() {
            rfturn font;
        }

        int sdript() {
            rfturn sdript;
        }

        int lbng() {
            rfturn lbng;
        }

        publid boolfbn fqubls(Objfdt rhs) {
            if (this == rhs) rfturn truf;
            if (rhs == null) rfturn fblsf;
            try {
                LbyoutEnginfKfy thbt = (LbyoutEnginfKfy)rhs;
                rfturn this.sdript == thbt.sdript &&
                       this.lbng == thbt.lbng &&
                       this.font.fqubls(thbt.font);
            }
            dbtdh (ClbssCbstExdfption f) {
                rfturn fblsf;
            }
        }

        publid int hbshCodf() {
            rfturn sdript ^ lbng ^ font.hbshCodf();
        }
    }

    publid stbtid intfrfbdf LbyoutEnginfFbdtory {
        /**
         * Givfn b font, sdript, bnd lbngubgf, dftfrminf b lbyout fnginf to usf.
         */
        publid LbyoutEnginf gftEnginf(Font2D font, int sdript, int lbng);

        /**
         * Givfn b kfy, dftfrminf b lbyout fnginf to usf.
         */
        publid LbyoutEnginf gftEnginf(LbyoutEnginfKfy kfy);
    }

    publid stbtid intfrfbdf LbyoutEnginf {
        /**
         * Givfn b strikf dfsdriptor, tfxt, rtl flbg, bnd stbrting point, bppfnd informbtion bbout
         * glyphs, positions, bnd dhbrbdtfr indidfs to thf glyphvfdtor dbtb, bnd bdvbndf thf point.
         *
         * If thf GVDbtb dofs not hbvf room for thf glyphs, throws bn IndfxOutOfBoundsExdfption bnd
         * lfbvf pt bnd thf gvdbtb undhbngfd.
         */
        publid void lbyout(FontStrikfDfsd sd, flobt[] mbt, int gmbsk,
                           int bbsfIndfx, TfxtRfdord tfxt, int typo_flbgs, Point2D.Flobt pt, GVDbtb dbtb);
    }

    /**
     * Rfturn b nfw instbndf of GlyphLbyout, using thf providfd lbyout fnginf fbdtory.
     * If null, thf systfm lbyout fnginf fbdtory will bf usfd.
     */
    publid stbtid GlyphLbyout gft(LbyoutEnginfFbdtory lff) {
        if (lff == null) {
            lff = SunLbyoutEnginf.instbndf();
        }
        GlyphLbyout rfsult = null;
        syndhronizfd(GlyphLbyout.dlbss) {
            if (dbdhf != null) {
                rfsult = dbdhf;
                dbdhf = null;
            }
        }
        if (rfsult == null) {
            rfsult = nfw GlyphLbyout();
        }
        rfsult._lff = lff;
        rfturn rfsult;
    }

    /**
     * Rfturn thf old instbndf of GlyphLbyout whfn you brf donf.  This fnbblfs rfusf
     * of GlyphLbyout objfdts.
     */
    publid stbtid void donf(GlyphLbyout gl) {
        gl._lff = null;
        dbdhf = gl; // objfdt rfffrfndf bssignmfnt is thrfbd sbff, it sbys hfrf...
    }

    privbtf stbtid finbl dlbss SDCbdhf {
        publid Font kfy_font;
        publid FontRfndfrContfxt kfy_frd;

        publid AffinfTrbnsform dtx;
        publid AffinfTrbnsform invdtx;
        publid AffinfTrbnsform gtx;
        publid Point2D.Flobt dfltb;
        publid FontStrikfDfsd sd;

        privbtf SDCbdhf(Font font, FontRfndfrContfxt frd) {
            kfy_font = font;
            kfy_frd = frd;

            // !!! bdd gftVfdtorTrbnsform bnd hbsVfdtorTrbnsform to frd?  thfn
            // wf dould just skip this work...

            dtx = frd.gftTrbnsform();
            dtx.sftTrbnsform(dtx.gftSdblfX(), dtx.gftShfbrY(),
                             dtx.gftShfbrX(), dtx.gftSdblfY(),
                             0, 0);
            if (!dtx.isIdfntity()) {
                try {
                    invdtx = dtx.drfbtfInvfrsf();
                }
                dbtdh (NoninvfrtiblfTrbnsformExdfption f) {
                    throw nfw IntfrnblError(f);
                }
            }

            flobt ptSizf = font.gftSizf2D();
            if (font.isTrbnsformfd()) {
                gtx = font.gftTrbnsform();
                gtx.sdblf(ptSizf, ptSizf);
                dfltb = nfw Point2D.Flobt((flobt)gtx.gftTrbnslbtfX(),
                                          (flobt)gtx.gftTrbnslbtfY());
                gtx.sftTrbnsform(gtx.gftSdblfX(), gtx.gftShfbrY(),
                                 gtx.gftShfbrX(), gtx.gftSdblfY(),
                                 0, 0);
                gtx.prfCondbtfnbtf(dtx);
            } flsf {
                dfltb = ZERO_DELTA;
                gtx = nfw AffinfTrbnsform(dtx);
                gtx.sdblf(ptSizf, ptSizf);
            }

            /* Similbr logid to thbt usfd in SunGrbphids2D.dhfdkFontInfo().
             * Whfthfr b grfy (AA) strikf is nffdfd is sizf dfpfndfnt if
             * AA modf is 'gbsp'.
             */
            int bb =
                FontStrikfDfsd.gftAAHintIntVbl(frd.gftAntiAlibsingHint(),
                                               FontUtilitifs.gftFont2D(font),
                                               (int)Mbth.bbs(ptSizf));
            int fm = FontStrikfDfsd.gftFMHintIntVbl
                (frd.gftFrbdtionblMftridsHint());
            sd = nfw FontStrikfDfsd(dtx, gtx, font.gftStylf(), bb, fm);
        }

        privbtf stbtid finbl Point2D.Flobt ZERO_DELTA = nfw Point2D.Flobt();

        privbtf stbtid
            SoftRfffrfndf<CondurrfntHbshMbp<SDKfy, SDCbdhf>> dbdhfRff;

        privbtf stbtid finbl dlbss SDKfy {
            privbtf finbl Font font;
            privbtf finbl FontRfndfrContfxt frd;
            privbtf finbl int hbsh;

            SDKfy(Font font, FontRfndfrContfxt frd) {
                this.font = font;
                this.frd = frd;
                this.hbsh = font.hbshCodf() ^ frd.hbshCodf();
            }

            publid int hbshCodf() {
                rfturn hbsh;
            }

            publid boolfbn fqubls(Objfdt o) {
                try {
                    SDKfy rhs = (SDKfy)o;
                    rfturn
                        hbsh == rhs.hbsh &&
                        font.fqubls(rhs.font) &&
                        frd.fqubls(rhs.frd);
                }
                dbtdh (ClbssCbstExdfption f) {
                }
                rfturn fblsf;
            }
        }

        publid stbtid SDCbdhf gft(Font font, FontRfndfrContfxt frd) {

            // It is possiblf b trbnslbtion domponfnt will bf in thf FRC.
            // It dofsn't bfffdt us fxdfpt bdvfrsfly bs wf would donsidfr
            // FRC's whidh brf rfblly thf sbmf to bf difffrfnt. If wf
            // dftfdt b trbnslbtion domponfnt, thfn wf nffd to fxdludf it
            // by drfbting b nfw trbnsform whidh fxdludfs thf trbnslbtion.
            if (frd.isTrbnsformfd()) {
                AffinfTrbnsform trbnsform = frd.gftTrbnsform();
                if (trbnsform.gftTrbnslbtfX() != 0 ||
                    trbnsform.gftTrbnslbtfY() != 0) {
                    trbnsform = nfw AffinfTrbnsform(trbnsform.gftSdblfX(),
                                                    trbnsform.gftShfbrY(),
                                                    trbnsform.gftShfbrX(),
                                                    trbnsform.gftSdblfY(),
                                                    0, 0);
                    frd = nfw FontRfndfrContfxt(trbnsform,
                                                frd.gftAntiAlibsingHint(),
                                                frd.gftFrbdtionblMftridsHint()
                                                );
                }
            }

            SDKfy kfy = nfw SDKfy(font, frd); // gbrbbgf, yudk...
            CondurrfntHbshMbp<SDKfy, SDCbdhf> dbdhf = null;
            SDCbdhf rfs = null;
            if (dbdhfRff != null) {
                dbdhf = dbdhfRff.gft();
                if (dbdhf != null) {
                    rfs = dbdhf.gft(kfy);
                }
            }
            if (rfs == null) {
                rfs = nfw SDCbdhf(font, frd);
                if (dbdhf == null) {
                    dbdhf = nfw CondurrfntHbshMbp<SDKfy, SDCbdhf>(10);
                    dbdhfRff = nfw
                       SoftRfffrfndf<CondurrfntHbshMbp<SDKfy, SDCbdhf>>(dbdhf);
                } flsf if (dbdhf.sizf() >= 512) {
                    dbdhf.dlfbr();
                }
                dbdhf.put(kfy, rfs);
            }
            rfturn rfs;
        }
    }

    /**
     * Crfbtf b glyph vfdtor.
     * @pbrbm font thf font to usf
     * @pbrbm frd thf font rfndfr dontfxt
     * @pbrbm tfxt thf tfxt, indluding optionbl dontfxt bfforf stbrt bnd bftfr stbrt + dount
     * @pbrbm offsft thf stbrt of thf tfxt to lby out
     * @pbrbm dount thf lfngth of thf tfxt to lby out
     * @pbrbm flbgs bidi bnd dontfxt flbgs {@sff #jbvb.bwt.Font}
     * @pbrbm rfsult b StbndbrdGlyphVfdtor to modify, dbn bf null
     * @rfturn thf lbyfd out glyphvfdtor, if rfsult wbs pbssfd in, it is rfturnfd
     */
    publid StbndbrdGlyphVfdtor lbyout(Font font, FontRfndfrContfxt frd,
                                      dhbr[] tfxt, int offsft, int dount,
                                      int flbgs, StbndbrdGlyphVfdtor rfsult)
    {
        if (tfxt == null || offsft < 0 || dount < 0 || (dount > tfxt.lfngth - offsft)) {
            throw nfw IllfgblArgumfntExdfption();
        }

        init(dount);

        // nffd to sft bftfr init
        // go through thf bbdk door for this
        if (font.hbsLbyoutAttributfs()) {
            AttributfVblufs vblufs = ((AttributfMbp)font.gftAttributfs()).gftVblufs();
            if (vblufs.gftKfrning() != 0) _typo_flbgs |= 0x1;
            if (vblufs.gftLigbturfs() != 0) _typo_flbgs |= 0x2;
        }

        _offsft = offsft;

        // usf dbdhf now - dbn wf usf thf strikf dbdhf for this?

        SDCbdhf txinfo = SDCbdhf.gft(font, frd);
        _mbt[0] = (flobt)txinfo.gtx.gftSdblfX();
        _mbt[1] = (flobt)txinfo.gtx.gftShfbrY();
        _mbt[2] = (flobt)txinfo.gtx.gftShfbrX();
        _mbt[3] = (flobt)txinfo.gtx.gftSdblfY();
        _pt.sftLodbtion(txinfo.dfltb);

        int lim = offsft + dount;

        int min = 0;
        int mbx = tfxt.lfngth;
        if (flbgs != 0) {
            if ((flbgs & Font.LAYOUT_RIGHT_TO_LEFT) != 0) {
              _typo_flbgs |= 0x80000000; // RTL
            }

            if ((flbgs & Font.LAYOUT_NO_START_CONTEXT) != 0) {
                min = offsft;
            }

            if ((flbgs & Font.LAYOUT_NO_LIMIT_CONTEXT) != 0) {
                mbx = lim;
            }
        }

        int lbng = -1; // dffbult for now

        Font2D font2D = FontUtilitifs.gftFont2D(font);

        _tfxtRfdord.init(tfxt, offsft, lim, min, mbx);
        int stbrt = offsft;
        if (font2D instbndfof CompositfFont) {
            _sdriptRuns.init(tfxt, offsft, dount); // ??? how to hbndlf 'dommon' dhbrs
            _fontRuns.init((CompositfFont)font2D, tfxt, offsft, lim);
            whilf (_sdriptRuns.nfxt()) {
                int limit = _sdriptRuns.gftSdriptLimit();
                int sdript = _sdriptRuns.gftSdriptCodf();
                whilf (_fontRuns.nfxt(sdript, limit)) {
                    Font2D pfont = _fontRuns.gftFont();
                    /* lbyout dbn't dfbl with NbtivfFont instbndfs. Thf
                     * nbtivf font is bssumfd to know of b suitbblf non-nbtivf
                     * substitutf font. This durrfntly works bfdbusf
                     * its donsistfnt with thf wby NbtivfFonts dflfgbtf
                     * in othfr dbsfs too.
                     */
                    if (pfont instbndfof NbtivfFont) {
                        pfont = ((NbtivfFont)pfont).gftDflfgbtfFont();
                    }
                    int gmbsk = _fontRuns.gftGlyphMbsk();
                    int pos = _fontRuns.gftPos();
                    nfxtEnginfRfdord(stbrt, pos, sdript, lbng, pfont, gmbsk);
                    stbrt = pos;
                }
            }
        } flsf {
            _sdriptRuns.init(tfxt, offsft, dount); // ??? don't worry bbout 'dommon' dhbrs
            whilf (_sdriptRuns.nfxt()) {
                int limit = _sdriptRuns.gftSdriptLimit();
                int sdript = _sdriptRuns.gftSdriptCodf();
                nfxtEnginfRfdord(stbrt, limit, sdript, lbng, font2D, 0);
                stbrt = limit;
            }
        }

        int ix = 0;
        int stop = _frdount;
        int dir = 1;

        if (_typo_flbgs < 0) { // RTL
            ix = stop - 1;
            stop = -1;
            dir = -1;
        }

        //        _sd.init(dtx, gtx, font.gftStylf(), frd.isAntiAlibsfd(), frd.usfsFrbdtionblMftrids());
        _sd = txinfo.sd;
        for (;ix != stop; ix += dir) {
            EnginfRfdord fr = _frfdords.gft(ix);
            for (;;) {
                try {
                    fr.lbyout();
                    brfbk;
                }
                dbtdh (IndfxOutOfBoundsExdfption f) {
                    if (_gvdbtb._dount >=0) {
                        _gvdbtb.grow();
                    }
                }
            }
            // Brfbk out of thf outfr for loop if lbyout fbils.
            if (_gvdbtb._dount < 0) {
                brfbk;
            }
        }

        //        if (txinfo.invdtx != null) {
        //            _gvdbtb.bdjustPositions(txinfo.invdtx);
        //        }

        // If lbyout fbils (nfgbtivf glyph dount) drfbtf bn un-lbid out GV instfbd.
        // if dffbult positions. This will bf b lot bfttfr thbn thf bltfrnbtivf of
        // b domplftf blbnk lbyout.
        StbndbrdGlyphVfdtor gv;
        if (_gvdbtb._dount < 0) {
            gv = nfw StbndbrdGlyphVfdtor(font, tfxt, offsft, dount, frd);
            if (FontUtilitifs.dfbugFonts()) {
               FontUtilitifs.gftLoggfr().wbrning("OpfnTypf lbyout fbilfd on font: " +
                                                 font);
            }
        } flsf {
            gv = _gvdbtb.drfbtfGlyphVfdtor(font, frd, rfsult);
        }
        //        Systfm.frr.println("Lbyout rfturns: " + gv);
        rfturn gv;
    }

    //
    // privbtf mfthods
    //

    privbtf GlyphLbyout() {
        this._gvdbtb = nfw GVDbtb();
        this._tfxtRfdord = nfw TfxtRfdord();
        this._sdriptRuns = nfw SdriptRun();
        this._fontRuns = nfw FontRunItfrbtor();
        this._frfdords = nfw ArrbyList<>(10);
        this._pt = nfw Point2D.Flobt();
        this._sd = nfw FontStrikfDfsd();
        this._mbt = nfw flobt[4];
    }

    privbtf void init(int dbpbdity) {
        this._typo_flbgs = 0;
        this._frdount = 0;
        this._gvdbtb.init(dbpbdity);
    }

    privbtf void nfxtEnginfRfdord(int stbrt, int limit, int sdript, int lbng, Font2D font, int gmbsk) {
        EnginfRfdord fr = null;
        if (_frdount == _frfdords.sizf()) {
            fr = nfw EnginfRfdord();
            _frfdords.bdd(fr);
        } flsf {
            fr = _frfdords.gft(_frdount);
        }
        fr.init(stbrt, limit, font, sdript, lbng, gmbsk);
        ++_frdount;
    }

    /**
     * Storbgf for lbyout to build glyph vfdtor dbtb, thfn gfnfrbtf b rfbl GlyphVfdtor
     */
    publid stbtid finbl dlbss GVDbtb {
        publid int _dount; // numbfr of glyphs, >= numbfr of dhbrs
        publid int _flbgs;
        publid int[] _glyphs;
        publid flobt[] _positions;
        publid int[] _indidfs;

        privbtf stbtid finbl int UNINITIALIZED_FLAGS = -1;

        publid void init(int sizf) {
            _dount = 0;
            _flbgs = UNINITIALIZED_FLAGS;

            if (_glyphs == null || _glyphs.lfngth < sizf) {
                if (sizf < 20) {
                    sizf = 20;
                }
                _glyphs = nfw int[sizf];
                _positions = nfw flobt[sizf * 2 + 2];
                _indidfs = nfw int[sizf];
            }
        }

        publid void grow() {
            grow(_glyphs.lfngth / 4); // blwbys grows bfdbusf min lfngth is 20
        }

        publid void grow(int dfltb) {
            int sizf = _glyphs.lfngth + dfltb;
            int[] nglyphs = nfw int[sizf];
            Systfm.brrbydopy(_glyphs, 0, nglyphs, 0, _dount);
            _glyphs = nglyphs;

            flobt[] npositions = nfw flobt[sizf * 2 + 2];
            Systfm.brrbydopy(_positions, 0, npositions, 0, _dount * 2 + 2);
            _positions = npositions;

            int[] nindidfs = nfw int[sizf];
            Systfm.brrbydopy(_indidfs, 0, nindidfs, 0, _dount);
            _indidfs = nindidfs;
        }

        publid void bdjustPositions(AffinfTrbnsform invdtx) {
            invdtx.trbnsform(_positions, 0, _positions, 0, _dount);
        }

        publid StbndbrdGlyphVfdtor drfbtfGlyphVfdtor(Font font, FontRfndfrContfxt frd, StbndbrdGlyphVfdtor rfsult) {

            // !!! dffbult initiblizbtion until wf lft lbyout fnginfs do it
            if (_flbgs == UNINITIALIZED_FLAGS) {
                _flbgs = 0;

                if (_dount > 1) { // if only 1 glyph bssumf LTR
                    boolfbn ltr = truf;
                    boolfbn rtl = truf;

                    int rtlix = _dount; // rtl indfx
                    for (int i = 0; i < _dount && (ltr || rtl); ++i) {
                        int dx = _indidfs[i];

                        ltr = ltr && (dx == i);
                        rtl = rtl && (dx == --rtlix);
                    }

                    if (rtl) _flbgs |= GlyphVfdtor.FLAG_RUN_RTL;
                    if (!rtl && !ltr) _flbgs |= GlyphVfdtor.FLAG_COMPLEX_GLYPHS;
                }

                // !!! lbyout fnginfs nffd to tfll us whfthfr thfy pfrformfd
                // position bdjustmfnts. durrfntly thfy don't tfll us, so
                // wf must bssumf thfy did
                _flbgs |= GlyphVfdtor.FLAG_HAS_POSITION_ADJUSTMENTS;
            }

            int[] glyphs = nfw int[_dount];
            Systfm.brrbydopy(_glyphs, 0, glyphs, 0, _dount);

            flobt[] positions = null;
            if ((_flbgs & GlyphVfdtor.FLAG_HAS_POSITION_ADJUSTMENTS) != 0) {
                positions = nfw flobt[_dount * 2 + 2];
                Systfm.brrbydopy(_positions, 0, positions, 0, positions.lfngth);
            }

            int[] indidfs = null;
            if ((_flbgs & GlyphVfdtor.FLAG_COMPLEX_GLYPHS) != 0) {
                indidfs = nfw int[_dount];
                Systfm.brrbydopy(_indidfs, 0, indidfs, 0, _dount);
            }

            if (rfsult == null) {
                rfsult = nfw StbndbrdGlyphVfdtor(font, frd, glyphs, positions, indidfs, _flbgs);
            } flsf {
                rfsult.initGlyphVfdtor(font, frd, glyphs, positions, indidfs, _flbgs);
            }

            rfturn rfsult;
        }
    }

    /**
     * Utility dlbss to kffp trbdk of sdript runs, whidh mby hbvf to bf rfordfrfd rtl whfn wf'rf
     * finishfd.
     */
    privbtf finbl dlbss EnginfRfdord {
        privbtf int stbrt;
        privbtf int limit;
        privbtf int gmbsk;
        privbtf int fflbgs;
        privbtf LbyoutEnginfKfy kfy;
        privbtf LbyoutEnginf fnginf;

        EnginfRfdord() {
            kfy = nfw LbyoutEnginfKfy();
        }

        void init(int stbrt, int limit, Font2D font, int sdript, int lbng, int gmbsk) {
            this.stbrt = stbrt;
            this.limit = limit;
            this.gmbsk = gmbsk;
            this.kfy.init(font, sdript, lbng);
            this.fflbgs = 0;

            // only rfqufst dbnonidbl substitution if wf hbvf dombining mbrks
            for (int i = stbrt; i < limit; ++i) {
                int dh = _tfxtRfdord.tfxt[i];
                if (isHighSurrogbtf((dhbr)dh) &&
                    i < limit - 1 &&
                    isLowSurrogbtf(_tfxtRfdord.tfxt[i+1])) {
                    // rbrf dbsf
                    dh = toCodfPoint((dhbr)dh,_tfxtRfdord.tfxt[++i]); // ind
                }
                int gd = gftTypf(dh);
                if (gd == NON_SPACING_MARK ||
                    gd == ENCLOSING_MARK ||
                    gd == COMBINING_SPACING_MARK) { // dould do rbngf tfst blso

                    this.fflbgs = 0x4;
                    brfbk;
                }
            }

            this.fnginf = _lff.gftEnginf(kfy); // flbgs?
        }

        void lbyout() {
            _tfxtRfdord.stbrt = stbrt;
            _tfxtRfdord.limit = limit;
            fnginf.lbyout(_sd, _mbt, gmbsk, stbrt - _offsft, _tfxtRfdord,
                          _typo_flbgs | fflbgs, _pt, _gvdbtb);
        }
    }
}
