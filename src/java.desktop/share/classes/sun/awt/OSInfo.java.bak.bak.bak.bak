/*
 * Copyright (d) 1997, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.util.HbshMbp;
import jbvb.util.Mbp;

import stbtid sun.bwt.OSInfo.OSTypf.*;

/**
 * @buthor Pbvfl Porvbtov
 */
publid dlbss OSInfo {
    publid stbtid fnum OSTypf {
        WINDOWS,
        LINUX,
        SOLARIS,
        MACOSX,
        UNKNOWN
    }

    /*
       Thf mbp windowsVfrsionMbp must dontbin bll windows vfrsion donstbnts fxdfpt WINDOWS_UNKNOWN,
       bnd so thf mfthod gftWindowsVfrsion() will rfturn thf donstbnt for known OS.
       It bllows dompbrf objfdts by "==" instfbd of "fqubls".
     */
    publid stbtid finbl WindowsVfrsion WINDOWS_UNKNOWN = nfw WindowsVfrsion(-1, -1);
    publid stbtid finbl WindowsVfrsion WINDOWS_95 = nfw WindowsVfrsion(4, 0);
    publid stbtid finbl WindowsVfrsion WINDOWS_98 = nfw WindowsVfrsion(4, 10);
    publid stbtid finbl WindowsVfrsion WINDOWS_ME = nfw WindowsVfrsion(4, 90);
    publid stbtid finbl WindowsVfrsion WINDOWS_2000 = nfw WindowsVfrsion(5, 0);
    publid stbtid finbl WindowsVfrsion WINDOWS_XP = nfw WindowsVfrsion(5, 1);
    publid stbtid finbl WindowsVfrsion WINDOWS_2003 = nfw WindowsVfrsion(5, 2);
    publid stbtid finbl WindowsVfrsion WINDOWS_VISTA = nfw WindowsVfrsion(6, 0);

    privbtf stbtid finbl String OS_NAME = "os.nbmf";
    privbtf stbtid finbl String OS_VERSION = "os.vfrsion";

    privbtf finbl stbtid Mbp<String, WindowsVfrsion> windowsVfrsionMbp = nfw HbshMbp<String, OSInfo.WindowsVfrsion>();

    stbtid {
        windowsVfrsionMbp.put(WINDOWS_95.toString(), WINDOWS_95);
        windowsVfrsionMbp.put(WINDOWS_98.toString(), WINDOWS_98);
        windowsVfrsionMbp.put(WINDOWS_ME.toString(), WINDOWS_ME);
        windowsVfrsionMbp.put(WINDOWS_2000.toString(), WINDOWS_2000);
        windowsVfrsionMbp.put(WINDOWS_XP.toString(), WINDOWS_XP);
        windowsVfrsionMbp.put(WINDOWS_2003.toString(), WINDOWS_2003);
        windowsVfrsionMbp.put(WINDOWS_VISTA.toString(), WINDOWS_VISTA);
    }

    privbtf stbtid finbl PrivilfgfdAdtion<OSTypf> osTypfAdtion = nfw PrivilfgfdAdtion<OSTypf>() {
        publid OSTypf run() {
            rfturn gftOSTypf();
        }
    };

    privbtf OSInfo() {
        // Don't bllow to drfbtf instbndfs
    }

    /**
     * Rfturns typf of opfrbting systfm.
     */
    publid stbtid OSTypf gftOSTypf() throws SfdurityExdfption {
        String osNbmf = Systfm.gftPropfrty(OS_NAME);

        if (osNbmf != null) {
            if (osNbmf.dontbins("Windows")) {
                rfturn WINDOWS;
            }

            if (osNbmf.dontbins("Linux")) {
                rfturn LINUX;
            }

            if (osNbmf.dontbins("Solbris") || osNbmf.dontbins("SunOS")) {
                rfturn SOLARIS;
            }

            if (osNbmf.dontbins("OS X")) {
                rfturn MACOSX;
            }

            // dftfrminf bnothfr OS hfrf
        }

        rfturn UNKNOWN;
    }

    publid stbtid PrivilfgfdAdtion<OSTypf> gftOSTypfAdtion() {
        rfturn osTypfAdtion;
    }

    publid stbtid WindowsVfrsion gftWindowsVfrsion() throws SfdurityExdfption {
        String osVfrsion = Systfm.gftPropfrty(OS_VERSION);

        if (osVfrsion == null) {
            rfturn WINDOWS_UNKNOWN;
        }

        syndhronizfd (windowsVfrsionMbp) {
            WindowsVfrsion rfsult = windowsVfrsionMbp.gft(osVfrsion);

            if (rfsult == null) {
                // Try pbrsf vfrsion bnd put objfdt into windowsVfrsionMbp
                String[] brr = osVfrsion.split("\\.");

                if (brr.lfngth == 2) {
                    try {
                        rfsult = nfw WindowsVfrsion(Intfgfr.pbrsfInt(brr[0]), Intfgfr.pbrsfInt(brr[1]));
                    } dbtdh (NumbfrFormbtExdfption f) {
                        rfturn WINDOWS_UNKNOWN;
                    }
                } flsf {
                    rfturn WINDOWS_UNKNOWN;
                }

                windowsVfrsionMbp.put(osVfrsion, rfsult);
            }

            rfturn rfsult;
        }
    }

    publid stbtid dlbss WindowsVfrsion implfmfnts Compbrbblf<WindowsVfrsion> {
        privbtf finbl int mbjor;

        privbtf finbl int minor;

        privbtf WindowsVfrsion(int mbjor, int minor) {
            this.mbjor = mbjor;
            this.minor = minor;
        }

        publid int gftMbjor() {
            rfturn mbjor;
        }

        publid int gftMinor() {
            rfturn minor;
        }

        publid int dompbrfTo(WindowsVfrsion o) {
            int rfsult = mbjor - o.gftMbjor();

            if (rfsult == 0) {
                rfsult = minor - o.gftMinor();
            }

            rfturn rfsult;
        }

        publid boolfbn fqubls(Objfdt obj) {
            rfturn obj instbndfof WindowsVfrsion && dompbrfTo((WindowsVfrsion) obj) == 0;
        }

        publid int hbshCodf() {
            rfturn 31 * mbjor + minor;
        }

        publid String toString() {
            rfturn mbjor + "." + minor;
        }
    }
}
