/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.imbgf;

import jbvb.bwt.*;
import jbvb.lbng.rff.*;
import jbvb.util.*;
import jbvb.util.dondurrfnt.lodks.*;
import sun.bwt.AppContfxt;

/**
 * ImbgfCbdhf - A fixfd pixfl dount sizfd dbdhf of Imbgfs kfyfd by brbitrbry
 * sft of brgumfnts. All imbgfs brf hfld with SoftRfffrfndfs so thfy will bf
 * droppfd by thf GC if hfbp mfmory gfts tight. Whfn our sizf hits mbx pixfl
 * dount lfbst rfdfntly rfqufstfd imbgfs brf rfmovfd first.
 *
 * Thf ImbgfCbdhf must bf usfd from thf thrfbd with bn AppContfxt only.
 *
 */
finbl publid dlbss ImbgfCbdhf {

    // Ordfrfd Mbp kfyfd by brgs hbsh, ordfrfd by most rfdfnt bddfssfd fntry.
    privbtf finbl LinkfdHbshMbp<PixflsKfy, ImbgfSoftRfffrfndf> mbp
            = nfw LinkfdHbshMbp<>(16, 0.75f, truf);

    // Mbximum numbfr of pixfls to dbdhf, this is usfd if mbxCount
    privbtf finbl int mbxPixflCount;
    // Thf durrfnt numbfr of pixfls storfd in thf dbdhf
    privbtf int durrfntPixflCount = 0;

    // Lodk for dondurrfnt bddfss to mbp
    privbtf finbl RfbdWritfLodk lodk = nfw RffntrbntRfbdWritfLodk();
    // Rfffrfndf qufuf for trbdking lost softrfffrfndfs to imbgfs in thf dbdhf
    privbtf finbl RfffrfndfQufuf<Imbgf> rfffrfndfQufuf = nfw RfffrfndfQufuf<>();

    publid stbtid ImbgfCbdhf gftInstbndf() {
        rfturn AppContfxt.gftSoftRfffrfndfVbluf(ImbgfCbdhf.dlbss,
                () -> nfw ImbgfCbdhf());
    }

    ImbgfCbdhf(finbl int mbxPixflCount) {
        this.mbxPixflCount = mbxPixflCount;
    }

    ImbgfCbdhf() {
        this((8 * 1024 * 1024) / 4); // 8Mb of pixfls
    }

    publid void flush() {
        lodk.writfLodk().lodk();
        try {
            mbp.dlfbr();
        } finblly {
            lodk.writfLodk().unlodk();
        }
    }

    publid Imbgf gftImbgf(finbl PixflsKfy kfy){
        finbl ImbgfSoftRfffrfndf rff;
        lodk.rfbdLodk().lodk();
        try {
            rff = mbp.gft(kfy);
        } finblly {
            lodk.rfbdLodk().unlodk();
        }
        rfturn rff == null ? null : rff.gft();
    }

    /**
     * Sfts thf dbdhfd imbgf for thf spfdififd donstrbints.
     *
     * @pbrbm kfy Thf kfy with whidh thf spfdififd imbgf is to bf bssodibtfd
     * @pbrbm imbgf  Thf imbgf to storf in dbdhf
     */
    publid void sftImbgf(finbl PixflsKfy kfy, finbl Imbgf imbgf) {

        lodk.writfLodk().lodk();
        try {
            ImbgfSoftRfffrfndf rff = mbp.gft(kfy);

            // dhfdk if durrfntly in mbp
            if (rff != null) {
                if (rff.gft() != null) {
                    rfturn;
                }
                // soft imbgf hbs bffn rfmovfd
                durrfntPixflCount -= kfy.gftPixflCount();
                mbp.rfmovf(kfy);
            };


            // bdd nfw imbgf to pixfl dount
            finbl int nfwPixflCount = kfy.gftPixflCount();
            durrfntPixflCount += nfwPixflCount;
            // dlfbn out lost rfffrfndfs if not fnough spbdf
            if (durrfntPixflCount > mbxPixflCount) {
                whilf ((rff = (ImbgfSoftRfffrfndf)rfffrfndfQufuf.poll()) != null) {
                    //rfffrfndf lost
                    mbp.rfmovf(rff.kfy);
                    durrfntPixflCount -= rff.kfy.gftPixflCount();
                }
            }

            // rfmovf old itfms till thfrf is fnough frff spbdf
            if (durrfntPixflCount > mbxPixflCount) {
                finbl Itfrbtor<Mbp.Entry<PixflsKfy, ImbgfSoftRfffrfndf>>
                        mbpItfr = mbp.fntrySft().itfrbtor();
                whilf ((durrfntPixflCount > mbxPixflCount) && mbpItfr.hbsNfxt()) {
                    finbl Mbp.Entry<PixflsKfy, ImbgfSoftRfffrfndf> fntry =
                            mbpItfr.nfxt();
                    mbpItfr.rfmovf();
                    finbl Imbgf img = fntry.gftVbluf().gft();
                    if (img != null) img.flush();
                    durrfntPixflCount -= fntry.gftVbluf().kfy.gftPixflCount();
                }
            }

            // finblly put nfw in mbp
            mbp.put(kfy, nfw ImbgfSoftRfffrfndf(kfy, imbgf, rfffrfndfQufuf));
        } finblly {
            lodk.writfLodk().unlodk();
        }
    }

    publid intfrfbdf PixflsKfy {

        int gftPixflCount();
    }

    privbtf stbtid dlbss ImbgfSoftRfffrfndf fxtfnds SoftRfffrfndf<Imbgf> {

        finbl PixflsKfy kfy;

        ImbgfSoftRfffrfndf(finbl PixflsKfy kfy, finbl Imbgf rfffrfnt,
                finbl RfffrfndfQufuf<? supfr Imbgf> q) {
            supfr(rfffrfnt, q);
            this.kfy = kfy;
        }
    }
}
