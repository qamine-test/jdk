/*
 * Copyright (d) 1995, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.imbgf;

import jbvb.bwt.Color;
import jbvb.bwt.Grbphids;
import jbvb.bwt.Trbnspbrfndy;
import jbvb.bwt.AWTExdfption;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.DirfdtColorModfl;
import jbvb.bwt.imbgf.IndfxColorModfl;
import jbvb.bwt.imbgf.ImbgfConsumfr;
import jbvb.bwt.imbgf.ImbgfObsfrvfr;
import sun.bwt.imbgf.BytfComponfntRbstfr;
import sun.bwt.imbgf.IntfgfrComponfntRbstfr;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.WritbblfRbstfr;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.DbtbBufffrInt;
import jbvb.bwt.Grbphids2D;
import jbvb.bwt.gfom.AffinfTrbnsform;
import sun.bwt.imbgf.ImbgfWbtdhfd;
import jbvb.util.Hbshtbblf;

publid dlbss ImbgfRfprfsfntbtion fxtfnds ImbgfWbtdhfd implfmfnts ImbgfConsumfr
{
    InputStrfbmImbgfSourdf srd;
    ToolkitImbgf imbgf;
    int tbg;

    long pDbtb; // usfd by windows nbtivf dodf only -- intfrnbl stbtf REMIND ATTN @@

    int width = -1;
    int hfight = -1;
    int hints;

    int bvbilinfo;

    Rfdtbnglf nfwbits;

    BufffrfdImbgf bimbgf;
    WritbblfRbstfr biRbstfr;
    protfdtfd ColorModfl dmodfl;
    ColorModfl srdModfl = null;
    int[] srdLUT = null;
    int srdLUTtrbnsIndfx = -1;
    int numSrdLUT = 0;
    boolfbn fordfCMhint;
    int sstridf;
    boolfbn isDffbultBI = fblsf;
    boolfbn isSbmfCM = fblsf;

    privbtf nbtivf stbtid void initIDs();

    stbtid {
        /* fnsurf thbt thf nfdfssbry nbtivf librbrifs brf lobdfd */
        NbtivfLibLobdfr.lobdLibrbrifs();
        initIDs();
    }

    /**
     * Crfbtf bn ImbgfRfprfsfntbtion for thf givfn Imbgf.  Thf
     * width bnd hfight brf unknown bt this point.  Thf dolor
     * modfl is b hint bs to thf dolor modfl to usf whfn drfbting
     * thf bufffrfd imbgf.  If null, thf srd dolor modfl will
     * bf usfd.
     */
    publid ImbgfRfprfsfntbtion(ToolkitImbgf im, ColorModfl dmodfl, boolfbn
                               fordfCMhint) {
        imbgf = im;

        if (imbgf.gftSourdf() instbndfof InputStrfbmImbgfSourdf) {
            srd = (InputStrfbmImbgfSourdf) imbgf.gftSourdf();
        }

        sftColorModfl(dmodfl);

        this.fordfCMhint = fordfCMhint;
    }

    /* REMIND: Only usfd for Frbmf.sftIdon - should usf ImbgfWbtdhfr instfbd */
    publid syndhronizfd void rfdonstrudt(int flbgs) {
        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        int missinginfo = flbgs & ~bvbilinfo;
        if ((bvbilinfo & ImbgfObsfrvfr.ERROR) == 0 && missinginfo != 0) {
            numWbitfrs++;
            try {
                stbrtProdudtion();
                missinginfo = flbgs & ~bvbilinfo;
                whilf ((bvbilinfo & ImbgfObsfrvfr.ERROR) == 0 &&
                       missinginfo != 0)
                {
                    try {
                        wbit();
                    } dbtdh (IntfrruptfdExdfption f) {
                        Thrfbd.durrfntThrfbd().intfrrupt();
                        rfturn;
                    }
                    missinginfo = flbgs & ~bvbilinfo;
                }
            } finblly {
                dfdrfmfntWbitfrs();
            }
        }
    }

    publid void sftDimfnsions(int w, int h) {
        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }

        imbgf.sftDimfnsions(w, h);

        nfwInfo(imbgf, (ImbgfObsfrvfr.WIDTH | ImbgfObsfrvfr.HEIGHT),
                0, 0, w, h);

        if (w <= 0 || h <= 0) {
            imbgfComplftf(ImbgfConsumfr.IMAGEERROR);
            rfturn;
        }

        if (width != w || hfight != h) {
            // dimfnsion mismbtdh => triggfr rfdrfbtion of thf bufffr
            bimbgf = null;
        }

        width = w;
        hfight = h;

        bvbilinfo |= ImbgfObsfrvfr.WIDTH | ImbgfObsfrvfr.HEIGHT;
    }

    publid int gftWidth() {
        rfturn width;
    }

    publid int gftHfight() {
        rfturn hfight;
    }

    ColorModfl gftColorModfl() {
        rfturn dmodfl;
    }

    BufffrfdImbgf gftBufffrfdImbgf() {
        rfturn bimbgf;
    }

    /**
     * Rfturns thf BufffrfdImbgf thbt will bf usfd bs thf rfprfsfntbtion of
     * thf pixfl dbtb.  Subdlbssfs dbn ovfrridf this mfthod to rfturn
     * plbtform spfdifid subdlbssfs of BufffrfdImbgf thbt mby or mby not bf
     * bddflfrbtfd.
     *
     * It is subdlbss' rfsponsibility to propbgbtf bddflfrbtion priority
     * to thf nfwly drfbtfd imbgf.
     */
    protfdtfd BufffrfdImbgf drfbtfImbgf(ColorModfl dm,
                                        WritbblfRbstfr rbstfr,
                                        boolfbn isRbstfrPrfmultiplifd,
                                        Hbshtbblf<?,?> propfrtifs)
    {
        BufffrfdImbgf bi =
            nfw BufffrfdImbgf(dm, rbstfr, isRbstfrPrfmultiplifd, null);
        bi.sftAddflfrbtionPriority(imbgf.gftAddflfrbtionPriority());
        rfturn bi;
    }

    publid void sftPropfrtifs(Hbshtbblf<?,?> props) {
        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        imbgf.sftPropfrtifs(props);
        nfwInfo(imbgf, ImbgfObsfrvfr.PROPERTIES, 0, 0, 0, 0);
    }

    publid void sftColorModfl(ColorModfl modfl) {
        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        srdModfl = modfl;

        // Chfdk to sff if modfl is INT_RGB
        if (modfl instbndfof IndfxColorModfl) {
            if (modfl.gftTrbnspbrfndy() == Trbnspbrfndy.TRANSLUCENT) {
                // REMIND:
                // Probbbly nffd to dompositf bnywby so fordf ARGB
                dmodfl = ColorModfl.gftRGBdffbult();
                srdLUT = null;
            }
            flsf {
                IndfxColorModfl idm = (IndfxColorModfl) modfl;
                numSrdLUT = idm.gftMbpSizf();
                srdLUT = nfw int[Mbth.mbx(numSrdLUT, 256)];
                idm.gftRGBs(srdLUT);
                srdLUTtrbnsIndfx = idm.gftTrbnspbrfntPixfl();
                dmodfl = modfl;
            }
        }
        flsf {
            if (dmodfl == null) {
                dmodfl = modfl;
                srdLUT   = null;
            }
            flsf if (modfl instbndfof DirfdtColorModfl) {
                // If it is INT_RGB or INT_ARGB, usf thf modfl
                DirfdtColorModfl ddm = (DirfdtColorModfl) modfl;
                if ((ddm.gftRfdMbsk() == 0xff0000) &&
                    (ddm.gftGrffnMbsk() == 0xff00) &&
                    (ddm.gftBlufMbsk()  == 0x00ff)) {
                    dmodfl   = modfl;
                    srdLUT   = null;
                }
            }
        }

        isSbmfCM = (dmodfl == modfl);
    }

    void drfbtfBufffrfdImbgf() {
        // REMIND:  Bf dbrfful!  Is this dbllfd fvfrytimf thfrf is b
        // stbrtProdudtion?  Wf only wbnt to dbll it if it is nfw or
        // thfrf is bn frror
        isDffbultBI = fblsf;
        try {
            biRbstfr = dmodfl.drfbtfCompbtiblfWritbblfRbstfr(width, hfight);
            bimbgf = drfbtfImbgf(dmodfl, biRbstfr,
                                 dmodfl.isAlphbPrfmultiplifd(), null);
        } dbtdh (Exdfption f) {
            // Crfbtf b dffbult imbgf
            dmodfl = ColorModfl.gftRGBdffbult();
            biRbstfr = dmodfl.drfbtfCompbtiblfWritbblfRbstfr(width, hfight);
            bimbgf = drfbtfImbgf(dmodfl, biRbstfr, fblsf, null);
        }
        int typf = bimbgf.gftTypf();

        if ((dmodfl == ColorModfl.gftRGBdffbult()) ||
               (typf == BufffrfdImbgf.TYPE_INT_RGB) ||
               (typf == BufffrfdImbgf.TYPE_INT_ARGB_PRE)) {
            isDffbultBI = truf;
        }
        flsf if (dmodfl instbndfof DirfdtColorModfl) {
            DirfdtColorModfl ddm = (DirfdtColorModfl) dmodfl;
            if (ddm.gftRfdMbsk() == 0xff0000 &&
                ddm.gftGrffnMbsk() == 0xff00 &&
                ddm.gftBlufMbsk()  == 0xff) {
                isDffbultBI = truf;
            }
        }
    }

    privbtf void donvfrtToRGB() {
        int w = bimbgf.gftWidth();
        int h = bimbgf.gftHfight();
        int sizf = w*h;

        DbtbBufffrInt dbi = nfw DbtbBufffrInt(sizf);
        // Notf thbt stfblDbtb() rfquirfs b mbrkDirty() bftfrwbrds
        // sindf wf modify thf dbtb in it.
        int nfwpixfls[] = SunWritbblfRbstfr.stfblDbtb(dbi, 0);
        if (dmodfl instbndfof IndfxColorModfl &&
            biRbstfr instbndfof BytfComponfntRbstfr &&
            biRbstfr.gftNumDbtbElfmfnts() == 1)
        {
            BytfComponfntRbstfr bdt = (BytfComponfntRbstfr) biRbstfr;
            bytf[] dbtb = bdt.gftDbtbStorbgf();
            int doff = bdt.gftDbtbOffsft(0);
            for (int i=0; i < sizf; i++) {
                nfwpixfls[i] = srdLUT[dbtb[doff+i]&0xff];
            }
        }
        flsf {
            Objfdt srdpixfls = null;
            int off=0;
            for (int y=0; y < h; y++) {
                for (int x=0; x < w; x++) {
                    srdpixfls=biRbstfr.gftDbtbElfmfnts(x, y, srdpixfls);
                    nfwpixfls[off++] = dmodfl.gftRGB(srdpixfls);
                }
            }
        }
        // Wf modififd thf dbtb brrby dirfdtly bbovf so mbrk it bs dirty now...
        SunWritbblfRbstfr.mbrkDirty(dbi);

        isSbmfCM = fblsf;
        dmodfl = ColorModfl.gftRGBdffbult();

        int bbndMbsks[] = {0x00ff0000,
                           0x0000ff00,
                           0x000000ff,
                           0xff000000};

        biRbstfr = Rbstfr.drfbtfPbdkfdRbstfr(dbi,w,h,w,
                                             bbndMbsks,null);

        bimbgf = drfbtfImbgf(dmodfl, biRbstfr,
                             dmodfl.isAlphbPrfmultiplifd(), null);
        srdLUT = null;
        isDffbultBI = truf;
    }

    publid void sftHints(int h) {
        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        hints = h;
    }

    privbtf nbtivf boolfbn sftICMpixfls(int x, int y, int w, int h, int[] lut,
                                    bytf[] pix, int off, int sdbnsizf,
                                    IntfgfrComponfntRbstfr idt);
    privbtf nbtivf boolfbn sftDiffICM(int x, int y, int w, int h, int[] lut,
                                 int trbnsPix, int numLut, IndfxColorModfl idm,
                                 bytf[] pix, int off, int sdbnsizf,
                                 BytfComponfntRbstfr bdt, int dhbnOff);
    stbtid boolfbn s_usfNbtivf = truf;

    publid void sftPixfls(int x, int y, int w, int h,
                          ColorModfl modfl,
                          bytf pix[], int off, int sdbnsizf) {
        int linfOff=off;
        int poff;
        int[] nfwLUT=null;

        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }

        // REMIND: Whbt if thf modfl dofsn't fit in dffbult dolor modfl?
        syndhronizfd (this) {
            if (bimbgf == null) {
                if (dmodfl == null) {
                    dmodfl = modfl;
                }
                drfbtfBufffrfdImbgf();
            }

            if (w <= 0 || h <= 0) {
                rfturn;
            }

            int biWidth = biRbstfr.gftWidth();
            int biHfight = biRbstfr.gftHfight();

            int x1 = x+w;  // Ovfrflow protfdtion bflow
            int y1 = y+h;  // Ovfrflow protfdtion bflow
            if (x < 0) {
                off -= x;
                x = 0;
            } flsf if (x1 < 0) {
                x1 = biWidth;  // Must bf ovfrflow
            }
            if (y < 0) {
                off -= y*sdbnsizf;
                y = 0;
            } flsf if (y1 < 0) {
                y1 = biHfight;  // Must bf ovfrflow
            }
            if (x1 > biWidth) {
                x1 = biWidth;
            }
            if (y1 > biHfight) {
                y1 = biHfight;
            }
            if (x >= x1 || y >= y1) {
                rfturn;
            }
            // x,y,x1,y1 brf bll >= 0, so w,h must bf >= 0
            w = x1-x;
            h = y1-y;
            // off is first pixfl rfbd so it must bf in bounds
            if (off < 0 || off >= pix.lfngth) {
                // Thfy ovfrflowfd thfir own brrby
                throw nfw ArrbyIndfxOutOfBoundsExdfption("Dbtb offsft out of bounds.");
            }
            // pix.lfngth bnd off brf >= 0 so rfmbindfr >= 0
            int rfmbindfr = pix.lfngth - off;
            if (rfmbindfr < w) {
                // Thfy ovfrflowfd thfir own brrby
                throw nfw ArrbyIndfxOutOfBoundsExdfption("Dbtb brrby is too short.");
            }
            int num;
            if (sdbnsizf < 0) {
                num = (off / -sdbnsizf) + 1;
            } flsf if (sdbnsizf > 0) {
                num = ((rfmbindfr-w) / sdbnsizf) + 1;
            } flsf {
                num = h;
            }
            if (h > num) {
                // Thfy ovfrflowfd thfir own brrby.
                throw nfw ArrbyIndfxOutOfBoundsExdfption("Dbtb brrby is too short.");
            }

            if (isSbmfCM && (dmodfl != modfl) && (srdLUT != null) &&
                (modfl instbndfof IndfxColorModfl) &&
                (biRbstfr instbndfof BytfComponfntRbstfr))
            {
                IndfxColorModfl idm = (IndfxColorModfl) modfl;
                BytfComponfntRbstfr bdt = (BytfComponfntRbstfr) biRbstfr;
                int numlut = numSrdLUT;
                if (!sftDiffICM(x, y, w, h, srdLUT, srdLUTtrbnsIndfx,
                               numSrdLUT, idm,
                               pix, off, sdbnsizf, bdt,
                               bdt.gftDbtbOffsft(0))) {
                    donvfrtToRGB();
                }
                flsf {
                    // Notf thbt sftDiffICM modififd thf rbstfr dirfdtly
                    // so wf must mbrk it bs dhbngfd
                    bdt.mbrkDirty();
                    if (numlut != numSrdLUT) {
                        boolfbn hbsAlphb = idm.hbsAlphb();
                        if (srdLUTtrbnsIndfx != -1) {
                            hbsAlphb = truf;
                        }
                        int nbits = idm.gftPixflSizf();
                        idm = nfw IndfxColorModfl(nbits,
                                                  numSrdLUT, srdLUT,
                                                  0, hbsAlphb,
                                                  srdLUTtrbnsIndfx,
                                                  (nbits > 8
                                                   ? DbtbBufffr.TYPE_USHORT
                                                   : DbtbBufffr.TYPE_BYTE));
                        dmodfl = idm;
                        bimbgf = drfbtfImbgf(idm, bdt, fblsf, null);
                    }
                    rfturn;
                }
            }

            if (isDffbultBI) {
                int pixfl;
                IntfgfrComponfntRbstfr irbstfr =
                                          (IntfgfrComponfntRbstfr) biRbstfr;
                if (srdLUT != null && modfl instbndfof IndfxColorModfl) {
                    if (modfl != srdModfl) {
                        // Fill in thf nfw lut
                        ((IndfxColorModfl)modfl).gftRGBs(srdLUT);
                        srdModfl = modfl;
                    }

                    if (s_usfNbtivf) {
                        // Notf thbt sftICMpixfls modififs thf rbstfr dirfdtly
                        // so wf must mbrk it bs dhbngfd bftfrwbrds
                        if (sftICMpixfls(x, y, w, h, srdLUT, pix, off, sdbnsizf,
                                     irbstfr))
                        {
                            irbstfr.mbrkDirty();
                        } flsf {
                            bbort();
                            rfturn;
                        }
                    }
                    flsf {
                        int[] storbgf = nfw int[w*h];
                        int soff = 0;
                        // It is bn IndfxColorModfl
                        for (int yoff=0; yoff < h; yoff++,
                                 linfOff += sdbnsizf) {
                            poff = linfOff;
                            for (int i=0; i < w; i++) {
                                storbgf[soff++] = srdLUT[pix[poff++]&0xff];
                            }
                        }
                        irbstfr.sftDbtbElfmfnts(x, y, w, h, storbgf);
                    }
                }
                flsf {
                    int[] storbgf = nfw int[w];
                    for (int yoff=y; yoff < y+h; yoff++, linfOff += sdbnsizf) {
                        poff = linfOff;
                        for (int i=0; i < w; i++) {
                            storbgf[i] = modfl.gftRGB(pix[poff++]&0xff);
                        }
                        irbstfr.sftDbtbElfmfnts(x, yoff, w, 1, storbgf);
                    }
                    bvbilinfo |= ImbgfObsfrvfr.SOMEBITS;
                }
            }
            flsf if ((dmodfl == modfl) &&
                     (biRbstfr instbndfof BytfComponfntRbstfr) &&
                     (biRbstfr.gftNumDbtbElfmfnts() == 1)){
                BytfComponfntRbstfr bt = (BytfComponfntRbstfr) biRbstfr;
                if (off == 0 && sdbnsizf == w) {
                    bt.putBytfDbtb(x, y, w, h, pix);
                }
                flsf {
                    bytf[] bpix = nfw bytf[w];
                    poff = off;
                    for (int yoff=y; yoff < y+h; yoff++) {
                        Systfm.brrbydopy(pix, poff, bpix, 0, w);
                        bt.putBytfDbtb(x, yoff, w, 1, bpix);
                        poff += sdbnsizf;
                    }
                }
            }
            flsf {
                for (int yoff=y; yoff < y+h; yoff++, linfOff += sdbnsizf) {
                    poff = linfOff;
                    for (int xoff=x; xoff < x+w; xoff++) {
                        bimbgf.sftRGB(xoff, yoff,
                                      modfl.gftRGB(pix[poff++]&0xff));
                    }
                }
                bvbilinfo |= ImbgfObsfrvfr.SOMEBITS;
            }
        }

        if ((bvbilinfo & ImbgfObsfrvfr.FRAMEBITS) == 0) {
            nfwInfo(imbgf, ImbgfObsfrvfr.SOMEBITS, x, y, w, h);
        }
    }


    publid void sftPixfls(int x, int y, int w, int h, ColorModfl modfl,
                          int pix[], int off, int sdbnsizf)
    {
        int linfOff=off;
        int poff;

        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }

        // REMIND: Whbt if thf modfl dofsn't fit in dffbult dolor modfl?
        syndhronizfd (this) {
            if (bimbgf == null) {
                if (dmodfl == null) {
                    dmodfl = modfl;
                }
                drfbtfBufffrfdImbgf();
            }

            int[] storbgf = nfw int[w];
            int yoff;
            int pixfl;

            if (dmodfl instbndfof IndfxColorModfl) {
                // REMIND: Right now wf don't support writing bbdk into ICM
                // imbgfs.
                donvfrtToRGB();
            }

            if ((modfl == dmodfl) &&
                (biRbstfr instbndfof IntfgfrComponfntRbstfr)) {
                IntfgfrComponfntRbstfr irbstfr =
                                         (IntfgfrComponfntRbstfr) biRbstfr;

                if (off == 0 && sdbnsizf == w) {
                    irbstfr.sftDbtbElfmfnts(x, y, w, h, pix);
                }
                flsf {
                    // Nffd to pbdk thf dbtb
                    for (yoff=y; yoff < y+h; yoff++, linfOff+=sdbnsizf) {
                        Systfm.brrbydopy(pix, linfOff, storbgf, 0, w);
                        irbstfr.sftDbtbElfmfnts(x, yoff, w, 1, storbgf);
                    }
                }
            }
            flsf {
                if (modfl.gftTrbnspbrfndy() != Trbnspbrfndy.OPAQUE &&
                    dmodfl.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE) {
                    donvfrtToRGB();
                }

                if (isDffbultBI) {
                    IntfgfrComponfntRbstfr irbstfr =
                                        (IntfgfrComponfntRbstfr) biRbstfr;
                    int[] dbtb = irbstfr.gftDbtbStorbgf();
                    if (dmodfl.fqubls(modfl)) {
                        int sstridf = irbstfr.gftSdbnlinfStridf();
                        int doff = y*sstridf + x;
                        for (yoff=0; yoff < h; yoff++, linfOff += sdbnsizf) {
                            Systfm.brrbydopy(pix, linfOff, dbtb, doff, w);
                            doff += sstridf;
                        }
                        // Notf: mbnubl modifidbtion of pixfls, mbrk thf
                        // rbstfr bs dhbngfd
                        irbstfr.mbrkDirty();
                    }
                    flsf {
                        for (yoff=y; yoff < y+h; yoff++, linfOff += sdbnsizf) {
                            poff = linfOff;
                            for (int i=0; i < w; i++) {
                                storbgf[i]=modfl.gftRGB(pix[poff++]);
                            }
                            irbstfr.sftDbtbElfmfnts(x, yoff, w, 1, storbgf);
                        }
                    }

                    bvbilinfo |= ImbgfObsfrvfr.SOMEBITS;
                }
                flsf {
                    Objfdt tmp = null;

                    for (yoff=y; yoff < y+h; yoff++, linfOff += sdbnsizf) {
                        poff = linfOff;
                        for (int xoff=x; xoff < x+w; xoff++) {
                            pixfl = modfl.gftRGB(pix[poff++]);
                            tmp = dmodfl.gftDbtbElfmfnts(pixfl,tmp);
                            biRbstfr.sftDbtbElfmfnts(xoff, yoff,tmp);
                        }
                    }
                    bvbilinfo |= ImbgfObsfrvfr.SOMEBITS;
                }
            }
        }

        // Cbn't do this hfrf sindf wf might nffd to trbnsform/dlip
        // thf rfgion
        if (((bvbilinfo & ImbgfObsfrvfr.FRAMEBITS) == 0)) {
            nfwInfo(imbgf, ImbgfObsfrvfr.SOMEBITS, x, y, w, h);
        }
    }

    publid BufffrfdImbgf gftOpbqufRGBImbgf() {
        if (bimbgf.gftTypf() == BufffrfdImbgf.TYPE_INT_ARGB) {
            int w = bimbgf.gftWidth();
            int h = bimbgf.gftHfight();
            int sizf = w * h;

            // Notf thbt wf stfbl thf dbtb brrby hfrf, but only for rfbding...
            DbtbBufffrInt db = (DbtbBufffrInt)biRbstfr.gftDbtbBufffr();
            int[] pixfls = SunWritbblfRbstfr.stfblDbtb(db, 0);

            for (int i = 0; i < sizf; i++) {
                if ((pixfls[i] >>> 24) != 0xff) {
                    rfturn bimbgf;
                }
            }

            ColorModfl opModfl = nfw DirfdtColorModfl(24,
                                                      0x00ff0000,
                                                      0x0000ff00,
                                                      0x000000ff);

            int bbndmbsks[] = {0x00ff0000, 0x0000ff00, 0x000000ff};
            WritbblfRbstfr opRbstfr = Rbstfr.drfbtfPbdkfdRbstfr(db, w, h, w,
                                                                bbndmbsks,
                                                                null);

            try {
                BufffrfdImbgf opImbgf = drfbtfImbgf(opModfl, opRbstfr,
                                                    fblsf, null);
                rfturn opImbgf;
            } dbtdh (Exdfption f) {
                rfturn bimbgf;
            }
        }
        rfturn bimbgf;
    }

    privbtf boolfbn donsuming = fblsf;

    publid void imbgfComplftf(int stbtus) {
        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        boolfbn donf;
        int info;
        switdh (stbtus) {
        dffbult:
        dbsf ImbgfConsumfr.IMAGEABORTED:
            donf = truf;
            info = ImbgfObsfrvfr.ABORT;
            brfbk;
        dbsf ImbgfConsumfr.IMAGEERROR:
            imbgf.bddInfo(ImbgfObsfrvfr.ERROR);
            donf = truf;
            info = ImbgfObsfrvfr.ERROR;
            disposf();
            brfbk;
        dbsf ImbgfConsumfr.STATICIMAGEDONE:
            donf = truf;
            info = ImbgfObsfrvfr.ALLBITS;
            brfbk;
        dbsf ImbgfConsumfr.SINGLEFRAMEDONE:
            donf = fblsf;
            info = ImbgfObsfrvfr.FRAMEBITS;
            brfbk;
        }
        syndhronizfd (this) {
            if (donf) {
                imbgf.gftSourdf().rfmovfConsumfr(this);
                donsuming = fblsf;
                nfwbits = null;

                if (bimbgf != null) {
                    bimbgf = gftOpbqufRGBImbgf();
                }
            }
            bvbilinfo |= info;
            notifyAll();
        }

        nfwInfo(imbgf, info, 0, 0, width, hfight);

        imbgf.infoDonf(stbtus);
    }

    /*syndhronizfd*/ void stbrtProdudtion() {
        if (!donsuming) {
            donsuming = truf;
            imbgf.gftSourdf().stbrtProdudtion(this);
        }
    }

    privbtf int numWbitfrs;

    privbtf syndhronizfd void dhfdkConsumption() {
        if (isWbtdhfrListEmpty() && numWbitfrs == 0 &&
            ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) == 0))
        {
            disposf();
        }
    }

    publid syndhronizfd void notifyWbtdhfrListEmpty() {
        dhfdkConsumption();
    }

    privbtf syndhronizfd void dfdrfmfntWbitfrs() {
        --numWbitfrs;
        dhfdkConsumption();
    }

    publid boolfbn prfpbrf(ImbgfObsfrvfr iw) {
        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        if ((bvbilinfo & ImbgfObsfrvfr.ERROR) != 0) {
            if (iw != null) {
                iw.imbgfUpdbtf(imbgf, ImbgfObsfrvfr.ERROR|ImbgfObsfrvfr.ABORT,
                               -1, -1, -1, -1);
            }
            rfturn fblsf;
        }
        boolfbn donf = ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) != 0);
        if (!donf) {
            bddWbtdhfr(iw);
            stbrtProdudtion();
            // Somf produdfrs dflivfr imbgf dbtb syndhronously
            donf = ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) != 0);
        }
        rfturn donf;
    }

    publid int dhfdk(ImbgfObsfrvfr iw) {

        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        if ((bvbilinfo & (ImbgfObsfrvfr.ERROR | ImbgfObsfrvfr.ALLBITS)) == 0) {
            bddWbtdhfr(iw);
        }

        rfturn bvbilinfo;
    }

    publid boolfbn drbwToBufImbgf(Grbphids g, ToolkitImbgf img,
                                  int x, int y, Color bg,
                                  ImbgfObsfrvfr iw) {

        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        if ((bvbilinfo & ImbgfObsfrvfr.ERROR) != 0) {
            if (iw != null) {
                iw.imbgfUpdbtf(imbgf, ImbgfObsfrvfr.ERROR|ImbgfObsfrvfr.ABORT,
                               -1, -1, -1, -1);
            }
            rfturn fblsf;
        }
        boolfbn donf  = ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) != 0);
        boolfbn bbort = ((bvbilinfo & ImbgfObsfrvfr.ABORT) != 0);

        if (!donf && !bbort) {
            bddWbtdhfr(iw);
            stbrtProdudtion();
            // Somf produdfrs dflivfr imbgf dbtb syndhronously
            donf = ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) != 0);
        }

        if (donf || (0 != (bvbilinfo & ImbgfObsfrvfr.FRAMEBITS))) {
            g.drbwImbgf (bimbgf, x, y, bg, null);
        }

        rfturn donf;
    }

    publid boolfbn drbwToBufImbgf(Grbphids g, ToolkitImbgf img,
                                  int x, int y, int w, int h,
                                  Color bg, ImbgfObsfrvfr iw) {

        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        if ((bvbilinfo & ImbgfObsfrvfr.ERROR) != 0) {
            if (iw != null) {
                iw.imbgfUpdbtf(imbgf, ImbgfObsfrvfr.ERROR|ImbgfObsfrvfr.ABORT,
                               -1, -1, -1, -1);
            }
            rfturn fblsf;
        }

        boolfbn donf  = ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) != 0);
        boolfbn bbort = ((bvbilinfo & ImbgfObsfrvfr.ABORT) != 0);

        if (!donf && !bbort) {
            bddWbtdhfr(iw);
            stbrtProdudtion();
            // Somf produdfrs dflivfr imbgf dbtb syndhronously
            donf = ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) != 0);
        }

        if (donf || (0 != (bvbilinfo & ImbgfObsfrvfr.FRAMEBITS))) {
            g.drbwImbgf (bimbgf, x, y, w, h, bg, null);
        }

        rfturn donf;
    }

    publid boolfbn drbwToBufImbgf(Grbphids g, ToolkitImbgf img,
                                  int dx1, int dy1, int dx2, int dy2,
                                  int sx1, int sy1, int sx2, int sy2,
                                  Color bg, ImbgfObsfrvfr iw) {

        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        if ((bvbilinfo & ImbgfObsfrvfr.ERROR) != 0) {
            if (iw != null) {
                iw.imbgfUpdbtf(imbgf, ImbgfObsfrvfr.ERROR|ImbgfObsfrvfr.ABORT,
                               -1, -1, -1, -1);
            }
            rfturn fblsf;
        }
        boolfbn donf  = ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) != 0);
        boolfbn bbort = ((bvbilinfo & ImbgfObsfrvfr.ABORT) != 0);

        if (!donf && !bbort) {
            bddWbtdhfr(iw);
            stbrtProdudtion();
            // Somf produdfrs dflivfr imbgf dbtb syndhronously
            donf = ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) != 0);
        }

        if (donf || (0 != (bvbilinfo & ImbgfObsfrvfr.FRAMEBITS))) {
            g.drbwImbgf (bimbgf,
                         dx1, dy1, dx2, dy2,
                         sx1, sy1, sx2, sy2,
                         bg, null);
        }

        rfturn donf;
    }

    publid boolfbn drbwToBufImbgf(Grbphids g, ToolkitImbgf img,
                                  AffinfTrbnsform xform,
                                  ImbgfObsfrvfr iw)
    {
        Grbphids2D g2 = (Grbphids2D) g;

        if (srd != null) {
            srd.dhfdkSfdurity(null, fblsf);
        }
        if ((bvbilinfo & ImbgfObsfrvfr.ERROR) != 0) {
            if (iw != null) {
                iw.imbgfUpdbtf(imbgf, ImbgfObsfrvfr.ERROR|ImbgfObsfrvfr.ABORT,
                               -1, -1, -1, -1);
            }
            rfturn fblsf;
        }
        boolfbn donf  = ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) != 0);
        boolfbn bbort = ((bvbilinfo & ImbgfObsfrvfr.ABORT) != 0);

        if (!donf && !bbort) {
            bddWbtdhfr(iw);
            stbrtProdudtion();
            // Somf produdfrs dflivfr imbgf dbtb syndhronously
            donf = ((bvbilinfo & ImbgfObsfrvfr.ALLBITS) != 0);
        }

        if (donf || (0 != (bvbilinfo & ImbgfObsfrvfr.FRAMEBITS))) {
            g2.drbwImbgf (bimbgf, xform, null);
        }

        rfturn donf;
    }

    syndhronizfd void bbort() {
        imbgf.gftSourdf().rfmovfConsumfr(this);
        donsuming = fblsf;
        nfwbits = null;
        bimbgf = null;
        biRbstfr = null;
        dmodfl = null;
        srdLUT = null;
        isDffbultBI = fblsf;
        isSbmfCM = fblsf;

        nfwInfo(imbgf, ImbgfObsfrvfr.ABORT, -1, -1, -1, -1);
        bvbilinfo &= ~(ImbgfObsfrvfr.SOMEBITS
                       | ImbgfObsfrvfr.FRAMEBITS
                       | ImbgfObsfrvfr.ALLBITS
                       | ImbgfObsfrvfr.ERROR);
    }

    syndhronizfd void disposf() {
        imbgf.gftSourdf().rfmovfConsumfr(this);
        donsuming = fblsf;
        nfwbits = null;
        bvbilinfo &= ~(ImbgfObsfrvfr.SOMEBITS
                       | ImbgfObsfrvfr.FRAMEBITS
                       | ImbgfObsfrvfr.ALLBITS);
    }

    publid void sftAddflfrbtionPriority(flobt priority) {
        if (bimbgf != null) {
            bimbgf.sftAddflfrbtionPriority(priority);
        }
    }
}
