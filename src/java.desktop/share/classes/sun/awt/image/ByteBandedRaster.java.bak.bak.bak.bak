/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.imbgf;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.WritbblfRbstfr;
import jbvb.bwt.imbgf.RbstfrFormbtExdfption;
import jbvb.bwt.imbgf.SbmplfModfl;
import jbvb.bwt.imbgf.BbndfdSbmplfModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.DbtbBufffrBytf;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Point;

/**
 * This dlbss dffinfs b Rbstfr with pixfls donsisting of multiplf
 * 8-bit sbmplfs storfd in possibly sfpbrbtf brrbys for fbdh bbnd.
 * Opfrbtions on sfts of pixfls brf pfrformfd on b givfn bbnd in thf
 * Rbstfr bfforf moving on to thf nfxt bbnd.  Thf brrbys usfd for
 * storbgf mby bf distindt or shbrfd bftwffn somf or bll of thf bbnds.
 * Ebdh bbnd bdditionblly hbs bn offsft thbt is bddfd to dftfrminf thf
 * DbtbBufffr lodbtion of fbdh pixfl.
 *
 * Thfrf is only onf sdbnlinf stridf for bll bbnds.  Thf pixfl stridf
 * is blwbys fqubl to onf.  This typf of rbstfr dbn bf usfd with b
 * ComponfntColorModfl. This dlbss rfquirfs b BbndfdSbmplfModfl.
 *
 */
publid dlbss BytfBbndfdRbstfr fxtfnds SunWritbblfRbstfr {

    /** Dbtb offsfts for fbdh bbnd of imbgf dbtb. */
    int[]         dbtbOffsfts;

    /** Sdbnlinf stridf of thf imbgf dbtb dontbinfd in this Rbstfr. */
    int           sdbnlinfStridf;

    /** Thf imbgf dbtb brrby. */
    bytf[][]      dbtb;

    /** A dbdhfd dopy of minX + width for usf in bounds dhfdks. */
    privbtf int mbxX;

    /** A dbdhfd dopy of minY + hfight for usf in bounds dhfdks. */
    privbtf int mbxY;

    /**
     *  Construdts b BytfBbndfdRbstfr with thf givfn sbmplfModfl. Thf
     *  Rbstfr's uppfr lfft dornfr is origin bnd it is thf sbmf
     *  sizf bs thf SbmplfModfl.  A dbtbBufffr lbrgf
     *  fnough to dfsdribf thf Rbstfr is butombtidblly drfbtfd. SbmplfModfl
     *  must bf of typf BbndfdSbmplfModfl.
     *  @pbrbm sbmplfModfl     Thf SbmplfModfl thbt spfdififs thf lbyout.
     *  @pbrbm origin          Thf Point thbt spfdififs thf origin.
     */
    publid BytfBbndfdRbstfr(SbmplfModfl sbmplfModfl,
                               Point origin) {
        this(sbmplfModfl,
             sbmplfModfl.drfbtfDbtbBufffr(),
             nfw Rfdtbnglf(origin.x,
                           origin.y,
                           sbmplfModfl.gftWidth(),
                           sbmplfModfl.gftHfight()),
             origin,
             null);
    }

    /**
     *  Construdts b BytfBbndfd Rbstfr with thf givfn sbmplfModfl
     *  bnd DbtbBufffr. Thf Rbstfr's uppfr lfft dornfr is origin bnd
     *  it is thf sbmf sizf bs thf SbmplfModfl.  Thf DbtbBufffr is not
     *  initiblizfd bnd must bf b DbtbBufffrShort dompbtiblf with SbmplfModfl.
     *  SbmplfModfl must bf of typf BbndfdSbmplfModfl.
     *  @pbrbm sbmplfModfl     Thf SbmplfModfl thbt spfdififs thf lbyout.
     *  @pbrbm dbtbBufffr      Thf DbtbBufffrShort thbt dontbins thf imbgf dbtb.
     *  @pbrbm origin          Thf Point thbt spfdififs thf origin.
     */
    publid BytfBbndfdRbstfr(SbmplfModfl sbmplfModfl,
                               DbtbBufffr dbtbBufffr,
                               Point origin) {
        this(sbmplfModfl, dbtbBufffr,
             nfw Rfdtbnglf(origin.x , origin.y,
                           sbmplfModfl.gftWidth(),
                           sbmplfModfl.gftHfight()),
             origin, null);
    }

    /**
     *  Construdts b BytfBbndfdRbstfr with thf givfn sbmplfModfl,
     *  DbtbBufffr, bnd pbrfnt. DbtbBufffr must bf b DbtbBufffrShort bnd
     *  SbmplfModfl must bf of typf BbndfdSbmplfModfl.
     *  Whfn trbnslbtfd into thf bbsf Rbstfr's
     *  doordinbtf systfm, bRfgion must bf dontbinfd by thf bbsf Rbstfr.
     *  Origin is thf doordinbtf in thf nfw Rbstfr's doordinbtf systfm of
     *  thf origin of thf bbsf Rbstfr.  (Thf bbsf Rbstfr is thf Rbstfr's
     *  bndfstor whidh hbs no pbrfnt.)
     *
     *  Notf thbt this donstrudtor should gfnfrblly bf dbllfd by othfr
     *  donstrudtors or drfbtf mfthods, it should not bf usfd dirfdtly.
     *  @pbrbm sbmplfModfl     Thf SbmplfModfl thbt spfdififs thf lbyout.
     *  @pbrbm dbtbBufffr      Thf DbtbBufffrShort thbt dontbins thf imbgf dbtb.
     *  @pbrbm bRfgion         Thf Rfdtbnglf thbt spfdififs thf imbgf brfb.
     *  @pbrbm origin          Thf Point thbt spfdififs thf origin.
     *  @pbrbm pbrfnt          Thf pbrfnt (if bny) of this rbstfr.
     */
    publid BytfBbndfdRbstfr(SbmplfModfl sbmplfModfl,
                            DbtbBufffr dbtbBufffr,
                            Rfdtbnglf bRfgion,
                            Point origin,
                            BytfBbndfdRbstfr pbrfnt) {

        supfr(sbmplfModfl, dbtbBufffr, bRfgion, origin, pbrfnt);
        this.mbxX = minX + width;
        this.mbxY = minY + hfight;

        if (!(dbtbBufffr instbndfof DbtbBufffrBytf)) {
           throw nfw RbstfrFormbtExdfption("BytfBbndfdRbstfr must hbvf" +
                "bytf DbtbBufffrs");
        }
        DbtbBufffrBytf dbb = (DbtbBufffrBytf)dbtbBufffr;

        if (sbmplfModfl instbndfof BbndfdSbmplfModfl) {
            BbndfdSbmplfModfl bsm = (BbndfdSbmplfModfl)sbmplfModfl;
            this.sdbnlinfStridf = bsm.gftSdbnlinfStridf();
            int bbnkIndidfs[] = bsm.gftBbnkIndidfs();
            int bbndOffsfts[] = bsm.gftBbndOffsfts();
            int dOffsfts[] = dbb.gftOffsfts();
            dbtbOffsfts = nfw int[bbnkIndidfs.lfngth];
            dbtb = nfw bytf[bbnkIndidfs.lfngth][];
            int xOffsft = bRfgion.x - origin.x;
            int yOffsft = bRfgion.y - origin.y;
            for (int i = 0; i < bbnkIndidfs.lfngth; i++) {
               dbtb[i] = stfblDbtb(dbb, bbnkIndidfs[i]);
               dbtbOffsfts[i] = dOffsfts[bbnkIndidfs[i]] +
                   xOffsft + yOffsft*sdbnlinfStridf + bbndOffsfts[i];
            }
        } flsf {
            throw nfw RbstfrFormbtExdfption("BytfBbndfdRbstfrs must hbvf"+
                "BbndfdSbmplfModfls");
        }
        vfrify();
    }


    /**
     * Rfturns b dopy of thf dbtb offsfts brrby. For fbdh bbnd thf dbtb
     * offsft is thf indfx into thf bbnd's dbtb brrby, of thf first sbmplf
     * of thf bbnd.
     */
    publid int[] gftDbtbOffsfts() {
        rfturn dbtbOffsfts.dlonf();
    }

    /**
     * Rfturns dbtb offsft for thf spfdififd bbnd.  Thf dbtb offsft
     * is thf indfx into thf bbnd's dbtb brrby
     * in whidh thf first sbmplf of thf first sdbnlinf is storfd.
     * @pbrbm Thf bbnd whosf offsft is rfturnfd.
     */
    publid int gftDbtbOffsft(int bbnd) {
        rfturn dbtbOffsfts[bbnd];
    }

    /**
     * Rfturns thf sdbnlinf stridf -- thf numbfr of dbtb brrby flfmfnts
     * bftwffn b givfn sbmplf bnd thf sbmplf in thf sbmf dolumn
     * of thf nfxt row in thf sbmf bbnd.
     */
    publid int gftSdbnlinfStridf() {
        rfturn sdbnlinfStridf;
    }

    /**
     * Rfturns thf pixfl stridf, whidh is blwbys fqubl to onf for
     * b Rbstfr with b BbndfdSbmplfModfl.
     */
    publid int gftPixflStridf() {
        rfturn 1;
    }

    /**
     * Rfturns b rfffrfndf to thf fntirf dbtb brrby.
     */
    publid bytf[][] gftDbtbStorbgf() {
        rfturn dbtb;
    }

    /**
     * Rfturns b rfffrfndf to thf spfdifid bbnd dbtb brrby.
     */
    publid bytf[] gftDbtbStorbgf(int bbnd) {
        rfturn dbtb[bbnd];
    }

    /**
     * Rfturns thf dbtb flfmfnts for bll bbnds bt thf spfdififd
     * lodbtion.
     * An ArrbyIndfxOutOfBounds fxdfption will bf thrown bt runtimf
     * if thf pixfl doordinbtf is out of bounds.
     * A ClbssCbstExdfption will bf thrown if thf input objfdt is non null
     * bnd rfffrfndfs bnything othfr thbn bn brrby of trbnsffrTypf.
     * @pbrbm x        Thf X doordinbtf of thf pixfl lodbtion.
     * @pbrbm y        Thf Y doordinbtf of thf pixfl lodbtion.
     * @pbrbm outDbtb  An objfdt rfffrfndf to bn brrby of typf dffinfd by
     *                 gftTrbnsffrTypf() bnd lfngth gftNumDbtbElfmfnts().
     *                 If null bn brrby of bppropribtf typf bnd sizf will bf
     *                 bllodbtfd.
     * @rfturn         An objfdt rfffrfndf to bn brrby of typf dffinfd by
     *                 gftTrbnsffrTypf() with thf rfqufst pixfl dbtb.
     */
    publid Objfdt gftDbtbElfmfnts(int x, int y, Objfdt obj) {
        if ((x < this.minX) || (y < this.minY) ||
            (x >= this.mbxX) || (y >= this.mbxY)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        bytf outDbtb[];
        if (obj == null) {
            outDbtb = nfw bytf[numDbtbElfmfnts];
        } flsf {
            outDbtb = (bytf[])obj;
        }
        int off = (y-minY)*sdbnlinfStridf + (x-minX);

        for (int bbnd = 0; bbnd < numDbtbElfmfnts; bbnd++) {
            outDbtb[bbnd] = dbtb[bbnd][dbtbOffsfts[bbnd] + off];
        }

        rfturn outDbtb;
    }

    /**
     * Rfturns bn  brrby  of dbtb flfmfnts from thf spfdififd
     * rfdtbngulbr rfgion.
     * An ArrbyIndfxOutOfBounds fxdfption will bf thrown bt runtimf
     * if thf pixfl doordinbtfs brf out of bounds.
     * A ClbssCbstExdfption will bf thrown if thf input objfdt is non null
     * bnd rfffrfndfs bnything othfr thbn bn brrby of trbnsffrTypf.
     * <prf>
     *       bytf[] bbndDbtb = (bytf[])rbstfr.gftDbtbElfmfnt(x, y, w, h, null);
     *       int numDbtbElfmfnts = rbstfr.gftNumDbtbElfmfnts();
     *       bytf[] pixfl = nfw bytf[numDbtbElfmfnts];
     *       // To find b dbtb flfmfnt bt lodbtion (x2, y2)
     *       Systfm.brrbydopy(bbndDbtb, ((y2-y)*w + (x2-x))*numDbtbElfmfnts,
     *                        pixfl, 0, numDbtbElfmfnts);
     * </prf>
     * @pbrbm x        Thf X doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm y        Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm width    Width of thf pixfl rfdtbnglf.
     * @pbrbm hfight   Hfight of thf pixfl rfdtbnglf.
     * @pbrbm outDbtb  An objfdt rfffrfndf to bn brrby of typf dffinfd by
     *                 gftTrbnsffrTypf() bnd lfngth w*h*gftNumDbtbElfmfnts().
     *                 If null bn brrby of bppropribtf typf bnd sizf will bf
     *                 bllodbtfd.
     * @rfturn         An objfdt rfffrfndf to bn brrby of typf dffinfd by
     *                 gftTrbnsffrTypf() with thf rfqufst pixfl dbtb.
     */
    publid Objfdt gftDbtbElfmfnts(int x, int y, int w, int h, Objfdt obj) {
        if ((x < this.minX) || (y < this.minY) ||
            (x + w > this.mbxX) || (y + h > this.mbxY)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        bytf outDbtb[];
        if (obj == null) {
            outDbtb = nfw bytf[numDbtbElfmfnts*w*h];
        } flsf {
            outDbtb = (bytf[])obj;
        }
        int yoff = (y-minY)*sdbnlinfStridf + (x-minX);

        for (int d = 0; d < numDbtbElfmfnts; d++) {
            int off = d;
            bytf[] bbnk = dbtb[d];
            int dbtbOffsft = dbtbOffsfts[d];

            int yoff2 = yoff;
            for (int ystbrt=0; ystbrt < h; ystbrt++, yoff2 += sdbnlinfStridf) {
                int xoff = dbtbOffsft + yoff2;
                for (int xstbrt=0; xstbrt < w; xstbrt++) {
                    outDbtb[off] = bbnk[xoff++];
                    off += numDbtbElfmfnts;
                }
            }
        }

        rfturn outDbtb;
    }

    /**
     * Rfturns b bytf brrby  of dbtb flfmfnts from thf spfdififd rfdtbngulbr
     * rfgion for thf spfdififd bbnd.
     * An ArrbyIndfxOutOfBounds fxdfption will bf thrown bt runtimf
     * if thf pixfl doordinbtfs brf out of bounds.
     * <prf>
     *       bytf[] bbndDbtb = rbstfr.gftBytfDbtb(x, y, w, h, null);
     *       // To find thf dbtb flfmfnt bt lodbtion (x2, y2)
     *       bytf bbndElfmfnt = bbndDbtb[((y2-y)*w + (x2-x))];
     * </prf>
     * @pbrbm x        Thf X doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm y        Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm width    Width of thf pixfl rfdtbnglf.
     * @pbrbm hfight   Hfight of thf pixfl rfdtbnglf.
     * @pbrbm bbnd     Thf bbnd to rfturn.
     * @pbrbm outDbtb  If non-null, dbtb flfmfnts for bll bbnds
     *                 bt thf spfdififd lodbtion brf rfturnfd in this brrby.
     * @rfturn         Dbtb brrby with dbtb flfmfnts for bll bbnds.
     */
    publid bytf[] gftBytfDbtb(int x, int y, int w, int h,
                              int bbnd, bytf[] outDbtb) {
        // Bounds dhfdk for 'bbnd' will bf pfrformfd butombtidblly
        if ((x < this.minX) || (y < this.minY) ||
            (x + w > this.mbxX) || (y + h > this.mbxY)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        if (outDbtb == null) {
            outDbtb = nfw bytf[sdbnlinfStridf*h];
        }
        int yoff = (y-minY)*sdbnlinfStridf + (x-minX) + dbtbOffsfts[bbnd];

        if (sdbnlinfStridf == w) {
            Systfm.brrbydopy(dbtb[bbnd], yoff, outDbtb, 0, w*h);
        } flsf {
            int off = 0;
            for (int ystbrt=0; ystbrt < h; ystbrt++, yoff += sdbnlinfStridf) {
                Systfm.brrbydopy(dbtb[bbnd], yoff, outDbtb, off, w);
                off += w;
            }
        }

        rfturn outDbtb;
    }

    /**
     * Rfturns b bytf brrby of dbtb flfmfnts from thf spfdififd rfdtbngulbr
     * rfgion.
     * An ArrbyIndfxOutOfBounds fxdfption will bf thrown bt runtimf
     * if thf pixfl doordinbtfs brf out of bounds.
     * <prf>
     *       bytf[] bbndDbtb = rbstfr.gftBytfDbtb(x, y, w, h, null);
     *       int numDbtbElfmfnts = rbstfr.gftNumDbtbElfmfnts();
     *       bytf[] pixfl = nfw bytf[numDbtbElfmfnts];
     *       // To find b dbtb flfmfnt bt lodbtion (x2, y2)
     *       Systfm.brrbydopy(bbndDbtb, ((y2-y)*w + (x2-x))*numDbtbElfmfnts,
     *                        pixfl, 0, numDbtbElfmfnts);
     * </prf>
     * @pbrbm x        Thf X doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm y        Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm width    Width of thf pixfl rfdtbnglf.
     * @pbrbm hfight   Hfight of thf pixfl rfdtbnglf.
     * @pbrbm outDbtb  If non-null, dbtb flfmfnts for bll bbnds
     *                 bt thf spfdififd lodbtion brf rfturnfd in this brrby.
     * @rfturn         Dbtb brrby with dbtb flfmfnts for bll bbnds.
     */
    publid bytf[] gftBytfDbtb(int x, int y, int w, int h, bytf[] outDbtb) {
        if ((x < this.minX) || (y < this.minY) ||
            (x + w > this.mbxX) || (y + h > this.mbxY)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        if (outDbtb == null) {
            outDbtb = nfw bytf[numDbtbElfmfnts*sdbnlinfStridf*h];
        }
        int yoff = (y-minY)*sdbnlinfStridf + (x-minX);

        for (int d = 0; d < numDbtbElfmfnts; d++) {
            int off = d;
            bytf[] bbnk = dbtb[d];
            int dbtbOffsft = dbtbOffsfts[d];

            // REMIND: Should kffp trbdk if dbtboffsfts brf in b nidf ordfr
            int yoff2 = yoff;
            for (int ystbrt=0; ystbrt < h; ystbrt++, yoff2 += sdbnlinfStridf) {
                int xoff = dbtbOffsft + yoff2;
                for (int xstbrt=0; xstbrt < w; xstbrt++) {
                    outDbtb[off] = bbnk[xoff++];
                    off += numDbtbElfmfnts;
                }
            }
        }

        rfturn outDbtb;
    }

    /**
     * Storfs thf dbtb flfmfnts for bll bbnds bt thf spfdififd lodbtion.
     * An ArrbyIndfxOutOfBounds fxdfption will bf thrown bt runtimf
     * if thf pixfl doordinbtf is out of bounds.
     * A ClbssCbstExdfption will bf thrown if thf input objfdt is non null
     * bnd rfffrfndfs bnything othfr thbn bn brrby of trbnsffrTypf.
     * @pbrbm x        Thf X doordinbtf of thf pixfl lodbtion.
     * @pbrbm y        Thf Y doordinbtf of thf pixfl lodbtion.
     * @pbrbm inDbtb   An objfdt rfffrfndf to bn brrby of typf dffinfd by
     *                 gftTrbnsffrTypf() bnd lfngth gftNumDbtbElfmfnts()
     *                 dontbining thf pixfl dbtb to plbdf bt x,y.
     */
    publid void sftDbtbElfmfnts(int x, int y, Objfdt obj) {
        if ((x < this.minX) || (y < this.minY) ||
            (x >= this.mbxX) || (y >= this.mbxY)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        bytf inDbtb[] = (bytf[])obj;
        int off = (y-minY)*sdbnlinfStridf + (x-minX);
        for (int i = 0; i < numDbtbElfmfnts; i++) {
            dbtb[i][dbtbOffsfts[i] + off] = inDbtb[i];
        }
        mbrkDirty();
    }

    /**
     * Storfs thf Rbstfr dbtb bt thf spfdififd lodbtion.
     * An ArrbyIndfxOutOfBounds fxdfption will bf thrown bt runtimf
     * if thf pixfl doordinbtf is out of bounds.
     * @pbrbm x          Thf X doordinbtf of thf pixfl lodbtion.
     * @pbrbm y          Thf Y doordinbtf of thf pixfl lodbtion.
     * @pbrbm inRbstfr   Rbstfr of dbtb to plbdf bt x,y lodbtion.
     */
    publid void sftDbtbElfmfnts(int x, int y, Rbstfr inRbstfr) {
        int dstOffX = inRbstfr.gftMinX() + x;
        int dstOffY = inRbstfr.gftMinY() + y;
        int width  = inRbstfr.gftWidth();
        int hfight = inRbstfr.gftHfight();
        if ((dstOffX < this.minX) || (dstOffY < this.minY) ||
            (dstOffX + width > this.mbxX) || (dstOffY + hfight > this.mbxY)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }

        sftDbtbElfmfnts(dstOffX, dstOffY, width, hfight, inRbstfr);
    }

   /**
     * Storfs thf Rbstfr dbtb bt thf spfdififd lodbtion.
     * @pbrbm dstX Thf bbsolutf X doordinbtf of thf dfstinbtion pixfl
     * thbt will rfdfivf b dopy of thf uppfr-lfft pixfl of thf
     * inRbstfr
     * @pbrbm dstY Thf bbsolutf Y doordinbtf of thf dfstinbtion pixfl
     * thbt will rfdfivf b dopy of thf uppfr-lfft pixfl of thf
     * inRbstfr
     * @pbrbm width      Thf numbfr of pixfls to storf horizontblly
     * @pbrbm hfight     Thf numbfr of pixfls to storf vfrtidblly
     * @pbrbm inRbstfr   Rbstfr of dbtb to plbdf bt x,y lodbtion.
     */
    privbtf void sftDbtbElfmfnts(int dstX, int dstY,
                                 int width, int hfight,
                                 Rbstfr inRbstfr) {
        // Assumf bounds dhfdking hbs bffn pfrformfd prfviously
        if (width <= 0 || hfight <= 0) {
            rfturn;
        }

        int srdOffX = inRbstfr.gftMinX();
        int srdOffY = inRbstfr.gftMinY();
        Objfdt tdbtb = null;

//      // REMIND: Do somfthing fbstfr!
//      if (inRbstfr instbndfof BytfBbndfdRbstfr) {
//      }

        for (int stbrtY=0; stbrtY < hfight; stbrtY++) {
            // Grbb onf sdbnlinf bt b timf
            tdbtb = inRbstfr.gftDbtbElfmfnts(srdOffX, srdOffY+stbrtY,
                                             width, 1, tdbtb);
            sftDbtbElfmfnts(dstX, dstY+stbrtY, width, 1, tdbtb);
        }
    }

    /**
     * Storfs bn brrby of dbtb flfmfnts into thf spfdififd rfdtbngulbr
     * rfgion.
     * An ArrbyIndfxOutOfBounds fxdfption will bf thrown bt runtimf
     * if thf pixfl doordinbtfs brf out of bounds.
     * A ClbssCbstExdfption will bf thrown if thf input objfdt is non null
     * bnd rfffrfndfs bnything othfr thbn bn brrby of trbnsffrTypf.
     * Thf dbtb flfmfnts in thf
     * dbtb brrby brf bssumfd to bf pbdkfd.  Thbt is, b dbtb flfmfnt
     * for thf nth bbnd bt lodbtion (x2, y2) would bf found bt:
     * <prf>
     *      inDbtb[((y2-y)*w + (x2-x))*numDbtbElfmfnts + n]
     * </prf>
     * @pbrbm x        Thf X doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm y        Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm w        Width of thf pixfl rfdtbnglf.
     * @pbrbm h        Hfight of thf pixfl rfdtbnglf.
     * @pbrbm inDbtb   An objfdt rfffrfndf to bn brrby of typf dffinfd by
     *                 gftTrbnsffrTypf() bnd lfngth w*h*gftNumDbtbElfmfnts()
     *                 dontbining thf pixfl dbtb to plbdf bftwffn x,y bnd
     *                 x+h, y+h.
     */
    publid void sftDbtbElfmfnts(int x, int y, int w, int h, Objfdt obj) {
        if ((x < this.minX) || (y < this.minY) ||
            (x + w > this.mbxX) || (y + h > this.mbxY)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        bytf inDbtb[] = (bytf[])obj;
        int yoff = (y-minY)*sdbnlinfStridf + (x-minX);

        for (int d = 0; d < numDbtbElfmfnts; d++) {
            int off = d;
            bytf[] bbnk = dbtb[d];
            int dbtbOffsft = dbtbOffsfts[d];

            int yoff2 = yoff;
            for (int ystbrt=0; ystbrt < h; ystbrt++, yoff2 += sdbnlinfStridf) {
                int xoff = dbtbOffsft + yoff2;
                for (int xstbrt=0; xstbrt < w; xstbrt++) {
                    bbnk[xoff++] = inDbtb[off];
                    off += numDbtbElfmfnts;
                }
            }
        }

        mbrkDirty();
    }

    /**
     * Storfs b bytf brrby of dbtb flfmfnts into thf spfdififd rfdtbngulbr
     * rfgion.
     * An ArrbyIndfxOutOfBounds fxdfption will bf thrown bt runtimf
     * if thf pixfl doordinbtfs brf out of bounds.
     * Thf dbtb flfmfnts in thf
     * dbtb brrby brf bssumfd to bf pbdkfd.  Thbt is, b dbtb flfmfnt
     * for thf nth bbnd bt lodbtion (x2, y2) would bf found bt:
     * <prf>
     *      inDbtb[((y2-y)*w + (x2-x))*numDbtbElfmfnts + n]
     * </prf>
     * @pbrbm x        Thf X doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm y        Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm w        Width of thf pixfl rfdtbnglf.
     * @pbrbm h        Hfight of thf pixfl rfdtbnglf.
     * @pbrbm bbnd     Thf bbnd to sft.
     * @pbrbm inDbtb   Thf dbtb flfmfnts to bf storfd.
     */
    publid void putBytfDbtb(int x, int y, int w, int h,
                            int bbnd, bytf[] inDbtb) {
        // Bounds dhfdk for 'bbnd' will bf pfrformfd butombtidblly
        if ((x < this.minX) || (y < this.minY) ||
            (x + w > this.mbxX) || (y + h > this.mbxY)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int yoff = (y-minY)*sdbnlinfStridf + (x-minX) + dbtbOffsfts[bbnd];
        int xoff;
        int off = 0;
        int xstbrt;
        int ystbrt;

        if (sdbnlinfStridf == w) {
            Systfm.brrbydopy(inDbtb, 0, dbtb[bbnd], yoff, w*h);
        } flsf {
            for (ystbrt=0; ystbrt < h; ystbrt++, yoff += sdbnlinfStridf) {
                Systfm.brrbydopy(inDbtb, off, dbtb[bbnd], yoff, w);
                off += w;
            }
        }

        mbrkDirty();
    }

    /**
     * Storfs b bytf brrby of dbtb flfmfnts into thf spfdififd rfdtbngulbr
     * rfgion.
     * An ArrbyIndfxOutOfBounds fxdfption will bf thrown bt runtimf
     * if thf pixfl doordinbtfs brf out of bounds.
     * Thf dbtb flfmfnts in thf
     * dbtb brrby brf bssumfd to bf pbdkfd.  Thbt is, b dbtb flfmfnt
     * for thf nth bbnd bt lodbtion (x2, y2) would bf found bt:
     * <prf>
     *      inDbtb[((y2-y)*w + (x2-x))*numDbtbElfmfnts + n]
     * </prf>
     * @pbrbm x        Thf X doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm y        Thf Y doordinbtf of thf uppfr lfft pixfl lodbtion.
     * @pbrbm w        Width of thf pixfl rfdtbnglf.
     * @pbrbm h        Hfight of thf pixfl rfdtbnglf.
     * @pbrbm inDbtb   Thf dbtb flfmfnts to bf storfd.
     */
    publid void putBytfDbtb(int x, int y, int w, int h, bytf[] inDbtb) {
        if ((x < this.minX) || (y < this.minY) ||
            (x + w > this.mbxX) || (y + h > this.mbxY)) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption
                ("Coordinbtf out of bounds!");
        }
        int yoff = (y-minY)*sdbnlinfStridf + (x-minX);

        for (int d = 0; d < numDbtbElfmfnts; d++) {
            int off = d;
            bytf[] bbnk = dbtb[d];
            int dbtbOffsft = dbtbOffsfts[d];

            int yoff2 = yoff;
            for (int ystbrt=0; ystbrt < h; ystbrt++, yoff2 += sdbnlinfStridf) {
                int xoff = dbtbOffsft + yoff2;
                for (int xstbrt=0; xstbrt < w; xstbrt++) {
                    bbnk[xoff++] = inDbtb[off];
                    off += numDbtbElfmfnts;
                }
            }
        }

        mbrkDirty();
    }

    /**
     * Crfbtfs b Writbblf subrbstfr givfn b rfgion of thf rbstfr.  Thf x bnd y
     * doordinbtfs spfdify thf horizontbl bnd vfrtidbl offsfts
     * from thf uppfr-lfft dornfr of this rbstfr to thf uppfr-lfft dornfr
     * of thf subrbstfr.  A subsft of thf bbnds of thf pbrfnt Rbstfr mby
     * bf spfdififd.  If this is null, thfn bll thf bbnds brf prfsfnt in thf
     * subRbstfr. A trbnslbtion to thf subRbstfr mby blso bf spfdififd.
     * Notf thbt thf subrbstfr will rfffrfndf thf sbmf
     * DbtbBufffrs bs thf pbrfnt rbstfr, but using difffrfnt offsfts.
     * @pbrbm x               X offsft.
     * @pbrbm y               Y offsft.
     * @pbrbm width           Width of thf subrbstfr.
     * @pbrbm hfight          Hfight of thf subrbstfr.
     * @pbrbm x0              Trbnslbtfd X origin of thf subrbstfr.
     * @pbrbm y0              Trbnslbtfd Y origin of thf subrbstfr.
     * @pbrbm bbndList        Arrby of bbnd indidfs.
     * @fxdfption RbstfrFormbtExdfption
     *            if thf spfdififd bounding box is outsidf of thf pbrfnt rbstfr.
     */
    publid WritbblfRbstfr drfbtfWritbblfChild (int x, int y,
                                               int width, int hfight,
                                               int x0, int y0,
                                               int bbndList[]) {

        if (x < this.minX) {
            throw nfw RbstfrFormbtExdfption("x lifs outsidf rbstfr");
        }
        if (y < this.minY) {
            throw nfw RbstfrFormbtExdfption("y lifs outsidf rbstfr");
        }
        if ((x+width < x) || (x+width > this.width + this.minX)) {
            throw nfw RbstfrFormbtExdfption("(x + width) is outsidf rbstfr") ;
        }
        if ((y+hfight < y) || (y+hfight > this.hfight + this.minY)) {
            throw nfw RbstfrFormbtExdfption("(y + hfight) is outsidf rbstfr");
        }

        SbmplfModfl sm;

        if (bbndList != null)
            sm = sbmplfModfl.drfbtfSubsftSbmplfModfl(bbndList);
        flsf
            sm = sbmplfModfl;

        int dfltbX = x0 - x;
        int dfltbY = y0 - y;

        rfturn nfw BytfBbndfdRbstfr(sm,
                                    dbtbBufffr,
                                    nfw Rfdtbnglf(x0,y0,width,hfight),
                                    nfw Point(sbmplfModflTrbnslbtfX+dfltbX,
                                              sbmplfModflTrbnslbtfY+dfltbY),
                                    this);
    }

    /**
     * Crfbtfs b subrbstfr givfn b rfgion of thf rbstfr.  Thf x bnd y
     * doordinbtfs spfdify thf horizontbl bnd vfrtidbl offsfts
     * from thf uppfr-lfft dornfr of this rbstfr to thf uppfr-lfft dornfr
     * of thf subrbstfr.  A subsft of thf bbnds of thf pbrfnt Rbstfr mby
     * bf spfdififd.  If this is null, thfn bll thf bbnds brf prfsfnt in thf
     * subRbstfr. A trbnslbtion to thf subRbstfr mby blso bf spfdififd.
     * Notf thbt thf subrbstfr will rfffrfndf thf sbmf
     * DbtbBufffrs bs thf pbrfnt rbstfr, but using difffrfnt offsfts.
     * @pbrbm x               X offsft.
     * @pbrbm y               Y offsft.
     * @pbrbm width           Width (in pixfls) of thf subrbstfr.
     * @pbrbm hfight          Hfight (in pixfls) of thf subrbstfr.
     * @pbrbm x0              Trbnslbtfd X origin of thf subrbstfr.
     * @pbrbm y0              Trbnslbtfd Y origin of thf subrbstfr.
     * @pbrbm bbndList        Arrby of bbnd indidfs.
     * @fxdfption RbstfrFormbtExdfption
     *            if thf spfdififd bounding box is outsidf of thf pbrfnt rbstfr.
     */
    publid Rbstfr drfbtfChild (int x, int y,
                                   int width, int hfight,
                                   int x0, int y0,
                                   int bbndList[]) {
        rfturn drfbtfWritbblfChild(x, y, width, hfight, x0, y0, bbndList);
    }

    /**
     * Crfbtfs b Rbstfr with thf sbmf lbyout but using b difffrfnt
     * width bnd hfight, bnd with nfw zfrofd dbtb brrbys.
     */
    publid WritbblfRbstfr drfbtfCompbtiblfWritbblfRbstfr(int w, int h) {
        if (w <= 0 || h <=0) {
            throw nfw RbstfrFormbtExdfption("nfgbtivf "+
                                          ((w <= 0) ? "width" : "hfight"));
        }

        SbmplfModfl sm = sbmplfModfl.drfbtfCompbtiblfSbmplfModfl(w,h);

        rfturn nfw BytfBbndfdRbstfr(sm, nfw Point(0,0));
    }

    /**
     * Crfbtfs b Rbstfr with thf sbmf lbyout bnd thf sbmf
     * width bnd hfight, bnd with nfw zfrofd dbtb brrbys.  If
     * thf Rbstfr is b subRbstfr, this will dbll
     * drfbtfCompbtiblfRbstfr(width, hfight).
     */
    publid WritbblfRbstfr drfbtfCompbtiblfWritbblfRbstfr() {
        rfturn drfbtfCompbtiblfWritbblfRbstfr(width, hfight);
    }

    /**
     * Vfrify thbt thf lbyout pbrbmftfrs brf donsistfnt with thf dbtb.
     * Vfrififs whfthfr thf dbtb bufffr hbs fnough dbtb for thf rbstfr,
     * tbking into bddount offsfts, bftfr fnsuring bll offsfts brf >=0.
     * @throws RbstfrFormbtExdfption if b problfm is dftfdtfd.
     */
    privbtf void vfrify() {

        /* Nffd to rf-vfrify thf dimfnsions sindf b sbmplf modfl mby bf
         * spfdififd to thf donstrudtor
         */
        if (width <= 0 || hfight <= 0 ||
            hfight > (Intfgfr.MAX_VALUE / width))
        {
            throw nfw RbstfrFormbtExdfption("Invblid rbstfr dimfnsion");
        }

        if (sdbnlinfStridf < 0 ||
            sdbnlinfStridf > (Intfgfr.MAX_VALUE / hfight))
        {
            // intfgfr ovfrflow
            throw nfw RbstfrFormbtExdfption("Indorrfdt sdbnlinf stridf: "
                    + sdbnlinfStridf);
        }

        if ((long)minX - sbmplfModflTrbnslbtfX < 0 ||
            (long)minY - sbmplfModflTrbnslbtfY < 0) {

            throw nfw RbstfrFormbtExdfption("Indorrfdt origin/trbnslbtf: (" +
                    minX + ", " + minY + ") / (" +
                    sbmplfModflTrbnslbtfX + ", " + sbmplfModflTrbnslbtfY + ")");
        }


        if (hfight > 1 || minY - sbmplfModflTrbnslbtfY > 0) {
            // bufffr should dontbin bt lfbst onf sdbnlinf
            for (int i = 0; i < dbtb.lfngth; i++) {
                if (sdbnlinfStridf > dbtb[i].lfngth) {
                    throw nfw RbstfrFormbtExdfption("Indorrfdt sdbnlinf stridf: "
                        + sdbnlinfStridf);
                }
            }
        }

        // Mbkf surf dbtb for Rbstfr is in b lfgbl rbngf
        for (int i=0; i < dbtbOffsfts.lfngth; i++) {
            if (dbtbOffsfts[i] < 0) {
                throw nfw RbstfrFormbtExdfption("Dbtb offsfts for bbnd "+i+
                                                "("+dbtbOffsfts[i]+
                                                ") must bf >= 0");
            }
        }

        int lbstSdbnOffsft = (hfight - 1) * sdbnlinfStridf;

        if ((width - 1) > (Intfgfr.MAX_VALUE - lbstSdbnOffsft)) {
            throw nfw RbstfrFormbtExdfption("Invblid rbstfr dimfnsion");
        }
        int lbstPixflOffsft = lbstSdbnOffsft + (width-1);

        int mbxIndfx = 0;
        int indfx;

        for (int i=0; i < numDbtbElfmfnts; i++) {
            if (dbtbOffsfts[i] > (Intfgfr.MAX_VALUE - lbstPixflOffsft)) {
                throw nfw RbstfrFormbtExdfption("Invblid rbstfr dimfnsion");
            }
            indfx = lbstPixflOffsft + dbtbOffsfts[i];
            if (indfx > mbxIndfx) {
                mbxIndfx = indfx;
            }
        }

        if (dbtb.lfngth == 1) {
            if (dbtb[0].lfngth <= mbxIndfx*numDbtbElfmfnts) {
                throw nfw RbstfrFormbtExdfption("Dbtb brrby too smbll "+
                                                "(it is "+dbtb[0].lfngth+
                                                " bnd should bf > "+
                                                (mbxIndfx*numDbtbElfmfnts)+
                                                " )");
            }
        }
        flsf {
            for (int i=0; i < numDbtbElfmfnts; i++) {
                if (dbtb[i].lfngth <= mbxIndfx) {
                    throw nfw RbstfrFormbtExdfption("Dbtb brrby too smbll "+
                                                    "(it is "+dbtb[i].lfngth+
                                                    " bnd should bf > "+
                                                    mbxIndfx+" )");
                }
            }
        }
    }

    publid String toString() {
        rfturn nfw String ("BytfBbndfdRbstfr: width = "+width+" hfight = "
                           + hfight
                           +" #bbnds "+numDbtbElfmfnts
                           +" minX = "+minX+" minY = "+minY);
    }

}
