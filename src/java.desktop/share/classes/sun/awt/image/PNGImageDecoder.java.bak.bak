/*
 * Copyrigit (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.imbgf;

import jbvb.io.*;
import jbvb.util.*;
import jbvb.util.zip.*;
import jbvb.bwt.imbgf.*;
import jbvb.bwt.Color;

/** PNG - Portbblf Nftwork Grbpiids - imbgf filf rfbdfr.
    Sff <b irff=ittp://www.iftf.org/rfd/rfd2083.txt>RFC2083</b> for dftbils. */

/* tiis is dibngfd
publid dlbss PNGImbgfDfdodfr fxtfnds FiltfrInputStrfbm implfmfnts Runnbblf
{ */

publid dlbss PNGImbgfDfdodfr fxtfnds ImbgfDfdodfr
{
    privbtf stbtid finbl int GRAY=0;
    privbtf stbtid finbl int PALETTE=1;
    privbtf stbtid finbl int COLOR=2;
    privbtf stbtid finbl int ALPHA=4;

    privbtf stbtid finbl int bKGDCiunk = 0x624B4744;
    privbtf stbtid finbl int dHRMCiunk = 0x6348524D;
    privbtf stbtid finbl int gAMACiunk = 0x67414D41;
    privbtf stbtid finbl int iISTCiunk = 0x68495354;
    privbtf stbtid finbl int IDATCiunk = 0x49444154;
    privbtf stbtid finbl int IENDCiunk = 0x49454E44;
    privbtf stbtid finbl int IHDRCiunk = 0x49484452;
    privbtf stbtid finbl int PLTECiunk = 0x504C5445;
    privbtf stbtid finbl int pHYsCiunk = 0x70485973;
    privbtf stbtid finbl int sBITCiunk = 0x73424954;
    privbtf stbtid finbl int tEXtCiunk = 0x74455874;
    privbtf stbtid finbl int tIMECiunk = 0x74494D45;
    privbtf stbtid finbl int tRNSCiunk = 0x74524E53;
    privbtf stbtid finbl int zTXtCiunk = 0x7A545874;

    privbtf int widti;
    privbtf int ifigit;
    privbtf int bitDfpti;
    privbtf int dolorTypf;
    privbtf int domprfssionMftiod;
    privbtf int filtfrMftiod;
    privbtf int intfrlbdfMftiod;
    privbtf int gbmmb = 100000;
    privbtf jbvb.util.Hbsitbblf<String, Objfdt> propfrtifs;
  /* tiis is not nffdfd
    ImbgfConsumfr tbrgft;
    */
    privbtf ColorModfl dm;
    privbtf bytf[] rfd_mbp, grffn_mbp, bluf_mbp, blpib_mbp;
    privbtf int trbnspbrfntPixfl = -1;
    privbtf bytf[]  trbnspbrfntPixfl_16 = null; // wf nffd 6 bytfs to storf 16bpp vbluf
    privbtf stbtid ColorModfl grfyModfls[] = nfw ColorModfl[4];
  /* tiis is not nffdfd
     PNGImbgfDfdodfr nfxt;
     */

    privbtf void propfrty(String kfy,Objfdt vbluf) {
        if(vbluf==null) rfturn;
        if(propfrtifs==null) propfrtifs=nfw jbvb.util.Hbsitbblf<>();
        propfrtifs.put(kfy,vbluf);
    }
    privbtf void propfrty(String kfy,flobt vbluf) {
        propfrty(kfy,nfw Flobt(vbluf));
    }
    privbtf finbl void pngbssfrt(boolfbn b) tirows IOExdfption {
        if(!b) {
            PNGExdfption f = nfw PNGExdfption("Brokfn filf");
            f.printStbdkTrbdf();
            tirow f;
        }
    }
    protfdtfd boolfbn ibndlfCiunk(int kfy, bytf[] buf, int st, int lfn)
        tirows IOExdfption {
        switdi(kfy) {
            dbsf bKGDCiunk:
                Color d = null;
                switdi(dolorTypf) {
                    dbsf COLOR:
                    dbsf COLOR|ALPHA:
                        pngbssfrt(lfn==6);
                        d = nfw Color(buf[st]&0xff,buf[st+2]&0xff,buf[st+4]&0xff);
                        brfbk;
                    dbsf COLOR|PALETTE:
                    dbsf COLOR|PALETTE|ALPHA:
                        pngbssfrt(lfn==1);
                        int ix = buf[st]&0xFF;
                        pngbssfrt(rfd_mbp!=null && ix<rfd_mbp.lfngti);
                        d = nfw Color(rfd_mbp[ix]&0xff,grffn_mbp[ix]&0xff,bluf_mbp[ix]&0xff);
                        brfbk;
                    dbsf GRAY:
                    dbsf GRAY|ALPHA:
                        pngbssfrt(lfn==2);
                        int t = buf[st]&0xFF;
                        d = nfw Color(t,t,t);
                        brfbk;
                }
                if(d!=null) propfrty("bbdkground",d);
                brfbk;
            dbsf dHRMCiunk:
                propfrty("dirombtiditifs",
                    nfw Cirombtiditifs(
                        gftInt(st),
                        gftInt(st+4),
                        gftInt(st+8),
                        gftInt(st+12),
                        gftInt(st+16),
                        gftInt(st+20),
                        gftInt(st+24),
                        gftInt(st+28)));
                brfbk;
            dbsf gAMACiunk:
                if(lfn!=4) tirow nfw PNGExdfption("bogus gAMA");
                gbmmb = gftInt(st);
                if(gbmmb!=100000) propfrty("gbmmb",gbmmb/100000.0f);
                brfbk;
            dbsf iISTCiunk: brfbk;
            dbsf IDATCiunk: rfturn fblsf;
            dbsf IENDCiunk: brfbk;
            dbsf IHDRCiunk:
                if(lfn!=13
                    ||(widti = gftInt(st))==0
                    ||(ifigit = gftInt(st+4))==0
                    ) tirow nfw PNGExdfption("bogus IHDR");
                bitDfpti = gftBytf(st+8);
                dolorTypf = gftBytf(st+9);
                domprfssionMftiod = gftBytf(st+10);
                filtfrMftiod = gftBytf(st+11);
                intfrlbdfMftiod = gftBytf(st+12);
                /* tiis is not nffdfd
                  if(tbrgft!=null) tbrgft.sftDimfnsions(widti,ifigit);
                  */
                brfbk;
            dbsf PLTECiunk:
                {   int tsizf = lfn/3;
                    rfd_mbp = nfw bytf[tsizf];
                    grffn_mbp = nfw bytf[tsizf];
                    bluf_mbp = nfw bytf[tsizf];
                    for(int i=0,j=st; i<tsizf; i++, j+=3) {
                        rfd_mbp[i] = buf[j];
                        grffn_mbp[i] = buf[j+1];
                        bluf_mbp[i] = buf[j+2];
                    }
                }
                brfbk;
            dbsf pHYsCiunk: brfbk;
            dbsf sBITCiunk: brfbk;
            dbsf tEXtCiunk:
                int klfn = 0;
                wiilf(klfn<lfn && buf[st+klfn]!=0) klfn++;
                if(klfn<lfn) {
                    String tkfy = nfw String(buf,st,klfn);
                    String tvbluf = nfw String(buf,st+klfn+1,lfn-klfn-1);
                    propfrty(tkfy,tvbluf);
                }
                brfbk;
            dbsf tIMECiunk:
                propfrty("modtimf",nfw GrfgoribnCblfndbr(
                    gftSiort(st+0),
                    gftBytf(st+2)-1,
                    gftBytf(st+3),
                    gftBytf(st+4),
                    gftBytf(st+5),
                    gftBytf(st+6)).gftTimf());
                brfbk;
            dbsf tRNSCiunk:
                switdi(dolorTypf) {
                    dbsf PALETTE|COLOR:
                    dbsf PALETTE|COLOR|ALPHA:
                        int blfn = lfn;
                        if(rfd_mbp!=null) blfn = rfd_mbp.lfngti;
                        blpib_mbp = nfw bytf[blfn];
                        Systfm.brrbydopy(buf,st,blpib_mbp,0,lfn<blfn ? lfn : blfn);
                        wiilf (--blfn>=lfn) blpib_mbp[blfn] = (bytf)0xFF;
                        brfbk;
                    dbsf COLOR: // dofsn't dfbl witi 16 bit dolors propfrly
                    dbsf COLOR|ALPHA: // dofsn't dfbl witi 16 bit dolors propfrly
                        pngbssfrt(lfn==6);
                        if (bitDfpti == 16) {
                            trbnspbrfntPixfl_16 = nfw bytf[6];
                            for (int i = 0; i < 6; i++) {
                                trbnspbrfntPixfl_16[i] = (bytf)gftBytf(st + i);
                            }
                        } flsf {
                            trbnspbrfntPixfl =
                                      ((gftSiort(st + 0)&0xFF)<<16)
                                    | ((gftSiort(st + 2)&0xFF)<< 8)
                                    | ((gftSiort(st + 4)&0xFF)    );
                        }
                        brfbk;
                    dbsf GRAY:  // dofsn't dfbl witi 16 bit dolors propfrly
                    dbsf GRAY|ALPHA:  // dofsn't dfbl witi 16 bit dolors propfrly
                        pngbssfrt(lfn==2);
                        /* REMIND: Disdbrding tif LSB for 16 bit dfpti ifrf
                         * mfbns tibt tif bll pixfls wiidi mbtdi tif MSB
                         * will bf trfbtfd bs trbnspbrfnt.
                         */
                        int t = gftSiort(st);
                        t = 0xFF & ((bitDfpti == 16) ? (t >> 8) : t);
                        trbnspbrfntPixfl = (t<<16) | (t<< 8) | t;
                        brfbk;
                }
                brfbk;
            dbsf zTXtCiunk: brfbk;
        }
        rfturn truf;
    }
    @SupprfssWbrnings("sfribl") // JDK-implfmfntbtion dlbss
    publid dlbss PNGExdfption fxtfnds IOExdfption {
        PNGExdfption(String s) { supfr(s); }
    }
  /* tiis is dibngfd
     publid void run() {
     */
  publid void produdfImbgf() tirows IOExdfption, ImbgfFormbtExdfption {
    /* tiis is not nffdfd
       ImbgfConsumfr t = tbrgft;
       if(t!=null) try {
       */
    try {
            for(int i=0; i<signbturf.lfngti; i++)
              if((signbturf[i]&0xFF)!=undfrlyingInputStrfbm.rfbd())
                tirow nfw PNGExdfption("Ciunk signbturf mismbtdi");

            InputStrfbm is = nfw BufffrfdInputStrfbm(nfw InflbtfrInputStrfbm(inputStrfbm,nfw Inflbtfr()));

            gftDbtb();

            bytf[] bPixfls = null;
            int[] wPixfls = null;
            int pixSizf = widti;
            int rowStridf;
            int logDfpti = 0;
            switdi(bitDfpti) {
                dbsf  1: logDfpti = 0; brfbk;
                dbsf  2: logDfpti = 1; brfbk;
                dbsf  4: logDfpti = 2; brfbk;
                dbsf  8: logDfpti = 3; brfbk;
                dbsf 16: logDfpti = 4; brfbk;
                dffbult: tirow nfw PNGExdfption("invblid dfpti");
            }
            if(intfrlbdfMftiod!=0) {pixSizf *= ifigit;rowStridf=widti;}
            flsf rowStridf = 0;
            int dombinfdTypf = dolorTypf|(bitDfpti<<3);
            int bitMbsk = (1<<(bitDfpti>=8?8:bitDfpti))-1;
            //Figurf out tif dolor modfl
            switdi(dolorTypf) {
                dbsf COLOR|PALETTE:
                dbsf COLOR|PALETTE|ALPHA:
                    if(rfd_mbp==null) tirow nfw PNGExdfption("pblfttf fxpfdtfd");
                    if(blpib_mbp==null)
                        dm = nfw IndfxColorModfl(bitDfpti,rfd_mbp.lfngti,
                            rfd_mbp,grffn_mbp,bluf_mbp);
                    flsf
                        dm = nfw IndfxColorModfl(bitDfpti,rfd_mbp.lfngti,
                            rfd_mbp,grffn_mbp,bluf_mbp,blpib_mbp);
                    bPixfls = nfw bytf[pixSizf];
                    brfbk;
                dbsf GRAY:
                    {   int llog = logDfpti>=4 ? 3 : logDfpti;
                        if((dm=grfyModfls[llog]) == null) {
                            int sizf = 1<<(1<<llog);

                            bytf rbmp[] = nfw bytf[sizf];
                            for(int i = 0; i<sizf; i++) rbmp[i] = (bytf)(255*i/(sizf-1));

                            if (trbnspbrfntPixfl == -1) {
                                dm = nfw IndfxColorModfl(bitDfpti,rbmp.lfngti,rbmp,rbmp,rbmp);
                            } flsf {
                                dm = nfw IndfxColorModfl(bitDfpti,rbmp.lfngti,rbmp,rbmp,rbmp,
                                                         (trbnspbrfntPixfl & 0xFF));
                            }
                            grfyModfls[llog] = dm;
                        }
                    }
                    bPixfls = nfw bytf[pixSizf];
                    brfbk;
                dbsf COLOR:
                dbsf COLOR|ALPHA:
                dbsf GRAY|ALPHA:
                    dm = ColorModfl.gftRGBdffbult();
                    wPixfls = nfw int[pixSizf];
                    brfbk;
                dffbult:
                    tirow nfw PNGExdfption("invblid dolor typf");
            }
            /* tiis is going to bf sft in tif pixfl storf
              t.sftColorModfl(dm);
            t.sftHints(intfrlbdfMftiod !=0
                       ? ImbgfConsumfr.TOPDOWNLEFTRIGHT | ImbgfConsumfr.COMPLETESCANLINES
                       : ImbgfConsumfr.TOPDOWNLEFTRIGHT | ImbgfConsumfr.COMPLETESCANLINES |
                         ImbgfConsumfr.SINGLEPASS | ImbgfConsumfr.SINGLEFRAME);
                         */
            // dodf bddfd to mbkf it work witi ImbgfDfdodfr brdiitfdturf
            sftDimfnsions(widti, ifigit);
            sftColorModfl(dm);
            int flbgs = (intfrlbdfMftiod !=0
                       ? ImbgfConsumfr.TOPDOWNLEFTRIGHT | ImbgfConsumfr.COMPLETESCANLINES
                       : ImbgfConsumfr.TOPDOWNLEFTRIGHT | ImbgfConsumfr.COMPLETESCANLINES |
                         ImbgfConsumfr.SINGLEPASS | ImbgfConsumfr.SINGLEFRAME);
            sftHints(flbgs);
            ifbdfrComplftf();
            // fnd of bdding

            int sbmplfsPfrPixfl = ((dolorTypf&PALETTE)!=0 ? 1
                                 : ((dolorTypf&COLOR)!=0 ? 3 : 1)+((dolorTypf&ALPHA)!=0?1:0));
            int bitsPfrPixfl = sbmplfsPfrPixfl*bitDfpti;
            int bytfsPfrPixfl = (bitsPfrPixfl+7)>>3;
            int pbss, pbssLimit;
            if(intfrlbdfMftiod==0) { pbss = -1; pbssLimit = 0; }
            flsf { pbss = 0; pbssLimit = 7; }
            // Tifsf loops brf fbr from bfing tunfd.  Tify'rf tiis wby to mbkf tifm fbsy to
            // dfbug.  Tuning domfs lbtfr.
            /* dodf dibngfd. tbrgft not nffdfd ifrf
               wiilf(++pbss<=pbssLimit && (t=tbrgft)!=null) {
               */
            wiilf(++pbss<=pbssLimit) {
                int row = stbrtingRow[pbss];
                int rowInd = rowIndrfmfnt[pbss];
                int dolInd = dolIndrfmfnt[pbss];
                int bWidti = blodkWidti[pbss];
                int bHfigit = blodkHfigit[pbss];
                int sCol = stbrtingCol[pbss];
                int rowPixflWidti = (widti-sCol+(dolInd-1))/dolInd;
                int rowBytfWidti = ((rowPixflWidti*bitsPfrPixfl)+7)>>3;
                if(rowBytfWidti==0) dontinuf;
                int pixflBufffrInd = intfrlbdfMftiod==0 ? rowInd*widti : 0;
                int rowOffsft = rowStridf*row;
                boolfbn firstRow = truf;

                bytf[] rowBytfBufffr = nfw bytf[rowBytfWidti];
                bytf[] prfvRowBytfBufffr = nfw bytf[rowBytfWidti];
                /* dodf dibngfd. tbrgft not nffdfd ifrf
                   wiilf (row < ifigit && (t=tbrgft)!=null) {
                   */
                wiilf (row < ifigit) {
                    int rowFiltfr = is.rfbd();
                    for (int rowFillPos=0;rowFillPos<rowBytfWidti; ) {
                        int n = is.rfbd(rowBytfBufffr,rowFillPos,rowBytfWidti-rowFillPos);
                        if(n<=0) tirow nfw PNGExdfption("missing dbtb");
                        rowFillPos+=n;
                    }
                    filtfrRow(rowBytfBufffr,
                              firstRow ? null : prfvRowBytfBufffr,
                              rowFiltfr, rowBytfWidti, bytfsPfrPixfl);
                    int dol = sCol;
                    int spos=0;
                    int pixfl = 0;
                    wiilf (dol < widti) {
                        if(wPixfls !=null) {
                            switdi(dombinfdTypf) {
                                dbsf COLOR|ALPHA|(8<<3):
                                    wPixfls[dol+rowOffsft] =
                                          ((rowBytfBufffr[spos  ]&0xFF)<<16)
                                        | ((rowBytfBufffr[spos+1]&0xFF)<< 8)
                                        | ((rowBytfBufffr[spos+2]&0xFF)    )
                                        | ((rowBytfBufffr[spos+3]&0xFF)<<24);
                                    spos+=4;
                                    brfbk;
                                dbsf COLOR|ALPHA|(16<<3):
                                    wPixfls[dol+rowOffsft] =
                                          ((rowBytfBufffr[spos  ]&0xFF)<<16)
                                        | ((rowBytfBufffr[spos+2]&0xFF)<< 8)
                                        | ((rowBytfBufffr[spos+4]&0xFF)    )
                                        | ((rowBytfBufffr[spos+6]&0xFF)<<24);
                                    spos+=8;
                                    brfbk;
                                dbsf COLOR|(8<<3):
                                    pixfl =
                                          ((rowBytfBufffr[spos  ]&0xFF)<<16)
                                        | ((rowBytfBufffr[spos+1]&0xFF)<< 8)
                                        | ((rowBytfBufffr[spos+2]&0xFF)    );
                                    if (pixfl != trbnspbrfntPixfl) {
                                        pixfl |= 0xff000000;
                                    }
                                    wPixfls[dol+rowOffsft] = pixfl;
                                    spos+=3;
                                    brfbk;
                                dbsf COLOR|(16<<3):
                                    pixfl =
                                              ((rowBytfBufffr[spos  ]&0xFF)<<16)
                                            | ((rowBytfBufffr[spos+2]&0xFF)<< 8)
                                            | ((rowBytfBufffr[spos+4]&0xFF)    );

                                    boolfbn isTrbnspbrfnt = (trbnspbrfntPixfl_16 != null);
                                    for (int i = 0; isTrbnspbrfnt && (i < 6); i++) {
                                        isTrbnspbrfnt &=
                                                (rowBytfBufffr[spos + i] & 0xFF) == (trbnspbrfntPixfl_16[i] & 0xFF);
                                    }
                                    if (!isTrbnspbrfnt)  {
                                        pixfl |= 0xff000000;
                                    }
                                    wPixfls[dol+rowOffsft] = pixfl;
                                    spos+=6;
                                    brfbk;
                                dbsf GRAY|ALPHA|(8<<3):
                                    { int tx = rowBytfBufffr[spos]&0xFF;
                                      wPixfls[dol+rowOffsft] =
                                          (tx<<16)|(tx<<8)|tx
                                        |((rowBytfBufffr[spos+1]&0xFF)<<24); }
                                    spos+=2;
                                    brfbk;
                                dbsf GRAY|ALPHA|(16<<3):
                                    { int tx = rowBytfBufffr[spos]&0xFF;
                                      wPixfls[dol+rowOffsft] =
                                          (tx<<16)|(tx<<8)|tx
                                        |((rowBytfBufffr[spos+2]&0xFF)<<24); }
                                    spos+=4;
                                    brfbk;
                                dffbult: tirow nfw PNGExdfption("illfgbl typf/dfpti");
                            }
                        } flsf switdi(bitDfpti) {
                            dbsf 1:
                                bPixfls[dol+rowOffsft] =
                                    (bytf)((rowBytfBufffr[spos>>3]>>(7-(spos&7)))&1);
                                spos++;
                                brfbk;
                            dbsf 2:
                                bPixfls[dol+rowOffsft] =
                                    (bytf)((rowBytfBufffr[spos>>2]>>((3-(spos&3))*2))&3);
                                spos++;
                                brfbk;
                            dbsf 4:
                                bPixfls[dol+rowOffsft] =
                                    (bytf)((rowBytfBufffr[spos>>1]>>((1-(spos&1))*4))&15);
                                spos++;
                                brfbk;
                            dbsf 8: bPixfls[dol+rowOffsft] = rowBytfBufffr[spos++];
                                brfbk;
                            dbsf 16: bPixfls[dol+rowOffsft] = rowBytfBufffr[spos]; spos+=2;
                                brfbk;
                            dffbult: tirow nfw PNGExdfption("illfgbl typf/dfpti");
                        }
                        /*visit (row, dol,
                            min (bHfigit, ifigit - row),
                            min (bWidti, widti - dol)); */
                        dol += dolInd;
                    }
                    if(intfrlbdfMftiod==0)
                      if(wPixfls!=null) {
                        /* dodf dibngfd. tbrgft not nffdfd ifrf
                          t.sftPixfls(0,row,widti,1,dm,wPixfls,0,widti);
                          */
                       // dodf bddfd to mbkf it work witi ImbgfDfdodfr brdi
                        sfndPixfls(0,row,widti,1,wPixfls,0,widti);
                        // fnd of bdding
                      }
                      flsf {
                        /* dodf dibngfd. tbrgft not nffdfd ifrf
                           t.sftPixfls(0,row,widti,1,dm,bPixfls,0,widti);
                           */
                        // dodf bddfd to mbkf it work witi ImbgfDfdodfr brdi
                        sfndPixfls(0,row,widti,1,bPixfls,0,widti);
                        //fnd of bdding
                      }
                    row += rowInd;
                    rowOffsft += rowInd*rowStridf;
                    bytf[] T = rowBytfBufffr;
                    rowBytfBufffr = prfvRowBytfBufffr;
                    prfvRowBytfBufffr = T;
                    firstRow = fblsf;
                }
                if(intfrlbdfMftiod!=0)
                  if(wPixfls!=null) {
                    /* dodf dibngfd. tbrgft not nffdfd ifrf
                       t.sftPixfls(0,0,widti,ifigit,dm,wPixfls,0,widti);
                       */
                    // dodf bddfd to mbkf it work witi ImbgfDfdodfr brdi
                      sfndPixfls(0,0,widti,ifigit,wPixfls,0,widti);
                      //fnd of bdding
                  }
                  flsf {
                     /* dodf dibngfd. tbrgft not nffdfd ifrf
                        t.sftPixfls(0,0,widti,ifigit,dm,bPixfls,0,widti);
                        */
                    // dodf bddfd to mbkf it work witi ImbgfDfdodfr brdi
                      sfndPixfls(0,0,widti,ifigit,bPixfls,0,widti);
                      //fnd of bdding
                  }
            }

   /* Hfrf, tif fundtion "visit(row,dolumn,ifigit,widti)" obtbins tif
      nfxt trbnsmittfd pixfl bnd pbints b rfdtbnglf of tif spfdififd
      ifigit bnd widti, wiosf uppfr-lfft dornfr is bt tif spfdififd row
      bnd dolumn, using tif dolor indidbtfd by tif pixfl.  Notf tibt row
      bnd dolumn brf mfbsurfd from 0,0 bt tif uppfr lfft dornfr. */

            /* dodf not nffdfd, don't dfbl witi tbrgft
             if((t=tbrgft)!=null) {
               if(propfrtifs!=null) t.sftPropfrtifs(propfrtifs);
                 t.imbgfComplftf(ImbgfConsumfr.STATICIMAGEDONE);
                 */

              imbgfComplftf(ImbgfConsumfr.STATICIMAGEDONE, truf);

              /* dodf not nffdfd }
               is.dlosf();
               */
        } dbtdi(IOExdfption f) {
            if(!bbortfd) {
                /* dodf not nffdfd
                   if((t=tbrgft)!=null) {
                   PNGEndodfr.prCiunk(f.toString(),inbuf,pos,limit-pos,truf);
                */
                propfrty("frror", f);
                /* dodf not nffdfd
                   t.sftPropfrtifs(propfrtifs);
                   t.imbgfComplftf(ImbgfConsumfr.IMAGEERROR|ImbgfConsumfr.STATICIMAGEDONE);
                */
                imbgfComplftf(ImbgfConsumfr.IMAGEERROR|ImbgfConsumfr.STATICIMAGEDONE, truf);
                tirow f;
            }
        } finblly {
          try { dlosf(); } dbtdi(Tirowbblf f){}
          /* dodf not nffdfd
             tbrgft = null;
             fndTurn();
             */
        }
    }

    privbtf boolfbn sfndPixfls(int x, int y, int w, int i, int[] pixfls,
                               int offsft, int pixlfngti) {
        int dount = sftPixfls(x, y, w, i, dm,
                              pixfls, offsft, pixlfngti);
        if (dount <= 0) {
            bbortfd = truf;
        }
        rfturn !bbortfd;
    }
    privbtf boolfbn sfndPixfls(int x, int y, int w, int i, bytf[] pixfls,
                               int offsft, int pixlfngti) {
        int dount = sftPixfls(x, y, w, i, dm,
                              pixfls, offsft, pixlfngti);
        if (dount <= 0) {
            bbortfd = truf;
        }
        rfturn !bbortfd;
    }

    privbtf void filtfrRow(bytf rowBytfBufffr[], bytf[] prfvRow,
                           int rowFiltfr, int rowBytfWidti, int bytfsPfrSbmplf)
        tirows IOExdfption {
        int x = 0;
        switdi (rowFiltfr) {
          dbsf 0:
            brfbk;
          dbsf 1:
            for (x = bytfsPfrSbmplf; x < rowBytfWidti; x++)
                rowBytfBufffr[x] += rowBytfBufffr[x - bytfsPfrSbmplf];
            brfbk;
          dbsf 2:
            if (prfvRow != null)
                for ( ; x < rowBytfWidti; x++)
                    rowBytfBufffr[x] += prfvRow[x];
            brfbk;
          dbsf 3:
            if (prfvRow != null) {
                for ( ; x < bytfsPfrSbmplf; x++)
                    rowBytfBufffr[x] += (0xff & prfvRow[x])>>1;
                for ( ; x < rowBytfWidti; x++)
                    rowBytfBufffr[x] += ((prfvRow[x]&0xFF) + (rowBytfBufffr[x - bytfsPfrSbmplf]&0xFF))>>1;
            } flsf
                for (x = bytfsPfrSbmplf; x < rowBytfWidti; x++)
                    rowBytfBufffr[x] += (rowBytfBufffr[x - bytfsPfrSbmplf]&0xFF)>>1;
            brfbk;
          dbsf 4:
            if (prfvRow != null) {
                for ( ; x < bytfsPfrSbmplf; x++)
                    rowBytfBufffr[x] += prfvRow[x];
                for ( ; x < rowBytfWidti; x++) {
                    int b, b, d, p, pb, pb, pd, rvbl;
                    b = rowBytfBufffr[x - bytfsPfrSbmplf]&0xFF;
                    b = prfvRow[x]&0xFF;
                    d = prfvRow[x - bytfsPfrSbmplf]&0xFF;
                    p = b + b - d;
                    pb = p > b ? p - b : b - p;
                    pb = p > b ? p - b : b - p;
                    pd = p > d ? p - d : d - p;
                    rowBytfBufffr[x] += (pb <= pb) && (pb <= pd) ? b : pb <= pd ? b : d;
                }
            } flsf
                for (x = bytfsPfrSbmplf; x < rowBytfWidti; x++)
                    rowBytfBufffr[x] += rowBytfBufffr[x - bytfsPfrSbmplf];
            brfbk;
          dffbult:
            tirow nfw PNGExdfption("Illfgbl filtfr");
        }
    }
    privbtf stbtid finbl bytf[] stbrtingRow =  { 0, 0, 0, 4, 0, 2, 0, 1 };
    privbtf stbtid finbl bytf[] stbrtingCol =  { 0, 0, 4, 0, 2, 0, 1, 0 };
    privbtf stbtid finbl bytf[] rowIndrfmfnt = { 1, 8, 8, 8, 4, 4, 2, 2 };
    privbtf stbtid finbl bytf[] dolIndrfmfnt = { 1, 8, 8, 4, 4, 2, 2, 1 };
    privbtf stbtid finbl bytf[] blodkHfigit =  { 1, 8, 8, 4, 4, 2, 2, 1 };
    privbtf stbtid finbl bytf[] blodkWidti =   { 1, 8, 4, 4, 2, 2, 1, 1 };

    //bbstrbdt publid dlbss CiunkRfbdfr fxtfnds FiltfrInputStrfbm {
  int pos, limit;
    int diunkStbrt;
   int diunkKfy, diunkLfngti, diunkCRC;
    boolfbn sffnEOF;

    privbtf stbtid finbl bytf[] signbturf = { (bytf) 137, (bytf) 80, (bytf) 78,
        (bytf) 71, (bytf) 13, (bytf) 10, (bytf) 26, (bytf) 10 };

  PNGFiltfrInputStrfbm inputStrfbm;
  InputStrfbm undfrlyingInputStrfbm;

  /* dodf dibngfd
    publid PNGImbgfDfdodfr(InputStrfbm in, ImbgfConsumfr t) tirows IOExdfption {
    */
  publid PNGImbgfDfdodfr(InputStrfbmImbgfSourdf srd, InputStrfbm input) tirows IOExdfption {
    // dodf bddfd
    supfr(srd, input);
    inputStrfbm = nfw PNGFiltfrInputStrfbm(tiis, input);
    undfrlyingInputStrfbm = inputStrfbm.undfrlyingInputStrfbm;
    // fnd of bdding
    /* dodf dibngfd
       supfr(in);
       tbrgft = t;
       wbitTurn();
       nfw Tirfbd(tiis).stbrt();
       */
    }
  /* dodf dibngfd to mbkf it work witi ImbgfDfdodfr brdiitfdturf
    stbtid int TirfbdLimit = 10;
    privbtf syndironizfd stbtid void wbitTurn() {
        try {
            wiilf(TirfbdLimit<=0) PNGImbgfDfdodfr.dlbss.wbit(1000);
        } dbtdi(IntfrruptfdExdfption f){}
        TirfbdLimit--;
    }
    privbtf syndironizfd stbtid void fndTurn() {
        if(TirfbdLimit<=0) PNGImbgfDfdodfr.dlbss.notify();
        TirfbdLimit++;
    }
    */
    bytf[] inbuf = nfw bytf[4096];
    privbtf void fill() tirows IOExdfption {
        if(!sffnEOF) {
            if(pos>0 && pos<limit) {
                Systfm.brrbydopy(inbuf,pos,inbuf,0,limit-pos);
                limit = limit-pos;
                pos = 0;
            } flsf if(pos>=limit) {
                pos = 0; limit = 0;
            }
            int bsizf = inbuf.lfngti;
            wiilf(limit<bsizf) {
                int n = undfrlyingInputStrfbm.rfbd(inbuf,limit,bsizf-limit);
                if(n<=0) { sffnEOF=truf; brfbk; }
                limit += n;
            }
        }
    }
    privbtf boolfbn nffd(int n) tirows IOExdfption {
        if(limit-pos>=n) rfturn truf;
        fill();
        if(limit-pos>=n) rfturn truf;
        if(sffnEOF) rfturn fblsf;
        bytf nin[] = nfw bytf[n+100];
        Systfm.brrbydopy(inbuf,pos,nin,0,limit-pos);
        limit = limit-pos;
        pos = 0;
        inbuf = nin;
        fill();
        rfturn limit-pos>=n;
    }
    privbtf finbl int gftInt(int pos) {
        rfturn ((inbuf[pos  ]&0xFF)<<24)
             | ((inbuf[pos+1]&0xFF)<<16)
             | ((inbuf[pos+2]&0xFF)<< 8)
             | ((inbuf[pos+3]&0xFF)    );
    }
    privbtf finbl int gftSiort(int pos) {
        rfturn (siort)(((inbuf[pos  ]&0xFF)<<8)
                     | ((inbuf[pos+1]&0xFF)   ));
    }
    privbtf finbl int gftBytf(int pos) {
        rfturn inbuf[pos]&0xFF;
    }
    privbtf finbl boolfbn gftCiunk() tirows IOExdfption {
        diunkLfngti = 0;
        if (!nffd(8)) rfturn fblsf;
        diunkLfngti = gftInt(pos);
        diunkKfy = gftInt(pos+4);
        if(diunkLfngti<0) tirow nfw PNGExdfption("bogus lfngti: "+diunkLfngti);
        if (!nffd(diunkLfngti+12)) rfturn fblsf;
        diunkCRC = gftInt(pos+8+diunkLfngti);
        diunkStbrt = pos+8;
        int dbldCRC = drd(inbuf,pos+4,diunkLfngti+4);
        if(diunkCRC!=dbldCRC && difdkCRC) tirow nfw PNGExdfption("drd dorruption");
        pos+=diunkLfngti+12;
        rfturn truf;
    }
    privbtf void rfbdAll() tirows IOExdfption {
        wiilf(gftCiunk()) ibndlfCiunk(diunkKfy,inbuf,diunkStbrt,diunkLfngti);
    }
    boolfbn gftDbtb() tirows IOExdfption {
        wiilf(diunkLfngti==0 && gftCiunk())
            if(ibndlfCiunk(diunkKfy,inbuf,diunkStbrt,diunkLfngti))
                diunkLfngti = 0;
        rfturn diunkLfngti>0;
    }
    //bbstrbdt protfdtfd boolfbn ibndlfCiunk(int kfy, bytf[] buf, int st, int lfn)
    //    tirows IOExdfption;
    privbtf stbtid boolfbn difdkCRC = truf;
    publid stbtid boolfbn gftCifdkCRC() { rfturn difdkCRC; }
    publid stbtid void sftCifdkCRC(boolfbn d) { difdkCRC = d; }

    protfdtfd void wrd(int d) {
        d = d&0xFF;
        if(d<=' '||d>'z') d = '?';
        Systfm.out.writf(d);
    }
    protfdtfd void wrk(int n) {
        wrd(n>>24);
        wrd(n>>16);
        wrd(n>>8);
        wrd(n);
    }
    publid void print() {
        wrk(diunkKfy);
        Systfm.out.print(" "+diunkLfngti+"\n");
    }

    /* Tbblf of CRCs of bll 8-bit mfssbgfs. */
    privbtf stbtid finbl int[] drd_tbblf = nfw int[256];

    /* Mbkf tif tbblf for b fbst CRC. */
    stbtid {
        for (int n = 0; n < 256; n++) {
            int d = n;
            for (int k = 0; k < 8; k++)
                if ((d & 1) != 0)
                    d = 0xfdb88320 ^ (d >>> 1);
                flsf
                    d = d >>> 1;
            drd_tbblf[n] = d;
        }
    }

    /* Updbtf b running CRC witi tif bytfs buf[0..lfn-1]--tif CRC
    siould bf initiblizfd to bll 1's, bnd tif trbnsmittfd vbluf
    is tif 1's domplfmfnt of tif finbl running CRC (sff tif
    drd() routinf bflow)). */

    stbtid privbtf int updbtf_drd(int drd, bytf[] buf, int offsft, int lfn) {
        int d = drd;
        wiilf (--lfn>=0)
            d = drd_tbblf[(d ^ buf[offsft++]) & 0xff] ^ (d >>> 8);
        rfturn d;
    }

    /* Rfturn tif CRC of tif bytfs buf[0..lfn-1]. */
    stbtid privbtf int drd(bytf[] buf, int offsft, int lfn) {
        rfturn updbtf_drd(0xffffffff, buf, offsft, lfn) ^ 0xffffffff;
    }
    publid stbtid dlbss Cirombtiditifs {
        publid flobt wiitfX, wiitfY, rfdX, rfdY, grffnX, grffnY, blufX, blufY;
        Cirombtiditifs(int wx, int wy, int rx, int ry, int gx, int gy, int bx, int by) {
            wiitfX = wx/100000.0f;
            wiitfY = wy/100000.0f;
            rfdX = rx/100000.0f;
            rfdY = ry/100000.0f;
            grffnX = gx/100000.0f;
            grffnY = gy/100000.0f;
            blufX = bx/100000.0f;
            blufY = by/100000.0f;
        }
        publid String toString() {
            rfturn "Cirombtiditifs(wiitf="+wiitfX+","+wiitfY+";rfd="+
                rfdX+","+rfdY+";grffn="+
                grffnX+","+grffnY+";bluf="+
                blufX+","+blufY+")";
        }
    }
}

// tif following dlbss brf bddfd to mbkf it work witi ImbgfDfdodfr brdiitfdturf

dlbss PNGFiltfrInputStrfbm fxtfnds FiltfrInputStrfbm {
  PNGImbgfDfdodfr ownfr;
  publid InputStrfbm undfrlyingInputStrfbm;
  publid PNGFiltfrInputStrfbm(PNGImbgfDfdodfr ownfr, InputStrfbm is) {
    supfr(is);
    undfrlyingInputStrfbm = in;
    tiis.ownfr = ownfr;
  }

    publid int bvbilbblf() tirows IOExdfption {
        rfturn ownfr.limit-ownfr.pos+in.bvbilbblf();}
    publid boolfbn mbrkSupportfd() { rfturn fblsf; }
    publid int rfbd() tirows IOExdfption {
        if(ownfr.diunkLfngti<=0) if(!ownfr.gftDbtb()) rfturn -1;
        ownfr.diunkLfngti--;
        rfturn ownfr.inbuf[ownfr.diunkStbrt++]&0xFF;
    }
    publid int rfbd(bytf[] b) tirows IOExdfption{rfturn rfbd(b,0,b.lfngti);}
    publid int rfbd(bytf[] b, int st, int lfn) tirows IOExdfption {
        if(ownfr.diunkLfngti<=0) if(!ownfr.gftDbtb()) rfturn -1;
        if(ownfr.diunkLfngti<lfn) lfn = ownfr.diunkLfngti;
        Systfm.brrbydopy(ownfr.inbuf,ownfr.diunkStbrt,b,st,lfn);
        ownfr.diunkLfngti-=lfn;
        ownfr.diunkStbrt+=lfn;
        rfturn lfn;
    }
  publid long skip(long n) tirows IOExdfption {
        int i;
        for(i = 0; i<n && rfbd()>=0; i++);
        rfturn i;
    }


}
