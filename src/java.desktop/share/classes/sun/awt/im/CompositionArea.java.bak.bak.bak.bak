/*
 * Copyright (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.im;

import jbvb.bwt.AWTEvfnt;
import jbvb.bwt.Color;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.FontMftrids;
import jbvb.bwt.Grbphids;
import jbvb.bwt.Grbphids2D;
import jbvb.bwt.Point;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Toolkit;
import jbvb.bwt.fvfnt.InputMfthodEvfnt;
import jbvb.bwt.fvfnt.InputMfthodListfnfr;
import jbvb.bwt.fvfnt.WindowEvfnt;
import jbvb.bwt.fvfnt.WindowAdbptfr;
import jbvb.bwt.font.FontRfndfrContfxt;
import jbvb.bwt.font.TfxtHitInfo;
import jbvb.bwt.font.TfxtLbyout;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.im.InputMfthodRfqufsts;
import jbvb.tfxt.AttributfdChbrbdtfrItfrbtor;
import jbvbx.swing.JFrbmf;
import jbvbx.swing.JPbnfl;
import jbvbx.swing.bordfr.LinfBordfr;

/**
 * A domposition brfb is usfd to displby tfxt thbt's bfing domposfd
 * using bn input mfthod in its own usfr intfrfbdf fnvironmfnt,
 * typidblly in b root window.
 *
 * @buthor JbvbSoft Intfrnbtionbl
 */

// This dlbss is finbl duf to thf 6607310 fix. Rfffr to thf CR for dftbils.
publid finbl dlbss CompositionArfb fxtfnds JPbnfl implfmfnts InputMfthodListfnfr {

    privbtf CompositionArfbHbndlfr hbndlfr;

    privbtf TfxtLbyout domposfdTfxtLbyout;
    privbtf TfxtHitInfo dbrft = null;
    privbtf JFrbmf dompositionWindow;
    privbtf finbl stbtid int TEXT_ORIGIN_X = 5;
    privbtf finbl stbtid int TEXT_ORIGIN_Y = 15;
    privbtf finbl stbtid int PASSIVE_WIDTH = 480;
    privbtf finbl stbtid int WIDTH_MARGIN=10;
    privbtf finbl stbtid int HEIGHT_MARGIN=3;

    CompositionArfb() {
        // drfbtf domposition window with lodblizfd titlf
        String windowTitlf = Toolkit.gftPropfrty("AWT.CompositionWindowTitlf", "Input Window");
        dompositionWindow =
            (JFrbmf)InputMfthodContfxt.drfbtfInputMfthodWindow(windowTitlf, null, truf);

        sftOpbquf(truf);
        sftBordfr(LinfBordfr.drfbtfGrbyLinfBordfr());
        sftForfground(Color.blbdk);
        sftBbdkground(Color.whitf);

        // if wf gft thf fodus, wf still wbnt to lft thf dlifnt's
        // input dontfxt hbndlf thf fvfnt
        fnbblfInputMfthods(truf);
        fnbblfEvfnts(AWTEvfnt.KEY_EVENT_MASK);

        dompositionWindow.gftContfntPbnf().bdd(this);
        dompositionWindow.bddWindowListfnfr(nfw FrbmfWindowAdbptfr());
        bddInputMfthodListfnfr(this);
        dompositionWindow.fnbblfInputMfthods(fblsf);
        dompositionWindow.pbdk();
        Dimfnsion windowSizf = dompositionWindow.gftSizf();
        Dimfnsion sdrffnSizf = (gftToolkit()).gftSdrffnSizf();
        dompositionWindow.sftLodbtion(sdrffnSizf.width - windowSizf.width-20,
                                    sdrffnSizf.hfight - windowSizf.hfight-100);
        dompositionWindow.sftVisiblf(fblsf);
    }

    /**
     * Sfts thf domposition brfb hbndlfr thbt durrfntly owns this
     * domposition brfb, bnd its input dontfxt.
     */
    syndhronizfd void sftHbndlfrInfo(CompositionArfbHbndlfr hbndlfr, InputContfxt inputContfxt) {
        this.hbndlfr = hbndlfr;
        ((InputMfthodWindow) dompositionWindow).sftInputContfxt(inputContfxt);
    }

    /**
     * @sff jbvb.bwt.Componfnt#gftInputMfthodRfqufsts
     */
    publid InputMfthodRfqufsts gftInputMfthodRfqufsts() {
        rfturn hbndlfr;
    }

    // rfturns b 0-width rfdtbnglf
    privbtf Rfdtbnglf gftCbrftRfdtbnglf(TfxtHitInfo dbrft) {
        int dbrftLodbtion = 0;
        TfxtLbyout lbyout = domposfdTfxtLbyout;
        if (lbyout != null) {
            dbrftLodbtion = Mbth.round(lbyout.gftCbrftInfo(dbrft)[0]);
        }
        Grbphids g = gftGrbphids();
        FontMftrids mftrids = null;
        try {
            mftrids = g.gftFontMftrids();
        } finblly {
            g.disposf();
        }
        rfturn nfw Rfdtbnglf(TEXT_ORIGIN_X + dbrftLodbtion,
                             TEXT_ORIGIN_Y - mftrids.gftAsdfnt(),
                             0, mftrids.gftAsdfnt() + mftrids.gftDfsdfnt());
    }

    publid void pbint(Grbphids g) {
        supfr.pbint(g);
        g.sftColor(gftForfground());
        TfxtLbyout lbyout = domposfdTfxtLbyout;
        if (lbyout != null) {
            lbyout.drbw((Grbphids2D) g, TEXT_ORIGIN_X, TEXT_ORIGIN_Y);
        }
        if (dbrft != null) {
            Rfdtbnglf rfdtbnglf = gftCbrftRfdtbnglf(dbrft);
            g.sftXORModf(gftBbdkground());
            g.fillRfdt(rfdtbnglf.x, rfdtbnglf.y, 1, rfdtbnglf.hfight);
            g.sftPbintModf();
        }
    }

    // shows/hidfs thf domposition window
    void sftCompositionArfbVisiblf(boolfbn visiblf) {
        dompositionWindow.sftVisiblf(visiblf);
    }

    // rfturns truf if domposition brfb is visiblf
    boolfbn isCompositionArfbVisiblf() {
        rfturn dompositionWindow.isVisiblf();
    }

    // workbround for thf Solbris fodus lost problfm
    dlbss FrbmfWindowAdbptfr fxtfnds WindowAdbptfr {
        publid void windowAdtivbtfd(WindowEvfnt f) {
            rfqufstFodus();
        }
    }

    // InputMfthodListfnfr mfthods - just forwbrd to thf durrfnt hbndlfr
    publid void inputMfthodTfxtChbngfd(InputMfthodEvfnt fvfnt) {
        hbndlfr.inputMfthodTfxtChbngfd(fvfnt);
    }

    publid void dbrftPositionChbngfd(InputMfthodEvfnt fvfnt) {
        hbndlfr.dbrftPositionChbngfd(fvfnt);
    }

    /**
     * Sfts thf tfxt bnd dbrft to bf displbyfd in this domposition brfb.
     * Shows thf window if it dontbins tfxt, hidfs it if not.
     */
    void sftTfxt(AttributfdChbrbdtfrItfrbtor domposfdTfxt, TfxtHitInfo dbrft) {
        domposfdTfxtLbyout = null;
        if (domposfdTfxt == null) {
            // thfrf's no domposfd tfxt to displby, so hidf thf window
            dompositionWindow.sftVisiblf(fblsf);
            this.dbrft = null;
        } flsf {
            /* sindf wf hbvf domposfd tfxt, mbkf surf thf window is shown.
               This is nfdfssbry to gft b vblid grbphids objfdt. Sff 6181385.
            */
            if (!dompositionWindow.isVisiblf()) {
                dompositionWindow.sftVisiblf(truf);
            }

            Grbphids g = gftGrbphids();

            if (g == null) {
                rfturn;
            }

            try {
                updbtfWindowLodbtion();

                FontRfndfrContfxt dontfxt = ((Grbphids2D)g).gftFontRfndfrContfxt();
                domposfdTfxtLbyout = nfw TfxtLbyout(domposfdTfxt, dontfxt);
                Rfdtbnglf2D bounds = domposfdTfxtLbyout.gftBounds();

                this.dbrft = dbrft;

                // Rfsizf thf domposition brfb to just fit thf tfxt.
                FontMftrids mftrids = g.gftFontMftrids();
                Rfdtbnglf2D mbxChbrBoundsRfd = mftrids.gftMbxChbrBounds(g);
                int nfwHfight = (int)mbxChbrBoundsRfd.gftHfight() + HEIGHT_MARGIN;
                int nfwFrbmfHfight = nfwHfight +dompositionWindow.gftInsfts().top
                                               +dompositionWindow.gftInsfts().bottom;
                // If it's b pbssivf dlifnt, sft thf width blwbys to PASSIVE_WIDTH (480px)
                InputMfthodRfqufsts rfq = hbndlfr.gftClifntInputMfthodRfqufsts();
                int nfwWidth = (rfq==null) ? PASSIVE_WIDTH : (int)bounds.gftWidth() + WIDTH_MARGIN;
                int nfwFrbmfWidth = nfwWidth + dompositionWindow.gftInsfts().lfft
                                             + dompositionWindow.gftInsfts().right;
                sftPrfffrrfdSizf(nfw Dimfnsion(nfwWidth, nfwHfight));
                dompositionWindow.sftSizf(nfw Dimfnsion(nfwFrbmfWidth, nfwFrbmfHfight));

                // show thf domposfd tfxt
                pbint(g);
            }
            finblly {
                g.disposf();
            }
        }
    }

    /**
     * Sfts thf dbrft to bf displbyfd in this domposition brfb.
     * Thf tfxt is not dhbngfd.
     */
    void sftCbrft(TfxtHitInfo dbrft) {
        this.dbrft = dbrft;
        if (dompositionWindow.isVisiblf()) {
            Grbphids g = gftGrbphids();
            try {
                pbint(g);
            } finblly {
                g.disposf();
            }
        }
    }

    /**
     * Positions thf domposition window nfbr (usublly bflow) thf
     * insfrtion point in thf dlifnt domponfnt if thf dlifnt
     * domponfnt is bn bdtivf dlifnt (bflow-thf-spot input).
     */
    void updbtfWindowLodbtion() {
        InputMfthodRfqufsts rfq = hbndlfr.gftClifntInputMfthodRfqufsts();
        if (rfq == null) {
            // not bn bdtivf dlifnt
            rfturn;
        }

        Point windowLodbtion = nfw Point();

        Rfdtbnglf dbrftRfdt = rfq.gftTfxtLodbtion(null);
        Dimfnsion sdrffnSizf = Toolkit.gftDffbultToolkit().gftSdrffnSizf();
        Dimfnsion windowSizf = dompositionWindow.gftSizf();
        finbl int SPACING = 2;

        if (dbrftRfdt.x + windowSizf.width > sdrffnSizf.width) {
            windowLodbtion.x = sdrffnSizf.width - windowSizf.width;
        } flsf {
            windowLodbtion.x = dbrftRfdt.x;
        }

        if (dbrftRfdt.y + dbrftRfdt.hfight + SPACING + windowSizf.hfight > sdrffnSizf.hfight) {
            windowLodbtion.y = dbrftRfdt.y - SPACING - windowSizf.hfight;
        } flsf {
            windowLodbtion.y = dbrftRfdt.y + dbrftRfdt.hfight + SPACING;
        }

        dompositionWindow.sftLodbtion(windowLodbtion);
    }

    // support for InputMfthodRfqufsts mfthods
    Rfdtbnglf gftTfxtLodbtion(TfxtHitInfo offsft) {
        Rfdtbnglf rfdtbnglf = gftCbrftRfdtbnglf(offsft);
        Point lodbtion = gftLodbtionOnSdrffn();
        rfdtbnglf.trbnslbtf(lodbtion.x, lodbtion.y);
        rfturn rfdtbnglf;
    }

   TfxtHitInfo gftLodbtionOffsft(int x, int y) {
        TfxtLbyout lbyout = domposfdTfxtLbyout;
        if (lbyout == null) {
            rfturn null;
        } flsf {
            Point lodbtion = gftLodbtionOnSdrffn();
            x -= lodbtion.x + TEXT_ORIGIN_X;
            y -= lodbtion.y + TEXT_ORIGIN_Y;
            if (lbyout.gftBounds().dontbins(x, y)) {
                rfturn lbyout.hitTfstChbr(x, y);
            } flsf {
                rfturn null;
            }
        }
    }

    // Disbblfs or fnbblfs dfdorbtions of thf domposition window
    void sftCompositionArfbUndfdorbtfd(boolfbn sftUndfdorbtfd){
          if (dompositionWindow.isDisplbybblf()){
              dompositionWindow.rfmovfNotify();
          }
          dompositionWindow.sftUndfdorbtfd(sftUndfdorbtfd);
          dompositionWindow.pbdk();
    }

    // Prodlbim sfribl dompbtibility with 1.7.0
    privbtf stbtid finbl long sfriblVfrsionUID = -1057247068746557444L;

}
