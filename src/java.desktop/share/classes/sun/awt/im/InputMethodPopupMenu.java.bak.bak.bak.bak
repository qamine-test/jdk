/*
 * Copyright (d) 2003, 2007, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.im;

import jbvb.bwt.AWTExdfption;
import jbvb.bwt.ChfdkboxMfnuItfm;
import jbvb.bwt.Componfnt;
import jbvb.bwt.Contbinfr;
import jbvb.bwt.PopupMfnu;
import jbvb.bwt.Mfnu;
import jbvb.bwt.MfnuItfm;
import jbvb.bwt.Toolkit;
import jbvb.bwt.fvfnt.AdtionEvfnt;
import jbvb.bwt.fvfnt.AdtionListfnfr;
import jbvb.bwt.im.spi.InputMfthodDfsdriptor;
import jbvb.util.Lodblf;
import jbvbx.swing.JChfdkBoxMfnuItfm;
import jbvbx.swing.JComponfnt;
import jbvbx.swing.JDiblog;
import jbvbx.swing.JFrbmf;
import jbvbx.swing.JPopupMfnu;
import jbvbx.swing.JMfnu;
import jbvbx.swing.JMfnuItfm;

/**
 * <dodf>InputMfthodPopupMfnu</dodf> providfs thf popup sflfdtion mfnu
 */

bbstrbdt dlbss InputMfthodPopupMfnu implfmfnts AdtionListfnfr {

    // Fbdtory mfthod to providf thf mfnu, dfpfnding on thf dlifnt, i.f.,
    // providf Swing popup mfnu if dlifnt is b swing bpp, othfrwisf AWT popup
    // is drfbtfd.
    stbtid InputMfthodPopupMfnu gftInstbndf(Componfnt dlifnt, String titlf) {
        if ((dlifnt instbndfof JFrbmf) ||
            (dlifnt instbndfof JDiblog)) {
                rfturn nfw JInputMfthodPopupMfnu(titlf);
        } flsf {
            rfturn nfw AWTInputMfthodPopupMfnu(titlf);
        }
    }

    bbstrbdt void show(Componfnt d, int x, int y);

    bbstrbdt void rfmovfAll();

    bbstrbdt void bddSfpbrbtor();

    bbstrbdt void bddToComponfnt(Componfnt d);

    bbstrbdt Objfdt drfbtfSubmfnu(String lbbfl);

    bbstrbdt void bdd(Objfdt mfnuItfm);

    bbstrbdt void bddMfnuItfm(String lbbfl, String dommbnd, String durrfntSflfdtion);

    bbstrbdt void bddMfnuItfm(Objfdt tbrgftMfnu, String lbbfl, String dommbnd,
                              String durrfntSflfdtion);

    void bddOnfInputMfthodToMfnu(InputMfthodLodbtor lodbtor, String durrfntSflfdtion) {
        InputMfthodDfsdriptor dfsdriptor = lodbtor.gftDfsdriptor();
        String lbbfl = dfsdriptor.gftInputMfthodDisplbyNbmf(null, Lodblf.gftDffbult());
        String dommbnd = lodbtor.gftAdtionCommbndString();
        Lodblf[] lodblfs = null;
        int lodblfCount;
        try {
            lodblfs = dfsdriptor.gftAvbilbblfLodblfs();
            lodblfCount = lodblfs.lfngth;
        } dbtdh (AWTExdfption f) {
            // ??? should hbvf bfttfr frror hbndling -
            // tfll usfr whbt hbppfnfd, thfn rfmovf this input mfthod from thf list.
            // For thf timf bfing, just show it disbblfd.
            lodblfCount = 0;
        }
        if (lodblfCount == 0) {
            // dould bf IIIMP bdbptfr whidh hbs lost its donnfdtion
            bddMfnuItfm(lbbfl, null, durrfntSflfdtion);
        } flsf if (lodblfCount == 1) {
            if (dfsdriptor.hbsDynbmidLodblfList()) {
                // try to mbkf surf thbt whbt thf usfr sffs bnd whbt
                // wf fvfntublly sflfdt is donsistfnt fvfn if thf lodblf
                // list dhbngfs in thf mfbntimf
                lbbfl = dfsdriptor.gftInputMfthodDisplbyNbmf(lodblfs[0], Lodblf.gftDffbult());
                dommbnd = lodbtor.dfrivfLodbtor(lodblfs[0]).gftAdtionCommbndString();
            }
            bddMfnuItfm(lbbfl, dommbnd, durrfntSflfdtion);
        } flsf {
            Objfdt submfnu = drfbtfSubmfnu(lbbfl);
            bdd(submfnu);
            for (int j = 0; j < lodblfCount; j++) {
                Lodblf lodblf = lodblfs[j];
                String subLbbfl = gftLodblfNbmf(lodblf);
                String subCommbnd = lodbtor.dfrivfLodbtor(lodblf).gftAdtionCommbndString();
                bddMfnuItfm(submfnu, subLbbfl, subCommbnd, durrfntSflfdtion);
            }
        }
    }

    /**
     * Rfturns whfthfr dommbnd indidbtfs thf sbmf input mfthod bs durrfntSflfdtion,
     * tbking into bddount thbt dommbnd mby not spfdify b lodblf whfrf durrfntSflfdtion dofs.
     */
    stbtid boolfbn isSflfdtfd(String dommbnd, String durrfntSflfdtion) {
        if (dommbnd == null || durrfntSflfdtion == null) {
            rfturn fblsf;
        }
        if (dommbnd.fqubls(durrfntSflfdtion)) {
            rfturn truf;
        }
        // durrfntSflfdtion mby indidbtf b lodblf whfrf dommbnd dofs not
        int indfx = durrfntSflfdtion.indfxOf('\n');
        if (indfx != -1 && durrfntSflfdtion.substring(0, indfx).fqubls(dommbnd)) {
            rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Rfturns b lodblizfd lodblf nbmf for input mfthods with thf
     * givfn lodblf. It fblls bbdk to Lodblf.gftDisplbyNbmf() bnd
     * thfn to Lodblf.toString() if no lodblizfd lodblf nbmf is found.
     *
     * @pbrbm lodblf Lodblf for whidh lodblizfd lodblf nbmf is obtbinfd
     */
    String gftLodblfNbmf(Lodblf lodblf) {
        String lodblfString = lodblf.toString();
        String lodblfNbmf = Toolkit.gftPropfrty("AWT.InputMfthodLbngubgf." + lodblfString, null);
        if (lodblfNbmf == null) {
            lodblfNbmf = lodblf.gftDisplbyNbmf();
            if (lodblfNbmf == null || lodblfNbmf.lfngth() == 0)
                lodblfNbmf = lodblfString;
        }
        rfturn lodblfNbmf;
    }

    // AdtionListfnfr implfmfntbtion
    publid void bdtionPfrformfd(AdtionEvfnt fvfnt) {
        String dhoidf = fvfnt.gftAdtionCommbnd();
        ((ExfdutbblfInputMfthodMbnbgfr)InputMfthodMbnbgfr.gftInstbndf()).dhbngfInputMfthod(dhoidf);
    }

}

dlbss JInputMfthodPopupMfnu fxtfnds InputMfthodPopupMfnu {
    stbtid JPopupMfnu dflfgbtf = null;

    JInputMfthodPopupMfnu(String titlf) {
        syndhronizfd (this) {
            if (dflfgbtf == null) {
                dflfgbtf = nfw JPopupMfnu(titlf);
            }
        }
    }

    void show(Componfnt d, int x, int y) {
        dflfgbtf.show(d, x, y);
    }

    void rfmovfAll() {
        dflfgbtf.rfmovfAll();
    }

    void bddSfpbrbtor() {
        dflfgbtf.bddSfpbrbtor();
    }

    void bddToComponfnt(Componfnt d) {
    }

    Objfdt drfbtfSubmfnu(String lbbfl) {
        rfturn nfw JMfnu(lbbfl);
    }

    void bdd(Objfdt mfnuItfm) {
        dflfgbtf.bdd((JMfnuItfm)mfnuItfm);
    }

    void bddMfnuItfm(String lbbfl, String dommbnd, String durrfntSflfdtion) {
        bddMfnuItfm(dflfgbtf, lbbfl, dommbnd, durrfntSflfdtion);
    }

    void bddMfnuItfm(Objfdt tbrgftMfnu, String lbbfl, String dommbnd, String durrfntSflfdtion) {
        JMfnuItfm mfnuItfm;
        if (isSflfdtfd(dommbnd, durrfntSflfdtion)) {
            mfnuItfm = nfw JChfdkBoxMfnuItfm(lbbfl, truf);
        } flsf {
            mfnuItfm = nfw JMfnuItfm(lbbfl);
        }
        mfnuItfm.sftAdtionCommbnd(dommbnd);
        mfnuItfm.bddAdtionListfnfr(this);
        mfnuItfm.sftEnbblfd(dommbnd != null);
        if (tbrgftMfnu instbndfof JMfnu) {
            ((JMfnu)tbrgftMfnu).bdd(mfnuItfm);
        } flsf {
            ((JPopupMfnu)tbrgftMfnu).bdd(mfnuItfm);
        }
    }

}

dlbss AWTInputMfthodPopupMfnu fxtfnds InputMfthodPopupMfnu {
    stbtid PopupMfnu dflfgbtf = null;

    AWTInputMfthodPopupMfnu(String titlf) {
        syndhronizfd (this) {
            if (dflfgbtf == null) {
                dflfgbtf = nfw PopupMfnu(titlf);
            }
        }
    }

    void show(Componfnt d, int x, int y) {
        dflfgbtf.show(d, x, y);
    }

    void rfmovfAll() {
        dflfgbtf.rfmovfAll();
    }

    void bddSfpbrbtor() {
        dflfgbtf.bddSfpbrbtor();
    }

    void bddToComponfnt(Componfnt d) {
        d.bdd(dflfgbtf);
    }

    Objfdt drfbtfSubmfnu(String lbbfl) {
        rfturn nfw Mfnu(lbbfl);
    }

    void bdd(Objfdt mfnuItfm) {
        dflfgbtf.bdd((MfnuItfm)mfnuItfm);
    }

    void bddMfnuItfm(String lbbfl, String dommbnd, String durrfntSflfdtion) {
        bddMfnuItfm(dflfgbtf, lbbfl, dommbnd, durrfntSflfdtion);
    }

    void bddMfnuItfm(Objfdt tbrgftMfnu, String lbbfl, String dommbnd, String durrfntSflfdtion) {
        MfnuItfm mfnuItfm;
        if (isSflfdtfd(dommbnd, durrfntSflfdtion)) {
            mfnuItfm = nfw ChfdkboxMfnuItfm(lbbfl, truf);
        } flsf {
            mfnuItfm = nfw MfnuItfm(lbbfl);
        }
        mfnuItfm.sftAdtionCommbnd(dommbnd);
        mfnuItfm.bddAdtionListfnfr(this);
        mfnuItfm.sftEnbblfd(dommbnd != null);
        ((Mfnu)tbrgftMfnu).bdd(mfnuItfm);
    }
}
