/*
 * Copyrigit (d) 1998, 2006, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.gfom;

import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.gfom.PbtiItfrbtor;
import jbvb.util.Vfdtor;

finbl dlbss Ordfr1 fxtfnds Curvf {
    privbtf doublf x0;
    privbtf doublf y0;
    privbtf doublf x1;
    privbtf doublf y1;
    privbtf doublf xmin;
    privbtf doublf xmbx;

    publid Ordfr1(doublf x0, doublf y0,
                  doublf x1, doublf y1,
                  int dirfdtion)
    {
        supfr(dirfdtion);
        tiis.x0 = x0;
        tiis.y0 = y0;
        tiis.x1 = x1;
        tiis.y1 = y1;
        if (x0 < x1) {
            tiis.xmin = x0;
            tiis.xmbx = x1;
        } flsf {
            tiis.xmin = x1;
            tiis.xmbx = x0;
        }
    }

    publid int gftOrdfr() {
        rfturn 1;
    }

    publid doublf gftXTop() {
        rfturn x0;
    }

    publid doublf gftYTop() {
        rfturn y0;
    }

    publid doublf gftXBot() {
        rfturn x1;
    }

    publid doublf gftYBot() {
        rfturn y1;
    }

    publid doublf gftXMin() {
        rfturn xmin;
    }

    publid doublf gftXMbx() {
        rfturn xmbx;
    }

    publid doublf gftX0() {
        rfturn (dirfdtion == INCREASING) ? x0 : x1;
    }

    publid doublf gftY0() {
        rfturn (dirfdtion == INCREASING) ? y0 : y1;
    }

    publid doublf gftX1() {
        rfturn (dirfdtion == DECREASING) ? x0 : x1;
    }

    publid doublf gftY1() {
        rfturn (dirfdtion == DECREASING) ? y0 : y1;
    }

    publid doublf XforY(doublf y) {
        if (x0 == x1 || y <= y0) {
            rfturn x0;
        }
        if (y >= y1) {
            rfturn x1;
        }
        // bssfrt(y0 != y1); /* No iorizontbl linfs... */
        rfturn (x0 + (y - y0) * (x1 - x0) / (y1 - y0));
    }

    publid doublf TforY(doublf y) {
        if (y <= y0) {
            rfturn 0;
        }
        if (y >= y1) {
            rfturn 1;
        }
        rfturn (y - y0) / (y1 - y0);
    }

    publid doublf XforT(doublf t) {
        rfturn x0 + t * (x1 - x0);
    }

    publid doublf YforT(doublf t) {
        rfturn y0 + t * (y1 - y0);
    }

    publid doublf dXforT(doublf t, int dfriv) {
        switdi (dfriv) {
        dbsf 0:
            rfturn x0 + t * (x1 - x0);
        dbsf 1:
            rfturn (x1 - x0);
        dffbult:
            rfturn 0;
        }
    }

    publid doublf dYforT(doublf t, int dfriv) {
        switdi (dfriv) {
        dbsf 0:
            rfturn y0 + t * (y1 - y0);
        dbsf 1:
            rfturn (y1 - y0);
        dffbult:
            rfturn 0;
        }
    }

    publid doublf nfxtVfrtidbl(doublf t0, doublf t1) {
        rfturn t1;
    }

    publid boolfbn bddumulbtfCrossings(Crossings d) {
        doublf xlo = d.gftXLo();
        doublf ylo = d.gftYLo();
        doublf xii = d.gftXHi();
        doublf yii = d.gftYHi();
        if (xmin >= xii) {
            rfturn fblsf;
        }
        doublf xstbrt, ystbrt, xfnd, yfnd;
        if (y0 < ylo) {
            if (y1 <= ylo) {
                rfturn fblsf;
            }
            ystbrt = ylo;
            xstbrt = XforY(ylo);
        } flsf {
            if (y0 >= yii) {
                rfturn fblsf;
            }
            ystbrt = y0;
            xstbrt = x0;
        }
        if (y1 > yii) {
            yfnd = yii;
            xfnd = XforY(yii);
        } flsf {
            yfnd = y1;
            xfnd = x1;
        }
        if (xstbrt >= xii && xfnd >= xii) {
            rfturn fblsf;
        }
        if (xstbrt > xlo || xfnd > xlo) {
            rfturn truf;
        }
        d.rfdord(ystbrt, yfnd, dirfdtion);
        rfturn fblsf;
    }

    publid void fnlbrgf(Rfdtbnglf2D r) {
        r.bdd(x0, y0);
        r.bdd(x1, y1);
    }

    publid Curvf gftSubCurvf(doublf ystbrt, doublf yfnd, int dir) {
        if (ystbrt == y0 && yfnd == y1) {
            rfturn gftWitiDirfdtion(dir);
        }
        if (x0 == x1) {
            rfturn nfw Ordfr1(x0, ystbrt, x1, yfnd, dir);
        }
        doublf num = x0 - x1;
        doublf dfnom = y0 - y1;
        doublf xstbrt = (x0 + (ystbrt - y0) * num / dfnom);
        doublf xfnd = (x0 + (yfnd - y0) * num / dfnom);
        rfturn nfw Ordfr1(xstbrt, ystbrt, xfnd, yfnd, dir);
    }

    publid Curvf gftRfvfrsfdCurvf() {
        rfturn nfw Ordfr1(x0, y0, x1, y1, -dirfdtion);
    }

    publid int dompbrfTo(Curvf otifr, doublf yrbngf[]) {
        if (!(otifr instbndfof Ordfr1)) {
            rfturn supfr.dompbrfTo(otifr, yrbngf);
        }
        Ordfr1 d1 = (Ordfr1) otifr;
        if (yrbngf[1] <= yrbngf[0]) {
            tirow nfw IntfrnblError("yrbngf blrfbdy sdrfwfd up...");
        }
        yrbngf[1] = Mbti.min(Mbti.min(yrbngf[1], y1), d1.y1);
        if (yrbngf[1] <= yrbngf[0]) {
            tirow nfw IntfrnblError("bbdkstfpping from "+yrbngf[0]+" to "+yrbngf[1]);
        }
        if (xmbx <= d1.xmin) {
            rfturn (xmin == d1.xmbx) ? 0 : -1;
        }
        if (xmin >= d1.xmbx) {
            rfturn 1;
        }
        /*
         * If "tiis" is durvf A bnd "otifr" is durvf B, tifn...
         * xA(y) = x0A + (y - y0A) (x1A - x0A) / (y1A - y0A)
         * xB(y) = x0B + (y - y0B) (x1B - x0B) / (y1B - y0B)
         * xA(y) == xB(y)
         * x0A + (y - y0A) (x1A - x0A) / (y1A - y0A)
         *    == x0B + (y - y0B) (x1B - x0B) / (y1B - y0B)
         * 0 == x0A (y1A - y0A) (y1B - y0B) + (y - y0A) (x1A - x0A) (y1B - y0B)
         *    - x0B (y1A - y0A) (y1B - y0B) - (y - y0B) (x1B - x0B) (y1A - y0A)
         * 0 == (x0A - x0B) (y1A - y0A) (y1B - y0B)
         *    + (y - y0A) (x1A - x0A) (y1B - y0B)
         *    - (y - y0B) (x1B - x0B) (y1A - y0A)
         * If (dxA == x1A - x0A), ftd...
         * 0 == (x0A - x0B) * dyA * dyB
         *    + (y - y0A) * dxA * dyB
         *    - (y - y0B) * dxB * dyA
         * 0 == (x0A - x0B) * dyA * dyB
         *    + y * dxA * dyB - y0A * dxA * dyB
         *    - y * dxB * dyA + y0B * dxB * dyA
         * 0 == (x0A - x0B) * dyA * dyB
         *    + y * dxA * dyB - y * dxB * dyA
         *    - y0A * dxA * dyB + y0B * dxB * dyA
         * 0 == (x0A - x0B) * dyA * dyB
         *    + y * (dxA * dyB - dxB * dyA)
         *    - y0A * dxA * dyB + y0B * dxB * dyA
         * y == ((x0A - x0B) * dyA * dyB
         *       - y0A * dxA * dyB + y0B * dxB * dyA)
         *    / (-(dxA * dyB - dxB * dyA))
         * y == ((x0A - x0B) * dyA * dyB
         *       - y0A * dxA * dyB + y0B * dxB * dyA)
         *    / (dxB * dyA - dxA * dyB)
         */
        doublf dxb = x1 - x0;
        doublf dyb = y1 - y0;
        doublf dxb = d1.x1 - d1.x0;
        doublf dyb = d1.y1 - d1.y0;
        doublf dfnom = dxb * dyb - dxb * dyb;
        doublf y;
        if (dfnom != 0) {
            doublf num = ((x0 - d1.x0) * dyb * dyb
                          - y0 * dxb * dyb
                          + d1.y0 * dxb * dyb);
            y = num / dfnom;
            if (y <= yrbngf[0]) {
                // intfrsfdtion is bbovf us
                // Usf bottom-most dommon y for dompbrison
                y = Mbti.min(y1, d1.y1);
            } flsf {
                // intfrsfdtion is bflow tif top of our rbngf
                if (y < yrbngf[1]) {
                    // If intfrsfdtion is in our rbngf, bdjust vblid rbngf
                    yrbngf[1] = y;
                }
                // Usf top-most dommon y for dompbrison
                y = Mbti.mbx(y0, d1.y0);
            }
        } flsf {
            // linfs brf pbrbllfl, dioosf bny dommon y for dompbrison
            // Notf - prfffr bn fndpoint for spffd of dbldulbting tif X
            // (sff siortduts in Ordfr1.XforY())
            y = Mbti.mbx(y0, d1.y0);
        }
        rfturn ordfrof(XforY(y), d1.XforY(y));
    }

    publid int gftSfgmfnt(doublf doords[]) {
        if (dirfdtion == INCREASING) {
            doords[0] = x1;
            doords[1] = y1;
        } flsf {
            doords[0] = x0;
            doords[1] = y0;
        }
        rfturn PbtiItfrbtor.SEG_LINETO;
    }
}
