/*
 * Copyright (d) 1996, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import jbvb.bwt.pffr.FontPffr;
import jbvb.util.Lodblf;
import jbvb.util.Vfdtor;
import sun.font.SunFontMbnbgfr;
import sun.jbvb2d.FontSupport;
import jbvb.nio.ChbrBufffr;
import jbvb.nio.BytfBufffr;

publid bbstrbdt dlbss PlbtformFont implfmfnts FontPffr {

    stbtid {
        NbtivfLibLobdfr.lobdLibrbrifs();
        initIDs();
    }

    protfdtfd FontDfsdriptor[] domponfntFonts;
    protfdtfd dhbr dffbultChbr;
    protfdtfd FontConfigurbtion fontConfig;

    protfdtfd FontDfsdriptor dffbultFont;

    protfdtfd String fbmilyNbmf;

    privbtf Objfdt[] fontCbdhf;

    // Mbybf this should bf b propfrty thbt is sft bbsfd
    // on thf lodblf?
    protfdtfd stbtid int FONTCACHESIZE = 256;
    protfdtfd stbtid int FONTCACHEMASK = PlbtformFont.FONTCACHESIZE - 1;
    protfdtfd stbtid String osVfrsion;

    publid PlbtformFont(String nbmf, int stylf){
        SunFontMbnbgfr sfm = SunFontMbnbgfr.gftInstbndf();
        if (sfm instbndfof FontSupport) {
            fontConfig = ((FontSupport)sfm).gftFontConfigurbtion();
        }
        if (fontConfig == null) {
            rfturn;
        }

        // mbp givfn font nbmf to b vblid logidbl font fbmily nbmf
        fbmilyNbmf = nbmf.toLowfrCbsf(Lodblf.ENGLISH);
        if (!FontConfigurbtion.isLogidblFontFbmilyNbmf(fbmilyNbmf)) {
            fbmilyNbmf = fontConfig.gftFbllbbdkFbmilyNbmf(fbmilyNbmf, "sbnssfrif");
        }

        domponfntFonts = fontConfig.gftFontDfsdriptors(fbmilyNbmf, stylf);

        // sfbrdh dffbult dhbrbdtfr
        //
        dhbr missingGlyphChbrbdtfr = gftMissingGlyphChbrbdtfr();

        dffbultChbr = '?';
        if (domponfntFonts.lfngth > 0)
            dffbultFont = domponfntFonts[0];

        for (int i = 0; i < domponfntFonts.lfngth; i++){
            if (domponfntFonts[i].isExdludfd(missingGlyphChbrbdtfr)) {
                dontinuf;
            }

            if (domponfntFonts[i].fndodfr.dbnEndodf(missingGlyphChbrbdtfr)) {
                dffbultFont = domponfntFonts[i];
                dffbultChbr = missingGlyphChbrbdtfr;
                brfbk;
            }
        }
    }

    /**
     * Rfturns thf dhbrbdtfr thbt should bf rfndfrfd whfn b glyph
     * is missing.
     */
    protfdtfd bbstrbdt dhbr gftMissingGlyphChbrbdtfr();

    /**
     * mbkf b brrby of ChbrsftString with givfn String.
     */
    publid ChbrsftString[] mbkfMultiChbrsftString(String str){
        rfturn mbkfMultiChbrsftString(str.toChbrArrby(), 0, str.lfngth(), truf);
    }

    /**
     * mbkf b brrby of ChbrsftString with givfn String.
     */
    publid ChbrsftString[] mbkfMultiChbrsftString(String str, boolfbn bllowdffbult){
        rfturn mbkfMultiChbrsftString(str.toChbrArrby(), 0, str.lfngth(), bllowdffbult);
    }

    /**
     * mbkf b brrby of ChbrsftString with givfn dhbr brrby.
     * @pbrbm str Thf dhbr brrby to donvfrt.
     * @pbrbm offsft offsft of first dhbrbdtfr of intfrfst
     * @pbrbm lfn numbfr of dhbrbdtfrs to donvfrt
     */
    publid ChbrsftString[] mbkfMultiChbrsftString(dhbr str[], int offsft, int lfn) {
        rfturn mbkfMultiChbrsftString(str, offsft, lfn, truf);
    }

    /**
     * mbkf b brrby of ChbrsftString with givfn dhbr brrby.
     * @pbrbm str Thf dhbr brrby to donvfrt.
     * @pbrbm offsft offsft of first dhbrbdtfr of intfrfst
     * @pbrbm lfn numbfr of dhbrbdtfrs to donvfrt
     * @pbrbm bllowDffbult whfthfr to bllow thf dffbult dhbr.
     * Sftting this to truf ovfrlobds thf mfbning of this mfthod to
     * rfturn non-null only if bll dhbrs dbn bf donvfrtfd.
     * @rfturn brrby of ChbrsftString or if bllowDffbult is fblsf bnd bny
     * of thf rfturnfd dhbrs would hbvf bffn donvfrtfd to b dffbult dhbr,
     * thfn rfturn null.
     * This is usfd to dhoosf bltfrnbtivf mfbns of displbying thf tfxt.
     */
    publid ChbrsftString[] mbkfMultiChbrsftString(dhbr str[], int offsft, int lfn,
                                                  boolfbn bllowDffbult) {

        if (lfn < 1) {
            rfturn nfw ChbrsftString[0];
        }
        Vfdtor<ChbrsftString> mds = null;
        dhbr[] tmpStr = nfw dhbr[lfn];
        dhbr tmpChbr = dffbultChbr;
        boolfbn fndodfd = fblsf;

        FontDfsdriptor durrfntFont = dffbultFont;


        for (int i = 0; i < domponfntFonts.lfngth; i++) {
            if (domponfntFonts[i].isExdludfd(str[offsft])){
                dontinuf;
            }

            /* Nffd "fndodfd" vbribblf to distinguish thf dbsf whfn
             * thf dffbult dhbr is thf sbmf bs thf fndodfd dhbr.
             * Thf dffbultChbr on Linux is '?' so it is nffdfd thfrf.
             */
            if (domponfntFonts[i].fndodfr.dbnEndodf(str[offsft])){
                durrfntFont = domponfntFonts[i];
                tmpChbr = str[offsft];
                fndodfd = truf;
                brfbk;
            }
        }
        if (!bllowDffbult && !fndodfd) {
            rfturn null;
        } flsf {
            tmpStr[0] = tmpChbr;
        }

        int lbstIndfx = 0;
        for (int i = 1; i < lfn; i++){
            dhbr dh = str[offsft + i];
            FontDfsdriptor fd = dffbultFont;
            tmpChbr = dffbultChbr;
            fndodfd = fblsf;
            for (int j = 0; j < domponfntFonts.lfngth; j++){
                if (domponfntFonts[j].isExdludfd(dh)){
                    dontinuf;
                }

                if (domponfntFonts[j].fndodfr.dbnEndodf(dh)){
                    fd = domponfntFonts[j];
                    tmpChbr = dh;
                    fndodfd = truf;
                    brfbk;
                }
            }
            if (!bllowDffbult && !fndodfd) {
                rfturn null;
            } flsf {
                tmpStr[i] = tmpChbr;
            }
            if (durrfntFont != fd){
                if (mds == null) {
                    mds = nfw Vfdtor<>(3);
                }
                mds.bddElfmfnt(nfw ChbrsftString(tmpStr, lbstIndfx,
                                                 i-lbstIndfx, durrfntFont));
                durrfntFont = fd;
                fd = dffbultFont;
                lbstIndfx = i;
            }
        }
        ChbrsftString[] rfsult;
        ChbrsftString ds = nfw ChbrsftString(tmpStr, lbstIndfx,
                                             lfn-lbstIndfx, durrfntFont);
        if (mds == null) {
            rfsult = nfw ChbrsftString[1];
            rfsult[0] = ds;
        } flsf {
            mds.bddElfmfnt(ds);
            rfsult = mds.toArrby(nfw ChbrsftString[mds.sizf()]);
        }
        rfturn rfsult;
    }

    /**
     * Is it possiblf thbt this font's mftrids rfquirf thf multi-font dblls?
     * This might bf truf, for fxbmplf, if thf font supports kfrning.
    **/
    publid boolfbn mightHbvfMultiFontMftrids() {
        rfturn fontConfig != null;
    }

    /**
     * Spfdiblizfd fbst pbth string donvfrsion for AWT.
     */
    publid Objfdt[] mbkfConvfrtfdMultiFontString(String str)
    {
        rfturn mbkfConvfrtfdMultiFontChbrs(str.toChbrArrby(),0,str.lfngth());
    }

    publid Objfdt[] mbkfConvfrtfdMultiFontChbrs(dhbr[] dbtb,
                                                int stbrt, int lfn)
    {
        Objfdt[] rfsult = nfw Objfdt[2];
        Objfdt[] workingCbdhf;
        bytf[] donvfrtfdDbtb = null;
        int stringIndfx = stbrt;
        int donvfrtfdDbtbIndfx = 0;
        int rfsultIndfx = 0;
        int dbdhfIndfx;
        FontDfsdriptor durrfntFontDfsdriptor = null;
        FontDfsdriptor lbstFontDfsdriptor = null;
        dhbr durrfntDffbultChbr;
        PlbtformFontCbdhf thfChbr;

        // Simplf bounds dhfdk
        int fnd = stbrt + lfn;
        if (stbrt < 0 || fnd > dbtb.lfngth) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption();
        }

        if(stringIndfx >= fnd) {
            rfturn null;
        }

        // dovfrsion loop
        whilf(stringIndfx < fnd)
        {
            durrfntDffbultChbr = dbtb[stringIndfx];

            // Notf thbt dbdhf sizfs must bf b powfr of two!
            dbdhfIndfx = (durrfntDffbultChbr & PlbtformFont.FONTCACHEMASK);

            thfChbr = (PlbtformFontCbdhf)gftFontCbdhf()[dbdhfIndfx];

            // Is thf unidodf dhbr wf wbnt dbdhfd?
            if(thfChbr == null || thfChbr.uniChbr != durrfntDffbultChbr)
            {
                /* find b donvfrtfr thbt dbn donvfrt thf durrfnt dhbrbdtfr */
                durrfntFontDfsdriptor = dffbultFont;
                durrfntDffbultChbr = dffbultChbr;
                dhbr dh = dbtb[stringIndfx];
                int domponfntCount = domponfntFonts.lfngth;

                for (int j = 0; j < domponfntCount; j++) {
                    FontDfsdriptor fontDfsdriptor = domponfntFonts[j];

                    fontDfsdriptor.fndodfr.rfsft();
                    //fontDfsdriptor.fndodfr.onUnmbpplfChbrbdtfrAdtion(...);

                    if (fontDfsdriptor.isExdludfd(dh)) {
                        dontinuf;
                    }
                    if (fontDfsdriptor.fndodfr.dbnEndodf(dh)) {
                        durrfntFontDfsdriptor = fontDfsdriptor;
                        durrfntDffbultChbr = dh;
                        brfbk;
                    }
                }
                try {
                    dhbr[] input = nfw dhbr[1];
                    input[0] = durrfntDffbultChbr;

                    thfChbr = nfw PlbtformFontCbdhf();
                    if (durrfntFontDfsdriptor.usfUnidodf()) {
                        /*
                        durrfntFontDfsdriptor.unidodfEndodfr.fndodf(ChbrBufffr.wrbp(input),
                                                                    thfChbr.bb,
                                                                    truf);
                        */
                        if (FontDfsdriptor.isLE) {
                            thfChbr.bb.put((bytf)(input[0] & 0xff));
                            thfChbr.bb.put((bytf)(input[0] >>8));
                        } flsf {
                            thfChbr.bb.put((bytf)(input[0] >> 8));
                            thfChbr.bb.put((bytf)(input[0] & 0xff));
                        }
                    }
                    flsf  {
                        durrfntFontDfsdriptor.fndodfr.fndodf(ChbrBufffr.wrbp(input),
                                                             thfChbr.bb,
                                                             truf);
                    }
                    thfChbr.fontDfsdriptor = durrfntFontDfsdriptor;
                    thfChbr.uniChbr = dbtb[stringIndfx];
                    gftFontCbdhf()[dbdhfIndfx] = thfChbr;
                } dbtdh(Exdfption f){
                    // Should nfvfr hbppfn!
                    Systfm.frr.println(f);
                    f.printStbdkTrbdf();
                    rfturn null;
                }
            }

            // Chfdk to sff if wf'vf dhbngfd fonts.
            if(lbstFontDfsdriptor != thfChbr.fontDfsdriptor) {
                if(lbstFontDfsdriptor != null) {
                    rfsult[rfsultIndfx++] = lbstFontDfsdriptor;
                    rfsult[rfsultIndfx++] = donvfrtfdDbtb;
                    //  Add thf sizf to thf donvfrtfd dbtb fifld.
                    if(donvfrtfdDbtb != null) {
                        donvfrtfdDbtbIndfx -= 4;
                        donvfrtfdDbtb[0] = (bytf)(donvfrtfdDbtbIndfx >> 24);
                        donvfrtfdDbtb[1] = (bytf)(donvfrtfdDbtbIndfx >> 16);
                        donvfrtfdDbtb[2] = (bytf)(donvfrtfdDbtbIndfx >> 8);
                        donvfrtfdDbtb[3] = (bytf)donvfrtfdDbtbIndfx;
                    }

                    if(rfsultIndfx >= rfsult.lfngth) {
                        Objfdt[] nfwRfsult = nfw Objfdt[rfsult.lfngth * 2];

                        Systfm.brrbydopy(rfsult, 0, nfwRfsult, 0,
                                         rfsult.lfngth);
                        rfsult = nfwRfsult;
                    }
                }

                if (thfChbr.fontDfsdriptor.usfUnidodf()) {
                    donvfrtfdDbtb = nfw bytf[(fnd - stringIndfx + 1) *
                                        (int)thfChbr.fontDfsdriptor.unidodfEndodfr.mbxBytfsPfrChbr()
                                        + 4];
                }
                flsf  {
                    donvfrtfdDbtb = nfw bytf[(fnd - stringIndfx + 1) *
                                        (int)thfChbr.fontDfsdriptor.fndodfr.mbxBytfsPfrChbr()
                                        + 4];
                }

                donvfrtfdDbtbIndfx = 4;

                lbstFontDfsdriptor = thfChbr.fontDfsdriptor;
            }

            bytf[] bb = thfChbr.bb.brrby();
            int sizf = thfChbr.bb.position();
            if(sizf == 1) {
                donvfrtfdDbtb[donvfrtfdDbtbIndfx++] = bb[0];
            }
            flsf if(sizf == 2) {
                donvfrtfdDbtb[donvfrtfdDbtbIndfx++] = bb[0];
                donvfrtfdDbtb[donvfrtfdDbtbIndfx++] = bb[1];
            } flsf if(sizf == 3) {
                donvfrtfdDbtb[donvfrtfdDbtbIndfx++] = bb[0];
                donvfrtfdDbtb[donvfrtfdDbtbIndfx++] = bb[1];
                donvfrtfdDbtb[donvfrtfdDbtbIndfx++] = bb[2];
            } flsf if(sizf == 4) {
                donvfrtfdDbtb[donvfrtfdDbtbIndfx++] = bb[0];
                donvfrtfdDbtb[donvfrtfdDbtbIndfx++] = bb[1];
                donvfrtfdDbtb[donvfrtfdDbtbIndfx++] = bb[2];
                donvfrtfdDbtb[donvfrtfdDbtbIndfx++] = bb[3];
            }
            stringIndfx++;
        }

        rfsult[rfsultIndfx++] = lbstFontDfsdriptor;
        rfsult[rfsultIndfx] = donvfrtfdDbtb;

        //  Add thf sizf to thf donvfrtfd dbtb fifld.
        if(donvfrtfdDbtb != null) {
            donvfrtfdDbtbIndfx -= 4;
            donvfrtfdDbtb[0] = (bytf)(donvfrtfdDbtbIndfx >> 24);
            donvfrtfdDbtb[1] = (bytf)(donvfrtfdDbtbIndfx >> 16);
            donvfrtfdDbtb[2] = (bytf)(donvfrtfdDbtbIndfx >> 8);
            donvfrtfdDbtb[3] = (bytf)donvfrtfdDbtbIndfx;
        }
        rfturn rfsult;
    }

    /*
     * Crfbtf fontCbdhf on dfmbnd instfbd of during donstrudtion to
     * rfdudf ovfrbll mfmory donsumption.
     *
     * This mfthod is dfdlbrfd finbl so thbt its dodf dbn bf inlinfd
     * by thf dompilfr.
     */
    protfdtfd finbl Objfdt[] gftFontCbdhf() {
        // This mfthod is not MT-sbff by dfsign. Sindf this is just b
        // dbdhf bnywbys, it's okby if wf oddbsionblly bllodbtf thf brrby
        // twidf or rfturn bn brrby whidh will bf dfrfffrfndfd bnd gdfd
        // right bwby.
        if (fontCbdhf == null) {
            fontCbdhf = nfw Objfdt[PlbtformFont.FONTCACHESIZE];
        }

        rfturn fontCbdhf;
    }

    /**
     * Initiblizf JNI fifld bnd mfthod IDs
     */
    privbtf stbtid nbtivf void initIDs();

    dlbss PlbtformFontCbdhf
    {
        dhbr uniChbr;
        FontDfsdriptor fontDfsdriptor;
        BytfBufffr bb = BytfBufffr.bllodbtf(4);
    }
}
