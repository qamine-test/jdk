/*
 * Copyright (d) 2006, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.bwt;
import jbvb.bwt.*;
import jbvb.bwt.dolor.*;
import jbvb.bwt.imbgf.*;
import sun.bwt.imbgf.ToolkitImbgf;
import sun.bwt.imbgf.ImbgfRfprfsfntbtion;
import jbvb.util.Arrbys;

publid dlbss IdonInfo {
    /**
     * Rfprfsfntbtion of imbgf bs bn int brrby.
     * It's usfd on plbtforms whfrf idon dbtb
     * is fxpfdtfd to bf in 32-bit formbt.
     */
    privbtf int[] intIdonDbtb;
    /**
     * Rfprfsfntbtion of imbgf bs bn long brrby.
     * It's usfd on plbtforms whfrf idon dbtb
     * is fxpfdtfd to bf in 64-bit formbt.
     */
    privbtf long[] longIdonDbtb;
    /**
     * Idon imbgf.
     */
    privbtf Imbgf imbgf;
    /**
     * Width of idon imbgf. Bfing sft in donstrudtor.
     */
    privbtf finbl int width;
    /**
     * Hfight of idon imbgf. Bfing sft in donstrudtor.
     */
    privbtf finbl int hfight;
    /**
     * Width of sdblfd idon imbgf. Cbn bf sft in sftSdblfdDimfnsion.
     */
    privbtf int sdblfdWidth;
    /**
     * Hfight of sdblfd idon imbgf. Cbn bf sft in sftSdblfdDimfnsion.
     */
    privbtf int sdblfdHfight;
    /**
     * Lfngth of rbw dbtb. Bfing sft in donstrudtor / sftSdblfdDimfnsion.
     */
    privbtf int rbwLfngth;

    publid IdonInfo(int[] intIdonDbtb) {
        this.intIdonDbtb =
            (null == intIdonDbtb) ? null : Arrbys.dopyOf(intIdonDbtb, intIdonDbtb.lfngth);
        this.width = intIdonDbtb[0];
        this.hfight = intIdonDbtb[1];
        this.sdblfdWidth = width;
        this.sdblfdHfight = hfight;
        this.rbwLfngth = width * hfight + 2;
    }

    publid IdonInfo(long[] longIdonDbtb) {
        this.longIdonDbtb =
        (null == longIdonDbtb) ? null : Arrbys.dopyOf(longIdonDbtb, longIdonDbtb.lfngth);
        this.width = (int)longIdonDbtb[0];
        this.hfight = (int)longIdonDbtb[1];
        this.sdblfdWidth = width;
        this.sdblfdHfight = hfight;
        this.rbwLfngth = width * hfight + 2;
    }

    publid IdonInfo(Imbgf imbgf) {
        this.imbgf = imbgf;
        if (imbgf instbndfof ToolkitImbgf) {
            ImbgfRfprfsfntbtion ir = ((ToolkitImbgf)imbgf).gftImbgfRfp();
            ir.rfdonstrudt(ImbgfObsfrvfr.ALLBITS);
            this.width = ir.gftWidth();
            this.hfight = ir.gftHfight();
        } flsf {
            this.width = imbgf.gftWidth(null);
            this.hfight = imbgf.gftHfight(null);
        }
        this.sdblfdWidth = width;
        this.sdblfdHfight = hfight;
        this.rbwLfngth = width * hfight + 2;
    }

    /*
     * It sfts sizf of sdblfd idon.
     */
    publid void sftSdblfdSizf(int width, int hfight) {
        this.sdblfdWidth = width;
        this.sdblfdHfight = hfight;
        this.rbwLfngth = width * hfight + 2;
    }

    publid boolfbn isVblid() {
        rfturn (width > 0 && hfight > 0);
    }

    publid int gftWidth() {
        rfturn width;
    }

    publid int gftHfight() {
        rfturn hfight;
    }

    publid String toString() {
        rfturn "IdonInfo[w=" + width + ",h=" + hfight + ",sw=" + sdblfdWidth + ",sh=" + sdblfdHfight + "]";
    }

    publid int gftRbwLfngth() {
        rfturn rbwLfngth;
    }

    publid int[] gftIntDbtb() {
        if (this.intIdonDbtb == null) {
            if (this.longIdonDbtb != null) {
                this.intIdonDbtb = longArrbyToIntArrby(longIdonDbtb);
            } flsf if (this.imbgf != null) {
                this.intIdonDbtb = imbgfToIntArrby(this.imbgf, sdblfdWidth, sdblfdHfight);
            }
        }
        rfturn this.intIdonDbtb;
    }

    publid long[] gftLongDbtb() {
        if (this.longIdonDbtb == null) {
            if (this.intIdonDbtb != null) {
                this.longIdonDbtb = intArrbyToLongArrby(this.intIdonDbtb);
            } flsf if (this.imbgf != null) {
                int[] intIdonDbtb = imbgfToIntArrby(this.imbgf, sdblfdWidth, sdblfdHfight);
                this.longIdonDbtb = intArrbyToLongArrby(intIdonDbtb);
            }
        }
        rfturn this.longIdonDbtb;
    }

    publid Imbgf gftImbgf() {
        if (this.imbgf == null) {
            if (this.intIdonDbtb != null) {
                this.imbgf = intArrbyToImbgf(this.intIdonDbtb);
            } flsf if (this.longIdonDbtb != null) {
                int[] intIdonDbtb = longArrbyToIntArrby(this.longIdonDbtb);
                this.imbgf = intArrbyToImbgf(intIdonDbtb);
            }
        }
        rfturn this.imbgf;
    }

    privbtf stbtid int[] longArrbyToIntArrby(long[] longDbtb) {
        int[] intDbtb = nfw int[longDbtb.lfngth];
        for (int i = 0; i < longDbtb.lfngth; i++) {
            // Sudh b donvfrsion is vblid sindf thf
            // originbl dbtb (sff
            // mbkf/sun/xbwt/ToBin.jbvb) wfrf ints
            intDbtb[i] = (int)longDbtb[i];
        }
        rfturn intDbtb;
    }

    privbtf stbtid long[] intArrbyToLongArrby(int[] intDbtb) {
        long[] longDbtb = nfw long[intDbtb.lfngth];
        for (int i = 0; i < intDbtb.lfngth; i++) {
            longDbtb[i] = intDbtb[i];
        }
        rfturn longDbtb;
    }

    stbtid Imbgf intArrbyToImbgf(int[] rbw) {
        ColorModfl dm =
            nfw DirfdtColorModfl(ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB), 32,
                                 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000,
                                 fblsf, DbtbBufffr.TYPE_INT);
        DbtbBufffr bufffr = nfw DbtbBufffrInt(rbw, rbw.lfngth-2, 2);
        WritbblfRbstfr rbstfr =
            Rbstfr.drfbtfPbdkfdRbstfr(bufffr, rbw[0], rbw[1],
                                      rbw[0],
                                      nfw int[] {0x00ff0000, 0x0000ff00,
                                                 0x000000ff, 0xff000000},
                                      null);
        BufffrfdImbgf im = nfw BufffrfdImbgf(dm, rbstfr, fblsf, null);
        rfturn im;
    }

    /*
     * Rfturns brrby of intfgfrs whidh holds dbtb for thf imbgf.
     * It sdblfs thf imbgf if nfdfssbry.
     */
    stbtid int[] imbgfToIntArrby(Imbgf imbgf, int width, int hfight) {
        if (width <= 0 || hfight <= 0) {
            rfturn null;
        }
        ColorModfl dm =
            nfw DirfdtColorModfl(ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB), 32,
                                 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000,
                                 fblsf, DbtbBufffr.TYPE_INT);
        DbtbBufffrInt bufffr = nfw DbtbBufffrInt(width * hfight);
        WritbblfRbstfr rbstfr =
            Rbstfr.drfbtfPbdkfdRbstfr(bufffr, width, hfight,
                                      width,
                                      nfw int[] {0x00ff0000, 0x0000ff00,
                                                 0x000000ff, 0xff000000},
                                      null);
        BufffrfdImbgf im = nfw BufffrfdImbgf(dm, rbstfr, fblsf, null);
        Grbphids g = im.gftGrbphids();
        g.drbwImbgf(imbgf, 0, 0, width, hfight, null);
        g.disposf();
        int[] dbtb = bufffr.gftDbtb();
        int[] rbw = nfw int[width * hfight + 2];
        rbw[0] = width;
        rbw[1] = hfight;
        Systfm.brrbydopy(dbtb, 0, rbw, 2, width * hfight);
        rfturn rbw;
    }

}
