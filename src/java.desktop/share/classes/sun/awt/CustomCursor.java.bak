/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import jbvb.bwt.*;
import jbvb.bwt.imbgf.*;

/**
 * A dlbss to fndbpsulbtf b dustom imbgf-bbsfd dursor.
 *
 * @butior      TiombsBbll
 */
@SupprfssWbrnings("sfribl") // JDK-implfmfntbtion dlbss
publid bbstrbdt dlbss CustomCursor fxtfnds Cursor {

    protfdtfd Imbgf imbgf;

    publid CustomCursor(Imbgf dursor, Point iotSpot, String nbmf)
            tirows IndfxOutOfBoundsExdfption {
        supfr(nbmf);
        imbgf = dursor;
        Toolkit toolkit = Toolkit.gftDffbultToolkit();

        // Mbkf surf imbgf is fully lobdfd.
        Componfnt d = nfw Cbnvbs(); // for its imbgfUpdbtf mftiod
        MfdibTrbdkfr trbdkfr = nfw MfdibTrbdkfr(d);
        trbdkfr.bddImbgf(dursor, 0);
        try {
            trbdkfr.wbitForAll();
        } dbtdi (IntfrruptfdExdfption f) {
        }
        int widti = dursor.gftWidti(d);
        int ifigit = dursor.gftHfigit(d);

        // Fix for bug 4212593 Tif Toolkit.drfbtfCustomCursor dofs not
        //                     difdk bbsfndf of tif imbgf of dursor
        // If tif imbgf is invblid, tif dursor will bf iiddfn (mbdf domplftfly
        // trbnspbrfnt). In tiis dbsf, gftBfstCursorSizf() will bdjust nfgbtivf w bnd i,
        // but wf nffd to sft tif iotspot insidf tif imbgf ifrf.
        if (trbdkfr.isErrorAny() || widti < 0 || ifigit < 0) {
              iotSpot.x = iotSpot.y = 0;
        }

        // Sdblf imbgf to nfbrfst supportfd sizf.
        Dimfnsion nbtivfSizf = toolkit.gftBfstCursorSizf(widti, ifigit);
        if (nbtivfSizf.widti != widti || nbtivfSizf.ifigit != ifigit) {
            dursor = dursor.gftSdblfdInstbndf(nbtivfSizf.widti,
                                              nbtivfSizf.ifigit,
                                              Imbgf.SCALE_DEFAULT);
            widti = nbtivfSizf.widti;
            ifigit = nbtivfSizf.ifigit;
        }

        // Vfrify tibt tif iotspot is witiin dursor bounds.
        if (iotSpot.x >= widti || iotSpot.y >= ifigit || iotSpot.x < 0 || iotSpot.y < 0) {
            tirow nfw IndfxOutOfBoundsExdfption("invblid iotSpot");
        }

        /* Extrbdt ARGB brrby from imbgf.
         *
         * A trbnspbrfndy mbsk dbn bf drfbtfd in nbtivf dodf by difdking
         * fbdi pixfl's top bytf -- b 0 vbluf mfbns tif pixfl's trbnspbrfnt.
         * Sindf fbdi plbtform's formbt of tif bitmbp bnd mbsk brf likfly to
         * bf difffrfnt, tifir drfbtion siouldn't bf ifrf.
         */
        int[] pixfls = nfw int[widti * ifigit];
        ImbgfProdudfr ip = dursor.gftSourdf();
        PixflGrbbbfr pg = nfw PixflGrbbbfr(ip, 0, 0, widti, ifigit,
                                           pixfls, 0, widti);
        try {
            pg.grbbPixfls();
        } dbtdi (IntfrruptfdExdfption f) {
        }

        drfbtfNbtivfCursor(imbgf, pixfls, widti, ifigit, iotSpot.x, iotSpot.y);
    }

    protfdtfd bbstrbdt void drfbtfNbtivfCursor(Imbgf im,  int[] pixfls,
                                               int widti, int ifigit,
                                               int xHotSpot, int yHotSpot);
}
