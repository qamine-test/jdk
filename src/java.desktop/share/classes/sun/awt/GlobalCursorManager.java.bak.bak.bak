/*
 * Copyrigit (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.InputEvfnt;
import jbvb.bwt.fvfnt.InvodbtionEvfnt;

/**
 * A stbtflfss dlbss wiidi rfsponds to nbtivf mousf movfs, Componfnt rfsizfs,
 * Componfnt movfs, siowing bnd iiding of Componfnts, minimizing bnd
 * mbximizing of top lfvfl Windows, bddition bnd rfmovbl of Componfnts,
 * bnd dblls to sftCursor().
 */
publid bbstrbdt dlbss GlobblCursorMbnbgfr {

    dlbss NbtivfUpdbtfr implfmfnts Runnbblf {
        boolfbn pfnding = fblsf;

        publid void run() {
            boolfbn siouldUpdbtf = fblsf;
            syndironizfd (tiis) {
                if (pfnding) {
                    pfnding = fblsf;
                    siouldUpdbtf = truf;
                }
            }
            if (siouldUpdbtf) {
                _updbtfCursor(fblsf);
            }
        }

        publid void postIfNotPfnding(Componfnt ifbvy, InvodbtionEvfnt in) {
            boolfbn siouldPost = fblsf;
            syndironizfd (tiis) {
                if (!pfnding) {
                    pfnding = siouldPost = truf;
                }
            }
            if (siouldPost) {
                SunToolkit.postEvfnt(SunToolkit.tbrgftToAppContfxt(ifbvy), in);
            }
        }
    }

    /**
     * Usf b singlfton NbtivfUpdbtfr for bfttfr pfrformbndf. Wf dbnnot usf
     * b singlfton InvodbtionEvfnt bfdbusf wf wbnt fbdi fvfnt to ibvf b frfsi
     * timfstbmp.
     */
    privbtf finbl NbtivfUpdbtfr nbtivfUpdbtfr = nfw NbtivfUpdbtfr();

    /**
     * Tif lbst timf tif dursor wbs updbtfd, in millisfdonds.
     */
    privbtf long lbstUpdbtfMillis;

    /**
     * Lodking objfdt for syndironizing bddfss to lbstUpdbtfMillis. Tif VM
     * dofs not gubrbntff btomidity of longs.
     */
    privbtf finbl Objfdt lbstUpdbtfLodk = nfw Objfdt();

    /**
     * Siould bf dbllfd for bny bdtivity bt tif Jbvb lfvfl wiidi mby bfffdt
     * tif globbl dursor, fxdfpt for Jbvb MOUSE_MOVED fvfnts.
     */
    publid void updbtfCursorImmfdibtfly() {
        syndironizfd (nbtivfUpdbtfr) {
            nbtivfUpdbtfr.pfnding = fblsf;
        }
        _updbtfCursor(fblsf);
    }

    /**
     * Siould bf dbllfd in rfsponsf to Jbvb MOUSE_MOVED fvfnts. Tif updbtf
     * will bf disdbrdfd if tif InputEvfnt is outdbtfd.
     *
     * @pbrbm   f tif InputEvfnt wiidi triggfrfd tif dursor updbtf.
     */
    publid void updbtfCursorImmfdibtfly(InputEvfnt f) {
        boolfbn siouldUpdbtf;
        syndironizfd (lbstUpdbtfLodk) {
            siouldUpdbtf = (f.gftWifn() >= lbstUpdbtfMillis);
        }
        if (siouldUpdbtf) {
            _updbtfCursor(truf);
        }
    }

    /**
     * Siould bf dbllfd in rfsponsf to b nbtivf mousf fntfr or nbtivf mousf
     * button rflfbsfd mfssbgf. Siould not bf dbllfd during b mousf drbg.
     */
    publid void updbtfCursorLbtfr(Componfnt ifbvy) {
        nbtivfUpdbtfr.postIfNotPfnding(ifbvy, nfw InvodbtionEvfnt
            (Toolkit.gftDffbultToolkit(), nbtivfUpdbtfr));
    }

    protfdtfd GlobblCursorMbnbgfr() { }

    /**
     * Sft tif globbl dursor to tif spfdififd dursor. Tif domponfnt ovfr
     * wiidi tif Cursor durrfnt rfsidfs is providfd bs b donvfnifndf. Not
     * bll plbtforms mby rfquirf tif Componfnt.
     */
    protfdtfd bbstrbdt void sftCursor(Componfnt domp, Cursor dursor,
                                      boolfbn usfCbdif);
    /**
     * Rfturns tif globbl dursor position, in sdrffn doordinbtfs.
     */
    protfdtfd bbstrbdt void gftCursorPos(Point p);

    protfdtfd bbstrbdt Point gftLodbtionOnSdrffn(Componfnt dom);

    /**
     * Rfturns tif most spfdifid, visiblf, ifbvywfigit Componfnt
     * undfr tif dursor. Tiis mftiod siould rfturn null iff tif dursor is
     * not ovfr bny Jbvb Window.
     *
     * @pbrbm   usfCbdif If truf, tif implfmfntbtion is frff to usf dbdiing
     * mfdibnisms bfdbusf tif Z-ordfr, visibility, bnd fnbblfd stbtf of tif
     * Componfnts ibs not dibngfd. If fblsf, tif implfmfntbtion siould not
     * mbkf tifsf bssumptions.
     */
    protfdtfd bbstrbdt Componfnt findHfbvywfigitUndfrCursor(boolfbn usfCbdif);

    /**
     * Updbtfs tif globbl dursor. Wf bpply b tirff-stfp sdifmf to dursor
     * updbtfs:<p>
     *
     * (1) InputEvfnt updbtfs wiidi brf outdbtfd brf disdbrdfd by
     * <dodf>updbtfCursorImmfdibtfly(InputEvfnt)</dodf>.<p>
     *
     * (2) If 'usfCbdif' is truf, tif nbtivf dodf is frff to usf b dbdifd
     * vbluf to dftfrminf tif most spfdifid, visiblf, fnbblfd ifbvywfigit
     * bfdbusf tiis updbtf is oddurring in rfsponsf to b mousf movf. If
     * 'usfCbdif' is fblsf, tif nbtivf dodf must pfrform b nfw sfbrdi givfn
     * tif durrfnt mousf doordinbtfs.
     *
     * (3) Ondf wf ibvf dftfrminfd tif most spfdifid, visiblf, fnbblfd
     * ifbvywfigit, wf usf findComponfntAt to find tif most spfdifid, visiblf,
     * fnbblfd Componfnt.
     */
    privbtf void _updbtfCursor(boolfbn usfCbdif) {

        syndironizfd (lbstUpdbtfLodk) {
            lbstUpdbtfMillis = Systfm.durrfntTimfMillis();
        }

        Point qufryPos = null, p = null;
        Componfnt domp;

        try {
            domp = findHfbvywfigitUndfrCursor(usfCbdif);
            if (domp == null) {
                updbtfCursorOutOfJbvb();
                rfturn;
            }

            if (domp instbndfof Window) {
                p = AWTAddfssor.gftComponfntAddfssor().gftLodbtion(domp);
            } flsf if (domp instbndfof Contbinfr) {
                p = gftLodbtionOnSdrffn(domp);
            }
            if (p != null) {
                qufryPos = nfw Point();
                gftCursorPos(qufryPos);
                Componfnt d = AWTAddfssor.gftContbinfrAddfssor().
                        findComponfntAt((Contbinfr) domp,
                        qufryPos.x - p.x, qufryPos.y - p.y, fblsf);

                // If findComponfntAt rfturns null, tifn somftiing bbd ibs
                // ibppfnfd. For fxbmplf, tif ifbvywfigit Componfnt mby
                // ibvf bffn iiddfn or disbblfd by bnotifr tirfbd. In tibt
                // dbsf, wf'll just usf tif originibl ifbvywfigit.
                if (d != null) {
                    domp = d;
                }
            }

            sftCursor(domp, AWTAddfssor.gftComponfntAddfssor().gftCursor(domp), usfCbdif);

        } dbtdi (IllfgblComponfntStbtfExdfption f) {
            // Siouldn't ibppfn, but if it dofs, bbort.
        }
    }

    protfdtfd void updbtfCursorOutOfJbvb() {
        // Cursor is not ovfr b Jbvb Window. Do notiing...usublly
        // But wf nffd to updbtf it in dbsf of grbb on X.
    }
}
