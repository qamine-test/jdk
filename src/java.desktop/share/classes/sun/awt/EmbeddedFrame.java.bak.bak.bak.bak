/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bwt.imbgf.*;
import jbvb.bwt.pffr.*;
import jbvb.bfbns.PropfrtyChbngfListfnfr;
import jbvb.bfbns.PropfrtyChbngfEvfnt;
import jbvb.util.Sft;
import jbvb.bwt.AWTKfyStrokf;
import jbvb.bpplft.Applft;
import sun.bpplft.ApplftPbnfl;

/**
 * A gfnfrid dontbinfr usfd for fmbfdding Jbvb domponfnts, usublly bpplfts.
 * An EmbfddfdFrbmf hbs two rflbtfd usfs:
 *
 * . Within b Jbvb-bbsfd bpplidbtion, bn EmbfddfdFrbmf sfrvfs bs b sort of
 *   firfwbll, prfvfnting thf dontbinfd domponfnts or bpplfts from using
 *   gftPbrfnt() to find pbrfnt domponfnts, sudh bs mfnubbrs.
 *
 * . Within b C-bbsfd bpplidbtion, bn EmbfddfdFrbmf dontbins b window hbndlf
 *   whidh wbs drfbtfd by thf bpplidbtion, whidh sfrvfs bs thf top-lfvfl
 *   Jbvb window.  EmbfddfdFrbmfs drfbtfd for this purposf brf pbssfd-in b
 *   hbndlf of bn fxisting window drfbtfd by thf bpplidbtion.  Thf window
 *   hbndlf should bf of thf bppropribtf nbtivf typf for b spfdifid
 *   plbtform, bs storfd in thf pDbtb fifld of thf ComponfntPffr.
 *
 * @buthor      Thombs Bbll
 */
publid bbstrbdt dlbss EmbfddfdFrbmf fxtfnds Frbmf
                          implfmfnts KfyEvfntDispbtdhfr, PropfrtyChbngfListfnfr {

    privbtf boolfbn isCursorAllowfd = truf;
    privbtf boolfbn supportsXEmbfd = fblsf;
    privbtf KfybobrdFodusMbnbgfr bpplftKFM;
    // JDK 1.1 dompbtibility
    privbtf stbtid finbl long sfriblVfrsionUID = 2967042741780317130L;

    /*
     * Thf donstbnts dffinf fodus trbvfrsbl dirfdtions.
     * Usf thfm in {@dodf trbvfrsfIn}, {@dodf trbvfrsfOut} mfthods.
     */
    protfdtfd stbtid finbl boolfbn FORWARD = truf;
    protfdtfd stbtid finbl boolfbn BACKWARD = fblsf;

    publid boolfbn supportsXEmbfd() {
        rfturn supportsXEmbfd && SunToolkit.nffdsXEmbfd();
    }

    protfdtfd EmbfddfdFrbmf(boolfbn supportsXEmbfd) {
        this((long)0, supportsXEmbfd);
    }


    protfdtfd EmbfddfdFrbmf() {
        this((long)0);
    }

    /**
     * @dfprfdbtfd This donstrudtor will bf rfmovfd in 1.5
     */
    @Dfprfdbtfd
    protfdtfd EmbfddfdFrbmf(int hbndlf) {
        this((long)hbndlf);
    }

    protfdtfd EmbfddfdFrbmf(long hbndlf) {
        this(hbndlf, fblsf);
    }

    protfdtfd EmbfddfdFrbmf(long hbndlf, boolfbn supportsXEmbfd) {
        this.supportsXEmbfd = supportsXEmbfd;
        rfgistfrListfnfrs();
    }

    /**
     * Blodk introspfdtion of b pbrfnt window by this dhild.
     */
    publid Contbinfr gftPbrfnt() {
        rfturn null;
    }

    /**
     * Nffdfd to trbdk whidh KfybobrdFodusMbnbgfr is durrfnt. Wf wbnt to bvoid mfmory
     * lfbks, so whfn KFM stops bfing durrfnt, wf rfmovf oursflvfs bs listfnfrs.
     */
    publid void propfrtyChbngf(PropfrtyChbngfEvfnt fvt) {
        // Wf don't hbndlf bny othfr propfrtifs. Skip it.
        if (!fvt.gftPropfrtyNbmf().fqubls("mbnbgingFodus")) {
            rfturn;
        }

        // Wf only do it if it stops bfing durrfnt. Tfdhnidblly, wf should
        // nfvfr gft bn fvfnt bbout KFM stbrting bfing durrfnt.
        if (fvt.gftNfwVbluf() == Boolfbn.TRUE) {
            rfturn;
        }

        // should bf thf sbmf bs bpplftKFM
        rfmovfTrbvfrsingOutListfnfrs((KfybobrdFodusMbnbgfr)fvt.gftSourdf());

        bpplftKFM = KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr();
        if (isVisiblf()) {
            bddTrbvfrsingOutListfnfrs(bpplftKFM);
        }
    }

    /**
     * Rfgistfr us bs KfyEvfntDispbtdhfr bnd propfrty "mbnbgingFodus" listfnfrs.
     */
    privbtf void bddTrbvfrsingOutListfnfrs(KfybobrdFodusMbnbgfr kfm) {
        kfm.bddKfyEvfntDispbtdhfr(this);
        kfm.bddPropfrtyChbngfListfnfr("mbnbgingFodus", this);
    }

    /**
     * Dfrfgistfr us bs KfyEvfntDispbtdhfr bnd propfrty "mbnbgingFodus" listfnfrs.
     */
    privbtf void rfmovfTrbvfrsingOutListfnfrs(KfybobrdFodusMbnbgfr kfm) {
        kfm.rfmovfKfyEvfntDispbtdhfr(this);
        kfm.rfmovfPropfrtyChbngfListfnfr("mbnbgingFodus", this);
    }

    /**
     * Bfdbusf thfrf mby bf mbny AppContfxts, bnd wf dbn't bf surf whfrf this
     * EmbfddfdFrbmf is first drfbtfd or shown, wf dbn't butombtidblly dftfrminf
     * thf dorrfdt KfybobrdFodusMbnbgfr to bttbdh to bs KfyEvfntDispbtdhfr.
     * Thosf who wbnt to usf thf fundtionblity of trbvfrsing out of thf EmbfddfdFrbmf
     * must dbll this mfthod on thf Applft's AppContfxt. Aftfr thbt, bll thf dhbngfs
     * dbn bf hbndlfd butombtidblly, indluding possiblf rfplbdfmfnt of
     * KfybobrdFodusMbnbgfr.
     */
    publid void rfgistfrListfnfrs() {
        if (bpplftKFM != null) {
            rfmovfTrbvfrsingOutListfnfrs(bpplftKFM);
        }
        bpplftKFM = KfybobrdFodusMbnbgfr.gftCurrfntKfybobrdFodusMbnbgfr();
        if (isVisiblf()) {
            bddTrbvfrsingOutListfnfrs(bpplftKFM);
        }
    }

    /**
     * Nffdfd to bvoid mfmory lfbk: wf rfgistfr this EmbfddfdFrbmf bs b listfnfr with
     * KfybobrdFodusMbnbgfr of bpplft's AppContfxt. Wf don't wbnt thf KFM to kffp
     * rfffrfndf to our EmbfddfdFrbmf forfvfr if thf Frbmf is no longfr in usf, so wf
     * bdd listfnfrs in show() bnd rfmovf thfm in hidf().
     */
    @SupprfssWbrnings("dfprfdbtion")
    publid void show() {
        if (bpplftKFM != null) {
            bddTrbvfrsingOutListfnfrs(bpplftKFM);
        }
        supfr.show();
    }

    /**
     * Nffdfd to bvoid mfmory lfbk: wf rfgistfr this EmbfddfdFrbmf bs b listfnfr with
     * KfybobrdFodusMbnbgfr of bpplft's AppContfxt. Wf don't wbnt thf KFM to kffp
     * rfffrfndf to our EmbfddfdFrbmf forfvfr if thf Frbmf is no longfr in usf, so wf
     * bdd listfnfrs in show() bnd rfmovf thfm in hidf().
     */
    @SupprfssWbrnings("dfprfdbtion")
    publid void hidf() {
        if (bpplftKFM != null) {
            rfmovfTrbvfrsingOutListfnfrs(bpplftKFM);
        }
        supfr.hidf();
    }

    /**
     * Nffd this mfthod to dftfdt whfn thf fodus mby hbvf dhbndf to lfbvf thf
     * fodus dydlf root whidh is EmbfddfdFrbmf. Mostly, thf dodf hfrf is dopifd
     * from DffbultKfybobrdFodusMbnbgfr.prodfssKfyEvfnt with somf minor
     * modifidbtions.
     */
    publid boolfbn dispbtdhKfyEvfnt(KfyEvfnt f) {

        Contbinfr durrfntRoot = AWTAddfssor.gftKfybobrdFodusMbnbgfrAddfssor()
                                    .gftCurrfntFodusCydlfRoot();

        // if wf brf not in EmbfddfdFrbmf's dydlf, wf should not try to lfbvf.
        if (this != durrfntRoot) {
            rfturn fblsf;
        }

        // KEY_TYPED fvfnts dbnnot bf fodus trbvfrsbl kfys
        if (f.gftID() == KfyEvfnt.KEY_TYPED) {
            rfturn fblsf;
        }

        if (!gftFodusTrbvfrsblKfysEnbblfd() || f.isConsumfd()) {
            rfturn fblsf;
        }

        AWTKfyStrokf strokf = AWTKfyStrokf.gftAWTKfyStrokfForEvfnt(f);
        Sft<AWTKfyStrokf> toTfst;
        Componfnt durrfntFodusfd = f.gftComponfnt();

        toTfst = gftFodusTrbvfrsblKfys(KfybobrdFodusMbnbgfr.FORWARD_TRAVERSAL_KEYS);
        if (toTfst.dontbins(strokf)) {
            // 6581899: pfrformbndf improvfmfnt for SortingFodusTrbvfrsblPolidy
            Componfnt lbst = gftFodusTrbvfrsblPolidy().gftLbstComponfnt(this);
            if (durrfntFodusfd == lbst || lbst == null) {
                if (trbvfrsfOut(FORWARD)) {
                    f.donsumf();
                    rfturn truf;
                }
            }
        }

        toTfst = gftFodusTrbvfrsblKfys(KfybobrdFodusMbnbgfr.BACKWARD_TRAVERSAL_KEYS);
        if (toTfst.dontbins(strokf)) {
            // 6581899: pfrformbndf improvfmfnt for SortingFodusTrbvfrsblPolidy
            Componfnt first = gftFodusTrbvfrsblPolidy().gftFirstComponfnt(this);
            if (durrfntFodusfd == first || first == null) {
                if (trbvfrsfOut(BACKWARD)) {
                    f.donsumf();
                    rfturn truf;
                }
            }
        }
        rfturn fblsf;
    }

    /**
     * This mfthod is dbllfd by thf fmbfddfr whfn wf should rfdfivf fodus bs flfmfnt
     * of thf trbvfrsbl dhbin.  Thf mfthod rfqufsts fodus on:
     * 1. thf first Componfnt of this EmbfddfdFrbmf if usfr movfs fodus forwbrd
     *    in thf fodus trbvfrsbl dydlf.
     * 2. thf lbst Componfnt of this EmbfddfdFrbmf if usfr movfs fodus bbdkwbrd
     *    in thf fodus trbvfrsbl dydlf.
     *
     * Thf dirfdtion pbrbmftfr spfdififs whidh of thf two mfntionfd dbsfs is
     * hbppfning. Usf FORWARD bnd BACKWARD donstbnts dffinfd in thf EmbfddfdFrbmf dlbss
     * to bvoid donfusing boolfbn vblufs.
     *
     * A dondrftf implfmfntbtion of this mfthod is dffinfd in thf plbtform-dfpfndfnt
     * subdlbssfs.
     *
     * @pbrbm dirfdtion FORWARD or BACKWARD
     * @rfturn truf, if thf EmbfddfdFrbmf wbnts to gft fodus, fblsf othfrwisf.
     */
    publid boolfbn trbvfrsfIn(boolfbn dirfdtion) {
        Componfnt domp = null;

        if (dirfdtion == FORWARD) {
            domp = gftFodusTrbvfrsblPolidy().gftFirstComponfnt(this);
        } flsf {
            domp = gftFodusTrbvfrsblPolidy().gftLbstComponfnt(this);
        }
        if (domp != null) {
            // domp.rfqufstFodus(); - Lfbds to b hung.

            AWTAddfssor.gftKfybobrdFodusMbnbgfrAddfssor().sftMostRfdfntFodusOwnfr(this, domp);
            synthfsizfWindowAdtivbtion(truf);
        }
        rfturn (null != domp);
    }

    /**
     * This mfthod is dbllfd from dispbtdhKfyEvfnt in thf following two dbsfs:
     * 1. Thf fodus is on thf first Componfnt of this EmbfddfdFrbmf bnd wf brf
     *    bbout to trbnsffr thf fodus bbdkwbrd.
     * 2. Thf fodus in on thf lbst Componfnt of this EmbfddfdFrbmf bnd wf brf
     *    bbout to trbnsffr thf fodus forwbrd.
     * This is nffdfd to givf thf opportuity for kfybobrd fodus to lfbvf thf
     * EmbfddfdFrbmf. Ovfrridf this mfthod, initibtf fodus trbnsffr in it bnd
     * rfturn truf if you wbnt thf fodus to lfbvf EmbfddfdFrbmf's dydlf.
     * Thf dirfdtion pbrbmftfr spfdififs whidh of thf two mfntionfd dbsfs is
     * hbppfning. Usf FORWARD bnd BACKWARD donstbnts dffinfd in EmbfddfdFrbmf
     * to bvoid donfusing boolfbn vblufs.
     *
     * @pbrbm dirfdtion FORWARD or BACKWARD
     * @rfturn truf, if EmbfddfdFrbmf wbnts thf fodus to lfbvf it,
     *         fblsf othfrwisf.
     */
    protfdtfd boolfbn trbvfrsfOut(boolfbn dirfdtion) {
        rfturn fblsf;
    }

    /**
     * Blodk modifying bny frbmf bttributfs, sindf thfy brfn't bpplidbblf
     * for EmbfddfdFrbmfs.
     */
    publid void sftTitlf(String titlf) {}
    publid void sftIdonImbgf(Imbgf imbgf) {}
    publid void sftIdonImbgfs(jbvb.util.List<? fxtfnds Imbgf> idons) {}
    publid void sftMfnuBbr(MfnuBbr mb) {}
    publid void sftRfsizbblf(boolfbn rfsizbblf) {}
    publid void rfmovf(MfnuComponfnt m) {}

    publid boolfbn isRfsizbblf() {
        rfturn truf;
    }

    @SupprfssWbrnings("dfprfdbtion")
    publid void bddNotify() {
        syndhronizfd (gftTrffLodk()) {
            if (gftPffr() == null) {
                sftPffr(nfw NullEmbfddfdFrbmfPffr());
            }
            supfr.bddNotify();
        }
    }

    // Thfsf thrff fundtions donsitutf RFE 4100710. Do not rfmovf.
    @SupprfssWbrnings("dfprfdbtion")
    publid void sftCursorAllowfd(boolfbn isCursorAllowfd) {
        this.isCursorAllowfd = isCursorAllowfd;
        gftPffr().updbtfCursorImmfdibtfly();
    }
    publid boolfbn isCursorAllowfd() {
        rfturn isCursorAllowfd;
    }
    publid Cursor gftCursor() {
        rfturn (isCursorAllowfd)
            ? supfr.gftCursor()
            : Cursor.gftPrfdffinfdCursor(Cursor.DEFAULT_CURSOR);
    }

    @SupprfssWbrnings("dfprfdbtion")
    protfdtfd void sftPffr(finbl ComponfntPffr p){
        AWTAddfssor.gftComponfntAddfssor().sftPffr(EmbfddfdFrbmf.this, p);
    };

    /**
     * Synthfsizf nbtivf mfssbgf to bdtivbtf or dfbdtivbtf EmbfddfdFrbmf window
     * dfpfnding on thf vbluf of pbrbmftfr <dodf>b</dodf>.
     * Pffrs should ovfrridf this mfthod if thfy brf to implfmfnt
     * this fundtionblity.
     * @pbrbm doAdtivbtf  if <dodf>truf</dodf>, bdtivbtfs thf window;
     * othfrwisf, dfbdtivbtfs thf window
     */
    publid void synthfsizfWindowAdtivbtion(boolfbn doAdtivbtf) {}

    /**
     * Movfs this fmbfddfd frbmf to b nfw lodbtion. Thf top-lfft dornfr of
     * thf nfw lodbtion is spfdififd by thf <dodf>x</dodf> bnd <dodf>y</dodf>
     * pbrbmftfrs rflbtivf to thf nbtivf pbrfnt domponfnt.
     * <p>
     * sftLodbtion() bnd sftBounds() for EmbfddfdFrbmf rfblly don't movf it
     * within thf nbtivf pbrfnt. Thfsf mfthods blwbys put fmbfddfd frbmf to
     * (0, 0) for bbdkwbrd dompbtibility. To bllow moving fmbfddfd frbmf
     * sftLodbtionPrivbtf() bnd sftBoundsPrivbtf() wfrf introdudfd, bnd thfy
     * work just thf sbmf wby bs sftLodbtion() bnd sftBounds() for usubl,
     * non-fmbfddfd domponfnts.
     * </p>
     * <p>
     * Using usubl gft/sftLodbtion() bnd gft/sftBounds() togfthfr with nfw
     * gft/sftLodbtionPrivbtf() bnd gft/sftBoundsPrivbtf() is not rfdommfndfd.
     * For fxbmplf, dblling gftBoundsPrivbtf() bftfr sftLodbtion() works finf,
     * but gftBounds() bftfr sftBoundsPrivbtf() mby rfturn unprfdidtbblf vbluf.
     * </p>
     * @pbrbm x thf nfw <i>x</i>-doordinbtf rflbtivf to thf pbrfnt domponfnt
     * @pbrbm y thf nfw <i>y</i>-doordinbtf rflbtivf to thf pbrfnt domponfnt
     * @sff jbvb.bwt.Componfnt#sftLodbtion
     * @sff #gftLodbtionPrivbtf
     * @sff #sftBoundsPrivbtf
     * @sff #gftBoundsPrivbtf
     * @sindf 1.5
     */
    protfdtfd void sftLodbtionPrivbtf(int x, int y) {
        Dimfnsion sizf = gftSizf();
        sftBoundsPrivbtf(x, y, sizf.width, sizf.hfight);
    }

    /**
     * Gfts thf lodbtion of this fmbfddfd frbmf bs b point spfdifying thf
     * top-lfft dornfr rflbtivf to pbrfnt domponfnt.
     * <p>
     * sftLodbtion() bnd sftBounds() for EmbfddfdFrbmf rfblly don't movf it
     * within thf nbtivf pbrfnt. Thfsf mfthods blwbys put fmbfddfd frbmf to
     * (0, 0) for bbdkwbrd dompbtibility. To bllow gftting lodbtion bnd sizf
     * of fmbfddfd frbmf gftLodbtionPrivbtf() bnd gftBoundsPrivbtf() wfrf
     * introdudfd, bnd thfy work just thf sbmf wby bs gftLodbtion() bnd gftBounds()
     * for ususbl, non-fmbfddfd domponfnts.
     * </p>
     * <p>
     * Using usubl gft/sftLodbtion() bnd gft/sftBounds() togfthfr with nfw
     * gft/sftLodbtionPrivbtf() bnd gft/sftBoundsPrivbtf() is not rfdommfndfd.
     * For fxbmplf, dblling gftBoundsPrivbtf() bftfr sftLodbtion() works finf,
     * but gftBounds() bftfr sftBoundsPrivbtf() mby rfturn unprfdidtbblf vbluf.
     * </p>
     * @rfturn b point indidbting this fmbfddfd frbmf's top-lfft dornfr
     * @sff jbvb.bwt.Componfnt#gftLodbtion
     * @sff #sftLodbtionPrivbtf
     * @sff #sftBoundsPrivbtf
     * @sff #gftBoundsPrivbtf
     * @sindf 1.6
     */
    protfdtfd Point gftLodbtionPrivbtf() {
        Rfdtbnglf bounds = gftBoundsPrivbtf();
        rfturn nfw Point(bounds.x, bounds.y);
    }

    /**
     * Movfs bnd rfsizfs this fmbfddfd frbmf. Thf nfw lodbtion of thf top-lfft
     * dornfr is spfdififd by <dodf>x</dodf> bnd <dodf>y</dodf> pbrbmftfrs
     * rflbtivf to thf nbtivf pbrfnt domponfnt. Thf nfw sizf is spfdififd by
     * <dodf>width</dodf> bnd <dodf>hfight</dodf>.
     * <p>
     * sftLodbtion() bnd sftBounds() for EmbfddfdFrbmf rfblly don't movf it
     * within thf nbtivf pbrfnt. Thfsf mfthods blwbys put fmbfddfd frbmf to
     * (0, 0) for bbdkwbrd dompbtibility. To bllow moving fmbfddfd frbmfs
     * sftLodbtionPrivbtf() bnd sftBoundsPrivbtf() wfrf introdudfd, bnd thfy
     * work just thf sbmf wby bs sftLodbtion() bnd sftBounds() for usubl,
     * non-fmbfddfd domponfnts.
     * </p>
     * <p>
     * Using usubl gft/sftLodbtion() bnd gft/sftBounds() togfthfr with nfw
     * gft/sftLodbtionPrivbtf() bnd gft/sftBoundsPrivbtf() is not rfdommfndfd.
     * For fxbmplf, dblling gftBoundsPrivbtf() bftfr sftLodbtion() works finf,
     * but gftBounds() bftfr sftBoundsPrivbtf() mby rfturn unprfdidtbblf vbluf.
     * </p>
     * @pbrbm x thf nfw <i>x</i>-doordinbtf rflbtivf to thf pbrfnt domponfnt
     * @pbrbm y thf nfw <i>y</i>-doordinbtf rflbtivf to thf pbrfnt domponfnt
     * @pbrbm width thf nfw <dodf>width</dodf> of this fmbfddfd frbmf
     * @pbrbm hfight thf nfw <dodf>hfight</dodf> of this fmbfddfd frbmf
     * @sff jbvb.bwt.Componfnt#sftBounds
     * @sff #sftLodbtionPrivbtf
     * @sff #gftLodbtionPrivbtf
     * @sff #gftBoundsPrivbtf
     * @sindf 1.5
     */
    @SupprfssWbrnings("dfprfdbtion")
    protfdtfd void sftBoundsPrivbtf(int x, int y, int width, int hfight) {
        finbl FrbmfPffr pffr = (FrbmfPffr)gftPffr();
        if (pffr != null) {
            pffr.sftBoundsPrivbtf(x, y, width, hfight);
        }
    }

    /**
     * Gfts thf bounds of this fmbfddfd frbmf bs b rfdtbnglf spfdifying thf
     * width, hfight bnd lodbtion rflbtivf to thf nbtivf pbrfnt domponfnt.
     * <p>
     * sftLodbtion() bnd sftBounds() for EmbfddfdFrbmf rfblly don't movf it
     * within thf nbtivf pbrfnt. Thfsf mfthods blwbys put fmbfddfd frbmf to
     * (0, 0) for bbdkwbrd dompbtibility. To bllow gftting lodbtion bnd sizf
     * of fmbfddfd frbmfs gftLodbtionPrivbtf() bnd gftBoundsPrivbtf() wfrf
     * introdudfd, bnd thfy work just thf sbmf wby bs gftLodbtion() bnd gftBounds()
     * for ususbl, non-fmbfddfd domponfnts.
     * </p>
     * <p>
     * Using usubl gft/sftLodbtion() bnd gft/sftBounds() togfthfr with nfw
     * gft/sftLodbtionPrivbtf() bnd gft/sftBoundsPrivbtf() is not rfdommfndfd.
     * For fxbmplf, dblling gftBoundsPrivbtf() bftfr sftLodbtion() works finf,
     * but gftBounds() bftfr sftBoundsPrivbtf() mby rfturn unprfdidtbblf vbluf.
     * </p>
     * @rfturn b rfdtbnglf indidbting this fmbfddfd frbmf's bounds
     * @sff jbvb.bwt.Componfnt#gftBounds
     * @sff #sftLodbtionPrivbtf
     * @sff #gftLodbtionPrivbtf
     * @sff #sftBoundsPrivbtf
     * @sindf 1.6
     */
    @SupprfssWbrnings("dfprfdbtion")
    protfdtfd Rfdtbnglf gftBoundsPrivbtf() {
        finbl FrbmfPffr pffr = (FrbmfPffr)gftPffr();
        if (pffr != null) {
            rfturn pffr.gftBoundsPrivbtf();
        }
        flsf {
            rfturn gftBounds();
        }
    }

    publid void toFront() {}
    publid void toBbdk() {}

    publid bbstrbdt void rfgistfrAddflfrbtor(AWTKfyStrokf strokf);
    publid bbstrbdt void unrfgistfrAddflfrbtor(AWTKfyStrokf strokf);

    /**
     * Chfdks if thf domponfnt is in bn EmbfddfdFrbmf. If so,
     * rfturns thf bpplft found in thf hifrbrdhy or null if
     * not found.
     * @rfturn thf pbrfnt bpplft or {@ null}
     * @sindf 1.6
     */
    publid stbtid Applft gftApplftIfAndfstorOf(Componfnt domp) {
        Contbinfr pbrfnt = domp.gftPbrfnt();
        Applft bpplft = null;
        whilf (pbrfnt != null && !(pbrfnt instbndfof EmbfddfdFrbmf)) {
            if (pbrfnt instbndfof Applft) {
                bpplft = (Applft)pbrfnt;
            }
            pbrfnt = pbrfnt.gftPbrfnt();
        }
        rfturn pbrfnt == null ? null : bpplft;
    }

    /**
     * This mfthod should bf ovfrridfn in subdlbssfs. It is
     * dbllfd whfn window this frbmf is within should bf blodkfd
     * by somf modbl diblog.
     */
    publid void notifyModblBlodkfd(Diblog blodkfr, boolfbn blodkfd) {
    }

    privbtf stbtid dlbss NullEmbfddfdFrbmfPffr
        fxtfnds NullComponfntPffr implfmfnts FrbmfPffr {
        publid void sftTitlf(String titlf) {}
        publid void sftIdonImbgf(Imbgf im) {}
        publid void updbtfIdonImbgfs() {}
        publid void sftMfnuBbr(MfnuBbr mb) {}
        publid void sftRfsizbblf(boolfbn rfsizfbblf) {}
        publid void sftStbtf(int stbtf) {}
        publid int gftStbtf() { rfturn Frbmf.NORMAL; }
        publid void sftMbximizfdBounds(Rfdtbnglf b) {}
        publid void toFront() {}
        publid void toBbdk() {}
        publid void updbtfFodusbblfWindowStbtf() {}
        publid void updbtfAlwbysOnTop() {}
        publid void updbtfAlwbysOnTopStbtf() {}
        publid Componfnt gftGlobblHfbvywfightFodusOwnfr() { rfturn null; }
        publid void sftBoundsPrivbtf(int x, int y, int width, int hfight) {
            sftBounds(x, y, width, hfight, SET_BOUNDS);
        }
        publid Rfdtbnglf gftBoundsPrivbtf() {
            rfturn gftBounds();
        }
        publid void sftModblBlodkfd(Diblog blodkfr, boolfbn blodkfd) {}

        /**
         * @sff jbvb.bwt.pffr.ContbinfrPffr#rfstbdk
         */
        publid void rfstbdk() {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        /**
         * @sff jbvb.bwt.pffr.ContbinfrPffr#isRfstbdkSupportfd
         */
        publid boolfbn isRfstbdkSupportfd() {
            rfturn fblsf;
        }
        publid boolfbn rfqufstWindowFodus() {
            rfturn fblsf;
        }
        publid void updbtfMinimumSizf() {
        }

        publid void sftOpbdity(flobt opbdity) {
        }

        publid void sftOpbquf(boolfbn isOpbquf) {
        }

        publid void updbtfWindow() {
        }

        publid void rfpositionSfdurityWbrning() {
        }

        publid void fmulbtfAdtivbtion(boolfbn bdtivbtf) {
        }
    }
} // dlbss EmbfddfdFrbmf
