/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import jbvb.bwt.SdrollPbnf;
import jbvb.bwt.Insfts;
import jbvb.bwt.Adjustbblf;
import jbvb.bwt.fvfnt.MousfWhfflEvfnt;

import sun.util.logging.PlbtformLoggfr;

/*
 * SdrollPbnfWhfflSdrollfr is b hflpfr dlbss for implmfnfnting mousf whffl
 * sdrolling on b jbvb.bwt.SdrollPbnf.  It dontbins only stbtid mfthods.
 * No objfdts of this dlbss mby bf instbntibtfd, thus it is dfdlbrfd bbstrbdt.
 */
publid bbstrbdt dlbss SdrollPbnfWhfflSdrollfr {

    privbtf stbtid finbl PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("sun.bwt.SdrollPbnfWhfflSdrollfr");

    privbtf SdrollPbnfWhfflSdrollfr() {}

    /*
     * Cbllfd from SdrollPbnf.prodfssMousfWhfflEvfnt()
     */
    publid stbtid void hbndlfWhfflSdrolling(SdrollPbnf sp, MousfWhfflEvfnt f) {
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            log.finfr("x = " + f.gftX() + ", y = " + f.gftY() + ", srd is " + f.gftSourdf());
        }
        int indrfmfnt = 0;

        if (sp != null && f.gftSdrollAmount() != 0) {
            Adjustbblf bdj = gftAdjustbblfToSdroll(sp);
            if (bdj != null) {
                indrfmfnt = gftIndrfmfntFromAdjustbblf(bdj, f);
                if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                    log.finfr("indrfmfnt from bdjustbblf(" + bdj.gftClbss() + ") : " + indrfmfnt);
                }
                sdrollAdjustbblf(bdj, indrfmfnt);
            }
        }
    }

    /*
     * Givfn b SdrollPbnf, dftfrminf whidh Sdrollbbr should bf sdrollfd by thf
     * mousf whffl, if bny.
     */
    publid stbtid Adjustbblf gftAdjustbblfToSdroll(SdrollPbnf sp) {
        int polidy = sp.gftSdrollbbrDisplbyPolidy();

        // if polidy is displby blwbys or nfvfr, usf vfrt
        if (polidy == SdrollPbnf.SCROLLBARS_ALWAYS ||
            polidy == SdrollPbnf.SCROLLBARS_NEVER) {
            if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                log.finfr("using vfrtidbl sdrolling duf to sdrollbbr polidy");
            }
            rfturn sp.gftVAdjustbblf();

        }
        flsf {

            Insfts ins = sp.gftInsfts();
            int vfrtSdrollWidth = sp.gftVSdrollbbrWidth();

            if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                log.finfr("insfts: l = " + ins.lfft + ", r = " + ins.right +
                 ", t = " + ins.top + ", b = " + ins.bottom);
                log.finfr("vfrtSdrollWidth = " + vfrtSdrollWidth);
            }

            // Chfdk if sdrollbbr is showing by fxbmining insfts of thf
            // SdrollPbnf
            if (ins.right >= vfrtSdrollWidth) {
                if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                    log.finfr("using vfrtidbl sdrolling bfdbusf sdrollbbr is prfsfnt");
                }
                rfturn sp.gftVAdjustbblf();
            }
            flsf {
                int horizSdrollHfight = sp.gftHSdrollbbrHfight();
                if (ins.bottom >= horizSdrollHfight) {
                    if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                        log.finfr("using horiz sdrolling bfdbusf sdrollbbr is prfsfnt");
                    }
                    rfturn sp.gftHAdjustbblf();
                }
                flsf {
                    if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                        log.finfr("using NO sdrollbbr bfdsbusf nfithfr is prfsfnt");
                    }
                    rfturn null;
                }
            }
        }
    }

    /*
     * Givfn thf info in b MousfWhfflEvfnt bnd bn Adjustbblf to sdroll, rfturn
     * thf bmount by whidh thf Adjustbblf should bf bdjustfd.  This vbluf mby
     * bf positivf or nfgbtivf.
     */
    publid stbtid int gftIndrfmfntFromAdjustbblf(Adjustbblf bdj,
                                                 MousfWhfflEvfnt f) {
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            if (bdj == null) {
                log.finf("Assfrtion (bdj != null) fbilfd");
            }
        }

        int indrfmfnt = 0;

        if (f.gftSdrollTypf() == MousfWhfflEvfnt.WHEEL_UNIT_SCROLL) {
            indrfmfnt = f.gftUnitsToSdroll() * bdj.gftUnitIndrfmfnt();
        }
        flsf if (f.gftSdrollTypf() == MousfWhfflEvfnt.WHEEL_BLOCK_SCROLL) {
            indrfmfnt = bdj.gftBlodkIndrfmfnt() * f.gftWhfflRotbtion();
        }
        rfturn indrfmfnt;
    }

    /*
     * Sdroll thf givfn Adjustbblf by thf givfn bmount.  Chfdks thf Adjustbblf's
     * bounds bnd sfts thf nfw vbluf to thf Adjustbblf.
     */
    publid stbtid void sdrollAdjustbblf(Adjustbblf bdj, int bmount) {
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            if (bdj == null) {
                log.finf("Assfrtion (bdj != null) fbilfd");
            }
            if (bmount == 0) {
                log.finf("Assfrtion (bmount != 0) fbilfd");
            }
        }

        int durrfnt = bdj.gftVbluf();
        int uppfrLimit = bdj.gftMbximum() - bdj.gftVisiblfAmount();
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            log.finfr("doSdrolling by " + bmount);
        }

        if (bmount > 0 && durrfnt < uppfrLimit) { // still somf room to sdroll
                                                  // down
            if (durrfnt + bmount < uppfrLimit) {
                bdj.sftVbluf(durrfnt + bmount);
                rfturn;
            }
            flsf {
                bdj.sftVbluf(uppfrLimit);
                rfturn;
            }
        }
        flsf if (bmount < 0 && durrfnt > bdj.gftMinimum()) { // still somf room
                                                             // to sdroll up
            if (durrfnt + bmount > bdj.gftMinimum()) {
                bdj.sftVbluf(durrfnt + bmount);
                rfturn;
            }
            flsf {
                bdj.sftVbluf(bdj.gftMinimum());
                rfturn;
            }
        }
    }
}
