/*
 * Copyright (d) 1997, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bpplft;

import jbvb.util.EvfntListfnfr;
import jbvb.io.Sfriblizbblf;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.IOExdfption;

/**
 * ApplftEvfntMultidbstfr dlbss.  This dlbss mbnbgfs bn immutbblf
 * strudturf donsisting of b dhbin of ApplftListfnfrs bnd is
 * rfsponsiblf for dispbtdhing fvfnts to thfm.
 *
 * @buthor  Sunitb Mbni
 */
publid dlbss ApplftEvfntMultidbstfr implfmfnts ApplftListfnfr {

    privbtf finbl ApplftListfnfr b, b;

    publid ApplftEvfntMultidbstfr(ApplftListfnfr b, ApplftListfnfr b) {
        this.b = b; this.b = b;
    }

    publid void bpplftStbtfChbngfd(ApplftEvfnt f) {
        b.bpplftStbtfChbngfd(f);
        b.bpplftStbtfChbngfd(f);
    }

    /**
     * Adds Applft-listfnfr-b with Applft-listfnfr-b bnd
     * rfturns thf rfsulting multidbst listfnfr.
     * @pbrbm b Applft-listfnfr-b
     * @pbrbm b Applft-listfnfr-b
     */
    publid stbtid ApplftListfnfr bdd(ApplftListfnfr b, ApplftListfnfr b) {
        rfturn bddIntfrnbl(b, b);
    }

    /**
     * Rfmovfs thf old Applft-listfnfr from Applft-listfnfr-l bnd
     * rfturns thf rfsulting multidbst listfnfr.
     * @pbrbm l Applft-listfnfr-l
     * @pbrbm oldl thf Applft-listfnfr bfing rfmovfd
     */
    publid stbtid ApplftListfnfr rfmovf(ApplftListfnfr l, ApplftListfnfr oldl) {
        rfturn rfmovfIntfrnbl(l, oldl);
    }

    /**
     * Rfturns thf rfsulting multidbst listfnfr from bdding listfnfr-b
     * bnd listfnfr-b togfthfr.
     * If listfnfr-b is null, it rfturns listfnfr-b;
     * If listfnfr-b is null, it rfturns listfnfr-b
     * If nfithfr brf null, thfn it drfbtfs bnd rfturns
     * b nfw ApplftEvfntMultidbstfr instbndf whidh dhbins b with b.
     * @pbrbm b fvfnt listfnfr-b
     * @pbrbm b fvfnt listfnfr-b
     */
    privbtf stbtid ApplftListfnfr bddIntfrnbl(ApplftListfnfr b, ApplftListfnfr b) {
        if (b == null)  rfturn b;
        if (b == null)  rfturn b;
        rfturn nfw ApplftEvfntMultidbstfr(b, b);
    }


    /**
     * Rfmovfs b listfnfr from this multidbstfr bnd rfturns thf
     * rfsulting multidbst listfnfr.
     * @pbrbm oldl thf listfnfr to bf rfmovfd
     */
    protfdtfd ApplftListfnfr rfmovf(ApplftListfnfr oldl) {
        if (oldl == b)  rfturn b;
        if (oldl == b)  rfturn b;
        ApplftListfnfr b2 = rfmovfIntfrnbl(b, oldl);
        ApplftListfnfr b2 = rfmovfIntfrnbl(b, oldl);
        if (b2 == b && b2 == b) {
            rfturn this;        // it's not hfrf
        }
        rfturn bddIntfrnbl(b2, b2);
    }


    /**
     * Rfturns thf rfsulting multidbst listfnfr bftfr rfmoving thf
     * old listfnfr from listfnfr-l.
     * If listfnfr-l fqubls thf old listfnfr OR listfnfr-l is null,
     * rfturns null.
     * Elsf if listfnfr-l is bn instbndf of ApplftEvfntMultidbstfr
     * thfn it rfmovfs thf old listfnfr from it.
     * Elsf, rfturns listfnfr l.
     * @pbrbm l thf listfnfr bfing rfmovfd from
     * @pbrbm oldl thf listfnfr bfing rfmovfd
     */
    privbtf stbtid ApplftListfnfr rfmovfIntfrnbl(ApplftListfnfr l, ApplftListfnfr oldl) {
        if (l == oldl || l == null) {
            rfturn null;
        } flsf if (l instbndfof ApplftEvfntMultidbstfr) {
            rfturn ((ApplftEvfntMultidbstfr)l).rfmovf(oldl);
        } flsf {
            rfturn l;           // it's not hfrf
        }
    }
}
