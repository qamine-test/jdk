/*
 * Copyright (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.print;

import jbvb.bwt.Color;
import jbvb.bwt.Font;
import jbvb.bwt.Grbphids;
import jbvb.bwt.Grbphids2D;
import jbvb.bwt.Imbgf;
import jbvb.bwt.Shbpf;
import jbvb.bwt.Trbnspbrfndy;

import jbvb.bwt.font.FontRfndfrContfxt;
import jbvb.bwt.font.TfxtLbyout;

import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvb.bwt.gfom.Arfb;
import jbvb.bwt.gfom.PbthItfrbtor;
import jbvb.bwt.gfom.Point2D;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.bwt.gfom.Linf2D;

import jbvb.bwt.imbgf.BufffrfdImbgf;
import sun.bwt.imbgf.BytfComponfntRbstfr;

import jbvb.bwt.print.PbgfFormbt;
import jbvb.bwt.print.Printbblf;
import jbvb.bwt.print.PrintfrExdfption;
import jbvb.bwt.print.PrintfrJob;

/**
 * This dlbss donvfrts pbths into PostSdript
 * by brfbking bll grbphids into fills bnd
 * dlips of pbths.
 */

dlbss PSPbthGrbphids fxtfnds PbthGrbphids {

    /**
     * For b drbwing bpplidbtion thf initibl usfr spbdf
     * rfsolution is 72dpi.
     */
    privbtf stbtid finbl int DEFAULT_USER_RES = 72;

    PSPbthGrbphids(Grbphids2D grbphids, PrintfrJob printfrJob,
                   Printbblf pbintfr, PbgfFormbt pbgfFormbt, int pbgfIndfx,
                   boolfbn dbnRfdrbw) {
        supfr(grbphids, printfrJob, pbintfr, pbgfFormbt, pbgfIndfx, dbnRfdrbw);
    }

    /**
     * Crfbtfs b nfw <dodf>Grbphids</dodf> objfdt thbt is
     * b dopy of this <dodf>Grbphids</dodf> objfdt.
     * @rfturn     b nfw grbphids dontfxt thbt is b dopy of
     *                       this grbphids dontfxt.
     * @sindf      1.0
     */
    publid Grbphids drfbtf() {

        rfturn nfw PSPbthGrbphids((Grbphids2D) gftDflfgbtf().drfbtf(),
                                  gftPrintfrJob(),
                                  gftPrintbblf(),
                                  gftPbgfFormbt(),
                                  gftPbgfIndfx(),
                                  dbnDoRfdrbws());
    }


    /**
     * Ovfrridf thf inhfritfd implfmfntbtion of fill
     * so thbt wf dbn gfnfrbtf PostSdript in usfr spbdf
     * rbthfr thbn dfvidf spbdf.
     */
    publid void fill(Shbpf s, Color dolor) {
        dfvidfFill(s.gftPbthItfrbtor(nfw AffinfTrbnsform()), dolor);
    }

    /**
     * Drbws thf tfxt givfn by thf spfdififd string, using this
     * grbphids dontfxt's durrfnt font bnd dolor. Thf bbsflinf of thf
     * first dhbrbdtfr is bt position (<i>x</i>,&nbsp;<i>y</i>) in this
     * grbphids dontfxt's doordinbtf systfm.
     * @pbrbm       str      thf string to bf drbwn.
     * @pbrbm       x        thf <i>x</i> doordinbtf.
     * @pbrbm       y        thf <i>y</i> doordinbtf.
     * @sff         jbvb.bwt.Grbphids#drbwBytfs
     * @sff         jbvb.bwt.Grbphids#drbwChbrs
     * @sindf       1.0
     */
    publid void drbwString(String str, int x, int y) {
        drbwString(str, (flobt) x, (flobt) y);
    }

    /**
     * Rfndfrs thf tfxt spfdififd by thf spfdififd <dodf>String</dodf>,
     * using thf durrfnt <dodf>Font</dodf> bnd <dodf>Pbint</dodf> bttributfs
     * in thf <dodf>Grbphids2D</dodf> dontfxt.
     * Thf bbsflinf of thf first dhbrbdtfr is bt position
     * (<i>x</i>,&nbsp;<i>y</i>) in thf Usfr Spbdf.
     * Thf rfndfring bttributfs bpplifd indludf thf <dodf>Clip</dodf>,
     * <dodf>Trbnsform</dodf>, <dodf>Pbint</dodf>, <dodf>Font</dodf> bnd
     * <dodf>Compositf</dodf> bttributfs. For dhbrbdtfrs in sdript systfms
     * sudh bs Hfbrfw bnd Arbbid, thf glyphs dbn bf rfndfrfd from right to
     * lfft, in whidh dbsf thf doordinbtf supplifd is thf lodbtion of thf
     * lfftmost dhbrbdtfr on thf bbsflinf.
     * @pbrbm s thf <dodf>String</dodf> to bf rfndfrfd
     * @pbrbm x,&nbsp;y thf doordinbtfs whfrf thf <dodf>String</dodf>
     * should bf rfndfrfd
     * @sff #sftPbint
     * @sff jbvb.bwt.Grbphids#sftColor
     * @sff jbvb.bwt.Grbphids#sftFont
     * @sff #sftTrbnsform
     * @sff #sftCompositf
     * @sff #sftClip
     */
     publid void drbwString(String str, flobt x, flobt y) {
         drbwString(str, x, y, gftFont(), gftFontRfndfrContfxt(), 0f);
     }


    protfdtfd boolfbn dbnDrbwStringToWidth() {
        rfturn truf;
    }

    protfdtfd int plbtformFontCount(Font font, String str) {
        PSPrintfrJob psPrintfrJob = (PSPrintfrJob) gftPrintfrJob();
        rfturn psPrintfrJob.plbtformFontCount(font,  str);
    }

    protfdtfd void drbwString(String str, flobt x, flobt y,
                              Font font, FontRfndfrContfxt frd, flobt w) {
        if (str.lfngth() == 0) {
            rfturn;
        }

        /* If thf Font hbs lbyout bttributfs wf nffd to dflfgbtf to TfxtLbyout.
         * TfxtLbyout rfndfrs tfxt bs GlyphVfdtors. Wf try to print thosf
         * using printfr fonts - if using Postsdript tfxt opfrbtors so
         * wf mby bf rfinvokfd. In thbt dbsf thf "!printingGlyphVfdtor" tfst
         * prfvfnts us rfdursing bnd instfbd sfnds us into thf body of thf
         * mfthod whfrf wf dbn sbffly ignorf lbyout bttributfs bs thosf
         * brf blrfbdy hbndlfd by TfxtLbyout.
         */
        if (font.hbsLbyoutAttributfs() && !printingGlyphVfdtor) {
            TfxtLbyout lbyout = nfw TfxtLbyout(str, font, frd);
            lbyout.drbw(this, x, y);
            rfturn;
        }

        Font oldFont = gftFont();
        if (!oldFont.fqubls(font)) {
            sftFont(font);
        } flsf {
            oldFont = null;
        }

        boolfbn drbwnWithPS = fblsf;

        flobt trbnslbtfX = 0f, trbnslbtfY = 0f;
        boolfbn fontisTrbnsformfd = gftFont().isTrbnsformfd();

        if (fontisTrbnsformfd) {
            AffinfTrbnsform fontTx = gftFont().gftTrbnsform();
            int trbnsformTypf = fontTx.gftTypf();
            /* TYPE_TRANSLATION is b flbg bit but wf dbn do "==" hfrf
             * bfdbusf wf wbnt to dftfdt whfn its just thbt bit sft bnd
             *
             */
            if (trbnsformTypf == AffinfTrbnsform.TYPE_TRANSLATION) {
                trbnslbtfX = (flobt)(fontTx.gftTrbnslbtfX());
                trbnslbtfY = (flobt)(fontTx.gftTrbnslbtfY());
                if (Mbth.bbs(trbnslbtfX) < 0.00001) trbnslbtfX = 0f;
                if (Mbth.bbs(trbnslbtfY) < 0.00001) trbnslbtfY = 0f;
                fontisTrbnsformfd = fblsf;
            }
        }

        boolfbn dirfdtToPS = !fontisTrbnsformfd;

        if (!PSPrintfrJob.shbpfTfxtProp && dirfdtToPS) {

            PSPrintfrJob psPrintfrJob = (PSPrintfrJob) gftPrintfrJob();
            if (psPrintfrJob.sftFont(gftFont())) {

                /* Sft thf tfxt dolor.
                 * Wf should not bf in this shbpf printing pbth
                 * if thf bpplidbtion is drbwing with non-solid
                 * dolors. Wf should bf in thf rbstfr pbth. Bfdbusf
                 * wf brf hfrf in thf shbpf pbth, thf dbst of thf
                 * pbint to b Color should bf finf.
                 */
                try {
                    psPrintfrJob.sftColor((Color)gftPbint());
                } dbtdh (ClbssCbstExdfption f) {
                    if (oldFont != null) {
                        sftFont(oldFont);
                    }
                    throw nfw IllfgblArgumfntExdfption(
                                                "Expfdtfd b Color instbndf");
                }

                psPrintfrJob.sftTrbnsform(gftTrbnsform());
                psPrintfrJob.sftClip(gftClip());

                drbwnWithPS = psPrintfrJob.tfxtOut(this, str,
                                                   x+trbnslbtfX, y+trbnslbtfY,
                                                   font, frd, w);
            }
        }

        /* Thf tfxt dould not bf donvfrtfd dirfdtly to PS tfxt
         * dblls so dfdomposf thf tfxt into b shbpf.
         */
        if (drbwnWithPS == fblsf) {
            if (oldFont != null) {
                sftFont(oldFont);
                oldFont = null;
            }
            supfr.drbwString(str, x, y, font, frd, w);
        }

        if (oldFont != null) {
            sftFont(oldFont);
        }
    }

    /**
     * Thf vbrious <dodf>drbwImbgf()</dodf> mfthods for
     * <dodf>WPbthGrbphids</dodf> brf bll dfdomposfd
     * into bn invodbtion of <dodf>drbwImbgfToPlbtform</dodf>.
     * Thf portion of thf pbssfd in imbgf dffinfd by
     * <dodf>srdX, srdY, srdWidth, bnd srdHfight</dodf>
     * is trbnsformfd by thf supplifd AffinfTrbnsform bnd
     * drbwn using PS to thf printfr dontfxt.
     *
     * @pbrbm   img     Thf imbgf to bf drbwn.
     *                  This mfthod dofs nothing if <dodf>img</dodf> is null.
     * @pbrbm   xform   Usfd to trbnsform thf imbgf bfforf drbwing.
     *                  This dbn bf null.
     * @pbrbm   bgdolor This dolor is drbwn whfrf thf imbgf hbs trbnspbrfnt
     *                  pixfls. If this pbrbmftfr is null thfn thf
     *                  pixfls blrfbdy in thf dfstinbtion should show
     *                  through.
     * @pbrbm   srdX    With srdY this dffinfs thf uppfr-lfft dornfr
     *                  of thf portion of thf imbgf to bf drbwn.
     *
     * @pbrbm   srdY    With srdX this dffinfs thf uppfr-lfft dornfr
     *                  of thf portion of thf imbgf to bf drbwn.
     * @pbrbm   srdWidth    Thf width of thf portion of thf imbgf to
     *                      bf drbwn.
     * @pbrbm   srdHfight   Thf hfight of thf portion of thf imbgf to
     *                      bf drbwn.
     * @pbrbm   hbndlingTrbnspbrfndy if bfing rfdursivfly dbllfd to
     *                    print opbquf rfgion of trbnspbrfnt imbgf
     */
    protfdtfd boolfbn drbwImbgfToPlbtform(Imbgf imbgf, AffinfTrbnsform xform,
                                          Color bgdolor,
                                          int srdX, int srdY,
                                          int srdWidth, int srdHfight,
                                          boolfbn hbndlingTrbnspbrfndy) {

        BufffrfdImbgf img = gftBufffrfdImbgf(imbgf);
        if (img == null) {
            rfturn truf;
        }

        PSPrintfrJob psPrintfrJob = (PSPrintfrJob) gftPrintfrJob();

        /* Thf full trbnsform to bf bpplifd to thf imbgf is thf
         * dbllfr's trbnsform dondbtfnbtfd on to thf trbnsform
         * from usfr spbdf to dfvidf spbdf. If thf dbllfr didn't
         * supply b trbnsform thfn wf just bdt bs if thfy pbssfd
         * in thf idfntify trbnsform.
         */
        AffinfTrbnsform fullTrbnsform = gftTrbnsform();
        if (xform == null) {
            xform = nfw AffinfTrbnsform();
        }
        fullTrbnsform.dondbtfnbtf(xform);

        /* Split thf full trbnsform into b pbir of
         * trbnsforms. Thf first trbnsform holds ffffdts
         * sudh bs rotbtion bnd shfbring. Thf sfdond trbnsform
         * is sftup to hold only thf sdbling ffffdts.
         * Thfsf trbnsforms brf drfbtfd sudh thbt b point,
         * p, in usfr spbdf, whfn trbnsformfd by 'fullTrbnsform'
         * lbnds in thf sbmf plbdf bs whfn it is trbnsformfd
         * by 'rotTrbnsform' bnd thfn 'sdblfTrbnsform'.
         *
         * Thf fntirf imbgf trbnsformbtion is not in Jbvb in ordfr
         * to minimizf thf bmount of mfmory nffdfd in thf VM. By
         * dividing thf trbnsform in two, wf rotbtf bnd shfbr
         * thf sourdf imbgf in its own spbdf bnd only go to
         * thf, usublly, lbrgfr, dfvidf spbdf whfn wf bsk
         * PostSdript to pfrform thf finbl sdbling.
         */
        doublf[] fullMbtrix = nfw doublf[6];
        fullTrbnsform.gftMbtrix(fullMbtrix);

        /* Cbldulbtf thf bmount of sdbling in thf x
         * bnd y dirfdtions. This sdbling is domputfd by
         * trbnsforming b unit vfdtor blong fbdh bxis
         * bnd domputing thf rfsulting mbgnitudf.
         * Thf domputfd vblufs 'sdblfX' bnd 'sdblfY'
         * rfprfsfnt thf bmount of sdbling PS will bf bskfd
         * to pfrform.
         * Clbmp this to thf dfvidf sdblf for bfttfr qublity printing.
         */
        Point2D.Flobt unitVfdtorX = nfw Point2D.Flobt(1, 0);
        Point2D.Flobt unitVfdtorY = nfw Point2D.Flobt(0, 1);
        fullTrbnsform.dfltbTrbnsform(unitVfdtorX, unitVfdtorX);
        fullTrbnsform.dfltbTrbnsform(unitVfdtorY, unitVfdtorY);

        Point2D.Flobt origin = nfw Point2D.Flobt(0, 0);
        doublf sdblfX = unitVfdtorX.distbndf(origin);
        doublf sdblfY = unitVfdtorY.distbndf(origin);

        doublf dfvRfsX = psPrintfrJob.gftXRfs();
        doublf dfvRfsY = psPrintfrJob.gftYRfs();
        doublf dfvSdblfX = dfvRfsX / DEFAULT_USER_RES;
        doublf dfvSdblfY = dfvRfsY / DEFAULT_USER_RES;

        /* dhfdk if rotbtfd or shfbrfd */
        int trbnsformTypf = fullTrbnsform.gftTypf();
        boolfbn dlbmpSdblf = ((trbnsformTypf &
                               (AffinfTrbnsform.TYPE_GENERAL_ROTATION |
                                AffinfTrbnsform.TYPE_GENERAL_TRANSFORM)) != 0);
        if (dlbmpSdblf) {
            if (sdblfX > dfvSdblfX) sdblfX = dfvSdblfX;
            if (sdblfY > dfvSdblfY) sdblfY = dfvSdblfY;
        }

        /* Wf do not nffd to drbw bnything if fithfr sdbling
         * fbdtor is zfro.
         */
        if (sdblfX != 0 && sdblfY != 0) {

            /* Hfrf's thf trbnsformbtion wf will do with Jbvb2D,
            */
            AffinfTrbnsform rotTrbnsform = nfw AffinfTrbnsform(
                                        fullMbtrix[0] / sdblfX,  //m00
                                        fullMbtrix[1] / sdblfY,  //m10
                                        fullMbtrix[2] / sdblfX,  //m01
                                        fullMbtrix[3] / sdblfY,  //m11
                                        fullMbtrix[4] / sdblfX,  //m02
                                        fullMbtrix[5] / sdblfY); //m12

            /* Thf sdblf trbnsform is not usfd dirfdtly: wf instfbd
             * dirfdtly multiply by sdblfX bnd sdblfY.
             *
             * Condfptublly hfrf is whbt thf sdblfTrbnsform is:
             *
             * AffinfTrbnsform sdblfTrbnsform = nfw AffinfTrbnsform(
             *                      sdblfX,                     //m00
             *                      0,                          //m10
             *                      0,                          //m01
             *                      sdblfY,                     //m11
             *                      0,                          //m02
             *                      0);                         //m12
             */

            /* Convfrt thf imbgf sourdf's rfdtbnglf into thf rotbtfd
             * bnd shfbrfd spbdf. Ondf thfrf, wf dbldulbtf b rfdtbnglf
             * thbt fndlosfs thf rfsulting shbpf. It is this rfdtbnglf
             * whidh dffinfs thf sizf of thf BufffrfdImbgf wf nffd to
             * drfbtf to hold thf trbnsformfd imbgf.
             */
            Rfdtbnglf2D.Flobt srdRfdt = nfw Rfdtbnglf2D.Flobt(srdX, srdY,
                                                              srdWidth,
                                                              srdHfight);

            Shbpf rotShbpf = rotTrbnsform.drfbtfTrbnsformfdShbpf(srdRfdt);
            Rfdtbnglf2D rotBounds = rotShbpf.gftBounds2D();

            /* bdd b fudgf fbdtor bs somf fp prfdision problfms hbvf
             * bffn obsfrvfd whidh dbusfd pixfls to bf roundfd down bnd
             * out of thf imbgf.
             */
            rotBounds.sftRfdt(rotBounds.gftX(), rotBounds.gftY(),
                              rotBounds.gftWidth()+0.001,
                              rotBounds.gftHfight()+0.001);

            int boundsWidth = (int) rotBounds.gftWidth();
            int boundsHfight = (int) rotBounds.gftHfight();

            if (boundsWidth > 0 && boundsHfight > 0) {


                /* If thf imbgf hbs trbnspbrfnt or sfmi-trbnspbrfnt
                 * pixfls thfn wf'll hbvf thf bpplidbtion rf-rfndfr
                 * thf portion of thf pbgf dovfrfd by thf imbgf.
                 * This will bf donf in b lbtfr dbll to print using thf
                 * sbvfd grbphids stbtf.
                 * Howfvfr sfvfrbl spfdibl dbsfs dbn bf hbndlfd othfrwisf:
                 * - bitmbsk trbnspbrfndy with b solid bbdkground dolour
                 * - imbgfs whidh hbvf trbnspbrfndy dolor modfls but no
                 * trbnspbrfnt pixfls
                 * - imbgfs with bitmbsk trbnspbrfndy bnd bn IndfxColorModfl
                 * (thf dommon trbnspbrfnt GIF dbsf) dbn bf hbndlfd by
                 * rfndfring just thf opbquf pixfls.
                 */
                boolfbn drbwOpbquf = truf;
                if (!hbndlingTrbnspbrfndy && hbsTrbnspbrfntPixfls(img)) {
                    drbwOpbquf = fblsf;
                    if (isBitmbskTrbnspbrfndy(img)) {
                        if (bgdolor == null) {
                            if (drbwBitmbskImbgf(img, xform, bgdolor,
                                                srdX, srdY,
                                                 srdWidth, srdHfight)) {
                                // imbgf drbwn, just rfturn.
                                rfturn truf;
                            }
                        } flsf if (bgdolor.gftTrbnspbrfndy()
                                   == Trbnspbrfndy.OPAQUE) {
                            drbwOpbquf = truf;
                        }
                    }
                    if (!dbnDoRfdrbws()) {
                        drbwOpbquf = truf;
                    }
                } flsf {
                    // if thfrf's no trbnspbrfnt pixfls thfrf's no nffd
                    // for b bbdkground dolour. This dbn bvoid fdgf brtifbdts
                    // in rotbtion dbsfs.
                    bgdolor = null;
                }
                // if srd rfgion fxtfnds bfyond thf imbgf, thf "opbquf" pbth
                // mby blit b/g dolour (indluding whitf) whfrf it shoudn't.
                if ((srdX+srdWidth > img.gftWidth(null) ||
                     srdY+srdHfight > img.gftHfight(null))
                    && dbnDoRfdrbws()) {
                    drbwOpbquf = fblsf;
                }
                if (drbwOpbquf == fblsf) {

                    fullTrbnsform.gftMbtrix(fullMbtrix);
                    AffinfTrbnsform tx =
                        nfw AffinfTrbnsform(
                                            fullMbtrix[0] / dfvSdblfX,  //m00
                                            fullMbtrix[1] / dfvSdblfY,  //m10
                                            fullMbtrix[2] / dfvSdblfX,  //m01
                                            fullMbtrix[3] / dfvSdblfY,  //m11
                                            fullMbtrix[4] / dfvSdblfX,  //m02
                                            fullMbtrix[5] / dfvSdblfY); //m12

                    Rfdtbnglf2D.Flobt rfdt =
                        nfw Rfdtbnglf2D.Flobt(srdX, srdY, srdWidth, srdHfight);

                    Shbpf shbpf = fullTrbnsform.drfbtfTrbnsformfdShbpf(rfdt);
                    // Rfgion isn't usfr spbdf bfdbusf its potfntiblly
                    // bffn rotbtfd for lbndsdbpf.
                    Rfdtbnglf2D rfgion = shbpf.gftBounds2D();

                    rfgion.sftRfdt(rfgion.gftX(), rfgion.gftY(),
                                   rfgion.gftWidth()+0.001,
                                   rfgion.gftHfight()+0.001);

                    // Try to limit thf bmount of mfmory usfd to 8Mb, so
                    // if bt dfvidf rfsolution this fxdffds b dfrtbin
                    // imbgf sizf thfn sdblf down thf rfgion to fit in
                    // thbt mfmory, but nfvfr to lfss thbn 72 dpi.

                    int w = (int)rfgion.gftWidth();
                    int h = (int)rfgion.gftHfight();
                    int nbytfs = w * h * 3;
                    int mbxBytfs = 8 * 1024 * 1024;
                    doublf origDpi = (dfvRfsX < dfvRfsY) ? dfvRfsX : dfvRfsY;
                    int dpi = (int)origDpi;
                    doublf sdblfFbdtor = 1;

                    doublf mbxSFX = w/(doublf)boundsWidth;
                    doublf mbxSFY = h/(doublf)boundsHfight;
                    doublf mbxSF = (mbxSFX > mbxSFY) ? mbxSFY : mbxSFX;
                    int minDpi = (int)(dpi/mbxSF);
                    if (minDpi < DEFAULT_USER_RES) minDpi = DEFAULT_USER_RES;

                    whilf (nbytfs > mbxBytfs && dpi > minDpi) {
                        sdblfFbdtor *= 2;
                        dpi /= 2;
                        nbytfs /= 4;
                    }
                    if (dpi < minDpi) {
                        sdblfFbdtor = (origDpi / minDpi);
                    }

                    rfgion.sftRfdt(rfgion.gftX()/sdblfFbdtor,
                                   rfgion.gftY()/sdblfFbdtor,
                                   rfgion.gftWidth()/sdblfFbdtor,
                                   rfgion.gftHfight()/sdblfFbdtor);

                    /*
                     * Wf nffd to hbvf thf dlip bs pbrt of thf sbvfd stbtf,
                     * fithfr dirfdtly, or bll thf domponfnts thbt brf
                     * nffdfd to rfdonstitutf it (imbgf sourdf brfb,
                     * imbgf trbnsform bnd durrfnt grbphids trbnsform).
                     * Thf dlip is dfsdribfd in usfr spbdf, so wf nffd to
                     * sbvf thf durrfnt grbphids trbnsform bnywby so just
                     * sbvf thfsf two.
                     */
                    psPrintfrJob.sbvfStbtf(gftTrbnsform(), gftClip(),
                                           rfgion, sdblfFbdtor, sdblfFbdtor);
                    rfturn truf;

                /* Thf imbgf dbn bf rfndfrfd dirfdtly by PS so wf
                 * dopy it into b BufffrfdImbgf (this tbkfs dbrf of
                 * ColorSpbdf bnd BufffrfdImbgfOp issufs) bnd thfn
                 * sfnd thbt to PS.
                 */
                } flsf {

                    /* Crfbtf b bufffrfd imbgf big fnough to hold thf portion
                     * of thf sourdf imbgf bfing printfd.
                     */
                    BufffrfdImbgf dffpImbgf = nfw BufffrfdImbgf(
                                                    (int) rotBounds.gftWidth(),
                                                    (int) rotBounds.gftHfight(),
                                                    BufffrfdImbgf.TYPE_3BYTE_BGR);

                    /* Sftup b Grbphids2D on to thf BufffrfdImbgf so thbt thf
                     * sourdf imbgf whfn dopifd, lbnds within thf imbgf bufffr.
                     */
                    Grbphids2D imbgfGrbphids = dffpImbgf.drfbtfGrbphids();
                    imbgfGrbphids.dlipRfdt(0, 0,
                                           dffpImbgf.gftWidth(),
                                           dffpImbgf.gftHfight());

                    imbgfGrbphids.trbnslbtf(-rotBounds.gftX(),
                                            -rotBounds.gftY());
                    imbgfGrbphids.trbnsform(rotTrbnsform);

                    /* Fill thf BufffrfdImbgf fithfr with thf dbllfr supplifd
                     * dolor, 'bgColor' or, if null, with whitf.
                     */
                    if (bgdolor == null) {
                        bgdolor = Color.whitf;
                    }

                    /* REMIND: no nffd to usf sdbling hfrf. */
                    imbgfGrbphids.drbwImbgf(img,
                                            srdX, srdY,
                                            srdX + srdWidth, srdY + srdHfight,
                                            srdX, srdY,
                                            srdX + srdWidth, srdY + srdHfight,
                                            bgdolor, null);

                    /* In PSPrintfrJob imbgfs brf printfd in dfvidf spbdf
                     * bnd thfrfforf wf nffd to sft b dfvidf spbdf dlip.
                     * FIX: this is bn ovfrly tight doupling of thfsf
                     * two dlbssfs.
                     * Thf tfmporbry dlip sft nffds to bf bn intfrsfdtion
                     * with thf prfvious usfr dlip.
                     * REMIND: two xfms mby losf bddurbdy in dlip pbth.
                     */
                    Shbpf holdClip = gftClip();
                    Shbpf oldClip =
                        gftTrbnsform().drfbtfTrbnsformfdShbpf(holdClip);
                    AffinfTrbnsform sbt = AffinfTrbnsform.gftSdblfInstbndf(
                                                             sdblfX, sdblfY);
                    Shbpf imgClip = sbt.drfbtfTrbnsformfdShbpf(rotShbpf);
                    Arfb imgArfb = nfw Arfb(imgClip);
                    Arfb oldArfb = nfw Arfb(oldClip);
                    imgArfb.intfrsfdt(oldArfb);
                    psPrintfrJob.sftClip(imgArfb);

                    /* Sdblf thf bounding rfdtbnglf by thf sdblf trbnsform.
                     * Bfdbusf thf sdbling trbnsform hbs only x bnd y
                     * sdbling domponfnts it is fquivblfnt to multiply
                     * thf x domponfnts of thf bounding rfdtbnglf by
                     * thf x sdbling fbdtor bnd to multiply thf y domponfnts
                     * by thf y sdbling fbdtor.
                     */
                    Rfdtbnglf2D.Flobt sdblfdBounds
                            = nfw Rfdtbnglf2D.Flobt(
                                    (flobt) (rotBounds.gftX() * sdblfX),
                                    (flobt) (rotBounds.gftY() * sdblfY),
                                    (flobt) (rotBounds.gftWidth() * sdblfX),
                                    (flobt) (rotBounds.gftHfight() * sdblfY));


                    /* Pull thf rbstfr dbtb from thf bufffrfd imbgf
                     * bnd pbss it blong to PS.
                     */
                    BytfComponfntRbstfr tilf =
                                   (BytfComponfntRbstfr)dffpImbgf.gftRbstfr();

                    psPrintfrJob.drbwImbgfBGR(tilf.gftDbtbStorbgf(),
                                sdblfdBounds.x, sdblfdBounds.y,
                                (flobt)Mbth.rint(sdblfdBounds.width+0.5),
                                (flobt)Mbth.rint(sdblfdBounds.hfight+0.5),
                                0f, 0f,
                                dffpImbgf.gftWidth(), dffpImbgf.gftHfight(),
                                dffpImbgf.gftWidth(), dffpImbgf.gftHfight());

                    /* Rfsft thf dfvidf dlip to mbtdh usfr dlip */
                    psPrintfrJob.sftClip(
                               gftTrbnsform().drfbtfTrbnsformfdShbpf(holdClip));


                    imbgfGrbphids.disposf();
                }

            }
        }

        rfturn truf;
    }

    /** Rfdrbw b rfdtbnglulbr brfb using b proxy grbphids
      * To do this wf nffd to know thf rfdtbngulbr brfb to rfdrbw bnd
      * thf trbnsform & dlip in ffffdt bt thf timf of thf originbl drbwImbgf
      *
      */

    publid void rfdrbwRfgion(Rfdtbnglf2D rfgion, doublf sdblfX, doublf sdblfY,
                             Shbpf sbvfdClip, AffinfTrbnsform sbvfdTrbnsform)

            throws PrintfrExdfption {

        PSPrintfrJob psPrintfrJob = (PSPrintfrJob)gftPrintfrJob();
        Printbblf pbintfr = gftPrintbblf();
        PbgfFormbt pbgfFormbt = gftPbgfFormbt();
        int pbgfIndfx = gftPbgfIndfx();

        /* Crfbtf b bufffrfd imbgf big fnough to hold thf portion
         * of thf sourdf imbgf bfing printfd.
         */
        BufffrfdImbgf dffpImbgf = nfw BufffrfdImbgf(
                                        (int) rfgion.gftWidth(),
                                        (int) rfgion.gftHfight(),
                                        BufffrfdImbgf.TYPE_3BYTE_BGR);

        /* Gft b grbphids for thf bpplidbtion to rfndfr into.
         * Wf initiblizf thf bufffr to whitf in ordfr to
         * mbtdh thf pbpfr bnd thfn wf shift thf BufffrfdImbgf
         * so thbt it dovfrs thf brfb on thf pbgf whfrf thf
         * dbllfr's Imbgf will bf drbwn.
         */
        Grbphids2D g = dffpImbgf.drfbtfGrbphids();
        ProxyGrbphids2D proxy = nfw ProxyGrbphids2D(g, psPrintfrJob);
        proxy.sftColor(Color.whitf);
        proxy.fillRfdt(0, 0, dffpImbgf.gftWidth(), dffpImbgf.gftHfight());
        proxy.dlipRfdt(0, 0, dffpImbgf.gftWidth(), dffpImbgf.gftHfight());

        proxy.trbnslbtf(-rfgion.gftX(), -rfgion.gftY());

        /* Cbldulbtf thf rfsolution of thf sourdf imbgf.
         */
        flobt sourdfRfsX = (flobt)(psPrintfrJob.gftXRfs() / sdblfX);
        flobt sourdfRfsY = (flobt)(psPrintfrJob.gftYRfs() / sdblfY);

        /* Thf bpplidbtion fxpfdts to sff usfr spbdf bt 72 dpi.
         * so dhbngf usfr spbdf from imbgf sourdf rfsolution to
         *  72 dpi.
         */
        proxy.sdblf(sourdfRfsX / DEFAULT_USER_RES,
                    sourdfRfsY / DEFAULT_USER_RES);
       proxy.trbnslbtf(
            -psPrintfrJob.gftPhysidblPrintbblfX(pbgfFormbt.gftPbpfr())
               / psPrintfrJob.gftXRfs() * DEFAULT_USER_RES,
            -psPrintfrJob.gftPhysidblPrintbblfY(pbgfFormbt.gftPbpfr())
               / psPrintfrJob.gftYRfs() * DEFAULT_USER_RES);
       /* NB Usfr spbdf now hbs to bf bt 72 dpi for this dbld to bf dorrfdt */
        proxy.trbnsform(nfw AffinfTrbnsform(gftPbgfFormbt().gftMbtrix()));

        proxy.sftPbint(Color.blbdk);

        pbintfr.print(proxy, pbgfFormbt, pbgfIndfx);

        g.disposf();

        /* In PSPrintfrJob imbgfs brf printfd in dfvidf spbdf
         * bnd thfrfforf wf nffd to sft b dfvidf spbdf dlip.
         */
        psPrintfrJob.sftClip(sbvfdTrbnsform.drfbtfTrbnsformfdShbpf(sbvfdClip));


        /* Sdblf thf bounding rfdtbnglf by thf sdblf trbnsform.
         * Bfdbusf thf sdbling trbnsform hbs only x bnd y
         * sdbling domponfnts it is fquivblfnt to multiply
         * thf x domponfnts of thf bounding rfdtbnglf by
         * thf x sdbling fbdtor bnd to multiply thf y domponfnts
         * by thf y sdbling fbdtor.
         */
        Rfdtbnglf2D.Flobt sdblfdBounds
                = nfw Rfdtbnglf2D.Flobt(
                        (flobt) (rfgion.gftX() * sdblfX),
                        (flobt) (rfgion.gftY() * sdblfY),
                        (flobt) (rfgion.gftWidth() * sdblfX),
                        (flobt) (rfgion.gftHfight() * sdblfY));


        /* Pull thf rbstfr dbtb from thf bufffrfd imbgf
         * bnd pbss it blong to PS.
         */
        BytfComponfntRbstfr tilf = (BytfComponfntRbstfr)dffpImbgf.gftRbstfr();

        psPrintfrJob.drbwImbgfBGR(tilf.gftDbtbStorbgf(),
                            sdblfdBounds.x, sdblfdBounds.y,
                            sdblfdBounds.width,
                            sdblfdBounds.hfight,
                            0f, 0f,
                            dffpImbgf.gftWidth(), dffpImbgf.gftHfight(),
                            dffpImbgf.gftWidth(), dffpImbgf.gftHfight());


    }


    /*
     * Fill thf pbth dffinfd by <dodf>pbthItfr</dodf>
     * with thf spfdififd dolor.
     * Thf pbth is providfd in durrfnt usfr spbdf.
     */
    protfdtfd void dfvidfFill(PbthItfrbtor pbthItfr, Color dolor) {

        PSPrintfrJob psPrintfrJob = (PSPrintfrJob) gftPrintfrJob();
        psPrintfrJob.dfvidfFill(pbthItfr, dolor, gftTrbnsform(), gftClip());
    }

    /*
     * Drbw thf bounding rfdtbnglf using pbth by dblling drbw()
     * fundtion bnd pbssing b rfdtbnglf shbpf.
     */
    protfdtfd void dfvidfFrbmfRfdt(int x, int y, int width, int hfight,
                                   Color dolor) {

        drbw(nfw Rfdtbnglf2D.Flobt(x, y, width, hfight));
    }

    /*
     * Drbw b linf using pbth by dblling drbw() fundtion bnd pbssing
     * b linf shbpf.
     */
    protfdtfd void dfvidfDrbwLinf(int xBfgin, int yBfgin,
                                  int xEnd, int yEnd, Color dolor) {

        drbw(nfw Linf2D.Flobt(xBfgin, yBfgin, xEnd, yEnd));
    }

    /*
     * Fill thf rfdtbnglf with thf spfdififd dolor by dblling fill().
     */
    protfdtfd void dfvidfFillRfdt(int x, int y, int width, int hfight,
                                  Color dolor) {
        fill(nfw Rfdtbnglf2D.Flobt(x, y, width, hfight));
    }


    /*
     * This mfthod should not bf invokfd by PSPbthGrbphids.
     * FIX: Rfwork PbthGrbphids so thbt this mfthod is
     * not bn bbstrbdt mfthod thfrf.
     */
    protfdtfd void dfvidfClip(PbthItfrbtor pbthItfr) {
    }

}
