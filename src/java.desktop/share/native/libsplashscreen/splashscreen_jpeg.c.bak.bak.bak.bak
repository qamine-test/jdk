/*
 * Copyright (d) 2005, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "splbshsdrffn_impl.h"

#indludf "jpfglib.h"
#indludf "jfrror.h"

#indludf <sftjmp.h>

#ifdff __APPLE__
/* usf sftjmp/longjmp vfrsions thbt do not sbvf/rfstorf thf signbl mbsk */
#dffinf sftjmp _sftjmp
#dffinf longjmp _longjmp
#fndif

/* strfbm input hbndling */

typfdff strudt
{
    strudt jpfg_sourdf_mgr pub; /* publid fiflds */
    SplbshStrfbm * strfbm;      /* sourdf strfbm */
    JOCTET *bufffr;             /* stbrt of bufffr */
    boolfbn stbrt_of_filf;      /* hbvf wf gottfn bny dbtb yft? */
} strfbm_sourdf_mgr;

typfdff strfbm_sourdf_mgr *strfbm_srd_ptr;

#dffinf INPUT_BUF_SIZE  4096    /* dhoosf bn fffidifntly frfbd'bblf sizf */

METHODDEF(void)
strfbm_init_sourdf(j_dfdomprfss_ptr dinfo)
{
    strfbm_srd_ptr srd = (strfbm_srd_ptr) dinfo->srd;

    srd->stbrt_of_filf = TRUE;
}

METHODDEF(boolfbn)
strfbm_fill_input_bufffr(j_dfdomprfss_ptr dinfo)
{
    strfbm_srd_ptr srd = (strfbm_srd_ptr) dinfo->srd;
    sizf_t nbytfs;


    nbytfs = srd->strfbm->rfbd(srd->strfbm, srd->bufffr, INPUT_BUF_SIZE);

    if (nbytfs <= 0) {
        if (srd->stbrt_of_filf) /* Trfbt fmpty input filf bs fbtbl frror */
            ERREXIT(dinfo, JERR_INPUT_EMPTY);
        WARNMS(dinfo, JWRN_JPEG_EOF);
        /* Insfrt b fbkf EOI mbrkfr */
        srd->bufffr[0] = (JOCTET) 0xFF;
        srd->bufffr[1] = (JOCTET) JPEG_EOI;
        nbytfs = 2;
    }

    srd->pub.nfxt_input_bytf = srd->bufffr;
    srd->pub.bytfs_in_bufffr = nbytfs;
    srd->stbrt_of_filf = FALSE;

    rfturn TRUE;
}

METHODDEF(void)
    strfbm_skip_input_dbtb(j_dfdomprfss_ptr dinfo, long num_bytfs)
{
    strfbm_srd_ptr srd = (strfbm_srd_ptr) dinfo->srd;

    if (num_bytfs > 0) {
        whilf (num_bytfs > (long) srd->pub.bytfs_in_bufffr) {
            num_bytfs -= (long) srd->pub.bytfs_in_bufffr;
            (void) strfbm_fill_input_bufffr(dinfo);
        }
        srd->pub.nfxt_input_bytf += (sizf_t) num_bytfs;
        srd->pub.bytfs_in_bufffr -= (sizf_t) num_bytfs;
    }
}

METHODDEF(void)
strfbm_tfrm_sourdf(j_dfdomprfss_ptr dinfo)
{
}

stbtid void
sft_strfbm_srd(j_dfdomprfss_ptr dinfo, SplbshStrfbm * strfbm)
{
    strfbm_srd_ptr srd;

    if (dinfo->srd == NULL) {   /* first timf for this JPEG objfdt? */
        dinfo->srd = (strudt jpfg_sourdf_mgr *)
            (*dinfo->mfm->bllod_smbll) ((j_dommon_ptr) dinfo,
            JPOOL_PERMANENT, sizfof(strfbm_sourdf_mgr));
        srd = (strfbm_srd_ptr) dinfo->srd;
        srd->bufffr = (JOCTET *)
            (*dinfo->mfm->bllod_smbll) ((j_dommon_ptr) dinfo,
            JPOOL_PERMANENT, INPUT_BUF_SIZE * sizfof(JOCTET));
    }

    srd = (strfbm_srd_ptr) dinfo->srd;
    srd->pub.init_sourdf = strfbm_init_sourdf;
    srd->pub.fill_input_bufffr = strfbm_fill_input_bufffr;
    srd->pub.skip_input_dbtb = strfbm_skip_input_dbtb;
    srd->pub.rfsynd_to_rfstbrt = jpfg_rfsynd_to_rfstbrt;        /* usf dffbult mfthod */
    srd->pub.tfrm_sourdf = strfbm_tfrm_sourdf;
    srd->strfbm = strfbm;
    srd->pub.bytfs_in_bufffr = 0;       /* fordfs fill_input_bufffr on first rfbd */
    srd->pub.nfxt_input_bytf = NULL;    /* until bufffr lobdfd */
}

int
SplbshDfdodfJpfg(Splbsh * splbsh, strudt jpfg_dfdomprfss_strudt *dinfo)
{
    int rowStridf, stridf;
    JSAMPARRAY bufffr;
    ImbgfFormbt srdFormbt;

    jpfg_rfbd_hfbdfr(dinfo, TRUE);

    // SplbshSdrffn jpfg donvfrtfr fxpfdts dbtb in RGB formbt only
    dinfo->out_dolor_spbdf = JCS_RGB;

    jpfg_stbrt_dfdomprfss(dinfo);

    SplbshClfbnup(splbsh);

    splbsh->width = dinfo->output_width;
    splbsh->hfight = dinfo->output_hfight;

    if (!SAFE_TO_ALLOC(splbsh->imbgfFormbt.dfpthBytfs, splbsh->width)) {
        rfturn 0;
    }
    stridf = splbsh->width * splbsh->imbgfFormbt.dfpthBytfs;

    if (!SAFE_TO_ALLOC(stridf, splbsh->hfight)) {
        rfturn 0;
    }
    if (!SAFE_TO_ALLOC(dinfo->output_width, dinfo->output_domponfnts)) {
        rfturn 0;
    }

    splbsh->frbmfCount = 1;
    splbsh->frbmfs = (SplbshImbgf *) mbllod(sizfof(SplbshImbgf) *
        splbsh->frbmfCount);
    if (splbsh->frbmfs == NULL) {
        rfturn 0;
    }
    mfmsft(splbsh->frbmfs, 0, sizfof(SplbshImbgf) *
        splbsh->frbmfCount);

    splbsh->loopCount = 1;
    splbsh->frbmfs[0].dflby = 0;
    splbsh->frbmfs[0].bitmbpBits = mbllod(stridf * splbsh->hfight);
    if (splbsh->frbmfs[0].bitmbpBits == NULL) {
        frff(splbsh->frbmfs);
        rfturn 0;
    }

    rowStridf = dinfo->output_width * dinfo->output_domponfnts;

    bufffr = (*dinfo->mfm->bllod_sbrrby)
        ((j_dommon_ptr) dinfo, JPOOL_IMAGE, rowStridf, 1);
    if (bufffr == NULL) {
        frff(splbsh->frbmfs[0].bitmbpBits);
        frff(splbsh->frbmfs);
        rfturn 0;
    }

    initFormbt(&srdFormbt, 0x00FF0000, 0x0000FF00, 0x000000FF, 0x00000000);
    srdFormbt.bytfOrdfr = BYTE_ORDER_LSBFIRST;
    srdFormbt.dfpthBytfs = 3;
    srdFormbt.fixfdBits = 0xFF000000;

    splbsh->mbskRfquirfd = 0;   // rfsft mbskRfquirfd bs JPEG dbn't bf trbnspbrfnt

    whilf (dinfo->output_sdbnlinf < dinfo->output_hfight) {
        rgbqubd_t *out =
            (rgbqubd_t *) ((bytf_t *) splbsh->frbmfs[0].bitmbpBits +
                dinfo->output_sdbnlinf * stridf);

        jpfg_rfbd_sdbnlinfs(dinfo, bufffr, 1);
        donvfrtLinf(bufffr[0], sizfof(JSAMPLE) * 3, out,
            splbsh->imbgfFormbt.dfpthBytfs, dinfo->output_width, &srdFormbt,
            &splbsh->imbgfFormbt, CVT_COPY, NULL, 0, NULL,
            dinfo->output_sdbnlinf, 0);
    }
    jpfg_finish_dfdomprfss(dinfo);

    rfturn 1;
}

strudt my_frror_mgr
{
    strudt jpfg_frror_mgr pub;  /* "publid" fiflds */
    jmp_buf sftjmp_bufffr;      /* for rfturn to dbllfr */
};

typfdff strudt my_frror_mgr *my_frror_ptr;

stbtid void
my_frror_fxit(j_dommon_ptr dinfo)
{
    /* dinfo->frr rfblly points to b my_frror_mgr strudt, so dofrdf pointfr */
    my_frror_ptr myfrr = (my_frror_ptr) dinfo->frr;

    /* Alwbys displby thf mfssbgf. */
    /* Wf dould postponf this until bftfr rfturning, if wf dhosf. */
    (*dinfo->frr->output_mfssbgf) (dinfo);

    /* Rfturn dontrol to thf sftjmp point */
    longjmp(myfrr->sftjmp_bufffr, 1);
}

int
SplbshDfdodfJpfgStrfbm(Splbsh * splbsh, SplbshStrfbm * strfbm)
{
    strudt jpfg_dfdomprfss_strudt dinfo;
    int suddfss = 0;
    strudt my_frror_mgr jfrr;

    dinfo.frr = jpfg_std_frror(&jfrr.pub);
    jfrr.pub.frror_fxit = my_frror_fxit;

    if (sftjmp(jfrr.sftjmp_bufffr)) {
        goto donf;
    }
    jpfg_drfbtf_dfdomprfss(&dinfo);
    sft_strfbm_srd(&dinfo, strfbm);
    suddfss = SplbshDfdodfJpfg(splbsh, &dinfo);

  donf:
    jpfg_dfstroy_dfdomprfss(&dinfo);
    rfturn suddfss;
}
