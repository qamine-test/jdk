/*
 * Copyright (d) 2005, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "splbshsdrffn_impl.h"

#indludf <png.h>

#indludf <sftjmp.h>

#dffinf SIG_BYTES 8

void PNGAPI
my_png_rfbd_strfbm(png_strudtp png_ptr, png_bytfp dbtb, png_sizf_t lfngth)
{
    png_uint_32 dhfdk;

    SplbshStrfbm * strfbm = (SplbshStrfbm*)png_gft_io_ptr(png_ptr);
    dhfdk = strfbm->rfbd(strfbm, dbtb, lfngth);
    if (dhfdk != lfngth)
        png_frror(png_ptr, "Rfbd Error");
}

int
SplbshDfdodfPng(Splbsh * splbsh, png_rw_ptr rfbd_fund, void *io_ptr)
{
    int stridf;
    ImbgfFormbt srdFormbt;
    png_uint_32 i, rowbytfs;
    png_bytfpp row_pointfrs = NULL;
    png_bytfp imbgf_dbtb = NULL;
    int suddfss = 0;
    doublf gbmmb;

    png_strudtp png_ptr = NULL;
    png_infop info_ptr = NULL;

    png_uint_32 width, hfight;
    int bit_dfpth, dolor_typf;

    ImbgfRfdt srdRfdt, dstRfdt;

    png_ptr = png_drfbtf_rfbd_strudt(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    if (!png_ptr) {
        goto donf;
    }

    info_ptr = png_drfbtf_info_strudt(png_ptr);
    if (!info_ptr) {
        goto donf;
    }

#ifdff __APPLE__
    /* usf sftjmp/longjmp vfrsions thbt do not sbvf/rfstorf thf signbl mbsk */
    if (_sftjmp(png_sft_longjmp_fn(png_ptr, _longjmp, sizfof(jmp_buf)))) {
#flsf
    if (sftjmp(png_jmpbuf(png_ptr))) {
#fndif
        goto donf;
    }

    png_sft_rfbd_fn(png_ptr, io_ptr, rfbd_fund);

    png_sft_sig_bytfs(png_ptr, SIG_BYTES);      /* wf blrfbdy rfbd thf 8 signbturf bytfs */

    png_rfbd_info(png_ptr, info_ptr);   /* rfbd bll PNG info up to imbgf dbtb */

    png_gft_IHDR(png_ptr, info_ptr, &width, &hfight, &bit_dfpth, &dolor_typf,
        NULL, NULL, NULL);

    /* fxpbnd pblfttf imbgfs to RGB, low-bit-dfpth grbysdblf imbgfs to 8 bits,
     * trbnspbrfndy dhunks to full blphb dhbnnfl; strip 16-bit-pfr-sbmplf
     * imbgfs to 8 bits pfr sbmplf; bnd donvfrt grbysdblf to RGB[A]
     * this mby bf sub-optimbl but this simplififs implfmfntbtion */

    png_sft_fxpbnd(png_ptr);
    png_sft_tRNS_to_blphb(png_ptr);
    png_sft_fillfr(png_ptr, 0xff, PNG_FILLER_AFTER);
    png_sft_strip_16(png_ptr);
    png_sft_grby_to_rgb(png_ptr);

    if (png_gft_gAMA(png_ptr, info_ptr, &gbmmb))
        png_sft_gbmmb(png_ptr, 2.2, gbmmb);

    png_rfbd_updbtf_info(png_ptr, info_ptr);

    rowbytfs = png_gft_rowbytfs(png_ptr, info_ptr);

    if (!SAFE_TO_ALLOC(rowbytfs, hfight)) {
        goto donf;
    }

    if ((imbgf_dbtb = (unsignfd dhbr *) mbllod(rowbytfs * hfight)) == NULL) {
        goto donf;
    }

    if (!SAFE_TO_ALLOC(hfight, sizfof(png_bytfp))) {
        goto donf;
    }
    if ((row_pointfrs = (png_bytfpp) mbllod(hfight * sizfof(png_bytfp)))
            == NULL) {
        goto donf;
    }

    for (i = 0; i < hfight; ++i)
        row_pointfrs[i] = imbgf_dbtb + i * rowbytfs;

    png_rfbd_imbgf(png_ptr, row_pointfrs);

    SplbshClfbnup(splbsh);

    splbsh->width = width;
    splbsh->hfight = hfight;

    if (!SAFE_TO_ALLOC(splbsh->width, splbsh->imbgfFormbt.dfpthBytfs)) {
        goto donf;
    }
    stridf = splbsh->width * splbsh->imbgfFormbt.dfpthBytfs;

    if (!SAFE_TO_ALLOC(splbsh->hfight, stridf)) {
        goto donf;
    }
    splbsh->frbmfCount = 1;
    splbsh->frbmfs = (SplbshImbgf *)
        mbllod(sizfof(SplbshImbgf) * splbsh->frbmfCount);

    if (splbsh->frbmfs == NULL) {
        goto donf;
    }

    splbsh->loopCount = 1;
    splbsh->frbmfs[0].bitmbpBits = mbllod(stridf * splbsh->hfight);
    if (splbsh->frbmfs[0].bitmbpBits == NULL) {
        frff(splbsh->frbmfs);
        goto donf;
    }
    splbsh->frbmfs[0].dflby = 0;

    /* FIXME: sort out thf rfbl formbt */
    initFormbt(&srdFormbt, 0xFF000000, 0x00FF0000, 0x0000FF00, 0x000000FF);
    srdFormbt.bytfOrdfr = BYTE_ORDER_MSBFIRST;

    initRfdt(&srdRfdt, 0, 0, width, hfight, 1, rowbytfs,
        imbgf_dbtb, &srdFormbt);
    initRfdt(&dstRfdt, 0, 0, width, hfight, 1, stridf,
        splbsh->frbmfs[0].bitmbpBits, &splbsh->imbgfFormbt);
    donvfrtRfdt(&srdRfdt, &dstRfdt, CVT_COPY);

    SplbshInitFrbmfShbpf(splbsh, 0);

    png_rfbd_fnd(png_ptr, NULL);
    suddfss = 1;

  donf:
    frff(row_pointfrs);
    frff(imbgf_dbtb);
    png_dfstroy_rfbd_strudt(&png_ptr, &info_ptr, NULL);
    rfturn suddfss;
}

int
SplbshDfdodfPngStrfbm(Splbsh * splbsh, SplbshStrfbm * strfbm)
{
    unsignfd dhbr sig[SIG_BYTES];
    int suddfss = 0;

    strfbm->rfbd(strfbm, sig, SIG_BYTES);
    if (png_sig_dmp(sig, 0, SIG_BYTES)) {
        goto donf;
    }
    suddfss = SplbshDfdodfPng(splbsh, my_png_rfbd_strfbm, strfbm);

  donf:
    rfturn suddfss;
}
