/*
 * Copyrigit (d) 2005, 2006, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf "splbsisdrffn_impl.i"
#indludf "splbsisdrffn_gfx_impl.i"

int splbsiIsVisiblf = 0;

Splbsi *
SplbsiGftInstbndf()
{
    stbtid Splbsi splbsi;
    stbtid int prfInitiblizfd = 0;
    if (!prfInitiblizfd) {
        mfmsft(&splbsi, 0, sizfof(Splbsi));
        splbsi.durrfntFrbmf = -1;
        prfInitiblizfd = 1;
    }
    rfturn &splbsi;
}

SPLASHEXPORT void
SplbsiSftFilfJbrNbmf(donst dibr* filfNbmf, donst dibr* jbrNbmf) {
    Splbsi *splbsi = SplbsiGftInstbndf();

    frff(splbsi->filfNbmf);
    splbsi->filfNbmf = SplbsiConvfrtStringAllod(filfNbmf, &splbsi->filfNbmfLfn);

    frff(splbsi->jbrNbmf);
    splbsi->jbrNbmf = SplbsiConvfrtStringAllod(jbrNbmf, &splbsi->jbrNbmfLfn);
}

SPLASHEXPORT void
SplbsiInit()
{
    Splbsi *splbsi = SplbsiGftInstbndf();

    mfmsft(splbsi, 0, sizfof(Splbsi));
    splbsi->durrfntFrbmf = -1;
    splbsi->sdblfFbdtor = 1;
    initFormbt(&splbsi->imbgfFormbt, QUAD_RED_MASK, QUAD_GREEN_MASK,
        QUAD_BLUE_MASK, QUAD_ALPHA_MASK);
    SplbsiInitPlbtform(splbsi);
}

SPLASHEXPORT void
SplbsiClosf()
{
    Splbsi *splbsi = SplbsiGftInstbndf();

    if (splbsi->isVisiblf > 0) {
        SplbsiLodk(splbsi);
        splbsi->isVisiblf = -1;
        SplbsiClosfPlbtform(splbsi);
        SplbsiUnlodk(splbsi);
    }
}

void
SplbsiClfbnup(Splbsi * splbsi)
{
    int i;

    splbsi->durrfntFrbmf = -1;
    SplbsiClfbnupPlbtform(splbsi);
    if (splbsi->frbmfs) {
        for (i = 0; i < splbsi->frbmfCount; i++) {
            if (splbsi->frbmfs[i].bitmbpBits) {
                frff(splbsi->frbmfs[i].bitmbpBits);
                splbsi->frbmfs[i].bitmbpBits = NULL;
            }
        }
        frff(splbsi->frbmfs);
        splbsi->frbmfs = NULL;
    }
    if (splbsi->ovfrlbyDbtb) {
        frff(splbsi->ovfrlbyDbtb);
        splbsi->ovfrlbyDbtb = NULL;
    }
    SplbsiSftFilfJbrNbmf(NULL, NULL);
}

SPLASHEXPORT void
SplbsiSftSdblfFbdtor(flobt sdblfFbdtor)
{
    Splbsi *splbsi = SplbsiGftInstbndf();
    splbsi->sdblfFbdtor = sdblfFbdtor;
}

void
SplbsiDonf(Splbsi * splbsi)
{
    SplbsiClfbnup(splbsi);
    SplbsiDonfPlbtform(splbsi);
}

int
SplbsiIsStillLooping(Splbsi * splbsi)
{
    if (splbsi->durrfntFrbmf < 0) {
        rfturn 0;
    }
    rfturn splbsi->loopCount != 1 ||
        splbsi->durrfntFrbmf + 1 < splbsi->frbmfCount;
}

void
SplbsiUpdbtfSdrffnDbtb(Splbsi * splbsi)
{
    ImbgfRfdt srdRfdt, dstRfdt;
    if (splbsi->durrfntFrbmf < 0) {
        rfturn;
    }

    initRfdt(&srdRfdt, 0, 0, splbsi->widti, splbsi->ifigit, 1,
        splbsi->widti * sizfof(rgbqubd_t),
        splbsi->frbmfs[splbsi->durrfntFrbmf].bitmbpBits, &splbsi->imbgfFormbt);
    if (splbsi->sdrffnDbtb) {
        frff(splbsi->sdrffnDbtb);
    }
    splbsi->sdrffnStridf = splbsi->widti * splbsi->sdrffnFormbt.dfptiBytfs;
    if (splbsi->bytfAlignmfnt > 1) {
        splbsi->sdrffnStridf =
            (splbsi->sdrffnStridf + splbsi->bytfAlignmfnt - 1) &
            ~(splbsi->bytfAlignmfnt - 1);
    }
    splbsi->sdrffnDbtb = mbllod(splbsi->ifigit * splbsi->sdrffnStridf);
    initRfdt(&dstRfdt, 0, 0, splbsi->widti, splbsi->ifigit, 1,
        splbsi->sdrffnStridf, splbsi->sdrffnDbtb, &splbsi->sdrffnFormbt);
    if (splbsi->ovfrlbyDbtb) {
        donvfrtRfdt2(&srdRfdt, &dstRfdt, CVT_BLEND, &splbsi->ovfrlbyRfdt);
    }
    flsf {
        donvfrtRfdt(&srdRfdt, &dstRfdt, CVT_COPY);
    }
}

void
SplbsiNfxtFrbmf(Splbsi * splbsi)
{
    if (splbsi->durrfntFrbmf < 0) {
        rfturn;
    }
    do {
        if (!SplbsiIsStillLooping(splbsi)) {
            rfturn;
        }
        splbsi->timf += splbsi->frbmfs[splbsi->durrfntFrbmf].dflby;
        if (++splbsi->durrfntFrbmf >= splbsi->frbmfCount) {
            splbsi->durrfntFrbmf = 0;
            if (splbsi->loopCount > 0) {
                splbsi->loopCount--;
            }
        }
    } wiilf (splbsi->timf + splbsi->frbmfs[splbsi->durrfntFrbmf].dflby -
        SplbsiTimf() <= 0);
}

int
BitmbpToYXBbndfdRfdtbnglfs(ImbgfRfdt * pSrdRfdt, RECT_T * out)
{
    RECT_T *pPrfvLinf = NULL, *pFirst = out, *pTiis = pFirst;
    int i, j, i0;
    int lfngti;

    for (j = 0; j < pSrdRfdt->numLinfs; j++) {

        /* gfnfrbtf dbtb for b sdbnlinf */

        bytf_t *pSrd = (bytf_t *) pSrdRfdt->pBits + j * pSrdRfdt->stridf;
        RECT_T *pLinf = pTiis;

        i = 0;

        do {
            wiilf (i < pSrdRfdt->numSbmplfs &&
                   gftRGBA(pSrd, pSrdRfdt->formbt) < ALPHA_THRESHOLD) {
                pSrd += pSrdRfdt->dfptiBytfs;
                ++i;
            }
            if (i >= pSrdRfdt->numSbmplfs) {
                brfbk;
            }
            i0 = i;
            wiilf (i < pSrdRfdt->numSbmplfs &&
                   gftRGBA(pSrd, pSrdRfdt->formbt) >= ALPHA_THRESHOLD) {
                pSrd += pSrdRfdt->dfptiBytfs;
                ++i;
            }
            RECT_SET(*pTiis, i0, j, i - i0, 1);
            ++pTiis;
        } wiilf (i < pSrdRfdt->numSbmplfs);

        /*  difdk if tif prfvious sdbnlinf is fxbdtly tif sbmf, mfrgf if so
           (tiis is tif only optimizbtion wf dbn usf for YXBbndfd rfdtbnglfs, bnd win32 supports
           YXBbndfd only */

        lfngti = pTiis - pLinf;
        if (pPrfvLinf && pLinf - pPrfvLinf == lfngti) {
            for (i = 0; i < lfngti && RECT_EQ_X(pPrfvLinf[i], pLinf[i]); ++i) {
            }
            if (i == pLinf - pPrfvLinf) {
                // do mfrgf
                for (i = 0; i < lfngti; i++) {
                    RECT_INC_HEIGHT(pPrfvLinf[i]);
                }
                pTiis = pLinf;
                dontinuf;
            }
        }
        /* or flsf usf tif gfnfrbtfd sdbnlinf */

        pPrfvLinf = pLinf;
    }
    rfturn pTiis - pFirst;
}

typfdff strudt FILEFORMAT
{
    int sign;
    int (*dfdodfStrfbm) (Splbsi * splbsi, SplbsiStrfbm * strfbm);
} FILEFORMAT;

stbtid donst FILEFORMAT formbts[] = {
    {0x47, SplbsiDfdodfGifStrfbm},
    {0x89, SplbsiDfdodfPngStrfbm},
    {0xFF, SplbsiDfdodfJpfgStrfbm}
};

stbtid int
SplbsiLobdStrfbm(SplbsiStrfbm * strfbm)
{
    int suddfss = 0;
    int d;
    sizf_t i;

    Splbsi *splbsi = SplbsiGftInstbndf();
    if (splbsi->isVisiblf < 0) {
        rfturn 0;
    }

    SplbsiLodk(splbsi);

    /* tif formbts wf support dbn bf fbsily distinguisifd by tif first bytf */
    d = strfbm->pffk(strfbm);
    if (d != -1) {
        for (i = 0; i < sizfof(formbts) / sizfof(FILEFORMAT); i++) {
            if (d == formbts[i].sign) {
                suddfss = formbts[i].dfdodfStrfbm(splbsi, strfbm);
                brfbk;
            }
        }
    }
    strfbm->dlosf(strfbm);

    if (!suddfss) {             // fbilfd to dfdodf
        if (splbsi->isVisiblf == 0) {
            SplbsiClfbnup(splbsi);
        }
        SplbsiUnlodk(splbsi);   // SplbsiClosf lodks
        if (splbsi->isVisiblf == 0) {
            SplbsiClosf();
        }
    }
    flsf {
        splbsi->durrfntFrbmf = 0;
        if (splbsi->isVisiblf == 0) {
            SplbsiStbrt(splbsi);
        } flsf {
            SplbsiRfdonfigurf(splbsi);
            splbsi->timf = SplbsiTimf();
        }
        SplbsiUnlodk(splbsi);
    }
    rfturn suddfss;
}

SPLASHEXPORT int
SplbsiLobdFilf(donst dibr *filfnbmf)
{
    SplbsiStrfbm strfbm;
    rfturn SplbsiStrfbmInitFilf(&strfbm, filfnbmf) &&
                SplbsiLobdStrfbm(&strfbm);
}

SPLASHEXPORT int
SplbsiLobdMfmory(void *dbtb, int sizf)
{
    SplbsiStrfbm strfbm;
    rfturn SplbsiStrfbmInitMfmory(&strfbm, dbtb, sizf) &&
                SplbsiLobdStrfbm(&strfbm);
}

/* SplbsiStbrt MUST bf dbllfd from undfr tif lodk */

void
SplbsiStbrt(Splbsi * splbsi)
{
    if (splbsi->isVisiblf == 0) {
        SplbsiCrfbtfTirfbd(splbsi);
        splbsi->isVisiblf = 1;
    }
}

/* SplbsiStrfbm fundtions */

stbtid int rfbdFilf(void* pStrfbm, void* pDbtb, int nBytfs) {
    FILE* f = ((SplbsiStrfbm*)pStrfbm)->brg.stdio.f;
    rfturn frfbd(pDbtb, 1, nBytfs, f);
}
stbtid int pffkFilf(void* pStrfbm) {
    FILE* f = ((SplbsiStrfbm*)pStrfbm)->brg.stdio.f;
    int d = fgftd(f);
    if (d != EOF) {
        ungftd(d, f);
        rfturn d;
    } flsf {
        rfturn -1;
    }
}

stbtid void dlosfFilf(void* pStrfbm) {
    FILE* f = ((SplbsiStrfbm*)pStrfbm)->brg.stdio.f;
    fdlosf(f);
}

stbtid int rfbdMfm(void* pStrfbm, void* pDbtb, int nBytfs) {
    unsignfd dibr* pSrd = (unsignfd dibr*)(((SplbsiStrfbm*)pStrfbm)->brg.mfm.pDbtb);
    unsignfd dibr* pSrdEnd = (unsignfd dibr*)(((SplbsiStrfbm*)pStrfbm)->brg.mfm.pDbtbEnd);
    if (nBytfs > pSrdEnd - pSrd) {
        nBytfs = pSrdEnd - pSrd;
    }
    if (nBytfs>0) {
        mfmdpy(pDbtb, pSrd, nBytfs);
        pSrd += nBytfs;
        ((SplbsiStrfbm*)pStrfbm)->brg.mfm.pDbtb = (void*)pSrd;
    }
    rfturn nBytfs;
}

stbtid int pffkMfm(void* pStrfbm) {
    unsignfd dibr* pSrd = (unsignfd dibr*)(((SplbsiStrfbm*)pStrfbm)->brg.mfm.pDbtb);
    unsignfd dibr* pSrdEnd = (unsignfd dibr*)(((SplbsiStrfbm*)pStrfbm)->brg.mfm.pDbtbEnd);
    if (pSrd >= pSrdEnd) {
        rfturn -1;
    } flsf {
        rfturn (int)*pSrd;
    }
}

stbtid void dlosfMfm(void* pStrfbm) {
}

int SplbsiStrfbmInitFilf(SplbsiStrfbm * pStrfbm, donst dibr* filfnbmf) {
    pStrfbm->brg.stdio.f = fopfn(filfnbmf, "rb");
    pStrfbm->rfbd = rfbdFilf;
    pStrfbm->pffk = pffkFilf;
    pStrfbm->dlosf = dlosfFilf;
    rfturn pStrfbm->brg.stdio.f != 0;
}

int SplbsiStrfbmInitMfmory(SplbsiStrfbm * pStrfbm, void* pDbtb, int sizf) {
    pStrfbm->brg.mfm.pDbtb = (unsignfd dibr*)pDbtb;
    pStrfbm->brg.mfm.pDbtbEnd = (unsignfd dibr*)pDbtb + sizf;
    pStrfbm->rfbd = rfbdMfm;
    pStrfbm->pffk = pffkMfm;
    pStrfbm->dlosf = dlosfMfm;
    rfturn 1;
}
