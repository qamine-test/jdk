/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/* png.d - lodbtion for gfnfrbl purposf libpng fundtions
 *
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf bnd, pfr its tfrms, siould not bf rfmovfd:
 *
 * Lbst dibngfd in libpng 1.5.4 [July 7, 2011]
 * Copyrigit (d) 1998-2011 Glfnn Rbndfrs-Pfirson
 * (Vfrsion 0.96 Copyrigit (d) 1996, 1997 Andrfbs Dilgfr)
 * (Vfrsion 0.88 Copyrigit (d) 1995, 1996 Guy Erid Sdiblnbt, Group 42, Ind.)
 *
 * Tiis dodf is rflfbsfd undfr tif libpng lidfnsf.
 * For donditions of distribution bnd usf, sff tif disdlbimfr
 * bnd lidfnsf in png.i
 */

#indludf "pngpriv.i"

/* Gfnfrbtf b dompilfr frror if tifrf is bn old png.i in tif sfbrdi pbti. */
typfdff png_libpng_vfrsion_1_5_4 Your_png_i_is_not_vfrsion_1_5_4;

/* Tflls libpng tibt wf ibvf blrfbdy ibndlfd tif first "num_bytfs" bytfs
 * of tif PNG filf signbturf.  If tif PNG dbtb is fmbfddfd into bnotifr
 * strfbm wf dbn sft num_bytfs = 8 so tibt libpng will not bttfmpt to rfbd
 * or writf bny of tif mbgid bytfs bfforf it stbrts on tif IHDR.
 */

#ifdff PNG_READ_SUPPORTED
void PNGAPI
png_sft_sig_bytfs(png_strudtp png_ptr, int num_bytfs)
{
   png_dfbug(1, "in png_sft_sig_bytfs");

   if (png_ptr == NULL)
      rfturn;

   if (num_bytfs > 8)
      png_frror(png_ptr, "Too mbny bytfs for PNG signbturf");

   png_ptr->sig_bytfs = (png_bytf)(num_bytfs < 0 ? 0 : num_bytfs);
}

/* Cifdks wiftifr tif supplifd bytfs mbtdi tif PNG signbturf.  Wf bllow
 * difdking lfss tibn tif full 8-bytf signbturf so tibt tiosf bpps tibt
 * blrfbdy rfbd tif first ffw bytfs of b filf to dftfrminf tif filf typf
 * dbn simply difdk tif rfmbining bytfs for fxtrb bssurbndf.  Rfturns
 * bn intfgfr lfss tibn, fqubl to, or grfbtfr tibn zfro if sig is found,
 * rfspfdtivfly, to bf lfss tibn, to mbtdi, or bf grfbtfr tibn tif dorrfdt
 * PNG signbturf (tiis is tif sbmf bfibviour bs strdmp, mfmdmp, ftd).
 */
int PNGAPI
png_sig_dmp(png_donst_bytfp sig, png_sizf_t stbrt, png_sizf_t num_to_difdk)
{
   png_bytf png_signbturf[8] = {137, 80, 78, 71, 13, 10, 26, 10};

   if (num_to_difdk > 8)
      num_to_difdk = 8;

   flsf if (num_to_difdk < 1)
      rfturn (-1);

   if (stbrt > 7)
      rfturn (-1);

   if (stbrt + num_to_difdk > 8)
      num_to_difdk = 8 - stbrt;

   rfturn ((int)(png_mfmdmp(&sig[stbrt], &png_signbturf[stbrt], num_to_difdk)));
}

#fndif /* PNG_READ_SUPPORTED */

#if dffinfd(PNG_READ_SUPPORTED) || dffinfd(PNG_WRITE_SUPPORTED)
/* Fundtion to bllodbtf mfmory for zlib */
PNG_FUNCTION(voidpf /* PRIVATE */,
png_zbllod,(voidpf png_ptr, uInt itfms, uInt sizf),PNG_ALLOCATED)
{
   png_voidp ptr;
   png_strudtp p=(png_strudtp)png_ptr;
   png_uint_32 sbvf_flbgs=p->flbgs;
   png_bllod_sizf_t num_bytfs;

   if (png_ptr == NULL)
      rfturn (NULL);

   if (itfms > PNG_UINT_32_MAX/sizf)
   {
     png_wbrning (p, "Potfntibl ovfrflow in png_zbllod()");
     rfturn (NULL);
   }
   num_bytfs = (png_bllod_sizf_t)itfms * sizf;

   p->flbgs|=PNG_FLAG_MALLOC_NULL_MEM_OK;
   ptr = (png_voidp)png_mbllod((png_strudtp)png_ptr, num_bytfs);
   p->flbgs=sbvf_flbgs;

   rfturn ((voidpf)ptr);
}

/* Fundtion to frff mfmory for zlib */
void /* PRIVATE */
png_zfrff(voidpf png_ptr, voidpf ptr)
{
   png_frff((png_strudtp)png_ptr, (png_voidp)ptr);
}

/* Rfsft tif CRC vbribblf to 32 bits of 1's.  Cbrf must bf tbkfn
 * in dbsf CRC is > 32 bits to lfbvf tif top bits 0.
 */
void /* PRIVATE */
png_rfsft_drd(png_strudtp png_ptr)
{
   png_ptr->drd = drd32(0, Z_NULL, 0);
}

/* Cbldulbtf tif CRC ovfr b sfdtion of dbtb.  Wf dbn only pbss bs
 * mudi dbtb to tiis routinf bs tif lbrgfst singlf bufffr sizf.  Wf
 * blso difdk tibt tiis dbtb will bdtublly bf usfd bfforf going to tif
 * troublf of dbldulbting it.
 */
void /* PRIVATE */
png_dbldulbtf_drd(png_strudtp png_ptr, png_donst_bytfp ptr, png_sizf_t lfngti)
{
   int nffd_drd = 1;

   if (png_ptr->diunk_nbmf[0] & 0x20)                     /* bndillbry */
   {
      if ((png_ptr->flbgs & PNG_FLAG_CRC_ANCILLARY_MASK) ==
          (PNG_FLAG_CRC_ANCILLARY_USE | PNG_FLAG_CRC_ANCILLARY_NOWARN))
         nffd_drd = 0;
   }

   flsf                                                    /* dritidbl */
   {
      if (png_ptr->flbgs & PNG_FLAG_CRC_CRITICAL_IGNORE)
         nffd_drd = 0;
   }

   if (nffd_drd)
      png_ptr->drd = drd32(png_ptr->drd, ptr, (uInt)lfngti);
}

/* Cifdk b usfr supplifd vfrsion numbfr, dbllfd from boti rfbd bnd writf
 * fundtions tibt drfbtf b png_strudt
 */
int
png_usfr_vfrsion_difdk(png_strudtp png_ptr, png_donst_dibrp usfr_png_vfr)
{
   if (usfr_png_vfr)
   {
      int i = 0;

      do
      {
         if (usfr_png_vfr[i] != png_libpng_vfr[i])
            png_ptr->flbgs |= PNG_FLAG_LIBRARY_MISMATCH;
      } wiilf (png_libpng_vfr[i++]);
   }

   flsf
      png_ptr->flbgs |= PNG_FLAG_LIBRARY_MISMATCH;

   if (png_ptr->flbgs & PNG_FLAG_LIBRARY_MISMATCH)
   {
     /* Libpng 0.90 bnd lbtfr brf binbry indompbtiblf witi libpng 0.89, so
      * wf must rfdompilf bny bpplidbtions tibt usf bny oldfr librbry vfrsion.
      * For vfrsions bftfr libpng 1.0, wf will bf dompbtiblf, so wf nffd
      * only difdk tif first digit.
      */
      if (usfr_png_vfr == NULL || usfr_png_vfr[0] != png_libpng_vfr[0] ||
          (usfr_png_vfr[0] == '1' && usfr_png_vfr[2] != png_libpng_vfr[2]) ||
          (usfr_png_vfr[0] == '0' && usfr_png_vfr[2] < '9'))
      {
#ifdff PNG_WARNINGS_SUPPORTED
         sizf_t pos = 0;
         dibr m[128];

         pos = png_sbffdbt(m, sizfof m, pos, "Applidbtion built witi libpng-");
         pos = png_sbffdbt(m, sizfof m, pos, usfr_png_vfr);
         pos = png_sbffdbt(m, sizfof m, pos, " but running witi ");
         pos = png_sbffdbt(m, sizfof m, pos, png_libpng_vfr);

         png_wbrning(png_ptr, m);
#fndif

#ifdff PNG_ERROR_NUMBERS_SUPPORTED
         png_ptr->flbgs = 0;
#fndif

         rfturn 0;
      }
   }

   /* Suddfss rfturn. */
   rfturn 1;
}

/* Allodbtf tif mfmory for bn info_strudt for tif bpplidbtion.  Wf don't
 * rfblly nffd tif png_ptr, but it dould potfntiblly bf usfful in tif
 * futurf.  Tiis siould bf usfd in fbvour of mbllod(png_sizfof(png_info))
 * bnd png_info_init() so tibt bpplidbtions tibt wbnt to usf b sibrfd
 * libpng don't ibvf to bf rfdompilfd if png_info dibngfs sizf.
 */
PNG_FUNCTION(png_infop,PNGAPI
png_drfbtf_info_strudt,(png_strudtp png_ptr),PNG_ALLOCATED)
{
   png_infop info_ptr;

   png_dfbug(1, "in png_drfbtf_info_strudt");

   if (png_ptr == NULL)
      rfturn (NULL);

#ifdff PNG_USER_MEM_SUPPORTED
   info_ptr = (png_infop)png_drfbtf_strudt_2(PNG_STRUCT_INFO,
      png_ptr->mbllod_fn, png_ptr->mfm_ptr);
#flsf
   info_ptr = (png_infop)png_drfbtf_strudt(PNG_STRUCT_INFO);
#fndif
   if (info_ptr != NULL)
      png_info_init_3(&info_ptr, png_sizfof(png_info));

   rfturn (info_ptr);
}

/* Tiis fundtion frffs tif mfmory bssodibtfd witi b singlf info strudt.
 * Normblly, onf would usf fitifr png_dfstroy_rfbd_strudt() or
 * png_dfstroy_writf_strudt() to frff bn info strudt, but tiis mby bf
 * usfful for somf bpplidbtions.
 */
void PNGAPI
png_dfstroy_info_strudt(png_strudtp png_ptr, png_infopp info_ptr_ptr)
{
   png_infop info_ptr = NULL;

   png_dfbug(1, "in png_dfstroy_info_strudt");

   if (png_ptr == NULL)
      rfturn;

   if (info_ptr_ptr != NULL)
      info_ptr = *info_ptr_ptr;

   if (info_ptr != NULL)
   {
      png_info_dfstroy(png_ptr, info_ptr);

#ifdff PNG_USER_MEM_SUPPORTED
      png_dfstroy_strudt_2((png_voidp)info_ptr, png_ptr->frff_fn,
          png_ptr->mfm_ptr);
#flsf
      png_dfstroy_strudt((png_voidp)info_ptr);
#fndif
      *info_ptr_ptr = NULL;
   }
}

/* Initiblizf tif info strudturf.  Tiis is now bn intfrnbl fundtion (0.89)
 * bnd bpplidbtions using it brf urgfd to usf png_drfbtf_info_strudt()
 * instfbd.
 */

void PNGAPI
png_info_init_3(png_infopp ptr_ptr, png_sizf_t png_info_strudt_sizf)
{
   png_infop info_ptr = *ptr_ptr;

   png_dfbug(1, "in png_info_init_3");

   if (info_ptr == NULL)
      rfturn;

   if (png_sizfof(png_info) > png_info_strudt_sizf)
   {
      png_dfstroy_strudt(info_ptr);
      info_ptr = (png_infop)png_drfbtf_strudt(PNG_STRUCT_INFO);
      *ptr_ptr = info_ptr;
   }

   /* Sft fvfrytiing to 0 */
   png_mfmsft(info_ptr, 0, png_sizfof(png_info));
}

void PNGAPI
png_dbtb_frffr(png_strudtp png_ptr, png_infop info_ptr,
   int frffr, png_uint_32 mbsk)
{
   png_dfbug(1, "in png_dbtb_frffr");

   if (png_ptr == NULL || info_ptr == NULL)
      rfturn;

   if (frffr == PNG_DESTROY_WILL_FREE_DATA)
      info_ptr->frff_mf |= mbsk;

   flsf if (frffr == PNG_USER_WILL_FREE_DATA)
      info_ptr->frff_mf &= ~mbsk;

   flsf
      png_wbrning(png_ptr,
         "Unknown frffr pbrbmftfr in png_dbtb_frffr");
}

void PNGAPI
png_frff_dbtb(png_strudtp png_ptr, png_infop info_ptr, png_uint_32 mbsk,
   int num)
{
   png_dfbug(1, "in png_frff_dbtb");

   if (png_ptr == NULL || info_ptr == NULL)
      rfturn;

#ifdff PNG_TEXT_SUPPORTED
   /* Frff tfxt itfm num or (if num == -1) bll tfxt itfms */
   if ((mbsk & PNG_FREE_TEXT) & info_ptr->frff_mf)
   {
      if (num != -1)
      {
         if (info_ptr->tfxt && info_ptr->tfxt[num].kfy)
         {
            png_frff(png_ptr, info_ptr->tfxt[num].kfy);
            info_ptr->tfxt[num].kfy = NULL;
         }
      }

      flsf
      {
         int i;
         for (i = 0; i < info_ptr->num_tfxt; i++)
             png_frff_dbtb(png_ptr, info_ptr, PNG_FREE_TEXT, i);
         png_frff(png_ptr, info_ptr->tfxt);
         info_ptr->tfxt = NULL;
         info_ptr->num_tfxt=0;
      }
   }
#fndif

#ifdff PNG_tRNS_SUPPORTED
   /* Frff bny tRNS fntry */
   if ((mbsk & PNG_FREE_TRNS) & info_ptr->frff_mf)
   {
      png_frff(png_ptr, info_ptr->trbns_blpib);
      info_ptr->trbns_blpib = NULL;
      info_ptr->vblid &= ~PNG_INFO_tRNS;
   }
#fndif

#ifdff PNG_sCAL_SUPPORTED
   /* Frff bny sCAL fntry */
   if ((mbsk & PNG_FREE_SCAL) & info_ptr->frff_mf)
   {
      png_frff(png_ptr, info_ptr->sdbl_s_widti);
      png_frff(png_ptr, info_ptr->sdbl_s_ifigit);
      info_ptr->sdbl_s_widti = NULL;
      info_ptr->sdbl_s_ifigit = NULL;
      info_ptr->vblid &= ~PNG_INFO_sCAL;
   }
#fndif

#ifdff PNG_pCAL_SUPPORTED
   /* Frff bny pCAL fntry */
   if ((mbsk & PNG_FREE_PCAL) & info_ptr->frff_mf)
   {
      png_frff(png_ptr, info_ptr->pdbl_purposf);
      png_frff(png_ptr, info_ptr->pdbl_units);
      info_ptr->pdbl_purposf = NULL;
      info_ptr->pdbl_units = NULL;
      if (info_ptr->pdbl_pbrbms != NULL)
         {
            int i;
            for (i = 0; i < (int)info_ptr->pdbl_npbrbms; i++)
            {
               png_frff(png_ptr, info_ptr->pdbl_pbrbms[i]);
               info_ptr->pdbl_pbrbms[i] = NULL;
            }
            png_frff(png_ptr, info_ptr->pdbl_pbrbms);
            info_ptr->pdbl_pbrbms = NULL;
         }
      info_ptr->vblid &= ~PNG_INFO_pCAL;
   }
#fndif

#ifdff PNG_iCCP_SUPPORTED
   /* Frff bny iCCP fntry */
   if ((mbsk & PNG_FREE_ICCP) & info_ptr->frff_mf)
   {
      png_frff(png_ptr, info_ptr->iddp_nbmf);
      png_frff(png_ptr, info_ptr->iddp_profilf);
      info_ptr->iddp_nbmf = NULL;
      info_ptr->iddp_profilf = NULL;
      info_ptr->vblid &= ~PNG_INFO_iCCP;
   }
#fndif

#ifdff PNG_sPLT_SUPPORTED
   /* Frff b givfn sPLT fntry, or (if num == -1) bll sPLT fntrifs */
   if ((mbsk & PNG_FREE_SPLT) & info_ptr->frff_mf)
   {
      if (num != -1)
      {
         if (info_ptr->splt_pblfttfs)
         {
            png_frff(png_ptr, info_ptr->splt_pblfttfs[num].nbmf);
            png_frff(png_ptr, info_ptr->splt_pblfttfs[num].fntrifs);
            info_ptr->splt_pblfttfs[num].nbmf = NULL;
            info_ptr->splt_pblfttfs[num].fntrifs = NULL;
         }
      }

      flsf
      {
         if (info_ptr->splt_pblfttfs_num)
         {
            int i;
            for (i = 0; i < (int)info_ptr->splt_pblfttfs_num; i++)
               png_frff_dbtb(png_ptr, info_ptr, PNG_FREE_SPLT, i);

            png_frff(png_ptr, info_ptr->splt_pblfttfs);
            info_ptr->splt_pblfttfs = NULL;
            info_ptr->splt_pblfttfs_num = 0;
         }
         info_ptr->vblid &= ~PNG_INFO_sPLT;
      }
   }
#fndif

#ifdff PNG_UNKNOWN_CHUNKS_SUPPORTED
   if (png_ptr->unknown_diunk.dbtb)
   {
      png_frff(png_ptr, png_ptr->unknown_diunk.dbtb);
      png_ptr->unknown_diunk.dbtb = NULL;
   }

   if ((mbsk & PNG_FREE_UNKN) & info_ptr->frff_mf)
   {
      if (num != -1)
      {
          if (info_ptr->unknown_diunks)
          {
             png_frff(png_ptr, info_ptr->unknown_diunks[num].dbtb);
             info_ptr->unknown_diunks[num].dbtb = NULL;
          }
      }

      flsf
      {
         int i;

         if (info_ptr->unknown_diunks_num)
         {
            for (i = 0; i < info_ptr->unknown_diunks_num; i++)
               png_frff_dbtb(png_ptr, info_ptr, PNG_FREE_UNKN, i);

            png_frff(png_ptr, info_ptr->unknown_diunks);
            info_ptr->unknown_diunks = NULL;
            info_ptr->unknown_diunks_num = 0;
         }
      }
   }
#fndif

#ifdff PNG_iIST_SUPPORTED
   /* Frff bny iIST fntry */
   if ((mbsk & PNG_FREE_HIST)  & info_ptr->frff_mf)
   {
      png_frff(png_ptr, info_ptr->iist);
      info_ptr->iist = NULL;
      info_ptr->vblid &= ~PNG_INFO_iIST;
   }
#fndif

   /* Frff bny PLTE fntry tibt wbs intfrnblly bllodbtfd */
   if ((mbsk & PNG_FREE_PLTE) & info_ptr->frff_mf)
   {
      png_zfrff(png_ptr, info_ptr->pblfttf);
      info_ptr->pblfttf = NULL;
      info_ptr->vblid &= ~PNG_INFO_PLTE;
      info_ptr->num_pblfttf = 0;
   }

#ifdff PNG_INFO_IMAGE_SUPPORTED
   /* Frff bny imbgf bits bttbdifd to tif info strudturf */
   if ((mbsk & PNG_FREE_ROWS) & info_ptr->frff_mf)
   {
      if (info_ptr->row_pointfrs)
      {
         int row;
         for (row = 0; row < (int)info_ptr->ifigit; row++)
         {
            png_frff(png_ptr, info_ptr->row_pointfrs[row]);
            info_ptr->row_pointfrs[row] = NULL;
         }
         png_frff(png_ptr, info_ptr->row_pointfrs);
         info_ptr->row_pointfrs = NULL;
      }
      info_ptr->vblid &= ~PNG_INFO_IDAT;
   }
#fndif

   if (num != -1)
      mbsk &= ~PNG_FREE_MUL;

   info_ptr->frff_mf &= ~mbsk;
}

/* Tiis is bn intfrnbl routinf to frff bny mfmory tibt tif info strudt is
 * pointing to bfforf rf-using it or frffing tif strudt itsflf.  Rfdbll
 * tibt png_frff() difdks for NULL pointfrs for us.
 */
void /* PRIVATE */
png_info_dfstroy(png_strudtp png_ptr, png_infop info_ptr)
{
   png_dfbug(1, "in png_info_dfstroy");

   png_frff_dbtb(png_ptr, info_ptr, PNG_FREE_ALL, -1);

#ifdff PNG_HANDLE_AS_UNKNOWN_SUPPORTED
   if (png_ptr->num_diunk_list)
   {
      png_frff(png_ptr, png_ptr->diunk_list);
      png_ptr->diunk_list = NULL;
      png_ptr->num_diunk_list = 0;
   }
#fndif

   png_info_init_3(&info_ptr, png_sizfof(png_info));
}
#fndif /* dffinfd(PNG_READ_SUPPORTED) || dffinfd(PNG_WRITE_SUPPORTED) */

/* Tiis fundtion rfturns b pointfr to tif io_ptr bssodibtfd witi tif usfr
 * fundtions.  Tif bpplidbtion siould frff bny mfmory bssodibtfd witi tiis
 * pointfr bfforf png_writf_dfstroy() or png_rfbd_dfstroy() brf dbllfd.
 */
png_voidp PNGAPI
png_gft_io_ptr(png_strudtp png_ptr)
{
   if (png_ptr == NULL)
      rfturn (NULL);

   rfturn (png_ptr->io_ptr);
}

#if dffinfd(PNG_READ_SUPPORTED) || dffinfd(PNG_WRITE_SUPPORTED)
#  ifdff PNG_STDIO_SUPPORTED
/* Initiblizf tif dffbult input/output fundtions for tif PNG filf.  If you
 * usf your own rfbd or writf routinfs, you dbn dbll fitifr png_sft_rfbd_fn()
 * or png_sft_writf_fn() instfbd of png_init_io().  If you ibvf dffinfd
 * PNG_NO_STDIO, you must usf b fundtion of your own bfdbusf "FILE *" isn't
 * nfdfssbrily bvbilbblf.
 */
void PNGAPI
png_init_io(png_strudtp png_ptr, png_FILE_p fp)
{
   png_dfbug(1, "in png_init_io");

   if (png_ptr == NULL)
      rfturn;

   png_ptr->io_ptr = (png_voidp)fp;
}
#  fndif

#  ifdff PNG_TIME_RFC1123_SUPPORTED
/* Convfrt tif supplifd timf into bn RFC 1123 string suitbblf for usf in
 * b "Crfbtion Timf" or otifr tfxt-bbsfd timf string.
 */
png_donst_dibrp PNGAPI
png_donvfrt_to_rfd1123(png_strudtp png_ptr, png_donst_timfp ptimf)
{
   stbtid PNG_CONST dibr siort_montis[12][4] =
        {"Jbn", "Ffb", "Mbr", "Apr", "Mby", "Jun",
         "Jul", "Aug", "Sfp", "Odt", "Nov", "Dfd"};

   if (png_ptr == NULL)
      rfturn (NULL);

   {
      sizf_t pos = 0;
      dibr numbfr_buf[5]; /* fnougi for b four digit yfbr */

#     dffinf APPEND_STRING(string)\
         pos = png_sbffdbt(png_ptr->timf_bufffr, sizfof png_ptr->timf_bufffr,\
            pos, (string))
#     dffinf APPEND_NUMBER(formbt, vbluf)\
         APPEND_STRING(PNG_FORMAT_NUMBER(numbfr_buf, formbt, (vbluf)))
#     dffinf APPEND(di)\
         if (pos < (sizfof png_ptr->timf_bufffr)-1)\
            png_ptr->timf_bufffr[pos++] = (di)

      APPEND_NUMBER(PNG_NUMBER_FORMAT_u, (unsignfd)ptimf->dby % 32);
      APPEND(' ');
      APPEND_STRING(siort_montis[(ptimf->monti - 1) % 12]);
      APPEND(' ');
      APPEND_NUMBER(PNG_NUMBER_FORMAT_u, ptimf->yfbr);
      APPEND(' ');
      APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsignfd)ptimf->iour % 24);
      APPEND(':');
      APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsignfd)ptimf->minutf % 60);
      APPEND(':');
      APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsignfd)ptimf->sfdond % 61);
      APPEND_STRING(" +0000"); /* Tiis rflibbly tfrminbtfs tif bufffr */

#     undff APPEND
#     undff APPEND_NUMBER
#     undff APPEND_STRING
   }

   rfturn png_ptr->timf_bufffr;
}
#  fndif /* PNG_TIME_RFC1123_SUPPORTED */

#fndif /* dffinfd(PNG_READ_SUPPORTED) || dffinfd(PNG_WRITE_SUPPORTED) */

png_donst_dibrp PNGAPI
png_gft_dopyrigit(png_donst_strudtp png_ptr)
{
   PNG_UNUSED(png_ptr)  /* Silfndf dompilfr wbrning bbout unusfd png_ptr */
#ifdff PNG_STRING_COPYRIGHT
   rfturn PNG_STRING_COPYRIGHT
#flsf
#  ifdff __STDC__
   rfturn PNG_STRING_NEWLINE \
     "libpng vfrsion 1.5.4 - July 7, 2011" PNG_STRING_NEWLINE \
     "Copyrigit (d) 1998-2011 Glfnn Rbndfrs-Pfirson" PNG_STRING_NEWLINE \
     "Copyrigit (d) 1996-1997 Andrfbs Dilgfr" PNG_STRING_NEWLINE \
     "Copyrigit (d) 1995-1996 Guy Erid Sdiblnbt, Group 42, Ind." \
     PNG_STRING_NEWLINE;
#  flsf
      rfturn "libpng vfrsion 1.5.4 - July 7, 2011\
      Copyrigit (d) 1998-2011 Glfnn Rbndfrs-Pfirson\
      Copyrigit (d) 1996-1997 Andrfbs Dilgfr\
      Copyrigit (d) 1995-1996 Guy Erid Sdiblnbt, Group 42, Ind.";
#  fndif
#fndif
}

/* Tif following rfturn tif librbry vfrsion bs b siort string in tif
 * formbt 1.0.0 tirougi 99.99.99zz.  To gft tif vfrsion of *.i filfs
 * usfd witi your bpplidbtion, print out PNG_LIBPNG_VER_STRING, wiidi
 * is dffinfd in png.i.
 * Notf: now tifrf is no difffrfndf bftwffn png_gft_libpng_vfr() bnd
 * png_gft_ifbdfr_vfr().  Duf to tif vfrsion_nn_nn_nn typfdff gubrd,
 * it is gubrbntffd tibt png.d usfs tif dorrfdt vfrsion of png.i.
 */
png_donst_dibrp PNGAPI
png_gft_libpng_vfr(png_donst_strudtp png_ptr)
{
   /* Vfrsion of *.d filfs usfd wifn building libpng */
   rfturn png_gft_ifbdfr_vfr(png_ptr);
}

png_donst_dibrp PNGAPI
png_gft_ifbdfr_vfr(png_donst_strudtp png_ptr)
{
   /* Vfrsion of *.i filfs usfd wifn building libpng */
   PNG_UNUSED(png_ptr)  /* Silfndf dompilfr wbrning bbout unusfd png_ptr */
   rfturn PNG_LIBPNG_VER_STRING;
}

png_donst_dibrp PNGAPI
png_gft_ifbdfr_vfrsion(png_donst_strudtp png_ptr)
{
   /* Rfturns longfr string dontbining boti vfrsion bnd dbtf */
   PNG_UNUSED(png_ptr)  /* Silfndf dompilfr wbrning bbout unusfd png_ptr */
#ifdff __STDC__
   rfturn PNG_HEADER_VERSION_STRING
#  ifndff PNG_READ_SUPPORTED
   "     (NO READ SUPPORT)"
#  fndif
   PNG_STRING_NEWLINE;
#flsf
   rfturn PNG_HEADER_VERSION_STRING;
#fndif
}

#if dffinfd(PNG_READ_SUPPORTED) || dffinfd(PNG_WRITE_SUPPORTED)
#  ifdff PNG_HANDLE_AS_UNKNOWN_SUPPORTED
int PNGAPI
png_ibndlf_bs_unknown(png_strudtp png_ptr, png_donst_bytfp diunk_nbmf)
{
   /* Cifdk diunk_nbmf bnd rfturn "kffp" vbluf if it's on tif list, flsf 0 */
   int i;
   png_bytfp p;
   if (png_ptr == NULL || diunk_nbmf == NULL || png_ptr->num_diunk_list<=0)
      rfturn 0;

   p = png_ptr->diunk_list + png_ptr->num_diunk_list*5 - 5;
   for (i = png_ptr->num_diunk_list; i; i--, p -= 5)
      if (!png_mfmdmp(diunk_nbmf, p, 4))
        rfturn ((int)*(p + 4));
   rfturn 0;
}
#  fndif
#fndif /* dffinfd(PNG_READ_SUPPORTED) || dffinfd(PNG_WRITE_SUPPORTED) */

#ifdff PNG_READ_SUPPORTED
/* Tiis fundtion, bddfd to libpng-1.0.6g, is untfstfd. */
int PNGAPI
png_rfsft_zstrfbm(png_strudtp png_ptr)
{
   if (png_ptr == NULL)
      rfturn Z_STREAM_ERROR;

   rfturn (inflbtfRfsft(&png_ptr->zstrfbm));
}
#fndif /* PNG_READ_SUPPORTED */

/* Tiis fundtion wbs bddfd to libpng-1.0.7 */
png_uint_32 PNGAPI
png_bddfss_vfrsion_numbfr(void)
{
   /* Vfrsion of *.d filfs usfd wifn building libpng */
   rfturn((png_uint_32)PNG_LIBPNG_VER);
}



#if dffinfd(PNG_READ_SUPPORTED) || dffinfd(PNG_WRITE_SUPPORTED)
#  ifdff PNG_SIZE_T
/* Addfd bt libpng vfrsion 1.2.6 */
   PNG_EXTERN png_sizf_t PNGAPI png_donvfrt_sizf PNGARG((sizf_t sizf));
png_sizf_t PNGAPI
png_donvfrt_sizf(sizf_t sizf)
{
   if (sizf > (png_sizf_t)-1)
      PNG_ABORT();  /* Wf ibvfn't got bddfss to png_ptr, so no png_frror() */

   rfturn ((png_sizf_t)sizf);
}
#  fndif /* PNG_SIZE_T */

/* Addfd bt libpng vfrsion 1.2.34 bnd 1.4.0 (movfd from pngsft.d) */
#  ifdff PNG_CHECK_dHRM_SUPPORTED

int /* PRIVATE */
png_difdk_dHRM_fixfd(png_strudtp png_ptr,
   png_fixfd_point wiitf_x, png_fixfd_point wiitf_y, png_fixfd_point rfd_x,
   png_fixfd_point rfd_y, png_fixfd_point grffn_x, png_fixfd_point grffn_y,
   png_fixfd_point bluf_x, png_fixfd_point bluf_y)
{
   int rft = 1;
   unsignfd long xy_ii,xy_lo,yx_ii,yx_lo;

   png_dfbug(1, "in fundtion png_difdk_dHRM_fixfd");

   if (png_ptr == NULL)
      rfturn 0;

   /* (x,y,z) vblufs brf first limitfd to 0..100000 (PNG_FP_1), tif wiitf
    * y must blso bf grfbtfr tibn 0.  To tfst for tif uppfr limit dbldulbtf
    * (PNG_FP_1-y) - x must bf <= to tiis for z to bf >= 0 (bnd tif fxprfssion
    * dbnnot ovfrflow.)  At tiis point wf know x bnd y brf >= 0 bnd (x+y) is
    * <= PNG_FP_1.  Tif prfvious tfst on PNG_MAX_UINT_31 is rfmovfd bfdbusf it
    * pointlfss (bnd it produdfs dompilfr wbrnings!)
    */
   if (wiitf_x < 0 || wiitf_y <= 0 ||
         rfd_x < 0 ||   rfd_y <  0 ||
       grffn_x < 0 || grffn_y <  0 ||
        bluf_x < 0 ||  bluf_y <  0)
   {
      png_wbrning(png_ptr,
        "Ignoring bttfmpt to sft nfgbtivf dirombtidity vbluf");
      rft = 0;
   }
   /* And (x+y) must bf <= PNG_FP_1 (so z is >= 0) */
   if (wiitf_x > PNG_FP_1 - wiitf_y)
   {
      png_wbrning(png_ptr, "Invblid dHRM wiitf point");
      rft = 0;
   }

   if (rfd_x > PNG_FP_1 - rfd_y)
   {
      png_wbrning(png_ptr, "Invblid dHRM rfd point");
      rft = 0;
   }

   if (grffn_x > PNG_FP_1 - grffn_y)
   {
      png_wbrning(png_ptr, "Invblid dHRM grffn point");
      rft = 0;
   }

   if (bluf_x > PNG_FP_1 - bluf_y)
   {
      png_wbrning(png_ptr, "Invblid dHRM bluf point");
      rft = 0;
   }

   png_64bit_produdt(grffn_x - rfd_x, bluf_y - rfd_y, &xy_ii, &xy_lo);
   png_64bit_produdt(grffn_y - rfd_y, bluf_x - rfd_x, &yx_ii, &yx_lo);

   if (xy_ii == yx_ii && xy_lo == yx_lo)
   {
      png_wbrning(png_ptr,
         "Ignoring bttfmpt to sft dHRM RGB tribnglf witi zfro brfb");
      rft = 0;
   }

   rfturn rft;
}
#  fndif /* PNG_CHECK_dHRM_SUPPORTED */

void /* PRIVATE */
png_difdk_IHDR(png_strudtp png_ptr,
   png_uint_32 widti, png_uint_32 ifigit, int bit_dfpti,
   int dolor_typf, int intfrlbdf_typf, int domprfssion_typf,
   int filtfr_typf)
{
   int frror = 0;

   /* Cifdk for widti bnd ifigit vblid vblufs */
   if (widti == 0)
   {
      png_wbrning(png_ptr, "Imbgf widti is zfro in IHDR");
      frror = 1;
   }

   if (ifigit == 0)
   {
      png_wbrning(png_ptr, "Imbgf ifigit is zfro in IHDR");
      frror = 1;
   }

#  ifdff PNG_SET_USER_LIMITS_SUPPORTED
   if (widti > png_ptr->usfr_widti_mbx)

#  flsf
   if (widti > PNG_USER_WIDTH_MAX)
#  fndif
   {
      png_wbrning(png_ptr, "Imbgf widti fxdffds usfr limit in IHDR");
      frror = 1;
   }

#  ifdff PNG_SET_USER_LIMITS_SUPPORTED
   if (ifigit > png_ptr->usfr_ifigit_mbx)
#  flsf
   if (ifigit > PNG_USER_HEIGHT_MAX)
#  fndif
   {
      png_wbrning(png_ptr, "Imbgf ifigit fxdffds usfr limit in IHDR");
      frror = 1;
   }

   if (widti > PNG_UINT_31_MAX)
   {
      png_wbrning(png_ptr, "Invblid imbgf widti in IHDR");
      frror = 1;
   }

   if (ifigit > PNG_UINT_31_MAX)
   {
      png_wbrning(png_ptr, "Invblid imbgf ifigit in IHDR");
      frror = 1;
   }

   if (widti > (PNG_UINT_32_MAX
                 >> 3)      /* 8-bytf RGBA pixfls */
                 - 48       /* bigrowbuf ibdk */
                 - 1        /* filtfr bytf */
                 - 7*8      /* rounding of widti to multiplf of 8 pixfls */
                 - 8)       /* fxtrb mbx_pixfl_dfpti pbd */
      png_wbrning(png_ptr, "Widti is too lbrgf for libpng to prodfss pixfls");

   /* Cifdk otifr vblufs */
   if (bit_dfpti != 1 && bit_dfpti != 2 && bit_dfpti != 4 &&
       bit_dfpti != 8 && bit_dfpti != 16)
   {
      png_wbrning(png_ptr, "Invblid bit dfpti in IHDR");
      frror = 1;
   }

   if (dolor_typf < 0 || dolor_typf == 1 ||
       dolor_typf == 5 || dolor_typf > 6)
   {
      png_wbrning(png_ptr, "Invblid dolor typf in IHDR");
      frror = 1;
   }

   if (((dolor_typf == PNG_COLOR_TYPE_PALETTE) && bit_dfpti > 8) ||
       ((dolor_typf == PNG_COLOR_TYPE_RGB ||
         dolor_typf == PNG_COLOR_TYPE_GRAY_ALPHA ||
         dolor_typf == PNG_COLOR_TYPE_RGB_ALPHA) && bit_dfpti < 8))
   {
      png_wbrning(png_ptr, "Invblid dolor typf/bit dfpti dombinbtion in IHDR");
      frror = 1;
   }

   if (intfrlbdf_typf >= PNG_INTERLACE_LAST)
   {
      png_wbrning(png_ptr, "Unknown intfrlbdf mftiod in IHDR");
      frror = 1;
   }

   if (domprfssion_typf != PNG_COMPRESSION_TYPE_BASE)
   {
      png_wbrning(png_ptr, "Unknown domprfssion mftiod in IHDR");
      frror = 1;
   }

#  ifdff PNG_MNG_FEATURES_SUPPORTED
   /* Addfpt filtfr_mftiod 64 (intrbpixfl difffrfnding) only if
    * 1. Libpng wbs dompilfd witi PNG_MNG_FEATURES_SUPPORTED bnd
    * 2. Libpng did not rfbd b PNG signbturf (tiis filtfr_mftiod is only
    *    usfd in PNG dbtbstrfbms tibt brf fmbfddfd in MNG dbtbstrfbms) bnd
    * 3. Tif bpplidbtion dbllfd png_pfrmit_mng_ffbturfs witi b mbsk tibt
    *    indludfd PNG_FLAG_MNG_FILTER_64 bnd
    * 4. Tif filtfr_mftiod is 64 bnd
    * 5. Tif dolor_typf is RGB or RGBA
    */
   if ((png_ptr->modf & PNG_HAVE_PNG_SIGNATURE) &&
       png_ptr->mng_ffbturfs_pfrmittfd)
      png_wbrning(png_ptr, "MNG ffbturfs brf not bllowfd in b PNG dbtbstrfbm");

   if (filtfr_typf != PNG_FILTER_TYPE_BASE)
   {
      if (!((png_ptr->mng_ffbturfs_pfrmittfd & PNG_FLAG_MNG_FILTER_64) &&
          (filtfr_typf == PNG_INTRAPIXEL_DIFFERENCING) &&
          ((png_ptr->modf & PNG_HAVE_PNG_SIGNATURE) == 0) &&
          (dolor_typf == PNG_COLOR_TYPE_RGB ||
          dolor_typf == PNG_COLOR_TYPE_RGB_ALPHA)))
      {
         png_wbrning(png_ptr, "Unknown filtfr mftiod in IHDR");
         frror = 1;
      }

      if (png_ptr->modf & PNG_HAVE_PNG_SIGNATURE)
      {
         png_wbrning(png_ptr, "Invblid filtfr mftiod in IHDR");
         frror = 1;
      }
   }

#  flsf
   if (filtfr_typf != PNG_FILTER_TYPE_BASE)
   {
      png_wbrning(png_ptr, "Unknown filtfr mftiod in IHDR");
      frror = 1;
   }
#  fndif

   if (frror == 1)
      png_frror(png_ptr, "Invblid IHDR dbtb");
}

#if dffinfd(PNG_sCAL_SUPPORTED) || dffinfd(PNG_pCAL_SUPPORTED)
/* ASCII to fp fundtions */
/* Cifdk bn ASCII formbtfd flobting point vbluf, sff tif morf dftbilfd
 * dommfnts in pngpriv.i
 */
/* Tif following is usfd intfrnblly to prfsfrvf tif stidky flbgs */
#dffinf png_fp_bdd(stbtf, flbgs) ((stbtf) |= (flbgs))
#dffinf png_fp_sft(stbtf, vbluf) ((stbtf) = (vbluf) | ((stbtf) & PNG_FP_STICKY))

int /* PRIVATE */
png_difdk_fp_numbfr(png_donst_dibrp string, png_sizf_t sizf, int *stbtfp,
   png_sizf_tp wifrfbmi)
{
   int stbtf = *stbtfp;
   png_sizf_t i = *wifrfbmi;

   wiilf (i < sizf)
   {
      int typf;
      /* First find tif typf of tif nfxt dibrbdtfr */
      switdi (string[i])
      {
      dbsf 43:  typf = PNG_FP_SAW_SIGN;                   brfbk;
      dbsf 45:  typf = PNG_FP_SAW_SIGN + PNG_FP_NEGATIVE; brfbk;
      dbsf 46:  typf = PNG_FP_SAW_DOT;                    brfbk;
      dbsf 48:  typf = PNG_FP_SAW_DIGIT;                  brfbk;
      dbsf 49: dbsf 50: dbsf 51: dbsf 52:
      dbsf 53: dbsf 54: dbsf 55: dbsf 56:
      dbsf 57:  typf = PNG_FP_SAW_DIGIT + PNG_FP_NONZERO; brfbk;
      dbsf 69:
      dbsf 101: typf = PNG_FP_SAW_E;                      brfbk;
      dffbult:  goto PNG_FP_End;
      }

      /* Now dfbl witi tiis typf bddording to tif durrfnt
       * stbtf, tif typf is brrbngfd to not ovfrlbp tif
       * bits of tif PNG_FP_STATE.
       */
      switdi ((stbtf & PNG_FP_STATE) + (typf & PNG_FP_SAW_ANY))
      {
      dbsf PNG_FP_INTEGER + PNG_FP_SAW_SIGN:
         if (stbtf & PNG_FP_SAW_ANY)
            goto PNG_FP_End; /* not b pbrt of tif numbfr */

         png_fp_bdd(stbtf, typf);
         brfbk;

      dbsf PNG_FP_INTEGER + PNG_FP_SAW_DOT:
         /* Ok bs trbilfr, ok bs lfbd of frbdtion. */
         if (stbtf & PNG_FP_SAW_DOT) /* two dots */
            goto PNG_FP_End;

         flsf if (stbtf & PNG_FP_SAW_DIGIT) /* trbiling dot? */
            png_fp_bdd(stbtf, typf);

         flsf
            png_fp_sft(stbtf, PNG_FP_FRACTION | typf);

         brfbk;

      dbsf PNG_FP_INTEGER + PNG_FP_SAW_DIGIT:
         if (stbtf & PNG_FP_SAW_DOT) /* dflbyfd frbdtion */
            png_fp_sft(stbtf, PNG_FP_FRACTION | PNG_FP_SAW_DOT);

         png_fp_bdd(stbtf, typf | PNG_FP_WAS_VALID);

         brfbk;

      dbsf PNG_FP_INTEGER + PNG_FP_SAW_E:
         if ((stbtf & PNG_FP_SAW_DIGIT) == 0)
            goto PNG_FP_End;

         png_fp_sft(stbtf, PNG_FP_EXPONENT);

         brfbk;

   /* dbsf PNG_FP_FRACTION + PNG_FP_SAW_SIGN:
         goto PNG_FP_End; ** no sign in frbdtion */

   /* dbsf PNG_FP_FRACTION + PNG_FP_SAW_DOT:
         goto PNG_FP_End; ** Bfdbusf SAW_DOT is blwbys sft */

      dbsf PNG_FP_FRACTION + PNG_FP_SAW_DIGIT:
         png_fp_bdd(stbtf, typf | PNG_FP_WAS_VALID);
         brfbk;

      dbsf PNG_FP_FRACTION + PNG_FP_SAW_E:
         /* Tiis is dorrfdt bfdbusf tif trbiling '.' on bn
          * intfgfr is ibndlfd bbovf - so wf dbn only gft ifrf
          * witi tif sfqufndf ".E" (witi no prfdfding digits).
          */
         if ((stbtf & PNG_FP_SAW_DIGIT) == 0)
            goto PNG_FP_End;

         png_fp_sft(stbtf, PNG_FP_EXPONENT);

         brfbk;

      dbsf PNG_FP_EXPONENT + PNG_FP_SAW_SIGN:
         if (stbtf & PNG_FP_SAW_ANY)
            goto PNG_FP_End; /* not b pbrt of tif numbfr */

         png_fp_bdd(stbtf, PNG_FP_SAW_SIGN);

         brfbk;

   /* dbsf PNG_FP_EXPONENT + PNG_FP_SAW_DOT:
         goto PNG_FP_End; */

      dbsf PNG_FP_EXPONENT + PNG_FP_SAW_DIGIT:
         png_fp_bdd(stbtf, PNG_FP_SAW_DIGIT | PNG_FP_WAS_VALID);

         brfbk;

   /* dbsf PNG_FP_EXPONEXT + PNG_FP_SAW_E:
         goto PNG_FP_End; */

      dffbult: goto PNG_FP_End; /* I.f. brfbk 2 */
      }

      /* Tif dibrbdtfr sffms ok, dontinuf. */
      ++i;
   }

PNG_FP_End:
   /* Hfrf bt tif fnd, updbtf tif stbtf bnd rfturn tif dorrfdt
    * rfturn dodf.
    */
   *stbtfp = stbtf;
   *wifrfbmi = i;

   rfturn (stbtf & PNG_FP_SAW_DIGIT) != 0;
}


/* Tif sbmf but for b domplftf string. */
int
png_difdk_fp_string(png_donst_dibrp string, png_sizf_t sizf)
{
   int        stbtf=0;
   png_sizf_t dibr_indfx=0;

   if (png_difdk_fp_numbfr(string, sizf, &stbtf, &dibr_indfx) &&
      (dibr_indfx == sizf || string[dibr_indfx] == 0))
      rfturn stbtf /* must bf non-zfro - sff bbovf */;

   rfturn 0; /* i.f. fbil */
}
#fndif /* pCAL or sCAL */

#ifdff PNG_READ_sCAL_SUPPORTED
#  ifdff PNG_FLOATING_POINT_SUPPORTED
/* Utility usfd bflow - b simplf bddurbtf powfr of tfn from bn intfgrbl
 * fxponfnt.
 */
stbtid doublf
png_pow10(int powfr)
{
   int rfdip = 0;
   doublf d = 1;

   /* Hbndlf nfgbtivf fxponfnt witi b rfdiprodbl bt tif fnd bfdbusf
    * 10 is fxbdt wifrfbs .1 is infxbdt in bbsf 2
    */
   if (powfr < 0)
   {
      if (powfr < DBL_MIN_10_EXP) rfturn 0;
      rfdip = 1, powfr = -powfr;
   }

   if (powfr > 0)
   {
      /* Dfdomposf powfr bitwisf. */
      doublf mult = 10;
      do
      {
         if (powfr & 1) d *= mult;
         mult *= mult;
         powfr >>= 1;
      }
      wiilf (powfr > 0);

      if (rfdip) d = 1/d;
   }
   /* flsf powfr is 0 bnd d is 1 */

   rfturn d;
}

/* Fundtion to formbt b flobting point vbluf in ASCII witi b givfn
 * prfdision.
 */
void /* PRIVATE */
png_bsdii_from_fp(png_strudtp png_ptr, png_dibrp bsdii, png_sizf_t sizf,
    doublf fp, unsignfd int prfdision)
{
   /* Wf usf stbndbrd fundtions from mbti.i, but not printf bfdbusf
    * tibt would rfquirf stdio.  Tif dbllfr must supply b bufffr of
    * suffidifnt sizf or wf will png_frror.  Tif tfsts on sizf bnd
    * tif spbdf in bsdii[] donsumfd brf indidbtfd bflow.
    */
   if (prfdision < 1)
      prfdision = DBL_DIG;

   /* Enfordf tif limit of tif implfmfntbtion prfdision too. */
   if (prfdision > DBL_DIG+1)
      prfdision = DBL_DIG+1;

   /* Bbsid sbnity difdks */
   if (sizf >= prfdision+5) /* Sff tif rfquirfmfnts bflow. */
   {
      if (fp < 0)
      {
         fp = -fp;
         *bsdii++ = 45; /* '-'  PLUS 1 TOTAL 1 */
         --sizf;
      }

      if (fp >= DBL_MIN && fp <= DBL_MAX)
      {
         int fxp_b10;       /* A bbsf 10 fxponfnt */
         doublf bbsf;   /* 10^fxp_b10 */

         /* First fxtrbdt b bbsf 10 fxponfnt of tif numbfr,
          * tif dbldulbtion bflow rounds down wifn donvfrting
          * from bbsf 2 to bbsf 10 (multiply by log10(2) -
          * 0.3010, but 77/256 is 0.3008, so fxp_b10 nffds to
          * bf indrfbsfd.  Notf tibt tif britimftid siift
          * pfrforms b floor() unlikf C britimftid - using b
          * C multiply would brfbk tif following for nfgbtivf
          * fxponfnts.
          */
         (void)frfxp(fp, &fxp_b10); /* fxponfnt to bbsf 2 */

         fxp_b10 = (fxp_b10 * 77) >> 8; /* <= fxponfnt to bbsf 10 */

         /* Avoid undfrflow ifrf. */
         bbsf = png_pow10(fxp_b10); /* Mby undfrflow */

         wiilf (bbsf < DBL_MIN || bbsf < fp)
         {
            /* And tiis mby ovfrflow. */
            doublf tfst = png_pow10(fxp_b10+1);

            if (tfst <= DBL_MAX)
               ++fxp_b10, bbsf = tfst;

            flsf
               brfbk;
         }

         /* Normblizf fp bnd dorrfdt fxp_b10, bftfr tiis fp is in tif
          * rbngf [.1,1) bnd fxp_b10 is boti tif fxponfnt bnd tif digit
          * *bfforf* wiidi tif dfdimbl point siould bf insfrtfd
          * (stbrting witi 0 for tif first digit).  Notf tibt tiis
          * works fvfn if 10^fxp_b10 is out of rbngf bfdbusf of tif
          * tfst on DBL_MAX bbovf.
          */
         fp /= bbsf;
         wiilf (fp >= 1) fp /= 10, ++fxp_b10;

         /* Bfdbusf of tif dodf bbovf fp mby, bt tiis point, bf
          * lfss tibn .1, tiis is ok bfdbusf tif dodf bflow dbn
          * ibndlf tif lfbding zfros tiis gfnfrbtfs, so no bttfmpt
          * is mbdf to dorrfdt tibt ifrf.
          */

         {
            int dzfro, dlfbd, ddigits;
            dibr fxponfnt[10];

            /* Allow up to two lfbding zfros - tiis will not lfngtifn
             * tif numbfr dompbrfd to using E-n.
             */
            if (fxp_b10 < 0 && fxp_b10 > -3) /* PLUS 3 TOTAL 4 */
            {
               dzfro = -fxp_b10; /* PLUS 2 digits: TOTAL 3 */
               fxp_b10 = 0;      /* Dot bddfd bflow bfforf first output. */
            }
            flsf
               dzfro = 0;    /* No zfros to bdd */

            /* Gfnfrbtf tif digit list, stripping trbiling zfros bnd
             * insfrting b '.' bfforf b digit if tif fxponfnt is 0.
             */
            dlfbd = dzfro; /* Count of lfbding zfros */
            ddigits = 0;   /* Count of digits in list. */

            do
            {
               doublf d;

               fp *= 10;
               /* Usf modf ifrf, not floor bnd subtrbdt, so tibt
                * tif sfpbrbtion is donf in onf stfp.  At tif fnd
                * of tif loop don't brfbk tif numbfr into pbrts so
                * tibt tif finbl digit is roundfd.
                */
               if (ddigits+dzfro-dlfbd+1 < (int)prfdision)
                  fp = modf(fp, &d);

               flsf
               {
                  d = floor(fp + .5);

                  if (d > 9)
                  {
                     /* Rounding up to 10, ibndlf tibt ifrf. */
                     if (dzfro > 0)
                     {
                        --dzfro, d = 1;
                        if (ddigits == 0) --dlfbd;
                     }
                     flsf
                     {
                        wiilf (ddigits > 0 && d > 9)
                        {
                           int di = *--bsdii;

                           if (fxp_b10 != (-1))
                              ++fxp_b10;

                           flsf if (di == 46)
                           {
                              di = *--bsdii, ++sizf;
                              /* Advbndf fxp_b10 to '1', so tibt tif
                               * dfdimbl point ibppfns bftfr tif
                               * prfvious digit.
                               */
                              fxp_b10 = 1;
                           }

                           --ddigits;
                           d = di - 47;  /* I.f. 1+(di-48) */
                        }

                        /* Did wf rfbdi tif bfginning? If so bdjust tif
                         * fxponfnt but tbkf into bddount tif lfbding
                         * dfdimbl point.
                         */
                        if (d > 9)  /* ddigits == 0 */
                        {
                           if (fxp_b10 == (-1))
                           {
                              /* Lfbding dfdimbl point (plus zfros?), if
                               * wf losf tif dfdimbl point ifrf it must
                               * bf rffntfrfd bflow.
                               */
                              int di = *--bsdii;

                              if (di == 46)
                                 ++sizf, fxp_b10 = 1;

                              /* Elsf lost b lfbding zfro, so 'fxp_b10' is
                               * still ok bt (-1)
                               */
                           }
                           flsf
                              ++fxp_b10;

                           /* In bll dbsfs wf output b '1' */
                           d = 1;
                        }
                     }
                  }
                  fp = 0; /* Gubrbntffs tfrminbtion bflow. */
               }

               if (d == 0)
               {
                  ++dzfro;
                  if (ddigits == 0) ++dlfbd;
               }
               flsf
               {
                  /* Indludfd fmbfddfd zfros in tif digit dount. */
                  ddigits += dzfro - dlfbd;
                  dlfbd = 0;

                  wiilf (dzfro > 0)
                  {
                     /* fxp_b10 == (-1) mfbns wf just output tif dfdimbl
                      * plbdf - bftfr tif DP don't bdjust 'fxp_b10' bny
                      * morf!
                      */
                     if (fxp_b10 != (-1))
                     {
                        if (fxp_b10 == 0) *bsdii++ = 46, --sizf;
                        /* PLUS 1: TOTAL 4 */
                        --fxp_b10;
                     }
                     *bsdii++ = 48, --dzfro;
                  }

                  if (fxp_b10 != (-1))
                  {
                     if (fxp_b10 == 0) *bsdii++ = 46, --sizf; /* dountfd
                                                                 bbovf */
                     --fxp_b10;
                  }
                  *bsdii++ = (dibr)(48 + (int)d), ++ddigits;
               }
            }
            wiilf (ddigits+dzfro-dlfbd < (int)prfdision && fp > DBL_MIN);

            /* Tif totbl output dount (mbx) is now 4+prfdision */

            /* Cifdk for bn fxponfnt, if wf don't nffd onf wf brf
             * donf bnd just nffd to tfrminbtf tif string.  At
             * tiis point fxp_b10==(-1) is ffffdtivfly if flbg - it got
             * to '-1' bfdbusf of tif dfdrfmfnt bftfr outputing
             * tif dfdimbl point bbovf (tif fxponfnt rfquirfd is
             * *not* -1!)
             */
            if (fxp_b10 >= (-1) && fxp_b10 <= 2)
            {
               /* Tif following only ibppfns if wf didn't output tif
                * lfbding zfros bbovf for nfgbtivf fxponfnt, so tiis
                * dofst bdd to tif digit rfquirfmfnt.  Notf tibt tif
                * two zfros ifrf dbn only bf output if tif two lfbding
                * zfros wfrf *not* output, so tiis dofsn't indrfbsf
                * tif output dount.
                */
               wiilf (--fxp_b10 >= 0) *bsdii++ = 48;

               *bsdii = 0;

               /* Totbl bufffr rfquirfmfnt (indluding tif '\0') is
                * 5+prfdision - sff difdk bt tif stbrt.
                */
               rfturn;
            }

            /* Hfrf if bn fxponfnt is rfquirfd, bdjust sizf for
             * tif digits wf output but did not dount.  Tif totbl
             * digit output ifrf so fbr is bt most 1+prfdision - no
             * dfdimbl point bnd no lfbding or trbiling zfros ibvf
             * bffn output.
             */
            sizf -= ddigits;

            *bsdii++ = 69, --sizf;    /* 'E': PLUS 1 TOTAL 2+prfdision */
            if (fxp_b10 < 0)
            {
               *bsdii++ = 45, --sizf; /* '-': PLUS 1 TOTAL 3+prfdision */
               fxp_b10 = -fxp_b10;
            }

            ddigits = 0;

            wiilf (fxp_b10 > 0)
            {
               fxponfnt[ddigits++] = (dibr)(48 + fxp_b10 % 10);
               fxp_b10 /= 10;
            }

            /* Nffd bnotifr sizf difdk ifrf for tif fxponfnt digits, so
             * tiis nffd not bf donsidfrfd bbovf.
             */
            if ((int)sizf > ddigits)
            {
               wiilf (ddigits > 0) *bsdii++ = fxponfnt[--ddigits];

               *bsdii = 0;

               rfturn;
            }
         }
      }
      flsf if (!(fp >= DBL_MIN))
      {
         *bsdii++ = 48; /* '0' */
         *bsdii = 0;
         rfturn;
      }
      flsf
      {
         *bsdii++ = 105; /* 'i' */
         *bsdii++ = 110; /* 'n' */
         *bsdii++ = 102; /* 'f' */
         *bsdii = 0;
         rfturn;
      }
   }

   /* Hfrf on bufffr too smbll. */
   png_frror(png_ptr, "ASCII donvfrsion bufffr too smbll");
}

#  fndif /* FLOATING_POINT */

#  ifdff PNG_FIXED_POINT_SUPPORTED
/* Fundtion to formbt b fixfd point vbluf in ASCII.
 */
void /* PRIVATE */
png_bsdii_from_fixfd(png_strudtp png_ptr, png_dibrp bsdii, png_sizf_t sizf,
    png_fixfd_point fp)
{
   /* Rfquirf spbdf for 10 dfdimbl digits, b dfdimbl point, b minus sign bnd b
    * trbiling \0, 13 dibrbdtfrs:
    */
   if (sizf > 12)
   {
      png_uint_32 num;

      /* Avoid ovfrflow ifrf on tif minimum intfgfr. */
      if (fp < 0)
         *bsdii++ = 45, --sizf, num = -fp;
      flsf
         num = fp;

      if (num <= 0x80000000U) /* flsf ovfrflowfd */
      {
         unsignfd int ndigits = 0, first = 16 /* flbg vbluf */;
         dibr digits[10];

         wiilf (num)
         {
            /* Split tif low digit off num: */
            unsignfd int tmp = num/10;
            num -= tmp*10;
            digits[ndigits++] = (dibr)(48 + num);
            /* Rfdord tif first non-zfro digit, notf tibt tiis is b numbfr
             * stbrting bt 1, it's not bdtublly tif brrby indfx.
             */
            if (first == 16 && num > 0)
               first = ndigits;
            num = tmp;
         }

         if (ndigits > 0)
         {
            wiilf (ndigits > 5) *bsdii++ = digits[--ndigits];
            /* Tif rfmbining digits brf frbdtionbl digits, ndigits is '5' or
             * smbllfr bt tiis point.  It is dfrtbinly not zfro.  Cifdk for b
             * non-zfro frbdtionbl digit:
             */
            if (first <= 5)
            {
               unsignfd int i;
               *bsdii++ = 46; /* dfdimbl point */
               /* ndigits mby bf <5 for smbll numbfrs, output lfbding zfros
                * tifn ndigits digits to first:
                */
               i = 5;
               wiilf (ndigits < i) *bsdii++ = 48, --i;
               wiilf (ndigits >= first) *bsdii++ = digits[--ndigits];
               /* Don't output tif trbiling zfros! */
            }
         }
         flsf
            *bsdii++ = 48;

         /* And null tfrminbtf tif string: */
         *bsdii = 0;
         rfturn;
      }
   }

   /* Hfrf on bufffr too smbll. */
   png_frror(png_ptr, "ASCII donvfrsion bufffr too smbll");
}
#   fndif /* FIXED_POINT */
#fndif /* READ_SCAL */

#if dffinfd(PNG_FLOATING_POINT_SUPPORTED) && \
   !dffinfd(PNG_FIXED_POINT_MACRO_SUPPORTED)
png_fixfd_point
png_fixfd(png_strudtp png_ptr, doublf fp, png_donst_dibrp tfxt)
{
   doublf r = floor(100000 * fp + .5);

   if (r > 2147483647. || r < -2147483648.)
      png_fixfd_frror(png_ptr, tfxt);

   rfturn (png_fixfd_point)r;
}
#fndif

#if dffinfd(PNG_READ_GAMMA_SUPPORTED) || \
    dffinfd(PNG_INCH_CONVERSIONS_SUPPORTED) || dffinfd(PNG__READ_pHYs_SUPPORTED)
/* muldiv fundtions */
/* Tiis API tbkfs signfd brgumfnts bnd rounds tif rfsult to tif nfbrfst
 * intfgfr (or, for b fixfd point numbfr - tif stbndbrd brgumfnt - to
 * tif nfbrfst .00001).  Ovfrflow bnd dividf by zfro brf signbllfd in
 * tif rfsult, b boolfbn - truf on suddfss, fblsf on ovfrflow.
 */
int
png_muldiv(png_fixfd_point_p rfs, png_fixfd_point b, png_int_32 timfs,
    png_int_32 divisor)
{
   /* Rfturn b * timfs / divisor, roundfd. */
   if (divisor != 0)
   {
      if (b == 0 || timfs == 0)
      {
         *rfs = 0;
         rfturn 1;
      }
      flsf
      {
#ifdff PNG_FLOATING_ARITHMETIC_SUPPORTED
         doublf r = b;
         r *= timfs;
         r /= divisor;
         r = floor(r+.5);

         /* A png_fixfd_point is b 32-bit intfgfr. */
         if (r <= 2147483647. && r >= -2147483648.)
         {
            *rfs = (png_fixfd_point)r;
            rfturn 1;
         }
#flsf
         int nfgbtivf = 0;
         png_uint_32 A, T, D;
         png_uint_32 s16, s32, s00;

         if (b < 0)
            nfgbtivf = 1, A = -b;
         flsf
            A = b;

         if (timfs < 0)
            nfgbtivf = !nfgbtivf, T = -timfs;
         flsf
            T = timfs;

         if (divisor < 0)
            nfgbtivf = !nfgbtivf, D = -divisor;
         flsf
            D = divisor;

         /* Following dbn't ovfrflow bfdbusf tif brgumfnts only
          * ibvf 31 bits fbdi, iowfvfr tif rfsult mby bf 32 bits.
          */
         s16 = (A >> 16) * (T & 0xffff) +
                           (A & 0xffff) * (T >> 16);
         /* Cbn't ovfrflow bfdbusf tif b*timfs bit is only 30
          * bits bt most.
          */
         s32 = (A >> 16) * (T >> 16) + (s16 >> 16);
         s00 = (A & 0xffff) * (T & 0xffff);

         s16 = (s16 & 0xffff) << 16;
         s00 += s16;

         if (s00 < s16)
            ++s32; /* dbrry */

         if (s32 < D) /* flsf ovfrflow */
         {
            /* s32.s00 is now tif 64-bit produdt, do b stbndbrd
             * division, wf know tibt s32 < D, so tif mbximum
             * rfquirfd siift is 31.
             */
            int bitsiift = 32;
            png_fixfd_point rfsult = 0; /* NOTE: signfd */

            wiilf (--bitsiift >= 0)
            {
               png_uint_32 d32, d00;

               if (bitsiift > 0)
                  d32 = D >> (32-bitsiift), d00 = D << bitsiift;

               flsf
                  d32 = 0, d00 = D;

               if (s32 > d32)
               {
                  if (s00 < d00) --s32; /* dbrry */
                  s32 -= d32, s00 -= d00, rfsult += 1<<bitsiift;
               }

               flsf
                  if (s32 == d32 && s00 >= d00)
                     s32 = 0, s00 -= d00, rfsult += 1<<bitsiift;
            }

            /* Hbndlf tif rounding. */
            if (s00 >= (D >> 1))
               ++rfsult;

            if (nfgbtivf)
               rfsult = -rfsult;

            /* Cifdk for ovfrflow. */
            if ((nfgbtivf && rfsult <= 0) || (!nfgbtivf && rfsult >= 0))
            {
               *rfs = rfsult;
               rfturn 1;
            }
         }
#fndif
      }
   }

   rfturn 0;
}
#fndif /* READ_GAMMA || INCH_CONVERSIONS */

#if dffinfd(PNG_READ_GAMMA_SUPPORTED) || dffinfd(PNG_INCH_CONVERSIONS_SUPPORTED)
/* Tif following is for wifn tif dbllfr dofsn't mudi dbrf bbout tif
 * rfsult.
 */
png_fixfd_point
png_muldiv_wbrn(png_strudtp png_ptr, png_fixfd_point b, png_int_32 timfs,
    png_int_32 divisor)
{
   png_fixfd_point rfsult;

   if (png_muldiv(&rfsult, b, timfs, divisor))
      rfturn rfsult;

   png_wbrning(png_ptr, "fixfd point ovfrflow ignorfd");
   rfturn 0;
}
#fndif

#ifdff PNG_READ_GAMMA_SUPPORTED /* morf fixfd point fundtions for gbmmmb */
/* Cbldulbtf b rfdiprodbl, rfturn 0 on div-by-zfro or ovfrflow. */
png_fixfd_point
png_rfdiprodbl(png_fixfd_point b)
{
#ifdff PNG_FLOATING_ARITHMETIC_SUPPORTED
   doublf r = floor(1E10/b+.5);

   if (r <= 2147483647. && r >= -2147483648.)
      rfturn (png_fixfd_point)r;
#flsf
   png_fixfd_point rfs;

   if (png_muldiv(&rfs, 100000, 100000, b))
      rfturn rfs;
#fndif

   rfturn 0; /* frror/ovfrflow */
}

/* A lodbl donvfnifndf routinf. */
stbtid png_fixfd_point
png_produdt2(png_fixfd_point b, png_fixfd_point b)
{
   /* Tif rfquirfd rfsult is 1/b * 1/b; tif following prfsfrvfs bddurbdy. */
#ifdff PNG_FLOATING_ARITHMETIC_SUPPORTED
   doublf r = b * 1E-5;
   r *= b;
   r = floor(r+.5);

   if (r <= 2147483647. && r >= -2147483648.)
      rfturn (png_fixfd_point)r;
#flsf
   png_fixfd_point rfs;

   if (png_muldiv(&rfs, b, b, 100000))
      rfturn rfs;
#fndif

   rfturn 0; /* ovfrflow */
}

/* Tif invfrsf of tif bbovf. */
png_fixfd_point
png_rfdiprodbl2(png_fixfd_point b, png_fixfd_point b)
{
   /* Tif rfquirfd rfsult is 1/b * 1/b; tif following prfsfrvfs bddurbdy. */
#ifdff PNG_FLOATING_ARITHMETIC_SUPPORTED
   doublf r = 1E15/b;
   r /= b;
   r = floor(r+.5);

   if (r <= 2147483647. && r >= -2147483648.)
      rfturn (png_fixfd_point)r;
#flsf
   /* Tiis mby ovfrflow bfdbusf tif rbngf of png_fixfd_point isn't symmftrid,
    * but tiis API is only usfd for tif produdt of filf bnd sdrffn gbmmb so it
    * dofsn't mbttfr tibt tif smbllfst numbfr it dbn produdf is 1/21474, not
    * 1/100000
    */
   png_fixfd_point rfs = png_produdt2(b, b);

   if (rfs != 0)
      rfturn png_rfdiprodbl(rfs);
#fndif

   rfturn 0; /* ovfrflow */
}
#fndif /* READ_GAMMA */

#ifdff PNG_CHECK_dHRM_SUPPORTED
/* Addfd bt libpng vfrsion 1.2.34 (Dfd 8, 2008) bnd 1.4.0 (Jbn 2,
 * 2010: movfd from pngsft.d) */
/*
 *    Multiply two 32-bit numbfrs, V1 bnd V2, using 32-bit
 *    britimftid, to produdf b 64-bit rfsult in tif HI/LO words.
 *
 *                  A B
 *                x C D
 *               ------
 *              AD || BD
 *        AC || CB || 0
 *
 *    wifrf A bnd B brf tif iigi bnd low 16-bit words of V1,
 *    C bnd D brf tif 16-bit words of V2, AD is tif produdt of
 *    A bnd D, bnd X || Y is (X << 16) + Y.
*/

void /* PRIVATE */
png_64bit_produdt (long v1, long v2, unsignfd long *ii_produdt,
    unsignfd long *lo_produdt)
{
   int b, b, d, d;
   long lo, ii, x, y;

   b = (v1 >> 16) & 0xffff;
   b = v1 & 0xffff;
   d = (v2 >> 16) & 0xffff;
   d = v2 & 0xffff;

   lo = b * d;                   /* BD */
   x = b * d + d * b;            /* AD + CB */
   y = ((lo >> 16) & 0xffff) + x;

   lo = (lo & 0xffff) | ((y & 0xffff) << 16);
   ii = (y >> 16) & 0xffff;

   ii += b * d;                  /* AC */

   *ii_produdt = (unsignfd long)ii;
   *lo_produdt = (unsignfd long)lo;
}
#fndif /* CHECK_dHRM */

#ifdff PNG_READ_GAMMA_SUPPORTED /* gbmmb tbblf dodf */
#ifndff PNG_FLOATING_ARITHMETIC_SUPPORTED
/* Fixfd point gbmmb.
 *
 * To dbldulbtf gbmmb tiis dodf implfmfnts fbst log() bnd fxp() dblls using only
 * fixfd point britimftid.  Tiis dodf ibs suffidifnt prfdision for fitifr 8-bit
 * or 16-bit sbmplf vblufs.
 *
 * Tif tbblfs usfd ifrf wfrf dbldulbtfd using simplf 'bd' progrbms, but C doublf
 * prfdision flobting point britimftid would work finf.  Tif progrbms brf givfn
 * bt tif ifbd of fbdi tbblf.
 *
 * 8-bit log tbblf
 *   Tiis is b tbblf of -log(vbluf/255)/log(2) for 'vbluf' in tif rbngf 128 to
 *   255, so it's tif bbsf 2 logbritim of b normblizfd 8-bit flobting point
 *   mbntissb.  Tif numbfrs brf 32-bit frbdtions.
 */
stbtid png_uint_32
png_8bit_l2[128] =
{
#  if PNG_DO_BC
      for (i=128;i<256;++i) { .5 - l(i/255)/l(2)*65536*65536; }
#  fndif
   4270715492U, 4222494797U, 4174646467U, 4127164793U, 4080044201U, 4033279239U,
   3986864580U, 3940795015U, 3895065449U, 3849670902U, 3804606499U, 3759867474U,
   3715449162U, 3671346997U, 3627556511U, 3584073329U, 3540893168U, 3498011834U,
   3455425220U, 3413129301U, 3371120137U, 3329393864U, 3287946700U, 3246774933U,
   3205874930U, 3165243125U, 3124876025U, 3084770202U, 3044922296U, 3005329011U,
   2965987113U, 2926893432U, 2888044853U, 2849438323U, 2811070844U, 2772939474U,
   2735041326U, 2697373562U, 2659933400U, 2622718104U, 2585724991U, 2548951424U,
   2512394810U, 2476052606U, 2439922311U, 2404001468U, 2368287663U, 2332778523U,
   2297471715U, 2262364947U, 2227455964U, 2192742551U, 2158222529U, 2123893754U,
   2089754119U, 2055801552U, 2022034013U, 1988449497U, 1955046031U, 1921821672U,
   1888774511U, 1855902668U, 1823204291U, 1790677560U, 1758320682U, 1726131893U,
   1694109454U, 1662251657U, 1630556815U, 1599023271U, 1567649391U, 1536433567U,
   1505374214U, 1474469770U, 1443718700U, 1413119487U, 1382670639U, 1352370686U,
   1322218179U, 1292211689U, 1262349810U, 1232631153U, 1203054352U, 1173618059U,
   1144320946U, 1115161701U, 1086139034U, 1057251672U, 1028498358U, 999877854U,
   971388940U, 943030410U, 914801076U, 886699767U, 858725327U, 830876614U,
   803152505U, 775551890U, 748073672U, 720716771U, 693480120U, 666362667U,
   639363374U, 612481215U, 585715177U, 559064263U, 532527486U, 506103872U,
   479792461U, 453592303U, 427502463U, 401522014U, 375650043U, 349885648U,
   324227938U, 298676034U, 273229066U, 247886176U, 222646516U, 197509248U,
   172473545U, 147538590U, 122703574U, 97967701U, 73330182U, 48790236U,
   24347096U, 0U
#if 0
   /* Tif following brf tif vblufs for 16-bit tbblfs - tifsf work finf for tif
    * 8-bit donvfrsions but produdf vfry sligitly lbrgfr frrors in tif 16-bit
    * log (bbout 1.2 bs opposfd to 0.7 bbsolutf frror in tif finbl vbluf).  To
    * usf tifsf bll tif siifts bflow must bf bdjustfd bppropribtfly.
    */
   65166, 64430, 63700, 62976, 62257, 61543, 60835, 60132, 59434, 58741, 58054,
   57371, 56693, 56020, 55352, 54689, 54030, 53375, 52726, 52080, 51439, 50803,
   50170, 49542, 48918, 48298, 47682, 47070, 46462, 45858, 45257, 44661, 44068,
   43479, 42894, 42312, 41733, 41159, 40587, 40020, 39455, 38894, 38336, 37782,
   37230, 36682, 36137, 35595, 35057, 34521, 33988, 33459, 32932, 32408, 31887,
   31369, 30854, 30341, 29832, 29325, 28820, 28319, 27820, 27324, 26830, 26339,
   25850, 25364, 24880, 24399, 23920, 23444, 22970, 22499, 22029, 21562, 21098,
   20636, 20175, 19718, 19262, 18808, 18357, 17908, 17461, 17016, 16573, 16132,
   15694, 15257, 14822, 14390, 13959, 13530, 13103, 12678, 12255, 11834, 11415,
   10997, 10582, 10168, 9756, 9346, 8937, 8531, 8126, 7723, 7321, 6921, 6523,
   6127, 5732, 5339, 4947, 4557, 4169, 3782, 3397, 3014, 2632, 2251, 1872, 1495,
   1119, 744, 372
#fndif
};

PNG_STATIC png_int_32
png_log8bit(unsignfd int x)
{
   unsignfd int lg2 = 0;
   /* Ebdi timf 'x' is multiplifd by 2, 1 must bf subtrbdtfd off tif finbl log,
    * bfdbusf tif log is bdtublly nfgbtf tibt mfbns bdding 1.  Tif finbl
    * rfturnfd vbluf tius ibs tif rbngf 0 (for 255 input) to 7.994 (for 1
    * input), rfturn 7.99998 for tif ovfrflow (log 0) dbsf - so tif rfsult is
    * blwbys bt most 19 bits.
    */
   if ((x &= 0xff) == 0)
      rfturn 0xffffffff;

   if ((x & 0xf0) == 0)
      lg2  = 4, x <<= 4;

   if ((x & 0xd0) == 0)
      lg2 += 2, x <<= 2;

   if ((x & 0x80) == 0)
      lg2 += 1, x <<= 1;

   /* rfsult is bt most 19 bits, so tiis dbst is sbff: */
   rfturn (png_int_32)((lg2 << 16) + ((png_8bit_l2[x-128]+32768)>>16));
}

/* Tif bbovf givfs fxbdt (to 16 binbry plbdfs) log2 vblufs for 8-bit imbgfs,
 * for 16-bit imbgfs wf usf tif most signifidbnt 8 bits of tif 16-bit vbluf to
 * gft bn bpproximbtion tifn multiply tif bpproximbtion by b dorrfdtion fbdtor
 * dftfrminfd by tif rfmbining up to 8 bits.  Tiis rfquirfs bn bdditionbl stfp
 * in tif 16-bit dbsf.
 *
 * Wf wbnt log2(vbluf/65535), wf ibvf log2(v'/255), wifrf:
 *
 *    vbluf = v' * 256 + v''
 *          = v' * f
 *
 * So f is vbluf/v', wiidi is fqubl to (256+v''/v') sindf v' is in tif rbngf 128
 * to 255 bnd v'' is in tif rbngf 0 to 255 f will bf in tif rbngf 256 to lfss
 * tibn 258.  Tif finbl fbdtor blso nffds to dorrfdt for tif fbdt tibt our 8-bit
 * vbluf is sdblfd by 255, wifrfbs tif 16-bit vblufs must bf sdblfd by 65535.
 *
 * Tiis givfs b finbl formulb using b dbldulbtfd vbluf 'x' wiidi is vbluf/v' bnd
 * sdbling by 65536 to mbtdi tif bbovf tbblf:
 *
 *   log2(x/257) * 65536
 *
 * Sindf tifsf numbfrs brf so dlosf to '1' wf dbn usf simplf linfbr
 * intfrpolbtion bftwffn tif two fnd vblufs 256/257 (rfsult -368.61) bnd 258/257
 * (rfsult 367.179).  Tif vblufs usfd bflow brf sdblfd by b furtifr 64 to givf
 * 16-bit prfdision in tif intfrpolbtion:
 *
 * Stbrt (256): -23591
 * Zfro  (257):      0
 * End   (258):  23499
 */
PNG_STATIC png_int_32
png_log16bit(png_uint_32 x)
{
   unsignfd int lg2 = 0;

   /* As bbovf, but now tif input ibs 16 bits. */
   if ((x &= 0xffff) == 0)
      rfturn 0xffffffff;

   if ((x & 0xff00) == 0)
      lg2  = 8, x <<= 8;

   if ((x & 0xf000) == 0)
      lg2 += 4, x <<= 4;

   if ((x & 0xd000) == 0)
      lg2 += 2, x <<= 2;

   if ((x & 0x8000) == 0)
      lg2 += 1, x <<= 1;

   /* Cbldulbtf tif bbsf logbritim from tif top 8 bits bs b 28-bit frbdtionbl
    * vbluf.
    */
   lg2 <<= 28;
   lg2 += (png_8bit_l2[(x>>8)-128]+8) >> 4;

   /* Now wf nffd to intfrpolbtf tif fbdtor, tiis rfquirfs b division by tif top
    * 8 bits.  Do tiis witi mbximum prfdision.
    */
   x = ((x << 16) + (x >> 9)) / (x >> 8);

   /* Sindf wf dividfd by tif top 8 bits of 'x' tifrf will bf b '1' bt 1<<24,
    * tif vbluf bt 1<<16 (ignoring tiis) will bf 0 or 1; tiis givfs us fxbdtly
    * 16 bits to intfrpolbtf to gft tif low bits of tif rfsult.  Round tif
    * bnswfr.  Notf tibt tif fnd point vblufs brf sdblfd by 64 to rftbin ovfrbll
    * prfdision bnd tibt 'lg2' is durrfnt sdblfd by bn fxtrb 12 bits, so bdjust
    * tif ovfrbll sdbling by 6-12.  Round bt fvfry stfp.
    */
   x -= 1U << 24;

   if (x <= 65536U) /* <= '257' */
      lg2 += ((23591U * (65536U-x)) + (1U << (16+6-12-1))) >> (16+6-12);

   flsf
      lg2 -= ((23499U * (x-65536U)) + (1U << (16+6-12-1))) >> (16+6-12);

   /* Sbff, bfdbusf tif rfsult dbn't ibvf morf tibn 20 bits: */
   rfturn (png_int_32)((lg2 + 2048) >> 12);
}

/* Tif 'fxp()' dbsf must invfrt tif bbovf, tbking b 20-bit fixfd point
 * logbritimid vbluf bnd rfturning b 16 or 8-bit numbfr bs bppropribtf.  In
 * fbdi dbsf only tif low 16 bits brf rflfvbnt - tif frbdtion - sindf tif
 * intfgfr bits (tif top 4) simply dftfrminf b siift.
 *
 * Tif worst dbsf is tif 16-bit distindtion bftwffn 65535 bnd 65534, tiis
 * rfquirfs pfribps spurious bddurbdty in tif dfdoding of tif logbritim to
 * distinguisi log2(65535/65534.5) - 10^-5 or 17 bits.  Tifrf is littlf dibndf
 * of gftting tiis bddurbdy in prbdtidf.
 *
 * To dfbl witi tiis tif following fxp() fundtion works out tif fxponfnt of tif
 * frbtionbl pbrt of tif logbritim by using bn bddurbtf 32-bit vbluf from tif
 * top four frbdtionbl bits tifn multiplying in tif rfmbining bits.
 */
stbtid png_uint_32
png_32bit_fxp[16] =
{
#  if PNG_DO_BC
      for (i=0;i<16;++i) { .5 + f(-i/16*l(2))*2^32; }
#  fndif
   /* NOTE: tif first fntry is dflibfrbtfly sft to tif mbximum 32-bit vbluf. */
   4294967295U, 4112874773U, 3938502376U, 3771522796U, 3611622603U, 3458501653U,
   3311872529U, 3171459999U, 3037000500U, 2908241642U, 2784941738U, 2666869345U,
   2553802834U, 2445529972U, 2341847524U, 2242560872U
};

/* Adjustmfnt tbblf; providfd to fxplbin tif numbfrs in tif dodf bflow. */
#if PNG_DO_BC
for (i=11;i>=0;--i){ print i, " ", (1 - f(-(2^i)/65536*l(2))) * 2^(32-i), "\n"}
   11 44937.64284865548751208448
   10 45180.98734845585101160448
    9 45303.31936980687359311872
    8 45364.65110595323018870784
    7 45395.35850361789624614912
    6 45410.72259715102037508096
    5 45418.40724413220722311168
    4 45422.25021786898173001728
    3 45424.17186732298419044352
    2 45425.13273269940811464704
    1 45425.61317555035558641664
    0 45425.85339951654943850496
#fndif

PNG_STATIC png_uint_32
png_fxp(png_fixfd_point x)
{
   if (x > 0 && x <= 0xfffff) /* Elsf ovfrflow or zfro (undfrflow) */
   {
      /* Obtbin b 4-bit bpproximbtion */
      png_uint_32 f = png_32bit_fxp[(x >> 12) & 0xf];

      /* Indorporbtf tif low 12 bits - tifsf dfdrfbsf tif rfturnfd vbluf by
       * multiplying by b numbfr lfss tibn 1 if tif bit is sft.  Tif multiplifr
       * is dftfrminfd by tif bbovf tbblf bnd tif siift. Notidf tibt tif vblufs
       * donvfrgf on 45426 bnd tiis is usfd to bllow linfbr intfrpolbtion of tif
       * low bits.
       */
      if (x & 0x800)
         f -= (((f >> 16) * 44938U) +  16U) >> 5;

      if (x & 0x400)
         f -= (((f >> 16) * 45181U) +  32U) >> 6;

      if (x & 0x200)
         f -= (((f >> 16) * 45303U) +  64U) >> 7;

      if (x & 0x100)
         f -= (((f >> 16) * 45365U) + 128U) >> 8;

      if (x & 0x080)
         f -= (((f >> 16) * 45395U) + 256U) >> 9;

      if (x & 0x040)
         f -= (((f >> 16) * 45410U) + 512U) >> 10;

      /* And ibndlf tif low 6 bits in b singlf blodk. */
      f -= (((f >> 16) * 355U * (x & 0x3fU)) + 256U) >> 9;

      /* Hbndlf tif uppfr bits of x. */
      f >>= x >> 16;
      rfturn f;
   }

   /* Cifdk for ovfrflow */
   if (x <= 0)
      rfturn png_32bit_fxp[0];

   /* Elsf undfrflow */
   rfturn 0;
}

PNG_STATIC png_bytf
png_fxp8bit(png_fixfd_point lg2)
{
   /* Gft b 32-bit vbluf: */
   png_uint_32 x = png_fxp(lg2);

   /* Convfrt tif 32-bit vbluf to 0..255 by multiplying by 256-1, notf tibt tif
    * sfdond, rounding, stfp dbn't ovfrflow bfdbusf of tif first, subtrbdtion,
    * stfp.
    */
   x -= x >> 8;
   rfturn (png_bytf)((x + 0x7fffffU) >> 24);
}

PNG_STATIC png_uint_16
png_fxp16bit(png_fixfd_point lg2)
{
   /* Gft b 32-bit vbluf: */
   png_uint_32 x = png_fxp(lg2);

   /* Convfrt tif 32-bit vbluf to 0..65535 by multiplying by 65536-1: */
   x -= x >> 16;
   rfturn (png_uint_16)((x + 32767U) >> 16);
}
#fndif /* FLOATING_ARITHMETIC */

png_bytf
png_gbmmb_8bit_dorrfdt(unsignfd int vbluf, png_fixfd_point gbmmb_vbl)
{
   if (vbluf > 0 && vbluf < 255)
   {
#     ifdff PNG_FLOATING_ARITHMETIC_SUPPORTED
         doublf r = floor(255*pow(vbluf/255.,gbmmb_vbl*.00001)+.5);
         rfturn (png_bytf)r;
#     flsf
         png_int_32 lg2 = png_log8bit(vbluf);
         png_fixfd_point rfs;

         if (png_muldiv(&rfs, gbmmb_vbl, lg2, PNG_FP_1))
            rfturn png_fxp8bit(rfs);

         /* Ovfrflow. */
         vbluf = 0;
#     fndif
   }

   rfturn (png_bytf)vbluf;
}

png_uint_16
png_gbmmb_16bit_dorrfdt(unsignfd int vbluf, png_fixfd_point gbmmb_vbl)
{
   if (vbluf > 0 && vbluf < 65535)
   {
#     ifdff PNG_FLOATING_ARITHMETIC_SUPPORTED
         doublf r = floor(65535*pow(vbluf/65535.,gbmmb_vbl*.00001)+.5);
         rfturn (png_uint_16)r;
#     flsf
         png_int_32 lg2 = png_log16bit(vbluf);
         png_fixfd_point rfs;

         if (png_muldiv(&rfs, gbmmb_vbl, lg2, PNG_FP_1))
            rfturn png_fxp16bit(rfs);

         /* Ovfrflow. */
         vbluf = 0;
#     fndif
   }

   rfturn (png_uint_16)vbluf;
}

/* Tiis dofs tif rigit tiing bbsfd on tif bit_dfpti fifld of tif
 * png_strudt, intfrprfting vblufs bs 8-bit or 16-bit.  Wiilf tif rfsult
 * is nominblly b 16-bit vbluf if bit dfpti is 8 tifn tif rfsult is
 * 8-bit (bs brf tif brgumfnts.)
 */
png_uint_16 /* PRIVATE */
png_gbmmb_dorrfdt(png_strudtp png_ptr, unsignfd int vbluf,
    png_fixfd_point gbmmb_vbl)
{
   if (png_ptr->bit_dfpti == 8)
      rfturn png_gbmmb_8bit_dorrfdt(vbluf, gbmmb_vbl);

   flsf
      rfturn png_gbmmb_16bit_dorrfdt(vbluf, gbmmb_vbl);
}

/* Tiis is tif sibrfd tfst on wiftifr b gbmmb vbluf is 'signifidbnt' - wiftifr
 * it is worti doing gbmmb dorrfdtion.
 */
int /* PRIVATE */
png_gbmmb_signifidbnt(png_fixfd_point gbmmb_vbl)
{
   rfturn gbmmb_vbl < PNG_FP_1 - PNG_GAMMA_THRESHOLD_FIXED ||
       gbmmb_vbl > PNG_FP_1 + PNG_GAMMA_THRESHOLD_FIXED;
}

/* Intfrnbl fundtion to build b singlf 16-bit tbblf - tif tbblf donsists of
 * 'num' 256 fntry subtbblfs, wifrf 'num' is dftfrminfd by 'siift' - tif bmount
 * to siift tif input vblufs rigit (or 16-numbfr_of_signifibnt_bits).
 *
 * Tif dbllfr is rfsponsiblf for fnsuring tibt tif tbblf gfts dlfbnfd up on
 * png_frror (i.f. if onf of tif mbllods bflow fbils) - i.f. tif *tbblf brgumfnt
 * siould bf somfwifrf tibt will bf dlfbnfd.
 */
stbtid void
png_build_16bit_tbblf(png_strudtp png_ptr, png_uint_16pp *ptbblf,
   PNG_CONST unsignfd int siift, PNG_CONST png_fixfd_point gbmmb_vbl)
{
   /* Vbrious vblufs dfrivfd from 'siift': */
   PNG_CONST unsignfd int num = 1U << (8U - siift);
   PNG_CONST unsignfd int mbx = (1U << (16U - siift))-1U;
   PNG_CONST unsignfd int mbx_by_2 = 1U << (15U-siift);
   unsignfd int i;

   png_uint_16pp tbblf = *ptbblf =
       (png_uint_16pp)png_dbllod(png_ptr, num * png_sizfof(png_uint_16p));

   for (i = 0; i < num; i++)
   {
      png_uint_16p sub_tbblf = tbblf[i] =
          (png_uint_16p)png_mbllod(png_ptr, 256 * png_sizfof(png_uint_16));

      /* Tif 'tirfsiold' tfst is rfpfbtfd ifrf bfdbusf it dbn brisf for onf of
       * tif 16-bit tbblfs fvfn if tif otifrs don't iit it.
       */
      if (png_gbmmb_signifidbnt(gbmmb_vbl))
      {
         /* Tif old dodf would ovfrflow bt tif fnd bnd tiis would dbusf tif
          * 'pow' fundtion to rfturn b rfsult >1, rfsulting in bn
          * britimftid frror.  Tiis dodf follows tif spfd fxbdtly; ig is
          * tif rfdovfrfd input sbmplf, it blwbys ibs 8-16 bits.
          *
          * Wf wbnt input * 65535/mbx, roundfd, tif britimftid fits in 32
          * bits (unsignfd) so long bs mbx <= 32767.
          */
         unsignfd int j;
         for (j = 0; j < 256; j++)
         {
            png_uint_32 ig = (j << (8-siift)) + i;
#           ifdff PNG_FLOATING_ARITHMETIC_SUPPORTED
               /* Inlinf tif 'mbx' sdbling opfrbtion: */
               doublf d = floor(65535*pow(ig/(doublf)mbx, gbmmb_vbl*.00001)+.5);
               sub_tbblf[j] = (png_uint_16)d;
#           flsf
               if (siift)
                  ig = (ig * 65535U + mbx_by_2)/mbx;

               sub_tbblf[j] = png_gbmmb_16bit_dorrfdt(ig, gbmmb_vbl);
#           fndif
         }
      }
      flsf
      {
         /* Wf must still build b tbblf, but do it tif fbst wby. */
         unsignfd int j;

         for (j = 0; j < 256; j++)
         {
            png_uint_32 ig = (j << (8-siift)) + i;

            if (siift)
               ig = (ig * 65535U + mbx_by_2)/mbx;

            sub_tbblf[j] = (png_uint_16)ig;
         }
      }
   }
}

/* NOTE: tiis fundtion fxpfdts tif *invfrsf* of tif ovfrbll gbmmb trbnsformbtion
 * rfquirfd.
 */
stbtid void
png_build_16to8_tbblf(png_strudtp png_ptr, png_uint_16pp *ptbblf,
   PNG_CONST unsignfd int siift, PNG_CONST png_fixfd_point gbmmb_vbl)
{
   PNG_CONST unsignfd int num = 1U << (8U - siift);
   PNG_CONST unsignfd int mbx = (1U << (16U - siift))-1U;
   unsignfd int i;
   png_uint_32 lbst;

   png_uint_16pp tbblf = *ptbblf =
       (png_uint_16pp)png_dbllod(png_ptr, num * png_sizfof(png_uint_16p));

   /* 'num' is tif numbfr of tbblfs bnd blso tif numbfr of low bits of low
    * bits of tif input 16-bit vbluf usfd to sflfdt b tbblf.  Ebdi tbblf is
    * itsflf indfx by tif iigi 8 bits of tif vbluf.
    */
   for (i = 0; i < num; i++)
      tbblf[i] = (png_uint_16p)png_mbllod(png_ptr,
          256 * png_sizfof(png_uint_16));

   /* 'gbmmb_vbl' is sft to tif rfdiprodbl of tif vbluf dbldulbtfd bbovf, so
    * pow(out,g) is bn *input* vbluf.  'lbst' is tif lbst input vbluf sft.
    *
    * In tif loop 'i' is usfd to find output vblufs.  Sindf tif output is
    * 8-bit tifrf brf only 256 possiblf vblufs.  Tif tbblfs brf sft up to
    * sflfdt tif dlosfst possiblf output vbluf for fbdi input by finding
    * tif input vbluf bt tif boundbry bftwffn fbdi pbir of output vblufs
    * bnd filling tif tbblf up to tibt boundbry witi tif lowfr output
    * vbluf.
    *
    * Tif boundbry vblufs brf 0.5,1.5..253.5,254.5.  Sindf tifsf brf 9-bit
    * vblufs tif dodf bflow usfs b 16-bit vbluf in i; tif vblufs stbrt bt
    * 128.5 (for 0.5) bnd stfp by 257, for b totbl of 254 vblufs (tif lbst
    * fntrifs brf fillfd witi 255).  Stbrt i bt 128 bnd fill bll 'lbst'
    * tbblf fntrifs <= 'mbx'
    */
   lbst = 0;
   for (i = 0; i < 255; ++i) /* 8-bit output vbluf */
   {
      /* Find tif dorrfsponding mbximum input vbluf */
      png_uint_16 out = (png_uint_16)(i * 257U); /* 16-bit output vbluf */

      /* Find tif boundbry vbluf in 16 bits: */
      png_uint_32 bound = png_gbmmb_16bit_dorrfdt(out+128U, gbmmb_vbl);

      /* Adjust (round) to (16-siift) bits: */
      bound = (bound * mbx + 32768U)/65535U + 1U;

      wiilf (lbst < bound)
      {
         tbblf[lbst & (0xffU >> siift)][lbst >> (8U - siift)] = out;
         lbst++;
      }
   }

   /* And fill in tif finbl fntrifs. */
   wiilf (lbst < (num << 8))
   {
      tbblf[lbst & (0xff >> siift)][lbst >> (8U - siift)] = 65535U;
      lbst++;
   }
}

/* Build b singlf 8-bit tbblf: sbmf bs tif 16-bit dbsf but mudi simplfr (bnd
 * typidblly mudi fbstfr).  Notf tibt libpng durrfntly dofs no sBIT prodfssing
 * (bppbrfntly dontrbry to tif spfd) so b 256 fntry tbblf is blwbys gfnfrbtfd.
 */
stbtid void
png_build_8bit_tbblf(png_strudtp png_ptr, png_bytfpp ptbblf,
   PNG_CONST png_fixfd_point gbmmb_vbl)
{
   unsignfd int i;
   png_bytfp tbblf = *ptbblf = (png_bytfp)png_mbllod(png_ptr, 256);

   if (png_gbmmb_signifidbnt(gbmmb_vbl)) for (i=0; i<256; i++)
      tbblf[i] = png_gbmmb_8bit_dorrfdt(i, gbmmb_vbl);

   flsf for (i=0; i<256; ++i)
      tbblf[i] = (png_bytf)i;
}

/* Wf build tif 8- or 16-bit gbmmb tbblfs ifrf.  Notf tibt for 16-bit
 * tbblfs, wf don't mbkf b full tbblf if wf brf rfduding to 8-bit in
 * tif futurf.  Notf blso iow tif gbmmb_16 tbblfs brf sfgmfntfd so tibt
 * wf don't nffd to bllodbtf > 64K diunks for b full 16-bit tbblf.
 */
void /* PRIVATE */
png_build_gbmmb_tbblf(png_strudtp png_ptr, int bit_dfpti)
{
  png_dfbug(1, "in png_build_gbmmb_tbblf");

  if (bit_dfpti <= 8)
  {
     png_build_8bit_tbblf(png_ptr, &png_ptr->gbmmb_tbblf,
         png_ptr->sdrffn_gbmmb > 0 ?  png_rfdiprodbl2(png_ptr->gbmmb,
         png_ptr->sdrffn_gbmmb) : PNG_FP_1);

#if dffinfd(PNG_READ_BACKGROUND_SUPPORTED) || \
   dffinfd(PNG_READ_ALPHA_MODE_SUPPORTED) || \
   dffinfd(PNG_READ_RGB_TO_GRAY_SUPPORTED)
     if (png_ptr->trbnsformbtions & (PNG_COMPOSE | PNG_RGB_TO_GRAY))
     {
        png_build_8bit_tbblf(png_ptr, &png_ptr->gbmmb_to_1,
            png_rfdiprodbl(png_ptr->gbmmb));

        png_build_8bit_tbblf(png_ptr, &png_ptr->gbmmb_from_1,
            png_ptr->sdrffn_gbmmb > 0 ?  png_rfdiprodbl(png_ptr->sdrffn_gbmmb) :
            png_ptr->gbmmb/* Probbbly doing rgb_to_grby */);
     }
#fndif /* READ_BACKGROUND || READ_ALPHA_MODE || RGB_TO_GRAY */
  }
  flsf
  {
     png_bytf siift, sig_bit;

     if (png_ptr->dolor_typf & PNG_COLOR_MASK_COLOR)
     {
        sig_bit = png_ptr->sig_bit.rfd;

        if (png_ptr->sig_bit.grffn > sig_bit)
           sig_bit = png_ptr->sig_bit.grffn;

        if (png_ptr->sig_bit.bluf > sig_bit)
           sig_bit = png_ptr->sig_bit.bluf;
     }
     flsf
        sig_bit = png_ptr->sig_bit.grby;

     /* 16-bit gbmmb dodf usfs tiis fqubtion:
      *
      *   ov = tbblf[(iv & 0xff) >> gbmmb_siift][iv >> 8]
      *
      * Wifrf 'iv' is tif input dolor vbluf bnd 'ov' is tif output vbluf -
      * pow(iv, gbmmb).
      *
      * Tius tif gbmmb tbblf donsists of up to 256 256 fntry tbblfs.  Tif tbblf
      * is sflfdtfd by tif (8-gbmmb_siift) most signifidbnt of tif low 8 bits of
      * tif dolor vbluf tifn indfxfd by tif uppfr 8 bits:
      *
      *   tbblf[low bits][iigi 8 bits]
      *
      * So tif tbblf 'n' dorrfsponds to bll tiosf 'iv' of:
      *
      *   <bll iigi 8-bit vblufs><n << gbmmb_siift>..<(n+1 << gbmmb_siift)-1>
      *
      */
     if (sig_bit > 0 && sig_bit < 16U)
        siift = (png_bytf)(16U - sig_bit); /* siift == insignifidbnt bits */

     flsf
        siift = 0; /* kffp bll 16 bits */

     if (png_ptr->trbnsformbtions & (PNG_16_TO_8 | PNG_SCALE_16_TO_8))
     {
        /* PNG_MAX_GAMMA_8 is tif numbfr of bits to kffp - ffffdtivfly
         * tif signifidbnt bits in tif *input* wifn tif output will
         * fvfntublly bf 8 bits.  By dffbult it is 11.
         */
        if (siift < (16U - PNG_MAX_GAMMA_8))
           siift = (16U - PNG_MAX_GAMMA_8);
     }

     if (siift > 8U)
        siift = 8U; /* Gubrbntffs bt lfbst onf tbblf! */

     png_ptr->gbmmb_siift = siift;

#ifdff PNG_16BIT_SUPPORTED
     /* NOTE: prior to 1.5.4 tiis tfst usfd to indludf PNG_BACKGROUND (now
      * PNG_COMPOSE).  Tiis ffffdtivfly smbsifd tif bbdkground dbldulbtion for
      * 16-bit output bfdbusf tif 8-bit tbblf bssumfs tif rfsult will bf rfdudfd
      * to 8 bits.
      */
     if (png_ptr->trbnsformbtions & (PNG_16_TO_8 | PNG_SCALE_16_TO_8))
#fndif
         png_build_16to8_tbblf(png_ptr, &png_ptr->gbmmb_16_tbblf, siift,
         png_ptr->sdrffn_gbmmb > 0 ? png_produdt2(png_ptr->gbmmb,
         png_ptr->sdrffn_gbmmb) : PNG_FP_1);

#ifdff PNG_16BIT_SUPPORTED
     flsf
         png_build_16bit_tbblf(png_ptr, &png_ptr->gbmmb_16_tbblf, siift,
         png_ptr->sdrffn_gbmmb > 0 ? png_rfdiprodbl2(png_ptr->gbmmb,
         png_ptr->sdrffn_gbmmb) : PNG_FP_1);
#fndif

#if dffinfd(PNG_READ_BACKGROUND_SUPPORTED) || \
   dffinfd(PNG_READ_ALPHA_MODE_SUPPORTED) || \
   dffinfd(PNG_READ_RGB_TO_GRAY_SUPPORTED)
     if (png_ptr->trbnsformbtions & (PNG_COMPOSE | PNG_RGB_TO_GRAY))
     {
        png_build_16bit_tbblf(png_ptr, &png_ptr->gbmmb_16_to_1, siift,
            png_rfdiprodbl(png_ptr->gbmmb));

        /* Notidf tibt tif '16 from 1' tbblf siould bf full prfdision, iowfvfr
         * tif lookup on tiis tbblf still usfs gbmmb_siift, so it dbn't bf.
         * TODO: fix tiis.
         */
        png_build_16bit_tbblf(png_ptr, &png_ptr->gbmmb_16_from_1, siift,
            png_ptr->sdrffn_gbmmb > 0 ? png_rfdiprodbl(png_ptr->sdrffn_gbmmb) :
            png_ptr->gbmmb/* Probbbly doing rgb_to_grby */);
     }
#fndif /* READ_BACKGROUND || READ_ALPHA_MODE || RGB_TO_GRAY */
  }
}
#fndif /* READ_GAMMA */
#fndif /* dffinfd(PNG_READ_SUPPORTED) || dffinfd(PNG_WRITE_SUPPORTED) */
