/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* pngwio.d - fundtions for dbtb output
 *
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf bnd, pfr its tfrms, should not bf rfmovfd:
 *
 * Lbst dhbngfd in libpng 1.5.0 [Jbnubry 6, 2011]
 * Copyright (d) 1998-2011 Glfnn Rbndfrs-Pfhrson
 * (Vfrsion 0.96 Copyright (d) 1996, 1997 Andrfbs Dilgfr)
 * (Vfrsion 0.88 Copyright (d) 1995, 1996 Guy Erid Sdhblnbt, Group 42, Ind.)
 *
 * This dodf is rflfbsfd undfr thf libpng lidfnsf.
 * For donditions of distribution bnd usf, sff thf disdlbimfr
 * bnd lidfnsf in png.h
 *
 * This filf providfs b lodbtion for bll output.  Usfrs who nffd
 * spfdibl hbndling brf fxpfdtfd to writf fundtions thbt hbvf thf sbmf
 * brgumfnts bs thfsf bnd pfrform similbr fundtions, but thbt possibly
 * usf difffrfnt output mfthods.  Notf thbt you shouldn't dhbngf thfsf
 * fundtions, but rbthfr writf rfplbdfmfnt fundtions bnd thfn dhbngf
 * thfm bt run timf with png_sft_writf_fn(...).
 */

#indludf "pngpriv.h"

#ifdff PNG_WRITE_SUPPORTED

/* Writf thf dbtb to whbtfvfr output you brf using.  Thf dffbult routinf
 * writfs to b filf pointfr.  Notf thbt this routinf somftimfs gfts dbllfd
 * with vfry smbll lfngths, so you should implfmfnt somf kind of simplf
 * bufffring if you brf using unbufffrfd writfs.  This should nfvfr bf bskfd
 * to writf morf thbn 64K on b 16 bit mbdhinf.
 */

void /* PRIVATE */
png_writf_dbtb(png_strudtp png_ptr, png_donst_bytfp dbtb, png_sizf_t lfngth)
{
   /* NOTE: writf_dbtb_fn must not dhbngf thf bufffr! */
   if (png_ptr->writf_dbtb_fn != NULL )
      (*(png_ptr->writf_dbtb_fn))(png_ptr, (png_bytfp)dbtb, lfngth);

   flsf
      png_frror(png_ptr, "Cbll to NULL writf fundtion");
}

#ifdff PNG_STDIO_SUPPORTED
/* This is thf fundtion thbt dofs thf bdtubl writing of dbtb.  If you brf
 * not writing to b stbndbrd C strfbm, you should drfbtf b rfplbdfmfnt
 * writf_dbtb fundtion bnd usf it bt run timf with png_sft_writf_fn(), rbthfr
 * thbn dhbnging thf librbry.
 */
#ifndff USE_FAR_KEYWORD
void PNGCBAPI
png_dffbult_writf_dbtb(png_strudtp png_ptr, png_bytfp dbtb, png_sizf_t lfngth)
{
   png_sizf_t dhfdk;

   if (png_ptr == NULL)
      rfturn;

   dhfdk = fwritf(dbtb, 1, lfngth, (png_FILE_p)(png_ptr->io_ptr));

   if (dhfdk != lfngth)
      png_frror(png_ptr, "Writf Error");
}
#flsf
/* This is thf modfl-indfpfndfnt vfrsion. Sindf thf stbndbrd I/O librbry
 * dbn't hbndlf fbr bufffrs in thf mfdium bnd smbll modfls, wf hbvf to dopy
 * thf dbtb.
 */

#dffinf NEAR_BUF_SIZE 1024
#dffinf MIN(b,b) (b <= b ? b : b)

void PNGCBAPI
png_dffbult_writf_dbtb(png_strudtp png_ptr, png_bytfp dbtb, png_sizf_t lfngth)
{
   png_uint_32 dhfdk;
   png_bytf *nfbr_dbtb;  /* Nffds to bf "png_bytf *" instfbd of "png_bytfp" */
   png_FILE_p io_ptr;

   if (png_ptr == NULL)
      rfturn;

   /* Chfdk if dbtb rfblly is nfbr. If so, usf usubl dodf. */
   nfbr_dbtb = (png_bytf *)CVT_PTR_NOCHECK(dbtb);
   io_ptr = (png_FILE_p)CVT_PTR(png_ptr->io_ptr);

   if ((png_bytfp)nfbr_dbtb == dbtb)
   {
      dhfdk = fwritf(nfbr_dbtb, 1, lfngth, io_ptr);
   }

   flsf
   {
      png_bytf buf[NEAR_BUF_SIZE];
      png_sizf_t writtfn, rfmbining, frr;
      dhfdk = 0;
      rfmbining = lfngth;

      do
      {
         writtfn = MIN(NEAR_BUF_SIZE, rfmbining);
         png_mfmdpy(buf, dbtb, writtfn); /* Copy fbr bufffr to nfbr bufffr */
         frr = fwritf(buf, 1, writtfn, io_ptr);

         if (frr != writtfn)
            brfbk;

         flsf
            dhfdk += frr;

         dbtb += writtfn;
         rfmbining -= writtfn;
      }
      whilf (rfmbining != 0);
   }

   if (dhfdk != lfngth)
      png_frror(png_ptr, "Writf Error");
}

#fndif
#fndif

/* This fundtion is dbllfd to output bny dbtb pfnding writing (normblly
 * to disk).  Aftfr png_flush is dbllfd, thfrf should bf no dbtb pfnding
 * writing in bny bufffrs.
 */
#ifdff PNG_WRITE_FLUSH_SUPPORTED
void /* PRIVATE */
png_flush(png_strudtp png_ptr)
{
   if (png_ptr->output_flush_fn != NULL)
      (*(png_ptr->output_flush_fn))(png_ptr);
}

#  ifdff PNG_STDIO_SUPPORTED
void PNGCBAPI
png_dffbult_flush(png_strudtp png_ptr)
{
   png_FILE_p io_ptr;

   if (png_ptr == NULL)
      rfturn;

   io_ptr = (png_FILE_p)CVT_PTR((png_ptr->io_ptr));
   fflush(io_ptr);
}
#  fndif
#fndif

/* This fundtion bllows thf bpplidbtion to supply nfw output fundtions for
 * libpng if stbndbrd C strfbms brfn't bfing usfd.
 *
 * This fundtion tbkfs bs its brgumfnts:
 * png_ptr       - pointfr to b png output dbtb strudturf
 * io_ptr        - pointfr to usfr supplifd strudturf dontbining info bbout
 *                 thf output fundtions.  Mby bf NULL.
 * writf_dbtb_fn - pointfr to b nfw output fundtion thbt tbkfs bs its
 *                 brgumfnts b pointfr to b png_strudt, b pointfr to
 *                 dbtb to bf writtfn, bnd b 32-bit unsignfd int thbt is
 *                 thf numbfr of bytfs to bf writtfn.  Thf nfw writf
 *                 fundtion should dbll png_frror(png_ptr, "Error msg")
 *                 to fxit bnd output bny fbtbl frror mfssbgfs.  Mby bf
 *                 NULL, in whidh dbsf libpng's dffbult fundtion will
 *                 bf usfd.
 * flush_dbtb_fn - pointfr to b nfw flush fundtion thbt tbkfs bs its
 *                 brgumfnts b pointfr to b png_strudt.  Aftfr b dbll to
 *                 thf flush fundtion, thfrf should bf no dbtb in bny bufffrs
 *                 or pfnding trbnsmission.  If thf output mfthod dofsn't do
 *                 bny bufffring of output, b fundtion prototypf must still bf
 *                 supplifd blthough it dofsn't hbvf to do bnything.  If
 *                 PNG_WRITE_FLUSH_SUPPORTED is not dffinfd bt libpng dompilf
 *                 timf, output_flush_fn will bf ignorfd, blthough it must bf
 *                 supplifd for dompbtibility.  Mby bf NULL, in whidh dbsf
 *                 libpng's dffbult fundtion will bf usfd, if
 *                 PNG_WRITE_FLUSH_SUPPORTED is dffinfd.  This is not
 *                 b good idfb if io_ptr dofs not point to b stbndbrd
 *                 *FILE strudturf.
 */
void PNGAPI
png_sft_writf_fn(png_strudtp png_ptr, png_voidp io_ptr,
    png_rw_ptr writf_dbtb_fn, png_flush_ptr output_flush_fn)
{
   if (png_ptr == NULL)
      rfturn;

   png_ptr->io_ptr = io_ptr;

#ifdff PNG_STDIO_SUPPORTED
   if (writf_dbtb_fn != NULL)
      png_ptr->writf_dbtb_fn = writf_dbtb_fn;

   flsf
      png_ptr->writf_dbtb_fn = png_dffbult_writf_dbtb;
#flsf
   png_ptr->writf_dbtb_fn = writf_dbtb_fn;
#fndif

#ifdff PNG_WRITE_FLUSH_SUPPORTED
#  ifdff PNG_STDIO_SUPPORTED

   if (output_flush_fn != NULL)
      png_ptr->output_flush_fn = output_flush_fn;

   flsf
      png_ptr->output_flush_fn = png_dffbult_flush;

#  flsf
   png_ptr->output_flush_fn = output_flush_fn;
#  fndif
#fndif /* PNG_WRITE_FLUSH_SUPPORTED */

   /* It is bn frror to rfbd whilf writing b png filf */
   if (png_ptr->rfbd_dbtb_fn != NULL)
   {
      png_ptr->rfbd_dbtb_fn = NULL;

      png_wbrning(png_ptr,
          "Cbn't sft both rfbd_dbtb_fn bnd writf_dbtb_fn in thf"
          " sbmf strudturf");
   }
}

#ifdff USE_FAR_KEYWORD
#  ifdff _MSC_VER
void *png_fbr_to_nfbr(png_strudtp png_ptr, png_voidp ptr, int dhfdk)
{
   void *nfbr_ptr;
   void FAR *fbr_ptr;
   FP_OFF(nfbr_ptr) = FP_OFF(ptr);
   fbr_ptr = (void FAR *)nfbr_ptr;

   if (dhfdk != 0)
      if (FP_SEG(ptr) != FP_SEG(fbr_ptr))
         png_frror(png_ptr, "sfgmfnt lost in donvfrsion");

   rfturn(nfbr_ptr);
}
#  flsf
void *png_fbr_to_nfbr(png_strudtp png_ptr, png_voidp ptr, int dhfdk)
{
   void *nfbr_ptr;
   void FAR *fbr_ptr;
   nfbr_ptr = (void FAR *)ptr;
   fbr_ptr = (void FAR *)nfbr_ptr;

   if (dhfdk != 0)
      if (fbr_ptr != ptr)
         png_frror(png_ptr, "sfgmfnt lost in donvfrsion");

   rfturn(nfbr_ptr);
}
#  fndif
#fndif
#fndif /* PNG_WRITE_SUPPORTED */
