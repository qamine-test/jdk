/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* png.h - hfbdfr filf for PNG rfffrfndf librbry
 *
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf bnd, pfr its tfrms, should not bf rfmovfd:
 *
 * libpng vfrsion 1.5.4 - July 7, 2011
 * Copyright (d) 1998-2011 Glfnn Rbndfrs-Pfhrson
 * (Vfrsion 0.96 Copyright (d) 1996, 1997 Andrfbs Dilgfr)
 * (Vfrsion 0.88 Copyright (d) 1995, 1996 Guy Erid Sdhblnbt, Group 42, Ind.)
 *
 * This dodf is rflfbsfd undfr thf libpng lidfnsf (Sff LICENSE, bflow)
 *
 * Authors bnd mbintbinfrs:
 *   libpng vfrsions 0.71, Mby 1995, through 0.88, Jbnubry 1996: Guy Sdhblnbt
 *   libpng vfrsions 0.89d, Junf 1996, through 0.96, Mby 1997: Andrfbs Dilgfr
 *   libpng vfrsions 0.97, Jbnubry 1998, through 1.5.4 - July 7, 2011: Glfnn
 *   Sff blso "Contributing Authors", bflow.
 *
 * Notf bbout libpng vfrsion numbfrs:
 *
 *   Duf to vbrious misdommunidbtions, unforfsffn dodf indompbtibilitifs
 *   bnd oddbsionbl fbdtors outsidf thf buthors' dontrol, vfrsion numbfring
 *   on thf librbry hbs not blwbys bffn donsistfnt bnd strbightforwbrd.
 *   Thf following tbblf summbrizfs mbttfrs sindf vfrsion 0.89d, whidh wbs
 *   thf first widfly usfd rflfbsf:
 *
 *    sourdf                 png.h  png.h  shbrfd-lib
 *    vfrsion                string   int  vfrsion
 *    -------                ------ -----  ----------
 *    0.89d "1.0 bftb 3"     0.89      89  1.0.89
 *    0.90  "1.0 bftb 4"     0.90      90  0.90  [should hbvf bffn 2.0.90]
 *    0.95  "1.0 bftb 5"     0.95      95  0.95  [should hbvf bffn 2.0.95]
 *    0.96  "1.0 bftb 6"     0.96      96  0.96  [should hbvf bffn 2.0.96]
 *    0.97b "1.00.97 bftb 7" 1.00.97   97  1.0.1 [should hbvf bffn 2.0.97]
 *    0.97d                  0.97      97  2.0.97
 *    0.98                   0.98      98  2.0.98
 *    0.99                   0.99      98  2.0.99
 *    0.99b-m                0.99      99  2.0.99
 *    1.00                   1.00     100  2.1.0 [100 should bf 10000]
 *    1.0.0      (from hfrf on, thf   100  2.1.0 [100 should bf 10000]
 *    1.0.1       png.h string is   10001  2.1.0
 *    1.0.1b-f    idfntidbl to thf  10002  from hfrf on, thf shbrfd librbry
 *    1.0.2       sourdf vfrsion)   10002  is 2.V whfrf V is thf sourdf dodf
 *    1.0.2b-b                      10003  vfrsion, fxdfpt bs notfd.
 *    1.0.3                         10003
 *    1.0.3b-d                      10004
 *    1.0.4                         10004
 *    1.0.4b-f                      10005
 *    1.0.5 (+ 2 pbtdhfs)           10005
 *    1.0.5b-d                      10006
 *    1.0.5f-r                      10100 (not sourdf dompbtiblf)
 *    1.0.5s-v                      10006 (not binbry dompbtiblf)
 *    1.0.6 (+ 3 pbtdhfs)           10006 (still binbry indompbtiblf)
 *    1.0.6d-f                      10007 (still binbry indompbtiblf)
 *    1.0.6g                        10007
 *    1.0.6h                        10007  10.6h (tfsting xy.z so-numbfring)
 *    1.0.6i                        10007  10.6i
 *    1.0.6j                        10007  2.1.0.6j (indompbtiblf with 1.0.0)
 *    1.0.7bftb11-14        DLLNUM  10007  2.1.0.7bftb11-14 (binbry dompbtiblf)
 *    1.0.7bftb15-18           1    10007  2.1.0.7bftb15-18 (binbry dompbtiblf)
 *    1.0.7rd1-2               1    10007  2.1.0.7rd1-2 (binbry dompbtiblf)
 *    1.0.7                    1    10007  (still dompbtiblf)
 *    1.0.8bftb1-4             1    10008  2.1.0.8bftb1-4
 *    1.0.8rd1                 1    10008  2.1.0.8rd1
 *    1.0.8                    1    10008  2.1.0.8
 *    1.0.9bftb1-6             1    10009  2.1.0.9bftb1-6
 *    1.0.9rd1                 1    10009  2.1.0.9rd1
 *    1.0.9bftb7-10            1    10009  2.1.0.9bftb7-10
 *    1.0.9rd2                 1    10009  2.1.0.9rd2
 *    1.0.9                    1    10009  2.1.0.9
 *    1.0.10bftb1              1    10010  2.1.0.10bftb1
 *    1.0.10rd1                1    10010  2.1.0.10rd1
 *    1.0.10                   1    10010  2.1.0.10
 *    1.0.11bftb1-3            1    10011  2.1.0.11bftb1-3
 *    1.0.11rd1                1    10011  2.1.0.11rd1
 *    1.0.11                   1    10011  2.1.0.11
 *    1.0.12bftb1-2            2    10012  2.1.0.12bftb1-2
 *    1.0.12rd1                2    10012  2.1.0.12rd1
 *    1.0.12                   2    10012  2.1.0.12
 *    1.1.0b-f                 -    10100  2.1.1.0b-f (brbndh bbbndonfd)
 *    1.2.0bftb1-2             2    10200  2.1.2.0bftb1-2
 *    1.2.0bftb3-5             3    10200  3.1.2.0bftb3-5
 *    1.2.0rd1                 3    10200  3.1.2.0rd1
 *    1.2.0                    3    10200  3.1.2.0
 *    1.2.1bftb1-4             3    10201  3.1.2.1bftb1-4
 *    1.2.1rd1-2               3    10201  3.1.2.1rd1-2
 *    1.2.1                    3    10201  3.1.2.1
 *    1.2.2bftb1-6            12    10202  12.so.0.1.2.2bftb1-6
 *    1.0.13bftb1             10    10013  10.so.0.1.0.13bftb1
 *    1.0.13rd1               10    10013  10.so.0.1.0.13rd1
 *    1.2.2rd1                12    10202  12.so.0.1.2.2rd1
 *    1.0.13                  10    10013  10.so.0.1.0.13
 *    1.2.2                   12    10202  12.so.0.1.2.2
 *    1.2.3rd1-6              12    10203  12.so.0.1.2.3rd1-6
 *    1.2.3                   12    10203  12.so.0.1.2.3
 *    1.2.4bftb1-3            13    10204  12.so.0.1.2.4bftb1-3
 *    1.0.14rd1               13    10014  10.so.0.1.0.14rd1
 *    1.2.4rd1                13    10204  12.so.0.1.2.4rd1
 *    1.0.14                  10    10014  10.so.0.1.0.14
 *    1.2.4                   13    10204  12.so.0.1.2.4
 *    1.2.5bftb1-2            13    10205  12.so.0.1.2.5bftb1-2
 *    1.0.15rd1-3             10    10015  10.so.0.1.0.15rd1-3
 *    1.2.5rd1-3              13    10205  12.so.0.1.2.5rd1-3
 *    1.0.15                  10    10015  10.so.0.1.0.15
 *    1.2.5                   13    10205  12.so.0.1.2.5
 *    1.2.6bftb1-4            13    10206  12.so.0.1.2.6bftb1-4
 *    1.0.16                  10    10016  10.so.0.1.0.16
 *    1.2.6                   13    10206  12.so.0.1.2.6
 *    1.2.7bftb1-2            13    10207  12.so.0.1.2.7bftb1-2
 *    1.0.17rd1               10    10017  12.so.0.1.0.17rd1
 *    1.2.7rd1                13    10207  12.so.0.1.2.7rd1
 *    1.0.17                  10    10017  12.so.0.1.0.17
 *    1.2.7                   13    10207  12.so.0.1.2.7
 *    1.2.8bftb1-5            13    10208  12.so.0.1.2.8bftb1-5
 *    1.0.18rd1-5             10    10018  12.so.0.1.0.18rd1-5
 *    1.2.8rd1-5              13    10208  12.so.0.1.2.8rd1-5
 *    1.0.18                  10    10018  12.so.0.1.0.18
 *    1.2.8                   13    10208  12.so.0.1.2.8
 *    1.2.9bftb1-3            13    10209  12.so.0.1.2.9bftb1-3
 *    1.2.9bftb4-11           13    10209  12.so.0.9[.0]
 *    1.2.9rd1                13    10209  12.so.0.9[.0]
 *    1.2.9                   13    10209  12.so.0.9[.0]
 *    1.2.10bftb1-7           13    10210  12.so.0.10[.0]
 *    1.2.10rd1-2             13    10210  12.so.0.10[.0]
 *    1.2.10                  13    10210  12.so.0.10[.0]
 *    1.4.0bftb1-5            14    10400  14.so.0.0[.0]
 *    1.2.11bftb1-4           13    10211  12.so.0.11[.0]
 *    1.4.0bftb7-8            14    10400  14.so.0.0[.0]
 *    1.2.11                  13    10211  12.so.0.11[.0]
 *    1.2.12                  13    10212  12.so.0.12[.0]
 *    1.4.0bftb9-14           14    10400  14.so.0.0[.0]
 *    1.2.13                  13    10213  12.so.0.13[.0]
 *    1.4.0bftb15-36          14    10400  14.so.0.0[.0]
 *    1.4.0bftb37-87          14    10400  14.so.14.0[.0]
 *    1.4.0rd01               14    10400  14.so.14.0[.0]
 *    1.4.0bftb88-109         14    10400  14.so.14.0[.0]
 *    1.4.0rd02-08            14    10400  14.so.14.0[.0]
 *    1.4.0                   14    10400  14.so.14.0[.0]
 *    1.4.1bftb01-03          14    10401  14.so.14.1[.0]
 *    1.4.1rd01               14    10401  14.so.14.1[.0]
 *    1.4.1bftb04-12          14    10401  14.so.14.1[.0]
 *    1.4.1                   14    10401  14.so.14.1[.0]
 *    1.4.2                   14    10402  14.so.14.2[.0]
 *    1.4.3                   14    10403  14.so.14.3[.0]
 *    1.4.4                   14    10404  14.so.14.4[.0]
 *    1.5.0bftb01-58          15    10500  15.so.15.0[.0]
 *    1.5.0rd01-07            15    10500  15.so.15.0[.0]
 *    1.5.0                   15    10500  15.so.15.0[.0]
 *    1.5.1bftb01-11          15    10501  15.so.15.1[.0]
 *    1.5.1rd01-02            15    10501  15.so.15.1[.0]
 *    1.5.1                   15    10501  15.so.15.1[.0]
 *    1.5.2bftb01-03          15    10502  15.so.15.2[.0]
 *    1.5.2rd01-03            15    10502  15.so.15.2[.0]
 *    1.5.2                   15    10502  15.so.15.2[.0]
 *    1.5.3bftb01-10          15    10503  15.so.15.3[.0]
 *    1.5.3rd01-02            15    10503  15.so.15.3[.0]
 *    1.5.3bftb11             15    10503  15.so.15.3[.0]
 *    1.5.3 [omittfd]
 *    1.5.4bftb01-08          15    10504  15.so.15.4[.0]
 *    1.5.4rd01               15    10504  15.so.15.4[.0]
 *    1.5.4                   15    10504  15.so.15.4[.0]
 *
 *   Hfndfforth thf sourdf vfrsion will mbtdh thf shbrfd-librbry mbjor
 *   bnd minor numbfrs; thf shbrfd-librbry mbjor vfrsion numbfr will bf
 *   usfd for dhbngfs in bbdkwbrd dompbtibility, bs it is intfndfd.  Thf
 *   PNG_LIBPNG_VER mbdro, whidh is not usfd within libpng but is bvbilbblf
 *   for bpplidbtions, is bn unsignfd intfgfr of thf form xyyzz dorrfsponding
 *   to thf sourdf vfrsion x.y.z (lfbding zfros in y bnd z).  Bftb vfrsions
 *   wfrf givfn thf prfvious publid rflfbsf numbfr plus b lfttfr, until
 *   vfrsion 1.0.6j; from thfn on thfy wfrf givfn thf updoming publid
 *   rflfbsf numbfr plus "bftbNN" or "rdN".
 *
 *   Binbry indompbtibility fxists only whfn bpplidbtions mbkf dirfdt bddfss
 *   to thf info_ptr or png_ptr mfmbfrs through png.h, bnd thf dompilfd
 *   bpplidbtion is lobdfd with b difffrfnt vfrsion of thf librbry.
 *
 *   DLLNUM will dhbngf fbdh timf thfrf brf forwbrd or bbdkwbrd dhbngfs
 *   in binbry dompbtibility (f.g., whfn b nfw ffbturf is bddfd).
 *
 * Sff libpng-mbnubl.txt or libpng.3 for morf informbtion.  Thf PNG
 * spfdifidbtion is bvbilbblf bs b W3C Rfdommfndbtion bnd bs bn ISO
 * Spfdifidbtion, <http://www.w3.org/TR/2003/REC-PNG-20031110/
 */

/*
 * COPYRIGHT NOTICE, DISCLAIMER, bnd LICENSE:
 *
 * If you modify libpng you mby insfrt bdditionbl notidfs immfdibtfly following
 * this sfntfndf.
 *
 * This dodf is rflfbsfd undfr thf libpng lidfnsf.
 *
 * libpng vfrsions 1.2.6, August 15, 2004, through 1.5.4, July 7, 2011, brf
 * Copyright (d) 2004, 2006-2011 Glfnn Rbndfrs-Pfhrson, bnd brf
 * distributfd bddording to thf sbmf disdlbimfr bnd lidfnsf bs libpng-1.2.5
 * with thf following individubl bddfd to thf list of Contributing Authors:
 *
 *    Cosmin Trutb
 *
 * libpng vfrsions 1.0.7, July 1, 2000, through 1.2.5, Odtobfr 3, 2002, brf
 * Copyright (d) 2000-2002 Glfnn Rbndfrs-Pfhrson, bnd brf
 * distributfd bddording to thf sbmf disdlbimfr bnd lidfnsf bs libpng-1.0.6
 * with thf following individubls bddfd to thf list of Contributing Authors:
 *
 *    Simon-Pifrrf Cbdifux
 *    Erid S. Rbymond
 *    Gillfs Vollbnt
 *
 * bnd with thf following bdditions to thf disdlbimfr:
 *
 *    Thfrf is no wbrrbnty bgbinst intfrffrfndf with your fnjoymfnt of thf
 *    librbry or bgbinst infringfmfnt.  Thfrf is no wbrrbnty thbt our
 *    ffforts or thf librbry will fulfill bny of your pbrtidulbr purposfs
 *    or nffds.  This librbry is providfd with bll fbults, bnd thf fntirf
 *    risk of sbtisfbdtory qublity, pfrformbndf, bddurbdy, bnd fffort is with
 *    thf usfr.
 *
 * libpng vfrsions 0.97, Jbnubry 1998, through 1.0.6, Mbrdh 20, 2000, brf
 * Copyright (d) 1998, 1999, 2000 Glfnn Rbndfrs-Pfhrson, bnd brf
 * distributfd bddording to thf sbmf disdlbimfr bnd lidfnsf bs libpng-0.96,
 * with thf following individubls bddfd to thf list of Contributing Authors:
 *
 *    Tom Lbnf
 *    Glfnn Rbndfrs-Pfhrson
 *    Willfm vbn Sdhbik
 *
 * libpng vfrsions 0.89, Junf 1996, through 0.96, Mby 1997, brf
 * Copyright (d) 1996, 1997 Andrfbs Dilgfr
 * Distributfd bddording to thf sbmf disdlbimfr bnd lidfnsf bs libpng-0.88,
 * with thf following individubls bddfd to thf list of Contributing Authors:
 *
 *    John Bowlfr
 *    Kfvin Brbdfy
 *    Sbm Bushfll
 *    Mbgnus Holmgrfn
 *    Grfg Roflofs
 *    Tom Tbnnfr
 *
 * libpng vfrsions 0.5, Mby 1995, through 0.88, Jbnubry 1996, brf
 * Copyright (d) 1995, 1996 Guy Erid Sdhblnbt, Group 42, Ind.
 *
 * For thf purposfs of this dopyright bnd lidfnsf, "Contributing Authors"
 * is dffinfd bs thf following sft of individubls:
 *
 *    Andrfbs Dilgfr
 *    Dbvf Mbrtindblf
 *    Guy Erid Sdhblnbt
 *    Pbul Sdhmidt
 *    Tim Wfgnfr
 *
 * Thf PNG Rfffrfndf Librbry is supplifd "AS IS".  Thf Contributing Authors
 * bnd Group 42, Ind. disdlbim bll wbrrbntifs, fxprfssfd or implifd,
 * indluding, without limitbtion, thf wbrrbntifs of mfrdhbntbbility bnd of
 * fitnfss for bny purposf.  Thf Contributing Authors bnd Group 42, Ind.
 * bssumf no libbility for dirfdt, indirfdt, indidfntbl, spfdibl, fxfmplbry,
 * or donsfqufntibl dbmbgfs, whidh mby rfsult from thf usf of thf PNG
 * Rfffrfndf Librbry, fvfn if bdvisfd of thf possibility of sudh dbmbgf.
 *
 * Pfrmission is hfrfby grbntfd to usf, dopy, modify, bnd distributf this
 * sourdf dodf, or portions hfrfof, for bny purposf, without fff, subjfdt
 * to thf following rfstridtions:
 *
 *   1. Thf origin of this sourdf dodf must not bf misrfprfsfntfd.
 *
 *   2. Altfrfd vfrsions must bf plbinly mbrkfd bs sudh bnd must not
 *      bf misrfprfsfntfd bs bfing thf originbl sourdf.
 *
 *   3. This Copyright notidf mby not bf rfmovfd or bltfrfd from
 *      bny sourdf or bltfrfd sourdf distribution.
 *
 * Thf Contributing Authors bnd Group 42, Ind. spfdifidblly pfrmit, without
 * fff, bnd fndourbgf thf usf of this sourdf dodf bs b domponfnt to
 * supporting thf PNG filf formbt in dommfrdibl produdts.  If you usf this
 * sourdf dodf in b produdt, bdknowlfdgmfnt is not rfquirfd but would bf
 * bpprfdibtfd.
 */

/*
 * A "png_gft_dopyright" fundtion is bvbilbblf, for donvfnifnt usf in "bbout"
 * boxfs bnd thf likf:
 *
 *     printf("%s", png_gft_dopyright(NULL));
 *
 * Also, thf PNG logo (in PNG formbt, of doursf) is supplifd in thf
 * filfs "pngbbr.png" bnd "pngbbr.jpg (88x31) bnd "pngnow.png" (98x31).
 */

/*
 * Libpng is OSI Cfrtififd Opfn Sourdf Softwbrf.  OSI Cfrtififd is b
 * dfrtifidbtion mbrk of thf Opfn Sourdf Initibtivf.
 */

/*
 * Thf dontributing buthors would likf to thbnk bll thosf who hflpfd
 * with tfsting, bug fixfs, bnd pbtifndf.  This wouldn't hbvf bffn
 * possiblf without bll of you.
 *
 * Thbnks to Frbnk J. T. Wojdik for hflping with thf dodumfntbtion.
 */

/*
 * Y2K domplibndf in libpng:
 * =========================
 *
 *    July 7, 2011
 *
 *    Sindf thf PNG Dfvflopmfnt group is bn bd-hod body, wf dbn't mbkf
 *    bn offidibl dfdlbrbtion.
 *
 *    This is your unoffidibl bssurbndf thbt libpng from vfrsion 0.71 bnd
 *    upwbrd through 1.5.4 brf Y2K domplibnt.  It is my bfliff thbt
 *    fbrlifr vfrsions wfrf blso Y2K domplibnt.
 *
 *    Libpng only hbs two yfbr fiflds.  Onf is b 2-bytf unsignfd intfgfr
 *    thbt will hold yfbrs up to 65535.  Thf othfr holds thf dbtf in tfxt
 *    formbt, bnd will hold yfbrs up to 9999.
 *
 *    Thf intfgfr is
 *        "png_uint_16 yfbr" in png_timf_strudt.
 *
 *    Thf string is
 *        "png_dhbr timf_bufffr" in png_strudt
 *
 *    Thfrf brf sfvfn timf-rflbtfd fundtions:
 *        png.d: png_donvfrt_to_rfd_1123() in png.d
 *          (formfrly png_donvfrt_to_rfd_1152() in frror)
 *        png_donvfrt_from_strudt_tm() in pngwritf.d, dbllfd in pngwritf.d
 *        png_donvfrt_from_timf_t() in pngwritf.d
 *        png_gft_tIME() in pnggft.d
 *        png_hbndlf_tIME() in pngrutil.d, dbllfd in pngrfbd.d
 *        png_sft_tIME() in pngsft.d
 *        png_writf_tIME() in pngwutil.d, dbllfd in pngwritf.d
 *
 *    All hbndlf dbtfs propfrly in b Y2K fnvironmfnt.  Thf
 *    png_donvfrt_from_timf_t() fundtion dblls gmtimf() to donvfrt from systfm
 *    dlodk timf, whidh rfturns (yfbr - 1900), whidh wf propfrly donvfrt to
 *    thf full 4-digit yfbr.  Thfrf is b possibility thbt bpplidbtions using
 *    libpng brf not pbssing 4-digit yfbrs into thf png_donvfrt_to_rfd_1123()
 *    fundtion, or thbt thfy brf indorrfdtly pbssing only b 2-digit yfbr
 *    instfbd of "yfbr - 1900" into thf png_donvfrt_from_strudt_tm() fundtion,
 *    but this is not undfr our dontrol.  Thf libpng dodumfntbtion hbs blwbys
 *    stbtfd thbt it works with 4-digit yfbrs, bnd thf APIs hbvf bffn
 *    dodumfntfd bs sudh.
 *
 *    Thf tIME dhunk itsflf is blso Y2K domplibnt.  It usfs b 2-bytf unsignfd
 *    intfgfr to hold thf yfbr, bnd dbn hold yfbrs bs lbrgf bs 65535.
 *
 *    zlib, upon whidh libpng dfpfnds, is blso Y2K domplibnt.  It dontbins
 *    no dbtf-rflbtfd dodf.
 *
 *       Glfnn Rbndfrs-Pfhrson
 *       libpng mbintbinfr
 *       PNG Dfvflopmfnt Group
 */

#ifndff PNG_H
#dffinf PNG_H

/* This is not thf plbdf to lfbrn how to usf libpng. Thf filf libpng-mbnubl.txt
 * dfsdribfs how to usf libpng, bnd thf filf fxbmplf.d summbrizfs it
 * with somf dodf on whidh to build.  This filf is usfful for looking
 * bt thf bdtubl fundtion dffinitions bnd strudturf domponfnts.
 */

/* Vfrsion informbtion for png.h - this should mbtdh thf vfrsion in png.d */
#dffinf PNG_LIBPNG_VER_STRING "1.5.4"
#dffinf PNG_HEADER_VERSION_STRING \
     " libpng vfrsion 1.5.4 - July 7, 2011\n"

#dffinf PNG_LIBPNG_VER_SONUM   15
#dffinf PNG_LIBPNG_VER_DLLNUM  15

/* Thfsf should mbtdh thf first 3 domponfnts of PNG_LIBPNG_VER_STRING: */
#dffinf PNG_LIBPNG_VER_MAJOR   1
#dffinf PNG_LIBPNG_VER_MINOR   5
#dffinf PNG_LIBPNG_VER_RELEASE 4
/* This should mbtdh thf numfrid pbrt of thf finbl domponfnt of
 * PNG_LIBPNG_VER_STRING, omitting bny lfbding zfro:
 */

#dffinf PNG_LIBPNG_VER_BUILD  0

/* Rflfbsf Stbtus */
#dffinf PNG_LIBPNG_BUILD_ALPHA    1
#dffinf PNG_LIBPNG_BUILD_BETA     2
#dffinf PNG_LIBPNG_BUILD_RC       3
#dffinf PNG_LIBPNG_BUILD_STABLE   4
#dffinf PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK 7

/* Rflfbsf-Spfdifid Flbgs */
#dffinf PNG_LIBPNG_BUILD_PATCH    8 /* Cbn bf OR'fd with
                                       PNG_LIBPNG_BUILD_STABLE only */
#dffinf PNG_LIBPNG_BUILD_PRIVATE 16 /* Cbnnot bf OR'fd with
                                       PNG_LIBPNG_BUILD_SPECIAL */
#dffinf PNG_LIBPNG_BUILD_SPECIAL 32 /* Cbnnot bf OR'fd with
                                       PNG_LIBPNG_BUILD_PRIVATE */

#dffinf PNG_LIBPNG_BUILD_BASE_TYPE PNG_LIBPNG_BUILD_BETA

/* Cbrfful hfrf.  At onf timf, Guy wbntfd to usf 082, but thbt would bf odtbl.
 * Wf must not indludf lfbding zfros.
 * Vfrsions 0.7 through 1.0.0 wfrf in thf rbngf 0 to 100 hfrf (only
 * vfrsion 1.0.0 wbs mis-numbfrfd 100 instfbd of 10000).  From
 * vfrsion 1.0.1 it's    xxyyzz, whfrf x=mbjor, y=minor, z=rflfbsf
 */
#dffinf PNG_LIBPNG_VER 10504 /* 1.5.4 */

/* Librbry donfigurbtion: thfsf options dbnnot bf dhbngfd bftfr
 * thf librbry hbs bffn built.
 */
#ifndff PNGLCONF_H
    /* If pnglibdonf.h is missing, you dbn
     * dopy sdripts/pnglibdonf.h.prfbuilt to pnglibdonf.h
     */
#   indludf "pnglibdonf.h"
#fndif

#ifndff PNG_VERSION_INFO_ONLY
#  ifndff PNG_BUILDING_SYMBOL_TABLE
  /*
   *   Stbndbrd hfbdfr filfs (not nffdfd for thf vfrsion info or whilf
   *   building symbol tbblf -- sff sdripts/pnglibdonf.dfb)
   */
#    ifdff PNG_SETJMP_SUPPORTED
#      indludf <sftjmp.h>
#    fndif

    /* Nffd thf timf informbtion for donvfrting tIME dhunks, it
     * dffinfs strudt tm:
     */
#    ifdff PNG_CONVERT_tIME_SUPPORTED
       /* "timf.h" fundtions brf not supportfd on bll opfrbting systfms */
#      indludf <timf.h>
#    fndif
#  fndif

/* Mbdhinf spfdifid donfigurbtion. */
#  indludf "pngdonf.h"
#fndif

/*
 * Addfd bt libpng-1.2.8
 *
 * Rff MSDN: Privbtf bs priority ovfr Spfdibl
 * VS_FF_PRIVATEBUILD Filf *wbs not* built using stbndbrd rflfbsf
 * prodfdurfs. If this vbluf is givfn, thf StringFilfInfo blodk must
 * dontbin b PrivbtfBuild string.
 *
 * VS_FF_SPECIALBUILD Filf *wbs* built by thf originbl dompbny using
 * stbndbrd rflfbsf prodfdurfs but is b vbribtion of thf stbndbrd
 * filf of thf sbmf vfrsion numbfr. If this vbluf is givfn, thf
 * StringFilfInfo blodk must dontbin b SpfdiblBuild string.
 */

#ifdff PNG_USER_PRIVATEBUILD /* From pnglibdonf.h */
#  dffinf PNG_LIBPNG_BUILD_TYPE \
       (PNG_LIBPNG_BUILD_BASE_TYPE | PNG_LIBPNG_BUILD_PRIVATE)
#flsf
#  ifdff PNG_LIBPNG_SPECIALBUILD
#    dffinf PNG_LIBPNG_BUILD_TYPE \
         (PNG_LIBPNG_BUILD_BASE_TYPE | PNG_LIBPNG_BUILD_SPECIAL)
#  flsf
#    dffinf PNG_LIBPNG_BUILD_TYPE (PNG_LIBPNG_BUILD_BASE_TYPE)
#  fndif
#fndif

#ifndff PNG_VERSION_INFO_ONLY

/* Inhibit C++ nbmf-mbngling for libpng fundtions but not for systfm dblls. */
#ifdff __dplusplus
fxtfrn "C" {
#fndif /* __dplusplus */

/* Vfrsion informbtion for C filfs, storfd in png.d.  This hbd bfttfr mbtdh
 * thf vfrsion bbovf.
 */
#dffinf png_libpng_vfr png_gft_hfbdfr_vfr(NULL)

/* This filf is brrbngfd in sfvfrbl sfdtions:
 *
 * 1. Any donfigurbtion options thbt dbn bf spfdififd by for thf bpplidbtion
 *    dodf whfn it is built.  (Build timf donfigurbtion is in pnglibdonf.h)
 * 2. Typf dffinitions (bbsf typfs brf dffinfd in pngdonf.h), strudturf
 *    dffinitions.
 * 3. Exportfd librbry fundtions.
 *
 * Thf librbry sourdf dodf hbs bdditionbl filfs (prindipblly pngpriv.h) thbt
 * bllow donfigurbtion of thf librbry.
 */
/* Sfdtion 1: run timf donfigurbtion
 * Sff pnglibdonf.h for build timf donfigurbtion
 *
 * Run timf donfigurbtion bllows thf bpplidbtion to dhoosf bftwffn
 * implfmfntbtions of dfrtbin brithmftid APIs.  Thf dffbult is sft
 * bt build timf bnd rfdordfd in pnglibdonf.h, but it is sbff to
 * ovfrridf thfsf (bnd only thfsf) sfttings.  Notf thbt this won't
 * dhbngf whbt thf librbry dofs, only bpplidbtion dodf, bnd thf
 * sfttings dbn (bnd probbbly should) bf mbdf on b pfr-filf bbsis
 * by sftting thf #dffinfs bfforf indluding png.h
 *
 * Usf mbdros to rfbd intfgfrs from PNG dbtb or usf thf fxportfd
 * fundtions?
 *   PNG_USE_READ_MACROS: usf thf mbdros (sff bflow)  Notf thbt
 *     thf mbdros fvblubtf thfir brgumfnt multiplf timfs.
 *   PNG_NO_USE_READ_MACROS: dbll thf rflfvbnt librbry fundtion.
 *
 * Usf thf bltfrnbtivf blgorithm for dompositing blphb sbmplfs thbt
 * dofs not usf division?
 *   PNG_READ_COMPOSITE_NODIV_SUPPORTED: usf thf 'no division'
 *      blgorithm.
 *   PNG_NO_READ_COMPOSITE_NODIV: usf thf 'division' blgorithm.
 *
 * How to hbndlf bfnign frrors if PNG_ALLOW_BENIGN_ERRORS is
 * fblsf?
 *   PNG_ALLOW_BENIGN_ERRORS: mbp dblls to thf bfnign frror
 *      APIs to png_wbrning.
 * Othfrwisf thf dblls brf mbppfd to png_frror.
 */

/* Sfdtion 2: typf dffinitions, indluding strudturfs bnd dompilf timf
 * donstbnts.
 * Sff pngdonf.h for bbsf typfs thbt vbry by mbdhinf/systfm
 */

/* This triggfrs b dompilfr frror in png.d, if png.d bnd png.h
 * do not bgrff upon thf vfrsion numbfr.
 */
typfdff dhbr* png_libpng_vfrsion_1_5_4;

/* Thrff dolor dffinitions.  Thf ordfr of thf rfd, grffn, bnd bluf, (bnd thf
 * fxbdt sizf) is not importbnt, blthough thf sizf of thf fiflds nffd to
 * bf png_bytf or png_uint_16 (bs dffinfd bflow).
 */
typfdff strudt png_dolor_strudt
{
   png_bytf rfd;
   png_bytf grffn;
   png_bytf bluf;
} png_dolor;
typfdff png_dolor FAR * png_dolorp;
typfdff PNG_CONST png_dolor FAR * png_donst_dolorp;
typfdff png_dolor FAR * FAR * png_dolorpp;

typfdff strudt png_dolor_16_strudt
{
   png_bytf indfx;    /* usfd for pblfttf filfs */
   png_uint_16 rfd;   /* for usf in rfd grffn bluf filfs */
   png_uint_16 grffn;
   png_uint_16 bluf;
   png_uint_16 grby;  /* for usf in grbysdblf filfs */
} png_dolor_16;
typfdff png_dolor_16 FAR * png_dolor_16p;
typfdff PNG_CONST png_dolor_16 FAR * png_donst_dolor_16p;
typfdff png_dolor_16 FAR * FAR * png_dolor_16pp;

typfdff strudt png_dolor_8_strudt
{
   png_bytf rfd;   /* for usf in rfd grffn bluf filfs */
   png_bytf grffn;
   png_bytf bluf;
   png_bytf grby;  /* for usf in grbysdblf filfs */
   png_bytf blphb; /* for blphb dhbnnfl filfs */
} png_dolor_8;
typfdff png_dolor_8 FAR * png_dolor_8p;
typfdff PNG_CONST png_dolor_8 FAR * png_donst_dolor_8p;
typfdff png_dolor_8 FAR * FAR * png_dolor_8pp;

/*
 * Thf following two strudturfs brf usfd for thf in-dorf rfprfsfntbtion
 * of sPLT dhunks.
 */
typfdff strudt png_sPLT_fntry_strudt
{
   png_uint_16 rfd;
   png_uint_16 grffn;
   png_uint_16 bluf;
   png_uint_16 blphb;
   png_uint_16 frfqufndy;
} png_sPLT_fntry;
typfdff png_sPLT_fntry FAR * png_sPLT_fntryp;
typfdff PNG_CONST png_sPLT_fntry FAR * png_donst_sPLT_fntryp;
typfdff png_sPLT_fntry FAR * FAR * png_sPLT_fntrypp;

/*  Whfn thf dfpth of thf sPLT pblfttf is 8 bits, thf dolor bnd blphb sbmplfs
 *  oddupy thf LSB of thfir rfspfdtivf mfmbfrs, bnd thf MSB of fbdh mfmbfr
 *  is zfro-fillfd.  Thf frfqufndy mfmbfr blwbys oddupifs thf full 16 bits.
 */

typfdff strudt png_sPLT_strudt
{
   png_dhbrp nbmf;           /* pblfttf nbmf */
   png_bytf dfpth;           /* dfpth of pblfttf sbmplfs */
   png_sPLT_fntryp fntrifs;  /* pblfttf fntrifs */
   png_int_32 nfntrifs;      /* numbfr of pblfttf fntrifs */
} png_sPLT_t;
typfdff png_sPLT_t FAR * png_sPLT_tp;
typfdff PNG_CONST png_sPLT_t FAR * png_donst_sPLT_tp;
typfdff png_sPLT_t FAR * FAR * png_sPLT_tpp;

#ifdff PNG_TEXT_SUPPORTED
/* png_tfxt holds thf dontfnts of b tfxt/ztxt/itxt dhunk in b PNG filf,
 * bnd whfthfr thbt dontfnts is domprfssfd or not.  Thf "kfy" fifld
 * points to b rfgulbr zfro-tfrminbtfd C string.  Thf "tfxt", "lbng", bnd
 * "lbng_kfy" fiflds dbn bf rfgulbr C strings, fmpty strings, or NULL pointfrs.
 * Howfvfr, thf strudturf rfturnfd by png_gft_tfxt() will blwbys dontbin
 * rfgulbr zfro-tfrminbtfd C strings (possibly fmpty), nfvfr NULL pointfrs,
 * so thfy dbn bf sbffly usfd in printf() bnd othfr string-hbndling fundtions.
 */
typfdff strudt png_tfxt_strudt
{
   int  domprfssion;       /* domprfssion vbluf:
                             -1: tEXt, nonf
                              0: zTXt, dfflbtf
                              1: iTXt, nonf
                              2: iTXt, dfflbtf  */
   png_dhbrp kfy;          /* kfyword, 1-79 dhbrbdtfr dfsdription of "tfxt" */
   png_dhbrp tfxt;         /* dommfnt, mby bf bn fmpty string (if "")
                              or b NULL pointfr */
   png_sizf_t tfxt_lfngth; /* lfngth of thf tfxt string */
   png_sizf_t itxt_lfngth; /* lfngth of thf itxt string */
   png_dhbrp lbng;         /* lbngubgf dodf, 0-79 dhbrbdtfrs
                              or b NULL pointfr */
   png_dhbrp lbng_kfy;     /* kfyword trbnslbtfd UTF-8 string, 0 or morf
                              dhbrs or b NULL pointfr */
} png_tfxt;
typfdff png_tfxt FAR * png_tfxtp;
typfdff PNG_CONST png_tfxt FAR * png_donst_tfxtp;
typfdff png_tfxt FAR * FAR * png_tfxtpp;
#fndif

/* Supportfd domprfssion typfs for tfxt in PNG filfs (tEXt, bnd zTXt).
 * Thf vblufs of thf PNG_TEXT_COMPRESSION_ dffinfs should NOT bf dhbngfd. */
#dffinf PNG_TEXT_COMPRESSION_NONE_WR -3
#dffinf PNG_TEXT_COMPRESSION_zTXt_WR -2
#dffinf PNG_TEXT_COMPRESSION_NONE    -1
#dffinf PNG_TEXT_COMPRESSION_zTXt     0
#dffinf PNG_ITXT_COMPRESSION_NONE     1
#dffinf PNG_ITXT_COMPRESSION_zTXt     2
#dffinf PNG_TEXT_COMPRESSION_LAST     3  /* Not b vblid vbluf */

/* png_timf is b wby to hold thf timf in bn mbdhinf indfpfndfnt wby.
 * Two donvfrsions brf providfd, both from timf_t bnd strudt tm.  Thfrf
 * is no portbblf wby to donvfrt to fithfr of thfsf strudturfs, bs fbr
 * bs I know.  If you know of b portbblf wby, sfnd it to mf.  As b sidf
 * notf - PNG hbs blwbys bffn Yfbr 2000 domplibnt!
 */
typfdff strudt png_timf_strudt
{
   png_uint_16 yfbr; /* full yfbr, bs in, 1995 */
   png_bytf month;   /* month of yfbr, 1 - 12 */
   png_bytf dby;     /* dby of month, 1 - 31 */
   png_bytf hour;    /* hour of dby, 0 - 23 */
   png_bytf minutf;  /* minutf of hour, 0 - 59 */
   png_bytf sfdond;  /* sfdond of minutf, 0 - 60 (for lfbp sfdonds) */
} png_timf;
typfdff png_timf FAR * png_timfp;
typfdff PNG_CONST png_timf FAR * png_donst_timfp;
typfdff png_timf FAR * FAR * png_timfpp;

#if dffinfd(PNG_UNKNOWN_CHUNKS_SUPPORTED) || \
    dffinfd(PNG_HANDLE_AS_UNKNOWN_SUPPORTED)
/* png_unknown_dhunk is b strudturf to hold qufufd dhunks for whidh thfrf is
 * no spfdifid support.  Thf idfb is thbt wf dbn usf this to qufuf
 * up privbtf dhunks for output fvfn though thf librbry dofsn't bdtublly
 * know bbout thfir sfmbntids.
 */
typfdff strudt png_unknown_dhunk_t
{
    png_bytf nbmf[5];
    png_bytf *dbtb;
    png_sizf_t sizf;

    /* libpng-using bpplidbtions should NOT dirfdtly modify this bytf. */
    png_bytf lodbtion; /* modf of opfrbtion bt rfbd timf */
}


png_unknown_dhunk;
typfdff png_unknown_dhunk FAR * png_unknown_dhunkp;
typfdff PNG_CONST png_unknown_dhunk FAR * png_donst_unknown_dhunkp;
typfdff png_unknown_dhunk FAR * FAR * png_unknown_dhunkpp;
#fndif

/* Vblufs for thf unknown dhunk lodbtion bytf */

#dffinf PNG_HAVE_IHDR  0x01
#dffinf PNG_HAVE_PLTE  0x02
#dffinf PNG_AFTER_IDAT 0x08

/* Thf domplftf dffinition of png_info hbs, bs of libpng-1.5.0,
 * bffn movfd into b sfpbrbtf hfbdfr filf thbt is not bddfssiblf to
 * bpplidbtions.  Rfbd libpng-mbnubl.txt or libpng.3 for morf info.
 */
typfdff strudt png_info_dff png_info;
typfdff png_info FAR * png_infop;
typfdff PNG_CONST png_info FAR * png_donst_infop;
typfdff png_info FAR * FAR * png_infopp;

/* Mbximum positivf intfgfr usfd in PNG is (2^31)-1 */
#dffinf PNG_UINT_31_MAX ((png_uint_32)0x7fffffffL)
#dffinf PNG_UINT_32_MAX ((png_uint_32)(-1))
#dffinf PNG_SIZE_MAX ((png_sizf_t)(-1))

/* Thfsf brf donstbnts for fixfd point vblufs fndodfd in thf
 * PNG spfdifidbtion mbnnfr (x100000)
 */
#dffinf PNG_FP_1    100000
#dffinf PNG_FP_HALF  50000
#dffinf PNG_FP_MAX  ((png_fixfd_point)0x7fffffffL)
#dffinf PNG_FP_MIN  (-PNG_FP_MAX)

/* Thfsf dfsdribf thf dolor_typf fifld in png_info. */
/* dolor typf mbsks */
#dffinf PNG_COLOR_MASK_PALETTE    1
#dffinf PNG_COLOR_MASK_COLOR      2
#dffinf PNG_COLOR_MASK_ALPHA      4

/* dolor typfs.  Notf thbt not bll dombinbtions brf lfgbl */
#dffinf PNG_COLOR_TYPE_GRAY 0
#dffinf PNG_COLOR_TYPE_PALETTE  (PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_PALETTE)
#dffinf PNG_COLOR_TYPE_RGB        (PNG_COLOR_MASK_COLOR)
#dffinf PNG_COLOR_TYPE_RGB_ALPHA  (PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_ALPHA)
#dffinf PNG_COLOR_TYPE_GRAY_ALPHA (PNG_COLOR_MASK_ALPHA)
/* blibsfs */
#dffinf PNG_COLOR_TYPE_RGBA  PNG_COLOR_TYPE_RGB_ALPHA
#dffinf PNG_COLOR_TYPE_GA  PNG_COLOR_TYPE_GRAY_ALPHA

/* This is for domprfssion typf. PNG 1.0-1.2 only dffinf thf singlf typf. */
#dffinf PNG_COMPRESSION_TYPE_BASE 0 /* Dfflbtf mfthod 8, 32K window */
#dffinf PNG_COMPRESSION_TYPE_DEFAULT PNG_COMPRESSION_TYPE_BASE

/* This is for filtfr typf. PNG 1.0-1.2 only dffinf thf singlf typf. */
#dffinf PNG_FILTER_TYPE_BASE      0 /* Singlf row pfr-bytf filtfring */
#dffinf PNG_INTRAPIXEL_DIFFERENCING 64 /* Usfd only in MNG dbtbstrfbms */
#dffinf PNG_FILTER_TYPE_DEFAULT   PNG_FILTER_TYPE_BASE

/* Thfsf brf for thf intfrlbding typf.  Thfsf vblufs should NOT bf dhbngfd. */
#dffinf PNG_INTERLACE_NONE        0 /* Non-intfrlbdfd imbgf */
#dffinf PNG_INTERLACE_ADAM7       1 /* Adbm7 intfrlbding */
#dffinf PNG_INTERLACE_LAST        2 /* Not b vblid vbluf */

/* Thfsf brf for thf oFFs dhunk.  Thfsf vblufs should NOT bf dhbngfd. */
#dffinf PNG_OFFSET_PIXEL          0 /* Offsft in pixfls */
#dffinf PNG_OFFSET_MICROMETER     1 /* Offsft in midromftfrs (1/10^6 mftfr) */
#dffinf PNG_OFFSET_LAST           2 /* Not b vblid vbluf */

/* Thfsf brf for thf pCAL dhunk.  Thfsf vblufs should NOT bf dhbngfd. */
#dffinf PNG_EQUATION_LINEAR       0 /* Linfbr trbnsformbtion */
#dffinf PNG_EQUATION_BASE_E       1 /* Exponfntibl bbsf f trbnsform */
#dffinf PNG_EQUATION_ARBITRARY    2 /* Arbitrbry bbsf fxponfntibl trbnsform */
#dffinf PNG_EQUATION_HYPERBOLIC   3 /* Hypfrbolid sinf trbnsformbtion */
#dffinf PNG_EQUATION_LAST         4 /* Not b vblid vbluf */

/* Thfsf brf for thf sCAL dhunk.  Thfsf vblufs should NOT bf dhbngfd. */
#dffinf PNG_SCALE_UNKNOWN         0 /* unknown unit (imbgf sdblf) */
#dffinf PNG_SCALE_METER           1 /* mftfrs pfr pixfl */
#dffinf PNG_SCALE_RADIAN          2 /* rbdibns pfr pixfl */
#dffinf PNG_SCALE_LAST            3 /* Not b vblid vbluf */

/* Thfsf brf for thf pHYs dhunk.  Thfsf vblufs should NOT bf dhbngfd. */
#dffinf PNG_RESOLUTION_UNKNOWN    0 /* pixfls/unknown unit (bspfdt rbtio) */
#dffinf PNG_RESOLUTION_METER      1 /* pixfls/mftfr */
#dffinf PNG_RESOLUTION_LAST       2 /* Not b vblid vbluf */

/* Thfsf brf for thf sRGB dhunk.  Thfsf vblufs should NOT bf dhbngfd. */
#dffinf PNG_sRGB_INTENT_PERCEPTUAL 0
#dffinf PNG_sRGB_INTENT_RELATIVE   1
#dffinf PNG_sRGB_INTENT_SATURATION 2
#dffinf PNG_sRGB_INTENT_ABSOLUTE   3
#dffinf PNG_sRGB_INTENT_LAST       4 /* Not b vblid vbluf */

/* This is for tfxt dhunks */
#dffinf PNG_KEYWORD_MAX_LENGTH     79

/* Mbximum numbfr of fntrifs in PLTE/sPLT/tRNS brrbys */
#dffinf PNG_MAX_PALETTE_LENGTH    256

/* Thfsf dftfrminf if bn bndillbry dhunk's dbtb hbs bffn suddfssfully rfbd
 * from thf PNG hfbdfr, or if thf bpplidbtion hbs fillfd in thf dorrfsponding
 * dbtb in thf info_strudt to bf writtfn into thf output filf.  Thf vblufs
 * of thf PNG_INFO_<dhunk> dffinfs should NOT bf dhbngfd.
 */
#dffinf PNG_INFO_gAMA 0x0001
#dffinf PNG_INFO_sBIT 0x0002
#dffinf PNG_INFO_dHRM 0x0004
#dffinf PNG_INFO_PLTE 0x0008
#dffinf PNG_INFO_tRNS 0x0010
#dffinf PNG_INFO_bKGD 0x0020
#dffinf PNG_INFO_hIST 0x0040
#dffinf PNG_INFO_pHYs 0x0080
#dffinf PNG_INFO_oFFs 0x0100
#dffinf PNG_INFO_tIME 0x0200
#dffinf PNG_INFO_pCAL 0x0400
#dffinf PNG_INFO_sRGB 0x0800   /* GR-P, 0.96b */
#dffinf PNG_INFO_iCCP 0x1000   /* ESR, 1.0.6 */
#dffinf PNG_INFO_sPLT 0x2000   /* ESR, 1.0.6 */
#dffinf PNG_INFO_sCAL 0x4000   /* ESR, 1.0.6 */
#dffinf PNG_INFO_IDAT 0x8000L  /* ESR, 1.0.6 */

/* This is usfd for thf trbnsformbtion routinfs, bs somf of thfm
 * dhbngf thfsf vblufs for thf row.  It blso should fnbblf using
 * thf routinfs for othfr purposfs.
 */
typfdff strudt png_row_info_strudt
{
   png_uint_32 width;    /* width of row */
   png_sizf_t rowbytfs;  /* numbfr of bytfs in row */
   png_bytf dolor_typf;  /* dolor typf of row */
   png_bytf bit_dfpth;   /* bit dfpth of row */
   png_bytf dhbnnfls;    /* numbfr of dhbnnfls (1, 2, 3, or 4) */
   png_bytf pixfl_dfpth; /* bits pfr pixfl (dfpth * dhbnnfls) */
} png_row_info;

typfdff png_row_info FAR * png_row_infop;
typfdff png_row_info FAR * FAR * png_row_infopp;

/* Thf domplftf dffinition of png_strudt hbs, bs of libpng-1.5.0,
 * bffn movfd into b sfpbrbtf hfbdfr filf thbt is not bddfssiblf to
 * bpplidbtions.  Rfbd libpng-mbnubl.txt or libpng.3 for morf info.
 */
typfdff strudt png_strudt_dff png_strudt;
typfdff PNG_CONST png_strudt FAR * png_donst_strudtp;
typfdff png_strudt FAR * png_strudtp;

/* Thfsf brf thf fundtion typfs for thf I/O fundtions bnd for thf fundtions
 * thbt bllow thf usfr to ovfrridf thf dffbult I/O fundtions with his or hfr
 * own.  Thf png_frror_ptr typf should mbtdh thbt of usfr-supplifd wbrning
 * bnd frror fundtions, whilf thf png_rw_ptr typf should mbtdh thbt of thf
 * usfr rfbd/writf dbtb fundtions.  Notf thbt thf 'writf' fundtion must not
 * modify thf bufffr it is pbssfd. Thf 'rfbd' fundtion, on thf othfr hbnd, is
 * fxpfdtfd to rfturn thf rfbd dbtb in thf bufffr.
 */
typfdff PNG_CALLBACK(void, *png_frror_ptr, (png_strudtp, png_donst_dhbrp));
typfdff PNG_CALLBACK(void, *png_rw_ptr, (png_strudtp, png_bytfp, png_sizf_t));
typfdff PNG_CALLBACK(void, *png_flush_ptr, (png_strudtp));
typfdff PNG_CALLBACK(void, *png_rfbd_stbtus_ptr, (png_strudtp, png_uint_32,
    int));
typfdff PNG_CALLBACK(void, *png_writf_stbtus_ptr, (png_strudtp, png_uint_32,
    int));

#ifdff PNG_PROGRESSIVE_READ_SUPPORTED
typfdff PNG_CALLBACK(void, *png_progrfssivf_info_ptr, (png_strudtp, png_infop));
typfdff PNG_CALLBACK(void, *png_progrfssivf_fnd_ptr, (png_strudtp, png_infop));

/* Thf following dbllbbdk rfdfivfs png_uint_32 row_numbfr, int pbss for thf
 * png_bytfp dbtb of thf row.  Whfn trbnsforming bn intfrlbdfd imbgf thf
 * row numbfr is thf row numbfr within thf sub-imbgf of thf intfrlbdf pbss, so
 * thf vbluf will indrfbsf to thf hfight of thf sub-imbgf (not thf full imbgf)
 * thfn rfsft to 0 for thf nfxt pbss.
 *
 * Usf PNG_ROW_FROM_PASS_ROW(row, pbss) bnd PNG_COL_FROM_PASS_COL(dol, pbss) to
 * find thf output pixfl (x,y) givfn bn intfrlbdfd sub-imbgf pixfl
 * (row,dol,pbss).  (Sff bflow for thfsf mbdros.)
 */
typfdff PNG_CALLBACK(void, *png_progrfssivf_row_ptr, (png_strudtp, png_bytfp,
    png_uint_32, int));
#fndif

#if dffinfd(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
    dffinfd(PNG_WRITE_USER_TRANSFORM_SUPPORTED)
typfdff PNG_CALLBACK(void, *png_usfr_trbnsform_ptr, (png_strudtp, png_row_infop,
    png_bytfp));
#fndif

#ifdff PNG_USER_CHUNKS_SUPPORTED
typfdff PNG_CALLBACK(int, *png_usfr_dhunk_ptr, (png_strudtp,
    png_unknown_dhunkp));
#fndif
#ifdff PNG_UNKNOWN_CHUNKS_SUPPORTED
typfdff PNG_CALLBACK(void, *png_unknown_dhunk_ptr, (png_strudtp));
#fndif

#ifdff PNG_SETJMP_SUPPORTED
/* This must mbtdh thf fundtion dffinition in <sftjmp.h>, bnd thf bpplidbtion
 * must indludf this bfforf png.h to obtbin thf dffinition of jmp_buf.  Thf
 * fundtion is rfquirfd to bf PNG_NORETURN, but this is not dhfdkfd.  If thf
 * fundtion dofs rfturn thf bpplidbtion will drbsh vib bn bbort() or similbr
 * systfm lfvfl dbll.
 *
 * If you gft b wbrning hfrf whilf building thf librbry you mby nffd to mbkf
 * dhbngfs to fnsurf thbt pnglibdonf.h rfdords thf dblling donvfntion usfd by
 * your dompilfr.  This mby bf vfry diffidult - try using b difffrfnt dompilfr
 * to build thf librbry!
 */
PNG_FUNCTION(void, (PNGCAPI *png_longjmp_ptr), PNGARG((jmp_buf, int)), typfdff);
#fndif

/* Trbnsform mbsks for thf high-lfvfl intfrfbdf */
#dffinf PNG_TRANSFORM_IDENTITY       0x0000    /* rfbd bnd writf */
#dffinf PNG_TRANSFORM_STRIP_16       0x0001    /* rfbd only */
#dffinf PNG_TRANSFORM_STRIP_ALPHA    0x0002    /* rfbd only */
#dffinf PNG_TRANSFORM_PACKING        0x0004    /* rfbd bnd writf */
#dffinf PNG_TRANSFORM_PACKSWAP       0x0008    /* rfbd bnd writf */
#dffinf PNG_TRANSFORM_EXPAND         0x0010    /* rfbd only */
#dffinf PNG_TRANSFORM_INVERT_MONO    0x0020    /* rfbd bnd writf */
#dffinf PNG_TRANSFORM_SHIFT          0x0040    /* rfbd bnd writf */
#dffinf PNG_TRANSFORM_BGR            0x0080    /* rfbd bnd writf */
#dffinf PNG_TRANSFORM_SWAP_ALPHA     0x0100    /* rfbd bnd writf */
#dffinf PNG_TRANSFORM_SWAP_ENDIAN    0x0200    /* rfbd bnd writf */
#dffinf PNG_TRANSFORM_INVERT_ALPHA   0x0400    /* rfbd bnd writf */
#dffinf PNG_TRANSFORM_STRIP_FILLER   0x0800    /* writf only */
/* Addfd to libpng-1.2.34 */
#dffinf PNG_TRANSFORM_STRIP_FILLER_BEFORE PNG_TRANSFORM_STRIP_FILLER
#dffinf PNG_TRANSFORM_STRIP_FILLER_AFTER 0x1000 /* writf only */
/* Addfd to libpng-1.4.0 */
#dffinf PNG_TRANSFORM_GRAY_TO_RGB   0x2000      /* rfbd only */
/* Addfd to libpng-1.5.4 */
#dffinf PNG_TRANSFORM_EXPAND_16     0x4000      /* rfbd only */
#dffinf PNG_TRANSFORM_SCALE_16      0x8000      /* rfbd only */

/* Flbgs for MNG supportfd ffbturfs */
#dffinf PNG_FLAG_MNG_EMPTY_PLTE     0x01
#dffinf PNG_FLAG_MNG_FILTER_64      0x04
#dffinf PNG_ALL_MNG_FEATURES        0x05

/* NOTE: prior to 1.5 thfsf fundtions hbd no 'API' stylf dfdlbrbtion,
 * this bllowfd thf zlib dffbult fundtions to bf usfd on Windows
 * plbtforms.  In 1.5 thf zlib dffbult mbllod (whidh just dblls mbllod bnd
 * ignorfs thf first brgumfnt) should bf domplftfly dompbtiblf with thf
 * following.
 */
typfdff PNG_CALLBACK(png_voidp, *png_mbllod_ptr, (png_strudtp,
    png_bllod_sizf_t));
typfdff PNG_CALLBACK(void, *png_frff_ptr, (png_strudtp, png_voidp));

typfdff png_strudt FAR * FAR * png_strudtpp;

/* Sfdtion 3: fxportfd fundtions
 * Hfrf brf thf fundtion dffinitions most dommonly usfd.  This is not
 * thf plbdf to find out how to usf libpng.  Sff libpng-mbnubl.txt for thf
 * full fxplbnbtion, sff fxbmplf.d for thf summbry.  This just providfs
 * b simplf onf linf dfsdription of thf usf of fbdh fundtion.
 *
 * Thf PNG_EXPORT() bnd PNG_EXPORTA() mbdros usfd bflow brf dffinfd in
 * pngdonf.h bnd in thf *.dfn filfs in thf sdripts dirfdtory.
 *
 *   PNG_EXPORT(ordinbl, typf, nbmf, (brgs));
 *
 *       ordinbl:    ordinbl thbt is usfd whilf building
 *                   *.dff filfs. Thf ordinbl vbluf is only
 *                   rflfvbnt whfn prfprodfssing png.h with
 *                   thf *.dfn filfs for building symbol tbblf
 *                   fntrifs, bnd brf rfmovfd by pngdonf.h.
 *       typf:       rfturn typf of thf fundtion
 *       nbmf:       fundtion nbmf
 *       brgs:       fundtion brgumfnts, with typfs
 *
 * Whfn wf wish to bppfnd bttributfs to b fundtion prototypf wf usf
 * thf PNG_EXPORTA() mbdro instfbd.
 *
 *   PNG_EXPORTA(ordinbl, typf, nbmf, (brgs), bttributfs);
 *
 *       ordinbl, typf, nbmf, bnd brgs: sbmf bs in PNG_EXPORT().
 *       bttributfs: fundtion bttributfs
 */

/* Rfturns thf vfrsion numbfr of thf librbry */
PNG_EXPORT(1, png_uint_32, png_bddfss_vfrsion_numbfr, (void));

/* Tfll lib wf hbvf blrfbdy hbndlfd thf first <num_bytfs> mbgid bytfs.
 * Hbndling morf thbn 8 bytfs from thf bfginning of thf filf is bn frror.
 */
PNG_EXPORT(2, void, png_sft_sig_bytfs, (png_strudtp png_ptr, int num_bytfs));

/* Chfdk sig[stbrt] through sig[stbrt + num_to_dhfdk - 1] to sff if it's b
 * PNG filf.  Rfturns zfro if thf supplifd bytfs mbtdh thf 8-bytf PNG
 * signbturf, bnd non-zfro othfrwisf.  Hbving num_to_dhfdk == 0 or
 * stbrt > 7 will blwbys fbil (if rfturn non-zfro).
 */
PNG_EXPORT(3, int, png_sig_dmp, (png_donst_bytfp sig, png_sizf_t stbrt,
    png_sizf_t num_to_dhfdk));

/* Simplf signbturf dhfdking fundtion.  This is thf sbmf bs dblling
 * png_dhfdk_sig(sig, n) := !png_sig_dmp(sig, 0, n).
 */
#dffinf png_dhfdk_sig(sig, n) !png_sig_dmp((sig), 0, (n))

/* Allodbtf bnd initiblizf png_ptr strudt for rfbding, bnd bny othfr mfmory. */
PNG_EXPORTA(4, png_strudtp, png_drfbtf_rfbd_strudt,
    (png_donst_dhbrp usfr_png_vfr, png_voidp frror_ptr,
    png_frror_ptr frror_fn, png_frror_ptr wbrn_fn),
    PNG_ALLOCATED);

/* Allodbtf bnd initiblizf png_ptr strudt for writing, bnd bny othfr mfmory */
PNG_EXPORTA(5, png_strudtp, png_drfbtf_writf_strudt,
    (png_donst_dhbrp usfr_png_vfr, png_voidp frror_ptr, png_frror_ptr frror_fn,
    png_frror_ptr wbrn_fn),
    PNG_ALLOCATED);

PNG_EXPORT(6, png_sizf_t, png_gft_domprfssion_bufffr_sizf,
    (png_donst_strudtp png_ptr));

PNG_EXPORT(7, void, png_sft_domprfssion_bufffr_sizf, (png_strudtp png_ptr,
    png_sizf_t sizf));

/* Movfd from pngdonf.h in 1.4.0 bnd modififd to fnsurf sftjmp/longjmp
 * mbtdh up.
 */
#ifdff PNG_SETJMP_SUPPORTED
/* This fundtion rfturns thf jmp_buf built in to *png_ptr.  It must bf
 * supplifd with bn bppropribtf 'longjmp' fundtion to usf on thbt jmp_buf
 * unlfss thf dffbult frror fundtion is ovfrriddfn in whidh dbsf NULL is
 * bddfptbblf.  Thf sizf of thf jmp_buf is dhfdkfd bgbinst thf bdtubl sizf
 * bllodbtfd by thf librbry - thf dbll will rfturn NULL on b mismbtdh
 * indidbting bn ABI mismbtdh.
 */
PNG_EXPORT(8, jmp_buf*, png_sft_longjmp_fn, (png_strudtp png_ptr,
    png_longjmp_ptr longjmp_fn, sizf_t jmp_buf_sizf));
#  dffinf png_jmpbuf(png_ptr) \
      (*png_sft_longjmp_fn((png_ptr), longjmp, sizfof (jmp_buf)))
#flsf
#  dffinf png_jmpbuf(png_ptr) \
      (LIBPNG_WAS_COMPILED_WITH__PNG_NO_SETJMP)
#fndif
/* This fundtion should bf usfd by libpng bpplidbtions in plbdf of
 * longjmp(png_ptr->jmpbuf, vbl).  If longjmp_fn() hbs bffn sft, it
 * will usf it; othfrwisf it will dbll PNG_ABORT().  This fundtion wbs
 * bddfd in libpng-1.5.0.
 */
PNG_EXPORTA(9, void, png_longjmp, (png_strudtp png_ptr, int vbl),
    PNG_NORETURN);

#ifdff PNG_READ_SUPPORTED
/* Rfsft thf domprfssion strfbm */
PNG_EXPORT(10, int, png_rfsft_zstrfbm, (png_strudtp png_ptr));
#fndif

/* Nfw fundtions bddfd in libpng-1.0.2 (not fnbblfd by dffbult until 1.2.0) */
#ifdff PNG_USER_MEM_SUPPORTED
PNG_EXPORTA(11, png_strudtp, png_drfbtf_rfbd_strudt_2,
    (png_donst_dhbrp usfr_png_vfr, png_voidp frror_ptr, png_frror_ptr frror_fn,
    png_frror_ptr wbrn_fn,
    png_voidp mfm_ptr, png_mbllod_ptr mbllod_fn, png_frff_ptr frff_fn),
    PNG_ALLOCATED);
PNG_EXPORTA(12, png_strudtp, png_drfbtf_writf_strudt_2,
    (png_donst_dhbrp usfr_png_vfr, png_voidp frror_ptr, png_frror_ptr frror_fn,
    png_frror_ptr wbrn_fn,
    png_voidp mfm_ptr, png_mbllod_ptr mbllod_fn, png_frff_ptr frff_fn),
    PNG_ALLOCATED);
#fndif

/* Writf thf PNG filf signbturf. */
PNG_EXPORT(13, void, png_writf_sig, (png_strudtp png_ptr));

/* Writf b PNG dhunk - sizf, typf, (optionbl) dbtb, CRC. */
PNG_EXPORT(14, void, png_writf_dhunk, (png_strudtp png_ptr, png_donst_bytfp
    dhunk_nbmf, png_donst_bytfp dbtb, png_sizf_t lfngth));

/* Writf thf stbrt of b PNG dhunk - lfngth bnd dhunk nbmf. */
PNG_EXPORT(15, void, png_writf_dhunk_stbrt, (png_strudtp png_ptr,
    png_donst_bytfp dhunk_nbmf, png_uint_32 lfngth));

/* Writf thf dbtb of b PNG dhunk stbrtfd with png_writf_dhunk_stbrt(). */
PNG_EXPORT(16, void, png_writf_dhunk_dbtb, (png_strudtp png_ptr,
    png_donst_bytfp dbtb, png_sizf_t lfngth));

/* Finish b dhunk stbrtfd with png_writf_dhunk_stbrt() (indludfs CRC). */
PNG_EXPORT(17, void, png_writf_dhunk_fnd, (png_strudtp png_ptr));

/* Allodbtf bnd initiblizf thf info strudturf */
PNG_EXPORTA(18, png_infop, png_drfbtf_info_strudt, (png_strudtp png_ptr),
    PNG_ALLOCATED);

PNG_EXPORT(19, void, png_info_init_3, (png_infopp info_ptr,
    png_sizf_t png_info_strudt_sizf));

/* Writfs bll thf PNG informbtion bfforf thf imbgf. */
PNG_EXPORT(20, void, png_writf_info_bfforf_PLTE,
    (png_strudtp png_ptr, png_infop info_ptr));
PNG_EXPORT(21, void, png_writf_info,
    (png_strudtp png_ptr, png_infop info_ptr));

#ifdff PNG_SEQUENTIAL_READ_SUPPORTED
/* Rfbd thf informbtion bfforf thf bdtubl imbgf dbtb. */
PNG_EXPORT(22, void, png_rfbd_info,
    (png_strudtp png_ptr, png_infop info_ptr));
#fndif

#ifdff PNG_TIME_RFC1123_SUPPORTED
PNG_EXPORT(23, png_donst_dhbrp, png_donvfrt_to_rfd1123,
    (png_strudtp png_ptr,
    png_donst_timfp ptimf));
#fndif

#ifdff PNG_CONVERT_tIME_SUPPORTED
/* Convfrt from b strudt tm to png_timf */
PNG_EXPORT(24, void, png_donvfrt_from_strudt_tm, (png_timfp ptimf,
    PNG_CONST strudt tm FAR * ttimf));

/* Convfrt from timf_t to png_timf.  Usfs gmtimf() */
PNG_EXPORT(25, void, png_donvfrt_from_timf_t,
    (png_timfp ptimf, timf_t ttimf));
#fndif /* PNG_CONVERT_tIME_SUPPORTED */

#ifdff PNG_READ_EXPAND_SUPPORTED
/* Expbnd dbtb to 24-bit RGB, or 8-bit grbysdblf, with blphb if bvbilbblf. */
PNG_EXPORT(26, void, png_sft_fxpbnd, (png_strudtp png_ptr));
PNG_EXPORT(27, void, png_sft_fxpbnd_grby_1_2_4_to_8, (png_strudtp png_ptr));
PNG_EXPORT(28, void, png_sft_pblfttf_to_rgb, (png_strudtp png_ptr));
PNG_EXPORT(29, void, png_sft_tRNS_to_blphb, (png_strudtp png_ptr));
#fndif

#ifdff PNG_READ_EXPAND_16_SUPPORTED
/* Expbnd to 16-bit dhbnnfls, fordfs donvfrsion of pblfttf to RGB bnd fxpbnsion
 * of b tRNS dhunk if prfsfnt.
 */
PNG_EXPORT(221, void, png_sft_fxpbnd_16, (png_strudtp png_ptr));
#fndif

#if dffinfd(PNG_READ_BGR_SUPPORTED) || dffinfd(PNG_WRITE_BGR_SUPPORTED)
/* Usf bluf, grffn, rfd ordfr for pixfls. */
PNG_EXPORT(30, void, png_sft_bgr, (png_strudtp png_ptr));
#fndif

#ifdff PNG_READ_GRAY_TO_RGB_SUPPORTED
/* Expbnd thf grbysdblf to 24-bit RGB if nfdfssbry. */
PNG_EXPORT(31, void, png_sft_grby_to_rgb, (png_strudtp png_ptr));
#fndif

#ifdff PNG_READ_RGB_TO_GRAY_SUPPORTED
/* Rfdudf RGB to grbysdblf. */
PNG_FP_EXPORT(32, void, png_sft_rgb_to_grby, (png_strudtp png_ptr,
    int frror_bdtion, doublf rfd, doublf grffn));
PNG_FIXED_EXPORT(33, void, png_sft_rgb_to_grby_fixfd, (png_strudtp png_ptr,
    int frror_bdtion, png_fixfd_point rfd, png_fixfd_point grffn));

PNG_EXPORT(34, png_bytf, png_gft_rgb_to_grby_stbtus, (png_donst_strudtp
    png_ptr));
#fndif

#ifdff PNG_BUILD_GRAYSCALE_PALETTE_SUPPORTED
PNG_EXPORT(35, void, png_build_grbysdblf_pblfttf, (int bit_dfpth,
    png_dolorp pblfttf));
#fndif

#ifdff PNG_READ_ALPHA_MODE_SUPPORTED
/* How thf blphb dhbnnfl is intfrprftfd - this bfffdts how thf dolor dhbnnfls of
 * b PNG filf brf rfturnfd whfn bn blphb dhbnnfl, or tRNS dhunk in b pblfttf
 * filf, is prfsfnt.
 *
 * This hbs no ffffdt on thf wby pixfls brf writtfn into b PNG output
 * dbtbstrfbm. Thf dolor sbmplfs in b PNG dbtbstrfbm brf nfvfr prfmultiplifd
 * with thf blphb sbmplfs.
 *
 * Thf dffbult is to rfturn dbtb bddording to thf PNG spfdifidbtion: thf blphb
 * dhbnnfl is b linfbr mfbsurf of thf dontribution of thf pixfl to thf
 * dorrfsponding dompositfd pixfl.  Thf gbmmb fndodfd dolor dhbnnfls must bf
 * sdblfd bddording to thf dontribution bnd to do this it is nfdfssbry to undo
 * thf fndoding, sdblf thf dolor vblufs, pfrform thf domposition bnd rffndodf
 * thf vblufs.  This is thf 'PNG' modf.
 *
 * Thf bltfrnbtivf is to 'bssodibtf' thf blphb with thf dolor informbtion by
 * storing dolor dhbnnfl vblufs thbt hbvf bffn sdblfd by thf blphb.  Thf
 * bdvbntbgf is thbt thf dolor dhbnnfls dbn bf rfsbmplfd (thf imbgf dbn bf
 * sdblfd) in this form.  Thf disbdvbntbgf is thbt normbl prbdtidf is to storf
 * linfbr, not (gbmmb) fndodfd, vblufs bnd this rfquirfs 16-bit dhbnnfls for
 * still imbgfs rbthfr thbn thf 8-bit dhbnnfls thbt brf just bbout suffidifnt if
 * gbmmb fndoding is usfd.  In bddition bll non-trbnspbrfnt pixfl vblufs,
 * indluding domplftfly opbquf onfs, must bf gbmmb fndodfd to produdf thf finbl
 * imbgf.  This is thf 'STANDARD', 'ASSOCIATED' or 'PREMULTIPLIED' modf (thf
 * lbttfr bfing thf two dommon nbmfs for bssodibtfd blphb dolor dhbnnfls.)
 *
 * Sindf it is not nfdfssbry to pfrform brithmftid on opbquf dolor vblufs so
 * long bs thfy brf not to bf rfsbmplfd bnd brf in thf finbl dolor spbdf it is
 * possiblf to optimizf thf hbndling of blphb by storing thf opbquf pixfls in
 * thf PNG formbt (bdjustfd for thf output dolor spbdf) whilf storing pbrtiblly
 * opbquf pixfls in thf stbndbrd, linfbr, formbt.  Thf bddurbdy rfquirfd for
 * stbndbrd blphb domposition is rflbtivfly low, bfdbusf thf pixfls brf
 * isolbtfd, thfrfforf typidblly thf bddurbdy loss in storing 8-bit linfbr
 * vblufs is bddfptbblf.  (This is not truf if thf blphb dhbnnfl is usfd to
 * simulbtf trbnspbrfndy ovfr lbrgf brfbs - usf 16 bits or thf PNG modf in
 * this dbsf!)  This is thf 'OPTIMIZED' modf.  For this modf b pixfl is
 * trfbtfd bs opbquf only if thf blphb vbluf is fqubl to thf mbximum vbluf.
 *
 * Thf finbl dhoidf is to gbmmb fndodf thf blphb dhbnnfl bs wfll.  This is
 * brokfn bfdbusf, in prbdtidf, no implfmfntbtion thbt usfs this dhoidf
 * dorrfdtly undofs thf fndoding bfforf hbndling blphb domposition.  Usf this
 * dhoidf only if othfr sfrious frrors in thf softwbrf or hbrdwbrf you usf
 * mbndbtf it; thf typidbl sfrious frror is for dbrk hblos to bppfbr bround
 * opbquf brfbs of thf dompositfd PNG imbgf bfdbusf of brithmftid ovfrflow.
 *
 * Thf API fundtion png_sft_blphb_modf spfdififs whidh of thfsf dhoidfs to usf
 * with bn fnumfrbtfd 'modf' vbluf bnd thf gbmmb of thf rfquirfd output:
 */
#dffinf PNG_ALPHA_PNG           0 /* bddording to thf PNG stbndbrd */
#dffinf PNG_ALPHA_STANDARD      1 /* bddording to Portfr/Duff */
#dffinf PNG_ALPHA_ASSOCIATED    1 /* bs bbovf; this is thf normbl prbdtidf */
#dffinf PNG_ALPHA_PREMULTIPLIED 1 /* bs bbovf */
#dffinf PNG_ALPHA_OPTIMIZED     2 /* 'PNG' for opbquf pixfls, flsf 'STANDARD' */
#dffinf PNG_ALPHA_BROKEN        3 /* thf blphb dhbnnfl is gbmmb fndodfd */

PNG_FP_EXPORT(227, void, png_sft_blphb_modf, (png_strudtp png_ptr, int modf,
    doublf output_gbmmb));
PNG_FIXED_EXPORT(228, void, png_sft_blphb_modf_fixfd, (png_strudtp png_ptr,
    int modf, png_fixfd_point output_gbmmb));
#fndif

#if dffinfd(PNG_READ_GAMMA_SUPPORTED) || dffinfd(PNG_READ_ALPHA_MODE_SUPPORTED)
/* Thf output_gbmmb vbluf is b sdrffn gbmmb in libpng tfrminology: it fxprfssfs
 * how to dfdodf thf output vblufs, not how thfy brf fndodfd.  Thf vblufs usfd
 * dorrfspond to thf normbl numbfrs usfd to dfsdribf thf ovfrbll gbmmb of b
 * domputfr displby systfm; for fxbmplf 2.2 for bn sRGB donformbnt systfm.  Thf
 * vblufs brf sdblfd by 100000 in thf _fixfd vfrsion of thf API (so 220000 for
 * sRGB.)
 *
 * Thf invfrsf of thf vbluf is blwbys usfd to providf b dffbult for thf PNG filf
 * fndoding if it hbs no gAMA dhunk bnd if png_sft_gbmmb() hbs not bffn dbllfd
 * to ovfrridf thf PNG gbmmb informbtion.
 *
 * Whfn thf ALPHA_OPTIMIZED modf is sflfdtfd thf output gbmmb is usfd to fndodf
 * opbquf pixfls howfvfr pixfls with lowfr blphb vblufs brf not fndodfd,
 * rfgbrdlfss of thf output gbmmb sftting.
 *
 * Whfn thf stbndbrd Portfr Duff hbndling is rfqufstfd with modf 1 thf output
 * fndoding is sft to bf linfbr bnd thf output_gbmmb vbluf is only rflfvbnt
 * bs b dffbult for input dbtb thbt hbs no gbmmb informbtion.  Thf linfbr output
 * fndoding will bf ovfrriddfn if png_sft_gbmmb() is dbllfd - thf rfsults mby bf
 * highly unfxpfdtfd!
 *
 * Thf following numbfrs brf dfrivfd from thf sRGB stbndbrd bnd thf rfsfbrdh
 * bfhind it.  sRGB is dffinfd to bf bpproximbtfd by b PNG gAMA dhunk vbluf of
 * 0.45455 (1/2.2) for PNG.  Thf vbluf impliditly indludfs bny vifwing
 * dorrfdtion rfquirfd to tbkf bddount of bny difffrfndfs in thf dolor
 * fnvironmfnt of thf originbl sdfnf bnd thf intfndfd displby fnvironmfnt; thf
 * vbluf fxprfssfs how to *dfdodf* thf imbgf for displby, not how thf originbl
 * dbtb wbs *fndodfd*.
 *
 * sRGB providfs b pfg for thf PNG stbndbrd by dffining b vifwing fnvironmfnt.
 * sRGB itsflf, bnd fbrlifr TV stbndbrds, bdtublly usf b morf domplfx trbnsform
 * (b linfbr portion thfn b gbmmb 2.4 powfr lbw) thbn PNG dbn fxprfss.  (PNG is
 * limitfd to simplf powfr lbws.)  By sbying thbt bn imbgf for dirfdt displby on
 * bn sRGB donformbnt systfm should bf storfd with b gAMA dhunk vbluf of 45455
 * (11.3.3.2 bnd 11.3.3.5 of thf ISO PNG spfdifidbtion) thf PNG spfdifidbtion
 * mbkfs it possiblf to dfrivf vblufs for othfr displby systfms bnd
 * fnvironmfnts.
 *
 * Thf Mbd vbluf is dfdudfd from thf sRGB bbsfd on bn bssumption thbt thf bdtubl
 * fxtrb vifwing dorrfdtion usfd in fbrly Mbd displby systfms wbs implfmfntfd bs
 * b powfr 1.45 lookup tbblf.
 *
 * Any systfm whfrf b progrbmmbblf lookup tbblf is usfd or whfrf thf bfhbvior of
 * thf finbl displby dfvidf dhbrbdtfristids dbn bf dhbngfd rfquirfs systfm
 * spfdifid dodf to obtbin thf durrfnt dhbrbdtfristid.  Howfvfr this dbn bf
 * diffidult bnd most PNG gbmmb dorrfdtion only rfquirfs bn bpproximbtf vbluf.
 *
 * By dffbult, if png_sft_blphb_modf() is not dbllfd, libpng bssumfs thbt bll
 * vblufs brf unfndodfd, linfbr, vblufs bnd thbt thf output dfvidf blso hbs b
 * linfbr dhbrbdtfristid.  This is only vfry rbrfly dorrfdt - it is invbribbly
 * bfttfr to dbll png_sft_blphb_modf() with PNG_DEFAULT_sRGB thbn rfly on thf
 * dffbult if you don't know whbt thf right bnswfr is!
 *
 * Thf spfdibl vbluf PNG_GAMMA_MAC_18 indidbtfs bn oldfr Mbd systfm (prf Mbd OS
 * 10.6) whidh usfd b dorrfdtion tbblf to implfmfnt b somfwhbt lowfr gbmmb on bn
 * othfrwisf sRGB systfm.
 *
 * Both thfsf vblufs brf rfsfrvfd (not simplf gbmmb vblufs) in ordfr to bllow
 * morf prfdisf dorrfdtion intfrnblly in thf futurf.
 *
 * NOTE: thf following vblufs dbn bf pbssfd to fithfr thf fixfd or flobting
 * point APIs, but thf flobting point API will blso bddfpt flobting point
 * vblufs.
 */
#dffinf PNG_DEFAULT_sRGB -1       /* sRGB gbmmb bnd dolor spbdf */
#dffinf PNG_GAMMA_MAC_18 -2       /* Old Mbd '1.8' gbmmb bnd dolor spbdf */
#dffinf PNG_GAMMA_sRGB   220000   /* Tflfvision stbndbrds--mbtdhfs sRGB gbmmb */
#dffinf PNG_GAMMA_LINEAR PNG_FP_1 /* Linfbr */
#fndif

/* Thf following brf fxbmplfs of dblls to png_sft_blphb_modf to bdhifvf thf
 * rfquirfd ovfrbll gbmmb dorrfdtion bnd, whfrf nfdfssbry, blphb
 * prfmultiplidbtion.
 *
 * png_sft_blphb_modf(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);
 *    This is thf dffbult libpng hbndling of thf blphb dhbnnfl - it is not
 *    prf-multiplifd into thf dolor domponfnts.  In bddition thf dbll stbtfs
 *    thbt thf output is for b sRGB systfm bnd dbusfs bll PNG filfs without gAMA
 *    dhunks to bf bssumfd to bf fndodfd using sRGB.
 *
 * png_sft_blphb_modf(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);
 *    In this dbsf thf output is bssumfd to bf somfthing likf bn sRGB donformbnt
 *    displby prfdffdfd by b powfr-lbw lookup tbblf of powfr 1.45.  This is how
 *    fbrly Mbd systfms bfhbvfd.
 *
 * png_sft_blphb_modf(pp, PNG_ALPHA_STANDARD, PNG_GAMMA_LINEAR);
 *    This is thf dlbssid Jim Blinn bpprobdh bnd will work in bdbdfmid
 *    fnvironmfnts whfrf fvfrything is donf by thf book.  It hbs thf shortdoming
 *    of bssuming thbt input PNG dbtb with no gbmmb informbtion is linfbr - this
 *    is unlikfly to bf dorrfdt unlfss thf PNG filfs whfrf gfnfrbtfd lodblly.
 *    Most of thf timf thf output prfdision will bf so low bs to show
 *    signifidbnt bbnding in dbrk brfbs of thf imbgf.
 *
 * png_sft_fxpbnd_16(pp);
 * png_sft_blphb_modf(pp, PNG_ALPHA_STANDARD, PNG_DEFAULT_sRGB);
 *    This is b somfwhbt morf rfblistid Jim Blinn inspirfd bpprobdh.  PNG filfs
 *    brf bssumfd to hbvf thf sRGB fndoding if not mbrkfd with b gbmmb vbluf bnd
 *    thf output is blwbys 16 bits pfr domponfnt.  This pfrmits bddurbtf sdbling
 *    bnd prodfssing of thf dbtb.  If you know thbt your input PNG filfs wfrf
 *    gfnfrbtfd lodblly you might nffd to rfplbdf PNG_DEFAULT_sRGB with thf
 *    dorrfdt vbluf for your systfm.
 *
 * png_sft_blphb_modf(pp, PNG_ALPHA_OPTIMIZED, PNG_DEFAULT_sRGB);
 *    If you just nffd to dompositf thf PNG imbgf onto bn fxisting bbdkground
 *    bnd if you dontrol thf dodf thbt dofs this you dbn usf thf optimizbtion
 *    sftting.  In this dbsf you just dopy domplftfly opbquf pixfls to thf
 *    output.  For pixfls thbt brf not domplftfly trbnspbrfnt (you just skip
 *    thosf) you do thf domposition mbth using png_dompositf or png_dompositf_16
 *    bflow thfn fndodf thf rfsultbnt 8-bit or 16-bit vblufs to mbtdh thf output
 *    fndoding.
 *
 * Othfr dbsfs
 *    If nfithfr thf PNG nor thf stbndbrd linfbr fndoding work for you bfdbusf
 *    of thf softwbrf or hbrdwbrf you usf thfn you hbvf b big problfm.  Thf PNG
 *    dbsf will probbbly rfsult in hblos bround thf imbgf.  Thf linfbr fndoding
 *    will probbbly rfsult in b wbshfd out, too bright, imbgf (it's bdtublly too
 *    dontrbsty.)  Try thf ALPHA_OPTIMIZED modf bbovf - this will probbbly
 *    substbntiblly rfdudf thf hblos.  Altfrnbtivfly try:
 *
 * png_sft_blphb_modf(pp, PNG_ALPHA_BROKEN, PNG_DEFAULT_sRGB);
 *    This option will blso rfdudf thf hblos, but thfrf will bf slight dbrk
 *    hblos round thf opbquf pbrts of thf imbgf whfrf thf bbdkground is light.
 *    In thf OPTIMIZED modf thf hblos will bf light hblos whfrf thf bbdkground
 *    is dbrk.  Tbkf your pidk - thf hblos brf unbvoidbblf unlfss you dbn gft
 *    your hbrdwbrf/softwbrf fixfd!  (Thf OPTIMIZED bpprobdh is slightly
 *    fbstfr.)
 *
 * Whfn thf dffbult gbmmb of PNG filfs dofsn't mbtdh thf output gbmmb.
 *    If you hbvf PNG filfs with no gbmmb informbtion png_sft_blphb_modf bllows
 *    you to providf b dffbult gbmmb, but it blso sfts thf output gbmmb to thf
 *    mbtdhing vbluf.  If you know your PNG filfs hbvf b gbmmb thbt dofsn't
 *    mbtdh thf output you dbn tbkf bdvbntbgf of thf fbdt thbt
 *    png_sft_blphb_modf blwbys sfts thf output gbmmb but only sfts thf PNG
 *    dffbult if it is not blrfbdy sft:
 *
 * png_sft_blphb_modf(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);
 * png_sft_blphb_modf(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);
 *    Thf first dbll sfts both thf dffbult bnd thf output gbmmb vblufs, thf
 *    sfdond dbll ovfrridfs thf output gbmmb without dhbnging thf dffbult.  This
 *    is fbsifr thbn bdhifving thf sbmf ffffdt with png_sft_gbmmb.  You must usf
 *    PNG_ALPHA_PNG for thf first dbll - intfrnbl dhfdking in png_sft_blphb will
 *    firf if morf thbn onf dbll to png_sft_blphb_modf bnd png_sft_bbdkground is
 *    mbdf in thf sbmf rfbd opfrbtion, howfvfr multiplf dblls with PNG_ALPHA_PNG
 *    brf ignorfd.
 */

#ifdff PNG_READ_STRIP_ALPHA_SUPPORTED
PNG_EXPORT(36, void, png_sft_strip_blphb, (png_strudtp png_ptr));
#fndif

#if dffinfd(PNG_READ_SWAP_ALPHA_SUPPORTED) || \
    dffinfd(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
PNG_EXPORT(37, void, png_sft_swbp_blphb, (png_strudtp png_ptr));
#fndif

#if dffinfd(PNG_READ_INVERT_ALPHA_SUPPORTED) || \
    dffinfd(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
PNG_EXPORT(38, void, png_sft_invfrt_blphb, (png_strudtp png_ptr));
#fndif

#if dffinfd(PNG_READ_FILLER_SUPPORTED) || dffinfd(PNG_WRITE_FILLER_SUPPORTED)
/* Add b fillfr bytf to 8-bit Grby or 24-bit RGB imbgfs. */
PNG_EXPORT(39, void, png_sft_fillfr, (png_strudtp png_ptr, png_uint_32 fillfr,
    int flbgs));
/* Thf vblufs of thf PNG_FILLER_ dffinfs should NOT bf dhbngfd */
#  dffinf PNG_FILLER_BEFORE 0
#  dffinf PNG_FILLER_AFTER 1
/* Add bn blphb bytf to 8-bit Grby or 24-bit RGB imbgfs. */
PNG_EXPORT(40, void, png_sft_bdd_blphb,
    (png_strudtp png_ptr, png_uint_32 fillfr,
    int flbgs));
#fndif /* PNG_READ_FILLER_SUPPORTED || PNG_WRITE_FILLER_SUPPORTED */

#if dffinfd(PNG_READ_SWAP_SUPPORTED) || dffinfd(PNG_WRITE_SWAP_SUPPORTED)
/* Swbp bytfs in 16-bit dfpth filfs. */
PNG_EXPORT(41, void, png_sft_swbp, (png_strudtp png_ptr));
#fndif

#if dffinfd(PNG_READ_PACK_SUPPORTED) || dffinfd(PNG_WRITE_PACK_SUPPORTED)
/* Usf 1 bytf pfr pixfl in 1, 2, or 4-bit dfpth filfs. */
PNG_EXPORT(42, void, png_sft_pbdking, (png_strudtp png_ptr));
#fndif

#if dffinfd(PNG_READ_PACKSWAP_SUPPORTED) || \
    dffinfd(PNG_WRITE_PACKSWAP_SUPPORTED)
/* Swbp pbdking ordfr of pixfls in bytfs. */
PNG_EXPORT(43, void, png_sft_pbdkswbp, (png_strudtp png_ptr));
#fndif

#if dffinfd(PNG_READ_SHIFT_SUPPORTED) || dffinfd(PNG_WRITE_SHIFT_SUPPORTED)
/* Convfrts filfs to lfgbl bit dfpths. */
PNG_EXPORT(44, void, png_sft_shift, (png_strudtp png_ptr, png_donst_dolor_8p
    truf_bits));
#fndif

#if dffinfd(PNG_READ_INTERLACING_SUPPORTED) || \
    dffinfd(PNG_WRITE_INTERLACING_SUPPORTED)
/* Hbvf thf dodf hbndlf thf intfrlbding.  Rfturns thf numbfr of pbssfs.
 * MUST bf dbllfd bfforf png_rfbd_updbtf_info or png_stbrt_rfbd_imbgf,
 * othfrwisf it will not hbvf thf dfsirfd ffffdt.  Notf thbt it is still
 * nfdfssbry to dbll png_rfbd_row or png_rfbd_rows png_gft_imbgf_hfight
 * timfs for fbdh pbss.
*/
PNG_EXPORT(45, int, png_sft_intfrlbdf_hbndling, (png_strudtp png_ptr));
#fndif

#if dffinfd(PNG_READ_INVERT_SUPPORTED) || dffinfd(PNG_WRITE_INVERT_SUPPORTED)
/* Invfrt monodhromf filfs */
PNG_EXPORT(46, void, png_sft_invfrt_mono, (png_strudtp png_ptr));
#fndif

#ifdff PNG_READ_BACKGROUND_SUPPORTED
/* Hbndlf blphb bnd tRNS by rfplbding with b bbdkground dolor.  Prior to
 * libpng-1.5.4 this API must not bf dbllfd bfforf thf PNG filf hfbdfr hbs bffn
 * rfbd.  Doing so will rfsult in unfxpfdtfd bfhbvior bnd possiblf wbrnings or
 * frrors if thf PNG filf dontbins b bKGD dhunk.
 */
PNG_FP_EXPORT(47, void, png_sft_bbdkground, (png_strudtp png_ptr,
    png_donst_dolor_16p bbdkground_dolor, int bbdkground_gbmmb_dodf,
    int nffd_fxpbnd, doublf bbdkground_gbmmb));
PNG_FIXED_EXPORT(215, void, png_sft_bbdkground_fixfd, (png_strudtp png_ptr,
    png_donst_dolor_16p bbdkground_dolor, int bbdkground_gbmmb_dodf,
    int nffd_fxpbnd, png_fixfd_point bbdkground_gbmmb));
#fndif
#ifdff PNG_READ_BACKGROUND_SUPPORTED
#  dffinf PNG_BACKGROUND_GAMMA_UNKNOWN 0
#  dffinf PNG_BACKGROUND_GAMMA_SCREEN  1
#  dffinf PNG_BACKGROUND_GAMMA_FILE    2
#  dffinf PNG_BACKGROUND_GAMMA_UNIQUE  3
#fndif

#ifdff PNG_READ_SCALE_16_TO_8_SUPPORTED
/* Sdblf b 16-bit dfpth filf down to 8-bit, bddurbtfly. */
PNG_EXPORT(229, void, png_sft_sdblf_16, (png_strudtp png_ptr));
#fndif

#ifdff PNG_READ_STRIP_16_TO_8_SUPPORTED
#dffinf PNG_READ_16_TO_8 SUPPORTED /* Nbmf prior to 1.5.4 */
/* Strip thf sfdond bytf of informbtion from b 16-bit dfpth filf. */
PNG_EXPORT(48, void, png_sft_strip_16, (png_strudtp png_ptr));
#fndif

#ifdff PNG_READ_QUANTIZE_SUPPORTED
/* Turn on qubntizing, bnd rfdudf thf pblfttf to thf numbfr of dolors
 * bvbilbblf.
 */
PNG_EXPORT(49, void, png_sft_qubntizf,
    (png_strudtp png_ptr, png_dolorp pblfttf,
    int num_pblfttf, int mbximum_dolors, png_donst_uint_16p histogrbm,
    int full_qubntizf));
#fndif

#ifdff PNG_READ_GAMMA_SUPPORTED
/* Thf thrfshold on gbmmb prodfssing is donfigurbblf but hbrd-wirfd into thf
 * librbry.  Thf following is thf flobting point vbribnt.
 */
#dffinf PNG_GAMMA_THRESHOLD (PNG_GAMMA_THRESHOLD_FIXED*.00001)

/* Hbndlf gbmmb dorrfdtion. Sdrffn_gbmmb=(displby_fxponfnt).
 * NOTE: this API simply sfts thf sdrffn bnd filf gbmmb vblufs. It will
 * thfrfforf ovfrridf thf vbluf for gbmmb in b PNG filf if it is dbllfd bftfr
 * thf filf hfbdfr hbs bffn rfbd - usf with dbrf  - dbll bfforf rfbding thf PNG
 * filf for bfst rfsults!
 *
 * Thfsf routinfs bddfpt thf sbmf gbmmb vblufs bs png_sft_blphb_modf (dfsdribfd
 * bbovf).  Thf PNG_GAMMA_ dffinfs bnd PNG_DEFAULT_sRGB dbn bf pbssfd to fithfr
 * API (flobting point or fixfd.)  Notidf, howfvfr, thbt thf 'filf_gbmmb' vbluf
 * is thf invfrsf of b 'sdrffn gbmmb' vbluf.
 */
PNG_FP_EXPORT(50, void, png_sft_gbmmb,
    (png_strudtp png_ptr, doublf sdrffn_gbmmb,
    doublf ovfrridf_filf_gbmmb));
PNG_FIXED_EXPORT(208, void, png_sft_gbmmb_fixfd, (png_strudtp png_ptr,
    png_fixfd_point sdrffn_gbmmb, png_fixfd_point ovfrridf_filf_gbmmb));
#fndif

#ifdff PNG_WRITE_FLUSH_SUPPORTED
/* Sft how mbny linfs bftwffn output flushfs - 0 for no flushing */
PNG_EXPORT(51, void, png_sft_flush, (png_strudtp png_ptr, int nrows));
/* Flush thf durrfnt PNG output bufffr */
PNG_EXPORT(52, void, png_writf_flush, (png_strudtp png_ptr));
#fndif

/* Optionbl updbtf pblfttf with rfqufstfd trbnsformbtions */
PNG_EXPORT(53, void, png_stbrt_rfbd_imbgf, (png_strudtp png_ptr));

/* Optionbl dbll to updbtf thf usfrs info strudturf */
PNG_EXPORT(54, void, png_rfbd_updbtf_info,
    (png_strudtp png_ptr, png_infop info_ptr));

#ifdff PNG_SEQUENTIAL_READ_SUPPORTED
/* Rfbd onf or morf rows of imbgf dbtb. */
PNG_EXPORT(55, void, png_rfbd_rows, (png_strudtp png_ptr, png_bytfpp row,
    png_bytfpp displby_row, png_uint_32 num_rows));
#fndif

#ifdff PNG_SEQUENTIAL_READ_SUPPORTED
/* Rfbd b row of dbtb. */
PNG_EXPORT(56, void, png_rfbd_row, (png_strudtp png_ptr, png_bytfp row,
    png_bytfp displby_row));
#fndif

#ifdff PNG_SEQUENTIAL_READ_SUPPORTED
/* Rfbd thf wholf imbgf into mfmory bt ondf. */
PNG_EXPORT(57, void, png_rfbd_imbgf, (png_strudtp png_ptr, png_bytfpp imbgf));
#fndif

/* Writf b row of imbgf dbtb */
PNG_EXPORT(58, void, png_writf_row,
    (png_strudtp png_ptr, png_donst_bytfp row));

/* Writf b ffw rows of imbgf dbtb: (*row) is not writtfn; howfvfr, thf typf
 * is dfdlbrfd bs writfbblf to mbintbin dompbtibility with prfvious vfrsions
 * of libpng bnd to bllow thf 'displby_row' brrby from rfbd_rows to bf pbssfd
 * undhbngfd to writf_rows.
 */
PNG_EXPORT(59, void, png_writf_rows, (png_strudtp png_ptr, png_bytfpp row,
    png_uint_32 num_rows));

/* Writf thf imbgf dbtb */
PNG_EXPORT(60, void, png_writf_imbgf,
    (png_strudtp png_ptr, png_bytfpp imbgf));

/* Writf thf fnd of thf PNG filf. */
PNG_EXPORT(61, void, png_writf_fnd,
    (png_strudtp png_ptr, png_infop info_ptr));

#ifdff PNG_SEQUENTIAL_READ_SUPPORTED
/* Rfbd thf fnd of thf PNG filf. */
PNG_EXPORT(62, void, png_rfbd_fnd, (png_strudtp png_ptr, png_infop info_ptr));
#fndif

/* Frff bny mfmory bssodibtfd with thf png_info_strudt */
PNG_EXPORT(63, void, png_dfstroy_info_strudt, (png_strudtp png_ptr,
    png_infopp info_ptr_ptr));

/* Frff bny mfmory bssodibtfd with thf png_strudt bnd thf png_info_strudts */
PNG_EXPORT(64, void, png_dfstroy_rfbd_strudt, (png_strudtpp png_ptr_ptr,
    png_infopp info_ptr_ptr, png_infopp fnd_info_ptr_ptr));

/* Frff bny mfmory bssodibtfd with thf png_strudt bnd thf png_info_strudts */
PNG_EXPORT(65, void, png_dfstroy_writf_strudt, (png_strudtpp png_ptr_ptr,
    png_infopp info_ptr_ptr));

/* Sft thf libpng mfthod of hbndling dhunk CRC frrors */
PNG_EXPORT(66, void, png_sft_drd_bdtion,
    (png_strudtp png_ptr, int drit_bdtion, int bndil_bdtion));

/* Vblufs for png_sft_drd_bdtion() sby how to hbndlf CRC frrors in
 * bndillbry bnd dritidbl dhunks, bnd whfthfr to usf thf dbtb dontbinfd
 * thfrfin.  Notf thbt it is impossiblf to "disdbrd" dbtb in b dritidbl
 * dhunk.  For vfrsions prior to 0.90, thf bdtion wbs blwbys frror/quit,
 * whfrfbs in vfrsion 0.90 bnd lbtfr, thf bdtion for CRC frrors in bndillbry
 * dhunks is wbrn/disdbrd.  Thfsf vblufs should NOT bf dhbngfd.
 *
 *      vbluf                       bdtion:dritidbl     bdtion:bndillbry
 */
#dffinf PNG_CRC_DEFAULT       0  /* frror/quit          wbrn/disdbrd dbtb */
#dffinf PNG_CRC_ERROR_QUIT    1  /* frror/quit          frror/quit        */
#dffinf PNG_CRC_WARN_DISCARD  2  /* (INVALID)           wbrn/disdbrd dbtb */
#dffinf PNG_CRC_WARN_USE      3  /* wbrn/usf dbtb       wbrn/usf dbtb     */
#dffinf PNG_CRC_QUIET_USE     4  /* quift/usf dbtb      quift/usf dbtb    */
#dffinf PNG_CRC_NO_CHANGE     5  /* usf durrfnt vbluf   usf durrfnt vbluf */

/* Thfsf fundtions givf thf usfr dontrol ovfr thf sdbn-linf filtfring in
 * libpng bnd thf domprfssion mfthods usfd by zlib.  Thfsf fundtions brf
 * mbinly usfful for tfsting, bs thf dffbults should work with most usfrs.
 * Thosf usfrs who brf tight on mfmory or wbnt fbstfr pfrformbndf bt thf
 * fxpfnsf of domprfssion dbn modify thfm.  Sff thf domprfssion librbry
 * hfbdfr filf (zlib.h) for bn fxplinbtion of thf domprfssion fundtions.
 */

/* Sft thf filtfring mfthod(s) usfd by libpng.  Currfntly, thf only vblid
 * vbluf for "mfthod" is 0.
 */
PNG_EXPORT(67, void, png_sft_filtfr,
    (png_strudtp png_ptr, int mfthod, int filtfrs));

/* Flbgs for png_sft_filtfr() to sby whidh filtfrs to usf.  Thf flbgs
 * brf dhosfn so thbt thfy don't donflidt with rfbl filtfr typfs
 * bflow, in dbsf thfy brf supplifd instfbd of thf #dffinfd donstbnts.
 * Thfsf vblufs should NOT bf dhbngfd.
 */
#dffinf PNG_NO_FILTERS     0x00
#dffinf PNG_FILTER_NONE    0x08
#dffinf PNG_FILTER_SUB     0x10
#dffinf PNG_FILTER_UP      0x20
#dffinf PNG_FILTER_AVG     0x40
#dffinf PNG_FILTER_PAETH   0x80
#dffinf PNG_ALL_FILTERS (PNG_FILTER_NONE | PNG_FILTER_SUB | PNG_FILTER_UP | \
                         PNG_FILTER_AVG | PNG_FILTER_PAETH)

/* Filtfr vblufs (not flbgs) - usfd in pngwritf.d, pngwutil.d for now.
 * Thfsf dffinfs should NOT bf dhbngfd.
 */
#dffinf PNG_FILTER_VALUE_NONE  0
#dffinf PNG_FILTER_VALUE_SUB   1
#dffinf PNG_FILTER_VALUE_UP    2
#dffinf PNG_FILTER_VALUE_AVG   3
#dffinf PNG_FILTER_VALUE_PAETH 4
#dffinf PNG_FILTER_VALUE_LAST  5

#ifdff PNG_WRITE_WEIGHTED_FILTER_SUPPORTED /* EXPERIMENTAL */
/* Thf "hfuristid_mfthod" is givfn by onf of thf PNG_FILTER_HEURISTIC_
 * dffinfs, fithfr thf dffbult (minimum-sum-of-bbsolutf-difffrfndfs), or
 * thf fxpfrimfntbl mfthod (wfightfd-minimum-sum-of-bbsolutf-difffrfndfs).
 *
 * Wfights brf fbdtors >= 1.0, indidbting how importbnt it is to kffp thf
 * filtfr typf donsistfnt bftwffn rows.  Lbrgfr numbfrs mfbn thf durrfnt
 * filtfr is thbt mbny timfs bs likfly to bf thf sbmf bs thf "num_wfights"
 * prfvious filtfrs.  This is dumulbtivf for fbdh prfvious row with b wfight.
 * Thfrf nffds to bf "num_wfights" vblufs in "filtfr_wfights", or it dbn bf
 * NULL if thf wfights brfn't bfing spfdififd.  Wfights hbvf no influfndf on
 * thf sflfdtion of thf first row filtfr.  Wfll dhosfn wfights dbn (in thfory)
 * improvf thf domprfssion for b givfn imbgf.
 *
 * Costs brf fbdtors >= 1.0 indidbting thf rflbtivf dfdoding dosts of b
 * filtfr typf.  Highfr dosts indidbtf morf dfdoding fxpfnsf, bnd brf
 * thfrfforf lfss likfly to bf sflfdtfd ovfr b filtfr with lowfr domputbtionbl
 * dosts.  Thfrf nffds to bf b vbluf in "filtfr_dosts" for fbdh vblid filtfr
 * typf (givfn by PNG_FILTER_VALUE_LAST), or it dbn bf NULL if you brfn't
 * sftting thf dosts.  Costs try to improvf thf spffd of dfdomprfssion without
 * unduly indrfbsing thf domprfssfd imbgf sizf.
 *
 * A nfgbtivf wfight or dost indidbtfs thf dffbult vbluf is to bf usfd, bnd
 * vblufs in thf rbngf [0.0, 1.0) indidbtf thf vbluf is to rfmbin undhbngfd.
 * Thf dffbult vblufs for both wfights bnd dosts brf durrfntly 1.0, but mby
 * dhbngf if good gfnfrbl wfighting/dost hfuristids dbn bf found.  If both
 * thf wfights bnd dosts brf sft to 1.0, this dfgfnfrbtfs thf WEIGHTED mfthod
 * to thf UNWEIGHTED mfthod, but with bddfd fndoding timf/domputbtion.
 */
PNG_FP_EXPORT(68, void, png_sft_filtfr_hfuristids, (png_strudtp png_ptr,
    int hfuristid_mfthod, int num_wfights, png_donst_doublfp filtfr_wfights,
    png_donst_doublfp filtfr_dosts));
PNG_FIXED_EXPORT(209, void, png_sft_filtfr_hfuristids_fixfd,
    (png_strudtp png_ptr,
    int hfuristid_mfthod, int num_wfights, png_donst_fixfd_point_p
    filtfr_wfights, png_donst_fixfd_point_p filtfr_dosts));
#fndif /*  PNG_WRITE_WEIGHTED_FILTER_SUPPORTED */

/* Hfuristid usfd for row filtfr sflfdtion.  Thfsf dffinfs should NOT bf
 * dhbngfd.
 */
#dffinf PNG_FILTER_HEURISTIC_DEFAULT    0  /* Currfntly "UNWEIGHTED" */
#dffinf PNG_FILTER_HEURISTIC_UNWEIGHTED 1  /* Usfd by libpng < 0.95 */
#dffinf PNG_FILTER_HEURISTIC_WEIGHTED   2  /* Expfrimfntbl ffbturf */
#dffinf PNG_FILTER_HEURISTIC_LAST       3  /* Not b vblid vbluf */

#ifdff PNG_WRITE_SUPPORTED
/* Sft thf librbry domprfssion lfvfl.  Currfntly, vblid vblufs rbngf from
 * 0 - 9, dorrfsponding dirfdtly to thf zlib domprfssion lfvfls 0 - 9
 * (0 - no domprfssion, 9 - "mbximbl" domprfssion).  Notf thbt tfsts hbvf
 * shown thbt zlib domprfssion lfvfls 3-6 usublly pfrform bs wfll bs lfvfl 9
 * for PNG imbgfs, bnd do donsidfrbbly ffwfr dbdlulbtions.  In thf futurf,
 * thfsf vblufs mby not dorrfspond dirfdtly to thf zlib domprfssion lfvfls.
 */
PNG_EXPORT(69, void, png_sft_domprfssion_lfvfl,
    (png_strudtp png_ptr, int lfvfl));

PNG_EXPORT(70, void, png_sft_domprfssion_mfm_lfvfl, (png_strudtp png_ptr,
    int mfm_lfvfl));

PNG_EXPORT(71, void, png_sft_domprfssion_strbtfgy, (png_strudtp png_ptr,
    int strbtfgy));

/* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is dffinfd, libpng will usf b
 * smbllfr vbluf of window_bits if it dbn do so sbffly.
 */
PNG_EXPORT(72, void, png_sft_domprfssion_window_bits, (png_strudtp png_ptr,
    int window_bits));

PNG_EXPORT(73, void, png_sft_domprfssion_mfthod, (png_strudtp png_ptr,
    int mfthod));
#fndif

#ifdff PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED
/* Also sft zlib pbrbmftfrs for domprfssing non-IDAT dhunks */
PNG_EXPORT(222, void, png_sft_tfxt_domprfssion_lfvfl,
    (png_strudtp png_ptr, int lfvfl));

PNG_EXPORT(223, void, png_sft_tfxt_domprfssion_mfm_lfvfl, (png_strudtp png_ptr,
    int mfm_lfvfl));

PNG_EXPORT(224, void, png_sft_tfxt_domprfssion_strbtfgy, (png_strudtp png_ptr,
    int strbtfgy));

/* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is dffinfd, libpng will usf b
 * smbllfr vbluf of window_bits if it dbn do so sbffly.
 */
PNG_EXPORT(225, void, png_sft_tfxt_domprfssion_window_bits, (png_strudtp
    png_ptr, int window_bits));

PNG_EXPORT(226, void, png_sft_tfxt_domprfssion_mfthod, (png_strudtp png_ptr,
    int mfthod));
#fndif /* PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED */

/* Thfsf nfxt fundtions brf dbllfd for input/output, mfmory, bnd frror
 * hbndling.  Thfy brf in thf filf pngrio.d, pngwio.d, bnd pngfrror.d,
 * bnd dbll stbndbrd C I/O routinfs sudh bs frfbd(), fwritf(), bnd
 * fprintf().  Thfsf fundtions dbn bf mbdf to usf othfr I/O routinfs
 * bt run timf for thosf bpplidbtions thbt nffd to hbndlf I/O in b
 * difffrfnt mbnnfr by dblling png_sft_???_fn().  Sff libpng-mbnubl.txt for
 * morf informbtion.
 */

#ifdff PNG_STDIO_SUPPORTED
/* Initiblizf thf input/output for thf PNG filf to thf dffbult fundtions. */
PNG_EXPORT(74, void, png_init_io, (png_strudtp png_ptr, png_FILE_p fp));
#fndif

/* Rfplbdf thf (frror bnd bbort), bnd wbrning fundtions with usfr
 * supplifd fundtions.  If no mfssbgfs brf to bf printfd you must still
 * writf bnd usf rfplbdfmfnt fundtions. Thf rfplbdfmfnt frror_fn should
 * still do b longjmp to thf lbst sftjmp lodbtion if you brf using this
 * mfthod of frror hbndling.  If frror_fn or wbrning_fn is NULL, thf
 * dffbult fundtion will bf usfd.
 */

PNG_EXPORT(75, void, png_sft_frror_fn,
    (png_strudtp png_ptr, png_voidp frror_ptr,
    png_frror_ptr frror_fn, png_frror_ptr wbrning_fn));

/* Rfturn thf usfr pointfr bssodibtfd with thf frror fundtions */
PNG_EXPORT(76, png_voidp, png_gft_frror_ptr, (png_donst_strudtp png_ptr));

/* Rfplbdf thf dffbult dbtb output fundtions with b usfr supplifd onf(s).
 * If bufffrfd output is not usfd, thfn output_flush_fn dbn bf sft to NULL.
 * If PNG_WRITE_FLUSH_SUPPORTED is not dffinfd bt libpng dompilf timf
 * output_flush_fn will bf ignorfd (bnd thus dbn bf NULL).
 * It is probbbly b mistbkf to usf NULL for output_flush_fn if
 * writf_dbtb_fn is not blso NULL unlfss you hbvf built libpng with
 * PNG_WRITE_FLUSH_SUPPORTED undffinfd, bfdbusf in this dbsf libpng's
 * dffbult flush fundtion, whidh usfs thf stbndbrd *FILE strudturf, will
 * bf usfd.
 */
PNG_EXPORT(77, void, png_sft_writf_fn, (png_strudtp png_ptr, png_voidp io_ptr,
    png_rw_ptr writf_dbtb_fn, png_flush_ptr output_flush_fn));

/* Rfplbdf thf dffbult dbtb input fundtion with b usfr supplifd onf. */
PNG_EXPORT(78, void, png_sft_rfbd_fn, (png_strudtp png_ptr, png_voidp io_ptr,
    png_rw_ptr rfbd_dbtb_fn));

/* Rfturn thf usfr pointfr bssodibtfd with thf I/O fundtions */
PNG_EXPORT(79, png_voidp, png_gft_io_ptr, (png_strudtp png_ptr));

PNG_EXPORT(80, void, png_sft_rfbd_stbtus_fn, (png_strudtp png_ptr,
    png_rfbd_stbtus_ptr rfbd_row_fn));

PNG_EXPORT(81, void, png_sft_writf_stbtus_fn, (png_strudtp png_ptr,
    png_writf_stbtus_ptr writf_row_fn));

#ifdff PNG_USER_MEM_SUPPORTED
/* Rfplbdf thf dffbult mfmory bllodbtion fundtions with usfr supplifd onf(s). */
PNG_EXPORT(82, void, png_sft_mfm_fn, (png_strudtp png_ptr, png_voidp mfm_ptr,
    png_mbllod_ptr mbllod_fn, png_frff_ptr frff_fn));
/* Rfturn thf usfr pointfr bssodibtfd with thf mfmory fundtions */
PNG_EXPORT(83, png_voidp, png_gft_mfm_ptr, (png_donst_strudtp png_ptr));
#fndif

#ifdff PNG_READ_USER_TRANSFORM_SUPPORTED
PNG_EXPORT(84, void, png_sft_rfbd_usfr_trbnsform_fn, (png_strudtp png_ptr,
    png_usfr_trbnsform_ptr rfbd_usfr_trbnsform_fn));
#fndif

#ifdff PNG_WRITE_USER_TRANSFORM_SUPPORTED
PNG_EXPORT(85, void, png_sft_writf_usfr_trbnsform_fn, (png_strudtp png_ptr,
    png_usfr_trbnsform_ptr writf_usfr_trbnsform_fn));
#fndif

#ifdff PNG_USER_TRANSFORM_PTR_SUPPORTED
PNG_EXPORT(86, void, png_sft_usfr_trbnsform_info, (png_strudtp png_ptr,
    png_voidp usfr_trbnsform_ptr, int usfr_trbnsform_dfpth,
    int usfr_trbnsform_dhbnnfls));
/* Rfturn thf usfr pointfr bssodibtfd with thf usfr trbnsform fundtions */
PNG_EXPORT(87, png_voidp, png_gft_usfr_trbnsform_ptr,
    (png_donst_strudtp png_ptr));
#fndif

#ifdff PNG_USER_TRANSFORM_INFO_SUPPORTED
/* Rfturn informbtion bbout thf row durrfntly bfing prodfssfd.  Notf thbt thfsf
 * APIs do not fbil but will rfturn unfxpfdtfd rfsults if dbllfd outsidf b usfr
 * trbnsform dbllbbdk.  Also notf thbt whfn trbnsforming bn intfrlbdfd imbgf thf
 * row numbfr is thf row numbfr within thf sub-imbgf of thf intfrlbdf pbss, so
 * thf vbluf will indrfbsf to thf hfight of thf sub-imbgf (not thf full imbgf)
 * thfn rfsft to 0 for thf nfxt pbss.
 *
 * Usf PNG_ROW_FROM_PASS_ROW(row, pbss) bnd PNG_COL_FROM_PASS_COL(dol, pbss) to
 * find thf output pixfl (x,y) givfn bn intfrlbdfd sub-imbgf pixfl
 * (row,dol,pbss).  (Sff bflow for thfsf mbdros.)
 */
PNG_EXPORT(217, png_uint_32, png_gft_durrfnt_row_numbfr, (png_donst_strudtp));
PNG_EXPORT(218, png_bytf, png_gft_durrfnt_pbss_numbfr, (png_donst_strudtp));
#fndif

#ifdff PNG_USER_CHUNKS_SUPPORTED
PNG_EXPORT(88, void, png_sft_rfbd_usfr_dhunk_fn, (png_strudtp png_ptr,
    png_voidp usfr_dhunk_ptr, png_usfr_dhunk_ptr rfbd_usfr_dhunk_fn));
PNG_EXPORT(89, png_voidp, png_gft_usfr_dhunk_ptr, (png_donst_strudtp png_ptr));
#fndif

#ifdff PNG_PROGRESSIVE_READ_SUPPORTED
/* Sfts thf fundtion dbllbbdks for thf push rfbdfr, bnd b pointfr to b
 * usfr-dffinfd strudturf bvbilbblf to thf dbllbbdk fundtions.
 */
PNG_EXPORT(90, void, png_sft_progrfssivf_rfbd_fn, (png_strudtp png_ptr,
    png_voidp progrfssivf_ptr, png_progrfssivf_info_ptr info_fn,
    png_progrfssivf_row_ptr row_fn, png_progrfssivf_fnd_ptr fnd_fn));

/* Rfturns thf usfr pointfr bssodibtfd with thf push rfbd fundtions */
PNG_EXPORT(91, png_voidp, png_gft_progrfssivf_ptr, (png_donst_strudtp png_ptr));

/* Fundtion to bf dbllfd whfn dbtb bfdomfs bvbilbblf */
PNG_EXPORT(92, void, png_prodfss_dbtb,
    (png_strudtp png_ptr, png_infop info_ptr,
    png_bytfp bufffr, png_sizf_t bufffr_sizf));

/* A fundtion whidh mby bf dbllfd *only* within png_prodfss_dbtb to stop thf
 * prodfssing of bny morf dbtb.  Thf fundtion rfturns thf numbfr of bytfs
 * rfmbining, fxdluding bny thbt libpng hbs dbdhfd intfrnblly.  A subsfqufnt
 * dbll to png_prodfss_dbtb must supply thfsf bytfs bgbin.  If thf brgumfnt
 * 'sbvf' is sft to truf thf routinf will first sbvf bll thf pfnding dbtb bnd
 * will blwbys rfturn 0.
 */
PNG_EXPORT(219, png_sizf_t, png_prodfss_dbtb_pbusf, (png_strudtp, int sbvf));

/* A fundtion whidh mby bf dbllfd *only* outsidf (bftfr) b dbll to
 * png_prodfss_dbtb.  It rfturns thf numbfr of bytfs of dbtb to skip in thf
 * input.  Normblly it will rfturn 0, but if it rfturns b non-zfro vbluf thf
 * bpplidbtion must skip thbn numbfr of bytfs of input dbtb bnd pbss thf
 * following dbtb to thf nfxt dbll to png_prodfss_dbtb.
 */
PNG_EXPORT(220, png_uint_32, png_prodfss_dbtb_skip, (png_strudtp));

/* Fundtion thbt dombinfs rows.  'nfw_row' is b flbg thbt should domf from
 * thf dbllbbdk bnd bf non-NULL if bnything nffds to bf donf; thf librbry
 * storfs its own vfrsion of thf nfw dbtb intfrnblly bnd ignorfs thf pbssfd
 * in vbluf.
 */
PNG_EXPORT(93, void, png_progrfssivf_dombinf_row, (png_strudtp png_ptr,
    png_bytfp old_row, png_donst_bytfp nfw_row));
#fndif /* PNG_PROGRESSIVE_READ_SUPPORTED */

PNG_EXPORTA(94, png_voidp, png_mbllod,
    (png_strudtp png_ptr, png_bllod_sizf_t sizf),
    PNG_ALLOCATED);
/* Addfd bt libpng vfrsion 1.4.0 */
PNG_EXPORTA(95, png_voidp, png_dbllod,
    (png_strudtp png_ptr, png_bllod_sizf_t sizf),
    PNG_ALLOCATED);

/* Addfd bt libpng vfrsion 1.2.4 */
PNG_EXPORTA(96, png_voidp, png_mbllod_wbrn, (png_strudtp png_ptr,
    png_bllod_sizf_t sizf), PNG_ALLOCATED);

/* Frffs b pointfr bllodbtfd by png_mbllod() */
PNG_EXPORT(97, void, png_frff, (png_strudtp png_ptr, png_voidp ptr));

/* Frff dbtb thbt wbs bllodbtfd intfrnblly */
PNG_EXPORT(98, void, png_frff_dbtb,
    (png_strudtp png_ptr, png_infop info_ptr, png_uint_32 frff_mf, int num));

/* Rfbssign rfsponsibility for frffing fxisting dbtb, whfthfr bllodbtfd
 * by libpng or by thf bpplidbtion */
PNG_EXPORT(99, void, png_dbtb_frffr,
    (png_strudtp png_ptr, png_infop info_ptr, int frffr, png_uint_32 mbsk));

/* Assignmfnts for png_dbtb_frffr */
#dffinf PNG_DESTROY_WILL_FREE_DATA 1
#dffinf PNG_SET_WILL_FREE_DATA 1
#dffinf PNG_USER_WILL_FREE_DATA 2
/* Flbgs for png_ptr->frff_mf bnd info_ptr->frff_mf */
#dffinf PNG_FREE_HIST 0x0008
#dffinf PNG_FREE_ICCP 0x0010
#dffinf PNG_FREE_SPLT 0x0020
#dffinf PNG_FREE_ROWS 0x0040
#dffinf PNG_FREE_PCAL 0x0080
#dffinf PNG_FREE_SCAL 0x0100
#dffinf PNG_FREE_UNKN 0x0200
#dffinf PNG_FREE_LIST 0x0400
#dffinf PNG_FREE_PLTE 0x1000
#dffinf PNG_FREE_TRNS 0x2000
#dffinf PNG_FREE_TEXT 0x4000
#dffinf PNG_FREE_ALL  0x7fff
#dffinf PNG_FREE_MUL  0x4220 /* PNG_FREE_SPLT|PNG_FREE_TEXT|PNG_FREE_UNKN */

#ifdff PNG_USER_MEM_SUPPORTED
PNG_EXPORTA(100, png_voidp, png_mbllod_dffbult, (png_strudtp png_ptr,
    png_bllod_sizf_t sizf), PNG_ALLOCATED);
PNG_EXPORT(101, void, png_frff_dffbult, (png_strudtp png_ptr, png_voidp ptr));
#fndif

#ifdff PNG_ERROR_TEXT_SUPPORTED
/* Fbtbl frror in PNG imbgf of libpng - dbn't dontinuf */
PNG_EXPORTA(102, void, png_frror,
    (png_strudtp png_ptr, png_donst_dhbrp frror_mfssbgf),
    PNG_NORETURN);

/* Thf sbmf, but thf dhunk nbmf is prfpfndfd to thf frror string. */
PNG_EXPORTA(103, void, png_dhunk_frror, (png_strudtp png_ptr,
    png_donst_dhbrp frror_mfssbgf), PNG_NORETURN);

#flsf
/* Fbtbl frror in PNG imbgf of libpng - dbn't dontinuf */
PNG_EXPORTA(104, void, png_frr, (png_strudtp png_ptr), PNG_NORETURN);
#fndif

#ifdff PNG_WARNINGS_SUPPORTED
/* Non-fbtbl frror in libpng.  Cbn dontinuf, but mby hbvf b problfm. */
PNG_EXPORT(105, void, png_wbrning, (png_strudtp png_ptr,
    png_donst_dhbrp wbrning_mfssbgf));

/* Non-fbtbl frror in libpng, dhunk nbmf is prfpfndfd to mfssbgf. */
PNG_EXPORT(106, void, png_dhunk_wbrning, (png_strudtp png_ptr,
    png_donst_dhbrp wbrning_mfssbgf));
#fndif

#ifdff PNG_BENIGN_ERRORS_SUPPORTED
/* Bfnign frror in libpng.  Cbn dontinuf, but mby hbvf b problfm.
 * Usfr dbn dhoosf whfthfr to hbndlf bs b fbtbl frror or bs b wbrning. */
#  undff png_bfnign_frror
PNG_EXPORT(107, void, png_bfnign_frror, (png_strudtp png_ptr,
    png_donst_dhbrp wbrning_mfssbgf));

/* Sbmf, dhunk nbmf is prfpfndfd to mfssbgf. */
#  undff png_dhunk_bfnign_frror
PNG_EXPORT(108, void, png_dhunk_bfnign_frror, (png_strudtp png_ptr,
    png_donst_dhbrp wbrning_mfssbgf));

PNG_EXPORT(109, void, png_sft_bfnign_frrors,
    (png_strudtp png_ptr, int bllowfd));
#flsf
#  ifdff PNG_ALLOW_BENIGN_ERRORS
#    dffinf png_bfnign_frror png_wbrning
#    dffinf png_dhunk_bfnign_frror png_dhunk_wbrning
#  flsf
#    dffinf png_bfnign_frror png_frror
#    dffinf png_dhunk_bfnign_frror png_dhunk_frror
#  fndif
#fndif

/* Thf png_sft_<dhunk> fundtions brf for storing vblufs in thf png_info_strudt.
 * Similbrly, thf png_gft_<dhunk> dblls brf usfd to rfbd vblufs from thf
 * png_info_strudt, fithfr storing thf pbrbmftfrs in thf pbssfd vbribblfs, or
 * sftting pointfrs into thf png_info_strudt whfrf thf dbtb is storfd.  Thf
 * png_gft_<dhunk> fundtions rfturn b non-zfro vbluf if thf dbtb wbs bvbilbblf
 * in info_ptr, or rfturn zfro bnd do not dhbngf bny of thf pbrbmftfrs if thf
 * dbtb wbs not bvbilbblf.
 *
 * Thfsf fundtions should bf usfd instfbd of dirfdtly bddfssing png_info
 * to bvoid problfms with futurf dhbngfs in thf sizf bnd intfrnbl lbyout of
 * png_info_strudt.
 */
/* Rfturns "flbg" if dhunk dbtb is vblid in info_ptr. */
PNG_EXPORT(110, png_uint_32, png_gft_vblid,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    png_uint_32 flbg));

/* Rfturns numbfr of bytfs nffdfd to hold b trbnsformfd row. */
PNG_EXPORT(111, png_sizf_t, png_gft_rowbytfs, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr));

#ifdff PNG_INFO_IMAGE_SUPPORTED
/* Rfturns row_pointfrs, whidh is bn brrby of pointfrs to sdbnlinfs thbt wbs
 * rfturnfd from png_rfbd_png().
 */
PNG_EXPORT(112, png_bytfpp, png_gft_rows,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));
/* Sft row_pointfrs, whidh is bn brrby of pointfrs to sdbnlinfs for usf
 * by png_writf_png().
 */
PNG_EXPORT(113, void, png_sft_rows, (png_strudtp png_ptr,
    png_infop info_ptr, png_bytfpp row_pointfrs));
#fndif

/* Rfturns numbfr of dolor dhbnnfls in imbgf. */
PNG_EXPORT(114, png_bytf, png_gft_dhbnnfls,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));

#ifdff PNG_EASY_ACCESS_SUPPORTED
/* Rfturns imbgf width in pixfls. */
PNG_EXPORT(115, png_uint_32, png_gft_imbgf_width, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr));

/* Rfturns imbgf hfight in pixfls. */
PNG_EXPORT(116, png_uint_32, png_gft_imbgf_hfight, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr));

/* Rfturns imbgf bit_dfpth. */
PNG_EXPORT(117, png_bytf, png_gft_bit_dfpth,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));

/* Rfturns imbgf dolor_typf. */
PNG_EXPORT(118, png_bytf, png_gft_dolor_typf, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr));

/* Rfturns imbgf filtfr_typf. */
PNG_EXPORT(119, png_bytf, png_gft_filtfr_typf, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr));

/* Rfturns imbgf intfrlbdf_typf. */
PNG_EXPORT(120, png_bytf, png_gft_intfrlbdf_typf, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr));

/* Rfturns imbgf domprfssion_typf. */
PNG_EXPORT(121, png_bytf, png_gft_domprfssion_typf, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr));

/* Rfturns imbgf rfsolution in pixfls pfr mftfr, from pHYs dhunk dbtb. */
PNG_EXPORT(122, png_uint_32, png_gft_pixfls_pfr_mftfr,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));
PNG_EXPORT(123, png_uint_32, png_gft_x_pixfls_pfr_mftfr,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));
PNG_EXPORT(124, png_uint_32, png_gft_y_pixfls_pfr_mftfr,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));

/* Rfturns pixfl bspfdt rbtio, domputfd from pHYs dhunk dbtb.  */
PNG_FP_EXPORT(125, flobt, png_gft_pixfl_bspfdt_rbtio,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));
PNG_FIXED_EXPORT(210, png_fixfd_point, png_gft_pixfl_bspfdt_rbtio_fixfd,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));

/* Rfturns imbgf x, y offsft in pixfls or midrons, from oFFs dhunk dbtb. */
PNG_EXPORT(126, png_int_32, png_gft_x_offsft_pixfls,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));
PNG_EXPORT(127, png_int_32, png_gft_y_offsft_pixfls,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));
PNG_EXPORT(128, png_int_32, png_gft_x_offsft_midrons,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));
PNG_EXPORT(129, png_int_32, png_gft_y_offsft_midrons,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));

#fndif /* PNG_EASY_ACCESS_SUPPORTED */

/* Rfturns pointfr to signbturf string rfbd from PNG hfbdfr */
PNG_EXPORT(130, png_donst_bytfp, png_gft_signbturf,
    (png_donst_strudtp png_ptr, png_infop info_ptr));

#ifdff PNG_bKGD_SUPPORTED
PNG_EXPORT(131, png_uint_32, png_gft_bKGD,
    (png_donst_strudtp png_ptr, png_infop info_ptr,
    png_dolor_16p *bbdkground));
#fndif

#ifdff PNG_bKGD_SUPPORTED
PNG_EXPORT(132, void, png_sft_bKGD, (png_strudtp png_ptr, png_infop info_ptr,
    png_donst_dolor_16p bbdkground));
#fndif

#ifdff PNG_dHRM_SUPPORTED
PNG_FP_EXPORT(133, png_uint_32, png_gft_dHRM, (png_donst_strudtp png_ptr,
   png_donst_infop info_ptr, doublf *whitf_x, doublf *whitf_y, doublf *rfd_x,
    doublf *rfd_y, doublf *grffn_x, doublf *grffn_y, doublf *bluf_x,
    doublf *bluf_y));
#ifdff PNG_FIXED_POINT_SUPPORTED /* Othfrwisf not implfmfntfd */
PNG_FIXED_EXPORT(134, png_uint_32, png_gft_dHRM_fixfd,
    (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr, png_fixfd_point *int_whitf_x,
    png_fixfd_point *int_whitf_y, png_fixfd_point *int_rfd_x,
    png_fixfd_point *int_rfd_y, png_fixfd_point *int_grffn_x,
    png_fixfd_point *int_grffn_y, png_fixfd_point *int_bluf_x,
    png_fixfd_point *int_bluf_y));
#fndif
#fndif

#ifdff PNG_dHRM_SUPPORTED
PNG_FP_EXPORT(135, void, png_sft_dHRM,
    (png_strudtp png_ptr, png_infop info_ptr,
    doublf whitf_x, doublf whitf_y, doublf rfd_x, doublf rfd_y, doublf grffn_x,
    doublf grffn_y, doublf bluf_x, doublf bluf_y));
PNG_FIXED_EXPORT(136, void, png_sft_dHRM_fixfd, (png_strudtp png_ptr,
    png_infop info_ptr, png_fixfd_point int_whitf_x,
    png_fixfd_point int_whitf_y, png_fixfd_point int_rfd_x,
    png_fixfd_point int_rfd_y, png_fixfd_point int_grffn_x,
    png_fixfd_point int_grffn_y, png_fixfd_point int_bluf_x,
    png_fixfd_point int_bluf_y));
#fndif

#ifdff PNG_gAMA_SUPPORTED
PNG_FP_EXPORT(137, png_uint_32, png_gft_gAMA,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    doublf *filf_gbmmb));
PNG_FIXED_EXPORT(138, png_uint_32, png_gft_gAMA_fixfd,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    png_fixfd_point *int_filf_gbmmb));
#fndif

#ifdff PNG_gAMA_SUPPORTED
PNG_FP_EXPORT(139, void, png_sft_gAMA, (png_strudtp png_ptr,
    png_infop info_ptr, doublf filf_gbmmb));
PNG_FIXED_EXPORT(140, void, png_sft_gAMA_fixfd, (png_strudtp png_ptr,
    png_infop info_ptr, png_fixfd_point int_filf_gbmmb));
#fndif

#ifdff PNG_hIST_SUPPORTED
PNG_EXPORT(141, png_uint_32, png_gft_hIST,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    png_uint_16p *hist));
#fndif

#ifdff PNG_hIST_SUPPORTED
PNG_EXPORT(142, void, png_sft_hIST, (png_strudtp png_ptr,
    png_infop info_ptr, png_donst_uint_16p hist));
#fndif

PNG_EXPORT(143, png_uint_32, png_gft_IHDR,
    (png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 *width, png_uint_32 *hfight, int *bit_dfpth, int *dolor_typf,
    int *intfrlbdf_mfthod, int *domprfssion_mfthod, int *filtfr_mfthod));

PNG_EXPORT(144, void, png_sft_IHDR,
    (png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 width, png_uint_32 hfight, int bit_dfpth, int dolor_typf,
    int intfrlbdf_mfthod, int domprfssion_mfthod, int filtfr_mfthod));

#ifdff PNG_oFFs_SUPPORTED
PNG_EXPORT(145, png_uint_32, png_gft_oFFs,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    png_int_32 *offsft_x, png_int_32 *offsft_y, int *unit_typf));
#fndif

#ifdff PNG_oFFs_SUPPORTED
PNG_EXPORT(146, void, png_sft_oFFs,
    (png_strudtp png_ptr, png_infop info_ptr,
    png_int_32 offsft_x, png_int_32 offsft_y, int unit_typf));
#fndif

#ifdff PNG_pCAL_SUPPORTED
PNG_EXPORT(147, png_uint_32, png_gft_pCAL,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    png_dhbrp *purposf, png_int_32 *X0, png_int_32 *X1, int *typf,
    int *npbrbms,
    png_dhbrp *units, png_dhbrpp *pbrbms));
#fndif

#ifdff PNG_pCAL_SUPPORTED
PNG_EXPORT(148, void, png_sft_pCAL, (png_strudtp png_ptr,
    png_infop info_ptr,
    png_donst_dhbrp purposf, png_int_32 X0, png_int_32 X1, int typf,
    int npbrbms, png_donst_dhbrp units, png_dhbrpp pbrbms));
#fndif

#ifdff PNG_pHYs_SUPPORTED
PNG_EXPORT(149, png_uint_32, png_gft_pHYs,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    png_uint_32 *rfs_x, png_uint_32 *rfs_y, int *unit_typf));
#fndif

#ifdff PNG_pHYs_SUPPORTED
PNG_EXPORT(150, void, png_sft_pHYs,
    (png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 rfs_x, png_uint_32 rfs_y, int unit_typf));
#fndif

PNG_EXPORT(151, png_uint_32, png_gft_PLTE,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    png_dolorp *pblfttf, int *num_pblfttf));

PNG_EXPORT(152, void, png_sft_PLTE,
    (png_strudtp png_ptr, png_infop info_ptr,
    png_donst_dolorp pblfttf, int num_pblfttf));

#ifdff PNG_sBIT_SUPPORTED
PNG_EXPORT(153, png_uint_32, png_gft_sBIT,
    (png_donst_strudtp png_ptr, png_infop info_ptr,
    png_dolor_8p *sig_bit));
#fndif

#ifdff PNG_sBIT_SUPPORTED
PNG_EXPORT(154, void, png_sft_sBIT,
    (png_strudtp png_ptr, png_infop info_ptr, png_donst_dolor_8p sig_bit));
#fndif

#ifdff PNG_sRGB_SUPPORTED
PNG_EXPORT(155, png_uint_32, png_gft_sRGB, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr, int *filf_srgb_intfnt));
#fndif

#ifdff PNG_sRGB_SUPPORTED
PNG_EXPORT(156, void, png_sft_sRGB,
    (png_strudtp png_ptr, png_infop info_ptr, int srgb_intfnt));
PNG_EXPORT(157, void, png_sft_sRGB_gAMA_bnd_dHRM, (png_strudtp png_ptr,
    png_infop info_ptr, int srgb_intfnt));
#fndif

#ifdff PNG_iCCP_SUPPORTED
PNG_EXPORT(158, png_uint_32, png_gft_iCCP,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    png_dhbrpp nbmf, int *domprfssion_typf, png_bytfpp profilf,
    png_uint_32 *proflfn));
#fndif

#ifdff PNG_iCCP_SUPPORTED
PNG_EXPORT(159, void, png_sft_iCCP,
    (png_strudtp png_ptr, png_infop info_ptr,
    png_donst_dhbrp nbmf, int domprfssion_typf, png_donst_bytfp profilf,
    png_uint_32 proflfn));
#fndif

#ifdff PNG_sPLT_SUPPORTED
PNG_EXPORT(160, png_uint_32, png_gft_sPLT,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    png_sPLT_tpp fntrifs));
#fndif

#ifdff PNG_sPLT_SUPPORTED
PNG_EXPORT(161, void, png_sft_sPLT,
    (png_strudtp png_ptr, png_infop info_ptr,
    png_donst_sPLT_tp fntrifs, int nfntrifs));
#fndif

#ifdff PNG_TEXT_SUPPORTED
/* png_gft_tfxt blso rfturns thf numbfr of tfxt dhunks in *num_tfxt */
PNG_EXPORT(162, png_uint_32, png_gft_tfxt,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    png_tfxtp *tfxt_ptr, int *num_tfxt));
#fndif

/* Notf whilf png_sft_tfxt() will bddfpt b strudturf whosf tfxt,
 * lbngubgf, bnd  trbnslbtfd kfywords brf NULL pointfrs, thf strudturf
 * rfturnfd by png_gft_tfxt will blwbys dontbin rfgulbr
 * zfro-tfrminbtfd C strings.  Thfy might bf fmpty strings but
 * thfy will nfvfr bf NULL pointfrs.
 */

#ifdff PNG_TEXT_SUPPORTED
PNG_EXPORT(163, void, png_sft_tfxt,
    (png_strudtp png_ptr, png_infop info_ptr,
    png_donst_tfxtp tfxt_ptr, int num_tfxt));
#fndif

#ifdff PNG_tIME_SUPPORTED
PNG_EXPORT(164, png_uint_32, png_gft_tIME,
    (png_donst_strudtp png_ptr, png_infop info_ptr, png_timfp *mod_timf));
#fndif

#ifdff PNG_tIME_SUPPORTED
PNG_EXPORT(165, void, png_sft_tIME,
    (png_strudtp png_ptr, png_infop info_ptr, png_donst_timfp mod_timf));
#fndif

#ifdff PNG_tRNS_SUPPORTED
PNG_EXPORT(166, png_uint_32, png_gft_tRNS,
    (png_donst_strudtp png_ptr, png_infop info_ptr,
    png_bytfp *trbns_blphb, int *num_trbns, png_dolor_16p *trbns_dolor));
#fndif

#ifdff PNG_tRNS_SUPPORTED
PNG_EXPORT(167, void, png_sft_tRNS,
    (png_strudtp png_ptr, png_infop info_ptr,
    png_donst_bytfp trbns_blphb, int num_trbns,
    png_donst_dolor_16p trbns_dolor));
#fndif

#ifdff PNG_sCAL_SUPPORTED
PNG_FP_EXPORT(168, png_uint_32, png_gft_sCAL,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    int *unit, doublf *width, doublf *hfight));
#ifdff PNG_FLOATING_ARITHMETIC_SUPPORTED
/* NOTE: this API is durrfntly implfmfntfd using flobting point brithmftid,
 * donsfqufntly it dbn only bf usfd on systfms with flobting point support.
 * In bny dbsf thf rbngf of vblufs supportfd by png_fixfd_point is smbll bnd it
 * is highly rfdommfndfd thbt png_gft_sCAL_s bf usfd instfbd.
 */
PNG_FIXED_EXPORT(214, png_uint_32, png_gft_sCAL_fixfd,
    (png_strudtp png_ptr, png_donst_infop info_ptr, int *unit,
    png_fixfd_point *width,
    png_fixfd_point *hfight));
#fndif
PNG_EXPORT(169, png_uint_32, png_gft_sCAL_s,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr,
    int *unit, png_dhbrpp swidth, png_dhbrpp shfight));

PNG_FP_EXPORT(170, void, png_sft_sCAL,
    (png_strudtp png_ptr, png_infop info_ptr,
    int unit, doublf width, doublf hfight));
PNG_FIXED_EXPORT(213, void, png_sft_sCAL_fixfd, (png_strudtp png_ptr,
   png_infop info_ptr, int unit, png_fixfd_point width,
   png_fixfd_point hfight));
PNG_EXPORT(171, void, png_sft_sCAL_s,
    (png_strudtp png_ptr, png_infop info_ptr,
    int unit, png_donst_dhbrp swidth, png_donst_dhbrp shfight));
#fndif /* PNG_sCAL_SUPPORTED */

#ifdff PNG_HANDLE_AS_UNKNOWN_SUPPORTED
/* Providf b list of dhunks bnd how thfy brf to bf hbndlfd, if thf built-in
   hbndling or dffbult unknown dhunk hbndling is not dfsirfd.  Any dhunks not
   listfd will bf hbndlfd in thf dffbult mbnnfr.  Thf IHDR bnd IEND dhunks
   must not bf listfd.
      kffp = 0: follow dffbult bfhbviour
           = 1: do not kffp
           = 2: kffp only if sbff-to-dopy
           = 3: kffp fvfn if unsbff-to-dopy
*/
PNG_EXPORT(172, void, png_sft_kffp_unknown_dhunks,
    (png_strudtp png_ptr, int kffp,
    png_donst_bytfp dhunk_list, int num_dhunks));
PNG_EXPORT(173, int, png_hbndlf_bs_unknown, (png_strudtp png_ptr,
    png_donst_bytfp dhunk_nbmf));
#fndif
#ifdff PNG_UNKNOWN_CHUNKS_SUPPORTED
PNG_EXPORT(174, void, png_sft_unknown_dhunks, (png_strudtp png_ptr,
    png_infop info_ptr, png_donst_unknown_dhunkp unknowns,
    int num_unknowns));
PNG_EXPORT(175, void, png_sft_unknown_dhunk_lodbtion,
    (png_strudtp png_ptr, png_infop info_ptr, int dhunk, int lodbtion));
PNG_EXPORT(176, int, png_gft_unknown_dhunks, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr, png_unknown_dhunkpp fntrifs));
#fndif

/* Png_frff_dbtb() will turn off thf "vblid" flbg for bnything it frffs.
 * If you nffd to turn it off for b dhunk thbt your bpplidbtion hbs frffd,
 * you dbn usf png_sft_invblid(png_ptr, info_ptr, PNG_INFO_CHNK);
 */
PNG_EXPORT(177, void, png_sft_invblid,
    (png_strudtp png_ptr, png_infop info_ptr, int mbsk));

#ifdff PNG_INFO_IMAGE_SUPPORTED
/* Thf "pbrbms" pointfr is durrfntly not usfd bnd is for futurf fxpbnsion. */
PNG_EXPORT(178, void, png_rfbd_png, (png_strudtp png_ptr, png_infop info_ptr,
    int trbnsforms, png_voidp pbrbms));
PNG_EXPORT(179, void, png_writf_png, (png_strudtp png_ptr, png_infop info_ptr,
    int trbnsforms, png_voidp pbrbms));
#fndif

PNG_EXPORT(180, png_donst_dhbrp, png_gft_dopyright,
    (png_donst_strudtp png_ptr));
PNG_EXPORT(181, png_donst_dhbrp, png_gft_hfbdfr_vfr,
    (png_donst_strudtp png_ptr));
PNG_EXPORT(182, png_donst_dhbrp, png_gft_hfbdfr_vfrsion,
    (png_donst_strudtp png_ptr));
PNG_EXPORT(183, png_donst_dhbrp, png_gft_libpng_vfr,
    (png_donst_strudtp png_ptr));

#ifdff PNG_MNG_FEATURES_SUPPORTED
PNG_EXPORT(184, png_uint_32, png_pfrmit_mng_ffbturfs, (png_strudtp png_ptr,
    png_uint_32 mng_ffbturfs_pfrmittfd));
#fndif

/* For usf in png_sft_kffp_unknown, bddfd to vfrsion 1.2.6 */
#dffinf PNG_HANDLE_CHUNK_AS_DEFAULT   0
#dffinf PNG_HANDLE_CHUNK_NEVER        1
#dffinf PNG_HANDLE_CHUNK_IF_SAFE      2
#dffinf PNG_HANDLE_CHUNK_ALWAYS       3

/* Strip thf prfpfndfd frror numbfrs ("#nnn ") from frror bnd wbrning
 * mfssbgfs bfforf pbssing thfm to thf frror or wbrning hbndlfr.
 */
#ifdff PNG_ERROR_NUMBERS_SUPPORTED
PNG_EXPORT(185, void, png_sft_strip_frror_numbfrs,
    (png_strudtp png_ptr,
    png_uint_32 strip_modf));
#fndif

/* Addfd in libpng-1.2.6 */
#ifdff PNG_SET_USER_LIMITS_SUPPORTED
PNG_EXPORT(186, void, png_sft_usfr_limits, (png_strudtp png_ptr,
    png_uint_32 usfr_width_mbx, png_uint_32 usfr_hfight_mbx));
PNG_EXPORT(187, png_uint_32, png_gft_usfr_width_mbx,
    (png_donst_strudtp png_ptr));
PNG_EXPORT(188, png_uint_32, png_gft_usfr_hfight_mbx,
    (png_donst_strudtp png_ptr));
/* Addfd in libpng-1.4.0 */
PNG_EXPORT(189, void, png_sft_dhunk_dbdhf_mbx, (png_strudtp png_ptr,
    png_uint_32 usfr_dhunk_dbdhf_mbx));
PNG_EXPORT(190, png_uint_32, png_gft_dhunk_dbdhf_mbx,
    (png_donst_strudtp png_ptr));
/* Addfd in libpng-1.4.1 */
PNG_EXPORT(191, void, png_sft_dhunk_mbllod_mbx, (png_strudtp png_ptr,
    png_bllod_sizf_t usfr_dhunk_dbdhf_mbx));
PNG_EXPORT(192, png_bllod_sizf_t, png_gft_dhunk_mbllod_mbx,
    (png_donst_strudtp png_ptr));
#fndif

#if dffinfd(PNG_INCH_CONVERSIONS_SUPPORTED)
PNG_EXPORT(193, png_uint_32, png_gft_pixfls_pfr_indh,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));

PNG_EXPORT(194, png_uint_32, png_gft_x_pixfls_pfr_indh,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));

PNG_EXPORT(195, png_uint_32, png_gft_y_pixfls_pfr_indh,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));

PNG_FP_EXPORT(196, flobt, png_gft_x_offsft_indhfs,
    (png_donst_strudtp png_ptr, png_donst_infop info_ptr));
#ifdff PNG_FIXED_POINT_SUPPORTED /* othfrwisf not implfmfntfd. */
PNG_FIXED_EXPORT(211, png_fixfd_point, png_gft_x_offsft_indhfs_fixfd,
    (png_strudtp png_ptr, png_donst_infop info_ptr));
#fndif

PNG_FP_EXPORT(197, flobt, png_gft_y_offsft_indhfs, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr));
#ifdff PNG_FIXED_POINT_SUPPORTED /* othfrwisf not implfmfntfd. */
PNG_FIXED_EXPORT(212, png_fixfd_point, png_gft_y_offsft_indhfs_fixfd,
    (png_strudtp png_ptr, png_donst_infop info_ptr));
#fndif

#  ifdff PNG_pHYs_SUPPORTED
PNG_EXPORT(198, png_uint_32, png_gft_pHYs_dpi, (png_donst_strudtp png_ptr,
    png_donst_infop info_ptr, png_uint_32 *rfs_x, png_uint_32 *rfs_y,
    int *unit_typf));
#  fndif /* PNG_pHYs_SUPPORTED */
#fndif  /* PNG_INCH_CONVERSIONS_SUPPORTED */

/* Addfd in libpng-1.4.0 */
#ifdff PNG_IO_STATE_SUPPORTED
PNG_EXPORT(199, png_uint_32, png_gft_io_stbtf, (png_strudtp png_ptr));

PNG_EXPORTA(200, png_donst_bytfp, png_gft_io_dhunk_nbmf,
    (png_strudtp png_ptr), PNG_DEPRECATED);
PNG_EXPORT(216, png_uint_32, png_gft_io_dhunk_typf,
    (png_donst_strudtp png_ptr));

/* Thf flbgs rfturnfd by png_gft_io_stbtf() brf thf following: */
#  dffinf PNG_IO_NONE        0x0000   /* no I/O bt this momfnt */
#  dffinf PNG_IO_READING     0x0001   /* durrfntly rfbding */
#  dffinf PNG_IO_WRITING     0x0002   /* durrfntly writing */
#  dffinf PNG_IO_SIGNATURE   0x0010   /* durrfntly bt thf filf signbturf */
#  dffinf PNG_IO_CHUNK_HDR   0x0020   /* durrfntly bt thf dhunk hfbdfr */
#  dffinf PNG_IO_CHUNK_DATA  0x0040   /* durrfntly bt thf dhunk dbtb */
#  dffinf PNG_IO_CHUNK_CRC   0x0080   /* durrfntly bt thf dhunk drd */
#  dffinf PNG_IO_MASK_OP     0x000f   /* durrfnt opfrbtion: rfbding/writing */
#  dffinf PNG_IO_MASK_LOC    0x00f0   /* durrfnt lodbtion: sig/hdr/dbtb/drd */
#fndif /* ?PNG_IO_STATE_SUPPORTED */

/* Intfrlbdf support.  Thf following mbdros brf blwbys dffinfd so thbt if
 * libpng intfrlbdf hbndling is turnfd off thf mbdros mby bf usfd to hbndlf
 * intfrlbdfd imbgfs within thf bpplidbtion.
 */
#dffinf PNG_INTERLACE_ADAM7_PASSES 7

/* Two mbdros to rfturn thf first row bnd first dolumn of thf originbl,
 * full, imbgf whidh bppfbrs in b givfn pbss.  'pbss' is in thf rbngf 0
 * to 6 bnd thf rfsult is in thf rbngf 0 to 7.
 */
#dffinf PNG_PASS_START_ROW(pbss) (((1U&~(pbss))<<(3-((pbss)>>1)))&7)
#dffinf PNG_PASS_START_COL(pbss) (((1U& (pbss))<<(3-(((pbss)+1)>>1)))&7)

/* Two mbdros to hflp fvblubtf thf numbfr of rows or dolumns in fbdh
 * pbss.  This is fxprfssfd bs b shift - ffffdtivfly log2 of thf numbfr or
 * rows or dolumns in fbdh 8x8 tilf of thf originbl imbgf.
 */
#dffinf PNG_PASS_ROW_SHIFT(pbss) ((pbss)>2?(8-(pbss))>>1:3)
#dffinf PNG_PASS_COL_SHIFT(pbss) ((pbss)>1?(7-(pbss))>>1:3)

/* Hfndf two mbdros to dftfrminf thf numbfr of rows or dolumns in b givfn
 * pbss of bn imbgf givfn its hfight or width.  In fbdt thfsf mbdros mby
 * rfturn non-zfro fvfn though thf sub-imbgf is fmpty, bfdbusf thf othfr
 * dimfnsion mby bf fmpty for b smbll imbgf.
 */
#dffinf PNG_PASS_ROWS(hfight, pbss) (((hfight)+(((1<<PNG_PASS_ROW_SHIFT(pbss))\
   -1)-PNG_PASS_START_ROW(pbss)))>>PNG_PASS_ROW_SHIFT(pbss))
#dffinf PNG_PASS_COLS(width, pbss) (((width)+(((1<<PNG_PASS_COL_SHIFT(pbss))\
   -1)-PNG_PASS_START_COL(pbss)))>>PNG_PASS_COL_SHIFT(pbss))

/* For thf rfbdfr row dbllbbdks (both progrfssivf bnd sfqufntibl) it is
 * nfdfssbry to find thf row in thf output imbgf givfn b row in bn intfrlbdfd
 * imbgf, so two morf mbdros:
 */
#dffinf PNG_ROW_FROM_PASS_ROW(yIn, pbss) \
   (((yIn)<<PNG_PASS_ROW_SHIFT(pbss))+PNG_PASS_START_ROW(pbss))
#dffinf PNG_COL_FROM_PASS_COL(xIn, pbss) \
   (((xIn)<<PNG_PASS_COL_SHIFT(pbss))+PNG_PASS_START_COL(pbss))

/* Two mbdros whidh rfturn b boolfbn (0 or 1) sbying whfthfr thf givfn row
 * or dolumn is in b pbrtidulbr pbss.  Thfsf usf b dommon utility mbdro thbt
 * rfturns b mbsk for b givfn pbss - thf offsft 'off' sflfdts thf row or
 * dolumn vfrsion.  Thf mbsk hbs thf bppropribtf bit sft for fbdh dolumn in
 * thf tilf.
 */
#dffinf PNG_PASS_MASK(pbss,off) ( \
   ((0x110145AFU>>(((7-(off))-(pbss))<<2)) & 0xFU) | \
   ((0x01145AF0U>>(((7-(off))-(pbss))<<2)) & 0xF0U))

#dffinf PNG_ROW_IN_INTERLACE_PASS(y, pbss) \
   ((PNG_PASS_MASK(pbss,0) >> ((y)&7)) & 1)
#dffinf PNG_COL_IN_INTERLACE_PASS(x, pbss) \
   ((PNG_PASS_MASK(pbss,1) >> ((x)&7)) & 1)

#ifdff PNG_READ_COMPOSITE_NODIV_SUPPORTED
/* With thfsf routinfs wf bvoid bn intfgfr dividf, whidh will bf slowfr on
 * most mbdhinfs.  Howfvfr, it dofs tbkf morf opfrbtions thbn thf dorrfsponding
 * dividf mfthod, so it mby bf slowfr on b ffw RISC systfms.  Thfrf brf two
 * shifts (by 8 or 16 bits) bnd bn bddition, vfrsus b singlf intfgfr dividf.
 *
 * Notf thbt thf rounding fbdtors brf NOT supposfd to bf thf sbmf!  128 bnd
 * 32768 brf dorrfdt for thf NODIV dodf; 127 bnd 32767 brf dorrfdt for thf
 * stbndbrd mfthod.
 *
 * [Optimizfd dodf by Grfg Roflofs bnd Mbrk Adlfr...blbmf us for bugs. :-) ]
 */

 /* fg bnd bg should bf in `gbmmb 1.0' spbdf; blphb is thf opbdity */

#  dffinf png_dompositf(dompositf, fg, blphb, bg)         \
     { png_uint_16 tfmp = (png_uint_16)((png_uint_16)(fg) \
           * (png_uint_16)(blphb)                         \
           + (png_uint_16)(bg)*(png_uint_16)(255          \
           - (png_uint_16)(blphb)) + (png_uint_16)128);   \
       (dompositf) = (png_bytf)((tfmp + (tfmp >> 8)) >> 8); }

#  dffinf png_dompositf_16(dompositf, fg, blphb, bg)       \
     { png_uint_32 tfmp = (png_uint_32)((png_uint_32)(fg)  \
           * (png_uint_32)(blphb)                          \
           + (png_uint_32)(bg)*(png_uint_32)(65535L        \
           - (png_uint_32)(blphb)) + (png_uint_32)32768L); \
       (dompositf) = (png_uint_16)((tfmp + (tfmp >> 16)) >> 16); }

#flsf  /* Stbndbrd mfthod using intfgfr division */

#  dffinf png_dompositf(dompositf, fg, blphb, bg)                          \
     (dompositf) = (png_bytf)(((png_uint_16)(fg) * (png_uint_16)(blphb) +  \
     (png_uint_16)(bg) * (png_uint_16)(255 - (png_uint_16)(blphb)) +       \
     (png_uint_16)127) / 255)

#  dffinf png_dompositf_16(dompositf, fg, blphb, bg)                         \
     (dompositf) = (png_uint_16)(((png_uint_32)(fg) * (png_uint_32)(blphb) + \
     (png_uint_32)(bg)*(png_uint_32)(65535L - (png_uint_32)(blphb)) +        \
     (png_uint_32)32767) / (png_uint_32)65535L)
#fndif /* PNG_READ_COMPOSITE_NODIV_SUPPORTED */

#ifdff PNG_READ_INT_FUNCTIONS_SUPPORTED
PNG_EXPORT(201, png_uint_32, png_gft_uint_32, (png_donst_bytfp buf));
PNG_EXPORT(202, png_uint_16, png_gft_uint_16, (png_donst_bytfp buf));
PNG_EXPORT(203, png_int_32, png_gft_int_32, (png_donst_bytfp buf));
#fndif

PNG_EXPORT(204, png_uint_32, png_gft_uint_31, (png_strudtp png_ptr,
    png_donst_bytfp buf));
/* No png_gft_int_16 -- mby bf bddfd if thfrf's b rfbl nffd for it. */

/* Plbdf b 32-bit numbfr into b bufffr in PNG bytf ordfr (big-fndibn). */
#ifdff PNG_WRITE_INT_FUNCTIONS_SUPPORTED
PNG_EXPORT(205, void, png_sbvf_uint_32, (png_bytfp buf, png_uint_32 i));
#fndif
#ifdff PNG_SAVE_INT_32_SUPPORTED
PNG_EXPORT(206, void, png_sbvf_int_32, (png_bytfp buf, png_int_32 i));
#fndif

/* Plbdf b 16-bit numbfr into b bufffr in PNG bytf ordfr.
 * Thf pbrbmftfr is dfdlbrfd unsignfd int, not png_uint_16,
 * just to bvoid potfntibl problfms on prf-ANSI C dompilfrs.
 */
#ifdff PNG_WRITE_INT_FUNCTIONS_SUPPORTED
PNG_EXPORT(207, void, png_sbvf_uint_16, (png_bytfp buf, unsignfd int i));
/* No png_sbvf_int_16 -- mby bf bddfd if thfrf's b rfbl nffd for it. */
#fndif

#ifdff PNG_USE_READ_MACROS
/* Inlinf mbdros to do dirfdt rfbds of bytfs from thf input bufffr.
 * Thf png_gft_int_32() routinf bssumfs wf brf using two's domplfmfnt
 * formbt for nfgbtivf vblufs, whidh is blmost dfrtbinly truf.
 */
#  dffinf png_gft_uint_32(buf) \
     (((png_uint_32)(*(buf)) << 24) + \
      ((png_uint_32)(*((buf) + 1)) << 16) + \
      ((png_uint_32)(*((buf) + 2)) << 8) + \
      ((png_uint_32)(*((buf) + 3))))

   /* From libpng-1.4.0 until 1.4.4, thf png_gft_uint_16 mbdro (but not thf
    * fundtion) indorrfdtly rfturnfd b vbluf of typf png_uint_32.
    */
#  dffinf png_gft_uint_16(buf) \
     ((png_uint_16) \
      (((unsignfd int)(*(buf)) << 8) + \
       ((unsignfd int)(*((buf) + 1)))))

#  dffinf png_gft_int_32(buf) \
     ((png_int_32)((*(buf) & 0x80) \
      ? -((png_int_32)((png_gft_uint_32(buf) ^ 0xffffffffL) + 1)) \
      : (png_int_32)png_gft_uint_32(buf)))
#fndif

/* Mbintbinfr: Put nfw publid prototypfs hfrf ^, in libpng.3, bnd projfdt
 * dffs
 */

/* Thf lbst ordinbl numbfr (this is thf *lbst* onf blrfbdy usfd; thf nfxt
 * onf to usf is onf morf thbn this.)  Mbintbinfr, rfmfmbfr to bdd bn fntry to
 * sdripts/symbols.dff bs wfll.
 */
#ifdff PNG_EXPORT_LAST_ORDINAL
  PNG_EXPORT_LAST_ORDINAL(229);
#fndif

#ifdff __dplusplus
}
#fndif

#fndif /* PNG_VERSION_INFO_ONLY */
/* Do not put bnything pbst this linf */
#fndif /* PNG_H */
